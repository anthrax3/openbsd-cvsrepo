head	1.17;
access;
symbols
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.17
date	2015.06.10.09.06.25;	author espie;	state dead;
branches;
next	1.16;
commitid	ZlAd5vdSGFqYIJ4d;

1.16
date	2015.06.08.12.56.26;	author espie;	state Exp;
branches;
next	1.15;
commitid	UcaYGHU4c0oa7PWz;

1.15
date	2015.06.08.10.32.55;	author espie;	state Exp;
branches;
next	1.14;
commitid	I2DUXmoLRD1ECVDm;

1.14
date	2015.06.08.08.51.02;	author espie;	state Exp;
branches;
next	1.13;
commitid	6P28qcYtLnXlJshs;

1.13
date	2015.06.07.12.05.22;	author espie;	state Exp;
branches;
next	1.12;
commitid	QCBfMUw04lhIe4qq;

1.12
date	2015.06.06.15.01.43;	author espie;	state Exp;
branches;
next	1.11;
commitid	ty3gPuo6uYN2mAhZ;

1.11
date	2015.06.01.00.01.48;	author espie;	state Exp;
branches;
next	1.10;
commitid	6Fyd0kMp5zF1mDLm;

1.10
date	2015.05.31.10.38.27;	author espie;	state Exp;
branches;
next	1.9;
commitid	AkyPgIW0wQ5v3Rng;

1.9
date	2015.05.29.09.18.40;	author espie;	state Exp;
branches;
next	1.8;
commitid	45sBd7dMrR0Nbk7Q;

1.8
date	2014.02.08.13.50.58;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2014.02.08.13.37.27;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2014.02.08.13.17.19;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2014.02.08.10.48.42;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.12.10.17.13;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2013.08.24.16.06.12;	author zhuk;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.20.14.09.59;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.13.50.11;	author espie;	state Exp;
branches;
next	;


desc
@@


1.17
log
@bye bye, use check-problems now
@
text
@#!/usr/bin/perl

# $OpenBSD: check-conflicts,v 1.16 2015/06/08 12:56:26 espie Exp $
# Copyright (c) 2000-2005
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# check all packages in the current directory, and report conflicts which
# are not apparent in @@pkgcfl.

use strict;
use warnings;

my ($ports1);
use FindBin;
BEGIN {
	$ports1 = $ENV{PORTSDIR} || '/usr/ports';
}
use lib ("$ports1/infrastructure/lib", "$FindBin::Bin/../lib");

use File::Spec;
use File::Path;
use OpenBSD::PkgCfl;
use OpenBSD::PlistScanner;

package OpenBSD::PackingElement;
sub register
{
}

sub known_page
{
}

sub add_extra_manpage
{
}

package OpenBSD::PackingElement::FileBase;

my $pkg_list = {};
my $seen = {};

sub register 
{
	my ($self, $o, $pkgname) = @@_;

	my $all_conflict = $o->{filehash};

	my $file = File::Spec->canonpath($self->fullname);
	# build one single list for each pkgnames combination
	if (exists $all_conflict->{$file}) {
		$pkg_list->{$all_conflict->{$file}}{$pkgname} ||=
		    [@@{$all_conflict->{$file}}, $pkgname ];
		$all_conflict->{$file} = 
		    $pkg_list->{$all_conflict->{$file}}{$pkgname};
	} elsif (exists $seen->{$file}) {
		$pkg_list->{$seen->{$file}}{$pkgname} ||=
		    [ @@{$seen->{$file}}, $pkgname ];
		$all_conflict->{$file} = 
		    $pkg_list->{$seen->{$file}}{$pkgname};
		delete $seen->{$file};
	} else {
		$pkg_list->{$pkgname} ||= [$pkgname];
		$seen->{$file} = $pkg_list->{$pkgname};
	}
}

package OpenBSD::PackingElement::Dependency;
sub register 
{
	my ($self, $o, $pkgname) = @@_;
	$o->{wanted}{$self->{def}} = 1;
	push @@{$o->{all_deps}{$pkgname}}, $self->{def};
}

package OpenBSD::PackingElement::Manpage;

sub is_dest
{
	my $self = shift;
	return $self->name =~ m/man\/cat[^\/]+\/[^\/]+\.0$/o;
}

sub dest_to_source
{
	my $self = shift;
	my $v = $self->name;
	$v =~ s/(man\/)cat([^\/]+)(\/[^\/]+)\.0$/$1man$2$3.$2/;
	return $v;
}

sub known_page
{
	my ($self, $h) = @@_;
	$h->{File::Spec->canonpath($self->fullname)} = 1;
}

sub add_extra_manpage
{
	my ($self, $known, $plist) = @@_;
	if ($self->is_source) {
		my $dest = $self->source_to_dest;
		my $fullname = $self->cwd."/".$dest;
		my $file = File::Spec->canonpath($fullname);
		if (!$known->{$file}) {
			OpenBSD::PackingElement::Manpage->add($plist, $dest);
			$known->{$file} = 1;
		}
	}
	if ($self->is_dest) {
		my $src = $self->dest_to_source;
		my $fullname = $self->cwd."/".$src;
		my $file = File::Spec->canonpath($fullname);
		if (!$known->{$file}) {
			OpenBSD::PackingElement::Manpage->add($plist, $src);
			$known->{$file} = 1;
		}
	}
}

package CheckConflictScanner;
our @@ISA = (qw(OpenBSD::PlistScanner));

sub add_more_man
{
	my ($self, $plist) = @@_;
	my $knownman = {};
	$plist->known_page($knownman);
	$plist->add_extra_manpage($knownman, $plist);
}

sub register_plist
{
	my ($self, $plist) = @@_;
	$self->{conflicts}{$plist->pkgname} = 
	    OpenBSD::PkgCfl->make_conflict_list($plist);
	if ($self->ui->opt('e')) {
		$self->add_more_man($plist);
	}
	$self->{got}{$plist->pkgname} = 1;
	$plist->register($self, $plist->pkgname);
}

sub reader
{
	my ($self, $rdone) = @@_;
	return
	    sub {
		my ($fh, $cont) = @@_;
		local $_;
		while (<$fh>) {
			return if m/^\=\=\=\> /o;
			next unless m/^\@@(?:cwd|name|info|man|file|lib|shell|bin|conflict|comment\s+pkgpath\=)\b/o || !m/^\@@/o;
			&$cont($_);
		}
		$$rdone = 1;
	    };
}

sub new
{
	my ($class) = @@_;
	my $o = $class->SUPER::new('check-conflicts');
	$o->{filehash} = {};
	$o->{conflicts} = {};
	$o->{all_deps} = {};
	return $o;
}


my $cache3 = {};
my $cache4 = {}; 

sub direct_conflict
{
	my ($conflicts, $pkg, $pkg2) = @@_;

	return $cache3->{$pkg}{$pkg2} //= $conflicts->{$pkg}->conflicts_with($pkg2);
}

sub has_a_conflict
{
	my ($conflicts, $deps, $pkg, $pkg2) = @@_;
	return $cache4->{$pkg}{$pkg2} //= find_a_conflict($conflicts, $deps, $pkg, $pkg2);
}

sub find_a_conflict
{
	my ($conflicts, $deps, $pkg, $pkg2) = @@_;
	return 0 if $pkg eq $pkg2;
	
	if (defined $conflicts->{$pkg} && 
	    direct_conflict($conflicts, $pkg, $pkg2)) {
		return 1;
	}
	if (defined $deps->{$pkg}) {
		for my $dep (@@{$deps->{$pkg}}) {
		    if (has_a_conflict($conflicts, $deps, $dep, $pkg2)) {
			    return 1;
		    }
		}
	}
	if (defined $deps->{$pkg2}) {
		for my $dep (@@{$deps->{$pkg2}}) {
			if (has_a_conflict($conflicts, $deps, $pkg, $dep)) {
				return 1;
			}
		}
	}
	return 0;
}

sub compute_true_conflicts
{
	my ($self, $l) = @@_;
	my $conflicts = $self->{conflicts};
	my $deps = $self->{all_deps};
	# create a list of unconflicting packages.
	my $l2 = [];
	for my $pkg (@@$l) {
		my $keepit = 0;
		for my $pkg2 (@@$l) {
			next if $pkg eq $pkg2;
			if (!(has_a_conflict($conflicts, $deps, $pkg, $pkg2) ||
			    has_a_conflict($conflicts, $deps, $pkg2, $pkg))) {
				$keepit = 1;
				last;
			}
		}
		if ($keepit) {
		    push(@@$l2, $pkg);
		}
	}
	return $l2;
}

sub compute_problems
{
	my ($self) = @@_;

	my $c = {};
	my $c2 = {};
	my $r = {};
	my $cache = {};

	my $h = $self->{filehash};
	my $total = scalar(keys %$h);
	my $i =0;
	while (my ($key, $l) = each %$h) {
		$self->progress->show(++$i, $total);
		if (!defined $c->{$l}) {
			my %s = map {($_, 1)} @@$l;
			$c->{$l} = [sort keys %s];
			$c2->{$l} = join(',', @@{$c->{$l}});
		}
		my $hv = $c2->{$l};
		$l = $c->{$l};
		next if @@$l == 1;
		$cache->{$hv} //= $self->compute_true_conflicts($l);
		my $result = $cache->{$hv};
		if (@@$result != 0) {
			my $newkey = join(',', 
			    sort map { $self->fullname($_) } @@$result);
			if (@@$result == 1) {
				$newkey.="-> was ".join(',', @@$l);
			}
			push(@@{$r->{$newkey}}, $key);
		}
	}
	return $r;
}

sub display_results
{
	my $self = shift;

	$self->progress->set_header("File problems");
	my $result = $self->compute_problems;
	$self->progress->next;
	for my $cfl (sort keys %$result) {
		if (defined $self->{output}) {
			print {$self->{output}} $cfl, "\n";
		}
		$self->ui->say("#1", $cfl);
		for my $f (sort @@{$result->{$cfl}}) {
			$self->ui->say("\t#1", $f);
			if (defined $self->{output}) {
				print {$self->{output}} "\t$f\n";
			}
		}
	}
}

package main;


my $o = CheckConflictScanner->new;
$o->run;

@


1.16
log
@unified dependency tagging, so that both tools can do dependency closure.
Provide -o output option, which also saves the actual useful output somewhere
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.15 2015/06/08 10:32:55 espie Exp $
@


1.15
log
@tweak fullname to put the ! (for current packages at the start)
sort things in a more systematic way.
make sure results are displayed after the progress meter is properly
terminated
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.14 2015/06/08 08:51:02 espie Exp $
d92 1
d160 1
d301 3
d307 3
@


1.14
log
@simpler
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.13 2015/06/07 12:05:22 espie Exp $
d281 1
a281 1
			    map { $self->fullname($_) } @@$result);
d297 1
@


1.13
log
@provide a forwarder to progressmeter, simplifies code
tweak for using in check-common-dirs: specify the reader,
allow a pass after scan.
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.12 2015/06/06 15:01:43 espie Exp $
d88 1
a88 1
package OpenBSD::PackingElement::Depend;
d92 1
a92 3
	if (defined $self->{def}) {
		push @@{$o->{all_deps}{$pkgname}}, $self->{def};
	}
@


1.12
log
@fine-tune display, better progress report when scanning the ports tree
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.11 2015/06/01 00:01:48 espie Exp $
d164 16
d270 1
a270 1
		$self->ui->progress->show(++$i, $total);
d297 1
a297 1
	$self->ui->progress->set_header("File problems");
@


1.11
log
@clean-up unnecessary globals
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.10 2015/05/31 10:38:27 espie Exp $
a41 2
use OpenBSD::PackingList;
use OpenBSD::AddCreateDelete;
@


1.10
log
@make progress on an older projects, scanning plists is a "standard" activity.
refactor it as PlistScanner (done some time ago), and use it in check-conflicts
(I had a stupid bug somewhere, mainly forgot to initialize stuff properly...)
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.9 2015/05/29 09:18:40 espie Exp $
a176 3
# XXX
my $cache = {};
my $cache2 = {};
d198 2
a199 1
	if (defined $conflicts->{$pkg} && direct_conflict($conflicts, $pkg, $pkg2)) {
d221 3
a223 1
	my ($l, $conflicts, $deps) = @@_;
d249 2
d265 1
a265 4
		if (!defined $cache->{$hv}) {
			$cache->{$hv} = compute_true_conflicts($l, 
			    $self->{conflicts}, $self->{all_deps});
		}
d273 1
a273 1
			push(@@{$cache2->{$newkey}}, $key);
d276 1
d284 2
a285 2
	compute_problems($self);
	for my $cfl (sort keys %$cache2) {
d287 1
a287 1
		for my $f (sort @@{$cache2->{$cfl}}) {
@


1.9
log
@fix getting pkgpath in the ports tree case
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.8 2014/02/08 13:50:58 espie Exp $
d31 8
a41 1
use OpenBSD::PackageInfo;
d45 1
d67 3
a69 1
	my ($self, $all_conflict, $all_deps, $pkgname) = @@_;
d93 1
a93 1
	my ($self, $all_conflict, $all_deps, $pkgname) = @@_;
d95 1
a95 1
		push @@{$all_deps->{$pkgname}}, $self->{def};
d144 2
a145 6
package main;

my $cache = {};
my $cache2 = {};
my $cache3 = {};
my $cache4 = {}; 
d149 1
a149 1
	my $plist = shift;
d155 28
d245 1
a245 1
	my ($ui, $h, $conflicts, $deps, $current, $name2path) = @@_;
d250 1
d254 1
a254 1
		$ui->progress->show(++$i, $total);
d264 2
a265 1
			$cache->{$hv} = compute_true_conflicts($l, $conflicts, $deps);
d270 1
a270 2
			    map {$current->{$_} ? "$_!($name2path->{$_})" : 
			    "$_($name2path->{$_})" } @@$result);
d279 1
a279 32
my $filehash={};
my %dirhash=();
my $conflicts={};
my $dephash={};
my $name2path={};
my $current={};

our ($opt_d, $opt_e, $opt_p, $opt_v);

sub handle_plist
{
	my ($ui, $filename, $plist) = @@_;
	if (!defined $plist) {
		$ui->errsay("Error reading #1", $filename);
		return;
	}
	if (!defined $plist->pkgname) {
		$ui->errsay("Invalid package #1", $filename);
		return;
	}
	$name2path->{$plist->pkgname} = $plist->fullpkgpath;
	$ui->say("#1 -> #2", $filename, $plist->pkgname) if $ui->verbose;
	$plist->forget;
	$conflicts->{$plist->pkgname} = 
	    OpenBSD::PkgCfl->make_conflict_list($plist);
	if ($opt_e) {
		add_more_man($plist);
	}
	$plist->register($filehash, $dephash, $plist->pkgname);
}

sub handle_file
d281 1
a281 17
	my ($ui, $filename) = @@_;
	return if -d $filename;
	my $plist = OpenBSD::PackingList->fromfile($filename);
	handle_plist($ui, $filename, $plist);
}

sub handle_portspath
{
	my ($ui, $path) = @@_;
	foreach (split(/:/, $path)) {
		handle_portsdir($ui, $_);
	}
}

sub find_current_pkgnames
{
	my ($ui, $dir) = @@_;
d283 6
a288 27
	my $done = {};
	my @@todo = ();
	my $make = $ENV{MAKE} || 'make';

	for my $path (values %$name2path) {
		next if $done->{$path};
		push(@@todo, $path);
	}
	my $total = scalar(@@todo);
	my $i = 0;
	while (my @@l = (splice @@todo, 0, 1000)) {
		my $pid = open(my $output, "-|");
		if ($pid == 0) {
			$DB::inhibit_exit = 0;
			chdir($dir) or die "bad directory $dir";
			$ENV{SUBDIR} = join(' ', @@l);
			open STDERR, ">", "/dev/null";
			exec { $make } 
			    ("make", 'show=FULLPKGNAME${SUBPACKAGE}', 
				'REPORT_PROBLEM=true', 'ECHO_MSG=:');
			exit(1);
		}
		while (<$output>) {
			$i++;
			$ui->progress->show($i, $total);
			chomp;
			$current->{$_} = 1;
a289 1
		close($output);
d293 1
a293 4
sub handle_portsdir
{
	my ($ui, $dir) = @@_;
	my $make = $ENV{MAKE} || 'make';
a294 19
	open(my $input, "cd $dir && $make print-plist-all |");
	my $done = 0;
	while (!$done) {
		my $plist = OpenBSD::PackingList->read($input, sub {
			my ($fh, $cont) = @@_;
			local $_;
			while (<$fh>) {
				return if m/^\=\=\=\> /o;
				next unless m/^\@@(?:cwd|name|info|man|file|lib|shell|bin|conflict|comment\s+pkgpath\=)\b/o || !m/^\@@/o;
				&$cont($_);
			}
			$done = 1;
		});
		if (defined $plist && $plist->pkgname()) {
			handle_plist($ui, $dir, $plist);
			$ui->progress->working(10);
		}
	}
}
d296 2
a297 2
my $ui = OpenBSD::AddCreateDelete::State->new('check-conflicts');
$ui->handle_options('d:ep:', '[-ve] [-d plist_dir] [-p ports_dir] [pkgname ...]');
a298 48
$ui->progress->set_header("Scanning");
$opt_d = $ui->opt('d');
$opt_p = $ui->opt('p');
$opt_e = $ui->opt('e');
my $portpath;
if ($opt_d) {
	opendir(my $dir, $opt_d);
	my @@l = readdir $dir;
	closedir($dir);

	$ui->progress->for_list("Scanning", \@@l,
	    sub {
	    	my $pkgname = shift;
		return if $pkgname eq '.' or $pkgname eq '..';
		handle_file($ui, "$opt_d/$pkgname");
	    });
} elsif ($opt_p) {
	handle_portspath($ui, $opt_p);
	$portpath = 1;
} elsif (@@ARGV==0) {
	@@ARGV=(<*.tgz>);
}

if (@@ARGV > 0) {
	$ui->progress->for_list("Scanning", \@@ARGV,
	    sub {
		my $pkgname = shift;
		my $true_package = $ui->repo->find($pkgname);
		return unless $true_package;
		my $dir = $true_package->info;
		$true_package->close;
		handle_file($ui, $dir.CONTENTS);
		rmtree($dir);
	    });
}

if (!$portpath && $opt_p) {
	$ui->progress->set_header("Computing current pkgnames");
	find_current_pkgnames($ui, $opt_p);
}
$ui->progress->set_header("File problems");
compute_problems($ui, $filehash, $conflicts, $dephash, $current, $name2path);
for my $cfl (sort keys %$cache2) {
	$ui->say("#1", $cfl);
	for my $f (sort @@{$cache2->{$cfl}}) {
		$ui->say("\t#1", $f);
	}
}
@


1.8
log
@actual progress display... oh, and for_list does the next too :(
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.7 2014/02/08 13:37:27 espie Exp $
d340 1
a340 1
				next unless m/^\@@(?:cwd|name|info|man|file|lib|shell|bin|conflict|comment\s+subdir\=)\b/o || !m/^\@@/o;
@


1.7
log
@add (pkgpaths) to pkgnames
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.6 2014/02/08 13:17:19 espie Exp $
d299 7
a305 1
	my $code = sub {
d310 1
a310 1
			$ENV{SUBDIR} = join(' ', @@todo);
d318 2
a319 1
			$ui->progress->working(10);
a323 11
	};
	for my $path (values %$name2path) {
		next if $done->{$path};
		push(@@todo, $path);
		if (@@todo >= 1000) {
			&$code;
			@@todo = ();
		}
	}
	if (@@todo > 0) {
		&$code;
a390 1
$ui->progress->next;
@


1.6
log
@for plists, skip directories (history) and report ba plists.

user improvement:
with an extra -d, also scan the directories for "current" pkgnames,
and display a ! in pkgnames that are current while reporting conflicts.
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.5 2014/02/08 10:48:42 espie Exp $
d211 1
a211 1
	my ($ui, $h, $conflicts, $deps, $current) = @@_;
d234 2
a235 1
			    map {$current->{$_} ? $_."!" : $_} @@$result);
d260 5
a279 5
	if (!defined $plist->pkgname) {
		$ui->errsay("Invalid package #1", $filename);
		return;
	}
	$name2path->{$plist->pkgname} = $plist->fullpkgpath;
d401 1
a401 1
compute_problems($ui, $filehash, $conflicts, $dephash, $current);
@


1.5
log
@style
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.4 2013/10/12 10:17:13 espie Exp $
d211 1
a211 1
	my ($ui, $h, $conflicts, $deps) = @@_;
d233 2
a234 1
			my $newkey = join(',', @@$result);
d247 3
d272 1
d274 5
d290 40
d362 1
d376 1
d381 12
a392 10
$ui->progress->for_list("Scanning", \@@ARGV,
    sub {
	my $pkgname = shift;
	my $true_package = $ui->repo->find($pkgname);
	return unless $true_package;
	my $dir = $true_package->info;
	$true_package->close;
	handle_file($ui, $dir.CONTENTS);
	rmtree($dir);
    });
d395 4
d400 1
a400 1
compute_problems($ui, $filehash, $conflicts, $dephash);
@


1.4
log
@option -e for extra conflicts
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.3 2013/08/24 16:06:12 zhuk Exp $
d64 1
a64 1
		$pkg_list->{$all_conflict->{$file}}->{$pkgname} ||=
d67 1
a67 1
		    $pkg_list->{$all_conflict->{$file}}->{$pkgname};
d69 1
a69 1
		$pkg_list->{$seen->{$file}}->{$pkgname} ||=
d72 1
a72 1
		    $pkg_list->{$seen->{$file}}->{$pkgname};
@


1.3
log
@Add support for specifying multiple port directories in check-conflicts -p.
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.2 2010/08/20 14:09:59 espie Exp $
d44 8
d89 44
d141 8
d246 1
a246 1
our ($opt_d, $opt_p, $opt_v);
d259 3
d306 1
a306 1
$ui->handle_options('d:p:', '[-v] [-d plist_dir] [-p ports_dir] [pkgname ...]');
d311 1
@


1.2
log
@finish renaming check-conflicts, add (c), document check-conflicts
@
text
@d3 1
a3 1
# $OpenBSD: check-conflicts,v 1.1 2010/08/20 13:50:11 espie Exp $
d209 8
d260 1
a260 1
	handle_portsdir($ui, $opt_p);
@


1.1
log
@copy some stuff to the new organization, rename find-all-conflicts to
check-conflicts for consistency
@
text
@d3 1
a3 1
# $OpenBSD: find-all-conflicts,v 1.20 2010/06/30 11:11:19 espie Exp $
d234 1
a234 1
my $ui = OpenBSD::AddCreateDelete::State->new('find-all-conflicts');
@

