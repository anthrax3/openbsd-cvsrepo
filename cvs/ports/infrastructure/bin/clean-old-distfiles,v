head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2;
locks; strict;
comment	@# @;


1.7
date	2016.01.24.20.26.56;	author espie;	state Exp;
branches;
next	1.6;
commitid	USTI1l53usAUK8KY;

1.6
date	2013.08.07.09.21.09;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.23.13.27.08;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.16.08.15.43;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.29.14.35.40;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.29.13.03.05;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.27.19.03.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@also zap directories, based on a remark from naddy@@
okay naddy@@
@
text
@#! /usr/bin/perl
# ex:ts=8 sw=4:
# $OpenBSD: clean-old-distfiles,v 1.6 2013/08/07 09:21:09 espie Exp $
#
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use feature qw(say);
use OpenBSD::Getopt;
use OpenBSD::md5;
use File::Basename;

sub usage
{
	my $err = shift;
	my $prog = $0;
	$prog =~ s/.*\///;
	$err =~ s/\sat.*//s;
	say STDERR "$prog: $err";
	say STDERR "Usage: $prog [-nv] [-e except] [-h history] [cutdate]";
	exit 1;
}

our ($opt_v, $opt_n, $opt_e, $opt_h);
eval { getopts('e:h:vn'); };
if ($@@) {
	usage($@@);
}

if (@@ARGV > 1) {
	usage("too many arguments");
}

if ($opt_h) {
	$opt_n = 1;
	$opt_v = 1;
}

sub really_remove
{
	my $file = shift;
	say "rm $file" if $opt_v;
	return if $opt_n;
	if (unlink $file) {
		my $dirname = $file;
		do {
			$dirname = File::Basename::dirname $dirname;
		} while (rmdir $dirname);
	} else {
		say STDERR "Couldn't remove $file: $!";
	}
}

sub remove_file
{
	my ($file, $sha) = @@_;
	# let's do i-node caching to avoid doing the same file twice.
	my $basename = $file;
	my $inode;
	$basename =~ s/^.*\///; # remove directory
	$sha =~ m/(..)/;
	my $link = "by_cipher/sha256/$1/$sha/$basename";
	if (-f $link) {
		$inode = (stat _)[1];
		really_remove($link);
	}
	if (-f $file) {
		my $inode2 = (stat _)[1];
		if (defined $inode && $inode2 == $inode) {
			really_remove($file);
		} else {
			my $ck = OpenBSD::sha->new($file);
			if ($ck->stringize eq $sha) {
				really_remove($file);
			} else {
				say STDERR "SHA256 mismatch on $file: ", 
				    $ck->stringize, " vs $sha";
			}
	    	}
    	}
}

my $cutdate = $ARGV[0];

my $PORTSDIR = $ENV{PORTSDIR} // '/usr/ports';
my $DISTDIR = $ENV{DISTDIR} // "$PORTSDIR/distfiles";
chdir($DISTDIR) or die "Can't chdir to $DISTDIR";

my $history = $opt_h ? $opt_h : 'history';

open my $fh, '<', $history or die "No $history to prune";
my $fh2;

unless ($opt_n) {
	open $fh2, '>', "history.new" or die "Can't write new history";
}

my $except = {};

if ($opt_e) {
	open(my $e, '<', $opt_e) or die "Can't read exception file $opt_e: $!";

	while (<$e>) {
		chomp;
		$except->{$_} = 1;
	}
	close $e;
}

while (<$fh>) {
	my ($ts, $file, $sha);
	if (m/^(\d+)\s+SHA256\s*\((.*)\) \= (.*)$/) {
		($ts, $file, $sha) = ($1, $2, $3);
	} else {
		die "Bad history line $_";
	}
	if ($except->{$file} || (defined $cutdate && $ts > $cutdate)) {
		if ($fh2) {
			print $fh2 $_;
		}
	} else {
		remove_file($file, $sha);
	}
}
close $fh;

if ($fh2) {
	close $fh2;
	unlink('history');
	rename('history.new', 'history');
}
@


1.6
log
@show values when mismatch
@
text
@d3 1
a3 1
# $OpenBSD: clean-old-distfiles,v 1.5 2012/12/23 13:27:08 espie Exp $
d24 1
d57 6
a62 1
	if (!unlink $file) {
@


1.5
log
@cutdate is first parameter, not second.
tighten parenthesis.
add -h history for testing.
@
text
@d3 1
a3 1
# $OpenBSD: clean-old-distfiles,v 1.4 2012/09/16 08:15:43 espie Exp $
d83 2
a84 1
				say STDERR "SHA256 mismatch on $file";
@


1.4
log
@unintentional say + "\n"
@
text
@d3 1
a3 1
# $OpenBSD: clean-old-distfiles,v 1.3 2012/01/29 14:35:40 espie Exp $
d32 1
a32 1
	say STDERR "Usage: $prog [-nv] [-e except] [cutdate]";
d36 2
a37 2
our ($opt_v, $opt_n, $opt_e);
eval { getopts('e:vn'); };
d46 5
d89 1
a89 1
my $cutdate //=  $ARGV[1];
d95 3
a97 1
open my $fh, '<', "history" or die "No history to prune";
d123 1
a123 1
	if ($except->{$file} || defined $cutdate && $ts > $cutdate) {
@


1.3
log
@proper usage diagnostic.
@
text
@d3 1
a3 1
# $OpenBSD: clean-old-distfiles,v 1.2 2012/01/29 13:03:05 espie Exp $
d78 1
a78 1
				say STDERR "SHA256 mismatch on $file\n";
@


1.2
log
@allow a list of exceptions, for easier management of distfiles from ports not
yet linked to the build.
@
text
@d3 1
a3 1
# $OpenBSD: clean-old-distfiles,v 1.1 2012/01/27 19:03:02 espie Exp $
d25 11
d37 8
a44 1
getopts('e:vn');
@


1.1
log
@make new mirroring with dpb feature-complete, provide a small perl script that
can remove old distfiles in a smart way according to history.
@
text
@d3 1
a3 1
# $OpenBSD$
d25 2
a26 2
our ($opt_v, $opt_n);
getopts('vn');
d79 12
d98 1
a98 1
	if (defined $cutdate && $ts > $cutdate) {
a112 1

@

