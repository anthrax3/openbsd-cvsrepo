head	1.113;
access;
symbols
	OPENBSD_6_1:1.110.0.4
	OPENBSD_6_1_BASE:1.110
	OPENBSD_6_0:1.110.0.2
	OPENBSD_6_0_BASE:1.110
	OPENBSD_5_9:1.102.0.2
	OPENBSD_5_9_BASE:1.102
	OPENBSD_5_8:1.99.0.4
	OPENBSD_5_8_BASE:1.99
	OPENBSD_5_7:1.93.0.2
	OPENBSD_5_7_BASE:1.93
	OPENBSD_5_6:1.86.0.2
	OPENBSD_5_6_BASE:1.86
	OPENBSD_5_5:1.71.0.2
	OPENBSD_5_5_BASE:1.71;
locks; strict;
comment	@# @;


1.113
date	2017.07.14.07.42.51;	author zhuk;	state Exp;
branches;
next	1.112;
commitid	efPZZ7KHTsWmga17;

1.112
date	2017.05.26.20.55.09;	author jca;	state Exp;
branches;
next	1.111;
commitid	b8HV0tro6YPP1syT;

1.111
date	2017.05.26.20.40.31;	author zhuk;	state Exp;
branches;
next	1.110;
commitid	AjLe4fEcWVMLhP9D;

1.110
date	2016.04.28.17.30.28;	author zhuk;	state Exp;
branches;
next	1.109;
commitid	4VbptkTlcufUdXRK;

1.109
date	2016.04.26.10.56.59;	author sthen;	state Exp;
branches;
next	1.108;
commitid	FbIvW5WdGqu5h4SS;

1.108
date	2016.04.21.15.51.33;	author zhuk;	state Exp;
branches;
next	1.107;
commitid	JRPGvixBECxsDzdg;

1.107
date	2016.03.28.15.38.21;	author zhuk;	state Exp;
branches;
next	1.106;
commitid	oaOnZwD7TmWYc49v;

1.106
date	2016.03.28.12.40.06;	author zhuk;	state Exp;
branches;
next	1.105;
commitid	2NXA1HB0juhtk0Ts;

1.105
date	2016.03.23.16.30.38;	author zhuk;	state Exp;
branches;
next	1.104;
commitid	ZpwAuR9i1G2XYNQU;

1.104
date	2016.03.22.21.25.53;	author naddy;	state Exp;
branches;
next	1.103;
commitid	ixl9q9cDDCeTlQbi;

1.103
date	2016.03.10.12.20.06;	author naddy;	state Exp;
branches;
next	1.102;
commitid	FvuwTC2rqnVYRjNS;

1.102
date	2015.12.26.20.56.44;	author zhuk;	state Exp;
branches;
next	1.101;
commitid	uCvhmEfowCH2a95J;

1.101
date	2015.12.11.22.12.25;	author zhuk;	state Exp;
branches;
next	1.100;
commitid	MyIturpCPT0kWoUL;

1.100
date	2015.09.13.10.02.09;	author zhuk;	state Exp;
branches;
next	1.99;
commitid	E9ywxjjf7f2AMZte;

1.99
date	2015.07.05.12.26.26;	author zhuk;	state Exp;
branches;
next	1.98;
commitid	cGsgMDOS6UG9otCW;

1.98
date	2015.05.26.19.12.11;	author rpe;	state Exp;
branches;
next	1.97;
commitid	luzYkCHgyC3EXPet;

1.97
date	2015.04.15.08.15.42;	author zhuk;	state Exp;
branches;
next	1.96;
commitid	S4PHhYyv5z9oNafw;

1.96
date	2015.04.12.18.37.23;	author zhuk;	state Exp;
branches;
next	1.95;
commitid	tH0tBi2OPSB3oZyc;

1.95
date	2015.04.04.17.23.52;	author sthen;	state Exp;
branches;
next	1.94;
commitid	t0JEiLMOEkO9M224;

1.94
date	2015.03.27.08.09.54;	author ajacoutot;	state Exp;
branches;
next	1.93;
commitid	AGs6WjboFvzE0vks;

1.93
date	2014.11.13.15.35.50;	author zhuk;	state Exp;
branches;
next	1.92;
commitid	s4YK9vpTw1ZWbfp2;

1.92
date	2014.08.12.01.44.08;	author zhuk;	state Exp;
branches;
next	1.91;
commitid	j3v6yZX704qJdZCa;

1.91
date	2014.08.12.00.37.44;	author zhuk;	state Exp;
branches;
next	1.90;
commitid	4d52jEvdzoo14BWX;

1.90
date	2014.08.12.00.30.35;	author zhuk;	state Exp;
branches;
next	1.89;
commitid	uFYjnpC8TkZJtqNS;

1.89
date	2014.08.10.20.46.04;	author zhuk;	state Exp;
branches;
next	1.88;
commitid	xWpxVDatRHPyjUrG;

1.88
date	2014.08.10.20.41.54;	author zhuk;	state Exp;
branches;
next	1.87;
commitid	gaimPrG6MJXpwAVs;

1.87
date	2014.08.10.20.39.03;	author zhuk;	state Exp;
branches;
next	1.86;
commitid	b6Tn8nfMILvtj3jr;

1.86
date	2014.07.23.22.12.41;	author zhuk;	state Exp;
branches;
next	1.85;
commitid	RK2ub81D9TPYg0FT;

1.85
date	2014.07.23.22.11.20;	author zhuk;	state Exp;
branches;
next	1.84;
commitid	g7FVm6Jrds2D6JOb;

1.84
date	2014.07.10.09.57.13;	author zhuk;	state Exp;
branches;
next	1.83;
commitid	aW90y4b8Sa3baKva;

1.83
date	2014.07.08.09.48.07;	author zhuk;	state Exp;
branches;
next	1.82;
commitid	G7IQ50tY7cWh08c4;

1.82
date	2014.05.19.00.57.54;	author zhuk;	state Exp;
branches;
next	1.81;

1.81
date	2014.05.09.20.34.36;	author kirby;	state Exp;
branches;
next	1.80;

1.80
date	2014.05.08.17.07.46;	author zhuk;	state Exp;
branches;
next	1.79;

1.79
date	2014.05.08.15.41.55;	author zhuk;	state Exp;
branches;
next	1.78;

1.78
date	2014.05.08.15.39.49;	author zhuk;	state Exp;
branches;
next	1.77;

1.77
date	2014.05.08.07.02.33;	author zhuk;	state Exp;
branches;
next	1.76;

1.76
date	2014.05.07.22.27.06;	author zhuk;	state Exp;
branches;
next	1.75;

1.75
date	2014.05.07.21.57.00;	author zhuk;	state Exp;
branches;
next	1.74;

1.74
date	2014.05.06.11.00.55;	author zhuk;	state Exp;
branches;
next	1.73;

1.73
date	2014.04.27.17.57.14;	author zhuk;	state Exp;
branches;
next	1.72;

1.72
date	2014.04.19.17.20.37;	author zhuk;	state Exp;
branches;
next	1.71;

1.71
date	2014.02.09.19.26.25;	author zhuk;	state Exp;
branches;
next	1.70;

1.70
date	2014.02.09.18.11.13;	author zhuk;	state Exp;
branches;
next	1.69;

1.69
date	2014.02.09.17.24.48;	author zhuk;	state Exp;
branches;
next	1.68;

1.68
date	2014.02.09.16.09.55;	author zhuk;	state Exp;
branches;
next	1.67;

1.67
date	2014.02.09.15.44.20;	author zhuk;	state Exp;
branches;
next	1.66;

1.66
date	2014.02.09.15.19.32;	author zhuk;	state Exp;
branches;
next	1.65;

1.65
date	2014.02.04.21.28.30;	author zhuk;	state Exp;
branches;
next	1.64;

1.64
date	2014.02.04.21.18.14;	author zhuk;	state Exp;
branches;
next	1.63;

1.63
date	2014.02.03.22.13.55;	author zhuk;	state Exp;
branches;
next	1.62;

1.62
date	2014.01.26.01.06.40;	author zhuk;	state Exp;
branches;
next	1.61;

1.61
date	2014.01.25.10.08.00;	author zhuk;	state Exp;
branches;
next	1.60;

1.60
date	2014.01.13.11.47.31;	author zhuk;	state Exp;
branches;
next	1.59;

1.59
date	2014.01.11.16.42.01;	author zhuk;	state Exp;
branches;
next	1.58;

1.58
date	2013.12.30.12.29.25;	author zhuk;	state Exp;
branches;
next	1.57;

1.57
date	2013.12.29.16.59.06;	author zhuk;	state Exp;
branches;
next	1.56;

1.56
date	2013.12.29.07.07.25;	author zhuk;	state Exp;
branches;
next	1.55;

1.55
date	2013.12.28.22.29.50;	author zhuk;	state Exp;
branches;
next	1.54;

1.54
date	2013.12.21.11.47.20;	author zhuk;	state Exp;
branches;
next	1.53;

1.53
date	2013.12.21.08.59.30;	author zhuk;	state Exp;
branches;
next	1.52;

1.52
date	2013.12.11.16.07.44;	author zhuk;	state Exp;
branches;
next	1.51;

1.51
date	2013.12.11.15.54.03;	author zhuk;	state Exp;
branches;
next	1.50;

1.50
date	2013.12.11.15.53.07;	author zhuk;	state Exp;
branches;
next	1.49;

1.49
date	2013.12.11.13.55.34;	author zhuk;	state Exp;
branches;
next	1.48;

1.48
date	2013.12.10.19.08.49;	author zhuk;	state Exp;
branches;
next	1.47;

1.47
date	2013.11.28.15.48.29;	author zhuk;	state Exp;
branches;
next	1.46;

1.46
date	2013.11.28.13.38.01;	author zhuk;	state Exp;
branches;
next	1.45;

1.45
date	2013.11.12.11.24.21;	author zhuk;	state Exp;
branches;
next	1.44;

1.44
date	2013.11.10.14.56.41;	author naddy;	state Exp;
branches;
next	1.43;

1.43
date	2013.11.09.23.27.30;	author naddy;	state Exp;
branches;
next	1.42;

1.42
date	2013.11.07.08.18.16;	author ajacoutot;	state Exp;
branches;
next	1.41;

1.41
date	2013.11.01.10.43.40;	author zhuk;	state Exp;
branches;
next	1.40;

1.40
date	2013.10.25.23.32.08;	author zhuk;	state Exp;
branches;
next	1.39;

1.39
date	2013.10.19.20.06.14;	author zhuk;	state Exp;
branches;
next	1.38;

1.38
date	2013.10.13.16.54.24;	author zhuk;	state Exp;
branches;
next	1.37;

1.37
date	2013.10.13.16.47.18;	author zhuk;	state Exp;
branches;
next	1.36;

1.36
date	2013.08.27.07.52.15;	author zhuk;	state Exp;
branches;
next	1.35;

1.35
date	2013.08.24.16.15.56;	author zhuk;	state Exp;
branches;
next	1.34;

1.34
date	2013.08.24.15.44.59;	author zhuk;	state Exp;
branches;
next	1.33;

1.33
date	2013.08.23.08.39.51;	author zhuk;	state Exp;
branches;
next	1.32;

1.32
date	2013.08.23.07.45.07;	author zhuk;	state Exp;
branches;
next	1.31;

1.31
date	2013.08.23.01.26.18;	author zhuk;	state Exp;
branches;
next	1.30;

1.30
date	2013.08.23.00.43.20;	author zhuk;	state Exp;
branches;
next	1.29;

1.29
date	2013.08.22.23.30.23;	author zhuk;	state Exp;
branches;
next	1.28;

1.28
date	2013.08.22.22.38.32;	author zhuk;	state Exp;
branches;
next	1.27;

1.27
date	2013.08.22.22.37.17;	author zhuk;	state Exp;
branches;
next	1.26;

1.26
date	2013.08.22.21.16.04;	author zhuk;	state Exp;
branches;
next	1.25;

1.25
date	2013.08.22.21.06.00;	author zhuk;	state Exp;
branches;
next	1.24;

1.24
date	2013.08.22.20.56.14;	author zhuk;	state Exp;
branches;
next	1.23;

1.23
date	2013.08.22.20.43.10;	author zhuk;	state Exp;
branches;
next	1.22;

1.22
date	2013.08.22.20.33.16;	author zhuk;	state Exp;
branches;
next	1.21;

1.21
date	2013.08.22.17.44.22;	author zhuk;	state Exp;
branches;
next	1.20;

1.20
date	2013.08.22.16.43.04;	author zhuk;	state Exp;
branches;
next	1.19;

1.19
date	2013.08.22.14.08.12;	author zhuk;	state Exp;
branches;
next	1.18;

1.18
date	2013.08.22.13.56.16;	author zhuk;	state Exp;
branches;
next	1.17;

1.17
date	2013.08.22.13.29.07;	author zhuk;	state Exp;
branches;
next	1.16;

1.16
date	2013.08.22.13.23.54;	author zhuk;	state Exp;
branches;
next	1.15;

1.15
date	2013.08.22.13.20.17;	author zhuk;	state Exp;
branches;
next	1.14;

1.14
date	2013.08.22.12.53.49;	author zhuk;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.22.11.31.43;	author zhuk;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.22.10.43.15;	author zhuk;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.22.10.41.20;	author zhuk;	state Exp;
branches;
next	1.10;

1.10
date	2013.08.22.09.44.17;	author zhuk;	state Exp;
branches;
next	1.9;

1.9
date	2013.08.22.01.01.11;	author zhuk;	state Exp;
branches;
next	1.8;

1.8
date	2013.08.22.00.56.00;	author zhuk;	state Exp;
branches;
next	1.7;

1.7
date	2013.08.22.00.30.17;	author zhuk;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.21.23.46.00;	author zhuk;	state Exp;
branches;
next	1.5;

1.5
date	2013.08.21.21.53.29;	author zhuk;	state Exp;
branches;
next	1.4;

1.4
date	2013.08.21.21.08.43;	author zhuk;	state Exp;
branches;
next	1.3;

1.3
date	2013.08.21.21.02.16;	author zhuk;	state Exp;
branches;
next	1.2;

1.2
date	2013.08.21.19.49.32;	author zhuk;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.21.17.00.24;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.113
log
@Catch QML-specific errors, inspired by recently discovered breakage.
@
text
@#!/bin/ksh
#
# $OpenBSD: portcheck,v 1.112 2017/05/26 20:55:09 jca Exp $
# Copyright (c) 2013 Vadim Zhukov
# 
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e
set +X
set -u

usage() {
	echo "usage: ${0##*/} [-dNP] [-p portsdir] [-x glob]" >&2
	echo "       ${0##*/} -A [-dP] [-p portsdir] [-x glob] [subdir ...]" >&2
	exit 1
}


############################################################
# Parsing command line options
#

existing_port=true
ignore_cvs=true
plist_checks=true
portsdir=
rootrun=false
debugging=false

ignore_list=; unset ignore_list[0]

while getopts "AdNPp:x:" OPT; do
	case $OPT in
	A)
		$existing_port || usage
		if ! $rootrun; then
			ignore_list[${#ignore_list[@@]}]=.cvsignore
			ignore_list[${#ignore_list[@@]}]=.fslckout
			ignore_list[${#ignore_list[@@]}]=.git
			ignore_list[${#ignore_list[@@]}]=.gitignore
			ignore_list[${#ignore_list[@@]}]=.hg
			ignore_list[${#ignore_list[@@]}]=.hgignore
			ignore_list[${#ignore_list[@@]}]=.svn
			ignore_list[${#ignore_list[@@]}]=FINISHED
			ignore_list[${#ignore_list[@@]}]=INDEX
			ignore_list[${#ignore_list[@@]}]=README
			ignore_list[${#ignore_list[@@]}]=README.md
			ignore_list[${#ignore_list[@@]}]=bulk
			ignore_list[${#ignore_list[@@]}]=distfiles
			ignore_list[${#ignore_list[@@]}]=infrastructure
			ignore_list[${#ignore_list[@@]}]=lost+found
			ignore_list[${#ignore_list[@@]}]=mystuff
			ignore_list[${#ignore_list[@@]}]=openbsd-wip
			ignore_list[${#ignore_list[@@]}]=packages
			ignore_list[${#ignore_list[@@]}]=plist
			ignore_list[${#ignore_list[@@]}]=pobj
			ignore_list[${#ignore_list[@@]}]=tests
			ignore_list[${#ignore_list[@@]}]=update
		fi
		rootrun=true
		;;

	d)
		debugging=true
		;;

	N)
		$rootrun && usage
		existing_port=false
		ignore_cvs=false
		;;

	P)
		plist_checks=false
		;;

	p)
		portsdir=$OPTARG
		;;

	x)
		set -A ignore_list -- "${ignore_list[@@]}" "$OPTARG"
		;;

	*)
		usage
		;;
	esac
done

if ! $rootrun && [[ -n $portsdir && ${PWD##"$portsdir"} == "$PWD" ]]; then
	cat >&2 <<EOE
${0##*/}: current directory does not seem to be under the
specified root directory: $portsdir.
EOE
	exit 3
fi

shift $(($OPTIND - 1))
(($# > 0)) && ! $rootrun && usage
(($# == 0)) && set -- .

############################################################
# Detect path to root of directory tree of current port(s) and put it
# in $portsdir, unless it was set by user above. As a last resort, we
# use some heuristics based on the commonly used names.
#
# We also have a $pkgpath variable, that represents subdirectory under
# root ports directory where the port(s) will be imported. In case we
# use heuristics for determining $portsdir, we'll set up $pkgpath, too,
# since we would get this info anyway.
#
# In make_args we write PORTSDIR_PATH override, that allows us to run
# even in ports directory that is not on the PORTSDIR_PATH. This is
# useful, for example, when you check your port on cvs.openbsd.org,
# where you cannot just override mk.conf.
#

pkgpath=

if [[ -z $portsdir ]]; then
	# idea from DPB/Vars.pm
	test_mf=$(cat <<EOF
COMMENT = test
CATEGORIES = test
PKGPATH = test/a
DISTNAME = test
PERMIT_PACKAGE_CDROM=Yes
IGNORE=Yes
_MAKEFILE_INC_DONE=Yes
ECHO_MSG=:
.include <bsd.port.mk>
SIGNING_PARAMETERS ?=
EOF
	)
	IFS=:
	set -A portsdir_path -- \
		$( (echo "$test_mf" | make -C / -f - show=PORTSDIR_PATH 2>/dev/null) || true)
	unset IFS
	if ((${#portsdir_path[@@]} > 0)); then
		for p in "${portsdir_path[@@]}"; do
			if [[ -z $portsdir && ${PWD#"$p"} != "$PWD" ]]; then
				portsdir=$p
			elif [[ -n $portsdir && ${PWD#"$p"} != "$PWD" &&
			     $p > $portsdir ]]; then
				portsdir=$p
			fi
		done
	fi
fi

if [[ -z $portsdir ]]; then
	# heuristics mode ON
	pkgpath=${PWD##*/ports/*(mystuff/|openbsd-wip/)}
	portsdir=${PWD%"/$pkgpath"}
fi

if [[ -z $portsdir ]]; then
	cat >&2 <<EOE
${0##*/}: could not detect root ports directory. Please provide
one with -p option.
EOE
	exit 2
fi

# This way we can run all checks even on cvs.openbsd.org and/or
# when SKIPDIR framework is used
set -A make_args -- \
	SKIPDIR= STARTAFTER= STARTDIR= \
	MASTER_SITE_OPENBSD= \
	PORTSDIR_PATH="$portsdir:$(cd /usr/ports && make -V PORTSDIR_PATH || true)"

if $rootrun; then
	cd -- "$portsdir"
	echo "scanning ports under the $portsdir" >&2
fi

############################################################
# Support for SKIPDIR, STARTDIR and STARTAFTER, see ports(7)
#

SKIPDIR=${SKIPDIR:-}
STARTDIR=${STARTDIR:-}
STARTAFTER=${STARTAFTER:-}
if [[ -n $STARTAFTER ]]; then
	STARTDIR=$STARTAFTER
	SKIPDIR="$SKIPDIR $STARTAFTER"
fi

path_parts_count() {
	(IFS=/; set -- $1; echo $#)
}

# true if directory given should be skipped based on STARTDIR
# and/or SKIPDIR variable
skip_dir() {
	$rootrun || return 1
	local dir=$(readlink -f "$1")
	dir=${dir##$portsdir*(/)}
	local startpartscount=$(path_parts_count "$STARTDIR")
	local dirpartscount=$(path_parts_count "$dir")
	if ((dirpartscount >= startpartscount)); then
		[[ -n $STARTDIR && $dir < $STARTDIR ]] && return 0
	fi
	local d
	for d in $SKIPDIR; do
		[[ $d == "$dir" ]] && return 0
	done
	return 1
}

############################################################
# List of well-known top-level port categories
# in a form usable in pattern matching: "foo|bar|baz"
#

top_level_categories=$(xargs <<EOF | sed -e 's/ /|/g'
archivers
astro
audio
base
benchmarks
biology
books
cad
chinese
comms
converters
databases
devel
editors
education
emulators
fonts
games
geo
graphics
inputmethods
japanese
java
korean
lang
mail
math
meta
misc
multimedia
net
news
perl5
plan9
print
productivity
security
shells
sysutils
telephony
tests
textproc
www
x11
EOF
)

############################################################
# List of variables that should not go into port Makefiles
#

user_settings=$(xargs <<EOF | sed -e 's/ /|/g'
BASELOCALSTATEDIR
BASESYSCONFDIR
BATCH
BUILD_ONCE
BULK
BULK_COOKIES_DIR
CHECKSUM_PACKAGES
CHECK_LIB_DEPENDS
COPTS
CXXOPTS
DISTDIR
ECHO_MSG
ECHO_REORDER
FAKEOBJDIR
FETCH_CMD
FETCH_PACKAGES
FETCH_SYMLINK_DISTFILES
FORCE_UPDATE
FTP_PACKAGES
IGNORE_IS_FATAL
IGNORE_SILENT
INTERACTIVE
LIST_DB
LOCKDIR
LOCK_VERBOSE
MASTER_SITE_BACKUP
MASTER_SITE_OVERRIDE
NO_CHECKSUM
NO_DEPENDS
NO_IGNORE
PACKAGE_REPOSITORY
PKG_ADD
PKG_CREATE
PKG_DBDIR
PKG_DELETE
PKG_INFO
REFETCH
SIGNING_PARAMETERS
SUDO
TEMPLATES
TRY_BROKEN
UNLOCK_CMD
UPDATE_COOKIES_DIR
USE_CCACHE
VARBASE
WARNINGS
EOF
)

############################################################
# Check and fail routines
#

error=false

err() {
	local prefix=
	while (($# > 0)); do
		printf "$prefix%s" "$1" >&2
		prefix=" "
		shift
	done
	echo >&2
	error=true
}

err_duplicated() {
	err "both $2 and some of its parents has $1"
}

err_coredump_found() {
	err "core dump file found: $1"
}

has_subdirs_only() {
	$debugging && echo "CALLED: has_subdirs_only($*)" >&2

	local dir=$1; shift
	ls -A "$dir" | {
		local has_files=false has_dirs=false
		while read F; do
			$ignore_cvs && [[ $F == CVS ]] && continue
			ignoring "$dir/$F" && continue
			if [[ -d $dir/$F ]]; then
				has_dirs=true
			else
				has_files=true
			fi
		done
		$has_dirs && ! $has_files
	}
}

ignoring() {
	((${#ignore_list[*]} > 0)) || return 1
	local iglob
	for iglob in "${ignore_list[@@]}"; do
		[[ ${1#./} == $iglob ]] && return 0
	done
	return 1
}

is_vcs_item() {
	[[ -d "$1" && ${1##*/} == @@(CVS|.fslckout|.git|.hg|.svn) ]]
}

handle_extra_file() {
	ignoring "$1" && return 0

	# avoid warning, e.g., about ".*"
	test -e "$1" || return 0

	if is_vcs_item "$1"; then
		if ! $ignore_cvs || [[ ${1##*/} != CVS ]]; then
			err "VCS item detected: $1"
		fi
	elif [[ -f $1 && $1 == *.core ]]; then
		err_coredump_found "$1"
	elif [[ -d $1 ]]; then
		err "extra directory: $1"
	else
		err "extra file: $1"
	fi
}

# Make a path to .py[co] file looks like as if it's in the same dir
# as the corresponding .py file, and has same basename. E.g.:
#   lib/python3.3/__pycache__/Foo/cpython-33.Bar.pyc
# became:
#   lib/python2.7/Foo/Bar.pyc
# which corresponds to:
#   lib/python2.7/Foo/Bar.py
normalize_pyco() {
	local pyco=$1
	[[ $pyco == *.cpython-+([0-9]).py[co] ]] &&
		pyco=${pyco%.cpython-+([0-9]).py[co]}.${pyco##*.}
	[[ $pyco == */__pycache__/* ]] &&
		pyco=${pyco%/__pycache__/*}/${pyco##*/__pycache__/}
	printf "%s" "$pyco"
}

# Print out a ref to the particular subport/subpackage, if needed.
# Port FLAVORs could also be handled, if provided.
# Usage: portref directory [subpackage [flavor all_flavors]]
portref() {
	local dir=$1; shift
	local subpkg= flavor all_flavors=
	if (($# > 0)); then
		subpkg=$1
		shift
	fi
	if (($# > 0)); then
		flavor=$1
		all_flavors=$2
		shift 2
	fi

	local ref=
	if [[ $dir != . ]]; then
		ref="${dir#./}"
		[[ -n $subpkg && $subpkg != "-" ]] && ref="$ref,$subpkg"
	else
		[[ $subpkg != "-" ]] && ref="$subpkg"
	fi

	if [[ -n $all_flavors ]]; then
		[[ -n $ref ]] && ref="$ref, "
		if [[ -z $flavor ]]; then
			ref="${ref}default FLAVOR"
		else
			ref="${ref}FLAVOR \"$flavor\""
		fi
	fi

	[[ -n $ref ]] && echo "in $ref: "
}

# Contains last SUBST_CMD. Filled by check_port_dir(), used
# by check_port_hier() to lazily call the check_pkg_dir().
last_subst_cmd=

# Checks made:
#   * Whitelist filter of what could be in this directory.
check_port_hier() {
	$debugging && echo "CALLED: check_port_hier($*)" >&2

	local distinfo_lives_upper pkg_lives_upper plist_lives_upper
	local dir=$1; shift
	for opt; do
		# looks unsafe but we do not pass anything except
		# "foo=true" and "foo=false" here
		eval "$opt"
	done

	distinfo_lives_upper=${distinfo_lives_upper:-false}
	pkg_lives_upper=${pkg_lives_upper:-false}
	plist_lives_upper=${plist_lives_upper:-false}

	local distinfo_exists=false
	[[ -f $dir/distinfo ]] && distinfo_exists=true
	$distinfo_exists && $distinfo_lives_upper &&
		err_duplicated distinfo "$dir"

	local pkg_exists=false tell_pkg_exists=$pkg_lives_upper
	if [[ -d $dir/pkg ]]; then
		pkg_exists=true
		tell_pkg_exists=true
	fi

	local plist_exists=false
	ls $dir/pkg/PLIST* >/dev/null 2>&1 && plist_exists=true
	$plist_lives_upper && $plist_exists &&
		err_duplicated "packing list(s)" "$dir"

	$distinfo_lives_upper && distinfo_exists=true
	$plist_lives_upper && plist_exists=true

	local recursive_args
	set -A recursive_args -- \
		distinfo_lives_upper=$distinfo_exists \
		pkg_lives_upper=$tell_pkg_exists \
		plist_lives_upper=$plist_exists

	local F
	for F in "$dir"/* "$dir"/.*; do
		F=${F#./}
		ignoring "$F" && continue

		if is_vcs_item "$F"; then
			if ! $ignore_cvs || [[ ${F##*/} != CVS ]]; then
				err "VCS item detected: $F"
			fi
		elif [[ -d $F ]]; then
			case "${F##*/}" in
			files|patches)
				check_${F##*/}_dir "$F"
				;;

			pkg)
				# Do nothing, pkg_exists is already set,
				# and we need to read SUBST_CMD first.
				;;

			patches?(-*))
				check_patches_dir "$F"
				;;

			*)
				if ! ([[ -f $F/Makefile ]] ||
                                      ls $F/*.port.mk >/dev/null 2>&1) &&
				   ! has_subdirs_only "$F"; then
					# Avoid extra spam
					err "not a port directory: $F"
				else
					local pkgpath_set=false
					[[ -n $pkgpath ]] && pkgpath_set=true
					check_port_dir "$F" "${recursive_args[@@]}"
					$pkgpath_set || pkgpath=${pkgpath%/*}
				fi
				;;
			esac
		else
			case "${F##*/}" in
			Makefile?(.inc)|*.port.mk)
				check_makefile "$F"
				;;

			distinfo)
				;;

			*)
				handle_extra_file "$F"
				;;
			esac
		fi
	done

	$pkg_exists && check_pkg_dir "$dir"/pkg "$last_subst_cmd"

	$existing_port ||
		egrep -q '^ *SUBDIR[[:space:]]*\+?=' "$dir"/Makefile ||
		err missing subdir Makefile
}

# Checks made:
#   * Whitelist filter of what could be in this directory.
check_port_dir() {
	$debugging && echo "CALLED: check_port_dir($*)" >&2

	local dir=$1; shift
	skip_dir "$dir" && return
	local distinfo_lives_upper pkg_lives_upper plist_lives_upper
	for opt; do
		# looks unsafe but we do not pass anything except
		# "foo=true" and "foo=false" here
		eval "$opt"
	done

	distinfo_lives_upper=${distinfo_lives_upper:-false}
	pkg_lives_upper=${pkg_lives_upper:-false}
	plist_lives_upper=${plist_lives_upper:-false}
 
	check_perms_in_dir "$dir"

	if [[ -f $dir/Makefile.inc ]] ||
	   egrep -sq '^ *SUBDIR[[:space:]]*\+?=' "$dir"/Makefile ||
	   has_subdirs_only "$dir"; then
		check_port_hier "${dir#./}" "${@@:-}"
		return
	fi

	local F
	local distinfo_exists=false
	local mk_exists=false
	local pkg_exists=false
	local plist_exists=false
	local portmk_exists=true
	local non_portmk=0

	for F in "$dir"/* "$dir"/.*; do
		F=${F#./}
		ignoring "$F" && continue
		case ${F##*/} in
		Makefile)
			test -f "$F" || err "$F is not a file"
			check_makefile "$F"
			mk_exists=true
			((++non_portmk))
			;;

		distinfo)
			$distinfo_lives_upper && err_duplicated distinfo "$dir"
			distinfo_exists=true
			test -f "$F" || err "$F is not a file"
			((++non_portmk))
			;;

		*.port.mk)
			test -f "$F" || err "$F is not a file"
			check_makefile "$F"
			portmk_exists=true
			;;

		files|patches)
			if [[ -d $F ]]; then
				check_${F##*/}_dir "$F"
			else
				err "$F" is not a directory
			fi
			((++non_portmk))
			;;

		pkg)
			if [[ -d $F ]]; then
				pkg_exists=true
				# Actual check to be done later, we need to gather
				# additional info through "make show=" call.
				ls "$F"/PLIST* >/dev/null 2>&1 &&
					plist_exists=true
				$plist_lives_upper && $plist_exists &&
					err_duplicated "packing list(s)" "$dir"
			else
				err "$F" is not a directory
			fi
			((++non_portmk))
			;;

		*)
			handle_extra_file "$F"
			;;
		esac
	done

	# examples: lang/clang, www/mozilla
	$portmk_exists && ((non_portmk == 0)) && return

	$mk_exists || err no Makefile in "$dir"
	$pkg_exists || $pkg_lives_upper || err "no pkg/ in $dir"
	$distinfo_lives_upper && distinfo_exists=true
	$distinfo_exists || $existing_port || err "no distinfo in $dir"

	# Now gather and check some info via "make show=...".
	# We request all info at once for speed.

	local categories dist_subdir distfiles flavor flavors
	local gh_commit master_sites
	local multi_packages pkgpath_this pseudo_flavor pseudo_flavors
	local shared_libs subst_cmd
	local perm_pkg_cdrom perm_pkg_ftp perm_dist_ftp
	local show_items="CATEGORIES DIST_SUBDIR DISTFILES FLAVOR FLAVORS GH_COMMIT"
	local show_items="$show_items MASTER_SITES MULTI_PACKAGES PKGPATH"
	local show_items="$show_items PSEUDO_FLAVOR PSEUDO_FLAVORS"
	local show_items="$show_items SHARED_LIBS SUBST_CMD"
	local show_items="$show_items PERMIT_PACKAGE_CDROM PERMIT_PACKAGE_FTP"
	local show_items="$show_items PERMIT_DISTFILES_FTP"
	local read_ok=false

	local read_failed=false
	(cd -- "$dir"; make "${make_args[@@]}" show="$show_items" || true) </dev/null |&
	read -pr categories &&
	read -pr dist_subdir &&
	read -pr distfiles &&
	read -pr flavor &&
	read -pr flavors &&
	read -pr gh_commit &&
	read -pr master_sites &&
	read -pr multi_packages &&
	read -pr pkgpath_this &&
	read -pr pseudo_flavor &&
	read -pr pseudo_flavors &&
	read -pr shared_libs &&
	read -pr subst_cmd &&
	read -pr perm_pkg_cdrom &&
	read -pr perm_pkg_ftp &&
	read -pr perm_dist_ftp &&
	read_ok=true
	if $read_ok; then
		exec 3<&p
		exec 3<&-
		wait
	else
		error=true
		return
	fi

	pseudo_flavor=$(echo "$pseudo_flavor" | sed -e 's/,/ /g')
	pseudo_flavor=${pseudo_flavor##" "}

	local f pf found

	local check_flavors=
	[[ $flavor != "$pseudo_flavor" ]] && unset check_flavors[0]

	for f in $flavors; do
		for pf in $pseudo_flavors; do
			[[ $f == "$pf" ]] && continue 2
		done
		[[ $f == debug ]] && continue     # XXX
		check_flavors[${#check_flavors[@@]}]=$f
	done

	check_categories "$dir" $categories
	check_distfiles "$dir" "$dist_subdir" $distfiles
	check_master_sites "$dir" $master_sites
	check_permit_dist "$dir" "$perm_pkg_cdrom" "$perm_pkg_ftp" \
	    "$perm_dist_ftp"
	$pkg_exists && check_pkg_dir "$dir"/pkg "$subst_cmd"
	$existing_port || check_shlibs_versions "$dir" $shared_libs

	if [[ -n $gh_commit ]]; then
		local ghclen=$(echo -n "$gh_commit" | wc -c)
		if ((ghclen != 40)); then
			err "GH_COMMIT should be in full form (40 characters)"
		fi
	fi

	for _s in $multi_packages; do
		sub_checks "$dir" "$_s" "${check_flavors[@@]}"
	done

	pkgpath=${pkgpath:-"$pkgpath_this"}
	last_subst_cmd="$subst_cmd"
}

# Checks made: obvious
check_trailing_whitespace() {
	egrep -q '[[:space:]]+$' "$1" &&
		err "trailing whitespace in $1"
}

# Checks made: obvious
check_newline_at_eof() {
	(( $(tail -1 -- "$1" | wc -l) == 0)) &&
		err "no newline at EOF in $1"
}

# Checks made:
#   * Every library in SHARED_LIBS has 0.0 version.
check_shlibs_versions() {
	$debugging && echo "CALLED: check_shlibs_versions($*)" >&2

	local dir=$1; shift
	local lib
	local libver
	local portref=$(portref "$dir")

	while (($# > 1)); do
		lib=$1
		libver=$2
		if [[ $libver != 0.0 ]]; then
			err "${portref}the $lib shared library has" \
			    "version $libver instead of 0.0"
		fi
		shift 2
	done
}

# Checks made:
#   * All top-level category names are well-known.
check_categories() {
	$debugging && echo "CALLED: check_categories($*)" >&2

	local dir=$1; shift
	local portref=$(portref "$dir")
	for c in "$@@"; do
		c=${c%%/*}
		if ! echo "$c" | egrep -q "^($top_level_categories)\$"; then
			err "${portref}non-standard top-level category: $c"
		fi
	done
}

# Checks made:
#   * Distfiles with useless names go into DIST_SUBDIR or have {url} suffix.
check_distfiles() {
	$debugging && echo "CALLED: check_distfiles($*)" >&2

	local dir=$1; shift
	local dist_subdir=$1; shift
	local portref=$(portref "$dir")

	# do not care about absent distfiles, this is fine for meta ports
	while (($# > 1)); do
		# try to catch "version-only" names, but not anything more
		if [[ $1 == ?(v)?(.)+([0-9])?(.+([0-9]))*(.+([a-z])) &&
		      -z $dist_subdir && $1 != *\{*\} ]]; then
			err "${portref}badly named distfile $1 without" \
			    "DIST_SUBDIR or {url} postfix"
		fi
		shift
	done
}

# Checks made:
#   * No unreliable (without fixed distfiles) hosting listed in MASTER_SITES.
check_master_sites() {
	$debugging && echo "CALLED: check_master_sites($*)" >&2

	local dir=$1; shift
	local portref=$(portref "$dir")
	local name

	while (($# > 1)); do
		case "$1" in
		http?(s)://bitbucket.com/*)	name=BitBucket;;
		http?(s)://gitorious.com/*)	name=Gitorious;;
		*)				name=;;
		esac
		[[ -n $name ]] && err "$portref$name does not hold real" \
			"releases, please host the distfiles somewhere" \
			"else or ask someone to do this for you"
		shift
	done
}

# Run checks that are FLAVOR/SUBPACKAGE-dependent.
sub_checks() {
	$debugging && echo "CALLED: sub_checks($*)" >&2

	local dir=$1; shift
	local subpkg=$1; shift
	local flavor
	for flavor in "$@@"; do
		# avoid extra noise
		[[ ${flavor#no_} != ${flavor} &&
		   ${subpkg#-} == ${flavor#no_} ]] &&
		   continue

		(
			cd -- "$dir"
			portref=$(portref "$dir" "$subpkg" "$flavor" "$*")
			export SUBPACKAGE="$subpkg" FLAVOR="$flavor"

			local wantlib_var=WANTLIB${subpkg%-}
			local vars="COMMENT$subpkg FULLPKGNAME$subpkg"
			vars="$vars MODULES"
			vars="$vars PKG_ARCH$subpkg $wantlib_var WANTLIB-"
			vars="$vars PERMIT_PACKAGE_CDROM${subpkg%-}"
			vars="$vars PERMIT_PACKAGE_FTP${subpkg%-}"
			make "${make_args[@@]}" show="$vars" | {
				local comment fullpkgname modules pkg_arch
				local wantlib perm_pkg_cdrom perm_pkg_ftp
				read -r comment
				read -r fullpkgname
				read -r modules
				read -r pkg_arch
				read -r wantlib
				read -r wantlib_ss
				read -r perm_pkg_cdrom
				read -r perm_pkg_ftp

				if [[ $comment == @@(a|an|the)" "* ]]; then
					err "${portref}no leading articles in" \
					    "COMMENT${subpkg%-}, please"
				fi

				if [[ $pkg_arch == "*" && -n $wantlib ]]; then
					if [[ $subpkg != - || -n $wantlib_ss ]]; then
						err "${portref}non-empty $wantlib_var for" \
						    "arch-independent package"
					fi
				fi

				check_wantlib "$portref" "$modules" $wantlib
				check_permit_subpkg "$portref" "$subpkg" \
				    "$perm_pkg_cdrom" "$perm_pkg_ftp"

				if $plist_checks; then
					(make "${make_args[@@]}" \
					    print-plist-with-depends || true) \
					    </dev/null |&
					check_plist "$portref" "$fullpkgname" \
					    "$flavor" "${subpkg%-}" "$modules"
					check_lib_depends "$portref" "$subpkg" \
					    "$modules" "$wantlib"
					wait
				fi

				! $error
			} || error=true

			! $error
		) || error=true
	done
	wait
}

# Checks made:
#   * If package installs system-wide icons, it should have the
#     x11/gtk+3,-guic dependency and @@exec/@@unexec-delete with
#     %D/bin/gtk-update-icon-cache -q -t %D/share/icons/$theme
#     for each icon theme used in package. If there is an
#     index.theme provided, then, instead of gtk-update-icon-cache,
#     @@unexec-delete should contain the following command:
#     rm -f %D/share/icons/$theme/icon-theme.cache
#
#   * If package adds a MIME type handler, it should have the
#     devel/desktop-file-utils dependency and @@exec/@@unexec-delete with
#     %D/bin/update-desktop-database . Unfortunately, it's hard to tell
#     if there is a MIME type handler in .desktop file, so we just
#     trigger if any .desktop files are added to
#     ${PREFIX}/share/applications/ .
#
#   * If package adds a MIME types package, it should have the
#     misc/shared-mime-info dependency and @@exec/@@unexec-delete with
#     %D/bin/update-mime-database %D/share/mime
#
#   * If package adds a GLib schema, it should have @@exec/@@unexec-delete
#     with %D/bin/glib-compile-schemas %D/share/glib-2.0/schemas >/dev/null
#     and "devel/dconf" in MODULES (or at least RDEP on devel/dconf).
#
#   * If package installs .mo files under ${PREFIX}/share/locale/, then
#     run-time dependency on devel/gettext should exists.
#
#   * If package installs files under ${PREFIX}/share/dbus-1/system-services/,
#     it must have a run-time dependency on x11/dbus,-suid.
#
#   * Each .py should have corresponding .pyc files, to avoid
#     generation of the latter at run-time.
#
#   * Manual (man and info) pages should go under ${PREFIX}/{man,info},
#     not under ${PREFIx}/share/{man,info}.
#
#   * Manual pages shouldn't be compressed.
#
#   * If port installs QML files, it should depend on either x11/qt4,-main
#     or x11/qt5/qtdeclarative,-main
#
#   * Qt5-QML files should live under PREFIX/lib/qt5/qml/.
#
#   * Qt5-QML-enabled port depend on x11/qt5/qtdeclarative.
#
check_plist() {
	$debugging && echo "CALLED: check_plist($*)" >&2

	local portref=$1; shift
	local fullpkgname=$1; shift
	local flavor_list=$1; shift
	local subpkg=$1; shift
	local modules_list=$1; shift

	local flavor is_static=false
	for flavor in $flavor_list; do
		[[ $flavor == static ]] && is_static=true
	done

	local guic_dep=false
	local guic_dep_needed=false
	local guic_exec_cnt=0
	local guic_unexec_cnt=0

	local mime_dep=false
	local mime_dep_needed=false
	local mime_exec_cnt=0
	local mime_unexec_cnt=0

	local mimepkg_dep=false
	local mimepkg_dep_needed=false
	local mimepkg_exec_cnt=0
	local mimepkg_unexec_cnt=0

	local dconf_module
	if [[ $modules_list == ?(* )devel/dconf?( *) ]]; then
		dconf_module=true
	else
		dconf_module=false
	fi
	local dconf_dep=false
	local dconf_dep_needed=false
	local dconf_exec_cnt=0
	local dconf_unexec_cnt=0

	# Lists of icon themes discovered through reading
	# @@file, @@exec and @@unexec lines, accordingly.
	local icon_themes= exec_icon_themes= unexec_icon_themes=

	# List of icon themes that remove cache file
	local rm_cache_themes=

	local gettext_dep=false
	local translation_found=false

	local dbus_suid_dep=false
	local dbus_suid_dep_needed=false

	# Lists of .py, .pyc and .pyo items found, accordingly
	local py_files=   pyc_files=   pyo_files=
	unset py_files[0] pyc_files[0] pyo_files[0]

	local wrong_man=false wrong_info=false

	local regsh=false unregsh=false
	local regsh_exec=false unregsh_exec=false

	local qml_found=false qt5_qml_found=false non_qt5_qml_found=false
	local qt4_dep=false qt5_dep=false qt5declarative_dep=false

	# Temporary ones
	local app l theme varname py

	while read -pr l; do
		case "$l" in
		"@@comment "*)
			# ignore
			;;
		share/icons/*/*/*|share/icons/*/@@(index.theme|iconrc?(-png)))
			# Themes have at least two levels in depth.
			#
			# We match directories by purpose, this helps to catch
			# update-plist fuckups, when directories go into one
			# package and actual icons go in another.
			guic_dep_needed=true
			theme=${l#share/icons/}
			theme=${theme%%/*}
			# wrap with the '/' characters to avoid erroneous matching
			echo "$icon_themes" | fgrep -q "/$theme/" ||
				icon_themes="$icon_themes /$theme/"
			if [[ "$l" = "share/icons/$theme/index.theme" ]]; then
				echo "$rm_cache_themes" | fgrep -q "/$theme/" ||
					err "${portref}missing @@unexec-delete rm -f" \
					    "%D/share/icons/$theme/icon-theme.cache"
			fi
			;;
		share/icons/*(*/))
			# Do not match intermediate directories to avoid false
			# positives.
			;;
		share/icons/*.xpm)
			app=${l#share/icons/}
			app=${app%%/*}
			app=${app%%.*}
			err "${portref}installs icon ${l##*/} in ${l%/*}, it" \
			    "should likely go in share/pixmaps/ instead"
			;;
		share/icons/default.*)
			;;
		share/icons/*)
			app=${l#share/icons/}
			app=${app%%/*}
			app=${app%%.*}
			err "${portref}installs icon ${l##*/} in ${l%/*}, it" \
			    "should go in share/$app/icons/ or like instead"
			;;
		"@@depend x11/gtk+3,-guic"*)
			guic_dep=true
			;;
		"@@exec %D/bin/gtk-update-icon-cache -q -t %D/share/icons/"*)
			theme=${l##*/}
			varname=$(echo "$theme" | sed -e 's/[^a-zA-Z_]/_/g')
			((++guic_exec_cnt))
			eval "((++guic_exec_cnt_$varname))"
			exec_icon_themes="$exec_icon_themes /$theme/"
			;;
		"@@unexec-delete %D/bin/gtk-update-icon-cache -q -t %D/share/icons/"*)
			theme=${l##*/}
			varname=$(echo "$theme" | sed -e 's/[^a-zA-Z_]/_/g')
			((++guic_unexec_cnt))
			eval "((++guic_unexec_cnt_$varname))"
			unexec_icon_themes="$unexec_icon_themes /$theme/"
			;;
		"@@unexec-delete rm -f "%D/share/icons/*/icon-theme.cache)
			# as an alternative, port could zap the theme entirely
			theme=${l#*/icons/}
			theme=${theme%/icon-theme.cache}
			varname=$(echo "$theme" | sed -e 's/[^a-zA-Z_]/_/g')
			((++guic_unexec_cnt))
			eval "((++guic_unexec_cnt_$varname))"
			unexec_icon_themes="$unexec_icon_themes /$theme/"
			rm_cache_themes="$rm_cache_themes /$theme/"
			if echo "$icon_themes" | fgrep -q "/$theme/"; then
				err "${portref}the @@unexec-delete line removing" \
				    "%D/share/icons/$theme/icon-theme.cache" \
				    "does not preceed all of the icon theme" \
				    "$theme files"
			fi
			;;
		@@?(un)exec?(-delete|-update)" %D/bin/gtk-update-icon-cache"*)
			err "${portref}incorrect gtk-update-icon-cache" \
			    "invocation: ${l#@@* }"
			;;

		share/applications/*(*/)*.desktop)
			mime_dep_needed=true
			;;
		"@@depend devel/desktop-file-utils"*)
			mime_dep=true
			;;
		"@@exec %D/bin/update-desktop-database")
			((++mime_exec_cnt))
			;;
		"@@unexec-delete %D/bin/update-desktop-database")
			((++mime_unexec_cnt))
			;;
		@@?(un)exec?(-delete|-update)" %D/bin/update-desktop-database"*)
			err "${portref}incorrect update-desktop-database" \
			    "invocation: ${l#@@* }"
			;;

		share/mime/packages/*.xml)
			mimepkg_dep_needed=true
			;;
		"@@depend misc/shared-mime-info"*)
			mimepkg_dep=true
			;;
		"@@exec %D/bin/update-mime-database %D/share/mime")
			((++mimepkg_exec_cnt))
			;;
		"@@unexec-delete %D/bin/update-mime-database %D/share/mime")
			((++mimepkg_unexec_cnt))
			;;
		@@?(un)exec?(-delete|-update)" %D/bin/update-mime-database"*)
			err "${portref}incorrect update-mime-database" \
			    "invocation: ${l#@@* }"
			;;

		share/glib-2.0/schemas/*.xml)
			dconf_dep_needed=true
			;;
		"@@depend devel/dconf"*)
			dconf_dep=true
			;;
		"@@exec %D/bin/glib-compile-schemas %D/share/glib-2.0/schemas >/dev/null")
			((++dconf_exec_cnt))
			;;
		"@@unexec-delete %D/bin/glib-compile-schemas %D/share/glib-2.0/schemas >/dev/null")
			((++dconf_unexec_cnt))
			;;
		@@?(un)exec?(-delete|-update)" %D/bin/glib-compile-schemas"*)
			err "${portref}incorrect glib-compile-schemas" \
			    "invocation: ${l#@@* }"
			;;

		"@@depend devel/gettext"*)
			gettext_dep=true
			;;
		share/locale/*/*/*.mo)
			translation_found=true
			;;

		"@@depend x11/qt4,-main"*)
			qt4_dep=true
			;;
		"@@depend x11/qt5/qtdeclarative,-main"*)
			qt5declarative_dep=true
			qt5_dep=true
			;;
		"@@depend x11/qt5/"*)
			qt5_dep=true
			;;
		lib/qt5/qml/*)
			qml_found=true
			qt5_qml_found=true
			;;
		*/qmldir)
			qml_found=true
			non_qt5_qml_found=true
			;;

		share/dbus-1/system-services/*)
			dbus_suid_dep_needed=true
			;;
		"@@depend x11/dbus,-suid"*)
			dbus_suid_dep=true
			;;

		lib/ghc/*/register.sh)
			regsh=true
			;;
		lib/ghc/*/unregister.sh)
			unregsh=true
			;;
		"@@exec /usr/bin/env HOME=/nonexistent "%D/lib/ghc/*/register.sh" -v0")
			regsh_exec=true
			;;
		"@@unexec /usr/bin/env HOME=/nonexistent "%D/lib/ghc/*/unregister.sh" -v0 --force")
			unregsh_exec=true
			if $unregsh; then
				err "${portref}unregister.sh call placed before" \
				    "script itself in PLIST${subpkg}"
			fi
			;;

		# XXX KSH arrays are limited to 10239 items
		share/@@(doc|*(*/)examples)+(/*).py|?(s)bin/*.py)
			# ignore
			;;
		*.py)
			py_files[${#py_files[@@]}]=$l
			;;
		*.pyc)
			pyc_files[${#pyc_files[@@]}]=$(normalize_pyco "$l")
			;;
		*.pyo)
			pyo_files[${#pyo_files[@@]}]=$(normalize_pyco "$l")
			;;

		share/man/*)
			wrong_man=true
			;;
		share/info/*)
			wrong_info=true
			;;
		"@@man "*.gz)
			err "${portref}compressed $l"
			;;
		esac
	done

	# gtk-update-icon-cache
	$guic_dep_needed && ! $guic_dep &&
	    [[ $fullpkgname != gtk-update-icon-cache-* ]] &&
		err "${portref}missing RDEP on x11/gtk+3,-guic"
	local cnt
	for theme in $icon_themes; do
		theme=${theme#/}
		theme=${theme%/}

		varname=$(echo "$theme" | sed -e 's/[^a-zA-Z_]/_/g')

		((guic_exec_cnt--)) || true
		((guic_unexec_cnt--)) || true
		eval "((guic_exec_cnt_$varname--)) || true"
		eval "((guic_unexec_cnt_$varname--)) || true"

		eval "cnt=\$guic_exec_cnt_$varname"
		if (($cnt > 0)); then
			err "${portref}extra @@exec of gtk-update-icon-cache" \
			    "for icon theme $theme"
			((guic_exec_cnt--)) || true
		elif (($cnt < 0)); then 
			err "${portref}missing @@exec of gtk-update-icon-cache" \
			    "for icon theme $theme"
		fi

		eval "cnt=\$guic_unexec_cnt_$varname"
		if (($cnt > 0)); then
			err "${portref}extra @@unexec-delete of gtk-update-icon-cache" \
			    "for icon theme $theme"
			((guic_unexec_cnt--)) || true
		elif (($cnt < 0)); then 
			err "${portref}missing @@unexec-delete of gtk-update-icon-cache" \
			    "for icon theme $theme"
		fi
	done

	for theme in $exec_icon_themes; do
		theme=${theme#/}
		theme=${theme%/}
		echo "$icon_themes" | fgrep -q "/$theme/" ||
			err "${portref}doing @@exec of gtk-update-icon-cache" \
			    "for absent icon theme $theme"
	done

	for theme in $unexec_icon_themes; do
		theme=${theme#/}
		theme=${theme%/}
		echo "$icon_themes" | fgrep -q "/$theme/" ||
			err "${portref}doing @@unexec-delete of gtk-update-icon-cache" \
			    "for absent icon theme $theme"
	done

	((guic_exec_cnt > 0)) &&
		err "${portref}extra @@exec of gtk-update-icon-cache"
	((guic_unexec_cnt > 0)) &&
		err "${portref}extra @@unexec-delete of gtk-update-icon-cache"

	# desktop-file-utils (simplier than previous, isn't it?)
	$mime_dep_needed && ! $mime_dep &&
	    [[ $fullpkgname != desktop-file-utils-* ]] &&
		err "${portref}missing RDEP on devel/desktop-file-utils"
	if $mime_dep_needed; then
		((mime_exec_cnt--)) || true
		((mime_unexec_cnt--)) || true
	fi
	if ((mime_exec_cnt > 0)) &&
	    [[ $fullpkgname != desktop-file-utils-* ]]; then
		err "${portref}extra @@exec of update-desktop-database"
	elif ((mime_exec_cnt < 0)); then
		err "${portref}missing @@exec of update-desktop-database"
	fi
	if ((mime_unexec_cnt > 0)); then
		err "${portref}extra @@unexec-delete of update-desktop-database"
	elif ((mime_unexec_cnt < 0)); then
		err "${portref}missing @@unexec-delete of update-desktop-database"
	fi

	# update-mime-database (same as previous)
	$mimepkg_dep_needed && ! $mimepkg_dep &&
	    [[ $fullpkgname != shared-mime-info-* ]] &&
		err "${portref}missing RDEP on misc/shared-mime-info"
	if $mimepkg_dep_needed; then
		((mimepkg_exec_cnt--)) || true
		((mimepkg_unexec_cnt--)) || true
	fi
	if ((mimepkg_exec_cnt > 0)) &&
	    [[ $fullpkgname != shared-mime-info-* ]]; then
		err "${portref}extra @@exec of update-mime-database"
	elif ((mimepkg_exec_cnt < 0)); then
		err "${portref}missing @@exec of update-mime-database"
	fi
	if ((mimepkg_unexec_cnt > 0)); then
		err "${portref}extra @@unexec-delete of update-mime-database"
	elif ((mimepkg_unexec_cnt < 0)); then
		err "${portref}missing @@unexec-delete of update-mime-database"
	fi

	# glib-compile-schemas (almost same as previous)
	#
	# TODO: detect situation of extra devel/dconf in MODULES
	# (requires investigation of all subpackages).
	if $dconf_dep_needed; then
		if ! $dconf_module; then
			err "${portref}GLib2 XML schemas found without" \
			    "devel/dconf in MODULES"
		elif ! $dconf_dep; then
			err "${portref}missing" \
			    "RUN_DEPENDS${subpkg}+=\${MODDCONF_RUN_DEPENDS}"
		fi
	fi

	if $dconf_dep_needed; then
		((dconf_exec_cnt--)) || true
		((dconf_unexec_cnt--)) || true
	fi
	if ((dconf_exec_cnt > 0)) &&
	    [[ $fullpkgname != glib2-* ]]; then
		err "${portref}extra @@exec of glib-compile-schemas"
	elif ((dconf_exec_cnt < 0)); then
		err "${portref}missing @@exec of glib-compile-schemas"
	fi
	if ((dconf_unexec_cnt > 0)); then
		err "${portref}extra @@unexec-delete of glib-compile-schemas"
	elif ((dconf_unexec_cnt < 0)); then
		err "${portref}missing @@unexec-delete of glib-compile-schemas"
	fi

	# gettext
	$translation_found && ! $gettext_dep && ! $is_static &&
		[[ $fullpkgname != gettext-* ]] &&
		err "${portref}translation file(s) found without" \
		    "devel/gettext dependency in RUN_DEPENDS"

	# QML
	$qml_found && ! $qt4_dep && ! $qt5_dep &&
		[[ $fullpkgname != qt4-[0-9]* ]] &&
		[[ $fullpkgname != qtdeclarative-[0-9]* ]] &&
		err "${portref}looks like providing QML files without" \
		    "Qt dependency"
	$qt5_qml_found && ! $qt5declarative_dep &&
		[[ $fullpkgname != qtdeclarative-[0-9]* ]] &&
		err "${portref}provides Qt5 QML files without" \
		    "x11/qt5/qtdeclarative dependency"
	$qt5_dep && ! $qt4_dep && $non_qt5_qml_found &&
		err "${portref}depends on Qt5 but installs QML files" \
		    "outside PREFIX/lib/qt5/qml/"

	# dbus,-suid
	if $dbus_suid_dep_needed && ! $dbus_suid_dep; then
		err "${portref}missing" \
		    "RUN_DEPENDS${subpkg}+=x11/dbus,-suid"
	fi

	# Haskell register/unregister
	if $regsh && ! $regsh_exec; then
		err "${portref}missing @@exec of register.sh"
	fi
	if $unregsh && ! $unregsh_exec; then
		err "${portref}missing @@unexec of unregister.sh"
	fi

	# Python modules
	((${#py_files[@@]} > 0))  && set -sA py_files  -- "${py_files[@@]}"
	((${#pyc_files[@@]} > 0)) && set -sA pyc_files -- "${pyc_files[@@]}"
	((${#pyo_files[@@]} > 0)) && set -sA pyo_files -- "${pyo_files[@@]}"
	local ic=0 io=0
	if ((${#py_files[@@]} > 0)); then for py in "${py_files[@@]}"; do
		while [[ $ic -lt ${#pyc_files[@@]} ]]; do
			[[ ${pyc_files[$ic]} < "$py"c ]] || break
			# allowed behaviour
			#err "${portref}compiled Python module without" \
			#    "source, expected: ${pyc_files[$ic]%c}"
			((++ic))
		done
		if [[ $ic -lt ${#pyc_files[@@]} &&
		      ${pyc_files[$ic]} == "$py"c ]]; then
			((++ic))
		else
			err "${portref}Python module without" \
			    "compiled version, consider using" \
			    "\${MODPY_BIN} \${MODPY_LIBDIR}/compileall.py: $py"
		fi

		while [[ $io -lt ${#pyo_files[@@]} ]]; do
			[[ ${pyo_files[$io]} < "$py"o ]] || break
			# allowed behaviour
			#err "${portref}optimized Python module without" \
			#    "source, expected: ${pyo_files[$io]%o}"
			((++io))
		done
		if [[ $io -lt ${#pyo_files[@@]} &&
		      ${pyo_files[$io]} == "$py"o ]]; then
			((++io))
		# too much noise, maybe enable in the future
		#else
		#	err "${portref}Python module without" \
		#	    "optimized version: $py"
		fi
	done; fi

	# allowed behaviour
	#while (($ic < ${#pyc_files[@@]})); do
	#	err "${portref}compiled Python module without source," \
	#	    "expected: ${pyc_files[$ic]%c}"
	#	((++ic))
	#done

	# allowed behaviour
	#while (($io < ${#pyo_files[@@]})); do
	#	err "${portref}optimized Python module without source," \
	#	    "expected: ${pyo_files[$io]%o}"
	#	((++io))
	#done

	$wrong_man && err "${portref}manual pages should go under" \
	    "\${PREFIX}/man/ rather than under \${PREFIX}/share/man/"
	$wrong_info && err "${portref}info pages should go under" \
	    "\${PREFIX}/info/ rather than under \${PREFIX}/share/info/"
}

# Checks made:
#   * devel/gettext dependency is not forgotten.
#   * lib/kde/ and lib/kde4/ prefixes not missing where applicable.
#   * stdc++ doesn't get into WANTLIB when gcc4.port.mk is used.
check_wantlib() {
	local portref="$1"; shift
	local modules="$1"; shift

	local phonon_s_wantlib=false

	local kde3_module=false
	local kde4_module=false
	local phonon_module=false
	local gcc4_module=false

	local v

	for v in $modules; do case $v in
		gcc4)			gcc4_module=true;;
		multimedia/phonon)	phonon_module=true;;
		x11/kde)		kde3_module=true;;
		x11/kde4)		kde4_module=true;;
	esac; done

	for v; do case $v in
		phonon_s?(?(">")=+([0-9])))
			phonon_s_wantlib=true
			;;

		@@(smbclient|wbclient)?(?('>')=+([0-9])))
			err "$portref$v instead of lib/samba/$v" \
			    "in WANTLIB"
			;;

		@@(DCOP|soundserver_idl|vcard)?(?('>')=+([0-9])))
			err "$portref$v instead of \${KDE}/$v" \
			    "in WANTLIB (check other libs, too!)"
			;;

		@@(kdecore|kdeui|kio)?(?('>')=+([0-9])))
			if $kde4_module; then
				err "$portref$v instead of \${KDE4LIB}/$v" \
				    "in WANTLIB (check other libs, too!)"
			elif $kde3_module; then 
				err "$portref$v instead of \${KDE}/$v" \
				    "in WANTLIB (check other libs, too!)"
			else
				err "$portref$v WANTLIB without x11/kde*" \
				    "in MODULES (check other libs, too!)"
			fi
			;;
		stdc++?(?('>')=+([0-9])))
			if $gcc4_module; then
				err "$portref$v in WANTLIB when gcc4 is" \
				    "in MODULES; run port-lib-depends-check" \
				    "and if stdc++ is still there, check" \
				    "actual build thoroughly, it's broken"
			fi
	esac; done

	if $phonon_s_wantlib && ! $phonon_module; then
		err "${portref}missing multimedia/phonon in MODULES"
	fi

	true
}

# Checks made:
#  * Each library mentioned in WANTLIB is accessible either:
#    a) as a part of base system, in /usr/lib or /usr/X11R6/lib;
#    b) via LIB_DEPENDS directly, or via deeper dependency of LIB_DEPENDS.
check_lib_depends() {
	$debugging && echo "CALLED: check_lib_depends($*)" >&2

	local portref="$1"; shift
	local subpkg="$1"; shift
	local modules="$1"; shift
	local wantlib="$1"; shift

	# The idea as follows: build full list of run-time dependencies, but
	# without RUN_DEPENDS begin involved.
	#
	# Then we look at libs in each pkgpath we got, and strip those
	# from WANTLIB. We also strip system libraries from /usr/lib
	# and /usr/X11R6/lib. And all WANTLIBs coming from MODULES are stripped
	# too, supposing that authors of those MODULES know what they're doing
	# (without stripping 'em, we'll get many false positives).
	#
	# If there are any non-stripped items in WANTLIB, we found a problem.
	#
	# XXX those checks do not take actual versions into account!

	# get list of all WANTLIBs coming from MODULES
	local m modvars=
	for m in $modules; do
		m=${m##*/}
		case $m in
		python)
			m=py
			;;
		esac
		m=$(echo "MOD${m}_WANTLIB" | tr a-z A-Z)
		modvars="$modvars $m"
	done
	local l modlibs=
	make "${make_args[@@]}" show="$modvars" </dev/null |&
	while read -pr l; do
		modlibs="$modlibs $l"
	done
	wait    # make sure process exited before possible return below

	# strip WANTLIBs coming from MODULES
	local libsleft wl
	for l in $modlibs; do
		libsleft=
		for wl in $wantlib; do
			if [[ $l != "$wl" ]]; then
				libsleft="$libsleft $wl"
			elif $debugging; then
				echo "WANTLIB ITEM $wl COMES FROM MODULES"
			fi
		done
		[[ -n $libsleft ]] || return 0    # all libs found
		wantlib=$libsleft
	done

	# prepare easy-to-use WANTLIB list in $checklibs
	local wlprefix checklibs=
	for wl in $wantlib; do
		wl=${wl%%[><=]*}
		wlprefix=${wl%/*}
		[[ $wlprefix == "$wl" ]] && wlprefix=lib
		wl=${wl##*/}
		checklibs="$checklibs ${wlprefix}/lib$wl"
	done

	# strip system libraries
	local d
	for d in /usr /usr/X11R6; do
		for l in $d/lib/lib*.@@(so*(.+([0-9]))|a); do
			libsleft=
			for wl in $checklibs; do
				if [[ $l != +(/*)/${wl}.@@(so*(.+([0-9]))|a) ]]; then
					libsleft="$libsleft $wl"
				elif $debugging; then
					echo "FOUND WANTLIB ITEM $wl: $l"
				fi
			done
			[[ -n $libsleft ]] || return 0    # all libs found
			checklibs=$libsleft
		done
	done

	# get deep list of LDEPs
	local lmake_args="${make_args[@@]}"
	lmake_args[${#lmake_args[@@]}]="RUN_DEPENDS="
	lmake_args[${#lmake_args[@@]}]="RUN_DEPENDS$subpkg="
	# Rely on the fact we're already in the port directory, see sub_checks().
	# XXX ignoring make errors for now
	local pure_lib_deps=$(make "${lmake_args[@@]}" show-run-depends | sort)
	[[ -n $pure_lib_deps ]] || return 0
	# SUBDIR doesn't accept newline-separated values
	set -A pure_lib_deps -- $pure_lib_deps

	(
	# strip libraries from ports
	# TODO cache print-plist-libs output?
	cd -- /usr/ports    # XXX "$portsdir" fails for openbsd-wip and like
	unset FLAVOR SUBPACKAGE
	make "${make_args[@@]}" SUBDIR="${pure_lib_deps[*]}" \
	    print-plist-libs </dev/null 2>/dev/null |&
	while read -pr l; do
		case $l in
		"===> "*)
			;;

		*)
			libsleft=
			for wl in $checklibs; do
				if [[ $l != +(/*)/${wl}.@@(so*(.+([0-9]))|a) ]]; then
					libsleft="$libsleft $wl"
				elif $debugging; then
					echo "FOUND WANTLIB ITEM $wl: $l"
				fi
			done
			[[ -n $libsleft ]] || exit 0    # all libs found
			checklibs=$libsleft
			;;
		esac
	done

	# prettify list of WANTLIBs left and print it
	libsleft=
	for wl in $checklibs; do
		libsleft="$libsleft ${wl##*/lib}"
	done
	err "${portref}the following libraries in WANTLIB${subpkg%-}" \
	    "look like masked by RUN_DEPENDS${subpkg%-}:$libsleft"
	wait
	! $error
	) || error=true
}

# Checks made:
#   * No extra PERMIT_DISTFILES_FTP variables in Makefile.
#   * PERMIT_DISTFILES_FTP should not contain just "No" but a reason.
#
# Runs in the port directory.
# XXX does not handle Makefile.inc and other .include cases correctly.
check_permit_dist() {
	$debugging && echo "CALLED: check_permit_dist($*)" >&2

	local portref=$(portref $1); shift
	local perm_pkg_cdrom=$(echo "$1" | tr '[:upper:]' '[:lower:]')
	local perm_pkg_ftp=$(echo "$2" | tr '[:upper:]' '[:lower:]')
	local perm_dist_ftp=$(echo "$3" | tr '[:upper:]' '[:lower:]')

	if [[ ($perm_pkg_cdrom == yes || $perm_pkg_ftp == yes) && \
	    $perm_dist_ftp == yes ]]; then
		egrep -sq "^ *PERMIT_DISTFILES_FTP[[:space:]]*=" Makefile &&
			err "${portref}extra PERMIT_DISTFILES_FTP line(-s)"
	fi

	if [[ $perm_dist_ftp == no ]]; then
		err "${portref}PERMIT_DISTFILES_FTP should be either" \
		    "\"Yes\" or a reason for being non-redistributable"
	fi

	true
}

# Checks made:
#   * No extra PERMIT_PACKAGE_FTP variables in Makefile.
#   * PERMIT_PACKAGE_* should not contain just "No" but a reason.
#
# Runs in the port directory.
# XXX does not handle Makefile.inc and other .include cases correctly.
check_permit_subpkg() {
	$debugging && echo "CALLED: check_permit_subpkg($*)" >&2

	local portref=$1; shift
	local subpkg=${1%-}; shift
	local perm_pkg_cdrom=$(echo "$1" | tr '[:upper:]' '[:lower:]')
	local perm_pkg_ftp=$(echo "$2" | tr '[:upper:]' '[:lower:]')

	if [[ $perm_pkg_cdrom == yes && $perm_pkg_ftp == yes ]]; then
		egrep -q "^ *PERMIT_PACKAGE_FTP${subpkg}[[:space:]]*=" Makefile &&
			err "${portref}extra PERMIT_PACKAGE_FTP lines"
	fi

	if [[ $perm_pkg_cdrom == no ]]; then
		err "${portref} PERMIT_PACKAGE_CDROM should be either" \
		    "\"Yes\" or a reason for being non-redistributable"
	fi
	if [[ $perm_pkg_ftp == no ]]; then
		err "${portref} PERMIT_PACKAGE_FTP should be either" \
		    "\"Yes\" or a reason for being non-redistributable"
	fi

	true
}

# Checks made:
#   * Directory is not empty
#   * No '*.core' files present
check_files_dir() {
	$debugging && echo "CALLED: check_files_dir($*)" >&2

	find -f "$1" -- -type f | {
		local empty=true
		local mode
		while read F; do
			ignoring "$F" && continue
			mode=$(stat -f %p "$F" || true)
			(( (0$mode & 0111) != 0 )) &&
				err "executable file: $F"
			empty=false
			[[ $F == *.core ]] &&
				err_coredump_found "$F"
		done
		$empty && err "there are no files, please remove the $1 directory"
		! $error
	} || error=true
}

# Checks made:
#   * The patch is not empty.
#   * The patch contains an OpenBSD RCS tag.
check_patch() {
	local F=$1

	test -f "$F" || {
		err "$F is not a file"
		return
	}

	if [ -s "$F" ]; then
		head -n 1 -- "$F" | egrep -q '^\$OpenBSD.*\$$' ||
		    err "$F does not have \$OpenBSD\$ RCS tag at the top"
	else
		err "$F is empty and should be removed"
	fi
}

# Checks made:
#   * Each patch contains OpenBSD RCS tag.
#   * Directory is not empty and consists only of plain files starting
#     with 'patch-' and not ending with '.orig'.
check_patches_dir() {
	$debugging && echo "CALLED: check_patches_dir($*)" >&2

	local empty=true
	local F

	check_perms_in_dir "$1"

	for F in "$1"/* "$1"/.*; do case "${F##*/}" in
	patch-*.orig)
		handle_extra_file "$F"
		;;

	patch-*)
		empty=false
		$rootrun || check_patch "$F"
		;;

	*)
		handle_extra_file "$F"
		;;
	esac; done

	$empty && err "there are no patches, please remove the $1 directory instead"
}

# Checks made:
#   * Directory is not empty and consist only of plain files with fixed names.
#   * PFRAG, PLIST, README and .rc files contain appropriate OpenBSD RCS
#     tags; other files should NOT contain OpenBSD RCS tag.
#   * PFRAG.shared should be merged into PLIST.
#   * No trailing whitespace for DESCR, MESSAGE, README, UNMESSAGE and
#     .rc files (PLIST and PFRAG are better checked with "make package").
#   * See also check_plist_file().
check_pkg_dir() {
	$debugging && echo "CALLED: check_pkg_dir($*)" >&2

	local dir=$1; shift
	local subst_cmd
	if (($# > 0)); then
		# XXX should find the way to always obtain SUBST_CMD
		subst_cmd=$1
		shift
	fi
	local empty=true
	local F
	local plist

	check_perms_in_dir "$dir"

	dir="${dir#./}"
	for F in "$dir"/* "$dir"/.*; do case "${F##*/}" in
	DESCR?(-*))
		empty=false
		[[ -f $F ]] ||
			err "$F is not a file"
		check_trailing_whitespace "$F"
		check_newline_at_eof "$F"
		check_long_lines "$F"
		check_hardcoded "$F"
		[[ -n $subst_cmd ]] && check_subst_vars "$F" "$subst_cmd"
		egrep -q '\$OpenBSD.*\$' "$F" &&
			err "$F should not contain \$OpenBSD\$ tag"
		;;

	PFRAG.shared?(-*))
		empty=false
		[[ -n $subst_cmd ]] && check_subst_vars "$F" "$subst_cmd"
		check_plist_file "$F"
		plist=PLIST${F##*/PFRAG.+([!-])}
		err "$F should be merged into $plist"
		;;

	PFRAG.*|PLIST?(-*))
		empty=false
		[[ -n $subst_cmd ]] && check_subst_vars "$F" "$subst_cmd"
		check_plist_file "$F"
		;;

	README?(-*))
		[[ -f $F ]] ||
			err "$F is not a file"
		[[ -n $subst_cmd ]] && check_subst_vars "$F" "$subst_cmd"
		check_trailing_whitespace "$F"
		check_newline_at_eof "$F"
		check_long_lines "$F"
		check_hardcoded "$F"
		head -n 1 -- "$F" |
			egrep -q '^(#[[:space:]]*)?\$OpenBSD(:.*)?\$$' ||
			err "$F does not have \$OpenBSD\$ RCS tag at the top"
		;;

	*.rc)
		[[ -f $F ]] ||
			err "$F is not a file"
		[[ ${F##*/} == [A-Za-z_]*([A-Za-z0-9_]).rc ]] ||
			err "$F name will not work in rc.subr(8)"
		check_trailing_whitespace "$F"
		check_long_lines "$F"
		check_hardcoded "$F"
		head -n 5 -- "$F" |
			egrep -q '^#[[:space:]]*\$OpenBSD(:.*)?\$$' ||
			err "$F does not have \$OpenBSD\$ RCS tag at the top"
		;;

	MESSAGE?(-*)|UNMESSAGE?(-*))
		[[ -f $F ]] ||
			err "$F is not a file"
		[[ -n $subst_cmd ]] && check_subst_vars "$F" "$subst_cmd"
		check_trailing_whitespace "$F"
		check_newline_at_eof "$F"
		check_long_lines "$F"
		check_hardcoded "$F"
		egrep -q '\$OpenBSD.*\$' "$F" &&
			err "$F should not contain \$OpenBSD\$ tag"
		;;

	*)
		handle_extra_file "$F"
		;;
	esac; done

	$empty && err "$dir directory does not contain either DESCR, PFRAG or PLIST files"
}

# Checks made:
#   * There are no hardcoded /usr/local or /var paths in file.
#     /var/log, /var/run and /var/tmp are perfectly fine, though.
check_hardcoded() {
	$debugging && echo "CALLED: check_hardcoded($*)" >&2

	perl -n -e 'BEGIN { $ec=0; }
		    if (m,/usr/local\b,o) { $ec=1; close ARGV; }
		    if (m,/var((?:/+[^/\s]+)*)(?:\s.*)?$,o) {
			unless ($1 =~ m,^/+(?:log|run|tmp),o) {
			    $ec=1; close ARGV;
			}
		    }
		    END { $? = $ec; }' \
		"$1" || err "hardcoded paths detected in $1, consider using" \
		    "SUBST_VARS and TRUEPREFIX/LOCALBASE/LOCALSTATEDIR/VARBASE"
}

# Checks made:
#   * There are no lines longer than 80 characters that have at least
#     one space (avoids warnings on long URLs etc.).
check_long_lines() {
	$debugging && echo "CALLED: check_long_lines($*)" >&2
	local file=$1; shift

	local n=$(awk <"$file" \
		  '/[[:space:]]/ && length > 80 { n++ } END { print n+0 }')
	(($n > 0 )) &&
		err "$n line(s) longer than 80 chars in $file"
}

# Checks made:
#   * There is an OpenBSD RCS tag at the top.
#   * No items with ${FULLPKGNAME} are allowed, except readme.
#   * No empty lines.
check_plist_file() {
	$debugging && echo "CALLED: check_plist_file($*)" >&2

	[[ -f $1 ]] ||
		err "$1 is not a file"
	head -n 1 -- "$1" |
		egrep -q '^@@comment \$OpenBSD.*\$$' ||
		err "$1 does not have \$OpenBSD\$ RCS tag at the top"

	# Do not match just '${FULLPKGNAME}' because many ports use the
	# following trick:
	#    @@cwd ${LOCALBASE}/share/doc/pkg-readmes
	#    ${FULLPKGNAME}
	egrep -v '^(share/doc/pkg-readmes/\$\{FULLPKGNAME\}|@@comment .*)$' "$1" |
		egrep '.\$\{FULLPKGNAME\}|\$\{FULLPKGNAME\}.' >&2 &&
		err "$1 contains item(s) with \${FULLPKGNAME} in it, see above"

	egrep -q '^[[:space:]]*$' "$1" && err "$1 contains empty lines"
}

# Checks made:
#   * Every variable referenced by ${[A-Z]+} should be in ${SUBST_VARS}.
check_subst_vars() {
	$debugging && echo "CALLED: check_subst_vars($*)" >&2

	local F=$1; shift
	local subst_cmd=$1; shift

	# Add variables sometimes referenced in port docs.
	eval "$subst_cmd" -DPATH=test -DWRKSRC=test <"$F" |
	    egrep '\$\{[A-Z]+\}' >&2 &&
		err "looks like misspelled variables in $F, see above"
}

# Checks made:
#   * Contains OpenBSD RCS tag at the top line.
#   * No REVISION marks present in given file (unless in update mode).
#   * Each REVISION mark presents only once.
#   * BUILD_DEPENDS, MODULES and PERMIT_DISTFILES_FTP are not defined in
#     VAR-subpkg manner.
#   * No trailing whitespace.
#   * SHARED_LIBS are not defined inside ".if" statements.
#   * Variables are not assigned via "=" twice outside of .if statemets.
#   * No user settings present.
#   * SHARED_ONLY not defined
check_makefile() {
	$debugging && echo "CALLED: check_makefile($*)" >&2

	local F="$1"
	check_trailing_whitespace "$F"
	check_long_lines "$F"
	check_hardcoded "$F"
	head -n 1 -- "$F" |
		egrep -q '^#[[:space:]]*\$OpenBSD.*\$' ||
		err "$F does not have \$OpenBSD\$ RCS tag at the top"

	local iflevel=0 l lnum=0 revs= t r mkvars= var duprevfound
	# do not unset mkvars, having empty element(-s) is fine
	unset revs[0]
	local tab="$(print '\t')"
	while IFS= read -r l; do ((++lnum))
		set -A t -- $l
		duprevfound=false

		if echo "$l" | egrep -q "^ *($user_settings)[[:>:]].*\$"; then
			err "user settings in port: $l"
		fi

		case $l in
		*(" ")REVISION*)
			$existing_port ||
				err "REVISION mark found at $F:$lnum"
			var=${t[0]%=}
			if ((${#revs[@@]} > 0)); then
				for r in "${revs[@@]}"; do
					if [[ $var == "$r" ]]; then
						err "duplicated $r in $F"
						# avoid dup error messages
						duprevfound=true
						break
					fi
				done
			fi
			revs[${#revs[@@]}]=${t[0]}
			;;
		*(" ")@@(BUILD_DEPENDS|MODULES|PERMIT_DISTFILES_FTP)-*)
			err "${l%%-*} is not a subpackageble variable, see $F:$lnum"
			;;
		*(" ").*(" "|"$tab")if*)
			((++iflevel))
			;;
		*(" ").*(" "|"$tab")endif*)
			((iflevel--))
			;;
		*(" ")SHARED_LIBS*(" "|"$tab")*(+|:|!)=*)
			if ((iflevel > 0)); then
				err "should not be inside .if block ($F:$lnum): $l"
			fi
			;;
		*(" ")SHARED_ONLY*(" "|"$tab")*(+|:|!|\?)=*)
			err "SHARED_ONLY is deprecated ($F:$lnum)"
			;;
		esac

		if [[ $l == *(" ")+([A-Za-z0-9_-])*(" "|"$tab")?(\?)=* ]] &&
		   ((iflevel == 0)) && ! $duprevfound; then
			var=${t[0]%?(\?)=*}
			for v in "${mkvars[@@]}"; do
				if [[ $v == "$var" ]]; then
					err "duplicated assignment of $v" \
					    "at $F:$lnum"
					break
				fi
			done
			mkvars[${#mkvars[@@]}]=$var
		fi
	done <"$F"
}

# Checks made:
#   * None of executable bits (111) are set on plain files.
check_perms_in_dir() {
	$debugging && echo "CALLED: check_perms_in_dir($*)" >&2

	(find -f "$1" -- -maxdepth 1 -type f \
	    \( -perm -100 -or -perm -010 -or -perm 001 \) \
	    </dev/null || true) |&
	local F
	while read -pr F; do
		F=${F#./}
		ignoring "$F" && continue
		err "executable file: ${F#./}"
	done
}


############################################################
# Run checks. Also calculate and show pkgpath variable,
# unless we're checking the ports tree root dir.
#

for D; do
	if [[ $D == /* ]]; then
		err "absolute path $D ignored"
		continue
	fi
	if [[ $D == *(*/)..*(/*) ]]; then
		err "too many .. in $D, skipping"
		continue
	fi
	check_port_dir "$D"
done

if ! $rootrun; then
	[[ -z $pkgpath ]] && pkgpath=${PWD##"$portsdir/"}

	if [[ $pkgpath == "$PWD" ]]; then
		cat >&2 <<EOE
${0##*/}: could not determine PKGPATH. Please help me with the -p option.
EOE
		exit 2
	fi

	echo "$pkgpath"
fi

! $error
@


1.112
log
@More obvious error message for empty patches.

ok zhuk@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.111 2017/05/26 20:40:31 zhuk Exp $
d944 8
d1014 3
d1159 19
d1361 14
@


1.111
log
@Use dumb Makefile pipe trick from DPB/Vars.pm instead of trying to access
an existing port (devel/quirks) which could be broken, resulting in strange
errors on portcheck side.

Prompted and solution provided by espie@@, thanks!
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.110 2016/04/28 17:30:28 zhuk Exp $
d1691 19
d1728 1
a1728 4
		test -f "$F" ||
			err "$F is not a file"
		$rootrun || head -n 1 -- "$F" | egrep -q '^\$OpenBSD.*\$$' ||
			err "$F does not have \$OpenBSD\$ RCS tag at the top"
@


1.110
log
@Stop whining about libiconv port module, and do not talk about
devel/gettext as MODULES item, only as RUN_DEPENDS.

A better solution is in works.

Somewhat prodded by a different patch from tsg@@/sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.109 2016/04/26 10:56:59 sthen Exp $
d132 14
a146 1
	testp=/usr/ports/devel/quirks
d148 1
a148 1
		$( (cd $testp && make show=PORTSDIR_PATH 2>/dev/null) || true)
@


1.109
log
@Clean up some bits missed in yesterday's systrace removal.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.108 2016/04/21 15:51:33 zhuk Exp $
d1317 1
a1317 1
		    "devel/gettext dependency in MODULES or RUN_DEPENDS"
d1393 1
a1393 1
#   * devel/gettext and converters/libiconv MODULES are not forgotten.
a1399 2
	local iconv_wantlib=false
	local intl_wantlib=false
a1401 2
	local gettext_module=false
	local iconv_module=false
a1409 2
		converters/libiconv)	iconv_module=true;;
		devel/gettext)		gettext_module=true;;
a1416 8
		iconv?(?(">")=+([0-9])))
			iconv_wantlib=true
			;;

		intl?(?(">")=+([0-9])))
			intl_wantlib=true
			;;

a1450 6

	if $intl_wantlib && ! $gettext_module; then
		err "${portref}missing devel/gettext in MODULES"
	elif $iconv_wantlib && ! $gettext_module && ! $iconv_module; then
		err "${portref}missing converters/libiconv in MODULES"
	fi
@


1.108
log
@Print warning when SHARED_ONLY being set in a port.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.107 2016/03/28 15:38:21 zhuk Exp $
a310 1
USE_SYSTRACE
a607 5
			;;

		systrace.filter)
			test -f "$F" || err "$F is not a file"
			((++non_portmk))
@


1.107
log
@Fix the case when WANTLIB-= didn't silence portcheck.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.106 2016/03/28 12:40:06 zhuk Exp $
d1914 1
d1968 3
@


1.106
log
@Compact checks lines for dbus,-suid.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.105 2016/03/23 16:30:38 zhuk Exp $
d849 1
a849 1
			vars="$vars PKG_ARCH$subpkg $wantlib_var"
d860 1
d870 4
a873 2
					err "${portref}non-empty $wantlib_var for" \
					    "arch-independent package"
@


1.105
log
@Catch compressed manual pages.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.104 2016/03/22 21:25:53 naddy Exp $
d1323 3
a1325 5
	if $dbus_suid_dep_needed; then
		if ! $dbus_suid_dep; then
			err "${portref}missing" \
			    "RUN_DEPENDS${subpkg}+=x11/dbus,-suid"
		fi
@


1.104
log
@Any remaining PFRAG.shared files should be merged into PLIST.  ok zhuk@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.103 2016/03/10 12:20:06 naddy Exp $
d932 2
d1181 3
@


1.103
log
@no more non-shared archs:
NO_SHARED_ARCHS and "no_shared" in PROPERTIES are no longer set
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.102 2015/12/26 20:56:44 zhuk Exp $
d1734 1
a1734 1
#   * PFRAG.shared should be merged in PLIST if it contains @@lib items only.
d1750 1
d1773 2
a1774 14
		awk <"$F" '/^(@@comment )?@@lib /' | {
			local no_a_for_so=false plist=${F##*/} shlibs_found=false
			plist=PLIST${plist##PFRAG.+([!-])}
			while read l; do
				shlibs_found=true
				l=${l##"@@comment "}
				l=${l##"@@lib "}
				l=${l%%.so.*}.a
				fgrep -q -- "$l" "${F%/*}/$plist" || no_a_for_so=true
			done
			$shlibs_found && ! $no_a_for_so &&
				err "$F should be merged in $plist"
			! $error
		} || error=true
@


1.102
log
@Don't spam console with "file not found" messages when checking PERMIT_*
values under -A option.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.101 2015/12/11 22:12:25 zhuk Exp $
a1565 1
	# XXX won't work on ${NO_SHARED_ARCHS}, anybody cares?
@


1.101
log
@Add checks for running (un)register.sh for Haskell ports.

"looks nice" for Angel of Haskell.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.100 2015/09/13 10:02:09 zhuk Exp $
d1632 1
a1632 1
		egrep -q "^ *PERMIT_DISTFILES_FTP[[:space:]]*=" Makefile &&
@


1.100
log
@Add IGNORE_IS_FATAL and IGNORE_IS_SILENT to the list of prohibited variables.

Initiated by my own mistake which was not catched by portcheck, which was
found by sthen@@ - thanks!
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.99 2015/07/05 12:26:26 zhuk Exp $
d991 3
d1143 17
d1323 8
@


1.99
log
@Catch usage of variables representing user settings. The list of settings
is taken from bsd.port.mk(5).

Idea inspired by recent commits on ports@@ and supported by sthen@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.98 2015/05/26 19:12:11 rpe Exp $
d286 2
@


1.98
log
@Add perl5 to top_level_categories to prevent portcheck complaining.
cpan.port.mk adds all ports that use that module to the perl5 category.

OK zhuk@@ sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.97 2015/04/15 08:15:42 zhuk Exp $
d263 53
d1889 1
d1908 4
@


1.97
log
@Add check for top-level categories being spelled properly.

Inspired by recent talk with jasper@@, which in turn was a result of my
own mistake done under x11/kde4.

No objections received.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.96 2015/04/12 18:37:23 zhuk Exp $
d247 1
@


1.96
log
@Make sure that GH_COMMIT is 40 chararacters length.

This is a leftover from pre-lock times, added after a few problematic
GH_COMMIT got in (fixed a while ago).
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.95 2015/04/04 17:23:52 sthen Exp $
d210 52
d601 2
a602 1
	local dist_subdir distfiles flavor flavors gh_commit master_sites
d606 1
a606 1
	local show_items="DIST_SUBDIR DISTFILES FLAVOR FLAVORS GH_COMMIT"
d616 1
d658 1
d711 15
@


1.95
log
@check that dbus,-suid rdep is present when needed, ok ajacoutot@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.94 2015/03/27 08:09:54 ajacoutot Exp $
d549 1
a549 1
	local dist_subdir distfiles flavor flavors master_sites
d553 1
a553 1
	local show_items="DIST_SUBDIR DISTFILES FLAVOR FLAVORS"
d567 1
d610 7
@


1.94
log
@x11/gtk+2,-guic -> x11/gtk+3,-guic
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.93 2014/11/13 15:35:50 zhuk Exp $
d790 3
d848 3
d999 7
d1162 8
@


1.93
log
@Stop warning about lib/qt[34]/ prefix in WANTLIB.

Qt3 and Qt4 don't clash in library names; and Qt4 won't clash with Qt5
either.

Inspired by a talk with bradp@@ long time ago.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.92 2014/08/12 01:44:08 zhuk Exp $
d765 1
a765 1
#     x11/gtk+2,-guic dependency and @@exec/@@unexec-delete with
d897 1
a897 1
		"@@depend x11/gtk+2,-guic"*)
d1019 1
a1019 1
		err "${portref}missing RDEP on x11/gtk+2,-guic"
@


1.92
log
@Properly ignore default.kde* files, they live under share/icons/ directly.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.91 2014/08/12 00:37:44 zhuk Exp $
d1211 1
a1211 2
#   * lib/qt[34]/, lib/kde/ and lib/kde4/ prefixes not missing where
#     applicable.
a1222 2
	local qt3_module=false
	local qt4_module=false
a1234 2
		x11/qt3)		qt3_module=true;;
		x11/qt4)		qt4_module=true;;
a1249 10
			;;

		@@(Qt+([A-Za-z0-9])|phonon)?(?('>')=+([0-9])))
			err "$portref$v instead of lib/qt4/$v" \
			    "in WANTLIB"
			;;

		@@(qt-mt|qui|qui-mt)?(?('>')=+([0-9])))
			err "$portref$v instead of lib/qt3/$v" \
			    "in WANTLIB"
@


1.91
log
@Fix make(1) calls when SKIPDIR framework is in use.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.90 2014/08/12 00:30:35 zhuk Exp $
d859 1
a859 1
		share/icons/*/*/*|share/icons/*/@@(index.theme|iconrc?(-png)|default.kde4))
d887 2
@


1.90
log
@Make perl code in check_hardcoded() return non-zero on failure.

More standard and error-prone style.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.89 2014/08/10 20:46:04 zhuk Exp $
d163 5
a167 2
# This way we can run all checks even on cvs.openbsd.org
set -A make_args -- MASTER_SITE_OPENBSD= \
@


1.89
log
@Get rid of "|| error=true" where it's not needed.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.88 2014/08/10 20:41:54 zhuk Exp $
d1674 2
a1675 2
	perl -n -e 'BEGIN { $ec=1; }
		    if (m,/usr/local\b,o) { $ec=0; close ARGV; }
d1678 1
a1678 1
			    $ec=0; close ARGV;
d1682 1
a1682 1
		"$1" && err "hardcoded paths detected in $1, consider using" \
@


1.88
log
@Add support for SKIPDIR, STARTDIR and STARTAFTER environment variables,
like bsd.port.subdir.mk does. Allows to continue a long "portcheck -A"
session.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.87 2014/08/10 20:39:03 zhuk Exp $
d736 1
a736 2
				check_wantlib "$portref" "$modules" $wantlib ||
				    error=true
d738 1
a738 2
				    "$perm_pkg_cdrom" "$perm_pkg_ftp" ||
				    error=true
d1303 1
a1303 1
	! $error
@


1.87
log
@Add check for WANTLIBs hidden by RUN_DEPENDS. This WILL eventually break
bulk build, and I know at least two people (ajacoutot@@ and me) that were
already bitten by this problem.

This somewhat increase check time, unfortunately, but not too much.

Test for this feature to follow after full unlock.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.86 2014/07/23 22:12:41 zhuk Exp $
d173 34
d447 1
@


1.86
log
@Missing function name between "&&" and arguments.

okay sthen@@ since portcheck doesn't affect actual release
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.85 2014/07/23 22:11:20 zhuk Exp $
d713 2
d1271 137
@


1.85
log
@Fix FULLPKGNAME handling, it should be subpackage-dependent.

okay sthen@@ since portcheck doesn't affect actual release
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.84 2014/07/10 09:57:13 zhuk Exp $
d1348 1
a1348 1
		$empty && "there are no files, please remove the $1 directory"
@


1.84
log
@Catch situations with both stdc++ in WANTLIB and gcc4 in MODULES, and give
clues what could be wrong. Inspired by recent switch of KDE4 to GCC 4.8.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.83 2014/07/08 09:48:07 zhuk Exp $
d515 1
a515 1
	local show_items="DIST_SUBDIR DISTFILES FLAVOR FLAVORS FULLPKGNAME"
a528 1
	read -pr fullpkgname &&
d573 1
a573 1
		sub_checks "$dir" "$_s" "$fullpkgname" "${check_flavors[@@]}"
a661 1
	local fullpkgname=$1; shift
d675 2
a676 1
			local vars="COMMENT$subpkg MODULES"
d681 2
a682 2
				local comment modules pkg_arch wantlib
				local perm_pkg_cdrom perm_pkg_ftp
d684 1
@


1.83
log
@Add a special case for .xpm files, those should go under share/pixmaps/
usually.

Initiated after discussion with kirby@@ about games/vegastrike/data in WIP.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.82 2014/05/19 00:57:54 zhuk Exp $
d1173 1
d1189 1
d1194 1
d1196 1
a1196 1
		converters/libiconv)	iconv_module=true;;
d1249 7
@


1.82
log
@Check for leading articles in COMMENT lines.

Suggested by sebastia@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.81 2014/05/09 20:34:36 kirby Exp $
d842 7
@


1.81
log
@compileall.py should be run with ${MODPY_BIN}
okay zhuk@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.80 2014/05/08 17:07:46 zhuk Exp $
d677 2
a678 1
			local vars="MODULES PKG_ARCH$subpkg $wantlib_var"
d682 1
a682 1
				local modules pkg_arch wantlib
d684 1
d690 7
a696 1
				if [[ $pkg_arch = "*" && -n $wantlib ]]; then
d700 1
@


1.80
log
@GLib2 XML schemas mean not only run-time dependency, but devel/dconf in
MODULES, ever.

A few ports are missing devel/dconf in MODULES, to be fixed in a few
minutes.

prodding from ajacoutot@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.79 2014/05/08 15:41:55 zhuk Exp $
d1113 1
a1113 1
			    "\${MODPY_LIBDIR}/compileall.py: $py"
@


1.79
log
@Make it more clear that devel/gettext is preferred as member of MODULES
rather than RUN_DEPENDS.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.78 2014/05/08 15:39:49 zhuk Exp $
d697 10
a709 7
			if $plist_checks; then
				(make "${make_args[@@]}" print-plist-with-depends ||
				    true) </dev/null |&
				check_plist "$portref" "$fullpkgname" "$flavor"
				wait
			fi

d754 2
d777 6
d1062 10
a1071 3
	$dconf_dep_needed && ! $dconf_dep &&
		err "${portref}GLib2 XML schemas found without devel/dconf in" \
		    "MODULES or RUN_DEPENDS"
@


1.78
log
@kirby@@ pointed out that GLib schema presence should result in devel/dconf,
not devel/glib2. Adjust checks accordingly.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.77 2014/05/08 07:02:33 zhuk Exp $
d1074 1
a1074 1
		    "devel/gettext dependency"
@


1.77
log
@Check for hardcoded paths in Makefiles, too.

Inspired by a not-yet-committed sumbmission on ports@@ (hint! hint!).
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.76 2014/05/07 22:27:06 zhuk Exp $
d735 1
d772 4
a775 4
	local glib_dep=false
	local glib_dep_needed=false
	local glibxml_exec_cnt=0
	local glibxml_unexec_cnt=0
d903 1
a903 1
			glib_dep_needed=true
d905 2
a906 2
		"@@depend devel/glib2"[\|:]*)
			glib_dep=true
d909 1
a909 1
			((++glibxml_exec_cnt))
d912 1
a912 1
			((++glibxml_unexec_cnt))
d1048 9
a1056 6
	$glib_dep_needed && ! $glib_dep &&
	    [[ $fullpkgname != glib2-* ]] &&
		err "${portref}missing RDEP on devel/glib2"
	if $glib_dep_needed; then
		((glibxml_exec_cnt--)) || true
		((glibxml_unexec_cnt--)) || true
d1058 1
a1058 1
	if ((glibxml_exec_cnt > 0)) &&
d1061 1
a1061 1
	elif ((glibxml_exec_cnt < 0)); then
d1064 1
a1064 1
	if ((glibxml_unexec_cnt > 0)); then
d1066 1
a1066 1
	elif ((glibxml_unexec_cnt < 0)); then
@


1.76
log
@Add GLib2 XML schema @@exec/@@unexec-delete hooks checks, similar to MIME
packages handling.

Suggested by kirby@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.75 2014/05/07 21:57:00 zhuk Exp $
d1532 1
@


1.75
log
@Tweak IFS handling in portcheck(1), based on input from Andres Perera for
another tool.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.74 2014/05/06 11:00:55 zhuk Exp $
d733 3
d771 5
d901 17
d1044 20
@


1.74
log
@Check that man and info pages doesn't go under /usr/local/share/{man,info}.

As usual, inspired by a port review on ports@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.73 2014/04/27 17:57:14 zhuk Exp $
d1495 1
a1495 3
	IFS=
	while read -r l; do ((++lnum))
		unset IFS
a1543 1
		IFS=
a1544 1
	unset IFS
@


1.73
log
@Check for extra PERMIT_* lines: not critical but shrinks port Makefiles.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.72 2014/04/19 17:20:37 zhuk Exp $
d738 3
d782 2
d913 7
d1079 5
@


1.72
log
@Fix hardcoded paths detection using perl. Reminded by jasper@@, thanks!

Tests updates to follow.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.71 2014/02/09 19:26:25 zhuk Exp $
d514 1
d519 2
d537 3
d568 2
d664 1
a664 1
	local flavor pkg_arch
d676 7
a682 2
			make "${make_args[@@]}" show="MODULES PKG_ARCH$subpkg WANTLIB$subpkg" | {
				local modules wantlib
d686 2
d689 1
a689 1
					err "${portref}non-empty WANTLIB$subpkg for" \
d692 6
a697 1
				check_wantlib "$portref" "$modules" $wantlib
d1162 59
d1459 2
a1460 1
#   * BUILD_DEPENDS and MODULES are not defined in VAR-subpkg manner.
d1501 1
a1501 1
		*(" ")@@(BUILD_DEPENDS|MODULES)-*)
@


1.71
log
@Warn about empty lines in PLIST/PFRAG files. Idea supported by jasper@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.70 2014/02/09 18:11:13 zhuk Exp $
d1309 1
a1309 1
#     XXX /var/log should not trigger the warning.
d1313 10
a1322 3
	egrep -q '(/usr/local|/var)[[:>:]]' "$1" &&
		err "hardcoded paths detected in $1, consider using" \
		    "SUBST_VARS and PREFIX/LOCALBASE/LOCALSTATEDIR"
@


1.70
log
@Rever previous, it actually makes portcheck do not trigger for problematic
/var paths at all. A better fix will come later, let's go for low hanging
fruits now.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.69 2014/02/09 17:24:48 zhuk Exp $
d1334 1
d1351 2
@


1.69
log
@Do not warn about hardcoded /var/log/*.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.68 2014/02/09 16:09:55 zhuk Exp $
d1309 1
a1309 1
#     /var/log/* are allowed, though.
d1313 1
a1313 1
	egrep -q '(/usr/local|/var([^/]|/[^l]|/l[^o]|/lo[^g]|/log[[:alnum:]]+))[[:>:]]' "$1" &&
@


1.68
log
@Fix checks for duplicated assignments.  Noted while watching at
portcheck -A output for audio/soundtouch.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.67 2014/02/09 15:44:20 zhuk Exp $
d1308 2
a1309 1
#   * There are no hardcoded /usr/local or /var paths in file
d1313 1
a1313 1
	egrep -q '(/usr/local|/var)[[:>:]]' "$1" &&
@


1.67
log
@Use more precise name for variable, to make logic more clear.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.66 2014/02/09 15:19:32 zhuk Exp $
d1387 1
d1389 1
d1428 1
a1428 1
			var=${t[0]%?(\?)=}
d1438 1
d1440 1
@


1.66
log
@Fix default ignore list for -A, and add "tests" there.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.65 2014/02/04 21:28:30 zhuk Exp $
d1383 1
a1383 1
	local iflevel=0 l lnum=0 revs= t r mkvars= var dupfound
d1389 1
a1389 1
		dupfound=false
d1401 1
a1401 1
						dupfound=true
d1425 1
a1425 1
		   ((iflevel == 0)) && ! $dupfound; then
@


1.65
log
@Fix inconsistence when printing names of files in pkg/ directories. Found
by regression suite.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.64 2014/02/04 21:18:14 zhuk Exp $
d54 15
a68 14
			ignore_list[${#ignore_list[@@]}]=.FINISHED
			ignore_list[${#ignore_list[@@]}]=.INDEX
			ignore_list[${#ignore_list[@@]}]=.README
			ignore_list[${#ignore_list[@@]}]=.README.md
			ignore_list[${#ignore_list[@@]}]=.bulk
			ignore_list[${#ignore_list[@@]}]=.distfiles
			ignore_list[${#ignore_list[@@]}]=.infrastructure
			ignore_list[${#ignore_list[@@]}]=.lost+found
			ignore_list[${#ignore_list[@@]}]=.mystuff
			ignore_list[${#ignore_list[@@]}]=.openbsd-wip
			ignore_list[${#ignore_list[@@]}]=.packages
			ignore_list[${#ignore_list[@@]}]=.plist
			ignore_list[${#ignore_list[@@]}]=.pobj
			ignore_list[${#ignore_list[@@]}]=.update
@


1.64
log
@Face the reality: portcheck(1) is heavily used now, and not only for new
ports. Given that you import port once but update it a few times, make
the update mode (-CU) default for portcheck, and provide a "new port"
switch (-N) instead.

This commit updates portcheck(1) and portimport(1): code, documentation and
tests. The WWW stuff will be updated separately.

Note: regression suite fails now as it detected an actual misconsistence
in portcheck's output. This will be handled ASAP, too.

Initial prodding by naddy@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.63 2014/02/03 22:13:55 zhuk Exp $
d1219 1
@


1.63
log
@The only real hard limit for text lines is 80 characters. 72 is good when
you cite in email, but noone stops you to !fmt the text. This removes the
corresponding parameter from check_long_lines() because it's not needed
anymore.

inspired in chat by bcallah@@, idea okayed by sthen@@, espie@@ and naddy@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.62 2014/01/26 01:06:40 zhuk Exp $
d23 2
a24 2
	echo "usage: ${0##*/} [-CdPU] [-p portsdir] [-x glob]" >&2
	echo "       ${0##*/} [-AdP] [-p portsdir] [-x glob] [subdir ...]" >&2
d33 2
a34 2
existing_port=false
ignore_cvs=false
d42 1
a42 1
while getopts "ACdPp:Ux:" OPT; do
d45 1
a69 2
		existing_port=true
		ignore_cvs=true
d72 2
a73 2
	C)
		ignore_cvs=true
d76 4
a79 2
	d)
		debugging=true
a87 4
		;;

	U)
		existing_port=true
@


1.62
log
@Actually, checking for kdecore in WANTLIB is not such a good idea: it is
usually added by corresponding MODULE, which, of course, does his work
right. So catch common "kdeui" and "kio" libraries, too. Already run into
this a few times.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.61 2014/01/25 10:08:00 zhuk Exp $
d1229 1
a1229 1
		check_long_lines 72 "$F"
d1268 1
a1268 1
		check_long_lines 80 "$F"
d1281 1
a1281 1
		check_long_lines 80 "$F"
d1294 1
a1294 1
		check_long_lines 72 "$F"
d1319 2
a1320 2
#   * There are no lines longer than given number of characters that
#     have at least one space (avoids warnings on long URLs etc.).
a1322 1
	local max_width=$1; shift;
d1325 2
a1326 2
	local n=$(awk <"$file" -v max="$max_width" \
		  '/[[:space:]]/ && length > max { n++ } END { print n+0 }')
d1328 1
a1328 1
		err "$n line(s) longer than $max_width chars in $file"
d1379 1
a1379 1
	check_long_lines 80 "$F"
@


1.61
log
@Warn about *.rc files that won't work in our rc.d(8) framework.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.60 2014/01/13 11:47:31 zhuk Exp $
d1116 1
a1116 1
		kdecore?(?('>')=+([0-9])))
@


1.60
log
@soundserver_idl and vcard are often written wrong in WANTLIB; add checks
for them, too.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.59 2014/01/11 16:42:01 zhuk Exp $
d1278 2
@


1.59
log
@Add checks for hardcoded /usr/local and /var in MESSAGE, DESCR, README and
UNMESSAGE files.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.58 2013/12/30 12:29:25 zhuk Exp $
d1111 1
a1111 1
		DCOP?(?('>')=+([0-9])))
@


1.58
log
@Handle "?=" as well as "=" when searching for duplicated assignments.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.57 2013/12/29 16:59:06 zhuk Exp $
d1230 1
d1269 1
d1280 1
d1293 1
d1304 10
@


1.57
log
@Catch Samba libraries not written as lib/samba/ as well as Qt and others.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.56 2013/12/29 07:07:25 zhuk Exp $
d1410 1
a1410 1
		if [[ $l == *(" ")+([A-Za-z0-9_-])*(" "|"$tab")=* ]] &&
d1412 1
a1412 1
			var=${t[0]%=}
@


1.56
log
@Unbreak detection of extra files in ports directory.

The portcheck starts to really need having regression tests.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.55 2013/12/28 22:29:50 zhuk Exp $
d1103 5
@


1.55
log
@Try to catch some obvious errors like:

RUN_DEPENDS =
...
RUN_DEPENDS =

This won't catch such problems if they are spread in different files, but
should be helpful anyway now: idea from my recent typo in x11/kde4/runtime.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.54 2013/12/21 11:47:20 zhuk Exp $
d40 1
a40 1
ignore_list=; unset ignorelist[0]
d219 1
d232 1
a232 1
	ignoring "$1" || return 0
@


1.54
log
@Warn about SHARED_LIBS inside .if statements: those could hide some
problems, and make some other automated checks ineffective. And we
try to have are ports more declarative than imperative, anyway.

The idea was supported by espie@@ a while ago.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.53 2013/12/21 08:59:30 zhuk Exp $
d1352 1
d1363 2
a1364 1
	local l lnum=0 revs= t r
d1367 1
a1367 4
	while read -r l; do ((++lnum)); case $l in
	*(" ")REVISION*)
		$existing_port ||
			err "REVISION mark found at $F:$lnum"
d1369 42
a1410 6
		t[0]=${t[0]%=}
		if ((${#revs[@@]} > 0)); then
			for r in "${revs[@@]}"; do
				if [[ ${t[0]} == "$r" ]]; then
					err "duplicated $r in $F"
					# avoid dup error messages
d1414 1
d1416 1
a1416 17
		revs[${#revs[@@]}]=${t[0]}
		;;
	*(" ")@@(BUILD_DEPENDS|MODULES)-*)
		err "${l%%-*} is not a subpackageble variable, see $F:$lnum"
		;;
	*(" ").*(" "|"$tab")if*)
		((++iflevel))
		;;
	*(" ").*(" "|"$tab")endif*)
		((iflevel--))
		;;
	*(" ")SHARED_LIBS*(" "|"$tab")*(+|:|!)=*)
		if ((iflevel > 0)); then
			err "should not be inside .if block ($F:$lnum): $l"
		fi
		;;
	esac; done <"$F"
@


1.53
log
@Catch duplicated REVISION marks. Idea born after looking at result of
cvs update devel/boost in my local tree.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.52 2013/12/11 16:07:44 zhuk Exp $
d564 1
a564 1
	$existing_port || check_shlibs "$dir" $shared_libs
d588 2
a589 2
check_shlibs() {
	$debugging && echo "CALLED: check_shlibs($*)" >&2
d1351 1
d1364 1
d1384 11
@


1.52
log
@Oops, committed to portcheck instead of portimport. This reverts
the accidental changes that need some discussion.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.51 2013/12/11 15:54:03 zhuk Exp $
d1348 1
d1354 4
a1357 3
	check_trailing_whitespace "$1"
	check_long_lines 80 "$1"
	head -n 1 -- "$1" |
d1361 2
a1362 1
	local l lnum=0
d1366 13
a1378 1
			err "REVISION mark found at $1:$lnum"
d1381 1
a1381 1
		err "${l%%-*} is not a subpackageble variable, see $1:$lnum"
d1383 1
a1383 1
	esac; done <"$1"
@


1.51
log
@Fix spurious "coprocess already exists" by adding some "wait" calls.

From Bitrig via Martin Natano.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.50 2013/12/11 15:53:07 zhuk Exp $
d564 1
a564 1
	$existing_port || check_shlibs_versions "$dir" $shared_libs
d588 2
a589 2
check_shlibs_versions() {
	$debugging && echo "CALLED: check_shlibs_versions($*)" >&2
a1347 1
#   * No non-subpackaged REVISIONs in subpackaged port.
a1349 1
#   * SHARED_LIBS are not defined inside ".if" statements.
d1359 1
a1359 2
	local l lnum=0 iflevel=0
	local tab="$(print '\t')"
a1360 4
	*(" ")REVISION-*)
		$existing_port ||
			err "REVISION mark found at $1:$lnum"
		;;
a1366 11
		;;
	*(" ").*(" "|"$tab")if*)
		((++iflevel))
		;;
	*(" ").*(" "|"$tab")endif*)
		((iflevel--))
		;;
	*(" ")SHARED_LIBS*(" "|"$tab")*(+|:|!)=*)
		if (($iflevel > 0)); then
			err "should not be inside .if block ($1:$lnum): $l"
		fi
@


1.50
log
@Zap extra word in message.

From Bitrig via Martin Natano.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.49 2013/12/11 13:55:34 zhuk Exp $
d519 1
a522 1
	read_ok=false
d539 1
d685 1
d691 1
@


1.49
log
@Now that we have portcheck(1), start relying on it instead of doing
the checks and pkgpath detection ourself in portimport(1).

Sitting on this diff since september, reminded by kirby@@.

Tested in the wild by importing many ports, mostly KDE4-related.

Input and okay sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.48 2013/12/10 19:08:49 zhuk Exp $
d644 1
a644 1
			"somewhere else or ask someone to do this for you"
@


1.48
log
@Catch missing multimedia/phonon in modules. Actual for upcoming KDE4 apps
outside of KDE SC.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.47 2013/11/28 15:48:29 zhuk Exp $
d563 1
a563 1
	$existing_port || check_shlibs "$dir" $shared_libs
d587 2
a588 2
check_shlibs() {
	$debugging && echo "CALLED: check_shlibs($*)" >&2
d1345 1
d1348 1
d1358 2
a1359 1
	local l lnum=0
d1361 4
d1371 11
@


1.47
log
@Oops, extra colon sneaked in previous commit.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.46 2013/11/28 13:38:01 zhuk Exp $
d1057 2
d1065 2
d1072 1
d1088 4
d1125 4
@


1.46
log
@Some missing ${portref} in err() calls. Found while checking new KDE ports.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.45 2013/11/12 11:24:21 zhuk Exp $
d779 1
a779 1
					err "${portref}:missing @@unexec-delete rm -f" \
@


1.45
log
@Remove check for files/directories named "core", they are not a problem
anymore.

Pointed out by sthen@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.44 2013/11/10 14:56:41 naddy Exp $
d674 1
a674 1
					err "non-empty WANTLIB$subpkg for" \
d779 1
a779 1
					err "missing @@unexec-delete rm -f" \
d821 1
a821 1
				err "the @@unexec-delete line removing" \
@


1.44
log
@spelling; ok zhuk@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.43 2013/11/09 23:27:30 naddy Exp $
a194 4
err_core_found() {
	err "file or directory \"$1\" found, CVS will ignore it"
}

a239 2
	elif [[ ${1##*/} == core ]]; then
		$existing_port || err_core_found "${1%/*}"
a351 3
		[[ ${F##*/} == core ]] && ! $existing_port &&
			err_core_found "$F"

a1123 1
#   * No 'core' files present (until updating)
a1137 2
			[[ ${F##*/} == core ]] && ! $existing_port &&
				err_core_found "$F"
@


1.43
log
@fix the check for long lines, simplify; ok zhuk@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.42 2013/11/07 08:18:16 ajacoutot Exp $
d116 1
a116 1
# Detect path to root of directory tree of current port(-s) and put it
d121 1
a121 1
# root ports directory where the port(-s) will be imported. In case we
d342 1
a342 1
		err_duplicated "packing list(-s)" "$dir"
d497 1
a497 1
					err_duplicated "packing list(-s)" "$dir"
d999 1
a999 1
		err "${portref}translation file(-s) found without" \
d1303 1
a1303 1
		err "$n line(-s) longer than $max_width chars in $file"
d1324 1
a1324 1
		err "$1 contains item(-s) with \${FULLPKGNAME} in it, see above"
@


1.42
log
@SECURITY files are gone.

ok zhuk@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.41 2013/11/01 10:43:40 zhuk Exp $
d1300 3
a1302 5
	local n=$(cat -- "$file" |
                  awk '/[[:space:]]/ && length($0) > 72' |
		  wc -l)
	if (($n > 0 )); then
		# do not print $n inside quotes, it could contain extra spaces
a1303 1
	fi
@


1.41
log
@Add checks for maximum line length in some port files. Feel free to correct
actual numbers if needed.

Suggested by bcallah@@ on ports@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.40 2013/10/25 23:32:08 zhuk Exp $
d1191 2
a1192 2
#   * PFRAG, PLIST, README, SECURITY and .rc files contain appropriate
#     OpenBSD RCS tags; other files should NOT contain OpenBSD RCS tag.
d1194 2
a1195 2
#   * No trailing whitespace for DESCR, MESSAGE, README, SECURITY, UNMESSAGE
#     and .rc files (PLIST and PFRAG are better checked with "make package").
d1251 1
a1251 1
	README?(-*)|SECURITY?(-*))
@


1.40
log
@Add a check that we do not end up with WANTLIB in arch-independent package.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.39 2013/10/19 20:06:14 zhuk Exp $
d1219 1
d1257 1
d1267 1
d1279 1
d1293 17
d1353 1
@


1.39
log
@Improve handling of icon themes:
  - Make sure there is @@unexec-delete rm -f %D/share/icons/foo/icon-theme.cache
    for every icon theme index file; e.g., remove caches altogether with the
    theme itself. Also, make sure that such line preceeds all of the icon theme
    files there.
  - Stop checking if the @@exec/@@unexec-delete line for theme is already listed:
    we already take number of them into account, and those checks involve
    calling the fgrep(1).
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.38 2013/10/13 16:54:24 zhuk Exp $
d665 1
a665 1
	local flavor
d677 1
a677 1
			make "${make_args[@@]}" show="MODULES WANTLIB$subpkg" | {
d680 1
d682 4
@


1.38
log
@Disable/improve some Python-related checks, after discussion with fgsch@@
a long time ago. Namely, do not warn about .pyc/.pyo without .py, it's
perfectly legal.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.37 2013/10/13 16:47:18 zhuk Exp $
d699 4
a702 1
#     for each icon theme used in package.
d751 3
d781 5
d806 1
a806 2
			echo "$exec_icon_themes" | fgrep -q "/$theme/" ||
				exec_icon_themes="$exec_icon_themes /$theme/"
d813 1
a813 2
			echo "$unexec_icon_themes" | fgrep -q "/$theme/" ||
				unexec_icon_themes="$unexec_icon_themes /$theme/"
d822 8
a829 2
			echo "$unexec_icon_themes" | fgrep -q "/$theme/" ||
				unexec_icon_themes="$unexec_icon_themes /$theme/"
@


1.37
log
@Add checks for some files having newline and EOF in MESSAGE, DESCR and such.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.36 2013/08/27 07:52:15 zhuk Exp $
a716 2
#
#   * Each .pyc and .pyo should have corresponding .py file.
d990 3
a992 2
			err "${portref}compiled Python module without" \
			    "source, expected: ${pyc_files[$ic]%c}"
d1000 2
a1001 1
			    "compiled version: $py"
d1006 3
a1008 2
			err "${portref}optimized Python module without" \
			    "source, expected: ${pyo_files[$io]%o}"
d1014 1
a1014 1
		# XXX too much noise
d1020 14
a1033 10
	while (($ic < ${#pyc_files[@@]})); do
		err "${portref}compiled Python module without source," \
		    "expected: ${pyc_files[$ic]%c}"
		((++ic))
	done
	while (($io < ${#pyo_files[@@]})); do
		err "${portref}optimized Python module without source," \
		    "expected: ${pyo_files[$io]%o}"
		((++io))
	done
@


1.36
log
@Catch more files with wrong permissions.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.35 2013/08/24 16:15:56 zhuk Exp $
d588 6
d1193 1
d1230 1
d1250 1
@


1.35
log
@Silence a few more false positives when checking actual plist.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.34 2013/08/24 15:44:59 zhuk Exp $
d1108 1
d1111 3
d1135 2
d1178 2
@


1.34
log
@Use default value of PORTSDIR_PATH when determining root ports directory.
Allows to omit -p option when running inside non-standard dir mentioned in
PORTSDIR_PATH in /etc/mk.conf.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.33 2013/08/23 08:39:51 zhuk Exp $
d759 1
a759 1
		share/icons/*/*/*|share/icons/*/@@(index.theme|iconrc?(-png)))
d859 1
a859 1
		share/@@(doc|examples)+(/*).py|?(s)bin/*.py)
@


1.33
log
@Check correctly for the presence of SUBDIR-Makefile, and only in update mode.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.32 2013/08/23 07:45:07 zhuk Exp $
d132 18
@


1.32
log
@Handle short reads more gracefully. Allows portcheck to go through
base/xenocara/share/pciids.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.31 2013/08/23 01:26:18 zhuk Exp $
d394 2
a395 1
	egrep -q '^ *SUBDIR[[:space:]]*\+?=' Makefile ||
@


1.31
log
@Fix the case when default FLAVOR contains stuff from PSEUDO_FLAVORS only.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.30 2013/08/23 00:43:20 zhuk Exp $
d529 3
@


1.30
log
@Oops, don't print errors from ls.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.29 2013/08/22 23:30:23 zhuk Exp $
d503 2
a504 1
	local multi_packages pkgpath_this pseudo_flavors shared_libs subst_cmd
d507 2
a508 1
	local show_items="$show_items PSEUDO_FLAVORS SHARED_LIBS SUBST_CMD"
d521 1
d531 5
d537 1
a537 1
	[[ -n $flavor ]] && unset check_flavors[0]
a538 1
	local f pf
@


1.29
log
@Pick up .port.mk-only directories in check_port_hier(), too.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.28 2013/08/22 22:38:32 zhuk Exp $
d364 1
a364 1
                                      ls $F/*.port.mk >/dev/null) &&
@


1.28
log
@Add missing checks descriptions.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.27 2013/08/22 22:37:17 zhuk Exp $
d363 3
a365 1
				if ! [[ -f $F/Makefile ]] && ! has_subdirs_only "$F"; then
@


1.27
log
@Enable "set -u" by default. Joint work with rpe@@, thanks!
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.26 2013/08/22 21:16:04 zhuk Exp $
d996 2
d1071 1
@


1.26
log
@This var should be local.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.25 2013/08/22 21:06:00 zhuk Exp $
d20 1
a37 1
unset ignore_list
d40 2
d45 23
a67 23
		$rootrun || set -A ignore_list -- "${ignore_list[@@]}" \
			.cvsignore \
			.fslckout \
			.git \
			.gitignore \
			.hg \
			.hgignore \
			.svn \
			FINISHED \
			INDEX \
			README \
			README.md \
			bulk \
			distfiles \
			infrastructure \
			logs \
			lost+found \
			mystuff \
			openbsd-wip \
			packages \
			plist \
			pobj \
			update
d258 1
a258 1
	local subpkg flavor all_flavors
d418 1
a418 1
		check_port_hier "${dir#./}" "$@@"
d526 2
a527 2
	local check_flavors
	[[ -z $flavor ]] && set -A check_flavors -- ""
d535 1
a535 1
		set -A check_flavors -- "${check_flavors[@@]}" $f
d711 1
a711 1
	local icon_themes exec_themes unexec_themes
d717 2
a718 1
	local py_files pyc_files pyo_files
d948 3
a950 3
	set -sA py_files -- "${py_files[@@]}"
	set -sA pyc_files -- "${pyc_files[@@]}"
	set -sA pyo_files -- "${pyo_files[@@]}"
d952 1
a952 1
	for py in "${py_files[@@]}"; do
d981 1
a981 1
	done
@


1.25
log
@More triggering for lib/* prefixes in WANTLIB.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.24 2013/08/22 20:56:14 zhuk Exp $
d1277 1
@


1.24
log
@Stupid typo that broke pkgpath detection.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.23 2013/08/22 20:43:10 zhuk Exp $
d1025 1
a1025 1
		Qt+([A-Za-z0-9])?(?('>')=+([0-9])))
d1030 1
a1030 1
		qt-mt?(?('>')=+([0-9])))
@


1.23
log
@Fix "core" handling. It should be ignored in "update" mode (-U).

Noticed by rpe@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.22 2013/08/22 20:33:16 zhuk Exp $
d499 1
a499 1
	local multi_packages this_pkg_path pseudo_flavors shared_libs subst_cmd
d514 1
a514 1
	read -pr pkg_path_this &&
d545 1
a545 1
	pkgpath=${pkpath:-"$pkg_path_this"}
@


1.22
log
@Small polish:
   * Add a few documentation bits.
   * Use ((++var)) instead of ((var++)), this way no need to append "|| true".
   * Shuffle some functions in alphabetical order.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.21 2013/08/22 17:44:22 zhuk Exp $
d225 1
a225 1
		$rootrun || err_core_found "${1%/*}"
d338 3
a360 4
				if ! $rootrun && [[ ${F##*/} == core ]]; then
					err_core_found "$F"
				fi

d1074 4
a1077 1
			[[ "$F" == *.core ]] && err_coredump_found "$F"
@


1.21
log
@General usability improvements:
   * Allow to run tree check (-A) from any directory.
   * Notify about ports root directory only on tree check.
   * Ignore more stuff for tree check, makes easier to run:
       portcheck -Ap /usr/ports/openbsd-wip
   * Use ignore list in has_subdirs_only(), too.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.20 2013/08/22 16:43:04 zhuk Exp $
a201 4
is_vcs_item() {
	[[ -d "$1" && ${1##*/} == @@(CVS|.fslckout|.git|.hg|.svn) ]]
}

d210 2
a211 7
check_trailing_whitespace() {
	local check_what=$1; shift
	local real_path
	(($# > 0)) && real_path=$1
	[[ -z $real_path ]] && real_path=$check_what
	egrep -q '[[:space:]]+$' "$check_what" &&
		err "trailing whitespace in $real_path"
d235 7
d437 1
a437 1
			((non_portmk++)) || true
d444 1
a444 1
			((non_portmk++)) || true
d455 1
a455 1
			((non_portmk++)) || true
d464 1
a464 1
			((non_portmk++)) || true
d479 1
a479 1
			((non_portmk++)) || true
d550 6
d708 2
d715 1
d718 1
d756 2
a757 2
			((guic_exec_cnt++)) || true
			eval "((guic_exec_cnt_$varname++)) || true"
d764 2
a765 2
			((guic_unexec_cnt++)) || true
			eval "((guic_unexec_cnt_$varname++)) || true"
d774 2
a775 2
			((guic_unexec_cnt++)) || true
			eval "((guic_unexec_cnt_$varname++)) || true"
d791 1
a791 1
			((mime_exec_cnt++)) || true
d794 1
a794 1
			((mime_unexec_cnt++)) || true
d808 1
a808 1
			((mimepkg_exec_cnt++)) || true
d811 1
a811 1
			((mimepkg_unexec_cnt++)) || true
@


1.20
log
@Add Python-specific checks:
  * Each .py file (except examples, documentation and such) should have
    corresponding .pyc.
  * Each .pyc and .pyo should have corresponding .py file.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.19 2013/08/22 14:08:12 zhuk Exp $
d45 7
d54 1
a83 7
		if [[ ${PWD##"$OPTARG"} == "$PWD" ]]; then
			cat >&2 <<EOE
${0##*/}: current directory does not seem to be under the
specified root directory: $OPTARG.
EOE
			exit 3
		fi
d101 8
a134 2
	[[ -n $portsdir ]] &&
		echo "ports root directory detected: $portsdir" >&2
d149 4
a152 1
$rootrun && cd -- "$portsdir"
d191 1
d209 1
a209 1
		[[ $1 == $iglob ]] && return 0
@


1.19
log
@Add variables sometimes referenced in port docs to SUBST_CMD invocation.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.18 2013/08/22 13:56:16 zhuk Exp $
d233 9
d661 5
d698 3
a700 1
	local app l theme varname
d704 3
d805 14
d926 45
a970 1
	! $error
@


1.18
log
@Do not complain that gettext does not depend on gettext.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.17 2013/08/22 13:29:07 zhuk Exp $
d1140 3
a1142 1
	eval "$subst_cmd" <"$F" | egrep '\$\{[A-Z]+\}' >&2 &&
@


1.17
log
@Unbreak check_pkg_dir() call in check_port_hier() again.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.16 2013/08/22 13:23:54 zhuk Exp $
d889 1
@


1.16
log
@Do not print an extension of hypothesized app name.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.15 2013/08/22 13:20:17 zhuk Exp $
d371 1
a371 1
	$pkg_exists && check_pkg_dir "$F" "$last_subst_cmd"
@


1.15
log
@Add a check that BUILD_DEPENDS and MODULES are not used in subpackaging
manner. Inspired by mail/courier-authlib.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.14 2013/08/22 12:53:49 zhuk Exp $
d708 1
@


1.14
log
@Stability fixes: do not abort if read from co-process failed, and declare
local variables before calling "eval" with them.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.13 2013/08/22 11:31:43 zhuk Exp $
d1145 1
d1155 10
a1164 3
	$existing_port && return 0
	grep -q '^ *REVISION' "$1" 2>/dev/null &&
		err "REVISION(-s) found in $1"
@


1.13
log
@Do not complain for missing gettext dependency when translation files are
found and current FLAVOR contains "static". After discussion with naddy@@
about archivers/gtar.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.12 2013/08/22 10:43:15 zhuk Exp $
d278 1
a283 1
		shift
d286 3
a288 3
	local distinfo_lives_upper=${distinfo_lives_upper:-false}
	local pkg_lives_upper=${pkg_lives_upper:-false}
	local plist_lives_upper=${plist_lives_upper:-false}
d383 1
a387 1
		shift
d390 3
a392 3
	local distinfo_lives_upper=${distinfo_lives_upper:-false}
	local pkg_lives_upper=${pkg_lives_upper:-false}
	local plist_lives_upper=${plist_lives_upper:-false}
d487 1
d489 17
a505 12
	read -pr dist_subdir
	read -pr distfiles
	read -pr flavor
	read -pr flavors
	read -pr fullpkgname
	read -pr master_sites
	read -pr multi_packages
	read -pr pkg_path_this
	read -pr pseudo_flavors
	read -pr shared_libs
	read -pr subst_cmd
	exec 3<&p; exec 3<&-
@


1.12
log
@Fix another err() call.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.11 2013/08/22 10:41:20 zhuk Exp $
d619 1
a619 1
				check_plist "$portref" "$fullpkgname"
d651 6
d881 1
a881 1
	$translation_found && ! $gettext_dep &&
@


1.11
log
@Found a way to invoke make(1) in co-processes: just redirect stdin to
/dev/null, and it'll die gracefully. Allows to get rid of some ugly nested
shells and finally give check_pkg_dir() ability to use SUBST_CMD in port
parent directories.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.10 2013/08/22 09:44:17 zhuk Exp $
d1094 1
a1094 1
	$empty && err "$1 directory does not contain either DESCR, PFRAG or PLIST files"
@


1.10
log
@Assorted bugfixes:
   * Allow entering pure-subdirs directories, like databases/mdbtools.
   * Add missing debugging statements.
   * Do not complain about FULLPKGNAME in @@comment'ed lines.
   * Do not fail to check pkg/ when in check_port_hier() (to be improved,
     currently this means no checking for SUBST_VARS there).
   * Add missing ${portref} in err calls.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.9 2013/08/22 01:01:11 zhuk Exp $
d269 4
d295 5
a299 2
	local pkg_exists=false
	[[ -d $dir/pkg ]] && pkg_exists=true
a306 1
	$pkg_lives_upper && pkg_exists=true
d312 1
a312 1
		pkg_lives_upper=$pkg_exists \
d326 1
a326 1
			files|patches|pkg)
d330 5
d370 3
d482 1
a482 1
	local multi_packages pseudo_flavors shared_libs subst_cmd
d484 1
a484 1
	local show_items="$show_items MASTER_SITES MULTI_PACKAGES"
d487 21
a507 27
        # Do not try to use co-processes, there is some bug related
        # to redirection of error stream seen on big number of
        # nested ports (100 or so). And we need to redirect stderr to
        # avoid noise when accessing dead co-processes accidentially.

	(cd -- "$dir"; make "${make_args[@@]}" show="$show_items") | {
		read -r dist_subdir
		read -r distfiles
		read -r flavor
		read -r flavors
		read -r fullpkgname
		read -r master_sites
		read -r multi_packages
		read -r pseudo_flavors
		read -r shared_libs
		read -r subst_cmd

		local check_flavors
		[[ -z $flavor ]] && set -A check_flavors -- ""

		local f pf
		for f in $flavors; do
			for pf in $pseudo_flavors; do
				[[ $f == "$pf" ]] && continue 2
			done
			[[ $f == debug ]] && continue     # XXX
			set -A check_flavors -- "${check_flavors[@@]}" $f
d509 3
d513 4
a516 9
		check_distfiles "$dir" "$dist_subdir" $distfiles
		check_master_sites "$dir" $master_sites
		$pkg_exists && check_pkg_dir "$dir"/pkg "$subst_cmd"
		$existing_port || check_shlibs "$dir" $shared_libs

		for _s in $multi_packages; do
			sub_checks "$dir" "$_s" \
			    "$fullpkgname" "${check_flavors[@@]}"
		done
d518 3
a520 2
		! $error
	} || error=true
d522 2
a523 4
	if [ -z $pkgpath ] && ! $rootrun; then
		pkgpath=$(cd -- "$dir"; make "${make_args[@@]}" show=PKGPATH 2>/dev/null) ||
			pkgpath=
	fi
d617 3
a619 3
				make "${make_args[@@]}" print-plist-with-depends |
				    check_plist "$portref" "$fullpkgname" ||
				    error=true
d674 1
a674 1
	while read l; do
d1051 2
a1052 1
		}
d1152 8
a1159 9
	find -f "$1" -- -maxdepth 1 -type f \
	    \( -perm -100 -or -perm -010 -or -perm 001 \) | {
		while read F; do
			F=${F#./}
			ignoring "$F" && continue
			err "executable file: ${F#./}"
		done
		! $error
	} || error=true
@


1.9
log
@More theme files to ignore, those were found in XFCE icon theme.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.8 2013/08/22 00:56:00 zhuk Exp $
d173 18
d333 1
a333 1
				if ! [[ -f $F/Makefile ]]; then
d383 2
a384 1
	      egrep -sq '^ *SUBDIR[[:space:]]*\+?=' "$dir"/Makefile; then
d490 1
a490 1
		set -A check_flavors --
d812 1
a812 1
			err "doing @@exec of gtk-update-icon-cache" \
d820 1
a820 1
			err "doing @@unexec-delete of gtk-update-icon-cache" \
d1010 6
a1015 1
	local subst_cmd=$1; shift
d1025 1
a1025 1
		check_subst_vars "$F" "$subst_cmd"
d1032 1
a1032 1
		check_subst_vars "$F" "$subst_cmd"
d1051 1
a1051 1
		check_subst_vars "$F" "$subst_cmd"
d1058 1
a1058 1
		check_subst_vars "$F" "$subst_cmd"
d1077 1
a1077 1
		check_subst_vars "$F" "$subst_cmd"
d1095 2
d1107 1
a1107 1
	egrep -v '^share/doc/pkg-readmes/\${FULLPKGNAME}$' "$1" |
d1115 2
@


1.8
log
@Play nicer with different icon themes. They could have different structure,
but at least they all have more depth than any port installing icons under
share/icons/ by error.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.7 2013/08/22 00:30:17 zhuk Exp $
d652 1
a652 1
		share/icons/*/*/*|share/icons/*/index.theme)
@


1.7
log
@Do not match plist items containing ${FULLPKGNAME} only, those are not
harmful and often used in ports with custom PREFIX.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.6 2013/08/21 23:46:00 zhuk Exp $
d652 3
a654 1
		share/icons/*/@@(+([0-9])x+([0-9])|scalable)/*)
d665 5
a669 1
		share/icons/*+(/*)?)
@


1.6
log
@Improve reporting of problems with lib/qt* and lib/kde* in WANTLIB.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.5 2013/08/21 21:53:29 zhuk Exp $
d1070 5
d1076 1
a1076 1
		fgrep '${FULLPKGNAME}' >&2 &&
@


1.5
log
@Try to detect misspelled variables in majority of packaging files. The logic
is simple: after running pkg_subst(1) there should be no ${[A-Z]+} strings.

idea from kirby@@
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.4 2013/08/21 21:08:43 zhuk Exp $
d886 13
a898 11
		Qt*)
			if $qt4_module; then
				err "$portref$v instead of lib/qt4/$v" \
				    "in WANTLIB"
			elif $qt3_module; then 
				err "$portref$v instead of lib/qt3/$v" \
				    "in WANTLIB"
			else
				err "$portref$v WANTLIB without x11/qt[34]" \
				    "in MODULES"
			fi
d901 1
a901 1
		kdecore*)
d904 1
a904 1
				    "in WANTLIB"
d907 1
a907 1
				    "in WANTLIB"
d910 1
a910 1
				    "in MODULES"
@


1.4
log
@Zap unused variable.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.3 2013/08/21 21:02:16 zhuk Exp $
a417 1
				check_pkg_dir "$F"
d419 2
d441 1
a441 2
	$pkg_lives_upper && pkg_exists=true
	$pkg_exists || err "no pkg/ in $dir"
d449 1
a449 1
	local multi_packages pseudo_flavors shared_libs
d452 1
a452 1
	local show_items="$show_items PSEUDO_FLAVORS SHARED_LIBS"
d460 10
a469 9
		read dist_subdir
		read distfiles
		read flavor
		read flavors
		read fullpkgname
		read master_sites
		read multi_packages
		read pseudo_flavors
		read shared_libs
d485 1
d487 1
d587 2
a588 2
				read modules
				read wantlib
d982 2
d987 1
a987 1
	for F in "$1"/* "$1"/.*; do case "${F##*/}" in
d993 1
d1000 1
d1019 1
d1026 1
d1045 1
d1071 10
@


1.3
log
@Fix OpenBSD RCS tag handling, including escaping the tag in the code where
appropriate - or CVS will happily convert:

  fgrep '$OpenBSD$'

to:

  fgrep '$OpenBSD: ...$'

Also, add a check that FULLPKGNAME does not happen in PLIST/PFRAG except for
share/doc/pkg-readmes/* items.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.2 2013/08/21 19:49:32 zhuk Exp $
d448 1
a448 1
	local dist_subdir distfiles flavor flavors master_sites modules
@


1.2
log
@Add checks whether we have Qt* or kdecore* in WANTLIB but no x11/qt* or
x11/kde* in MODULES. Inspired by audio/mumble port on ports@@.
@
text
@d3 1
a3 1
# $OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $
d938 1
a938 1
#   * Each patch contains $OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $ RCS tag.
d971 1
a971 1
#     $OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $ RCS tags; other files should NOT contain $OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $ RCS tag.
d975 1
d988 1
a988 1
		fgrep -q '$OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $' "$F" &&
d994 1
a994 6
		[[ -f $F ]] ||
			err "$F is not a file"
		head -n 1 -- "$F" |
			egrep -q '^@@comment \$OpenBSD[[:space:]]*(:.*)?\$$' ||
			err "$F does not have \$OpenBSD\$ RCS tag at the top"

d1012 1
a1012 5
		[[ -f $F ]] ||
			err "$F is not a file"
		head -n 1 -- "$F" |
			egrep -q '^@@comment \$OpenBSD[[:space:]]*(:.*)?\$$' ||
			err "$F does not have \$OpenBSD\$ RCS tag at the top"
d1020 1
a1020 1
			egrep -q '^(#[[:space:]]*)?\$OpenBSD[[:space:]]*(:.*)?\$$' ||
d1029 1
a1029 1
			egrep -q '^#[[:space:]]*\$OpenBSD[[:space:]]*(:.*)?\$$' ||
d1037 1
a1037 1
		fgrep -q '$OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $' "$F" &&
d1050 15
a1064 1
#   * Contains $OpenBSD: portcheck,v 1.1 2013/08/21 17:00:24 zhuk Exp $ tag at the top line.
d1072 1
a1072 1
		egrep -q '^#[[:space:]]*\$OpenBSD[[:space:]]*(:.*)?\$' ||
@


1.1
log
@Add portcheck(1), the port bugs detection utility.

Generic idea to split checks from portimport(1) came from sthen@@.

Input from ajacoutot@@, jmc@@, rpe@@, sthen@@, Andreas Perera and Juan
Francisco Cantero Hurtado.

"put it in" ajacoutot@@
@
text
@d3 1
a3 1
# $OpenBSD$
d859 4
d868 4
d875 33
a907 2
		iconv?(?(">")=+([0-9])))	iconv_wantlib=true;;
		intl?(?(">")=+([0-9])))		intl_wantlib=true;;
d938 1
a938 1
#   * Each patch contains $OpenBSD$ RCS tag.
d971 1
a971 1
#     $OpenBSD$ RCS tags; other files should NOT contain $OpenBSD$ RCS tag.
d987 1
a987 1
		fgrep -q '$OpenBSD$' "$F" &&
d1045 1
a1045 1
		fgrep -q '$OpenBSD$' "$F" &&
d1058 1
a1058 1
#   * Contains $OpenBSD$ tag at the top line.
@

