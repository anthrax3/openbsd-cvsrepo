head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.2
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.20
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.16
date	2017.05.25.23.15.41;	author espie;	state Exp;
branches;
next	1.15;
commitid	v5dcbUwqADSMfzU7;

1.15
date	2017.05.24.09.22.48;	author espie;	state Exp;
branches;
next	1.14;
commitid	lWVLWev8MTfXAZAP;

1.14
date	2017.05.24.09.16.57;	author espie;	state Exp;
branches;
next	1.13;
commitid	w1KBhPwK0nM55lCJ;

1.13
date	2017.05.23.17.52.34;	author espie;	state Exp;
branches;
next	1.12;
commitid	nqyvaKmZt5YeqcdU;

1.12
date	2017.05.17.11.31.17;	author espie;	state Exp;
branches;
next	1.11;
commitid	89XwbHHmerXF59Dv;

1.11
date	2017.05.13.19.40.22;	author espie;	state Exp;
branches;
next	1.10;
commitid	WMaxX5Ic3io7ErDX;

1.10
date	2017.05.06.12.43.55;	author espie;	state Exp;
branches;
next	1.9;
commitid	AWyn0VZfBkYlEudk;

1.9
date	2017.05.06.12.42.01;	author espie;	state Exp;
branches;
next	1.8;
commitid	zmgeQL8pd9FKM4z8;

1.8
date	2017.05.05.13.38.13;	author espie;	state Exp;
branches;
next	1.7;
commitid	LD6iPTAWS4HjWu6r;

1.7
date	2017.05.03.09.11.26;	author espie;	state Exp;
branches;
next	1.6;
commitid	OEERv3BKgAIePExO;

1.6
date	2017.05.02.22.32.29;	author espie;	state Exp;
branches;
next	1.5;
commitid	5v2WFIefaEzuIIPe;

1.5
date	2017.05.02.21.06.41;	author espie;	state Exp;
branches;
next	1.4;
commitid	TNvMmcZpMnObHwa0;

1.4
date	2017.05.02.09.26.30;	author espie;	state Exp;
branches;
next	1.3;
commitid	c1iYiOcFbjonqIrk;

1.3
date	2017.04.29.14.49.38;	author espie;	state Exp;
branches;
next	1.2;
commitid	ACaXV3ZztKNX5DzE;

1.2
date	2016.05.15.22.43.18;	author jca;	state Exp;
branches;
next	1.1;
commitid	a3Qi6SuKUeAxiu6v;

1.1
date	2010.08.20.14.50.36;	author espie;	state Exp;
branches;
next	;


desc
@@


1.16
log
@remove most of the useless stuff that update-patches shows by default.
add a few useful messages instead.
@
text
@#! /usr/bin/perl

# $OpenBSD: update-patches,v 1.15 2017/05/24 09:22:48 espie Exp $
# Copyright (c) 2017
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use File::Find;
use strict;
use warnings;
use feature qw(say);

# our "normal" output is STDERR
open my $oldout, '>&STDOUT';
open STDOUT, '>&STDERR'; 

# grab env stuff
my ($distorig, $patchorig, $wrkdist, $patchdir, $patch_list) = 
    ($ENV{DISTORIG}, $ENV{PATCHORIG}, $ENV{WRKDIST}, $ENV{PATCHDIR},
	 $ENV{PATCH_LIST});

if ($patchorig ne '.orig') {
	say "PATCHORIG=$patchorig";
}
my $force = defined($ENV{FORCE_REGEN});
my $verbose = defined($ENV{PATCH_VERBOSE});

# protect against dirty stuff
$wrkdist =~ s/\/$//g;

my @@diff_args;
# XXX more processing maybe ?
if (defined $ENV{DIFF_ARGS}) {
	push(@@diff_args, split(/\s+/, $ENV{DIFF_ARGS}));
}

if (!-d $wrkdist) {
	say "WRKDIST=$wrkdist is not a directory";
	exit 1;
}
my ($actual, $saved, $done, $nochange);
my @@edit;

my $kw_re = qr{\$(
		Author|CVSHeader|Date|Header|Id|Name|Locker|Log|
			RCSFile|Revision|Source|State|OpenBSD
		    )\b.*\$}x;

sub fuzz_chunk
{
	my $chunk = shift;
	return 0 if @@{$chunk->{lines}} < 4;
	my $zap = 0;
	my $fuzzed = 0;
	if ($chunk->{lines}[0] =~ m/^\s/ && 
	    $chunk->{lines}[0] =~ m/$kw_re/) {
	    	$zap = 1;
	}
	if ($chunk->{lines}[0] =~ m/^\s/ &&
	    $chunk->{lines}[1] =~ m/^\s/ && 
	    $chunk->{lines}[1] =~ m/$kw_re/) {
	    	$zap = 2;
	}
	while ($zap) {
		shift @@{$chunk->{lines}};
		$chunk->{oldstart}++;
		$chunk->{newstart}++;
		$chunk->{oldplus}--;
		$chunk->{newplus}--;
		$zap--;
		$fuzzed = 1;
	}
	if ($chunk->{lines}[-1] =~ m/^\s/ &&
	    $chunk->{lines}[-1] =~ m/$kw_re/) {
	    	$zap=1;
	}
	if ($chunk->{lines}[-1] =~ m/^\s/ &&
	    $chunk->{lines}[-2] =~ m/^\s/ &&
	    $chunk->{lines}[-2] =~ m/$kw_re/) {
	    	$zap=2;
	}
	while ($zap) {
		pop @@{$chunk->{lines}};
		$chunk->{oldplus}--;
		$chunk->{newplus}--;
		$zap--;
		$fuzzed = 1;
	}
	return $fuzzed;
}

sub may_fuzz_patch
{
	my ($stem, $list) = @@_;

	my $try_fuzz = 0;
	for my $l (@@$list) {
		if ($l =~ m/$kw_re/) {
			$try_fuzz = 1;
			last;
		}
	}

	return unless $try_fuzz;

	my @@lines = @@$list;
	if (@@lines < 2) {
		return;
	}
	# extract the header
	my $h1 = shift @@lines;
	my $h2 = shift @@lines;
	# cut up the patch
	my $patch = [];
	my $chunk;
	my $fuzzed = 0;

	while (@@lines > 0) {
		my $l = shift @@lines;
		if ($l =~ m/^\@@\@@\s+\-(\d+)\,(\d+)\s+\+(\d+)\,(\d+)\s+\@@\@@$/) {
			if (defined $chunk) {
				if ($chunk->{fuzzable} && fuzz_chunk($chunk)) {
					$fuzzed = 1;
				}
				push(@@$patch, $chunk);
			}
			$chunk = {oldstart => $1, oldplus => $2,
				newstart => $3, newplus => $4};
		} else {
			return if !defined $chunk;
			if ($l =~ m/$kw_re/) {
				$chunk->{fuzzable} = 1;
			}
			push(@@{$chunk->{lines}}, $l);
		}
	}
	if (defined $chunk) {
		if ($chunk->{fuzzable} && fuzz_chunk($chunk)) {
			$fuzzed = 1;
		}
		push(@@$patch, $chunk);
	}

	return unless $fuzzed;

	say "*** Patch for $stem fuzzed because of CVS keywords" if $verbose;
	@@$list = ($h1, $h2);

	for my $chunk (@@{$patch}) {
		push(@@$list, '@@@@ -'.$chunk->{oldstart}.','.$chunk->{oldplus}.
			' +'.$chunk->{newstart}.','.$chunk->{newplus}.
			' @@@@'."\n");
		push(@@$list, @@{$chunk->{lines}});
	}
}

sub create_patch
{
	my ($src, $dst, $stem) = @@_;
	say "Processing $stem" if $verbose;
	open(my $file, "-|", "diff", "-u", "-p", "-a", @@diff_args, "-L",
		"$stem.orig", "-L", $stem, "--", $src, $dst) or die;
	my @@lines = <$file>;
	close $file;
	my $comment = "!OpenBSD!\n";
	$comment =~ tr/!/$/;
	may_fuzz_patch($stem, \@@lines);
	return {stem => $stem, patch => \@@lines, 
		filename => patch_name($stem),
		comment => [$comment, "\n"] };
}

sub parse_existing_patch
{
	my $filename = shift;
	open (my $f, '<', $filename) or die;
	my (@@comment, $src, @@patch);
	while (<$f>) {
		if (m/^Index:\s+(\S.*)/) {
			$src = $1;
			while (<$f>) {
				push(@@patch, $_);
			}
			last;
		}
		# XXX have to do *two* matches so that $1 is okay
		# otherwise if $patchorig = 'sthg.orig' this will fail
		if (m/^\-\-\-\s+(\S.*)\Q$patchorig\E/ ||
		    m/^\-\-\-\s+(\S.*)\.orig/) {
			push(@@patch, $_);
			$src = $1;
			while (<$f>) {
				push(@@patch, $_);
			}
			last;
		}
		push(@@comment, $_);
	}
	return {stem => $src, filename => $filename, 
	    comment => \@@comment, patch => \@@patch};
}

sub write_patch
{
	my $p = shift;
	if (-f $p->{filename}) {
		rename $p->{filename}, $p->{filename}.".orig" or die;
	}
	open(my $f, '>', $p->{filename}) or die;
	for my $l (@@{$p->{comment}}) {
		print $f $l;
	}
	if (defined $p->{stem}) {
		print $f "Index: $p->{stem}\n";
	}
	for my $l (@@{$p->{patch}}) {
		print $f $l;
	}
	close $f or die;
}

sub patch_name
{
	my $arg = shift;
	$arg =~ s/[\s\/\.]/_/g;
	return "patch-$arg";
}

sub description
{
	my $p = shift;
	if ($p->{filename} ne patch_name($p->{stem})) {
		return "$p->{filename} for $p->{stem}";
	} else {
		return "for $p->{stem}";
	}
}

sub patches_differ
{
	my ($a, $b) = @@_;
	if (@@{$a->{patch}} != @@{$b->{patch}}) {
		return 1;
	}
	my @@m = @@{$b->{patch}};
	for my $l (@@{$a->{patch}}) {
		my $m = shift @@m;
		next if $l =~ m/^(\-\-\-|\+\+\+)\s+\Q$a->{stem}\E/;
		return 1 if $l ne $m;
	}
	return 0;
}

sub identical_msg
{
	my $name = shift;
	return "$name and $name$distorig are identical";
}

# figure out which files to work with
find({wanted =>
    sub {
    	return if -l $_;
	return unless -f _;
	return unless m/\Q$patchorig\E$/;
	return if $_ eq 'Oops.rej.orig';
	return if m/\Q$distorig\E$/;
	# avoid double reporting patches
	my $src = $File::Find::name;
	my $dst = $src;
	$dst =~ s/\Q$patchorig\E$//;
	# don't double-report
	return if $dst =~ m/^(.*)\.beforesubst$/ && -f $1.$patchorig;
	my $stem = $dst;
	$stem =~ s/^\Q$wrkdist\E\///;
	my $attach = '';
	if (-f "$dst.beforesubst") {
		$dst = "$dst.beforesubst";
		$attach = '.beforesubst';
	} elsif (!-f $dst) {
		say "$stem not found";
		return;
	}
	require File::Compare;
	if (File::Compare::compare($src, $dst) == 0) {
		if ($verbose) {
			say identical_msg($stem);
		} else {
			$nochange->{$stem} = 1;
		}
		return;
	}
	my $p = create_patch($src, $dst, $stem);
	$actual->{$p->{stem}} = $p;
    }, follow => 1, follow_skip => 2 }, $wrkdist);

# do we have patches ?
if (keys %$actual) {
	unless (-d $patchdir) {
		require File::Path;
		File::Path::make_path($patchdir) or die;
	}
}

if (chdir($patchdir)) {
	# figure out which patch is which
	for my $i (glob $patch_list) {
		next unless -f $i;
		next if $i =~ m/(\.orig|\.rej|\~)$/;
		$done->{$i} = 1;
		my $parsed = parse_existing_patch($i);
		if (!defined $parsed->{stem}) {
			say "*** File $i is not a proper patch";
			$parsed->{stem} = $i;
		}
		$saved->{$parsed->{stem}} = $parsed;
	}
}

# handle patches
for my $k (sort keys %$actual) {
	my $p = $actual->{"$k"};
	# is there already a patch ?  we need to compare
	if (exists $saved->{$k}) {
		my $o = $saved->{$k};
		my $differ = patches_differ($o, $p);
		$o->{accounted} = 1;
		next unless $differ || $force;

		$o->{patch} = $p->{patch};
		write_patch($o);
		next unless $differ;

		say "Patch ", description($o), " updated";
		system {"diff"} ('diff', '-u', @@diff_args, '--', 
		    $o->{filename}.".orig", $o->{filename}) if $verbose;
		push(@@edit, $o->{filename});
	} else {
		say "New patch ", description($p);
		write_patch($p);
		# register it as known so we don't reparse
		$saved->{$p->{stem}} = $p;
		$done->{$p->{filename}} = 1;
		$p->{accounted} = 1;
		push(@@edit, $p->{filename});
	}
}

# parse supplementary files
if (chdir($patchdir)) {
	for my $i (glob '*') {
		next unless -f $i;
		next if $i =~ m/(\.orig|\.rej|\~)$/;
		next if $done->{$i};
		my $parsed = parse_existing_patch($i);
		$parsed->{stem} //= $i;
		$saved->{$parsed->{stem}} = $parsed;
	}
}

#for my $k (sort {$a->{filename} cmp $b->{filename}} keys %$old) {
for my $k (sort keys %$saved) {
	my $p = $saved->{"$k"};
	if (!$p->{accounted}) {
		if ($nochange->{$p->{stem}}) {
			say identical_msg($p->{stem});
		}
		say "*** Patch ", description($p), " not accounted for";
	}
	my ($warned_newline, $warned_keyword) = (0, 0);
	for my $l (@@{$p->{patch}}) {
		if ($l =~ m/^\\ No newline at end of file/) {
			say "*** Patch ", description($p), " misses newline at end of file" 
			    unless $warned_newline;
			$warned_newline = 1;
		} elsif ($l =~ m/$kw_re/) {
			say "*** Patch ",  description($p), " contains CVS keyword" 
			    unless $warned_keyword;
			$warned_keyword = 1;
		}
	}
}

say $oldout join(' ', @@edit);
@


1.15
log
@do the check upfront, this one works
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.14 2017/05/24 09:16:57 espie Exp $
d45 1
d60 1
a60 1
my ($actual, $saved, $done);
d165 1
a165 1
	say "*** Patch for $stem fuzzed because of CVS keywords";
d179 1
a179 1
	say "Processing $stem";
d248 10
d273 6
d287 1
d291 2
d305 5
a309 1
		say "Files $stem$patchorig and $stem$attach are identical";
d353 1
a353 1
		print "Patch $o->{filename} for $o->{stem} updated";
d355 1
a355 1
		    $o->{filename}.".orig", $o->{filename});
d358 1
d384 4
a387 1
		say "*** $p->{filename} not accounted for";
d392 1
a392 1
			say "*** $p->{filename} misses newline at end of file" 
d396 1
a396 1
			say "*** $p->{filename} contains CVS keyword" 
@


1.14
log
@if the WRKDIST doesn't exist, don't even try
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.13 2017/05/23 17:52:34 espie Exp $
d55 4
d290 1
a290 1
    }, follow => 1, follow_skip => 2 }, $wrkdist) or die;
@


1.13
log
@if PATCHORIG!=.orig, say it. avoids head-scratching when fixing a port you
don't know too well...
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.12 2017/05/17 11:31:17 espie Exp $
d286 1
a286 1
    }, follow => 1, follow_skip => 2 }, $wrkdist);
@


1.12
log
@add a FORCE_REGEN env option
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.11 2017/05/13 19:40:22 espie Exp $
d41 3
@


1.11
log
@bogus fuzz for two lines cases
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.10 2017/05/06 12:43:55 espie Exp $
d41 2
d314 1
a314 8
		if (patches_differ($o, $p)) {
			$o->{patch} = $p->{patch};
			write_patch($o);
			system {"diff"} ('diff', '-u', @@diff_args, '--', 
			    $o->{filename}.".orig", $o->{filename});
			say "Patch $o->{filename} for $o->{stem} updated";
			push(@@edit, $o->{filename});
		}
d316 10
@


1.10
log
@lost one line I didn't intend to lose
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.9 2017/05/06 12:42:01 espie Exp $
d71 1
a71 1
	    	$zap = 1;
d86 1
a86 1
	if ($chunk->{lines}[-2] =~ m/^\s/ &&
@


1.9
log
@do things correctly in case wrkdist is a symlink.
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.8 2017/05/05 13:38:13 espie Exp $
d256 1
@


1.8
log
@WRKDIST shouldn't end in /, but just in case...
noticed by jca@@
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.7 2017/05/03 09:11:26 espie Exp $
d254 1
a254 1
find(
a255 1
    	return if -l $_;
d280 1
a280 1
    }, $ENV{WRKDIST});
@


1.7
log
@need two separate matches if PATCHORIG finishes with .orig!
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.6 2017/05/02 22:32:29 espie Exp $
d40 3
@


1.6
log
@warn just once per file
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.5 2017/05/02 21:06:41 espie Exp $
d192 4
a195 1
		if (m/^\-\-\-\s+(\S.*)(\.orig|\Q$patchorig\E)/) {
@


1.5
log
@parse and fuzz patches to remove CVS keywords. Yep, we lose lines of context
but patch can cope.
okay sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.4 2017/05/02 09:26:30 espie Exp $
d343 1
d346 3
a348 1
			say "*** $p->{filename} misses newline at end of file";
d350 3
a352 1
			say "*** $p->{filename} contains CVS keyword";
@


1.4
log
@tweak things so that changes of PATCHORIG won't matter.
-> always emit
--- stem.orig
+++ stem
lines regardless of PATCHORIG
-> prepend an Index: line like cvs does
-> add a blank line for comments.

okay aja@@
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.3 2017/04/29 14:49:38 espie Exp $
d50 113
d173 1
d346 1
a346 4
		} elsif ($l =~ m/\$(
			Author|CVSHeader|Date|Header|Id|Name|Locker|Log|
			RCSFile|Revision|Source|State|OpenBSD
		    )\b.*\$/x) {
@


1.3
log
@new update-patches.

that one deals with .beforesubst files, so it should be nicer with
SUBST_CMD handling. It also doesn't care nor emits timestamps markers
in diff, so less garbage to think about.

Please report any issue, things work better so far, but it's a work
in progress and change to make it better.

'let's finish this in tree' okay aja@@
@
text
@d3 1
a3 1
# $OpenBSD$
d55 1
a55 1
		"$stem$patchorig", "-L", $stem, "--", $src, $dst) or die;
d62 1
a62 1
		comment => [$comment] };
d71 1
a71 1
		if (m/^\-\-\-\s+(\S.*)\Q$patchorig\E/) {
d73 6
d80 1
d101 3
@


1.2
log
@Use cmp -s and grep -q, instead of redirecting to /dev/null

ok espie@@
@
text
@d1 1
a1 1
#!/bin/sh
d3 2
a4 2
# $OpenBSD: update-patches,v 1.1 2010/08/20 14:50:36 espie Exp $
# Copyright (c) 2000
d27 57
a83 95
# Keywords expanded by CVS
keywords="Author|CVSHeader|Date|Header|Id|Name|Locker|Log|RCSfile|Revision"
keywords="$keywords|Source|State|OpenBSD"

# Find out all $PATCHORIG files and strip the name to what diff will use
cd "$WRKDIST" && find . -type f -name '*'${PATCHORIG} | \
    fgrep -v Oops.rej.orig | \
    fgrep -v $DISTORIG | \
    sed -e "s,^./\(.*\)\.${PATCHORIG#.*}\$,\1," | {
while read file 
do
    if cmp -s "$WRKDIST/$file" "$WRKDIST/$file$PATCHORIG"; then
    	echo 1>&2 "$file and $file$PATCHORIG are identical"
    	continue
    fi
    if ! [ -f "$WRKDIST/$file" ]; then
		echo 1>&2 "$file does not exist"
		continue
	fi
    echo 1>&2 "Processing $file"
    # look in patchdir for an existing patchfile matching this
    mkdir -p $PATCHDIR
    cd $PATCHDIR
    for i in $PATCH_LIST
    do
	# Ignore non-files, or old backup
	[ -f $i ] || continue
	case $i in \
	*.orig|*.rej|*~) ;;
	*) # Patch found. Is this the one ?
	    if grep -q "^--- $file$PATCHORIG" $i
	    then
		accounted="$accounted $i"
		# found it, splice before diff part with diff
		esc=`echo $file | sed -e 's,/,\\\\/,g'`
		{ sed -e "/^--- $esc$PATCHORIG/,\$ d" <$i
		    (cd "$WRKDIST" && diff -u -p -a ${DIFF_ARGS} "$file$PATCHORIG" "$file") } >$i.new
		# did it change ? mark it as changed
		if diff ${DIFF_ARGS} -u \
			-I "^--- `echo $file$PATCHORIG | sed 's/[.+]/\\\\&/g'`	" \
			-I "^\+\+\+ `echo $file | sed 's/[.+]/\\\\&/g'`	" $i $i.new 1>&2
		then
		    rm $i.new
		else
		    echo 1>&2 "Patch $i for $file updated"
		    mv $i $i.orig
		    mv $i.new $i
		    edit="$edit $i"
		fi
		continue 2
	    fi;;
	esac
    done
    # Build a sensible name for the patch file
    patchname=patch-`echo $file|sed -e s,[\ /.],_,g`
    echo 1>&2 "No patch-* found for $file, creating $patchname"
    { echo "$"OpenBSD$; \
	(cd "$WRKDIST" && diff -u -p -a ${DIFF_ARGS} "$file$PATCHORIG" "$file") }>$patchname
    edit="$edit $patchname"
    accounted="$accounted $patchname"
done

# Verify all patches accounted for
if cd $PATCHDIR 2>/dev/null; then
    for i in *
    do
	[ -f $i ] || continue
	case $i in \
	*.orig|*.rej|*~) ;;
	*)
	    if grep -q '^\\ No newline at end of file' $i; then
		    echo 1>&2 "*** Patch $i needs manual intervention"
	    fi
	    for j in $accounted 
	    do
		if [ $j = $i ]
		then
		    continue 2
		fi
	    done
	    echo 1>&2 "*** Patch $i not accounted for.";;
	esac
    done
else
    echo 1>&2 "No patch found"
fi

# Check for $Id: update-patches,v 1.1 2010/08/20 14:50:36 espie Exp $ and similar bugs in all those patch files.
for i in $accounted
do
    if sed -e '1,/^---/ d' $i|egrep -q '\$('"$keywords"').*\$'
    then
	    echo 1>&2 "Problem with $i: CVS keyword found in patch"
    fi
done
d85 14
a98 1
echo $edit
d100 132
a231 1
exit 0
@


1.1
log
@add shell scripts too
@
text
@d3 1
a3 1
# $OpenBSD: update-patches,v 1.18 2009/10/15 10:48:05 phessler Exp $
d38 1
a38 1
    if cmp "$WRKDIST/$file" "$WRKDIST/$file$PATCHORIG" >/dev/null 2>&1; then
d57 1
a57 1
	    if grep "^--- $file$PATCHORIG" $i >/dev/null
d97 1
a97 1
	    if grep '^\\ No newline at end of file' $i >/dev/null; then
d114 1
a114 1
# Check for $Id: update-patches,v 1.18 2009/10/15 10:48:05 phessler Exp $ and similar bugs in all those patch files.
@

