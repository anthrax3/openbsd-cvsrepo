head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.28
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.26
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.24
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.20
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.08.30.19.02.33;	author steven;	state Exp;
branches;
next	;


desc
@@


1.1
log
@move portslogger to bin/
ok naddy@@

if you have build scripts that use portslogger, adapt the path
@
text
@#!/usr/bin/perl

# $OpenBSD: portslogger,v 1.14 2007/08/25 07:56:04 espie Exp $
# Copyright (c) 2001 Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# This critter recognizes context switch changes in the ports tree
# and logs its output accordingly, as a kind of `super-tee'

{
package Logger;
@@ISA=qw(IO::File);

use File::Path;
use IO::File;
use File::Temp qw/tempfile/;

our $directory;
our %temps;


sub setdir
{
	$directory = shift;
	mkpath $directory;
	die "No logging directory" unless -d $directory;
}

sub new
{
	my $class = shift;
	my $name = shift;
	$name = "$directory/$name.log";
	my $self = IO::File::new($class, $name, '>>');
	if (!$self) {
		if (defined $temps{$name}) {
			$self = IO::File::new($class, $temps{$name}, '>>');
		} else {
		    ($self, $temps{$name}) = tempfile(SUFFIX => '.log') or
			    die "Can't create any logfile";
		    print STDERR "*** Couldn't open $name, \n";
		    print STDERR "*** using ".$temps{$name}." instead\n";
		    bless $self, $class;
		}
	}
	$self->print("+++ ", `date`);
	$self->autoflush(1);
	return $self;
}

sub close
{
	my $self = shift;
	print $self "--- ", `date`;
	$self->SUPER::close();
}

sub DESTROY
{
	my $self = shift;
	$self->close();
}
}

use Getopt::Std;

our $opt_s;

getopts('s');

if (@@ARGV < 1) {
    print STDERR "Usage: $0 directory\n";
    exit 1;
}

Logger::setdir(shift);

my $logfile = undef;
my $ncontext = undef;

my $context;

while (<>) {
	print unless $opt_s;
	s/\cM+$//;
	# zap fetch & pkg_add progress bar
	s/^.*\cM//;
	if (m/^\=\=\=\>\s+
	    (?:
		(?: Extracting|
		    Applying\ distribution\ patches|
		    Patching|
		    Configuring|
		    Building|
		    Faking\ installation|
		    Building\ package|
		    Deinstalling|
		    Cleaning|
		    Dist\ cleaning|
		    Checking\ files|
		    Regression\ check|
		    Updating\ plist|
		    Updating|
		    Registering\ installation)\s+for\s+(.*)|
		Returning\ to\ build\ of\s+(.*)|
		Installing\s+(.*?)\s+from)
	    /ox) {
		$ncontext = "$1$2$3"; 	# XXX only one alternative matches
		chomp $ncontext;
		# register to `master' context.
		$ncontext=$1 if $ncontext =~ m/^.*\[(.*?)\]$/;
		if ($ncontext ne $context) {
			$context = $ncontext;
			$logfile = new Logger $context;
		}
	} elsif (m/^\=\=\=\> Exiting\s+(.*)\s+with an error$/) {
		undef $context;
	}
	unless (defined $context) {
		$context = default;
		$logfile = new Logger 'default';
	}
	$logfile->print($_);
}

@
