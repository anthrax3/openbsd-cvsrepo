head	1.15;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.7.0.4
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5;
locks; strict;
comment	@# @;


1.15
date	2017.05.14.21.24.59;	author espie;	state Exp;
branches;
next	1.14;
commitid	h9lBWlMxWtGZpVRZ;

1.14
date	2016.11.01.15.34.39;	author jeremy;	state Exp;
branches;
next	1.13;
commitid	EZGsf3R1CQVGBBcD;

1.13
date	2016.09.14.15.02.41;	author espie;	state Exp;
branches;
next	1.12;
commitid	cR07vu0DLeRursoo;

1.12
date	2016.06.10.12.52.57;	author espie;	state Exp;
branches;
next	1.11;
commitid	WD0EDRJTvd0JWpMj;

1.11
date	2014.07.10.10.31.02;	author espie;	state Exp;
branches;
next	1.10;
commitid	6u8dEUhmx4YxiwrD;

1.10
date	2014.01.07.14.30.12;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2014.01.04.00.10.18;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.26.22.33.35;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.09.27.14.46.37;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.11.11.35.32;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.29.12.33.38;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.26.07.17.10;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.07.00.01.40;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.20.14.23.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.13.50.11;	author espie;	state Exp;
branches;
next	;


desc
@@


1.15
log
@allow register-plist to display a diff even without write access to
the plist directory.
@
text
@#! /usr/bin/perl

# $OpenBSD: register-plist,v 1.14 2016/11/01 15:34:39 jeremy Exp $
# Copyright (c) 2005,2012
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use strict;
use warnings;

use OpenBSD::State;
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::Paths;

package OpenBSD::PackingList;

sub write_mogrified
{
	my ($self, $fh, $state) = @@_;
	$self->visit('write_mogrified', $fh, $state);

}

sub forget_details
{
	my $self = shift;
	undef $self->{"digital-signature"};
	undef $self->{vendor};
	undef $self->{signer};

	my $l = $self->{items};
	if ($l->[@@$l-1]->isa('OpenBSD::PackingElement::Cwd') &&
		$l->[@@$l-1]->{name} eq '.') {
	    pop @@$l;
	}
	$self->visit('forget_details');
}

package OpenBSD::PackingElement;

sub write_mogrified
{
	my ($self, $fh, $state) = @@_;
	if ($state->{mogrified}{$self}) {
		$state->{mogrified}{$self}->write($fh);
	} else {
		$self->write($fh);
	}
}

sub forget_details
{
}

sub forget_more_details
{
}

sub flatten
{
	my ($self, $l) = @@_;
	push(@@$l, $self);
}

sub compare
{
	my ($self, $self2) = @@_;
	my ($data, $data2);
	open(my $fh, '>',  \$data);
	open(my $fh2, '>',  \$data2);
	$self->write($fh);
	$self2->write($fh2);
	close($fh);
	close($fh2);
	if ($data ne $data2) {
		return 1;
	} else {
		return 0;
	}
}

sub remove_auxiliary
{
	return 0;
}

sub record_generic_depends
{
}

sub find_mogrified
{
}

package OpenBSD::PackingElement::DigitalSignature;
sub flatten
{
}

package OpenBSD::PackingElement::Old;
sub flatten
{
	my ($self, $l) = @@_;
	if ($self->{keyword} eq 'ignore') {
		return;
	}
	$self->SUPER::flatten($l);
}

package OpenBSD::PackingElement::FileBase;

sub forget_details
{
	my $self = shift;
	undef $self->{d};
	undef $self->{md5};
	undef $self->{size};
	undef $self->{ts};
}

sub forget_more_details
{
	my $self = shift;
	undef $self->{symlink};
	undef $self->{link};
}

package OpenBSD::PackingElement::SpecialFile;
sub forget_details
{
	my $self = shift;
#	undef $self->{md5};
	undef $self->{size};
}

sub compare
{
	my ($self, $self2) = @@_;
	if (ref($self) ne ref($self2)) {
		return 1;
	}
	if ($self->{name} ne $self2->{name}) {
		return 1;
	}
	if (defined $self->{d} && defined $self2->{d}) {
		if (ref($self->{d}) ne ref($self2->{d})) {
			return 1;
		}
		if ($self->{d}->equals($self2->{d})) {
			return 0;
		} else {
			return 1;
		}
	} elsif (!defined $self->{d} && !defined $self2->{d}) {
		return 0;
	}
	return 2;
}

package OpenBSD::PackingElement::Depend;

sub record_generic_depends
{
	my ($self, $state) = @@_;
	$state->{stash}->{$self->forgetful_key} = $self;
}

sub find_mogrified
{
	my ($s1, $state) = @@_;
	my $s2 = $state->{stash}->{$s1->forgetful_key};
	if (defined $s2 && $s1->compare($s2) == 2) {
		$state->{mogrified}{$s1} = $s2;
	}
}

package OpenBSD::PackingElement::Dependency;
sub compare
{
	my ($self, $self2) = @@_;
	if (ref($self) ne ref($self2)) {
		return 1;
	}
	if ($self->{pkgpath} ne $self2->{pkgpath}) {
		return 1;
	}

	my $c = OpenBSD::PackageName->from_string($self->{def})->compare(
	    OpenBSD::PackageName->from_string($self2->{def}));
	if (!defined $c || $c < 0) {
		return 1;
	}
	if ($c == 0) {
		return 0;
	}
	return 2;
}

sub forgetful_key
{
	my $self = shift;
	$self->{name} =~ s/\-\=(\d)/\-$1/;
	return join(':', 'depend', $self->{name}, $self->{pkgpath}, $self->{pattern});
}

package OpenBSD::PackingElement::Wantlib;

sub compare
{
	my ($self, $self2) = @@_;
	if (ref($self) ne ref($self2)) {
		return 1;
	}
	my $c = $self->spec->compare($self2->spec);
	if (!defined $c || $c < 0) {
		return 1;
	}
	if ($c == 0) {
		return 0;
	}
	return 2;
}

sub forgetful_key
{
	my $self = shift;
	return $self->spec->key;
}

package OpenBSD::PackingElement::Comment;

sub forget_details
{
	my $self = shift;

	if ($self->{name} =~ m/^VARS:/) {
		$self->{name} = 'VARS';
	}
}

package OpenBSD::PackingElement::CVSTag;

# XXX needed to avoid CVS expansion

our $openbsd = 'OpenBSD';

sub forget_details
{
	my $self = shift;
	$self->{name} =~ s/^(\$$openbsd: .*,v).*/$1\$/;
}

sub compare
{
	my ($self, $self2) = @@_;
	if (ref($self) ne ref($self2)) {
		return 1;
	}
	if ($self->{name} eq $self2->{name}) {
		return 0;
	}
	if ($self->{name} eq "\$$openbsd\$" or 
	    $self2->{name} eq "\$$openbsd\$") {
		return 2;
	}
	return 1;
}

package OpenBSD::PackingElement::InfoFile;

sub remove_auxiliary
{
	my ($self, $list) = @@_;

	my $stem = $self->{name};
	my $i;
	for ($i = 1; @@$list > 0 && $list->[0]->{name} eq "$stem-$i"; $i++) {
		shift @@$list;
	}
	return $i;
}

package OpenBSD::PackingElement::Manpage;

sub remove_auxiliary
{
	my ($self, $list) = @@_;
	if ($self->is_source && @@$list > 0 && 
	    ref($list->[0]) eq ref($self) && 
	    $list->[0]->{name} eq $self->source_to_dest) {
		shift @@$list;
		return 1;
	}
	return 0;
}

sub compare
{
	my ($self, $self2) = @@_;

	# both elements must be manpages
	if (ref($self) ne ref($self2)) {
		return 1;
	}

	# identical
	if ($self->{name} eq $self2->{name}) {
		return 0;
	}

	# one is the conversion of the other
	if ($self->is_source && $self->source_to_dest eq $self2->{name}) {
		return 2;
	}
	if ($self2->is_source && $self2->source_to_dest eq $self->{name}) {
		return 2;
	}

	# or they're different beasts.
	return 1;
}

package OpenBSD::PackingElement::ExtraInfo;

sub compare
{
	my ($self, $self2) = @@_;
	if (ref($self) ne ref($self2)) {
		return 1;
	}
	if ($self->{ftp} ne $self2->{ftp} or 
	    $self->{cdrom} ne $self2->{cdrom}) {
		return 1;
	}
	if ($self->{subdir} eq $self2->{subdir}) {
		return 0;
	}
	if ($self->{subdir} =~ m/^mystuff\// && $self2->{subdir} eq $') {
		return 2;
	}
	if ($self2->{subdir} =~ m/^mystuff\// && $self->{subdir} eq $') {
		return 2;
	}
	return 1;
}

package main;

sub my_compare
{
	my ($p, $p2, $state) = @@_;
	my $l = [];
	my $l2 = [];
	my $final = 0;
	$p->flatten($l);
	$p2->flatten($l2);
	while (my $e = shift @@$l) {
		my $e2 = shift @@$l2;
		return 1 unless defined $e2;
		my $r = $e->compare($e2);
		if ($r == 1) {
			return $r;
		}
		if ($r == 2) {
			push(@@{$state->{updates}}, [$e2, $e]);
			$state->{mogrified}{$e} = $e2;
			$final = 2;
		}
		# zap extra info-* files and man pages
		if ($e->remove_auxiliary($l) != $e2->remove_auxiliary($l2)) {
			$final = 2;
		}
	}
	if (@@$l2 > 0) {
		return 1;
	}
	return $final;
}

sub more_mogrified
{
	my ($p1, $p2, $state) = @@_;

	$p2->record_generic_depends($state);
	$p1->find_mogrified($state);
}

sub act_on_compare
{
	my ($r, $p1, $p2, $result, $state) = @@_;

	if ($r == 1) {
		my $t = "$result-new";
		more_mogrified($p1, $p2, $state);
		$state->errsay("Error: change in plist");
		$state->errsay("| If the old and new builds were done correctly");
		$state->errsay("| (fully up-to-date ports tree including relevant MODULES)");
		$state->errsay("| then someone probably forgot to bump a REVISION.");
		$state->errsay("| (see bsd.port.mk(5), PACKAGE_REPOSITORY)");
		if (open(my $fh, '>', $t)) {
			$p1->write_mogrified($fh, $state);
			close($fh);
			system {OpenBSD::Paths->diff} ('diff', 
			    '-L', $result, '-L', $t, '-u', $result, $t);
		} else {
			open(my $fh, "|-", OpenBSD::Paths->diff, 
			    '-L', $result, '-L', $t,
			    '-u', $result, '-');
			$p1->write_mogrified($fh, $state);
			close($fh);
		}
		return 1;
	}
	if ($r == 2) {
		$p1->tofile($result);
		$state->errsay("#1 was updated", $result);
		for my $i (@@{$state->{updates}}) {
			$state->errsay("#1 -> #2",
			    $i->[0]->stringize, 
			    $i->[1]->stringize);
		}
	}
	return 0;
}

sub compare_lists
{
	my ($p1, $p2, $result, $state) = @@_;
	my $r = my_compare($p1, $p2, $state);
	return act_on_compare($r, $p1, $p2, $result, $state);
}

sub compare_versions
{
	my ($dir, $plist, $state) = @@_;

	opendir (my $dirhandle, $dir) or return 0;
	my (@@parsed) = OpenBSD::PackageName::splitname($plist->pkgname);
	$parsed[1] = '*';
	my $reference = join('-', @@parsed);
	my $n = OpenBSD::PackageName->from_string($plist->pkgname);
	my $result = 0;
	my $re = qr{^\Q$parsed[0]\E\-\d};
	my $matched_pkgpath = 0;
	my @@unmatched_pkgpaths = ();
	while (my $d = readdir $dirhandle) {
		next unless $d =~ $re;
		my (@@cmp) = OpenBSD::PackageName::splitname($d);
		$cmp[1] = '*';
		next if  join('-', @@cmp) ne $reference;

		my $p2 = OpenBSD::PackingList->fromfile("$dir/$d",
			\&OpenBSD::PackingList::ExtraInfoOnly);
		if (!$plist->match_pkgpath($p2)) {
			push(@@unmatched_pkgpaths, $d);
			next;
		}
		$matched_pkgpath = 1;
		my $n2 = OpenBSD::PackageName->from_string($p2->pkgname);
		my $c = $n->compare($n2);
		if ($c < 0) {
			$state->errsay("Found newer package #1 in #2", 
			    $p2->pkgname, $dir);
			$result = 1;
		} elsif ($c == 0) {
			$state->errsay("Found package with different name that compares equal in #2: #1", 
			    $p2->pkgname, $dir);
			$result = 1;
		}
	}
	if (!$matched_pkgpath && @@unmatched_pkgpaths) {
		$state->errsay("Found package with matching name, but with different pkgpath: #1" , 
			join(' ', sort @@unmatched_pkgpaths));
	}
	return $result;
}

my $state = OpenBSD::State->new('register-plist');
$state->{signature_style} = 'unsigned';
$state->handle_options('tp', '[-t p1 p2] dir pkg ...');
if (@@ARGV < 2 && !$state->opt('p')) {
	$state->usage;
}

if ($state->opt('t')) {
	if (@@ARGV != 2) {
		$state->usage("-t takes exactly two parameters");
	}
	my $plist = OpenBSD::PackingList->fromfile($ARGV[0]);
	my $result = $ARGV[1];
	my $plist2 = OpenBSD::PackingList->fromfile($result);
	$plist->forget_details;
	exit(compare_lists($plist, $plist2, $result, $state));
}

my @@dirs = split(/:/, shift);
if (!-d $dirs[0]) {
	$state->usage("not a directory: #1", $dirs[0]);
}

if ($state->opt('p')) {
	my $plist = OpenBSD::PackingList->read(\*STDIN);
	$plist->forget_details;
	for my $dir (@@dirs) {
		next unless -d $dir;
		my $result = $dir.'/'.$plist->pkgname;
		if (-f $result) {
			my $plist2 = OpenBSD::PackingList->fromfile($result);
			$plist2->forget_details;
			$plist2->forget_more_details;
			my $r = my_compare($plist, $plist2, $state);
			if ($r == 2) {
				$r = 0;
			}
			exit(act_on_compare($r, $plist, $plist2, $result, 
			    $state));
		}
	}
	exit(1);
}

my $error =0;

for my $pkgfile (@@ARGV) {
	my $pkg = $state->repo->find($pkgfile);
	if (!$pkg) {
		$state->fatal("Bad package #1", $pkgfile);
	}

	my $plist = $pkg->plist;
	$pkg->close;
	$pkg->wipe_info;

	$plist->forget_details;
	for my $dir (@@dirs) {
		next unless -d $dir;
		my $result = $dir.'/'.$plist->pkgname;
		if (-f $result && -s _) {
			my $plist2 = OpenBSD::PackingList->fromfile($result);
			$error += compare_lists($plist, $plist2, $result,
			    $state);
			last;
		}
		$error += compare_versions($dir, $plist, $state);
	}
	if (!$error) {
		my $result = $dirs[0].'/'.$plist->pkgname;
		if (!-f $result || -z _) {
			$plist->tofile($result);
		}
	}
}
exit($error != 0);
@


1.14
log
@When there is a package with a matching name, but with a different
pkgpath, print a message showing the packages that weren't matched
due to the differing pkgpath.

Help and OK espie@@
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.13 2016/09/14 15:02:41 espie Exp $
d39 1
a39 3
	my ($self, $file, $state) = @@_;
	open (my $fh, '>', $file) or 
	    $state->fatal("Can't write plist to #1: #2", $file, $!);
d415 1
a415 2
		$p1->write_mogrified($t, $state);
		$state->errsay("Error: change in plist between #1 and #2", $result, $t);
d420 12
a431 1
		system {OpenBSD::Paths->diff} ('diff', '-u', $result, $t);
@


1.13
log
@prepare for new sigs
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.12 2016/06/10 12:52:57 espie Exp $
d456 2
d466 5
a470 1
		next if $p2->fullpkgpath ne $plist->fullpkgpath;
d482 4
@


1.12
log
@remove more PLIST_DB references
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.11 2014/07/10 10:31:02 espie Exp $
d481 1
@


1.11
log
@ignore timestamp differences
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.10 2014/01/07 14:30:12 espie Exp $
d422 1
a422 1
		$state->errsay("| (see bsd.port.mk(5), PLIST_DB)");
@


1.10
log
@bye bye COMMENT, you've been dead for 8 years
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.9 2014/01/04 00:10:18 espie Exp $
d140 1
@


1.9
log
@move to @@signer
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.8 2013/12/26 22:33:35 espie Exp $
a48 1
	undef $self->{ OpenBSD::PackageInfo::COMMENT };
@


1.8
log
@future keyword, shouldn't be registered
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.7 2012/09/27 14:46:37 espie Exp $
d52 1
@


1.7
log
@remove old compatibility cruft with old register-plist that used to
say "def" for version number.

check that pkgpath in dependency did not change, in which case the
dependent port should have been bumped.

problem experienced by aja@@ on glib2...

patch tested and okay jasper@@, sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.6 2011/11/11 11:35:32 espie Exp $
d51 1
@


1.6
log
@some times, your machine will crash and leave behind empty files...
ignore empty plists
@
text
@d3 2
a4 2
# $OpenBSD: register-plist,v 1.5 2010/12/29 12:33:38 espie Exp $
# Copyright (c) 2005
d204 2
a205 5
	if ($self->{def} eq 'def' && $self2->{def} eq 'def') {
		return 0;
	}
	if ($self2->{def} eq 'def' && $self->{def} ne 'def') {
		return 2;
d207 1
@


1.5
log
@check that the package name itself does not go backwards as well
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.4 2010/11/26 07:17:10 espie Exp $
d539 1
a539 1
		if (-f $result) {
d549 1
a549 1
		if (!-f $result) {
@


1.4
log
@teach register-plist that pkgspec-version is equivalent to pkgspec-=version
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.3 2010/11/07 00:01:40 espie Exp $
d445 35
d545 1
@


1.3
log
@allow register-plist to do a quickie on print-plist
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.2 2010/08/20 14:23:02 espie Exp $
d224 1
@


1.2
log
@merge back jasper's commit
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.26 2010/08/19 13:54:43 jasper Exp $
d76 4
d141 7
d409 1
a409 1
sub compare_lists
d411 2
a412 2
	my ($p1, $p2, $result, $state) = @@_;
	my $r = my_compare($p1, $p2, $state);
d437 7
d445 2
a446 2
$state->handle_options('t', '[-t p1 p2] dir pkg ...');
if (@@ARGV < 2) {
d464 21
@


1.1
log
@copy some stuff to the new organization, rename find-all-conflicts to
check-conflicts for consistency
@
text
@d3 1
a3 1
# $OpenBSD: register-plist,v 1.25 2010/08/07 19:49:10 espie Exp $
d408 1
a408 1
		$state->errsay("| (fully uptodate ports tree including relevant MODULES)");
@

