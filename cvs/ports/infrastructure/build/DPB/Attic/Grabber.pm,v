head	1.6;
access;
symbols
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.5;

1.5
date	2010.07.14.14.34.34;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.26.07.10.08;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.12.13.30.11;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Grabber.pm,v 1.5 2010/07/14 14:34:34 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;


use DPB::Vars;
use DPB::Util;

package DPB::Grabber;
sub new
{
	my ($class, $ports, $make, $logger, $engine, $dpb, $endcode) = @@_;
	bless { ports => $ports, make => $make,
		loglist => DPB::Util->make_hot($logger->open("vars")),
		engine => $engine,
		dpb => $dpb,
		keep_going => 1,
		endcode => $endcode
	    }, $class;
}

sub finish
{
	my ($self, $h) = @@_;
	for my $v (values %$h) {
		if ($v->{broken}) {
			delete $v->{info};
			$self->{engine}->add_fatal($v);
		} else {
			$self->{engine}->new_path($v);
		}
	}
	$self->{keepgoing} = &{$self->{endcode}};
}

sub grab_subdirs
{
	my ($self, $core, $list) = @@_;
	DPB::Vars->grab_list($core, $self->{ports}, $self->{make}, $list,
	    $self->{loglist}, $self->{dpb},
	    sub {
		$self->finish(shift);
	});
}


sub complete_subdirs
{
	my ($self, $core) = @@_;
	# more passes if necessary
	while ($self->{keep_going}) {
		my @@subdirlist = ();
		for my $v (DPB::PkgPath->seen) {
			next if defined $v->{info};
			if (defined $v->{tried}) {
				$self->{engine}->add_fatal($v);
			}
			$v->add_to_subdirlist(\@@subdirlist);
			$v->{tried} = 1;
		}
		last if @@subdirlist == 0;

		$self->grab_subdirs($core, \@@subdirlist);
	}
}

1;
@


1.5
log
@prevent landry from foobaring dpb3
@
text
@d2 1
a2 1
# $OpenBSD: Grabber.pm,v 1.4 2010/05/04 09:45:41 espie Exp $
@


1.4
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d41 6
a46 1
		$self->{engine}->new_path($v);
@


1.3
log
@whitespace
@
text
@@


1.2
log
@fix typo (and blanks)
@
text
@@


1.1
log
@move the 'grabbing sublist' code to a Grabber object, that we'll be able to
use later on from the engine.
@
text
@d28 1
a28 1
	bless { ports => $ports, make => $make, 
d49 1
a49 1
	DPB::Vars->grab_list($core, $self->{ports}, $self->{make}, $list, 
d66 1
a66 1
				$self->engine->add_fatal($v);
@

