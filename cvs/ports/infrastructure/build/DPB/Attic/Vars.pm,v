head	1.5;
access;
symbols
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.4;

1.4
date	2010.07.14.14.34.34;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Vars.pm,v 1.4 2010/07/14 14:34:34 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

package DPB::Vars;

use OpenBSD::Paths;
my @@errors = ();
my $last_errors = 0;

sub report
{
	return join('', @@errors);
}

sub important
{
	my $class = shift;
	if (@@errors > $last_errors) {
		$last_errors = @@errors;
		return $class->report;
	}
}

sub get
{
	my ($class, $make, @@names) = @@_;
	pipe(my $rh, my $wh);
	my $pid = fork();
	if ($pid == 0) {
		print $wh "all:\n";
		for my $_ (@@names) {
			print $wh "\t\@@echo \${$_}\n";
		}
		print $wh <<EOT;
COMMENT = test
CATEGORIES = test
PKGPATH = test/a
PERMIT_PACKAGE_CDROM=Yes
PERMIT_PACKAGE_FTP=Yes
PERMIT_DISTFILES_CDROM=Yes
PERMIT_DISTFILES_FTP=Yes
WRKOBJDIR=
IGNORE=Yes
ECHO_MSG=:
.include <bsd.port.mk>
EOT
		close $wh;
		exit 0;
	}
	close $wh;
	my @@list;
	my $pid2 = open(my $output, "-|");
	if ($pid2) {
		close $rh;
		@@list = <$output>;
		chomp for @@list;
		waitpid($pid2, 0);
		waitpid($pid, 0);
	} else {
		close STDIN;
		open(STDIN, '<&', $rh);
		exec {$make} ('make', '-f', '-');
		die "oops";
    	}
	return @@list;
}

sub grab_list
{
	my ($class, $core, $ports, $make, $subdirs, $log, $dpb, $code) = @@_;
	$core->start_pipe(sub {
		my $shell = shift;
		my @@args = ('dump-vars', "DPB=$dpb", "BATCH=Yes", "REPORT_PROBLEM=:");
		if (defined $shell) {
			my $s='';
			if (defined $subdirs) {
				$s="SUBDIR='".join(' ', sort @@$subdirs)."'";
			}
			$shell->run("cd $ports && $s ".
			    join(' ', $shell->make, @@args));
		} else {
			if (defined $subdirs) {
				$ENV{SUBDIR} = join(' ', sort @@$subdirs);
			}
			chdir($ports) or die "Bad directory $ports";
			exec {$make} ('make', @@args);
		}
		exit(1);
	}, "LISTING");
	my $h = {};
	my $fh = $core->fh;
	my $subdir;
	my $reset = sub {
			for my $v (values %$h) {
				$v->handle_default($h);
			}
			DPB::PkgPath->merge_depends($h);
			&$code($h);
			$h = {};
		    };

	while(<$fh>) {
		chomp;
		if (m/^\=\=\=\>\s*Exiting (.*) with an error$/) {
			push(@@errors, "Problem in $1\n");
		}
		if (m/^\=\=\=\>\s*(.*)/) {
			print $log $_, "\n";
			$core->job->set_status(" at $1");
			$subdir = DPB::PkgPath->new_hidden($1);
			&$reset;
		} elsif (my ($pkgpath, $var, $value) =
		    m/^(.*?)\.([A-Z][A-Z_0-9]*)\=(.*)$/) {
			next unless DPB::PortInfo->wanted($var);

			if ($value =~ m/^\"(.*)\"$/) {
				$value = $1;
			}
			my $o = DPB::PkgPath->compose($pkgpath, $subdir);
			my $info = DPB::PortInfo->new($o, $subdir);
			$h->{$o} = $o;
			eval { $info->add($var, $value); };
			if ($@@) {
				print $log $@@;
				$o->{broken} = 1;
			}
		}
	}
	&$reset;
	$core->terminate;
}

1;
@


1.4
log
@prevent landry from foobaring dpb3
@
text
@d2 1
a2 1
# $OpenBSD: Vars.pm,v 1.3 2010/05/04 09:45:41 espie Exp $
@


1.3
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d138 5
a142 1
			$info->add($var, $value);
@


1.2
log
@whitespace
@
text
@@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d100 1
a100 1
			} 
d128 1
a128 1
		} elsif (my ($pkgpath, $var, $value) = 
@

