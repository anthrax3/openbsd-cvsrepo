head	1.10;
access;
symbols
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4;
locks; strict;
comment	@# @;


1.10
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.9;

1.9
date	2010.06.07.15.27.52;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.06.15.50.13;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.20.18.29.19;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.04.13.51.48;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.27.10.05.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.27.09.53.09;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Signature.pm,v 1.9 2010/06/07 15:27:52 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

use OpenBSD::LibSpec;
package DPB::Signature::Dir;
sub best
{
	my ($h, $lib) = @@_;
	my $old = $h->{$lib->stem} //= $lib;
	return if $old eq $lib;
	return if $old->major > $lib->major;
	return if $old->major == $lib->major && $old->minor > $lib->minor;
	$h->{$lib->stem} = $lib;
}

sub new
{
	my $class = shift;
	bless {}, $class;
}

sub compare1
{
	my ($s1, $s2, $h1, $h2) = @@_;
	my $r = '';
	while (my ($stem, $lib) = each %$s1) {
		next if $stem eq 'la';
		if (!defined $s2->{$stem}) {
			$r .= "Can't find ".$lib->to_string." on $h2\n";
		} elsif ($s2->{$stem}->to_string ne $lib->to_string) {
			$r .= "versions don't match: ".
			    $s2->{$stem}->to_string." on $h2 vs ".
			    $lib->to_string.  " on $h1\n";
		}
	}
	for my $k (keys %{$s1->{la}}) {
		if (!defined $s2->{la}{$k}) {
			$r .= "$h2 does not have $k.la (from $h1)\n";
		}
	}
	return $r;
}

sub print_out
{
	my ($self, $dir, $fh) = @@_;
	for my $k (sort keys %$self) {
		next if $k eq 'la';
		next if !defined $self->{$k};
		print $fh "\t", $self->{$k}->to_string, "\n";
	}
	if (defined $self->{la}) {
		for my $v (sort keys %{$self->{la}}) {
			print $fh "\t$dir/$v.la\n";
		}
	}
}

sub compare
{
	my ($s1, $s2, $h1, $h2) = @@_;
	return compare1($s1, $s2, $h1, $h2) . compare1($s2, $s1, $h2, $h1);
}

package DPB::Signature::Task;
our @@ISA = qw(DPB::Task::Pipe);
sub new
{
	my ($class, $o, $base) = @@_;

	my $repo = $o->{$base} = DPB::Signature::Dir->new;
	bless {repo => $repo, dir => "$base/lib"}, $class;
}

sub run
{
	my ($self, $core) = @@_;
	if (defined $core->{shell}) {
		$core->{shell}->run("ls $self->{dir}");
	} else {
		exec {"/bin/ls"} ("ls", $self->{dir});
	}
}

sub process
{
	my ($self, $core) = @@_;
	my $fh = $core->fh;
	my $repo = $self->{repo};
	while (<$fh>) {
		if ($_ =~ m/(.*).la/) {
			$repo->{la}->{$1} = 1;
		} else {
			my $lib = OpenBSD::Library->from_string("$self->{dir}/$_");
			next unless $lib->is_valid;
			$repo->best($lib);
		}
	}
}

package DPB::Signature;
sub new
{
	my $class = shift;
	bless {}, $class;
}

sub add_tasks
{
	my ($class, $job) = @@_;
	$job->{signature} = $class->new;
	for my $base (OpenBSD::Paths->library_dirs) {
		$job->add_tasks(
		    DPB::Signature::Task->new($job->{signature}, $base));
	}
}

sub compare
{
	my ($s1, $s2) = @@_;
	my $r = '';
	for my $dir (OpenBSD::Paths->library_dirs) {
		$r .= $s1->{$dir}->compare($s2->{$dir},
		    $s1->{host}, $s2->{host});
	}
	if ($r) {
		DPB::Reporter->myprint("Error between $s1->{host} and $s2->{host}: $r");
	}
	return $r;
}

my $ref;
sub matches
{
	my ($self, $core, $logger) = @@_;
	$self->{host} = $core->hostname;
	if (!defined $ref) {
		$ref = $self;
		return 1;
	} else {
		my $r = $self->compare($ref);
		if ($r ne '') {
			my $log = $logger->open('signature');
			print $log "$r\n";
			return 0;
			close $log;
		} else {
			return 1;
		}
	}
}

sub print_out
{
	my ($self, $core, $logger) = @@_;
	my $log = $logger->create($core->hostname.".sig");
	for my $dir (OpenBSD::Paths->library_dirs) {
		print $log "$dir: \n";
		$self->{$dir}->print_out("$dir/lib", $log);
	}
}

1;
@


1.9
log
@reorg a bit to always pass logger to init_cores, and always print out
directory signatures
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.8 2010/05/06 15:50:13 espie Exp $
@


1.8
log
@make sure all hosts have the same set of .la files
@
text
@d2 1
a2 1
# $OpenBSD: Signature.pm,v 1.7 2010/05/04 09:45:41 espie Exp $
d60 15
d162 1
a162 1
			clsoe $log;
d168 11
@


1.7
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d43 1
d52 5
d92 7
a98 3
		my $lib = OpenBSD::Library->from_string("$self->{dir}/$_");
		next unless $lib->is_valid;
		$repo->best($lib);
@


1.6
log
@whitespace
@
text
@@


1.5
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d47 1
a47 1
			    $s2->{$stem}->to_string." on $h2 vs ". 
d114 1
a114 1
		$r .= $s1->{$dir}->compare($s2->{$dir}, 
@


1.4
log
@pass host names around for comparison messages
@
text
@d104 1
a104 1
		push(@@{$job->{tasks}}, 
d127 1
a127 1
	$self->{host} = $core->host;
@


1.3
log
@don't stop at the first error, report all
@
text
@d40 1
a40 1
	my ($s1, $s2) = @@_;
d44 1
a44 1
			$r .= "Can't find ".$lib->to_string."\n";
d47 2
a48 2
			    $s2->{$stem}->to_string." vs ". $lib->to_string.
			    "\n";
d56 2
a57 2
	my ($s1, $s2) = @@_;
	return compare1($s1, $s2) . compare1($s2, $s1);
d114 2
a115 1
		$r .= $s1->{$dir}->compare($s2->{$dir});
d126 1
a126 1
	my ($self, $core) = @@_;
d132 9
a140 1
		return $self->compare($ref) eq '';
@


1.2
log
@activate library signature code. now we check that machines DO match
@
text
@d41 1
d44 5
a48 5
			return "Can't find ".$lib->to_string;
		}
		if ($s2->{$stem}->to_string ne $lib->to_string) {
			return "versions don't match: ".
			    $s2->{$stem}->to_string." vs ". $lib->to_string;
d51 1
a51 1
	return 0;
d57 1
a57 1
	return compare1($s1, $s2) || compare1($s2, $s1);
d112 1
d114 4
a117 5
		my $r = $s1->{$dir}->compare($s2->{$dir});
		if ($r) {
			DPB::Reporter->myprint("Error between $s1->{host} and $s2->{host}: $r\n");
			return 1;
		}
d119 1
a119 1
	return 0;
d131 1
a131 1
		return $self->compare($ref) == 0;
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d59 19
a77 1
package DPB::Signature;
d79 11
a89 1
my $byhost = {};
d91 2
a92 1
sub signature
d94 2
a95 2
	my ($class, $job) = @@_;
	$byhost->{$job->host} //= $class->compute_signature($job);
d98 1
a98 1
sub compute_signature
d101 1
a101 1
	my $o = bless {host => $job->host}, $class;
d103 3
a105 20
		my $repo = $o->{$base} = DPB::Signature::Dir->new;
		my $dir = "$base/lib";
		$job->start_pipe(sub {
			my $shell = shift;
			if (defined $shell) {
				$shell->run("ls $dir");
			} else {
				exec{"/bin/ls"} ("ls", $dir);
			}
			exit(1);
		}, "ls");
		my $fh = $job->fh;
		while (<$fh>) {
			my $lib = OpenBSD::Library->from_string("$dir/$_");
			next unless $lib->is_valid;
			$repo->best($lib);
		}
		$job->terminate;
    	}
	return $o;
d114 1
a114 1
			print STDERR "Error between $s1->{host} and $s2->{host}: $r\n";
d121 12
@

