head	1.9;
access;
symbols
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@# @;


1.9
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.8;

1.8
date	2010.05.22.08.43.18;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.15.09.59.07;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.06.10.10.03;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.20.18.29.19;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.04.13.56.09;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.14.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: PortBuilder.pm,v 1.8 2010/05/22 08:43:18 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# this object is responsible for launching the build of ports
# which mostly includes starting the right jobs
package DPB::PortBuilder;
use File::Path;
use DPB::Util;
use DPB::Job::Port;

sub new
{
	my $class = shift;
	my ($opt_c, $opt_s, $opt_u, $opt_U, $fullrepo, $logger, $ports, $make,
	    $h) = @@_;
	my $self = bless {clean => $opt_c,  size => $opt_s,
	    fullrepo => $fullrepo,
	    logger => $logger, ports => $ports, make => $make,
	    heuristics => $h}, $class;
	if ($opt_u || $opt_U) {
		$self->{update} = 1;
	}
	if ($opt_U) {
		$self->{forceupdate} = 1;
	}
	$self->init;
	return $self;
}

sub init
{
	my $self = shift;
	File::Path::make_path($self->{fullrepo});
	$self->{global} = $self->{logger}->open("build");
}

sub pkgfile
{
	my ($self, $v) = @@_;
	my $name = $v->fullpkgname;
	return "$self->{fullrepo}/$name.tgz";
}

sub check
{
	my ($self, $v) = @@_;
	return -f $self->pkgfile($v);
}

sub report
{
	my ($self, $v, $job, $core) = @@_;
	my $pkgpath = $v->fullpkgpath;
	my $host = $core->fullhostname;
	my $sz = (stat $self->{logger}->log_pkgpath($v))[7];
	my $log = $self->{global};
	if (defined $job->{offset}) {
		$sz -= $job->{offset};
	}
	print $log "$pkgpath $host ", $job->totaltime, " ", $sz, " ",
	    $job->timings;
	if ($self->check($v)) {
		print $log  "\n";
	} else {
		open my $fh, '>>', $job->{log};
		print $fh "Error: ", $self->pkgfile($v), " does not exist\n";
		print $log  "!\n";
	}
}

sub get
{
	my $self = shift;
	return DPB::Core->get;
}

sub end_lock
{
	my ($self, $lock, $core, $job) = @@_;
	my $end = time();
	print $lock "status=$core->{status}\n";
	print $lock "todo=", $job->current_task, "\n";
	print $lock "end=$end (", DPB::Util->time2string($end), ")\n";
	close $lock;
}

sub build
{
	my ($self, $v, $core, $special, $lock, $final_sub) = @@_;
	my $start = time();
	my $log = $self->{logger}->make_logs($v);
	my $job;
	$job = DPB::Job::Port->new($log, $v, $self, $special,
	    sub {$self->end_lock($lock, $core, $job); $self->report($v, $job, $core); &$final_sub;});
	$core->start_job($job, $v);
#	(sub {
#	}, 	$v, " (".$self->{heuristics}->measure($v).")");
	print $lock "host=", $core->hostname, "\n";
	print $lock "pid=$core->{pid}\n";
	print $lock "start=$start (", DPB::Util->time2string($start), ")\n";
	$job->set_watch($self->{logger}, $v);
	return $core;
}

1;
@


1.8
log
@report pkgname that didn't build. This should help track down the
todo=<nothing> errors the other frogs are seeing.
@
text
@d2 1
a2 1
# $OpenBSD: PortBuilder.pm,v 1.7 2010/05/04 09:45:41 espie Exp $
@


1.7
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d54 7
d64 1
a64 2
	my $name = $v->fullpkgname;
	return -f "$self->{fullrepo}/$name.tgz";
d82 2
@


1.6
log
@bugfix: strip LIB_DEPENDS of all BASE_PKGPATH
bugfix: use -U when pkg_add -r to update dependencies as well
feature: add next stage in ports build to info saved in the lock when
things fail.
@
text
@d31 1
a31 1
	my ($opt_c, $opt_s, $opt_u, $opt_U, $fullrepo, $logger, $ports, $make, 
d34 1
a34 1
	    fullrepo => $fullrepo, 
d71 1
a71 1
	print $log "$pkgpath $host ", $job->totaltime, " ", $sz, " ", 
@


1.5
log
@add update support, with rather violent options for now
@
text
@d88 1
a88 1
	my ($self, $lock, $core) = @@_;
d91 1
d103 1
a103 1
	    sub {$self->end_lock($lock, $core); $self->report($v, $job, $core); &$final_sub;});
@


1.4
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d31 2
a32 1
	my ($opt_c, $opt_s, $fullrepo, $logger, $ports, $make, $h) = @@_;
d37 6
@


1.3
log
@log signature errors
move the logs/locks yet again: those are dpb logs, so they belong in
logs dir (note the s). Use one single option (-L) to move both.
remove old -t mode, use -t/-T for ssh/display timeouts
Change the "mem" option to "parse size file", dependent on show-size.
@
text
@d56 1
a56 1
	my ($self, $v, $job, $host) = @@_;
d58 1
d95 1
a95 1
	    sub {$self->end_lock($lock, $core); $self->report($v, $job, $core->host); &$final_sub;});
d99 1
a99 1
	print $lock "host=", $core->host, "\n";
@


1.2
log
@a few improvemennts:
- give more responsibility to tasks, so that they can time themselves without
any higher level support
- record errors the opposite way, so that more recent errors show up first
- better terminal display: use fullwidth, clamp to terminal height
- less logsize fuzz, always trim preparation stages
- dpb's pid - dependent ssh socket names, so that 2 dpb can talk to the same machine.
- pid display for dpb itself, and ssh masters.
@
text
@d31 2
a32 2
	my ($opt_c, $fullrepo, $logger, $ports, $make, $h) = @@_;
	my $self = bless {clean => $opt_c, 
a102 23
}

package DPB::DummyCore;
sub host
{
	return "dummy";
}

my $dummy = bless {}, "DPB::DummyCore";

package DPB::PortBuilder::Test;
our @@ISA = qw(DPB::PortBuilder);

sub build
{
	my ($self, $v, $core, $lock, $code) = @@_;
	my $name = $v->fullpkgname;
#	my $log = $self->{logger}->make_logs(make_logs($v), $self->{clean});
#	open my $out, ">>", $log or die "Can't write to $log";
	open my $fh, ">", "$self->{fullrepo}/$name.tgz";
	close $fh;
	&$code;
	return $dummy;
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d60 3
@

