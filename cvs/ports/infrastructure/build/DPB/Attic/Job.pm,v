head	1.8;
access;
symbols
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@# @;


1.8
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.7;

1.7
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.23.09.57.45;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.20.18.29.18;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.01.17.59.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.14.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Job.pm,v 1.7 2010/05/04 09:45:41 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

# a "job" is the actual stuff a core runs at some point.
# it's mostly an abstract class here... it's organized
# as a list of tasks, with a finalization routine
package DPB::Task;
sub end
{
}

sub code
{
	my $self = shift;
	return $self->{code};
}

sub new
{
	my ($class, $code) = @@_;
	bless {code => $code}, $class;
}

sub run
{
	my ($self, $core) = @@_;
	&{$self->code($core)}($core->{shell});
}

sub process
{
	my ($self, $core) = @@_;
}

sub finalize
{
	my ($self, $core) = @@_;
	return $core->{status} == 0;
}

sub redirect
{
	my ($self, $log) = @@_;
	close STDOUT;
	close STDERR;
	open STDOUT, '>>', $log or die "Can't write to $log";
	open STDERR, '>&STDOUT' or die "bad redirect";
}

package DPB::Task::Pipe;
our @@ISA =qw(DPB::Task);

sub fork
{
	my $self = shift;
	open($self->{fh}, "-|");
}

sub end
{
	my $self = shift;
	close($self->{fh});
}


package DPB::Task::Fork;
our @@ISA =qw(DPB::Task);
sub fork
{
	CORE::fork();
}

package DPB::Job;
sub next_task
{
	my ($self, $core) = @@_;
	return shift @@{$self->{tasks}};
}

sub name
{
	my $self = shift;
	return $self->{name};
}

sub finalize
{
}

sub watched
{
	my $self = shift;
	return $self->{status};
}

sub add_tasks
{
	my ($self, @@tasks) = @@_;
	push(@@{$self->{tasks}}, @@tasks);
}

sub really_watch
{
}

sub new
{
	my ($class, $name) = @@_;
	bless {name => $name, status => ""}, $class;
}

sub set_status
{
	my ($self, $status) = @@_;
	$self->{status} = $status;
}

package DPB::Job::Normal;
our @@ISA =qw(DPB::Job);

sub new
{
	my ($class, $code, $endcode, $name) = @@_;
	my $o = $class->SUPER::new($name);
	$o->{tasks} = [DPB::Task::Fork->new($code)];
	$o->{endcode} = $endcode;
	return $o;
}

sub finalize
{
	my $self = shift;
	&{$self->{endcode}}(@@_);
}

package DPB::Job::Infinite;
our @@ISA = qw(DPB::Job);
sub next_task
{
	my $job = shift;
	return $job->{task};
}

sub new
{
	my ($class, $task, $name) = @@_;
	my $o = $class->SUPER::new($name);
	$o->{task} = $task;
	return $o;
}

package DPB::Job::Pipe;
our @@ISA = qw(DPB::Job);
sub new
{
	my ($class, $code, $name) = @@_;
	my $o = $class->SUPER::new($name);
	$o->{tasks} = [DPB::Task::Pipe->new($code)];
	return $o;
}

1;
@


1.7
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
@


1.6
log
@whitespace
@
text
@d106 1
a106 1
sub watched 
@


1.5
log
@use a default watched that works,
redirect the init job (move that up to ::Task to reuse it)
default sf to 1 to avoid warnings
@
text
@@


1.4
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d2 1
a2 1
# $OpenBSD: Job.pm,v 1.3 2010/03/01 17:59:49 espie Exp $
d55 9
@


1.3
log
@tweak logic of run slightly, so that we actually check stuff in finalize,
as should be. This also simplifies infinite jobs slightly, since we build
the tasks we want directly
@
text
@d2 1
a2 1
# $OpenBSD$
d101 6
@


1.2
log
@a few improvemennts:
- give more responsibility to tasks, so that they can time themselves without
any higher level support
- record errors the opposite way, so that more recent errors show up first
- better terminal display: use fullwidth, clamp to terminal height
- less logsize fuzz, always trim preparation stages
- dpb's pid - dependent ssh socket names, so that 2 dpb can talk to the same machine.
- pid display for dpb itself, and ssh masters.
@
text
@d54 1
a54 1
	return 1;
d84 1
a84 5
	if ($core->{status} == 0) {
		return shift @@{$self->{tasks}};
	} else {
		return undef;
	}
d147 1
a147 1
	my ($class, $code, $name) = @@_;
d149 1
a149 1
	$o->{task} = DPB::Task::Fork->new($code);
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d46 11
@

