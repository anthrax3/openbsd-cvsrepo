head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.6;

1.6
date	2010.07.14.14.18.59;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.31.14.49.54;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.20.18.29.19;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Locks.pm,v 1.6 2010/07/14 14:18:59 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package DPB::Locks;

use File::Path;
use Fcntl;

sub new
{
	my ($class, $lockdir) = @@_;

	File::Path::make_path($lockdir);
	bless {lockdir => $lockdir}, $class;
}

sub build_lockname
{
	my ($self, $f) = @@_;
	$f =~ tr|/|.|;
	return "$self->{lockdir}/$f";
}

sub simple_lockname
{
	my ($self, $v) = @@_;
	return $self->build_lockname($v->{pkgpath});
}

sub lockname
{
	my ($self, $v) = @@_;
	return $self->build_lockname($v->fullpkgpath);
}

sub dolock
{
	my ($self, $name, $v) = @@_;
	if (sysopen my $fh, $name, O_CREAT|O_EXCL|O_WRONLY, 0666) {
		print $fh "fullpkgpath=", $v->fullpkgpath, "\n";
		return $fh;
	} else {
		return 0;
	}
}

sub lock
{
	my ($self, $v) = @@_;
	my $simple = $self->simple_lockname($v);
	my $fh = $self->dolock($simple, $v);
	if ($fh) {
		my $lk = $self->lockname($v);
		if ($simple eq $lk) {
			return $fh;
		}
		my $fh2 = $self->dolock($lk, $v);
		if ($fh2) {
			return $fh2;
		} else {
			$self->simple_unlock($v);
		}
	}
	return undef;
}

sub unlock
{
	my ($self, $v) = @@_;
	unlink($self->lockname($v));
	$self->simple_unlock($v);
}

sub simple_unlock
{
	my ($self, $v) = @@_;
	my $simple = $self->simple_lockname($v);
	if ($self->lockname($v) ne $simple) {
		unlink($simple);
	}
}

sub locked
{
	my ($self, $v) = @@_;
	return -e $self->lockname($v) || -e $self->simple_lockname($v);
}

sub recheck_errors
{
	my ($self, $engine) = (@@_);

	my $e = $engine->{errors};
	$engine->{errors} = [];
	while (my $v = shift @@$e) {
		if ($v->{info} && $engine->{builder}->check($v)) {
			$self->unlock($v);
		}
		if ($self->locked($v)) {
			push(@@{$engine->{errors}}, $v);
		} else {
			$engine->requeue($v);
		}
	}
}


1;
@


1.6
log
@if we didn't fill info, don't even retry
@
text
@d2 1
a2 1
# $OpenBSD: Locks.pm,v 1.5 2010/05/31 14:49:54 espie Exp $
@


1.5
log
@sometimes, files take a moment to show up on NFS, avoid spurious errors
by re-checking and removing locks when the file shows up. (sigh...)
@
text
@d2 1
a2 1
# $OpenBSD: Locks.pm,v 1.4 2010/05/04 09:45:41 espie Exp $
d113 1
a113 1
		if ($engine->{builder}->check($v)) {
@


1.4
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d37 1
a37 1
	$f =~ s|/|.|g;
d40 1
d113 3
@


1.3
log
@whitespace
@
text
@@


1.2
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d2 1
a2 1
# $OpenBSD: Locks.pm,v 1.1 2010/02/24 11:33:31 espie Exp $
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d2 1
a2 1
# $OpenBSD$
d115 1
a115 1
			$engine->{buildable}->add($v);
@

