head	1.14;
access;
symbols
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@# @;


1.14
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.13;

1.13
date	2010.06.07.15.27.52;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.03.27.12.39.49;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.23.09.57.45;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.21.20.09.42;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.21.19.43.38;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.20.18.29.18;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.04.13.56.09;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.01.17.59.49;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.27.09.53.09;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.14.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.14
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Core.pm,v 1.13 2010/06/07 15:27:52 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

# we have unique objects for hosts, so we can put properties in there.
package DPB::Host;

my $hosts = {};

sub new
{
	my ($class, $name, $prop) = @@_;
	$prop //= {};
	$prop->{sf} //= 1;
	$hosts->{$name} //= bless {host => $name, prop => $prop }, $class;
}

sub name
{
	my $self = shift;
	return $self->{host};
}

sub fullname
{
	my $self = shift;
	my $name = $self->name;
	if (defined $self->{prop}->{jobs}) {
		$name .= "/$self->{prop}->{jobs}";
	}
	return $name;
}


# here, a "core" is an entity responsible for scheduling cpu, such as
# running a job, which is a collection of tasks.
# the "abstract core" part only sees about registering/unregistering cores,
# and having a global event handler that gets run whenever possible.
package DPB::Core::Abstract;

use POSIX ":sys_wait_h";
use OpenBSD::Error;
use DPB::Util;
use DPB::Job;


# note that we play dangerously, e.g., we only keep cores that are running
# something in there, the code can keep some others.
my ($running, $special) = ({}, {});
sub repositories
{
	return ($running, $special);
}

my @@extra_stuff = ();

sub register_event
{
	my ($class, $code) = @@_;
	push(@@extra_stuff, $code);
}

sub handle_events
{
	for my $code (@@extra_stuff) {
		&$code;
	}
}

sub is_alive
{
	return 1;
}

sub new
{
	my ($class, $host, $prop) = @@_;
	bless {host => DPB::Host->new($host, $prop)}, $class;
}

sub host
{
	my $self = shift;
	return $self->{host};
}

sub prop
{
	my $self = shift;
	return $self->host->{prop};
}

sub sf
{
	my $self = shift;
	return $self->prop->{sf};
}

sub memory
{
	my $self = shift;
	return $self->prop->{memory};
}

sub hostname
{
	my $self = shift;
	return $self->host->name;
}

sub fullhostname
{
	my $self = shift;
	return $self->host->fullname;
}

sub register
{
	my ($self, $pid) = @@_;
	$self->{pid} = $pid;
	$self->repository->{$self->{pid}} = $self;
}

sub unregister
{
	my ($self, $status) = @@_;
	delete $self->repository->{$self->{pid}};
	delete $self->{pid};
	$self->{status} = $status;
	return $self;
}

sub terminate
{
	my $self = shift;
	if (defined $self->{pid}) {
		waitpid($self->{pid}, 0);
		$self->unregister($?);
		return $self;
    	} else {
		return undef;
	}
}

sub reap_kid
{
	my ($class, $kid) = @@_;
	if (defined $kid && $kid > 0) {
		for my $repo ($class->repositories) {
			if (defined $repo->{$kid}) {
				$repo->{$kid}->unregister($?)->continue;
				last;
			}
		}
	}
	return $kid;
}

sub reap
{
	my ($class, $all) = @@_;
	my $reaped = 0;
	$class->handle_events;
	$reaped++ while $class->reap_kid(waitpid(-1, WNOHANG)) > 0;
	return $reaped;
}

sub reap_wait
{
	my ($class, $reporter) = @@_;

	return $class->reap_kid(waitpid(-1, 0));
}

sub cleanup
{
	my $class = shift;
	for my $repo ($class->repositories) {
		for my $pid (keys %$repo) {
			kill INT => $pid;
		}
	}
}

OpenBSD::Handler->register( sub { __PACKAGE__->cleanup });

# this is a core that can run jobs
package DPB::Core::WithJobs;
our @@ISA = qw(DPB::Core::Abstract);

sub fh
{
	my $self = shift;
	return $self->task->{fh};
}

sub job
{
	my $self = shift;
	return $self->{job};
}

sub task
{
	my $self = shift;
	return $self->job->{task};
}

sub terminate
{
	my $self = shift;
	$self->task->end  if $self->task;
	if ($self->SUPER::terminate) {
		$self->job->finalize($self);
	}
}

sub run_task
{
	my $core = shift;
	my $pid = $core->task->fork($core);
	if (!defined $pid) {
		die "Oops: task couldn't start\n";
	} elsif ($pid == 0) {
		for my $sig (keys %SIG) {
			$SIG{$sig} = 'DEFAULT';
		}
		if (!$core->task->run($core)) {
			exit(1);
		}
		exit(0);
	} else {
		$core->task->process($core);
		$core->register($pid);
	}
}

sub continue
{
	my $core = shift;
	if ($core->task->finalize($core)) {
		return $core->start_task;
	} else {
		return $core->job->finalize($core);
	}
}

sub start_task
{
	my $core = shift;
	my $task = $core->job->next_task($core);
	$core->job->{task} = $task;
	if (defined $task) {
		return $core->run_task;
	} else {
		return $core->job->finalize($core);
	}
}

sub mark_ready
{
	my $self = shift;
	delete $self->{job};
	return $self;
}

use Time::HiRes qw(time);
sub start_job
{
	my ($core, $job) = @@_;
	$core->{job} = $job;
	$core->{started} = time;
	$core->{status} = 0;
	$core->start_task;
}

sub success
{
	my $self = shift;
	$self->host->{consecutive_failures} = 0;
}

sub failure
{
	my $self = shift;
	$self->host->{consecutive_failures}++;
}

sub start_clock
{
	my ($class, $tm) = @@_;
	DPB::Core::Clock->start($tm);
}

package DPB::Task::Ncpu;
our @@ISA = qw(DPB::Task::Pipe);
sub run
{
	my ($self, $core) = @@_;
	my $shell = $core->{shell};
	my $sysctl = OpenBSD::Paths->sysctl;
	if (defined  $shell) {
		$shell->run("$sysctl -n hw.ncpu");
	} else {
		exec{$sysctl} ($sysctl, '-n', 'hw.ncpu');
	}
}

sub finalize
{
	my ($self, $core) = @@_;
	my $fh = $self->{fh};
	if ($core->{status} == 0) {
		my $line = <$fh>;
		chomp $line;
		if ($line =~ m/^\d+$/) {
			$core->prop->{jobs} = $line;
		}
	}
	close($fh);
	$core->prop->{jobs} //= 1;
	return 1;
}

package DPB::Job::Init;
our @@ISA = qw(DPB::Job);
use DPB::Signature;

sub new
{
	my ($class, $logger) = @@_;
	my $o = $class->SUPER::new('init');
	$o->{logger} = $logger;
	DPB::Signature->add_tasks($o);
	return $o;
}

# if everything is okay, we mark our jobs as ready
sub finalize
{
	my ($self, $core) = @@_;
	$self->{signature}->print_out($core, $self->{logger});
	if ($self->{signature}->matches($core, $self->{logger})) {
		for my $i (1 .. $core->prop->{jobs}) {
			ref($core)->new($core->hostname, $core->prop)->mark_ready;
		}
		return 1;
	} else {
		return 0;
    	}
}

# this is a weird one !
package DPB::Core::Factory;
our @@ISA = qw(DPB::Core::WithJobs);
my $init = {};

sub new
{
	my ($class, $host, $prop) = @@_;
	if ($host eq "localhost" or $host eq DPB::Core::Local->hostname) {
		return $init->{localhost} //= DPB::Core::Local->new_noreg($host, $prop);
	} else {
		require DPB::Core::Distant;
		return $init->{$host} //= DPB::Core::Distant->new_noreg($host, $prop);
	}
}

my $inited = 0;

sub init_cores
{
	my ($self, $logger, $startup) = @@_;
	return if $inited;

	for my $core (values %$init) {
		my $job = DPB::Job::Init->new($logger);
		if (!defined $core->prop->{jobs}) {
			$job->add_tasks(DPB::Task::Ncpu->new);
		}
		if (defined $startup) {
			$job->add_tasks(DPB::Task::Fork->new(
			    sub {
				my $shell = shift;
				DPB::Task->redirect($logger->logfile("init.".
				    $core->hostname));
				if (defined $shell) {
					$shell->run($startup);
				} else {
					exec{$startup}($startup);
				}
			    }
			));
		}
		$core->start_job($job);
	}
	$inited = 1;
}

package DPB::Core;
our @@ISA = qw(DPB::Core::WithJobs);

my @@available = ();

my @@extra_report = ();
my @@extra_important = ();
sub register_report
{
	my ($self, $code, $important) = @@_;
	push (@@extra_report, $code);
	push (@@extra_important, $important);
}

sub repository
{
	return $running;
}


sub one_core
{
	my ($core, $time) = @@_;
	return $core->job->name." [$core->{pid}] on ".$core->hostname.
	    $core->job->watched($time);
}

sub report
{
	my $current = time();

	my $s = join("\n", map {one_core($_, $current)} sort {$a->{started} <=> $b->{started}} values %$running). "\n";
	for my $a (@@extra_report) {
		$s .= &$a;
	}
	return $s;
}

sub important
{
	my $current = time();
	my $s = '';
	for my $j (values %$running) {
		if ($j->job->really_watch($current)) {
			$s .= one_core($j, $current)."\n";
		}
	}

	for my $a (@@extra_important) {
		$s .= &$a;
	}
	return $s;
}

sub mark_ready
{
	my $self = shift;
	$self->SUPER::mark_ready;
	push(@@available, $self);
	return $self;
}

sub avail
{
	my $self = shift;
	return @@available > 0;
}

sub running
{
	return scalar(%$running);
}

sub get
{
	if (@@available > 1) {
		@@available = sort {$b->sf <=> $a->sf} @@available;
	}
	return shift @@available;
}

my @@all_cores = ();

sub all_sf
{
	my $l = [];
	for my $j (@@all_cores) {
		next unless $j->is_alive;
		push(@@$l, $j->sf);
	}
	return [sort {$a <=> $b} @@$l];
}

sub new
{
	my ($class, $host, $prop) = @@_;
	$prop->{sf} //= 1;
	my $o = $class->SUPER::new($host, $prop);
	push(@@all_cores, $o);
	return $o;
}

sub new_noreg
{
	my ($class, $host, $prop) = @@_;
	$class->SUPER::new($host, $prop);
}

my $has_sf = 0;

sub has_sf
{
	return $has_sf;
}

sub parse_hosts_file
{
	my ($class, $filename, $arch, $timeout, $logger, $heuristics) = @@_;
	open my $fh, '<', $filename or die "Can't read host files $filename\n";
	my $_;
	my $sf;
	my $cores = {};
	my $startup_script;
	while (<$fh>) {
		chomp;
		s/\s*\#.*$//;
		next if m/^$/;
		if (m/^STARTUP=\s*(.*)\s*$/) {
			$startup_script = $1;
			next;
		}
		my $prop = {};
		my ($host, @@properties) = split(/\s+/, $_);
		for my $_ (@@properties) {
			if (m/^(.*?)=(.*)$/) {
				$prop->{$1} = $2;
			}
		}
		if (defined $prop->{arch} && $prop->{arch} ne $arch) {
			next;
		}
		if (defined $prop->{mem}) {
			$prop->{memory} = $prop->{mem};
		}
		$sf //= $prop->{sf};
		if (defined $prop->{sf} && $prop->{sf} != $sf) {
			$has_sf = 1;
		}
		if (defined $timeout) {
			$prop->{timeout} //= $timeout;
		}
		$heuristics->calibrate(DPB::Core::Factory->new($host, $prop));
	}
	DPB::Core::Factory->init_cores($logger, $startup_script);
}

sub start_pipe
{
	my ($self, $code, $name) = @@_;
	$self->start_job(DPB::Job::Pipe->new($code, $name));
}

package DPB::Core::Special;
our @@ISA = qw(DPB::Core::WithJobs);
sub repository
{
	return $special;
}

package DPB::Core::Local;
our @@ISA = qw(DPB::Core);

my $host;
sub hostname
{
	if (!defined $host) {
		chomp($host = `hostname`);
	}
	return $host;
}

package DPB::Core::Clock;
our @@ISA = qw(DPB::Core::Special);

sub start
{
	my ($class, $timeout) = @@_;
	my $core = $class->new('localhost');
	$timeout //= 10;
	$core->start_job(DPB::Job::Infinite->new(DPB::Task::Fork->new(sub {
		sleep($timeout);
		exit(0);
		}), 'clock'));
}

1;
@


1.13
log
@reorg a bit to always pass logger to init_cores, and always print out
directory signatures
@
text
@d2 1
a2 1
# $OpenBSD: Core.pm,v 1.12 2010/05/04 09:45:41 espie Exp $
@


1.12
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
a173 1
my $inited = 0;
a177 3
	if (!$inited) {
		DPB::Core::Factory->init_cores;
	}
d357 1
d384 2
d389 2
@


1.11
log
@whitespace
@
text
@d441 1
a441 1
sub report 
d594 1
a594 1
 
d599 1
a599 1
{	
d603 1
a603 1
	$core->start_job(DPB::Job::Infinite->new(DPB::Task::Fork->new(sub { 
@


1.10
log
@s/!=/ne/, fixes things when you specify the arch in the hosts file
ok espie@@
@
text
@d2 1
a2 1
# $OpenBSD: Core.pm,v 1.9 2010/03/23 09:57:45 espie Exp $
@


1.9
log
@use a default watched that works,
redirect the init job (move that up to ::Task to reuse it)
default sf to 1 to avoid warnings
@
text
@d2 1
a2 1
# $OpenBSD$
d552 1
a552 1
		if (defined $prop->{arch} && $prop->{arch} != $arch) {
@


1.8
log
@watched for init jobs, in case they take long enough...
@
text
@d2 1
a2 1
# $OpenBSD: Core.pm,v 1.7 2010/03/21 19:43:38 espie Exp $
d28 3
a30 1
	$hosts->{$name} //= bless {host => $name, prop => $prop // {} }, $class;
d345 1
a345 1
our @@ISA = qw(DPB::Job::Normal);
d351 2
a352 1
	my $o = bless {name => "init", logger => $logger}, $class;
a370 5
sub watched
{
	return '';
}

d397 8
a404 7
				sub {
					my $shell = shift;
					if (defined $shell) {
						$shell->run($startup);
					} else {
						exec{$startup}($startup);
					}
d406 1
@


1.7
log
@make sure hosts have props, this fixes builds without hosts file
@
text
@d2 1
a2 1
# $OpenBSD$
d366 5
@


1.6
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d28 1
a28 1
	$hosts->{$name} //= bless {host => $name, prop => $prop}, $class;
@


1.5
log
@log signature errors
move the logs/locks yet again: those are dpb logs, so they belong in
logs dir (note the s). Use one single option (-L) to move both.
remove old -t mode, use -t/-T for ssh/display timeouts
Change the "mem" option to "parse size file", dependent on show-size.
@
text
@d20 28
d90 2
a91 2
	my ($class, $host) = @@_;
	bless {host => $host}, $class;
d100 30
d294 12
d312 30
d359 2
a360 2
		for my $i (@@{$core->{list}}) {
			$i->mark_ready;
d362 4
a365 1
	}
d376 2
a377 3
	my $cloner;
	if ($host eq "localhost" or $host eq DPB::Core::Local->host) {
		$cloner = $init->{localhost} //= DPB::Core::Local->new_noreg($host, $prop);
d380 1
a380 1
		$cloner = $init->{$host} //= DPB::Core::Distant->new_noreg($host, $prop);
a381 3
	my $o = ref($cloner)->new($host, $prop);
	push(@@{$cloner->{list}}, $o);
	return $o;
d386 1
a386 1
	my ($self, $logger) = @@_;
d388 17
a404 1
		$core->start_job(DPB::Job::Init->new($logger));
d432 1
a432 1
	return $core->job->name." [$core->{pid}] on ".$core->host.
d485 1
a485 1
		@@available = sort {$b->{sf} <=> $a->{sf}} @@available;
d497 1
a497 1
		push(@@$l, $j->{sf});
d505 2
a506 6
	my $o = $class->SUPER::new($host);
	$o->{sf} //= $prop->{sf};
	$o->{sf} //= 1;
	if (defined $prop->{memory}) {
		$o->{memory} = $prop->{memory};
	}
d514 1
a514 1
	$class->SUPER::new($host);
d526 1
a526 1
	my ($class, $filename, $arch, $timeout, $logger) = @@_;
d531 1
d536 4
a549 1
		$prop->{jobs} //= 1;
d560 1
a560 3
		for my $j (1 .. $prop->{jobs}) {
			DPB::Core::Factory->new($host, $prop);
	    	}
d562 1
a562 1
	DPB::Core::Factory->init_cores($logger);
d582 1
a582 1
sub host
@


1.4
log
@tweak logic of run slightly, so that we actually check stuff in finalize,
as should be. This also simplifies infinite jobs slightly, since we build
the tasks we want directly
@
text
@d248 2
a249 2
	my $class = shift;
	my $o = bless {name => "init"}, $class;
d258 1
a258 1
	if ($self->{signature}->matches($core)) {
d287 1
d289 1
a289 1
		$core->start_job(DPB::Job::Init->new);
d415 1
a415 1
	my ($class, $filename, $arch) = @@_;
d442 3
d449 1
a449 1
	DPB::Core::Factory->init_cores;
@


1.3
log
@activate library signature code. now we check that machines DO match
@
text
@a173 1
		$self->mark_ready;
d215 1
a215 1
		$core->job->finalize($core);
a245 7
# no tasks for now
sub next_task
{
	my $self = shift;
	return pop(@@{$self->{tasks}});
}

a453 6
sub start
{
	my ($self, $code, $endcode, $name) = @@_;
	$self->start_job(DPB::Job::Normal->new($code, $endcode, $name));
}

a472 13
package DPB::Job::Clock;
our @@ISA = qw(DPB::Job::Infinite);

sub new
{
	my ($class, $timeout) = @@_;
	$timeout //= 10;
	return $class->SUPER::new(sub { 
		sleep($timeout);
		exit(0);
	    }, 'clock');
}

d480 5
a484 1
	$core->start_job(DPB::Job::Clock->new($timeout));
@


1.2
log
@a few improvemennts:
- give more responsibility to tasks, so that they can time themselves without
any higher level support
- record errors the opposite way, so that more recent errors show up first
- better terminal display: use fullwidth, clamp to terminal height
- less logsize fuzz, always trim preparation stages
- dpb's pid - dependent ssh socket names, so that 2 dpb can talk to the same machine.
- pid display for dpb itself, and ssh masters.
@
text
@d245 2
d250 2
a251 1
	return undef;
d257 3
a259 1
	bless {name => "init"}, $class;
d266 4
a269 2
	for my $i (@@{$core->{list}}) {
		$i->mark_ready;
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d165 1
a165 1
	return $self->{task};
d180 2
a181 3
	my ($core, $task) = @@_;
	$core->{task} = $task;
	my $pid = $task->fork($core);
d188 1
a188 1
		if (!$task->run($core)) {
d193 1
d201 10
d212 1
d214 1
a214 1
		return $core->run_task($task);
d234 1
a234 1
	$core->continue;
@

