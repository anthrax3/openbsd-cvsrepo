head	1.14;
access;
symbols
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7;
locks; strict;
comment	@# @;


1.14
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.13;

1.13
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.03.23.09.57.45;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.03.21.19.44.02;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.20.18.30.04;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.20.18.29.19;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.05.07.50.15;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.04.20.48.12;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.01.18.01.11;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.28.11.49.45;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.27.09.53.44;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.14.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.14
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Reporter.pm,v 1.13 2010/05/04 09:45:41 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

use Term::Cap;
use OpenBSD::Error;
use DPB::Util;
use Time::HiRes qw(time);

package DPB::Clock;

my $items = {};
sub register
{
	my ($class, $o) = @@_;
	$items->{$o} = $o;
}

sub unregister
{
	my ($class, $o) = @@_;
	delete $items->{$o};
}

sub stopped
{
	my ($class, $gap) = @@_;
	for my $o (values %$items) {
		$o->stopped_clock($gap);
	}
}

package DPB::Reporter;
my $singleton;

sub ttyclass() 	{ "DPB::Reporter::Tty" }

sub term_send
{
}

sub reset_cursor
{
	my $self = shift;
	$self->term_send("ve");
}

sub set_cursor
{
	my $self = shift;
	$self->term_send("vi");
}

sub reset
{
	my $self = shift;
	$self->reset_cursor;
	print $self->{clear} if defined $self->{clear};
}

my $stopped_clock;

sub set_sigtstp
{
	my $self =shift;
	$SIG{TSTP} = sub {
		$self->reset_cursor;
		$stopped_clock = time();
		$SIG{TSTP} = 'DEFAULT';
		kill TSTP => $$;
	};
}

sub set_sig_handlers
{
	my $self = shift;
	$self->set_sigtstp;
	$SIG{'CONT'} = sub {
		$self->set_sigtstp;
		$self->{continued} = 1;
		DPB::Clock->stopped(time() - $stopped_clock);
		$self->handle_window;
	};
}

sub handle_window
{
}

sub filter_can
{
	my ($self, $r, $method) = @@_;
	my @@kept = ();
	for my $prod (@@$r) {
		push @@kept, $prod if $prod->can($method);
	}
	return \@@kept;
}

sub new
{
	my $class = shift;
	my $notty = shift;
	my $isatty = !$notty && -t STDOUT;
	if ($isatty) {
		$class->ttyclass->new(@@_);
	} else {
		$singleton //= bless {msg => '', tty => $isatty,
		    producers => $class->filter_can(\@@_, 'important'),
		    continued => 0}, $class;
	}
}

sub report
{
	my $self = shift;
	for my $prod (@@{$self->{producers}}) {
		my $important = $prod->important;
		if ($important) {
			print $important;
		}
	}
}

sub myprint
{
	my $self = shift;
	if (!ref $self) {
		$singleton->myprint(@@_);
	} else {
		print @@_;
	}
}

package DPB::Reporter::Tty;
our @@ISA = qw(DPB::Reporter);

my $extra = '';
my $width;
my $wsz_format = 'SSSS';
our %sizeof;

sub find_window_size
{
	my $self = shift;
	# try to get exact window width
	my $r;
	$r = pack($wsz_format, 0, 0, 0, 0);
	$sizeof{'struct winsize'} = 8;
	require 'sys/ttycom.ph';
	$width = 80;
	if (ioctl(STDOUT, &TIOCGWINSZ, $r)) {
		my ($rows, $cols, $xpix, $ypix) =
		    unpack($wsz_format, $r);
		$self->{width} = $cols;
		$self->{height} = $rows;
	}
}

sub term_send
{
	my ($self, $seq) = @@_;
	$self->{terminal}->Tputs($seq, 1, \*STDOUT);
}

sub handle_window
{
	my $self = shift;
	$self->set_cursor;
	$self->find_window_size;
	$self->{write} = 'go_write_home';
}

sub set_sig_handlers
{
	my $self = shift;
	$self->SUPER::set_sig_handlers;
	$SIG{'WINCH'} = sub {
		$self->handle_window;
	};
	OpenBSD::Handler->register(sub {
		$self->reset_cursor; });
	$SIG{'__DIE__'} = sub {
		$self->reset_cursor;
	};
}

sub new
{
	my $class = shift;
	$singleton //= bless {msg => '',
	    producers => $class->filter_can(\@@_, 'report'),
	    continued => 0}, $class;
	my $oldfh = select(STDOUT);
	$| = 1;
	# XXX go back to totally non-buffered raw shit
	binmode(STDOUT, ':pop');
	select($oldfh);
	use POSIX;
	my $termios = POSIX::Termios->new;
	$termios->getattr(0);
	$singleton->{terminal} = Term::Cap->Tgetent({ OSPEED =>
	    $termios->getospeed });
	$singleton->find_window_size;
	$singleton->set_sig_handlers;
	$singleton->{home} = $singleton->{terminal}->Tputs("ho", 1);
	$singleton->{clear} = $singleton->{terminal}->Tputs("cl", 1);
	$singleton->{down} = $singleton->{terminal}->Tputs("do", 1);
	$singleton->{glitch} = $singleton->{terminal}->Tputs("xn", 1);
	$singleton->{cleareol} = $singleton->{terminal}->Tputs("", 1);
	if ($singleton->{home}) {
		$singleton->{write} = "go_write_home";
	} else {
		$singleton->{write} = "write_clear";
	}
	# no cursor, to avoid flickering
	$singleton->set_cursor;
	return $singleton;
}

sub write_clear
{
	my ($self, $msg) = @@_;
	my $r = $self->{clear};
	$self->{oldlines} = [$self->cut_lines($msg)];
	my $n = 2;
	for my $line (@@{$self->{oldlines}}) {
		last if $n++ > $self->{height};
		$r .= $self->clamped($line);
	}
	print $r;
}

sub cut_lines
{
	my ($self, $msg) = @@_;
	my @@lines = ();
	for my $line (split("\n", $msg)) {
		while (length $line > $self->{width}) {
			push(@@lines, substr($line, 0, $self->{width}));
			$line = substr($line, $self->{width});
		}
		push(@@lines, $line);
	}
	return @@lines;
}

sub clamped
{
	my ($self, $line) = @@_;
	if (!$self->{glitch} && length $line == $self->{width}) {
		return $line;
	} else {
		return $line."\n";
	}
}

sub clear_clamped
{
	my ($self, $line) = @@_;
	if (!$self->{glitch} && length $line == $self->{width}) {
		return $line;
	} else {
		return $self->{cleareol}.$line."\n";
	}
}

sub lines
{
	my ($self, @@new) = @@_;

	my $n = 2;
	my $r = '';

	while (my $newline = shift @@new) {
		my $oldline = shift @@{$self->{oldlines}};
		return $r if $n++ > $self->{height};
		# line didn't change: try to go down
		if (defined $oldline && $oldline eq $newline) {
			if ($self->{down}) {
				$r .= $self->{down};
				next;
			}
		}
		# adjust newline to correct length
		if (defined $oldline && (length $oldline) > (length $newline)) {
			if ($self->{cleareol}) {
				$r .= $self->clear_clamped($newline);
				next;
			}
			$newline .= " "x ((length $oldline) - (length $newline));
		}
		$r .= $self->clamped($newline);
	}
	# extra lines must disappear
	while (my $line = shift(@@{$self->{oldlines}})) {
		if ($self->{cleareol}) {
			$r .= $self->clear_clamped('');
		} else {
			$line = " "x (length $line);
			$r .= $self->clamped($line);
		}
		return if $n++ > $self->{height};
	}
	return $r;
}

sub write_home
{
	my ($self, $msg) = @@_;
	my @@new = $self->cut_lines($msg);
	print $self->{home}.$self->lines(@@new);
	$self->{oldlines} = \@@new;
}

sub go_write_home
{
	# first report has to clear the screen
	my ($self, $msg) = @@_;
	$self->write_clear($msg);
	$self->{write} = 'write_home';
}

sub report
{
	my $self = shift;
	my $msg = "";
	for my $prod (@@{$self->{producers}}) {
		$msg.= $prod->report;
	}
	$msg .= $extra;
	if ($msg ne $self->{msg} || $self->{continued}) {
		$self->{continued} = 0;
		my $method = $self->{write};
		$self->$method($msg);
		$self->{msg} = $msg;
	}
}

sub myprint
{
	my $self = shift;
	for my $string (@@_) {
		$extra .= $string;
	}
}

1;
@


1.13
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
@


1.12
log
@whitespace
@
text
@@


1.11
log
@use a default watched that works,
redirect the init job (move that up to ::Task to reuse it)
default sf to 1 to avoid warnings
@
text
@d124 1
a124 1
		    producers => $class->filter_can(\@@_, 'important'), 
d168 1
a168 1
		my ($rows, $cols, $xpix, $ypix) = 
d199 1
a199 1
		$self->reset_cursor; 
d206 2
a207 2
	$singleton //= bless {msg => '', 
	    producers => $class->filter_can(\@@_, 'report'), 
d217 1
a217 1
	$singleton->{terminal} = Term::Cap->Tgetent({ OSPEED => 
d342 1
a342 1
	my $msg = ""; 
@


1.10
log
@if terminal can clear to eol, use it.
@
text
@@


1.9
log
@typo
@
text
@d273 10
d302 4
d312 6
a317 2
		$line = " "x (length $line);
		$r .= $self->clamped($line);
@


1.8
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.7 2010/03/05 07:50:15 espie Exp $
d225 1
a225 1
	$singleton->{cleareol} = $singleton->{terminal}-Tputs("", 1);
@


1.7
log
@simpler fix: do the \n printing always for glitching terminals
@
text
@d2 1
a2 1
# $OpenBSD$
d49 1
d51 1
a51 20
my $width;
my $wsz_format = 'SSSS';
our %sizeof;

sub find_window_size
{
	my $self = shift;
	# try to get exact window width
	my $r;
	$r = pack($wsz_format, 0, 0, 0, 0);
	$sizeof{'struct winsize'} = 8;
	require 'sys/ttycom.ph';
	$width = 80;
	if (ioctl(STDOUT, &TIOCGWINSZ, $r)) {
		my ($rows, $cols, $xpix, $ypix) = 
		    unpack($wsz_format, $r);
		$self->{width} = $cols;
		$self->{height} = $rows;
	}
}
a54 4
	my ($self, $seq) = @@_;
	if (defined $self->{terminal}) {
		$self->{terminal}->Tputs($seq, 1, \*STDOUT);
	}
a88 1

a91 4
	$SIG{'WINCH'} = sub {
		$self->find_window_size;
		$self->{write} = 'go_write_home';
	};
a95 3
		$self->set_cursor;
		$self->find_window_size;
		$self->{write} = 'go_write_home';
d97 98
a202 3
my $extra = '';
my $isatty;
my $interrupted;
d206 22
a227 28
	my $notty = shift;
	$isatty = !$notty && -t STDOUT;
	my $self = bless {msg => '', tty => $isatty,
	    producers => \@@_, continued => 0}, $class;
	if ($isatty) {
		my $oldfh = select(STDOUT);
		$| = 1;
		# XXX go back to totally non-buffered raw shit
		binmode(STDOUT, ':pop');
		select($oldfh);
		use POSIX;
		my $termios = POSIX::Termios->new;
		$termios->getattr(0);
		$self->{terminal} = Term::Cap->Tgetent({ OSPEED => 
		    $termios->getospeed });
		$self->find_window_size;
		$self->set_sig_handlers;
		$self->{home} = $self->{terminal}->Tputs("ho", 1);
		$self->{clear} = $self->{terminal}->Tputs("cl", 1);
		$self->{down} = $self->{terminal}->Tputs("do", 1);
		$self->{glitch} = $self->{terminal}->Tputs("xn", 1);
		if ($self->{home}) {
			$self->{write} = "go_write_home";
		} else {
			$self->{write} = "write_clear";
		}
		# no cursor, to avoid flickering
		$self->set_cursor;
d229 1
a229 1
		$self->{write} = "no_write";
d231 3
a233 11

	$SIG{INFO} = sub { 
	#	use Carp;
	#	Carp::cluck();
	#	print $self->{msg}; 
	#	if ($self->{write} eq 'write_home') {
	#		$self->{write} = 'go_write_home';
	#	}
		$interrupted++;
	};
	return $self;
a320 4
sub no_write
{
}

d324 1
a324 1
	my $msg = DPB::Util->time2string(time)." [$$]\n";
a327 13
	if ($interrupted) {
		$interrupted = 0;
		$self->reset_cursor;
		$DB::single = 1;
	}
	if (!$self->{tty}) {
		for my $prod (@@{$self->{producers}}) {
			my $important = $prod->important;
			if ($important) {
				print $important;
			}
		}
	}
d340 2
a341 6
	if ($isatty) {
		for my $string (@@_) {
			$extra .= $string;
		}
	} else {
		print @@_;
@


1.6
log
@fix newline handling. thanks naddy@@ for the hint
@
text
@d215 2
a216 2
	if (length $line >= $self->{width}) {
		return substr($line, 0, $self->{width});
a227 1
	my $glitching = 0;
a235 4
				if ($glitching && $self->{glitch}) {
					$r .= $self->{down};
				}
				$glitching = 0;
a243 3
		if (length($newline) == $self->{width}) {
			$glitching = 1;
		}
@


1.5
log
@fix for non-terminal
@
text
@d161 1
d228 1
d237 4
d249 3
@


1.4
log
@less flickering: compute what to display, and do it at once
@
text
@d95 1
a95 1
	print $self->{clear};
@


1.3
log
@let myprint work with -x
@
text
@d95 1
a95 1
	$self->term_send("cl");
d158 4
a161 1
		if ($self->{terminal}->Tputs("ho", 1)) {
d187 1
a187 1
	$self->term_send("cl");
d192 1
a192 1
		$self->print_clamped($line);
d194 1
d211 1
a211 1
sub print_clamped
d215 1
a215 1
		print substr($line, 0, $self->{width});
d217 1
a217 1
		print $line, "\n";
d221 1
a221 1
sub display_lines
d226 1
d230 1
a230 1
		return if $n++ > $self->{height};
d233 2
a234 1
			if ($self->term_send("do")) {
d242 1
a242 1
		$self->print_clamped($newline);
d247 1
a247 1
		$self->print_clamped($line);
d250 1
d257 1
a257 2
	$self->term_send("ho");
	$self->display_lines(@@new);
@


1.2
log
@a few improvemennts:
- give more responsibility to tasks, so that they can time themselves without
any higher level support
- record errors the opposite way, so that more recent errors show up first
- better terminal display: use fullwidth, clamp to terminal height
- less logsize fuzz, always trim preparation stages
- dpb's pid - dependent ssh socket names, so that 2 dpb can talk to the same machine.
- pid display for dpb itself, and ssh masters.
@
text
@d136 1
d142 1
a142 1
	my $isatty = !$notty && -t STDOUT;
d299 6
a304 2
	for my $string (@@_) {
		$extra .= $string;
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d25 23
d111 1
d126 1
a126 1
		DPB::Job::Port->stopped_clock(time() - $stopped_clock);
d185 1
d187 2
a188 1
		print $line, "\n";
d197 3
a199 3
		while (length $line >= $self->{width}) {
			push(@@lines, substr($line, 0, $self->{width}-1));
			$line = substr($line, $self->{width}-1);
d209 5
a213 1
	print substr($line, 0, $self->{width}-1)."\n";
d216 1
a216 1
sub write_home
d218 4
a221 3
	my ($self, $msg) = @@_;
	my @@new = $self->cut_lines($msg);
	$self->term_send("ho");
d224 1
d241 1
d243 9
a251 1
	$self->{oldlines} = [$self->cut_lines($msg)];
d269 1
a269 1
	my $msg = DPB::Util->time2string(time)."\n";
@

