head	1.21;
access;
symbols
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8;
locks; strict;
comment	@# @;


1.21
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.20;

1.20
date	2010.05.10.13.02.35;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.09.10.01.46;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.04.10.10.25;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.04.09.41.46;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.26.08.31.39;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.15.09.59.07;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.12.13.43.05;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.12.11.57.59;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.06.10.10.03;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.06.09.39.51;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.23.09.57.45;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.04.14.23.01;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.02.18.20.45;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.02.02.33.15;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.01.17.57.25;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.27.09.28.47;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.27.08.30.44;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.14.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.21
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Port.pm,v 1.20 2010/05/10 13:02:35 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

use DPB::Job;
package DPB::Task::Port;
use Time::HiRes qw(time);
use OpenBSD::Paths;

our @@ISA = qw(DPB::Task::Fork);
sub new
{
	my ($class, $phase) = @@_;
	bless {phase => $phase}, $class;
}

sub name
{
	my $self = shift;
	return $self->{phase};
}

sub fork
{
	my ($self, $core) = @@_;

	my $job = $core->job;
	$self->{started} = time();
	DPB::Clock->register($self);
	$job->{current} = $self->{phase};
	return $self->SUPER::fork($core);
}

sub finalize
{
	my ($self, $core) = @@_;
	$self->{ended} = time();
	DPB::Clock->unregister($self);
	$core->job->finished_task($self);
	return $core->{status} == 0;
}

sub elapsed
{
	my $self = shift;
	return $self->{ended} - $self->{started};
}

sub stopped_clock
{
	my ($self, $gap) = @@_;
	$self->{started} += $gap;
}

sub run
{
	my ($self, $core) = @@_;
	my $job = $core->job;
	my $t = $self->{phase};
	my $builder = $job->{builder};
	my $ports = $builder->{ports};
	my $fullpkgpath = $job->{v}->fullpkgpath;
	my $sudo = OpenBSD::Paths->sudo;
	my $shell = $core->{shell};
	$self->redirect($job->{log});
	my @@args = ($t, "TRUST_PACKAGES=Yes",
	    "FETCH_PACKAGES=No",
	    "REPORT_PROBLEM='exit 1'", "BULK=No");
	if ($job->{special}) {
		push(@@args, "WRKOBJDIR=/tmp/ports");
	}
	if (defined $shell) {
		unshift(@@args, $shell->make);
		if ($self->{sudo}) {
			unshift(@@args, $sudo, "-E");
		}
		$shell->run("cd $ports && SUBDIR=".
		    $fullpkgpath." ".join(' ', @@args));
	} else {
		chdir($ports) or
		    die "Wrong ports tree $ports";
		$ENV{SUBDIR} = $fullpkgpath;
		if ($self->{sudo}) {
			exec {$sudo}("sudo", "-E", $builder->{make}, @@args);
		} else {
			exec {$builder->{make}} ("make", @@args);
		}
	}
	exit(1);
}

sub notime { 0 }

package DPB::Task::Port::NoTime;
our @@ISA = qw(DPB::Task::Port);
sub notime { 1 }

package DPB::Task::Port::Depends;
our @@ISA=qw(DPB::Task::Port::NoTime);

sub run
{
	my ($self, $core) = @@_;
	my $job = $core->job;
	my $dep = {};
	my $v = $job->{v};
	for my $kind (qw(BUILD_DEPENDS LIB_DEPENDS)) {
		if (exists $v->{info}{$kind}) {
			for my $d (values %{$v->{info}{$kind}}) {
				next if $d->{pkgpath} eq $v->{pkgpath};
				$dep->{$d->fullpkgname} = 1;
			}
		}
	}
	# recurse for extra stuff
	if (exists $v->{info}{EXTRA}) {
		for my $two (values %{$v->{info}{EXTRA}}) {
			for my $kind (qw(RUN_DEPENDS LIB_DEPENDS)) {
				if (exists $two->{info}{$kind}) {
					for my $d (values %{$two->{info}{$kind}}) {
						$dep->{$d->fullpkgname} = 1;
					}
				}
			}
		}
	}

	exit(0) unless %$dep;
	my $sudo = OpenBSD::Paths->sudo;
	my $shell = $core->{shell};
	$self->redirect($job->{log});
	my @@cmd = ('/usr/sbin/pkg_add', '-a');
	if ($job->{builder}->{update}) {
		push(@@cmd, "-rqU", "-Dupdate", "-Dupdatedepends");
	}
	if ($job->{builder}->{forceupdate}) {
		push(@@cmd,  "-Dinstalled");
	}
	print join(' ', @@cmd, (sort keys %$dep)), "\n";
	my $path = $job->{builder}->{fullrepo}.'/';
	if (defined $shell) {
		$shell->run(join(' ', "PKG_PATH=$path", $sudo, @@cmd,
		    (sort keys %$dep)));
	} else {
		$ENV{PKG_PATH} = $path;
		exec{$sudo}($sudo, @@cmd, sort keys %$dep);
	}
	exit(1);
}

package DPB::Task::Port::ShowSize;
our @@ISA = qw(DPB::Task::Port);

sub fork
{
	my ($self, $core) = @@_;
	$self->{sudo} = 1;
	open($self->{fh}, "-|");
}

sub redirect
{
	my ($self, $log) = @@_;
}

sub finalize
{
	my ($self, $core) = @@_;
	my $fh = $self->{fh};
	if ($core->{status} == 0) {
		my $line = <$fh>;
		$line = <$fh>;
		if ($line =~ m/^\s*(\d+)\s+/) {
			my $sz = $1;
			my $job = $core->job;
			$core->job->{wrkdir} = $sz;
		}
	}
	close($fh);
	return 1;
}
package DPB::Task::Port::ShowFakeSize;
our @@ISA = qw(DPB::Task::Port::ShowSize);

sub finalize
{
	my ($self, $core) = @@_;
	my $fh = $self->{fh};
	if ($core->{status} == 0) {
		my $line = <$fh>;
		$line = <$fh>;
		if ($line =~ m/^\s*(\d+)\s+/) {
			my $sz = $1;
			my $job = $core->job;
			my $f2 = $job->{builder}->{logger}->open("size");
			print $f2 $job->{v}->fullpkgpath, " $job->{wrkdir} $sz\n";
		}
	}
	close($fh);
	return 1;
}


package DPB::Task::Port::Fetch;
our @@ISA = qw(DPB::Task::Port::NoTime);

sub finalize
{
	my ($self, $core) = @@_;

	# if there's a watch file, then we remove the current size,
	# so that we DON'T take prepare into account.
	my $job = $core->job;
	if (defined $job->{watched}) {
		my $sz = (stat $job->{watched})[7];
		if (defined $sz) {
			$job->{offset} = $sz;
		}
	}
	$self->SUPER::finalize($core);
}

package DPB::Task::Port::Clean;
our @@ISA = qw(DPB::Task::Port::NoTime);

sub finalize
{
	my ($self, $core) = @@_;
	# didn't clean right, and no sudo yet:
	# run ourselves again (but log the problem)
	if ($core->{status} != 0 && !$self->{sudo}) {
		$self->{sudo} = 1;
		my $job = $core->job;
		unshift(@@{$job->{tasks}}, $self);
		my $fh = $job->{builder}->{logger}->open("clean");
		print $fh $job->{v}->fullpkgpath, "\n";
		$core->{status} = 0;
		return 1;
	}
	$self->SUPER::finalize($core);
}

package DPB::Port::TaskFactory;
my $repo = {
	default => 'DPB::Task::Port',
	clean => 'DPB::Task::Port::Clean',
	prepare => 'DPB::Task::Port::NoTime',
	fetch => 'DPB::Task::Port::Fetch',
	depends => 'DPB::Task::Port::Depends',
	'show-size' => 'DPB::Task::Port::ShowSize',
	'show-fake-size' => 'DPB::Task::Port::ShowFakeSize',
};

sub create
{
	my ($class, $k) = @@_;
	my $fw = $repo->{$k};
	$fw //= $repo->{default};
	$fw->new($k);
}

package DPB::Job::Port;
our @@ISA = qw(DPB::Job::Normal);

use Time::HiRes qw(time);

sub new
{
	my ($class, $log, $v, $builder, $special, $endcode) = @@_;
	my @@todo;
	if ($builder->{clean}) {
		push @@todo, "clean";
	}
	push(@@todo, qw(depends prepare fetch patch configure build));
	if ($builder->{size}) {
		push @@todo, 'show-size';
	}
	push(@@todo, qw(fake package));
	if ($builder->{size}) {
		push @@todo, 'show-fake-size';
	}
	push @@todo, 'clean';
	bless {
	    tasks => [map {DPB::Port::TaskFactory->create($_)} @@todo],
	    log => $log, v => $v,
	    special => $special,  current => '',
	    builder => $builder, endcode => $endcode},
		$class;
}

sub current_task
{
	my $self = shift;
	if (@@{$self->{tasks}} > 0) {
		return $self->{tasks}[0]{phase};
	} else {
		return "<nothing>";
	}
}

sub pkgpath
{
	my $self = shift;
	return $self->{v};
}

sub name
{
	my $self = shift;
	return $self->{v}->fullpkgpath."(".$self->{task}->name.")";
}

sub finished_task
{
	my ($self, $task) = @@_;
	push(@@{$self->{done}}, $task);
}

sub finalize
{
	my $self = shift;
	$self->SUPER::finalize(@@_);
}

sub totaltime
{
	my $self = shift;
	my $t = 0;
	for my $plus (@@{$self->{done}}) {
		next if $plus->notime;
		$t += $plus->elapsed;
    	}
	return sprintf("%.2f", $t);
}

sub timings
{
	my $self = shift;
	return join('/', map {sprintf("%s=%.2f", $_->name, $_->elapsed)} @@{$self->{done}});
}

my $logsize = {};

sub add_build_info
{
	my ($class, $pkgpath, $host, $time, $sz) = @@_;
	$logsize->{$pkgpath} = $sz;
}

sub set_watch
{
	my ($self, $logger, $v) = @@_;
	for my $w ($logger->pathlist($v)) {
		if (defined $logsize->{$w}) {
			$self->{expected} = $logsize->{$w};
			last;
		}
	}
	$self->{watched} = $logger->log_pkgpath($v);
}

sub watch
{
	my $self = shift;
	my $sz = (stat $self->{watched})[7];
	if (defined $self->{offset} && defined $sz) {
		$sz -= $self->{offset};
	}
	if (!defined $self->{sz} || $self->{sz} != $sz) {
		$self->{sz} = $sz;
		$self->{time} = time();
	}
}

sub watched
{
	my ($self, $current) = @@_;
	return "" unless defined $self->{watched};
	$self->watch;
	my $progress = '';
	if (defined $self->{sz}) {
		if (defined $self->{expected} &&
		    $self->{sz} < 4 * $self->{expected}) {
			$progress = ' '.
			    int($self->{sz}*100/$self->{expected}). '%';
		} else {
			$progress = ' '.$self->{sz};
	    	}
	}

	my $diff = $current - $self->{time};
	if ($diff > 7200) {
		return "$progress unchanged for ".int($diff/3600)." hours";
	} elsif ($diff > 300) {
		return "$progress unchanged for ".int($diff/60)." minutes";
	} elsif ($diff > 10) {
		return "$progress unchanged for ".int($diff)." seconds";
	} else {
		return $progress;
	}
}

sub really_watch
{
	my ($self, $current) = @@_;
	return "" unless defined $self->{watched};
	$self->watch;
	my $diff = $current - $self->{time};
	$self->{lastdiff} //= 5;
	if ($diff > $self->{lastdiff} * 2) {
		$self->{lastdiff} = $diff;
		return 1;
	} elsif ($diff < $self->{lastdiff}) {
		$self->{lastdiff} = 5;
	}
	return 0;
}
1;

@


1.20
log
@no "manual install" in there
@
text
@d2 1
a2 1
# $OpenBSD: Port.pm,v 1.19 2010/05/09 10:01:46 espie Exp $
@


1.19
log
@avoid FETCH_PACKAGES
@
text
@d2 1
a2 1
# $OpenBSD: Port.pm,v 1.18 2010/05/04 10:10:25 espie Exp $
d147 1
a147 1
	my @@cmd = ('/usr/sbin/pkg_add');
@


1.18
log
@if depends is :patch, install dependencies from patch...
@
text
@d2 1
a2 1
# $OpenBSD: Port.pm,v 1.17 2010/05/04 09:41:46 espie Exp $
d82 1
@


1.17
log
@stupid, finally get this right...
@
text
@d2 1
a2 1
# $OpenBSD$
d129 13
@


1.16
log
@whitespace
@
text
@a120 1
	my $base = $v->{pkgpath};
d124 1
a124 1
				next if $d->{pkgpath} eq $v;
@


1.15
log
@skip depends the same way the ports tree does
@
text
@@


1.14
log
@bugfix: strip LIB_DEPENDS of all BASE_PKGPATH
bugfix: use -U when pkg_add -r to update dependencies as well
feature: add next stage in ports build to info saved in the lock when
things fail.
@
text
@d81 1
a81 1
	my @@args = ($t, "TRUST_PACKAGES=Yes", 
d94 1
a94 1
		chdir($ports) or 
d121 1
a121 1
	my $base = $v->pkgpath_and_flavors;
d125 1
a125 1
				next if $d->pkgpath_and_flavors eq $v;
d144 1
a144 1
		$shell->run(join(' ', "PKG_PATH=$path", $sudo, @@cmd, 
d384 1
a384 1
		if (defined $self->{expected} && 
@


1.13
log
@remove the .tgz work-around now that I've fixed the pkg_add problem.
WARNING: you need a current pkg_add if you don't want your dpb to hang !!!
@
text
@d121 1
d125 1
a125 1
				next if $d eq $v;
d136 1
a136 1
		push(@@cmd, "-rq", "-Dupdate", "-Dupdatedepends");
d291 10
@


1.12
log
@avoid self-reference in BUILD/LIB_DEPENDS.
@
text
@d125 1
a125 1
				$dep->{$d->fullpkgname.".tgz"} = 1;
@


1.11
log
@add update support, with rather violent options for now
@
text
@d120 1
d122 3
a124 2
		if (exists $job->{v}{info}{$kind}) {
			for my $d (values %{$job->{v}{info}{$kind}}) {
@


1.10
log
@adds an extra "depends" stage which runs pkg_add once, before prepare
checks the deps.
Solves the "avahi rebuilds with full shit" in some build orders that
naddy@@ reported.
@
text
@d123 1
a123 1
				$dep->{$d->fullpkgname} = 1;
a128 1
	my $pkg_add = '/usr/sbin/pkg_add';
d131 8
a138 1
	print join(' ', $pkg_add, (sort keys %$dep)), "\n";
d141 1
a141 1
		$shell->run(join(' ', "PKG_PATH=$path", $sudo, $pkg_add, 
d145 1
a145 1
		exec{$sudo}($sudo, $pkg_add, sort keys %$dep);
@


1.9
log
@use a default watched that works,
redirect the init job (move that up to ::Task to reuse it)
default sf to 1 to avoid warnings
@
text
@d112 32
d242 1
d267 1
a267 1
	push(@@todo, qw(prepare fetch patch configure build));
@


1.8
log
@slightly more evolved: run du twice,to get build size vs. fake size.
Yep, I should be able to use this information later on.
@
text
@a69 9
sub redirect
{
	my ($self, $log) = @@_;
	close STDOUT;
	close STDERR;
	open STDOUT, '>>', $log or die "Can't write to $log";
	open STDERR, '>&STDOUT' or die "bad redirect";
}

@


1.7
log
@add computation of workdir size on -s (assumes a patch to bsd.port.mk
that's not yet there)
@
text
@d146 19
d166 1
a166 1
			print $f2 $job->{v}->fullpkgpath, " $sz\n";
d220 1
a234 1
my @@list = qw(prepare fetch patch configure build fake package);
d239 1
a239 1
	my @@todo = @@list;
d241 1
a241 1
		unshift @@todo, "clean";
d243 1
d246 4
@


1.6
log
@better control logic.
prepare to du port dir.
@
text
@d84 2
a85 1
	my $ports = $job->{builder}->{ports};
a86 1
	my $make = $job->{builder}->{make};
d91 1
a91 1
	    "REPORT_PROBLEM='exit 1'");
d98 1
a98 1
			unshift(@@args, $sudo);
d107 1
a107 1
			exec {$sudo}("sudo", $make, @@args);
d109 1
a109 1
			exec {$make} ("make", @@args);
d127 1
d215 1
a215 1
my @@list = qw(prepare fetch patch configure build fake package clean);
d224 4
@


1.5
log
@if make clean isn't enough, do it again with sudo, but log it.
(also, bug in notime, really don't take into account what we shouldn't)
@
text
@d55 1
a55 1
	return 1;
d70 9
a85 1
	my $log = $job->{log};
d89 1
a89 4
	close STDOUT;
	close STDERR;
	open STDOUT, '>>', $log or die "Can't write to $log";
	open STDERR, '>&STDOUT' or die "bad redirect";
d121 33
a159 1
	$self->SUPER::finalize($core);
d170 1
a170 1
	return 1;
d199 1
@


1.4
log
@fix watch: if we use the offset too soon, it changes all the time, and we
never notice
@
text
@d23 1
d79 1
d91 4
d96 1
a96 1
		    $fullpkgpath." ".join(' ',$shell->make, @@args));
d101 5
a105 1
		exec {$make} ("make", @@args);
d114 1
a117 1
sub notime { 1 }
d136 20
d159 1
a159 1
	clean => 'DPB::Task::Port::NoTime',
@


1.3
log
@oops, fetch should not be accounted in the log either.
@
text
@d228 3
a233 3
		if (defined $self->{offset}) {
			$self->{sz} -= $self->{offset};
		}
@


1.2
log
@a few improvemennts:
- give more responsibility to tasks, so that they can time themselves without
any higher level support
- record errors the opposite way, so that more recent errors show up first
- better terminal display: use fullwidth, clamp to terminal height
- less logsize fuzz, always trim preparation stages
- dpb's pid - dependent ssh socket names, so that 2 dpb can talk to the same machine.
- pid display for dpb itself, and ssh masters.
@
text
@d105 1
a105 1
package DPB::Task::Port::Prepare;
d130 2
a131 2
	fetch => 'DPB::Task::Port::NoTime',
	prepare => 'DPB::Task::Port::Prepare',
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d22 2
d31 6
d42 2
a43 1
	$job->clock;
d48 21
d100 4
a103 2
package DPB::Job::Port;
our @@ISA = qw(DPB::Job::Normal);
d105 3
a107 2
use Time::HiRes qw(time);
my @@list = qw(prepare fetch patch configure build fake package clean);
d109 1
a109 2
my $alive = {};
sub stopped_clock
d111 10
a120 4
	my ($class, $gap) = @@_;
	for my $t (values %$alive) {
		if (defined $t->{started}) {
			$t->{started} += $gap;
d123 17
d142 6
d155 2
a156 1
	my $o = bless {tasks => [map {DPB::Task::Port->new($_)} @@todo],
a160 3
	
	$alive->{$o} = $o;
	return $o;
d172 1
a172 1
	return $self->{v}->fullpkgpath."($self->{current})";
d175 1
a175 1
sub clock
d177 2
a178 5
	my $self = shift;
	if (defined $self->{started}) {
		push(@@{$self->{times}}, [$self->{current}, time() - $self->{started}]);
	}
	$self->{started} = time();
a183 1
	$self->clock;
a184 1
	delete $alive->{$self};
d191 3
a193 4
	for my $plus (@@{$self->{times}}) {
		next if $plus->[0] eq 'fetch' or $plus->[0] eq 'prepare' 
		    or $plus->[0] eq 'clean';
		$t += $plus->[1];
d201 1
a201 1
	return join('/', map {sprintf("%s=%.2f", @@$_)} @@{$self->{times}});
d231 3
@

