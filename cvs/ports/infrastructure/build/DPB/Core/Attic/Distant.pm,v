head	1.9;
access;
symbols
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5;
locks; strict;
comment	@# @;


1.9
date	2010.08.20.15.07.23;	author espie;	state dead;
branches;
next	1.8;

1.8
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.22.12.55.07;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.05.09.05.46;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.04.13.56.09;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.01.17.59.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.14.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@kill a few things which have now MOVED
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Distant.pm,v 1.8 2010/05/04 09:45:41 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

use DPB::Core;
use OpenBSD::Paths;
package DPB::Ssh;

sub ssh
{
	my ($class, $socket, $timeout) = @@_;
	return ('ssh', '-o', "connectTimeout=$timeout",
	    '-o', "serverAliveInterval=$timeout",
	    '-S', $socket);
}

#	    '-o', 'clearAllForwardings=yes',
#	    '-o', 'EscapeChar=none',

sub new
{
	my ($class, $host, $timeout) = @@_;
	bless {master => DPB::Ssh::Master->find($host, $timeout)}, $class;
}

sub is_alive
{
	shift->{master}->is_alive;
}

sub socket
{
	shift->{master}->socket;
}

sub timeout
{
	shift->{master}->timeout;
}

sub hostname
{
	shift->{master}->hostname;
}

sub run
{
	my ($self, $cmd) = @@_;
	exec {OpenBSD::Paths->ssh}
	    ($self->ssh($self->socket, $self->timeout),
	    $self->hostname, $cmd);
}

sub make
{
	my $self = shift;
	return OpenBSD::Paths->make;
}

package DPB::Task::SshMaster;
our @@ISA = qw(DPB::Task::Fork);
sub run
{
	my $self = shift;
	my $socket = $self->{socket};
	my $timeout = $self->{timeout};
	my $host = $self->{host};
	close STDOUT;
	close STDERR;
	open STDOUT, '>/dev/null';
	open STDERR, '>&STDOUT';
	exec {OpenBSD::Paths->ssh}
	    (DPB::Ssh->ssh($socket, $timeout),
		'-N', '-M', $host);
	exit(1);
}

# we never error out
sub finalize
{
	return 1;
}

sub new
{
	my ($class, $socket, $timeout, $host) = @@_;
	bless {socket => $socket, timeout => $timeout, host => $host}, $class;
}

package DPB::Job::SshMaster;
our @@ISA = qw(DPB::Job::Infinite);

my $TMPDIR;
sub new
{
	my ($class, $host) = @@_;
	$TMPDIR //= $ENV{PKG_TMPDIR} || '/var/tmp';
	my $timeout = 60;
	my $socket = "$TMPDIR/ssh-$host-$$";
	my $o = $class->SUPER::new(DPB::Task::SshMaster->new($socket,
	    $timeout, $host), "ssh master for $host");
	$o->{host} = $host;
	$o->{timeout} = $timeout;
	$o->{socket} = $socket;
	return $o;
}

package DPB::Ssh::Master;
our @@ISA = qw(DPB::Core::Special);

my $master = {};

sub socket
{
	my $self = shift;
	return $self->job->{socket};
}

sub timeout
{
	my $self = shift;
	return $self->job->{timeout};
}

sub is_alive
{
	my $self = shift;
	return -e $self->socket;
}

sub create
{
	my ($class, $host, $timeout) = @@_;

	my $core = $class->SUPER::new($host);
	$core->start_job(DPB::Job::SshMaster->new($host, $timeout));
}

sub find
{
	my ($class, $host, $timeout) = @@_;
	$master->{$host} //= $class->create($host, $timeout);
}

sub alive_hosts
{
	my @@l = ();
	for my $shell (values %$master) {
		my $host = $shell->hostname;
		if ($shell->is_alive) {
			push(@@l, $host." [$shell->{pid}]");
		} else {
			push(@@l, $host.'-');
		}
	}
	return "Distant hosts: ".join(' ', sort(@@l))."\n";
}

sub changed_hosts
{
	my @@l = ();
	for my $shell (values %$master) {
		my $host = $shell->hostname;
		my $was_alive = $shell->{is_alive};
		if ($shell->is_alive) {
			$shell->{is_alive} = 1;
		} else {
			$shell->{is_alive} = 0;
		}
		if ($was_alive && !$shell->{is_alive}) {
			push(@@l, "$host went down\n");
		} elsif (!$was_alive && $shell->{is_alive}) {
			push(@@l, "$host came up\n");
		}
	}
	return join('', sort(@@l));
}

DPB::Core->register_report(\&alive_hosts, \&changed_hosts);

package DPB::Core::Distant;
our @@ISA = qw(DPB::Core);
my @@dead_cores = ();

sub new
{
	my ($class, $host, $prop) = @@_;
	my $o = $class->SUPER::new($host, $prop);
	$o->{shell} = DPB::Ssh->new($host);
	return $o;
}

sub new_noreg
{
	my ($class, $host, $prop) = @@_;
	my $o = $class->SUPER::new_noreg($host, $prop);
	$o->{shell} = DPB::Ssh->new($host, $prop->{timeout});
	return $o;
}

sub is_alive
{
	my $self = shift;
	return $self->{shell}->is_alive;
}

sub mark_ready
{
	my $self = shift;
	if ($self->is_alive) {
		$self->SUPER::mark_ready;
	} else {
		delete $self->{job};
		push(@@dead_cores, $self);
		return undef;
	}
}

sub check_dead_hosts
{
	my @@redo = @@dead_cores;
	@@dead_cores = ();
	for my $core (@@redo) {
		$core->mark_ready;
	}
}

DPB::Core->register_event(\&check_dead_hosts);

1;
@


1.8
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
@


1.7
log
@whitespace
@
text
@d27 2
a28 2
	return ('ssh', '-o', "connectTimeout=$timeout", 
	    '-o', "serverAliveInterval=$timeout", 
d64 2
a65 2
	exec {OpenBSD::Paths->ssh} 
	    ($self->ssh($self->socket, $self->timeout), 
d87 2
a88 2
	exec {OpenBSD::Paths->ssh} 
	    (DPB::Ssh->ssh($socket, $timeout), 
d115 1
a115 1
	my $o = $class->SUPER::new(DPB::Task::SshMaster->new($socket, 
@


1.6
log
@forgot to commit that one
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.5 2010/03/05 09:05:46 espie Exp $
@


1.5
log
@actual timeouts
@
text
@d2 1
a2 1
# $OpenBSD$
d56 1
a56 1
sub host
d58 1
a58 1
	shift->{master}->host;
d66 1
a66 1
	    $self->host, $cmd);
d164 1
a164 1
		my $host = $shell->host;
d178 1
a178 1
		my $host = $shell->host;
a228 1
#		DPB::Reporter->myprint("Found dead core on ".$self->{shell}->host."\n");
a235 1
#	DPB::Reporter->myprint("Checking dead hosts\n");
@


1.4
log
@log signature errors
move the logs/locks yet again: those are dpb logs, so they belong in
logs dir (note the s). Use one single option (-L) to move both.
remove old -t mode, use -t/-T for ssh/display timeouts
Change the "mem" option to "parse size file", dependent on show-size.
@
text
@d27 2
a28 2
	return ('ssh', '-o', "connectTimeout=3", 
	    '-o', "serverAliveInterval=3", 
@


1.3
log
@tweak logic of run slightly, so that we actually check stuff in finalize,
as should be. This also simplifies infinite jobs slightly, since we build
the tasks we want directly
@
text
@d37 2
a38 2
	my ($class, $host) = @@_;
	bless {master => DPB::Ssh::Master->find($host)}, $class;
d148 1
a148 1
	my ($class, $host) = @@_;
d151 1
a151 1
	$core->start_job(DPB::Job::SshMaster->new($host));
d212 1
a212 1
	$o->{shell} = DPB::Ssh->new($host);
@


1.2
log
@a few improvemennts:
- give more responsibility to tasks, so that they can time themselves without
any higher level support
- record errors the opposite way, so that more recent errors show up first
- better terminal display: use fullwidth, clamp to terminal height
- less logsize fuzz, always trim preparation stages
- dpb's pid - dependent ssh socket names, so that 2 dpb can talk to the same machine.
- pid display for dpb itself, and ssh masters.
@
text
@d75 30
d115 2
a116 10
	my $o = $class->SUPER::new(sub {
		    close STDOUT;
		    close STDERR;
		    open STDOUT, '>/dev/null';
		    open STDERR, '>&STDOUT';
		    exec {OpenBSD::Paths->ssh} 
			(DPB::Ssh->ssh($socket, $timeout), 
			    '-N', '-M', $host);
		    exit(1);
		}, "ssh master for $host");
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d84 1
a84 1
	my $socket = "$TMPDIR/ssh-$host";
d144 1
a144 1
			push(@@l, $host);
@

