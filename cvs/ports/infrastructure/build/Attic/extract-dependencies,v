head	1.5;
access;
symbols
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.14
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.12
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.10
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.8
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.6
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.4
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2010.08.20.15.07.22;	author espie;	state dead;
branches;
next	1.4;

1.4
date	2010.04.06.09.39.51;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.06.20.01.06;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.22.18.05.34;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.09.12.01.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@kill a few things which have now MOVED
@
text
@#! /usr/bin/perl

# $OpenBSD: extract-dependencies,v 1.4 2010/04/06 09:39:51 espie Exp $
#
# Copyright (c) 2005 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Usage: extract-dependencies  < 'tsort-pairs' seed
# extracts all the dependencies for seed from a list that contains more
# than that.

use strict;
use warnings;

use Getopt::Std;
my %opts;

getopts('r', \%opts);


# build dependency graph
my $dep = {};
while (<STDIN>) {
	chomp;
	my ($a, $b) = split(/\s+/, $_);
	if ($opts{r}) {
		($a, $b) = ($b, $a);
	}
	$dep->{$a} = {} unless defined $dep->{$a};
	$dep->{$a}->{$b} = 1;
}

# get the starting points
my %pkgpath = map {($_, 1)}  @@ARGV;

my @@todo = ();
my $done = {};

# walk the graph repeatedly starting from it

push(@@todo, keys %pkgpath);

while (my $x = shift @@todo) {
	next if $done->{$x};
	$done->{$x} = 1;
	next unless defined $dep->{$x};
	push(@@todo, keys %{$dep->{$x}});
}

# display all nodes, except for the seeds
for my $d (keys %$done) {
	next if $pkgpath{$d};
	print "$d\n";
}
@


1.4
log
@adds an extra "depends" stage which runs pkg_add once, before prepare
checks the deps.
Solves the "avahi rebuilds with full shit" in some build orders that
naddy@@ reported.
@
text
@d3 1
a3 1
# $OpenBSD: extract-dependencies,v 1.3 2007/02/06 20:01:06 espie Exp $
@


1.3
log
@allow extract-dependencies to use several seeds, which is necessary
for multi-packages ports (databases/sqlite3 == databases/sqlite3,-main).
@
text
@d3 1
a3 1
# $OpenBSD: extract-dependencies,v 1.2 2005/10/22 18:05:34 espie Exp $
d34 1
a34 1
while(<STDIN>) {
@


1.2
log
@Add -r option so that tool can be used to do more.
@
text
@d3 1
a3 1
# $OpenBSD: extract-dependencies,v 1.1 2005/10/09 12:01:22 espie Exp $
d44 2
a45 2
# get the starting point
my $pkgpath = shift;
d51 2
a52 1
push(@@todo, $pkgpath);
d61 1
a61 1
# display all nodes, except for the seed
d63 1
a63 1
	next if $d eq $pkgpath;
@


1.1
log
@tweak the way library dependencies are resolved to speed them up.
Now, resolve-lib can take a big list of libraries with full paths,
and it can solve a big list of spec at once.
Basically, we move most of the parsing of spec paths into resolve-lib.

Since print-package-signature does build a full list of libs, let's solve
it all at once, instead of invoking a costly perl script repeatedly.

Add some caching possibilities for out-of-date. Specifically:
- store libraries for each package under the directory _PORT_LIBS_CACHE
- use the dependency cache _DEPENDS_FILE to avoid recreating dependency
chains, add a new file _DEPENDS_CACHE that will accumulate all dependencies,
and extract these with a simple script extract-dependencies.

Use echo to build libraries lists instead of ls, that's a bit simpler...

Some more clean-up will happen: it's probably simpler to parse libspecs
at once, extract the libraries needed and go fetch the corresponding libraries
just once.
@
text
@d3 1
a3 1
# $OpenBSD$
d26 5
d36 4
a39 1
	my($a, $b) = split(/\s+/, $_);
@

