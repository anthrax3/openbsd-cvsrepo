head	1.21;
access;
symbols
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7;
locks; strict;
comment	@# @;


1.21
date	2010.08.20.15.07.22;	author espie;	state dead;
branches;
next	1.20;

1.20
date	2010.07.13.21.12.41;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.09.12.01.08;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.09.11.30.51;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.07.15.27.52;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2010.05.22.08.42.21;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2010.05.18.15.56.52;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2010.05.04.09.45.41;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.26.08.32.53;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.12.13.30.11;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.08.18.40.42;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.06.10.10.03;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.06.09.38.44;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.20.18.29.18;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.03.04.14.23.01;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.04.13.56.09;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.02.18.20.45;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.01.18.11.11;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.27.08.30.01;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.26.12.11.55;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.11.33.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.21
log
@kill a few things which have now MOVED
@
text
@#! /usr/bin/perl

# ex:ts=8 sw=4:
# $OpenBSD: dpb3,v 1.20 2010/07/13 21:12:41 espie Exp $
#
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
my $ports1;
BEGIN {
	$ports1 = $ENV{PORTSDIR} || '/usr/ports';
}
$0 = 'dpb';
use FindBin;
use lib "$FindBin::Bin";
use lib "$ports1/infrastructure/build";
use DPB::PkgPath;
use DPB::Core;
use DPB::Vars;
use DPB::PortInfo;
use DPB::Engine;
use DPB::PortBuilder;
use DPB::Reporter;
use OpenBSD::Error;
use OpenBSD::State;
use DPB::Heuristics;
use DPB::Locks;
use DPB::Logger;
use DPB::Job;
use DPB::Grabber;

use OpenBSD::Paths;
my $make = $ENV{MAKE} || OpenBSD::Paths->make;

our ($opt_t, $opt_e, $opt_T, $opt_c, $opt_h, $opt_A, $opt_j, $opt_a,
    $opt_r, $opt_s, $opt_u, $opt_U,
    $opt_L, $opt_m, $opt_f, $opt_x);
my @@subdirlist;

sub parse_size_file
{
	my ($fname, @@consumers) = @@_;
	open my $fh, '<', $fname or die "Couldn't open build file $fname\n";
	my $_;
	while (<$fh>) {
		chomp;
		my ($pkgpath, $sz, $sz2) = split(/\s+/, $_);
		if (defined $sz2) {
			$sz += $sz2;
		}
		my $o = DPB::PkgPath->new_hidden($pkgpath);
		for my $c (@@consumers) {
			$c->add_size_info($o, $sz);
		}
	}
}

sub parse_build_line
{
	return split(/\s+/, shift);
}

sub parse_build_file
{
	my ($fname, @@consumers) = @@_;
	open my $fh, '<', $fname or die "Couldn't open build file $fname\n";
	my $_;
	while (<$fh>) {
		chomp;
		my ($pkgpath, $host, $time, $sz, @@rest) = parse_build_line($_);
		next if $sz =~ m/!$/;
		my $o = DPB::PkgPath->new_hidden($pkgpath);
		for my $c (@@consumers) {
			$c->add_build_info($o, $host, $time, $sz);
		}
	}
}

my @@build_files = ();
my $heuristics = DPB::Heuristics->new;
my $ui = OpenBSD::State->new('dpb3');
$ui->{opt} = {
	P => sub {
	    my $file = shift;
	    open my $fh, '<', $file or die "Can't open $file\n";
	    my $_;
	    while (<$fh>) {
		    chomp;
		    next if m/^\#/;
		    unshift @@ARGV, $_;
	    }
	},
	b => sub {
	    push(@@build_files, shift);
	},
	S => sub {
	    parse_size_file(shift, $heuristics);
	}
    };
$ui->handle_options('acersuUh:xA:f:j:m:P:b:L:S:t:T:', 
    "[-acersuUx] [-A arch] [-j N] [-P plist] [-h hosts] [-L logdir]",
    "[-b log] [-t ctimeout] [-T dtimeout] [-m threshold] [path ...]");

if ($opt_r) {
	$heuristics->random;
}
if ($opt_m) {
	$heuristics->set_threshold($opt_m);
}

my $dpb = $opt_f ? "fetch" : "normal";

if (@@ARGV == 0) {
	$opt_a = 1;
}
for my $arg (@@ARGV) {
	my ($path, $weight) = ($arg, 5000);
	if ($arg =~ m/^(.*)\=(\d+)$/) {
		($path, $weight) = ($1, $2);
	}
	if ($arg =~ m/^\./) {
		$ui->usage("Invalid pkgpath: #1",  $arg);
	}
	my $pkgpath = DPB::PkgPath->new($path);
	$heuristics->set_weight($pkgpath, $weight);
	$pkgpath->add_to_subdirlist(\@@subdirlist);
}

my ($ports, $repo, $localarch, $distdir) = DPB::Vars->get($make,
    "PORTSDIR", "PACKAGE_REPOSITORY", "MACHINE_ARCH", "DISTDIR");

my $arch = $opt_A // $localarch;
my $logdir = $opt_L // $ENV{LOGDIR} // "$ports/logs/$arch";
my $lockdir = "$logdir/locks";

my $logger = DPB::Logger->new($logdir, $opt_c);
$heuristics->set_logger($logger);

if (defined $opt_j && $localarch ne $arch) {
	$ui->usage("Can't use -j if -A arch is not local architecture");
}

if (defined $opt_j && $opt_j !~ m/^\d+$/) {
	$ui->usage("-j takes a numerical argument");
}

my $fullrepo = "$repo/$arch/all";
if ($opt_h) {
	DPB::Core->parse_hosts_file($opt_h, $arch, $opt_t, $logger, $heuristics);
}

my $prop = {};
if ($opt_j) {
	$prop->{jobs} = $opt_j;
}

if ($opt_j || !$opt_h) {
	DPB::Core::Factory->new('localhost', $prop);
}

if (@@build_files > 0) {
	for my $file (@@build_files) {
	    parse_build_file($file, $heuristics, "DPB::Job::Port");
	}
	$heuristics->finished_parsing;
}

DPB::Core::Factory->init_cores($logger);
my $builder = DPB::PortBuilder->new(
    $opt_c, $opt_s, $opt_u, $opt_U, $fullrepo, $logger, $ports, $make,
    $heuristics);

my $locker = DPB::Locks->new($lockdir);
my $engine = DPB::Engine->new($builder, $heuristics, $logger, $locker);
my $reporter = DPB::Reporter->new($opt_x, $heuristics, "DPB::Core",
    "DPB::Vars", $engine);
while (!DPB::Core->avail) {
	DPB::Core->reap;
	sleep 1;
}
my $core = DPB::Core->get;
#my $dump = DPB::Util->make_hot($logger->open('dump'));

my $keep_going = 1;
$opt_T //= 10;
my $last_time = time() - $opt_T;

sub handle_non_waiting_jobs
{
	my $need_clock = shift;
	my $reaped = DPB::Core->reap;
	$keep_going = !-e "$logdir/stop";
	if (DPB::Core->avail) {
		$engine->check_buildable;
	}
	while ($keep_going && DPB::Core->avail && $engine->can_build) {
		$engine->start_new_job;
	}
	if ($need_clock) {
		my $current = time();
		if ($current >= $last_time + $opt_T || $reaped) {
			$reporter->report;
			$last_time = $current;
		}
	} else {
		$reporter->report;
	}
	return $keep_going;
}

my $grabber = DPB::Grabber->new($ports, $make, $logger, $engine, $dpb,
	sub { handle_non_waiting_jobs(1) });

if (@@subdirlist > 0) {
	$grabber->grab_subdirs($core, \@@subdirlist);
}

$grabber->complete_subdirs($core);

if ($opt_a) {
	$grabber->grab_subdirs($core);
}


$grabber->complete_subdirs($core);
# give back "our" core to the pool.

if (!$opt_e) {
	$core->mark_ready;
}
# and let's wait for all jobs now.

$engine->finished_scanning;
#$engine->dump($dump);
$engine->check_buildable;
#$engine->dump($dump);

DPB::Core->start_clock($opt_T);
while (1) {
	handle_non_waiting_jobs(0);
	if (!DPB::Core->running && (!$keep_going || !$engine->can_build)) {
		$engine->check_buildable;
		if (!$engine->can_build) {
			last;
		}
	}
	if (DPB::Core->running) {
		DPB::Core->reap_wait;
	}
}

$reporter->reset;
DPB::Core->cleanup;
print $engine->report;
$engine->dump_category('tobuild', $logger->open('dump'));
@


1.20
log
@synch with new infrastructure, might be the reason for recent trouble ?
I don't know... works for me.
@
text
@d4 1
a4 1
# $OpenBSD$
@


1.19
log
@common pattern
@
text
@d4 1
a4 1
# $OpenBSD: dpb3,v 1.18 2010/06/09 11:30:51 espie Exp $
a36 1
use OpenBSD::Getopt;
d95 21
a115 24
$ui->usage_is("[-acersuUx] [-A arch] [-j N] [-P plist] [-h hosts] [-L logdir]",
	"[-b log] [-t ctimeout] [-T dtimeout] [-m threshold] [path ...]");
$ui->do_options(
    sub {
	getopts('acersuUh:xA:f:j:m:P:b:L:S:t:T:', {
		    P => sub {
			my $file = shift;
			open my $fh, '<', $file or die "Can't open $file\n";
			my $_;
			while (<$fh>) {
				chomp;
				next if m/^\#/;
				unshift @@ARGV, $_;
			}
		    },
		    b => sub {
			push(@@build_files, shift);
		    },
		    S => sub {
			parse_size_file(shift, $heuristics);
		    }
		}
		);
    });
@


1.18
log
@switch to $state->usage
@
text
@d4 1
a4 1
# $OpenBSD: dpb3,v 1.17 2010/06/07 15:27:52 espie Exp $
d98 19
a116 10
try {
getopts('acersuUh:xA:f:j:m:P:b:L:S:t:T:', {
	    P => sub {
		my $file = shift;
		open my $fh, '<', $file or die "Can't open $file\n";
		my $_;
		while (<$fh>) {
			chomp;
			next if m/^\#/;
			unshift @@ARGV, $_;
d118 2
a119 12
	    },
	    b => sub {
	    	push(@@build_files, shift);
	    },
	    S => sub {
	    	parse_size_file(shift, $heuristics);
	    }
	}
	);
} catchall {
	$ui->usage($_);
};
@


1.17
log
@reorg a bit to always pass logger to init_cores, and always print out
directory signatures
@
text
@d4 1
a4 1
# $OpenBSD$
d39 1
d95 2
a96 1
set_usage("dpb3 [-acersuUx] [-A arch] [-j N] [-P plist] [-h hosts] [-L logdir]",
d119 1
a119 1
	Usage($_);
d140 1
a140 1
		Usage("Invalid pkgpath: $arg");
d158 1
a158 1
	Usage("Can't use -j if -A arch is not local architecture");
d162 1
a162 1
	Usage("-j takes a numerical argument");
@


1.16
log
@save dump in a file instead of stdout
@
text
@d4 1
a4 1
# $OpenBSD: dpb3,v 1.15 2010/05/18 15:56:52 sthen Exp $
d184 1
@


1.15
log
@Reformat usage line to fit 80 columns. ok espie@@
@
text
@d4 1
a4 1
# $OpenBSD: dpb3,v 1.14 2010/05/04 09:45:41 espie Exp $
d270 1
a270 1
$engine->dump_category('tobuild');
@


1.14
log
@whitespace
@
text
@d4 1
a4 1
# $OpenBSD$
d94 2
a95 2
set_usage("dpb3 [-acersuUx] [-A arch] [-j N] [-P plist] [-h hosts] [-L logdir] [-b log] ",
	"[-t ctimeout] [-T dtimeout] [-m threshold] [path ...]");
@


1.13
log
@whitespace
@
text
@@


1.12
log
@move the 'grabbing sublist' code to a Grabber object, that we'll be able to
use later on from the engine.
@
text
@d48 1
a48 1
our ($opt_t, $opt_e, $opt_T, $opt_c, $opt_h, $opt_A, $opt_j, $opt_a, 
d145 1
a145 1
my ($ports, $repo, $localarch, $distdir) = DPB::Vars->get($make, 
d185 1
a185 1
    $opt_c, $opt_s, $opt_u, $opt_U, $fullrepo, $logger, $ports, $make, 
d190 1
a190 1
my $reporter = DPB::Reporter->new($opt_x, $heuristics, "DPB::Core", 
@


1.11
log
@fix startup
@
text
@d43 1
a196 1
my $loglist = DPB::Util->make_hot($logger->open("vars"));
d223 1
d226 2
a227 36
sub finish
{
	my $h = shift;
	for my $v (values %$h) {
		$engine->new_path($v);
	}
	handle_non_waiting_jobs(1);
}

sub grab_subdirs
{
	my $list = shift;
	DPB::Vars->grab_list($core, $ports, $make, $list, $loglist, $dpb,
	    sub {
		finish(shift);
	});
}

sub complete_subdirs
{
	# more passes if necessary
	while ($keep_going) {
		my @@subdirlist = ();
		for my $v (DPB::PkgPath->seen) {
			next if defined $v->{info};
			if (defined $v->{tried}) {
				$engine->add_fatal($v);
			}
			$v->add_to_subdirlist(\@@subdirlist);
			$v->{tried} = 1;
		}
		last if @@subdirlist == 0;

		grab_subdirs(\@@subdirlist);
	}
}
d230 1
a230 1
	grab_subdirs(\@@subdirlist);
d233 1
a233 1
complete_subdirs();
d236 1
a236 1
	grab_subdirs(undef);
d240 1
a240 1
complete_subdirs();
a246 1
close($loglist);
@


1.10
log
@add update support, with rather violent options for now
@
text
@d172 3
a174 2
$opt_j //= 0;
DPB::Core::Factory->new('localhost', {jobs => $opt_j});
@


1.9
log
@repair -j
@
text
@d48 1
a48 1
    $opt_r, $opt_s,
d93 1
a93 1
set_usage("dpb3 [-acersx] [-A arch] [-j N] [-P plist] [-h hosts] [-L logdir] [-b log] ",
d96 1
a96 1
getopts('acersh:xA:f:j:m:P:b:L:S:t:T:', {
d183 2
a184 1
    $opt_c, $opt_s, $fullrepo, $logger, $ports, $make, $heuristics);
@


1.8
log
@changes that I worked on after lock.
- avoid logging incomplete builds.
- put stuff in more sane directories
- avoid exiting early
- create unique machine objects and use them
- allow for a script at init/auto ncpu determination
- global build size in /tmp for a given host.
- better terminal handling.
@
text
@d165 5
a169 3
} else {
	$opt_j //= `sysctl -n hw.ncpu`;
	chomp($opt_j);
d173 1
a173 3
for (1 .. $opt_j) {
	DPB::Core::Factory->new('localhost');
}
@


1.7
log
@slightly more evolved: run du twice,to get build size vs. fake size.
Yep, I should be able to use this information later on.
@
text
@d83 1
a83 1
		$sz =~ s/!$//;
d91 1
a91 1
my $parsed = 0;
d108 1
a108 2
	    	parse_build_file(shift, $heuristics, "DPB::Job::Port");
		$parsed = 1;
a121 3
if ($parsed) {
	$heuristics->finished_parsing;
}
d148 1
a148 2
$opt_A //= '';
my $logdir = $opt_L // $ENV{LOGDIR} // "$ports/logs/$opt_A";
d164 1
a164 1
	DPB::Core->parse_hosts_file($opt_h, $arch, $opt_t, $logger);
d175 7
d187 2
a188 1
my $reporter = DPB::Reporter->new($opt_x, "DPB::Core", "DPB::Vars", $engine);
d289 4
a292 1
		last;
@


1.6
log
@log signature errors
move the logs/locks yet again: those are dpb logs, so they belong in
logs dir (note the s). Use one single option (-L) to move both.
remove old -t mode, use -t/-T for ssh/display timeouts
Change the "mem" option to "parse size file", dependent on show-size.
@
text
@d59 4
a62 1
		my ($pkgpath, $sz) = split(/\s+/, $_);
@


1.5
log
@add computation of workdir size on -s (assumes a patch to bsd.port.mk
that's not yet there)
@
text
@d52 15
d90 2
a91 2
set_usage("dpb3 [-acerstx] [-A arch] [-j N] [-P plist] [-h hosts] [-L lockdir] [-b log] ",
	"[-T timeout] [-m threshold] [path ...]");
d93 1
a93 1
getopts('acersh:txA:f:j:m:P:b:L:T:', {
d108 3
a110 1

d150 2
a151 2
my $logdir = $ENV{LOGDIR} || "$ports/log/$opt_A";
my $lockdir = $opt_L // "$ports/locks/$opt_A";
d164 1
a164 4
my $fullrepo = $opt_t ? "$repo/$arch/test" : "$repo/$arch/all";
if ($opt_t) {
	$logdir = "$logdir/test";
}
d166 1
a166 1
	DPB::Core->parse_hosts_file($opt_h, $arch);
d177 1
a177 1
my $builder = ($opt_t ? "DPB::PortBuilder::Test" : "DPB::PortBuilder")->new(
@


1.4
log
@set random behavior after we parse the option, so this is actually more
random... problem noticed by naddy@@
@
text
@d48 1
a48 1
    $opt_r,
d75 1
a75 1
set_usage("dpb3 [-acertx] [-A arch] [-j N] [-P plist] [-h hosts] [-L lockdir] [-b log] ",
d78 1
a78 1
getopts('acerh:txA:f:j:m:P:b:L:T:', {
d128 2
a129 2
my ($ports, $repo, $localarch, $distdir) = DPB::Vars->get($make, "PORTSDIR", 
    "PACKAGE_REPOSITORY", "MACHINE_ARCH", "DISTDIR");
d164 1
a164 1
    $opt_c, $fullrepo, $logger, $ports, $make, $heuristics);
@


1.3
log
@do something sensible if run without any options
@
text
@d74 1
a74 1
my $heuristics = DPB::Heuristics->new($opt_r);
d100 3
@


1.2
log
@being clueless shouldn't fork-bomb.
featuring tedu@@ as crash-test dummy ;-)
@
text
@d109 2
a110 2
if (@@ARGV == 0 && !$opt_a) {
	Usage("Need at least one pkgpath to work with");
d151 2
a152 1
	$opt_j //= 1;
@


1.1
log
@work-in-progress: new distributed ports builder.
will replace old dpb once we're satisfied it works.
some features:
- no more waiting, starts building right away, the dependencies discovery
process is just another job,
- monitor display that makes it easy to know when jobs get stuck, or machines
get down.
- loads of logs,
- locks that stay around in case of error, and that you can remove when
the error has been fixed (dpb picks it up),
- smart choice of which package to build,
- can take into account previous build times,
- builds on machines of differing speed, offloading "lighter" jobs to slower
boxes.

(again, ports is still locked for most people)
@
text
@d117 3
@

