head	1.123;
access;
symbols
	OPENBSD_6_2:1.123.0.2
	OPENBSD_6_2_BASE:1.123
	OPENBSD_6_1:1.120.0.2
	OPENBSD_6_1_BASE:1.120
	OPENBSD_6_0:1.118.0.2
	OPENBSD_6_0_BASE:1.118
	OPENBSD_5_9:1.115.0.2
	OPENBSD_5_9_BASE:1.115
	OPENBSD_5_8:1.112.0.4
	OPENBSD_5_8_BASE:1.112
	OPENBSD_5_7:1.97.0.4
	OPENBSD_5_7_BASE:1.97
	OPENBSD_5_6:1.97.0.2
	OPENBSD_5_6_BASE:1.97
	OPENBSD_5_5:1.95.0.2
	OPENBSD_5_5_BASE:1.95
	OPENBSD_5_4:1.84.0.2
	OPENBSD_5_4_BASE:1.84
	OPENBSD_5_3:1.78.0.2
	OPENBSD_5_3_BASE:1.78
	OPENBSD_5_2:1.40.0.2
	OPENBSD_5_2_BASE:1.40
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.2
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10;
locks; strict;
comment	@.\" @;


1.123
date	2017.06.25.18.30.38;	author schwarze;	state Exp;
branches;
next	1.122;
commitid	AMwEGPrDKjgXfV9E;

1.122
date	2017.06.19.10.22.05;	author espie;	state Exp;
branches;
next	1.121;
commitid	gPKqEjy1E0BDUzJx;

1.121
date	2017.05.07.14.50.14;	author espie;	state Exp;
branches;
next	1.120;
commitid	3tOpYg9oIzzqPfC5;

1.120
date	2016.09.18.22.09.12;	author schwarze;	state Exp;
branches;
next	1.119;
commitid	z7FOLvrGDsUYj9Tl;

1.119
date	2016.08.30.14.00.46;	author espie;	state Exp;
branches;
next	1.118;
commitid	LeCEa9D7YOgOYpig;

1.118
date	2016.05.18.13.49.32;	author espie;	state Exp;
branches;
next	1.117;
commitid	ZIiAjFwE63UkzAwd;

1.117
date	2016.05.03.05.01.25;	author espie;	state Exp;
branches;
next	1.116;
commitid	hGu8IWvJKMB5itHy;

1.116
date	2016.04.18.20.36.51;	author naddy;	state Exp;
branches;
next	1.115;
commitid	waLv4q1RPe59Ijdo;

1.115
date	2015.10.30.08.39.31;	author espie;	state Exp;
branches;
next	1.114;
commitid	GjpmweISRkrvozEa;

1.114
date	2015.10.25.09.05.20;	author espie;	state Exp;
branches;
next	1.113;
commitid	OAlkP1KOlgpRjNvf;

1.113
date	2015.08.25.22.40.56;	author espie;	state Exp;
branches;
next	1.112;
commitid	uhvAFVmlNEUyGxnt;

1.112
date	2015.07.23.08.05.18;	author bentley;	state Exp;
branches;
next	1.111;
commitid	WVYnuTKBRUT3O5WP;

1.111
date	2015.07.18.12.57.24;	author espie;	state Exp;
branches;
next	1.110;
commitid	UL1usI9SmZ0uDSA3;

1.110
date	2015.07.15.15.41.41;	author espie;	state Exp;
branches;
next	1.109;
commitid	hadonbZHJmK5W4zm;

1.109
date	2015.07.15.15.03.06;	author espie;	state Exp;
branches;
next	1.108;
commitid	TK5PnBOUI5qrg8ql;

1.108
date	2015.07.05.10.53.00;	author espie;	state Exp;
branches;
next	1.107;
commitid	hTW71euuWyLrhoQm;

1.107
date	2015.06.16.17.04.47;	author espie;	state Exp;
branches;
next	1.106;
commitid	paqaJUKpjx6Mt287;

1.106
date	2015.05.13.09.12.39;	author espie;	state Exp;
branches;
next	1.105;
commitid	jjg6eIipjdhVcrn1;

1.105
date	2015.05.12.09.55.52;	author sthen;	state Exp;
branches;
next	1.104;
commitid	yxpwhlNk4MdmmpXx;

1.104
date	2015.05.08.12.47.25;	author espie;	state Exp;
branches;
next	1.103;
commitid	5NTWbbm7ACxydadp;

1.103
date	2015.05.05.13.38.19;	author espie;	state Exp;
branches;
next	1.102;
commitid	l390st41WBVsXUmj;

1.102
date	2015.05.02.22.26.00;	author landry;	state Exp;
branches;
next	1.101;
commitid	2IczDkX59aKaPOnU;

1.101
date	2015.05.01.19.41.42;	author espie;	state Exp;
branches;
next	1.100;
commitid	0CH9LRqjGSizmrDa;

1.100
date	2015.05.01.18.29.02;	author espie;	state Exp;
branches;
next	1.99;
commitid	24b6hK6zk6AA89qw;

1.99
date	2015.05.01.18.07.31;	author espie;	state Exp;
branches;
next	1.98;
commitid	dQH8bAroGCdXZZ9z;

1.98
date	2015.05.01.17.52.00;	author espie;	state Exp;
branches;
next	1.97;
commitid	VqnAaDJyff2TFacv;

1.97
date	2014.06.29.19.04.40;	author espie;	state Exp;
branches;
next	1.96;
commitid	pgIPQHAwqJU1bkRQ;

1.96
date	2014.03.23.12.24.14;	author nigel;	state Exp;
branches;
next	1.95;

1.95
date	2013.10.06.13.33.26;	author espie;	state Exp;
branches;
next	1.94;

1.94
date	2013.10.06.10.58.20;	author espie;	state Exp;
branches;
next	1.93;

1.93
date	2013.10.06.10.54.53;	author espie;	state Exp;
branches;
next	1.92;

1.92
date	2013.10.06.10.54.02;	author espie;	state Exp;
branches;
next	1.91;

1.91
date	2013.10.06.10.50.04;	author espie;	state Exp;
branches;
next	1.90;

1.90
date	2013.10.03.16.33.08;	author espie;	state Exp;
branches;
next	1.89;

1.89
date	2013.10.03.16.12.05;	author espie;	state Exp;
branches;
next	1.88;

1.88
date	2013.09.24.09.46.44;	author espie;	state Exp;
branches;
next	1.87;

1.87
date	2013.09.21.14.47.00;	author espie;	state Exp;
branches;
next	1.86;

1.86
date	2013.09.21.09.12.39;	author espie;	state Exp;
branches;
next	1.85;

1.85
date	2013.09.10.17.52.11;	author espie;	state Exp;
branches;
next	1.84;

1.84
date	2013.07.18.05.40.31;	author espie;	state Exp;
branches;
next	1.83;

1.83
date	2013.07.05.13.49.50;	author pirofti;	state Exp;
branches;
next	1.82;

1.82
date	2013.06.24.20.30.56;	author espie;	state Exp;
branches;
next	1.81;

1.81
date	2013.06.21.10.10.58;	author espie;	state Exp;
branches;
next	1.80;

1.80
date	2013.06.04.08.59.50;	author espie;	state Exp;
branches;
next	1.79;

1.79
date	2013.04.30.10.22.36;	author espie;	state Exp;
branches;
next	1.78;

1.78
date	2013.02.04.11.35.27;	author espie;	state Exp;
branches;
next	1.77;

1.77
date	2013.02.03.22.27.28;	author espie;	state Exp;
branches;
next	1.76;

1.76
date	2013.02.03.13.38.13;	author espie;	state Exp;
branches;
next	1.75;

1.75
date	2013.02.02.10.38.26;	author espie;	state Exp;
branches;
next	1.74;

1.74
date	2013.01.29.16.19.41;	author espie;	state Exp;
branches;
next	1.73;

1.73
date	2013.01.29.16.14.44;	author espie;	state Exp;
branches;
next	1.72;

1.72
date	2013.01.28.23.07.36;	author nigel;	state Exp;
branches;
next	1.71;

1.71
date	2013.01.28.13.48.31;	author espie;	state Exp;
branches;
next	1.70;

1.70
date	2013.01.28.12.24.51;	author espie;	state Exp;
branches;
next	1.69;

1.69
date	2013.01.28.10.24.24;	author espie;	state Exp;
branches;
next	1.68;

1.68
date	2013.01.27.18.43.11;	author espie;	state Exp;
branches;
next	1.67;

1.67
date	2013.01.21.21.33.32;	author espie;	state Exp;
branches;
next	1.66;

1.66
date	2013.01.21.14.59.45;	author espie;	state Exp;
branches;
next	1.65;

1.65
date	2013.01.21.12.32.51;	author espie;	state Exp;
branches;
next	1.64;

1.64
date	2013.01.21.12.07.01;	author espie;	state Exp;
branches;
next	1.63;

1.63
date	2013.01.21.10.42.49;	author espie;	state Exp;
branches;
next	1.62;

1.62
date	2013.01.20.21.29.55;	author espie;	state Exp;
branches;
next	1.61;

1.61
date	2013.01.07.11.05.17;	author espie;	state Exp;
branches;
next	1.60;

1.60
date	2013.01.07.11.04.25;	author espie;	state Exp;
branches;
next	1.59;

1.59
date	2013.01.06.18.21.52;	author espie;	state Exp;
branches;
next	1.58;

1.58
date	2013.01.05.18.26.31;	author espie;	state Exp;
branches;
next	1.57;

1.57
date	2013.01.05.13.34.28;	author espie;	state Exp;
branches;
next	1.56;

1.56
date	2013.01.05.07.01.44;	author espie;	state Exp;
branches;
next	1.55;

1.55
date	2013.01.04.12.56.26;	author espie;	state Exp;
branches;
next	1.54;

1.54
date	2013.01.04.12.16.51;	author espie;	state Exp;
branches;
next	1.53;

1.53
date	2013.01.03.22.52.01;	author espie;	state Exp;
branches;
next	1.52;

1.52
date	2012.12.31.09.50.55;	author espie;	state Exp;
branches;
next	1.51;

1.51
date	2012.12.31.08.29.31;	author espie;	state Exp;
branches;
next	1.50;

1.50
date	2012.12.24.17.24.46;	author espie;	state Exp;
branches;
next	1.49;

1.49
date	2012.11.06.08.26.29;	author espie;	state Exp;
branches;
next	1.48;

1.48
date	2012.10.27.11.17.56;	author espie;	state Exp;
branches;
next	1.47;

1.47
date	2012.10.26.14.43.17;	author rpe;	state Exp;
branches;
next	1.46;

1.46
date	2012.10.13.09.10.07;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2012.10.12.20.27.16;	author espie;	state Exp;
branches;
next	1.44;

1.44
date	2012.10.11.07.40.30;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2012.10.09.20.35.57;	author espie;	state Exp;
branches;
next	1.42;

1.42
date	2012.10.08.12.41.03;	author espie;	state Exp;
branches;
next	1.41;

1.41
date	2012.08.31.17.27.50;	author espie;	state Exp;
branches;
next	1.40;

1.40
date	2012.07.02.10.31.08;	author espie;	state Exp;
branches;
next	1.39;

1.39
date	2012.04.10.17.00.29;	author espie;	state Exp;
branches;
next	1.38;

1.38
date	2012.04.08.10.20.42;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2012.03.09.21.18.40;	author espie;	state Exp;
branches;
next	1.36;

1.36
date	2012.03.09.15.16.38;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2012.03.02.19.35.09;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2012.02.27.20.42.39;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2012.02.27.14.51.37;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2012.02.17.07.42.20;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2012.01.30.15.15.24;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2012.01.27.19.03.02;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.14.12.40.35;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2012.01.14.12.26.21;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.04.02.08.52;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2011.12.31.14.53.17;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2011.12.05.16.10.00;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2011.12.03.18.02.39;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2011.12.02.22.37.36;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2011.11.21.15.02.14;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2011.11.21.14.58.29;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2011.11.21.12.39.39;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.21.12.03.05;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.14.21.57.47;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2011.11.06.15.42.39;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.05.18.33.52;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.25.10.41.30;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.23.19.06.36;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2011.07.14.10.48.32;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2011.05.22.08.21.39;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.25.11.58.46;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.11.02.11.34.29;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.01.12.24.47;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.31.11.07.20;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.27.17.53.24;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.26.16.57.10;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.24.10.01.57;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.23.18.14.19;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.08.23.19.08.08;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.20.14.09.59;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.13.42.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.123
log
@Fix four issues found with mandoc -Tlint:
* missing blank before trailing delimiter
* typo in the name of the AUTHORS section
* missing .An macro in the AUTHORS section
* section ordering
@
text
@.\"	$OpenBSD: dpb.1,v 1.122 2017/06/19 10:22:05 espie Exp $
.\"
.\" Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: June 19 2017 $
.Dt DPB 1
.Os
.Sh NAME
.Nm dpb
.Nd distributed ports builder
.Sh SYNOPSIS
.Nm dpb
.Bk -words
.Op Fl acemqrRsuUvx
.Op Fl A Ar arch
.Op Fl b Ar logfile
.Op Fl B Ar chroot
.Op Fl C Ar pathlist
.Op Fl D Ar PARAM Ns = Ns Ar value
.Op Fl f Ar m
.Op Fl F Ar m
.Op Fl h Ar hosts
.Op Fl I Ar pathlist
.Op Fl J Ar p
.Op Fl j Ar n
.Op Fl L Ar logdir
.Op Fl l Ar lockdir
.Op Fl M Ar threshold
.Op Fl P Ar pathlist
.Op Fl p Ar parallel
.Op Fl S Ar logfile
.Op Fl X Ar pathlist
.Op Ar pathlist ...
.Ek
.Sh DESCRIPTION
.Nm
is used to build ports on a cluster of machines, or on a single machine
with several cores.
.Nm
walks the ports tree to figure out dependencies, and starts building ports
as soon as it can.
.Pp
.Nm
will run with sensible defaults if used without options.
Note, however, that it will produce logs, lock files, packages, and package
installations.
.Pp
If run as non-root,
.Nm
will warn.
The preferred way is to run it as root (and preferably under a chroot).
.Nm
will then change its identity to different users as needed.
See
.Sq THE SECURITY MODEL OF DPB
for details.
.Pp
.Nm
can be restricted to a subset of the tree by giving it
.Ar pathlist ...
to build as parameters.
.Pp
A
.Ar pathlist
is either a
.Xr pkgpath 7
to build, or a filename that contains pkgpaths (one per line).
.Ar pathlist
parameters can also take the form
.Li filename*scale
in order to multiply the weights of all
.Xr pkgpath 7
in a file by a given
.Ar scale ,
or
.Li pkgpath=value ,
in order to set the weight of a given
.Xr pkgpath 7
to a specific value.
.Pp
.Nm
supports
.Sq hot-fixes :
if a particular port errors out, it is possible to fix the problem, remove
the corresponding lockfile, and
.Nm
will pick it up without needing to be stopped and restarted.
.Pp
In order to build on a cluster, the ports tree itself should be identical
on each machine (shared through NFS or copied at start).
.Pp
Some directories must be shared:
.Ev PACKAGE_REPOSITORY ,
.Ev DISTDIR ,
and
.Ev PLIST_REPOSITORY .
The
.Ev WRKOBJDIR
and
.Ev LOCKDIR
should be local to each machine, and on a high-speed partition.
.Pp
Also note that
.Nm Ns 's
logs and locks are managed by the main
.Nm
process, which runs locally, and hence those directories do not need to
be shared on the cluster.
.Pp
Some log files ("rolling logs") are kept from one run to the run and
stored under
.Pa ${DISTDIR}/build-stats .
.Pp
Option
.Fl h Ar file
is used to specify hosts to use, where
.Ar file
may contain lots of information,
but can be as simple as a list of hosts to use, one host per line
(however, it is recommended to also include a
.Ar STARTUP
script).
.Pp
Most filenames will go through some control sequence expansions.
For instance, the default logdir location can be specified as
.Pa %p/logs/%a .
The following sequences are recognized:
.Bl -tag -offset aaaa -width %aa
.It Cm %a
architecture being used.
.It Cm %d
date at start of
.Nm ,
GMtime, formatted as yyyy-mm-dd@@hh:mm:ss.
.It Cm %f
fetch distfiles location (DISTDIR).
.It Cm %h
hostname running
.Nm .
.It Cm %L
logdir location.
.It Cm %p
portsdir location.
.It Cm %t
timestamp (number of seconds since January 1 1970) at start of
.Nm .
.El
.Pp
Options are as follows:
.Bl -tag -width pkgpathlong
.It Fl A Ar arch
Build packages for given architecture, selecting relevant hosts from the
cluster.
By default, the current host's architecture will be used.
.It Fl a
Walk the whole tree and builds all packages (default if no
.Ar pathlist
is given).
.It Fl b Ar logfile
Explicitly prime the heuristics module with a previous build log,
so that packages that take a long time to build will happen earlier.
The rolling log under
.Pa %f/build-stats/%a
is automatically used.
.It Fl B Ar chroot
chroot to
.Ar chroot
before building.
See
.Xr proot 1
for preparing such an environment.
.It Fl c
Clean port working directory and log before each build.
.It Fl C Ar pathlist
Don't clean port working directories after build.
Only use simple
.Xr pkgpath 7
in the list,
as this does not take subpackages and flavors into account.
.It Fl D Ar PARAM Ns = Ns Ar value
Set defined parameter to value.
Known parameters are as follows:
.Bl -tag -width DISP
.It Ar ALWAYS_CLEAN
Set to 1 if
.Nm
should clean work directories even if the port errored out.
.It Ar BUILD_USER
Default value for
.Ar build_user
if you want to specify it on the command line, and want to ensure even
the small "discover PORTSDIR" activity at the beginning of
.Nm
is not run as root.
.It Ar CDROM_ONLY
Don't fetch distfiles that are not allowed for cdrom.
.It Ar COLOR
Set to 1 to have the normal display in color.
.It Ar CONNECTION_TIMEOUT
Connection timeout for ssh.
Defaults to 60 seconds.
.It Ar DISPLAY_TIMEOUT
Display timeout (in seconds) while waiting for jobs to finish, so that the
display is updated even if jobs didn't finish.
Defaults to 10 seconds.
.It Ar DONT_BUILD_ONCE
By default,
.Nm
will use the
.Ev BUILD_ONCE
optimization
.Po
see
.Xr bsd.port.mk 5
.Pc
if run with
.Fl a :
pseudo-flavors that disable subpackages and are not necessary for bootstrap
will be disabled, so that the same port is built once, as far as possible.
This flag disables that optimization, which might be desireable if you want
to build a small subset of packages which would pull in the kitchen sink
otherwise.
.It Ar DONT_CLEAN_LOCKS
By default,
.Nm
will clean old locks from dpb running on the same host that no longer exist,
provided they didn't end in error.
This is usually the right thing to do after a crash, or after killing dpb
abruptly.
Sometimes, one may want manual control over which locks to remove.
.It Ar FETCH_JOBS
Alternate way to specify the number of fetch jobs.
.It Ar FETCH_USER
User for all fetch activities if possible
.Po defaults to
.Ar _pfetch
.Pc .
.It Ar FETCH_TIMEOUT
Timeout (in seconds) after which fetches that don't show
any progress will be killed.
.It Ar FTP_ONLY
Don't fetch distfiles that are not allowed for ftp.
.It Ar HISTORY_ONLY
Don't fetch or build anything.
Only run
.Nm
to figure out old distfiles and update
.Pa %f/history .
.It Ar LOGDIR
Alternate way to specify the logging directory.
.It Ar LOG_USER
User
for all log files if possible
.Po defaults to
.Ar build_user
.Pc .
.It Ar LOCKDIR
Alternate way to specify the locking directory.
.It Ar MIRROR
Applicable to fetch modes.
If 0, will only fetch normal
.Ev DISTFILES
.Po
default for
.Nm Fl f
.Pc .
If 1, will also fetch extra
.Ev SUPDISTFILES
.Po
default for
.Nm Fl F
.Pc .
.It Ar NO_CHECKSUM
Do not run
.Ar checksum
again for files already fetched.
.It Ar NO_CURSOR
Make the terminal cursor invisible if possible.
Avoids flickering on slow graphics cards.
.It Ar NO_BUILD_STATS
Disable reading/saving of default build stats under
.Pa ${DISTDIR}/build-stats/${ARCH} .
.It Ar NO_HISTORY
Do not update the distfiles history.
For instance, if
.Nm
is run a second time after a problem during the first run.
.It Ar PORT_USER
User that can write to the ports tree.
Not really used for anything yet.
.It Ar RECORD
Define a file which will save all terminal output.
Mostly useful for presentations, as a way to save
.Nm dpb
output and replay it later at a faster rate.
Defaults to
.Pa %L/term-report.log ,
can be set to nothing to disable.
.It Ar STARTUP
Define a start-up script on the command-line, override any host file contents.
.It Ar STUCK_TIMEOUT
Timeout (in seconds * speed factor) after which tasks that don't show
any progress will be killed.
This can be instead set on a per-core basis as the
.Sq stuck
property.
Note that this will always be divided by the core's speed factor.
.It Ar SYSLOG
Make
.Nm
call
.Xr syslog 3
on every task start/end while creating packages.
This does produce lots of messages, it is intended to route the logging
on another machine, while tracking down panics and other hangs.
.It Ar WANTSIZE
Alternate way to specify
.Fl s .
.El
.It Fl e
The listing job is extra and won't be given back to the pool when it's
finished.
.It Fl f Ar m
Create
.Ar m
jobs for fetching files.
Those are separate from the build jobs, since they don't consume cpu, and they
run on the localhost.
Defaults to 2.
Can be set to 0 to bypass fetching jobs entirely,
and reduce
.Nm
memory footprint by a lot.
.It Fl F Ar m
Fetch-only mode, for mirroring hosts.
Do not build any package but fetch everything, disregarding
.Ev BROKEN
and
.Ev ONLY_FOR_ARCHS
information.
Create
.Ar m
localhost jobs for fetching files.
.It Fl h Ar hosts
File with hosts to use for building.
One host per line, plus properties, such as:
.Bd -literal -offset indent
espie@@aeryn jobs=4 arch=i386
.Ed
.Pp
Lines starting with a known variable name such as
.Bd -literal -offset indent
STARTUP=path
.Ed
or
.Bd -literal -offset indent
FETCH_JOBS=5
.Ed
can also be set inside a configuration file, to reduce the number of
options you must pass on the command line.
.Pp
The special hostname
.Ar DEFAULT
can be used to preset defaults.
It should be used at the start of the file.
.Pp
Use
.Ar localhost
to specify the local machine.
.Nm
will special-case it and not use
.Xr ssh 1
to connect.
.Pp
Properties are as follows:
.Bl -tag -width memory=150
.It arch=value
Architecture of the concerned host.
(there should be a startup task to check consistency, but
currently this has to be set manually on heterogeneous networks.)
.It always_clean=n
Set to 0 or 1 on per-host basis.
See
.Ar ALWAYS_CLEAN
parameter.
.It build_user=user
Use
.Ar user
for non root jobs if possible (defaults to
.Xr whoami 1
value).
.It chroot=dir
Chroot to
.Ar dir
before building.
.It jobs=n
Number of jobs to run on that host, defaults to hw.ncpu.
.It junk=n
Junk unused packages each n steps.
See
.Fl J
option.
.It memory=thr
Build everything below that wrkdir threshold with
.Ev USE_MFS Ns = Ns Sq Yes ,
assuming the ports tree has been configured so that
.Ev WRKOBJDIR_MFS
points to a memory filesystem.
.Ar thr
is the sum, in KBytes, of ports that will be allowed to build in memory.
.Nm
understands suffixes, such as
.Fl M Ar 2G
or
.Fl M Ar 500M .
.Pp
Note that you should always allow for some margin, as
.Nm
makes its decision based on the size information collected during previous
builds, so in cases of significant updates, the work directory size will
usually grow.
.It nochecksum=0/1
Defaults to 1.
During the junk stage, run
.Xr pkg_delete 1
with the
.Fl q
(no checksum) option.
.It parallel=p
Run big ports on several cores.
See
.Fl p
option.
.It repair=0/1
Defaults to 1.
Run
.Xr pkg_add 1
with the repair option.
This is useful on some bulk machines which tend to crash a lot, leaving
.Pa /var/db/pkg
in a weird state.
.It sf=n
Speed factor.
An estimate of that machine's speed with that number of jobs
compared to other machines in the same network.
Works better with small values, in the range of 1..50.
The machine (or machines) with the highest speed factor will
get access to all jobs, whereas other machines will be clamped
to stuff which does not take too long.
Requires previous build information to be effective.
Defaults to 1.
.It small=s
Small threshold (in seconds * sf):
ports known to build under that duration are deemed to be small, so
.Nm
won't bother calling fine-grained steps for patch/configure/fake.
It will go straight to build and package instead.
Defaults to 120 seconds.
.It squiggles=n
Number of squiggles on this host (see
.Sq the squiggle heuristics
below).
Defaults to 1 squiggle for hosts with 4 jobs or more, 0.7 for hosts with more than 1 job,
0 for single job hosts.
.It stuck=s
Stuck timeout (in seconds * sf) after which tasks which show no progress
will get killed.
.It timeout=s
Defines a specific connection timeout for ssh to that host.
.El
.Pp
There are no fine-grained options to control
.Xr ssh 1
options, as those can be specified through virtual host declarations in
.Xr ssh_config 5 .
.It Fl I Ar pathlist
List of
.Xr pkgpath 7
to install, on the local box.
This will also add them to the list of things to build.
.It Fl J Ar p
Override value for the
.Dq junk
property.
Delete unneeded installed packages during the build.
Each
.Ar prepare
stage is followed by a
.Ar show-prepare-results
stage.
After every
.Ar p
new dependencies, it will be followed by a
.Ar junk
stage which uses
.Xr pkg_delete 1
with the
.Fl aXI
options to delete automatically installed packages that are currently
not needed.
.Pp
.Nm
keeps track of list of dependencies on a given host, by storing each
dependency list in the lockfile corresponding to the package being built.
.Pp
To avoid a race condition between the
.Ar depends
and
.Ar junk
stages,
.Nm
allows only one job on a given host to be in the
.Ar depends
\&...
.Ar junk
stages at one time, by using a per-host lock.
.Pp
Defaults to
.Ar 150 .
Can be disabled by setting to
.Ar 0 .
.Pp
Some ports, most notably cmake-based, have an annoying dependency handling
bug: they compute their makefile dependencies based on all include files
present, not just the ones that are actually enabled.
Those ports' build may be broken by a
.Ar junk
phase that removes some unused includes that were added as makefile
prerequisites.
Those ports should be annotated with
DPB_PROPERTIES = nojunk
until that bug is fixed:
while a port with the
.Sq nojunk
property is building,
.Ar junk
will be postponed.
.Pp
Those ports will be marked with a
.Sq \&!
in the display, to make it more obvious why junk seems to be ineffective.
.Pp
Note that the
.Sq nojunk
property is still active for ports in error, in the belief that trivial fixes
can be made that will allow the port build to finish.
.It Fl j Ar n
Number of jobs to run on a single host (defaults to hw.ncpu).
.It Fl L Ar logdir
Choose a log directory.
.Po
Defaults to
.Pa %p/logs/%a
.Pc .
.It Fl l Ar lockdir
Choose a lock directory.
.Po
Defaults to
.Pa %L/locks
.Pc .
Override to keep local, as locks don't really like NFS.
.It Fl M Ar threshold
Build ports below the memory threshold under a memory
filesystem, as configured through
.Ev WRKOBJDIR_MFS
.Po
see
.Xr bsd.port.mk 5
.Pc .
.Ar threshold
is the sum, in KBytes, of ports allowed to build there.
.It Fl m
Force tty-style reporting.
.It Fl P Ar pathlist
Read list of
.Xr pkgpath 7
from file.
.It Fl p Ar parallel
Override value for the
.Dq parallel
property.
.Pp
Run big jobs on several cores on the same host, by using
MAKE_JOBS=k .
.Pp
Once such a job has started,
.Nm
will not start new jobs on the same host until the big job has
stolen enough cores from other finishing jobs.
.Pp
Only big ports which are safe for parallel building (annotated with
DPB_PROPERTIES = parallel in their Makefile) will be affected.
.Pp
It is advisable to set k to an integral fraction of the
number of cores available on a given host.
.Ar parameter
can be an integer, or of the form
.Sq /n ,
in which case,
.Nm
will set k to a fraction of the total number of jobs
on the machine, but never below 2.
.Pp
Defaults to
.Sq /2 .
.It Fl q
Don't quit while errors/locks are around.
.It Fl r
Random build order.
Disregard any kind of smart heuristics.
Useful to try to find missing build dependencies.
.It Fl R
Rebuild existing packages based on discrepancies between the package
signature and what the port says it should be.
Concretely, use to run a partial bulk build after some library change.
.Pp
Note that
.Fl R
won't always work, as rebuilding a package when another version is already
installed is not supported.
Building in a chroot is strongly recommended.
.It Fl S Ar logfile
Read
.Ar logfile
as an initial workdir size log.
.It Fl s
Compute workdir sizes before cleaning up, and stash them in log file
.Pa %L/size.log .
Also maintain a rolling log of build sizes under
.Pa %f/build-stats/%a-size .
In order to save time,
.Nm
will actually not always compute new sizes for known directories, but mostly
for new ones, or when the package name changes.
.It Fl u
Update existing packages during dependency solving.
Can be used to run a bulk-build on a machine with installed packages,
but might break a bit, since some packages only build on a clean machine
right now.
.It Fl U
Insist on updating existing packages during dependency solving,
even if the new package apparently didn't change.
.It Fl x
No tty report, only report really important things, like hosts going down
and coming back up, build errors, or builds not progressing.
.It Fl X Ar pathlist
Read a list of
.Xr pkgpath 7
from file, and pass them along in the junk phase:
those are packages that should stay on the machine if they've been
installed by a dependency.
Can be used to avoid endlessly removing/reinstalling the most common
packages, e.g.,
.Pa devel/gmake .
.El
.Pp
.Nm
figures out in which order to build things on the fly, and constantly
displays information relative to what's currently building.
There's a list of what is currently running, one line per job.
Those jobs are ordered in strict chronological order, which means that
long running builds will tend to percolate to the top of the list.
Normal jobs look like this:
.Bd -literal -offset indent
www/mozilla-firefox(build) [9452] 41% unchanged for 92 seconds
.Ed
.Pp
This contains:
.Bl -dash
.It
an optional
.Sq ~
squiggle marker (see below),
.It
the pkgpath being built,
.It
the step currently being run,
.It
an optional
.Sq \&!
for ports with the
.Sq nojunk
property.
.It
an optional
.Sq +
for ports built in memory.
.It
the pid running that task (note that this is always a pid on the host
running dpb: for distributed builds, it will be an
.Xr ssh 1
to another machine),
.It
the current size of the log file (displayed as a percentage if previous
build statistics are available).
.It
and a possible notice that things might be stuck when
the log file doesn't change for long periods.
.El
.Pp
And fetch jobs look like this:
.Bd -literal -offset indent
<dist-3.0.tgz(#1) [4321] 25%
.Ed
.Pp
This contains:
.Bl -dash
.It
the file being fetched
.It
the number of the
.Ev MASTER_SITE
being tried
.It
the pid of the
.Xr ftp 1
process (note that fetch jobs are always local).
.It
a progress percentage.
.El
.Pp
This is followed by a host line, containing the name
of each host used by dpb.
Host names may be tagged with kde3 or kde4.
They are followed by a
.Sq `-'
for unresponsive hosts, and the pid of the ssh master
for distant hosts.
.Pp
This ends with a summary display:
.Bl -tag -width BB=
.It I=
number of built packages that can be installed.
.It B=
number of built packages, not yet known to be installable,
because of run depends that still need to be built.
.It Q=
number of packages in the queue, e.g., stuff that can be built now, assuming
we have a free slot.
.It T=
number of packages to build, where dependencies are not yet resolved.
.It F=
number of distfiles to fetch, when
.Fl f
is used.
.It !=
number of ignored packages.
Details in
.Pa engine.log .
.It L=
list of packages that cannot currently be built because of locks.
.It E=
list of packages in error, that cannot currently be built.
.It H=
list of packages that haven't shown up yet, usually due to nfs, but
watch out for revision bumps.
.El
.Pp
If those three lists are empty, they won't even show up.
Packages in errors may be followed by a
.Sq \&!
if they prevent junk from happening.
.Pp
Note that those numbers refer to pkgpaths known to
.Nm .
In general, those numbers will be slightly higher than the actual number
of packages being built, since several paths may lead to the same package.
.Pp
.Nm
uses some heuristics to try to maximise the queue as soon as possible.
There are also provisions for a feedback-directed build, where information from
previous builds can be used to try to build long-running jobs first.
.Pp
Similarly, fetches will use the continue option of
.Xr ftp 1 ,
since distfiles are checksummed after the fetch anyways.
.Ss THE SQUIGGLE HEURISTICS
However, on machines with lots of cores, the basic scheduling heuristics
yields a tail of very small jobs, where
.Nm
will mostly wait on
.Xr pkg_add 1
to solve dependencies.
Starting with
.Ox 5.5 ,
a new mechanism (squiggles) was introduced to counter-balance this effect:
big machines devote some of their cores to
.Sq squiggles ,
jobs that walk the queue in reverse, thus building smallest ports first.
As a result, small ports are built as a trickle alongside the largest ports,
thus offsetting the negative effect of the exponential queue for a large part.
.Pp
Note that
.Sq squiggles
can be a non-integral value, usually lower than 1, in which case they
represent the fraction of cores that should be affected to squiggles,
as decided randomly at the start of each build.
0.7 or 0.8 might be a good choice for dual core machines.
.Sh THE SECURITY MODEL OF DPB
When
.Nm
is run as root, it uses a privilege drop model instead of the
dangerous privilege elevation model of
.Xr doas 1 .
When run as root, by default,
.Ar _pbuild
is used as the build and log user, and
.Ar _pfetch
is used as the fetch user.
.Bl -bullet
.It
Start
.Nm
as root.
.It
.Nm
will drop privileges for every operation except
.Xr pkg_add 1 ,
.Xr pkg_delete 1
and the
.Ar STARTUP
script.
.It
For cluster builds,
provide an
.Xr ssh 1
connection to distant hosts from root as root.
.It
.Ar build_user
is used to build stuff locally or distantly (can be per-host), using:
.Li chroot -u build_user /build_root
(with
.Pa /build_root
=
.Pa /
if there is no actual chroot needed).
It must have read access to ${DISTDIR} and ${PORTSDIR}, and write
access to ${WRKOBJDIR}, ${PACKAGE_REPOSITORY}, and ${PLIST_REPOSITORY}.
It does not require network access.
.It
.Ar LOG_USER
is used to open all log files.
.Ar LOG_USER
only needs to exist locally.
It needs write access to the log directories, including
${DISTDIR}/build-stats.
It does not need network access.
.It
.Ar FETCH_USER
is used to fetch distfiles and handle corresponding log info.
It needs write access to ${DISTDIR}, and network access.
Thus,
.Xr ftp 1
does not happen as root.
.It
.Ar _dpb
is used as a fail-safe for any other activities that do not require any rights.
.It
.Nm
creates local directories as root, then gives them to the appropriate user.
.El
.Sh LOCKS AND ERRORS
.Nm
still uses the normal ports tree mechanism while building, which includes
.Ev LOCKDIR .
When starting up
.Nm
will normally detect stale locks from old dpb runs, and remove them.
If this does not happen, builds will stay stuck in their initial stage,
that is:
.Ar show-prepare-results , patch , build
depending on the port.
A telltale message
.Sq Awaiting lock ...
can be found in the corresponding logfile
.Pa paths/pkgpath.log
.Pp
In addition, when building a package,
.Nm
produces a lockfile in the locks directory, whose name is deduced from
the basic pkgpath with slashes replaced by dots.
This lockfile is filled with such info as the build start time or the host,
or the needed dependencies for this pkgpath.
.Pp
The lockfile will also contain the name of a parent pkgpath, for paths that
were discovered as dependencies.
This is particularly useful for bogus paths, where it would be hard to
know where the path came from otherwise.
.Pp
At the end of a successful build, these lockfiles are removed.
The lock will stay around in case of errors.
.Po
raw
value from
.Xr wait 2
.Pc ,
and the name of the next task in the build pipeline (with todo=<nothing>
in case of failure during clean-up).
Normal list of tasks is:
.Ar depends prepare fetch patch configure build fake package clean .
.Pp
At the end of each job,
.Nm
rechecks the locks directory for existing lockfiles.
If some locks have vanished,
it will put the corresponding paths back in the queue and attempt
another build.
.Pp
This eases manual repairs: if a package does not build, the user can look
at the log, go to the port directory, fix the problem, and then remove the lock.
.Nm
will pick up the ball and keep building without interruption.
.Pp
It is perfectly safe to run several
.Nm
in parallel on the same machine.
This is not optimal, since each
.Nm
ignores the others, and only uses the lock info to avoid the other's
current work, but it can be handy: in an emergency, one can start a second
.Nm
to obtain a specific package right now, in parallel with the original
.Nm .
.Pp
Note that
.Nm
is very careful not to run two builds from the same pkgpath at the
same time, even on different machines:
in some cases, MULTI_PACKAGES and FLAVOR combinations may lead to the
same package being built simultaneously, and since the package repository
is shared, this can easily lead to trouble.
.Pp
Handling of shared log files and history is also done very carefully by
systematically appending to files or using atomic mv operations.
.Pp
For obvious reasons, this won't work as well with masters running on distinct
machines sharing their logs through NFS.
.Ss BUILD CYCLES
There are some various interdependencies in package builds that can be hard
to trace in case something goes wrong.
Refer to
.Pa summary.log
to fix those specific issues.
.Sh AFFINITY
.Nm
now maintains a list of pkgpath-per-host that are currently building in the
.Pa affinity
directory of its log directory, along with building-in-memory status.
.Pp
That information is only wiped out when a given build finishes successfully.
.Pp
Otherwise
.Nm
will try to restart that build on the same host, which can be handy if you
interrupt
.Nm
while it is building a large port, or if you remove a lock after fixing a
problem.
.Sh TAGS FOR BUILDING KDE
Currently, kde3 and kde4 can't be built simultaneously.
Conflicting ports have been annotated with
DPB_PROPERTIES=tag:kde3 ,
DPB_PROPERTIES=tag:kde4
respectively.
.Pp
.Nm
now keeps track of those tags, and will postpone ports with the wrong
tag while a given host is used by the other tag.
.Pp
This heavily relies on the
.Ar junk
stage to clean-up hosts periodically,
and it can even forcibly provoke a
.Ar junk
stage even if junk=0.
.Pp
This
.Sq force-junk
stage is actually implemented as a pseudo path called
.Ar junk-proxy ,
which only does junk.
.Pp
In order for builds to proceed gracefully, machines should start
in a clean slate, without kde3 or kde4 installed.
.Pp
As a special-case, failing ports with a kde3 or kde4 tag will not
interfere with clean-up, so that hosts do not get locked down to
a specific tag.
This also means that their dependencies
may vanish before human intervention addresses the problem.
.Pp
This is supposed to be a temporary hack, as kde4 is large and
having official packages helps a great deal in debugging it.
.Sh SHUTTING DOWN GRACEFULLY
.Nm
periodically checks for a file named
.Pa stop
in its log directory.
If this file exists, then it won't start new jobs, and shutdown when
the current jobs are finished unless
.Fl q .
.Pp
.Nm
also checks for files named
.Pa stop-<hostname>
in its log directory.
If such a file exists, then it won't start new jobs on
the corresponding machine.
.Sh FILES
Apart from producing packages,
.Nm
may create temporary files as
.Pa ${FULLDISTDIR}/${DISTFILE}.part .
.Pp
In fetch mode
.Po
.Fl f
and
.Fl F
.Pc ,
.Nm
populates
.Pa ${DISTDIR}/by_cipher/sha256
with links.
It also uses
.Pa ${DISTDIR}/distinfo
and
.Pa ${DISTDIR}/history
as a
.Sq permanent log :
.Bl -tag -width distinfo
.It distinfo
cache of distfiles checksum.
Contains all
.Xr sha256 1
checksums of known files under
.Pa ${DISTDIR} .
Fetching uses this to avoid re-checksumming known files.
.It history
Log of old files under distinfo.
After successfully scanning a full ports tree
.Po
.Nm Fl a
.Pc ,
the fetch engine knows precisely which files are needed by the build
(and their checksums).
Anything that is
.Bl -bullet
.It
recorded in distinfo but unneeded
.It
recorded in distinfo but with the wrong checksum
.It
not recorded in distinfo, but not needed
.El
will be entered at the end of history as a line:
.Pp
.Li ts SHA256 (file) = value
.Pp
with
.Ar ts
a timestamp from Unix epoch.
.Pp
When cleaning up old files, with a tool such as
.Xr clean-old-distfiles 1 ,
it is vital to check both the checksum and
the file name: since mirroring stores permanent links under
.Pa by_cipher ,
files which are still needed will appear in history under their old
checksums, as an indication the link should be removed, but possibly not
the file itself.
.El
.Pp
If
.Pa ${DISTDIR}
ever becomes corrupted,
removing
.Pa ${DISTDIR}/distinfo
will force
.Nm
into checking all files again.
.Pp
All those files belong to the
.Ar FETCH_USER
if it is defined.
They should be readable for the
.Ar build_user .
.Pp
.Nm
also records rolling build statistics under
.Pa ${DISTDIR}/build-stats/${ARCH} ,
and uses them automatically in the absence of
.Fl b Ar logfile .
That file belongs to the
.Ar LOG_USER
if it is defined.
.Pp
If
.Fl s
is used, size information for successful builds will be recorded under
.Pa ${DISTDIR}/build-stats/${ARCH}-size
.Po
by default, location adjustable with
.Fl S Ar sizelog
.Pc .
This is then reused for the mfs threshold option.
That file also belongs to the
.Ar LOG_USER
if it is defined.
.Pp
.Nm
also maintains a list of pkgpath frequencies
.Pa ${DISTDIR}/build-stats/${ARCH}-dependencies ,
filled at end of LISTING if
.Fl a .
This list will be automatically reused when restarting a build:
a quick LISTING of the most important dependencies will happen
before the general LISTING,
in order to prime further LISTING steps with most common ports first.
.Pp
.Nm
will also create a large number of log files under
.Pa ${PORTSDIR}/logs/${ARCH} ,
which will belong
to
.Ar LOG_USER
if it is defined:
.Bl -tag -width engine.log
.It Pa affinity/
Affinity information.
One file per full pkgpath, with slash replaced by dots
like so:
.Pa affinity/lang.ghc,-main .
.It Pa affinity.log
On startup
.Nm
reads existing affinity information, and records it in that log,
together with its pid.
This log just exists to verify, along with
.Pa engine.log ,
whether correct affinity was heeded.
.It Pa awaiting-locks.log
This is purely for gathering performance statistics, about how much
lock contention happened around
.Xr pkg_add 1
and
.Xr pkg_delete 1
usage.
Plotting cumulated time may help in fine-tuning squiggles parameters.
.It Pa build.log
Actual build log.
Each line summarizes build of a single pkgpath, as:
.Sq pkgpath host time logsize (detailed timing)[!]
where time is the actual build time in seconds, host is the machine name
where this occurred, logsize is the corresponding log file size,
and a ! is appended in case the build didn't succeed.
.Pp
The detailed timing info gives a run-down of the build, with clean, fetch,
prepare, patch (actually extract+patch), configure, build, fake, package, clean
detailed timing info.
Note that the actual build time starts at
.Sq extract
and finishes at
.Sq package .
.It Pa concurrent.log
Shows the actual concurrency achieved as a result of job starvation /
parallel handling.
Only gets a new line when the value changes: pid timestamp jobs
.It Pa debug.log
contains various information related to the main engine spinning (RTFS, haven't
figured that one yet) along with the more useful warning and die traces that
happen when something wrong occurs.
Especially useful for the warning messages that tend to be overwritten by
subsequent displays.
.It Pa dist/<distfile>.log
Log of the
.Xr ftp 1
process(es) that attempted to fetch the distfile.
.It Pa dump.log
A long log file generated at the end of build that yields any information
pertinent to ports still in the
.Sq to build
and the
.Sq built
queues.
See also
.Pa summary.log
for an expurged version of same.
.It Pa engine.log
Build engine log.
Each line corresponds to a state change for a pkgpath and starts with the pid
of
.Nm ,
plus a timestamp of the log entry.
.Bl -tag -width BB:
.It ^
pkgpath temporarily put aside, because a job is running in the same directory.
.It !
pkgpath ignored, either directly, or indirectly because a dependency was
ignored.
End of the line states reason why ignored.
.It A
affinity mismatch: path considered for build, but not the right host,
followed by the affinity information.
.It B
pkgpath built / distfile found.
.It C
forcible clean-up before building a port with a kde tag.
.It E
error in build or fetch.
.It F
distfile queued for download.
.It H
package still not found due to nfs on this run.
.It I
pkgpath can be installed.
.It J
job to build pkgpath started.
Also records the host used for the build.
.It K
kde mismatch, no build until host has been cleaned up.
.It L
job did not start, existing lock detected.
.It N
job did not finish.
The host may have gone down.
.It P
built package is no longer required for anything.
.It Q
pkgpath queued as buildable whenever a slot is free.
.It T
pkgpath to build / distfile to download.
.It V
pkgpath put back in the buildable queue, after job that was running in
the same directory returned.
.It X
only happens when rescanning after an error.
The engine temporarily locks paths that are incomplete (detained).
These will be kept in a separate list for later examination until the
end of the new scan.
.It x
only happens when rescanning after an error.
Releases a path for building after the new scan is finished.
.It Y
affinity mismatch, but job will start on the wrong host anyways, as the queue
contains no other buildable path.
.El
.Pp
Please note that the engine is no longer run after each package build event
because of performance considerations, so the
.Sq Q
and
.Sq I
changes may be delayed by a few
.Sq B .
.It Pa equiv.log
Lists of equivalent pkgpaths for the build, when default flavors and default subpackages have been resolved.
.It Pa fetch/bad.log
List of URLs that did not lead to a correct distfile, either because
they were not responding, or because of incorrect checksums.
.It Pa fetch/good.log
List of URLs that fetched correctly, along with timing statistics.
.It Pa fetch/manually.log
List of pkgpaths that require manual intervention, in human-readable form.
.It Pa <hostname>.sig.log
Complete library signature of the host.
.It Pa init.<hostname>.log
Captured output of the initialization job for each host.
.It Pa junk.log
Option
.Fl J
counts the number of dependencies directly added to decide when to run
.Nm pkg_delete Fl a .
This file sums up how many ports were built, and how many ports had
dependencies each time
.Nm
decides to junk.
.It Pa locks/
Directory where locks are created.
The slash in a pkgpath is replaced with a dot like so:
.Pa locks/devel.make
to flatten the structure.
.It Pa packages/pkgname.log
one file or symlink per pkgname.
.It Pa paths/some/path.log
one file or symlink per pkgpath.
.It Pa performance.log
Some parts of
.Nm
are computationally intensive, such as the engine runs to determine
new stuff that can be built, and the actual display reports.
.Pp
Both those activities are rate-limited, so that
.Nm
doesn't run its engine at each new package build,
and doesn't update its display every time there is a phase change.
.Pp
Lines tagged with
.Sq ENG
correspond to the engine;
lines tagged with
.Sq REP
correspond to the display reports.
.Pp
Lines ending with a dash
.Sq -
correspond to new activity that didn't trigger
a computation.
.Pp
Other lines will feature a plus
.Sq +
for normal runs, or an exclamation point
.Sq !
for forced runs, followed by two numbers:
the next timestamp at which we'll be allowed to run, and
a measure of how much time it took to run this pass.
.Pp
That information is mostly relevant while
.Nm
is building lots of small packages very quickly.
.It Pa signature.log
Discrepancies between hosts that prevent them from starting up.
.It Pa size.log
Size of work directory at the end of each build, built only with
.Fl s .
.It Pa stats.log
Simple log of the B=... line summaries.
Mostly useful for making plots and tweaking performance.
.It Pa stop
Not a logfile at all, but a file created by the user to stop
.Nm
creating new jobs.
.It Pa stop-<hostname>
Not a logfile at all, but created by the user to stop hostname creating
new jobs.
.It Pa summary.log
A summary file generated at end of build that lists packages not built
or not installable, along with a reason for it.
This summarizes packages not built because of existing locks, because of
errors, but also because they depend on something that was not built.
.Pp
In that last case,
.Pa summary.log
contains a chain of dependencies leading to the problematic package, or
in case of build cycles, stopping at the first loop.
.It Pa term-report.log
Saves all terminal output, so that it can be replayed at hi speed with
.Xr dpb-replay 1 .
.It Pa vars.log
Logs the directories that were walked in the ports tree for dependency
information, including the path to a dependency that triggered this
particular step.
.El
.Sh BUGS AND LIMITATIONS
.Nm
performs best with lots of paths to build.
When just used to build a few ports, there's a high risk of starvation
as there are bottlenecks in parts of the tree.
.Pp
Fetch jobs don't deal with checksum changes yet:
if a fetch fails because of a wrong checksum, if you update the distinfo
file and remove the lock,
.Nm
won't pick it up.
.Pp
Note that
.Nm
does not manage installed packages in any intelligent way, it will just
call
.Xr pkg_add 1
during its depend stage to install its dependencies.
With
.Fl u ,
it will call pkg_add -r.
With
.Fl U ,
it will call pkg_add -r -D installed,
but there is nothing else going on.
This is especially true when using
.Fl R ,
ensure the machine is clean of possibly older packages first, or run
.Nm
with
.Fl U .
.Pp
In particular
.Fl R
and
.Fl J
together may lead to strange issues.
.Pp
On heterogeneous networks, calibration of build info and choice of speed
factors is not perfect, and somewhat a dark art.
Using distinct speed factors on a build log that comes from a single
machine works fine, but using the build info coming from several machines
does not work all that well.
.Pp
.Nm
should check
.Pa /usr/include
and
.Pa /usr/X11R6/include
for consistency, but it doesn't.
.Pp
When a host fails consistency check, there is not yet a way to re-add it
after fixing the problem.
You have to stop
.Nm ,
cleanup and restart.
.Pp
The default limits in
.Pa login.conf
are too small for bulk builds on any kind of parallel machines.
Bump number of processes, file descriptors, and memory.
.Pp
Even though
.Nm
tries really hard to check heterogeneous networks for sanity (checking
shared libraries and .la files), it is still dependent on the user to
make sure all the hosts build ports the same way.
.Pp
Make sure your NFS setup is consistent.
The ports dir itself should be exported or synchronized.
Distfiles, the package repository,  and the plist repository should be exported,
but WRKOBJDIR should not be on NFS unless you have absolutely no choice,
or if you exhibit deep masochistic tendencies.
Pay particular attention to discrepancies in
.Pa /etc/mk.conf .
.Pp
Also,
.Nm
connects to external hosts through
.Xr ssh 1 ,
relying on
.Xr ssh_config 5
for any special cases.
.Pp
When fetching distfiles,
.Nm
may freeze and spin in a tight loop while the last distfiles are being fetched.
This is definitely a bug, which has been around for quite some time, which
is a bit difficult to reproduce, and hasn't been fixed yet.
So if
.Nm
stops updating its display right around the end of fetch, you've hit the bug.
Just kill
.Nm
and restart it.
.Sh SEE ALSO
.Xr clean-old-distfiles 1 ,
.Xr dpb-replay 1 ,
.Xr proot 1 ,
.Xr pkgpath 7
.Sh HISTORY
The original
.Nm dpb
command was written by Nikolay Sturm.
This version is a complete rewrite from scratch using all the stuff
we learnt over the years to make it better.
.Sh AUTHORS
.An Marc Espie
@


1.122
log
@ssh protocol 1 is dead, don't even mention it
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.121 2017/05/07 14:50:14 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 7 2017 $
d1145 1
a1145 1
.Pa affinity/lang.ghc,-main.
a1465 2
.Sh AUTHOR
Marc Espie
d1472 2
@


1.121
log
@make NO_CHECKSUM an option, as it causes too many problems on shared
dist farms.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.120 2016/09/18 22:09:12 schwarze Exp $
d17 1
a17 1
.Dd $Mdocdate: September 18 2016 $
a1448 4
.Pp
.Nm
requires ssh protocol 2, and won't work with ssh 1.
Currently, it doesn't even report a problem, it just won't start jobs.
@


1.120
log
@Diff from Michael Reed <m dot reed at mykolab dot com>:
Minor cleanup of some issues found with mandoc -Tlint and igor(1).
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.119 2016/08/30 14:00:46 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: August 30 2016 $
d285 4
@


1.119
log
@typo, noticed by Ross L Richardson
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.118 2016/05/18 13:49:32 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 18 2016 $
d812 1
a812 1
.Xr doas 8 .
d1464 2
a1465 2
.Xr pkgpath 7 ,
.Xr proot 1
@


1.118
log
@reexplain the directories that need to be shared, use % constructs more
liberally, remove references to old log files. Talk further about rolling
logs, introduce proot, fix confusion with FULLDISTDIR.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.117 2016/05/03 05:01:25 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 3 2016 $
d1131 1
a1131 1
.Pa ${PORTSDIR}/logs/{$ARCH} ,
@


1.117
log
@simplify user documentation
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.116 2016/04/18 20:36:51 naddy Exp $
d17 1
a17 1
.Dd $Mdocdate: April 18 2016 $
d63 1
a63 1
The preferred way is to run it as root.
d65 1
a65 2
will change its identity to a different user as needed (by default
the owner of the ports tree).
d101 2
a102 3
In order to build on a cluster, the ports tree itself should be shared
through NFS, including distfiles and built packages, but the WRKOBJDIR
should be local to each machine.
d104 14
a117 1
Also note that logs and locks are managed by the main
d122 4
d181 3
d260 1
a260 1
.Pa ${FULLDISTDIR}/history .
d561 1
a561 1
.Pa ${PORTSDIR}/logs/${ARCH}
d567 1
a567 1
.Pa ${PORTSDIR}/logs/${ARCH}/locks
d629 1
d846 1
a846 1
access to ${WRKOBJDIR}, ${PACKAGE_REPOSITORY}, and ${PLIST_DB}.
d1031 1
a1031 1
.Pa ${FULLDISTDIR}/by_cipher/sha256
d1034 1
a1034 1
.Pa ${FULLDISTDIR}/distinfo
d1036 1
a1036 1
.Pa ${FULLDISTDIR}/history
d1045 1
a1045 1
.Pa ${FULLDISTDIR} .
d1120 10
a1172 2
.It Pa clean.log
Paths that do not clean correctly, and required root to clean the directory.
a1182 5
.It Pa dependencies.log
List of pkgpath frequencies, filled at end of LISTING if
.Fl a .
Will be automatically reused when restarting a build: a quick LISTING of
the most important dependencies will happen before the general LISTING.
d1275 2
a1290 4
.It Pa needed.log
list of needed dependencies at each point in time for each host when the
.Fl J
option has been used.
d1431 4
a1434 3
The ports dir itself should be exported, including distfiles and packages
repository, but the WRKOBJDIR should not be on NFS unless you have
absolutely no choice, or if you exhibit deep masochistic tendencies.
d1464 2
a1465 1
.Xr pkgpath 7
@


1.116
log
@tweak phrasing; from mmcc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.115 2015/10/30 08:39:31 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 30 2015 $
d29 1
d162 4
d230 1
a230 1
.Ar build_user
a385 4
.It chroot_user=user
Synonym for
.Ar build_user
(compatibility).
d793 4
a796 18
.Xr sudo 8 .
By default, the owner of the ports tree is used as the target user,
though
.Nm
can be configured with several distinct users with different roles.
.Pp
Note that each of these users defaults to
.Ar BUILD_USER .
A minimally secured configuration would define a
.Ar BUILD_USER
without any
.Xr sudo 8
privileges.
.Pp
.Ox 5.8
ships with a
.Ar _pbuild ,
and a
d798 1
a798 1
user.
@


1.115
log
@document debug.log
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.114 2015/10/25 09:05:20 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 25 2015 $
d495 1
a495 1
There is a potential race condition between the
d499 1
a499 1
stage, which
d501 1
a501 1
solves by preventing more than one job on a given host to be in the
@


1.114
log
@document the newish summary.log and mention dump.log, though that
last one is probably not really serviceable for mere mortals.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.113 2015/08/25 22:40:56 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: August 25 2015 $
d1163 6
@


1.113
log
@remove UNPRIV_USER configuration entirely, that's the one part where there's
one sensible choice now (_dpb) and no need for configuration.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.112 2015/07/23 08:05:18 bentley Exp $
d17 1
a17 1
.Dd $Mdocdate: July 23 2015 $
d940 6
d1172 10
d1331 10
@


1.112
log
@Typo fixes and lint cleanup in ports manpages, from Michael Reed.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.111 2015/07/18 12:57:24 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: July 18 2015 $
a300 6
.It Ar UNPRIV_USER
.Nm
should normally be run as root.
As far as possible, it will drop privileges to
.Ar UNPRIV_USER
which should be a fairly restricted user.
d858 1
a858 1
.Ar UNPRIV_USER
a859 4
It will default to
.Ar _dpb
starting with
.Ox 5.8 .
@


1.111
log
@document the existence of _dpb, _pfetch, _pbuild.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.110 2015/07/15 15:41:41 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: July 15 2015 $
a817 1
.Pp
d1143 1
a1143 1
.xr pkg_delete 1
@


1.110
log
@tweaks
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.109 2015/07/15 15:03:06 espie Exp $
d812 7
d867 4
@


1.109
log
@rework documentation to show running dpb as root as the preferred mode of
operation.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.108 2015/07/05 10:53:00 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: July 5 2015 $
a817 5
For cluster builds,
provide an
.Xr ssh 1
connection to distant hosts from root as root.
.It
d826 5
d833 1
a833 1
.Li chroot -u pbuild /build_root
@


1.108
log
@document the junk-proxy addition
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.107 2015/06/16 17:04:47 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: June 16 2015 $
d58 12
d273 3
d793 2
a794 1
.Sh BUILDING WITHOUT SUDO
d796 2
a797 1
can use a privilege drop model where it doesn't need
d799 4
d804 5
a808 3
Setting up
.Nm
with that model is highly recommended, since
d810 2
a811 3
support in
.Nm
will be removed soon.
d818 2
a819 1
Provide an
d824 6
a829 1
will drop privileges whenever it tries to build or fetch or log something.
d839 3
a841 5
.Pp
Note that
.Nm
will not start as root without a
.Ar build_user .
d847 3
d853 1
d859 1
a859 1
is used for other activities that do not require any rights.
a862 10
.It
None of those users require
.Xr sudo 8
privileges.
.Pp
.Nm
will still run the
.Ar STARTUP
script as root,
as well as all operations that involve adding and removing packages.
@


1.107
log
@document x/X for detained/released paths
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.106 2015/05/13 09:12:39 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 13 2015 $
d952 6
@


1.106
log
@was obvious for me...
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.105 2015/05/12 09:55:52 sthen Exp $
d17 1
a17 1
.Dd $Mdocdate: May 12 2015 $
d1187 8
@


1.105
log
@.it not .It; was hiding the option name for "nochecksum=0/1"
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.104 2015/05/08 12:47:25 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 8 2015 $
d431 1
@


1.104
log
@document more details. In particular, UNPRIV_USER.
Stress that the old sudo model is going away.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.103 2015/05/05 13:38:19 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 5 2015 $
d402 1
a402 1
.it nochecksum=0/1
@


1.103
log
@duh.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.102 2015/05/02 22:26:00 landry Exp $
d17 1
a17 1
.Dd $Mdocdate: May 2 2015 $
d165 7
d210 5
d228 6
d286 6
a375 7
.It fetch_user=user
Use
.Ar user
for all fetch activities if possible
.Po defaults to
.Ar build_user
.Pc .
a382 7
.It log_user=user
Use
.Ar user
for all log files if possible
.Po defaults to
.Ar build_user
.Pc .
d781 8
d804 1
a804 1
.Li chroot -u user /build_root
d816 1
a816 1
.Ar log_user
d818 1
a818 1
.Ar log_user
d821 1
a821 1
.Ar fetch_user
d827 3
d833 1
a833 1
Neither of those users require
d1053 1
a1053 1
.Ar fetch_user
d1064 1
a1064 1
.Ar log_user
d1077 1
a1077 1
.Ar log_user
d1085 1
a1085 1
.Ar log_user
@


1.102
log
@Fix typo, s/unjunk/nojunk/
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.101 2015/05/01 19:41:42 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 1 2015 $
d1034 2
@


1.101
log
@document ownership of files if you want to separate build/fetch/log
zap lock_user, which isn't actually of any use.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.100 2015/05/01 18:29:02 espie Exp $
d650 1
a650 1
.Sq unjunk
@


1.100
log
@explain the make_path mechanism
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.99 2015/05/01 18:07:31 espie Exp $
a365 7
.It lock_user=user
Use
.Ar user
for local lock files  if possible
.Po defaults to
.Ar log_user
.Pc .
d1031 4
d1040 3
d1053 3
d1059 5
a1063 1
.Pa ${PORTSDIR}/logs/{$ARCH} :
@


1.99
log
@document the !sudo building model
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.98 2015/05/01 17:52:00 espie Exp $
d815 3
@


1.98
log
@color display is there to stay as an option
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.97 2014/06/29 19:04:40 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: June 29 2014 $
d338 6
d347 1
a347 1
before building (only available for distant hosts currently).
d349 4
d355 4
a358 3
for non sudo jobs on distant host (defaults to
.Xr whoami 1
value).
d366 14
d774 52
d1092 1
a1092 1
Paths that do not clean correctly, and required sudo to clean the directory.
@


1.97
log
@reflect current reality (from Josh Grosse)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.96 2014/03/23 12:24:14 nigel Exp $
d17 1
a17 1
.Dd $Mdocdate: March 23 2014 $
d167 2
@


1.96
log
@Ok @@espie
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.95 2013/10/06 13:33:26 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 6 2013 $
d707 1
a707 1
If those two lists are empty, they won't even show up.
@


1.95
log
@update my copyright to 2013
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.94 2013/10/06 10:58:20 espie Exp $
d247 1
a247 1
.Pa %L/term-reports.log ,
d1168 1
a1168 1
.It Pa term-reports.log
@


1.94
log
@well, turns out awaiting-locks can be fairly useful
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.93 2013/10/06 10:54:53 espie Exp $
d3 1
a3 1
.\" Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@


1.93
log
@nits
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.92 2013/10/06 10:54:02 espie Exp $
d996 1
@


1.92
log
@better phrasing
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.91 2013/10/06 10:50:04 espie Exp $
d841 2
a842 2
DPB_PROPERTIES = tag:kde3 ,
DPB_PROPERTIES = tag:kde4
d859 1
a859 1
As a special-case, failing ports with a kde3 or kde4 will not
@


1.91
log
@explain about the kde3/kde4 tag.
Document a few more new things.
(some of these are NOT YET committed)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.90 2013/10/03 16:33:08 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 3 2013 $
d863 1
a863 1
may vanish before the operator has time to address the problem.
@


1.90
log
@explain about non-integral squiggles
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.89 2013/10/03 16:12:05 espie Exp $
d412 2
a413 1
Defaults to 1 squiggle for hosts with 4 jobs or more, 0 otherwise.
d642 2
a643 3
the current size of the log file (displayed as a percentage if option
.Fl b
has been used),
d670 9
a678 1
This is followed by a summary display:
d827 1
a827 1
directory of its log directory.
d838 29
d1044 2
d1057 2
@


1.89
log
@document dpb-replay, fairly obvious
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.88 2013/09/24 09:46:44 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: September 24 2013 $
d732 7
@


1.88
log
@a few odds and ends
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.87 2013/09/21 14:47:00 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: September 21 2013 $
d246 3
d1119 3
d1227 1
@


1.87
log
@I'm not fond of adding to the BUGS sections, but those are proper gotcha
that have been around for long enough...
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.86 2013/09/21 09:12:39 espie Exp $
d241 5
d629 4
d1172 1
a1172 1
When an host fails consistency check, there is not yet a way to re-add it
@


1.86
log
@document squiggles (this sure was fun to explain) and repair, and nochecksum
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.85 2013/09/10 17:52:11 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: September 10 2013 $
d1194 16
@


1.85
log
@document chroot properties
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.84 2013/07/18 05:40:31 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: July 18 2013 $
d364 7
d376 8
d400 5
d438 1
a438 1
.Fl aX
d610 4
d705 15
@


1.84
log
@document new way nfs "works".
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.83 2013/07/05 13:49:50 pirofti Exp $
d17 1
a17 1
.Dd $Mdocdate: July 5 2013 $
d328 10
@


1.83
log
@Synchronize the synopsis with the usage.

Comments and okay espie@@.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.82 2013/06/24 20:30:56 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: June 24 2013 $
a257 5
.It Ar WAIT_TIMEOUT
Timeout (in seconds) to wait before giving up on NFS packages showing up.
Set to 0 to disable.
Defaults to 10 minutes.
.\" Disabled on localhost.
d648 3
d943 2
@


1.82
log
@document that it's now possible to put a lot of things inside the config
file instead of passing extra options on the command line.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.81 2013/06/21 10:10:58 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: June 21 2013 $
d26 1
a26 1
.Op Fl acemqrRsuUx
d41 1
@


1.81
log
@document -DMIRROR
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.80 2013/06/04 08:59:50 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: June 4 2013 $
d198 2
d211 4
d221 1
a221 1
.Nm Fl f 
d224 1
a224 1
.Ev SUPDISTFILES 
d262 3
d297 1
a297 1
The special line
d301 6
a306 7
.Pp
will define a script which will be run at start-up on each build machine.
This script must exist locally.
This script will always be run under ${PORTSDIR}, with environment
variables MAKE and PORTSDIR set.
It can be a list, e.g.,
STARTUP=/bin/sh /some/path
d968 1
a968 1
Please not that the engine is no longer run after each package build event
@


1.80
log
@document -DSYSLOG
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.79 2013/04/30 10:22:36 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: April 30 2013 $
d209 14
@


1.79
log
@add ! to ports that prevent junk from happening, so that you know why it
doesn't junk.

spell out a bit more that logs and locks do NOT need to be shared.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.78 2013/02/04 11:35:27 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: February 4 2013 $
d229 8
@


1.78
log
@state the obvious
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.77 2013/02/03 22:27:28 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: February 3 2013 $
a56 1
.Pp
d91 6
d107 1
a107 4
As
.Nm
tends to be run on shared clusters, most filenames will go through some
control sequence expansions.
d310 5
a314 3
Build everything below that wrkdir threshold in
.Pa /tmp/ports ,
assuming it is a memory filesystem.
d316 1
a316 2
is the sum, in KBytes, of ports that will be allowed under
.Pa /tmp .
d422 9
d447 1
a447 2
Build ports below the memory threshold under a
.Xr mfs 8
d558 6
d625 4
@


1.77
log
@document that dpb will be smart about calling show-size
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.76 2013/02/03 13:38:13 espie Exp $
d319 6
@


1.76
log
@document mfs location
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.75 2013/02/02 10:38:26 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: February 2 2013 $
d497 4
@


1.75
log
@document -S
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.74 2013/01/29 16:19:41 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 29 2013 $
d429 8
a436 2
Build ports below the memory threshold under
.Pa /tmp/ports .
@


1.74
log
@adjust documentation a bit.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.73 2013/01/29 16:14:44 espie Exp $
d41 1
d482 4
@


1.73
log
@document m parameter for -F
noticed by jasper@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.72 2013/01/28 23:07:36 nigel Exp $
d17 1
a17 1
.Dd $Mdocdate: January 28 2013 $
a40 1
.Op Fl S Ar sizelog
d270 4
a480 3
.It Fl S Ar sizelog
Change the rolling log of build sizes from its default path
.Pa %f/build-stats/%a-size
d483 3
a485 1
.Pa ${LOGDIR}/size.log .
@


1.72
log
@Change <hostname>-stop to stop-<hostname>
Ok to fix espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.71 2013/01/28 13:48:31 espie Exp $
d254 3
@


1.71
log
@rebuild.log is gone, that info went back to separate paths.
Reasoning as follows: we were starting a job, and dumping the path
info in there. Just stopping right there makes little sense, so put
the rebuild info there anyways.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.70 2013/01/28 12:24:51 espie Exp $
d697 1
a697 1
.Pa <hostname>-stop
a906 3
.It Pa <hostname>-stop
Not a logfile at all, but created by the user to stop hostname creating
new jobs.
d977 3
@


1.70
log
@document FETCH_TIMEOUT
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.69 2013/01/28 10:24:24 espie Exp $
a967 4
.It Pa rebuild.log
When using
.Fl R ,
contains the list of decisions to build/not rebuild a given pkgpath.
@


1.69
log
@document new logs, new -J, new -M.
removes description of fetch/distfiles.log as that one no longer serves
any purpose (bye bye!)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.68 2013/01/27 18:43:11 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 27 2013 $
a48 2
Its name is an acronym for
.Sq distributed ports builder .
d50 1
a50 1
walks the ports tree to figure out dependencies, and starts building
a52 1
On a clean machine,
d94 1
a94 1
is used to specify hosts to use,
d96 3
a98 2
can be as simple as a list of hosts to use, one host per line
(but it is recommended to also include a
d141 5
a145 2
Prime the heuristics module with a previous build log, so that packages that
take a long time to build will happen earlier.
d150 3
a152 2
Use a list of simple
.Xr pkgpath 7 ,
d196 3
d917 1
a917 1
This file sums up how many ports were built, and how many ports had 
@


1.68
log
@no longer a bug in mfs, at least on modern arches.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.67 2013/01/21 21:33:32 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 21 2013 $
d296 1
a296 1
Build everything below that wrkdir threshold in 
d302 5
d354 1
a354 1
Every
d356 1
a356 1
build, it will be followed by a
d382 1
a382 1
.Ar 250 .
d803 7
a897 3
.It Pa fetch/distfiles.log
Full list of distfiles seen through this build.
Can be used to remove old distfiles.
d907 9
@


1.67
log
@typo. obviously no-one reads this but me...
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.66 2013/01/21 14:59:45 espie Exp $
a1021 4
.Pp
There's a bug in
.Xr mfs 8
that prevents it from proper use in bulk builds.
@


1.66
log
@document new -S
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.65 2013/01/21 12:32:51 espie Exp $
d207 1
a212 1
.Pa ${DISTDIR}/build-stats/${ARCH} .
@


1.65
log
@small takes speed factor into account
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.64 2013/01/21 12:07:01 espie Exp $
d41 1
d465 3
d774 5
a778 1
.Pa ${DISTDIR}/build-stats/${ARCH}-size .
@


1.64
log
@document simpler -s handling
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.63 2013/01/21 10:42:49 espie Exp $
d316 2
a317 1
Ports known to build under that duration are deemed to be small, so
@


1.63
log
@document small, drop ANVILS as to why STARTUP is a good thing.
explicitly say that memory threshold is a total KB value.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.62 2013/01/20 21:29:55 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 20 2013 $
a40 1
.Op Fl S Ar sizefile
a462 2
It will go into an infinite loop with always-update packages such as sqlports
or pkglocatedb.
a465 2
.It Fl S Ar sizefile
Read a size log file and use it for choosing to put WRKDIR in memory.
d581 16
a596 1
When building a package,
d765 6
@


1.62
log
@capitalization
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.61 2013/01/07 11:05:17 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 7 2013 $
d99 4
a102 1
can be as simple as a list of hosts to use, one host per line.
d256 8
d296 6
a301 6
Builds everything below that wrkdir threshold in /tmp, assuming
it is a memory filesystem.
Avoid for now, as
.Xr mfs 8
has serious race conditions which yield
random errors under stress conditions such as bulk build.
d316 6
a328 8
The
.Ar hosts
file can also define a start-up script, as
.Bd -literal -offset indent
STARTUP=path
.Ed
.Pp
which will be run at start-up on each machine.
d411 4
a414 6
Build ports besides the memory threshold within
.Pa /tmp .
Avoid for now, as
.Xr mfs 8
has serious race conditions which yield
random errors under stress conditions such as bulk build.
@


1.61
log
@remove todo, affinity now works, and the rest turned out to be completely
not needed in practice
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.60 2013/01/07 11:04:25 espie Exp $
d153 1
a153 1
.It ALWAYS_CLEAN
@


1.60
log
@document -X
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.59 2013/01/06 18:21:52 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 6 2013 $
a1030 13
.Pp
There are still a number of changes to make, and some possible avenues
to explore.
.Pp
Better build feedback for next builds would be nice: we need a way to
calibrate build logs that contain info for several machines (so that we
can gauge whether a machine is fast or slow).
It might make sense to have some kind of machine affinity for big packages
in a cluster, so that we avoid reinstalling big things on each machine if
we can get away with installing stuff on a single machine.
We should probably keep the pkgnames around with the pkgpath in the build-log,
so that we give more credibility to build times that correspond to the
exact same pkgnames.
@


1.59
log
@document asynchrony in engine.log
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.58 2013/01/05 18:26:31 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 5 2013 $
d42 1
d475 9
@


1.58
log
@allow independent setup for the locks location. I strongly suggest
using a local fs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.57 2013/01/05 13:34:28 espie Exp $
d534 1
a534 1
because of possibly run depends that still need to be built.
d831 8
@


1.57
log
@change to NO_HISTORY and document (since there are other NO_* thingies)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.56 2013/01/05 07:01:44 espie Exp $
d38 1
d119 2
d393 7
@


1.56
log
@fix thinko.
as noticed by
Mikolaj Kucharski.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.55 2013/01/04 12:56:26 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 4 2013 $
d200 5
@


1.55
log
@synch manpage with reality
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.54 2013/01/04 12:16:51 espie Exp $
d370 1
a370 1
DPB_PROPERTIES = unjunk
d373 1
a373 1
.Sq unjunk
@


1.54
log
@document new exhaustive rate-limiting
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.53 2013/01/03 22:52:01 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 3 2013 $
d864 3
a866 1
Lines ending with a dash correspond to new activity that didn't trigger
d868 8
a875 5
For other lines, the last number is an estimate of how much time should
pass before the next run, the first number is time to substract to that
because there was a long delay before this run, and the middle number is
the corresponding timestamp, after which the computation will be allowed
to fire again.
@


1.53
log
@explain rationale and working of unjunk
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.52 2012/12/31 09:50:55 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: December 31 2012 $
a815 17
.It Pa engine-perf.log
Engine performance.
Each engine run takes a large amount of cpu time, most noticeable on slow
machines, so
.Nm
doesn't run its engine at each new package build.
Lines ending with a dash correspond to new package builds that didn't
trigger an engine run.
For other lines, the last number is an estimate of how much time should
pass before the next run, the first number is time to substract to that
because there was a long delay before this run, and the middle number is
the corresponding timestamp, after which the engine will be allowed to fire
again.
.Pp
That information is mostly relevant while
.Nm
is building lots of small packages very quickly while the queue is large.
d846 29
@


1.52
log
@allow overriding the start-up script from the command line.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.51 2012/12/31 08:29:31 espie Exp $
d361 16
d824 1
a824 1
For other lines, the last number is an estimate of how much time should 
@


1.51
log
@document extra log files...
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.50 2012/12/24 17:24:46 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: December 24 2012 $
d201 2
@


1.50
log
@add affinity information to restart jobs on the right host preferentially.
- affinity info is similar to locks, but with a completely different
lifetime.
- streamline the main loop of the engine, so that it can do two passes:
first pass shuns paths with the wrong affinity. If no good path is found,
those are considered during the second pass.
- make the Core factory aware of what hosts might be running, so that
affinity info for machines removed from a config file will be ignored.

thanks to landry@@ for a few tests.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.49 2012/11/06 08:26:29 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 6 2012 $
d715 8
d767 1
a767 1
affinity mismatch: path considered for build, but ignored on first try,
d798 17
@


1.49
log
@don't mix up wait_timeout and waiting_timeout, as noticed by naddy@@.
re-enable wait_timeout on localhost temporarily (should be done in another
way, most probably by checking whether repo is on nfs, we can steal code
from VStat.pm)

pass umask through ssh. This took us long enough to figure out, and it's
considerably simpler than tweaking every login class once again.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.48 2012/10/27 11:17:56 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 27 2012 $
d548 1
a548 1
At the end of a succesful build, these lockfiles are removed.
d596 15
d658 1
a658 1
After succesfully scanning a full ports tree
d710 5
d758 3
d786 3
d905 1
a905 1
Bump number of processes.
@


1.48
log
@be very explicit: running several dpb on the same box is perfectly safe.
so that nitpicky developers are not deluded into thinking this doesn't work
perfectly (hi matthieu@@)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.47 2012/10/26 14:43:17 rpe Exp $
d17 1
a17 1
.Dd $Mdocdate: October 26 2012 $
d208 1
a208 1
.It Ar WAITING_TIMEOUT
d212 1
a212 1
Disabled on localhost.
@


1.47
log
@lock directory -> locks directory

ok espie@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.46 2012/10/13 09:10:07 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 13 2012 $
d572 1
a572 1
One can also run several
d574 1
a574 1
in parallel.
d590 6
@


1.46
log
@document WAITING_TIMEOUT
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.45 2012/10/12 20:27:16 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 12 2012 $
d538 1
a538 1
produces a lockfile in the lock directory, whose name is deduced from
d562 1
a562 1
rechecks the lock directory for existing lockfiles.
@


1.45
log
@document ALWAYS_CLEAN
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.44 2012/10/11 07:40:30 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 11 2012 $
d208 5
@


1.44
log
@change things again to have command line options override host file.
and provide the possibility of a DEFAULT entry in the host file.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.43 2012/10/09 20:35:57 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 9 2012 $
d149 4
d242 2
a243 2
Use 
.Ar localhost 
d256 5
d396 2
a397 2
in which case, 
.Nm 
d702 1
a702 1
Shows the actual concurrency achieved as a result of job starvation / 
@


1.43
log
@restore dropped ), noticed by Amit Kulkarni, thx.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.42 2012/10/08 12:41:03 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 8 2012 $
d200 1
a200 1
This can be set on a per-core basis as the
d229 1
a229 1
.Bd -literal
d232 14
d286 1
d290 1
a290 1
.Bd -literal
d293 1
d305 1
a305 1
Default value for the
d307 1
a307 1
propery.
d367 1
a367 1
Default value for the
d692 4
d719 5
a723 1
pkgpath built.
d739 1
a739 1
pkgpath to build.
@


1.42
log
@small change for people running multiple hosts:

options on the command line now define *defaults* that host files can
override (for instance -j, stuck, -p, -J).

Add -p /n to mean "take number of jobs, if >1, divide by n, round up to 2,
and use that for parallel.

Document -p.

Make junk be 'by host' (and it's a prop, so you can tweak it).

concurrent log that records how many jobs are running each time it changes.
tag parallel builds *n in the time record.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.41 2012/08/31 17:27:50 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: August 31 2012 $
d364 1
a364 1
DPB_PROPERTIES = parallel in their Makefile will be affected.
@


1.41
log
@BUILD_ONCE documented
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.40 2012/07/02 10:31:08 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: July 2 2012 $
d240 5
d252 5
d289 3
d330 1
a330 1
Number of concurrent local jobs to run (defaults to hw.ncpu if no hosts file).
d350 28
@


1.40
log
@somehow, I had forgotten to document this defaults to 250
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.39 2012/04/10 17:00:29 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: April 10 2012 $
d163 6
a168 1
optimization if run with
@


1.39
log
@document -DNO_BUILD_STATS on the off chance someone would ever need it.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.38 2012/04/08 10:20:42 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: April 8 2012 $
d306 5
@


1.38
log
@synch documentation
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.37 2012/03/09 21:18:40 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: March 9 2012 $
d189 3
@


1.37
log
@there's no longer any need to keep track of build.log manually, as it
gets taken care off thru %p/build-stats/%a
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.36 2012/03/09 15:16:38 espie Exp $
d186 3
d411 1
a411 1
This is followed by a three-line display:
d437 1
@


1.36
log
@duplicate -m option, resolve conflict by renaming old unused one to -M.

Document some new stuff
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.35 2012/03/02 19:35:09 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: March 2 2012 $
a57 15
.Pp
The file
.Pa build.log
.Po
normally under
.Pa ${PORTSDIR}/log/${ARCH}
.Pc
is of particular interest, as it contains build time summaries.
After a full run of
.Nm ,
back-up or remove other logs, but keep the old
.Pa build.log
accessible, so that the next build can be primed with
.Fl b Pa build.log
in order to get a more efficient build that will focus on large ports first.
@


1.35
log
@%f for distdir (where fetched distfiles live)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.34 2012/02/27 20:42:39 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: February 27 2012 $
d26 1
a26 1
.Op Fl aceqrRsuUx
d38 1
a38 1
.Op Fl m Ar threshold
d323 1
a323 1
.It Fl m Ar threshold
d330 2
d605 6
@


1.34
log
@document recent options
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.33 2012/02/27 14:51:37 espie Exp $
d128 2
@


1.33
log
@allow -I/-P/-C and command-line arguments to be lists of pkgpaths, or pkgpath
(it's easy to distinguish between a file and a directory under ports).

expand sequences for those files and hosts

when restarting dpb, kill locks that don't correspond to errors, but to a dpb
running on the same host that's no longer there.

do __WARN__ like __DIE__

option -DDONT_BUILD_ONCE
option -DDONT_CLEAN_LOCKS

document some
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.32 2012/02/17 07:42:20 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: February 17 2012 $
d34 1
a34 1
.Op Fl I Ar subdirlist
d39 1
a39 1
.Op Fl P Ar subdirlist
d41 1
a41 1
.Op Ar pkgpath ...
d76 18
a93 2
.Ar pkgpath ...
to build as parameters, as per
d95 1
a95 1
specifications.
d146 1
a146 1
.Ar pkgpath
d183 8
d275 1
a275 1
.It Fl I Ar subdirlist
d328 1
a328 1
.It Fl P Ar subdirlist
@


1.32
log
@cosmetic
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.31 2012/01/30 15:15:24 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 30 2012 $
d98 24
d155 12
d553 1
a553 1
.Li Ar ts SHA256 (file) = value
@


1.31
log
@document -DHISTORY_ONLY
nitpick at column width.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.30 2012/01/27 19:03:02 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 27 2012 $
d340 1
a340 1
>dist-3.0.tgz(#1) [4321] 25%
@


1.30
log
@make new mirroring with dpb feature-complete, provide a small perl script that
can remove old distfiles in a smart way according to history.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.29 2012/01/14 12:40:35 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 14 2012 $
d99 1
a99 1
.Bl -tag -width pkgpathlonger
d121 1
a121 1
.Bl -tag -width DISPLAY
d133 6
d526 1
a526 1
the file name: since mirroring stores permanent links under 
d745 1
a745 1
.Xr clean-old-distfiles ,
@


1.29
log
@flesh out the description of $(DISTDIR)/distinfo and $(DISTDIR)/history
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.28 2012/01/14 12:26:21 espie Exp $
d517 3
a519 1
When cleaning up old files, it's vital to check both the checksum and
d739 1
@


1.28
log
@add support to obey PERMIT_DISTFILES*
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.27 2012/01/04 02:08:52 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: January 4 2012 $
d467 11
d480 44
a523 4
as a cache for distfiles that have been checksummed,
and populates
.Pa ${FULLDISTDIR}/by_cipher/sha256
with links.
@


1.27
log
@document -F, as naddy noticed it was not yet documented.
Add more comments to the fact that -R is a hack that doesn't always
work for various reasons, most of which might not ever be fixed...
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.26 2011/12/31 14:53:17 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: December 31 2011 $
d122 2
d131 2
@


1.26
log
@document new file semantics.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.25 2011/12/05 16:10:00 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: December 5 2011 $
d32 1
d151 7
d272 7
d626 6
@


1.25
log
@turn -J into an option taking a number.
always run show-prepare-results, and always serialize
depends/prepare/show-prepare-results(/junk) on a single host.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.24 2011/12/03 18:02:39 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: December 3 2011 $
d446 1
a446 1
creates temporary files as
d448 16
@


1.24
log
@most important usage of dpb upfront, before the exhaustive description of
option.

Drop a few heavy hints regarding ssh usage.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.23 2011/12/02 22:37:36 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: December 2 2011 $
d26 1
a26 1
.Op Fl aceJqrRsuUx
d34 1
d202 1
a202 1
.It Fl J
d208 4
a211 1
stage and a
a613 22
.Pp
Mixing
.Nm
running with
.Fl J
and
.Nm
running without
.Fl J
will lead to spurious errors: a
.Nm
lacking the option will not lock the host, and thus, may install new
packages during
.Ar depends ,
and then fail the
.Ar prepare
stage as another
.Nm
will have removed the extraneous packages in-between.
Always locking would be a safer option, but the gathering of statistical
information to determine if the resulting bottleneck  has an actual
negative impact is currently on-going.
@


1.23
log
@new -J option
- refactor redirect a bit to store multi-line results to a temporary file
- new show-prepare-results stage using that
- prepare and show-prepare-results shouldn't be NoTime, since they're
predictable.
- lock host thru depends -> junk in the junk case.
acquiring the lock is done thru polling in the child, so that it doesn't block
dpb proper.
- new "junk" stage that gathers dependencies and deletes them.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.22 2011/11/21 15:02:14 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 21 2011 $
d48 1
a48 1
walks ports to figure out dependencies, and starts building ports
d57 15
d73 1
a73 1
can take
d75 1
a75 1
to build as parameters, as
d79 17
d192 4
@


1.22
log
@simplify. why do I put sentences in parenthesis ? ETOOMANYNESTLEVELS
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.21 2011/11/21 14:58:29 espie Exp $
d26 1
a26 1
.Op Fl aceqrRsuUx
d165 30
d338 2
a339 1
This lockfile is filled with such info as the build start time or the host.
d473 2
d495 4
d574 22
@


1.21
log
@adjust to some recent changes and improvements
give hints as to where to get relevant info.
be more forceful about WRKOBJDIR on local disk.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.20 2011/11/21 12:39:39 espie Exp $
d553 5
a557 5
Make sure your NFS setup is consistent (the ports dir itself should be
exported, including distfiles and packages repository, but the WRKOBJDIR
should not be on NFS unless you have no choice, or if you exhibit deep
masochistic tendencies). Pay particular attention to discrepancies
in
@


1.20
log
@also make the connection to pkgpath(7) more obvious
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.19 2011/11/21 12:03:05 espie Exp $
d282 2
d307 1
a307 2
the basic pkgpath with slashes replaced by dots, and a possible second lock
with the fullpkgpath.
d316 1
a316 1
The fullpkgpath lock will stay around in case of errors.
a356 1
.Pp
d484 2
a485 1
information.
a498 4
.Nm
considers all pkgpaths it explores as valid candidates for packages.
This is not the case for some pkgpath:patch depends.
It should not try to reach them.
d555 2
a556 1
should not be in most cases). Pay particular attention to discrepancies
@


1.19
log
@point to pkgpath.7
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.18 2011/11/14 21:57:47 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 14 2011 $
d60 3
a62 1
to build as parameters.
d81 3
a83 2
Use a list of simple pkgpaths, as this does not take multi and flavors into 
account.
d161 3
a163 1
List of pkgpaths to install, on the local box.
d181 3
a183 1
Read list of pkgpaths from file
@


1.18
log
@explain to the engine how to install stuff when it's ready (no error
checks though).

new -I option to do that.
change -C option to be more useful.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.17 2011/11/06 15:42:39 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 6 2011 $
d562 2
@


1.17
log
@explicitly document that -f0 will save a lot of memory
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.16 2011/11/05 18:33:52 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 5 2011 $
d26 1
a26 1
.Op Fl acCeqrRsuUx
d29 1
d33 1
d77 4
a80 3
.It Fl C
Don't clean port working directory after build.
Warning: requires insane amounts of diskspace for a full build.
d157 3
@


1.16
log
@document that locks contain parent links, and also that engine.log states
ignored reason now.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.15 2011/09/25 10:41:30 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: September 25 2011 $
d107 4
a110 1
Can be set to 0 to bypass fetching jobs entirely.
@


1.15
log
@make dpb more useful for people hacking on ports, allow them to not clean
the work directory after building.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.14 2011/09/23 19:06:36 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: September 23 2011 $
d293 5
a299 2
.Pp
In this case, it contains the status of the last task that was run
d400 4
@


1.14
log
@dpb is not so daunting. Starting dpb without any parameters will actually
do something useful.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.13 2011/07/14 10:48:32 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: July 14 2011 $
d26 1
a26 1
.Op Fl aceqrRsuUx
d75 3
@


1.13
log
@document fetch jobs properly, spell out that dpb is also useful on a single
MP machine, show examples of lines displayed by dpb, document the extra
files produced by fetch. Explain how fetch works (in particular, the *.part
files and the use of ftp -C).
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.12 2011/05/22 08:21:39 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: May 22 2011 $
d48 9
a56 1
It can take
d59 1
d67 3
a69 1
Walk the whole tree and builds all packages (default if no pkgpath is given).
@


1.12
log
@initial support for fetching distfiles, somewhat experimental yet.
- clean up clock handling, jobs with timer.
- pass more parameters thru state
- tweak the engine to handle distfiles
- lots of new code in Fetch for new jobs.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.11 2011/04/25 11:58:46 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: April 25 2011 $
d41 2
a42 1
is used to build ports on a cluster of machines.
d78 1
a78 1
This can be set on a per-core basis as the 
d92 2
d185 49
a233 2
There's a list currently running, one line per task, with the task name,
local pid, the build host name, and advancement based on the log file size.
d264 1
a264 1
uses some heuristics to try to maximise Q as soon as possible.
d267 4
d342 4
a345 1
will create a number of log files under
d370 4
a373 3
.It Pa size.log
Size of work directory at the end of each build, built only with
.Fl s .
d405 10
d435 3
d455 5
a459 4
The
.Fl f
option is somewhat experimental.
It doesn't have any good heuristics yet when faced with a lot of distfiles to get.
a552 13
.Pp
We should integrate mirroring functionalities.
This mostly involves having
.Sq special
jobs with no cpu requirements that can run locally,
and to have a step prior to
.Sq tobuild ,
where fetch would occur.
The same logic that was used for pkgpaths should be used to handle distfiles,
and we should probably add some kind of lock based on the ftp site being
used to grab distfiles.
(This is low priority, as most build machines currently being used already
have the distfiles).
@


1.11
log
@finish refactoring options.
Deprecate: -t and -T
use -DCONNECTION_TIMEOUT=... -DDISPLAY_TIMEOUT=... instead
New feature: -DSTUCK_TIMEOUT=
kill tasks when they don't show any progress for that long.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.10 2010/11/02 11:34:29 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 2 2010 $
d30 1
d85 6
d196 4
d383 5
@


1.10
log
@explicit reminder: dpb does NOT do anything intelligent with installed
packages. Beware with -R, start with a clean box, or suffer strange
problems.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.9 2010/11/01 12:24:47 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: November 1 2010 $
d29 1
a35 2
.Op Fl t Ar ctimeout
.Op Fl T Ar dtimeout
d62 19
d114 3
a158 7
.It Fl t Ar ctimeout
Connection timeout for ssh.
Defaults to 60 seconds.
.It Fl T Ar dtimeout
Display timeout (in seconds) while waiting for jobs to finish, so that the
display is updated even if jobs didn't finish.
Defaults to 10 seconds.
@


1.9
log
@do -d automatically, we don't really need that option
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.8 2010/10/31 11:07:20 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 31 2010 $
d83 3
a85 1
Avoid for now, as mfs has serious race conditions which yield
d117 3
a119 1
Avoid for now, as mfs has serious race conditions which yield
d190 2
a191 2
There's also a provision for a feedback-directed build, where timings from
a previous build can be used to try to build long-running jobs first.
d363 19
d402 3
a404 1
There's a bug in mfs that prevents it from proper use in bulk builds.
@


1.8
log
@new file/option: save dependencies and be able to reuse them.
makes for a "quick listing" of the most important ports first (e.g., groff).
document -R, even though it's not perfect yet.
flesh out all the recent parts and update the BUGS AND LIMITATIONS section.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.7 2010/10/27 17:53:24 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 27 2010 $
a28 1
.Op Fl d Ar logfile
a62 3
.It Fl d Ar logfile
Use a dependency logfile from a previous build to look at the most important
10 pkgpaths first before scanning the rest of the tree.
d280 4
a283 1
List of pkgpath frequencies, filled at end of LISTING.
@


1.7
log
@remove last reference to P number
explain why locks prevent building two pkgpaths.
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.6 2010/10/26 16:57:10 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 26 2010 $
d26 1
a26 1
.Op Fl aceqrsuUx
d29 1
d64 3
d129 4
d249 1
a249 1
in its log directory
d251 9
a259 1
the current jobs are finished.
d283 2
d286 2
a287 1
Size of work directory at the end of each build
d319 5
d333 4
d342 4
a360 12
.Nm
does not properly distinguish between default flavors and empty flavors.
This leads to a few errors in some multi-packages that have pseudo-flavors
that prevent their build.
.Pp
.Nm
Hot fixes to a port that change the pkgname or other properties won't be
used by
.Nm
after removing the lock.
It should rescan the directory for new properties and will eventually.
.Pp
d374 2
a375 2
When an host fails consistency check, there is no way to re-add it after
fixing the problem.
@


1.6
log
@distinguishes between errors we create (E=) and locks we encounter (L=)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.5 2010/10/24 10:01:57 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 24 2010 $
a179 4
P will stay at zero until the listing job is finished, since
.Nm
needs full backwards dependencies to compute it.
.Pp
d228 9
@


1.5
log
@add an option for dpb to keep going if there are errors left.
there's a bug in the display (to be fixed) as errors won't show properly
and you have to look manually though...
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.4 2010/10/23 18:14:19 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: October 23 2010 $
d155 1
a155 1
This is followed by a two-line display:
d169 2
@


1.4
log
@zap P/I distinction, it was a lousy idea anyways
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.3 2010/08/23 19:08:08 jasper Exp $
d17 1
a17 1
.Dd $Mdocdate: August 23 2010 $
d26 1
a26 1
.Op Fl acersuUx
d119 2
@


1.3
log
@- be explicit about the hosts file

agreed by landry and jakemsr
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.2 2010/08/20 14:09:59 espie Exp $
d17 1
a17 1
.Dd $Mdocdate: August 20 2010 $
a154 3
.It P=
number of built packages, that could be installable, but are not needed
by anything that has yet to build.
d156 1
a156 1
number of packages that can be installed, and can be needed for other builds.
@


1.2
log
@finish renaming check-conflicts, add (c), document check-conflicts
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb.1,v 1.1 2010/08/20 13:42:29 espie Exp $
d67 1
a67 1
hosts to use for building.
@


1.1
log
@cp dpb in there.
(old build/dpb will die eventually, but do the rename now)
@
text
@d1 1
a1 1
.\"	$OpenBSD: dpb3.1,v 1.9 2010/06/07 15:13:52 espie Exp $
d3 15
a17 1
.Dd $Mdocdate: June 7 2010 $
d24 1
a24 1
.Nm dpb3
d161 1
a161 1
number of built packages, not yet known to be installable, 
@

