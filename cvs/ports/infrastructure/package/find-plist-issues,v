head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5;
locks; strict;
comment	@# @;


1.11
date	2014.07.19.07.04.42;	author ajacoutot;	state Exp;
branches;
next	1.10;
commitid	oyJYXXJ79PYTnRMX;

1.10
date	2010.06.30.11.11.19;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.09.13.59.37;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.01.19.38.40;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.12.14.56.21;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.04.13.02.04;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.12.16.33.35;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.12.13.37.21;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.13.20.48.41;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.05.14.39.57;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.05.10.17.05;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@No more BSD.local.dist.

reported by richard at aaazen dot com
@
text
@#! /usr/bin/perl

# $OpenBSD: find-plist-issues,v 1.10 2010/06/30 11:11:19 espie Exp $
# Copyright (c) 2000-2005
# Marc Espie.  All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of OpenBSD nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY ITS AUTHOR AND THE OpenBSD project ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# check all packages in the current directory, and report issues apparent
# in packing-lists

use strict;
use warnings;

use File::Spec;
use File::Path;
use File::Basename;
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::Mtree;
use OpenBSD::Getopt;
use OpenBSD::State;
use OpenBSD::PkgCfl;

package OpenBSD::PackingElement;
use OpenBSD::PkgSpec;

sub register
{
}

sub fix
{
	my ($self, $l) = @@_;
	if ($self->{def} eq 'def') {
		my @@m = OpenBSD::PkgSpec->new($self->{pattern})->match_ref($l);
		if (@@m > 0) {
			$self->{def} = $m[0];
		} else {
			$self->{def} = $self->{pattern};
		}
	}
}

sub check_common_dirs
{
}

package OpenBSD::PackingElement::FileBase;
use File::Basename;

sub register_dir
{
	my ($self, $d, $h) = @@_;
	return if defined $h->{$d};
	$h->{$d} = 1;
	$self->register_dir(dirname($d), $h);
}

sub register 
{
	my ($self, $all_conflict, $all_deps, $pkgname, $avail) = @@_;

	my $file= File::Spec->canonpath($self->fullname());
	unless (defined $all_conflict->{$file}) {
		$all_conflict->{$file} = [];
	}
	push @@{$all_conflict->{$file}}, $pkgname;
}

sub check_common_dirs
{
	my ($item, $t) = @@_;
	my $d = File::Spec->canonpath($item->fullname());
	$item->register_dir(dirname($d), $t->{need_dirs});
}

package OpenBSD::PackingElement::DirlikeObject;
sub check_common_dirs
{
	my ($item, $t) = @@_;
	my $d = File::Spec->canonpath($item->fullname());
	$t->{dirs}->{$d} = 1;
}

package OpenBSD::PackingElement::Depend;
sub register 
{
	my ($self, $all_conflict, $all_deps, $pkgname, $avail) = @@_;
	if (defined $self->{def}) {
		unless (defined $all_deps->{$pkgname}) {
			$all_deps->{$pkgname} = [];
		}
		$self->fix($avail);
		push @@{$all_deps->{$pkgname}}, $self->{def};
	}
}

sub check_common_dirs
{
	my ($item, $t) = @@_;
	$item->fix($t->{avail});
	$t->{deps}->{$item->{def}} = 1;
}

package OpenBSD::PackingElement::PkgDep;
sub check_common_dirs
{
	my ($item, $t) = @@_;
	$t->{deps}->{$item->{name}} = 1;
}

package OpenBSD::PackingElement::Wantlib;
sub check_common_dirs
{
}



package main;

my $cache = {};
my $cache2 = {};
my @@available = ();
my $conflicts_cache = {};

sub find_a_conflict
{
	my ($conflicts, $deps, $pkg, $pkg2) = @@_;
	return 0 if $pkg2 eq $pkg;
	my $h = "$pkg/$pkg2";
	if (defined $conflicts_cache->{$h}) {
		return $conflicts_cache->{$h};
	}
	
	if (defined $conflicts->{$pkg} && 
	    $conflicts->{$pkg}->conflicts_with($pkg2)) {
		$conflicts_cache->{$h} = 1;
		return 1;
	}
	if (defined $deps->{$pkg}) {
	    for my $dep (@@{$deps->{$pkg}}) {
		if (find_a_conflict($conflicts, $deps, $dep, $pkg2)) {
			$conflicts_cache->{$h} = 1;
			return 1;
		}
	    }
	}
	if (defined $deps->{$pkg2}) {
	    for my $dep (@@{$deps->{$pkg2}}) {
		if (find_a_conflict($conflicts, $deps, $pkg, $dep)) {
			$conflicts_cache->{$h} = 1;
			return 1;
		}
	    }
	}
	$conflicts_cache->{$h} = 0;
	return 0;
}

sub compute_conflicts
{
    my ($h, $conflicts, $deps) = @@_;

    while (my ($key, $l) = each %$h) {
	    my %s = map {($_, 1)} @@$l;
	    @@$l = sort keys %s;
	    if (@@$l > 1) {
	    	my $hv = join(',', @@$l);
		if (!defined $cache->{$hv}) {
			# create a list of unconflicting packages.
			my $l2 = [];
			for my $pkg (@@$l) {
			    my $keepit = 0;

			    for my $pkg2 (@@$l) {
			    	next if $pkg eq $pkg2;
				if (!(find_a_conflict($conflicts, $deps, $pkg, $pkg2) ||
					find_a_conflict($conflicts, $deps, $pkg2, $pkg))) {
					$keepit = 1;
					last;
				}
			    }
			    if ($keepit) {
				push(@@$l2, $pkg);
			    }
			}
			$cache->{$hv} = $l2;
		}
		my $result = $cache->{$hv};
		if (@@$result != 0) {
		    my $newkey = join(',', @@$result);
		    if (@@$result == 1) {
			    $newkey.="-> was ".join(',', @@$l);
		    }
		    $cache2->{$newkey} = [] unless defined($cache2->{$newkey});
		    push(@@{$cache2->{$newkey}}, $key);
		}
	    }
    }
}

sub analyze_dirs
{
	my ($plist, $db) = @@_;
	my $pkgname = $plist->pkgname();
	$db->{$pkgname} = {
		pkgname => $pkgname,
		missing_deps => {},
		dirs => {}, 
		need_dirs => {}, 
		deps => {},
		problems => {},
		avail => \@@available
	} unless defined $db->{$pkgname};
	my $t = $db->{$pkgname};

	$plist->check_common_dirs($t)
}

sub parent_has_dir
{
	my ($db, $t, $dir) = @@_;

	for my $dep (keys %{$t->{deps}}) {
		if (!defined $db->{$dep}) {
		    if (!defined $t->{missing_deps}->{$dep}) {
			    print $t->{pkgname}, ": $dep not found\n";
			    $t->{missing_deps}->{$dep} = 1;
		    }
		    next;
		}
		if ($db->{$dep}->{dirs}->{$dir} || 
		    parent_has_dir($db, $db->{$dep}, $dir)) {
			$t->{dirs}->{$dir} = 1;
			return 1;
		}
	}
	return 0;
}

sub parent_has_dir_issue
{
	my ($db, $t, $dir) = @@_;
	for my $dep (keys %{$t->{deps}}) {
		next if !defined $db->{$dep};
		if ($db->{$dep}->{problems}->{$dir}) {
			return 1;
		}
	}
	return 0;
}

sub build_dir_results
{
	my ($db, $mtree) = @@_;

	for my $pkgname (keys %$db) {
		my $t = $db->{$pkgname};
		for my $dir (keys(%{$t->{need_dirs}})) {
			next if $t->{dirs}->{$dir};
			next if $mtree->{$dir};
			next if parent_has_dir($db, $t, $dir);
			$t->{problems}->{$dir} = 1;
		}
	}
}

sub show_dir_results
{
	my ($db, $mtree) = @@_;

# first reverse the results
	my $dir_db = {};
	for my $pkgname (keys %$db) {
		my @@l=();
		my $t = $db->{$pkgname};
		for my $dir (keys %{$t->{problems}}) {
			next if parent_has_dir_issue($db, $t, $dir);
			$dir_db->{$dir} = [] if !defined $dir_db->{$dir};
			push(@@{$dir_db->{$dir}}, $pkgname);
		}
	}
# and print the resulting table:
	for my $dir (sort keys %$dir_db) {
		print $dir, ": ", join(',', sort @@{$dir_db->{$dir}}), "\n";
	}
}

my $filehash={};
my %dirhash=();
my $conflicts={};
my $dephash={};
my $db = {};
my $mtree = {};
our ($opt_d, $opt_v, $opt_C, $opt_D, $opt_f);

sub handle_plist
{
	my $plist = shift;
	print $plist->pkgname(), "\n" if $opt_v;
	$plist->forget();
	if ($opt_C) {
	    $conflicts->{$plist->pkgname()} = 
		OpenBSD::PkgCfl->make_conflict_list($plist);
	    $plist->register($filehash, $dephash, $plist->pkgname(), \@@available);
	}
	if ($opt_D) {
	    analyze_dirs($plist, $db);
	}
}


sub handle_file
{
	my $filename = shift;
	my $plist = OpenBSD::PackingList->fromfile($filename);
	if (!defined $plist) {
		print STDERR "Error reading $filename\n";
		return;
	}
	handle_plist($plist);
}

my $ui = OpenBSD::State->new('find-plist-issues');
$ui->usage_is('[-vCDf] [-d plist_dir] [pkgname ...]');
$ui->do_options(sub { getopts('d:vCDf'); });

OpenBSD::Mtree::parse($mtree, '/', '/etc/mtree/4.4BSD.dist');
OpenBSD::Mtree::parse($mtree, '/', '/etc/mtree/BSD.x11.dist');
$mtree->{'/usr/local/lib/X11'} = 1;
$mtree->{'/usr/local/include/X11'} = 1;
$mtree->{'/usr/local/lib/X11/app-defaults'} = 1;

print "Scanning packages\n" if $opt_v;
print "-----------------\n" if $opt_v;
if ($opt_d) {
	for my $dirname (split(/:/, $opt_d)) {
		opendir(my $dir, $dirname) or next;
		push(@@available, grep { $_ ne '.' && $_ ne '..' } readdir($dir));
		closedir($dir);
	}
	for my $dirname (split(/:/, $opt_d)) {
	    if (opendir(my $dir, $dirname)) {
		    while (my $pkgname = readdir($dir)) {
			next if $pkgname eq '.' or $pkgname eq '..';
			handle_file("$dirname/$pkgname");
		    }
		    closedir($dir);
	    } else {
	    	print STDERR "No such dir: $dirname\n";
	    }
	}
} elsif (@@ARGV==0) {
	@@ARGV=(<*.tgz>);
}

my @@pkgs = @@ARGV;
push(@@available, map { s,.*/,,; s/\.tgz$//; } @@pkgs);

for my $pkgname (@@ARGV) {
	print STDERR "$pkgname\n";
	if ($opt_f) {
		handle_file($pkgname);
	} else {
		my $plist = $ui->repo->grabPlist($pkgname);
		next unless $plist;
		handle_plist($plist);
	}
}

print "File problems:\n";
print "-------------\n";
if ($opt_C) {
	compute_conflicts($filehash, $conflicts, $dephash);
	for my $cfl (sort keys %$cache2) {
		print "$cfl\n";
		for my $f (sort @@{$cache2->{$cfl}}) {
			print "\t$f\n";
		}
	}
}

if ($opt_D) {
	build_dir_results($db, $mtree);
	show_dir_results($db);
}
@


1.10
log
@convert to newer interface. MAKE SURE you have -current pkg_add to run register_plist !
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.9 2010/06/09 13:59:37 espie Exp $
a346 1
OpenBSD::Mtree::parse($mtree, '/usr/local', '/etc/mtree/BSD.local.dist');
@


1.9
log
@switch to new interface
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.7 2007/05/12 14:56:21 espie Exp $
a35 1
use OpenBSD::PackageLocator;
d385 1
a385 1
		my $plist = OpenBSD::PackageLocator->grabPlist($pkgname);
@


1.8
log
@Update for new BSD.x11.dist which is rooted at '/'. ok espie@@
@
text
@d41 1
a41 1
use OpenBSD::Error;
d344 3
a346 6
set_usage('find-all-conflicts [-vCDf] [-d plist_dir] [pkgname ...]');
try {
    getopts('d:vCDf');
} catchall {
	Usage($_);
};
@


1.7
log
@use newest PkgSpec interface
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.6 2006/03/04 13:02:04 espie Exp $
d353 1
a353 1
OpenBSD::Mtree::parse($mtree, '/usr/X11R6', '/etc/mtree/BSD.x11.dist');
@


1.6
log
@remove erroneous optimization
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.5 2006/02/12 16:33:35 espie Exp $
d55 1
a55 1
		my @@m = OpenBSD::PkgSpec::match($self->{pattern}, @@$l);
d237 1
a237 1
	$plist->visit('check_common_dirs', $t)
d325 1
a325 1
	    $plist->visit('register', $filehash, $dephash, $plist->pkgname(), \@@available);
@


1.5
log
@cache even more stuff.
avoid half the computation in conflicts.

allows to specify packing-lists directly.
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.4 2005/12/12 13:37:21 espie Exp $
d196 1
a196 1
			    	next if $pkg le $pkg2;
@


1.4
log
@be more specific about conflict handling: conflicts can be registered at
any level in the dependency tree, but we shouldn't mark as conflicting packages
that do depend on each other or that have common dependencies.

Issue noticed by alek@@ on plone vs. zope.
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.3 2005/09/13 20:48:41 espie Exp $
d144 1
d150 4
d155 3
a157 1
	if (defined $conflicts->{$pkg} && $conflicts->{$pkg}->conflicts_with($pkg2)) {
d162 2
a163 1
	    	if (find_a_conflict($conflicts, $deps, $dep, $pkg2)) {
d170 2
a171 1
	    	if (find_a_conflict($conflicts, $deps, $pkg, $dep)) {
d176 1
d196 1
a196 1
			    	next if $pkg eq $pkg2;
d315 1
a315 1
our ($opt_d, $opt_v, $opt_C, $opt_D);
d344 1
a344 1
set_usage('find-all-conflicts [-vCD] [-d plist_dir] [pkgname ...]');
d346 1
a346 1
    getopts('d:vCD');
d386 7
a392 3
	my $plist = OpenBSD::PackageLocator->grabPlist($pkgname);
	next unless $plist;
	handle_plist($plist);
@


1.3
log
@use new interface to Locator
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.2 2005/09/05 14:39:57 espie Exp $
d148 1
d183 2
a184 1
				my $keepit = 0;
d186 1
a186 1
				next if $pkg2 eq $pkg;
@


1.2
log
@use PkgSpec to work on plists (since they have no def value...)
rearrange output of common-dirs to be more usable.
@
text
@d3 1
a3 1
# $OpenBSD: find-plist-issues,v 1.1 2005/09/05 10:17:05 espie Exp $
d305 1
a305 2

sub handle_file
d307 2
a308 7
	my $filename = shift;
	my $plist = OpenBSD::PackingList->fromfile($filename);
	if (!defined $plist) {
		print STDERR "Error reading $filename\n";
		return;
	}
	print "$filename -> ", $plist->pkgname(), "\n" if $opt_v;
d320 12
d369 2
a370 1
push(@@available, map { s,.*/,,; s/\.tgz$//; } @@ARGV);
d374 3
a376 6
	my $true_package = OpenBSD::PackageLocator->find($pkgname);
	next unless $true_package;
	my $dir = $true_package->info();
	$true_package->close();
	handle_file($dir.CONTENTS);
	rmtree($dir);
@


1.1
log
@merge code for find-all-conflicts and check-common-dirs, since there is
a lot of shared logic in there.
@
text
@d3 1
a3 1
# $OpenBSD$
d45 2
d51 13
d81 1
a81 1
	my ($self, $all_conflict, $all_deps, $pkgname) = @@_;
d108 1
a108 1
	my ($self, $all_conflict, $all_deps, $pkgname) = @@_;
d113 1
d117 1
d121 1
d143 1
d220 2
a221 1
		problems => {}
d280 3
a282 1
	for my $pkgname (sort keys %$db) {
d287 2
a288 4
			push(@@l, $dir);
		}
		if (@@l != 0) {
			print "$pkgname: ", join(', ', sort @@l), "\n";
d290 4
d319 1
a319 1
	    $plist->visit('register', $filehash, $dephash, $plist->pkgname());
d343 16
a358 6
	opendir(my $dir, $opt_d);
	while (my $pkgname = readdir($dir)) {
	    next if $pkgname eq '.' or $pkgname eq '..';
	    handle_file("$opt_d/$pkgname");
    	}
	closedir($dir);
d362 2
@

