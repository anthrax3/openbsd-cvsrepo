head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.40
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.36
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.38
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.34
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.32
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.30
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.28
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.26
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.24
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.22
	OPENBSD_5_0:1.4.0.20
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.18
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.16
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4;
locks; strict;
comment	@# @;


1.4
date	2007.01.16.18.15.53;	author sturm;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.15.11.19.46;	author bernd;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.15.09.58.55;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.10.17.34.41;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@check build depends (currently duplicates most of check_run_deps())

ok bernd
@
text
@#!/usr/bin/perl

# $OpenBSD: check-indirect-dependencies,v 1.3 2006/12/15 11:19:46 bernd Exp $
# Copyright (c) 2006 Nikolay Sturm <sturm@@openbsd.org>.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
# PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# reduce the amount of direct dependencies by pointing out those which
# are pulled in as indirect dependencies

use strict;
use warnings;
use Cwd;

my $cwd = getcwd;
my $mainport;
my $make = $ENV{MAKE} || "make";
my $portsdir = $ENV{PORTSDIR} || "/usr/ports";

sub check_build_deps()
{
	my %directdeps;
	my %indirectdeps;

	print "===> Checking build dependencies\n";
	open(my $builddirdepends, "-|", "$make build-dir-depends") or
	    die "Cannot execute '$make build-dir-depends': $!\n";
	while (<$builddirdepends>) {
		chomp;
		my ($port, $builddep) = split;
		my @@dirstack;
		$mainport = $port if not defined $mainport;
		next if $port ne $mainport;

		chdir("$portsdir/$builddep") or
		    die "Cannot chdir to $portsdir/$builddep\n";
		open(my $rundirdepends, "-|", "$make run-dir-depends") or
		    die "Cannot execute '$make run-dir-depends': $!\n";
		while (<$rundirdepends>) {
			chomp;
			my ($innerport, $rundep) = split;
			next if $innerport eq $rundep;

			if (not @@dirstack) {
				push @@dirstack, $mainport, $innerport, $rundep;
			} elsif ($dirstack[-1] eq $innerport) {
				push @@dirstack, $rundep;
			} else {
				while ($dirstack[-1] ne $innerport) {
					pop @@dirstack;
				}
				push @@dirstack, $rundep;
			}

			if (exists $directdeps{$rundep}) {
				print "probably unneeded dependency: $rundep\n";
				print join(' -> ', @@dirstack) . "\n\n";
			}
			$indirectdeps{$rundep} = [ @@dirstack ];
		}
		close $rundirdepends;

		if (exists $indirectdeps{$builddep}) {
			print "probably unneeded dependency: $builddep\n";
			print join(' -> ', @@{$indirectdeps{$builddep}});
			print "\n\n";
			next;
		}
		$directdeps{$builddep} = 1;
	}
	close $builddirdepends;

	chdir($cwd) or die "Cannot chdir to $cwd\n";
}

sub check_run_deps()
{
	my %directdeps;
	my %indirectdeps;
	my @@dirstack;

	print "===> Checking run dependencies\n";
	open(my $rundirdepends, "-|", "$make run-dir-depends") or
	    die "Cannot execute '$make run-dir-depends': $!\n";
	while (<$rundirdepends>) {
		chomp;
		my ($port, $rundep) = split;
		$mainport = $port if not defined $mainport;
		next if $port eq $rundep;

		if (not @@dirstack) {
			push @@dirstack, $port, $rundep;
		} elsif ($dirstack[-1] eq $port) {
			push @@dirstack, $rundep;
		} else {
			while ($dirstack[-1] ne $port) {
				pop @@dirstack;
			}
			push @@dirstack, $rundep;
		}

		if ($port eq $mainport) {
			if (exists $indirectdeps{$rundep}) {
				print "probably unneeded dependency: $rundep\n";
				print join(' -> ', @@{$indirectdeps{$rundep}});
				print "\n\n";
				next;
			}
			$directdeps{$rundep} = 1;
		} else {
			if (exists $directdeps{$rundep}) {
				print "probably unneeded dependency: $rundep\n";
				print join(' -> ', @@dirstack) . "\n\n";
			}
			$indirectdeps{$rundep} = [ @@dirstack ];
		}
	}
	close $rundirdepends;
}

check_build_deps();
check_run_deps();
@


1.3
log
@Output beautification. One chunk from sturm@@, two chunks by myself.

ok sturm@@
@
text
@d3 1
a3 1
# $OpenBSD: check-indirect-dependencies,v 1.2 2006/12/15 09:58:55 sturm Exp $
d32 1
d34 1
d37 1
d39 57
a95 1
sub check_deps($)
a96 1
	my $kind = shift;
d101 4
a104 5
	print "===> Checking $kind dependencies\n";

	open(my $dirdepends, "-|", "$make $kind-dir-depends") or
	    die "Cannot execute '$make $kind-dir-depends': $!\n";
	while (<$dirdepends>) {
d106 1
a106 1
		my ($port, $dep) = split;
d108 1
d111 1
a111 2
			push @@dirstack, $port;
			push @@dirstack, $dep;
d113 1
a113 1
			push @@dirstack, $dep;
d118 1
a118 1
			push @@dirstack, $dep;
d122 4
a125 3
			if (exists $indirectdeps{$dep}) {
				print "\nprobably unneeded dependency: $dep\n";
				print join(' -> ', @@{$indirectdeps{$dep}})."\n";
d128 1
a128 1
			$directdeps{$dep} = 1;
d130 3
a132 3
			if (exists $directdeps{$dep}) {
				print "\nprobably unneeded dependency: $dep\n";
				print join(' -> ', @@dirstack)."\n";
d134 1
a134 1
			$indirectdeps{$dep} = [ @@dirstack ];
d137 1
a137 5
	close $dirdepends;
}

for my $kind ("run") {
	check_deps($kind);
d140 2
@


1.2
log
@don't check build dependencies for now, these have to be compared against
indirect run dependencies which needs a little more code
@
text
@d3 1
a3 1
# $OpenBSD: check-indirect-dependencies,v 1.1 2006/12/10 17:34:41 sturm Exp $
d43 1
a43 1
	print "checking $kind dependencies\n";
d67 1
a67 1
				print "@@{$indirectdeps{$dep}}\n";
d74 1
a74 1
				print "@@dirstack\n";
@


1.1
log
@reduce the amount of direct dependencies by pointing out those which
are pulled in as indirect dependencies

ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: dpb,v 1.13 2005/03/03 21:08:03 sturm Exp $
d82 1
a82 1
for my $kind ("build", "run") {
@

