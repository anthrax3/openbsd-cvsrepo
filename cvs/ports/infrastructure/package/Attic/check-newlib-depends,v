head	1.39;
access;
symbols
	OPENBSD_4_1:1.21.0.2
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8;
locks; strict;
comment	@# @;


1.39
date	2007.06.02.12.23.28;	author espie;	state dead;
branches;
next	1.38;

1.38
date	2007.05.23.10.34.15;	author espie;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.21.21.43.50;	author espie;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.21.21.38.01;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.21.21.24.56;	author espie;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.21.21.23.45;	author espie;	state Exp;
branches;
next	1.33;

1.33
date	2007.05.21.21.02.14;	author espie;	state Exp;
branches;
next	1.32;

1.32
date	2007.05.21.20.52.33;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2007.05.21.20.39.27;	author espie;	state Exp;
branches;
next	1.30;

1.30
date	2007.05.21.20.20.50;	author espie;	state Exp;
branches;
next	1.29;

1.29
date	2007.05.21.20.14.28;	author espie;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.21.14.41.38;	author espie;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.21.14.15.31;	author espie;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.13.08.03.47;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2007.04.08.12.36.04;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.03.10.13.27;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.03.10.05.50;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2007.03.31.15.26.45;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2007.01.11.18.45.18;	author bernd;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.18.12.53.09;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2006.11.11.13.11.45;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2006.11.11.12.44.26;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.23.11.19.35;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.23.10.54.45;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.20.18.10.25;	author bernd;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.20.15.09.24;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.20.14.40.29;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.30.14.09.47;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.13.20.48.41;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2005.09.10.09.48.54;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.26.11.52.58;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.07.11.15.33;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.06.12.05.11;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.05.11.36.26;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.02.20.45.37;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.31.10.09.42;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2005.01.31.09.51.32;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.11.14.35.05;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.11.14.27.57;	author espie;	state Exp;
branches;
next	;


desc
@@


1.39
log
@finish killing old stuff, you should have updated by now.
@
text
@#!/usr/bin/perl

# $OpenBSD: check-newlib-depends,v 1.38 2007/05/23 10:34:15 espie Exp $
# Copyright (c) 2004 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check all packages in the current directory, and report library issues

use strict;
use warnings;

use File::Spec;
use File::Path;
use File::Basename;
use OpenBSD::PackageLocator;
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
use OpenBSD::SharedLibs;
use File::Temp;
use Getopt::Std;

our ($opt_o, $opt_d, $opt_f, $opt_B);
my $errors = 0;


package FakeFileSource;
sub new
{
	my ($class, $location) = @@_;
	bless {location => $location }, $class
}

sub retrieve
{
	my ($self, $item) = @@_;
	return $self->{location}.$item->fullname;
}

sub skip
{
}

sub clean
{
}

package RealFileSource;
sub new
{
	my ($class, $handle, $location) = @@_;
	bless {handle => $handle, location => $location }, $class;
}

sub prepare_to_extract
{
	my ($self, $item) = @@_;
	require OpenBSD::ArcCheck;
	my $o = $self->{handle}->next;
	$o->{cwd} = $item->cwd;
	if (!$o->check_name($item)) {
		die "Error checking name for $o->{name} vs. $item->{name}\n";
	}
	$o->{name} = $item->fullname;
	$o->{destdir} = $self->{location};
	return $o;
}

sub extracted_name
{
	my ($self, $item) = @@_;
	return $self->{location}.$item->fullname;
}
sub retrieve
{
	my ($self, $item) = @@_;
	my $o = $self->prepare_to_extract($item);
	$o->create;
	return $self->extracted_name($item);
}

sub skip
{
	my ($self, $item) = @@_;
	my $o = $self->prepare_to_extract($item);
	$self->{handle}->skip;
}

sub clean
{
	my ($self, $item) = @@_;
	unlink($self->extracted_name($item));
}

package Issue;
sub new
{
	my ($class, $lib, $binary, @@packages) = @@_;
	bless { lib => $lib, binary => $binary, packages => \@@packages }, 
		$class;
}

sub stringize
{
	my $self = shift;
	my $string = $self->{lib};
	if (@@{$self->{packages}} > 0) {
		$string.=" from ".join(',', @@{$self->{packages}});
	}
	return $string." ($self->{binary})";
}

sub do_record_wantlib
{
	my ($self, $h) = @@_;
	my $want = $self->{lib};
	$want =~ s/\.\d+$//;
	$h->{$want} = 1;
}

sub record_wantlib
{
}

sub print_error_not_reachable
{
	return 0;
}

package Issue::system_lib;
our @@ISA=(qw(Issue));
sub print
{
	my $self = shift;
	print "WANTLIB:       ", $self->stringize, " (system lib)\n";
}

sub record_wantlib
{
	&Issue::do_record_wantlib;
}
package Issue::direct_dependency;
our @@ISA=(qw(Issue));
sub print
{
	my $self = shift;
	print "LIB_DEPENDS:   ", $self->stringize, "\n";
}

package Issue::indirect_dependency;
our @@ISA=(qw(Issue));
sub print
{
	my $self = shift;
	print "WANTLIB:       ", $self->stringize, "\n";
}

sub record_wantlib
{
	&Issue::do_record_wantlib;
}

package Issue::not_reachable;
our @@ISA=(qw(Issue));
sub print
{
	my $self = shift;
	print "Missing lib:   ", $self->stringize, " (NOT REACHABLE)\n";
}

sub print_error_not_reachable
{
	my $self = shift;
	print "Bogus WANTLIB: ", $self->stringize, " (NOT REACHABLE)\n";
	return 1;
}

package OpenBSD::PackingElement;
sub record_needed_libs
{
}

sub register_libs
{
}

sub depwalk
{
}

package OpenBSD::PackingElement::Wantlib;
sub register_libs
{
	my ($item, $t) = @@_;
	my $name = $item->{name};
	$name =~ s/^(.*\/)?(.*)\.(\d+)\.\d+$/$2.$3/;
	$t->{$name} = 1;
}

package OpenBSD::PackingElement::Lib;

sub register_libs
{
	my ($item, $t) = @@_;
	if ($item->fullname =~ m/^(.*\/)?lib(.*)\.so\.(\d+)\.\d+$/) {
		$t->{"$2.$3"} = 2;
	}
}

package OpenBSD::PackingElement::FileBase;
use File::Basename;
sub shellquote
{
	local $_ = shift;
	s/[*?;() #\\'"`\${}]/\\$&/g;
	return $_;
}

sub record_needed_libs
{
	my ($item, $t, $source) = @@_;
	my $fullname = File::Spec->canonpath($item->fullname);

	my $linux_bin = 0;
	my $freebsd_bin = 0;
	if ($fullname =~ m,^/usr/local/emul/redhat/,) {
		$linux_bin = 1;
	}
	if ($fullname =~ m,^/usr/local/emul/freebsd/,) {
		$freebsd_bin = 1;
	}
	if ($linux_bin || $freebsd_bin || $item->{symlink} || $item->{link}) {
		$source->skip($item);
		return;
	}
	my $n = shellquote($source->retrieve($item));
	my $cmd;
	if ($main::opt_o) {
		open($cmd, "ldd -f 'NEEDED lib%o.so.%m.%n\\n'|");
	} else {
		open($cmd, "objdump -p $n 2>/dev/null|");
	}
	my @@l;
	while(my $line = <$cmd>) {
		if ($line =~ m/^\s+NEEDED\s+(.*?)\s*$/) {
			my $lib = $1;
			push(@@l, $lib);
			# detect linux binaries
			if ($lib eq 'libc.so.6') {
				$linux_bin = 1;
			}
		}
	}
	close($cmd);
	# okay, we are not OpenBSD, we don't have sensible names
	unless ($linux_bin or $freebsd_bin) {
		for my $lib (@@l) {
			# don't look for modules
			next if $lib =~ m/\.so$/;
			$lib =~ s/^(.*\/)?lib(.*)\.so\.(\d+)\.\d+$/$2.$3/;
			if ($main::opt_f) {
			    push(@@{$t->{$lib}}, $fullname);
			} else {
			    $t->{$lib} = $fullname;
			}
		}
	}
	$source->clean($item);
}

package OpenBSD::PackingElement::Dependency;

sub depwalk
{
	my ($self, $h) = @@_;
	$h->{$self->{def}} = $self->{pkgpath};
}

package main;

getopts('od:f:B:');

my $dependencies = {};

sub register_dependencies
{
	my $plist = shift;
	my $pkgname = $plist->pkgname();
	my $h = {};
	$dependencies->{$pkgname} = $h;
	$plist->depwalk($h);
}

sub get_plist
{
	my ($pkgname, $pkgpath) = @@_;

	# try physical package
	if (defined $opt_d) {
		my $location = "$opt_d/$pkgname.tgz";

		my $true_package = OpenBSD::PackageLocator->find($pkgname);
		if ($true_package) {
			my $dir = $true_package->info();
			# twice read
			if (-d $dir) {
				my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
				$true_package->close();
				rmtree($dir);
				return $plist;
			}
		}
	}
	# ask the ports tree
	my $portsdir = $ENV{PORTSDIR} || "/usr/ports";
	my $make = $ENV{MAKE} || "make";
	open my $fh, "cd $portsdir && env -i SUBDIR=$pkgpath ECHO_MSG=: make print-plist-with-depends |" or return undef;
	my $plist = OpenBSD::PackingList->read($fh);
	close $fh;
	return $plist;
}

sub handle_dependency
{
	my ($pkgname, $pkgpath) = @@_;
	my $plist = get_plist($pkgname, $pkgpath);

	if (!defined $plist || !defined $plist->pkgname) {
		print "Error: can't solve dependency for $pkgname/$pkgpath\n";
		print "Error: use -d directory or set the PORTSDIR correctly\n";
		return;
	}

	if ($plist->pkgname ne $pkgname) {
		delete $dependencies->{$pkgname};
		for my $p (keys %$dependencies) {
			if ($dependencies->{$p}->{$pkgname}) {
				$dependencies->{$p}->{$plist->pkgname()} =
				    $dependencies->{$p}->{$pkgname};
				delete $dependencies->{$p}->{$pkgname};
			}
		}
	}

	register_dependencies($plist);
	OpenBSD::SharedLibs::add_libs_from_plist($plist);

	return $plist->pkgname();
}

sub report_lib_issue
{
	my ($plist, $lib, $binary) = @@_;

	OpenBSD::SharedLibs::add_libs_from_system('/');
	my $libspec = "$lib.0";
	my $want = $lib;
	$want =~ s/\.\d+$//;
	for my $dir (qw(/usr /usr/X11R6)) {
		my @@r = OpenBSD::SharedLibs::lookup_libspec($dir, $libspec);
		if (grep { $_ eq 'system' } @@r) {
			return Issue::system_lib->new($lib, $binary);
		}
	}

	while (my ($p, $pkgpath) = each %{$dependencies->{$plist->pkgname}}) {
		next if defined $dependencies->{$p};
		handle_dependency($p, $pkgpath);
	}

	my @@r = OpenBSD::SharedLibs::lookup_libspec('/usr/local', $libspec);
	if (@@r > 0) {
		for my $p (@@r) {
			if (defined $dependencies->{$plist->pkgname}->{$p}) {
				return Issue::direct_dependency->new($lib, $binary, $p);
			}
		}
	}
	# okay, let's walk for WANTLIB
	my @@todo = %{$dependencies->{$plist->pkgname}};
	my $done = {};
	while (@@todo >= 2) {
		my $path = pop @@todo;
		my $dep = pop @@todo;
		next if $done->{$dep};
		$dep = handle_dependency($dep, $path)
		    	unless defined $dependencies->{$dep};
		$done->{$dep} = 1;
		push(@@todo, %{$dependencies->{$dep}});
	}
	@@r = OpenBSD::SharedLibs::lookup_libspec('/usr/local', $libspec);
	for my $p (@@r) {
		if (defined $done->{$p}) {
			return Issue::indirect_dependency->new($lib, $binary, $p);
		}
	}
	return Issue::not_reachable->new($lib,, $binary, @@r);
}

sub print_list
{
	my ($head, $h) = @@_;

	my $line = "";
	for my $k (sort keys %$h) {
		if (length $line > 50) {
			print $head, $line, "\n";
			$line = "";
		}
		$line .= ' '.$k;
	}
	if ($line ne '') {
		print $head, $line, "\n";
	}
}

sub analyze 
{
	my ($plist, $db, $source, @@l) = @@_;

	my $pkgname = $plist->pkgname();
	my $t = { haslib => {}, needlib => {} };
	$plist->record_needed_libs($t->{needlib}, $source, @@l);
	$plist->register_libs($t->{haslib});

	if (!defined $dependencies->{$pkgname}) {
		register_dependencies($plist);
		OpenBSD::SharedLibs::add_libs_from_plist($plist);
	}
	my $r = { wantlib => {}, libdepends => {}, wantlib2 => {} };
	for my $lib (sort keys %{$t->{needlib}}) {
		my $fullname = $t->{needlib}->{$lib};
		$fullname = $fullname->[0] if $opt_f;
		if (!defined $t->{haslib}->{$lib}) {
			my $issue = report_lib_issue($plist, $lib, $fullname);
			$issue->print;
			$errors++;
			$issue->record_wantlib($r->{wantlib});
		} elsif ($t->{haslib}->{$lib} == 1) {
			my $issue = report_lib_issue($plist, $lib, $fullname);
			if ($issue->print_error_not_reachable) {
				$errors++;
			}
		}
		$t->{haslib}->{$lib} = 2;
	}
	for my $k (sort keys %{$t->{haslib}}) {
		my $v = $t->{haslib}->{$k};
		next if $v == 2;
		print "Extra:         $k\n";
	}
	print_list("\tWANTLIB +=", $r->{wantlib});
	if ($opt_f) {
	    for my $lib (sort keys %{$t->{needlib}}) {
		    print "$lib:\t\n";
		    for my $binary (sort @@{$t->{needlib}->{$lib}}) {
			    print "\t$binary\n";
		    }
	    }
	}
}

my $db = {};
sub do_pkg
{
	my $pkgname = shift;

	print "\n$pkgname:\n";
	my $true_package = OpenBSD::PackageLocator->find($pkgname);
	return 0 unless $true_package;
	my $dir = $true_package->info();
	# twice read
	return 0 unless -d $dir;
	my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
	if ($opt_B) {
		analyze($plist, $db, FakeFileSource->new($opt_B));
	} else {
		my $temp = File::Temp::mkdtemp("/tmp/zoinx.XXXXXXXXXX");
		analyze($plist, $db, RealFileSource->new($true_package, $temp));
		rmtree($temp);
	}
	$true_package->close;
	$true_package->wipe_info;
	$plist->forget;
	return 1;
}

sub do_plist
{
	my $plist = OpenBSD::PackingList->read(\*STDIN);
	if (!defined $plist->{name}) {
		print STDERR "Error reading plist\n";
		$errors++;
	} else {
		my $pkgname = $plist->pkgname;
		print "\n$pkgname:\n";
		analyze($plist, $db, FakeFileSource->new($opt_B));
	}
}

if (@@ARGV == 0 && defined $opt_B) {
	do_plist();
} else {
    for my $pkgname (@@ARGV) {
	    do_pkg($pkgname);
    }
}

exit($errors ? 1 : 0);
@


1.38
log
@synch with pkg_add src/ changes
@
text
@d3 1
a3 1
# $OpenBSD: check-lib-depends,v 1.6 2007/05/22 10:39:05 espie Exp $
@


1.37
log
@we don't bother building hardlinks either
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.36 2007/05/21 21:38:01 espie Exp $
d356 1
a356 1
	OpenBSD::SharedLibs::add_plist_libs($plist);
d365 1
a365 1
	OpenBSD::SharedLibs::add_system_libs('/');
d438 1
a438 1
		OpenBSD::SharedLibs::add_plist_libs($plist);
@


1.36
log
@oops again: make sure we create the correct files.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.35 2007/05/21 21:24:56 espie Exp $
d242 1
a242 1
	if ($linux_bin || $freebsd_bin || $item->{symlink}) {
@


1.35
log
@zap debug line
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.34 2007/05/21 21:23:45 espie Exp $
d62 1
a62 1
	bless {handle => $handle, location => $location }, $class
d70 1
a70 2
	$o->{destdir} = $self->{location};
	$o->{cwd} = $item->{cwd};
d74 2
a246 1
	# this will fail because of links, so we don't care.
@


1.34
log
@use the new code to ALSO report libraries recorded in WANTLIB (and used)
that are actually not reachable.

Reword the print-out slightly, I think it looks nicer ;-)
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.33 2007/05/21 21:02:14 espie Exp $
a459 1
		print "WANTLIB:       ", $self->stringize, " (system lib)\n";
@


1.33
log
@oops
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.32 2007/05/21 20:52:33 espie Exp $
d112 1
a112 1
sub origin
d115 1
d117 1
a117 3
		return " from ".join(',', @@{$self->{packages}});
	} else {
		return "";
d119 1
d134 5
d144 1
a144 1
	print "Missing system lib: $self->{lib} ($self->{binary})\n";
d156 1
a156 1
	print "Missing $self->{lib}".$self->origin." ($self->{binary}) (probably LIB_DEPENDS\n";
d164 1
a164 1
	print "Missing $self->{lib}".$self->origin." ($self->{binary}) (reachable through dependencies: WANTLIB)\n";
d177 1
a177 1
	print "Missing $self->{lib}".$self->origin." ($self->{binary}) (NOT REACHABLE)\n";
d180 6
d449 5
d460 2
a461 1
		print "Extra: $k\n";
@


1.32
log
@unify reporting of lib issues
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.31 2007/05/21 20:39:27 espie Exp $
d172 1
a172 1
	print "Missing $self->{lib}".$self->origin." ($self->{binary}) (NOT REACHABLE\n";
d396 1
a396 1
	return Issue->not_reachable($lib,, $binary, @@r);
d435 3
a437 5
			if (!$issue) {
				$issue->print;
				$errors++;
				$issue->record_wantlib($r->{wantlib});
			}
@


1.31
log
@Create error objects based on library stuff.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.30 2007/05/21 20:20:50 espie Exp $
d122 12
d142 4
d162 5
d352 1
a352 1
	my ($plist, $lib, $binary, $r) = @@_;
d361 1
a361 5
			my $i = Issue::system_lib->new($lib, $binary);
			$i->print;
			$errors++;
			$r->{wantlib}->{$want} = 1;
			return;
d374 1
a374 4
				my $i = Issue::direct_dependency->new($lib, $binary, $p);
				$i->print;
				$errors++;
				return;
d393 1
a393 5
			my $i = Issue::indirect_dependency->new($lib, $binary, $p);
			$i->print;
			$r->{wantlib}->{$want} = 1;
			$errors++;
			return;
d396 1
a396 3
	my $i = Issue->not_reachable($lib,, $binary, @@r);
	$i->print;
	$errors++;
d434 6
a439 1
			report_lib_issue($plist, $lib, $fullname, $r);
@


1.30
log
@separate usage of variables.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.29 2007/05/21 20:14:28 espie Exp $
d104 50
a153 1
package OpenBSD::PackingList;
d340 2
a341 1
			print "Missing system lib: $lib ($binary)\n";
d357 2
a358 1
				print "Missing: $lib from $p ($binary) (probably LIB_DEPENDS)\n";
d377 7
a383 8
	if (@@r > 0) {
		for my $p (@@r) {
			if (defined $done->{$p}) {
				print "Missing: $lib from $p ($binary) (reachable through dependencies: WANTLIB)\n";
				$r->{wantlib}->{$want} = 1;
				$errors++;
				return;
			}
a384 3
		print "Missing $lib (coming from ", join(',', @@r), " ($binary) (NOT REACHABLE)\n";
		$errors++;
		return;
d386 2
a387 1
	print "Missing: $lib ($binary): NOT REACHABLE\n";
@


1.29
log
@$o->method()  becomes $o->method
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.28 2007/05/21 14:41:38 espie Exp $
d287 1
d291 1
a291 1
			print "Missing system lib: $want ($binary)\n";
a292 1
			$want =~ s/\.\d+$//;
d307 1
a307 1
				print "Missing: $want from $p ($binary) (probably LIB_DEPENDS)\n";
d329 1
a329 2
				print "Missing: $want from $p ($binary) (reachable through dependencies: WANTLIB)\n";
				$want =~ s/\.\d+$//;
d335 1
a335 1
		print "Missing $want (coming from ", join(',', @@r), " ($binary) (NOT REACHABLE)\n";
d339 1
a339 1
	print "Missing: $want ($binary): NOT REACHABLE\n";
@


1.28
log
@slightly clearer code: retrieve files through a FileSource, that abstracts
all details of archive extraction (or not).
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.27 2007/05/21 14:15:31 espie Exp $
d257 1
a257 1
	if (!defined $plist || !defined $plist->pkgname()) {
d263 1
a263 1
	if ($plist->pkgname() ne $pkgname) {
d298 1
a298 1
	while (my ($p, $pkgpath) = each %{$dependencies->{$plist->pkgname()}}) {
d306 1
a306 1
			if (defined $dependencies->{$plist->pkgname()}->{$p}) {
d314 1
a314 1
	my @@todo = %{$dependencies->{$plist->pkgname()}};
@


1.27
log
@cut the main routine into scanning binaries/checking libraries.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.26 2007/05/13 08:03:47 espie Exp $
a35 2
# fake archive handle, since the extraction does not happen...
package FakeHandle;
d37 1
d40 2
a41 1
	return bless {}, "FakeHandle";
d44 1
a44 1
sub next
d46 2
a47 1
	return shift;
d50 1
a50 1
sub create
d52 50
a101 1
	return 0;
d149 3
a151 6
	my ($item, $t, $where, $handle) = @@_;
	my $fullname = File::Spec->canonpath($item->fullname());
	my $file = $handle->next();
	$file->{destdir} = $where;
	$file->{cwd} = $item->cwd();
	$file->{name} = $fullname;
d160 5
d166 14
a179 19
	eval { $file->create(); };
	unless ($@@ or defined $item->{symlink}) {
		my $n = shellquote("$where$fullname");
		my $cmd;
		if ($main::opt_o) {
			open($cmd, "ldd -f 'NEEDED lib%o.so.%m.%n\\n'|");
		} else {
			open($cmd, "objdump -p $n 2>/dev/null|");
		}
		local $_;
		my @@l;
		while(<$cmd>) {
			if (m/^\s+NEEDED\s+(.*?)\s*$/) {
				my $lib = $1;
				push(@@l, $lib);
				# detect linux binaries
				if ($lib eq 'libc.so.6') {
					$linux_bin = 1;
				}
d182 4
a185 5
		close($cmd);
		# okay, we are not OpenBSD, we don't have sensible names
		if ($linux_bin or $freebsd_bin) {
			return;
		}
d197 1
a197 3
	if (!defined $main::opt_B) {
		unlink($where.$fullname);
	}
d363 1
a363 1
	my ($plist, $db, $where, @@l) = @@_;
d367 1
a367 1
	$plist->record_needed_libs($t->{needlib}, $where, @@l);
d412 1
a412 1
		analyze($plist, $db, $opt_B, FakeHandle->new());
d414 7
a420 7
		my $where = File::Temp::mkdtemp("/tmp/zoinx.XXXXXXXXXX");
		analyze($plist, $db, $where, $true_package);
		rmtree($where);
	}
	$true_package->close();
	$true_package->wipe_info();
	$plist->forget();
d431 1
a431 1
		my $pkgname = $plist->pkgname();
d433 1
a433 1
		analyze($plist, $db, $opt_B, FakeHandle->new());
@


1.26
log
@use new-style plist visitors.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.25 2007/04/08 12:36:04 espie Exp $
d57 5
a61 1
sub check_wantlibs
d70 1
a70 1
sub check_wantlibs
d72 1
a72 1
	my ($item, $t, $where, $handle) = @@_;
d75 11
a85 1
	$t->{haslib}->{$name} = 1;
d97 1
a97 1
sub check_wantlibs
d145 1
a145 4
			    if (!defined $t->{needlib}->{$lib}) {
				$t->{needlib}->{$lib} = [];
			    }
			    push(@@{$t->{needlib}->{$lib}}, $fullname);
d147 1
a147 1
			    $t->{needlib}->{$lib} = $fullname;
a150 3
	if ($fullname =~ m/^(.*\/)?lib(.*)\.so\.(\d+)\.\d+$/) {
		$t->{haslib}->{"$2.$3"} = 2;
	}
d323 3
a325 1
	$plist->check_wantlibs($t, $where, @@l);
@


1.25
log
@abort early if packing-list was not read correctly.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.24 2007/04/03 10:13:27 espie Exp $
d168 1
a168 1
	$plist->visit('depwalk', $h);
d315 1
a315 1
	$plist->visit('check_wantlibs', $t, $where, @@l);
@


1.24
log
@error out in case something is not found, remove debug message.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.23 2007/04/03 10:05:50 espie Exp $
d373 8
a380 3
	my $pkgname = $plist->pkgname();
	print "\n$pkgname:\n";
	analyze($plist, $db, $opt_B, FakeHandle->new());
@


1.23
log
@don't restrict -B to the case the packing-list comes from stdin.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.22 2007/03/31 15:26:45 espie Exp $
d34 1
d239 1
d256 1
d280 1
d285 1
d289 1
a357 1
		print "No temp dir\n";
d386 1
a386 1
exit(0);
@


1.22
log
@new mode: can work with packing-list on stdin, and a fake directory as -B
argument.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.21 2007/01/11 18:45:18 bernd Exp $
d351 8
a358 3
	my $where = File::Temp::mkdtemp("/tmp/zoinx.XXXXXXXXXX");
	analyze($plist, $db, $where, $true_package);
	rmtree($where);
@


1.21
log
@It's possible that the package version we get from the ports tree is
different than expected. Teach handle_dependency() how to cope with that.

Debugged with msf@@ some time ago. Fix tested by msf@@, sturm@@ and steven@@.

This also fixes the following error some people have seen:

"Can't use an undefined value as a HASH reference at
/usr/ports/infrastructure/package/check-newlib-depends line 234."

"go for it" espie@@
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.20 2006/12/18 12:53:09 espie Exp $
d33 20
a52 1
our ($opt_o, $opt_d, $opt_f);
d142 3
a144 1
	unlink($where.$fullname);
d157 1
a157 1
getopts('od:f');
d305 1
a305 1
	my ($plist, $db, @@l) = @@_;
a306 1
	my $where = File::Temp::mkdtemp("/tmp/zoinx.XXXXXXXXXX");
a336 1
	rmtree($where);
d351 3
a353 1
	analyze($plist, $db, $true_package);
d360 7
d368 6
a373 2
for my $pkgname (@@ARGV) {
	do_pkg($pkgname);
@


1.20
log
@let check-newlib-depends use the new targets
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.19 2006/11/11 13:11:45 espie Exp $
d189 11
d202 2
d244 2
a246 2
		handle_dependency($dep, $path)
		    	unless defined $dependencies->{$dep};
@


1.19
log
@allows grabbing the packing-list from the ports tree.
suggestion from bernd
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.18 2006/11/11 12:44:26 espie Exp $
d172 1
a172 1
	open my $fh, "cd $portsdir && env -i SUBDIR=$pkgpath ECHO_MSG=: make print-plist |" or return undef;
@


1.18
log
@rename function for future change.
avoid re-reading the same plist for getting the same info (which doesn't
work anyways, so this avoids looking up a package for nothing).
let depwalk stash the pkgpath away for future use.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.17 2006/10/23 11:19:35 espie Exp $
d149 29
d180 2
a181 1
	my $pkgname = shift;
d183 3
a185 3
	if (!defined $opt_d) {
		print "Error: can't solve dependency for $pkgname\n";
		print "Error: use -d directory to find it\n";
a188 10
	my $location = "$opt_d/$pkgname.tgz";

	my $true_package = OpenBSD::PackageLocator->find($pkgname);
	return 0 unless $true_package;
	my $dir = $true_package->info();
	# twice read
	return 0 unless -d $dir;
	my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
	$true_package->close();
	rmtree($dir);
d210 1
a210 1
	for my $p (keys %{$dependencies->{$plist->pkgname()}}) {
d212 1
a212 1
		handle_dependency($p);
d225 1
a225 1
	my @@todo = (keys %{$dependencies->{$plist->pkgname()}});
d227 3
a229 1
	while (my $dep = pop @@todo) {
d232 3
a234 2
		handle_dependency($dep) unless defined $dependencies->{$dep};
		push(@@todo, keys %{$dependencies->{$dep}});
@


1.17
log
@oops, fix.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.16 2006/10/23 10:54:45 espie Exp $
d131 1
a131 1
	$h->{$self->{def}} = 1;
d149 1
a149 1
sub get_plist
d192 1
a192 1
		get_plist($p);
d210 1
a210 1
		get_plist($dep);
@


1.16
log
@-f: display a full listing of which binary uses what library. Useful for
figuring out dependencies in a fine way for creating multi packages.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.15 2006/10/20 18:10:25 bernd Exp $
d273 7
a279 5
	for my $lib (sort keys %{$t->{needlib}}) {
		print "$lib:\t\n";
		for my $binary (sort @@{$t->{needlib}->{$lib}}) {
			print "\t$binary\n";
		}
@


1.15
log
@Add libs which are reachable through dependencies to the cut&paste WANTLIB
output as well.

spotted by alek@@, ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.14 2006/10/20 15:09:24 espie Exp $
d33 1
a33 1
our ($opt_o, $opt_d);
d110 8
a117 1
			$t->{needlib}->{$lib} = $fullname;
d136 1
a136 1
getopts('od:');
d261 1
d273 6
@


1.14
log
@output a simple set of WANTLIB lines you can cut&paste, by popular demand...
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.13 2006/10/20 14:40:29 espie Exp $
d211 2
@


1.13
log
@sort information instead of putting it out in an haphazard way.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.12 2005/12/30 14:09:47 espie Exp $
d168 1
a168 1
	my ($plist, $lib, $binary) = @@_;
d177 2
d220 17
d249 1
d253 1
a253 1
			report_lib_issue($plist, $lib, $fullname);
d262 1
@


1.12
log
@don't bother checking symlinks, they point at a bogus location anyways.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.11 2005/09/13 20:48:41 espie Exp $
d230 2
a231 1
	while (my ($lib, $fullname) = each %{$t->{needlib}}) {
d237 2
a238 1
	while (my ($k, $v) = each %{$t->{haslib}}) {
d250 1
a250 1
	print STDERR "$pkgname:\n";
@


1.11
log
@use new interface to Locator
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.10 2005/09/10 09:48:54 espie Exp $
d81 1
a81 1
	unless ($@@) {
@


1.10
log
@readable error when !-d and a dependent package is needed
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.9 2005/03/26 11:52:58 espie Exp $
d257 1
a257 1
	rmtree($dir);
@


1.9
log
@don't strip the version number from wantlib in reporting issues.
will help people figure out why an incorrect library version is enough
to get lib-depends-check to holler.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.8 2005/03/07 11:15:33 espie Exp $
d145 6
@


1.8
log
@trace dependencies.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.7 2005/03/06 12:05:11 espie Exp $
a166 1
	$want =~ s/\.\d+$//;
@


1.7
log
@let check-newlib-depends diagnose simple missing LIB_DEPENDS.

(will diagnose complicated WANTLIB by walking the dependency path
and checking that the library is indeed reachable soon).
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.6 2005/03/05 11:36:26 espie Exp $
d182 24
a205 4
	for my $p (@@r) {
		if (defined $dependencies->{$plist->pkgname()}->{$p}) {
			print "Missing: $want from $p ($binary) (probably LIB_DEPENDS)\n";
			return;
d207 2
d210 1
a210 1
	print "Missing: $want ($binary)\n";
@


1.6
log
@start looking closer at library origin: report system libs differently.

(dependency walk and caching not finished yet).
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.5 2005/03/02 20:45:37 espie Exp $
d131 10
a140 1
my $done = {};
d156 1
a174 7
#	my $h = {};
#	$plist->visit('depwalk', $h);
#
#	for my $pname (keys %$h) {
#		next if $done->{$pname};
#		$h->{$pname} = get_plist($pname);
#	}
d176 12
d199 4
@


1.5
log
@libs found inside package itself can be marked as used directly.
Reporting these as `Extra' is obviously a bug...
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.4 2005/01/31 10:09:42 espie Exp $
d29 1
d33 1
a33 1
our ($opt_o);
d41 4
d50 1
a50 1
	$name =~ s/^(.*\/)?(.*)\.\d+\.\d+$/$2/;
d109 1
a109 1
			$lib =~ s/^(.*\/)?lib(.*)\.so\.\d+\.\d+$/$2/;
d113 2
a114 2
	if ($fullname =~ m/^(.*\/)?lib(.*)\.so\.\d+\.\d+$/) {
		$t->{haslib}->{$2} = 2;
d119 8
d129 46
a174 1
getopts('o');
d186 1
a186 1
			print "Missing: $lib ($fullname)\n";
@


1.4
log
@support a.out by calling ldd with a format that passes as objdump output.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.3 2005/01/31 09:51:32 espie Exp $
d109 1
a109 1
		$t->{haslib}->{$2} = 1;
@


1.3
log
@do not look at simple modules.
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.2 2004/12/11 14:35:05 espie Exp $
d32 1
d78 6
a83 1
		open(my $cmd, "objdump -p $n 2>/dev/null|");
d115 2
@


1.2
log
@make sure libraries contained in a package are not reported as missing...
@
text
@d3 1
a3 1
# $OpenBSD: check-newlib-depends,v 1.1 2004/12/11 14:27:57 espie Exp $
d96 2
a128 6
}

print "Scanning packages\n";
print "-----------------\n";
if (@@ARGV==0) {
	@@ARGV=(<*.tgz>);
@


1.1
log
@minimal wantlib checker.
@
text
@d3 1
a3 1
# $OpenBSD: check-lib-depends,v 1.4 2004/11/13 11:49:48 espie Exp $
d45 1
a45 1
	$t->{$name} = 1;
d97 1
a97 4
			if (!defined $t->{$lib}) {
				print "Missing: $lib ($fullname)\n";
			}
			$t->{$lib} = 2;
d100 3
d114 1
a114 1
	my $t = {};
d116 7
a122 1
	while (my ($k, $v) = each %$t) {
@

