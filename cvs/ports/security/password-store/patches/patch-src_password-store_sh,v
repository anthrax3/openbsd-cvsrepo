head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	bentley_20160121:1.1.1.1
	bentley:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.06.28.13.16.49;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	n7rHKfiQzE9rDBAA;

1.2
date	2017.03.07.08.53.17;	author bentley;	state Exp;
branches;
next	1.1;
commitid	zgl0qQxOYrqPWzNb;

1.1
date	2016.01.21.10.52.57;	author bentley;	state Exp;
branches
	1.1.1.1;
next	;
commitid	3FYq8N5DQ1qmAUEg;

1.1.1.1
date	2016.01.21.10.52.57;	author bentley;	state Exp;
branches;
next	;
commitid	3FYq8N5DQ1qmAUEg;


desc
@@


1.3
log
@Our cp(1), mv(1) and rm(1) support `-v' now.

ok sthen@@
@
text
@$OpenBSD: patch-src_password-store_sh,v 1.2 2017/03/07 08:53:17 bentley Exp $
Index: src/password-store.sh
--- src/password-store.sh.orig
+++ src/password-store.sh
@@@@ -323,7 +323,7 @@@@ cmd_init() {
 		fi
 		rmdir -p "${gpg_id%/*}" 2>/dev/null
 	else
-		mkdir -v -p "$PREFIX/$id_path"
+		mkdir -p "$PREFIX/$id_path"
 		printf "%s\n" "$@@" > "$gpg_id"
 		local id_print="$(printf "%s, " "$@@")"
 		echo "Password store initialized for ${id_print%, }${id_path:+ ($id_path)}"
@@@@ -379,7 +379,10 @@@@ cmd_show() {
 		else
 			echo "${path%\/}"
 		fi
-		tree -C -l --noreport "$PREFIX/$path" | tail -n +2 | sed -E 's/\.gpg(\x1B\[[0-9]+m)?( ->|$)/\1\2/g' # remove .gpg at end of line, but keep colors
+		# remove .gpg at end of line, but keep colors
+		colortree -C -l --noreport "$PREFIX/$path" \
+			| tail -n +2 \
+			| sed -E 's/\.gpg(\x1B\[[0-9]+m)?( ->|$)/\1\2/g'
 	elif [[ -z $path ]]; then
 		die "Error: password store is empty. Try \"pass init\"."
 	else
@@@@ -391,14 +394,16 @@@@ cmd_find() {
 	[[ $# -eq 0 ]] && die "Usage: $PROGRAM $COMMAND pass-names..."
 	IFS="," eval 'echo "Search Terms: $*"'
 	local terms="*$(printf '%s*|*' "$@@")"
-	tree -C -l --noreport -P "${terms%|*}" --prune --matchdirs --ignore-case "$PREFIX" | tail -n +2 | sed -E 's/\.gpg(\x1B\[[0-9]+m)?( ->|$)/\1\2/g'
+	colortree -C -l --noreport -P "${terms%|*}" --prune --matchdirs --ignore-case "$PREFIX" \
+		| tail -n +2 \
+		| sed -E 's/\.gpg(\x1B\[[0-9]+m)?( ->|$)/\1\2/g'
 }
 
 cmd_grep() {
 	[[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND search-string"
 	local search="$1" passfile grepresults
 	while read -r -d "" passfile; do
-		grepresults="$($GPG -d "${GPG_OPTS[@@]}" "$passfile" | grep --color=always "$search")"
+		grepresults="$($GPG -d "${GPG_OPTS[@@]}" "$passfile" | grep "$search")"
 		[[ $? -ne 0 ]] && continue
 		passfile="${passfile%.gpg}"
 		passfile="${passfile#$PREFIX/}"
@@@@ -430,7 +435,7 @@@@ cmd_insert() {
 
 	[[ $force -eq 0 && -e $passfile ]] && yesno "An entry already exists for $path. Overwrite it?"
 
-	mkdir -p -v "$PREFIX/$(dirname "$path")"
+	mkdir -p "$PREFIX/$(dirname "$path")"
 	set_gpg_recipients "$(dirname "$path")"
 
 	if [[ $multiline -eq 1 ]]; then
@@@@ -464,7 +469,7 @@@@ cmd_edit() {
 
 	local path="${1%/}"
 	check_sneaky_paths "$path"
-	mkdir -p -v "$PREFIX/$(dirname "$path")"
+	mkdir -p "$PREFIX/$(dirname "$path")"
 	set_gpg_recipients "$(dirname "$path")"
 	local passfile="$PREFIX/$path.gpg"
 	set_git "$passfile"
@@@@ -506,7 +511,7 @@@@ cmd_generate() {
 	local length="${2:-$GENERATED_LENGTH}"
 	check_sneaky_paths "$path"
 	[[ ! $length =~ ^[0-9]+$ ]] && die "Error: pass-length \"$length\" must be a number."
-	mkdir -p -v "$PREFIX/$(dirname "$path")"
+	mkdir -p "$PREFIX/$(dirname "$path")"
 	set_gpg_recipients "$(dirname "$path")"
 	local passfile="$PREFIX/$path.gpg"
 	set_git "$passfile"
@@@@ -595,7 +600,7 @@@@ cmd_copy_move() {
 	echo "$old_path"
 	[[ -e $old_path ]] || die "Error: $1 is not in the password store."
 
-	mkdir -p -v "${new_path%/*}"
+	mkdir -p "${new_path%/*}"
 	[[ -d $old_path || -d $new_path || $new_path == */ ]] || new_path="${new_path}.gpg"
 
 	local interactive="-i"
@@@@ -603,7 +608,7 @@@@ cmd_copy_move() {
 
 	set_git "$new_path"
 	if [[ $move -eq 1 ]]; then
-		mv $interactive -v "$old_path" "$new_path" || exit 1
+		mv $interactive "$old_path" "$new_path" || exit 1
 		[[ -e "$new_path" ]] && reencrypt_path "$new_path"
 
 		set_git "$new_path"
@@@@ -620,7 +625,7 @@@@ cmd_copy_move() {
 		fi
 		rmdir -p "$old_dir" 2>/dev/null
 	else
-		cp $interactive -r -v "$old_path" "$new_path" || exit 1
+		cp $interactive -r "$old_path" "$new_path" || exit 1
 		[[ -e "$new_path" ]] && reencrypt_path "$new_path"
 		git_add_file "$new_path" "Copy ${1} to ${2}."
 	fi
@


1.2
log
@Update to password-store-1.7.

From David Dalhlberg (maintainer). Thanks!
@
text
@d1 5
a5 12
$OpenBSD$
--- src/password-store.sh.orig	Sun Feb 26 18:52:16 2017
+++ src/password-store.sh	Tue Feb 28 14:17:12 2017
@@@@ -316,14 +316,14 @@@@ cmd_init() {
 
 	if [[ $# -eq 1 && -z $1 ]]; then
 		[[ ! -f "$gpg_id" ]] && die "Error: $gpg_id does not exist and so cannot be removed."
-		rm -v -f "$gpg_id" || exit 1
+		rm -f "$gpg_id" || exit 1
 		if [[ -n $INNER_GIT_DIR ]]; then
 			git -C "$INNER_GIT_DIR" rm -qr "$gpg_id"
 			git_commit "Deinitialize ${gpg_id}${id_path:+ ($id_path)}."
a71 9
@@@@ -561,7 +566,7 @@@@ cmd_delete() {
 
 	[[ $force -eq 1 ]] || yesno "Are you sure you would like to delete $path?"
 
-	rm $recursive -f -v "$passfile"
+	rm $recursive -f "$passfile"
 	set_git "$passfile"
 	if [[ -n $INNER_GIT_DIR && ! -e $passfile ]]; then
 		git -C "$INNER_GIT_DIR" rm -qr "$passfile"
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
--- src/password-store.sh.orig	Wed Jan 28 17:43:02 2015
+++ src/password-store.sh	Mon Dec 28 13:07:08 2015
@@@@ -275,14 +275,14 @@@@ cmd_init() {
d10 3
a12 3
 		if [[ -d $GIT_DIR ]]; then
 			git rm -qr "$gpg_id"
 			git_commit "Deinitialize ${gpg_id}."
d20 2
a21 2
 		echo "Password store initialized for ${id_print%, }"
@@@@ -322,7 +322,11 @@@@ cmd_show() {
d25 1
a25 1
-		tree -C -l --noreport "$PREFIX/$path" | tail -n +2 | sed 's/\.gpg\(\x1B\[[0-9]\+m\)\{0,1\}\( ->\|$\)/\1\2/g' # remove .gpg at end of line, but keep colors
d29 1
a29 2
+			| sed -e 's/\.gpg\(\x1B\[[0-9]\+m\)\{0,1\}\( ->\)/\1\2/g' \
+				-e 's/\.gpg\(\x1B\[[0-9]\+m\)\{0,1\}\($\)/\1\2/g'
d33 2
a34 2
@@@@ -334,14 +338,17 @@@@ cmd_find() {
 	[[ -z "$@@" ]] && die "Usage: $PROGRAM $COMMAND pass-names..."
d37 1
a37 1
-	tree -C -l --noreport -P "${terms%|*}" --prune --matchdirs --ignore-case "$PREFIX" | tail -n +2 | sed 's/\.gpg\(\x1B\[[0-9]\+m\)\{0,1\}\( ->\|$\)/\1\2/g'
d40 1
a40 2
+		| sed -e 's/\.gpg\(\x1B\[[0-9]\+m\)\{0,1\}\( ->\)/\1\2/g' \
+			-e 's/\.gpg\(\x1B\[[0-9]\+m\)\{0,1\}\($\)/\1\2/g'
d49 1
a49 1
 		[ $? -ne 0 ] && continue
d52 1
a52 1
@@@@ -372,7 +379,7 @@@@ cmd_insert() {
d61 1
a61 1
@@@@ -406,12 +413,12 @@@@ cmd_edit() {
d63 1
a63 1
 	local path="$1"
d69 3
a71 9
 
 	tmpdir #Defines $SECURE_TMPDIR
-	local tmp_file="$(mktemp -u "$SECURE_TMPDIR/XXXXX")-${path//\//-}.txt"
+	local tmp_file="$(mktemp -u "$SECURE_TMPDIR/XXXXXX")-${path//\//-}.txt"
 
 
 	local action="Add"
@@@@ -446,7 +453,7 @@@@ cmd_generate() {
 	local length="$2"
d78 2
a79 2
 
@@@@ -498,7 +505,7 @@@@ cmd_delete() {
d85 6
a90 6
 	if [[ -d $GIT_DIR && ! -e $passfile ]]; then
 		git rm -qr "$passfile"
 		git_commit "Remove $path from store."
@@@@ -529,14 +536,14 @@@@ cmd_copy_move() {
 		[[ ! -f $old_path ]] && die "Error: $1 is not in the password store."
 	fi
d94 1
a94 1
 	[[ -d $old_path || -d $new_path || $new_path =~ /$ ]] || new_path="${new_path}.gpg"
d97 1
a97 1
 	[[ ! -t 0 || $force -eq 1 ]] && interactive="-f"
d99 1
d105 2
a106 2
 		if [[ -d $GIT_DIR && ! -e $old_path ]]; then
@@@@ -545,7 +552,7 @@@@ cmd_copy_move() {
@


1.1.1.1
log
@Import password-store-1.6.5.

Lightweight commandline-based password manager. Uses pwgen, gpg and git to
generate, securely store, synchronize and show stored passwords.

from David Dahlberg; thanks!

ok zhuk@@
@
text
@@
