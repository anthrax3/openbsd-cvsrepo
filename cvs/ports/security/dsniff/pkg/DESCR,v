head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.52
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.48
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.50
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.46
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.44
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.42
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.40
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.38
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.36
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.34
	OPENBSD_5_0:1.8.0.32
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.30
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.28
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.26
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.14
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.12
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.10
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_TRACKING_SWITCH:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	dugsong_1999-Dec-20:1.1.1.1
	dugsong:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2003.12.08.17.42.34;	author sturm;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.11.08.59.56;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.19.18.38.55;	author dugsong;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.17.16.32.09;	author dugsong;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.28.21.13.16;	author dugsong;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.01.22.07.04.31;	author dugsong;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.09.04.22.35;	author dugsong;	state Exp;
branches;
next	1.1;

1.1
date	99.12.20.23.00.58;	author dugsong;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.12.20.23.00.58;	author dugsong;	state Exp;
branches;
next	;

1.4.2.1
date	2000.09.15.05.15.11;	author marc;	state Exp;
branches;
next	;


desc
@@


1.8
log
@use new databases/db layout

db update and these modifications by
Aleksander Piotrowski <aleksander dot piotrowski at nic dot com dot pl>
@
text
@password sniffer, plus sniffing tools for penetration testing.
@


1.7
log
@- BUILD_DEPENDS, ${PREFIX} -> ${LOCALBASE}
- add HOMEPAGE
- add @@comment with RCS id to PLIST
@
text
@a1 2

WWW: ${HOMEPAGE}
@


1.6
log
@upgrade to version 2.2
@
text
@d1 1
d3 1
a3 2
password sniffer, plus sniffing tools for penetration testing

@


1.5
log
@upgrade to 2.0, fake
@
text
@d2 1
a2 1
simple password sniffer, plus sniffing utilities for penetration testing
@


1.4
log
@update to version 1.4
@
text
@d2 1
a2 2
dsniff
------
a3 61
arpredirect
	redirect packets from a target host (or all hosts) on the LAN
	intended for another host on the LAN by forging ARP replies.
	this is an extremely effective way of sniffing traffic on a
	switch. kernel IP forwarding (or a userland program which
	accomplishes the same, e.g. fragrouter :-) must be turned on
	ahead of time.

findgw
	determine the local gateway of an unknown network via passive
	sniffing.

macof
	flood the local network with random MAC addresses (causing
	some switches to fail open in repeating mode, facilitating
	sniffing). a straight C port of the original Perl Net::RawIP
	macof program.

tcpkill
	kill specified in-progress TCP connections (useful for
	libnids-based applications which require a full TCP 3-whs for
	TCB creation).

tcpnice
	slow down specified in-progress TCP connections via "active"
	traffic shaping (useful for sniffing fast networks). forges
	tiny TCP window advertisements, and optionally ICMP source
	quench replies.

dsniff
	simple password sniffer. handles FTP, Telnet, HTTP, POP, IMAP,
	SNMP, Rlogin, NFS, X11 auth info. goes beyond most sniffers in
	that it minimally parses each application protocol, only
	saving the "interesting" bits. uses Berkeley DB as its output
	file format, logging only unique auth info. supports full
	TCP/IP reassembly, courtesy of libnids (all of the following
	tools do, as well).

mailsnarf
	a fast and easy way to violate the Electronic Communications
	Privacy Act of 1986 (18 USC 2701-2711), be careful. outputs
	all messages sniffed from SMTP traffic in Berkeley mbox
	format, suitable for offline browsing with your favorite mail
	reader (mail -f, pine, etc.).

urlsnarf
	output all requested URLs sniffed from HTTP traffic in CLF
	(Common Log Format, used by almost all web servers), suitable
	for offline post-processing with your favorite web log
	analysis tool (analog, wwwstat, etc.).

webspy
	sends URLs sniffed from a client to your local Netscape
	browser for display, updated in real-time (as the target
	surfs, your browser surfs along with them, automagically).
	a fun party trick. :-)

-d.

---
http://www.monkey.org/~dugsong/
@


1.4.2.1
log
@bring security as of cut-over date into 2.7 branch
@
text
@a0 1
password sniffer, plus sniffing tools for penetration testing.
d2 64
a65 1
WWW: ${HOMEPAGE}
@


1.3
log
@update to dsniff-1.3
@
text
@d28 6
@


1.2
log
@update to version 1.2
@
text
@a4 6
i wrote these tools with honest intentions - to audit my own network,
and to demonstrate the insecurity of plaintext network protocols.
please do not abuse this software.

what's here:

d15 1
a15 3
	sniffing. the results of this program may be used in
	conjunction with arpredirect to intercept all outgoing traffic
	on a switch.
d23 5
d30 6
a35 4
	SNMP, NFS mountd. goes beyond most sniffers in that it
	minimally parses each application protocol, only saving the
	"interesting" bits.  also supports full TCP/IP reassembly,
	courtesy of libnids (all of the following tools do, as well).
@


1.1
log
@Initial revision
@
text
@d33 4
a36 4
	SNMP. goes beyond most sniffers in that it minimally parses
	each application protocol, only saving the "interesting" bits.
	also supports full TCP/IP reassembly, courtesy of libnids (all
	of the following tools do, as well).
@


1.1.1.1
log
@new dsniff port - various sniffing tools for penetration testing
@
text
@@
