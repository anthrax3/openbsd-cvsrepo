head	1.7;
access;
symbols
	OPENBSD_5_8:1.3.0.16
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.4
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	ajacoutot_20110621:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.01.27.11.01.14;	author sthen;	state Exp;
branches;
next	1.6;
commitid	v9D7QBjbUNy1EVl0;

1.6
date	2015.10.21.13.23.54;	author sthen;	state dead;
branches;
next	1.5;
commitid	YEBTLevzjk6A32MI;

1.5
date	2015.09.10.14.08.44;	author sthen;	state Exp;
branches;
next	1.4;
commitid	fuswVHinHUNB1Ndn;

1.4
date	2015.09.10.13.55.51;	author sthen;	state Exp;
branches;
next	1.3;
commitid	eq9p9g9fwkk13uvK;

1.3
date	2012.07.16.08.49.31;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.26.10.12.21;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.21.21.05.48;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.06.21.21.05.48;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to sslscan-1.11.8, convert to GH_* variables, use the SSL_get_state()
accessor rather than digging in the struct directly which no longer works in
libressl (state was moved to internal).
@
text
@$OpenBSD$

use the accessor function; this struct member was made internal-only in libressl

--- sslscan.c.orig	Fri Jan 27 10:55:06 2017
+++ sslscan.c	Fri Jan 27 10:56:26 2017
@@@@ -1155,14 +1155,14 @@@@ int testRenegotiation(struct sslCheckOptions *options,
                                 printf_verbose("Attempting SSL_do_handshake(ssl)\n");
                                 SSL_do_handshake(ssl); // Send renegotiation request to server //TODO :: XXX hanging here
 
-                                if (ssl->state == SSL_ST_OK)
+                                if (SSL_get_state(ssl) == SSL_ST_OK)
                                 {
                                     res = SSL_do_handshake(ssl); // Send renegotiation request to server
                                     if( res != 1 )
                                     {
                                         printf_error("\n\nSSL_do_handshake() call failed\n");
                                     }
-                                    if (ssl->state == SSL_ST_OK)
+                                    if (SSL_get_state(ssl) == SSL_ST_OK)
                                     {
                                         /* our renegotiation is complete */
                                         renOut->supported = true;
@


1.6
log
@update to sslscan-1.11.0-rbsec, take MAINTAINER
@
text
@d1 23
a23 82
$OpenBSD: patch-sslscan_c,v 1.5 2015/09/10 14:08:44 sthen Exp $
--- sslscan.c.orig	Thu Aug  6 11:23:13 2015
+++ sslscan.c	Thu Sep 10 16:07:10 2015
@@@@ -83,7 +83,7 @@@@
   #include <unistd.h>
 #endif
 
-#ifdef __FreeBSD__
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
 #include <netinet/in.h>
 #endif
 
@@@@ -750,6 +750,7 @@@@ int testCompression(struct sslCheckOptions *options, c
 
                         session = *SSL_get_session(ssl);
 
+#ifndef OPENSSL_NO_COMP
                         printf_xml("  <compression supported=\"%d\" />\n",
                             session.compress_meth);
 
@@@@ -761,6 +762,7 @@@@ int testCompression(struct sslCheckOptions *options, c
                         {
                             printf("Compression %senabled%s (CRIME)\n\n", COL_RED, RESET);
                         }
+#endif
 
                         // Disconnect SSL over socket
                         SSL_shutdown(ssl);
@@@@ -1134,7 +1136,7 @@@@ int testHeartbleed(struct sslCheckOptions *options, co
 
 int ssl_print_tmp_key(struct sslCheckOptions *options, SSL *s)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
     EVP_PKEY *key;
     if (!SSL_get_server_tmp_key(s, &key))
         return 1;
@@@@ -1379,7 +1381,11 @@@@ int testCipher(struct sslCheckOptions *options, struct
                     {
                         printf("%s%-29s%s", COL_PURPLE, sslCipherPointer->name, RESET);
                     }
-                    else if (strstr(sslCipherPointer->name, "EXP") || (sslCipherPointer->sslMethod == SSLv3_client_method() && !strstr(sslCipherPointer->name, "RC4")))
+                    else if (strstr(sslCipherPointer->name, "EXP")
+#ifndef OPENSSL_NO_SSL3
+				    || (sslCipherPointer->sslMethod == SSLv3_client_method() && !strstr(sslCipherPointer->name, "RC4"))
+#endif
+                    )
                     {
                         printf("%s%-29s%s", COL_RED, sslCipherPointer->name, RESET);
                     }
@@@@ -1490,12 +1496,15 @@@@ int defaultCipher(struct sslCheckOptions *options, con
                             }
                             else
 #endif
+#ifndef OPENSSL_NO_SSL3
                             if (sslMethod == SSLv3_client_method())
                             {
                                 printf_xml("  <defaultcipher sslversion=\"SSLv3\" bits=\"");
                                 printf("%sSSLv3%s    ", COL_RED, RESET);
                             }
-                            else if (sslMethod == TLSv1_client_method())
+			    else
+#endif
+                            if (sslMethod == TLSv1_client_method())
                             {
                                 printf_xml("  <defaultcipher sslversion=\"TLSv1.0\" bits=\"");
                                 printf("TLSv1.0  ");
@@@@ -1539,8 +1548,12 @@@@ int defaultCipher(struct sslCheckOptions *options, con
                                 printf(" ");
                             }
                             printf_xml("%d\" cipher=\"%s\"", SSL_get_cipher_bits(ssl, &tempInt2), SSL_get_cipher_name(ssl));
-                            if (strstr(SSL_get_cipher_name(ssl), "EXP") || (sslMethod == SSLv3_client_method() && strstr(SSL_get_cipher_name(ssl), "CBC")))
-                            {
+                            if (strstr(SSL_get_cipher_name(ssl), "EXP")
+#ifndef OPENSSL_NO_SSL3
+                                            || (sslMethod == SSLv3_client_method() && strstr(SSL_get_cipher_name(ssl), "CBC"))
+#endif
+			    )
+			    {
                                 printf("%s%-29s%s", COL_RED, SSL_get_cipher_name(ssl), RESET);
                             }
                             else if (strstr(SSL_get_cipher_name(ssl), "RC4"))
@


1.5
log
@Add a flavour providing a choice of which SSL library to build sslscan against.
@
text
@d1 1
a1 1
$OpenBSD: patch-sslscan_c,v 1.4 2015/09/10 13:55:51 sthen Exp $
@


1.4
log
@switch to rbsec's version of sslscan. adds TLSv1.1/1.2 support, displays
cert information (alg/strength/issuer/times), heartbleed/compression/secure
reneg checks, etc.
@
text
@d1 1
a1 1
$OpenBSD: patch-sslscan_c,v 1.3 2012/07/16 08:49:31 jasper Exp $
d3 1
a3 1
+++ sslscan.c	Thu Sep 10 15:43:02 2015
d13 70
@


1.3
log
@do not show --ssl2 commandline option if built with an OpenSSL without SSLv2 support.

from brad
@
text
@d1 6
a6 8
$OpenBSD: patch-sslscan_c,v 1.2 2012/06/26 10:12:21 jasper Exp $
--- sslscan.c.orig	Tue Sep  1 08:35:59 2009
+++ sslscan.c	Sat Jul 14 15:23:49 2012
@@@@ -41,6 +41,7 @@@@
 #include <openssl/pkcs12.h>
 #include <openssl/x509.h>
 #include <openssl/x509v3.h>
+#include <netinet/in.h>
d8 4
a11 4
 // Defines...
 #define false 0
@@@@ -59,7 +60,7 @@@@
 #define tls_v1 3
a12 104
 // Colour Console Output...
-#if !defined(__WIN32__)
+#if !defined(__WIN32__) && !defined(__OpenBSD__)
 const char *RESET = "[0m";			// DEFAULT
 const char *COL_RED = "[31m";		// RED
 const char *COL_BLUE = "[34m";		// BLUE
@@@@ -563,6 +564,7 @@@@ int testCipher(struct sslCheckOptions *options, struct
 					}
 					if (options->xmlOutput != 0)
 						fprintf(options->xmlOutput, " sslversion=\"");
+#ifndef OPENSSL_NO_SSL2
 					if (sslCipherPointer->sslMethod == SSLv2_client_method())
 					{
 						if (options->xmlOutput != 0)
@@@@ -572,7 +574,9 @@@@ int testCipher(struct sslCheckOptions *options, struct
 						else
 							printf("SSLv2  ");
 					}
-					else if (sslCipherPointer->sslMethod == SSLv3_client_method())
+					else
+#endif
+					if (sslCipherPointer->sslMethod == SSLv3_client_method())
 					{
 						if (options->xmlOutput != 0)
 							fprintf(options->xmlOutput, "SSLv3\" bits=\"");
@@@@ -688,6 +692,7 @@@@ int defaultCipher(struct sslCheckOptions *options, SSL
 						cipherStatus = SSL_connect(ssl);
 						if (cipherStatus == 1)
 						{
+#ifndef OPENSSL_NO_SSL2
 							if (sslMethod == SSLv2_client_method())
 							{
 								if (options->xmlOutput != 0)
@@@@ -697,7 +702,9 @@@@ int defaultCipher(struct sslCheckOptions *options, SSL
 								else
 									printf("    SSLv2  ");
 							}
-							else if (sslMethod == SSLv3_client_method())
+							else
+#endif
+							if (sslMethod == SSLv3_client_method())
 							{
 								if (options->xmlOutput != 0)
 									fprintf(options->xmlOutput, "  <defaultcipher sslversion=\"SSLv3\" bits=\"");
@@@@ -1192,15 +1199,19 @@@@ int testHost(struct sslCheckOptions *options)
 		switch (options->sslVersion)
 		{
 			case ssl_all:
+#ifndef OPENSSL_NO_SSL2
 				status = defaultCipher(options, SSLv2_client_method());
 				if (status != false)
+#endif
 					status = defaultCipher(options, SSLv3_client_method());
 				if (status != false)
 					status = defaultCipher(options, TLSv1_client_method());
 				break;
+#ifndef OPENSSL_NO_SSL2
 			case ssl_v2:
 				status = defaultCipher(options, SSLv2_client_method());
 				break;
+#endif
 			case ssl_v3:
 				status = defaultCipher(options, SSLv3_client_method());
 				break;
@@@@ -1298,9 +1309,11 @@@@ int main(int argc, char *argv[])
 			options.starttls = true;
 		}
 
+#ifndef OPENSSL_NO_SSL2
 		// SSL v2 only...
 		else if (strcmp("--ssl2", argv[argLoop]) == 0)
 			options.sslVersion = ssl_v2;
+#endif
 
 		// SSL v3 only...
 		else if (strcmp("--ssl3", argv[argLoop]) == 0)
@@@@ -1379,7 +1392,9 @@@@ int main(int argc, char *argv[])
 			printf("                       ports (i.e. host:port).\n");
 			printf("  %s--no-failed%s          List only accepted ciphers  (default\n", COL_GREEN, RESET);
 			printf("                       is to listing all ciphers).\n");
+#ifndef OPENSSL_NO_SSL2
 			printf("  %s--ssl2%s               Only check SSLv2 ciphers.\n", COL_GREEN, RESET);
+#endif
 			printf("  %s--ssl3%s               Only check SSLv3 ciphers.\n", COL_GREEN, RESET);
 			printf("  %s--tls1%s               Only check TLSv1 ciphers.\n", COL_GREEN, RESET);
 			printf("  %s--pk=<file>%s          A file containing the private key or\n", COL_GREEN, RESET);
@@@@ -1415,13 +1430,17 @@@@ int main(int argc, char *argv[])
 			switch (options.sslVersion)
 			{
 				case ssl_all:
+#ifndef OPENSSL_NO_SSL2
 					populateCipherList(&options, SSLv2_client_method());
+#endif
 					populateCipherList(&options, SSLv3_client_method());
 					populateCipherList(&options, TLSv1_client_method());
 					break;
+#ifndef OPENSSL_NO_SSL2
 				case ssl_v2:
 					populateCipherList(&options, SSLv2_client_method());
 					break;
+#endif
 				case ssl_v3:
 					populateCipherList(&options, SSLv3_client_method());
 					break;
@


1.2
log
@let this work if sslv2 is disabled, from Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-sslscan_c,v 1.1.1.1 2011/06/21 21:05:48 ajacoutot Exp $
d3 1
a3 1
+++ sslscan.c	Fri Jun 22 20:14:18 2012
d91 11
a101 1
@@@@ -1415,13 +1428,17 @@@@ int main(int argc, char *argv[])
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- sslscan.c.orig	Tue Sep  1 14:35:59 2009
+++ sslscan.c	Tue Jun 21 23:03:21 2011
d21 88
@


1.1.1.1
log
@Import sslscan-1.8.2.

SSLScan queries SSL services, such as HTTPS, in order to determine the
ciphers that are supported. SSLScan is designed to be easy, lean and
fast. The output includes prefered ciphers of the SSL service, the
certificate and is in Text and XML formats.

Heavily based on the FreeBSD port.

inputs from sthen@@
ok jasper@@
@
text
@@
