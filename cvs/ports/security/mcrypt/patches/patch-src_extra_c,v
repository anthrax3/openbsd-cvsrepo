head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.22
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2012.09.06.21.56.31;	author sthen;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.09.12.17.50.48;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@In mcrypt, check salt lengths and exit with an error, rather than
overrunning a buffer, if too long. CVE-2012-4409.

Patch from http://seclists.org/oss-sec/2012/q3/396, ok benoit@@
@
text
@$OpenBSD$

CVE-2012-4409, patch from http://seclists.org/oss-sec/2012/q3/396

--- src/extra.c.orig	Thu Sep  6 22:23:29 2012
+++ src/extra.c	Thu Sep  6 22:24:09 2012
@@@@ -242,6 +242,8 @@@@ int check_file_head(FILE * fstream, char *algorithm, c
 			if (m_getbit(0, sflag) != 0) { /* if the first bit is set */
 				*salt_size = m_setbit(0, sflag, 0);
 				if (*salt_size > 0) {
+					if (*salt_size > sizeof(tmp_buf))
+					    err_quit(_("Salt is too long\n"));
 					fread(tmp_buf, 1, *salt_size,
 					      fstream);
 					memmove(salt, tmp_buf, *salt_size);
@


1.1.2.1
log
@MFC mcrypt fixes req'd by jasper,

--/-----
In mcrypt, check salt lengths and exit with an error, rather than
overrunning a buffer, if too long. CVE-2012-4409.

Patch from http://seclists.org/oss-sec/2012/q3/396, ok benoit@@
--/-----
@
text
@d1 1
a1 1
$OpenBSD: patch-src_extra_c,v 1.1 2012/09/06 21:56:31 sthen Exp $
@

