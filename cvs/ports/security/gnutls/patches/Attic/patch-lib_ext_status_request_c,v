head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2017.06.08.07.23.43;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;
commitid	IC2ffZH0DZtfarde;

1.1.2.1
date	2017.06.08.07.23.43;	author ajacoutot;	state Exp;
branches;
next	;
commitid	IC2ffZH0DZtfarde;


desc
@@


1.1
log
@file patch-lib_ext_status_request_c was initially added on branch OPENBSD_6_1.
@
text
@@


1.1.2.1
log
@Fix for GNUTLS-SA-2017-4
- decoding a status response TLS extension with valid contents could lead to a crash due to a null pointer dereference
@
text
@a0 151
$OpenBSD$

GNUTLS-SA-2017-4
From 20abda405acdf359711ebbaaceea0b4af328f2e3 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@@redhat.com>
Date: Wed, 24 May 2017 10:46:03 +0200
Subject: [PATCH] ext/status_request: ensure response IDs are properly deinitialized

GNUTLS-SA-2017-4
From 6ce67c9eaa29634e6be02ed6b76ac712c3d212c7 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@@redhat.com>
Date: Wed, 24 May 2017 11:38:16 +0200
Subject: [PATCH] ext/status_request: Removed the parsing of responder IDs from client extension

GNUTLS-SA-2017-4
From 8566f8935954d3e370f257a6e3c18e9af262f8c2 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@@redhat.com>
Date: Wed, 24 May 2017 11:48:24 +0200
Subject: [PATCH] gnutls_ocsp_status_request_enable_client: documented requirements for parameters

Index: lib/ext/status_request.c
--- lib/ext/status_request.c.orig
+++ lib/ext/status_request.c
@@@@ -1,6 +1,6 @@@@
 /*
- * Copyright (C) 2012-2016 Free Software Foundation, Inc.
- * Copyright (C) 2016 Red Hat, Inc.
+ * Copyright (C) 2012-2017 Free Software Foundation, Inc.
+ * Copyright (C) 2017 Red Hat, Inc.
  *
  * Author: Simon Josefsson, Nikos Mavrogiannopoulos
  *
@@@@ -67,19 +67,7 @@@@ typedef struct {
       opaque Extensions<0..2^16-1>;
 */
 
-static void deinit_responder_id(status_request_ext_st *priv)
-{
-unsigned i;
 
-	for (i = 0; i < priv->responder_id_size; i++)
-		gnutls_free(priv->responder_id[i].data);
-
-	gnutls_free(priv->responder_id);
-	priv->responder_id = NULL;
-	priv->responder_id_size = 0;
-}
-
-
 static int
 client_send(gnutls_session_t session,
 	    gnutls_buffer_st * extdata, status_request_ext_st * priv)
@@@@ -133,8 +121,8 @@@@ server_recv(gnutls_session_t session,
 	    status_request_ext_st * priv,
 	    const uint8_t * data, size_t size)
 {
-	size_t i;
 	ssize_t data_size = size;
+	unsigned rid_bytes = 0;
 
 	/* minimum message is type (1) + responder_id_list (2) +
 	   request_extension (2) = 5 */
@@@@ -153,43 +141,17 @@@@ server_recv(gnutls_session_t session,
 	DECR_LEN(data_size, 1);
 	data++;
 
-	priv->responder_id_size = _gnutls_read_uint16(data);
+	rid_bytes = _gnutls_read_uint16(data);
 
 	DECR_LEN(data_size, 2);
-	data += 2;
+	/*data += 2;*/
 
-	if (data_size <= (ssize_t) (priv->responder_id_size * 2))
+	/* sanity check only, we don't use any of the data below */
+
+	if (data_size < (ssize_t)rid_bytes)
 		return
 		    gnutls_assert_val(GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER);
 
-	if (priv->responder_id != NULL)
-		deinit_responder_id(priv);
-
-	priv->responder_id = gnutls_calloc(1, priv->responder_id_size
-					   * sizeof(*priv->responder_id));
-	if (priv->responder_id == NULL)
-		return gnutls_assert_val(GNUTLS_E_MEMORY_ERROR);
-
-	for (i = 0; i < priv->responder_id_size; i++) {
-		size_t l;
-
-		DECR_LEN(data_size, 2);
-
-		l = _gnutls_read_uint16(data);
-		data += 2;
-
-		DECR_LEN(data_size, l);
-
-		priv->responder_id[i].data = gnutls_malloc(l);
-		if (priv->responder_id[i].data == NULL)
-			return gnutls_assert_val(GNUTLS_E_MEMORY_ERROR);
-
-		memcpy(priv->responder_id[i].data, data, l);
-		priv->responder_id[i].size = l;
-
-		data += l;
-	}
-
 	return 0;
 }
 
@@@@ -332,10 +294,16 @@@@ _gnutls_status_request_recv_params(gnutls_session_t se
  *
  * This function is to be used by clients to request OCSP response
  * from the server, using the "status_request" TLS extension.  Only
- * OCSP status type is supported. A typical server has a single
- * OCSP response cached, so @@responder_id and @@extensions
- * should be null.
+ * OCSP status type is supported.
  *
+ * The @@responder_id array, its containing elements as well as
+ * the data of @@extensions, must be allocated using gnutls_malloc(). They
+ * will be deinitialized on session cleanup.
+ *
+ * Due to the difficult semantics of the @@responder_id and @@extensions
+ * parameters, it is recommended to only call this function with these
+ * parameters set to %NULL.
+ *
  * Returns: On success, %GNUTLS_E_SUCCESS (0) is returned,
  *   otherwise a negative error code is returned.
  *
@@@@ -552,11 +520,18 @@@@ gnutls_certificate_set_ocsp_status_request_file
 static void _gnutls_status_request_deinit_data(extension_priv_data_t epriv)
 {
 	status_request_ext_st *priv = epriv;
+	unsigned i;
 
 	if (priv == NULL)
 		return;
 
-	deinit_responder_id(priv);
+	if (priv->responder_id != NULL) {
+		for (i = 0; i < priv->responder_id_size; i++)
+			gnutls_free(priv->responder_id[i].data);
+
+		gnutls_free(priv->responder_id);
+	}
+
 	gnutls_free(priv->request_extensions.data);
 	gnutls_free(priv->response.data);
 	gnutls_free(priv);
@

