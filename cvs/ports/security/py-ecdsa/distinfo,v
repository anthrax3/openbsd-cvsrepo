head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.10
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	benoit_20131030:1.1.1.1
	benoit:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.03.16.08.59.06;	author benoit;	state Exp;
branches;
next	1.2;
commitid	G6Ls0n2uil4fafEE;

1.2
date	2014.03.12.21.01.56;	author benoit;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.30.15.24.54;	author benoit;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.10.30.15.24.54;	author benoit;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to py-ecdsa-0.13.
@
text
@SHA256 (ecdsa-0.13.tar.gz) = ZM8e4m0c3jxzxtfRB/g1/tfGopBK756sIj1XrYAMQ/o=
SIZE (ecdsa-0.13.tar.gz) = 55579
@


1.2
log
@Update to py-ecdsa 0.11.
@
text
@d1 2
a2 2
SHA256 (ecdsa-0.11.tar.gz) = jjtsGT+R3JSy87AmHj6rvcYE94/5n9rTJKVv3QtelYw=
SIZE (ecdsa-0.11.tar.gz) = 45689
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
SHA256 (ecdsa-0.10.tar.gz) = Z9rp4a8rD9cbyaN4ZU99yJIRwcWu5x4WD4z84fptaYA=
SIZE (ecdsa-0.10.tar.gz) = 45153
@


1.1.1.1
log
@Import security/py-ecdsa

This is an easy-to-use implementation of ECDSA cryptography (Elliptic Curve
Digital Signature Algorithm), implemented purely in Python, released under
the MIT license. With this library, you can quickly create keypairs (signing
key and verifying key), sign messages, and verify the signatures. The keys
and signatures are very short, making them easy to handle and incorporate
into other protocols.

ok sthen@@
@
text
@@
