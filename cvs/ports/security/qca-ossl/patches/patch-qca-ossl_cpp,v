head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	shadchin_20120701:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2015.09.16.10.47.30;	author sthen;	state Exp;
branches;
next	1.5;
commitid	q6oiSViRulDRFnBe;

1.5
date	2015.07.18.22.52.43;	author jca;	state Exp;
branches;
next	1.4;
commitid	J1zg7QXjcon94ieU;

1.4
date	2015.07.18.22.50.47;	author jca;	state Exp;
branches;
next	1.3;
commitid	nY5YakkluzLyO0IM;

1.3
date	2014.07.17.08.36.55;	author espie;	state Exp;
branches;
next	1.2;
commitid	BO6EQJ9720H1h9KC;

1.2
date	2012.06.28.18.57.29;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.07.16.55.13;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.01.07.16.55.13;	author shadchin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix qca-ossl: no more SHA-0 in LibreSSL.
@
text
@$OpenBSD: patch-qca-ossl_cpp,v 1.5 2015/07/18 22:52:43 jca Exp $

- allow building against OpenSSL without MD2 or SSLv2/3 support and
  LibreSSL without SHA0 support
- restrict visible ciphers not to TLSv1.0 but to TLSv1+; note that this
  relies on the fact that SSLv2 and SSLv3 are disabled by default in
  LibreSSL

--- qca-ossl.cpp.orig	Mon Dec 10 23:34:57 2007
+++ qca-ossl.cpp	Wed Sep 16 04:43:59 2015
@@@@ -1771,8 +1771,10 @@@@ class RSAKey : public RSAContext (public)
 			md = EVP_sha1();
 		else if(alg == EMSA3_MD5)
 			md = EVP_md5();
+#ifdef MD2_DIGEST_LENGTH
 		else if(alg == EMSA3_MD2)
 			md = EVP_md2();
+#endif
 		else if(alg == EMSA3_RIPEMD160)
 			md = EVP_ripemd160();
 		else if(alg == EMSA3_Raw)
@@@@ -1789,8 +1791,10 @@@@ class RSAKey : public RSAContext (public)
 			md = EVP_sha1();
 		else if(alg == EMSA3_MD5)
 			md = EVP_md5();
+#ifdef MD2_DIGEST_LENGTH
 		else if(alg == EMSA3_MD2)
 			md = EVP_md2();
+#endif
 		else if(alg == EMSA3_RIPEMD160)
 			md = EVP_ripemd160();
 		else if(alg == EMSA3_Raw)
@@@@ -3385,9 +3389,11 @@@@ class MyCertContext : public CertContext (public)
 		case NID_md5WithRSAEncryption:
 		    p.sigalgo = QCA::EMSA3_MD5;
 		    break;
+#ifdef MD2_DIGEST_LENGTH
 		case NID_md2WithRSAEncryption:
 		    p.sigalgo = QCA::EMSA3_MD2;
 		    break;
+#endif
 		case NID_ripemd160WithRSA:
 		    p.sigalgo = QCA::EMSA3_RIPEMD160;
 		    break;
@@@@ -3871,9 +3877,11 @@@@ class MyCSRContext : public CSRContext (public)
 		case NID_md5WithRSAEncryption:
 		    p.sigalgo = QCA::EMSA3_MD5;
 		    break;
+#ifdef MD2_DIGEST_LENGTH
 		case NID_md2WithRSAEncryption:
 		    p.sigalgo = QCA::EMSA3_MD2;
 		    break;
+#endif
 		case NID_ripemd160WithRSA:
 		    p.sigalgo = QCA::EMSA3_RIPEMD160;
 		    break;
@@@@ -4061,9 +4069,11 @@@@ class MyCRLContext : public CRLContext (public)
 		case NID_md5WithRSAEncryption:
 		    p.sigalgo = QCA::EMSA3_MD5;
 		    break;
+#ifdef MD2_DIGEST_LENGTH
 		case NID_md2WithRSAEncryption:
 		    p.sigalgo = QCA::EMSA3_MD2;
 		    break;
+#endif
 		case NID_ripemd160WithRSA:
 		    p.sigalgo = QCA::EMSA3_RIPEMD160;
 		    break;
@@@@ -5133,14 +5143,18 @@@@ class MyTLSContext : public TLSContext (public)
 		OpenSSL_add_ssl_algorithms();
 		SSL_CTX *ctx = 0;
 		switch (version) {
+#ifndef OPENSSL_NO_SSL2
 		case TLS::SSL_v2:
 			ctx = SSL_CTX_new(SSLv2_client_method());
 			break;
+#endif
+#ifndef OPENSSL_NO_SSL3
 		case TLS::SSL_v3:
 			ctx = SSL_CTX_new(SSLv3_client_method());
 			break;
+#endif
 		case TLS::TLS_v1:
-			ctx = SSL_CTX_new(TLSv1_client_method());
+			ctx = SSL_CTX_new(SSLv23_client_method());
 			break;
 		case TLS::DTLS_v1:
 		default:
@@@@ -5538,7 +5552,7 @@@@ class MyTLSContext : public TLSContext (public)
 	{
 		SessionInfo sessInfo;
 
-		sessInfo.isCompressed = (0 != ssl->session->compress_meth);
+		sessInfo.isCompressed = false;
 
 		if (ssl->version == TLS1_VERSION)
 			sessInfo.version = TLS::TLS_v1;
@@@@ -6582,7 +6596,9 @@@@ static QStringList all_hash_types()
 	list += "sha1";
 	list += "sha0";
 	list += "ripemd160";
+#ifdef MD2_DIGEST_LENGTH
 	list += "md2";
+#endif
 	list += "md4";
 	list += "md5";
 #ifdef SHA224_DIGEST_LENGTH
@@@@ -6757,7 +6773,9 @@@@ class opensslProvider : public Provider (public)
 		list += all_hash_types();
 		list += all_mac_types();
 		list += all_cipher_types();
+#ifdef MD2_DIGEST_LENGTH
 		list += "pbkdf1(md2)";
+#endif
 		list += "pbkdf1(sha1)";
 		list += "pbkdf2(sha1)";
 		list += "pkey";
@@@@ -6784,12 +6802,16 @@@@ class opensslProvider : public Provider (public)
 			return new opensslInfoContext(this);
 		else if ( type == "sha1" )
 			return new opensslHashContext( EVP_sha1(), this, type);
+#ifndef OPENSSL_NO_SHA0
 		else if ( type == "sha0" )
 			return new opensslHashContext( EVP_sha(), this, type);
+#endif
 		else if ( type == "ripemd160" )
 			return new opensslHashContext( EVP_ripemd160(), this, type);
+#ifdef MD2_DIGEST_LENGTH
 		else if ( type == "md2" )
 			return new opensslHashContext( EVP_md2(), this, type);
+#endif
 		else if ( type == "md4" )
 			return new opensslHashContext( EVP_md4(), this, type);
 		else if ( type == "md5" )
@@@@ -6816,8 +6838,10 @@@@ class opensslProvider : public Provider (public)
 #endif
 		else if ( type == "pbkdf1(sha1)" )
 			return new opensslPbkdf1Context( EVP_sha1(), this, type );
+#ifdef MD2_DIGEST_LENGTH
 		else if ( type == "pbkdf1(md2)" )
 			return new opensslPbkdf1Context( EVP_md2(), this, type );
+#endif
 		else if ( type == "pbkdf2(sha1)" )
 			return new opensslPbkdf2Context( this, type );
 		else if ( type == "hmac(md5)" )
@@@@ -6934,7 +6958,7 @@@@ class opensslProvider : public Provider (public)
 			return new CMSContext( this );
 		else if ( type == "ca" )
 			return new MyCAContext( this );
-		return 0;
+		return NULL;
 	}
 };
 
@


1.5
log
@TLSv1_client_method -> SSLv23_client_method

Requested by and ok zhuk@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-qca-ossl_cpp,v 1.4 2015/07/18 22:50:47 jca Exp $
d3 2
a4 1
- allow building against OpenSSL without MD2 or SSLv2/3 support
d10 1
a10 1
+++ qca-ossl.cpp	Sat Jul 18 16:51:22 2015
d118 6
a123 1
@@@@ -6788,8 +6806,10 @@@@ class opensslProvider : public Provider (public)
d125 1
d135 1
a135 1
@@@@ -6816,8 +6836,10 @@@@ class opensslProvider : public Provider (public)
d146 1
a146 1
@@@@ -6934,7 +6956,7 @@@@ class opensslProvider : public Provider (public)
@


1.4
log
@guard sslv3 method; ok zhuk@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-qca-ossl_cpp,v 1.3 2014/07/17 08:36:55 espie Exp $
d4 3
d9 1
a9 1
+++ qca-ossl.cpp	Sat Jul 18 16:49:22 2015
d68 1
a68 1
@@@@ -5133,12 +5143,16 @@@@ class MyTLSContext : public TLSContext (public)
d83 2
a84 1
 			ctx = SSL_CTX_new(TLSv1_client_method());
d86 2
@


1.3
log
@trivial fix for the removal of comp_methods in ssl.
@
text
@d1 1
a1 1
$OpenBSD: patch-qca-ossl_cpp,v 1.2 2012/06/28 18:57:29 jasper Exp $
d3 1
a3 1
Allow building against OpenSSL without MD2 or SSLv2 support.
d5 2
a6 2
--- qca-ossl.cpp.orig	Tue Dec 11 07:34:57 2007
+++ qca-ossl.cpp	Thu Jul 17 10:18:40 2014
d65 1
a65 1
@@@@ -5133,9 +5143,11 @@@@ class MyTLSContext : public TLSContext (public)
d74 1
d78 5
a82 1
@@@@ -5538,7 +5550,7 @@@@ class MyTLSContext : public TLSContext (public)
d91 1
a91 1
@@@@ -6582,7 +6594,9 @@@@ static QStringList all_hash_types()
d101 1
a101 1
@@@@ -6757,7 +6771,9 @@@@ class opensslProvider : public Provider (public)
d111 1
a111 1
@@@@ -6788,8 +6804,10 @@@@ class opensslProvider : public Provider (public)
d122 1
a122 1
@@@@ -6816,8 +6834,10 @@@@ class opensslProvider : public Provider (public)
d133 1
a133 1
@@@@ -6934,7 +6954,7 @@@@ class opensslProvider : public Provider (public)
@


1.2
log
@Allow building against OpenSSL without SSLv2 support.

from brad
@
text
@d1 1
a1 1
$OpenBSD: patch-qca-ossl_cpp,v 1.1.1.1 2012/01/07 16:55:13 shadchin Exp $
d5 2
a6 2
--- qca-ossl.cpp.orig	Tue Dec 11 01:34:57 2007
+++ qca-ossl.cpp	Thu Jun 28 01:12:24 2012
d77 9
@


1.1
log
@Initial revision
@
text
@d1 6
a6 4
$OpenBSD$
Looks like MD2 isn't shipped with our OpenSSL.
--- qca-ossl.cpp.orig	Tue Dec 11 09:34:57 2007
+++ qca-ossl.cpp	Mon Oct 17 23:08:21 2011
d65 13
a77 1
@@@@ -6582,7 +6592,9 @@@@ static QStringList all_hash_types()
d87 1
a87 1
@@@@ -6757,7 +6769,9 @@@@ class opensslProvider : public Provider (public)
d97 1
a97 1
@@@@ -6788,8 +6802,10 @@@@ class opensslProvider : public Provider (public)
d108 1
a108 1
@@@@ -6816,8 +6832,10 @@@@ class opensslProvider : public Provider (public)
d119 1
a119 1
@@@@ -6934,7 +6952,7 @@@@ class opensslProvider : public Provider (public)
@


1.1.1.1
log
@Import qca-ossl.

ok sebastia@@, Amit Kulkarni, Vadim Zhukov (Maintainer)
@
text
@@
