head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.12
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.20
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.18
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.16
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.14
	OPENBSD_5_0:1.10.0.12
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.10
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.8
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.4
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	jcs_20011028:1.1.1.1
	jcs:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2013.08.15.14.58.45;	author naddy;	state Exp;
branches;
next	1.10;

1.10
date	2009.02.13.22.58.18;	author rui;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.03.07.17.44;	author aanriot;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.29.19.40.44;	author aanriot;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.03.19.50.12;	author naddy;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.03.15.59.36;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.19.17.02.06;	author jose;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.05.22.56.12;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.22.17.24.53;	author jsyn;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.08.20.13.53;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.29.03.20.38;	author jcs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.10.29.03.20.38;	author jcs;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove (time_t)timeval.tv_sec casts now that tv_sec has type time_t
@
text
@$OpenBSD: patch-p0f_c,v 1.10 2009/02/13 22:58:18 rui Exp $
--- p0f.c.orig	Mon Aug 21 16:16:00 2006
+++ p0f.c	Thu Aug 15 16:49:28 2013
@@@@ -36,12 +36,6 @@@@
 #include <pcap.h>
 #include <signal.h>
 
-#ifdef USE_BPF
-#include USE_BPF
-#else
-#include <pcap-bpf.h>
-#endif /* ^USE_BPF */
-
 #include <time.h>
 #include <ctype.h>
 
@@@@ -754,7 +748,7 @@@@ static _u8* lookup_link(_u16 mss,_u8 txt) {
 unknown:
 
   if (!txt) return 0;
-  sprintf(tmp,"unknown-%d",mss);
+  snprintf(tmp, sizeof(tmp), "unknown-%d",mss);
   return tmp;
 
 }
@@@@ -1642,13 +1636,13 @@@@ int main(int argc,char** argv) {
   load_config(config_file);
 
   if (argv[optind] && *(argv[optind])) {
-    sprintf(buf,"(%s) and (%.3000s)",use_rule,argv[optind]);
+    snprintf(buf, sizeof(buf), "(%s) and (%.3000s)",use_rule,argv[optind]);
     use_rule = buf;
   } 
 
   if (use_vlan) {
     _u8* x = strdup(use_rule);
-    sprintf(buf,"(%.1000s) or (vlan and (%.1000s))",x,x);
+    snprintf(buf, sizeof(buf), "(%.1000s) or (vlan and (%.1000s))",x,x);
     free(x);
     use_rule = buf;
   }
@


1.10
log
@Fix visible 64-bit issue, from Markus Lude.

ok naddy@@
@
text
@d1 1
a1 1
$OpenBSD: patch-p0f_c,v 1.9 2006/05/03 07:17:44 aanriot Exp $
d3 1
a3 1
+++ p0f.c	Thu Jan 29 04:24:17 2009
d26 1
a26 31
@@@@ -778,6 +772,7 @@@@ static _u8* lookup_tos(_u8 t) {
 static void put_date(struct timeval tval) {
   _u8* x;
   struct tm *tmval;
+  time_t t;
 
   switch (add_timestamp) {
 
@@@@ -785,8 +780,9 @@@@ static void put_date(struct timeval tval) {
 
     case 2: /* UTC */
 
-      x = asctime((add_timestamp == 1) ? localtime(&tval.tv_sec) : 
-                                         gmtime(&tval.tv_sec));
+      t = (time_t)tval.tv_sec;
+      x = asctime((add_timestamp == 1) ? localtime(&t) : 
+                                         gmtime(&t));
 
       if (x[strlen(x)-1]=='\n') x[strlen(x)-1]=0;
 
@@@@ -802,7 +798,8 @@@@ static void put_date(struct timeval tval) {
     case 4: /* RFC3339 */
     default:
 
-      tmval = gmtime(&tval.tv_sec);
+      t = (time_t)tval.tv_sec;
+      tmval = gmtime(&t);
 
       printf("<%04u-%02u-%02uT%02u:%02u:%02u.%06uZ> ",
              tmval->tm_year + 1900, tmval->tm_mon + 1, tmval->tm_mday,
@@@@ -1642,13 +1639,13 @@@@ int main(int argc,char** argv) {
@


1.9
log
@update to 2.0.6 .

from Rui Reis <rui@@rui.cx>, new maintainer;
ok jolan@@
@
text
@d1 3
a3 3
$OpenBSD: patch-p0f_c,v 1.8 2005/07/29 19:40:44 aanriot Exp $
--- p0f.c.orig	Sun Apr 30 18:29:33 2006
+++ p0f.c	Sun Apr 30 18:30:49 2006
d17 1
a17 1
@@@@ -740,7 +734,7 @@@@ static _u8* lookup_link(_u16 mss,_u8 txt
d26 31
a56 1
@@@@ -1620,13 +1614,13 @@@@ int main(int argc,char** argv) {
@


1.8
log
@update to 2.0.5.

ok niallo@@
@
text
@d1 17
a17 4
$OpenBSD$
--- p0f.c.orig	Mon Sep 13 19:51:36 2004
+++ p0f.c	Thu Jul 28 08:25:51 2005
@@@@ -735,7 +735,7 @@@@ static _u8* lookup_link(_u16 mss,_u8 txt
d26 1
a26 1
@@@@ -1614,13 +1614,13 @@@@ int main(int argc,char** argv) {
d30 2
a31 2
-    sprintf(buf,"(%s) and (%3000s)",use_rule,argv[optind]);
+    snprintf(buf, sizeof(buf), "(%s) and (%3000s)",use_rule,argv[optind]);
d37 2
a38 2
-    sprintf(buf,"(%1000s) or (vlan and (%1000s))",x,x);
+    snprintf(buf, sizeof(buf), "(%1000s) or (vlan and (%1000s))",x,x);
@


1.7
log
@fix decoding of packets logged by pf(4); from Jose Nazario <jose@@monkey.org>
@
text
@d1 28
a28 21
$OpenBSD: patch-p0f_c,v 1.6 2004/05/03 15:59:36 naddy Exp $
--- p0f.c.orig	2002-05-13 18:59:40.000000000 +0200
+++ p0f.c	2004-05-03 21:41:00.000000000 +0200
@@@@ -165,7 +165,7 @@@@ void set_header_len(int type){
       break;
 #ifdef DLT_PFLOG
     case DLT_PFLOG:
-      header_len=28;
+      header_len=48;
       break;
 #endif
 #ifdef DLT_LINUX_SLL
@@@@ -397,7 +397,7 @@@@ void load_fprints(char *filename) {
   char *p;
   //bzero(fips,120000);
   x=fopen(filename, "r");
-  if (!x) x=fopen("p0f.fp", "r");
+  if (!x) x=fopen(SYSCONFDIR "p0f.fp", "r");
   if (!x) {
     fprintf(stderr, "No OS fingerprint database (%s) found. Dumb mode on.\n", 
       filename);
@


1.6
log
@Install man page and drop broken and useless p0frep script.
From: Jose Nazario <jose@@monkey.org>

Also fix a formatting issue in the man page.
@
text
@d1 1
a1 1
$OpenBSD$
d3 10
a12 1
+++ p0f.c	2004-05-03 17:53:51.000000000 +0200
@


1.5
log
@
update p0f to 1.8.3, which adds mysql support, so we add a mysql FLAVOR.
reviewed by margarida, avsm, and sturm, ok sturm
@
text
@d1 3
a3 2
--- p0f.c.orig	Mon May 13 12:59:40 2002
+++ p0f.c	Fri Feb  7 21:40:19 2003
@


1.4
log
@Update to p0f-1.8.2; from maintainer jose@@crimelabs.net
@
text
@d1 3
a3 4
--- p0f.c.orig	Tue Feb  5 14:59:56 2002
+++ p0f.c	Tue Feb  5 14:59:21 2002
@@@@ -291,7 +291,7 @@@@
   int i=0;
d5 1
@


1.3
log
@bad jasoni@@; patch needed to be regen'd as well! (from jose@@crimelabs.net)
@
text
@d1 3
a3 4
$OpenBSD$
--- p0f.c.orig	Tue Jan 22 11:29:47 2002
+++ p0f.c	Tue Jan 22 11:30:24 2002
@@@@ -206,7 +206,7 @@@@ void load_fprints(char *filename) {
@


1.2
log
@* update to 1.8; from maintainer Jose Nazario <jose@@crimelabs.net>
* cleanup
@
text
@d2 3
a4 3
--- p0f.c.orig	Sat Nov 24 03:10:28 2001
+++ p0f.c	Sat Dec  8 21:13:33 2001
@@@@ -259,7 +259,7 @@@@ void load_fprints(char *filename) {
@


1.1
log
@Initial revision
@
text
@d2 11
a12 11
--- p0f.c.orig	Thu Aug  9 18:54:07 2001
+++ p0f.c	Thu Aug  9 18:54:19 2001
@@@@ -260,7 +260,7 @@@@
 
   /* set a reasonable default fingerprint file */
   if (!filename || !*filename)
-    filename = "/etc/p0f.fp";
+    filename = SYSCONFDIR "/p0f.fp";
 
   /* anything left after getopt'ing is a rule */
   if (argv[optind] && *(argv[optind]))
@


1.1.1.1
log
@Import of p0f-1.7, maintained by Jose Nazario <jose@@crimelabs.net>

  Passive OS fingerprinting technique based on information coming
  from remote host when it establishes connection to our system.
  Captured packets contains enough information to determine OS - and,
  unlike active scanners (nmap, queSO) - without sending anything to
  this host.
@
text
@@
