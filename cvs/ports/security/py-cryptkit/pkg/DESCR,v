head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.50
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.46
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.48
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.44
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.38
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.36
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.34
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.32
	OPENBSD_5_0:1.4.0.30
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.28
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.26
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.24
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.1.1.0.4
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.2
	OPENBSD_3_1_BASE:1.1.1.1
	shell_2001-Jan-03:1.1.1.1
	shell:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2004.07.26.21.04.24;	author xsa;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.19.11.59;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.02.05.39.06;	author david;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.03.23.34.39;	author shell;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.01.03.23.34.39;	author shell;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
python -> Python
@
text
@CryptKit is a developer's toolkit implementing several of the most
modern and efficient cryptographic algorithms.  The kit is primarily
written in ANSI C for speed and subsequently wrapped with SWIG for
ease of use in Python.

CryptKit is small and fast, mainly because it implements excellent
algorithms: Rijndael (AES), SHA 256 bits, Elliptic Curve PKI,
Diffie-Hellman key exchange and Nyberg-Ruppel signature/verification.
These modules are combined to provide a faster, lighter and easier
to use secure socket alternative to SSL.  CryptKit is not compatible
with SSL.  Whereas SSL aims to support a wide variety of algorithms
that essentially perform the same task ( like DES/RC4/RC2 or MD5/SHA
), CryptKit takes the minimalist approach of implementing only one
version of each crypto primitive. Great care went into selecting the
best of what was available.
@


1.3
log
@- simple conversions to use the new python module
- while here, remove WWW from DESCR

all work done by Xavier Santolaria <xavier@@santolaria.net>
@
text
@d4 1
a4 1
ease of use in python.
@


1.2
log
@fix more spelling errors/typos
ok pvalchev@@
@
text
@a15 2

WWW: ${HOMEPAGE}
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
version of each crypto primitve. Great care went into selecting the
@


1.1.1.1
log
@Initial import of py-cryptkit-0.9

---
CryptKit is a developer's toolkit implementing several of the most
modern and efficient cryptographic algorithms.  The kit is primarily
written in ANSI C for speed and subsequently wrapped with SWIG for
ease of use in python.

CryptKit is small and fast, mainly because it implements excellent
algorithms: Rijndael (AES), SHA 256 bits, Elliptic Curve PKI,
Diffie-Hellman key exchange and Nyberg-Ruppel signature/verification.
These modules are combined to provide a faster, lighter and easier
to use secure socket alternative to SSL.  CryptKit is not compatible
with SSL.  Whereas SSL aims to support a wide variety of algorithms
that essentially perform the same task ( like DES/RC4/RC2 or MD5/SHA
), CryptKit takes the minimalist approach of implementing only one
version of each crypto primitve. Great care went into selecting the
best of what was available.

WWW: http://eevolved.com/cryptkit/
@
text
@@
