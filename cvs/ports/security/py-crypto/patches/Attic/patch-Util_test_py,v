head	1.4;
access;
symbols
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2011.10.09.15.06.41;	author ajacoutot;	state dead;
branches;
next	1.3;

1.3
date	2011.10.08.14.56.34;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.02.59.32;	author wcmaier;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.28.05.39.45;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove empty patches.
@
text
@@


1.3
log
@Update py-crypto to 2.3

take maintainership

ok benoit@@, wcmaier@@ (previous MAINTAINER)
@
text
@@


1.2
log
@Take MAINTAINERSHIP from ish@@ (timed out).

Clean up port (MODPY_EGG_VERSION, SUBST_VARS, typo in license
marker) and regen patches while here.

ok merdely@@
@
text
@a0 79
$OpenBSD: patch-Util_test_py,v 1.1 2005/05/28 05:39:45 djm Exp $
--- Util/test.py.orig	Fri Aug 13 17:24:18 2004
+++ Util/test.py	Wed May 28 20:55:21 2008
@@@@ -223,8 +223,7 @@@@ def TestStreamModules(args=['arc4', 'XOR'], verbose=1)
                         die('XOR failed on entry '+`entry`)
 
 
-def TestBlockModules(args=['aes', 'arc2', 'des', 'blowfish', 'cast', 'des3',
-                           'idea', 'rc5'],
+def TestBlockModules(args=['aes', 'des', 'blowfish', 'cast', 'des3'],
                      verbose=1):
     import string
     args=map(string.lower, args)
@@@@ -267,23 +266,6 @@@@ def TestBlockModules(args=['aes', 'arc2', 'des', 'blow
                         if verbose: print
 
 
-    if 'arc2' in args:
-        ciph=exerciseBlockCipher('ARC2', verbose)           # Alleged RC2
-        if (ciph!=None):
-                if verbose: print '  Verifying against test suite...'
-                for entry in testdata.arc2:
-                    key,plain,cipher=entry
-                    key=binascii.a2b_hex(key)
-                    plain=binascii.a2b_hex(plain)
-                    cipher=binascii.a2b_hex(cipher)
-                    obj=ciph.new(key, ciph.MODE_ECB)
-                    ciphertext=obj.encrypt(plain)
-                    if (ciphertext!=cipher):
-                        die('ARC2 failed on entry '+`entry`)
-                        for i in ciphertext:
-                            if verbose: print hex(ord(i)),
-                        print
-
     if 'blowfish' in args:
         ciph=exerciseBlockCipher('Blowfish',verbose)# Bruce Schneier's Blowfish cipher
         if (ciph!=None):
@@@@ -413,41 +395,5 @@@@ def TestBlockModules(args=['aes', 'arc2', 'des', 'blow
                     ciphertext=obj1.encrypt(plain)
                     if (ciphertext!=cipher):
                         die('DES3 CBC mode failed on entry '+`entry`)
-
-    if 'idea' in args:
-        ciph=exerciseBlockCipher('IDEA', verbose)       # IDEA block cipher
-        if (ciph!=None):
-                if verbose: print '  Verifying against test suite...'
-                for entry in testdata.idea:
-                    key,plain,cipher=entry
-                    key=binascii.a2b_hex(key)
-                    plain=binascii.a2b_hex(plain)
-                    cipher=binascii.a2b_hex(cipher)
-                    obj=ciph.new(key, ciph.MODE_ECB)
-                    ciphertext=obj.encrypt(plain)
-                    if (ciphertext!=cipher):
-                        die('IDEA failed on entry '+`entry`)
-
-    if 'rc5' in args:
-        # Ronald Rivest's RC5 algorithm
-        ciph=exerciseBlockCipher('RC5', verbose)
-        if (ciph!=None):
-                if verbose: print '  Verifying against test suite...'
-                for entry in testdata.rc5:
-                    key,plain,cipher=entry
-                    key=binascii.a2b_hex(key)
-                    plain=binascii.a2b_hex(plain)
-                    cipher=binascii.a2b_hex(cipher)
-                    obj=ciph.new(key[4:], ciph.MODE_ECB,
-                                 version =ord(key[0]),
-                                 word_size=ord(key[1]),
-                                 rounds  =ord(key[2]) )
-                    ciphertext=obj.encrypt(plain)
-                    if (ciphertext!=cipher):
-                        die('RC5 failed on entry '+`entry`)
-                        for i in ciphertext:
-                            if verbose: print hex(ord(i)),
-                        if verbose: print
-
 
 
@


1.1
log
@update to pycrypto-2.0, remove patented algorithms, update PERMIT_*
accordingly; ok maintainer ish@@
@
text
@d1 4
a4 4
$OpenBSD$
--- Util/test.py.orig	Sat May 28 14:35:00 2005
+++ Util/test.py	Sat May 28 14:36:49 2005
@@@@ -223,8 +223,7 @@@@ def TestStreamModules(args=['arc4', 'XOR
d14 1
a14 1
@@@@ -267,23 +266,6 @@@@ def TestBlockModules(args=['aes', 'arc2'
d38 1
a38 1
@@@@ -413,41 +395,5 @@@@ def TestBlockModules(args=['aes', 'arc2'
@

