head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.05.24.08.31.17;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@hiding a template behind a typedef does not make it less a typedef,
and explicit specializations want template <> in g++4.
@
text
@$OpenBSD$
--- src/AuSampleValues.cc.orig	Mon May 24 03:49:57 2010
+++ src/AuSampleValues.cc	Mon May 24 03:50:14 2010
@@@@ -21,17 +21,25 @@@@
 #include "AuSampleValues.h"
 
 // AuMuLawSampleValue
+template <>
 const BYTE AuMuLawSampleValue::MinValue = 0 ;
+template <>
 const BYTE AuMuLawSampleValue::MaxValue = BYTE_MAX ;
 
 // AuPCM8SampleValue
+template <>
 const SBYTE AuPCM8SampleValue::MinValue = SBYTE_MIN ;
+template <>
 const SBYTE AuPCM8SampleValue::MaxValue = SBYTE_MAX ;
 
 // AuPCM16SampleValue
+template <>
 const SWORD16 AuPCM16SampleValue::MinValue = SWORD16_MIN ;
+template <>
 const SWORD16 AuPCM16SampleValue::MaxValue = SWORD16_MAX ;
 
 // AuPCM32SampleValue
+template <>
 const SWORD32 AuPCM32SampleValue::MinValue = SWORD32_MIN ;
+template <>
 const SWORD32 AuPCM32SampleValue::MaxValue = SWORD32_MAX ;
@
