head	1.1;
access;
symbols
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_4:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2013.12.20.20.01.47;	author jasper;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2013.12.20.20.01.47;	author jasper;	state Exp;
branches;
next	;

1.1.4.1
date	2015.03.03.14.09.18;	author jca;	state Exp;
branches;
next	;
commitid	PhE3mGcIv1AAclJy;


desc
@@


1.1
log
@file patch-cipher_elgamal_c was initially added on branch OPENBSD_5_4.
@
text
@@


1.1.4.1
log
@SECURITY backport for gnupg-1.4.17

This merge two fixes from gnupg-1.4.19:

 * Use ciphertext blinding for Elgamal decryption [CVE-2014-3591].
   See http://www.cs.tau.ac.il/~tromer/radioexp/ for details.

 * Fixed data-dependent timing variations in modular exponentiation
   [related to CVE-2015-0837, Last-Level Cache Side-Channel Attacks
   are Practical].

ok jasper@@
@
text
@a0 89
$OpenBSD$

- CVE-2014-3591: use ciphertext blinding for Elgamal decryption.
  http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=commit;h=ff53cf06e966dce0daba5f2c84e03ab9db2c3c8b

--- cipher/elgamal.c.orig	Mon Jun 23 13:19:26 2014
+++ cipher/elgamal.c	Sun Mar  1 17:24:20 2015
@@@@ -31,6 +31,11 @@@@
 #include "cipher.h"
 #include "elgamal.h"
 
+/* Blinding is used to mitigate side-channel attacks.  You may undef
+   this to speed up the operation in case the system is secured
+   against physical and network mounted side-channel attacks.  */
+#define USE_BLINDING 1
+
 typedef struct {
     MPI p;	    /* prime */
     MPI g;	    /* group generator */
@@@@ -372,25 +377,55 @@@@ do_encrypt(MPI a, MPI b, MPI input, ELG_public_key *pk
 static void
 decrypt(MPI output, MPI a, MPI b, ELG_secret_key *skey )
 {
-    MPI t1 = mpi_alloc_secure( mpi_get_nlimbs( skey->p ) );
+  MPI t1, t2, r;
+  unsigned int nbits = mpi_get_nbits (skey->p);
 
-    mpi_normalize (a);
-    mpi_normalize (b);
+  mpi_normalize (a);
+  mpi_normalize (b);
 
-    /* output = b/(a^x) mod p */
-    mpi_powm( t1, a, skey->x, skey->p );
-    mpi_invm( t1, t1, skey->p );
-    mpi_mulm( output, b, t1, skey->p );
+  t1 = mpi_alloc_secure (mpi_nlimb_hint_from_nbits (nbits));
+#ifdef USE_BLINDING
+
+  t2 = mpi_alloc_secure (mpi_nlimb_hint_from_nbits (nbits));
+  r  = mpi_alloc (mpi_nlimb_hint_from_nbits (nbits));
+
+  /* We need a random number of about the prime size.  The random
+     number merely needs to be unpredictable; thus we use level 0.  */
+  randomize_mpi (r, nbits, 0);
+
+  /* t1 = r^x mod p */
+  mpi_powm (t1, r, skey->x, skey->p);
+  /* t2 = (a * r)^-x mod p */
+  mpi_mulm (t2, a, r, skey->p);
+  mpi_powm (t2, t2, skey->x, skey->p);
+  mpi_invm (t2, t2, skey->p);
+  /* t1 = (t1 * t2) mod p*/
+  mpi_mulm (t1, t1, t2, skey->p);
+
+  mpi_free (r);
+  mpi_free (t2);
+
+#else /*!USE_BLINDING*/
+
+  /* output = b/(a^x) mod p */
+  mpi_powm (t1, a, skey->x, skey->p);
+  mpi_invm (t1, t1, skey->p);
+
+#endif  /*!USE_BLINDING*/
+
+  mpi_mulm (output, b, t1, skey->p);
+
 #if 0
-    if( DBG_CIPHER ) {
-	log_mpidump("elg decrypted x= ", skey->x);
-	log_mpidump("elg decrypted p= ", skey->p);
-	log_mpidump("elg decrypted a= ", a);
-	log_mpidump("elg decrypted b= ", b);
-	log_mpidump("elg decrypted M= ", output);
+  if (DBG_CIPHER)
+    {
+      log_mpidump("elg decrypted x= ", skey->x);
+      log_mpidump("elg decrypted p= ", skey->p);
+      log_mpidump("elg decrypted a= ", a);
+      log_mpidump("elg decrypted b= ", b);
+      log_mpidump("elg decrypted M= ", output);
     }
 #endif
-    mpi_free(t1);
+  mpi_free (t1);
 }
 
 
@


1.1.2.1
log
@Security fix for CVE-2013-4576
@
text
@a0 17
$OpenBSD$

Security fix CVE-2013-4576
http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=commit;h=d0d72d98f34579213230b3febfebd2fd8dff272b

--- cipher/elgamal.c.orig	Thu Dec 20 18:22:26 2012
+++ cipher/elgamal.c	Sun Dec 15 18:12:56 2013
@@@@ -374,6 +374,9 @@@@ decrypt(MPI output, MPI a, MPI b, ELG_secret_key *skey
 {
     MPI t1 = mpi_alloc_secure( mpi_get_nlimbs( skey->p ) );
 
+    mpi_normalize (a);
+    mpi_normalize (b);
+
     /* output = b/(a^x) mod p */
     mpi_powm( t1, a, skey->x, skey->p );
     mpi_invm( t1, t1, skey->p );
@

