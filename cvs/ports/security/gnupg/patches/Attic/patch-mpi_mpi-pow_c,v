head	1.3;
access;
symbols
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_3:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2013.11.16.20.29.00;	author jca;	state dead;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2013.08.06.19.28.57;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.30.10.16.23;	author jasper;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.07.30.10.16.23;	author jasper;	state Exp;
branches;
next	;

1.3.2.1
date	2013.11.17.16.04.04;	author jca;	state Exp;
branches;
next	;

1.3.4.1
date	2015.03.03.14.09.18;	author jca;	state Exp;
branches;
next	;
commitid	PhE3mGcIv1AAclJy;


desc
@@


1.3
log
@SECURITY update to gnupg-1.4.15, fixes CVE-2013-4402 (infinite recursion
parsing compressed packets) and includes the patch we had for
CVE-2013-4242 (Yarom/Falkner flush+reload side-channel attack on RSA
secret keys already had a patch).  Input from and ok sthen@@
@
text
@$OpenBSD: patch-mpi_mpi-pow_c,v 1.2 2013/08/06 19:28:57 jasper Exp $

Security fix for CVE-2013-4242 GnuPG side-channel attack on RSA secret keys
http://lists.gnupg.org/pipermail/gnupg-announce/2013q3/000330.html

From 35646689f4b80955ff7dbe1687bf2c479c53421e Mon Sep 17 00:00:00 2001
From: Werner Koch <wk@@gnupg.org>
Date: Fri, 19 Jul 2013 13:49:23 +0200
Subject: [PATCH] Mitigate a flush+reload cache attack on RSA secret exponents.

--- mpi/mpi-pow.c.orig	Thu Dec 20 18:22:27 2012
+++ mpi/mpi-pow.c	Tue Jul 30 11:08:21 2013
@@@@ -1,5 +1,6 @@@@
 /* mpi-pow.c  -  MPI functions
- *	Copyright (C) 1994, 1996, 1998, 2000 Free Software Foundation, Inc.
+ * Copyright (C) 1994, 1996, 1998, 2000 Free Software Foundation, Inc.
+ * Copyright (C) 2013 Werner Koch
  *
  * This file is part of GnuPG.
  *
@@@@ -209,7 +210,14 @@@@ mpi_powm( MPI res, MPI base, MPI exponent, MPI mod)
 		tp = rp; rp = xp; xp = tp;
 		rsize = xsize;
 
-		if( (mpi_limb_signed_t)e < 0 ) {
+                /* To mitigate the Yarom/Falkner flush+reload cache
+                 * side-channel attack on the RSA secret exponent, we
+                 * do the multiplication regardless of the value of
+                 * the high-bit of E.  But to avoid this performance
+                 * penalty we do it only if the exponent has been
+                 * stored in secure memory and we can thus assume it
+                 * is a secret exponent.  */
+                if (esec || (mpi_limb_signed_t)e < 0) {
 		    /*mpihelp_mul( xp, rp, rsize, bp, bsize );*/
 		    if( bsize < KARATSUBA_THRESHOLD ) {
 			mpihelp_mul( xp, rp, rsize, bp, bsize );
@@@@ -224,7 +232,8 @@@@ mpi_powm( MPI res, MPI base, MPI exponent, MPI mod)
 			mpihelp_divrem(xp + msize, 0, xp, xsize, mp, msize);
 			xsize = msize;
 		    }
-
+                }
+		if ((mpi_limb_signed_t)e < 0) {
 		    tp = rp; rp = xp; xp = tp;
 		    rsize = xsize;
 		}
@


1.3.4.1
log
@SECURITY backport for gnupg-1.4.17

This merge two fixes from gnupg-1.4.19:

 * Use ciphertext blinding for Elgamal decryption [CVE-2014-3591].
   See http://www.cs.tau.ac.il/~tromer/radioexp/ for details.

 * Fixed data-dependent timing variations in modular exponentiation
   [related to CVE-2015-0837, Last-Level Cache Side-Channel Attacks
   are Practical].

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
- CVE-2015-0837: Fixed data-dependent timing variations in modular exponentiation
  http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=commit;h=6cbc75e71295f23431c4ab95edc7573f2fc28476
d6 35
a40 55
--- mpi/mpi-pow.c.orig	Mon Jun 23 13:19:26 2014
+++ mpi/mpi-pow.c	Sun Mar  1 17:24:58 2015
@@@@ -344,7 +344,7 @@@@ mul_mod (mpi_ptr_t xp, mpi_size_t *xsize_p,
      *xsize_p = rsize + ssize;
 }
 
-#define SIZE_B_2I3 ((1 << (5 - 1)) - 1)
+#define SIZE_PRECOMP ((1 << (5 - 1)))
 
 /****************
  * RES = BASE ^ EXPO mod MOD
@@@@ -375,11 +375,12 @@@@ mpi_powm (MPI res, MPI base, MPI expo, MPI mod)
   mpi_ptr_t bp_marker = NULL;
   mpi_ptr_t ep_marker = NULL;
   mpi_ptr_t xp_marker = NULL;
-  mpi_ptr_t b_2i3[SIZE_B_2I3]; /* Pre-computed array: BASE^3, ^5, ^7, ... */
-  mpi_size_t b_2i3size[SIZE_B_2I3];
+  mpi_ptr_t precomp[SIZE_PRECOMP]; /* Pre-computed array: BASE^1, ^3, ^5, ... */
+  mpi_size_t precomp_size[SIZE_PRECOMP];
   mpi_size_t W;
   mpi_ptr_t base_u;
   mpi_size_t base_u_size;
+  mpi_size_t max_u_size;
 
   esize = expo->nlimbs;
   msize = mod->nlimbs;
@@@@ -493,7 +494,7 @@@@ mpi_powm (MPI res, MPI base, MPI expo, MPI mod)
 
   /* Main processing.  */
   {
-    mpi_size_t i, j;
+    mpi_size_t i, j, k;
     mpi_ptr_t xp;
     mpi_size_t xsize;
     int c;
@@@@ -507,33 +508,29 @@@@ mpi_powm (MPI res, MPI base, MPI expo, MPI mod)
     memset( &karactx, 0, sizeof karactx );
     negative_result = (ep[0] & 1) && bsign;
 
-    /* Precompute B_2I3[], BASE^(2 * i + 3), BASE^3, ^5, ^7, ... */
+    /* Precompute PRECOMP[], BASE^(2 * i + 1), BASE^1, ^3, ^5, ... */
     if (W > 1)                  /* X := BASE^2 */
       mul_mod (xp, &xsize, bp, bsize, bp, bsize, mp, msize, &karactx);
-    for (i = 0; i < (1 << (W - 1)) - 1; i++)
-      {                         /* B_2I3[i] = BASE^(2 * i + 3) */
-        if (i == 0)
-          {
-            base_u = bp;
-            base_u_size = bsize;
-          }
-        else
-          {
-            base_u = b_2i3[i-1];
-            base_u_size = b_2i3size[i-1];
-          }
d42 5
a46 105
+    base_u = precomp[0] = mpi_alloc_limb_space (bsize, esec);
+    base_u_size = max_u_size = precomp_size[0] = bsize;
+    MPN_COPY (precomp[0], bp, bsize);
+    for (i = 1; i < (1 << (W - 1)); i++)
+      {                         /* PRECOMP[i] = BASE^(2 * i + 1) */
         if (xsize >= base_u_size)
           mul_mod (rp, &rsize, xp, xsize, base_u, base_u_size,
                    mp, msize, &karactx);
         else
           mul_mod (rp, &rsize, base_u, base_u_size, xp, xsize,
                    mp, msize, &karactx);
-        b_2i3[i] = mpi_alloc_limb_space (rsize, esec);
-        b_2i3size[i] = rsize;
-        MPN_COPY (b_2i3[i], rp, rsize);
+        base_u = precomp[i] = mpi_alloc_limb_space (rsize, esec);
+        base_u_size = precomp_size[i] = rsize;
+        if (max_u_size < base_u_size)
+          max_u_size = base_u_size;
+        MPN_COPY (precomp[i], rp, rsize);
       }
 
+    base_u = mpi_alloc_limb_space (max_u_size, esec);
+
     i = esize - 1;
 
     /* Main loop.
@@@@ -619,17 +616,26 @@@@ mpi_powm (MPI res, MPI base, MPI expo, MPI mod)
               rsize = xsize;
             }
 
-          if (e0 == 0)
+          /*
+           *  base_u <= precomp[e0]
+           *  base_u_size <= precomp_size[e0];
+           */
+          base_u_size = 0;
+          for (k = 0; k < (1<< (W - 1)); k++)
             {
-              base_u = bp;
-              base_u_size = bsize;
-            }
-          else
-            {
-              base_u = b_2i3[e0 - 1];
-              base_u_size = b_2i3size[e0 -1];
-            }
+              struct gcry_mpi w, u;
+              w.alloced = w.nlimbs = precomp_size[k];
+              u.alloced = u.nlimbs = precomp_size[k];
+              w.nbits = w.nlimbs * BITS_PER_MPI_LIMB;
+              u.nbits = u.nlimbs * BITS_PER_MPI_LIMB;
+              w.sign = u.sign = 0;
+              w.flags = u.flags = 0;
+              w.d = base_u;
+              u.d = precomp[k];
 
+              mpi_set_cond (&w, &u, k == e0);
+              base_u_size |= (precomp_size[k] & ((mpi_size_t)0 - (k == e0)) );
+            }
           mul_mod (xp, &xsize, rp, rsize, base_u, base_u_size,
                    mp, msize, &karactx);
           tp = rp; rp = xp; xp = tp;
@@@@ -655,16 +661,22 @@@@ mpi_powm (MPI res, MPI base, MPI expo, MPI mod)
 
     if (e != 0)
       {
-        if ((e>>1) == 0)
+        base_u_size = 0;
+        for (k = 0; k < (1<< (W - 1)); k++)
           {
-            base_u = bp;
-            base_u_size = bsize;
+            struct gcry_mpi w, u;
+            w.alloced = w.nlimbs = precomp_size[k];
+            u.alloced = u.nlimbs = precomp_size[k];
+            w.nbits = w.nlimbs * BITS_PER_MPI_LIMB;
+            u.nbits = u.nlimbs * BITS_PER_MPI_LIMB;
+            w.sign = u.sign = 0;
+            w.flags = u.flags = 0;
+            w.d = base_u;
+            u.d = precomp[k];
+
+            mpi_set_cond (&w, &u, k == (e>>1));
+            base_u_size |= (precomp_size[k] & ((mpi_size_t)0 - (k == (e>>1))) );
           }
-        else
-          {
-            base_u = b_2i3[(e>>1) - 1];
-            base_u_size = b_2i3size[(e>>1) -1];
-          }
 
         mul_mod (xp, &xsize, rp, rsize, base_u, base_u_size,
                  mp, msize, &karactx);
@@@@ -713,8 +725,9 @@@@ mpi_powm (MPI res, MPI base, MPI expo, MPI mod)
     MPN_NORMALIZE (rp, rsize);
 
     mpihelp_release_karatsuba_ctx (&karactx );
-    for (i = 0; i < (1 << (W - 1)) - 1; i++)
-      mpi_free_limb_space (b_2i3[i]);
+    for (i = 0; i < (1 << (W - 1)); i++)
+      mpi_free_limb_space (precomp[i]);
+    mpi_free_limb_space (base_u);
   }
 
   /* Fixup for negative results.  */
@


1.3.2.1
log
@MFC

Backport security fixes for CVE-2013-4402 (infinite recursion parsing
compressed packets) and CVE-2013-4242 (Yarom/Falkner flush+reload
side-channel attack on RSA secret keys) from gnupg-1.4.15.
Requested by jasper@@
@
text
@@


1.2
log
@Security fix for CVE-2013-4242 GnuPG side-channel attack on RSA secret keys

ok pea@@ sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-mpi_mpi-pow_c,v 1.1.2.1 2013/07/30 10:16:23 jasper Exp $
@


1.1
log
@file patch-mpi_mpi-pow_c was initially added on branch OPENBSD_5_3.
@
text
@d1 46
@


1.1.2.1
log
@Security fix for CVE-2013-4242 GnuPG side-channel attack on RSA secret keys

ok pea@@ sthen@@
@
text
@a0 46
$OpenBSD$

Security fix for CVE-2013-4242 GnuPG side-channel attack on RSA secret keys
http://lists.gnupg.org/pipermail/gnupg-announce/2013q3/000330.html

From 35646689f4b80955ff7dbe1687bf2c479c53421e Mon Sep 17 00:00:00 2001
From: Werner Koch <wk@@gnupg.org>
Date: Fri, 19 Jul 2013 13:49:23 +0200
Subject: [PATCH] Mitigate a flush+reload cache attack on RSA secret exponents.

--- mpi/mpi-pow.c.orig	Thu Dec 20 18:22:27 2012
+++ mpi/mpi-pow.c	Tue Jul 30 11:08:21 2013
@@@@ -1,5 +1,6 @@@@
 /* mpi-pow.c  -  MPI functions
- *	Copyright (C) 1994, 1996, 1998, 2000 Free Software Foundation, Inc.
+ * Copyright (C) 1994, 1996, 1998, 2000 Free Software Foundation, Inc.
+ * Copyright (C) 2013 Werner Koch
  *
  * This file is part of GnuPG.
  *
@@@@ -209,7 +210,14 @@@@ mpi_powm( MPI res, MPI base, MPI exponent, MPI mod)
 		tp = rp; rp = xp; xp = tp;
 		rsize = xsize;
 
-		if( (mpi_limb_signed_t)e < 0 ) {
+                /* To mitigate the Yarom/Falkner flush+reload cache
+                 * side-channel attack on the RSA secret exponent, we
+                 * do the multiplication regardless of the value of
+                 * the high-bit of E.  But to avoid this performance
+                 * penalty we do it only if the exponent has been
+                 * stored in secure memory and we can thus assume it
+                 * is a secret exponent.  */
+                if (esec || (mpi_limb_signed_t)e < 0) {
 		    /*mpihelp_mul( xp, rp, rsize, bp, bsize );*/
 		    if( bsize < KARATSUBA_THRESHOLD ) {
 			mpihelp_mul( xp, rp, rsize, bp, bsize );
@@@@ -224,7 +232,8 @@@@ mpi_powm( MPI res, MPI base, MPI exponent, MPI mod)
 			mpihelp_divrem(xp + msize, 0, xp, xsize, mp, msize);
 			xsize = msize;
 		    }
-
+                }
+		if ((mpi_limb_signed_t)e < 0) {
 		    tp = rp; rp = xp; xp = tp;
 		    rsize = xsize;
 		}
@

