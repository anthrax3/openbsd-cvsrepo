head	1.1;
access;
symbols
	OPENBSD_3_2:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.06.04.16.03.58;	author brad;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.06.04.16.03.58;	author brad;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-g10_trustdb_c was initially added on branch OPENBSD_3_2.
@
text
@@


1.1.2.1
log
@A bug was discovered in the key validation code.  This bug causes keys
with more than one user ID to give all user IDs on the key the amount
of validity given to the most-valid key.

http://marc.theaimsgroup.com/?l=bugtraq&m=105215110111174&w=2
@
text
@a0 38
$OpenBSD$
--- g10/trustdb.c.orig	Mon Apr 29 10:41:06 2002
+++ g10/trustdb.c	Wed Jun  4 11:53:38 2003
@@@@ -816,16 +816,27 @@@@ get_validity (PKT_public_key *pk, const 
   while (recno)
     {
       read_record (recno, &vrec, RECTYPE_VALID);
-      if ( validity < (vrec.r.valid.validity & TRUST_MASK) )
-        validity = (vrec.r.valid.validity & TRUST_MASK);
-      if ( namehash && !memcmp (vrec.r.valid.namehash, namehash, 20) )
-        break;
+      if(namehash)
+	{
+	  /* If namehash is given we return the trust for that user ID
+	     ONLY.  If the namehash is not found, then there is no
+	     validity at all (i.e. the user ID wasn't signed). */
+	  if(memcmp(vrec.r.valid.namehash,namehash,20)==0)
+	    {
+	      validity=(vrec.r.valid.validity & TRUST_MASK);
+	      break;
+	    }
+	}
+      else
+	{
+	  /* If no namehash is given, we take the maximum validity
+	     over all user IDs */
+	  if ( validity < (vrec.r.valid.validity & TRUST_MASK) )
+	    validity = (vrec.r.valid.validity & TRUST_MASK);
+	}
       recno = vrec.r.valid.next;
     }
   
-  if (recno) /* okay, use the user ID associated one */
-    validity = (vrec.r.valid.validity & TRUST_MASK);
-
   if ( (trec.r.trust.ownertrust & TRUST_FLAG_DISABLED) )
     validity |= TRUST_FLAG_DISABLED;
 
@

