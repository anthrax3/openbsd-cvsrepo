head	1.3;
access;
symbols
	OPENBSD_5_9:1.3.0.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_5_4:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2016.08.26.15.47.10;	author jca;	state dead;
branches
	1.3.2.1;
next	1.2;
commitid	AXhUfDxTs6jpkvTl;

1.2
date	2016.08.26.08.30.10;	author jca;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	rdBUPesqrJufN5HL;

1.1
date	2013.12.20.20.01.47;	author jasper;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.12.20.20.01.47;	author jasper;	state Exp;
branches;
next	;

1.2.2.1
date	2016.08.26.08.32.28;	author jca;	state Exp;
branches;
next	;
commitid	DHWZ3X34kAQBtleQ;

1.3.2.1
date	2016.08.26.15.56.30;	author jca;	state Exp;
branches;
next	;
commitid	ijqWqBlKaB4F8w6b;


desc
@@


1.3
log
@Extra patch that snuck in.

Spotted by Markus Lude.
@
text
@$OpenBSD: patch-cipher_random_c,v 1.2 2016/08/26 08:30:10 jca Exp $

CVE-2016-6313: random: Hash continuous areas in the csprng pool.

  https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=commitdiff;h=e23eec8c9a602eee0a09851a54db0f5d611f125c
  https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=commitdiff;h=c6dbfe89903d0c8191cf50ecf1abb3c8458b427a

--- cipher/random.c.orig	Thu Feb 26 18:24:21 2015
+++ cipher/random.c	Sun Aug 21 16:20:26 2016
@@@@ -360,23 +360,21 @@@@ mix_pool(byte *pool)
 #if DIGESTLEN != 20
 #error must have a digest length of 20 for ripe-md-160
 #endif
-    /* loop over the pool */
+    /* pool -> pool' */
     pend = pool + POOLSIZE;
     memcpy(hashbuf, pend - DIGESTLEN, DIGESTLEN );
     memcpy(hashbuf+DIGESTLEN, pool, BLOCKLEN-DIGESTLEN);
     rmd160_mixblock( &md, hashbuf);
-    memcpy(pool, hashbuf, 20 );
+    memcpy(pool, hashbuf, DIGESTLEN);
 
+    /* Loop for the remaining iterations.  */
     p = pool;
     for( n=1; n < POOLBLOCKS; n++ ) {
-	memcpy(hashbuf, p, DIGESTLEN );
-
-	p += DIGESTLEN;
-	if( p+DIGESTLEN+BLOCKLEN < pend )
-	    memcpy(hashbuf+DIGESTLEN, p+DIGESTLEN, BLOCKLEN-DIGESTLEN);
+	if( p + BLOCKLEN < pend )
+	    memcpy(hashbuf, p, BLOCKLEN);
 	else {
-	    char *pp = p+DIGESTLEN;
-	    for(i=DIGESTLEN; i < BLOCKLEN; i++ ) {
+	    char *pp = p;
+	    for(i=0; i < BLOCKLEN; i++ ) {
 		if( pp >= pend )
 		    pp = pool;
 		hashbuf[i] = *pp++;
@@@@ -384,7 +382,8 @@@@ mix_pool(byte *pool)
 	}
 
 	rmd160_mixblock( &md, hashbuf);
-	memcpy(p, hashbuf, 20 );
+        p += DIGESTLEN;
+	memcpy(p, hashbuf, DIGESTLEN);
     }
     burn_stack (384); /* for the rmd160_mixblock() */
 }
@


1.3.2.1
log
@SECURITY fix for CVE-2016-6313 (actual fix)

I failed to add the patch with the security fix in the previous commit.
Spotted by Markus Lude.
@
text
@d1 1
a1 1
$OpenBSD: patch-cipher_random_c,v 1.2.2.1 2016/08/26 08:32:28 jca Exp $
@


1.2
log
@SECURITY fix for CVE-2016-6313

 * Fix critical security bug in the RNG [CVE-2016-6313].  An attacker
   who obtains 580 bytes from the standard RNG can trivially predict
   the next 20 bytes of output.  Problem detected by Felix Dörre and
   Vladimir Klebanov, KIT.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2.2.1
log
@SECURITY fix for CVE-2016-6313

 * Fix critical security bug in the RNG [CVE-2016-6313].  An attacker
   who obtains 580 bytes from the standard RNG can trivially predict
   the next 20 bytes of output.  Problem detected by Felix Dörre and
   Vladimir Klebanov, KIT.
@
text
@@


1.1
log
@file patch-cipher_random_c was initially added on branch OPENBSD_5_4.
@
text
@d1 50
@


1.1.2.1
log
@Security fix for CVE-2013-4576
@
text
@a0 26
$OpenBSD$

Security fix for CVE-2013-4576
http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=commit;h=93a96e3c0c33370248f6570d8285c4e811d305d4

--- cipher/random.c.orig	Thu Dec 20 18:22:26 2012
+++ cipher/random.c	Sun Dec 15 18:01:28 2013
@@@@ -284,6 +284,18 @@@@ randomize_buffer( byte *buffer, size_t length, int lev
 }
 
 
+/* Randomize the MPI by setting it to NBITS of random of quality LEVEL.  */
+void
+randomize_mpi (MPI mpi, size_t nbits, int level)
+{
+  unsigned char *buffer;
+
+  buffer = get_random_bits (nbits, level, mpi_is_secure (mpi));
+  mpi_set_buffer (mpi, buffer, (nbits+7)/8, 0);
+  xfree (buffer);
+}
+
+
 int
 random_is_faked()
 {
@

