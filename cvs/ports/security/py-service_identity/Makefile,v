head     1.1;
branch   1.1.1;
access   ;
symbols  landry_20170506:1.1.1.1 pkorovin:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.05.06.09.48.44;  author landry;  state Exp;
branches 1.1.1.1;
next     ;
commitid        8Mg3Xp2M7epd80rN;

1.1.1.1
date     2017.05.06.09.48.44;  author landry;  state Exp;
branches ;
next     ;
commitid        8Mg3Xp2M7epd80rN;


desc
@@



1.1
log
@Initial revision
@
text
@# $OpenBSD$

COMMENT =		service identity verification for pyOpenSSL

MODPY_EGG_VERSION =	16.0.0

DISTNAME =		service_identity-${MODPY_EGG_VERSION}
PKGNAME =		py-${DISTNAME}

CATEGORIES =		security

# MIT
PERMIT_PACKAGE_CDROM =	Yes

MODULES =		lang/python
MODPY_PI =		Yes
MODPY_SETUPTOOLS =	Yes

RUN_DEPENDS =		devel/py-asn1${MODPY_FLAVOR} \
			devel/py-asn1-modules${MODPY_FLAVOR} \
			devel/py-attrs${MODPY_FLAVOR} \
			net/py-idna${MODPY_FLAVOR} \
			security/py-openssl${MODPY_FLAVOR}

TEST_DEPENDS =		devel/py-test${MODPY_FLAVOR}

FLAVORS =		python3
FLAVOR ?=

TEST_ENV +=		PYTHONPATH=${WRKSRC}/lib

do-test:
	cd ${WRKSRC} && ${SETENV} ${TEST_ENV} ${MODPY_BIN} -m pytest

.include <bsd.port.mk>
@


1.1.1.1
log
@Import py-service_identity-16.0.0, you know the drill.

service_identity aspires to give you all the tools you need for
verifying whether a certificate is valid for the intended purposes.

In the simplest case, this means host name verification.  However,
service_identity implements RFC 6125 fully and plans to add other
relevant RFCs too.

From Pavel Korovin, ok sthen@@
@
text
@@
