head	1.2;
access;
symbols
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.07.26.01.15.55;	author jeremy;	state dead;
branches;
next	1.1;
commitid	ZcaUqbXa7aLYF57y;

1.1
date	2014.10.17.18.34.17;	author jasper;	state Exp;
branches;
next	;
commitid	aeG2aCLLPrq9FvDt;


desc
@@


1.2
log
@Update to bcrypt 3.1.10
@
text
@$OpenBSD: patch-spec_bcrypt_engine_spec_rb,v 1.1 2014/10/17 18:34:17 jasper Exp $

Make this work with rspec3.

--- spec/bcrypt/engine_spec.rb.orig	Fri Oct 17 20:09:23 2014
+++ spec/bcrypt/engine_spec.rb	Fri Oct 17 20:11:18 2014
@@@@ -57,9 +57,9 @@@@ describe "Generating BCrypt hashes" do
   end
 
   specify "should raise an InvalidSecret error if the secret is invalid" do
-    lambda { BCrypt::Engine.hash_secret(MyInvalidSecret.new, @@salt) }.should raise_error(BCrypt::Errors::InvalidSecret)
-    lambda { BCrypt::Engine.hash_secret(nil, @@salt) }.should_not raise_error(BCrypt::Errors::InvalidSecret)
-    lambda { BCrypt::Engine.hash_secret(false, @@salt) }.should_not raise_error(BCrypt::Errors::InvalidSecret)
+    lambda { BCrypt::Engine.hash_secret(MyInvalidSecret.new, @@salt) }.should raise_error
+    lambda { BCrypt::Engine.hash_secret(nil, @@salt) }.should_not raise_error
+    lambda { BCrypt::Engine.hash_secret(false, @@salt) }.should_not raise_error
   end
 
   specify "should call #to_s on the secret and use the return value as the actual secret data" do
@


1.1
log
@switch to rspec3

ok jeremy@@
@
text
@d1 1
a1 1
$OpenBSD$
@

