head	1.3;
access;
symbols
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_5:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.11.03.10.33.32;	author jakob;	state dead;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.10.15.11.30.57;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.11.13.19.46;	author robert;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2004.10.11.20.17.21;	author robert;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.10.19.18.26.34;	author robert;	state Exp;
branches;
next	;

1.1.4.1
date	2004.10.12.17.21.27;	author robert;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2004.10.19.18.31.46;	author robert;	state Exp;
branches;
next	;

1.3.2.1
date	2005.01.31.01.31.03;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to Cyrus SASL 2.1.20; thanks to Ben Hooper for diffs
@
text
@$OpenBSD: patch-lib_common_c,v 1.2 2004/10/15 11:30:57 robert Exp $
--- lib/common.c.orig	Tue Jul  6 18:03:05 2004
+++ lib/common.c	Fri Oct 15 13:22:39 2004
@@@@ -1838,7 +1838,10 @@@@
   if (! path)
     return SASL_BADPARAM;
 
+  /* Honor external variable only in a safe environment */
+  if (getuid() == geteuid() && getgid() == getegid())
   *path = getenv(SASL_PATH_ENV_VAR);
+  
   if (! *path)
     *path = PLUGINDIR;
 
@


1.3.2.1
log
@SECURITY:
libsasl, contains functions which may load dynamic libraries.
These libraries may be loaded from the path specified by the
environmental variable SASL_PATH, which in some situations may be
fully controlled by a local attacker.
Thus, if a set-user-ID application utilizes libsasl, it may be possible
for a local attacker to gain superuser privileges.
@
text
@d1 4
a4 4
$OpenBSD$
--- lib/common.c.orig	Sun Jan 30 20:12:40 2005
+++ lib/common.c	Sun Jan 30 20:13:26 2005
@@@@ -1838,7 +1838,10 @@@@ _sasl_getpath(void *context __attribute_
d11 1
a11 1
+
@


1.2
log
@fix my stupid typos: getuid -> geteuid, getgid -> getegid

reported by bluhm@@genua.de, markus@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@SECURITY:
libsasl, contains functions which may load dynamic libraries.
These libraries may be loaded from the path specified by the
environmental variable SASL_PATH, which in some situations may be
fully controlled by a local attacker.
Thus, if a set-user-ID application utilizes libsasl, it may be possible
for a local attacker to gain superuser privileges.

ok jakob@@
@
text
@d2 2
a3 2
--- lib/common.c.orig	Mon Oct 11 14:05:00 2004
+++ lib/common.c	Mon Oct 11 14:06:48 2004
d9 1
a9 1
+  if (getuid() == getuid() && getgid() == getgid())
@


1.1.4.1
log
@SECURITY:
libsasl, contains functions which may load dynamic libraries.
These libraries may be loaded from the path specified by the
environmental variable SASL_PATH, which in some situations may be
fully controlled by a local attacker.
Thus, if a set-user-ID application utilizes libsasl, it may be possible
for a local attacker to gain superuser privileges.

ok brad@@
@
text
@@


1.1.4.2
log
@fix my stupid typos: getuid -> geteuid, getgid -> getegid

reported by bluhm@@genua.de, markus@@; ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_common_c,v 1.1.4.1 2004/10/12 17:21:27 robert Exp $
d9 1
a9 1
+  if (getuid() == geteuid() && getgid() == getegid())
@


1.1.2.1
log
@SECURITY:
libsasl, contains functions which may load dynamic libraries.
These libraries may be loaded from the path specified by the
environmental variable SASL_PATH, which in some situations may be
fully controlled by a local attacker.
Thus, if a set-user-ID application utilizes libsasl, it may be possible
for a local attacker to gain superuser privileges.

ok brad@@
@
text
@@


1.1.2.2
log
@fix my stupid typos: getuid -> geteuid, getgid -> getegid

reported by bluhm@@genua.de, markus@@; ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_common_c,v 1.1.2.1 2004/10/11 20:17:21 robert Exp $
d9 1
a9 1
+  if (getuid() == geteuid() && getgid() == getegid())
@


