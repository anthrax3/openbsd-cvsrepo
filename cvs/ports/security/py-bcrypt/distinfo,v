head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	sthen_20130326:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.03.17.08.35.27;	author sthen;	state Exp;
branches;
next	1.6;
commitid	LUobF4hyefQLF8Cm;

1.6
date	2017.02.07.14.45.07;	author sthen;	state Exp;
branches;
next	1.5;
commitid	UOWXwkkVGP5ESdw3;

1.5
date	2016.10.11.13.57.08;	author sthen;	state Exp;
branches;
next	1.4;
commitid	Z3SYvW5Zt9I7tS95;

1.4
date	2016.07.01.15.28.44;	author sthen;	state Exp;
branches;
next	1.3;
commitid	6dIx1S61cn1o8I3d;

1.3
date	2016.01.15.12.34.14;	author sthen;	state Exp;
branches;
next	1.2;
commitid	G0PHIskFXJHoS7Bf;

1.2
date	2014.03.19.11.15.56;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.26.21.37.26;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.26.21.37.26;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to py-bcrypt-3.1.3
@
text
@SHA256 (bcrypt-3.1.3.tar.gz) = ZkXI0K2EUwjePrm+mLb9IqRuxUEr/GZKQj5BHN2PVIg=
SIZE (bcrypt-3.1.3.tar.gz) = 40806
@


1.6
log
@update to py-bcrypt-3.1.2
@
text
@d1 2
a2 2
SHA256 (bcrypt-3.1.2.tar.gz) = NG4XXIIKERwX1MLe8YGpbhgmZS7bC7FuVlCF7VQnhao=
SIZE (bcrypt-3.1.2.tar.gz) = 40365
@


1.5
log
@update to py-bcrypt-3.1.1
@
text
@d1 2
a2 2
SHA256 (bcrypt-3.1.1.tar.gz) = AwmkpyvR3DFCec8e4U4ncidzLxTJtjq5ZxVlThP+kyE=
SIZE (bcrypt-3.1.1.tar.gz) = 40103
@


1.4
log
@update to py-bcrypt-3.1.0
@
text
@d1 2
a2 2
SHA256 (bcrypt-3.1.0.tar.gz) = 5Ugg2Lnv81fRAD9bjUuUmmMrdriWENipM3g/1HYDPr4=
SIZE (bcrypt-3.1.0.tar.gz) = 40014
@


1.3
log
@update to py-bcrypt-2.0.0 (maybe a different codebase or fork; anyway
it supports $2b$ which the in-tree version doesn't) and take maintainer
@
text
@d1 2
a2 2
SHA256 (bcrypt-2.0.0.tar.gz) = iy0ZfvIg0Q63RiXd5687ENqpc66aHq3WNm92P61Dh/o=
SIZE (bcrypt-2.0.0.tar.gz) = 38748
@


1.2
log
@SECURITY update to py-bcrypt 0.4, from Francisco de Borja Lopez Rio
- while there, fix WANTLIB and enable python 3 support; by me

Fix concurrency bug reported by Alan Fairless of spideroak.com:
Multiple threads may hash into the same memory area simultaneously.
This may manifest as occasional random authentication failures (as
user-a's password hash is compared to user-b's), but could potentially
be used to bypass password checking by an attacker (user-a attempts
login on user-b's account, while simultaneously flooding auth requests
against user-a's account to overwrite the hash).
@
text
@d1 2
a2 2
SHA256 (py-bcrypt-0.4.tar.gz) = X6E7zlUUaDUNZsSINpSFBXDz2ijWhmu2OLpE/l6r2ng=
SIZE (py-bcrypt-0.4.tar.gz) = 27399
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
SHA256 (py-bcrypt-0.3.tar.gz) = rxL5lFTolenkMMdXI8O5QZwLzNDqd4A2YtaprFb2Qls=
SIZE (py-bcrypt-0.3.tar.gz) = 17232
@


1.1.1.1
log
@import ports/security/py-bcrypt, ok benoit@@

py-bcrypt is a Python wrapper of OpenBSD's Blowfish password hashing code,
as described in "A Future-Adaptable Password Scheme" by Niels Provos and
David Mazi√®res.

This system hashes passwords using a version of Bruce Schneier's
Blowfish block cipher with modifications designed to raise the cost of
off-line password cracking and frustrate fast hardware implementation.
The computation cost of the algorithm is parametised, so it can be
increased as computers get faster. The intent is to make a compromise
of a password database less likely to result in an attacker gaining
knowledge of the plaintext passwords (e.g. using John the Ripper).
@
text
@@
