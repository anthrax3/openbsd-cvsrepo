head	1.4;
access;
symbols
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	avsm-2000-11-27:1.1.1.1
	avsm:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.06.12.16.05.16;	author avsm;	state dead;
branches;
next	1.3;

1.3
date	2001.02.20.18.14.09;	author danh;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.14.17.37.40;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.27.15.41.46;	author avsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.11.27.15.41.46;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to libmcrypt-2.4.15
@
text
@--- ltconfig.orig	Thu Feb  1 07:27:33 2001
+++ ltconfig	Tue Feb 20 13:12:58 2001
@@@@ -1105,6 +1105,9 @@@@ cygwin* | mingw*)
     with_gnu_ld=no
   fi
   ;;
+openbsd*)
+  with_gnu_ld=no
+  ;;
 
 esac
 
@@@@ -1402,10 +1405,21 @@@@ else
     ;;
 
   openbsd*)
-    archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linkopts'
-    hardcode_libdir_flag_spec='-R$libdir'
     hardcode_direct=yes
     hardcode_shlibpath_var=no
+    case "$host_os" in
+      openbsd[01].* | openbsd2.[0-7] | openbsd2.[0-7].*)
+       archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linkopts'
+       hardcode_libdir_flag_spec='-R$libdir'
+      ;;
+      *)
+       archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $linkopts'
+       hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+       if [ "`/usr/bin/file /usr/lib/libc.so.* | grep ELF`" != "" ]; then
+         export_dynamic_flag_spec='${wl}-E'
+       fi
+      ;;
+    esac
     ;;
 
   os2*)
@@@@ -2022,13 +2036,10 @@@@ netbsd*)
 
 openbsd*)
   version_type=sunos
-  if test "$with_gnu_ld" = yes; then
-    need_lib_prefix=no
-    need_version=no
-  fi
   library_names_spec='${libname}${release}.so$versuffix ${libname}.so$versuffix'
   finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
   shlibpath_var=LD_LIBRARY_PATH
+  deplibs_check_method='pass_all'
   ;;
 
 os2*)
@


1.3
log
@sync libtool patches
@
text
@@


1.2
log
@- cleanup Makefile
- remove USE_LIBTOOL
- sync patch-ltconfig with my original patch
- add missing patch-ltmain.sh
- fixup PLISTs
@
text
@d1 3
a3 3
--- ltconfig.orig	Sat Oct 21 04:39:25 2000
+++ ltconfig	Thu Dec 14 11:44:23 2000
@@@@ -1105,6 +1105,9 @@@@
d13 1
a13 1
@@@@ -1402,10 +1405,18 @@@@
d22 3
a24 3
+      openbsd2.[01234567])
+	archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linkopts'
+	hardcode_libdir_flag_spec='-R$libdir'
d27 5
a31 2
+	archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $linkopts'
+	hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
d37 1
a37 1
@@@@ -2022,13 +2033,10 @@@@
@


1.1
log
@Initial revision
@
text
@d1 3
a3 4
$OpenBSD$
--- ltconfig.orig	Sun Nov 19 16:12:40 2000
+++ ltconfig	Sun Nov 19 16:21:47 2000
@@@@ -1105,6 +1105,9 @@@@ cygwin* | mingw*)
d13 1
a13 1
@@@@ -1402,10 +1405,18 @@@@ else
d34 1
a34 9
@@@@ -1922,7 +1933,6 @@@@ gnu*)
   library_names_spec='${libname}${release}.so$versuffix ${libname}${release}.so${major} ${libname}.so'
   soname_spec='${libname}${release}.so$major'
   shlibpath_var=LD_LIBRARY_PATH
-  deplibs_check_method=pass_all
   ;;
 
 hpux9* | hpux10* | hpux11*)
@@@@ -2022,13 +2032,10 @@@@ netbsd*)
@


1.1.1.1
log
@import of libmcrypt-2.4.7
--

libmcrypt is the library which implements all the algorithms and
modes found in mcrypt. It is currently under development but it
seems to work pretty good.

Unlike most encryption libraries libmcrypt does not have everything
(random number generators, hashes, hmac implementation, key exchange,
public key encryption etc.).  Libmcrypt only implements an interface
to access block and stream encryption algorithms.

Its purpose was to assist in the development of mcrypt by providing
a uniform interface to access several different encryption algorithms,
so that the main program is independent of the encryption algorithms
and the modes used.

Libmcrypt supports the algorithms: BLOWFISH, TWOFISH, DES, TripleDES,
3-WAY, SAFER-sk64, SAFER-sk128, SAFER+, LOKI97, GOST, RC2, RC6,
MARS, IDEA, RIJNDAEL-128 (AES), RIJNDAEL-192, RIJNDAEL-256, SERPENT,
CAST-128 (known as CAST5), CAST-256, ARCFOUR and WAKE.  Block
algorithms can be used in: CBC, ECB, CFB and OFB (8 bit and n bit,
where n is the size of the algorithm's block length).

@
text
@@
