head	1.10;
access;
symbols
	OPENBSD_5_7:1.9.0.38
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.36
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.34
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.32
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.30
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.28
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.26
	OPENBSD_5_0:1.9.0.24
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.22
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.20
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.18
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_TRACKING_SWITCH:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	avsm-2000-11-27:1.1.1.1
	avsm:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2015.03.16.18.07.54;	author naddy;	state dead;
branches;
next	1.9;
commitid	IJdm3Zowcdkcxp5X;

1.9
date	2005.12.24.22.32.53;	author sturm;	state Exp;
branches;
next	1.8;

1.8
date	2004.10.20.18.27.38;	author avsm;	state Exp;
branches;
next	1.7;

1.7
date	2004.09.15.18.36.00;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.18.22.53.29;	author avsm;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.12.16.05.17;	author avsm;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.24.01.34.00;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.05.08.18.26;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.14.17.37.41;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.27.15.41.46;	author avsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.11.27.15.41.46;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.10
log
@fold lib-only PFRAG.shared into PLIST, regen PLIST, and bump
@
text
@@@comment $OpenBSD: PFRAG.shared,v 1.9 2005/12/24 22:32:53 sturm Exp $
@@lib lib/libmcrypt.so.${LIBmcrypt_VERSION}
@


1.9
log
@SHARED_LIBS
USE_LIBTOOL where applicable
@
text
@d1 1
a1 1
@@comment $OpenBSD: PFRAG.shared,v 1.8 2004/10/20 18:27:38 avsm Exp $
@


1.8
log
@update to libmcrypt-2.5.7, local patches merged in
@
text
@d1 2
a2 2
@@comment $OpenBSD: PFRAG.shared,v 1.7 2004/09/15 18:36:00 espie Exp $
@@lib lib/libmcrypt.so.8.7
@


1.7
log
@new plists.
gnutls depends on lzo.
@
text
@d1 2
a2 2
@@comment $OpenBSD: PFRAG.shared,v 1.6 2003/01/18 22:53:29 avsm Exp $
@@lib lib/libmcrypt.so.8.5
@


1.6
log
@Update to libmcrypt-2.5.5

For the moment, this disables dynamic module loading and bundles
together all the ciphers into the main library.  When libtool-1.4
hits our tree, the updated ltdl support can be used to re-enable
the dynloading.
@
text
@d1 2
a2 3
@@comment $OpenBSD$
lib/libmcrypt.so.8.5
DYNLIBDIR(%B)
@


1.5
log
@update to libmcrypt-2.4.15
@
text
@d2 1
a2 30
lib/libmcrypt.so.6.7
lib/libmcrypt/libarcfour.so.0.0
lib/libmcrypt/libblowfish-compat.so.0.0
lib/libmcrypt/libblowfish.so.0.0
lib/libmcrypt/libcast-128.so.0.0
lib/libmcrypt/libcast-256.so.0.0
lib/libmcrypt/libcbc.so.0.0
lib/libmcrypt/libcfb.so.0.0
lib/libmcrypt/libdes.so.0.0
lib/libmcrypt/libecb.so.0.0
lib/libmcrypt/libenigma.so.0.0
lib/libmcrypt/libgost.so.0.0
lib/libmcrypt/libloki97.so.0.0
lib/libmcrypt/libnofb.so.0.0
lib/libmcrypt/libofb.so.0.0
lib/libmcrypt/libpanama.so.0.0
lib/libmcrypt/librc2.so.0.0
lib/libmcrypt/librijndael-128.so.0.0
lib/libmcrypt/librijndael-192.so.0.0
lib/libmcrypt/librijndael-256.so.0.0
lib/libmcrypt/libsafer-sk128.so.0.0
lib/libmcrypt/libsafer-sk64.so.0.0
lib/libmcrypt/libsaferplus.so.0.0
lib/libmcrypt/libserpent.so.0.0
lib/libmcrypt/libstream.so.0.0
lib/libmcrypt/libthreeway.so.0.0
lib/libmcrypt/libtripledes.so.0.0
lib/libmcrypt/libtwofish.so.0.0
lib/libmcrypt/libwake.so.0.0
lib/libmcrypt/libxtea.so.0.0
a3 1
NEWDYNLIBDIR(%D/lib/libmcrypt)
@


1.4
log
@- upgrade to libmcrypt-2.4.10
- bump NEED_vERSION
- move COMMENT file into Makefile

This update has bugfixes in the blowfish[-compat] modules
@
text
@d2 1
a2 1
lib/libmcrypt.so.6.6
@


1.3
log
@- upgrade to libmcrypt-2.4.9

NEWS:
- Due to an endianness handling problem Blowfish algorithm was not compatible
  with other implementations. Now it has been corrected. If you want
  to access the old algorithm used use the "blowfish-compat" module.
- Fixes in mcrypt_list_algorithms() for some systems. Bugs pointed out by
  Jonathan Woolmington <jwool@@ind.tansu.com.au>
- Fixes in stream mode.
- mcrypt_generic_init() no longer fails if smaller key is used. It uses
  the most appropriate key size of the algorithm and pads with zeros.
- Fixes in wake algorithm (and support for IV).
- IV is now used in arcfour (arcfour-iv is now longer used).
  Speedups in Arcfour.
@
text
@d2 1
a2 1
lib/libmcrypt.so.5.5
@


1.2
log
@- cleanup Makefile
- remove USE_LIBTOOL
- sync patch-ltconfig with my original patch
- add missing patch-ltmain.sh
- fixup PLISTs
@
text
@d1 2
a2 4
@@comment $OpenBSD: PFRAG.shared,v 1.1.1.1 2000/11/27 15:41:46 avsm Exp $
lib/libmcrypt.so.4.4
DYNLIBDIR(%B)
lib/libmcrypt/libarcfour-iv.so.0.0
d4 1
d32 2
a33 1
NEWDYNLIBDIR(%B)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@comment $OpenBSD$
d3 1
d33 1
a33 2
DYNLIBDIR(%D/lib)
NEWDYNLIBDIR(%D/lib/libmcrypt)
@


1.1.1.1
log
@import of libmcrypt-2.4.7
--

libmcrypt is the library which implements all the algorithms and
modes found in mcrypt. It is currently under development but it
seems to work pretty good.

Unlike most encryption libraries libmcrypt does not have everything
(random number generators, hashes, hmac implementation, key exchange,
public key encryption etc.).  Libmcrypt only implements an interface
to access block and stream encryption algorithms.

Its purpose was to assist in the development of mcrypt by providing
a uniform interface to access several different encryption algorithms,
so that the main program is independent of the encryption algorithms
and the modes used.

Libmcrypt supports the algorithms: BLOWFISH, TWOFISH, DES, TripleDES,
3-WAY, SAFER-sk64, SAFER-sk128, SAFER+, LOKI97, GOST, RC2, RC6,
MARS, IDEA, RIJNDAEL-128 (AES), RIJNDAEL-192, RIJNDAEL-256, SERPENT,
CAST-128 (known as CAST5), CAST-256, ARCFOUR and WAKE.  Block
algorithms can be used in: CBC, ECB, CFB and OFB (8 bit and n bit,
where n is the size of the algorithm's block length).

@
text
@@
