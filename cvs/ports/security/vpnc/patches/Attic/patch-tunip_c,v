head	1.4;
access;
symbols
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.04.04.21.41.27;	author okan;	state dead;
branches;
next	1.3;

1.3
date	2005.11.11.19.38.07;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.05.10.54.48;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.08.06.38.08;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- update to 0.5.1
- adds a sample split vpn script

from Thomas Schoeller, tested by many - thanks!

ok sthen@@ landry@@
@
text
@$OpenBSD: patch-tunip_c,v 1.3 2005/11/11 19:38:07 sturm Exp $
--- tunip.c.orig	Thu May  5 12:25:00 2005
+++ tunip.c	Fri Nov  4 00:09:30 2005
@@@@ -436,7 +436,7 @@@@ int update_sa_addr(struct sa_desc *p)
 	if (new_addr.sin_addr.s_addr != p->source.sin_addr.s_addr) {
 		char addr1[16];
 		p->source.sin_addr = new_addr.sin_addr;
-		strcpy(addr1, inet_ntoa(p->dest.sin_addr));
+		strlcpy(addr1, inet_ntoa(p->dest.sin_addr), sizeof(addr1));
 		syslog(LOG_NOTICE,
 			"local address for %s is %s", addr1, inet_ntoa(p->source.sin_addr));
 		return 1;
@@@@ -844,7 +844,7 @@@@ static void vpnc_main_loop(struct peer_d
 				|| from.sin_addr.s_addr != peer->remote_sa->dest.sin_addr.s_addr) {
 				/* remote end changed address */
 				char addr1[16];
-				strcpy(addr1, inet_ntoa(peer->remote_sa->dest.sin_addr));
+				strlcpy(addr1, inet_ntoa(peer->remote_sa->dest.sin_addr), sizeof(addr1));
 				syslog(LOG_NOTICE,
 					"spi %u: remote address changed from %s to %s",
 					peer->remote_sa->spi, addr1, inet_ntoa(from.sin_addr));
@


1.3
log
@update to vpnc 0.3.3

from uwe
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@- use a variable for the physical interface in vpnc.sh
- fix buffer length calculation, which prevented vpnc to work in case
of 'big' packets close to tun's MTU (reported by Mischa Diehm
<md at mailq.de>), submitted upstream
@
text
@d1 15
a15 112
$OpenBSD: patch-tunip_c,v 1.1 2005/03/08 06:38:08 sturm Exp $
--- tunip.c.orig	Wed Nov 17 21:23:43 2004
+++ tunip.c	Wed May  4 20:25:47 2005
@@@@ -87,8 +87,8 @@@@ struct sa_desc {
 	unsigned char use_fallback; /* use initial address as fallback? */
 	unsigned char use_dest; /* is dest address known yet? */
 
-	unsigned long spi; /* security parameters index */
-	unsigned long seq_id; /* for replay protection (not implemented) */
+	uint32_t spi; /* security parameters index */
+	uint32_t seq_id; /* for replay protection (not implemented) */
 
 	/* Encryption key */
 	const unsigned char *enc_secret;
@@@@ -118,8 +118,8 @@@@ struct peer_desc {
 
 /* A real ESP header (RFC 2406) */
 typedef struct esp_encap_header {
-	unsigned long spi; /* security parameters index */
-	unsigned long seq_id; /* sequence id (unimplemented) */
+	uint32_t spi; /* security parameters index */
+	uint32_t seq_id; /* sequence id (unimplemented) */
 	/* variable-length payload data + padding */
 	/* unsigned char next_header */
 	/* optional auth data */
@@@@ -136,7 +136,7 @@@@ struct encap_method {
 	unsigned int bufsize, bufpayload, var_header_size;
 	int buflen;
 	struct sockaddr_in from;
-	int fromlen;
+	socklen_t fromlen;
 
 	int (*recv) (struct encap_method * encap,
 		unsigned char *buf, unsigned int bufsize, struct sockaddr_in * from);
@@@@ -151,7 +151,7 @@@@ void encap_esp_send_peer(struct encap_me
 	struct peer_desc *peer, unsigned char *buf, unsigned int bufsize);
 void encap_udp_send_peer(struct encap_method *encap,
 	struct peer_desc *peer, unsigned char *buf, unsigned int bufsize);
-struct peer_desc *peer_find(unsigned long spi, struct encap_method *encap);
+struct peer_desc *peer_find(uint32_t spi, struct encap_method *encap);
 int encap_esp_recv_peer(struct encap_method *encap, struct peer_desc *peer);
 
 /* Yuck! Global variables... */
@@@@ -220,7 +220,7 @@@@ u_short in_cksum(addr, len)
 int encap_rawip_recv(struct encap_method *encap,
 	unsigned char *buf, unsigned int bufsize, struct sockaddr_in *from)
 {
-	int r;
+	ssize_t r;
 	struct ip *p = (struct ip *)buf;
 
 	encap->fromlen = sizeof(encap->from);
@@@@ -268,7 +268,7 @@@@ int encap_udp_recv(struct encap_method *
 	unsigned char *buf, unsigned int bufsize,
 	struct sockaddr_in *from)
 {
-	int r;
+	ssize_t r;
 
 	encap->fromlen = sizeof(encap->from);
 
@@@@ -447,11 +447,11 @@@@ int update_sa_addr(struct sa_desc *p)
 /*
  * Find the peer record associated with a given local SPI.
  */
-struct peer_desc *peer_find(unsigned long spi, struct encap_method *encap)
+struct peer_desc *peer_find(uint32_t spi, struct encap_method *encap)
 {
 	if (vpnpeer.local_sa->spi == spi && vpnpeer.local_sa->em == encap)
 		return &vpnpeer;
-	syslog(LOG_ALERT, "unknown spi %ld", spi);
+	syslog(LOG_ALERT, "unknown spi %u", spi);
 	return NULL;
 }
 
@@@@ -623,7 +623,7 @@@@ void encap_esp_send_peer(struct encap_me
 		return;
 	}
 	if (sent != encap->buflen)
-		syslog(LOG_ALERT, "truncated out (%d out of %d)", sent, encap->buflen);
+		syslog(LOG_ALERT, "truncated out (%ld out of %d)", (long)sent, encap->buflen);
 }
 
 /*
@@@@ -659,8 +659,8 @@@@ void encap_udp_send_peer(struct encap_me
 		return;
 	}
 	if (sent != encap->buflen)
-		syslog(LOG_ALERT, "truncated out (%Zd out of %Zd)",
-			sent, encap->buflen);
+		syslog(LOG_ALERT, "truncated out (%ld out of %d)",
+			(long)sent, encap->buflen);
 }
 
 int encap_esp_recv_peer(struct encap_method *encap, struct peer_desc *peer)
@@@@ -686,6 +686,7 @@@@ int encap_esp_recv_peer(struct encap_met
 	/* Handle optional authentication field */
 	if (peer->local_sa->md_algo) {
 		len -= 12; /*gcry_md_get_algo_dlen(peer->local_sa->md_algo); */
+		encap->buflen -= 12;
 		if (hmac_compute(peer->local_sa->md_algo,
 				encap->buf + encap->bufpayload,
 				encap->fixed_header_size + encap->var_header_size + len,
@@@@ -748,6 +749,7 @@@@ int encap_esp_recv_peer(struct encap_met
 	printf("pad len: %d, next_header: %d\n", padlen, next_header);
 #endif
 	len -= padlen + 2;
+	encap->buflen -= padlen + 2;
 
 	/* Check padding */
 	pad = encap->buf + encap->bufpayload
@@@@ -838,7 +840,7 @@@@ static void vpnc_main_loop(struct peer_d
d17 2
a18 1
 				strcpy(addr1, inet_ntoa(peer->remote_sa->dest.sin_addr));
d20 1
a20 2
-					"spi %ld: remote address changed from %s to %s",
+					"spi %u: remote address changed from %s to %s",
a21 2
 				peer->remote_sa->dest.sin_addr.s_addr = from.sin_addr.s_addr;
 				peer->remote_sa->use_dest = 1;
@


1.1
log
@fix a few 64bit issues, making this work on 64bit archs

based on a diff from Zach Brown <zab at zabbo.net> sent to a vpnc-list
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ tunip.c	Mon Mar  7 23:10:23 2005
d96 17
a112 1
@@@@ -838,7 +838,7 @@@@ static void vpnc_main_loop(struct peer_d
@

