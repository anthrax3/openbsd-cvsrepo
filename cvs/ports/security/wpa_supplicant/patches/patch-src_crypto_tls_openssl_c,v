head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.10.07.14.44.03;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	oosOV9xON6wYGLhd;

1.3
date	2015.09.29.11.57.54;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	eUPwvhQd2xz5DvUR;

1.2
date	2014.09.02.13.04.34;	author dcoppa;	state dead;
branches;
next	1.1;
commitid	bDCrwYo4jQ0AgfoU;

1.1
date	2014.03.18.05.57.22;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
Update to wpa_supplicant-2.6

Tested by pascal@@ and Laurence Tratt
feedback by sthen@@
@
text
@$OpenBSD: patch-src_crypto_tls_openssl_c,v 1.3 2015/09/29 11:57:54 dcoppa Exp $

Compatibility fixes for LibreSSL

--- src/crypto/tls_openssl.c.orig	Sun Sep 27 21:02:05 2015
+++ src/crypto/tls_openssl.c	Mon Sep 28 13:43:46 2015
@@@@ -919,7 +919,7 @@@@ void * tls_init(const struct tls_config *conf)
 		}
 #endif /* OPENSSL_FIPS */
 #endif /* CONFIG_FIPS */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 		SSL_load_error_strings();
 		SSL_library_init();
 #ifndef OPENSSL_NO_SHA256
@@@@ -1043,7 +1043,7 @@@@ void tls_deinit(void *ssl_ctx)
 
 	tls_openssl_ref_count--;
 	if (tls_openssl_ref_count == 0) {
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #ifndef OPENSSL_NO_ENGINE
 		ENGINE_cleanup();
 #endif /* OPENSSL_NO_ENGINE */
@@@@ -3976,7 +3976,7 @@@@ int tls_connection_set_params(void *tls_ctx, struct tl
 		engine_id = "pkcs11";
 
 #if defined(EAP_FAST) || defined(EAP_FAST_DYNAMIC) || defined(EAP_SERVER_FAST)
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	if (params->flags & TLS_CONN_EAP_FAST) {
 		wpa_printf(MSG_DEBUG,
 			   "OpenSSL: Use TLSv1_method() for EAP-FAST");
@


1.3
log
@
Update to wpa_supplicant-2.5

Tested by me, Gregor Best, and sthen@@

Help and ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d7 1
a7 11
@@@@ -2229,7 +2229,7 @@@@ static int tls_parse_pkcs12(struct tls_data *data, SSL
 	}
 
 	if (certs) {
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
 		SSL_clear_chain_certs(ssl);
 		while ((cert = sk_X509_pop(certs)) != NULL) {
 			X509_NAME_oneline(X509_get_subject_name(cert), buf,
@@@@ -2247,7 +2247,7 @@@@ static int tls_parse_pkcs12(struct tls_data *data, SSL
 			/* Try to continue anyway */
d9 2
a10 10
 		sk_X509_free(certs);
-#ifndef OPENSSL_IS_BORINGSSL
+#if !defined(OPENSSL_IS_BORINGSSL) && !defined(LIBRESSL_VERSION_NUMBER)
 		res = SSL_build_cert_chain(ssl,
 					   SSL_BUILD_CHAIN_FLAG_CHECK |
 					   SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR);
@@@@ -2812,7 +2812,7 @@@@ int tls_connection_get_random(void *ssl_ctx, struct tl
 	if (conn == NULL || keys == NULL)
 		return -1;
 	ssl = conn->ssl;
d13 4
a16 2
 	if (ssl == NULL || ssl->s3 == NULL || ssl->session == NULL)
 		return -1;
d18 2
a19 13
@@@@ -2841,7 +2841,7 @@@@ int tls_connection_get_random(void *ssl_ctx, struct tl
 #ifndef CONFIG_FIPS
 static int openssl_get_keyblock_size(SSL *ssl)
 {
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	const EVP_CIPHER *c;
 	const EVP_MD *h;
 	int md_size;
@@@@ -2911,7 +2911,7 @@@@ static int openssl_tls_prf(struct tls_connection *conn
 		   "mode");
 	return -1;
 #else /* CONFIG_FIPS */
d22 5
a26 4
 	SSL *ssl;
 	u8 *rnd;
 	int ret = -1;
@@@@ -3394,7 +3394,7 @@@@ int tls_connection_set_cipher_list(void *tls_ctx, stru
a27 4
 	wpa_printf(MSG_DEBUG, "OpenSSL: cipher suites: %s", buf + 1);
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
a28 6
 	if (os_strstr(buf, ":ADH-")) {
 		/*
@@@@ -3977,7 +3977,7 @@@@ static int tls_sess_sec_cb(SSL *s, void *secret, int *
 	struct tls_connection *conn = arg;
 	int ret;
 
d31 3
a33 3
 	if (conn == NULL || conn->session_ticket_cb == NULL)
 		return 0;
 
@


1.2
log
@
Update to wpa_supplicant-2.2

Tested by pascal@@ and myself.
I also take maintainership, as per sthen's request.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_crypto_tls_openssl_c,v 1.1 2014/03/18 05:57:22 dcoppa Exp $
d3 1
a3 3
commit b62d5b5450101676a0c05691b4bcd94e11426397
Author: Jouni Malinen <j@@w1.fi>
Date:   Wed Feb 19 11:56:02 2014 +0200
d5 48
a52 18
Revert "OpenSSL: Do not accept SSL Client certificate for server"

This reverts commit 51e3eafb68e15e78e98ca955704be8a6c3a7b304. There are
too many deployed AAA servers that include both id-kp-clientAuth and
id-kp-serverAuth EKUs for this change to be acceptable as a generic rule
for AAA authentication server validation. OpenSSL enforces the policy of
not connecting if only id-kp-clientAuth is included. If a valid EKU is
listed with it, the connection needs to be accepted.

Signed-off-by: Jouni Malinen <j@@w1.fi>

--- src/crypto/tls_openssl.c.orig	Tue Feb  4 12:23:35 2014
+++ src/crypto/tls_openssl.c	Fri Mar 14 14:33:33 2014
@@@@ -105,7 +105,6 @@@@ struct tls_connection {
 	unsigned int ca_cert_verify:1;
 	unsigned int cert_probe:1;
 	unsigned int server_cert_only:1;
-	unsigned int server:1;
d54 1
a54 1
 	u8 srv_cert_hash[32];
d56 8
a63 3
@@@@ -1477,16 +1476,6 @@@@ static int tls_verify_cb(int preverify_ok, X509_STORE_
 				       TLS_FAIL_SERVER_CHAIN_PROBE);
 	}
d65 4
a68 19
-	if (!conn->server && err_cert && preverify_ok && depth == 0 &&
-	    (err_cert->ex_flags & EXFLAG_XKUSAGE) &&
-	    (err_cert->ex_xkusage & XKU_SSL_CLIENT)) {
-		wpa_printf(MSG_WARNING, "TLS: Server used client certificate");
-		openssl_tls_fail_event(conn, err_cert, err, depth, buf,
-				       "Server used client certificate",
-				       TLS_FAIL_SERVER_USED_CLIENT_CERT);
-		preverify_ok = 0;
-	}
-
 	if (preverify_ok && context->event_cb != NULL)
 		context->event_cb(context->cb_ctx,
 				  TLS_CERT_CHAIN_SUCCESS, NULL);
@@@@ -2537,8 +2526,6 @@@@ openssl_handshake(struct tls_connection *conn, const s
 {
 	int res;
 	struct wpabuf *out_data;
-
-	conn->server = !!server;
a69 2
 	/*
 	 * Give TLS handshake data from the server (if available) to OpenSSL
@


1.1
log
@
Update to wpa_supplicant-2.1.

Tested by pascal@@ and Gregor Best

OK sthen@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@

