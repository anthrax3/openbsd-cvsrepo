head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.4
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.2
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.10.11.15.06.41;	author sthen;	state Exp;
branches;
next	;
commitid	AutJSO3DOLjhpF3S;


desc
@@


1.1
log
@update to certbot/py-acme 0.9.1

add a little script to client/files/ for people wanting to move to acme-client
and retain their old key
@
text
@#!/usr/bin/perl

# Needs p5-Crypt-OpenSSL-RSA, p5-Crypt-OpenSSL-Bignum. Converts JSON-formatted
# private key on stdin (see /etc/letsencrypt/accounts/.../private_key.json)
# to a base64 key as used by acme-client(1).

use Crypt::OpenSSL::RSA;
use Crypt::OpenSSL::Bignum;
use JSON::PP;
use MIME::Base64;

my $json_content = <STDIN>;
$json_content =~ tr/-/+/;
$json_content =~ tr/_/\//;

my $json = decode_json($json_content);

my $n = Crypt::OpenSSL::Bignum->new_from_bin(decode_base64($json->{n}));
my $e = Crypt::OpenSSL::Bignum->new_from_bin(decode_base64($json->{e}));
my $d = Crypt::OpenSSL::Bignum->new_from_bin(decode_base64($json->{d}));
my $p = Crypt::OpenSSL::Bignum->new_from_bin(decode_base64($json->{p}));
my $q = Crypt::OpenSSL::Bignum->new_from_bin(decode_base64($json->{q}));

my $rsa = Crypt::OpenSSL::RSA->new_key_from_parameters($n, $e, $d, $p, $q);

print($rsa->get_private_key_string());
@
