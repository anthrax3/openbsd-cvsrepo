head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.24
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.20
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.12.14.14.21.44;	author jca;	state dead;
branches;
next	1.1;
commitid	fhBJx5KWtYcMccFA;

1.1
date	2010.10.19.07.59.04;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove security/l0phtcrack

Reasons include:
- i386 only
- full of scary patches and build warnings, embeds old libcrypto code,
  readsmb is a pcap listener that needs to run as root...
- no licensing information for l0phtcrack itself
- LANMAN and NTLMv1 auth are so old and braindead it's not even funny.
  Yes, they are still used out there, no, they really shouldn't be.

ok mestre@@ sthen@@ ajacoutot@@
@
text
@$OpenBSD: patch-ztest_c,v 1.1 2010/10/19 07:59:04 jsg Exp $
--- ztest.c.orig	Sat Oct 16 15:08:05 2010
+++ ztest.c	Sat Oct 16 15:09:48 2010
@@@@ -137,9 +137,9 @@@@ int issame(char *, char *, int);
    	
 	fixed_key[] = "\xAA\xD3\xB4\x35\xB5\x14\x04\xEE";
 	memset(deskey3, '\0', sizeof(deskey3)); - key of all 0's
-	des_set_key((des_cblock *)deskey3, ks3); 
-	des_ecb_encrypt((des_cblock *)fixed_key,
-  	    (des_cblock *)str_to_crypt, ks3, DES_DECRYPT);
+	DES_set_key((DES_cblock *)deskey3, &ks3); 
+	DES_ecb_encrypt((DES_cblock *)fixed_key,
+  	    (DES_cblock *)str_to_crypt, ks3, DES_DECRYPT);
 */
 
 char str_to_crypt[] = "\x4b\x47\x53\x21\x40\x23\x24\x25";
@@@@ -284,8 +284,8 @@@@ void main(int argc, char **argv) {
 int cracklanman(struct user_struct *Ustruct, char *dict_word, char *fullhash){
   unsigned char passwd[14];
   unsigned char lanman[16];
-  des_cblock deskey1, deskey2;
-  des_key_schedule ks1, ks2;
+  DES_cblock deskey1, deskey2;
+  DES_key_schedule ks1, ks2;
 
 
   memset(passwd, '\0', sizeof(passwd));
@@@@ -302,18 +302,18 @@@@ int cracklanman(struct user_struct *Ustruct, char *dic
 
   str_to_key(passwd, deskey1);  /* create the first 8byte odd 
                                    parity des key */
-  des_set_key((des_cblock *)deskey1,ks1); /* setup the key schedule */
+  DES_set_key((DES_cblock *)deskey1,&ks1); /* setup the key schedule */
 
-  des_ecb_encrypt((des_cblock *)str_to_crypt, /* encrypt the known 
+  DES_ecb_encrypt((DES_cblock *)str_to_crypt, /* encrypt the known 
                                                  8byte value */
-              (des_cblock *)lanman, ks1, DES_ENCRYPT); /* against the 
+              (DES_cblock *)lanman, &ks1, DES_ENCRYPT); /* against the 
                                                    first des key */
 
   str_to_key(&(passwd[7]), deskey2);
-  des_set_key((des_cblock *)deskey2,ks2);
+  DES_set_key((DES_cblock *)deskey2,&ks2);
 
-  des_ecb_encrypt((des_cblock *)str_to_crypt,\
-                              (des_cblock *)&lanman[8], ks2, DES_ENCRYPT);
+  DES_ecb_encrypt((DES_cblock *)str_to_crypt,\
+                              (DES_cblock *)&lanman[8], &ks2, DES_ENCRYPT);
 
   strncpy(fullhash, (const char *)lanman, sizeof(lanman));
 
@@@@ -715,16 +715,16 @@@@ int brute_lanman(struct user_struct *head, FILE *outli
 
 void half_lanman(char *half_hash, char *brute_str){
   unsigned char lanman[8];
-  des_cblock deskey1;
-  des_key_schedule ks1;
+  DES_cblock deskey1;
+  DES_key_schedule ks1;
 
   /* create the first 8byte odd parity des key */
   str_to_key((unsigned char *)brute_str, deskey1);  
   /* setup the key schedule */
-  des_set_key((des_cblock *)deskey1,ks1); 
+  DES_set_key((DES_cblock *)deskey1,&ks1); 
 
   /* encrypt the known 8byte value against the first des key */
-  des_ecb_encrypt((des_cblock *)str_to_crypt, (des_cblock *)lanman, ks1,\
+  DES_ecb_encrypt((DES_cblock *)str_to_crypt, (DES_cblock *)lanman, &ks1,\
 	 DES_ENCRYPT); 
 
   memcpy(half_hash, lanman, 8);
@@@@ -735,8 +735,8 @@@@ void half_lanman(char *half_hash, char *brute_str){
 void full_lanman(char *fullhash, char *dict_word){
   unsigned char passwd[14];
   unsigned char lanman[16];
-  des_cblock deskey1, deskey2;
-  des_key_schedule ks1, ks2;
+  DES_cblock deskey1, deskey2;
+  DES_key_schedule ks1, ks2;
 
   memset(passwd, '\0', sizeof(passwd));
   memset(lanman, '\0', sizeof(lanman));
@@@@ -745,18 +745,18 @@@@ void full_lanman(char *fullhash, char *dict_word){
 
   str_to_key(passwd, deskey1);  /* create the first 8byte odd 
                                    parity des key */
-  des_set_key((des_cblock *)deskey1,ks1); /* setup the key schedule */
+  DES_set_key((DES_cblock *)deskey1,&ks1); /* setup the key schedule */
 
-  des_ecb_encrypt((des_cblock *)str_to_crypt, /* encrypt the known 
+  DES_ecb_encrypt((DES_cblock *)str_to_crypt, /* encrypt the known 
                                                  8byte value */
-              (des_cblock *)lanman, ks1, DES_ENCRYPT); /* against the 
+              (DES_cblock *)lanman, &ks1, DES_ENCRYPT); /* against the 
                                                    first des key */
 
   str_to_key(&(passwd[7]), deskey2);
-  des_set_key((des_cblock *)deskey2,ks2);
+  DES_set_key((DES_cblock *)deskey2,&ks2);
 
-  des_ecb_encrypt((des_cblock *)str_to_crypt,\
-                              (des_cblock *)&lanman[8], ks2, DES_ENCRYPT);
+  DES_ecb_encrypt((DES_cblock *)str_to_crypt,\
+                              (DES_cblock *)&lanman[8], &ks2, DES_ENCRYPT);
 
   strncpy(fullhash, (const char *)lanman, sizeof(lanman));
 
@


1.1
log
@libdes -> libcrypto
ok benoit@@
@
text
@d1 1
a1 1
$OpenBSD$
@

