head	1.3;
access;
symbols
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2000.09.07.04.40.18;	author brad;	state dead;
branches;
next	1.2;

1.2
date	99.12.12.18.38.51;	author dugsong;	state Exp;
branches;
next	1.1;

1.1
date	99.12.02.05.29.10;	author dugsong;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bye bye
@
text
@--- rsa.c.orig	Sun Dec 12 13:31:52 1999
+++ rsa.c	Sun Dec 12 13:35:12 1999
@@@@ -33,6 +33,8 @@@@
   unsigned char byte, pkcsBlock[MAX_RSA_MODULUS_LEN];
   unsigned int i, modulusLen;
   
+  if (publicKey->bits > MAX_RSA_MODULUS_BITS)
+    return (RE_LEN);
   modulusLen = (publicKey->bits + 7) / 8;
   if (inputLen + 11 > modulusLen)
     return (RE_LEN);
@@@@ -78,6 +80,8 @@@@
   unsigned char pkcsBlock[MAX_RSA_MODULUS_LEN];
   unsigned int i, modulusLen, pkcsBlockLen;
   
+  if (publicKey->bits > MAX_RSA_MODULUS_BITS)
+    return (RE_LEN);
   modulusLen = (publicKey->bits + 7) / 8;
   if (inputLen > modulusLen)
     return (RE_LEN);
@@@@ -129,6 +133,8 @@@@
   unsigned char pkcsBlock[MAX_RSA_MODULUS_LEN];
   unsigned int i, modulusLen;
   
+  if (privateKey->bits > MAX_RSA_MODULUS_BITS)
+    return (RE_LEN);
   modulusLen = (privateKey->bits + 7) / 8;
   if (inputLen + 11 > modulusLen)
     return (RE_LEN);
@@@@ -168,6 +174,8 @@@@
   unsigned char pkcsBlock[MAX_RSA_MODULUS_LEN];
   unsigned int i, modulusLen, pkcsBlockLen;
   
+  if (privateKey->bits > MAX_RSA_MODULUS_BITS)
+    return (RE_LEN);
   modulusLen = (privateKey->bits + 7) / 8;
   if (inputLen > modulusLen)
     return (RE_LEN);
@


1.2
log
@stricter fix for oflow
@
text
@@


1.1
log
@fix buffer overflow in RSA{Public,Private}Decrypt. from CORE SDI.
@
text
@d1 3
a3 3
--- rsa.c.orig	Fri Mar 25 14:01:48 1994
+++ rsa.c	Wed Dec  1 23:01:22 1999
@@@@ -33,6 +33,9 @@@@
d7 1
a7 1
+  if (inputLen + 3 > MAX_RSA_MODULUS_LEN)
a8 1
+
d12 1
a12 1
@@@@ -78,6 +81,9 @@@@
d16 1
a16 1
+  if (inputLen > MAX_RSA_MODULUS_LEN)
a17 1
+
d21 1
a21 1
@@@@ -129,6 +135,9 @@@@
d25 1
a25 1
+  if (inputLen + 3 > MAX_RSA_MODULUS_LEN)
a26 1
+
d30 1
a30 1
@@@@ -168,6 +177,9 @@@@
d34 1
a34 1
+  if (inputLen > MAX_RSA_MODULUS_LEN)
a35 1
+
@

