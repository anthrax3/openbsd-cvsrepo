head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.28
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.38
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.36
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.34
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.32
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.30
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.28
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.26
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.24
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.22
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.20
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.18
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.16
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.14
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.12
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.10
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.8
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	danh_2000-Jan-03:1.1.1.1
	danh:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.05.06.17.23.10;	author naddy;	state Exp;
branches;
next	1.2;
commitid	fU0Wta3LENaZmtQf;

1.2
date	2010.05.22.16.02.23;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.03.22.34.09;	author danh;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.01.03.22.34.09;	author danh;	state Exp;
branches;
next	;


desc
@@


1.3
log
@add missing headers and fix main() prototype to make this build with clang
@
text
@$OpenBSD: patch-src_node_c,v 1.2 2010/05/22 16:02:23 espie Exp $
Index: src/node.c
--- src/node.c.orig
+++ src/node.c
@@@@ -49,7 +49,7 @@@@ int init( void )
    global.self.addr.sin_family = AF_INET;
    global.self.addr.sin_addr.s_addr = INADDR_ANY;
    if( !global.self.addr.sin_port )
-      global.self.addr.sin_port = DEFAULT_PORT;		// no port chosen, use default
+      global.self.addr.sin_port = htons(DEFAULT_PORT);		// no port chosen, use default
    global.self.sa_len = sizeof(global.self.addr);
    
    if( bind( global.self.socket,
@@@@ -67,7 +67,7 @@@@ void sleep_mode( void )
       (struct sockaddr *)&global.master.addr,
       &global.master.sa_len );
    FD_SET(global.master.socket, &global.net_fds);
-   strcpy(global.master.ipstr,(u_char *)inet_ntoa(&global.master.addr.sin_addr));
+   strcpy(global.master.ipstr,(u_char *)inet_ntoa(global.master.addr.sin_addr));
 // indicate a first time connect to master
    write( global.master.socket, FIRST_SEND, strlen(FIRST_SEND) );
 }
@@@@ -102,21 +102,22 @@@@ void clean_up( int exit_status )
 
 
 /////////////////////////////
-int main( int argc, u_char **argv )
+int main( int argc, char **argv )
 {
    u_int exit_state = 0;
    global.self.addr.sin_port = 0;
 
 // check for specific port request at command line
-   if(!commline_handler(argc,argv))
+   if(!commline_handler(argc,(u_char **)argv))
       clean_up(1);
    if(!init())
-      error("could not initialize on port: %d\n", global.self.addr.sin_port );
+      error("could not initialize on port: %d\n", 
+	 ntohs(global.self.addr.sin_port) );
 
    while(!exit_state)
    {
    // sleep
-      print_handler("listening on: %d\n", global.self.addr.sin_port );
+      print_handler("listening on: %d\n", ntohs(global.self.addr.sin_port) );
       sleep_mode();
    // awake
       print_handler("master connected at %s.\n",
@@@@ -139,7 +140,7 @@@@ int main( int argc, u_char **argv )
             static u_int len;
 
             read(global.master.socket, netbuf, MAX_PACKET_SIZE);
-            if( pstr = message_handler(netbuf,&len) )
+            if( (pstr = message_handler(netbuf,&len)) )
             {
               	write( global.master.socket, pstr, len );
                print(".\n");
@


1.2
log
@protos clean-up
@
text
@d1 5
a5 13
$OpenBSD: patch-src_node_c,v 1.1.1.1 2001/01/03 22:34:09 danh Exp $
--- src/node.c.orig	Sat Jan 30 22:10:17 1999
+++ src/node.c	Sat May 22 18:01:33 2010
@@@@ -8,6 +8,8 @@@@ node.c: network core for serving the master (master.c)
 
 /////////////////////////////
 #include "node.h"
+#include <string.h>
+#include <stdlib.h>
 
 
 /////////////////////////////
@@@@ -49,7 +51,7 @@@@ int init( void )
d14 22
a35 2
@@@@ -111,12 +113,13 @@@@ int main( int argc, u_char **argv )
    if(!commline_handler(argc,argv))
d50 9
@


1.1
log
@Initial revision
@
text
@d1 13
a13 4
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
--- src/node.c.orig	Sat Jan 30 16:10:17 1999
+++ src/node.c	Wed Jan  3 15:26:17 2001
@@@@ -49,7 +49,7 @@@@ int init( void )
d22 1
a22 1
@@@@ -111,12 +111,13 @@@@ int main( int argc, u_char **argv )
@


1.1.1.1
log
@Slurpie is a passwd file cracker similar to CrackerJack and John
the Ripper except that it can be run in a distributed environment
(multiple computers aka nodes).

Submitted by:	Brian Caswell <bmc@@mitre.org>
@
text
@@
