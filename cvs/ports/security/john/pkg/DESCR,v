head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.28
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.26
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.24
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.20
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.12
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.10
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_TRACKING_SWITCH:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	dugsong_1999-May-31:1.1.1.1
	dugsong:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2011.01.07.16.26.30;	author benoit;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.07.15.34.56;	author benoit;	state dead;
branches;
next	1.7;

1.7
date	2007.09.06.19.15.14;	author naddy;	state Exp;
branches;
next	1.6;

1.6
date	2004.09.23.21.52.08;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.26.17.57.38;	author marcm;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.06.03.45.06;	author pvalchev;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.10.32.16;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	99.11.29.16.40.26;	author dugsong;	state Exp;
branches;
next	1.1;

1.1
date	99.05.31.16.12.22;	author dugsong;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.31.16.12.22;	author dugsong;	state Exp;
branches;
next	;


desc
@@


1.9
log
@revert to previous release following the advice of jasper@@ and
I will rework on it
@
text
@John the Ripper -- Password Cracker
=====================================

John the Ripper is designed to be both powerful and fast. It combines
several cracking modes in one program, and is fully configurable for your
particular needs (you can even define a custom cracking mode using the
built-in compiler supporting a subset of C).

Out of the box, John supports (and autodetects) the following ciphertext
formats: standard and double-length DES-based, BSDI's extended DES-based,
FreeBSD's (and not only) MD5-based and OpenBSD's Blowfish-based.

With just one extra command (required to extract the passwords), John can
crack AFS passwords and WinNT LM hashes.

Unlike other crackers, John doesn't use a crypt(3)-style routine. Instead,
it has its own highly optimized modules for different ciphertext formats
and architectures. Some of the algorithms used couldn't be implemented in
a crypt(3)-style routine: they require a more powerful interface (bitslice
DES is an example). Additionally, there're assembly routines for several
processors and architectures (special Intel Pentium version, x86 with MMX,
generic x86, Alpha EV4, SPARC V8).
@


1.8
log
@- add contrib FLAVOR with jumbo patch
- modify PLIST, MESSAGE and DESCR
@
text
@@


1.7
log
@sync FLAVORS and DESCR; from Pierre Riteau
@
text
@@


1.6
log
@Enable mmx support by default and add a no_mmx flavor to disable it.
jolan@@ ok.
@
text
@a22 3

Flavors:
	* no_mmx: disable MMX support
@


1.5
log
@Update to 1.6.36 offering significant performance improvements over
the 1.6 version.  Also now uses the system dictionary as a wordlist
by default.

Removed MAINTAINER at MAINTAINER's request.

ok MAINTAINER
@
text
@d23 3
@


1.4
log
@add homepage to description
@
text
@d11 1
a11 1
FreeBSD's (and not only) MD5-based, and OpenBSD's Blowfish-based.
a22 2

WWW: ${HOMEPAGE}
@


1.3
log
@better
@
text
@d23 2
@


1.2
log
@update MASTER_SITES to primary non-US site; john is not subject to any crypto restrictions; fix location of sharable data dir; fix location of john's temp files
@
text
@d1 1
a1 3
from john's README:

 John the Ripper -- Password Cracker
a22 3

-d.

@


1.1
log
@Initial revision
@
text
@d1 1
a5 49
John the Ripper is a UNIX password cracker, currently available for UNIX,
DOS, WinNT/Win95. Version 1.5 has been tested with Linux x86/Alpha/SPARC,
FreeBSD x86, OpenBSD x86, Solaris 2.x SPARC and x86, Digital UNIX. There's
also a generic make target that should work on most other UNIX systems.

The DOS and Win32 ports are done with DJGPP and Cygnus Developer's Kit,
respectively.

 How to Install
----------------

See doc/INSTALL for information on installing John on your system.

 How to Use
------------

To run John, you need to supply it with some password files, and specify a
cracking mode, like this, using the "single crack" mode, and assuming that
passwd is a copy of your password file:

	john -single passwd

and then, with a wordlist:

	john -wordfile:/usr/dict/words -rules passwd

Cracked passwords will be printed to the terminal and saved in file called
~/john.pot (in this text '~' means John's "home directory", that is, the
directory you installed John's binary in). This file is also used not to
load passwords that you already cracked, when you run John the next time.
To retrieve the cracked passwords, run:

	john -show passwd

While cracking, you can press any key for status, or Ctrl+C to abort the
session, saving point information to a file (~/restore by default). By the
way, if you press Ctrl+C twice John will abort immediately without saving.
The point information is also saved every 10 minutes (see src/params.h) in
case of a crash. To continue an interrupted session, run:

	john -restore

Anyway, you probably should have a look at doc/OPTIONS for a list of all
the command line options, and at doc/EXAMPLES for more John usage examples
with other cracking modes.

 Features and Performance
--------------------------

d9 1
a9 4
built-in compiler supporting a subset of C). Also, John is available for
several different platforms, which enables you to use the same cracker
everywhere (for example even continue a cracking session that you started
on another platform).
d15 3
d26 1
a26 17
 Documentation
---------------

The rest of documentation is located in separate files, listed here in the
recommended reading order:

INSTALL		- you've probably read it already
OPTIONS		- command line options, and additional utilities
MODES		- cracking modes: what they are
CONFIG   (*)	- how to customize
RULES    (*)	- wordlist rules syntax
EXTERNAL (*)	- defining an external mode
EXAMPLES	- usage examples -- strongly recommended
FAQ		- guess
NEWS		- history of changes
CREDITS		- credits, and how to contact me
(*) most users can safely skip these
a27 1
Happy reading!
@


1.1.1.1
log
@john the ripper port
@
text
@@
