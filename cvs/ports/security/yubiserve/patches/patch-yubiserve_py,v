head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	sthen_20120718:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2015.08.25.12.24.02;	author sthen;	state Exp;
branches;
next	1.5;
commitid	nDm3l6HdO8KuMnQ3;

1.5
date	2015.07.18.04.09.27;	author sthen;	state Exp;
branches;
next	1.4;
commitid	f0MfVw1vav0FcG3m;

1.4
date	2014.12.22.14.10.58;	author sthen;	state Exp;
branches;
next	1.3;
commitid	NfbBpjxH0sxt4VBo;

1.3
date	2014.12.22.13.22.39;	author sthen;	state Exp;
branches;
next	1.2;
commitid	9XyHS1ap1FY975kN;

1.2
date	2014.03.27.13.52.30;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.18.08.25.07;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.07.18.08.25.07;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fix path to pem file, lost in previous commit
@
text
@$OpenBSD: patch-yubiserve_py,v 1.5 2015/07/18 04:09:27 sthen Exp $

sqlite3 support from
http://code.google.com/p/yubico-yubiserve/source/list r39

remove bogus timestamp checking code; that isn't what the timestamps are for,
and they wrap after between 0 and 24-and-a-bit days uptime causing failures.

--- yubiserve.py.orig	Tue Aug 25 13:20:55 2015
+++ yubiserve.py	Tue Aug 25 13:21:29 2015
@@@@ -1,4 +1,4 @@@@
-#!/usr/bin/python
+#!${MODPY_BIN}
 import re, os, time, socket
 import urlparse, SocketServer, urllib, BaseHTTPServer
 from Crypto.Cipher import AES
@@@@ -10,12 +10,16 @@@@ try:
 except ImportError:
 	pass
 try:
+	import sqlite3
+except ImportError:
+	pass
+try:
 	import sqlite
 except ImportError:
 	pass
 
 def parseConfigFile():	# Originally I wrote this function to parse PHP configuration files!
-	config = open(os.path.dirname(os.path.realpath(__file__)) + '/yubiserve.cfg', 'r').read().splitlines()
+	config = open('${SYSCONFDIR}/yubiserve/yubiserve.cfg', 'r').read().splitlines()
 	keys = {}
 	for line in config:
 		match = re.search('(.*?)=(.*);', line)
@@@@ -45,7 +49,7 @@@@ class OATHValidation():
 	def validateOATH(self, OATH, publicID):
 		cur = self.con.cursor()
 		cur.execute("SELECT counter, secret FROM oathtokens WHERE publicname = '" + publicID + "' AND active = '1'")
-		if (cur.rowcount != 1):
+		if cur:
 			validationResult = self.status['BAD_OTP']
 			return validationResult
 		(actualcounter, key) = cur.fetchone()
@@@@ -99,6 +103,7 @@@@ class OTPValidation():
 	def getResponse(self):
 		return self.validationResponse
 	def validateOTP(self, OTP):
+		global config
 		self.OTP = re.escape(OTP)
 		self.validationResult = 0
 		if (len(OTP) <= 32) or (len(OTP) > 48):
@@@@ -109,15 +114,21 @@@@ class OTPValidation():
 			if match.group(1) and match.group(2):
 				self.userid = match.group(1)
 				self.token = self.modhex2hex(match.group(2))
+				# pdb.set_trace()
 				cur = self.con.cursor()
 				cur.execute('SELECT aeskey, internalname FROM yubikeys WHERE publicname = "' + self.userid + '" AND active = "1"')
-				if (cur.rowcount != 1):
+				if not cur:
+					if config['yubiserveDebugLevel'] > 0:
+						print "Yubikey rejected because it is not found in the database, using the query: 'SELECT aeskey, internalname FROM yubikeys WHERE publicname = \"%s\" AND active = \"1\"'" % (self.userid)
 					self.validationResult = self.status['BAD_OTP']
 					return self.validationResult
 				(self.aeskey, self.internalname) = cur.fetchone()
 				self.plaintext = self.aes128ecb_decrypt(self.aeskey, self.token)
 				uid = self.plaintext[:12]
 				if (self.internalname != uid):
+					if config['yubiserveDebugLevel'] > 0:
+						print "Yubikey rejected because the uid (6 byte secret) in the decrypted AES key (set with with ykpersonalise -ouid) does not match the secret key (internalname) in the database"
+						print "Decrypted AES: %s\n Username from yubikey: %s shoould equal the database username: %s" % (self.plaintext, uid, self.internalname)
 					self.validationResult = self.status['BAD_OTP']
 					return self.validationResult
 				if not (self.CRC() or self.isCRCValid()):
@@@@ -126,16 +137,13 @@@@ class OTPValidation():
 				self.internalcounter = self.hexdec(self.plaintext[14:16] + self.plaintext[12:14] + self.plaintext[22:24])
 				self.timestamp = self.hexdec(self.plaintext[20:22] + self.plaintext[18:20] + self.plaintext[16:18])
 				cur.execute('SELECT counter, time FROM yubikeys WHERE publicname = "' + self.userid + '" AND active = "1"')
-				if (cur.rowcount != 1):
+				if not cur:
 					self.validationResult = self.status['BAD_OTP']
 					return self.validationResult
 				(self.counter, self.time) = cur.fetchone()
 				if (self.counter) >= (self.internalcounter):
 					self.validationResult = self.status['REPLAYED_OTP']
 					return self.validationResult
-				if (self.time >= self.timestamp) and ((self.counter >> 8) == (self.internalcounter >> 8)):
-					self.validationResult = self.status['DELAYED_OTP']
-					return self.validationResult
 		except IndexError:
 			self.validationResult = self.status['BAD_OTP']
 			return self.validationResult
@@@@ -147,11 +155,13 @@@@ class OTPValidation():
 class YubiServeHandler (BaseHTTPServer.BaseHTTPRequestHandler):
 	__base = BaseHTTPServer.BaseHTTPRequestHandler
 	__base_handle = __base.handle
-	server_version = 'Yubiserve/3.0'
+	server_version = 'Yubiserve/3.1'
 	global config
 	#try:
-	if config['yubiDB'] == 'sqlite':
-		con = sqlite.connect(os.path.dirname(os.path.realpath(__file__)) + '/yubikeys.sqlite')
+	if config['yubiDB'] == 'sqlite3':
+		con = sqlite3.connect('/var/db/yubiserve/yubikeys.sqlite3', check_same_thread = False)
+	elif config['yubiDB'] == 'sqlite':
+		con = sqlite.connect('/var/db/yubiserve/yubikeys.sqlite', check_same_thread = False)
 	elif config['yubiDB'] == 'mysql':
 		con = MySQLdb.connect(host=config['yubiMySQLHost'], user=config['yubiMySQLUser'], passwd=config['yubiMySQLPass'], db=config['yubiMySQLName'])
 	#except:
@@@@ -190,7 +200,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 				if len(query) > 0:
 					getData = self.getToDict(query)
 					otpvalidation = OTPValidation(self.con)
-					validation = otpvalidation.validateOTP(getData['otp'])
+					validation = otpvalidation.validateOTP(getData['otp'].lower())
 					self.send_response(200)
 					self.send_header('Content-type', 'text/plain')
 					self.end_headers()
@@@@ -200,16 +210,16 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 						orderedResult = 'nonce=' + getData['nonce'] + '&otp=' + getData['otp'] + '&sl=100&status=' + [k for k, v in otpvalidation.status.iteritems() if v == validation][0] + '&t=' + iso_time
 					except KeyError:
 						result = 't=' + iso_time + '\r\notp=' + getData['otp'] + '\r\nnonce=\r\nsl=100\r\nstatus=' + [k for k, v in otpvalidation.status.iteritems() if v == validation][0] + '\r\n'
-						orderedResult = 'nonce=&otp=' + getData['otp'] + 'sl=100&status=' + [k for k, v in otpvalidation.status.iteritems() if v == validation][0] + '&t=' + iso_time
+						orderedResult = 'nonce=&otp=' + getData['otp'] + '&sl=100&status=' + [k for k, v in otpvalidation.status.iteritems() if v == validation][0] + '&t=' + iso_time
 					otp_hmac = ''
 					try:
 						if (getData['id'] != None):
 							apiID = re.escape(getData['id'])
 							cur = self.con.cursor()
 							cur.execute("SELECT secret from apikeys WHERE id = '" + apiID + "'")
-							if cur.rowcount != 0:
+							if cur:
 								api_key = cur.fetchone()[0]
-								otp_hmac = hmac.new(api_key, msg=orderedResult, digestmod=hashlib.sha1).hexdigest().decode('hex').encode('base64').strip()
+								otp_hmac = hmac.new(str(api_key), msg=str(orderedResult), digestmod=hashlib.sha1).hexdigest().decode('hex').encode('base64').strip()
 							else:
 								result = 't=' + iso_time + '\r\notp=' + getData['otp'] + '\r\nstatus=NO_CLIENT\r\n'
 					except KeyError:
@@@@ -230,7 +240,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 					apiID = re.escape(getData['id'])
 					cur = self.con.cursor()
 					cur.execute("SELECT secret from apikeys WHERE id = '" + apiID + "'")
-					if cur.rowcount != 0:
+					if cur:
 						api_key = cur.fetchone()[0]
 						otp_hmac = hmac.new(api_key, msg=orderedResult, digestmod=hashlib.sha1).hexdigest().decode('hex').encode('base64').strip()
 			except KeyError:
@@@@ -264,7 +274,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 							apiID = re.escape(getData['id'])
 							cur = self.con.cursor()
 							cur.execute("SELECT secret from apikeys WHERE id = '" + apiID + "'")
-							if cur.rowcount != 0:
+							if cur:
 								api_key = cur.fetchone()[0]
 								otp_hmac = hmac.new(api_key, msg=result, digestmod=hashlib.sha1).hexdigest().decode('hex').encode('base64').strip()
 							else:
@@@@ -285,7 +295,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 							apiID = re.escape(getData['id'])
 							cur = self.con.cursor()
 							cur.execute("SELECT secret from apikeys WHERE id = '" + apiID + "'")
-							if cur.rowcount != 0:
+							if cur:
 								api_key = cur.fetchone()[0]
 								otp_hmac = hmac.new(api_key, msg=result, digestmod=hashlib.sha1).hexdigest().decode('hex').encode('base64').strip()
 					except KeyError:
@@@@ -305,7 +315,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 					apiID = re.escape(getData['id'])
 					cur = self.con.cursor()
 					cur.execute("SELECT secret from apikeys WHERE id = '" + apiID + "'")
-					if cur.rowcount != 0:
+					if cur:
 						api_key = cur.fetchone()[0]
 						otp_hmac = hmac.new(api_key, msg=result, digestmod=hashlib.sha1).hexdigest().decode('hex').encode('base64').strip()
 			except KeyError:
@@@@ -322,9 +332,10 @@@@ class SecureHTTPServer(BaseHTTPServer.HTTPServer):
 	def __init__(self, server_address, HandlerClass):
 		BaseHTTPServer.HTTPServer.__init__(self, server_address, HandlerClass)
 		ctx = SSL.Context(SSL.SSLv23_METHOD)
-		fpem = os.path.dirname(os.path.realpath(__file__)) + '/yubiserve.pem'
+		fpem = '${SYSCONFDIR}/yubiserve/yubiserve.pem'
 		ctx.use_privatekey_file (fpem)
 		ctx.use_certificate_file(fpem)
+		ctx.use_certificate_chain_file(fpem)
 		self.socket = SSL.Connection(ctx, socket.socket(self.address_family, self.socket_type))
 		self.server_bind()
 		self.server_activate()
@


1.5
log
@revert diff which changed SSLv23_METHOD to TLSv1_METHOD, the former is better
as it allows detecting the best version to use (include TLS 1.0, 1.1, 1.2)
whereas TLSv1_METHOD forces 1.0 only.
@
text
@d1 1
a1 1
$OpenBSD: patch-yubiserve_py,v 1.4 2014/12/22 14:10:58 sthen Exp $
d9 2
a10 2
--- yubiserve.py.orig	Fri Jul 17 22:07:56 2015
+++ yubiserve.py	Fri Jul 17 22:07:56 2015
d175 6
a180 2
@@@@ -325,6 +335,7 @@@@ class SecureHTTPServer(BaseHTTPServer.HTTPServer):
 		fpem = os.path.dirname(os.path.realpath(__file__)) + '/yubiserve.pem'
@


1.4
log
@patch yubiserve to handle yubikey OTPs in upper case (capslock)
@
text
@d1 1
a1 1
$OpenBSD: patch-yubiserve_py,v 1.3 2014/12/22 13:22:39 sthen Exp $
d9 2
a10 2
--- yubiserve.py.orig	Mon Dec 22 14:09:49 2014
+++ yubiserve.py	Mon Dec 22 14:10:08 2014
d175 2
a176 8
@@@@ -321,10 +331,11 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
 class SecureHTTPServer(BaseHTTPServer.HTTPServer):
 	def __init__(self, server_address, HandlerClass):
 		BaseHTTPServer.HTTPServer.__init__(self, server_address, HandlerClass)
-		ctx = SSL.Context(SSL.SSLv23_METHOD)
-		fpem = os.path.dirname(os.path.realpath(__file__)) + '/yubiserve.pem'
+		ctx = SSL.Context(SSL.TLSv1_METHOD)
+		fpem = '${SYSCONFDIR}/yubiserve/yubiserve.pem'
@


1.3
log
@add patches to yubiserve: use TLS not SSLv3, allow use of chain certificates
@
text
@d1 1
a1 1
$OpenBSD: patch-yubiserve_py,v 1.2 2014/03/27 13:52:30 sthen Exp $
d9 2
a10 2
--- yubiserve.py.orig	Mon Dec 22 13:18:18 2014
+++ yubiserve.py	Mon Dec 22 13:18:40 2014
d110 9
@


1.2
log
@remove bogus timestamp-checking code resulting in spurious failures
@
text
@d1 1
a1 1
$OpenBSD: patch-yubiserve_py,v 1.1.1.1 2012/07/18 08:25:07 sthen Exp $
d9 2
a10 2
--- yubiserve.py.orig	Tue Dec 14 10:48:50 2010
+++ yubiserve.py	Thu Mar 27 13:51:00 2014
d166 1
a166 1
@@@@ -321,8 +331,8 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
d172 1
a172 1
+		ctx = SSL.Context(SSL.SSLv3_METHOD)
d176 1
d178 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 5
a10 2
--- yubiserve.py.orig	Wed Jul 18 01:16:24 2012
+++ yubiserve.py	Wed Jul 18 01:16:13 2012
d75 1
a75 1
@@@@ -126,7 +137,7 @@@@ class OTPValidation():
d84 10
a93 1
@@@@ -147,11 +158,13 @@@@ class OTPValidation():
d110 1
a110 1
@@@@ -200,16 +213,16 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
d130 1
a130 1
@@@@ -230,7 +243,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
d139 1
a139 1
@@@@ -264,7 +277,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
d148 1
a148 1
@@@@ -285,7 +298,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
d157 1
a157 1
@@@@ -305,7 +318,7 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
d166 1
a166 1
@@@@ -321,8 +334,8 @@@@ class YubiServeHandler (BaseHTTPServer.BaseHTTPRequest
@


1.1.1.1
log
@import ports/security/yubiserve, ok jsaper@@

YubiServe is a lightweight Validation Server supporting both OATH/HOTP
and Yubico Yubikey implementations, written in Python that uses an
SQLite database or, optionally, a MySQL database. It has an integrated
threaded webserver, with HTTPS/SSL support, compatible with the
Yubico validation protocol 2.0 including HMAC SHA-1 signatures to
provide for authentication of the server.
@
text
@@
