head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	bluhm_20170313:1.1.1.1
	bluhm:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2017.03.13.15.00.39;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	7cTkEjfHPHmxDt0p;

1.1.1.1
date	2017.03.13.15.00.39;	author bluhm;	state Exp;
branches;
next	;
commitid	7cTkEjfHPHmxDt0p;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

commit 6203025a02b052fbaebb4b309104497a22737187
Author: Jack Lloyd <jack@@randombit.net>
Date:   Fri Mar 3 22:24:06 2017 -0500

    Change name constraint test to use a fixed reference time
    
    Test certs have expired.

--- src/tests/test_name_constraint.cpp.orig	Tue Jan 10 04:21:31 2017
+++ src/tests/test_name_constraint.cpp	Thu Mar  9 19:36:02 2017
@@@@ -8,7 +8,7 @@@@
 
 #if defined(BOTAN_HAS_X509_CERTIFICATES)
   #include <botan/x509path.h>
-  #include <botan/internal/filesystem.h>
+  #include <botan/calendar.h>
 #endif
 
 #include <algorithm>
@@@@ -65,6 +65,9 @@@@ class Name_Constraint_Tests : public Test
          std::vector<Test::Result> results;
          const Botan::Path_Validation_Restrictions restrictions(false, 80);
 
+         std::chrono::system_clock::time_point validation_time =
+            Botan::calendar_point(2016,10,21,4,20,0).to_std_timepoint();
+
          for(const auto& t: test_cases)
             {
             Botan::X509_Certificate root(Test::data_file("name_constraint/" + std::get<0>(t)));
@@@@ -74,7 +77,8 @@@@ class Name_Constraint_Tests : public Test
 
             trusted.add_certificate(root);
             Botan::Path_Validation_Result path_result = Botan::x509_path_validate(
-               sub, restrictions, trusted, std::get<2>(t), Botan::Usage_Type::TLS_SERVER_AUTH);
+               sub, restrictions, trusted, std::get<2>(t), Botan::Usage_Type::TLS_SERVER_AUTH,
+               validation_time);
 
             if(path_result.successful_validation() && path_result.trust_root() != root)
                path_result = Botan::Path_Validation_Result(Botan::Certificate_Status_Code::CANNOT_ESTABLISH_TRUST);
@


1.1.1.1
log
@import botan2 2.0.1
input and OK jca@@

Comment:
crypto and TLS for C++11

Description:
Botan (Japanese for peony) is a cryptography library written in
C++11 and released under the permissive Simplified BSD license.
Botan's goal is to be the best option for cryptography in new C++
code by offering the tools necessary to implement a range of practical
systems, such as TLS/DTLS, PKIX certificate handling, PKCS#11 and
TPM hardware support, password hashing, and post quantum crypto
schemes.  In addition to the C++, botan has a C89 API specifically
designed to be easy to call from other languages.  A Python binding
using ctypes calling the C89 API is included.
@
text
@@
