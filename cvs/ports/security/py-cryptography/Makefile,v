head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.4
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.2
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	sthen_20150608:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2017.01.04.21.58.42;	author sthen;	state Exp;
branches;
next	1.19;
commitid	tVpUAxtUxHrtPpgx;

1.19
date	2017.01.04.19.56.41;	author sthen;	state Exp;
branches;
next	1.18;
commitid	wnu774aQmyCVGZ3d;

1.18
date	2017.01.03.19.26.14;	author landry;	state Exp;
branches;
next	1.17;
commitid	7jSGKkLWuce9oz5i;

1.17
date	2016.11.09.11.46.28;	author sthen;	state Exp;
branches;
next	1.16;
commitid	STew7x89ZqJ9cDMl;

1.16
date	2016.11.08.15.37.59;	author sthen;	state Exp;
branches;
next	1.15;
commitid	AQySTXvQxE5pzFba;

1.15
date	2016.10.29.18.25.56;	author danj;	state Exp;
branches;
next	1.14;
commitid	t3QmKlDf1fooNkiA;

1.14
date	2016.10.11.11.34.50;	author sthen;	state Exp;
branches;
next	1.13;
commitid	EMBrMrLgF7z21m37;

1.13
date	2016.09.04.17.49.06;	author sthen;	state Exp;
branches;
next	1.12;
commitid	TlbIrI9V4a5AF4gc;

1.12
date	2016.06.25.22.57.18;	author sthen;	state Exp;
branches;
next	1.11;
commitid	qktZR2OuRGQrTYEJ;

1.11
date	2016.06.04.16.44.35;	author sthen;	state Exp;
branches;
next	1.10;
commitid	CBhubsxkGApgsx2t;

1.10
date	2016.03.26.14.37.05;	author sthen;	state Exp;
branches;
next	1.9;
commitid	OSx5oTgC0q9fM0ec;

1.9
date	2016.03.01.23.47.13;	author sthen;	state Exp;
branches;
next	1.8;
commitid	q0EusSPcb3YGOQ2m;

1.8
date	2016.01.09.16.23.38;	author sthen;	state Exp;
branches;
next	1.7;
commitid	adH8GV5ZWRgEn0bS;

1.7
date	2016.01.05.10.23.03;	author sthen;	state Exp;
branches;
next	1.6;
commitid	MBPomO7vG6u6TQIJ;

1.6
date	2015.11.03.21.14.21;	author sthen;	state Exp;
branches;
next	1.5;
commitid	9NGcRKYn1BO7Dg6Y;

1.5
date	2015.10.06.20.47.06;	author sthen;	state Exp;
branches;
next	1.4;
commitid	TODCnANvaIYp6pjn;

1.4
date	2015.09.29.10.52.34;	author sthen;	state Exp;
branches;
next	1.3;
commitid	kK00TsVxnVFlTJwI;

1.3
date	2015.06.23.16.18.45;	author sthen;	state Exp;
branches;
next	1.2;
commitid	LJxdcIdIA9gAQV3i;

1.2
date	2015.06.10.22.06.01;	author sthen;	state Exp;
branches;
next	1.1;
commitid	hktn8WPzcijW6GvF;

1.1
date	2015.06.08.10.34.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	uKaQYJSXBUfcu6B0;

1.1.1.1
date	2015.06.08.10.34.43;	author sthen;	state Exp;
branches;
next	;
commitid	uKaQYJSXBUfcu6B0;


desc
@@


1.20
log
@update to py-cryptography-1.7.1
@
text
@# $OpenBSD: Makefile,v 1.19 2017/01/04 19:56:41 sthen Exp $

COMMENT=	cryptographic recipes and primitives for Python

MODPY_EGG_VERSION=	1.7.1
DISTNAME=	cryptography-${MODPY_EGG_VERSION}
PKGNAME=	${MODPY_PY_PREFIX}${DISTNAME}
CATEGORIES=	security devel

HOMEPAGE=	https://cryptography.io/

MAINTAINER=	Stuart Henderson <sthen@@openbsd.org>

# dual: BSD or Apache 2
PERMIT_PACKAGE_CDROM=	Yes

WANTLIB=	${MODPY_WANTLIB} crypto pthread ssl

MODULES=	lang/python
MODPY_SETUPTOOLS= Yes
MODPY_PI=	Yes

FLAVORS=	python3
FLAVOR?=

RUN_DEPENDS=	devel/py-asn1${MODPY_FLAVOR} \
		devel/py-cffi${MODPY_FLAVOR}>=1.4.2 \
		devel/py-six${MODPY_FLAVOR} \
		net/py-idna${MODPY_FLAVOR}

.if ! ${FLAVOR:Mpython3}
RUN_DEPENDS+=	devel/py-enum34 \
		net/py-ipaddress
.endif

BUILD_DEPENDS=	${RUN_DEPENDS}

# XXX fetches hypothesis (not ported) at test time
# XXX needs *loads* of RAM
TEST_DEPENDS=	devel/py-asn1-modules${MODPY_FLAVOR} \
		devel/py-pretend${MODPY_FLAVOR} \
		devel/py-test${MODPY_FLAVOR} \
		security/py-cryptography_vectors${MODPY_FLAVOR}=${MODPY_EGG_VERSION} \
		textproc/py-iso8601${MODPY_FLAVOR}

.include <bsd.port.mk>
@


1.19
log
@Another hack to unbreak py-cryptography (this time runtime rather than
build) following symbol list changes around the X509_VERIFY_PARAM_*
functions in libcrypto; based on a diff from phessler who found this the
hard way (and I think landry also ran into it with qgis).. OK phessler
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2017/01/03 19:26:14 landry Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.5.3
a8 1
REVISION=	1
@


1.18
log
@bump ports depending on python3 in security
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2016/11/09 11:46:28 sthen Exp $
d9 1
a9 1
REVISION=	0
@


1.17
log
@update to py-cryptography 1.5.3
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2016/11/08 15:37:59 sthen Exp $
d9 1
@


1.16
log
@Add a hack to allow building py-cryptography following the VERIFY_PARAMS
changes in libressl.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2016/10/29 18:25:56 danj Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.5.2
a8 1
REVISION=	1
@


1.15
log
@Unbreak after py-setuptools update. This makes use of MODPY_ABI_TAG

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2016/10/11 11:34:50 sthen Exp $
d9 1
a9 1
REVISION=	0
@


1.14
log
@update to py-cryptography-1.5.2
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2016/09/04 17:49:06 sthen Exp $
d9 1
@


1.13
log
@update to py-cryptography 1.4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2016/06/25 22:57:18 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.5
@


1.12
log
@update to py-cryptography 1.4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2016/06/04 16:44:35 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.4
@


1.11
log
@update to py-cryptography 1.3.4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2016/03/26 14:37:05 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.3.4
@


1.10
log
@update to py-cryptography 1.3.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2016/03/01 23:47:13 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.3.1
@


1.9
log
@update to py-cryptography 1.2.2
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2016/01/09 16:23:38 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.2.2
@


1.8
log
@update to py-cryptography 1.2.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2016/01/05 10:23:03 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.2.1
@


1.7
log
@update to py-cryptography 1.1.2
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2015/11/03 21:14:21 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.1.2
d27 1
a27 1
		devel/py-cffi${MODPY_FLAVOR}>=1.2.1 \
@


1.6
log
@update to py-cryptography / py-cryptography_vectors 1.1
take maintainer
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2015/10/06 20:47:06 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.1
d38 4
a41 1
TEST_DEPENDS=	devel/py-pretend${MODPY_FLAVOR} \
@


1.5
log
@update to py-cryptography 1.0.2
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2015/09/29 10:52:34 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	1.0.2
d11 2
@


1.4
log
@bump REVISION for setuptools dep change.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2015/06/23 16:18:45 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	0.9.1
a8 1
REVISION=	0
d25 1
a25 1
		devel/py-cffi${MODPY_FLAVOR} \
d38 1
a38 1
		security/py-cryptography_vectors${MODPY_FLAVOR} \
@


1.3
log
@update to py-cryptography 0.91, and patch to permit building with recent
libressl (py-cryptography was providing its own implementation of
EC_curve_nid2nist for libressl and for old openssl versions, this was
broken when libressl added it - since LIBRESSL_VERSION doesn't provide
anything useful for recognising this, simply delete the libressl check
from the ifdef).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2015/06/10 22:06:01 sthen Exp $
d9 1
@


1.2
log
@add missing WANTLIB
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2015/06/08 10:34:43 sthen Exp $
d5 1
a5 2
MODPY_EGG_VERSION=	0.9
REVISION=	0
d29 1
a29 5
.if ${FLAVOR:Mpython3}
CFFI_HASH1=	1f8d6bc8xc302a38b
CFFI_HASH2=	a8febd48xffc7b1ce
CFFI_HASH3=	b03f9c7x62b488b1
.else
a31 3
CFFI_HASH1=	26cb75b8x62b488b1
CFFI_HASH2=	590da19fxffc7b1ce
CFFI_HASH3=	e7d09016xc302a38b
a32 4

SUBST_VARS+=	CFFI_HASH1
SUBST_VARS+=	CFFI_HASH2
SUBST_VARS+=	CFFI_HASH3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2013/03/11 11:41:28 espie Exp $
d6 1
d15 2
@


1.1.1.1
log
@import py-cryptography (aka cryptography.io), ok czarkoff@@

"cryptography" is a Python library which exposes cryptographic recipes and
primitives, with the goal of it being a "cryptographic standard library".
It aims to address various problems seen with other Python cryptography
libraries, including lack of PyPy and Python 3 support, lack of maintenance.
use of poor implementations of algorithms, lack of high-level APIs, absence
of important algorithms, error prone APIs and bad defaults.
@
text
@@
