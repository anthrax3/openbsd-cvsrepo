head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.4
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2016.02.29.12.57.20;	author jasper;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	NBddf5DSnQfB5QK6;

1.1.2.1
date	2016.02.29.12.57.20;	author jasper;	state Exp;
branches;
next	;
commitid	NBddf5DSnQfB5QK6;

1.1.4.1
date	2017.08.27.17.10.51;	author ajacoutot;	state Exp;
branches;
next	;
commitid	vn9C5JfTjGhnemvu;


desc
@@


1.1
log
@file patch-mpi_ec_c was initially added on branch OPENBSD_5_8.
@
text
@@


1.1.4.1
log
@Merge upstream fix for:
- CVE-2017-0379 - side-channel attack on Curve25519
@
text
@a0 80
$OpenBSD$

From bf76acbf0da6b0f245e491bec12c0f0a1b5be7c9 Mon Sep 17 00:00:00 2001
From: NIIBE Yutaka <gniibe@@fsij.org>
Date: Fri, 25 Aug 2017 18:13:28 +0900
Subject: [PATCH] ecc: Add input validation for X25519.

--- mpi/ec.c.orig	Tue May 30 15:33:16 2017
+++ mpi/ec.c	Sun Aug 27 19:05:47 2017
@@@@ -382,7 +382,30 @@@@ ec_get_two_inv_p (mpi_ec_t ec)
 }
 
 
+static const char *curve25519_bad_points[] = {
+  "0x0000000000000000000000000000000000000000000000000000000000000000",
+  "0x0000000000000000000000000000000000000000000000000000000000000001",
+  "0x00b8495f16056286fdb1329ceb8d09da6ac49ff1fae35616aeb8413b7c7aebe0",
+  "0x57119fd0dd4e22d8868e1c58c45c44045bef839c55b1d0b1248c50a3bc959c5f",
+  "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec",
+  "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed",
+  "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee",
+  NULL
+};
 
+static gcry_mpi_t
+scanval (const char *string)
+{
+  gpg_err_code_t rc;
+  gcry_mpi_t val;
+
+  rc = _gcry_mpi_scan (&val, GCRYMPI_FMT_HEX, string, 0, NULL);
+  if (rc)
+    log_fatal ("scanning ECC parameter failed: %s\n", gpg_strerror (rc));
+  return val;
+}
+
+
 /* This function initialized a context for elliptic curve based on the
    field GF(p).  P is the prime specifying this field, A is the first
    coefficient.  CTX is expected to be zeroized.  */
@@@@ -420,9 +443,17 @@@@ ec_p_init (mpi_ec_t ctx, enum gcry_mpi_ec_models model
 
   _gcry_mpi_ec_get_reset (ctx);
 
-  /* Allocate scratch variables.  */
-  for (i=0; i< DIM(ctx->t.scratch); i++)
-    ctx->t.scratch[i] = mpi_alloc_like (ctx->p);
+  if (model == MPI_EC_MONTGOMERY)
+    {
+      for (i=0; i< DIM(ctx->t.scratch) && curve25519_bad_points[i]; i++)
+        ctx->t.scratch[i] = scanval (curve25519_bad_points[i]);
+    }
+  else
+    {
+      /* Allocate scratch variables.  */
+      for (i=0; i< DIM(ctx->t.scratch); i++)
+        ctx->t.scratch[i] = mpi_alloc_like (ctx->p);
+    }
 
   /* Prepare for fast reduction.  */
   /* FIXME: need a test for NIST values.  However it does not gain us
@@@@ -1557,4 +1588,18 @@@@ _gcry_mpi_ec_curve_point (gcry_mpi_point_t point, mpi_
   _gcry_mpi_release (y);
 
   return res;
+}
+
+
+int
+_gcry_mpi_ec_bad_point (gcry_mpi_point_t point, mpi_ec_t ctx)
+{
+  int i;
+  gcry_mpi_t x_bad;
+
+  for (i = 0; (x_bad = ctx->t.scratch[i]); i++)
+    if (!mpi_cmp (point->x, x_bad))
+      return 1;
+
+  return 0;
 }
@


1.1.2.1
log
@CVE-2015-7511 libgcrypt: side-channel attack on ECDH with Weierstrass curves

ok aja@@
@
text
@a0 41
$OpenBSD$

CVE-2015-7511 libgcrypt: side-channel attack on ECDH with Weierstrass curves
https://bugzilla.redhat.com/show_bug.cgi?id=1306184
http://git.gnupg.org/cgi-bin/gitweb.cgi?p=libgcrypt.git;a=blobdiff;f=mpi/ec.c;h=4d59a7e56bce7aa3eeeaae94a9fb2523c4a0eedb;hp=9394d89d43821b13ab99bd55f73fcbd80add71b3;hb=88e1358962e902ff1cbec8d53ba3eee46407851a;hpb=f88adee3e1f3e2de7d63f92f90bfb3078afd3b4f

--- mpi/ec.c.orig	Fri Feb 27 10:54:03 2015
+++ mpi/ec.c	Mon Feb 29 13:49:06 2016
@@@@ -1106,17 +1106,27 @@@@ _gcry_mpi_ec_mul_point (mpi_point_t result,
   unsigned int i, loops;
   mpi_point_struct p1, p2, p1inv;
 
-  if (ctx->model == MPI_EC_TWISTEDEDWARDS)
+  if (ctx->model == MPI_EC_TWISTEDEDWARDS
+      || (ctx->model == MPI_EC_WEIERSTRASS
+          && mpi_is_secure (scalar)))
     {
       /* Simple left to right binary method.  GECC Algorithm 3.27 */
       unsigned int nbits;
       int j;
 
       nbits = mpi_get_nbits (scalar);
-      mpi_set_ui (result->x, 0);
-      mpi_set_ui (result->y, 1);
-      mpi_set_ui (result->z, 1);
-
+      if (ctx->model == MPI_EC_WEIERSTRASS)
+       {
+          mpi_set_ui (result->x, 1);
+          mpi_set_ui (result->y, 1);
+          mpi_set_ui (result->z, 0);
+       }
+      else
+       {
+          mpi_set_ui (result->x, 0);
+          mpi_set_ui (result->y, 1);
+          mpi_set_ui (result->z, 1);
+        }
       if (mpi_is_secure (scalar))
         {
           /* If SCALAR is in secure memory we assume that it is the
@

