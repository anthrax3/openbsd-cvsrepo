head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2017.08.27.17.10.51;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;
commitid	vn9C5JfTjGhnemvu;

1.1.2.1
date	2017.08.27.17.10.51;	author ajacoutot;	state Exp;
branches;
next	;
commitid	vn9C5JfTjGhnemvu;


desc
@@


1.1
log
@file patch-cipher_ecc_c was initially added on branch OPENBSD_6_1.
@
text
@@


1.1.2.1
log
@Merge upstream fix for:
- CVE-2017-0379 - side-channel attack on Curve25519
@
text
@a0 34
$OpenBSD$

From bf76acbf0da6b0f245e491bec12c0f0a1b5be7c9 Mon Sep 17 00:00:00 2001
From: NIIBE Yutaka <gniibe@@fsij.org>
Date: Fri, 25 Aug 2017 18:13:28 +0900
Subject: [PATCH] ecc: Add input validation for X25519.

--- cipher/ecc.c.orig	Wed May  3 12:45:22 2017
+++ cipher/ecc.c	Sun Aug 27 19:05:47 2017
@@@@ -1628,9 +1628,22 @@@@ ecc_decrypt_raw (gcry_sexp_t *r_plain, gcry_sexp_t s_d
   if (DBG_CIPHER)
     log_printpnt ("ecc_decrypt    kG", &kG, NULL);
 
-  if (!(flags & PUBKEY_FLAG_DJB_TWEAK)
+  if ((flags & PUBKEY_FLAG_DJB_TWEAK))
+    {
       /* For X25519, by its definition, validation should not be done.  */
-      && !_gcry_mpi_ec_curve_point (&kG, ec))
+      /* (Instead, we do output check.)
+       *
+       * However, to mitigate secret key leak from our implementation,
+       * we also do input validation here.  For constant-time
+       * implementation, we can remove this input validation.
+       */
+      if (_gcry_mpi_ec_bad_point (&kG, ec))
+        {
+          rc = GPG_ERR_INV_DATA;
+          goto leave;
+        }
+    }
+  else if (!_gcry_mpi_ec_curve_point (&kG, ec))
     {
       rc = GPG_ERR_INV_DATA;
       goto leave;
@

