head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	kili_20120122:1.1.1.1
	kili:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.12.18.21.13.21;	author kili;	state Exp;
branches;
next	1.2;
commitid	ycqz9WUXFMrCdFLl;

1.2
date	2012.10.21.18.27.49;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.22.17.17.51;	author kili;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.01.22.17.17.51;	author kili;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to hs-skein-1.0.9.2.
@
text
@SHA256 (ghc/skein-1.0.9.2.tar.gz) = /IXolcryL8cPEpghMqHvZjeQxXgibLIwaTvlIiqGC8k=
SIZE (ghc/skein-1.0.9.2.tar.gz) = 119484
@


1.2
log
@Update to hs-skein-0.1.0.9.
@
text
@d1 2
a2 2
SHA256 (ghc/skein-0.1.0.9.tar.gz) = YQbsC+apa8cckpEbq1m3Fw14T12u5ppPGo25y4gBHRo=
SIZE (ghc/skein-0.1.0.9.tar.gz) = 116614
@


1.1
log
@Initial revision
@
text
@d1 2
a2 5
MD5 (ghc/skein-0.1.0.4.tar.gz) = wmm4v80shgxN2tZGSLLHrA==
RMD160 (ghc/skein-0.1.0.4.tar.gz) = 6WYYBXIlF3S7qz8HtwAxUfgklnk=
SHA1 (ghc/skein-0.1.0.4.tar.gz) = TMe1gwzVWwkxkqq+CRB+uRMHVZA=
SHA256 (ghc/skein-0.1.0.4.tar.gz) = JsHfRT7vF/btjbYUXcnqmwbXRxrSZPgGZUmtUPcEIdU=
SIZE (ghc/skein-0.1.0.4.tar.gz) = 117930
@


1.1.1.1
log
@Skein (http://www.skein-hash.info/) is a family of fast
secure cryptographic hash functions designed by Niels
Ferguson, Stefan Lucks, Bruce Schneier, Doug Whiting, Mihir
Bellare, Tadayoshi Kohno, Jon Callas and Jesse Walker.
This package uses bindings to the optimized C implementation of
Skein.  We provide a high-level interface (see module "Crypto.Skein")
to some of the Skein use cases.  We also provide a low-level interface
(see module "Crypto.Skein.Internal") should you need to use Skein
in a different way.
Currently we have support for Skein as cryptographic hash function
as Skein as a message authentication code (Skein-MAC).  For examples
of how to use this package, see "Crypto.Skein" module documentation.

ok sthen@@

@
text
@@
