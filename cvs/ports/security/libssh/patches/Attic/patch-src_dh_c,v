head	1.2;
access;
symbols
	OPENBSD_5_8:1.2.0.2;
locks; strict;
comment	@# @;


1.2
date	2012.06.26.14.45.04;	author jasper;	state dead;
branches
	1.2.2.1;
next	1.1;

1.1
date	2012.05.20.17.04.56;	author ajacoutot;	state Exp;
branches;
next	;

1.2.2.1
date	2016.02.29.12.43.00;	author jasper;	state Exp;
branches;
next	;
commitid	cCFl7rsR9GM12woO;


desc
@@


1.2
log
@- these patches (or chunks) are not needed anymore since arpa/inet.h -r1.12
@
text
@$OpenBSD: patch-src_dh_c,v 1.1 2012/05/20 17:04:56 ajacoutot Exp $

https://red.libssh.org/issues/86

--- src/dh.c.orig	Sun May 20 14:38:13 2012
+++ src/dh.c	Sun May 20 14:40:02 2012
@@@@ -46,6 +46,7 @@@@
 #include <string.h>
 
 #ifndef _WIN32
+#include <netinet/in.h>
 #include <arpa/inet.h>
 #endif
 
@


1.2.2.1
log
@Security fix CVE-2016-0739 libssh: bits/bytes confusion resulting in truncated
Difffie-Hellman secret length
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 2
Security fix CVE-2016-0739
https://www.libssh.org/security/patches/CVE-2016-0739-libssh-0.6.5.patch
d5 8
a12 48
--- src/dh.c.orig	Fri Dec 19 09:11:17 2014
+++ src/dh.c	Mon Feb 29 12:49:42 2016
@@@@ -240,15 +240,21 @@@@ void ssh_print_bignum(const char *which, bignum num) {
 }
 
 int dh_generate_x(ssh_session session) {
+  int keysize;
+  if (session->next_crypto->kex_type == SSH_KEX_DH_GROUP1_SHA1) {
+    keysize = 1023;
+  } else {
+    keysize = 2047;
+  }
   session->next_crypto->x = bignum_new();
   if (session->next_crypto->x == NULL) {
     return -1;
   }
 
 #ifdef HAVE_LIBGCRYPT
-  bignum_rand(session->next_crypto->x, 128);
+  bignum_rand(session->next_crypto->x, keysize);
 #elif defined HAVE_LIBCRYPTO
-  bignum_rand(session->next_crypto->x, 128, 0, -1);
+  bignum_rand(session->next_crypto->x, keysize, -1, 0);
 #endif
 
   /* not harder than this */
@@@@ -261,15 +267,21 @@@@ int dh_generate_x(ssh_session session) {
 
 /* used by server */
 int dh_generate_y(ssh_session session) {
-    session->next_crypto->y = bignum_new();
+  int keysize;
+  if (session->next_crypto->kex_type == SSH_KEX_DH_GROUP1_SHA1) {
+    keysize = 1023;
+  } else {
+    keysize = 2047;
+  }
+  session->next_crypto->y = bignum_new();
   if (session->next_crypto->y == NULL) {
     return -1;
   }
 
 #ifdef HAVE_LIBGCRYPT
-  bignum_rand(session->next_crypto->y, 128);
+  bignum_rand(session->next_crypto->y, keysize);
 #elif defined HAVE_LIBCRYPTO
-  bignum_rand(session->next_crypto->y, 128, 0, -1);
+  bignum_rand(session->next_crypto->y, keysize, -1, 0);
a14 1
   /* not harder than this */
@


1.1
log
@Fix several warnings.

ok rpointel@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@

