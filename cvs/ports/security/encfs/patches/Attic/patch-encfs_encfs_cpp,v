head	1.2;
access;
symbols
	stsp_20140117:1.1.1.1 stsp:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.01.21.15.41.27;	author syl;	state dead;
branches;
next	1.1;

1.1
date	2014.01.17.10.10.58;	author stsp;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.01.17.10.10.58;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.2
log
@encfs does not need all these patches anymore.

OK ajacoutot@@
@
text
@$OpenBSD: patch-encfs_encfs_cpp,v 1.1 2014/01/17 10:10:58 stsp Exp $
--- encfs/encfs.cpp.orig	Thu Nov 18 03:50:51 2010
+++ encfs/encfs.cpp	Thu Jan 16 18:08:31 2014
@@@@ -553,6 +553,42 @@@@ int encfs_utimens(const char *path, const struct times
     return withCipherPath( "utimens", path, _do_utimens, ts );
 }
 
+int encfs_create(const char *path, mode_t mode, struct fuse_file_info *file)
+{
+    EncFS_Context *ctx = context();
+
+    int res = -EIO;
+    shared_ptr<DirNode> FSRoot = ctx->getRoot(&res);
+    if(!FSRoot)
+	return res;
+
+    try
+    {
+	shared_ptr<FileNode> fnode =
+	    FSRoot->openNode( path, "create", file->flags, mode, &res );
+
+	if(fnode)
+	{
+	    rLog(Info, "encfs_create for %s, flags %i", fnode->cipherName(),
+		    file->flags);
+
+	    if( res >= 0 )
+	    {
+		file->fh = (uintptr_t)ctx->putNode(path, fnode);
+		res = ESUCCESS;
+	    }
+	}
+    } catch( rlog::Error &err )
+    {
+	rError("error caught in create");
+	err.log( _RLWarningChannel );
+    }
+
+    res = encfs_release(path, file);
+
+    return res;
+}
+
 int encfs_open(const char *path, struct fuse_file_info *file)
 {
     EncFS_Context *ctx = context();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Port of encfs, an encrypted filesystem based on FUSE and OpenSSL.
With lots of help and patches from syl@@.
@
text
@@
