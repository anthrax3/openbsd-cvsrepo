head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.1.1.0.10
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.8
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.4
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	sthen20110326:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.08.15.21.53;	author sthen;	state Exp;
branches;
next	1.5;
commitid	lDdwAajA75WTCYAd;

1.5
date	2015.12.07.14.11.02;	author sthen;	state Exp;
branches;
next	1.4;
commitid	7iw2UmZtcOUxqnXt;

1.4
date	2015.05.13.08.14.11;	author sthen;	state Exp;
branches;
next	1.3;
commitid	Z80hvXCaw9KJ2SHT;

1.3
date	2015.04.24.12.33.47;	author sthen;	state Exp;
branches;
next	1.2;
commitid	OacCHw6jiQFC7DnH;

1.2
date	2013.09.09.22.09.58;	author sthen;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2011.03.26.12.26.44;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.03.26.12.26.44;	author sthen;	state Exp;
branches;
next	;

1.2.4.1
date	2015.04.24.12.35.03;	author sthen;	state Exp;
branches;
next	;
commitid	OOQA4JaqSWaeSq13;

1.2.6.1
date	2015.04.24.12.34.39;	author sthen;	state Exp;
branches;
next	;
commitid	7KHCm463rH7OZpWh;


desc
@@


1.6
log
@add various fixes to clamav-unofficial-sigs
@
text
@$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.5 2015/12/07 14:11:02 sthen Exp $
--- clamav-unofficial-sigs.sh.orig	Wed Dec  2 10:56:35 2015
+++ clamav-unofficial-sigs.sh	Tue Dec  8 15:20:49 2015
@@@@ -1,4 +1,4 @@@@
-#!/bin/bash
+#!/usr/local/bin/bash
 ################################################################################
 # This is property of eXtremeSHOK.com
 # You are free to use, modify and distribute, however you may not remove this notice.
@@@@ -20,6 +20,9 @@@@
 ################################################################################
 
 default_config="/etc/clamav-unofficial-sigs.conf"
+pkg_mgr="pkg_add"
+pkg_rm="pkg_delete"
+PATH=$PATH:/usr/local/sbin:/usr/local/bin
 
 ################################################################################
 
@@@@ -215,6 +218,11 @@@@ do
 done
 
 #config version validation
+if [ -z "$config_version" ] ; then
+  xshok_pretty_echo_and_log "ERROR: Configuration version not set. Update your configuration based on example file." "="
+  exit 1
+fi
+
 if [ "$config_version" -lt "$minimum_required_config_version" ] ; then
   xshok_pretty_echo_and_log "ERROR: Your configuration version is not compatible with this version" "="
   exit 1
@@@@ -782,7 +790,7 @@@@ fi
 
 # Check to see if the working directories have been created.
 # If not, create them.  Otherwise, ignore and proceed with script.
-mkdir -p "$work_dir" "$securiteinfo_dir" "$malwarepatrol_dir" "$linuxmalwaredetect_dir" "$sanesecurity_dir" "$config_dir" "$gpg_dir" "$add_dir"
+mkdir -p "$work_dir" "$securiteinfo_dir" "$malwarepatrol_dir" "$linuxmalwaredetect_dir" "$sanesecurity_dir" "$config_dir" "$gpg_dir" "$add_dir" "$yararules_dir"
 
 # Set secured access permissions to the GPG directory
 chmod 0700 "$gpg_dir"
@@@@ -1433,7 +1441,7 @@@@ if [ "$yararules_enabled" == "yes" ] ; then
  if [ "$time_interval" -ge $(($update_interval - 600)) ] ; then
   echo "$current_time" > "$config_dir"/last-yararules-update.txt
 
-  cxshok_pretty_echo_and_log "Yara-Rules Database File Updates" "="
+  xshok_pretty_echo_and_log "Yara-Rules Database File Updates" "="
   xshok_pretty_echo_and_log "Checking for yararules updates..."
   yararules_updates="0"
   for db_file in $yararules_dbs ; do
@@@@ -3251,7 +3259,7 @@@@ else
  time_remaining=$(($update_interval - $time_interval))
  hours_left=$(($time_remaining / 3600))
  minutes_left=$(($time_remaining % 3600 / 60))
- xshok_pretty_echo_and_log "$yararules_update_hours hours have not yet elapsed since the last linux malware detect update check"
+ xshok_pretty_echo_and_log "$yararules_update_hours hours have not yet elapsed since the last Yara update check"
  xshok_pretty_echo_and_log "No update check was performed at this time" "-"
  xshok_pretty_echo_and_log "Next check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
 fi
@


1.5
log
@update to clamav-unofficial-sigs-4.9.2 - caveat emptor, this requires config
to be merged from the example file, now requires bash, and the script is getting
horribly dirty..
@
text
@d1 1
a1 1
$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.4 2015/05/13 08:14:11 sthen Exp $
d3 1
a3 1
+++ clamav-unofficial-sigs.sh	Mon Dec  7 14:05:54 2015
d32 27
@


1.4
log
@switch to forked 4.0.0 version of clamav-unofficial-sigs
@
text
@d1 11
a11 6
$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.3 2015/04/24 12:33:47 sthen Exp $
--- clamav-unofficial-sigs.sh.orig	Sat May  9 00:36:09 2015
+++ clamav-unofficial-sigs.sh	Wed May 13 09:11:21 2015
@@@@ -31,6 +31,8 @@@@ output_ver="
    `basename $0` $version
 "
d13 1
d16 1
a16 2
 usage="
 ClamAV Unofficial Signature Databases Update Script - $version
d18 1
a18 39
@@@@ -423,7 +425,7 @@@@ while getopts 'c:defg:himrs:tvw' option ; do
                 echo "File '$input' cannot be found."
                 echo "Here is a list of third-party databases that can be clamscan integrity tested:"
                 echo ""
-                echo "Sanesecurity $ss_dbs""SecuriteInfo $si_dbs""MalwarePatrol $mbl_dbs"
+                echo "Sanesecurity $ss_dbs"
                 echo "Check the file name and try again..."
           fi
           echo ""
@@@@ -729,18 +731,6 @@@@ if [ -n "$ss_dbs" ] ; then
       clamav_files
    done
 fi
-if [ -n "$si_dbs" ] ; then
-   for db in $si_dbs ; do
-      echo "$si_dir/$db" >> "$current_tmp"
-      clamav_files
-   done
-fi
-if [ -n "$mbl_dbs" ] ; then
-   for db in $mbl_dbs ; do
-      echo "$mbl_dir/$db" >> "$current_tmp"
-      clamav_files
-   done
-fi
 if [ -n "$add_dbs" ] ; then
    for db in $add_dbs ; do
       echo "$add_dir/$db" >> "$current_tmp"
@@@@ -773,7 +763,6 @@@@ purge="$config_dir/purge.txt"
 cp -f "$current_dbs" "$purge"
 echo "$config_dir/current-dbs.txt" >> "$purge"
 echo "$config_dir/db-changes.txt" >> "$purge"
-echo "$config_dir/last-mbl-update.txt" >> "$purge"
 echo "$config_dir/last-si-update.txt" >> "$purge"
 echo "$config_dir/local.ign" >> "$purge"
 echo "$config_dir/monitor-ign.txt" >> "$purge"
@@@@ -917,32 +906,6 @@@@ if [ -n "$clamd_socket" ] ; then
    fi
 fi
d20 2
a21 288
-# Check and save current system time since epoch for time related database downloads.
-# However, if unsuccessful, issue a warning that we cannot calculate times since epoch.
-if [ -n "$si_dbs" -o -n "mbl_dbs" ]
-   then
-      if [ `date +%s` -gt 0 2>/dev/null ]
-         then
-            current_time=`date +%s`
-         else
-            if [ `perl -le print+time 2>/dev/null` ] ; then
-               current_time=`perl -le print+time`
-            fi
-      fi
-   else
-      echo ""
-      echo "                           --- WARNING ---"
-      echo "The system's date function does not appear to support 'date +%s', nor was 'perl' found"
-      echo "on the system.  The SecuriteInfo and MalwarePatrol updates were bypassed at this time."
-      echo ""
-      echo "You can silence this warning by either commenting out the 'si_dbs' and 'mbl_dbs'"
-      echo "variables in the 'USER CONFIGURATION' section of the script, or by installing perl or"
-      echo "the GNU date utility, either of which can calculate the needed seconds since epoch."
-      log "WARNING - Systems does not support calculating time since epoch, SecuriteInfo and MalwarePatrol updates bypassed"
-      si_dbs=""
-      mbl_dbs=""
-fi
-
 ################################################################
 # Check for Sanesecurity database & GPG signature file updates #
 ################################################################
@@@@ -1060,261 +1023,6 @@@@ if [ -n "$ss_dbs" ] ; then
       log "WARNING - or signature database name(s) misspelled in the script's configuration file."
    fi
 fi
-
-#######################################################################
-# Check for updated SecuriteInfo database files every set number of   #
-# hours as defined in the "USER CONFIGURATION" section of this script #
-#######################################################################
-if [ -n "$si_dbs" ] ; then
-   rm -f "$si_dir/*.gz"
-   if [ -s "$config_dir/last-si-update.txt" ]
-      then
-         last_si_update=`cat $config_dir/last-si-update.txt`
-      else
-         last_si_update="0"
-   fi
-   db_file=""
-   loop=""
-   update_interval=$(($si_update_hours * 3600))
-   time_interval=$(($current_time - $last_si_update))
-   if [ "$time_interval" -ge $(($update_interval - 600)) ]
-      then
-         echo "$current_time" > "$config_dir"/last-si-update.txt
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         log "INFO - Checking for SecuriteInfo updates..."
-         si_updates="0"
-         for db_file in $si_dbs ; do
-            if [ "$loop" = "1" ]
-               then
-                  comment "---"
-               else
-                  comment ""
-            fi
-            comment "Checking for updated SecuriteInfo database file: $db_file"
-            comment ""
-            si_db_update="0"
-            if [ -s "$si_dir/$db_file" ]
-               then
-                  z_opt="-z $si_dir/$db_file"
-               else
-                  z_opt=""
-            fi
-            if curl $curl_proxy $curl_output_level --connect-timeout "$curl_connect_timeout" \
-               --max-time "$curl_max_time" -L -R $z_opt -o $si_dir/$db_file http://$si_url/$db_file
-               then
-                  loop="1"
-                  if ! cmp -s $si_dir/$db_file $clam_dbs/$db_file ; then
-                     if [ "$?" = "0" ] ; then
-                        db_ext=`echo $db_file | cut -d "." -f2`
-      comment ""
-                        comment "Testing updated SecuriteInfo database file: $db_file"
-                        log "INFO - Testing updated SecuriteInfo database file: $db_file"
-                        if [ -z "$ham_dir" -o "$db_ext" != "ndb" ]
-                           then
-                              if clamscan --quiet -d "$si_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $si_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                           else
-                              grep -h -v -f "$config_dir/whitelist.hex" "$si_dir/$db_file" > "$test_dir/$db_file"
-                              clamscan --infected --no-summary -d "$test_dir/$db_file" "$ham_dir"/* | \
-                              sed 's/\.UNOFFICIAL FOUND//' | awk '{print $NF}' > "$config_dir/whitelist.txt"
-                              grep -h -f "$config_dir/whitelist.txt" "$test_dir/$db_file" | \
-                              cut -d "*" -f2 | sort | uniq >> "$config_dir/whitelist.hex"
-                              grep -h -v -f "$config_dir/whitelist.hex" "$test_dir/$db_file" > "$test_dir/$db_file-tmp"
-                              mv -f "$test_dir/$db_file-tmp" "$test_dir/$db_file"
-                              if clamscan --quiet -d "$test_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $test_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                        fi
-                     fi
-                  fi
-               else
-                  log "WARNING - Failed curl connection to $si_url - SKIPPED SecuriteInfo $db_file update"
-            fi
-            if [ "$si_db_update" != "1" ] ; then
-               comment ""
-               comment "No updated SecuriteInfo $db_file database file found"
-            fi
-         done
-         if [ "$si_updates" != "1" ] ; then
-            log "INFO - No SecuriteInfo database file updates found"
-         fi
-      else
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         comment ""
-         time_remaining=$(($update_interval - $time_interval))
-         hours_left=$(($time_remaining / 3600))
-         minutes_left=$(($time_remaining % 3600 / 60))
-         comment "$si_update_hours hours have not yet elapsed since the last SecuriteInfo update check"
-         comment ""
-         comment "     --- No update check was performed at this time ---"
-         comment ""
-         comment "Next check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-         log "INFO - Next SecuriteInfo check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-   fi
-fi
-
-#####################################################################
-# Download MalwarePatrol database file(s) every set number of hours #
-# as defined in the "USER CONFIGURATION" section of this script.    #
-#####################################################################
-if [ -n "$mbl_dbs" ] ; then
-   if [ -s "$config_dir/last-mbl-update.txt" ]
-      then
-         last_mbl_update=`cat $config_dir/last-mbl-update.txt`
-      else
-         last_mbl_update="0"
-   fi
-   db_file=""
-   update_interval=$(($mbl_update_hours * 3600))
-   time_interval=$(($current_time - $last_mbl_update))
-   if [ "$time_interval" -ge $(($update_interval - 600)) ]
-      then
-         echo "$current_time" > "$config_dir"/last-mbl-update.txt
-         log "INFO - Checking for MalwarePatrol updates..."
-         for db_file in $mbl_dbs ; do
-            # Delete the old MBL (mbl.db) database file if it exists and start using the newer
-            # format (mbl.ndb) database file instead.
-            test -e $clam_dbs/$db_file -o -e $clam_dbs/$db_file-bak && rm -f -- "$clam_dbs/mbl.d*"
-            comment ""
-            comment "======================================================================"
-            comment "MalwarePatrol $db_file Database File Update"
-            comment "======================================================================"
-            comment ""
-            if curl $curl_proxy $curl_output_level -R --connect-timeout "$curl_connect_timeout" \
-               --max-time "$curl_max_time" -o $mbl_dir/$db_file http://$mbl_url/cgi/submit?action=list_clamav_ext
-               then
-                  if ! cmp -s $mbl_dir/$db_file $clam_dbs/$db_file 
-                     then
-                        if [ "$?" = "0" ] ; then
-                           db_ext=`echo $db_file | cut -d "." -f2`
-                           comment ""
-                           comment "Testing updated MalwarePatrol database file: $db_file"
-                           log "INFO - Testing updated database file: $db_file"
-                           if [ -z "$ham_dir" -o "$db_ext" != "ndb" ]
-                              then
-                                 if clamscan --quiet -d "$mbl_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                    then
-                                       comment "Clamscan reports MalwarePatrol $db_file database integrity tested good"
-                                       log "INFO - Clamscan reports MalwarePatrol $db_file database integrity tested good" ; true
-                                    else
-                                       echo "Clamscan reports MalwarePatrol $db_file database integrity tested BAD - SKIPPING"
-                                       log "WARNING - Clamscan reports MalwarePatrol $db_file database integrity tested BAD - SKIPPING" ; false
-                                 fi && \
-                                 (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                                 if rsync -pcqt $mbl_dir/$db_file $clam_dbs
-                                    then
-                                       perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                       comment "Successfully updated MalwarePatrol production database file: $db_file"
-                                       log "INFO - Successfully updated MalwarePatrol production database file: $db_file"
-                                       mbl_update=1
-                                       do_clamd_reload=1
-                                    else
-                                       echo "Failed to successfully update MalwarePatrol production database file: $db_file - SKIPPING"
-                                       log "WARNING - Failed to successfully update MalwarePatrol production database file: $db_file - SKIPPING"
-                                 fi
-                              else
-                                 grep -h -v -f "$config_dir/whitelist.hex" "$mbl_dir/$db_file" > "$test_dir/$db_file"
-                                 clamscan --infected --no-summary -d "$test_dir/$db_file" "$ham_dir"/* | \
-                                 sed 's/\.UNOFFICIAL FOUND//' | awk '{print $NF}' > "$config_dir/whitelist.txt"
-                                 grep -h -f "$config_dir/whitelist.txt" "$test_dir/$db_file" | \
-                                 cut -d "*" -f2 | sort | uniq >> "$config_dir/whitelist.hex"
-                                 grep -h -v -f "$config_dir/whitelist.hex" "$test_dir/$db_file" > "$test_dir/$db_file-tmp"
-                                 mv -f "$test_dir/$db_file-tmp" "$test_dir/$db_file"
-                                 if clamscan --quiet -d "$test_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                    then
-                                       comment "Clamscan reports MalwarePatrol $db_file database integrity tested good"
-                                       log "INFO - Clamscan reports MalwarePatrol $db_file database integrity tested good" ; true
-                                    else
-                                       echo "Clamscan reports MalwarePatrol $db_file database integrity tested BAD - SKIPPING"
-                                       log "WARNING - Clamscan reports MalwarePatrol $db_file database integrity tested BAD - SKIPPING" ; false
-                                 fi && \
-                                 (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                                 if rsync -pcqt $test_dir/$db_file $clam_dbs
-                                    then
-                                       perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                       comment "Successfully updated MalwarePatrol production database file: $db_file"
-                                       log "INFO - Successfully updated MalwarePatrol production database file: $db_file"
-                                       mbl_update=1
-                                       do_clamd_reload=1
-                                    else
-                                       echo "Failed to successfully update MalwarePatrol production database file: $db_file - SKIPPING"
-                                       log "WARNING - Failed to successfully update MalwarePatrol production database file: $db_file - SKIPPING"
-                                 fi
-                           fi
-                        fi
-                     else
-                        comment ""
-                        comment "MalwarePatrol signature database ($db_file) did not change - skipping"
-                        log "INFO - MalwarePatrol signature database ($db_file) did not change - skipping"
-                  fi
-               else
-                  log "WARNING - Failed curl connection to $mbl_url - SKIPPED MalwarePatrol $db_file update"
-            fi
-         done
-      else
-         comment ""
-         comment "======================================================================"
-         comment "MalwarePatrol Database File Update"
-         comment "======================================================================"
-         comment ""
-         time_remaining=$(($update_interval - $time_interval))
-         hours_left=$(($time_remaining / 3600))
-         minutes_left=$(($time_remaining % 3600 / 60))
-         comment "$mbl_update_hours hours have not yet elapsed since the last MalwarePatrol download"
-         comment ""
-         comment "     --- No database download was performed at this time ---"
-         comment ""
-         comment "Next download will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-         log "INFO - Next MalwarePatrol download will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-   fi
-fi
-
-
d23 9
a31 2
 ###################################################
 # Check for user added signature database updates #
@


1.3
log
@further removal of SecuriteInfo dbs; avoids the need for users to merge
config file changes.
@
text
@d1 4
a4 4
$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.2 2013/09/09 22:09:58 sthen Exp $
--- clamav-unofficial-sigs.sh.orig	Tue Aug 27 17:08:25 2013
+++ clamav-unofficial-sigs.sh	Fri Apr 24 13:32:31 2015
@@@@ -23,6 +23,8 @@@@ output_ver="
d13 1
a13 1
@@@@ -479,7 +481,7 @@@@ while getopts 'bc:defg:himrs:tvw' option ; do
d18 1
a18 1
+                echo "Sanesecurity $ss_dbs""MalwarePatrol $mbl_dbs"
d22 1
a22 18
@@@@ -667,7 +669,7 @@@@ fi
 
 # Check to see if the working directories have been created.
 # If not, create them.  Otherwise, ignore and proceed with script.
-mkdir -p "$work_dir" "$ss_dir" "$si_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
+mkdir -p "$work_dir" "$ss_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
 
 # Set secured access permissions to the GPG directory
 chmod 0700 "$gpg_dir"
@@@@ -752,7 +754,6 @@@@ fi
 
 # Unofficial ClamAV database provider URLs
 ss_url="rsync.sanesecurity.net"
-si_url="clamav.securiteinfo.com"
 mbl_url="www.malwarepatrol.net"
 
 # Create the Sanesecurity rsync "include" file (defines which files to download).
@@@@ -791,12 +792,6 @@@@ if [ -n "$ss_dbs" ] ; then
d32 20
a51 4
 if [ -n "$mbl_dbs" ] ; then
    for db in $mbl_dbs ; do
       echo "$mbl_dir/$db" >> "$current_tmp"
@@@@ -983,7 +978,7 @@@@ fi
d53 2
a54 2
 # Check and save current system time since epoch for time related database downloads.
 # However, if unsuccessful, issue a warning that we cannot calculate times since epoch.
d56 13
a68 8
+if [ -n "mbl_dbs" ]
    then
       if [ `date +%s` -gt 0 2>/dev/null ]
          then
@@@@ -997,13 +992,12 @@@@ if [ -n "$si_dbs" -o -n "mbl_dbs" ]
       echo ""
       echo "                           --- WARNING ---"
       echo "The system's date function does not appear to support 'date +%s', nor was 'perl' found"
d70 1
a70 2
+      echo "on the system.  The MalwarePatrol updates were bypassed at this time."
       echo ""
d73 1
a73 3
+      echo "You can silence this warning by either commenting out the 'mbl_dbs' variables"
+      echo "in the 'USER CONFIGURATION' section of the script, or by installing perl or"
       echo "the GNU date utility, either of which can calculate the needed seconds since epoch."
d76 9
a84 2
+      log "WARNING - Systems does not support calculating time since epoch, MalwarePatrol updates bypassed"
       mbl_dbs=""
a85 7
 
@@@@ -1122,143 +1116,6 @@@@ if [ -n "$ss_dbs" ] ; then
       echo "or signature database name(s) misspelled in the script's configuration file."
       log "WARNING - Access to all Sanesecurity mirror sites failed - Check for connectivity issues"
       log "WARNING - or signature database name(s) misspelled in the script's configuration file."
-   fi
-fi
d135 1
a135 1
-			comment ""
d221 120
a340 2
    fi
 fi
d342 2
@


1.2
log
@update to clamav-unofficial-sigs-3.7.2
@
text
@d1 1
a1 1
$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.1.1.1 2011/03/26 12:26:44 sthen Exp $
d3 1
a3 1
+++ clamav-unofficial-sigs.sh	Mon Sep  9 22:38:43 2013
d12 210
@


1.2.4.1
log
@MFC: disable securiteinfo databases in clamav-unofficial-sigs
@
text
@d1 1
a1 1
$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.3 2015/04/24 12:33:47 sthen Exp $
d3 1
a3 1
+++ clamav-unofficial-sigs.sh	Fri Apr 24 13:32:31 2015
a11 210
 
@@@@ -479,7 +481,7 @@@@ while getopts 'bc:defg:himrs:tvw' option ; do
                 echo "File '$input' cannot be found."
                 echo "Here is a list of third-party databases that can be clamscan integrity tested:"
                 echo ""
-                echo "Sanesecurity $ss_dbs""SecuriteInfo $si_dbs""MalwarePatrol $mbl_dbs"
+                echo "Sanesecurity $ss_dbs""MalwarePatrol $mbl_dbs"
                 echo "Check the file name and try again..."
           fi
           echo ""
@@@@ -667,7 +669,7 @@@@ fi
 
 # Check to see if the working directories have been created.
 # If not, create them.  Otherwise, ignore and proceed with script.
-mkdir -p "$work_dir" "$ss_dir" "$si_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
+mkdir -p "$work_dir" "$ss_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
 
 # Set secured access permissions to the GPG directory
 chmod 0700 "$gpg_dir"
@@@@ -752,7 +754,6 @@@@ fi
 
 # Unofficial ClamAV database provider URLs
 ss_url="rsync.sanesecurity.net"
-si_url="clamav.securiteinfo.com"
 mbl_url="www.malwarepatrol.net"
 
 # Create the Sanesecurity rsync "include" file (defines which files to download).
@@@@ -791,12 +792,6 @@@@ if [ -n "$ss_dbs" ] ; then
       clamav_files
    done
 fi
-if [ -n "$si_dbs" ] ; then
-   for db in $si_dbs ; do
-      echo "$si_dir/$db" >> "$current_tmp"
-      clamav_files
-   done
-fi
 if [ -n "$mbl_dbs" ] ; then
    for db in $mbl_dbs ; do
       echo "$mbl_dir/$db" >> "$current_tmp"
@@@@ -983,7 +978,7 @@@@ fi
 
 # Check and save current system time since epoch for time related database downloads.
 # However, if unsuccessful, issue a warning that we cannot calculate times since epoch.
-if [ -n "$si_dbs" -o -n "mbl_dbs" ]
+if [ -n "mbl_dbs" ]
    then
       if [ `date +%s` -gt 0 2>/dev/null ]
          then
@@@@ -997,13 +992,12 @@@@ if [ -n "$si_dbs" -o -n "mbl_dbs" ]
       echo ""
       echo "                           --- WARNING ---"
       echo "The system's date function does not appear to support 'date +%s', nor was 'perl' found"
-      echo "on the system.  The SecuriteInfo and MalwarePatrol updates were bypassed at this time."
+      echo "on the system.  The MalwarePatrol updates were bypassed at this time."
       echo ""
-      echo "You can silence this warning by either commenting out the 'si_dbs' and 'mbl_dbs'"
-      echo "variables in the 'USER CONFIGURATION' section of the script, or by installing perl or"
+      echo "You can silence this warning by either commenting out the 'mbl_dbs' variables"
+      echo "in the 'USER CONFIGURATION' section of the script, or by installing perl or"
       echo "the GNU date utility, either of which can calculate the needed seconds since epoch."
-      log "WARNING - Systems does not support calculating time since epoch, SecuriteInfo and MalwarePatrol updates bypassed"
-      si_dbs=""
+      log "WARNING - Systems does not support calculating time since epoch, MalwarePatrol updates bypassed"
       mbl_dbs=""
 fi
 
@@@@ -1122,143 +1116,6 @@@@ if [ -n "$ss_dbs" ] ; then
       echo "or signature database name(s) misspelled in the script's configuration file."
       log "WARNING - Access to all Sanesecurity mirror sites failed - Check for connectivity issues"
       log "WARNING - or signature database name(s) misspelled in the script's configuration file."
-   fi
-fi
-
-#######################################################################
-# Check for updated SecuriteInfo database files every set number of   #
-# hours as defined in the "USER CONFIGURATION" section of this script #
-#######################################################################
-if [ -n "$si_dbs" ] ; then
-   rm -f "$si_dir/*.gz"
-   if [ -s "$config_dir/last-si-update.txt" ]
-      then
-         last_si_update=`cat $config_dir/last-si-update.txt`
-      else
-         last_si_update="0"
-   fi
-   db_file=""
-   loop=""
-   update_interval=$(($si_update_hours * 3600))
-   time_interval=$(($current_time - $last_si_update))
-   if [ "$time_interval" -ge $(($update_interval - 600)) ]
-      then
-         echo "$current_time" > "$config_dir"/last-si-update.txt
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         log "INFO - Checking for SecuriteInfo updates..."
-         si_updates="0"
-         for db_file in $si_dbs ; do
-            if [ "$loop" = "1" ]
-               then
-                  comment "---"
-               else
-                  comment ""
-            fi
-            comment "Checking for updated SecuriteInfo database file: $db_file"
-            comment ""
-            si_db_update="0"
-            if [ -s "$si_dir/$db_file" ]
-               then
-                  z_opt="-z $si_dir/$db_file"
-               else
-                  z_opt=""
-            fi
-            if curl $curl_proxy $curl_output_level --connect-timeout "$curl_connect_timeout" \
-               --max-time "$curl_max_time" -L -R $z_opt -o $si_dir/$db_file http://$si_url/$db_file
-               then
-                  loop="1"
-                  if ! cmp -s $si_dir/$db_file $clam_dbs/$db_file ; then
-                     if [ "$?" = "0" ] ; then
-                        db_ext=`echo $db_file | cut -d "." -f2`
-			comment ""
-                        comment "Testing updated SecuriteInfo database file: $db_file"
-                        log "INFO - Testing updated SecuriteInfo database file: $db_file"
-                        if [ -z "$ham_dir" -o "$db_ext" != "ndb" ]
-                           then
-                              if clamscan --quiet -d "$si_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $si_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                           else
-                              grep -h -v -f "$config_dir/whitelist.hex" "$si_dir/$db_file" > "$test_dir/$db_file"
-                              clamscan --infected --no-summary -d "$test_dir/$db_file" "$ham_dir"/* | \
-                              sed 's/\.UNOFFICIAL FOUND//' | awk '{print $NF}' > "$config_dir/whitelist.txt"
-                              grep -h -f "$config_dir/whitelist.txt" "$test_dir/$db_file" | \
-                              cut -d "*" -f2 | sort | uniq >> "$config_dir/whitelist.hex"
-                              grep -h -v -f "$config_dir/whitelist.hex" "$test_dir/$db_file" > "$test_dir/$db_file-tmp"
-                              mv -f "$test_dir/$db_file-tmp" "$test_dir/$db_file"
-                              if clamscan --quiet -d "$test_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $test_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                        fi
-                     fi
-                  fi
-               else
-                  log "WARNING - Failed curl connection to $si_url - SKIPPED SecuriteInfo $db_file update"
-            fi
-            if [ "$si_db_update" != "1" ] ; then
-               comment ""
-               comment "No updated SecuriteInfo $db_file database file found"
-            fi
-         done
-         if [ "$si_updates" != "1" ] ; then
-            log "INFO - No SecuriteInfo database file updates found"
-         fi
-      else
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         comment ""
-         time_remaining=$(($update_interval - $time_interval))
-         hours_left=$(($time_remaining / 3600))
-         minutes_left=$(($time_remaining % 3600 / 60))
-         comment "$si_update_hours hours have not yet elapsed since the last SecuriteInfo update check"
-         comment ""
-         comment "     --- No update check was performed at this time ---"
-         comment ""
-         comment "Next check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-         log "INFO - Next SecuriteInfo check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
    fi
 fi
@


1.2.6.1
log
@MFC: disable securiteinfo databases in clamav-unofficial-sigs
@
text
@d1 1
a1 1
$OpenBSD: patch-clamav-unofficial-sigs_sh,v 1.3 2015/04/24 12:33:47 sthen Exp $
d3 1
a3 1
+++ clamav-unofficial-sigs.sh	Fri Apr 24 13:32:31 2015
a11 210
 
@@@@ -479,7 +481,7 @@@@ while getopts 'bc:defg:himrs:tvw' option ; do
                 echo "File '$input' cannot be found."
                 echo "Here is a list of third-party databases that can be clamscan integrity tested:"
                 echo ""
-                echo "Sanesecurity $ss_dbs""SecuriteInfo $si_dbs""MalwarePatrol $mbl_dbs"
+                echo "Sanesecurity $ss_dbs""MalwarePatrol $mbl_dbs"
                 echo "Check the file name and try again..."
           fi
           echo ""
@@@@ -667,7 +669,7 @@@@ fi
 
 # Check to see if the working directories have been created.
 # If not, create them.  Otherwise, ignore and proceed with script.
-mkdir -p "$work_dir" "$ss_dir" "$si_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
+mkdir -p "$work_dir" "$ss_dir" "$mbl_dir" "$config_dir" "$gpg_dir" "$add_dir"
 
 # Set secured access permissions to the GPG directory
 chmod 0700 "$gpg_dir"
@@@@ -752,7 +754,6 @@@@ fi
 
 # Unofficial ClamAV database provider URLs
 ss_url="rsync.sanesecurity.net"
-si_url="clamav.securiteinfo.com"
 mbl_url="www.malwarepatrol.net"
 
 # Create the Sanesecurity rsync "include" file (defines which files to download).
@@@@ -791,12 +792,6 @@@@ if [ -n "$ss_dbs" ] ; then
       clamav_files
    done
 fi
-if [ -n "$si_dbs" ] ; then
-   for db in $si_dbs ; do
-      echo "$si_dir/$db" >> "$current_tmp"
-      clamav_files
-   done
-fi
 if [ -n "$mbl_dbs" ] ; then
    for db in $mbl_dbs ; do
       echo "$mbl_dir/$db" >> "$current_tmp"
@@@@ -983,7 +978,7 @@@@ fi
 
 # Check and save current system time since epoch for time related database downloads.
 # However, if unsuccessful, issue a warning that we cannot calculate times since epoch.
-if [ -n "$si_dbs" -o -n "mbl_dbs" ]
+if [ -n "mbl_dbs" ]
    then
       if [ `date +%s` -gt 0 2>/dev/null ]
          then
@@@@ -997,13 +992,12 @@@@ if [ -n "$si_dbs" -o -n "mbl_dbs" ]
       echo ""
       echo "                           --- WARNING ---"
       echo "The system's date function does not appear to support 'date +%s', nor was 'perl' found"
-      echo "on the system.  The SecuriteInfo and MalwarePatrol updates were bypassed at this time."
+      echo "on the system.  The MalwarePatrol updates were bypassed at this time."
       echo ""
-      echo "You can silence this warning by either commenting out the 'si_dbs' and 'mbl_dbs'"
-      echo "variables in the 'USER CONFIGURATION' section of the script, or by installing perl or"
+      echo "You can silence this warning by either commenting out the 'mbl_dbs' variables"
+      echo "in the 'USER CONFIGURATION' section of the script, or by installing perl or"
       echo "the GNU date utility, either of which can calculate the needed seconds since epoch."
-      log "WARNING - Systems does not support calculating time since epoch, SecuriteInfo and MalwarePatrol updates bypassed"
-      si_dbs=""
+      log "WARNING - Systems does not support calculating time since epoch, MalwarePatrol updates bypassed"
       mbl_dbs=""
 fi
 
@@@@ -1122,143 +1116,6 @@@@ if [ -n "$ss_dbs" ] ; then
       echo "or signature database name(s) misspelled in the script's configuration file."
       log "WARNING - Access to all Sanesecurity mirror sites failed - Check for connectivity issues"
       log "WARNING - or signature database name(s) misspelled in the script's configuration file."
-   fi
-fi
-
-#######################################################################
-# Check for updated SecuriteInfo database files every set number of   #
-# hours as defined in the "USER CONFIGURATION" section of this script #
-#######################################################################
-if [ -n "$si_dbs" ] ; then
-   rm -f "$si_dir/*.gz"
-   if [ -s "$config_dir/last-si-update.txt" ]
-      then
-         last_si_update=`cat $config_dir/last-si-update.txt`
-      else
-         last_si_update="0"
-   fi
-   db_file=""
-   loop=""
-   update_interval=$(($si_update_hours * 3600))
-   time_interval=$(($current_time - $last_si_update))
-   if [ "$time_interval" -ge $(($update_interval - 600)) ]
-      then
-         echo "$current_time" > "$config_dir"/last-si-update.txt
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         log "INFO - Checking for SecuriteInfo updates..."
-         si_updates="0"
-         for db_file in $si_dbs ; do
-            if [ "$loop" = "1" ]
-               then
-                  comment "---"
-               else
-                  comment ""
-            fi
-            comment "Checking for updated SecuriteInfo database file: $db_file"
-            comment ""
-            si_db_update="0"
-            if [ -s "$si_dir/$db_file" ]
-               then
-                  z_opt="-z $si_dir/$db_file"
-               else
-                  z_opt=""
-            fi
-            if curl $curl_proxy $curl_output_level --connect-timeout "$curl_connect_timeout" \
-               --max-time "$curl_max_time" -L -R $z_opt -o $si_dir/$db_file http://$si_url/$db_file
-               then
-                  loop="1"
-                  if ! cmp -s $si_dir/$db_file $clam_dbs/$db_file ; then
-                     if [ "$?" = "0" ] ; then
-                        db_ext=`echo $db_file | cut -d "." -f2`
-			comment ""
-                        comment "Testing updated SecuriteInfo database file: $db_file"
-                        log "INFO - Testing updated SecuriteInfo database file: $db_file"
-                        if [ -z "$ham_dir" -o "$db_ext" != "ndb" ]
-                           then
-                              if clamscan --quiet -d "$si_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $si_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                           else
-                              grep -h -v -f "$config_dir/whitelist.hex" "$si_dir/$db_file" > "$test_dir/$db_file"
-                              clamscan --infected --no-summary -d "$test_dir/$db_file" "$ham_dir"/* | \
-                              sed 's/\.UNOFFICIAL FOUND//' | awk '{print $NF}' > "$config_dir/whitelist.txt"
-                              grep -h -f "$config_dir/whitelist.txt" "$test_dir/$db_file" | \
-                              cut -d "*" -f2 | sort | uniq >> "$config_dir/whitelist.hex"
-                              grep -h -v -f "$config_dir/whitelist.hex" "$test_dir/$db_file" > "$test_dir/$db_file-tmp"
-                              mv -f "$test_dir/$db_file-tmp" "$test_dir/$db_file"
-                              if clamscan --quiet -d "$test_dir/$db_file" "$config_dir/scan-test.txt" 2>/dev/null
-                                 then
-                                    comment "Clamscan reports SecuriteInfo $db_file database integrity tested good"
-                                    log "INFO - Clamscan reports SecuriteInfo $db_file database integrity tested good" ; true
-                                 else
-                                    echo "Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING"
-                                    log "WARNING - Clamscan reports SecuriteInfo $db_file database integrity tested BAD - SKIPPING" ; false
-                                    rm -f "$si_dir/$db_file"
-                              fi && \
-                              (test "$keep_db_backup" = "yes" && cp -f $clam_dbs/$db_file $clam_dbs/$db_file-bak 2>/dev/null ; true) && \
-                              if rsync -pcqt $test_dir/$db_file $clam_dbs
-                                 then
-                                    perms chown $clam_user:$clam_group $clam_dbs/$db_file
-                                    comment "Successfully updated SecuriteInfo production database file: $db_file"
-                                    log "INFO - Successfully updated SecuriteInfo production database file: $db_file"
-                                    si_updates=1
-                                    si_db_update=1
-                                    do_clamd_reload=1
-                                 else
-                                    echo "Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                                    log "WARNING - Failed to successfully update SecuriteInfo production database file: $db_file - SKIPPING"
-                              fi
-                        fi
-                     fi
-                  fi
-               else
-                  log "WARNING - Failed curl connection to $si_url - SKIPPED SecuriteInfo $db_file update"
-            fi
-            if [ "$si_db_update" != "1" ] ; then
-               comment ""
-               comment "No updated SecuriteInfo $db_file database file found"
-            fi
-         done
-         if [ "$si_updates" != "1" ] ; then
-            log "INFO - No SecuriteInfo database file updates found"
-         fi
-      else
-         comment ""
-         comment "======================================================================"
-         comment "SecuriteInfo Database File Updates"
-         comment "======================================================================"
-         comment ""
-         time_remaining=$(($update_interval - $time_interval))
-         hours_left=$(($time_remaining / 3600))
-         minutes_left=$(($time_remaining % 3600 / 60))
-         comment "$si_update_hours hours have not yet elapsed since the last SecuriteInfo update check"
-         comment ""
-         comment "     --- No update check was performed at this time ---"
-         comment ""
-         comment "Next check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
-         log "INFO - Next SecuriteInfo check will be performed in approximately $hours_left hour(s), $minutes_left minute(s)"
    fi
 fi
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- clamav-unofficial-sigs.sh.orig	Sun Mar 20 22:39:06 2011
+++ clamav-unofficial-sigs.sh	Sun Mar 20 22:41:12 2011
@@@@ -26,6 +26,8 @@@@ output_ver="
@


1.1.1.1
log
@import ports/security/clamav-unofficial-sigs, ok/feedback ajacoutot@@

The clamav-unofficial-sigs script provides a simple way to
download, test, and update third-party signature databases
for ClamAV provided by Sanesecurity, SecuriteInfo, INetMsg,
OITC, MalwarePatrol, and ScamNailer.
@
text
@@
