head	1.24;
access;
symbols
	OPENBSD_6_1:1.23.0.2
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.13.0.8
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	jasper_20112908:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.24
date	2017.04.21.13.27.46;	author kurt;	state Exp;
branches;
next	1.23;
commitid	lfz5IYSiUvvvq1Ub;

1.23
date	2017.03.26.12.45.27;	author jasper;	state Exp;
branches;
next	1.22;
commitid	EXqsiilS2Yl7ch4P;

1.22
date	2017.03.06.21.19.20;	author jca;	state Exp;
branches;
next	1.21;
commitid	rCUnJX2MvXU0v3EJ;

1.21
date	2017.02.25.15.05.21;	author jasper;	state Exp;
branches;
next	1.20;
commitid	YMhJeTKpOJT1Hlsp;

1.20
date	2016.04.18.17.33.11;	author jasper;	state Exp;
branches;
next	1.19;
commitid	dmYRyIpyowxfsLJ7;

1.19
date	2015.12.29.19.49.40;	author jasper;	state Exp;
branches;
next	1.18;
commitid	qnWWfNxRwuFA0B7n;

1.18
date	2015.10.24.14.22.14;	author jasper;	state Exp;
branches;
next	1.17;
commitid	MuXahabM0fYDkiJE;

1.17
date	2015.10.24.14.08.41;	author jasper;	state Exp;
branches;
next	1.16;
commitid	PFMHoL9WRffHxhpB;

1.16
date	2015.09.18.18.36.27;	author jasper;	state Exp;
branches;
next	1.15;
commitid	mjZJA2r1mm8b9U21;

1.15
date	2015.09.04.21.22.29;	author sthen;	state Exp;
branches;
next	1.14;
commitid	8UAuIKWGI5s7lE3d;

1.14
date	2015.09.01.19.29.22;	author jasper;	state Exp;
branches;
next	1.13;
commitid	GyhLfAb8YRL963Z8;

1.13
date	2014.05.07.15.42.16;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.17.14.02.11;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.11.11.12.34;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.08.10.25.34;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2011.12.15.21.36.23;	author kili;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.16.18.05.04;	author nigel;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.16.10.02.39;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.12.12.50.24;	author nigel;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.01.08.05.05;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.30.17.16.36;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.30.12.03.56;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.30.10.49.02;	author nigel;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.29.15.07.32;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.08.29.15.07.32;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.24
log
@- disconnect devel/jdk/1.7 from the build
- adjust java.port.mk so all 1.7 and lower ports now build with 1.8
- bump revision on affected ports
okay sthen@@, ian@@, landry@@
@
text
@# $OpenBSD: Makefile,v 1.23 2017/03/26 12:45:27 jasper Exp $

COMMENT=	Java Native Access (JNA)

GH_PROJECT=	jna
GH_ACCOUNT=	java-native-access
GH_TAGNAME=	4.4.0
CATEGORIES=	devel
MAINTAINER=	Jasper Lievisse Adriaanse <jasper@@openbsd.org>
REVISION=	0

HOMEPAGE=	https://github.com/java-native-access/jna

# LGPLv2.1+
PERMIT_PACKAGE_CDROM=	Yes

MODULES=	java
MODJAVA_VER=	1.6+
MODJAVA_BUILD=	ant

# use the system libffi
MODJAVA_BUILD_ARGS +=-Ddynlink.native=true

# build.xml specifically wants gmake (and ggrep)
USE_GMAKE=	Yes

BUILD_DEPENDS=	sysutils/ggrep
LIB_DEPENDS=	devel/libffi
# clojure needs to have the jna.jar installed
TEST_DEPENDS=	${BASE_PKGPATH} \
		lang/clojure

MAKE_ENV=	CC="${CC}" \
		PORTS_CFLAGS="${CFLAGS}"

GNU_ARCH=	${ARCH:S/amd64/x86-64/:S/i386/x86/}

# XXX: remove stale distribution file
post-extract:
	rm ${WRKSRC}/native/libffi/src/powerpc/linux64_closure.S.orig

pre-configure:
	sed -i -e 's,-Wno-unknown-warning-option,,' \
		-e 's,-Wno-clobbered,,' ${WRKSRC}/native/Makefile

do-install:
	${INSTALL_DATA_DIR} ${MODJAVA_JAR_DIR} ${MODJAVA_DOC_DIR}/jna/
	${INSTALL_DATA} ${WRKSRC}/build/openbsd-${GNU_ARCH}.jar \
		${MODJAVA_JAR_DIR}/jna-platform.jar
	${INSTALL_DATA} ${WRKSRC}/build/jna*.jar ${MODJAVA_JAR_DIR}
	cp -r ${WRKSRC}/doc/javadoc ${MODJAVA_DOC_DIR}

do-test:
	cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${LOCALBASE}/bin/ant \
		${MODJAVA_BUILD_ARGS} test
	${SHELL} ${FILESDIR}/test.sh

.include <bsd.port.mk>
@


1.23
log
@update to jna-4.4.0
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2017/03/06 21:19:20 jca Exp $
d10 1
@


1.22
log
@Honour CC/CFLAGS
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2017/02/25 15:05:21 jasper Exp $
d7 1
a7 1
GH_TAGNAME=	4.3.0
@


1.21
log
@update to jna-4.3.0
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2016/04/18 17:33:11 jasper Exp $
d31 3
@


1.20
log
@update to jna-4.2.2
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2015/12/29 19:49:40 jasper Exp $
d7 1
a7 1
GH_TAGNAME=	4.2.2
d38 4
d47 1
a47 1
	cp -r ${WRKSRC}/www/javadoc/ ${MODJAVA_DOC_DIR}
@


1.19
log
@DISTNAME is set by bsd.port.mk for these ports now
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2015/10/24 14:22:14 jasper Exp $
d7 1
a7 1
GH_TAGNAME=	4.2.1
d36 1
a36 1
	rm -f native/libffi/src/powerpc/linux64_closure.S.orig
@


1.18
log
@add extended testcase based on clojure
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2015/10/24 14:08:41 jasper Exp $
a7 1
DISTNAME=	${GH_PROJECT}-${GH_TAGNAME}
@


1.17
log
@update to jna-4.2.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2015/09/18 18:36:27 jasper Exp $
d29 3
d37 1
a37 1
	rm native/libffi/src/powerpc/linux64_closure.S.orig
d49 1
@


1.16
log
@- update to jna-4.2.0
- switch to using the system libffi
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2015/09/04 21:22:29 sthen Exp $
d7 1
a7 1
GH_TAGNAME=	4.2.0
d31 4
@


1.15
log
@fix java/jna packaging on i386
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2015/09/01 19:29:22 jasper Exp $
d7 1
a7 1
GH_TAGNAME=	4.1.0
d21 3
d28 1
d40 2
a41 1
	cd ${WRKSRC} && ${SETENV} ${MAKE_ENV} ${LOCALBASE}/bin/ant test
@


1.14
log
@- update to jna-4.1.0
- update homepage
- switch to using GH_*

tested with clojure
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2014/05/07 15:42:16 kurt Exp $
d26 1
a26 1
GNU_ARCH=	${ARCH:S/amd64/x86-64/}
@


1.13
log
@- Unlink jdk/1.6 and make jdk/1.7 the default jdk for all java ports
- Adjust java.port.mk and cmake to use 1.7
- Adjust jdk/1.7 for pkg_add upgrades
okay sthen@@, jasper@@, ajacoutot@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2013/03/17 14:02:11 kurt Exp $
d5 4
a8 4
V=		3.5.1
DISTNAME=	jna-$V-a31faf3026
PKGNAME=	jna-$V
EXTRACT_SUFX=	.zip
a9 2
REVISION=	1

d12 1
a12 1
HOMEPAGE=	https://github.com/twall/jna
a16 3
# git tag of $V
MASTER_SITES=	http://distfiles.nl/

d26 1
a26 4
_BD = build
.if ${MACHINE_ARCH} != "i386"
_BD = build-*
.endif
d30 1
a30 1
	${INSTALL_DATA} ${WRKSRC}/${_BD}/openbsd-${ARCH}.jar \
d32 1
a32 1
	${INSTALL_DATA} ${WRKSRC}/${_BD}/jna.jar ${MODJAVA_JAR_DIR}
@


1.12
log
@- Use a rerolled distfile that includes openbsd native libs for both
amd64 and i386. Makes installed jna.jar include both archs. okay jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2013/03/11 11:12:34 espie Exp $
d10 1
a10 1
REVISION=	0
@


1.11
log
@PERMIT_* / REGRESS -> TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2013/03/08 10:25:34 jasper Exp $
d6 3
a8 1
DISTNAME=	jna-$V
d10 1
d26 1
a26 1
# jnalib/build.xml specifically wants gmake (and ggrep)
@


1.10
log
@- update to jna-3.5.1

ok kurt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2011/12/15 21:36:23 kili Exp $
a14 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM=Yes
PERMIT_DISTFILES_FTP=	Yes
d40 1
a40 1
do-regress:
@


1.9
log
@JAVA_HOME is now added to MAKE_ENV in java.port.mk
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2011/09/16 18:05:04 nigel Exp $
d5 2
a6 4
V=		3.2.7
DISTNAME=	twall-jna-$V-0-g3727f95
PKGNAME=	jna-$V
REVISION=	3
d19 1
a20 1
EXTRACT_SUFX=	.zip
a24 1
MODJAVA_BUILD_DIR=${WRKSRC}/jnalib/
a30 2
WRKDIST= 	${WRKDIR}/twall-jna-d928d42/

d38 1
a38 1
	${INSTALL_DATA} ${WRKSRC}/jnalib/${_BD}/openbsd-${ARCH}.jar \
d40 1
a40 1
	${INSTALL_DATA} ${WRKSRC}/jnalib/${_BD}/jna.jar ${MODJAVA_JAR_DIR}
d44 1
a44 1
	cd ${WRKSRC}/jnalib/ && ${SETENV} ${MAKE_ENV} ${LOCALBASE}/bin/ant test
@


1.8
log
@Build fails when apache-ant home is jdk-1.5.0.

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2011/09/16 10:02:39 espie Exp $
a27 1
MAKE_ENV += JAVA_HOME=${JAVA_HOME}
@


1.7
log
@normalize pkgpath
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2011/09/12 12:50:24 nigel Exp $
d28 1
@


1.6
log
@fix build issue on i386

ok jasper@@ (maintainer)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2011/09/01 08:05:05 jasper Exp $
d8 1
a8 1
REVISION=	2
@


1.5
log
@- switch to MODJAVA_BUILD
- add comment about gmake (requested by sthen@@)
- don't use a handrolled MODJAVA_{DOC,JAR}_DIR
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2011/08/30 17:16:36 jasper Exp $
d36 5
d43 1
a43 1
	${INSTALL_DATA} ${WRKSRC}/jnalib/build-*/openbsd-${ARCH}.jar \
d45 1
a45 1
	${INSTALL_DATA} ${WRKSRC}/jnalib/build-*/jna.jar ${MODJAVA_JAR_DIR}
@


1.4
log
@- bump REVISION after recent java.port.mk change
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2011/08/30 12:03:56 jasper Exp $
d8 1
a8 1
REVISION=	1
d26 2
d29 1
d32 1
a32 2
BUILD_DEPENDS=	devel/apache-ant \
		sysutils/ggrep
a35 6
JAR_DIR=	${PREFIX}/share/java/classes/
DOC_DIR=	${PREFIX}/share/java/jna/

do-build:
	cd ${WRKSRC}/jnalib/ && ${SETENV} ${MAKE_ENV} ${LOCALBASE}/bin/ant

d37 1
a37 1
	${INSTALL_DATA_DIR} ${JAR_DIR} ${DOC_DIR}
d39 3
a41 3
		${JAR_DIR}/jna-platform.jar
	${INSTALL_DATA} ${WRKSRC}/jnalib/build-*/jna.jar ${JAR_DIR}
	cp -r ${WRKSRC}/www/javadoc/ ${DOC_DIR}
@


1.3
log
@- take maintainership
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2011/08/30 10:49:02 nigel Exp $
d8 2
a9 2
REVISION=	0
CATEGORIES=	java devel
@


1.2
log
@add missing build depends

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2011/08/29 15:07:32 jasper Exp $
d8 1
d11 2
d27 2
a29 1
		devel/gmake \
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d24 3
a26 1
BUILD_DEPENDS=	devel/apache-ant
@


1.1.1.1
log
@import jna 3.2.7

JNA provides Java programs easy access to native shared libraries
without writing anything but Java code -- no JNI or native code is
required. This functionality is comparable to Windows' Platform/Invoke
and Python's ctypes. Access is dynamic at runtime without code
generation.

JNA allows you to call directly into native functions using natural Java
method invocation. The Java call looks just like it does in native code.
Most calls require no special handling or configuration; no boilerplate
or generated code is required.

ok aja@@
@
text
@@
