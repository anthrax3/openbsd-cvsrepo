head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jasper_20112908:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.08.10.25.34;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2011.08.29.15.07.32;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.08.29.15.07.32;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to jna-3.5.1

ok kurt@@
@
text
@$OpenBSD: patch-jnalib_build_xml,v 1.1 2011/08/29 15:07:32 jasper Exp $

- Don't run regress tests during regular build.
- Don't sign the jar since it's different from what upstream builds.

--- jnalib/build.xml.orig	Wed Jul 21 07:48:26 2010
+++ jnalib/build.xml	Mon Aug 29 16:30:17 2011
@@@@ -58,7 +58,7 @@@@
   <!-- Miscellaneous -->
   <property name="build.compiler.emacs" value="true"/>
 
-  <target name="default" depends="test" description="Build and Test."/>
+  <target name="default" depends="jar,contrib-jars" description="Build and Test."/>
 
   <!-- uncomment for netbeans profiling -->
   <!--<import file="nbproject/profiler-build-impl.xml"/>-->
@@@@ -437,9 +437,6 @@@@
     <jar jarfile="${build}/jws/jnidispatch.jar">
       <fileset dir="${build.native}" includes="*jnidispatch.*"/>
     </jar>
-    <signjar alias="jna" keystore="jna.keystore" storepass="jnadev" lazy="true"> 
-      <fileset dir="${build}/jws" includes="jna.jar,jna-test.jar,junit.jar,jnidispatch.jar,clover.jar"/>
-    </signjar>
   </target>
 	
   <!-- When running tests from an IDE, be sure to set jna.library.path -->
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import jna 3.2.7

JNA provides Java programs easy access to native shared libraries
without writing anything but Java code -- no JNI or native code is
required. This functionality is comparable to Windows' Platform/Invoke
and Python's ctypes. Access is dynamic at runtime without code
generation.

JNA allows you to call directly into native functions using natural Java
method invocation. The Java call looks just like it does in native code.
Most calls require no special handling or configuration; no boilerplate
or generated code is required.

ok aja@@
@
text
@@
