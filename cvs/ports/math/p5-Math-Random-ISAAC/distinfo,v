head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.10
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	gsoares_20120412:1.1.1.1
	dhill:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.18.03.14.29;	author naddy;	state Exp;
branches;
next	1.1;
commitid	INAcawJqik7lWSVj;

1.1
date	2012.04.12.13.53.03;	author gsoares;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.12.13.53.03;	author gsoares;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Drop remaining MD5/RMD160/SHA1 checksums.
@
text
@SHA256 (Math-Random-ISAAC-1.004.tar.gz) = J3PwL78gfpdF52oDffCL9ajMmH7SPFcEDOf3sVYfK3w=
SIZE (Math-Random-ISAAC-1.004.tar.gz) = 34445
@


1.1
log
@Initial revision
@
text
@a0 3
MD5 (Math-Random-ISAAC-1.004.tar.gz) = RhELmnu5b+ZBvfrzW9r+xQ==
RMD160 (Math-Random-ISAAC-1.004.tar.gz) = anf8D1e5LpMxwjOg9Z13rK59j+A=
SHA1 (Math-Random-ISAAC-1.004.tar.gz) = DS5CNVntKNhC5pB+OUTWxbbycF8=
@


1.1.1.1
log
@Import p5-Math-Random-ISAAC-1.004

The ISAAC algorithm is designed to take some seed information and
produce seemingly random results as output.

However, ISAAC (Indirection, Shift, Accumulate, Add, and Count) has
different goals than other commonly used algorithms. In particular, it's
really fast - on average, it requires only 18.75 machine cycles to
generate a 32-bit value. This makes it suitable for applications where a
significant amount of random data needs to be produced quickly, such
solving using the Monte Carlo method or for games.

with feedback and tweaks by me
committing on behalf of dhill@@

OK sthen@@
@
text
@@
