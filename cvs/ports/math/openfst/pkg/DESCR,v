head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	bentley_20121019:1.1.1.1
	bentley:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.10.20.04.35.55;	author bentley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.20.04.35.55;	author bentley;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@OpenFst is a library for constructing, combining, optimizing, and
searching weighted finite-state transducers (FSTs). Weighted
finite-state transducers are automata where each transition has an input
label, an output label, and a weight. The more familiar finite-state
acceptor is represented as a transducer with each transition's input and
output label equal. Finite-state acceptors are used to represent sets of
strings (specifically, regular or rational sets); finite-state
transducers are used to represent binary relations between pairs of
strings (specifically, rational transductions). The weights can be used
to represent the cost of taking a particular transition.

FSTs have key applications in speech recognition and synthesis, machine
translation, optical character recognition, pattern matching, string
processing, machine learning, information extraction and retrieval among
others. Often a weighted transducer is used to represent a probabilistic
model (e.g., an n-gram model, pronunciation model). FSTs can be
optimized by determinization and minimization, models can be applied to
hypothesis sets (also represented as automata) or cascaded by
finite-state composition, and the best results can be selected by
shortest-path algorithms.

This library was developed by contributors from Google Research and
NYU's Courant Institute. It is intended to be comprehensive, flexible,
efficient and scale well to large problems. It has been extensively
tested. It is an open source project distributed under the Apache
license.
@


1.1.1.1
log
@Import openfst-1.3.1.

OpenFst is a library for constructing, combining, optimizing, and
searching weighted finite-state transducers (FSTs). Weighted
finite-state transducers are automata where each transition has an input
label, an output label, and a weight. The more familiar finite-state
acceptor is represented as a transducer with each transition's input and
output label equal. Finite-state acceptors are used to represent sets of
strings (specifically, regular or rational sets); finite-state
transducers are used to represent binary relations between pairs of
strings (specifically, rational transductions). The weights can be used
to represent the cost of taking a particular transition.

ok jeremy@@
@
text
@@
