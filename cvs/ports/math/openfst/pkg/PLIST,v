head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.10
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.8
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	bentley_20121019:1.1.1.1
	bentley:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.03.16.18.07.50;	author naddy;	state Exp;
branches;
next	1.1;
commitid	IJdm3Zowcdkcxp5X;

1.1
date	2012.10.20.04.35.55;	author bentley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.20.04.35.55;	author bentley;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fold lib-only PFRAG.shared into PLIST, regen PLIST, and bump
@
text
@@@comment $OpenBSD: PLIST,v 1.1.1.1 2012/10/20 04:35:55 bentley Exp $
@@bin bin/fstarcsort
@@bin bin/fstclosure
@@bin bin/fstcompile
@@bin bin/fstcompose
@@bin bin/fstconcat
@@bin bin/fstconnect
@@bin bin/fstconvert
@@bin bin/fstdeterminize
@@bin bin/fstdifference
@@bin bin/fstdraw
@@bin bin/fstencode
@@bin bin/fstepsnormalize
@@bin bin/fstequal
@@bin bin/fstequivalent
@@bin bin/fstinfo
@@bin bin/fstintersect
@@bin bin/fstinvert
@@bin bin/fstmap
@@bin bin/fstminimize
@@bin bin/fstprint
@@bin bin/fstproject
@@bin bin/fstprune
@@bin bin/fstpush
@@bin bin/fstrandgen
@@bin bin/fstrelabel
@@bin bin/fstreplace
@@bin bin/fstreverse
@@bin bin/fstreweight
@@bin bin/fstrmepsilon
@@bin bin/fstshortestdistance
@@bin bin/fstshortestpath
@@bin bin/fstsymbols
@@bin bin/fstsynchronize
@@bin bin/fsttopsort
@@bin bin/fstunion
include/fst/
include/fst/accumulator.h
include/fst/add-on.h
include/fst/arc-map.h
include/fst/arc.h
include/fst/arcfilter.h
include/fst/arcsort.h
include/fst/bi-table.h
include/fst/cache.h
include/fst/closure.h
include/fst/compact-fst.h
include/fst/compat.h
include/fst/complement.h
include/fst/compose-filter.h
include/fst/compose.h
include/fst/concat.h
include/fst/config.h
include/fst/connect.h
include/fst/const-fst.h
include/fst/determinize.h
include/fst/dfs-visit.h
include/fst/difference.h
include/fst/edit-fst.h
include/fst/encode.h
include/fst/epsnormalize.h
include/fst/equal.h
include/fst/equivalent.h
include/fst/expanded-fst.h
include/fst/expectation-weight.h
include/fst/factor-weight.h
include/fst/flags.h
include/fst/float-weight.h
include/fst/fst-decl.h
include/fst/fst.h
include/fst/fstlib.h
include/fst/generic-register.h
include/fst/heap.h
include/fst/icu.h
include/fst/intersect.h
include/fst/interval-set.h
include/fst/invert.h
include/fst/label-reachable.h
include/fst/lexicographic-weight.h
include/fst/lock.h
include/fst/log.h
include/fst/lookahead-filter.h
include/fst/lookahead-matcher.h
include/fst/map.h
include/fst/matcher-fst.h
include/fst/matcher.h
include/fst/minimize.h
include/fst/mutable-fst.h
include/fst/pair-weight.h
include/fst/partition.h
include/fst/power-weight.h
include/fst/product-weight.h
include/fst/project.h
include/fst/properties.h
include/fst/prune.h
include/fst/push.h
include/fst/queue.h
include/fst/randequivalent.h
include/fst/randgen.h
include/fst/random-weight.h
include/fst/rational.h
include/fst/register.h
include/fst/relabel.h
include/fst/replace-util.h
include/fst/replace.h
include/fst/reverse.h
include/fst/reweight.h
include/fst/rmepsilon.h
include/fst/rmfinalepsilon.h
include/fst/script/
include/fst/script/arcsort.h
include/fst/script/arg-packs.h
include/fst/script/closure.h
include/fst/script/compile-impl.h
include/fst/script/compile.h
include/fst/script/compose.h
include/fst/script/concat.h
include/fst/script/connect.h
include/fst/script/convert.h
include/fst/script/decode.h
include/fst/script/determinize.h
include/fst/script/difference.h
include/fst/script/draw-impl.h
include/fst/script/draw.h
include/fst/script/encode.h
include/fst/script/epsnormalize.h
include/fst/script/equal.h
include/fst/script/equivalent.h
include/fst/script/fst-class.h
include/fst/script/fstscript-decl.h
include/fst/script/fstscript.h
include/fst/script/info-impl.h
include/fst/script/info.h
include/fst/script/intersect.h
include/fst/script/invert.h
include/fst/script/map.h
include/fst/script/minimize.h
include/fst/script/print-impl.h
include/fst/script/print.h
include/fst/script/project.h
include/fst/script/prune.h
include/fst/script/push.h
include/fst/script/randequivalent.h
include/fst/script/randgen.h
include/fst/script/register.h
include/fst/script/relabel.h
include/fst/script/replace.h
include/fst/script/reverse.h
include/fst/script/reweight.h
include/fst/script/rmepsilon.h
include/fst/script/script-impl.h
include/fst/script/shortest-distance.h
include/fst/script/shortest-path.h
include/fst/script/symbols.h
include/fst/script/synchronize.h
include/fst/script/text-io.h
include/fst/script/topsort.h
include/fst/script/union.h
include/fst/script/verify.h
include/fst/script/weight-class.h
include/fst/shortest-distance.h
include/fst/shortest-path.h
include/fst/signed-log-weight.h
include/fst/slist.h
include/fst/sparse-power-weight.h
include/fst/sparse-tuple-weight.h
include/fst/state-map.h
include/fst/state-reachable.h
include/fst/state-table.h
include/fst/statesort.h
include/fst/string-weight.h
include/fst/string.h
include/fst/symbol-table-ops.h
include/fst/symbol-table.h
include/fst/synchronize.h
include/fst/test-properties.h
include/fst/topsort.h
include/fst/tuple-weight.h
include/fst/types.h
include/fst/union-find.h
include/fst/union.h
include/fst/util.h
include/fst/vector-fst.h
include/fst/verify.h
include/fst/visit.h
include/fst/weight.h
lib/libfst.a
lib/libfst.la
@@lib lib/libfst.so.${LIBfst_VERSION}
lib/libfstscript.a
lib/libfstscript.la
@@lib lib/libfstscript.so.${LIBfstscript_VERSION}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
@@comment $OpenBSD$
%%SHARED%%
d189 1
d192 1
@


1.1.1.1
log
@Import openfst-1.3.1.

OpenFst is a library for constructing, combining, optimizing, and
searching weighted finite-state transducers (FSTs). Weighted
finite-state transducers are automata where each transition has an input
label, an output label, and a weight. The more familiar finite-state
acceptor is represented as a transducer with each transition's input and
output label equal. Finite-state acceptors are used to represent sets of
strings (specifically, regular or rational sets); finite-state
transducers are used to represent binary relations between pairs of
strings (specifically, rational transductions). The weights can be used
to represent the cost of taking a particular transition.

ok jeremy@@
@
text
@@
