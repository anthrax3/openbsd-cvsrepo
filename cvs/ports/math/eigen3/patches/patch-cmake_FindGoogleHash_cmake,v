head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.12
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	zhuk_20140710:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2014.07.10.08.59.52;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	oO2dtnIicpklxo8b;

1.1.1.1
date	2014.07.10.08.59.52;	author zhuk;	state Exp;
branches;
next	;
commitid	oO2dtnIicpklxo8b;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
Fix configure check.
--- cmake/FindGoogleHash.cmake.orig	Tue Jul 30 15:24:36 2013
+++ cmake/FindGoogleHash.cmake	Tue Jul 30 15:24:20 2013
@@@@ -1,4 +1,7 @@@@
 
+include(CMakePushCheckState)
+include(CheckCXXSourceCompiles)
+
 if (GOOGLEHASH_INCLUDES AND GOOGLEHASH_LIBRARIES)
   set(GOOGLEHASH_FIND_QUIETLY TRUE)
 endif (GOOGLEHASH_INCLUDES AND GOOGLEHASH_LIBRARIES)
@@@@ -9,12 +12,16 @@@@ find_path(GOOGLEHASH_INCLUDES
   PATHS
   ${INCLUDE_INSTALL_DIR}
 )
+message(STATUS "GOOGLEHASH_INCLUDES: ${GOOGLEHASH_INCLUDES}")
 
 if(GOOGLEHASH_INCLUDES)
-  # let's make sure it compiles with the current compiler
-  file(WRITE ${CMAKE_BINARY_DIR}/googlehash_test.cpp
-  "#include <google/sparse_hash_map>\n#include <google/dense_hash_map>\nint main(int argc, char** argv) { google::dense_hash_map<int,float> a; google::sparse_hash_map<int,float> b; return 0;}\n")
-  try_compile(GOOGLEHASH_COMPILE ${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/googlehash_test.cpp OUTPUT_VARIABLE GOOGLEHASH_COMPILE_RESULT)
+  cmake_push_check_state()
+  set(CMAKE_REQUIRED_FLAGS)
+  set(CMAKE_REQUIRED_DEFINITIONS)
+  set(CMAKE_REQUIRED_INCLUDES ${GOOGLEHASH_INCLUDES})
+  set(CMAKE_REQUIRED_LIBRARIES)
+  check_cxx_source_compiles("#include <google/sparse_hash_map>\n#include <google/dense_hash_map>\nint main(int argc, char** argv) { google::dense_hash_map<int,float> a; google::sparse_hash_map<int,float> b; return 0;}\n" GOOGLEHASH_COMPILE)
+  cmake_pop_check_state()
 endif(GOOGLEHASH_INCLUDES)
 
 include(FindPackageHandleStandardArgs)
@


1.1.1.1
log
@Eigen is a C++ template library for vector and matrix math.

Unlike most other linear algebra libraries, Eigen focuses on the
simple mathematical needs of applications: games and other OpenGL
apps, spreadsheets and other office apps, etc. Eigen is dedicated
to providing optimal speed with GCC.

This is used by some KDE applications. Probably some other ports will
pick up Eigen3, too, this will be dealt soon.

okay landry@@
@
text
@@
