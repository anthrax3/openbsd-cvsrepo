head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.18
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.16
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.14
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.30
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.28
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.24
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.10
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	lebel_2001-Jul-01:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.03.14.09.17.01;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.15.21.42.41;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.01.23.10.44;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.01.23.10.44;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix various typos, from Anthony J. Bentley with a few tweaks by myself
@
text
@FFTW is a free collection of fast C routines for computing the
Discrete Fourier Transform in one or more dimensions. It includes
complex, real, and parallel transforms, and can handle arbitrary
array sizes efficiently.  FFTW is typically faster than other
publicly-available FFT implementations, and is even competitive
with vendor-tuned libraries.  (See our web page for extensive
benchmarks.) To achieve this performance, FFTW uses novel code-generation
and runtime self-optimization techniques (along with many other
tricks).
@


1.2
log
@remove WWW lines
@
text
@d5 1
a5 1
publically-available FFT implementations, and is even competitive
@


1.1
log
@Initial revision
@
text
@a9 2

WWW: ${HOMEPAGE}
@


1.1.1.1
log
@initial port of fftw-2.1.3:
--
FFTW is a free collection of fast C routines for computing the
Discrete Fourier Transform in one or more dimensions. It includes
complex, real, and parallel transforms, and can handle arbitrary
array sizes efficiently.  FFTW is typically faster than other
publically-available FFT implementations, and is even competitive
with vendor-tuned libraries.  (See our web page for extensive
benchmarks.) To achieve this performance, FFTW uses novel code-generation
and runtime self-optimization techniques (along with many other
tricks).

WWW: http://www.fftw.org/

Submitted by Nikolay Sturm <Nikolay.Sturm@@desy.de>

@
text
@@
