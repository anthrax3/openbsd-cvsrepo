head	1.2;
access;
symbols
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	lebel_2001-Jul-01:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2001.11.01.21.05.41;	author wilfried;	state dead;
branches;
next	1.1;

1.1
date	2001.07.01.23.10.44;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.01.23.10.44;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@use ports in-tree libtool patches, from maintainer
@
text
@$OpenBSD: patch-ltconfig,v 1.1 2001/07/01 23:10:44 lebel Exp $
--- ltconfig.orig	Mon May 14 06:37:34 2001
+++ ltconfig	Tue May 15 12:16:00 2001
@@@@ -1105,6 +1105,9 @@@@ cygwin* | mingw*)
     with_gnu_ld=no
   fi
   ;;
+openbsd*)
+  with_gnu_ld=no
+  ;;
 
 esac
 
@@@@ -1396,10 +1399,21 @@@@ else
     ;;
 
   openbsd*)
-    archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linkopts'
-    hardcode_libdir_flag_spec='-R$libdir'
     hardcode_direct=yes
     hardcode_shlibpath_var=no
+    case "$host_os" in
+      openbsd[01].* | openbsd2.[0-7] | openbsd2.[0-7].*)
+	archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linkopts'
+	hardcode_libdir_flag_spec='-R$libdir'
+      ;;
+      *)
+	archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $linkopts'
+	hardcode_libdir_flag_spec='${wl}-rpath,$libdir'
+	if [ "`/usr/bin/file /usr/lib/libc.so.* | grep ELF`" != "" ]; then
+	  export_dynamic_flag_spec='${wl}-E'
+	fi
+      ;;
+    esac
     ;;
 
   os2*)
@@@@ -1997,13 +2011,10 @@@@ netbsd*)
 
 openbsd*)
   version_type=sunos
-  if test "$with_gnu_ld" = yes; then
-    need_lib_prefix=no
-    need_version=no
-  fi
   library_names_spec='${libname}${release}.so$versuffix ${libname}.so$versuffix'
   finish_cmds='PATH="\$PATH:/sbin" ldconfig -m $libdir'
   shlibpath_var=LD_LIBRARY_PATH
+  deplibs_check_method='pass_all'
   ;;
 
 os2*)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@initial port of fftw-2.1.3:
--
FFTW is a free collection of fast C routines for computing the
Discrete Fourier Transform in one or more dimensions. It includes
complex, real, and parallel transforms, and can handle arbitrary
array sizes efficiently.  FFTW is typically faster than other
publically-available FFT implementations, and is even competitive
with vendor-tuned libraries.  (See our web page for extensive
benchmarks.) To achieve this performance, FFTW uses novel code-generation
and runtime self-optimization techniques (along with many other
tricks).

WWW: http://www.fftw.org/

Submitted by Nikolay Sturm <Nikolay.Sturm@@desy.de>

@
text
@@
