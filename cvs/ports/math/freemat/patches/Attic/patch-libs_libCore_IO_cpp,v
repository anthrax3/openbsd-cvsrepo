head	1.4;
access;
symbols
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	steven-20061028:1.1.1.1
	steven:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2007.09.07.15.55.25;	author steven;	state dead;
branches;
next	1.3;

1.3
date	2007.04.22.14.43.41;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.24.14.14.50;	author martynas;	state dead;
branches;
next	1.1;

1.1
date	2006.10.28.19.53.05;	author steven;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.28.19.53.05;	author steven;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to freemat 3.4

looks ok to martynas@@
@
text
@$OpenBSD: patch-libs_libCore_IO_cpp,v 1.3 2007/04/22 14:43:41 martynas Exp $
--- libs/libCore/IO.cpp.orig	Fri Apr 13 23:07:45 2007
+++ libs/libCore/IO.cpp	Mon Apr 16 11:06:00 2007
@@@@ -509,7 +509,7 @@@@ ArrayVector FreadFunction(int nargout, const ArrayVect
     fseek(fptr->fp,0L,SEEK_END);
     fsize = ftell(fptr->fp) - fcpos;
     fseek(fptr->fp,fcpos,SEEK_SET);
-    dp[infiniteDim] = ceil((float)(fsize/elementSize/elementCount));
+    dp[infiniteDim] = ceil((double)(fsize/elementSize/elementCount));
     elementCount *= (int) dp[infiniteDim];
   }
   // Next, we allocate space for the result
@


1.3
log
@3.2 is a re-release of 3.1 with my RESOURCEDIR diff
also, add patch-libs_libCore_IO_cpp (which was ok steven@@ some time ago)
if you are using freemat3 on amd64 make sure you've got the latest current
with floorf() fix
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update to freemat 3.0
you need at least 9 days old current system for it (correct
_POSIX_THREAD_ATTR_STACKSIZE define for qt4).
all the patches already got committed upstream.
"please commit!" steven@@
@
text
@d1 12
a12 26
$OpenBSD: patch-libs_libCore_IO_cpp,v 1.1 2006/10/28 19:53:05 steven Exp $
--- libs/libCore/IO.cpp.orig	Mon May 29 22:24:21 2006
+++ libs/libCore/IO.cpp	Thu Oct 19 14:13:39 2006
@@@@ -31,6 +31,13 @@@@
 #include "matio.h"
 #include "Sparse.hpp"
 
+/* expecting an earlier version of matio, which includes these
+   prototypes in matio.h */
+EXTERN int mat_snprintf(char *str,size_t count,const char *fmt,...);
+EXTERN int mat_asprintf(char **ptr,const char *format, ...);
+EXTERN int mat_vsnprintf(char *str,size_t count,const char *fmt,va_list args);
+EXTERN int mat_vasprintf(char **ptr,const char *format,va_list ap);
+
 namespace FreeMat {
   class FilePtr {
   public:
@@@@ -2189,7 +2196,7 @@@@ namespace FreeMat {
       Mat_LogInit("dummy");
       mat_t *mat = Mat_Open(fname, MAT_ACC_RDONLY);
       if (!mat) {
-	mat = Mat_Open(fname, MAT_ACC_RDONLY | MAT_V4);
+	mat = Mat_Open(fname, MAT_ACC_RDONLY | MAT_FT_MAT4);
       }
       if (mat) {
 	matvar_t *matvar;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import FreeMat 2.0

FreeMat is a free environment for rapid engineering and scientific
prototyping and data processing. It is similar to commercial systems
such as MATLAB from Mathworks, and IDL from Research Systems, but is
Open Source. FreeMat includes several novel features such as a codeless
interface to external C/C++/FORTRAN code, parallel/distributed
algorithm development (via MPI), and plotting and visualization
capabilities.
@
text
@@
