head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.34
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.32
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.28
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.30
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.26
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.24
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.22
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	martynas_20090204:1.1.1.1
	martynas:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.02.03.22.46.14;	author martynas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.02.03.22.46.14;	author martynas;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@--- main.c.orig	26 Oct 2008 20:02:21 -0000	1.93
+++ main.c	31 Dec 2008 22:08:35 -0000	1.94
@@@@ -332,6 +332,9 @@@@ int main(int argc, char *argv[])
 #else
     char readme[BIG_STRING];
 #endif
+#ifdef HAVE_READLINE_HISTORY
+    char * historyfile = "/.wcalc_history";
+#endif
     int tty, i;
     short cmdline_input = 0;
 
@@@@ -375,13 +378,24 @@@@ int main(int argc, char *argv[])
 	}
 
 	if (foundflag == 0) {
-	    snprintf(filename, PATH_MAX, "%s/.wcalcrc", getenv("HOME"));
-	    if (read_prefs(filename)) {
-		perror("Writing Preferences");
-	    }
-	    snprintf(filename, PATH_MAX, "%s/.wcalc_preload", getenv("HOME"));
-	    if (read_preload(filename)) {
-		perror("Reading Preload File");
+	    char * home = getenv("HOME");
+	    char * rcfile = "/.wcalcrc";
+	    char * preloadfile = "/.wcalc_preload";
+	    if (strlen(home) < PATH_MAX - strlen(rcfile) - 1) {
+		snprintf(filename, PATH_MAX, "%s%s", home, rcfile);
+		if (read_prefs(filename)) {
+		    perror("Writing Preferences");
+		}
+	    } else {
+		perror("HOME is too long to read preferences");
+	    }
+	    if (strlen(home) < PATH_MAX - strlen(preloadfile) - 1) {
+		snprintf(filename, PATH_MAX, "%s%s", home, preloadfile);
+		if (read_preload(filename)) {
+		    perror("Reading Preload File");
+		}
+	    } else {
+		perror("HOME is too long to read preload file");
 	    }
 	}
     }
@@@@ -542,13 +556,16 @@@@ int main(int argc, char *argv[])
 	    if (!cmdline_input) {
 #ifdef HAVE_READLINE_HISTORY
 		char filename[PATH_MAX];
+		char * home = getenv("HOME");
 
 		using_history();
-		snprintf(filename, PATH_MAX, "%s/.wcalc_history",
-			 getenv("HOME"));
-		if (read_history(filename)) {
-		    if (errno != ENOENT) {
-			perror("Reading History");
+		if (strlen(home) < PATH_MAX - strlen(historyfile) - 1) {
+		    snprintf(filename, PATH_MAX, "%s%s",
+			    home, historyfile);
+		    if (read_history(filename)) {
+			if (errno != ENOENT) {
+			    perror("Reading History");
+			}
 		    }
 		}
 #endif
@@@@ -581,13 +598,16 @@@@ int main(int argc, char *argv[])
 	if (envinput) {
 #ifdef HAVE_READLINE_HISTORY
 	    char filename[PATH_MAX];
+	    char * home = getenv("HOME");
 
 	    using_history();
-	    snprintf(filename, PATH_MAX, "%s/.wcalc_history",
-		    getenv("HOME"));
-	    if (read_history(filename)) {
-		if (errno != ENOENT) {
-		    perror("Reading History");
+	    if (strlen(home) < PATH_MAX - strlen(historyfile) - 1) {
+		snprintf(filename, PATH_MAX, "%s%s",
+			home, historyfile);
+		if (read_history(filename)) {
+		    if (errno != ENOENT) {
+			perror("Reading History");
+		    }
 		}
 	    }
 #endif
@@@@ -616,13 +636,16 @@@@ int main(int argc, char *argv[])
     if (cmdline_input) {
 #ifdef HAVE_READLINE_HISTORY
 	char filename[PATH_MAX];
+	char * home = getenv("HOME");
 
-	snprintf(filename, PATH_MAX, "%s/.wcalc_history", getenv("HOME"));
-	if (write_history(filename))
-	    perror("Saving History");
-	if (conf.history_limit) {
-	    if (history_truncate_file(filename, conf.history_limit_len))
-		perror("Truncating History");
+	if (strlen(home) < PATH_MAX - strlen(historyfile) - 1) {
+	    snprintf(filename, PATH_MAX, "%s%s", home, historyfile);
+	    if (write_history(filename))
+		perror("Saving History");
+	    if (conf.history_limit) {
+		if (history_truncate_file(filename, conf.history_limit_len))
+		    perror("Truncating History");
+	    }
 	}
 #endif
 	clearHistory();
@@@@ -637,12 +660,15 @@@@ int main(int argc, char *argv[])
 	/* if stdin is a keyboard or terminal, then use readline and prompts */
 #ifdef HAVE_READLINE_HISTORY
 	char filename[PATH_MAX];
+	char * home = getenv("HOME");
 
-	snprintf(filename, PATH_MAX, "%s/.wcalc_history", getenv("HOME"));
-	using_history();
-	if (read_history(filename)) {
-	    if (errno != ENOENT) {
-		perror("Reading History");
+	if (strlen(home) < PATH_MAX - strlen(historyfile) - 1) {
+	    snprintf(filename, PATH_MAX, "%s%s", home, historyfile);
+	    using_history();
+	    if (read_history(filename)) {
+		if (errno != ENOENT) {
+		    perror("Reading History");
+		}
 	    }
 	}
 #endif
@


1.1.1.1
log
@import wcalc-2.4

wcalc is a powerful arbitrary-precision calculator. It has standard
functions (sin, asinh, logtwo, floor, etc), many pre-defined constants
(pi, e, c, etc.), variables, "active" variables, command history, and
hex/octal/binary i/o, conversions, and more.

from maintainer Amarendra Godbole
tested on amd64, and looks ok to steven@@
@
text
@@
