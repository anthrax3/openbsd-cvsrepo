head     1.1;
branch   1.1.1;
access   ;
symbols  landry_20170711:1.1.1.1 landry:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.07.11.18.50.19;  author landry;  state Exp;
branches 1.1.1.1;
next     ;
commitid        gok21jz5TqTCcfD1;

1.1.1.1
date     2017.07.11.18.50.19;  author landry;  state Exp;
branches ;
next     ;
commitid        gok21jz5TqTCcfD1;


desc
@@



1.1
log
@Initial revision
@
text
@# $OpenBSD: Makefile,v 1.10 2016/10/31 17:59:01 landry Exp $

COMMENT =	point cloud storage extension for PostgreSQL

GH_COMMIT =	0130a1c49dc3f8c3beaa5f033c66691bdc422987
GH_PROJECT =	pointcloud
GH_ACCOUNT =	pgpointcloud
DISTNAME =	pgpointcloud-1.1.0pre0

CATEGORIES =	geo databases

# BSD
PERMIT_PACKAGE_CDROM=	Yes

MODULES =	devel/cmake
COMPILER =	clang

LIB_DEPENDS =	textproc/libxml
BUILD_DEPENDS =	databases/postgresql,-server \
		devel/cunit
WANTLIB +=	m z xml2

do-test:
	cd ${WRKBUILD} && lib/cunit/cu_tester

.include <bsd.port.mk>
@


1.1.1.1
log
@Import pgpointcloud 1.1.0pre0 (snapshot from git master)

LIDAR sensors quickly produce millions of points with large numbers of
variables measured on each point. The challenge for a point cloud database
extension is efficiently storing this data while allowing high fidelity access
to the many variables stored.

PostgreSQL Pointcloud deals with all this variability by using a "schema
document" to describe the contents of any particular LIDAR point. Each point
contains a number of dimensions, and each dimension can be of any data type,
with scaling and/or offsets applied to move between the actual value and the
value stored in the database. The schema document format used by PostgreSQL
Pointcloud is the same one used by the [PDAL](http://pointcloud.org) library.

Note that this needs cmake 3.7.2p3 to build.

ok dcoppa@@
@
text
@@
