head     1.1;
branch   1.1.1;
access   ;
symbols  landry_20170711:1.1.1.1 landry:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.07.11.18.50.19;  author landry;  state Exp;
branches 1.1.1.1;
next     ;
commitid        gok21jz5TqTCcfD1;

1.1.1.1
date     2017.07.11.18.50.19;  author landry;  state Exp;
branches ;
next     ;
commitid        gok21jz5TqTCcfD1;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Index: lib/sort_r/sort_r.h
--- lib/sort_r/sort_r.h.orig
+++ lib/sort_r/sort_r.h
@@@@ -24,14 +24,13 @@@@ void sort_r(void *base, size_t nel, size_t width,
 
 */
 
+#  define _SORT_R_INLINE inline
 #if (defined __APPLE__ || defined __MACH__ || defined __DARWIN__ || \
      defined __FreeBSD__ || defined __DragonFly__)
 #  define _SORT_R_BSD
-#  define _SORT_R_INLINE inline
 #elif (defined _GNU_SOURCE || defined __gnu_hurd__ || defined __GNU__ || \
        defined __linux__ || (defined __MINGW32__ && !defined __MINGW64_VERSION_MAJOR) || defined __GLIBC__)
 #  define _SORT_R_LINUX
-#  define _SORT_R_INLINE inline
 #elif (defined _WIN32 || defined _WIN64 || defined __WINDOWS__)
 #  define _SORT_R_WINDOWS
 #  define _SORT_R_INLINE __inline
@


1.1.1.1
log
@Import pgpointcloud 1.1.0pre0 (snapshot from git master)

LIDAR sensors quickly produce millions of points with large numbers of
variables measured on each point. The challenge for a point cloud database
extension is efficiently storing this data while allowing high fidelity access
to the many variables stored.

PostgreSQL Pointcloud deals with all this variability by using a "schema
document" to describe the contents of any particular LIDAR point. Each point
contains a number of dimensions, and each dimension can be of any data type,
with scaling and/or offsets applied to move between the actual value and the
value stored in the database. The schema document format used by PostgreSQL
Pointcloud is the same one used by the [PDAL](http://pointcloud.org) library.

Note that this needs cmake 3.7.2p3 to build.

ok dcoppa@@
@
text
@@
