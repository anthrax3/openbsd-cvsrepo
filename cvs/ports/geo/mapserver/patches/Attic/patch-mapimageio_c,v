head	1.5;
access;
symbols
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2016.03.08.20.44.39;	author landry;	state dead;
branches;
next	1.4;
commitid	YvbIzqqztz4ib9BG;

1.4
date	2015.09.07.19.05.30;	author landry;	state Exp;
branches;
next	1.3;
commitid	VKxudt2cQq5x10d5;

1.3
date	2015.03.28.17.23.23;	author sthen;	state Exp;
branches;
next	1.2;
commitid	hAefOYub28eniR7V;

1.2
date	2013.12.25.21.55.57;	author landry;	state dead;
branches;
next	1.1;

1.1
date	2013.09.25.07.56.58;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Bugfix update to mapserver 7.0.1.

See http://www.mapserver.org/development/changelog/changelog-7-0.html#changelog-7-0-1
@
text
@$OpenBSD: patch-mapimageio_c,v 1.4 2015/09/07 19:05:30 landry Exp $

giflib 5.1+

--- mapimageio.c.orig	Fri Jul 24 09:59:36 2015
+++ mapimageio.c	Sat Aug  8 14:36:14 2015
@@@@ -1058,7 +1058,7 @@@@ int readGIF(char *path, rasterBufferObj *rb)
 
   } while (recordType != TERMINATE_RECORD_TYPE);
 
-  if (DGifCloseFile(image) == GIF_ERROR) {
+  if (DGifCloseFile(image, NULL) == GIF_ERROR) {
 #if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
     msSetError(MS_MISCERR,"failed to close gif after loading: %s","readGIF()", gif_error_msg(image->Error));
 #else
@


1.4
log
@Update to mapserver 7.0.0.

See http://mapserver.org/development/announce/7-0.html
@
text
@d1 1
a1 1
$OpenBSD: patch-mapimageio_c,v 1.3 2015/03/28 17:23:23 sthen Exp $
@


1.3
log
@handle giflib api change
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- mapimageio.c.orig	Sat Mar 28 17:07:24 2015
+++ mapimageio.c	Sat Mar 28 17:07:38 2015
@@@@ -1303,7 +1303,7 @@@@ int readGIF(char *path, rasterBufferObj *rb)
@


1.2
log
@Update to mapserver 6.4.0.

Upstream switched to cmake, but apparently things still magically work.
Slightly tested the cgi & perl examples.
http://mapserver.org/development/announce/6-4.html#announce-6-4
@
text
@d1 1
a1 1
$OpenBSD: patch-mapimageio_c,v 1.1 2013/09/25 07:56:58 sthen Exp $
d3 1
a3 4
From fe843bf95c1d070ebb676855fcbba7239ad66e2c Mon Sep 17 00:00:00 2001
From: Thomas Bonfort <thomas.bonfort@@gmail.com>
Date: Thu, 2 May 2013 14:57:38 +0200
Subject: [PATCH] add support for reentrant giflib>=5.0 (#4646)
d5 3
a7 15
--- mapimageio.c.orig	Fri Apr 19 22:08:49 2013
+++ mapimageio.c	Thu Sep 19 09:46:13 2013
@@@@ -993,12 +993,19 @@@@ int msSaveRasterBufferToBuffer(rasterBufferObj *data, 
     return MS_FAILURE;
   }
 }
+
 #ifdef USE_GIF
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+static char const *gif_error_msg(int code)
+#else
 static char const *gif_error_msg()
+#endif
 {
   static char msg[80];
a8 125
+#if (!defined GIFLIB_MAJOR) || (GIFLIB_MAJOR < 5)
   int code = GifLastError();
+#endif
   switch (code) {
     case E_GIF_ERR_OPEN_FAILED: /* should not see this */
       return "Failed to open given file";
@@@@ -1090,14 +1097,25 @@@@ int readGIF(char *path, rasterBufferObj *rb)
   ColorMapObject *cmap;
   int interlacedOffsets[] = {0,4,2,1};
   int interlacedJumps[] = {8,8,4,2};
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+  int errcode;
+#endif
 
 
   rb->type = MS_BUFFER_BYTE_RGBA;
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+  image =  DGifOpenFileName(path, &errcode);
+  if (image == NULL) {
+    msSetError(MS_MISCERR,"failed to load gif image: %s","readGIF()", gif_error_msg(errcode));
+    return MS_FAILURE;
+  }
+#else
   image =  DGifOpenFileName(path);
   if (image == NULL) {
     msSetError(MS_MISCERR,"failed to load gif image: %s","readGIF()", gif_error_msg());
     return MS_FAILURE;
   }
+#endif
   rb->width = image->SWidth;
   rb->height = image->SHeight;
   rb->data.rgba.row_step = rb->width * 4;
@@@@ -1122,7 +1140,11 @@@@ int readGIF(char *path, rasterBufferObj *rb)
 
   do {
     if (DGifGetRecordType(image, &recordType) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+      msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg(image->Error));
+#else
       msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg());
+#endif
       return MS_FAILURE;
     }
 
@@@@ -1132,7 +1154,11 @@@@ int readGIF(char *path, rasterBufferObj *rb)
         break;
       case IMAGE_DESC_RECORD_TYPE:
         if (DGifGetImageDesc(image) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+          msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg(image->Error));
+#else
           msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg());
+#endif
           return MS_FAILURE;
         }
         if (!firstImageRead) {
@@@@ -1159,7 +1185,11 @@@@ int readGIF(char *path, rasterBufferObj *rb)
                 g = rb->data.rgba.g + offset;
                 b = rb->data.rgba.b + offset;
                 if (DGifGetLine(image, line, width) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+                  msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()",gif_error_msg(image->Error));
+#else
                   msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()",gif_error_msg());
+#endif
                   return MS_FAILURE;
                 }
 
@@@@ -1188,7 +1218,11 @@@@ int readGIF(char *path, rasterBufferObj *rb)
               g = rb->data.rgba.g + offset;
               b = rb->data.rgba.b + offset;
               if (DGifGetLine(image, line, width) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+                msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()",gif_error_msg(image->Error));
+#else
                 msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()",gif_error_msg());
+#endif
                 return MS_FAILURE;
               }
               for(j=0; j<width; j++) {
@@@@ -1213,12 +1247,20 @@@@ int readGIF(char *path, rasterBufferObj *rb)
         } else {
           /* Skip all next images */
           if (DGifGetCode(image, &codeSize, &codeBlock) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+            msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg(image->Error));
+#else
             msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg());
+#endif
             return MS_FAILURE;
           }
           while (codeBlock != NULL) {
             if (DGifGetCodeNext(image, &codeBlock) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+              msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg(image->Error));
+#else
               msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg());
+#endif
               return MS_FAILURE;
             }
           }
@@@@ -1227,14 +1269,22 @@@@ int readGIF(char *path, rasterBufferObj *rb)
       case EXTENSION_RECORD_TYPE:
         /* skip all extension blocks */
         if (DGifGetExtension(image, &extCode, &extension) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+          msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg(image->Error));
+#else
           msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg());
+#endif
           return MS_FAILURE;
         }
         if(extCode == 249 && (extension[1] & 1))
           transIdx = extension[4];
         for (;;) {
           if (DGifGetExtensionNext(image, &extension) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+            msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg(image->Error));
+#else
             msSetError(MS_MISCERR,"corrupted gif image?: %s","readGIF()", gif_error_msg());
+#endif
             return MS_FAILURE;
           }
           if (extension == NULL)
@@@@ -1254,7 +1304,11 @@@@ int readGIF(char *path, rasterBufferObj *rb)
d11 5
a15 9
   if (DGifCloseFile(image) == GIF_ERROR) {
+#if defined GIFLIB_MAJOR && GIFLIB_MAJOR >= 5
+    msSetError(MS_MISCERR,"failed to close gif after loading: %s","readGIF()", gif_error_msg(image->Error));
+#else
     msSetError(MS_MISCERR,"failed to close gif after loading: %s","readGIF()", gif_error_msg());
+#endif
     return MS_FAILURE;
   }
 
@


1.1
log
@libungif->giflib and patch where necessary, ok jasper@@ aja@@
@
text
@d1 1
a1 1
$OpenBSD$
@

