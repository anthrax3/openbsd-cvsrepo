head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.24
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.16
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2012.01.17.17.30.33;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update to siproxd 0.8.1 and add rc script; from Lawrence Teo, based
on a diff from stephan@@ with feedback from myself and Brad
@
text
@$OpenBSD$
This prevents siproxd from creating a redundant PID file outside the chroot jail
--- src/siproxd.c.orig	Sun Jun 12 17:10:39 2011
+++ src/siproxd.c	Sun Sep 11 20:48:04 2011
@@@@ -301,13 +301,6 @@@@ int main (int argc, char *argv[]) 
    /* prepare for creating PID file */
    if (pidfilename == NULL) pidfilename = configuration.pid_file;
 
-   /* If going to dive into a chroot jail, create a PID file outside
-    * the jail, too. However, it will be owned by root and not deleted
-    * on process termination... */
-   if (configuration.chrootjail && ((getuid()==0) || (geteuid()==0))) {
-      if (pidfilename) createpidfile(pidfilename);
-   }
-
    /* change user and group IDs */
    secure_enviroment();
 
@
