head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.8
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.6
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.10.09.21.28.13;	author sthen;	state Exp;
branches;
next	;
commitid	SwrAi04Qejtjejjp;


desc
@@


1.1
log
@Update and rework the telephony/pjsua port. The upstream distribution
is a telephony library (pjsip) with some sample applications; pjsua
itself is one of those samples. Previously the port built everything
but only installed the application; newer versions of Asterisk require
the libraries, so I've converted to multi-packages, providing a new
pjsip package with the libs, and retaining pjsua as a separate package
providing the CLI SIP client.

Taking maintainership with the agreement of chrisz@@.
@
text
@$OpenBSD$
--- pjlib/src/pj/guid_uuid.c.orig	Thu May  5 07:14:19 2011
+++ pjlib/src/pj/guid_uuid.c	Fri Feb 20 20:18:33 2015
@@@@ -23,7 +23,11 @@@@
 #include <pj/os.h>
 #include <pj/string.h>
 
+#ifdef HAVE_UUID_CREATE
+#include <uuid.h>
+#else
 #include <uuid/uuid.h>
+#endif
 
 PJ_DEF_DATA(const unsigned) PJ_GUID_STRING_LENGTH=36;
 
@@@@ -35,6 +39,22 @@@@ PJ_DEF(unsigned) pj_GUID_STRING_LENGTH()
 PJ_DEF(pj_str_t*) pj_generate_unique_string(pj_str_t *str)
 {
     enum {GUID_LEN = 36};
+#ifdef HAVE_UUID_CREATE
+    char *sguid;
+    uuid_t uuid;
+    uint32_t status;
+
+    PJ_ASSERT_RETURN(GUID_LEN <= PJ_GUID_STRING_LENGTH, NULL);
+    PJ_ASSERT_RETURN(str->ptr != NULL, NULL);
+    PJ_CHECK_STACK();
+
+    uuid_create(&uuid, &status);
+    uuid_to_string(&uuid, &sguid, &status);
+
+    pj_memcpy(str->ptr, sguid, GUID_LEN);
+    str->slen = GUID_LEN;
+    free(sguid);
+#else
     char sguid[GUID_LEN + 1];
     uuid_t uuid = {0};
     
@@@@ -47,7 +67,7 @@@@ PJ_DEF(pj_str_t*) pj_generate_unique_string(pj_str_t *
     
     pj_memcpy(str->ptr, sguid, GUID_LEN);
     str->slen = GUID_LEN;
-
+#endif
     return str;
 }
 
@
