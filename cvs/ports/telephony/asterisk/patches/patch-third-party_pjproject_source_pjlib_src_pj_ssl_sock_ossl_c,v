head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.2
	OPENBSD_6_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2017.08.05.12.29.21;	author sthen;	state Exp;
branches;
next	;
commitid	s1eyLKJ9jlYZYyvY;


desc
@@


1.1
log
@Switch Asterisk to a gcc build (it requires either nested functions,
which are gcc-specific, or clang with -fblocks, which we don't have
working fully yet).

To avoid a C++ standard library conflict, switch to a stripped-down and
patched copy of pjsua/pjsip built as part of the Asterisk build.

Some slight patch gymnastics; Asterisk doesn't distribute pjsua itself
but rather normally downloads, untars and patches as part of the build,
which isn't compatible with the patches we need to apply in order to
fix it with libressl.
@
text
@$OpenBSD$

excise openssl-1.0.2 EC and various openssl-1.1.0 pieces

Index: third-party/pjproject/source/pjlib/src/pj/ssl_sock_ossl.c
--- third-party/pjproject/source/pjlib/src/pj/ssl_sock_ossl.c.orig
+++ third-party/pjproject/source/pjlib/src/pj/ssl_sock_ossl.c
@@@@ -54,7 +54,7 @@@@
 #include <openssl/engine.h>
 #include <openssl/opensslconf.h>
 
-#if !defined(OPENSSL_NO_EC) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
+#if !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_EC) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
 
 #   include <openssl/obj_mac.h>
 
@@@@ -112,7 +112,7 @@@@ static unsigned get_nid_from_cid(unsigned cid)
 #endif
 
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if !defined(LIBRESSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER >= 0x10100000L
 #  define OPENSSL_NO_SSL2	    /* seems to be removed in 1.1.0 */
 #  define M_ASN1_STRING_data(x)	    ASN1_STRING_get0_data(x)
 #  define M_ASN1_STRING_length(x)   ASN1_STRING_length(x)
@@@@ -453,7 +453,7 @@@@ static pj_status_t init_openssl(void)
 
 	SSL_set_session(ssl, SSL_SESSION_new());
 
-#if !defined(OPENSSL_NO_EC) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
+#if !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_EC) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
 	openssl_curves_num = SSL_get_shared_curve(ssl,-1);
 	if (openssl_curves_num > PJ_ARRAY_SIZE(openssl_curves))
 	    openssl_curves_num = PJ_ARRAY_SIZE(openssl_curves);
@@@@ -1070,7 +1070,7 @@@@ static pj_status_t set_cipher_list(pj_ssl_sock_t *ssoc
 
 static pj_status_t set_curves_list(pj_ssl_sock_t *ssock)
 {
-#if !defined(OPENSSL_NO_EC) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
+#if !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_NO_EC) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
     int ret;
     int curves[PJ_SSL_SOCK_MAX_CURVES];
     unsigned cnt;
@@@@ -1101,7 +1101,7 @@@@ static pj_status_t set_curves_list(pj_ssl_sock_t *ssoc
 
 static pj_status_t set_sigalgs(pj_ssl_sock_t *ssock)
 {
-#if OPENSSL_VERSION_NUMBER >= 0x1000200fL
+#if !defined(LIBRESSL_VERSION_NUMBER) && OPENSSL_VERSION_NUMBER >= 0x1000200fL
     int ret;
 
     if (ssock->param.sigalgs.ptr && ssock->param.sigalgs.slen) {
@
