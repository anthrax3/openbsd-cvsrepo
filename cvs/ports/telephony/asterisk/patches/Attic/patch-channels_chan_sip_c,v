head	1.26;
access;
symbols
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.17.0.2
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.12.0.2
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_3_9:1.1.0.4
	OPENBSD_4_0:1.1.0.2;
locks; strict;
comment	@# @;


1.26
date	2015.10.12.22.07.29;	author sthen;	state dead;
branches;
next	1.25;
commitid	s4D60mgjUjajPmDX;

1.25
date	2015.10.10.19.58.47;	author sthen;	state Exp;
branches;
next	1.24;
commitid	DVU5rjHiL77qkjwC;

1.24
date	2015.06.08.08.44.52;	author sthen;	state Exp;
branches;
next	1.23;
commitid	fpwQjZS08bdnhHwf;

1.23
date	2015.04.02.17.09.30;	author sthen;	state Exp;
branches;
next	1.22;
commitid	pFawx8i9X16VMpMZ;

1.22
date	2015.02.06.23.27.51;	author sthen;	state Exp;
branches
	1.22.2.1;
next	1.21;
commitid	KgnZWoY0Ja6AhSwH;

1.21
date	2015.01.27.21.26.43;	author sthen;	state Exp;
branches;
next	1.20;
commitid	jDFEwq0U3ZjMJisp;

1.20
date	2014.12.12.19.17.52;	author sthen;	state Exp;
branches;
next	1.19;
commitid	SUXlXpEFCfPgsnDb;

1.19
date	2014.11.10.20.43.18;	author sthen;	state Exp;
branches;
next	1.18;
commitid	vGvjZWf0bu7xlils;

1.18
date	2014.09.02.19.53.08;	author sthen;	state Exp;
branches;
next	1.17;
commitid	ZEiR7dcZH7GRSDtR;

1.17
date	2014.07.12.01.32.13;	author sthen;	state Exp;
branches
	1.17.2.1;
next	1.16;
commitid	YbPHQia12Q6YsBuR;

1.16
date	2014.06.12.22.39.12;	author sthen;	state Exp;
branches;
next	1.15;
commitid	FU55V0oX7ss5wEZn;

1.15
date	2014.05.31.00.35.31;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2014.04.26.11.59.51;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2014.03.09.20.51.43;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2013.12.20.12.37.05;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2013.10.21.23.38.45;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2013.07.16.13.03.19;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2013.05.17.22.57.50;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.28.21.25.17;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2010.06.18.22.10.44;	author sthen;	state dead;
branches
	1.7.2.1
	1.7.4.1;
next	1.6;

1.6
date	2010.06.02.13.18.56;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.04.23.02.58;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.09.11.05.55;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.29.22.23.35;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2009.03.10.21.12.38;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.19.21.12.42;	author sturm;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2007.03.19.21.12.42;	author sturm;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2007.03.23.07.26.47;	author sturm;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2007.05.05.08.22.00;	author sturm;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2007.08.09.17.11.03;	author ajacoutot;	state Exp;
branches;
next	;

1.1.4.1
date	2007.03.19.21.41.35;	author sturm;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2007.03.22.21.36.51;	author sturm;	state Exp;
branches;
next	;

1.7.2.1
date	2011.10.17.19.54.16;	author sthen;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2011.12.09.00.22.50;	author sthen;	state Exp;
branches;
next	;

1.7.4.1
date	2012.07.06.19.36.03;	author sthen;	state Exp;
branches;
next	;

1.17.2.1
date	2014.11.21.12.42.59;	author sthen;	state Exp;
branches;
next	;
commitid	3vjlsjP3joK2hNK8;

1.22.2.1
date	2015.04.02.17.21.01;	author sthen;	state Exp;
branches;
next	;
commitid	77NV89UWaeltDPPP;


desc
@@


1.26
log
@update to asterisk-13.6.0

this is a major update - upgrading users should review UPGRADE-12.txt and
UPGRADE.txt in /usr/local/share/doc/asterisk. some configurations will work
unchanged, but there have been big changes in other areas, notably AMI,
CDR and CEL.
@
text
@$OpenBSD: patch-channels_chan_sip_c,v 1.25 2015/10/10 19:58:47 sthen Exp $

https://issues.asterisk.org/jira/secure/attachment/46850/fax-deadlock-v2.patch-11.3.0

--- channels/chan_sip.c.orig	Fri Oct  9 23:23:39 2015
+++ channels/chan_sip.c	Sat Oct 10 14:18:22 2015
@@@@ -8306,8 +8306,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
 			ast_channel_unlock(ast);
 			if (ast_exists_extension(ast, target_context, "fax", 1,
 				S_COR(ast_channel_caller(ast)->id.number.valid, ast_channel_caller(ast)->id.number.str, NULL))) {
-				ast_channel_lock(ast);
-				sip_pvt_lock(p);
 				ast_verb(2, "Redirecting '%s' to fax extension due to CNG detection\n", ast_channel_name(ast));
 				pbx_builtin_setvar_helper(ast, "FAXEXTEN", ast_channel_exten(ast));
 				if (ast_async_goto(ast, target_context, "fax", 1)) {
@@@@ -8316,10 +8314,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
 				ast_frfree(fr);
 				fr = &ast_null_frame;
 			} else {
-				ast_channel_lock(ast);
-				sip_pvt_lock(p);
 				ast_log(LOG_NOTICE, "FAX CNG detected but no fax extension\n");
 			}
+			ast_channel_lock(ast);
+			sip_pvt_lock(p);
 		}
 	}
 
@@@@ -10641,6 +10639,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
 						ast_channel_unlock(p->owner);
 						if (ast_exists_extension(p->owner, target_context, "fax", 1,
 							S_COR(ast_channel_caller(p->owner)->id.number.valid, ast_channel_caller(p->owner)->id.number.str, NULL))) {
+							ast_log(LOG_WARNING, "Usage of 'faxdetect=[yes|t38]' setting in sip.conf is not recommended. Please consider Set(FAXOPT(faxdetect)=[yes|t38]) instead.\n");
 							ast_verb(2, "Redirecting '%s' to fax extension due to peer T.38 re-INVITE\n", ast_channel_name(p->owner));
 							pbx_builtin_setvar_helper(p->owner, "FAXEXTEN", ast_channel_exten(p->owner));
 							if (ast_async_goto(p->owner, target_context, "fax", 1)) {
@


1.25
log
@update to asterisk-11.20.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.24 2015/06/08 08:44:52 sthen Exp $
@


1.24
log
@update to asterisk-11.18.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.23 2015/04/02 17:09:30 sthen Exp $
d5 2
a6 2
--- channels/chan_sip.c.orig	Thu Jun  4 01:44:42 2015
+++ channels/chan_sip.c	Fri Jun  5 10:41:19 2015
d29 1
a29 1
@@@@ -10632,6 +10630,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.23
log
@update to asterisk-11.17.0, which includes a fix from Ed Hynan for an
FD exhaustion problem he was seeing on OpenBSD.
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.22 2015/02/06 23:27:51 sthen Exp $
d5 2
a6 2
--- channels/chan_sip.c.orig	Thu Mar 19 09:39:28 2015
+++ channels/chan_sip.c	Thu Apr  2 17:41:56 2015
d29 1
a29 1
@@@@ -10631,6 +10629,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.22
log
@update to asterisk-11.16.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.21 2015/01/27 21:26:43 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Thu Jan 29 20:40:04 2015
+++ channels/chan_sip.c	Fri Feb  6 23:03:35 2015
@@@@ -8302,8 +8302,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8312,10 +8310,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10626,6 +10624,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.22.2.1
log
@MFC update to asterisk-11.17.0, including FD leak fix.
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.23 2015/04/02 17:09:30 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Thu Mar 19 09:39:28 2015
+++ channels/chan_sip.c	Thu Apr  2 17:41:56 2015
@@@@ -8306,8 +8306,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8316,10 +8314,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10631,6 +10629,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.21
log
@bugfix update to asterisk 11.15.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.20 2014/12/12 19:17:52 sthen Exp $
d5 2
a6 2
--- channels/chan_sip.c.orig	Wed Dec 10 14:40:27 2014
+++ channels/chan_sip.c	Wed Dec 17 01:00:32 2014
d29 1
a29 1
@@@@ -10619,6 +10617,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.20
log
@Update to Asterisk 11.14.2, fixing AST-2014-019 in res_http_websocket,
a crash when receiving a WebSocket packet with a payload length of zero.

"Frames with a payload length of 0 were incorrectly handled in
res_http_websocket. Provided a frame with a payload had been received
prior it was possible for a double free to occur. The realloc operation
would succeed (thus freeing the payload) but be treated as an error.
When the session was then torn down the payload would be freed again
causing a crash. The read function now takes this into account."
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.19 2014/11/10 20:43:18 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Wed Dec 10 14:26:58 2014
+++ channels/chan_sip.c	Fri Dec 12 18:17:13 2014
@@@@ -8308,8 +8308,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8318,10 +8316,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10625,6 +10623,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.19
log
@update to asterisk-11.14.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.18 2014/09/02 19:53:08 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Thu Oct 30 01:58:02 2014
+++ channels/chan_sip.c	Mon Nov 10 19:52:06 2014
@@@@ -8304,8 +8304,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8314,10 +8312,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10621,6 +10619,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.18
log
@update to asterisk 11.12.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.17 2014/07/12 01:32:13 sthen Exp $
d5 2
a6 2
--- channels/chan_sip.c.orig	Thu Aug  7 22:37:04 2014
+++ channels/chan_sip.c	Tue Aug 19 22:35:24 2014
d29 1
a29 1
@@@@ -10619,6 +10617,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.17
log
@update to asterisk 11.11.0
http://downloads.asterisk.org/pub/telephony/asterisk/ChangeLog-11.11.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.16 2014/06/12 22:39:12 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Mon Jun 30 20:42:18 2014
+++ channels/chan_sip.c	Fri Jul 11 23:27:19 2014
@@@@ -8455,8 +8455,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8465,10 +8463,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10770,6 +10768,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.17.2.1
log
@MFC:  SECURITY update to Asterisk 11.14.1

* AST-2014-012: Fix error with mixed address family ACLs.

* AST-2014-014: Fix race condition where channels may get stuck in
ConfBridge under load.

* AST-2014-017 - app_confbridge: permission escalation/class authorization.

* AST-2014-018 - func_db: DB Dialplan function permission escalation via AMI.
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.19 2014/11/10 20:43:18 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Thu Oct 30 01:58:02 2014
+++ channels/chan_sip.c	Mon Nov 10 19:52:06 2014
@@@@ -8304,8 +8304,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8314,10 +8312,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10621,6 +10619,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.16
log
@SECURITY update to asterisk 11.10.1

- AST-2014-006: MixMonitor manager action allows arbitrary shell commands
to be called from AMI (management interface) users without having proper
permissions.

- AST-2014-007: add a timeout to mitigate possible DoS on http interface
(connecting but making no request ties up a connection)
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.15 2014/05/31 00:35:31 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Thu Jun 12 17:54:15 2014
+++ channels/chan_sip.c	Thu Jun 12 23:27:59 2014
@@@@ -8440,8 +8440,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8450,10 +8448,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10738,6 +10736,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.15
log
@update to asterisk 11.10.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.14 2014/04/26 11:59:51 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Tue May 13 18:40:00 2014
+++ channels/chan_sip.c	Thu May 29 21:32:09 2014
@@@@ -8436,8 +8436,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8446,10 +8444,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10734,6 +10732,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.14
log
@update to asterisk 11.9.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.13 2014/03/09 20:51:43 sthen Exp $
a3 1
and add a bit more randomness for digest auth
d5 3
a7 3
--- channels/chan_sip.c.orig	Mon Apr 21 21:56:05 2014
+++ channels/chan_sip.c	Wed Apr 23 22:09:43 2014
@@@@ -8449,8 +8449,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d16 1
a16 1
@@@@ -8459,10 +8457,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d29 1
a29 1
@@@@ -10747,6 +10745,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
a36 9
@@@@ -16360,7 +16359,7 @@@@ static void build_route(struct sip_pvt *p, struct sip_
 static void build_nonce(struct sip_pvt *p, int forceupdate)
 {
 	if (p->stalenonce || forceupdate || ast_strlen_zero(p->nonce)) {
-		ast_string_field_build(p, nonce, "%08lx", ast_random());	/* Create nonce for challenge */
+		ast_string_field_build(p, nonce, "%08lx%08lx%08lx%08lx%08lx", ast_random(), ast_random(), ast_random(), ast_random(), ast_random());	/* Create nonce for challenge */
 		p->stalenonce = 0;
 	}
 }
@


1.13
log
@update to asterisk 11.8.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.12 2013/12/20 12:37:05 sthen Exp $
d6 3
a8 3
--- channels/chan_sip.c.orig	Sat Mar  1 23:30:16 2014
+++ channels/chan_sip.c	Mon Mar  3 23:22:16 2014
@@@@ -8444,8 +8444,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d17 1
a17 1
@@@@ -8454,10 +8452,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d30 1
a30 1
@@@@ -10730,6 +10728,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
d38 1
a38 1
@@@@ -16313,7 +16312,7 @@@@ static void build_route(struct sip_pvt *p, struct sip_
@


1.12
log
@update to asterisk 11.7.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.11 2013/10/21 23:38:45 sthen Exp $
d6 3
a8 3
--- channels/chan_sip.c.orig	Fri Oct 25 17:05:55 2013
+++ channels/chan_sip.c	Tue Dec 17 23:12:01 2013
@@@@ -8442,8 +8442,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d17 1
a17 1
@@@@ -8452,10 +8450,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d30 1
a30 1
@@@@ -10722,6 +10720,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
d38 1
a38 1
@@@@ -16274,7 +16273,7 @@@@ static void build_route(struct sip_pvt *p, struct sip_
@


1.11
log
@update to asterisk 11.6.0
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.10 2013/07/16 13:03:19 sthen Exp $
d6 3
a8 3
--- channels/chan_sip.c.orig	Fri Oct 18 17:38:45 2013
+++ channels/chan_sip.c	Mon Oct 21 20:23:44 2013
@@@@ -8436,8 +8436,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d17 1
a17 1
@@@@ -8446,10 +8444,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d30 1
a30 1
@@@@ -10689,6 +10687,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
d38 1
a38 1
@@@@ -16245,7 +16244,7 @@@@ static void build_route(struct sip_pvt *p, struct sip_
@


1.10
log
@update to Asterisk 11.5.0 (and enabled FreeTDS cel/cdr support)
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.9 2013/05/17 22:57:50 sthen Exp $
d6 2
a7 2
--- channels/chan_sip.c.orig	Mon May 13 22:05:38 2013
+++ channels/chan_sip.c	Tue Jun 11 14:20:09 2013
d38 1
a38 1
@@@@ -16243,7 +16242,7 @@@@ static void build_route(struct sip_pvt *p, struct sip_
@


1.9
log
@update to Asterisk 11.4.0, lots of fixes
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.8 2013/03/28 21:25:17 sthen Exp $
d4 1
d6 3
a8 3
--- channels/chan_sip.c.orig	Wed Mar 27 19:51:29 2013
+++ channels/chan_sip.c	Tue Apr  9 15:46:38 2013
@@@@ -8402,8 +8402,6 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d17 1
a17 1
@@@@ -8412,10 +8410,10 @@@@ static struct ast_frame *sip_read(struct ast_channel *
d30 1
a30 1
@@@@ -10655,6 +10653,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
d38 9
@


1.8
log
@Add patches to resolve a T38 fax-related deadlock researched by chris@@
https://issues.asterisk.org/jira/secure/attachment/46850/fax-deadlock-v2.patch-11.3.0
@
text
@d1 1
a1 1
$OpenBSD$
d5 2
a6 2
--- channels/chan_sip.c.orig	Wed Mar 27 17:34:40 2013
+++ channels/chan_sip.c	Thu Mar 28 21:05:05 2013
d29 1
a29 1
@@@@ -10656,6 +10654,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
@


1.7
log
@update to 1.6.2.9; various crash fixes (including one with dtmf detection)
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.6 2010/06/02 13:18:56 sthen Exp $
d3 1
a3 1
https://issues.asterisk.org/view.php?id=15827
d5 32
a36 10
--- channels/chan_sip.c.orig	Wed May  5 20:08:42 2010
+++ channels/chan_sip.c	Tue Jun  1 22:23:41 2010
@@@@ -3333,6 +3333,7 @@@@ static struct sip_proxy *proxy_allocate(char *name, ch
 	proxy->force = force;
 	ast_copy_string(proxy->name, name, sizeof(proxy->name));
 	proxy->ip.sin_port = htons(port_str2int(port, STANDARD_SIP_PORT));
+	proxy->ip.sin_family = AF_INET;
 	proxy_update(proxy);
 	return proxy;
 }
@


1.7.4.1
log
@backport asterisk security patches for AST-2012-010 and AST-2012-011

- RTP port exhaustion (DoS) if an endpoint responds to SIP INVITEs with
provisional responses but never sends a final response.

- double free with simultaneous access to a single voicemail account.
@
text
@d1 13
a13 14
$OpenBSD$
--- channels/chan_sip.c.orig	Mon Apr 23 16:51:51 2012
+++ channels/chan_sip.c	Fri Jul  6 20:33:28 2012
@@@@ -3850,7 +3850,7 @@@@ static int __sip_autodestruct(const void *data)
 			ast_debug(3, "Re-scheduled destruction of SIP call %s\n", p->callid ? p->callid : "<unknown>");
 			append_history(p, "ReliableXmit", "timeout");
 			if (sscanf(p->lastmsg, "Tx: %30s", method_str) == 1 || sscanf(p->lastmsg, "Rx: %30s", method_str) == 1) {
-				if (method_match(SIP_CANCEL, method_str) || method_match(SIP_BYE, method_str)) {
+				if (p->ongoing_reinvite || method_match(SIP_CANCEL, method_str) || method_match(SIP_BYE, method_str)) {
 					pvt_set_needdestroy(p, "autodestruct");
 				}
 			}
@@@@ -6220,6 +6220,21 @@@@ const char *hangup_cause2sip(int cause)
 	return 0;
a14 98
 
+static int reinvite_timeout(const void *data)
+{
+	struct sip_pvt *dialog = (struct sip_pvt *) data;
+	struct ast_channel *owner = sip_pvt_lock_full(dialog);
+	dialog->reinviteid = -1;
+	check_pendings(dialog);
+	if (owner) {
+		ast_channel_unlock(owner);
+		ast_channel_unref(owner);
+	}
+	ao2_unlock(dialog);
+	dialog_unref(dialog, "unref for reinvite timeout");
+	return 0;
+}
+
 /*! \brief  sip_hangup: Hangup SIP call
  * Part of PBX interface, called from ast_hangup */
 static int sip_hangup(struct ast_channel *ast)
@@@@ -6419,8 +6434,16 @@@@ static int sip_hangup(struct ast_channel *ast)
 				ast_set_flag(&p->flags[0], SIP_PENDINGBYE);	
 				ast_clear_flag(&p->flags[0], SIP_NEEDREINVITE);	
 				AST_SCHED_DEL_UNREF(sched, p->waitid, dialog_unref(p, "when you delete the waitid sched, you should dec the refcount for the stored dialog ptr"));
-				if (sip_cancel_destroy(p))
+				if (sip_cancel_destroy(p)) {
 					ast_log(LOG_WARNING, "Unable to cancel SIP destruction.  Expect bad things.\n");
+				}
+				/* If we have an ongoing reinvite, there is a chance that we have gotten a provisional
+				 * response, but something weird has happened and we will never receive a final response.
+				 * So, just in case, check for pending actions after a bit of time to trigger the pending
+				 * bye that we are setting above */
+				if (p->ongoing_reinvite && p->reinviteid < 0) {
+					p->reinviteid = ast_sched_add(sched, 32 * p->timer_t1, reinvite_timeout, dialog_ref(p, "ref for reinvite_timeout"));
+				}
 			}
 		}
 	}
@@@@ -7689,6 +7712,7 @@@@ struct sip_pvt *sip_alloc(ast_string_field callid, str
 	p->method = intended_method;
 	p->initid = -1;
 	p->waitid = -1;
+	p->reinviteid = -1;
 	p->autokillid = -1;
 	p->request_queue_sched_id = -1;
 	p->provisional_keepalive_sched_id = -1;
@@@@ -11849,7 +11873,7 @@@@ static int transmit_reinvite_with_sdp(struct sip_pvt *
 	initialize_initreq(p, &req);
 	p->lastinvite = p->ocseq;
 	ast_set_flag(&p->flags[0], SIP_OUTGOING);       /* Change direction of this dialog */
-
+	p->ongoing_reinvite = 1;
 	return send_request(p, &req, XMIT_CRITICAL, p->ocseq);
 }
 
@@@@ -19751,16 +19775,20 @@@@ static void parse_moved_contact(struct sip_pvt *p, str
 static void check_pendings(struct sip_pvt *p)
 {
 	if (ast_test_flag(&p->flags[0], SIP_PENDINGBYE)) {
-		/* if we can't BYE, then this is really a pending CANCEL */
-		if (p->invitestate == INV_PROCEEDING || p->invitestate == INV_EARLY_MEDIA) {
+		if (p->reinviteid > -1) {
+			/* Outstanding p->reinviteid timeout, so wait... */
+			return;
+		} else if (p->invitestate == INV_PROCEEDING || p->invitestate == INV_EARLY_MEDIA) {
+			/* if we can't BYE, then this is really a pending CANCEL */
 			p->invitestate = INV_CANCELLED;
 			transmit_request(p, SIP_CANCEL, p->lastinvite, XMIT_RELIABLE, FALSE);
 			/* Actually don't destroy us yet, wait for the 487 on our original
 			   INVITE, but do set an autodestruct just in case we never get it. */
 		} else {
 			/* We have a pending outbound invite, don't send something
-				new in-transaction */
-			if (p->pendinginvite)
+			 * new in-transaction, unless it is a pending reinvite, then
+			 * by the time we are called here, we should probably just hang up. */
+			if (p->pendinginvite && !p->ongoing_reinvite)
 				return;
 
 			if (p->owner) {
@@@@ -19965,9 +19993,17 @@@@ static void handle_response_invite(struct sip_pvt *p, 
  	if (resp >= 300 && (p->invitestate == INV_CALLING || p->invitestate == INV_PROCEEDING || p->invitestate == INV_EARLY_MEDIA ))
  		p->invitestate = INV_COMPLETED;
  	
+	if ((resp >= 200 && reinvite)) {
+		p->ongoing_reinvite = 0;
+		if (p->reinviteid > -1) {
+			AST_SCHED_DEL_UNREF(sched, p->reinviteid, dialog_unref(p, "unref dialog for reinvite timeout because of a final response"));
+		}
+	}
+
 	/* Final response, clear out pending invite */
-	if ((resp == 200 || resp >= 300) && p->pendinginvite && seqno == p->pendinginvite)
+	if ((resp == 200 || resp >= 300) && p->pendinginvite && seqno == p->pendinginvite) {
 		p->pendinginvite = 0;
+	}
 
 	/* If this is a response to our initial INVITE, we need to set what we can use
 	 * for this peer.
@


1.7.2.1
log
@Patch SECURITY bug in Asterisk; trivial remote crash in SIP affecting all
previous 1.8.x versions (uninitialized variable). AST-2011-012 / CVE-2011-4063
@
text
@d1 14
a14 21
$OpenBSD$
--- channels/chan_sip.c.orig	Mon Oct 17 20:37:51 2011
+++ channels/chan_sip.c	Mon Oct 17 20:38:53 2011
@@@@ -13423,7 +13423,7 @@@@ static enum parse_register_result parse_register_conta
 	char data[SIPBUFSIZE];
 	const char *expires = get_header(req, "Expires");
 	int expire = atoi(expires);
-	char *curi, *domain, *transport;
+	char *curi = NULL, *domain = NULL, *transport = NULL;
 	int transport_type;
 	const char *useragent;
 	struct ast_sockaddr oldsin, testsa;
@@@@ -13501,7 +13501,7 @@@@ static enum parse_register_result parse_register_conta
 	ast_string_field_build(pvt, our_contact, "<%s>", curi);
 
 	/* Make sure it's a SIP URL */
-	if (parse_uri_legacy_check(curi, "sip:,sips:", &curi, NULL, &domain, &transport)) {
+	if (ast_strlen_zero(curi) || parse_uri_legacy_check(curi, "sip:,sips:", &curi, NULL, &domain, &transport)) {
 		ast_log(LOG_NOTICE, "Not a valid SIP contact (missing sip:/sips:) trying to use anyway\n");
 	}
 
@


1.7.2.2
log
@security; fix AST-2011-014 crash with automon enabled in features.conf and SIP
@
text
@d1 3
a3 3
$OpenBSD: patch-channels_chan_sip_c,v 1.7.2.1 2011/10/17 19:54:16 sthen Exp $
--- channels/chan_sip.c.orig	Thu Dec  8 23:51:53 2011
+++ channels/chan_sip.c	Thu Dec  8 23:51:48 2011
a21 20
@@@@ -18208,11 +18208,18 @@@@ static void handle_request_info(struct sip_pvt *p, str
 			per device. I don't want incoming callers to record calls in my
 			pbx.
 		*/
-		/* first, get the feature string, if it exists */
+		
 		struct ast_call_feature *feat;
 		int j;
 		struct ast_frame f = { AST_FRAME_DTMF, };
 
+		if (!p->owner) {        /* not a PBX call */
+			transmit_response(p, "481 Call leg/transaction does not exist", req);
+			sip_scheddestroy(p, DEFAULT_TRANS_TIMEOUT);
+			return;
+		}
+
+		/* first, get the feature string, if it exists */
 		ast_rdlock_call_features();
 		feat = ast_find_call_feature("automon");
 		if (!feat || ast_strlen_zero(feat->exten)) {
@


1.6
log
@update to 1.6.2.8
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.5 2010/05/04 23:02:58 sthen Exp $
@


1.5
log
@Update to 1.6.2.7; various bugs fixed including some DTMF problems,
potential crashes in chan_sip, and a chan_local deadlock.
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.4 2010/04/09 11:05:55 sthen Exp $
d5 3
a7 3
--- channels/chan_sip.c.orig	Tue Apr 13 20:42:36 2010
+++ channels/chan_sip.c	Tue May  4 20:19:13 2010
@@@@ -3328,6 +3328,7 @@@@ static struct sip_proxy *proxy_allocate(char *name, ch
@


1.4
log
@fix issues with unitialized address family; one when outboundproxy
is used, reported by Alexey Suslikov, one with dnsmgr when the looked-up
IP address of a peer changes (bug 15827).
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- channels/chan_sip.c.orig	Wed Mar  3 00:19:57 2010
+++ channels/chan_sip.c	Fri Apr  9 11:56:12 2010
@@@@ -3329,6 +3329,7 @@@@ static struct sip_proxy *proxy_allocate(char *name, ch
@


1.3
log
@maintenance update to 1.4.24
@
text
@d1 1
a1 1
http://downloads.digium.com/pub/security/AST-2009-002-1.4.diff
d3 12
a14 68
$OpenBSD: patch-channels_chan_sip_c,v 1.2 2009/03/10 21:12:38 sthen Exp $
--- channels/chan_sip.c.orig	Mon Sep  8 22:10:10 2008
+++ channels/chan_sip.c	Tue Mar 10 20:42:05 2009
@@@@ -13810,19 +13810,32 @@@@ static int handle_invite_replaces(struct sip_pvt *p, s
  */
 static int sip_uri_params_cmp(const char *input1, const char *input2) 
 {
-	char *params1 = ast_strdupa(input1);
-	char *params2 = ast_strdupa(input2);
+	char *params1 = NULL;
+	char *params2 = NULL;
 	char *pos1;
 	char *pos2;
+	int zerolength1 = 0;
+	int zerolength2 = 0;
 	int maddrmatch = 0;
 	int ttlmatch = 0;
 	int usermatch = 0;
 	int methodmatch = 0;
 
+	if (ast_strlen_zero(input1)) {
+		zerolength1 = 1;
+	} else {
+		params1 = ast_strdupa(input1);
+	}
+	if (ast_strlen_zero(input2)) {
+		zerolength2 = 1;
+	} else {
+		params2 = ast_strdupa(input2);
+	}
+
 	/*Quick optimization. If both params are zero-length, then
 	 * they match
 	 */
-	if (ast_strlen_zero(params1) && ast_strlen_zero(params2)) {
+	if (zerolength1 && zerolength2) {
 		return 0;
 	}
 
@@@@ -13937,12 +13950,24 @@@@ fail:
  */
 static int sip_uri_headers_cmp(const char *input1, const char *input2)
 {
-	char *headers1 = ast_strdupa(input1);
-	char *headers2 = ast_strdupa(input2);
-	int zerolength1 = ast_strlen_zero(headers1);
-	int zerolength2 = ast_strlen_zero(headers2);
+	char *headers1 = NULL;
+	char *headers2 = NULL;
+	int zerolength1 = 0;
+	int zerolength2 = 0;
 	int different = 0;
 	char *header1;
+
+	if (ast_strlen_zero(input1)) {
+		zerolength1 = 1;
+	} else {
+		headers1 = ast_strdupa(input1);
+	}
+	
+	if (ast_strlen_zero(input2)) {
+		zerolength2 = 1;
+	} else {
+		headers2 = ast_strdupa(input2);
+	}
 
 	if ((zerolength1 && !zerolength2) ||
 			(zerolength2 && !zerolength1))
@


1.2
log
@SECURITY; patch AST-2009-002, remote *unauthenticated* crash in SIP
where the "pedantic" option is enabled (disabled by default).

Backported rather than updated until I sort out the H323 autoconf
breakage in newer versions.
@
text
@d3 1
a3 1
$OpenBSD$
@


1.1
log
@file patch-channels_chan_sip_c was initially added on branch OPENBSD_4_0.
@
text
@d1 70
@


1.1.4.1
log
@security fix for a remote DoS in chan_sip

from maintainer Stuart Henderson
@
text
@a0 16
$OpenBSD$
--- channels/chan_sip.c.orig	Mon Mar 19 22:33:19 2007
+++ channels/chan_sip.c	Mon Mar 19 22:34:08 2007
@@@@ -11181,6 +11181,12 @@@@ static int handle_request(struct sip_pvt
 		}
 	}
 
+	if (!e && (p->method == SIP_INVITE || p->method == SIP_SUBSCRIBE || p->method == SIP_REGISTER)) {
+		transmit_response(p, "503 Server error", req);
+		ast_set_flag(p, SIP_NEEDDESTROY);
+		return -1;
+	}
+
 	/* Handle various incoming SIP methods in requests */
 	switch (p->method) {
 	case SIP_OPTIONS:
@


1.1.4.2
log
@SECURITY: fixes a(nother) remote DoS in chan_sip:

http://voipsa.org/pipermail/voipsec_voipsa.org/2007-March/002275.html

from maintainer stuart henderson
@
text
@d1 4
a4 10
$OpenBSD: patch-channels_chan_sip_c,v 1.1.4.1 2007/03/19 21:41:35 sturm Exp $
--- channels/chan_sip.c.orig	Thu May 25 19:18:01 2006
+++ channels/chan_sip.c	Thu Mar 22 22:19:57 2007
@@@@ -3587,6 +3587,7 @@@@ static int process_sdp(struct sip_pvt *p
 				hp = ast_gethostbyname(host, &ahp);
 				if (!hp) {
 					ast_log(LOG_WARNING, "Unable to lookup host in secondary c= line, '%s'\n", c);
+					return -1;
 				}
 			}
d6 2
a7 14
@@@@ -3615,6 +3616,7 @@@@ static int process_sdp(struct sip_pvt *p
 				hp = ast_gethostbyname(host, &ahp);
 				if (!hp) {
 					ast_log(LOG_WARNING, "Unable to lookup host in secondary c= line, '%s'\n", c);
+					return -1;
 				}
 			}
 		}
@@@@ -11179,6 +11181,12 @@@@ static int handle_request(struct sip_pvt
 			}
 			return res;
 		}
+	}
+
d12 2
a13 2
 	}
 
d15 2
@


1.1.2.1
log
@security fix for a remote DoS in chan_sip

from maintainer Stuart Henderson
@
text
@a0 16
$OpenBSD$
--- channels/chan_sip.c.orig	Mon Mar 19 22:02:17 2007
+++ channels/chan_sip.c	Mon Mar 19 22:03:40 2007
@@@@ -11181,6 +11181,12 @@@@ static int handle_request(struct sip_pvt
 		}
 	}
 
+	if (!e && (p->method == SIP_INVITE || p->method == SIP_SUBSCRIBE || p->method == SIP_REGISTER)) {
+		transmit_response(p, "503 Server error", req);
+		ast_set_flag(p, SIP_NEEDDESTROY);
+		return -1;
+	}
+
 	/* Handle various incoming SIP methods in requests */
 	switch (p->method) {
 	case SIP_OPTIONS:
@


1.1.2.2
log
@SECURITY: fixes a(nother) remote DoS in chan_sip:

http://voipsa.org/pipermail/voipsec_voipsa.org/2007-March/002275.html

from maintainer stuart henderson
@
text
@d1 4
a4 10
$OpenBSD: patch-channels_chan_sip_c,v 1.1.2.1 2007/03/19 21:12:42 sturm Exp $
--- channels/chan_sip.c.orig	Thu May 25 19:18:01 2006
+++ channels/chan_sip.c	Fri Mar 23 07:41:22 2007
@@@@ -3587,6 +3587,7 @@@@ static int process_sdp(struct sip_pvt *p
 				hp = ast_gethostbyname(host, &ahp);
 				if (!hp) {
 					ast_log(LOG_WARNING, "Unable to lookup host in secondary c= line, '%s'\n", c);
+					return -1;
 				}
 			}
d6 2
a7 14
@@@@ -3615,6 +3616,7 @@@@ static int process_sdp(struct sip_pvt *p
 				hp = ast_gethostbyname(host, &ahp);
 				if (!hp) {
 					ast_log(LOG_WARNING, "Unable to lookup host in secondary c= line, '%s'\n", c);
+					return -1;
 				}
 			}
 		}
@@@@ -11179,6 +11181,12 @@@@ static int handle_request(struct sip_pvt
 			}
 			return res;
 		}
+	}
+
d12 2
a13 2
 	}
 
d15 2
@


1.1.2.3
log
@Security fixes:
ASA-2007-011, http://bugs.digium.com/view.php?id=9313:
Multiple problems in SIP channel parser handling response codes

ASA-2007-012:
Remote Crash Vulnerability in Manager Interface
@
text
@d1 1
a1 1
$OpenBSD: patch-channels_chan_sip_c,v 1.1.2.2 2007/03/23 07:26:47 sturm Exp $
d3 1
a3 1
+++ channels/chan_sip.c	Sat May  5 09:57:49 2007
a19 28
@@@@ -11114,17 +11116,17 @@@@ static int handle_request(struct sip_pvt
 			/* ignore means "don't do anything with it" but still have to 
 			   respond appropriately  */
 			ignore=1;
+		} else if (e) {
+			e = ast_skip_blanks(e);
+			if (sscanf(e, "%d %n", &respid, &len) != 1) {
+				ast_log(LOG_WARNING, "Invalid response: '%s'\n", e);
+			} else {
+				/* More SIP ridiculousness, we have to ignore bogus contacts in 100 etc responses */
+				if ((respid == 200) || ((respid >= 300) && (respid <= 399)))
+					extract_uri(p, req);
+				handle_response(p, respid, e + len, req, ignore, seqno);
+			}
 		}
-	
-		e = ast_skip_blanks(e);
-		if (sscanf(e, "%d %n", &respid, &len) != 1) {
-			ast_log(LOG_WARNING, "Invalid response: '%s'\n", e);
-		} else {
-			/* More SIP ridiculousness, we have to ignore bogus contacts in 100 etc responses */
-			if ((respid == 200) || ((respid >= 300) && (respid <= 399)))
-				extract_uri(p, req);
-			handle_response(p, respid, e + len, req, ignore, seqno);
-		}
 		return 0;
 	}
 
@


1.1.2.4
log
@- backport some security fixes for
ASA-2007-014 - Stack Buffer Overflow in IAX2 channel driver
ASA-2007-015 - Remote Crash Vulnerability in IAX2 Channel Driver
ASA-2007-016 - Remote Crash Vulnerability in Skinny channel driver from version 1.2.22

All work and testing by Stuart Henderson

ok sturm@@
@
text
@d1 4
a4 4
$OpenBSD: patch-channels_chan_sip_c,v 1.1.2.3 2007/05/05 08:22:00 sturm Exp $
--- channels/chan_sip.c.orig	Tue Jul 31 14:52:50 2007
+++ channels/chan_sip.c	Tue Jul 31 14:42:52 2007
@@@@ -3587,6 +3587,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
d12 1
a12 1
@@@@ -3615,6 +3616,7 @@@@ static int process_sdp(struct sip_pvt *p, struct sip_r
d20 1
a20 1
@@@@ -11114,17 +11116,17 @@@@ static int handle_request(struct sip_pvt *p, struct si
d48 1
a48 1
@@@@ -11179,6 +11181,12 @@@@ static int handle_request(struct sip_pvt *p, struct si
@


