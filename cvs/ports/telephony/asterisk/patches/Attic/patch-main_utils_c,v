head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_0:1.1.0.4
	OPENBSD_4_8:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.10.12.22.07.29;	author sthen;	state dead;
branches;
next	1.2;
commitid	s4D60mgjUjajPmDX;

1.2
date	2015.05.05.12.47.02;	author sthen;	state Exp;
branches;
next	1.1;
commitid	atUBlwpjjcKqeYLq;

1.1
date	2011.01.22.09.21.56;	author sthen;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2011.01.22.09.21.56;	author sthen;	state Exp;
branches;
next	;

1.1.4.1
date	2012.03.16.10.28.48;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to asterisk-13.6.0

this is a major update - upgrading users should review UPGRADE-12.txt and
UPGRADE.txt in /usr/local/share/doc/asterisk. some configurations will work
unchanged, but there have been big changes in other areas, notably AMI,
CDR and CEL.
@
text
@$OpenBSD: patch-main_utils_c,v 1.2 2015/05/05 12:47:02 sthen Exp $

Store p_tid that can be tied through to gdb or kern_procinfo.

--- main/utils.c.orig	Tue Mar 17 22:28:41 2015
+++ main/utils.c	Tue May  5 13:35:32 2015
@@@@ -2441,6 +2441,8 @@@@ int ast_get_tid(void)
 	long lwpid;
 	thr_self(&lwpid); /* available since sys/thr.h creation 2003 */
 	ret = lwpid;
+#elif defined(__OpenBSD__)
+	ret = getthrid();
 #endif
 	return ret;
 }
@


1.2
log
@Store the TID for "core show threads". Nice clue from jca@@, thanks!
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-main_utils_c was initially added on branch OPENBSD_4_8.
@
text
@d1 15
@


1.1.4.1
log
@add upstream patches to asterisk in 5.0-stable to fix recent security problems:

AST-2012-002: stack buffer overflow (remote unauthenticated sessions).
requires a dialplan using the Milliwatt application with the 'o' option,
and internal_timing off.  Affects all 1.4+ Asterisk versions.

AST-2012-003: stack buffer overflow (remote unauth'd sessions) in HTTP
manager interface; triggered by long digest authentication strings.
Code injection possibility.  Affects 1.8+.
@
text
@a0 156
$OpenBSD$

AST-2012-003: Stack Buffer Overflow in HTTP Manager
http://downloads.asterisk.org/pub/security/AST-2012-003-1.8.diff

--- main/utils.c.orig	Thu Jun  9 15:06:42 2011
+++ main/utils.c	Fri Mar 16 00:01:27 2012
@@@@ -1988,10 +1988,29 @@@@ int ast_utils_init(void)
  * pedantic arg can be set to nonzero if we need to do addition Digest check.
  */
 int ast_parse_digest(const char *digest, struct ast_http_digest *d, int request, int pedantic) {
-	int i;
-	char *c, key[512], val[512];
+	char *c;
 	struct ast_str *str = ast_str_create(16);
 
+	/* table of recognised keywords, and places where they should be copied */
+	const struct x {
+		const char *key;
+		const ast_string_field *field;
+	} *i, keys[] = {
+		{ "username=", &d->username },
+		{ "realm=", &d->realm },
+		{ "nonce=", &d->nonce },
+		{ "uri=", &d->uri },
+		{ "domain=", &d->domain },
+		{ "response=", &d->response },
+		{ "cnonce=", &d->cnonce },
+		{ "opaque=", &d->opaque },
+		/* Special cases that cannot be directly copied */
+		{ "algorithm=", NULL },
+		{ "qop=", NULL },
+		{ "nc=", NULL },
+		{ NULL, 0 },
+	};
+
 	if (ast_strlen_zero(digest) || !d || !str) {
 		ast_free(str);
 		return -1;
@@@@ -2009,72 +2028,55 @@@@ int ast_parse_digest(const char *digest, struct ast_ht
 	c += strlen("Digest ");
 
 	/* lookup for keys/value pair */
-	while (*c && *(c = ast_skip_blanks(c))) {
+	while (c && *c && *(c = ast_skip_blanks(c))) {
 		/* find key */
-		i = 0;
-		while (*c && *c != '=' && *c != ',' && !isspace(*c)) {
-			key[i++] = *c++;
-		}
-		key[i] = '\0';
-		c = ast_skip_blanks(c);
-		if (*c == '=') {
-			c = ast_skip_blanks(++c);
-			i = 0;
-			if (*c == '\"') {
-				/* in quotes. Skip first and look for last */
-				c++;
-				while (*c && *c != '\"') {
-					if (*c == '\\' && c[1] != '\0') { /* unescape chars */
-						c++;
-					}
-					val[i++] = *c++;
-				}
-			} else {
-				/* token */
-				while (*c && *c != ',' && !isspace(*c)) {
-					val[i++] = *c++;
-				}
+		for (i = keys; i->key != NULL; i++) {
+			char *src, *separator;
+			int unescape = 0;
+			if (strncasecmp(c, i->key, strlen(i->key)) != 0) {
+				continue;
 			}
-			val[i] = '\0';
-		}
 
-		while (*c && *c != ',') {
-			c++;
-		}
-		if (*c) {
-			c++;
-		}
-
-		if (!strcasecmp(key, "username")) {
-			ast_string_field_set(d, username, val);
-		} else if (!strcasecmp(key, "realm")) {
-			ast_string_field_set(d, realm, val);
-		} else if (!strcasecmp(key, "nonce")) {
-			ast_string_field_set(d, nonce, val);
-		} else if (!strcasecmp(key, "uri")) {
-			ast_string_field_set(d, uri, val);
-		} else if (!strcasecmp(key, "domain")) {
-			ast_string_field_set(d, domain, val);
-		} else if (!strcasecmp(key, "response")) {
-			ast_string_field_set(d, response, val);
-		} else if (!strcasecmp(key, "algorithm")) {
-			if (strcasecmp(val, "MD5")) {
-				ast_log(LOG_WARNING, "Digest algorithm: \"%s\" not supported.\n", val);
-				return -1;
+			/* Found. Skip keyword, take text in quotes or up to the separator. */
+			c += strlen(i->key);
+			if (*c == '"') {
+				src = ++c;
+				separator = "\"";
+				unescape = 1;
+			} else {
+				src = c;
+				separator = ",";
 			}
-		} else if (!strcasecmp(key, "cnonce")) {
-			ast_string_field_set(d, cnonce, val);
-		} else if (!strcasecmp(key, "opaque")) {
-			ast_string_field_set(d, opaque, val);
-		} else if (!strcasecmp(key, "qop") && !strcasecmp(val, "auth")) {
-			d->qop = 1;
-		} else if (!strcasecmp(key, "nc")) {
-			unsigned long u;
-			if (sscanf(val, "%30lx", &u) != 1) {
-				ast_log(LOG_WARNING, "Incorrect Digest nc value: \"%s\".\n", val);
-				return -1;
+			strsep(&c, separator); /* clear separator and move ptr */
+			if (unescape) {
+				ast_unescape_c(src);
 			}
-			ast_string_field_set(d, nc, val);
+			if (i->field) {
+				ast_string_field_ptr_set(d, i->field, src);
+			} else {
+				/* Special cases that require additional procesing */
+				if (!strcasecmp(i->key, "algorithm=")) {
+					if (strcasecmp(src, "MD5")) {
+						ast_log(LOG_WARNING, "Digest algorithm: \"%s\" not supported.\n", src);
+						ast_free(str);
+						return -1;
+					}
+				} else if (!strcasecmp(i->key, "qop=") && !strcasecmp(src, "auth")) {
+					d->qop = 1;
+				} else if (!strcasecmp(i->key, "nc=")) {
+					unsigned long u;
+					if (sscanf(src, "%30lx", &u) != 1) {
+						ast_log(LOG_WARNING, "Incorrect Digest nc value: \"%s\".\n", src);
+						ast_free(str);
+						return -1;
+					}
+					ast_string_field_set(d, nc, src);
+				}
+			}
+			break;
+		}
+		if (i->key == NULL) { /* not found, try ',' */
+			strsep(&c, ",");
 		}
 	}
 	ast_free(str);
@


1.1.2.1
log
@- Add a patch to -stable to fix the AST-2011-001 security problem
(a stack buffer overflow in URI encoding, triggered by crafted caller
ID information when generating outgoing SIP calls, by the uriencode
dialplan function, and possibly with the AGI dialplan application).
http://downloads.asterisk.org/pub/security/AST-2011-001.html

- MFC: use correct user/group names in sample config.

ok william@@ ajacoutot@@
@
text
@a0 45
$OpenBSD$
--- main/utils.c	(revision 301306)
+++ main/utils.c	(revision 301307)
@@@@ -386,28 +386,27 @@@@
 	char *reserved = ";/?:@@&=+$,# ";	/* Reserved chars */
 
  	const char *ptr  = string;	/* Start with the string */
-	char *out = NULL;
-	char *buf = NULL;
+	char *out = outbuf;
 
-	ast_copy_string(outbuf, string, buflen);
-
-	/* If there's no characters to convert, just go through and don't do anything */
-	while (*ptr) {
+	/* If there's no characters to convert, just go through and copy the string */
+	while (*ptr && out - outbuf < buflen - 1) {
 		if ((*ptr < 32) || (doreserved && strchr(reserved, *ptr))) {
-			/* Oops, we need to start working here */
-			if (!buf) {
-				buf = outbuf;
-				out = buf + (ptr - string) ;	/* Set output ptr */
+			if (out - outbuf >= buflen - 3) {
+				break;
 			}
+
 			out += sprintf(out, "%%%02x", (unsigned char) *ptr);
-		} else if (buf) {
-			*out = *ptr;	/* Continue copying the string */
+		} else {
+			*out = *ptr;	/* copy the character */
 			out++;
-		} 
+		}
 		ptr++;
 	}
-	if (buf)
+
+	if (buflen) {
 		*out = '\0';
+	}
+
 	return outbuf;
 }

@

