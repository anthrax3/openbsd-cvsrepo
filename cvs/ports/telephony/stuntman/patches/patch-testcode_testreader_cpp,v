head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.05.27.22.50.31;	author sthen;	state Exp;
branches;
next	1.1;
commitid	KlGkUVXJWFCIOHYG;

1.1
date	2013.12.24.13.57.18;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to stuntman-1.2.9, from maintainer Roman Kravchuk
@
text
@$OpenBSD: patch-testcode_testreader_cpp,v 1.1 2013/12/24 13:57:18 sthen Exp $
--- testcode/testreader.cpp.orig	Sun Jan 17 03:58:21 2016
+++ testcode/testreader.cpp	Fri May 27 17:53:20 2016
@@@@ -128,7 +128,9 @@@@ HRESULT CTestReader::Test2()
         Chk(TestFixedReadSizes(chunksize));
     }
 
+#ifndef HAVE_ARC4RANDOM
     srand(888);
+#endif
     for (size_t i = 0; i < 200; i++)
     {
         Chk(TestFixedReadSizes(0));
@@@@ -156,7 +158,11 @@@@ HRESULT CTestReader::TestFixedReadSizes(size_t chunksi
         
         if (fRandomChunkSizing)
         {
+#ifdef HAVE_ARC4RANDOM
+            chunksize = arc4random_uniform(17) + 1;
+#else
             chunksize = (rand() % 17) + 1;
+#endif
         }
         
         remaining = msgSize - bytesread;
@


1.1
log
@Update to stuntman 1.2.5, add patches to use arc4random.
From maintainer Roman Kravchuk.
@
text
@d1 4
a4 4
$OpenBSD$
--- testcode/testreader.cpp.orig	Sun Jun 23 20:45:16 2013
+++ testcode/testreader.cpp	Sat Dec 21 15:58:18 2013
@@@@ -130,7 +130,9 @@@@ HRESULT CTestReader::Test2()
d14 1
a14 1
@@@@ -158,7 +160,11 @@@@ HRESULT CTestReader::TestFixedReadSizes(size_t chunksi
@

