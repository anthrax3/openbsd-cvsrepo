head	1.3;
access;
symbols
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.09.04.22.51.24;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2003.12.30.05.57.30;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.10.02.59.35;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@upgrade to MySQL 4.1.14
@
text
@$OpenBSD: patch-include_m_ctype_h,v 1.2 2003/12/30 05:57:30 brad Exp $
--- include/m_ctype.h.orig	2003-12-14 16:23:48.000000000 -0500
+++ include/m_ctype.h	2003-12-21 01:53:42.000000000 -0500
@@@@ -89,6 +89,15 @@@@ extern const char *compiled_charset_name
 #undef isascii
 #undef toascii
 
+#undef _U
+#undef _L
+#undef _N
+#undef _S
+#undef _P
+#undef _C
+#undef _B
+#undef _X
+
 #define	_U	01	/* Upper case */
 #define	_L	02	/* Lower case */
 #define	_NMR	04	/* Numeral (digit) */
@


1.2
log
@upgrade to MySQL 4.0.17

LOTS of people have asked for this so here is my work in progress.
test as much as possible.
@
text
@d1 1
a1 1
$OpenBSD: patch-include_m_ctype_h,v 1.1 2001/09/10 02:59:35 brad Exp $
@


1.1
log
@upgrade to MySQL 3.23.42
@
text
@d1 6
a6 6
$OpenBSD$
--- include/m_ctype.h.orig	Sat Sep  8 15:08:15 2001
+++ include/m_ctype.h	Sun Sep  9 20:12:00 2001
@@@@ -71,6 +71,15 @@@@ extern CHARSET_INFO  compiled_charsets[]
 #define __CTYPE_INCLUDED
 #define _CTYPE_USING   /* Don't put names in global namespace. */
d19 1
a19 31
 #define	_N	04	/* Numeral (digit) */
@@@@ -86,11 +95,29 @@@@ extern CHARSET_INFO  compiled_charsets[]
 #define my_sort_order	(default_charset_info->sort_order)
 
 #ifndef __WIN__
+#undef _toupper
 #define	_toupper(c)	(char) my_to_upper[(uchar) (c)]
+#undef _tolower
 #define	_tolower(c)	(char) my_to_lower[(uchar) (c)]
+
+#undef toupper
+#undef tolower
 #define toupper(c)	(char) my_to_upper[(uchar) (c)]
 #define tolower(c)	(char) my_to_lower[(uchar) (c)]
 
+#undef isalpha
+#undef isupper
+#undef islower
+#undef isdigit
+#undef isxdigit
+#undef isalnum
+#undef isspace
+#undef ispunct
+#undef isprint
+#undef isgraph
+#undef iscntrl
+#undef isascii
+#undef toascii
 #define	isalpha(c)	((my_ctype+1)[(uchar) (c)] & (_U | _L))
 #define	isupper(c)	((my_ctype+1)[(uchar) (c)] & _U)
 #define	islower(c)	((my_ctype+1)[(uchar) (c)] & _L)
@

