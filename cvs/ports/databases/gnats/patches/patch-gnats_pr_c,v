head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.40
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.38
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.32
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.30
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.20
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.18
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.16
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.14
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.12
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.10
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.12.28.17.11.25;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.25.23.33.56;	author brad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.12.12.20.08.39;	author pvalchev;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.08.26.00.33.35;	author brad;	state Exp;
branches;
next	;

1.2.2.1
date	2003.08.26.01.03.22;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@regen with a more recent diff.
Remove extra bogus target that breaks in parallel mode.
@
text
@$OpenBSD: patch-gnats_pr_c,v 1.2 2003/08/25 23:33:56 brad Exp $
--- gnats/pr.c.orig	Wed Mar  3 01:18:54 1999
+++ gnats/pr.c	Fri Dec 28 18:00:24 2007
@@@@ -205,7 +205,7 @@@@ read_pr (fp, prune)
 	      u = unformatted + unformatted_len;
 	    }
 
-	  strcat (u, pr[UNFORMATTED].value);
+	  strlcat (u, pr[UNFORMATTED].value, unformatted + unformatted_size - u);
 	  xfree (pr[UNFORMATTED].value);
 	}
 
@@@@ -293,14 +293,14 @@@@ write_pr (fp, string)
 	{
 	  if (pr[string].datatype == MultiText)
 	    {
-              sprintf (fmt, "%%s%s", ret);
+              snprintf (fmt, sizeof(fmt), "%%s%s", ret);
               fprintf (fp, fmt, pr[string].name, pr[string].value);
               write_multitext (fp, pr[i].value);
 	      MAYBE_NL(pr[string].value);
 	    }
           else
             {
-              sprintf (fmt, "%%-16s %%s%s", ret);
+              snprintf (fmt, sizeof(fmt), "%%-16s %%s%s", ret);
               fprintf (fp, fmt, pr[string].name, pr[string].value);
             }
 	}
@@@@ -338,7 +338,7 @@@@ write_pr_from_index (fp, name, value)
   char   fmt[10], *t;
   time_t time;
 
-  sprintf (fmt, "%%-16s %%s%s", ret);
+  snprintf (fmt, sizeof(fmt), "%%-16s %%s%s", ret);
 
   if (pr[name].datatype == Date)
     {
@@@@ -367,9 +367,9 @@@@ get_pr_enum_field (filename, default_value)
   int len = 0, capacity = 80;
   int meaningful_line;
   FILE *fp;
-  char c;
+  int c;
   
-  sprintf (path, "%s/gnats-adm/%s", gnats_root, filename);
+  snprintf (path, PATH_MAX, "%s/gnats-adm/%s", gnats_root, filename);
   fp = fopen (path, "r");
 
   if (fp == NULL)
@@@@ -531,7 +531,7 @@@@ get_final_enum_value (list_str, default_value)
      char *default_value;
 {
   char *res = NULL;
-  char *tmp, *end;
+  char *tmp;
   
   if (list_str == NULL)
     return default_value;
@@@@ -751,9 +751,9 @@@@ check_enum_types (check)
 	    {
 	      if (check)
 		{
-		  char *msg = (char *) xmalloc (100 + strlen (pr[i].value)
-						+ strlen (pr[i].name)
-						+ strlen (pr[i].default_value));
+		  size_t len = 100 + strlen (pr[i].value) + strlen (pr[i].name)
+			       + strlen (pr[i].default_value);
+		  char *msg = (char *) xmalloc (len);
 		  if (bad_enums == NULL)
 		    bad_enums = bad_enums_end
 		    = (struct bad_enum *) xmalloc (sizeof (struct bad_enum));
@@@@ -765,15 +765,15 @@@@ check_enum_types (check)
 		    }
 
 		  if (check == 1)
-		    sprintf (msg,
+		    snprintf (msg, len,
 			     "\tNote: There was a bad value `%s' for the field `%s'.\n\tIt was set to the default value of `%s'.\n",
 			     pr[i].value, pr[i].name, pr[i].default_value);
 		  else if (check == 2)
                     {
                       if (is_daemon)
-		        sprintf (msg, "%s %s", pr[i].name, pr[i].value);
+		        snprintf (msg, len, "%s %s", pr[i].name, pr[i].value);
                       else
-		        sprintf (msg, "%s %s\n", pr[i].name, pr[i].value);
+		        snprintf (msg, len, "%s %s\n", pr[i].name, pr[i].value);
                     }
 
 		  bad_enums_end->msg = msg;
@


1.2
log
@Fix some security issues with gnats.

Some additional fixes from millert@@
sprintf -> snprintf
str{cat,cpy} -> strl{cat,cpy}

http://marc.theaimsgroup.com/?l=bugtraq&m=105638591907836&w=2

ok naddy@@
@
text
@d1 3
a3 3
$OpenBSD: patch-gnats_pr_c,v 1.1 2002/12/12 20:08:39 pvalchev Exp $
--- gnats/pr.c.orig	Tue Mar  2 17:18:54 1999
+++ gnats/pr.c	Wed Jul  2 13:23:13 2003
d39 1
a39 1
@@@@ -367,9 +367,9 @@@@ get_pr_enum_field (filename, default_val
d51 1
a51 1
@@@@ -531,7 +531,7 @@@@ get_final_enum_value (list_str, default_
@


1.2.2.1
log
@MFC:
Fix some security issues with gnats.

Some additional fixes from millert@@
sprintf -> snprintf
str{cat,cpy} -> strl{cat,cpy}

http://marc.theaimsgroup.com/?l=bugtraq&m=105638591907836&w=2
@
text
@d1 1
a1 1
$OpenBSD: patch-gnats_pr_c,v 1.2 2003/08/25 23:33:56 brad Exp $
@


1.1
log
@getc() returns int, not char - especially avoid problem on arches
where 'char' is unsigned and error returned; ok dugsong millert
@
text
@d1 39
a39 4
$OpenBSD$
--- gnats/pr.c.orig	Thu Dec 12 00:55:26 2002
+++ gnats/pr.c	Thu Dec 12 00:56:30 2002
@@@@ -367,7 +367,7 @@@@ get_pr_enum_field (filename, default_val
d46 2
a47 1
   sprintf (path, "%s/gnats-adm/%s", gnats_root, filename);
d49 43
@


1.1.2.1
log
@MFC:
Fix some security issues with gnats.

Some additional fixes from millert@@
sprintf -> snprintf
str{cat,cpy} -> strl{cat,cpy}

http://marc.theaimsgroup.com/?l=bugtraq&m=105638591907836&w=2
@
text
@d1 4
a4 39
$OpenBSD: patch-gnats_pr_c,v 1.2 2003/08/25 23:33:56 brad Exp $
--- gnats/pr.c.orig	Tue Mar  2 17:18:54 1999
+++ gnats/pr.c	Wed Jul  2 13:23:13 2003
@@@@ -205,7 +205,7 @@@@ read_pr (fp, prune)
 	      u = unformatted + unformatted_len;
 	    }
 
-	  strcat (u, pr[UNFORMATTED].value);
+	  strlcat (u, pr[UNFORMATTED].value, unformatted + unformatted_size - u);
 	  xfree (pr[UNFORMATTED].value);
 	}
 
@@@@ -293,14 +293,14 @@@@ write_pr (fp, string)
 	{
 	  if (pr[string].datatype == MultiText)
 	    {
-              sprintf (fmt, "%%s%s", ret);
+              snprintf (fmt, sizeof(fmt), "%%s%s", ret);
               fprintf (fp, fmt, pr[string].name, pr[string].value);
               write_multitext (fp, pr[i].value);
 	      MAYBE_NL(pr[string].value);
 	    }
           else
             {
-              sprintf (fmt, "%%-16s %%s%s", ret);
+              snprintf (fmt, sizeof(fmt), "%%-16s %%s%s", ret);
               fprintf (fp, fmt, pr[string].name, pr[string].value);
             }
 	}
@@@@ -338,7 +338,7 @@@@ write_pr_from_index (fp, name, value)
   char   fmt[10], *t;
   time_t time;
 
-  sprintf (fmt, "%%-16s %%s%s", ret);
+  snprintf (fmt, sizeof(fmt), "%%-16s %%s%s", ret);
 
   if (pr[name].datatype == Date)
     {
@@@@ -367,9 +367,9 @@@@ get_pr_enum_field (filename, default_val
d11 1
a11 2
-  sprintf (path, "%s/gnats-adm/%s", gnats_root, filename);
+  snprintf (path, PATH_MAX, "%s/gnats-adm/%s", gnats_root, filename);
a12 43
 
   if (fp == NULL)
@@@@ -531,7 +531,7 @@@@ get_final_enum_value (list_str, default_
      char *default_value;
 {
   char *res = NULL;
-  char *tmp, *end;
+  char *tmp;
   
   if (list_str == NULL)
     return default_value;
@@@@ -751,9 +751,9 @@@@ check_enum_types (check)
 	    {
 	      if (check)
 		{
-		  char *msg = (char *) xmalloc (100 + strlen (pr[i].value)
-						+ strlen (pr[i].name)
-						+ strlen (pr[i].default_value));
+		  size_t len = 100 + strlen (pr[i].value) + strlen (pr[i].name)
+			       + strlen (pr[i].default_value);
+		  char *msg = (char *) xmalloc (len);
 		  if (bad_enums == NULL)
 		    bad_enums = bad_enums_end
 		    = (struct bad_enum *) xmalloc (sizeof (struct bad_enum));
@@@@ -765,15 +765,15 @@@@ check_enum_types (check)
 		    }
 
 		  if (check == 1)
-		    sprintf (msg,
+		    snprintf (msg, len,
 			     "\tNote: There was a bad value `%s' for the field `%s'.\n\tIt was set to the default value of `%s'.\n",
 			     pr[i].value, pr[i].name, pr[i].default_value);
 		  else if (check == 2)
                     {
                       if (is_daemon)
-		        sprintf (msg, "%s %s", pr[i].name, pr[i].value);
+		        snprintf (msg, len, "%s %s", pr[i].name, pr[i].value);
                       else
-		        sprintf (msg, "%s %s\n", pr[i].name, pr[i].value);
+		        snprintf (msg, len, "%s %s\n", pr[i].name, pr[i].value);
                     }
 
 		  bad_enums_end->msg = msg;
@


