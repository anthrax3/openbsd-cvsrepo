head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2003.01.28.22.15.38;	author wilfried;	state dead;
branches;
next	1.2;

1.2
date	2002.12.16.14.55.37;	author wilfried;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.05.15.55.49;	author wilfried;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to mysqlcc-0.8.9

Fixed a Security Bug under Unix / Linux platforms;  Previously, all
configuration and connection files where world-readable.

Various other bugfixes
@
text
@$OpenBSD: patch-src_CMySQLQuery_cpp,v 1.2 2002/12/16 14:55:37 wilfried Exp $
--- src/CMySQLQuery.cpp.orig	Fri Dec  6 00:06:57 2002
+++ src/CMySQLQuery.cpp	Mon Dec 16 14:59:15 2002
@@@@ -37,6 +37,7 @@@@
 
 #define PROCESS_EVENT 35
 
+#if defined(QT_THREAD_SUPPORT)
 CMySQLQuery::QueryThread::QueryThread(MYSQL *m, const char *q, ulong l)
 : QThread(), m_mysql(m), qry((char *) q), len(l)
 {
@@@@ -55,6 +56,7 @@@@ void CMySQLQuery::QueryThread::run()
   
   res = (mysql_real_query(m_mysql, qry, len) == 0);
 }
+#endif
 
 CMySQLQuery::CMySQLQuery(CMySQL *m)
 : QObject(0, "CMySQLQuery")
@


1.2
log
@update to mysqlcc-0.8.7
@
text
@d1 1
a1 1
$OpenBSD: patch-src_CMySQLQuery_cpp,v 1.1 2002/11/05 15:55:49 wilfried Exp $
@


1.1
log
@update to mysqlcc-0.8.6

This program will now be referred to as "MySQL Control Center", not
"MyCC". The name of the executable file has changed from "MyCC" to
"mysqlcc" and so have all the config directories.
@
text
@d1 7
a7 23
$OpenBSD$
--- src/CMySQLQuery.cpp.orig	Sat Nov  2 14:47:25 2002
+++ src/CMySQLQuery.cpp	Mon Nov  4 18:53:33 2002
@@@@ -33,6 +33,7 @@@@
 
 #define PROCESS_EVENT 35
 
+#if defined(QT_THREAD_SUPPORT)
 CMySQLQuery::QueryThread::QueryThread(MYSQL *m, const char *q, ulong l)
 : QThread(), m_mysql(m), qry((char *) q), len(l)
 {
@@@@ -51,6 +52,7 @@@@ void CMySQLQuery::QueryThread::run()
   
   res = (mysql_real_query(m_mysql, qry, len) == 0);
 }
+#endif
 
 CMySQLQuery::CMySQLQuery(CMySQL *m)
 : QObject(0, "CMySQLQuery")
@@@@ -149,6 +151,7 @@@@ bool CMySQLQuery::execRealStaticQuery(co
   }  
   QTime tm;
   tm.start();
d9 7
a15 14
   QueryThread queryThread(m_mysql->mysql, qry, len);
   queryThread.start();
   queryThread.wait();
@@@@ -159,6 +162,14 @@@@ bool CMySQLQuery::execRealStaticQuery(co
       m_mysql->emitError();
     return false;
   }
+#else
+  if (mysql_real_query(m_mysql->mysql, qry, len) != 0)
+  {
+    if (emiterror)
+      m_mysql->emitError();
+    return false;
+  }
d17 3
a19 26
   mysql_res = NULL;
   num_fields = 0;
   last_query = qry;
@@@@ -205,6 +216,7 @@@@ bool CMySQLQuery::execRealQuery(const ch
   QTime tm;
   tm.start();
 
+#if defined(QT_THREAD_SUPPORT)
   QueryThread queryThread(m_mysql->mysql, qry, len);
   queryThread.start();
   queryThread.wait();
@@@@ -215,6 +227,14 @@@@ bool CMySQLQuery::execRealQuery(const ch
       m_mysql->emitError();
     return false;
   }
+#else
+  if (mysql_real_query(m_mysql->mysql, qry, len) != 0)
+  {
+    if (emiterror)
+      m_mysql->emitError();
+    return false;
+  }
+#endif
 
   if (!(mysql_res=mysql_store_result(m_mysql->mysql)))
   {
@

