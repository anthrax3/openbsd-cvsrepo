head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.54
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.52
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.48
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.50
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.46
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.44
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.42
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.26
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.24
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2004.01.10.08.36.28;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@use tcl 8.4
fix packaging on NO_SHARED_ARCHS
bump PKGNAME
@
text
@$OpenBSD$
--- tcl/tcl_lock.c.orig	2004-01-08 23:28:00.000000000 +0100
+++ tcl/tcl_lock.c	2004-01-08 23:28:47.000000000 +0100
@@@@ -78,7 +78,7 @@@@ tcl_LockDetect(interp, objc, objv, envp)
 	i = 2;
 	while (i < objc) {
 		if (Tcl_GetIndexFromObj(interp, objv[i],
-		    ldopts, "option", TCL_EXACT, &optindex) != TCL_OK)
+		    (CONST84 char **)ldopts, "option", TCL_EXACT, &optindex) != TCL_OK)
 			return(IS_HELP(objv[i]));
 		i++;
 		switch ((enum ldopts)optindex) {
@@@@ -181,7 +181,7 @@@@ tcl_LockGet(interp, objc, objv, envp)
 	flag = 0;
 	if (objc == 6) {
 		if (Tcl_GetIndexFromObj(interp, objv[(objc - 4)],
-		    lgopts, "option", TCL_EXACT, &optindex) != TCL_OK)
+		    (CONST84 char **)lgopts, "option", TCL_EXACT, &optindex) != TCL_OK)
 			return (IS_HELP(objv[(objc - 4)]));
 		switch ((enum lgopts)optindex) {
 		case LGNOWAIT:
@@@@ -302,7 +302,7 @@@@ lock_Cmd(clientData, interp, objc, objv)
 	 * defined above.
 	 */
 	if (Tcl_GetIndexFromObj(interp,
-	    objv[1], lkcmds, "command", TCL_EXACT, &cmdindex) != TCL_OK)
+	    objv[1], (CONST84 char **)lkcmds, "command", TCL_EXACT, &cmdindex) != TCL_OK)
 		return (IS_HELP(objv[1]));
 
 	switch ((enum lkcmds)cmdindex) {
@@@@ -361,7 +361,7 @@@@ tcl_LockVec(interp, objc, objv, envp)
 	 * If -nowait is given, it MUST be first arg.
 	 */
 	if (Tcl_GetIndexFromObj(interp, objv[2],
-	    lvopts, "option", TCL_EXACT, &optindex) == TCL_OK) {
+	    (CONST84 char **)lvopts, "option", TCL_EXACT, &optindex) == TCL_OK) {
 		switch ((enum lvopts)optindex) {
 		case LVNOWAIT:
 			flag |= DB_LOCK_NOWAIT;
@@@@ -407,7 +407,7 @@@@ tcl_LockVec(interp, objc, objv, envp)
 		 * the return list.
 		 */
 		if (Tcl_GetIndexFromObj(interp, myobjv[0],
-		    lkops, "option", TCL_EXACT, &optindex) != TCL_OK) {
+		    (CONST84 char **)lkops, "option", TCL_EXACT, &optindex) != TCL_OK) {
 			result = IS_HELP(myobjv[0]);
 			goto error;
 		}
@@@@ -527,7 +527,7 @@@@ _LockMode(interp, obj, mode)
 {
 	int optindex;
 
-	if (Tcl_GetIndexFromObj(interp, obj, lkmode, "option",
+	if (Tcl_GetIndexFromObj(interp, obj, (CONST84 char **)lkmode, "option",
 	    TCL_EXACT, &optindex) != TCL_OK)
 		return (IS_HELP(obj));
 	switch ((enum lkmode)optindex) {
@
