head	1.3;
access;
symbols
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.10.26.14.06.02;	author steven;	state dead;
branches;
next	1.2;

1.2
date	2005.10.16.00.11.00;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.27.21.05.25;	author pvalchev;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.05.28.21.42.30;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 4.6.21

with lots of testing by sthen@@
@
text
@$OpenBSD: patch-dbinc_mutex_h,v 1.2 2005/10/16 00:11:00 brad Exp $
--- dbinc/mutex.h.orig	Fri Oct 14 20:53:37 2005
+++ dbinc/mutex.h	Fri Oct 14 20:55:23 2005
@@@@ -578,33 +578,27 @@@@ typedef u_int32_t tsl_t;
  * 'set' mutexes have the value 1, like on Intel; the returned value from
  * MUTEX_SET() is 1 if the mutex previously had its low bit clear, 0 otherwise.
  */
-#ifdef HAVE_MUTEX_PPC_GCC_ASSEMBLY
-static inline int
-MUTEX_SET(int *tsl)  {
-         int __r;
-         asm volatile (
-"0:                             \n\t"
-"       lwarx   %0,0,%1         \n\t"
-"       cmpwi   %0,0            \n\t"
-"       bne-    1f              \n\t"
-"       stwcx.  %1,0,%1         \n\t"
-"       isync                   \n\t"
-"       beq+    2f              \n\t"
-"       b       0b              \n\t"
-"1:                             \n\t"
-"       li      %1, 0           \n\t"
-"2:                             \n\t"
-         : "=&r" (__r), "+r" (tsl)
-         :
-         : "cr0", "memory");
-         return (int)tsl;
-}
-#endif
-static inline int
-MUTEX_UNSET(tsl_t *tsl) {
-         asm volatile("sync" : : : "memory");
-         return *tsl = 0;
-}
+#define MUTEX_SET(tsl)  ({			\
+	int __one = 1;				\
+	int __r;				\
+	tsl_t *__l = (tsl);			\
+	asm volatile ("				\
+0:						\
+	lwarx %0,0,%1;				\
+	cmpwi %0,0;				\
+	bne 1f;					\
+	stwcx. %2,0,%1;				\
+	bne- 0b;				\
+	isync;					\
+1:"						\
+	: "=&r" (__r)				\
+	: "r" (__l), "r" (__one));		\
+	!(__r & 1);				\
+})
+#define MUTEX_UNSET(tsl) ({			\
+	asm volatile("lwsync":::"memory");	\
+	(*(tsl) = 0);				\
+})
 #define	MUTEX_INIT(tsl)		MUTEX_UNSET(tsl)
 #endif
 #endif
@


1.2
log
@put in replacement mutex code for powerpc. resolves issues previously
reported with Cyrus and powerpc.

From: Evolution's CVS repo via Stuart Henderson <stu at spacehopper dot org>
@
text
@d1 1
a1 1
$OpenBSD: patch-dbinc_mutex_h,v 1.1 2004/05/27 21:05:25 pvalchev Exp $
@


1.1
log
@remove powerpc workaround and add patch for the mutex issue
provided by sleepycat via Philippe Lelédy <phl@@leledy.org>
@
text
@d1 4
a4 4
$OpenBSD$
--- dbinc/mutex.h.orig	2003-09-20 15:40:49.000000000 -0600
+++ dbinc/mutex.h	2004-05-27 14:51:44.000000000 -0600
@@@@ -578,28 +578,28 @@@@ typedef u_int32_t tsl_t;
d9 2
a10 2
 static inline int
 MUTEX_SET(int *tsl)  {
d13 1
a13 4
+          int __r;
+          int __tmp = (int)tsl;
+    asm volatile (
 "0:                             \n\t"
d15 2
a16 3
+"       lwarx   %0,0,%2         \n\t"
 "       cmpwi   %0,0            \n\t"
 "       bne-    1f              \n\t"
d18 6
a23 7
+"       stwcx.  %2,0,%2         \n\t"
 "       isync                   \n\t"
 "       beq+    2f              \n\t"
 "       b       0b              \n\t"
 "1:                             \n\t"
 "       li      %1, 0           \n\t"
 "2:                             \n\t"
d28 1
a28 5
+          : "=&r" (__r), "=r" (tsl)
+          : "r" (__tmp)
+          : "cr0", "memory");
+          return (int)tsl;
 }
d30 29
a58 4
+
 static inline int
 MUTEX_UNSET(tsl_t *tsl) {
          asm volatile("sync" : : : "memory");
@


1.1.2.1
log
@MFC:
remove powerpc workaround and add patch for the mutex issue
provided by sleepycat via Philippe Lelédy <phl@@leledy.org>
@
text
@d1 1
a1 1
$OpenBSD: patch-dbinc_mutex_h,v 1.1 2004/05/27 21:05:25 pvalchev Exp $
@

