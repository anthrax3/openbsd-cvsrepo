head	1.13;
access;
symbols
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.2
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3;
locks; strict;
comment	@# @;


1.13
date	2011.01.09.19.11.34;	author landry;	state dead;
branches;
next	1.12;

1.12
date	2010.04.02.20.07.11;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.03.09.55.47;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.12.23.20.52;	author simon;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.22.21.23.43;	author martynas;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.16.20.09.58;	author martynas;	state Exp;
branches;
next	1.7;

1.7
date	2009.04.05.00.02.54;	author martynas;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.23.00.33.03;	author jakemsr;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.31.15.49.34;	author simon;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.27.17.14.18;	author simon;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.23.17.31.17;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.27.03.49.35;	author jolan;	state dead;
branches;
next	1.1;

1.1
date	2005.09.17.22.05.39;	author jolan;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Major update to sqlite 3.7.4. Based on a diff from stu@@ for 3.7.3,
enables FTS3, SOUNDEX and RTREE options, remove the now non-relevant
'thread override lock' thing. Simplify Makefile a bit.
Tested by sthen@@ on arm, jasper@@ on mips64el, sebastia@@ on the vax
(yay!) and myself on sparc64/ppc/amd64.
ok sebastia@@ jasper@@ espie@@
@
text
@$OpenBSD: patch-src_os_unix_c,v 1.12 2010/04/02 20:07:11 sthen Exp $
--- src/os_unix.c.orig	Mon Mar  8 15:08:54 2010
+++ src/os_unix.c	Fri Mar 26 19:44:15 2010
@@@@ -109,6 +109,14 @@@@
 # define _LARGEFILE_SOURCE 1
 #endif
 
+/* PRNG device to use */
+#ifdef __OpenBSD__
+#define RAND_DEV "/dev/arandom"
+#else
+#define RAND_DEV "/dev/urandom"
+#endif
+
+
 /*
 ** standard include files.
 */
@@@@ -147,6 +155,9 @@@@
 #if SQLITE_THREADSAFE
 # include <pthread.h>
 # define SQLITE_UNIX_THREADS 1
+# if SQLITE_THREAD_OVERRIDE_LOCK != 1 || defined(SQLITE_TEST)
+#  define SQLITE_NEED_TID_CHECKS 1
+# endif
 #endif
 
 /*
@@@@ -210,7 +221,7 @@@@ struct unixFile {
 #if SQLITE_ENABLE_LOCKING_STYLE || defined(__APPLE__)
   unsigned fsFlags;                 /* cached details from statfs() */
 #endif
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
   pthread_t tid;                   /* The thread that "owns" this unixFile */
 #endif
 #if OS_VXWORKS
@@@@ -278,7 +289,7 @@@@ struct unixFile {
 ** The threadid macro resolves to the thread-id or to 0.  Used for
 ** testing and debugging only.
 */
-#if SQLITE_THREADSAFE
+#if SQLITE_NEED_TID_CHECKS
 #define threadid pthread_self()
 #else
 #define threadid 0
@@@@ -704,7 +715,7 @@@@ static void vxworksReleaseFileId(struct vxworksFileId 
 ** recomputed because its key includes the thread-id.  See the 
 ** transferOwnership() function below for additional information
 */
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
 # define SET_THREADID(X)   (X)->tid = pthread_self()
 # define CHECK_THREADID(X) (threadsOverrideEachOthersLocks==0 && \
                             !pthread_equal((X)->tid, pthread_self()))
@@@@ -739,7 +750,7 @@@@ struct unixFileId {
 */
 struct unixLockKey {
   struct unixFileId fid;  /* Unique identifier for the file */
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
   pthread_t tid;  /* Thread ID of lock owner. Zero if not using LinuxThreads */
 #endif
 };
@@@@ -816,7 +827,7 @@@@ static struct unixOpenCnt *openList = 0;
 ** it a global so that the test code can change its value in order to verify
 ** that the right stuff happens in either case.
 */
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
 #  ifndef SQLITE_THREAD_OVERRIDE_LOCK
 #    define SQLITE_THREAD_OVERRIDE_LOCK -1
 #  endif
@@@@ -837,7 +848,7 @@@@ struct threadTestData {
   int result;            /* Result of the locking operation */
 };
 
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
 /*
 ** This function is used as the main routine for a thread launched by
 ** testThreadLockingBehavior(). It tests whether the shared-lock obtained
@@@@ -855,7 +866,7 @@@@ static void *threadLockingTest(void *pArg){
 #endif /* SQLITE_THREADSAFE && defined(__linux__) */
 
 
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
 /*
 ** This procedure attempts to determine whether or not threads
 ** can override each others locks then sets the 
@@@@ -1025,7 +1036,7 @@@@ static int findLockInfo(
 #else
   lockKey.fid.ino = statbuf.st_ino;
 #endif
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
   if( threadsOverrideEachOthersLocks<0 ){
     testThreadLockingBehavior(fd);
   }
@@@@ -1098,7 +1109,7 @@@@ exit_findlockinfo:
 ** If the unixFile is locked and an ownership is wrong, then return
 ** SQLITE_MISUSE.  SQLITE_OK is returned if everything works.
 */
-#if SQLITE_THREADSAFE && defined(__linux__)
+#if SQLITE_NEED_TID_CHECKS
 static int transferOwnership(unixFile *pFile){
   int rc;
   pthread_t hSelf;
@@@@ -4385,7 +4396,7 @@@@ static void *unixDlOpen(sqlite3_vfs *NotUsed, const ch
 ** error message.
 */
 static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){
-  char *zErr;
+  const char *zErr;
   UNUSED_PARAMETER(NotUsed);
   unixEnterMutex();
   zErr = dlerror();
@@@@ -4451,7 +4462,7 @@@@ static int unixRandomness(sqlite3_vfs *NotUsed, int nB
 #if !defined(SQLITE_TEST)
   {
     int pid, fd;
-    fd = open("/dev/urandom", O_RDONLY);
+    fd = open(RAND_DEV, O_RDONLY);
     if( fd<0 ){
       time_t t;
       time(&t);
@


1.12
log
@Update to 3.6.23, much of this was done by Florent Tribouilloy and
espie@@ who adjusted things so the build doesn't depend on Tcl (which
was added as a build dependency in 3.6.17).
@
text
@d1 1
a1 1
$OpenBSD: patch-src_os_unix_c,v 1.11 2009/08/03 09:55:47 sthen Exp $
@


1.11
log
@Update SQLite to 3.6.16; ok martynas@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_os_unix_c,v 1.10 2009/05/12 23:20:52 simon Exp $
--- src/os_unix.c.orig	Thu Jun 25 12:45:58 2009
+++ src/os_unix.c	Sun Jun 28 14:40:40 2009
@@@@ -111,6 +111,14 @@@@
d19 1
a19 1
@@@@ -141,6 +149,9 @@@@
d29 3
a31 3
@@@@ -186,7 +197,7 @@@@ struct unixFile {
 #if SQLITE_ENABLE_LOCKING_STYLE
   int openFlags;                   /* The flags specified at open() */
d38 1
a38 1
@@@@ -254,7 +265,7 @@@@ struct unixFile {
d47 1
a47 1
@@@@ -664,7 +675,7 @@@@ static void vxworksReleaseFileId(struct vxworksFileId 
d56 1
a56 1
@@@@ -699,7 +710,7 @@@@ struct unixFileId {
d65 1
a65 1
@@@@ -774,7 +785,7 @@@@ static struct unixOpenCnt *openList = 0;
d74 1
a74 1
@@@@ -795,7 +806,7 @@@@ struct threadTestData {
d83 1
a83 1
@@@@ -813,7 +824,7 @@@@ static void *threadLockingTest(void *pArg){
d92 1
a92 1
@@@@ -958,7 +969,7 @@@@ static int findLockInfo(
d101 1
a101 1
@@@@ -1035,7 +1046,7 @@@@ exit_findlockinfo:
d110 1
a110 1
@@@@ -3937,7 +3948,7 @@@@ static void *unixDlOpen(sqlite3_vfs *NotUsed, const ch
d119 1
a119 1
@@@@ -4003,7 +4014,7 @@@@ static int unixRandomness(sqlite3_vfs *NotUsed, int nB
a127 9
@@@@ -4312,7 +4323,7 @@@@ static int proxyGenerateHostID(char *pHostID){
   
   memset(key, 0, HOSTIDLEN);
   len = 0;
-  fd = open("/dev/urandom", O_RDONLY);
+  fd = open(RAND_DEV, O_RDONLY);
   if( fd>=0 ){
     len = read(fd, key, HOSTIDLEN);
     close(fd); /* silently leak the fd if it fails */
@


1.10
log
@enable load-extension for ports starting to require it

tested by bernd@@ in a bulk build, thanks!
@
text
@d1 3
a3 3
$OpenBSD: patch-src_os_unix_c,v 1.9 2009/04/22 21:23:43 martynas Exp $
--- src/os_unix.c.orig	Thu Apr  9 20:41:18 2009
+++ src/os_unix.c	Thu Apr 23 17:50:03 2009
d110 1
a110 1
@@@@ -3936,7 +3947,7 @@@@ static void *unixDlOpen(sqlite3_vfs *NotUsed, const ch
d119 1
a119 1
@@@@ -4002,7 +4013,7 @@@@ static int unixRandomness(sqlite3_vfs *NotUsed, int nB
d128 1
a128 1
@@@@ -4307,7 +4318,7 @@@@ static int proxyGenerateHostID(char *pHostID){
@


1.9
log
@sqlite3-3.6.13.  full bulk build done by jasper@@.  ok jasper@@, simon@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_os_unix_c,v 1.8 2009/04/16 20:09:58 martynas Exp $
--- src/os_unix.c.orig	Thu Apr  9 21:41:18 2009
+++ src/os_unix.c	Thu Apr 16 23:11:23 2009
d110 9
@


1.8
log
@update to sqlite-3.6.12.  full bulk build done by jasper@@
"go ahead" sthen@@, ok fgs@@, jasper@@, simon@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_os_unix_c,v 1.7 2009/04/05 00:02:54 martynas Exp $
--- src/os_unix.c.orig	Tue Mar 31 03:40:16 2009
+++ src/os_unix.c	Sun Apr  5 11:14:52 2009
d110 1
a110 1
@@@@ -3964,7 +3975,7 @@@@ static int unixRandomness(sqlite3_vfs *NotUsed, int nB
d119 1
a119 1
@@@@ -4269,7 +4280,7 @@@@ static int proxyGenerateHostID(char *pHostID){
@


1.7
log
@update to sqlite3-3.6.11.  fixes null ptr deref in sqlite3OsTruncate
addColumn;  which broke py stuff
noticed with fgs@@ while working on the py stuff
much thanks to bernd@@;  for doing a bulk build with it
ok fgs@@, bernd@@, simon@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_os_unix_c,v 1.6 2009/03/23 00:33:03 jakemsr Exp $
--- src/os_unix.c.orig	Sun Feb 15 15:07:09 2009
+++ src/os_unix.c	Mon Mar 23 12:53:43 2009
d110 1
a110 1
@@@@ -3950,7 +3961,7 @@@@ static int unixRandomness(sqlite3_vfs *NotUsed, int nB
d119 1
a119 1
@@@@ -4253,7 +4264,7 @@@@ static int proxyGenerateHostID(char *pHostID){
@


1.6
log
@use /dev/arandom instead of /dev/urandom.  reading from /dev/urandom
is too slow.

ok bernd@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_os_unix_c,v 1.5 2009/01/31 15:49:34 simon Exp $
--- src/os_unix.c.orig	Thu Jan 15 06:01:46 2009
+++ src/os_unix.c	Sun Mar 22 01:10:09 2009
d29 4
a32 4
@@@@ -184,7 +195,7 @@@@ struct unixFile {
   int lastErrno;                   /* The unix errno from the last I/O error */
   void *lockingContext;            /* Locking style specific state */
   int openFlags;                   /* The flags specified at open */
d38 1
a38 1
@@@@ -247,7 +258,7 @@@@ struct unixFile {
d47 1
a47 1
@@@@ -657,7 +668,7 @@@@ static void vxworksReleaseFileId(struct vxworksFileId 
d56 1
a56 1
@@@@ -692,7 +703,7 @@@@ struct unixFileId {
d65 1
a65 1
@@@@ -767,7 +778,7 @@@@ static struct unixOpenCnt *openList = 0;
d74 1
a74 1
@@@@ -788,7 +799,7 @@@@ struct threadTestData {
d83 1
a83 1
@@@@ -806,7 +817,7 @@@@ static void *threadLockingTest(void *pArg){
d92 1
a92 1
@@@@ -946,7 +957,7 @@@@ static int findLockInfo(
d101 1
a101 1
@@@@ -1023,7 +1034,7 @@@@ exit_findlockinfo:
d110 1
a110 1
@@@@ -3918,7 +3929,7 @@@@ static int unixRandomness(sqlite3_vfs *NotUsed, int nB
d119 1
a119 1
@@@@ -4221,7 +4232,7 @@@@ static int proxyGenerateHostID(char *pHostID){
@


1.5
log
@update to version 3.6.10 which comes with quite a few fixes, remove fix
for solved libtool issue and add fix for tests on big-endian arches

looks good to espie@@
requested, bulk-tested and ok by bernd@@
@
text
@d1 19
a19 4
$OpenBSD: patch-src_os_unix_c,v 1.4 2008/10/27 17:14:18 simon Exp $
--- src/os_unix.c.orig	Thu Jan 15 15:01:46 2009
+++ src/os_unix.c	Tue Jan 27 10:18:24 2009
@@@@ -141,6 +141,9 @@@@
d29 1
a29 1
@@@@ -184,7 +187,7 @@@@ struct unixFile {
d38 1
a38 1
@@@@ -247,7 +250,7 @@@@ struct unixFile {
d47 1
a47 1
@@@@ -657,7 +660,7 @@@@ static void vxworksReleaseFileId(struct vxworksFileId 
d56 1
a56 1
@@@@ -692,7 +695,7 @@@@ struct unixFileId {
d65 1
a65 1
@@@@ -767,7 +770,7 @@@@ static struct unixOpenCnt *openList = 0;
d74 1
a74 1
@@@@ -788,7 +791,7 @@@@ struct threadTestData {
d83 1
a83 1
@@@@ -806,7 +809,7 @@@@ static void *threadLockingTest(void *pArg){
d92 1
a92 1
@@@@ -946,7 +949,7 @@@@ static int findLockInfo(
d101 1
a101 1
@@@@ -1023,7 +1026,7 @@@@ exit_findlockinfo:
d110 18
@


1.4
log
@update to version 3.6.4, see http://www.sqlite.org/35to36.html and
http://www.sqlite.org/changes.html for the details

tcl adjustments and bulk build testing by bernd@@, thanks!

ok bernd@@, steven@@, martynas@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_os_unix_c,v 1.3 2008/07/23 17:31:17 martynas Exp $
--- src/os_unix.c.orig	Tue Oct 14 20:07:40 2008
+++ src/os_unix.c	Sat Oct 25 19:39:50 2008
@@@@ -83,6 +83,9 @@@@
d14 5
a18 5
@@@@ -119,7 +122,7 @@@@ struct unixFile {
   int h;                    /* The file descriptor */
   unsigned char locktype;   /* The type of lock held on this fd */
   int dirfd;                /* File descriptor for the directory */
-#if SQLITE_THREADSAFE
d20 1
a20 1
   pthread_t tid;            /* The thread that "owns" this unixFile */
d22 2
a23 2
   int lastErrno;            /* The unix errno from the last I/O error */
@@@@ -161,7 +164,7 @@@@ struct unixFile {
d32 1
a32 1
@@@@ -183,7 +186,7 @@@@ struct unixFile {
d36 1
a36 1
-#if SQLITE_THREADSAFE
d41 5
a45 5
@@@@ -302,7 +305,7 @@@@ struct unixFile {
 struct lockKey {
   dev_t dev;       /* Device number */
   ino_t ino;       /* Inode number */
-#if SQLITE_THREADSAFE
d47 1
a47 1
   pthread_t tid;   /* Thread ID or zero if threads can override each other */
d50 12
a61 3
@@@@ -396,7 +399,7 @@@@ static void leaveMutex(void){
   sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER));
 }
d63 1
a63 1
-#if SQLITE_THREADSAFE
d66 5
a70 8
 ** This variable records whether or not threads can override each others
 ** locks.
@@@@ -533,7 +536,7 @@@@ static void testThreadLockingBehavior(int fd_orig){
   close(fd);
   threadsOverrideEachOthersLocks =  d[0].result==0 && d[1].result==0;
 }
-#endif /* SQLITE_THREADSAFE */
+#endif /* SQLITE_NEED_TID_CHECKS */
d72 2
d75 7
a81 6
 ** Release a lockInfo structure previously allocated by findLockInfo().
@@@@ -715,7 +718,7 @@@@ static int findLockInfo(
   memset(&key1, 0, sizeof(key1));
   key1.dev = statbuf.st_dev;
   key1.ino = statbuf.st_ino;
-#if SQLITE_THREADSAFE
d86 1
a86 1
@@@@ -808,7 +811,7 @@@@ static const char *locktypeName(int locktype){
d90 1
a90 1
-#if SQLITE_THREADSAFE
@


1.3
log
@- update to sqlite-3.5.9
- merge espie's patches
- fix apps such as p5-DBD-SQLite, by adding weak pthread functions.
also include some bug fixes from kurt@@.  the work has been done by
kurt@@, and espie@@.  thanks!
ok kurt@@, espie@@, bernd@@
@
text
@d1 4
a4 4
$OpenBSD$
--- src/os_unix.c.orig	Tue May 13 08:51:29 2008
+++ src/os_unix.c	Wed Jul 23 10:46:40 2008
@@@@ -61,6 +61,9 @@@@
d14 1
a14 1
@@@@ -97,7 +100,7 @@@@ struct unixFile {
d22 2
a23 2
 };
@@@@ -138,7 +141,7 @@@@ struct unixFile {
d32 1
a32 1
@@@@ -160,7 +163,7 @@@@ struct unixFile {
d41 1
a41 1
@@@@ -281,7 +284,7 @@@@ struct unixFile {
d50 2
a51 2
@@@@ -371,7 +374,7 @@@@ static void leaveMutex(){
   sqlite3_mutex_leave(sqlite3_mutex_alloc(SQLITE_MUTEX_STATIC_MASTER));
d59 1
a59 1
@@@@ -508,7 +511,7 @@@@ static void testThreadLockingBehavior(int fd_orig){
d68 1
a68 1
@@@@ -641,7 +644,7 @@@@ static int findLockInfo(
d77 1
a77 1
@@@@ -737,7 +740,7 @@@@ static const char *locktypeName(int locktype){
@


1.2
log
@update to 3.2.7
@
text
@d1 11
a11 4
$OpenBSD: patch-src_os_unix_c,v 1.1 2005/09/17 22:05:39 jolan Exp $
--- src/os_unix.c.orig	Sat Sep 17 11:34:55 2005
+++ src/os_unix.c	Sat Sep 17 15:15:08 2005
@@@@ -830,7 +830,7 @@@@ static int full_fsync(int fd, int fullSy
d13 17
d31 45
a75 5
   if( dataOnly ){
-    rc = fdatasync(fd);
+    rc = fsync(fd);
   }else{
     rc = fsync(fd);
d77 9
@


1.1
log
@update to 3.2.6
@
text
@d1 1
a1 1
$OpenBSD$
@

