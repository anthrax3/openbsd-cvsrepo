head	1.5;
access;
symbols
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2009.08.03.09.55.47;	author sthen;	state dead;
branches;
next	1.4;

1.4
date	2009.04.05.00.02.54;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.31.15.49.34;	author simon;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.27.17.14.18;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2008.07.23.17.31.17;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update SQLite to 3.6.16; ok martynas@@
@
text
@$OpenBSD: patch-src_util_c,v 1.4 2009/04/05 00:02:54 martynas Exp $
--- src/util.c.orig	Sun Feb 15 15:07:11 2009
+++ src/util.c	Sun Mar 22 13:29:53 2009
@@@@ -18,6 +18,7 @@@@
 */
 #include "sqliteInt.h"
 #include <stdarg.h>
+#include <math.h>
 
 /*
 ** Routine needed to support the testcase() macro.
@@@@ -54,29 +55,7 @@@@ int sqlite3Assert(void){
 ** Return true if the floating point value is Not a Number (NaN).
 */
 int sqlite3IsNaN(double x){
-  /* This NaN test sometimes fails if compiled on GCC with -ffast-math.
-  ** On the other hand, the use of -ffast-math comes with the following
-  ** warning:
-  **
-  **      This option [-ffast-math] should never be turned on by any
-  **      -O option since it can result in incorrect output for programs
-  **      which depend on an exact implementation of IEEE or ISO 
-  **      rules/specifications for math functions.
-  **
-  ** Under MSVC, this NaN test may fail if compiled with a floating-
-  ** point precision mode other than /fp:precise.  From the MSDN 
-  ** documentation:
-  **
-  **      The compiler [with /fp:precise] will properly handle comparisons 
-  **      involving NaN. For example, x != x evaluates to true if x is NaN 
-  **      ...
-  */
-#ifdef __FAST_MATH__
-# error SQLite will not work correctly with the -ffast-math option of GCC.
-#endif
-  volatile double y = x;
-  volatile double z = y;
-  return y!=z;
+	return isnan(x);
 }
 
 /*
@


1.4
log
@update to sqlite3-3.6.11.  fixes null ptr deref in sqlite3OsTruncate
addColumn;  which broke py stuff
noticed with fgs@@ while working on the py stuff
much thanks to bernd@@;  for doing a bulk build with it
ok fgs@@, bernd@@, simon@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_util_c,v 1.3 2009/01/31 15:49:34 simon Exp $
@


1.3
log
@update to version 3.6.10 which comes with quite a few fixes, remove fix
for solved libtool issue and add fix for tests on big-endian arches

looks good to espie@@
requested, bulk-tested and ok by bernd@@
@
text
@d1 5
a5 4
$OpenBSD: patch-src_util_c,v 1.2 2008/10/27 17:14:18 simon Exp $
--- src/util.c.orig	Thu Jan 15 15:01:47 2009
+++ src/util.c	Tue Jan 27 10:22:58 2009
@@@@ -19,6 +19,7 @@@@
a7 1
 #include <ctype.h>
a9 1
 
d11 2
a12 1
@@@@ -56,29 +57,7 @@@@ int sqlite3Assert(void){
@


1.2
log
@update to version 3.6.4, see http://www.sqlite.org/35to36.html and
http://www.sqlite.org/changes.html for the details

tcl adjustments and bulk build testing by bernd@@, thanks!

ok bernd@@, steven@@, martynas@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_util_c,v 1.1 2008/07/23 17:31:17 martynas Exp $
--- src/util.c.orig	Tue Oct 14 20:07:41 2008
+++ src/util.c	Sat Oct 25 19:51:35 2008
@@@@ -19,35 +19,14 @@@@
d12 1
@


1.1
log
@- update to sqlite-3.5.9
- merge espie's patches
- fix apps such as p5-DBD-SQLite, by adding weak pthread functions.
also include some bug fixes from kurt@@.  the work has been done by
kurt@@, and espie@@.  thanks!
ok kurt@@, espie@@, bernd@@
@
text
@d1 4
a4 4
$OpenBSD$
--- src/util.c.orig	Tue May 13 19:41:50 2008
+++ src/util.c	Sat Jul 19 15:10:45 2008
@@@@ -19,23 +19,14 @@@@
d12 1
a12 1
 ** Return true if the floating point value is Not a Number.
d23 8
d32 3
d36 2
a37 1
-  return x!=y;
@

