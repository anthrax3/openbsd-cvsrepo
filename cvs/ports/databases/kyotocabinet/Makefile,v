head	1.16;
access;
symbols
	OPENBSD_6_1:1.15.0.2
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	ajacoutot_20120829:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.16
date	2017.04.10.11.45.24;	author sthen;	state Exp;
branches;
next	1.15;
commitid	XDh1zlSBq0boKsHk;

1.15
date	2016.12.30.10.20.31;	author jsg;	state Exp;
branches;
next	1.14;
commitid	qjyxN0gHxKaP7y1j;

1.14
date	2016.09.01.10.53.26;	author jasper;	state Exp;
branches;
next	1.13;
commitid	LdsIxWmxagN2Kq33;

1.13
date	2016.03.11.19.59.12;	author naddy;	state Exp;
branches;
next	1.12;
commitid	pguKLBEFv33DrgKU;

1.12
date	2016.02.21.16.17.25;	author jsg;	state Exp;
branches;
next	1.11;
commitid	IZQsfcjAwN1evvTh;

1.11
date	2015.12.25.08.39.46;	author ajacoutot;	state Exp;
branches;
next	1.10;
commitid	lWzNW4D9TtO7X1J3;

1.10
date	2015.04.17.07.59.56;	author phessler;	state Exp;
branches;
next	1.9;
commitid	zhrJ2l87EuHO5j8Q;

1.9
date	2015.03.16.18.07.38;	author naddy;	state Exp;
branches;
next	1.8;
commitid	IJdm3Zowcdkcxp5X;

1.8
date	2013.10.18.14.46.59;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.11.02.52.05;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.30.13.31.02;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2012.09.29.07.03.46;	author landry;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.10.16.21.54;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.30.09.19.00;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.29.17.38.54;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.29.14.32.51;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.29.14.32.51;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.16
log
@use LIBCXX
@
text
@# $OpenBSD: Makefile,v 1.15 2016/12/30 10:20:31 jsg Exp $

BROKEN-hppa=	undefined reference to `__sync_fetch_and_add_8'
BROKEN-powerpc=	undefined reference to `__sync_fetch_and_add_8'

# requires C++ tr1 headers
NOT_FOR_ARCHS=		${GCC3_ARCHS}

COMMENT=	straightforward implementation of DBM

DISTNAME=	kyotocabinet-1.2.76
REVISION=	0

SHARED_LIBS +=	kyotocabinet 0.0 # 16.0

CATEGORIES=	databases

HOMEPAGE=	http://fallabs.com/kyotocabinet/

# GPLv3
PERMIT_PACKAGE_CDROM=	Yes

WANTLIB += c m pthread ${LIBCXX} z

MASTER_SITES=	${HOMEPAGE}pkg/

# for atomic builtins
MODULES=	gcc4
MODGCC4_ARCHS=	arm
MODGCC4_LANGS=	c++

USE_GMAKE=	Yes

CONFIGURE_STYLE=gnu

# This FLAVOR should be used for local builds only and not added to
# bulks (i.e. _no_ entry in databases/Makefile); the reason is that it
# uses -march=native which cannot be guaranteed to work on a machine it
# was not compiled on.
FLAVORS=	optimized
FLAVOR?=

.if ${FLAVOR:Moptimized}
CONFIGURE_ARGS += --enable-opt
.else
CONFIGURE_ARGS += --disable-opt
# i386 still need some optimized instructions
# undefined reference to `__sync_bool_compare_and_swap_8' ...
.if ${MACHINE_ARCH} == "i386"
CXXFLAGS += -march=i586
.endif
.endif

pre-configure:
	${SUBST_CMD} ${WRKSRC}/{configure,Makefile.in}

.include <bsd.port.mk>
@


1.15
log
@use ports gcc on arm to get atomic builtins
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2016/09/01 10:53:26 jasper Exp $
d23 1
a23 1
WANTLIB += c m pthread stdc++ z
@


1.14
log
@retire sparc
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2016/03/11 19:59:12 naddy Exp $
a2 1
BROKEN-arm=	undefined reference to `__sync_fetch_and_add_8'
d26 5
@


1.13
log
@garbage collect CONFIGURE_SHARED
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2016/02/21 16:17:25 jsg Exp $
a5 1
BROKEN-sparc=	undefined reference to `__sync_fetch_and_add_8'
@


1.12
log
@Don't attempt to build on arm.  sync atomic builtins required.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2015/12/25 08:39:46 ajacoutot Exp $
a31 1
CONFIGURE_ARGS=	${CONFIGURE_SHARED}
@


1.11
log
@Remove some BROKEN markers for ports that should build now with the new libgcc
assisted built-in atomic ops for mips64.

from Brad
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2015/04/17 07:59:56 phessler Exp $
d3 1
@


1.10
log
@another arch missing atomic ops
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2015/03/16 18:07:38 naddy Exp $
a3 1
BROKEN-mips64=	undefined reference to `__sync_fetch_and_add_8'
@


1.9
log
@fold lib-only PFRAG.shared into PLIST, regen PLIST, and bump
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2013/10/18 14:46:59 miod Exp $
d6 1
@


1.8
log
@One more port which includes <tr1/....> and thus NOT_FOR_ARCHS=${GCC3_ARCHS}
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2013/03/11 02:52:05 espie Exp $
d13 1
@


1.7
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2012/11/30 13:31:02 jasper Exp $
d6 3
@


1.6
log
@mark broken on mips64 for the same reasons it's broken on hppa/powerpc.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2012/09/29 07:03:46 landry Exp $
a18 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM= Yes
PERMIT_DISTFILES_FTP=	Yes
@


1.5
log
@Mark as BROKEN-hppa like it is for powerpc, undefined refs to :
__sync_bool_compare_and_swap_4
__sync_bool_compare_and_swap_8
__sync_lock_test_and_set_8
__sync_fetch_and_add_8
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2012/09/10 16:21:54 ajacoutot Exp $
d3 2
a5 1
BROKEN-hppa=	undefined reference to `__sync_fetch_and_add_8'
@


1.4
log
@Mark BROKEN on powerpc for now.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2012/08/30 09:19:00 ajacoutot Exp $
d4 1
@


1.3
log
@Unbreak on i386; reported by nigel@@
@
text
@d1 3
a3 1
# $OpenBSD: Makefile,v 1.2 2012/08/29 17:38:54 jasper Exp $
@


1.2
log
@spello in comment
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2012/08/29 14:32:51 ajacoutot Exp $
d39 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d30 1
a30 1
# uses -march=native which cannot be garanteed to work on a machine it
@


1.1.1.1
log
@Import kyotocabinet-1.2.76.

Kyoto Cabinet is a library of routines for managing a database. The
database is a simple data file containing records, each is a pair of a
key and a value. Every key and value is serial bytes with variable
length. Both binary data and character string can be used as a key and a
value. Each key must be unique within a database. There is neither
concept of data tables nor data types. Records are organized in hash
table or B+ tree.

Available FLAVOR:
        optimized - build with optimizations for the local CPU


ok robert@@ jasper@@ sthen@@
@
text
@@
