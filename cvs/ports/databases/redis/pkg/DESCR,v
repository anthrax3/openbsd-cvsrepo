head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.26
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.24
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.16
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.14
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	dcoppa_20101010:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2010.10.10.15.50.06;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.10.15.50.06;	author dcoppa;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@Redis is an advanced key-value store. It is similar to memcached, but
the dataset is not volatile, and values can be strings (exactly like in
memcached), but also lists, sets, and ordered sets. All this data types
can be manipulated with atomic operations to push/pop elements, add/remove
elements, perform server side unions, intersections, and so forth.
In order to be very fast but at the same time persistent, the whole
dataset is taken in memory and from time to time and/or when a
number of changes to the dataset are performed, it is written
asynchronously to the disk.
@


1.1.1.1
log
@Import databases/redis.

Redis is an advanced key-value store. It is similar to memcached
but the dataset is not volatile, and values can be strings, exactly
like in memcached, but also lists, sets, and ordered sets. All this
data types can be manipulated with atomic operations to push/pop
elements, add/remove elements, perform server side union, intersection,
difference between sets, and so forth.
In order to be very fast but at the same time persistent the whole
dataset is taken in memory, and from time to time saved on disc
asynchronously (semi persistent mode) or alternatively every change
is written into an append only file (fully persistent mode).

OK sthen@@, landry@@
@
text
@@
