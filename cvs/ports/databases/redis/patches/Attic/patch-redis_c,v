head	1.5;
access;
symbols
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	dcoppa_20101010:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2011.03.21.19.58.28;	author simon;	state dead;
branches;
next	1.4;

1.4
date	2011.03.16.14.19.38;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.17.08.44.54;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.17.12.48.46;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.10.15.50.06;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.10.15.50.06;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to version 2.2.2

with tweaks from dcoppa@@ (maintainer)
@
text
@$OpenBSD: patch-redis_c,v 1.4 2011/03/16 14:19:38 dcoppa Exp $

Fix an alignment problem that was causing a SIGBUS on strict alignment 
archs like SPARC

--- redis.c.orig	Fri Mar  4 16:48:37 2011
+++ redis.c	Wed Mar 16 14:04:48 2011
@@@@ -7459,7 +7459,7 @@@@ static int deleteIfVolatile(redisDb *db, robj *key) {
 
 static void expireGenericCommand(redisClient *c, robj *key, robj *param, long offset) {
     dictEntry *de;
-    time_t seconds;
+    long seconds;
 
     if (getLongFromObjectOrReply(c, param, &seconds, NULL) != REDIS_OK) return;
 
@


1.4
log
@Bugfix update to redis-2.0.5
@
text
@d1 1
a1 1
$OpenBSD: patch-redis_c,v 1.3 2010/11/17 08:44:54 dcoppa Exp $
@


1.3
log
@Bugfix update to redis-2.0.4
@
text
@d1 1
a1 1
$OpenBSD: patch-redis_c,v 1.2 2010/10/17 12:48:46 dcoppa Exp $
d6 3
a8 3
--- redis.c.orig	Sat Nov  6 10:09:28 2010
+++ redis.c	Wed Nov 17 08:35:50 2010
@@@@ -7447,7 +7447,7 @@@@ static int deleteIfVolatile(redisDb *db, robj *key) {
@


1.2
log
@Update to redis-2.0.3

From Remi Pointel, with tweaks by me.
@
text
@d1 1
a1 1
$OpenBSD: patch-redis_c,v 1.1.1.1 2010/10/10 15:50:06 dcoppa Exp $
d6 3
a8 3
--- redis.c.orig	Fri Oct 15 13:07:25 2010
+++ redis.c	Sun Oct 17 13:41:22 2010
@@@@ -7444,7 +7444,7 @@@@ static int deleteIfVolatile(redisDb *db, robj *key) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 3
a8 3
--- redis.c.orig	Fri Oct  8 12:31:46 2010
+++ redis.c	Fri Oct  8 12:33:10 2010
@@@@ -7442,7 +7442,7 @@@@ static int deleteIfVolatile(redisDb *db, robj *key) {
@


1.1.1.1
log
@Import databases/redis.

Redis is an advanced key-value store. It is similar to memcached
but the dataset is not volatile, and values can be strings, exactly
like in memcached, but also lists, sets, and ordered sets. All this
data types can be manipulated with atomic operations to push/pop
elements, add/remove elements, perform server side union, intersection,
difference between sets, and so forth.
In order to be very fast but at the same time persistent the whole
dataset is taken in memory, and from time to time saved on disc
asynchronously (semi persistent mode) or alternatively every change
is written into an append only file (fully persistent mode).

OK sthen@@, landry@@
@
text
@@
