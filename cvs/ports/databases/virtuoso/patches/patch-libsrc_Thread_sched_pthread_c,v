head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.14
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.8
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.6
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	zhuk_20130422:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.04.22.17.32.31;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.22.17.32.31;	author zhuk;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- libsrc/Thread/sched_pthread.c.orig	Thu Aug  2 00:54:31 2012
+++ libsrc/Thread/sched_pthread.c	Tue Jan 29 19:31:22 2013
@@@@ -206,7 +206,7 @@@@ thread_initial (unsigned long stack_size)
   CKRET (rc);
 #endif
 
-#if defined (PTHREAD_PROCESS_PRIVATE) && !defined(oldlinux) && !defined(__FreeBSD__)
+#if defined (PTHREAD_PROCESS_PRIVATE) && !defined(oldlinux) && !defined(__FreeBSD__) && !defined(__OpenBSD__)
   rc = pthread_mutexattr_setpshared (&_mutex_attr, PTHREAD_PROCESS_PRIVATE);
   CKRET (rc);
 #endif
@@@@ -1075,7 +1075,7 @@@@ mutex_allocate_typed (int type)
       if (!is_initialized)
 	{
 	  pthread_mutexattr_init (&_mutex_attr);
-#if defined (PTHREAD_PROCESS_PRIVATE) && !defined(oldlinux) && !defined (__FreeBSD__)	  
+#if defined (PTHREAD_PROCESS_PRIVATE) && !defined(oldlinux) && !defined (__FreeBSD__) && !defined(__OpenBSD__)
 	  rc = pthread_mutexattr_setpshared (&_mutex_attr, PTHREAD_PROCESS_PRIVATE);
 	  CKRET (rc);
 #endif
@@@@ -1132,7 +1132,7 @@@@ dk_mutex_init (dk_mutex_t * mtx, int type)
       if (!is_initialized) 
 	{
 	  pthread_mutexattr_init (&_attr);
-#if defined (PTHREAD_PROCESS_PRIVATE) && !defined (__FreeBSD__) && !defined(oldlinux)
+#if defined (PTHREAD_PROCESS_PRIVATE) && !defined (__FreeBSD__) && !defined(__OpenBSD__) && !defined(oldlinux)
 	  rc = pthread_mutexattr_setpshared (&_attr, PTHREAD_PROCESS_PRIVATE);
 	  CKRET (rc);
 #endif	  
@


1.1.1.1
log
@Import Virtuoso. Needed by Soprano (for tests) and for KDE 4 (Nepomuk).

Virtuoso is a high-performance object-relational SQL database. As
a database, it provides transactions, a smart SQL compiler, powerful
stored-procedure language with optional Java and .Net server-side
hosting, hot backup, SQL-99 support and more. It has all major
data-access interfaces, such as ODBC, JDBC, ADO .Net and OLE/DB.

"I looked at virtuoso and it gave me too much headaches.
Import it then (and polish in-tree)" landry@@
@
text
@@
