head	1.2;
access;
symbols
	OPENBSD_5_9:1.1.0.20
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.06.29.09.17.41;	author sthen;	state dead;
branches;
next	1.1;
commitid	WVC2U826VDXHEetI;

1.1
date	2010.11.05.10.25.24;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to FreeTDS 0.95.95, and switch back to using GnuTLS as the
SSL/TLS library (as we used to do by default) - fixes a segfault
that now occurs when making a TLS connection to a database from
a program that is also using poppler-glib. (specifically I see
an insane value for c->num in MD5_Final/HASH_FINAL resulting in
a write past the end of an array when doing "use DBI; use Poppler;
$dbh = DBI->connect('dbi:Sybase:server=server'" in perl).

We used to do this (with an optional openssl flavour) but switched
away previously because gnutls started needing pthread and we wanted
to avoid the need to preload libpthread.so for various programs
(especially DBD::Sybase), but that is no longer a problem.

ok ajacoutot@@
@
text
@$OpenBSD: patch-m4_iconv_m4,v 1.1 2010/11/05 10:25:24 sthen Exp $
--- m4/iconv.m4.orig	Fri Nov  5 10:19:02 2010
+++ m4/iconv.m4	Fri Nov  5 10:21:23 2010
@@@@ -71,6 +71,7 @@@@ AC_DEFUN([AM_ICONV_LINK],
     LIBICONV=
     LTLIBICONV=
   fi
+  LIBICONV=${LTLIBICONV}
   AC_SUBST(LIBICONV)
   AC_SUBST(LTLIBICONV)
 ])
@


1.1
log
@use shared libiconv again (fixed amd64 build noted by landry)
@
text
@d1 1
a1 1
$OpenBSD$
@

