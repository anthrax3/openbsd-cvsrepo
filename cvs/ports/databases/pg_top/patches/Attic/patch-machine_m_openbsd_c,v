head	1.6;
access;
symbols
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2015.07.27.16.29.58;	author okan;	state dead;
branches;
next	1.5;
commitid	OZO8OJpk0bq5loKZ;

1.5
date	2014.04.21.15.21.01;	author okan;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.20.19.40.55;	author okan;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.18.21.38.12;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2012.07.10.12.08.29;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.08.20.56.03;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove pg_top; marked BROKEN since Apr 2014, and still no interest in
fixing (including me).  Requires adjusting to various API/ABI changes
since, cherry-picking from top(1) and then some.

ok zhuk@@ sthen@@ jasper@@
@
text
@$OpenBSD: patch-machine_m_openbsd_c,v 1.5 2014/04/21 15:21:01 okan Exp $
--- machine/m_openbsd.c.orig	Mon Jun 10 23:03:04 2013
+++ machine/m_openbsd.c	Sun Apr 20 15:48:09 2014
@@@@ -221,9 +221,9 @@@@ void
 get_system_info(struct system_info *si)
 {
 	static int sysload_mib[] = {CTL_VM, VM_LOADAVG};
-	static int vmtotal_mib[] = {CTL_VM, VM_METER};
+	static int uvmexp_mib[] = {CTL_VM, VM_UVMEXP};
 	struct loadavg sysload;
-	struct vmtotal vmtotal;
+	struct uvmexp uvmexp;
 	double *infoloadp;
 	size_t size;
 	int i;
@@@@ -236,7 +236,7 @@@@ get_system_info(struct system_info *si)
 	 * that there's nothing worth getting from the process table unless there
 	 * is more than 1 process.
 	 */
-	if (nproc > 1)
+	if (nproc > 1) {
 		if (ncpu > 1) {
 			int cp_time_mib[] = {CTL_KERN, KERN_CPTIME2, 0};
 
@@@@ -267,6 +267,7 @@@@ get_system_info(struct system_info *si)
 						cp_old[0], cp_diff[0]);
 			}
 		}
+	}
 
 	size = sizeof(sysload);
 	if (sysctl(sysload_mib, 2, &sysload, &size, NULL, 0) < 0)
@@@@ -277,17 +278,17 @@@@ get_system_info(struct system_info *si)
 
 
 	/* get total -- systemwide main memory usage structure */
-	size = sizeof(vmtotal);
-	if (sysctl(vmtotal_mib, 2, &vmtotal, &size, NULL, 0) < 0) {
+	size = sizeof(uvmexp);
+	if (sysctl(uvmexp_mib, 2, &uvmexp, &size, NULL, 0) < 0) {
 		warn("sysctl failed");
-		bzero(&vmtotal, sizeof(vmtotal));
+		bzero(&uvmexp, sizeof(uvmexp));
 	}
 	/* convert memory stats to Kbytes */
 	memory_stats[0] = -1;
-	memory_stats[1] = pagetok(vmtotal.t_arm);
-	memory_stats[2] = pagetok(vmtotal.t_rm);
+	memory_stats[1] = pagetok(uvmexp.active);
+	memory_stats[2] = pagetok(uvmexp.npages - uvmexp.free);
 	memory_stats[3] = -1;
-	memory_stats[4] = pagetok(vmtotal.t_free);
+	memory_stats[4] = pagetok(uvmexp.free);
 	memory_stats[5] = -1;
 
 	if (!swapmode(&memory_stats[6], &memory_stats[7])) {
@


1.5
log
@convert from VM_METER to VM_UVMEXP; adapted from diff from mpi@@. even
though this port is temporarily marked BROKEN, put this in so it's not
forgotten when sending back upstream.

ok mpi@@
@
text
@d1 1
a1 1
$OpenBSD: patch-machine_m_openbsd_c,v 1.4 2014/04/20 19:40:55 okan Exp $
@


1.4
log
@mark as BROKEN.  while the current version builds, it doesn't report a
thing mildly useful outside of the core dumps.  while upstream took all
the local patches and eventually released 3.7.0, it remains completely
unreliable - at least update to 3.7.0 to aid in tracking down the
machine.c bits that need to be addressed.

ok sthen on marking this BROKEN
@
text
@d1 15
a15 3
$OpenBSD$
--- machine/m_openbsd.c.orig	Fri Apr 18 18:20:57 2014
+++ machine/m_openbsd.c	Fri Apr 18 18:21:14 2014
d33 24
@


1.3
log
@cope with sysctl.h changes
@
text
@d1 15
a15 128
$OpenBSD: patch-machine_m_openbsd_c,v 1.2 2012/07/10 12:08:29 sthen Exp $
--- machine/m_openbsd.c.orig	Sat Apr  5 11:09:06 2008
+++ machine/m_openbsd.c	Thu Dec  6 15:30:59 2012
@@@@ -38,6 +38,7 @@@@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <sys/proc.h>
 #include <sys/sysctl.h>
 #include <sys/dkstat.h>
 #include <sys/swap.h>
@@@@ -51,13 +52,13 @@@@
 #include "loadavg.h"
 
 static long	swapmode(long *, long *);
-static char	*state_abbr(struct kinfo_proc2 *);
-static char	*format_comm(struct kinfo_proc2 *);
+static char	*state_abbr(struct kinfo_proc *);
+static char	*format_comm(struct kinfo_proc *);
 
 /* get_process_info passes back a handle.  This is what it looks like: */
 
 struct handle {
-	struct kinfo_proc2 **next_proc;	/* points to next valid proc pointer */
+	struct kinfo_proc **next_proc;	/* points to next valid proc pointer */
 	int		remaining;	/* number of pointers remaining */
 };
 
@@@@ -138,8 +139,8 @@@@ int (*proc_compares[]) () =
 static int      nproc;
 static int      onproc = -1;
 static int      pref_len;
-static struct kinfo_proc2 *pbase;
-static struct kinfo_proc2 **pref;
+static struct kinfo_proc *pbase;
+static struct kinfo_proc **pref;
 
 /* these are for getting the memory statistics */
 static int      pageshift;	/* log base 2 of the pagesize */
@@@@ -312,7 +313,7 @@@@ get_process_info(struct system_info *si, struct proces
 {
 	int show_idle, show_system, show_threads, show_uid, show_cmd;
 	int total_procs, active_procs;
-	struct kinfo_proc2 **prefp, *pp;
+	struct kinfo_proc **prefp, *pp;
 	int mib[6];
 	size_t size;
 
@@@@ -320,11 +321,11 @@@@ get_process_info(struct system_info *si, struct proces
 	PGconn *pgconn;
 	PGresult *pgresult = NULL;
 
-	size = (size_t) sizeof(struct kinfo_proc2);
+	size = (size_t) sizeof(struct kinfo_proc);
 	mib[0] = CTL_KERN;
-	mib[1] = KERN_PROC2;
+	mib[1] = KERN_PROC;
 	mib[2] = KERN_PROC_PID;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 1;
 
 	nproc = 0;
@@@@ -333,14 +334,14 @@@@ get_process_info(struct system_info *si, struct proces
 	{
 		pgresult = PQexec(pgconn, QUERY_PROCESSES);
 		nproc = PQntuples(pgresult);
-		pbase = (struct kinfo_proc2 *) realloc(pbase,
-				sizeof(struct kinfo_proc2 *) * nproc);
+		pbase = (struct kinfo_proc *) realloc(pbase,
+				sizeof(struct kinfo_proc *) * nproc);
 	}
 	PQfinish(pgconn);
 
 	if (nproc > onproc)
-		pref = (struct kinfo_proc2 **)realloc(pref,
-		    sizeof(struct kinfo_proc2 *) * (onproc = nproc));
+		pref = (struct kinfo_proc **)realloc(pref,
+		    sizeof(struct kinfo_proc *) * (onproc = nproc));
 	if (pref == NULL) {
 		warnx("Out of memory.");
 		quit(23);
@@@@ -392,9 +393,9 @@@@ get_process_info(struct system_info *si, struct proces
 	}
 
 	/* if requested, sort the "interesting" processes */
-	if (compare_index != NULL)
+	if (compare_index != 0)
 		qsort((char *) pref, active_procs,
-		    sizeof(struct kinfo_proc2 *), proc_compares[compare_index]);
+		    sizeof(struct kinfo_proc *), proc_compares[compare_index]);
 	/* remember active and total counts */
 	si->p_total = total_procs;
 	si->p_active = pref_len = active_procs;
@@@@ -408,7 +409,7 @@@@ get_process_info(struct system_info *si, struct proces
 char fmt[MAX_COLS];	/* static area where result is built */
 
 static char *
-state_abbr(struct kinfo_proc2 *pp)
+state_abbr(struct kinfo_proc *pp)
 {
 	static char buf[10];
 
@@@@ -422,7 +423,7 @@@@ state_abbr(struct kinfo_proc2 *pp)
 }
 
 static char *
-format_comm(struct kinfo_proc2 *kp)
+format_comm(struct kinfo_proc *kp)
 {
 #define ARG_SIZE 60
 	static char **s, buf[ARG_SIZE];
@@@@ -457,7 +458,7 @@@@ char *
 format_next_process(caddr_t handle, char *(*get_userid)(uid_t))
 {
 	char *p_wait, waddr[sizeof(void *) * 2 + 3];	/* Hexify void pointer */
-	struct kinfo_proc2 *pp;
+	struct kinfo_proc *pp;
 	struct handle *hp;
 	int cputime;
 	double pct;
@@@@ -477,7 +478,7 @@@@ format_next_process(caddr_t handle, char *(*get_userid
 			p_wait = pp->p_wmesg;
 		else {
 			snprintf(waddr, sizeof(waddr), "%llx",
-			    (unsigned long long)(pp->p_wchan & ~KERNBASE));
+			    (unsigned long long)pp->p_wchan);
 			p_wait = waddr;
d17 1
a17 93
 	} else
@@@@ -541,13 +542,13 @@@@ compare_cpu(const void *v1, const void *v2)
 {
 	struct proc **pp1 = (struct proc **) v1;
 	struct proc **pp2 = (struct proc **) v2;
-	struct kinfo_proc2 *p1, *p2;
+	struct kinfo_proc *p1, *p2;
 	pctcpu lresult;
 	int result;
 
 	/* remove one level of indirection */
-	p1 = *(struct kinfo_proc2 **) pp1;
-	p2 = *(struct kinfo_proc2 **) pp2;
+	p1 = *(struct kinfo_proc **) pp1;
+	p2 = *(struct kinfo_proc **) pp2;
 
 	ORDERKEY_PCTCPU
 	ORDERKEY_CPUTIME
@@@@ -565,13 +566,13 @@@@ compare_size(const void *v1, const void *v2)
 {
 	struct proc **pp1 = (struct proc **) v1;
 	struct proc **pp2 = (struct proc **) v2;
-	struct kinfo_proc2 *p1, *p2;
+	struct kinfo_proc *p1, *p2;
 	pctcpu lresult;
 	int result;
 
 	/* remove one level of indirection */
-	p1 = *(struct kinfo_proc2 **) pp1;
-	p2 = *(struct kinfo_proc2 **) pp2;
+	p1 = *(struct kinfo_proc **) pp1;
+	p2 = *(struct kinfo_proc **) pp2;
 
 	ORDERKEY_MEM
 	ORDERKEY_RSSIZE
@@@@ -589,13 +590,13 @@@@ compare_res(const void *v1, const void *v2)
 {
 	struct proc **pp1 = (struct proc **) v1;
 	struct proc **pp2 = (struct proc **) v2;
-	struct kinfo_proc2 *p1, *p2;
+	struct kinfo_proc *p1, *p2;
 	pctcpu lresult;
 	int result;
 
 	/* remove one level of indirection */
-	p1 = *(struct kinfo_proc2 **) pp1;
-	p2 = *(struct kinfo_proc2 **) pp2;
+	p1 = *(struct kinfo_proc **) pp1;
+	p2 = *(struct kinfo_proc **) pp2;
 
 	ORDERKEY_RSSIZE
 	ORDERKEY_MEM
@@@@ -613,13 +614,13 @@@@ compare_time(const void *v1, const void *v2)
 {
 	struct proc **pp1 = (struct proc **) v1;
 	struct proc **pp2 = (struct proc **) v2;
-	struct kinfo_proc2 *p1, *p2;
+	struct kinfo_proc *p1, *p2;
 	pctcpu lresult;
 	int result;
 
 	/* remove one level of indirection */
-	p1 = *(struct kinfo_proc2 **) pp1;
-	p2 = *(struct kinfo_proc2 **) pp2;
+	p1 = *(struct kinfo_proc **) pp1;
+	p2 = *(struct kinfo_proc **) pp2;
 
 	ORDERKEY_CPUTIME
 	ORDERKEY_PCTCPU
@@@@ -637,13 +638,13 @@@@ compare_prio(const void *v1, const void *v2)
 {
 	struct proc   **pp1 = (struct proc **) v1;
 	struct proc   **pp2 = (struct proc **) v2;
-	struct kinfo_proc2 *p1, *p2;
+	struct kinfo_proc *p1, *p2;
 	pctcpu lresult;
 	int result;
 
 	/* remove one level of indirection */
-	p1 = *(struct kinfo_proc2 **) pp1;
-	p2 = *(struct kinfo_proc2 **) pp2;
+	p1 = *(struct kinfo_proc **) pp1;
+	p2 = *(struct kinfo_proc **) pp2;
 
 	ORDERKEY_PRIO
 	ORDERKEY_PCTCPU
@@@@ -667,7 +668,7 @@@@ compare_prio(const void *v1, const void *v2)
 uid_t
 proc_owner(pid_t pid)
 {
-	struct kinfo_proc2 **prefp, *pp;
+	struct kinfo_proc **prefp, *pp;
 	int cnt;
d19 2
a20 1
 	prefp = pref;
@


1.2
log
@sync with top(1) in base; remove KERNBASE. ok okan@@
@
text
@d1 12
a12 4
$OpenBSD: patch-machine_m_openbsd_c,v 1.1 2012/01/08 20:56:03 naddy Exp $
--- machine/m_openbsd.c.orig	Sat Apr  5 18:09:06 2008
+++ machine/m_openbsd.c	Tue Jul 10 08:26:42 2012
@@@@ -51,13 +51,13 @@@@
d29 1
a29 1
@@@@ -138,8 +138,8 @@@@ int (*proc_compares[]) () =
d40 1
a40 1
@@@@ -312,7 +312,7 @@@@ get_process_info(struct system_info *si, struct proces
d49 1
a49 1
@@@@ -320,11 +320,11 @@@@ get_process_info(struct system_info *si, struct proces
d64 1
a64 1
@@@@ -333,14 +333,14 @@@@ get_process_info(struct system_info *si, struct proces
d83 1
a83 1
@@@@ -392,9 +392,9 @@@@ get_process_info(struct system_info *si, struct proces
d95 1
a95 1
@@@@ -408,7 +408,7 @@@@ get_process_info(struct system_info *si, struct proces
d104 1
a104 1
@@@@ -422,7 +422,7 @@@@ state_abbr(struct kinfo_proc2 *pp)
d113 1
a113 1
@@@@ -457,7 +457,7 @@@@ char *
d122 1
a122 1
@@@@ -477,7 +477,7 @@@@ format_next_process(caddr_t handle, char *(*get_userid
d131 1
a131 1
@@@@ -541,13 +541,13 @@@@ compare_cpu(const void *v1, const void *v2)
d148 1
a148 1
@@@@ -565,13 +565,13 @@@@ compare_size(const void *v1, const void *v2)
d165 1
a165 1
@@@@ -589,13 +589,13 @@@@ compare_res(const void *v1, const void *v2)
d182 1
a182 1
@@@@ -613,13 +613,13 @@@@ compare_time(const void *v1, const void *v2)
d199 1
a199 1
@@@@ -637,13 +637,13 @@@@ compare_prio(const void *v1, const void *v2)
d216 1
a216 1
@@@@ -667,7 +667,7 @@@@ compare_prio(const void *v1, const void *v2)
@


1.1
log
@catch up with change KERN_PROC2 -> KERN_PROC
@
text
@d1 3
a3 3
$OpenBSD$
--- machine/m_openbsd.c.orig	Sat Apr  5 11:09:06 2008
+++ machine/m_openbsd.c	Sun Jan  8 13:54:54 2012
d114 9
@

