head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.2
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2010.08.22.16.55.48;	author sthen;	state dead;
branches;
next	1.6;

1.6
date	2009.05.12.23.26.26;	author simon;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.24.17.42.22;	author simon;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.21.21.33.26;	author simon;	state dead;
branches;
next	1.3;

1.3
date	2007.05.15.09.37.58;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.24.20.32.23;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2004.06.11.17.37.48;	author robert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update DBD::SQLite to 1.29, ok robert@@ (maintainer)
@
text
@This patch makes sure that prepared statements get closed when
$dbh->disconnect() is called.  Ticket created upstream at
http://rt.cpan.org/Public/Bug/Display.html?id=40383

$OpenBSD: patch-dbdimp_c,v 1.6 2009/05/12 23:26:26 simon Exp $
--- dbdimp.c.orig	Thu Apr 23 12:12:05 2009
+++ dbdimp.c	Thu Apr 23 17:51:37 2009
@@@@ -169,8 +169,13 @@@@ sqlite_db_disconnect (SV *dbh, imp_dbh_t *imp_dbh)
     }
 
     if (sqlite3_close(imp_dbh->db) == SQLITE_BUSY) {
+        sqlite3_stmt *pStmt;
         /* active statements! */
-        warn("closing dbh with active statement handles");
+
+        while ((pStmt = sqlite3_next_stmt(imp_dbh->db, NULL)) != NULL)
+            sqlite3_finalize(pStmt);
+
+        sqlite3_close(imp_dbh->db);
     }
     imp_dbh->db = NULL;
 
@


1.6
log
@update to version 1.25

tested by bernd@@ in a bulk build, thanks!
early test and late reminder by landry@@
@
text
@d5 1
a5 1
$OpenBSD: patch-dbdimp_c,v 1.5 2009/01/24 17:42:22 simon Exp $
@


1.5
log
@Fix "closing dbh with active statement handles" issue caused by prepared
statements which weren't finalized by $dbh->disconnect().

Since version 3.6.0 of sqlite one can use the new sqlite3_next_stmt()
function to get all open statements and call sqlite3_finalize() on them.
This patch implements that behaviour.

Problem brought to my attention again by bernd@@ at p2k8 and i had it in
my tree since then without any issues.
Testing and ok by bernd@@ and pea@@, thanks!

Bug filed upstream at http://rt.cpan.org/Public/Bug/Display.html?id=40383
@
text
@d5 4
a8 4
$OpenBSD$
--- dbdimp.c.orig	Fri Aug 24 04:51:25 2007
+++ dbdimp.c	Sat Oct 25 22:31:04 2008
@@@@ -151,8 +151,13 @@@@ sqlite_db_disconnect (SV *dbh, imp_dbh_t *imp_dbh)
@


1.4
log
@update to version 1.14 and remove duplicate category

ok robert@@ (maintainer)
@
text
@d1 8
a8 21
$OpenBSD: patch-dbdimp_c,v 1.3 2007/05/15 09:37:58 espie Exp $
--- dbdimp.c.orig	Mon Apr 10 03:50:05 2006
+++ dbdimp.c	Tue May 15 11:09:38 2007
@@@@ -677,11 +677,14 @@@@ sqlite_st_FETCH_attrib (SV *sth, imp_sth_t *imp_sth, S
         retsv = sv_2mortal(newRV(sv_2mortal((SV*)av)));
         for (n = 0; n < i; n++) {
             const char *fieldtype = sqlite3_column_decltype(imp_sth->stmt, n);
-            int type = sqlite3_column_type(imp_sth->stmt, n);
-            /* warn("got type: %d = %s\n", type, fieldtype); */
-            type = type_to_odbc_type(type);
-            /* av_store(av, n, newSViv(type)); */
-            av_store(av, n, newSVpv(fieldtype, 0));
+	    int type = sqlite3_column_type(imp_sth->stmt, n);
+	    /* warn("got type: %d = %s\n", type, fieldtype); */
+	    type = type_to_odbc_type(type);
+	    /* av_store(av, n, newSViv(type)); */
+	    if (fieldtype)
+		    av_store(av, n, newSVpv(fieldtype, 0));
+	    else
+		    av_store(av, n, newSVpv("VARCHAR", 0));
         }
d10 13
a22 1
     else if (strEQ(key, "NULLABLE")) {
@


1.3
log
@fix segfault, okay robert@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@upgrade to 1.07; respect ${CC} and ${LD}
@
text
@d1 23
a23 17
$OpenBSD: patch-dbdimp_c,v 1.1 2004/06/11 17:37:48 robert Exp $
--- dbdimp.c.orig	Sat Feb 14 18:36:38 2004
+++ dbdimp.c	Fri Jun 11 19:38:42 2004
@@@@ -294,8 +294,11 @@@@
 char *
 sqlite_decode(imp_dbh_t *imp_dbh, char *input, size_t *len)
 {
-  char *ret = malloc(*len);
-  char *swit = ret;
+  char *ret;
+  char *swit;
+
+  New(1, ret, *len, char);
+  swit = ret;
 
   while (*input) {
     switch (*input) {
@


1.1
log
@fix a crash problem; from DBD::SQLite CVS; via FreeBSD
@
text
@d1 1
a1 1
$OpenBSD$
@

