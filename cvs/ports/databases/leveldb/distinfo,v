head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jasper_20111908:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.01.18.03.13.00;	author naddy;	state Exp;
branches;
next	1.2;
commitid	INAcawJqik7lWSVj;

1.2
date	2012.08.21.00.28.34;	author jmatthew;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.19.06.44.00;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.08.19.06.44.00;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Drop remaining MD5/RMD160/SHA1 checksums.
@
text
@SHA256 (leveldb-1.5.0.tar.gz) = y3NImvhNnZfT59I0ovXjoMif+ttlfn3Z6QRyJ3eOV7o=
SIZE (leveldb-1.5.0.tar.gz) = 199231
@


1.2
log
@update to leveldb 1.5.0

ok sthen@@
-lpthread patch for jasper@@
@
text
@a0 3
MD5 (leveldb-1.5.0.tar.gz) = Z5fhmgqfm7HBujVr+JIn8A==
RMD160 (leveldb-1.5.0.tar.gz) = Gi4LhiLZpd6Nf5Sbw4DYd7eFrcE=
SHA1 (leveldb-1.5.0.tar.gz) = tbRf90Bl8kLDf0ZbE9r7kllyykM=
@


1.1
log
@Initial revision
@
text
@d1 5
a5 5
MD5 (leveldb-0.0.48.tar.gz) = EpwqrYc2JOX3ml3Td4gmnQ==
RMD160 (leveldb-0.0.48.tar.gz) = u1efJYCf33kWh7Bc4HnqHjhKCaA=
SHA1 (leveldb-0.0.48.tar.gz) = CzmBnOP/olwh4pZec8wAjq4363U=
SHA256 (leveldb-0.0.48.tar.gz) = a9D1oDdS0PjXWoEh22r23vRDkaPdzHQjE6xnwMhYQLg=
SIZE (leveldb-0.0.48.tar.gz) = 174794
@


1.1.1.1
log
@import leveldb, svn rev 48

LevelDB is a fast key-value storage library written at Google that
provides an ordered mapping from string keys to string values.

Features:
  - Keys and values are arbitrary byte arrays.
  - Data is stored sorted by key.
  - Callers can provide a custom comparison function to override
    the sort order.
  - The basic operations are Put(key,value), Get(key), Delete(key).
  - Multiple changes can be made in one atomic batch.
  - Users can create a transient snapshot to get a consistent view
    of data.
  - Forward and backward iteration is supported over the data.

ok sthen@@
@
text
@@
