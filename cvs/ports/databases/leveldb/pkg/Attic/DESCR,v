head	1.2;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.22
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.20
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.16
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.18
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.12
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.10
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jasper_20111908:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.08.22.06.03.10;	author jasper;	state dead;
branches;
next	1.1;
commitid	lvamVvfI1CKgrIz7;

1.1
date	2011.08.19.06.44.00;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.08.19.06.44.00;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@level this port to the ground; while upstream moved forward this one
never leveled up and stuck behind.

ok fcambus@@ jmatthew@@
@
text
@LevelDB is a fast key-value storage library written at Google that
provides an ordered mapping from string keys to string values.

Features:
  - Keys and values are arbitrary byte arrays.
  - Data is stored sorted by key.
  - Callers can provide a custom comparison function to override
    the sort order.
  - The basic operations are Put(key,value), Get(key), Delete(key).
  - Multiple changes can be made in one atomic batch.
  - Users can create a transient snapshot to get a consistent view
    of data.
  - Forward and backward iteration is supported over the data.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import leveldb, svn rev 48

LevelDB is a fast key-value storage library written at Google that
provides an ordered mapping from string keys to string values.

Features:
  - Keys and values are arbitrary byte arrays.
  - Data is stored sorted by key.
  - Callers can provide a custom comparison function to override
    the sort order.
  - The basic operations are Put(key,value), Get(key), Delete(key).
  - Multiple changes can be made in one atomic batch.
  - Users can create a transient snapshot to get a consistent view
    of data.
  - Forward and backward iteration is supported over the data.

ok sthen@@
@
text
@@
