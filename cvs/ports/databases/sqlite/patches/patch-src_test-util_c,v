head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.48
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.46
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.44
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.40
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.42
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.38
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.36
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.34
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.32
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.30
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.28
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.26
	OPENBSD_5_0:1.1.0.24
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.22
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.20
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.18
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.16
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.14
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.12
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.10
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.8
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2005.12.21.07.58.32;	author jolan;	state Exp;
branches;
next	;


desc
@@


1.1
log
@fix crashes on amd64
@
text
@$OpenBSD$
--- src/test-util.c.orig	Wed Dec 21 01:51:05 2005
+++ src/test-util.c	Wed Dec 21 01:53:15 2005
@@@@ -0,0 +1,47 @@@@
+#include <inttypes.h>
+#include <assert.h>
+#include "test-util.h"
+
+/*
+** Translate a single byte of Hex into an integer.
+*/
+static int hexToInt(int h){
+  if( h>='0' && h<='9' ){
+    return h - '0';
+  }else if( h>='a' && h<='f' ){
+    return h - 'a' + 10;
+  }else if( h>='A' && h<='F' ){
+    return h - 'A' + 10;
+  }else{
+    return 0;
+  }
+}
+
+#if defined(SQLITE_TEST)
+/*
+** Convert text generated by the "%p" conversion format back into
+** a pointer.
+*/
+void *sqliteTextToPtr(const char *z){
+  void *p;
+  uint64_t v;
+  uint32_t v2;
+  if( z[0]=='0' && z[1]=='x' ){
+    z += 2;
+  }
+  v = 0;
+  while( *z ){
+    v = (v<<4) + hexToInt(*z);
+    z++;
+  }
+  if( sizeof(p)==sizeof(v) ){
+    p = *(void**)&v;
+  }else{
+    assert( sizeof(p)==sizeof(v2) );
+    v2 = (uint32_t)v;
+    p = *(void**)&v2;
+  }
+  return p;
+}
+#endif
+
@
