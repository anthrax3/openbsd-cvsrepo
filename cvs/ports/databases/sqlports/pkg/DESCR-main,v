head	1.18;
access;
symbols
	OPENBSD_6_1:1.17.0.4
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.16.0.4
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.2
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.18
date	2017.05.12.18.18.09;	author espie;	state Exp;
branches;
next	1.17;
commitid	Uwx4APJXP8J8tEhx;

1.17
date	2016.03.20.20.03.07;	author naddy;	state Exp;
branches;
next	1.16;
commitid	43tYUQxcFrr8eCa8;

1.16
date	2014.11.04.10.44.33;	author espie;	state Exp;
branches;
next	1.15;
commitid	aLXrBrnsEkjiD3Oy;

1.15
date	2014.07.12.17.35.32;	author espie;	state Exp;
branches;
next	1.14;
commitid	g9GVMnSaykPGUXLd;

1.14
date	2013.06.21.10.48.38;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.31.09.43.13;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.11.11.53.51;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.06.10.22.17;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.22.12.04.02;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.05.20.11.06.08;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.28.11.40.34;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.10.08.48.15;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.10.18.01.13;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.26.20.32.38;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.02.10.26.17;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.21.15.18.03;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.17.13.06.49;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.19.23.50.54;	author espie;	state Exp;
branches;
next	;


desc
@@


1.18
log
@support WANT_CXX and LIBECXX in sqlports
@
text
@SQLite database of every port in the system. This can be queried through
e.g., sqlitebrowser, or any kind of programming interface.

This is more suitable for human consumption, use sqlite-compact for
more structured information.

Database Schema:
- Ports(FULLPKGPATH, ...)
holds all the information retrieved through various variables, e.g.,:
    AUTOCONF_VERSION 
    AUTOMAKE_VERSION 
    BROKEN 
    *DEPENDS 
    CATEGORIES
    COMMENT 
    CONFIGURE_STYLE 
    DESCR 
    DISTFILES 
    DISTNAME 
    DIST_SUBDIR 
    EPOCH
    FLAVORS 
    FULLPKGNAME
    GH_*
    HOMEPAGE 
    IS_INTERACTIVE 
    MAINTAINER
    MAKEFILE_LIST
    MASTER_SITES*
    MODULES 
    MULTI_PACKAGES 
    NO_*
    NOT_FOR_ARCHS
    ONLY_FOR_ARCHS 
    PERMIT_*
    PKGNAME 
    PKGSPEC
    PKG_ARCH 
    PREFIX
    PSEUDO_FLAVOR
    PSEUDO_FLAVORS 
    TEST_IS_INTERACTIVE 
    REVISION
    SEPARATE_BUILD 
    SHARED_LIBS 
    SUBPACKAGE 
    SUPDISTFILES 
    TARGETS
    USE_*
    WANTLIB 
    README
    WANT_CXX

This information is mostly unchanged, except for replacing Yes/No variables
with 1/0. Variables not present in a given port are left undefined.

README corresponds to README files (full text value) and only exists when
such files are present.

Note that USE_LIBTOOL is 3-valued: 2 is gnu, 1 is yes, undef is no.

The FULLPKGPATH is complete, including flavor and pseudo-flavors markers.
For every port with MULTI_PACKAGES settings, one entry is written for 
each SUBPACKAGE.

- Paths (FULLPKGPATH, PKGPATH, CANONICAL)
PKGPATH is the stripped down version or FULLPKGPATH, without flavors 
or subpackage markers.
CANONICAL points to the reduced version.

- Flavors(FULLPKGPATH, VALUE)
- Categories(FULLPKGPATH, VALUE)
- Multi(FULLPKGPATH, VALUE, SUBPKGPATH)
- Makefiles(FULLPKGPATH, VALUE)
- Modules(FULLPKGPATH, VALUE)
- Configure(FULLPKGPATH, VALUE)
- ConfigureArgs(FULLPKGPATH, VALUE)
- NotForArch(FULLPKGPATH, VALUE)
- OnlyForArch(FULLPKGPATH, VALUE)
- Targets(FULLPKGPATH, VALUE)
All of these variable values are actually lists. These lists are taken apart
and result in many entries in these secondary tables (or none if the list
is completely empty)

Makefiles holds the stuff from MAKEFILE_LIST that's specific to a given port
with all default entries stripped away.

- Depends(FULLPKGPATH, FULLDEPENDS, PKGSPEC, REST, DEPENDSPATH, TYPE)
All depends are stored in a single table, including the type:
R -> run
L -> lib
B -> build
T -> test
with FULLDEPENDS the full text of the dependency, DEPENDSPATH the PKGPATH
we depend upon, PKGSPEC the spec we depend upon (if explicit), and REST
the rest.
- Wantlib(FULLPKGPATH, VALUE)
All the libraries the FULLPKGPATH depends upon, with and without version number,
coming from either the WANTLIB variable or various LIB_DEPENDS.

- Multi(FULLPKGPATH, VALUE, SUBPKGPATH)
with SUBPKGPATH the normalized pkgpath for that subpackage.

- BROKEN(FULLPKGPATH, ARCH, VALUE)
All the broken entries, which might be arch-dependent.

- Shared_Libs(FULLPKGPATH, LIBNAME, VERSION)
@


1.17
log
@drop SHARED_ONLY from the variables available in the database; ok jca@@
@
text
@d52 1
@


1.16
log
@add support for MAKEFILE_LIST
@
text
@a45 1
    SHARED_ONLY 
@


1.15
log
@support GH_* variables
@
text
@d28 1
d74 1
d84 3
@


1.14
log
@also store PREFIX, which allows for useful statistics
@
text
@d24 1
@


1.13
log
@add README support
@
text
@d37 1
@


1.12
log
@REGRESS -> TEST, more fun here
@
text
@d49 2
d53 3
@


1.11
log
@more stuff than the DESCR says, bump rev.
@
text
@d39 1
a39 1
    REGRESS_IS_INTERACTIVE 
d81 1
a81 1
Regress -> regress
@


1.10
log
@tweak: MULTI table now holds pointer to the corresponding subpackage path
@
text
@d23 1
@


1.9
log
@more surgery:
- don't ask the database about existing pathkeys, it's simpler to have
our hash.
- in dependencies, don't like for non normalized pathkeys
- add CANONICAL column, and fill it.
@
text
@d64 1
a64 1
- Multi(FULLPKGPATH, VALUE)
d87 3
@


1.8
log
@fix description of DEPENDS table.
@
text
@d53 3
a55 3
The FULLPKGPATH is complete, including flavors markers (but not pseudo 
flavors, tack on PSEUDO_FLAVOR for that). For every port with MULTI_PACKAGES 
settings, one entry is written for each SUBPACKAGE.
d57 1
a57 1
- Paths (FULLPKGPATH, PKGPATH)
d60 1
@


1.7
log
@store PSEUDO_FLAVOR along. tweak descriptions a bit.
@
text
@d74 1
a74 1
- Depends(FULLPKGPATH, FULLDEPENDS, DEPENDSPATH, TYPE)
d80 3
a82 2
with FULLDEPENDS the full text of the dependency, and DEPENDSPATH the PKGPATH
we depend upon.
@


1.6
log
@adjust after recent lesstif removal

ok aja@@ sthen@@
@
text
@d36 1
d53 3
a55 2
The FULLPKGPATH is complete, including flavors markers. For each port with
MULTI_PACKAGES setting, another entry is written with the correct SUBPACKAGE.  
@


1.5
log
@handle USE_MOTIF, add PKGSPEC
@
text
@a51 3
Note that USE_MOTIF is 4-valued: 1 is openmotif, 2 is lestif, 3 is any/yes,
undef is no.

@


1.4
log
@USE_LIBTOOL is 3-valued.
register TARGETS
@
text
@d34 1
d50 4
a53 1
Note that USE_LIBTOOL can be 2 (gnu), 1 (yes), or undef.
@


1.3
log
@output EPOCH and REVISION in dump-vars, and use it in sqlports.
ok espie@@ (with a reminder to add EPOCH, my first diff just had REVISION).
@
text
@d43 1
d49 2
d66 1
@


1.2
log
@a few minor tidying.
commit to db only at end of port (referential integrity for later)
handle BROKEN-arch and create new table/view based on that.
@
text
@d21 1
d37 1
@


1.1
log
@new version, lots of code refactoring, and a new compact database.
@
text
@d77 3
@

