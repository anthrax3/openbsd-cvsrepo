head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.8
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7;
locks; strict;
comment	@# @;


1.13
date	2015.04.19.12.08.02;	author espie;	state Exp;
branches;
next	1.12;
commitid	tB9sPkOJYeMqAhV4;

1.12
date	2013.03.11.11.53.51;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.05.20.11.06.07;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.18.12.11.28;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.02.16.19.54;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.26.20.11.12;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.26.08.52.09;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.17.14.48.15;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.17.14.37.02;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.17.13.06.49;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.17.09.33.18;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.13.10.56.42;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.13.10.23.53;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@track first dependency parent so that we can display it, instead
of the user having to figure out where the broken dependency comes from
by inspecting the partial database.
@
text
@#! /usr/bin/perl
# $OpenBSD: Inserter.pm,v 1.12 2013/03/11 11:53:51 espie Exp $
#
# Copyright (c) 2006-2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package Composite;
sub AUTOLOAD
{
	our $AUTOLOAD;
	my $fullsub = $AUTOLOAD;
	(my $sub = $fullsub) =~ s/.*:://o;
	return if $sub eq 'DESTROY'; # special case
	my $self = $_[0];
	# verify it makes sense
	if ($self->element_class->can($sub)) {
		no strict "refs";
		# create the sub to avoid regenerating further calls
		*$fullsub = sub {
			my $self = shift;
			$self->visit($sub, @@_);
		};
		# and jump to it
		goto &$fullsub;
	} else {
		die "Can't call $sub on ".ref($self);
	}
}


package InserterList;
our @@ISA = qw(Composite);
sub element_class() { 'NormalInserter' }

sub new
{
	my $class = shift;
	bless [], $class;
}

sub add
{
	my $self = shift;
	push(@@$self, @@_);
}

sub visit
{
	my ($self, $method, @@r) = @@_;
	for my $i (@@$self) {
		$i->$method(@@r);
	}
}

package AbstractInserter;
# this is the object to use to put stuff into the db...
sub new
{
	my ($class, $db, $i, $verbose) = @@_;
	$db->do("PRAGMA foreign_keys=ON");
	bless {
		db => $db,
		transaction => 0,
		threshold => $i,
		vars => {},
		tables_created => {},
		errors => [],
		done => {},
		todo => {},
		verbose => $verbose,
	}, $class;
}

sub add_error
{
}

sub write_log
{
}

sub current_path
{
	my $self = shift;
	return $self->{current_path};
}

sub set_newkey
{
	my ($self, $key) = @@_;
	$self->{current_path} = $key;
}

sub create_tables
{
	my ($self, $vars) = @@_;

	$self->create_path_table;
	while (my ($name, $varclass) = each %$vars) {
		$varclass->prepare_tables($self, $name);
	}

	$self->create_ports_table;
	$self->prepare_normal_inserter('Ports', @@{$self->{varlist}});
	$self->prepare_normal_inserter('Paths', 'PKGPATH', 'CANONICAL');
	$self->create_view_info;
	$self->commit_to_db;
	print '-'x50, "\n" if $self->{verbose};
}

sub handle_column
{
	my ($self, $column) = @@_;
	push(@@{$self->{varlist}}, $column->{name});
	push(@@{$self->{columnlist}}, $column);
}

sub create_view_info
{
}

sub map_columns
{
	my ($self, $mapper, $o, @@columns) = @@_;
	$mapper .= '_schema';
	return grep {defined $_} (map {$_->$mapper($o)} @@columns);
}

sub make_table
{
	my ($self, $class, $constraint, @@columns) = @@_;

	return if defined $self->{tables_created}->{$class->table};

	unshift(@@columns, PathColumn->new);
	for my $c (@@columns) {
		$c->set_vartype($class) unless defined $c->{vartype};
	}
	my @@l = $self->map_columns('normal', $self, @@columns);
	push(@@l, $constraint) if defined $constraint;
	$self->new_table($class->table, @@l);
}

sub set
{
	my ($self, $ref) = @@_;
	$self->{ref} = $ref;
}

sub db
{
	return shift->{db};
}

sub last_id
{
	return shift->db->func('last_insert_rowid');
}

sub insert_done
{
	my $self = shift;
	$self->{transaction}++;
}

sub new_table
{
	my ($self, $name, @@cols) = @@_;

	return if defined $self->{tables_created}->{$name};

	$self->db->do("DROP TABLE IF EXISTS $name");
	my $request = "CREATE TABLE $name (".join(', ', @@cols).")";
	print "$request\n" if $self->{verbose};
	$self->db->do($request);
	$self->{tables_created}->{$name} = 1;
}

sub prepare
{
	my ($self, $s) = @@_;
	return $self->db->prepare($s);
}

sub prepare_inserter
{
	my ($ins, $table, @@cols) = @@_;
	$ins->{insert}->{$table} = $ins->prepare(
	    "INSERT OR REPLACE INTO $table (".
	    join(', ', @@cols).
	    ") VALUES (".
	    join(', ', map {'?'} @@cols).")");
}

sub prepare_normal_inserter
{
	my ($ins, $table, @@cols) = @@_;
	$ins->prepare_inserter($table, "FULLPKGPATH", @@cols);
}

sub finish_port
{
	my $self = shift;
	my @@values = ($self->ref);
	for my $i (@@{$self->{varlist}}) {
		push(@@values, $self->{vars}->{$i});
	}
	$self->insert('Ports', @@values);
	$self->{vars} = {};
	if ($self->{transaction} >= $self->{threshold}) {
		$self->commit_to_db;
		$self->{transaction} = 0;
	}
}

sub add_to_port
{
	my ($self, $var, $value) = @@_;
	$self->{vars}->{$var} = $value;
}

sub create_ports_table
{
	my $self = shift;

	my @@columns = sort {$a->name cmp $b->name} @@{$self->{columnlist}};
	unshift(@@columns, PathColumn->new);
	my @@l = $self->map_columns('normal', $self, @@columns);
	$self->new_table("Ports", @@l, "UNIQUE(FULLPKGPATH)");
}

sub ref
{
	return shift->{ref};
}

sub insert
{
	my $self = shift;
	my $table = shift;
	$self->{insert}->{$table}->execute(@@_);
	$self->insert_done;
}

sub add_var
{
	my ($self, $v) = @@_;
	$v->add($self);
}

sub commit_to_db
{
	my $self = shift;
	$self->db->commit;
}

package CompactInserter;
our @@ISA = qw(AbstractInserter);

our $c = {
	Library => 0,
	Run => 1,
	Build => 2,
	Test => 3
};

sub convert_depends
{
	my ($self, $value) = @@_;
	return $c->{$value};
}


sub pathref
{
	my ($self, $name) = @@_;
	$name = "FULLPKGPATH" if !defined $name;
	return "$name INTEGER NOT NULL REFERENCES Paths(ID)";
}

sub value
{
	my ($self, $k, $name) = @@_;
	$name = "VALUE" if !defined $name;
	if (defined $k) {
		return "$name INTEGER NOT NULL REFERENCES $k(KEYREF)";
	} else {
		return "$name TEXT NOT NULL";
	}
}

sub optvalue
{
	my ($self, $k, $name) = @@_;
	$name = "VALUE" if !defined $name;
	if (defined $k) {
		return "$name INTEGER REFERENCES $k(KEYREF)";
	} else {
		return "$name TEXT";
	}
}

sub create_view
{
	my ($self, $table, @@columns) = @@_;

	unshift(@@columns, PathColumn->new);
	my $name = "_$table";
	my @@l = $self->map_columns('view', $table, @@columns);
	my @@j = $self->map_columns('join', $table, @@columns);
	my $v = "CREATE VIEW $name AS SELECT ".join(", ", @@l). " FROM ".$table.' '.join(' ', @@j);
	$self->db->do("DROP VIEW IF EXISTS $name");
	print "$v\n" if $self->{verbose};
	$self->db->do($v);
}

sub make_table
{
	my ($self, $class, $constraint, @@columns) = @@_;

	return if defined $self->{tables_created}->{$class->table};

	$self->SUPER::make_table($class, $constraint, @@columns);
	$self->create_view($class->table, @@columns);
}

sub create_path_table
{
	my $self = shift;
	$self->new_table("Paths", "ID INTEGER PRIMARY KEY",
	    "FULLPKGPATH TEXT NOT NULL UNIQUE",
	    "PKGPATH INTEGER REFERENCES Paths(ID)", "CANONICAL INTEGER REFERENCES Paths(ID)");
	$self->{adjust} = $self->db->prepare("UPDATE Paths set canonical=? where id=?");
}

sub handle_column
{
	my ($self, $column) = @@_;
	if (!defined($column->{vartype}->table)) {
		$self->SUPER::handle_column($column);
	}
}

sub create_view_info
{
	my $self = shift;
	my @@columns = sort {$a->name cmp $b->name} @@{$self->{columnlist}};
	$self->create_view("Ports", @@columns);
}

my $path_cache = {};
my $newid = 1;
sub find_pathkey
{
	my ($self, $key) = @@_;

	if (!defined $key or $key eq '') {
		print STDERR "Empty pathkey\n";
		return 0;
	}
	if (defined $path_cache->{$key}) {
		return $path_cache->{$key};
	}

	# if none, we create one
	my $path = $key;
	$path =~ s/\,.*//;
	if ($path ne $key) {
		$path = $self->find_pathkey($path);
	} else {
		$path = $newid;
	}
	$self->insert('Paths', $key, $path, $newid);
	my $r = $self->last_id;
	$path_cache->{$key} = $r;
	$newid++;
	return $r;
}

sub add_path
{
	my ($self, $key, $alias) = @@_;
	$self->{adjust}->execute($path_cache->{$alias}, $path_cache->{$key});
}

sub set_newkey
{
	my ($self, $key) = @@_;

	$self->set($self->find_pathkey($key));
	$self->SUPER::set_newkey($key);
}

sub find_keyword_id
{
	my ($self, $key, $t) = @@_;
	$self->{$t}->{find_key1}->execute($key);
	my $a = $self->{$t}->{find_key1}->fetchrow_arrayref;
	if (!defined $a) {
		$self->{$t}->{find_key2}->execute($key);
		$self->insert_done;
		return $self->last_id;
	} else {
		return $a->[0];
	}
}

sub create_keyword_table
{
	my ($self, $t) = @@_;
	$self->new_table($t,
	    "KEYREF INTEGER PRIMARY KEY AUTOINCREMENT",
	    "VALUE TEXT NOT NULL UNIQUE");
	$self->{$t}->{find_key1} = $self->prepare("SELECT KEYREF FROM $t WHERE VALUE=?");
	$self->{$t}->{find_key2} = $self->prepare("INSERT INTO $t (VALUE) VALUES (?)");
}

sub write_log
{
}

package NormalInserter;
our @@ISA = qw(AbstractInserter);

our $c = {
	Library => 'L',
	Run => 'R',
	Build => 'B',
	Test => 'T'
};

sub add_error
{
	my ($self, $msg) = @@_;
	push(@@{$self->{errors}}, $msg);
}

sub write_log
{
	my ($self, $log) = @@_;

	foreach my $error (@@{$self->{errors}}) {
		print $log $error."\n";
	}
}

sub convert_depends
{
	my ($self, $value) = @@_;
	return $c->{$value};
}

sub create_path_table
{
	my $self = shift;
	$self->new_table("Paths", "FULLPKGPATH TEXT NOT NULL PRIMARY KEY",
	    "PKGPATH TEXT NOT NULL", "CANONICAL TEXT NOT NULL");
}

sub pathref
{
	my ($self, $name) = @@_;
	$name = "FULLPKGPATH" if !defined $name;
	return "$name TEXT NOT NULL";
}

sub value
{
	my ($self, $k, $name) = @@_;
	$name = "VALUE" if !defined $name;
	return "$name TEXT NOT NULL";
}

sub optvalue
{
	my ($self, $k, $name) = @@_;
	$name = "VALUE" if !defined $name;
	return "$name TEXT";
}

sub key
{
	return "TEXT NOT NULL";
}

sub optkey
{
	return "TEXT";
}

sub set_newkey
{
	my ($self, $key) = @@_;

	$self->SUPER::set_newkey($key);
	my $path = $key;
	$path =~ s/\,.*//;
	$self->insert('Paths', $key, $path, $key);
	$self->set($key);
}

sub add_path
{
	my ($self, $key, $alias) = @@_;
	my $path = $key;
	$path =~ s/\,.*//;
	$self->insert('Paths', $key, $path, $alias);
}

sub find_pathkey
{
	my ($self, $key) = @@_;

	return $key;
}

# no keyword for this dude
sub find_keyword_id
{
	my ($self, $key, $t) = @@_;
	return $key;
}

sub create_keyword_table
{
}

1;
@


1.12
log
@REGRESS -> TEST, more fun here
@
text
@d2 1
a2 1
# $OpenBSD: Inserter.pm,v 1.11 2012/05/20 11:06:07 espie Exp $
d96 12
d405 1
d509 1
@


1.11
log
@more surgery:
- don't ask the database about existing pathkeys, it's simpler to have
our hash.
- in dependencies, don't like for non normalized pathkeys
- add CANONICAL column, and fill it.
@
text
@d2 1
a2 1
# $OpenBSD: Inserter.pm,v 1.10 2012/05/18 12:11:28 espie Exp $
d266 1
a266 1
	Regress => 3
d430 1
a430 1
	Regress => 'Regress'
@


1.10
log
@bite the bullet, reuse dpb's algorithm to make sure we get correct
PkgPath.

This implies restructuring the database code, and the start of a
better separation between variables handling, and actual insertion
in the database.

bump version to 2.0: this changes the paths that actually get recorded,
and pkglocatedb will need to be aware of that.
@
text
@d2 1
a2 1
# $OpenBSD: Inserter.pm,v 1.9 2011/03/02 16:19:54 espie Exp $
d107 1
a107 1
	$self->prepare_normal_inserter('Paths', 'PKGPATH');
d175 3
a177 3
	print "CREATE TABLE $name (".join(', ', @@cols).")\n"
	    if $self->{verbose};
	$self->db->do("CREATE TABLE $name (".join(', ', @@cols).")");
d334 2
a335 1
	    "PKGPATH INTEGER REFERENCES Paths(ID)");
a350 2
	$self->{find_pathkey} =
	    $self->prepare("SELECT ID From Paths WHERE FULLPKGPATH=?");
d353 2
d363 3
d367 5
a371 14
	# get pathkey for existing value
	$self->{find_pathkey}->execute($key);
	my $z = $self->{find_pathkey}->fetchrow_arrayref;
	if (!defined $z) {
		# if none, we create one
		my $path = $key;
		$path =~ s/\,.*//;
		if ($path ne $key) {
			$path = $self->find_pathkey($path);
		} else {
			$path = undef;
		}
		$self->insert('Paths', $key, $path);
		return $self->last_id;
d373 1
a373 1
		return $z->[0];
d375 11
d458 1
a458 1
	    "PKGPATH TEXT NOT NULL");
d498 1
a498 1
	$self->insert('Paths', $key, $path);
d500 8
@


1.9
log
@tweak the way mksqlitedb work: keep looking at dependencies after we do
the main tree.

initial work by florent tribouilloy

a bit of clean-up from me.
@
text
@d2 1
a2 1
# $OpenBSD: Inserter.pm,v 1.8 2010/11/26 20:11:12 espie Exp $
a91 8
sub add_todo
{
}

sub mark_done
{
}

d102 1
a102 2
		$self->handle_column($varclass->column($name));
		$varclass->create_table($self);
a430 12
}

sub add_todo
{
	my ($self, $path) = @@_;
	$self->{todo}{$path} = 1;
}

sub mark_done
{
	my ($self, $path) = @@_;
	$self->{done}{$path} = 1;
@


1.8
log
@report Yes/No variables with wrong values.
common work with Florent Tribouilloy

also rework Yes/No variables as valued variables.
@
text
@d2 1
a2 1
# $OpenBSD: Inserter.pm,v 1.7 2010/04/26 08:52:09 espie Exp $
d82 2
d92 8
d440 12
@


1.7
log
@minor tweaks + whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d81 1
d86 8
d412 4
d425 15
@


1.6
log
@simplify mapping slightly for now...
@
text
@d76 3
a78 3
		db => $db, 
		transaction => 0, 
		threshold => $i, 
d165 1
a165 1
	print "CREATE TABLE $name (".join(', ', @@cols).")\n" 
d183 1
a183 1
	    ") VALUES (". 
d322 3
a324 3
	$self->new_table("Paths", "ID INTEGER PRIMARY KEY", 
	    "FULLPKGPATH TEXT NOT NULL UNIQUE", "PKGPATH INTEGER");

d340 2
a341 2
	$self->{find_pathkey} =  
	    $self->prepare("SELECT ID From Paths WHERE FULLPKGPATH=(?)");
d397 1
a397 1
	    "KEYREF INTEGER PRIMARY KEY AUTOINCREMENT", 
d399 1
a399 1
	$self->{$t}->{find_key1} = $self->prepare("SELECT KEYREF FROM $t WHERE VALUE=(?)");
d422 1
a422 1
	$self->new_table("Paths", "FULLPKGPATH TEXT NOT NULL PRIMARY KEY", 
@


1.5
log
@turn on foreign key constraints, as they seem to work ;-)
@
text
@d114 7
d131 1
a131 1
	my @@l = map {$_->normal_schema($self)} @@columns;
d220 1
a220 1
	my @@l = map {$_->normal_schema($self)} @@columns;
d301 2
a302 2
	my @@l = map {$_->view_schema($table) } @@columns;
	my @@j = map {$_->join_schema($table)} @@columns;
@


1.4
log
@a few minor tidying.
commit to db only at end of port (referential integrity for later)
handle BROKEN-arch and create new table/view based on that.
@
text
@d74 1
@


1.3
log
@sanitize code, no functional changes
@
text
@d21 1
a21 13
package InserterList;
sub new
{
	my $class = shift;
	bless [], $class;
}

sub add
{
	my $self = shift;
	push(@@$self, @@_);
}

d28 1
d30 1
a30 1
	if (NormalInserter->can($sub)) {
d40 1
a40 1
		die "Can't call $sub on ", __PACKAGE__;
d44 17
d98 1
a98 1
	$self->db->commit;
d147 1
a147 3
	if ($self->{transaction}++ % $self->{threshold} == 0) {
		$self->db->commit;
	}
d194 4
d242 1
a242 1
our @@ISA=(qw(AbstractInserter));
d396 1
a396 1
our @@ISA=(qw(AbstractInserter));
@


1.2
log
@rename stuff to try to make it clearer.
@
text
@d2 1
a2 1
# $OpenBSD: Inserter.pm,v 1.1 2010/04/13 10:23:53 espie Exp $
d21 42
d67 1
a67 1
	my ($class, $db, $i) = @@_;
d73 2
a74 1
		tables_created => {}
d78 29
d153 2
a154 1
	print "CREATE TABLE $name (".join(', ', @@cols).")\n" if $main::opt_v;
d198 1
a198 1
sub create_other_tables
a201 1
	$self->db->commit;
a205 2
	$self->prepare_normal_inserter('Ports', @@{$self->{varlist}});
	$self->prepare_normal_inserter('Paths', 'PKGPATH');
d221 12
d289 1
a289 1
	print "$v\n" if $main::opt_v;
d303 1
a303 1
sub create_tables
d305 1
a305 3
	my ($self, $vars) = @@_;
	# create the various tables, dropping old versions

d309 7
a315 7
	while (my ($name, $class) = each %$vars) {
		my $c = $class->column($name);
		if (!defined( $class->table )) {
			push(@@{$self->{varlist}}, $name);
			push(@@{$self->{columnlist}}, $c);
		}
		$class->create_table($self);
d317 1
d319 3
a321 1
	$self->create_other_tables;
d403 1
a403 1
sub create_tables
d405 1
a405 3
	my ($self, $vars) = @@_;
	# create the various tables, dropping old versions

a407 8
	while (my ($name, $class) = each %$vars) {
		push(@@{$self->{varlist}}, $name);
		push(@@{$self->{columnlist}}, $class->column($name));
		$class->create_table($self);
	}

	$self->create_other_tables;

@


1.1
log
@cut script into smaller pieces, since it becomes hard to manage
@
text
@d2 1
a2 1
# $OpenBSD$
d43 1
a43 1
		$c->set_class($class) unless defined $c->{class};
d45 1
a45 1
	my @@l = map {$_->render($self)} @@columns;
d125 1
a125 1
sub create_tables
d127 1
a127 1
	my ($self, $vars) = @@_;
d132 1
a132 1
	my @@l = map {$_->render($self)} @@columns;
d203 2
a204 2
	my @@l = map {$_->render_view($table) } @@columns;
	my @@j = map {$_->render_join($table)} @@columns;
d238 1
a238 1
	$self->SUPER::create_tables($vars);
d333 1
a333 1
	$self->SUPER::create_tables($vars);
@

