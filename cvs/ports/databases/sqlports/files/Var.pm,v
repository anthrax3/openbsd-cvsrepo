head	1.25;
access;
symbols
	OPENBSD_6_1:1.24.0.8
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.24.0.6
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.2
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.2
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5;
locks; strict;
comment	@# @;


1.25
date	2017.06.05.14.48.09;	author espie;	state Exp;
branches;
next	1.24;
commitid	yuJSn2fmRe2NrSlB;

1.24
date	2015.04.19.12.08.02;	author espie;	state Exp;
branches;
next	1.23;
commitid	tB9sPkOJYeMqAhV4;

1.23
date	2014.11.04.10.44.33;	author espie;	state Exp;
branches;
next	1.22;
commitid	aLXrBrnsEkjiD3Oy;

1.22
date	2013.11.01.14.50.11;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2013.06.23.08.58.07;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.21.10.48.38;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.31.09.43.13;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.11.11.53.51;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.08.10.04.01;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.14.13.09.54;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2012.05.22.12.04.02;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2012.05.20.11.06.07;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2012.05.18.12.11.28;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.26.22.30.30;	author kili;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.10.18.01.13;	author jasper;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.02.16.19.54;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.26.20.32.38;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.26.20.11.12;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.14.08.42.00;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.02.10.26.17;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.26.10.20.50;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.17.13.06.49;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.17.09.33.18;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.13.10.56.42;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.13.10.23.53;	author espie;	state Exp;
branches;
next	;


desc
@@


1.25
log
@add COMPILER_LINKS. Tweak USE_WXNEEDED to support a 3rd option (special)
@
text
@# $OpenBSD: Var.pm,v 1.24 2015/04/19 12:08:02 espie Exp $
#
# Copyright (c) 2006-2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# use a Template Method approach to store the variable values.

# rule: we store each value in the main table, after converting YesNo
# variables to undef/1. Then, in addition, we process specific variables
# to store them in secondary tables (because of one/many associations).

package AnyVar;
sub columntype() { 'OptTextColumn' }
sub table() { undef }
sub keyword_table() { undef }

sub new
{
	my ($class, $var, $value, $arch) = @@_;
	die "No arch for $var" if defined $arch;
	bless [$var, $value], $class;
}

sub var
{
	return shift->[0];
}

sub value
{
	return shift->[1];
}

sub words
{
	my $self = shift;
	my $v = $self->value;
	$v =~ s/^\s+//;
	$v =~ s/\s+$//;
	return split(/\s+/, $v);
}

sub add
{
	my ($self, $ins) = @@_;
	$ins->add_to_port($self->var, $self->value);
}

sub add_value
{
	my ($self, $ins, $value) = @@_;
	$ins->add_to_port($self->var, $value);
}

sub column
{
	my ($self, $name) = @@_;
	return $self->columntype->new($name)->set_vartype($self);
}

sub prepare_tables
{
	my ($self, $inserter, $name) = @@_;
	$inserter->handle_column($self->column($name));
	$self->create_tables($inserter);
}

sub keyword
{
	my ($self, $ins, $value) = @@_;
	return $ins->find_keyword_id($value, $self->keyword_table);
}

sub create_keyword_table
{
	my ($self, $inserter) = @@_;
	if (defined $self->keyword_table) {
		$inserter->create_keyword_table($self->keyword_table);
	}
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$self->create_keyword_table($inserter);
}

sub insert
{
	my $self = shift;
	my $ins = shift;
	$ins->insert($self->table, @@_);
}

sub normal_insert
{
	my $self = shift;
	my $ins = shift;
    	$ins->insert($self->table, $ins->ref, @@_);
}

# for distinction later
package FullpkgnameVar;
our @@ISA = qw(AnyVar);

# for variables we want to know about, but not register in the db
package IgnoredVar;
our @@ISA = qw(AnyVar);
sub add
{
}

sub prepare_tables
{
}

package KeyVar;
our @@ISA = qw(AnyVar);
sub columntype() { 'ValueColumn' }

sub add
{
	my ($self, $ins) = @@_;
	$self->add_value($ins, $self->keyword($ins, $self->value));
}


package ArchKeyVar;
our @@ISA = qw(KeyVar);
sub keyword_table() { 'Arch' }

package PrefixKeyVar;
our @@ISA = qw(KeyVar);
sub keyword_table() { 'Prefix' }

package OptKeyVar;
our @@ISA = qw(KeyVar);
sub columntype() { 'OptValueColumn' }

sub add
{
	my ($self, $ins) = @@_;
	if ($self->value ne '') {
		$self->SUPER::add($ins);
	}
}

package ArchDependentVar;
our @@ISA = qw(AnyVar);
sub keyword_table() { 'Arch' }

sub new
{
	my ($class, $var, $value, $arch) = @@_;
	bless [$var, $value, $arch], $class;
}

sub arch
{
	return shift->[2];
}

sub add
{
	my ($self, $ins) = @@_;

	my $arch = $self->arch;
	if (defined $arch) {
		$arch = $self->keyword($ins, $arch);
	} else {
		$self->SUPER::add($ins);
	}
	$self->normal_insert($ins, $arch, $self->value);
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$self->create_keyword_table($inserter);
	$inserter->make_table($self, 'UNIQUE(FULLPKGPATH, ARCH, VALUE)',
	    OptValueColumn->new("ARCH"),
	    TextColumn->new("VALUE"));
	$inserter->prepare_normal_inserter($self->table,
	    "ARCH", "VALUE");
}

package BrokenVar;
our @@ISA = qw(ArchDependentVar);
sub table() { 'Broken' }

package ValuedVar;
our @@ISA = qw(AnyVar);
sub columntype() { 'OptIntegerColumn' }

sub find_value
{
	my ($self, $ins) = @@_;

	my $key = $self->value;
	my $h = $self->values;
	while (my ($v, $k) = each %$h) {
		if ($key =~ m/$v/i) {
			return $k;
		}
	}
	$ins->add_error($self->var." has unknown value $key in ".$ins->{ref});
	return undef;
}

sub add
{
	my ($self, $ins) = @@_;
	if (defined $self->value) {
		$self->add_value($ins, $self->find_value($ins));
	} else {
		$self->add_value($ins, undef);
	}
}

package YesNoVar;
our @@ISA = qw(ValuedVar);
sub values
{
	return { 
	    	yes => 1,
		no => undef 
	};
}

package StaticPlistVar;
our @@ISA = qw(YesNoVar);

package YesNoGnuVar;
our @@ISA = qw(ValuedVar);

sub values
{
	return { 
		yes => 1,
		gnu => 2,
		no => undef
	}
}

package YesNoSpecialVar;
our @@ISA = qw(ValuedVar);

sub values
{
	return { 
		yes => 1,
		special => 2,
		no => undef
	}
}

# variable is always defined, but we don't need to store empty values.
package DefinedVar;
our @@ISA = qw(AnyVar);

sub add
{
	my ($self, $ins) = @@_;
	return if $self->value eq '';
	$self->SUPER::add($ins);
}


# all the dependencies are converted into list. Stuff like LIB_DEPENDS will
# end up being treated as WANTLIB as well.
package DependsVar;
our @@ISA = qw(AnyVar);
sub table() { 'Depends' }

sub add
{
	my ($self, $ins) = @@_;
	$self->SUPER::add($ins);
	for my $depends ($self->words) {
		$depends =~ s/^\:+//;
		my ($pkgspec, $pkgpath2, $rest) = split(/\:/, $depends);
		if ($pkgspec =~ m/\//) {
			($pkgspec, $pkgpath2, $rest) = 
			    ('', $pkgspec, $pkgpath2);
		}
		if (!defined $pkgpath2) {
			print STDERR "Wrong depends $depends\n";
			return;
		}
		my $p = PkgPath->new($pkgpath2);
		$p->{want} = 1;
		$p->{parent} //= $ins->current_path;
		$self->normal_insert($ins, $depends,
		    $ins->find_pathkey($p->fullpkgpath),
		    $ins->convert_depends($self->depends_type),
		    $pkgspec, $rest);
# XXX		    $ins->add_todo($pkgpath2);
	}
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$inserter->make_table($self, undef,
	    TextColumn->new("FULLDEPENDS"),
	    OptTextColumn->new("PKGSPEC"),
	    OptTextColumn->new("REST"),
	    PathColumn->new("DEPENDSPATH"),
	    TextColumn->new("TYPE"));
	$inserter->prepare_normal_inserter($self->table,
	    "FULLDEPENDS", "DEPENDSPATH", "TYPE", "PKGSPEC", "REST");
}

package LibDependsVar;
our @@ISA = qw(DependsVar);
sub depends_type() { 'Library' }

package RunDependsVar;
our @@ISA = qw(DependsVar);
sub depends_type() { 'Run' }

package BuildDependsVar;
our @@ISA = qw(DependsVar);
sub depends_type() { 'Build' }

package TestDependsVar;
our @@ISA = qw(DependsVar);
sub depends_type() { 'Test' }

# Stuff that gets stored in another table
package SecondaryVar;
our @@ISA = qw(KeyVar);
sub keyword_table() { undef }

sub add_value
{
	my ($self, $ins, $value) = @@_;
	$self->normal_insert($ins, $value);
}

sub add_keyword
{
	my ($self, $ins, $value) = @@_;
	$self->add_value($ins, $self->keyword($ins, $value));
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$self->create_keyword_table($inserter);
	$inserter->make_table($self, "UNIQUE(FULLPKGPATH, VALUE)",
	    ValueColumn->new);
	$inserter->prepare_normal_inserter($self->table, "VALUE");
}

package MasterSitesVar;
our @@ISA = qw(OptKeyVar);
sub table() { 'MasterSites' }

sub add
{
	my ($self, $ins) = @@_;
	$self->AnyVar::add($ins);

	my $n;
	if ($self->var =~ m/^MASTER_SITES(\d)$/) {
		$n = $1;
	}
	$self->normal_insert($ins, $n, $self->value);
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$self->create_keyword_table($inserter);
	$inserter->make_table($self, "UNIQUE(FULLPKGPATH, N, VALUE)",
	    OptIntegerColumn->new("N"),
	    ValueColumn->new);
	$inserter->prepare_normal_inserter($self->table, "N", "VALUE");
}

# Generic handling for any blank-separated list
package ListVar;
our @@ISA = qw(SecondaryVar);
sub columntype() { 'OptTextColumn' }

sub add
{
	my ($self, $ins) = @@_;
	$self->AnyVar::add($ins);
	for my $d ($self->words) {
		$self->add_value($ins, $d) if $d ne '';
	}
}

package ListKeyVar;
our @@ISA = qw(SecondaryVar);
sub keyword_table() { 'Keywords' }

sub add
{
	my ($self, $ins) = @@_;
	$self->AnyVar::add($ins);
	for my $d ($self->words) {
		$self->add_keyword($ins, $d) if $d ne '';
	}
}

package QuotedListVar;
our @@ISA = qw(ListVar);

sub add
{
	my ($self, $ins) = @@_;
	$self->AnyVar::add($ins);
	my @@l = ($self->words);
	while (my $v = shift @@l) {
		while ($v =~ m/^[^']*\'[^']*$/ || $v =~m/^[^"]*\"[^"]*$/) {
			$v.=' '.shift @@l;
		}
		if ($v =~ m/^\"(.*)\"$/) {
		    $v = $1;
		}
		if ($v =~ m/^\'(.*)\'$/) {
		    $v = $1;
		}
		$self->add_value($ins, $v) if $v ne '';
	}
}

package DefinedListKeyVar;
our @@ISA = qw(ListKeyVar);
sub columntype() { 'OptValueColumn' }

sub add
{
	my ($self, $ins) = @@_;
	return if $self->value eq '';
	$self->SUPER::add($ins);
}

package FilesListVar;
our @@ISA = qw(DefinedListKeyVar);

my $portsdir = $ENV{PORTSDIR} || '/usr/ports';
sub table() { 'Makefiles' }
sub keyword_table() { 'Filename' }

my $always = {
	map {($_, 1)} (
		'/usr/share/mk/sys.mk', 
		'Makefile',
		'/usr/share/mk/bsd.port.mk',
		'/usr/share/mk/bsd.own.mk',
		'/etc/mk.conf', 
		'${PORTSDIR}/infrastructure/mk/bsd.port.mk',
		'${PORTSDIR}/infrastructure/mk/pkgpath.mk',
		'${PORTSDIR}/infrastructure/mk/arch-defines.mk',
		'${PORTSDIR}/infrastructure/mk/modules.port.mk',
		'${PORTSDIR}/infrastructure/mk/bsd.port.arch.mk',
		'${PORTSDIR}/infrastructure/templates/network.conf.template',
		)
};
	
sub words
{
	my $self = shift;
	my @@result = ();
	for my $x ($self->SUPER::words) {
		$x =~ s,^\Q$portsdir\E/,\$\{PORTSDIR\}/,;
		next if $always->{$x};
		push(@@result, $x);
	}
	return @@result;
}

package FlavorsVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'Flavors' }

package PseudoFlavorsVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'PseudoFlavors' }

package ArchListVar;
our @@ISA = qw(DefinedListKeyVar);
sub keyword_table() { 'Arch' }

package CompilerLinksVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'CompilerLinks' }
sub keyword_table() { 'Compiler' }

package OnlyForArchListVar;
our @@ISA = qw(ArchListVar);
sub table() { 'OnlyForArch' }

package NotForArchListVar;
our @@ISA = qw(ArchListVar);
sub table() { 'NotForArch' }

package CategoriesVar;
our @@ISA = qw(ListKeyVar);
sub table() { 'Categories' }
sub keyword_table() { 'CategoryKeys' }

package TargetsVar;
our @@ISA = qw(ListKeyVar);
sub table() { 'Targets' }
sub keyword_table() { 'TargetKeys' }

package DPBPropertiesVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'DPBProperties' }
sub keyword_table() { 'DPBKeys' }

package MultiVar;
our @@ISA = qw(ListVar);
sub table() { 'Multi' }

sub create_tables
{
	my ($self, $inserter) = @@_;
	$inserter->make_table($self, 'UNIQUE(FULLPKGPATH, VALUE)',
	    TextColumn->new("VALUE"),
	    PathColumn->new("SUBPKGPATH"));
    	$inserter->prepare_normal_inserter($self->table,
	    "VALUE", "SUBPKGPATH");
}

sub new
{
	my ($class, $var, $value, $arch, $path) = @@_;
	die "No arch fo $var" if defined $arch;
	bless [$var, $value, $path], $class;
}

sub path
{
	return shift->[2];
}

sub add
{
	my ($self, $ins) = @@_;
	return if $self->value eq '-';
	my $base = $self->path;
	$self->AnyVar::add($ins);
	for my $d ($self->words) {
		my $path = $base->change_multi($d);
		my $k = $ins->find_pathkey($path->fullpkgpath);
		$self->normal_insert($ins, $d, $k) if $d ne '';
	}
}

package ModulesVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'Modules' }
sub keyword_table() { 'ModuleKeys' }

package ConfigureVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'Configure' }
sub keyword_table() { 'ConfigureKeys' }

package ConfigureArgsVar;
our @@ISA = qw(QuotedListVar);
sub table() { 'ConfigureArgs' }

package WantlibVar;
our @@ISA = qw(ListVar);
sub table() { 'Wantlib' }
sub keyword_table() { 'Library' }

sub _add
{
	my ($self, $ins, $value, $extra) = @@_;
	$self->normal_insert($ins, $self->keyword($ins, $value), $extra);
}

sub add_value
{
	my ($self, $ins, $value) = @@_;
	if ($value =~ m/^(.*)(\.\>?\=\d+\.\d+)$/) {
		$self->_add($ins, $1, $2);
	} elsif ($value =~ m/^(.*)(\.\>?\=\d+)$/) {
		$self->_add($ins, $1, $2);
	} else {
		$self->_add($ins, $value, undef);
	}
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$self->create_keyword_table($inserter);
	$inserter->make_table($self, "UNIQUE(FULLPKGPATH, VALUE)",
	    ValueColumn->new,
	    OptTextColumn->new("EXTRA"));
	$inserter->prepare_normal_inserter($self->table, "VALUE", "EXTRA");
}

package OnlyForArchVar;
our @@ISA = qw(DefinedListKeyVar);
sub table() { 'OnlyForArch' }
sub keyword_table() { 'Arches' }

package FileVar;
our @@ISA = qw(SecondaryVar);

sub add
{
	my ($self, $ins) = @@_;
	$self->AnyVar::add($ins);
	open my $file, '<', $self->value or return;
	local $/ = undef;
	$self->add_value($ins, <$file>);
}

package ReadmeVar;
our @@ISA = qw(FileVar);
sub table() { 'ReadMe' }
sub columntype() { 'OptTextColumn' }

package DescrVar;
our @@ISA = qw(FileVar);
sub table() { 'Descr' }
use File::Basename;

# README does not exist as an actual variable, but it's trivial
# to add it as a subsidiary of DESCR when the file exists.

sub new
{
	my ($class, $var, $value, $arch, $path) = @@_;
	my $dir = dirname($value);
	my $readme = "$dir/README";
	my $multi = $path->multi;
	if (defined $multi) {
		$readme .= $multi;
	}
	if (-e $readme) {
		$path->{info}->create('README', $readme, $arch, $path);
	}

	return $class->SUPER::new($var, $value, $arch, $path);
}


package SharedLibsVar;
our @@ISA = qw(KeyVar);
sub table() { 'Shared_Libs' }
sub keyword_table() { 'Library' }

sub add
{
	my ($self, $ins) = @@_;
	$self->AnyVar::add($ins);
	my %t = $self->words;
	while (my ($k, $v) = each %t) {
		$self->normal_insert($ins, $self->keyword($ins, $k), $v);
	}
}

sub create_tables
{
	my ($self, $inserter) = @@_;
	$self->create_keyword_table($inserter);
	$inserter->make_table($self, "UNIQUE (FULLPKGPATH, LIBNAME)",
	    ValueColumn->new("LIBNAME"),
	    TextColumn->new("VERSION"));
	$inserter->prepare_normal_inserter($self->table, "LIBNAME", "VERSION");
}

package EmailVar;
our @@ISA = qw(KeyVar);
sub keyword_table() { 'Email' }

package YesKeyVar;
our @@ISA = qw(KeyVar);
sub keyword_table() { 'Keywords2' }

package AutoVersionVar;
our @@ISA = qw(OptKeyVar);
sub keyword_table() { 'AutoVersion' }

1;
@


1.24
log
@track first dependency parent so that we can display it, instead
of the user having to figure out where the broken dependency comes from
by inspecting the partial database.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.23 2014/11/04 10:44:33 espie Exp $
d259 12
d502 5
@


1.23
log
@add support for MAKEFILE_LIST
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.22 2013/11/01 14:50:11 espie Exp $
d294 1
@


1.22
log
@specialize FULLKPGNAME and STATIC_PLIST variable classes, to be able to
special-case them easily
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.21 2013/06/23 08:58:07 espie Exp $
d441 35
@


1.21
log
@clean-up the business of variables we silently ignore.
no bump, doesn't affect the built packages at all.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.20 2013/06/21 10:48:38 espie Exp $
d116 4
d243 3
@


1.20
log
@also store PREFIX, which allows for useful statistics
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.19 2013/03/31 09:43:13 espie Exp $
d116 11
a639 11

package IgnoredVar;
our @@ISA = qw(AnyVar);

sub add
{
}

sub prepare_tables
{
}
@


1.19
log
@add README support
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.18 2013/03/11 11:53:51 espie Exp $
d130 4
@


1.18
log
@REGRESS -> TEST, more fun here
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.17 2013/03/08 10:04:01 espie Exp $
d34 1
a34 1
	die "No arch fo $var" if defined $arch;
a548 1
sub table() { 'Descr' }
d558 30
@


1.17
log
@buglet fix
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.16 2013/01/14 13:09:54 espie Exp $
d305 1
a305 1
package RegressDependsVar;
d307 1
a307 1
sub depends_type() { 'Regress' }
@


1.16
log
@integrate DPB_PROPERTIES
(noticed by nigel@@ if memory serves)
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.15 2012/05/22 12:04:02 espie Exp $
d454 1
a454 1
sub keyword_table { 'DPBKeys' }
a455 1
sub keyword_table() { 'TargetKeys' }
@


1.15
log
@tweak: MULTI table now holds pointer to the corresponding subpackage path
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.14 2012/05/20 11:06:07 espie Exp $
d451 6
@


1.14
log
@more surgery:
- don't ask the database about existing pathkeys, it's simpler to have
our hash.
- in dependencies, don't like for non normalized pathkeys
- add CANONICAL column, and fill it.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.13 2012/05/18 12:11:28 espie Exp $
d34 1
a34 1
	print STDERR  "$var-$arch\n" if defined $arch;
d455 22
d481 7
a487 1
	$self->SUPER::add($ins);
@


1.13
log
@bite the bullet, reuse dpb's algorithm to make sure we get correct
PkgPath.

This implies restructuring the database code, and the start of a
better separation between variables handling, and actual insertion
in the database.

bump version to 2.0: this changes the paths that actually get recorded,
and pkglocatedb will need to be aware of that.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.12 2011/11/26 22:30:30 kili Exp $
d273 1
a273 1
		    $ins->find_pathkey($pkgpath2),
@


1.12
log
@Fill in the master_sites* columns of the sqlports.ports table.

From espie@@, after a short discussion on icb.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.11 2011/04/10 18:01:13 jasper Exp $
d75 7
d96 1
a96 1
sub create_table
d171 1
a171 1
sub create_table
d270 2
d276 1
a276 1
		    $ins->add_todo($pkgpath2);
d280 1
a280 1
sub create_table
d326 1
a326 1
sub create_table
d351 1
a351 1
sub create_table
d499 1
a499 1
sub create_table
d542 1
a542 1
sub create_table
d563 11
@


1.11
log
@adjust after recent lesstif removal

ok aja@@ sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.10 2011/03/02 16:19:54 espie Exp $
d333 1
@


1.10
log
@tweak the way mksqlitedb work: keep looking at dependencies after we do
the main tree.

initial work by florent tribouilloy

a bit of clean-up from me.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.9 2010/11/26 20:32:38 espie Exp $
a214 13
	};
}

package MotifVar;
our @@ISA =qw(ValuedVar);
sub values
{
	return {
		lesstif => 2,
		openmotif => 1,
		yes => 3,
		any => 3,
		no => undef
@


1.9
log
@handle USE_MOTIF, add PKGSPEC
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.8 2010/11/26 20:11:12 espie Exp $
d280 1
@


1.8
log
@report Yes/No variables with wrong values.
common work with Florent Tribouilloy

also rework Yes/No variables as valued variables.
@
text
@d1 1
a1 1
# $OpenBSD: Var.pm,v 1.7 2010/11/14 08:42:00 espie Exp $
a209 1
sub columntype() { 'OptIntegerColumn' }
d215 13
@


1.7
log
@prepare for new specs
@
text
@d1 1
a1 2
#! /usr/bin/perl
# $OpenBSD: Var.pm,v 1.6 2010/10/02 10:26:17 espie Exp $
d179 1
a179 1
package YesNoVar;
d183 15
d201 16
a216 1
	$self->add_value($ins, $self->value =~ m/^Yes/i ? 1 : undef);
d220 1
a220 1
our @@ISA = qw(YesNoVar);
d222 1
a222 1
sub add
d224 5
a228 4
	my ($self, $ins) = @@_;
	$self->add_value($ins, 
	    $self->value =~ m/^Gnu/i ? 2 : 
		($self->value =~ m/^Yes/i ? 1 : undef));
a229 1

@


1.6
log
@USE_LIBTOOL is 3-valued.
register TARGETS
@
text
@d2 1
a2 1
# $OpenBSD: Var.pm,v 1.5 2010/04/26 10:20:50 espie Exp $
d225 6
a230 1
		my ($libs, $pkgspec, $pkgpath2, $rest) = split(/\:/, $depends);
a238 5
		if ($libs ne '') {
			for my $lib (split(/\,/, $libs)) {
				$self->add_lib($ins, $lib);
			}
		}
a254 4
sub add_lib
{
}

a257 6

sub add_lib
{
	my ($self, $ins, $lib) = @@_;
	WantlibVar->add_value($ins, $lib);
}
@


1.5
log
@whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d190 12
d416 5
@


1.4
log
@a few minor tidying.
commit to db only at end of port (referential integrity for later)
handle BROKEN-arch and create new table/view based on that.
@
text
@d172 1
a172 1
	$inserter->prepare_normal_inserter($self->table, 
d218 3
a220 3
		$self->normal_insert($ins, $depends, 
		    $ins->find_pathkey($pkgpath2), 
		    $ins->convert_depends($self->depends_type), 
d233 1
a233 1
	$inserter->make_table($self, undef, 
d239 1
a239 1
	$inserter->prepare_normal_inserter($self->table, 
d290 1
a290 1
	$inserter->make_table($self, "UNIQUE(FULLPKGPATH, VALUE)", 
@


1.3
log
@sanitize code, no functional changes
@
text
@d34 2
a35 1
	my ($class, $var, $value) = @@_;
d111 1
a111 1
our @@ISA=(qw(AnyVar));
d122 1
a122 1
our @@ISA=(qw(KeyVar));
d126 1
a126 1
our @@ISA=(qw(KeyVar));
d137 43
d181 1
a181 1
our @@ISA=(qw(AnyVar));
d192 1
a192 1
our @@ISA=(qw(AnyVar));
d205 1
a205 1
our @@ISA=(qw(AnyVar));
d248 1
a248 1
our @@ISA=(qw(DependsVar));
d258 1
a258 1
our @@ISA=(qw(DependsVar));
d262 1
a262 1
our @@ISA=(qw(DependsVar));
d266 1
a266 1
our @@ISA=(qw(DependsVar));
d271 1
a271 1
our @@ISA=(qw(KeyVar));
d296 1
a296 1
our @@ISA=(qw(OptKeyVar));
d322 1
a322 1
our @@ISA=(qw(SecondaryVar));
d335 1
a335 1
our @@ISA=(qw(SecondaryVar));
d348 1
a348 1
our @@ISA=(qw(ListVar));
d370 1
a370 1
our @@ISA=(qw(ListKeyVar));
d381 1
a381 1
our @@ISA=(qw(DefinedListKeyVar));
d385 1
a385 1
our @@ISA=(qw(DefinedListKeyVar));
d389 1
a389 1
our @@ISA=(qw(DefinedListKeyVar));
d393 1
a393 1
our @@ISA=(qw(ArchListVar));
d397 1
a397 1
our @@ISA=(qw(ArchListVar));
d401 1
a401 1
our @@ISA=(qw(ListKeyVar));
d406 1
a406 1
our @@ISA=(qw(ListVar));
d417 1
a417 1
our @@ISA=(qw(DefinedListKeyVar));
d422 1
a422 1
our @@ISA=(qw(DefinedListKeyVar));
d427 1
a427 1
our @@ISA=(qw(QuotedListVar));
d431 1
a431 1
our @@ISA=(qw(ListVar));
d464 1
a464 1
our @@ISA=(qw(DefinedListKeyVar));
d469 1
a469 1
our @@ISA=(qw(SecondaryVar));
d482 1
a482 1
our @@ISA=(qw(KeyVar));
d507 1
a507 1
our @@ISA=(qw(KeyVar));
d511 1
a511 1
our @@ISA=(qw(KeyVar));
d515 1
a515 1
our @@ISA=(qw(OptKeyVar));
@


1.2
log
@rename stuff to try to make it clearer.
@
text
@d2 1
a2 1
# $OpenBSD: Var.pm,v 1.1 2010/04/13 10:23:53 espie Exp $
a20 1
use subs qw(main::words);
d28 4
d48 9
a74 15
sub columntype
{
	return 'OptTextColumn';
}

sub table()
{
	return undef;
}

sub keyword_table()
{
	return undef;
}

d111 2
a118 4
sub columntype
{
	return 'ValueColumn';
}
d122 1
a122 3

sub keyword_table()
{ 'Arch' }
d126 2
a135 5
sub columntype
{
	return 'OptValueColumn';
}

d138 1
a145 5
sub columntype
{
	return 'OptIntegerColumn';
}

a159 1

d162 2
d168 1
a168 1
	for my $depends (main::words $self->value) {
a202 5
sub table()
{
	return "Depends";
}

d228 2
a250 5
sub keyword_table()
{
	return undef;
}

d253 2
a275 5
sub table()
{
	return "MasterSites";
}

d279 1
d285 1
a285 1
	for my $d (main::words $self->value) {
a289 6
sub columntype
{
	my ($self, $name) = @@_;
	return 'OptTextColumn';
}

d292 1
d298 1
a298 1
	for my $d (main::words $self->value) {
a302 5
sub keyword_table()
{
	return "Keywords";
}

d310 1
a310 1
	my @@l = (main::words $self->value);
d327 2
a335 5
sub columntype
{
	return 'OptValueColumn';
}

d389 2
a418 2
sub keyword_table() { 'Library' }

d426 1
a436 2
sub table() { 'Descr' }

d439 2
d446 1
a446 1
	my %t = main::words($self->value);
a461 10
sub table()
{
	"Shared_Libs"
}

sub keyword_table() 
{
	return "Library";
}
	
d464 1
a464 4
sub keyword_table()
{
	return "Email";
}
d468 1
a468 4
sub keyword_table()
{
	return "Keywords2";
}
d472 1
a472 5

sub keyword_table()
{
	return "AutoVersion";
}
@


1.1
log
@cut script into smaller pieces, since it becomes hard to manage
@
text
@d2 1
a2 1
# $OpenBSD$
d60 1
a60 1
	return $self->columntype->new($name)->set_class($self);
@

