head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.28
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.26
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.24
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.20
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8;
locks; strict;
comment	@# @;


1.9
date	2010.10.02.10.26.17;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.26.10.20.50;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.26.10.19.02;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.26.08.52.09;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.25.12.35.26;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.17.14.48.15;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.17.13.06.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.13.10.56.42;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.13.10.23.53;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@USE_LIBTOOL is 3-valued.
register TARGETS
@
text
@#! /usr/bin/perl
# $OpenBSD$
#
# Copyright (c) 2006-2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# The Column hierarchy is mostly responsible for dealing with the database
# schema itself.

package Column;
sub new
{
	my ($class, $name) = @@_;
	$name //= $class->default_name;
	bless {name => $name}, $class;
}

sub set_vartype
{
	my ($self, $vartype) = @@_;

	$self->{vartype} = $vartype;
	return $self;
}

sub name
{
	my $self = shift;
	return $self->{name};
}

sub normal_schema
{
	my ($self, $inserter, $class) = @@_;
	return $self->name." ".$self->sqltype;
}

sub view_schema
{
	my ($self, $t) = @@_;
	return $self->realname($t)." AS ".$self->name;
}

sub realname
{
	my ($self, $t) = @@_;
	return $t.".".$self->name;
}

sub join_schema
{
	return undef;
}

package TextColumn;
our @@ISA = qw(Column);

sub sqltype
{
	return "TEXT NOT NULL";
}

package OptTextColumn;
our @@ISA = qw(TextColumn);

sub sqltype
{
	return "TEXT";
}

package IntegerColumn;
our @@ISA = qw(Column);
sub sqltype
{
	return "INTEGER NOT NULL";
}

package OptIntegerColumn;
our @@ISA = qw(IntegerColumn);
sub sqltype
{
	return "INTEGER";
}

package RefColumn;
our @@ISA = qw(Column);

my $table = "T0001";

sub table
{
	my $self = shift;
	$self->{table} //= $table++;
	return $self->{table};
}

package PathColumn;
our @@ISA = qw(RefColumn);

sub default_name
{
	return "FULLPKGPATH";
}

sub realname
{
	my ($self, $t) = @@_;
	return $self->table.".FULLPKGPATH";
}

sub normal_schema
{
	my ($self, $inserter, $class) = @@_;
	return $inserter->pathref($self->name);
}

sub join_schema
{
	my ($self, $table) = @@_;
	return "JOIN Paths ".$self->{table}." ON ".$self->table.".ID=$table.".$self->name;
}

package ValueColumn;
our @@ISA = qw(RefColumn);

sub default_name
{
	return "VALUE";
}

sub k
{
	my $self = shift;
	return $self->{vartype}->keyword_table;
}

sub normal_schema
{
	my ($self, $inserter) = @@_;
	return $inserter->value($self->k, $self->name);
}

sub realname
{
	my ($self, $t) = @@_;
	if (defined $self->k) {
		return $self->table.".VALUE";
	} else {
		return $self->SUPER::realname($t);
	}
}

sub join_schema
{
	my ($self, $table) = @@_;
	if (defined $self->k) {
		return "JOIN ".$self->k." ".$self->table." ON ".$self->table.".KEYREF=$table.".$self->name;
	}
}

package OptValueColumn;
our @@ISA = qw(ValueColumn);

sub normal_schema
{
	my ($self, $inserter) = @@_;
	return $inserter->optvalue($self->k, $self->name);
}

sub join_schema
{
	my ($self, $table) = @@_;
	return "LEFT ".$self->SUPER::join_schema($table);
}

package OptCoalesceColumn;
our @@ISA = qw(OptValueColumn);

sub realname
{
	my ($self, $t) = @@_;
	return "group_concat(".$self->SUPER::realname($t).", ' ')";
}

package CoalesceColumn;
our @@ISA = qw(ValueColumn);

sub realname
{
	my ($self, $t) = @@_;
	return "group_concat(".$self->SUPER::realname($t).", ' ')";
}

1;
@


1.8
log
@whitespace
@
text
@@


1.7
log
@get ready to coalesce columns
@
text
@d2 1
a2 1
# $OpenBSD: Column.pm,v 1.6 2010/04/26 08:52:09 espie Exp $
@


1.6
log
@minor tweaks + whitespace
@
text
@d2 1
a2 1
# $OpenBSD$
d188 18
@


1.5
log
@view_schema always follows the same format, so just do that...
@
text
@d2 1
a2 1
# $OpenBSD: Column.pm,v 1.4 2010/04/17 14:48:15 espie Exp $
@


1.4
log
@simplify mapping slightly for now...
@
text
@d2 1
a2 1
# $OpenBSD$
d55 7
a61 1
	return $t.".".$self->name." AS ".$self->name;
d119 1
a119 1
sub view_schema
d122 1
a122 1
	return $self->table.".FULLPKGPATH AS ".$self->name;
d157 1
a157 1
sub view_schema
d161 1
a161 1
		return $self->table.".VALUE AS ".$self->name;
d163 1
a163 1
		return $self->SUPER::view_schema($t);
@


1.3
log
@a few minor tidying.
commit to db only at end of port (referential integrity for later)
handle BROKEN-arch and create new table/view based on that.
@
text
@d60 1
a60 1
	return "";
@


1.2
log
@rename stuff to try to make it clearer.
@
text
@d2 1
a2 1
# $OpenBSD: Column.pm,v 1.1 2010/04/13 10:23:53 espie Exp $
d80 1
a80 1
our @@ISA =qw(Column);
@


1.1
log
@cut script into smaller pieces, since it becomes hard to manage
@
text
@d2 1
a2 1
# $OpenBSD$
d21 3
d28 1
a28 3
	if (!defined $name) {
		$name = $class->default_name;
	}
d32 1
a32 1
sub set_class
d34 1
a34 1
	my ($self, $varclass) = @@_;
d36 1
a36 1
	$self->{class} = $varclass;
d46 1
a46 1
sub render
d52 1
a52 1
sub render_view
d58 1
a58 1
sub render_join
d101 1
a101 3
	if (!defined $self->{table}) {
		$self->{table} = $table++;
	}
d113 1
a113 1
sub render_view
d119 1
a119 1
sub render
d125 1
a125 1
sub render_join
d142 1
a142 1
	return $self->{class}->keyword_table;
d145 1
a145 1
sub render
d151 1
a151 1
sub render_view
d157 1
a157 1
		return $self->SUPER::render_view($t);
d161 1
a161 1
sub render_join
d172 1
a172 1
sub render
d178 1
a178 1
sub render_join
d181 1
a181 1
	return "LEFT ".$self->SUPER::render_join($table);
@

