head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.12
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.10
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.10.17.19.13.01;	author jasper;	state Exp;
branches;
next	;
commitid	LvEMNz0ADWwvrFIC;


desc
@@


1.1
log
@enable rspec3 for the do_* gems now that data_objects is really fixed
@
text
@$OpenBSD$

Make this work with rspec3.

--- lib/data_objects/spec/shared/connection_spec.rb.orig	Thu Feb 13 11:57:45 2014
+++ lib/data_objects/spec/shared/connection_spec.rb	Fri Oct 17 21:09:39 2014
@@@@ -65,7 +65,7 @@@@ shared_examples_for 'a Connection' do
       it 'dispose should be true' do
         conn = DataObjects::Connection.new(CONFIG.uri)
         conn.detach
-        conn.dispose.should be_true
+        conn.dispose.should be true
         conn.close
       end
 
@@@@ -84,12 +84,12 @@@@ shared_examples_for 'a Connection' do
         @@closed_connection = nil
       end
 
-      it { @@closed_connection.dispose.should be_false }
+      it { @@closed_connection.dispose.should be_falsy }
 
       it 'should raise an error on creating a command' do
         expect {
           @@closed_connection.create_command("INSERT INTO non_existent_table (tester) VALUES (1)").execute_non_query
-        }.to raise_error(DataObjects::ConnectionError)
+        }.to raise_error
       end
     end
 
@@@@ -158,7 +158,7 @@@@ shared_examples_for 'a Connection with SSL support' do
 
       it 'should connect securely' do
         conn = DataObjects::Connection.new("#{CONFIG.uri}?#{CONFIG.ssl}")
-        conn.secure?.should be_true
+        conn.secure?.should be true
         conn.close
       end
 
@@@@ -169,7 +169,7 @@@@ shared_examples_for 'a Connection with SSL support' do
 
     it 'should not connect securely' do
       conn = DataObjects::Connection.new(CONFIG.uri)
-      conn.secure?.should be_false
+      conn.secure?.should be_falsy
       conn.close
     end
 
@
