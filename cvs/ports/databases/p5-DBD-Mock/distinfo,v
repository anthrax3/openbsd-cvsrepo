head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.14
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	simon_20071122:1.1.1.1
	simon:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.12.22.14.07.36;	author benoit;	state Exp;
branches;
next	1.3;
commitid	8lWKUfyC1fKdHjqs;

1.3
date	2011.06.13.16.40.20;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.27.22.42.41;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.22.19.43.34;	author simon;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.22.19.43.34;	author simon;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to p5-DBD-Mock-1.45.

remove maintainer, ok ajacoutot@@
@
text
@SHA256 (DBD-Mock-1.45.tar.gz) = QKgMN7Me8UU2tYtKi0g+ZZU7ALj6c5eBfH63bVQL0A8=
SIZE (DBD-Mock-1.45.tar.gz) = 44496
@


1.3
log
@- update to 1.39

from wen heping
@
text
@d1 2
a2 5
MD5 (DBD-Mock-1.39.tar.gz) = kNJWX+VzVH034PzuhmedpQ==
RMD160 (DBD-Mock-1.39.tar.gz) = k95L0vNDCgE+f0Iq4e1oazDbjYI=
SHA1 (DBD-Mock-1.39.tar.gz) = 5lzLpFZWk2bv/8KS5QF2OYiWKz8=
SHA256 (DBD-Mock-1.39.tar.gz) = zwBejKUrX49V6qQjGLlK0FiQzr+cDFd8Mxevj0np+HY=
SIZE (DBD-Mock-1.39.tar.gz) = 39785
@


1.2
log
@update to version 1.37
@
text
@d1 5
a5 5
MD5 (DBD-Mock-1.37.tar.gz) = XXzp9vl5NdvfVJtUykW4Hw==
RMD160 (DBD-Mock-1.37.tar.gz) = W+D6aOpoj5xhN3XldihdlMDxV4s=
SHA1 (DBD-Mock-1.37.tar.gz) = 2fmr/g9lyRW42Rn3N+tSSxykMXM=
SHA256 (DBD-Mock-1.37.tar.gz) = jPWuAifxO5vVXwM32V0hmeQjFUEyo2/T5CZUwAZ2edg=
SIZE (DBD-Mock-1.37.tar.gz) = 39506
@


1.1
log
@Initial revision
@
text
@d1 5
a5 5
MD5 (DBD-Mock-1.36.tar.gz) = RDFrhM7upHZcJKdcr8sZrg==
RMD160 (DBD-Mock-1.36.tar.gz) = GFNHVdod97i2djhK33VQbrs/TSE=
SHA1 (DBD-Mock-1.36.tar.gz) = 79u1ZsWXHqIMMB257UC6J/pyANQ=
SHA256 (DBD-Mock-1.36.tar.gz) = tgNO08ObYh8o2beLWtDz431TtDvCiojwwqsYxIXDCQ0=
SIZE (DBD-Mock-1.36.tar.gz) = 37835
@


1.1.1.1
log
@import p5-DBD-Mock

Testing with databases can be tricky.  If you are developing a system
married to a single database then you can make some assumptions about
your environment and ask the user to provide relevant connection
information.  But if you need to test a framework that uses DBI,
particularly a framework that uses different types of persistence
schemes, then it may be more useful to simply verify what the framework
is trying to do -- ensure the right SQL is generated and that the
correct parameters are bound.
DBD::Mock makes it easy to just modify your configuration (presumably
held outside your code) and just use it instead of DBD::Foo (like
DBD::Pg or DBD::mysql) in your framework.

ok sthen@@
@
text
@@
