head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.28
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.26
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.24
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.22
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	simon_20071122:1.1.1.1
	simon:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.12.22.14.07.36;	author benoit;	state Exp;
branches;
next	1.1;
commitid	8lWKUfyC1fKdHjqs;

1.1
date	2007.11.22.19.43.34;	author simon;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.22.19.43.34;	author simon;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to p5-DBD-Mock-1.45.

remove maintainer, ok ajacoutot@@
@
text
@@@comment $OpenBSD: PLIST,v 1.1.1.1 2007/11/22 19:43:34 simon Exp $
${P5SITE}/DBD/
${P5SITE}/DBD/Mock/
${P5SITE}/DBD/Mock.pm
${P5SITE}/DBD/Mock/Pool/
${P5SITE}/DBD/Mock/Pool.pm
${P5SITE}/DBD/Mock/Pool/db.pm
${P5SITE}/DBD/Mock/Session.pm
${P5SITE}/DBD/Mock/StatementTrack/
${P5SITE}/DBD/Mock/StatementTrack.pm
${P5SITE}/DBD/Mock/StatementTrack/Iterator.pm
${P5SITE}/DBD/Mock/db.pm
${P5SITE}/DBD/Mock/dr.pm
${P5SITE}/DBD/Mock/st.pm
@@man man/man3p/DBD::Mock.3p
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@comment $OpenBSD$
d3 1
d5 10
@


1.1.1.1
log
@import p5-DBD-Mock

Testing with databases can be tricky.  If you are developing a system
married to a single database then you can make some assumptions about
your environment and ask the user to provide relevant connection
information.  But if you need to test a framework that uses DBI,
particularly a framework that uses different types of persistence
schemes, then it may be more useful to simply verify what the framework
is trying to do -- ensure the right SQL is generated and that the
correct parameters are bound.
DBD::Mock makes it easy to just modify your configuration (presumably
held outside your code) and just use it instead of DBD::Foo (like
DBD::Pg or DBD::mysql) in your framework.

ok sthen@@
@
text
@@
