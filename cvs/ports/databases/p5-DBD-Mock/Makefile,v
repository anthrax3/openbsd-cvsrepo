head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	simon_20071122:1.1.1.1
	simon:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2016.03.20.19.56.10;	author naddy;	state Exp;
branches;
next	1.9;
commitid	WXJcpbKc0PauxEav;

1.9
date	2014.12.22.14.07.36;	author benoit;	state Exp;
branches;
next	1.8;
commitid	8lWKUfyC1fKdHjqs;

1.8
date	2014.04.13.01.01.38;	author naddy;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.11.02.52.06;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.13.16.40.20;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.03.11.44.24;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.15.00.22.52;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.18.17.06.07;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.27.22.42.41;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.22.19.43.34;	author simon;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.22.19.43.34;	author simon;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove SHARED_ONLY from all CPAN Perl ports and the cpan and perl MODULES.
Add WANTLIB+=perl and PKG_ARCH=* as appropriate.
@
text
@# $OpenBSD: Makefile,v 1.9 2014/12/22 14:07:36 benoit Exp $

COMMENT=	mock database driver for testing

MODULES=	cpan
PKG_ARCH=	*
DISTNAME=	DBD-Mock-1.45
CATEGORIES=	databases devel

# Perl
PERMIT_PACKAGE_CDROM=	Yes

RUN_DEPENDS=	databases/p5-DBI>=1.3

CONFIGURE_STYLE=modbuild

MAKE_ENV+=	TEST_POD=1

.include <bsd.port.mk>
@


1.9
log
@Update to p5-DBD-Mock-1.45.

remove maintainer, ok ajacoutot@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2014/04/13 01:01:38 naddy Exp $
d6 1
@


1.8
log
@Drop USE_GROFF since groff and mandoc produce identical output.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2013/03/11 02:52:06 espie Exp $
d6 1
a6 1
DISTNAME=	DBD-Mock-1.39
a7 2

MAINTAINER=	Simon Bertrang <simon@@openbsd.org>
@


1.7
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2011/06/13 16:40:20 jasper Exp $
a7 1
USE_GROFF =	Yes
@


1.6
log
@- update to 1.39

from wen heping
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2010/12/03 11:44:24 ajacoutot Exp $
a13 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM=	Yes
PERMIT_DISTFILES_FTP=	Yes
@


1.5
log
@Bump after recent cpan.port.mk change.
ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2010/11/15 00:22:52 espie Exp $
d6 1
a6 2
DISTNAME=	DBD-Mock-1.37
REVISION=	0
d18 1
a18 1
RUN_DEPENDS=	databases/p5-DBI
@


1.4
log
@convert to new style depends
zap default spec that are not needed
convert libspecs as well
convert p* to REVISION.

No package changes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2010/10/18 17:06:07 espie Exp $
d7 1
@


1.3
log
@USE_GROFF=Yes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2008/07/27 22:42:41 simon Exp $
d18 1
a18 1
RUN_DEPENDS=	::databases/p5-DBI
@


1.2
log
@update to version 1.37
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2007/11/22 19:43:34 simon Exp $
d8 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d6 1
a6 1
DISTNAME=	DBD-Mock-1.36
@


1.1.1.1
log
@import p5-DBD-Mock

Testing with databases can be tricky.  If you are developing a system
married to a single database then you can make some assumptions about
your environment and ask the user to provide relevant connection
information.  But if you need to test a framework that uses DBI,
particularly a framework that uses different types of persistence
schemes, then it may be more useful to simply verify what the framework
is trying to do -- ensure the right SQL is generated and that the
correct parameters are bound.
DBD::Mock makes it easy to just modify your configuration (presumably
held outside your code) and just use it instead of DBD::Foo (like
DBD::Pg or DBD::mysql) in your framework.

ok sthen@@
@
text
@@
