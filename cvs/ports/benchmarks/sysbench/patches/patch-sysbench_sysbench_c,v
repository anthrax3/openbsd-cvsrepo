head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.36
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.34
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.30
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.32
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.28
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.26
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.24
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.22
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.20
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.18
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.16
	OPENBSD_5_0:1.1.1.1.0.14
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.12
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.10
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.8
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.4
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.2
	OPENBSD_4_4_BASE:1.1.1.1
	sthen_20080415:1.1.1.1
	jung:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2008.04.15.14.14.08;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.04.15.14.14.08;	author sthen;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- sysbench/sysbench.c.orig	Tue Jan 31 11:15:53 2006
+++ sysbench/sysbench.c	Tue Apr 15 12:10:58 2008
@@@@ -423,12 +423,14 @@@@ int run_test(sb_test_t *test)
   /* Starting the test threads */
   for(i = 0; i < sb_globals.num_threads; i++)
   {
+    int err;
     if (sb_globals.error)
       return 1;
-    if (pthread_create(&(threads[i].thread), &thread_attr, &runner_thread, 
-                       (void*)&(threads[i])) != 0)
+    if ((err = pthread_create(&(threads[i].thread), &thread_attr,
+			&runner_thread, (void*)&(threads[i]))) != 0)
     {
-      log_errno(LOG_FATAL, "Thread #%d creation failed", i);
+      log_text(LOG_FATAL, "Thread #%d creation failed errno = %d (%s)",
+			i, err, strerror(err));
       return 1;
     }
   }
@@@@ -437,9 +439,11 @@@@ int run_test(sb_test_t *test)
   log_text(LOG_INFO, "Threads started!");  
   for(i = 0; i < sb_globals.num_threads; i++)
   {
-    if(pthread_join(threads[i].thread, NULL))
+    int err;
+    if((err = pthread_join(threads[i].thread, NULL)))
     {
-      log_errno(LOG_FATAL, "Thread #%d join failed", i);
+      log_text(LOG_FATAL, "Thread #%d join failed errno = %d (%s)",
+			i, err, strerror(err));
       return 1;    
     }
   }
@@@@ -508,7 +512,7 @@@@ int init(void)
     return 1;
   }
 
-  thread_stack_size = sb_get_value_int("thread-stack-size");
+  thread_stack_size = sb_get_value_size("thread-stack-size");
   if (thread_stack_size <= 0)
   {
     log_text(LOG_FATAL, "Invalid value for thread-stack-size: %d.\n", thread_stack_size);
@


1.1.1.1
log
@import sysbench:

SysBench is a modular, cross-platform and multi-threaded benchmark tool
for evaluating OS parameters that are important for a system running a
database under intensive load.

The idea of this benchmark suite is to quickly get an impression about
system performance without setting up complex database benchmarks or
even without installing a database at all.

Current features allow to test the following system parameters:

    * file I/O performance
    * scheduler performance
    * memory allocation and transfer speed
    * POSIX threads implementation performance
    * database server performance (OLTP benchmark)

Primarily written for MySQL server benchmarking, SysBench will be
further extended to support multiple database backends, distributed
benchmarks and third-party plug-in modules.

from Jung (maintainer) with some tweaks.
thanks to landry@@ for testing and feedback.

ok landry
@
text
@@
