head	1.7;
access;
symbols
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6;
locks; strict;
comment	@# @;


1.7
date	2009.07.22.11.53.51;	author okan;	state dead;
branches;
next	1.6;

1.6
date	2003.09.30.10.25.34;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.26.01.52.02;	author brad;	state dead;
branches;
next	1.4;

1.4
date	2002.01.06.05.31.48;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.02.13.38.45;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2000.05.29.05.10.54;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.29.04.18.32;	author marc;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to 3.326

feedback and ok naddy@@
@
text
@$OpenBSD: patch-iozone_c,v 1.6 2003/09/30 10:25:34 naddy Exp $
--- iozone.c.orig	2003-09-29 15:40:18.000000000 +0200
+++ iozone.c	2003-09-29 15:41:06.000000000 +0200
@@@@ -240,6 +240,9 @@@@ THISVERSION,
 #include <fcntl.h>
 #if !defined(__FreeBSD__) && !defined(__OpenBSD__) && !defined(__APPLE__)
 #include <malloc.h>
+#else
+#include <stdlib.h>
+#include <string.h>
 #endif
 
 #if defined (__FreeBSD__) || defined(__OpenBSD__) || defined(__bsdi__) || defined(__APPLE__)
@


1.6
log
@- Update to 3.203.
- Include prototypes to fix dire warnings on 64-bit platforms.

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.5
log
@upgrade to iozone 3.83
@
text
@d1 10
a10 4
$OpenBSD: patch-iozone_c,v 1.4 2002/01/06 05:31:48 brad Exp $
--- iozone.c.orig	Tue Nov 27 10:14:40 2001
+++ iozone.c	Sun Jan  6 00:22:53 2002
@@@@ -64,7 +64,10 @@@@ extern  int errno;
d13 1
a13 112
 
-#if defined (__LP64__) || defined(OSF_64)
+#if defined(__LP64__) || defined(__arch64__) || defined(__alpha__)
+#define MODE "\tCompiled for 64 bit mode."
+#define _64BIT_ARCH_
+#elif defined(OSF_64)
 #define MODE "\tCompiled for 64 bit mode."
 #else
 #define MODE "\tCompiled for 32 bit mode."
@@@@ -294,11 +297,7 @@@@ typedef long long off64_t;
 #define AMAP_FILE (0)
 #endif
 
-#ifdef SCO_Unixware_gcc
-#define MAP_FILE (0)
-#endif
-
-#ifdef solaris
+#if defined (solaris) || defined(SCO_Unixware_gcc)
 #define MAP_FILE (0)
 #endif
 
@@@@ -808,7 +807,7 @@@@ char **argv;
         	exit(1);
         }
 
-#ifdef __LP64__ 
+#ifdef _64BIT_ARCH_ 
      	buffer = (char *) ((long long )(buffer + cache_size ) & 
 		~(cache_size-1));
 #else
@@@@ -1072,7 +1071,7 @@@@ char **argv;
                         	perror("Memory allocation failed:");
                           	exit(9);
 			}
-#ifdef __LP64__ 
+#ifdef _64BIT_ARCH_ 
 		     	pbuffer = (char *) 
 				(((unsigned long long)pbuffer + cache_size ) 
 					& ~(cache_size-1));
@@@@ -2151,7 +2150,7 @@@@ void throughput_test()
 	if(!haveshm)
 	{
 		shmaddr=(struct child_stats *)alloc_mem((long long)SHMSIZE);
-#ifdef __LP64__ 
+#ifdef _64BIT_ARCH_ 
 		if((long long)shmaddr==(long long)-1)
 #else
 		if((long )shmaddr==(long)-1)
@@@@ -2245,7 +2244,7 @@@@ void throughput_test()
 			printf("Parent starting slot %lld\n",xx);	
 #endif
 		if( childids[xx] == 0 ){
-#ifdef __LP64__
+#ifdef _64BIT_ARCH_
 		  thread_write_test((void *)xx);
 #else
 		  thread_write_test((void *)(long)xx);
@@@@ -2279,7 +2278,7 @@@@ void throughput_test()
 			~(cache_size-1));
 		}
 
-#ifdef __LP64__
+#ifdef _64BIT_ARCH__
 		childids[xx] = mythread_create(thread_write_test,(void*)xx);
 #else
 		childids[xx] = mythread_create(thread_write_test,(void*)(long)xx);
@@@@ -2462,7 +2461,7 @@@@ waitout:
 			exit(28);
 		}
 		if(childids[xx] == 0){
-#ifdef __LP64__
+#ifdef _64BIT_ARCH_
 			thread_rwrite_test((void *)xx);
 #else
 			thread_rwrite_test((void *)((long)xx));
@@@@ -2474,7 +2473,7 @@@@ waitout:
 	else
 	{
 	   for(xx = 0; xx< num_child ; xx++){	/* Create the children */
-#ifdef __LP64__
+#ifdef _64BIT_ARCH_
 		childids[xx] = mythread_create( thread_rwrite_test,xx);
 #else
 		childids[xx] = mythread_create( thread_rwrite_test,(void *)(long)xx);
@@@@ -2653,7 +2652,7 @@@@ next0:
 			exit(30);
 		}
 		if(childids[xx]==0){
-#ifdef __LP64__
+#ifdef _64BIT_ARCH_
 			thread_read_test((void *)xx);
 #else
 			thread_read_test((void *)((long)xx));
@@@@ -2665,7 +2664,7 @@@@ next0:
 	else
 	{
 	   for(xx = 0; xx< num_child ; xx++){	/* Create the children */
-#ifdef __LP64__
+#ifdef _64BIT_ARCH_
 		childids[xx] = mythread_create( thread_read_test,xx);
 #else
 		childids[xx] = mythread_create( thread_read_test,(void *)(long)xx);
@@@@ -2834,7 +2833,7 @@@@ jumpend:
 			exit(32);
 		}
 		if(childids[xx]==0){
-#ifdef __LP64__
+#ifdef _64BIT_ARCH_
 			thread_rread_test((void *)xx);
 #else
 			thread_rread_test((void *)((long)xx));
@


1.4
log
@- use threads by default with this and remove the threads FLAVOR
- add an untested patch that should help on our 64-bit archs
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@upgrade to iozone 3.24
@
text
@d1 4
a4 3
--- iozone.c.orig	Tue Sep 14 17:38:16 1999
+++ iozone.c	Mon May 29 00:42:45 2000
@@@@ -196,7 +196,9 @@@@
d7 51
a57 4
 #if defined (__FreeBSD__) || defined(__OpenBSD__)
+#ifndef O_SYNC
 #define O_SYNC O_FSYNC
+#endif
d59 9
d69 50
a118 1
 #ifndef MAP_FAILED
@


1.2
log
@better patch, allows iozone to still compile on pre-2.7 systems. ok
marc@@, sent back to the author as well.
@
text
@@


1.1
log
@
Add patch that removed unneeded OpenBSD specific define that had the
net results of defining both O_FSYNC and O_SYNC in terms of each other.
@
text
@d1 3
a3 10
$OpenBSD: update-patches,v 1.1 2000/04/19 11:16:27 espie Exp $

Without this patch the net result of includes and defines are:
#define O_FSYNC O_SYNC
#define O_SYNC O_FSYNC

--- iozone.c.orig	Tue Sep 14 14:38:16 1999
+++ iozone.c	Sun May 28 21:03:54 2000
@@@@ -195,7 +195,7 @@@@ THISVERSION,
 #include <malloc.h>
d6 2
a7 2
-#if defined (__FreeBSD__) || defined(__OpenBSD__)
+#if defined (__FreeBSD__)
d9 1
d12 1
@

