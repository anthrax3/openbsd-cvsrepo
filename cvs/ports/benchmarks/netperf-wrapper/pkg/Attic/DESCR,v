head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.8
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.6
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	sthen_20130605:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.03.09.18.55.47;	author sthen;	state dead;
branches;
next	1.2;
commitid	U7ilQUFQKf6Q22Sk;

1.2
date	2015.11.06.20.42.26;	author sthen;	state Exp;
branches;
next	1.1;
commitid	Baud8yhE9j1MNOCa;

1.1
date	2013.06.04.23.45.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.06.04.23.45.43;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update/rename netperf-wrapper-0.9.1 to flent-1.0.1, split -gui to a separate
package
@
text
@Python wrapper to run multiple simultaneous netperf/iperf/ping instances
and aggregate the results.

Several commands can be run in parallel and the test data points can be
aligned with each other in time, interpolating differences between the
actual measurement points.  This makes it possible to graph (e.g.) ping
times before, during and after a link is loaded.

Aggregated data can be saved in a json format, output as csv values,
emacs org mode tables, or graph plots.  Each test can specify several
plots, including time-series plots of the values against each other,
as well as CDF plots of (e.g.) ping times.

Quick examples (see homepage or manual for more):

1. netperf-wrapper -H somehost ping -f plot

2. ssh somehost netserver &
netperf-wrapper -H somehost rrul
netperf-wrapper -i rrul-*.json.gz -f plot
@


1.2
log
@fix netperf-wrapper manpage install location, spotted by bentley@@
adjust DESCR while there
@
text
@@


1.1
log
@Initial revision
@
text
@d4 4
a7 5
Several commands can be run in parallel and, provided they output
timestamped values, the test data points can be aligned with each other
in time, interpolating differences between the actual measurement points.
This makes it possible to graph (e.g.) ping times before, during and
after a link is loaded.
d10 3
a12 4
emacs org mode tables or, if py-matplotlib is installed, plots.
Each test can specify several different plots, including time-series
plots of the values against each other, as well as CDF plots of
(e.g.) ping times.
d14 1
a14 1
Examples (see homepage or netperf-wrapper -h for more):
@


1.1.1.1
log
@import benchmarks/netperf-wrapper, ok edd@@

This is a tool to run multiple simultaneous netperf/iperf/ping instances,
aggregate and plot the results. It is currently used as a main test tool by
the bufferbloat project investigating network performance under load with
active queue management mechanisms.

Several commands can be run in parallel and, provided they output
timestamped values, the test data points can be aligned with each other
in time, interpolating differences between the actual measurement points.
This makes it possible to graph (e.g.) ping times before, during and
after a link is loaded.

Aggregated data can be saved in a json format, output as csv values,
emacs org mode tables or, if py-matplotlib is installed, plots.
Each test can specify several different plots, including time-series
plots of the values against each other, as well as CDF plots of
(e.g.) ping times.
@
text
@@
