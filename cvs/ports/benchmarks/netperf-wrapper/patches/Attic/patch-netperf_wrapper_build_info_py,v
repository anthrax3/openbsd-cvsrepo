head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.8
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.6
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	sthen_20130605:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.03.09.18.55.47;	author sthen;	state dead;
branches;
next	1.2;
commitid	U7ilQUFQKf6Q22Sk;

1.2
date	2015.10.21.13.07.51;	author sthen;	state Exp;
branches;
next	1.1;
commitid	aEPQ3LZp0w6w3d5w;

1.1
date	2013.06.04.23.45.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.06.04.23.45.43;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update/rename netperf-wrapper-0.9.1 to flent-1.0.1, split -gui to a separate
package
@
text
@$OpenBSD: patch-netperf_wrapper_build_info_py,v 1.2 2015/10/21 13:07:51 sthen Exp $
--- netperf_wrapper/build_info.py.orig	Tue Nov 11 20:39:28 2014
+++ netperf_wrapper/build_info.py	Wed Oct 21 14:02:43 2015
@@@@ -25,7 +25,7 @@@@ import os
 
 # this value works for the source distribution
 VERSION="0.9.1"
-DATA_DIR=os.path.normpath(os.path.join(os.path.dirname(__file__), '..'))
+DATA_DIR="/usr/local/share/netperf-wrapper"
 
 if VERSION.endswith("-git") and os.path.exists(os.path.join(DATA_DIR, '.git')):
     try:
@


1.2
log
@update to netperf-wrapper-0.9.1
@
text
@d1 1
a1 1
$OpenBSD: patch-netperf_wrapper_build_info_py,v 1.1.1.1 2013/06/04 23:45:43 sthen Exp $
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- netperf_wrapper/build_info.py.orig	Mon Apr 15 13:14:11 2013
+++ netperf_wrapper/build_info.py	Thu Apr 18 20:02:24 2013
@@@@ -25,4 +25,4 @@@@ import os
d7 1
a7 1
 VERSION="0.5.6"
d10 3
@


1.1.1.1
log
@import benchmarks/netperf-wrapper, ok edd@@

This is a tool to run multiple simultaneous netperf/iperf/ping instances,
aggregate and plot the results. It is currently used as a main test tool by
the bufferbloat project investigating network performance under load with
active queue management mechanisms.

Several commands can be run in parallel and, provided they output
timestamped values, the test data points can be aligned with each other
in time, interpolating differences between the actual measurement points.
This makes it possible to graph (e.g.) ping times before, during and
after a link is loaded.

Aggregated data can be saved in a json format, output as csv values,
emacs org mode tables or, if py-matplotlib is installed, plots.
Each test can specify several different plots, including time-series
plots of the values against each other, as well as CDF plots of
(e.g.) ping times.
@
text
@@
