head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	naddy_20011105:1.1.1.1
	naddy:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2016.08.05.19.52.19;	author naddy;	state Exp;
branches;
next	1.14;
commitid	IjFvjijjenYDa3ra;

1.14
date	2016.04.06.18.53.16;	author naddy;	state Exp;
branches;
next	1.13;
commitid	iZKQK6rYc9TPfgx3;

1.13
date	2015.10.30.14.12.42;	author bentley;	state Exp;
branches;
next	1.12;
commitid	ter5pKuw1bz400Js;

1.12
date	2015.03.16.14.17.48;	author naddy;	state Exp;
branches;
next	1.11;
commitid	EvJxknLpYkcYkbO1;

1.11
date	2014.11.29.19.16.48;	author naddy;	state Exp;
branches;
next	1.10;
commitid	Uhj170pAOjB5xvA3;

1.10
date	2013.08.18.15.58.17;	author mpi;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.22.22.52.16;	author naddy;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.29.20.10.39;	author naddy;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.11.17.52.11;	author naddy;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.21.18.26.21;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.27.17.37.46;	author naddy;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.27.00.41.51;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.20.01.45.14;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.23.01.27.32;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.05.18.55.28;	author naddy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.11.05.18.55.28;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.15
log
@sync with OpenBSD 6.0
@
text
@$OpenBSD: patch-print_c,v 1.14 2016/04/06 18:53:16 naddy Exp $
--- print.c.orig	Fri Aug  5 21:32:46 2016
+++ print.c	Fri Aug  5 21:41:30 2016
@@@@ -48,6 +48,10 @@@@
 #include <unistd.h>
 #include <limits.h>
 #include <util.h>
+#ifdef COLORLS
+#include <termcap.h>
+#include <signal.h>
+#endif
 
 #include "ls.h"
 #include "extern.h"
@@@@ -58,6 +62,10 @@@@ static void	printsize(size_t, off_t);
 static void	printtime(time_t);
 static int	printtype(u_int);
 static int	compute_columns(DISPLAY *, int *);
+#ifdef COLORLS
+static void	endcolor(int);
+static int	colortype(mode_t);
+#endif
 
 #define	IS_NOPRINT(p)	((p)->fts_number == NO_PRINT)
 
@@@@ -66,6 +74,32 @@@@ static int	compute_columns(DISPLAY *, int *);
 #define	SECSPERDAY	(24 * 60 * 60)
 #define	SIXMONTHS	(SECSPERDAY * 365 / 2)
 
+#ifdef COLORLS
+/* Most of these are taken from <sys/stat.h> */
+typedef enum Colors {
+	C_DIR,		/* directory */
+	C_LNK,		/* symbolic link */
+	C_SOCK,		/* socket */
+	C_FIFO,		/* pipe */
+	C_EXEC,		/* executable */
+	C_BLK,		/* block special */
+	C_CHR,		/* character special */
+	C_SUID,		/* setuid executable */
+	C_SGID,		/* setgid executable */
+	C_WSDIR,	/* directory writable to others, with sticky bit */
+	C_WDIR,		/* directory writable to others, without sticky bit */
+	C_NUMCOLORS	/* just a place-holder */
+} Colors ;
+
+const char *defcolors = "exfxcxdxbxegedabagacad";
+
+/* colors for file types */
+static struct {
+	int num[2];
+	int bold;
+} colors[C_NUMCOLORS];
+#endif
+
 void
 printscol(DISPLAY *dp)
 {
@@@@ -86,6 +120,9 @@@@ printlong(DISPLAY *dp)
 	FTSENT *p;
 	NAMES *np;
 	char buf[20];
+#ifdef COLORLS
+	int color_printed = 0;
+#endif
 
 	if (dp->list->fts_level != FTS_ROOTLEVEL && (f_longform || f_size))
 		(void)printf("total %llu\n", howmany(dp->btotal, blocksize));
@@@@ -122,7 +159,15 @@@@ printlong(DISPLAY *dp)
 			printtime(sp->st_ctime);
 		else
 			printtime(sp->st_mtime);
+#ifdef COLORLS
+		if (f_color)
+			color_printed = colortype(sp->st_mode);
+#endif
 		(void)mbsprint(p->fts_name, 1);
+#ifdef COLORLS
+		if (f_color && color_printed)
+			endcolor(0);
+#endif
 		if (f_type || (f_typedir && S_ISDIR(sp->st_mode)))
 			(void)printtype(sp->st_mode);
 		if (S_ISLNK(sp->st_mode))
@@@@ -222,6 +267,9 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
 {
 	struct stat *sp;
 	int chcnt;
+#ifdef COLORLS
+	int color_printed = 0;
+#endif
 
 	sp = p->fts_statp;
 	chcnt = 0;
@@@@ -231,7 +279,15 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
 	if (f_size)
 		chcnt += printf("%*qd ",
 		    (int)sizefield, howmany(sp->st_blocks, blocksize));
+#ifdef COLORLS
+	if (f_color)
+		color_printed = colortype(sp->st_mode);
+#endif
 	chcnt += mbsprint(p->fts_name, 1);
+#ifdef COLORLS
+	if (f_color && color_printed)
+		endcolor(0);
+#endif
 	if (f_type || (f_typedir && S_ISDIR(sp->st_mode)))
 		chcnt += printtype(sp->st_mode);
 	return (chcnt);
@@@@ -344,6 +400,151 @@@@ printtype(u_int mode)
 	}
 	return (0);
 }
+
+#ifdef COLORLS
+static int
+putch(int c)
+{
+	(void)putchar(c);
+	return 0;
+}
+
+static int
+writech(int c)
+{
+	char tmp = c;
+
+	(void)write(STDOUT_FILENO, &tmp, 1);
+	return 0;
+}
+
+static void
+printcolor(Colors c)
+{
+	char *ansiseq;
+
+	if (colors[c].bold)
+		tputs(enter_bold, 1, putch);
+
+	if (colors[c].num[0] != -1) {
+		ansiseq = tgoto(ansi_fgcol, 0, colors[c].num[0]);
+		if (ansiseq)
+			tputs(ansiseq, 1, putch);
+	}
+	if (colors[c].num[1] != -1) {
+		ansiseq = tgoto(ansi_bgcol, 0, colors[c].num[1]);
+		if (ansiseq)
+			tputs(ansiseq, 1, putch);
+	}
+}
+
+static void
+endcolor(int sig)
+{
+	tputs(ansi_coloff, 1, sig ? writech : putch);
+	tputs(attrs_off, 1, sig ? writech : putch);
+}
+
+static int
+colortype(mode_t mode)
+{
+	switch (mode & S_IFMT) {
+	case S_IFDIR:
+		if (mode & S_IWOTH)
+			if (mode & S_ISTXT)
+				printcolor(C_WSDIR);
+			else
+				printcolor(C_WDIR);
+		else
+			printcolor(C_DIR);
+		return (1);
+	case S_IFLNK:
+		printcolor(C_LNK);
+		return (1);
+	case S_IFSOCK:
+		printcolor(C_SOCK);
+		return (1);
+	case S_IFIFO:
+		printcolor(C_FIFO);
+		return (1);
+	case S_IFBLK:
+		printcolor(C_BLK);
+		return (1);
+	case S_IFCHR:
+		printcolor(C_CHR);
+		return (1);
+	default:;
+	}
+	if (mode & (S_IXUSR | S_IXGRP | S_IXOTH)) {
+		if (mode & S_ISUID)
+			printcolor(C_SUID);
+		else if (mode & S_ISGID)
+			printcolor(C_SGID);
+		else
+			printcolor(C_EXEC);
+		return (1);
+	}
+	return (0);
+}
+
+void
+parsecolors(const char *cs)
+{
+	int i;
+	int j;
+	size_t len;
+	char c[2];
+	short legacy_warn = 0;
+
+	if (cs == NULL)
+		cs = "";	/* LSCOLORS not set */
+	len = strlen(cs);
+	for (i = 0; i < (int)C_NUMCOLORS ; i++) {
+		colors[i].bold = 0;
+
+		if (len <= 2 * (size_t)i) {
+			c[0] = defcolors[2 * i];
+			c[1] = defcolors[2 * i + 1];
+		} else {
+			c[0] = cs[2 * i];
+			c[1] = cs[2 * i + 1];
+		}
+		for (j = 0; j < 2 ; j++) {
+			/* Legacy colours used 0-7 */
+			if (c[j] >= '0' && c[j] <= '7') {
+				colors[i].num[j] = c[j] - '0';
+				if (!legacy_warn) {
+					warnx("LSCOLORS should use "
+					    "characters a-h instead of 0-9 ("
+					    "see the manual page)");
+				}
+				legacy_warn = 1;
+			} else if (c[j] >= 'a' && c[j] <= 'h')
+				colors[i].num[j] = c[j] - 'a';
+			else if (c[j] >= 'A' && c[j] <= 'H') {
+				colors[i].num[j] = c[j] - 'A';
+				colors[i].bold = 1;
+			} else if (tolower((unsigned char)c[j]) == 'x')
+				colors[i].num[j] = -1;
+			else {
+				warnx("invalid character '%c' in LSCOLORS"
+				    " env var", c[j]);
+				colors[i].num[j] = -1;
+			}
+		}
+	}
+}
+
+void
+colorquit(int sig)
+{
+	endcolor(sig);
+
+	(void)signal(sig, SIG_DFL);
+	(void)kill(getpid(), sig);
+}
+
+#endif /* COLORLS */
 
 static void
 printlink(FTSENT *p)
@


1.14
log
@Update to 5.9, which has pledge(2) and UTF-8 improvements.
From Lauri Tirkkonen <lotheac@@iki.fi>.
@
text
@d1 3
a3 9
$OpenBSD: patch-print_c,v 1.13 2015/10/30 14:12:42 bentley Exp $
--- print.c.orig	Tue Dec  1 19:36:13 2015
+++ print.c	Wed Apr  6 20:47:37 2016
@@@@ -1,4 +1,4 @@@@
-/*	$OpenBSD: print.c,v 1.35 2015/12/01 18:36:13 schwarze Exp $	*/
+/*	$OpenBSD: patch-print_c,v 1.13 2015/10/30 14:12:42 bentley Exp $	*/
 /*	$NetBSD: print.c,v 1.15 1996/12/11 03:25:39 thorpej Exp $	*/
 
 /*
@


1.13
log
@Calculate Unicode column widths correctly.

ok naddy@@ (maintainer)
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.12 2015/03/16 14:17:48 naddy Exp $
--- print.c.orig	Thu Jan 15 23:39:32 2015
+++ print.c	Thu Oct 29 01:01:20 2015
d5 2
a6 2
-/*	$OpenBSD: print.c,v 1.33 2015/01/16 06:39:32 deraadt Exp $	*/
+/*	$OpenBSD: patch-print_c,v 1.12 2015/03/16 14:17:48 naddy Exp $	*/
d10 1
a10 5
@@@@ -45,10 +45,14 @@@@
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
-#include <tzfile.h>
a14 1
+#include <ctype.h>
d21 1
a21 1
@@@@ -59,12 +63,44 @@@@ static void	printsize(size_t, off_t);
d32 3
a34 2
 #define	DATELEN		64
-#define	SIXMONTHS	((DAYSPERNYEAR / 2) * SECSPERDAY)
a35 3
+#define	SECSPERDAY	(24 * 60 * 60)
+#define	SIXMONTHS	(SECSPERDAY * 365 / 2)
+
d65 1
a65 1
@@@@ -85,6 +121,9 @@@@ printlong(DISPLAY *dp)
d75 1
a75 1
@@@@ -121,7 +160,15 @@@@ printlong(DISPLAY *dp)
d83 1
a83 1
 		(void)putname(p->fts_name);
d91 1
a91 1
@@@@ -221,6 +268,9 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d101 1
a101 1
@@@@ -230,7 +280,15 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d108 2
a109 2
+#endif 
 	chcnt += putname(p->fts_name);
d113 1
a113 1
+#endif 
d117 1
a117 11
@@@@ -309,7 +367,8 @@@@ printstream(DISPLAY *dp)
 			continue;
 		if (col > 0) {
 			(void)putchar(','), col++;
-			if (col + 1 + extwidth + p->fts_namelen >= termwidth)
+			if (col + 1 + extwidth + strwidth(p->fts_name) >=
+			    termwidth)
 				(void)putchar('\n'), col = 0;
 			else
 				(void)putchar(' '), col++;
@@@@ -342,6 +401,151 @@@@ printtype(u_int mode)
@


1.12
log
@Update to 5.7.
Stop using <tzfile.h>.  Based on ls(1), so apply the same changes here.
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.11 2014/11/29 19:16:48 naddy Exp $
--- print.c.orig	Fri Jan 16 07:39:32 2015
+++ print.c	Mon Mar 16 15:15:47 2015
d6 1
a6 1
+/*	$OpenBSD: print.c,v 1.34 2015/03/15 00:41:27 millert Exp $	*/
d124 11
a134 1
@@@@ -342,6 +400,151 @@@@ printtype(u_int mode)
@


1.11
log
@sync with OpenBSD 5.6
@
text
@d1 14
a14 5
$OpenBSD: patch-print_c,v 1.10 2013/08/18 15:58:17 mpi Exp $
--- print.c.orig	Tue May  6 22:55:10 2014
+++ print.c	Sat Nov 29 20:07:39 2014
@@@@ -48,6 +48,11 @@@@
 #include <tzfile.h>
d16 1
d26 1
a26 1
@@@@ -58,12 +63,42 @@@@ static void	printsize(size_t, off_t);
d38 1
a38 1
 #define	SIXMONTHS	((DAYSPERNYEAR / 2) * SECSPERDAY)
d40 3
d72 1
a72 1
@@@@ -84,6 +119,9 @@@@ printlong(DISPLAY *dp)
d82 1
a82 1
@@@@ -120,7 +158,15 @@@@ printlong(DISPLAY *dp)
d98 1
a98 1
@@@@ -220,6 +266,9 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d108 1
a108 1
@@@@ -229,7 +278,15 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d124 1
a124 1
@@@@ -341,6 +398,151 @@@@ printtype(u_int mode)
@


1.10
log
@Sync with OPENBSD_5_4 to handle large ino_t.

ok naddy@@
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.9 2013/03/22 22:52:16 naddy Exp $
--- print.c.orig	Sun Jun  2 15:23:20 2013
+++ print.c	Sun Aug 18 13:13:40 2013
d16 1
a16 1
@@@@ -58,9 +63,39 @@@@ static void	printsize(size_t, off_t);
d27 3
d59 1
a59 1
@@@@ -81,6 +116,9 @@@@ printlong(DISPLAY *dp)
d69 1
a69 1
@@@@ -117,7 +155,15 @@@@ printlong(DISPLAY *dp)
d85 1
a85 1
@@@@ -217,6 +263,9 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d95 1
a95 1
@@@@ -226,7 +275,15 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d111 1
a111 1
@@@@ -346,6 +403,151 @@@@ printtype(u_int mode)
@


1.9
log
@sync with OPENBSD_5_3
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.8 2009/10/29 20:10:39 naddy Exp $
--- print.c.orig	Fri Mar 22 23:44:23 2013
+++ print.c	Fri Mar 22 23:47:15 2013
d65 2
a66 2
 		(void)printf("total %lu\n", howmany(dp->btotal, blocksize));
@@@@ -116,7 +154,15 @@@@ printlong(DISPLAY *dp)
d82 1
a82 1
@@@@ -216,6 +262,9 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d92 1
a92 1
@@@@ -224,7 +273,15 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d108 1
a108 1
@@@@ -344,6 +401,151 @@@@ printtype(u_int mode)
@


1.8
log
@sync with 4.6 and drop mention of xterm-xfree86
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.7 2007/08/11 17:52:11 naddy Exp $
--- print.c.orig	Wed Oct 28 00:59:21 2009
+++ print.c	Thu Oct 29 20:21:22 2009
d108 1
a108 1
@@@@ -338,6 +395,151 @@@@ printtype(u_int mode)
@


1.7
log
@sync with 4.2
@
text
@d1 4
a4 4
$OpenBSD: patch-print_c,v 1.6 2005/06/21 18:26:21 naddy Exp $
--- print.c.orig	Mon May  7 20:39:28 2007
+++ print.c	Sat Aug 11 19:28:48 2007
@@@@ -56,6 +56,11 @@@@ static char rcsid[] = "$OpenBSD: print.c,v 1.25 2007/0
d16 1
a16 1
@@@@ -66,9 +71,39 @@@@ static void	printsize(size_t, off_t);
d56 1
a56 1
@@@@ -89,6 +124,9 @@@@ printlong(DISPLAY *dp)
d66 1
a66 1
@@@@ -124,7 +162,15 @@@@ printlong(DISPLAY *dp)
d82 1
a82 1
@@@@ -224,6 +270,9 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d92 1
a92 1
@@@@ -232,7 +281,15 @@@@ printaname(FTSENT *p, u_long inodefield, u_long sizefi
d108 1
a108 1
@@@@ -346,6 +403,151 @@@@ printtype(u_int mode)
@


1.6
log
@sync with system ls(1)
@
text
@d1 4
a4 4
$OpenBSD: patch-print_c,v 1.5 2005/02/27 17:37:46 naddy Exp $
--- print.c.orig	Tue Jun 21 20:05:48 2005
+++ print.c	Tue Jun 21 20:12:00 2005
@@@@ -56,6 +56,11 @@@@ static char rcsid[] = "$OpenBSD: print.c
d66 1
a66 1
@@@@ -123,7 +161,15 @@@@ printlong(DISPLAY *dp)
d82 1
a82 1
@@@@ -223,6 +269,9 @@@@ printaname(FTSENT *p, u_long inodefield,
d92 1
a92 1
@@@@ -231,7 +280,15 @@@@ printaname(FTSENT *p, u_long inodefield,
d108 1
a108 1
@@@@ -345,6 +402,151 @@@@ printtype(u_int mode)
@


1.5
log
@synchronize with latest OpenBSD and FreeBSD ls; cosmetic changes only
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.4 2003/08/27 00:41:51 naddy Exp $
--- print.c.orig	Sun Feb 27 18:09:26 2005
+++ print.c	Sun Feb 27 18:28:36 2005
d108 1
a108 1
@@@@ -348,6 +405,151 @@@@ printtype(u_int mode)
@


1.4
log
@sync with 3.4 and FreeBSD
@
text
@d1 3
a3 3
$OpenBSD: patch-print_c,v 1.3 2003/01/20 01:45:14 naddy Exp $
--- print.c.orig	2003-08-27 00:56:42.000000000 +0200
+++ print.c	2003-08-27 01:16:49.000000000 +0200
d82 1
a82 1
@@@@ -219,6 +265,9 @@@@ printaname(FTSENT *p, u_long inodefield,
d92 1
a92 1
@@@@ -227,7 +276,15 @@@@ printaname(FTSENT *p, u_long inodefield,
d108 2
a109 1
@@@@ -346,6 +403,150 @@@@ printtype(u_int mode)
d112 1
a112 1
 
d185 1
d211 1
a211 1
+	for (i = 0; i < C_NUMCOLORS ; i++) {
d214 1
a214 1
+		if (len <= 2 * i) {
d236 1
a236 1
+			} else if (tolower((unsigned char)c[j] == 'x'))
d257 1
a257 1
+
a259 1
 {
@


1.3
log
@Update to OpenBSD 3.2 base and FreeBSD 5.0 color code.
Add -h flag (human readable sizes).  Link statically, just in case.
@
text
@d1 4
a4 12
$OpenBSD: patch-print_c,v 1.2 2002/01/23 01:27:32 naddy Exp $
--- print.c.orig	Mon Jan 20 00:08:15 2003
+++ print.c	Mon Jan 20 02:10:19 2003
@@@@ -53,12 +53,18 @@@@ static char rcsid[] = "$OpenBSD: print.c
 #include <fts.h>
 #include <grp.h>
 #include <pwd.h>
+#include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
d7 1
d16 1
a16 2
@@@@ -67,10 +73,44 @@@@ static int	printaname(FTSENT *, u_long, 
 static void	printlink(FTSENT *);
a18 1
+static void	printsize(size_t, off_t);
a26 3
+typedef enum { NONE = 0, KILO, MEGA, GIGA, TERA, PETA /* , EXA */ } unit_t;
+static unit_t unit_adjust(double *);
+
d54 3
a56 3
 printscol(dp)
 	DISPLAY *dp;
@@@@ -93,6 +133,9 @@@@ printlong(dp)
d66 1
a66 13
@@@@ -117,17 +160,25 @@@@ printlong(dp)
 			(void)printf("%3d, %3d ",
 			    major(sp->st_rdev), minor(sp->st_rdev));
 		else if (dp->bcfile)
-			(void)printf("%*s%*qd ",
+			(void)printf("%*s%*lld ",
 			    8 - dp->s_size, "", dp->s_size, sp->st_size);
 		else
-			(void)printf("%*qd ", dp->s_size, sp->st_size);
+			printsize(dp->s_size, sp->st_size);
 		if (f_accesstime)
 			printtime(sp->st_atime);
 		else if (f_statustime)
d82 1
a82 1
@@@@ -228,6 +279,9 @@@@ printaname(p, inodefield, sizefield)
d92 1
a92 1
@@@@ -236,7 +290,15 @@@@ printaname(p, inodefield, sizefield)
d99 1
a99 1
+#endif
d104 1
a104 1
+#endif
d108 1
a108 1
@@@@ -359,6 +421,156 @@@@ printtype(mode)
d114 1
a114 2
+putch(c)
+	int c;
d116 1
a116 1
+	(void) putchar(c);
d121 1
a121 2
+writech(c)
+	int c;
d125 1
a125 1
+	(void) write(STDOUT_FILENO, &tmp, 1);
d130 1
a130 2
+printcolor(c)
+	Colors c;
d150 1
a150 2
+endcolor(sig)
+	int sig;
d157 1
a157 2
+colortype(mode)
+	mode_t mode;
d160 4
a163 6
+		case S_IFDIR:
+			if (mode & S_IWOTH)
+				if (mode & S_ISTXT)
+					printcolor(C_WSDIR);
+				else
+					printcolor(C_WDIR);
d165 19
a183 17
+				printcolor(C_DIR);
+			return (1);
+		case S_IFLNK:
+			printcolor(C_LNK);
+			return (1);
+		case S_IFSOCK:
+			printcolor(C_SOCK);
+			return (1);
+		case S_IFIFO:
+			printcolor(C_FIFO);
+			return (1);
+		case S_IFBLK:
+			printcolor(C_BLK);
+			return (1);
+		case S_IFCHR:
+			printcolor(C_CHR);
+			return (1);
d198 1
a198 2
+parsecolors(cs)
+	const char *cs;
d254 1
a254 1
+#endif /*COLORLS*/
d257 2
a258 60
 printlink(p)
 	FTSENT *p;
@@@@ -378,4 +590,57 @@@@ printlink(p)
 	path[lnklen] = '\0';
 	(void)printf(" -> ");
 	(void)putname(path);
+}
+
+static void
+printsize(size_t width, off_t bytes)
+{
+	double dbytes;
+	unit_t unit;
+
+	if (f_humanval) {
+		dbytes = bytes;
+		unit = unit_adjust(&dbytes);
+
+		if (dbytes == 0)
+			(void)printf("%*s ", width, "0B");
+		else
+			(void)printf("%*.*f%c ", width - 1, dbytes > 10 ? 0 : 1,
+			    dbytes, "BKMGTPE"[unit]);
+	} else
+		(void)printf("%*lld ", width, bytes);
+}
+
+/*
+ * Output in "human-readable" format.  Uses 3 digits max and puts
+ * unit suffixes at the end.  Makes output compact and easy to read,
+ * especially on huge disks.
+ *
+ */
+static unit_t
+unit_adjust(double *val)
+{
+	double abval;
+	unit_t unit;
+
+	abval = fabs(*val);
+	if (abval < 1024)
+		unit = NONE;
+	else if (abval < 1048576ULL) {
+		unit = KILO;
+		*val /= 1024;
+	} else if (abval < 1073741824ULL) {
+		unit = MEGA;
+		*val /= 1048576;
+	} else if (abval < 1099511627776ULL) {
+		unit = GIGA;
+		*val /= 1073741824ULL;
+	} else if (abval < 1125899906842624ULL) {
+		unit = TERA;
+		*val /= 1099511627776ULL;
+	} else /* if (abval < 1152921504606846976ULL) */ {
+		unit = PETA;
+		*val /= 1125899906842624ULL;
+	}
+	return (unit);
 }
@


1.2
log
@sync with color code in FreeBSD-CURRENT
@
text
@d1 12
a12 4
$OpenBSD: patch-print_c,v 1.1.1.1 2001/11/05 18:55:28 naddy Exp $
--- print.c.orig	Mon Oct 15 22:12:15 2001
+++ print.c	Wed Jan 23 02:11:39 2002
@@@@ -60,6 +60,11 @@@@ static char rcsid[] = "$OpenBSD: print.c
a14 1
 #include <utmp.h>
d23 6
a28 4
@@@@ -69,9 +74,40 @@@@ static void	printlink __P((FTSENT *));
 static void	printtime __P((time_t));
 static int	printtype __P((u_int));
 static int	compute_columns __P((DISPLAY *, int *));
d30 2
a31 2
+static void	endcolor __P((int));
+static int	colortype __P((mode_t));
a32 1
+
d36 3
d51 2
a52 2
+	C_WSDIR,	/* directory writeble to others, with sticky bit */
+	C_WDIR,		/* directory writeble to others, without sticky bit */
d68 1
a68 1
@@@@ -94,6 +130,9 @@@@ printlong(dp)
d78 13
a90 1
@@@@ -128,7 +167,15 @@@@ printlong(dp)
d106 1
a106 1
@@@@ -229,6 +276,9 @@@@ printaname(p, inodefield, sizefield)
d116 1
a116 1
@@@@ -237,7 +287,15 @@@@ printaname(p, inodefield, sizefield)
d132 1
a132 2
@@@@ -359,6 +417,155 @@@@ printtype(mode)
 	}
d135 1
a135 1
+
d180 1
d230 3
a232 1
+	int i, j, len;
d254 1
a254 2
+					fprintf(stderr,
+					    "warn: LSCOLORS should use "
d256 1
a256 1
+					    "see the manual page)\n");
d267 2
a268 3
+				fprintf(stderr,
+				    "error: invalid character '%c' in LSCOLORS"
+				    " env var\n", c[j]);
d276 1
a276 2
+colorquit(sig)
+	int sig;
d283 1
d285 1
a285 1
 
d288 59
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- print.c.orig	Tue Oct 16 21:16:58 2001
+++ print.c	Tue Oct 16 21:57:20 2001
d16 1
a16 1
@@@@ -69,9 +74,36 @@@@ static void	printlink __P((FTSENT *));
d45 1
a45 1
+char *defcolors = "4x5x2x3x1x464301060203";
d47 5
a51 1
+static int colors[C_NUMCOLORS][2];
d57 1
a57 1
@@@@ -94,6 +126,9 @@@@ printlong(dp)
d67 1
a67 1
@@@@ -128,7 +163,15 @@@@ printlong(dp)
d83 1
a83 1
@@@@ -229,6 +272,9 @@@@ printaname(p, inodefield, sizefield)
d93 1
a93 1
@@@@ -237,7 +283,15 @@@@ printaname(p, inodefield, sizefield)
d109 1
a109 1
@@@@ -359,6 +413,138 @@@@ printtype(mode)
d139 5
a143 2
+	if (colors[c][0] != -1) {
+		ansiseq = tgoto(ansi_fgcol, 0, colors[c][0]);
d147 2
a148 3
+
+	if (colors[c][1] != -1) {
+		ansiseq = tgoto(ansi_bgcol, 0, colors[c][1]);
d158 1
a158 1
+	tputs(ansi_coloff, 1, sig ? writech : putch);
d165 1
a165 1
+	switch(mode & S_IFMT) {
d174 1
a174 1
+			return(1);
d177 1
a177 1
+			return(1);
d180 1
a180 1
+			return(1);
d183 1
a183 1
+			return(1);
d186 1
a186 1
+			return(1);
d189 1
a189 1
+			return(1);
d198 1
a198 1
+		return(1);
d200 1
a200 1
+	return(0);
d205 1
a205 1
+	char *cs;
d209 1
d214 6
a219 4
+	for (i = 0 ; i < C_NUMCOLORS ; i++) {
+		if (len <= 2*i) {
+			c[0] = defcolors[2*i];
+			c[1] = defcolors[2*i+1];
d221 2
a222 2
+			c[0] = cs[2*i];
+			c[1] = cs[2*i+1];
d224 19
a242 3
+		for (j = 0 ; j < 2 ; j++) {
+			if ((c[j] < '0' || c[j] > '7') &&
+			    tolower((unsigned char)c[j]) != 'x') {
d244 3
a246 3
+					"error: invalid character '%c' in LSCOLORS env var\n",
+					c[j]);
+				c[j] = defcolors[2*i+j];
a247 4
+			if (tolower((unsigned char)c[j]) == 'x')
+				colors[i][j] = -1;
+			else
+				colors[i][j] = c[j]-'0';
d258 2
a259 2
+	(void) signal(sig, SIG_DFL);
+	(void) kill(getpid(), sig);
@


1.1.1.1
log
@Import colorls.

This is a simple hack, taken from FreeBSD, to OpenBSD's ls(1) to
use ANSI sequences to display file attributes in color.
@
text
@@
