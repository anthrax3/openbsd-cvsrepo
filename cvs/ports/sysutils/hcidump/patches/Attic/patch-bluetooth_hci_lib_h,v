head	1.2;
access;
symbols
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	jasper_20081129:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.10.05.17.38.31;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2008.11.29.09.54.49;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.11.29.09.54.49;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@bluetooth on openbsd isn't really a moving target anymore with active
maintainers; and these ports were just rotting away. so move them to the
attic.

as discussed with and ok uwe@@ (MAINTAINER) and aja@@
@
text
@$OpenBSD: patch-bluetooth_hci_lib_h,v 1.1 2008/11/29 09:54:49 jasper Exp $
--- bluetooth/hci_lib.h.orig	Tue Aug 12 11:09:49 2008
+++ bluetooth/hci_lib.h	Tue Aug 12 11:09:49 2008
@@@@ -30,6 +30,7 @@@@
 extern "C" {
 #endif
 
+#if 0
 struct hci_request {
 	uint16_t ogf;
 	uint16_t ocf;
@@@@ -122,21 +123,29 @@@@ int hci_get_route(bdaddr_t *bdaddr);
 
 char *hci_dtypetostr(int type);
 char *hci_dflagstostr(uint32_t flags);
+#endif
 char *hci_ptypetostr(unsigned int ptype);
+#if 0
 int hci_strtoptype(char *str, unsigned int *val);
 char *hci_scoptypetostr(unsigned int ptype);
 int hci_strtoscoptype(char *str, unsigned int *val);
+#endif
 char *hci_lptostr(unsigned int ptype);
+#if 0
 int hci_strtolp(char *str, unsigned int *val);
 char *hci_lmtostr(unsigned int ptype);
 int hci_strtolm(char *str, unsigned int *val);
 
 char *hci_cmdtostr(unsigned int cmd);
 char *hci_commandstostr(uint8_t *commands, char *pref, int width);
+#endif
 
 char *hci_vertostr(unsigned int ver);
+#if 0
 int hci_strtover(char *str, unsigned int *ver);
+#endif
 char *lmp_vertostr(unsigned int ver);
+#if 0
 int lmp_strtover(char *str, unsigned int *ver);
 
 char *lmp_featurestostr(uint8_t *features, char *pref, int width);
@@@@ -205,6 +214,7 @@@@ static inline int hci_filter_test_opcode(int opcode, s
 {
 	return (f->opcode == opcode);
 }
+#endif
 
 #ifdef __cplusplus
 }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import bluez-hcidump 1.42

HCIdump reads raw HCI data coming from and going to a Bluetooth device
and prints to screen commands, events and data in a human-readable form.
Optionally, the dump can be written to a file rather than parsed, and
the dump file can be parsed in a subsequent moment.

from jcs@@, with some tweaks by me
requested by uwe@@
@
text
@@
