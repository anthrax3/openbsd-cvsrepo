head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.16
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.14
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2013.04.17.04.42.32;	author mglocker;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.14.00.58.39;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.07.19.21.55;	author jakob;	state dead;
branches;
next	1.1;

1.1
date	2002.06.16.19.36.33;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix broken compile after the usb 'typedef struct' commit.

Reported and ok naddy@@
@
text
@--- usbctl.c.orig	Mon Feb 25 01:50:55 2002
+++ usbctl.c	Tue Apr 16 22:42:31 2013
@@@@ -62,6 +62,7 @@@@
 #endif
 
 #define NSTRINGS
+#define STRINGLANG
 
 int num = 0;
 
@@@@ -80,17 +81,43 @@@@ getstring(int si, char *s)
 	int r, i, n;
 	u_int16_t c;
 	usb_string_descriptor_t us;
+	int lang = 0;
 
 	if (si == 0 || num) {
 		*s = 0;
 		return;
 	}
+
+#ifdef STRINGLANG
 	req.ucr_addr = usbaddr;
 	req.ucr_request.bmRequestType = UT_READ_DEVICE;
 	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
 	req.ucr_data = &us;
-	USETW2(req.ucr_request.wValue, UDESC_STRING, si);
+	USETW2(req.ucr_request.wValue, UDESC_STRING, 0);
 	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, sizeof(usb_string_descriptor_t));
+	req.ucr_flags = USBD_SHORT_XFER_OK;
+	r = ioctl(usbf, USB_REQUEST, &req);
+	if (r < 0) {
+		fprintf(stderr, "get lang tbl failed (error=%d)\n", errno);
+		*s = 0;
+		return;
+	}
+	if (req.ucr_actlen > 0 && us.bLength >= 4) {
+		lang = UGETW(us.bString[0]);
+#if 0
+		printf("getstring: %d langs, using %d\n",
+		       (us.bLength - 2) / 2, lang);
+#endif
+	}
+#endif
+
+	req.ucr_addr = usbaddr;
+	req.ucr_request.bmRequestType = UT_READ_DEVICE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	req.ucr_data = &us;
+	USETW2(req.ucr_request.wValue, UDESC_STRING, si);
+	USETW(req.ucr_request.wIndex, lang);
 #ifdef NSTRINGS
 	USETW(req.ucr_request.wLength, sizeof(usb_string_descriptor_t));
 	req.ucr_flags = USBD_SHORT_XFER_OK;
@@@@ -309,7 +336,7 @@@@ bPwrOn2PwrGood=%d bHubContrCurrent=%d DeviceRemovable=
 }
 
 void
-prhidd(usb_hid_descriptor_t *d)
+prhidd(struct usb_hid_descriptor *d)
 {
 	int i;
 
@@@@ -384,7 +411,7 @@@@ struct usb_cdc_union_descriptor {
 };
 
 void
-prcdcd(usb_descriptor_t *ud)
+prcdcd(struct usb_cdc_header_descriptor *ud)
 {
 	if (ud->bDescriptorType != UDESC_CS_INTERFACE)
 		printf("prcdcd: strange bDescriptorType=%d\n", 
@@@@ -630,7 +657,7 @@@@ gethubdesc(int f, usb_hub_descriptor_t *d, int addr)
 	req.ucr_addr = addr;
 	req.ucr_request.bmRequestType = UT_READ_CLASS_DEVICE;
 	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
-	USETW(req.ucr_request.wValue, 0);
+	USETW2(req.ucr_request.wValue, UDESC_HUB, 0);
 	USETW(req.ucr_request.wIndex, 0);
 	USETW(req.ucr_request.wLength, USB_HUB_DESCRIPTOR_SIZE);
 	req.ucr_data = d;
@@@@ -689,7 +716,7 @@@@ getconfigdesc(int f, int i, usb_config_descriptor_t *d
 }
 
 void
-gethiddesc(int f, int i, usb_hid_descriptor_t *d, int size, int addr)
+gethiddesc(int f, int i, struct usb_hid_descriptor *d, int size, int addr)
 {
 	struct usb_ctl_request req;
 	int r;
@@@@ -1147,7 +1174,7 @@@@ prdesc(void *p, int *class, int *subclass, int *iface,
 #endif
 	case UDESC_CS_DEVICE:
 		if (*class == UICLASS_HID) {
-			usb_hid_descriptor_t *hid = p;
+			struct usb_hid_descriptor *hid = p;
 			int k;
 			
 			printf("HID descriptor:\n");
@@@@ -1243,8 +1270,8 @@@@ prdesc(void *p, int *class, int *subclass, int *iface,
 	default:
 	def:
 		printf("Unknown descriptor (class %d/%d):\n", *class, *subclass);
-		printf("bLength=%d bDescriptorType=%d bDescriptorSubtype=%d ...\n", d->bLength, 
-		       d->bDescriptorType, d->bDescriptorSubtype
+		printf("bLength=%d bDescriptorType=%d ...\n", d->bLength, 
+		       d->bDescriptorType
 		       );
 		break;
 	}
@@@@ -1321,6 +1348,7 @@@@ main(int argc, char **argv)
 
 	if (!doaddr)
 		prunits(f);
+#ifndef __OpenBSD__
 	if (!nodisc) {
 		r = ioctl(f, USB_DISCOVER);
 		if (r < 0)
@@@@ -1329,6 +1357,7 @@@@ main(int argc, char **argv)
 		if (disconly)
 			exit(0);
 	}
+#endif
 
 	for(addr = 0; addr < USB_MAX_DEVICES; addr++) {
 		if (doaddr != -1 && addr != doaddr)
@


1.3
log
@- we don't implement USB_DISCOVER, don't try to use it
- don't assume that usb_descriptor_t has a field bDescriptorSubtype,
this field is class specific and shouldn't be there
- make fetch of hub descriptors in usbctl work (by setting the
correct request value)
- before reading a string descriptor, read the language table and
use a correct language code if possible
- install usbgen(8) manual, regen plist, bump

mostly from pkgsrc,
http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/sysutils/usbutil/patches/patch-ab
@
text
@d1 2
a2 3
$OpenBSD$
--- usbctl.c.orig	Mon Feb 25 00:50:55 2002
+++ usbctl.c	Mon Dec 15 17:43:07 2008
d56 9
d83 18
@


1.2
log
@update to v0.5
@
text
@d1 18
a18 4
$OpenBSD: patch-usbctl_c,v 1.1 2002/06/16 19:36:33 pvalchev Exp $
--- usbctl.c.orig	Sun Jun 16 13:32:56 2002
+++ usbctl.c	Sun Jun 16 13:35:00 2002
@@@@ -76,18 +76,18 @@@@ getstring(int si, char *s)
d22 26
a47 6
-	req.addr = usbaddr;
-	req.request.bmRequestType = UT_READ_DEVICE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	req.data = &us;
-	USETW2(req.request.wValue, UDESC_STRING, si);
-	USETW(req.request.wIndex, 0);
d53 1
a53 1
+	USETW(req.ucr_request.wIndex, 0);
d55 30
a84 14
-	USETW(req.request.wLength, sizeof(usb_string_descriptor_t));
-	req.flags = USBD_SHORT_XFER_OK;
+	USETW(req.ucr_request.wLength, sizeof(usb_string_descriptor_t));
+	req.ucr_flags = USBD_SHORT_XFER_OK;
 #else
-	USETW(req.request.wLength, 1);
-	req.flags = 0;
+	USETW(req.ucr_request.wLength, 1);
+	req.ucr_flags = 0;
 #endif
 	r = ioctl(usbf, USB_REQUEST, &req);
 	if (r < 0) {
@@@@ -96,7 +96,7 @@@@ getstring(int si, char *s)
 		return;
d86 1
a86 8
 #ifndef NSTRINGS
-	USETW(req.request.wLength, us.bLength);
+	USETW(req.ucr_request.wLength, us.bLength);
 	r = ioctl(usbf, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -123,10 +123,10 @@@@ prunits(int f)
 	int r, n, i;
d88 9
a96 9
 	for(n = i = 0; i < USB_MAX_DEVICES; i++) {
-		di.addr = i;
+		di.udi_addr = i;
 		r = ioctl(f, USB_DEVICEINFO, &di);
 		if (r == 0) {
-			printf("USB device %d: %d\n", i, di.class);
+			printf("USB device %d: %d\n", i, di.udi_class);
 			n++;
 		}
d98 1
a98 250
@@@@ -618,14 +618,14 @@@@ gethubdesc(int f, usb_hub_descriptor_t *
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_CLASS_DEVICE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, USB_HUB_DESCRIPTOR_SIZE);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_CLASS_DEVICE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, USB_HUB_DESCRIPTOR_SIZE);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -637,14 +637,14 @@@@ getdevicedesc(int f, usb_device_descript
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_DEVICE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	USETW2(req.request.wValue, UDESC_DEVICE, 0);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, USB_DEVICE_DESCRIPTOR_SIZE);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_DEVICE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	USETW2(req.ucr_request.wValue, UDESC_DEVICE, 0);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, USB_DEVICE_DESCRIPTOR_SIZE);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -656,24 +656,24 @@@@ getconfigdesc(int f, int i, usb_config_d
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_DEVICE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	USETW2(req.request.wValue, UDESC_CONFIG, i);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, USB_CONFIG_DESCRIPTOR_SIZE);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_DEVICE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	USETW2(req.ucr_request.wValue, UDESC_CONFIG, i);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, USB_CONFIG_DESCRIPTOR_SIZE);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_DEVICE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	USETW2(req.request.wValue, UDESC_CONFIG, i);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, UGETW(d->wTotalLength));
-	req.data = d;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_DEVICE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	USETW2(req.ucr_request.wValue, UDESC_CONFIG, i);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, UGETW(d->wTotalLength));
+	req.ucr_data = d;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -685,14 +685,14 @@@@ gethiddesc(int f, int i, usb_hid_descrip
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_INTERFACE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	USETW2(req.request.wValue, UDESC_HID, 0);
-	USETW(req.request.wIndex, i);
-	USETW(req.request.wLength, size);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_INTERFACE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	USETW2(req.ucr_request.wValue, UDESC_HID, 0);
+	USETW(req.ucr_request.wIndex, i);
+	USETW(req.ucr_request.wLength, size);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -704,14 +704,14 @@@@ getreportdesc(int f, int ifc, int no, ch
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_INTERFACE;
-	req.request.bRequest = UR_GET_DESCRIPTOR;
-	USETW2(req.request.wValue, UDESC_REPORT, no);
-	USETW(req.request.wIndex, ifc);
-	USETW(req.request.wLength, size);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_INTERFACE;
+	req.ucr_request.bRequest = UR_GET_DESCRIPTOR;
+	USETW2(req.ucr_request.wValue, UDESC_REPORT, no);
+	USETW(req.ucr_request.wIndex, ifc);
+	USETW(req.ucr_request.wLength, size);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -723,14 +723,14 @@@@ getportstatus(int f, int i, usb_port_sta
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_CLASS_OTHER;
-	req.request.bRequest = UR_GET_STATUS;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, i);
-	USETW(req.request.wLength, 4);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_CLASS_OTHER;
+	req.ucr_request.bRequest = UR_GET_STATUS;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, i);
+	USETW(req.ucr_request.wLength, 4);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -742,14 +742,14 @@@@ gethubstatus(int f, usb_hub_status_t *d,
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_CLASS_DEVICE;
-	req.request.bRequest = UR_GET_STATUS;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, 4);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_CLASS_DEVICE;
+	req.ucr_request.bRequest = UR_GET_STATUS;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, 4);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -761,14 +761,14 @@@@ getconfiguration(int f, u_int8_t *d, int
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_DEVICE;
-	req.request.bRequest = UR_GET_CONFIG;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, 1);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_DEVICE;
+	req.ucr_request.bRequest = UR_GET_CONFIG;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, 1);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -780,14 +780,14 @@@@ getdevicestatus(int f, usb_status_t *d, 
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_DEVICE;
-	req.request.bRequest = UR_GET_STATUS;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, 0);
-	USETW(req.request.wLength, 2);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_DEVICE;
+	req.ucr_request.bRequest = UR_GET_STATUS;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, 0);
+	USETW(req.ucr_request.wLength, 2);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -799,14 +799,14 @@@@ getinterfacestatus(int f, usb_status_t *
 	struct usb_ctl_request req;
 	int r;
 
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_INTERFACE;
-	req.request.bRequest = UR_GET_STATUS;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, ifc);
-	USETW(req.request.wLength, 2);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_INTERFACE;
+	req.ucr_request.bRequest = UR_GET_STATUS;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, ifc);
+	USETW(req.ucr_request.wLength, 2);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -818,14 +818,14 @@@@ getendpointstatus(int f, usb_status_t *d
 	struct usb_ctl_request req;
 	int r;
a99 20
-	req.addr = addr;
-	req.request.bmRequestType = UT_READ_ENDPOINT;
-	req.request.bRequest = UR_GET_STATUS;
-	USETW(req.request.wValue, 0);
-	USETW(req.request.wIndex, endp);
-	USETW(req.request.wLength, 2);
-	req.data = d;
-	req.flags = 0;
+	req.ucr_addr = addr;
+	req.ucr_request.bmRequestType = UT_READ_ENDPOINT;
+	req.ucr_request.bRequest = UR_GET_STATUS;
+	USETW(req.ucr_request.wValue, 0);
+	USETW(req.ucr_request.wIndex, endp);
+	USETW(req.ucr_request.wLength, 2);
+	req.ucr_data = d;
+	req.ucr_flags = 0;
 	r = ioctl(f, USB_REQUEST, &req);
 	if (r < 0)
 		err(1, "USB_REQUEST");
@@@@ -1324,7 +1324,7 @@@@ main(int argc, char **argv)
a101 6
 			continue;
-		di.addr = addr;
+		di.udi_addr = addr;
 		r = ioctl(f, USB_DEVICEINFO, &di);
 		if (r)
 			continue;
@


1.1
log
@sync with USB namespace changes
@
text
@d1 1
a1 1
$OpenBSD$
@

