head	1.9;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2016.12.12.17.55.24;	author landry;	state Exp;
branches;
next	1.8;
commitid	AA0uUdlZRPnmg3Vk;

1.8
date	2016.12.08.10.06.42;	author landry;	state Exp;
branches;
next	1.7;
commitid	sLC4CqWi31aPpIIY;

1.7
date	2016.12.04.16.56.53;	author jca;	state Exp;
branches;
next	1.6;
commitid	tOWzytmgr8lch7nR;

1.6
date	2016.12.03.11.44.41;	author landry;	state Exp;
branches;
next	1.5;
commitid	qj4URm0Db8feFZOv;

1.5
date	2016.12.02.15.50.29;	author jca;	state Exp;
branches;
next	1.4;
commitid	mADlZHEPibAUHfk6;

1.4
date	2016.06.13.09.12.40;	author landry;	state Exp;
branches;
next	1.3;
commitid	i1EY2nNVfBI2xXZF;

1.3
date	2015.07.23.07.33.17;	author landry;	state dead;
branches;
next	1.2;
commitid	mFWJoll0XLJ4Rcdj;

1.2
date	2014.10.27.09.07.07;	author landry;	state Exp;
branches;
next	1.1;
commitid	6bTjJDhGm100kcqv;

1.1
date	2014.10.26.20.43.56;	author landry;	state Exp;
branches;
next	;
commitid	Pqs7fyn0icDUbscJ;


desc
@@


1.9
log
@Ugly bandaid: bump CMDLINE_BUFFER_SIZE to 16k instead of defaulting to
4k, i'm hitting "processes plugin: Command line did not fit into
buffer." warning way too much and this spams logs. Better solution would
be to dynamically alloc the array on the fly as-needed like top/ps
does..
@
text
@$OpenBSD: patch-src_processes_c,v 1.8 2016/12/08 10:06:42 landry Exp $

https://github.com/collectd/collectd/issues/2061
https://github.com/collectd/collectd/pull/2088

--- src/processes.c.orig	Wed Nov 30 09:52:01 2016
+++ src/processes.c	Mon Dec 12 18:52:34 2016
@@@@ -155,7 +155,7 @@@@
 #if defined(ARG_MAX) && (ARG_MAX < 4096)
 #define CMDLINE_BUFFER_SIZE ARG_MAX
 #else
-#define CMDLINE_BUFFER_SIZE 4096
+#define CMDLINE_BUFFER_SIZE 4*4096
 #endif
 #endif
 
@@@@ -1937,7 +1937,7 @@@@ static int ps_read(void) {
   ps_list_reset();
 
   /* Open the kvm interface, get a descriptor */
-  kd = kvm_open(NULL, NULL, NULL, 0, errbuf);
+  kd = kvm_openfiles(NULL, NULL, NULL, KVM_NO_FILES, errbuf);
   if (kd == NULL) {
     ERROR("processes plugin: Cannot open kvm interface: %s", errbuf);
     return (0);
@


1.8
log
@add link to upstream pull-request
@
text
@d1 1
a1 1
$OpenBSD: patch-src_processes_c,v 1.7 2016/12/04 16:56:53 jca Exp $
d7 10
a16 1
+++ src/processes.c	Sun Dec  4 16:22:15 2016
@


1.7
log
@Unbreak the kvm(3) calls used by the processes and tcpconns plugins.

- patch the correct kvm_open call to use KVM_NO_FILES.  Also, use
  kvm_openfiles instead, as was probably intended
- add a new implementation for tcpconns, based on kvm_getfiles instead
  of peeking at kernel memory

ok landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_processes_c,v 1.6 2016/12/03 11:44:41 landry Exp $
d4 1
@


1.6
log
@Update to collectd 5.6.2.

- put the write_riemann plugin in its own subpackage, depending on
  riemann-c-client.
- disable protobuf-c detection/dependency, used by two plugins we dont
  enable (pinba and grpc)
- fix some WANTLIB
- the processes and tcpconns plugin still seem to be busted, calling
  kvm_openfiles with O_RDONLY|KVM_NO_FILES is apparently not enough.
Interestingly, swap plugin (using the same code) works ?

Based on a diff from Pavel Korovin for 5.6.1, thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-src_processes_c,v 1.5 2016/12/02 15:50:29 jca Exp $
d6 2
a7 2
+++ src/processes.c	Sat Dec  3 12:30:07 2016
@@@@ -1786,7 +1786,7 @@@@ static int ps_read(void) {
d11 2
a12 2
-  kd = kvm_openfiles(NULL, "/dev/null", NULL, 0, errbuf);
+  kd = kvm_openfiles(NULL, "/dev/null", NULL, O_RDONLY|KVM_NO_FILES, errbuf);
@


1.5
log
@Use KVM_NO_FILES to unbreak processes and swap plugins.

The tcpconns plugin needs more work, using kvm_getfiles(3) or sysctl(3).
Prodded by landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_processes_c,v 1.4 2016/06/13 09:12:40 landry Exp $
d3 1
a3 1
https://github.com/collectd/collectd/issues/1674
d5 4
a8 20
--- src/processes.c.orig	Fri Jan 22 10:51:17 2016
+++ src/processes.c	Tue Nov 29 09:25:04 2016
@@@@ -1964,7 +1964,7 @@@@ static int ps_read (void)
 	ps_list_reset ();
 
 	/* Open the kvm interface, get a descriptor */
-	kd = kvm_open (NULL, NULL, NULL, 0, errbuf);
+	kd = kvm_open (NULL, NULL, NULL, O_RDONLY|KVM_NO_FILES, errbuf);
 	if (kd == NULL)
 	{
 		ERROR ("processes plugin: Cannot open kvm interface: %s",
@@@@ -2045,9 +2045,6 @@@@ static int ps_read (void)
 			pse.io_wchar = -1;
 			pse.io_syscr = -1;
 			pse.io_syscw = -1;
-
-			pse.cswitch_vol = -1;
-			pse.cswitch_invol = -1;
 
 			ps_list_add (procs[i].p_comm, have_cmdline ? cmdline : NULL, &pse);
d10 6
@


1.4
log
@Update to collectd 5.5.1.

Remove patches merged upstream, add patch to fix the build from
https://github.com/collectd/collectd/issues/1674
@
text
@d1 1
a1 1
$OpenBSD$
d5 13
a17 3
--- src/processes.c.orig	Mon Jun  6 10:05:24 2016
+++ src/processes.c	Mon Jun  6 10:05:35 2016
@@@@ -2046,9 +2046,6 @@@@ static int ps_read (void)
d20 1
a20 1
 
d23 1
a23 1
-
a25 1
 			switch (procs[i].p_stat)
@


1.3
log
@Update to collectd 5.5.0.

Enable aggregation, curl_json, fhcount, log_logstash, memcached,
threshold, write_log & write_riemann plugins.
Add dependencies on devel/libyajl for curl_json & log_logstash and
devel/protobuf-c for write_riemann.
Add a README explaining how to run the daemon as _collectd user in case
you dont need the dns and ping plugins (the only ones requiring root).
Lots of patches merged upstream.

From Pavel Korovin with small tweaks by me, tested here on ppc.
@
text
@d1 7
a7 152
$OpenBSD: patch-src_processes_c,v 1.2 2014/10/27 09:07:07 landry Exp $
https://github.com/collectd/collectd/pull/778
--- src/processes.c.orig	Sun Jan 26 09:09:14 2014
+++ src/processes.c	Sun Oct 26 21:27:10 2014
@@@@ -94,13 +94,13 @@@@
 #  endif
 /* #endif KERNEL_LINUX */
 
-#elif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD
+#elif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD )
 #  include <kvm.h>
 #  include <sys/param.h>
 #  include <sys/sysctl.h>
 #  include <sys/user.h>
 #  include <sys/proc.h>
-/* #endif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD */
+/* #endif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD ) */
 
 #elif HAVE_PROCINFO_H
 #  include <procinfo.h>
@@@@ -210,9 +210,9 @@@@ static mach_msg_type_number_t     pset_list_len;
 static long pagesize_g;
 /* #endif KERNEL_LINUX */
 
-#elif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD
+#elif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD )
 static int pagesize;
-/* #endif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD */
+/* #endif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD ) */
 
 #elif HAVE_PROCINFO_H
 static  struct procentry64 procentry[MAXPROCENTRY];
@@@@ -619,9 +619,9 @@@@ static int ps_init (void)
 			pagesize_g, CONFIG_HZ);
 /* #endif KERNEL_LINUX */
 
-#elif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD
+#elif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD )
 	pagesize = getpagesize();
-/* #endif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD */
+/* #endif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD ) */
 
 #elif HAVE_PROCINFO_H
 	pagesize = getpagesize();
@@@@ -1777,14 +1777,14 @@@@ static int ps_read (void)
 	read_fork_rate();
 /* #endif KERNEL_LINUX */
 
-#elif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD
+#elif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD )
 	int running  = 0;
 	int sleeping = 0;
 	int zombies  = 0;
 	int stopped  = 0;
-	int blocked  = 0;
+	int onproc   = 0;
 	int idle     = 0;
-	int wait     = 0;
+	int dead     = 0;
 
 	kvm_t *kd;
 	char errbuf[1024];
@@@@ -1808,7 +1808,7 @@@@ static int ps_read (void)
 	}
 
 	/* Get the list of processes. */
-	procs = kvm_getprocs(kd, KERN_PROC_ALL, 0, &count);
+	procs = kvm_getprocs(kd, KERN_PROC_ALL, 0, sizeof(struct kinfo_proc), &count);
 	if (procs == NULL)
 	{
 		ERROR ("processes plugin: Cannot get kvm processes list: %s",
@@@@ -1822,22 +1822,20 @@@@ static int ps_read (void)
 	{
 		/* Create only one process list entry per _process_, i.e.
 		 * filter out threads (duplicate PID entries). */
-		if ((proc_ptr == NULL) || (proc_ptr->ki_pid != procs[i].ki_pid))
+		if ((proc_ptr == NULL) || (proc_ptr->p_pid != procs[i].p_pid))
 		{
 			char cmdline[ARG_MAX] = "";
 			_Bool have_cmdline = 0;
 
 			proc_ptr = &(procs[i]);
-			/* Don't probe system processes and processes without arguments */
-			if (((procs[i].ki_flag & P_SYSTEM) == 0)
-					&& (procs[i].ki_args != NULL))
+			/* Don't probe zombie processes */
+			if (!P_ZOMBIE(proc_ptr))
 			{
 				char **argv;
 				int argc;
 				int status;
 
-				/* retrieve the arguments */
-				argv = kvm_getargv (kd, proc_ptr, /* nchr = */ 0);
+				argv = kvm_getargv (kd, proc_ptr, 0);
 				argc = 0;
 				if ((argv != NULL) && (argv[0] != NULL))
 				{
@@@@ -1852,39 +1850,28 @@@@ static int ps_read (void)
 				}
 			} /* if (process has argument list) */
 
-			pse.id       = procs[i].ki_pid;
+			pse.id       = procs[i].p_pid;
 			pse.age      = 0;
 
 			pse.num_proc = 1;
-			pse.num_lwp  = procs[i].ki_numthreads;
+			pse.num_lwp  = 1; /*procs[i].ki_numthreads; see top -H code*/
 
-			pse.vmem_size = procs[i].ki_size;
-			pse.vmem_rss = procs[i].ki_rssize * pagesize;
-			pse.vmem_data = procs[i].ki_dsize * pagesize;
-			pse.vmem_code = procs[i].ki_tsize * pagesize;
-			pse.stack_size = procs[i].ki_ssize * pagesize;
+			pse.vmem_rss = procs[i].p_vm_rssize * pagesize;
+			pse.vmem_data = procs[i].p_vm_dsize * pagesize;
+			pse.vmem_code = procs[i].p_vm_tsize * pagesize;
+			pse.stack_size = procs[i].p_vm_ssize * pagesize;
+			pse.vmem_size = pse.stack_size + pse.vmem_code + pse.vmem_data;
 			pse.vmem_minflt = 0;
-			pse.vmem_minflt_counter = procs[i].ki_rusage.ru_minflt;
+			pse.vmem_minflt_counter = procs[i].p_uru_minflt;
 			pse.vmem_majflt = 0;
-			pse.vmem_majflt_counter = procs[i].ki_rusage.ru_majflt;
+			pse.vmem_majflt_counter = procs[i].p_uru_majflt;
 
 			pse.cpu_user = 0;
 			pse.cpu_system = 0;
-			pse.cpu_user_counter = 0;
-			pse.cpu_system_counter = 0;
-			/*
-			 * The u-area might be swapped out, and we can't get
-			 * at it because we have a crashdump and no swap.
-			 * If it's here fill in these fields, otherwise, just
-			 * leave them 0.
-			 */
-			if (procs[i].ki_flag & P_INMEM)
-			{
-				pse.cpu_user_counter = procs[i].ki_rusage.ru_utime.tv_usec
-				       	+ (1000000lu * procs[i].ki_rusage.ru_utime.tv_sec);
-				pse.cpu_system_counter = procs[i].ki_rusage.ru_stime.tv_usec
-					+ (1000000lu * procs[i].ki_rusage.ru_stime.tv_sec);
-			}
+			pse.cpu_user_counter = procs[i].p_uutime_usec +
+						(1000000lu * procs[i].p_uutime_sec);
+			pse.cpu_system_counter = procs[i].p_ustime_usec +
+						(1000000lu * procs[i].p_ustime_sec);
 
 			/* no I/O data */
 			pse.io_rchar = -1;
@@@@ -1892,17 +1879,17 @@@@ static int ps_read (void)
d11 4
a14 33
-			ps_list_add (procs[i].ki_comm, have_cmdline ? cmdline : NULL, &pse);
-		} /* if ((proc_ptr == NULL) || (proc_ptr->ki_pid != procs[i].ki_pid)) */
+			ps_list_add (procs[i].p_comm, have_cmdline ? cmdline : NULL, &pse);
+		} /* if ((proc_ptr == NULL) || (proc_ptr->p_pid != procs[i].p_pid)) */
 
-		switch (procs[i].ki_stat)
+		switch (procs[i].p_stat)
 		{
 			case SSTOP: 	stopped++;	break;
 			case SSLEEP:	sleeping++;	break;
 			case SRUN:	running++;	break;
 			case SIDL:	idle++;		break;
-			case SWAIT:	wait++;		break;
-			case SLOCK:	blocked++;	break;
+			case SONPROC:	onproc++;	break;
+			case SDEAD:	dead++;		break;
 			case SZOMB:	zombies++;	break;
 		}
 	}
@@@@ -1913,13 +1900,13 @@@@ static int ps_read (void)
 	ps_submit_state ("sleeping", sleeping);
 	ps_submit_state ("zombies",  zombies);
 	ps_submit_state ("stopped",  stopped);
-	ps_submit_state ("blocked",  blocked);
+	ps_submit_state ("onproc",   onproc);
 	ps_submit_state ("idle",     idle);
-	ps_submit_state ("wait",     wait);
+	ps_submit_state ("dead",     dead);
 
 	for (ps_ptr = list_head_g; ps_ptr != NULL; ps_ptr = ps_ptr->next)
 		ps_submit_proc_list (ps_ptr);
-/* #endif HAVE_LIBKVM_GETPROCS && HAVE_STRUCT_KINFO_PROC_FREEBSD */
+/* #endif HAVE_LIBKVM_GETPROCS && ( HAVE_STRUCT_KINFO_PROC_FREEBSD || HAVE_STRUCT_KINFO_PROC_OPENBSD ) */
d16 1
a16 2
 #elif HAVE_PROCINFO_H
 	/* AIX */
@


1.2
log
@add links to upstream github PR
@
text
@d1 1
a1 1
$OpenBSD: patch-src_processes_c,v 1.1 2014/10/26 20:43:56 landry Exp $
@


1.1
log
@Enable the processes & rrdcached plugins.

whack processes.c to use the same codepaths as freebsd's, taking into
account kinfo_proc differences.. to be properly pushed upstream.
Tested on ppc & amd64.
@
text
@d1 2
a2 1
$OpenBSD$
@

