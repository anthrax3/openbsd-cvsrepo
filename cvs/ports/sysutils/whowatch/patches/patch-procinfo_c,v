head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.26
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.24
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.18
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.16
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.14
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.10
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.07.06.13.15.40;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.18.12.07.45;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.15.18.15.12;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- move away from old kinfo_proc2
@
text
@$OpenBSD: patch-procinfo_c,v 1.2 2010/01/18 12:07:45 sthen Exp $
--- procinfo.c.orig	Tue Jun  6 20:36:47 2000
+++ procinfo.c	Wed Jul  6 15:14:42 2011
@@@@ -64,9 +64,9 @@@@ void get_info(int pid, struct procinfo *p)
 #else
 int fill_kinfo(struct kinfo_proc *info, int pid)
 {
-	int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid };
-	int len = sizeof *info;
-	if(sysctl(mib, 4, info, &len, 0, 0) == -1) 
+	int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid, sizeof (struct kinfo_proc), 1 };
+	size_t len = sizeof *info;
+	if(sysctl(mib, 6, info, &len, 0, 0) == -1) 
 		return -1;
 	return len?0:-1;
 }
@@@@ -83,12 +83,12 @@@@ void get_info(int pid, struct procinfo *p)
 	
 	if(fill_kinfo(&info, pid) == -1) return;
 	
-    	p->ppid = info.kp_eproc.e_ppid;
-    	p->tpgid = info.kp_eproc.e_tpgid;
-    	p->euid = info.kp_eproc.e_pcred.p_svuid;
-    	p->stat = info.kp_proc.p_stat;
-    	strncpy(p->exec_file, info.kp_proc.p_comm, EXEC_FILE);
-    	p->cterm = info.kp_eproc.e_tdev;
+    	p->ppid = info.p_ppid;
+    	p->tpgid = info.p_tpgid;
+    	p->euid = info.p_uid;
+    	p->stat = info.p_stat;
+    	strncpy(p->exec_file, info.p_comm, EXEC_FILE);
+    	p->cterm = info.p_tdev;
 	p->exec_file[EXEC_FILE] = '\0';
 }
 #endif
@@@@ -123,8 +123,9 @@@@ int get_term(char *tty)
  */
 int get_login_pid(char *tty)
 {
-	int mib[4] = {CTL_KERN, KERN_PROC, KERN_PROC_TTY, 0};
-	int len, t, el, i, pid, cndt = -1, l;
+	int mib[6] = {CTL_KERN, KERN_PROC, KERN_PROC_TTY, 0, sizeof(struct kinfo_proc), 0};
+	int t, el, i, pid, cndt = -1, l;
+	size_t len;
 	struct kinfo_proc *info;
 	struct procinfo p;
 	
@@@@ -134,26 +135,27 @@@@ int get_login_pid(char *tty)
 		
 	if((t = get_term(tty)) == -1) return -1;
 	mib[3] = t;
-	if(sysctl(mib, 4, 0, &len, 0, 0) == -1)
+	if(sysctl(mib, 6, NULL, &len, NULL, 0) == -1)
 		return -1;
 	info = calloc(1, len);
 	if(!info) return -1;
 	el = len/sizeof(struct kinfo_proc);
-	if(sysctl(mib, 4, info, &len, 0, 0) == -1)
+	mib[5] = el;
+	if(sysctl(mib, 6, info, &len, NULL, 0) == -1)
 		return -1;
 	for(i = 0; i < el; i++) {
-		if(!(pid = info[i].kp_proc.p_pid)) continue;
+		if(!(pid = info[i].p_pid)) continue;
 		get_info(get_ppid(pid), &p);
 		if(p.cterm == -1 || p.cterm != t) {
 			cndt = pid;
-			l = strlen(info[i].kp_proc.p_comm);
+			l = strlen(info[i].p_comm);
 			/*
 			 * This is our best match: parent of the process
 			 * doesn't have controlling terminal and process'
 			 * name ends with "sh"
 			 *
 			 */
-			if(l > 1 && !strncmp("sh",info[i].kp_proc.p_comm+l-2,2)) {
+			if(l > 1 && !strncmp("sh",info[i].p_comm+l-2,2)) {
 				free(info);
 				return pid;
 			}
@@@@ -168,15 +170,16 @@@@ int get_login_pid(char *tty)
  */
 int get_all_info(struct kinfo_proc **info)
 {
-	int mib[3] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
-	int len, el;
+	int mib[6] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0, sizeof(struct kinfo_proc), 0 };
+	int el;
+	size_t len;
 
-	if(sysctl(mib, 3, 0, &len, 0, 0) == -1)
+	if(sysctl(mib, 6, NULL, &len, 0, 0) == -1)
 		return 0;
 	*info = calloc(1, len);
 	if(!*info) return 0;
-	el = len/sizeof(struct kinfo_proc);
-	if(sysctl(mib, 3, *info, &len, 0, 0) == -1)
+	mib[5] = el = len/sizeof(struct kinfo_proc);
+	if(sysctl(mib, 6, *info, &len, 0, 0) == -1)
 		return 0;
 	return el;
 }
@@@@ -239,7 +242,7 @@@@ char *get_cmdline(int pid)
 	bzero(buf, sizeof buf);
 	if(fill_kinfo(&info, pid) == -1)
 		return "-";
-	memcpy(buf, info.kp_proc.p_comm, sizeof buf - 1);
+	memcpy(buf, info.p_comm, sizeof buf - 1);
 	if(!full_cmd) return buf;
 #ifdef HAVE_LIBKVM
 	if(!can_use_kvm) return buf;
@


1.2
log
@Unbreak; KERN_PROC fallout, but it crashed and burned even before that.
ok jasper@@
@
text
@d1 4
a4 6
$OpenBSD: patch-procinfo_c,v 1.1 2007/03/15 18:15:12 naddy Exp $
--- procinfo.c.orig	Tue Jun  6 19:36:47 2000
+++ procinfo.c	Mon Jan 18 11:51:29 2010
@@@@ -62,18 +62,18 @@@@ void get_info(int pid, struct procinfo *p)
 	p->exec_file[EXEC_FILE] = '\0';
 }
d6 1
a6 2
-int fill_kinfo(struct kinfo_proc *info, int pid)
+int fill_kinfo(struct kinfo_proc2 *info, int pid)
d11 1
a11 1
+	int mib[] = { CTL_KERN, KERN_PROC2, KERN_PROC_PID, pid, sizeof (struct kinfo_proc2), 1 };
a16 8
 		
 void get_info(int pid, struct procinfo *p)
 {
-	struct kinfo_proc info;	
+	struct kinfo_proc2 info;	
 	p->ppid = -1;
 	p->cterm = -1;
 	p->euid = -1;
d36 1
a36 1
@@@@ -123,9 +123,10 @@@@ int get_term(char *tty)
d42 1
a42 2
-	struct kinfo_proc *info;
+	int mib[6] = {CTL_KERN, KERN_PROC2, KERN_PROC_TTY, 0, sizeof(struct kinfo_proc2), 0};
d45 1
a45 1
+	struct kinfo_proc2 *info;
a47 1
 	/* this is for ftp logins */
d57 1
a57 1
-	el = len/sizeof(struct kinfo_proc);
a58 1
+	el = len/sizeof(struct kinfo_proc2);
d81 1
a81 3
@@@@ -166,17 +168,18 @@@@ int get_login_pid(char *tty)
 /*
  * Get information about all system processes
d83 1
a83 2
-int get_all_info(struct kinfo_proc **info)
+int get_all_info(struct kinfo_proc2 **info)
d87 1
a87 1
+	int mib[6] = { CTL_KERN, KERN_PROC2, KERN_PROC_ALL, 0, sizeof(struct kinfo_proc2), 0 };
d98 1
a98 1
+	mib[5] = el = len/sizeof(struct kinfo_proc2);
d103 1
a103 8
@@@@ -233,17 +236,17 @@@@ int kvm_init()
 char *get_cmdline(int pid)
 {
 	static char buf[512];
-	struct kinfo_proc info;
+	struct kinfo_proc2 info;
 	
 	char **p, *s = buf;
a111 5
-	p = kvm_getargv(kd, &info, 0);
+	p = kvm_getargv2(kd, &info, 0);
 	if(!p) 	return buf;
 	for(; *p; p++) {
 		*s++ = ' ';	
@


1.1
log
@LP64 fix; problem reported by Bryan Irvine
@
text
@d1 9
a9 5
$OpenBSD$
--- procinfo.c.orig	Sat Mar 10 01:18:23 2007
+++ procinfo.c	Sat Mar 10 01:20:12 2007
@@@@ -65,7 +65,7 @@@@ void get_info(int pid, struct procinfo *
 int fill_kinfo(struct kinfo_proc *info, int pid)
d11 1
a11 1
 	int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid };
d13 2
d16 1
a16 1
 	if(sysctl(mib, 4, info, &len, 0, 0) == -1) 
d19 30
a48 1
@@@@ -124,7 +124,8 @@@@ int get_term(char *tty)
d51 1
a51 1
 	int mib[4] = {CTL_KERN, KERN_PROC, KERN_PROC_TTY, 0};
d53 2
d57 1
a57 1
 	struct kinfo_proc *info;
d60 41
a100 2
@@@@ -169,7 +170,8 @@@@ int get_login_pid(char *tty)
 int get_all_info(struct kinfo_proc **info)
d102 1
a102 1
 	int mib[3] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
d104 1
d108 9
a116 1
 	if(sysctl(mib, 3, 0, &len, 0, 0) == -1)
d118 23
@

