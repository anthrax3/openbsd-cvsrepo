head	1.5;
access;
symbols
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	sturm-2004_Jun_26:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2008.11.10.09.19.25;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2007.09.04.20.52.13;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.01.07.08.39;	author steven;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.26.00.33.30;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.26.19.00.48;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.06.26.19.00.48;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- update radmind to 1.13.0
- regen PLIST

from William Yodlowsky (MAINTAINER), thanks!
@
text
@$OpenBSD: patch-command_c,v 1.4 2007/09/04 20:52:13 jasper Exp $
--- command.c.orig	Fri Mar  9 13:36:28 2007
+++ command.c	Sun Mar 18 12:15:14 2007
@@@@ -662,7 +662,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
 
 	/* if allowable, check for transcript in the special file directory */
 
-	strcat( path, ".T" );
+	(void)strlcat( path, ".T", sizeof( path ) );
 
 	/* store value of av[ 2 ], because argcargv will be called
 	 * from special_t(), and that will blow away the current values
@@@@ -771,7 +771,7 @@@@ f_stor( SNET *sn, int ac, char *av[] )
 	    snet_writef( sn, "%d Path too long\r\n", 540 );
 	    return( 1 );
 	}
-	strcpy( upload_xscript, av[ 2 ] );
+	(void)strlcpy( upload_xscript, av[ 2 ], sizeof( upload_xscript ) );
 
 	/* make the directory for the files of this xscript to live in. */
 	if ( mkdir( xscriptdir, 0777 ) < 0 ) {
@@@@ -1244,7 +1244,7 @@@@ command_k( char *path_config )
 	}
 
 	if (( p = strrchr( av[ 1 ], '/' )) == NULL ) {
-	    sprintf( special_dir, "special" );
+	    (void)snprintf( special_dir, sizeof( special_dir ), "special" );
 	} else {
 	    *p = '\0';
 	    if ( snprintf( special_dir, MAXPATHLEN, "special/%s", av[ 1 ] )
@@@@ -1262,14 +1262,14 @@@@ command_k( char *path_config )
 		    "config file: line %d: command file too long\n", linenum );
 		continue;
 	    }
-	    strcpy( command_file, av[ 1 ] );
+	    (void)strlcpy( command_file, av[ 1 ], sizeof( command_file ) );
 	    if ( snprintf( temp, MAXPATHLEN, "%s/%s", special_dir,
 		    remote_cn ) >= MAXPATHLEN ) {
 		syslog( LOG_ERR, "config file: line %d: special dir too long\n",
 		    linenum );
 		continue;
 	    }
-	    strcpy( special_dir, temp );
+	    (void)strlcpy( special_dir, temp, sizeof( special_dir ) );
 	    return( 0 );
 	}
 	if ( wildcard( av[ 0 ], remote_host, 0 )) {
@@@@ -1278,14 +1278,14 @@@@ command_k( char *path_config )
 		    "config file: line %d: command file too long\n", linenum );
 		continue;
 	    }
-	    strcpy( command_file, av[ 1 ] );
+	    (void)strlcpy( command_file, av[ 1 ], sizeof( command_file ) );
 	    if ( snprintf( temp, MAXPATHLEN, "%s/%s", special_dir,
 		    remote_host ) >= MAXPATHLEN ) {
 		syslog( LOG_ERR, "config file: line %d: special dir too long\n",
 		    linenum );
 		continue;
 	    }
-	    strcpy( special_dir, temp );
+	    (void)strlcpy( special_dir, temp, sizeof( special_dir ) );
 	    return( 0 );
 	} 
 	if ( wildcard( av[ 0 ], remote_addr, 1 )) {
@@@@ -1294,14 +1294,14 @@@@ command_k( char *path_config )
 		    "config file: line %d: command file too long\n", linenum );
 		continue;
 	    }
-	    strcpy( command_file, av[ 1 ] );
+	    (void)strlcpy( command_file, av[ 1 ], sizeof( command_file ) );
 	    if ( snprintf( temp, MAXPATHLEN, "%s/%s", special_dir,
 		    remote_addr ) >= MAXPATHLEN ) {
 		syslog( LOG_ERR, "config file: line %d: special dir too long\n",
 		    linenum );
 		continue;
 	    }
-	    strcpy( special_dir, temp );
+	    (void)strlcpy( special_dir, temp, sizeof( special_dir ) );
 	    return( 0 );
 	} 
     }
@


1.4
log
@update radmind to 1.9.0

from William Yodlowsky (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-command_c,v 1.2 2005/01/26 00:33:30 pvalchev Exp $
@


1.3
log
@USE_LIBTOOL, regen patches
@
text
@d2 3
a4 3
--- command.c.orig	Thu Feb 10 19:17:57 2005
+++ command.c	Sun Apr  1 08:18:32 2007
@@@@ -636,7 +636,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
d13 1
a13 1
@@@@ -745,7 +745,7 @@@@ f_stor( SNET *sn, int ac, char *av[] )
d22 1
a22 1
@@@@ -1141,7 +1141,7 @@@@ command_k( char *path_config )
d31 1
a31 1
@@@@ -1159,14 +1159,14 @@@@ command_k( char *path_config )
d48 1
a48 1
@@@@ -1175,14 +1175,14 @@@@ command_k( char *path_config )
d65 1
a65 1
@@@@ -1191,14 +1191,14 @@@@ command_k( char *path_config )
@


1.2
log
@Update to radmind-1.4.0
from maintainer William Yodlowsky <bsd@@openbsd.rutgers.edu>
@
text
@d1 4
a4 4
$OpenBSD: patch-command_c,v 1.1.1.1 2004/06/26 19:00:48 sturm Exp $
--- command.c.orig	Tue Dec 14 10:59:27 2004
+++ command.c	Thu Jan 20 12:59:08 2005
@@@@ -635,7 +635,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
d13 1
a13 1
@@@@ -727,7 +727,7 @@@@ f_stor( SNET *sn, int ac, char *av[] )
d22 1
a22 1
@@@@ -1123,7 +1123,7 @@@@ command_k( char *path_config )
d31 1
a31 1
@@@@ -1141,14 +1141,14 @@@@ command_k( char *path_config )
d48 1
a48 1
@@@@ -1157,14 +1157,14 @@@@ command_k( char *path_config )
d65 1
a65 1
@@@@ -1173,14 +1173,14 @@@@ command_k( char *path_config )
@


1.1
log
@Initial revision
@
text
@d1 4
a4 67
$OpenBSD$
--- command.c.orig	2004-03-15 11:11:55.000000000 -0500
+++ command.c	2004-06-08 23:09:17.000000000 -0400
@@@@ -302,7 +302,7 @@@@ f_retr( sn, ac, av )
 
     switch ( keyword( ac, av )) {
     case K_COMMAND:
-        sprintf( path, "%s", command_file );
+        (void)snprintf( path, sizeof( path ), "%s", command_file );
 	break;
 
     case K_TRANSCRIPT:
@@@@ -324,7 +324,7 @@@@ f_retr( sn, ac, av )
 	    return( 1 );
 	}
 
-	sprintf( path, "transcript/%s", d_tran );
+	(void)snprintf( path, sizeof( path ), "transcript/%s", d_tran );
 	break;
 
     case K_SPECIAL:
@@@@ -334,7 +334,7 @@@@ f_retr( sn, ac, av )
 	    return( 1 );
 	} 
 
-	sprintf( path, "%s/%s", special_dir, d_path );
+	(void)snprintf( path, sizeof( path ), "%s/%s", special_dir, d_path );
 	break;
 
     case K_FILE:
@@@@ -366,7 +366,7 @@@@ f_retr( sn, ac, av )
 	    return( 1 );
 	}
 
-	sprintf( path, "file/%s/%s", d_tran, d_path );
+	(void)snprintf( path, sizeof( path ), "file/%s/%s", d_tran, d_path );
 	free( d_path );
 	break;
 
@@@@ -478,7 +478,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
 
     switch ( key = keyword( ac, av )) {
     case K_COMMAND:
-        sprintf( path, "%s", command_file );
+        (void)snprintf( path, sizeof( path ), "%s", command_file );
 	break;
 
     case K_TRANSCRIPT:
@@@@ -500,7 +500,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
 	    return( 1 );
 	}
 
-	sprintf( path, "transcript/%s", d_tran );
+	(void)snprintf( path, sizeof( path ), "transcript/%s", d_tran );
 	break;
 
     case K_SPECIAL:
@@@@ -510,7 +510,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
 	    return( 1 );
 	} 
 
-	sprintf( path, "%s/%s", special_dir, d_path);
+	(void)snprintf( path, sizeof( path ), "%s/%s", special_dir, d_path);
 	break;
 
     default:
@@@@ -578,7 +578,7 @@@@ f_stat( SNET *sn, int ac, char *av[] )
d13 4
a16 12
@@@@ -647,13 +647,13 @@@@ f_stor( SNET *sn, int ac, char *av[] )
     switch ( keyword( ac, av )) {
 
     case K_TRANSCRIPT:
-        sprintf( xscriptdir, "tmp/file/%s", d_tran );
-        sprintf( upload, "tmp/transcript/%s", d_tran );
+        (void)snprintf( xscriptdir, sizeof( xscriptdir ), "tmp/file/%s", d_tran );
+        (void)snprintf( upload, sizeof( upload ), "tmp/transcript/%s", d_tran );
 
 	/* keep encoded transcript name, since it will just be
 	 * used later to compare in a stor file.
 	 */
d22 1
a22 13
@@@@ -688,9 +688,9 @@@@ f_stor( SNET *sn, int ac, char *av[] )
 	}
 
 	if ( d_path[ 0 ] == '/' ) {
-	    sprintf( upload, "tmp/file/%s%s", d_tran, d_path );
+	    (void)snprintf( upload, sizeof( upload ), "tmp/file/%s%s", d_tran, d_path );
 	} else {
-	    sprintf( upload, "tmp/file/%s/%s", d_tran, d_path );
+	    (void)snprintf( upload, sizeof( upload ), "tmp/file/%s/%s", d_tran, d_path );
 	}
 	free( d_path );
 	free( d_tran );
@@@@ -1044,7 +1044,7 @@@@ command_k( char *path_config )
d31 8
a38 8
@@@@ -1057,7 +1057,7 @@@@ command_k( char *path_config )
 	}
 
 	if (( remote_cn != NULL ) && wildcard( av[ 0 ], remote_cn )) {
-	    sprintf( command_file, "command/%s", av[ 1 ] );
+	    (void)snprintf( command_file, sizeof( command_file ), "command/%s", av[ 1 ] );
 	    if ( snprintf( special_dir, MAXPATHLEN, "%s/%s", special_dir,
 		    remote_cn ) > MAXPATHLEN - 1 ) {
d40 5
a44 1
@@@@ -1067,7 +1067,7 @@@@ command_k( char *path_config )
d47 9
a55 5
 	if ( wildcard( av[ 0 ], remote_host )) {
-	    sprintf( command_file, "command/%s", av[ 1 ] );
+	    (void)snprintf( command_file, sizeof( command_file ), "command/%s", av[ 1 ] );
 	    if ( snprintf( special_dir, MAXPATHLEN, "%s/%s", special_dir,
 		    remote_host ) > MAXPATHLEN - 1 ) {
d57 5
a61 1
@@@@ -1077,7 +1077,7 @@@@ command_k( char *path_config )
d64 9
a72 5
 	if ( wildcard( av[ 0 ], remote_addr )) {
-	    sprintf( command_file, "command/%s", av[ 1 ] );
+	    (void)snprintf( command_file, sizeof( command_file ), "command/%s", av[ 1 ] );
 	    if ( snprintf( special_dir, MAXPATHLEN, "%s/%s", special_dir,
 		    remote_addr ) > MAXPATHLEN - 1 ) {
d74 8
@


1.1.1.1
log
@Initial import of radmind 1.3.0

A suite of Unix command-line tools and a server designed to remotely 
administer the file systems of multiple Unix machines.

At its core, radmind operates as a tripwire. It is able to detect 
changes to any managed filesystem object, e.g. files, directories, 
links, etc. However, radmind goes further than just integrity 
checking: once a change is detected, radmind can optionally reverse 
the change.

WWW: http://rsug.itd.umich.edu/software/radmind/

from William Yodlowsky <bsd at openbsd.rutgers.edu>
@
text
@@
