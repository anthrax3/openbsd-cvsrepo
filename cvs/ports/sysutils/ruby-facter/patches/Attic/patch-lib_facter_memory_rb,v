head	1.10;
access;
symbols
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2014.06.25.22.00.24;	author jasper;	state dead;
branches;
next	1.9;
commitid	Q9F5fWaMIbw02nqS;

1.9
date	2014.06.19.13.56.10;	author jasper;	state Exp;
branches;
next	1.8;
commitid	vTs7L3drb696Phcd;

1.8
date	2014.04.04.14.31.16;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.27.19.04.23;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.26.12.15.55;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.17.19.52.14;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.17.19.14.52;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.05.19.29.49;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.06.14.39.01;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.11.20.37.29;	author robert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@- update to facter-2.1.0
* nearly all local patches have been merged into a release now
* http://docs.puppetlabs.com/facter/2.1/release_notes.html
@
text
@$OpenBSD: patch-lib_facter_memory_rb,v 1.9 2014/06/19 13:56:10 jasper Exp $
--- lib/facter/memory.rb.orig	Tue Apr  1 19:23:03 2014
+++ lib/facter/memory.rb	Fri Apr  4 15:34:23 2014
@@@@ -82,6 +82,16 @@@@ end
   end
 end
 
+if Facter.value(:kernel) == "OpenBSD"
+  Facter.add("SwapEncrypted") do
+    confine :kernel => :openbsd
+    setcode do
+      encrypted = !Facter::Util::Resolution.exec("/sbin/sysctl -n vm.swapencrypt.enable").to_i.zero?
+      encrypted
+    end
+  end
+end
+
 if Facter.value(:kernel) == "Darwin"
   Facter.add("SwapEncrypted") do
     confine :kernel => :Darwin
@


1.9
log
@remove local re-implementation of swap{free,size} and unbreak the
implementation from Facter::Memory.
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_facter_memory_rb,v 1.8 2014/04/04 14:31:16 jasper Exp $
@


1.8
log
@update to facter-2.0.1 (finally!),  please refer to the release notes for detailed
information about the changes:
http://docs.puppetlabs.com/facter/2.0/release_notes.html#facter-201
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_facter_memory_rb,v 1.7 2013/06/27 19:04:23 jasper Exp $
a20 33
@@@@ -157,6 +167,32 @@@@ Facter.add("swapfree_mb") do
     swap_anon_use = Facter::Core::Execution.exec("/sbin/sysctl -n vm.swap_anon_use").to_f * page_size
     swap_cache_use = Facter::Core::Execution.exec("/sbin/sysctl -n vm.swap_cache_use").to_f * page_size
     swapfree = swaptotal - swap_anon_use - swap_cache_use
+    "%.2f" % [(swapfree.to_f / 1024.0) / 1024.0]
+  end
+end
+
+Facter.add("swapsize_mb") do
+  confine :kernel => :openbsd
+  setcode do
+    swap = Facter::Util::Resolution.exec('swapctl -s') || ""
+    swapfree, swaptotal, sbsize = 0, 0, 0
+    if swap =~ /^total: (\d+) (\d+)-blocks allocated, (\d+) used, (\d+) available$/
+      sbsize = $2.to_i
+      swaptotal = ($1.to_i * sbsize)
+    end
+    "%.2f" % [(swaptotal.to_f / 1024.0) / 1024.0]
+  end
+end
+
+Facter.add("swapfree_mb") do
+  confine :kernel => :openbsd
+  setcode do
+    swap = Facter::Util::Resolution.exec('swapctl -s') || ""
+    swapfree, swaptotal, sbsize = 0, 0, 0
+    if swap =~ /^total: (\d+) (\d+)-blocks allocated, (\d+) used, (\d+) available$/
+      sbsize = $2.to_i
+      swapfree  = ($4.to_i * sbsize)
+    end
     "%.2f" % [(swapfree.to_f / 1024.0) / 1024.0]
   end
 end
@


1.7
log
@unbreak the 'swapencrypted' fact

ok robert@@
@
text
@d1 3
a3 3
$OpenBSD: patch-lib_facter_memory_rb,v 1.6 2013/04/26 12:15:55 robert Exp $
--- lib/facter/memory.rb.orig	Mon May 13 21:30:15 2013
+++ lib/facter/memory.rb	Thu Jun 27 20:53:44 2013
d22 2
a23 2
     swap_anon_use = Facter::Util::Resolution.exec("/sbin/sysctl -n vm.swap_anon_use").to_f * page_size
     swap_cache_use = Facter::Util::Resolution.exec("/sbin/sysctl -n vm.swap_cache_use").to_f * page_size
@


1.6
log
@update to 1.7.0
@
text
@d1 3
a3 3
$OpenBSD$
--- lib/facter/memory.rb.orig	Fri Apr 26 14:04:46 2013
+++ lib/facter/memory.rb	Fri Apr 26 14:15:38 2013
d12 1
a12 1
+      encrypted = !Facter::Util::Resolution.exec("/sbin/sysctl -n hw.pagesize").to_i.zero?
@


1.5
log
@fix swap usage facter values
@
text
@d1 5
a5 4
$OpenBSD: patch-lib_facter_memory_rb,v 1.4 2013/01/17 19:14:52 robert Exp $
--- lib/facter/memory.rb.orig	Thu Dec 27 19:05:12 2012
+++ lib/facter/memory.rb	Thu Jan 17 20:50:10 2013
@@@@ -58,6 +58,14 @@@@ Facter.add("SwapFree") do
d8 23
a30 2
 Facter.add("SwapEncrypted") do
+  confine :kernel => :OpenBSD
d32 7
a38 2
+    encrypted = !Facter::Util::Resolution.exec("/sbin/sysctl -n hw.pagesize").to_i.zero?
+    encrypted
d42 11
a52 5
+Facter.add("SwapEncrypted") do
   confine :kernel => :Darwin
   setcode do
     swap = Facter::Util::Resolution.exec('sysctl vm.swapusage')
@@@@ -93,24 +101,25 @@@@ if Facter.value(:kernel) == "AIX" and Facter.value(:id
a53 31
 
 if Facter.value(:kernel) == "OpenBSD"
-  swap = Facter::Util::Resolution.exec('swapctl -s')
-  swapfree, swaptotal = 0, 0
-  if swap =~ /^total: (\d+)k bytes allocated = \d+k used, (\d+)k available$/
-    swaptotal = $1.to_i
-    swapfree  = $2.to_i
+  swap = Facter::Util::Resolution.exec('swapctl -s') || ""
+  swapfree, swaptotal, sbsize = 0, 0, 0
+  if swap =~ /^total: (\d+) (\d+)-blocks allocated, (\d+) used, (\d+) available$/
+    sbsize = $2.to_i
+    swaptotal = ($1.to_i * sbsize)
+    swapfree  = ($4.to_i * sbsize)
   end
 
   Facter.add("SwapSize") do
     confine :kernel => :openbsd
     setcode do
-      Facter::Memory.scale_number(swaptotal.to_f,"kB")
+      Facter::Memory.scale_number(swaptotal.to_f,"")
     end
   end
 
   Facter.add("SwapFree") do
     confine :kernel => :openbsd
     setcode do
-      Facter::Memory.scale_number(swapfree.to_f,"kB")
+      Facter::Memory.scale_number(swapfree.to_f,"")
     end
   end
 
@


1.4
log
@add support for the swapencrypted facter value
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_facter_memory_rb,v 1.3 2012/05/05 19:29:49 robert Exp $
d3 1
a3 1
+++ lib/facter/memory.rb	Thu Jan 17 20:06:09 2013
d19 1
a19 1
@@@@ -93,7 +101,7 @@@@ if Facter.value(:kernel) == "AIX" and Facter.value(:id
d24 4
d29 23
a51 3
   swapfree, swaptotal = 0, 0
   if swap =~ /^total: (\d+)k bytes allocated = \d+k used, (\d+)k available$/
     swaptotal = $1.to_i
@


1.3
log
@update to 1.6.8
@
text
@d1 19
a19 4
$OpenBSD$
--- lib/facter/memory.rb.orig	Sat May  5 21:25:21 2012
+++ lib/facter/memory.rb	Sat May  5 21:25:35 2012
@@@@ -93,7 +93,7 @@@@ if Facter.value(:kernel) == "AIX" and Facter.value(:id
@


1.2
log
@*** empty log message ***
@
text
@d1 3
a3 3
$OpenBSD: patch-lib_facter_memory_rb,v 1.1 2010/11/11 20:37:29 robert Exp $
--- lib/facter/memory.rb.orig	Thu Jun 16 20:24:42 2011
+++ lib/facter/memory.rb	Tue Dec  6 15:34:17 2011
d8 5
a12 5
-    swap = Facter::Util::Resolution.exec('swapctl -l | sed 1d')
+    swap = Facter::Util::Resolution.exec('swapctl -l | sed 1d') || ""
     swapfree, swaptotal = 0, 0
     swap.each do |dev|
         if dev =~ /^\S+\s+(\S+)\s+\S+\s+(\S+)\s+.*$/
@


1.1
log
@Make sure that we are not referencing a nil variable when there is
no swap device specified on the machine.
@
text
@d1 4
a4 4
$OpenBSD$
--- lib/facter/memory.rb.orig	Thu Nov 11 21:35:38 2010
+++ lib/facter/memory.rb	Thu Nov 11 21:35:50 2010
@@@@ -46,7 +46,7 @@@@ if Facter.value(:kernel) == "AIX" and Facter.value(:id
@

