head	1.7;
access;
symbols
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2014.06.25.22.00.24;	author jasper;	state dead;
branches;
next	1.6;
commitid	Q9F5fWaMIbw02nqS;

1.6
date	2014.04.04.14.31.16;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2014.03.09.19.51.16;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.28.08.36.12;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.13.08.37.20;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.05.19.29.49;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.06.14.39.33;	author robert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@- update to facter-2.1.0
* nearly all local patches have been merged into a release now
* http://docs.puppetlabs.com/facter/2.1/release_notes.html
@
text
@$OpenBSD: patch-lib_facter_physicalprocessorcount_rb,v 1.6 2014/04/04 14:31:16 jasper Exp $

From 766c84a84a4a7008858c45eaf221402a81e1bfa2 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Thu, 27 Jun 2013 22:59:20 +0200
Subject: [PATCH] Add physicalprocessorcount fact for OpenBSD

--- lib/facter/physicalprocessorcount.rb.orig	Tue Apr  1 19:23:03 2014
+++ lib/facter/physicalprocessorcount.rb	Fri Apr  4 15:34:23 2014
@@@@ -80,3 +80,10 @@@@ Facter.add('physicalprocessorcount') do
     end
   end
 end
+
+Facter.add('physicalprocessorcount') do
+  confine :kernel => :openbsd
+    setcode do
+      Facter::Util::Resolution.exec("sysctl -n hw.ncpufound")
+    end
+end
@


1.6
log
@update to facter-2.0.1 (finally!),  please refer to the release notes for detailed
information about the changes:
http://docs.puppetlabs.com/facter/2.0/release_notes.html#facter-201
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_facter_physicalprocessorcount_rb,v 1.5 2014/03/09 19:51:16 jasper Exp $
@


1.5
log
@sync comments for patches submitted/merged upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_facter_physicalprocessorcount_rb,v 1.4 2013/06/28 08:36:12 jasper Exp $
d8 3
a10 3
--- lib/facter/physicalprocessorcount.rb.orig	Thu Jun 27 23:05:51 2013
+++ lib/facter/physicalprocessorcount.rb	Thu Jun 27 23:05:53 2013
@@@@ -82,3 +82,10 @@@@ Facter.add('physicalprocessorcount') do
@


1.4
log
@Redo the physicalprocessorcount fact in a less invasive way and add a test

ok robert@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_facter_physicalprocessorcount_rb,v 1.3 2013/06/13 08:37:20 jasper Exp $
d3 4
a6 2
OpenBSD: add physicalprocessorcount fact
http://projects.puppetlabs.com/issues/21499
@


1.3
log
@Make the facter addition for physicalprocessorcount more generic, just like
how is done for other operating systems.

ok robert@@ (MAINTAINER)
@
text
@d1 8
a8 89
$OpenBSD: patch-lib_facter_physicalprocessorcount_rb,v 1.2 2012/05/05 19:29:49 robert Exp $
--- lib/facter/physicalprocessorcount.rb.orig	Mon Apr 15 20:13:14 2013
+++ lib/facter/physicalprocessorcount.rb	Thu Jun 13 10:22:44 2013
@@@@ -9,50 +9,60 @@@@
 #
 # Caveats:
 #
-Facter.add('physicalprocessorcount') do
-  confine :kernel => :linux
 
-  setcode do
-    sysfs_cpu_directory = '/sys/devices/system/cpu' # This should always be there ...
+if ["Linux", "GNU/kFreeBSD"].include? Facter.value(:kernel)
+  Facter.add('physicalprocessorcount') do
+    confine :kernel => :linux
 
-    if File.exists?(sysfs_cpu_directory)
-      #
-      # We assume that the sysfs file system has the correct number of entries
-      # under the "/sys/device/system/cpu" directory and if so then we process
-      # content of the file "physical_package_id" located inside the "topology"
-      # directory in each of the per-CPU sub-directories.
-      #
-      # As per Linux Kernel documentation and the file "cputopology.txt" located
-      # inside the "/usr/src/linux/Documentation" directory we can find following
-      # short explanation:
-      #
-      # (...)
-      #
-      # 1) /sys/devices/system/cpu/cpuX/topology/physical_package_id:
-      #
-      #         physical package id of cpuX. Typically corresponds to a physical
-      #         socket number, but the actual value is architecture and platform
-      #         dependent.
-      #
-      # (...)
-      #
-      lookup_pattern = "#{sysfs_cpu_directory}" +
-        "/cpu*/topology/physical_package_id"
+    setcode do
+      sysfs_cpu_directory = '/sys/devices/system/cpu' # This should always be there ...
 
-      Dir.glob(lookup_pattern).collect { |f| Facter::Util::Resolution.exec("cat #{f}")}.uniq.size
+      if File.exists?(sysfs_cpu_directory)
+        #
+        # We assume that the sysfs file system has the correct number of entries
+        # under the "/sys/device/system/cpu" directory and if so then we process
+        # content of the file "physical_package_id" located inside the "topology"
+        # directory in each of the per-CPU sub-directories.
+        #
+        # As per Linux Kernel documentation and the file "cputopology.txt" located
+        # inside the "/usr/src/linux/Documentation" directory we can find following
+        # short explanation:
+        #
+        # (...)
+        #
+        # 1) /sys/devices/system/cpu/cpuX/topology/physical_package_id:
+        #
+        #         physical package id of cpuX. Typically corresponds to a physical
+        #         socket number, but the actual value is architecture and platform
+        #         dependent.
+        #
+        # (...)
+        #
+        lookup_pattern = "#{sysfs_cpu_directory}" +
+          "/cpu*/topology/physical_package_id"
 
-    else
-      #
-      # Try to count number of CPUs using the proc file system next ...
-      #
-      # We assume that /proc/cpuinfo has what we need and is so then we need
-      # to make sure that we only count unique entries ...
-      #
-      str = Facter::Util::Resolution.exec("grep 'physical.\\+:' /proc/cpuinfo")
+        Dir.glob(lookup_pattern).collect { |f| Facter::Util::Resolution.exec("cat #{f}")}.uniq.size
 
-      if str then str.scan(/\d+/).uniq.size; end
+      else
+        #
+        # Try to count number of CPUs using the proc file system next ...
+        #
+        # We assume that /proc/cpuinfo has what we need and is so then we need
+        # to make sure that we only count unique entries ...
+        #
+        str = Facter::Util::Resolution.exec("grep 'physical.\\+:' /proc/cpuinfo")
+
+        if str then str.scan(/\d+/).uniq.size; end
+      end
d11 1
a11 1
+end
d18 1
a18 3
 end
 
 Facter.add('physicalprocessorcount') do
@


1.2
log
@update to 1.6.8
@
text
@d1 4
a4 4
$OpenBSD: patch-lib_facter_physicalprocessorcount_rb,v 1.1 2011/12/06 14:39:33 robert Exp $
--- lib/facter/physicalprocessorcount.rb.orig	Wed Apr 11 18:37:43 2012
+++ lib/facter/physicalprocessorcount.rb	Sat May  5 21:24:32 2012
@@@@ -9,50 +9,62 @@@@
d94 4
a97 6
+if Facter.value(:kernel) == "OpenBSD"
+    Facter.add('physicalprocessorcount') do
+        confine :kernel => :openbsd
+        setcode do
+            Facter::Util::Resolution.exec("sysctl -n hw.ncpufound")
+        end
@


1.1
log
@Add support for the physicalprocessorcount facter value which is hw.ncpufound
@
text
@d1 4
a4 4
$OpenBSD$
--- lib/facter/physicalprocessorcount.rb.orig	Tue Dec  6 15:34:30 2011
+++ lib/facter/physicalprocessorcount.rb	Tue Dec  6 15:34:35 2011
@@@@ -9,48 +9,60 @@@@
d102 2
@

