head	1.9;
access;
symbols
	OPENBSD_5_9:1.8.0.34
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.36
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.32
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.30
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.28
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.26
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.24
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.22
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.20
	OPENBSD_5_0:1.8.0.18
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.16
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.14
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.12
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.8
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.6
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.4
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4;
locks; strict;
comment	@.\" @;


1.9
date	2016.03.11.19.43.45;	author sthen;	state dead;
branches;
next	1.8;
commitid	SrPTus4LVYapF9BI;

1.8
date	2007.05.18.14.48.16;	author marco;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.16.17.46.31;	author marco;	state Exp;
branches;
next	1.6;

1.6
date	2007.02.06.19.25.05;	author marco;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.25.16.26.52;	author marco;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.08.16.50.03;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.07.16.16.56;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.07.16.09.39;	author marco;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.20.54.59;	author marco;	state Exp;
branches;
next	;


desc
@@


1.9
log
@move to github, opensource.conformal.com is going away. from dhill.
also, use source files on github rather than as files in the ports tree.
@
text
@.\" $OpenBSD: iogen.8,v 1.8 2007/05/18 14:48:16 marco Exp $
.\"
.\" Copyright (c) 2005 Marco Peereboom <marco@@peereboom.us>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd December 6, 2005
.Dt IOGEN 8
.Os
.Sh NAME
.Nm iogen
.Nd I/O generator
.Sh SYNOPSIS
.Nm iogen
.Bk -words
.Op Fl kr
.Op Fl b Ar max-io-size
.Op Fl d Ar target-directory
.Op Fl f Ar result-directory
.Op Fl n Ar nr-forks
.Op Fl p Ar read-percentage
.Op Fl s Ar max-file-size
.Op Fl t Ar update-time
.Ek
.Sh DESCRIPTION
.Nm
is a lightweight tool that generates heavily fragmented I/O.
It accomplishes this by forking a number of children that run I/O to a
filesystem.
.Pp
This tool is intended to test storage stacks under stress and worst case
scenarios.
However due to heavy fragmentation of the I/O files,
it tends to bypass caching algorithms in storage stacks.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl b Ar max-io-size
This is the fixed I/O size unless the -r flag is set.
The default is 64KB.
.It Fl d Ar target-directory
This is the directory where the I/O file will be written to.
The default is the current working directory.
.It Fl f Ar result-directory
This is the directory where the result file will be written to.
The result file is updated every
.Ar update-time
seconds with statistics.
The default is the current working directory.
.It Fl k
Kill all running
.Nm
processes.
.It Fl n Ar nr-forks
This will determine how many identical processes will be forked to run I/O.
The default is 1.
.It Fl p Ar read-percentage
This determins the read vs write distribution.
The range is from 10% to 90%.
The default is 50.
.It Fl P Ar pattern
Pattern is a whole number that designates the IO pattern.  The default is a
text pattern that is human readable.  Use ? to print out the available
patterns.
.It Fl r
Randomize I/O size between 1 and
.Ar max-io-size .
Enabling this flag will disable data verification.
The default is disabled.
.It Fl s Ar max-file-size
The file where the I/O is run to and from will grow sequentially until it is
bigger or equal to this value.
At that point all write I/O will also become random.
The default is 1GB.
.It Fl t Ar update-time
This determines the minimal amount of time between updates.
Under heavy I/O this value can be skewed due to
the asynchronous nature of
.Xr alarm 3 .
The default is 60 seconds.
.It Fl T Ar I/O timeout
This determines the maximum time an I/O run is allowed to take to complete.
If the timeout is reached all iogen processes will be terminated.
The default is disabled.
.El
.Pp
Although the algorithm for I/O generation is incredibly simple,
it has proven to be very effective at
bringing out issues in storage stacks.
It first grows the initial file a minimal amount to be able to start running
I/O in it.
After the initial growth,
it reads randomly within the current file size.
Every run is a distribution between reads and writes which is governed by
the read percentage value.
The file is grown sequentially until it reaches maximum file size.
Whenever this happens a message is logged to syslogd(8) and all writes become
random.
.Pp
To monitor progress one can
.Xr tail 1
the result file which is updated every
.Ar update-time
interval or send the process a
.Dv HUP
signal.
Whenever an I/O process receives a
.Dv HUP
signal, it prints statistical values to
.Xr stderr 4
at its earliest convenience.
.Pp
Whenever iogen runs into data corruption or a failed read or write it will
terminate all child processes.
.Sh EXAMPLES
Run iogen with all defaults in the current working directory:
.Pp
.Dl $ iogen
.Pp
Run
.Nm
with all defaults and a 1 second result file update:
.Pp
.Dl $ iogen -t 1
.Pp
Run
.Nm
with a 2GB max file, 128KB I/O size, and result file in
.Pa /tmp :
.Pp
.Bd -literal -offset indent
$ iogen -s 2g -b 128k -t 1 -f /tmp
.Ed
.Sh HISTORY
The first version of
.Nm
was written in 2005.
.Sh AUTHORS
.An Marco Peereboom Aq marco@@peereboom.us
.Sh CAVEATS
This tool is capable of running extremely heavy I/O.
It is known to have broken hardware before so please use caution and don't
complain if something bad happens.
@


1.8
log
@Add timeout parameter for io run.
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.7 2007/04/16 17:46:31 marco Exp $
@


1.7
log
@Modify iogen to terminate all children when either data corruption or
data loss occurs.  This trigers a major version bump.
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.6 2007/02/06 19:25:05 marco Exp $
d91 4
@


1.6
log
@Add bit patterns with -P option.
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.5 2006/03/25 16:26:52 marco Exp $
d118 3
@


1.5
log
@man page nit from Michael Knudsen <e at molioner dot dk>

ok jmc
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.4 2005/12/08 16:50:03 marco Exp $
d71 4
@


1.4
log
@Fix typo.  From jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.3 2005/12/07 16:16:56 marco Exp $
d130 3
a132 1
.Dl $ iogen -s 2g -b 128k -t 1 -f /tmp
@


1.3
log
@document -p, pointed out by jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.2 2005/12/07 16:09:39 marco Exp $
d67 1
a67 1
.It Fl p Ar read-precentage
@


1.2
log
@Enhancements from jmc@@
@
text
@d1 1
a1 1
.\" $OpenBSD: iogen.8,v 1.1 2005/12/06 20:54:59 marco Exp $
d67 4
@


1.1
log
@Add man file.
@
text
@d1 1
a1 1
.\" $OpenBSD$
d17 1
a17 1
.Dd Dec 6, 2005
d22 1
a22 1
.Nd i/o generator.
d25 2
a26 3
.Op Fl r
.Op Fl k
.Op Fl s Ar max-file-size
a27 1
.Op Fl p Ar read-percentage
d31 2
d34 1
d37 2
a38 2
is a lightweight tool that generates heavily fragmented i/o.
It accomplishes this by forking an N number of children that run io to a
d43 2
a44 2
However due to heavy fragmentation of the io files it tends to bypass caching
algorithms in storage stacks.
d47 1
a47 13
.Pp
.Bl -tag -width xlxltarget-directory
.It Fl r
Randomize io size between 1 and max-io-size.
Enabling this flag will disable data verification.
Default is disabled.
.It Fl k
Kill all running iogen processes.
.It Fl s Ar max-file-size
The file where the io is run to and from will grow sequentially until it is
bigger or equal to this value.
At that point all write io will also become random.
Default is 1GB.
d49 2
a50 2
This is the fixed io size unless the -r flag is set.
Default is 64KB.
d52 2
a53 2
This is the directory where the io file will be written to.
Default is current directory.
d56 8
a63 2
The result file is update every update-time seconds with statistics.
Default is current directory.
d65 12
a76 2
This will determine how many identical processes will be forked to run io.
Default is 1.
d79 4
a82 2
Under heavy io this value can be skewed due to asynchronous nature of alarm(3).
Default is 60 seconds.
d85 3
a87 14
Examples:
.Bd -literal -offset indent
Run iogen with all defaults in the current directory:
$ iogen
.Pp
Run iogen with all defaults with a 1 second result file update:
$ iogen -t 1
.Pp
Run iogen with a 2GB max file, 128KB io size and result in /tmp:
$ iogen -s 2g -b 128k -t 1 -f /tmp
.Ed
.Pp
The algorithm for io generation is incredibly simple however it has proven to
be very effective at bringing out issues in storage stacks.
d89 3
a91 2
io in it.
After the initial growth it reads randomly within the current file size.
d98 27
a124 4
To monitor progress one can tail(1) the result file which is updated every
update-time interval or send the process a HUP signal.
Whenever an io processes receives a HUP signal it prints statistical values
to stderr(4) at its earliest convenience.
d126 1
d132 1
a132 2
Marco Peereboom
.Aq marco@@peereboom.us
d134 1
a134 1
This tool is capable of running extremely heavy io.
@

