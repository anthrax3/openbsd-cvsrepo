head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2015.11.17.22.52.06;	author zhuk;	state dead;
branches;
next	1.2;
commitid	6AsR8ewHjthAxmq5;

1.2
date	2015.10.26.19.57.45;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	kNgXjXs4uhRPx0jm;

1.1
date	2015.10.26.19.44.06;	author zhuk;	state Exp;
branches;
next	;
commitid	7ce467zLKvGeRoQW;


desc
@@


1.3
log
@Upstream rolled up a new version of trayapp, coping with recent
disklabel changes. The eject.c patch isn't needed anymore.
@
text
@$OpenBSD: patch-eject_eject_c,v 1.2 2015/10/26 19:57:45 zhuk Exp $
Unbreak after d_un removal in sys/disklabel.h.
--- eject/eject.c.orig	Mon Mar 12 09:46:04 2012
+++ eject/eject.c	Mon Oct 26 20:56:19 2015
@@@@ -197,12 +197,12 @@@@ disklabel2names(struct disklabel *dl, char *name)
 	size_t i, k;
 
 	k = 0;
-	for (i = 0; i < sizeof(dl->d_un.un_d_packname); i++)
-		if (!isspace(dl->d_un.un_d_packname[i]))
+	for (i = 0; i < sizeof(dl->d_packname); i++)
+		if (!isspace(dl->d_packname[i]))
 			break;
-	if (i < sizeof(dl->d_un.un_d_packname)) {
-		k = sizeof(dl->d_un.un_d_packname) - i;
-		memcpy(name, dl->d_un.un_d_packname + i, k);
+	if (i < sizeof(dl->d_packname)) {
+		k = sizeof(dl->d_packname) - i;
+		memcpy(name, dl->d_packname + i, k);
 		for (i = k; i > 0; i--) {
 			if (!isspace(name[i - 1]) && name[i - 1] != '\0')
 				break;
@


1.2
log
@Actually, this set of utilities is intended to be run on OpenBSD, so checking
for OS is stupid. Just force the new structure layout and be done with it.
No binary change => no bump needed.
@
text
@d1 1
a1 1
$OpenBSD: patch-eject_eject_c,v 1.1 2015/10/26 19:44:06 zhuk Exp $
@


1.1
log
@Unbreak after recent d_un removal in disklabel.h.

Noticed by sthen@@.
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 16
--- eject/eject.c.orig	Mon Oct 26 20:38:40 2015
+++ eject/eject.c	Mon Oct 26 20:42:06 2015
@@@@ -186,6 +186,12 @@@@ inq2names(struct dk_inquiry *inq, char *name, size_t s
 	strlcat(name, inq->product, sz);
 }
 
+#ifdef __OpenBSD__
+# define dpackname d_packname
+#else
+# define dpackname d_un.un_d_packname
+#endif
+
 /*
  * disklabel's d_typename and d_un.un_d_packname each is 16 bytes long.
  * name is 192 bytes long. So, we don't need complex boundary checking.
@@@@ -197,12 +203,12 @@@@ disklabel2names(struct disklabel *dl, char *name)
d11 2
a12 2
+	for (i = 0; i < sizeof(dl->dpackname); i++)
+		if (!isspace(dl->dpackname[i]))
d17 3
a19 3
+	if (i < sizeof(dl->dpackname)) {
+		k = sizeof(dl->dpackname) - i;
+		memcpy(name, dl->dpackname + i, k);
a22 9
@@@@ -232,6 +238,8 @@@@ disklabel2names(struct disklabel *dl, char *name)
 	if (*name == '\0')
 		memcpy(name, "NONAME", 7);
 }
+
+#undef dpackname
 
 static void
 notify_ejected(const char *label, const char *devname)
@

