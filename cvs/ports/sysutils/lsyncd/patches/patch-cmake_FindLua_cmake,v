head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.6
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	landry_20160123:1.1.1.1
	landry:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.01.23.19.15.13;	author landry;	state Exp;
branches
	1.1.1.1;
next	;
commitid	pH7AP6dS2qhyaeQc;

1.1.1.1
date	2016.01.23.19.15.13;	author landry;	state Exp;
branches;
next	;
commitid	pH7AP6dS2qhyaeQc;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Also detect the lua compiler: on openbsd, its not luac
nor lua5Xc but luac5X

--- cmake/FindLua.cmake.orig	Sat Jan 23 17:24:05 2016
+++ cmake/FindLua.cmake	Sat Jan 23 17:28:06 2016
@@@@ -34,6 +34,7 @@@@
 # Always search for non-versioned lua first (recommended)
 SET(_POSSIBLE_LUA_INCLUDE include include/lua)
 SET(_POSSIBLE_LUA_EXECUTABLE lua)
+SET(_POSSIBLE_LUA_COMPILER luac)
 SET(_POSSIBLE_LUA_LIBRARY lua)
 
 # Determine possible naming suffixes (there is no standard for this)
@@@@ -47,6 +48,7 @@@@ ENDIF(Lua_FIND_VERSION_MAJOR AND Lua_FIND_VERSION_MINO
 FOREACH(_SUFFIX ${_POSSIBLE_SUFFIXES})
   LIST(APPEND _POSSIBLE_LUA_INCLUDE "include/lua${_SUFFIX}")
   LIST(APPEND _POSSIBLE_LUA_EXECUTABLE "lua${_SUFFIX}")
+  LIST(APPEND _POSSIBLE_LUA_COMPILER "luac${_SUFFIX}")
   LIST(APPEND _POSSIBLE_LUA_LIBRARY "lua${_SUFFIX}")
 ENDFOREACH(_SUFFIX)
 
@@@@ -55,6 +57,11 @@@@ FIND_PROGRAM(LUA_EXECUTABLE
   NAMES ${_POSSIBLE_LUA_EXECUTABLE}
 )
 
+# Find the lua compiler
+FIND_PROGRAM(LUA_COMPILER
+  NAMES ${_POSSIBLE_LUA_COMPILER}
+)
+
 # Find the lua header
 FIND_PATH(LUA_INCLUDE_DIR lua.h
   HINTS
@@@@ -114,5 +121,5 @@@@ FIND_PACKAGE_HANDLE_STANDARD_ARGS(Lua
                                   REQUIRED_VARS LUA_LIBRARIES LUA_INCLUDE_DIR
                                   VERSION_VAR LUA_VERSION_STRING)
 
-MARK_AS_ADVANCED(LUA_INCLUDE_DIR LUA_LIBRARIES LUA_LIBRARY LUA_MATH_LIBRARY LUA_EXECUTABLE)
+MARK_AS_ADVANCED(LUA_INCLUDE_DIR LUA_LIBRARIES LUA_LIBRARY LUA_MATH_LIBRARY LUA_EXECUTABLE LUA_COMPILER)
 
@


1.1.1.1
log
@Import lsyncd 2.1.6.

Lsyncd watches a local directory tree using libinotify.  It aggregates
and combines events for a few seconds and then spawns one (or more)
process(es) to synchronize the changes. By default this is rsync. Lsyncd
is thus a light-weight live mirror solution that is comparatively easy
to install not requiring new filesystems or blockdevices and does not
hamper local filesystem performance.

ok ajacoutot@@
@
text
@@
