head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.18
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	steven-20100729:1.1.1.1
	steven:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.03.15.23.25.51;	author sthen;	state dead;
branches;
next	1.2;
commitid	hdjdqDkkTvrSnQLq;

1.2
date	2011.09.05.18.24.08;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.29.21.40.21;	author steven;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.07.29.21.40.21;	author steven;	state Exp;
branches
	1.1.1.1.6.1;
next	;

1.1.1.1.6.1
date	2011.09.05.18.24.15;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to rsyslog-8.16.0, add sample config from chris@@

not heavily tested, but positive feedback from chris with pgsql logging,
and the version we had was ancient.
@
text
@$OpenBSD: patch-tools_syslogd_c,v 1.2 2011/09/05 18:24:08 jasper Exp $

Last chunk:
Security fix for CVE-2011-3200,
rsyslog: parseLegacySyslogMsg off-by-two buffer overflow

Patch from upstream via redhat: https://bugzilla.redhat.com/show_bug.cgi?id=727644

--- tools/syslogd.c.orig	Thu Aug  5 11:33:54 2010
+++ tools/syslogd.c	Mon Sep  5 20:22:07 2011
@@@@ -173,9 +173,8 @@@@ static rsRetVal GlobalClassExit(void);
 #endif
 #endif
 
-#ifndef _PATH_LOGCONF 
-#define _PATH_LOGCONF	"/etc/rsyslog.conf"
-#endif
+#undef _PATH_LOGCONF
+#define _PATH_LOGCONF CONFIGFILE
 
 #ifndef _PATH_MODDIR
 #       if defined(__FreeBSD__)
@@@@ -1291,7 +1290,7 @@@@ int parseLegacySyslogMsg(msg_t *pMsg, int flags)
 		 * outputs so that only 32 characters max are used by default.
 		 */
 		i = 0;
-		while(lenMsg > 0 && *p2parse != ':' && *p2parse != ' ' && i < CONF_TAG_MAXSIZE) {
+		while(lenMsg > 0 && *p2parse != ':' && *p2parse != ' ' && i < CONF_TAG_MAXSIZE - 2) {
 			bufParseTAG[i++] = *p2parse++;
 			--lenMsg;
 		}
@


1.2
log
@Security fix for CVE-2011-3200,
rsyslog: parseLegacySyslogMsg off-by-two buffer overflow
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_syslogd_c,v 1.1.1.1 2010/07/29 21:40:21 steven Exp $
@


1.1
log
@Initial revision
@
text
@d1 10
a10 3
$OpenBSD$
--- tools/syslogd.c.orig	Wed Jul  7 11:43:39 2010
+++ tools/syslogd.c	Sun Jul 25 21:39:57 2010
d23 9
@


1.1.1.1
log
@import rsyslog-4.6.3

Rsyslog is an enhanced multi-threaded syslogd with a focus on
security and reliability. Among others, it offers support for
on-demand disk buffering, reliable syslog over TCP, SSL, TLS and
RELP, writing to databases (MySQL, PostgreSQL, Oracle, and many
more), email alerting, fully configurable output formats (including
high-precision timestamps), the ability to filter on any part of
the syslog message, on-the-wire message compression, and the ability
to convert text files to syslog. It is a drop-in replacement for
stock syslogd and able to work with the same configuration file
syntax. Its advanced features make it suitable for enterprise-class,
encryption protected syslog relay chains while at the same time
being very easy to setup for the novice user.

initial port from todd@@, improved by sthen@@ and me
@
text
@@


1.1.1.1.6.1
log
@Security fix for CVE-2011-3200,
rsyslog: parseLegacySyslogMsg off-by-two buffer overflow
@
text
@d1 3
a3 10
$OpenBSD: patch-tools_syslogd_c,v 1.1.1.1 2010/07/29 21:40:21 steven Exp $

Last chunk:
Security fix for CVE-2011-3200,
rsyslog: parseLegacySyslogMsg off-by-two buffer overflow

Patch from upstream via redhat: https://bugzilla.redhat.com/show_bug.cgi?id=727644

--- tools/syslogd.c.orig	Thu Aug  5 11:33:54 2010
+++ tools/syslogd.c	Mon Sep  5 20:22:07 2011
a15 9
@@@@ -1291,7 +1290,7 @@@@ int parseLegacySyslogMsg(msg_t *pMsg, int flags)
 		 * outputs so that only 32 characters max are used by default.
 		 */
 		i = 0;
-		while(lenMsg > 0 && *p2parse != ':' && *p2parse != ' ' && i < CONF_TAG_MAXSIZE) {
+		while(lenMsg > 0 && *p2parse != ':' && *p2parse != ' ' && i < CONF_TAG_MAXSIZE - 2) {
 			bufParseTAG[i++] = *p2parse++;
 			--lenMsg;
 		}
@

