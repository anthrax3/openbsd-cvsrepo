head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.30
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.28
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.26
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.22
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.20
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.18
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	ajacoutot_20091204:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.07.13.14.10.35;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.30.20.48.30;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.29.04.27.11;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.04.08.07.20;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.04.08.07.20;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix memleaks by including string.h where needed.
While here, switch to new REVISION/DEPENDS.
@
text
@$OpenBSD: patch-server_gam_channel_c,v 1.3 2010/06/30 20:48:30 ajacoutot Exp $

From FreeBSD:
Restore the stale socket cleanup code from gamin 0.1.5 to ensure that even
if gamin crashes or is killed with SIGKILL, a leftover socket does not
prevent gam_server from starting.

--- server/gam_channel.c.orig	Wed Jul  4 15:36:49 2007
+++ server/gam_channel.c	Tue Jul 13 15:53:14 2010
@@@@ -1,4 +1,5 @@@@
 #include "server_config.h"
+#include <string.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <errno.h>
@@@@ -153,7 +154,11 @@@@ gam_client_conn_check_cred(GIOChannel * source, int fd
 
     {
 #ifdef SO_PEERCRED
+#ifndef __OpenBSD__
         struct ucred cr;
+#else
+	struct sockpeercred cr;
+#endif
         socklen_t cr_len = sizeof(cr);
 
         if (getsockopt(fd, SOL_SOCKET, SO_PEERCRED, &cr, &cr_len) ==
@@@@ -620,6 +625,7 @@@@ gam_listen_unix_socket(const char *path)
 {
     int fd;
     struct sockaddr_un addr;
+    struct stat st;
 
     fd = socket(PF_UNIX, SOCK_STREAM, 0);
     if (fd < 0) {
@@@@ -640,8 +646,18 @@@@ gam_listen_unix_socket(const char *path)
      * some extra protection checks. Also make sure the socket is created
      * with restricted mode
      */
-    if (!gam_check_secure_path(path)) {
+    if (!gam_check_secure_dir()) {
+        close(fd);
 	return (-1);
+    }
+
+    if (stat(path, &st) == 0) {
+        /* bind() will fail if the socket already exists */
+        if (unlink(path) < 0) {
+            GAM_DEBUG(DEBUG_INFO, "Failed to remove %s\n", path);
+            close(fd);
+            return (-1);
+        }
     }
     strncpy(&addr.sun_path[0], path, (sizeof(addr) - 4) - 1);
     umask(0077);
@


1.3
log
@Make use of getsockopt(2) SO_PEERCRED so we can use c_pid.

Requires a very current current...
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_channel_c,v 1.2 2010/06/29 04:27:11 ajacoutot Exp $
d9 8
a16 2
+++ server/gam_channel.c	Wed Jun 30 22:34:54 2010
@@@@ -153,7 +153,11 @@@@ gam_client_conn_check_cred(GIOChannel * source, int fd
d28 1
a28 1
@@@@ -620,6 +624,7 @@@@ gam_listen_unix_socket(const char *path)
d36 1
a36 1
@@@@ -640,8 +645,18 @@@@ gam_listen_unix_socket(const char *path)
@


1.2
log
@We don't want getpid() here.
@
text
@d1 1
a1 3
$OpenBSD: patch-server_gam_channel_c,v 1.1.1.1 2009/12/04 08:07:20 ajacoutot Exp $

Adapt socket credentials code to OpenBSD.
d9 9
a17 8
+++ server/gam_channel.c	Sat Nov 28 15:45:05 2009
@@@@ -3,6 +3,10 @@@@
 #include <unistd.h>
 #include <errno.h>
 #include <glib.h>
+#if defined(__OpenBSD__)
+#include <string.h>
+#include <sys/types.h>
d19 4
a22 26
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <sys/un.h>
@@@@ -171,6 +175,21 @@@@ gam_client_conn_check_cred(GIOChannel * source, int fd
 	c_pid = cmsg.cred.cmcred_pid;
 	c_uid = cmsg.cred.cmcred_euid;
 	c_gid = cmsg.cred.cmcred_groups[0];
+#elif defined(__OpenBSD__)
+        uid_t euid;
+        gid_t egid;
+        if (getpeereid (fd, &euid, &egid) == 0)
+            {
+                c_pid = -1;
+                c_uid = euid;
+                c_gid = egid;
+            }
+        else
+            {
+                GAM_DEBUG(DEBUG_INFO,
+                    "Failed to getpeereid() credentials: %d\n", fd);
+                goto failed;
+            }
 #else /* !SO_PEERCRED && !HAVE_CMSGCRED */
         GAM_DEBUG(DEBUG_INFO,
                   "Socket credentials not supported on this OS\n");
@@@@ -620,6 +639,7 @@@@ gam_listen_unix_socket(const char *path)
d30 1
a30 1
@@@@ -640,8 +660,18 @@@@ gam_listen_unix_socket(const char *path)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d32 1
a32 1
+                c_pid = getpid();
@


1.1.1.1
log
@Import (lib,py-)gamin-0.1.10

Gamin is a file and directory monitoring system defined to be a subset
of the FAM (File Alteration Monitor) system.
The main goals of the project are:
  * minimize the security model of FAM
  * simplify the code base
  * provide an API and ABI compatible replacement for FAM
  * try to fix some other issues like resource consumption

works for bernd@@
ok landry@@ jasper@@
@
text
@@
