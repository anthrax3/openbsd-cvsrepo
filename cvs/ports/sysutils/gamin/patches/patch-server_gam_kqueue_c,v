head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.16
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.12
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.14
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.10
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	ajacoutot_20091204:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2012.12.18.21.38.12;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.06.11.48.04;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2009.12.28.17.23.23;	author phessler;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.06.17.48.37;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2009.12.06.13.38.54;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.05.22.55.36;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.05.17.03.40;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.04.08.07.20;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.04.08.07.20;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.8
log
@cope with sysctl.h changes
@
text
@$OpenBSD: patch-server_gam_kqueue_c,v 1.7 2011/09/06 11:48:04 ajacoutot Exp $

From FreeBSD:
Make sure that excluded paths do not get opened (but rather they will be
polled).

OpenBSD doesn't have sysctlbyname, use sysctl(3) instead.

Enable the polling backend along with kqueue, making NFS work again.

Fix "enumeration value... not handled in switch" warnings.

OpenBSD does not have maxfilesperproc, which means max_open_files will
default to "0" and kqueue will never be used. Instead, use get+setrlimit
to get a correct value.

--- server/gam_kqueue.c.orig	Wed Jul  4 07:50:41 2007
+++ server/gam_kqueue.c	Thu Dec  6 16:04:59 2012
@@@@ -31,7 +31,8 @@@@
  *           - kqueue needs to be moved out the UFS code.
  *
  * Copyright (C) 2005 Joe Marcus Clarke <marcus@@FreeBSD.org>
- * Copyright (C) 2005 Jean-Yves Lefort <jylefort@@FreeBSD.org>
+ * Copyright (C) 2005, 2006 Jean-Yves Lefort <jylefort@@FreeBSD.org>
+ * Copyright (C) 2006 Alex Dupre <ale@@FreeBSD.org>
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@@@ -53,15 +54,19 @@@@
 #include <fcntl.h>
 #include <unistd.h>
 #include <sys/param.h>
+#include <sys/proc.h>
 #include <sys/types.h>
 #include <sys/sysctl.h>
 #include <sys/stat.h>
 #include <sys/event.h>
 #include <sys/time.h>
+#include <sys/mount.h>
+#include <err.h>
 #include <errno.h>
 #include "gam_error.h"
 #include "gam_kqueue.h"
 #include "gam_event.h"
+#include "gam_excludes.h"
 #include "gam_server.h"
 #include "gam_poll_basic.h"
 
@@@@ -323,20 +328,6 @@@@ gam_kqueue_isdir (const char *pathname, MonitorFlags f
     }
 }
 
-static gboolean
-gam_kqueue_get_uint_sysctl (const char *name, unsigned int *value)
-{
-  unsigned int value_len = sizeof(*value);
-
-  if (sysctlbyname(name, value, &value_len, (void *)NULL, 0) < 0)
-    {
-      gam_error(DEBUG_INFO, "unable to retrieve %s: %s\n", name, g_strerror(errno));
-      return FALSE;
-    }
-  else
-    return TRUE;
-}
-
 /*** HashTable ***************************************************************/
 
 static HashTable *
@@@@ -509,33 +500,49 @@@@ static gboolean
 gam_kqueue_monitor_enable_kqueue (Monitor *mon)
 {
   struct kevent ev[1];
+  struct statfs sb;
 
   if (open_files == max_open_files)
     {
       GAM_DEBUG(DEBUG_INFO, "cannot open %s (max_open_files limit reached), falling back to poll\n", mon->pathname);
       return FALSE;
     }
-  
-  mon->fd = open(mon->pathname, O_RDONLY | O_NOFOLLOW);
+ 
+  if (gam_exclude_check(mon->pathname))
+    {
+      GAM_DEBUG(DEBUG_INFO, "not using kqueue for %s since it is excluded, falling back to poll\n", mon->pathname);
+      return FALSE;
+    }
+
+  mon->fd = open(mon->pathname, O_RDONLY | O_NONBLOCK | O_NOFOLLOW);
   if (mon->fd < 0)
     {
       GAM_DEBUG(DEBUG_INFO, "cannot open %s (%s), falling back to poll\n", mon->pathname, g_strerror(errno));
       return FALSE;
     }
 
+  if (fstatfs(mon->fd, &sb) == 0 && (sb.f_flags & MNT_LOCAL) == 0)
+    {
+      GAM_DEBUG(DEBUG_INFO, "%s resides on a remote file system, falling back to poll\n", mon->pathname);
+      goto poll;
+    }
+
   EV_SET(ev, mon->fd, EVFILT_VNODE, EV_ADD | EV_ENABLE | EV_CLEAR, VN_NOTE_ALL, 0, mon);
   if (kevent(kq, ev, G_N_ELEMENTS(ev), NULL, 0, NULL) < 0)
     {
       GAM_DEBUG(DEBUG_INFO, "cannot enable kqueue notification for %s (%s), falling back to poll\n", mon->pathname, g_strerror(errno));
 
-      close(mon->fd);
-      mon->fd = -1;
-
-      return FALSE;
+      goto poll;
     }
 
   open_files++;
   return TRUE;
+
+ poll:
+  close(mon->fd);
+  mon->fd = -1;
+
+  return FALSE;
 }
 
 static void
@@@@ -840,6 +847,9 @@@@ gam_kqueue_sub_monitor_emit_event (SubMonitor *smon,
     case GAMIN_EVENT_MOVED:
       gam_kqueue_sub_monitor_set_missing(smon);
       break;
+
+    default:
+      break;
     }
 
   gam_server_emit_event(mon->pathname, isdir, event, smon->subs, 1);
@@@@ -981,6 +991,9 @@@@ gam_kqueue_file_monitor_emit_event (FileMonitor *fmon,
 	
       gam_kqueue_hash_table_remove(fmon->smon->fmons, fmon);
       break;
+
+    default:
+      break;
     }
 }
 
@@@@ -1125,7 +1138,12 @@@@ gam_kqueue_init (void)
   GIOChannel *channel;
   unsigned int maxfiles;
   unsigned int maxfilesperproc;
+  int mib[2];
+  size_t len;
+  struct rlimit rlp;
 
+  gam_poll_basic_init ();
+
   kq = kqueue();
   if (kq < 0)
     {
@@@@ -1133,11 +1151,16 @@@@ gam_kqueue_init (void)
       return FALSE;
     }
 
-  if (! gam_kqueue_get_uint_sysctl("kern.maxfiles", &maxfiles))
+  len = sizeof(maxfiles);
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_MAXFILES;
+
+  if (sysctl(mib, 2, &maxfiles, &len, NULL, 0) < 0) {
+	gam_error(DEBUG_INFO, "unable to retrieve maxfiles: %s\n", g_strerror(errno));
     return FALSE;
-  if (! gam_kqueue_get_uint_sysctl("kern.maxfilesperproc", &maxfilesperproc))
-    return FALSE;
+}
 
+
   /*
    * We make sure to:
    *	- never paralyze the system (CFG_GLOBAL_FILE_RESERVE_RATIO)
@@@@ -1145,6 +1168,22 @@@@ gam_kqueue_init (void)
    */
 
   maxfiles *= CFG_GLOBAL_FILE_RESERVE_RATIO;
+  maxfilesperproc = 128;
+
+  if (getrlimit(RLIMIT_NOFILE, &rlp) == 0)
+    {
+      rlp.rlim_cur = rlp.rlim_max;
+      if (setrlimit(RLIMIT_NOFILE, &rlp) < -1)
+        {
+          gam_error(DEBUG_INFO, "cannot unlimit number of open files\n");
+          err(1, "setrlimit");
+        }
+      else
+        {
+          maxfilesperproc = rlp.rlim_max;
+        }
+    }
+
   maxfilesperproc = maxfilesperproc > CFG_SELF_FILE_RESERVE
     ? maxfilesperproc - CFG_SELF_FILE_RESERVE
     : 0;
@


1.7
log
@When the kqueue(2) backend is used, make sure we initialise the poll(2)
backend as well so that NFS monitoring works.
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_kqueue_c,v 1.6 2009/12/28 17:23:23 phessler Exp $
d17 2
a18 2
--- server/gam_kqueue.c.orig	Wed Jul  4 15:50:41 2007
+++ server/gam_kqueue.c	Fri Sep  2 14:45:19 2011
d29 7
a35 1
@@@@ -58,10 +59,13 @@@@
d49 1
a49 1
@@@@ -323,20 +327,6 @@@@ gam_kqueue_isdir (const char *pathname, MonitorFlags f
d70 1
a70 1
@@@@ -509,33 +499,49 @@@@ static gboolean
d126 1
a126 1
@@@@ -840,6 +846,9 @@@@ gam_kqueue_sub_monitor_emit_event (SubMonitor *smon,
d136 1
a136 1
@@@@ -981,6 +990,9 @@@@ gam_kqueue_file_monitor_emit_event (FileMonitor *fmon,
d146 1
a146 1
@@@@ -1125,7 +1137,12 @@@@ gam_kqueue_init (void)
d159 1
a159 1
@@@@ -1133,11 +1150,16 @@@@ gam_kqueue_init (void)
d179 1
a179 1
@@@@ -1145,6 +1167,22 @@@@ gam_kqueue_init (void)
@


1.6
log
@add some gcc2.95 fixes
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_kqueue_c,v 1.5 2009/12/06 17:48:37 ajacoutot Exp $
d9 2
d17 2
a18 2
--- server/gam_kqueue.c.orig	Wed Jul  4 07:50:41 2007
+++ server/gam_kqueue.c	Mon Dec 28 09:40:41 2009
d140 1
a140 1
@@@@ -1125,6 +1137,9 @@@@ gam_kqueue_init (void)
d148 2
d152 2
a153 1
@@@@ -1133,11 +1148,16 @@@@ gam_kqueue_init (void)
d173 1
a173 1
@@@@ -1145,6 +1165,22 @@@@ gam_kqueue_init (void)
@


1.5
log
@I finally nailed down the previous issue, so re-enable kqueue support.
Successfully tested with nautilus and pcmanfm.
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_kqueue_c,v 1.4 2009/12/06 13:38:54 ajacoutot Exp $
d15 2
a16 2
--- server/gam_kqueue.c.orig	Wed Jul  4 15:50:41 2007
+++ server/gam_kqueue.c	Sun Dec  6 18:40:54 2009
d138 11
a148 1
@@@@ -1133,11 +1145,17 @@@@ gam_kqueue_init (void)
d153 1
a153 2
+  int mib[2];
+  size_t len = sizeof(maxfiles);
d168 1
a168 1
@@@@ -1145,6 +1163,23 @@@@ gam_kqueue_init (void)
a173 1
+  struct rlimit rlp;
@


1.4
log
@Tweak maxfilesperproc to force polling all the time.
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_kqueue_c,v 1.3 2009/12/05 22:55:36 ajacoutot Exp $
d16 1
a16 1
+++ server/gam_kqueue.c	Sat Dec  5 23:10:14 2009
d159 1
a159 1
@@@@ -1145,9 +1163,28 @@@@ gam_kqueue_init (void)
d163 2
a164 6
+#if defined(KERN_MAXFILESPERPROC)
   maxfilesperproc = maxfilesperproc > CFG_SELF_FILE_RESERVE
     ? maxfilesperproc - CFG_SELF_FILE_RESERVE
     : 0;
+#else
+  maxfilesperproc = 0; /* XXX 128 */
d176 1
a176 2
+// XXX kqueue hangs
+//          maxfilesperproc = rlp.rlim_max;
d179 4
a182 4
+#endif
 
   max_open_files = MIN(maxfiles, maxfilesperproc);
 
@


1.3
log
@Use setrlimit to set a correct value for maxfilesperproc.

Disable the kqueue(2) backend for now (by setting max_open_files to the
minimum) as there are some weird corner cases where it doesn't work and
hangs gam_server. I'm still on that but for the time beeing we want this
to work in every situations.
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_kqueue_c,v 1.2 2009/12/05 17:03:40 ajacoutot Exp $
d168 1
a168 1
+  maxfilesperproc = 128;
@


1.2
log
@Really fall back from kqueue to poll when we run out of fds.
While here, add more CONFIGURE_ARGS to DEBUG.
@
text
@d1 1
a1 1
$OpenBSD: patch-server_gam_kqueue_c,v 1.1.1.1 2009/12/04 08:07:20 ajacoutot Exp $
d12 2
a13 1
default to "0" and kqueue will never be used.
d16 1
a16 1
+++ server/gam_kqueue.c	Sat Dec  5 17:40:55 2009
d27 1
a27 1
@@@@ -58,10 +59,12 @@@@
d32 1
d41 1
a41 1
@@@@ -323,20 +326,6 @@@@ gam_kqueue_isdir (const char *pathname, MonitorFlags f
d62 1
a62 1
@@@@ -509,33 +498,49 @@@@ static gboolean
d71 4
a74 2
+      goto poll;
+    }
d79 2
a80 4
       return FALSE;
     }
-  
-  mon->fd = open(mon->pathname, O_RDONLY | O_NOFOLLOW);
d118 1
a118 1
@@@@ -840,6 +845,9 @@@@ gam_kqueue_sub_monitor_emit_event (SubMonitor *smon,
d128 1
a128 1
@@@@ -981,6 +989,9 @@@@ gam_kqueue_file_monitor_emit_event (FileMonitor *fmon,
d138 1
a138 1
@@@@ -1133,10 +1144,15 @@@@ gam_kqueue_init (void)
d155 1
d158 2
a159 1
@@@@ -1145,9 +1161,13 @@@@ gam_kqueue_init (void)
d168 16
a183 1
+  maxfilesperproc = maxfiles;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d15 2
a16 2
+++ server/gam_kqueue.c	Sun Nov 29 17:05:35 2009
@@@@ -31,7 +32,8 @@@@
d26 1
a26 1
@@@@ -58,10 +60,12 @@@@
d39 1
a39 1
@@@@ -323,20 +327,6 @@@@ gam_kqueue_isdir (const char *pathname, MonitorFlags f
d60 1
a60 1
@@@@ -509,33 +499,49 @@@@ static gboolean
d69 6
a78 6
+ 
+  if (gam_exclude_check(mon->pathname))
+    {
+      GAM_DEBUG(DEBUG_INFO, "not using kqueue for %s since it is excluded, falling back to poll\n", mon->pathname);
+      return FALSE;
+    }
d116 1
a116 1
@@@@ -840,6 +846,9 @@@@ gam_kqueue_sub_monitor_emit_event (SubMonitor *smon,
d126 1
a126 1
@@@@ -981,6 +990,9 @@@@ gam_kqueue_file_monitor_emit_event (FileMonitor *fmon,
d136 1
a136 1
@@@@ -1133,10 +1145,15 @@@@ gam_kqueue_init (void)
d155 1
a155 1
@@@@ -1145,9 +1162,13 @@@@ gam_kqueue_init (void)
@


1.1.1.1
log
@Import (lib,py-)gamin-0.1.10

Gamin is a file and directory monitoring system defined to be a subset
of the FAM (File Alteration Monitor) system.
The main goals of the project are:
  * minimize the security model of FAM
  * simplify the code base
  * provide an API and ABI compatible replacement for FAM
  * try to fix some other issues like resource consumption

works for bernd@@
ok landry@@ jasper@@
@
text
@@
