head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.40
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.38
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.34
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.36
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.32
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.30
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.28
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.26
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.24
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.22
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.20
	OPENBSD_5_0:1.4.0.18
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	jcs20041201:1.1.1.1
	jcs:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2007.06.01.16.44.11;	author jcs;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.01.01.54.53;	author jcs;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.14.23.23.18;	author jcs;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.01.17.08.55;	author jcs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.01.17.08.55;	author jcs;	state Exp;
branches;
next	;


desc
@@


1.4
log
@when the laptop volume is muted, it's kind of hard to notice the
little flashing battery icon when the battery is about to die

so as long as we're talking to /dev/apm, store the battery level and
show when it changes ("Battery level changed to low")
@
text
@$OpenBSD: patch-src_tpb_c,v 1.3 2007/06/01 01:54:53 jcs Exp $
--- src/tpb.c.orig	Mon Jul 18 08:15:59 2005
+++ src/tpb.c	Fri Jun  1 10:34:14 2007
@@@@ -25,13 +25,21 @@@@
 #include <sys/wait.h>
 #include <locale.h>
 #include <signal.h>
+#ifdef __OpenBSD__
+#include <soundcard.h>
+#else
 #include <sys/soundcard.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#ifdef __OpenBSD__
+#include <sys/ioctl.h>
+#include <machine/apmvar.h>
+#endif
 #include "config.h"
 
 #if ENABLE_NLS
@@@@ -84,8 +92,13 @@@@ int apmiser_running(void);
 int *xerrorhandler(Display *display, XErrorEvent *event);
 #endif /* HAVE_LIBX11 */
 void sig_chld_handler(int signo);
+#ifdef __OpenBSD__
+const char *apm_battery_level(int state);
+#endif
 /* }}} */
 
+int nfd = -1;
+
 int main(int argc, char **argv) /* {{{ */
 {
   t_thinkpad_state thinkpad_state, last_thinkpad_state;
@@@@ -103,6 +116,17 @@@@ int main(int argc, char **argv) /* {{{ */
   Display *display = NULL;
 #endif /* HAVE_LIBX11 */
 
+  /* open nvram */
+  if ((nfd = open(PATH_NVRAM, O_RDONLY|O_NONBLOCK, 0)) < 0) {
+    fprintf(stderr, _("Unable to open device %s: "), PATH_NVRAM);
+    perror(NULL);
+    return -1;
+  }
+
+  /* drop privileges */
+  setegid(getgid());
+  setgid(getgid());
+
   /* zero thinkpad_state */
   memset(&thinkpad_state, 0, sizeof(thinkpad_state));
 
@@@@ -143,7 +167,7 @@@@ int main(int argc, char **argv) /* {{{ */
 
   /* become a daemon if requested */
   if(cfg.daemon == STATE_ON) {
-    daemonize();
+    daemon(0, 0);
   }
 
   /* initialize osd */
@@@@ -638,6 +662,28 @@@@ int main(int argc, char **argv) /* {{{ */
 #endif /* HAVE_LIBXOSD */
     } /* }}} */
 
+#ifdef __OpenBSD__
+    /* determine the level of battery {{{ */
+    if(thinkpad_state.battery_level != last_thinkpad_state.battery_level) {
+      if(cfg.verbose == STATE_ON) {
+	printf(_("Battery level changed: %s\n"), _(apm_battery_level(thinkpad_state.battery_level)));
+      }
+      if(cfg.callback != NULL) {
+	snprintf(callback_cmd, sizeof(callback_cmd), "%s battery_level %s", cfg.callback, _(apm_battery_level(thinkpad_state.battery_level)));
+	if(fork_app(callback_cmd) != 0) {
+	  _exit(0);
+	}
+      }
+#ifdef HAVE_LIBXOSD
+      if(osd_ptr != NULL &&
+	 ((cfg.osd == STATE_OFF && cfg.osdpowermgt == STATE_ON) || (cfg.osd == STATE_ON && cfg.osdpowermgt != STATE_OFF))) {
+	xosd_display(osd_ptr, 0, XOSD_printf, "Battery level changed to %s", apm_battery_level(thinkpad_state.battery_level));
+	xosd_display(osd_ptr, 1, XOSD_string, "");
+      }
+#endif /* HAVE_LIBXOSD */
+    } /* }}} */
+#endif
+
     /* determine power management mode AC {{{ */
     if(thinkpad_state.powermgt_ac != last_thinkpad_state.powermgt_ac) {
       switch(thinkpad_state.powermgt_ac) {
@@@@ -980,7 +1026,6 @@@@ Display *init_xgrabkey(void) /* {{{ */
 /* get the current state from the nvram */
 int get_nvram_state(t_thinkpad_state *thinkpad_state) /* {{{ */
 {
-  static int fdsc = -1; /* -1 -> file not opened */
   unsigned char buffer[114];
   struct {
     int pos;
@@@@ -994,26 +1039,20 @@@@ int get_nvram_state(t_thinkpad_state *thinkpad_state) 
   };
   int pos_len_idx = 0;
 
-  /* open nvram for reading */
-  if(fdsc == -1) { /* if not already opened, open nvram */
-    if((fdsc=open(cfg.nvram, O_RDONLY|O_NONBLOCK)) == -1) {
-      fprintf(stderr, _("Unable to open device %s: "), cfg.nvram);
-      perror(NULL);
-      return -1;
-    }
-  }
+  if (nfd < 0)
+     return -1;
 
   /* Read only the interesting bytes from nvram to reduce the CPU consupmtion of tpb */
   /* The kernel nvram driver reads byte-by-byte from nvram, so just reading interesting bytes reduces the amount of inb() calls */
   while (pos_len[pos_len_idx].pos != 0x0) {
-    if(lseek(fdsc, pos_len[pos_len_idx].pos, SEEK_SET) != pos_len[pos_len_idx].pos ) {
-      fprintf(stderr, _("Unable to seek in device %s: "), cfg.nvram);
+    if(lseek(nfd, pos_len[pos_len_idx].pos, SEEK_SET) != pos_len[pos_len_idx].pos ) {
+      fprintf(stderr, _("Unable to seek in device %s: "), PATH_NVRAM);
       perror(NULL);
       return -1;
     }
-    if(read(fdsc, buffer+pos_len[pos_len_idx].pos, pos_len[pos_len_idx].len) != pos_len[pos_len_idx].len) {
+    if(read(nfd, buffer+pos_len[pos_len_idx].pos, pos_len[pos_len_idx].len) != pos_len[pos_len_idx].len) {
 
-      fprintf(stderr, _("Unable to read from device %s: "), cfg.nvram);
+      fprintf(stderr, _("Unable to read from device %s: "), PATH_NVRAM);
       perror(NULL);
       return -1;
     }
@@@@ -1045,11 +1084,28 @@@@ int get_nvram_state(t_thinkpad_state *thinkpad_state) 
 /* get the current state from the apm subsystem */
 int get_apm_state(t_thinkpad_state *thinkpad_state) /* {{{ */
 {
-  unsigned int i;
   static int fdsc = -1; /* -1 -> file not opened */
+#ifdef __OpenBSD__
+  struct apm_power_info info;
+#else
+  unsigned int i;
   char buffer[38];
   char *tokens[9];
+#endif
 
+#ifdef __OpenBSD__
+  memset(&info, 0, sizeof(info));
+
+  if (fdsc == -1)
+    fdsc = open("/dev/apm", O_RDONLY);
+
+  if (fdsc) {
+    if (ioctl(fdsc, APM_IOC_GETPOWER, &info) == 0) {
+      thinkpad_state->ac_state = (info.ac_state ? STATE_ON : STATE_OFF);
+      thinkpad_state->battery_level = info.battery_state;
+    }
+  }
+#else
   /* Read the state of the ac line from proc filesystem.
    * Documentation of /proc/apm from linux kernel (/usr/src/linux/arch/i386/kernel/apm.c)
    * 
@@@@ -1122,6 +1178,7 @@@@ int get_apm_state(t_thinkpad_state *thinkpad_state) /*
       thinkpad_state->ac_state = STATE_ON;
       break;
   }
+#endif
 
   return 0;
 } /* }}} */
@@@@ -1283,6 +1340,11 @@@@ void set_nvram_volume_level(t_thinkpad_state *thinkpad
   int  fdsc;
   char buffer;
 
+#ifdef __OpenBSD__
+  /* nvram writing not supported in OpenBSD */
+  return;
+#endif
+
   /* only use writeback to nvram when cfg.mixersteps is different from DEFAULT_MIXERSTEPS */
   if(cfg.mixersteps != DEFAULT_MIXERSTEPS) {
     /* open nvram */
@@@@ -1466,5 +1528,28 @@@@ void sig_chld_handler(int signo) /* {{{ */
   waitpid(-1, &status, WNOHANG);
   return;
 } /* }}} */
+
+#ifdef __OpenBSD__
+const char *
+apm_battery_level(int state)
+{
+  switch (state) {
+  case APM_BATT_HIGH:
+    return "high";
+  case APM_BATT_LOW:
+    return "low";
+  case APM_BATT_CRITICAL:
+    return "CRITICAL";
+  case APM_BATT_CHARGING:
+    return "charging";
+  case APM_BATTERY_ABSENT:
+    return "absent";
+  case APM_BATT_UNKNOWN:
+    return "unknown";
+  default:
+    return "invalid battery state";
+  }
+}
+#endif
 
 /* vim600:set fen:set fdm=marker:set fdl=0: */
@


1.3
log
@for openbsd, talk to /dev/apm to hook up ac state changes instead of
/proc/apm
@
text
@d1 1
a1 1
$OpenBSD: patch-src_tpb_c,v 1.2 2004/12/14 23:23:18 jcs Exp $
d3 1
a3 1
+++ src/tpb.c	Thu May 31 19:51:17 2007
d26 3
a28 1
@@@@ -86,6 +94,8 @@@@ int *xerrorhandler(Display *display, XErrorEvent *even
d30 3
d40 1
a40 1
@@@@ -103,6 +113,17 @@@@ int main(int argc, char **argv) /* {{{ */
d58 1
a58 1
@@@@ -143,7 +164,7 @@@@ int main(int argc, char **argv) /* {{{ */
d67 30
a96 1
@@@@ -980,7 +1001,6 @@@@ Display *init_xgrabkey(void) /* {{{ */
d104 1
a104 1
@@@@ -994,26 +1014,20 @@@@ int get_nvram_state(t_thinkpad_state *thinkpad_state) 
d137 1
a137 1
@@@@ -1045,11 +1059,26 @@@@ int get_nvram_state(t_thinkpad_state *thinkpad_state) 
d158 1
a158 1
+    if (ioctl(fdsc, APM_IOC_GETPOWER, &info) == 0)
d160 2
d167 1
a167 1
@@@@ -1122,6 +1151,7 @@@@ int get_apm_state(t_thinkpad_state *thinkpad_state) /*
d175 1
a175 2
@@@@ -1282,6 +1312,11 @@@@ void set_nvram_volume_level(t_thinkpad_state *thinkpad
 {
d178 1
a178 1
+
d183 1
a183 1
 
d186 30
@


1.2
log
@hardcode /dev/nvram, drop kmem privs as soon as possible
bump pkgname
@
text
@d1 4
a4 4
$OpenBSD$
--- src/tpb.c.orig	Sun Aug 22 08:45:11 2004
+++ src/tpb.c	Thu Dec  2 12:18:26 2004
@@@@ -25,7 +25,11 @@@@
d16 11
a26 1
@@@@ -86,6 +90,8 @@@@
d35 1
a35 1
@@@@ -103,6 +109,17 @@@@
d53 1
a53 1
@@@@ -143,7 +160,7 @@@@
d62 1
a62 1
@@@@ -972,7 +989,6 @@@@
d70 1
a70 1
@@@@ -986,26 +1002,20 @@@@
d103 37
a139 1
@@@@ -1273,6 +1283,11 @@@@
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
--- src/tpb.c.orig	Sun Oct  3 13:18:33 2004
+++ src/tpb.c	Sun Oct  3 13:19:30 2004
d16 89
@


1.1.1.1
log
@tpb-0.6.3

utility to use ibm thinkpad(tm) special keys
@
text
@@
