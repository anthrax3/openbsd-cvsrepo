head	1.18;
access;
symbols
	OPENBSD_6_1:1.17.0.10
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.2
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.15.0.8
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.6
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.4
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.2
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4;
locks; strict;
comment	@# @;


1.18
date	2017.04.24.01.46.06;	author jca;	state Exp;
branches;
next	1.17;
commitid	B6rrn4cqrPNTB1a5;

1.17
date	2015.01.18.15.59.46;	author naddy;	state Exp;
branches;
next	1.16;
commitid	PGkCZwGGNajlNjLW;

1.16
date	2013.10.12.13.12.43;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.23.11.42.11;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2011.04.11.08.20.41;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2009.12.02.22.59.29;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.02.21.16.10;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2008.12.20.04.36.11;	author canacar;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.13.00.38.12;	author canacar;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.22.06.46.44;	author canacar;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.11.10.17.48;	author canacar;	state dead;
branches;
next	1.7;

1.7
date	2005.12.04.10.43.03;	author sturm;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.10.21.09.04;	author dhartmei;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.21.18.24.41;	author canacar;	state dead;
branches;
next	1.4;

1.4
date	2003.02.21.23.02.58;	author dhartmei;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.22.06.06;	author dhartmei;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.02.06.26.44;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.02.00.02.27;	author dhartmei;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Mark some inline functions as static to fix clang builds
@
text
@$OpenBSD: patch-pftop_c,v 1.17 2015/01/18 15:59:46 naddy Exp $
--- pftop.c.orig	Wed Nov  7 07:36:46 2007
+++ pftop.c	Mon Apr 24 03:44:14 2017
@@@@ -55,6 +55,7 @@@@
 #include <err.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <limits.h>
 #include <netdb.h>
 #include <signal.h>
 #include <stdio.h>
@@@@ -127,6 +128,13 @@@@
 #define PT_NOROUTE(x) (0)
 #endif
 
+#ifdef HAVE_NETWORK_ORDER
+#define PF_TSTAMP(x) ntohl(x)
+#else
+#define PF_TSTAMP(x) (x)
+#endif
+
+
 /* view management */
 int select_states(void);
 int read_states(void);
@@@@ -445,11 +453,11 @@@@ sort_pkt_callback(const void *s1, const void *s2)
 int
 sort_age_callback(const void *s1, const void *s2)
 {
-	if (state_buf[* (u_int32_t *) s2].creation >
-	    state_buf[* (u_int32_t *) s1].creation)
+	if (PF_TSTAMP(state_buf[* (u_int32_t *) s2].creation) >
+	    PF_TSTAMP(state_buf[* (u_int32_t *) s1].creation))
 		return sortdir;
-	if (state_buf[* (u_int32_t *) s2].creation <
-	    state_buf[* (u_int32_t *) s1].creation)
+	if (PF_TSTAMP(state_buf[* (u_int32_t *) s2].creation) <
+	    PF_TSTAMP(state_buf[* (u_int32_t *) s1].creation))
 		return -sortdir;
 	return 0;
 }
@@@@ -457,11 +465,11 @@@@ sort_age_callback(const void *s1, const void *s2)
 int
 sort_exp_callback(const void *s1, const void *s2)
 {
-	if (state_buf[* (u_int32_t *) s2].expire >
-	    state_buf[* (u_int32_t *) s1].expire)
+	if (PF_TSTAMP(state_buf[* (u_int32_t *) s2].expire) >
+	    PF_TSTAMP(state_buf[* (u_int32_t *) s1].expire))
 		return sortdir;
-	if (state_buf[* (u_int32_t *) s2].expire <
-	    state_buf[* (u_int32_t *) s1].expire)
+	if (PF_TSTAMP(state_buf[* (u_int32_t *) s2].expire) <
+	    PF_TSTAMP(state_buf[* (u_int32_t *) s1].expire))
 		return -sortdir;
 	return 0;
 }
@@@@ -535,6 +543,9 @@@@ compare_addr(int af, const struct pf_addr *a, const st
 	return 0;
 }
 
+#ifdef HAVE_PFSYNC_KEY
+
+static
 #ifdef __GNUC__
 __inline__
 #endif
@@@@ -542,6 +553,114 @@@@ int
 sort_addr_callback(const pf_state_t *s1,
 		   const pf_state_t *s2, int dir)
 {
+	const struct pf_addr *aa, *ab;
+	u_int16_t pa, pb;
+	int af, ret, ii, io;
+
+	af = s1->af;
+
+
+	if (af > s2->af)
+		return sortdir;
+	if (af < s2->af)
+		return -sortdir;
+	
+       	ii = io = 0;
+
+	if (dir == PF_OUT)	/* looking for source addr */
+		io = 1;
+	else			/* looking for dest addr */
+		ii = 1;
+	
+	if (s1->direction == PF_IN) {
+		aa = &s1->key[PF_SK_STACK].addr[ii];
+		pa =  s1->key[PF_SK_STACK].port[ii];
+	} else {
+		aa = &s1->key[PF_SK_WIRE].addr[io];
+		pa =  s1->key[PF_SK_WIRE].port[io];
+	}
+
+	if (s2->direction == PF_IN) {
+		ab = &s2->key[PF_SK_STACK].addr[ii];;
+		pb =  s2->key[PF_SK_STACK].port[ii];
+	} else {
+		ab = &s2->key[PF_SK_WIRE].addr[io];;
+		pb =  s2->key[PF_SK_WIRE].port[io];
+	}
+
+	ret = compare_addr(af, aa, ab);
+	if (ret)
+		return ret * sortdir;
+
+	if (ntohs(pa) > ntohs(pb))
+		return sortdir;
+	return -sortdir;
+}
+
+static
+#ifdef __GNUC__
+__inline__
+#endif
+int
+sort_port_callback(const pf_state_t *s1,
+		   const pf_state_t *s2, int dir)
+{
+	const struct pf_addr *aa, *ab;
+	u_int16_t pa, pb;
+	int af, ret, ii, io;
+
+	af = s1->af;
+
+
+	if (af > s2->af)
+		return sortdir;
+	if (af < s2->af)
+		return -sortdir;
+	
+       	ii = io = 0;
+
+	if (dir == PF_OUT)	/* looking for source addr */
+		io = 1;
+	else			/* looking for dest addr */
+		ii = 1;
+	
+	if (s1->direction == PF_IN) {
+		aa = &s1->key[PF_SK_STACK].addr[ii];
+		pa =  s1->key[PF_SK_STACK].port[ii];
+	} else {
+		aa = &s1->key[PF_SK_WIRE].addr[io];
+		pa =  s1->key[PF_SK_WIRE].port[io];
+	}
+
+	if (s2->direction == PF_IN) {
+		ab = &s2->key[PF_SK_STACK].addr[ii];;
+		pb =  s2->key[PF_SK_STACK].port[ii];
+	} else {
+		ab = &s2->key[PF_SK_WIRE].addr[io];;
+		pb =  s2->key[PF_SK_WIRE].port[io];
+	}
+
+
+	if (ntohs(pa) > ntohs(pb))
+		return sortdir;
+	if (ntohs(pa) < ntohs(pb))
+		return - sortdir;
+
+	ret = compare_addr(af, aa, ab);
+	if (ret)
+		return ret * sortdir;
+	return -sortdir;
+}
+
+#else	/* HAVE_PFSYNC_KEY */
+
+#ifdef __GNUC__
+__inline__
+#endif
+int
+sort_addr_callback(const pf_state_t *s1,
+		   const pf_state_t *s2, int dir)
+{
 	const pf_state_host_t *a, *b;
 	int af, ret;
 
@@@@ -573,20 +692,6 @@@@ sort_addr_callback(const pf_state_t *s1,
 	return -sortdir;
 }
 
-int sort_sa_callback(const void *p1, const void *p2)
-{
-	pf_state_t *s1 = state_buf + (* (u_int32_t *) p1);
-	pf_state_t *s2 = state_buf + (* (u_int32_t *) p2);
-	return sort_addr_callback(s1, s2, PF_OUT);
-}
-
-int sort_da_callback(const void *p1, const void *p2)
-{
-	pf_state_t *s1 = state_buf + (* (u_int32_t *) p1);
-	pf_state_t *s2 = state_buf + (* (u_int32_t *) p2);
-	return sort_addr_callback(s1, s2, PF_IN);
-}
-
 #ifdef __GNUC__
 __inline__
 #endif
@@@@ -625,7 +730,22 @@@@ sort_port_callback(const pf_state_t *s1,
 		return sortdir;
 	return -sortdir;
 }
+#endif	/* HAVE_PFSYNC_KEY */
 
+int sort_sa_callback(const void *p1, const void *p2)
+{
+	pf_state_t *s1 = state_buf + (* (u_int32_t *) p1);
+	pf_state_t *s2 = state_buf + (* (u_int32_t *) p2);
+	return sort_addr_callback(s1, s2, PF_OUT);
+}
+
+int sort_da_callback(const void *p1, const void *p2)
+{
+	pf_state_t *s1 = state_buf + (* (u_int32_t *) p1);
+	pf_state_t *s2 = state_buf + (* (u_int32_t *) p2);
+	return sort_addr_callback(s1, s2, PF_IN);
+}
+
 int
 sort_sp_callback(const void *p1, const void *p2)
 {
@@@@ -865,7 +985,48 @@@@ tb_print_addr(struct pf_addr * addr, struct pf_addr * 
 			tbprintf("/%u", unmask(mask, af));
 	}
 }
+#ifdef HAVE_PFSYNC_KEY
+void
+print_fld_host2(field_def *fld, struct pfsync_state_key *ks,
+		struct pfsync_state_key *kn, int idx, int af)
+{
+	struct pf_addr *as = &ks->addr[idx];
+	struct pf_addr *an = &kn->addr[idx];
 
+	u_int16_t ps = ntohs(ks->port[idx]);
+	u_int16_t pn = ntohs(kn->port[idx]);
+
+	if (fld == NULL)
+		return;
+
+	if (fld->width < 3) {
+		print_fld_str(fld, "*");
+		return;
+	}
+
+	tb_start();
+	tb_print_addr(as, NULL, af);
+
+	if (af == AF_INET)
+		tbprintf(":%u", ps);
+	else
+		tbprintf("[%u]", ps);
+
+	print_fld_tb(fld);
+
+	if (PF_ANEQ(as, an, af) || ps != pn) {
+		tb_start();
+		tb_print_addr(an, NULL, af);
+
+		if (af == AF_INET)
+			tbprintf(":%u", pn);
+		else
+			tbprintf("[%u]", pn);
+		print_fld_tb(FLD_GW);
+	}
+
+}
+#else
 void
 print_fld_host(field_def *fld, pf_state_host_t * h, int af)
 {
@@@@ -889,6 +1050,7 @@@@ print_fld_host(field_def *fld, pf_state_host_t * h, in
 
 	print_fld_tb(fld);
 }
+#endif
 
 void
 print_fld_state(field_def *fld, unsigned int proto,
@@@@ -960,7 +1122,20 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
 	else
 		print_fld_uint(FLD_PROTO, s->proto);
 
+#ifdef HAVE_PFSYNC_KEY
 	if (s->direction == PF_OUT) {
+		print_fld_host2(FLD_SRC, &s->key[PF_SK_WIRE],
+		    &s->key[PF_SK_STACK], 1, s->af);
+		print_fld_host2(FLD_DEST, &s->key[PF_SK_WIRE],
+		    &s->key[PF_SK_STACK], 0, s->af);
+	} else {
+		print_fld_host2(FLD_SRC, &s->key[PF_SK_STACK],
+		    &s->key[PF_SK_WIRE], 0, s->af);
+		print_fld_host2(FLD_DEST, &s->key[PF_SK_STACK],
+		    &s->key[PF_SK_WIRE], 1, s->af);
+	}
+#else
+	if (s->direction == PF_OUT) {
 		print_fld_host(FLD_SRC, &s->lan, s->af);
 		print_fld_host(FLD_DEST, &s->ext, s->af);
 	} else {
@@@@ -972,6 +1147,7 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
 	    (s->lan.port != s->gwy.port)) {
 		print_fld_host(FLD_GW, &s->gwy, s->af);
 	}
+#endif
 
 	if (s->direction == PF_OUT)
 		print_fld_str(FLD_DIR, "Out");
@@@@ -979,8 +1155,8 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
 		print_fld_str(FLD_DIR, "In");
 
 	print_fld_state(FLD_STATE, s->proto, src->state, dst->state);
-	print_fld_age(FLD_AGE, s->creation);
-	print_fld_age(FLD_EXP, s->expire);
+	print_fld_age(FLD_AGE, PF_TSTAMP(s->creation));
+	print_fld_age(FLD_EXP, PF_TSTAMP(s->expire));
 #ifdef HAVE_INOUT_COUNT
 	{
 		u_int64_t sz = COUNTER(s->bytes[0]) + COUNTER(s->bytes[1]);
@@@@ -988,18 +1164,18 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
 		print_fld_size(FLD_PKTS, COUNTER(s->packets[0]) +
 			       COUNTER(s->packets[1]));
 		print_fld_size(FLD_BYTES, sz);
-		print_fld_rate(FLD_SA, (s->creation > 0) ?
-			       ((double)sz/(double)s->creation) : -1);
+		print_fld_rate(FLD_SA, (s->creation) ?
+			       ((double)sz/PF_TSTAMP((double)s->creation)) : -1);
 	}
 #else
 	print_fld_size(FLD_PKTS, s->packets);
 	print_fld_size(FLD_BYTES, s->bytes);
-	print_fld_rate(FLD_SA, (s->creation > 0) ?
-		       ((double)s->bytes/(double)s->creation) : -1);
+	print_fld_rate(FLD_SA, (s->creation) ?
+		       ((double)s->bytes/PF_TSTAMP((double)s->creation)) : -1);
 
 #endif
 #ifdef HAVE_PFSYNC_STATE
-	print_fld_uint(FLD_RULE, s->rule);
+	print_fld_uint(FLD_RULE, ntohl(s->rule));
 #else
 #ifdef HAVE_RULE_NUMBER
 	print_fld_uint(FLD_RULE, s->rule.nr);
@@@@ -1112,7 +1288,7 @@@@ read_anchor_rules(char *anchor)
 
 #ifdef HAVE_RULESETS
 struct anchor_name {
-	char name[MAXPATHLEN];
+	char name[PATH_MAX];
 	struct anchor_name *next;
 	u_int32_t ref;
 };
@@@@ -1458,8 +1634,9 @@@@ tb_print_flags(u_int8_t f)
 void
 print_rule(struct pf_rule *pr)
 {
-	static const char *actiontypes[] = { "Pass", "Block", "Scrub", "Nat",
-	    "no Nat", "Binat", "no Binat", "Rdr", "no Rdr" };
+	static const char *actiontypes[] = { "Pass", "Block", "Scrub",
+	    "no Scrub", "Nat", "no Nat", "Binat", "no Binat", "Rdr",
+	    "no Rdr", "SynProxy Block", "Defer", "Match" };
 	int numact = sizeof(actiontypes) / sizeof(char *);
 
 #ifdef HAVE_PF_ROUTE
@@@@ -1475,8 +1652,12 @@@@ print_rule(struct pf_rule *pr)
 	print_fld_str(FLD_LABEL, pr->label);
 #endif
 #ifdef HAVE_RULE_STATES
+#ifdef HAVE_PFSYNC_KEY
+	print_fld_size(FLD_STATS, pr->states_tot);
+#else
 	print_fld_size(FLD_STATS, pr->states);
 #endif
+#endif
 
 #ifdef HAVE_INOUT_COUNT_RULES
 	print_fld_size(FLD_PKTS, pr->packets[0] + pr->packets[1]);
@@@@ -1486,7 +1667,13 @@@@ print_rule(struct pf_rule *pr)
 	print_fld_size(FLD_BYTES, pr->bytes);
 #endif
 	print_fld_uint(FLD_RULE, pr->nr);
-	print_fld_str(FLD_DIR, pr->direction == PF_OUT ? "Out" : "In");
+	if (pr->direction == PF_OUT)
+		print_fld_str(FLD_DIR, "Out");
+	else if (pr->direction == PF_IN)
+		print_fld_str(FLD_DIR, "In");
+	else
+		print_fld_str(FLD_DIR, "Any");
+
 	if (pr->quick)
 		print_fld_str(FLD_QUICK, "Quick");
 
@@@@ -1555,7 +1742,9 @@@@ print_rule(struct pf_rule *pr)
 #ifdef HAVE_PF_ROUTE
 	if (pr->rt > 0 && pr->rt < numroute) {
 		tbprintf("%s ", routetypes[pr->rt]);
+#ifdef PF_FASTROUTE
 		if (pr->rt != PF_FASTROUTE)
+#endif
 			tbprintf("... ");
 	}
 #endif
@@@@ -1729,12 +1918,19 @@@@ pfctl_insert_altq_node(struct pf_altq_node **root,
 			prev->next = node;
 		}
 	}
-	if (*root != node) {
-		struct pf_altq_node	*prev_flat = *root;
-		while (prev_flat->next_flat != NULL) {
-			prev_flat = prev_flat->next_flat;
-		}
-		prev_flat->next_flat = node;
+}
+
+void
+pfctl_set_next_flat(struct pf_altq_node *node, struct pf_altq_node *up)
+{
+	while (node) {
+		struct pf_altq_node *next = node->next ? node->next : up;
+		if (node->children) {
+			node->next_flat = node->children;
+			pfctl_set_next_flat(node->children, next);
+		} else
+			node->next_flat = next;
+		node = node->next;
 	}
 }
 
@@@@ -1743,10 +1939,11 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
 {
 	struct pf_altq_node	*node;
 	struct pfioc_altq	 pa;
-	struct pfioc_qstats	 pq;
+	struct pfioc_altqstats	 pq;
 	u_int32_t		 nr;
 	struct queue_stats	 qstats;
 	u_int32_t		 nr_queues;
+	int			 ret = 0;
 
 	*inserts = 0;
 	memset(&pa, 0, sizeof(pa));
@@@@ -1757,13 +1954,15 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
 			  strerror(errno));
 		return (-1);
 	}
+
 	num_queues = nr_queues = pa.nr;
 	for (nr = 0; nr < nr_queues; ++nr) {
 		pa.nr = nr;
 		if (ioctl(pf_dev, DIOCGETALTQ, &pa)) {
 			msgprintf("Error Reading Queue (DIOCGETALTQ): %s",
 				  strerror(errno));
-			return (-1);
+			ret = -1;
+			break;
 		}
 		if (pa.altq.qid > 0) {
 			pq.nr = nr;
@@@@ -1773,7 +1972,8 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
 			if (ioctl(pf_dev, DIOCGETQSTATS, &pq)) {
 				msgprintf("Error Reading Queue (DIOCGETQSTATS): %s",
 					  strerror(errno));
-				return (-1);
+				ret = -1;
+				break;
 			}
 			qstats.valid = 1;
 			gettimeofday(&qstats.timestamp, NULL);
@@@@ -1794,7 +1994,10 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
 		else
 			--num_queues;
 	}
-	return (0);
+
+	pfctl_set_next_flat(*root, NULL);
+
+	return (ret);
 }
 
 void
@


1.17
log
@use limits.h and explicitly include sys/param.h where necessary
@
text
@d1 1
a1 1
$OpenBSD: patch-pftop_c,v 1.16 2013/10/12 13:12:43 sthen Exp $
d3 1
a3 1
+++ pftop.c	Sun Jan 18 16:55:30 2015
d58 1
a58 1
@@@@ -535,6 +543,8 @@@@ compare_addr(int af, const struct pf_addr *a, const st
d64 1
d68 1
a68 1
@@@@ -542,6 +552,113 @@@@ int
d116 1
d183 1
a183 1
@@@@ -573,20 +690,6 @@@@ sort_addr_callback(const pf_state_t *s1,
d204 1
a204 1
@@@@ -625,7 +728,22 @@@@ sort_port_callback(const pf_state_t *s1,
d227 1
a227 1
@@@@ -865,7 +983,48 @@@@ tb_print_addr(struct pf_addr * addr, struct pf_addr * 
d276 1
a276 1
@@@@ -889,6 +1048,7 @@@@ print_fld_host(field_def *fld, pf_state_host_t * h, in
d284 1
a284 1
@@@@ -960,7 +1120,20 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d305 1
a305 1
@@@@ -972,6 +1145,7 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d313 1
a313 1
@@@@ -979,8 +1153,8 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d324 1
a324 1
@@@@ -988,18 +1162,18 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d348 1
a348 1
@@@@ -1112,7 +1286,7 @@@@ read_anchor_rules(char *anchor)
d357 1
a357 1
@@@@ -1458,8 +1632,9 @@@@ tb_print_flags(u_int8_t f)
d369 1
a369 1
@@@@ -1475,8 +1650,12 @@@@ print_rule(struct pf_rule *pr)
d382 1
a382 1
@@@@ -1486,7 +1665,13 @@@@ print_rule(struct pf_rule *pr)
d397 1
a397 1
@@@@ -1555,7 +1740,9 @@@@ print_rule(struct pf_rule *pr)
d407 1
a407 1
@@@@ -1729,12 +1916,19 @@@@ pfctl_insert_altq_node(struct pf_altq_node **root,
d433 1
a433 1
@@@@ -1743,10 +1937,11 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d446 1
a446 1
@@@@ -1757,13 +1952,15 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d463 1
a463 1
@@@@ -1773,7 +1970,8 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d473 1
a473 1
@@@@ -1794,7 +1992,10 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
@


1.16
log
@initial fix for queues; s/pfioc_qstats/pfioc_altqstats
@
text
@d1 12
a12 4
$OpenBSD: patch-pftop_c,v 1.15 2011/08/23 11:42:11 sthen Exp $
--- pftop.c.orig	Wed Nov  7 06:36:46 2007
+++ pftop.c	Sat Oct 12 14:12:12 2013
@@@@ -127,6 +127,13 @@@@
d26 1
a26 1
@@@@ -445,11 +452,11 @@@@ sort_pkt_callback(const void *s1, const void *s2)
d42 1
a42 1
@@@@ -457,11 +464,11 @@@@ sort_age_callback(const void *s1, const void *s2)
d58 1
a58 1
@@@@ -535,6 +542,8 @@@@ compare_addr(int af, const struct pf_addr *a, const st
d67 1
a67 1
@@@@ -542,6 +551,113 @@@@ int
d181 1
a181 1
@@@@ -573,20 +689,6 @@@@ sort_addr_callback(const pf_state_t *s1,
d202 1
a202 1
@@@@ -625,7 +727,22 @@@@ sort_port_callback(const pf_state_t *s1,
d225 1
a225 1
@@@@ -865,7 +982,48 @@@@ tb_print_addr(struct pf_addr * addr, struct pf_addr * 
d274 1
a274 1
@@@@ -889,6 +1047,7 @@@@ print_fld_host(field_def *fld, pf_state_host_t * h, in
d282 1
a282 1
@@@@ -960,7 +1119,20 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d303 1
a303 1
@@@@ -972,6 +1144,7 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d311 1
a311 1
@@@@ -979,8 +1152,8 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d322 1
a322 1
@@@@ -988,18 +1161,18 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d346 10
a355 1
@@@@ -1458,8 +1631,9 @@@@ tb_print_flags(u_int8_t f)
d367 1
a367 1
@@@@ -1475,8 +1649,12 @@@@ print_rule(struct pf_rule *pr)
d380 1
a380 1
@@@@ -1486,7 +1664,13 @@@@ print_rule(struct pf_rule *pr)
d395 1
a395 1
@@@@ -1555,7 +1739,9 @@@@ print_rule(struct pf_rule *pr)
d405 1
a405 1
@@@@ -1729,12 +1915,19 @@@@ pfctl_insert_altq_node(struct pf_altq_node **root,
d431 1
a431 1
@@@@ -1743,10 +1936,11 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d444 1
a444 1
@@@@ -1757,13 +1951,15 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d461 1
a461 1
@@@@ -1773,7 +1969,8 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d471 1
a471 1
@@@@ -1794,7 +1991,10 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
@


1.15
log
@fix rule-number printing (missing byteorder conversion), from Robert Mills
@
text
@d1 1
a1 1
$OpenBSD: patch-pftop_c,v 1.14 2011/04/11 08:20:41 sthen Exp $
d3 1
a3 1
+++ pftop.c	Tue Aug 23 12:41:14 2011
d414 6
a419 1
@@@@ -1747,6 +1940,7 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
@


1.14
log
@handle PF_FASTROUTE removal. broken build reported by and diff ok with jasper
@
text
@d1 1
a1 1
$OpenBSD: patch-pftop_c,v 1.13 2009/12/02 22:59:29 sthen Exp $
d3 1
a3 1
+++ pftop.c	Mon Apr 11 09:02:34 2011
d314 1
a314 1
@@@@ -988,14 +1161,14 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d333 5
@


1.13
log
@Sync actiontypes (pass, block etc) with the version in systat.
From Mitja Muzenic.
@
text
@d1 3
a3 3
$OpenBSD: patch-pftop_c,v 1.12 2009/12/02 21:16:10 sthen Exp $
--- pftop.c.orig	Wed Nov  7 07:36:46 2007
+++ pftop.c	Thu Dec  3 00:12:22 2009
d373 11
a383 1
@@@@ -1729,12 +1913,19 @@@@ pfctl_insert_altq_node(struct pf_altq_node **root,
d409 1
a409 1
@@@@ -1747,6 +1938,7 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d417 1
a417 1
@@@@ -1757,13 +1949,15 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d434 1
a434 1
@@@@ -1773,7 +1967,8 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d444 1
a444 1
@@@@ -1794,7 +1989,10 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
@


1.12
log
@regen patches. no package change.
@
text
@d1 3
a3 3
$OpenBSD: patch-pftop_c,v 1.11 2008/12/20 04:36:11 canacar Exp $
--- pftop.c.orig	Wed Nov  7 06:36:46 2007
+++ pftop.c	Wed Dec  2 21:14:56 2009
d333 13
a345 1
@@@@ -1475,8 +1648,12 @@@@ print_rule(struct pf_rule *pr)
d358 1
a358 1
@@@@ -1486,7 +1663,13 @@@@ print_rule(struct pf_rule *pr)
d373 1
a373 1
@@@@ -1729,12 +1912,19 @@@@ pfctl_insert_altq_node(struct pf_altq_node **root,
d399 1
a399 1
@@@@ -1747,6 +1937,7 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d407 1
a407 1
@@@@ -1757,13 +1948,15 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d424 1
a424 1
@@@@ -1773,7 +1966,8 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d434 1
a434 1
@@@@ -1794,7 +1988,10 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
@


1.11
log
@Sync to systat:
* Fix byte-order of bytes, packets, age and expire fields.
* Fix the order of traversal when printing the queues.
Reported by many.
@
text
@d1 4
a4 4
$OpenBSD: patch-pftop_c,v 1.10 2008/06/13 00:38:12 canacar Exp $
--- pftop.c.orig	Tue Nov  6 22:36:46 2007
+++ pftop.c	Fri Dec 19 20:28:06 2008
@@@@ -127,6 +131,13 @@@@
d18 1
a18 1
@@@@ -445,11 +456,11 @@@@ sort_pkt_callback(const void *s1, const void *s2)
d34 1
a34 1
@@@@ -457,11 +468,11 @@@@ sort_age_callback(const void *s1, const void *s2)
d50 1
a50 1
@@@@ -535,6 +546,8 @@@@ compare_addr(int af, const struct pf_addr *a, const st
d59 1
a59 1
@@@@ -542,6 +555,113 @@@@ int
d173 1
a173 1
@@@@ -573,20 +693,6 @@@@ sort_addr_callback(const pf_state_t *s1,
d194 1
a194 1
@@@@ -625,7 +731,22 @@@@ sort_port_callback(const pf_state_t *s1,
d217 1
a217 1
@@@@ -865,7 +986,48 @@@@ tb_print_addr(struct pf_addr * addr, struct pf_addr * 
d266 1
a266 1
@@@@ -889,6 +1051,7 @@@@ print_fld_host(field_def *fld, pf_state_host_t * h, in
d274 1
a274 1
@@@@ -960,7 +1123,20 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d295 1
a295 1
@@@@ -972,6 +1148,7 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d303 1
a303 1
@@@@ -979,8 +1156,8 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d314 1
a314 1
@@@@ -988,14 +1165,14 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d333 1
a333 1
@@@@ -1475,8 +1652,12 @@@@ print_rule(struct pf_rule *pr)
d346 1
a346 1
@@@@ -1486,7 +1667,13 @@@@ print_rule(struct pf_rule *pr)
d361 1
a361 1
@@@@ -1729,12 +1916,19 @@@@ pfctl_insert_altq_node(struct pf_altq_node **root,
d387 1
a387 1
@@@@ -1747,6 +1941,7 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d395 1
a395 1
@@@@ -1757,13 +1952,15 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d412 1
a412 1
@@@@ -1773,7 +1970,8 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
d422 1
a422 1
@@@@ -1794,7 +1992,10 @@@@ pfctl_update_qstats(struct pf_altq_node **root, int *i
@


1.10
log
@Make pftop build again after the lates pf changes. Filtering against
'gateway' addres/ports does not work (yet) due to the address handling
changes in pf. Other functionality should work. Also fixes two minor
bugs reported by many.  Suggestions and ok naddy@@
@
text
@d1 50
a50 4
$OpenBSD$
--- pftop.c.orig	Tue Nov  6 23:36:46 2007
+++ pftop.c	Thu Jun 12 17:51:33 2008
@@@@ -535,6 +535,8 @@@@ compare_addr(int af, const struct pf_addr *a, const st
d59 1
a59 1
@@@@ -542,6 +544,113 @@@@ int
d173 1
a173 1
@@@@ -573,20 +682,6 @@@@ sort_addr_callback(const pf_state_t *s1,
d194 1
a194 1
@@@@ -625,7 +720,22 @@@@ sort_port_callback(const pf_state_t *s1,
d217 1
a217 1
@@@@ -865,7 +975,48 @@@@ tb_print_addr(struct pf_addr * addr, struct pf_addr * 
d266 1
a266 1
@@@@ -889,6 +1040,7 @@@@ print_fld_host(field_def *fld, pf_state_host_t * h, in
d274 1
a274 1
@@@@ -960,7 +1112,20 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d295 1
a295 1
@@@@ -972,6 +1137,7 @@@@ print_state(pf_state_t * s, struct sc_ent * ent)
d303 31
a333 1
@@@@ -1475,8 +1641,12 @@@@ print_rule(struct pf_rule *pr)
d346 1
a346 1
@@@@ -1486,7 +1656,13 @@@@ print_rule(struct pf_rule *pr)
d361 73
@


1.9
log
@Make pftop compile after the pf header changes in n2k8
@
text
@d2 256
a257 3
--- pftop.c.orig	Tue Nov  6 22:36:46 2007
+++ pftop.c	Tue May 20 23:50:29 2008
@@@@ -1475,7 +1475,7 @@@@ print_rule(struct pf_rule *pr)
d261 4
a264 2
-	print_fld_size(FLD_STATS, pr->states);
+	print_fld_size(FLD_STATS, pr->states_cur);
d266 1
d269 2
a270 1
@@@@ -1486,7 +1486,12 @@@@ print_rule(struct pf_rule *pr)
d275 3
a277 1
+	if (pr->direction == PF_IN)
a278 2
+	else if (pr->direction == PF_OUT)
+		print_fld_str(FLD_DIR, "Out");
d281 1
@


1.8
log
@Update to pftop-0.5
ok pvalchev@@, jolan@@
@
text
@d1 6
a6 21
--- pftop.c.orig	Tue Aug  5 03:20:39 2003
+++ pftop.c	Sun Dec  4 11:31:18 2005
@@@@ -1802,7 +1802,7 @@@@ tb_print_fromto(struct pf_rule_addr *src
 			 PF_AZERO(PT_MASK(src), AF_INET6))
 			tbprintf("any ");
 		else {
-			if (src->not)
+			if (src->neg)
 				tbprintf("! ");
 #ifdef HAVE_ADDR_WRAP
 			tb_print_addrw(&src->addr, PT_MASK(src), af);
@@@@ -1823,7 +1823,7 @@@@ tb_print_fromto(struct pf_rule_addr *src
 			 PF_AZERO(PT_MASK(dst), AF_INET6))
 			tbprintf("any ");
 		else {
-			if (dst->not)
+			if (dst->neg)
 				tbprintf("! ");
 #ifdef HAVE_ADDR_WRAP
 			tb_print_addrw(&dst->addr, PT_MASK(dst), af);
@@@@ -1890,8 +1890,8 @@@@ print_rule(struct pf_rule *pr)
d8 7
a14 1
 	print_fld_size(FLD_STATS, pr->states);
a15 4
-	print_fld_size(FLD_PKTS, pr->packets);
-	print_fld_size(FLD_BYTES, pr->bytes);
+	print_fld_size(FLD_PKTS, pr->packets[0] + pr->packets[1]);
+	print_fld_size(FLD_BYTES, pr->bytes[0] + pr->bytes[1]);
d17 7
a23 1
 	print_fld_str(FLD_DIR, pr->direction == PF_OUT ? "Out" : "In");
d25 2
@


1.7
log
@correct use of byte and packet counters

from Peter Postma <peter at pointless.nl>
@
text
@@


1.6
log
@struct pf_rule_addr.not -> .neg patch
@
text
@d1 3
a3 3
--- pftop.c.orig	Thu Jun 10 23:05:58 2004
+++ pftop.c	Thu Jun 10 23:06:27 2004
@@@@ -1802,7 +1802,7 @@@@
d12 1
a12 1
@@@@ -1823,7 +1823,7 @@@@
d21 11
@


1.5
log
@Update to pftop-0.4

ok henning@@, dhartmei@@, jolan@@
@
text
@d1 4
a4 62
--- pftop.c.orig	Fri Feb 21 23:56:22 2003
+++ pftop.c	Fri Feb 21 23:58:32 2003
@@@@ -1344,6 +1344,7 @@@@
 	struct pfioc_rule pr;
 	u_int32_t nr;
 
+	memset(&pr, 0, sizeof(pr));
 	if (ioctl(dev, DIOCGETRULES, &pr)) {
 		warnx("DIOCGETRULES");
 		return (-1);
@@@@ -1381,10 +1382,10 @@@@
 void
 tb_print_addrw(struct pf_addr_wrap *addr, struct pf_addr *mask, u_int8_t af)
 {
-	if (addr->addr_dyn != NULL)
-		tbprintf("(%s)", addr->addr.pfa.ifname);
+	if (addr->type == PF_ADDR_DYNIFTL)
+		tbprintf("(%s)", addr->v.ifname);
 	else
-		tb_print_addr(&addr->addr, mask, af);
+		tb_print_addr(&addr->v.a.addr, mask, af);
 }
 #endif
 
@@@@ -1432,39 +1433,40 @@@@
 {
 	if (
 #if OS_LEVEL > 31
-	    PF_AZERO(&src->addr.addr, AF_INET6) &&
-	    PF_AZERO(&dst->addr.addr, AF_INET6) &&
-	    !src->noroute && !dst->noroute &&
+	    src->addr.type != PF_ADDR_NOROUTE &&
+	    dst->addr.type != PF_ADDR_NOROUTE &&
+	    PF_AZERO(&src->addr.v.a.addr, AF_INET6) &&
+	    PF_AZERO(&dst->addr.v.a.addr, AF_INET6) &&
 #else
 	    PF_AZERO(&src->addr, AF_INET6) &&
 	    PF_AZERO(&dst->addr, AF_INET6) &&
 #endif
-	    PF_AZERO(&src->mask, AF_INET6) &&
-	    PF_AZERO(&dst->mask, AF_INET6) &&
+	    PF_AZERO(&src->addr.v.a.mask, AF_INET6) &&
+	    PF_AZERO(&dst->addr.v.a.mask, AF_INET6) &&
 	    !src->port_op && !dst->port_op)
 		tbprintf("all ");
 	else {
 		tbprintf("from ");
 #if OS_LEVEL > 30
-		if (src->noroute)
+		if (src->addr.type == PF_ADDR_NOROUTE)
 			tbprintf("no-route ");
  #if OS_LEVEL > 31
-		else if (PF_AZERO(&src->addr.addr, AF_INET6) &&
+		else if (PF_AZERO(&src->addr.v.a.addr, AF_INET6) &&
  #else
 		else if (PF_AZERO(&src->addr, AF_INET6) &&
  #endif
 #else
 		if (PF_AZERO(&src->addr, AF_INET6) &&
 #endif
-		    PF_AZERO(&src->mask, AF_INET6))
+		    PF_AZERO(&src->addr.v.a.mask, AF_INET6))
d7 2
a8 1
 			if (src->not)
d10 4
a13 27
 #if OS_LEVEL > 31
-			tb_print_addrw(&src->addr, &src->mask, af);
+			tb_print_addrw(&src->addr, &src->addr.v.a.mask, af);
 #else
-			tb_print_addr(&src->addr, &src->mask, af);
+			tb_print_addr(&src->addr, &src->addr.v.a.mask, af);
 #endif
 			tbprintf(" ");
 		}
@@@@ -1475,25 +1477,25 @@@@
 
 		tbprintf("to ");
 #if OS_LEVEL > 30
-		if (dst->noroute)
+		if (dst->addr.type == PF_ADDR_NOROUTE)
 			tbprintf("no-route ");
  #if OS_LEVEL > 31
-		else if (PF_AZERO(&dst->addr.addr, AF_INET6) &&
+		else if (PF_AZERO(&dst->addr.v.a.addr, AF_INET6) &&
  #else
 		else if (PF_AZERO(&dst->addr, AF_INET6) &&
  #endif
 #else
 		if (PF_AZERO(&dst->addr, AF_INET6) &&
 #endif
-		    PF_AZERO(&dst->mask, AF_INET6))
+		    PF_AZERO(&dst->addr.v.a.mask, AF_INET6))
d16 2
a17 1
 			if (dst->not)
d19 2
a20 9
 #if OS_LEVEL > 31
-			tb_print_addrw(&dst->addr, &dst->mask, af);
+			tb_print_addrw(&dst->addr, &dst->addr.v.a.mask, af);
 #else
-			tb_print_addr(&dst->addr, &dst->mask, af);
+			tb_print_addr(&dst->addr, &dst->addr.v.a.mask, af);
 #endif
 			tbprintf(" ");
 		}
@


1.4
log
@missing memset(), could lead to DIOCGETRULES error in rules view.
@
text
@@


1.3
log
@adjust to latest api changes
@
text
@d1 11
a11 3
--- pftop.c.orig	Thu Jan  9 23:01:15 2003
+++ pftop.c	Thu Jan  9 23:01:20 2003
@@@@ -1382,10 +1382,10 @@@@
d25 1
a25 1
@@@@ -1433,39 +1433,40 @@@@
d76 1
a76 1
@@@@ -1476,25 +1477,25 @@@@
@


1.2
log
@sync patch
@
text
@d1 28
a28 3
--- pftop.c.orig	Tue Sep 10 12:58:15 2002
+++ pftop.c	Wed Jan  1 23:21:59 2003
@@@@ -1439,8 +1439,8 @@@@ tb_print_fromto(struct pf_rule_addr *src
d34 2
a35 2
+	    PF_AZERO(&src->addr.mask, AF_INET6) &&
+	    PF_AZERO(&dst->addr.mask, AF_INET6) &&
d39 11
a49 1
@@@@ -1456,15 +1456,15 @@@@ tb_print_fromto(struct pf_rule_addr *src
d54 1
a54 1
+		    PF_AZERO(&src->addr.mask, AF_INET6))
d61 1
a61 1
+			tb_print_addrw(&src->addr, &src->addr.mask, af);
d64 1
a64 1
+			tb_print_addr(&src->addr, &src->addr.mask, af);
d68 13
a80 1
@@@@ -1485,15 +1485,15 @@@@ tb_print_fromto(struct pf_rule_addr *src
d85 1
a85 1
+		    PF_AZERO(&dst->addr.mask, AF_INET6))
d92 1
a92 1
+			tb_print_addrw(&dst->addr, &dst->addr.mask, af);
d95 1
a95 1
+			tb_print_addr(&dst->addr, &dst->addr.mask, af);
@


1.1
log
@Patches from author/maintainer to make it work with -current.
@
text
@d1 3
a3 3
--- pftop.c.orig	Tue Sep 10 20:58:15 2002
+++ pftop.c	Mon Nov 25 16:03:29 2002
@@@@ -1439,8 +1439,8 @@@@
d14 1
a14 1
@@@@ -1456,15 +1456,15 @@@@
d33 1
a33 1
@@@@ -1485,15 +1485,15 @@@@
@

