head	1.4;
access;
symbols
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2008.01.30.20.55.59;	author mbalmer;	state dead;
branches;
next	1.3;

1.3
date	2007.05.18.12.22.46;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.03.17.32.09;	author henning;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.27.19.46.24;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to nut ver. 2.2.1.

requested by and ok henning
@
text
@$OpenBSD: patch-drivers_fentonups_c,v 1.3 2007/05/18 12:22:46 henning Exp $
--- drivers/fentonups.c.orig	Tue Dec 19 04:18:58 2006
+++ drivers/fentonups.c	Fri May 18 13:54:23 2007
@@@@ -34,14 +34,17 @@@@ static	float	lowvolt = 0, voltrange, chrglow = 0, chrg
 static	int	lownorm, highnorm;
 
 /* handle devices which don't give a properly formatted I string */
-static int check_mtab2(const char *raw)
+static int check_mtab2(const char *raw, int israw)
 {
 	int	i;
 	char	*cooked;
 
-	/* trim off the leading # and any trailing spaces */
-	cooked = xstrdup(&raw[1]);
-	rtrim(cooked, ' ');
+	if (israw) {
+		/* trim off the leading # and any trailing spaces */
+		cooked = xstrdup(&raw[1]);
+		rtrim(cooked, ' ');
+	} else
+		cooked = xstrdup(raw);
 
 	for (i = 0; mtab2[i].id != NULL; i++) {
 		if (!strcmp(cooked, mtab2[i].id)) {
@@@@ -77,7 +80,7 @@@@ static void guessmodel(const char *raw)
 	char	mch, *mstr;
 
 	/* first see if it's in the mtab2 */
-	if (check_mtab2(raw))
+	if (check_mtab2(raw, 1))
 		return;
 
 	mch = raw[17];
@@@@ -179,28 +182,36 @@@@ static char *get_id(void)
 void upsdrv_initinfo(void)
 {
 	int	modelnum, i, ret;
-	char	temp[256], model[32], *raw;
+	char	temp[256], qmodel[32], *model, *raw = NULL;
 
-	raw = get_id();
+	model = getval("model");
 
-	if (!raw)
-		fatalx("Unable to detect a Fenton or Megatec protocol UPS");
+	if (!model) {
+		raw = get_id();
 
-	snprintf(temp, sizeof(temp), "%s", raw);
+		if (!raw)
+			fatalx("Unable to detect a Fenton or Megatec protocol UPS");
 
-	temp[11] = 0;
-	temp[27] = 0;
+		snprintf(temp, sizeof(temp), "%s", raw);
 
-	/* manufacturer */
-	rtrim(&temp[1], ' ');
-	dstate_setinfo("ups.mfr", "%s", &temp[1]);
+		temp[11] = 0;
+		temp[27] = 0;
 
-	/* L660A = PowerPal (L) @@ 660 VA, American (A) version (115V) */
+		/* manufacturer */
+		rtrim(&temp[1], ' ');
+		dstate_setinfo("ups.mfr", "%s", &temp[1]);
 
-	/* grab full model string */
-	rtrim(&temp[17], ' ');
-	snprintf(model, sizeof(model), "%s", &temp[17]);
+		/* L660A = PowerPal (L) @@ 660 VA, American (A) version (115V) */
 
+		/* grab full model string */
+		rtrim(&temp[17], ' ');
+		snprintf(qmodel, sizeof(qmodel), "%s", &temp[17]);
+		model = qmodel;
+	}
+
+	if (!model)
+		fatalx("unable to determine model");
+
 	modelnum = -1;
 
 	/* figure out official model name and voltage info from table */
@@@@ -216,20 +227,27 @@@@ void upsdrv_initinfo(void)
 		}
 	}
 
-	/* table lookup fails -> guess */
-	if (modelnum == -1)
-		guessmodel(raw);
-	else {
-		dstate_setinfo("ups.model", "%s", modeltab[modelnum].desc);
+	if (model && modelnum == -1)
+		if (check_mtab2(model, 0) == 0)
+			fatalx("no such model: %s", model);
 
-		dstate_setinfo("input.transfer.low", "%d", 
-			modeltab[modelnum].lowxfer);
+	if (raw) {
+		/* table lookup fails -> guess */
+		if (modelnum == -1)
+			guessmodel(raw);
+		else {
+			dstate_setinfo("ups.model", "%s",
+				modeltab[modelnum].desc);
 
-		dstate_setinfo("input.transfer.high", "%d",
-			modeltab[modelnum].highxfer);
+			dstate_setinfo("input.transfer.low", "%d", 
+				modeltab[modelnum].lowxfer);
 
-		lownorm = modeltab[modelnum].lownorm;
-		highnorm = modeltab[modelnum].highnorm;
+			dstate_setinfo("input.transfer.high", "%d",
+				modeltab[modelnum].highxfer);
+
+			lownorm = modeltab[modelnum].lownorm;
+			highnorm = modeltab[modelnum].highnorm;
+		}
 	}
 
 	/* now add instant command support info */
@@@@ -237,7 +255,8 @@@@ void upsdrv_initinfo(void)
 	dstate_addcmd("test.battery.stop");
 
 	printf("Detected %s on %s\n", dstate_getinfo("ups.model"), device_path);
-	free(raw);
+	if (raw)
+		free(raw);
 
 	/* paranoia - cancel any shutdown that might already be running */
 	ret = ser_send(upsfd, "C\r");
@@@@ -426,6 +445,7 @@@@ void upsdrv_help(void)
 void upsdrv_makevartable(void)
 {
 	addvar(VAR_VALUE, "lowbattvolt", "Set low battery level, in volts");
+	addvar(VAR_VALUE, "model", "force model");
 }
 
 void upsdrv_banner(void)
@


1.3
log
@update to 2.0.5 + a fix to make bcmxcp work correctly again
partially from and ok mbalmer
@
text
@d1 1
a1 1
$OpenBSD: patch-drivers_fentonups_c,v 1.2 2006/05/03 17:32:09 henning Exp $
@


1.2
log
@update to nut-2.0.3, last not leas bringing many format string fixes
preserve my changes to the fentonups driver, allowing the detection logic
to be bypassed and a model to be forced - for UPSes that do implement the
protocol except the identification command, which seems to be somewhat common
the Xanto S3000R thing here behaves like that, and support for it is added
ok mbalmer
@
text
@d1 4
a4 4
$OpenBSD: patch-drivers_fentonups_c,v 1.1 2006/04/27 19:46:24 mbalmer Exp $
--- drivers/fentonups.c.orig	Thu May 26 14:22:27 2005
+++ drivers/fentonups.c	Mon May  1 18:16:55 2006
@@@@ -34,14 +34,17 @@@@ static	float	lowvolt = 0, voltrange, chr
@


1.1
log
@Suport an additional device.

from henning
@
text
@d1 4
a4 4
$OpenBSD$
--- drivers/fentonups.c.orig	Tue Apr 25 23:33:03 2006
+++ drivers/fentonups.c	Wed Apr 26 00:11:06 2006
@@@@ -33,14 +33,17 @@@@ static	float	lowvolt = 0, voltrange;
d26 1
a26 1
@@@@ -74,7 +77,7 @@@@ static void guessmodel(const char *raw)
d35 1
a35 1
@@@@ -175,28 +178,36 @@@@ static char *get_id(void)
d60 1
a60 1
-	dstate_setinfo("ups.mfr", &temp[1], 0, 0);
d67 1
a67 1
+		dstate_setinfo("ups.mfr", &temp[1], 0, 0);
d86 1
a86 1
@@@@ -210,20 +221,27 @@@@ void upsdrv_initinfo(void)
d125 1
a125 1
@@@@ -231,7 +249,8 @@@@ void upsdrv_initinfo(void)
d135 1
a135 2
@@@@ -406,6 +425,7 @@@@ void upsdrv_help(void)
 
d138 1
@

