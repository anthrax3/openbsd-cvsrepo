head	1.5;
access;
symbols
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2015.10.14.18.21.31;	author ajacoutot;	state dead;
branches;
next	1.4;
commitid	v7Tm5rX1XyEyGp8x;

1.4
date	2015.09.26.09.13.26;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	rCk42OBE8U10BA7t;

1.3
date	2015.09.11.07.19.12;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	HJShILPjWADOH5WP;

1.2
date	2015.06.05.15.25.07;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	IjBP2Av1WT4h8cZQ;

1.1
date	2015.06.05.10.39.25;	author ajacoutot;	state Exp;
branches;
next	;
commitid	RNJ6ulyYolP4AEEB;


desc
@@


1.5
log
@Update to salt-2015.8.1.
@
text
@$OpenBSD: patch-salt_utils___init___py,v 1.4 2015/09/26 09:13:26 ajacoutot Exp $

From e697326f1b66ad032cc1febb86bf4b83b5630b6a Mon Sep 17 00:00:00 2001
From: "C. R. Oldham" <cro@@ncbt.org>
Date: Fri, 11 Sep 2015 09:30:42 -0600
Subject: [PATCH] Don't check for proxy in the individual
 is_linux/is_windows/etc functions.  This breaks too many things.

--- salt/utils/__init__.py.orig	Wed Sep  9 19:00:15 2015
+++ salt/utils/__init__.py	Sat Sep 26 11:11:05 2015
@@@@ -1532,20 +1532,7 @@@@ def is_windows():
     '''
     Simple function to return if a host is Windows or not
     '''
-    import __main__ as main
-    # This is a hack.  If a proxy minion is started by other
-    # means, e.g. a custom script that creates the minion objects
-    # then this will fail.
-    is_proxy = False
-    try:
-        if 'salt-proxy' in main.__file__:
-            is_proxy = True
-    except AttributeError:
-        pass
-    if is_proxy:
-        return False
-    else:
-        return sys.platform.startswith('win')
+    return sys.platform.startswith('win')
 
 
 def sanitize_win_path_string(winpath):
@@@@ -1571,15 +1558,6 @@@@ def is_proxy():
     TODO: Need to extend this for proxies that might run on
     other Unices
     '''
-    return not (is_linux() or is_sunos() or is_windows())
-
-
-@@real_memoize
-def is_linux():
-    '''
-    Simple function to return if a host is Linux or not.
-    Note for a proxy minion, we need to return something else
-    '''
     import __main__ as main
     # This is a hack.  If a proxy minion is started by other
     # means, e.g. a custom script that creates the minion objects
@@@@ -1590,13 +1568,19 @@@@ def is_linux():
             is_proxy = True
     except AttributeError:
         pass
-    if is_proxy:
-        return False
-    else:
-        return sys.platform.startswith('linux')
+    return is_proxy
 
 
 @@real_memoize
+def is_linux():
+    '''
+    Simple function to return if a host is Linux or not.
+    Note for a proxy minion, we need to return something else
+    '''
+    return sys.platform.startswith('linux')
+
+
+@@real_memoize
 def is_darwin():
     '''
     Simple function to return if a host is Darwin (OS X) or not
@@@@ -1609,20 +1593,7 @@@@ def is_sunos():
     '''
     Simple function to return if host is SunOS or not
     '''
-    import __main__ as main
-    # This is a hack.  If a proxy minion is started by other
-    # means, e.g. a custom script that creates the minion objects
-    # then this will fail.
-    is_proxy = False
-    try:
-        if 'salt-proxy' in main.__file__:
-            is_proxy = True
-    except AttributeError:
-        pass
-    if is_proxy:
-        return False
-    else:
-        return sys.platform.startswith('sunos')
+    return sys.platform.startswith('sunos')
 
 
 @@real_memoize
@


1.4
log
@Don't check for proxy in the individual is_linux/is_windows/etc functions.
This breaks too many things. -- from upstream

bogus output reported by viq, thanks!
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update to salt-2015.8.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-salt_utils___init___py,v 1.2 2015/06/05 15:25:07 ajacoutot Exp $
d3 5
a7 1
https://github.com/saltstack/salt/commit/aacf1ebf085721267631a3dfc3bf385a30c60736
d9 49
a57 4
--- salt/utils/__init__.py.orig	Fri Jun  5 12:23:27 2015
+++ salt/utils/__init__.py	Fri Jun  5 12:23:42 2015
@@@@ -1395,6 +1395,14 @@@@ def is_freebsd():
     return sys.platform.startswith('freebsd')
d60 2
a61 2
+@@real_memoize
+def is_openbsd():
d63 2
a64 1
+    Simple function to return if host is OpenBSD or not
d66 1
a66 1
+    return sys.platform.startswith('openbsd')
d69 7
a75 1
 def is_fcntl_available(check_sunos=False):
d77 18
a94 1
     Simple function to check if the `fcntl` module is available or not.
@


1.2
log
@Merged upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-salt_utils___init___py,v 1.1 2015/06/05 10:39:25 ajacoutot Exp $
@


1.1
log
@Add _openbsd_remotes_on(). That's an helper function that allows us to
get rid of the lsof(8) dependency.
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
https://github.com/saltstack/salt/pull/24442
@

