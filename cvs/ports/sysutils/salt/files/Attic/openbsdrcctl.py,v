head	1.10;
access;
symbols
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9;
locks; strict;
comment	@# @;


1.10
date	2015.05.07.09.15.55;	author ajacoutot;	state dead;
branches;
next	1.9;
commitid	SwUliQR8dTPaJwzy;

1.9
date	2015.01.06.17.45.51;	author ajacoutot;	state Exp;
branches;
next	1.8;
commitid	qORZ4AgCNbpTKVFC;

1.8
date	2015.01.06.15.27.24;	author ajacoutot;	state Exp;
branches;
next	1.7;
commitid	ST2Au8uwJcxgxyLk;

1.7
date	2015.01.06.15.16.33;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	z64EeOG9aBizk2e2;

1.6
date	2014.10.12.08.56.35;	author ajacoutot;	state Exp;
branches;
next	1.5;
commitid	Et8qHp1jelVaPaO6;

1.5
date	2014.09.05.08.27.20;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	2Bap5wlCrTQzi9JB;

1.4
date	2014.08.30.21.42.31;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	y1G0JDabI5Qvg4lX;

1.3
date	2014.08.25.13.30.32;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	Nqv2yUAHH57l4ifc;

1.2
date	2014.08.22.14.30.08;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	JNOXczfBMV23Txod;

1.1
date	2014.08.22.12.22.09;	author ajacoutot;	state Exp;
branches;
next	;
commitid	btbfFXYkD9avNmQx;


desc
@@


1.10
log
@Update to salt-2015.5.0.
@
text
@# -*- coding: utf-8 -*-
'''
The rcctl service module for OpenBSD
'''

# Import python libs
import os
import re

# Import salt libs
import salt.utils
import salt.utils.decorators as decorators
from salt.exceptions import CommandNotFoundError

__func_alias__ = {
    'reload_': 'reload'
}

# Define the module's virtual name
__virtualname__ = 'service'


def __virtual__():
    '''
    rcctl(8) is only available on OpenBSD.
    '''
    if __grains__['os'] == 'OpenBSD' and os.path.exists('/usr/sbin/rcctl'):
        return __virtualname__
    return False


@@decorators.memoize
def _cmd():
    '''
    Return the full path to the rcctl(8) command.
    '''
    rcctl = salt.utils.which('rcctl')
    if not rcctl:
        raise CommandNotFoundError
    return rcctl


def _get_flags(**kwargs):
    '''
    Return the configured service flags.
    '''
    flags = kwargs.get('flags',
                       __salt__['config.option']('service.flags',
                       default=''))
    return flags


def available(name):
    '''
    Return True if the named service is available.

    CLI Example:

    .. code-block:: bash

        salt '*' service.available sshd
    '''
    cmd = '{0} get {1}'.format(_cmd(), name)
    if __salt__['cmd.retcode'](cmd) == 2:
        return False
    return True


def missing(name):
    '''
    The inverse of service.available.
    Return True if the named service is not available.

    CLI Example:

    .. code-block:: bash

        salt '*' service.missing sshd
    '''
    return not available(name)


def get_all():
    '''
    Return all installed services.

    CLI Example:

    .. code-block:: bash

        salt '*' service.get_all
    '''
    badvar = ("_timeout", "_user")
    ret = []
    service = _cmd()
    for svc in __salt__['cmd.run']('{0} getall'.format(service)).splitlines():
        svc = re.sub('(_flags|)=.*$', '', svc)
        if not svc.endswith(badvar):
            ret.append(svc)
    return sorted(ret)


def get_disabled():
    '''
    Return what services are available but not enabled to start at boot.

    CLI Example:

    .. code-block:: bash

        salt '*' service.get_disabled
    '''
    badvar = ("_timeout", "_user")
    ret = []
    service = _cmd()
    for svc in __salt__['cmd.run']('{0} getall'.format(service)).splitlines():
        if svc.endswith("=NO"):
            svc = re.sub('(_flags|)=.*$', '', svc)
            if not svc.endswith(badvar):
                ret.append(svc)
    return sorted(ret)


def get_enabled():
    '''
    Return what services are set to run on boot.

    CLI Example:

    .. code-block:: bash

        salt '*' service.get_enabled
    '''
    badvar = ("_timeout", "_user")
    ret = []
    service = _cmd()
    for svc in __salt__['cmd.run']('{0} getall'.format(service)).splitlines():
        if not svc.endswith("=NO"):
            svc = re.sub('(_flags|)=.*$', '', svc)
            if not svc.endswith(badvar):
                ret.append(svc)
    return sorted(ret)


def start(name):
    '''
    Start the named service.

    CLI Example:

    .. code-block:: bash

        salt '*' service.start <service name>
    '''
    cmd = '{0} -f start {1}'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd)


def stop(name):
    '''
    Stop the named service.

    CLI Example:

    .. code-block:: bash

        salt '*' service.stop <service name>
    '''
    cmd = '{0} stop {1}'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd)


def restart(name):
    '''
    Restart the named service.

    CLI Example:

    .. code-block:: bash

        salt '*' service.restart <service name>
    '''
    cmd = '{0} -f restart {1}'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd)


def reload_(name):
    '''
    Reload the named service.

    CLI Example:

    .. code-block:: bash

        salt '*' service.reload <service name>
    '''
    cmd = '{0} reload {1}'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd)


def status(name, sig=None):
    '''
    Return the status for a service, returns a bool whether the service is
    running.

    CLI Example:

    .. code-block:: bash

        salt '*' service.status <service name>
    '''
    if sig:
        return bool(__salt__['status.pid'](sig))

    cmd = '{0} check {1}'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd)


def enable(name, **kwargs):
    '''
    Enable the named service to start at boot.

    flags : None
        Set optional flags to run the service with.

    service.flags can be used to change the default flags.

    CLI Example:

    .. code-block:: bash

        salt '*' service.enable <service name>
        salt '*' service.enable <service name> flags=<flags>
    '''
    cmd = '{0} set {1} status on'.format(_cmd(), name)
    # only (re)set flags for services that have an rc.d(8) script
    if os.path.exists('/etc/rc.d/{0}'.format(name)):
        flags = _get_flags(**kwargs)
        cmd = cmd + ' && {0} set {1} flags {2}'.format(_cmd(), name, flags)

    return not __salt__['cmd.retcode'](cmd)


def disable(name, **kwargs):
    '''
    Disable the named service to not start at boot.

    CLI Example:

    .. code-block:: bash

        salt '*' service.disable <service name>
    '''
    cmd = '{0} set {1} status off'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd)


def disabled(name):
    '''
    Return True if the named service is disabled at boot, False otherwise.

    CLI Example:

    .. code-block:: bash

        salt '*' service.disabled <service name>
    '''
    cmd = '{0} get {1} status'.format(_cmd(), name)
    return not __salt__['cmd.retcode'](cmd) == 0


def enabled(name, **kwargs):
    '''
    Return True if the named service is enabled at boot and the provided
    flags match the configured ones (if any). Return False otherwise.

    name
        Service name

    CLI Example:

    .. code-block:: bash

        salt '*' service.enabled <service name>
        salt '*' service.enabled <service name> flags=<flags>
    '''
    cmd = '{0} get {1} status'.format(_cmd(), name)
    if not __salt__['cmd.retcode'](cmd):
        # also consider a service disabled if the current flags are different
        # than the configured ones so we have a chance to update them
        flags = _get_flags(**kwargs)
        cur_flags = __salt__['cmd.run_stdout']('{0} get {1} flags'.format(_cmd(), name))
        if format(flags) == format(cur_flags):
            return True
        if not flags:
            def_flags = __salt__['cmd.run_stdout']('{0} getdef {1} flags'.format(_cmd(), name))
            if format(cur_flags) == format(def_flags):
                return True

    return False
@


1.9
log
@Turn badvar into a real tuple.
@
text
@@


1.8
log
@Drop useless line continuation character.
@
text
@d93 1
a93 1
    badvar = [ "_timeout", "_user" ]
d98 1
a98 1
        if not svc.endswith(tuple(badvar)):
d113 1
a113 1
    badvar = [ "_timeout", "_user" ]
d119 1
a119 1
            if not svc.endswith(tuple(badvar)):
d134 1
a134 1
    badvar = [ "_timeout", "_user" ]
d140 1
a140 1
            if not svc.endswith(tuple(badvar)):
@


1.7
log
@Use new rcctl(8) syntax.
@
text
@d47 2
a48 2
    flags = kwargs.get('flags', \
                       __salt__['config.option']('service.flags', \
@


1.6
log
@Some services can have hardcoded default flags which is equivalent to
setting empty flags; so make sure we compare our current flags with the
default ones and return True when they match.
@
text
@d63 1
a63 1
    cmd = '{0} status {1}'.format(_cmd(), name)
d93 1
d96 1
a96 1
    for svc in __salt__['cmd.run']('{0} status'.format(service)).splitlines():
d98 2
a99 1
        ret.append(svc)
d113 1
d116 1
a116 1
    for svc in __salt__['cmd.run']('{0} status'.format(service)).splitlines():
d119 2
a120 1
            ret.append(svc)
d134 1
d137 1
a137 1
    for svc in __salt__['cmd.run']('{0} status'.format(service)).splitlines():
d140 2
a141 1
            ret.append(svc)
d235 6
a240 2
    flags = _get_flags(**kwargs)
    cmd = '{0} enable {1} flags {2}'.format(_cmd(), name, flags)
d254 1
a254 1
    cmd = '{0} disable {1}'.format(_cmd(), name)
d268 1
a268 1
    cmd = '{0} status {1}'.format(_cmd(), name)
d287 1
a287 1
    cmd = '{0} status {1}'.format(_cmd(), name)
d292 1
a292 1
        cur_flags = __salt__['cmd.run_stdout']('{0} status {1}'.format(_cmd(), name))
d296 1
a296 1
            def_flags = __salt__['cmd.run_stdout']('{0} default {1}'.format(_cmd(), name))
@


1.5
log
@Fix tests to properly recognize OpenBSD.

openbsdrcctl: extend enabled() to check flags
On OpenBSD, it's possible to define particular flags a daemon should be
enabled with. To make sure the flags are properly updated when changed
(in pillars or states), we return a service as "disabled" if the
currently configured flags do not match the provided ones; this ensures
/etc/rc.conf.local is always in sync.

All patches merged upstream.
@
text
@d285 4
@


1.4
log
@Huge improvement to the rcctl service module.
@
text
@d43 10
d229 2
a230 9
    flags = kwargs.get('flags', \
                       __salt__['config.option']('service.flags', \
                       default=''))

    if not flags:
        cmd = '{0} enable {1}'.format(_cmd(), name)
    else:
        cmd = '{0} enable {1} flags {2}'.format(_cmd(), name, flags)

d262 1
a262 1
def enabled(name):
d264 2
a265 1
    Return True if the named service is enabled at boot, False otherwise.
d275 1
d278 9
a286 1
    return not __salt__['cmd.retcode'](cmd)
@


1.3
log
@Fix pylint issues.
@
text
@d53 4
a56 1
    return name in get_all()
d70 1
a70 1
    return name not in get_all()
@


1.2
log
@Implement enabled/disabled.
@
text
@a7 1
import glob
d28 1
a28 1
            return __virtualname__
d136 1
a136 1
    cmd = '/etc/rc.d/{0} -f start'.format(name)
d164 1
a164 1
    cmd = '/etc/rc.d/{0} -f restart'.format(name)
d195 1
d216 3
a218 4
    if not available(name):
        return False

    flags = kwargs.get('flags', __salt__['config.option']('service.flags', default=''))
d241 2
a242 1
def enabled(name):
d244 1
a244 4
    Return True if the named service is enabled at boot, False otherwise.

    name
        Service name
d250 1
a250 1
        salt '*' service.enabled <service name>
d253 2
a254 1
    return not __salt__['cmd.retcode'](cmd)
d256 1
a256 1
def disabled(name):
d258 4
a261 1
    Return True if the named service is disabled at boot, False otherwise.
d267 1
a267 1
        salt '*' service.disabled <service name>
d270 1
a270 1
    return __salt__['cmd.retcode'](cmd) == 0
@


1.1
log
@Implement full service management using rcctl(8).
@
text
@d110 1
a110 1
    Return what services are set to run on boot
d137 1
a137 1
    cmd = '{0} start {1}'.format(_cmd(), name)
d165 1
a165 1
    cmd = '{0} restart {1}'.format(_cmd(), name)
d241 29
@

