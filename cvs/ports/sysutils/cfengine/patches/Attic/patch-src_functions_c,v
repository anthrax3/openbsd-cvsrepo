head	1.6;
access;
symbols
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2007.10.12.20.12.19;	author sturm;	state dead;
branches;
next	1.5;

1.5
date	2005.10.27.21.47.28;	author sturm;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.21.15.16.46;	author aanriot;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.01.21.22.15;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.08.14.02.11;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.17.11.21.43;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update to cfengine 2.2.1
simplify port drastically by removing str* patches, these might be
revived one day as an external patch

no objections from maintainer
@
text
@$OpenBSD: patch-src_functions_c,v 1.5 2005/10/27 21:47:28 sturm Exp $
--- src/functions.c.orig	Sat Aug 13 15:10:56 2005
+++ src/functions.c	Fri Oct 21 16:35:55 2005
@@@@ -247,13 +247,13 @@@@ switch (fn = FunctionStringToCode(name))
     {
     if (strcmp(value,CF_NOCLASS) == 0)
        {
-       strcpy(value,CF_ANYCLASS);
+       (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
        return value;
        }
     
     if (strcmp(value,CF_ANYCLASS) == 0)
        {
-       strcpy(value,CF_NOCLASS);
+       (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
        return value;
        }
     }
@@@@ -347,46 +347,46 @@@@ FunctionArgs(args,argv,1);
 
 if (lstat(args,&statbuf) == -1)
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    return;
    }
  else
     {
     if (fn == fn_fileexists)
        {
-       strcpy(value,CF_ANYCLASS);
+       (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
        return;
        }
     }
  
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
  
  switch(fn)
     {
     case fn_isdir:
         if (S_ISDIR(statbuf.st_mode))
            {
-           strcpy(value,CF_ANYCLASS);
+           (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
            return;
            }
         break;
     case fn_islink:
         if (S_ISLNK(statbuf.st_mode))
            {
-           strcpy(value,CF_ANYCLASS);
+           (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
            return;
            }
         break;
     case fn_isplain:
         if (S_ISREG(statbuf.st_mode))
            {
-           strcpy(value,CF_ANYCLASS);
+           (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
            return;
            }
         break;
     }
  
- strcpy(value,CF_NOCLASS);
+ (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@@@ -401,7 +401,7 @@@@ if (strchr(args,','))
    return;
    }
  
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 
 if (!FuzzyMatchParse(args))
    {
@@@@ -416,7 +416,7 @@@@ for (ip = IPADDRESSES; ip != NULL; ip = 
    if (FuzzySetMatch(args,ip->name) == 0)
       {
       Debug("IPRange Matched\n");
-      strcpy(value,CF_ANYCLASS);
+      (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
       return;
       }
    }
@@@@ -427,12 +427,12 @@@@ Debug("Checking IP Range against RDNS %s
 if (FuzzySetMatch(args,VIPADDRESS) == 0)
    {
    Debug("IPRange Matched\n");
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    return;
    }
 
 Debug("IPRange did not match\n");
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@@@ -445,7 +445,7 @@@@ Debug("SRDEBUG args=%s value=%s\n",args,
 
 if (!FuzzyHostParse(args))
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    return;
    }
 
@@@@ -455,12 +455,12 @@@@ if (!FuzzyHostParse(args))
 if (FuzzyHostMatch(args,VDEFAULTBINSERVER.name) == 0)
    {
    Debug("SRDEBUG SUCCESS!\n");
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    }
 else
    {
    Debug("SRDEBUG FAILURE\n");
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    }
  
 return;
@@@@ -474,7 +474,7 @@@@ void HandleCompareStat(enum builtin fn,c
   char argv[CF_MAXFARGS][CF_EXPANDSIZE];
 
 FunctionArgs(args,argv,2); 
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
  
 if (stat(argv[0],&frombuf) == -1)
    {
@@@@ -491,7 +491,7 @@@@ switch(fn)
    case fn_newerthan:
        if (frombuf.st_mtime < tobuf.st_mtime)
           {
-          strcpy(value,CF_ANYCLASS);
+          (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
           return;
           }
        break;
@@@@ -499,7 +499,7 @@@@ switch(fn)
    case fn_accessedbefore:
        if (frombuf.st_atime < tobuf.st_atime)
           {
-          strcpy(value,CF_ANYCLASS);
+          (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
           return;
           }
        break;
@@@@ -507,13 +507,13 @@@@ switch(fn)
    case fn_changedbefore:
        if (frombuf.st_ctime < tobuf.st_ctime)
           {
-          strcpy(value,CF_ANYCLASS);
+          (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
           return;
           }       
        break;
    }
  
-strcpy(value,CF_NOCLASS);
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
 }
 
 
@@@@ -560,7 +560,7 @@@@ if (*args == '/')
    
    if (ShellCommandReturnsZero(command))
       {
-      strcpy(value,CF_ANYCLASS);
+      (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
       return;
       }
    }
@@@@ -569,7 +569,7 @@@@ if (*args == '/')
     yyerror("ExecResult(/command) must specify an absolute path");
     }
  
- strcpy(value,CF_NOCLASS); 
+ (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE); 
 }
 
 
@@@@ -587,11 +587,11 @@@@ Debug("HandleIsDefined(%s)\n",args); 
  
 if (GetMacroValue(CONTEXTID,args))
    {
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    return;
    }
 
-strcpy(value,CF_NOCLASS); 
+(void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE); 
 }
 
 /*********************************************************************/
@@@@ -607,7 +607,7 @@@@ value[0] = '\0';
 
 if (PARSING)
    {
-   strcpy(value,"doinstall");
+   (void)strlcpy(value,"doinstall",CF_EXPANDSIZE);
    return;
    }
  
@@@@ -661,11 +661,11 @@@@ FunctionArgs(args,argv,2); 
  
 if (strcmp(argv[0],argv[1]) == 0)
    {
-   strcpy(value,CF_ANYCLASS); 
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE); 
    }
 else
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    } 
 }
 
@@@@ -689,11 +689,11 @@@@ if ((a != CF_NOVAL) && (b != CF_NOVAL)) 
       {
       if (a > b)
          {
-         strcpy(value,CF_ANYCLASS);
+         (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
          }
       else
          {
-         strcpy(value,CF_NOCLASS);
+         (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
          }
       return;
       }
@@@@ -701,11 +701,11 @@@@ if ((a != CF_NOVAL) && (b != CF_NOVAL)) 
       {
       if (a < b)  
          {
-         strcpy(value,CF_ANYCLASS);
+         (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
          }
       else
          {
-         strcpy(value,CF_NOCLASS);
+         (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
          }
       return;
       }
@@@@ -717,22 +717,22 @@@@ if (strcmp(argv[0],argv[1]) > 0)
    {
    if (ch == '+')
       {
-      strcpy(value,CF_ANYCLASS);
+      (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
       }
    else
       {
-      strcpy(value,CF_NOCLASS);
+      (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
       }
    }
 else
    {
    if (ch == '+')
       {
-      strcpy(value,CF_NOCLASS);
+      (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
       }
    else
       {
-      strcpy(value,CF_ANYCLASS);
+      (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
       }
    } 
 }
@@@@ -760,11 +760,11 @@@@ ret = LocateNextItemMatching(list,argv[0
      
 if (ret != NULL)
    {
-   strcpy(value,CF_ANYCLASS); 
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE); 
    }
 else
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    }
  
 DeleteItemList(list); 
@@@@ -1169,7 +1169,7 @@@@ first[0] = '\0';
  
 if (psize < 2)
    {
-   strcpy(value,"silly");
+   (void)strlcpy(value,"silly",CF_EXPANDSIZE);
    CfLog(cferror,"Partitioning of size < 2 is silly","");
    return;
    }
@@@@ -1178,7 +1178,7 @@@@ Verbose("Searching for my peer group in 
 
 if (!((strcmp("random",policy) == 0) || (strcmp("first",policy) == 0)))
    {
-   strcpy(value,"silly");
+   (void)strlcpy(value,"silly",CF_EXPANDSIZE);
    CfLog(cferror,"Partition leader policy is first/random only","");
    return;
    }
@@@@ -1333,7 +1333,7 @@@@ value[0] = '\0'; 
  
 if (psize < 2)
    {
-   strcpy(value,"silly");
+   (void)strlcpy(value,"silly",CF_EXPANDSIZE);
    CfLog(cferror,"Partitioning of size < 2 is silly","");
    return;
    }
@@@@ -1342,7 +1342,7 @@@@ Verbose("Searching for my peer group nei
 
 if (!(strcmp("random",policy) == 0 || strcmp("first",policy) == 0))
    {
-   strcpy(value,"silly");
+   (void)strlcpy(value,"silly",CF_EXPANDSIZE);
    CfLog(cferror,"Partition leader policy is first/random only","");
    return;
    }
@@@@ -1465,7 +1465,7 @@@@ for (ip = SplitStringAsItemList(args,','
    AppendItem(&METHODRETURNVARS,ip->name,CLASSBUFF);
    }
  
-strcpy(value,"noinstall");
+(void)strlcpy(value,"noinstall",CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@@@ -1481,7 +1481,7 @@@@ for (ip = SplitStringAsItemList(args,','
    AppendItem(&METHODRETURNCLASSES,args,CLASSBUFF);
    }
 
-strcpy(value,"noinstall");
+(void)strlcpy(value,"noinstall",CF_EXPANDSIZE);
 }
 
 /*********************************************************************/
@@@@ -1507,7 +1507,7 @@@@ Debug("ShowState(%s)\n",args); 
 
 if (PARSING)
    {
-   strcpy(value,"doinstall");
+   (void)strlcpy(value,"doinstall",CF_EXPANDSIZE);
    return;
    }
  
@@@@ -1693,12 +1693,12 @@@@ if (stat(buffer,&statbuf) == 0)
    
    printf("%s: -----------------------------------------------------------------------------------\n",VPREFIX);
    snprintf(buffer,CF_BUFSIZE,"State of %s peaked at %s\n",args,ctime(&statbuf.st_mtime));
-   strcpy(value,buffer);
+   (void)strlcpy(value,buffer,CF_EXPANDSIZE);
    }
 else 
    {
    snprintf(buffer,CF_BUFSIZE,"State parameter %s is not known or recorded\n",args);   
-   strcpy(value,buffer);
+   (void)strlcpy(value,buffer,CF_EXPANDSIZE);
    }
 
 DeleteItemList(addresses); 
@@@@ -1725,7 +1725,7 @@@@ FunctionArgs(args,argv,1);
 
 if (PARSING)
    {
-   strcpy(value,"doinstall");
+   (void)strlcpy(value,"doinstall",CF_EXPANDSIZE);
    return;
    }
 
@@@@ -1736,7 +1736,7 @@@@ if (time >= 0)
    CheckFriendConnections(time);
    }
  
-strcpy(value,""); /* No reply */
+(void)strlcpy(value,"",CF_EXPANDSIZE); /* No reply */
 }
 
 /*********************************************************************/
@@@@ -1810,11 +1810,11 @@@@ Debug("PrepModule(%s,%s)\n",argv[0],argv
  
 if (CheckForModule(argv[0],argv[1]))
    {
-   strcpy(value,CF_ANYCLASS);
+   (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
    }
 else
    {
-   strcpy(value,CF_NOCLASS);
+   (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
    }
 }
 
@


1.5
log
@update to 2.1.16, removing sbin/vicf which seems to have a security
problem but is not used anywhere and will probably be removed from
cfengine

from maintainer William Yodlowsky <bsd at openbsd.rutgers.edu>
@
text
@d1 1
a1 1
$OpenBSD: patch-src_functions_c,v 1.4 2005/07/21 15:16:46 aanriot Exp $
@


1.4
log
@update to 2.1.15, from William Yodlowsky (maintainer).

inputs and ok naddy@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_functions_c,v 1.3 2004/10/01 21:22:15 sturm Exp $
--- src/functions.c.orig	Sat Apr  9 11:02:50 2005
+++ src/functions.c	Fri Jul 15 12:24:01 2005
@@@@ -221,13 +221,13 @@@@ switch (fn = FunctionStringToCode(name))
d20 1
a20 1
@@@@ -321,46 +321,46 @@@@ FunctionArgs(args,argv,1);
d74 1
a74 1
@@@@ -375,7 +375,7 @@@@ if (strchr(args,','))
d83 1
a83 1
@@@@ -390,7 +390,7 @@@@ for (ip = IPADDRESSES; ip != NULL; ip = 
d92 1
a92 1
@@@@ -401,12 +401,12 @@@@ Debug("Checking IP Range against RDNS %s
d107 1
a107 1
@@@@ -419,7 +419,7 @@@@ Debug("SRDEBUG args=%s value=%s\n",args,
d115 2
a116 2
 /* VDEFAULTBINSERVER.name is relative domain name */
@@@@ -428,12 +428,12 @@@@ if (!FuzzyHostParse(args))
d131 2
a132 2
@@@@ -447,7 +447,7 @@@@ void HandleCompareStat(enum builtin fn,c
   char argv[CF_MAXFARGS][CF_MAXVARSIZE];
d140 1
a140 1
@@@@ -464,7 +464,7 @@@@ switch(fn)
d149 1
a149 1
@@@@ -472,7 +472,7 @@@@ switch(fn)
d158 1
a158 1
@@@@ -480,13 +480,13 @@@@ switch(fn)
d174 1
a174 1
@@@@ -533,7 +533,7 @@@@ if (*args == '/')
d183 1
a183 1
@@@@ -542,7 +542,7 @@@@ if (*args == '/')
d192 1
a192 1
@@@@ -560,11 +560,11 @@@@ Debug("HandleIsDefined(%s)\n",args); 
d206 1
a206 1
@@@@ -580,7 +580,7 @@@@ value[0] = '\0';
d215 1
a215 1
@@@@ -634,11 +634,11 @@@@ FunctionArgs(args,argv,2); 
d229 1
a229 1
@@@@ -662,11 +662,11 @@@@ if ((a != CF_NOVAL) && (b != CF_NOVAL)) 
d243 1
a243 1
@@@@ -674,11 +674,11 @@@@ if ((a != CF_NOVAL) && (b != CF_NOVAL)) 
d257 1
a257 1
@@@@ -690,22 +690,22 @@@@ if (strcmp(argv[0],argv[1]) > 0)
d284 1
a284 1
@@@@ -731,11 +731,11 @@@@ ret = LocateNextItemMatching(list,argv[0
d298 1
a298 1
@@@@ -1080,7 +1080,7 @@@@ first[0] = '\0';
d307 1
a307 1
@@@@ -1089,7 +1089,7 @@@@ Verbose("Searching for my peer group in 
d316 1
a316 1
@@@@ -1244,7 +1244,7 @@@@ value[0] = '\0'; 
d325 1
a325 1
@@@@ -1253,7 +1253,7 @@@@ Verbose("Searching for my peer group nei
d334 1
a334 1
@@@@ -1376,7 +1376,7 @@@@ for (ip = SplitStringAsItemList(args,','
d343 1
a343 1
@@@@ -1392,7 +1392,7 @@@@ for (ip = SplitStringAsItemList(args,','
d352 1
a352 1
@@@@ -1418,7 +1418,7 @@@@ Debug("ShowState(%s)\n",args); 
d361 1
a361 1
@@@@ -1604,12 +1604,12 @@@@ if (stat(buffer,&statbuf) == 0)
d376 1
a376 1
@@@@ -1636,7 +1636,7 @@@@ FunctionArgs(args,argv,1);
d385 1
a385 1
@@@@ -1647,7 +1647,7 @@@@ if (time >= 0)
d394 1
a394 1
@@@@ -1721,11 +1721,11 @@@@ Debug("PrepModule(%s,%s)\n",argv[0],argv
@


1.3
log
@unbreak and update to 2.1.10

from maintainer William Yodlowsky <bsd at openbsd.rutgers.edu>
@
text
@d1 4
a4 4
$OpenBSD$
--- src/functions.c.orig	Mon Aug 16 22:41:21 2004
+++ src/functions.c	Fri Oct  1 23:14:47 2004
@@@@ -215,13 +215,13 @@@@ case fn_syslog:
d20 1
a20 1
@@@@ -318,46 +318,46 @@@@ if (strchr(args,','))
d74 1
a74 1
@@@@ -372,7 +372,7 @@@@ if (strchr(args,','))
d83 1
a83 1
@@@@ -387,7 +387,7 @@@@ for (ip = IPADDRESSES; ip != NULL; ip = 
d92 1
a92 1
@@@@ -398,12 +398,12 @@@@ Debug("Checking IP Range against RDNS %s
d107 1
a107 1
@@@@ -416,7 +416,7 @@@@ Debug("SRDEBUG args=%s value=%s\n",args,
d116 1
a116 1
@@@@ -425,12 +425,12 @@@@ if (!FuzzyHostParse(args))
d131 1
a131 1
@@@@ -444,7 +444,7 @@@@ void HandleCompareStat(enum builtin fn,c
d140 1
a140 1
@@@@ -461,7 +461,7 @@@@ switch(fn)
d149 1
a149 1
@@@@ -469,7 +469,7 @@@@ switch(fn)
d158 1
a158 1
@@@@ -477,13 +477,13 @@@@ switch(fn)
d174 1
a174 1
@@@@ -530,7 +530,7 @@@@ if (*args == '/')
d183 1
a183 1
@@@@ -539,7 +539,7 @@@@ if (*args == '/')
d192 1
a192 1
@@@@ -557,11 +557,11 @@@@ Debug("HandleIsDefined(%s)\n",args); 
d206 1
a206 1
@@@@ -577,7 +577,7 @@@@ value[0] = '\0';
d215 1
a215 1
@@@@ -631,11 +631,11 @@@@ FunctionArgs(args,argv,2); 
d229 56
a284 1
@@@@ -660,11 +660,11 @@@@ ret = LocateNextItemMatching(list,argv[0
d298 1
a298 1
@@@@ -1009,7 +1009,7 @@@@ first[0] = '\0';
d307 1
a307 1
@@@@ -1018,7 +1018,7 @@@@ Verbose("Searching for my peer group in 
d316 1
a316 1
@@@@ -1173,7 +1173,7 @@@@ value[0] = '\0'; 
d325 1
a325 1
@@@@ -1182,7 +1182,7 @@@@ Verbose("Searching for my peer group nei
d334 2
a335 2
@@@@ -1305,7 +1305,7 @@@@ for (ip = SplitStringAsItemList(args,','
    AppendItem(&METHODRETURNVARS,args,CLASSBUFF);
d343 1
a343 1
@@@@ -1321,7 +1321,7 @@@@ for (ip = SplitStringAsItemList(args,','
d352 1
a352 1
@@@@ -1347,7 +1347,7 @@@@ Debug("ShowState(%s)\n",args); 
d361 1
a361 1
@@@@ -1532,12 +1532,12 @@@@ if (stat(buffer,&statbuf) == 0)
d376 1
a376 1
@@@@ -1564,7 +1564,7 @@@@ FunctionArgs(args,argv,1);
d385 1
a385 1
@@@@ -1575,7 +1575,7 @@@@ if (time >= 0)
d394 1
a394 1
@@@@ -1648,11 +1648,11 @@@@ Debug("PrepModule(%s,%s)\n",argv[0],argv
a407 9
@@@@ -1690,7 +1690,7 @@@@ if (strchr(args,','))
    return;
    }
 
-strcpy(arg1,UnQuote(args));
+(void)strlcpy(arg1,UnQuote(args),CF_BUFSIZE);
 }
 
 /*********************************************************************/
@


1.2
log
@update to cfengine 2.1.7p1

from maintainer William Yodlowsky <bsd at openbsd.rutgers.edu>
@
text
@d1 3
a3 3
$OpenBSD: patch-src_functions_c,v 1.1 2004/06/17 11:21:43 sturm Exp $
--- src/functions.c.orig	Sat May 29 03:10:58 2004
+++ src/functions.c	Mon Aug  2 15:44:54 2004
d20 1
a20 1
@@@@ -316,46 +316,46 @@@@ if (strchr(args,','))
d74 1
a74 1
@@@@ -370,7 +370,7 @@@@ if (strchr(args,','))
d83 10
a92 2
@@@@ -379,7 +379,7 @@@@ if (!FuzzyMatchParse(args))
 
d95 1
d98 1
d100 4
d106 2
a107 1
@@@@ -394,7 +394,7 @@@@ void HandleHostRange(char *args,char *va
d109 20
a128 20
  if (!FuzzyHostParse(args))
     {
-    strcpy(value,CF_NOCLASS);
+    (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
     return;
     }
  /* VDEFAULTBINSERVER.name is relative domain name */
@@@@ -403,12 +403,12 @@@@ void HandleHostRange(char *args,char *va
  if (FuzzyHostMatch(args,VDEFAULTBINSERVER.name) == 0)
     {
     Debug("SRDEBUG SUCCESS!\n");
-    strcpy(value,CF_ANYCLASS);
+    (void)strlcpy(value,CF_ANYCLASS,CF_EXPANDSIZE);
     }
  else
     {
     Debug("SRDEBUG FAILURE\n");
-    strcpy(value,CF_NOCLASS);
+    (void)strlcpy(value,CF_NOCLASS,CF_EXPANDSIZE);
     }
d130 3
a132 3
  return;
@@@@ -423,7 +423,7 @@@@ void HandleCompareStat(enum builtin fn,c
   int count = 0;
d140 1
a140 1
@@@@ -440,7 +440,7 @@@@ switch(fn)
d149 1
a149 1
@@@@ -448,7 +448,7 @@@@ switch(fn)
d158 1
a158 1
@@@@ -456,13 +456,13 @@@@ switch(fn)
d174 1
a174 1
@@@@ -509,7 +509,7 @@@@ if (*args == '/')
d183 1
a183 1
@@@@ -518,7 +518,7 @@@@ if (*args == '/')
d192 1
a192 1
@@@@ -536,11 +536,11 @@@@ Debug("HandleIsDefined(%s)\n",args); 
d206 1
a206 1
@@@@ -556,7 +556,7 @@@@ value[0] = '\0';
d215 1
a215 1
@@@@ -611,11 +611,11 @@@@ FunctionArgs(args,argv,2); 
d229 1
a229 1
@@@@ -641,11 +641,11 @@@@ ret = LocateNextItemMatching(list,argv[0
d243 1
a243 1
@@@@ -985,7 +985,7 @@@@ first[0] = '\0';
d248 1
a248 1
+   (void)strlcpy(value,"silly",CF_BUFSIZE);
d252 1
a252 1
@@@@ -994,7 +994,7 @@@@ Verbose("Searching for my peer group in 
d257 1
a257 1
+   (void)strlcpy(value,"silly",CF_BUFSIZE);
d261 1
a261 1
@@@@ -1149,7 +1149,7 @@@@ value[0] = '\0'; 
d266 1
a266 1
+   (void)strlcpy(value,"silly",CF_BUFSIZE);
d270 1
a270 1
@@@@ -1158,7 +1158,7 @@@@ Verbose("Searching for my peer group nei
d275 1
a275 1
+   (void)strlcpy(value,"silly",CF_BUFSIZE);
d279 4
a282 4
@@@@ -1286,7 +1286,7 @@@@ Verbose("This is a method with return va
     yyerror("Redefinition of method return values");
     }
 
d288 3
a290 1
@@@@ -1298,14 +1298,14 @@@@ Verbose("This is a method with return cl
d292 2
a293 12
  if (strlen(METHODRETURNCLASSES) == 0)
     {
-    strncpy(METHODRETURNCLASSES,args,CF_BUFSIZE-1);
+    strlcpy(METHODRETURNCLASSES,args,sizeof(METHODRETURNCLASSES));
     }
  else
     {
     yyerror("Redefinition of method return classes");
     }
 
- strcpy(value,"noinstall");
+ (void)strlcpy(value,"noinstall",CF_EXPANDSIZE);
d297 1
a297 1
@@@@ -1331,7 +1331,7 @@@@ Debug("ShowState(%s)\n",args); 
d306 1
a306 1
@@@@ -1516,12 +1516,12 @@@@ if (stat(buffer,&statbuf) == 0)
d321 1
a321 1
@@@@ -1548,7 +1548,7 @@@@ FunctionArgs(args,argv,1);
d330 1
a330 1
@@@@ -1559,7 +1559,7 @@@@ if (time >= 0)
d339 1
a339 1
@@@@ -1629,11 +1629,11 @@@@ Debug("PrepModule(%s,%s)\n",argv[0],argv
d353 1
a353 1
@@@@ -1671,7 +1671,7 @@@@ if (strchr(args,','))
@


1.1
log
@revive cfengine port

this is version 2.1.6, from and maintained by
William Yodlowsky <bsd at openbsd.rutgers.edu>
@
text
@d1 4
a4 4
$OpenBSD$
--- src/functions.c.orig	Sat May  1 15:36:52 2004
+++ src/functions.c	Thu Jun 17 12:54:39 2004
@@@@ -206,13 +206,13 @@@@ switch (fn = FunctionStringToCode(name))
d20 1
a20 1
@@@@ -307,7 +307,7 @@@@ if (strchr(args,','))
a28 1
@@@@ -314,12 +314,12 @@@@ if (lstat(args,&statbuf) == -1)
a42 1
@@@@ -326,7 +326,7 @@@@ strcpy(value,CF_NOCLASS);
a50 1
@@@@ -333,7 +333,7 @@@@ strcpy(value,CF_NOCLASS);
a58 1
@@@@ -340,13 +340,13 @@@@ strcpy(value,CF_NOCLASS);
d74 1
a74 1
@@@@ -361,7 +361,7 @@@@ if (strchr(args,','))
d83 1
a83 1
@@@@ -370,7 +370,7 @@@@ if (!FuzzyMatchParse(args))
d92 1
a92 1
@@@@ -385,7 +385,7 @@@@ void HandleHostRange(char *args,char *va
d101 1
a101 1
@@@@ -394,12 +394,12 @@@@ void HandleHostRange(char *args,char *va
d116 1
a116 1
@@@@ -414,7 +414,7 @@@@ void HandleCompareStat(enum builtin fn,c
d125 1
a125 1
@@@@ -431,7 +431,7 @@@@ switch(fn)
d134 1
a134 1
@@@@ -439,7 +439,7 @@@@ switch(fn)
d143 1
a143 1
@@@@ -447,13 +447,13 @@@@ switch(fn)
d159 1
a159 1
@@@@ -500,7 +500,7 @@@@ if (*args == '/')
d168 1
a168 1
@@@@ -509,7 +509,7 @@@@ if (*args == '/')
d177 1
a177 1
@@@@ -527,11 +527,11 @@@@ Debug("HandleIsDefined(%s)\n",args); 
d191 1
a191 1
@@@@ -547,7 +547,7 @@@@ value[0] = '\0';
d200 1
a200 1
@@@@ -602,11 +602,11 @@@@ FunctionArgs(args,argv,2); 
d214 1
a214 1
@@@@ -632,11 +632,11 @@@@ ret = LocateNextItemMatching(list,argv[0
d228 37
a264 1
@@@@ -904,7 +904,7 @@@@ Verbose("This is a method with return va
d273 1
a273 1
@@@@ -916,7 +916,7 @@@@ Verbose("This is a method with return cl
a281 1
@@@@ -923,7 +923,7 @@@@ Verbose("This is a method with return cl
d290 1
a290 1
@@@@ -949,7 +949,7 @@@@ Debug("ShowState(%s)\n",args); 
d299 1
a299 1
@@@@ -1132,12 +1132,12 @@@@ if (stat(buffer,&statbuf) == 0)
d313 2
a314 2
 if (dist)
@@@@ -1162,7 +1162,7 @@@@ FunctionArgs(args,argv,1);
d323 1
a323 1
@@@@ -1173,7 +1173,7 @@@@ if (time >= 0)
d332 1
a332 1
@@@@ -1243,11 +1243,11 @@@@ Debug("PrepModule(%s,%s)\n",argv[0],argv
d346 1
a346 1
@@@@ -1285,7 +1285,7 @@@@ if (strchr(args,','))
@

