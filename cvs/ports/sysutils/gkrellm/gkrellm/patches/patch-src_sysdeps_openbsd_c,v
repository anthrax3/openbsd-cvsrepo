head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.12
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.10
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.8
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.10
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.8
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.6
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.4
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.2
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.16.0.4
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.2
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.2
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	sturm-2003_Nov_03:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2014.10.13.19.21.43;	author sthen;	state Exp;
branches;
next	1.19;
commitid	TfQGwT3ycK9aZkt0;

1.19
date	2012.04.14.09.27.27;	author nigel;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.06.12.50.15;	author jasper;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.02.06.59.55;	author ajacoutot;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.27.21.53.56;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.18.14.27.16;	author sthen;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.05.08.06.28;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2009.02.06.12.55.48;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2008.11.09.13.38.29;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.02.11.28.05;	author landry;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.21.07.23.44;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.01.10.17.35;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.13.17.38.39;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.26.22.56.57;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.12.12.07.19;	author sturm;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.16.16.33.56;	author sturm;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.21.19.43.03;	author sturm;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.22.00.08.28;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.21.11.40.10;	author sturm;	state dead;
branches;
next	1.1;

1.1
date	2003.11.03.20.34.16;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.11.03.20.34.16;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.20
log
@unnecessary param.h
@
text
@$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.19 2012/04/14 09:27:27 nigel Exp $

Adapt to new OpenBSD kinfo_proc API.

--- src/sysdeps/openbsd.c.orig	Tue Oct  5 17:31:00 2010
+++ src/sysdeps/openbsd.c	Sat Apr 14 01:36:30 2012
@@@@ -62,85 +62,95 @@@@ gkrellm_sys_main_cleanup(void)
 /* ===================================================================== */
 /* CPU monitor interface */
 
-#include <sys/dkstat.h>
-#include <kvm.h>
+#include <sys/sysctl.h>
+#include <sys/sched.h>
 
-extern	kvm_t	*kvmd;
+static gint ncpus;
 
+static gint get_ncpus(void);
+
 void
 gkrellm_sys_cpu_read_data(void)
 	{
-	long		cp_time[CPUSTATES];
-	static struct nlist nl[] = {
-#define N_CP_TIME	0
-		{ "_cp_time" },
-		{ "" }
-	};
+	int64_t	cp_time[ncpus][CPUSTATES];
+	size_t size;
+	int i;
 
+	size = sizeof(cp_time[0]);
+	if (ncpus > 1) {
+		for (i = 0; i < ncpus; i++) {
+			int cp_time_mib[] = {CTL_KERN, KERN_CPTIME2, i};
 
-	if (kvmd == NULL)
-		return;
-	if (nl[0].n_type == 0)
-		if (kvm_nlist(kvmd, nl) < 0 || nl[0].n_type == 0)
+			if (sysctl(cp_time_mib, 3, cp_time[i], &size, NULL, 0)
+			    < 0)
+				continue;
+
+			gkrellm_cpu_assign_data(i, cp_time[i][CP_USER],
+			    cp_time[i][CP_NICE], cp_time[i][CP_SYS],
+			    cp_time[i][CP_IDLE]);
+		}
+	} else {
+		int cp_time_mib[] = {CTL_KERN, KERN_CPTIME};
+		long cp_time_tmp[CPUSTATES];
+
+		if (sysctl(cp_time_mib, 2, cp_time_tmp, &size, NULL, 0) < 0)
 			return;
-	if (kvm_read(kvmd, nl[N_CP_TIME].n_value,
-		     (char *)&cp_time, sizeof(cp_time)) != sizeof(cp_time))
-		return;
+		for (i = 0; i < CPUSTATES; i++)
+			cp_time[0][i] = cp_time_tmp[i];
 
-	/* Currently, SMP is not supported */
-	gkrellm_cpu_assign_data(0, cp_time[CP_USER], cp_time[CP_NICE],
-				cp_time[CP_SYS], cp_time[CP_IDLE]);
+		gkrellm_cpu_assign_data(0, cp_time[0][CP_USER],
+		    cp_time[0][CP_NICE], cp_time[0][CP_SYS],
+		    cp_time[0][CP_IDLE]);
+
 	}
+}
 
 gboolean
 gkrellm_sys_cpu_init(void)
-    {
-	gkrellm_cpu_set_number_of_cpus(1);
+{
+	ncpus = get_ncpus();
+	gkrellm_cpu_set_number_of_cpus(ncpus);
 	return TRUE;
-	}
+}
 
+static gint
+get_ncpus(void)
+{
+	static int mib[] = { CTL_HW, HW_NCPU };
+	int ncpus;
+	size_t size = sizeof(int);
 
+	if (sysctl(mib, 2, &ncpus, &size, NULL, 0) < 0)
+		return 1;
+	else
+		return ncpus;
+}
+
 /* ===================================================================== */
 /* Proc monitor interface */
 
-#include <sys/proc.h>
 #include <sys/sysctl.h>
-#include <uvm/uvm_extern.h>
-#include <kvm.h>
+#include <sys/vmmeter.h>
 
 #include <utmp.h>
 
-extern	kvm_t	*kvmd;
-
 void
 gkrellm_sys_proc_read_data(void)
 {
-   static int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
+   static int proc_mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
+   static int fork_mib[] = { CTL_KERN, KERN_FORKSTAT };
    double avenrun;
 	guint	n_forks = 0, n_processes = 0;
-   struct uvmexp *uvmexp;
-   int i;
    size_t len;
+   struct forkstat forkstat;
 
-	static struct nlist nl[] = {
-#define X_UVM_EXP    0
-	   { "_uvmexp" },
-	   { NULL }
-	};
-
-
-   if (sysctl(mib, 3, NULL, &len, NULL, 0) >= 0) {
+   if (sysctl(proc_mib, 3, NULL, &len, NULL, 0) >= 0) {
       n_processes = len / sizeof(struct kinfo_proc);
    }
 
-   /* get name list if it is not done yet */
-   if (kvmd == NULL) return;
-   if (nl[0].n_type == 0) kvm_nlist(kvmd, nl);
-
-   if (nl[0].n_type != 0) {
-      uvmexp = (struct uvmexp *)nl[X_UVM_EXP].n_value;
-      if (kvm_read(kvmd, (u_long)&uvmexp->forks, &i, sizeof(i)) == sizeof(i))
-	 n_forks = i;
+   len = sizeof(forkstat);
+   if (sysctl(fork_mib, 2, &forkstat, &len, NULL, 0) >= 0) {
+      n_forks = forkstat.cntfork + forkstat.cntvfork;
    }
 
    if (getloadavg(&avenrun, 1) <= 0)
@@@@ -187,7 +197,6 @@@@ gkrellm_sys_proc_init(void)
 #include <sys/vmmeter.h>
 #include <sys/sysctl.h>
 #include <uvm/uvm_extern.h>
-#include <kvm.h>
 
 static gulong	swapin,
 				swapout;
@@@@ -197,32 +206,22 @@@@ static guint64	swap_total,
 void
 gkrellm_sys_mem_read_data(void)
 {
-   static int mib[] = { CTL_VM, VM_METER };
+   static int vmtotal_mib[] = { CTL_VM, VM_METER };
+   static int uvmexp_mib[] = { CTL_VM, VM_UVMEXP };
    static int pgout, pgin;
    unsigned long	total, used, x_used, free, shared, buffers, cached;
    struct vmtotal vmt;
    struct uvmexp uvmexp;
    size_t len;
-   static struct nlist nl[] = {
-#define X_UVM_EXP    0
-   { "_uvmexp" },
-   { NULL }
-};
 
-
-   if (kvmd == NULL) return;
-
-   /* get the name list if it's not done yet */
-   if (nl[0].n_type == 0) kvm_nlist(kvmd, nl);
-
-   if (nl[0].n_type != 0)
-      if (kvm_read(kvmd, nl[X_UVM_EXP].n_value,
-		   &uvmexp, sizeof(uvmexp)) != sizeof(uvmexp))
-	 memset(&uvmexp, 0, sizeof(uvmexp));
-
-   if (sysctl(mib, 2, &vmt, &len, NULL, 0) < 0)
+   len = sizeof(vmt);
+   if (sysctl(vmtotal_mib, 2, &vmt, &len, NULL, 0) < 0)
       memset(&vmt, 0, sizeof(vmt));
 
+   len = sizeof(uvmexp);
+   if (sysctl(uvmexp_mib, 2, &uvmexp, &len, NULL, 0) < 0)
+      memset(&uvmexp, 0, sizeof(uvmexp));
+
    total = (uvmexp.npages - uvmexp.wired) << uvmexp.pageshift;
 
    /* not sure of what must be computed */
@@@@ -240,8 +239,8 @@@@ gkrellm_sys_mem_read_data(void)
    gkrellm_mem_assign_data(total, used, free, shared, buffers, cached);
 
    /* show only the pages located on the disk and not in memory */
-   swap_total = (guint64) (uvmexp.swpages << uvmexp.pageshift);
-   swap_used = (guint64) (uvmexp.swpgonly << uvmexp.pageshift);
+   swap_total = (guint64)uvmexp.swpages << uvmexp.pageshift;
+   swap_used = (guint64)uvmexp.swpgonly << uvmexp.pageshift;
 
    /* For page in/out operations, uvmexp struct doesn't seem to be reliable */
 
@@@@ -271,41 +270,125 @@@@ gkrellm_sys_mem_init(void)
 
 
 /* ===================================================================== */
-/* Sensor monitor interface - not implemented */
+/* Sensor monitor interface */
 
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#include <sys/sensors.h>
+#include <errno.h>
+
+static gboolean
+get_sensor(int dev, int type, int num, gfloat *val)
+{
+	int mib[5] = { CTL_HW, HW_SENSORS };
+	struct sensor sen;
+	size_t len = sizeof(sen);
+
+	mib[2] = dev;
+	mib[3] = type;
+	mib[4] = num;
+	if (sysctl(mib, 5, &sen, &len, NULL, 0) == -1 ||
+	    (SENSOR_FINVALID|SENSOR_FUNKNOWN) & sen.flags)
+		return FALSE;
+
+	*val = (gfloat)sen.value;
+	return TRUE;
+}
+
 gboolean
 gkrellm_sys_sensors_get_temperature(gchar *device_name, gint id,
 		gint iodev, gint interface, gfloat *temp)
-	{
-	return FALSE;
-	}
+{
+	return get_sensor(id, iodev, interface, temp);
+}
 
 gboolean
 gkrellm_sys_sensors_get_fan(gchar *device_name, gint id,
 		gint iodev, gint interface, gfloat *fan)
-	{
-	return FALSE;
-	}
+{
+	return get_sensor(id, iodev, interface, fan);
+}
 
 gboolean
 gkrellm_sys_sensors_get_voltage(gchar *device_name, gint id,
 		gint iodev, gint interface, gfloat *volt)
-	{
-	return FALSE;
+{
+	return get_sensor(id, iodev, interface, volt);
+}
+
+static gboolean
+add_sensdev(int dev, struct sensordev *sensdev)
+{
+	static enum sensor_type stypes[] =
+		{ SENSOR_TEMP, SENSOR_FANRPM, SENSOR_VOLTS_DC };
+	static gint gtypes[] =
+		{ SENSOR_TEMPERATURE, SENSOR_FAN, SENSOR_VOLTAGE };
+	static gfloat fac[] = { 0.000001, 1.0, 0.000001 };
+	static gfloat off[] = { -273.15, 0.0, 0.0 };
+	char name[32];
+	int mib[5] = { CTL_HW, HW_SENSORS };
+	struct sensor sen;
+	size_t len = sizeof(sen);
+	int idx, num;
+	gboolean found = FALSE;
+
+	mib[2] = dev;
+	for (idx = 0; sizeof(stypes) / sizeof(stypes[0]) > idx; idx++) {
+		mib[3] = stypes[idx];
+		for (num = 0; sensdev->maxnumt[stypes[idx]] > num; num++) {
+			mib[4] = num;
+			len = sizeof(sen);
+			if (sysctl(mib, 5, &sen, &len, NULL, 0) == -1) {
+				if (ENOENT != errno)
+					return FALSE;
+				continue;
+			}
+			if (SENSOR_FINVALID & sen.flags)
+				continue;
+			snprintf(name, sizeof(name), "%s.%s%d", sensdev->xname,
+			    sensor_type_s[stypes[idx]], num);
+			gkrellm_sensors_add_sensor(gtypes[idx], NULL, name,
+			    sensdev->num, stypes[idx], num, fac[idx],
+			    off[idx], NULL, (sen.desc[0] ? sen.desc : NULL));
+			found = TRUE;
+		}
 	}
 
+	return found;
+}
+
 gboolean
 gkrellm_sys_sensors_init(void)
-	{
-	return FALSE;
+{
+	int mib[3] = { CTL_HW, HW_SENSORS };
+	struct sensordev sensdev;
+	size_t len = sizeof(sensdev);
+	int dev;
+	gboolean found = FALSE;
+
+#define GKRELLM_MAXSENSORDEVICES 1024
+	for (dev = 0; GKRELLM_MAXSENSORDEVICES > dev; dev++) {
+		mib[2] = dev;
+		if (sysctl(mib, 3, &sensdev, &len, NULL, 0) == -1) {
+			if (errno == ENXIO)
+				continue;
+			if (errno == ENOENT)
+				break;
+			return FALSE;
+		}
+		if (add_sensdev(dev, &sensdev))
+			found = TRUE;
 	}
 
+	return found;
+}
 
+
 /* ===================================================================== */
 /* Battery monitor interface */
 #include <sys/ioctl.h>
 
-#if defined(__i386__) || defined(__powerpc__)
+#if defined(__i386__) || defined(__macppc__) || defined(__amd64__) || defined(__arm__) || defined(__sparc__) || defined(__sparc64__)
 
 #include <machine/apmvar.h>
 #define	APMDEV		"/dev/apm"
@@@@ -357,24 +440,10 @@@@ gkrellm_sys_battery_init()
 /* ===================================================================== */
 /* Disk monitor interface */
 
-#include <sys/dkstat.h>
+#include <sys/sysctl.h>
 #include <sys/disk.h>
-#include <kvm.h>
+#include <errno.h>
 
-static struct nlist nl_disk[] = {
-#define X_DISK_COUNT    0
-   { "_disk_count" },      /* number of disks */
-#define X_DISKLIST      1
-   { "_disklist" },        /* TAILQ of disks */
-   { NULL },
-};
-
-static struct disk *dkdisks;	/* kernel disk list head */
-
-extern	kvm_t	*kvmd;
-
-static gint	n_disks;
-
 gchar *
 gkrellm_sys_disk_name_from_device(gint device_number, gint unit_number,
 			gint *order)
@@@@ -389,68 +458,50 @@@@ gkrellm_sys_disk_order_from_name(const gchar *name)
 	}
 
 
-void
-gkrellm_sys_disk_read_data(void)
+static int
+get_diskinfo(struct diskstats **ret)
 {
-   struct disk	d, *p;
-   gint			i;
-   char			buf[20];
-   guint64		rbytes, wbytes;
+	static int mib[] = { CTL_HW, HW_DISKSTATS };
+	static void *buf = NULL;
+	static size_t buflen = 0;
+	size_t len;
+	void *newbuf;
 
-   if (kvmd == NULL) return;
-   if (n_disks <= 0) return;		/* computed by register_disks() */
-   if (nl_disk[0].n_type == 0) return;	/* ditto. */
+	for (;;) {
+		len = buflen;
+		if (NULL != buf) {
+			if (sysctl(mib, 2, buf, &len, NULL, 0) >= 0) {
+				*ret = buf;
+				return len / sizeof(struct diskstats);
+			}
+			if (ENOMEM != errno)
+				return (-1);
+		}
 
-   for (i = 0, p = dkdisks; i < n_disks; p = d.dk_link.tqe_next, ++i)
-	{
-	if (kvm_read(kvmd, (u_long)p, &d, sizeof(d)) == sizeof(d))
-		{
-		if (kvm_read(kvmd, (u_long)d.dk_name, buf, sizeof(buf)) != sizeof(buf))
-			/* fallback to default name if kvm_read failed */
-			sprintf(buf, "%s%c", _("Disk"), 'A' + i);
-	 
-		/* It seems impossible to get the read and write transfers
-		 * separately. Its just a matter of choice to put the total in
-		 * the rbytes member but I like the blue color so much.
-		*/
+		if (sysctl(mib, 2, NULL, &len, NULL, 0) < 0)
+			return (-1);
+		len += sizeof(struct diskstats);
+		if (NULL == (newbuf = realloc(buf, len)))
+			return (-1);
+		buf = newbuf;
+		buflen = len;
+	}
+}
 
-		/* Separate read/write stats were implemented in NetBSD 1.6K.
-		*/
+void
+gkrellm_sys_disk_read_data(void)
+{
+	int diskcount, ii;
+	struct diskstats *disks;
 
-#if __NetBSD_Version__ >= 106110000
-		rbytes = d.dk_rbytes;
-		wbytes = d.dk_wbytes;
-#else
-		rbytes = d.dk_bytes;
-		wbytes = 0;
-#endif
-
-		gkrellm_disk_assign_data_by_name(buf, rbytes, wbytes);
-		}
-	}
+	diskcount = get_diskinfo(&disks);
+	for (ii = 0; diskcount > ii; ii++)
+		gkrellm_disk_assign_data_by_name(disks[ii].ds_name,
+		    disks[ii].ds_rbytes, disks[ii].ds_wbytes, FALSE);
 }
 
 gboolean
 gkrellm_sys_disk_init(void)
 {
-   struct disklist_head head;
-
-
-   if (kvmd == NULL) return FALSE;
-
-   /* get disk count */
-   if (kvm_nlist(kvmd, nl_disk) >= 0 && nl_disk[0].n_type != 0)
-      if (kvm_read(kvmd, nl_disk[X_DISK_COUNT].n_value,
-		   (char *)&n_disks, sizeof(n_disks)) != sizeof(n_disks))
-	 n_disks = 0;
-
-   /* get first disk */
-   if (n_disks > 0) {
-      if (kvm_read(kvmd, nl_disk[X_DISKLIST].n_value, 
-		   &head, sizeof(head)) != sizeof(head))
-	 n_disks = 0;
-
-      dkdisks = head.tqh_first;
-   }
-   return TRUE;
+	return TRUE;
 }
@


1.19
log
@Update for rfork removal.

Ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.18 2011/07/06 12:50:15 jasper Exp $
d7 1
a7 1
@@@@ -62,85 +62,96 @@@@ gkrellm_sys_main_cleanup(void)
a12 1
+#include <sys/param.h>
d149 1
a149 1
@@@@ -187,7 +198,6 @@@@ gkrellm_sys_proc_init(void)
d157 1
a157 1
@@@@ -197,32 +207,22 @@@@ static guint64	swap_total,
d198 1
a198 1
@@@@ -240,8 +240,8 @@@@ gkrellm_sys_mem_read_data(void)
d209 1
a209 1
@@@@ -271,41 +271,125 @@@@ gkrellm_sys_mem_init(void)
d347 1
a347 1
@@@@ -357,24 +441,10 @@@@ gkrellm_sys_battery_init()
d374 1
a374 1
@@@@ -389,68 +459,50 @@@@ gkrellm_sys_disk_order_from_name(const gchar *name)
@


1.18
log
@- move away from old kinfo_proc2
- add mising comment
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.17 2011/03/02 06:59:55 ajacoutot Exp $
d5 2
a6 2
--- src/sysdeps/openbsd.c.orig	Tue Oct  5 18:31:00 2010
+++ src/sysdeps/openbsd.c	Wed Jul  6 14:34:42 2011
d146 1
a146 1
+      n_forks = forkstat.cntfork + forkstat.cntvfork + forkstat.cntrfork;
@


1.17
log
@Update to gkrellm-2.3.5.
@
text
@d1 4
a4 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.16 2010/04/27 21:53:56 sthen Exp $
d6 1
a6 1
+++ src/sysdeps/openbsd.c	Mon Feb 14 07:46:00 2011
d115 1
a115 1
+   static int proc_mib[] = { CTL_KERN, KERN_PROC2, KERN_PROC_ALL };
a131 1
-      n_processes = len / sizeof(struct kinfo_proc);
d133 1
a133 1
+      n_processes = len / sizeof(struct kinfo_proc2);
@


1.16
log
@- unbreak following sensor changes
- skip over ifm->ifm_version != RTM_VERSION messages
- sync WANTLIBs, bump everything
- drop ajacoutot@@ as maintainer per his request
@
text
@d1 3
a3 3
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.15 2010/01/18 14:27:16 sthen Exp $
--- src/sysdeps/openbsd.c.orig	Sat Oct  4 01:46:45 2008
+++ src/sysdeps/openbsd.c	Tue Apr 27 22:20:22 2010
d373 1
a373 1
@@@@ -389,68 +459,50 @@@@ gkrellm_sys_disk_order_from_name(gchar *name)
@


1.15
log
@Switch to KERN_PROC2. ok ajacoutot@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.14 2009/03/05 08:06:28 ajacoutot Exp $
--- src/sysdeps/openbsd.c.orig	Sat Oct  4 00:46:45 2008
+++ src/sysdeps/openbsd.c	Mon Jan 18 08:58:33 2010
d208 1
a208 1
@@@@ -271,41 +271,122 @@@@ gkrellm_sys_mem_init(void)
d319 2
a320 1
+	for (dev = 0; MAXSENSORDEVICES > dev; dev++) {
d323 5
a327 3
+			if (ENOENT != errno)
+				return FALSE;
+			continue;
d346 1
a346 1
@@@@ -357,24 +438,10 @@@@ gkrellm_sys_battery_init()
d373 1
a373 1
@@@@ -389,68 +456,50 @@@@ gkrellm_sys_disk_order_from_name(gchar *name)
@


1.14
log
@- fix a memory leak
from Josh Elsasser <josh at elsasser dot org>
@
text
@d1 3
a3 3
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.13 2009/02/06 12:55:48 ajacoutot Exp $
--- src/sysdeps/openbsd.c.orig	Fri Oct  3 17:46:45 2008
+++ src/sysdeps/openbsd.c	Sun Mar  1 10:28:40 2009
d112 1
a112 1
+   static int proc_mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
d129 1
d131 1
a131 1
       n_processes = len / sizeof(struct kinfo_proc);
@


1.13
log
@- fix a misplaced cast that would corrupt swap statistics for systems
with >=2GB swap
- replace kvm reads with sysctl()
this change brings some useful improvements in the process:
* it fixes the disk plugin
* if you don't care about TCP connection statistics, then running sgid
is not needed anymore

all work done by Josh Elsasser, thank you!
"functionality-wise: thumbs up!" sturm@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.12 2008/11/09 13:38:29 ajacoutot Exp $
d3 1
a3 1
+++ src/sysdeps/openbsd.c	Wed Feb  4 14:48:56 2009
d369 1
a369 1
@@@@ -389,68 +456,52 @@@@ gkrellm_sys_disk_order_from_name(gchar *name)
d383 2
a384 2
+	static void *buf;
+	static size_t buflen;
a390 2
+	buf = NULL;
+	buflen = 0;
@


1.12
log
@- update to gkrellm-2.3.2
@
text
@d1 6
a6 6
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.11 2008/09/02 11:28:05 landry Exp $
--- src/sysdeps/openbsd.c.orig	Sat Oct  4 02:46:45 2008
+++ src/sysdeps/openbsd.c	Sun Nov  9 13:26:45 2008
@@@@ -65,41 +65,71 @@@@ gkrellm_sys_main_cleanup(void)
 #include <sys/dkstat.h>
 #include <kvm.h>
d8 2
a9 1
-extern	kvm_t	*kvmd;
d14 1
d16 1
a16 1
+
d98 110
a207 1
@@@@ -271,41 +301,122 @@@@ gkrellm_sys_mem_init(void)
d342 91
a432 3
@@@@ -417,7 +528,7 @@@@ gkrellm_sys_disk_read_data(void)
 		/* Separate read/write stats were implemented in NetBSD 1.6K.
 		*/
d435 15
a449 7
+#if __NetBSD_Version__ >= 106110000 || defined(__OpenBSD__)
 		rbytes = d.dk_rbytes;
 		wbytes = d.dk_wbytes;
 #else
@@@@ -425,7 +536,7 @@@@ gkrellm_sys_disk_read_data(void)
 		wbytes = 0;
 #endif
d451 24
a474 4
-		gkrellm_disk_assign_data_by_name(buf, rbytes, wbytes);
+		gkrellm_disk_assign_data_by_name(buf, rbytes, wbytes, FALSE);
 		}
 	}
@


1.11
log
@Add support for sensors through hw.sensors sysctls, currently temperature,
fan speed and voltages.
From a diff by Josh Elsasser on ports@@ a while ago, thanks!

ok ajacoutot@@ (maintainer)
@
text
@d1 4
a4 4
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.7 2007/10/26 22:56:57 ajacoutot Exp $
--- src/sysdeps/openbsd.c.orig	Fri Jul  6 16:54:22 2007
+++ src/sysdeps/openbsd.c	Sat Jul 12 09:14:03 2008
@@@@ -53,41 +53,71 @@@@ gkrellm_sys_main_cleanup(void)
d96 1
a96 1
@@@@ -259,41 +289,122 @@@@ gkrellm_sys_mem_init(void)
d231 1
a231 1
@@@@ -405,7 +516,7 @@@@ gkrellm_sys_disk_read_data(void)
d240 1
a240 1
@@@@ -413,7 +524,7 @@@@ gkrellm_sys_disk_read_data(void)
@


1.10
log
@- use SUBST_CMD
- fix PATHs in documentation
- add a default gkrellmd.conf
- make the server use the unpriviledged _gkrellmd user by default
- add sparc64 to the list of apm(4) capable arches and s/powerpc/macppc
@
text
@d1 3
a3 3
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.9 2008/07/01 10:17:35 ajacoutot Exp $
--- src/sysdeps/openbsd.c.orig	Sat Jul  7 01:54:22 2007
+++ src/sysdeps/openbsd.c	Tue Jul  1 10:48:13 2008
d96 127
a222 1
@@@@ -293,7 +323,7 @@@@ gkrellm_sys_sensors_init(void)
d231 1
a231 1
@@@@ -405,7 +435,7 @@@@ gkrellm_sys_disk_read_data(void)
d240 1
a240 1
@@@@ -413,7 +443,7 @@@@ gkrellm_sys_disk_read_data(void)
@


1.9
log
@- fix compilation under sparc64
noticed by sturm@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.8 2008/06/13 17:38:39 ajacoutot Exp $
d101 1
a101 1
+#if defined(__i386__) || defined(__powerpc__) || defined(__amd64__) || defined(__arm__) || (defined(__sparc__) && !defined(__sparc64__))
@


1.8
log
@- add amd64, arm and sparc to APM capable archs

thanks a lot to sthen@@ for painful testing on zaurus ;-)
ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.7 2007/10/26 22:56:57 ajacoutot Exp $
d3 1
a3 1
+++ src/sysdeps/openbsd.c	Fri Jun 13 01:30:34 2008
d101 1
a101 1
+#if defined(__i386__) || defined(__powerpc__) || defined(__amd64__) || defined(__arm__) || defined(__sparc__)
@


1.7
log
@- update to 2.3.0
- switch to GPLv3
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.6 2005/06/12 12:07:19 sturm Exp $
d3 1
a3 1
+++ src/sysdeps/openbsd.c	Fri Oct 26 15:48:30 2007
d96 9
@


1.6
log
@rewrite cpu usage parts for openbsd to display usage of all cpus
on mp machines (based on new top code from fries@@)

ok maintainer Peter Hessler <spambox at theapt.org>
@
text
@d1 4
a4 4
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.5 2004/10/16 16:33:56 sturm Exp $
--- src/sysdeps/openbsd.c.orig	Sun Sep  5 21:57:34 2004
+++ src/sysdeps/openbsd.c	Sat Jun 11 21:40:27 2005
@@@@ -53,40 +53,70 @@@@ gkrellm_sys_main_cleanup(void)
d86 1
a86 1
+
d92 1
a92 1
 
d95 19
@


1.5
log
@several updates from maintainer Peter Hessler <phessler at theapt.org>
@
text
@d1 4
a4 4
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.4 2004/08/21 19:43:03 sturm Exp $
--- src/sysdeps/openbsd.c.orig	Sun Sep  5 12:57:34 2004
+++ src/sysdeps/openbsd.c	Mon Oct 11 00:11:29 2004
@@@@ -53,27 +53,21 @@@@ gkrellm_sys_main_cleanup(void)
d8 1
d12 4
a16 2
 extern	kvm_t	*kvmd;
 
d20 1
a20 2
+	static int mib[] = { CTL_KERN, KERN_CPTIME };
 	long		cp_time[CPUSTATES];
d26 8
a33 1
+	size_t len;
a34 1
-
d39 14
a52 1
-			return;
d56 36
a91 2
+	len = sizeof(cp_time);
+	if (sysctl(mib, 2, cp_time, &len, NULL, 0) < 0) return;
d93 2
a94 2
 	/* Currently, SMP is not supported */
 	gkrellm_cpu_assign_data(0, cp_time[CP_USER], cp_time[CP_NICE],
@


1.4
log
@int -> size_t

ok pval@@, naddy@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.3 2004/06/22 00:08:28 sturm Exp $
--- src/sysdeps/openbsd.c.orig	2004-05-01 11:46:38.000000000 -0600
+++ src/sysdeps/openbsd.c	2004-06-20 11:27:05.000000000 -0600
a23 1
-
d26 1
@


1.3
log
@fix cpu display on -current machines
bump PKGNAME
@
text
@d1 1
a1 1
$OpenBSD$
d25 1
a25 1
+	int len;
@


1.2
log
@update to gkrellm 2.1.24
bugfixes and improved ssl handling

from maintainer Peter Hessler <spambox at theapt dot org>
@
text
@d1 10
a10 20
$OpenBSD: patch-src_sysdeps_openbsd_c,v 1.1 2003/11/03 20:34:16 sturm Exp $
--- src/sysdeps/openbsd.c.orig	2003-01-08 17:03:31.000000000 -0800
+++ src/sysdeps/openbsd.c	2003-10-28 10:09:12.000000000 -0800
@@@@ -34,7 +34,7 @@@@ gkrellm_sys_main_init(void)
 	|  kmem privilege, it runs with available information.
 	*/
 	kvmd = kvm_openfiles(NULL, NULL, NULL, O_RDONLY, errbuf);
-	if (setgid(getgid()) != 0)
+	if (setgid(getegid()) != 0)
 		{
 		fprintf(stderr, "Can't drop setgid privileges.");
 		exit(1);
@@@@ -107,8 +107,9 @@@@ gkrellm_sys_proc_read_data(void)
    double avenrun;
 	guint	n_forks = 0, n_processes = 0;
    struct uvmexp *uvmexp;
-   int len, i;
-	
+   int i;
+   size_t len;
d12 28
a39 3
 	static struct nlist nl[] = {
 #define X_UVM_EXP    0
 	   { "_uvmexp" },
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import of gkrellm 2.1.21 and associated plugins

besides bringing gkrellm and the plugins up2date, this introduces a new
port structure, where all plugins are located in sysutils/gkrellm/plugins.

the set of plugins consists of:
aclock, bgchg, flynn, itime, kam, launch, mailwatch, mms, moon, mss, reminder
shoot, stock, sun, volume, weather and wireless

ports done and maintained by Peter Hessler <spambox@@theapt.org>

all prior maintainers either agreed to him taking over their plugins or
timed out. 
@
text
@@
