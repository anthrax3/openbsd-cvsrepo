head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.16
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2012.01.08.22.49.56;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.1
log
@catch up with change kinfo_proc2 -> kinfo_proc
@
text
@$OpenBSD$
--- dtpstree.cpp.orig	Sun Jan  8 23:02:45 2012
+++ dtpstree.cpp	Sun Jan  8 23:09:20 2012
@@@@ -92,8 +92,25 @@@@ template <typename Type>
 inline char *comm(Type *proc);
 
 #ifndef HAVE_STRUCT_KINFO_PROC2
+#ifdef HAVE_KINFO_NEWABI
 typedef kinfo_proc Proc;
 
+const int Flags(KVM_NO_FILES);
+
+template <>
+inline kinfo_proc *getprocs(kvm_t *kd, int &count)
+{
+	return kvm_getprocs(kd, All, 0, sizeof (kinfo_proc), &count);
+}
+
+template <>
+inline char **getargv(kvm_t *kd, const kinfo_proc *proc)
+{
+	return kvm_getargv(kd, proc, 0);
+}
+#else
+typedef kinfo_proc Proc;
+
 const int Flags(O_RDONLY);
 
 template <>
@@@@ -107,6 +124,7 @@@@ inline char **getargv(kvm_t *kd, const kinfo_proc *pro
 {
 	return kvm_getargv(kd, proc, 0);
 }
+#endif
 #else
 typedef kinfo_proc2 Proc;
 
@
