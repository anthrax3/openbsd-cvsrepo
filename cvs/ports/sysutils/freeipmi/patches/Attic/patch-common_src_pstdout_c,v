head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.30
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.28
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.26
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.24
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.22
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	wilfried-20071025:1.1.1.1
	wilfried:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.08.11.21.12.45;	author sthen;	state dead;
branches;
next	1.1;
commitid	isJQq8Fh5d4gqZGJ;

1.1
date	2007.10.25.18.17.02;	author wilfried;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.10.25.18.17.02;	author wilfried;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to freeipmi-1.4.9
@
text
@$OpenBSD: patch-common_src_pstdout_c,v 1.1 2007/10/25 18:17:02 wilfried Exp $
--- common/src/pstdout.c.orig	Sat Apr 28 19:26:47 2007
+++ common/src/pstdout.c	Tue Oct 23 16:58:53 2007
@@@@ -83,8 +83,8 @@@@ struct pstdout_thread_data {
 struct pstdout_state {
   uint32_t magic;
   char *hostname; 
-  cbuf_t stdout;
-  cbuf_t stderr;
+  cbuf_t my_stdout;
+  cbuf_t my_stderr;
   char *buffer_stdout;
   char *buffer_stderr;
   unsigned int buffer_stdout_len;
@@@@ -495,8 +495,8 @@@@ _pstdout_print(pstdout_state_t pstate, 
 
   assert(pstate);
   assert(pstate->magic == PSTDOUT_STATE_MAGIC);
-  assert(pstate->stdout);
-  assert(pstate->stderr);
+  assert(pstate->my_stdout);
+  assert(pstate->my_stderr);
   assert(stream);
   assert(stream == stdout || stream == stderr);
   assert(format);
@@@@ -504,7 +504,7 @@@@ _pstdout_print(pstdout_state_t pstate, 
 
   if (stream == stdout)
     {
-      whichcbuf = pstate->stdout;
+      whichcbuf = pstate->my_stdout;
       whichdefaultmask = PSTDOUT_OUTPUT_STDOUT_DEFAULT;
       whichprependmask = PSTDOUT_OUTPUT_STDOUT_PREPEND_HOSTNAME;
       whichbuffermask = PSTDOUT_OUTPUT_BUFFER_STDOUT;
@@@@ -514,7 +514,7 @@@@ _pstdout_print(pstdout_state_t pstate, 
     }
   else
     {
-      whichcbuf = pstate->stderr;
+      whichcbuf = pstate->my_stderr;
       whichdefaultmask = PSTDOUT_OUTPUT_STDERR_DEFAULT;
       whichprependmask = PSTDOUT_OUTPUT_STDERR_PREPEND_HOSTNAME;
       whichbuffermask = PSTDOUT_OUTPUT_BUFFER_STDERR;
@@@@ -796,14 +796,14 @@@@ _pstdout_state_init(pstdout_state_t pstate, char *host
   pstate->magic = PSTDOUT_STATE_MAGIC;
   pstate->hostname = hostname;
 
-  if (!(pstate->stdout = cbuf_create(PSTDOUT_STATE_CBUF_MIN, PSTDOUT_STATE_CBUF_MAX)))
+  if (!(pstate->my_stdout = cbuf_create(PSTDOUT_STATE_CBUF_MIN, PSTDOUT_STATE_CBUF_MAX)))
     {
       if (pstdout_debug_flags & PSTDOUT_DEBUG_STANDARD)
         fprintf(stderr, "cbuf_create: %s\n", strerror(errno));
       pstdout_errnum = PSTDOUT_ERR_INTERNAL;
       return -1;
     }
-  if (!(pstate->stderr = cbuf_create(PSTDOUT_STATE_CBUF_MIN, PSTDOUT_STATE_CBUF_MAX)))
+  if (!(pstate->my_stderr = cbuf_create(PSTDOUT_STATE_CBUF_MIN, PSTDOUT_STATE_CBUF_MAX)))
     {
       if (pstdout_debug_flags & PSTDOUT_DEBUG_STANDARD)
         fprintf(stderr, "cbuf_create: %s\n", strerror(errno));
@@@@ -839,8 +839,8 @@@@ _pstdout_output_buffer_data(pstdout_state_t pstate, 
 {
   assert(pstate);
   assert(pstate->magic == PSTDOUT_STATE_MAGIC);
-  assert(pstate->stdout);
-  assert(pstate->stderr);
+  assert(pstate->my_stdout);
+  assert(pstate->my_stderr);
   assert(stream);
   assert(stream == stdout || stream == stderr);
   assert(whichbuffer);
@@@@ -942,8 +942,8 @@@@ _pstdout_output_finish(pstdout_state_t pstate)
 
   assert(pstate);
   assert(pstate->magic == PSTDOUT_STATE_MAGIC);
-  assert(pstate->stdout);
-  assert(pstate->stderr);
+  assert(pstate->my_stdout);
+  assert(pstate->my_stderr);
 
   if ((rc = pthread_mutex_lock(&(pstate->mutex))))
     {
@@@@ -957,10 +957,10 @@@@ _pstdout_output_finish(pstdout_state_t pstate)
   /* If there is remaining junk in the cbufs, write a "\n" to it so we
    * finish off the line and get it flushed out.
    */
-  if (!cbuf_is_empty(pstate->stdout))
+  if (!cbuf_is_empty(pstate->my_stdout))
     _pstdout_print_wrapper(pstate, 1, stdout, "\n");
   
-  if (!cbuf_is_empty(pstate->stderr))
+  if (!cbuf_is_empty(pstate->my_stderr))
     _pstdout_print_wrapper(pstate, 1, stderr, "\n");
   
   if (_pstdout_output_buffer_data(pstate,
@@@@ -1008,10 +1008,10 @@@@ _pstdout_state_cleanup(pstdout_state_t pstate)
   assert(pstate);
   assert(pstate->magic == PSTDOUT_STATE_MAGIC);
 
-  if (pstate->stdout)
-    cbuf_destroy(pstate->stdout);
-  if (pstate->stderr)
-    cbuf_destroy(pstate->stderr);
+  if (pstate->my_stdout)
+    cbuf_destroy(pstate->my_stdout);
+  if (pstate->my_stderr)
+    cbuf_destroy(pstate->my_stderr);
   if (pstate->buffer_stdout)
     free(pstate->buffer_stdout);
   if (pstate->buffer_stderr)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import of freeipmi-0.4.6

FreeIPMI is a collection of Intelligent Platform Management IPMI
system software. It provides in-band and out-of-band software and
a development library conforming to the Intelligent Platform
Management Interface (IPMI v1.5 and v2.0) standards.
@
text
@@
