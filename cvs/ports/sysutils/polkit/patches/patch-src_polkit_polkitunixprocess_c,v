head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	ajacoutot_20100701:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2015.07.20.20.16.59;	author ajacoutot;	state Exp;
branches;
next	1.8;
commitid	JWMCXULG2yOge18a;

1.8
date	2015.07.19.00.31.29;	author ajacoutot;	state Exp;
branches;
next	1.7;
commitid	rjroKBh6iwDEuzWC;

1.7
date	2015.07.16.17.45.38;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	xFt5wDZUa2tZDFg8;

1.6
date	2014.03.09.22.26.56;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.20.14.11.48;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.19.13.03.58;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.17.16.59.27;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.28.13.09.07;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.01.07.46.21;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.07.01.07.46.21;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Pushed upstream.
@
text
@$OpenBSD: patch-src_polkit_polkitunixprocess_c,v 1.8 2015/07/19 00:31:29 ajacoutot Exp $

From 074df27827fd773f1c76545cd08da568440ca41f Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Sun, 19 Jul 2015 02:19:08 +0200
Subject: Add support for OpenBSD

--- src/polkit/polkitunixprocess.c.orig	Tue Jan 14 23:42:25 2014
+++ src/polkit/polkitunixprocess.c	Sun Jul 19 02:14:03 2015
@@@@ -29,6 +29,9 @@@@
 #include <sys/sysctl.h>
 #include <sys/user.h>
 #endif
+#ifdef HAVE_OPENBSD
+#include <sys/sysctl.h>
+#endif
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
@@@@ -86,7 +89,7 @@@@ static guint64 get_start_time_for_pid (gint    pid,
 static gint _polkit_unix_process_get_owner (PolkitUnixProcess  *process,
                                             GError            **error);
 
-#ifdef HAVE_FREEBSD
+#if defined(HAVE_FREEBSD) || defined(HAVE_OPENBSD)
 static gboolean get_kinfo_proc (gint pid, struct kinfo_proc *p);
 #endif
 
@@@@ -554,12 +557,36 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
 }
 #endif
 
+#ifdef HAVE_OPENBSD
+static gboolean
+get_kinfo_proc (gint pid, struct kinfo_proc *p)
+{
+  int name[6];
+  u_int namelen;
+  size_t sz;
+
+  sz = sizeof(*p);
+  namelen = 0;
+  name[namelen++] = CTL_KERN;
+  name[namelen++] = KERN_PROC;
+  name[namelen++] = KERN_PROC_PID;
+  name[namelen++] = pid;
+  name[namelen++] = sz;
+  name[namelen++] = 1;
+
+  if (sysctl (name, namelen, p, &sz, NULL, 0) == -1)
+    return FALSE;
+
+  return TRUE;
+}
+#endif
+
 static guint64
 get_start_time_for_pid (pid_t    pid,
                         GError **error)
 {
   guint64 start_time;
-#ifndef HAVE_FREEBSD
+#if !defined(HAVE_FREEBSD) && !defined(HAVE_OPENBSD)
   gchar *filename;
   gchar *contents;
   size_t length;
@@@@ -647,7 +674,11 @@@@ get_start_time_for_pid (pid_t    pid,
       goto out;
     }
 
+#ifdef HAVE_FREEBSD
   start_time = (guint64) p.ki_start.tv_sec;
+#else
+  start_time = (guint64) p.p_ustart_sec;
+#endif
 
 out:
 #endif
@@@@ -662,7 +693,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
   gint result;
   gchar *contents;
   gchar **lines;
-#ifdef HAVE_FREEBSD
+#if defined(HAVE_FREEBSD) || defined(HAVE_OPENBSD)
   struct kinfo_proc p;
 #else
   gchar filename[64];
@@@@ -676,7 +707,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
   lines = NULL;
   contents = NULL;
 
-#ifdef HAVE_FREEBSD
+#if defined(HAVE_FREEBSD) || defined(HAVE_OPENBSD)
   if (get_kinfo_proc (process->pid, &p) == 0)
     {
       g_set_error (error,
@@@@ -688,7 +719,11 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
       goto out;
     }
 
+#if defined(HAVE_FREEBSD)
   result = p.ki_uid;
+#else
+  result = p.p_uid;
+#endif
 #else
 
   /* see 'man proc' for layout of the status file
@


1.8
log
@Sync with BZ.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_polkit_polkitunixprocess_c,v 1.7 2015/07/16 17:45:38 ajacoutot Exp $
d3 4
a6 1
https://bugs.freedesktop.org/show_bug.cgi?id=75187
@


1.7
log
@Sync with the patch in fd.o BZ.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_polkit_polkitunixprocess_c,v 1.6 2014/03/09 22:26:56 ajacoutot Exp $
d6 1
a6 1
+++ src/polkit/polkitunixprocess.c	Thu Jul 16 19:22:55 2015
d26 1
a26 1
@@@@ -554,12 +557,38 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d34 3
a36 3
+	int name[6];
+	u_int namelen;
+	size_t sz;
d38 8
a45 8
+	sz = sizeof(*p);
+	namelen = 0;
+	name[namelen++] = CTL_KERN;
+	name[namelen++] = KERN_PROC;
+	name[namelen++] = KERN_PROC_PID;
+	name[namelen++] = pid;
+	name[namelen++] = sz;
+	name[namelen++] = 1;
d47 2
a48 4
+	if (sysctl (name, namelen, p, &sz, NULL, 0) == -1) {
+		perror("sysctl kern.proc.pid");
+		return FALSE;
+	}
d50 1
a50 1
+	return TRUE;
d64 1
a64 1
@@@@ -647,7 +676,11 @@@@ get_start_time_for_pid (pid_t    pid,
d76 1
a76 1
@@@@ -662,7 +695,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d85 1
a85 1
@@@@ -676,7 +709,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d94 1
a94 1
@@@@ -688,7 +721,11 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
@


1.6
log
@Merge some build patches from upstream and add BZ URLs.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_polkit_polkitunixprocess_c,v 1.5 2012/11/20 14:11:48 ajacoutot Exp $
d5 3
a7 3
--- src/polkit/polkitunixprocess.c.orig	Mon May  6 19:54:15 2013
+++ src/polkit/polkitunixprocess.c	Wed Feb 19 08:50:41 2014
@@@@ -29,6 +29,10 @@@@
a11 1
+#include <sys/param.h>
d17 1
a17 1
@@@@ -86,7 +90,7 @@@@ static guint64 get_start_time_for_pid (gint    pid,
d26 1
a26 1
@@@@ -554,12 +558,38 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d66 1
a66 1
@@@@ -647,7 +677,11 @@@@ get_start_time_for_pid (pid_t    pid,
d78 1
a78 1
@@@@ -662,7 +696,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d87 1
a87 1
@@@@ -676,7 +710,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d96 1
a96 1
@@@@ -688,7 +722,11 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
@


1.5
log
@Major update to polkit-0.108.
@
text
@d1 7
a7 4
$OpenBSD: patch-src_polkit_polkitunixprocess_c,v 1.4 2012/09/19 13:03:58 ajacoutot Exp $
--- src/polkit/polkitunixprocess.c.orig	Tue Apr 24 18:05:34 2012
+++ src/polkit/polkitunixprocess.c	Wed Sep 19 15:06:44 2012
@@@@ -29,6 +29,12 @@@@
d11 1
a11 3
+#ifdef __OpenBSD__
+#include <kvm.h>
+#include <stdio.h>
d18 1
a18 1
@@@@ -86,7 +92,7 @@@@ static guint64 get_start_time_for_pid (gint    pid,
d23 1
a23 1
+#if defined(HAVE_FREEBSD) || defined(__OpenBSD__)
d27 1
a27 1
@@@@ -554,12 +560,38 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d31 1
a31 1
+#ifdef __OpenBSD__
d63 1
a63 1
+#if !defined(HAVE_FREEBSD) && !defined(__OpenBSD__)
d67 1
a67 1
@@@@ -647,7 +679,11 @@@@ get_start_time_for_pid (pid_t    pid,
d79 1
a79 1
@@@@ -662,7 +698,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d84 1
a84 1
+#if defined(HAVE_FREEBSD) || defined(__OpenBSD__)
d88 1
a88 1
@@@@ -676,7 +712,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d93 1
a93 1
+#if defined(HAVE_FREEBSD) || defined(__OpenBSD__)
d97 1
a97 1
@@@@ -688,7 +724,11 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
@


1.4
log
@Forgot this chunk in previous.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_polkit_polkitunixprocess_c,v 1.3 2011/08/17 16:59:27 ajacoutot Exp $
d3 1
a3 1
+++ src/polkit/polkitunixprocess.c	Wed Sep 19 14:52:25 2012
d26 1
a26 1
@@@@ -554,12 +560,39 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d32 1
a32 2
+get_kinfo_proc (gint pid,
+		struct kinfo_proc *p)
d66 1
a66 1
@@@@ -647,7 +680,11 @@@@ get_start_time_for_pid (pid_t    pid,
d78 1
a78 1
@@@@ -662,7 +699,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d87 1
a87 1
@@@@ -676,7 +713,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d96 1
a96 1
@@@@ -688,7 +725,11 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
@


1.3
log
@Bugfix update to polkit-0.102.
@
text
@d1 3
a3 3
$OpenBSD$
--- src/polkit/polkitunixprocess.c.orig	Mon Aug  1 15:42:02 2011
+++ src/polkit/polkitunixprocess.c	Wed Aug 17 18:39:34 2011
d26 1
a26 1
@@@@ -554,12 +560,38 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d31 2
a32 1
+get_kinfo_proc (pid_t pid,
d67 1
a67 1
@@@@ -647,7 +679,11 @@@@ get_start_time_for_pid (pid_t    pid,
d79 1
a79 1
@@@@ -662,7 +698,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d88 1
a88 1
@@@@ -676,7 +712,7 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
d97 1
a97 1
@@@@ -688,7 +724,11 @@@@ _polkit_unix_process_get_owner (PolkitUnixProcess  *pr
@


1.2
log
@Update to polkit-0.101.
Merge several patches from upstream to fix CVE-2011-1485.

ok jasper@@
@
text
@d2 3
a4 22

From 129b6223a19e7fb2753f8cad7957ac5402394076 Mon Sep 17 00:00:00 2001
From: David Zeuthen <davidz@@redhat.com>
Date: Fri, 01 Apr 2011 16:09:45 +0000
Subject: Make PolkitUnixProcess also record the uid of the process

From dd848a42a64a3b22a0cc60f6657b56ce9b6010ae Mon Sep 17 00:00:00 2001
From: David Zeuthen <davidz@@redhat.com>
Date: Thu, 31 Mar 2011 16:59:09 +0000
Subject: PolkitUnixProcess: Clarify that the real uid is returned, not the effective one

--- src/polkit/polkitunixprocess.c.orig	Sat Feb 26 23:23:53 2011
+++ src/polkit/polkitunixprocess.c	Wed Apr 27 19:37:21 2011
@@@@ -24,16 +24,21 @@@@
 #endif
 
 #include <sys/types.h>
-#ifndef HAVE_FREEBSD
-#include <sys/stat.h>
-#else
+#ifdef HAVE_FREEBSD
 #include <sys/param.h>
d17 3
a19 23
+#include <stdio.h>
 
 #include "polkitunixprocess.h"
 #include "polkitsubject.h"
@@@@ -63,6 +68,7 @@@@ struct _PolkitUnixProcess
 
   gint pid;
   guint64 start_time;
+  gint uid;
 };
 
 struct _PolkitUnixProcessClass
@@@@ -75,6 +81,7 @@@@ enum
   PROP_0,
   PROP_PID,
   PROP_START_TIME,
+  PROP_UID
 };
 
 static void subject_iface_init (PolkitSubjectIface *subject_iface);
@@@@ -82,7 +89,10 @@@@ static void subject_iface_init (PolkitSubjectIface *su
 static guint64 get_start_time_for_pid (gint    pid,
                                        GError **error);
a21 3
+static gint _polkit_unix_process_get_owner (PolkitUnixProcess  *process,
+                                            GError            **error);
+
d26 1
a26 329
@@@@ -93,6 +103,7 @@@@ G_DEFINE_TYPE_WITH_CODE (PolkitUnixProcess, polkit_uni
 static void
 polkit_unix_process_init (PolkitUnixProcess *unix_process)
 {
+  unix_process->uid = -1;
 }
 
 static void
@@@@ -109,6 +120,10 @@@@ polkit_unix_process_get_property (GObject    *object,
       g_value_set_int (value, unix_process->pid);
       break;
 
+    case PROP_UID:
+      g_value_set_int (value, unix_process->uid);
+      break;
+
     case PROP_START_TIME:
       g_value_set_uint64 (value, unix_process->start_time);
       break;
@@@@ -133,6 +148,14 @@@@ polkit_unix_process_set_property (GObject      *object
       polkit_unix_process_set_pid (unix_process, g_value_get_int (value));
       break;
 
+    case PROP_UID:
+      polkit_unix_process_set_uid (unix_process, g_value_get_int (value));
+      break;
+
+    case PROP_START_TIME:
+      polkit_unix_process_set_start_time (unix_process, g_value_get_uint64 (value));
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@@@ -140,12 +163,39 @@@@ polkit_unix_process_set_property (GObject      *object
 }
 
 static void
+polkit_unix_process_constructed (GObject *object)
+{
+  PolkitUnixProcess *process = POLKIT_UNIX_PROCESS (object);
+
+  /* sets start_time and uid in case they are unset */
+
+  if (process->start_time == 0)
+    process->start_time = get_start_time_for_pid (process->pid, NULL);
+
+  if (process->uid == -1)
+    {
+      GError *error;
+      error = NULL;
+      process->uid = _polkit_unix_process_get_owner (process, &error);
+      if (error != NULL)
+        {
+          process->uid = -1;
+          g_error_free (error);
+        }
+    }
+
+  if (G_OBJECT_CLASS (polkit_unix_process_parent_class)->constructed != NULL)
+    G_OBJECT_CLASS (polkit_unix_process_parent_class)->constructed (object);
+}
+
+static void
 polkit_unix_process_class_init (PolkitUnixProcessClass *klass)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
 
   gobject_class->get_property = polkit_unix_process_get_property;
   gobject_class->set_property = polkit_unix_process_set_property;
+  gobject_class->constructed =  polkit_unix_process_constructed;
 
   /**
    * PolkitUnixProcess:pid:
@@@@ -157,7 +207,7 @@@@ polkit_unix_process_class_init (PolkitUnixProcessClass
                                    g_param_spec_int ("pid",
                                                      "Process ID",
                                                      "The UNIX process ID",
-                                                     -1,
+                                                     0,
                                                      G_MAXINT,
                                                      0,
                                                      G_PARAM_CONSTRUCT |
@@@@ -167,6 +217,27 @@@@ polkit_unix_process_class_init (PolkitUnixProcessClass
                                                      G_PARAM_STATIC_NICK));
 
   /**
+   * PolkitUnixProcess:uid:
+   *
+   * The UNIX user id of the process or -1 if unknown.
+   *
+   * Note that this is the real user-id, not the effective user-id.
+   */
+  g_object_class_install_property (gobject_class,
+                                   PROP_UID,
+                                   g_param_spec_int ("uid",
+                                                     "User ID",
+                                                     "The UNIX user ID",
+                                                     -1,
+                                                     G_MAXINT,
+                                                     -1,
+                                                     G_PARAM_CONSTRUCT |
+                                                     G_PARAM_READWRITE |
+                                                     G_PARAM_STATIC_NAME |
+                                                     G_PARAM_STATIC_BLURB |
+                                                     G_PARAM_STATIC_NICK));
+
+  /**
    * PolkitUnixProcess:start-time:
    *
    * The start time of the process.
@@@@ -179,7 +250,8 @@@@ polkit_unix_process_class_init (PolkitUnixProcessClass
                                                         0,
                                                         G_MAXUINT64,
                                                         0,
-                                                        G_PARAM_READABLE |
+                                                        G_PARAM_CONSTRUCT |
+                                                        G_PARAM_READWRITE |
                                                         G_PARAM_STATIC_NAME |
                                                         G_PARAM_STATIC_BLURB |
                                                         G_PARAM_STATIC_NICK));
@@@@ -187,78 +259,50 @@@@ polkit_unix_process_class_init (PolkitUnixProcessClass
 }
 
 /**
- * polkit_unix_process_get_pid:
+ * polkit_unix_process_get_uid:
  * @@process: A #PolkitUnixProcess.
  *
- * Gets the process id for @@process.
+ * Gets the user id for @@process. Note that this is the real user-id,
+ * not the effective user-id.
  *
- * Returns: The process id for @@process.
+ * Returns: The user id for @@process or -1 if unknown.
  */
 gint
-polkit_unix_process_get_pid (PolkitUnixProcess *process)
+polkit_unix_process_get_uid (PolkitUnixProcess *process)
 {
-  g_return_val_if_fail (POLKIT_IS_UNIX_PROCESS (process), 0);
-  return process->pid;
+  g_return_val_if_fail (POLKIT_IS_UNIX_PROCESS (process), -1);
+  return process->uid;
 }
 
 /**
- * polkit_unix_process_get_owner:
+ * polkit_unix_process_set_uid:
  * @@process: A #PolkitUnixProcess.
- * @@error: (allow-none): Return location for error or %NULL.
+ * @@uid: The user id to set for @@process or -1 to unset it.
  *
- * Gets the uid of the owner of @@process.
+ * Sets the (real, not effective) user id for @@process.
+ */
+void
+polkit_unix_process_set_uid (PolkitUnixProcess *process,
+                             gint               uid)
+{
+  g_return_if_fail (POLKIT_IS_UNIX_PROCESS (process));
+  g_return_if_fail (uid >= -1);
+  process->uid = uid;
+}
+
+/**
+ * polkit_unix_process_get_pid:
+ * @@process: A #PolkitUnixProcess.
  *
- * Returns: The UNIX user id of the owner for @@process or 0 if @@error is set.
- **/
+ * Gets the process id for @@process.
+ *
+ * Returns: The process id for @@process.
+ */
 gint
-polkit_unix_process_get_owner (PolkitUnixProcess  *process,
-                               GError            **error)
+polkit_unix_process_get_pid (PolkitUnixProcess *process)
 {
-  gint result;
-#ifdef HAVE_FREEBSD
-  struct kinfo_proc p;
-#else
-  struct stat statbuf;
-  char procbuf[32];
-#endif
-
   g_return_val_if_fail (POLKIT_IS_UNIX_PROCESS (process), 0);
-  g_return_val_if_fail (error == NULL || *error == NULL, 0);
-
-  result = 0;
-
-#ifdef HAVE_FREEBSD
-  if (get_kinfo_proc (process->pid, &p) == 0)
-    {
-      g_set_error (error,
-                   POLKIT_ERROR,
-                   POLKIT_ERROR_FAILED,
-                   "get_kinfo_proc() failed for pid %d: %s",
-                   process->pid,
-                   g_strerror (errno));
-      goto out;
-    }
-
-  result = p.ki_uid;
-#else
-  g_snprintf (procbuf, sizeof procbuf, "/proc/%d", process->pid);
-  if (stat (procbuf, &statbuf) != 0)
-    {
-      g_set_error (error,
-                   POLKIT_ERROR,
-                   POLKIT_ERROR_FAILED,
-                   "stat() failed for /proc/%d: %s",
-                   process->pid,
-                   g_strerror (errno));
-      goto out;
-    }
-
-  result = statbuf.st_uid;
-#endif
-
- out:
-
-  return result;
+  return process->pid;
 }
 
 /**
@@@@ -277,6 +321,21 @@@@ polkit_unix_process_get_start_time (PolkitUnixProcess 
 }
 
 /**
+ * polkit_unix_process_set_start_time:
+ * @@process: A #PolkitUnixProcess.
+ * @@start_time: The start time for @@pid.
+ *
+ * Set the start time of @@process.
+ */
+void
+polkit_unix_process_set_start_time (PolkitUnixProcess *process,
+                                    guint64            start_time)
+{
+  g_return_if_fail (POLKIT_IS_UNIX_PROCESS (process));
+  process->start_time = start_time;
+}
+
+/**
  * polkit_unix_process_set_pid:
  * @@process: A #PolkitUnixProcess.
  * @@pid: A process id.
@@@@ -289,19 +348,18 @@@@ polkit_unix_process_set_pid (PolkitUnixProcess *proces
 {
   g_return_if_fail (POLKIT_IS_UNIX_PROCESS (process));
   process->pid = pid;
-  if (pid != (gint) -1)
-    process->start_time = get_start_time_for_pid (pid, NULL);
 }
 
 /**
  * polkit_unix_process_new:
  * @@pid: The process id.
  *
- * Creates a new #PolkitUnixProcess for @@pid. The start time of the
- * process will be looked up in using e.g. the
- * <filename>/proc</filename> filesystem depending on the platform in
- * use.
+ * Creates a new #PolkitUnixProcess for @@pid.
  *
+ * The uid and start time of the process will be looked up in using
+ * e.g. the <filename>/proc</filename> filesystem depending on the
+ * platform in use.
+ *
  * Returns: (transfer full): A #PolkitSubject. Free with g_object_unref().
  */
 PolkitSubject *
@@@@ -319,22 +377,42 @@@@ polkit_unix_process_new (gint pid)
  *
  * Creates a new #PolkitUnixProcess object for @@pid and @@start_time.
  *
+ * The uid of the process will be looked up in using e.g. the
+ * <filename>/proc</filename> filesystem depending on the platform in
+ * use.
+ *
  * Returns: (transfer full): A #PolkitSubject. Free with g_object_unref().
  */
 PolkitSubject *
 polkit_unix_process_new_full (gint pid,
                               guint64 start_time)
 {
-  PolkitUnixProcess *process;
+  return POLKIT_SUBJECT (g_object_new (POLKIT_TYPE_UNIX_PROCESS,
+                                       "pid", pid,
+                                       "start_time", start_time,
+                                       NULL));
+}
 
-  process = POLKIT_UNIX_PROCESS (polkit_unix_process_new ((gint) -1));
-  process->pid = pid;
-  if (start_time != 0)
-    process->start_time = start_time;
-  else
-    process->start_time = get_start_time_for_pid (pid, NULL);
-
-  return POLKIT_SUBJECT (process);
+/**
+ * polkit_unix_process_new_for_owner:
+ * @@pid: The process id.
+ * @@start_time: The start time for @@pid or 0 to look it up in e.g. <filename>/proc</filename>.
+ * @@uid: The (real, not effective) uid of the owner of @@pid or -1 to look it up in e.g. <filename>/proc</filename>.
+ *
+ * Creates a new #PolkitUnixProcess object for @@pid, @@start_time and @@uid.
+ *
+ * Returns: (transfer full): A #PolkitSubject. Free with g_object_unref().
+ */
+PolkitSubject *
+polkit_unix_process_new_for_owner (gint    pid,
+                                   guint64 start_time,
+                                   gint    uid)
+{
+  return POLKIT_SUBJECT (g_object_new (POLKIT_TYPE_UNIX_PROCESS,
+                                       "pid", pid,
+                                       "start_time", start_time,
+                                       "uid", uid,
+                                       NULL));
 }
 
 static guint
@@@@ -482,12 +560,38 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d66 1
a66 1
@@@@ -575,10 +679,110 @@@@ get_start_time_for_pid (pid_t    pid,
d78 12
d91 1
a91 10
   return start_time;
+}
+
+static gint
+_polkit_unix_process_get_owner (PolkitUnixProcess  *process,
+                                GError            **error)
+{
+  gint result;
+  gchar *contents;
+  gchar **lines;
d93 7
a99 25
+  struct kinfo_proc p;
+#else
+  gchar filename[64];
+  guint n;
+#endif
+
+  g_return_val_if_fail (POLKIT_IS_UNIX_PROCESS (process), 0);
+  g_return_val_if_fail (error == NULL || *error == NULL, 0);
+
+  result = 0;
+  lines = NULL;
+  contents = NULL;
+
+#if defined(HAVE_FREEBSD) || defined(__OpenBSD__)
+  if (get_kinfo_proc (process->pid, &p) == 0)
+    {
+      g_set_error (error,
+                   POLKIT_ERROR,
+                   POLKIT_ERROR_FAILED,
+                   "get_kinfo_proc() failed for pid %d: %s",
+                   process->pid,
+                   g_strerror (errno));
+      goto out;
+    }
+
d101 1
a101 1
+  result = p.ki_uid;
d105 3
a107 57
+#else
+
+  /* see 'man proc' for layout of the status file
+   *
+   * Uid, Gid: Real, effective, saved set,  and  file  system  UIDs (GIDs).
+   */
+  g_snprintf (filename, sizeof filename, "/proc/%d/status", process->pid);
+  if (!g_file_get_contents (filename,
+                            &contents,
+                            NULL,
+                            error))
+    {
+      goto out;
+    }
+  lines = g_strsplit (contents, "\n", -1);
+  for (n = 0; lines != NULL && lines[n] != NULL; n++)
+    {
+      gint real_uid, effective_uid;
+      if (!g_str_has_prefix (lines[n], "Uid:"))
+        continue;
+      if (sscanf (lines[n] + 4, "%d %d", &real_uid, &effective_uid) != 2)
+        {
+          g_set_error (error,
+                       POLKIT_ERROR,
+                       POLKIT_ERROR_FAILED,
+                       "Unexpected line `%s' in file %s",
+                       lines[n],
+                       filename);
+          goto out;
+        }
+      else
+        {
+          result = real_uid;
+          goto out;
+        }
+    }
+
+  g_set_error (error,
+               POLKIT_ERROR,
+               POLKIT_ERROR_FAILED,
+               "Didn't find any line starting with `Uid:' in file %s",
+               filename);
+#endif
+
+out:
+  g_strfreev (lines);
+  g_free (contents);
+  return result;
+}
+
+/* deprecated public method */
+gint
+polkit_unix_process_get_owner (PolkitUnixProcess  *process,
+                               GError            **error)
+{
+  return _polkit_unix_process_get_owner (process, error);
 }
@


1.1
log
@Initial revision
@
text
@d2 14
a15 3
--- src/polkit/polkitunixprocess.c.orig	Wed Mar 10 18:46:19 2010
+++ src/polkit/polkitunixprocess.c	Thu Jul  1 09:19:56 2010
@@@@ -24,8 +24,13 @@@@
d20 8
a27 3
+#if !defined(HAVE_FREEBSD) && !defined(__OpenBSD__)
 #include <sys/stat.h>
+#elif defined(__OpenBSD__)
d32 33
a64 4
 #else
 #include <sys/param.h>
 #include <sys/sysctl.h>
@@@@ -86,6 +91,10 @@@@ static guint64 get_start_time_for_pid (gint    pid,
d68 164
a231 3
+#ifdef __OpenBSD__
+static gboolean get_kinfo_proc (pid_t pid, struct kinfo_proc2 *p);
+#endif
d233 14
a246 5
 G_DEFINE_TYPE_WITH_CODE (PolkitUnixProcess, polkit_unix_process, G_TYPE_OBJECT,
                          G_IMPLEMENT_INTERFACE (POLKIT_TYPE_SUBJECT, subject_iface_init)
                          );
@@@@ -214,8 +223,10 @@@@ polkit_unix_process_get_owner (PolkitUnixProcess  *pro
                                GError            **error)
d248 13
a260 1
   gint result;
d262 64
a325 8
+#if defined(HAVE_FREEBSD)
   struct kinfo_proc p;
+#elif defined(__OpenBSD__)
+  struct kinfo_proc2 p;
 #else
   struct stat statbuf;
   char procbuf[32];
@@@@ -223,7 +234,7 @@@@ polkit_unix_process_get_owner (PolkitUnixProcess  *pro
d327 37
a363 1
   result = 0;
d365 29
a393 8
-#ifdef HAVE_FREEBSD
+#if defined(HAVE_FREEBSD) || defined(__OpenBSD__)
   if (get_kinfo_proc (process->pid, &p) == 0)
     {
       g_set_error (error,
@@@@ -235,8 +246,12 @@@@ polkit_unix_process_get_owner (PolkitUnixProcess  *pro
       goto out;
     }
d395 2
a396 10
+#if defined(HAVE_FREEBSD)
   result = p.ki_uid;
 #else
+  result = p.p_uid;
+#endif
+#else
   g_snprintf (procbuf, sizeof procbuf, "/proc/%d", process->pid);
   if (stat (procbuf, &statbuf) != 0)
     {
@@@@ -476,12 +491,38 @@@@ get_kinfo_proc (pid_t pid, struct kinfo_proc *p)
d402 1
a402 1
+		struct kinfo_proc2 *p)
d411 1
a411 1
+	name[namelen++] = KERN_PROC2;
d418 1
a418 1
+		perror("sysctl kern.proc2.pid");
d436 1
a436 13
@@@@ -554,7 +595,11 @@@@ get_start_time_for_pid (pid_t    pid,
   g_free (filename);
   g_free (contents);
 #else
+#if defined(HAVE_FREEBSD)
   struct kinfo_proc p;
+#else
+  struct kinfo_proc2 p;
+#endif
 
   start_time = 0;
 
@@@@ -569,7 +614,11 @@@@ get_start_time_for_pid (pid_t    pid,
d448 99
@


1.1.1.1
log
@Import polkit-0.97.

PolicyKit is an application-level toolkit for defining and handling the
policy that allows unprivileged processes to speak to privileged
processes. It is a framework for centralizing the decision making
process with respect to granting access to privileged operations for
unprivileged applications. PolicyKit is specifically targeting
applications in rich desktop environments on multi-user UNIX-like
operating systems. It does not imply or rely on any exotic kernel
features.


bsd_auth(3) support is based on the Slackware Linux shadow
authentication port.
Several patches from FreeBSD and NetBSD.

*While basic functionnality works, this is NOT hooked up yet as more
things are coming*
@
text
@@
