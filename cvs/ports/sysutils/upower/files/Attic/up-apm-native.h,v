head	1.2;
access;
symbols
	landry_20110523:1.1.1.1 landry:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2011.05.30.07.48.53;	author landry;	state dead;
branches;
next	1.1;

1.1
date	2011.05.23.19.04.57;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.23.19.04.57;	author landry;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to upower 0.9.11, remove patches merged upstream, add a patch
from jasper@@ to fix an implicit declaration warning (pushed upstream)
@
text
@/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
 *
 * Copyright (C) 2011 Landry Breuil <landry@@openbsd.org>
 *
 * Licensed under the GNU General Public License Version 2
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef __UP_APM_NATIVE_H__
#define __UP_APM_NATIVE_H__

/* os-specific headers */
#include <errno.h> /* errno */
#include <fcntl.h> /* open() */
/* kevent() */
#include <sys/types.h>
#include <sys/event.h>
#include <sys/time.h>
#include <sys/ioctl.h> /* ioctl() */
/* APM macros */

#include <machine/apmvar.h>

/* sensor struct defs */
#include <sys/sensors.h>

/* sysctl() */
#include <sys/param.h>
#include <sys/sysctl.h>

#include <glib.h>
#include <glib-object.h>

G_BEGIN_DECLS

#define UP_TYPE_APM_NATIVE		(up_apm_native_get_type ())
#define UP_APM_NATIVE(o)	   	(G_TYPE_CHECK_INSTANCE_CAST ((o), UP_TYPE_APM_NATIVE, UpApmNative))
#define UP_APM_NATIVE_CLASS(k)	(G_TYPE_CHECK_CLASS_CAST((k), UP_TYPE_APM_NATIVE, UpApmNativeClass))
#define UP_IS_APM_NATIVE(o)	(G_TYPE_CHECK_INSTANCE_TYPE ((o), UP_TYPE_APM_NATIVE))
#define UP_IS_APM_NATIVE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), UP_TYPE_APM_NATIVE))
#define UP_APM_NATIVE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UP_TYPE_APM_NATIVE, UpApmNativeClass))

typedef struct
{
	GObject	parent;
	gchar*	path;
} UpApmNative;

typedef struct
{
	GObjectClass	parent_class;
} UpApmNativeClass;


// XX in .c ?
//GType up_apm_native_get_type (void);
//G_DEFINE_TYPE (UpApmNative, up_apm_native, G_TYPE_OBJECT)

UpApmNative* up_apm_native_new (const char*);
const gchar * up_apm_native_get_path(UpApmNative*);
gboolean up_native_is_laptop();
gboolean up_native_get_sensordev(const char*, struct sensordev*);
G_END_DECLS

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import upower 0.9.10:

UPower is an abstraction for enumerating power devices, listening to
device events and querying history and statistics. Any application or
service on the system can access the org.freedesktop.UPower service
via the DBUS system message bus.

OpenBSD specific backend written by yours truly with help from upstream
developer. So far, battery levels and ac status works, using either apm
or acpibat/acpiac if available.

As a sidenote, if udev, udisks and friends were designed with the same
clear separation between os-specific and generic parts, porting to
'alternative OSes' would be much simpler. UPower is a nice example of
'how to design a portable service'.

with a patch for glib version check, tweaks and ok ajacoutot@@
@
text
@@
