head	1.2;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.12
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	sthen_20140605:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.05.18.21.27.47;	author espie;	state Exp;
branches;
next	1.1;
commitid	Q5schz1TwPeY97NN;

1.1
date	2014.06.05.15.40.09;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	CcWvZc3ZbkKiPHj3;

1.1.1.1
date	2014.06.05.15.40.09;	author sthen;	state Exp;
branches;
next	;
commitid	CcWvZc3ZbkKiPHj3;


desc
@@


1.2
log
@fix memset size, as found by clang
@
text
@$OpenBSD: patch-usmb_dir_c,v 1.1.1.1 2014/06/05 15:40:09 sthen Exp $

allow readdir to work.

Index: usmb_dir.c
--- usmb_dir.c.orig
+++ usmb_dir.c
@@@@ -30,6 +30,7 @@@@
 #include "usmb.h"
 #include "utils.h"
 
+#include <unistd.h>
 
 int usmb_mkdir (const char *dirname, mode_t mode)
 {
@@@@ -111,19 +112,21 @@@@ int usmb_readdir (const char *path, void *h, fuse_fill
     while (NULL != (dirent = smbc_getFunctionReaddir (ctx_) (ctx_, file)))
     {
       struct stat stbuf;
+      memset(&stbuf, 0, sizeof(stbuf));
+      stbuf.st_ino = arc4random();
 
       switch (dirent->smbc_type)
       {
         case SMBC_DIR:
-          stbuf.st_mode = DT_DIR << 12;
+          stbuf.st_mode = S_IFDIR;
           break;
 
         case SMBC_FILE:
-          stbuf.st_mode = DT_REG << 12;
+          stbuf.st_mode = S_IFREG;
           break;
 
         case SMBC_LINK:
-          stbuf.st_mode = DT_LNK << 12;
+          stbuf.st_mode = S_IFLNK;
           break;
 
         default:
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 2
--- usmb_dir.c.orig	Mon Feb  4 20:32:17 2013
+++ usmb_dir.c	Thu Jun  5 16:35:40 2014
d20 1
a20 1
+      memset(&stbuf, 0, sizeof(&stbuf));
@


1.1.1.1
log
@import ports/sysutils/usmb; ok and readdir fix from syl@@ (who also fixed
various fuse problems found in the course of porting/testing).


usmb lets you mount SMB shares as unprivileged users via FUSE, in the
vein of Windows' Map Network Drive facility. It differs from the other
FUSE SMB filesystems (fusesmb, SMB for FUSE) in that it doesn't have
Network Neighbourhood functionality: this means that you can mount
shares that you can't see via NetBIOS browsing.

(Note: unprivileged mounting requires both kern.usermount=1 and access
to /dev/fuse0).
@
text
@@
