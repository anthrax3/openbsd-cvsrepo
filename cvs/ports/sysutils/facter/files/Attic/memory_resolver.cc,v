head	1.6;
access;
symbols
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@// @;


1.6
date	2016.05.30.15.07.58;	author jasper;	state dead;
branches;
next	1.5;
commitid	mTPWHYxdzRBIjhfj;

1.5
date	2015.08.31.11.52.09;	author jasper;	state Exp;
branches;
next	1.4;
commitid	XDYGwc9bEdsXdGdf;

1.4
date	2015.08.28.06.37.23;	author jasper;	state Exp;
branches;
next	1.3;
commitid	FsCEKn5zsAF8crnK;

1.3
date	2015.08.27.18.17.57;	author jasper;	state Exp;
branches;
next	1.2;
commitid	zWOcDZ8i5ACk7nN4;

1.2
date	2015.07.30.07.56.20;	author jasper;	state Exp;
branches;
next	1.1;
commitid	0ZvPQblCK0NE2BfT;

1.1
date	2015.07.14.22.02.25;	author jasper;	state Exp;
branches;
next	;
commitid	IyxaDSpGFSupZ4l0;


desc
@@


1.6
log
@long overdue update to facter-3.1.7; all our patches have been merged upstream
however some new patches are needed to deal with the split-off leatherman lib.
@
text
@#include <internal/facts/openbsd/memory_resolver.hpp>
#include <facter/execution/execution.hpp>
#include <leatherman/logging/logging.hpp>
#include <sys/types.h>
#include <sys/param.h>
#include <sys/mount.h>
#include <sys/sysctl.h>
#include <sys/swap.h>
#include <unistd.h>

using namespace std;
using namespace facter::execution;
using namespace facter::util;

namespace facter { namespace facts { namespace openbsd {

    memory_resolver::data memory_resolver::collect_data(collection& facts)
    {
        data result;

        // Get the system page size
        int pagesize_mib[] = { CTL_HW, HW_PAGESIZE };
        int page_size = 0;
        size_t len = sizeof(page_size);
        if (sysctl(pagesize_mib, 2, &page_size, &len, nullptr, 0) == -1) {
            LOG_DEBUG("sysctl failed: %1% (%2%): system page size is unknown.", strerror(errno), errno);
        } else {
            int uvmexp_mib[] = { CTL_VM, VM_UVMEXP };
            struct uvmexp uvmexp;
            len = sizeof(uvmexp);
            if (sysctl(uvmexp_mib, 2, &uvmexp, &len, nullptr, 0) == -1) {
                LOG_DEBUG("sysctl uvmexp failed: %1% (%2%): free memory is not available.", strerror(errno), errno);
            }

            // Should we account for the buffer cache?
            result.mem_total = static_cast<u_int64_t>(uvmexp.npages) << uvmexp.pageshift;
            result.mem_free = static_cast<u_int64_t>(uvmexp.free) << uvmexp.pageshift;
        }

        // NB: swapctl(2) for SWAP_NSWAP cannot fail
        int nswaps = swapctl(SWAP_NSWAP, 0, 0);
        vector<struct swapent> swapdev(nswaps);

        if (swapctl(SWAP_STATS, swapdev.data(), nswaps) == -1) {
             LOG_DEBUG("swapctl: SWAP_STATS failed: %1% (%2%)", strerror(errno), errno);
             return result;
        }

        uint64_t swap_used = 0;
        for (auto &&swap : swapdev) {
            if (swap.se_flags & SWF_ENABLE) {
                result.swap_total += swap.se_nblks * DEV_BSIZE;
                swap_used += swap.se_inuse * DEV_BSIZE;
            }
        }

        result.swap_free = result.swap_total - swap_used;

        // 0 is for CTL_SWPENC_NAMES' "enable", see uvm_swap_encrypt.h
        int swap_encrypted_mib[] = { CTL_VM, VM_SWAPENCRYPT, 0 };
        int encrypted;
        len = sizeof(encrypted);

        if (sysctl(swap_encrypted_mib, 3, &encrypted, &len, nullptr, 0) == -1) {
            LOG_DEBUG("sysctl failed: %1% (%2%): encrypted swap fact not available.", strerror(errno), errno);
        }

        result.swap_encryption = encrypted ? encryption_status::encrypted : encryption_status::not_encrypted;

        return result;
    }

}}}  // namespace facter::facts::openbsd
@


1.5
log
@merged upstream
@
text
@@


1.4
log
@harder, better(?), faster(?) C++
@
text
@d28 6
a33 6
                int uvmexp_mib[] = { CTL_VM, VM_UVMEXP };
                struct uvmexp uvmexp;
                len = sizeof(uvmexp);
                if (sysctl(uvmexp_mib, 2, &uvmexp, &len, nullptr, 0) == -1) {
                    LOG_DEBUG("sysctl uvmexp failed: %1% (%2%): free memory is not available.", strerror(errno), errno);
                }
d35 3
a37 3
                // Should we account for the buffer cache?
                result.mem_total = static_cast<u_int64_t>(uvmexp.npages) << uvmexp.pageshift;
                result.mem_free = static_cast<u_int64_t>(uvmexp.free) << uvmexp.pageshift;
d51 4
a54 4
          if (swap.se_flags & SWF_ENABLE) {
              result.swap_total += swap.se_nblks * DEV_BSIZE;
              swap_used += swap.se_inuse * DEV_BSIZE;
          }
@


1.3
log
@implement swap facts
@
text
@d22 1
a22 1
        int pagesize_mib[] = { CTL_HW, HW_PAGESIZE};
a39 4
        struct swapent *swapdev;
        int nswaps, s;
        uint64_t swap_used = 0;

d41 2
a42 4
        nswaps = swapctl(SWAP_NSWAP, 0, 0);

        if ((swapdev = (struct swapent *)calloc(nswaps, sizeof(*swapdev))) == NULL)
            LOG_DEBUG("cannot allocate swapdev.");
d44 1
a44 1
        if (swapctl(SWAP_STATS, swapdev, nswaps) == -1)
d46 2
d49 6
a54 5
        for (s = 0; s < nswaps; s++) {
            if (swapdev[s].se_flags & SWF_ENABLE) {
                result.swap_total += (swapdev[s].se_nblks * DEV_BSIZE);
                swap_used += (swapdev[s].se_inuse * DEV_BSIZE);
            }
d65 1
a65 1
                LOG_DEBUG("sysctl failed: %1% (%2%): encrypted swap fact not available.", strerror(errno), errno);
d69 1
@


1.2
log
@small tweaks incorporated while trying to push this upstream
@
text
@a39 1
#if 0
d55 2
a56 2
                result.swap_total += (swapdev[s].se_nblks * DEV_BSIZE) * 1024;
                swap_used += (swapdev[s].se_inuse * DEV_BSIZE) * 1024;
d62 2
a63 8
        // Adjust for blocksize to have it scale to 1024 if needed as facter
        // will re-adjust to 1024
        if (DEV_BSIZE == 512) {
                result.swap_total *= 4;
                result.swap_free *= 4;
        }

        int swap_encrypted_mib[] = { CTL_VM, VM_SWAPENCRYPT };
d66 2
a67 1
        if (sysctl(swap_encrypted_mib, 2, &encrypted, &len, nullptr, 0) == -1) {
a71 1
#endif
@


1.1
log
@add memory resolver too (minus swap for now)
@
text
@a19 1
        size_t len;
d24 1
a24 1
        len = sizeof(page_size);
d36 2
a37 2
                result.mem_total = (uint64_t) uvmexp.npages << uvmexp.pageshift;
                result.mem_free = (uint64_t) uvmexp.free << uvmexp.pageshift;
@

