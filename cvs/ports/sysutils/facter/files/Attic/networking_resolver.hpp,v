head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2;
locks; strict;
comment	@// @;


1.3
date	2016.05.30.15.07.58;	author jasper;	state dead;
branches;
next	1.2;
commitid	mTPWHYxdzRBIjhfj;

1.2
date	2015.07.14.21.59.09;	author jasper;	state Exp;
branches;
next	1.1;
commitid	uvFoXrOG1zGPyqyr;

1.1
date	2015.07.14.21.45.15;	author jasper;	state Exp;
branches;
next	;
commitid	RWYrmy9XI3WnDLL5;


desc
@@


1.3
log
@long overdue update to facter-3.1.7; all our patches have been merged upstream
however some new patches are needed to deal with the split-off leatherman lib.
@
text
@/**
 * @@file
 * Declares the OpenBSD networking fact resolver.
 */
#pragma once

#include "../bsd/networking_resolver.hpp"
#include <map>
#include <ifaddrs.h>

namespace facter { namespace facts { namespace openbsd {

    /**
     * Responsible for resolving networking facts.
     */
    struct networking_resolver : bsd::networking_resolver
    {
     protected:
        /**
         * Gets the MTU of the link layer data.
         * @@param interface The name of the link layer interface.
         * @@param data The data pointer from the link layer interface.
         * @@return Returns The MTU of the interface.
         */
        virtual boost::optional<uint64_t> get_link_mtu(std::string const& interface, void* data) const override;

        /**
         * Determines if the given sock address is a link layer address.
         * @@param addr The socket address to check.
         * @@returns Returns true if the socket address is a link layer address or false if it is not.
         */
        virtual bool is_link_address(sockaddr const* addr) const override;

        /**
         * Gets the bytes of the link address.
         * @@param addr The socket address representing the link address.
         * @@return Returns a pointer to the address bytes or nullptr if not a link address.
         */
        virtual uint8_t const* get_link_address_bytes(sockaddr const* addr) const override;
    };

}}}  // namespace facter::facts::openbsd
@


1.2
log
@- implement processor facts
- dont override dhcp methods; we can read the dhclient.leases files just fine
@
text
@@


1.1
log
@implement networking resolver; this finally gives us the 'fqdn' fact (among others)
@
text
@a39 13

        /**
         * Finds known DHCP servers for all interfaces.
         * @@return Returns a map between interface name and DHCP server.
         */
        virtual std::map<std::string, std::string> find_dhcp_servers() const override;

        /**
         * Finds the DHCP server for the given interface.
         * @@param interface The interface to find the DHCP server for.
         * @@returns Returns the DHCP server for the interface or empty string if one isn't found.
         */
        virtual std::string find_dhcp_server(std::string const& interface) const override;
@

