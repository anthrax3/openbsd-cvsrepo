head	1.2;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	ajacoutot_20160506:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.05.27.13.53.07;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	SDpZdO8hfYIlMQ9j;

1.1
date	2016.05.06.15.10.00;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;
commitid	auvKYFZIbikKwW40;

1.1.1.1
date	2016.05.06.15.10.00;	author ajacoutot;	state Exp;
branches;
next	;
commitid	auvKYFZIbikKwW40;


desc
@@


1.2
log
@Cope with recent rc.subr(8) change (removal of rc_bg etc.)
@
text
@#!/bin/sh
#
# $OpenBSD: serf.rc,v 1.1.1.1 2016/05/06 15:10:00 ajacoutot Exp $

daemon="${TRUEPREFIX}/bin/serf agent"
daemon_flags="-syslog"
daemon_user="_serf"

. /etc/rc.d/rc.subr

rc_stop() {
	pkill -INT -T "${daemon_rtable}" -xf "${pexp}"
}

rc_cmd $1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# $OpenBSD: messagebus.rc,v 1.1 2015/04/04 09:18:54 ajacoutot Exp $
a9 2

rc_bg=YES
@


1.1.1.1
log
@Import hashicorp-serf-0.7.0.
("serf" was already taken by net/serf)

Serf is a decentralized solution for service discovery and orchestration that is
lightweight, highly available, and fault tolerant.

An efficient and lightweight gossip protocol is used to communicate with other
nodes. Serf can detect node failures and notify the rest of the cluster. An
event system is built on top of Serf, letting you use Serf's gossip protocol to
propagate events such as deploys, configuration changes, etc. Serf is completely
masterless with no single point of failure.

ok jasper@@
@
text
@@
