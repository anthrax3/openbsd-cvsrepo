head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.12
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_0:1.1.0.16
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.14
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.12
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.11.03.09.12.41;	author ratchov;	state Exp;
branches;
next	1.2;
commitid	yFqAb7yPLu4BWe1S;

1.2
date	2011.12.07.07.56.12;	author sebastia;	state dead;
branches;
next	1.1;

1.1
date	2007.11.11.01.41.11;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Use sndio to play sound.

help from and ok jca, ok armani
@
text
@$OpenBSD$
--- cdda2wav/sndconfig.c.orig	Sun Nov 29 23:07:37 2009
+++ cdda2wav/sndconfig.c	Fri Oct 31 10:18:09 2014
@@@@ -51,6 +51,10 @@@@ static	UConst char sccsid[] =
 # endif
 #endif
 
+#ifdef	HAVE_SNDIO
+#include <sndio.h>
+#endif
+
 #include "mytype.h"
 #include "byteorder.h"
 #include "lowlevel.h"
@@@@ -85,7 +89,11 @@@@ static PLAYLISTSTRUCTURE PlayList[FRAGMENTS + 1];
 static unsigned BufferInd;
 #   endif /* defined __EMX__ */
 
+#if	defined(HAVE_SNDIO)
+static char snd_device[200] = SIO_DEVANY;
+#else
 static char snd_device[200] = SOUND_DEV;
+#endif
 
 int
 set_snd_device(devicename)
@@@@ -161,6 +169,11 @@@@ check_winsound_caps(bits, rate, channels)
 snd_pcm_t	*pcm_handle;
 #endif
 
+#ifdef	HAVE_SNDIO
+struct sio_hdl *hdl;
+struct sio_par par;
+#endif
+
 #if	defined	HAVE_OSS && defined SNDCTL_DSP_GETOSPACE
 audio_buf_info abinfo;
 #endif
@@@@ -172,6 +185,41 @@@@ init_soundcard(rate, bits)
 {
 #ifdef	ECHO_TO_SOUNDCARD
 	if (global.echo) {
+# if	defined(HAVE_SNDIO)
+		hdl = sio_open(snd_device, SIO_PLAY, 0);
+		if (hdl == NULL) {
+			errmsg("Cannot open sound device '%s'.\n", snd_device);
+			return (1);
+		}
+		sio_initpar(&par);
+		par.bits = bits;
+		par.sig = 1;
+		par.le = SIO_LE_NATIVE;
+		par.pchan = 2;
+		par.rate = rate;
+		par.appbufsz = 44100 / 4;
+		if (!sio_setpar(hdl, &par) || !sio_getpar(hdl, &par)) {
+			errmsg("Cannot set sound parameters for '%s'.\n", snd_device);
+			sio_close(hdl);
+			hdl = NULL;
+			return (1);
+		}
+		if (par.bits != bits || par.sig != 1 || par.le != SIO_LE_NATIVE ||
+		    par.pchan != 2 || par.rate != (int)rate) {
+			errmsg("Unsupported sound parameters for '%s'.\n", snd_device);
+			sio_close(hdl);
+			hdl = NULL;
+			return (1);
+		}
+		if (!sio_start(hdl)) {
+			errmsg("Couldn't start sound device '%s'.\n", snd_device);
+			sio_close(hdl);
+			hdl = NULL;
+			return (1);
+		}
+
+# else /* HAVE_SNDIO */
+
 # if	defined(HAVE_OSS) && HAVE_OSS == 1
 		if (open_snd_device() != 0) {
 			errmsg("Cannot open sound device '%s'.\n", snd_device);
@@@@ -543,6 +591,7 @@@@ init_soundcard(rate, bits)
 #   endif /* CYGWIN Windows sound */
 #  endif /* else SUN audio */
 # endif /* else HAVE_OSS */
+# endif /* else HAVE_SNDIO */
 	}
 #endif /* ifdef ECHO_TO_SOUNDCARD */
 	return (0);
@@@@ -586,6 +635,12 @@@@ close_snd_device()
 	return (0);
 #else
 
+# if	defined(HAVE_SNDIO)
+	if (hdl != NULL) {
+		sio_close(hdl);
+		hdl = NULL;
+	}
+#else
 # if	defined(__CYGWIN32__) || defined(__MINGW32__)
 	waveOutReset(0);
 	return (waveOutClose(DeviceID));
@@@@ -610,6 +665,7 @@@@ close_snd_device()
 #   endif /* !QNX */
 #  endif /* !EMX */
 # endif /* !Cygwin32 */
+# endif
 #endif /* ifdef ECHO_TO_SOUNDCARD */
 }
 
@@@@ -620,6 +676,10 @@@@ write_snd_device(buffer, todo)
 {
 	int	result = 0;
 #ifdef	ECHO_TO_SOUNDCARD
+#if	defined(HAVE_SNDIO)
+	if (hdl == NULL || !sio_write(hdl, buffer, todo))
+		return (1);
+#else
 #if	defined(__CYGWIN32__) || defined(__MINGW32__)
 	MMRESULT	mmres;
 
@@@@ -706,6 +766,7 @@@@ outside_loop:
 	;
 #endif	/* !defined __EMX__ */
 #endif	/* !defined __CYGWIN32__ */
+#endif
 #endif	/* ECHO_TO_SOUNDCARD */
 	return (result);
 }
@


1.2
log
@update cdrtools to 3.00.

based on initial diff from pascal@@
lots of feedback and compiling on alpha from naddy@@

OK naddy@@
@
text
@d1 37
a37 18
$OpenBSD: patch-cdda2wav_sndconfig_c,v 1.1 2007/11/11 01:41:11 jakemsr Exp $
--- cdda2wav/sndconfig.c.orig	Mon Oct 29 03:51:04 2007
+++ cdda2wav/sndconfig.c	Mon Oct 29 03:59:12 2007
@@@@ -163,11 +163,11 @@@@ int init_soundcard(rate, bits)
         	(MY_LITTLE_ENDIAN ? AFMT_S16_LE : AFMT_S16_BE);
 	int mask;
 
-	if (ioctl(global.soundcard_fd, (int)SNDCTL_DSP_GETBLKSIZE, &dummy) == -1) {
+	if (ioctl(global.soundcard_fd, SNDCTL_DSP_GETBLKSIZE, &dummy) == -1) {
 	    fprintf(stderr, "Cannot get blocksize for %s\n", snd_device);
 	    global.echo = 0;
 	}
-	if (ioctl(global.soundcard_fd, (int)SNDCTL_DSP_SYNC, NULL) == -1) {
+	if (ioctl(global.soundcard_fd, SNDCTL_DSP_SYNC, NULL) == -1) {
 	    fprintf(stderr, "Cannot sync for %s\n", snd_device);
 	    global.echo = 0;
 	}
@@@@ -180,7 +180,7 @@@@ int init_soundcard(rate, bits)
d39 53
d93 16
a108 15
 	/* check, if the sound device can do the requested format */
-	if (ioctl(global.soundcard_fd, (int)SNDCTL_DSP_GETFMTS, &mask) == -1) {
+	if (ioctl(global.soundcard_fd, SNDCTL_DSP_GETFMTS, &mask) == -1) {
 		perror("fatal error:");
 		return -1;
 	}
@@@@ -191,25 +191,25 @@@@ int init_soundcard(rate, bits)
 			myformat = AFMT_U8;
 		}
 	}
-	if (ioctl(global.soundcard_fd, (int)SNDCTL_DSP_SETFMT, &myformat) == -1) {
+	if (ioctl(global.soundcard_fd, SNDCTL_DSP_SETFMT, &myformat) == -1) {
 	    fprintf(stderr, "Cannot set %d bits/sample for %s\n",bits, snd_device);
 	    global.echo = 0;
 	}
d110 10
a119 13
 	/* limited sound devices may not support stereo */
 	if (stereo
-	    && ioctl(global.soundcard_fd, (int)SNDCTL_DSP_STEREO, &stereo) == -1) {
+	    && ioctl(global.soundcard_fd, SNDCTL_DSP_STEREO, &stereo) == -1) {
 	    fprintf(stderr, "Cannot set stereo mode for %s\n", snd_device);
 	    stereo = 0;
 	}
 	if (!stereo
-            && ioctl(global.soundcard_fd, (int)SNDCTL_DSP_STEREO, &stereo) == -1) {
+            && ioctl(global.soundcard_fd, SNDCTL_DSP_STEREO, &stereo) == -1) {
 	    fprintf(stderr, "Cannot set mono mode for %s\n", snd_device);
 	    global.echo = 0;
 	}
d121 8
a128 6
 	/* set the sample rate */
-	if (ioctl(global.soundcard_fd, (int)SNDCTL_DSP_SPEED, &garbled_rate) == -1) {
+	if (ioctl(global.soundcard_fd, SNDCTL_DSP_SPEED, &garbled_rate) == -1) {
 	    fprintf(stderr, "Cannot set rate %d.%2d Hz for %s\n",
 		(int)rate, (int)(rate*100)%100, snd_device);
 	    global.echo = 0;
@


1.1
log
@make 'cdda2wav -e' work
@
text
@d1 1
a1 1
$OpenBSD$
@

