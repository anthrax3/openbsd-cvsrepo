head	1.2;
access;
symbols
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	ajacoutot_20071121:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.07.11.09.48.07;	author sebastia;	state dead;
branches;
next	1.1;

1.1
date	2007.11.21.18.48.39;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.21.18.48.39;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bye bye heartbeat.
this version in the tree here was old, and got broken due to the
gnutls update. instead of fixing it, get rid of it.

OK aja@@
@
text
@$OpenBSD: patch-lib_plugins_HBcomm_ucast_c,v 1.1 2007/11/21 18:48:39 ajacoutot Exp $
--- lib/plugins/HBcomm/ucast.c.orig	Thu Oct 25 09:40:41 2007
+++ lib/plugins/HBcomm/ucast.c	Mon Nov 12 11:13:26 2007
@@@@ -455,6 +455,9 @@@@ static int HB_make_send_sock(struct hb_media *mp)
 #if defined(SO_BINDTODEVICE)
 	struct ifreq i;
 #endif
+#if defined(SO_REUSEPORT)
+	int i = 1;
+#endif
 
 	UCASTASSERT(mp);
 	ei = (struct ip_private*)mp->pd;
@@@@ -501,6 +504,22 @@@@ static int HB_make_send_sock(struct hb_media *mp)
 			i.ifr_name);
 	}
 #endif
+#if defined(SO_REUSEPORT)
+	{
+		/* this is for OpenBSD to allow multiple *
+		*  ucast connections, e.g. a more than   *
+		*  two node cluster 			 */
+
+		if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEPORT,
+				&i, sizeof(i)) == -1) {
+			PILCallLog(LOG, PIL_CRIT,
+			  "ucast: error setting option SO_REUSEPORT(w): %s", strerror(errno));
+			close(sockfd);
+			return -1;
+		}
+		PILCallLog(LOG, PIL_INFO, "ucast: set SO_REUSEPORT(w)");
+	}
+#endif
 	if (fcntl(sockfd,F_SETFD, FD_CLOEXEC) < 0) {
 		PILCallLog(LOG, PIL_CRIT, "ucast: error setting close-on-exec flag: %s",
 			strerror(errno));
@@@@ -569,6 +588,22 @@@@ static int HB_make_receive_sock(struct hb_media *mp) {
 		}
 		PILCallLog(LOG, PIL_INFO, "ucast: bound receive socket to device: %s",
 			i.ifr_name);
+	}
+#endif
+#if defined(SO_REUSEPORT)
+	{
+		/*
+		 *  Needed for OpenBSD for more than two nodes in a ucast cluster
+		 */
+		int i = 1;
+		if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEPORT,
+				&i, sizeof(i)) == -1) {
+			PILCallLog(LOG, PIL_CRIT,
+			  "ucast: error setting option SO_REUSEPORT(r) %s", strerror(errno));
+			close(sockfd);
+			return -1;
+		}
+		PILCallLog(LOG, PIL_INFO, "ucast: set SO_REUSEPORT(w)");
 	}
 #endif
 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import heartbeat-2.1.2-15

The basic goal of the High Availability Linux project is to provide a
high availability (clustering) solution for Linux (and Unix-like) which
promotes reliability, availability, and serviceability (RAS) through a
community development effort.

Inspired from an original submission by Sebastian Reitenbach
(maintainer) whom I want to thank for his work and patience.
@
text
@@
