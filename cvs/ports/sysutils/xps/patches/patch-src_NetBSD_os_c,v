head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.14
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.09.24.09.00.23;	author jca;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.18.21.38.12;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.06.13.02.01;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.26.16.36.59;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@P_INMEM is no more after the recent struct kinfo_proc change.
No functional change.  Patch by espie@@
@
text
@$OpenBSD: patch-src_NetBSD_os_c,v 1.3 2012/12/18 21:38:12 sthen Exp $

yes, I know there's a src/OpenBSD in there too.
it's not used somehow...

--- src/NetBSD/os.c.orig	Thu Apr 24 02:21:29 2003
+++ src/NetBSD/os.c	Tue Sep 24 00:05:20 2013
@@@@ -26,7 +26,9 @@@@
 #include <fcntl.h>
 #include <limits.h>
 #include <sys/param.h>
+#include <sys/proc.h>
 #include <sys/sysctl.h>
+#include <stdlib.h>
 #include <X11/Intrinsic.h>
 #include <X11/StringDefs.h>
 #include <Xm/Xm.h>
@@@@ -82,11 +84,7 @@@@ GetProcInfo(void)
     exit(5);
   }
 
-#ifdef OpenBSD
-  kp = kvm_getprocs(kd, KERN_PROC_KTHREAD, 0, &nentries);
-#else
-  kp = kvm_getprocs(kd, KERN_PROC_ALL, 0, &nentries);
-#endif
+  kp = kvm_getprocs(kd, KERN_PROC_KTHREAD, 0, sizeof(struct kinfo_proc), &nentries);
   if (kp == NULL) {
     char msg[_POSIX2_LINE_MAX * 2];
 
@@@@ -126,7 +124,7 @@@@ GetStatus(ProcInfo *p)
 #ifdef HAVE_REGEX
     if (active.match_regexp) {
       int regmatch = regexec(&active.re_pat, 
-			     IDtouser(proc->kp_eproc.e_pcred.p_ruid), 
+			     IDtouser(proc->p_ruid), 
 			     (size_t) NULL, (regmatch_t *) NULL,
 			     REG_NOTBOL|REG_NOTEOL);
       if (regmatch == REG_NOMATCH) {
@@@@ -134,7 +132,7 @@@@ GetStatus(ProcInfo *p)
       }
     } else {
 #endif
-      if (active.uid_displayed != proc->kp_eproc.e_pcred.p_ruid)
+      if (active.uid_displayed != proc->p_ruid)
 	return False;
 #ifdef HAVE_REGEX
     }
@@@@ -142,7 +140,7 @@@@ GetStatus(ProcInfo *p)
 }
 
   /* root process */
-  if (proc->kp_proc.p_pid == ROOT_PID && base.showKernel == False)
+  if (proc->p_pid == ROOT_PID && base.showKernel == False)
     return False;
 
   /* 
@@@@ -157,19 +155,21 @@@@ GetStatus(ProcInfo *p)
 
     See also the comments in BSDI/xps.c.  */
 
-  if (proc->kp_proc.p_flag & P_SYSTEM && base.showKernel == False)
+  if (proc->p_flag & P_SYSTEM && base.showKernel == False)
     /* a "kernel" process */
     return False;
   
-  EndNode->pid = proc->kp_proc.p_pid;
-  EndNode->ppid = proc->kp_eproc.e_ppid;
+  EndNode->pid = proc->p_pid;
+  EndNode->ppid = proc->p_ppid;
 
-  if (proc->kp_proc.p_pid == MyPid && !cmd_options.me_too)
+  if (proc->p_pid == MyPid && !cmd_options.me_too)
     pstat = SSLEEP;
-  else if ((proc->kp_proc.p_flag & P_INMEM) == 0)
+#if defined(P_INMEM)
+  else if ((proc->p_flag & P_INMEM) == 0)
     pstat = SSWAP;
+#endif
   else
-    pstat = proc->kp_proc.p_stat;
+    pstat = proc->p_stat;
 
   EndNode->color = base.nodeColor[pstat];
   return True;
@@@@ -179,26 +179,26 @@@@ void 
 GetProcName(ProcInfo *p, TREENODE *node)
 {
   ProcInfo proc = *p;
-  node->uid = proc->kp_eproc.e_pcred.p_ruid;
+  node->uid = proc->p_ruid;
 
-  if (proc->kp_proc.p_stat == SZOMB)
+  if (proc->p_stat == SZOMB)
     strcpy(node->label, "*zombie*");
-  else if (proc->kp_proc.p_pid == ROOT_PID)
+  else if (proc->p_pid == ROOT_PID)
     strcpy(node->label, "*root*");
-  else if (proc->kp_proc.p_flag & SIDL)
+  else if (proc->p_flag & SIDL)
     strcpy(node->label, "*kernel*");
   else  {
       char *username;
       int i;
 
-      strncpy(node->label, proc->kp_proc.p_comm, 16);
-      if ((proc->kp_proc.p_pid != MyPid) && (proc->kp_proc.p_stat != SSLEEP)) return;
+      strncpy(node->label, proc->p_comm, 16);
+      if ((proc->p_pid != MyPid) && (proc->p_stat != SSLEEP)) return;
 
       /* We've got a sleeping process. (Hopefully that's the majority of 
 	 the processes. Assign a color based on userid. */
-      node->color = GetUID_Color(proc->kp_eproc.e_pcred.p_ruid);
+      node->color = GetUID_Color(proc->p_ruid);
  
-      if ( (username=IDtouser(proc->kp_eproc.e_pcred.p_ruid)) != NULL ) {
+      if ( (username=IDtouser(proc->p_ruid)) != NULL ) {
 	strcpy(node->label1, username);
       } else {
 	strcpy(node->label1, UNKNOWN_USER);
@@@@ -209,7 +209,7 @@@@ GetProcName(ProcInfo *p, TREENODE *node)
 #ifdef XPS_RECOLOR_LOGIN_PROCESSES      
       for (i=0;i<NUMLABS ;i++ ) {
 	if (strcmp(node->label, label_array[i]) == 0) {
-	  strcpy(node->label, IDtouser(proc->kp_eproc.e_pcred.p_ruid));
+	  strcpy(node->label, IDtouser(proc->p_ruid));
 	  strcpy(node->label1, label_array[i]);
 	  node->color = base.xterm;
 	  node->show_username = 1;
@@@@ -218,7 +218,7 @@@@ GetProcName(ProcInfo *p, TREENODE *node)
       } /* endfor */
 #endif
 
-      if ((proc->kp_proc.p_pid == base.selected_pid)) {
+      if ((proc->p_pid == base.selected_pid)) {
 	node->color = base.selected_color;
       }
 
@


1.3
log
@cope with sysctl.h changes
@
text
@d1 1
a1 1
$OpenBSD: patch-src_NetBSD_os_c,v 1.2 2011/07/06 13:02:01 jasper Exp $
d6 2
a7 2
--- src/NetBSD/os.c.orig	Wed Apr 23 18:21:29 2003
+++ src/NetBSD/os.c	Thu Dec  6 15:22:20 2012
d58 1
a58 1
@@@@ -157,19 +155,19 @@@@ GetStatus(ProcInfo *p)
d76 1
d79 1
d86 1
a86 1
@@@@ -179,26 +177,26 @@@@ void 
d121 1
a121 1
@@@@ -209,7 +207,7 @@@@ GetProcName(ProcInfo *p, TREENODE *node)
d130 1
a130 1
@@@@ -218,7 +216,7 @@@@ GetProcName(ProcInfo *p, TREENODE *node)
@


1.2
log
@- move away from old kinfo_proc2
@
text
@d1 1
a1 1
$OpenBSD: patch-src_NetBSD_os_c,v 1.1 2010/10/26 16:36:59 sthen Exp $
d6 4
a9 3
--- src/NetBSD/os.c.orig	Thu Apr 24 02:21:29 2003
+++ src/NetBSD/os.c	Wed Jul  6 15:01:20 2011
@@@@ -27,6 +27,7 @@@@
d12 1
d18 1
a18 1
@@@@ -82,11 +83,7 @@@@ GetProcInfo(void)
d31 1
a31 1
@@@@ -126,7 +123,7 @@@@ GetStatus(ProcInfo *p)
d40 1
a40 1
@@@@ -134,7 +131,7 @@@@ GetStatus(ProcInfo *p)
d49 1
a49 1
@@@@ -142,7 +139,7 @@@@ GetStatus(ProcInfo *p)
d58 1
a58 1
@@@@ -157,19 +154,19 @@@@ GetStatus(ProcInfo *p)
d84 1
a84 1
@@@@ -179,26 +176,26 @@@@ void 
d119 1
a119 1
@@@@ -209,7 +206,7 @@@@ GetProcName(ProcInfo *p, TREENODE *node)
d128 1
a128 1
@@@@ -218,7 +215,7 @@@@ GetProcName(ProcInfo *p, TREENODE *node)
@


1.1
log
@kinfo_procs -> kinfo_proc2
@
text
@d1 1
a1 1
$OpenBSD$
d7 1
a7 1
+++ src/NetBSD/os.c	Tue Oct 26 18:33:52 2010
a15 9
@@@@ -66,7 +67,7 @@@@ unsigned int 
 GetProcInfo(void)
 {
   static kvm_t *kd = NULL;
-  struct kinfo_proc *kp;
+  struct kinfo_proc2 *kp;
   char errbuf[_POSIX2_LINE_MAX];
   int nentries;
 
d25 1
a25 1
+  kp = kvm_getproc2(kd, KERN_PROC_KTHREAD, 0, sizeof(struct kinfo_proc2), &nentries);
@

