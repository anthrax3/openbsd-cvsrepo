head	1.2;
access;
symbols
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	lebel_2003-Jan-06:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2007.03.22.21.43.19;	author aanriot;	state dead;
branches;
next	1.1;

1.1
date	2003.01.06.18.03.44;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.01.06.18.03.44;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove proctools, which was tagged "COMES_WITH= 3.9".

ok sturm@@
@
text
@/*	$OpenBSD: fmt.c,v 1.1 2003/01/06 18:03:44 lebel Exp $ */
/*	This file is based on /usr/src/bin/ps/fmt.c and /usr/src/bin/ps/print.c */
/*	OpenBSD: fmt.c,v 1.2 1996/06/23 14:20:49 deraadt Exp 	*/
/*	OpenBSD: print.c,v 1.27 2002/06/18 03:21:33 provos Exp	*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <vis.h>
#include <sys/param.h>
#include <sys/sysctl.h>
#include <kvm.h>

static char *cmdpart(char *);
void fmt_puts(char *, int *);
void fmt_putc(int, int *);

static char *
cmdpart(arg0)
	char *arg0;
{
	char *cp;

	return ((cp = strrchr(arg0, '/')) != NULL ? cp + 1 : arg0);
}

void
fmt_argv(kd, ki)
	kvm_t *kd;
	struct kinfo_proc *ki;
{
	int left = -1; // no termwidth!
	char **argv, **p;
	if (kd != NULL) {
		argv = kvm_getargv(kd, ki, 0);
		if ((p = argv) != NULL) {
			while (*p) {
				fmt_puts(*p, &left);
				p++;
				fmt_putc(' ', &left);
			}
		}
	}
	if (argv == NULL || argv[0] == '\0' ||
		strcmp(cmdpart(argv[0]), ki->kp_proc.p_comm)) {
		fmt_putc('(', &left);
		fmt_puts(ki->kp_proc.p_comm, &left);
		fmt_putc(')', &left);
	}
}

void
fmt_puts(s, leftp)
	char *s;
	int *leftp;
{
	static char *v = 0, *nv;
	static int maxlen = 0;
	int len;

	if (*leftp == 0)
		return;
	len = strlen(s) * 4 + 1;
	if (len > maxlen) {
		if (maxlen == 0)
			maxlen = getpagesize();
		while (len > maxlen)
			maxlen *= 2;
		nv = realloc(v, maxlen);
		if (nv == 0)
			return;
		v = nv;
	}
	strvis(v, s, VIS_TAB | VIS_NL | VIS_CSTYLE);
	if (*leftp != -1) {
		len = strlen(v);
		if (len > *leftp) {
			v[*leftp] = '\0';
			*leftp = 0;
		} else
			*leftp -= len;
	}
	printf("%s", v);
}

void
fmt_putc(c, leftp)
	int c;
	int *leftp;
{

	if (*leftp == 0)
		return;
	if (*leftp != -1)
		*leftp -= 1;
	putchar(c);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.1.1.1
log
@initial import of sysutils/proctools 0.3:
--
Submitted by James Devenish (j-devenish@@users.sourceforge.net)
Modified by danh@@

Proctools  provides  the  pgrep and pkill commands which can
scan for and send signals to processes that are  matched  by
command-line options.

The  pgrep  utility displays process IDs for those processes
that match the requirements specified on the command line.

The pkill utility sends a signal to process  IDs  for  those
processes  that match the requirements specified on the com-
mand line.

WWW: http://sourceforge.net/projects/proctools

@
text
@@
