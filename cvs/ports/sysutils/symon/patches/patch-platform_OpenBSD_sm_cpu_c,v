head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.12
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_4_1:1.2.0.2;
locks; strict;
comment	@# @;


1.4
date	2014.09.17.05.28.40;	author espie;	state Exp;
branches;
next	1.3;
commitid	hmCaL5YDfmvO9sPS;

1.3
date	2007.07.10.15.48.07;	author henning;	state dead;
branches;
next	1.2;

1.2
date	2007.05.18.12.07.37;	author henning;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2007.03.15.13.10.03;	author henning;	state Exp;
branches;
next	;

1.2.2.1
date	2007.06.18.05.18.50;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@more dkstat breakage
@
text
@$OpenBSD$
--- platform/OpenBSD/sm_cpu.c.orig	Wed Sep 17 07:25:50 2014
+++ platform/OpenBSD/sm_cpu.c	Wed Sep 17 07:26:04 2014
@@@@ -39,7 +39,6 @@@@
 
 #include "conf.h"
 
-#include <sys/dkstat.h>
 #include <sys/param.h>
 #include <sys/sysctl.h>
 
@


1.3
log
@willem rolled 2.76, which has all the patches. ok simon
@
text
@d1 10
a10 4
$OpenBSD: patch-platform_OpenBSD_sm_cpu_c,v 1.2 2007/05/18 12:07:37 henning Exp $
--- platform/OpenBSD/sm_cpu.c.orig	Sun Feb 11 21:09:35 2007
+++ platform/OpenBSD/sm_cpu.c	Wed May 16 13:00:53 2007
@@@@ -67,11 +67,6 @@@@
a11 171
 #include "error.h"
 #include "symon.h"
-
-
-/* Globals for this module all start with cp_ */
-static size_t cp_size;
-
 /*
  *  percentages(cnt, out, new, old, diffs) - calculate percentage change
  *      between array "old" and "new", putting the percentages i "out".
@@@@ -80,84 +75,83 @@@@ static size_t cp_size;
  *      The routine assumes modulo arithmetic.  This function is especially
  *      useful on BSD mchines for calculating cpu state percentages.
  */
-#ifdef HAS_KERN_CPTIME2
 int
 percentages(int cnt, int64_t *out, int64_t *new, int64_t *old, int64_t *diffs)
 {
-        int64_t change, total_change, *dp, half_total;
-#else
-static int cp_time_mib[] = {CTL_KERN, KERN_CPTIME};
-int
-percentages(int cnt, int *out, register long *new, register long *old, long *diffs)
-{
-        long change, total_change, *dp, half_total;
-#endif
-        int i;
+    int64_t change, total_change, *dp, half_total;
+    int i;
 
+    /* initialization */
+    total_change = 0;
+    dp = diffs;
 
-        /* initialization */
-        total_change = 0;
-        dp = diffs;
-
-        /* calculate changes for each state and the overall change */
-        for (i = 0; i < cnt; i++) {
-                if ((change = *new - *old) < 0) {
-                        /* this only happens when the counter wraps */
-                        change = (*new - *old);
-                }
-                total_change += (*dp++ = change);
-                *old++ = *new++;
+    /* calculate changes for each state and the overall change */
+    for (i = 0; i < cnt; i++) {
+        if ((change = *new - *old) < 0) {
+            /* this only happens when the counter wraps */
+            change = (*new - *old);
         }
+        total_change += (*dp++ = change);
+        *old++ = *new++;
+    }
 
-        /* avoid divide by zero potential */
-        if (total_change == 0)
-                total_change = 1;
+    /* avoid divide by zero potential */
+    if (total_change == 0)
+        total_change = 1;
 
-        /* calculate percentages based on overall change, rounding up */
-        half_total = total_change / 2l;
-        for (i = 0; i < cnt; i++)
-                *out++ = ((*diffs++ * 1000 + half_total) / total_change);
+    /* calculate percentages based on overall change, rounding up */
+    half_total = total_change / 2l;
+    for (i = 0; i < cnt; i++)
+        *out++ = ((*diffs++ * 1000 + half_total) / total_change);
 
-        /* return the total in case the caller wants to use it */
-        return (total_change);
+    /* return the total in case the caller wants to use it */
+    return (total_change);
 }
 
 void
 init_cpu(struct stream *st)
 {
     char buf[SYMON_MAX_OBJSIZE];
-
 #ifdef HAS_KERN_CPTIME2
     const char *errstr;
     int mib[2] = {CTL_HW, HW_NCPU};
     int ncpu;
     long num;
-
     size_t size = sizeof(ncpu);
+#endif
+
+    st->parg.cp.mib[0] = CTL_KERN;
+    st->parg.cp.mib[1] = KERN_CPTIME;
+    st->parg.cp.miblen = 2;
+
+#ifdef HAS_KERN_CPTIME2
     if (sysctl(mib, 2, &ncpu, &size, NULL, 0) == -1) {
         warning("could not determine number of cpus: %.200s", strerror(errno));
         ncpu = 1;
     }
 
-    num = strtonum(st->arg, 0, SYMON_MAXCPUID-1, &errstr);
+    num = strtonum(st->arg, 0, SYMON_MAXCPUID - 1, &errstr);
     if (errstr != NULL) {
         fatal("cpu(%.200s) is invalid: %.200s", st->arg, errstr);
     }
 
-    st->parg.cp.mib[0] = CTL_KERN;
-    st->parg.cp.mib[1] = KERN_CPTIME2;
-    st->parg.cp.mib[2] = num;
-    if (st->parg.cp.mib[2] >= ncpu) {
-        fatal("cpu(%d) is not present", st->parg.cp.mib[2]);
+    if (ncpu > 1) {
+        st->parg.cp.mib[0] = CTL_KERN;
+        st->parg.cp.mib[1] = KERN_CPTIME2;
+        st->parg.cp.mib[2] = num;
+        st->parg.cp.miblen = 3;
+        if (st->parg.cp.mib[2] >= ncpu) {
+            fatal("cpu(%d) is not present", st->parg.cp.mib[2]);
+        }
     }
 #endif
 
-    cp_size = sizeof(st->parg.cp.time);
     /* Call get_cpu once to fill the cp_old structure */
     get_cpu(buf, sizeof(buf), st);
 
     info("started module cpu(%.200s)", st->arg);
 }
+
 void
 gets_cpu()
 {
@@@@ -167,22 +161,26 @@@@ gets_cpu()
 int
 get_cpu(char *symon_buf, int maxlen, struct stream *st)
 {
-    int total;
+    int i, total;
+    size_t len;
 
-#ifdef HAS_KERN_CPTIME2
-    if (sysctl(st->parg.cp.mib, 3, &st->parg.cp.time, &cp_size, NULL, 0) < 0) {
-        warning("%s:%d: sysctl kern.cp_time2 for cpu%d failed", __FILE__, __LINE__, st->parg.cp.mib[2]);
+    len = sizeof(st->parg.cp.time2);
+    if (sysctl(st->parg.cp.mib, st->parg.cp.miblen, &st->parg.cp.time2, &len, NULL, 0) < 0) {
+        warning("%s:%d: sysctl kern.cp_time* for cpu%d failed", __FILE__, __LINE__,
+          st->parg.cp.mib[2]);
         return 0;
     }
-#else
-    if (sysctl(cp_time_mib, 2, &st->parg.cp.time, &cp_size, NULL, 0) < 0) {
-        warning("%s:%d: sysctl kern.cp_time failed", __FILE__, __LINE__);
-        return 0;
+
+    /* sysctl will return 32 bit longs for CPTIME and 64 bit longs for CPTIME2 */
+    if (st->parg.cp.mib[1] == KERN_CPTIME) {
+        bcopy(st->parg.cp.time2, st->parg.cp.time1, sizeof(st->parg.cp.time1));
+        for (i = 0; i < CPUSTATES; i++) {
+            st->parg.cp.time2[i] = (int64_t) st->parg.cp.time1[i];
+        }
     }
-#endif
 
     /* convert cp_time counts to percentages */
-    total = percentages(CPUSTATES, st->parg.cp.states, st->parg.cp.time, st->parg.cp.old, st->parg.cp.diff);
+    total = percentages(CPUSTATES, st->parg.cp.states, st->parg.cp.time2, st->parg.cp.old, st->parg.cp.diff);
 
     return snpack(symon_buf, maxlen, st->arg, MT_CPU,
                   (double) (st->parg.cp.states[CP_USER] / 10.0),
@


1.2
log
@big rework of the cpu stat module, killing differences between
arches with and without kern_cptime2. fixes single-processor i386/amd64.
with some help from Willem Dijkstra (symon author), ok simon
@
text
@d1 1
a1 1
$OpenBSD: patch-platform_OpenBSD_sm_cpu_c,v 1.1 2007/03/15 13:10:03 henning Exp $
@


1.2.2.1
log
@MFC:
big rework of the cpu stat module, killing differences between
arches with and without kern_cptime2. fixes single-processor i386/amd64.
with some help from Willem Dijkstra (symon author)
@
text
@d1 1
a1 1
$OpenBSD: patch-platform_OpenBSD_sm_cpu_c,v 1.2 2007/05/18 12:07:37 henning Exp $
@


1.1
log
@fix botched conversion to KERN_CPTIME2 for SMP support
only i386 and amd64 have working KERN_CPTIME2.
mimic top(1)s behaviour and only use KERN_CPTIME2 when ncpu > 1
ok bernd
@
text
@d1 110
a110 4
$OpenBSD$
--- platform/OpenBSD/sm_cpu.c.orig	Sat Mar 10 20:30:46 2007
+++ platform/OpenBSD/sm_cpu.c	Sat Mar 10 20:37:43 2007
@@@@ -144,11 +144,18 @@@@ init_cpu(struct stream *st)
a126 4
+    } else {
+        st->parg.cp.mib[0] = CTL_KERN;
+        st->parg.cp.mib[1] = KERN_CPTIME;
+        st->parg.cp.miblen = 2;
d130 3
a132 2
@@@@ -170,7 +177,7 @@@@ get_cpu(char *symon_buf, int maxlen, str
     int total;
d134 15
a148 1
 #ifdef HAS_KERN_CPTIME2
d150 5
a154 2
+    if (sysctl(st->parg.cp.mib, st->parg.cp.miblen, &st->parg.cp.time, &cp_size, NULL, 0) < 0) {
         warning("%s:%d: sysctl kern.cp_time2 for cpu%d failed", __FILE__, __LINE__, st->parg.cp.mib[2]);
d157 20
@

