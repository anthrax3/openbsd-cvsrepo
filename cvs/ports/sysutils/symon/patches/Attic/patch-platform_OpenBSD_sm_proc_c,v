head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.02.05.14.23.28;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2012.01.08.20.38.12;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.15.10.47.08;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.01.19.19.43.57;	author kili;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to symon 2.86, rolling in kinfo_proc changes + an additional fix
@
text
@$OpenBSD: patch-platform_OpenBSD_sm_proc_c,v 1.3 2012/01/08 20:38:12 sthen Exp $
--- platform/OpenBSD/sm_proc.c.orig	Mon Jun 14 15:47:29 2010
+++ platform/OpenBSD/sm_proc.c	Sun Jan  8 20:33:43 2012
@@@@ -54,9 +54,17 @@@@
 /* Globals for this module start with proc_ */
 #ifdef HAS_KERN_PROC2
 static struct kinfo_proc2 *proc_ps = NULL;
+#define KINFO_NEWAPI
+#define KINFO_MIB KERN_PROC2
+#define KINFO_STRUCT kinfo_proc2
 #else
 static struct kinfo_proc *proc_ps = NULL;
+#if OpenBSD >= 201111
+#define KINFO_NEWAPI
+#define KINFO_MIB KERN_PROC
+#define KINFO_STRUCT kinfo_proc
 #endif
+#endif
 static int proc_max = 0;
 static int proc_cur = 0;
 static int proc_stathz = 0;
@@@@ -84,39 +92,39 @@@@ gets_proc()
               __FILE__, __LINE__);
     }
 
-#ifdef HAS_KERN_PROC2
+#ifdef KINFO_NEWAPI
     /* increase buffers if necessary */
     if (procs > proc_max) {
         proc_max = (procs * 5) / 4;
 
         if (proc_max > SYMON_MAX_DOBJECTS) {
-            fatal("%s:%d: dynamic object limit (%d) exceeded for kinfo_proc2 structures",
+            fatal("%s:%d: dynamic object limit (%d) exceeded for kinfo_proc structures",
                   __FILE__, __LINE__, SYMON_MAX_DOBJECTS);
         }
 
-        proc_ps = xrealloc(proc_ps, proc_max * sizeof(struct kinfo_proc2));
+        proc_ps = xrealloc(proc_ps, proc_max * sizeof(struct KINFO_STRUCT));
     }
 
     /* read data in anger */
     mib[0] = CTL_KERN;
-    mib[1] = KERN_PROC2;
+    mib[1] = KINFO_MIB;
     mib[2] = KERN_PROC_KTHREAD;
     mib[3] = 0;
-    mib[4] = sizeof(struct kinfo_proc2);
+    mib[4] = sizeof(struct KINFO_STRUCT);
     mib[5] = proc_max;
-    size = proc_max * sizeof(struct kinfo_proc2);
+    size = proc_max * sizeof(struct KINFO_STRUCT);
     if (sysctl(mib, 6, proc_ps, &size, NULL, 0) < 0) {
         warning("proc probe cannot get processes");
         proc_cur = 0;
         return;
     }
 
-    if (size % sizeof(struct kinfo_proc2) != 0) {
-        warning("proc size mismatch: got %d bytes, not dividable by sizeof(kinfo_proc2) %d",
-                size, sizeof(struct kinfo_proc2));
+    if (size % sizeof(struct KINFO_STRUCT) != 0) {
+        warning("proc size mismatch: got %d bytes, not dividable by sizeof(kinfo_proc) %d",
+                size, sizeof(struct KINFO_STRUCT));
         proc_cur = 0;
     } else {
-        proc_cur = size / sizeof(struct kinfo_proc2);
+        proc_cur = size / sizeof(struct KINFO_STRUCT);
     }
 #else
     /* increase buffers if necessary */
@@@@ -204,7 +212,7 @@@@ get_proc(char *symon_buf, int maxlen, struct stream *s
     int n = 0;
 
     for (pp = proc_ps, i = 0; i < proc_cur; pp++, i++) {
-#ifdef HAS_KERN_PROC2
+#ifdef KINFO_NEWAPI
          if (strncmp(st->arg, pp->p_comm, strlen(st->arg)) == 0) {
              /* cpu time - accumulated */
              cpu_uticks += pp->p_uticks;  /* user */
@


1.3
log
@adapt to removing kinfo_proc2
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update symon to 2.82, rolling in our patches. New version pointed out
by maintainer/upstream Willem Dijkstra.
@
text
@d1 4
a4 6
$OpenBSD: patch-platform_OpenBSD_sm_proc_c,v 1.1 2010/01/19 19:43:57 kili Exp $
--- platform/OpenBSD/sm_proc.c.orig	Wed Feb 20 09:17:25 2008
+++ platform/OpenBSD/sm_proc.c	Sun Jan 17 17:57:27 2010
@@@@ -52,7 +52,7 @@@@
 #define pagetob(size) (((u_int32_t)size) << proc_pageshift)
 
d6 13
a18 2
-static struct kinfo_proc *proc_ps = NULL;
+static struct kinfo_proc2 *proc_ps = NULL;
d22 3
a24 8
@@@@ -67,7 +67,7 @@@@ typedef long pctcpu;
 void
 gets_proc()
 {
-    int mib[3];
+    int mib[6];
     int procs;
     size_t size;
d26 4
a29 1
@@@@ -85,30 +85,33 @@@@ gets_proc()
d33 2
a34 2
-            fatal("%s:%d: dynamic object limit (%d) exceeded for kinfo_proc structures",
+            fatal("%s:%d: dynamic object limit (%d) exceeded for kinfo_proc2 structures",
d38 2
a39 2
-        proc_ps = xrealloc(proc_ps, proc_max * sizeof(struct kinfo_proc));
+        proc_ps = xrealloc(proc_ps, proc_max * sizeof(struct kinfo_proc2));
d44 2
a45 2
-    mib[1] = KERN_PROC;
+    mib[1] = KERN_PROC2;
d47 7
a53 7
-    size = proc_max * sizeof(struct kinfo_proc);
-    if (sysctl(mib, 3, proc_ps, &size, NULL, 0) < 0) {
+    mib[3] = 0;
+    mib[4] = sizeof(struct kinfo_proc2);
+    mib[5] = proc_max;
+    size = proc_max * sizeof(struct kinfo_proc2);
+    if (sysctl(mib, 6, proc_ps, &size, NULL, 0) < 0) {
d59 6
a64 6
-    if (size % sizeof(struct kinfo_proc) != 0) {
-        warning("proc size mismatch: got %d bytes, not dividable by sizeof(kinfo_proc) %d",
-                size, sizeof(struct kinfo_proc));
+    if (size % sizeof(struct kinfo_proc2) != 0) {
+        warning("proc size mismatch: got %d bytes, not dividable by sizeof(kinfo_proc2) %d",
+                size, sizeof(struct kinfo_proc2));
d67 2
a68 2
-        proc_cur = size / sizeof(struct kinfo_proc);
+        proc_cur = size / sizeof(struct kinfo_proc2);
d70 3
a72 12
 }
 
@@@@ -147,7 +150,7 @@@@ int
 get_proc(char *symon_buf, int maxlen, struct stream *st)
 {
     int i;
-    struct kinfo_proc *pp;
+    struct kinfo_proc2 *pp;
     u_quad_t  cpu_ticks = 0;
     u_quad_t  cpu_uticks = 0;
     u_quad_t  cpu_iticks = 0;
@@@@ -160,19 +163,19 @@@@ get_proc(char *symon_buf, int maxlen, struct stream *s
d76 3
a78 2
-         if (strncmp(st->arg, pp->kp_proc.p_comm, strlen(st->arg)) == 0) {
+         if (strncmp(st->arg, pp->p_comm, strlen(st->arg)) == 0) {
d80 1
a80 22
-             cpu_uticks += pp->kp_proc.p_uticks;  /* user */
-             cpu_sticks += pp->kp_proc.p_sticks;  /* sys  */
-             cpu_iticks += pp->kp_proc.p_iticks;  /* int  */
+             cpu_uticks += pp->p_uticks;  /* user */
+             cpu_sticks += pp->p_sticks;  /* sys  */
+             cpu_iticks += pp->p_iticks;  /* int  */
              /* cpu time - percentage since last measurement */
-             cpu_pct = pctdouble(pp->kp_proc.p_pctcpu) * 100.0;
+             cpu_pct = pctdouble(pp->p_pctcpu) * 100.0;
              cpu_pcti += cpu_pct;
              /* memory size - shared pages are counted multiple times */
-             mem_procsize += pagetob(pp->kp_eproc.e_vm.vm_tsize + /* text pages */
-                                     pp->kp_eproc.e_vm.vm_dsize + /* data */
-                                     pp->kp_eproc.e_vm.vm_ssize); /* stack */
-             mem_rss += pagetob(pp->kp_eproc.e_vm.vm_rssize);     /* rss  */
+             mem_procsize += pagetob(pp->p_vm_tsize + /* text pages */
+                                     pp->p_vm_dsize + /* data */
+                                     pp->p_vm_ssize); /* stack */
+             mem_rss += pagetob(pp->p_vm_rssize);     /* rss  */
              n++;
          }
     }
@


1.1
log
@KERN_PROC -> KERN_PROC2.

Reported and tested by tasm.devil at googlemail.com (thanks).
Also tested by okan@@ and sthen@@.

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
@

