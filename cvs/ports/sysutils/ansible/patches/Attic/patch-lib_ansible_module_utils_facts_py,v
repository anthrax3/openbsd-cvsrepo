head	1.15;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.15
date	2017.04.22.10.52.10;	author jasper;	state dead;
branches;
next	1.14;
commitid	StpVqhEhHgJPXiHY;

1.14
date	2017.01.17.19.23.41;	author jasper;	state Exp;
branches;
next	1.13;
commitid	xyZtRdpzDXneYjj7;

1.13
date	2016.11.04.15.51.43;	author jasper;	state Exp;
branches;
next	1.12;
commitid	kbrWOR5ElP0Y672w;

1.12
date	2016.11.04.10.45.38;	author jasper;	state Exp;
branches;
next	1.11;
commitid	4UU6Q5gLlg6eC2hi;

1.11
date	2016.11.02.09.07.02;	author jasper;	state Exp;
branches;
next	1.10;
commitid	QMOt2uWby6iXaErW;

1.10
date	2016.11.01.20.43.14;	author jasper;	state Exp;
branches;
next	1.9;
commitid	5VJGpee9TrTaMdad;

1.9
date	2016.11.01.09.44.46;	author jasper;	state Exp;
branches;
next	1.8;
commitid	9NQnIFifESsDZtiT;

1.8
date	2016.10.31.17.50.44;	author jasper;	state Exp;
branches;
next	1.7;
commitid	KjDKx9c5NoTLucPU;

1.7
date	2016.10.31.17.23.13;	author jasper;	state Exp;
branches;
next	1.6;
commitid	wIWCAlP4FLAeJs5B;

1.6
date	2016.10.31.17.10.59;	author jasper;	state Exp;
branches;
next	1.5;
commitid	2Plp8M56a1Vn48Zu;

1.5
date	2016.10.31.17.03.35;	author jasper;	state Exp;
branches;
next	1.4;
commitid	VBDPeh8lztTevAhL;

1.4
date	2016.08.30.11.29.06;	author jasper;	state Exp;
branches;
next	1.3;
commitid	jOjEaSFEwqycPec7;

1.3
date	2016.08.22.09.05.46;	author jasper;	state Exp;
branches;
next	1.2;
commitid	pirOLlhU8pqPCNRq;

1.2
date	2015.03.31.19.09.28;	author rpe;	state dead;
branches;
next	1.1;
commitid	laIXYwOnlIBP0ypb;

1.1
date	2014.10.30.19.17.52;	author sthen;	state Exp;
branches;
next	;
commitid	7AjUhCmkwy7L3hjk;


desc
@@


1.15
log
@update to ansible-2.3.0
@
text
@$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.14 2017/01/17 19:23:41 jasper Exp $

- Enable VMM detection
  9547d6b422c8cc6c9a4f0fe6188ad2e4f218b475

- Simplify processor fact resolution
  c17dad0def2fa86733c07610189e94486e056203

- Swap distribution_version and distribution_release values
  4c0188a27bf9dff6c70134817048672a00c8eae7

- Implement DMI facts
  88970bcfb24864c5773c8d913c45db3e7355a74d

--- lib/ansible/module_utils/facts.py.orig	Mon Jan 16 17:48:29 2017
+++ lib/ansible/module_utils/facts.py	Tue Jan 17 20:22:04 2017
@@@@ -750,12 +750,13 @@@@ class Distribution(object):
             self.facts['distribution_version'] = '%s.%s' % (data.group(1), data.group(2))
 
     def get_distribution_OpenBSD(self):
+        self.facts['distribution_version'] = platform.release()
         rc, out, err = self.module.run_command("/sbin/sysctl -n kern.version")
         match = re.match('OpenBSD\s[0-9]+.[0-9]+-(\S+)\s.*', out)
         if match:
-            self.facts['distribution_version'] = match.groups()[0]
+            self.facts['distribution_release'] = match.groups()[0]
         else:
-            self.facts['distribution_version'] = 'release'
+            self.facts['distribution_release'] = 'release'
 
     def get_distribution_DragonFly(self):
         pass
@@@@ -1568,7 +1569,8 @@@@ class OpenBSDHardware(Hardware):
     - processor_cores
     - processor_count
     - processor_speed
-    - devices
+
+    In addition, it also defines number of DMI facts and device facts.
     """
     platform = 'OpenBSD'
 
@@@@ -1578,6 +1580,7 @@@@ class OpenBSDHardware(Hardware):
         self.get_processor_facts()
         self.get_device_facts()
         self.get_mount_facts()
+        self.get_dmi_facts()
         return self.facts
 
     def get_sysctl(self):
@@@@ -1647,6 +1650,25 @@@@ class OpenBSDHardware(Hardware):
         devices.extend(self.sysctl['hw.disknames'].split(','))
         self.facts['devices'] = devices
 
+    def get_dmi_facts(self):
+        # We don't use dmidecode(1) here because:
+        # - it would add dependency on an external package
+        # - dmidecode(1) can only be ran as root
+        # So instead we rely on sysctl(8) to provide us the information on a
+        # best-effort basis. As a bonus we also get facts on non-amd64/i386
+        # platforms this way.
+        sysctl_to_dmi = {
+            'hw.product':  'product_name',
+            'hw.version':  'product_version',
+            'hw.uuid':     'product_uuid',
+            'hw.serialno': 'product_serial',
+            'hw.vendor':   'system_vendor',
+        }
+
+        for mib in sysctl_to_dmi:
+            if mib in self.sysctl:
+                self.facts[sysctl_to_dmi[mib]] = self.sysctl[mib]
+
 class FreeBSDHardware(Hardware):
     """
     FreeBSD-specific subclass of Hardware.  Defines memory and CPU facts:
@@@@ -3192,6 +3214,7 @@@@ class OpenBSDVirtual(Virtual):
     - virtualization_role
     """
     platform = 'OpenBSD'
+    DMESG_BOOT = '/var/run/dmesg.boot'
 
     def populate(self):
         self.get_virtual_facts()
@@@@ -3232,6 +3255,18 @@@@ class OpenBSDVirtual(Virtual):
                         if out.rstrip() == 'QEMU':
                             self.facts['virtualization_type'] = 'kvm'
                             self.facts['virtualization_role'] = 'guest'
+                        if out.rstrip() == 'OpenBSD':
+                            self.facts['virtualization_type'] = 'vmm'
+                            self.facts['virtualization_role'] = 'guest'
+
+        # Check the dmesg if vmm(4) attached, indicating the host is
+        # capable of virtualization.
+        dmesg_boot = get_file_content(OpenBSDVirtual.DMESG_BOOT)
+        for line in dmesg_boot.splitlines():
+            match = re.match('^vmm0 at mainbus0: (SVM/RVI|VMX/EPT)$', line)
+            if match:
+                self.facts['virtualization_type'] = 'vmm'
+                self.facts['virtualization_role'] = 'host'
 
 class HPUXVirtual(Virtual):
     """
@


1.14
log
@update to ansible-2.2.1.0, includes a security fix for CVE-2016-9587
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.13 2016/11/04 15:51:43 jasper Exp $
@


1.13
log
@sync with what's been merged upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.12 2016/11/04 10:45:38 jasper Exp $
d15 3
a17 3
--- lib/ansible/module_utils/facts.py.orig	Tue Nov  1 04:43:19 2016
+++ lib/ansible/module_utils/facts.py	Fri Nov  4 11:52:23 2016
@@@@ -753,12 +753,13 @@@@ class Distribution(object):
d33 1
a33 1
@@@@ -1567,10 +1568,10 @@@@ class OpenBSDHardware(Hardware):
a41 1
-    DMESG_BOOT = '/var/run/dmesg.boot'
d43 1
a43 3
     def populate(self):
         self.sysctl = self.get_sysctl()
@@@@ -1578,6 +1579,7 @@@@ class OpenBSDHardware(Hardware):
d51 1
a51 33
@@@@ -1628,25 +1630,45 @@@@ class OpenBSDHardware(Hardware):
 
     def get_processor_facts(self):
         processor = []
-        dmesg_boot = get_file_content(OpenBSDHardware.DMESG_BOOT)
-        if not dmesg_boot:
-            rc, dmesg_boot, err = self.module.run_command("/sbin/dmesg")
-        i = 0
-        for line in dmesg_boot.splitlines():
-            if line.split(' ', 1)[0] == 'cpu%i:' % i:
-                processor.append(line.split(' ', 1)[1])
-                i = i + 1
-        processor_count = i
+        for i in range(int(self.sysctl['hw.ncpu'])):
+            processor.append(self.sysctl['hw.model'])
+
         self.facts['processor'] = processor
-        self.facts['processor_count'] = processor_count
-        # I found no way to figure out the number of Cores per CPU in OpenBSD
-        self.facts['processor_cores'] = 'NA'
 
+        # The following is partly a lie because there is no reliable way to
+        # determine the number of physical CPUs in the system. We can only
+        # query the number of logical CPUs, which hides the number of cores.
+        # On amd64/i386 we could try to inspect the smt/core/package lines in
+        # dmesg, however even those have proven to be unreliable.
+        # So take a shortcut and report the logical number of processors in
+        # 'processor_count' and `processor_cores` and leave it at that.
+        self.facts['processor_count'] = self.sysctl['hw.ncpu']
+        self.facts['processor_cores'] = self.sysctl['hw.ncpu']
+
     def get_device_facts(self):
         devices = []
@


1.12
log
@vmm detection merged upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.11 2016/11/02 09:07:02 jasper Exp $
d7 1
a7 1
  https://github.com/ansible/ansible/pull/18278
d16 1
a16 1
+++ lib/ansible/module_utils/facts.py	Wed Nov  2 09:47:15 2016
d33 2
a34 5
@@@@ -1564,13 +1565,12 @@@@ class OpenBSDHardware(Hardware):
     - swapfree_mb
     - swaptotal_mb
     - processor (a list)
-    - processor_cores
d46 1
a46 1
@@@@ -1578,6 +1578,7 @@@@ class OpenBSDHardware(Hardware):
d54 1
a54 1
@@@@ -1628,25 +1629,44 @@@@ class OpenBSDHardware(Hardware):
d81 1
a81 1
+        # 'processor_count' and leave it at that.
d83 1
d112 1
a112 1
@@@@ -3192,6 +3212,7 @@@@ class OpenBSDVirtual(Virtual):
d120 1
a120 1
@@@@ -3232,6 +3253,18 @@@@ class OpenBSDVirtual(Virtual):
@


1.11
log
@update to ansible 2.2.0.0

- https://groups.google.com/forum/#!topic/ansible-announce/cLN64qQ_yoo
- https://www.ansible.com/blog/ansible-network-updates
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
a4 1
  https://github.com/ansible/ansible/pull/18268
d10 4
a13 1
  https://github.com/ansible/ansible/pull/18277
@


1.10
log
@dmi facts merged upstream
@
text
@d1 1
a1 4
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.9 2016/11/01 09:44:46 jasper Exp $

- Add OpenBSD virtualization facts
  b4f338bca738cbd3e3b64be2fc9579bcefa28d6e
a8 3
- Implement DMI facts
  88970bcfb24864c5773c8d913c45db3e7355a74d

d12 12
a23 16
--- lib/ansible/module_utils/facts.py.orig	Thu Sep 29 17:01:13 2016
+++ lib/ansible/module_utils/facts.py	Mon Oct 31 18:47:55 2016
@@@@ -344,13 +344,13 @@@@ class Facts(object):
             self.facts['distribution_version'] = platform.version()
         elif self.facts['system'] == 'OpenBSD':
             self.facts['distribution'] = 'OpenBSD'
-            self.facts['distribution_release'] = platform.release()
+            self.facts['distribution_version'] = platform.release()
             rc, out, err = self.module.run_command("/sbin/sysctl -n kern.version")
             match = re.match('OpenBSD\s[0-9]+.[0-9]+-(\S+)\s.*', out)
             if match:
-                self.facts['distribution_version'] = match.groups()[0]
+                self.facts['distribution_release'] = match.groups()[0]
             else:
-                self.facts['distribution_version'] = 'release'
+                self.facts['distribution_release'] = 'release'
d25 10
a34 4
             dist = platform.dist()
             self.facts['distribution'] = dist[0].capitalize() or 'NA'
@@@@ -1408,10 +1408,10 @@@@ class OpenBSDHardware(Hardware):
     - processor_cores
d46 1
a46 1
@@@@ -1419,6 +1419,7 @@@@ class OpenBSDHardware(Hardware):
d54 1
a54 1
@@@@ -1469,25 +1470,43 @@@@ class OpenBSDHardware(Hardware):
d74 1
d83 1
a83 1
 
d111 1
a111 1
@@@@ -2926,14 +2945,59 @@@@ class OpenBSDVirtual(Virtual):
d119 4
a122 37
         return self.facts
 
     def get_virtual_facts(self):
+        sysctl_path = self.module.get_bin_path('sysctl')
+
+        # Set empty values as default
         self.facts['virtualization_type'] = ''
         self.facts['virtualization_role'] = ''
+
+        if sysctl_path:
+            rc, out, err = self.module.run_command("%s -n hw.product" % sysctl_path)
+            if rc == 0:
+                if re.match('(KVM|Bochs|SmartDC).*', out):
+                    self.facts['virtualization_type'] = 'kvm'
+                    self.facts['virtualization_role'] = 'guest'
+                elif re.match('.*VMware.*', out):
+                    self.facts['virtualization_type'] = 'VMware'
+                    self.facts['virtualization_role'] = 'guest'
+                elif out.rstrip() == 'VirtualBox':
+                    self.facts['virtualization_type'] = 'virtualbox'
+                    self.facts['virtualization_role'] = 'guest'
+                elif out.rstrip() == 'HVM domU':
+                    self.facts['virtualization_type'] = 'xen'
+                    self.facts['virtualization_role'] = 'guest'
+                elif out.rstrip() == 'Parallels':
+                    self.facts['virtualization_type'] = 'parallels'
+                    self.facts['virtualization_role'] = 'guest'
+                elif out.rstrip() == 'RHEV Hypervisor':
+                    self.facts['virtualization_type'] = 'RHEV'
+                    self.facts['virtualization_role'] = 'guest'
+                else:
+                    # Try harder and see if hw.vendor has anything we could use.
+                    rc, out, err = self.module.run_command("%s -n hw.vendor" % sysctl_path)
+                    if rc == 0:
+                        if out.rstrip() == 'QEMU':
+                            self.facts['virtualization_type'] = 'kvm'
+                            self.facts['virtualization_role'] = 'guest'
@


1.9
log
@submitted upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.8 2016/10/31 17:50:44 jasper Exp $
d3 2
a4 1
- Add OpenBSD virtualization facts: b4f338bca738cbd3e3b64be2fc9579bcefa28d6e
d13 1
a13 1
  https://github.com/ansible/ansible/pull/18274
@


1.8
log
@simplify resolution of ansible_processor by using hw.model and hw.ncpu.
previously /var/run/dmesg.boot or dmesg(8) would be parsed however that could
lead to bogus values (e.g. the full "Enhanced SpeedStep" line) if the buffer
contained multiple (partial) dmesgs
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.7 2016/10/31 17:23:13 jasper Exp $
d4 1
d6 2
d9 2
a10 1
- Drop processor_cores fact with bogus value
d12 2
d15 1
@


1.7
log
@swap the values of the distribution_release and distribution_version facts

this is more in line with other platforms where the version fact is a numerical
value and the release an identification string:

    "ansible_facts": {
        "ansible_distribution": "OpenBSD",
        "ansible_distribution_release": "current",
        "ansible_distribution_version": "6.0"
    },
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.6 2016/10/31 17:10:59 jasper Exp $
d5 1
d11 1
a11 1
+++ lib/ansible/module_utils/facts.py	Mon Oct 31 18:21:57 2016
d29 1
a29 1
@@@@ -1408,7 +1408,8 @@@@ class OpenBSDHardware(Hardware):
d38 5
a42 2
     DMESG_BOOT = '/var/run/dmesg.boot'
@@@@ -1419,6 +1420,7 @@@@ class OpenBSDHardware(Hardware):
d50 11
a60 4
@@@@ -1476,18 +1478,42 @@@@ class OpenBSDHardware(Hardware):
         for line in dmesg_boot.splitlines():
             if line.split(' ', 1)[0] == 'cpu%i:' % i:
                 processor.append(line.split(' ', 1)[1])
d62 4
a65 2
+                i += 1
         processor_count = i
d67 4
a70 1
+	# The following is partly a lie because there is no reliable way to
d77 1
a77 3
         self.facts['processor_count'] = processor_count
-        # I found no way to figure out the number of Cores per CPU in OpenBSD
-        self.facts['processor_cores'] = 'NA'
d106 1
a106 1
@@@@ -2926,14 +2952,59 @@@@ class OpenBSDVirtual(Virtual):
@


1.6
log
@- Enable VMM detection
- Drop processor_cores fact with bogus value (hardcoded 'NA')
- Implement DMI facts (product_name, product_version, product_uuid,
  product_serial and system_vendor)
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.5 2016/10/31 17:03:35 jasper Exp $
d7 1
d10 18
a27 1
+++ lib/ansible/module_utils/facts.py	Mon Oct 31 18:05:53 2016
@


1.5
log
@- sync OpenBSDVirtual with what's been merged upstream
- implement virtualization_type and virtualization_role for vmm
@
text
@d1 1
a1 1
$OpenBSD$
d3 4
a6 1
Add OpenBSD virtualization facts: b4f338bca738cbd3e3b64be2fc9579bcefa28d6e
d8 67
a74 3
--- lib/ansible/module_utils/facts.py.orig	Mon Oct 31 17:57:06 2016
+++ lib/ansible/module_utils/facts.py	Mon Oct 31 18:01:59 2016
@@@@ -2926,14 +2926,59 @@@@ class OpenBSDVirtual(Virtual):
@


1.4
log
@sync with what's been committed upstream

from Patrik Lundin
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.3 2016/08/22 09:05:46 jasper Exp $
d3 1
a3 1
Populate virtualization_{role,type} facts.
d5 10
a14 3
--- lib/ansible/module_utils/facts.py.orig	Tue Aug 30 13:27:45 2016
+++ lib/ansible/module_utils/facts.py	Tue Aug 30 13:27:48 2016
@@@@ -2932,8 +2932,49 @@@@ class OpenBSDVirtual(Virtual):
a17 2
-        self.facts['virtualization_type'] = ''
-        self.facts['virtualization_role'] = ''
d20 4
d26 2
a27 28
+            if rc != 0:
+                self.facts['virtualization_type'] = ''
+                self.facts['virtualization_role'] = ''
+            elif re.match('(KVM|Bochs|SmartDC).*', out):
+                self.facts['virtualization_type'] = 'kvm'
+                self.facts['virtualization_role'] = 'guest'
+            elif re.match('.*VMware.*', out):
+                self.facts['virtualization_type'] = 'VMware'
+                self.facts['virtualization_role'] = 'guest'
+            elif out.rstrip() == 'VirtualBox':
+                self.facts['virtualization_type'] = 'virtualbox'
+                self.facts['virtualization_role'] = 'guest'
+            elif out.rstrip() == 'HVM domU':
+                self.facts['virtualization_type'] = 'xen'
+                self.facts['virtualization_role'] = 'guest'
+            elif out.rstrip() == 'Parallels':
+                self.facts['virtualization_type'] = 'parallels'
+                self.facts['virtualization_role'] = 'guest'
+            elif out.rstrip() == 'RHEV Hypervisor':
+                self.facts['virtualization_type'] = 'RHEV'
+                self.facts['virtualization_role'] = 'guest'
+            else:
+                # Try harder and see if hw.vendor has anything we could use.
+                rc, out, err = self.module.run_command("%s -n hw.vendor" % sysctl_path)
+                if rc != 0:
+                    self.facts['virtualization_type'] = ''
+                    self.facts['virtualization_role'] = ''
+                elif out.rstrip() == 'QEMU':
d30 15
d46 9
a54 7
+                    # Set empty values if we find no match at all.
+                    self.facts['virtualization_type'] = ''
+                    self.facts['virtualization_role'] = ''
+        else:
+            # Set empty values if we find no sysctl binary.
+            self.facts['virtualization_type'] = ''
+            self.facts['virtualization_role'] = ''
d56 8
@


1.3
log
@populate ansible_virtualization_{role,type} facts

tested by awolk@@ jung@@ and sthen@@ on a variety of hypervisors
ok rpe@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- lib/ansible/module_utils/facts.py.orig	Thu Jul 28 20:04:38 2016
+++ lib/ansible/module_utils/facts.py	Mon Aug 22 11:03:54 2016
@@@@ -2932,8 +2932,47 @@@@ class OpenBSDVirtual(Virtual):
d13 1
a13 29
+        rc, out, err = self.module.run_command("/usr/sbin/sysctl -n hw.product")
+        if rc != 0:
+          self.facts['virtualization_type'] = ''
+          self.facts['virtualization_role'] = ''
+          return
+        elif re.match('(KVM|Bochs|SmartDC).*', out):
+          self.facts['virtualization_type'] = 'kvm'
+          self.facts['virtualization_role'] = 'guest'
+          return
+        elif re.match('.*VMware.*', out):
+          self.facts['virtualization_type'] = 'VMware'
+          self.facts['virtualization_role'] = 'guest'
+          return
+        elif out.rstrip() == 'VirtualBox':
+          self.facts['virtualization_type'] = 'virtualbox'
+          self.facts['virtualization_role'] = 'guest'
+          return
+        elif out.rstrip() == 'HVM domU':
+          self.facts['virtualization_type'] = 'xen'
+          self.facts['virtualization_role'] = 'guest'
+          return
+        elif out.rstrip() == 'Parallels':
+          self.facts['virtualization_type'] = 'parallels'
+          self.facts['virtualization_role'] = 'guest'
+          return
+        elif out.rstrip() == 'RHEV Hypervisor':
+          self.facts['virtualization_type'] = 'RHEV'
+          self.facts['virtualization_role'] = 'guest'
+          return
d15 40
a54 10
+        # Try harder and see if hw.vendor has anything we could use.
+        rc, out, err = self.module.run_command("/usr/sbin/sysctl -n hw.vendor")
+        if rc != 0:
+          self.facts['virtualization_type'] = ''
+          self.facts['virtualization_role'] = ''
+          return
+        elif out.rstrip() == 'QEMU':
+          self.facts['virtualization_type'] = 'kvm'
+          self.facts['virtualization_role'] = 'guest'
+          return
@


1.2
log
@Update sysutils/ansible to 1.9.0.1

OK aja@@, sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_ansible_module_utils_facts_py,v 1.1 2014/10/30 19:17:52 sthen Exp $
d3 1
a3 1
https://github.com/ansible/ansible/pull/9458
d5 4
a8 8
--- lib/ansible/module_utils/facts.py.orig	Thu Oct 30 13:14:45 2014
+++ lib/ansible/module_utils/facts.py	Thu Oct 30 13:20:22 2014
@@@@ -166,6 +166,8 @@@@ class Facts(object):
             rc, out, err = module.run_command("/usr/sbin/bootinfo -p")
             data = out.split('\n')
             self.facts['architecture'] = data[0]
+        elif self.facts['system'] == 'OpenBSD':
+            self.facts['architecture'] = platform.uname()[5]
d10 44
d55 2
a56 1
     def get_local_facts(self):
@


1.1
log
@Set ansible_architecture correctly on machines where arch -s != uname -m,
it's quite useful for building pkg.conf amongst other things.  ok rpe@@
@
text
@d1 1
a1 1
$OpenBSD$
@

