head	1.5;
access;
symbols
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2014.11.12.07.42.47;	author jasper;	state dead;
branches;
next	1.4;
commitid	xy6BdfhiV2hBlhui;

1.4
date	2014.11.04.09.03.58;	author jasper;	state Exp;
branches;
next	1.3;
commitid	Q2mYWmNfGCWHn8ft;

1.3
date	2014.10.30.12.21.37;	author jasper;	state Exp;
branches;
next	1.2;
commitid	5Xe1xvbFEvCxULkn;

1.2
date	2013.06.10.14.46.34;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.08.16.12.47;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- add a new provider for user/group management on openbsd, so we don't have
  to add exceptions for openbsd all over the generic provider.
- unbreak account expiration while here

additional testing by sebastia@@
@
text
@$OpenBSD: patch-lib_puppet_provider_user_useradd_rb,v 1.4 2014/11/04 09:03:58 jasper Exp $

- add new 'loginclass' attribute to the 'user' type
- make 'chage' an optional command

--- lib/puppet/provider/user/useradd.rb.orig	Tue Oct 21 23:52:27 2014
+++ lib/puppet/provider/user/useradd.rb	Sun Nov  2 20:55:27 2014
@@@@ -9,7 +9,7 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
     install Ruby's shadow password library (often known as `ruby-libshadow`)
     if you wish to manage user passwords."
 
-  commands :add => "useradd", :delete => "userdel", :modify => "usermod", :password => "chage"
+  commands :add => "useradd", :delete => "userdel", :modify => "usermod"
 
   options :home, :flag => "-d", :method => :dir
   options :comment, :method => :gecos
@@@@ -17,6 +17,7 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
   options :password_min_age, :flag => "-m", :method => :sp_min
   options :password_max_age, :flag => "-M", :method => :sp_max
   options :password, :method => :sp_pwdp
+  options :loginclass, :flag => '-L', :method => :sp_loginclass
   options :expiry, :method => :sp_expire,
     :munge => proc { |value|
       if value == :absent
@@@@ -42,6 +43,8 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
     }
 
   optional_commands :localadd => "luseradd"
+  optional_commands :chage    => "chage"
+  optional_commands :password => "passwd"
   has_feature :libuser if Puppet.features.libuser?
 
   def exists?
@@@@ -159,6 +162,7 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
       next if property.to_s =~ /password_.+_age/
       next if property == :groups and @@resource.forcelocal?
       next if property == :expiry and @@resource.forcelocal?
+      next if property == :loginclass and @@resource.forcelocal?
       # the value needs to be quoted, mostly because -c might
       # have spaces in it
       if value = @@resource.should(property) and value != ""
@@@@ -191,16 +195,25 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
     cmd << @@resource[:name]
   end
 
+  def self.passwordcmd
+    case Facter.value(:operatingsystem)
+    when 'OpenBSD'
+      command(:password)
+    else
+      command(:chage)
+    end
+  end
+
   def passcmd
     age_limits = [:password_min_age, :password_max_age].select { |property| @@resource.should(property) }
     if age_limits.empty?
       nil
     else
-      [command(:password),age_limits.collect { |property| [flag(property), @@resource.should(property)]}, @@resource[:name]].flatten
+      [passwordcmd,age_limits.collect { |property| [flag(property), @@resource.should(property)]}, @@resource[:name]].flatten
     end
   end
 
-  [:expiry, :password_min_age, :password_max_age, :password].each do |shadow_property|
+  [:expiry, :password_min_age, :password_max_age, :password, :loginclass].each do |shadow_property|
     define_method(shadow_property) do
       if Puppet.features.libshadow?
         if ent = Shadow::Passwd.getspnam(@@resource.name)
@


1.4
log
@- usermod -G doesn't mean what puppet thinks it means, so use -S so actually
  set groups. this allows puppet to revoke group membership for a user.
- make 'chage' and 'password' optional commands

reminded and tested by sebastia@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_puppet_provider_user_useradd_rb,v 1.3 2014/10/30 12:21:37 jasper Exp $
@


1.3
log
@- add 'loginclass' property to the 'user' type to get and set the login class for a user
- bump ruby-shadow dependency

requested, tested and ok sebastia@@
@
text
@d1 5
a5 1
$OpenBSD: patch-lib_puppet_provider_user_useradd_rb,v 1.2 2013/06/10 14:46:34 jasper Exp $
d7 1
a7 1
+++ lib/puppet/provider/user/useradd.rb	Thu Oct 30 12:16:26 2014
d13 1
a13 1
+  commands :add => "useradd", :delete => "userdel", :modify => "usermod", :password => "passwd"
d25 10
a34 1
@@@@ -159,6 +160,7 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
d42 20
a61 1
@@@@ -200,7 +202,7 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
@


1.2
log
@update to ruby-puppet-3.2.1

Please refer to http://docs.puppetlabs.com/puppet/3/reference/release_notes.html#puppet-321
for the release notes.

ok robert@@ (MAINTAINER) ajacoutot@@
@
text
@d1 3
a3 3
$OpenBSD: patch-lib_puppet_provider_user_useradd_rb,v 1.1 2013/03/08 16:12:47 ajacoutot Exp $
--- lib/puppet/provider/user/useradd.rb.orig	Wed May 22 19:29:46 2013
+++ lib/puppet/provider/user/useradd.rb	Mon Jun 10 14:04:56 2013
d13 25
@


1.1
log
@Split ruby-puppet:
* move the current port to ruby-puppet/3
* add a new puppet-2.7.X port under ruby-puppet/2

This allows us to ship with 2 different versions of Puppet. Since the
Enterprise version is still running 2.7, we want to have a matching
client because running puppet3 against a puppet2 server is highly
discouraged and will mostly no work correctly.

ok jasper@@, robert@@ (maintainer)
@
text
@d1 4
a4 4
$OpenBSD: patch-lib_puppet_provider_user_useradd_rb,v 1.2 2012/04/13 08:18:30 jasper Exp $
--- lib/puppet/provider/user/useradd.rb.orig	Tue Apr 10 20:23:16 2012
+++ lib/puppet/provider/user/useradd.rb	Fri Apr 13 09:29:03 2012
@@@@ -5,7 +5,7 @@@@ Puppet::Type.type(:user).provide :useradd, :parent => 
@

