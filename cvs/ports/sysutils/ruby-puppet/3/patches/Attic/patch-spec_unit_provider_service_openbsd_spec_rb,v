head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.2;
locks; strict;
comment	@# @;


1.4
date	2013.12.20.14.10.41;	author jasper;	state dead;
branches;
next	1.3;

1.3
date	2013.09.17.18.45.31;	author jasper;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2013.09.17.09.54.36;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.17.09.00.58;	author jasper;	state Exp;
branches;
next	;

1.3.2.1
date	2013.12.15.19.44.32;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- update to puppet-3.4.0
* full changelog http://docs.puppetlabs.com/puppet/3/reference/release_notes.html#puppet-340
@
text
@$OpenBSD: patch-spec_unit_provider_service_openbsd_spec_rb,v 1.3 2013/09/17 18:45:31 jasper Exp $

From 1de80e849cd5871aa6ce2828dab11dda1b1575a1 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Tue, 17 Sep 2013 10:57:45 +0200
Subject: [PATCH] (#22579) Add service provider for OpenBSD's rc.d

--- spec/unit/provider/service/openbsd_spec.rb.orig	Tue Sep 17 20:44:10 2013
+++ spec/unit/provider/service/openbsd_spec.rb	Tue Sep 17 20:44:52 2013
@@@@ -0,0 +1,125 @@@@
+#!/usr/bin/env ruby
+#
+# Unit testing for the OpenBSD service provider
+
+require 'spec_helper'
+
+provider_class = Puppet::Type.type(:service).provider(:openbsd)
+
+describe provider_class do
+  before :each do
+    Puppet::Type.type(:service).stubs(:defaultprovider).returns described_class
+    Facter.stubs(:value).with(:operatingsystem).returns :openbsd
+  end
+
+  let :rcscripts do
+    [
+     'apmd',
+     'aucat',
+     'cron',
+     'puppetd'
+   ]
+  end
+
+  describe "#instances" do
+    it "should have an instances method" do
+      described_class.should respond_to :instances
+    end
+
+    it "should list all available services" do
+      FileTest.expects(:directory?).with('/etc/rc.d').returns true
+      Dir.expects(:entries).with('/etc/rc.d').returns rcscripts
+
+      rcscripts.each do |script|
+        FileTest.expects(:executable?).with("/etc/rc.d/#{script}").returns true
+      end
+
+      described_class.instances.map(&:name).should == [
+        'apmd',
+        'aucat',
+        'cron',
+        'puppetd'
+      ]
+    end
+  end
+
+  describe "#start" do
+    it "should use the supplied start command if specified" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :start => '/bin/foo'))
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.start
+    end
+
+    it "should start the service otherwise" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd'))
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :start], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.expects(:search).with('sshd').returns('/etc/rc.d/sshd')
+      provider.start
+    end
+  end
+
+  describe "#stop" do
+    it "should use the supplied stop command if specified" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :stop => '/bin/foo'))
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.stop
+    end
+
+    it "should stop the service otherwise" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd'))
+      provider.expects(:execute).with(['/etc/rc.d/sshd', :stop], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.expects(:search).with('sshd').returns('/etc/rc.d/sshd')
+      provider.stop
+    end
+  end
+
+  describe "#status" do
+    it "should use the status command from the resource" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :status => '/bin/foo'))
+      provider.expects(:execute).with(['/etc/rc.d/sshd', :status], :failonfail => false, :override_locale => false, :squelch => true).never
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => false, :override_locale => false, :squelch => true)
+      provider.status
+    end
+
+      it "should return :stopped when status command returns with a non-zero exitcode" do
+        provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :status => '/bin/foo'))
+        provider.expects(:execute).with(['/etc/rc.d/sshd', :status], :failonfail => false, :override_locale => false, :squelch => true).never
+        provider.expects(:execute).with(['/bin/foo'], :failonfail => false, :override_locale => false, :squelch => true)
+        $CHILD_STATUS.stubs(:exitstatus).returns 3
+        provider.status.should == :stopped
+      end
+
+      it "should return :running when status command returns with a zero exitcode" do
+        provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :status => '/bin/foo'))
+        provider.expects(:execute).with(['/etc/rc.d/sshd', :status], :failonfail => false, :override_locale => false, :squelch => true).never
+        provider.expects(:execute).with(['/bin/foo'], :failonfail => false, :override_locale => false, :squelch => true)
+        $CHILD_STATUS.stubs(:exitstatus).returns 0
+        provider.status.should == :running
+      end
+  end
+
+  describe "#restart" do
+    it "should use the supplied restart command if specified" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :restart => '/bin/foo'))
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :restart], :failonfail => true, :override_locale => false, :squelch => true).never
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.restart
+    end
+
+    it "should restart the service with rc-service restart if hasrestart is true" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :hasrestart => true))
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :restart], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.expects(:search).with('sshd').returns('/etc/rc.d/sshd')
+      provider.restart
+    end
+
+    it "should restart the service with rc-service stop/start if hasrestart is false" do
+      provider = described_class.new(Puppet::Type.type(:service).new(:name => 'sshd', :hasrestart => false))
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :restart], :failonfail => true, :override_locale => false, :squelch => true).never
+      provider.expects(:execute).with(['/etc/rc.d/sshd', :stop], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :start], :failonfail => true, :override_locale => false, :squelch => true)
+      provider.expects(:search).with('sshd').returns('/etc/rc.d/sshd')
+      provider.restart
+    end
+  end
+end
@


1.3
log
@sync with upstream/master now that it's been merged
@
text
@d1 1
a1 1
$OpenBSD: patch-spec_unit_provider_service_openbsd_spec_rb,v 1.2 2013/09/17 09:54:36 jasper Exp $
@


1.3.2.1
log
@update puppet to 3.3.2

this allows OpenBSD 5.4 agents to work correctly again with a puppet master
unning -current. puppet 3.3 has a new reporting format as well as support
for ensure => latest for packages. now one can use the same manifest for
5.4 and -current again.

note: libshadow was not imported into 5.4 so managing user passwords won't
work on 5.4 still.

discussed with sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-spec_unit_provider_service_openbsd_spec_rb,v 1.3 2013/09/17 18:45:31 jasper Exp $
@


1.2
log
@sync with what's been submitted upstream, no pkg change.
@
text
@d1 1
a1 1
$OpenBSD: patch-spec_unit_provider_service_openbsd_spec_rb,v 1.1 2013/09/17 09:00:58 jasper Exp $
d8 2
a9 2
--- spec/unit/provider/service/openbsd_spec.rb.orig	Tue Sep 17 11:53:38 2013
+++ spec/unit/provider/service/openbsd_spec.rb	Tue Sep 17 11:54:00 2013
d59 1
a59 1
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => true, :squelch => true)
d65 1
a65 1
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :start], :failonfail => true, :squelch => true)
d74 1
a74 1
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => true, :squelch => true)
d80 1
a80 1
+      provider.expects(:execute).with(['/etc/rc.d/sshd', :stop], :failonfail => true, :squelch => true)
d89 2
a90 2
+      provider.expects(:execute).with(['/etc/rc.d/sshd', :status], :failonfail => false, :squelch => true).never
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => false, :squelch => true)
d96 2
a97 2
+        provider.expects(:execute).with(['/etc/rc.d/sshd', :status], :failonfail => false, :squelch => true).never
+        provider.expects(:execute).with(['/bin/foo'], :failonfail => false, :squelch => true)
d104 2
a105 2
+        provider.expects(:execute).with(['/etc/rc.d/sshd', :status], :failonfail => false, :squelch => true).never
+        provider.expects(:execute).with(['/bin/foo'], :failonfail => false, :squelch => true)
d114 2
a115 2
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :restart], :failonfail => true, :squelch => true).never
+      provider.expects(:execute).with(['/bin/foo'], :failonfail => true, :squelch => true)
d121 1
a121 1
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :restart], :failonfail => true, :squelch => true)
d128 3
a130 3
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :restart], :failonfail => true, :squelch => true).never
+      provider.expects(:execute).with(['/etc/rc.d/sshd', :stop], :failonfail => true, :squelch => true)
+      provider.expects(:execute).with(['/etc/rc.d/sshd', '-f', :start], :failonfail => true, :squelch => true)
@


1.1
log
@add missing spec tests for the openbsd service provider
@
text
@d1 10
a10 4
$OpenBSD$
--- spec/unit/provider/service/openbsd_spec.rb.orig	Tue Sep 17 10:59:45 2013
+++ spec/unit/provider/service/openbsd_spec.rb	Tue Sep 17 10:59:56 2013
@@@@ -0,0 +1,130 @@@@
d20 4
a23 14
+#  before :each do
+#    @@resource = stub 'resource'
+#    @@provider = provider_class.new
+
+    # Catch all; no parameters set
+#    @@resource.stubs(:[]).returns(nil)
+
+    # Do set name and ensure
+#    @@resource.stubs(:[]).with(:name).returns "myservice"
+#    @@resource.stubs(:[]).with(:ensure).returns "running"
+#    @@resource.stubs(:ref).returns "Service[myservice]"
+
+#    @@provider.resource = @@resource
+#  end
d40 1
d66 1
d81 1
d122 1
d131 1
@

