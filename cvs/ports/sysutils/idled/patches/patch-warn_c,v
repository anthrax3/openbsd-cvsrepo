head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.50
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.48
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.46
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.42
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.44
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.40
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.38
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.36
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.34
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.32
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.30
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.28
	OPENBSD_5_0:1.1.0.26
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.24
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.22
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.20
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.18
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.16
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.14
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.12
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.10
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2005.04.21.10.47.37;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@remove truely atrocious use of FILE internals.
If you don't want fclose(f) to flush the file, just close the
underlying file descriptor, then fclose() doesn't have anything to
hang upon.
@
text
@$OpenBSD$
--- warn.c.orig	Thu Apr 21 12:43:40 2005
+++ warn.c	Thu Apr 21 12:45:48 2005
@@@@ -139,24 +139,7 @@@@ void warn(i, type, do_msg)
    {
       if (opened)
       {
-         /* Prevent the close from flushing unwritten data, since that is
-          * probably the block that caused us to get here in the first
-          * place.  This probably isn't very portable, but I can't find
-          * any other method that works (barring changing all the output
-          * here to use a simple file descriptor instead of a FILE *).
-          * Linux is the only system I have seen that doesn't have the
-          * _ptr and _base.  Let me know if there are others, or if you
-          * have a system independant way to fix it!
-          */
-#if defined(__linux__)
-         termf->_IO_read_ptr = termf->_IO_read_base;
-         termf->_IO_write_ptr = termf->_IO_write_base;
-#elif defined(BSDI) || defined(BSD_OS2)
-         termf->_p = (termf->_ub)._base;
-#else
-	 termf->_ptr = termf->_base;
-#endif
-         (void) fclose (termf);
+         close (fileno(termf));
       }
 
       exit (0);
@
