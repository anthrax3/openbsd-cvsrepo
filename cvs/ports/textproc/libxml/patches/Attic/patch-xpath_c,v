head	1.7;
access;
symbols
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2017.09.14.14.56.41;	author jasper;	state dead;
branches;
next	1.6;
commitid	FAIUyu5bhqWktSPs;

1.6
date	2016.12.30.15.54.57;	author bluhm;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	d3PoWBFmTAwaRADY;

1.5
date	2012.09.30.12.22.05;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2012.01.23.10.17.49;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.30.12.35.16;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.01.17.31.21;	author gsoares;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2010.12.28.10.53.02;	author jasper;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2010.12.28.10.53.13;	author jasper;	state Exp;
branches;
next	;

1.1.4.1
date	2011.06.01.17.40.39;	author gsoares;	state Exp;
branches;
next	;

1.2.2.1
date	2011.10.30.12.35.24;	author jasper;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2012.01.23.10.19.14;	author ajacoutot;	state Exp;
branches;
next	;

1.6.2.1
date	2017.01.10.10.45.01;	author robert;	state Exp;
branches;
next	;
commitid	8SozWfxVaIiiBqqh;


desc
@@


1.7
log
@update to libxml-2.9.5

tested in a bulk by, and ok aja@@
@
text
@$OpenBSD: patch-xpath_c,v 1.6 2016/12/30 15:54:57 bluhm Exp $

https://git.gnome.org/browse/libxml2/commit/?id=9ab01a277d71f54d3143c2cf333c5c2e9aaedd9e

--- xpath.c.orig	Mon May 23 09:25:25 2016
+++ xpath.c	Fri Dec 30 12:40:25 2016
@@@@ -10691,13 +10691,18 @@@@ xmlXPathCompPathExpr(xmlXPathParserContextPtr ctxt) {
 		    lc = 1;
 		    break;
 		} else if ((NXT(len) == '(')) {
-		    /* Note Type or Function */
+		    /* Node Type or Function */
 		    if (xmlXPathIsNodeType(name)) {
 #ifdef DEBUG_STEP
 		        xmlGenericError(xmlGenericErrorContext,
 				"PathExpr: Type search\n");
 #endif
 			lc = 1;
+#ifdef LIBXML_XPTR_ENABLED
+                    } else if (ctxt->xptr &&
+                               xmlStrEqual(name, BAD_CAST "range-to")) {
+                        lc = 1;
+#endif
 		    } else {
 #ifdef DEBUG_STEP
 		        xmlGenericError(xmlGenericErrorContext,
@


1.6
log
@Apply patches for CVE-2016-4658 and CVE-2016-5131 to libxml 2.9.4.
From Simon Mages; OK ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6.2.1
log
@backports patches for CVE-2016-4658 and CVE-2016-5131
@
text
@d1 1
a1 1
$OpenBSD: patch-xpath_c,v 1.6 2016/12/30 15:54:57 bluhm Exp $
@


1.5
log
@- update to libxml-2.8.0

tested on amd64, sparc64, mips64el and powerpc.
ok aja@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xpath_c,v 1.4 2012/01/23 10:17:49 ajacoutot Exp $
d3 1
a3 4
From f5048b3e71fc30ad096970b8df6e7af073bae4cb Mon Sep 17 00:00:00 2001
From: Daniel Veillard <veillard@@redhat.com>
Date: Thu, 18 Aug 2011 09:10:13 +0000
Subject: Hardening of XPath evaluation
d5 4
a8 183
- Fix for CVE-2010-4494, Libxml2 XPath Double Free Vulnerability.
  From upstream git: df83c17e5a2646bd923f75e5e507bc80d73c9722

- Fix for SA44711, Libxml2 XPath Nodeset Processing Vulnerability.
  From upstream git: d7958b21e7f8c447a26bb2436f08402b2c308be4

- Fix for CVE-2011-2821, Libxml2 XSLT Double Free Vulnerabilitiy.
  From upstream git: df83c17e5a2646bd923f75e5e507bc80d73c9722

- Fix for CVE-2011-2834, Libxml2 XSLT Double Free Vulnerabilitiy.
  From upstream git: 1d4526f6f4ec8d18c40e2a09b387652a6c1aa2cd

--- xpath.c.orig	Mon Jan 23 08:15:36 2012
+++ xpath.c	Mon Jan 23 08:20:48 2012
@@@@ -252,6 +252,7 @@@@ static const char *xmlXPathErrorMessages[] = {
     "Encoding error\n",
     "Char out of XML range\n",
     "Invalid or incomplete context\n",
+    "Stack usage errror\n",
     "?? Unknown error ??\n"	/* Must be last in the list! */
 };
 #define MAXERRNO ((int)(sizeof(xmlXPathErrorMessages) /	\
@@@@ -2398,6 +2399,42 @@@@ xmlXPathCacheConvertNumber(xmlXPathContextPtr ctxt, xm
  ************************************************************************/
 
 /**
+ * xmlXPathSetFrame:
+ * @@ctxt: an XPath parser context
+ *
+ * Set the callee evaluation frame
+ *
+ * Returns the previous frame value to be restored once done
+ */
+static int
+xmlXPathSetFrame(xmlXPathParserContextPtr ctxt) {
+    int ret;
+
+    if (ctxt == NULL)
+        return(0);
+    ret = ctxt->valueFrame;
+    ctxt->valueFrame = ctxt->valueNr;
+    return(ret);
+}
+
+/**
+ * xmlXPathPopFrame:
+ * @@ctxt: an XPath parser context
+ * @@frame: the previous frame value
+ *
+ * Remove the callee evaluation frame
+ */
+static void
+xmlXPathPopFrame(xmlXPathParserContextPtr ctxt, int frame) {
+    if (ctxt == NULL)
+        return;
+    if (ctxt->valueNr < ctxt->valueFrame) {
+        xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
+    }
+    ctxt->valueFrame = frame;
+}
+
+/**
  * valuePop:
  * @@ctxt: an XPath evaluation context
  *
@@@@ -2412,6 +2449,12 @@@@ valuePop(xmlXPathParserContextPtr ctxt)
 
     if ((ctxt == NULL) || (ctxt->valueNr <= 0))
         return (NULL);
+
+    if (ctxt->valueNr <= ctxt->valueFrame) {
+        xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
+        return (NULL);
+    }
+
     ctxt->valueNr--;
     if (ctxt->valueNr > 0)
         ctxt->value = ctxt->valueTab[ctxt->valueNr - 1];
@@@@ -2442,6 +2485,7 @@@@ valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjec
                                              sizeof(ctxt->valueTab[0]));
         if (tmp == NULL) {
             xmlGenericError(xmlGenericErrorContext, "realloc failed !\n");
+            ctxt->error = XPATH_MEMORY_ERROR;
             return (0);
         }
         ctxt->valueMax *= 2;
@@@@ -3522,13 +3566,13 @@@@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr nod
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
 
-        cur->nodeMax *= 2;
-	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax *
+	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
 	if (temp == NULL) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return;
 	}
+        cur->nodeMax *= 2;
 	cur->nodeTab = temp;
     }
     cur->nodeTab[cur->nodeNr++] = xmlXPathNodeSetDupNs(node, ns);
@@@@ -3627,14 +3671,14 @@@@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
 
-        cur->nodeMax *= 2;
-	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax *
+	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
 	if (temp == NULL) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return;
 	}
 	cur->nodeTab = temp;
+        cur->nodeMax *= 2;
     }
     if (val->type == XML_NAMESPACE_DECL) {
 	xmlNsPtr ns = (xmlNsPtr) val;
@@@@ -3738,14 +3782,14 @@@@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr
 	} else if (val1->nodeNr == val1->nodeMax) {
 	    xmlNodePtr *temp;
 
-	    val1->nodeMax *= 2;
-	    temp = (xmlNodePtr *) xmlRealloc(val1->nodeTab, val1->nodeMax *
+	    temp = (xmlNodePtr *) xmlRealloc(val1->nodeTab, val1->nodeMax * 2 *
 					     sizeof(xmlNodePtr));
 	    if (temp == NULL) {
 	        xmlXPathErrMemory(NULL, "merging nodeset\n");
 		return(NULL);
 	    }
 	    val1->nodeTab = temp;
+	    val1->nodeMax *= 2;
 	}
 	if (n2->type == XML_NAMESPACE_DECL) {
 	    xmlNsPtr ns = (xmlNsPtr) n2;
@@@@ -3907,14 +3951,14 @@@@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNo
 	    } else if (set1->nodeNr >= set1->nodeMax) {
 		xmlNodePtr *temp;
 
-		set1->nodeMax *= 2;
 		temp = (xmlNodePtr *) xmlRealloc(
-		    set1->nodeTab, set1->nodeMax * sizeof(xmlNodePtr));
+		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
 		if (temp == NULL) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
 		set1->nodeTab = temp;
+		set1->nodeMax *= 2;
 	    }
 	    if (n2->type == XML_NAMESPACE_DECL) {
 		xmlNsPtr ns = (xmlNsPtr) n2;
@@@@ -3991,14 +4035,14 @@@@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1
 	    } else if (set1->nodeNr >= set1->nodeMax) {
 		xmlNodePtr *temp;
 
-		set1->nodeMax *= 2;
 		temp = (xmlNodePtr *) xmlRealloc(
-		    set1->nodeTab, set1->nodeMax * sizeof(xmlNodePtr));
+		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
 		if (temp == NULL) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
 		set1->nodeTab = temp;
+		set1->nodeMax *= 2;
 	    }
 	    set1->nodeTab[set1->nodeNr++] = n2;
 	}
@@@@ -6154,6 +6198,7 @@@@ xmlXPathCompParserContext(xmlXPathCompExprPtr comp, xm
     ret->valueNr = 0;
     ret->valueMax = 10;
     ret->value = NULL;
+    ret->valueFrame = 0;
 
     ret->context = ctxt;
     ret->comp = comp;
@@@@ -9296,6 +9341,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
 		if ( (ch & 0xc0) != 0xc0 ) {
 		    xmlGenericError(xmlGenericErrorContext,
 			"xmlXPathTranslateFunction: Invalid UTF8 string\n");
+                    /* not asserting an XPath error is probably better */
d10 17
a26 130
 		}
 		/* then skip over remaining bytes for this char */
@@@@ -9303,6 +9349,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
 		    if ( (*cptr++ & 0xc0) != 0x80 ) {
 			xmlGenericError(xmlGenericErrorContext,
 			    "xmlXPathTranslateFunction: Invalid UTF8 string\n");
+                        /* not asserting an XPath error is probably better */
 			break;
 		    }
 		if (ch & 0x80) /* must have had error encountered */
@@@@ -11712,6 +11759,7 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 	xmlXPathObjectPtr contextObj = NULL, exprRes = NULL;
 	xmlNodePtr oldContextNode, contextNode = NULL;
 	xmlXPathContextPtr xpctxt = ctxt->context;
+        int frame;
 
 #ifdef LIBXML_XPTR_ENABLED
 	    /*
@@@@ -11731,6 +11779,8 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 	*/
 	exprOp = &ctxt->comp->steps[op->ch2];
 	for (i = 0; i < set->nodeNr; i++) {
+            xmlXPathObjectPtr tmp;
+
 	    if (set->nodeTab[i] == NULL)
 		continue;
 
@@@@ -11758,18 +11808,25 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 		xmlXPathNodeSetAddUnique(contextObj->nodesetval,
 		    contextNode);
 
+	    frame = xmlXPathSetFrame(ctxt);
 	    valuePush(ctxt, contextObj);
 	    res = xmlXPathCompOpEvalToBoolean(ctxt, exprOp, 1);
+	    tmp = valuePop(ctxt);
+	    xmlXPathPopFrame(ctxt, frame);
 
 	    if ((ctxt->error != XPATH_EXPRESSION_OK) || (res == -1)) {
-	        xmlXPathObjectPtr tmp;
-		/* pop the result */
-		tmp = valuePop(ctxt);
-		xmlXPathReleaseObject(xpctxt, tmp);
-		/* then pop off contextObj, which will be freed later */
-		valuePop(ctxt);
+		while (tmp != contextObj) {
+                    /*
+                     * Free up the result
+                     * then pop off contextObj, which will be freed later
+                     */
+                    xmlXPathReleaseObject(xpctxt, tmp);
+                    tmp = valuePop(ctxt);
+		}
 		goto evaluation_error;
 	    }
+            /* push the result back onto the stack */
+            valuePush(ctxt, tmp);
 
 	    if (res)
 		pos++;
@@@@ -13357,6 +13414,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                         xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: variable %s bound to undefined prefix %s\n",
                                     (char *) op->value4, (char *)op->value5);
+			ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
                         return (total);
                     }
 		    val = xmlXPathVariableLookupNS(ctxt->context,
@@@@ -13373,7 +13431,9 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                 xmlXPathFunction func;
                 const xmlChar *oldFunc, *oldFuncURI;
 		int i;
+                int frame;
 
+                frame = xmlXPathSetFrame(ctxt);
                 if (op->ch1 != -1)
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
@@@@ -13381,15 +13441,18 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
 		    xmlGenericError(xmlGenericErrorContext,
 			    "xmlXPathCompOpEval: parameter error\n");
 		    ctxt->error = XPATH_INVALID_OPERAND;
+                    xmlXPathPopFrame(ctxt, frame);
 		    return (total);
 		}
-		for (i = 0; i < op->value; i++)
+		for (i = 0; i < op->value; i++) {
 		    if (ctxt->valueTab[(ctxt->valueNr - 1) - i] == NULL) {
 			xmlGenericError(xmlGenericErrorContext,
 				"xmlXPathCompOpEval: parameter error\n");
 			ctxt->error = XPATH_INVALID_OPERAND;
+                        xmlXPathPopFrame(ctxt, frame);
 			return (total);
 		    }
+                }
                 if (op->cache != NULL)
                     XML_CAST_FPTR(func) = op->cache;
                 else {
@@@@ -13405,6 +13468,8 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                             xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: function %s bound to undefined prefix %s\n",
                                     (char *)op->value4, (char *)op->value5);
+                            ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
+                            xmlXPathPopFrame(ctxt, frame);
                             return (total);
                         }
                         func = xmlXPathFunctionLookupNS(ctxt->context,
@@@@ -13426,6 +13491,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                 func(ctxt, op->value);
                 ctxt->context->function = oldFunc;
                 ctxt->context->functionURI = oldFuncURI;
+                xmlXPathPopFrame(ctxt, frame);
                 return (total);
             }
         case XPATH_OP_ARG:
@@@@ -13982,6 +14048,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
     }
     xmlGenericError(xmlGenericErrorContext,
                     "XPath: unknown precompiled operation %d\n", op->op);
+    ctxt->error = XPATH_INVALID_OPERAND;
     return (total);
 }
 
@@@@ -14329,6 +14396,7 @@@@ xmlXPathRunEval(xmlXPathParserContextPtr ctxt, int toB
 	ctxt->valueNr = 0;
 	ctxt->valueMax = 10;
 	ctxt->value = NULL;
+        ctxt->valueFrame = 0;
     }
 #ifdef XPATH_STREAMING
     if (ctxt->comp->stream) {
@


1.4
log
@Bring some patches from upstream repo to fix the following CVE:
CVE-2011-0216 - Off-by-one error
CVE-2011-2821 - Double free vulnerability
CVE-2011-2834 - Double free vulnerability
CVE-2011-3905 - DOS (out-of-bounds read) via unspecified vectors
CVE-2011-3919 - Heap-based buffer overflow

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xpath_c,v 1.3 2011/10/30 12:35:16 jasper Exp $
@


1.3
log
@Security fix for CVE-2011-2821 and CVE-2011-2834,
Libxml2 Two XSLT Double Free Vulnerabilities

Patches from upstream.
@
text
@d1 6
a6 1
$OpenBSD: patch-xpath_c,v 1.2 2011/06/01 17:31:21 gsoares Exp $
d20 67
a86 3
--- xpath.c.orig	Wed Nov  3 20:18:27 2010
+++ xpath.c	Sun Oct 30 13:25:03 2011
@@@@ -2442,6 +2442,7 @@@@ valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjec
d94 1
a94 1
@@@@ -3522,13 +3523,13 @@@@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr nod
d110 1
a110 1
@@@@ -3627,14 +3628,14 @@@@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr
d127 1
a127 1
@@@@ -3738,14 +3739,14 @@@@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr
d144 1
a144 1
@@@@ -3907,14 +3908,14 @@@@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNo
d161 1
a161 1
@@@@ -3991,14 +3992,14 @@@@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1
d178 9
a186 1
@@@@ -9296,6 +9297,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
d194 1
a194 1
@@@@ -9303,6 +9305,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
d202 26
a227 1
@@@@ -11763,11 +11766,16 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
d230 1
a230 1
 	        xmlXPathObjectPtr tmp;
d232 1
a232 2
+		/* pop the result if any */
 		tmp = valuePop(ctxt);
d236 1
a236 1
+		if (tmp != contextObj) {
d242 1
a242 1
+                    valuePop(ctxt);
d246 2
d249 3
a251 1
@@@@ -13357,6 +13365,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
d259 31
a289 1
@@@@ -13405,6 +13414,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
d294 1
d298 9
a306 1
@@@@ -13982,6 +13992,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
d314 8
@


1.2
log
@Security Fix for SA44711, Libxml2 XPath Nodeset Processing Vulnerability.

OK sthen@@, "Yep, please go ahead" jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xpath_c,v 1.1 2010/12/28 10:53:02 jasper Exp $
d3 2
a4 2
Fix for CVE-2010-4494, Libxml2 XPath Double Free Vulnerability.
Fix for SA44711, Libxml2 XPath Nodeset Processing Vulnerability.
d6 2
a7 3
From upstream git:
http://git.gnome.org/browse/libxml2/commit/?id=df83c17e5a2646bd923f75e5e507bc80d73c9722
http://git.gnome.org/browse/libxml2/commit/?id=d7958b21e7f8c447a26bb2436f08402b2c308be4
d9 17
a25 3
--- xpath.c.orig	Wed Jun  1 09:57:56 2011
+++ xpath.c	Wed Jun  1 09:59:58 2011
@@@@ -3522,13 +3522,13 @@@@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr nod
d41 1
a41 1
@@@@ -3627,14 +3627,14 @@@@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr
d58 1
a58 1
@@@@ -3738,14 +3738,14 @@@@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr
d75 1
a75 1
@@@@ -3907,14 +3907,14 @@@@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNo
d92 1
a92 1
@@@@ -3991,14 +3991,14 @@@@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1
d109 61
@


1.2.2.1
log
@Security fix for CVE-2011-2821 and CVE-2011-2834,
Libxml2 Two XSLT Double Free Vulnerabilities

Patches from upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-xpath_c,v 1.2 2011/06/01 17:31:21 gsoares Exp $
d3 2
a4 2
- Fix for CVE-2010-4494, Libxml2 XPath Double Free Vulnerability.
  From upstream git: df83c17e5a2646bd923f75e5e507bc80d73c9722
d6 3
a8 2
- Fix for SA44711, Libxml2 XPath Nodeset Processing Vulnerability.
  From upstream git: d7958b21e7f8c447a26bb2436f08402b2c308be4
d10 3
a12 17
- Fix for CVE-2011-2821, Libxml2 XSLT Double Free Vulnerabilitiy.
  From upstream git: df83c17e5a2646bd923f75e5e507bc80d73c9722

- Fix for CVE-2011-2834, Libxml2 XSLT Double Free Vulnerabilitiy.
  From upstream git: 1d4526f6f4ec8d18c40e2a09b387652a6c1aa2cd

--- xpath.c.orig	Wed Nov  3 20:18:27 2010
+++ xpath.c	Sun Oct 30 13:25:03 2011
@@@@ -2442,6 +2442,7 @@@@ valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjec
                                              sizeof(ctxt->valueTab[0]));
         if (tmp == NULL) {
             xmlGenericError(xmlGenericErrorContext, "realloc failed !\n");
+            ctxt->error = XPATH_MEMORY_ERROR;
             return (0);
         }
         ctxt->valueMax *= 2;
@@@@ -3522,13 +3523,13 @@@@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr nod
d28 1
a28 1
@@@@ -3627,14 +3628,14 @@@@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr
d45 1
a45 1
@@@@ -3738,14 +3739,14 @@@@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr
d62 1
a62 1
@@@@ -3907,14 +3908,14 @@@@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNo
d79 1
a79 1
@@@@ -3991,14 +3992,14 @@@@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1
a95 61
@@@@ -9296,6 +9297,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
 		if ( (ch & 0xc0) != 0xc0 ) {
 		    xmlGenericError(xmlGenericErrorContext,
 			"xmlXPathTranslateFunction: Invalid UTF8 string\n");
+                    /* not asserting an XPath error is probably better */
 		    break;
 		}
 		/* then skip over remaining bytes for this char */
@@@@ -9303,6 +9305,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
 		    if ( (*cptr++ & 0xc0) != 0x80 ) {
 			xmlGenericError(xmlGenericErrorContext,
 			    "xmlXPathTranslateFunction: Invalid UTF8 string\n");
+                        /* not asserting an XPath error is probably better */
 			break;
 		    }
 		if (ch & 0x80) /* must have had error encountered */
@@@@ -11763,11 +11766,16 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 
 	    if ((ctxt->error != XPATH_EXPRESSION_OK) || (res == -1)) {
 	        xmlXPathObjectPtr tmp;
-		/* pop the result */
+		/* pop the result if any */
 		tmp = valuePop(ctxt);
-		xmlXPathReleaseObject(xpctxt, tmp);
-		/* then pop off contextObj, which will be freed later */
-		valuePop(ctxt);
+		if (tmp != contextObj) {
+                    /*
+                     * Free up the result
+                     * then pop off contextObj, which will be freed later
+                     */
+                    xmlXPathReleaseObject(xpctxt, tmp);
+                    valuePop(ctxt);
+		}
 		goto evaluation_error;
 	    }
 
@@@@ -13357,6 +13365,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                         xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: variable %s bound to undefined prefix %s\n",
                                     (char *) op->value4, (char *)op->value5);
+			ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
                         return (total);
                     }
 		    val = xmlXPathVariableLookupNS(ctxt->context,
@@@@ -13405,6 +13414,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                             xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: function %s bound to undefined prefix %s\n",
                                     (char *)op->value4, (char *)op->value5);
+                            ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
                             return (total);
                         }
                         func = xmlXPathFunctionLookupNS(ctxt->context,
@@@@ -13982,6 +13992,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
     }
     xmlGenericError(xmlGenericErrorContext,
                     "XPath: unknown precompiled operation %d\n", op->op);
+    ctxt->error = XPATH_INVALID_OPERAND;
     return (total);
 }
 
@


1.2.2.2
log
@Bring some patches from upstream repo to fix the following CVE:
CVE-2011-0216 - Off-by-one error
CVE-2011-2821 - Double free vulnerability
CVE-2011-2834 - Double free vulnerability
CVE-2011-3905 - DOS (out-of-bounds read) via unspecified vectors
CVE-2011-3919 - Heap-based buffer overflow

ok sthen@@
@
text
@d1 1
a1 6
$OpenBSD: patch-xpath_c,v 1.2.2.1 2011/10/30 12:35:24 jasper Exp $

From f5048b3e71fc30ad096970b8df6e7af073bae4cb Mon Sep 17 00:00:00 2001
From: Daniel Veillard <veillard@@redhat.com>
Date: Thu, 18 Aug 2011 09:10:13 +0000
Subject: Hardening of XPath evaluation
d15 3
a17 67
--- xpath.c.orig	Mon Jan 23 08:15:36 2012
+++ xpath.c	Mon Jan 23 08:20:48 2012
@@@@ -252,6 +252,7 @@@@ static const char *xmlXPathErrorMessages[] = {
     "Encoding error\n",
     "Char out of XML range\n",
     "Invalid or incomplete context\n",
+    "Stack usage errror\n",
     "?? Unknown error ??\n"	/* Must be last in the list! */
 };
 #define MAXERRNO ((int)(sizeof(xmlXPathErrorMessages) /	\
@@@@ -2398,6 +2399,42 @@@@ xmlXPathCacheConvertNumber(xmlXPathContextPtr ctxt, xm
  ************************************************************************/
 
 /**
+ * xmlXPathSetFrame:
+ * @@ctxt: an XPath parser context
+ *
+ * Set the callee evaluation frame
+ *
+ * Returns the previous frame value to be restored once done
+ */
+static int
+xmlXPathSetFrame(xmlXPathParserContextPtr ctxt) {
+    int ret;
+
+    if (ctxt == NULL)
+        return(0);
+    ret = ctxt->valueFrame;
+    ctxt->valueFrame = ctxt->valueNr;
+    return(ret);
+}
+
+/**
+ * xmlXPathPopFrame:
+ * @@ctxt: an XPath parser context
+ * @@frame: the previous frame value
+ *
+ * Remove the callee evaluation frame
+ */
+static void
+xmlXPathPopFrame(xmlXPathParserContextPtr ctxt, int frame) {
+    if (ctxt == NULL)
+        return;
+    if (ctxt->valueNr < ctxt->valueFrame) {
+        xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
+    }
+    ctxt->valueFrame = frame;
+}
+
+/**
  * valuePop:
  * @@ctxt: an XPath evaluation context
  *
@@@@ -2412,6 +2449,12 @@@@ valuePop(xmlXPathParserContextPtr ctxt)
 
     if ((ctxt == NULL) || (ctxt->valueNr <= 0))
         return (NULL);
+
+    if (ctxt->valueNr <= ctxt->valueFrame) {
+        xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
+        return (NULL);
+    }
+
     ctxt->valueNr--;
     if (ctxt->valueNr > 0)
         ctxt->value = ctxt->valueTab[ctxt->valueNr - 1];
@@@@ -2442,6 +2485,7 @@@@ valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjec
d25 1
a25 1
@@@@ -3522,13 +3566,13 @@@@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr nod
d41 1
a41 1
@@@@ -3627,14 +3671,14 @@@@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr
d58 1
a58 1
@@@@ -3738,14 +3782,14 @@@@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr
d75 1
a75 1
@@@@ -3907,14 +3951,14 @@@@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNo
d92 1
a92 1
@@@@ -3991,14 +4035,14 @@@@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1
d109 1
a109 9
@@@@ -6154,6 +6198,7 @@@@ xmlXPathCompParserContext(xmlXPathCompExprPtr comp, xm
     ret->valueNr = 0;
     ret->valueMax = 10;
     ret->value = NULL;
+    ret->valueFrame = 0;
 
     ret->context = ctxt;
     ret->comp = comp;
@@@@ -9296,6 +9341,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
d117 1
a117 1
@@@@ -9303,6 +9349,7 @@@@ xmlXPathTranslateFunction(xmlXPathParserContextPtr ctx
d125 1
a125 26
@@@@ -11712,6 +11759,7 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 	xmlXPathObjectPtr contextObj = NULL, exprRes = NULL;
 	xmlNodePtr oldContextNode, contextNode = NULL;
 	xmlXPathContextPtr xpctxt = ctxt->context;
+        int frame;
 
 #ifdef LIBXML_XPTR_ENABLED
 	    /*
@@@@ -11731,6 +11779,8 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 	*/
 	exprOp = &ctxt->comp->steps[op->ch2];
 	for (i = 0; i < set->nodeNr; i++) {
+            xmlXPathObjectPtr tmp;
+
 	    if (set->nodeTab[i] == NULL)
 		continue;
 
@@@@ -11758,18 +11808,25 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
 		xmlXPathNodeSetAddUnique(contextObj->nodesetval,
 		    contextNode);
 
+	    frame = xmlXPathSetFrame(ctxt);
 	    valuePush(ctxt, contextObj);
 	    res = xmlXPathCompOpEvalToBoolean(ctxt, exprOp, 1);
+	    tmp = valuePop(ctxt);
+	    xmlXPathPopFrame(ctxt, frame);
d128 1
a128 1
-	        xmlXPathObjectPtr tmp;
d130 2
a131 1
-		tmp = valuePop(ctxt);
d135 1
a135 1
+		while (tmp != contextObj) {
d141 1
a141 1
+                    tmp = valuePop(ctxt);
a144 2
+            /* push the result back onto the stack */
+            valuePush(ctxt, tmp);
d146 1
a146 3
 	    if (res)
 		pos++;
@@@@ -13357,6 +13414,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
d154 1
a154 31
@@@@ -13373,7 +13431,9 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                 xmlXPathFunction func;
                 const xmlChar *oldFunc, *oldFuncURI;
 		int i;
+                int frame;
 
+                frame = xmlXPathSetFrame(ctxt);
                 if (op->ch1 != -1)
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
@@@@ -13381,15 +13441,18 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
 		    xmlGenericError(xmlGenericErrorContext,
 			    "xmlXPathCompOpEval: parameter error\n");
 		    ctxt->error = XPATH_INVALID_OPERAND;
+                    xmlXPathPopFrame(ctxt, frame);
 		    return (total);
 		}
-		for (i = 0; i < op->value; i++)
+		for (i = 0; i < op->value; i++) {
 		    if (ctxt->valueTab[(ctxt->valueNr - 1) - i] == NULL) {
 			xmlGenericError(xmlGenericErrorContext,
 				"xmlXPathCompOpEval: parameter error\n");
 			ctxt->error = XPATH_INVALID_OPERAND;
+                        xmlXPathPopFrame(ctxt, frame);
 			return (total);
 		    }
+                }
                 if (op->cache != NULL)
                     XML_CAST_FPTR(func) = op->cache;
                 else {
@@@@ -13405,6 +13468,8 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
a158 1
+                            xmlXPathPopFrame(ctxt, frame);
d162 1
a162 9
@@@@ -13426,6 +13491,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
                 func(ctxt, op->value);
                 ctxt->context->function = oldFunc;
                 ctxt->context->functionURI = oldFuncURI;
+                xmlXPathPopFrame(ctxt, frame);
                 return (total);
             }
         case XPATH_OP_ARG:
@@@@ -13982,6 +14048,7 @@@@ xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlX
a169 8
@@@@ -14329,6 +14396,7 @@@@ xmlXPathRunEval(xmlXPathParserContextPtr ctxt, int toB
 	ctxt->valueNr = 0;
 	ctxt->valueMax = 10;
 	ctxt->value = NULL;
+        ctxt->valueFrame = 0;
     }
 #ifdef XPATH_STREAMING
     if (ctxt->comp->stream) {
@


1.1
log
@Security fix for CVE-2010-4494,
Libxml2 XPath Double Free Vulnerability

Patch from upstream git.
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
d8 1
d10 5
a14 3
--- xpath.c.orig	Wed Nov  3 20:18:27 2010
+++ xpath.c	Tue Dec 28 11:35:16 2010
@@@@ -11763,11 +11763,15 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
d16 40
a55 16
 	    if ((ctxt->error != XPATH_EXPRESSION_OK) || (res == -1)) {
 	        xmlXPathObjectPtr tmp;
-		/* pop the result */
+		/* pop the result if any */
 		tmp = valuePop(ctxt);
-		xmlXPathReleaseObject(xpctxt, tmp);
-		/* then pop off contextObj, which will be freed later */
-		valuePop(ctxt);
+                if (tmp != contextObj)
+                    /*
+                     * Free up the result
+                     * then pop off contextObj, which will be freed later
+                     */
+                    xmlXPathReleaseObject(xpctxt, tmp);
+                    valuePop(ctxt);
 		goto evaluation_error;
d57 8
d66 30
@


1.1.4.1
log
@Security Fix for SA44711, Libxml2 XPath Nodeset Processing Vulnerability.

OK sthen@@, "Yep, please go ahead" jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xpath_c,v 1.1 2010/12/28 10:53:02 jasper Exp $
a3 1
Fix for SA44711, Libxml2 XPath Nodeset Processing Vulnerability.
a6 1
http://git.gnome.org/browse/libxml2/commit/?id=d7958b21e7f8c447a26bb2436f08402b2c308be4
d8 3
a10 5
--- xpath.c.orig	Wed Jun  1 10:25:24 2011
+++ xpath.c	Wed Jun  1 10:26:20 2011
@@@@ -3522,13 +3522,13 @@@@ xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr nod
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
d12 16
a27 40
-        cur->nodeMax *= 2;
-	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax *
+	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
 	if (temp == NULL) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return;
 	}
+        cur->nodeMax *= 2;
 	cur->nodeTab = temp;
     }
     cur->nodeTab[cur->nodeNr++] = xmlXPathNodeSetDupNs(node, ns);
@@@@ -3627,14 +3627,14 @@@@ xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr
     } else if (cur->nodeNr == cur->nodeMax) {
         xmlNodePtr *temp;
 
-        cur->nodeMax *= 2;
-	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax *
+	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *
 				      sizeof(xmlNodePtr));
 	if (temp == NULL) {
 	    xmlXPathErrMemory(NULL, "growing nodeset\n");
 	    return;
 	}
 	cur->nodeTab = temp;
+        cur->nodeMax *= 2;
     }
     if (val->type == XML_NAMESPACE_DECL) {
 	xmlNsPtr ns = (xmlNsPtr) val;
@@@@ -3738,14 +3738,14 @@@@ xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr
 	} else if (val1->nodeNr == val1->nodeMax) {
 	    xmlNodePtr *temp;
 
-	    val1->nodeMax *= 2;
-	    temp = (xmlNodePtr *) xmlRealloc(val1->nodeTab, val1->nodeMax *
+	    temp = (xmlNodePtr *) xmlRealloc(val1->nodeTab, val1->nodeMax * 2 *
 					     sizeof(xmlNodePtr));
 	    if (temp == NULL) {
 	        xmlXPathErrMemory(NULL, "merging nodeset\n");
 		return(NULL);
a28 8
 	    val1->nodeTab = temp;
+	    val1->nodeMax *= 2;
 	}
 	if (n2->type == XML_NAMESPACE_DECL) {
 	    xmlNsPtr ns = (xmlNsPtr) n2;
@@@@ -3907,14 +3907,14 @@@@ xmlXPathNodeSetMergeAndClear(xmlNodeSetPtr set1, xmlNo
 	    } else if (set1->nodeNr >= set1->nodeMax) {
 		xmlNodePtr *temp;
a29 30
-		set1->nodeMax *= 2;
 		temp = (xmlNodePtr *) xmlRealloc(
-		    set1->nodeTab, set1->nodeMax * sizeof(xmlNodePtr));
+		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
 		if (temp == NULL) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
 		set1->nodeTab = temp;
+		set1->nodeMax *= 2;
 	    }
 	    if (n2->type == XML_NAMESPACE_DECL) {
 		xmlNsPtr ns = (xmlNsPtr) n2;
@@@@ -3991,14 +3991,14 @@@@ xmlXPathNodeSetMergeAndClearNoDupls(xmlNodeSetPtr set1
 	    } else if (set1->nodeNr >= set1->nodeMax) {
 		xmlNodePtr *temp;
 
-		set1->nodeMax *= 2;
 		temp = (xmlNodePtr *) xmlRealloc(
-		    set1->nodeTab, set1->nodeMax * sizeof(xmlNodePtr));
+		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
 		if (temp == NULL) {
 		    xmlXPathErrMemory(NULL, "merging nodeset\n");
 		    return(NULL);
 		}
 		set1->nodeTab = temp;
+		set1->nodeMax *= 2;
 	    }
 	    set1->nodeTab[set1->nodeNr++] = n2;
 	}
@


1.1.2.1
log
@Security fix for CVE-2010-4494,
Libxml2 XPath Double Free Vulnerability

Patch from upstream git.
@
text
@d8 3
a10 3
--- xpath.c.orig	Thu Sep 24 17:32:00 2009
+++ xpath.c	Tue Dec 28 11:42:01 2010
@@@@ -11737,11 +11737,15 @@@@ xmlXPathCompOpEvalPositionalPredicate(xmlXPathParserCo
@

