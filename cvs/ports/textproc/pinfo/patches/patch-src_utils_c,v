head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.40
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.38
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.36
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.32
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.34
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.30
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.28
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.26
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.24
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.22
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.20
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.1.1.0.18
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.16
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.14
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.12
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.10
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.8
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	espie:1.1.1.1
	pinfo:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2007.11.19.18.31.03;	author mgrimm;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.08.16.23.47;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.07.08.16.23.47;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to pinfo 0.6.9; many bugfixes.
With feedback, help and fixes from both kili@@ and espie@@.

ok kili@@, "go ahead" espie@@ (MAINTAINER)
@
text
@$OpenBSD$
--- src/utils.c.orig	Sun Jul  8 17:12:56 2007
+++ src/utils.c	Sun Jul  8 17:19:18 2007
@@@@ -553,6 +553,10 @@@@ handlewinch()
 int
 check_node_name( const char * const node_name, const char * const node_header)
 {
+	size_t header_len;
+	char *header, *str_start, *c;
+	int res;
+
 	/* if either one of node_name or node_header is NULL or a zero 
 	 * sized string, we have nothing to check, so return success */
 	if ( (node_name==NULL) || (node_header==NULL) 
@@@@ -561,15 +565,15 @@@@ check_node_name( const char * const node_name, const c
 		return 1;
 	}
 
-	size_t header_len = strlen(node_header);
+	header_len = strlen(node_header);
 	
 	/* copy node_header to a local string which can be mutilated */
 	/* don't use strdup here, as xmalloc handles all errors */
-	char *header = xmalloc( header_len + 1 );
+	header = xmalloc( header_len + 1 );
 	strcpy(header, node_header);
 
 	/* search for "Node: foobar," in node_header */
-	char *str_start = strstr(header, "Node: ");
+	str_start = strstr(header, "Node: ");
 	if (str_start==NULL) /* no match */
 	{
 		return 0;
@@@@ -577,14 +581,14 @@@@ check_node_name( const char * const node_name, const c
 	/* advance str_start to the start of the node name */
 	str_start += strlen("Node: ");
 	/* and search for the next comma, tab, or newline */
-	char *c = str_start;
+	c = str_start;
 	while ( (*c!=',') && (*c!='\t') && (*c!='\n') && (*c!='\0') ) c++;
 	*c = '\0';
 	
 	/* so, now str_start point to a \0-terminated string containing the 
 	 * node name from the header.
 	 * Let's compare it with the node_name we're looking for */
-	int res = strcmp(str_start, node_name);
+	res = strcmp(str_start, node_name);
 
 	/* we're done, so free alloc'ed vars */
 	xfree(header);
@@@@ -637,20 +641,24 @@@@ wcswidth(const wchar_t *wstr, size_t max_len)
 int
 width_of_string( const char * const mbs, const int len)
 {
+	int width;
+	char *str;
+#ifdef USE_WCHAR
+	wchar_t *wstr;
+#endif /* USE_WCHAR */
+
 	if (len<0) return -1;
 	if (len==0) return 0;
 
-	int width;
-
 	/* copy the string to a local buffer, because we only want to 
 	 * compare the first len bytes */
-	char *str = xmalloc(len+1);
+	str = xmalloc(len+1);
 	memcpy(str, mbs, len);
 	
 #ifdef USE_WCHAR
 
 	/* allocate a widestring */
-	wchar_t *wstr = xmalloc( (len+1)*sizeof(wchar_t) );
+	wstr = xmalloc( (len+1)*sizeof(wchar_t) );
 	
 	mbstowcs(wstr, str, len);
 	width = wcswidth(wstr, len);
@


1.1
log
@Initial revision
@
text
@d2 9
a10 6
--- src/utils.c.orig	Wed Jul  2 12:00:46 2003
+++ src/utils.c	Wed Jul  2 12:08:29 2003
@@@@ -474,3 +474,48 @@@@ handlewinch ()
   getmaxyx (stdscr, maxy, maxx);
   ungetch (keys.refresh_1);
 }
d12 48
a59 23
+char *
+mytempfile()
+{
+  char *result;
+  int fd;
+  
+#ifdef HAVE_MKSTEMP
+  result = strdup ("/tmp/pinfo.XXXXXXXXXX");
+  if (!result)
+	  return NULL;
+  fd = mkstemp (result);
+  if (fd == -1)
+    {
+      free (result);
+      return NULL;
+    }
+  else
+    {
+      close (fd);
+      return result;
+    }
+#else
+  int i;
d61 19
a79 20
+  for (i = 0; i < 50; i++)
+    {
+      result = tempnam ("/tmp", NULL);
+      if (!result)
+	break;
+      fd = open (result, O_WRONLY | O_CREAT | O_EXCL, 0666);
+      if (fd == -1)
+	free (result);
+      else
+	break;
+    }
+  if (fd != -1)
+    {
+      close (fd);
+      return result;
+    }
+  else
+    return NULL;
+#endif
+}
@


1.1.1.1
log
@info viewer with keystrokes like lynx
@
text
@@
