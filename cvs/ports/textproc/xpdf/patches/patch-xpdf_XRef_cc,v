head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.14
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.12
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.10
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_6:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2014.06.08.18.56.33;	author kili;	state Exp;
branches;
next	1.6;
commitid	CUa2uqR5lFKyLFM8;

1.6
date	2011.10.01.19.46.35;	author kili;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.27.14.55.40;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.25.19.19.05;	author deanna;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.09.17.34.53;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2005.01.19.16.23.16;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.23.02.24.37;	author brad;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2004.12.27.12.19.00;	author robert;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.20.21.17.02;	author robert;	state Exp;
branches;
next	;

1.1.4.1
date	2004.12.27.12.21.44;	author robert;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.01.20.21.18.45;	author robert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xpdf-3.04.
@
text
@$OpenBSD: patch-xpdf_XRef_cc,v 1.6 2011/10/01 19:46:35 kili Exp $
--- xpdf/XRef.cc.orig	Wed May 28 20:50:50 2014
+++ xpdf/XRef.cc	Fri May 30 14:26:13 2014
@@@@ -958,19 +958,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
 }
 
 GBool XRef::okToPrint(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permPrint);
+  return (1);
 }
 
 GBool XRef::okToChange(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permChange);
+  return (1);
 }
 
 GBool XRef::okToCopy(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permCopy);
+  return (1);
 }
 
 GBool XRef::okToAddNotes(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permNotes);
+  return (1);
 }
 
 Object *XRef::fetch(int num, int gen, Object *obj, int recursion) {
@


1.6
log
@Update to xpdf-3.03.
@
text
@d1 4
a4 4
$OpenBSD: patch-xpdf_XRef_cc,v 1.5 2010/05/27 14:55:40 jasper Exp $
--- xpdf/XRef.cc.orig	Mon Aug 15 23:08:53 2011
+++ xpdf/XRef.cc	Thu Aug 18 21:10:22 2011
@@@@ -806,19 +806,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
@


1.5
log
@- give the urlCommand a slightly bigger chance of working
- regen patches
@
text
@d1 4
a4 4
$OpenBSD: patch-xpdf_XRef_cc,v 1.4 2008/04/25 19:19:05 deanna Exp $
--- xpdf/XRef.cc.orig	Thu May 27 12:16:32 2010
+++ xpdf/XRef.cc	Thu May 27 12:16:32 2010
@@@@ -782,19 +782,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
d27 1
a27 1
 Object *XRef::fetch(int num, int gen, Object *obj) {
@


1.4
log
@Simplify anti-DRM patches.  Catches a new DRM check that slipped in
from upstream.

Diff from brad@@, inspired by Floor on ports@@

ok brad@@, bernd@@, pvalchev@@, and a special "Kill the DRM!  DIE DIE
DIE!!!!!!!!" from todd@@
@
text
@d1 4
a4 4
$OpenBSD$
--- xpdf/XRef.cc.orig	Thu Apr 24 19:13:00 2008
+++ xpdf/XRef.cc	Thu Apr 24 19:50:06 2008
@@@@ -771,19 +771,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
@


1.3
log
@upgrade to xpdf 3.01

Most of the update is from Bernd Ahlers <bernd at ba-net dot org>
@
text
@d1 25
a25 11
$OpenBSD: patch-xpdf_XRef_cc,v 1.2 2005/01/19 16:23:16 naddy Exp $
--- xpdf/XRef.cc.orig	Thu Jan 22 02:26:45 2004
+++ xpdf/XRef.cc	Wed Jan 19 14:23:39 2005
@@@@ -96,7 +96,7 @@@@ ObjectStream::ObjectStream(XRef *xref, i
   }
   nObjects = obj1.getInt();
   obj1.free();
-  if (nObjects == 0) {
+  if (nObjects <= 0) {
     goto err1;
   }
d27 1
a27 264
@@@@ -106,7 +106,14 @@@@ ObjectStream::ObjectStream(XRef *xref, i
   }
   first = obj1.getInt();
   obj1.free();
+  if (first < 0) {
+    goto err1;
+  }
 
+  if (nObjects*sizeof(int)/sizeof(int) != nObjects) {
+    error(-1, "Invalid 'nObjects'");
+    goto err1;
+  }
   objs = new Object[nObjects];
   objNums = (int *)gmalloc(nObjects * sizeof(int));
   offsets = (int *)gmalloc(nObjects * sizeof(int));
@@@@ -130,6 +137,12 @@@@ ObjectStream::ObjectStream(XRef *xref, i
     offsets[i] = obj2.getInt();
     obj1.free();
     obj2.free();
+    if (objNums[i] < 0 || offsets[i] < 0 ||
+	(i > 0 && offsets[i] < offsets[i-1])) {
+      delete parser;
+      gfree(offsets);
+      goto err1;
+    }
   }
   while (str->getChar() != EOF) ;
   delete parser;
@@@@ -369,10 +382,20 @@@@ GBool XRef::readXRefTable(Parser *parser
     }
     n = obj.getInt();
     obj.free();
+    if (first < 0 || n < 0 || first + n < 0) {
+      goto err1;
+    }
     if (first + n > size) {
       for (newSize = size ? 2 * size : 1024;
-	   first + n > newSize;
+	   first + n > newSize && newSize > 0;
 	   newSize <<= 1) ;
+      if (newSize*sizeof(XRefEntry)/sizeof(XRefEntry) != newSize) {
+	error(-1, "Invalid 'obj' parameters'");
+	return gFalse;
+      }
+      if (newSize < 0) {
+	goto err1;
+      }
       entries = (XRefEntry *)grealloc(entries, newSize * sizeof(XRefEntry));
       for (i = size; i < newSize; ++i) {
 	entries[i].offset = 0xffffffff;
@@@@ -443,7 +466,7 @@@@ GBool XRef::readXRefTable(Parser *parser
 
   // check for an 'XRefStm' key
   if (obj.getDict()->lookup("XRefStm", &obj2)->isInt()) {
-    pos2 = obj2.getInt();
+    pos2 = (Guint)obj2.getInt();
     readXRef(&pos2);
     if (!ok) {
       goto err1;
@@@@ -474,7 +497,14 @@@@ GBool XRef::readXRefStream(Stream *xrefS
   }
   newSize = obj.getInt();
   obj.free();
+  if (newSize < 0) {
+    goto err1;
+  }
   if (newSize > size) {
+    if (newSize * sizeof(XRefEntry)/sizeof(XRefEntry) != newSize) {
+      error(-1, "Invalid 'size' parameter.");
+      return gFalse;
+    }
     entries = (XRefEntry *)grealloc(entries, newSize * sizeof(XRefEntry));
     for (i = size; i < newSize; ++i) {
       entries[i].offset = 0xffffffff;
@@@@ -494,6 +524,9 @@@@ GBool XRef::readXRefStream(Stream *xrefS
     }
     w[i] = obj2.getInt();
     obj2.free();
+    if (w[i] < 0 || w[i] > 4) {
+      goto err1;
+    }
   }
   obj.free();
 
@@@@ -513,13 +546,14 @@@@ GBool XRef::readXRefStream(Stream *xrefS
       }
       n = obj.getInt();
       obj.free();
-      if (!readXRefStreamSection(xrefStr, w, first, n)) {
+      if (first < 0 || n < 0 ||
+	  !readXRefStreamSection(xrefStr, w, first, n)) {
 	idx.free();
 	goto err0;
       }
     }
   } else {
-    if (!readXRefStreamSection(xrefStr, w, 0, size)) {
+    if (!readXRefStreamSection(xrefStr, w, 0, newSize)) {
       idx.free();
       goto err0;
     }
@@@@ -551,10 +585,20 @@@@ GBool XRef::readXRefStreamSection(Stream
   Guint offset;
   int type, gen, c, newSize, i, j;
 
+  if (first + n < 0) {
+    return gFalse;
+  }
   if (first + n > size) {
     for (newSize = size ? 2 * size : 1024;
-	 first + n > newSize;
+	 first + n > newSize && newSize > 0;
 	 newSize <<= 1) ;
+    if (newSize*sizeof(XRefEntry)/sizeof(XRefEntry) != newSize) {
+      error(-1, "Invalid 'size' inside xref table.");
+      return gFalse;
+    }	
+    if (newSize < 0) {
+      return gFalse;
+    }
     entries = (XRefEntry *)grealloc(entries, newSize * sizeof(XRefEntry));
     for (i = size; i < newSize; ++i) {
       entries[i].offset = 0xffffffff;
@@@@ -585,24 +629,26 @@@@ GBool XRef::readXRefStreamSection(Stream
       }
       gen = (gen << 8) + c;
     }
-    switch (type) {
-    case 0:
-      entries[i].offset = offset;
-      entries[i].gen = gen;
-      entries[i].type = xrefEntryFree;
-      break;
-    case 1:
-      entries[i].offset = offset;
-      entries[i].gen = gen;
-      entries[i].type = xrefEntryUncompressed;
-      break;
-    case 2:
-      entries[i].offset = offset;
-      entries[i].gen = gen;
-      entries[i].type = xrefEntryCompressed;
-      break;
-    default:
-      return gFalse;
+    if (entries[i].offset == 0xffffffff) {
+      switch (type) {
+      case 0:
+	entries[i].offset = offset;
+	entries[i].gen = gen;
+	entries[i].type = xrefEntryFree;
+	break;
+      case 1:
+	entries[i].offset = offset;
+	entries[i].gen = gen;
+	entries[i].type = xrefEntryUncompressed;
+	break;
+      case 2:
+	entries[i].offset = offset;
+	entries[i].gen = gen;
+	entries[i].type = xrefEntryCompressed;
+	break;
+      default:
+	return gFalse;
+      }
     }
   }
 
@@@@ -664,39 +710,49 @@@@ GBool XRef::constructXRef() {
     // look for object
     } else if (isdigit(*p)) {
       num = atoi(p);
-      do {
-	++p;
-      } while (*p && isdigit(*p));
-      if (isspace(*p)) {
+      if (num > 0) {
 	do {
 	  ++p;
-	} while (*p && isspace(*p));
-	if (isdigit(*p)) {
-	  gen = atoi(p);
+	} while (*p && isdigit(*p));
+	if (isspace(*p)) {
 	  do {
 	    ++p;
-	  } while (*p && isdigit(*p));
-	  if (isspace(*p)) {
+	  } while (*p && isspace(*p));
+	  if (isdigit(*p)) {
+	    gen = atoi(p);
 	    do {
 	      ++p;
-	    } while (*p && isspace(*p));
-	    if (!strncmp(p, "obj", 3)) {
-	      if (num >= size) {
-		newSize = (num + 1 + 255) & ~255;
-		entries = (XRefEntry *)
-		            grealloc(entries, newSize * sizeof(XRefEntry));
-		for (i = size; i < newSize; ++i) {
-		  entries[i].offset = 0xffffffff;
-		  entries[i].type = xrefEntryFree;
+	    } while (*p && isdigit(*p));
+	    if (isspace(*p)) {
+	      do {
+		++p;
+	      } while (*p && isspace(*p));
+	      if (!strncmp(p, "obj", 3)) {
+		if (num >= size) {
+		  newSize = (num + 1 + 255) & ~255;
+		  if (newSize*sizeof(XRefEntry)/sizeof(XRefEntry) != newSize) {
+		    error(-1, "Invalid 'obj' parameters.");
+		    return gFalse;
+		  }
+		  if (newSize < 0) {
+		    error(-1, "Bad object number");
+		    return gFalse;
+		  }
+		  entries = (XRefEntry *)
+		      grealloc(entries, newSize * sizeof(XRefEntry));
+		  for (i = size; i < newSize; ++i) {
+		    entries[i].offset = 0xffffffff;
+		    entries[i].type = xrefEntryFree;
+		  }
+		  size = newSize;
 		}
-		size = newSize;
+		if (entries[num].type == xrefEntryFree ||
+		    gen >= entries[num].gen) {
+		  entries[num].offset = pos - start;
+		  entries[num].gen = gen;
+		  entries[num].type = xrefEntryUncompressed;
+		}
 	      }
-	      if (entries[num].type == xrefEntryFree ||
-		  gen >= entries[num].gen) {
-		entries[num].offset = pos - start;
-		entries[num].gen = gen;
-		entries[num].type = xrefEntryUncompressed;
-	      }
 	    }
 	  }
 	}
@@@@ -705,6 +761,10 @@@@ GBool XRef::constructXRef() {
     } else if (!strncmp(p, "endstream", 9)) {
       if (streamEndsLen == streamEndsSize) {
 	streamEndsSize += 64;
+        if (streamEndsSize*sizeof(int)/sizeof(int) != streamEndsSize) {
+          error(-1, "Invalid 'endstream' parameter.");
+          return gFalse;
+        }
 	streamEnds = (Guint *)grealloc(streamEnds,
 				       streamEndsSize * sizeof(int));
       }
@@@@ -756,6 +816,9 @@@@ GBool XRef::checkEncrypted(GString *owne
 	  keyLength = lengthObj.getInt() / 8;
 	} else {
 	  keyLength = 5;
+	}
+	if (keyLength > 16) {
+	  keyLength = 16;
 	}
 	permFlags = permissions.getInt();
 	if (encVersion >= 1 && encVersion <= 2 &&
@


1.2
log
@SECURITY:
Fix a buffer overflow due to insufficient bounds checking while
processing a PDF file that provides malicious values in the /Encrypt
/Length tag.

http://www.idefense.com/application/poi/display?id=186&type=vulnerabilities&flashstatus=false

ok robert@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xpdf_XRef_cc,v 1.1 2004/10/23 02:24:37 brad Exp $
@


1.1
log
@Chris Evans discovered numerous vulnerabilities in the xpdf package:

Multiple integer overflow issues affecting xpdf.
These can result in writing an arbitrary byte to an attacker controlled
location which probably could lead to arbitrary code execution.
CAN-2004-0888

Multiple integer overflow issues.
These can result in DoS or possibly arbitrary code execution.
CAN-2004-0889

Chris also discovered issues with infinite loop logic error.
@
text
@d1 3
a3 3
$OpenBSD$
--- xpdf/XRef.cc.orig	Wed Jan 21 20:26:45 2004
+++ xpdf/XRef.cc	Fri Oct 22 21:54:48 2004
d267 10
@


1.1.4.1
log
@SECURITY:
fixed integer overflows:
http://www.vuxml.org/openbsd/d79a032a-2763-11d9-a0f4-00065bd5b0b6.html

fixed buffer overflow vulnerability:
http://www.vuxml.org/openbsd/9317ac06-5441-11d9-8ad2-00065bd5b0b6.html

ok brad@@
@
text
@@


1.1.4.2
log
@SECURITY:
Fix a buffer overflow due to insufficient bounds checking while
processing a PDF file that provides malicious values in the /Encrypt
/Length tag.; bump PKGNAME
http://www.vuxml.org/openbsd/456f1b12-6a38-11d9-bc5d-00065bd5b0b6.html

ok brad@@
@
text
@d2 3
a4 3
--- xpdf/XRef.cc.orig	Thu Jan 22 02:26:45 2004
+++ xpdf/XRef.cc	Wed Jan 19 23:03:35 2005
@@@@ -96,7 +96,7 @@@@
d13 1
a13 1
@@@@ -106,7 +106,14 @@@@
d28 1
a28 1
@@@@ -130,6 +137,12 @@@@
d41 1
a41 1
@@@@ -369,10 +382,20 @@@@
d63 1
a63 1
@@@@ -443,7 +466,7 @@@@
d72 1
a72 1
@@@@ -474,7 +497,14 @@@@
d87 1
a87 1
@@@@ -494,6 +524,9 @@@@
d97 1
a97 1
@@@@ -513,13 +546,14 @@@@
d114 1
a114 1
@@@@ -551,10 +585,20 @@@@
d136 1
a136 1
@@@@ -585,24 +629,26 @@@@
d181 1
a181 1
@@@@ -664,39 +710,49 @@@@
d256 1
a256 1
@@@@ -705,6 +761,10 @@@@
a266 10
@@@@ -756,6 +816,9 @@@@
 	  keyLength = lengthObj.getInt() / 8;
 	} else {
 	  keyLength = 5;
+	}
+	if (keyLength > 16) {
+	  keyLength = 16;
 	}
 	permFlags = permissions.getInt();
 	if (encVersion >= 1 && encVersion <= 2 &&
@


1.1.2.1
log
@SECURITY:
fixed integer overflows:
http://www.vuxml.org/openbsd/d79a032a-2763-11d9-a0f4-00065bd5b0b6.html

fixed buffer overflow vulnerability:
http://www.vuxml.org/openbsd/9317ac06-5441-11d9-8ad2-00065bd5b0b6.html

ok brad@@
@
text
@@


1.1.2.2
log
@SECURITY:
Fix a buffer overflow due to insufficient bounds checking while
processing a PDF file that provides malicious values in the /Encrypt
/Length tag.
http://www.vuxml.org/openbsd/456f1b12-6a38-11d9-bc5d-00065bd5b0b6.html

ok brad@@
@
text
@d2 3
a4 3
--- xpdf/XRef.cc.orig	Thu Jan 22 02:26:45 2004
+++ xpdf/XRef.cc	Wed Jan 19 23:00:46 2005
@@@@ -96,7 +96,7 @@@@
d13 1
a13 1
@@@@ -106,7 +106,14 @@@@
d28 1
a28 1
@@@@ -130,6 +137,12 @@@@
d41 1
a41 1
@@@@ -369,10 +382,20 @@@@
d63 1
a63 1
@@@@ -443,7 +466,7 @@@@
d72 1
a72 1
@@@@ -474,7 +497,14 @@@@
d87 1
a87 1
@@@@ -494,6 +524,9 @@@@
d97 1
a97 1
@@@@ -513,13 +546,14 @@@@
d114 1
a114 1
@@@@ -551,10 +585,20 @@@@
d136 1
a136 1
@@@@ -585,24 +629,26 @@@@
d181 1
a181 1
@@@@ -664,39 +710,49 @@@@
d256 1
a256 1
@@@@ -705,6 +761,10 @@@@
a266 10
@@@@ -756,6 +816,9 @@@@
 	  keyLength = lengthObj.getInt() / 8;
 	} else {
 	  keyLength = 5;
+	}
+	if (keyLength > 16) {
+	  keyLength = 16;
 	}
 	permFlags = permissions.getInt();
 	if (encVersion >= 1 && encVersion <= 2 &&
@


