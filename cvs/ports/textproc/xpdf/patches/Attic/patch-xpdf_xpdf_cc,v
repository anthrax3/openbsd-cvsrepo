head	1.1;
access;
symbols
	OPENBSD_3_2:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.06.20.01.26.07;	author brad;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.06.20.01.26.07;	author brad;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.07.18.00.54.02;	author brad;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-xpdf_xpdf_cc was initially added on branch OPENBSD_3_2.
@
text
@@


1.1.2.1
log
@fixes a flaw where an attacker can embed malicious hyperlinks that if
activated can execute arbitrary shell commands.

http://marc.theaimsgroup.com/?l=full-disclosure&m=105555332025253&w=2
@
text
@a0 23
$OpenBSD$
--- xpdf/xpdf.cc.orig	Tue May 21 02:40:09 2002
+++ xpdf/xpdf.cc	Thu Jun 19 21:17:12 2003
@@@@ -1563,7 +1563,7 @@@@ static void doLink(int mx, int my) {
 	}
 	if (s) {
 	  fileName = ((LinkURI *)action)->getURI()->copy();
-	  // filter out any quote marks (' or ") to avoid a potential
+	  // filter out any quote marks (' " `) to avoid a potential
 	  // security hole
 	  i = 0;
 	  while (i < fileName->getLength()) {
@@@@ -1574,6 +1574,10 @@@@ static void doLink(int mx, int my) {
 	    } else if (fileName->getChar(i) == '\'') {
 	      fileName->del(i);
 	      fileName->insert(i, "%27");
+	      i += 3;
+	    } else if (fileName->getChar(i) == '`') {
+	      fileName->del(i);
+	      fileName->insert(i, "%60");
 	      i += 3;
 	    } else {
 	      ++i;
@


1.1.2.2
log
@The previous patch for the hyperlinks issue was not adequate. This update
fixes the patch.
@
text
@d3 2
a4 22
+++ xpdf/xpdf.cc	Thu Jul 17 20:36:13 2003
@@@@ -193,6 +193,10 @@@@ static void doFind(char *s);
 // app kill callback
 static void killCbk(LTKWindow *win1);
 
+// Escape any characters in a URL which might cause problems when
+// calling system().
+static GString * mungeURL(GString *url);
+
 //------------------------------------------------------------------------
 // "About" window text
 //------------------------------------------------------------------------
@@@@ -1461,7 +1465,6 @@@@ static void doLink(int mx, int my) {
   GString *actionName;
   double x, y;
   LTKButtonDialog *dialog;
-  int i;
 
   // look for a link
   out->cvtDevToUser(mx, my, &x, &y);
@@@@ -1562,23 +1565,7 @@@@ static void doLink(int mx, int my) {
 	  }
d7 1
a7 1
-	  fileName = ((LinkURI *)action)->getURI()->copy();
d9 15
a23 51
-	  // security hole
-	  i = 0;
-	  while (i < fileName->getLength()) {
-	    if (fileName->getChar(i) == '"') {
-	      fileName->del(i);
-	      fileName->insert(i, "%22");
-	      i += 3;
-	    } else if (fileName->getChar(i) == '\'') {
-	      fileName->del(i);
-	      fileName->insert(i, "%27");
-	      i += 3;
-	    } else {
-	      ++i;
-	    }
-	  }
+	  fileName = mungeURL(((LinkURI *)action)->getURI());
 	  fileName->insert(0, urlCommand->getCString(),
 			   s - urlCommand->getCString());
 	  fileName->append(s+2);
@@@@ -1632,6 +1619,31 @@@@ static void doLink(int mx, int my) {
       break;
     }
   }
+}
+
+// Escape any characters in a URL which might cause problems when
+// calling system().
+static GString * mungeURL(GString *url) {
+  static char *allowed = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+                         "abcdefghijklmnopqrstuvwxyz"
+                         "0123456789"
+                         "-_.~/?:@@&=+,#%";
+  GString *newURL;
+  char c;
+  char buf[4];
+  int i;
+
+  newURL = new GString();
+  for (i = 0; i < url->getLength(); ++i) {
+    c = url->getChar(i);
+    if (strchr(allowed, c)) {
+      newURL->append(c);
+    } else {
+      sprintf(buf, "%%%02x", c & 0xff);
+      newURL->append(buf);
+    }
+  }
+  return newURL;
 }
 
 static void mouseMoveCbk(LTKWidget *widget, int widgetNum, int mx, int my) {
@


