head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2016.03.09.23.35.32;	author sthen;	state dead;
branches;
next	1.1;
commitid	6qiJiN8OtcG5wWAB;

1.1
date	2016.03.05.11.04.22;	author sthen;	state Exp;
branches;
next	;
commitid	muwESoVyryb8xhIf;


desc
@@


1.2
log
@Add a fix to PDF::API2 for the FlateDecode problem that I was previously
hacking around in the port. Big thanks to upstream maintainer Steve Simms
for tracking it down!
@
text
@$OpenBSD: patch-lib_PDF_API2_Basic_PDF_Dict_pm,v 1.1 2016/03/05 11:04:22 sthen Exp $

XXX Use larger chunks when reading streams. Compressed streams
are getting corrupted if larger than this; I ran into this with
cross-reference streams in large files.

https://rt.cpan.org/Ticket/Display.html?id=112456

--- lib/PDF/API2/Basic/PDF/Dict.pm.orig	Sat Mar  5 10:52:49 2016
+++ lib/PDF/API2/Basic/PDF/Dict.pm	Sat Mar  5 10:53:58 2016
@@@@ -207,7 +207,7 @@@@ sub outobjdeep {
         $fh->print(" stream\n");
         $loc = $fh->tell();
         my $stream;
-        while (read(DICTFH, $stream, 4096)) {
+        while (read(DICTFH, $stream, 32768)) {
             unless ($self->{' nofilt'}) {
                 foreach my $filter (reverse @@filters) {
                     $stream = $filter->outfilt($stream, 0);
@@@@ -285,9 +285,9 @@@@ sub read_stream {
     }
     seek $fh, $self->{' streamloc'}, 0;
     my ($i, $data);
-    for ($i = 0; $i < $len; $i += 4096) {
-        unless ($i + 4096 > $len) {
-            read $fh, $data, 4096;
+    for ($i = 0; $i < $len; $i += 32768) {
+        unless ($i + 32768 > $len) {
+            read $fh, $data, 32768;
         }
         else {
             $last = 1;
@


1.1
log
@Pull up some PDF::API2 fixes to the new XRef stream handling support from
upstream repo. Add a dodgy hack to avoid corruption with larger compressed
streams. With these I can now work with some PDFs directly with PDF::API2
that I previously had to preprocess with mutool clean.
@
text
@d1 1
a1 1
$OpenBSD$
@

