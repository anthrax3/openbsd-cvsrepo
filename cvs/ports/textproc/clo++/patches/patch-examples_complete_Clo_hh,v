head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.50
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.48
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.44
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.46
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.42
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.40
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.38
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.36
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.34
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.32
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.30
	OPENBSD_5_0:1.1.0.28
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.26
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.24
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.22
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.18
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.16
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.14
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.12
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2004.09.26.13.11.37;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@fix clo++ for gcc3.
From Aleksander Piotrowski.
@
text
@$OpenBSD$
--- examples/complete/Clo.hh.orig	Mon Aug 16 19:46:32 2004
+++ examples/complete/Clo.hh	Mon Aug 16 19:52:29 2004
@@@@ -152,6 +152,7 @@@@ bool truth_function(string test) {
 				autohelp = autoversion = false;
 			} // end constructor
 			Exception(string why) {m_why = why; autohelp=autoversion=false;}
+			~Exception() throw() {};
 			const char *what() {return m_why.c_str();}
 			const char *fancy() {if(m_fancy.empty()) return m_why.c_str(); else return m_fancy.c_str();}
 			bool autohelp, autoversion;
@@@@ -547,7 +548,7 @@@@ bool truth_function(string test) {
 		
 	} // End parse()
 	
-	bool Parser::get_flag_option(string option, string command="") {
+	bool Parser::get_flag_option(string option, string command) {
 		if (command == "remove") {
 			if (option == "R") {
 				return m_values.v_R;
@@@@ -566,28 +567,28 @@@@ bool truth_function(string test) {
 			throw Exception("option '" + option + "' is not a bool option\n");
 		}
 	} // End get_flag_option()
-	int Parser::get_count_option(string option, string command="") {
+	int Parser::get_count_option(string option, string command) {
 		if (option == "count") {
 			return m_values.v_count;
 		} else {
 			throw Exception("option '" + option + "' is not a int option\n");
 		}
 	} // End get_count_option()
-	bool Parser::get_bool_option(string option, string command="") {
+	bool Parser::get_bool_option(string option, string command) {
 		if (option == "bool") {
 			return m_values.v_bool;
 		} else {
 			throw Exception("option '" + option + "' is not a bool option\n");
 		}
 	} // End get_bool_option()
-	map<string, bool>& Parser::get_bool_map(string option, string command="") {
+	map<string, bool>& Parser::get_bool_map(string option, string command) {
 		if (option == "bool-map") {
 			return m_values.v_bool_map;
 		} else {
 			throw Exception("option '" + option + "' is not a map<string, bool>& option\n");
 		}
 	} // End get_bool_map()
-	int Parser::get_int_option(string option, string command="") {
+	int Parser::get_int_option(string option, string command) {
 		if (command == "water") {
 			if (option == "speed") {
 				return m_values.v_speed;
@@@@ -602,21 +603,21 @@@@ bool truth_function(string test) {
 			throw Exception("option '" + option + "' is not a int option\n");
 		}
 	} // End get_int_option()
-	vector<int>& Parser::get_int_list(string option, string command="") {
+	vector<int>& Parser::get_int_list(string option, string command) {
 		if (option == "int-list") {
 			return m_values.v_int_list;
 		} else {
 			throw Exception("option '" + option + "' is not a vector<int>& option\n");
 		}
 	} // End get_int_list()
-	double Parser::get_double_option(string option, string command="") {
+	double Parser::get_double_option(string option, string command) {
 		if (option == "double") {
 			return m_values.v_double;
 		} else {
 			throw Exception("option '" + option + "' is not a double option\n");
 		}
 	} // End get_double_option()
-	string Parser::get_string_option(string option, string command="") {
+	string Parser::get_string_option(string option, string command) {
 		if (option == "string") {
 			return m_values.v_string;
 		} else {
@
