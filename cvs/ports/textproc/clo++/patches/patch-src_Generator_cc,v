head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.48
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.44
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.46
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.42
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.40
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.38
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.36
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.34
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.32
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.30
	OPENBSD_5_0:1.1.0.28
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.26
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.24
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.22
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.18
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.16
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.14
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.12
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2004.09.26.13.11.37;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@fix clo++ for gcc3.
From Aleksander Piotrowski.
@
text
@$OpenBSD$
--- src/Generator.cc.orig	Mon Aug 16 13:43:43 2004
+++ src/Generator.cc	Mon Aug 16 14:39:43 2004
@@@@ -86,7 +86,7 @@@@ Generator::Generator() {
 	@@author Peter Jones
 **/
 //#############################################################################
-void Generator::add_option(Option &option, bool really=true) {
+void Generator::add_option(Option &option, bool really) {
 	switch (option.get_type()) {
 		case Option::type_flag:
 			m_types.flag_exists = true;
@@@@ -583,7 +583,7 @@@@ void Generator::generate_subcommand_help
 	@@author Peter Jones
 **/
 //#############################################################################
-void Generator::generate_get_function(Option::Type type, bool prototype=false) {
+void Generator::generate_get_function(Option::Type type, bool prototype) {
 	vector<Command>::iterator	ci;
 	vector<Option>::iterator 	oi;
 	vector<string>				function_names, return_types, extensions;
@@@@ -793,7 +793,7 @@@@ void Generator::generate_get_function(Op
 	@@author Peter Jones
 **/
 //#############################################################################
-void Generator::generate_long_option_test(Command *command=0) {
+void Generator::generate_long_option_test(Command *command) {
 	vector<Option> options;
 	vector<Option>::iterator oi;
 	string selse, command_name;
@@@@ -884,7 +884,7 @@@@ void Generator::generate_long_option_tes
 	@@author Peter Jones
 **/
 //#############################################################################
-void Generator::generate_short_option_test(Command *command=0) {
+void Generator::generate_short_option_test(Command *command) {
 	vector<Option> options;
 	vector<Option>::iterator oi;
 	string selse, command_name;
@@@@ -953,7 +953,7 @@@@ void Generator::generate_short_option_te
 	@@author Peter Jones
 **/
 //#############################################################################
-void Generator::generate_value_test(Command *command=0) {
+void Generator::generate_value_test(Command *command) {
 	vector<Option> options;
 	vector<Option>::iterator oi;
 	string selse, varname;
@@@@ -1151,7 +1151,7 @@@@ void Generator::generate_set_defaults() 
 	@@author Peter Jones
 **/
 //#############################################################################
-void Generator::generate_parse_loop(Command *command=0) {
+void Generator::generate_parse_loop(Command *command) {
 	bool have_long_options, have_short_options;
 	string selse;
 
@@@@ -1241,7 +1241,7 @@@@ void Generator::generate_parse_loop(Comm
 				insert(selse + "if (option_v == " + aliases_s + ") {"); indent();
 				insert("m_command = \"" + ci->get_name() +"\";");
 				insert("option_v.erase();");
-				generate_parse_loop(ci);
+				generate_parse_loop(&(*ci));
 				generate_mandatory_test(ci->get_options());
 				if (selse.empty()) selse = "} else ";
 			}
@
