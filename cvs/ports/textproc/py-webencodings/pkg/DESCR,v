head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.2
	OPENBSD_6_2_BASE:1.1.1.1
	shadchin_20170524:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2017.05.24.14.54.28;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Ea6RnATHwUsPwAJD;

1.1.1.1
date	2017.05.24.14.54.28;	author shadchin;	state Exp;
branches;
next	;
commitid	Ea6RnATHwUsPwAJD;


desc
@@



1.1
log
@Initial revision
@
text
@This is a Python implementation of the WHATWG Encoding standard.

In order to be compatible with legacy web content when interpreting
something like Content-Type: text/html; charset=latin1, tools need
to use a particular set of aliases for encoding labels as well as
some overriding rules. For example, US-ASCII and iso-8859-1 on the
web are actually aliases for windows-1252, and an UTF-8 or UTF-16
BOM takes precedence over any other encoding declaration. The
Encoding standard defines all such details so that implementations
do not have to reverse-engineer each other.

This module has encoding labels and BOM detection, but the actual
implementation for encoders and decoders is Python's.
@


1.1.1.1
log
@Import to py-webencodings 0.5.1, ok sthen@@

DESCR:

This is a Python implementation of the WHATWG Encoding standard.

In order to be compatible with legacy web content when interpreting
something like Content-Type: text/html; charset=latin1, tools need
to use a particular set of aliases for encoding labels as well as
some overriding rules. For example, US-ASCII and iso-8859-1 on the
web are actually aliases for windows-1252, and an UTF-8 or UTF-16
BOM takes precedence over any other encoding declaration. The
Encoding standard defines all such details so that implementations
do not have to reverse-engineer each other.

This module has encoding labels and BOM detection, but the actual
implementation for encoders and decoders is Python's.
@
text
@@
