head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	edd_20120811:1.1.1.1
	edd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.08.11.12.12.00;	author edd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.11.12.12.00;	author edd;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@PrettyTable lets you control many aspects of the table, like the width
of the column padding, the alignment of text within columns, which
characters are used to draw the table border, whether you even want a
border, and much more. You can control which subsets of the columns and
rows are printed, and you can sort the rows by the value of a particular
column.

PrettyTable can also generate HTML code with the data in a <table>
structure. All of the options available for controlling ASCII tables are
also available for HTML tables, except in cases where this would not
make sense.
@


1.1.1.1
log
@Attempt two at importing py-prettytable. Kludged my last commit with an
incorrect import path. Looks like permission was denied for the import, so
it didn't happen (?).

The import was OK gsoares@@

@
text
@@
