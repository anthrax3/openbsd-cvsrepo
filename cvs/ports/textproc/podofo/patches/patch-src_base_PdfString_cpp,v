head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	sthen_20140406:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.10.18.13.09.38;	author sthen;	state Exp;
branches;
next	1.1;
commitid	zKMbRcj281UglSGt;

1.1
date	2014.04.06.11.31.21;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.04.06.11.31.21;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to PoDoFo 0.9.3
@
text
@$OpenBSD: patch-src_base_PdfString_cpp,v 1.1.1.1 2014/04/06 11:31:21 sthen Exp $

For some reason, alloca() doesn't seem to be working from C++ on OpenBSD,
returning a linker error, so convert to malloc() instead.

--- src/base/PdfString.cpp.orig	Sun Jun 15 13:53:43 2014
+++ src/base/PdfString.cpp	Sun Oct 18 13:51:24 2015
@@@@ -554,7 +554,11 @@@@ void PdfString::InitFromUtf8( const pdf_utf8* pszStrin
 
     pdf_long        lBufLen = (lLen << 1) + sizeof(wchar_t);
     // twice as large buffer should always be enough
-    pdf_utf16be *pBuffer = static_cast<pdf_utf16be *>(alloca(lBufLen)); 
+    pdf_utf16be *pBuffer = static_cast<pdf_utf16be *>(malloc(lBufLen)); 
+    if( !pBuffer )
+    {
+        PODOFO_RAISE_ERROR( ePdfError_OutOfMemory );
+    }
 
     lBufLen = PdfString::ConvertUTF8toUTF16( pszStringUtf8, lLen, pBuffer, lBufLen );
 
@@@@ -563,6 +567,7 @@@@ void PdfString::InitFromUtf8( const pdf_utf8* pszStrin
     memcpy( m_buffer.GetBuffer(), reinterpret_cast<const char*>(pBuffer), lBufLen );
     m_buffer.GetBuffer()[lBufLen] = '\0';
     m_buffer.GetBuffer()[lBufLen+1] = '\0';
+    free(pBuffer);
 }
 
 void PdfString::InitUtf8()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 3
a8 3
--- src/base/PdfString.cpp.orig	Mon Mar 31 22:47:08 2014
+++ src/base/PdfString.cpp	Mon Mar 31 22:50:17 2014
@@@@ -530,7 +530,11 @@@@ void PdfString::InitFromUtf8( const pdf_utf8* pszStrin
d21 1
a21 1
@@@@ -539,6 +543,7 @@@@ void PdfString::InitFromUtf8( const pdf_utf8* pszStrin
@


1.1.1.1
log
@import textproc/podofo, ok benoit@@

PoDoFo is a free portable C++ library which includes classes to parse a PDF
file and modify its contents into memory. The changes can be written back to
disk easily. PoDoFo is designed to avoid loading large PDF objects into
memory until they are required and can write large streams immediately to
disk, so it is possible to manipulate quite large files with it.

Besides PDF parsing and writing PoDoFo includes also very simple classes
to create your own PDF files.

PoDoFo is primarily useful for applications that wish to do lower level
manipulation of PDF, such as extracting content or merging files. It's also
useful if your application has specific requirements for its PDF output that
more general output-oriented libraries like Cairo cannot satisfy.

Simple tools tuild around the PoDoFo library are also included. They are
primarily examples on how to use the PoDoFo library in your own projects,
but also offer some features for working with PDF files.
@
text
@@
