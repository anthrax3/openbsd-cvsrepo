head	1.3;
access;
symbols
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.12.13.13.15.18;	author sthen;	state Exp;
branches;
next	1.2;
commitid	cOSzPbviKwimNHZ3;

1.2
date	2016.10.16.13.51.21;	author sthen;	state dead;
branches;
next	1.1;
commitid	PfmY67MChrkF8Tl5;

1.1
date	2015.04.25.23.05.41;	author sthen;	state Exp;
branches;
next	;
commitid	0NAeZu2Dnp1Fjged;


desc
@@


1.3
log
@chase mupdf 1.10 api changes; breakage reported by naddy
@
text
@$OpenBSD$

From 518fd77c351fa1bac37679e195dc14fa76c8e895 Mon Sep 17 00:00:00 2001
From: Moritz Lipp <mlq@@pwmt.org>
Date: Thu, 24 Nov 2016 00:51:45 +0100
Subject: [PATCH] Make compatible to mupdf 1.10

--- index.c.orig	Sun Feb 14 22:49:46 2016
+++ index.c	Tue Dec 13 13:11:00 2016
@@@@ -6,7 +6,8 @@@@
 
 #include "plugin.h"
 
-static void build_index(fz_outline* outline, girara_tree_node_t* root);
+static void build_index(fz_context* ctx, fz_document* document, fz_outline*
+    outline, girara_tree_node_t* root);
 
 girara_tree_node_t*
 pdf_document_index_generate(zathura_document_t* document, mupdf_document_t* mupdf_document, zathura_error_t* error)
@@@@ -29,7 +30,7 @@@@ pdf_document_index_generate(zathura_document_t* docume
 
   /* generate index */
   girara_tree_node_t* root = girara_node_new(zathura_index_element_new("ROOT"));
-  build_index(outline, root);
+  build_index(mupdf_document->ctx, mupdf_document->document, outline, root);
 
   /* free outline */
   fz_drop_outline(mupdf_document->ctx, outline);
@@@@ -38,7 +39,7 @@@@ pdf_document_index_generate(zathura_document_t* docume
 }
 
 static void
-build_index(fz_outline* outline, girara_tree_node_t* root)
+build_index(fz_context* ctx, fz_document* document, fz_outline* outline, girara_tree_node_t* root)
 {
   if (outline == NULL || root == NULL) {
     return;
@@@@ -50,49 +51,24 @@@@ build_index(fz_outline* outline, girara_tree_node_t* r
     zathura_link_type_t type               = ZATHURA_LINK_INVALID;
     zathura_rectangle_t rect               = { .x1 = 0, .y1 = 0, .x2 = 0, .y2 = 0 };
 
-    switch (outline->dest.kind) {
-      case FZ_LINK_NONE:
-        type = ZATHURA_LINK_NONE;
-        break;
-      case FZ_LINK_URI:
+    if (fz_is_external_link(ctx, outline->uri) == 1) {
+      if (strstr(outline->uri, "file://") == outline->uri) {
+        type         = ZATHURA_LINK_GOTO_REMOTE;
+        target.value = outline->uri;
+      } else {
         type         = ZATHURA_LINK_URI;
-        target.value = outline->dest.ld.uri.uri;
-        break;
-      case FZ_LINK_GOTO:
-        type                    = ZATHURA_LINK_GOTO_DEST;
-        target.page_number      = outline->dest.ld.gotor.page;
-        target.destination_type = ZATHURA_LINK_DESTINATION_XYZ;
-        target.left             = 0;
-        target.top              = 0;
-        target.scale            = 0.0;
-        {
-          int gflags = outline->dest.ld.gotor.flags;
-          if (gflags & fz_link_flag_l_valid) {
-            target.left = outline->dest.ld.gotor.lt.x;
-          }
-          if (gflags & fz_link_flag_t_valid) {
-            target.top = outline->dest.ld.gotor.lt.y;
-          }
-          /* if (gflags & fz_link_flag_r_is_zoom) { */
-          /*   target.scale = outline->dest.ld.gotor.rb.x; */
-          /* } */
-        }
-        break;
-      case FZ_LINK_LAUNCH:
-        type = ZATHURA_LINK_LAUNCH;
-        target.value = outline->dest.ld.launch.file_spec;
-        break;
-      case FZ_LINK_NAMED:
-        type = ZATHURA_LINK_NAMED;
-        target.value = outline->dest.ld.named.named;
-        break;
-      case FZ_LINK_GOTOR:
-        type = ZATHURA_LINK_GOTO_REMOTE;
-        target.value = outline->dest.ld.gotor.file_spec;
-        break;
-      default:
-        outline = outline->next; // TODO: Don't skip unknown type
-        continue;
+        target.value = outline->uri;
+      }
+    } else {
+      float x = 0;
+      float y = 0;
+
+      type                    = ZATHURA_LINK_GOTO_DEST;
+      target.destination_type = ZATHURA_LINK_DESTINATION_XYZ;
+      target.page_number      = fz_resolve_link(ctx, document, outline->uri, &x, &y);
+      target.left  = x;
+      target.top   = y;
+      target.scale = 0.0;
     }
 
     index_element->link = zathura_link_new(type, rect, target);
@@@@ -104,7 +80,7 @@@@ build_index(fz_outline* outline, girara_tree_node_t* r
     girara_tree_node_t* node = girara_node_append_data(root, index_element);
 
     if (outline->down != NULL) {
-      build_index(outline->down, node);
+      build_index(ctx, document, outline->down, node);
     }
 
     outline = outline->next;
@


1.2
log
@use ports compiler for c11, remove devel/gettext MODULES, remove unnecessary PERMIT_*
@
text
@d1 1
a1 1
$OpenBSD: patch-index_c,v 1.1 2015/04/25 23:05:41 sthen Exp $
d3 1
a3 1
From 23b5d6f2822bb27ec97de0701aefeed2a539f06a Mon Sep 17 00:00:00 2001
d5 2
a6 2
Date: Sat, 7 Feb 2015 15:56:59 +0100
Subject: [PATCH] Handle additional and missing link types in outline
d8 18
a25 18
From f96dd48825c049bbccb2e25a814c49d03fedf86c Mon Sep 17 00:00:00 2001
From: Moritz Lipp <mlq@@pwmt.org>
Date: Sun, 19 Apr 2015 10:39:02 +0200
Subject: [PATCH] Update for 1.7 API changes

--- index.c.orig	Sat Apr 25 23:50:55 2015
+++ index.c	Sat Apr 25 23:50:29 2015
@@@@ -19,7 +19,7 @@@@ pdf_document_index_generate(zathura_document_t* docume
   }
 
   /* get outline */
-  fz_outline* outline = fz_load_outline(mupdf_document->document);
+  fz_outline* outline = fz_load_outline(mupdf_document->ctx, mupdf_document->document);
   if (outline == NULL) {
     if (error != NULL) {
       *error = ZATHURA_ERROR_UNKNOWN;
@@@@ -32,7 +32,7 @@@@ pdf_document_index_generate(zathura_document_t* docume
   build_index(outline, root);
d28 13
a40 2
-  fz_free_outline(mupdf_document->ctx, outline);
+  fz_drop_outline(mupdf_document->ctx, outline);
d42 27
a68 8
   return root;
 }
@@@@ -73,17 +73,31 @@@@ build_index(fz_outline* outline, girara_tree_node_t* r
           if (gflags & fz_link_flag_t_valid) {
             target.top = outline->dest.ld.gotor.lt.y;
           }
-          if (gflags & fz_link_flag_r_is_zoom) {
-            target.scale = outline->dest.ld.gotor.rb.x;
d70 32
a101 20
+          /* if (gflags & fz_link_flag_r_is_zoom) { */
+          /*   target.scale = outline->dest.ld.gotor.rb.x; */
+          /* } */
         }
         break;
+      case FZ_LINK_LAUNCH:
+        type = ZATHURA_LINK_LAUNCH;
+        target.value = outline->dest.ld.launch.file_spec;
+        break;
+      case FZ_LINK_NAMED:
+        type = ZATHURA_LINK_NAMED;
+        target.value = outline->dest.ld.named.named;
+        break;
+      case FZ_LINK_GOTOR:
+        type = ZATHURA_LINK_GOTO_REMOTE;
+        target.value = outline->dest.ld.gotor.file_spec;
+        break;
       default:
+        outline = outline->next; // TODO: Don't skip unknown type
         continue;
d105 6
a110 3
     if (index_element->link == NULL) {
+      outline = outline->next;
       continue;
d113 1
@


1.1
log
@add patches from zathura-pdf-mupdf upstream, mostly to cope with new MuPDF
@
text
@d1 1
a1 1
$OpenBSD$
@

