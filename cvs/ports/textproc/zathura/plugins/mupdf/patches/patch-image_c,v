head	1.3;
access;
symbols
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.12.13.13.15.18;	author sthen;	state Exp;
branches;
next	1.2;
commitid	cOSzPbviKwimNHZ3;

1.2
date	2016.10.16.13.51.21;	author sthen;	state Exp;
branches;
next	1.1;
commitid	PfmY67MChrkF8Tl5;

1.1
date	2015.04.25.23.05.41;	author sthen;	state Exp;
branches;
next	;
commitid	0NAeZu2Dnp1Fjged;


desc
@@


1.3
log
@chase mupdf 1.10 api changes; breakage reported by naddy
@
text
@$OpenBSD: patch-image_c,v 1.2 2016/10/16 13:51:21 sthen Exp $

From e3e49d206fbe5761c53a85b9499c940a0d718c8a Mon Sep 17 00:00:00 2001
From: Christian Hesse <mail@@eworm.de>
Date: Thu, 28 Apr 2016 09:59:31 +0200
Subject: [PATCH] mupdf 1.9 compatibility

From 518fd77c351fa1bac37679e195dc14fa76c8e895 Mon Sep 17 00:00:00 2001
From: Moritz Lipp <mlq@@pwmt.org>
Date: Thu, 24 Nov 2016 00:51:45 +0100
Subject: [PATCH] Make compatible to mupdf 1.10

--- image.c.orig	Tue Dec 13 13:11:06 2016
+++ image.c	Tue Dec 13 13:11:00 2016
@@@@ -93,7 +93,7 @@@@ pdf_page_image_get_cairo(zathura_page_t* page, mupdf_p
   fz_pixmap* pixmap = NULL;
   cairo_surface_t* surface = NULL;
 
-  pixmap = fz_new_pixmap_from_image(mupdf_page->ctx, mupdf_image, 0, 0);
+  pixmap = fz_get_pixmap_from_image(mupdf_page->ctx, mupdf_image, NULL, NULL, 0, 0);
   if (pixmap == NULL) {
     goto error_free;
   }
@


1.2
log
@use ports compiler for c11, remove devel/gettext MODULES, remove unnecessary PERMIT_*
@
text
@d1 1
a1 1
$OpenBSD$
d8 7
a14 2
--- image.c.orig	Sun Feb 14 22:49:46 2016
+++ image.c	Sun Oct 16 13:48:04 2016
d20 1
a20 1
+  pixmap = fz_get_pixmap_from_image(mupdf_page->ctx, mupdf_image, 0, 0);
@


1.1
log
@add patches from zathura-pdf-mupdf upstream, mostly to cope with new MuPDF
@
text
@d3 4
a6 4
From f96dd48825c049bbccb2e25a814c49d03fedf86c Mon Sep 17 00:00:00 2001
From: Moritz Lipp <mlq@@pwmt.org>
Date: Sun, 19 Apr 2015 10:39:02 +0200
Subject: [PATCH] Update for 1.7 API changes
d8 9
a16 26
--- image.c.orig	Thu Oct 16 23:21:41 2014
+++ image.c	Sat Apr 25 23:47:26 2015
@@@@ -9,8 +9,8 @@@@
 #include "plugin.h"
 
 static void pdf_zathura_image_free(zathura_image_t* image);
-static void get_images(pdf_obj* dict, girara_list_t* list);
-static void get_resources(pdf_obj* resource, girara_list_t* list);
+static void get_images(zathura_page_t* page, pdf_obj* dict, girara_list_t* list);
+static void get_resources(zathura_page_t* page, pdf_obj* resource, girara_list_t* list);
 
 girara_list_t*
 pdf_page_images_get(zathura_page_t* page, mupdf_page_t* mupdf_page, zathura_error_t* error)
@@@@ -30,12 +30,12 @@@@ pdf_page_images_get(zathura_page_t* page, mupdf_page_t
 
   mupdf_document_t* mupdf_document = zathura_document_get_data(document);
 
-  pdf_obj* page_object = pdf_load_object((pdf_document*) mupdf_document->document, zathura_page_get_index(page), 0);
+  pdf_obj* page_object = pdf_load_object(mupdf_document->ctx, (pdf_document*) mupdf_document->document, zathura_page_get_index(page), 0);
   if (page_object == NULL) {
     goto error_free;
   }
 
-  pdf_obj* resource = pdf_dict_gets(page_object, "Resources");
+  pdf_obj* resource = pdf_dict_gets(mupdf_document->ctx, page_object, "Resources");
   if (resource == NULL) {
a18 115
@@@@ -50,7 +50,7 @@@@ pdf_page_images_get(zathura_page_t* page, mupdf_page_t
 
   girara_list_set_free_function(list, (girara_free_function_t) pdf_zathura_image_free);
 
-  get_resources(resource, list);
+  get_resources(page, resource, list);
 
   return list;
 
@@@@ -81,20 +81,32 @@@@ pdf_zathura_image_free(zathura_image_t* image)
 }
 
 static void
-get_images(pdf_obj* dict, girara_list_t* list)
+get_images(zathura_page_t* page, pdf_obj* dict, girara_list_t* list)
 {
   if (dict == NULL || list == NULL) {
     return;
   }
 
-  for (int i = 0; i < pdf_dict_len(dict); i++) {
-    pdf_obj* image_dict = pdf_dict_get_val(dict, i);
-    if (pdf_is_dict(image_dict) == 0) {
+  if (page == NULL) {
+    return;
+  }
+
+  zathura_document_t* document = zathura_page_get_document(page);
+
+  if (document == NULL) {
+    return;
+  }
+
+  mupdf_document_t* mupdf_document = zathura_document_get_data(document);
+
+  for (int i = 0; i < pdf_dict_len(mupdf_document->ctx, dict); i++) {
+    pdf_obj* image_dict = pdf_dict_get_val(mupdf_document->ctx, dict, i);
+    if (pdf_is_dict(mupdf_document->ctx, image_dict) == 0) {
       continue;
     }
 
-    pdf_obj* type = pdf_dict_gets(image_dict, "Subtype");
-    if (strcmp(pdf_to_name(type), "Image") != 0) {
+    pdf_obj* type = pdf_dict_gets(mupdf_document->ctx, image_dict, "Subtype");
+    if (strcmp(pdf_to_name(mupdf_document->ctx, type), "Image") != 0) {
       continue;
     }
 
@@@@ -110,8 +122,8 @@@@ get_images(pdf_obj* dict, girara_list_t* list)
       continue;
     }
 
-    pdf_obj* width  = pdf_dict_gets(image_dict, "Width");
-    pdf_obj* height = pdf_dict_gets(image_dict, "Height");
+    pdf_obj* width  = pdf_dict_gets(mupdf_document->ctx, image_dict, "Width");
+    pdf_obj* height = pdf_dict_gets(mupdf_document->ctx, image_dict, "Height");
 
     zathura_image_t* zathura_image = g_malloc(sizeof(zathura_image_t));
 
@@@@ -120,33 +132,45 @@@@ get_images(pdf_obj* dict, girara_list_t* list)
     // FIXME: Get correct image coordinates
     zathura_image->data        = image_dict;
     zathura_image->position.x1 = 0;
-    zathura_image->position.x2 = pdf_to_int(width);
+    zathura_image->position.x2 = pdf_to_int(mupdf_document->ctx, width);
     zathura_image->position.y1 = 0;
-    zathura_image->position.y2 = pdf_to_int(height);
+    zathura_image->position.y2 = pdf_to_int(mupdf_document->ctx, height);
 
     girara_list_append(list, zathura_image);
   }
 }
 
 static void
-get_resources(pdf_obj* resource, girara_list_t* list)
+get_resources(zathura_page_t* page, pdf_obj* resource, girara_list_t* list)
 {
   if (resource == NULL || list == NULL) {
     return;
   }
 
-  pdf_obj* x_object = pdf_dict_gets(resource, "XObject");
+  if (page == NULL) {
+    return;
+  }
+
+  zathura_document_t* document = zathura_page_get_document(page);
+
+  if (document == NULL) {
+    return;
+  }
+
+  mupdf_document_t* mupdf_document = zathura_document_get_data(document);
+
+  pdf_obj* x_object = pdf_dict_gets(mupdf_document->ctx, resource, "XObject");
   if (x_object == NULL) {
     return;
   }
 
-  get_images(x_object, list);
+  get_images(page, x_object, list);
 
-  for (int i = 0; i < pdf_dict_len(x_object); i++) {
-    pdf_obj* obj = pdf_dict_get_val(x_object, i);
-    pdf_obj* subsrc = pdf_dict_gets(obj, "Resources");
-    if (subsrc != NULL && pdf_objcmp(resource, subsrc)) {
-      get_resources(subsrc, list);
+  for (int i = 0; i < pdf_dict_len(mupdf_document->ctx, x_object); i++) {
+    pdf_obj* obj = pdf_dict_get_val(mupdf_document->ctx, x_object, i);
+    pdf_obj* subsrc = pdf_dict_gets(mupdf_document->ctx, obj, "Resources");
+    if (subsrc != NULL && pdf_objcmp(mupdf_document->ctx, resource, subsrc)) {
+      get_resources(page, subsrc, list);
     }
   }
 }
@

