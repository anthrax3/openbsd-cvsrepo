head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.8
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.6
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	shadchin_20160120:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.01.20.05.09.38;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;
commitid	0SE0dpggkyMgpMH6;

1.1.1.1
date	2016.01.20.05.09.38;	author shadchin;	state Exp;
branches;
next	;
commitid	0SE0dpggkyMgpMH6;


desc
@@



1.1
log
@Initial revision
@
text
@@@comment $OpenBSD$
lib/python${MODPY_VERSION}/site-packages/PyStemmer-${MODPY_EGG_VERSION}-py${MODPY_VERSION}.egg-info
lib/python${MODPY_VERSION}/site-packages/Stemmer.so
@


1.1.1.1
log
@Import py-stemmer 1.3.0, ok sthen@@

PyStemmer provides access to efficient algorithms for calculating a
"stemmed" form of a word. This is a form with most of the common
morphological endings removed; hopefully representing a common
linguistic base form. This is most useful in building search engines
and information retrieval software; for example, a search with stemming
enabled should be able to find a document containing "cycling" given the
query "cycles".

PyStemmer provides algorithms for several (mainly european) languages,
by wrapping the libstemmer library from the Snowball project in a Python
module. It also provides access to the classic Porter stemming algorithm
for english: although this has been superceded by an improved algorithm,
the original algorithm may be of interest to information retrieval
researchers wishing to reproduce results of earlier experiments
@
text
@@
