head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.4
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	shadchin_20160120:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.03.19.27.52;	author landry;	state Exp;
branches;
next	1.2;
commitid	iwPqarwpK6U3gsCi;

1.2
date	2016.07.09.08.46.24;	author sthen;	state Exp;
branches;
next	1.1;
commitid	5V5x7yAKWjzdrmlj;

1.1
date	2016.01.20.05.09.38;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;
commitid	0SE0dpggkyMgpMH6;

1.1.1.1
date	2016.01.20.05.09.38;	author shadchin;	state Exp;
branches;
next	;
commitid	0SE0dpggkyMgpMH6;


desc
@@


1.3
log
@bump ports depending on python3 in textproc
@
text
@# $OpenBSD: Makefile,v 1.2 2016/07/09 08:46:24 sthen Exp $

COMMENT =		snowball stemming algorithms, for information retrieval

MODPY_EGG_VERSION =	1.3.0
REVISION =		1
DISTNAME =		PyStemmer-${MODPY_EGG_VERSION}
PKGNAME =		py-stemmer-${MODPY_EGG_VERSION}

CATEGORIES =		textproc

MAINTAINER =		Alexandr Shadchin <shadchin@@openbsd.org>

# MIT/BSD
PERMIT_PACKAGE_CDROM =	Yes

WANTLIB += ${MODPY_WANTLIB} pthread

MODULES =		lang/python

MODPY_PI =		Yes

FLAVORS =		python3
FLAVOR ?=

pre-test:
	@@${MODPY_CMD} build_ext --inplace

do-test:
	cd ${WRKSRC} && ${MODPY_BIN} runtests.py

.include <bsd.port.mk>
@


1.2
log
@sync WANTLIB
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2016/01/20 05:09:38 shadchin Exp $
d6 1
a6 1
REVISION =		0
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d6 1
d16 2
@


1.1.1.1
log
@Import py-stemmer 1.3.0, ok sthen@@

PyStemmer provides access to efficient algorithms for calculating a
"stemmed" form of a word. This is a form with most of the common
morphological endings removed; hopefully representing a common
linguistic base form. This is most useful in building search engines
and information retrieval software; for example, a search with stemming
enabled should be able to find a document containing "cycling" given the
query "cycles".

PyStemmer provides algorithms for several (mainly european) languages,
by wrapping the libstemmer library from the Snowball project in a Python
module. It also provides access to the classic Porter stemming algorithm
for english: although this has been superceded by an improved algorithm,
the original algorithm may be of interest to information retrieval
researchers wishing to reproduce results of earlier experiments
@
text
@@
