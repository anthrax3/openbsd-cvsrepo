head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.42
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.44
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.38
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.36
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.34
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.32
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.30
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.28
	OPENBSD_5_0:1.1.1.1.0.26
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.24
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.22
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.20
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.18
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.16
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	aanriot_20050723:1.1.1.1
	aanriot:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.03.28.14.49.52;	author okan;	state Exp;
branches;
next	1.1;
commitid	Q3QU1UThTYzBEgz9;

1.1
date	2005.07.23.07.53.43;	author aanriot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.07.23.07.53.43;	author aanriot;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 1.79.
@
text
@This module provides an easy way to access/create XML data. It's based
on a HASH tree created from the XML data, and enables dynamic access to
it through the standard Perl syntax for Hash and Array, without
necessarily caring about which you are working with. In other words,
each point in the tree works as a Hash and an Array at the same time!
@


1.1
log
@Initial revision
@
text
@d1 5
a5 14
HASH tree that is made of the XML data, and enables dynamic access to it
with the Perl syntax for Hashes and Arrays, without needing to care if
you have a Hash or an Array in the tree. In other words, each point in
the tree work as a Hash and an Array at the same time!

You also have extra resources, like a search for nodes by attribute,
selection of an attribute value in each multiple node, change the
returned format, etc...

The module also handles automatically binary data (encoding/decoding
to/from base64), CDATA (like contents with <tags>) and Unicode. It can
be used to create XML files, load XML from the Web (just pasting an URL
as a file path) and it has an easy way to send XML data through sockets,
just adding the length of the data in the <?xml?> header.
@


1.1.1.1
log
@import XML-Smart-1.6.9, submitted on ports@@ by
Okan Demirmen <okan@@demirmen.com>.

This module is a smart, easy and powerful way to access/create XML 
files/datas.

help and ok sturm@@
@
text
@@
