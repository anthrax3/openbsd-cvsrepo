head	1.3;
access;
symbols
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.04.25.10.16.15;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	vkmEw5EEro5AaW7u;

1.2
date	2015.04.19.09.02.06;	author ajacoutot;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	5uPzB3hnhuvth5lG;

1.1
date	2015.04.19.09.01.18;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;
commitid	IJ5dAIf62RTKA2sy;

1.1.2.1
date	2015.04.19.09.01.18;	author ajacoutot;	state Exp;
branches;
next	;
commitid	IJ5dAIf62RTKA2sy;

1.2.2.1
date	2015.04.19.09.14.28;	author ajacoutot;	state Exp;
branches;
next	;
commitid	vyrwCevrgBTfNoRR;


desc
@@


1.3
log
@Update to icu4c-55.1.
@
text
@$OpenBSD: patch-source_i18n_regexcmp_h,v 1.2 2015/04/19 09:02:06 ajacoutot Exp $

CVE-2014-7923 CVE-2014-7926 CVE-2014-9654
https://ssl.icu-project.org/trac/changeset/36727
https://ssl.icu-project.org/trac/changeset/36801

--- source/i18n/regexcmp.h.orig	Sun Apr 19 10:23:01 2015
+++ source/i18n/regexcmp.h	Sun Apr 19 10:23:07 2015
@@@@ -104,6 +104,13 @@@@ class U_I18N_API RegexCompile : public UMemory { (priv
     void        fixLiterals(UBool split=FALSE);      // Generate code for pending literal characters.
     void        insertOp(int32_t where);             // Open up a slot for a new op in the
                                                      //   generated code at the specified location.
+    void        appendOp(int32_t op);                // Append a new op to the compiled pattern.
+    void        appendOp(int32_t type, int32_t val); // Build & append a new op to the compiled pattern.
+    int32_t     buildOp(int32_t type, int32_t val);  // Construct a new pcode instruction.
+    int32_t     allocateData(int32_t size);          // Allocate space in the matcher data area.
+                                                     //   Return index of the newly allocated data.
+    int32_t     allocateStackData(int32_t size);     // Allocate space in the match back-track stack frame.
+                                                     //   Return offset index in the frame.
     int32_t     minMatchLength(int32_t start,
                                int32_t end);
     int32_t     maxMatchLength(int32_t start,
@@@@ -187,7 +194,9 @@@@ class U_I18N_API RegexCompile : public UMemory { (priv
     int32_t                       fMatchOpenParen;   // The position in the compiled pattern
                                                      //   of the slot reserved for a state save
                                                      //   at the start of the most recently processed
-                                                     //   parenthesized block.
+                                                     //   parenthesized block. Updated when processing
+                                                     //   a close to the location for the corresponding open.
+
     int32_t                       fMatchCloseParen;  // The position in the pattern of the first
                                                      //   location after the most recently processed
                                                      //   parenthesized block.
@


1.2
log
@SECURITY fixes for:
CVE-2014-6585
CVE-2014-6591
CVE-2014-7923
CVE-2014-7926
CVE-2014-9654
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2.2.1
log
@Fixes for:
CVE-2014-6585
CVE-2014-6591
CVE-2014-7923
CVE-2014-7926
CVE-2014-9654
@
text
@@


1.1
log
@file patch-source_i18n_regexcmp_h was initially added on branch OPENBSD_5_6.
@
text
@d1 33
@


1.1.2.1
log
@Fixes for:
CVE-2014-6585
CVE-2014-6591
CVE-2014-7923
CVE-2014-7926
CVE-2014-9654
@
text
@a0 33
$OpenBSD$

CVE-2014-7923 CVE-2014-7926 CVE-2014-9654
https://ssl.icu-project.org/trac/changeset/36727
https://ssl.icu-project.org/trac/changeset/36801

--- source/i18n/regexcmp.h.orig	Fri Jan 20 01:50:02 2012
+++ source/i18n/regexcmp.h	Sun Apr 19 10:53:14 2015
@@@@ -103,6 +103,13 @@@@ class RegexCompile : public UMemory { (private)
     void        fixLiterals(UBool split=FALSE);      // Generate code for pending literal characters.
     void        insertOp(int32_t where);             // Open up a slot for a new op in the
                                                      //   generated code at the specified location.
+    void        appendOp(int32_t op);                // Append a new op to the compiled pattern.
+    void        appendOp(int32_t type, int32_t val); // Build & append a new op to the compiled pattern.
+    int32_t     buildOp(int32_t type, int32_t val);  // Construct a new pcode instruction.
+    int32_t     allocateData(int32_t size);          // Allocate space in the matcher data area.
+                                                     //   Return index of the newly allocated data.
+    int32_t     allocateStackData(int32_t size);     // Allocate space in the match back-track stack frame.
+                                                     //   Return offset index in the frame.
     int32_t     minMatchLength(int32_t start,
                                int32_t end);
     int32_t     maxMatchLength(int32_t start,
@@@@ -182,7 +189,9 @@@@ class RegexCompile : public UMemory { (private)
     int32_t                       fMatchOpenParen;   // The position in the compiled pattern
                                                      //   of the slot reserved for a state save
                                                      //   at the start of the most recently processed
-                                                     //   parenthesized block.
+                                                     //   parenthesized block. Updated when processing
+                                                     //   a close to the location for the corresponding open.
+
     int32_t                       fMatchCloseParen;  // The position in the pattern of the first
                                                      //   location after the most recently processed
                                                      //   parenthesized block.
@

