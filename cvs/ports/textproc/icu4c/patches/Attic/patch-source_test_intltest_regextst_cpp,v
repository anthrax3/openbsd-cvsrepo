head	1.3;
access;
symbols
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.04.25.10.16.15;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	vkmEw5EEro5AaW7u;

1.2
date	2015.04.19.09.02.06;	author ajacoutot;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	5uPzB3hnhuvth5lG;

1.1
date	2015.04.19.09.01.18;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;
commitid	IJ5dAIf62RTKA2sy;

1.1.2.1
date	2015.04.19.09.01.18;	author ajacoutot;	state Exp;
branches;
next	;
commitid	IJ5dAIf62RTKA2sy;

1.2.2.1
date	2015.04.19.09.14.28;	author ajacoutot;	state Exp;
branches;
next	;
commitid	vyrwCevrgBTfNoRR;


desc
@@


1.3
log
@Update to icu4c-55.1.
@
text
@$OpenBSD: patch-source_test_intltest_regextst_cpp,v 1.2 2015/04/19 09:02:06 ajacoutot Exp $

CVE-2014-7923 CVE-2014-7926 CVE-2014-9654
https://ssl.icu-project.org/trac/changeset/36801

--- source/test/intltest/regextst.cpp.orig	Fri Oct  3 18:09:44 2014
+++ source/test/intltest/regextst.cpp	Sun Apr 19 10:23:07 2015
@@@@ -144,6 +144,9 @@@@ void RegexTest::runIndexedTest( int32_t index, UBool e
         case 24: name = "TestBug11049";
             if (exec) TestBug11049();
             break;
+        case 25: name = "TestBug11371";
+            if (exec) TestBug11371();
+            break;
         default: name = "";
             break; //needed to end loop
     }
@@@@ -5367,6 +5370,49 @@@@ void RegexTest::TestCase11049(const char *pattern, con
 }
 
 
+void RegexTest::TestBug11371() {
+    if (quick) {
+        logln("Skipping test. Runs in exhuastive mode only.");
+        return;
+    }
+    UErrorCode status = U_ZERO_ERROR;
+    UnicodeString patternString;
+
+    for (int i=0; i<8000000; i++) {
+        patternString.append(UnicodeString("()"));
+    }
+    LocalPointer<RegexPattern> compiledPat(RegexPattern::compile(patternString, 0, status));
+    if (status != U_REGEX_PATTERN_TOO_BIG) {
+        errln("File %s, line %d expected status=U_REGEX_PATTERN_TOO_BIG; got %s.",
+              __FILE__, __LINE__, u_errorName(status));
+    }
+
+    status = U_ZERO_ERROR;
+    patternString = "(";
+    for (int i=0; i<20000000; i++) {
+        patternString.append(UnicodeString("A++"));
+    }
+    patternString.append(UnicodeString("){0}B++"));
+    LocalPointer<RegexPattern> compiledPat2(RegexPattern::compile(patternString, 0, status));
+    if (status != U_REGEX_PATTERN_TOO_BIG) {
+        errln("File %s, line %d expected status=U_REGEX_PATTERN_TOO_BIG; got %s.",
+              __FILE__, __LINE__, u_errorName(status));
+    }
+
+    // Pattern with too much string data, such that string indexes overflow operand data field size
+    // in compiled instruction.
+    status = U_ZERO_ERROR;
+    patternString = "";
+    while (patternString.length() < 0x00ffffff) {
+        patternString.append(UnicodeString("stuff and things dont you know, these are a few of my favorite strings\n"));
+    }
+    patternString.append(UnicodeString("X? trailing string"));
+    LocalPointer<RegexPattern> compiledPat3(RegexPattern::compile(patternString, 0, status));
+    if (status != U_REGEX_PATTERN_TOO_BIG) {
+        errln("File %s, line %d expected status=U_REGEX_PATTERN_TOO_BIG; got %s.",
+              __FILE__, __LINE__, u_errorName(status));
+    }
+}
 
 #endif  /* !UCONFIG_NO_REGULAR_EXPRESSIONS  */
 
@


1.2
log
@SECURITY fixes for:
CVE-2014-6585
CVE-2014-6591
CVE-2014-7923
CVE-2014-7926
CVE-2014-9654
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2.2.1
log
@Fixes for:
CVE-2014-6585
CVE-2014-6591
CVE-2014-7923
CVE-2014-7926
CVE-2014-9654
@
text
@@


1.1
log
@file patch-source_test_intltest_regextst_cpp was initially added on branch OPENBSD_5_6.
@
text
@d1 67
@


1.1.2.1
log
@Fixes for:
CVE-2014-6585
CVE-2014-6591
CVE-2014-7923
CVE-2014-7926
CVE-2014-9654
@
text
@a0 67
$OpenBSD$

CVE-2014-7923 CVE-2014-7926 CVE-2014-9654
https://ssl.icu-project.org/trac/changeset/36801

--- source/test/intltest/regextst.cpp.orig	Sat Mar 15 07:08:42 2014
+++ source/test/intltest/regextst.cpp	Sun Apr 19 10:54:54 2015
@@@@ -135,6 +135,9 @@@@ void RegexTest::runIndexedTest( int32_t index, UBool e
         case 22: name = "Bug10459";
             if (exec) Bug10459();
             break;
+        case 23: name = "TestBug11371";
+            if (exec) TestBug11371();
+            break;
 
         default: name = "";
             break; //needed to end loop
@@@@ -5236,6 +5239,49 @@@@ void RegexTest::CheckInvBufSize() {
   }
 }
 
+void RegexTest::TestBug11371() {
+    if (quick) {
+        logln("Skipping test. Runs in exhuastive mode only.");
+        return;
+    }
+    UErrorCode status = U_ZERO_ERROR;
+    UnicodeString patternString;
+
+    for (int i=0; i<8000000; i++) {
+        patternString.append(UnicodeString("()"));
+    }
+    LocalPointer<RegexPattern> compiledPat(RegexPattern::compile(patternString, 0, status));
+    if (status != U_REGEX_PATTERN_TOO_BIG) {
+        errln("File %s, line %d expected status=U_REGEX_PATTERN_TOO_BIG; got %s.",
+              __FILE__, __LINE__, u_errorName(status));
+    }
+
+    status = U_ZERO_ERROR;
+    patternString = "(";
+    for (int i=0; i<20000000; i++) {
+        patternString.append(UnicodeString("A++"));
+    }
+    patternString.append(UnicodeString("){0}B++"));
+    LocalPointer<RegexPattern> compiledPat2(RegexPattern::compile(patternString, 0, status));
+    if (status != U_REGEX_PATTERN_TOO_BIG) {
+        errln("File %s, line %d expected status=U_REGEX_PATTERN_TOO_BIG; got %s.",
+              __FILE__, __LINE__, u_errorName(status));
+    }
+
+    // Pattern with too much string data, such that string indexes overflow operand data field size
+    // in compiled instruction.
+    status = U_ZERO_ERROR;
+    patternString = "";
+    while (patternString.length() < 0x00ffffff) {
+        patternString.append(UnicodeString("stuff and things dont you know, these are a few of my favorite strings\n"));
+    }
+    patternString.append(UnicodeString("X? trailing string"));
+    LocalPointer<RegexPattern> compiledPat3(RegexPattern::compile(patternString, 0, status));
+    if (status != U_REGEX_PATTERN_TOO_BIG) {
+        errln("File %s, line %d expected status=U_REGEX_PATTERN_TOO_BIG; got %s.",
+              __FILE__, __LINE__, u_errorName(status));
+    }
+}
 
 void RegexTest::Bug10459() {
     UErrorCode status = U_ZERO_ERROR;
@

