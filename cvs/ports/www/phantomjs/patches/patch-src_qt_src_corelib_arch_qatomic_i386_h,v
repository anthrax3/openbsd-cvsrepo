head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.8
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.10
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.6
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	sthen_20131220:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.12.20.00.54.06;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.12.20.00.54.06;	author sthen;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- src/qt/src/corelib/arch/qatomic_i386.h.orig	Thu Sep  5 23:36:02 2013
+++ src/qt/src/corelib/arch/qatomic_i386.h	Mon Nov 25 18:28:47 2013
@@@@ -107,7 +107,52 @@@@ template <typename T>
 Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddWaitFree()
 { return true; }
 
-#if defined(Q_CC_GNU) || defined(Q_CC_INTEL)
+#if defined(QT_GCC4_ATOMICS)
+inline bool QBasicAtomicInt::ref()
+{
+	return __sync_add_and_fetch(&_q_value, 1) != 0;
+}
+
+inline bool QBasicAtomicInt::deref()
+{
+	return __sync_sub_and_fetch(&_q_value, 1) != 0;
+}
+
+inline bool QBasicAtomicInt::testAndSetOrdered(int expectedValue, int newValue)
+{
+    return __sync_bool_compare_and_swap(&_q_value, expectedValue, newValue);
+}
+
+inline int QBasicAtomicInt::fetchAndStoreOrdered(int newValue)
+{
+    return __sync_lock_test_and_set(&_q_value, newValue);
+}
+
+inline int QBasicAtomicInt::fetchAndAddOrdered(int valueToAdd)
+{
+    return __sync_fetch_and_add(&_q_value, valueToAdd);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
+{
+    return __sync_bool_compare_and_swap(&_q_value, expectedValue, newValue);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
+{
+    return __sync_lock_test_and_set(&_q_value, newValue);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
+{
+    return __sync_fetch_and_add(&_q_value, valueToAdd);
+}
+
+
+#elif defined(Q_CC_GNU) || defined(Q_CC_INTEL)
 
 inline bool QBasicAtomicInt::ref()
 {
@


1.1.1.1
log
@import ports/www/phantomjs, from maintainer Francisco de Borja Lopez Rio
<borja@@codigo23.net>, ok abieber@@ - apologies for the extra copies of
WebKit and Qt but they are stripped-down so not horribly slow to build,
and have various fixes that phantomjs upstream haven't been able to get
into the various libraries yet.

"PhantomJS is a headless WebKit scriptable with a JavaScript API.
It has fast and native support for various web standards: DOM
handling, CSS selector, JSON, Canvas, and SVG."

(useful for various things including automated testing of web sites,
and screen scraping of complex web apps)
@
text
@@
