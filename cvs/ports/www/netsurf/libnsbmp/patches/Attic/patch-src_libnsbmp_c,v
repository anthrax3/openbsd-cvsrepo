head	1.1;
access;
symbols
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2016.02.03.12.31.18;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	7zUtUpEy90IujWes;

1.1.2.1
date	2016.02.03.12.31.18;	author jasper;	state Exp;
branches;
next	;
commitid	7zUtUpEy90IujWes;


desc
@@


1.1
log
@file patch-src_libnsbmp_c was initially added on branch OPENBSD_5_8.
@
text
@@


1.1.2.1
log
@Security fixes for heap overflow (CVE-2015-7508) and out-of-bounds read (CVE-2015-7507)
@
text
@a0 127
$OpenBSD$

Security fixes
heap overflow (CVE-2015-7508) and out-of-bounds read (CVE-2015-7507)
http://openwall.com/lists/oss-security/2015/12/16/4

--- src/libnsbmp.c.orig	Wed Feb  3 13:30:12 2016
+++ src/libnsbmp.c	Wed Feb  3 13:30:06 2016
@@@@ -865,8 +865,12 @@@@ static bmp_result bmp_decode_rgb(bmp_image *bmp, uint8
 	bmp->decoded = true;
 
 	/* Determine transparent index */
-	if (bmp->limited_trans)
-		bmp->transparent_index = bmp->colour_table[(*data >> bit_shifts[0]) & bit_mask];
+	if (bmp->limited_trans) {
+		uint32_t idx = (*data >> bit_shifts[0]) & bit_mask;
+		if (idx >= bmp->colours)
+			return BMP_DATA_ERROR;
+		bmp->transparent_index = bmp->colour_table[idx];
+	}
 
 	for (y = 0; y < bmp->height; y++) {
 		while (addr != (((intptr_t)data) & 3))
@@@@ -879,11 +883,15 @@@@ static bmp_result bmp_decode_rgb(bmp_image *bmp, uint8
 		else
 			scanline = (void *)(bottom - (y * swidth));
 		for (x = 0; x < bmp->width; x++) {
+			uint32_t idx;
 			if (bit >= ppb) {
 				bit = 0;
 				cur_byte = *data++;
 			}
-			scanline[x] = bmp->colour_table[(cur_byte >> bit_shifts[bit++]) & bit_mask];
+			idx = (cur_byte >> bit_shifts[bit++]) & bit_mask;
+			if (idx >= bmp->colours)
+				return BMP_DATA_ERROR;
+			scanline[x] = bmp->colour_table[idx];
 			if ((bmp->limited_trans) && (scanline[x] == bmp->transparent_index))
 				scanline[x] = bmp->trans_colour;
 		}
@@@@ -997,15 +1005,16 @@@@ static bmp_result bmp_decode_rle(bmp_image *bmp, uint8
 			} else {
 				/* 00 - NN means escape NN pixels */
 				if (bmp->reversed) {
-					pixels_left = (y + 1) * bmp->width - x;
+					pixels_left = (bmp->height - y) * bmp->width - x;
 					scanline = (void *)(top + (y * swidth));
 				} else {
-					pixels_left = (bmp->height - y + 1) * bmp->width - x;
+					pixels_left = (y + 1) * bmp->width - x;
 					scanline = (void *)(bottom - (y * swidth));
 				}
 				if (length > pixels_left)
 					length = pixels_left;
-				if (data + length > end)
+				if ((size == 4 && data + ((length + 1) / 2) > end) ||
+						(size == 8 && data + length > end))
 					return BMP_INSUFFICIENT_DATA;
 
 				/* the following code could be easily optimised by simply
@@@@ -1013,13 +1022,16 @@@@ static bmp_result bmp_decode_rle(bmp_image *bmp, uint8
 				 * routines if so */
 				if (size == 8) {
 					for (i = 0; i < length; i++) {
+						uint32_t idx = (uint32_t) *data++;
 						if (x >= bmp->width) {
 							x = 0;
 							if (++y > bmp->height)
 								return BMP_DATA_ERROR;
 							scanline -= bmp->width;
 						}
-						scanline[x++] = bmp->colour_table[(int)*data++];
+						if (idx >= bmp->colours)
+							return BMP_DATA_ERROR;
+						scanline[x++] = bmp->colour_table[idx];
 					}
 				} else {
 					for (i = 0; i < length; i++) {
@@@@ -1031,9 +1043,13 @@@@ static bmp_result bmp_decode_rle(bmp_image *bmp, uint8
 						}
 						if ((i & 1) == 0) {
 							pixel = *data++;
+							if ((pixel >> 4) >= bmp->colours)
+								return BMP_DATA_ERROR;
 							scanline[x++] = bmp->colour_table
 									[pixel >> 4];
 						} else {
+							if ((pixel & 0xf) >= bmp->colours)
+								return BMP_DATA_ERROR;
 							scanline[x++] = bmp->colour_table
 									[pixel & 0xf];
 						}
@@@@ -1047,10 +1063,10 @@@@ static bmp_result bmp_decode_rle(bmp_image *bmp, uint8
 		} else {
 			/* NN means perform RLE for NN pixels */
 			if (bmp->reversed) {
-				pixels_left = (y + 1) * bmp->width - x;
+				pixels_left = (bmp->height - y) * bmp->width - x;
 				scanline = (void *)(top + (y * swidth));
 			} else {
-				pixels_left = (bmp->height - y + 1) * bmp->width - x;
+				pixels_left = (y + 1) * bmp->width - x;
 				scanline = (void *)(bottom - (y * swidth));
 			}
 			if (length > pixels_left)
@@@@ -1064,7 +1080,10 @@@@ static bmp_result bmp_decode_rle(bmp_image *bmp, uint8
 			 * checking the bounds on entry and using some simply copying
 			 * routines if so */
 			if (size == 8) {
-				pixel = bmp->colour_table[(int)*data++];
+				uint32_t idx = (uint32_t) *data++;
+				if (idx >= bmp->colours)
+					return BMP_DATA_ERROR;
+				pixel = bmp->colour_table[idx];
 				for (i = 0; i < length; i++) {
 					if (x >= bmp->width) {
 						x = 0;
@@@@ -1076,6 +1095,9 @@@@ static bmp_result bmp_decode_rle(bmp_image *bmp, uint8
 				}
 			} else {
 				pixel2 = *data++;
+				if ((pixel2 >> 4) >= bmp->colours ||
+						(pixel2 & 0xf) >= bmp->colours)
+					return BMP_DATA_ERROR;
 				pixel = bmp->colour_table[pixel2 >> 4];
 				pixel2 = bmp->colour_table[pixel2 & 0xf];
 				for (i = 0; i < length; i++) {
@

