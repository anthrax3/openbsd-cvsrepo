head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.06.30.03.17.43;	author william;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Integrate changes present in upstream git, repairing sqtop's use with
squid 3.3.5.  It also fixes ipv6 and other stuff, details of which can
be found here:  https://code.google.com/p/sqtop/source/list

Update MAINTAINER email address at his request while here.

ok gonzalo (MAINTAINER) and sthen
@
text
@$OpenBSD$

Revision: 8ce6ee3cad09: print errors in more convenient way
Revision: 502a2c7e81bf: renamed (Gb, Mb, Kb) -> (GB, MB, KB) as bytes
Revision: f04cf1d965bc: sqstat: reworked parsing peer info to properly handle ipv6 addresses
Revision: 50c930f74dc7: Utils: bugfix - replaced size_t with std::string::size_type for find_last_of result


--- src/Utils.cpp.orig	Fri Nov  4 16:10:30 2011
+++ src/Utils.cpp	Wed Jun 26 21:30:44 2013
@@@@ -35,6 +35,16 @@@@ vector<string> Utils::SplitString(string str, string d
    return result;
 }
 
+std::pair <string, string> Utils::SplitIPPort(string ipport) {
+   std::pair <string, string> result;
+   std::string::size_type found = ipport.find_last_of(":");
+   if (found != string::npos) {
+      result.first = ipport.substr(0, found);
+      result.second = ipport.substr(found+1);
+   }
+   return result;
+}
+
 string Utils::JoinVector(vector<string> inv, string delim) {
    string result = "";
    for (vector<string>::iterator it = inv.begin(); it != inv.end(); ++it)
@@@@ -105,12 +115,12 @@@@ string Utils::ConvertSize(long long esize) {
     long long mb = esize/1024/1024 - gb*1024;
     long long kb = (esize/1024) % 1024;
     if (gb != 0) {
-        result += itos(gb) + "Gb ";
+        result += itos(gb) + "GB ";
     }
     if (mb != 0) {
-        result += itos(mb) + "Mb ";
+        result += itos(mb) + "MB ";
     }
-    result += itos(kb) + "Kb";
+    result += itos(kb) + "KB";
     return result;
 }
 
@@@@ -120,17 +130,17 @@@@ std::pair <string, string> Utils::ConvertSpeedPair(lon
    //long kb = speed/1024;
    if (mb != 0) {
        result.first = ftos(speed/1024.0/1024.0, 2);
-       result.second = "Mb/s";
+       result.second = "MB/s";
    } else {
        result.first = ftos(speed/1024.0, 1);
-       result.second = "Kb/s";
+       result.second = "KB/s";
    }
    return result;
 }
 
 string Utils::ConvertSpeed(long long speed) {
    std::pair <string, string> result = Utils::ConvertSpeedPair(speed);
-   return result.first+result.second;
+   return result.first+" "+result.second;
 }
 
 bool Utils::VectorFindSubstr(vector<string>& v, string& str) {
@@@@ -192,6 +202,17 @@@@ bool Utils::UserMemberOf(vector<string>& v, vector<str
             return true;
      }
      return false;
+}
+
+string Utils::replace(string text, string s, string d)
+{
+  for(std::string::size_type index=0; index=text.find(s, index), index!=std::string::npos;)
+  {
+    text.erase(index, s.length());
+    text.insert(index, d);
+    index+=d.length();
+  }
+  return text;
 }
 
 // vim: ai ts=3 sts=3 et sw=3 expandtab
@
