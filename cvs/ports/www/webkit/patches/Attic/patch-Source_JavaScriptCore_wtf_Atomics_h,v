head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2013.04.13.09.11.02;	author landry;	state dead;
branches;
next	1.2;

1.2
date	2012.05.18.09.56.04;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.18.07.45.57;	author landry;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Major update to webkit 2.0.0.

- add ruby to BDEPS. Webkit build system now uses autohell, python, ruby and perl \o/
- set MODRUBY_REV = 1.8 on sparc64 since 1.9 is broken there
- disable WebKit2 support, it needs shm_open()/shm_unlink()
- switch from gstreamer-0.10 to gstreamer1
- force-disable JIT/ASSEMBLER on non-jit archs, builds fails otherwise (bug #113638)
- only build NumberPrototype.cpp with -O0 on sparc64, not the damn whole thing
- use -Wl,--relax on ppc otherwise linking fails
- move some patches around since JavaScriptCore/wtf moved to WTF/wtf
- dont uselessly rerun make within make during install, gmake blows
- blindly backport upstream r144077 to fix mips64 build
- backport bits of #103128 & r145551 to fix powerpc build
- backport r147967 & more to fix bashisms in configure
- bug #109932 forced the use of gcc >= 4.7 or clang >= 3.0, but this is
  only for WebKit2 so loosen the check atm

Tested working fine on amd64 & i386, went in bulk builds, known broken
at runtime on ppc (being worked on. or not.) should build on mips64el
(and maybe even run!) and sparc64 (wont run! ever! nothing new here..),
but 'someone' will care about the poor exotic archs and fix'em, right ?

After too much prodding from the gnome maintainers who desperately need it
@
text
@$OpenBSD: patch-Source_JavaScriptCore_wtf_Atomics_h,v 1.2 2012/05/18 09:56:04 landry Exp $
https://bugs.webkit.org/show_bug.cgi?id=86835
Fix build failure on sparc64 since 1.8.1, provide atomic{In,De}crement implems based on __sync_fetch_and_add builtin
--- Source/JavaScriptCore/wtf/Atomics.h.orig	Thu May 17 11:42:51 2012
+++ Source/JavaScriptCore/wtf/Atomics.h	Thu May 17 11:45:22 2012
@@@@ -116,6 +116,12 @@@@ inline int atomicDecrement(int volatile* addend) { ret
 inline int atomicIncrement(int volatile* addend) { return __gnu_cxx::__exchange_and_add(addend, 1) + 1; }
 inline int atomicDecrement(int volatile* addend) { return __gnu_cxx::__exchange_and_add(addend, -1) - 1; }
 
+#elif COMPILER(GCC) && CPU(SPARC64)
+#define WTF_USE_LOCKFREE_THREADSAFEREFCOUNTED 1
+
+inline int atomicIncrement(int volatile* addend) { return __sync_fetch_and_add(addend, 1) + 1; }
+inline int atomicDecrement(int volatile* addend) { return __sync_fetch_and_add(addend, -1) - 1; }
+
 #endif
 
 inline bool weakCompareAndSwap(unsigned* location, unsigned expected, unsigned newValue)
@


1.2
log
@add upstream bug # url
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_JavaScriptCore_wtf_Atomics_h,v 1.1 2012/05/18 07:45:57 landry Exp $
@


1.1
log
@Fix build on sparc64, broken since 1.8.1. Provide atomic{In,De}crement
implems based on __sync_fetch_and_add builtin, with hints from kettenis@@
@
text
@d1 2
a2 1
$OpenBSD$
@

