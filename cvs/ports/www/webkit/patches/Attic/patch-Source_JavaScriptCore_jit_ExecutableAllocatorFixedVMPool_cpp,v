head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2013.04.13.09.11.02;	author landry;	state dead;
branches;
next	1.3;

1.3
date	2011.10.13.06.52.49;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.19.19.47.45;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.19.19.01.03;	author otto;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Major update to webkit 2.0.0.

- add ruby to BDEPS. Webkit build system now uses autohell, python, ruby and perl \o/
- set MODRUBY_REV = 1.8 on sparc64 since 1.9 is broken there
- disable WebKit2 support, it needs shm_open()/shm_unlink()
- switch from gstreamer-0.10 to gstreamer1
- force-disable JIT/ASSEMBLER on non-jit archs, builds fails otherwise (bug #113638)
- only build NumberPrototype.cpp with -O0 on sparc64, not the damn whole thing
- use -Wl,--relax on ppc otherwise linking fails
- move some patches around since JavaScriptCore/wtf moved to WTF/wtf
- dont uselessly rerun make within make during install, gmake blows
- blindly backport upstream r144077 to fix mips64 build
- backport bits of #103128 & r145551 to fix powerpc build
- backport r147967 & more to fix bashisms in configure
- bug #109932 forced the use of gcc >= 4.7 or clang >= 3.0, but this is
  only for WebKit2 so loosen the check atm

Tested working fine on amd64 & i386, went in bulk builds, known broken
at runtime on ppc (being worked on. or not.) should build on mips64el
(and maybe even run!) and sparc64 (wont run! ever! nothing new here..),
but 'someone' will care about the poor exotic archs and fix'em, right ?

After too much prodding from the gnome maintainers who desperately need it
@
text
@$OpenBSD: patch-Source_JavaScriptCore_jit_ExecutableAllocatorFixedVMPool_cpp,v 1.3 2011/10/13 06:52:49 jasper Exp $

https://bugs.webkit.org/show_bug.cgi?id=61137

--- Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp.orig	Fri Oct  7 09:51:09 2011
+++ Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp	Fri Oct  7 09:51:31 2011
@@@@ -47,7 +47,8 @@@@ namespace JSC {
     
 #if CPU(ARM)
 static const size_t fixedPoolSize = 16 * 1024 * 1024;
-#elif CPU(X86_64)
+// We don't want an initial allocation of 1GB, it's above the default ulimit
+#elif CPU(X86_64) && !defined(__OpenBSD__)
 static const size_t fixedPoolSize = 1024 * 1024 * 1024;
 #else
 static const size_t fixedPoolSize = 32 * 1024 * 1024;
@


1.3
log
@- update to 1.6.1

tested in a bulk on amd64, as well as on sparc64 by myself
macppc testing by pea@@

ok aja@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_JavaScriptCore_jit_ExecutableAllocatorFixedVMPool_cpp,v 1.2 2011/05/19 19:47:45 landry Exp $
@


1.2
log
@Bug reported upstream as https://bugs.webkit.org/show_bug.cgi?id=61137
@
text
@d1 2
a2 1
$OpenBSD: patch-Source_JavaScriptCore_jit_ExecutableAllocatorFixedVMPool_cpp,v 1.1 2011/05/19 19:01:03 otto Exp $
d4 5
a8 4
--- Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp.orig	Thu May 19 20:57:31 2011
+++ Source/JavaScriptCore/jit/ExecutableAllocatorFixedVMPool.cpp	Thu May 19 20:58:44 2011
@@@@ -392,7 +392,8 @@@@ typedef AllocationTableDirectory<LazyAllocationTable<P
 
d10 1
a10 1
 typedef PageTables16MB FixedVMPoolPageTables;
d14 1
a14 1
 typedef PageTables1GB FixedVMPoolPageTables;
d16 1
a16 1
 typedef PageTables32MB FixedVMPoolPageTables;
@


1.1
log
@Do not initially allocate 1G of mem. It's above out default ulimit.
Only applies to amd64. ok sthen@@ robert@@ landry@@
@
text
@d1 2
a2 1
$OpenBSD$
@

