head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.10.06.14.03.43;	author landry;	state dead;
branches;
next	1.1;

1.1
date	2013.04.13.09.11.02;	author landry;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to webkit 2.2.0.

- Now depends on newer gcc, use 4.6 by default.
- Enable webkit2 api in the gtk3 FLAVOR. Still broken/erratic behaviour at
  runtime, but at least this will allow people to debug it, and it's
  required by newer GNOMEs anyway. Provide MiniBrowser for debugging purposes.
- add hack from bug #118732 to workaround the fact that our binutils
  doesnt support 'ar T'
- update patches from #103128 to tentatively fix powerpc runtime
- force-disable YARR_JIT & ASSEMBLE on archs without JIT (ie anything
  besides i386/amd64) via Platform.h patch instead of JSC_CPPFLAGS (which
  doesnt work anymore anyway)
- add a bunch of patches to fix build (missing includes etc) in the WebKit2
  source tree

Tested in an amd64 bulk build, runtime-tested previous betas on
i386/amd64, test-built on powerpc and sparc64. Things might still be
broken at runtime on powerpc, but at least it allows more GNOME things
to be updated.
@
text
@$OpenBSD: patch-Source_WTF_wtf_Atomics_cpp,v 1.1 2013/04/13 09:11:02 landry Exp $
http://trac.webkit.org/browser/trunk/Source/WTF/wtf/Atomics.cpp?rev=144077
+add CPU(MIPS64) to ensure its only picked there - since we build with gcc 4.2,
__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 is not defined on all archs
--- Source/WTF/wtf/Atomics.cpp.orig	Sat Apr 13 09:44:20 2013
+++ Source/WTF/wtf/Atomics.cpp	Sat Apr 13 09:45:15 2013
@@@@ -0,0 +1,111 @@@@
+/*
+ * Copyright (C) 2007, 2008, 2010, 2012 Apple Inc. All rights reserved.
+ * Copyright (C) 2007 Justin Haygood (jhaygood@@reaktix.com)
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer. 
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution. 
+ * 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission. 
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ *
+ * Note: The implementations of InterlockedIncrement and InterlockedDecrement are based
+ * on atomic_increment and atomic_exchange_and_add from the Boost C++ Library. The license
+ * is virtually identical to the Apple license above but is included here for completeness.
+ *
+ * Boost Software License - Version 1.0 - August 17th, 2003
+ * 
+ * Permission is hereby granted, free of charge, to any person or organization
+ * obtaining a copy of the software and accompanying documentation covered by
+ * this license (the "Software") to use, reproduce, display, distribute,
+ * execute, and transmit the Software, and to prepare derivative works of the
+ * Software, and to permit third-parties to whom the Software is furnished to
+ * do so, all subject to the following:
+ * 
+ * The copyright notices in the Software and this entire statement, including
+ * the above license grant, this restriction and the following disclaimer,
+ * must be included in all copies of the Software, in whole or in part, and
+ * all derivative works of the Software, unless such copies or derivative
+ * works are solely in the form of machine-executable object code generated by
+ * a source language processor.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+ * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+ * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+// Some architectures, like MIPS32, don't have GCC implementation for builtin __sync_* functions
+// with 64 bits variable size. Official GCC answer for the problem: If a target doesn't support
+// atomic operations on certain variable sizes, you are out of luck with atomicity in that case
+// (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=56296). GCC >= 4.8 will support __atomic_* builtin
+// functions for this purpose for all the GCC targets, but for current compilers we have to include
+// our own implementation.
+#if COMPILER(GCC) && !defined(__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8) && USE(LOCKFREE_THREADSAFEREFCOUNTED) && USE(PTHREADS) && CPU(MIPS64)
+
+#include "Atomics.h"
+
+#include "ThreadingPrimitives.h"
+
+namespace WTF {
+
+static const size_t kSwapLockCount = 32;
+static Mutex s_swapLocks[kSwapLockCount];
+
+static inline Mutex& getSwapLock(const volatile int64_t* addr)
+{
+    return s_swapLocks[(reinterpret_cast<intptr_t>(addr) >> 3U) % kSwapLockCount];
+}
+
+static int64_t atomicStep(int64_t volatile* addend, int64_t step)
+{
+    Mutex& mutex = getSwapLock(addend);
+
+    mutex.lock();
+    int64_t value = *addend + step;
+    *addend = value;
+    mutex.unlock();
+
+    return value;
+}
+
+extern "C" {
+
+int64_t __sync_add_and_fetch_8(int64_t volatile* addend, int64_t value)
+{
+    return atomicStep(addend, value);
+}
+
+int64_t __sync_sub_and_fetch_8(int64_t volatile* addend, int64_t value)
+{
+    return atomicStep(addend, -value);
+}
+
+} // extern "C"
+
+} // namespace WTF
+
+#endif
@


1.1
log
@Major update to webkit 2.0.0.

- add ruby to BDEPS. Webkit build system now uses autohell, python, ruby and perl \o/
- set MODRUBY_REV = 1.8 on sparc64 since 1.9 is broken there
- disable WebKit2 support, it needs shm_open()/shm_unlink()
- switch from gstreamer-0.10 to gstreamer1
- force-disable JIT/ASSEMBLER on non-jit archs, builds fails otherwise (bug #113638)
- only build NumberPrototype.cpp with -O0 on sparc64, not the damn whole thing
- use -Wl,--relax on ppc otherwise linking fails
- move some patches around since JavaScriptCore/wtf moved to WTF/wtf
- dont uselessly rerun make within make during install, gmake blows
- blindly backport upstream r144077 to fix mips64 build
- backport bits of #103128 & r145551 to fix powerpc build
- backport r147967 & more to fix bashisms in configure
- bug #109932 forced the use of gcc >= 4.7 or clang >= 3.0, but this is
  only for WebKit2 so loosen the check atm

Tested working fine on amd64 & i386, went in bulk builds, known broken
at runtime on ppc (being worked on. or not.) should build on mips64el
(and maybe even run!) and sparc64 (wont run! ever! nothing new here..),
but 'someone' will care about the poor exotic archs and fix'em, right ?

After too much prodding from the gnome maintainers who desperately need it
@
text
@d1 1
a1 1
$OpenBSD$
@

