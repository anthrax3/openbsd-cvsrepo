head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2016.03.16.07.10.57;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	oPcf1vDRhq4iPuwA;

1.4
date	2014.09.28.06.52.14;	author ajacoutot;	state Exp;
branches
	1.4.4.1;
next	1.3;
commitid	WG3T5X7WYzJwFEVR;

1.3
date	2014.03.25.06.25.45;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.06.14.03.42;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.13.09.11.02;	author landry;	state Exp;
branches;
next	;

1.4.4.1
date	2016.03.19.10.33.08;	author ajacoutot;	state Exp;
branches;
next	;
commitid	CO9qkVWh5gncfaCV;


desc
@@


1.5
log
@SECURITY update to webkit-2.4.10.
@
text
@$OpenBSD: patch-Source_JavaScriptCore_llint_LowLevelInterpreter_asm,v 1.4 2014/09/28 06:52:14 ajacoutot Exp $

https://bug-103128-attachments.webkit.org/attachment.cgi?id=202651

--- Source/JavaScriptCore/llint/LowLevelInterpreter.asm.orig	Mon Mar 14 08:09:01 2016
+++ Source/JavaScriptCore/llint/LowLevelInterpreter.asm	Tue Mar 15 08:11:20 2016
@@@@ -704,6 +704,11 @@@@ _llint_op_loop_hint:
     loadp CodeBlock[cfr], t1
     loadp CodeBlock::m_vm[t1], t1
     loadb VM::watchdog+Watchdog::m_timerDidFire[t1], t0
+    if FOUR_BYTE_BOOL
+        loadi VM::watchdog+Watchdog::m_timerDidFire[t1], t0
+    else
+        loadb VM::watchdog+Watchdog::m_timerDidFire[t1], t0
+    end
     btbnz t0, .handleWatchdogTimer
 .afterWatchdogTimerCheck:
     checkSwitchToJITForLoop()
@


1.4
log
@Cleanup to help future update and split; no pkg change.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_JavaScriptCore_llint_LowLevelInterpreter_asm,v 1.3 2014/03/25 06:25:45 landry Exp $
d3 1
a3 3
https://bugs.webkit.org/show_bug.cgi?id=103128
https://bug-103128-attachments.webkit.org/attachment.cgi?id=202076
Last chunk: https://bug-103128-attachments.webkit.org/attachment.cgi?id=202651
d5 3
a7 32
--- Source/JavaScriptCore/llint/LowLevelInterpreter.asm.orig	Tue Feb  4 17:38:03 2014
+++ Source/JavaScriptCore/llint/LowLevelInterpreter.asm	Fri Feb 14 22:47:15 2014
@@@@ -122,6 +122,12 @@@@ else
     const PayloadOffset = 0
 end
 
+if JSVALUE64
+    const CellOffset = 0
+else
+    const CellOffset = PayloadOffset
+end
+
 # Constant for reasoning about butterflies.
 const IsArray                  = 1
 const IndexingShapeMask        = 30
@@@@ -299,13 +305,13 @@@@ macro assertNotConstant(index)
 end
 
 macro functionForCallCodeBlockGetter(targetRegister)
-    loadp Callee[cfr], targetRegister
+    loadp Callee + CellOffset[cfr], targetRegister
     loadp JSFunction::m_executable[targetRegister], targetRegister
     loadp FunctionExecutable::m_codeBlockForCall[targetRegister], targetRegister
 end
 
 macro functionForConstructCodeBlockGetter(targetRegister)
-    loadp Callee[cfr], targetRegister
+    loadp Callee + CellOffset[cfr], targetRegister
     loadp JSFunction::m_executable[targetRegister], targetRegister
     loadp FunctionExecutable::m_codeBlockForConstruct[targetRegister], targetRegister
 end
@@@@ -696,6 +702,11 @@@@ _llint_op_loop_hint:
@


1.4.4.1
log
@SECURITY update to WebKitGTK+ 2.4.10.

CVE-2015-1120, CVE-2015-1076, CVE-2015-1071, CVE-2015-1081, CVE-2015-1122,
CVE-2015-1155, CVE-2014-1748, CVE-2015-3752, CVE-2015-5809, CVE-2015-5928,
CVE-2015-3749, CVE-2015-3659, CVE-2015-3748, CVE-2015-3743, CVE-2015-3731,
CVE-2015-3745, CVE-2015-5822, CVE-2015-3658, CVE-2015-3741, CVE-2015-3727,
CVE-2015-5801, CVE-2015-5788, CVE-2015-3747, CVE-2015-5794, CVE-2015-1127,
CVE-2015-1153, CVE-2015-1083
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_JavaScriptCore_llint_LowLevelInterpreter_asm,v 1.4 2014/09/28 06:52:14 ajacoutot Exp $
d3 3
a5 1
https://bug-103128-attachments.webkit.org/attachment.cgi?id=202651
d7 32
a38 3
--- Source/JavaScriptCore/llint/LowLevelInterpreter.asm.orig	Mon Mar 14 08:09:01 2016
+++ Source/JavaScriptCore/llint/LowLevelInterpreter.asm	Tue Mar 15 08:11:20 2016
@@@@ -704,6 +704,11 @@@@ _llint_op_loop_hint:
@


1.3
log
@Update to webkit 2.4.0.

See http://webkitgtk.org/2014/03/24/webkitgtk2.4.0-released.html. Note
that Webkit2 API is still broken, on OpenBSD(and FreeBSD) and this might
be the last release shipping the Webkit1 API.
Pass -DLOG_DISABLED=0 to CPPFLAGS to somewhat allow debugging.
Use the same ruby version on sparc64 as other archs now that they're
more reliable.

Remove some patches merged upstream, and add links to upstream bz for
most of the remaining patches.

Note: this needs gnu/usr.bin/binutils/include/opcode/i386.h r1.15 to
build. And gcc 4.8 (and python, ruby & perl :)
Built numerous times on amd64/ppc/sparc64 (broken at runtime on the last
two, but that's not a regression from 2.2..) and went in a bunch of
bulks.
@
text
@d1 2
a2 1
$OpenBSD: patch-Source_JavaScriptCore_llint_LowLevelInterpreter_asm,v 1.2 2013/10/06 14:03:42 landry Exp $
d6 1
@


1.2
log
@Update to webkit 2.2.0.

- Now depends on newer gcc, use 4.6 by default.
- Enable webkit2 api in the gtk3 FLAVOR. Still broken/erratic behaviour at
  runtime, but at least this will allow people to debug it, and it's
  required by newer GNOMEs anyway. Provide MiniBrowser for debugging purposes.
- add hack from bug #118732 to workaround the fact that our binutils
  doesnt support 'ar T'
- update patches from #103128 to tentatively fix powerpc runtime
- force-disable YARR_JIT & ASSEMBLE on archs without JIT (ie anything
  besides i386/amd64) via Platform.h patch instead of JSC_CPPFLAGS (which
  doesnt work anymore anyway)
- add a bunch of patches to fix build (missing includes etc) in the WebKit2
  source tree

Tested in an amd64 bulk build, runtime-tested previous betas on
i386/amd64, test-built on powerpc and sparc64. Things might still be
broken at runtime on powerpc, but at least it allows more GNOME things
to be updated.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_JavaScriptCore_llint_LowLevelInterpreter_asm,v 1.1 2013/04/13 09:11:02 landry Exp $
d5 3
a7 3
--- Source/JavaScriptCore/llint/LowLevelInterpreter.asm.orig	Fri Sep 20 09:24:34 2013
+++ Source/JavaScriptCore/llint/LowLevelInterpreter.asm	Sun Oct  6 14:48:27 2013
@@@@ -109,6 +109,12 @@@@ else
d20 1
a20 1
@@@@ -276,13 +282,13 @@@@ macro assertNotConstant(index)
d36 4
a39 5
@@@@ -657,7 +663,11 @@@@ _llint_op_jngreatereq:
 _llint_op_loop_hint:
     traceExecution()
     loadp JITStackFrame::vm[sp], t1
-    loadb VM::watchdog+Watchdog::m_timerDidFire[t1], t0
@


1.1
log
@Major update to webkit 2.0.0.

- add ruby to BDEPS. Webkit build system now uses autohell, python, ruby and perl \o/
- set MODRUBY_REV = 1.8 on sparc64 since 1.9 is broken there
- disable WebKit2 support, it needs shm_open()/shm_unlink()
- switch from gstreamer-0.10 to gstreamer1
- force-disable JIT/ASSEMBLER on non-jit archs, builds fails otherwise (bug #113638)
- only build NumberPrototype.cpp with -O0 on sparc64, not the damn whole thing
- use -Wl,--relax on ppc otherwise linking fails
- move some patches around since JavaScriptCore/wtf moved to WTF/wtf
- dont uselessly rerun make within make during install, gmake blows
- blindly backport upstream r144077 to fix mips64 build
- backport bits of #103128 & r145551 to fix powerpc build
- backport r147967 & more to fix bashisms in configure
- bug #109932 forced the use of gcc >= 4.7 or clang >= 3.0, but this is
  only for WebKit2 so loosen the check atm

Tested working fine on amd64 & i386, went in bulk builds, known broken
at runtime on ppc (being worked on. or not.) should build on mips64el
(and maybe even run!) and sparc64 (wont run! ever! nothing new here..),
but 'someone' will care about the poor exotic archs and fix'em, right ?

After too much prodding from the gnome maintainers who desperately need it
@
text
@d1 1
a1 1
$OpenBSD$
d3 5
a7 3
--- Source/JavaScriptCore/llint/LowLevelInterpreter.asm.orig	Sun Mar 31 11:48:40 2013
+++ Source/JavaScriptCore/llint/LowLevelInterpreter.asm	Sun Mar 31 19:00:09 2013
@@@@ -87,6 +87,12 @@@@ else
d20 1
a20 1
@@@@ -263,13 +269,13 @@@@ macro assertNotConstant(index)
d36 13
a48 9
@@@@ -824,7 +830,7 @@@@ macro interpretResolveWithBase(opcodeLength, slowPath)
     getResolveOperation(4, t0)
     btpz t0, .slowPath
 
-    loadp ScopeChain[cfr], t3
+    loadp ScopeChain + CellOffset[cfr], t3
     # Get the base
     loadis ResolveOperation::m_operation[t0], t2
 
@

