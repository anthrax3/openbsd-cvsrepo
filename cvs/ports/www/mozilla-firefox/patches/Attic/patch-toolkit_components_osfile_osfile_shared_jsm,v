head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2012.11.24.10.21.50;	author landry;	state dead;
branches;
next	1.1;

1.1
date	2012.10.17.19.43.24;	author landry;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to firefox 17.0.

- see http://www.mozilla.org/en-US/firefox/17.0/releasenotes/ for details
- enable the gio/libnotify interaction, since it brings no additional
  dep. libnotify will be dlopened at runtime if present, and gio is
already in the dependency chain. The latter will interact with the gio mime
database for file associations, and firefox will ask the user if he
wants to register it as the default http:// handler. The former will
show a notify popup upon download completion, among others.
- add build depends on yasm in i386/amd64 for webm
- remove patch-browser_app_profile_firefox_js, the updater is already disabled
- remove gstreamer patches from #776838, #777696 & #747257, merged upstream
- remove ipc_message_utils.h patch from #775428, commited upstream
- remove mozalloc.cpp patch, <sys/types.h> is already included above
- remove xpcshell hang patchset from #706955, cant reproduce anymore
- remove patch-security_manager_ssl_src_Makefile_in, unneeded
- remove OS.File extra logging from #785200, merged upstream
- add patch-toolkit_system_gnome_nsGIOService_cpp, workaround for
  #805202 (libgio-2.0.so dlopening), to be removed in fx 19
- remove xpcom arm patch from #783875, merged upstream

ok sthen@@
@
text
@$OpenBSD: patch-toolkit_components_osfile_osfile_shared_jsm,v 1.1 2012/10/17 19:43:24 landry Exp $
--- toolkit/components/osfile/osfile_shared.jsm.orig	Wed Oct 17 21:39:45 2012
+++ toolkit/components/osfile/osfile_shared.jsm	Wed Oct 17 21:41:25 2012
@@@@ -198,8 +198,6 @@@@
        if (!type.size) {
          throw new TypeError("Argument is not a proper C type");
        }
-       LOG("Determining best projection for", type,
-             "(size: ", type.size, ")", signed?"signed":"unsigned");
        // Determine if type is projected to Int64/Uint64
        if (type.size == 8           // Usual case
            || type == ctypes.size_t // Special cases
@@@@ -208,14 +206,11 @@@@
            || type == ctypes.uintptr_t
            || type == ctypes.off_t){
           if (signed) {
-            LOG("Projected as a large signed integer");
             return projectLargeInt;
           } else {
-            LOG("Projected as a large unsigned integer");
             return projectLargeUInt;
           }
        }
-       LOG("Projected as a regular number");
        return projectValue;
      };
      exports.OS.Shared.projectValue = projectValue;
@@@@ -599,7 +594,6 @@@@
         // thread
      let declareFFI = function declareFFI(lib, symbol, abi,
                                           returnType /*, argTypes ...*/) {
-       LOG("Attempting to declare FFI ", symbol);
        // We guard agressively, to avoid any late surprise
        if (typeof symbol != "string") {
          throw new TypeError("declareFFI expects as first argument a string");
@@@@ -634,12 +628,10 @@@@
          if (exports.OS.Shared.DEBUG) {
            result.fun = fun; // Also return the raw FFI function.
          }
-         LOG("Function", symbol, "declared");
          return result;
        } catch (x) {
          // Note: Not being able to declare a function is normal.
          // Some functions are OS (or OS version)-specific.
-         LOG("Could not declare function " + symbol, x);
          return null;
        }
      };
@


1.1
log
@Remove extra verbose logging from OS.File, confuses people. (#785200)
@
text
@d1 1
a1 1
$OpenBSD$
@

