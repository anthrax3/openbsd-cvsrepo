head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2012.05.09.20.36.40;	author landry;	state dead;
branches;
next	1.2;

1.2
date	2012.04.30.15.28.42;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.16.21.31.24;	author landry;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Sync patches with what has (finally _o/ \o/ \o_ !) been commited
upstream for bug #691898, fixing build on powerpc (and other non
yarr-jit archs..), see
https://hg.mozilla.org/mozilla-central/rev/f5a3a7b9c6b0
@
text
@$OpenBSD: patch-js_src_jscntxt_cpp,v 1.2 2012/04/30 15:28:42 landry Exp $
https://bug691898.bugzilla.mozilla.org/attachment.cgi?id=588391
use yarr interpreter on ppc
--- js/src/jscntxt.cpp.orig	Sat Apr 21 00:03:54 2012
+++ js/src/jscntxt.cpp	Wed Apr 25 15:26:55 2012
@@@@ -104,9 +104,11 @@@@ JSRuntime::sizeOfExcludingThis(JSMallocSizeOfFun mallo
 
     if (regexpCode) {
         size_t method = 0, regexp = 0, unused = 0;
+#if ENABLE_ASSEMBLER
         if (execAlloc_)
             execAlloc_->sizeOfCode(&method, &regexp, &unused);
         JS_ASSERT(method == 0);     /* this execAlloc is only used for regexp code */
+#endif
         *regexpCode = regexp + unused;
     }
 
@@@@ -124,6 +126,7 @@@@ JSRuntime::triggerOperationCallback()
     JS_ATOMIC_SET(&interrupt, 1);
 }
 
+#if ENABLE_ASSEMBLER
 JSC::ExecutableAllocator *
 JSRuntime::createExecutableAllocator(JSContext *cx)
 {
@@@@ -135,6 +138,7 @@@@ JSRuntime::createExecutableAllocator(JSContext *cx)
         js_ReportOutOfMemory(cx);
     return execAlloc_;
 }
+#endif
 
 WTF::BumpPointerAllocator *
 JSRuntime::createBumpPointerAllocator(JSContext *cx)
@


1.2
log
@Update to firefox 12.0.

- see http://www.mozilla.org/en-US/firefox/12.0/releasenotes/ for details
- two patches moved (patch-widget_src_xpwidgets_nsPrintSettingsImpl_cpp
  and patch-widget_src_gtk2_Makefile_in)
- add two new patches for bug #691898 (patch-js_src_jsapi_cpp and
  /patch-js_src_jsprvtd_h)
- add patch-gfx_thebes_gfxPlatform_cpp to workaround regression
  introduced in bug #715658, which prevents one from building against
systemwide cairo.
- patch-extensions_auth_nsAuthGSSAPI_cpp from bug #667325 got merged
- patch-js_src_js-config_h_in and patch-js_src_jscpucfg_h from #714312 got
  merged
- patch-ipc_chromium_src_base_dir_reader_posix_ -from #714315 got merged
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_jscntxt_cpp,v 1.1 2012/03/16 21:31:24 landry Exp $
@


1.1
log
@Update to firefox 11.0.
- Fixes MFSA 2012-12->19
- see http://www.mozilla.org/en-US/firefox/11.0/releasenotes/
- complete patchset for #691898, still fixes build on ppc (and hopefully
  commited in firefox 14...)
- add patchset from #706955, workarounds #669050 (xpcshell hangs during
  make install and chokes on CSPUtils.csm, threads related..)
- remove obsolete/commited patches
@
text
@d1 1
a1 1
$OpenBSD$
d4 3
a6 24
--- js/src/jscntxt.cpp.orig	Sun Mar 11 20:39:26 2012
+++ js/src/jscntxt.cpp	Sun Mar 11 20:41:36 2012
@@@@ -106,7 +106,9 @@@@ ThreadData::ThreadData(JSRuntime *rt)
 #endif
     waiveGCQuota(false),
     tempLifoAlloc(TEMP_LIFO_ALLOC_PRIMARY_CHUNK_SIZE),
+#if ENABLE_ASSEMBLER
     execAlloc(NULL),
+#endif
     bumpAlloc(NULL),
     repCache(NULL),
     dtoaState(NULL),
@@@@ -123,7 +125,9 @@@@ ThreadData::~ThreadData()
 {
     JS_ASSERT(!repCache);
 
+#if ENABLE_ASSEMBLER
     rt->delete_<JSC::ExecutableAllocator>(execAlloc);
+#endif
     rt->delete_<WTF::BumpPointerAllocator>(bumpAlloc);
 
     if (dtoaState)
@@@@ -157,9 +161,11 @@@@ ThreadData::sizeOfExcludingThis(JSMallocSizeOfFun mall
     *temporary = tempLifoAlloc.sizeOfExcludingThis(mallocSizeOf);
d8 2
a9 1
     size_t method = 0, regexp = 0, unused = 0;
d11 3
a13 3
     if (execAlloc)
         execAlloc->sizeOfCode(&method, &regexp, &unused);
     JS_ASSERT(method == 0);     /* this execAlloc is only used for regexp code */
d15 2
a16 1
     *regexpCode = regexp + unused;
d18 2
a19 3
     *stackCommitted = stackSpace.sizeOfCommitted();
@@@@ -188,6 +194,7 @@@@ ThreadData::triggerOperationCallback(JSRuntime *rt)
 #endif
d24 1
a24 1
 ThreadData::createExecutableAllocator(JSContext *cx)
d26 1
a26 1
@@@@ -199,6 +206,7 @@@@ ThreadData::createExecutableAllocator(JSContext *cx)
d28 1
a28 1
     return execAlloc;
d33 1
a33 1
 ThreadData::createBumpPointerAllocator(JSContext *cx)
@

