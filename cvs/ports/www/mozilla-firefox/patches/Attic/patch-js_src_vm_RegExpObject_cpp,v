head	1.6;
access;
symbols
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4;
locks; strict;
comment	@# @;


1.6
date	2012.09.01.13.56.45;	author landry;	state dead;
branches;
next	1.5;

1.5
date	2012.08.07.08.55.40;	author landry;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.11.15.29.56;	author landry;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.09.20.36.40;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.16.21.31.24;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.20.20.15.04;	author landry;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to firefox 15.0.

- see http://www.mozilla.org/en-US/firefox/15.0/releasenotes/
- add -Os hack to fix a relocation error when linking on ppc (as was
  done in tb since 10..)
- garbage collect nsSound.cpp, the original one uses libcanberra
  properly and thus sndio.
- remove patch from #750620, merged upstream (mfbt/double-conversion)
- remove patches from #747257, merged upstream (gstreamer fix)
- remove patches from #691898, merged upstream (yarr jit ppc)
@
text
@$OpenBSD: patch-js_src_vm_RegExpObject_cpp,v 1.5 2012/08/07 08:55:40 landry Exp $
https://hg.mozilla.org/mozilla-central/rev/f5a3a7b9c6b0
--- js/src/vm/RegExpObject.cpp.orig	Wed Jun 13 01:46:48 2012
+++ js/src/vm/RegExpObject.cpp	Sun Jun 17 12:04:02 2012
@@@@ -168,7 +168,6 @@@@ MatchPairs::checkAgainst(size_t inputLength)
 
 /* detail::RegExpCode */
 
-#if ENABLE_YARR_JIT
 void
 RegExpCode::reportYarrError(JSContext *cx, TokenStream *ts, ErrorCode error)
 {
@@@@ -200,46 +199,9 @@@@ RegExpCode::reportYarrError(JSContext *cx, TokenStream
     }
 }
 
-#else /* !ENABLE_YARR_JIT */
-
-void
-RegExpCode::reportPCREError(JSContext *cx, int error)
-{
-#define REPORT(msg_) \
-    JS_ReportErrorFlagsAndNumberUC(cx, JSREPORT_ERROR, js_GetErrorMessage, NULL, msg_); \
-    return
-    switch (error) {
-      case -2: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      case 0: JS_NOT_REACHED("Precondition violation: an error must have occurred.");
-      case 1: REPORT(JSMSG_TRAILING_SLASH);
-      case 2: REPORT(JSMSG_TRAILING_SLASH);
-      case 3: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      case 4: REPORT(JSMSG_BAD_QUANTIFIER);
-      case 5: REPORT(JSMSG_BAD_QUANTIFIER);
-      case 6: REPORT(JSMSG_BAD_CLASS_RANGE);
-      case 7: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      case 8: REPORT(JSMSG_BAD_CLASS_RANGE);
-      case 9: REPORT(JSMSG_BAD_QUANTIFIER);
-      case 10: REPORT(JSMSG_UNMATCHED_RIGHT_PAREN);
-      case 11: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      case 12: REPORT(JSMSG_UNMATCHED_RIGHT_PAREN);
-      case 13: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      case 14: REPORT(JSMSG_MISSING_PAREN);
-      case 15: REPORT(JSMSG_BAD_BACKREF);
-      case 16: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      case 17: REPORT(JSMSG_REGEXP_TOO_COMPLEX);
-      default:
-        JS_NOT_REACHED("Precondition violation: unknown PCRE error code.");
-    }
-#undef REPORT
-}
-
-#endif /* ENABLE_YARR_JIT */
-
 bool
 RegExpCode::compile(JSContext *cx, JSLinearString &pattern, unsigned *parenCount, RegExpFlag flags)
 {
-#if ENABLE_YARR_JIT
     /* Parse the pattern. */
     ErrorCode yarrError;
     YarrPattern yarrPattern(pattern, bool(flags & IgnoreCaseFlag), bool(flags & MultilineFlag),
@@@@ -256,7 +218,7 @@@@ RegExpCode::compile(JSContext *cx, JSLinearString &pat
      * case we have to bytecode compile it.
      */
 
-#ifdef JS_METHODJIT
+#if ENABLE_YARR_JIT && defined(JS_METHODJIT)
     if (isJITRuntimeEnabled(cx) && !yarrPattern.m_containsBackreferences) {
         JSC::ExecutableAllocator *execAlloc = cx->runtime->getExecutableAllocator(cx);
         if (!execAlloc) {
@@@@ -277,21 +239,11 @@@@ RegExpCode::compile(JSContext *cx, JSLinearString &pat
         return false;
     }
 
+#if ENABLE_YARR_JIT
     codeBlock.setFallBack(true);
+#endif
     byteCode = byteCompile(yarrPattern, bumpAlloc).get();
     return true;
-#else /* !defined(ENABLE_YARR_JIT) */
-    int error = 0;
-    compiled = jsRegExpCompile(pattern.chars(), pattern.length(),
-                  ignoreCase() ? JSRegExpIgnoreCase : JSRegExpDoNotIgnoreCase,
-                  multiline() ? JSRegExpMultiline : JSRegExpSingleLine,
-                  parenCount, &error);
-    if (error) {
-        reportPCREError(cx, error);
-        return false;
-    }
-    return true;
-#endif
 }
 
 RegExpRunStatus
@@@@ -306,18 +258,11 @@@@ RegExpCode::execute(JSContext *cx, const jschar *chars
     else
         result = JSC::Yarr::execute(codeBlock, chars, start, length, output);
 #else
-    result = jsRegExpExecute(cx, compiled, chars, length, start, output, outputCount);
+    result = JSC::Yarr::interpret(byteCode, chars, start, length, output);
 #endif
 
     if (result == -1)
         return RegExpRunStatus_Success_NotFound;
-
-#if !ENABLE_YARR_JIT
-    if (result < 0) {
-        reportPCREError(cx, result);
-        return RegExpRunStatus_Error;
-    }
-#endif
 
     JS_ASSERT(result >= 0);
     return RegExpRunStatus_Success;
@


1.5
log
@Update to firefox 14.0.1.

- see http://www.mozilla.org/en-US/firefox/14.0.1/releasenotes/
- enable H.264 video support through gstreamer. Mention that one needs to
  manually install gstreamer-ffmpeg. Not all videos/sites will work.
- backport cset from #776838 & #747257 for various gst fixes.
- backport cset from #750620 to fix ppc (and other exotic archs) build.
- backport cset from #752895 to fix packaging issues.
- remove patch-content_xslt_src_base_txDouble_cpp, useless since mozilla
  switched to mfbt/double-conversion.
- remove nss opening hack in Sync, it works fine without it.
- remove the -rpath hack, not needed since matthew's ld.so fix from 12/06
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_vm_RegExpObject_cpp,v 1.4 2012/06/11 15:29:56 landry Exp $
@


1.4
log
@Update to firefox 13.0.

See https://www.mozilla.org/en-US/firefox/13.0/releasenotes/ for details
- set SEPARATE_BUILD (workarounds #736961)
- cleanup useless dirs (from #717616)
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_vm_RegExpObject_cpp,v 1.3 2012/05/09 20:36:40 landry Exp $
d3 3
a5 3
--- js/src/vm/RegExpObject.cpp.orig	Wed May  2 05:16:54 2012
+++ js/src/vm/RegExpObject.cpp	Wed May  9 23:17:01 2012
@@@@ -167,7 +167,6 @@@@ MatchPairs::checkAgainst(size_t inputLength)
d13 1
a13 1
@@@@ -199,46 +198,9 @@@@ RegExpCode::reportYarrError(JSContext *cx, TokenStream
d60 1
a60 1
@@@@ -255,7 +217,7 @@@@ RegExpCode::compile(JSContext *cx, JSLinearString &pat
d69 1
a69 1
@@@@ -276,21 +238,11 @@@@ RegExpCode::compile(JSContext *cx, JSLinearString &pat
d93 1
a93 1
@@@@ -305,18 +257,11 @@@@ RegExpCode::execute(JSContext *cx, const jschar *chars
@


1.3
log
@Sync patches with what has (finally _o/ \o/ \o_ !) been commited
upstream for bug #691898, fixing build on powerpc (and other non
yarr-jit archs..), see
https://hg.mozilla.org/mozilla-central/rev/f5a3a7b9c6b0
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_vm_RegExpObject_cpp,v 1.2 2012/03/16 21:31:24 landry Exp $
d3 5
a7 5
--- js/src/vm/RegExpObject.cpp.orig	Thu Feb  2 00:39:11 2012
+++ js/src/vm/RegExpObject.cpp	Tue Feb 14 18:50:40 2012
@@@@ -392,7 +392,6 @@@@ Class js::RegExpClass = {
     regexp_trace
 };
d11 1
a11 1
 RegExpPrivateCode::reportYarrError(JSContext *cx, TokenStream *ts, ErrorCode error)
d13 1
a13 2
@@@@ -423,42 +422,6 @@@@ RegExpPrivateCode::reportYarrError(JSContext *cx, Toke
         JS_NOT_REACHED("Unknown Yarr error code");
d16 1
a16 1
-
d20 1
a20 1
-RegExpPrivateCode::reportPCREError(JSContext *cx, int error)
d52 20
d73 40
a112 2
 bool
 js::ParseRegExpFlags(JSContext *cx, JSString *flagStr, RegExpFlag *flagsOut)
@


1.2
log
@Update to firefox 11.0.
- Fixes MFSA 2012-12->19
- see http://www.mozilla.org/en-US/firefox/11.0/releasenotes/
- complete patchset for #691898, still fixes build on ppc (and hopefully
  commited in firefox 14...)
- add patchset from #706955, workarounds #669050 (xpcshell hangs during
  make install and chokes on CSPUtils.csm, threads related..)
- remove obsolete/commited patches
@
text
@d1 2
a2 3
$OpenBSD: patch-js_src_vm_RegExpObject_cpp,v 1.1 2012/02/20 20:15:04 landry Exp $
https://bug691898.bugzilla.mozilla.org/attachment.cgi?id=588391
use yarr interpreter on ppc
@


1.1
log
@Update to firefox-10.0.2.

- Fixes MFSA-2012-01..11
- remove patch-gfx_qcms_qcmstypes_h & patch-toolkit_xre_glxtest_cpp,
  were commited upstream (bugs #651444 & #687320)
- remove patch-js_src_xpconnect_src_Makefile_in, dom_quickstubs.cpp hack
  was apparently only needed with gcc3
- remove patch-xpcom_base_nsStackWalk_cpp, codepath not reached/solaris
  only.
- add https://bug691898.bugzilla.mozilla.org/attachment.cgi?id=588391 to
  use yarr interpreter on ppc, bug #691898 still being worked on
- backport https://hg.mozilla.org/mozilla-central/rev/9cfdb612a026, fixes
endianess detection on BSDs using machine/endian.h (bug #714312)
@
text
@d1 1
a1 1
$OpenBSD$
d4 4
a7 4
--- js/src/vm/RegExpObject.cpp.orig	Wed Jan 11 18:14:49 2012
+++ js/src/vm/RegExpObject.cpp	Mon Jan 16 17:07:47 2012
@@@@ -251,7 +251,6 @@@@ Class js::RegExpClass = {
     NULL                     /* trace */
d14 1
a14 1
@@@@ -282,41 +281,6 @@@@ RegExpPrivateCode::reportYarrError(JSContext *cx, Toke
d29 1
a29 1
-      case 0: JS_NOT_REACHED("Precondition violation: an error must have occurred."); 
d31 1
a31 1
-      case 2: REPORT(JSMSG_TRAILING_SLASH); 
d52 1
@

