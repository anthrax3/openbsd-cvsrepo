head	1.6;
access;
symbols
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2012.09.01.13.56.45;	author landry;	state dead;
branches;
next	1.5;

1.5
date	2012.06.11.15.29.56;	author landry;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.09.20.36.40;	author landry;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.30.15.28.42;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.16.21.31.24;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.20.20.15.04;	author landry;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to firefox 15.0.

- see http://www.mozilla.org/en-US/firefox/15.0/releasenotes/
- add -Os hack to fix a relocation error when linking on ppc (as was
  done in tb since 10..)
- garbage collect nsSound.cpp, the original one uses libcanberra
  properly and thus sndio.
- remove patch from #750620, merged upstream (mfbt/double-conversion)
- remove patches from #747257, merged upstream (gstreamer fix)
- remove patches from #691898, merged upstream (yarr jit ppc)
@
text
@$OpenBSD: patch-js_src_vm_RegExpObject-inl_h,v 1.5 2012/06/11 15:29:56 landry Exp $
https://hg.mozilla.org/mozilla-central/rev/f5a3a7b9c6b0
--- js/src/vm/RegExpObject-inl.h.orig	Wed May  2 05:16:54 2012
+++ js/src/vm/RegExpObject-inl.h	Wed May  9 23:14:31 2012
@@@@ -137,6 +137,7 @@@@ RegExpObject::setSticky(bool enabled)
     setSlot(STICKY_FLAG_SLOT, BooleanValue(enabled));
 }
 
+#if ENABLE_YARR_JIT
 /* This function should be deleted once bad Android platforms phase out. See bug 604774. */
 inline bool
 detail::RegExpCode::isJITRuntimeEnabled(JSContext *cx)
@@@@ -147,6 +148,7 @@@@ detail::RegExpCode::isJITRuntimeEnabled(JSContext *cx)
     return true;
 #endif
 }
+#endif
 
 inline bool
 RegExpToShared(JSContext *cx, JSObject &obj, RegExpGuard *g)
@


1.5
log
@Update to firefox 13.0.

See https://www.mozilla.org/en-US/firefox/13.0/releasenotes/ for details
- set SEPARATE_BUILD (workarounds #736961)
- cleanup useless dirs (from #717616)
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_vm_RegExpObject-inl_h,v 1.4 2012/05/09 20:36:40 landry Exp $
@


1.4
log
@Sync patches with what has (finally _o/ \o/ \o_ !) been commited
upstream for bug #691898, fixing build on powerpc (and other non
yarr-jit archs..), see
https://hg.mozilla.org/mozilla-central/rev/f5a3a7b9c6b0
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_vm_RegExpObject-inl_h,v 1.3 2012/04/30 15:28:42 landry Exp $
d3 4
a6 4
--- js/src/vm/RegExpObject-inl.h.orig	Wed Apr 11 15:55:04 2012
+++ js/src/vm/RegExpObject-inl.h	Wed Apr 18 22:09:15 2012
@@@@ -357,6 +357,7 @@@@ detail::RegExpPrivate::create(JSContext *cx, JSLinearS
     return RetType(priv);
d12 2
a13 2
 detail::RegExpPrivateCode::isJITRuntimeEnabled(JSContext *cx)
@@@@ -367,12 +368,12 @@@@ detail::RegExpPrivateCode::isJITRuntimeEnabled(JSConte
d20 1
a20 60
 detail::RegExpPrivateCode::compile(JSContext *cx, JSLinearString &pattern, TokenStream *ts,
                                    uintN *parenCount, RegExpFlag flags)
 {
-#if ENABLE_YARR_JIT
     /* Parse the pattern. */
     ErrorCode yarrError;
     YarrPattern yarrPattern(pattern, bool(flags & IgnoreCaseFlag), bool(flags & MultilineFlag),
@@@@ -389,7 +390,7 @@@@ detail::RegExpPrivateCode::compile(JSContext *cx, JSLi
      * case we have to bytecode compile it.
      */
 
-#ifdef JS_METHODJIT
+#if ENABLE_YARR_JIT && defined(JS_METHODJIT)
     if (isJITRuntimeEnabled(cx) && !yarrPattern.m_containsBackreferences) {
         JSC::ExecutableAllocator *execAlloc = cx->runtime->getExecutableAllocator(cx);
         if (!execAlloc) {
@@@@ -410,21 +411,11 @@@@ detail::RegExpPrivateCode::compile(JSContext *cx, JSLi
         return false;
     }
 
+#if ENABLE_YARR_JIT
     codeBlock.setFallBack(true);
+#endif
     byteCode = byteCompile(yarrPattern, bumpAlloc).get();
     return true;
-#else /* !defined(ENABLE_YARR_JIT) */
-    int error = 0;
-    compiled = jsRegExpCompile(pattern.chars(), pattern.length(),
-                  ignoreCase() ? JSRegExpIgnoreCase : JSRegExpDoNotIgnoreCase,
-                  multiline() ? JSRegExpMultiline : JSRegExpSingleLine,
-                  parenCount, &error);
-    if (error) {
-        reportPCREError(cx, error);
-        return false;
-    }
-    return true;
-#endif
 }
 
 inline bool
@@@@ -466,18 +457,11 @@@@ detail::RegExpPrivateCode::execute(JSContext *cx, cons
     else
         result = JSC::Yarr::execute(codeBlock, chars, start, length, output);
 #else
-    result = jsRegExpExecute(cx, compiled, chars, length, start, output, outputCount);
+    result = JSC::Yarr::interpret(byteCode, chars, start, length, output);
 #endif
 
     if (result == -1)
         return RegExpRunStatus_Success_NotFound;
-
-#if !ENABLE_YARR_JIT
-    if (result < 0) {
-        reportPCREError(cx, result);
-        return RegExpRunStatus_Error;
-    }
-#endif
 
     JS_ASSERT(result >= 0);
     return RegExpRunStatus_Success;
@


1.3
log
@Update to firefox 12.0.

- see http://www.mozilla.org/en-US/firefox/12.0/releasenotes/ for details
- two patches moved (patch-widget_src_xpwidgets_nsPrintSettingsImpl_cpp
  and patch-widget_src_gtk2_Makefile_in)
- add two new patches for bug #691898 (patch-js_src_jsapi_cpp and
  /patch-js_src_jsprvtd_h)
- add patch-gfx_thebes_gfxPlatform_cpp to workaround regression
  introduced in bug #715658, which prevents one from building against
systemwide cairo.
- patch-extensions_auth_nsAuthGSSAPI_cpp from bug #667325 got merged
- patch-js_src_js-config_h_in and patch-js_src_jscpucfg_h from #714312 got
  merged
- patch-ipc_chromium_src_base_dir_reader_posix_ -from #714315 got merged
@
text
@d1 2
a2 3
$OpenBSD: patch-js_src_vm_RegExpObject-inl_h,v 1.2 2012/03/16 21:31:24 landry Exp $
https://bug691898.bugzilla.mozilla.org/attachment.cgi?id=588391
use yarr interpreter on ppc
@


1.2
log
@Update to firefox 11.0.
- Fixes MFSA 2012-12->19
- see http://www.mozilla.org/en-US/firefox/11.0/releasenotes/
- complete patchset for #691898, still fixes build on ppc (and hopefully
  commited in firefox 14...)
- add patchset from #706955, workarounds #669050 (xpcshell hangs during
  make install and chokes on CSPUtils.csm, threads related..)
- remove obsolete/commited patches
@
text
@d1 1
a1 1
$OpenBSD: patch-js_src_vm_RegExpObject-inl_h,v 1.1 2012/02/20 20:15:04 landry Exp $
d4 3
a6 3
--- js/src/vm/RegExpObject-inl.h.orig	Thu Feb  2 00:39:11 2012
+++ js/src/vm/RegExpObject-inl.h	Tue Feb 14 18:49:53 2012
@@@@ -367,6 +367,7 @@@@ detail::RegExpPrivate::create(JSContext *cx, JSLinearS
d14 1
a14 1
@@@@ -377,12 +378,12 @@@@ detail::RegExpPrivateCode::isJITRuntimeEnabled(JSConte
d28 1
a28 1
@@@@ -399,7 +400,7 @@@@ detail::RegExpPrivateCode::compile(JSContext *cx, JSLi
d35 1
a35 1
         JSC::ExecutableAllocator *execAlloc = cx->threadData()->getOrCreateExecutableAllocator(cx);
d37 1
a37 1
@@@@ -420,21 +421,11 @@@@ detail::RegExpPrivateCode::compile(JSContext *cx, JSLi
d61 1
a61 1
@@@@ -476,18 +467,11 @@@@ detail::RegExpPrivateCode::execute(JSContext *cx, cons
@


1.1
log
@Update to firefox-10.0.2.

- Fixes MFSA-2012-01..11
- remove patch-gfx_qcms_qcmstypes_h & patch-toolkit_xre_glxtest_cpp,
  were commited upstream (bugs #651444 & #687320)
- remove patch-js_src_xpconnect_src_Makefile_in, dom_quickstubs.cpp hack
  was apparently only needed with gcc3
- remove patch-xpcom_base_nsStackWalk_cpp, codepath not reached/solaris
  only.
- add https://bug691898.bugzilla.mozilla.org/attachment.cgi?id=588391 to
  use yarr interpreter on ppc, bug #691898 still being worked on
- backport https://hg.mozilla.org/mozilla-central/rev/9cfdb612a026, fixes
endianess detection on BSDs using machine/endian.h (bug #714312)
@
text
@d1 1
a1 1
$OpenBSD$
d4 4
a7 4
--- js/src/vm/RegExpObject-inl.h.orig	Wed Jan 11 18:14:49 2012
+++ js/src/vm/RegExpObject-inl.h	Mon Jan 16 17:07:47 2012
@@@@ -327,6 +327,7 @@@@ RegExpPrivate::create(JSContext *cx, JSString *source,
     return RetType(self);
d13 2
a14 2
 RegExpPrivateCode::isJITRuntimeEnabled(JSContext *cx)
@@@@ -337,12 +338,12 @@@@ RegExpPrivateCode::isJITRuntimeEnabled(JSContext *cx)
d21 2
a22 2
 RegExpPrivateCode::compile(JSContext *cx, JSLinearString &pattern, TokenStream *ts,
                            uintN *parenCount, RegExpFlag flags)
d28 1
a28 1
@@@@ -359,7 +360,7 @@@@ RegExpPrivateCode::compile(JSContext *cx, JSLinearStri
d35 4
a38 3
         if (!cx->compartment->ensureJaegerCompartmentExists(cx))
             return false;
@@@@ -371,21 +372,11 @@@@ RegExpPrivateCode::compile(JSContext *cx, JSLinearStri
a39 1
 #endif
d44 1
a44 1
     byteCode = byteCompile(yarrPattern, cx->compartment->regExpAllocator).get();
d61 1
a61 1
@@@@ -431,18 +422,11 @@@@ RegExpPrivateCode::execute(JSContext *cx, const jschar
d70 1
a70 1
         return Success_NotFound;
d75 1
a75 1
-        return Error;
d80 1
a80 1
     return Success;
@

