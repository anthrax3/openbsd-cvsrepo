head	1.1;
access;
symbols
	OPENBSD_5_7:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.06.24.16.00.21;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	z61O6mnKXiVKXSNW;

1.1.2.1
date	2015.06.24.16.00.21;	author jasper;	state Exp;
branches;
next	;
commitid	z61O6mnKXiVKXSNW;


desc
@@


1.1
log
@file patch-lib_rack_utils_rb was initially added on branch OPENBSD_5_7.
@
text
@@


1.1.2.1
log
@security fix for cve-2015-3225, Potential Denial of Service Vulnerability in Rack

ok jeremy@@ (MAINTAINER)
@
text
@a0 55
$OpenBSD$

Security fix for CVE-2015-3225
http://seclists.org/oss-sec/2015/q2/729

--- lib/rack/utils.rb.orig	Thu Dec 18 23:39:06 2014
+++ lib/rack/utils.rb	Wed Jun 24 17:18:47 2015
@@@@ -61,6 +61,7 @@@@ module Rack
 
     class << self
       attr_accessor :key_space_limit
+      attr_accessor :param_depth_limit
       attr_accessor :multipart_part_limit
     end
 
@@@@ -68,6 +69,10 @@@@ module Rack
     # This helps prevent a rogue client from flooding a Request.
     self.key_space_limit = 65536
 
+    # Default depth at which the parameter parser will raise an exception for
+    # being too deep.  This helps prevent SystemStackErrors
+    self.param_depth_limit = 100
+
     # The maximum number of parts a request can contain. Accepting too many part
     # can lead to the server running out of file handles.
     # Set to `0` for no limit.
@@@@ -125,7 +130,9 @@@@ module Rack
     # normalize_params recursively expands parameters into structural types. If
     # the structural types represented by two different parameter names are in
     # conflict, a ParameterTypeError is raised.
-    def normalize_params(params, name, v = nil)
+    def normalize_params(params, name, v = nil, depth = Utils.param_depth_limit)
+      raise RangeError if depth <= 0
+
       name =~ %r(\A[\[\]]*([^\[\]]+)\]*)
       k = $1 || ''
       after = $' || ''
@@@@ -145,14 +152,14 @@@@ module Rack
         params[k] ||= []
         raise ParameterTypeError, "expected Array (got #{params[k].class.name}) for param `#{k}'" unless params[k].is_a?(Array)
         if params_hash_type?(params[k].last) && !params[k].last.key?(child_key)
-          normalize_params(params[k].last, child_key, v)
+          normalize_params(params[k].last, child_key, v, depth - 1)
         else
-          params[k] << normalize_params(params.class.new, child_key, v)
+          params[k] << normalize_params(params.class.new, child_key, v, depth - 1)
         end
       else
         params[k] ||= params.class.new
         raise ParameterTypeError, "expected Hash (got #{params[k].class.name}) for param `#{k}'" unless params_hash_type?(params[k])
-        params[k] = normalize_params(params[k], after, v)
+        params[k] = normalize_params(params[k], after, v, depth - 1)
       end
 
       return params
@

