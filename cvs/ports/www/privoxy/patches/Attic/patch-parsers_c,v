head	1.1;
access;
symbols
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.01.30.15.26.41;	author jasper;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	DKFvoNzy14wiM9Uy;

1.1.2.1
date	2015.01.30.15.26.41;	author jasper;	state Exp;
branches;
next	;
commitid	DKFvoNzy14wiM9Uy;

1.1.4.1
date	2016.01.27.11.03.41;	author jasper;	state Exp;
branches;
next	;
commitid	ofOqqwtZETbvjlDq;


desc
@@


1.1
log
@file patch-parsers_c was initially added on branch OPENBSD_5_6.
@
text
@@


1.1.4.1
log
@Security fixes for:
CVE-2016-1982 (invalid reads in case of corrupt chunk-encoded content) and
CVE-2016-1983 (invalid reads with empty Host headers).
@
text
@a0 21
$OpenBSD$

Security fix for CVE-2016-1983
privoxy: invalid read via empty host header in client request
http://seclists.org/oss-sec/2016/q1/179

--- parsers.c.orig	Wed Jan 27 11:58:44 2016
+++ parsers.c	Wed Jan 27 11:59:22 2016
@@@@ -3285,6 +3285,12 @@@@ static jb_err client_host(struct client_state *csp, ch
 {
    char *p, *q;
 
+   if (strlen(*header) < 7)
+   {
+      log_error(LOG_LEVEL_HEADER, "Removing empty Host header");
+      freez(*header);
+      return JB_ERR_OK;
+   }
    if (!csp->http->hostport || (*csp->http->hostport == '*') ||
        *csp->http->hostport == ' ' || *csp->http->hostport == '\0')
    {
@


1.1.2.1
log
@Security fixes for CVE-2015-138{0,1,2}

ok jca@@ sthen@@
@
text
@a0 92
$OpenBSD$

Security fix for CVE-2015-1382
http://ijbswa.cvs.sourceforge.net/viewvc/ijbswa/current/parsers.c?r1=1.297&r2=1.298

--- parsers.c.orig	Thu Mar  7 15:08:50 2013
+++ parsers.c	Fri Jan 30 14:37:30 2015
@@@@ -96,6 +96,7 @@@@ static char *get_header_line(struct iob *iob);
 static jb_err scan_headers(struct client_state *csp);
 static jb_err header_tagger(struct client_state *csp, char *header);
 static jb_err parse_header_time(const char *header_time, time_t *result);
+static jb_err parse_time_header(const char *header, time_t *result);
 
 static jb_err crumble                   (struct client_state *csp, char **header);
 static jb_err filter_header             (struct client_state *csp, char **header);
@@@@ -2666,13 +2667,12 @@@@ static jb_err server_last_modified(struct client_state
    }
    else if (0 == strcmpic(newval, "randomize"))
    {
-      const char *header_time = *header + sizeof("Last-Modified:");
-
       log_error(LOG_LEVEL_HEADER, "Randomizing: %s", *header);
 
-      if (JB_ERR_OK != parse_header_time(header_time, &last_modified))
+      if (JB_ERR_OK != parse_time_header(*header, &last_modified))
       {
-         log_error(LOG_LEVEL_HEADER, "Couldn't parse: %s in %s (crunching!)", header_time, *header);
+         log_error(LOG_LEVEL_HEADER,
+            "Couldn't parse time in %s (crunching!)", *header);
          freez(*header);
       }
       else
@@@@ -3384,11 +3384,10 @@@@ static jb_err client_if_modified_since(struct client_s
       }
       else /* add random value */
       {
-         const char *header_time = *header + sizeof("If-Modified-Since:");
-
-         if (JB_ERR_OK != parse_header_time(header_time, &tm))
+         if (JB_ERR_OK != parse_time_header(*header, &tm))
          {
-            log_error(LOG_LEVEL_HEADER, "Couldn't parse: %s in %s (crunching!)", header_time, *header);
+            log_error(LOG_LEVEL_HEADER,
+               "Couldn't parse time in %s (crunching!)", *header);
             freez(*header);
          }
          else
@@@@ -4369,6 +4368,44 @@@@ jb_err get_destination_from_headers(const struct list 
       http->url);
 
    return JB_ERR_OK;
+
+}
+
+/*********************************************************************
+ *
+ * Function    :  parse_time_header
+ *
+ * Description :  Parses the time in an HTTP time header to get
+ *                the numerical respresentation.
+ *
+ * Parameters  :
+ *          1  :  header = HTTP header with a time value
+ *          2  :  result = storage for header_time in seconds
+ *
+ * Returns     :  JB_ERR_OK if the time format was recognized, or
+ *                JB_ERR_PARSE otherwise.
+ *
+ *********************************************************************/
+static jb_err parse_time_header(const char *header, time_t *result)
+{
+   const char *header_time;
+
+   header_time = strchr(header, ':');
+
+   /*
+    * Currently this can't happen as all callers are called
+    * through sed() which requires a header name followed by
+    * a colon.
+    */
+   assert(header_time != NULL);
+
+   header_time++;
+   if (*header_time == ' ')
+   {
+      header_time++;
+   }
+
+   return parse_header_time(header_time, result);
 
 }
 
@

