head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.20
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.18
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.10.18.17.17.55;	author stsp;	state dead;
branches;
next	1.1;

1.1
date	2008.11.09.18.26.03;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove www/mod_dav. It has been unmaintained since 2000 when the code was moved
to apache.org. Users should migrate to www/apache-httpd and its mod_dav which
is the actively maintained descendent of the original mod_dav.
ok sthen jung
@
text
@--- dav_fs_repos.c~	2008-07-17 10:39:21.000000000 -0700
+++ dav_fs_repos.c	2008-07-18 08:37:40.000000000 -0700
@@@@ -47,6 +47,11 @@@@ struct dav_resource_private {
     pool *pool;             /* memory storage pool associated with request */
     const char *pathname;   /* full pathname to resource */
     struct stat finfo;      /* filesystem info */
+    /* additional values needed by dav_fs_getetag() */
+    time_t request_time;
+    time_t mtime;
+    void *per_dir_config;
+    table *notes;
 };
 
 /* private context for doing a filesystem walk */
@@@@ -567,6 +572,12 @@@@ static dav_resource * dav_fs_get_resourc
 
     (void) ap_update_mtime(r, r->finfo.st_mtime);
 
+    /* additional values needed by dav_fs_getetag() */
+    ctx->request_time = r->request_time;
+    ctx->mtime = r->mtime;
+    ctx->per_dir_config = r->per_dir_config;
+    ctx->notes = r->notes;
+
     /* Preserve case on OSes which fold canonical filenames */
 #if MODULE_MAGIC_NUMBER_MAJOR > 19990320 || (MODULE_MAGIC_NUMBER_MAJOR == 19990320 && MODULE_MAGIC_NUMBER_MINOR >= 8)
     filename = r->case_preserved_filename;
@@@@ -1664,7 +1675,7 @@@@ static dav_error * dav_fs_walk(dav_walke
  *    for file path.
  * ### do we need to return weak tags sometimes?
  */
-static const char *dav_fs_getetag(const dav_resource *resource)
+static const char *dav_fs_getetag_orig(const dav_resource *resource)
 {
     dav_resource_private *ctx = resource->info;
 
@@@@ -1681,6 +1692,24 @@@@ static const char *dav_fs_getetag(const 
     return ap_psprintf(ctx->pool, "\"%lx\"", (unsigned long) ctx->finfo.st_mtime);
 }
 
+static const char *dav_fs_getetag(const dav_resource *resource)
+{
+    dav_resource_private *ctx = resource->info;
+    request_rec r;
+
+    if (!resource->exists)
+        return ap_pstrdup(ctx->pool, "");
+
+    r.pool = ctx->pool;
+    r.request_time = ctx->request_time;
+    r.finfo = ctx->finfo;
+    r.mtime = ctx->mtime;
+    r.per_dir_config = ctx->per_dir_config;
+    r.notes = ctx->notes;
+
+    return ap_make_etag(&r, 0);
+}
+
 static const dav_hooks_repository dav_hooks_repository_fs =
 {
     DEBUG_GET_HANDLER,   /* normally: special GET handling not required */
@


1.1
log
@fix etag generation incompatibility; from Jason Oster
@
text
@@

