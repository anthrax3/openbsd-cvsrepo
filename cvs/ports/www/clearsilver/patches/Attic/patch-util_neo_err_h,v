head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.28
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.30
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.26
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.24
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.22
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.20
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.18
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.16
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.14
	OPENBSD_5_0:1.4.0.12
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2017.03.24.15.21.46;	author okan;	state dead;
branches;
next	1.5;
commitid	nWqCMAZ7YaZlqVmp;

1.5
date	2016.04.28.15.34.14;	author sthen;	state Exp;
branches;
next	1.4;
commitid	JG8H3j1Ikempr0RH;

1.4
date	2008.11.18.20.00.09;	author okan;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.11.19.58.15;	author okan;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.15.17.08.43;	author fkr;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.28.12.48.49;	author markus;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Unhook games/sudoku-solver and www/clearsilver; clearsilver being abandoned
upstream and Marc Balmer (original auther) agrees with removing the only
dependent port, sudoku-solver.

ok many and sthen@@
@
text
@--- util/neo_err.h.orig	Thu Dec 15 22:17:36 2005
+++ util/neo_err.h	Thu Apr 28 16:33:48 2016
@@@@ -105,7 +105,7 @@@@ NEOERR *nerr_raise_errnof (const char *func, const cha
 #define nerr_pass(e) \
    nerr_passf(__PRETTY_FUNCTION__,__FILE__,__LINE__,e)
 NEOERR *nerr_passf (const char *func, const char *file, int lineno, 
-                    NEOERR *err);
+                    NEOERR *nerr);
 
 /* function: nerr_pass_ctx
  * description: this function is used to pass an error up a level in the
@@@@ -127,47 +127,47 @@@@ NEOERR *nerr_passf (const char *func, const char *file
 #define nerr_pass_ctx(e,f,...) \
    nerr_pass_ctxf(__PRETTY_FUNCTION__,__FILE__,__LINE__,e,f,__VA_ARGS__)
 #endif
-NEOERR *nerr_pass_ctxf (const char *func, const char *file, int lineno, NEOERR *err, 
+NEOERR *nerr_pass_ctxf (const char *func, const char *file, int lineno, NEOERR *nerr, 
                        const char *fmt, ...);
 
 /* function: nerr_log_error
  * description: currently, this prints out the error to stderr, and
  *             free's the error chain
  */
-void nerr_log_error (NEOERR *err);
+void nerr_log_error (NEOERR *nerr);
 
 #include "util/neo_str.h"
 /* function: nerr_error_string
  * description: returns the string associated with an error (the bottom
  *              level of the error chain)
- * arguments: err - error
+ * arguments: nerr - error
  *            str - string to which the data is appended
  * returns: None - errors appending to the string are ignored
  */
-void nerr_error_string (NEOERR *err, STRING *str);
+void nerr_error_string (NEOERR *nerr, STRING *str);
 
 /* function: nerr_error_traceback
  * description: returns the full traceback of the error chain
- * arguments: err - error
+ * arguments: nerr - error
  *            str - string to which the data is appended
  * returns: None - errors appending to the string are ignored
  */
-void nerr_error_traceback (NEOERR *err, STRING *str);
+void nerr_error_traceback (NEOERR *nerr, STRING *str);
 
 /* function: nerr_ignore
  * description: you should only call this if you actually handle the
  *              error (should I rename it?).  Free's the error chain.
  */
-void nerr_ignore (NEOERR **err);
+void nerr_ignore (NEOERR **nerr);
 
 /* function: nerr_register
  * description: register an error type.  This will assign a numeric value
  *              to the type, and keep track of the "pretty name" for it.
- * arguments: err - pointer to a NERR_TYPE
+ * arguments: nerr - pointer to a NERR_TYPE
  *            name - pretty name for the error type 
  * returns: NERR_NOMEM on no memory
  */
-NEOERR *nerr_register (NERR_TYPE *err, const char *name);
+NEOERR *nerr_register (NERR_TYPE *nerr, const char *name);
 
 /* function: nerr_init
  * description: initialize the NEOERR system.  Can be called more than once.
@@@@ -186,21 +186,21 @@@@ NEOERR *nerr_init (void);
  *              parlance, this would be the equivalent of "catch".
  *              Typically, you can just compare a NEOERR against STATUS_OK
  *              or just test for true if you are checking for any error.
- * arguments: err - the NEOERR that has an error. 
+ * arguments: nerr - the NEOERR that has an error. 
  *            type - the NEOERR type, as registered with nerr_register
  * returns: true on match
  */
-int nerr_match (NEOERR *err, NERR_TYPE type);
+int nerr_match (NEOERR *nerr, NERR_TYPE type);
 
 /* function: nerr_handle
  * description: nerr_handle is a convenience function.  It is the equivalent
  *              of nerr_match, but it will also deallocate the error chain
  *              on a match.
- * arguments: err - pointer to a pointer NEOERR 
+ * arguments: nerr - pointer to a pointer NEOERR 
  *            type - the NEOERR type, as registered with nerr_register
  * returns: true on match
  */
-int nerr_handle (NEOERR **err, NERR_TYPE type);
+int nerr_handle (NEOERR **nerr, NERR_TYPE type);
 
 __END_DECLS
 
@


1.5
log
@regen; no real changes
@
text
@@


1.4
log
@backout 0.10.5 update due incompatible license (apache 1 -> apache 2) change

requested by mbalmer@@
@
text
@d1 3
a3 3
--- util/neo_err.h.orig	Thu Dec 15 23:17:36 2005
+++ util/neo_err.h	Mon May  8 16:54:19 2006
@@@@ -105,7 +105,7 @@@@ NEOERR *nerr_raise_errnof (const char *f
d12 1
a12 1
@@@@ -127,47 +127,47 @@@@ NEOERR *nerr_passf (const char *func, co
@


1.3
log
@- update to 0.10.5
- more str* and 64bit fixes
- update license marker

ok markus (MAINTAINER)
@
text
@d1 4
a4 3
--- util/neo_err.h.orig	Wed Jul 11 23:09:09 2007
+++ util/neo_err.h	Thu Jun 26 13:53:40 2008
@@@@ -122,7 +122,7 @@@@ NEOERR *nerr_raise_errnof (const char *func, const cha
d6 1
a6 2
 
 NEOERR *nerr_passf (const char *func, const char *file, int lineno,
d12 3
a14 1
@@@@ -146,24 +146,24 @@@@ NEOERR *nerr_passf (const char *func, const char *file
d16 3
a18 5
 
 NEOERR *nerr_pass_ctxf (const char *func, const char *file, int lineno,
-                        NEOERR *err, const char *fmt, ...)
+                        NEOERR *nerr, const char *fmt, ...)
                         ATTRIBUTE_PRINTF(5,6);
d41 2
a42 1
@@@@ -171,13 +171,13 @@@@ void nerr_error_string (NEOERR *err, STRING *str);
d58 4
a61 2
@@@@ -186,7 +186,7 @@@@ void nerr_ignore (NEOERR **err);
  *            name - pretty name for the error type
d69 6
a74 1
@@@@ -209,7 +209,7 @@@@ NEOERR *nerr_init (void);
d83 4
a86 1
@@@@ -219,7 +219,7 @@@@ int nerr_match (NEOERR *err, NERR_TYPE type);
@


1.2
log
@update to version 0.10.3
ok mbalmer@@, markus@@ (maintainer)
@
text
@d1 3
a3 4
--- util/neo_err.h.orig	Thu Dec 15 23:17:36 2005
+++ util/neo_err.h	Mon May  8 16:54:19 2006
@@@@ -105,7 +105,7 @@@@ NEOERR *nerr_raise_errnof (const char *f
 #define nerr_pass(e) \
d5 2
a6 1
 NEOERR *nerr_passf (const char *func, const char *file, int lineno, 
d12 1
a12 3
@@@@ -127,47 +127,47 @@@@ NEOERR *nerr_passf (const char *func, co
 #define nerr_pass_ctx(e,f,...) \
    nerr_pass_ctxf(__PRETTY_FUNCTION__,__FILE__,__LINE__,e,f,__VA_ARGS__)
d14 5
a18 3
-NEOERR *nerr_pass_ctxf (const char *func, const char *file, int lineno, NEOERR *err, 
+NEOERR *nerr_pass_ctxf (const char *func, const char *file, int lineno, NEOERR *nerr, 
                        const char *fmt, ...);
d41 1
a41 2
- * arguments: err - error
+ * arguments: nerr - error
d57 2
a58 4
  *              to the type, and keep track of the "pretty name" for it.
- * arguments: err - pointer to a NERR_TYPE
+ * arguments: nerr - pointer to a NERR_TYPE
  *            name - pretty name for the error type 
d66 1
a66 6
@@@@ -186,21 +186,21 @@@@ NEOERR *nerr_init (void);
  *              parlance, this would be the equivalent of "catch".
  *              Typically, you can just compare a NEOERR against STATUS_OK
  *              or just test for true if you are checking for any error.
- * arguments: err - the NEOERR that has an error. 
+ * arguments: nerr - the NEOERR that has an error. 
d75 1
a75 4
  *              of nerr_match, but it will also deallocate the error chain
  *              on a match.
- * arguments: err - pointer to a pointer NEOERR 
+ * arguments: nerr - pointer to a pointer NEOERR 
@


1.1
log
@fix compiler warnings and replace strcpy & friends, ok fgs, sturm
@
text
@d1 3
a3 5
$OpenBSD$
--- util/neo_err.h.orig	Thu Nov 11 01:45:46 2004
+++ util/neo_err.h	Tue Oct 25 10:34:51 2005
@@@@ -88,7 +88,7 @@@@ NEOERR *nerr_raise_errnof (const char *f
  */
d6 3
a8 2
-NEOERR *nerr_passf (const char *func, const char *file, int lineno, NEOERR *err);
+NEOERR *nerr_passf (const char *func, const char *file, int lineno, NEOERR *nerr);
d12 4
a15 4
@@@@ -105,47 +105,47 @@@@ NEOERR *nerr_passf (const char *func, co
  */
 #define nerr_pass_ctx(e,f,a...) \
    nerr_pass_ctxf(__PRETTY_FUNCTION__,__FILE__,__LINE__,e,f,##a)
d69 1
a69 1
@@@@ -164,21 +164,21 @@@@ NEOERR *nerr_init (void);
@

