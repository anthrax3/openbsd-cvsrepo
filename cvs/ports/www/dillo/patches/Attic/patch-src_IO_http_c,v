head	1.11;
access;
symbols
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.9.0.16
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.14
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2009.09.29.07.38.36;	author benoit;	state dead;
branches;
next	1.10;

1.10
date	2008.10.19.08.42.55;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2004.12.04.20.44.27;	author couderc;	state Exp;
branches;
next	1.8;

1.8
date	2004.02.21.01.37.19;	author couderc;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.04.18.33.59;	author couderc;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.28.18.20.53;	author couderc;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.19.14.41.02;	author couderc;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.18.15.53.18;	author couderc;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.31.10.21.36;	author couderc;	state dead;
branches;
next	1.2;

1.2
date	2002.05.02.19.16.25;	author couderc;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.02.02.28.00;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.11
log
@- update dillo to 2.1.1
- change maintainer
- enable ssl
- regen plist & patches

ok ajacoutot@@, sthen@@
@
text
@$OpenBSD: patch-src_IO_http_c,v 1.10 2008/10/19 08:42:55 ajacoutot Exp $
--- src/IO/http.c.orig	Sun Sep 28 14:57:42 2008
+++ src/IO/http.c	Sat Oct 18 22:26:06 2008
@@@@ -311,7 +311,7 @@@@ static void Http_send_query(ChainLink *Info, SocketDat
  */
 static int Http_connect_socket(ChainLink *Info)
 {
-   int status;
+   int i, status;
 #ifdef ENABLE_IPV6
    struct sockaddr_in6 name;
 #else
@@@@ -324,61 +324,63 @@@@ static int Http_connect_socket(ChainLink *Info)
    S = a_Klist_get_data(ValidSocks, VOIDP2INT(Info->LocalKey));
 
    /* TODO: iterate this address list until success, or end-of-list */
-   dh = dList_nth_data(S->addr_list, 0);
+   for (i = 0; (dh = dList_nth_data(S->addr_list, i)); ++i) {
+      if ((S->SockFD = socket(dh->af, SOCK_STREAM, IPPROTO_TCP)) < 0) {
+         S->Err = errno;
+         MSG("Http_connect_socket ERROR: %s\n", dStrerror(errno));
+         continue;
+      }
+      /* set NONBLOCKING and close on exec. */
+      fcntl(S->SockFD, F_SETFL, O_NONBLOCK | fcntl(S->SockFD, F_GETFL));
+      fcntl(S->SockFD, F_SETFD, FD_CLOEXEC | fcntl(S->SockFD, F_GETFD));
 
-   if ((S->SockFD = socket(dh->af, SOCK_STREAM, IPPROTO_TCP)) < 0) {
-      S->Err = errno;
-      MSG("Http_connect_socket ERROR: %s\n", dStrerror(errno));
-      return -1;
-   }
-   /* set NONBLOCKING and close on exec. */
-   fcntl(S->SockFD, F_SETFL, O_NONBLOCK | fcntl(S->SockFD, F_GETFL));
-   fcntl(S->SockFD, F_SETFD, FD_CLOEXEC | fcntl(S->SockFD, F_GETFD));
-
-   /* Some OSes require this...  */
-   memset(&name, 0, sizeof(name));
-   /* Set remaining parms. */
-   switch (dh->af) {
-   case AF_INET:
-   {
-      struct sockaddr_in *sin = (struct sockaddr_in *)&name;
-      socket_len = sizeof(struct sockaddr_in);
-      sin->sin_family = dh->af;
-      sin->sin_port = S->port ? htons(S->port) : htons(DILLO_URL_HTTP_PORT);
-      memcpy(&sin->sin_addr, dh->data, (size_t)dh->alen);
-      if (a_Web_valid(S->web) && (S->web->flags & WEB_RootUrl))
-         MSG("Connecting to %s\n", inet_ntoa(sin->sin_addr));
-      break;
-   }
+      /* Some OSes require this...  */
+      memset(&name, 0, sizeof(name));
+      /* Set remaining parms. */
+      switch (dh->af) {
+      case AF_INET:
+      {
+         struct sockaddr_in *sin = (struct sockaddr_in *)&name;
+         socket_len = sizeof(struct sockaddr_in);
+         sin->sin_family = dh->af;
+         sin->sin_len = socket_len;
+         sin->sin_port = S->port ? htons(S->port) : htons(DILLO_URL_HTTP_PORT);
+         memcpy(&sin->sin_addr, dh->data, (size_t)dh->alen);
+         if (a_Web_valid(S->web) && (S->web->flags & WEB_RootUrl))
+            MSG("Connecting to %s\n", inet_ntoa(sin->sin_addr));
+         break;
+      }
 #ifdef ENABLE_IPV6
-   case AF_INET6:
-   {
-      char buf[128];
-      struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)&name;
-      socket_len = sizeof(struct sockaddr_in6);
-      sin6->sin6_family = dh->af;
-      sin6->sin6_port = S->port ? htons(S->port) : htons(DILLO_URL_HTTP_PORT);
-      memcpy(&sin6->sin6_addr, dh->data, dh->alen);
-      inet_ntop(dh->af, dh->data, buf, sizeof(buf));
-      if (a_Web_valid(S->web) && (S->web->flags & WEB_RootUrl))
-         MSG("Connecting to %s\n", buf);
-      break;
-   }
+      case AF_INET6:
+      {
+         char buf[128];
+         struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)&name;
+         socket_len = sizeof(struct sockaddr_in6);
+         sin6->sin6_family = dh->af;
+         sin6->sin6_port = S->port ? htons(S->port) : htons(DILLO_URL_HTTP_PORT);
+         sin6->sin6_len = socket_len;
+         memcpy(&sin6->sin6_addr, dh->data, dh->alen);
+         inet_ntop(dh->af, dh->data, buf, sizeof(buf));
+         if (a_Web_valid(S->web) && (S->web->flags & WEB_RootUrl))
+            MSG("Connecting to %s\n", buf);
+         break;
+      }
 #endif
-   }/*switch*/
+      }/*switch*/
 
-   MSG_BW(S->web, 1, "Contacting host...");
-   status = connect(S->SockFD, (struct sockaddr *)&name, socket_len);
-   if (status == -1 && errno != EINPROGRESS) {
-      S->Err = errno;
-      Http_socket_close(S);
-      MSG("Http_connect_socket ERROR: %s\n", dStrerror(S->Err));
-      return -1;
-   } else {
-      Http_send_query(S->Info, S);
+      MSG_BW(S->web, 1, "Contacting host...");
+      status = connect(S->SockFD, (struct sockaddr *)&name, socket_len);
+      if (status == -1 && errno != EINPROGRESS) {
+         S->Err = errno;
+         Http_socket_close(S);
+         MSG("Http_connect_socket ERROR: %s\n", dStrerror(S->Err));
+      } else {
+         Http_send_query(S->Info, S);
+         return 0; /* Success */
+      }
    }
 
-   return 0; /* Success */
+   return -1;
 }
 
 /*
@


1.10
log
@- major upgrade to dillo 2.0
it now uses the fltk2 toolkit instead of gtk1
add a patch to fix accessing websites that have ipv6 addr while you don't

full changelog:
http://cvs.auriga.wearlab.de/cgi-bin/cvsweb.cgi/dillo2/ChangeLog?rev=HEAD;cvsroot=dillo

from new MAINTAINER James Turner (former maintainer Jim Uhl resigned)
requested by kili@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_IO_http_c,v 1.9 2004/12/04 20:44:27 couderc Exp $
@


1.9
log
@update to 0.8.3, based on a diff from Chris Kuethe.
@
text
@d1 125
a125 19
$OpenBSD$
--- src/IO/http.c.orig	Wed Oct  6 19:09:44 2004
+++ src/IO/http.c	Sat Dec  4 19:28:46 2004
@@@@ -316,6 +316,7 @@@@ static int Http_connect_socket(ChainLink
       struct sockaddr_in *sin = (struct sockaddr_in *)&name;
       socket_len = sizeof(struct sockaddr_in);
       sin->sin_family = dh->af;
+      sin->sin_len = socket_len;
       sin->sin_port = S->port ? htons(S->port) : htons(DILLO_URL_HTTP_PORT);
       memcpy(&sin->sin_addr, dh->data, dh->alen);
       if (a_Web_valid(S->web) && (S->web->flags & WEB_RootUrl))
@@@@ -330,6 +331,7 @@@@ static int Http_connect_socket(ChainLink
       socket_len = sizeof(struct sockaddr_in6);
       sin6->sin6_family = dh->af;
       sin6->sin6_port = S->port ? htons(S->port) : htons(DILLO_URL_HTTP_PORT);
+      sin6->sin6_len = socket_len;
       memcpy(&sin6->sin6_addr, dh->data, dh->alen);
       inet_ntop(dh->af, dh->data, buf, sizeof(buf));
       if (a_Web_valid(S->web) && (S->web->flags & WEB_RootUrl))
@


1.8
log
@update to 0.8
@
text
@d1 4
a4 4
$OpenBSD: patch-src_IO_http_c,v 1.7 2003/05/04 18:33:59 couderc Exp $
--- src/IO/http.c.orig	2004-01-05 20:25:46.000000000 +0100
+++ src/IO/http.c	2004-02-21 02:11:12.000000000 +0100
@@@@ -288,6 +288,7 @@@@ static int Http_connect_socket(ChainLink
d12 1
a12 1
@@@@ -302,6 +303,7 @@@@ static int Http_connect_socket(ChainLink
@


1.7
log
@update to 0.7.2, mostly from Jon Olsson <jon@@joshua.haninge.kth.se>
@
text
@d1 4
a4 4
$OpenBSD$
--- src/IO/http.c.orig	Wed Apr 30 13:34:47 2003
+++ src/IO/http.c	Wed Apr 30 13:36:01 2003
@@@@ -278,6 +278,7 @@@@ static int Http_connect_socket(ChainLink
d12 1
a12 1
@@@@ -292,6 +293,7 @@@@ static int Http_connect_socket(ChainLink
@


1.6
log
@update to 0.7.1.2 from henning@@
@
text
@d1 4
a4 22
$OpenBSD: patch-src_IO_http_c,v 1.5 2003/02/19 14:41:02 couderc Exp $
--- src/IO/http.c.orig	Tue Mar  4 20:34:59 2003
+++ src/IO/http.c	Wed Apr 23 20:24:09 2003
@@@@ -43,7 +43,6 @@@@
    (a_Web_valid(web) && (!(root) || (web)->flags & WEB_RootUrl)) ? \
    a_Interface_msg((web)->bw, fmt) : (root)
 
-#define DEBUG_LEVEL 5
 #include "../debug.h"
 
 
@@@@ -246,7 +245,7 @@@@ static int Http_connect_socket(ChainLink
 {
    gint status;
 #ifdef ENABLE_IPV6
-   struct sockaddr_storage name;
+   struct sockaddr_in6 name;
 #else
    struct sockaddr_in name;
 #endif
@@@@ -276,6 +275,7 @@@@ static int Http_connect_socket(ChainLink
    {
d6 1
d8 1
a8 1
+      sin->sin_len = sizeof(struct sockaddr_in);
d12 2
a13 3
@@@@ -288,6 +288,7 @@@@ static int Http_connect_socket(ChainLink
       char buf[128];
       struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)&name;
a14 1
+      sin6->sin6_len = sizeof(struct sockaddr_in6);
d16 1
d19 1
a19 10
@@@@ -302,7 +303,8 @@@@ static int Http_connect_socket(ChainLink
       S->GioCh = g_io_channel_unix_new(S->SockFD);
    g_io_add_watch(S->GioCh, G_IO_ERR | G_IO_HUP | G_IO_OUT,
                   Http_use_socket, Info->LocalKey);
-   status = connect(S->SockFD, (struct sockaddr *)&name, sizeof(name));
+   status = connect(S->SockFD, (struct sockaddr *)&name,
+                  ((struct sockaddr *)&name)->sa_len);
    if ( status == -1 && errno != EINPROGRESS ) {
       S->Err = errno;
       return -1;
@


1.5
log
@Fix the ipv6 stuff, from dhartmei@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_IO_http_c,v 1.4 2003/02/18 15:53:18 couderc Exp $
--- src/IO/http.c.orig	Sun Jan 12 01:30:30 2003
+++ src/IO/http.c	Wed Feb 19 16:24:51 2003
d21 1
a21 1
@@@@ -274,6 +273,7 @@@@ static int Http_connect_socket(ChainLink
d29 1
a29 1
@@@@ -286,6 +286,7 @@@@ static int Http_connect_socket(ChainLink
d37 1
a37 1
@@@@ -300,7 +301,8 @@@@ static int Http_connect_socket(ChainLink
@


1.4
log
@Update to 0.7.0
@
text
@d1 3
a3 3
$OpenBSD$
--- src/IO/http.c.orig	Tue Feb 18 17:30:49 2003
+++ src/IO/http.c	Tue Feb 18 17:31:23 2003
d12 35
@


1.3
log
@No longer need these patches
@
text
@d1 6
a6 9
$OpenBSD: patch-src_IO_http_c,v 1.2 2002/05/02 19:16:25 couderc Exp $
--- src/IO/http.c.orig	Wed Apr 10 03:10:36 2002
+++ src/IO/http.c	Wed May  1 15:20:41 2002
@@@@ -237,7 +237,7 @@@@ static int Http_connect_socket(ChainLink
 {
    gint status;
    struct sockaddr_in name;
-   SocketData_t *S = a_Klist_get_data(ValidSocks, (gint)Info->LocalKey);
+   SocketData_t *S = a_Klist_get_data(ValidSocks, GPOINTER_TO_INT(Info->LocalKey));
d8 2
a9 9
    /* Some OSes require this...  */
    memset(&name, 0, sizeof(name));
@@@@ -332,7 +332,7 @@@@ static gint Http_get(ChainLink *Info, vo
 {
    void *link;
    const DilloUrl *Url = Data;
-   SocketData_t *S = a_Klist_get_data(ValidSocks, (gint)Info->LocalKey);
+   SocketData_t *S = a_Klist_get_data(ValidSocks, GPOINTER_TO_INT(Info->LocalKey));
    gchar hostname[256], *Host = hostname;
a10 8
    /* Reference Info data */
@@@@ -377,7 +377,7 @@@@ static gint Http_get(ChainLink *Info, vo
 void
  a_Http_ccc(int Op, int Branch, ChainLink *Info, void *Data, void *ExtraData)
 {
-   gint SKey = (gint)Info->LocalKey;
+   gint SKey = GPOINTER_TO_INT(Info->LocalKey);
    SocketData_t *S = a_Klist_get_data(ValidSocks, SKey);
a11 10
    if ( Branch == 1 ) {
@@@@ -385,7 +385,7 @@@@ void
       switch (Op) {
       case OpStart:
          SKey = Http_sock_new();
-         Info->LocalKey = (void *) SKey;
+         Info->LocalKey = GPOINTER_TO_INT(SKey);
          if (Http_get(Info, Data, ExtraData) < 0) {
             DEBUG_MSG(2, " HTTP: new abort handler! #2\n");
             S = a_Klist_get_data(ValidSocks, SKey);
@


1.2
log
@update to 0.6.5, thanks to brad@@ and naddy@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@fix some obvious 64bit issues
@
text
@d2 3
a4 12
--- src/IO/http.c.orig	Thu Jan 24 07:00:04 2002
+++ src/IO/http.c	Mon Apr  1 19:03:49 2002
@@@@ -189,7 +189,7 @@@@ static gboolean
 {
    ChainLink *Info;
    SocketData_t *S;
-   gint SKey = (gint) data;
+   gint SKey = GPOINTER_TO_INT(data);
 
    DEBUG_MSG(3, "Http_use_socket: %s [errno %d] [GIOcond %d]\n",
              g_strerror(errno), errno, cond);
@@@@ -230,7 +230,7 @@@@ static int Http_connect_socket(ChainLink
d13 1
a13 1
@@@@ -324,7 +324,7 @@@@ static gint Http_get(ChainLink *Info, vo
d22 1
a22 1
@@@@ -369,14 +369,14 @@@@ static gint Http_get(ChainLink *Info, vo
d31 1
a31 1
       /* DNS query branch */
d34 3
a36 2
-         Info->LocalKey = (void *) SKey = Http_sock_new();
+         Info->LocalKey = GINT_TO_POINTER(SKey) = Http_sock_new();
@

