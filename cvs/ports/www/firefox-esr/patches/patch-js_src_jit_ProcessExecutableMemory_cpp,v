head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.2
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2017.03.20.19.37.06;	author landry;	state Exp;
branches;
next	;
commitid	NpU77YDkfMi3m5i9;


desc
@@


1.1
log
@Update to firefox-esr 52.0.1.

Fixes MFSA 2017-08/CVE-2017-5428, see
https://www.mozilla.org/en-US/security/advisories/mfsa2017-08/

While here, add a patch from semarie@@ (tested by and ok danj@@) to tweak
a last-minute change in the jit engine memory allocator that happened to
fix a security issue in 52 branch (bug #1334933/CVE-2017-5400) - see
https://hg.mozilla.org/releases/mozilla-esr52/rev/6b35bbf96b67.

Sadly, this change resulted in a browser crashing at startup
on OpenBSD with the default limits, because the jit engine tried to
allocate 1Gb (previously 640Mb in #1334933, then 1Gb because of
#1337561, see
https://hg.mozilla.org/releases/mozilla-esr52/rev/65bb26d07408) and hit
the default datasize ulimit of 768Mb. The patch makes it allocate 128Mb
instead (as it's done on 32bit architectures), while a better (?) fix
might be devised in bug #1347139.

Generally speaking, if you see firefox crashing with ENOMEM errors,
raise the datasize limit for your login class, write your own wrapper
script to temporarly raise the limit when starting firefox, or stop
using the modern web. Websites are ginormous, deal with it.
@
text
@$OpenBSD$

https://bugzilla.mozilla.org/show_bug.cgi?id=1347139

--- js/src/jit/ProcessExecutableMemory.cpp.orig	Mon Mar 20 10:53:43 2017
+++ js/src/jit/ProcessExecutableMemory.cpp	Mon Mar 20 10:55:09 2017
@@@@ -390,7 +390,12 @@@@ class PageBitSet
 #if JS_BITS_PER_WORD == 32
 static const size_t MaxCodeBytesPerProcess = 128 * 1024 * 1024;
 #else
+#ifdef __OpenBSD__
+// default datasize is 768Mb on OpenBSD
+static const size_t MaxCodeBytesPerProcess = 128 * 1024 * 1024;
+#else
 static const size_t MaxCodeBytesPerProcess = 1 * 1024 * 1024 * 1024;
+#endif
 #endif
 
 // Per-process executable memory allocator. It reserves a block of memory of
@
