head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.19
date	2016.07.02.10.50.34;	author sthen;	state Exp;
branches;
next	1.18;
commitid	VGhlJVOmVfejuae3;

1.18
date	2015.07.18.20.33.07;	author ajacoutot;	state Exp;
branches;
next	1.17;
commitid	oKUa13w2e2FGxs6V;

1.17
date	2014.10.24.14.33.42;	author giovanni;	state Exp;
branches;
next	1.16;
commitid	JK07SrYPisQ0FTb4;

1.16
date	2014.09.21.16.29.56;	author sebastia;	state Exp;
branches;
next	1.15;
commitid	PukWaorlQsdCTdFt;

1.15
date	2014.09.14.05.58.07;	author ajacoutot;	state Exp;
branches;
next	1.14;
commitid	Wm0mDRCXhQhfZWj1;

1.14
date	2014.08.14.10.16.08;	author sebastia;	state Exp;
branches;
next	1.13;
commitid	e3Nwxcczpve6Ybqj;

1.13
date	2014.07.12.13.41.47;	author ajacoutot;	state Exp;
branches;
next	1.12;
commitid	CC2Szyf2ZEuFbbEs;

1.12
date	2014.07.10.13.09.07;	author ajacoutot;	state Exp;
branches;
next	1.11;
commitid	Xpirey71VpT09196;

1.11
date	2013.06.06.13.57.48;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.05.14.38.08;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.23.16.41.27;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.25.07.55.10;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.20.07.08.05;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.19.18.50.53;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.19.18.18.38;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.13.10.16.13;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.12.10.59.50;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.12.10.44.50;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.10.09.16.34;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.19
log
@remove LD_PRELOAD=libpthread.so from puppet-dashboard, and remove sebastia@@
from maintainer as he isn't using it any more.
@
text
@$OpenBSD: README,v 1.18 2015/07/18 20:33:07 ajacoutot Exp $

+-----------------------------------------------------------------------
| Running ${FULLPKGNAME} on OpenBSD
+-----------------------------------------------------------------------

The Puppet Dashboard has been installed into ${INSTDIR}

Configuration is done in:
    ${INSTDIR}/config/settings.yml

Database Configuration
======================

Before starting the Dashboard, a MariaDB database must be configured in:
    ${INSTDIR}/config/database.yml

The following commands can be used to create the database:
    # mysql -uroot -p<password>
    MariaDB [(none)]> CREATE DATABASE dashboard_production CHARACTER SET utf8;
    MariaDB [(none)]> CREATE USER 'dashboard'@@'localhost' IDENTIFIED BY 'my_password';
    MariaDB [(none)]> GRANT ALL PRIVILEGES ON dashboard_production.* TO 'dashboard'@@'localhost';
    MariaDB [(none)]> EXIT

The MariaDB maximum packet size needs to be increased to permit larger
rows in the database; ${SYSCONFDIR}/my.cnf must be edited to include:
max_allowed_packet = 32M
Then the server must be restarted by running:
    # ${RCDIR}/mysqld restart

Once the database has been setup and MariaDB is up and running, the
following command must be run to create the tables:
    # cd ${INSTDIR} && su -m _puppet-dashboard -c \
        "rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate"

Puppet Configuration
====================

By default, Puppet Dashboard will start a Rails server on port 3000.

To use the Dashboard for reports, all agent nodes must submit reports to
the master and the master must send reports to the Dashboard.
${SYSCONFDIR}/puppet/puppet.conf needs to be edited accordingly:
[agent]
    report = true # this is the default
[master]
    reports = store, http
    reporturl = http://dashboard.domain.tld:3000/reports/upload

Node Classification
-------------------
To use the Dashboard external node classifier (ENC) alongside Puppet DSL
node definitions, the master should contain the following lines (to be
adapted accordingly):
[master]
    node_terminus = exec
    external_nodes = /usr/bin/env PUPPET_DASHBOARD_URL=http://localhost:3000 ${INSTDIR}/bin/external_node

Maintenance
===========

To import old Puppet reports that were created before the Dashboard got
installed, the following command can be used:
    # cd ${INSTDIR} && su -m _puppet-dashboard -c \
        "rake${MODRUBY_BINREV} RAILS_ENV=production reports:import"

Note: For the above command to work, the _puppet-dashboard user must
be a member of the _puppet group.

Cron Jobs
---------
The MariaDB database should be optimized on a montly basis. This can be
done by adding the following entry to the root's crontab(5):
0	0	1	*	*	cd ${INSTDIR} && su -m _puppet-dashboard -c "${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production db:raw:optimize"

Over time, old reports will start to accumulate which can slow down the
Dashboard. Adding the following line to the root's crontab(5) will clean
up reports older than 1 month and will run every night:
0	0	*	*	*	cd ${INSTDIR} && su -m _puppet-dashboard -c "${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production reports:prune upto=1 unit=mon"

Upgrade
-------
After updating the Dashboard to a new release, the following command
needs to be run to update database schemas:
    # cd ${INSTDIR} && su -m _puppet-dashboard -c \
        "rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate"

Phusion Passenger Integration (i.e. mod_rails)
==============================================

The WEBrick server script provided by Puppet Dashboard is not fit for
production. For better performance, it is advised to run the Dashboard
under Passenger along with a compatible web server.

e.g. with nginx
---------------
The nginx(8) package provides a FLAVOR for passenger support which the
version in the base system doesn't, so it must be installed first:
    # pkg_add ruby-passenger nginx--passenger

Next, ${SYSCONFDIR}/nginx/nginx.conf needs to be modified with the
following requirements as a start:

* http{} block
    passenger_root ${LOCALBASE}/lib/phusion-passenger;
    passenger_ruby ${RUBY};

Note that the output of `passenger-config --root` will give the
"passenger_root" value.

* server{} block
        listen       3000;
        root         ${INSTDIR}/public;
        passenger_enabled on;

The nginx(8) daemon installed from packages(7) is started by the
"enginx" rc.d(8) script and obviously puppet_dashboard must be
disabled (the workers must be enabled though).
Here's a sample rc.conf.local(8) extract:
pkg_scripts=enginx puppet_dashboard_workers

Going further
=============

Setting up followings is out of the scope of this README but should be
considered when running Puppet Dashboard in production.
- authentication (by default, anyone can access the Dashboard)
- https (for encrypted communication)

More information is available at:
    http://docs.puppetlabs.com/dashboard/manual/1.2/index.html
@


1.18
log
@sudo(8) -> su(1)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.17 2014/10/24 14:33:42 giovanni Exp $
d34 1
a34 1
        "LD_PRELOAD=libpthread.so rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate"
d65 1
a65 1
        "LD_PRELOAD=libpthread.so rake${MODRUBY_BINREV} RAILS_ENV=production reports:import"
d74 1
a74 1
0	0	1	*	*	cd ${INSTDIR} && su -m _puppet-dashboard -c "LD_PRELOAD=libpthread.so ${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production db:raw:optimize"
d79 1
a79 1
0	0	*	*	*	cd ${INSTDIR} && su -m _puppet-dashboard -c "LD_PRELOAD=libpthread.so ${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production reports:prune upto=1 unit=mon"
d86 1
a86 1
        "LD_PRELOAD=libpthread.so rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate"
@


1.17
log
@fix README file after MySQL->Mariadb switch
ok sebastia@@ (Maintainer)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.16 2014/09/21 16:29:56 sebastia Exp $
d33 2
a34 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard LD_PRELOAD=libpthread.so rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate
d64 2
a65 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard LD_PRELOAD=libpthread.so rake${MODRUBY_BINREV} RAILS_ENV=production reports:import
d74 1
a74 1
0	0	1	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard LD_PRELOAD=libpthread.so ${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production db:raw:optimize
d79 1
a79 1
0	0	*	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard LD_PRELOAD=libpthread.so ${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production reports:prune upto=1 unit=mon
d85 2
a86 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard LD_PRELOAD=libpthread.so rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate
@


1.16
log
@Fix, or more an ugly hack, after mysql -> mariadb switch,
use LD_PRELOAD=libpthread.so., since investigation how to
best upgrade, might take a bit longer.
cluebat to the source of problem and fix from jeremy@@

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.15 2014/09/14 05:58:07 ajacoutot Exp $
d33 1
a33 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} LD_PRELOAD=libpthread.so RAILS_ENV=production db:migrate
d63 1
a63 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} RAILS_ENV=production reports:import
d72 1
a72 1
0	0	1	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard ${LOCALBASE}/bin/rake${MODRUBY_BINREV} LD_PRELOAD=libpthread.so RAILS_ENV=production db:raw:optimize
d77 1
a77 1
0	0	*	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard ${LOCALBASE}/bin/rake${MODRUBY_BINREV} LD_PRELOAD=libpthread.so RAILS_ENV=production reports:prune upto=1 unit=mon
d83 1
a83 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} LD_PRELOAD=libpthread.so RAILS_ENV=production db:migrate
@


1.15
log
@MySQL -> MariaDB in READMEs.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.14 2014/08/14 10:16:08 sebastia Exp $
d33 1
a33 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate
d72 1
a72 1
0	0	1	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard ${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production db:raw:optimize
d77 1
a77 1
0	0	*	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard ${LOCALBASE}/bin/rake${MODRUBY_BINREV} RAILS_ENV=production reports:prune upto=1 unit=mon
d83 1
a83 1
    # cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} RAILS_ENV=production db:migrate
@


1.14
log
@make the import of old reports work
fix HOMEPAGE
add hidden RDEP to ruby-rake
take MAINTAINER

feedback and OK jasper@@ (former MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.13 2014/07/12 13:41:47 ajacoutot Exp $
d15 1
a15 1
Before starting the Dashboard, a MySQL database must be configured in:
d20 4
a23 4
    mysql> CREATE DATABASE dashboard_production CHARACTER SET utf8;
    mysql> CREATE USER 'dashboard'@@'localhost' IDENTIFIED BY 'my_password';
    mysql> GRANT ALL PRIVILEGES ON dashboard_production.* TO 'dashboard'@@'localhost';
    mysql> EXIT
d25 1
a25 1
The MySQL maximum packet size needs to be increased to permit larger
d31 1
a31 1
Once the database has been setup and MySQL is up and running, the
d70 1
a70 1
The MySQL database should be optimized on a montly basis. This can be
@


1.13
log
@pkg_scripts is not a variable anymore.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.12 2014/07/10 13:09:07 ajacoutot Exp $
d64 3
@


1.12
log
@rc.conf.local is in man(1) section 8, at least for now.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.11 2013/06/06 13:57:48 ajacoutot Exp $
d114 1
a114 1
pkg_scripts="${pkg_scripts} enginx puppet_dashboard_workers"
@


1.11
log
@Revert the mysql->MariaDB blurb in the READMEs.
It seems the MariaDB move will be reverted.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.10 2013/06/05 14:38:08 ajacoutot Exp $
d113 1
a113 1
Here's a sample rc.conf.local(5) extract:
@


1.10
log
@mysql -> MariaDB
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.9 2013/04/23 16:41:27 jasper Exp $
d20 4
a23 4
    MariaDB [(none)]> CREATE DATABASE dashboard_production CHARACTER SET utf8;
    MariaDB [(none)]> CREATE USER 'dashboard'@@'localhost' IDENTIFIED BY 'my_password';
    MariaDB [(none)]> GRANT ALL PRIVILEGES ON dashboard_production.* TO 'dashboard'@@'localhost';
    MariaDB [(none)]> EXIT
@


1.9
log
@use the full path to rake in the crontab lines, as /usr/local isn't in the PATH

ok aja@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.8 2013/03/25 07:55:10 ajacoutot Exp $
d20 4
a23 4
    mysql> CREATE DATABASE dashboard_production CHARACTER SET utf8;
    mysql> CREATE USER 'dashboard'@@'localhost' IDENTIFIED BY 'my_password';
    mysql> GRANT ALL PRIVILEGES ON dashboard_production.* TO 'dashboard'@@'localhost';
    mysql> EXIT
@


1.8
log
@Update to puppet-dashboard-1.2.23.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.7 2013/03/20 07:08:05 ajacoutot Exp $
d69 1
a69 1
0	0	1	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} RAILS_ENV=production db:raw:optimize
d74 1
a74 1
0	0	*	*	*	cd ${INSTDIR} && sudo -u _puppet-dashboard rake${MODRUBY_BINREV} RAILS_ENV=production reports:prune upto=1 unit=mon
@


1.7
log
@We cannot mix ruby1.8 and 1.9 and making FLAVORS for each dependant ports
is just impossible; so force the use of version 1.8 which is the default
anyway.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.6 2013/03/19 18:50:53 ajacoutot Exp $
a33 2
Note that this command *must* also be run after a Puppet Dashboard
upgrade.
d75 6
@


1.6
log
@Don't hardcode, use passenger-config(1).
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.5 2013/03/19 18:18:38 ajacoutot Exp $
d89 1
a89 1
    # pkg_add nginx--passenger
d95 2
a96 2
    passenger_root /path/to/passenger;
    passenger_ruby /path/to/ruby;
d98 2
a99 4
Where:
/path/to/passenger = `passenger-configXX --root`
/path/to/ruby = `which rubyXX`
"XX" is the ruby(1) BINREV used by Passenger, e.g. 19.
@


1.5
log
@Document Passenger integration for production systems.

ok robert@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.4 2013/03/13 10:16:13 ajacoutot Exp $
d95 7
a101 3
    passenger_root ${LOCALBASE}/lib/phusion-passengerXX;
    passenger_ruby ${LOCALBASE}/bin/rubyXX;
(where XX is the ruby(1) BINREV, e.g. 19)
d105 1
a105 1
        root         /var/www/puppet-dashboard/public;
@


1.4
log
@Add an rc script so that the dashboard can be easily started.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.3 2013/03/12 10:59:50 ajacoutot Exp $
d78 32
a116 1
- Passenger (with Apache or Nginx for better performance)
@


1.3
log
@Add an example to setup the external node classifier (ENC) and fix the
external_node script.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.2 2013/03/12 10:44:50 ajacoutot Exp $
a36 11
Running the Dashboard
=====================

These commands will start a Rails server on port 3000 then start the
delayed job workers to asynchronously process resource-intensive tasks.
They can be added to rc.conf.local(5) to start Puppet Dashboard at boot
time.

    # cd ${INSTDIR} && sudo -u _puppet-dashboard ./script/server -d -e production 2>/dev/null
    # cd ${INSTDIR} && sudo -u _puppet-dashboard env RAILS_ENV=production script/delayed_job -p dashboard -n 4 -m start 2>/dev/null

d39 2
@


1.2
log
@Update to puppet-dashboard-1.2.22.
Largely improved README to easily set it up.

ok robert@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.1 2012/09/10 09:16:34 jasper Exp $
d59 9
@


1.1
log
@move various MESSAGEs into READMEs and apply some small modifictions for consistency

eyeballed by aja@@
@
text
@d1 1
a1 1
$OpenBSD: README.template,v 1.4 2011/06/02 13:44:40 ajacoutot Exp $
d9 2
a10 2
To configure your database you must first edit config/database.yaml
and then run the following command from ${INSTDIR}:
d12 2
a13 1
	$ rake install
d15 2
a16 1
After that you can start your server by calling:
d18 68
a85 1
	$ script/server
d87 2
a88 2
This will start a Rails server on port 3000. For more information on
Puppet Dashboard, please refer to ${INSTDIR}/README.markdown
@

