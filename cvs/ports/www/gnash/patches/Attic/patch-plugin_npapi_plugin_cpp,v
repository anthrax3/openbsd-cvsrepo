head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.2
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@# @;


1.8
date	2012.02.22.13.22.00;	author dcoppa;	state dead;
branches;
next	1.7;

1.7
date	2011.12.19.21.23.24;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.15.09.47.23;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.23.21.13.27;	author jasper;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2011.03.23.16.20.03;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2010.11.07.18.58.24;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.27.07.57.34;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2010.10.12.09.38.16;	author dcoppa;	state Exp;
branches;
next	;

1.5.2.1
date	2011.11.23.21.14.43;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Bugfixing update to gnash-0.8.10

from brad
@
text
@$OpenBSD: patch-plugin_npapi_plugin_cpp,v 1.7 2011/12/19 21:23:24 sthen Exp $

Fix creating world-readable cookies under /tmp with predictable filenames. CVE-2011-4328

--- plugin/npapi/plugin.cpp.orig	Fri Mar 18 09:44:30 2011
+++ plugin/npapi/plugin.cpp	Thu Dec 15 05:12:51 2011
@@@@ -25,6 +25,9 @@@@
 #include <boost/scoped_array.hpp>
 #include <boost/algorithm/string/replace.hpp>
 #include <boost/algorithm/string/find.hpp>
+#define BOOST_IOSTREAMS_USE_DEPRECATED
+#include <boost/iostreams/device/file_descriptor.hpp>
+#include <boost/iostreams/stream.hpp>
 #include <cassert>
 #include <string>
 #include <cstdlib> // getenv
@@@@ -150,6 +153,37 @@@@ getPluginDescription() 
     return desc;
 }
 
+boost::iostreams::file_descriptor_sink getfdsink(char mkstemplate[]);
+
+boost::iostreams::file_descriptor_sink
+getfdsink(char mksTemplate[])
+{
+  int fd, suffix = std::string(mksTemplate).size() - std::string(mksTemplate).find("XXXXXX") - 6;
+#ifdef HAVE_MKSTEMPS
+  fd = mkstemps (mksTemplate, suffix);
+#else
+  if (suffix > 0) {
+    char *mksTNoSuff = const_cast<char*>(std::string(mksTemplate).substr(0, std::string(mksTemplate).size() - suffix).c_str());
+    fd = mkstemp (mksTNoSuff);
+    const char *mksTSuffix = std::string(mksTemplate).substr(std::string(mksTemplate).size() - suffix, suffix).c_str();
+    std::stringstream mksTFull;
+    mksTFull << mksTNoSuff << mksTSuffix;
+    if (rename (mksTNoSuff, mksTFull.str().c_str()) != 0) {
+      gnash::log_error("Failed to rename %s", mksTNoSuff);
+    }
+    strcpy (mksTemplate, mksTFull.str().c_str());
+  } else {
+    fd = mkstemp (mksTemplate);
+  }
+#endif
+#if BOOST_VERSION < 104400
+  boost::iostreams::file_descriptor_sink fdsink(fd, true);
+#else
+  boost::iostreams::file_descriptor_sink fdsink(fd, boost::iostreams::close_handle);
+#endif
+  return fdsink;
+}
+
 //
 // general initialization and shutdown
 //
@@@@ -954,22 +988,25 @@@@ create_standalone_launcher(const std::string& page_url
         return;
     }
 
-    std::ofstream saLauncher;
+    char debugname[] = "/tmp/gnash-debug-XXXXXX.sh";
+    boost::iostreams::file_descriptor_sink fdsink = getfdsink(debugname);
+#if BOOST_VERSION >= 104400
+    if (fdsink.handle() == -1) {
+        gnash::log_error("Failed to create sink: %s", debugname);
+        return;
+    }
+#endif
+    boost::iostreams::stream<boost::iostreams::file_descriptor_sink>
+        saLauncher (fdsink);
 
-    std::stringstream ss;
-    static int debugno = 0;
-    debugno = (debugno + 1) % 10;
-    ss << "/tmp/gnash-debug-" << debugno << ".sh";
-    saLauncher.open(ss.str().c_str(), std::ios::out | std::ios::trunc);
-
     if (!saLauncher) {
-        gnash::log_error("Failed to open new file for standalone launcher: " + ss.str());
+        gnash::log_error("Failed to open new file for standalone launcher: %s", debugname);
         return;
     }
 
     saLauncher << "#!/bin/sh" << std::endl
                << "export GNASH_COOKIES_IN="
-               << "/tmp/gnash-cookies." << getpid() << std::endl
+               << std::getenv("GNASH_COOKIES_IN") << std::endl
                << getGnashExecutable() << " ";
 
     if (!page_url.empty()) {
@@@@ -992,6 +1029,7 @@@@ create_standalone_launcher(const std::string& page_url
                << std::endl;
 
     saLauncher.close();
+    fdsink.close();
 #endif
 }
 
@@@@ -1097,12 +1135,17 @@@@ nsPluginInstance::setupCookies(const std::string& page
     }
 
     gnash::log_debug("The Cookie for %s is %s", url, ncookie);
-    std::ofstream cookiefile;
-    std::stringstream ss;
-    ss << "/tmp/gnash-cookies." << getpid();
+    char cookiename[] = "/tmp/gnash-cookies.XXXXXX";
+    boost::iostreams::file_descriptor_sink fdsink = getfdsink(cookiename);
+#if BOOST_VERSION >= 104400
+    if (fdsink.handle() == -1) {
+        gnash::log_error("Failed to create sink: %s", cookiename);
+        return;
+    }
+#endif
+    boost::iostreams::stream<boost::iostreams::file_descriptor_sink>
+        cookiefile (fdsink);
 
-    cookiefile.open(ss.str().c_str(), std::ios::out | std::ios::trunc);
-
     // Firefox provides cookies in the following format:
     //
     // cookie1=value1;cookie2=value2;cookie3=value3
@@@@ -1121,8 +1164,9 @@@@ nsPluginInstance::setupCookies(const std::string& page
     }
  
     cookiefile.close();
+    fdsink.close();
   
-    if (setenv("GNASH_COOKIES_IN", ss.str().c_str(), 1) < 0) {
+    if (setenv("GNASH_COOKIES_IN", cookiename, 1) < 0) {
         gnash::log_error(
             "Couldn't set environment variable GNASH_COOKIES_IN to %s",
             ncookie);
@


1.7
log
@Actually check for and use mkstemps() rather than use a broken check
for glibc version and some hand-rolled alternative. From Brad.
@
text
@d1 1
a1 1
$OpenBSD: patch-plugin_npapi_plugin_cpp,v 1.6 2011/12/15 09:47:23 sthen Exp $
@


1.6
log
@Fix CVE-2011-4328 in Gnash; creating world-readable cookies under /tmp
with predictable filenames. From Brad.
@
text
@d1 1
a1 1
$OpenBSD: patch-plugin_npapi_plugin_cpp,v 1.5 2011/11/23 21:13:27 jasper Exp $
d5 2
a6 2
--- plugin/npapi/plugin.cpp.orig	Thu Dec  8 19:34:53 2011
+++ plugin/npapi/plugin.cpp	Thu Dec  8 19:34:07 2011
d27 1
a27 1
+#if (__GLIBC__ >= 2 && __GLIBC_MINOR__ >= 11)
@


1.5
log
@Security fix for SA46955
GNU Gnash Cookie Disclosure Security Issue

ok brad (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 2
Security fix for SA46955
GNU Gnash Cookie Disclosure Security Issue:
d5 95
a99 9
From fa481c116e65ccf9137c7ddc8abc3cf05dc12f55 Mon Sep 17 00:00:00 2001
From: Gabriele Giacone <1o5g4r8o@@gmail.com>
Date: Sun, 20 Nov 2011 17:27:42 +0100
Subject: [PATCH] Make cookie file not world-readable. Fixes http://bugs.debian.org/649384

--- plugin/npapi/plugin.cpp.orig	Wed Nov 23 13:36:08 2011
+++ plugin/npapi/plugin.cpp	Wed Nov 23 13:36:21 2011
@@@@ -1102,6 +1102,7 @@@@ nsPluginInstance::setupCookies(const std::string& page
     ss << "/tmp/gnash-cookies." << getpid();
d101 14
a114 2
     cookiefile.open(ss.str().c_str(), std::ios::out | std::ios::trunc);
+    chmod (ss.str().c_str(), 0600);
d116 2
d120 12
@


1.5.2.1
log
@Security fix for SA46955
GNU Gnash Cookie Disclosure Security Issue

ok brad (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-plugin_npapi_plugin_cpp,v 1.5 2011/11/23 21:13:27 jasper Exp $
@


1.4
log
@Update to gnash-0.8.9

from Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-plugin_npapi_plugin_cpp,v 1.3 2010/11/07 18:58:24 dcoppa Exp $
d3 2
a4 4
Use window.document.baseURI rather than
window.document.location.href. The former
honours <base> tags, fixing bug #31497
(aka easy come, easy go)
d6 9
a14 44
--- plugin/npapi/plugin.cpp.orig	Mon Aug 16 11:46:55 2010
+++ plugin/npapi/plugin.cpp	Fri Nov  5 21:15:29 2010
@@@@ -1218,6 +1218,13 @@@@ nsPluginInstance::startProc()
 std::string
 nsPluginInstance::getCurrentPageURL() const
 {
+    // Return:
+    //  window.document.baseURI
+    //
+    // Was (bogus):
+    //  window.document.location.href
+    //
+
     NPP npp = _instance;
 
     NPIdentifier sDocument = NPN_GetStringIdentifier("document");
@@@@ -1230,20 +1237,21 @@@@ nsPluginInstance::getCurrentPageURL() const
     NPN_ReleaseObject(window);
 
     if (!NPVARIANT_IS_OBJECT(vDoc)) {
-        gnash::log_error("Can't get window object");
-        return NULL;
+        gnash::log_error("Can't get window.document object");
+        return std::string();
     }
     
     NPObject* npDoc = NPVARIANT_TO_OBJECT(vDoc);
 
+/*
     NPIdentifier sLocation = NPN_GetStringIdentifier("location");
     NPVariant vLoc;
     NPN_GetProperty(npp, npDoc, sLocation, &vLoc);
     NPN_ReleaseObject(npDoc);
 
     if (!NPVARIANT_IS_OBJECT(vLoc)) {
-        gnash::log_error("Can't get window.location object");
-        return NULL;
+        gnash::log_error("Can't get window.document.location object");
+        return std::string();
     }
 
     NPObject* npLoc = NPVARIANT_TO_OBJECT(vLoc);
@@@@ -1254,8 +1262,19 @@@@ nsPluginInstance::getCurrentPageURL() const
     NPN_ReleaseObject(npLoc);
d16 2
a17 17
     if (!NPVARIANT_IS_STRING(vProp)) {
-        gnash::log_error("Can't get window.location.href object");
-        return NULL;
+        gnash::log_error("Can't get window.document.location.href string");
+        return std::string();
+    }
+*/
+
+    NPIdentifier sProperty = NPN_GetStringIdentifier("baseURI");
+    NPVariant vProp;
+    NPN_GetProperty(npp, npDoc, sProperty, &vProp);
+    NPN_ReleaseObject(npDoc);
+
+    if (!NPVARIANT_IS_STRING(vProp)) {
+        gnash::log_error("Can't get window.document.baseURI string");
+        return std::string();
     }
d19 2
a20 1
     const NPString& propValue = NPVARIANT_TO_STRING(vProp);
@


1.3
log
@Backport a bunch of bug fixes from upstream, including fixing WAV
header writing on 64-bit archs.

From Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Remove local patches to change the config dir so that the config dir
goes back to the default.

From Brad (maintainer)
@
text
@d1 7
a7 1
$OpenBSD: patch-plugin_npapi_plugin_cpp,v 1.1 2010/10/12 09:38:16 dcoppa Exp $
d9 13
a21 2
+++ plugin/npapi/plugin.cpp	Sun Aug 22 21:03:34 2010
@@@@ -208,6 +208,7 @@@@ NS_PluginInitialize()
d23 3
a25 5
 #if !defined(__OS2__ ) && ! defined(__amigaos4__)
     newGnashRc.append(SYSCONFDIR);
+    newGnashRc.append("/gnash");
     newGnashRc.append("/gnashpluginrc");
 #endif
d27 45
@


1.1
log
@Update to gnash-0.8.8
From Brad, who also takes maintainership.

OK dcoppa@@, jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
@

