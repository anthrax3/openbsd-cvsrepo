head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2013.11.25.17.00.47;	author stsp;	state dead;
branches;
next	1.2;

1.2
date	2013.10.17.14.05.42;	author stsp;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.09.12.54.16;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to Apache HTTPD 2.2.26. Mostly rolls in patches we had already.
@
text
@$OpenBSD: patch-modules_dav_main_mod_dav_c,v 1.2 2013/10/17 14:05:42 stsp Exp $
https://issues.apache.org/bugzilla/show_bug.cgi?id=55304
https://issues.apache.org/bugzilla/show_bug.cgi?id=55306
https://issues.apache.org/bugzilla/show_bug.cgi?id=55397
http://svn.apache.org/viewvc?view=revision&revision=1515569
http://svn.apache.org/viewvc?view=revision&revision=1528718
http://svn.apache.org/viewvc?view=revision&revision=1529559
--- modules/dav/main/mod_dav.c.orig	Thu Jun 27 18:54:14 2013
+++ modules/dav/main/mod_dav.c	Thu Oct 17 12:05:34 2013
@@@@ -400,11 +400,9 @@@@ static int dav_error_response_tag(request_rec *r,
  */
 static const char *dav_xml_escape_uri(apr_pool_t *p, const char *uri)
 {
-    const char *e_uri = ap_escape_uri(p, uri);
-
     /* check the easy case... */
-    if (ap_strchr_c(e_uri, '&') == NULL)
-        return e_uri;
+    if (ap_strchr_c(uri, '&') == NULL)
+        return uri;
 
     /* there was a '&', so more work is needed... sigh. */
 
@@@@ -412,7 +410,7 @@@@ static const char *dav_xml_escape_uri(apr_pool_t *p, c
      * Note: this is a teeny bit of overkill since we know there are no
      * '<' or '>' characters, but who cares.
      */
-    return apr_xml_quote_string(p, e_uri, 0);
+    return apr_xml_quote_string(p, uri, 0);
 }
 
 
@@@@ -616,7 +614,8 @@@@ static int dav_handle_err(request_rec *r, dav_error *e
     return DONE;
 }
 
-/* handy function for return values of methods that (may) create things */
+/* handy function for return values of methods that (may) create things.
+ * locn if provided is assumed to be escaped. */
 static int dav_created(request_rec *r, const char *locn, const char *what,
                        int replaced)
 {
@@@@ -624,8 +623,6 @@@@ static int dav_created(request_rec *r, const char *loc
 
     if (locn == NULL) {
         locn = r->unparsed_uri;
-    } else {
-        locn = ap_escape_uri(r->pool, locn);
     }
 
     /* did the target resource already exist? */
@@@@ -2724,7 +2721,7 @@@@ static int dav_method_copymove(request_rec *r, int is_
      * The multistatus responses will contain the information about any
      * resource that fails the validation.
      *
-     * We check the parent resource, too, since this is a MOVE. Moving the
+     * We check the parent resource, too, if this is a MOVE. Moving the
      * resource effectively removes it from the parent collection, so we
      * must ensure that we have met the appropriate conditions.
      *
@@@@ -2733,7 +2730,9 @@@@ static int dav_method_copymove(request_rec *r, int is_
      */
     if ((err = dav_validate_request(r, resource, depth, NULL,
                                     &multi_response,
-                                    DAV_VALIDATE_PARENT
+                                    (is_move ? DAV_VALIDATE_PARENT
+                                             : DAV_VALIDATE_RESOURCE
+                                               | DAV_VALIDATE_NO_MODIFY)
                                     | DAV_VALIDATE_USE_424,
                                     NULL)) != NULL) {
         err = dav_push_error(r->pool, err->status, 0,
@@@@ -2970,7 +2969,7 @@@@ static int dav_method_copymove(request_rec *r, int is_
     }
 
     /* return an appropriate response (HTTP_CREATED or HTTP_NO_CONTENT) */
-    return dav_created(r, lookup.rnew->uri, "Destination",
+    return dav_created(r, lookup.rnew->unparsed_uri, "Destination",
                        resnew_state == DAV_RESOURCE_EXISTS);
 }
 
@@@@ -4560,7 +4559,7 @@@@ static int dav_method_bind(request_rec *r)
 
     /* return an appropriate response (HTTP_CREATED) */
     /* ### spec doesn't say what happens when destination was replaced */
-    return dav_created(r, lookup.rnew->uri, "Binding", 0);
+    return dav_created(r, lookup.rnew->unparsed_uri, "Binding", 0);
 }
 
 
@


1.2
log
@Add upstream patches to fix Apache HTTPD PR 55397, a regression in 2.2.25
that breaks handling of special characters in filenames for Subversion.
ok landry sthen
@
text
@d1 1
a1 1
$OpenBSD: patch-modules_dav_main_mod_dav_c,v 1.1 2013/10/09 12:54:16 stsp Exp $
@


1.1
log
@Add patches from upstream to fix regressions in mod_dav since httpd-2.2.25.
Unbreaks 'svn copy URL1 URL2' and restores compliance with RFC 4918 (WebDAV).
See https://issues.apache.org/bugzilla/show_bug.cgi?id=55304
and https://issues.apache.org/bugzilla/show_bug.cgi?id=55306
ok sthen
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
d7 1
d9 44
a52 2
+++ modules/dav/main/mod_dav.c	Wed Oct  9 14:28:01 2013
@@@@ -2724,7 +2724,7 @@@@ static int dav_method_copymove(request_rec *r, int is_
d61 1
a61 1
@@@@ -2733,7 +2733,9 @@@@ static int dav_method_copymove(request_rec *r, int is_
d72 18
@

