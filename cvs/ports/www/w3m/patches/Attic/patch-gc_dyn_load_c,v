head	1.4;
access;
symbols
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2002.08.28.12.38.15;	author naddy;	state dead;
branches;
next	1.3;

1.3
date	2002.07.20.12.03.18;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.07.00.50.36;	author brad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.03.10.07.44.44;	author brad;	state Exp;
branches;
next	;

1.2.2.1
date	2002.11.30.02.54.33;	author brad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Use the devel/boehm-gc port instead of the bundled gc library.
@
text
@$OpenBSD: patch-gc_dyn_load_c,v 1.3 2002/07/20 12:03:18 naddy Exp $
--- gc/dyn_load.c.orig	Wed Jul 17 18:09:45 2002
+++ gc/dyn_load.c	Wed Jul 17 18:11:42 2002
@@@@ -57,7 +57,9 @@@@
     !defined(HPUX) && !(defined(LINUX) && defined(__ELF__)) && \
     !defined(RS6000) && !defined(SCO_ELF) && !defined(DGUX) && \
     !(defined(FREEBSD) && defined(__ELF__)) && \
-    !(defined(NETBSD) && defined(__ELF__)) && !defined(HURD)
+    !(defined(NETBSD) && defined(__ELF__)) && \
+    !(defined(OPENBSD) && defined(__ELF__)) && \
+    !defined(HURD)
  --> We only know how to find data segments of dynamic libraries for the
  --> above.  Additional SVR4 variants might not be too
  --> hard to add.
@@@@ -265,7 +267,8 @@@@ void GC_register_dynamic_libraries()
 
 #if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \
     (defined(FREEBSD) && defined(__ELF__)) || defined(DGUX) || \
-    (defined(NETBSD) && defined(__ELF__)) || defined(HURD)
+    (defined(OPENBSD) && defined(__ELF__)) || \
+    defined(HURD)
 
 
 #ifdef USE_PROC_FOR_LIBRARIES
@@@@ -520,7 +523,7 @@@@ GC_bool GC_register_dynamic_libraries_dl
 /* This doesn't necessarily work in all cases, e.g. with preloaded
  * dynamic libraries.						*/
 
-#if defined(NETBSD)
+#if defined(NETBSD) || defined(OPENBSD)
 #  include <sys/exec_elf.h>
 #else
 #  include <elf.h>
@


1.3
log
@Maintenance update to 0.3.1.
@
text
@d1 1
a1 1
$OpenBSD: patch-gc_dyn_load_c,v 1.2 2002/04/07 00:50:36 brad Exp $
@


1.2
log
@fix RCS id
@
text
@d1 3
a3 3
$OpenBSD$
--- gc/dyn_load.c.orig	Wed Dec 19 19:37:29 2001
+++ gc/dyn_load.c	Sun Mar 10 02:30:27 2002
d6 1
a6 1
     !defined(RS6000) && !defined(SCO_ELF) && \
d15 1
a15 1
@@@@ -248,7 +250,9 @@@@ void GC_register_dynamic_libraries()
d18 1
a18 1
     (defined(FREEBSD) && defined(__ELF__)) || \
a19 1
+    (defined(NETBSD) && defined(__ELF__)) || \
d25 1
a25 20
@@@@ -429,14 +433,14 @@@@ static char *parse_map_entry(char *buf_p
 /* For glibc 2.2.4+.  Unfortunately, it doesn't work for older	*/
 /* versions.  Thanks to Jakub Jelinek for most of the code.	*/
 
-#include <stddef.h>
-#include <elf.h>
-#include <link.h>
-
 # if defined(LINUX) /* Are others OK here, too? */ \
      && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \
          || (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && defined(DT_CONFIG))) 
 
+#include <stddef.h>
+#include <elf.h>
+#include <link.h>
+
 /* We have the header files for a glibc that includes dl_iterate_phdr.	*/
 /* It may still not be available in the library on the target system.   */
 /* Thus we also treat it as a weak symbol.				*/
@@@@ -507,7 +511,7 @@@@ GC_bool GC_register_dynamic_libraries_dl
@


1.2.2.1
log
@MFC:
SECURITY update to 0.3.2.1.: This fixes a vulnerability where w3m
fails to escape HTML tags in frame contents, so malicious frame
HTML can deceive you and access your local files, cookies and so on.
@
text
@d1 3
a3 3
$OpenBSD: patch-gc_dyn_load_c,v 1.2 2002/04/07 00:50:36 brad Exp $
--- gc/dyn_load.c.orig	Wed Jul 10 10:21:12 2002
+++ gc/dyn_load.c	Fri Nov 29 18:38:46 2002
d6 1
a6 1
     !defined(RS6000) && !defined(SCO_ELF) && !defined(DGUX) && \
d15 1
a15 1
@@@@ -265,7 +267,9 @@@@ void GC_register_dynamic_libraries()
d18 1
a18 1
     (defined(FREEBSD) && defined(__ELF__)) || defined(DGUX) || \
d26 20
a45 1
@@@@ -520,7 +524,7 @@@@ GC_bool GC_register_dynamic_libraries_dl
@


1.1
log
@add powerpc support, mostly related to ELF.
@
text
@d1 1
a1 1
OpenBSD$
@

