head	1.11;
access;
symbols;
locks; strict;
comment	@# @;


1.11
date	2016.12.25.10.33.27;	author ajacoutot;	state dead;
branches;
next	1.10;
commitid	jSAuI6FL3gMaBMo7;

1.10
date	2016.11.16.12.50.51;	author sthen;	state Exp;
branches;
next	1.9;
commitid	M0yGEdvxGdvUqbb7;

1.9
date	2016.11.11.10.23.34;	author sthen;	state dead;
branches;
next	1.8;
commitid	zcSafSSsrSci3osM;

1.8
date	2016.10.12.08.09.26;	author ajacoutot;	state Exp;
branches;
next	1.7;
commitid	RcsywKx0OmgVaY4K;

1.7
date	2016.09.17.20.22.41;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	erqZjU8459iZzz15;

1.6
date	2012.06.01.08.20.50;	author sthen;	state dead;
branches;
next	1.5;

1.5
date	2012.04.28.09.25.25;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.20.22.27.28;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2011.08.24.21.28.09;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.25.21.31.46;	author rui;	state dead;
branches;
next	1.1;

1.1
date	2007.07.22.19.44.17;	author rui;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to lighttpd-1.4.44.

from Brad (maintainer)
@
text
@$OpenBSD: patch-src_mod_scgi_c,v 1.10 2016/11/16 12:50:51 sthen Exp $

[mod_scgi] fix segfault (fixes #2762)

--- src/mod_scgi.c.orig	Sat Nov 12 21:26:54 2016
+++ src/mod_scgi.c	Sat Nov 12 21:27:31 2016
@@@@ -2699,7 +2699,7 @@@@ static handler_t scgi_check_extension(server *srv, con
 		ct_len = buffer_string_length(ext->key);
 
 		/* check _url_ in the form "/scgi_pattern" */
-		if (extension->key->ptr[0] == '/') {
+		if (ext->key->ptr[0] == '/') {
 			if (ct_len <= uri_path_len
 			    && 0 == strncmp(con->uri.path->ptr, ext->key->ptr, ct_len)) {
 				extension = ext;
@


1.10
log
@Add upstream patch to lighttpd; fixes SCGI segfault regression. From Brad.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.9
log
@update to lighttpd-1.4.43, from Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_scgi_c,v 1.8 2016/10/12 08:09:26 ajacoutot Exp $
d3 1
a3 4
- [core] enforce wait for POLLWR after EINPROGRESS (fixes #2744)
- [core] proxy,scgi omit shutdown() to backend (fixes #2743)
- [core] fix crash if ready events on abandoned fd (fixes #2748)
- performance: use Linux extended syscalls and flags
d5 11
a15 86
--- src/mod_scgi.c.orig	Mon Oct 10 18:06:01 2016
+++ src/mod_scgi.c	Mon Oct 10 18:04:38 2016
@@@@ -757,7 +757,7 @@@@ static int scgi_spawn_connection(server *srv,
 		scgi_addr = (struct sockaddr *) &scgi_addr_in;
 	}
 
-	if (-1 == (scgi_fd = socket(scgi_addr->sa_family, SOCK_STREAM, 0))) {
+	if (-1 == (scgi_fd = fdevent_socket_cloexec(scgi_addr->sa_family, SOCK_STREAM, 0))) {
 		log_error_write(srv, __FILE__, __LINE__, "ss",
 				"failed:", strerror(errno));
 		return -1;
@@@@ -775,7 +775,7 @@@@ static int scgi_spawn_connection(server *srv,
 		close(scgi_fd);
 
 		/* reopen socket */
-		if (-1 == (scgi_fd = socket(scgi_addr->sa_family, SOCK_STREAM, 0))) {
+		if (-1 == (scgi_fd = fdevent_socket_cloexec(scgi_addr->sa_family, SOCK_STREAM, 0))) {
 			log_error_write(srv, __FILE__, __LINE__, "ss",
 				"socket failed:", strerror(errno));
 			return -1;
@@@@ -824,6 +824,10 @@@@ static int scgi_spawn_connection(server *srv,
 				dup2(scgi_fd, 0);
 				close(scgi_fd);
 			}
+		      #ifdef SOCK_CLOEXEC
+			else
+				fcntl(scgi_fd, F_SETFD, 0); /* clear cloexec */
+		      #endif
 
 			/* we don't need the client socket */
 			for (fd = 3; fd < 256; fd++) {
@@@@ -1315,8 +1319,7 @@@@ static void scgi_connection_close(server *srv, handler
 	if (hctx->fd != -1) {
 		fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
 		fdevent_unregister(srv->ev, hctx->fd);
-		close(hctx->fd);
-		srv->cur_fds--;
+		fdevent_sched_close(srv->ev, hctx->fd, 1);
 	}
 
 	if (hctx->host && hctx->proc) {
@@@@ -1371,8 +1374,7 @@@@ static int scgi_reconnect(server *srv, handler_ctx *hc
 
 	fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
 	fdevent_unregister(srv->ev, hctx->fd);
-	close(hctx->fd);
-	srv->cur_fds--;
+	fdevent_sched_close(srv->ev, hctx->fd, 1);
 
 	scgi_set_state(srv, hctx, FCGI_STATE_INIT);
 
@@@@ -2275,7 +2277,7 @@@@ static handler_t scgi_write_request(server *srv, handl
 
 	switch(hctx->state) {
 	case FCGI_STATE_INIT:
-		if (-1 == (hctx->fd = socket(host->family, SOCK_STREAM, 0))) {
+		if (-1 == (hctx->fd = fdevent_socket_nb_cloexec(host->family, SOCK_STREAM, 0))) {
 			if (errno == EMFILE ||
 			    errno == EINTR) {
 				log_error_write(srv, __FILE__, __LINE__, "sd",
@@@@ -2297,7 +2299,6 @@@@ static handler_t scgi_write_request(server *srv, handl
 		if (-1 == fdevent_fcntl_set(srv->ev, hctx->fd)) {
 			log_error_write(srv, __FILE__, __LINE__, "ss",
 					"fcntl failed: ", strerror(errno));
-
 			return HANDLER_ERROR;
 		}
 
@@@@ -2438,7 +2439,6 @@@@ static handler_t scgi_write_request(server *srv, handl
 
 		if (hctx->wb->bytes_out == hctx->wb_reqlen) {
 			fdevent_event_clr(srv->ev, &(hctx->fde_ndx), hctx->fd, FDEVENT_OUT);
-			shutdown(hctx->fd, SHUT_WR);
 			scgi_set_state(srv, hctx, FCGI_STATE_READ);
 		} else {
 			off_t wblen = hctx->wb->bytes_in - hctx->wb->bytes_out;
@@@@ -2585,7 +2585,8 @@@@ SUBREQUEST_FUNC(mod_scgi_handle_subrequest) {
 		}
 	}
 
-	return (0 == hctx->wb->bytes_in || !chunkqueue_is_empty(hctx->wb))
+	return ((0 == hctx->wb->bytes_in || !chunkqueue_is_empty(hctx->wb))
+		&& hctx->state != FCGI_STATE_CONNECT)
 	  ? scgi_send_request(srv, hctx)
 	  : HANDLER_WAIT_FOR_EVENT;
 }
@


1.8
log
@Bring in a commit from upstream
- performance: use Linux extended syscalls and flags

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_scgi_c,v 1.7 2016/09/17 20:22:41 ajacoutot Exp $
@


1.7
log
@Update to lighttpd-1.4.41.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
d8 32
a39 3
--- src/mod_scgi.c.orig	Wed Sep 14 21:07:14 2016
+++ src/mod_scgi.c	Wed Sep 14 21:04:56 2016
@@@@ -1315,8 +1315,7 @@@@ static void scgi_connection_close(server *srv, handler
d49 1
a49 1
@@@@ -1371,8 +1370,7 @@@@ static int scgi_reconnect(server *srv, handler_ctx *hc
d59 18
a76 1
@@@@ -2438,7 +2436,6 @@@@ static handler_t scgi_write_request(server *srv, handl
d84 1
a84 1
@@@@ -2585,7 +2582,8 @@@@ SUBREQUEST_FUNC(mod_scgi_handle_subrequest) {
@


1.6
log
@update to lighttpd 1.4.31, rolling in the backported patches. ok brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_scgi_c,v 1.5 2012/04/28 09:25:25 sthen Exp $
d3 3
a5 1
Fix splitting :port with IPv6.
d7 10
a16 16
--- src/mod_scgi.c.orig	Sat Aug 20 09:47:24 2011
+++ src/mod_scgi.c	Mon Apr 23 00:14:32 2012
@@@@ -1484,8 +1484,14 @@@@ static int scgi_create_env(server *srv, handler_ctx *h
 
 	if (con->server_name->used) {
 		size_t len = con->server_name->used - 1;
-		char *colon = strchr(con->server_name->ptr, ':');
-		if (colon) len = colon - con->server_name->ptr;
+
+		if (con->server_name->ptr[0] == '[') {
+			const char *colon = strstr(con->server_name->ptr, "]:");
+			if (colon) len = (colon + 1) - con->server_name->ptr;
+		} else {
+			const char *colon = strchr(con->server_name->ptr, ':');
+			if (colon) len = colon - con->server_name->ptr;
+		}
d18 29
a46 2
 		scgi_env_add(p->scgi_env, CONST_STR_LEN("SERVER_NAME"), con->server_name->ptr, len);
 	} else {
@


1.5
log
@lighttpd fixes, from upstream via Brad.
- Fix handling of empty header list entries in http_request_split_value.
- Fix access log escaping of " and \\.
- Fix digest "md5-sess" implementation (Errata ID 1649, RFC 2617).
- Add "AUTH_TYPE" environment (for *cgi), remove fastcgi specific workaround.
- Fix splitting :port with IPv6.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@update to lighttpd 1.4.30, from Brad (maintainer).
@
text
@d1 7
a7 4
$OpenBSD: patch-src_mod_scgi_c,v 1.3 2011/08/24 21:28:09 sthen Exp $
--- src/mod_scgi.c.orig	Mon Jun 13 07:24:12 2011
+++ src/mod_scgi.c	Wed Aug 24 02:50:41 2011
@@@@ -2296,7 +2296,7 @@@@ static handler_t scgi_write_request(server *srv, handl
d9 12
a20 6
 		/* fall through */
 	case FCGI_STATE_WRITE:
-		ret = srv->network_backend_write(srv, con, hctx->fd, hctx->wb);
+		ret = srv->network_backend_write(srv, con, hctx->fd, hctx->wb, MAX_WRITE_LIMIT);
 
 		chunkqueue_remove_finished_chunks(hctx->wb);
d22 2
@


1.3
log
@lighttpd bugfix: Limit amount of bytes we send in one go; fixes stalling in one
connection and timeouts on slow systems. From upstream via Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update lighttpd to 1.4.16

ok brad (maintainer), simon@@
@
text
@d1 4
a4 5
$OpenBSD: patch-src_mod_scgi_c,v 1.1 2007/07/22 19:44:17 rui Exp $
--- src/mod_scgi.c.orig	Thu Feb  8 16:34:45 2007
+++ src/mod_scgi.c	Sat Jul 21 11:30:51 2007
@@@@ -803,7 +803,7 @@@@ static int scgi_spawn_connection(server *srv,
 			buffer_append_string_buffer(b, host->bin_path);
d6 4
a9 3
 			/* exec the cgi */
-			execle("/bin/sh", "sh", "-c", b->ptr, NULL, env.ptr);
+			execle("/bin/sh", "sh", "-c", b->ptr, (char *)NULL, env.ptr);
d11 1
a11 5
 			log_error_write(srv, __FILE__, __LINE__, "sbs",
 					"execl failed for:", host->bin_path, strerror(errno));
@@@@ -2286,7 +2286,7 @@@@ static handler_t scgi_write_request(server *srv, handl
 				 *
 				 */
a12 14
-				log_error_write(srv, __FILE__, __LINE__, "ssdsd",
+				log_error_write(srv, __FILE__, __LINE__, "ssosd",
 						"[REPORT ME] connection was dropped after accept(). reconnect() denied:",
 						"write-offset:", hctx->wb->bytes_out,
 						"reconnect attempts:", hctx->reconnects);
@@@@ -2536,7 +2536,7 @@@@ static handler_t scgi_handle_fdevent(void *s, void *ct
 					return HANDLER_WAIT_FOR_FD;
 				}
 
-				log_error_write(srv, __FILE__, __LINE__, "sdsdsd",
+				log_error_write(srv, __FILE__, __LINE__, "sosdsd",
 						"response not sent, request sent:", hctx->wb->bytes_out,
 						"connection-fd:", con->fd,
 						"fcgi-fd:", hctx->fd);
@


1.1
log
@roll in some distribution patches which fix multiple vulnerabilities.
Reference: http://secunia.com/advisories/26130/

ok kili@@, simon@@
@
text
@d1 1
a1 1
$OpenBSD$
@

