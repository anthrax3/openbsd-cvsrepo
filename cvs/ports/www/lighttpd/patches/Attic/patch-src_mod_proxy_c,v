head	1.12;
access;
symbols
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_6:1.3.0.2;
locks; strict;
comment	@# @;


1.12
date	2016.11.11.10.23.34;	author sthen;	state dead;
branches;
next	1.11;
commitid	zcSafSSsrSci3osM;

1.11
date	2016.10.12.08.09.26;	author ajacoutot;	state Exp;
branches;
next	1.10;
commitid	RcsywKx0OmgVaY4K;

1.10
date	2016.09.17.20.22.41;	author ajacoutot;	state Exp;
branches;
next	1.9;
commitid	erqZjU8459iZzz15;

1.9
date	2011.12.20.22.27.28;	author sthen;	state dead;
branches;
next	1.8;

1.8
date	2011.08.24.21.28.09;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.07.14.34.36;	author sthen;	state dead;
branches;
next	1.6;

1.6
date	2011.03.20.13.42.53;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.17.21.59.43;	author sthen;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2010.08.18.11.16.55;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2010.04.09.11.06.22;	author sthen;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2006.01.15.04.47.58;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2006.01.03.23.39.12;	author brad;	state Exp;
branches;
next	;

1.3.2.1
date	2010.04.29.01.37.22;	author william;	state Exp;
branches;
next	;

1.3.4.1
date	2010.06.12.14.43.07;	author william;	state Exp;
branches;
next	;

1.5.2.1
date	2011.05.02.12.05.38;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.12
log
@update to lighttpd-1.4.43, from Brad
@
text
@$OpenBSD: patch-src_mod_proxy_c,v 1.11 2016/10/12 08:09:26 ajacoutot Exp $

- [core] enforce wait for POLLWR after EINPROGRESS (fixes #2744)
- [core] proxy,scgi omit shutdown() to backend (fixes #2743)
- [core] fix crash if ready events on abandoned fd (fixes #2748)
- performance: use Linux extended syscalls and flags

--- src/mod_proxy.c.orig	Mon Oct 10 18:05:54 2016
+++ src/mod_proxy.c	Mon Oct 10 18:04:38 2016
@@@@ -341,9 +341,7 @@@@ static void proxy_connection_close(server *srv, handle
 	if (hctx->fd != -1) {
 		fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
 		fdevent_unregister(srv->ev, hctx->fd);
-
-		close(hctx->fd);
-		srv->cur_fds--;
+		fdevent_sched_close(srv->ev, hctx->fd, 1);
 	}
 
 	if (hctx->host) {
@@@@ -784,14 +782,14 @@@@ static handler_t proxy_write_request(server *srv, hand
 #endif
 #if defined(HAVE_IPV6) && defined(HAVE_INET_PTON)
 		if (strstr(host->host->ptr,":")) {
-			if (-1 == (hctx->fd = socket(AF_INET6, SOCK_STREAM, 0))) {
+			if (-1 == (hctx->fd = fdevent_socket_nb_cloexec(AF_INET6, SOCK_STREAM, 0))) {
 				log_error_write(srv, __FILE__, __LINE__, "ss", "socket failed: ", strerror(errno));
 				return HANDLER_ERROR;
 			}
 		} else
 #endif
 		{
-			if (-1 == (hctx->fd = socket(AF_INET, SOCK_STREAM, 0))) {
+			if (-1 == (hctx->fd = fdevent_socket_nb_cloexec(AF_INET, SOCK_STREAM, 0))) {
 				log_error_write(srv, __FILE__, __LINE__, "ss", "socket failed: ", strerror(errno));
 				return HANDLER_ERROR;
 			}
@@@@ -818,7 +816,7 @@@@ static handler_t proxy_write_request(server *srv, hand
 
 			return HANDLER_WAIT_FOR_EVENT;
 		case -1:
-			/* if ECONNREFUSED choose another connection -> FIXME */
+			/* if ECONNREFUSED choose another connection */
 			hctx->fde_ndx = -1;
 
 			return HANDLER_ERROR;
@@@@ -854,7 +852,6 @@@@ static handler_t proxy_write_request(server *srv, hand
 
 		if (hctx->wb->bytes_out == hctx->wb_reqlen) {
 			fdevent_event_clr(srv->ev, &(hctx->fde_ndx), hctx->fd, FDEVENT_OUT);
-			shutdown(hctx->fd, SHUT_WR);/* future: remove if HTTP/1.1 request */
 			proxy_set_state(srv, hctx, PROXY_STATE_READ);
 		} else {
 			off_t wblen = hctx->wb->bytes_in - hctx->wb->bytes_out;
@@@@ -992,7 +989,8 @@@@ SUBREQUEST_FUNC(mod_proxy_handle_subrequest) {
 		}
 	}
 
-	return (0 == hctx->wb->bytes_in || !chunkqueue_is_empty(hctx->wb))
+	return ((0 == hctx->wb->bytes_in || !chunkqueue_is_empty(hctx->wb))
+		&& hctx->state != PROXY_STATE_CONNECT)
 	  ? proxy_send_request(srv, hctx)
 	  : HANDLER_WAIT_FOR_EVENT;
 }
@


1.11
log
@Bring in a commit from upstream
- performance: use Linux extended syscalls and flags

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_proxy_c,v 1.10 2016/09/17 20:22:41 ajacoutot Exp $
@


1.10
log
@Update to lighttpd-1.4.41.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
d8 2
a9 2
--- src/mod_proxy.c.orig	Wed Sep 14 21:07:08 2016
+++ src/mod_proxy.c	Wed Sep 14 21:04:56 2016
d21 26
@


1.9
log
@update to lighttpd 1.4.30, from Brad (maintainer).
@
text
@d1 17
a17 4
$OpenBSD: patch-src_mod_proxy_c,v 1.8 2011/08/24 21:28:09 sthen Exp $
--- src/mod_proxy.c.orig	Fri Dec 10 12:41:18 2010
+++ src/mod_proxy.c	Wed Aug 24 02:50:41 2011
@@@@ -825,7 +825,7 @@@@ static handler_t proxy_write_request(server *srv, hand
d19 2
a20 4
 		/* fall through */
 	case PROXY_STATE_WRITE:;
-		ret = srv->network_backend_write(srv, con, hctx->fd, hctx->wb);
+		ret = srv->network_backend_write(srv, con, hctx->fd, hctx->wb, MAX_WRITE_LIMIT);
d22 9
a30 1
 		chunkqueue_remove_finished_chunks(hctx->wb);
d32 6
@


1.8
log
@lighttpd bugfix: Limit amount of bytes we send in one go; fixes stalling in one
connection and timeouts on slow systems. From upstream via Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.7
log
@update lighttpd to 1.4.29, from Brad

- while there, remove patch-src_server_c too, all the various /dev/*random
are equivalent now, ok Brad
@
text
@d1 4
a4 15
$OpenBSD: patch-src_mod_proxy_c,v 1.6 2011/03/20 13:42:53 sthen Exp $
--- src/mod_proxy.c.orig	Mon Mar 14 21:16:15 2011
+++ src/mod_proxy.c	Mon Mar 14 21:16:22 2011
@@@@ -724,9 +724,9 @@@@ static int proxy_demux_response(server *srv, handler_c
 				con->file_started = 1;
 				if (blen) {
 					http_chunk_append_mem(srv, con, c + 4, blen + 1);
-					joblist_append(srv, con);
 				}
 				hctx->response->used = 0;
+				joblist_append(srv, con);
 			}
 		} else {
 			http_chunk_append_mem(srv, con, hctx->response->ptr, hctx->response->used);
@@@@ -750,7 +750,6 @@@@ static int proxy_demux_response(server *srv, handler_c
a5 93
 static handler_t proxy_write_request(server *srv, handler_ctx *hctx) {
 	data_proxy *host= hctx->host;
-	plugin_data *p    = hctx->plugin_data;
 	connection *con   = hctx->remote_conn;
 
 	int ret;
@@@@ -759,6 +758,17 @@@@ static handler_t proxy_write_request(server *srv, hand
 	    (!host->host->used || !host->port)) return -1;
 
 	switch(hctx->state) {
+	case PROXY_STATE_CONNECT:
+		/* wait for the connect() to finish */
+
+		/* connect failed ? */
+		if (-1 == hctx->fde_ndx) return HANDLER_ERROR;
+
+		/* wait */
+		return HANDLER_WAIT_FOR_EVENT;
+
+		break;
+
 	case PROXY_STATE_INIT:
 #if defined(HAVE_IPV6) && defined(HAVE_INET_PTON)
 		if (strstr(host->host->ptr,":")) {
@@@@ -786,58 +796,28 @@@@ static handler_t proxy_write_request(server *srv, hand
 			return HANDLER_ERROR;
 		}
 
-		/* fall through */
+		switch (proxy_establish_connection(srv, hctx)) {
+		case 1:
+			proxy_set_state(srv, hctx, PROXY_STATE_CONNECT);
 
-	case PROXY_STATE_CONNECT:
-		/* try to finish the connect() */
-		if (hctx->state == PROXY_STATE_INIT) {
-			/* first round */
-			switch (proxy_establish_connection(srv, hctx)) {
-			case 1:
-				proxy_set_state(srv, hctx, PROXY_STATE_CONNECT);
+			/* connection is in progress, wait for an event and call getsockopt() below */
 
-				/* connection is in progress, wait for an event and call getsockopt() below */
+			fdevent_event_set(srv->ev, &(hctx->fde_ndx), hctx->fd, FDEVENT_OUT);
 
-				fdevent_event_set(srv->ev, &(hctx->fde_ndx), hctx->fd, FDEVENT_OUT);
+			return HANDLER_WAIT_FOR_EVENT;
+		case -1:
+			/* if ECONNREFUSED choose another connection -> FIXME */
+			hctx->fde_ndx = -1;
 
-				return HANDLER_WAIT_FOR_EVENT;
-			case -1:
-				/* if ECONNREFUSED choose another connection -> FIXME */
-				hctx->fde_ndx = -1;
-
-				return HANDLER_ERROR;
-			default:
-				/* everything is ok, go on */
-				break;
-			}
-		} else {
-			int socket_error;
-			socklen_t socket_error_len = sizeof(socket_error);
-
-			/* we don't need it anymore */
-			fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
-
-			/* try to finish the connect() */
-			if (0 != getsockopt(hctx->fd, SOL_SOCKET, SO_ERROR, &socket_error, &socket_error_len)) {
-				log_error_write(srv, __FILE__, __LINE__, "ss",
-						"getsockopt failed:", strerror(errno));
-
-				return HANDLER_ERROR;
-			}
-			if (socket_error != 0) {
-				log_error_write(srv, __FILE__, __LINE__, "ss",
-						"establishing connection failed:", strerror(socket_error),
-						"port:", hctx->host->port);
-
-				return HANDLER_ERROR;
-			}
-			if (p->conf.debug) {
-				log_error_write(srv, __FILE__, __LINE__,  "s", "proxy - connect - delayed success");
-			}
+			return HANDLER_ERROR;
+		default:
+			/* everything is ok, go on */
+			proxy_set_state(srv, hctx, PROXY_STATE_PREPARE_WRITE);
+			break;
 		}
 
-		proxy_set_state(srv, hctx, PROXY_STATE_PREPARE_WRITE);
d7 3
a9 3
+
 	case PROXY_STATE_PREPARE_WRITE:
 		proxy_create_env(srv, hctx);
d11 1
a11 3
@@@@ -1019,11 +999,42 @@@@ static handler_t proxy_handle_fdevent(server *srv, voi
 					"proxy: fdevent-out", hctx->state);
 		}
a12 41
-		if (hctx->state == PROXY_STATE_CONNECT ||
+		if (hctx->state == PROXY_STATE_CONNECT) {
+			int socket_error;
+			socklen_t socket_error_len = sizeof(socket_error);
+
+			/* we don't need it anymore */
+			fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
+			hctx->fde_ndx = -1;
+
+			/* try to finish the connect() */
+			if (0 != getsockopt(hctx->fd, SOL_SOCKET, SO_ERROR, &socket_error, &socket_error_len)) {
+				log_error_write(srv, __FILE__, __LINE__, "ss",
+					"getsockopt failed:", strerror(errno));
+
+				joblist_append(srv, con);
+				return HANDLER_FINISHED;
+			}
+			if (socket_error != 0) {
+				log_error_write(srv, __FILE__, __LINE__, "ss",
+					"establishing connection failed:", strerror(socket_error),
+					"port:", hctx->host->port);
+
+				joblist_append(srv, con);
+				return HANDLER_FINISHED;
+			}
+			if (p->conf.debug) {
+				log_error_write(srv, __FILE__, __LINE__,  "s", "proxy - connect - delayed success");
+			}
+
+			proxy_set_state(srv, hctx, PROXY_STATE_PREPARE_WRITE);
+		}
+
+		if (hctx->state == PROXY_STATE_PREPARE_WRITE ||
 		    hctx->state == PROXY_STATE_WRITE) {
 			/* we are allowed to send something out
 			 *
-			 * 1. in a unfinished connect() call
+			 * 1. after a just finished connect() call
 			 * 2. in a unfinished write() call (long POST request)
 			 */
 			return mod_proxy_handle_subrequest(srv, con, p);
@


1.6
log
@Fixes from upstream via Brad (maintainer)
* mod_proxy: fix delayed connect
* mod_cgi: make read buffer as big as incoming data block
* ssl: Support for Diffie-Hellman and Elliptic-Curve Diffie-Hellman
key exchange (add ssl.use-sslv3)

While there, update autoconf version comment, should be 2.67.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_proxy_c,v 1.5 2010/09/17 21:59:43 sthen Exp $
@


1.5
log
@Fix lighttpd mod_proxy waiting for response even if content-length is 0.
From upstream via Brad.
@
text
@d1 3
a3 3
$OpenBSD$
--- src/mod_proxy.c.orig	Fri Sep 17 17:50:54 2010
+++ src/mod_proxy.c	Fri Sep 17 17:52:17 2010
d15 145
@


1.5.2.1
log
@- Fixes from upstream via Brad (maintainer)
* mod_proxy: fix delayed connect
* mod_cgi: make read buffer as big as incoming data block
* ssl: Support for Diffie-Hellman and Elliptic-Curve Diffie-Hellman
key exchange (add ssl.use-sslv3)

- backport a patch from upstream to avoid a conflict between OpenSSL and
internal implementations of MD5. Fixes SSL problems with some clients.
@
text
@d1 3
a3 3
$OpenBSD: patch-src_mod_proxy_c,v 1.6 2011/03/20 13:42:53 sthen Exp $
--- src/mod_proxy.c.orig	Mon Mar 14 21:16:15 2011
+++ src/mod_proxy.c	Mon Mar 14 21:16:22 2011
a14 145
@@@@ -750,7 +750,6 @@@@ static int proxy_demux_response(server *srv, handler_c
 
 static handler_t proxy_write_request(server *srv, handler_ctx *hctx) {
 	data_proxy *host= hctx->host;
-	plugin_data *p    = hctx->plugin_data;
 	connection *con   = hctx->remote_conn;
 
 	int ret;
@@@@ -759,6 +758,17 @@@@ static handler_t proxy_write_request(server *srv, hand
 	    (!host->host->used || !host->port)) return -1;
 
 	switch(hctx->state) {
+	case PROXY_STATE_CONNECT:
+		/* wait for the connect() to finish */
+
+		/* connect failed ? */
+		if (-1 == hctx->fde_ndx) return HANDLER_ERROR;
+
+		/* wait */
+		return HANDLER_WAIT_FOR_EVENT;
+
+		break;
+
 	case PROXY_STATE_INIT:
 #if defined(HAVE_IPV6) && defined(HAVE_INET_PTON)
 		if (strstr(host->host->ptr,":")) {
@@@@ -786,58 +796,28 @@@@ static handler_t proxy_write_request(server *srv, hand
 			return HANDLER_ERROR;
 		}
 
-		/* fall through */
+		switch (proxy_establish_connection(srv, hctx)) {
+		case 1:
+			proxy_set_state(srv, hctx, PROXY_STATE_CONNECT);
 
-	case PROXY_STATE_CONNECT:
-		/* try to finish the connect() */
-		if (hctx->state == PROXY_STATE_INIT) {
-			/* first round */
-			switch (proxy_establish_connection(srv, hctx)) {
-			case 1:
-				proxy_set_state(srv, hctx, PROXY_STATE_CONNECT);
+			/* connection is in progress, wait for an event and call getsockopt() below */
 
-				/* connection is in progress, wait for an event and call getsockopt() below */
+			fdevent_event_set(srv->ev, &(hctx->fde_ndx), hctx->fd, FDEVENT_OUT);
 
-				fdevent_event_set(srv->ev, &(hctx->fde_ndx), hctx->fd, FDEVENT_OUT);
+			return HANDLER_WAIT_FOR_EVENT;
+		case -1:
+			/* if ECONNREFUSED choose another connection -> FIXME */
+			hctx->fde_ndx = -1;
 
-				return HANDLER_WAIT_FOR_EVENT;
-			case -1:
-				/* if ECONNREFUSED choose another connection -> FIXME */
-				hctx->fde_ndx = -1;
-
-				return HANDLER_ERROR;
-			default:
-				/* everything is ok, go on */
-				break;
-			}
-		} else {
-			int socket_error;
-			socklen_t socket_error_len = sizeof(socket_error);
-
-			/* we don't need it anymore */
-			fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
-
-			/* try to finish the connect() */
-			if (0 != getsockopt(hctx->fd, SOL_SOCKET, SO_ERROR, &socket_error, &socket_error_len)) {
-				log_error_write(srv, __FILE__, __LINE__, "ss",
-						"getsockopt failed:", strerror(errno));
-
-				return HANDLER_ERROR;
-			}
-			if (socket_error != 0) {
-				log_error_write(srv, __FILE__, __LINE__, "ss",
-						"establishing connection failed:", strerror(socket_error),
-						"port:", hctx->host->port);
-
-				return HANDLER_ERROR;
-			}
-			if (p->conf.debug) {
-				log_error_write(srv, __FILE__, __LINE__,  "s", "proxy - connect - delayed success");
-			}
+			return HANDLER_ERROR;
+		default:
+			/* everything is ok, go on */
+			proxy_set_state(srv, hctx, PROXY_STATE_PREPARE_WRITE);
+			break;
 		}
 
-		proxy_set_state(srv, hctx, PROXY_STATE_PREPARE_WRITE);
 		/* fall through */
+
 	case PROXY_STATE_PREPARE_WRITE:
 		proxy_create_env(srv, hctx);
 
@@@@ -1019,11 +999,42 @@@@ static handler_t proxy_handle_fdevent(server *srv, voi
 					"proxy: fdevent-out", hctx->state);
 		}
 
-		if (hctx->state == PROXY_STATE_CONNECT ||
+		if (hctx->state == PROXY_STATE_CONNECT) {
+			int socket_error;
+			socklen_t socket_error_len = sizeof(socket_error);
+
+			/* we don't need it anymore */
+			fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
+			hctx->fde_ndx = -1;
+
+			/* try to finish the connect() */
+			if (0 != getsockopt(hctx->fd, SOL_SOCKET, SO_ERROR, &socket_error, &socket_error_len)) {
+				log_error_write(srv, __FILE__, __LINE__, "ss",
+					"getsockopt failed:", strerror(errno));
+
+				joblist_append(srv, con);
+				return HANDLER_FINISHED;
+			}
+			if (socket_error != 0) {
+				log_error_write(srv, __FILE__, __LINE__, "ss",
+					"establishing connection failed:", strerror(socket_error),
+					"port:", hctx->host->port);
+
+				joblist_append(srv, con);
+				return HANDLER_FINISHED;
+			}
+			if (p->conf.debug) {
+				log_error_write(srv, __FILE__, __LINE__,  "s", "proxy - connect - delayed success");
+			}
+
+			proxy_set_state(srv, hctx, PROXY_STATE_PREPARE_WRITE);
+		}
+
+		if (hctx->state == PROXY_STATE_PREPARE_WRITE ||
 		    hctx->state == PROXY_STATE_WRITE) {
 			/* we are allowed to send something out
 			 *
-			 * 1. in a unfinished connect() call
+			 * 1. after a just finished connect() call
 			 * 2. in a unfinished write() call (long POST request)
 			 */
 			return mod_proxy_handle_subrequest(srv, con, p);
@


1.4
log
@lighttpd 1.4.27; various fixes/cleanup. From Brad, small conf tweak from me.
@
text
@d1 14
a14 58
$OpenBSD: patch-src_mod_proxy_c,v 1.3 2010/04/09 11:06:22 sthen Exp $
--- src/mod_proxy.c.orig	Mon Feb  1 18:28:20 2010
+++ src/mod_proxy.c	Wed Apr  7 21:05:00 2010
@@@@ -349,6 +349,10 @@@@ static void proxy_connection_close(server *srv, handle
 		srv->cur_fds--;
 	}
 
+	if (hctx->host) {
+		hctx->host->usage--;
+	}
+
 	handler_ctx_free(hctx);
 	con->plugin_ctx[p->id] = NULL;
 }
@@@@ -848,11 +852,11 @@@@ static handler_t proxy_write_request(server *srv, hand
 		if (-1 == ret) { /* error on our side */
 			log_error_write(srv, __FILE__, __LINE__, "ssd", "write failed:", strerror(errno), errno);
 
-			return HANDLER_WAIT_FOR_EVENT;
+			return HANDLER_ERROR;
 		} else if (-2 == ret) { /* remote close */
 			log_error_write(srv, __FILE__, __LINE__, "ssd", "write failed, remote connection close:", strerror(errno), errno);
 
-			return HANDLER_WAIT_FOR_EVENT;
+			return HANDLER_ERROR;
 		}
 
 		if (hctx->wb->bytes_out == hctx->wb->bytes_in) {
@@@@ -989,8 +993,6 @@@@ static handler_t proxy_handle_fdevent(void *s, void *c
 		case 0:
 			break;
 		case 1:
-			hctx->host->usage--;
-
 			/* we are done */
 			proxy_connection_close(srv, hctx);
 
@@@@ -1077,8 +1079,11 @@@@ static handler_t proxy_handle_fdevent(void *s, void *c
 			return HANDLER_FINISHED;
 		}
 
-		con->file_finished = 1;
+		if (!con->file_finished) {
+			http_chunk_append_mem(srv, con, NULL, 0);
+		}
 
+		con->file_finished = 1;
 		proxy_connection_close(srv, hctx);
 		joblist_append(srv, con);
 	} else if (revents & FDEVENT_ERR) {
@@@@ -1086,6 +1091,7 @@@@ static handler_t proxy_handle_fdevent(void *s, void *c
 
 		log_error_write(srv, __FILE__, __LINE__, "sd", "proxy-FDEVENT_ERR, but no HUP", revents);
 
+		con->file_finished = 1;
 		joblist_append(srv, con);
 		proxy_connection_close(srv, hctx);
 	}
@


1.3
log
@mod_proxy fixes, from upstream via Brad
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3.4.1
log
@MFC:

Bugfix update to 1.4.26, fix mod_proxy and alias handling

ok Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_proxy_c,v 1.3 2010/04/09 11:06:22 sthen Exp $
@


1.3.2.1
log
@MFC:

Update to lighttpd-1.4.26p1 for bugfixes

Requested by Brad
ok Brad jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_proxy_c,v 1.3 2010/04/09 11:06:22 sthen Exp $
@


1.2
log
@upgrade to lighttpd 1.4.9
@
text
@d1 9
a9 13
$OpenBSD: patch-src_mod_proxy_c,v 1.1 2006/01/03 23:39:12 brad Exp $
--- src/mod_proxy.c.orig	Tue Jan  3 18:18:34 2006
+++ src/mod_proxy.c	Tue Jan  3 18:20:03 2006
@@@@ -439,7 +439,12 @@@@ static int proxy_create_env(server *srv,
 	BUFFER_APPEND_STRING_CONST(b, " HTTP/1.0\r\n");
 
 	proxy_append_header(con, "X-Forwarded-For", (char *)inet_ntop_cache_get_ip(srv, &(con->dst_addr)));
-	proxy_set_header(con, "X-Host", con->request.http_host->ptr);
+	/* http_host is NOT is just a pointer to a buffer 
+	 * which is NULL if it is not set */
+	if (con->request.http_host && 
+	    !buffer_is_empty(con->request.http_host)) {
+		proxy_set_header(con, "X-Host", con->request.http_host->ptr);
d11 43
a53 1
 	proxy_set_header(con, "X-Forwarded-Proto", con->conf.is_ssl ? "https" : "http");
d55 4
a58 1
 	/* request header */
@


1.1
log
@fix a crash with mod_proxy if the Host: header is empty.

From lighttpd Trac
@
text
@d1 1
a1 1
$OpenBSD$
@

