head	1.12;
access;
symbols
	OPENBSD_5_4:1.8.0.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2016.11.11.10.23.34;	author sthen;	state dead;
branches;
next	1.11;
commitid	zcSafSSsrSci3osM;

1.11
date	2016.10.12.08.09.26;	author ajacoutot;	state Exp;
branches;
next	1.10;
commitid	RcsywKx0OmgVaY4K;

1.10
date	2014.01.23.23.24.14;	author brad;	state dead;
branches;
next	1.9;

1.9
date	2013.11.30.20.35.44;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2013.11.08.21.39.43;	author brad;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2011.12.20.22.27.28;	author sthen;	state dead;
branches;
next	1.6;

1.6
date	2011.12.03.22.26.08;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.24.21.28.09;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.07.14.34.36;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2011.04.25.09.39.36;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.20.13.42.53;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.07.19.13.40;	author jasper;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.05.02.12.05.38;	author jasper;	state Exp;
branches;
next	;

1.8.2.1
date	2013.11.22.08.42.13;	author jasper;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2013.12.01.10.08.23;	author jasper;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2014.03.25.18.42.26;	author brad;	state dead;
branches;
next	;


desc
@@


1.12
log
@update to lighttpd-1.4.43, from Brad
@
text
@$OpenBSD: patch-src_network_c,v 1.11 2016/10/12 08:09:26 ajacoutot Exp $

performance: use Linux extended syscalls and flags

--- src/network.c.orig	Sun Jul 31 08:42:39 2016
+++ src/network.c	Mon Oct 10 18:04:38 2016
@@@@ -382,7 +382,7 @@@@ static int network_server_init(server *srv, buffer *ho
 	if (AF_UNIX == srv_socket->addr.plain.sa_family) {
 		/* check if the socket exists and try to connect to it. */
 		force_assert(host); /*(static analysis hint)*/
-		if (-1 == (srv_socket->fd = socket(srv_socket->addr.plain.sa_family, SOCK_STREAM, 0))) {
+		if (-1 == (srv_socket->fd = fdevent_socket_cloexec(srv_socket->addr.plain.sa_family, SOCK_STREAM, 0))) {
 			log_error_write(srv, __FILE__, __LINE__, "ss", "socket failed:", strerror(errno));
 			goto error_free_socket;
 		}
@@@@ -409,10 +409,12 @@@@ static int network_server_init(server *srv, buffer *ho
 
 			goto error_free_socket;
 		}
+
+		fdevent_fcntl_set_nb(srv->ev, srv_socket->fd);
 	} else
 #endif
 	{
-		if (-1 == (srv_socket->fd = socket(srv_socket->addr.plain.sa_family, SOCK_STREAM, IPPROTO_TCP))) {
+		if (-1 == (srv_socket->fd = fdevent_socket_nb_cloexec(srv_socket->addr.plain.sa_family, SOCK_STREAM, IPPROTO_TCP))) {
 			log_error_write(srv, __FILE__, __LINE__, "ss", "socket failed:", strerror(errno));
 			goto error_free_socket;
 		}
@@@@ -432,9 +434,6 @@@@ static int network_server_init(server *srv, buffer *ho
 		}
 #endif
 	}
-
-	/* set FD_CLOEXEC now, fdevent_fcntl_set is called later; needed for pipe-logger forks */
-	fd_close_on_exec(srv_socket->fd);
 
 	/* */
 	srv->cur_fds = srv_socket->fd;
@


1.11
log
@Bring in a commit from upstream
- performance: use Linux extended syscalls and flags

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.10
log
@Update to lighttpd 1.4.34.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.9 2013/11/30 20:35:44 brad Exp $
d3 1
a3 1
Fix SNI handling; only use key+cert from SNI specific config. CVE-2013-4508
d5 10
a14 181
--- src/network.c.orig	Fri Aug 30 07:07:05 2013
+++ src/network.c	Fri Nov 29 20:41:46 2013
@@@@ -112,20 +112,46 @@@@ static int network_ssl_servername_callback(SSL *ssl, i
 	config_patch_connection(srv, con, COMP_HTTP_SCHEME);
 	config_patch_connection(srv, con, COMP_HTTP_HOST);
 
-	if (NULL == con->conf.ssl_ctx) {
-		/* ssl_ctx <=> pemfile was set <=> ssl_ctx got patched: so this should never happen */
+	if (NULL == con->conf.ssl_pemfile_x509 || NULL == con->conf.ssl_pemfile_pkey) {
+		/* x509/pkey available <=> pemfile was set <=> pemfile got patched: so this should never happen, unless you nest $SERVER["socket"] */
 		log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-			"null SSL_CTX for TLS server name", con->tlsext_server_name);
+			"no certificate/private key for TLS server name", con->tlsext_server_name);
 		return SSL_TLSEXT_ERR_ALERT_FATAL;
 	}
 
-	/* switch to new SSL_CTX in reaction to a client's server_name extension */
-	if (con->conf.ssl_ctx != SSL_set_SSL_CTX(ssl, con->conf.ssl_ctx)) {
-		log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-			"failed to set SSL_CTX for TLS server name", con->tlsext_server_name);
+	/* first set certificate! setting private key checks whether certificate matches it */
+	if (!SSL_use_certificate(ssl, con->conf.ssl_pemfile_x509)) {
+		log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
+			"failed to set certificate for TLS server name", con->tlsext_server_name,
+			ERR_error_string(ERR_get_error(), NULL));
 		return SSL_TLSEXT_ERR_ALERT_FATAL;
 	}
 
+	if (!SSL_use_PrivateKey(ssl, con->conf.ssl_pemfile_pkey)) {
+		log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
+			"failed to set private key for TLS server name", con->tlsext_server_name,
+			ERR_error_string(ERR_get_error(), NULL));
+		return SSL_TLSEXT_ERR_ALERT_FATAL;
+	}
+
+	if (con->conf.ssl_verifyclient) {
+		if (NULL == con->conf.ssl_ca_file_cert_names) {
+			log_error_write(srv, __FILE__, __LINE__, "ssb:s", "SSL:",
+				"can't verify client without ssl.ca-file for TLS server name", con->tlsext_server_name,
+				ERR_error_string(ERR_get_error(), NULL));
+			return SSL_TLSEXT_ERR_ALERT_FATAL;
+		}
+
+		SSL_set_client_CA_list(ssl, SSL_dup_CA_list(con->conf.ssl_ca_file_cert_names));
+		/* forcing verification here is really not that useful - a client could just connect without SNI */
+		SSL_set_verify(
+			ssl,
+			SSL_VERIFY_PEER | (con->conf.ssl_verifyclient_enforce ? SSL_VERIFY_FAIL_IF_NO_PEER_CERT : 0),
+			NULL
+		);
+		SSL_set_verify_depth(ssl, con->conf.ssl_verifyclient_depth);
+	}
+
 	return SSL_TLSEXT_ERR_OK;
 }
 #endif
@@@@ -492,9 +518,100 @@@@ typedef enum {
 	NETWORK_BACKEND_SOLARIS_SENDFILEV
 } network_backend_t;
 
+#ifdef USE_OPENSSL
+static X509* x509_load_pem_file(server *srv, const char *file) {
+	BIO *in;
+	X509 *x = NULL;
+
+	in = BIO_new(BIO_s_file());
+	if (NULL == in) {
+		log_error_write(srv, __FILE__, __LINE__, "S", "SSL: BIO_new(BIO_s_file()) failed");
+		goto error;
+	}
+
+	if (BIO_read_filename(in,file) <= 0) {
+		log_error_write(srv, __FILE__, __LINE__, "SSS", "SSL: BIO_read_filename('", file,"') failed");
+		goto error;
+	}
+	x = PEM_read_bio_X509(in, NULL, NULL, NULL);
+
+	if (NULL == x) {
+		log_error_write(srv, __FILE__, __LINE__, "SSS", "SSL: couldn't read X509 certificate from '", file,"'");
+		goto error;
+	}
+
+	BIO_free(in);
+	return x;
+
+error:
+	if (NULL != x) X509_free(x);
+	if (NULL != in) BIO_free(in);
+	return NULL;
+}
+
+static EVP_PKEY* evp_pkey_load_pem_file(server *srv, const char *file) {
+	BIO *in;
+	EVP_PKEY *x = NULL;
+
+	in=BIO_new(BIO_s_file());
+	if (NULL == in) {
+		log_error_write(srv, __FILE__, __LINE__, "s", "SSL: BIO_new(BIO_s_file()) failed");
+		goto error;
+	}
+
+	if (BIO_read_filename(in,file) <= 0) {
+		log_error_write(srv, __FILE__, __LINE__, "SSS", "SSL: BIO_read_filename('", file,"') failed");
+		goto error;
+	}
+	x = PEM_read_bio_PrivateKey(in, NULL, NULL, NULL);
+
+	if (NULL == x) {
+		log_error_write(srv, __FILE__, __LINE__, "SSS", "SSL: couldn't read private key from '", file,"'");
+		goto error;
+	}
+
+	BIO_free(in);
+	return x;
+
+error:
+	if (NULL != x) EVP_PKEY_free(x);
+	if (NULL != in) BIO_free(in);
+	return NULL;
+}
+
+static int network_openssl_load_pemfile(server *srv, size_t ndx) {
+	specific_config *s = srv->config_storage[ndx];
+
+#ifdef OPENSSL_NO_TLSEXT
+	{
+		data_config *dc = (data_config *)srv->config_context->data[i];
+		if ((ndx > 0 && (COMP_SERVER_SOCKET != dc->comp || dc->cond != CONFIG_COND_EQ))
+			|| !s->ssl_enabled) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
+					"ssl.pemfile only works in SSL socket binding context as openssl version does not support TLS extensions");
+			return -1;
+		}
+	}
+#endif
+
+	if (NULL == (s->ssl_pemfile_x509 = x509_load_pem_file(srv, s->ssl_pemfile->ptr))) return -1;
+	if (NULL == (s->ssl_pemfile_pkey = evp_pkey_load_pem_file(srv, s->ssl_pemfile->ptr))) return -1;
+
+	if (!X509_check_private_key(s->ssl_pemfile_x509, s->ssl_pemfile_pkey)) {
+		log_error_write(srv, __FILE__, __LINE__, "sssb", "SSL:",
+				"Private key does not match the certificate public key, reason:",
+				ERR_error_string(ERR_get_error(), NULL),
+				s->ssl_pemfile);
+		return -1;
+	}
+
+	return 0;
+}
+#endif
+
 int network_init(server *srv) {
 	buffer *b;
-	size_t i;
+	size_t i, j;
 	network_backend_t backend;
 
 #if OPENSSL_VERSION_NUMBER >= 0x0090800fL
@@@@ -581,19 +698,8 @@@@ int network_init(server *srv) {
 		long ssloptions =
 			SSL_OP_ALL | SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION | SSL_OP_NO_COMPRESSION;
 
-		if (buffer_is_empty(s->ssl_pemfile)) continue;
+		if (buffer_is_empty(s->ssl_pemfile) && buffer_is_empty(s->ssl_ca_file)) continue;
 
-#ifdef OPENSSL_NO_TLSEXT
-		{
-			data_config *dc = (data_config *)srv->config_context->data[i];
-			if (COMP_HTTP_HOST == dc->comp) {
-			    log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-					    "can't use ssl.pemfile with $HTTP[\"host\"], openssl version does not support TLS extensions");
-			    return -1;
-			}
-		}
-#endif
-
 		if (srv->ssl_is_init == 0) {
 			SSL_load_error_strings();
 			SSL_library_init();
@@@@ -607,12 +713,43 @@@@ int network_init(server *srv) {
 			}
d16 1
d18 1
a18 27
+		if (!buffer_is_empty(s->ssl_pemfile)) {
+#ifdef OPENSSL_NO_TLSEXT
+			data_config *dc = (data_config *)srv->config_context->data[i];
+			if (COMP_HTTP_HOST == dc->comp) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
+						"can't use ssl.pemfile with $HTTP[\"host\"], openssl version does not support TLS extensions");
+				return -1;
+			}
+#endif
+			if (network_openssl_load_pemfile(srv, i)) return -1;
+		}
+
+
+		if (!buffer_is_empty(s->ssl_ca_file)) {
+			s->ssl_ca_file_cert_names = SSL_load_client_CA_file(s->ssl_ca_file->ptr);
+			if (NULL == s->ssl_ca_file_cert_names) {
+				log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
+						ERR_error_string(ERR_get_error(), NULL), s->ssl_ca_file);
+			}
+		}
+
+		if (buffer_is_empty(s->ssl_pemfile) || !s->ssl_enabled) continue;
+
 		if (NULL == (s->ssl_ctx = SSL_CTX_new(SSLv23_server_method()))) {
 			log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
 					ERR_error_string(ERR_get_error(), NULL));
 			return -1;
a19 8
 
+		/* completely useless identifier; required for client cert verification to work with sessions */
+		if (0 == SSL_CTX_set_session_id_context(s->ssl_ctx, (const unsigned char*) CONST_STR_LEN("lighttpd"))) {
+			log_error_write(srv, __FILE__, __LINE__, "ss:s", "SSL:",
+				"failed to set session context",
+				ERR_error_string(ERR_get_error(), NULL));
+			return -1;
+		}
d21 2
a22 5
 		if (s->ssl_empty_fragments) {
 #ifdef SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 			ssloptions &= ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;
@@@@ -722,45 +859,42 @@@@ int network_init(server *srv) {
 #endif
d24 5
a28 52
 
-		if (!buffer_is_empty(s->ssl_ca_file)) {
-			if (1 != SSL_CTX_load_verify_locations(s->ssl_ctx, s->ssl_ca_file->ptr, NULL)) {
-				log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL), s->ssl_ca_file);
-				return -1;
-			}
-			if (s->ssl_verifyclient) {
-				STACK_OF(X509_NAME) *certs = SSL_load_client_CA_file(s->ssl_ca_file->ptr);
-				if (!certs) {
+		/* load all ssl.ca-files specified in the config into each SSL_CTX to be prepared for SNI */
+		for (j = 0; j < srv->config_context->used; j++) {
+			specific_config *s1 = srv->config_storage[j];
+
+			if (!buffer_is_empty(s1->ssl_ca_file)) {
+				if (1 != SSL_CTX_load_verify_locations(s->ssl_ctx, s1->ssl_ca_file->ptr, NULL)) {
 					log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
-							ERR_error_string(ERR_get_error(), NULL), s->ssl_ca_file);
-				}
-				if (SSL_CTX_set_session_id_context(s->ssl_ctx, (void*) &srv, sizeof(srv)) != 1) {
-					log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
-						ERR_error_string(ERR_get_error(), NULL));
+							ERR_error_string(ERR_get_error(), NULL), s1->ssl_ca_file);
 					return -1;
 				}
-				SSL_CTX_set_client_CA_list(s->ssl_ctx, certs);
-				SSL_CTX_set_verify(
-					s->ssl_ctx,
-					SSL_VERIFY_PEER | (s->ssl_verifyclient_enforce ? SSL_VERIFY_FAIL_IF_NO_PEER_CERT : 0),
-					NULL
+			}
+		}
+
+		if (s->ssl_verifyclient) {
+			if (NULL == s->ssl_ca_file_cert_names) {
+				log_error_write(srv, __FILE__, __LINE__, "s",
+					"SSL: You specified ssl.verifyclient.activate but no ca_file"
 				);
-				SSL_CTX_set_verify_depth(s->ssl_ctx, s->ssl_verifyclient_depth);
+				return -1;
 			}
-		} else if (s->ssl_verifyclient) {
-			log_error_write(
-				srv, __FILE__, __LINE__, "s",
-				"SSL: You specified ssl.verifyclient.activate but no ca_file"
+			SSL_CTX_set_client_CA_list(s->ssl_ctx, SSL_dup_CA_list(s->ssl_ca_file_cert_names));
+			SSL_CTX_set_verify(
+				s->ssl_ctx,
+				SSL_VERIFY_PEER | (s->ssl_verifyclient_enforce ? SSL_VERIFY_FAIL_IF_NO_PEER_CERT : 0),
+				NULL
 			);
+			SSL_CTX_set_verify_depth(s->ssl_ctx, s->ssl_verifyclient_depth);
d30 1
a30 6
 
-		if (SSL_CTX_use_certificate_file(s->ssl_ctx, s->ssl_pemfile->ptr, SSL_FILETYPE_PEM) < 0) {
+		if (SSL_CTX_use_certificate(s->ssl_ctx, s->ssl_pemfile_x509) < 0) {
 			log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
 					ERR_error_string(ERR_get_error(), NULL), s->ssl_pemfile);
 			return -1;
d32 5
d38 2
a39 13
-		if (SSL_CTX_use_PrivateKey_file (s->ssl_ctx, s->ssl_pemfile->ptr, SSL_FILETYPE_PEM) < 0) {
+		if (SSL_CTX_use_PrivateKey(s->ssl_ctx, s->ssl_pemfile_pkey) < 0) {
 			log_error_write(srv, __FILE__, __LINE__, "ssb", "SSL:",
 					ERR_error_string(ERR_get_error(), NULL), s->ssl_pemfile);
 			return -1;
@@@@ -857,7 +991,6 @@@@ int network_init(server *srv) {
 	for (i = 1; i < srv->config_context->used; i++) {
 		data_config *dc = (data_config *)srv->config_context->data[i];
 		specific_config *s = srv->config_storage[i];
-		size_t j;
 
 		/* not our stage */
 		if (COMP_SERVER_SOCKET != dc->comp) continue;
@


1.9
log
@Two fixes from upstream..

- Check success of setuid, setgid, setgroups. CVE-2013-4559
- Fix regression from CVE-2013-4508 (client-cert sessions were broken)

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.8 2013/11/08 21:39:43 brad Exp $
@


1.8
log
@Fix SNI handling; only use key+cert from SNI specific config. CVE-2013-4508

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
a6 1
+++ src/network.c	Fri Nov  8 16:17:55 2013
d184 1
a184 1
@@@@ -607,6 +713,29 @@@@ int network_init(server *srv) {
d214 15
a228 1
@@@@ -722,45 +851,42 @@@@ int network_init(server *srv) {
d297 1
a297 1
@@@@ -857,7 +983,6 @@@@ int network_init(server *srv) {
@


1.8.2.1
log
@- update lighttpd to 1.4.33 and apply the security fixes for CVE-2013-4508

testing/ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.8 2013/11/08 21:39:43 brad Exp $
@


1.8.2.2
log
@backport security fixes for CVE-2013-4559 and fix regression of CVE-2013-4508
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.9 2013/11/30 20:35:44 brad Exp $
d6 1
a6 1
+++ src/network.c	Fri Nov 29 20:41:46 2013
d184 1
a184 1
@@@@ -607,12 +713,43 @@@@ int network_init(server *srv) {
d214 1
a214 15
 			return -1;
 		}
 
+		/* completely useless identifier; required for client cert verification to work with sessions */
+		if (0 == SSL_CTX_set_session_id_context(s->ssl_ctx, (const unsigned char*) CONST_STR_LEN("lighttpd"))) {
+			log_error_write(srv, __FILE__, __LINE__, "ss:s", "SSL:",
+				"failed to set session context",
+				ERR_error_string(ERR_get_error(), NULL));
+			return -1;
+		}
+
 		if (s->ssl_empty_fragments) {
 #ifdef SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 			ssloptions &= ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;
@@@@ -722,45 +859,42 @@@@ int network_init(server *srv) {
d283 1
a283 1
@@@@ -857,7 +991,6 @@@@ int network_init(server *srv) {
@


1.8.2.3
log
@MFC security update to lighttpd 1.4.35. CVE-2014-2323, CVE-2014-2324
http://download.lighttpd.net/lighttpd/security/lighttpd_sa_2014_01.txt

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.8.2.2 2013/12/01 10:08:23 jasper Exp $
@


1.7
log
@update to lighttpd 1.4.30, from Brad (maintainer).
@
text
@d1 59
a59 5
$OpenBSD: patch-src_network_c,v 1.6 2011/12/03 22:26:08 sthen Exp $
--- src/network.c.orig	Sun Apr 24 09:02:45 2011
+++ src/network.c	Fri Dec  2 04:52:34 2011
@@@@ -27,6 +27,19 @@@@
 # include <openssl/rand.h>
d61 3
d66 23
a88 2
+static void ssl_info_callback(const SSL *ssl, int where, int ret) {
+	UNUSED(ret);
d90 19
a108 5
+	if (0 != (where & SSL_CB_HANDSHAKE_START)) {
+		connection *con = SSL_get_app_data(ssl);
+		++con->renegotiations;
+	} else if (0 != (where & SSL_CB_HANDSHAKE_DONE)) {
+		ssl->s3->flags |= SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS;
d110 14
d125 14
d141 13
a153 9
 static handler_t network_server_handle_fdevent(server *srv, void *context, int revents) {
 	server_socket *srv_socket = (server_socket *)context;
 	connection *con;
@@@@ -553,6 +566,11 @@@@ int network_init(server *srv) {
 	/* load SSL certificates */
 	for (i = 0; i < srv->config_context->used; i++) {
 		specific_config *s = srv->config_storage[i];
+#ifndef SSL_OP_NO_COMPRESSION
+# define SSL_OP_NO_COMPRESSION 0
d155 31
a185 7
+		long ssloptions =
+			SSL_OP_ALL | SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION | SSL_OP_NO_COMPRESSION;
 
 		if (buffer_is_empty(s->ssl_pemfile)) continue;
 
@@@@ -586,6 +604,9 @@@@ int network_init(server *srv) {
 			return -1;
d188 11
a198 2
+		SSL_CTX_set_options(s->ssl_ctx, ssloptions);
+		SSL_CTX_set_info_callback(s->ssl_ctx, ssl_info_callback);
a199 7
 		if (!s->ssl_use_sslv2) {
 			/* disable SSLv2 */
 			if (!(SSL_OP_NO_SSLv2 & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv2))) {
@@@@ -611,6 +632,10 @@@@ int network_init(server *srv) {
 						ERR_error_string(ERR_get_error(), NULL));
 				return -1;
 			}
d201 5
a205 2
+			if (s->ssl_honor_cipher_order) {
+				SSL_CTX_set_options(s->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
d207 9
a215 13
 		}
 
 		/* Support for Diffie-Hellman key exchange */
@@@@ -847,7 +872,7 @@@@ int network_register_fdevents(server *srv) {
 	return 0;
 }
 
-int network_write_chunkqueue(server *srv, connection *con, chunkqueue *cq) {
+int network_write_chunkqueue(server *srv, connection *con, chunkqueue *cq, off_t max_bytes) {
 	int ret = -1;
 	off_t written = 0;
 #ifdef TCP_CORK
@@@@ -855,16 +880,34 @@@@ int network_write_chunkqueue(server *srv, connection *
a216 1
 	server_socket *srv_socket = con->srv_socket;
d218 30
a247 31
-	if (con->conf.global_kbytes_per_second &&
-	    *(con->conf.global_bytes_per_second_cnt_ptr) > con->conf.global_kbytes_per_second * 1024) {
-		/* we reached the global traffic limit */
+	if (con->conf.global_kbytes_per_second) {
+		off_t limit = con->conf.global_kbytes_per_second * 1024 - *(con->conf.global_bytes_per_second_cnt_ptr);
+		if (limit <= 0) {
+			/* we reached the global traffic limit */
 
-		con->traffic_limit_reached = 1;
-		joblist_append(srv, con);
+			con->traffic_limit_reached = 1;
+			joblist_append(srv, con);
 
-		return 1;
+			return 1;
+		} else {
+			if (max_bytes > limit) max_bytes = limit;
+		}
 	}
 
+	if (con->conf.kbytes_per_second) {
+		off_t limit = con->conf.kbytes_per_second * 1024 - con->bytes_written_cur_second;
+		if (limit <= 0) {
+			/* we reached the traffic limit */
+
+			con->traffic_limit_reached = 1;
+			joblist_append(srv, con);
+
+			return 1;
+		} else {
+			if (max_bytes > limit) max_bytes = limit;
a248 1
+	}
d250 20
a269 1
 	written = cq->bytes_out;
d271 6
a276 2
 #ifdef TCP_CORK
@@@@ -879,10 +922,10 @@@@ int network_write_chunkqueue(server *srv, connection *
d278 10
a287 9
 	if (srv_socket->is_ssl) {
 #ifdef USE_OPENSSL
-		ret = srv->network_ssl_backend_write(srv, con, con->ssl, cq);
+		ret = srv->network_ssl_backend_write(srv, con, con->ssl, cq, max_bytes);
 #endif
 	} else {
-		ret = srv->network_backend_write(srv, con, con->fd, cq);
+		ret = srv->network_backend_write(srv, con, con->fd, cq, max_bytes);
 	}
d289 2
a290 14
 	if (ret >= 0) {
@@@@ -903,12 +946,5 @@@@ int network_write_chunkqueue(server *srv, connection *
 
 	*(con->conf.global_bytes_per_second_cnt_ptr) += written;
 
-	if (con->conf.kbytes_per_second &&
-	    (con->bytes_written_cur_second > con->conf.kbytes_per_second * 1024)) {
-		/* we reached the traffic limit */
-
-		con->traffic_limit_reached = 1;
-		joblist_append(srv, con);
-	}
 	return ret;
 }
@


1.6
log
@ssl-related fixes from lighttpd upstream via Brad
- [ssl] count renegotiations to prevent client renegotiations
- [ssl] add option to honor server cipher order, true by default
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.5 2011/08/24 21:28:09 sthen Exp $
@


1.5
log
@lighttpd bugfix: Limit amount of bytes we send in one go; fixes stalling in one
connection and timeouts on slow systems. From upstream via Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d3 55
a57 2
+++ src/network.c	Wed Aug 24 02:50:41 2011
@@@@ -847,7 +847,7 @@@@ int network_register_fdevents(server *srv) {
d66 1
a66 1
@@@@ -855,16 +855,34 @@@@ int network_write_chunkqueue(server *srv, connection *
d107 1
a107 1
@@@@ -879,10 +897,10 @@@@ int network_write_chunkqueue(server *srv, connection *
d120 1
a120 1
@@@@ -903,12 +921,5 @@@@ int network_write_chunkqueue(server *srv, connection *
@


1.4
log
@update lighttpd to 1.4.29, from Brad

- while there, remove patch-src_server_c too, all the various /dev/*random
are equivalent now, ok Brad
@
text
@d1 33
a33 81
$OpenBSD: patch-src_network_c,v 1.3 2011/04/25 09:39:36 sthen Exp $

http://redmine.lighttpd.net/issues/2269

--- src/network.c.orig	Tue Aug 17 05:04:38 2010
+++ src/network.c	Sun Apr 24 22:29:51 2011
@@@@ -479,6 +479,55 @@@@ int network_init(server *srv) {
 	size_t i;
 	network_backend_t backend;
 
+#if OPENSSL_VERSION_NUMBER >= 0x0090800fL
+	EC_KEY *ecdh;
+	int nid;
+#endif
+
+#ifdef USE_OPENSSL
+	DH *dh;
+	BIO *bio;
+
+       /* 1024-bit MODP Group with 160-bit prime order subgroup (RFC5114)
+	* -----BEGIN DH PARAMETERS-----
+	* MIIBDAKBgQCxC4+WoIDgHd6S3l6uXVTsUsmfvPsGo8aaap3KUtI7YWBz4oZ1oj0Y
+	* mDjvHi7mUsAT7LSuqQYRIySXXDzUm4O/rMvdfZDEvXCYSI6cIZpzck7/1vrlZEc4
+	* +qMaT/VbzMChUa9fDci0vUW/N982XBpl5oz9p21NpwjfH7K8LkpDcQKBgQCk0cvV
+	* w/00EmdlpELvuZkF+BBN0lisUH/WQGz/FCZtMSZv6h5cQVZLd35pD1UE8hMWAhe0
+	* sBuIal6RVH+eJ0n01/vX07mpLuGQnQ0iY/gKdqaiTAh6CR9THb8KAWm2oorWYqTR
+	* jnOvoy13nVkY0IvIhY9Nzvl8KiSFXm7rIrOy5QICAKA=
+	* -----END DH PARAMETERS-----
+	*/
+
+	static const unsigned char dh1024_p[]={
+		0xB1,0x0B,0x8F,0x96,0xA0,0x80,0xE0,0x1D,0xDE,0x92,0xDE,0x5E,
+		0xAE,0x5D,0x54,0xEC,0x52,0xC9,0x9F,0xBC,0xFB,0x06,0xA3,0xC6,
+		0x9A,0x6A,0x9D,0xCA,0x52,0xD2,0x3B,0x61,0x60,0x73,0xE2,0x86,
+		0x75,0xA2,0x3D,0x18,0x98,0x38,0xEF,0x1E,0x2E,0xE6,0x52,0xC0,
+		0x13,0xEC,0xB4,0xAE,0xA9,0x06,0x11,0x23,0x24,0x97,0x5C,0x3C,
+		0xD4,0x9B,0x83,0xBF,0xAC,0xCB,0xDD,0x7D,0x90,0xC4,0xBD,0x70,
+		0x98,0x48,0x8E,0x9C,0x21,0x9A,0x73,0x72,0x4E,0xFF,0xD6,0xFA,
+		0xE5,0x64,0x47,0x38,0xFA,0xA3,0x1A,0x4F,0xF5,0x5B,0xCC,0xC0,
+		0xA1,0x51,0xAF,0x5F,0x0D,0xC8,0xB4,0xBD,0x45,0xBF,0x37,0xDF,
+		0x36,0x5C,0x1A,0x65,0xE6,0x8C,0xFD,0xA7,0x6D,0x4D,0xA7,0x08,
+		0xDF,0x1F,0xB2,0xBC,0x2E,0x4A,0x43,0x71,
+	};
+
+	static const unsigned char dh1024_g[]={
+		0xA4,0xD1,0xCB,0xD5,0xC3,0xFD,0x34,0x12,0x67,0x65,0xA4,0x42,
+		0xEF,0xB9,0x99,0x05,0xF8,0x10,0x4D,0xD2,0x58,0xAC,0x50,0x7F,
+		0xD6,0x40,0x6C,0xFF,0x14,0x26,0x6D,0x31,0x26,0x6F,0xEA,0x1E,
+		0x5C,0x41,0x56,0x4B,0x77,0x7E,0x69,0x0F,0x55,0x04,0xF2,0x13,
+		0x16,0x02,0x17,0xB4,0xB0,0x1B,0x88,0x6A,0x5E,0x91,0x54,0x7F,
+		0x9E,0x27,0x49,0xF4,0xD7,0xFB,0xD7,0xD3,0xB9,0xA9,0x2E,0xE1,
+		0x90,0x9D,0x0D,0x22,0x63,0xF8,0x0A,0x76,0xA6,0xA2,0x4C,0x08,
+		0x7A,0x09,0x1F,0x53,0x1D,0xBF,0x0A,0x01,0x69,0xB6,0xA2,0x8A,
+		0xD6,0x62,0xA4,0xD1,0x8E,0x73,0xAF,0xA3,0x2D,0x77,0x9D,0x59,
+		0x18,0xD0,0x8B,0xC8,0x85,0x8F,0x4D,0xCE,0xF9,0x7C,0x2A,0x24,
+		0x85,0x5E,0x6E,0xEB,0x22,0xB3,0xB2,0xE5,
+	};
+#endif
+
 	struct nb_map {
 		network_backend_t nb;
 		const char *name;
@@@@ -521,6 +570,7 @@@@ int network_init(server *srv) {
 		if (srv->ssl_is_init == 0) {
 			SSL_load_error_strings();
 			SSL_library_init();
+			OpenSSL_add_all_algorithms();
 			srv->ssl_is_init = 1;
 
 			if (0 == RAND_status()) {
@@@@ -545,6 +595,15 @@@@ int network_init(server *srv) {
 			}
 		}
 
+		if (!s->ssl_use_sslv3) {
+			/* disable SSLv3 */
+			if (!(SSL_OP_NO_SSLv3 & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv3))) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
+						ERR_error_string(ERR_get_error(), NULL));
+				return -1;
+			}
d35 6
d42 2
a43 7
 		if (!buffer_is_empty(s->ssl_cipher_list)) {
 			/* Disable support for low encryption ciphers */
 			if (SSL_CTX_set_cipher_list(s->ssl_ctx, s->ssl_cipher_list->ptr) != 1) {
@@@@ -553,6 +612,65 @@@@ int network_init(server *srv) {
 				return -1;
 			}
 		}
d45 1
a45 14
+		/* Support for Diffie-Hellman key exchange */
+		if (!buffer_is_empty(s->ssl_dh_file)) {
+			/* DH parameters from file */
+			bio = BIO_new_file((char *) s->ssl_dh_file->ptr, "r");
+			if (bio == NULL) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: Unable to open file", s->ssl_dh_file->ptr);
+				return -1;
+			}
+			dh = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
+			BIO_free(bio);
+			if (dh == NULL) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: PEM_read_bio_DHparams failed", s->ssl_dh_file->ptr);
+				return -1;
+			}
d47 1
a47 14
+			/* Default DH parameters from RFC5114 */
+			dh = DH_new();
+			if (dh == NULL) {
+				log_error_write(srv, __FILE__, __LINE__, "s", "SSL: DH_new () failed");
+				return -1;
+			}
+			dh->p = BN_bin2bn(dh1024_p,sizeof(dh1024_p), NULL);
+			dh->g = BN_bin2bn(dh1024_g,sizeof(dh1024_g), NULL);
+			dh->length = 160;
+			if ((dh->p == NULL) || (dh->g == NULL)) {
+				DH_free(dh);
+				log_error_write(srv, __FILE__, __LINE__, "s", "SSL: BN_bin2bn () failed");
+				return -1;
+			}
d49 1
a49 3
+		SSL_CTX_set_tmp_dh(s->ssl_ctx,dh);
+		SSL_CTX_set_options(s->ssl_ctx,SSL_OP_SINGLE_DH_USE);
+		DH_free(dh);
d51 19
a69 24
+#if OPENSSL_VERSION_NUMBER >= 0x0090800fL
+#ifndef OPENSSL_NO_ECDH
+		/* Support for Elliptic-Curve Diffie-Hellman key exchange */
+		if (!buffer_is_empty(s->ssl_ec_curve)) {
+			/* OpenSSL only supports the "named curves" from RFC 4492, section 5.1.1. */
+			nid = OBJ_sn2nid((char *) s->ssl_ec_curve->ptr);
+			if (nid == 0) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: Unknown curve name", s->ssl_ec_curve->ptr);
+				return -1;
+			}
+		} else {
+			/* Default curve */
+			nid = OBJ_sn2nid("prime256v1");
+		}
+		ecdh = EC_KEY_new_by_curve_name(nid);
+		if (ecdh == NULL) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: Unable to create curve", s->ssl_ec_curve->ptr);
+			return -1;
+		}
+		SSL_CTX_set_tmp_ecdh(s->ssl_ctx,ecdh);
+		SSL_CTX_set_options(s->ssl_ctx,SSL_OP_SINGLE_ECDH_USE);
+		EC_KEY_free(ecdh);
+#endif
+#endif
d71 9
a79 2
 		if (!buffer_is_empty(s->ssl_ca_file)) {
 			if (1 != SSL_CTX_load_verify_locations(s->ssl_ctx, s->ssl_ca_file->ptr, NULL)) {
@


1.3
log
@- backport a patch from upstream to avoid a conflict between OpenSSL and
internal implementations of MD5. Fixes SSL problems with some clients.

From Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.2 2011/03/20 13:42:53 sthen Exp $
@


1.2
log
@Fixes from upstream via Brad (maintainer)
* mod_proxy: fix delayed connect
* mod_cgi: make read buffer as big as incoming data block
* ssl: Support for Diffie-Hellman and Elliptic-Curve Diffie-Hellman
key exchange (add ssl.use-sslv3)

While there, update autoconf version comment, should be 2.67.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.1 2010/11/07 19:13:40 jasper Exp $
d5 3
a7 3
--- src/network.c.orig	Mon Mar 14 21:24:13 2011
+++ src/network.c	Mon Mar 14 21:24:17 2011
@@@@ -479,6 +479,52 @@@@ int network_init(server *srv) {
a10 2
+	DH *dh;
+	BIO *bio;
d16 4
d31 1
a31 1
+	static unsigned char dh1024_p[]={
d45 1
a45 1
+	static unsigned char dh1024_g[]={
d58 1
d63 1
a63 1
@@@@ -521,6 +567,7 @@@@ int network_init(server *srv) {
d71 1
a71 1
@@@@ -545,6 +592,15 @@@@ int network_init(server *srv) {
d87 1
a87 1
@@@@ -553,6 +609,65 @@@@ int network_init(server *srv) {
@


1.1
log
@- unbreak https

from brad (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
d5 56
a60 3
--- src/network.c.orig	Sat Nov  6 16:13:11 2010
+++ src/network.c	Sat Nov  6 16:13:35 2010
@@@@ -521,6 +521,7 @@@@ int network_init(server *srv) {
d68 82
@


1.1.2.1
log
@- Fixes from upstream via Brad (maintainer)
* mod_proxy: fix delayed connect
* mod_cgi: make read buffer as big as incoming data block
* ssl: Support for Diffie-Hellman and Elliptic-Curve Diffie-Hellman
key exchange (add ssl.use-sslv3)

- backport a patch from upstream to avoid a conflict between OpenSSL and
internal implementations of MD5. Fixes SSL problems with some clients.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_c,v 1.3 2011/04/25 09:39:36 sthen Exp $
d5 3
a7 59
--- src/network.c.orig	Tue Aug 17 05:04:38 2010
+++ src/network.c	Sun Apr 24 22:29:51 2011
@@@@ -479,6 +479,55 @@@@ int network_init(server *srv) {
 	size_t i;
 	network_backend_t backend;
 
+#if OPENSSL_VERSION_NUMBER >= 0x0090800fL
+	EC_KEY *ecdh;
+	int nid;
+#endif
+
+#ifdef USE_OPENSSL
+	DH *dh;
+	BIO *bio;
+
+       /* 1024-bit MODP Group with 160-bit prime order subgroup (RFC5114)
+	* -----BEGIN DH PARAMETERS-----
+	* MIIBDAKBgQCxC4+WoIDgHd6S3l6uXVTsUsmfvPsGo8aaap3KUtI7YWBz4oZ1oj0Y
+	* mDjvHi7mUsAT7LSuqQYRIySXXDzUm4O/rMvdfZDEvXCYSI6cIZpzck7/1vrlZEc4
+	* +qMaT/VbzMChUa9fDci0vUW/N982XBpl5oz9p21NpwjfH7K8LkpDcQKBgQCk0cvV
+	* w/00EmdlpELvuZkF+BBN0lisUH/WQGz/FCZtMSZv6h5cQVZLd35pD1UE8hMWAhe0
+	* sBuIal6RVH+eJ0n01/vX07mpLuGQnQ0iY/gKdqaiTAh6CR9THb8KAWm2oorWYqTR
+	* jnOvoy13nVkY0IvIhY9Nzvl8KiSFXm7rIrOy5QICAKA=
+	* -----END DH PARAMETERS-----
+	*/
+
+	static const unsigned char dh1024_p[]={
+		0xB1,0x0B,0x8F,0x96,0xA0,0x80,0xE0,0x1D,0xDE,0x92,0xDE,0x5E,
+		0xAE,0x5D,0x54,0xEC,0x52,0xC9,0x9F,0xBC,0xFB,0x06,0xA3,0xC6,
+		0x9A,0x6A,0x9D,0xCA,0x52,0xD2,0x3B,0x61,0x60,0x73,0xE2,0x86,
+		0x75,0xA2,0x3D,0x18,0x98,0x38,0xEF,0x1E,0x2E,0xE6,0x52,0xC0,
+		0x13,0xEC,0xB4,0xAE,0xA9,0x06,0x11,0x23,0x24,0x97,0x5C,0x3C,
+		0xD4,0x9B,0x83,0xBF,0xAC,0xCB,0xDD,0x7D,0x90,0xC4,0xBD,0x70,
+		0x98,0x48,0x8E,0x9C,0x21,0x9A,0x73,0x72,0x4E,0xFF,0xD6,0xFA,
+		0xE5,0x64,0x47,0x38,0xFA,0xA3,0x1A,0x4F,0xF5,0x5B,0xCC,0xC0,
+		0xA1,0x51,0xAF,0x5F,0x0D,0xC8,0xB4,0xBD,0x45,0xBF,0x37,0xDF,
+		0x36,0x5C,0x1A,0x65,0xE6,0x8C,0xFD,0xA7,0x6D,0x4D,0xA7,0x08,
+		0xDF,0x1F,0xB2,0xBC,0x2E,0x4A,0x43,0x71,
+	};
+
+	static const unsigned char dh1024_g[]={
+		0xA4,0xD1,0xCB,0xD5,0xC3,0xFD,0x34,0x12,0x67,0x65,0xA4,0x42,
+		0xEF,0xB9,0x99,0x05,0xF8,0x10,0x4D,0xD2,0x58,0xAC,0x50,0x7F,
+		0xD6,0x40,0x6C,0xFF,0x14,0x26,0x6D,0x31,0x26,0x6F,0xEA,0x1E,
+		0x5C,0x41,0x56,0x4B,0x77,0x7E,0x69,0x0F,0x55,0x04,0xF2,0x13,
+		0x16,0x02,0x17,0xB4,0xB0,0x1B,0x88,0x6A,0x5E,0x91,0x54,0x7F,
+		0x9E,0x27,0x49,0xF4,0xD7,0xFB,0xD7,0xD3,0xB9,0xA9,0x2E,0xE1,
+		0x90,0x9D,0x0D,0x22,0x63,0xF8,0x0A,0x76,0xA6,0xA2,0x4C,0x08,
+		0x7A,0x09,0x1F,0x53,0x1D,0xBF,0x0A,0x01,0x69,0xB6,0xA2,0x8A,
+		0xD6,0x62,0xA4,0xD1,0x8E,0x73,0xAF,0xA3,0x2D,0x77,0x9D,0x59,
+		0x18,0xD0,0x8B,0xC8,0x85,0x8F,0x4D,0xCE,0xF9,0x7C,0x2A,0x24,
+		0x85,0x5E,0x6E,0xEB,0x22,0xB3,0xB2,0xE5,
+	};
+#endif
+
 	struct nb_map {
 		network_backend_t nb;
 		const char *name;
@@@@ -521,6 +570,7 @@@@ int network_init(server *srv) {
a14 82
@@@@ -545,6 +595,15 @@@@ int network_init(server *srv) {
 			}
 		}
 
+		if (!s->ssl_use_sslv3) {
+			/* disable SSLv3 */
+			if (!(SSL_OP_NO_SSLv3 & SSL_CTX_set_options(s->ssl_ctx, SSL_OP_NO_SSLv3))) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL:",
+						ERR_error_string(ERR_get_error(), NULL));
+				return -1;
+			}
+		}
+
 		if (!buffer_is_empty(s->ssl_cipher_list)) {
 			/* Disable support for low encryption ciphers */
 			if (SSL_CTX_set_cipher_list(s->ssl_ctx, s->ssl_cipher_list->ptr) != 1) {
@@@@ -553,6 +612,65 @@@@ int network_init(server *srv) {
 				return -1;
 			}
 		}
+
+		/* Support for Diffie-Hellman key exchange */
+		if (!buffer_is_empty(s->ssl_dh_file)) {
+			/* DH parameters from file */
+			bio = BIO_new_file((char *) s->ssl_dh_file->ptr, "r");
+			if (bio == NULL) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: Unable to open file", s->ssl_dh_file->ptr);
+				return -1;
+			}
+			dh = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
+			BIO_free(bio);
+			if (dh == NULL) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: PEM_read_bio_DHparams failed", s->ssl_dh_file->ptr);
+				return -1;
+			}
+		} else {
+			/* Default DH parameters from RFC5114 */
+			dh = DH_new();
+			if (dh == NULL) {
+				log_error_write(srv, __FILE__, __LINE__, "s", "SSL: DH_new () failed");
+				return -1;
+			}
+			dh->p = BN_bin2bn(dh1024_p,sizeof(dh1024_p), NULL);
+			dh->g = BN_bin2bn(dh1024_g,sizeof(dh1024_g), NULL);
+			dh->length = 160;
+			if ((dh->p == NULL) || (dh->g == NULL)) {
+				DH_free(dh);
+				log_error_write(srv, __FILE__, __LINE__, "s", "SSL: BN_bin2bn () failed");
+				return -1;
+			}
+		}
+		SSL_CTX_set_tmp_dh(s->ssl_ctx,dh);
+		SSL_CTX_set_options(s->ssl_ctx,SSL_OP_SINGLE_DH_USE);
+		DH_free(dh);
+
+#if OPENSSL_VERSION_NUMBER >= 0x0090800fL
+#ifndef OPENSSL_NO_ECDH
+		/* Support for Elliptic-Curve Diffie-Hellman key exchange */
+		if (!buffer_is_empty(s->ssl_ec_curve)) {
+			/* OpenSSL only supports the "named curves" from RFC 4492, section 5.1.1. */
+			nid = OBJ_sn2nid((char *) s->ssl_ec_curve->ptr);
+			if (nid == 0) {
+				log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: Unknown curve name", s->ssl_ec_curve->ptr);
+				return -1;
+			}
+		} else {
+			/* Default curve */
+			nid = OBJ_sn2nid("prime256v1");
+		}
+		ecdh = EC_KEY_new_by_curve_name(nid);
+		if (ecdh == NULL) {
+			log_error_write(srv, __FILE__, __LINE__, "ss", "SSL: Unable to create curve", s->ssl_ec_curve->ptr);
+			return -1;
+		}
+		SSL_CTX_set_tmp_ecdh(s->ssl_ctx,ecdh);
+		SSL_CTX_set_options(s->ssl_ctx,SSL_OP_SINGLE_ECDH_USE);
+		EC_KEY_free(ecdh);
+#endif
+#endif
 
 		if (!buffer_is_empty(s->ssl_ca_file)) {
 			if (1 != SSL_CTX_load_verify_locations(s->ssl_ctx, s->ssl_ca_file->ptr, NULL)) {
@


