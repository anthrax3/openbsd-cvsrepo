head	1.16;
access;
symbols
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.16
date	2016.11.11.10.23.34;	author sthen;	state dead;
branches;
next	1.15;
commitid	zcSafSSsrSci3osM;

1.15
date	2016.10.12.08.09.26;	author ajacoutot;	state Exp;
branches;
next	1.14;
commitid	RcsywKx0OmgVaY4K;

1.14
date	2016.09.17.20.22.41;	author ajacoutot;	state Exp;
branches;
next	1.13;
commitid	erqZjU8459iZzz15;

1.13
date	2013.09.30.19.26.08;	author brad;	state dead;
branches;
next	1.12;

1.12
date	2013.03.28.16.22.32;	author brad;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2013.01.14.09.17.03;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.01.08.20.50;	author sthen;	state dead;
branches;
next	1.9;

1.9
date	2012.04.28.09.25.25;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.20.22.27.28;	author sthen;	state dead;
branches;
next	1.7;

1.7
date	2011.08.24.21.28.09;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2009.11.25.23.06.53;	author sthen;	state dead;
branches;
next	1.5;

1.5
date	2009.11.08.13.16.40;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.25.21.31.46;	author rui;	state dead;
branches;
next	1.3;

1.3
date	2007.07.22.19.44.17;	author rui;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.09.19.00.59;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2006.02.09.02.30.40;	author brad;	state Exp;
branches;
next	;

1.12.2.1
date	2013.11.22.08.42.13;	author jasper;	state dead;
branches;
next	;


desc
@@


1.16
log
@update to lighttpd-1.4.43, from Brad
@
text
@$OpenBSD: patch-src_mod_fastcgi_c,v 1.15 2016/10/12 08:09:26 ajacoutot Exp $

- [core] enforce wait for POLLWR after EINPROGRESS (fixes #2744)
- [core] fix crash if ready events on abandoned fd (fixes #2748)
- performance: use Linux extended syscalls and flags

--- src/mod_fastcgi.c.orig	Mon Oct 10 18:05:45 2016
+++ src/mod_fastcgi.c	Mon Oct 10 18:04:38 2016
@@@@ -965,7 +965,7 @@@@ static int fcgi_spawn_connection(server *srv,
 		buffer_append_int(proc->connection_name, proc->port);
 	}
 
-	if (-1 == (fcgi_fd = socket(fcgi_addr->sa_family, SOCK_STREAM, 0))) {
+	if (-1 == (fcgi_fd = fdevent_socket_cloexec(fcgi_addr->sa_family, SOCK_STREAM, 0))) {
 		log_error_write(srv, __FILE__, __LINE__, "ss",
 				"failed:", strerror(errno));
 		return -1;
@@@@ -984,7 +984,7 @@@@ static int fcgi_spawn_connection(server *srv,
 		close(fcgi_fd);
 
 		/* reopen socket */
-		if (-1 == (fcgi_fd = socket(fcgi_addr->sa_family, SOCK_STREAM, 0))) {
+		if (-1 == (fcgi_fd = fdevent_socket_cloexec(fcgi_addr->sa_family, SOCK_STREAM, 0))) {
 			log_error_write(srv, __FILE__, __LINE__, "ss",
 				"socket failed:", strerror(errno));
 			return -1;
@@@@ -1032,10 +1032,13 @@@@ static int fcgi_spawn_connection(server *srv,
 			arg.used = 0;
 
 			if(fcgi_fd != FCGI_LISTENSOCK_FILENO) {
-				close(FCGI_LISTENSOCK_FILENO);
 				dup2(fcgi_fd, FCGI_LISTENSOCK_FILENO);
 				close(fcgi_fd);
 			}
+		      #ifdef SOCK_CLOEXEC
+			else
+				fcntl(fcgi_fd, F_SETFD, 0); /* clear cloexec */
+		      #endif
 
 			/* we don't need the client socket */
 			for (i = 3; i < 256; i++) {
@@@@ -1577,8 +1580,7 @@@@ static void fcgi_connection_close(server *srv, handler
 	if (hctx->fd != -1) {
 		fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
 		fdevent_unregister(srv->ev, hctx->fd);
-		close(hctx->fd);
-		srv->cur_fds--;
+		fdevent_sched_close(srv->ev, hctx->fd, 1);
 	}
 
 	if (hctx->host && hctx->proc) {
@@@@ -1631,8 +1633,7 @@@@ static int fcgi_reconnect(server *srv, handler_ctx *hc
 	if (hctx->fd != -1) {
 		fdevent_event_del(srv->ev, &(hctx->fde_ndx), hctx->fd);
 		fdevent_unregister(srv->ev, hctx->fd);
-		close(hctx->fd);
-		srv->cur_fds--;
+		fdevent_sched_close(srv->ev, hctx->fd, 1);
 		hctx->fd = -1;
 	}
 
@@@@ -2936,7 +2937,7 @@@@ static handler_t fcgi_write_request(server *srv, handl
 			if (proc->load < hctx->proc->load) hctx->proc = proc;
 		}
 
-		if (-1 == (hctx->fd = socket(host->family, SOCK_STREAM, 0))) {
+		if (-1 == (hctx->fd = fdevent_socket_nb_cloexec(host->family, SOCK_STREAM, 0))) {
 			if (errno == EMFILE ||
 			    errno == EINTR) {
 				log_error_write(srv, __FILE__, __LINE__, "sd",
@@@@ -3257,7 +3258,8 @@@@ SUBREQUEST_FUNC(mod_fastcgi_handle_subrequest) {
 		}
 	}
 
-	return (0 == hctx->wb->bytes_in || !chunkqueue_is_empty(hctx->wb))
+	return ((0 == hctx->wb->bytes_in || !chunkqueue_is_empty(hctx->wb))
+		&& hctx->state != FCGI_STATE_CONNECT_DELAYED)
 	  ? fcgi_send_request(srv, hctx)
 	  : HANDLER_WAIT_FOR_EVENT;
 }
@


1.15
log
@Bring in a commit from upstream
- performance: use Linux extended syscalls and flags

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_fastcgi_c,v 1.14 2016/09/17 20:22:41 ajacoutot Exp $
@


1.14
log
@Update to lighttpd-1.4.41.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d5 1
d7 36
a42 3
--- src/mod_fastcgi.c.orig	Wed Sep 14 21:06:57 2016
+++ src/mod_fastcgi.c	Wed Sep 14 21:04:56 2016
@@@@ -1577,8 +1577,7 @@@@ static void fcgi_connection_close(server *srv, handler
d52 1
a52 1
@@@@ -1631,8 +1630,7 @@@@ static int fcgi_reconnect(server *srv, handler_ctx *hc
d62 10
a71 1
@@@@ -3257,7 +3255,8 @@@@ SUBREQUEST_FUNC(mod_fastcgi_handle_subrequest) {
@


1.13
log
@Update to lighttpd 1.4.33.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_fastcgi_c,v 1.12 2013/03/28 16:22:32 brad Exp $
d3 2
a4 2
- Fix mix up of "mode" => "authorizer" in other FastCGI configs.
- Support multi line logging.
d6 10
a15 4
--- src/mod_fastcgi.c.orig	Sat Nov 17 12:32:14 2012
+++ src/mod_fastcgi.c	Wed Mar 27 09:16:41 2013
@@@@ -1275,6 +1275,7 @@@@ SETDEFAULTS_FUNC(mod_fastcgi_set_defaults) {
 					}
d17 10
a26 2
 					host = fastcgi_host_init();
+					buffer_reset(fcgi_mode);
d28 3
a30 1
 					buffer_copy_string_buffer(host->id, da_host->key);
d32 6
a37 11
@@@@ -2673,8 +2674,8 @@@@ static int fcgi_demux_response(server *srv, handler_ct
 		case FCGI_STDERR:
 			if (packet.len == 0) break;
 
-			log_error_write(srv, __FILE__, __LINE__, "sb",
-					"FastCGI-stderr:", packet.b);
+			log_error_write_multiline_buffer(srv, __FILE__, __LINE__, packet.b, "s",
+					"FastCGI-stderr:");
 
 			break;
 		case FCGI_END_REQUEST:
@


1.12
log
@More fixes from upstream..

- Support multi line logging.
- Call ERR_clear_error only for SSL connections in CON_STATE_ERROR.
- Reject non ASCII characters in HTTP header names.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_fastcgi_c,v 1.11 2013/01/14 09:17:03 brad Exp $
@


1.12.2.1
log
@- update lighttpd to 1.4.33 and apply the security fixes for CVE-2013-4508

testing/ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_fastcgi_c,v 1.12 2013/03/28 16:22:32 brad Exp $
@


1.11
log
@mod_fastcgi: Fix mix up of "mode" => "authorizer" in other FastCGI configs.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 1
Fix mix up of "mode" => "authorizer" in other FastCGI configs.
d6 2
a7 2
--- src/mod_fastcgi.c.orig	Sun Jan 13 23:09:08 2013
+++ src/mod_fastcgi.c	Sun Jan 13 23:09:32 2013
d16 11
@


1.10
log
@update to lighttpd 1.4.31, rolling in the backported patches. ok brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_fastcgi_c,v 1.9 2012/04/28 09:25:25 sthen Exp $
d3 1
a3 2
- Add "AUTH_TYPE" environment (for *cgi), remove fastcgi specific workaround.
- Fix splitting :port with IPv6.
d5 4
a8 3
--- src/mod_fastcgi.c.orig	Mon Apr 23 00:14:54 2012
+++ src/mod_fastcgi.c	Mon Apr 23 00:14:14 2012
@@@@ -1857,9 +1857,15 @@@@ static int fcgi_create_env(server *srv, handler_ctx *h
d10 2
a11 4
 	if (con->server_name->used) {
 		size_t len = con->server_name->used - 1;
-		char *colon = strchr(con->server_name->ptr, ':');
-		if (colon) len = colon - con->server_name->ptr;
d13 1
a13 13
+		if (con->server_name->ptr[0] == '[') {
+			const char *colon = strstr(con->server_name->ptr, "]:");
+			if (colon) len = (colon + 1) - con->server_name->ptr;
+		} else {
+			const char *colon = strchr(con->server_name->ptr, ':');
+			if (colon) len = colon - con->server_name->ptr;
+		}
+
 		FCGI_ENV_ADD_CHECK(fcgi_env_add(p->fcgi_env, CONST_STR_LEN("SERVER_NAME"), con->server_name->ptr, len),con)
 	} else {
 #ifdef HAVE_IPV6
@@@@ -1910,36 +1916,7 @@@@ static int fcgi_create_env(server *srv, handler_ctx *h
 	FCGI_ENV_ADD_CHECK(fcgi_env_add(p->fcgi_env, CONST_STR_LEN("REMOTE_ADDR"), s, strlen(s)),con)
a14 34
 	if (!buffer_is_empty(con->authed_user)) {
-		/* AUTH_TYPE fix by Troy Kruthoff (tkruthoff@@gmail.com)
-		 * section 4.1.1 of RFC 3875 (cgi spec) requires the server to set a AUTH_TYPE env
-		 * declaring the type of authentication used.	 (see http://tools.ietf.org/html/rfc3875#page-11)
-		 *
-		 * I copied this code from mod_auth.c where it extracts auth info from the "Authorization" 
-		 * header to authenticate the user before allowing the request to proceed.  I'm guessing it makes
-		 * sense to re-parse the header here, as mod_auth is unaware if the request is headed for cgi/fcgi.
-		 * Someone more familiar with the lighty internals should be able to quickly determine if we are 
-		 * better storing AUTH_TYPE on the initial parse in mod_auth.
-		 */
-		char *http_authorization = NULL;
-		data_string *ds;
-	  	
 		FCGI_ENV_ADD_CHECK(fcgi_env_add(p->fcgi_env, CONST_STR_LEN("REMOTE_USER"), CONST_BUF_LEN(con->authed_user)),con)
-	
-		if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "Authorization"))) {
-			http_authorization = ds->value->ptr;
-		}
-	
-		if (ds && ds->value && ds->value->used) {
-			char *auth_realm;
-		  if (NULL != (auth_realm = strchr(http_authorization, ' '))) {
-				int auth_type_len = auth_realm - http_authorization;
-				if ((auth_type_len == 5) && (0 == strncmp(http_authorization, "Basic", auth_type_len))) {
-					  fcgi_env_add(p->fcgi_env, CONST_STR_LEN("AUTH_TYPE"), CONST_STR_LEN("Basic"));
-				} else if ((auth_type_len == 6) && (0 == strncmp(http_authorization, "Digest", auth_type_len))) {
-					  fcgi_env_add(p->fcgi_env, CONST_STR_LEN("AUTH_TYPE"), CONST_STR_LEN("Digest"));
-				}
-			}
-		}
 	}
 
 	if (con->request.content_length > 0 && host->mode != FCGI_AUTHORIZER) {
@


1.9
log
@lighttpd fixes, from upstream via Brad.
- Fix handling of empty header list entries in http_request_split_value.
- Fix access log escaping of " and \\.
- Fix digest "md5-sess" implementation (Errata ID 1649, RFC 2617).
- Add "AUTH_TYPE" environment (for *cgi), remove fastcgi specific workaround.
- Fix splitting :port with IPv6.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.8
log
@update to lighttpd 1.4.30, from Brad (maintainer).
@
text
@d1 8
a8 9
$OpenBSD: patch-src_mod_fastcgi_c,v 1.7 2011/08/24 21:28:09 sthen Exp $
--- src/mod_fastcgi.c.orig	Mon Jun 13 07:23:40 2011
+++ src/mod_fastcgi.c	Wed Aug 24 02:50:41 2011
@@@@ -3075,7 +3075,7 @@@@ static handler_t fcgi_write_request(server *srv, handl
 		fcgi_set_state(srv, hctx, FCGI_STATE_WRITE);
 		/* fall through */
 	case FCGI_STATE_WRITE:
-		ret = srv->network_backend_write(srv, con, hctx->fd, hctx->wb);
+		ret = srv->network_backend_write(srv, con, hctx->fd, hctx->wb, MAX_WRITE_LIMIT);
d10 4
a13 1
 		chunkqueue_remove_finished_chunks(hctx->wb);
d15 48
@


1.7
log
@lighttpd bugfix: Limit amount of bytes we send in one go; fixes stalling in one
connection and timeouts on slow systems. From upstream via Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@update to 1.4.25, from Brad
@
text
@d1 9
a9 4
$OpenBSD: patch-src_mod_fastcgi_c,v 1.5 2009/11/08 13:16:40 sthen Exp $
--- src/mod_fastcgi.c.orig	Sat Nov  7 19:41:52 2009
+++ src/mod_fastcgi.c	Sat Nov  7 19:41:43 2009
@@@@ -2416,8 +2416,8 @@@@ typedef struct {
d11 1
a11 7
 static int fastcgi_get_packet(server *srv, handler_ctx *hctx, fastcgi_response_packet *packet) {
 	chunk *	c;
-	size_t offset = 0;
-	size_t toread = 0;
+	size_t offset;
+	size_t toread;
 	FCGI_Header *header;
a12 98
 	if (!hctx->rb->first) return -1;
@@@@ -2428,20 +2428,22 @@@@ static int fastcgi_get_packet(server *srv, handler_ctx
 	packet->padding = 0;
 	packet->request_id = 0;
 
+	offset = 0; toread = 8;
 	/* get at least the FastCGI header */
 	for (c = hctx->rb->first; c; c = c->next) {
-		size_t weWant = sizeof(*header) - (packet->b->used - 1);
 		size_t weHave = c->mem->used - c->offset - 1;
 
-		if (weHave > weWant) weHave = weWant;
+		if (weHave > toread) weHave = toread;
 
 		if (packet->b->used == 0) {
 			buffer_copy_string_len(packet->b, c->mem->ptr + c->offset, weHave);
 		} else {
 			buffer_append_string_len(packet->b, c->mem->ptr + c->offset, weHave);
 		}
+		toread -= weHave;
+		offset = weHave; /* skip offset bytes in chunk for "real" data */
 
-		if (packet->b->used >= sizeof(*header) + 1) break;
+		if (0 == toread) break;
 	}
 
 	if ((packet->b->used == 0) ||
@@@@ -2449,7 +2451,9 @@@@ static int fastcgi_get_packet(server *srv, handler_ctx
 		/* no header */
 		buffer_free(packet->b);
 
-		log_error_write(srv, __FILE__, __LINE__, "sdsds", "FastCGI: header too small:", packet->b->used, "bytes <", sizeof(FCGI_Header), "bytes");
+		if (hctx->plugin_data->conf.debug) {
+			log_error_write(srv, __FILE__, __LINE__, "sdsds", "FastCGI: header too small:", packet->b->used, "bytes <", sizeof(FCGI_Header), "bytes, waiting for more data");
+		}
 		return -1;
 	}
 
@@@@ -2461,9 +2465,6 @@@@ static int fastcgi_get_packet(server *srv, handler_ctx
 	packet->type = header->type;
 	packet->padding = header->paddingLength;
 
-	/* the first bytes in packet->b are the header */
-	offset = sizeof(*header);
-
 	/* ->b should only be the content */
 	buffer_copy_string_len(packet->b, CONST_STR_LEN("")); /* used == 1 */
 
@@@@ -2477,7 +2478,7 @@@@ static int fastcgi_get_packet(server *srv, handler_ctx
 
 			buffer_append_string_len(packet->b, c->mem->ptr + c->offset + offset, weHave);
 
-			/* we only skipped the first 8 bytes as they are the fcgi header */
+			/* we only skipped the first bytes as they belonged to the fcgi header */
 			offset = 0;
 		}
 
@@@@ -3080,34 +3081,17 @@@@ static handler_t fcgi_write_request(server *srv, handl
 
 		if (ret < 0) {
 			switch(errno) {
+			case EPIPE:
 			case ENOTCONN:
+			case ECONNRESET:
 				/* the connection got dropped after accept()
-				 *
-				 * this is most of the time a PHP which dies
-				 * after PHP_FCGI_MAX_REQUESTS
-				 *
+				 * we don't care about that - if you accept() it, you have to handle it.
 				 */
-				if (hctx->wb->bytes_out == 0 &&
-				    hctx->reconnects < 5) {
-					usleep(10000); /* take away the load of the webserver
-							* to give the php a chance to restart
-							*/
 
-					fcgi_reconnect(srv, hctx);
-
-					return HANDLER_WAIT_FOR_FD;
-				}
-
-				/* not reconnected ... why
-				 *
-				 * far@@#lighttpd report this for FreeBSD
-				 *
-				 */
-
-				log_error_write(srv, __FILE__, __LINE__, "ssosd",
-						"[REPORT ME] connection was dropped after accept(). reconnect() denied:",
+				log_error_write(srv, __FILE__, __LINE__, "ssosb",
+							"connection was dropped after accept() (perhaps the fastcgi process died),",
 						"write-offset:", hctx->wb->bytes_out,
-						"reconnect attempts:", hctx->reconnects);
+						"socket:", hctx->proc->connection_name);
 
 				return HANDLER_ERROR;
 			default:
@


1.5
log
@add patches from upstream via Brad:

- disable warning "CLOSE-read"
- reset tlsext_server_name in connection_reset - fixes random
hostnames in the $HTTP["host"] conditional
- mod_fastcgi: fix mod_fastcgi packet parsing
- mod_fastcgi: Don't reconnect after connect() succeeded
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@update lighttpd to 1.4.16

ok brad (maintainer), simon@@
@
text
@d1 83
a83 5
$OpenBSD: patch-src_mod_fastcgi_c,v 1.3 2007/07/22 19:44:17 rui Exp $
--- src/mod_fastcgi.c.orig	Sat Jul 21 11:34:09 2007
+++ src/mod_fastcgi.c	Sat Jul 21 11:35:05 2007
@@@@ -2964,7 +2964,7 @@@@ static handler_t fcgi_write_request(server *srv, handl
 				 *
d85 5
d91 15
a105 3
-				log_error_write(srv, __FILE__, __LINE__, "ssdsd",
+				log_error_write(srv, __FILE__, __LINE__, "ssosd",
 						"[REPORT ME] connection was dropped after accept(). reconnect() denied:",
d107 5
a111 1
 						"reconnect attempts:", hctx->reconnects);
@


1.3
log
@roll in some distribution patches which fix multiple vulnerabilities.
Reference: http://secunia.com/advisories/26130/

ok kili@@, simon@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@upgrade to lighttpd 1.4.11
@
text
@d1 6
a6 4
$OpenBSD: patch-src_mod_fastcgi_c,v 1.1 2006/02/09 02:30:40 brad Exp $
--- src/mod_fastcgi.c.orig	Wed Feb  8 19:05:06 2006
+++ src/mod_fastcgi.c	Wed Feb  8 19:06:32 2006
@@@@ -3425,9 +3425,7 @@@@ static handler_t fcgi_check_extension(se
d8 5
a12 9
 	fn = uri_path_handler ? con->uri.path : con->physical.path;
 
-	if (fn->used == 0) {
-		return HANDLER_ERROR;
-	}
+	if (buffer_is_empty(fn)) return HANDLER_GO_ON;
 	
 	s_len = fn->used - 1;
 	
@


1.1
log
@mod_cgi is resetting physical.path

From lighttpd Trac
@
text
@d1 1
a1 1
$OpenBSD$
@

