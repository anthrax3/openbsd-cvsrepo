head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2012.06.01.08.20.50;	author sthen;	state dead;
branches;
next	1.4;

1.4
date	2012.03.06.08.23.43;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.13.23.02.15;	author sthen;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2008.10.23.20.29.17;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2008.03.16.18.43.31;	author brad;	state Exp;
branches;
next	;

1.3.2.1
date	2012.04.11.14.20.20;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to lighttpd 1.4.31, rolling in the backported patches. ok brad
@
text
@$OpenBSD: patch-src_mod_compress_c,v 1.4 2012/03/06 08:23:43 sthen Exp $

- Fix handling if etags are disabled but cache-dir is set - may lead to double response.
- Disable mmap by default (fixes #2391).

--- src/mod_compress.c.orig	Sun Feb 26 00:15:43 2012
+++ src/mod_compress.c	Sun Feb 26 00:15:33 2012
@@@@ -485,7 +485,7 @@@@ static int deflate_file_to_file(server *srv, connectio
 		return -1;
 	}
 
-
+#ifdef USE_MMAP
 	if (MAP_FAILED == (start = mmap(NULL, sce->st.st_size, PROT_READ, MAP_SHARED, ifd, 0))) {
 		log_error_write(srv, __FILE__, __LINE__, "sbss", "mmaping", fn, "failed", strerror(errno));
 
@@@@ -499,7 +499,24 @@@@ static int deflate_file_to_file(server *srv, connectio
 
 		return -1;
 	}
+#else
+	start = malloc(sce->st.st_size);
+	if (NULL == start || sce->st.st_size != read(ifd, start, sce->st.st_size)) {
+		log_error_write(srv, __FILE__, __LINE__, "sbss", "reading", fn, "failed", strerror(errno));
 
+		close(ofd);
+		close(ifd);
+		free(start);
+
+		/* Remove the incomplete cache file, so that later hits aren't served from it */
+		if (-1 == unlink(p->ofn->ptr)) {
+			log_error_write(srv, __FILE__, __LINE__, "sbss", "unlinking incomplete cachefile", p->ofn, "failed:", strerror(errno));
+		}
+
+		return -1;
+	}
+#endif
+
 	switch(type) {
 #ifdef USE_ZLIB
 	case HTTP_ACCEPT_ENCODING_GZIP:
@@@@ -530,7 +547,12 @@@@ static int deflate_file_to_file(server *srv, connectio
 		}
 	}
 
+#ifdef USE_MMAP
 	munmap(start, sce->st.st_size);
+#else
+	free(start);
+#endif
+
 	close(ofd);
 	close(ifd);
 
@@@@ -571,14 +593,24 @@@@ static int deflate_file_to_buffer(server *srv, connect
 		return -1;
 	}
 
-
+#ifdef USE_MMAP
 	if (MAP_FAILED == (start = mmap(NULL, sce->st.st_size, PROT_READ, MAP_SHARED, ifd, 0))) {
 		log_error_write(srv, __FILE__, __LINE__, "sbss", "mmaping", fn, "failed", strerror(errno));
 
 		close(ifd);
 		return -1;
 	}
+#else
+	start = malloc(sce->st.st_size);
+	if (NULL == start || sce->st.st_size != read(ifd, start, sce->st.st_size)) {
+		log_error_write(srv, __FILE__, __LINE__, "sbss", "reading", fn, "failed", strerror(errno));
 
+		close(ifd);
+		free(start);
+		return -1;
+	}
+#endif
+
 	switch(type) {
 #ifdef USE_ZLIB
 	case HTTP_ACCEPT_ENCODING_GZIP:
@@@@ -598,7 +630,11 @@@@ static int deflate_file_to_buffer(server *srv, connect
 		break;
 	}
 
+#ifdef USE_MMAP
 	munmap(start, sce->st.st_size);
+#else
+	free(start);
+#endif
 	close(ifd);
 
 	if (ret != 0) return -1;
@@@@ -826,7 +862,7 @@@@ PHYSICALPATH_FUNC(mod_compress_physical) {
 					}
 					response_header_overwrite(srv, con, CONST_STR_LEN("Content-Type"), CONST_BUF_LEN(sce->content_type));
 					/* let mod_staticfile handle the cached compressed files, physical path was modified */
-					return p->conf.compress_cache_dir->used ? HANDLER_GO_ON : HANDLER_FINISHED;
+					return (use_etag && p->conf.compress_cache_dir->used) ? HANDLER_GO_ON : HANDLER_FINISHED;
 				}
 			}
 		}
@


1.4
log
@Add a lighttpd fix from upstream. From Brad.
- Disable mmap by default with mod_compress, if a user truncates a file we
are mmapping, reading the truncated area leads to SIGBUS.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_compress_c,v 1.3 2012/01/13 23:02:15 sthen Exp $
@


1.3
log
@updates to lighttpd from upstream svn, from Brad

- remove "let HEAD for 0-byte files return the Content-Length" patch,
there are some cases where this is undesirable

- fix handling if etags are disabled but cache-dir is set - may
lead to double response
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 1
Fix handling if etags are disabled but cache-dir is set - may lead to double response.
d6 88
a93 3
--- src/mod_compress.c.orig	Fri Jan 13 16:26:52 2012
+++ src/mod_compress.c	Fri Jan 13 16:28:29 2012
@@@@ -826,7 +826,7 @@@@ PHYSICALPATH_FUNC(mod_compress_physical) {
@


1.3.2.1
log
@MFC lighttpd patches.

- Disable mmap by default with mod_compress, if a user truncates a file we
are mmapping, reading the truncated area leads to SIGBUS.

- Always convert letters to lowercase to get transitive results.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mod_compress_c,v 1.4 2012/03/06 08:23:43 sthen Exp $
d3 1
a3 2
- Fix handling if etags are disabled but cache-dir is set - may lead to double response.
- Disable mmap by default (fixes #2391).
d5 3
a7 88
--- src/mod_compress.c.orig	Sun Feb 26 00:15:43 2012
+++ src/mod_compress.c	Sun Feb 26 00:15:33 2012
@@@@ -485,7 +485,7 @@@@ static int deflate_file_to_file(server *srv, connectio
 		return -1;
 	}
 
-
+#ifdef USE_MMAP
 	if (MAP_FAILED == (start = mmap(NULL, sce->st.st_size, PROT_READ, MAP_SHARED, ifd, 0))) {
 		log_error_write(srv, __FILE__, __LINE__, "sbss", "mmaping", fn, "failed", strerror(errno));
 
@@@@ -499,7 +499,24 @@@@ static int deflate_file_to_file(server *srv, connectio
 
 		return -1;
 	}
+#else
+	start = malloc(sce->st.st_size);
+	if (NULL == start || sce->st.st_size != read(ifd, start, sce->st.st_size)) {
+		log_error_write(srv, __FILE__, __LINE__, "sbss", "reading", fn, "failed", strerror(errno));
 
+		close(ofd);
+		close(ifd);
+		free(start);
+
+		/* Remove the incomplete cache file, so that later hits aren't served from it */
+		if (-1 == unlink(p->ofn->ptr)) {
+			log_error_write(srv, __FILE__, __LINE__, "sbss", "unlinking incomplete cachefile", p->ofn, "failed:", strerror(errno));
+		}
+
+		return -1;
+	}
+#endif
+
 	switch(type) {
 #ifdef USE_ZLIB
 	case HTTP_ACCEPT_ENCODING_GZIP:
@@@@ -530,7 +547,12 @@@@ static int deflate_file_to_file(server *srv, connectio
 		}
 	}
 
+#ifdef USE_MMAP
 	munmap(start, sce->st.st_size);
+#else
+	free(start);
+#endif
+
 	close(ofd);
 	close(ifd);
 
@@@@ -571,14 +593,24 @@@@ static int deflate_file_to_buffer(server *srv, connect
 		return -1;
 	}
 
-
+#ifdef USE_MMAP
 	if (MAP_FAILED == (start = mmap(NULL, sce->st.st_size, PROT_READ, MAP_SHARED, ifd, 0))) {
 		log_error_write(srv, __FILE__, __LINE__, "sbss", "mmaping", fn, "failed", strerror(errno));
 
 		close(ifd);
 		return -1;
 	}
+#else
+	start = malloc(sce->st.st_size);
+	if (NULL == start || sce->st.st_size != read(ifd, start, sce->st.st_size)) {
+		log_error_write(srv, __FILE__, __LINE__, "sbss", "reading", fn, "failed", strerror(errno));
 
+		close(ifd);
+		free(start);
+		return -1;
+	}
+#endif
+
 	switch(type) {
 #ifdef USE_ZLIB
 	case HTTP_ACCEPT_ENCODING_GZIP:
@@@@ -598,7 +630,11 @@@@ static int deflate_file_to_buffer(server *srv, connect
 		break;
 	}
 
+#ifdef USE_MMAP
 	munmap(start, sce->st.st_size);
+#else
+	free(start);
+#endif
 	close(ifd);
 
 	if (ret != 0) return -1;
@@@@ -826,7 +862,7 @@@@ PHYSICALPATH_FUNC(mod_compress_physical) {
@


1.2
log
@Upgrade to lighttpd 1.4.20. Large bug fix update.

Tested by a number of users.
@
text
@d1 14
a14 4
$OpenBSD: patch-src_mod_compress_c,v 1.1 2008/03/16 18:43:31 brad Exp $
--- src/mod_compress.c.orig	Sun Mar 16 09:14:55 2008
+++ src/mod_compress.c	Sun Mar 16 09:15:28 2008
@@@@ -178,9 +178,9 @@@@ SETDEFAULTS_FUNC(mod_compress_setdefaults) {
a15 9
 
 		if (!buffer_is_empty(s->compress_cache_dir)) {
+			struct stat st;
 			mkdir_recursive(s->compress_cache_dir->ptr);
 
-			struct stat st;
 			if (0 != stat(s->compress_cache_dir->ptr, &st)) {
 				log_error_write(srv, __FILE__, __LINE__, "sbs", "can't stat compress.cache-dir",
 						s->compress_cache_dir, strerror(errno));
@


1.1
log
@upgrade to lighttpd 1.4.19. security and bug fix update. CVE-2008-1270

looks good jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
@

