head	1.6;
access;
symbols
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2013.09.30.19.26.08;	author brad;	state dead;
branches;
next	1.5;

1.5
date	2013.03.28.16.22.32;	author brad;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2012.06.01.08.20.50;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2012.04.28.09.25.25;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.25.21.31.46;	author rui;	state dead;
branches;
next	1.1;

1.1
date	2007.07.22.19.44.17;	author rui;	state Exp;
branches;
next	;

1.5.2.1
date	2013.11.22.08.42.13;	author jasper;	state dead;
branches;
next	;


desc
@@


1.6
log
@Update to lighttpd 1.4.33.

ok sthen@@
@
text
@$OpenBSD: patch-src_request_c,v 1.5 2013/03/28 16:22:32 brad Exp $

Reject non ASCII characters in HTTP header names.

--- src/request.c.orig	Tue Nov 20 05:09:44 2012
+++ src/request.c	Wed Mar 27 09:18:20 2013
@@@@ -584,7 +584,7 @@@@ int http_request_parse(server *srv, connection *con) {
 
 			/**
 			 * 1*<any CHAR except CTLs or separators>
-			 * CTLs == 0-31 + 127
+			 * CTLs == 0-31 + 127, CHAR = 7-bit ascii (0..127)
 			 *
 			 */
 			switch(*cur) {
@@@@ -619,8 +619,14 @@@@ int http_request_parse(server *srv, connection *con) {
 				con->keep_alive = 0;
 				con->response.keep_alive = 0;
 
-				log_error_write(srv, __FILE__, __LINE__, "sbsds",
+				if (srv->srvconf.log_request_header_on_error) {
+					log_error_write(srv, __FILE__, __LINE__, "sbsds",
 						"invalid character in key", con->request.request, cur, *cur, "-> 400");
+
+					log_error_write(srv, __FILE__, __LINE__, "Sb",
+						"request-header:\n",
+						con->request.request);
+				}
 				return 0;
 			case ' ':
 			case '\t':
@@@@ -678,8 +684,6 @@@@ int http_request_parse(server *srv, connection *con) {
 					i++;
 
 					done = 1;
-
-					break;
 				} else {
 					if (srv->srvconf.log_request_header_on_error) {
 						log_error_write(srv, __FILE__, __LINE__, "s", "CR without LF -> 400");
@@@@ -693,53 +697,24 @@@@ int http_request_parse(server *srv, connection *con) {
 					con->response.keep_alive = 0;
 					return 0;
 				}
-				/* fall thru */
-			case 0: /* illegal characters (faster than a if () :) */
-			case 1:
-			case 2:
-			case 3:
-			case 4:
-			case 5:
-			case 6:
-			case 7:
-			case 8:
-			case 10:
-			case 11:
-			case 12:
-			case 14:
-			case 15:
-			case 16:
-			case 17:
-			case 18:
-			case 19:
-			case 20:
-			case 21:
-			case 22:
-			case 23:
-			case 24:
-			case 25:
-			case 26:
-			case 27:
-			case 28:
-			case 29:
-			case 30:
-			case 31:
-			case 127:
-				con->http_status = 400;
-				con->keep_alive = 0;
-				con->response.keep_alive = 0;
+				break;
+			default:
+				if (*cur < 32 || ((unsigned char)*cur) >= 127) {
+					con->http_status = 400;
+					con->keep_alive = 0;
+					con->response.keep_alive = 0;
 
-				if (srv->srvconf.log_request_header_on_error) {
-					log_error_write(srv, __FILE__, __LINE__, "sbsds",
-						"CTL character in key", con->request.request, cur, *cur, "-> 400");
+					if (srv->srvconf.log_request_header_on_error) {
+						log_error_write(srv, __FILE__, __LINE__, "sbsds",
+							"invalid character in key", con->request.request, cur, *cur, "-> 400");
 
-					log_error_write(srv, __FILE__, __LINE__, "Sb",
-						"request-header:\n",
-						con->request.request);
-				}
+						log_error_write(srv, __FILE__, __LINE__, "Sb",
+							"request-header:\n",
+							con->request.request);
+					}
 
-				return 0;
-			default:
+					return 0;
+				}
 				/* ok */
 				break;
 			}
@


1.5
log
@More fixes from upstream..

- Support multi line logging.
- Call ERR_clear_error only for SSL connections in CON_STATE_ERROR.
- Reject non ASCII characters in HTTP header names.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.5.2.1
log
@- update lighttpd to 1.4.33 and apply the security fixes for CVE-2013-4508

testing/ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_request_c,v 1.5 2013/03/28 16:22:32 brad Exp $
@


1.4
log
@update to lighttpd 1.4.31, rolling in the backported patches. ok brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_request_c,v 1.3 2012/04/28 09:25:25 sthen Exp $
d3 1
a3 1
Fix handling of empty header list entries in http_request_split_value.
d5 3
a7 12
--- src/request.c.orig	Wed Nov 30 15:42:19 2011
+++ src/request.c	Mon Apr 23 00:07:25 2012
@@@@ -241,9 +241,11 @@@@ static int http_request_split_value(array *vals, buffe
 			start = s;
 
 			for (; *s != ',' && i < b->used - 1; i++, s++);
+			if (start == s) break; /* empty fields are skipped */
 			end = s - 1;
 
-			for (; (*end == ' ' || *end == '\t') && end > start; end--);
+			for (; end > start && (*end == ' ' || *end == '\t'); end--);
+			if (start == end) break; /* empty fields are skipped */
d9 101
a109 2
 			if (NULL == (ds = (data_string *)array_get_unused_element(vals, TYPE_STRING))) {
 				ds = data_string_init();
@


1.3
log
@lighttpd fixes, from upstream via Brad.
- Fix handling of empty header list entries in http_request_split_value.
- Fix access log escaping of " and \\.
- Fix digest "md5-sess" implementation (Errata ID 1649, RFC 2617).
- Add "AUTH_TYPE" environment (for *cgi), remove fastcgi specific workaround.
- Fix splitting :port with IPv6.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update lighttpd to 1.4.16

ok brad (maintainer), simon@@
@
text
@d1 8
a8 4
$OpenBSD: patch-src_request_c,v 1.1 2007/07/22 19:44:17 rui Exp $
--- src/request.c.orig	Fri Apr 13 16:26:31 2007
+++ src/request.c	Sat Jul 21 11:10:11 2007
@@@@ -284,8 +284,6 @@@@ int http_request_parse(server *srv, connection *con) {
d10 3
a12 1
 	int done = 0;
d14 3
a16 14
-	data_string *ds = NULL;
-
 	/*
 	 * Request: "^(GET|POST|HEAD) ([^ ]+(\\?[^ ]+|)) (HTTP/1\\.[01])$"
 	 * Option : "^([-a-zA-Z]+): (.+)$"
@@@@ -715,12 +713,24 @@@@ int http_request_parse(server *srv, connection *con) {
 			switch(*cur) {
 			case '\r':
 				if (con->parse_request->ptr[i+1] == '\n') {
+					data_string *ds = NULL;
+
 					/* End of Headerline */
 					con->parse_request->ptr[i] = '\0';
 					con->parse_request->ptr[i+1] = '\0';
d18 2
a19 47
 					if (in_folding) {
-						if (!ds) {
+						buffer *key_b;
+						/**
+						 * we use a evil hack to handle the line-folding
+						 * 
+						 * As array_insert_unique() deletes 'ds' in the case of a duplicate
+						 * ds points somewhere and we get a evil crash. As a solution we keep the old
+						 * "key" and get the current value from the hash and append us
+						 *
+						 * */
+
+						if (!key || !key_len) {
 							/* 400 */
 
 							if (srv->srvconf.log_request_header_on_error) {
@@@@ -737,7 +747,15 @@@@ int http_request_parse(server *srv, connection *con) {
 							con->response.keep_alive = 0;
 							return 0;
 						}
-						buffer_append_string(ds->value, value);
+
+						key_b = buffer_init();
+						buffer_copy_string_len(key_b, key, key_len);
+
+						if (NULL != (ds = (data_string *)array_get_element(con->request.headers, key_b->ptr))) {
+							buffer_append_string(ds->value, value);
+						}
+
+						buffer_free(key_b);
 					} else {
 						int s_len;
 						key = con->parse_request->ptr + first;
@@@@ -969,7 +987,12 @@@@ int http_request_parse(server *srv, connection *con) {
 					first = i+1;
 					is_key = 1;
 					value = 0;
-					key_len = 0;
+#if 0
+					/**
+					 * for Bug 1230 keep the key_len a live
+					 */
+					key_len = 0; 
+#endif
 					in_folding = 0;
 				} else {
 					if (srv->srvconf.log_request_header_on_error) {
@


1.1
log
@roll in some distribution patches which fix multiple vulnerabilities.
Reference: http://secunia.com/advisories/26130/

ok kili@@, simon@@
@
text
@d1 1
a1 1
$OpenBSD$
@

