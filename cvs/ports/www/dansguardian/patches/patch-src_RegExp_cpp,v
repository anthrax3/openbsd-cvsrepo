head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.16
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.12
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.14
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.10
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.01.18.15.04.09;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@- update to DansGuardian 2.12.0.3, modified from a diff from abieber
- add an rc script
- fix incompatibility with pcre 8.3+, patch from Debian
- distfiles are now on sourceforge
- drop maintainer; no response to emails

ok abieber@@
@
text
@$OpenBSD$

pcre 8.30 fix, from Debian

--- src/RegExp.cpp.orig	Wed Jan 16 21:13:58 2013
+++ src/RegExp.cpp	Wed Jan 16 21:15:43 2013
@@@@ -146,14 +146,17 @@@@ bool RegExp::match(const char *text)
 	offsets.clear();
 	lengths.clear();
 	imatched = false;
-	regmatch_t *pmatch = new regmatch_t[reg.re_nsub + 1];  // to hold result
+	int num_sub_expressions = MAX_SUB_EXPRESSIONS;
+	if(reg.re_nsub < num_sub_expressions)
+		num_sub_expressions = reg.re_nsub;
+	regmatch_t *pmatch = new regmatch_t[num_sub_expressions + 1];  // to hold result
 	if (!pmatch) {  // if it failed
 		delete[]pmatch;
 		imatched = false;
 		return false;
 		// exception?
 	}
-	if (regexec(&reg, pos, reg.re_nsub + 1, pmatch, 0)) {  // run regex
+	if (regexec(&reg, pos, num_sub_expressions + 1, pmatch, 0)) {  // run regex
 		delete[]pmatch;
 		imatched = false;
 //        #ifdef DGDEBUG
@@@@ -167,7 +170,7 @@@@ bool RegExp::match(const char *text)
 	int error = 0;
 	while (error == 0) {
 		largestoffset = 0;
-		for (i = 0; i <= (signed) reg.re_nsub; i++) {
+		for (i = 0; i <= (signed) num_sub_expressions; i++) {
 			if (pmatch[i].rm_so != -1) {
 				matchlen = pmatch[i].rm_eo - pmatch[i].rm_so;
 				submatch = new char[matchlen + 1];
@@@@ -184,7 +187,7 @@@@ bool RegExp::match(const char *text)
 		}
 		if (largestoffset > 0) {
 			pos += largestoffset;
-			error = regexec(&reg, pos, reg.re_nsub + 1, pmatch, REG_NOTBOL);
+			error = regexec(&reg, pos, num_sub_expressions + 1, pmatch, REG_NOTBOL);
 		} else {
 			error = -1;
 		}
@
