head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	pvalchev_20091218:1.1.1.1
	pvalchev:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2016.06.02.21.03.38;	author sthen;	state Exp;
branches;
next	1.13;
commitid	W1RU9mHJIFcOFHst;

1.13
date	2015.02.22.11.33.57;	author robert;	state Exp;
branches;
next	1.12;
commitid	5vSaT6ucdnz9y8nA;

1.12
date	2015.02.15.19.51.28;	author robert;	state Exp;
branches;
next	1.11;
commitid	aXaFfxvdOjpKJO7H;

1.11
date	2014.07.20.17.23.34;	author robert;	state Exp;
branches;
next	1.10;
commitid	sUKSdiRT7QxmDyOr;

1.10
date	2014.07.20.17.22.33;	author robert;	state Exp;
branches;
next	1.9;
commitid	yFSQqywU9tg3Fhqe;

1.9
date	2012.05.17.08.52.59;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.11.16.24.07;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.05.09.16.19;	author halex;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.17.04.25.06;	author canacar;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.19.11.52.07;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.17.08.35.31;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.08.21.10.28;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.18.22.25.56;	author pvalchev;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.18.22.25.56;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.14
log
@since the chrome wrapper script is already doing some checks and warning
the user if they fail, also add a check for wxallowed on the mountpoint,
a message giving a clue is better than "syntax error: `)' unexpected"
ok robert
@
text
@#!/bin/sh
# $OpenBSD: chrome,v 1.13 2015/02/22 11:33:57 robert Exp $

DATASIZE="716800"
OPENFILES="400"

xm_log() {
	echo -n "$@@\nDo you want to run Chromium anyway?\n\
(If you don't increase these limits, Chromium might fail to work properly.)" | \
		${X11BASE}/bin/xmessage -file - -center -buttons yes:0,no:1 -default no
}

if [ $(ulimit -Sd) -lt ${DATASIZE} ]; then
	ulimit -Sd ${DATASIZE} || \
		xm_log "Cannot increase datasize-cur to at least ${DATASIZE}"
		[ $? -eq 0 ] || exit
fi

if [ $(ulimit -Sn) -lt ${OPENFILES} ]; then
	ulimit -Sn ${OPENFILES} || \
		xm_log "Cannot increase openfiles-cur to at least ${OPENFILES}"
		[ $? -eq 0 ] || exit
fi

if ! mount | grep `df -h ${TRUEPREFIX} | tail -1 | awk '{print $6}'` | 
	grep -q wxallowed; then 
	echo "Filesystem containing ${TRUEPREFIX} must have the 'wxallowed' flag" | 
	    ${X11BASE}/bin/xmessage -file - -center -buttons exit:0 -default exit
	exit
fi

#
# Temporary workaround for the case when chromium crashes and leaves
# the SingletonLock, which prevents chromium to start up.
#
if [ -h ${HOME}/.config/chromium/SingletonLock ]; then
	_pid=`readlink ${HOME}/.config/chromium/SingletonLock | cut -d '-' -f 2`
	kill -0 ${_pid} 2>/dev/null
	if [ $? -gt 0 ]; then
		rm ${HOME}/.config/chromium/SingletonLock
	fi
fi

#
# Issue #395446
# https://code.google.com/p/chromium/issues/detail?id=395446
#
[ -z ${LANG} ] && _l=en_US.UTF-8 || _l=${LANG}

LANG=${_l} exec "${TRUEPREFIX}/chrome/chrome" "${@@}"
@


1.13
log
@Rework how the GPU vendor and device id is detected by using direct calls
to Mesa. The current solution is based on a diff from jsg@@.
Also fix font redering issues with WebKit, with 3rd party TTFs with a
diff from Yoshihisa Matsushita.
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.12 2015/02/15 19:51:28 robert Exp $
d25 7
d50 1
a50 1
LANG=${_l} exec "/usr/local/chrome/chrome" "${@@}"
@


1.12
log
@use mesa to get the gpu vendor and device id and pass it to chromium because
we can't use libpci due to permission restrictions and use some more UI code
on BSD as well
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.11 2014/07/20 17:23:34 robert Exp $
a41 2

eval `/usr/local/chrome/gpuid`
@


1.11
log
@add reference to the bug regarding the LANG environment variable
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.10 2014/07/20 17:22:33 robert Exp $
d42 2
@


1.10
log
@update to 36.0.1985.125;

from this release Chromium uses Aura instead of Gtk+ so the UI will look
a bit different, and that is completely normal.
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.9 2012/05/17 08:52:59 robert Exp $
d37 4
@


1.9
log
@Add a temporary workaround to the chrome wrapper script that checks
if the SingletonLock file is available and valid.
The problem is that when chrome crashes one of the destructors fail to
remove the lockfile and then when you start chrome again, it will
try to communicate with the old PID of the chromium main process, because
the SingletonLock file will point to `hostname`-PID_of_old_chromium and
since that process is not running anymore, startup will fail.
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.8 2012/01/11 16:24:07 ajacoutot Exp $
d37 3
a39 1
exec "${TRUEPREFIX}/chrome/chrome" "${@@}"
@


1.8
log
@Increase limits to minimum working defaults.

ok robert@@ (maintainer)
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.7 2011/07/05 09:16:19 halex Exp $
d23 12
@


1.7
log
@fix the chrome wrapper script a bit

- skip the tests if you already have a running chrome instance
- default to 'no' (meaning you must not use the mouse for doing the
  sensible thing)
- do not start chrome if you just close the window (alt+f4 etc)

ok robert@@
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.6 2011/06/17 04:25:06 canacar Exp $
d4 2
a5 2
PROGDIR=TRUEPREFIX/chrome
FDS=400
d7 10
a16 3
[ `ulimit -Sn` -lt ${FDS} ] && ulimit -n ${FDS} 2>&-
if [ `ulimit -Sn` -lt ${FDS} ]; then
	LMSG="${LMSG}- increase openfiles-max to at least ${FDS}.\n"
d19 4
a22 4
if [ ! -z "${LMSG}" ]; then
	[ -f /etc/login.conf.db ] && LOGINDB=" and rebuild login.conf.db"
	MSG="${MSG}\nYou should make the following changes for your login class in /etc/login.conf${LOGINDB}\n"
	MSG="${MSG}(you will need to logout and login for these to take effect).\n${LMSG}"
d25 1
a25 8
if ! pgrep -f  "^${PROGDIR}/chrome($| )" >&- && [ -n "${MSG}" ]; then
	MSG="${MSG}\nDo you want to run Chromium anyway?"
	MSG="${MSG}\n(If you don't increase these limits, Chromium might fail to work properly.)"

	echo "${MSG}" | /usr/X11R6/bin/xmessage -file - -center -buttons yes:0,no:1 -default no || exit
fi

exec "${PROGDIR}/chrome" "$@@"
@


1.6
log
@Try to set the number of open files to the desired value before warning
about openfiles-max. ok robert@@
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.5 2011/05/19 11:52:07 robert Exp $
d7 1
a7 1
[ `ulimit -Sn` -lt ${FDS} ] && ulimit -n ${FDS}
d18 1
a18 1
if [ ! -z "${MSG}" ]; then
d22 1
a22 5
	answer=`echo ${MSG} | /usr/X11R6/bin/xmessage -center -buttons yes,no -print -file -`

	if [ X"${answer}" = X"no" ]; then
		exit 0
	fi
@


1.5
log
@Add a .desktop file for the menus and install the icons too.
Remove the message about bumping shmall and datasize too.
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.4 2011/05/17 08:35:31 robert Exp $
d7 1
a7 1
[ `ulimit -Sn` -lt ${FDS} ] || ulimit -Sn ${FDS}
@


1.4
log
@- use the same memory allocation values on amd64 and i386 too.
  this makes chrome use way less memory and since it does not hit
  datasize limits anymore, it is way more stable too
- remove the warning of datasize bumping from the wrapper script

tested by sthen@@, jasper@@ and me
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.3 2011/02/08 21:10:28 sthen Exp $
a4 1
SHMALL=32768
a5 5

if [ `/usr/sbin/sysctl -n kern.shminfo.shmall` -lt ${SHMALL} ]; then
	MSG="You should increase the kern.shminfo.shmall sysctl to at least ${SHMALL},"
	MSG="${MSG}\ne.g.: sysctl kern.shminfo.shmall=${SHMALL}. This can be added to /etc/sysctl.conf.\n"
fi
@


1.3
log
@tweak wrapper script; use larger default limits for FD and datasize
(you may still need to raise them if you open many tabs, but this
should be enough to avoid problems in normal use), only warn if
softlimits can't be raised, and adjust messages to mention login.conf
(and login.conf.db if detected).

ok espie@@ "feel free to modify it if you don't like it" robert@@
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.2 2011/02/08 09:43:02 espie Exp $
a5 1
DATASIZ=716800
a10 5
fi

[ `ulimit -Sd` -lt ${DATASIZ} ] || ulimit -Sd ${DATASIZ}
if [ `ulimit -Sd` -lt ${DATASIZ} ]; then
	LMSG="- increase datasize-max to at least ${DATASIZ}.\n"
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d2 1
a2 1
# $OpenBSD: chrome,v 1.1.1.1 2009/12/18 22:25:56 pvalchev Exp $
d6 2
a7 2
DATASIZ=71680
FDS=256
d10 2
a11 2
	MSG="You should bump the kern.shminfo.shmall sysctl to at least ${SHMALL}."
	MSG="${MSG}\ne.g.: sysctl kern.shminfo.shmall=${SHMALL}\n"
d14 1
d16 1
a16 2
	MSG="${MSG}\nYou should bump your datasize limit to at least ${DATASIZ}."
	MSG="${MSG}\ne.g.: ulimit -Sd ${DATASIZ}\n"
d19 1
d21 7
a27 2
	MSG="${MSG}\nYou should bump your nofiles(descriptors) limit to at least ${FDS}."
	MSG="${MSG}\ne.g.: ulimit -Sn ${FDS}\n"
d31 2
a32 2
	MSG="${MSG}\n\nDo you want to run Chromium anyways?"
	MSG="${MSG}\n(If you don't bump these limits, Chromium might fail to work properly.)"
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $OpenBSD$
d5 30
@


1.1.1.1
log
@Initial import of Chromium for OpenBSD, a multi-month effort! :)
i386 and amd64 supported.

Chromium is an open-source browser project that aims
to build a safer, faster, and more stable way for all
Internet users to experience the web. http://www.chromium.org/

This is version 4.0.251.0 with a tarball already including hundreds
of patches by myself, Sprewell, Ben Laurie and others from the original
FreeBSD effort. See homepage for more details and known issue:
http://sightly.net/peter/openbsd/chromium/
(right now, there are i386 & amd64 -current packages there that can
be pkg_add'ed, links to the FreeBSD page for more info, etc)

The patches are being cleaned up and sent upstream in chunks, the
goal will be to have a clean tarball eventually. I _just_ got this
working earlier this week so it may crash and burn (especially on
amd64 as some parts do not appear 64-bit clean), let me know.

"commit it and let's work on it in-tree" espie@@, robert@@ & others
@
text
@@
