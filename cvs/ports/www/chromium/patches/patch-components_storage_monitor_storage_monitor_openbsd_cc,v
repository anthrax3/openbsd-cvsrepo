head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2016.03.06.10.51.14;	author robert;	state Exp;
branches;
next	1.2;
commitid	Upms3IeOsaLsGxbP;

1.2
date	2014.05.24.15.27.34;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.17.16.27.53;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 49.0.2623.75
@
text
@$OpenBSD: patch-components_storage_monitor_storage_monitor_openbsd_cc,v 1.2 2014/05/24 15:27:34 robert Exp $
--- components/storage_monitor/storage_monitor_openbsd.cc.orig.port	Sat Mar  5 17:44:02 2016
+++ components/storage_monitor/storage_monitor_openbsd.cc	Sat Mar  5 17:49:32 2016
@@@@ -0,0 +1,54 @@@@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// StorageMonitorOpenBSD implementation.
+
+#include "components/storage_monitor/storage_monitor_openbsd.h"
+
+#include <stdio.h>
+
+#include <list>
+
+#include "base/bind.h"
+#include "base/metrics/histogram.h"
+#include "base/process/kill.h"
+#include "base/process/launch.h"
+#include "base/stl_util.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
+#include "components/storage_monitor/media_storage_util.h"
+#include "components/storage_monitor/removable_device_constants.h"
+#include "components/storage_monitor/storage_info.h"
+
+using content::BrowserThread;
+
+namespace storage_monitor {
+
+namespace {
+
+}  // namespace
+
+StorageMonitorOpenBSD::StorageMonitorOpenBSD() {
+  DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
+}
+
+StorageMonitorOpenBSD::~StorageMonitorOpenBSD() {
+  DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));
+}
+
+void StorageMonitorOpenBSD::Init() {
+}
+
+bool StorageMonitorOpenBSD::GetStorageInfoForPath(
+    const base::FilePath& path,
+    StorageInfo* device_info) const {
+  return false; // TODO
+}
+
+StorageMonitor* StorageMonitor::CreateInternal() {
+  return new StorageMonitorOpenBSD();
+}
+
+} // namespace storage_monitor
@


1.2
log
@update to 35.0.1916.114
@
text
@d1 4
a4 4
$OpenBSD: patch-components_storage_monitor_storage_monitor_openbsd_cc,v 1.1 2014/04/17 16:27:53 robert Exp $
--- components/storage_monitor/storage_monitor_openbsd.cc.orig.port	Thu May 22 21:43:56 2014
+++ components/storage_monitor/storage_monitor_openbsd.cc	Fri May 23 19:18:08 2014
@@@@ -0,0 +1,55 @@@@
a16 1
+#include "base/basictypes.h"
@


1.1
log
@update to 34.0.1847.116 and disable Werror for the future clang update
@
text
@d1 4
a4 4
$OpenBSD$
--- components/storage_monitor/storage_monitor_openbsd.cc.orig.port	Wed Apr 16 12:24:14 2014
+++ components/storage_monitor/storage_monitor_openbsd.cc	Wed Apr 16 12:37:15 2014
@@@@ -0,0 +1,100 @@@@
d32 2
a35 49
+// udev device property constants.
+const char kBlockSubsystemKey[] = "block";
+const char kDiskDeviceTypeKey[] = "disk";
+const char kFsUUID[] = "ID_FS_UUID";
+const char kLabel[] = "ID_FS_LABEL";
+const char kModel[] = "ID_MODEL";
+const char kModelID[] = "ID_MODEL_ID";
+const char kRemovableSysAttr[] = "removable";
+const char kSerialShort[] = "ID_SERIAL_SHORT";
+const char kSizeSysAttr[] = "size";
+const char kVendor[] = "ID_VENDOR";
+const char kVendorID[] = "ID_VENDOR_ID";
+
+#if 0
+StorageMonitor::EjectStatus EjectPathOnFileThread(
+    const base::FilePath& path,
+    const base::FilePath& device) {
+  DCHECK(BrowserThread::CurrentlyOn(BrowserThread::FILE));
+
+  static const char kUmountBinary[] = "/sbin/umount";
+  std::vector<std::string> command;
+  command.push_back(kUmountBinary);
+  command.push_back(path.value());
+
+  base::LaunchOptions options;
+  base::ProcessHandle handle;
+  if (!base::LaunchProcess(command, options, &handle))
+    return StorageMonitor::EJECT_FAILURE;
+
+  int exit_code = -1;
+  if (!base::WaitForExitCodeWithTimeout(handle, &exit_code,
+      base::TimeDelta::FromMilliseconds(3000))) {
+    base::KillProcess(handle, -1, false);
+    base::EnsureProcessTerminated(handle);
+    return StorageMonitor::EJECT_FAILURE;
+  }
+
+  // TODO(gbillock): Make sure this is found in documentation
+  // somewhere. Experimentally it seems to hold that exit code
+  // 1 means device is in use.
+  if (exit_code == 1)
+    return StorageMonitor::EJECT_IN_USE;
+  if (exit_code != 0)
+    return StorageMonitor::EJECT_FAILURE;
+
+  return StorageMonitor::EJECT_OK;
+}
+#endif
+
d58 2
@

