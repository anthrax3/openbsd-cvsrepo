head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.2
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2017.09.09.19.16.43;	author robert;	state Exp;
branches;
next	1.10;
commitid	o4y7MpMU3y8aR1pv;

1.10
date	2017.07.27.14.23.46;	author robert;	state Exp;
branches;
next	1.9;
commitid	UqlSU0wmYWtcPgqI;

1.9
date	2017.04.28.14.21.00;	author robert;	state Exp;
branches;
next	1.8;
commitid	XFDnyB7tGNawHUbl;

1.8
date	2016.09.01.16.28.11;	author robert;	state Exp;
branches;
next	1.7;
commitid	0duujWXlyOCBrehm;

1.7
date	2016.03.06.10.51.14;	author robert;	state Exp;
branches;
next	1.6;
commitid	Upms3IeOsaLsGxbP;

1.6
date	2015.12.12.20.20.01;	author robert;	state Exp;
branches;
next	1.5;
commitid	pICiE7sceSszB2d2;

1.5
date	2011.10.27.07.59.09;	author robert;	state dead;
branches;
next	1.4;

1.4
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.16.08.17.44;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.29.13.18.01;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@update to 61.0.3163.79
@
text
@$OpenBSD: patch-net_proxy_proxy_config_service_linux_cc,v 1.10 2017/07/27 14:23:46 robert Exp $
Index: net/proxy/proxy_config_service_linux.cc
--- net/proxy/proxy_config_service_linux.cc.orig
+++ net/proxy/proxy_config_service_linux.cc
@@@@ -11,7 +11,9 @@@@
 #include <limits.h>
 #include <stdio.h>
 #include <stdlib.h>
+#if !defined(OS_BSD)
 #include <sys/inotify.h>
+#endif
 #include <unistd.h>
 
 #include <map>
@@@@ -865,6 +867,7 @@@@ int StringToIntOrDefault(base::StringPiece value, int 
   return default_value;
 }
 
+#if !defined(OS_BSD)
 // This is the KDE version that reads kioslaverc and simulates gconf.
 // Doing this allows the main Delegate code, as well as the unit tests
 // for it, to stay the same - and the settings map fairly well besides.
@@@@ -1358,6 +1361,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
 
   DISALLOW_COPY_AND_ASSIGN(SettingGetterImplKDE);
 };
+#endif
 
 }  // namespace
 
@@@@ -1559,8 +1563,10 @@@@ ProxyConfigServiceLinux::Delegate::Delegate(
     case base::nix::DESKTOP_ENVIRONMENT_KDE3:
     case base::nix::DESKTOP_ENVIRONMENT_KDE4:
     case base::nix::DESKTOP_ENVIRONMENT_KDE5:
+#if !defined(OS_BSD)
       setting_getter_.reset(new SettingGetterImplKDE(env_var_getter_.get()));
       break;
+#endif
     case base::nix::DESKTOP_ENVIRONMENT_XFCE:
     case base::nix::DESKTOP_ENVIRONMENT_OTHER:
       break;
@


1.10
log
@update to 60.0.3112.78
@
text
@d1 1
a1 1
$OpenBSD: patch-net_proxy_proxy_config_service_linux_cc,v 1.9 2017/04/28 14:21:00 robert Exp $
d15 2
a16 1
@@@@ -855,6 +857,7 @@@@ bool SettingGetterImplGSettings::LoadAndCheckVersion(
a17 1
 #endif  // defined(USE_GIO)
d23 1
a23 1
@@@@ -1348,6 +1351,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d31 1
a31 1
@@@@ -1549,8 +1553,10 @@@@ ProxyConfigServiceLinux::Delegate::Delegate(
@


1.9
log
@update to 58.0.3029.81
@
text
@d1 4
a4 3
$OpenBSD: patch-net_proxy_proxy_config_service_linux_cc,v 1.8 2016/09/01 16:28:11 robert Exp $
--- net/proxy/proxy_config_service_linux.cc.orig.port	Wed Apr 19 21:06:36 2017
+++ net/proxy/proxy_config_service_linux.cc	Thu Apr 27 19:56:03 2017
d23 1
a23 1
@@@@ -1360,6 +1363,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d31 1
a31 1
@@@@ -1561,8 +1565,10 @@@@ ProxyConfigServiceLinux::Delegate::Delegate(
@


1.8
log
@update to 53.0.2785.89
@
text
@d1 3
a3 3
$OpenBSD$
--- net/proxy/proxy_config_service_linux.cc.orig.port	Thu Sep  1 11:33:23 2016
+++ net/proxy/proxy_config_service_linux.cc	Thu Sep  1 11:34:49 2016
d22 1
a22 1
@@@@ -1359,6 +1362,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d30 1
a30 1
@@@@ -1560,8 +1564,10 @@@@ ProxyConfigServiceLinux::Delegate::Delegate(
@


1.7
log
@update to 49.0.2623.75
@
text
@d1 3
a3 3
$OpenBSD: patch-net_proxy_proxy_config_service_linux_cc,v 1.6 2015/12/12 20:20:01 robert Exp $
--- net/proxy/proxy_config_service_linux.cc.orig.port	Wed Feb 24 21:01:33 2016
+++ net/proxy/proxy_config_service_linux.cc	Thu Mar  3 09:43:26 2016
d14 1
a14 1
@@@@ -851,6 +853,7 @@@@ bool SettingGetterImplGSettings::LoadAndCheckVersion(
d22 1
a22 1
@@@@ -1355,6 +1358,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d30 1
a30 1
@@@@ -1555,8 +1559,10 @@@@ ProxyConfigServiceLinux::Delegate::Delegate(base::Envi
d35 1
a35 1
       setting_getter_.reset(new SettingGetterImplKDE(env_var_getter));
@


1.6
log
@remove unused patches up and enable some more functionalty like HiDPI support
@
text
@d1 4
a4 4
$OpenBSD$
--- net/proxy/proxy_config_service_linux.cc.orig.port	Sat Dec 12 13:37:06 2015
+++ net/proxy/proxy_config_service_linux.cc	Sat Dec 12 13:45:47 2015
@@@@ -12,7 +12,9 @@@@
d22 1
a22 1
@@@@ -1356,6 +1359,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d30 1
a30 1
@@@@ -1556,8 +1560,10 @@@@ ProxyConfigServiceLinux::Delegate::Delegate(base::Envi
@


1.5
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@d1 4
a4 4
$OpenBSD: patch-net_proxy_proxy_config_service_linux_cc,v 1.4 2011/09/19 08:55:26 robert Exp $
--- net/proxy/proxy_config_service_linux.cc.orig	Tue Aug 23 10:28:29 2011
+++ net/proxy/proxy_config_service_linux.cc	Wed Aug 24 10:54:23 2011
@@@@ -18,7 +18,13 @@@@
d8 1
a8 5
+#if defined(OS_OPENBSD)
+#include <sys/types.h>
+#include <sys/event.h>
+#include <sys/time.h>
+#else
d14 12
a25 8
@@@@ -972,7 +978,11 @@@@ class SettingGetterImplKDE : public ProxyConfigService
     // This has to be called on the UI thread (http://crbug.com/69057).
     base::ThreadRestrictions::ScopedAllowIO allow_io;
     DCHECK(inotify_fd_ < 0);
+#if defined(OS_OPENBSD)
+    inotify_fd_ = kqueue();
+#else
     inotify_fd_ = inotify_init();
a26 27
     if (inotify_fd_ < 0) {
       PLOG(ERROR) << "inotify_init failed";
       return false;
@@@@ -1003,6 +1013,17 @@@@ class SettingGetterImplKDE : public ProxyConfigService
   bool SetUpNotifications(ProxyConfigServiceLinux::Delegate* delegate) {
     DCHECK(inotify_fd_ >= 0);
     DCHECK(MessageLoop::current() == file_loop_);
+#if defined(OS_OPENBSD)
+    // catch the deletion event of kioslaverc
+    int kioslavercfd = open(kde_config_dir_.Append("kioslaverc").value().c_str(), O_RDONLY);
+    if (kioslavercfd == -1)
+      return false;
+    struct kevent ke;
+    EV_SET(&ke, kioslavercfd, EVFILT_VNODE, EV_ADD | EV_ONESHOT, NOTE_DELETE | NOTE_RENAME, 0, NULL);
+
+    if (kevent(inotify_fd_, &ke, 1, NULL, 0, NULL) == -1)
+      return false;
+#else
     // We can't just watch the kioslaverc file directly, since KDE will write
     // a new copy of it and then rename it whenever settings are changed and
     // inotify watches inodes (so we'll be watching the old deleted file after
@@@@ -1018,6 +1039,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
     // Simulate a change to avoid possibly losing updates before this point.
     OnChangeNotification();
     return true;
+#endif
   }
d28 9
a36 24
   virtual MessageLoop* GetNotificationLoop() OVERRIDE {
@@@@ -1299,6 +1321,18 @@@@ class SettingGetterImplKDE : public ProxyConfigService
   void OnChangeNotification() {
     DCHECK(inotify_fd_ >= 0);
     DCHECK(MessageLoop::current() == file_loop_);
+#if defined(OS_OPENBSD)
+    bool kioslaverc_touched = true;
+    struct kevent ke;
+    if (kevent(inotify_fd_, NULL, 0, &ke, 1, NULL) == -1) {
+      LOG(ERROR) << "kevent() failure: no loner watching kioslaverc";
+      inotify_watcher_.StopWatchingFileDescriptor();
+      close(inotify_fd_);
+      inotify_fd_ = -1;
+      kioslaverc_touched = false;
+    }
+    close(ke.ident);
+#else
     char event_buf[(sizeof(inotify_event) + NAME_MAX + 1) * 4];
     bool kioslaverc_touched = false;
     ssize_t r;
@@@@ -1337,6 +1371,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
         inotify_fd_ = -1;
       }
     }
d38 3
a40 3
     if (kioslaverc_touched) {
       // We don't use Reset() because the timer may not yet be running.
       // (In that case Stop() is a no-op.)
@


1.4
log
@update to 14.0.835.163
@
text
@d1 1
a1 1
$OpenBSD: patch-net_proxy_proxy_config_service_linux_cc,v 1.3 2011/08/16 08:17:44 robert Exp $
@


1.3
log
@update to the next stable release (13.0.782.112)
@
text
@d1 3
a3 3
$OpenBSD$
--- net/proxy/proxy_config_service_linux.cc.orig	Tue Aug  2 20:41:19 2011
+++ net/proxy/proxy_config_service_linux.cc	Wed Aug  3 13:54:30 2011
d18 1
a18 1
@@@@ -937,7 +943,11 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d30 1
a30 1
@@@@ -968,6 +978,17 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d48 1
a48 1
@@@@ -983,6 +1004,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d55 2
a56 2
   virtual MessageLoop* GetNotificationLoop() {
@@@@ -1264,6 +1286,18 @@@@ class SettingGetterImplKDE : public ProxyConfigService
d75 1
a75 1
@@@@ -1302,6 +1336,7 @@@@ class SettingGetterImplKDE : public ProxyConfigService
@


1.2
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@d2 3
a4 3
--- net/proxy/proxy_config_service_linux.cc.orig	Tue Apr 26 10:01:15 2011
+++ net/proxy/proxy_config_service_linux.cc	Thu Apr 28 18:07:56 2011
@@@@ -12,7 +12,13 @@@@
d18 1
a18 30
@@@@ -433,7 +439,7 @@@@ class GConfSettingGetterImplKDE
       public base::MessagePumpLibevent::Watcher {
  public:
   explicit GConfSettingGetterImplKDE(base::Environment* env_var_getter)
-      : inotify_fd_(-1), notify_delegate_(NULL), indirect_manual_(false),
+      : notify_fd_(-1), notify_delegate_(NULL), indirect_manual_(false),
         auto_no_pac_(false), reversed_bypass_list_(false),
         env_var_getter_(env_var_getter), file_loop_(NULL) {
     // This has to be called on the UI thread (http://crbug.com/69057).
@@@@ -492,33 +498,37 @@@@ class GConfSettingGetterImplKDE
   }
 
   virtual ~GConfSettingGetterImplKDE() {
-    // inotify_fd_ should have been closed before now, from
+    // notify_fd_ should have been closed before now, from
     // Delegate::OnDestroy(), while running on the file thread. However
     // on exiting the process, it may happen that Delegate::OnDestroy()
     // task is left pending on the file loop after the loop was quit,
     // and pending tasks may then be deleted without being run.
     // Here in the KDE version, we can safely close the file descriptor
     // anyway. (Not that it really matters; the process is exiting.)
-    if (inotify_fd_ >= 0)
+    if (notify_fd_ >= 0)
       Shutdown();
-    DCHECK(inotify_fd_ < 0);
+    DCHECK(notify_fd_ < 0);
   }
 
   virtual bool Init(MessageLoop* glib_default_loop,
                     MessageLoopForIO* file_loop) {
d21 1
a21 4
-    DCHECK(inotify_fd_ < 0);
-    inotify_fd_ = inotify_init();
-    if (inotify_fd_ < 0) {
+    DCHECK(notify_fd_ < 0);
d23 1
a23 1
+    notify_fd_ = kqueue();
d25 1
a25 1
+    notify_fd_ = inotify_init();
d27 1
a27 1
+    if (notify_fd_ < 0) {
d30 4
a33 33
     }
-    int flags = fcntl(inotify_fd_, F_GETFL);
-    if (fcntl(inotify_fd_, F_SETFL, flags | O_NONBLOCK) < 0) {
+    int flags = fcntl(notify_fd_, F_GETFL);
+    if (fcntl(notify_fd_, F_SETFL, flags | O_NONBLOCK) < 0) {
       PLOG(ERROR) << "fcntl failed";
-      close(inotify_fd_);
-      inotify_fd_ = -1;
+      close(notify_fd_);
+      notify_fd_ = -1;
       return false;
     }
     file_loop_ = file_loop;
@@@@ -529,28 +539,40 @@@@ class GConfSettingGetterImplKDE
   }
 
   void Shutdown() {
-    if (inotify_fd_ >= 0) {
+    if (notify_fd_ >= 0) {
       ResetCachedSettings();
-      inotify_watcher_.StopWatchingFileDescriptor();
-      close(inotify_fd_);
-      inotify_fd_ = -1;
+      notify_watcher_.StopWatchingFileDescriptor();
+      close(notify_fd_);
+      notify_fd_ = -1;
     }
   }
 
   bool SetupNotification(ProxyConfigServiceLinux::Delegate* delegate) {
-    DCHECK(inotify_fd_ >= 0);
+    DCHECK(notify_fd_ >= 0);
     DCHECK(file_loop_);
d42 1
a42 1
+    if (kevent(notify_fd_, &ke, 1, NULL, 0, NULL) == -1)
d48 4
a51 6
     // the first change, and it will never change again). So, we watch the
     // directory instead. We then act only on changes to the kioslaverc entry.
-    if (inotify_add_watch(inotify_fd_, kde_config_dir_.value().c_str(),
+    if (inotify_add_watch(notify_fd_, kde_config_dir_.value().c_str(),
                           IN_MODIFY | IN_MOVED_TO) < 0)
       return false;
a52 5
     notify_delegate_ = delegate;
-    return file_loop_->WatchFileDescriptor(inotify_fd_, true,
-        MessageLoopForIO::WATCH_READ, &inotify_watcher_, this);
+    return file_loop_->WatchFileDescriptor(notify_fd_, true,
+        MessageLoopForIO::WATCH_READ, &notify_watcher_, this);
d56 1
a56 12
@@@@ -559,7 +581,7 @@@@ class GConfSettingGetterImplKDE
 
   // Implement base::MessagePumpLibevent::Delegate.
   void OnFileCanReadWithoutBlocking(int fd) {
-    DCHECK(fd == inotify_fd_);
+    DCHECK(fd == notify_fd_);
     DCHECK(MessageLoop::current() == file_loop_);
     OnChangeNotification();
   }
@@@@ -830,17 +852,29 @@@@ class GConfSettingGetterImplKDE
   // from the inotify file descriptor and starts up a debounce timer if
   // an event for kioslaverc is seen.
d58 1
a58 2
-    DCHECK(inotify_fd_ >= 0);
+    DCHECK(notify_fd_ >= 0);
a59 1
-    char event_buf[(sizeof(inotify_event) + NAME_MAX + 1) * 4];
d63 1
a63 1
+    if (kevent(notify_fd_, NULL, 0, &ke, 1, NULL) == -1) {
d65 3
a67 3
+      notify_watcher_.StopWatchingFileDescriptor();
+      close(notify_fd_);
+      notify_fd_ = -1;
d72 1
a72 1
+    char event_buf[(sizeof(notify_event) + NAME_MAX + 1) * 4];
d75 2
a76 21
-    while ((r = read(inotify_fd_, event_buf, sizeof(event_buf))) > 0) {
+    while ((r = read(notify_fd_, event_buf, sizeof(event_buf))) > 0) {
       // inotify returns variable-length structures, which is why we have
       // this strange-looking loop instead of iterating through an array.
       char* event_ptr = event_buf;
       while (event_ptr < event_buf + r) {
-        inotify_event* event = reinterpret_cast<inotify_event*>(event_ptr);
+        notify_event* event = reinterpret_cast<inotify_event*>(event_ptr);
         // The kernel always feeds us whole events.
         CHECK_LE(event_ptr + sizeof(inotify_event), event_buf + r);
         CHECK_LE(event->name + event->len, event_buf + r);
@@@@ -865,11 +899,12 @@@@ class GConfSettingGetterImplKDE
         // large), but if it does we'd warn continuously since |inotify_fd_|
         // would be forever ready to read. Close it and stop watching instead.
         LOG(ERROR) << "inotify failure; no longer watching kioslaverc!";
-        inotify_watcher_.StopWatchingFileDescriptor();
-        close(inotify_fd_);
-        inotify_fd_ = -1;
+        notify_watcher_.StopWatchingFileDescriptor();
+        close(notify_fd_);
+        notify_fd_ = -1;
a82 11
@@@@ -883,8 +918,8 @@@@ class GConfSettingGetterImplKDE
   typedef std::map<std::string, std::string> string_map_type;
   typedef std::map<std::string, std::vector<std::string> > strings_map_type;
 
-  int inotify_fd_;
-  base::MessagePumpLibevent::FileDescriptorWatcher inotify_watcher_;
+  int notify_fd_;
+  base::MessagePumpLibevent::FileDescriptorWatcher notify_watcher_;
   ProxyConfigServiceLinux::Delegate* notify_delegate_;
   base::OneShotTimer<GConfSettingGetterImplKDE> debounce_timer_;
   FilePath kde_config_dir_;
@


1.1
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d2 2
a3 2
--- net/proxy/proxy_config_service_linux.cc.orig	Fri Jan 21 10:19:56 2011
+++ net/proxy/proxy_config_service_linux.cc	Sun Jan 23 23:27:35 2011
d18 1
a18 1
@@@@ -432,7 +438,7 @@@@ class GConfSettingGetterImplKDE
d26 2
a27 2
     // Derive the location of the kde config dir from the environment.
@@@@ -488,31 +494,35 @@@@ class GConfSettingGetterImplKDE
d48 2
d75 1
a75 1
@@@@ -523,28 +533,41 @@@@ class GConfSettingGetterImplKDE
a99 1
+
d124 1
a124 1
@@@@ -553,7 +576,7 @@@@ class GConfSettingGetterImplKDE
d133 1
a133 1
@@@@ -824,12 +847,25 @@@@ class GConfSettingGetterImplKDE
d140 1
a151 1
+    
d153 1
a153 1
     char event_buf[(sizeof(inotify_event) + NAME_MAX + 1) * 4];
d161 8
a168 6
@@@@ -856,14 +892,15 @@@@ class GConfSettingGetterImplKDE
       if (errno == EINVAL) {
         // Our buffer is not large enough to read the next event. This should
         // not happen (because its size is calculated to always be sufficiently
-        // large), but if it does we'd warn continuously since |inotify_fd_|
+        // large), but if it does we'd warn continuously since |notify_fd_|
d183 1
a183 1
@@@@ -877,8 +914,8 @@@@ class GConfSettingGetterImplKDE
@

