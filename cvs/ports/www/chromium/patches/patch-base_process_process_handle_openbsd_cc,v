head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.06.26.17.16.30;	author robert;	state Exp;
branches;
next	1.2;
commitid	qS3pkiWUKrphv0pz;

1.2
date	2016.03.06.10.51.13;	author robert;	state Exp;
branches;
next	1.1;
commitid	Upms3IeOsaLsGxbP;

1.1
date	2013.10.29.06.51.34;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@do not call malloc and sysctl twice that was introduced by a bad copy & paste

diff from Caspar Schutijser
@
text
@$OpenBSD: patch-base_process_process_handle_openbsd_cc,v 1.2 2016/03/06 10:51:13 robert Exp $
Index: base/process/process_handle_openbsd.cc
--- base/process/process_handle_openbsd.cc.orig
+++ base/process/process_handle_openbsd.cc
@@@@ -6,6 +6,8 @@@@
 #include "base/process/process_handle.h"
 
 #include <stddef.h>
+#include <sys/param.h>
+#include <sys/proc.h>
 #include <sys/sysctl.h>
 #include <sys/types.h>
 #include <unistd.h>
@@@@ -13,39 +15,59 @@@@
 namespace base {
 
 ProcessId GetParentProcessId(ProcessHandle process) {
-  struct kinfo_proc info;
+  struct kinfo_proc *info;
   size_t length;
+  pid_t ppid;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    ppid = -1;
+    goto out;
+  }
 
-  return info.p_ppid;
+  ppid = info->p_ppid;
+
+out:
+  free(info);
+  return ppid;
 }
 
 FilePath GetProcessExecutablePath(ProcessHandle process) {
-  struct kinfo_proc kp;
-  size_t len;
+  struct kinfo_proc *info;
+  size_t length;
+  char *path = NULL;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
                 sizeof(struct kinfo_proc), 0 };
 
-  if (sysctl(mib, arraysize(mib), NULL, &len, NULL, 0) == -1)
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) == -1)
     return FilePath();
-  mib[5] = (len / sizeof(struct kinfo_proc));
-  if (sysctl(mib, arraysize(mib), &kp, &len, NULL, 0) < 0)
-    return FilePath();
-  if ((kp.p_flag & P_SYSTEM) != 0)
-    return FilePath();
-  if (strcmp(kp.p_comm, "chrome") == 0)
-    return FilePath(kp.p_comm);
 
-  return FilePath();
+  info = (struct kinfo_proc *)malloc(length);
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0)
+    goto out;
+
+  if ((info->p_flag & P_SYSTEM) != 0)
+    goto out;
+
+  if (strcmp(info->p_comm, "chrome") == 0) {
+    path = info->p_comm;
+    goto out;
+  }
+
+out:
+  free(info);
+  return FilePath(path);
 }
 
 }  // namespace base
@


1.2
log
@update to 49.0.2623.75
@
text
@d1 4
a4 3
$OpenBSD$
--- base/process/process_handle_openbsd.cc.orig.port	Thu Mar  3 09:47:09 2016
+++ base/process/process_handle_openbsd.cc	Thu Mar  3 09:49:15 2016
d14 1
a14 1
@@@@ -13,39 +15,64 @@@@
a27 1
-  mib[5] = (length / sizeof(struct kinfo_proc));
d29 2
d33 1
a33 8
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
-  return info.p_ppid;
+  info = (struct kinfo_proc *)malloc(length);
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
d38 2
a39 1
+
@


1.1
log
@update to 30.0.1599.101
@
text
@d2 3
a4 4
--- base/process/process_handle_openbsd.cc.orig.port	Fri Oct 18 20:52:30 2013
+++ base/process/process_handle_openbsd.cc	Fri Oct 18 23:28:42 2013
@@@@ -4,6 +4,8 @@@@
 
d7 1
d13 1
a13 1
@@@@ -11,39 +13,64 @@@@
@

