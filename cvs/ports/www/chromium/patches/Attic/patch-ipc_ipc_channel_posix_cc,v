head	1.8;
access;
symbols
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2012.02.17.10.19.51;	author robert;	state dead;
branches;
next	1.7;

1.7
date	2011.12.14.16.58.19;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.27.07.59.09;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.16.08.17.44;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.08.20.36.56;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.13.09.51.46;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@update to 17.0.963.56
@
text
@$OpenBSD: patch-ipc_ipc_channel_posix_cc,v 1.7 2011/12/14 16:58:19 robert Exp $
--- ipc/ipc_channel_posix.cc.orig	Wed Dec  7 09:02:00 2011
+++ ipc/ipc_channel_posix.cc	Tue Dec 13 21:23:12 2011
@@@@ -10,6 +10,7 @@@@
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
+#include <sys/uio.h>
 #include <sys/un.h>
 
 #include <string>
@@@@ -944,7 +945,7 @@@@ bool Channel::ChannelImpl::HasAcceptedConnection() con
 
 bool Channel::ChannelImpl::GetClientEuid(uid_t* client_euid) const {
   DCHECK(HasAcceptedConnection());
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_OPENBSD)
   uid_t peer_euid;
   gid_t peer_gid;
   if (getpeereid(pipe_, &peer_euid, &peer_gid) != 0) {
@


1.7
log
@update to 16.0.912.63
@
text
@d1 1
a1 1
$OpenBSD: patch-ipc_ipc_channel_posix_cc,v 1.6 2011/10/27 07:59:09 robert Exp $
@


1.6
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@d1 3
a3 3
$OpenBSD: patch-ipc_ipc_channel_posix_cc,v 1.5 2011/09/19 08:55:26 robert Exp $
--- ipc/ipc_channel_posix.cc.orig	Fri Oct 21 10:30:02 2011
+++ ipc/ipc_channel_posix.cc	Wed Oct 26 13:39:46 2011
d12 1
a12 1
@@@@ -930,7 +931,7 @@@@ bool Channel::ChannelImpl::HasAcceptedConnection() con
@


1.5
log
@update to 14.0.835.163
@
text
@d1 3
a3 3
$OpenBSD: patch-ipc_ipc_channel_posix_cc,v 1.4 2011/08/16 08:17:44 robert Exp $
--- ipc/ipc_channel_posix.cc.orig	Wed Sep 14 10:01:29 2011
+++ ipc/ipc_channel_posix.cc	Fri Sep 16 18:17:23 2011
d12 1
a12 10
@@@@ -273,7 +274,7 @@@@ bool CreateClientUnixDomainSocket(const std::string& p
 }
 
 bool SocketWriteErrorIsRecoverable() {
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_OPENBSD)
   // On OS X if sendmsg() is trying to send fds between processes and there
   // isn't enough room in the output buffer to send the fd structure over
   // atomically then EMSGSIZE is returned.
@@@@ -929,7 +930,7 @@@@ bool Channel::ChannelImpl::HasAcceptedConnection() con
@


1.4
log
@update to the next stable release (13.0.782.112)
@
text
@d1 3
a3 3
$OpenBSD: patch-ipc_ipc_channel_posix_cc,v 1.3 2011/06/08 20:36:56 robert Exp $
--- ipc/ipc_channel_posix.cc.orig	Wed Jul 27 10:01:28 2011
+++ ipc/ipc_channel_posix.cc	Tue Aug  2 20:12:18 2011
d12 1
a12 1
@@@@ -272,7 +273,7 @@@@ bool CreateClientUnixDomainSocket(const std::string& p
d21 1
a21 1
@@@@ -926,7 +927,7 @@@@ bool Channel::ChannelImpl::HasAcceptedConnection() con
@


1.3
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@d1 3
a3 3
$OpenBSD: patch-ipc_ipc_channel_posix_cc,v 1.2 2011/02/08 09:43:02 espie Exp $
--- ipc/ipc_channel_posix.cc.orig	Mon Jun  6 11:11:47 2011
+++ ipc/ipc_channel_posix.cc	Wed Jun  8 13:48:07 2011
d21 1
a21 1
@@@@ -927,7 +928,7 @@@@ bool Channel::ChannelImpl::HasAcceptedConnection() con
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 3
a3 3
$OpenBSD$
--- ipc/ipc_channel_posix.cc.orig	Fri Jan 21 10:20:15 2011
+++ ipc/ipc_channel_posix.cc	Mon Jan 24 11:18:05 2011
d12 18
@


1.1
log
@cut the "monster patches" into small pieces. pval can fix it to his liking
if he comes back.
In the mean time, fix build of chromium by adding the required
-I/usr/local/includes to gyp glue where needed.
@
text
@d2 4
a5 3
--- ipc/ipc_channel_posix.cc.orig	Tue Mar 30 07:28:46 2010
+++ ipc/ipc_channel_posix.cc	Sun Nov 28 00:11:30 2010
@@@@ -11,6 +11,7 @@@@
d8 1
a9 1
+#include <sys/uio.h>
a11 82
 #include <map>
@@@@ -273,7 +274,7 @@@@ Channel::ChannelImpl::ChannelImpl(const std::string& c
       server_listen_pipe_(-1),
       pipe_(-1),
       client_pipe_(-1),
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
       fd_pipe_(-1),
       remote_fd_pipe_(-1),
 #endif
@@@@ -384,7 +385,7 @@@@ bool Channel::ChannelImpl::CreatePipe(const std::strin
   scoped_ptr<Message> msg(new Message(MSG_ROUTING_NONE,
                                       HELLO_MESSAGE_TYPE,
                                       IPC::Message::PRIORITY_NORMAL));
-  #if defined(OS_LINUX)
+  #if defined(OS_NIX)
   if (!uses_fifo_) {
     // On Linux, the seccomp sandbox makes it very expensive to call
     // recvmsg() and sendmsg(). Often, we are perfectly OK with resorting to
@@@@ -460,7 +461,7 @@@@ bool Channel::ChannelImpl::ProcessIncomingMessages() {
       // Read from pipe.
       // recvmsg() returns 0 if the connection has closed or EAGAIN if no data
       // is waiting on the pipe.
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
       if (fd_pipe_ >= 0) {
         bytes_read = HANDLE_EINTR(read(pipe_, input_buf_,
                                        Channel::kReadBufferSize));
@@@@ -592,7 +593,7 @@@@ bool Channel::ChannelImpl::ProcessIncomingMessages() {
           if (m.header()->num_fds > num_fds - fds_i) {
             // the message has been completely received, but we didn't get
             // enough file descriptors.
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
             if (!uses_fifo_) {
               char dummy;
               struct iovec fd_pipe_iov = { &dummy, 1 };
@@@@ -677,7 +678,7 @@@@ bool Channel::ChannelImpl::ProcessIncomingMessages() {
           if (!m.ReadInt(&iter, &pid)) {
             NOTREACHED();
           }
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
           if (mode_ == MODE_SERVER && !uses_fifo_) {
             // On Linux, the Hello message from the client to the server
             // also contains the fd_pipe_, which  will be used for all
@@@@ -740,7 +741,7 @@@@ bool Channel::ChannelImpl::ProcessOutgoingMessages() {
   while (!output_queue_.empty()) {
     Message* msg = output_queue_.front();
 
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
     scoped_ptr<Message> hello;
     if (remote_fd_pipe_ != -1 &&
         msg->routing_id() == MSG_ROUTING_NONE &&
@@@@ -801,7 +802,7 @@@@ bool Channel::ChannelImpl::ProcessOutgoingMessages() {
       // num_fds < MAX_DESCRIPTORS_PER_MESSAGE so no danger of overflow.
       msg->header()->num_fds = static_cast<uint16>(num_fds);
 
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
       if (!uses_fifo_ &&
           (msg->routing_id() != MSG_ROUTING_NONE ||
            msg->type() != HELLO_MESSAGE_TYPE)) {
@@@@ -823,7 +824,7 @@@@ bool Channel::ChannelImpl::ProcessOutgoingMessages() {
 
     if (bytes_written == 1) {
       fd_written = pipe_;
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
       if (mode_ != MODE_SERVER && !uses_fifo_ &&
           msg->routing_id() == MSG_ROUTING_NONE &&
           msg->type() == HELLO_MESSAGE_TYPE) {
@@@@ -994,7 +995,7 @@@@ void Channel::ChannelImpl::Close() {
     Singleton<PipeMap>()->RemoveAndClose(pipe_name_);
     client_pipe_ = -1;
   }
-#if defined(OS_LINUX)
+#if defined(OS_NIX)
   if (fd_pipe_ != -1) {
     HANDLE_EINTR(close(fd_pipe_));
     fd_pipe_ = -1;
@

