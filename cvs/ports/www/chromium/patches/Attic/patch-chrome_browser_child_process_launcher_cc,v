head	1.4;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2011.04.29.13.18.01;	author robert;	state dead;
branches;
next	1.3;

1.3
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.13.09.51.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@$OpenBSD: patch-chrome_browser_child_process_launcher_cc,v 1.3 2011/03/15 11:38:05 robert Exp $
--- chrome/browser/child_process_launcher.cc.orig	Mon Mar 14 11:05:10 2011
+++ chrome/browser/child_process_launcher.cc	Mon Mar 14 11:05:49 2011
@@@@ -20,7 +20,7 @@@@
 #if defined(OS_WIN)
 #include "base/file_path.h"
 #include "chrome/common/sandbox_policy.h"
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_OPENBSD)
 #include "base/singleton.h"
 #include "chrome/browser/crash_handler_host_linux.h"
 #include "chrome/browser/zygote_host_linux.h"
@@@@ -45,7 +45,7 @@@@ class ChildProcessLauncher::Context
       : client_(NULL),
         client_thread_id_(BrowserThread::UI),
         starting_(true)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
         , zygote_(false)
 #endif
         {
@@@@ -110,7 +110,7 @@@@ class ChildProcessLauncher::Context
     handle = sandbox::StartProcessWithAccess(cmd_line, exposed_dir);
 #elif defined(OS_POSIX)
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
     if (use_zygote) {
       base::GlobalDescriptors::Mapping mapping;
       mapping.push_back(std::pair<uint32_t, int>(kPrimaryIPCChannel, ipcfd));
@@@@ -131,7 +131,7 @@@@ class ChildProcessLauncher::Context
           ipcfd,
           kPrimaryIPCChannel + base::GlobalDescriptors::kBaseDescriptor));
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
       // On Linux, we need to add some extra file descriptors for crash handling
       // and the sandbox.
       bool is_renderer =
@@@@ -205,20 +205,20 @@@@ class ChildProcessLauncher::Context
         NewRunnableMethod(
             this,
             &ChildProcessLauncher::Context::Notify,
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
             use_zygote,
 #endif
             handle));
   }
 
   void Notify(
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
       bool zygote,
 #endif
       base::ProcessHandle handle) {
     starting_ = false;
     process_.set_handle(handle);
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
     zygote_ = zygote;
 #endif
     if (client_) {
@@@@ -238,7 +238,7 @@@@ class ChildProcessLauncher::Context
         BrowserThread::PROCESS_LAUNCHER, FROM_HERE,
         NewRunnableFunction(
             &ChildProcessLauncher::Context::TerminateInternal,
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
             zygote_,
 #endif
             process_.handle()));
@@@@ -246,7 +246,7 @@@@ class ChildProcessLauncher::Context
   }
 
   static void TerminateInternal(
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
       bool zygote,
 #endif
       base::ProcessHandle handle) {
@@@@ -256,7 +256,7 @@@@ class ChildProcessLauncher::Context
     process.Terminate(ResultCodes::NORMAL_EXIT);
     // On POSIX, we must additionally reap the child.
 #if defined(OS_POSIX)
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
     if (zygote) {
       // If the renderer was created via a zygote, we have to proxy the reaping
       // through the zygote process.
@@@@ -275,7 +275,7 @@@@ class ChildProcessLauncher::Context
   base::Process process_;
   bool starting_;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   bool zygote_;
 #endif
 };
@@@@ -321,7 +321,7 @@@@ base::TerminationStatus ChildProcessLauncher::GetChild
     int* exit_code) {
   base::TerminationStatus status;
   base::ProcessHandle handle = context_->process_.handle();
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   if (context_->zygote_) {
     status = ZygoteHost::GetInstance()->GetTerminationStatus(handle, exit_code);
   } else
@


1.3
log
@update to 10.0.648.133
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d2 3
a4 3
--- chrome/browser/child_process_launcher.cc.orig	Fri Jan 21 10:20:26 2011
+++ chrome/browser/child_process_launcher.cc	Sun Jan 23 23:27:31 2011
@@@@ -20,8 +20,9 @@@@
a10 1
+// XXX rene: use OpenBSD-specific versions for these?
d13 1
a13 2
 #include "chrome/browser/renderer_host/render_sandbox_host_linux.h"
@@@@ -45,7 +46,7 @@@@ class ChildProcessLauncher::Context
d22 1
a22 1
@@@@ -110,7 +111,7 @@@@ class ChildProcessLauncher::Context
d31 1
a31 1
@@@@ -130,8 +131,8 @@@@ class ChildProcessLauncher::Context
a35 1
-      // On Linux, we need to add some extra file descriptors for crash handling
d37 1
a37 1
+      // On Linux/OpenBSD, we need to add some extra file descriptors for crash handling
d40 1
a40 11
           cmd_line->GetSwitchValueASCII(switches::kProcessType) ==
@@@@ -162,7 +163,7 @@@@ class ChildProcessLauncher::Context
             sandbox_fd,
             kSandboxIPCChannel + base::GlobalDescriptors::kBaseDescriptor));
       }
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_OPENBSD)
 
       bool launched = false;
 #if defined(OS_MACOSX)
@@@@ -198,20 +199,20 @@@@ class ChildProcessLauncher::Context
d64 1
a64 1
@@@@ -231,7 +232,7 @@@@ class ChildProcessLauncher::Context
d73 1
a73 1
@@@@ -239,7 +240,7 @@@@ class ChildProcessLauncher::Context
d82 1
a82 1
@@@@ -249,13 +250,13 @@@@ class ChildProcessLauncher::Context
d91 1
a91 8
       Singleton<ZygoteHost>()->EnsureProcessTerminated(handle);
     } else
-#endif  // OS_LINUX
+#endif  // OS_LINUX || OS_OPENBSD
     {
       ProcessWatcher::EnsureProcessTerminated(handle);
     }
@@@@ -268,7 +269,7 @@@@ class ChildProcessLauncher::Context
d100 3
a102 3
@@@@ -313,7 +314,7 @@@@ base::ProcessHandle ChildProcessLauncher::GetHandle() 
 bool ChildProcessLauncher::DidProcessCrash() {
   bool did_crash, child_exited;
d107 1
a107 1
     did_crash = Singleton<ZygoteHost>()->DidProcessCrash(handle, &child_exited);
@


1.1
log
@cut the "monster patches" into small pieces. pval can fix it to his liking
if he comes back.
In the mean time, fix build of chromium by adding the required
-I/usr/local/includes to gyp glue where needed.
@
text
@d2 3
a4 4
--- chrome/browser/child_process_launcher.cc.orig	Tue Mar 30 07:29:49 2010
+++ chrome/browser/child_process_launcher.cc	Sun Nov 28 00:11:30 2010
@@@@ -16,7 +16,7 @@@@
 
d6 1
d9 1
a9 1
+#elif defined(OS_NIX)
d11 1
d14 5
a18 4
@@@@ -39,7 +39,7 @@@@ class ChildProcessLauncher::Context
  public:
   Context()
       : starting_(true)
d20 1
a20 1
+#if defined(OS_NIX)
d24 1
a24 1
@@@@ -104,7 +104,7 @@@@ class ChildProcessLauncher::Context
d29 1
a29 1
+#if defined(OS_NIX)
d33 1
a33 1
@@@@ -124,7 +124,7 @@@@ class ChildProcessLauncher::Context
d38 3
a40 2
+#if defined(OS_NIX)
       // On Linux, we need to add some extra file descriptors for crash handling
d43 2
a44 1
@@@@ -156,7 +156,7 @@@@ class ChildProcessLauncher::Context
d49 1
a49 1
+#endif  // defined(OS_NIX)
d51 3
a53 3
       // Actually launch the app.
       bool launched;
@@@@ -183,20 +183,20 @@@@ class ChildProcessLauncher::Context
d58 1
a58 1
+#if defined(OS_NIX)
d66 1
a66 1
+#if defined(OS_NIX)
d73 1
a73 1
+#if defined(OS_NIX)
d77 2
a78 2
@@@@ -216,7 +216,7 @@@@ class ChildProcessLauncher::Context
         ChromeThread::PROCESS_LAUNCHER, FROM_HERE,
d82 1
a82 1
+#if defined(OS_NIX)
d86 1
a86 1
@@@@ -224,7 +224,7 @@@@ class ChildProcessLauncher::Context
d91 1
a91 1
+#if defined(OS_NIX)
d95 1
a95 1
@@@@ -234,13 +234,13 @@@@ class ChildProcessLauncher::Context
d100 1
a100 1
+#if defined(OS_NIX)
d107 1
a107 1
+#endif  // OS_NIX
d111 1
a111 1
@@@@ -253,7 +253,7 @@@@ class ChildProcessLauncher::Context
d116 1
a116 1
+#if defined(OS_NIX)
d120 1
a120 1
@@@@ -298,7 +298,7 @@@@ base::ProcessHandle ChildProcessLauncher::GetHandle() 
d125 1
a125 1
+#if defined(OS_NIX)
@

