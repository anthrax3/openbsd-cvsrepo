head	1.5;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2011.06.08.20.36.56;	author robert;	state dead;
branches;
next	1.4;

1.4
date	2011.04.29.13.18.01;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.13.09.51.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@$OpenBSD: patch-chrome_browser_sync_engine_syncer_thread_cc,v 1.4 2011/04/29 13:18:01 robert Exp $
--- chrome/browser/sync/engine/syncer_thread.cc.orig	Tue Apr 26 10:01:40 2011
+++ chrome/browser/sync/engine/syncer_thread.cc	Thu Apr 28 11:17:49 2011
@@@@ -293,7 +293,7 @@@@ void SyncerThread::ThreadMainLoop() {
   bool initial_sync_for_thread = true;
   bool continue_sync_cycle = false;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   idle_query_.reset(new IdleQueryLinux());
 #endif
 
@@@@ -389,7 +389,7 @@@@ void SyncerThread::ThreadMainLoop() {
         static_cast<int>(vault_.current_wait_interval_.poll_delta.InSeconds()),
         &user_idle_milliseconds, &continue_sync_cycle, nudged);
   }
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   idle_query_.reset();
 #endif
 }
@@@@ -877,7 +877,7 @@@@ int SyncerThread::UserIdleTime() {
     return 0;
   }
   return idle_time / 1000000;  // nano to milli
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_OPENBSD)
   if (idle_query_.get())
     return idle_query_->IdleTime();
   return 0;
@


1.4
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@d1 1
a1 1
$OpenBSD: patch-chrome_browser_sync_engine_syncer_thread_cc,v 1.3 2011/03/15 11:38:05 robert Exp $
@


1.3
log
@update to 10.0.648.133
@
text
@d1 4
a4 4
$OpenBSD: patch-chrome_browser_sync_engine_syncer_thread_cc,v 1.2 2011/02/08 09:43:02 espie Exp $
--- chrome/browser/sync/engine/syncer_thread.cc.orig	Fri Mar 11 10:01:38 2011
+++ chrome/browser/sync/engine/syncer_thread.cc	Mon Mar 14 10:55:37 2011
@@@@ -263,7 +263,7 @@@@ void SyncerThread::ThreadMainLoop() {
d13 1
a13 1
@@@@ -358,7 +358,7 @@@@ void SyncerThread::ThreadMainLoop() {
d22 1
a22 1
@@@@ -832,7 +832,7 @@@@ int SyncerThread::UserIdleTime() {
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 4
a4 4
$OpenBSD$
--- chrome/browser/sync/engine/syncer_thread.cc.orig	Fri Jan 21 10:20:20 2011
+++ chrome/browser/sync/engine/syncer_thread.cc	Sun Jan 23 23:27:31 2011
@@@@ -264,7 +264,7 @@@@ void SyncerThread::ThreadMainLoop() {
d13 1
a13 1
@@@@ -359,7 +359,7 @@@@ void SyncerThread::ThreadMainLoop() {
d22 1
a22 1
@@@@ -813,7 +813,7 @@@@ int SyncerThread::UserIdleTime() {
@


1.1
log
@cut the "monster patches" into small pieces. pval can fix it to his liking
if he comes back.
In the mean time, fix build of chromium by adding the required
-I/usr/local/includes to gyp glue where needed.
@
text
@d2 3
a4 3
--- chrome/browser/sync/engine/syncer_thread.cc.orig	Tue Mar 30 07:29:41 2010
+++ chrome/browser/sync/engine/syncer_thread.cc	Sun Nov 28 00:11:31 2010
@@@@ -215,7 +215,7 @@@@ void SyncerThread::ThreadMainLoop() {
d9 1
a9 1
+#if defined(OS_NIX)
d13 1
a13 1
@@@@ -294,7 +294,7 @@@@ void SyncerThread::ThreadMainLoop() {
d18 1
a18 1
+#if defined(OS_NIX)
d22 2
a23 3
@@@@ -695,7 +695,7 @@@@ int SyncerThread::UserIdleTime() {
   } else {
     return idle_time / 1000000;  // nano to milli
d25 1
d27 2
a28 2
+#elif defined(OS_NIX)
   if (idle_query_.get()) {
d30 1
a30 1
   } else {
@

