head	1.24;
access;
symbols
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.21.0.2
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.19.0.2
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.24
date	2015.12.05.16.13.32;	author robert;	state dead;
branches;
next	1.23;
commitid	D0GFSwUDbKAnIs1m;

1.23
date	2014.11.19.21.27.32;	author robert;	state Exp;
branches;
next	1.22;
commitid	Fr3Mh6eWvxxgNbvB;

1.22
date	2014.09.11.19.04.52;	author robert;	state Exp;
branches;
next	1.21;
commitid	WrglT9ERNBhPArdd;

1.21
date	2014.04.17.16.27.53;	author robert;	state Exp;
branches;
next	1.20;

1.20
date	2014.03.11.14.52.01;	author robert;	state Exp;
branches;
next	1.19;

1.19
date	2014.01.18.11.42.04;	author robert;	state Exp;
branches;
next	1.18;

1.18
date	2013.12.12.10.43.18;	author robert;	state Exp;
branches;
next	1.17;

1.17
date	2013.09.29.19.04.03;	author robert;	state Exp;
branches;
next	1.16;

1.16
date	2013.05.31.15.38.59;	author robert;	state Exp;
branches;
next	1.15;

1.15
date	2013.05.30.18.42.18;	author robert;	state Exp;
branches;
next	1.14;

1.14
date	2013.04.03.08.19.10;	author robert;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.18.21.38.02;	author robert;	state Exp;
branches;
next	1.12;

1.12
date	2012.11.25.18.57.21;	author ratchov;	state Exp;
branches;
next	1.11;

1.11
date	2012.11.07.06.59.45;	author robert;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.10.09.22.34;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2012.04.03.13.59.35;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.17.10.19.51;	author robert;	state dead;
branches;
next	1.7;

1.7
date	2011.12.14.16.58.19;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.27.07.59.09;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.20.08.35.24;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.29.13.18.01;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.13.09.51.46;	author espie;	state Exp;
branches;
next	;


desc
@@


1.24
log
@update to 47.0.2526.73
@
text
@$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.23 2014/11/19 21:27:32 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Wed Nov 19 05:53:04 2014
+++ media/audio/openbsd/audio_manager_openbsd.cc	Wed Nov 19 08:38:26 2014
@@@@ -4,55 +4,25 @@@@
 
 #include "media/audio/openbsd/audio_manager_openbsd.h"
 
-#include <fcntl.h>
-
-#include "base/command_line.h"
-#include "base/file_path.h"
-#include "base/stl_util.h"
 #include "media/audio/audio_output_dispatcher.h"
-#include "media/audio/audio_parameters.h"
-#include "media/audio/pulse/pulse_output.h"
-#include "media/audio/pulse/pulse_stubs.h"
-#include "media/base/channel_layout.h"
+#include "media/audio/sndio/sndio_output.h"
 #include "media/base/limits.h"
 #include "media/base/media_switches.h"
 
-using media_audio_pulse::kModulePulse;
-using media_audio_pulse::InitializeStubs;
-using media_audio_pulse::StubPathMap;
-
 namespace media {
 
 // Maximum number of output streams that can be open simultaneously.
-static const int kMaxOutputStreams = 50;
+static const int kMaxOutputStreams = 4;
 
 // Default sample rate for input and output streams.
 static const int kDefaultSampleRate = 48000;
 
-static const base::FilePath::CharType kPulseLib[] =
-    FILE_PATH_LITERAL("libpulse.so.0");
-
-// Implementation of AudioManager.
-static bool HasAudioHardware() {
-  int fd;
-  const char *file;
-
-  if ((file = getenv("AUDIOCTLDEVICE")) == 0 || *file == '\0')
-    file = "/dev/audioctl";
-
-  if ((fd = open(file, O_RDONLY)) < 0)
-    return false;
-
-  close(fd);
+bool AudioManagerOpenBSD::HasAudioOutputDevices() {
   return true;
 }
 
-bool AudioManagerOpenBSD::HasAudioOutputDevices() {
-  return HasAudioHardware();
-}
-
 bool AudioManagerOpenBSD::HasAudioInputDevices() {
-  return HasAudioHardware();
+  return false;
 }
 
 AudioParameters AudioManagerOpenBSD::GetInputStreamParameters(
@@@@ -69,19 +39,9 @@@@ AudioParameters AudioManagerOpenBSD::GetInputStreamPar
 }
 
 AudioManagerOpenBSD::AudioManagerOpenBSD(AudioLogFactory* audio_log_factory)
-    : AudioManagerBase(audio_log_factory),
-      pulse_library_is_initialized_(false) {
+    : AudioManagerBase(audio_log_factory) {
+  DLOG(WARNING) << "AudioManagerOpenBSD";
   SetMaxOutputStreamsAllowed(kMaxOutputStreams);
-  StubPathMap paths;
-
-  // Check if the pulse library is avialbale.
-  paths[kModulePulse].push_back(kPulseLib);
-  if (!InitializeStubs(paths)) {
-    DLOG(WARNING) << "Failed on loading the Pulse library and symbols";
-    return;
-  }
-
-  pulse_library_is_initialized_ = true;
 }
 
 AudioManagerOpenBSD::~AudioManagerOpenBSD() {
@@@@ -90,7 +50,7 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
 
 AudioOutputStream* AudioManagerOpenBSD::MakeLinearOutputStream(
     const AudioParameters& params) {
-  DCHECK_EQ(AudioParameters::AUDIO_PCM_LINEAR, params.format);
+  DCHECK_EQ(AudioParameters::AUDIO_PCM_LINEAR, params.format());
   return MakeOutputStream(params);
 }
 
@@@@ -98,20 +58,20 @@@@ AudioOutputStream* AudioManagerOpenBSD::MakeLowLatency
     const AudioParameters& params,
     const std::string& device_id) {
   DLOG_IF(ERROR, !device_id.empty()) << "Not implemented!";
-  DCHECK_EQ(AudioParameters::AUDIO_PCM_LOW_LATENCY, params.format);
+  DCHECK_EQ(AudioParameters::AUDIO_PCM_LOW_LATENCY, params.format());
   return MakeOutputStream(params);
 }
 
 AudioInputStream* AudioManagerOpenBSD::MakeLinearInputStream(
     const AudioParameters& params, const std::string& device_id) {
-  DCHECK_EQ(AudioParameters::AUDIO_PCM_LINEAR, params.format);
+  DCHECK_EQ(AudioParameters::AUDIO_PCM_LINEAR, params.format());
   NOTIMPLEMENTED();
   return NULL;
 }
 
 AudioInputStream* AudioManagerOpenBSD::MakeLowLatencyInputStream(
     const AudioParameters& params, const std::string& device_id) {
-  DCHECK_EQ(AudioParameters::AUDIO_PCM_LOW_LATENCY, params.format);
+  DCHECK_EQ(AudioParameters::AUDIO_PCM_LOW_LATENCY, params.format());
   NOTIMPLEMENTED();
   return NULL;
 }
@@@@ -121,7 +81,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
     const AudioParameters& input_params) {
   // TODO(tommi): Support |output_device_id|.
   DLOG_IF(ERROR, !output_device_id.empty()) << "Not implemented!";
-  static const int kDefaultOutputBufferSize = 512;
+  static const int kDefaultOutputBufferSize = 2048;
 
   ChannelLayout channel_layout = CHANNEL_LAYOUT_STEREO;
   int sample_rate = kDefaultSampleRate;
@@@@ -145,15 +105,14 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
 
 AudioOutputStream* AudioManagerOpenBSD::MakeOutputStream(
     const AudioParameters& params) {
-  if (pulse_library_is_initialized_)
-    return new PulseAudioOutputStream(params, this);
-
-  return NULL;
+  DLOG(WARNING) << "MakeOutputStream";
+  return new SndioAudioOutputStream(params, this);
 }
 
 // TODO(xians): Merge AudioManagerOpenBSD with AudioManagerPulse;
 // static
 AudioManager* CreateAudioManager(AudioLogFactory* audio_log_factory) {
+  DLOG(WARNING) << "CreateAudioManager";
   return new AudioManagerOpenBSD(audio_log_factory);
 }
 
@


1.23
log
@update to 39.0.2171.65
@
text
@d1 1
a1 1
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.22 2014/09/11 19:04:52 robert Exp $
@


1.22
log
@update to 37.0.2062.120
@
text
@d1 3
a3 3
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.21 2014/04/17 16:27:53 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Wed Sep 10 01:47:13 2014
+++ media/audio/openbsd/audio_manager_openbsd.cc	Wed Sep 10 22:05:41 2014
d128 1
a128 1
@@@@ -147,15 +107,14 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
@


1.21
log
@update to 34.0.1847.116 and disable Werror for the future clang update
@
text
@d1 3
a3 3
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.20 2014/03/11 14:52:01 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Wed Apr  2 21:05:03 2014
+++ media/audio/openbsd/audio_manager_openbsd.cc	Sat Apr 12 09:40:41 2014
d64 1
a64 1
@@@@ -65,19 +35,9 @@@@ AudioParameters AudioManagerOpenBSD::GetInputStreamPar
d86 1
a86 1
@@@@ -86,7 +46,7 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d95 1
a95 1
@@@@ -94,20 +54,20 @@@@ AudioOutputStream* AudioManagerOpenBSD::MakeLowLatency
d119 1
a119 1
@@@@ -117,7 +77,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d128 1
a128 1
@@@@ -143,15 +103,14 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
@


1.20
log
@update to 33.0.1750.146
@
text
@d1 3
a3 3
$OpenBSD$
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Thu Feb 20 11:09:01 2014
+++ media/audio/openbsd/audio_manager_openbsd.cc	Fri Feb 28 22:33:48 2014
d95 3
a97 3
@@@@ -95,20 +55,20 @@@@ AudioOutputStream* AudioManagerOpenBSD::MakeLowLatency
     const std::string& device_id,
     const std::string& input_device_id) {
d119 1
a119 1
@@@@ -118,7 +78,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d128 1
a128 1
@@@@ -144,15 +104,14 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
@


1.19
log
@update to 32.0.1700.76
@
text
@d2 2
a3 2
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Thu Jan 16 12:38:32 2014
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu Jan 16 12:40:23 2014
d64 1
a64 2
@@@@ -64,19 +34,8 @@@@ AudioParameters AudioManagerOpenBSD::GetInputStreamPar
       kDefaultSampleRate, 16, kDefaultInputBufferSize);
d67 5
a71 3
-AudioManagerOpenBSD::AudioManagerOpenBSD()
-    : pulse_library_is_initialized_(false) {
+AudioManagerOpenBSD::AudioManagerOpenBSD() {
d86 1
a86 1
@@@@ -85,7 +44,7 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d95 1
a95 1
@@@@ -94,20 +53,20 @@@@ AudioOutputStream* AudioManagerOpenBSD::MakeLowLatency
d119 1
a119 1
@@@@ -117,7 +76,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d128 1
a128 1
@@@@ -143,10 +102,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d136 1
d141 6
@


1.18
log
@update to 31.0.1650.63
@
text
@d2 3
a4 3
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Thu Dec  5 15:40:48 2013
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu Dec  5 15:42:49 2013
@@@@ -4,56 +4,26 @@@@
a14 1
 #include "media/audio/audio_util.h"
d64 1
a64 1
@@@@ -65,19 +35,8 @@@@ AudioParameters AudioManagerOpenBSD::GetInputStreamPar
d85 1
a85 1
@@@@ -86,7 +45,7 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d94 1
a94 1
@@@@ -95,20 +54,20 @@@@ AudioOutputStream* AudioManagerOpenBSD::MakeLowLatency
d118 1
a118 1
@@@@ -118,7 +77,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d127 1
a127 1
@@@@ -144,10 +103,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
@


1.17
log
@update to 29.0.1547.76
@
text
@d2 2
a3 2
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Sun Sep 22 16:22:11 2013
+++ media/audio/openbsd/audio_manager_openbsd.cc	Sat Sep 28 10:48:23 2013
d86 1
a86 1
@@@@ -86,34 +45,34 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d95 2
a96 2
 AudioOutputStream* AudioManagerOpenBSD::MakeLowLatencyOutputStream(
     const AudioParameters& params,
d98 1
d119 1
a119 2
 
 AudioParameters AudioManagerOpenBSD::GetPreferredOutputStreamParameters(
d121 2
d128 1
a128 1
@@@@ -139,10 +98,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
@


1.16
log
@fix audio output buffer size and remove the adobe flash notification

also unbreak chromium on i386 because it seems the new release magically
works on i386
@
text
@d1 4
a4 4
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.15 2013/05/30 18:42:18 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Fri May 17 22:45:40 2013
+++ media/audio/openbsd/audio_manager_openbsd.cc	Fri May 31 17:17:31 2013
@@@@ -4,56 +4,27 @@@@
a60 1
+  // not implemented yet
d65 1
a65 1
@@@@ -65,19 +36,8 @@@@ AudioParameters AudioManagerOpenBSD::GetInputStreamPar
d86 1
a86 1
@@@@ -86,33 +46,33 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d96 2
a97 1
     const AudioParameters& params) {
d126 1
a126 1
@@@@ -138,13 +98,9 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d134 1
a134 1
+    return new SndioAudioOutputStream(params, this);
d137 1
a137 4
-// TODO(xians): Merge AudioManagerOpenBSD with AudioManagerPulse;
 // static
 AudioManager* CreateAudioManager() {
   return new AudioManagerOpenBSD();
@


1.15
log
@update to 27.0.1453.93
@
text
@d1 4
a4 4
$OpenBSD$
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Thu May 30 00:17:28 2013
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu May 30 17:09:20 2013
@@@@ -4,56 +4,30 @@@@
d10 1
a10 1
 #include "base/command_line.h"
d12 1
a12 1
 #include "base/stl_util.h"
d14 1
a14 1
 #include "media/audio/audio_parameters.h"
d18 1
a19 1
 #include "media/base/channel_layout.h"
d61 1
d66 1
a66 1
@@@@ -65,19 +39,7 @@@@ AudioParameters AudioManagerOpenBSD::GetInputStreamPar
d72 2
a73 1
-  SetMaxOutputStreamsAllowed(kMaxOutputStreams);
a83 1
+AudioManagerOpenBSD::AudioManagerOpenBSD() {
d87 1
a87 1
@@@@ -86,26 +48,26 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d118 9
a126 1
@@@@ -138,8 +100,7 @@@@ AudioParameters AudioManagerOpenBSD::GetPreferredOutpu
d132 2
d135 1
d137 4
a140 2
   return NULL;
 }
@


1.14
log
@- update to 26.0.1410.43
- switch chromium to use clang/llvm instead of gcc
- switch back to the internal libvpx because it's an unreleased version
  at this point
- re-enable SSE2 support
@
text
@d2 3
a4 3
--- media/audio/openbsd/audio_manager_openbsd.cc.orig.port	Fri Mar 22 02:12:58 2013
+++ media/audio/openbsd/audio_manager_openbsd.cc	Tue Apr  2 21:05:17 2013
@@@@ -4,43 +4,23 @@@@
d8 5
a12 2
-#include "base/command_line.h"
-#include "base/stl_util.h"
d14 2
a15 1
-#if defined(USE_PULSEAUDIO)
d17 1
a17 1
-#endif
d19 1
d23 3
a25 1
-#include <fcntl.h>
d33 6
a60 1
+  // not implemented yet
d64 23
a86 2
 AudioManagerOpenBSD::AudioManagerOpenBSD() {
@@@@ -53,40 +33,33 @@@@ AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d117 1
d121 1
a121 2
-#if defined(USE_PULSEAUDIO)
-  if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kUsePulseAudio)) {
d123 3
a125 6
-  }
-#endif
-
-  NOTIMPLEMENTED();
-  return NULL;
+  return new SndioAudioOutputStream(params, this);
a126 2
 
 // static
@


1.13
log
@update to 24.0.1312.52
@
text
@d1 3
a3 3
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.12 2012/11/25 18:57:21 ratchov Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Tue Jan  8 03:40:10 2013
+++ media/audio/openbsd/audio_manager_openbsd.cc	Mon Jan 14 19:47:35 2013
@


1.12
log
@Enable audio playback support using sndio.
ok robert@@
@
text
@d1 3
a3 3
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.11 2012/11/07 06:59:45 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Wed Oct 31 20:01:19 2012
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu Nov 22 08:53:57 2012
d53 1
a53 1
@@@@ -57,40 +37,33 @@@@ void AudioManagerOpenBSD::Init() {
@


1.11
log
@update to 23.0.1271.64
@
text
@d1 1
a1 1
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.10 2012/07/10 09:22:34 robert Exp $
d3 51
a53 2
+++ media/audio/openbsd/audio_manager_openbsd.cc	Tue Nov  6 22:45:35 2012
@@@@ -57,26 +57,26 @@@@ void AudioManagerOpenBSD::Init() {
d84 15
@


1.10
log
@update to 20.0.1132.47
@
text
@d1 4
a4 4
$OpenBSD$
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Thu Jun 28 15:01:10 2012
+++ media/audio/openbsd/audio_manager_openbsd.cc	Sat Jul  7 09:50:30 2012
@@@@ -65,26 +65,26 @@@@ void AudioManagerOpenBSD::UnMuteAll() {
@


1.9
log
@update to 18.0.1025.142; requires gcc 4.6 from now on
@
text
@d2 10
a11 5
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Sun Apr  1 22:50:49 2012
+++ media/audio/openbsd/audio_manager_openbsd.cc	Sun Apr  1 22:56:04 2012
@@@@ -51,20 +51,17 @@@@ AudioOutputStream* AudioManagerOpenBSD::MakeAudioOutpu
     return FakeAudioOutputStream::MakeFakeStream(params);
   }
d13 6
a18 9
-  if (!initialized()) {
-    return NULL;
-  }
-
   // Don't allow opening more than |kMaxOutputStreams| streams.
-  if (active_streams_.size() >= kMaxOutputStreams) {
+  if (active_output_stream_count_ >= kMaxOutputStreams) {
     return NULL;
   }
d20 5
a24 12
-  AudioOutputStream* stream;
 #if defined(USE_PULSEAUDIO)
+  AudioOutputStream* stream;
   if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kUsePulseAudio)) {
     stream = new PulseAudioOutputStream(params, this);
-    active_streams_.insert(stream);
+    ++active_output_stream_count_;
+    DCHECK(stream);
     return stream;
   }
 #endif
@@@@ -79,23 +76,12 @@@@ AudioInputStream* AudioManagerOpenBSD::MakeAudioInputS
d28 6
a33 21
-AudioManagerOpenBSD::AudioManagerOpenBSD() {
-}
+AudioManagerOpenBSD::AudioManagerOpenBSD() : active_output_stream_count_(0U) {}
 
 AudioManagerOpenBSD::~AudioManagerOpenBSD() {
-  // Make sure we stop the thread first. If we allow the default destructor to
-  // destroy the members, we may destroy audio streams before stopping the
-  // thread, resulting an unexpected behavior.
-  // This way we make sure activities of the audio streams are all stopped
-  // before we destroy them.
-  audio_thread_.Stop();
-
-  // Free output dispatchers, closing all remaining open streams.
-  output_dispatchers_.clear();
-
-  // Delete all the streams. Have to do it manually, we don't have ScopedSet<>,
-  // and we are not using ScopedVector<> because search there is slow.
-  STLDeleteElements(&active_streams_);
+  Shutdown();
+  // All the streams should have been deleted on the audio thread via Shutdown.
+  CHECK_EQ(active_output_stream_count_, 0U);
a34 13
 
 void AudioManagerOpenBSD::Init() {
@@@@ -112,8 +98,9 @@@@ void AudioManagerOpenBSD::UnMuteAll() {
 
 void AudioManagerOpenBSD::ReleaseOutputStream(AudioOutputStream* stream) {
   if (stream) {
-    active_streams_.erase(stream);
     delete stream;
+    --active_output_stream_count_;
+    DCHECK_GE(active_output_stream_count_, 0U);
   }
 }
 
@


1.8
log
@update to 17.0.963.56
@
text
@d1 16
a16 51
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.7 2011/12/14 16:58:19 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Wed Dec  7 09:01:06 2011
+++ media/audio/openbsd/audio_manager_openbsd.cc	Wed Dec 14 09:52:50 2011
@@@@ -4,23 +4,71 @@@@
 
 #include "media/audio/openbsd/audio_manager_openbsd.h"
 
-#include "base/logging.h"
+#include "base/command_line.h"
+#include "base/stl_util.h"
+#include "media/audio/audio_output_dispatcher.h"
+#include "media/audio/fake_audio_input_stream.h"
+#include "media/audio/fake_audio_output_stream.h"
+#if defined(USE_PULSEAUDIO)
+#include "media/audio/pulse/pulse_output.h"
+#endif
+#include "media/base/limits.h"
+#include "media/base/media_switches.h"
 
-static AudioManagerOpenBSD* g_audio_manager = NULL;
+#include <fcntl.h>
 
+// Maximum number of output streams that can be open simultaneously.
+static const size_t kMaxOutputStreams = 50;
+
 // Implementation of AudioManager.
+static bool HasAudioHardware() {
+  int fd;
+  const char *file;
+
+  if ((file = getenv("AUDIOCTLDEVICE")) == 0 || *file == '\0')
+    file = "/dev/audioctl";
+
+  if ((fd = open(file, O_RDONLY)) < 0)
+    return false;
+
+  close(fd);
+  return true;
+}
+
 bool AudioManagerOpenBSD::HasAudioOutputDevices() {
-  NOTIMPLEMENTED();
-  return false;
+  return HasAudioHardware();
 }
 
 bool AudioManagerOpenBSD::HasAudioInputDevices() {
-  NOTIMPLEMENTED();
-  return false;
+  return HasAudioHardware();
 }
d18 2
a19 18
 AudioOutputStream* AudioManagerOpenBSD::MakeAudioOutputStream(
     const AudioParameters& params) {
+  // Early return for testing hook.  Do this before checking for
+  // |initialized_|.
+  if (params.format == AudioParameters::AUDIO_MOCK) {
+    return FakeAudioOutputStream::MakeFakeStream(params);
+  }
+
+  if (!initialized()) {
+    return NULL;
+  }
+
+  // Don't allow opening more than |kMaxOutputStreams| streams.
+  if (active_streams_.size() >= kMaxOutputStreams) {
+    return NULL;
+  }
+
+#if defined(USE_PULSEAUDIO)
d21 9
a29 8
+  if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kUsePulseAudio)) {
+    stream = new PulseAudioOutputStream(params, this, GetMessageLoop());
+    active_streams_.insert(stream);
+    return stream;
+  }
+#endif
+
   NOTIMPLEMENTED();
d32 4
a35 2
@@@@ -35,6 +83,19 @@@@ AudioManagerOpenBSD::AudioManagerOpenBSD() {
 }
d38 16
a53 13
+  // Make sure we stop the thread first. If we allow the default destructor to
+  // destroy the members, we may destroy audio streams before stopping the
+  // thread, resulting an unexpected behavior.
+  // This way we make sure activities of the audio streams are all stopped
+  // before we destroy them.
+  audio_thread_.Stop();
+
+  // Free output dispatchers, closing all remaining open streams.
+  output_dispatchers_.clear();
+
+  // Delete all the streams. Have to do it manually, we don't have ScopedSet<>,
+  // and we are not using ScopedVector<> because search there is slow.
+  STLDeleteElements(&active_streams_);
d57 1
a57 3
@@@@ -49,9 +110,11 @@@@ void AudioManagerOpenBSD::UnMuteAll() {
   NOTIMPLEMENTED();
 }
d59 7
a65 8
-bool AudioManagerOpenBSD::IsRecordingInProgress() {
-  NOTIMPLEMENTED();
-  return false;
+void AudioManagerOpenBSD::ReleaseOutputStream(AudioOutputStream* stream) {
+  if (stream) {
+    active_streams_.erase(stream);
+    delete stream;
+  }
a67 1
 // static
@


1.7
log
@update to 16.0.912.63
@
text
@d1 1
a1 1
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.6 2011/10/27 07:59:09 robert Exp $
@


1.6
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@d1 4
a4 4
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.5 2011/09/19 08:55:26 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Wed Oct 26 20:55:10 2011
+++ media/audio/openbsd/audio_manager_openbsd.cc	Wed Oct 26 20:56:56 2011
@@@@ -4,14 +4,17 @@@@
d9 3
a11 1
+#include "base/sys_info.h"
d14 3
a16 3
+#include "media/audio/openbsd/audio_manager_openbsd.h"
+#include "media/audio/openbsd/sndio_output.h"
+#include "media/base/limits.h"
d18 1
d21 5
a25 1
-
d27 14
d44 1
a44 1
+  return true;
d48 3
a50 2
@@@@ -37,10 +40,6 @@@@ AudioManagerOpenBSD::AudioManagerOpenBSD() {
 AudioManagerOpenBSD::~AudioManagerOpenBSD() {
d53 26
a78 5
-void AudioManagerOpenBSD::Init() {
-  AudioManagerBase::Init();
-}
-
 void AudioManagerOpenBSD::MuteAll() {
d80 3
d84 8
a91 5
@@@@ -52,4 +51,16 @@@@ void AudioManagerOpenBSD::UnMuteAll() {
 // static
 AudioManager* AudioManager::CreateAudioManager() {
   return new AudioManagerOpenBSD();
+}
d93 2
a94 6
+// Called by the stream when it has been released by calling Close().
+void AudioManagerOpenBSD::ReleaseOutputStream(
+    PCMQueueOutAudioOutputStream* stream) {
+  DCHECK(stream);
+  delete stream;
+}
d96 18
a113 3
+// Called by the stream when it has been released by calling Close().
+void AudioManagerOpenBSD::ReleaseInputStream(PCMQueueInAudioInputStream* stream) {
+  NOTIMPLEMENTED();
d115 2
@


1.5
log
@update to 14.0.835.163
@
text
@d1 3
a3 3
$OpenBSD$
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Wed Aug 24 11:09:14 2011
+++ media/audio/openbsd/audio_manager_openbsd.cc	Wed Aug 24 11:10:50 2011
d27 1
a27 20
@@@@ -21,8 +24,16 @@@@ bool AudioManagerOpenBSD::HasAudioInputDevices() {
 
 AudioOutputStream* AudioManagerOpenBSD::MakeAudioOutputStream(
     const AudioParameters& params) {
-  NOTIMPLEMENTED();
-  return NULL;
+  if (getenv("CHROME_SNDIO") == NULL) {
+    NOTIMPLEMENTED();
+    return NULL;
+  }
+
+  if (params.format == AudioParameters::AUDIO_MOCK) {
+    return FakeAudioOutputStream::MakeFakeStream(params);
+  }
+
+  return new PCMQueueOutAudioOutputStream(this, params);
 }
 
 AudioInputStream* AudioManagerOpenBSD::MakeAudioInputStream(
@@@@ -37,10 +48,6 @@@@ AudioManagerOpenBSD::AudioManagerOpenBSD() {
d38 1
a38 1
@@@@ -52,4 +59,16 @@@@ void AudioManagerOpenBSD::UnMuteAll() {
@


1.4
log
@Add WIP progress sndio support to chrome, developed by jakemsr@@ and
with modifications by me.
It is not working yet so you can only enable it by setting the
CHROME_SNDIO environment variable, so by default nothing changes.
I commit this so that other people can work on it too.
@
text
@d1 3
a3 3
$OpenBSD: patch-media_audio_openbsd_audio_manager_openbsd_cc,v 1.3 2011/04/29 13:18:01 robert Exp $
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Sat May  7 11:39:59 2011
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu May 19 16:34:51 2011
d27 1
a27 1
@@@@ -21,8 +24,17 @@@@ bool AudioManagerOpenBSD::HasAudioInputDevices() {
d30 1
a30 1
     AudioParameters params) {
a32 1
+
d46 1
a46 1
@@@@ -37,10 +49,6 @@@@ AudioManagerOpenBSD::AudioManagerOpenBSD() {
d57 1
a57 1
@@@@ -52,4 +60,16 @@@@ void AudioManagerOpenBSD::UnMuteAll() {
@


1.3
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@d1 4
a4 4
$OpenBSD$
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Thu Apr 28 11:48:27 2011
+++ media/audio/openbsd/audio_manager_openbsd.cc	Thu Apr 28 11:49:20 2011
@@@@ -4,9 +4,13 @@@@
d8 2
a9 5
+#include "base/command_line.h"
 #include "base/logging.h"
-
-static AudioManagerOpenBSD* g_audio_manager = NULL;
+#include "media/audio/audio_output_dispatcher.h"
d12 3
a15 1
+#include "media/base/media_switches.h"
d17 2
d21 54
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d2 3
a4 3
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Fri Jan 21 10:19:46 2011
+++ media/audio/openbsd/audio_manager_openbsd.cc	Mon Jan 24 11:23:48 2011
@@@@ -4,21 +4,23 @@@@
d10 2
a17 4
-namespace {
-AudioManagerOpenBSD* g_audio_manager = NULL;
-}  // namespace
-
a19 23
   NOTIMPLEMENTED();
-  return false;
+  return true;
 }
 
 bool AudioManagerOpenBSD::HasAudioInputDevices() {
   NOTIMPLEMENTED();
-  return false;
+  return true;
 }
 
 AudioOutputStream* AudioManagerOpenBSD::MakeAudioOutputStream(
@@@@ -48,6 +50,10 @@@@ void AudioManagerOpenBSD::MuteAll() {
 }
 
 void AudioManagerOpenBSD::UnMuteAll() {
+  NOTIMPLEMENTED();
+}
+
+void AudioManagerOpenBSD::ReleaseOutputStream(AlsaPcmOutputStream* stream) {
   NOTIMPLEMENTED();
 }
 
@


1.1
log
@cut the "monster patches" into small pieces. pval can fix it to his liking
if he comes back.
In the mean time, fix build of chromium by adding the required
-I/usr/local/includes to gyp glue where needed.
@
text
@d2 36
a37 43
--- media/audio/openbsd/audio_manager_openbsd.cc.orig	Sun Nov 28 00:11:32 2010
+++ media/audio/openbsd/audio_manager_openbsd.cc	Sun Nov 28 00:11:32 2010
@@@@ -0,0 +1,60 @@@@
+// Copyright (c) 2006-2009 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "media/audio/openbsd/audio_manager_openbsd.h"
+
+#include "base/at_exit.h"
+#include "base/logging.h"
+//#include "media/audio/fake_audio_output_stream.h"
+//#include "media/audio/linux/alsa_output.h"
+//#include "media/audio/linux/alsa_wrapper.h"
+
+namespace {
+AudioManagerOpenBSD* g_audio_manager = NULL;
+}  // namespace
+
+// Implementation of AudioManager.
+bool AudioManagerOpenBSD::HasAudioDevices() {
+  NOTIMPLEMENTED();
+  return false;
+}
+
+AudioOutputStream* AudioManagerOpenBSD::MakeAudioStream(Format format,
+                                                        int channels,
+                                                        int sample_rate,
+                                                        char bits_per_sample) {
+  NOTIMPLEMENTED();
+  return NULL;
+}
+
+AudioManagerOpenBSD::AudioManagerOpenBSD() {
+}
+
+AudioManagerOpenBSD::~AudioManagerOpenBSD() {
+}
+
+void AudioManagerOpenBSD::Init() {
+}
+
+void AudioManagerOpenBSD::MuteAll() {
d41 4
a44 17
+void AudioManagerOpenBSD::UnMuteAll() {
+  NOTIMPLEMENTED();
+}
+
+void DestroyAudioManagerOpenBSD(void* not_used) {
+  delete g_audio_manager;
+  g_audio_manager = NULL;
+}
+
+AudioManager* AudioManager::GetAudioManager() {
+  if (!g_audio_manager) {
+    g_audio_manager = new AudioManagerOpenBSD();
+    g_audio_manager->Init();
+    base::AtExitManager::RegisterCallback(&DestroyAudioManagerOpenBSD, NULL);
+  }
+  return g_audio_manager;
+}
@

