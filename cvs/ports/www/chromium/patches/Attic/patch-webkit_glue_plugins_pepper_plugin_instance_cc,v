head	1.2;
access;
symbols
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2011.03.15.11.38.05;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 10.0.648.133
@
text
@$OpenBSD: patch-webkit_glue_plugins_pepper_plugin_instance_cc,v 1.1 2011/02/08 09:43:02 espie Exp $
--- webkit/glue/plugins/pepper_plugin_instance.cc.orig	Fri Jan 21 10:19:48 2011
+++ webkit/glue/plugins/pepper_plugin_instance.cc	Sun Jan 23 23:27:37 2011
@@@@ -301,10 +301,10 @@@@ PluginInstance::PluginInstance(PluginDelegate* delegat
       plugin_private_interface_(NULL),
       plugin_selection_interface_(NULL),
       plugin_zoom_interface_(NULL),
-#if defined (OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
       num_pages_(0),
       pdf_output_done_(false),
-#endif  // defined (OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_OPENBSD)
       plugin_print_interface_(NULL),
       plugin_graphics_3d_interface_(NULL),
       always_on_top_(false),
@@@@ -835,17 +835,17 @@@@ int PluginInstance::PrintBegin(const gfx::Rect& printa
   if (!num_pages)
     return 0;
   current_print_settings_ = print_settings;
-#if defined (OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   num_pages_ = num_pages;
   pdf_output_done_ = false;
-#endif  // (OS_LINUX)
+#endif  // OS_LINUX || OS_OPENBSD
   return num_pages;
 }
 
 bool PluginInstance::PrintPage(int page_number, WebKit::WebCanvas* canvas) {
   DCHECK(plugin_print_interface_);
   PP_PrintPageNumberRange_Dev page_range;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   if (current_print_settings_.format == PP_PRINTOUTPUTFORMAT_PDF) {
     // On Linux we will try and output all pages as PDF in the first call to
     // PrintPage. This is a temporary hack.
@@@@ -856,9 +856,9 @@@@ bool PluginInstance::PrintPage(int page_number, WebKit
     page_range.first_page_number = 0;
     page_range.last_page_number = num_pages_ - 1;
   }
-#else  // defined(OS_LINUX)
+#else  // defined(OS_LINUX) || defined(OS_OPENBSD)
   page_range.first_page_number = page_range.last_page_number = page_number;
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_OPENBSD)
 
   PP_Resource print_output =
       plugin_print_interface_->PrintPages(pp_instance(), &page_range, 1);
@@@@ -886,10 +886,10 @@@@ void PluginInstance::PrintEnd() {
   memset(&current_print_settings_, 0, sizeof(current_print_settings_));
 #if defined(OS_MACOSX)
   last_printed_page_ = NULL;
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_OPENBSD)
   num_pages_ = 0;
   pdf_output_done_ = false;
-#endif  // defined(OS_LINUX)
+#endif  // defined(OS_LINUX) || defined(OS_OPENBSD)
 }
 
 bool PluginInstance::IsFullscreen() {
@@@@ -957,7 +957,7 @@@@ bool PluginInstance::PrintPDFOutput(PP_Resource print_
 #endif  // defined(OS_WIN)
 
   bool ret = false;
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
   // On Linux we need to get the backing PdfPsMetafile and write the bits
   // directly.
   cairo_t* context = canvas->beginPlatformPaint();
@


1.1
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 1
a1 1
$OpenBSD$
@

