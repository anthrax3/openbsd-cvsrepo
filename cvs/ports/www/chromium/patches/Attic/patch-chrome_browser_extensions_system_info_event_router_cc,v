head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2013.05.30.18.42.18;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2013.04.03.08.19.10;	author robert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 27.0.1453.93
@
text
@$OpenBSD: patch-chrome_browser_extensions_system_info_event_router_cc,v 1.1 2013/04/03 08:19:10 robert Exp $
--- chrome/browser/extensions/system_info_event_router.cc.orig.port	Fri Mar 22 02:13:53 2013
+++ chrome/browser/extensions/system_info_event_router.cc	Tue Apr  2 21:05:17 2013
@@@@ -38,6 +38,7 @@@@ const char kExperimentalSystemInfoEventPrefix[] = "exp
 const char kStorageEventPrefix[] = "experimental.systemInfo.storage";
 const char kCpuEventPrefix[] = "experimental.systemInfo.cpu";
 
+#if !defined(OS_BSD)
 static bool IsDisplayEvent(const std::string& event_name) {
   return StartsWithASCII(event_name, kDisplayEventPrefix, true);
 }
@@@@ -49,6 +50,7 @@@@ static bool IsStorageEvent(const std::string& event_na
 static bool IsCpuEvent(const std::string& event_name) {
   return StartsWithASCII(event_name, kCpuEventPrefix, true);
 }
+#endif
 
 }  // namespace
 
@@@@ -69,9 +71,11 @@@@ void SystemInfoEventRouter::StartWatchingStorages(
   if (!success)
     return;
 
+#if !defined(OS_BSD)
   for (StorageInfo::const_iterator it = info.begin(); it != info.end(); ++it) {
     StorageInfoProvider::Get()->StartWatching((*it)->id);
   }
+#endif
 }
 
 void SystemInfoEventRouter::StopWatchingStorages(
@@@@ -80,9 +84,11 @@@@ void SystemInfoEventRouter::StopWatchingStorages(
   if (!success)
     return;
 
+#if !defined(OS_BSD)
   for (StorageInfo::const_iterator it = info.begin(); it != info.end(); ++it) {
     StorageInfoProvider::Get()->StopWatching((*it)->id);
   }
+#endif
 }
 
 void SystemInfoEventRouter::AddEventListener(const std::string& event_name) {
@@@@ -91,6 +97,7 @@@@ void SystemInfoEventRouter::AddEventListener(const std
   watching_event_set_.insert(event_name);
   if (watching_event_set_.count(event_name) > 1)
     return;
+#if !defined(OS_BSD)
   // Start watching the |event_name| event if the first event listener arrives.
   // For systemInfo.storage event.
   if (IsStorageEvent(event_name)) {
@@@@ -115,6 +122,7 @@@@ void SystemInfoEventRouter::AddEventListener(const std
     ash::Shell::GetScreen()->AddObserver(this);
 #endif
   }
+#endif
 }
 
 void SystemInfoEventRouter::RemoveEventListener(
@@@@ -125,6 +133,7 @@@@ void SystemInfoEventRouter::RemoveEventListener(
   if (watching_event_set_.count(event_name) > 0)
     return;
 
+#if !defined(OS_BSD)
   // In case of the last event listener is removed, we need to stop watching
   // it to avoid unnecessary overhead.
   if (IsStorageEvent(event_name)) {
@@@@ -143,6 +152,7 @@@@ void SystemInfoEventRouter::RemoveEventListener(
     ash::Shell::GetScreen()->RemoveObserver(this);
 #endif
   }
+#endif
 }
 
 // static
@


1.1
log
@- update to 26.0.1410.43
- switch chromium to use clang/llvm instead of gcc
- switch back to the internal libvpx because it's an unreleased version
  at this point
- re-enable SSE2 support
@
text
@d1 1
a1 1
$OpenBSD$
@

