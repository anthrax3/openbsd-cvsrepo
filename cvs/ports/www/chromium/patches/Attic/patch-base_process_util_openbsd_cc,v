head	1.13;
access;
symbols
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4;
locks; strict;
comment	@# @;


1.13
date	2013.10.29.06.51.34;	author robert;	state dead;
branches;
next	1.12;

1.12
date	2013.09.29.19.04.00;	author robert;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.03.08.19.10;	author robert;	state Exp;
branches;
next	1.10;

1.10
date	2012.12.18.21.38.12;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2012.04.15.10.40.44;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.17.10.19.50;	author robert;	state dead;
branches;
next	1.7;

1.7
date	2011.12.14.16.58.19;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.27.07.59.08;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.08.21.23.04;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.16.10.52.46;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.02.08.53.51;	author robert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@update to 30.0.1599.101
@
text
@$OpenBSD: patch-base_process_util_openbsd_cc,v 1.12 2013/09/29 19:04:00 robert Exp $
--- base/process_util_openbsd.cc.orig.port	Sun Sep 22 16:13:07 2013
+++ base/process_util_openbsd.cc	Sun Sep 22 16:16:16 2013
@@@@ -10,6 +10,7 @@@@
 #include <errno.h>
 #include <fcntl.h>
 #include <sys/param.h>
+#include <sys/proc.h>
 #include <sys/sysctl.h>
 #include <sys/time.h>
 #include <sys/types.h>
@@@@ -19,9 +20,9 @@@@
 #include <unistd.h>
 
 #include "base/logging.h"
-#include "base/string_tokenizer.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_split.h"
+#include "base/strings/string_tokenizer.h"
 #include "base/strings/string_util.h"
 #include "base/sys_info.h"
 #include "base/threading/thread_restrictions.h"
@@@@ -29,39 +30,59 @@@@
 namespace base {
 
 ProcessId GetParentProcessId(ProcessHandle process) {
-  struct kinfo_proc info;
+  struct kinfo_proc *info;
   size_t length;
+  pid_t ppid;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    ppid = -1;
+    goto out;
+  }
 
-  return info.p_ppid;
+  ppid = info->p_ppid;
+
+out:
+  free(info);
+  return ppid;
 }
 
 FilePath GetProcessExecutablePath(ProcessHandle process) {
-  struct kinfo_proc kp;
-  size_t len;
+  struct kinfo_proc *info;
+  size_t length;
+  char *path = NULL;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
                 sizeof(struct kinfo_proc), 0 };
 
-  if (sysctl(mib, arraysize(mib), NULL, &len, NULL, 0) == -1)
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) == -1)
     return FilePath();
-  mib[5] = (len / sizeof(struct kinfo_proc));
-  if (sysctl(mib, arraysize(mib), &kp, &len, NULL, 0) < 0)
-    return FilePath();
-  if ((kp.p_flag & P_SYSTEM) != 0)
-    return FilePath();
-  if (strcmp(kp.p_comm, "chrome") == 0)
-    return FilePath(kp.p_comm);
 
-  return FilePath();
+  info = (struct kinfo_proc *)malloc(length);
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0)
+    goto out;
+
+  if ((info->p_flag & P_SYSTEM) != 0)
+    goto out;
+
+  if (strcmp(info->p_comm, "chrome") == 0) {
+    path = info->p_comm;
+    goto out;
+  }
+
+out:
+  free(info);
+  return FilePath(path);
 }
 
 void EnableTerminationOnOutOfMemory() {
@


1.12
log
@update to 29.0.1547.76
@
text
@d1 1
a1 1
$OpenBSD$
@


1.11
log
@- update to 26.0.1410.43
- switch chromium to use clang/llvm instead of gcc
- switch back to the internal libvpx because it's an unreleased version
  at this point
- re-enable SSE2 support
@
text
@d2 2
a3 2
--- base/process_util_openbsd.cc.orig.port	Fri Mar 22 02:13:44 2013
+++ base/process_util_openbsd.cc	Tue Apr  2 21:05:17 2013
d12 2
a13 1
@@@@ -20,49 +21,69 @@@@
a14 1
 #include "base/file_util.h"
a16 1
 #include "base/string_util.h"
d20 1
d23 1
a23 1
 
d97 1
a97 101
 ProcessIterator::ProcessIterator(const ProcessFilter* filter)
@@@@ -194,20 +215,28 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
 }
 
 size_t ProcessMetrics::GetPagefileUsage() const {
-  struct kinfo_proc info;
-  size_t length;
+  struct kinfo_proc *info;
+  size_t length, pfu;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    pfu = -1;
+    goto out;
+  }
 
-  return (info.p_vm_tsize + info.p_vm_dsize + info.p_vm_ssize);
+  pfu = (info->p_vm_tsize + info->p_vm_dsize + info->p_vm_ssize);
+
+out:
+  free(info);
+  return pfu;
 }
 
 size_t ProcessMetrics::GetPeakPagefileUsage() const {
@@@@ -216,20 +245,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
 }
 
 size_t ProcessMetrics::GetWorkingSetSize() const {
-  struct kinfo_proc info;
-  size_t length;
+  struct kinfo_proc *info;
+  size_t length, wss;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    wss = -1;
+    goto out;
+  }
 
-  return info.p_vm_rssize * getpagesize();
+  wss = (info->p_vm_rssize * getpagesize());
+
+out:
+  free(info);
+  return wss;
 }
 
 size_t ProcessMetrics::GetPeakWorkingSetSize() const {
@@@@ -270,20 +307,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
 }
 
 static int GetProcessCPU(pid_t pid) {
-  struct kinfo_proc info;
+  struct kinfo_proc *info;
   size_t length;
+  int pctcpu = 0;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return 0;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0)
+    goto out;
 
-  return info.p_pctcpu;
+  pctcpu = info->p_pctcpu;
+
+out:
+  free(info);
+  return pctcpu;
 }
 
 double ProcessMetrics::GetCPUUsage() {
@


1.10
log
@cope with sysctl.h changes
@
text
@d1 6
a6 6
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.9 2012/04/15 10:40:44 robert Exp $
--- base/process_util_openbsd.cc.orig	Tue Nov 13 19:02:10 2012
+++ base/process_util_openbsd.cc	Fri Dec  7 06:24:10 2012
@@@@ -13,6 +13,7 @@@@
 #include <sys/types.h>
 #include <sys/wait.h>
d10 14
a23 3
 #include <sys/user.h>
 #include <time.h>
@@@@ -30,39 +31,59 @@@@
@


1.9
log
@make sure we use big enough buffers for sysctl(3)
@
text
@d1 12
a12 4
$OpenBSD$
--- base/process_util_openbsd.cc.orig	Sat Apr 14 12:10:29 2012
+++ base/process_util_openbsd.cc	Sat Apr 14 16:55:59 2012
@@@@ -30,39 +30,59 @@@@
d87 1
a87 1
@@@@ -194,20 +214,28 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
d121 1
a121 1
@@@@ -216,20 +244,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
d155 1
a155 1
@@@@ -270,20 +306,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
@


1.8
log
@update to 17.0.963.56
@
text
@d1 34
a34 4
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.7 2011/12/14 16:58:19 robert Exp $
--- base/process_util_openbsd.cc.orig	Wed Dec  7 09:01:59 2011
+++ base/process_util_openbsd.cc	Tue Dec 13 22:11:09 2011
@@@@ -47,7 +47,22 @@@@ ProcessId GetParentProcessId(ProcessHandle process) {
d38 26
a63 15
-  return FilePath(std::string("/usr/local/chrome/chrome"));
+  struct kinfo_proc kp;
+  size_t len;
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
+                sizeof(struct kinfo_proc), 0 };
+
+  if (sysctl(mib, arraysize(mib), NULL, &len, NULL, 0) == -1)
+    return FilePath();
+  mib[5] = (len / sizeof(struct kinfo_proc));
+  if (sysctl(mib, arraysize(mib), &kp, &len, NULL, 0) < 0)
+    return FilePath();
+  if ((kp.p_flag & P_SYSTEM) != 0)
+    return FilePath();
+  if (strcmp(kp.p_comm, "chrome") == 0)
+    return FilePath(kp.p_comm);
d65 11
a75 1
+  return FilePath();
d79 100
@


1.7
log
@update to 16.0.912.63
@
text
@d1 1
a1 1
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.6 2011/10/27 07:59:08 robert Exp $
@


1.6
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@d1 8
a8 53
$OpenBSD$
--- base/process_util_openbsd.cc.orig	Wed Oct 26 14:14:55 2011
+++ base/process_util_openbsd.cc	Wed Oct 26 14:15:00 2011
@@@@ -0,0 +1,346 @@@@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/process_util.h"
+
+#include <ctype.h>
+#include <dirent.h>
+#include <dlfcn.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#include <sys/user.h>
+#include <time.h>
+#include <unistd.h>
+
+#include "base/file_util.h"
+#include "base/logging.h"
+#include "base/string_number_conversions.h"
+#include "base/string_split.h"
+#include "base/string_tokenizer.h"
+#include "base/string_util.h"
+#include "base/sys_info.h"
+#include "base/threading/thread_restrictions.h"
+
+namespace base {
+
+ProcessId GetParentProcessId(ProcessHandle process) {
+  struct kinfo_proc info;
+  size_t length;
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
+                sizeof(struct kinfo_proc), 0 };
+
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
+    return -1;
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+    return -1;
+
+  return info.p_ppid;
+}
+
+FilePath GetProcessExecutablePath(ProcessHandle process) {
d25 3
a27 281
+}
+
+ProcessIterator::ProcessIterator(const ProcessFilter* filter)
+    : index_of_kinfo_proc_(),
+      filter_(filter) {
+
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_UID, getuid(),
+                sizeof(struct kinfo_proc), 0 };
+
+  bool done = false;
+  int try_num = 1;
+  const int max_tries = 10;
+
+  do {
+    size_t len = 0;
+    if (sysctl(mib, arraysize(mib), NULL, &len, NULL, 0) < 0) {
+      LOG(ERROR) << "failed to get the size needed for the process list";
+      kinfo_procs_.resize(0);
+      done = true;
+    } else {
+      size_t num_of_kinfo_proc = len / sizeof(struct kinfo_proc);
+      // Leave some spare room for process table growth (more could show up
+      // between when we check and now)
+      num_of_kinfo_proc += 16;
+      kinfo_procs_.resize(num_of_kinfo_proc);
+      len = num_of_kinfo_proc * sizeof(struct kinfo_proc);
+      if (sysctl(mib, arraysize(mib), &kinfo_procs_[0], &len, NULL, 0) < 0) {
+        // If we get a mem error, it just means we need a bigger buffer, so
+        // loop around again.  Anything else is a real error and give up.
+        if (errno != ENOMEM) {
+          LOG(ERROR) << "failed to get the process list";
+          kinfo_procs_.resize(0);
+          done = true;
+        }
+      } else {
+        // Got the list, just make sure we're sized exactly right
+        size_t num_of_kinfo_proc = len / sizeof(struct kinfo_proc);
+        kinfo_procs_.resize(num_of_kinfo_proc);
+        done = true;
+      }
+    }
+  } while (!done && (try_num++ < max_tries));
+
+  if (!done) {
+    LOG(ERROR) << "failed to collect the process list in a few tries";
+    kinfo_procs_.resize(0);
+  }
+}
+
+ProcessIterator::~ProcessIterator() {
+}
+
+bool ProcessIterator::CheckForNextProcess() {
+  std::string data;
+  for (; index_of_kinfo_proc_ < kinfo_procs_.size(); ++index_of_kinfo_proc_) {
+    kinfo_proc& kinfo = kinfo_procs_[index_of_kinfo_proc_];
+
+    // Skip processes just awaiting collection
+    if ((kinfo.p_pid > 0) && (kinfo.p_stat == SZOMB))
+      continue;
+
+    int mib[] = { CTL_KERN, KERN_PROC_ARGS, kinfo.p_pid };
+
+    // Find out what size buffer we need.
+    size_t data_len = 0;
+    if (sysctl(mib, arraysize(mib), NULL, &data_len, NULL, 0) < 0) {
+      DVPLOG(1) << "failed to figure out the buffer size for a commandline";
+      continue;
+    }
+
+    data.resize(data_len);
+    if (sysctl(mib, arraysize(mib), &data[0], &data_len, NULL, 0) < 0) {
+      DVPLOG(1) << "failed to fetch a commandline";
+      continue;
+    }
+
+    // |data| contains all the command line parameters of the process, separated
+    // by blocks of one or more null characters. We tokenize |data| into a
+    // vector of strings using '\0' as a delimiter and populate
+    // |entry_.cmd_line_args_|.
+    std::string delimiters;
+    delimiters.push_back('\0');
+    Tokenize(data, delimiters, &entry_.cmd_line_args_);
+
+    // |data| starts with the full executable path followed by a null character.
+    // We search for the first instance of '\0' and extract everything before it
+    // to populate |entry_.exe_file_|.
+    size_t exec_name_end = data.find('\0');
+    if (exec_name_end == std::string::npos) {
+      LOG(ERROR) << "command line data didn't match expected format";
+      continue;
+    }
+
+    entry_.pid_ = kinfo.p_pid;
+    entry_.ppid_ = kinfo.p_ppid;
+    entry_.gid_ = kinfo.p__pgid;
+    size_t last_slash = data.rfind('/', exec_name_end);
+    if (last_slash == std::string::npos)
+      entry_.exe_file_.assign(data, 0, exec_name_end);
+    else
+      entry_.exe_file_.assign(data, last_slash + 1,
+                              exec_name_end - last_slash - 1);
+    // Start w/ the next entry next time through
+    ++index_of_kinfo_proc_;
+    // Done
+    return true;
+  }
+  return false;
+}
+
+bool NamedProcessIterator::IncludeEntry() {
+  return (executable_name_ == entry().exe_file() &&
+          ProcessIterator::IncludeEntry());
+}
+
+
+ProcessMetrics::ProcessMetrics(ProcessHandle process)
+    : process_(process),
+      last_time_(0),
+      last_system_time_(0),
+      last_cpu_(0) {
+
+  processor_count_ = base::SysInfo::NumberOfProcessors();
+}
+
+// static
+ProcessMetrics* ProcessMetrics::CreateProcessMetrics(ProcessHandle process) {
+  return new ProcessMetrics(process);
+}
+
+size_t ProcessMetrics::GetPagefileUsage() const {
+  struct kinfo_proc info;
+  size_t length;
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
+                sizeof(struct kinfo_proc), 0 };
+
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
+    return -1;
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+    return -1;
+
+  return (info.p_vm_tsize + info.p_vm_dsize + info.p_vm_ssize);
+}
+
+size_t ProcessMetrics::GetPeakPagefileUsage() const {
+
+  return 0;
+}
+
+size_t ProcessMetrics::GetWorkingSetSize() const {
+  struct kinfo_proc info;
+  size_t length;
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
+                sizeof(struct kinfo_proc), 0 };
+
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
+    return -1;
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+    return -1;
+
+  return info.p_vm_rssize * getpagesize();
+}
+
+size_t ProcessMetrics::GetPeakWorkingSetSize() const {
+
+  return 0;
+}
+
+bool ProcessMetrics::GetMemoryBytes(size_t* private_bytes,
+                                    size_t* shared_bytes) {
+  WorkingSetKBytes ws_usage;
+
+  if (!GetWorkingSetKBytes(&ws_usage))
+    return false;
+
+  if (private_bytes)
+    *private_bytes = ws_usage.priv << 10;
+
+  if (shared_bytes)
+    *shared_bytes = ws_usage.shared * 1024;
+
+  return true;
+}
+
+bool ProcessMetrics::GetWorkingSetKBytes(WorkingSetKBytes* ws_usage) const {
+// TODO(bapt) be sure we can't be precise
+  size_t priv = GetWorkingSetSize();
+  if (!priv)
+    return false;
+  ws_usage->priv = priv / 1024;
+  ws_usage->shareable = 0;
+  ws_usage->shared = 0;
+
+  return true;
+}
+
+bool ProcessMetrics::GetIOCounters(IoCounters* io_counters) const {
+  return false;
+}
+
+static int GetProcessCPU(pid_t pid) {
+  struct kinfo_proc info;
+  size_t length;
+  int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid,
+                sizeof(struct kinfo_proc), 0 };
+
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
+    return -1;
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
+    return 0;
+
+  return info.p_pctcpu;
+}
+
+double ProcessMetrics::GetCPUUsage() {
+  struct timeval now;
+
+  int retval = gettimeofday(&now, NULL);
+  if (retval)
+    return 0;
+
+  int64 time = TimeValToMicroseconds(now);
+
+  if (last_time_ == 0) {
+    // First call, just set the last values.
+    last_time_ = time;
+    last_cpu_ = GetProcessCPU(process_);
+    return 0;
+  }
+
+  int64 time_delta = time - last_time_;
+  DCHECK_NE(time_delta, 0);
+
+  if (time_delta == 0)
+    return 0;
+
+  int cpu = GetProcessCPU(process_);
+
+  last_time_ = time;
+  last_cpu_ = cpu;
+
+  double percentage = static_cast<double>((cpu * 100.0) / FSCALE);
+
+  return percentage;
+}
+
+size_t GetSystemCommitCharge() {
+  int mib[] = { CTL_VM, VM_METER };
+  int pagesize;
+  struct vmtotal vmtotal;
+  unsigned long mem_total, mem_free, mem_inactive;
+  size_t len = sizeof(vmtotal);
+
+  if (sysctl(mib, arraysize(mib), &vmtotal, &len, NULL, 0) < 0)
+    return 0;
+
+  mem_total = vmtotal.t_vm;
+  mem_free = vmtotal.t_free;
+  mem_inactive = vmtotal.t_vm - vmtotal.t_avm;
+
+  pagesize = getpagesize();
+
+  return mem_total - (mem_free*pagesize) - (mem_inactive*pagesize);
+}
+
+void EnableTerminationOnOutOfMemory() {
+}
+
+void EnableTerminationOnHeapCorruption() {
+}
+
+}  // namespace base
@


1.5
log
@update to 14.0.835.163
@
text
@d1 5
a5 5
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.4 2011/06/08 21:23:04 robert Exp $
--- base/process_util_openbsd.cc.orig	Fri Sep 16 18:17:22 2011
+++ base/process_util_openbsd.cc	Sun Sep 18 12:32:09 2011
@@@@ -0,0 +1,339 @@@@
+// Copyright (c) 2009 The Chromium Authors. All rights reserved.
d38 3
a40 2
+  int mib[6];
+  size_t info_size = sizeof(info);
d42 4
a45 6
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_PROC;
+  mib[2] = KERN_PROC_PID;
+  mib[3] = process;
+  mib[4] = info_size;
+  mib[5] = 400; /* XXX */
d47 1
a47 1
+  if (sysctl(mib, 6, &info, &info_size, NULL, 0) < 0)
d54 16
a69 1
+  return FilePath(std::string("/usr/local/chrome/chrome"));
d73 2
a74 2
+  : index_of_kinfo_proc_(),
+  filter_(filter) {
d76 2
a77 8
+  int mib[6];
+
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_PROC;
+  mib[2] = KERN_PROC_UID;
+  mib[3] = getuid();
+  mib[4] = sizeof(struct kinfo_proc);
+  mib[5] = 0;
d85 1
a85 1
+    if (sysctl(mib, 6, NULL, &len, NULL, 0) <0 ){
d96 1
a96 1
+      if (sysctl(mib, 6, &kinfo_procs_[0], &len, NULL, 0) <0) {
d124 2
d127 1
a127 5
+  for (; index_of_kinfo_proc_ < kinfo_procs_.size(); ++ index_of_kinfo_proc_) {
+    int mib[3];
+    size_t len;
+    struct kinfo_proc kinfo = kinfo_procs_[index_of_kinfo_proc_];
+
d131 6
a136 7
+    mib[0] = CTL_KERN;
+    mib[1] = KERN_PROC_ARGS;
+    mib[2] = kinfo.p_pid;
+
+    len = 0;
+    if (sysctl(mib, 3, NULL, &len, NULL, 0) < 0) {
+      LOG(ERROR) << "failed to figure out the buffer size for a command line";
d140 3
a142 4
+    data.resize(len);
+
+    if (sysctl(mib, 3, &data[0], &len, NULL, 0) < 0) {
+      LOG(ERROR) << "failed to fetch a commandline";
d146 4
d154 3
a165 1
+
a171 1
+
d174 1
a174 1
+
d182 1
a182 1
+		            ProcessIterator::IncludeEntry());
d202 6
a207 2
+  int mib[6];
+  size_t info_size = sizeof(info);
d209 1
a209 6
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_PROC;
+  mib[2] = KERN_PROC_PID;
+  mib[3] = process_;
+  mib[4] = info_size;
+  mib[5] = 400; /* XXX */
d211 2
a212 2
+  if (sysctl(mib, 6, &info, &info_size, NULL, 0) < 0)
+    return 0;
d224 6
a229 2
+  int mib[6];
+  size_t info_size = sizeof(info);
d231 1
a231 6
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_PROC;
+  mib[2] = KERN_PROC_PID;
+  mib[3] = process_;
+  mib[4] = info_size;
+  mib[5] = 400; /* XXX */
d233 2
a234 2
+  if (sysctl(mib, 6, &info, &info_size, NULL, 0) < 0)
+    return 0;
d278 3
a280 2
+  int mib[6];
+  size_t info_size = sizeof(info);
d282 4
a285 6
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_PROC;
+  mib[2] = KERN_PROC_PID;
+  mib[3] = pid;
+  mib[4] = info_size;
+  mib[5] = 400; /* XXX */
d287 1
a287 1
+  if (sysctl(mib, 6, &info, &info_size, NULL, 0) < 0)
d326 2
a327 1
+  int mib[2], pagesize;
d332 1
a332 4
+  mib[0] = CTL_VM;
+  mib[1] = VM_METER;
+
+  if (sysctl(mib, 2, &vmtotal, &len, NULL, 0) < 0)
a344 1
+  return;
d346 2
d349 2
@


1.4
log
@cvs missed this, tsk tsk
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.3 2011/03/16 10:52:46 robert Exp $
--- base/process_util_openbsd.cc.orig	Wed Jun  8 18:32:02 2011
+++ base/process_util_openbsd.cc	Wed Jun  8 18:36:39 2011
@


1.3
log
@Add some missing patches that were missed by the previous commit
and move back to KERN_PROC from KERN_PROC2 now that we can.
@
text
@d1 4
a4 4
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.2 2011/03/15 11:38:05 robert Exp $
--- base/process_util_openbsd.cc.orig	Wed Mar 16 09:03:13 2011
+++ base/process_util_openbsd.cc	Wed Mar 16 10:21:13 2011
@@@@ -0,0 +1,349 @@@@
a54 1
+  printf("%s\n", __PRETTY_FUNCTION__);
a63 2
+  printf("%s\n", __PRETTY_FUNCTION__);
+
a116 2
+  printf("%s\n", __PRETTY_FUNCTION__);
+
a209 1
+	printf("%s\n", __PRETTY_FUNCTION__);
a232 1
+	printf("%s\n", __PRETTY_FUNCTION__);
a324 2
+  printf("%s\n", __PRETTY_FUNCTION__);
+
a340 1
+  NOTIMPLEMENTED();
@


1.2
log
@update to 10.0.648.133
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_openbsd_cc,v 1.1 2011/03/02 08:53:51 robert Exp $
--- base/process_util_openbsd.cc.orig	Mon Mar 14 10:55:37 2011
+++ base/process_util_openbsd.cc	Mon Mar 14 14:17:32 2011
d37 1
a37 1
+  struct kinfo_proc2 info;
d42 1
a42 1
+  mib[1] = KERN_PROC2;
d60 1
a60 1
+  : index_of_kinfo_proc2_(),
d68 1
a68 1
+  mib[1] = KERN_PROC2;
d71 1
a71 1
+  mib[4] = sizeof(struct kinfo_proc2);
d85 1
a85 1
+      size_t num_of_kinfo_proc2 = len / sizeof(struct kinfo_proc2);
d88 3
a90 3
+      num_of_kinfo_proc2 += 16;
+      kinfo_procs_.resize(num_of_kinfo_proc2);
+      len = num_of_kinfo_proc2 * sizeof(struct kinfo_proc2);
d101 2
a102 2
+        size_t num_of_kinfo_proc2 = len / sizeof(struct kinfo_proc2);
+        kinfo_procs_.resize(num_of_kinfo_proc2);
d122 1
a122 1
+  for (; index_of_kinfo_proc2_ < kinfo_procs_.size(); ++ index_of_kinfo_proc2_) {
d125 1
a125 1
+    struct kinfo_proc2 kinfo = kinfo_procs_[index_of_kinfo_proc2_];
d169 1
a169 1
+    ++index_of_kinfo_proc2_;
d197 1
a197 1
+  struct kinfo_proc2 info;
d202 1
a202 1
+  mib[1] = KERN_PROC2;
d221 1
a221 1
+  struct kinfo_proc2 info;
d226 1
a226 1
+  mib[1] = KERN_PROC2;
d277 1
a277 1
+  struct kinfo_proc2 info;
d282 1
a282 1
+  mib[1] = KERN_PROC2;
@


1.1
log
@Use KERN_PROC2 everywhere instead of trying to use /proc and use
kvm(3) to help chrome identify it's own processes.
@
text
@d1 4
a4 4
$OpenBSD$
--- base/process_util_openbsd.cc.orig	Wed Feb 23 23:21:14 2011
+++ base/process_util_openbsd.cc	Wed Feb 23 23:22:19 2011
@@@@ -0,0 +1,351 @@@@
d32 1
a32 1
+#include "base/thread_restrictions.h"
d177 2
a178 4
+	printf("%s\n", __PRETTY_FUNCTION__);
+
+  return (WideToASCII(executable_name_) == entry().exe_file() &&
+          ProcessIterator::IncludeEntry());
@

