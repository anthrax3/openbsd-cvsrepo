head	1.3;
access;
symbols
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.10.29.06.51.34;	author robert;	state dead;
branches;
next	1.2;

1.2
date	2013.09.29.19.04.01;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2013.05.30.18.42.18;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 30.0.1599.101
@
text
@$OpenBSD: patch-chrome_browser_extensions_api_system_info_system_info_api_cc,v 1.2 2013/09/29 19:04:01 robert Exp $
--- chrome/browser/extensions/api/system_info/system_info_api.cc.orig.port	Wed Sep 18 10:13:32 2013
+++ chrome/browser/extensions/api/system_info/system_info_api.cc	Sun Sep 22 16:09:41 2013
@@@@ -109,11 +109,15 @@@@ SystemInfoEventRouter* SystemInfoEventRouter::GetInsta
 }
 
 SystemInfoEventRouter::SystemInfoEventRouter() {
+#if !defined(OS_BSD)
   StorageInfoProvider::Get()->AddObserver(this);
+#endif
 }
 
 SystemInfoEventRouter::~SystemInfoEventRouter() {
+#if !defined(OS_BSD)
   StorageInfoProvider::Get()->RemoveObserver(this);
+#endif
 }
 
 void SystemInfoEventRouter::StartWatchingStorages(
@@@@ -122,9 +126,11 @@@@ void SystemInfoEventRouter::StartWatchingStorages(
   if (!success)
     return;
 
+#if !defined(OS_BSD)
   for (StorageInfo::const_iterator it = info.begin(); it != info.end(); ++it) {
     StorageInfoProvider::Get()->StartWatching((*it)->id);
   }
+#endif
 }
 
 void SystemInfoEventRouter::StopWatchingStorages(
@@@@ -133,9 +139,11 @@@@ void SystemInfoEventRouter::StopWatchingStorages(
   if (!success)
     return;
 
+#if !defined(OS_BSD)
   for (StorageInfo::const_iterator it = info.begin(); it != info.end(); ++it) {
     StorageInfoProvider::Get()->StopWatching((*it)->id);
   }
+#endif
 }
 
 void SystemInfoEventRouter::AddEventListener(const std::string& event_name) {
@@@@ -145,6 +153,7 @@@@ void SystemInfoEventRouter::AddEventListener(const std
   if (watching_event_set_.count(event_name) > 1)
     return;
 
+#if !defined(OS_BSD)
   // Start watching the |event_name| event if the first event listener arrives.
   // For systemInfo.storage event.
   if (IsAvailableCapacityChangedEvent(event_name)) {
@@@@ -153,6 +162,7 @@@@ void SystemInfoEventRouter::AddEventListener(const std
                    base::Unretained(this)));
     return;
   }
+#endif
 
   // For systemInfo.display event.
   if (IsDisplayChangedEvent(event_name)) {
@@@@ -174,6 +184,7 @@@@ void SystemInfoEventRouter::RemoveEventListener(
   if (watching_event_set_.count(event_name) > 0)
     return;
 
+#if !defined(OS_BSD)
   // In case of the last event listener is removed, we need to stop watching
   // it to avoid unnecessary overhead.
   if (IsAvailableCapacityChangedEvent(event_name)) {
@@@@ -181,6 +192,7 @@@@ void SystemInfoEventRouter::RemoveEventListener(
         base::Bind(&SystemInfoEventRouter::StopWatchingStorages,
                    base::Unretained(this)));
   }
+#endif
 
   if (IsDisplayChangedEvent(event_name)) {
 #if defined(USE_ASH)
@


1.2
log
@update to 29.0.1547.76
@
text
@d1 1
a1 1
$OpenBSD: patch-chrome_browser_extensions_api_system_info_system_info_api_cc,v 1.1 2013/05/30 18:42:18 robert Exp $
@


1.1
log
@update to 27.0.1453.93
@
text
@d1 4
a4 4
$OpenBSD$
--- chrome/browser/extensions/api/system_info/system_info_api.cc.orig.port	Thu May 30 19:59:46 2013
+++ chrome/browser/extensions/api/system_info/system_info_api.cc	Thu May 30 20:01:00 2013
@@@@ -120,11 +120,15 @@@@ SystemInfoEventRouter* SystemInfoEventRouter::GetInsta
d20 1
a20 1
@@@@ -133,9 +137,11 @@@@ void SystemInfoEventRouter::StartWatchingStorages(
d32 1
a32 1
@@@@ -144,9 +150,11 @@@@ void SystemInfoEventRouter::StopWatchingStorages(
d44 1
a44 1
@@@@ -156,6 +164,7 @@@@ void SystemInfoEventRouter::AddEventListener(const std
d52 1
a52 1
@@@@ -164,6 +173,7 @@@@ void SystemInfoEventRouter::AddEventListener(const std
d58 3
a60 3
   // For systemInfo.cpu event.
   if (IsCpuUpdatedEvent(event_name)) {
@@@@ -189,6 +199,7 @@@@ void SystemInfoEventRouter::RemoveEventListener(
d68 1
a68 1
@@@@ -196,6 +207,7 @@@@ void SystemInfoEventRouter::RemoveEventListener(
d74 2
a75 2
   if (IsCpuUpdatedEvent(event_name)) {
     CpuInfoProvider::Get()->StopSampling();
@

