head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2011.10.27.07.59.09;	author robert;	state dead;
branches;
next	1.2;

1.2
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.16.08.17.44;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@$OpenBSD: patch-third_party_leveldb_util_env_chromium_cc,v 1.2 2011/09/19 08:55:26 robert Exp $
--- third_party/leveldb/util/env_chromium.cc.orig	Fri Sep 16 19:01:54 2011
+++ third_party/leveldb/util/env_chromium.cc	Fri Sep 16 19:25:22 2011
@@@@ -29,7 +29,7 @@@@
 #include "base/win/win_util.h"
 #endif
 
-#if defined(OS_MACOSX) || defined(OS_WIN)
+#if defined(OS_MACOSX) || defined(OS_WIN) || defined(OS_OPENBSD)
 // The following are glibc-specific
 namespace {
 
@@@@ -325,7 +325,7 @@@@ class ChromiumEnv : public Env {
 
   virtual Status GetFileSize(const std::string& fname, uint64_t* size) {
     Status s;
-    int64_t signed_size;
+    int64 signed_size;
     if (!::file_util::GetFileSize(CreateFilePath(fname), &signed_size)) {
       *size = 0;
       s = Status::IOError(fname, "Could not determine file size.");
@


1.2
log
@update to 14.0.835.163
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@update to the next stable release (13.0.782.112)
@
text
@d2 2
a3 2
--- third_party/leveldb/util/env_chromium.cc.orig	Wed Aug  3 12:30:52 2011
+++ third_party/leveldb/util/env_chromium.cc	Wed Aug  3 12:35:44 2011
a21 13
@@@@ -417,10 +417,9 @@@@ class ChromiumEnv : public Env {
     thread_id = mach_thread_self();
 #elif defined(OS_LINUX)
     thread_id = syscall(__NR_gettid);
-#elif defined(OS_FREEBSD) || defined(OS_NACL)
+#elif defined(OS_FREEBSD) || defined(OS_NACL) || defined(OS_OPENBSD)
     // TODO(BSD): find a better thread ID
-    pthread_t tid = pthread_self();
-    memcpy(&thread_id, &tid, min(sizeof(r), sizeof(tid)));
+    thread_id = reinterpret_cast<int64_t>(pthread_self());
 #endif
 
     // We try twice: the first time with a fixed-size stack allocated buffer,
@

