head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2011.06.08.20.36.56;	author robert;	state dead;
branches;
next	1.2;

1.2
date	2011.04.29.13.18.02;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.23.12.33.26;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@$OpenBSD: patch-v8_src_x64_macro-assembler-x64_cc,v 1.2 2011/04/29 13:18:02 robert Exp $
--- v8/src/x64/macro-assembler-x64.cc.orig	Tue Apr 26 10:22:52 2011
+++ v8/src/x64/macro-assembler-x64.cc	Thu Apr 28 11:17:49 2011
@@@@ -111,7 +111,7 @@@@ void MacroAssembler::RecordWrite(Register object,
   ASSERT(!object.is(rsi) && !value.is(rsi) && !index.is(rsi));
 
   // First, check if a write barrier is even needed. The tests below
-  // catch stores of Smis and stores into young gen.
+  // catch stores of smis and stores into young gen.
   Label done;
   JumpIfSmi(value, &done);
 
@@@@ -140,7 +140,7 @@@@ void MacroAssembler::RecordWrite(Register object,
   ASSERT(!object.is(rsi) && !value.is(rsi) && !address.is(rsi));
 
   // First, check if a write barrier is even needed. The tests below
-  // catch stores of Smis and stores into young gen.
+  // catch stores of smis and stores into young gen.
   Label done;
   JumpIfSmi(value, &done);
 
@@@@ -824,12 +824,26 @@@@ void MacroAssembler::SmiTest(Register src) {
 }
 
 
-void MacroAssembler::SmiCompare(Register dst, Register src) {
-  cmpq(dst, src);
+void MacroAssembler::SmiCompare(Register smi1, Register smi2) {
+  if (FLAG_debug_code) {
+    AbortIfNotSmi(smi1);
+    AbortIfNotSmi(smi2);
+  }
+  cmpq(smi1, smi2);
 }
 
 
 void MacroAssembler::SmiCompare(Register dst, Smi* src) {
+  if (FLAG_debug_code) {
+    AbortIfNotSmi(dst);
+  }
+  // Actually, knowing the register is a smi doesn't enable any optimizations
+  // with the current tagging scheme.
+  Cmp(dst, src);
+}
+
+
+void MacroAssembler::Cmp(Register dst, Smi* src) {
   ASSERT(!dst.is(kScratchRegister));
   if (src->value() == 0) {
     testq(dst, dst);
@@@@ -841,20 +855,41 @@@@ void MacroAssembler::SmiCompare(Register dst, Smi* src
 
 
 void MacroAssembler::SmiCompare(Register dst, const Operand& src) {
+  if (FLAG_debug_code) {
+    AbortIfNotSmi(dst);
+    AbortIfNotSmi(src);
+  }
   cmpq(dst, src);
 }
 
 
 void MacroAssembler::SmiCompare(const Operand& dst, Register src) {
+  if (FLAG_debug_code) {
+    AbortIfNotSmi(dst);
+    AbortIfNotSmi(src);
+  }
   cmpq(dst, src);
 }
 
 
 void MacroAssembler::SmiCompare(const Operand& dst, Smi* src) {
+  if (FLAG_debug_code) {
+    AbortIfNotSmi(dst);
+  }
   cmpl(Operand(dst, kSmiShift / kBitsPerByte), Immediate(src->value()));
 }
 
 
+void MacroAssembler::Cmp(const Operand& dst, Smi* src) {
+  // The Operand cannot use the smi register, since we may use the scratch
+  // register to get around the lack of 64 bit immediates in the instruction
+  // set.
+  Register smi_reg = GetSmiConstant(src);
+  ASSERT(!dst.AddressUsesRegister(smi_reg));
+  cmpq(dst, smi_reg);
+}
+
+
 void MacroAssembler::SmiCompareInteger32(const Operand& dst, Register src) {
   cmpl(Operand(dst, kSmiShift / kBitsPerByte), src);
 }
@@@@ -1339,7 +1374,7 @@@@ void MacroAssembler::Move(const Operand& dst, Handle<O
 
 void MacroAssembler::Cmp(Register dst, Handle<Object> source) {
   if (source->IsSmi()) {
-    SmiCompare(dst, Smi::cast(*source));
+    Cmp(dst, Smi::cast(*source));
   } else {
     Move(kScratchRegister, source);
     cmpq(dst, kScratchRegister);
@@@@ -1349,7 +1384,7 @@@@ void MacroAssembler::Cmp(Register dst, Handle<Object> 
 
 void MacroAssembler::Cmp(const Operand& dst, Handle<Object> source) {
   if (source->IsSmi()) {
-    SmiCompare(dst, Smi::cast(*source));
+    Cmp(dst, Smi::cast(*source));
   } else {
     ASSERT(source->IsHeapObject());
     movq(kScratchRegister, source, RelocInfo::EMBEDDED_OBJECT);
@@@@ -1719,7 +1754,12 @@@@ void MacroAssembler::AbortIfSmi(Register object) {
 
 
 void MacroAssembler::AbortIfNotSmi(Register object) {
-  NearLabel ok;
+  Condition is_smi = CheckSmi(object);
+  Assert(is_smi, "Operand is not a smi");
+}
+
+
+void MacroAssembler::AbortIfNotSmi(const Operand& object) {
   Condition is_smi = CheckSmi(object);
   Assert(is_smi, "Operand is not a smi");
 }
@


1.2
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@d1 1
a1 1
$OpenBSD: patch-v8_src_x64_macro-assembler-x64_cc,v 1.1 2011/03/23 12:33:26 robert Exp $
@


1.1
log
@merge patches from http://codereview.chromium.org/6682026
@
text
@d1 4
a4 4
$OpenBSD$
--- v8/src/x64/macro-assembler-x64.cc.orig	Thu Mar 17 09:44:50 2011
+++ v8/src/x64/macro-assembler-x64.cc	Wed Mar 23 08:28:07 2011
@@@@ -109,7 +109,7 @@@@ void MacroAssembler::RecordWrite(Register object,
d13 1
a13 1
@@@@ -138,7 +138,7 @@@@ void MacroAssembler::RecordWrite(Register object,
d22 1
a22 1
@@@@ -820,12 +820,26 @@@@ void MacroAssembler::SmiTest(Register src) {
d51 1
a51 1
@@@@ -837,20 +851,41 @@@@ void MacroAssembler::SmiCompare(Register dst, Smi* src
d93 1
a93 1
@@@@ -1335,7 +1370,7 @@@@ void MacroAssembler::Move(const Operand& dst, Handle<O
d102 1
a102 1
@@@@ -1345,7 +1380,7 @@@@ void MacroAssembler::Cmp(Register dst, Handle<Object> 
d111 1
a111 1
@@@@ -1692,7 +1727,12 @@@@ void MacroAssembler::AbortIfSmi(Register object) {
@

