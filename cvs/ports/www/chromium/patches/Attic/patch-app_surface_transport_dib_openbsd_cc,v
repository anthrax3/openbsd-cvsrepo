head	1.5;
access;
symbols
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.06.08.20.36.56;	author robert;	state dead;
branches;
next	1.4;

1.4
date	2011.05.18.17.02.56;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.21.11.27.46;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@$OpenBSD: patch-app_surface_transport_dib_openbsd_cc,v 1.4 2011/05/18 17:02:56 robert Exp $
--- app/surface/transport_dib_openbsd.cc.orig	Mon May 16 16:10:03 2011
+++ app/surface/transport_dib_openbsd.cc	Wed May 18 18:13:53 2011
@@@@ -0,0 +1,102 @@@@
+// Copyright (c) 2009 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "app/surface/transport_dib.h"
+
+#include <unistd.h>
+#include <sys/stat.h>
+
+#include "base/eintr_wrapper.h"
+#include "base/logging.h"
+#include "base/scoped_ptr.h"
+#include "base/shared_memory.h"
+#include "skia/ext/platform_canvas.h"
+
+TransportDIB::TransportDIB()
+    : size_(0) {
+}
+
+TransportDIB::TransportDIB(TransportDIB::Handle dib)
+    : shared_memory_(dib, false /* read write */),
+      size_(0) {
+}
+
+TransportDIB::~TransportDIB() {
+}
+
+// static
+TransportDIB* TransportDIB::Create(size_t size, uint32 sequence_num) {
+  TransportDIB* dib = new TransportDIB;
+  if (!dib->shared_memory_.CreateAndMapAnonymous(size)) {
+    delete dib;
+    return NULL;
+  }
+
+  dib->size_ = size;
+  return dib;
+}
+
+// static
+TransportDIB* TransportDIB::Map(Handle handle) {
+  scoped_ptr<TransportDIB> dib(CreateWithHandle(handle));
+  if (!dib->Map())
+    return NULL;
+  return dib.release();
+}
+
+// static
+TransportDIB* TransportDIB::CreateWithHandle(Handle handle) {
+  return new TransportDIB(handle);
+}
+
+// static
+bool TransportDIB::is_valid(Handle dib) {
+  return dib.fd >= 0;
+}
+
+skia::PlatformCanvas* TransportDIB::GetPlatformCanvas(int w, int h) {
+  if (!memory() && !Map())
+    return NULL;
+  scoped_ptr<skia::PlatformCanvas> canvas(new skia::PlatformCanvas);
+  if (!canvas->initialize(w, h, true, reinterpret_cast<uint8_t*>(memory())))
+    return NULL;
+  return canvas.release();
+}
+
+bool TransportDIB::Map() {
+  if (!is_valid(handle()))
+    return false;
+  if (memory())
+    return true;
+
+  struct stat st;
+  if ((fstat(shared_memory_.handle().fd, &st) != 0) ||
+      (!shared_memory_.Map(st.st_size))) {
+    return false;
+  }
+
+  size_ = st.st_size;
+  return true;
+}
+
+void* TransportDIB::memory() const {
+  return shared_memory_.memory();
+}
+
+TransportDIB::Id TransportDIB::id() const {
+  return shared_memory_.id();
+}
+
+TransportDIB::Handle TransportDIB::handle() const {
+  return shared_memory_.handle();
+}
+
+XID TransportDIB::MapToX(Display* display) {
+  if (!x_shm_) {
+    x_shm_ = ui::AttachSharedMemory(display, key_);
+    display_ = display;
+  }
+
+  return x_shm_;
+}
@


1.4
log
@sync transport dib code
@
text
@d1 1
a1 1
$OpenBSD: patch-app_surface_transport_dib_openbsd_cc,v 1.3 2011/03/21 11:27:46 robert Exp $
@


1.3
log
@sync with the freebsd transport dib code
@
text
@d1 4
a4 4
$OpenBSD: patch-app_surface_transport_dib_openbsd_cc,v 1.2 2011/03/15 11:38:05 robert Exp $
--- app/surface/transport_dib_openbsd.cc.orig	Fri Mar 18 09:12:57 2011
+++ app/surface/transport_dib_openbsd.cc	Mon Mar 21 09:25:51 2011
@@@@ -0,0 +1,96 @@@@
d15 2
a17 1
+#include "base/scoped_ptr.h"
d57 14
a84 9
+}
+
+bool TransportDIB::is_valid(Handle dib) {
+  return dib.fd >= 0;
+}
+
+skia::PlatformCanvas* TransportDIB::GetPlatformCanvas(int w, int h) {
+  return new skia::PlatformCanvas(w, h, true,
+                                  reinterpret_cast<uint8_t*>(memory()));
@


1.2
log
@update to 10.0.648.133
@
text
@d1 4
a4 4
$OpenBSD: patch-app_surface_transport_dib_openbsd_cc,v 1.1 2011/02/08 09:43:02 espie Exp $
--- app/surface/transport_dib_openbsd.cc.orig	Mon Mar 14 10:55:37 2011
+++ app/surface/transport_dib_openbsd.cc	Mon Mar 14 12:00:24 2011
@@@@ -0,0 +1,106 @@@@
d16 1
d44 3
a46 2
+TransportDIB* TransportDIB::Map(TransportDIB::Handle handle) {
+  if (!is_valid(handle))
d48 1
a48 13
+
+  TransportDIB* dib = new TransportDIB(handle);
+  struct stat st;
+  if ((fstat(handle.fd, &st) != 0) ||
+      (!dib->shared_memory_.Map(st.st_size))) {
+    delete dib;
+    HANDLE_EINTR(close(handle.fd));
+    return NULL;
+  }
+
+  dib->size_ = st.st_size;
+
+  return dib;
a55 4
+bool TransportDIB::is_valid(Handle dib) {
+  return dib.fd >= 0;
+}
+
d70 4
@


1.1
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 3
a3 3
$OpenBSD$
--- app/surface/transport_dib_openbsd.cc.orig	Sun Jan 23 23:27:31 2011
+++ app/surface/transport_dib_openbsd.cc	Sun Jan 23 23:27:31 2011
d105 1
a105 1
+    x_shm_ = x11_util::AttachSharedMemory(display, key_);
@

