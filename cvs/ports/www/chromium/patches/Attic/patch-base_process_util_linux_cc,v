head	1.4;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2011.04.29.13.18.01;	author robert;	state dead;
branches;
next	1.3;

1.3
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.13.09.51.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@$OpenBSD: patch-base_process_util_linux_cc,v 1.3 2011/03/15 11:38:05 robert Exp $
--- base/process_util_linux.cc.orig	Fri Mar 11 10:01:33 2011
+++ base/process_util_linux.cc	Mon Mar 14 10:55:37 2011
@@@@ -449,6 +449,7 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
 
 // Exposed for testing.
 int ParseProcStatCPU(const std::string& input) {
+#if !defined(OS_OPENBSD)
   // /proc/<pid>/stat contains the process name in parens.  In case the
   // process name itself contains parens, skip past them.
   std::string::size_type rparen = input.rfind(')');
@@@@ -467,11 +468,16 @@@@ int ParseProcStatCPU(const std::string& input) {
   base::StringToInt(fields[11], &fields11);
   base::StringToInt(fields[12], &fields12);
   return fields11 + fields12;
+#else
+  NOTIMPLEMENTED();
+  return -1;
+#endif
 }
 
 // Get the total CPU of a single process.  Return value is number of jiffies
 // on success or -1 on error.
 static int GetProcessCPU(pid_t pid) {
+#if defined(OS_LINUX)
   // Synchronously reading files in /proc is safe.
   base::ThreadRestrictions::ScopedAllowIO allow_io;
 
@@@@ -500,6 +506,10 @@@@ static int GetProcessCPU(pid_t pid) {
   closedir(dir);
 
   return total_cpu;
+#else
+  NOTIMPLEMENTED();
+  return -1;
+#endif
 }
 
 double ProcessMetrics::GetCPUUsage() {
@@@@ -610,7 +620,7 @@@@ void OnNoMemory() {
 }  // namespace
 
 extern "C" {
-#if !defined(USE_TCMALLOC)
+#if !defined(USE_TCMALLOC) && !defined(OS_OPENBSD)
 
 extern "C" {
 void* __libc_malloc(size_t size);
@


1.3
log
@update to 10.0.648.133
@
text
@d1 1
a1 1
$OpenBSD: patch-base_process_util_linux_cc,v 1.2 2011/02/08 09:43:02 espie Exp $
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 4
a4 4
$OpenBSD$
--- base/process_util_linux.cc.orig	Tue Jan 25 12:41:05 2011
+++ base/process_util_linux.cc	Thu Feb  3 23:11:12 2011
@@@@ -440,6 +440,7 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
d12 1
a12 1
@@@@ -458,11 +459,16 @@@@ int ParseProcStatCPU(const std::string& input) {
d29 1
a29 1
@@@@ -491,6 +497,10 @@@@ static int GetProcessCPU(pid_t pid) {
d40 1
a40 1
@@@@ -601,7 +611,7 @@@@ void OnNoMemory() {
@


1.1
log
@cut the "monster patches" into small pieces. pval can fix it to his liking
if he comes back.
In the mean time, fix build of chromium by adding the required
-I/usr/local/includes to gyp glue where needed.
@
text
@d2 29
a30 5
--- base/process_util_linux.cc.orig	Tue Mar 30 07:28:45 2010
+++ base/process_util_linux.cc	Sun Nov 28 00:11:30 2010
@@@@ -515,6 +515,7 @@@@ void OnNoMemory() {
 extern "C" {
 #if !defined(USE_TCMALLOC)
d32 1
a32 8
+#if 0
 extern "C" {
 void* __libc_malloc(size_t size);
 void* __libc_realloc(void* ptr, size_t size);
@@@@ -523,6 +524,16 @@@@ void* __libc_valloc(size_t size);
 void* __libc_pvalloc(size_t size);
 void* __libc_memalign(size_t alignment, size_t size);
 }  // extern "C"
d34 2
a35 8
+extern "C" {
+void* malloc(size_t size);
+void* realloc(void* ptr, size_t size);
+void* calloc(size_t nmemb, size_t size);
+void* valloc(size_t size);
+void* pvalloc(size_t size);
+void* memalign(size_t alignment, size_t size);
+}  // extern "C"
d37 1
d39 3
a41 31
 // Overriding the system memory allocation functions:
 //
@@@@ -554,7 +565,7 @@@@ void* __libc_memalign(size_t alignment, size_t size);
   void* function_name(size_t) __attribute__ ((visibility("default"))); \
   \
   void* function_name(size_t size) { \
-    void* ret = __libc_##function_name(size); \
+    void* ret = ##function_name(size); \
     if (ret == NULL && size != 0) \
       OnNoMemorySize(size); \
     return ret; \
@@@@ -565,12 +576,13 @@@@ void* __libc_memalign(size_t alignment, size_t size);
       __attribute__ ((visibility("default"))); \
   \
   void* function_name(arg1_type arg1, size_t size) { \
-    void* ret = __libc_##function_name(arg1, size); \
+    void* ret = ##function_name(arg1, size); \
     if (ret == NULL && size != 0) \
       OnNoMemorySize(size); \
     return ret; \
   }
 
+#if 0
 DIE_ON_OOM_1(malloc)
 DIE_ON_OOM_1(valloc)
 DIE_ON_OOM_1(pvalloc)
@@@@ -578,6 +590,7 @@@@ DIE_ON_OOM_1(pvalloc)
 DIE_ON_OOM_2(calloc, size_t)
 DIE_ON_OOM_2(realloc, void*)
 DIE_ON_OOM_2(memalign, size_t)
+#endif
d43 3
a45 10
 // posix_memalign has a unique signature and doesn't have a __libc_ variant.
 int posix_memalign(void** ptr, size_t alignment, size_t size)
@@@@ -585,7 +598,7 @@@@ int posix_memalign(void** ptr, size_t alignment, size_
 
 int posix_memalign(void** ptr, size_t alignment, size_t size) {
   // This will use the safe version of memalign, above.
-  *ptr = memalign(alignment, size);
+//  *ptr = memalign(alignment, size);
   return 0;
 }
d47 2
@

