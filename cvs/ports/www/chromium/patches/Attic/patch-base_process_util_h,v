head	1.11;
access;
symbols
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2012.02.17.10.19.50;	author robert;	state dead;
branches;
next	1.10;

1.10
date	2011.12.14.16.58.19;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2011.10.27.07.59.08;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.16.08.17.44;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.08.20.36.56;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.29.13.18.01;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.16.10.52.46;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.02.08.53.51;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@update to 17.0.963.56
@
text
@$OpenBSD: patch-base_process_util_h,v 1.10 2011/12/14 16:58:19 robert Exp $
--- base/process_util.h.orig	Tue Dec 13 21:28:16 2011
+++ base/process_util.h	Tue Dec 13 21:28:57 2011
@@@@ -166,7 +166,7 @@@@ BASE_EXPORT void CloseProcessHandle(ProcessHandle proc
 // Win XP SP1 as well.
 BASE_EXPORT ProcessId GetProcId(ProcessHandle process);
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_OPENBSD)
 // Returns the path to the executable of the given process.
 BASE_EXPORT FilePath GetProcessExecutablePath(ProcessHandle process);
 
@


1.10
log
@update to 16.0.912.63
@
text
@d1 1
a1 1
$OpenBSD$
@


1.9
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@d1 4
a4 22
$OpenBSD: patch-base_process_util_h,v 1.8 2011/09/19 08:55:26 robert Exp $
--- base/process_util.h.orig	Fri Oct 21 10:30:02 2011
+++ base/process_util.h	Wed Oct 26 16:56:36 2011
@@@@ -14,14 +14,16 @@@@
 #if defined(OS_WIN)
 #include <windows.h>
 #include <tlhelp32.h>
-#elif defined(OS_MACOSX)
+#elif defined(OS_MACOSX) || defined(OS_OPENBSD)
 // kinfo_proc is defined in <sys/sysctl.h>, but this forward declaration
 // is sufficient for the vector<kinfo_proc> below.
 struct kinfo_proc;
 // malloc_zone_t is defined in <malloc/malloc.h>, but this forward declaration
 // is sufficient for GetPurgeableZone() below.
 typedef struct _malloc_zone_t malloc_zone_t;
+#if !defined(OS_OPENBSD)
 #include <mach/mach.h>
+#endif
 #elif defined(OS_POSIX)
 #include <dirent.h>
 #include <limits.h>
@@@@ -164,10 +166,12 @@@@ BASE_EXPORT void CloseProcessHandle(ProcessHandle proc
d8 2
a9 2
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
a11 1
+#endif
a12 13
+#if defined(OS_LINUX)
 // Parse the data found in /proc/<pid>/stat and return the sum of the
 // CPU-related ticks.  Returns -1 on parse error.
 // Exposed for testing.
@@@@ -523,7 +527,7 @@@@ class BASE_EXPORT ProcessIterator {
 #if defined(OS_WIN)
   HANDLE snapshot_;
   bool started_iteration_;
-#elif defined(OS_MACOSX)
+#elif defined(OS_MACOSX) || defined(OS_OPENBSD)
   std::vector<kinfo_proc> kinfo_procs_;
   size_t index_of_kinfo_proc_;
 #elif defined(OS_POSIX)
@


1.8
log
@update to 14.0.835.163
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_h,v 1.7 2011/08/16 08:17:44 robert Exp $
--- base/process_util.h.orig	Wed Sep 14 10:01:29 2011
+++ base/process_util.h	Fri Sep 16 18:17:22 2011
d22 15
a36 1
@@@@ -467,7 +469,7 @@@@ class BASE_API ProcessIterator {
@


1.7
log
@update to the next stable release (13.0.782.112)
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_h,v 1.6 2011/06/08 20:36:56 robert Exp $
--- base/process_util.h.orig	Wed Jul 27 10:01:28 2011
+++ base/process_util.h	Tue Aug  2 20:12:17 2011
d22 1
a22 1
@@@@ -447,7 +449,7 @@@@ class BASE_API ProcessIterator {
@


1.6
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_h,v 1.5 2011/04/29 13:18:01 robert Exp $
--- base/process_util.h.orig	Mon Jun  6 11:11:47 2011
+++ base/process_util.h	Wed Jun  8 09:58:35 2011
d22 1
a22 1
@@@@ -445,7 +447,7 @@@@ class BASE_API ProcessIterator {
@


1.5
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@d1 3
a3 3
$OpenBSD$
--- base/process_util.h.orig	Thu Apr 28 11:18:26 2011
+++ base/process_util.h	Thu Apr 28 11:19:26 2011
d22 1
a22 1
@@@@ -439,7 +441,7 @@@@ class ProcessIterator {
@


1.4
log
@Add some missing patches that were missed by the previous commit
and move back to KERN_PROC from KERN_PROC2 now that we can.
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_h,v 1.3 2011/03/15 11:38:05 robert Exp $
--- base/process_util.h.orig	Fri Mar 11 10:01:33 2011
+++ base/process_util.h	Wed Mar 16 09:41:54 2011
d22 1
a22 20
@@@@ -161,7 +163,7 @@@@ void CloseProcessHandle(ProcessHandle process);
 // Win XP SP1 as well.
 ProcessId GetProcId(ProcessHandle process);
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_OPENBSD)
 // Returns the ID for the parent of the given process.
 ProcessId GetParentProcessId(ProcessHandle process);
 
@@@@ -172,7 +174,8 @@@@ FilePath GetProcessExecutablePath(ProcessHandle proces
 // CPU-related ticks.  Returns -1 on parse error.
 // Exposed for testing.
 int ParseProcStatCPU(const std::string& input);
-
+#endif
+#if defined(OS_LINUX)
 static const char kAdjustOOMScoreSwitch[] = "--adjust-oom-score";
 
 // This adjusts /proc/process/oom_adj so the Linux OOM killer will prefer
@@@@ -439,7 +442,7 @@@@ class ProcessIterator {
@


1.3
log
@update to 10.0.648.133
@
text
@d1 1
a1 1
$OpenBSD: patch-base_process_util_h,v 1.2 2011/03/02 08:53:51 robert Exp $
d3 18
a20 2
+++ base/process_util.h	Mon Mar 14 10:55:37 2011
@@@@ -27,6 +27,9 @@@@ typedef struct _malloc_zone_t malloc_zone_t;
d22 1
a22 9
 #include <sys/types.h>
 #endif
+#if defined(OS_OPENBSD)
+struct kinfo_proc2;
+#endif
 
 #include <list>
 #include <string>
@@@@ -161,7 +164,7 @@@@ void CloseProcessHandle(ProcessHandle process);
d31 1
a31 1
@@@@ -172,7 +175,8 @@@@ FilePath GetProcessExecutablePath(ProcessHandle proces
d41 6
a46 2
@@@@ -442,6 +446,9 @@@@ class ProcessIterator {
 #elif defined(OS_MACOSX)
a48 3
+#elif  defined(OS_OPENBSD)
+  std::vector<kinfo_proc2> kinfo_procs_;
+  size_t index_of_kinfo_proc2_;
a49 2
   DIR *procfs_dir_;
 #endif
@


1.2
log
@Use KERN_PROC2 everywhere instead of trying to use /proc and use
kvm(3) to help chrome identify it's own processes.
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_util_h,v 1.1 2011/02/08 09:43:02 espie Exp $
--- base/process_util.h.orig	Mon Feb  7 10:43:32 2011
+++ base/process_util.h	Sun Feb 13 11:00:04 2011
d14 1
a14 1
@@@@ -159,7 +162,7 @@@@ void CloseProcessHandle(ProcessHandle process);
d23 1
a23 1
@@@@ -170,7 +173,8 @@@@ FilePath GetProcessExecutablePath(ProcessHandle proces
d33 1
a33 1
@@@@ -435,6 +439,9 @@@@ class ProcessIterator {
@


1.1
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 14
a14 4
$OpenBSD$
--- base/process_util.h.orig	Fri Jan 21 10:20:15 2011
+++ base/process_util.h	Sun Jan 23 23:27:31 2011
@@@@ -159,7 +159,7 @@@@ void CloseProcessHandle(ProcessHandle process);
d23 20
@

