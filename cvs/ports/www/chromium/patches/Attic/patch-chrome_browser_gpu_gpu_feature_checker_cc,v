head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.04.28.14.21.00;	author robert;	state dead;
branches;
next	1.2;
commitid	XFDnyB7tGNawHUbl;

1.2
date	2016.03.06.10.51.14;	author robert;	state Exp;
branches;
next	1.1;
commitid	Upms3IeOsaLsGxbP;

1.1
date	2013.10.29.06.51.34;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 58.0.3029.81
@
text
@$OpenBSD: patch-chrome_browser_gpu_gpu_feature_checker_cc,v 1.2 2016/03/06 10:51:14 robert Exp $
--- chrome/browser/gpu/gpu_feature_checker.cc.orig.port	Wed Feb 24 00:01:58 2016
+++ chrome/browser/gpu/gpu_feature_checker.cc	Thu Mar  3 09:43:25 2016
@@@@ -34,7 +34,7 @@@@ void GPUFeatureChecker::CheckGPUFeatureAvailability() 
   CHECK(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
 
   bool finalized = true;
-#if defined(OS_LINUX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
   // On Windows and Mac, so far we can always make the final WebGL blacklisting
   // decision based on partial GPU info; on Linux, we need to launch the GPU
   // process to collect full GPU info and make the final decision.
@


1.2
log
@update to 49.0.2623.75
@
text
@d1 1
a1 1
$OpenBSD: patch-chrome_browser_gpu_gpu_feature_checker_cc,v 1.1 2013/10/29 06:51:34 robert Exp $
@


1.1
log
@update to 30.0.1599.101
@
text
@d1 4
a4 4
$OpenBSD$
--- chrome/browser/gpu/gpu_feature_checker.cc.orig.port	Sun Oct 20 17:02:12 2013
+++ chrome/browser/gpu/gpu_feature_checker.cc	Sun Oct 20 17:02:21 2013
@@@@ -33,7 +33,7 @@@@ void GPUFeatureChecker::CheckGPUFeatureAvailability() 
@

