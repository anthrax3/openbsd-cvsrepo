head	1.4;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2011.04.29.13.18.01;	author robert;	state dead;
branches;
next	1.3;

1.3
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.13.09.51.45;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to the latest stable version which is now 11.0.696.60
+ switch from using system sqlite to the bundled one because they have
  many modifications that are needed
+ add a new mirror for the distfile because the google one is utterly slow
@
text
@$OpenBSD: patch-chrome_browser_zygote_main_linux_cc,v 1.3 2011/03/15 11:38:05 robert Exp $
--- chrome/browser/zygote_main_linux.cc.orig	Mon Mar 14 11:41:37 2011
+++ chrome/browser/zygote_main_linux.cc	Mon Mar 14 11:43:12 2011
@@@@ -2,12 +2,18 @@@@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "build/build_config.h"
+
 #include <dlfcn.h>
 #include <fcntl.h>
 #include <pthread.h>
+#if defined(OS_OPENBSD)
+#include <signal.h>
+#else
 #include <sys/epoll.h>
 #include <sys/prctl.h>
 #include <sys/signal.h>
+#endif
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <sys/types.h>
@@@@ -50,7 +56,7 @@@@
 #include "unicode/timezone.h"
 
 #if defined(ARCH_CPU_X86_FAMILY) && !defined(CHROMIUM_SELINUX) && \
-    !defined(__clang__)
+    !defined(__clang__) && !defined(OS_OPENBSD)
 // The seccomp sandbox is enabled on all ia32 and x86-64 processor as long as
 // we aren't using SELinux or clang.
 #define SECCOMP_SANDBOX
@@@@ -173,6 +179,11 @@@@ class Zygote {
         case ZygoteHost::kCmdGetSandboxStatus:
           HandleGetSandboxStatus(fd, pickle, iter);
           return false;
+#if defined(OS_OPENBSD)
+        case ZygoteHost::kCmdEnd:
+          _exit(0);
+          return false;
+#endif
         default:
           NOTREACHED();
           break;
@@@@ -655,7 +666,7 @@@@ static bool EnterSandbox() {
 
     SkiaFontConfigSetImplementation(
         new FontConfigIPC(kMagicSandboxIPCDescriptor));
-
+#if !defined(OS_OPENBSD)
     // Previously, we required that the binary be non-readable. This causes the
     // kernel to mark the process as non-dumpable at startup. The thinking was
     // that, although we were putting the renderers into a PID namespace (with
@@@@ -681,6 +692,7 @@@@ static bool EnterSandbox() {
         return false;
       }
     }
+#endif
   } else if (switches::SeccompSandboxEnabled()) {
     PreSandboxInit();
     SkiaFontConfigSetImplementation(
@


1.3
log
@update to 10.0.648.133
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d2 2
a3 2
--- chrome/browser/zygote_main_linux.cc.orig	Fri Jan 21 10:20:26 2011
+++ chrome/browser/zygote_main_linux.cc	Sun Jan 23 23:27:33 2011
d23 1
a23 1
@@@@ -52,9 +58,9 @@@@
d30 1
a30 2
-// we aren't using SELinux or clang.
+// we aren't using SELinux or clang. OpenBSD is not yet supported.
d32 1
a32 3
 #endif
 
@@@@ -175,6 +181,11 @@@@ class Zygote {
d44 1
a44 2
@@@@ -644,7 +655,7 @@@@ static bool EnterSandbox() {
     }
d46 2
a47 1
     SkiaFontConfigUseIPCImplementation(kMagicSandboxIPCDescriptor);
d53 1
a53 1
@@@@ -670,6 +681,7 @@@@ static bool EnterSandbox() {
d57 1
a57 1
+#endif // !OS_OPENBSD
d60 1
a60 1
     SkiaFontConfigUseIPCImplementation(kMagicSandboxIPCDescriptor);
@


1.1
log
@cut the "monster patches" into small pieces. pval can fix it to his liking
if he comes back.
In the mean time, fix build of chromium by adding the required
-I/usr/local/includes to gyp glue where needed.
@
text
@d2 3
a4 3
--- chrome/browser/zygote_main_linux.cc.orig	Tue Mar 30 07:29:49 2010
+++ chrome/browser/zygote_main_linux.cc	Sun Nov 28 00:11:31 2010
@@@@ -2,11 +2,17 @@@@
d12 1
d23 1
a23 2
@@@@ -47,7 +53,7 @@@@
 
d26 3
a28 2
-#if defined(ARCH_CPU_X86_FAMILY) && !defined(CHROMIUM_SELINUX)
+#if defined(ARCH_CPU_X86_FAMILY) && defined(OS_LINUX) && !defined(CHROMIUM_SELINUX)
d30 2
a31 1
 // we aren't using SELinux.
d33 6
a38 4
@@@@ -207,7 +213,11 @@@@ class Zygote {
     int argc, numfds;
     base::GlobalDescriptors::Mapping mapping;
     base::ProcessId child;
d40 3
a42 3
+    uint32_t dummy_inode = 0;
+#elif
     uint64_t dummy_inode = 0;
d44 5
a48 18
     int dummy_fd = -1;
 
     if (!pickle.ReadInt(&iter, &argc))
@@@@ -250,10 +260,13 @@@@ class Zygote {
 #if defined(SECCOMP_SANDBOX)
       // Try to open /proc/self/maps as the seccomp sandbox needs access to it
       if (g_proc_fd >= 0) {
+#if defined(OS_LINUX)
+// BSD: Removing all Seccomp Sandbox code if not on linux
         int proc_self_maps = openat(g_proc_fd, "self/maps", O_RDONLY);
         if (proc_self_maps >= 0) {
           SeccompSandboxSetProcSelfMaps(proc_self_maps);
         }
+#endif
         close(g_proc_fd);
         g_proc_fd = -1;
       }
@@@@ -544,6 +557,8 @@@@ static bool EnterSandbox() {
d51 1
a51 2
 
+    // TODO(benl): Do something for FreeBSD...
d56 1
a56 1
@@@@ -569,6 +584,7 @@@@ static bool EnterSandbox() {
d60 4
a63 4
+#endif
   } else {
     SkiaFontConfigUseDirectImplementation();
   }
@

