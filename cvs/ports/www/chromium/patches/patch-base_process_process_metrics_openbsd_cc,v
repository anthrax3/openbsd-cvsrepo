head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2016.10.26.06.22.07;	author robert;	state Exp;
branches;
next	1.6;
commitid	Dt81be1Osjz00Uwx;

1.6
date	2016.03.06.10.51.13;	author robert;	state Exp;
branches;
next	1.5;
commitid	Upms3IeOsaLsGxbP;

1.5
date	2015.01.22.11.16.40;	author robert;	state Exp;
branches;
next	1.4;
commitid	yDb21GVFY5iIUXUw;

1.4
date	2014.07.20.17.22.33;	author robert;	state Exp;
branches;
next	1.3;
commitid	yFSQqywU9tg3Fhqe;

1.3
date	2014.07.08.10.30.35;	author sthen;	state Exp;
branches;
next	1.2;
commitid	uUfz1ylrr5csHT4w;

1.2
date	2014.04.17.16.27.53;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.29.19.04.00;	author robert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to 54.0.2840.71
@
text
@$OpenBSD: patch-base_process_process_metrics_openbsd_cc,v 1.6 2016/03/06 10:51:13 robert Exp $
--- base/process/process_metrics_openbsd.cc.orig.port	Wed Oct 12 21:02:53 2016
+++ base/process/process_metrics_openbsd.cc	Wed Oct 19 12:55:56 2016
@@@@ -4,10 +4,21 @@@@
 
 #include "base/process/process_metrics.h"
 
+#include "base/files/file_util.h"
+#include "base/logging.h"
+#include "base/process/internal_linux.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/string_split.h"
+#include "base/strings/string_tokenizer.h"
+#include "base/strings/string_util.h"
+#include "base/sys_info.h"
+#include "base/threading/thread_restrictions.h"
+
 #include <stddef.h>
 #include <stdint.h>
 #include <sys/param.h>
 #include <sys/sysctl.h>
+#include <sys/vmmeter.h>
 
 #include "base/macros.h"
 #include "base/memory/ptr_util.h"
@@@@ -22,20 +33,27 @@@@ std::unique_ptr<ProcessMetrics> ProcessMetrics::Create
 }
 
 size_t ProcessMetrics::GetPagefileUsage() const {
-  struct kinfo_proc info;
-  size_t length;
+  struct kinfo_proc *info;
+  size_t length, pfu;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    pfu = -1;
+    goto out;
+  }
+  pfu = (info->p_vm_tsize + info->p_vm_dsize + info->p_vm_ssize);
 
-  return (info.p_vm_tsize + info.p_vm_dsize + info.p_vm_ssize);
+out:
+  free(info);
+  return pfu;
 }
 
 size_t ProcessMetrics::GetPeakPagefileUsage() const {
@@@@ -43,20 +61,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
 }
 
 size_t ProcessMetrics::GetWorkingSetSize() const {
-  struct kinfo_proc info;
-  size_t length;
+  struct kinfo_proc *info;
+  size_t length, wss;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    wss = -1;
+    goto out;
+  }
 
-  return info.p_vm_rssize * getpagesize();
+  wss = (info->p_vm_rssize * getpagesize());
+
+out:
+  free(info);
+  return wss;
 }
 
 size_t ProcessMetrics::GetPeakWorkingSetSize() const {
@@@@ -96,20 +122,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
 }
 
 static int GetProcessCPU(pid_t pid) {
-  struct kinfo_proc info;
+  struct kinfo_proc *info;
   size_t length;
+  int pctcpu = 0;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return 0;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0)
+    goto out;
 
-  return info.p_pctcpu;
+  pctcpu = info->p_pctcpu;
+
+out:
+  free(info);
+  return pctcpu;
 }
 
 double ProcessMetrics::GetCPUUsage() {
@@@@ -123,7 +156,6 @@@@ double ProcessMetrics::GetCPUUsage() {
   }
 
   int64_t time_delta = (time - last_cpu_time_).InMicroseconds();
-  DCHECK_NE(time_delta, 0);
 
   if (time_delta == 0)
     return 0;
@


1.6
log
@update to 49.0.2623.75
@
text
@d1 5
a5 5
$OpenBSD$
--- base/process/process_metrics_openbsd.cc.orig.port	Thu Mar  3 09:50:00 2016
+++ base/process/process_metrics_openbsd.cc	Thu Mar  3 09:52:22 2016
@@@@ -5,10 +5,21 @@@@
 #include "base/macros.h"
d24 3
a26 3
 namespace base {
 
@@@@ -18,20 +29,27 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
d59 1
a59 1
@@@@ -39,20 +57,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
d93 1
a93 1
@@@@ -92,20 +118,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
d125 1
a125 1
@@@@ -119,7 +152,6 @@@@ double ProcessMetrics::GetCPUUsage() {
@


1.5
log
@update to 40.0.2214.91
@
text
@d1 5
a5 5
$OpenBSD: patch-base_process_process_metrics_openbsd_cc,v 1.4 2014/07/20 17:22:33 robert Exp $
--- base/process/process_metrics_openbsd.cc.orig.port	Wed Dec  3 03:13:19 2014
+++ base/process/process_metrics_openbsd.cc	Sat Dec  6 12:13:17 2014
@@@@ -4,8 +4,19 @@@@
 
d18 2
d26 1
a26 1
@@@@ -15,20 +26,27 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
d59 1
a59 1
@@@@ -36,20 +54,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
d93 1
a93 1
@@@@ -89,20 +115,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
d125 1
a125 1
@@@@ -116,7 +149,6 @@@@ double ProcessMetrics::GetCPUUsage() {
d128 1
a128 1
   int64 time_delta = (time - last_cpu_time_).InMicroseconds();
@


1.4
log
@update to 36.0.1985.125;

from this release Chromium uses Aura instead of Gtk+ so the UI will look
a bit different, and that is completely normal.
@
text
@d1 3
a3 3
$OpenBSD$
--- base/process/process_metrics_openbsd.cc.orig.port	Thu Jul 17 12:30:05 2014
+++ base/process/process_metrics_openbsd.cc	Thu Jul 17 12:34:26 2014
d8 1
a8 1
+#include "base/file_util.h"
@


1.3
log
@pull in vmmeter.h for struct vmtotal
@
text
@d1 3
a3 3
$OpenBSD: patch-base_process_process_metrics_openbsd_cc,v 1.2 2014/04/17 16:27:53 robert Exp $
--- base/process/process_metrics_openbsd.cc.orig.port	Wed Jun 11 02:14:23 2014
+++ base/process/process_metrics_openbsd.cc	Tue Jul  8 11:29:19 2014
d123 1
a123 1
@@@@ -122,7 +155,6 @@@@ double ProcessMetrics::GetCPUUsage() {
d126 1
a126 1
   int64 time_delta = time - last_cpu_time_;
@


1.2
log
@update to 34.0.1847.116 and disable Werror for the future clang update
@
text
@d1 4
a4 4
$OpenBSD$
--- base/process/process_metrics_openbsd.cc.orig.port	Sat Apr 12 09:42:20 2014
+++ base/process/process_metrics_openbsd.cc	Sat Apr 12 09:45:48 2014
@@@@ -4,6 +4,16 @@@@
d20 1
d22 3
a24 1
@@@@ -15,20 +25,27 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
d57 1
a57 1
@@@@ -36,20 +53,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
d91 1
a91 1
@@@@ -89,20 +114,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
d123 1
a123 1
@@@@ -122,7 +154,6 @@@@ double ProcessMetrics::GetCPUUsage() {
@


1.1
log
@update to 29.0.1547.76
@
text
@d2 2
a3 2
--- base/process/process_metrics_openbsd.cc.orig.port	Sun Sep 22 16:16:28 2013
+++ base/process/process_metrics_openbsd.cc	Fri Sep 27 23:26:15 2013
d88 1
a88 1
@@@@ -89,20 +114,28 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
a116 1
+
d120 1
a120 1
@@@@ -122,7 +155,6 @@@@ double ProcessMetrics::GetCPUUsage() {
d123 1
a123 1
   int64 time_delta = time - last_time_;
@

