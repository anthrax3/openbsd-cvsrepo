head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.4
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.2
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.2
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.2
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.20
date	2017.01.26.17.08.25;	author robert;	state Exp;
branches;
next	1.19;
commitid	SWz5LewWpip0ZZLw;

1.19
date	2016.05.27.06.28.20;	author robert;	state Exp;
branches;
next	1.18;
commitid	cpiCcJ3vjht5tEkH;

1.18
date	2016.03.06.10.51.13;	author robert;	state Exp;
branches;
next	1.17;
commitid	Upms3IeOsaLsGxbP;

1.17
date	2015.10.14.16.42.07;	author robert;	state Exp;
branches;
next	1.16;
commitid	iw6THZfJQngZlw1r;

1.16
date	2015.09.05.16.06.50;	author robert;	state Exp;
branches;
next	1.15;
commitid	rTmBXJaDIIWe1XKA;

1.15
date	2014.07.20.17.22.33;	author robert;	state Exp;
branches;
next	1.14;
commitid	yFSQqywU9tg3Fhqe;

1.14
date	2013.09.29.19.04.00;	author robert;	state Exp;
branches;
next	1.13;

1.13
date	2013.09.25.23.39.55;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2013.04.03.08.19.10;	author robert;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.15.08.30.33;	author robert;	state Exp;
branches;
next	1.10;

1.10
date	2012.12.18.21.38.12;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.26.18.47.01;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2012.04.15.10.40.44;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.17.10.19.50;	author robert;	state dead;
branches;
next	1.6;

1.6
date	2011.12.14.16.58.19;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.08.20.36.56;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.16.10.52.46;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.20
log
@update to 56.0.2924.76
@
text
@$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.19 2016/05/27 06:28:20 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Thu Dec 15 00:02:02 2016
+++ base/debug/debugger_posix.cc	Tue Jan  3 20:29:54 2017
@@@@ -34,6 +34,10 @@@@
 #include <sys/sysctl.h>
 #endif
 
+#if defined(OS_OPENBSD)
+#include <sys/proc.h>
+#endif
+
 #if defined(OS_FREEBSD)
 #include <sys/user.h>
 #endif
@@@@ -92,33 +96,38 @@@@ bool BeingDebugged() {
 
   // Caution: struct kinfo_proc is marked __APPLE_API_UNSTABLE.  The source and
   // binary interfaces may change.
-  struct kinfo_proc info;
-  size_t info_size = sizeof(info);
+  struct kinfo_proc *info;
+  size_t info_size;
 
-#if defined(OS_OPENBSD)
   if (sysctl(mib, arraysize(mib), NULL, &info_size, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(info_size);
+
   mib[5] = (info_size / sizeof(struct kinfo_proc));
-#endif
 
-  int sysctl_result = sysctl(mib, arraysize(mib), &info, &info_size, NULL, 0);
+  int sysctl_result = sysctl(mib, arraysize(mib), info, &info_size, NULL, 0);
   DCHECK_EQ(sysctl_result, 0);
   if (sysctl_result != 0) {
     is_set = true;
     being_debugged = false;
-    return being_debugged;
+    goto out;
   }
 
   // This process is being debugged if the P_TRACED flag is set.
   is_set = true;
 #if defined(OS_FREEBSD)
-  being_debugged = (info.ki_flag & P_TRACED) != 0;
+  being_debugged = (info->ki_flag & P_TRACED) != 0;
+#elif defined(OS_OPENBSD) && !defined(_P_TRACED)
+  being_debugged = (info->p_psflags & PS_TRACED) != 0;
 #elif defined(OS_BSD)
-  being_debugged = (info.p_flag & P_TRACED) != 0;
+  being_debugged = (info->p_flag & P_TRACED) != 0;
 #else
-  being_debugged = (info.kp_proc.p_flag & P_TRACED) != 0;
+  being_debugged = (info->kp_proc.p_flag & P_TRACED) != 0;
 #endif
+
+out:
+  free(info);
   return being_debugged;
 }
 
@


1.19
log
@update to 51.0.2704.63
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.18 2016/03/06 10:51:13 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Wed May 25 04:54:06 2016
+++ base/debug/debugger_posix.cc	Thu May 26 08:09:39 2016
@@@@ -32,6 +32,10 @@@@
d15 1
a15 1
@@@@ -90,33 +94,38 @@@@ bool BeingDebugged() {
@


1.18
log
@update to 49.0.2623.75
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.17 2015/10/14 16:42:07 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Wed Feb 24 00:01:57 2016
+++ base/debug/debugger_posix.cc	Thu Mar  3 09:43:25 2016
@@@@ -30,6 +30,10 @@@@
d15 1
a15 1
@@@@ -89,33 +93,38 @@@@ bool BeingDebugged() {
@


1.17
log
@update to 46.0.2490.71
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.16 2015/09/05 16:06:50 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Wed Oct  7 04:42:06 2015
+++ base/debug/debugger_posix.cc	Wed Oct 14 07:41:12 2015
@@@@ -28,6 +28,10 @@@@
d15 1
a15 1
@@@@ -88,33 +92,38 @@@@ bool BeingDebugged() {
@


1.16
log
@update to 45.0.2454.85
@
text
@d1 3
a3 3
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.15 2014/07/20 17:22:33 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Tue Sep  1 22:10:41 2015
+++ base/debug/debugger_posix.cc	Wed Sep  2 07:31:54 2015
d15 1
a15 1
@@@@ -87,33 +91,38 @@@@ bool BeingDebugged() {
@


1.15
log
@update to 36.0.1985.125;

from this release Chromium uses Aura instead of Gtk+ so the UI will look
a bit different, and that is completely normal.
@
text
@d1 3
a3 3
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.14 2013/09/29 19:04:00 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Tue Jul 15 13:01:12 2014
+++ base/debug/debugger_posix.cc	Thu Jul 17 12:25:31 2014
d15 1
a15 1
@@@@ -88,33 +92,38 @@@@ bool BeingDebugged() {
@


1.14
log
@update to 29.0.1547.76
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.13 2013/09/25 23:39:55 sthen Exp $
--- base/debug/debugger_posix.cc.orig.port	Wed Sep 18 10:13:09 2013
+++ base/debug/debugger_posix.cc	Sun Sep 29 21:01:23 2013
@@@@ -29,6 +29,10 @@@@
d15 1
a15 1
@@@@ -106,33 +110,38 @@@@ bool BeingDebugged() {
@


1.13
log
@handle p_flags split in kinfo_proc to unbreak
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.12 2013/04/03 08:19:10 robert Exp $
--- base/debug/debugger_posix.cc.orig.port	Wed Jul 24 19:31:42 2013
+++ base/debug/debugger_posix.cc	Wed Sep 25 13:57:45 2013
@@@@ -33,6 +33,10 @@@@
d15 1
a15 1
@@@@ -110,33 +114,38 @@@@ bool BeingDebugged() {
@


1.12
log
@- update to 26.0.1410.43
- switch chromium to use clang/llvm instead of gcc
- switch back to the internal libvpx because it's an unreleased version
  at this point
- re-enable SSE2 support
@
text
@d1 3
a3 3
$OpenBSD$
--- base/debug/debugger_posix.cc.orig.port	Fri Mar 22 02:13:43 2013
+++ base/debug/debugger_posix.cc	Tue Apr  2 21:05:17 2013
d15 1
a15 1
@@@@ -110,33 +114,36 @@@@ bool BeingDebugged() {
d48 2
@


1.11
log
@update to 25.0.1364.160
@
text
@d1 3
a3 3
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.10 2012/12/18 21:38:12 sthen Exp $
--- base/debug/debugger_posix.cc.orig	Thu Feb 21 04:30:01 2013
+++ base/debug/debugger_posix.cc	Fri Feb 22 19:40:32 2013
@


1.10
log
@cope with sysctl.h changes
@
text
@d1 3
a3 3
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.9 2012/08/26 18:47:01 robert Exp $
--- base/debug/debugger_posix.cc.orig	Tue Nov 13 19:02:09 2012
+++ base/debug/debugger_posix.cc	Fri Dec  7 06:18:38 2012
d15 1
a15 1
@@@@ -103,33 +107,36 @@@@ bool BeingDebugged() {
@


1.9
log
@update to 21.0.1180.81
@
text
@d1 15
a15 4
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.8 2012/04/15 10:40:44 robert Exp $
--- base/debug/debugger_posix.cc.orig	Tue Aug 14 09:01:47 2012
+++ base/debug/debugger_posix.cc	Wed Aug 15 23:14:34 2012
@@@@ -103,33 +103,36 @@@@ bool BeingDebugged() {
@


1.8
log
@make sure we use big enough buffers for sysctl(3)
@
text
@d1 4
a4 4
$OpenBSD$
--- base/debug/debugger_posix.cc.orig	Sat Apr 14 12:17:19 2012
+++ base/debug/debugger_posix.cc	Sat Apr 14 16:54:46 2012
@@@@ -92,33 +92,36 @@@@ bool BeingDebugged() {
@


1.7
log
@update to 17.0.963.56
@
text
@d1 4
a4 6
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.6 2011/12/14 16:58:19 robert Exp $
--- base/debug/debugger_posix.cc.orig	Wed Dec  7 09:01:58 2011
+++ base/debug/debugger_posix.cc	Tue Dec 13 21:23:11 2011
@@@@ -59,7 +59,7 @@@@ bool SpawnDebuggerOnProcess(unsigned /* process_id */)
   return false;
 }
d6 10
a15 2
-#if defined(OS_MACOSX)
+#if defined(OS_MACOSX) || defined(OS_OPENBSD)
d17 4
a20 11
 // Based on Apple's recommended method as described in
 // http://developer.apple.com/qa/qa2004/qa1361.html
@@@@ -80,6 +80,10 @@@@ bool BeingDebugged() {
     KERN_PROC,
     KERN_PROC_PID,
     getpid()
+#if defined(OS_OPENBSD)
+    , sizeof(struct kinfo_proc),
+    400 /* XXX */
+#endif
   };
d22 9
a30 2
   // Caution: struct kinfo_proc is marked __APPLE_API_UNSTABLE.  The source and
@@@@ -97,7 +101,11 @@@@ bool BeingDebugged() {
d34 13
a46 5
+#if defined(OS_OPENBSD)
+  being_debugged = (info.p_flag & P_TRACED) != 0;
+#else
   being_debugged = (info.kp_proc.p_flag & P_TRACED) != 0;
+#endif
@


1.6
log
@update to 16.0.912.63
@
text
@d1 1
a1 1
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.5 2011/09/19 08:55:26 robert Exp $
@


1.5
log
@update to 14.0.835.163
@
text
@d1 4
a4 4
$OpenBSD$
--- base/debug/debugger_posix.cc.orig	Wed Aug 24 10:55:26 2011
+++ base/debug/debugger_posix.cc	Wed Aug 24 13:01:47 2011
@@@@ -57,7 +57,7 @@@@ bool SpawnDebuggerOnProcess(unsigned /* process_id */)
d13 1
a13 1
@@@@ -78,6 +78,10 @@@@ bool BeingDebugged() {
d24 1
a24 1
@@@@ -95,7 +99,11 @@@@ bool BeingDebugged() {
@


1.4
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@d1 4
a4 14
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.3 2011/03/16 10:52:46 robert Exp $
--- base/debug/debugger_posix.cc.orig	Mon Jun  6 11:11:46 2011
+++ base/debug/debugger_posix.cc	Wed Jun  8 09:58:35 2011
@@@@ -12,6 +12,9 @@@@
 #include <stdlib.h>
 #include <sys/param.h>
 #include <sys/stat.h>
+#if defined(OS_OPENBSD)
+#include <sys/param.h>
+#endif
 #if !defined(OS_NACL)
 #include <sys/sysctl.h>
 #endif
@@@@ -51,7 +54,7 @@@@ bool SpawnDebuggerOnProcess(unsigned /* process_id */)
d13 1
a13 1
@@@@ -72,6 +75,10 @@@@ bool BeingDebugged() {
d24 1
a24 1
@@@@ -89,7 +96,11 @@@@ bool BeingDebugged() {
@


1.3
log
@Add some missing patches that were missed by the previous commit
and move back to KERN_PROC from KERN_PROC2 now that we can.
@
text
@d1 4
a4 5
$OpenBSD: patch-base_debug_debugger_posix_cc,v 1.2 2011/03/15 11:38:05 robert Exp $
--- base/debug/debugger_posix.cc.orig	Fri Mar 11 10:01:32 2011
+++ base/debug/debugger_posix.cc	Wed Mar 16 10:20:49 2011
@@@@ -11,6 +11,9 @@@@
 #include <stdio.h>
d6 1
d14 1
a14 1
@@@@ -50,7 +53,7 @@@@ bool SpawnDebuggerOnProcess(unsigned /* process_id */)
d23 1
a23 1
@@@@ -71,6 +74,10 @@@@ bool BeingDebugged() {
d34 1
a34 1
@@@@ -88,7 +95,11 @@@@ bool BeingDebugged() {
@


1.2
log
@update to 10.0.648.133
@
text
@d1 3
a3 3
$OpenBSD$
--- base/debug/debugger_posix.cc.orig	Mon Mar 14 11:01:33 2011
+++ base/debug/debugger_posix.cc	Mon Mar 14 17:58:04 2011
d23 1
a23 7
@@@@ -68,14 +71,26 @@@@ bool BeingDebugged() {
   // we're looking for information about a specific process ID.
   int mib[] = {
     CTL_KERN,
+#if defined(OS_OPENBSD)
+    KERN_PROC2,
+#else
a24 1
+#endif
d28 1
a28 1
+    , sizeof(struct kinfo_proc2),
d34 1
a34 10
   // binary interfaces may change.
+#if defined(OS_OPENBSD)
+  struct kinfo_proc2 info;
+#else
   struct kinfo_proc info;
+#endif
   size_t info_size = sizeof(info);
 
   int sysctl_result = sysctl(mib, arraysize(mib), &info, &info_size, NULL, 0);
@@@@ -88,7 +103,11 @@@@ bool BeingDebugged() {
@


1.1
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d2 3
a4 3
--- base/debug/debugger_posix.cc.orig	Fri Jan 14 11:56:03 2011
+++ base/debug/debugger_posix.cc	Wed Jan 26 09:41:38 2011
@@@@ -9,8 +9,12 @@@@
d8 1
a8 1
+#if defined(__OpenBSD__)
d11 1
d13 2
a14 6
 #include <sys/types.h>
+#include <sys/user.h>
 #include <unistd.h>
 
 #include <string>
@@@@ -47,7 +51,7 @@@@ bool SpawnDebuggerOnProcess(unsigned /* process_id */)
d23 1
a23 1
@@@@ -65,15 +69,28 @@@@ bool BeingDebugged() {
a43 1
+  size_t info_size = sizeof(info);
d46 1
a47 1
+#endif
d50 1
a50 2
   DCHECK_EQ(sysctl_result, 0);
@@@@ -85,12 +102,38 @@@@ bool BeingDebugged() {
a61 36
 #elif defined(OS_LINUX)
+  struct kinfo_proc info;
+  size_t info_size = sizeof(info);
 
+  int sysctl_result = sysctl(mib, arraysize(mib), &info, &info_size, NULL, 0);
+  DCHECK_EQ(sysctl_result, 0);
+  if (sysctl_result != 0) {
+    is_set = true;
+    being_debugged = false;
+    return being_debugged;
+  }
+
+  // This process is being debugged if the P_TRACED flag is set.
+  is_set = true;
+#if defined(OS_OPENBSD)
+  being_debugged = (info.kp_proc.p_flag & P_TRACED) != 0;
+#else
+  being_debugged = (info.kp_proc.p_flag & P_TRACED) != 0;
+#endif
+  return being_debugged;
+}
+
+#elif defined(OS_LINUX)
+
 // We can look in /proc/self/status for TracerPid.  We are likely used in crash
 // handling, so we are careful not to use the heap or have side effects.
 // Another option that is common is to try to ptrace yourself, but then we
@@@@ -127,7 +170,7 @@@@ bool BeingDebugged() {
 
 #elif defined(OS_FREEBSD)
 
-bool DebugUtil::BeingDebugged() {
+bool BeingDebugged() {
   // TODO(benl): can we determine this under FreeBSD?
   NOTIMPLEMENTED();
   return false;
@

