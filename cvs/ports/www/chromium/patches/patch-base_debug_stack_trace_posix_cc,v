head	1.26;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.15.0.2
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.26
date	2017.07.27.14.23.46;	author robert;	state Exp;
branches;
next	1.25;
commitid	UqlSU0wmYWtcPgqI;

1.25
date	2017.04.28.14.21.00;	author robert;	state Exp;
branches;
next	1.24;
commitid	XFDnyB7tGNawHUbl;

1.24
date	2017.03.14.12.18.53;	author robert;	state Exp;
branches;
next	1.23;
commitid	FgEdsLreTqAdn1i5;

1.23
date	2016.10.26.06.22.07;	author robert;	state Exp;
branches;
next	1.22;
commitid	Dt81be1Osjz00Uwx;

1.22
date	2016.05.27.06.28.20;	author robert;	state Exp;
branches;
next	1.21;
commitid	cpiCcJ3vjht5tEkH;

1.21
date	2016.04.16.19.08.45;	author robert;	state Exp;
branches;
next	1.20;
commitid	SE10dvx9aTcZrjRO;

1.20
date	2016.03.06.10.51.13;	author robert;	state Exp;
branches;
next	1.19;
commitid	Upms3IeOsaLsGxbP;

1.19
date	2016.01.23.18.49.31;	author robert;	state Exp;
branches;
next	1.18;
commitid	KVrkvcBYFue8N3VB;

1.18
date	2015.10.14.16.42.07;	author robert;	state Exp;
branches;
next	1.17;
commitid	iw6THZfJQngZlw1r;

1.17
date	2015.01.22.11.16.40;	author robert;	state Exp;
branches;
next	1.16;
commitid	yDb21GVFY5iIUXUw;

1.16
date	2014.10.13.06.49.19;	author robert;	state Exp;
branches;
next	1.15;
commitid	GAMY6AdJxC6cdD6g;

1.15
date	2014.07.20.17.22.33;	author robert;	state Exp;
branches;
next	1.14;
commitid	yFSQqywU9tg3Fhqe;

1.14
date	2014.05.24.15.27.34;	author robert;	state Exp;
branches;
next	1.13;

1.13
date	2014.04.17.16.27.53;	author robert;	state Exp;
branches;
next	1.12;

1.12
date	2014.03.11.14.52.01;	author robert;	state Exp;
branches;
next	1.11;

1.11
date	2014.01.18.11.42.03;	author robert;	state Exp;
branches;
next	1.10;

1.10
date	2013.12.12.10.43.18;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2013.04.03.08.19.10;	author robert;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.15.08.30.33;	author robert;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.12.17.34.17;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.12.16.46.09;	author robert;	state dead;
branches;
next	1.5;

1.5
date	2012.07.10.09.22.34;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.19.08.55.26;	author robert;	state dead;
branches;
next	1.3;

1.3
date	2011.06.08.20.36.56;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.08.09.43.02;	author espie;	state Exp;
branches;
next	;


desc
@@


1.26
log
@update to 60.0.3112.78
@
text
@$OpenBSD$

Index: base/debug/stack_trace_posix.cc
--- base/debug/stack_trace_posix.cc.orig
+++ base/debug/stack_trace_posix.cc
@@@@ -34,7 +34,7 @@@@
 #include <AvailabilityMacros.h>
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "base/debug/proc_maps_linux.h"
 #endif
 
@@@@ -574,6 +574,10 @@@@ class SandboxSymbolizeHelper {
   // for the modules that are loaded in the current process.
   // Returns true on success.
   bool CacheMemoryRegions() {
+#if defined(OS_BSD)
+    NOTIMPLEMENTED();
+    return false;
+#else
     // Reads /proc/self/maps.
     std::string contents;
     if (!ReadProcMaps(&contents)) {
@@@@ -589,6 +593,7 @@@@ class SandboxSymbolizeHelper {
 
     is_initialized_ = true;
     return true;
+#endif
   }
 
   // Opens all object files and caches their file descriptors.
@@@@ -721,7 +726,7 @@@@ StackTrace::StackTrace(size_t count) {
 // NOTE: This code MUST be async-signal safe (it's used by in-process
 // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if !defined(__UCLIBC__) && !defined(_AIX) && !defined(OS_BSD)
   count = std::min(arraysize(trace_), count);
 
   // Though the backtrace API man page does not list any possible negative
@


1.25
log
@update to 58.0.3029.81
@
text
@d2 4
a5 2
--- base/debug/stack_trace_posix.cc.orig.port	Thu Apr 27 21:34:42 2017
+++ base/debug/stack_trace_posix.cc	Fri Apr 28 07:24:14 2017
d15 1
a15 1
@@@@ -575,6 +575,10 @@@@ class SandboxSymbolizeHelper {
d26 1
a26 1
@@@@ -590,6 +594,7 @@@@ class SandboxSymbolizeHelper {
d34 1
a34 1
@@@@ -722,7 +727,7 @@@@ StackTrace::StackTrace(size_t count) {
d38 2
a39 2
-#if !defined(__UCLIBC__)
+#if !defined(__UCLIBC__) && !defined(OS_BSD)
@


1.24
log
@update to 57.0.2987.98
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.23 2016/10/26 06:22:07 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Thu Mar  9 21:04:26 2017
+++ base/debug/stack_trace_posix.cc	Fri Mar 10 18:55:57 2017
@@@@ -33,7 +33,7 @@@@
d13 1
a13 1
@@@@ -574,6 +574,9 @@@@ class SandboxSymbolizeHelper {
d17 2
a18 1
+#if defined(OS_OPENBSD)
d24 1
a24 1
@@@@ -589,6 +592,7 @@@@ class SandboxSymbolizeHelper {
d32 3
a34 3
@@@@ -721,7 +725,7 @@@@ StackTrace::StackTrace() {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
   // stack dumping signal handler). NO malloc or stdio is allowed here.
d38 2
a40 2
   // return values, we take no chance.
   count_ = base::saturated_cast<size_t>(backtrace(trace_, arraysize(trace_)));
@


1.23
log
@update to 54.0.2840.71
@
text
@d1 13
a13 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.22 2016/05/27 06:28:20 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Oct 12 21:02:52 2016
+++ base/debug/stack_trace_posix.cc	Wed Oct 19 12:55:56 2016
@@@@ -571,6 +571,9 @@@@ class SandboxSymbolizeHelper {
d23 1
a23 1
@@@@ -586,6 +589,7 @@@@ class SandboxSymbolizeHelper {
d31 1
a31 1
@@@@ -718,7 +722,7 @@@@ StackTrace::StackTrace() {
@


1.22
log
@update to 51.0.2704.63
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.21 2016/04/16 19:08:45 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed May 25 04:54:06 2016
+++ base/debug/stack_trace_posix.cc	Thu May 26 08:09:39 2016
@@@@ -572,6 +572,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -587,6 +590,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -717,7 +721,7 @@@@ StackTrace::StackTrace() {
@


1.21
log
@update to 50.0.2661.75
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.20 2016/03/06 10:51:13 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Apr 13 22:59:36 2016
+++ base/debug/stack_trace_posix.cc	Thu Apr 14 08:25:08 2016
@@@@ -571,6 +571,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -586,6 +589,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -716,7 +720,7 @@@@ StackTrace::StackTrace() {
@


1.20
log
@update to 49.0.2623.75
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.19 2016/01/23 18:49:31 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Feb 24 21:01:30 2016
+++ base/debug/stack_trace_posix.cc	Thu Mar  3 09:43:25 2016
@@@@ -569,6 +569,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -584,6 +587,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -714,7 +718,7 @@@@ StackTrace::StackTrace() {
@


1.19
log
@update to 48.0.2564.82
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.18 2015/10/14 16:42:07 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Jan 20 21:01:18 2016
+++ base/debug/stack_trace_posix.cc	Fri Jan 22 19:58:58 2016
@@@@ -567,6 +567,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -582,6 +585,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -712,7 +716,7 @@@@ StackTrace::StackTrace() {
@


1.18
log
@update to 46.0.2490.71
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.17 2015/01/22 11:16:40 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Oct  7 04:42:06 2015
+++ base/debug/stack_trace_posix.cc	Wed Oct 14 07:41:12 2015
@@@@ -599,6 +599,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -614,6 +617,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -744,7 +748,7 @@@@ StackTrace::StackTrace() {
@


1.17
log
@update to 40.0.2214.91
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.16 2014/10/13 06:49:19 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Dec  3 03:13:19 2014
+++ base/debug/stack_trace_posix.cc	Sat Dec  6 11:34:24 2014
@@@@ -586,6 +586,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -601,6 +604,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -738,7 +742,7 @@@@ StackTrace::StackTrace() {
@


1.16
log
@update to 38.0.2125.101
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.15 2014/07/20 17:22:33 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Thu Oct  2 19:18:52 2014
+++ base/debug/stack_trace_posix.cc	Fri Oct 10 16:10:30 2014
@@@@ -588,6 +588,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -603,6 +606,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -740,7 +744,7 @@@@ StackTrace::StackTrace() {
@


1.15
log
@update to 36.0.1985.125;

from this release Chromium uses Aura instead of Gtk+ so the UI will look
a bit different, and that is completely normal.
@
text
@d1 4
a4 4
$OpenBSD$
--- base/debug/stack_trace_posix.cc.orig.port	Thu Jul 17 12:27:35 2014
+++ base/debug/stack_trace_posix.cc	Thu Jul 17 12:30:17 2014
@@@@ -590,6 +590,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -605,6 +608,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -742,7 +746,7 @@@@ StackTrace::StackTrace() {
@


1.14
log
@update to 35.0.1916.114
@
text
@d2 3
a4 3
--- base/debug/stack_trace_posix.cc.orig.port	Thu May 22 21:45:08 2014
+++ base/debug/stack_trace_posix.cc	Sat May 24 13:50:38 2014
@@@@ -586,6 +586,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -601,6 +604,7 @@@@ class SandboxSymbolizeHelper {
d22 3
a24 1
@@@@ -740,7 +744,11 @@@@ StackTrace::StackTrace() {
d26 2
a29 3
+#if defined(OS_BSD)
+  count_ = 0;
+#else
a30 4
+#endif
 }
 
 void StackTrace::Print() const {
@


1.13
log
@update to 34.0.1847.116 and disable Werror for the future clang update
@
text
@d1 22
a22 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.12 2014/03/11 14:52:01 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Apr  2 21:03:58 2014
+++ base/debug/stack_trace_posix.cc	Sat Apr 12 09:40:41 2014
@@@@ -471,7 +471,11 @@@@ StackTrace::StackTrace() {
d29 1
a29 1
   count_ = std::max(backtrace(trace_, arraysize(trace_)), 0);
@


1.12
log
@update to 33.0.1750.146
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.11 2014/01/18 11:42:03 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Thu Feb 20 21:28:47 2014
+++ base/debug/stack_trace_posix.cc	Fri Feb 21 19:39:55 2014
@@@@ -477,7 +477,11 @@@@ StackTrace::StackTrace() {
@


1.11
log
@update to 32.0.1700.76
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.10 2013/12/12 10:43:18 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Mon Jan 13 21:59:59 2014
+++ base/debug/stack_trace_posix.cc	Thu Jan 16 12:26:42 2014
@@@@ -473,7 +473,11 @@@@ StackTrace::StackTrace() {
@


1.10
log
@update to 31.0.1650.63
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.9 2013/04/03 08:19:10 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Dec  4 21:54:55 2013
+++ base/debug/stack_trace_posix.cc	Thu Dec  5 15:32:45 2013
@@@@ -471,7 +471,11 @@@@ StackTrace::StackTrace() {
@


1.9
log
@- update to 26.0.1410.43
- switch chromium to use clang/llvm instead of gcc
- switch back to the internal libvpx because it's an unreleased version
  at this point
- re-enable SSE2 support
@
text
@d1 3
a3 3
$OpenBSD$
--- base/debug/stack_trace_posix.cc.orig.port	Fri Mar 22 02:13:43 2013
+++ base/debug/stack_trace_posix.cc	Tue Apr  2 21:05:17 2013
d15 1
a15 1
 void StackTrace::PrintBacktrace() const {
@


1.8
log
@update to 25.0.1364.160
@
text
@d2 3
a4 3
--- base/debug/stack_trace_posix.cc.orig	Fri Feb 22 19:43:11 2013
+++ base/debug/stack_trace_posix.cc	Fri Feb 22 19:43:46 2013
@@@@ -328,7 +328,11 @@@@ StackTrace::StackTrace() {
@


1.7
log
@re-add needed patch for i386
@
text
@d2 3
a4 4
--- base/debug/stack_trace_posix.cc.orig	Fri Oct 12 21:20:33 2012
+++ base/debug/stack_trace_posix.cc	Fri Oct 12 21:21:03 2012
@@@@ -148,9 +148,13 @@@@ bool GetBacktraceStrings(void *const *trace, int size,
 }  // namespace
d6 2
a7 1
 StackTrace::StackTrace() {
a10 2
   // Though the backtrace API man page does not list any possible negative
   // return values, we take no chance.
@


1.6
log
@update to 22.0.1229.94
@
text
@d1 8
a8 10
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.5 2012/07/10 09:22:34 robert Exp $
--- base/debug/stack_trace_posix.cc.orig	Tue Jul 10 10:37:42 2012
+++ base/debug/stack_trace_posix.cc	Tue Jul 10 10:42:08 2012
@@@@ -153,6 +153,11 @@@@ StackTrace::StackTrace() {
     count_ = 0;
     return;
   }
+#elif defined(OS_BSD)
+  // Disable backtrace for now, libexecinfo crashes in getframeaddr
+  // in release build / i386.
d10 1
a10 2
+  return;
 #endif
d13 5
@


1.5
log
@update to 20.0.1132.47
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@update to 14.0.835.163
@
text
@d1 15
a15 13
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.3 2011/06/08 20:36:56 robert Exp $
--- base/debug/stack_trace_posix.cc.orig	Mon Jun  6 11:11:46 2011
+++ base/debug/stack_trace_posix.cc	Wed Jun  8 09:58:35 2011
@@@@ -11,6 +11,9 @@@@
 #include <stdlib.h>
 #include <sys/param.h>
 #include <sys/stat.h>
+#if defined(__OpenBSD__)
+#include <sys/param.h>
+#endif
 #include <sys/sysctl.h>
 #include <sys/types.h>
 #include <unistd.h>
@


1.3
log
@Update to the new stable branch: 12.0.742.91
http://googlechromereleases.blogspot.com/2011/06/chrome-stable-release.html
@
text
@d1 1
a1 1
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.2 2011/03/15 11:38:05 robert Exp $
@


1.2
log
@update to 10.0.648.133
@
text
@d1 4
a4 5
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.1 2011/02/08 09:43:02 espie Exp $
--- base/debug/stack_trace_posix.cc.orig	Fri Mar 11 10:01:32 2011
+++ base/debug/stack_trace_posix.cc	Mon Mar 14 10:55:37 2011
@@@@ -10,6 +10,9 @@@@
 #include <stdio.h>
d6 1
@


1.1
log
@late update to chromium 9, robert@@ did the work, but he doesn't have the
time right now.
Tree is still locked!
Reasons for the update:
- good work that can be used now
- only builds on i386/amd64, and they're fast
- multiple security problems in old chrome
- old chrome half working, can't break it more than it was.

This one requires resources (see MESSAGE), but it's ways more stable.

Again, discussed with sthen@@, jasper@@, naddy@@, miod@@
@
text
@d1 4
a4 4
$OpenBSD$
--- base/debug/stack_trace_posix.cc.orig	Fri Jan 21 10:20:15 2011
+++ base/debug/stack_trace_posix.cc	Mon Jan 24 10:42:46 2011
@@@@ -9,6 +9,9 @@@@
@

