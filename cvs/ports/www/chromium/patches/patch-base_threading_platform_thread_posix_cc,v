head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.9
date	2016.10.26.06.22.07;	author robert;	state Exp;
branches;
next	1.8;
commitid	Dt81be1Osjz00Uwx;

1.8
date	2016.05.27.06.28.20;	author robert;	state Exp;
branches;
next	1.7;
commitid	cpiCcJ3vjht5tEkH;

1.7
date	2016.04.16.19.08.45;	author robert;	state Exp;
branches;
next	1.6;
commitid	SE10dvx9aTcZrjRO;

1.6
date	2013.10.29.06.51.34;	author robert;	state dead;
branches;
next	1.5;

1.5
date	2013.09.29.19.04.00;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.14.16.58.19;	author robert;	state dead;
branches;
next	1.3;

1.3
date	2011.10.27.07.59.08;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.19.08.55.26;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.15.11.38.05;	author robert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@update to 54.0.2840.71
@
text
@$OpenBSD: patch-base_threading_platform_thread_posix_cc,v 1.8 2016/05/27 06:28:20 robert Exp $

XXX pledge(2)

--- base/threading/platform_thread_posix.cc.orig.port	Wed Oct 12 21:02:53 2016
+++ base/threading/platform_thread_posix.cc	Wed Oct 19 12:55:56 2016
@@@@ -56,7 +56,7 @@@@ void* ThreadFunc(void* params) {
     if (!thread_params->joinable)
       base::ThreadRestrictions::SetSingletonAllowed(false);
 
-#if !defined(OS_NACL)
+#if !defined(OS_NACL) && !defined(OS_BSD)
     // Threads on linux/android may inherit their priority from the thread
     // where they were created. This explicitly sets the priority of all new
     // threads.
@


1.8
log
@update to 51.0.2704.63
@
text
@d1 1
a1 1
$OpenBSD: patch-base_threading_platform_thread_posix_cc,v 1.7 2016/04/16 19:08:45 robert Exp $
d5 3
a7 3
--- base/threading/platform_thread_posix.cc.orig.port	Wed May 25 04:54:06 2016
+++ base/threading/platform_thread_posix.cc	Thu May 26 08:09:40 2016
@@@@ -55,7 +55,7 @@@@ void* ThreadFunc(void* params) {
@


1.7
log
@update to 50.0.2661.75
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- base/threading/platform_thread_posix.cc.orig.port	Sat Apr 16 14:48:22 2016
+++ base/threading/platform_thread_posix.cc	Sat Apr 16 14:48:26 2016
@@@@ -53,7 +53,7 @@@@ void* ThreadFunc(void* params) {
@


1.6
log
@update to 30.0.1599.101
@
text
@d1 9
a9 6
$OpenBSD: patch-base_threading_platform_thread_posix_cc,v 1.5 2013/09/29 19:04:00 robert Exp $
--- base/threading/platform_thread_posix.cc.orig.port	Sat Sep 28 13:03:29 2013
+++ base/threading/platform_thread_posix.cc	Sat Sep 28 13:58:26 2013
@@@@ -21,8 +21,7 @@@@
 #include <algorithm>
 #endif
d11 5
a15 86
-#if defined(OS_LINUX)
-#include <sys/prctl.h>
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include <sys/resource.h>
 #include <sys/syscall.h>
 #include <sys/time.h>
@@@@ -30,6 +29,25 @@@@
 #endif
 
 namespace base {
+int ThreadNiceValue(ThreadPriority priority) {
+  static const int threadPriorityAudio = -10;
+  static const int threadPriorityBackground = 10;
+  static const int threadPriorityDefault = 0;
+  static const int threadPriorityDisplay = -6;
+  switch (priority) {
+    case kThreadPriority_RealtimeAudio:
+      return threadPriorityAudio;
+    case kThreadPriority_Background:
+      return threadPriorityBackground;
+    case kThreadPriority_Normal:
+      return threadPriorityDefault;
+    case kThreadPriority_Display:
+      return threadPriorityDisplay;
+    default:
+      NOTREACHED() << "Unknown priority.";
+      return 0;
+  }
+}
 
 void InitThreading();
 void InitOnThread();
@@@@ -226,6 +244,53 @@@@ void PlatformThread::Join(PlatformThreadHandle thread_
   // blocking tasks.
   base::ThreadRestrictions::AssertIOAllowed();
   pthread_join(thread_handle.handle_, NULL);
+}
+
+// static
+void PlatformThread::SetName(const char* name) {
+  ThreadIdNameManager::GetInstance()->SetName(CurrentId(), name);
+  tracked_objects::ThreadData::InitializeThreadContext(name);
+}
+
+void InitThreading() {
+}
+
+void InitOnThread() {
+}
+
+void TerminateOnThread() {
+}
+
+// static
+void PlatformThread::SetThreadPriority(PlatformThreadHandle handle,
+                                       ThreadPriority priority) {
+#if !defined(OS_NACL)
+  if (priority == kThreadPriority_RealtimeAudio) {
+    const int kRealTimePrio = 8;
+
+    struct sched_param sched_param;
+    memset(&sched_param, 0, sizeof(sched_param));
+    sched_param.sched_priority = kRealTimePrio;
+
+    if (pthread_setschedparam(pthread_self(), SCHED_RR, &sched_param) == 0) {
+      // Got real time priority, no need to set nice level.
+      return;
+    }
+  }
+
+  // setpriority(2) will set a thread's priority if it is passed a tid as
+  // the 'process identifier', not affecting the rest of the threads in the
+  // process. Setting this priority will only succeed if the user has been
+  // granted permission to adjust nice values on the system.
+  DCHECK_NE(handle.id_, kInvalidThreadId);
+  int kNiceSetting = ThreadNiceValue(priority);
+  if (setpriority(PRIO_PROCESS, handle.id_, kNiceSetting))
+    LOG(ERROR) << "Failed to set nice value of thread to " << kNiceSetting;
+#endif  // !OS_NACL
+}
+
+size_t GetDefaultThreadStackSize(const pthread_attr_t& attributes) {
+  return 0;
 }
 
 }  // namespace base
@


1.5
log
@update to 29.0.1547.76
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@update to 16.0.912.63
@
text
@d1 5
a5 15
$OpenBSD: patch-base_threading_platform_thread_posix_cc,v 1.3 2011/10/27 07:59:08 robert Exp $
--- base/threading/platform_thread_posix.cc.orig	Wed Oct 26 15:13:07 2011
+++ base/threading/platform_thread_posix.cc	Wed Oct 26 15:13:30 2011
@@@@ -136,11 +136,11 @@@@ PlatformThreadId PlatformThread::CurrentId() {
   return syscall(__NR_gettid);
 #elif defined(OS_ANDROID)
   return gettid();
-#elif defined(OS_FREEBSD)
-  // TODO(BSD): find a better thread ID
-  return reinterpret_cast<int64>(pthread_self());
 #elif defined(OS_NACL) || defined(OS_SOLARIS)
   return pthread_self();
+#elif defined(OS_POSIX)
+  // TODO(BSD): find a better thread ID
+  return reinterpret_cast<int64>(pthread_self());
d7 84
d93 1
@


1.3
log
@update to 15.0.874.102.

switch from using the hacked macosx transport dib to the linux one
which uses sysv shms.
make sure you also have a current kernel before using this version
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update to 14.0.835.163
@
text
@d2 3
a4 5
--- base/threading/platform_thread_posix.cc.orig	Fri Sep 16 18:17:49 2011
+++ base/threading/platform_thread_posix.cc	Fri Sep 16 18:18:02 2011
@@@@ -124,7 +124,7 @@@@ PlatformThreadId PlatformThread::CurrentId() {
   return mach_thread_self();
 #elif defined(OS_LINUX)
d6 2
d9 2
a10 3
+#elif defined(OS_FREEBSD) || defined(OS_OPENBSD)
   // TODO(BSD): find a better thread ID
   return reinterpret_cast<int64>(pthread_self());
d12 7
@


1.1
log
@update to 10.0.648.133
@
text
@d2 2
a3 2
--- base/threading/platform_thread_posix.cc.orig	Mon Mar 14 11:02:25 2011
+++ base/threading/platform_thread_posix.cc	Mon Mar 14 11:02:33 2011
d12 1
a12 1
 #elif defined(OS_NACL)
@

