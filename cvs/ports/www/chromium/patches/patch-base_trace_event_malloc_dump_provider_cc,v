head	1.7;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@# @;


1.7
date	2017.06.25.21.53.56;	author robert;	state Exp;
branches;
next	1.6;
commitid	l6xAjqoVop0UE8Em;

1.6
date	2017.04.28.14.21.00;	author robert;	state Exp;
branches;
next	1.5;
commitid	XFDnyB7tGNawHUbl;

1.5
date	2017.03.14.12.18.53;	author robert;	state Exp;
branches;
next	1.4;
commitid	FgEdsLreTqAdn1i5;

1.4
date	2017.01.26.17.08.25;	author robert;	state Exp;
branches;
next	1.3;
commitid	SWz5LewWpip0ZZLw;

1.3
date	2016.12.10.15.35.25;	author robert;	state Exp;
branches;
next	1.2;
commitid	D24Pj03ujnweitOe;

1.2
date	2016.10.26.06.22.07;	author robert;	state Exp;
branches;
next	1.1;
commitid	Dt81be1Osjz00Uwx;

1.1
date	2016.08.17.11.06.50;	author robert;	state Exp;
branches;
next	;
commitid	ho0WBaBoHvorC0o0;


desc
@@


1.7
log
@update to 59.0.3071.109
@
text
@$OpenBSD: patch-base_trace_event_malloc_dump_provider_cc,v 1.6 2017/04/28 14:21:00 robert Exp $
Index: base/trace_event/malloc_dump_provider.cc
--- base/trace_event/malloc_dump_provider.cc.orig
+++ base/trace_event/malloc_dump_provider.cc
@@@@ -20,6 +20,8 @@@@
 
 #if defined(OS_MACOSX)
 #include <malloc/malloc.h>
+#elif defined(OS_BSD)
+#include <stdlib.h>
 #else
 #include <malloc.h>
 #endif
@@@@ -240,6 +242,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
   resident_size = main_heap_info.committed_size;
   allocated_objects_size = main_heap_info.allocated_size;
   allocated_objects_count = main_heap_info.block_count;
+#elif defined(OS_BSD)
+  total_virtual_size = 0;
+  allocated_objects_size = 0;
 #else
   struct mallinfo info = mallinfo();
   DCHECK_GE(info.arena + info.hblkhd, info.uordblks);
@


1.6
log
@update to 58.0.3029.81
@
text
@d1 4
a4 3
$OpenBSD: patch-base_trace_event_malloc_dump_provider_cc,v 1.5 2017/03/14 12:18:53 robert Exp $
--- base/trace_event/malloc_dump_provider.cc.orig.port	Wed Apr 19 21:06:28 2017
+++ base/trace_event/malloc_dump_provider.cc	Thu Apr 27 19:55:58 2017
d14 1
a14 1
@@@@ -234,6 +236,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
@


1.5
log
@update to 57.0.2987.98
@
text
@d1 3
a3 3
$OpenBSD$
--- base/trace_event/malloc_dump_provider.cc.orig.port	Fri Mar 10 08:38:26 2017
+++ base/trace_event/malloc_dump_provider.cc	Fri Mar 10 08:39:07 2017
d13 1
a13 1
@@@@ -187,6 +189,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
@


1.4
log
@update to 56.0.2924.76
@
text
@d1 3
a3 3
$OpenBSD: patch-base_trace_event_malloc_dump_provider_cc,v 1.3 2016/12/10 15:35:25 robert Exp $
--- base/trace_event/malloc_dump_provider.cc.orig.port	Thu Dec 15 00:02:02 2016
+++ base/trace_event/malloc_dump_provider.cc	Tue Jan  3 20:29:54 2017
d13 4
a16 4
@@@@ -248,6 +250,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
   resident_size = all_heap_info.committed_size;
   allocated_objects_size = all_heap_info.allocated_size;
   allocated_objects_count = all_heap_info.block_count;
@


1.3
log
@update to 55.0.2883.75; add lpr support to the system dialog while here
@
text
@d1 3
a3 3
$OpenBSD: patch-base_trace_event_malloc_dump_provider_cc,v 1.2 2016/10/26 06:22:07 robert Exp $
--- base/trace_event/malloc_dump_provider.cc.orig.port	Fri Dec  2 00:02:05 2016
+++ base/trace_event/malloc_dump_provider.cc	Fri Dec  2 17:44:51 2016
d13 1
a13 1
@@@@ -231,6 +233,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
@


1.2
log
@update to 54.0.2840.71
@
text
@d1 4
a4 4
$OpenBSD$
--- base/trace_event/malloc_dump_provider.cc.orig.port	Wed Oct 19 13:24:08 2016
+++ base/trace_event/malloc_dump_provider.cc	Wed Oct 19 13:25:19 2016
@@@@ -19,6 +19,8 @@@@
d13 1
a13 1
@@@@ -224,6 +226,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
@


1.1
log
@Move chromium to the new build system (gn - generate ninja)

This commit moves the chromium port to use gn to generate ninja files
which will hopefully resolve the random build errors. Gyp is dead so
this move has to be done anyway.

Also change the way how we handle openbsd. Let's assume we are running
on linux and only handle !linux cases where needed. This also ensures
that a change on linux will for sure end up in our builds as well.
@
text
@d2 2
a3 2
--- base/trace_event/malloc_dump_provider.cc.orig.port	Sat Aug 13 16:08:01 2016
+++ base/trace_event/malloc_dump_provider.cc	Sat Aug 13 16:22:31 2016
d13 4
a16 4
@@@@ -128,6 +130,9 @@@@ bool MallocDumpProvider::OnMemoryDump(const MemoryDump
   // fixed quantum, so the excess region will not be resident.
   // See crrev.com/1531463004 for detailed explanation.
   resident_size = stats.max_size_in_use;
@

