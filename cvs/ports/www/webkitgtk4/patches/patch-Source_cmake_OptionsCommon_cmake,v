head	1.10;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	ajacoutot_20140930:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2017.05.09.17.31.14;	author espie;	state Exp;
branches;
next	1.9;
commitid	9BVTURq7Y1d2jlCG;

1.9
date	2017.03.29.13.25.53;	author ajacoutot;	state Exp;
branches;
next	1.8;
commitid	LZozuPgYFurOX4C6;

1.8
date	2016.10.28.13.44.25;	author ajacoutot;	state Exp;
branches;
next	1.7;
commitid	dmtpmxFMSxF4CjHO;

1.7
date	2016.08.25.11.38.59;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	LxXkoLj4kgJ217VQ;

1.6
date	2016.04.19.06.05.36;	author ajacoutot;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	rvyFmaCsfwn3SDW7;

1.5
date	2015.09.23.06.06.11;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	fzFz3YYijX0IIcsy;

1.4
date	2015.08.12.06.15.45;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	uODyqaufdFKdiWvu;

1.3
date	2015.05.16.12.04.36;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	X3ne8TCEJo8FYB4c;

1.2
date	2015.03.27.18.38.45;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	5SCjinShjLNIt1iQ;

1.1
date	2014.09.30.08.25.27;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;
commitid	vE55uuVrh0fHHclM;

1.1.1.1
date	2014.09.30.08.25.27;	author ajacoutot;	state Exp;
branches;
next	;
commitid	vE55uuVrh0fHHclM;

1.6.2.1
date	2016.08.25.11.39.14;	author ajacoutot;	state Exp;
branches;
next	;
commitid	SOx1HQCfeljM1Zud;


desc
@@


1.10
log
@replace fragile hack with more sturdy cmake magic. okay aja@@
@
text
@$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.9 2017/03/29 13:25:53 ajacoutot Exp $

Our ar(1) is too old and have not support for `T'.

Undefined references to libc functions.

Index: Source/cmake/OptionsCommon.cmake
--- Source/cmake/OptionsCommon.cmake.orig
+++ Source/cmake/OptionsCommon.cmake
@@@@ -27,10 +27,10 @@@@ option(USE_THIN_ARCHIVES "Produce all static libraries
 if (USE_THIN_ARCHIVES)
     execute_process(COMMAND ${CMAKE_AR} -V OUTPUT_VARIABLE AR_VERSION)
     if ("${AR_VERSION}" MATCHES "^GNU ar")
-        set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> crT <TARGET> <LINK_FLAGS> <OBJECTS>")
-        set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> crT <TARGET> <LINK_FLAGS> <OBJECTS>")
-        set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> rT <TARGET> <LINK_FLAGS> <OBJECTS>")
-        set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> rT <TARGET> <LINK_FLAGS> <OBJECTS>")
+        set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS>")
+        set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS>")
+        set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> r <TARGET> <LINK_FLAGS> <OBJECTS>")
+        set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> r <TARGET> <LINK_FLAGS> <OBJECTS>")
     endif ()
 endif ()
 
@@@@ -183,9 +183,9 @@@@ if (NOT MSVC)
     string(REGEX MATCHALL "-fsanitize=[^ ]*" ENABLED_COMPILER_SANITIZERS ${CMAKE_CXX_FLAGS})
 endif ()
 
-if (UNIX AND NOT APPLE AND NOT ENABLED_COMPILER_SANITIZERS)
-    set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined ${CMAKE_SHARED_LINKER_FLAGS}")
-endif ()
+#if (UNIX AND NOT APPLE AND NOT ENABLED_COMPILER_SANITIZERS)
+#    set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined ${CMAKE_SHARED_LINKER_FLAGS}")
+#endif ()
 
 if (USE_ARM_LLVM_DISASSEMBLER)
     find_package(LLVM REQUIRED)
@@@@ -221,13 +221,13 @@@@ if (NOT APPLE)
 endif ()
 
 # Macros for determining HAVE values.
-include(CheckIncludeFile)
+include(CheckIncludeFiles)
 include(CheckFunctionExists)
 include(CheckSymbolExists)
 include(CheckStructHasMember)
 
 macro(_HAVE_CHECK_INCLUDE _variable _header)
-    check_include_file(${_header} ${_variable}_value)
+    check_include_files("${_header}" ${_variable}_value)
     SET_AND_EXPOSE_TO_BUILD(${_variable} ${_variable}_value)
 endmacro()
 
@@@@ -254,7 +254,7 @@@@ _HAVE_CHECK_INCLUDE(HAVE_FEATURES_H features.h)
 _HAVE_CHECK_INCLUDE(HAVE_ERRNO_H errno.h)
 _HAVE_CHECK_INCLUDE(HAVE_LANGINFO_H langinfo.h)
 _HAVE_CHECK_INCLUDE(HAVE_MMAP sys/mman.h)
-_HAVE_CHECK_INCLUDE(HAVE_PTHREAD_NP_H pthread_np.h)
+_HAVE_CHECK_INCLUDE(HAVE_PTHREAD_NP_H "pthread.h;pthread_np.h")
 _HAVE_CHECK_INCLUDE(HAVE_STRINGS_H strings.h)
 _HAVE_CHECK_INCLUDE(HAVE_SYS_PARAM_H sys/param.h)
 _HAVE_CHECK_INCLUDE(HAVE_SYS_TIME_H sys/time.h)
@


1.9
log
@Update to WebKitGTK4 2.16.0. This will allow us to properly keep it updated
during the stable cycle for once \o/
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.8 2016/10/28 13:44:25 ajacoutot Exp $
d7 3
a9 2
--- Source/cmake/OptionsCommon.cmake.orig	Mon Feb 27 08:11:15 2017
+++ Source/cmake/OptionsCommon.cmake	Sun Mar 26 13:56:28 2017
d38 25
@


1.8
log
@Update to webkitgtk4-2.14.1.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.7 2016/08/25 11:38:59 ajacoutot Exp $
d7 15
a21 14
--- Source/cmake/OptionsCommon.cmake.orig	Mon Sep 19 14:18:06 2016
+++ Source/cmake/OptionsCommon.cmake	Wed Oct 26 14:42:08 2016
@@@@ -17,10 +17,10 @@@@ endif ()
 
 execute_process(COMMAND ${CMAKE_AR} -V OUTPUT_VARIABLE AR_VERSION)
 if ("${AR_VERSION}" MATCHES "^GNU ar")
-    set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> crT <TARGET> <LINK_FLAGS> <OBJECTS>")
-    set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> crT <TARGET> <LINK_FLAGS> <OBJECTS>")
-    set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> rT <TARGET> <LINK_FLAGS> <OBJECTS>")
-    set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> rT <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> cr <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> r <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> r <TARGET> <LINK_FLAGS> <OBJECTS>")
d24 1
a24 2
 set_property(GLOBAL PROPERTY USE_FOLDERS ON)
@@@@ -167,9 +167,9 @@@@ if (NOT MSVC)
@


1.7
log
@Update to webkitgtk4-2.12.4.

WebKitGTK+ Security Advisory WSA-2016-0005:
CVE-2016-4583, CVE-2016-4585, CVE-2016-4586, CVE-2016-4587, CVE-2016-4588,
CVE-2016-4589, CVE-2016-4590, CVE-2016-4591, CVE-2016-4592, CVE-2016-4622,
CVE-2016-4623, CVE-2016-4624, CVE-2016-4651
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.6 2016/04/19 06:05:36 ajacoutot Exp $
d7 2
a8 2
--- Source/cmake/OptionsCommon.cmake.orig	Tue Aug 23 14:29:18 2016
+++ Source/cmake/OptionsCommon.cmake	Thu Aug 25 08:10:31 2016
d24 1
a24 1
@@@@ -139,9 +139,9 @@@@ if (NOT MSVC)
d35 2
a36 2
 # Enable the usage of OpenMP.
 #  - At this moment, OpenMP is only used as an alternative implementation
@


1.6
log
@Update to webkitgtk4-2.12.1.
With help from robert@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.5 2015/09/23 06:06:11 ajacoutot Exp $
d7 2
a8 2
--- Source/cmake/OptionsCommon.cmake.orig	Thu Apr 14 10:45:24 2016
+++ Source/cmake/OptionsCommon.cmake	Sat Apr 16 13:02:54 2016
d24 1
a24 1
@@@@ -120,9 +120,9 @@@@ if (NOT MSVC)
@


1.6.2.1
log
@Update to webkitgtk4-2.12.4.

WebKitGTK+ Security Advisory WSA-2016-0005:
CVE-2016-4583, CVE-2016-4585, CVE-2016-4586, CVE-2016-4587, CVE-2016-4588,
CVE-2016-4589, CVE-2016-4590, CVE-2016-4591, CVE-2016-4592, CVE-2016-4622,
CVE-2016-4623, CVE-2016-4624, CVE-2016-4651
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.6 2016/04/19 06:05:36 ajacoutot Exp $
d7 2
a8 2
--- Source/cmake/OptionsCommon.cmake.orig	Tue Aug 23 14:29:18 2016
+++ Source/cmake/OptionsCommon.cmake	Thu Aug 25 08:10:31 2016
d24 1
a24 1
@@@@ -139,9 +139,9 @@@@ if (NOT MSVC)
@


1.5
log
@Update to webkitgtk4-2.10.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.4 2015/08/12 06:15:45 ajacoutot Exp $
d7 2
a8 2
--- Source/cmake/OptionsCommon.cmake.orig	Mon Sep 21 09:29:46 2015
+++ Source/cmake/OptionsCommon.cmake	Mon Sep 21 17:13:00 2015
d24 1
a24 1
@@@@ -109,9 +109,9 @@@@ if (NOT MSVC)
d35 2
a36 2
 # GTK uses the GNU installation directories as defaults.
 if (NOT PORT STREQUAL "GTK")
@


1.4
log
@Update to webkitgtk4-2.8.5.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.3 2015/05/16 12:04:36 ajacoutot Exp $
d7 2
a8 2
--- Source/cmake/OptionsCommon.cmake.orig	Thu Aug  6 10:21:28 2015
+++ Source/cmake/OptionsCommon.cmake	Fri Aug  7 09:19:35 2015
d13 8
a20 8
-    set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> cruT <TARGET> <LINK_FLAGS> <OBJECTS>")
-    set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> cruT <TARGET> <LINK_FLAGS> <OBJECTS>")
-    set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> ruT <TARGET> <LINK_FLAGS> <OBJECTS>")
-    set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> ruT <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_AR> cru <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_C_ARCHIVE_CREATE "<CMAKE_AR> cru <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_CXX_ARCHIVE_APPEND "<CMAKE_AR> ru <TARGET> <LINK_FLAGS> <OBJECTS>")
+    set(CMAKE_C_ARCHIVE_APPEND "<CMAKE_AR> ru <TARGET> <LINK_FLAGS> <OBJECTS>")
d24 2
a25 2
@@@@ -98,9 +98,9 @@@@ if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND "${L
     set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "-Wl,--no-keep-memory ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
d28 1
a28 1
-if (UNIX AND NOT APPLE)
d31 1
a31 1
+#if (UNIX AND NOT APPLE)
@


1.3
log
@Update to webkitgtk4-2.8.3.
@
text
@d1 3
a3 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.2 2015/03/27 18:38:45 ajacoutot Exp $
d7 18
a24 3
--- Source/cmake/OptionsCommon.cmake.orig	Fri May 15 10:41:50 2015
+++ Source/cmake/OptionsCommon.cmake	Sat May 16 09:17:31 2015
@@@@ -97,9 +97,9 @@@@ if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND "${L
@


1.2
log
@Update to webkitgtk4-2.8.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmake_OptionsCommon_cmake,v 1.1.1.1 2014/09/30 08:25:27 ajacoutot Exp $
d5 3
a7 3
--- Source/cmake/OptionsCommon.cmake.orig	Wed Mar  4 15:25:17 2015
+++ Source/cmake/OptionsCommon.cmake	Fri Mar 27 10:17:27 2015
@@@@ -95,9 +95,9 @@@@ if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND "${L
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- Source/cmake/OptionsCommon.cmake.orig	Sun Sep 28 12:19:37 2014
+++ Source/cmake/OptionsCommon.cmake	Sun Sep 28 12:20:11 2014
@@@@ -54,9 +54,9 @@@@ if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND "${L
@


1.1.1.1
log
@Import webkitgtk4-2.6.0.

WebKitGTK+ is the GNOME platform port of the WebKit rendering engine.
Offering WebKit's full functionality through a set of GObject-based
APIs, it is suitable for projects requiring any kind of web integration,
from hybrid HTML/CSS applications to full-fledged web browsers.

Still somewhat WIP, nothing depends on it yet.
ok landry@@
@
text
@@
