head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.03.29.13.25.52;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	LZozuPgYFurOX4C6;

1.2
date	2016.10.28.13.44.25;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	dmtpmxFMSxF4CjHO;

1.1
date	2016.04.19.06.05.36;	author ajacoutot;	state Exp;
branches;
next	;
commitid	rvyFmaCsfwn3SDW7;


desc
@@


1.3
log
@Update to WebKitGTK4 2.16.0. This will allow us to properly keep it updated
during the stable cycle for once \o/
@
text
@$OpenBSD: patch-Source_JavaScriptCore_heap_MachineStackMarker_cpp,v 1.2 2016/10/28 13:44:25 ajacoutot Exp $

XXX no mcontext_t on OpenBSD

--- Source/JavaScriptCore/heap/MachineStackMarker.cpp.orig	Mon Feb 27 09:03:42 2017
+++ Source/JavaScriptCore/heap/MachineStackMarker.cpp	Sun Mar 26 13:55:13 2017
@@@@ -87,7 +87,9 @@@@ static void pthreadSignalHandlerSuspendResume(int, sig
     }
 
     ucontext_t* userContext = static_cast<ucontext_t*>(ucontext);
-#if CPU(PPC)
+#if OS(OPENBSD)
+    thread->suspendedMachineContext = *userContext;
+#elif CPU(PPC)
     thread->suspendedMachineContext = *userContext->uc_mcontext.uc_regs;
 #else
     thread->suspendedMachineContext = userContext->uc_mcontext;
@@@@ -563,6 +565,24 @@@@ void* MachineThreads::Thread::Registers::stackPointer(
 #error Unknown Architecture
 #endif
 
+#elif OS(OPENBSD) && ENABLE(JIT)
+
+#if CPU(X86)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_esp);
+#elif CPU(X86_64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_rsp);
+#elif CPU(ARM)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.__gregs[_REG_SP]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_gpregs.gp_sp);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_regs[29]);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_rsp);
+#else
+#error Unknown Architecture
+#endif
+
 #elif defined(__GLIBC__) && ENABLE(JIT)
 
 #if CPU(X86)
@@@@ -662,6 +682,24 @@@@ void* MachineThreads::Thread::Registers::framePointer(
 #error Unknown Architecture
 #endif
 
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_ebp);
+#elif CPU(X86_64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_rbp);
+#elif CPU(ARM)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.__gregs[_REG_FP]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_gpregs.gp_x[29]);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_regs[30]);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_rbp);
+#else
+#error Unknown Architecture
+#endif
+
 #elif defined(__GLIBC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
@@@@ -744,6 +782,24 @@@@ void* MachineThreads::Thread::Registers::instructionPo
 #error Unknown Architecture
 #endif
 
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_eip);
+#elif CPU(X86_64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_rip);
+#elif CPU(ARM)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.__gregs[_REG_PC]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_gpregs.gp_elr);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_pc);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_rip);
+#else
+#error Unknown Architecture
+#endif
+
 #elif defined(__GLIBC__)
 
 // The following sequence depends on glibc's sys/ucontext.h.
@@@@ -831,6 +887,24 @@@@ void* MachineThreads::Thread::Registers::llintPC() con
     return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_gpregs.gp_x[4]);
 #elif CPU(MIPS)
     return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_regs[12]);
+#else
+#error Unknown Architecture
+#endif
+
+#elif OS(OPENBSD)
+
+#if CPU(X86)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_esi);
+#elif CPU(X86_64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.sc_r8);
+#elif CPU(ARM)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.__gregs[_REG_R8]);
+#elif CPU(ARM64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_gpregs.gp_x[4]);
+#elif CPU(MIPS)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_regs[12]);
+#elif CPU(SPARC64)
+    return reinterpret_cast<void*>((uintptr_t) regs.machineContext.mc_r8);
 #else
 #error Unknown Architecture
 #endif
@


1.2
log
@Update to webkitgtk4-2.14.1.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_JavaScriptCore_heap_MachineStackMarker_cpp,v 1.1 2016/04/19 06:05:36 ajacoutot Exp $
d5 3
a7 3
--- Source/JavaScriptCore/heap/MachineStackMarker.cpp.orig	Fri Sep 16 11:56:47 2016
+++ Source/JavaScriptCore/heap/MachineStackMarker.cpp	Wed Oct 26 14:42:08 2016
@@@@ -86,7 +86,9 @@@@ static void pthreadSignalHandlerSuspendResume(int, sig
d18 1
a18 1
@@@@ -549,6 +551,24 @@@@ void* MachineThreads::Thread::Registers::stackPointer(
d43 1
a43 1
@@@@ -648,6 +668,24 @@@@ void* MachineThreads::Thread::Registers::framePointer(
d68 1
a68 1
@@@@ -730,6 +768,24 @@@@ void* MachineThreads::Thread::Registers::instructionPo
d93 1
a93 1
@@@@ -817,6 +873,24 @@@@ void* MachineThreads::Thread::Registers::llintPC() con
@


1.1
log
@Update to webkitgtk4-2.12.1.
With help from robert@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 2
a6 2
--- Source/JavaScriptCore/heap/MachineStackMarker.cpp.orig	Wed Apr 13 18:00:00 2016
+++ Source/JavaScriptCore/heap/MachineStackMarker.cpp	Sun Apr 17 10:20:58 2016
d18 1
a18 1
@@@@ -566,6 +568,24 @@@@ void* MachineThreads::Thread::Registers::stackPointer(
d43 1
a43 1
@@@@ -665,6 +685,24 @@@@ void* MachineThreads::Thread::Registers::framePointer(
d68 1
a68 1
@@@@ -747,6 +785,24 @@@@ void* MachineThreads::Thread::Registers::instructionPo
d93 1
a93 1
@@@@ -834,6 +890,24 @@@@ void* MachineThreads::Thread::Registers::llintPC() con
@

