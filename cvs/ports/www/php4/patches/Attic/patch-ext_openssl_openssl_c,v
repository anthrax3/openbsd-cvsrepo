head	1.3;
access;
symbols
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2001.05.10.22.58.34;	author avsm;	state dead;
branches;
next	1.2;

1.2
date	2001.01.11.08.10.41;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.07.21.08.12;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Upgrade to PHP-4.0.5

- update MASTER_SITES to account for some wierdness on php.net
- all the old patches have been merged into the source tree now
- add a minor patch to improve the randomness of php temporary files

Upgrade is recommended.  Contains a vast array of bugfixes over
previous PHP4 releases (read the NEWS file)
@
text
@$OpenBSD: patch-ext_openssl_openssl_c,v 1.2 2001/01/11 08:10:41 avsm Exp $
--- ext/openssl/openssl.c.orig	Fri Nov 17 19:49:12 2000
+++ ext/openssl/openssl.c	Sun Jan  7 18:33:35 2001
@@@@ -403,6 +403,7 @@@@ PHP_FUNCTION(openssl_seal)
 		i++;
 	}
 
+#if OPENSSL_VERSION_NUMBER >= 0x0090600fL
 	if (!EVP_EncryptInit(&ctx,EVP_rc4(),NULL,NULL)) {
 		for (i=0; i<nkeys; i++) {
 			efree(eks[i]);
@@@@ -412,6 +413,9 @@@@ PHP_FUNCTION(openssl_seal)
 		efree(pkeys);
 		RETURN_FALSE;
 	}
+#else
+	EVP_EncryptInit(&ctx,EVP_rc4(),NULL,NULL);
+#endif
 
 #if 0
 	/* Need this if allow ciphers that require initialization vector */
@@@@ -443,9 +447,12 @@@@ PHP_FUNCTION(openssl_seal)
 		RETURN_FALSE;
 	}
 
-	if (!EVP_SealInit(&ctx, EVP_rc4(), eks, eksl, NULL, pkeys, nkeys) ||
-	    !EVP_SealUpdate(&ctx, buf, &len1, Z_STRVAL_PP(data),
-			    Z_STRLEN_PP(data))) {
+	if (!EVP_SealInit(&ctx, EVP_rc4(), eks, eksl, NULL, pkeys, nkeys)
+#if OPENSSL_VERSION_NUMBER >= 0x0090600fL
+	    || !EVP_SealUpdate(&ctx, buf, &len1, Z_STRVAL_PP(data),
+			       Z_STRLEN_PP(data))
+#endif
+	    ) {
 		efree(buf);
 		for (i=0; i<nkeys; i++) {
 			efree(eks[i]);
@@@@ -456,6 +463,9 @@@@ PHP_FUNCTION(openssl_seal)
 		RETURN_FALSE;
 	}
 
+#if OPENSSL_VERSION_NUMBER < 0x0090600fL
+	EVP_SealUpdate(&ctx, buf, &len1, Z_STRVAL_PP(data), Z_STRLEN_PP(data));
+#endif
 	EVP_SealFinal(&ctx, buf + len1, &len2);
 
 	efree(pkeys);
@@@@ -536,12 +546,23 @@@@ PHP_FUNCTION(openssl_open)
 		RETURN_FALSE;
 	}
 
-	if (!EVP_OpenInit(&ctx, EVP_rc4(), Z_STRVAL_PP(ekey),
-			  Z_STRLEN_PP(ekey), NULL, pkey) ||
-	    !EVP_OpenUpdate(&ctx, buf, &len1, Z_STRVAL_PP(data),
-			    Z_STRLEN_PP(data)) ||
-	    !EVP_OpenFinal(&ctx, buf + len1, &len2) ||
-	    (len1 + len2 == 0)) {
+	if (EVP_OpenInit(&ctx, EVP_rc4(), Z_STRVAL_PP(ekey),
+			  Z_STRLEN_PP(ekey), NULL, pkey)
+#if OPENSSL_VERSION_NUMBER >= 0x0090600fL
+	    && EVP_OpenUpdate(&ctx, buf, &len1, Z_STRVAL_PP(data),
+			       Z_STRLEN_PP(data))
+#endif
+	    ) {
+#if OPENSSL_VERSION_NUMBER < 0x0090600fL
+		EVP_OpenUpdate(&ctx, buf, &len1, Z_STRVAL_PP(data),
+			       Z_STRLEN_PP(data));
+#endif
+		if (!EVP_OpenFinal(&ctx, buf + len1, &len2) ||
+		    (len1 + len2 == 0)) {
+			efree(buf);
+			RETURN_FALSE;
+		}
+	} else {
 		efree(buf);
 		RETURN_FALSE;
 	}
@


1.2
log
@fix patch - rcs id caused it to not apply cleanly
@
text
@d1 1
a1 1
$OpenBSD: patch-ext_openssl_openssl_c,v 1.1 2001/01/07 21:08:12 avsm Exp $
@


1.1
log
@Add a couple of patches from venaas@@php.net to allow PHP-4.0.4 to work
with OpenSSL 0.9.5a, instead of requiring only OpenSSL 0.9.6
These patches detect the revelant version and use the additional return
values in 0.9.6 only if present.

This also unbreaks the SNMP flavor on 2.8-stable, which requires SSL
support, since our UCD-SNMP daemon has OpenSSL compiled into it
(wierd, but thats how the PHP snmp-config.m4 works)

- Add OpenSSL patches
- Add note crypt.c patch that its now in 4.0.5-dev and can be removed soon
- Add --with-openssl to the standard set of configure options
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
a3 9
@@@@ -16,7 +16,7 @@@@
    +----------------------------------------------------------------------+
  */
  
-/* $Id: openssl.c,v 1.5 2000/11/17 19:49:12 venaas Exp $ */
+/* $Id: openssl.c,v 1.6 2001/01/07 11:36:14 venaas Exp $ */
 
 #include "php.h"
 #include "php_openssl.h"
@

