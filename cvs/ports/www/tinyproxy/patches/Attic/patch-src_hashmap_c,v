head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2017.02.18.17.21.51;	author jca;	state dead;
branches;
next	1.1;
commitid	smivmssHwPzhDqIx;

1.1
date	2012.08.20.09.51.20;	author jasper;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.08.20.17.20.58;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to tinyproxy-1.8.4

Includes the patches we have for CVE-2012-3505, and adds support for
listening on multiple addresses (0.0.0.0 and :: by default).

maintainer timeout
@
text
@$OpenBSD: patch-src_hashmap_c,v 1.1 2012/08/20 09:51:20 jasper Exp $

Security fix for CVE-2012-3505, tinyproxy: multiple headers hashmap DoS
Patch from https://bugzilla.redhat.com/show_bug.cgi?id=849368
CVE-2012-3505-tinyproxy-randomized-hashmaps.patch

--- src/hashmap.c.orig	Mon Jan 25 19:24:01 2010
+++ src/hashmap.c	Mon Aug 20 11:47:33 2012
@@@@ -25,6 +25,8 @@@@
  * don't try to free the data, or realloc the memory. :)
  */
 
+#include <stdlib.h>
+
 #include "main.h"
 
 #include "hashmap.h"
@@@@ -50,6 +52,7 @@@@ struct hashbucket_s {
 };
 
 struct hashmap_s {
+        uint32_t seed;
         unsigned int size;
         hashmap_iter end_iterator;
 
@@@@ -65,7 +68,7 @@@@ struct hashmap_s {
  *
  * If any of the arguments are invalid a negative number is returned.
  */
-static int hashfunc (const char *key, unsigned int size)
+static int hashfunc (const char *key, unsigned int size, uint32_t seed)
 {
         uint32_t hash;
 
@@@@ -74,7 +77,7 @@@@ static int hashfunc (const char *key, unsigned int siz
         if (size == 0)
                 return -ERANGE;
 
-        for (hash = tolower (*key++); *key != '\0'; key++) {
+        for (hash = seed; *key != '\0'; key++) {
                 uint32_t bit = (hash & 1) ? (1 << (sizeof (uint32_t) - 1)) : 0;
 
                 hash >>= 1;
@@@@ -104,6 +107,7 @@@@ hashmap_t hashmap_create (unsigned int nbuckets)
         if (!ptr)
                 return NULL;
 
+	ptr->seed = (uint32_t)rand();
         ptr->size = nbuckets;
         ptr->buckets = (struct hashbucket_s *) safecalloc (nbuckets,
                                                            sizeof (struct
@@@@ -201,7 +205,7 @@@@ hashmap_insert (hashmap_t map, const char *key, const 
         if (!data || len < 1)
                 return -ERANGE;
 
-        hash = hashfunc (key, map->size);
+        hash = hashfunc (key, map->size, map->seed);
         if (hash < 0)
                 return hash;
 
@@@@ -382,7 +386,7 @@@@ ssize_t hashmap_search (hashmap_t map, const char *key
         if (map == NULL || key == NULL)
                 return -EINVAL;
 
-        hash = hashfunc (key, map->size);
+        hash = hashfunc (key, map->size, map->seed);
         if (hash < 0)
                 return hash;
 
@@@@ -416,7 +420,7 @@@@ ssize_t hashmap_entry_by_key (hashmap_t map, const cha
         if (!map || !key || !data)
                 return -EINVAL;
 
-        hash = hashfunc (key, map->size);
+        hash = hashfunc (key, map->size, map->seed);
         if (hash < 0)
                 return hash;
 
@@@@ -451,7 +455,7 @@@@ ssize_t hashmap_remove (hashmap_t map, const char *key
         if (map == NULL || key == NULL)
                 return -EINVAL;
 
-        hash = hashfunc (key, map->size);
+        hash = hashfunc (key, map->size, map->seed);
         if (hash < 0)
                 return hash;
 
@


1.1
log
@Security fix for CVE-2012-3505, tinyproxy: multiple headers hashmap DoS
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@Security fix for CVE-2012-3505, tinyproxy: multiple headers hashmap DoS
@
text
@@

