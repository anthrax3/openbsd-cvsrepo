head	1.3;
access;
symbols
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.09.07.19.27.32;	author sthen;	state dead;
branches;
next	1.2;
commitid	Ui1yXTxrLeLeH8mY;

1.2
date	2014.09.07.09.11.40;	author sthen;	state Exp;
branches;
next	1.1;
commitid	TugoHzWQ0ERZkbjr;

1.1
date	2014.05.25.18.19.32;	author rpe;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove 0-byte file; pointed out by frantisek holop
@
text
@@


1.2
log
@update to py-jinja2 2.7.3, from frantisek holop

the only change is a fix for the insecure tempdir creation bug that we
already had a different fix for in patches
@
text
@@


1.1
log
@- update py-jinja2 to version 2.7.2
- backport fix for CVE-2014-0012

from frantisek holop (MAINTAINER)
OK sthen@@
@
text
@a0 50
$OpenBSD$

Fix for CVE-2014-0012 (Insecure temp folder creation)
https://github.com/mitsuhiko/jinja2/pull/292/commits

--- jinja2/bccache.py.orig	Fri Jan 10 11:42:03 2014
+++ jinja2/bccache.py	Sun May 25 16:34:26 2014
@@@@ -15,9 +15,7 @@@@
     :license: BSD.
 """
 from os import path, listdir
-import os
 import sys
-import errno
 import marshal
 import tempfile
 import fnmatch
@@@@ -206,31 +204,9 @@@@ class FileSystemBytecodeCache(BytecodeCache):
 
     def __init__(self, directory=None, pattern='__jinja2_%s.cache'):
         if directory is None:
-            directory = self._get_default_cache_dir()
+            directory = tempfile.mkdtemp(prefix="jinja2-cache-")
         self.directory = directory
         self.pattern = pattern
-
-    def _get_default_cache_dir(self):
-        tmpdir = tempfile.gettempdir()
-
-        # On windows the temporary directory is used specific unless
-        # explicitly forced otherwise.  We can just use that.
-        if os.name == 'n':
-            return tmpdir
-        if not hasattr(os, 'getuid'):
-            raise RuntimeError('Cannot determine safe temp directory.  You '
-                               'need to explicitly provide one.')
-
-        dirname = '_jinja2-cache-%d' % os.getuid()
-        actual_dir = os.path.join(tmpdir, dirname)
-        try:
-            # 448 == 0700
-            os.mkdir(actual_dir, 448)
-        except OSError as e:
-            if e.errno != errno.EEXIST:
-                raise
-
-        return actual_dir
 
     def _get_cache_filename(self, bucket):
         return path.join(self.directory, self.pattern % bucket.key)
@

