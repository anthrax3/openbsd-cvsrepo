head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.10
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.6
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.8
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.04.28.20.52.13;	author edd;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update to pt-tornado-3.2.

Required for upcoming ipython2.

Input from, and OK, rpointel@@, thanks.
@
text
@$OpenBSD$

Patch broken subprocess tests.

--- tornado/test/process_test.py.orig	Sun Apr 27 15:13:04 2014
+++ tornado/test/process_test.py	Sun Apr 27 15:17:06 2014
@@@@ -149,7 +149,7 @@@@ class SubprocessTest(AsyncTestCase):
                              stdin=Subprocess.STREAM,
                              stdout=Subprocess.STREAM, stderr=subprocess.STDOUT,
                              io_loop=self.io_loop)
-        self.addCleanup(lambda: os.kill(subproc.pid, signal.SIGTERM))
+        #self.addCleanup(lambda: os.kill(subproc.pid, signal.SIGTERM))
         subproc.stdout.read_until(b'>>> ', self.stop)
         self.wait()
         subproc.stdin.write(b"print('hello')\n")
@@@@ -159,7 +159,7 @@@@ class SubprocessTest(AsyncTestCase):
 
         subproc.stdout.read_until(b">>> ", self.stop)
         self.wait()
-        subproc.stdin.write(b"raise SystemExit\n")
+        subproc.stdin.write(b"raise SystemExit\n") # subproc dies itself here
         subproc.stdout.read_until_close(self.stop)
         data = self.wait()
         self.assertEqual(data, b"")
@@@@ -170,10 +170,10 @@@@ class SubprocessTest(AsyncTestCase):
                              stdin=Subprocess.STREAM,
                              stdout=Subprocess.STREAM, stderr=subprocess.STDOUT,
                              io_loop=self.io_loop)
-        self.addCleanup(lambda: os.kill(subproc.pid, signal.SIGTERM))
+        #self.addCleanup(lambda: os.kill(subproc.pid, signal.SIGTERM))
         subproc.stdout.read_until(b'>>> ', self.stop)
         self.wait()
-        subproc.stdin.close()
+        subproc.stdin.close() # subproc dies on its own after this line
         subproc.stdout.read_until_close(self.stop)
         data = self.wait()
         self.assertEqual(data, b"\n")
@
