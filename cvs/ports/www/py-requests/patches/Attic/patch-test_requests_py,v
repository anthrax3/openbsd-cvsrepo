head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jasper_20111410:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.12.01.13.41.56;	author chl;	state dead;
branches;
next	1.1;

1.1
date	2011.10.14.16.32.54;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.10.14.16.32.54;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@forgot to remove some patch files in the previous commit

ok jasper@@
@
text
@$OpenBSD: patch-test_requests_py,v 1.1 2011/10/14 16:32:54 jasper Exp $
--- test_requests.py.orig	Sun Oct  9 04:11:48 2011
+++ test_requests.py	Thu Oct 13 21:33:02 2011
@@@@ -17,7 +17,7 @@@@
 
 
 HTTPBIN_URL = 'http://httpbin.org/'
-HTTPSBIN_URL = 'https://httpbin.ep.io/'
+HTTPSBIN_URL = 'https://httpbin.org/'
 
 # HTTPBIN_URL = 'http://staging.httpbin.org/'
 # HTTPSBIN_URL = 'https://httpbin-staging.ep.io/'
@@@@ -112,21 +112,25 @@@@
         self.assertEqual(r.status_code, 200)
 
 
+    @@unittest.skip("skipping: server problem")
     def test_HTTP_200_OK_PUT(self):
         r = requests.put(httpbin('put'))
         self.assertEqual(r.status_code, 200)
 
 
+    @@unittest.skip("skipping: server problem")
     def test_HTTPS_200_OK_PUT(self):
         r = requests.put(httpsbin('put'))
         self.assertEqual(r.status_code, 200)
 
 
+    @@unittest.skip("skipping: server problem")
     def test_HTTP_200_OK_PATCH(self):
         r = requests.patch(httpbin('patch'))
         self.assertEqual(r.status_code, 200)
 
 
+    @@unittest.skip("skipping: server problem")
     def test_HTTPS_200_OK_PATCH(self):
         r = requests.patch(httpsbin('patch'))
         self.assertEqual(r.status_code, 200)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import py-requests 0.6.2

Requests is an ISC Licensed HTTP library, written in Python, for human
beings.
Requests allow you to send HEAD, GET, POST, PUT, PATCH, and DELETE HTTP
requests. You can add headers, form data, multipart files, and
parameters with simple Python dictionaries, and access the response data
in the same way. It's powered by urllib2, but it does all the hard work
and crazy hacks for you.

fixed regress tests and ok rpointel@@
@
text
@@
