head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.22
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.20
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.18
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	jasper_20091102:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.11.02.10.10.21;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.11.02.10.10.21;	author jasper;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@This module combines WWW::Mechanize and HTML::TreeBuilder. Why? Because
I've seen too much code like the following:

 like($mech->content, qr{<p>some text</p>}, "Found the right tag");

Which is just all flavours of wrong - its akin to processing XML with
regexps.  Instead, do it like the following:

 ok($mech->look_down(_tag => 'p', sub { $_[0]->as_trimmed_text eq 'some
 text' })

The anon-sub there is a bit icky, but this means that anyone should
happen to add attributes to the <p> tag (such as an id or a class) it
will still work and find the right tag.
@


1.1.1.1
log
@import p5-WWW-Mechanize-TreeBuilder 1.10001

This module combines WWW::Mechanize and HTML::TreeBuilder.

from from Stephan A. Rickauer (MAINTAINER), with tweaks by me

@
text
@@
