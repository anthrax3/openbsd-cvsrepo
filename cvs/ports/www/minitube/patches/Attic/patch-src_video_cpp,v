head	1.4;
access;
symbols
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.05.21.05.52.10;	author dcoppa;	state dead;
branches;
next	1.3;
commitid	Yo1FdclWgibV57vy;

1.3
date	2014.12.17.10.02.08;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	2N7jGpfDIBAcv85y;

1.2
date	2014.03.12.08.29.43;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2014.02.07.16.07.12;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
Update to minitube-2.4

Minitube now uses the YouTube Data API v3: follow the README on how
to get an API key.

Help and OK sthen@@
@
text
@$OpenBSD: patch-src_video_cpp,v 1.3 2014/12/17 10:02:08 dcoppa Exp $

commit 6ef6d1752c7fac4f1db7ddc283e934acc8a4556b
Author: Flavio <flavio.tordini@@gmail.com>
Date:   Thu Nov 13 13:22:36 2014 +0100

Fix VEVO videos

--- src/video.cpp.orig	Thu Oct 23 05:47:15 2014
+++ src/video.cpp	Wed Dec 17 03:42:47 2014
@@@@ -35,10 +35,10 @@@@ static const QString jsNameChars = "a-zA-Z0-9\\$_";
 
 Video::Video() : m_duration(0),
     m_viewCount(-1),
+    m_license(LicenseYouTube),
     definitionCode(0),
     elIndex(0),
     ageGate(false),
-    m_license(LicenseYouTube),
     loadingStreamUrl(false),
     loadingThumbnail(false)
 { }
@@@@ -67,11 +67,8 @@@@ void Video::setWebpage(QUrl webpage) {
     m_webpage = webpage;
 
     // Get Video ID
-    // youtube-dl line 428
-    // QRegExp re("^((?:http://)?(?:\\w+\\.)?youtube\\.com/(?:(?:v/)|(?:(?:watch(?:\\.php)?)?\\?(?:.+&)?v=)))?([0-9A-Za-z_-]+)(?(1).+)?$");
-    QRegExp re("^https?://www\\.youtube\\.com/watch\\?v=([0-9A-Za-z_-]+).*");
-    bool match = re.exactMatch(m_webpage.toString());
-    if (!match) {
+    QRegExp re(JsFunctions::instance()->videoIdRE());
+    if (re.indexIn(m_webpage.toString()) == -1) {
         qWarning() << QString("Cannot get video id for %1").arg(m_webpage.toString());
         // emit errorStreamUrl(QString("Cannot get video id for %1").arg(m_webpage.toString()));
         // loadingStreamUrl = false;
@@@@ -163,29 +160,26 @@@@ void  Video::gotVideoInfo(QByteArray data) {
     // qDebug() << "videoInfo" << videoInfo;
 
     // get video token
-    QRegExp re = QRegExp("^.*&token=([^&]+).*$");
-    bool match = re.exactMatch(videoInfo);
-    // handle regexp failure
-    if (!match) {
-        // qDebug() << "Cannot get token. Trying next el param";
+    QRegExp videoTokeRE(JsFunctions::instance()->videoTokenRE());
+    if (videoTokeRE.indexIn(videoInfo) == -1) {
+        qWarning() << "Cannot get token. Trying next el param" << videoInfo << videoTokeRE.pattern();
         // Don't panic! We're gonna try another magic "el" param
         elIndex++;
         getVideoInfo();
         return;
     }
 
-    QString videoToken = re.cap(1);
+    QString videoToken = videoTokeRE.cap(1);
+    // qWarning() << "got token" << videoToken;
     while (videoToken.contains('%'))
         videoToken = QByteArray::fromPercentEncoding(videoToken.toLatin1());
     // qDebug() << "videoToken" << videoToken;
     this->videoToken = videoToken;
 
     // get fmt_url_map
-    re = QRegExp("^.*&url_encoded_fmt_stream_map=([^&]+).*$");
-    match = re.exactMatch(videoInfo);
-    // handle regexp failure
-    if (!match) {
-        // qDebug() << "Cannot get urlMap. Trying next el param";
+    QRegExp fmtMapRE(JsFunctions::instance()->videoInfoFmtMapRE());
+    if (fmtMapRE.indexIn(videoInfo) == -1) {
+        qWarning() << "Cannot get urlMap. Trying next el param";
         // Don't panic! We're gonna try another magic "el" param
         elIndex++;
         getVideoInfo();
@@@@ -194,7 +188,8 @@@@ void  Video::gotVideoInfo(QByteArray data) {
 
     // qDebug() << "Got token and urlMap" << elIndex;
 
-    QString fmtUrlMap = re.cap(1);
+    QString fmtUrlMap = fmtMapRE.cap(1);
+    // qWarning() << "got fmtUrlMap" << fmtUrlMap;
     fmtUrlMap = QByteArray::fromPercentEncoding(fmtUrlMap.toUtf8());
     parseFmtUrlMap(fmtUrlMap);
 }
@@@@ -339,18 +334,16 @@@@ void Video::scrapeWebPage(QByteArray data) {
         return;
     }
 
-    QRegExp re(".*\"url_encoded_fmt_stream_map\":\\s+\"([^\"]+)\".*");
-    bool match = re.exactMatch(html);
-    // on regexp failure, stop and report error
-    if (!match) {
-        qWarning() << "Error parsing video page";
+    QRegExp fmtMapRE(JsFunctions::instance()->webPageFmtMapRE());
+    if (fmtMapRE.indexIn(html) == -1) {
+        // qWarning() << "Error parsing video page";
         // emit errorStreamUrl("Error parsing video page");
         // loadingStreamUrl = false;
         elIndex++;
         getVideoInfo();
         return;
     }
-    fmtUrlMap = re.cap(1);
+    fmtUrlMap = fmtMapRE.cap(1);
     fmtUrlMap.replace("\\u0026", "&");
     // parseFmtUrlMap(fmtUrlMap, true);
 
@@@@ -367,7 +360,7 @@@@ void Video::scrapeWebPage(QByteArray data) {
     }
 #endif
 
-    QRegExp jsPlayerRe("\"assets\":.+\"js\":\\s*\"([^\"]+)\"");
+    QRegExp jsPlayerRe(JsFunctions::instance()->jsPlayerRE());
     if (jsPlayerRe.indexIn(html) != -1) {
         QString jsPlayerUrl = jsPlayerRe.cap(1);
         jsPlayerUrl.remove('\\');
@@@@ -384,55 +377,15 @@@@ void Video::scrapeWebPage(QByteArray data) {
     }
 }
 
-void Video::gotHeadHeaders(QNetworkReply* reply) {
-    int statusCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
-    // qDebug() << "gotHeaders" << statusCode;
-    if (statusCode == 200) {
-        foundVideoUrl(videoToken, definitionCode);
-    } else {
-
-        // try next (lower quality) definition
-        /*
-        QStringList definitionNames = VideoDefinition::getDefinitionNames();
-        int currentIndex = definitionNames.indexOf(currentDefinition);
-        int previousIndex = 0;
-        if (currentIndex > 0) {
-            previousIndex = currentIndex - 1;
-        }
-        if (previousIndex > 0) {
-            QString nextDefinitionName = definitionNames.at(previousIndex);
-            findVideoUrl(nextDefinitionName);
-        } else {
-            foundVideoUrl(videoToken, 18);
-        }*/
-
-
-        QList<int> definitionCodes = VideoDefinition::getDefinitionCodes();
-        int currentIndex = definitionCodes.indexOf(definitionCode);
-        int previousIndex = 0;
-        if (currentIndex > 0) {
-            previousIndex = currentIndex - 1;
-            int definitionCode = definitionCodes.at(previousIndex);
-            if (definitionCode == 18) {
-                // This is assumed always available
-                foundVideoUrl(videoToken, 18);
-            } else {
-                findVideoUrl(definitionCode);
-            }
-
-        } else {
-            foundVideoUrl(videoToken, 18);
-        }
-
-    }
-}
-
 void Video::parseJsPlayer(QByteArray bytes) {
     QString js = QString::fromUtf8(bytes);
     // qWarning() << "jsPlayer" << js;
-    QRegExp funcNameRe("signature=([" + jsNameChars + "]+)");
+
+    // QRegExp funcNameRe("\"signature\"\\w*,\\w*([" + jsNameChars + "]+)");
+    QRegExp funcNameRe(JsFunctions::instance()->signatureFunctionNameRE().arg(jsNameChars));
+
     if (funcNameRe.indexIn(js) == -1) {
-        qWarning() << "Cannot capture signature function name";
+        qWarning() << "Cannot capture signature function name" << js;
     } else {
         sigFuncName = funcNameRe.cap(1);
         captureFunction(sigFuncName, js);
@@@@ -546,20 +499,6 @@@@ QString Video::decryptSignature(const QString &s) {
         return QString();
     }
     return value.toString();
-}
-
-void Video::findVideoUrl(int definitionCode) {
-    this->definitionCode = definitionCode;
-
-    QUrl videoUrl = QUrl(QString(
-                             "http://www.youtube.com/get_video?video_id=%1&t=%2&eurl=&el=&ps=&asv=&fmt=%3"
-                             ).arg(videoId, videoToken, QString::number(definitionCode)));
-
-    QObject *reply = The::http()->head(videoUrl);
-    connect(reply, SIGNAL(finished(QNetworkReply*)), SLOT(gotHeadHeaders(QNetworkReply*)));
-    // connect(reply, SIGNAL(error(QNetworkReply*)), SLOT(errorVideoInfo(QNetworkReply*)));
-
-    // see you in gotHeadHeaders()
 }
 
 QString Video::formattedDuration() const {
@


1.3
log
@
Merge bugfixes from upstream's git repo:

Restore wheel scroll setting
(git commit 96ad9483a14d0b2252fb9eac976d8ed563bb4aca)

Fix VEVO videos
(git commit 6ef6d1752c7fac4f1db7ddc283e934acc8a4556b)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to minitube-2.1.6
@
text
@d1 1
a1 1
$OpenBSD: patch-src_video_cpp,v 1.1 2014/02/07 16:07:12 dcoppa Exp $
d3 3
a5 2
Fix some videos not playing
(upstream git commit df5f6436f59a3ce7abdb14427188f6360753a1e2)
d7 5
a11 5
--- src/video.cpp.orig	Thu Dec 19 00:37:27 2013
+++ src/video.cpp	Fri Feb  7 16:45:21 2014
@@@@ -28,6 +28,10 @@@@ namespace The {
 NetworkAccess* http();
 }
a12 4
+namespace {
+    static const QString jsNameChars = "a-zA-Z0-9\\$_";
+}
+
d15 1
d17 37
a53 1
@@@@ -390,7 +394,7 @@@@ void Video::gotHeadHeaders(QNetworkReply* reply) {
d55 109
d166 6
a171 2
-    QRegExp funcNameRe("signature=([a-zA-Z0-9]+)");
+    QRegExp funcNameRe("signature=([" + jsNameChars + "]+)");
d173 2
a174 1
         qWarning() << "Cannot capture signature function name";
d176 20
a195 1
@@@@ -402,7 +406,7 @@@@ void Video::parseJsPlayer(QByteArray bytes) {
d198 1
a198 15
 void Video::captureFunction(const QString &name, const QString &js) {
-    QRegExp funcRe("function\\s+" + name + "\\s*\\([a-zA-Z0-9,\\s]*\\)\\s*\\{[^\\}]+\\}");
+    QRegExp funcRe("function\\s+" + QRegExp::escape(name) + "\\s*\\([" + jsNameChars + ",\\s]*\\)\\s*\\{[^\\}]+\\}");
     if (funcRe.indexIn(js) == -1) {
         qWarning() << "Cannot capture function" << name;
         return;
@@@@ -411,7 +415,7 @@@@ void Video::captureFunction(const QString &name, const
     sigFunctions.insert(name, func);
 
     // capture inner functions
-    QRegExp invokedFuncRe("[\\s=;\\(]([a-zA-Z0-9]+)\\s*\\([a-zA-Z0-9, ]+\\)");
+    QRegExp invokedFuncRe("[\\s=;\\(]([" + jsNameChars + "]+)\\s*\\([" + jsNameChars + ",\\s]+\\)");
     int pos = name.length() + 9;
     while ((pos = invokedFuncRe.indexIn(func, pos)) != -1) {
         QString funcName = invokedFuncRe.cap(1);
@


1.1
log
@Bugfixing from upstream:

- Fix some videos not playing
- Remove obsolete categories in the Browse tab

Use local patches because 2.1.6 has been released, but upstream
forgot to upload the properly versioned tarball on his server.
@
text
@d1 1
a1 1
$OpenBSD$
@

