head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.10.27.18.30.40;	author robert;	state Exp;
branches;
next	1.3;
commitid	lED1Oks5HVh03mCa;

1.3
date	2016.03.23.20.13.06;	author robert;	state Exp;
branches;
next	1.2;
commitid	2hNT21XsdisESysQ;

1.2
date	2015.05.06.14.27.23;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.35;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.35;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.4
log
@update to 54.0
@
text
@$OpenBSD: patch-base_process_process_metrics_openbsd_cc,v 1.7 2016/10/26 06:22:07 robert Exp $
--- base/process/process_metrics_openbsd.cc.orig.port	Wed Oct 12 21:02:53 2016
+++ base/process/process_metrics_openbsd.cc	Wed Oct 19 12:55:56 2016
@@@@ -4,10 +4,21 @@@@
 
 #include "base/process/process_metrics.h"
 
+#include "base/files/file_util.h"
+#include "base/logging.h"
+#include "base/process/internal_linux.h"
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/string_split.h"
+#include "base/strings/string_tokenizer.h"
+#include "base/strings/string_util.h"
+#include "base/sys_info.h"
+#include "base/threading/thread_restrictions.h"
+
 #include <stddef.h>
 #include <stdint.h>
 #include <sys/param.h>
 #include <sys/sysctl.h>
+#include <sys/vmmeter.h>
 
 #include "base/macros.h"
 #include "base/memory/ptr_util.h"
@@@@ -22,20 +33,27 @@@@ std::unique_ptr<ProcessMetrics> ProcessMetrics::Create
 }
 
 size_t ProcessMetrics::GetPagefileUsage() const {
-  struct kinfo_proc info;
-  size_t length;
+  struct kinfo_proc *info;
+  size_t length, pfu;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    pfu = -1;
+    goto out;
+  }
+  pfu = (info->p_vm_tsize + info->p_vm_dsize + info->p_vm_ssize);
 
-  return (info.p_vm_tsize + info.p_vm_dsize + info.p_vm_ssize);
+out:
+  free(info);
+  return pfu;
 }
 
 size_t ProcessMetrics::GetPeakPagefileUsage() const {
@@@@ -43,20 +61,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
 }
 
 size_t ProcessMetrics::GetWorkingSetSize() const {
-  struct kinfo_proc info;
-  size_t length;
+  struct kinfo_proc *info;
+  size_t length, wss;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process_,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    wss = -1;
+    goto out;
+  }
 
-  return info.p_vm_rssize * getpagesize();
+  wss = (info->p_vm_rssize * getpagesize());
+
+out:
+  free(info);
+  return wss;
 }
 
 size_t ProcessMetrics::GetPeakWorkingSetSize() const {
@@@@ -96,20 +122,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
 }
 
 static int GetProcessCPU(pid_t pid) {
-  struct kinfo_proc info;
+  struct kinfo_proc *info;
   size_t length;
+  int pctcpu = 0;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return 0;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0)
+    goto out;
 
-  return info.p_pctcpu;
+  pctcpu = info->p_pctcpu;
+
+out:
+  free(info);
+  return pctcpu;
 }
 
 double ProcessMetrics::GetCPUUsage() {
@@@@ -123,7 +156,6 @@@@ double ProcessMetrics::GetCPUUsage() {
   }
 
   int64_t time_delta = (time - last_cpu_time_).InMicroseconds();
-  DCHECK_NE(time_delta, 0);
 
   if (time_delta == 0)
     return 0;
@


1.3
log
@update to 49.0
@
text
@d1 5
a5 5
$OpenBSD: patch-base_process_process_metrics_openbsd_cc,v 1.6 2016/03/06 10:51:13 robert Exp $
--- base/process/process_metrics_openbsd.cc.orig.port	Thu Mar  3 09:50:00 2016
+++ base/process/process_metrics_openbsd.cc	Thu Mar  3 09:52:22 2016
@@@@ -5,10 +5,21 @@@@
 #include "base/macros.h"
d24 3
a26 3
 namespace base {
 
@@@@ -18,20 +29,27 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
d59 1
a59 1
@@@@ -39,20 +57,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
d93 1
a93 1
@@@@ -92,20 +118,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
d125 1
a125 1
@@@@ -119,7 +152,6 @@@@ double ProcessMetrics::GetCPUUsage() {
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 5
a5 5
$OpenBSD: patch-base_process_process_metrics_openbsd_cc,v 1.5 2015/01/22 11:16:40 robert Exp $
--- base/process/process_metrics_openbsd.cc.orig.port	Wed Dec  3 03:13:19 2014
+++ base/process/process_metrics_openbsd.cc	Sat Dec  6 12:13:17 2014
@@@@ -4,8 +4,19 @@@@
 
d18 2
d26 1
a26 1
@@@@ -15,20 +26,27 @@@@ ProcessMetrics* ProcessMetrics::CreateProcessMetrics(P
d59 1
a59 1
@@@@ -36,20 +54,28 @@@@ size_t ProcessMetrics::GetPeakPagefileUsage() const {
d93 1
a93 1
@@@@ -89,20 +115,27 @@@@ bool ProcessMetrics::GetIOCounters(IoCounters* io_coun
d125 1
a125 1
@@@@ -116,7 +149,6 @@@@ double ProcessMetrics::GetCPUUsage() {
d128 1
a128 1
   int64 time_delta = (time - last_cpu_time_).InMicroseconds();
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
