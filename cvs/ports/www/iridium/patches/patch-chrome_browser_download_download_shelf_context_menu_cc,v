head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.10.27.18.30.41;	author robert;	state Exp;
branches;
next	1.4;
commitid	lED1Oks5HVh03mCa;

1.4
date	2016.03.23.20.13.07;	author robert;	state Exp;
branches;
next	1.3;
commitid	2hNT21XsdisESysQ;

1.3
date	2015.05.26.17.37.39;	author robert;	state Exp;
branches;
next	1.2;
commitid	imvK5OAjfFzbGwip;

1.2
date	2015.05.06.14.27.23;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.36;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.36;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.5
log
@update to 54.0
@
text
@$OpenBSD: patch-chrome_browser_download_download_shelf_context_menu_cc,v 1.6 2016/10/26 06:22:08 robert Exp $
--- chrome/browser/download/download_shelf_context_menu.cc.orig.port	Wed Oct 12 21:02:54 2016
+++ chrome/browser/download/download_shelf_context_menu.cc	Wed Oct 19 12:55:58 2016
@@@@ -127,7 +127,7 @@@@ base::string16 DownloadShelfContextMenu::GetLabelForCo
                    : IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS;
           break;
         }
-#elif defined(OS_MACOSX) || defined(OS_LINUX)
+#elif defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
         if (can_open_pdf_in_system_viewer) {
           id = IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS;
           break;
@


1.4
log
@update to 49.0
@
text
@d1 4
a4 4
$OpenBSD: patch-chrome_browser_download_download_shelf_context_menu_cc,v 1.4 2016/03/06 10:51:14 robert Exp $
--- chrome/browser/download/download_shelf_context_menu.cc.orig.port	Wed Feb 24 00:01:58 2016
+++ chrome/browser/download/download_shelf_context_menu.cc	Thu Mar  3 09:43:25 2016
@@@@ -142,7 +142,7 @@@@ base::string16 DownloadShelfContextMenu::GetLabelForCo
@


1.3
log
@update to 43.1
@
text
@d1 4
a4 4
$OpenBSD: patch-chrome_browser_download_download_shelf_context_menu_cc,v 1.3 2015/05/24 15:51:53 robert Exp $
--- chrome/browser/download/download_shelf_context_menu.cc.orig.port	Wed May 20 10:02:47 2015
+++ chrome/browser/download/download_shelf_context_menu.cc	Wed May 20 10:03:00 2015
@@@@ -143,7 +143,7 @@@@ base::string16 DownloadShelfContextMenu::GetLabelForCo
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 7
a7 25
$OpenBSD: patch-chrome_browser_download_download_shelf_context_menu_cc,v 1.2 2015/04/27 16:38:25 robert Exp $
--- chrome/browser/download/download_shelf_context_menu.cc.orig.port	Wed Apr 15 09:23:59 2015
+++ chrome/browser/download/download_shelf_context_menu.cc	Wed Apr 15 09:24:37 2015
@@@@ -123,7 +123,7 @@@@ bool DownloadShelfContextMenu::IsCommandIdChecked(int 
           download_crx_util::IsExtensionDownload(*download_item_);
     case ALWAYS_OPEN_TYPE:
 #if defined(OS_WIN) || defined(OS_LINUX) || \
-    (defined(OS_MACOSX) && !defined(OS_IOS))
+    (defined(OS_MACOSX) && !defined(OS_IOS)) || defined(OS_BSD)
       if (CanOpenPdfInSystemViewer()) {
         DownloadPrefs* prefs = DownloadPrefs::FromBrowserContext(
             download_item_->GetBrowserContext());
@@@@ -163,7 +163,7 @@@@ void DownloadShelfContextMenu::ExecuteCommand(int comm
       DownloadPrefs* prefs = DownloadPrefs::FromBrowserContext(
           download_item_->GetBrowserContext());
 #if defined(OS_WIN) || defined(OS_LINUX) || \
-    (defined(OS_MACOSX) && !defined(OS_IOS))
+    (defined(OS_MACOSX) && !defined(OS_IOS)) || defined(OS_BSD)
       if (CanOpenPdfInSystemViewer()) {
         prefs->SetShouldOpenPdfInSystemReader(!is_checked);
         DownloadItemModel(download_item_).SetShouldPreferOpeningInBrowser(
@@@@ -392,14 +392,14 @@@@ int DownloadShelfContextMenu::GetAlwaysOpenStringId() 
     return IsAdobeReaderDefaultPDFViewer()
                ? IDS_DOWNLOAD_MENU_ALWAYS_OPEN_PDF_IN_READER
                : IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS;
d10 3
a12 20
   if (CanOpenPdfInSystemViewer())
     return IDS_DOWNLOAD_MENU_PLATFORM_OPEN_ALWAYS;
 #endif
   return IDS_DOWNLOAD_MENU_ALWAYS_OPEN_TYPE;
 }
 
-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX)
+#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
 bool DownloadShelfContextMenu::IsDownloadPdf() const {
   base::FilePath path = download_item_->GetTargetFilePath();
   return path.MatchesExtension(FILE_PATH_LITERAL(".pdf"));
@@@@ -411,7 +411,7 @@@@ bool DownloadShelfContextMenu::CanOpenPdfInSystemViewe
   return IsDownloadPdf() &&
          (IsAdobeReaderDefaultPDFViewer() ? is_adobe_pdf_reader_up_to_date_ :
                                             true);
-#elif defined(OS_MACOSX) || defined(OS_LINUX)
+#elif defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
   return IsDownloadPdf();
 #endif
 }
@


1.1
log
@Initial revision
@
text
@d1 4
a4 5
$OpenBSD: patch-chrome_browser_download_download_shelf_context_menu_cc,v 1.1 2015/01/22 11:16:40 robert Exp $
--- chrome/browser/download/download_shelf_context_menu.cc.orig.port	Sat Dec  6 16:55:11 2014
+++ chrome/browser/download/download_shelf_context_menu.cc	Sat Dec  6 16:56:00 2014
@@@@ -122,7 +122,7 @@@@ bool DownloadShelfContextMenu::IsCommandIdChecked(int 
       return download_item_->GetOpenWhenComplete() ||
d7 3
a9 3
-#if defined(OS_WIN) || defined(OS_LINUX) || \
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD) || \
     (defined(OS_MACOSX) && !defined(OS_IOS))
d12 2
a13 2
@@@@ -162,7 +162,7 @@@@ void DownloadShelfContextMenu::ExecuteCommand(int comm
       bool is_checked = IsCommandIdChecked(ALWAYS_OPEN_TYPE);
d16 3
a18 3
-#if defined(OS_WIN) || defined(OS_LINUX) || \
+#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_BSD) || \
     (defined(OS_MACOSX) && !defined(OS_IOS))
d21 5
a25 4
@@@@ -390,14 +390,14 @@@@ int DownloadShelfContextMenu::GetAlwaysOpenStringId() 
 #if defined(OS_WIN)
   if (CanOpenPdfInSystemViewer())
     return IDS_DOWNLOAD_MENU_ALWAYS_OPEN_PDF_IN_READER;
d39 1
a39 1
@@@@ -409,7 +409,7 @@@@ bool DownloadShelfContextMenu::CanOpenPdfInSystemViewe
@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
