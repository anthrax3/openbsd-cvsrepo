head	1.5;
access;
symbols
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2015.08.17.17.21.31;	author robert;	state dead;
branches;
next	1.4;
commitid	yHF19P80QYcchxsK;

1.4
date	2015.08.12.10.56.13;	author robert;	state Exp;
branches;
next	1.3;
commitid	WokHnx1ONPqT4wiW;

1.3
date	2015.05.26.17.37.40;	author robert;	state Exp;
branches;
next	1.2;
commitid	imvK5OAjfFzbGwip;

1.2
date	2015.05.06.14.27.24;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.37;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.37;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.5
log
@merge the patches from chromium that make iridium use the internal
libusb as well
@
text
@$OpenBSD: patch-device_usb_usb_service_impl_cc,v 1.4 2015/08/12 10:56:13 robert Exp $
--- device/usb/usb_service_impl.cc.orig.port	Tue Jul 28 22:13:32 2015
+++ device/usb/usb_service_impl.cc	Wed Aug 12 08:13:27 2015
@@@@ -286,12 +286,15 @@@@ UsbServiceImpl::UsbServiceImpl(
     PlatformUsbContext context,
     scoped_refptr<base::SequencedTaskRunner> blocking_task_runner)
     : context_(new UsbContext(context)),
+#if !defined(OS_BSD)
       task_runner_(base::ThreadTaskRunnerHandle::Get()),
+#endif
       blocking_task_runner_(blocking_task_runner),
 #if defined(OS_WIN)
       device_observer_(this),
 #endif
       weak_factory_(this) {
+#if !defined(OS_BSD)
   base::MessageLoop::current()->AddDestructionObserver(this);
 
   int rv = libusb_hotplug_register_callback(
@@@@ -321,17 +324,20 @@@@ UsbServiceImpl::UsbServiceImpl(
     }
 #endif  // OS_WIN
   }
+#endif
 }
 
 UsbServiceImpl::~UsbServiceImpl() {
   base::MessageLoop::current()->RemoveDestructionObserver(this);
 
+#if !defined(OS_BSD)
   if (hotplug_enabled_) {
     libusb_hotplug_deregister_callback(context_->context(), hotplug_handle_);
   }
   for (const auto& map_entry : devices_) {
     map_entry.second->OnDisconnect();
   }
+#endif
 }
 
 scoped_refptr<UsbDevice> UsbServiceImpl::GetDeviceById(uint32 unique_id) {
@@@@ -566,6 +572,7 @@@@ void UsbServiceImpl::RemoveDevice(scoped_refptr<UsbDev
   device->OnDisconnect();
 }
 
+#if !defined(OS_BSD)
 // static
 int LIBUSB_CALL UsbServiceImpl::HotplugCallback(libusb_context* context,
                                                 PlatformUsbDevice device,
@@@@ -603,6 +610,7 @@@@ int LIBUSB_CALL UsbServiceImpl::HotplugCallback(libusb
 
   return 0;
 }
+#endif
 
 void UsbServiceImpl::OnPlatformDeviceAdded(PlatformUsbDevice platform_device) {
   DCHECK(CalledOnValidThread());
@


1.4
log
@update to iridium-44.0 and also incorporate a patch from dcoppa@@
for the startup script that still had references to chromium directories.
@
text
@d1 1
a1 1
$OpenBSD: patch-device_usb_usb_service_impl_cc,v 1.5 2015/08/12 05:55:16 robert Exp $
@


1.3
log
@update to 43.1
@
text
@d1 14
a14 6
$OpenBSD: patch-device_usb_usb_service_impl_cc,v 1.3 2015/05/24 15:51:53 robert Exp $
--- device/usb/usb_service_impl.cc.orig.port	Thu May 14 00:35:46 2015
+++ device/usb/usb_service_impl.cc	Wed May 20 08:34:56 2015
@@@@ -183,6 +183,7 @@@@ UsbServiceImpl::UsbServiceImpl(
       next_unique_id_(0),
       hotplug_enabled_(false),
d17 2
a18 1
   task_runner_ = base::ThreadTaskRunnerHandle::Get();
d20 2
a21 3
       context_->context(),
@@@@ -201,9 +202,11 @@@@ UsbServiceImpl::UsbServiceImpl(
                                          base::Unretained(ui_thread_helper_)));
d28 2
a33 1
@@@@ -215,6 +218,7 @@@@ UsbServiceImpl::~UsbServiceImpl() {
d40 3
a42 3
 void UsbServiceImpl::RefreshDevices() {
@@@@ -336,6 +340,7 @@@@ scoped_refptr<UsbDeviceImpl> UsbServiceImpl::AddDevice
   }
d49 1
a49 1
@@@@ -373,6 +378,7 @@@@ int LIBUSB_CALL UsbServiceImpl::HotplugCallback(libusb
d55 1
a55 1
 void UsbServiceImpl::OnDeviceAdded(PlatformUsbDevice platform_device) {
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 4
a4 4
$OpenBSD: patch-device_usb_usb_service_impl_cc,v 1.2 2015/04/27 16:38:25 robert Exp $
--- device/usb/usb_service_impl.cc.orig.port	Wed Apr 15 09:33:55 2015
+++ device/usb/usb_service_impl.cc	Wed Apr 22 21:25:53 2015
@@@@ -112,6 +112,7 @@@@ UsbServiceImpl::UsbServiceImpl(
d12 1
a12 1
@@@@ -130,9 +131,11 @@@@ UsbServiceImpl::UsbServiceImpl(
d24 1
a24 1
@@@@ -144,6 +147,7 @@@@ UsbServiceImpl::~UsbServiceImpl() {
d32 1
a32 1
@@@@ -219,6 +223,7 @@@@ scoped_refptr<UsbDeviceImpl> UsbServiceImpl::AddDevice
d40 1
a40 1
@@@@ -256,6 +261,7 @@@@ int LIBUSB_CALL UsbServiceImpl::HotplugCallback(libusb
@


1.1
log
@Initial revision
@
text
@d1 4
a4 28
$OpenBSD: patch-device_usb_usb_service_impl_cc,v 1.1 2015/03/21 14:11:19 robert Exp $
--- device/usb/usb_service_impl.cc.orig.port	Fri Mar 20 04:21:23 2015
+++ device/usb/usb_service_impl.cc	Sat Mar 21 12:29:48 2015
@@@@ -60,11 +60,13 @@@@ class UsbServiceImpl : public UsbService,
   // Adds a new UsbDevice to the devices_ map based on the given libusb device.
   scoped_refptr<UsbDeviceImpl> AddDevice(PlatformUsbDevice platform_device);
 
+#if !defined(OS_BSD)
   // Handle hotplug events from libusb.
   static int LIBUSB_CALL HotplugCallback(libusb_context* context,
                                          PlatformUsbDevice device,
                                          libusb_hotplug_event event,
                                          void* user_data);
+#endif
   // These functions release a reference to the provided platform device.
   void OnDeviceAdded(PlatformUsbDevice platform_device);
   void OnDeviceRemoved(PlatformUsbDevice platform_device);
@@@@ -85,7 +87,9 @@@@ class UsbServiceImpl : public UsbService,
   // connected instead of only when a full enumeration is requested.
   // TODO(reillyg): Support this on all platforms. crbug.com/411715
   bool hotplug_enabled_;
+#if !defined(OS_BSD)
   libusb_hotplug_callback_handle hotplug_handle_;
+#endif
 
   // The map from unique IDs to UsbDevices.
   typedef std::map<uint32, scoped_refptr<UsbDeviceImpl> > DeviceMap;
@@@@ -177,6 +181,9 @@@@ UsbServiceImpl::UsbServiceImpl(
d8 1
a8 4
+#if defined(OS_BSD)
+  hotplug_enabled_ = false;
+#else
   base::MessageLoop::current()->AddDestructionObserver(this);
d11 2
a12 1
@@@@ -196,9 +203,11 @@@@ UsbServiceImpl::UsbServiceImpl(
a20 1
   base::MessageLoop::current()->RemoveDestructionObserver(this);
d23 2
a24 1
@@@@ -211,6 +220,7 @@@@ UsbServiceImpl::~UsbServiceImpl() {
d32 1
a32 1
@@@@ -286,6 +296,7 @@@@ scoped_refptr<UsbDeviceImpl> UsbServiceImpl::AddDevice
d40 1
a40 1
@@@@ -323,6 +334,7 @@@@ int LIBUSB_CALL UsbServiceImpl::HotplugCallback(libusb
@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
