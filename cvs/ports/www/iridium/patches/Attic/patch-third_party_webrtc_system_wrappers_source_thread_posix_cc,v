head	1.5;
access;
symbols
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.03.23.20.13.07;	author robert;	state dead;
branches;
next	1.4;
commitid	2hNT21XsdisESysQ;

1.4
date	2015.10.24.18.22.22;	author robert;	state Exp;
branches;
next	1.3;
commitid	HwRgK4asvw18PlFu;

1.3
date	2015.05.26.17.37.40;	author robert;	state Exp;
branches;
next	1.2;
commitid	imvK5OAjfFzbGwip;

1.2
date	2015.05.06.14.27.24;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.38;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.38;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.5
log
@update to 49.0
@
text
@$OpenBSD: patch-third_party_webrtc_system_wrappers_source_thread_posix_cc,v 1.4 2015/10/24 18:22:22 robert Exp $
--- third_party/webrtc/system_wrappers/source/thread_posix.cc.orig.port	Wed Sep  2 20:15:15 2015
+++ third_party/webrtc/system_wrappers/source/thread_posix.cc	Wed Sep  2 20:50:56 2015
@@@@ -15,7 +15,9 @@@@
 #include <errno.h>
 #include <unistd.h>
 #ifdef WEBRTC_LINUX
+#if !defined(__OpenBSD__)
 #include <linux/unistd.h>
+#endif
 #include <sched.h>
 #include <sys/types.h>
 #endif
@


1.4
log
@update to 46.0rc1
@
text
@d1 1
a1 1
$OpenBSD: patch-third_party_webrtc_system_wrappers_source_thread_posix_cc,v 1.7 2015/09/05 16:06:50 robert Exp $
@


1.3
log
@update to 43.1
@
text
@d1 4
a4 4
$OpenBSD: patch-third_party_webrtc_system_wrappers_source_thread_posix_cc,v 1.6 2015/05/24 15:51:53 robert Exp $
--- third_party/webrtc/system_wrappers/source/thread_posix.cc.orig.port	Thu May 14 00:36:30 2015
+++ third_party/webrtc/system_wrappers/source/thread_posix.cc	Wed May 20 08:34:56 2015
@@@@ -15,9 +15,13 @@@@
a11 4
+#if !defined(__OpenBSD__)
 #include <sys/prctl.h>
+#endif
 #include <sys/syscall.h>
a13 9
@@@@ -152,7 +156,7 @@@@ void ThreadPosix::Run() {
   if (!name_.empty()) {
     // Setting the thread name may fail (harmlessly) if running inside a
     // sandbox. Ignore failures if they happen.
-#if defined(WEBRTC_LINUX) || defined(WEBRTC_ANDROID)
+#if (defined(WEBRTC_LINUX) || defined(WEBRTC_ANDROID)) && !defined(__OpenBSD__)
     prctl(PR_SET_NAME, reinterpret_cast<unsigned long>(name_.c_str()));
 #elif defined(WEBRTC_MAC) || defined(WEBRTC_IOS)
     pthread_setname_np(name_.substr(0, 63).c_str());
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 3
a3 3
$OpenBSD: patch-third_party_webrtc_system_wrappers_source_thread_posix_cc,v 1.5 2015/04/27 16:38:25 robert Exp $
--- third_party/webrtc/system_wrappers/source/thread_posix.cc.orig.port	Wed Apr 15 09:42:16 2015
+++ third_party/webrtc/system_wrappers/source/thread_posix.cc	Wed Apr 15 15:41:43 2015
d18 1
a18 1
@@@@ -138,7 +142,7 @@@@ void ThreadPosix::Run(ThreadPosix::InitParams* params)
@


1.1
log
@Initial revision
@
text
@d1 5
a5 5
$OpenBSD: patch-third_party_webrtc_system_wrappers_source_thread_posix_cc,v 1.4 2015/01/22 11:16:41 robert Exp $
--- third_party/webrtc/system_wrappers/source/thread_posix.cc.orig.port	Wed Dec  3 03:32:47 2014
+++ third_party/webrtc/system_wrappers/source/thread_posix.cc	Sat Dec  6 11:34:27 2014
@@@@ -51,12 +51,16 @@@@
 #include <string.h>  // strncpy
d8 1
a8 3
+#if defined(__OpenBSD__)
+#include <sys/unistd.h>
+#else
d10 1
d12 1
d14 1
d18 7
a24 11
+#endif
 
 #include "webrtc/system_wrappers/interface/critical_section_wrapper.h"
 #include "webrtc/system_wrappers/interface/event_wrapper.h"
@@@@ -136,12 +140,12 @@@@ ThreadPosix::ThreadPosix(ThreadRunFunction func, Threa
 }
 
 uint32_t ThreadWrapper::GetThreadId() {
-#if defined(WEBRTC_ANDROID) || defined(WEBRTC_LINUX)
+#if (defined(WEBRTC_ANDROID) || defined(WEBRTC_LINUX)) && !defined(__OpenBSD__)
   return static_cast<uint32_t>(syscall(__NR_gettid));
d26 1
a26 34
   return pthread_mach_thread_np(pthread_self());
 #else
-  return reinterpret_cast<uint32_t>(pthread_self());
+  return reinterpret_cast<uint64_t>(pthread_self());
 #endif
 }
 
@@@@ -171,7 +175,7 @@@@ ThreadPosix::~ThreadPosix() {
   delete crit_state_;
 }
 
-#define HAS_THREAD_ID !defined(WEBRTC_IOS) && !defined(WEBRTC_MAC)
+#define HAS_THREAD_ID !defined(WEBRTC_IOS) && !defined(WEBRTC_MAC) && !defined(__OpenBSD__)
 
 bool ThreadPosix::Start(unsigned int& thread_id)
 {
@@@@ -210,7 +214,7 @@@@ bool ThreadPosix::Start(unsigned int& thread_id)
 
 // CPU_ZERO and CPU_SET are not available in NDK r7, so disable
 // SetAffinity on Android for now.
-#if (defined(WEBRTC_LINUX) && (!defined(WEBRTC_ANDROID)))
+#if (defined(WEBRTC_LINUX) && (!defined(WEBRTC_ANDROID) && !defined(__OpenBSD__)))
 bool ThreadPosix::SetAffinity(const int* processor_numbers,
                               const unsigned int amount_of_processors) {
   if (!processor_numbers || (amount_of_processors == 0)) {
@@@@ -292,7 +296,7 @@@@ void ThreadPosix::Run() {
   event_->Set();
 
   if (set_thread_name_) {
-#ifdef WEBRTC_LINUX
+#if defined(WEBRTC_LINUX) && !defined(__OpenBSD__)
     prctl(PR_SET_NAME, (unsigned long)name_, 0, 0, 0);
 #endif
     WEBRTC_TRACE(kTraceStateInfo, kTraceUtility, -1,
@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
