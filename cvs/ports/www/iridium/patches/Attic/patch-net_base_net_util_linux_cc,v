head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.10.24.18.22.21;	author robert;	state dead;
branches;
next	1.2;
commitid	HwRgK4asvw18PlFu;

1.2
date	2015.05.06.14.27.24;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.37;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.37;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.3
log
@update to 46.0rc1
@
text
@$OpenBSD: patch-net_base_net_util_linux_cc,v 1.2 2015/05/06 14:27:24 robert Exp $
--- net/base/net_util_linux.cc.orig.port	Wed Apr 15 09:36:13 2015
+++ net/base/net_util_linux.cc	Wed Apr 15 15:52:35 2015
@@@@ -4,12 +4,14 @@@@
 
 #include "net/base/net_util_linux.h"
 
-#if !defined(OS_ANDROID)
+#if !defined(OS_ANDROID) && !defined(OS_BSD)
 #include <linux/ethtool.h>
 #endif  // !defined(OS_ANDROID)
+#if !defined(OS_BSD)
 #include <linux/if.h>
 #include <linux/sockios.h>
 #include <linux/wireless.h>
+#endif
 #include <set>
 #include <sys/ioctl.h>
 #include <sys/types.h>
@@@@ -39,6 +41,7 @@@@ namespace {
 // application layer.
 bool TryConvertNativeToNetIPAttributes(int native_attributes,
                                        int* net_attributes) {
+#if !defined(OS_BSD)
   // For Linux/ChromeOS/Android, we disallow addresses with attributes
   // IFA_F_OPTIMISTIC, IFA_F_DADFAILED, and IFA_F_TENTATIVE as these
   // are still progressing through duplicated address detection (DAD)
@@@@ -61,6 +64,9 @@@@ bool TryConvertNativeToNetIPAttributes(int native_attr
   }
 
   return true;
+#else
+  return false;
+#endif
 }
 
 }  // namespace
@@@@ -79,6 +85,7 @@@@ inline const unsigned char* GetIPAddressData(const IPA
 // or ethtool extensions.
 NetworkChangeNotifier::ConnectionType GetInterfaceConnectionType(
     const std::string& ifname) {
+#if !defined(OS_BSD)
   base::ScopedFD s(socket(AF_INET, SOCK_STREAM, 0));
   if (!s.is_valid())
     return NetworkChangeNotifier::CONNECTION_UNKNOWN;
@@@@ -99,11 +106,13 @@@@ NetworkChangeNotifier::ConnectionType GetInterfaceConn
   if (ioctl(s.get(), SIOCETHTOOL, &ifr) != -1)
     return NetworkChangeNotifier::CONNECTION_ETHERNET;
 #endif  // !defined(OS_ANDROID)
+#endif
 
   return NetworkChangeNotifier::CONNECTION_UNKNOWN;
 }
 
 std::string GetInterfaceSSID(const std::string& ifname) {
+#if !defined(OS_BSD)
   base::ScopedFD ioctl_socket(socket(AF_INET, SOCK_DGRAM, 0));
   if (!ioctl_socket.is_valid())
     return "";
@@@@ -115,9 +124,11 @@@@ std::string GetInterfaceSSID(const std::string& ifname
   wreq.u.essid.length = IW_ESSID_MAX_SIZE;
   if (ioctl(ioctl_socket.get(), SIOCGIWESSID, &wreq) != -1)
     return ssid;
+#endif
   return "";
 }
 
+#if !defined(OS_BSD)
 bool GetNetworkListImpl(
     NetworkInterfaceList* networks,
     int policy,
@@@@ -186,6 +197,7 @@@@ bool GetNetworkListImpl(
 
   return true;
 }
+#endif
 
 std::string GetWifiSSIDFromInterfaceListInternal(
     const NetworkInterfaceList& interfaces,
@@@@ -210,12 +222,16 @@@@ bool GetNetworkList(NetworkInterfaceList* networks, in
   if (networks == NULL)
     return false;
 
+#if !defined(OS_BSD)
   internal::AddressTrackerLinux tracker;
   tracker.Init();
 
   return internal::GetNetworkListImpl(
       networks, policy, tracker.GetOnlineLinks(), tracker.GetAddressMap(),
       &internal::AddressTrackerLinux::GetInterfaceName);
+#else
+  return false;
+#endif
 }
 
 std::string GetWifiSSID() {
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 1
a1 1
$OpenBSD: patch-net_base_net_util_linux_cc,v 1.2 2015/04/27 16:38:25 robert Exp $
@


1.1
log
@Initial revision
@
text
@d1 20
a20 4
$OpenBSD: patch-net_base_net_util_linux_cc,v 1.1 2015/03/21 14:11:19 robert Exp $
--- net/base/net_util_linux.cc.orig.port	Fri Mar 20 04:21:23 2015
+++ net/base/net_util_linux.cc	Sat Mar 21 12:14:10 2015
@@@@ -33,6 +33,7 @@@@ namespace {
d28 1
a28 1
@@@@ -55,6 +56,9 @@@@ bool TryConvertNativeToNetIPAttributes(int native_attr
d38 28
a65 2
@@@@ -69,6 +73,7 @@@@ inline const unsigned char* GetIPAddressData(const IPA
 #endif
d72 1
a72 1
@@@@ -136,6 +141,7 @@@@ bool GetNetworkListImpl(
d78 3
a80 3
 }  // namespace internal
 
@@@@ -143,12 +149,16 @@@@ bool GetNetworkList(NetworkInterfaceList* networks, in
d88 3
a90 3
   return internal::GetNetworkListImpl(networks, policy,
                                       tracker.GetOnlineLinks(),
                                       tracker.GetAddressMap(), &if_indextoname);
d96 1
a96 1
 }  // namespace net
@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
