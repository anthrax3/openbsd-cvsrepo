head	1.10;
access;
symbols
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2017.04.28.22.22.36;	author robert;	state Exp;
branches;
next	1.9;
commitid	hEiDsbcK5ON7rnmo;

1.9
date	2017.04.19.05.16.46;	author robert;	state Exp;
branches;
next	1.8;
commitid	jpW2BiKwA9H7U7d6;

1.8
date	2016.10.27.18.30.40;	author robert;	state Exp;
branches;
next	1.7;
commitid	lED1Oks5HVh03mCa;

1.7
date	2016.05.28.14.49.39;	author robert;	state Exp;
branches;
next	1.6;
commitid	e1vpcgKLVeZdUbdR;

1.6
date	2016.04.27.12.46.16;	author robert;	state Exp;
branches;
next	1.5;
commitid	yOrwVI71D7bLHmrO;

1.5
date	2016.03.23.20.13.06;	author robert;	state Exp;
branches;
next	1.4;
commitid	2hNT21XsdisESysQ;

1.4
date	2016.02.15.18.07.52;	author robert;	state Exp;
branches;
next	1.3;
commitid	R0eKGRSW56iYyJ8K;

1.3
date	2015.10.24.18.22.21;	author robert;	state Exp;
branches;
next	1.2;
commitid	HwRgK4asvw18PlFu;

1.2
date	2015.05.06.14.27.23;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.35;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.35;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.10
log
@update to 58.0
@
text
@$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.25 2017/04/28 14:21:00 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Thu Apr 27 21:34:42 2017
+++ base/debug/stack_trace_posix.cc	Fri Apr 28 07:24:14 2017
@@@@ -34,7 +34,7 @@@@
 #include <AvailabilityMacros.h>
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include "base/debug/proc_maps_linux.h"
 #endif
 
@@@@ -575,6 +575,10 @@@@ class SandboxSymbolizeHelper {
   // for the modules that are loaded in the current process.
   // Returns true on success.
   bool CacheMemoryRegions() {
+#if defined(OS_BSD)
+    NOTIMPLEMENTED();
+    return false;
+#else
     // Reads /proc/self/maps.
     std::string contents;
     if (!ReadProcMaps(&contents)) {
@@@@ -590,6 +594,7 @@@@ class SandboxSymbolizeHelper {
 
     is_initialized_ = true;
     return true;
+#endif
   }
 
   // Opens all object files and caches their file descriptors.
@@@@ -722,7 +727,7 @@@@ StackTrace::StackTrace(size_t count) {
 // NOTE: This code MUST be async-signal safe (it's used by in-process
 // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__)
+#if !defined(__UCLIBC__) && !defined(OS_BSD)
   count = std::min(arraysize(trace_), count);
 
   // Though the backtrace API man page does not list any possible negative
@


1.9
log
@update to 57.0
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.24 2017/03/14 12:18:53 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Thu Mar  9 21:04:26 2017
+++ base/debug/stack_trace_posix.cc	Fri Mar 10 18:55:57 2017
@@@@ -33,7 +33,7 @@@@
d13 1
a13 1
@@@@ -574,6 +574,9 @@@@ class SandboxSymbolizeHelper {
d17 2
a18 1
+#if defined(OS_OPENBSD)
d24 1
a24 1
@@@@ -589,6 +592,7 @@@@ class SandboxSymbolizeHelper {
d32 3
a34 3
@@@@ -721,7 +725,7 @@@@ StackTrace::StackTrace() {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
   // stack dumping signal handler). NO malloc or stdio is allowed here.
d38 2
a40 2
   // return values, we take no chance.
   count_ = base::saturated_cast<size_t>(backtrace(trace_, arraysize(trace_)));
@


1.8
log
@update to 54.0
@
text
@d1 13
a13 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.23 2016/10/26 06:22:07 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Oct 12 21:02:52 2016
+++ base/debug/stack_trace_posix.cc	Wed Oct 19 12:55:56 2016
@@@@ -571,6 +571,9 @@@@ class SandboxSymbolizeHelper {
d23 1
a23 1
@@@@ -586,6 +589,7 @@@@ class SandboxSymbolizeHelper {
d31 1
a31 1
@@@@ -718,7 +722,7 @@@@ StackTrace::StackTrace() {
@


1.7
log
@update to 51.1
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.22 2016/05/27 06:28:20 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed May 25 04:54:06 2016
+++ base/debug/stack_trace_posix.cc	Thu May 26 08:09:39 2016
@@@@ -572,6 +572,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -587,6 +590,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -717,7 +721,7 @@@@ StackTrace::StackTrace() {
@


1.6
log
@update to iridium-50.0 and sync recent changes with chromium
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.21 2016/04/16 19:08:45 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Apr 13 22:59:36 2016
+++ base/debug/stack_trace_posix.cc	Thu Apr 14 08:25:08 2016
@@@@ -571,6 +571,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -586,6 +589,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -716,7 +720,7 @@@@ StackTrace::StackTrace() {
@


1.5
log
@update to 49.0
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.20 2016/03/06 10:51:13 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Feb 24 21:01:30 2016
+++ base/debug/stack_trace_posix.cc	Thu Mar  3 09:43:25 2016
@@@@ -569,6 +569,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -584,6 +587,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -714,7 +718,7 @@@@ StackTrace::StackTrace() {
@


1.4
log
@update to 48.1 (based on the latest stable chromium which contains security
fixes as well)

ok naddy@@ sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.19 2016/01/23 18:49:31 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Jan 20 21:01:18 2016
+++ base/debug/stack_trace_posix.cc	Fri Jan 22 19:58:58 2016
@@@@ -567,6 +567,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -582,6 +585,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -712,7 +716,7 @@@@ StackTrace::StackTrace() {
@


1.3
log
@update to 46.0rc1
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.18 2015/10/14 16:42:07 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Oct  7 04:42:06 2015
+++ base/debug/stack_trace_posix.cc	Wed Oct 14 07:41:12 2015
@@@@ -599,6 +599,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -614,6 +617,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -744,7 +748,7 @@@@ StackTrace::StackTrace() {
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 4
a4 4
$OpenBSD: patch-base_debug_stack_trace_posix_cc,v 1.17 2015/01/22 11:16:40 robert Exp $
--- base/debug/stack_trace_posix.cc.orig.port	Wed Dec  3 03:13:19 2014
+++ base/debug/stack_trace_posix.cc	Sat Dec  6 11:34:24 2014
@@@@ -586,6 +586,9 @@@@ class SandboxSymbolizeHelper {
d14 1
a14 1
@@@@ -601,6 +604,7 @@@@ class SandboxSymbolizeHelper {
d22 1
a22 1
@@@@ -738,7 +742,7 @@@@ StackTrace::StackTrace() {
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
