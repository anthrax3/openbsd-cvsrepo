head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.2
	OPENBSD_6_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2017.04.28.22.22.36;	author robert;	state Exp;
branches;
next	;
commitid	hEiDsbcK5ON7rnmo;


desc
@@


1.1
log
@update to 58.0
@
text
@$OpenBSD: patch-chrome_app_shutdown_signal_handlers_posix_cc,v 1.1 2017/04/28 14:21:00 robert Exp $
--- chrome/app/shutdown_signal_handlers_posix.cc.orig.port	Fri Apr 28 07:25:05 2017
+++ chrome/app/shutdown_signal_handlers_posix.cc	Fri Apr 28 07:25:42 2017
@@@@ -183,6 +183,11 @@@@ void InstallShutdownSignalHandlers(
   g_pipe_pid = getpid();
   g_shutdown_pipe_read_fd = pipefd[0];
   g_shutdown_pipe_write_fd = pipefd[1];
+#if defined(OS_OPENBSD)
+  // PTHREAD_STACK_MIN causes chromium to crash under FreeBSD,
+  // we request the default pthread stack size by specifying 0 here.
+  const size_t kShutdownDetectorThreadStackSize = 0;
+#else
 #if !defined(ADDRESS_SANITIZER) && !defined(KEEP_SHADOW_STACKS)
   const size_t kShutdownDetectorThreadStackSize = PTHREAD_STACK_MIN * 2;
 #else
@@@@ -190,6 +195,7 @@@@ void InstallShutdownSignalHandlers(
   // shadow stacks) bloat the stack frames, so we need to increase the stack
   // size to avoid hitting the guard page.
   const size_t kShutdownDetectorThreadStackSize = PTHREAD_STACK_MIN * 4;
+#endif
 #endif
   ShutdownDetector* detector = new ShutdownDetector(
       g_shutdown_pipe_read_fd, shutdown_callback, task_runner);
@
