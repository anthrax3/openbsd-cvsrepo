head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	robert_20150503:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2016.10.27.18.30.41;	author robert;	state Exp;
branches;
next	1.11;
commitid	lED1Oks5HVh03mCa;

1.11
date	2016.05.28.14.49.39;	author robert;	state Exp;
branches;
next	1.10;
commitid	e1vpcgKLVeZdUbdR;

1.10
date	2016.04.27.12.46.16;	author robert;	state Exp;
branches;
next	1.9;
commitid	yOrwVI71D7bLHmrO;

1.9
date	2016.03.23.20.13.07;	author robert;	state Exp;
branches;
next	1.8;
commitid	2hNT21XsdisESysQ;

1.8
date	2016.02.15.18.07.53;	author robert;	state Exp;
branches;
next	1.7;
commitid	R0eKGRSW56iYyJ8K;

1.7
date	2016.02.01.15.09.01;	author robert;	state Exp;
branches;
next	1.6;
commitid	y13gJFCxfcrc1u7F;

1.6
date	2015.12.17.07.02.48;	author robert;	state Exp;
branches;
next	1.5;
commitid	ipujnT7CBcOVRvhV;

1.5
date	2015.10.24.18.22.21;	author robert;	state Exp;
branches;
next	1.4;
commitid	HwRgK4asvw18PlFu;

1.4
date	2015.08.12.10.56.13;	author robert;	state Exp;
branches;
next	1.3;
commitid	WokHnx1ONPqT4wiW;

1.3
date	2015.05.26.17.37.40;	author robert;	state Exp;
branches;
next	1.2;
commitid	imvK5OAjfFzbGwip;

1.2
date	2015.05.06.14.27.24;	author robert;	state Exp;
branches;
next	1.1;
commitid	0TVTUxEI0BYra21v;

1.1
date	2015.05.03.15.35.37;	author robert;	state Exp;
branches
	1.1.1.1;
next	;
commitid	O1GeKHU5BcsYea8a;

1.1.1.1
date	2015.05.03.15.35.37;	author robert;	state Exp;
branches;
next	;
commitid	O1GeKHU5BcsYea8a;


desc
@@


1.12
log
@update to 54.0
@
text
@$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.31 2016/10/26 06:22:08 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Oct 12 21:02:59 2016
+++ content/browser/child_process_launcher.cc	Wed Oct 19 12:56:03 2016
@@@@ -258,7 +258,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
   // We need to close the client end of the IPC channel to reliably detect
   // child termination.
 
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
   ZygoteHandle* zygote_handle = delegate->GetZygote();
   // If |zygote_handle| is null, a zygote should not be used.
   if (zygote_handle) {
@@@@ -364,7 +364,7 @@@@ void TerminateOnLauncherThread(ZygoteHandle zygote, ba
   process.Terminate(RESULT_CODE_NORMAL_EXIT, false);
   // On POSIX, we must additionally reap the child.
 #if defined(OS_POSIX)
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
   if (zygote) {
     // If the renderer was created via a zygote, we have to proxy the reaping
     // through the zygote process.
@@@@ -485,7 +485,7 @@@@ void ChildProcessLauncher::Launch(
 
 void ChildProcessLauncher::UpdateTerminationStatus(bool known_dead) {
   DCHECK(CalledOnValidThread());
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
   if (zygote_) {
     termination_status_ = zygote_->GetTerminationStatus(
         process_.Handle(), known_dead, &exit_code_);
@@@@ -566,7 +566,7 @@@@ void ChildProcessLauncher::Notify(ZygoteHandle zygote,
                                     mojo_child_token_, process_error_callback_);
   }
 
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
   zygote_ = zygote;
 #endif
   if (process_.IsValid()) {
@


1.11
log
@update to 51.1
@
text
@d1 4
a4 4
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.28 2016/05/27 06:28:21 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed May 25 21:01:01 2016
+++ content/browser/child_process_launcher.cc	Thu May 26 08:09:46 2016
@@@@ -251,7 +251,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d13 1
a13 1
@@@@ -355,7 +355,7 @@@@ void TerminateOnLauncherThread(ZygoteHandle zygote, ba
d22 1
a22 1
@@@@ -459,7 +459,7 @@@@ void ChildProcessLauncher::Launch(
d31 2
a32 2
@@@@ -536,7 +536,7 @@@@ void ChildProcessLauncher::Notify(ZygoteHandle zygote,
                                     mojo_platform_channel_.PassServerHandle());
@


1.10
log
@update to iridium-50.0 and sync recent changes with chromium
@
text
@d1 4
a4 4
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.27 2016/04/16 19:08:46 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Thu Apr 14 13:59:42 2016
+++ content/browser/child_process_launcher.cc	Thu Apr 14 14:01:41 2016
@@@@ -229,7 +229,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d13 1
a13 1
@@@@ -333,7 +333,7 @@@@ void TerminateOnLauncherThread(ZygoteHandle zygote, ba
d22 1
a22 1
@@@@ -435,7 +435,7 @@@@ void ChildProcessLauncher::Launch(
d31 3
a33 3
@@@@ -505,7 +505,7 @@@@ void ChildProcessLauncher::Notify(ZygoteHandle zygote,
   starting_ = false;
   process_ = std::move(process);
@


1.9
log
@update to 49.0
@
text
@d1 4
a4 16
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.26 2016/03/06 10:51:14 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Feb 24 21:01:32 2016
+++ content/browser/child_process_launcher.cc	Thu Mar  3 09:43:26 2016
@@@@ -116,7 +116,11 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
   base::EnvironmentMap env = delegate->GetEnvironment();
   base::ScopedFD ipcfd = delegate->TakeIpcFd();
 #elif defined(OS_POSIX) && !defined(OS_ANDROID)
+#if !defined(OS_BSD)
   bool use_zygote = delegate->ShouldUseZygote();
+#else
+  bool use_zygote = false;
+#endif
   base::EnvironmentMap env = delegate->GetEnvironment();
   base::ScopedFD ipcfd = delegate->TakeIpcFd();
 #endif
@@@@ -198,7 +202,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d10 4
a13 4
   if (use_zygote) {
     base::ProcessHandle handle = ZygoteHostImpl::GetInstance()->ForkRequest(
         cmd_line->argv(), std::move(files_to_register), process_type);
@@@@ -296,7 +300,7 @@@@ void TerminateOnLauncherThread(bool zygote, base::Proc
d22 1
a22 1
@@@@ -398,7 +402,7 @@@@ void ChildProcessLauncher::Launch(
d29 3
a31 3
     termination_status_ = ZygoteHostImpl::GetInstance()->
         GetTerminationStatus(process_.Handle(), known_dead, &exit_code_);
@@@@ -469,7 +473,7 @@@@ void ChildProcessLauncher::Notify(
@


1.8
log
@update to 48.1 (based on the latest stable chromium which contains security
fixes as well)

ok naddy@@ sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.25 2016/01/23 20:43:27 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Jan 20 21:01:21 2016
+++ content/browser/child_process_launcher.cc	Sat Jan 23 20:10:57 2016
@@@@ -114,7 +114,11 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d16 1
a16 1
@@@@ -196,7 +200,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d24 2
a25 2
         cmd_line->argv(), files_to_register.Pass(), process_type);
@@@@ -298,7 +302,7 @@@@ void TerminateOnLauncherThread(bool zygote, base::Proc
d34 1
a34 1
@@@@ -400,7 +404,7 @@@@ void ChildProcessLauncher::Launch(
d43 1
a43 1
@@@@ -482,7 +486,7 @@@@ void ChildProcessLauncher::Notify(
d45 1
a45 1
   process_ = process.Pass();
@


1.7
log
@switch to libjpeg_turbo and merge the sandbox font handling patches from
chromium
@
text
@d1 3
a3 3
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.6 2015/12/17 07:02:48 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Tue Dec 15 21:05:10 2015
+++ content/browser/child_process_launcher.cc	Mon Feb  1 08:23:43 2016
@


1.6
log
@update to 47.0rc1
@
text
@d1 3
a3 3
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.24 2015/12/05 16:13:32 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Tue Nov 24 21:00:54 2015
+++ content/browser/child_process_launcher.cc	Wed Dec  2 08:18:32 2015
a24 9
@@@@ -210,7 +214,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
         files_to_register->GetMappingWithIDAdjustment(
             base::GlobalDescriptors::kBaseDescriptor);
 
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
     if (process_type == switches::kRendererProcess) {
       const int sandbox_fd =
           RenderSandboxHostLinux::GetInstance()->GetRendererSocket();
@


1.5
log
@update to 46.0rc1
@
text
@d1 3
a3 3
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.23 2015/09/05 16:06:50 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Sep  2 07:44:50 2015
+++ content/browser/child_process_launcher.cc	Wed Sep  2 07:46:27 2015
d34 1
a34 1
@@@@ -294,7 +298,7 @@@@ void TerminateOnLauncherThread(bool zygote, base::Proc
d43 1
a43 1
@@@@ -399,7 +403,7 @@@@ void ChildProcessLauncher::Launch(
d52 1
a52 1
@@@@ -481,7 +485,7 @@@@ void ChildProcessLauncher::Notify(
@


1.4
log
@update to iridium-44.0 and also incorporate a patch from dcoppa@@
for the startup script that still had references to chromium directories.
@
text
@d1 4
a4 4
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.22 2015/07/23 13:44:04 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Jul 15 22:30:02 2015
+++ content/browser/child_process_launcher.cc	Wed Jul 22 08:37:29 2015
@@@@ -111,7 +111,11 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d16 1
a16 1
@@@@ -157,7 +161,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
a21 2
   GetContentClient()->browser()->GetAdditionalMappedFilesForChildProcess(
       *cmd_line, child_process_id, files_to_register.get());
d23 3
a25 1
@@@@ -173,7 +177,7 @@@@ void LaunchOnLauncherThread(const NotifyCallback& call
d34 1
a34 1
@@@@ -254,7 +258,7 @@@@ void TerminateOnLauncherThread(bool zygote, base::Proc
d43 1
a43 1
@@@@ -359,7 +363,7 @@@@ void ChildProcessLauncher::Launch(
d52 1
a52 1
@@@@ -441,7 +445,7 @@@@ void ChildProcessLauncher::Notify(
@


1.3
log
@update to 43.1
@
text
@d1 3
a3 3
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.21 2015/05/24 15:51:53 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Thu May 14 00:23:06 2015
+++ content/browser/child_process_launcher.cc	Sat May 23 00:51:33 2015
d43 1
a43 1
@@@@ -351,7 +355,7 @@@@ void ChildProcessLauncher::Launch(
d52 1
a52 1
@@@@ -433,7 +437,7 @@@@ void ChildProcessLauncher::Notify(
@


1.2
log
@update to iridium-browser-42.0
@
text
@d1 4
a4 58
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.20 2015/04/27 16:38:25 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Apr 15 00:31:22 2015
+++ content/browser/child_process_launcher.cc	Wed Apr 15 08:32:50 2015
@@@@ -120,7 +120,7 @@@@ class ChildProcessLauncher::Context
   // Notifies the client about the result of the operation.
   // Runs on the UI thread.
   void Notify(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
       bool zygote,
 #endif
       base::Process process);
@@@@ -131,7 +131,7 @@@@ class ChildProcessLauncher::Context
                                              bool background);
 
   static void TerminateInternal(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
       bool zygote,
 #endif
       base::Process process);
@@@@ -144,7 +144,7 @@@@ class ChildProcessLauncher::Context
 #if defined(OS_ANDROID)
   // The fd to close after creating the process.
   base::ScopedFD ipcfd_;
-#elif defined(OS_POSIX) && !defined(OS_MACOSX)
+#elif defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_BSD)
   bool zygote_;
 #endif
   bool starting_;
@@@@ -158,7 +158,7 @@@@ ChildProcessLauncher::Context::Context()
       client_thread_id_(BrowserThread::UI),
       termination_status_(base::TERMINATION_STATUS_NORMAL_TERMINATION),
       exit_code_(RESULT_CODE_NORMAL_EXIT),
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
       zygote_(false),
 #endif
       starting_(true),
@@@@ -238,7 +238,7 @@@@ void ChildProcessLauncher::Context::ResetClient() {
 }
 
 void ChildProcessLauncher::Context::UpdateTerminationStatus(bool known_dead) {
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
   if (zygote_) {
     termination_status_ = ZygoteHostImpl::GetInstance()->
         GetTerminationStatus(process_.Handle(), known_dead, &exit_code_);
@@@@ -246,7 +246,7 @@@@ void ChildProcessLauncher::Context::UpdateTerminationS
     termination_status_ =
         base::GetKnownDeadTerminationStatus(process_.Handle(), &exit_code_);
   } else {
-#elif defined(OS_MACOSX)
+#elif defined(OS_MACOSX) || defined(OS_BSD)
   if (known_dead) {
     termination_status_ =
         base::GetKnownDeadTerminationStatus(process_.Handle(), &exit_code_);
@@@@ -316,7 +316,9 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d7 1
a7 1
 #elif defined(OS_POSIX)
d10 2
d16 1
a16 1
@@@@ -366,7 +368,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d25 1
a25 1
@@@@ -382,7 +384,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d34 10
a43 11
@@@@ -446,7 +448,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
       client_thread_id, FROM_HERE,
       base::Bind(&Context::Notify,
                  this_object.get(),
-#if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_BSD)
                  use_zygote,
 #endif
                  base::Passed(&process)));
@@@@ -454,7 +456,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
 }
d45 2
a46 1
 void ChildProcessLauncher::Context::Notify(
d49 6
a54 6
     bool zygote,
 #endif
     base::Process process) {
@@@@ -467,7 +469,7 @@@@ void ChildProcessLauncher::Context::Notify(
   if (!process_.IsValid())
     LOG(ERROR) << "Failed to launch child process";
d60 1
a60 28
   if (client_) {
@@@@ -493,7 +495,7 @@@@ void ChildProcessLauncher::Context::Terminate() {
   BrowserThread::PostTask(
       BrowserThread::PROCESS_LAUNCHER, FROM_HERE,
       base::Bind(&Context::TerminateInternal,
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
                 zygote_,
 #endif
                 base::Passed(&process_)));
@@@@ -511,7 +513,7 @@@@ void ChildProcessLauncher::Context::SetProcessBackgrou
 
 // static
 void ChildProcessLauncher::Context::TerminateInternal(
-#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)
+#if defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)
     bool zygote,
 #endif
     base::Process process) {
@@@@ -525,7 +527,7 @@@@ void ChildProcessLauncher::Context::TerminateInternal(
   process.Terminate(RESULT_CODE_NORMAL_EXIT);
   // On POSIX, we must additionally reap the child.
 #if defined(OS_POSIX)
-#if !defined(OS_MACOSX)
+#if !defined(OS_MACOSX) && !defined(OS_BSD)
   if (zygote) {
     // If the renderer was created via a zygote, we have to proxy the reaping
     // through the zygote process.
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD: patch-content_browser_child_process_launcher_cc,v 1.19 2015/03/18 19:26:29 robert Exp $
--- content/browser/child_process_launcher.cc.orig.port	Wed Mar 11 07:35:16 2015
+++ content/browser/child_process_launcher.cc	Wed Mar 11 21:28:07 2015
@@@@ -121,7 +121,7 @@@@ class ChildProcessLauncher::Context
d13 1
a13 1
@@@@ -132,7 +132,7 @@@@ class ChildProcessLauncher::Context
d22 1
a22 1
@@@@ -145,7 +145,7 @@@@ class ChildProcessLauncher::Context
d31 1
a31 1
@@@@ -159,7 +159,7 @@@@ ChildProcessLauncher::Context::Context()
d40 1
a40 1
@@@@ -239,7 +239,7 @@@@ void ChildProcessLauncher::Context::ResetClient() {
d49 1
a49 1
@@@@ -247,7 +247,7 @@@@ void ChildProcessLauncher::Context::UpdateTerminationS
d58 1
a58 1
@@@@ -317,7 +317,9 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d68 1
a68 1
@@@@ -375,7 +377,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d77 1
a77 1
@@@@ -390,7 +392,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d86 1
a86 1
@@@@ -457,7 +459,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d95 1
a95 1
@@@@ -465,7 +467,7 @@@@ void ChildProcessLauncher::Context::LaunchInternal(
d104 1
a104 1
@@@@ -478,7 +480,7 @@@@ void ChildProcessLauncher::Context::Notify(
d113 1
a113 1
@@@@ -504,7 +506,7 @@@@ void ChildProcessLauncher::Context::Terminate() {
d122 1
a122 1
@@@@ -522,7 +524,7 @@@@ void ChildProcessLauncher::Context::SetProcessBackgrou
d131 1
a131 1
@@@@ -536,7 +538,7 @@@@ void ChildProcessLauncher::Context::TerminateInternal(
@


1.1.1.1
log
@import of iridium-41.2:

Iridium is a free, open, and libre browser modification of the Chromium code base,
with privacy being enhanced in several key areas.
Automatic transmission of partial queries, keywords, metrics to central services
inhibited and only occurs with consent.
In addition, all our builds are reproducible, and modifications are auditable,
setting the project ahead of other secure browser providers.

For more information, visit: https://iridiumbrowser.de/about

ok ajacoutot@@
@
text
@@
