head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@# @;


1.7
date	2016.10.27.18.30.41;	author robert;	state Exp;
branches;
next	1.6;
commitid	lED1Oks5HVh03mCa;

1.6
date	2016.07.12.06.05.32;	author robert;	state Exp;
branches;
next	1.5;
commitid	ITZF1GxikKWpbxyb;

1.5
date	2016.05.28.14.49.39;	author robert;	state Exp;
branches;
next	1.4;
commitid	e1vpcgKLVeZdUbdR;

1.4
date	2016.04.27.12.46.16;	author robert;	state Exp;
branches;
next	1.3;
commitid	yOrwVI71D7bLHmrO;

1.3
date	2016.02.15.18.07.53;	author robert;	state Exp;
branches;
next	1.2;
commitid	R0eKGRSW56iYyJ8K;

1.2
date	2016.01.08.15.18.09;	author robert;	state Exp;
branches;
next	1.1;
commitid	GGnNyVdaRZkrDRcU;

1.1
date	2016.01.07.07.26.40;	author robert;	state Exp;
branches;
next	;
commitid	TBD9NMbFa6lHNIhT;


desc
@@


1.7
log
@update to 54.0
@
text
@$OpenBSD: patch-content_common_sandbox_init_openbsd_cc,v 1.6 2016/07/12 06:05:32 robert Exp $
--- content/common/sandbox_init_openbsd.cc.orig.port	Mon Jul 11 19:28:28 2016
+++ content/common/sandbox_init_openbsd.cc	Tue Jul 12 07:50:19 2016
@@@@ -0,0 +1,77 @@@@
+/*
+ * Copyright (c) 2016 Robert Nagy <robert@@openbsd.org>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include "content/common/sandbox_init_openbsd.h"
+
+#include "base/command_line.h"
+#include "base/logging.h"
+#include "base/rand_util.h"
+#include "base/sys_info.h"
+#include "content/public/common/content_switches.h"
+#include "content/public/common/sandbox_init.h"
+
+namespace content {
+
+bool InitializeSandbox() {
+  const base::CommandLine& command_line =
+      *base::CommandLine::ForCurrentProcess();
+  if (command_line.HasSwitch(switches::kNoSandbox))
+    return false;
+
+  std::string process_type =
+      command_line.GetSwitchValueASCII(switches::kProcessType);
+  VLOG(1) << "InitializeSandbox() process_type=" << process_type;
+  if (process_type.empty()) {
+    // Browser process isn't sandboxed.
+    return false;
+  } else if (process_type == switches::kRendererProcess) {
+    // prot_exec needed by v8
+    // flock needed by sqlite3 locking
+    if (pledge("stdio rpath flock prot_exec recvfd sendfd", NULL) == -1) {
+      LOG(ERROR) << "pledge() failed, errno: " << errno;
+      _exit(1);
+    }
+  } else if (process_type == switches::kGpuProcess) {
+    if (pledge("stdio drm prot_exec recvfd sendfd", NULL) == -1) {
+      LOG(ERROR) << "pledge() failed, errno: " << errno;
+      _exit(1);
+    }
+  } else if ((process_type == switches::kPpapiInProcess) ||
+             (process_type == switches::kPpapiPluginProcess)) {
+    // "cache" the amount of physical memory before pledge(2)
+    base::SysInfo::AmountOfPhysicalMemoryMB();
+    // Allow access to /dev/urandom.
+    base::GetUrandomFD();
+    // prot_exec needed by v8
+    if (pledge("stdio prot_exec recvfd sendfd", NULL) == -1) {
+      LOG(ERROR) << "pledge() failed, errno: " << errno;
+      _exit(1);
+    }
+  } else if (process_type == switches::kUtilityProcess) {
+    // "cache" the amount of physical memory before pledge(2)
+    base::SysInfo::AmountOfPhysicalMemoryMB();
+    if (pledge("stdio rpath cpath wpath fattr recvfd", NULL) == -1) {
+      LOG(ERROR) << "pledge() failed, errno: " << errno;
+      _exit(1);
+    }
+  } else {
+    return false;
+  }
+
+  return true;
+}
+
+}  // namespace content
@


1.6
log
@add the required recvfd pledges
@
text
@d1 3
a3 3
$OpenBSD: patch-content_common_sandbox_init_openbsd_cc,v 1.5 2016/05/28 14:49:39 robert Exp $
--- content/common/sandbox_init_openbsd.cc.orig.port	Thu May 26 08:09:46 2016
+++ content/common/sandbox_init_openbsd.cc	Thu May 26 14:18:22 2016
@


1.5
log
@update to 51.1
@
text
@d1 1
a1 1
$OpenBSD: patch-content_common_sandbox_init_openbsd_cc,v 1.5 2016/05/27 06:28:21 robert Exp $
d47 1
a47 1
+    if (pledge("stdio rpath flock prot_exec sendfd", NULL) == -1) {
d52 1
a52 1
+    if (pledge("stdio drm prot_exec sendfd", NULL) == -1) {
d63 1
a63 1
+    if (pledge("stdio prot_exec sendfd", NULL) == -1) {
d70 1
a70 1
+    if (pledge("stdio rpath cpath wpath fattr", NULL) == -1) {
@


1.4
log
@update to iridium-50.0 and sync recent changes with chromium
@
text
@d1 3
a3 3
$OpenBSD: patch-content_common_sandbox_init_openbsd_cc,v 1.4 2016/04/25 17:12:53 robert Exp $
--- content/common/sandbox_init_openbsd.cc.orig.port	Fri Apr 22 21:49:42 2016
+++ content/common/sandbox_init_openbsd.cc	Mon Apr 25 18:06:32 2016
d56 1
a56 1
+  } else if ((process_type == switches::kPluginProcess) ||
@


1.3
log
@update to 48.1 (based on the latest stable chromium which contains security
fixes as well)

ok naddy@@ sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-content_common_sandbox_init_openbsd_cc,v 1.3 2016/01/23 18:49:31 robert Exp $
--- content/common/sandbox_init_openbsd.cc.orig.port	Fri Jan 22 20:01:50 2016
+++ content/common/sandbox_init_openbsd.cc	Sat Jan 23 13:18:46 2016
@@@@ -0,0 +1,76 @@@@
d59 3
a61 4
+    {
+      base::SysInfo::AmountOfPhysicalMemoryMB();
+      base::GetUrandomFD();
+    }
d68 2
@


1.2
log
@remove rpath from the GPU process's pledge call now that mesa has been taken care of
@
text
@d1 4
a4 4
$OpenBSD: patch-content_common_sandbox_init_openbsd_cc,v 1.1 2016/01/07 07:26:40 robert Exp $
--- content/common/sandbox_init_openbsd.cc.orig.port	Wed Jan  6 22:49:50 2016
+++ content/common/sandbox_init_openbsd.cc	Fri Jan  8 15:25:58 2016
@@@@ -0,0 +1,74 @@@@
d25 1
d61 1
@


1.1
log
@pledge(2) iridium as well by syncing with the chromium port
@
text
@d1 3
a3 3
$OpenBSD$
--- content/common/sandbox_init_openbsd.cc.orig.port	Sun Jan  3 21:05:02 2016
+++ content/common/sandbox_init_openbsd.cc	Wed Jan  6 20:57:58 2016
d51 1
a51 1
+    if (pledge("stdio rpath drm prot_exec sendfd", NULL) == -1) {
@

