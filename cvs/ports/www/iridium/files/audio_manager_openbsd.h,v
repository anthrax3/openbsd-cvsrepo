head	1.4;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2017.04.19.05.16.46;	author robert;	state Exp;
branches;
next	1.3;
commitid	jpW2BiKwA9H7U7d6;

1.3
date	2016.10.27.18.30.40;	author robert;	state Exp;
branches;
next	1.2;
commitid	lED1Oks5HVh03mCa;

1.2
date	2016.04.27.12.46.16;	author robert;	state Exp;
branches;
next	1.1;
commitid	yOrwVI71D7bLHmrO;

1.1
date	2015.12.17.07.02.48;	author robert;	state Exp;
branches;
next	;
commitid	ipujnT7CBcOVRvhV;


desc
@@


1.4
log
@update to 57.0
@
text
@// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_AUDIO_OPENBSD_AUDIO_MANAGER_OPENBSD_H_
#define MEDIA_AUDIO_OPENBSD_AUDIO_MANAGER_OPENBSD_H_

#include <set>

#include "base/compiler_specific.h"
#include "base/macros.h"
#include "base/memory/ref_counted.h"
#include "base/threading/thread.h"
#include "media/audio/audio_manager_base.h"

namespace media {

class MEDIA_EXPORT AudioManagerOpenBSD : public AudioManagerBase {
 public:
  AudioManagerOpenBSD(
      scoped_refptr<base::SingleThreadTaskRunner> task_runner,
      scoped_refptr<base::SingleThreadTaskRunner> worker_task_runner,
      AudioLogFactory* audio_log_factory);

  // Implementation of AudioManager.
  bool HasAudioOutputDevices() override;
  bool HasAudioInputDevices() override;
  void ShowAudioInputSettings() override;
  void GetAudioInputDeviceNames(AudioDeviceNames* device_names) override;
  void GetAudioOutputDeviceNames(AudioDeviceNames* device_names) override;
  AudioParameters GetInputStreamParameters(
      const std::string& device_id) override;
  const char* GetName() override;

  // Implementation of AudioManagerBase.
  AudioOutputStream* MakeLinearOutputStream(
      const AudioParameters& params,
      const LogCallback& log_callback) override;
  AudioOutputStream* MakeLowLatencyOutputStream(
      const AudioParameters& params,
      const std::string& device_id,
      const LogCallback& log_callback) override;
  AudioInputStream* MakeLinearInputStream(
      const AudioParameters& params,
      const std::string& device_id,
      const LogCallback& log_callback) override;
  AudioInputStream* MakeLowLatencyInputStream(
      const AudioParameters& params,
      const std::string& device_id,
      const LogCallback& log_callback) override;

 protected:
  ~AudioManagerOpenBSD() override;

  AudioParameters GetPreferredOutputStreamParameters(
      const std::string& output_device_id,
      const AudioParameters& input_params) override;

 private:
  // Called by MakeLinearOutputStream and MakeLowLatencyOutputStream.
  AudioOutputStream* MakeOutputStream(const AudioParameters& params);
  AudioInputStream* MakeInputStream(const AudioParameters& params);

  DISALLOW_COPY_AND_ASSIGN(AudioManagerOpenBSD);
};

}  // namespace media

#endif  // MEDIA_AUDIO_OPENBSD_AUDIO_MANAGER_OPENBSD_H_
@


1.3
log
@update to 54.0
@
text
@d11 1
d13 1
d33 1
a62 3

  // Flag to indicate whether the pulse library has been initialized or not.
  bool pulse_library_is_initialized_;
@


1.2
log
@update to iridium-50.0 and sync recent changes with chromium
@
text
@d11 1
d18 4
a21 1
  AudioManagerOpenBSD(AudioLogFactory* audio_log_factory);
d34 2
a35 1
      const AudioParameters& params) override;
d38 2
a39 1
      const std::string& device_id) override;
d41 3
a43 1
      const AudioParameters& params, const std::string& device_id) override;
d45 3
a47 1
      const AudioParameters& params, const std::string& device_id) override;
@


1.1
log
@update to 47.0rc1
@
text
@d22 3
d49 1
@

