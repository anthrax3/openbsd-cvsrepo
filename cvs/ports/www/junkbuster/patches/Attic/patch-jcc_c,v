head	1.7;
access;
symbols
	OPENBSD_5_9:1.6.0.22
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.24
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.20
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.18
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.16
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.14
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.12
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.10
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.8
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.18
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.14
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.12
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.18
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.16
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.14
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.12
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_TRACKING_SWITCH:1.4
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	lebel-2001-Apr-19:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.03.18.15.25.31;	author mmcc;	state dead;
branches;
next	1.6;
commitid	DIsPE0FSUAHu96Db;

1.6
date	2010.05.24.22.17.03;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.14.17.23.36;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.09.04.21.29;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.09.04.02.20;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.09.02.36.48;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.15.46.34;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.04.19.15.46.34;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove www/junkbuster.

The code is unmodified since 2001, there are a bunch of patches fixing
dangerous-looking buffer problems, it's very exposed code, and
www/privoxy is the obvious maintained alternative.

ok dickman@@, jacoutot@@, sthen@@, jca@@
@
text
@$OpenBSD: patch-jcc_c,v 1.6 2010/05/24 22:17:03 espie Exp $
--- jcc.c.orig	Sat Oct 31 04:58:47 1998
+++ jcc.c	Tue May 25 00:15:28 2010
@@@@ -126,9 +126,10 @@@@ int add_forwarded      = 0;
 struct client_state clients[1];
 struct file_list    files[1];
 
-struct list wafer_list[1];
-struct list xtra_list[1];
-struct list trust_info[1];
+static struct list wafer_storage, xtra_storage, trust_storage;
+struct list *wafer_list = &wafer_storage;
+struct list *xtra_list = &xtra_storage;
+struct list *trust_info = &trust_storage;
 
 struct url_spec * trust_list[64];
 
@@@@ -226,7 +227,7 @@@@ chat(struct client_state *csp)
 	}
 
 	if(http->cmd == NULL) {
-		strcpy(buf, CHEADER);
+		strlcpy(buf, CHEADER, sizeof(buf));
 		write_socket(csp->cfd, buf, strlen(buf));
 		return;
 	}
@@@@ -369,12 +370,19 @@@@ chat(struct client_state *csp)
 		}
 
 		if(errno == EINVAL) {
-			err = zalloc(strlen(CNXDOM) + strlen(http->host));
-			sprintf(err, CNXDOM, http->host);
+			if ((err = zalloc(strlen(CNXDOM) + strlen(http->host))) == NULL) {
+			   fprintf(stderr, "%s:%d zalloc failed\n", __FILE__, __LINE__);
+			   exit(-1);
+			} 
+			   snprintf(err, (strlen(CNXDOM) + strlen(http->host)), CNXDOM, http->host);
+			
 		} else {
 			eno = safe_strerror(errno);
-			err = zalloc(strlen(CFAIL) + strlen(http->hostport) + strlen(eno));
-			sprintf(err, CFAIL, http->hostport, eno);
+			if ((err = zalloc(strlen(CFAIL) + strlen(http->hostport) + strlen(eno))) == NULL) {
+			   fprintf(stderr, "%s:%d zalloc failed\n", __FILE__, __LINE__);
+			   exit(-1);
+			}
+			snprintf(err, (strlen(CFAIL) + strlen(http->hostport) + strlen(eno)), CFAIL, http->hostport, eno);
 		}
 
 		write_socket(csp->cfd, err, strlen(err));
@@@@ -406,8 +414,11 @@@@ chat(struct client_state *csp)
 			}
 
 			eno = safe_strerror(errno);
-			err = zalloc(strlen(CFAIL) + strlen(http->hostport) + strlen(eno));
-			sprintf(err, CFAIL, http->hostport, eno);
+			if ((err = zalloc(strlen(CFAIL) + strlen(http->hostport) + strlen(eno))) == NULL) {
+			   fprintf(stderr, "%s:%d zalloc failed\n", __FILE__, __LINE__);
+			   exit(-1);
+			}
+			snprintf(err,(strlen(CFAIL) + strlen(http->hostport)), CFAIL, http->hostport, eno);
 			write_socket(csp->cfd, err, strlen(err));
 
 			freez(err);
@@@@ -488,7 +499,7 @@@@ chat(struct client_state *csp)
 				fperror(logfp, "");
 
 				eno = safe_strerror(errno);
-				sprintf(buf, CFAIL, http->hostport, eno);
+				snprintf(buf, sizeof(buf), CFAIL, http->hostport, eno);
 				freez(eno);
 				write_socket(csp->cfd, buf, strlen(buf));
 				return;
@@@@ -606,6 +617,14 @@@@ server_thread(void *data)
 }
 #endif
 
+void
+sigcatcher(int sigraised)
+{
+	if (sigraised == SIGCHLD) {
+		waitpid(-1, NULL, WNOHANG);
+	}
+}
+
 int
 main(int argc, char *argv[])
 {
@@@@ -661,7 +680,7 @@@@ main(int argc, char *argv[])
 
 			line_num++;
 
-			strcpy(tmp, buf);
+			strlcpy(tmp, buf, sizeof(tmp));
 
 			if((p = strpbrk(tmp, "#\r\n"))) *p = '\0';
 
@@@@ -678,7 +697,7 @@@@ main(int argc, char *argv[])
 
 			while(*p && ((*p == ' ') || (*p == '\t'))) p++;
 
-			strcpy(arg, p);
+			strlcpy(arg, p, sizeof(arg));
 
 			p = arg + strlen(arg) - 1;
 
@@@@ -891,8 +910,12 @@@@ main(int argc, char *argv[])
 
 #ifndef _WIN32
 	signal(SIGPIPE, SIG_IGN);
+#ifdef __OpenBSD__
+	signal(SIGCHLD, sigcatcher);
+#else
 	signal(SIGCHLD, SIG_IGN);
 #endif
+#endif
 
 #ifdef _WIN32
 {
@@@@ -994,7 +1017,7 @@@@ main(int argc, char *argv[])
 				fprintf(logfp, "%s: can't fork: ", prog);
 				fperror(logfp, "");
 
-				sprintf(buf , "%s: can't fork: errno = %d",
+				snprintf(buf , sizeof(buf),"%s: can't fork: errno = %d",
 					prog, errno);
 
 				write_socket(csp->cfd, buf, strlen(buf));
@@@@ -1043,7 +1066,7 @@@@ safe_strerror(int err)
 #endif /* NOSTRERROR */
 
 	if(s == NULL) {
-		sprintf(buf, "(errno = %d)", err);
+		snprintf(buf, sizeof(buf),"(errno = %d)", err);
 		s = buf;
 	}
 
@


1.6
log
@fix for gcc4
@
text
@d1 1
a1 1
$OpenBSD: patch-jcc_c,v 1.5 2005/11/14 17:23:36 pvalchev Exp $
@


1.5
log
@remove wrong strncmp
@
text
@d1 18
a18 4
$OpenBSD: patch-jcc_c,v 1.4 2001/06/09 04:21:29 angelos Exp $
--- jcc.c.orig	Fri Oct 30 22:58:47 1998
+++ jcc.c	Sat Jun  9 00:16:47 2001
@@@@ -226,7 +226,7 @@@@ chat(struct client_state *csp)
d27 1
a27 1
@@@@ -369,12 +369,19 @@@@ chat(struct client_state *csp)
d51 1
a51 1
@@@@ -406,8 +413,11 @@@@ chat(struct client_state *csp)
d65 1
a65 1
@@@@ -488,7 +498,7 @@@@ chat(struct client_state *csp)
d74 1
a74 1
@@@@ -606,6 +616,14 @@@@ server_thread(void *data)
d89 1
a89 1
@@@@ -661,7 +679,7 @@@@ main(int argc, char *argv[])
d98 1
a98 1
@@@@ -678,7 +696,7 @@@@ main(int argc, char *argv[])
d107 1
a107 1
@@@@ -891,8 +909,12 @@@@ main(int argc, char *argv[])
d120 1
a120 1
@@@@ -994,7 +1016,7 @@@@ main(int argc, char *argv[])
d129 1
a129 1
@@@@ -1043,7 +1065,7 @@@@ safe_strerror(int err)
@


1.4
log
@Also install a signal handler, as I've noticed some zombie processes
lying around...
@
text
@d1 1
a1 1
$OpenBSD: patch-jcc_c,v 1.3 2001/06/09 04:02:20 angelos Exp $
a92 119
@@@@ -692,98 +710,98 @@@@ main(int argc, char *argv[])
 
 			savearg(cmd, arg);
 
-			if(strcmp(cmd, "trustfile") == 0) {
+			if(strncmp(cmd, "trustfile", sizeof(cmd)-1) == 0) {
 				trustfile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "trust_info_url") == 0) {
+			if(strncmp(cmd, "trust_info_url", sizeof(cmd)-1) == 0) {
 				enlist(trust_info, arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "debug") == 0) {
+			if(strncmp(cmd, "debug", sizeof(cmd)-1) == 0) {
 				debug |= atoi(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "add-forwarded-header") == 0) {
+			if(strncmp(cmd, "add-forwarded-header", sizeof(cmd)-1) == 0) {
 				add_forwarded = 1;
 				continue;
 			}
 
-			if(strcmp(cmd, "single-threaded") == 0) {
+			if(strncmp(cmd, "single-threaded", sizeof(cmd)-1) == 0) {
 				multi_threaded = 0;
 				continue;
 			}
 
-			if(strcmp(cmd, "suppress-vanilla-wafer") == 0) {
+			if(strncmp(cmd, "suppress-vanilla-wafer", sizeof(cmd)-1) == 0) {
 				suppress_vanilla_wafer = 1;
 				continue;
 			}
 
-			if(strcmp(cmd, "wafer") == 0) {
+			if(strncmp(cmd, "wafer", sizeof(cmd)-1) == 0) {
 				enlist(wafer_list, arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "add-header") == 0) {
+			if(strncmp(cmd, "add-header", sizeof(cmd)-1) == 0) {
 				enlist(xtra_list,  arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "cookiefile") == 0) {
+			if(strncmp(cmd, "cookiefile", sizeof(cmd)-1) == 0) {
 				cookiefile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "logfile") == 0) {
+			if(strncmp(cmd, "logfile", sizeof(cmd)-1) == 0) {
 				logfile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "blockfile") == 0) {
+			if(strncmp(cmd, "blockfile", sizeof(cmd)-1) == 0) {
 				blockfile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "jarfile") == 0) {
+			if(strncmp(cmd, "jarfile", sizeof(cmd)-1) == 0) {
 				jarfile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "listen-address") == 0) {
+			if(strncmp(cmd, "listen-address", sizeof(cmd)-1) == 0) {
 				haddr = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "forwardfile") == 0) {
+			if(strncmp(cmd, "forwardfile", sizeof(cmd)-1) == 0) {
 				forwardfile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "aclfile") == 0) {
+			if(strncmp(cmd, "aclfile", sizeof(cmd)-1) == 0) {
 				aclfile = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "user-agent") == 0) {
+			if(strncmp(cmd, "user-agent", sizeof(cmd)-1) == 0) {
 				uagent = strdup(arg);
 				continue;
 			}
 
-			if((strcmp(cmd, "referrer") == 0)
-			|| (strcmp(cmd, "referer" ) == 0)) {
+			if((strncmp(cmd, "referrer", sizeof(cmd)-1) == 0)
+			|| (strncmp(cmd, "referer", sizeof(cmd)-1) == 0)) {
 				referrer = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "from") == 0) {
+			if(strncmp(cmd, "from", sizeof(cmd)-1) == 0) {
 				from = strdup(arg);
 				continue;
 			}
 
-			if(strcmp(cmd, "hide-console") == 0) {
+			if(strncmp(cmd, "hide-console", sizeof(cmd)-1) == 0) {
 				hideConsole = 1;
 				continue;
 			}
@


1.3
log
@Some more fixes.
@
text
@d1 1
a1 1
$OpenBSD: patch-jcc_c,v 1.2 2001/06/09 02:36:48 angelos Exp $
d3 1
a3 1
+++ jcc.c	Fri Jun  8 22:24:37 2001
d60 16
a75 1
@@@@ -661,7 +671,7 @@@@ main(int argc, char *argv[])
d84 1
a84 1
@@@@ -678,7 +688,7 @@@@ main(int argc, char *argv[])
d93 1
a93 1
@@@@ -692,98 +702,98 @@@@ main(int argc, char *argv[])
d212 14
a225 1
@@@@ -994,7 +1004,7 @@@@ main(int argc, char *argv[])
d234 1
a234 1
@@@@ -1043,7 +1053,7 @@@@ safe_strerror(int err)
@


1.2
log
@Use strlcpy() and snprintf() with the right arguments (size of buffer).
@
text
@d1 1
a1 1
$OpenBSD$
d33 1
a33 1
+			snprintf(err, (strlen(CFAIL) + strlen(http->hostport)), CFAIL, http->hostport, eno);
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: update-patches,v 1.4 2001/03/31 22:54:41 espie Exp $
--- jcc.c.orig	Sat Oct 31 03:58:47 1998
+++ jcc.c	Sat Apr 14 19:12:41 2001
d9 1
a9 1
+		strncpy(buf, CHEADER, sizeof(buf)-1);
d23 1
a23 1
+			   snprintf(err, (strlen(CNXDOM) + strlen(http->host)) - 1, CNXDOM, http->host);
d33 1
a33 1
+			snprintf(err, (strlen(CFAIL) + strlen(http->hostport)) - 1, CFAIL, http->hostport, eno);
d47 1
a47 1
+			snprintf(err,(strlen(CFAIL) + strlen(http->hostport)) - 1, CFAIL, http->hostport, eno);
d56 1
a56 1
+				snprintf(buf, sizeof(buf) - 1, CFAIL, http->hostport, eno);
d65 1
a65 1
+			strncpy(tmp, buf, sizeof(tmp)-1);
d74 1
a74 1
+			strncpy(arg, p, sizeof(arg)-1);
d202 1
a202 1
+				snprintf(buf , sizeof(buf) - 1,"%s: can't fork: errno = %d",
d211 1
a211 1
+		snprintf(buf, sizeof(buf) - 1,"(errno = %d)", err);
@


1.1.1.1
log
@initial import of Junkbuster 2.0.2:
--
Internet Junkbuster Proxy TM is free privacy-enhancing software
that can be run on your PC or by your ISP or company. It blocks
requests for URLs (typically banner ads) that match its blockfile.
It also deletes unauthorized cookies and other unwanted identifying
header information that is exchanged between web servers and browsers.

Submitted by Wynand van Dyk <wynand@@type01.com>

checked by reinhard@@ and wilfried@@ (thanks!)
@
text
@@
