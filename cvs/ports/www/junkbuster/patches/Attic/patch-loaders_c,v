head	1.4;
access;
symbols
	OPENBSD_5_9:1.3.0.22
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.24
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.20
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.36
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.34
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.32
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.30
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.28
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.26
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	lebel-2001-Apr-19:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.03.18.15.25.31;	author mmcc;	state dead;
branches;
next	1.3;
commitid	DIsPE0FSUAHu96Db;

1.3
date	2010.05.24.22.17.03;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.09.02.36.48;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.15.46.34;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.04.19.15.46.34;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove www/junkbuster.

The code is unmodified since 2001, there are a bunch of patches fixing
dangerous-looking buffer problems, it's very exposed code, and
www/privoxy is the obvious maintained alternative.

ok dickman@@, jacoutot@@, sthen@@, jca@@
@
text
@$OpenBSD: patch-loaders_c,v 1.3 2010/05/24 22:17:03 espie Exp $
--- loaders.c.orig	Sat Oct 31 04:58:47 1998
+++ loaders.c	Sat May 22 16:47:47 2010
@@@@ -8,7 +8,7 @@@@ char *loaders_rcs = "$Id: loaders.c,v 1.24 1998/10/22 
 #include <stdlib.h>
 #include <sys/types.h>
 #include <string.h>
-#include <malloc.h>
+/* #include <malloc.h> We dont need this */
 #include <errno.h>
 #include <sys/stat.h>
 #include <ctype.h>
@@@@ -213,7 +213,7 @@@@ load_blockfile(struct client_state *csp)
 	
 	p = url_encode(html_code_map, blockfile);
 
-	sprintf(buf, "<h2>The file `%s' contains the following patterns</h2>\n", p);
+	snprintf(buf, sizeof(buf), "<h2>The file `%s' contains the following patterns</h2>\n", p);
 	freez(p);
 
 	fs->proxy_args = strsav(fs->proxy_args, buf);
@@@@ -291,7 +291,7 @@@@ load_blockfile(struct client_state *csp)
 			int errcode;
 			char rebuf[BUFSIZ];
 
-			sprintf(rebuf, "^(%s)", b->url->path);
+			snprintf(rebuf, sizeof(rebuf), "^(%s)", b->url->path);
 
 			errcode = regcomp(b->url->preg, rebuf,
 					(REG_EXTENDED|REG_NOSUB|REG_ICASE));
@@@@ -399,7 +399,7 @@@@ load_cookiefile(struct client_state *csp)
 
 	p = url_encode(html_code_map, cookiefile);
 
-	sprintf(buf, "<h2>The file `%s' contains the following patterns</h2>\n", p);
+	snprintf(buf, sizeof(buf), "<h2>The file `%s' contains the following patterns</h2>\n", p);
 
 	freez(p);
 
@@@@ -500,7 +500,7 @@@@ load_cookiefile(struct client_state *csp)
 			int errcode;
 			char rebuf[BUFSIZ];
 
-			sprintf(rebuf, "^(%s)", b->url->path);
+			snprintf(rebuf, sizeof(rebuf), "^(%s)", b->url->path);
 
 			errcode = regcomp(b->url->preg, rebuf,
 					(REG_EXTENDED|REG_NOSUB|REG_ICASE));
@@@@ -609,7 +609,7 @@@@ load_trustfile(struct client_state *csp)
 	
 	p = url_encode(html_code_map, trustfile);
 
-	sprintf(buf, "<h2>The file `%s' contains the following patterns</h2>\n", p);
+	snprintf(buf, sizeof(buf), "<h2>The file `%s' contains the following patterns</h2>\n", p);
 
 	freez(p);
 
@@@@ -696,7 +696,7 @@@@ load_trustfile(struct client_state *csp)
 			int errcode;
 			char rebuf[BUFSIZ];
 
-			sprintf(rebuf, "^(%s)", b->url->path);
+			snprintf(rebuf, sizeof(rebuf), "^(%s)", b->url->path);
 
 			errcode = regcomp(b->url->preg, rebuf,
 					(REG_EXTENDED|REG_NOSUB|REG_ICASE));
@@@@ -816,7 +816,7 @@@@ load_forwardfile(struct client_state *csp)
 	
 	p = url_encode(html_code_map, forwardfile);
 
-	sprintf(buf, "<h2>The file `%s' contains the following patterns</h2>\n", p);
+	snprintf(buf, sizeof(buf), "<h2>The file `%s' contains the following patterns</h2>\n", p);
 
 	freez(p);
 
@@@@ -855,7 +855,7 @@@@ load_forwardfile(struct client_state *csp)
 			continue;
 		}
 
-		strcpy(buf, vec[0]);
+		strlcpy(buf, vec[0], sizeof(buf));
 
 		reject = 1;
 
@@@@ -906,7 +906,7 @@@@ load_forwardfile(struct client_state *csp)
 			int errcode;
 			char rebuf[BUFSIZ];
 
-			sprintf(rebuf, "^(%s)", b->url->path);
+			snprintf(rebuf, sizeof(rebuf), "^(%s)", b->url->path);
 
 			errcode = regcomp(b->url->preg, rebuf,
 					(REG_EXTENDED|REG_NOSUB|REG_ICASE));
@@@@ -1059,7 +1059,7 @@@@ strsav(char *old, char *text_to_append)
 		}
 	}
 
-	strcpy(p + old_len, text_to_append);
+	strlcpy(p + old_len, text_to_append, new_len-old_len);
 	return(p);
 }
 
@@@@ -1083,26 +1083,28 @@@@ savearg(char *c, char *o)
 
 	if(c && *c) {
 		if((c = url_encode(html_code_map, c))) {
-			sprintf(buf, "<a " OPT "%s\">%s</a> ", c, c);
+			snprintf(buf, sizeof(buf), "<a " OPT "%s\">%s</a> ", c, c);
 		}
 		freez(c);
 	}
 	if(o && *o) { 
 		if((o = url_encode(html_code_map, o))) {
 			if(strncmpic(o, "http://", 7) == 0) {
-				strcat(buf, "<a href=\"");
-				strcat(buf, o);
-				strcat(buf, "\">");
-				strcat(buf, o);
-				strcat(buf, "</a>");
+				int l = strlen(buf);
+
+				l += strlcat(buf, "<a href=\"", sizeof(buf)-l);
+				l += strlcat(buf, o, sizeof(buf)-l);
+				l += strlcat(buf, "\">", sizeof(buf)-l);
+				l += strlcat(buf, o, sizeof(buf)-l);
+				l += strlcat(buf, "</a>", sizeof(buf)-l);
 			} else {
-				strcat(buf, o);
+				strlcat(buf, o, sizeof(buf)-strlen(buf));
 			}
 		}
 		freez(o);
 	}
 
-	strcat(buf, "<br>\n");
+	strlcat(buf, "<br>\n", sizeof(buf)-strlen(buf));
 
 	proxy_args->invocation = strsav(proxy_args->invocation, buf);
 }
@@@@ -1164,18 +1166,18 @@@@ end_proxy_args()
 
 	b = strsav(b, "<h2>Source versions:</h2>\n");
 	b = strsav(b, "<pre>");
-	sprintf(buf, "%s\n", jcc_rcs       );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", parsers_rcs   );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", filters_rcs   );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", loaders_rcs   );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", conn_rcs      );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", bind_rcs      );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", encode_rcs    );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", socks4_rcs    );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", ssplit_rcs    );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", acl_rcs       );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", gnu_regex_rcs );	b = strsav(b, buf);
-	sprintf(buf, "%s\n", win32_rcs     );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", jcc_rcs       );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", parsers_rcs   );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", filters_rcs   );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", loaders_rcs   );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", conn_rcs      );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", bind_rcs      );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", encode_rcs    );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", socks4_rcs    );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", ssplit_rcs    );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", acl_rcs       );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", gnu_regex_rcs );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf), "%s\n", win32_rcs     );	b = strsav(b, buf);
 	b = strsav(b, "</pre>");
 
 #ifdef REGEX
@


1.3
log
@fix for gcc4
@
text
@d1 1
a1 1
$OpenBSD: patch-loaders_c,v 1.2 2001/06/09 02:36:48 angelos Exp $
@


1.2
log
@Use strlcpy() and snprintf() with the right arguments (size of buffer).
@
text
@d1 4
a4 4
$OpenBSD$
--- loaders.c.orig	Fri Oct 30 22:58:47 1998
+++ loaders.c	Fri Jun  8 22:32:55 2001
@@@@ -8,7 +8,7 @@@@ char *loaders_rcs = "$Id: loaders.c,v 1.
d31 1
a31 1
@@@@ -399,7 +399,7 @@@@ load_cookiefile(struct client_state *csp
d40 1
a40 1
@@@@ -500,7 +500,7 @@@@ load_cookiefile(struct client_state *csp
d67 1
a67 1
@@@@ -816,7 +816,7 @@@@ load_forwardfile(struct client_state *cs
d76 1
a76 1
@@@@ -855,7 +855,7 @@@@ load_forwardfile(struct client_state *cs
d85 1
a85 1
@@@@ -906,7 +906,7 @@@@ load_forwardfile(struct client_state *cs
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.4 2001/03/31 22:54:41 espie Exp $
d3 1
a3 1
+++ loaders.c	Thu Apr 12 10:53:14 2001
d18 1
a18 1
+	snprintf(buf, sizeof(buf)-1, "<h2>The file `%s' contains the following patterns</h2>\n", p);
d27 1
a27 1
+			snprintf(rebuf, sizeof(rebuf)-1, "^(%s)", b->url->path);
d36 1
a36 1
+	snprintf(buf, sizeof(buf)-1, "<h2>The file `%s' contains the following patterns</h2>\n", p);
d54 1
a54 1
+	snprintf(buf, sizeof(buf)-1, "<h2>The file `%s' contains the following patterns</h2>\n", p);
d63 1
a63 1
+			snprintf(rebuf, sizeof(rebuf)-1, "^(%s)", b->url->path);
d72 1
a72 1
+	snprintf(buf, sizeof(buf)-1, "<h2>The file `%s' contains the following patterns</h2>\n", p);
d81 1
a81 1
+		strncpy(buf, vec[0], sizeof(buf)-1);
d90 1
a90 1
+			snprintf(rebuf, sizeof(rebuf)-1, "^(%s)", b->url->path);
d99 1
a99 1
+	strncpy(p + old_len, text_to_append, new_len-old_len-1);
d103 1
a103 1
@@@@ -1083,26 +1083,26 @@@@ savearg(char *c, char *o)
d108 1
a108 1
+			snprintf(buf, sizeof(buf)-1, "<a " OPT "%s\">%s</a> ", c, c);
d120 7
a126 5
+				strncat(buf, "<a href=\"", sizeof(buf)-strlen(buf)-1);
+				strncat(buf, o, sizeof(buf)-strlen(buf)-1);
+				strncat(buf, "\">", sizeof(buf)-strlen(buf)-1);
+				strncat(buf, o, sizeof(buf)-strlen(buf)-1);
+				strncat(buf, "</a>", sizeof(buf)-strlen(buf)-1);
d129 1
a129 1
+				strncat(buf, o, sizeof(buf)-strlen(buf)-1);
d136 1
a136 1
+	strncat(buf, "<br>\n", sizeof(buf)-strlen(buf)-1);
d140 1
a140 1
@@@@ -1164,18 +1164,18 @@@@ end_proxy_args()
d156 12
a167 12
+	snprintf(buf, sizeof(buf)-1, "%s\n", jcc_rcs       );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", parsers_rcs   );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", filters_rcs   );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", loaders_rcs   );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", conn_rcs      );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", bind_rcs      );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", encode_rcs    );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", socks4_rcs    );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", ssplit_rcs    );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", acl_rcs       );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", gnu_regex_rcs );	b = strsav(b, buf);
+	snprintf(buf, sizeof(buf)-1, "%s\n", win32_rcs     );	b = strsav(b, buf);
@


1.1.1.1
log
@initial import of Junkbuster 2.0.2:
--
Internet Junkbuster Proxy TM is free privacy-enhancing software
that can be run on your PC or by your ISP or company. It blocks
requests for URLs (typically banner ads) that match its blockfile.
It also deletes unauthorized cookies and other unwanted identifying
header information that is exchanged between web servers and browsers.

Submitted by Wynand van Dyk <wynand@@type01.com>

checked by reinhard@@ and wilfried@@ (thanks!)
@
text
@@
