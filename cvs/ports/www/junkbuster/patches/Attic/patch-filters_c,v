head	1.4;
access;
symbols
	OPENBSD_5_9:1.3.0.22
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.24
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.20
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.36
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.34
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.32
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.30
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.28
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.26
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.24
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.22
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.20
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.18
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.16
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.14
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	lebel-2001-Apr-19:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.03.18.15.25.31;	author mmcc;	state dead;
branches;
next	1.3;
commitid	DIsPE0FSUAHu96Db;

1.3
date	2010.05.24.22.17.03;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.09.02.36.48;	author angelos;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.15.46.34;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.04.19.15.46.34;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove www/junkbuster.

The code is unmodified since 2001, there are a bunch of patches fixing
dangerous-looking buffer problems, it's very exposed code, and
www/privoxy is the obvious maintained alternative.

ok dickman@@, jacoutot@@, sthen@@, jca@@
@
text
@$OpenBSD: patch-filters_c,v 1.3 2010/05/24 22:17:03 espie Exp $
--- filters.c.orig	Sat Oct 31 04:58:47 1998
+++ filters.c	Sat May 22 16:47:47 2010
@@@@ -103,9 +103,12 @@@@ block_url(struct http_request *http, struct client_sta
 					n += strlen(path);
 					n += strlen(spec);
 
-					p = malloc(n);
+					if ((p = malloc(n)) == NULL) {
+					   fprintf(stderr, "%s:%d malloc failed\n", __FILE__, __LINE__);
+					   exit(-1);
+					}
 
-					sprintf(p, CBLOCK,
+					snprintf(p, n, CBLOCK,
 						hostport, path, spec);
 
 					freez(hostport);
@@@@ -174,9 +177,12 @@@@ trust_url(struct http_request *http, struct client_sta
 					n += strlen(path);
 					n += strlen(referrer);
 
-					p = malloc(n);
+					if ((p = malloc(n)) == NULL) {
+					   fprintf(stderr, "%s:%d malloc failed\n", __FILE__, __LINE__);
+					   exit(-1);
+					}
 
-					sprintf(p, CTRUST,
+					snprintf(p, n, CTRUST,
 						hostport, path, referrer);
 
 					freez(hostport);
@@@@ -288,8 +294,11 @@@@ trust_url_not_trusted:
 	n += strlen(path);
 	n += strlen(referrer);
 
-	p = malloc(n);
-	sprintf(p, CTRUST, hostport, path, referrer);
+	if ((p = malloc(n)) == NULL) {
+	   fprintf(stderr, "%s:%d malloc failed\n", __FILE__, __LINE__);
+	   exit(-1);
+	}
+	snprintf(p, n, CTRUST, hostport, path, referrer);
 
 	freez(hostport);
 	freez(path);
@@@@ -441,8 +450,11 @@@@ dsplit(char *domain)
 	/* save a copy of the pointers in dvec */
 	size = ret->dcnt * sizeof(*ret->dvec);
 		
-	if((ret->dvec = malloc(size))) {
+	if((ret->dvec = malloc(size)) != NULL) {
 		memcpy(ret->dvec, v, size);
+	} else {
+	   fprintf(stderr, "%s:%d malloc failed\n", __FILE__, __LINE__);
+	   exit(-1);
 	}
 
 	return(*ret);
@@@@ -562,8 +574,11 @@@@ ij_blocked_url(struct http_request *http, struct clien
 	n += strlen(path    );
 	n += strlen(pattern );
 
-	if((p = malloc(n))) {
-		sprintf(p, template, hostport, path, pattern);
+	if((p = malloc(n)) != NULL) {
+		snprintf(p, n, template, hostport, path, pattern);
+	} else {
+	   fprintf(stderr, "%s:%d malloc failed\n", __FILE__, __LINE__);
+	   exit(-1);
 	}
 
 	freez(hostport);
@@@@ -618,8 +633,11 @@@@ ij_untrusted_url(struct http_request *http, struct cli
 	n += strlen(hostport);
 	n += strlen(path    );
 
-	if((p = malloc(n))) {
-		sprintf(p, template, hostport, path);
+	if((p = malloc(n)) != NULL) {
+		snprintf(p, n, template, hostport, path);
+	} else {
+	   fprintf(stderr, "%s:%d malloc failed\n", __FILE__, __LINE__);
+	   exit(-1);
 	}
 
 	freez(hostport);
@@@@ -632,25 +650,25 @@@@ ij_untrusted_url(struct http_request *http, struct cli
 	p = strsav(p, "<h3>The following referrers are trusted</h3>\n");
 
 	for(tl = trust_list; (t = *tl) ; tl++) {
-		sprintf(buf, "%s<br>\n", t->spec);
+		snprintf(buf, sizeof(buf), "%s<br>\n", t->spec);
 		p = strsav(p, buf);
 	}
 
 	if(trust_info->next) {
 		struct list *l;
 
-		strcpy(buf,
+		strlcpy(buf,
 			"<p>"
 			"You can learn more about what this means "
 			"and what you may be able to do about it by "
 			"reading the following documents:<br>\n"
-			"<ol>\n"
+			"<ol>\n", sizeof(buf)
 		);
 
 		p = strsav(p, buf);
 		
 		for(l = trust_info->next; l ; l = l->next) {
-			sprintf(buf,
+			snprintf(buf, sizeof(buf),
 				"<li> <a href=%s>%s</a><br>\n",
 					l->str, l->str);
 			p = strsav(p, buf);
@


1.3
log
@fix for gcc4
@
text
@d1 1
a1 1
$OpenBSD: patch-filters_c,v 1.2 2001/06/09 02:36:48 angelos Exp $
@


1.2
log
@Use strlcpy() and snprintf() with the right arguments (size of buffer).
@
text
@d1 4
a4 4
$OpenBSD$
--- filters.c.orig	Fri Oct 30 22:58:47 1998
+++ filters.c	Fri Jun  8 22:24:01 2001
@@@@ -103,9 +103,12 @@@@ block_url(struct http_request *http, str
d19 1
a19 1
@@@@ -174,9 +177,12 @@@@ trust_url(struct http_request *http, str
d61 1
a61 1
@@@@ -562,8 +574,11 @@@@ ij_blocked_url(struct http_request *http
d75 1
a75 1
@@@@ -618,8 +633,11 @@@@ ij_untrusted_url(struct http_request *ht
d89 1
a89 1
@@@@ -632,25 +650,25 @@@@ ij_untrusted_url(struct http_request *ht
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: update-patches,v 1.4 2001/03/31 22:54:41 espie Exp $
--- filters.c.orig	Sat Oct 31 03:58:47 1998
+++ filters.c	Fri Apr 13 20:57:49 2001
d15 1
a15 1
+					snprintf(p, n-1, CBLOCK,
d30 1
a30 1
+					snprintf(p, n-1, CTRUST,
d44 1
a44 1
+	snprintf(p, n-1, CTRUST, hostport, path, referrer);
d68 1
a68 1
+		snprintf(p, n-1, template, hostport, path, pattern);
d82 1
a82 1
+		snprintf(p, n-1, template, hostport, path);
d94 1
a94 1
+		snprintf(buf, sizeof(buf)-1, "%s<br>\n", t->spec);
d102 1
a102 1
+		strncpy(buf,
d108 1
a108 1
+			"<ol>\n", sizeof(buf)-1
d115 1
a115 1
+			snprintf(buf, sizeof(buf)-1,
@


1.1.1.1
log
@initial import of Junkbuster 2.0.2:
--
Internet Junkbuster Proxy TM is free privacy-enhancing software
that can be run on your PC or by your ISP or company. It blocks
requests for URLs (typically banner ads) that match its blockfile.
It also deletes unauthorized cookies and other unwanted identifying
header information that is exchanged between web servers and browsers.

Submitted by Wynand van Dyk <wynand@@type01.com>

checked by reinhard@@ and wilfried@@ (thanks!)
@
text
@@
