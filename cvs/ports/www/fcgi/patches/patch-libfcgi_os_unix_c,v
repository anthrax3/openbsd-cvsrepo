head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.12
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	sturm_2004-Feb-11:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.02.06.14.55.41;	author sthen;	state Exp;
branches;
next	1.3;
commitid	Yeg4pv3CCqhoGrML;

1.3
date	2011.04.16.21.13.44;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2008.06.01.20.39.26;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.11.20.13.35;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.02.11.20.13.35;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Convert fcgi's use of select() to poll() to avoid an FD_SET overflow.
Simplified from a diff in debian/ubuntu.

Conversion looks good to deraadt, ok jca

While there, update license marker.
@
text
@$OpenBSD$

select->poll conversion, modified from patch at
https://bugs.launchpad.net/ubuntu/+source/libfcgi/+bug/933417
(difference: don't use env variables to control timeouts)

--- libfcgi/os_unix.c.orig	Tue Mar  5 19:14:49 2002
+++ libfcgi/os_unix.c	Fri Feb  6 11:51:00 2015
@@@@ -42,6 +42,7 @@@@ static const char rcsid[] = "$Id: os_unix.c,v 1.37 200
 #include <sys/time.h>
 #include <sys/un.h>
 #include <signal.h>
+#include <poll.h>
 
 #ifdef HAVE_NETDB_H
 #include <netdb.h>
@@@@ -103,6 +104,9 @@@@ static int volatile maxFd = -1;
 static int shutdownPending = FALSE;
 static int shutdownNow = FALSE;
 
+static int libfcgiOsClosePollTimeout = 2000;
+static int libfcgiIsAfUnixKeeperPollTimeout = 2000;
+
 void OS_ShutdownPending()
 {
     shutdownPending = TRUE;
@@@@ -755,19 +759,16 @@@@ int OS_Close(int fd)
 
     if (shutdown(fd, 1) == 0)
     {
-        struct timeval tv;
-        fd_set rfds;
+        struct pollfd pfd;
         int rv;
         char trash[1024];
 
-        FD_ZERO(&rfds);
+        pfd.fd = fd;
+        pfd.events = POLLIN;
 
         do 
         {
-            FD_SET(fd, &rfds);
-            tv.tv_sec = 2;
-            tv.tv_usec = 0;
-            rv = select(fd + 1, &rfds, NULL, NULL, &tv);
+            rv = poll(&pfd, 1, libfcgiOsClosePollTimeout);
         }
         while (rv > 0 && read(fd, trash, sizeof(trash)) > 0);
     }
@@@@ -1116,13 +1117,11 @@@@ static int is_reasonable_accept_errno (const int error
  */
 static int is_af_unix_keeper(const int fd)
 {
-    struct timeval tval = { READABLE_UNIX_FD_DROP_DEAD_TIMEVAL };
-    fd_set read_fds;
+    struct pollfd pfd;
+    pfd.fd = fd;
+    pfd.events = POLLIN;
 
-    FD_ZERO(&read_fds);
-    FD_SET(fd, &read_fds);
-
-    return select(fd + 1, &read_fds, NULL, NULL, &tval) >= 0 && FD_ISSET(fd, &read_fds);
+    return poll(&pfd, 1, libfcgiIsAfUnixKeeperPollTimeout) >= 0 && (pfd.revents & POLLIN);
 }
 
 /*
@


1.3
log
@- remove unnecessary NULL casts
- sync WANTLIB
@
text
@d1 68
a68 12
$OpenBSD: patch-libfcgi_os_unix_c,v 1.2 2008/06/01 20:39:26 simon Exp $
--- libfcgi/os_unix.c.orig	Tue Mar  5 20:14:49 2002
+++ libfcgi/os_unix.c	Fri May 23 07:12:26 2008
@@@@ -536,7 +536,7 @@@@ int OS_SpawnChild(char *appPath, int listenFd)
          *
          * XXX: entire environment passes through
 	 */
-	execl(appPath, appPath, NULL);
+	execl(appPath, appPath, (void *)NULL);
 	/*
 	 * XXX: Can't do this as we've already closed STDERR!!!
 	 *
@


1.2
log
@make IPC::{Run,Run3,Open3} and friends happy under FastCGI, regen
patches and bump
@
text
@d1 1
a1 1
$OpenBSD: patch-libfcgi_os_unix_c,v 1.1.1.1 2004/02/11 20:13:35 sturm Exp $
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- libfcgi/os_unix.c.orig	2004-02-11 20:40:53.000000000 +0100
+++ libfcgi/os_unix.c	2004-02-11 20:41:05.000000000 +0100
@@@@ -536,7 +536,7 @@@@ int OS_SpawnChild(char *appPath, int lis
@


1.1.1.1
log
@Initial import of fcgi 2.4.0

FastCGI is a fast, open, and secure Web server interface that solves the
performance problems inherent in CGI without introducing any of the new
problems associated with writing applications to lower-level Web server APIs.

WWW: http://www.fastcgi.com/

from Pedro Martelletto <pbastos at rdc.puc-rio.br>
@
text
@@
