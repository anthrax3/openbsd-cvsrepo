head	1.5;
access;
symbols
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2010.09.27.12.21.24;	author stephan;	state dead;
branches;
next	1.4;

1.4
date	2008.10.25.14.20.34;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.19.23.44.48;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.26.10.34.01;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.15.09.36.48;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove drupal5, which will soon be end-of-life. Switch to drupal6, please. explicit ok sthen@@, aja@@
@
text
@$OpenBSD: patch-modules_user_user_module,v 1.4 2008/10/25 14:20:34 espie Exp $
--- modules/user/user.module.orig	Wed Oct  8 22:10:26 2008
+++ modules/user/user.module	Mon Oct 13 19:32:24 2008
@@@@ -321,27 +321,7 @@@@ function user_validate_picture($file, &$edit, $user) {
  * Generate a random alphanumeric password.
  */
 function user_password($length = 10) {
-  // This variable contains the list of allowable characters for the
-  // password. Note that the number 0 and the letter 'O' have been
-  // removed to avoid confusion between the two. The same is true
-  // of 'I', 1, and l.
-  $allowable_characters = 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789';
-
-  // Zero-based count of characters in the allowable list:
-  $len = strlen($allowable_characters) - 1;
-
-  // Declare the password as a blank string.
-  $pass = '';
-
-  // Loop the number of times specified by $length.
-  for ($i = 0; $i < $length; $i++) {
-
-    // Each iteration, pick a random character from the
-    // allowable string and append it to the password:
-    $pass .= $allowable_characters[mt_rand(0, $len)];
-  }
-
-  return $pass;
+  return new_password($length);
 }
 
 /**
@@@@ -1285,9 +1265,12 @@@@ function user_register_submit($form_id, $form_values) 
     return 'user/1/edit';
   }
   else {
+
     if ($admin && !$notify) {
-      drupal_set_message(t('Created a new user account. No e-mail has been sent.'));
-    }
+      $message = t('Created a new user account. No e-mail has been sent.');
+      $message = $message.' '.t('Password').': '.$pass;
+      drupal_set_message($message);
+    } 
     else if (!variable_get('user_email_verification', TRUE) && $account->status && !$admin) {
       // No e-mail verification is required, create new user account, and login user immediately.
       $subject = _user_mail_text('welcome_subject', $variables);
@@@@ -1361,6 +1344,7 @@@@ function user_edit_form($uid, $edit, $register = FALSE
       '#description' => t('Provide a password for the new account in both fields.'),
       '#required' => TRUE,
       '#size' => 25,
+      '#autogen' => TRUE
     );
   }
   if ($admin) {
@@@@ -1840,6 +1824,10 @@@@ function user_admin_perm($rid = NULL) {
   while ($role = db_fetch_object($result)) {
     $role_names[$role->rid] = $role->name;
   }
+  if (!is_numeric($rid)) {
+    $role_names[1] = t('anon.');
+    $role_names[2] = t('auth.');
+  }
 
   // Render role/permission overview:
   $options = array();
@@@@ -1879,7 +1867,12 @@@@ function theme_user_admin_perm($form) {
       $row = array();
       // Module name
       if (is_numeric($key)) {
-        $row[] = array('data' => t('@@module module', array('@@module' => drupal_render($form['permission'][$key]))), 'class' => 'module', 'id' => 'module-'. $form['permission'][$key]['#value'], 'colspan' => count($form['role_names']) + 1);
+        $row[] = array('data' => t('@@module module', array('@@module' => drupal_render($form['permission'][$key]))), 'class' => 'module', 'id' => 'module-'. $form['permission'][$key]['#value']);//, 'colspan' => count($form['role_names']) + 1);
+  foreach (element_children($form['role_names']) as $rid) {
+    if (is_array($form['role_names'][$rid])) {
+      $row[] = array('data' => $form['role_names'][$rid]['#value']);
+    }
+  }
       }
       else {
         $row[] = array('data' => drupal_render($form['permission'][$key]), 'class' => 'permission');
@


1.4
log
@security fixes in core.

allows jquery_update to work more generally (I had broken it slightly)
@
text
@d1 1
a1 1
$OpenBSD: patch-modules_user_user_module,v 1.3 2008/08/19 23:44:48 espie Exp $
@


1.3
log
@security update
@
text
@d1 3
a3 3
$OpenBSD: patch-modules_user_user_module,v 1.2 2008/07/26 10:34:01 espie Exp $
--- modules/user/user.module.orig	Thu Aug 14 01:59:09 2008
+++ modules/user/user.module	Thu Aug 14 11:29:23 2008
d33 1
a33 1
@@@@ -1268,9 +1248,12 @@@@ function user_register_submit($form_id, $form_values) 
d48 1
a48 1
@@@@ -1344,6 +1327,7 @@@@ function user_edit_form($uid, $edit, $register = FALSE
d56 1
a56 1
@@@@ -1823,6 +1807,10 @@@@ function user_admin_perm($rid = NULL) {
d67 1
a67 1
@@@@ -1862,7 +1850,12 @@@@ function theme_user_admin_perm($form) {
@


1.2
log
@minor update to 5.9 (session fix was missed was 5.8)
@
text
@d1 3
a3 3
$OpenBSD: patch-modules_user_user_module,v 1.1 2008/03/15 09:36:48 espie Exp $
--- modules/user/user.module.orig	Wed Jul 16 21:46:02 2008
+++ modules/user/user.module	Sat Jul 26 12:28:35 2008
d56 1
a56 1
@@@@ -1825,6 +1809,10 @@@@ function user_admin_perm($rid = NULL) {
d67 1
a67 1
@@@@ -1864,7 +1852,12 @@@@ function theme_user_admin_perm($form) {
@


1.1
log
@a few tweaks to core:
- allow autogen passwords for new users
- put the names of roles more often on the rights page.
- extra hook for jquery_update, to avoid having to overwrite jquery
@
text
@d1 3
a3 3
$OpenBSD$
--- modules/user/user.module.orig	Sun Feb 17 16:31:26 2008
+++ modules/user/user.module	Sun Feb 17 16:55:58 2008
d33 1
a33 1
@@@@ -1263,9 +1243,12 @@@@ function user_register_submit($form_id, $form_values) 
d48 1
a48 1
@@@@ -1339,6 +1322,7 @@@@ function user_edit_form($uid, $edit, $register = FALSE
d56 1
a56 1
@@@@ -1820,6 +1804,10 @@@@ function user_admin_perm($rid = NULL) {
d67 1
a67 1
@@@@ -1859,7 +1847,12 @@@@ function theme_user_admin_perm($form) {
@

