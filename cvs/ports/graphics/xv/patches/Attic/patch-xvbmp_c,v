head	1.3;
access;
symbols
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.16
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.14
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.12
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.10
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.8
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.04.12.17.28.04;	author naddy;	state dead;
branches;
next	1.2;

1.2
date	2004.09.21.18.46.04;	author sturm;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.03.13.20.27.56;	author espie;	state Exp;
branches
	1.1.14.1
	1.1.16.1;
next	;

1.1.14.1
date	2005.04.16.21.18.34;	author sturm;	state dead;
branches;
next	;

1.1.16.1
date	2005.04.16.21.22.07;	author sturm;	state dead;
branches;
next	;

1.2.2.1
date	2005.05.23.20.23.54;	author robert;	state dead;
branches;
next	;


desc
@@


1.3
log
@SECURITY:
Fixes for multiple vulnerabilities.  Switch to centralized jumbo patch.
From rohee@@
@
text
@$OpenBSD: patch-xvbmp_c,v 1.2 2004/09/21 18:46:04 sturm Exp $

Handle 16 bit depth BMP files and add some sanity checking.

--- xvbmp.c.orig	Thu Sep 16 00:06:37 2004
+++ xvbmp.c	Thu Sep 16 00:10:44 2004
@@@@ -18,7 +18,6 @@@@
 
    not being able to malloc is a Fatal Error.  The program is aborted. */
 
-
 #define BI_RGB  0
 #define BI_RLE8 1
 #define BI_RLE4 2
@@@@ -32,6 +31,7 @@@@
 static int   loadBMP1   PARM((FILE *, byte *, u_int, u_int));
 static int   loadBMP4   PARM((FILE *, byte *, u_int, u_int, u_int));
 static int   loadBMP8   PARM((FILE *, byte *, u_int, u_int, u_int));
+static int   loadBMP16  PARM((FILE *, byte *, u_int, u_int));
 static int   loadBMP24  PARM((FILE *, byte *, u_int, u_int, u_int));
 static u_int getshort   PARM((FILE *));
 static u_int getint     PARM((FILE *));
@@@@ -128,8 +128,10 @@@@
 
   /* error checking */
   if ((biBitCount!=1 && biBitCount!=4 && biBitCount!=8 && 
-       biBitCount!=24 && biBitCount!=32) || 
-      biPlanes!=1 || biCompression>BI_RLE4) {
+       biBitCount!= 16 && biBitCount!=24 && biBitCount!=32) || 
+      biPlanes!=1 || biCompression>BI_RLE4 ||
+      biWidth<=0 || biHeight<=0 ||
+      (biClrUsed && biClrUsed > (1 << biBitCount))) {
 
     sprintf(buf,"Bogus BMP File!  (bitCount=%d, Planes=%d, Compression=%d)",
 	    biBitCount, biPlanes, biCompression);
@@@@ -138,7 +140,7 @@@@
     goto ERROR;
   }
 
-  if (((biBitCount==1 || biBitCount==24 || biBitCount==32)
+  if (((biBitCount==1 || biBitCount== 16 || biBitCount==24 || biBitCount==32)
        && biCompression != BI_RGB) ||
       (biBitCount==4 && biCompression==BI_RLE8) ||
       (biBitCount==8 && biCompression==BI_RLE4)) {
@@@@ -160,8 +162,11 @@@@
     bPad = bfOffBits - (biSize + 14);
   }
 
+  if (biClrUsed > (1 << biBitCount))
+    biClrUsed = (1 << biBitCount);
+
   /* load up colormap, if any */
-  if (biBitCount!=24 && biBitCount!=32) {
+  if (biBitCount!=16 && biBitCount!=24 && biBitCount!=32) {
     int i, cmaplen;
 
     cmaplen = (biClrUsed) ? biClrUsed : 1 << biBitCount;
@@@@ -199,7 +204,7 @@@@
 
   /* create pic8 or pic24 */
 
-  if (biBitCount==24 || biBitCount==32) {
+  if (biBitCount== 16 || biBitCount==24 || biBitCount==32) {
     pic24 = (byte *) calloc((size_t) biWidth * biHeight * 3, (size_t) 1);
     if (!pic24) return (bmpError(bname, "couldn't malloc 'pic24'"));
   }
@@@@ -216,6 +221,7 @@@@
 					  biCompression);
   else if (biBitCount == 8) rv = loadBMP8(fp,pic8,biWidth,biHeight, 
 					  biCompression);
+  else if (biBitCount == 16) rv = loadBMP16(fp,pic24,biWidth,biHeight);
   else                      rv = loadBMP24(fp,pic24,biWidth,biHeight,
 					   biBitCount);
 
@@@@ -225,7 +231,7 @@@@
   fclose(fp);
 
 
-  if (biBitCount == 24 || biBitCount == 32) {
+  if (biBitCount == 16 || biBitCount == 24 || biBitCount == 32) {
     pinfo->pic  = pic24;
     pinfo->type = PIC24;
   }
@@@@ -458,6 +464,43 @@@@
 }  
 
 
+/*******************************************/
+static int loadBMP16(fp, pic24, w, h)
+     FILE *fp;
+     byte *pic24;
+     u_int  w,h;
+{
+  int   i,j,padb,rv;
+  byte *pp;
+
+  rv = 0;
+
+  padb = (4 - ((w*2) % 4)) & 0x03;  /* # of pad bytes to read at EOscanline */
+
+  for (i=h-1; i>=0; i--) {
+    pp = pic24 + (i * w * 3);
+    if ((i&0x3f)==0) WaitCursor();
+    
+    for (j=0; j<w; j++) {
+      byte byte1 = getc(fp);
+      byte byte2 = getc(fp);
+
+      /* 1 bit pad, 5 bits red, 5 bits green, 5 bits blue */
+
+      pp[0] = (byte2 & 0x7c) << 1; 
+      pp[1] = ((byte2 & 0x03) << 6) | ((byte1 & 0xe0) >> 2);	/* green */
+      pp[2] = (byte1 & 0x1f) << 3;   /* blue */
+      pp += 3;
+    }
+
+    for (j=0; j<padb; j++) getc(fp);
+
+    rv = (FERROR(fp));
+    if (rv) break;
+  }
+
+  return rv;
+}  
 
 /*******************************************/
 static int loadBMP24(fp, pic24, w, h, bits)
@


1.2
log
@Add some sanity checking in XV. Patches from Marcus Meissner
adapted by rohee@@ by way of millert@@

while here, adapt patches to regular naming scheme
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2.2.1
log
@SECURITY:
Fixes for multiple vulnerabilities. Switch to centralized jumbo patch.
bump PKGNAME
http://www.vuxml.org/openbsd/e9b45990-abff-11d9-a42d-080020f8e4df.html

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xvbmp_c,v 1.2 2004/09/21 18:46:04 sturm Exp $
@


1.1
log
@Allow reading of 16 bits per plane bmp.
Code by Bruno and me.
@
text
@d2 5
a6 2
--- xvbmp.c.orig	Tue Mar 13 18:30:52 2001
+++ xvbmp.c	Tue Mar 13 19:10:46 2001
d15 1
a15 1
@@@@ -32,6 +31,7 @@@@ static long filesize;
d23 1
a23 1
@@@@ -128,7 +128,7 @@@@ int LoadBMP(fname, pinfo)
d28 1
d30 3
a32 1
       biPlanes!=1 || biCompression>BI_RLE4) {
d35 2
a36 1
@@@@ -138,7 +138,7 @@@@ int LoadBMP(fname, pinfo)
d45 2
a46 1
@@@@ -161,7 +161,7 @@@@ int LoadBMP(fname, pinfo)
d49 3
d58 1
a58 1
@@@@ -199,7 +199,7 @@@@ int LoadBMP(fname, pinfo)
d67 1
a67 1
@@@@ -216,6 +216,7 @@@@ int LoadBMP(fname, pinfo)
d75 1
a75 1
@@@@ -225,7 +226,7 @@@@ int LoadBMP(fname, pinfo)
d84 1
a84 1
@@@@ -458,6 +459,43 @@@@ static int loadBMP8(fp, pic8, w, h, comp
@


1.1.16.1
log
@MFC:

SECURITY:
Fixes for multiple vulnerabilities. Switch to centralized jumbo patch.

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xvbmp_c,v 1.1 2001/03/13 20:27:56 espie Exp $
@


1.1.14.1
log
@MFC:

SECURITY:
Fixes for multiple vulnerabilities.  Switch to centralized jumbo patch.

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-xvbmp_c,v 1.1 2001/03/13 20:27:56 espie Exp $
@


