head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.20
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.18
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.10.29.16.45.09;	author espie;	state Exp;
branches;
next	1.1;
commitid	BnUv7vNiltKHEjOJ;

1.1
date	2009.09.24.20.07.18;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix problems with Nikon D7100 pictures, they don't create correct exif
information (multiple APP1 chunks). xv reads them all, but libjpeg frowns
about writing multiple APP1.

So,
- ignore subsequent chunks (like exiv2 does)
- add a small framework to report error messages from libjpeg
(might be adaptable to other gfx formats).

okay sthen@@
@
text
@$OpenBSD: patch-xvjpeg_c,v 1.1 2009/09/24 20:07:18 naddy Exp $
--- xvjpeg.c.orig	Tue Oct 28 15:08:43 2014
+++ xvjpeg.c	Tue Oct 28 17:13:30 2014
@@@@ -315,6 +315,7 @@@@ static void doCmd(cmd)
 
 
 
+char errbuffer[JMSG_LENGTH_MAX];
 
 
 /*******************************************/
@@@@ -418,7 +419,7 @@@@ static void writeJPEG()
 
   if (pfree) free(inpix);
 
-  if (CloseOutFile(fp, filename, rv) == 0) DirBox(0);
+  if (CloseOutFileWhy(fp, filename, rv, errbuffer) == 0) DirBox(0);
   SetCursors(-1);
 }
 
@@@@ -444,7 +445,7 @@@@ METHODDEF void  xv_error_exit(cinfo)
   my_error_ptr myerr;
 
   myerr = (my_error_ptr) cinfo->err;
-  (*cinfo->err->output_message)(cinfo);     /* display error message */
+  (*cinfo->err->format_message)(cinfo, errbuffer);     /* fmt error message */
   longjmp(myerr->setjmp_buffer, 1);         /* return from error */
 }
 
@@@@ -696,7 +697,7 @@@@ L2:
         if ((cmy = *q++ - k) < 0) cmy = 0; *p++ = cmy; /* R */
         if ((cmy = *q++ - k) < 0) cmy = 0; *p++ = cmy; /* G */
         if ((cmy = *q++ - k) < 0) cmy = 0; *p++ = cmy; /* B */
-      } while (++q <= pic_end);
+      } while (++q < pic_end);
     }
     else { /* assume normal data */
       register byte *q = pic;
@@@@ -707,7 +708,7 @@@@ L2:
         if ((cmy = k - *q++) < 0) cmy = 0; *p++ = cmy; /* R */
         if ((cmy = k - *q++) < 0) cmy = 0; *p++ = cmy; /* G */
         if ((cmy = k - *q++) < 0) cmy = 0; *p++ = cmy; /* B */
-      } while (++q <= pic_end);
+      } while (++q < pic_end);
     }
     pic = realloc(pic,p-pic); /* Release extra storage */
   }
@@@@ -851,7 +852,11 @@@@ METHODDEF boolean  xv_process_app1(cinfo)
     exifInfo = (byte *) malloc((size_t) length);
     exifInfoSize = 0;
   }
-  else exifInfo = (byte *) realloc(exifInfo, exifInfoSize + length);
+  else {
+  	/* one APP1 data struct only, ignore extra stuff */
+        while (length-- > 0)
+		(void)j_getc(cinfo);
+  }
   if (!exifInfo) FatalError("out of memory in xv_process_app1 (EXIF info)");
   
   sp = exifInfo + exifInfoSize;
@


1.1
log
@Fix out-of-bounds access in CMYK to RGB conversion.
From: Patrick Keshishian <pkeshish@@gmail.com>
@
text
@d1 30
a30 4
$OpenBSD$
--- xvjpeg.c.orig	Thu Sep 24 21:58:28 2009
+++ xvjpeg.c	Thu Sep 24 21:58:45 2009
@@@@ -696,7 +696,7 @@@@ L2:
d39 1
a39 1
@@@@ -707,7 +707,7 @@@@ L2:
d48 13
@

