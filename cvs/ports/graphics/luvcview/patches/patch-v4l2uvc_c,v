head	1.3;
access;
symbols
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.05.12.23.10.26;	author espie;	state Exp;
branches;
next	1.2;
commitid	pi2GAEhRjORqaYzL;

1.2
date	2014.10.26.01.24.15;	author naddy;	state dead;
branches;
next	1.1;
commitid	9mpY7Fta7355K768;

1.1
date	2010.09.12.22.31.05;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@get rid of trivial nested function, as clang does not support this extension
@
text
@$OpenBSD$

Index: v4l2uvc.c
--- v4l2uvc.c.orig
+++ v4l2uvc.c
@@@@ -143,27 +143,17 @@@@ init_videoIn(struct vdIn *vd, char *device, int width,
     close(vd->fd);
     return -1;
 }
-int enum_controls(int vd) //struct vdIn *vd)
-{    
-  struct v4l2_queryctrl queryctrl;
-  struct v4l2_querymenu querymenu;
-  struct v4l2_control   control_s;
-  struct v4l2_input*    getinput;
 
-  //Name of the device
-  getinput=(struct v4l2_input *) calloc(1, sizeof(struct v4l2_input));
-  memset(getinput, 0, sizeof(struct v4l2_input));
-  getinput->index=0;
-  ioctl(vd,VIDIOC_ENUMINPUT , getinput);
-  printf ("Available controls of device '%s' (Type 1=Integer 2=Boolean 3=Menu 4=Button)\n", getinput->name);
-
   //subroutine to read menu items of controls with type 3
-  void enumerate_menu (void) {
+
+static  void enumerate_menu (int vd,  struct v4l2_queryctrl *queryctrl)
+{
+  struct v4l2_querymenu querymenu;
     printf ("  Menu items:\n");
     memset (&querymenu, 0, sizeof (querymenu));
-    querymenu.id = queryctrl.id;
-    for (querymenu.index = queryctrl.minimum;
-         querymenu.index <= queryctrl.maximum;
+    querymenu.id = queryctrl->id;
+    for (querymenu.index = queryctrl->minimum;
+         querymenu.index <= queryctrl->maximum;
          querymenu.index++) {
       if (0 == ioctl (vd, VIDIOC_QUERYMENU, &querymenu)) {
         printf ("  index:%d name:%s\n", querymenu.index, querymenu.name);
@@@@ -173,7 +163,23 @@@@ int enum_controls(int vd) //struct vdIn *vd)
         break;
       }
     }
-  }
+}
+
+#define enumerate_menu()	enumerate_menu(vd, &queryctrl)
+
+int enum_controls(int vd) //struct vdIn *vd)
+{    
+  struct v4l2_queryctrl queryctrl;
+  struct v4l2_control   control_s;
+  struct v4l2_input*    getinput;
+
+  //Name of the device
+  getinput=(struct v4l2_input *) calloc(1, sizeof(struct v4l2_input));
+  memset(getinput, 0, sizeof(struct v4l2_input));
+  getinput->index=0;
+  ioctl(vd,VIDIOC_ENUMINPUT , getinput);
+  printf ("Available controls of device '%s' (Type 1=Integer 2=Boolean 3=Menu 4=Button)\n", getinput->name);
+
 
   //predefined controls
   printf ("V4L2_CID_BASE         (predefined controls):\n");
@


1.2
log
@revert the removal of anonymous unions, like sys/videoio.h
@
text
@d1 15
a15 5
$OpenBSD: patch-v4l2uvc_c,v 1.1 2010/09/12 22:31:05 jakemsr Exp $
--- v4l2uvc.c.orig	Thu Aug 26 15:54:18 2010
+++ v4l2uvc.c	Thu Aug 26 15:54:54 2010
@@@@ -833,9 +833,9 @@@@ int v4L2UpDownPanTilt(struct vdIn *vd, short inc_p, sh
   control_s_array.controls = control_s;
d17 46
a62 6
   control_s[0].id = p_control;
-  control_s[0].value = inc_p;
+  control_s[0].un.value = inc_p;
   control_s[1].id = t_control;
-  control_s[1].value = inc_t;
+  control_s[1].un.value = inc_t;
d64 2
a65 60
   if ((err = ioctl(vd->fd, VIDIOC_S_EXT_CTRLS, &control_s_array)) < 0) {
     printf("ioctl pan-tilt updown control error\n");
@@@@ -930,18 +930,18 @@@@ int enum_frame_intervals(int dev, __u32 pixfmt, __u32 
 	while ((ret = ioctl(dev, VIDIOC_ENUM_FRAMEINTERVALS, &fival)) == 0) {
 		if (fival.type == V4L2_FRMIVAL_TYPE_DISCRETE) {
 				printf("%u/%u, ",
-						fival.discrete.numerator, fival.discrete.denominator);
+						fival.un.discrete.numerator, fival.un.discrete.denominator);
 		} else if (fival.type == V4L2_FRMIVAL_TYPE_CONTINUOUS) {
 				printf("{min { %u/%u } .. max { %u/%u } }, ",
-						fival.stepwise.min.numerator, fival.stepwise.min.numerator,
-						fival.stepwise.max.denominator, fival.stepwise.max.denominator);
+						fival.un.stepwise.min.numerator, fival.un.stepwise.min.numerator,
+						fival.un.stepwise.max.denominator, fival.un.stepwise.max.denominator);
 				break;
 		} else if (fival.type == V4L2_FRMIVAL_TYPE_STEPWISE) {
 				printf("{min { %u/%u } .. max { %u/%u } / "
 						"stepsize { %u/%u } }, ",
-						fival.stepwise.min.numerator, fival.stepwise.min.denominator,
-						fival.stepwise.max.numerator, fival.stepwise.max.denominator,
-						fival.stepwise.step.numerator, fival.stepwise.step.denominator);
+						fival.un.stepwise.min.numerator, fival.un.stepwise.min.denominator,
+						fival.un.stepwise.max.numerator, fival.un.stepwise.max.denominator,
+						fival.un.stepwise.step.numerator, fival.un.stepwise.step.denominator);
 				break;
 		}
 		fival.index++;
@@@@ -965,25 +965,25 @@@@ int enum_frame_sizes(int dev, __u32 pixfmt)
 	while ((ret = ioctl(dev, VIDIOC_ENUM_FRAMESIZES, &fsize)) == 0) {
 		if (fsize.type == V4L2_FRMSIZE_TYPE_DISCRETE) {
 			printf("{ discrete: width = %u, height = %u }\n",
-					fsize.discrete.width, fsize.discrete.height);
+					fsize.un.discrete.width, fsize.un.discrete.height);
 			ret = enum_frame_intervals(dev, pixfmt,
-					fsize.discrete.width, fsize.discrete.height);
+					fsize.un.discrete.width, fsize.un.discrete.height);
 			if (ret != 0)
 				printf("  Unable to enumerate frame sizes.\n");
 		} else if (fsize.type == V4L2_FRMSIZE_TYPE_CONTINUOUS) {
 			printf("{ continuous: min { width = %u, height = %u } .. "
 					"max { width = %u, height = %u } }\n",
-					fsize.stepwise.min_width, fsize.stepwise.min_height,
-					fsize.stepwise.max_width, fsize.stepwise.max_height);
+					fsize.un.stepwise.min_width, fsize.un.stepwise.min_height,
+					fsize.un.stepwise.max_width, fsize.un.stepwise.max_height);
 			printf("  Refusing to enumerate frame intervals.\n");
 			break;
 		} else if (fsize.type == V4L2_FRMSIZE_TYPE_STEPWISE) {
 			printf("{ stepwise: min { width = %u, height = %u } .. "
 					"max { width = %u, height = %u } / "
 					"stepsize { width = %u, height = %u } }\n",
-					fsize.stepwise.min_width, fsize.stepwise.min_height,
-					fsize.stepwise.max_width, fsize.stepwise.max_height,
-					fsize.stepwise.step_width, fsize.stepwise.step_height);
+					fsize.un.stepwise.min_width, fsize.un.stepwise.min_height,
+					fsize.un.stepwise.max_width, fsize.un.stepwise.max_height,
+					fsize.un.stepwise.step_width, fsize.un.stepwise.step_height);
 			printf("  Refusing to enumerate frame intervals.\n");
 			break;
 		}
@


1.1
log
@* no more anonymous unions in video(4)
* REVISION, new style WANTLIB/LIB_DEPENDS
@
text
@d1 1
a1 1
$OpenBSD$
@

