head	1.2;
access;
symbols
	OPENBSD_5_1:1.2.0.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.18.21.24.40;	author naddy;	state dead;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.10.20.20.37.48;	author brad;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2005.05.25.05.37.32;	author robert;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.07.29.17.38.59;	author brad;	state Exp;
branches;
next	;

1.1.4.1
date	2005.03.31.22.02.44;	author sturm;	state Exp;
branches;
next	;

1.1.6.1
date	2005.03.31.22.08.47;	author sturm;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2005.07.29.17.51.26;	author brad;	state Exp;
branches;
next	;

1.2.2.1
date	2012.06.27.14.33.35;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 3.7.2 which integrates the numerous security patches
brad@@ drops maintainership
@
text
@$OpenBSD: patch-libtiff_tif_strip_c,v 1.1 2004/10/20 20:37:48 brad Exp $
--- libtiff/tif_strip.c.orig	Tue Nov 11 10:43:10 2003
+++ libtiff/tif_strip.c	Wed Oct 20 14:38:11 2004
@@@@ -31,6 +31,32 @@@@
  */
 #include "tiffiop.h"
 
+static uint32
+summarize(TIFF* tif, size_t summand1, size_t summand2, const char* where)
+{
+	uint32	bytes = summand1 + summand2;
+
+	if (bytes - summand1 != summand2) {
+		TIFFError(tif->tif_name, "Integer overflow in %s", where);
+		bytes = 0;
+	}
+
+	return (bytes);
+}
+
+static uint32
+multiply(TIFF* tif, size_t nmemb, size_t elem_size, const char* where)
+{
+	uint32	bytes = nmemb * elem_size;
+
+	if (elem_size && bytes / elem_size != nmemb) {
+		TIFFError(tif->tif_name, "Integer overflow in %s", where);
+		bytes = 0;
+	}
+
+	return (bytes);
+}
+
 /*
  * Compute which strip a (row,sample) value is in.
  */
@@@@ -66,7 +92,8 @@@@ TIFFNumberOfStrips(TIFF* tif)
 	     (td->td_imagelength != 0 ? 1 : 0) :
 	     TIFFhowmany(td->td_imagelength, td->td_rowsperstrip));
 	if (td->td_planarconfig == PLANARCONFIG_SEPARATE)
-		nstrips *= td->td_samplesperpixel;
+		nstrips = multiply(tif, nstrips, td->td_samplesperpixel,
+				   "TIFFNumberOfStrips");
 	return (nstrips);
 }
 
@@@@ -100,15 +127,20 @@@@ TIFFVStripSize(TIFF* tif, uint32 nrows)
                               ycbcrsubsampling + 1 );
 
 		w = TIFFroundup(td->td_imagewidth, ycbcrsubsampling[0]);
-		scanline = TIFFhowmany(w*td->td_bitspersample, 8);
+		scanline = TIFFhowmany8(multiply(tif, w, td->td_bitspersample,
+						 "TIFFVStripSize"));
 		samplingarea = ycbcrsubsampling[0]*ycbcrsubsampling[1];
 		nrows = TIFFroundup(nrows, ycbcrsubsampling[1]);
 		/* NB: don't need TIFFhowmany here 'cuz everything is rounded */
+		scanline = multiply(tif, nrows, scanline, "TIFFVStripSize");
 		return ((tsize_t)
-		    (nrows*scanline + 2*(nrows*scanline / samplingarea)));
+		    summarize(tif, scanline,
+			      multiply(tif, 2, scanline / samplingarea,
+				       "TIFFVStripSize"), "TIFFVStripSize"));
 	} else
 #endif
-		return ((tsize_t)(nrows * TIFFScanlineSize(tif)));
+		return ((tsize_t) multiply(tif, nrows, TIFFScanlineSize(tif),
+					   "TIFFVStripSize"));
 }
 
 
@@@@ -189,10 +221,12 @@@@ TIFFScanlineSize(TIFF* tif)
 	TIFFDirectory *td = &tif->tif_dir;
 	tsize_t scanline;
 	
-	scanline = td->td_bitspersample * td->td_imagewidth;
+	scanline = multiply (tif, td->td_bitspersample, td->td_imagewidth,
+			     "TIFFScanlineSize");
 	if (td->td_planarconfig == PLANARCONFIG_CONTIG)
-		scanline *= td->td_samplesperpixel;
-	return ((tsize_t) TIFFhowmany(scanline, 8));
+		scanline = multiply (tif, scanline, td->td_samplesperpixel,
+				     "TIFFScanlineSize");
+	return ((tsize_t) TIFFhowmany8(scanline));
 }
 
 /*
@@@@ -207,11 +241,14 @@@@ TIFFRasterScanlineSize(TIFF* tif)
 	TIFFDirectory *td = &tif->tif_dir;
 	tsize_t scanline;
 	
-	scanline = td->td_bitspersample * td->td_imagewidth;
+	scanline = multiply (tif, td->td_bitspersample, td->td_imagewidth,
+			     "TIFFRasterScanlineSize");
 	if (td->td_planarconfig == PLANARCONFIG_CONTIG) {
-		scanline *= td->td_samplesperpixel;
-		return ((tsize_t) TIFFhowmany(scanline, 8));
+		scanline = multiply (tif, scanline, td->td_samplesperpixel,
+				     "TIFFRasterScanlineSize");
+		return ((tsize_t) TIFFhowmany8(scanline));
 	} else
-		return ((tsize_t)
-		    TIFFhowmany(scanline, 8)*td->td_samplesperpixel);
+		return ((tsize_t) multiply (tif, TIFFhowmany8(scanline),
+					    td->td_samplesperpixel,
+					    "TIFFRasterScanlineSize"));
 }
@


1.2.2.1
log
@Apply patches for CVE-2012-2113,
LibTIFF "tiff2pdf" Integer Overflow Vulnerability
@
text
@d1 48
a48 14
$OpenBSD$

Security fix for CVE-2012-2113
libtiff: integer overflow in tiff2pdf leading to heap-buffer overflow when reading a tiled tiff file

Patch from https://bugzilla.redhat.com/show_bug.cgi?id=810551

--- libtiff/tif_strip.c.orig	Tue Jan  4 05:31:28 2011
+++ libtiff/tif_strip.c	Wed Jun 27 16:29:48 2012
@@@@ -107,6 +107,7 @@@@ tsize_t
 TIFFVStripSize(TIFF* tif, uint32 nrows)
 {
 	TIFFDirectory *td = &tif->tif_dir;
+	uint32 stripsize;
d50 5
a54 12
 	if (nrows == (uint32) -1)
 		nrows = td->td_imagelength;
@@@@ -122,7 +123,7 @@@@ TIFFVStripSize(TIFF* tif, uint32 nrows)
 		 * YCbCr data for the extended image.
 		 */
 		uint16 ycbcrsubsampling[2];
-		tsize_t w, scanline, samplingarea;
+		uint32 w, scanline, samplingarea;
 
 		TIFFGetFieldDefaulted(tif, TIFFTAG_YCBCRSUBSAMPLING,
 				      ycbcrsubsampling + 0,
@@@@ -141,13 +142,19 @@@@ TIFFVStripSize(TIFF* tif, uint32 nrows)
d57 6
a62 7
 		scanline = multiply(tif, nrows, scanline, "TIFFVStripSize");
-		return ((tsize_t)
+		stripsize =
 		    summarize(tif, scanline,
 			      multiply(tif, 2, scanline / samplingarea,
-				       "TIFFVStripSize"), "TIFFVStripSize"));
+				       "TIFFVStripSize"), "TIFFVStripSize");
d64 4
a67 10
-		return ((tsize_t) multiply(tif, nrows, TIFFScanlineSize(tif),
-					   "TIFFVStripSize"));
+		stripsize = multiply(tif, nrows, TIFFScanlineSize(tif),
+				     "TIFFVStripSize");
+	/* Because tsize_t is signed, we might have conversion overflow */
+	if (((tsize_t) stripsize) < 0) {
+		TIFFErrorExt(tif->tif_clientdata, tif->tif_name, "Integer overflow in %s", "TIFFVStripSize");
+		stripsize = 0;
+	}
+	return (tsize_t) stripsize;
d71 36
@


1.1
log
@Fix memory allocation problems and numerous integer overflows.

CAN-2004-0803, CAN-2004-0804, CAN-2004-0886
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@SECURITY:
fix multiple vulnerabilities; bump PKGNAME
http://www.vuxml.org/openbsd/d045aeb6-9ea6-11d9-9623-00065bd5b0b6.html

ok brad@@
@
text
@@


1.1.2.2
log
@Fix a Denial of Service vulnerability and a buffer overflow.

- Check for zero YCbCr subsampling values which cause a division by zero crash.
- Properly check the BitsPerSample tag.

CAN-2005-1544
@
text
@d1 1
a1 1
$OpenBSD: patch-libtiff_tif_strip_c,v 1.1.2.1 2005/05/25 05:37:32 robert Exp $
d3 1
a3 1
+++ libtiff/tif_strip.c	Fri Jul 29 13:07:34 2005
d47 1
a47 2
@@@@ -99,16 +126,26 @@@@ TIFFVStripSize(TIFF* tif, uint32 nrows)
                               ycbcrsubsampling + 0, 
d50 1
a50 1
-		w = TIFFroundup(td->td_imagewidth, ycbcrsubsampling[0]);
a51 7
 		samplingarea = ycbcrsubsampling[0]*ycbcrsubsampling[1];
+		if (samplingarea == 0) {
+			TIFFError(tif->tif_name, "Invalid YCbCr subsampling");
+			return 0;
+		}
+
+		w = TIFFroundup(td->td_imagewidth, ycbcrsubsampling[0]);
d54 1
d71 1
a71 1
@@@@ -189,10 +226,12 @@@@ TIFFScanlineSize(TIFF* tif)
d87 1
a87 1
@@@@ -207,11 +246,14 @@@@ TIFFRasterScanlineSize(TIFF* tif)
@


1.1.6.1
log
@cumulative update with patches of recent months

MFC:
fix an issue with not being able to open some valid TIFF files.

http://www.sigmasoft.com/~openbsd/archive/openbsd-ports/200503/msg00090.html

From: Bernd Ahlers <b dot ahlers at ba-net dot org>
---
Integer overflow in tif_dirread.c and tif_fax3.c for libtiff allows remote
attackers to execute arbitrary code via a TIFF file containing a TIFF_ASCII
or TIFF_UNDEFINED directory entry with a -1 entry count, which leads to a
heap-based buffer overflow.

CAN-2004-1308
---
fix an issue with alpha channels.

http://bugzilla.remotesensing.org/show_bug.cgi?id=718
---
fix MASTER_SITES; From: Bernd Ahlers <b dot ahlers at ba-net dot org>
---
Fix memory allocation problems and numerous integer overflows.

CAN-2004-0803, CAN-2004-0804, CAN-2004-0886

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-libtiff_tif_strip_c,v 1.1 2004/10/20 20:37:48 brad Exp $
@


1.1.6.2
log
@Fix a Denial of Service vulnerability and a buffer overflow.

- Check for zero YCbCr subsampling values which cause a division by zero crash.
- Properly check the BitsPerSample tag.

CAN-2005-1544
@
text
@d1 1
a1 1
$OpenBSD: patch-libtiff_tif_strip_c,v 1.1.2.2 2005/07/29 17:38:59 brad Exp $
d3 1
a3 1
+++ libtiff/tif_strip.c	Fri Jul 29 13:07:34 2005
d47 1
a47 2
@@@@ -99,16 +126,26 @@@@ TIFFVStripSize(TIFF* tif, uint32 nrows)
                               ycbcrsubsampling + 0, 
d50 1
a50 1
-		w = TIFFroundup(td->td_imagewidth, ycbcrsubsampling[0]);
a51 7
 		samplingarea = ycbcrsubsampling[0]*ycbcrsubsampling[1];
+		if (samplingarea == 0) {
+			TIFFError(tif->tif_name, "Invalid YCbCr subsampling");
+			return 0;
+		}
+
+		w = TIFFroundup(td->td_imagewidth, ycbcrsubsampling[0]);
d54 1
d71 1
a71 1
@@@@ -189,10 +226,12 @@@@ TIFFScanlineSize(TIFF* tif)
d87 1
a87 1
@@@@ -207,11 +246,14 @@@@ TIFFRasterScanlineSize(TIFF* tif)
@


1.1.4.1
log
@cumulative update with patches of recent months

MFC:
fix an issue with not being able to open some valid TIFF files.

http://www.sigmasoft.com/~openbsd/archive/openbsd-ports/200503/msg00090.html

From: Bernd Ahlers <b dot ahlers at ba-net dot org>
---
Integer overflow in tif_dirread.c and tif_fax3.c for libtiff allows remote
attackers to execute arbitrary code via a TIFF file containing a TIFF_ASCII
or TIFF_UNDEFINED directory entry with a -1 entry count, which leads to a
heap-based buffer overflow.

CAN-2004-1308
---
fix an issue with alpha channels.

http://bugzilla.remotesensing.org/show_bug.cgi?id=718
---
fix MASTER_SITES; From: Bernd Ahlers <b dot ahlers at ba-net dot org>
---
Fix memory allocation problems and numerous integer overflows.

CAN-2004-0803, CAN-2004-0804, CAN-2004-0886

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-libtiff_tif_strip_c,v 1.1 2004/10/20 20:37:48 brad Exp $
@

