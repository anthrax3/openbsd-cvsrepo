head	1.3;
access;
symbols
	OPENBSD_5_7:1.1.0.10
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.07.08.19.36.54;	author naddy;	state dead;
branches;
next	1.2;
commitid	pCU3S8EYHo6g9JDw;

1.2
date	2015.03.29.17.39.22;	author naddy;	state Exp;
branches;
next	1.1;
commitid	DVvDfC6c0cv0tIBV;

1.1
date	2013.05.03.11.00.39;	author jasper;	state Exp;
branches
	1.1.2.1
	1.1.8.1
	1.1.10.1;
next	;

1.1.2.1
date	2013.05.03.11.04.00;	author jasper;	state Exp;
branches;
next	;

1.1.8.1
date	2015.03.29.20.58.58;	author naddy;	state Exp;
branches;
next	;
commitid	yV7LOUcjZFa2iAbX;

1.1.10.1
date	2015.03.29.19.41.56;	author naddy;	state Exp;
branches;
next	;
commitid	tay2jRrbkJ3GxbDm;


desc
@@


1.3
log
@Update to 4.0.4.  No major changes.
@
text
@$OpenBSD: patch-tools_tiffdither_c,v 1.2 2015/03/29 17:39:22 naddy Exp $

Check memory allocations to avoid writing to NULL pointer.
Also check multiplication overflow. Fixes #2501, CVE-2014-8128.
https://github.com/vadz/libtiff/commit/147b2698c84004fe2da93c0fc7177a7c3797533d

--- tools/tiffdither.c.orig	Thu May  2 16:44:29 2013
+++ tools/tiffdither.c	Sun Mar 29 18:44:39 2015
@@@@ -39,6 +39,7 @@@@
 #endif
 
 #include "tiffio.h"
+#include "tiffiop.h"
 
 #define	streq(a,b)	(strcmp(a,b) == 0)
 #define	strneq(a,b,n)	(strncmp(a,b,n) == 0)
@@@@ -56,7 +57,7 @@@@ static	void usage(void);
  * Floyd-Steinberg error propragation with threshold.
  * This code is stolen from tiffmedian.
  */
-static void
+static int
 fsdither(TIFF* in, TIFF* out)
 {
 	unsigned char *outline, *inputline, *inptr;
@@@@ -68,14 +69,19 @@@@ fsdither(TIFF* in, TIFF* out)
 	int lastline, lastpixel;
 	int bit;
 	tsize_t outlinesize;
+	int errcode = 0;
 
 	imax = imagelength - 1;
 	jmax = imagewidth - 1;
 	inputline = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(in));
-	thisline = (short *)_TIFFmalloc(imagewidth * sizeof (short));
-	nextline = (short *)_TIFFmalloc(imagewidth * sizeof (short));
+	thisline = (short *)_TIFFmalloc(TIFFSafeMultiply(tmsize_t, imagewidth, sizeof (short)));
+	nextline = (short *)_TIFFmalloc(TIFFSafeMultiply(tmsize_t, imagewidth, sizeof (short)));
 	outlinesize = TIFFScanlineSize(out);
 	outline = (unsigned char *) _TIFFmalloc(outlinesize);
+	if (! (inputline && thisline && nextline && outline)) {
+	    fprintf(stderr, "Out of memory.\n");
+	    goto skip_on_error;
+	}
 
 	/*
 	 * Get first line
@@@@ -93,7 +99,7 @@@@ fsdither(TIFF* in, TIFF* out)
 		nextline = tmpptr;
 		lastline = (i == imax);
 		if (TIFFReadScanline(in, inputline, i, 0) <= 0)
-			break;
+			goto skip_on_error;
 		inptr = inputline;
 		nextptr = nextline;
 		for (j = 0; j < imagewidth; ++j)
@@@@ -131,13 +137,18 @@@@ fsdither(TIFF* in, TIFF* out)
 			}
 		}
 		if (TIFFWriteScanline(out, outline, i-1, 0) < 0)
-			break;
+			goto skip_on_error;
 	}
+	goto exit_label;
+
   skip_on_error:
+	errcode = 1;
+  exit_label:
 	_TIFFfree(inputline);
 	_TIFFfree(thisline);
 	_TIFFfree(nextline);
 	_TIFFfree(outline);
+	return errcode;
 }
 
 static	uint16 compression = COMPRESSION_PACKBITS;
@


1.2
log
@Security update to 4.0.4beta (plus one further upstream fix).
Should fix CVE-2014-8127, CVE-2014-8128, CVE-2014-8129, CVE-2014-8130,
CVE-2014-9655, CVE-2015-1547.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@Security fixes for
CVE-2013-1960 - Heap-based buffer overflow
CVE-2013-1961 - Stack-based buffer overflow

ok sthen@@
@
text
@d3 3
a5 2
Security fix for CVE-2013-1961 libtiff (tiff2pdf): Stack-based buffer overflow
with malformed image-length and resolution
d7 70
a76 13
Patch from https://bugzilla.redhat.com/show_bug.cgi?id=952131

--- tools/tiffdither.c.orig	Wed Mar 10 19:56:50 2010
+++ tools/tiffdither.c	Fri May  3 12:05:14 2013
@@@@ -260,7 +260,7 @@@@ main(int argc, char* argv[])
 		TIFFSetField(out, TIFFTAG_FILLORDER, fillorder);
 	else
 		CopyField(TIFFTAG_FILLORDER, shortv);
-	sprintf(thing, "Dithered B&W version of %s", argv[optind]);
+	snprintf(thing, sizeof(thing), "Dithered B&W version of %s", argv[optind]);
 	TIFFSetField(out, TIFFTAG_IMAGEDESCRIPTION, thing);
 	CopyField(TIFFTAG_PHOTOMETRIC, shortv);
 	CopyField(TIFFTAG_ORIENTATION, shortv);
@


1.1.8.1
log
@Security update to 4.0.4beta (plus one further upstream fix).
Should fix CVE-2014-8127, CVE-2014-8128, CVE-2014-8129, CVE-2014-8130,
CVE-2014-9655, CVE-2015-1547.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_tiffdither_c,v 1.1.10.1 2015/03/29 19:41:56 naddy Exp $
d3 2
a4 3
Check memory allocations to avoid writing to NULL pointer.
Also check multiplication overflow. Fixes #2501, CVE-2014-8128.
https://github.com/vadz/libtiff/commit/147b2698c84004fe2da93c0fc7177a7c3797533d
d6 13
a18 70
--- tools/tiffdither.c.orig	Thu May  2 16:44:29 2013
+++ tools/tiffdither.c	Sun Mar 29 18:44:39 2015
@@@@ -39,6 +39,7 @@@@
 #endif
 
 #include "tiffio.h"
+#include "tiffiop.h"
 
 #define	streq(a,b)	(strcmp(a,b) == 0)
 #define	strneq(a,b,n)	(strncmp(a,b,n) == 0)
@@@@ -56,7 +57,7 @@@@ static	void usage(void);
  * Floyd-Steinberg error propragation with threshold.
  * This code is stolen from tiffmedian.
  */
-static void
+static int
 fsdither(TIFF* in, TIFF* out)
 {
 	unsigned char *outline, *inputline, *inptr;
@@@@ -68,14 +69,19 @@@@ fsdither(TIFF* in, TIFF* out)
 	int lastline, lastpixel;
 	int bit;
 	tsize_t outlinesize;
+	int errcode = 0;
 
 	imax = imagelength - 1;
 	jmax = imagewidth - 1;
 	inputline = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(in));
-	thisline = (short *)_TIFFmalloc(imagewidth * sizeof (short));
-	nextline = (short *)_TIFFmalloc(imagewidth * sizeof (short));
+	thisline = (short *)_TIFFmalloc(TIFFSafeMultiply(tmsize_t, imagewidth, sizeof (short)));
+	nextline = (short *)_TIFFmalloc(TIFFSafeMultiply(tmsize_t, imagewidth, sizeof (short)));
 	outlinesize = TIFFScanlineSize(out);
 	outline = (unsigned char *) _TIFFmalloc(outlinesize);
+	if (! (inputline && thisline && nextline && outline)) {
+	    fprintf(stderr, "Out of memory.\n");
+	    goto skip_on_error;
+	}
 
 	/*
 	 * Get first line
@@@@ -93,7 +99,7 @@@@ fsdither(TIFF* in, TIFF* out)
 		nextline = tmpptr;
 		lastline = (i == imax);
 		if (TIFFReadScanline(in, inputline, i, 0) <= 0)
-			break;
+			goto skip_on_error;
 		inptr = inputline;
 		nextptr = nextline;
 		for (j = 0; j < imagewidth; ++j)
@@@@ -131,13 +137,18 @@@@ fsdither(TIFF* in, TIFF* out)
 			}
 		}
 		if (TIFFWriteScanline(out, outline, i-1, 0) < 0)
-			break;
+			goto skip_on_error;
 	}
+	goto exit_label;
+
   skip_on_error:
+	errcode = 1;
+  exit_label:
 	_TIFFfree(inputline);
 	_TIFFfree(thisline);
 	_TIFFfree(nextline);
 	_TIFFfree(outline);
+	return errcode;
 }
 
 static	uint16 compression = COMPRESSION_PACKBITS;
@


1.1.10.1
log
@Security update to 4.0.4beta (plus one further upstream fix).
Should fix CVE-2014-8127, CVE-2014-8128, CVE-2014-8129, CVE-2014-8130,
CVE-2014-9655, CVE-2015-1547.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_tiffdither_c,v 1.2 2015/03/29 17:39:22 naddy Exp $
d3 2
a4 3
Check memory allocations to avoid writing to NULL pointer.
Also check multiplication overflow. Fixes #2501, CVE-2014-8128.
https://github.com/vadz/libtiff/commit/147b2698c84004fe2da93c0fc7177a7c3797533d
d6 13
a18 70
--- tools/tiffdither.c.orig	Thu May  2 16:44:29 2013
+++ tools/tiffdither.c	Sun Mar 29 18:44:39 2015
@@@@ -39,6 +39,7 @@@@
 #endif
 
 #include "tiffio.h"
+#include "tiffiop.h"
 
 #define	streq(a,b)	(strcmp(a,b) == 0)
 #define	strneq(a,b,n)	(strncmp(a,b,n) == 0)
@@@@ -56,7 +57,7 @@@@ static	void usage(void);
  * Floyd-Steinberg error propragation with threshold.
  * This code is stolen from tiffmedian.
  */
-static void
+static int
 fsdither(TIFF* in, TIFF* out)
 {
 	unsigned char *outline, *inputline, *inptr;
@@@@ -68,14 +69,19 @@@@ fsdither(TIFF* in, TIFF* out)
 	int lastline, lastpixel;
 	int bit;
 	tsize_t outlinesize;
+	int errcode = 0;
 
 	imax = imagelength - 1;
 	jmax = imagewidth - 1;
 	inputline = (unsigned char *)_TIFFmalloc(TIFFScanlineSize(in));
-	thisline = (short *)_TIFFmalloc(imagewidth * sizeof (short));
-	nextline = (short *)_TIFFmalloc(imagewidth * sizeof (short));
+	thisline = (short *)_TIFFmalloc(TIFFSafeMultiply(tmsize_t, imagewidth, sizeof (short)));
+	nextline = (short *)_TIFFmalloc(TIFFSafeMultiply(tmsize_t, imagewidth, sizeof (short)));
 	outlinesize = TIFFScanlineSize(out);
 	outline = (unsigned char *) _TIFFmalloc(outlinesize);
+	if (! (inputline && thisline && nextline && outline)) {
+	    fprintf(stderr, "Out of memory.\n");
+	    goto skip_on_error;
+	}
 
 	/*
 	 * Get first line
@@@@ -93,7 +99,7 @@@@ fsdither(TIFF* in, TIFF* out)
 		nextline = tmpptr;
 		lastline = (i == imax);
 		if (TIFFReadScanline(in, inputline, i, 0) <= 0)
-			break;
+			goto skip_on_error;
 		inptr = inputline;
 		nextptr = nextline;
 		for (j = 0; j < imagewidth; ++j)
@@@@ -131,13 +137,18 @@@@ fsdither(TIFF* in, TIFF* out)
 			}
 		}
 		if (TIFFWriteScanline(out, outline, i-1, 0) < 0)
-			break;
+			goto skip_on_error;
 	}
+	goto exit_label;
+
   skip_on_error:
+	errcode = 1;
+  exit_label:
 	_TIFFfree(inputline);
 	_TIFFfree(thisline);
 	_TIFFfree(nextline);
 	_TIFFfree(outline);
+	return errcode;
 }
 
 static	uint16 compression = COMPRESSION_PACKBITS;
@


1.1.2.1
log
@Security fixes for
CVE-2013-1960 - Heap-based buffer overflow
CVE-2013-1961 - Stack-based buffer overflow

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_tiffdither_c,v 1.1 2013/05/03 11:00:39 jasper Exp $
@

