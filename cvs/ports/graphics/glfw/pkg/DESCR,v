head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	jca_20160426:1.1.1.1
	jca:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.04.26.15.30.50;	author jca;	state Exp;
branches
	1.1.1.1;
next	;
commitid	zM6Ez0ZqJibMg3CH;

1.1.1.1
date	2016.04.26.15.30.50;	author jca;	state Exp;
branches;
next	;
commitid	zM6Ez0ZqJibMg3CH;


desc
@@



1.1
log
@Initial revision
@
text
@GLFW is an Open Source, multi-platform library for creating windows with
OpenGL contexts and receiving input and events. It is easy to integrate
into existing applications and does not lay claim to the main loop.

GLFW is written in C and has native support for Windows, OS X and many
Unix-like systems using the X Window System, such as Linux and FreeBSD.

Features:
* Gives you a window and OpenGL context with just two function calls
* Support for OpenGL 3.2+ with profiles and flags, OpenGL ES, MSAA, sRGB
  and robustness
* Support for multiple windows, multiple monitors, high-DPI, gamma ramps
  and clipboard
* Support for keyboard, mouse, gamepad, time and window event input, via
  polling or callbacks
* Access to native objects and compile-time options for platform
  specific features
@


1.1.1.1
log
@Import glfw

from maintainer Gregor Best, ok sthen@@

GLFW is an Open Source, multi-platform library for creating windows with
OpenGL contexts and receiving input and events. It is easy to integrate
into existing applications and does not lay claim to the main loop.

GLFW is written in C and has native support for Windows, OS X and many
Unix-like systems using the X Window System, such as Linux and FreeBSD.

Features:
* Gives you a window and OpenGL context with just two function calls
* Support for OpenGL 3.2+ with profiles and flags, OpenGL ES, MSAA, sRGB
  and robustness
* Support for multiple windows, multiple monitors, high-DPI, gamma ramps
  and clipboard
* Support for keyboard, mouse, gamepad, time and window event input, via
  polling or callbacks
* Access to native objects and compile-time options for platform
  specific features
@
text
@@
