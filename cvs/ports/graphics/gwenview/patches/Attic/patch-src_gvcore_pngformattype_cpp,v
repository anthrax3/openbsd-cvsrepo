head	1.2;
access;
symbols
	OPENBSD_5_9:1.1.0.18
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.20
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.16
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.04.29.21.10.21;	author zhuk;	state dead;
branches;
next	1.1;
commitid	u9TvebbKy1wgQMr9;

1.1
date	2011.07.08.20.36.09;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove KDE3 applications that have well-working KDE4+ counterparts.
@
text
@$OpenBSD: patch-src_gvcore_pngformattype_cpp,v 1.1 2011/07/08 20:36:09 naddy Exp $

Fix build with png-1.5.

--- src/gvcore/pngformattype.cpp.orig	Sat Sep 15 07:46:13 2007
+++ src/gvcore/pngformattype.cpp	Tue Jul  5 23:17:11 2011
@@@@ -211,7 +211,7 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 
     if ( color_type == PNG_COLOR_TYPE_GRAY ) {
 	// Black & White or 8-bit grayscale
-	if ( bit_depth == 1 && info_ptr->channels == 1 ) {
+	if ( bit_depth == 1 && png_get_channels(png_ptr, info_ptr) == 1 ) {
 	    png_set_invert_mono( png_ptr );
 	    png_read_update_info( png_ptr, info_ptr );
 	    if (!image.create( width, height, 1, 2, QImage::BigEndian ))
@@@@ -245,16 +245,24 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 		image.setColor( i, qRgba(c,c,c,0xff) );
 	    }
 	    if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS) ) {
-		const int g = info_ptr->trans_values.gray;
+		png_bytep trans_alpha;
+		int num_trans;
+		png_color_16p trans_color;
+		png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &num_trans, &trans_color);
+		const int g = trans_color->gray;
 		if (g < ncols) {
 		    image.setAlphaBuffer(TRUE);
 		    image.setColor(g, image.color(g) & RGB_MASK);
 		}
 	    }
 	}
-    } else if ( color_type == PNG_COLOR_TYPE_PALETTE
+    } else {
+     png_colorp palette;
+     int num_palette;
+     png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);
+     if ( color_type == PNG_COLOR_TYPE_PALETTE
      && png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)
-     && info_ptr->num_palette <= 256 )
+     && num_palette <= 256 )
     {
 	// 1-bit and 8-bit color
 	if ( bit_depth != 1 )
@@@@ -262,28 +270,32 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 	png_read_update_info( png_ptr, info_ptr );
 	png_get_IHDR(png_ptr, info_ptr,
 	    &width, &height, &bit_depth, &color_type, 0, 0, 0);
-	if (!image.create(width, height, bit_depth, info_ptr->num_palette,
+	if (!image.create(width, height, bit_depth, num_palette,
 	    QImage::BigEndian))
 	    return;
 	int i = 0;
 	if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS) ) {
+	    png_bytep trans_alpha;
+	    int num_trans;
+	    png_color_16p trans_color;
+	    png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &num_trans, &trans_color);
 	    image.setAlphaBuffer( TRUE );
-	    while ( i < info_ptr->num_trans ) {
+	    while ( i < num_trans ) {
 		image.setColor(i, qRgba(
-		    info_ptr->palette[i].red,
-		    info_ptr->palette[i].green,
-		    info_ptr->palette[i].blue,
-		    info_ptr->trans[i]
+		    palette[i].red,
+		    palette[i].green,
+		    palette[i].blue,
+		    trans_alpha[i]
 		    )
 		);
 		i++;
 	    }
 	}
-	while ( i < info_ptr->num_palette ) {
+	while ( i < num_palette ) {
 	    image.setColor(i, qRgba(
-		info_ptr->palette[i].red,
-		info_ptr->palette[i].green,
-		info_ptr->palette[i].blue,
+		palette[i].red,
+		palette[i].green,
+		palette[i].blue,
 		0xff
 		)
 	    );
@@@@ -318,12 +330,13 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 	}
 
 	png_read_update_info(png_ptr, info_ptr);
-    }
+      }
 
     // Qt==ARGB==Big(ARGB)==Little(BGRA)
     if ( QImage::systemByteOrder() == QImage::LittleEndian ) {
 	png_set_bgr(png_ptr);
     }
+    }
 }
 
 
@@@@ -381,7 +394,7 @@@@ int PNGFormat::decode(QImage& img, QImageConsumer* con
 	    return -1;
 	}
 
-	if (setjmp((png_ptr)->jmpbuf)) {
+	if (setjmp(png_jmpbuf(png_ptr))) {
 	    png_destroy_read_struct(&png_ptr, &info_ptr, 0);
 	    image = 0;
 	    return -1;
@@@@ -409,7 +422,7 @@@@ int PNGFormat::decode(QImage& img, QImageConsumer* con
 
     if ( !png_ptr ) return 0;
 
-    if (setjmp(png_ptr->jmpbuf)) {
+    if (setjmp(png_jmpbuf(png_ptr))) {
 	png_destroy_read_struct(&png_ptr, &info_ptr, 0);
 	image = 0;
 	state = MovieStart;
@@@@ -476,7 +489,7 @@@@ void PNGFormat::end(png_structp png, png_infop info)
     consumer->frameDone(QPoint(offx,offy),r);
     consumer->end();
     state = FrameStart;
-    unused_data = (int)png->buffer_size; // Since libpng doesn't tell us
+    unused_data = png_process_data_pause(png, 1);
 }
 
 #ifdef PNG_USER_CHUNKS_SUPPORTED
@


1.1
log
@Fix build with png-1.5.
All fixes from/via NetBSD pkgsrc.  The people there did a lot of
heavy lifting.
@
text
@d1 1
a1 1
$OpenBSD$
@

