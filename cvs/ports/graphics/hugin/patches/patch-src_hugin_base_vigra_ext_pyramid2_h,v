head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.30
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.26
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.28
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.24
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.18
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.16
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.8
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.6
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	sthen_20090419:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.04.19.11.18.40;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.19.11.18.40;	author sthen;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

- allows to build with gcc3; taken from enblend's pyramid.h

--- src/hugin_base/vigra_ext/pyramid2.h.orig	Fri Apr 17 23:23:55 2009
+++ src/hugin_base/vigra_ext/pyramid2.h	Fri Apr 17 23:25:44 2009
@@@@ -647,7 +647,8 @@@@ inline void reduce(bool wraparound,
 
         // Main pixels in first row
         for (sx = sy, evenX = true, srcx = 0, dstx = 0;  srcx < src_w; ++srcx, ++sx.x) {
-            SKIPSMImagePixelType icurrent(SKIPSMImagePixelType(sa(sx)));
+            SKIPSMImagePixelType foo = SKIPSMImagePixelType(sa(sx));
+            SKIPSMImagePixelType icurrent(foo);
             if (evenX) {
                 isc0[dstx] = isr1 + IMUL6(isr0) + isrp + icurrent;
                 isc1[dstx] = IMUL5(isc0[dstx]);
@@@@ -714,7 +715,8 @@@@ inline void reduce(bool wraparound,
 
                 // Main entries in row
                 for (evenX = false, srcx = 1, dstx = 0; srcx < src_w; ++srcx, ++sx.x) {
-                    SKIPSMImagePixelType icurrent(SKIPSMImagePixelType(sa(sx)));
+                    SKIPSMImagePixelType foo = SKIPSMImagePixelType(sa(sx));
+                    SKIPSMImagePixelType icurrent(foo);
                     if (evenX) {
                         SKIPSMImagePixelType ip = isc1[dstx] + IMUL6(isc0[dstx]) + iscp[dstx];
                         isc1[dstx] = isc0[dstx] + iscp[dstx];
@@@@ -776,7 +778,8 @@@@ inline void reduce(bool wraparound,
 
                 // Main entries in odd-numbered row
                 for (evenX = false, srcx = 1, dstx = 0; srcx < src_w; ++srcx, ++sx.x) {
-                    SKIPSMImagePixelType icurrent(SKIPSMImagePixelType(sa(sx)));
+                    SKIPSMImagePixelType foo = SKIPSMImagePixelType(sa(sx));
+                    SKIPSMImagePixelType icurrent(foo);
                     if (evenX) {
                         iscp[dstx] = (isr1 + IMUL6(isr0) + isrp + icurrent) * 4;
                         isr1 = isr0 + isrp;
@


1.1.1.1
log
@import graphics/hugin: this port was made possible by Emmanuel Viaud's
work on enblend-enfuse, big thanks!

Goal: an easy to use cross-platform panoramic imaging toolchain
based on the Panorama Tools library.

With hugin you can assemble a mosaic of photographs into a
complete immersive panorama, stitch any series of overlapping
pictures and much more.

This package contains the following programs:

 - hugin, The main program, a GUI for the panorama tools suite
   and some programs included here.

 - nona, a simple replacement for PTStitcher (doesn't support most
   features of PTStitcher, but is faster, opensource and
   will be extended in the future).
 
 - nona_gui, nona with a graphical progress bar.

 - autooptimiser, optimise a panorama pairwise, starting from an
   anchor image. cmd line version of the pairwise mode in hugin

will be hooked to the build after tests on additional arch.
@
text
@@
