head	1.9;
access;
symbols
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_4_9:1.5.0.2
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_5:1.1.0.2;
locks; strict;
comment	@# @;


1.9
date	2012.02.26.14.57.54;	author naddy;	state dead;
branches;
next	1.8;

1.8
date	2012.02.03.18.23.14;	author gsoares;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2011.07.15.11.10.40;	author naddy;	state dead;
branches;
next	1.6;

1.6
date	2011.07.08.20.34.37;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.01.17.09.36;	author jasper;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2004.09.20.01.24.11;	author brad;	state dead;
branches;
next	1.3;

1.3
date	2004.07.10.23.19.21;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.06.22.06.17;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.03.05.13.04;	author robert;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2004.05.03.11.30.13;	author robert;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.07.10.23.31.22;	author brad;	state Exp;
branches;
next	;

1.1.4.1
date	2004.05.03.11.42.13;	author robert;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2004.07.10.23.41.49;	author brad;	state Exp;
branches;
next	;

1.5.2.1
date	2011.07.01.17.10.43;	author jasper;	state Exp;
branches;
next	;

1.8.2.1
date	2012.02.03.22.29.09;	author gsoares;	state Exp;
branches;
next	;


desc
@@


1.9
log
@update to 1.5.9
@
text
@$OpenBSD: patch-pngerror_c,v 1.8 2012/02/03 18:23:14 gsoares Exp $

Fix for CVE-2011-3464
(libpng "png_formatted_warning()" Off-by-One Vulnerability)

patch came from upstream git:
(http://libpng.git.sourceforge.net/git/gitweb.cgi?p=libpng/libpng;a=commit;h=
00c6a9a62c1825617c35c03ceb408114fffeca32)

--- pngerror.c.orig	Thu Nov  3 01:42:50 2011
+++ pngerror.c	Fri Feb  3 11:53:42 2012
@@@@ -284,32 +284,35 @@@@ png_formatted_warning(png_structp png_ptr, png_warning
    /* The internal buffer is just 128 bytes - enough for all our messages,
     * overflow doesn't happen because this code checks!
     */
-   size_t i;
+   size_t i = 0; /* Index in the msg[] buffer: */
    char msg[128];
 
-   for (i=0; i<(sizeof msg)-1 && *message != '\0'; ++i)
+   /* Each iteration through the following loop writes at most one character
+    * to msg[i++] then returns here to validate that there is still space for
+    * the trailing '\0'.  It may (in the case of a parameter) read more than
+    * one character from message[]; it must check for '\0' and continue to the
+    * test if it finds the end of string.
+    */
+   while (i<(sizeof msg)-1 && *message != '\0')
    {
-      if (*message == '@@')
+      /* '@@' at end of string is now just printed (previously it was skipped);
+       * it is an error in the calling code to terminate the string with @@.
+       */
+      if (p != NULL && *message == '@@' && message[1] != '\0')
       {
-         int parameter = -1;
-         switch (*++message)
-         {
-            case '1':
-               parameter = 0;
-               break;
+         int parameter_char = *++message; /* Consume the '@@' */
+         static const char valid_parameters[] = "123456789";
+         int parameter = 0;
 
-            case '2':
-               parameter = 1;
-               break;
+         /* Search for the parameter digit, the index in the string is the
+          * parameter to use.
+          */
+         while (valid_parameters[parameter] != parameter_char &&
+            valid_parameters[parameter] != '\0')
+            ++parameter;
 
-            case '\0':
-               continue; /* To break out of the for loop above. */
-
-            default:
-               break;
-         }
-
-         if (parameter >= 0 && parameter < PNG_WARNING_PARAMETER_COUNT)
+         /* If the parameter digit is out of range it will just get printed. */
+         if (parameter < PNG_WARNING_PARAMETER_COUNT)
          {
             /* Append this parameter */
             png_const_charp parm = p[parameter];
@@@@ -319,28 +322,32 @@@@ png_formatted_warning(png_structp png_ptr, png_warning
              * that parm[] has been initialized, so there is no guarantee of a
              * trailing '\0':
              */
-            for (; i<(sizeof msg)-1 && parm != '\0' && parm < pend; ++i)
-               msg[i] = *parm++;
+            while (i<(sizeof msg)-1 && *parm != '\0' && parm < pend)
+               msg[i++] = *parm++;
 
+            /* Consume the parameter digit too: */
             ++message;
             continue;
          }
 
          /* else not a parameter and there is a character after the @@ sign; just
-          * copy that.
+          * copy that.  This is known not to be '\0' because of the test above.
           */
       }
 
       /* At this point *message can't be '\0', even in the bad parameter case
        * above where there is a lone '@@' at the end of the message string.
        */
-      msg[i] = *message++;
+      msg[i++] = *message++;
    }
 
    /* i is always less than (sizeof msg), so: */
    msg[i] = '\0';
 
-   /* And this is the formatted message: */
+   /* And this is the formatted message, it may be larger than
+    * PNG_MAX_ERROR_TEXT, but that is only used for 'chunk' errors and these are
+    * not (currently) formatted.
+    */
    png_warning(png_ptr, msg);
 }
 #endif /* PNG_WARNINGS_SUPPORTED */
@


1.8
log
@Fix for CVE-2011-3464
(libpng "png_formatted_warning()" Off-by-One Vulnerability)

patch came from upstream git:
(http://libpng.git.sourceforge.net/git/gitweb.cgi?p=libpng/libpng;a=commit;h=
00c6a9a62c1825617c35c03ceb408114fffeca32)

OK sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.8.2.1
log
@Fix for CVE-2011-3464
(libpng "png_formatted_warning()" Off-by-One Vulnerability)

patch came from upstream git:
(http://libpng.git.sourceforge.net/git/gitweb.cgi?p=libpng/libpng;a=commit;h=
00c6a9a62c1825617c35c03ceb408114fffeca32)

OK sthen@@
@
text
@d10 2
a11 2
--- pngerror.c.orig	Thu Jul  7 08:24:47 2011
+++ pngerror.c	Fri Feb  3 16:35:44 2012
@


1.7
log
@SECURITY update to png-1.5.4:
1. buffer overwrite in png_rgb_to_gray (CVE-2011-2690)
2. crash in png_default_error due to use of NULL Pointer (CVE-2011-2691)
3. memory corruption when handling empty sCAL chunks (CVE-2011-2692)
@
text
@d1 1
a1 1
$OpenBSD: patch-pngerror_c,v 1.6 2011/07/08 20:34:37 naddy Exp $
d3 2
a4 2
Fix for CVE-2011-2501
libpng "png_format_buffer()" Denial of Service Vulnerability
d6 3
a8 2
From upstream git:
http://libpng.git.sourceforge.net/git/gitweb.cgi?p=libpng/libpng;a=commitdiff;h=65e6d5a34f49acdb362a0625a706c6b914e670af
d10 18
a27 3
--- pngerror.c.orig	Thu Mar 31 18:23:40 2011
+++ pngerror.c	Sun Jul  3 00:19:50 2011
@@@@ -185,8 +185,13 @@@@ png_format_buffer(png_structp png_ptr, png_charp buffe
d29 64
a92 11
       buffer[iout++] = ':';
       buffer[iout++] = ' ';
-      png_memcpy(buffer + iout, error_message, PNG_MAX_ERROR_TEXT);
-      buffer[iout + PNG_MAX_ERROR_TEXT - 1] = '\0';
+
+      iin = 0;
+      while (iin < PNG_MAX_ERROR_TEXT-1 && error_message[iin] != '\0')
+         buffer[iout++] = error_message[iin++];
+
+      /* iin < PNG_MAX_ERROR_TEXT, so the following is safe: */
+      buffer[iout] = '\0';
d94 10
d105 1
a105 1
 #endif /* PNG_WARNINGS_SUPPORTED || PNG_ERROR_TEXT_SUPPORTED */
@


1.6
log
@Update to png 1.5.2.  Lots of improvements, but also significant
API incompatibility:

"The libpng 1.5.x series finally hides the contents of the venerable
and hoary png_struct and png_info data structures inside private
(i.e., non-installed) header files. Instead of direct struct-access,
applications should be using the various png_get_xxx() and png_set_xxx()
accessor functions, which have existed for almost as long as libpng
itself."
@
text
@d1 1
a1 1
$OpenBSD: patch-pngerror_c,v 1.5 2011/07/01 17:09:36 jasper Exp $
@


1.5
log
@Fix for CVE-2011-2501
libpng "png_format_buffer()" Denial of Service Vulnerability

from upstream git
@
text
@d1 1
a1 1
$OpenBSD$
d9 3
a11 3
--- pngerror.c.orig	Fri Jul  1 19:07:03 2011
+++ pngerror.c	Fri Jul  1 19:07:42 2011
@@@@ -181,8 +181,13 @@@@ png_format_buffer(png_structp png_ptr, png_charp buffe
d26 1
a26 1
 
@


1.5.2.1
log
@Fix for CVE-2011-2501
libpng "png_format_buffer()" Denial of Service Vulnerability

from upstream git
@
text
@d1 1
a1 1
$OpenBSD: patch-pngerror_c,v 1.5 2011/07/01 17:09:36 jasper Exp $
@


1.4
log
@upgrade to png 1.2.7
@
text
@d1 11
a11 4
$OpenBSD: patch-pngerror_c,v 1.3 2004/07/10 23:19:21 brad Exp $
--- pngerror.c.orig	Thu Oct  3 07:32:27 2002
+++ pngerror.c	Sat Jul 10 19:11:39 2004
@@@@ -137,7 +137,7 @@@@ png_format_buffer(png_structp png_ptr, p
d15 9
a23 3
-      png_memcpy(buffer+iout, error_message, 64);
+      png_strncpy(buffer+iout, error_message, 63);
       buffer[iout+63] = 0;
d26 1
@


1.3
log
@use upstream patch instead.
@
text
@d1 1
a1 1
$OpenBSD: patch-pngerror_c,v 1.2 2004/07/06 22:06:17 brad Exp $
@


1.2
log
@better diff from openpkg
@
text
@d1 1
a1 1
$OpenBSD: patch-pngerror_c,v 1.1 2004/05/03 05:13:04 robert Exp $
d3 2
a4 4
+++ pngerror.c	Tue Jul  6 17:36:30 2004
@@@@ -135,10 +135,13 @@@@ png_format_buffer(png_structp png_ptr, p
       buffer[iout] = 0;
    else
a5 3
+      png_size_t len;
+      if ((len = png_strlen(error_message)) > 63)                                                                                        
+          len = 63;
d9 2
a10 3
-      buffer[iout+63] = 0;
+      png_memcpy(buffer+iout, error_message, len);
+      buffer[iout+len] = 0;
a12 1
 
@


1.1
log
@Fix for CAN-2004-0421:
Steve Grubb reports a buffer read overrun in libpng's
png_format_buffer function. A specially constructed PNG image
processed by an application using libpng may trigger the buffer
read overrun and possibly result in an application crash.

ok brad@@
@
text
@d1 4
a4 4
$OpenBSD$
--- pngerror.c.orig	Sun May  2 22:47:58 2004
+++ pngerror.c	Sun May  2 22:49:36 2004
@@@@ -135,10 +135,14 @@@@
d8 3
a10 4
+      int len = strlen(error_message);
+
+      if (len > 64)
+	      len = 64;
d16 1
a16 1
+      buffer[iout+len-1] = 0;
@


1.1.4.1
log
@Log message:
Fix for CAN-2004-0421:
Steve Grubb reports a buffer read overrun in libpng's
png_format_buffer function. A specially constructed PNG image
processed by an application using libpng may trigger the buffer
read overrun and possibly result in an application crash.

bump PKGNAME; ok brad@@
@
text
@@


1.1.4.2
log
@MFC:
- fix buffer overflows with 16-bit and greyscale samples, CAN-2002-1363.
- use upstream patch for older CAN-2004-0421 issue.

http://www.openpkg.org/security/OpenPKG-SA-2003.001-png.html
http://www.openpkg.org/security/OpenPKG-SA-2004.030-png.html
@
text
@d1 6
a6 4
$OpenBSD: patch-pngerror_c,v 1.3 2004/07/10 23:19:21 brad Exp $
--- pngerror.c.orig	Thu Oct  3 07:32:27 2002
+++ pngerror.c	Sat Jul 10 19:11:39 2004
@@@@ -137,7 +137,7 @@@@ png_format_buffer(png_structp png_ptr, p
d8 4
d15 3
a17 2
+      png_strncpy(buffer+iout, error_message, 63);
       buffer[iout+63] = 0;
d20 1
@


1.1.2.1
log
@Fix for CAN-2004-0421:
Steve Grubb reports a buffer read overrun in libpng's
png_format_buffer function. A specially constructed PNG image
processed by an application using libpng may trigger the buffer
read overrun and possibly result in an application crash.

bump PKGNAME; ok brad@@
@
text
@@


1.1.2.2
log
@MFC:
- fix buffer overflows with 16-bit and greyscale samples, CAN-2002-1363.
- use upstream patch for older CAN-2004-0421 issue.

http://www.openpkg.org/security/OpenPKG-SA-2003.001-png.html
http://www.openpkg.org/security/OpenPKG-SA-2004.030-png.html
@
text
@d1 6
a6 4
$OpenBSD: patch-pngerror_c,v 1.3 2004/07/10 23:19:21 brad Exp $
--- pngerror.c.orig	Thu Oct  3 07:32:27 2002
+++ pngerror.c	Sat Jul 10 19:11:39 2004
@@@@ -137,7 +137,7 @@@@ png_format_buffer(png_structp png_ptr, p
d8 4
d15 3
a17 2
+      png_strncpy(buffer+iout, error_message, 63);
       buffer[iout+63] = 0;
d20 1
@


