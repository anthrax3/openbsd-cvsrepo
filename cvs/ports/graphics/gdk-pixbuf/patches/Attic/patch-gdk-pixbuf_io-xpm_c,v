head	1.4;
access;
symbols
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_5:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2010.04.30.17.06.56;	author jasper;	state dead;
branches;
next	1.3;

1.3
date	2009.01.09.16.13.22;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.21.20.20.54;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.19.23.41.32;	author brad;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1;
next	;

1.1.2.1
date	2004.09.29.23.52.07;	author brad;	state Exp;
branches;
next	;

1.1.4.1
date	2004.09.29.23.55.00;	author brad;	state Exp;
branches;
next	;

1.1.6.1
date	2005.11.24.18.38.41;	author sturm;	state Exp;
branches;
next	;

1.1.8.1
date	2005.11.24.18.38.59;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- remove old port from the gtk1/glib1 days

ok ajacoutot@@
maintained timed-out long-ago
@
text
@$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.3 2009/01/09 16:13:22 naddy Exp $
--- gdk-pixbuf/io-xpm.c.orig	Thu Mar  1 21:16:28 2001
+++ gdk-pixbuf/io-xpm.c	Fri Jan  9 17:12:25 2009
@@@@ -281,7 +281,8 @@@@ file_buffer (enum buf_op op, gpointer handle)
 		/* Fall through to the xpm_read_string. */
 
 	case op_body:
-		xpm_read_string (h->infile, &h->buffer, &h->buffer_size);
+		if (!xpm_read_string (h->infile, &h->buffer, &h->buffer_size))
+			return NULL;
 		return h->buffer;
 
 	default:
@@@@ -342,7 +343,8 @@@@ pixbuf_create_from_xpm (const gchar * (*get_buf) (enum
 	gchar pixel_str[32];
 	GHashTable *color_hash;
 	_XPMColor *colors, *color, *fallbackcolor;
-	guchar *pixels, *pixtmp;
+	guchar *pixtmp;
+	GdkPixbuf* pixbuf;
 
 	fallbackcolor = NULL;
 
@@@@ -352,17 +354,31 @@@@ pixbuf_create_from_xpm (const gchar * (*get_buf) (enum
 		return NULL;
 	}
 	sscanf (buffer, "%d %d %d %d", &w, &h, &n_col, &cpp);
-	if (cpp >= 32) {
+	if (cpp <= 0 || cpp >= 32) {
 		g_warning ("XPM has more than 31 chars per pixel.");
 		return NULL;
 	}
+	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1) ||
+	    n_col >= G_MAXINT / sizeof (_XPMColor)) {
+		g_warning ("XPM file has invalid number of colors.");
+		return NULL;
+	}
 
 	/* The hash is used for fast lookups of color from chars */
 	color_hash = g_hash_table_new (g_str_hash, g_str_equal);
 
 	name_buf = g_new (gchar, n_col * (cpp + 1));
-	colors = g_new (_XPMColor, n_col);
-
+	if (!name_buf) {
+		g_warning ("Cannot allocate memory for loading XPM image.");
+		g_hash_table_destroy (color_hash);
+		return NULL;
+	}
+	colors = (_XPMColor *) g_malloc (sizeof (_XPMColor) * n_col);
+	if (!colors) {
+		g_warning ("Cannot allocate memory for loading XPM image.");
+		g_hash_table_destroy (color_hash);
+		return NULL;
+	}
 	for (cnt = 0; cnt < n_col; cnt++) {
 		gchar *color_name;
 
@@@@ -397,12 +413,8 @@@@ pixbuf_create_from_xpm (const gchar * (*get_buf) (enum
 			fallbackcolor = color;
 	}
 
-	if (is_trans)
-		pixels = malloc (w * h * 4);
-	else
-		pixels = malloc (w * h * 3);
-
-	if (!pixels) {
+	pixbuf = gdk_pixbuf_new(GDK_COLORSPACE_RGB, is_trans, 8, w, h);
+	if (!pixbuf) {
 		g_hash_table_destroy (color_hash);
 		g_free (colors);
 		g_free (name_buf);
@@@@ -410,7 +422,7 @@@@ pixbuf_create_from_xpm (const gchar * (*get_buf) (enum
 	}
 
 	wbytes = w * cpp;
-	pixtmp = pixels;
+	pixtmp = pixbuf->pixels;
 
 	for (ycnt = 0; ycnt < h; ycnt++) {
 		buffer = (*get_buf) (op_body, handle);
@@@@ -443,9 +455,7 @@@@ pixbuf_create_from_xpm (const gchar * (*get_buf) (enum
 	g_free (colors);
 	g_free (name_buf);
 
-	return gdk_pixbuf_new_from_data (pixels, GDK_COLORSPACE_RGB, is_trans, 8,
-					 w, h, is_trans ? (w * 4) : (w * 3),
-					 free_buffer, NULL);
+	return pixbuf;
 }
 
 /* Shared library entry point for file loading */
@


1.3
log
@regen patches
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.2 2005/11/21 20:20:54 naddy Exp $
@


1.2
log
@SECURITY:
Fix
- double free() in BMP handler (CVE-2005-0891),
- endless loop (CVE-2005-2975) and
- integer overflows in XPM loader (CVE-2005-2976, CVE-2005-3186).

From Ubuntu.
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.1 2004/09/19 23:41:32 brad Exp $
d3 2
a4 2
+++ gdk-pixbuf/io-xpm.c	Sat Nov 19 20:30:14 2005
@@@@ -281,7 +281,8 @@@@ file_buffer (enum buf_op op, gpointer ha
d14 1
a14 1
@@@@ -342,7 +343,8 @@@@ pixbuf_create_from_xpm (const gchar * (*
d24 1
a24 1
@@@@ -352,17 +354,31 @@@@ pixbuf_create_from_xpm (const gchar * (*
d59 1
a59 1
@@@@ -397,12 +413,8 @@@@ pixbuf_create_from_xpm (const gchar * (*
d74 1
a74 1
@@@@ -410,7 +422,7 @@@@ pixbuf_create_from_xpm (const gchar * (*
d83 1
a83 1
@@@@ -443,9 +455,7 @@@@ pixbuf_create_from_xpm (const gchar * (*
@


1.1
log
@fixes a DoS issue with the BMP decoder, integer overflow and heap-based
buffer overflow with the XPM decoder, and integer overflow with the ICO
decoder.

CAN-2004-0753, CAN-2004-0782, CAN-2004-0788
@
text
@d1 24
a24 4
$OpenBSD$
--- gdk-pixbuf/io-xpm.c.orig	Sat Sep 18 22:04:13 2004
+++ gdk-pixbuf/io-xpm.c	Sat Sep 18 22:06:26 2004
@@@@ -352,17 +352,30 @@@@ pixbuf_create_from_xpm (const gchar * (*
d33 2
a34 1
+	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1)) {
d59 35
@


1.1.8.1
log
@MFC:
SECURITY:
Fix
- double free() in BMP handler (CVE-2005-0891),
- endless loop (CVE-2005-2975) and
- integer overflows in XPM loader (CVE-2005-2976, CVE-2005-3186).

From Ubuntu.
@
text
@d1 4
a4 24
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.2 2005/11/21 20:20:54 naddy Exp $
--- gdk-pixbuf/io-xpm.c.orig	Thu Mar  1 21:16:28 2001
+++ gdk-pixbuf/io-xpm.c	Sat Nov 19 20:30:14 2005
@@@@ -281,7 +281,8 @@@@ file_buffer (enum buf_op op, gpointer ha
 		/* Fall through to the xpm_read_string. */
 
 	case op_body:
-		xpm_read_string (h->infile, &h->buffer, &h->buffer_size);
+		if (!xpm_read_string (h->infile, &h->buffer, &h->buffer_size))
+			return NULL;
 		return h->buffer;
 
 	default:
@@@@ -342,7 +343,8 @@@@ pixbuf_create_from_xpm (const gchar * (*
 	gchar pixel_str[32];
 	GHashTable *color_hash;
 	_XPMColor *colors, *color, *fallbackcolor;
-	guchar *pixels, *pixtmp;
+	guchar *pixtmp;
+	GdkPixbuf* pixbuf;
 
 	fallbackcolor = NULL;
 
@@@@ -352,17 +354,31 @@@@ pixbuf_create_from_xpm (const gchar * (*
d13 1
a13 2
+	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1) ||
+	    n_col >= G_MAXINT / sizeof (_XPMColor)) {
a37 35
@@@@ -397,12 +413,8 @@@@ pixbuf_create_from_xpm (const gchar * (*
 			fallbackcolor = color;
 	}
 
-	if (is_trans)
-		pixels = malloc (w * h * 4);
-	else
-		pixels = malloc (w * h * 3);
-
-	if (!pixels) {
+	pixbuf = gdk_pixbuf_new(GDK_COLORSPACE_RGB, is_trans, 8, w, h);
+	if (!pixbuf) {
 		g_hash_table_destroy (color_hash);
 		g_free (colors);
 		g_free (name_buf);
@@@@ -410,7 +422,7 @@@@ pixbuf_create_from_xpm (const gchar * (*
 	}
 
 	wbytes = w * cpp;
-	pixtmp = pixels;
+	pixtmp = pixbuf->pixels;
 
 	for (ycnt = 0; ycnt < h; ycnt++) {
 		buffer = (*get_buf) (op_body, handle);
@@@@ -443,9 +455,7 @@@@ pixbuf_create_from_xpm (const gchar * (*
 	g_free (colors);
 	g_free (name_buf);
 
-	return gdk_pixbuf_new_from_data (pixels, GDK_COLORSPACE_RGB, is_trans, 8,
-					 w, h, is_trans ? (w * 4) : (w * 3),
-					 free_buffer, NULL);
+	return pixbuf;
 }
 
 /* Shared library entry point for file loading */
@


1.1.6.1
log
@MFC:
SECURITY:
Fix
- double free() in BMP handler (CVE-2005-0891),
- endless loop (CVE-2005-2975) and
- integer overflows in XPM loader (CVE-2005-2976, CVE-2005-3186).

From Ubuntu.
@
text
@d1 4
a4 24
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.2 2005/11/21 20:20:54 naddy Exp $
--- gdk-pixbuf/io-xpm.c.orig	Thu Mar  1 21:16:28 2001
+++ gdk-pixbuf/io-xpm.c	Sat Nov 19 20:30:14 2005
@@@@ -281,7 +281,8 @@@@ file_buffer (enum buf_op op, gpointer ha
 		/* Fall through to the xpm_read_string. */
 
 	case op_body:
-		xpm_read_string (h->infile, &h->buffer, &h->buffer_size);
+		if (!xpm_read_string (h->infile, &h->buffer, &h->buffer_size))
+			return NULL;
 		return h->buffer;
 
 	default:
@@@@ -342,7 +343,8 @@@@ pixbuf_create_from_xpm (const gchar * (*
 	gchar pixel_str[32];
 	GHashTable *color_hash;
 	_XPMColor *colors, *color, *fallbackcolor;
-	guchar *pixels, *pixtmp;
+	guchar *pixtmp;
+	GdkPixbuf* pixbuf;
 
 	fallbackcolor = NULL;
 
@@@@ -352,17 +354,31 @@@@ pixbuf_create_from_xpm (const gchar * (*
d13 1
a13 2
+	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1) ||
+	    n_col >= G_MAXINT / sizeof (_XPMColor)) {
a37 35
@@@@ -397,12 +413,8 @@@@ pixbuf_create_from_xpm (const gchar * (*
 			fallbackcolor = color;
 	}
 
-	if (is_trans)
-		pixels = malloc (w * h * 4);
-	else
-		pixels = malloc (w * h * 3);
-
-	if (!pixels) {
+	pixbuf = gdk_pixbuf_new(GDK_COLORSPACE_RGB, is_trans, 8, w, h);
+	if (!pixbuf) {
 		g_hash_table_destroy (color_hash);
 		g_free (colors);
 		g_free (name_buf);
@@@@ -410,7 +422,7 @@@@ pixbuf_create_from_xpm (const gchar * (*
 	}
 
 	wbytes = w * cpp;
-	pixtmp = pixels;
+	pixtmp = pixbuf->pixels;
 
 	for (ycnt = 0; ycnt < h; ycnt++) {
 		buffer = (*get_buf) (op_body, handle);
@@@@ -443,9 +455,7 @@@@ pixbuf_create_from_xpm (const gchar * (*
 	g_free (colors);
 	g_free (name_buf);
 
-	return gdk_pixbuf_new_from_data (pixels, GDK_COLORSPACE_RGB, is_trans, 8,
-					 w, h, is_trans ? (w * 4) : (w * 3),
-					 free_buffer, NULL);
+	return pixbuf;
 }
 
 /* Shared library entry point for file loading */
@


1.1.4.1
log
@fixes a DoS issue with the BMP decoder, integer overflow and heap-based
buffer overflow with the XPM decoder, and integer overflow with the ICO
decoder.

CAN-2004-0753, CAN-2004-0782, CAN-2004-0788
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.1 2004/09/19 23:41:32 brad Exp $
@


1.1.2.1
log
@fixes a DoS issue with the BMP decoder, integer overflow and heap-based
buffer overflow with the XPM decoder, and integer overflow with the ICO
decoder.

CAN-2004-0753, CAN-2004-0782, CAN-2004-0788
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.1 2004/09/19 23:41:32 brad Exp $
@

