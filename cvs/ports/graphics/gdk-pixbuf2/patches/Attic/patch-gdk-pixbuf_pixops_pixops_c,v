head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2015.09.01.15.58.26;	author ajacoutot;	state dead;
branches;
next	1.1;
commitid	vOVXEnHLw2bAmPvw;

1.1
date	2015.07.22.19.44.28;	author ajacoutot;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;
commitid	Xvo80UkzjdRGwBVN;

1.1.2.1
date	2015.07.23.05.25.58;	author ajacoutot;	state Exp;
branches;
next	1.1.2.2;
commitid	gtIBFU6KPrfLNAQR;

1.1.2.2
date	2015.09.01.16.04.32;	author ajacoutot;	state Exp;
branches;
next	;
commitid	wFXHcscKmbhcd6Iq;

1.1.6.1
date	2015.09.01.15.59.01;	author ajacoutot;	state Exp;
branches;
next	1.1.6.2;
commitid	ecHA7poerN6xTB2X;

1.1.6.2
date	2015.10.28.08.46.23;	author jasper;	state Exp;
branches;
next	;
commitid	n72DSXcfcJJYqmTk;


desc
@@


1.2
log
@SECURITY update to gdk-pixbuf-2.31.7.
This is supposed to be a development release but it fixes a *lot* of integer
overflows, a possible divide-by-zero bug and CVE-2015-4491 -- so we'll make an
exception. FreeBSD and most Linux distributions went for this version as well.
@
text
@$OpenBSD: patch-gdk-pixbuf_pixops_pixops_c,v 1.1 2015/07/22 19:44:28 ajacoutot Exp $

From ffec86ed5010c5a2be14f47b33bcf4ed3169a199 Mon Sep 17 00:00:00 2001
From: Matthias Clasen <mclasen@@redhat.com>
Date: Mon, 13 Jul 2015 00:33:40 -0400
Subject: pixops: Be more careful about integer overflow

--- gdk-pixbuf/pixops/pixops.c.orig	Thu Mar  6 05:36:45 2014
+++ gdk-pixbuf/pixops/pixops.c	Wed Jul 22 21:42:18 2015
@@@@ -1192,8 +1192,17 @@@@ make_filter_table (PixopsFilter *filter)
   int i_offset, j_offset;
   int n_x = filter->x.n;
   int n_y = filter->y.n;
-  int *weights = g_new (int, SUBSAMPLE * SUBSAMPLE * n_x * n_y);
+  gsize n_weights;
+  int *weights;
 
+  n_weights = SUBSAMPLE * SUBSAMPLE * n_x * n_y;
+  if (n_weights / (SUBSAMPLE * SUBSAMPLE * n_x) != n_y)
+    return NULL; /* overflow, bail */
+
+  weights = g_try_new (int, n_weights);
+  if (!weights)
+    return NULL; /* overflow, bail */
+
   for (i_offset=0; i_offset < SUBSAMPLE; i_offset++)
     for (j_offset=0; j_offset < SUBSAMPLE; j_offset++)
       {
@@@@ -1267,9 +1276,12 @@@@ pixops_process (guchar         *dest_buf,
   if (x_step == 0 || y_step == 0)
     return; /* overflow, bail out */
 
-  line_bufs = g_new (guchar *, filter->y.n);
   filter_weights = make_filter_table (filter);
+  if (!filter_weights)
+    return; /* overflow, bail out */
 
+  line_bufs = g_new (guchar *, filter->y.n);
+
   check_shift = check_size ? get_check_shift (check_size) : 0;
 
   scaled_x_offset = floor (filter->x.offset * (1 << SCALE_SHIFT));
@@@@ -1388,7 +1400,7 @@@@ tile_make_weights (PixopsFilterDimension *dim,
 		   double                 scale)
 {
   int n = ceil (1 / scale + 1);
-  double *pixel_weights = g_new (double, SUBSAMPLE * n);
+  double *pixel_weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);
   int offset;
   int i;
 
@@@@ -1446,7 +1458,7 @@@@ bilinear_magnify_make_weights (PixopsFilterDimension *
     }
 
   dim->n = n;
-  dim->weights = g_new (double, SUBSAMPLE * n);
+  dim->weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);
 
   pixel_weights = dim->weights;
 
@@@@ -1537,7 +1549,7 @@@@ bilinear_box_make_weights (PixopsFilterDimension *dim,
 			   double                 scale)
 {
   int n = ceil (1/scale + 3.0);
-  double *pixel_weights = g_new (double, SUBSAMPLE * n);
+  double *pixel_weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);
   double w;
   int offset, i;
 
@


1.1
log
@SECURITY: fix a heap overflow and a DoS triggered by the scaling of a
malformed bmp.

https://bugzilla.gnome.org/show_bug.cgi?id=752297
https://git.gnome.org/browse/gdk-pixbuf/commit/?id=ffec86ed5010c5a2be14f47b33bcf4ed3169a199
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.6.1
log
@CVE-2015-4491 (interger overflow).
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_pixops_pixops_c,v 1.1 2015/07/22 19:44:28 ajacoutot Exp $
a7 5
From 8dba67cb4f38d62a47757741ad41e3f245b4a32a Mon Sep 17 00:00:00 2001
From: Benjamin Otte <otte@@redhat.com>
Date: Mon, 17 Aug 2015 18:52:47 +0200
Subject: pixops: Fix oversight for CVE-2015-4491

d9 2
a10 2
+++ gdk-pixbuf/pixops/pixops.c	Tue Sep  1 17:54:48 2015
@@@@ -1192,8 +1192,21 @@@@ make_filter_table (PixopsFilter *filter)
d18 1
a18 5
+  n_weights = SUBSAMPLE * SUBSAMPLE * n_x;
+  if (n_weights / (SUBSAMPLE * SUBSAMPLE) != n_x)
+    return NULL; /* overflow, bail */
+
+  n_weights *= n_y;
d29 1
a29 1
@@@@ -1267,9 +1280,12 @@@@ pixops_process (guchar         *dest_buf,
d43 1
a43 1
@@@@ -1388,7 +1404,7 @@@@ tile_make_weights (PixopsFilterDimension *dim,
d52 1
a52 1
@@@@ -1446,7 +1462,7 @@@@ bilinear_magnify_make_weights (PixopsFilterDimension *
d61 1
a61 1
@@@@ -1537,7 +1553,7 @@@@ bilinear_box_make_weights (PixopsFilterDimension *dim,
@


1.1.6.2
log
@Security fixes for CVE-2015-7673 and CVE-2015-7674

ok aja@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_pixops_pixops_c,v 1.1.6.1 2015/09/01 15:59:01 ajacoutot Exp $
a12 10
From 19f9685dbff7d1f929c61cf99188df917a18811d Mon Sep 17 00:00:00 2001
From: Benjamin Otte <otte@@redhat.com>
Date: Sat, 19 Sep 2015 21:24:34 +0200
Subject: pixops: Fail make_weights functions on OOM

From e9a5704edaa9aee9498f1fbf6e1b70fcce2e55aa Mon Sep 17 00:00:00 2001
From: Benjamin Otte <otte@@redhat.com>
Date: Tue, 22 Sep 2015 22:44:51 +0200
Subject: pixops: Don't overflow variables when shifting them

d14 1
a14 18
+++ gdk-pixbuf/pixops/pixops.c	Tue Oct 27 14:49:17 2015
@@@@ -264,11 +264,11 @@@@ pixops_scale_nearest (guchar        *dest_buf,
 		      double         scale_x,
 		      double         scale_y)
 {
-  int i;
-  int x;
-  int x_step = (1 << SCALE_SHIFT) / scale_x;
-  int y_step = (1 << SCALE_SHIFT) / scale_y;
-  int xmax, xstart, xstop, x_pos, y_pos;
+  gint64 i;
+  gint64 x;
+  gint64 x_step = (1 << SCALE_SHIFT) / scale_x;
+  gint64 y_step = (1 << SCALE_SHIFT) / scale_y;
+  gint64 xmax, xstart, xstop, x_pos, y_pos;
   const guchar *p;
 
 #define INNER_LOOP(SRC_CHANNELS,DEST_CHANNELS,ASSIGN_PIXEL)     \
d52 1
a52 7
@@@@ -1383,15 +1399,19 @@@@ pixops_process (guchar         *dest_buf,
 /* Compute weights for reconstruction by replication followed by
  * sampling with a box filter
  */
-static void
+static gboolean
 tile_make_weights (PixopsFilterDimension *dim,
d57 1
a57 1
+  double *pixel_weights;
d61 1
a61 25
+  pixel_weights = g_try_malloc_n (sizeof (double) * SUBSAMPLE, n);
+  if (pixel_weights == NULL)
+    return FALSE;
+
   dim->n = n;
   dim->offset = 0;
   dim->weights = pixel_weights;
@@@@ -1419,13 +1439,15 @@@@ tile_make_weights (PixopsFilterDimension *dim,
             }
        }
     }
+
+  return TRUE;
 }
 
 /* Compute weights for a filter that, for minification
  * is the same as 'tiles', and for magnification, is bilinear
  * reconstruction followed by a sampling with a delta function.
  */
-static void
+static gboolean
 bilinear_magnify_make_weights (PixopsFilterDimension *dim,
 			       double                 scale)
 {
@@@@ -1446,7 +1468,9 @@@@ bilinear_magnify_make_weights (PixopsFilterDimension *
d66 1
a66 3
+  dim->weights = g_try_malloc_n (sizeof (double) * SUBSAMPLE, n);
+  if (dim->weights == NULL)
+    return FALSE;
d70 1
a70 16
@@@@ -1486,6 +1510,8 @@@@ bilinear_magnify_make_weights (PixopsFilterDimension *
             }
         }
     }
+
+  return TRUE;
 }
 
 /* Computes the integral from b0 to b1 of
@@@@ -1532,15 +1558,19 @@@@ linear_box_half (double b0, double b1)
 /* Compute weights for reconstructing with bilinear
  * interpolation, then sampling with a box filter
  */
-static void
+static gboolean
 bilinear_box_make_weights (PixopsFilterDimension *dim,
d75 1
a75 1
+  double *pixel_weights;
a78 100
+  pixel_weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);
+  if (pixel_weights == NULL)
+    return FALSE;
+
   dim->offset = -1.0;
   dim->n = n;
   dim->weights = pixel_weights;
@@@@ -1558,9 +1588,11 @@@@ bilinear_box_make_weights (PixopsFilterDimension *dim,
           *(pixel_weights++) = w * scale;
         }
     }
+
+  return TRUE;
 }
 
-static void
+static gboolean
 make_weights (PixopsFilter     *filter,
 	      PixopsInterpType  interp_type,	      
 	      double            scale_x,
@@@@ -1569,23 +1601,39 @@@@ make_weights (PixopsFilter     *filter,
   switch (interp_type)
     {
     case PIXOPS_INTERP_NEAREST:
+    default:
       g_assert_not_reached ();
-      break;
+      return FALSE;
 
     case PIXOPS_INTERP_TILES:
-      tile_make_weights (&filter->x, scale_x);
-      tile_make_weights (&filter->y, scale_y);
-      break;
+      if (!tile_make_weights (&filter->x, scale_x))
+        return FALSE;
+      if (!tile_make_weights (&filter->y, scale_y))
+        {
+          g_free (filter->x.weights);
+          return FALSE;
+        }
+      return TRUE;
       
     case PIXOPS_INTERP_BILINEAR:
-      bilinear_magnify_make_weights (&filter->x, scale_x);
-      bilinear_magnify_make_weights (&filter->y, scale_y);
-      break;
+      if (!bilinear_magnify_make_weights (&filter->x, scale_x))
+        return FALSE;
+      if (!bilinear_magnify_make_weights (&filter->y, scale_y))
+        {
+          g_free (filter->x.weights);
+          return FALSE;
+        }
+      return TRUE;
       
     case PIXOPS_INTERP_HYPER:
-      bilinear_box_make_weights (&filter->x, scale_x);
-      bilinear_box_make_weights (&filter->y, scale_y);
-      break;
+      if (!bilinear_box_make_weights (&filter->x, scale_x))
+        return FALSE;
+      if (!bilinear_box_make_weights (&filter->y, scale_y))
+        {
+          g_free (filter->x.weights);
+          return FALSE;
+        }
+      return TRUE;
     }
 }
 
@@@@ -1640,7 +1688,8 @@@@ _pixops_composite_color_real (guchar          *dest_bu
     }
   
   filter.overall_alpha = overall_alpha / 255.;
-  make_weights (&filter, interp_type, scale_x, scale_y);
+  if (!make_weights (&filter, interp_type, scale_x, scale_y))
+    return;
 
 #ifdef USE_MMX
   if (filter.x.n == 2 && filter.y.n == 2 &&
@@@@ -1790,7 +1839,8 @@@@ _pixops_composite_real (guchar          *dest_buf,
     }
   
   filter.overall_alpha = overall_alpha / 255.;
-  make_weights (&filter, interp_type, scale_x, scale_y);
+  if (!make_weights (&filter, interp_type, scale_x, scale_y))
+    return;
 
   if (filter.x.n == 2 && filter.y.n == 2 && dest_channels == 4 &&
       src_channels == 4 && src_has_alpha && !dest_has_alpha)
@@@@ -2197,7 +2247,8 @@@@ _pixops_scale_real (guchar        *dest_buf,
     }
   
   filter.overall_alpha = 1.0;
-  make_weights (&filter, interp_type, scale_x, scale_y);
+  if (!make_weights (&filter, interp_type, scale_x, scale_y))
+    return;
 
   if (filter.x.n == 2 && filter.y.n == 2 && dest_channels == 3 && src_channels == 3)
     {
@


1.1.2.1
log
@Fix a heap overflow and DoS.
https://bugzilla.gnome.org/show_bug.cgi?id=752297
@
text
@d3 4
a6 2
Fix a heap overflow and DoS.
https://bugzilla.gnome.org/show_bug.cgi?id=752297
d9 1
a9 1
+++ gdk-pixbuf/pixops/pixops.c	Thu Jul 23 07:22:28 2015
@


1.1.2.2
log
@CVE-2015-4491 (integer overflow).
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_pixops_pixops_c,v 1.1.2.1 2015/07/23 05:25:58 ajacoutot Exp $
d3 2
a4 9
From ffec86ed5010c5a2be14f47b33bcf4ed3169a199 Mon Sep 17 00:00:00 2001
From: Matthias Clasen <mclasen@@redhat.com>
Date: Mon, 13 Jul 2015 00:33:40 -0400
Subject: pixops: Be more careful about integer overflow

From 8dba67cb4f38d62a47757741ad41e3f245b4a32a Mon Sep 17 00:00:00 2001
From: Benjamin Otte <otte@@redhat.com>
Date: Mon, 17 Aug 2015 18:52:47 +0200
Subject: pixops: Fix oversight for CVE-2015-4491
d7 2
a8 2
+++ gdk-pixbuf/pixops/pixops.c	Tue Sep  1 18:01:54 2015
@@@@ -1192,8 +1192,21 @@@@ make_filter_table (PixopsFilter *filter)
d16 1
a16 5
+  n_weights = SUBSAMPLE * SUBSAMPLE * n_x;
+  if (n_weights / (SUBSAMPLE * SUBSAMPLE) != n_x)
+    return NULL; /* overflow, bail */
+
+  n_weights *= n_y;
d27 1
a27 1
@@@@ -1267,9 +1280,12 @@@@ pixops_process (guchar         *dest_buf,
d41 1
a41 1
@@@@ -1388,7 +1404,7 @@@@ tile_make_weights (PixopsFilterDimension *dim,
d50 1
a50 1
@@@@ -1446,7 +1462,7 @@@@ bilinear_magnify_make_weights (PixopsFilterDimension *
d59 1
a59 1
@@@@ -1537,7 +1553,7 @@@@ bilinear_box_make_weights (PixopsFilterDimension *dim,
@


