head	1.10;
access;
symbols
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2015.03.24.18.45.12;	author landry;	state dead;
branches;
next	1.9;
commitid	ZZBbL5YaVjtff4Ad;

1.9
date	2014.12.13.18.58.38;	author kili;	state Exp;
branches;
next	1.8;
commitid	YPltmhZ0X914VUC3;

1.8
date	2014.06.13.20.52.52;	author kili;	state Exp;
branches;
next	1.7;
commitid	y94qvmW3Cnssp51q;

1.7
date	2014.05.01.20.43.10;	author kili;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.28.16.48.54;	author kili;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.22.00.15.00;	author edd;	state dead;
branches;
next	1.4;

1.4
date	2012.07.13.15.10.47;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.05.08.57.47;	author armani;	state dead;
branches;
next	1.2;

1.2
date	2009.12.04.20.12.35;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.03.19.40.38;	author kili;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to inkscape 0.91.

See https://inkscape.org/en/news/2015/01/30/inkscape-version-091-is-released/
and http://wiki.inkscape.org/wiki/index.php/Release_notes/0.91 for details

ok jung@@ abieber@@
@
text
@$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.9 2014/12/13 18:58:38 kili Exp $

This patch is dedicated to Joe Zawinul for his famous tune "mercy
mercy mercy".

--- src/extension/internal/pdfinput/pdf-parser.cpp.orig	Mon Jun  9 15:24:41 2014
+++ src/extension/internal/pdfinput/pdf-parser.cpp	Thu Dec 11 22:23:37 2014
@@@@ -860,7 +860,9 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
 	  blendingColorSpace = NULL;
 	  isolated = knockout = gFalse;
 	  if (!obj4.dictLookup(const_cast<char*>("CS"), &obj5)->isNull()) {
-#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+#if defined(POPPLER_REALLY_NEWEST_COLOR_SPACE_API)
+	    blendingColorSpace = GfxColorSpace::parse(NULL, &obj5, NULL, NULL);
+#elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL, NULL);
 #elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
@@@@ -1085,8 +1087,14 @@@@ void PdfParser::opSetFillColorSpace(Object args[], int
 
   state->setFillPattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+#if defined(POPPLER_REALLY_NEWEST_COLOR_SPACE_API)
   if (obj.isNull()) {
+    colorSpace = GfxColorSpace::parse(NULL, &args[0], NULL, NULL);
+  } else {
+    colorSpace = GfxColorSpace::parse(NULL, &obj, NULL, NULL);
+  }
+#elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+  if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL, NULL);
   } else {
     colorSpace = GfxColorSpace::parse(&obj, NULL, NULL);
@@@@ -1126,8 +1134,14 @@@@ void PdfParser::opSetStrokeColorSpace(Object args[], i
 
   state->setStrokePattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+#if defined(POPPLER_REALLY_NEWEST_COLOR_SPACE_API)
   if (obj.isNull()) {
+    colorSpace = GfxColorSpace::parse(NULL, &args[0], NULL, NULL);
+  } else {
+    colorSpace = GfxColorSpace::parse(NULL, &obj, NULL, NULL);
+  }
+#elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+  if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL, NULL);
   } else {
     colorSpace = GfxColorSpace::parse(&obj, NULL, NULL);
@@@@ -2756,7 +2770,9 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
       }
     }
     if (!obj1.isNull()) {
-#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+#if defined(POPPLER_REALLY_NEWEST_COLOR_SPACE_API)
+            colorSpace = GfxColorSpace::parse(NULL, &obj1, NULL, NULL);
+#elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
             colorSpace = GfxColorSpace::parse(&obj1, NULL, NULL);
 #elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
       colorSpace = GfxColorSpace::parse(&obj1, NULL);
@@@@ -2847,7 +2863,9 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
 	  obj2.free();
 	}
       }
-#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+#if defined(POPPLER_REALLY_NEWEST_COLOR_SPACE_API)
+            GfxColorSpace *maskColorSpace = GfxColorSpace::parse(NULL, &obj1, NULL, NULL);
+#elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
             GfxColorSpace *maskColorSpace = GfxColorSpace::parse(&obj1, NULL, NULL);
 #elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
       maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
@@@@ -3040,7 +3058,9 @@@@ void PdfParser::doForm(Object *str) {
     if (obj1.dictLookup(const_cast<char*>("S"), &obj2)->isName(const_cast<char*>("Transparency"))) {
       transpGroup = gTrue;
       if (!obj1.dictLookup(const_cast<char*>("CS"), &obj3)->isNull()) {
-#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+#if defined(POPPLER_REALLY_NEWEST_COLOR_SPACE_API)
+	blendingColorSpace = GfxColorSpace::parse(NULL, &obj3, NULL, NULL);
+#elif defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL, NULL);
 #elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
@


1.9
log
@Update to inkscape-0.48.5, and patch to let it work with poppler-0.29.

Tested by Fred (openbsd at crowsons.com), thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.8 2014/06/13 20:52:52 kili Exp $
@


1.8
log
@Sync with more useful diff committed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.7 2014/05/01 20:43:10 kili Exp $
d3 2
a4 2
Reported to upstream and committed on trunk and the 0.48 branch:
https://bugs.launchpad.net/inkscape/+bug/1315142
d6 2
a7 2
--- src/extension/internal/pdfinput/pdf-parser.cpp.orig	Thu Dec 13 18:00:46 2012
+++ src/extension/internal/pdfinput/pdf-parser.cpp	Fri May 30 21:43:38 2014
d12 6
a17 4
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL, NULL);
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
d19 1
a19 3
 #else
 	    blendingColorSpace = GfxColorSpace::parse(&obj5);
@@@@ -1083,8 +1085,14 @@@@ void PdfParser::opSetFillColorSpace(Object args[], int
d23 2
a24 2
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
d26 1
a26 1
+    colorSpace = GfxColorSpace::parse(&args[0], NULL, NULL);
d28 1
a28 1
+    colorSpace = GfxColorSpace::parse(&obj, NULL, NULL);
d30 1
a30 1
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
d32 1
a32 1
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
d34 2
a35 2
     colorSpace = GfxColorSpace::parse(&obj, NULL);
@@@@ -1118,8 +1126,14 @@@@ void PdfParser::opSetStrokeColorSpace(Object args[], i
d39 2
a40 2
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
d42 1
a42 1
+    colorSpace = GfxColorSpace::parse(&args[0], NULL, NULL);
d44 1
a44 1
+    colorSpace = GfxColorSpace::parse(&obj, NULL, NULL);
d46 1
a46 1
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
d48 1
a48 1
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
d50 2
a51 47
     colorSpace = GfxColorSpace::parse(&obj, NULL);
@@@@ -1211,8 +1225,14 @@@@ void PdfParser::opSetFillColorN(Object args[], int num
       state->setFillColor(&color);
       builder->updateStyle(state);
     }
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
     if (args[numArgs-1].isName() &&
+	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL, NULL))) {
+      state->setFillPattern(pattern);
+      builder->updateStyle(state);
+    }
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+    if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setFillPattern(pattern);
       builder->updateStyle(state);
@@@@ -1271,8 +1291,14 @@@@ void PdfParser::opSetStrokeColorN(Object args[], int n
       state->setStrokeColor(&color);
       builder->updateStyle(state);
     }
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
     if (args[numArgs-1].isName() &&
+	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL, NULL))) {
+      state->setStrokePattern(pattern);
+      builder->updateStyle(state);
+    }
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+    if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setStrokePattern(pattern);
       builder->updateStyle(state);
@@@@ -1710,7 +1736,11 @@@@ void PdfParser::opShFill(Object args[], int numArgs) {
   double *matrix = NULL;
   GBool savedState = gFalse;
 
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+  if (!(shading = res->lookupShading(args[0].getName(), NULL, NULL))) {
+    return;
+  }
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
   if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
     return;
   }
@@@@ -2726,7 +2756,9 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
d55 6
a60 4
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+      colorSpace = GfxColorSpace::parse(&obj1, NULL, NULL);
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
d62 1
a62 3
 #else
       colorSpace = GfxColorSpace::parse(&obj1);
@@@@ -2815,7 +2847,9 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
d66 6
a71 4
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+      maskColorSpace = GfxColorSpace::parse(&obj1, NULL, NULL);
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
d73 1
a73 3
 #else
       maskColorSpace = GfxColorSpace::parse(&obj1);
@@@@ -3006,7 +3040,9 @@@@ void PdfParser::doForm(Object *str) {
d77 6
a82 4
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+#if defined(POPPLER_EVEN_NEWER_COLOR_SPACE_API)
+	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL, NULL);
+#elif defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
a83 2
 #else
 	blendingColorSpace = GfxColorSpace::parse(&obj3);
@


1.7
log
@Problem reported to upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.7 2014/05/01 20:39:53 cvs Exp $
d3 2
a4 1
Reported to upstream: https://bugs.launchpad.net/inkscape/+bug/1315142
d7 3
a9 2
+++ src/extension/internal/pdfinput/pdf-parser.cpp	Sun Apr 27 18:26:18 2014
@@@@ -861,7 +861,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
d12 2
a13 2
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
-	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
d15 2
d19 3
a21 2
 #endif
@@@@ -1085,9 +1085,9 @@@@ void PdfParser::opSetFillColorSpace(Object args[], int
d23 2
a24 1
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
a25 1
-    colorSpace = GfxColorSpace::parse(&args[0], NULL);
d27 6
d34 4
a37 6
-    colorSpace = GfxColorSpace::parse(&obj, NULL);
+    colorSpace = GfxColorSpace::parse(&obj, NULL, NULL);
   }
 #else
   if (obj.isNull()) {
@@@@ -1120,9 +1120,9 @@@@ void PdfParser::opSetStrokeColorSpace(Object args[], i
d39 2
a40 1
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
a41 1
-    colorSpace = GfxColorSpace::parse(&args[0], NULL);
d43 6
d50 4
a53 6
-    colorSpace = GfxColorSpace::parse(&obj, NULL);
+    colorSpace = GfxColorSpace::parse(&obj, NULL, NULL);
   }
 #else
   if (obj.isNull()) {
@@@@ -1213,7 +1213,7 @@@@ void PdfParser::opSetFillColorN(Object args[], int num
d55 2
a56 1
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
a57 1
-	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
d59 6
d67 3
d71 2
a72 3
@@@@ -1273,7 +1273,7 @@@@ void PdfParser::opSetStrokeColorN(Object args[], int n
     }
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
a73 1
-	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
d75 6
d83 2
a84 2
     }
@@@@ -1711,7 +1711,7 @@@@ void PdfParser::opShFill(Object args[], int numArgs) {
d87 2
a88 2
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
-  if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
d90 4
d96 2
a97 2
 #else
@@@@ -2727,7 +2727,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
d100 2
a101 2
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
-      colorSpace = GfxColorSpace::parse(&obj1, NULL);
d103 2
d107 2
a108 2
 #endif
@@@@ -2816,7 +2816,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
d111 2
a112 2
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
-      maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
d114 2
d118 2
a119 2
 #endif
@@@@ -3007,7 +3007,7 @@@@ void PdfParser::doForm(Object *str) {
d122 2
a123 2
 #if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
-	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
d125 2
a128 1
 #endif
@


1.6
log
@Unbreak after poppler update.
@
text
@d1 4
a4 1
$OpenBSD$
@


1.5
log
@Update to inkscape-0.48.4.

OK zhuk@@
@
text
@d1 4
a4 119
$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.4 2012/07/13 15:10:47 kili Exp $

Fix build with poppler-0.20. From arch linux.

--- src/extension/internal/pdfinput/pdf-parser.cpp.orig	Fri Jul  8 20:25:09 2011
+++ src/extension/internal/pdfinput/pdf-parser.cpp	Thu Jul 12 18:55:07 2012
@@@@ -367,14 +367,14 @@@@ void PdfParser::parse(Object *obj, GBool topLevel) {
     for (i = 0; i < obj->arrayGetLength(); ++i) {
       obj->arrayGet(i, &obj2);
       if (!obj2.isStream()) {
-	error(-1, const_cast<char*>("Weird page contents"));
+	error(errInternal, -1, const_cast<char*>("Weird page contents"));
 	obj2.free();
 	return;
       }
       obj2.free();
     }
   } else if (!obj->isStream()) {
-    error(-1, const_cast<char*>("Weird page contents"));
+    error(errInternal, -1, const_cast<char*>("Weird page contents"));
     return;
   }
   parser = new Parser(xref, new Lexer(xref, obj), gFalse);
@@@@ -419,7 +419,7 @@@@ void PdfParser::go(GBool topLevel) {
 
     // too many arguments - something is wrong
     } else {
-      error(getPos(), const_cast<char*>("Too many args in content stream"));
+      error(errInternal, getPos(), const_cast<char*>("Too many args in content stream"));
       if (printCommands) {
 	printf("throwing away arg: ");
 	obj.print(stdout);
@@@@ -436,7 +436,7 @@@@ void PdfParser::go(GBool topLevel) {
 
   // args at end with no command
   if (numArgs > 0) {
-    error(getPos(), const_cast<char*>("Leftover args in content stream"));
+    error(errInternal, getPos(), const_cast<char*>("Leftover args in content stream"));
     if (printCommands) {
       printf("%d leftovers:", numArgs);
       for (i = 0; i < numArgs; ++i) {
@@@@ -502,7 +502,7 @@@@ void PdfParser::execOp(Object *cmd, Object args[], int
   name = cmd->getCmd();
   if (!(op = findOp(name))) {
     if (ignoreUndef == 0)
-      error(getPos(), const_cast<char*>("Unknown operator '%s'"), name);
+      error(errInternal, getPos(), const_cast<char*>("Unknown operator '%s'"), name);
     return;
   }
 
@@@@ -510,26 +510,26 @@@@ void PdfParser::execOp(Object *cmd, Object args[], int
   argPtr = args;
   if (op->numArgs >= 0) {
     if (numArgs < op->numArgs) {
-      error(getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
+      error(errInternal, getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
       return;
     }
     if (numArgs > op->numArgs) {
 #if 0
-      error(getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
+      error(errInternal, getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
 #endif
       argPtr += numArgs - op->numArgs;
       numArgs = op->numArgs;
     }
   } else {
     if (numArgs > -op->numArgs) {
-      error(getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
+      error(errInternal, getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
 	    numArgs, name);
       return;
     }
   }
   for (i = 0; i < numArgs; ++i) {
     if (!checkArg(&argPtr[i], op->tchk[i])) {
-      error(getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
+      error(errInternal, getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
 	    i, name, argPtr[i].getTypeName());
       return;
     }
@@@@ -690,7 +690,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
     return;
   }
   if (!obj1.isDict()) {
-    error(getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
+    error(errInternal, getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
     obj1.free();
     return;
   }
@@@@ -705,7 +705,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
     if (state->parseBlendMode(&obj2, &mode)) {
       state->setBlendMode(mode);
     } else {
-      error(getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
+      error(errInternal, getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
     }
   }
   obj2.free();
@@@@ -764,7 +764,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
       state->setTransfer(funcs);
     }
   } else if (!obj2.isNull()) {
-    error(getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
+    error(errInternal, getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
   }
   obj2.free();
 
@@@@ -784,7 +784,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
 	funcs[0] = Function::parse(&obj3);
 	if (funcs[0]->getInputSize() != 1 ||
 	    funcs[0]->getOutputSize() != 1) {
-	  error(getPos(),
+	  error(errInternal, getPos(),
 		const_cast<char*>("Invalid transfer function in soft mask in ExtGState"));
 	  delete funcs[0];
 	  funcs[0] = NULL;
@@@@ -809,11 +809,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
 	  blendingColorSpace = NULL;
d7 7
a13 48
-#ifdef POPPLER_NEW_COLOR_SPACE_API
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
-#else
-	    blendingColorSpace = GfxColorSpace::parse(&obj5);
-#endif
 	  }
 	  obj5.free();
 	  if (obj4.dictLookup(const_cast<char*>("I"), &obj5)->isBool()) {
@@@@ -840,15 +836,15 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
 	    delete funcs[0];
 	  }
 	} else {
-	  error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+	  error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
 	}
 	obj4.free();
       } else {
-	error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+	error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
       }
       obj3.free();
     } else if (!obj2.isNull()) {
-      error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));
+      error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));
     }
   }
   obj2.free();
@@@@ -876,7 +872,7 @@@@ void PdfParser::doSoftMask(Object *str, GBool alpha,
   // check form type
   dict->lookup(const_cast<char*>("FormType"), &obj1);
   if (!(obj1.isNull() || (obj1.isInt() && obj1.getInt() == 1))) {
-    error(getPos(), const_cast<char*>("Unknown form type"));
+    error(errInternal, getPos(), const_cast<char*>("Unknown form type"));
   }
   obj1.free();
 
@@@@ -884,7 +880,7 @@@@ void PdfParser::doSoftMask(Object *str, GBool alpha,
   dict->lookup(const_cast<char*>("BBox"), &obj1);
   if (!obj1.isArray()) {
     obj1.free();
-    error(getPos(), const_cast<char*>("Bad form bounding box"));
+    error(errInternal, getPos(), const_cast<char*>("Bad form bounding box"));
     return;
   }
   for (i = 0; i < 4; ++i) {
@@@@ -1012,19 +1008,11 @@@@ void PdfParser::opSetFillColorSpace(Object args[], int
 
   state->setFillPattern(NULL);
d15 1
a15 1
-#ifdef POPPLER_NEW_COLOR_SPACE_API
d17 2
a18 1
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
d20 2
a21 1
     colorSpace = GfxColorSpace::parse(&obj, NULL);
d23 3
a25 22
-#else
-  if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(&args[0]);
-  } else {
-    colorSpace = GfxColorSpace::parse(&obj);
-  }
-#endif
   obj.free();
   if (colorSpace) {
     state->setFillColorSpace(colorSpace);
@@@@ -1032,7 +1020,7 @@@@ void PdfParser::opSetFillColorSpace(Object args[], int
     state->setFillColor(&color);
     builder->updateStyle(state);
   } else {
-    error(getPos(), const_cast<char*>("Bad color space (fill)"));
+    error(errInternal, getPos(), const_cast<char*>("Bad color space (fill)"));
   }
 }
 
@@@@ -1043,19 +1031,11 @@@@ void PdfParser::opSetStrokeColorSpace(Object args[], i
 
   state->setStrokePattern(NULL);
d27 1
a27 1
-#ifdef POPPLER_NEW_COLOR_SPACE_API
d29 2
a30 1
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
d32 2
a33 1
     colorSpace = GfxColorSpace::parse(&obj, NULL);
d35 3
a37 49
-#else
-  if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(&args[0]);
-  } else {
-    colorSpace = GfxColorSpace::parse(&obj);
-  }
-#endif
   obj.free();
   if (colorSpace) {
     state->setStrokeColorSpace(colorSpace);
@@@@ -1063,7 +1043,7 @@@@ void PdfParser::opSetStrokeColorSpace(Object args[], i
     state->setStrokeColor(&color);
     builder->updateStyle(state);
   } else {
-    error(getPos(), const_cast<char*>("Bad color space (stroke)"));
+    error(errInternal, getPos(), const_cast<char*>("Bad color space (stroke)"));
   }
 }
 
@@@@ -1072,7 +1052,7 @@@@ void PdfParser::opSetFillColor(Object args[], int numA
   int i;
 
   if (numArgs != state->getFillColorSpace()->getNComps()) {
-    error(getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
+    error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
     return;
   }
   state->setFillPattern(NULL);
@@@@ -1088,7 +1068,7 @@@@ void PdfParser::opSetStrokeColor(Object args[], int nu
   int i;
 
   if (numArgs != state->getStrokeColorSpace()->getNComps()) {
-    error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
+    error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
     return;
   }
   state->setStrokePattern(NULL);
@@@@ -1109,7 +1089,7 @@@@ void PdfParser::opSetFillColorN(Object args[], int num
       if (!((GfxPatternColorSpace *)state->getFillColorSpace())->getUnder() ||
 	  numArgs - 1 != ((GfxPatternColorSpace *)state->getFillColorSpace())
 	                     ->getUnder()->getNComps()) {
-	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+	error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
 	return;
       }
       for (i = 0; i < numArgs - 1 && i < gfxColorMaxComps; ++i) {
@@@@ -1120,23 +1100,15 @@@@ void PdfParser::opSetFillColorN(Object args[], int num
       state->setFillColor(&color);
       builder->updateStyle(state);
d39 1
a39 1
-#ifdef POPPLER_NEW_COLOR_SPACE_API
d41 2
a42 1
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
d46 1
a46 27
-#else
-    if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
-      state->setFillPattern(pattern);
-      builder->updateStyle(state);
-    }
-#endif
 
   } else {
     if (numArgs != state->getFillColorSpace()->getNComps()) {
-      error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+      error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
       return;
     }
     state->setFillPattern(NULL);
@@@@ -1161,7 +1133,7 @@@@ void PdfParser::opSetStrokeColorN(Object args[], int n
 	       ->getUnder() ||
 	  numArgs - 1 != ((GfxPatternColorSpace *)state->getStrokeColorSpace())
 	                     ->getUnder()->getNComps()) {
-	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+	error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
 	return;
       }
       for (i = 0; i < numArgs - 1 && i < gfxColorMaxComps; ++i) {
@@@@ -1172,23 +1144,15 @@@@ void PdfParser::opSetStrokeColorN(Object args[], int n
       state->setStrokeColor(&color);
       builder->updateStyle(state);
d48 1
a48 1
-#ifdef POPPLER_NEW_COLOR_SPACE_API
d50 2
a51 1
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
d55 1
a55 152
-#else
-    if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
-      state->setStrokePattern(pattern);
-      builder->updateStyle(state);
-    }
-#endif
 
   } else {
     if (numArgs != state->getStrokeColorSpace()->getNComps()) {
-      error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+      error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
       return;
     }
     state->setStrokePattern(NULL);
@@@@ -1212,7 +1176,7 @@@@ void PdfParser::opMoveTo(Object args[], int numArgs) {
 
 void PdfParser::opLineTo(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in lineto"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in lineto"));
     return;
   }
   state->lineTo(args[0].getNum(), args[1].getNum());
@@@@ -1222,7 +1186,7 @@@@ void PdfParser::opCurveTo(Object args[], int numArgs) 
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in curveto"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto"));
     return;
   }
   x1 = args[0].getNum();
@@@@ -1238,7 +1202,7 @@@@ void PdfParser::opCurveTo1(Object args[], int numArgs)
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in curveto1"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto1"));
     return;
   }
   x1 = state->getCurX();
@@@@ -1254,7 +1218,7 @@@@ void PdfParser::opCurveTo2(Object args[], int numArgs)
   double x1, y1, x2, y2, x3, y3;
 
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in curveto2"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto2"));
     return;
   }
   x1 = args[0].getNum();
@@@@ -1282,7 +1246,7 @@@@ void PdfParser::opRectangle(Object args[], int numArgs
 
 void PdfParser::opClosePath(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    error(getPos(), const_cast<char*>("No current point in closepath"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in closepath"));
     return;
   }
   state->closePath();
@@@@ -1298,7 +1262,7 @@@@ void PdfParser::opEndPath(Object args[], int numArgs) 
 
 void PdfParser::opStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in stroke"));
     return;
   }
   if (state->isPath()) {
@@@@ -1314,7 +1278,7 @@@@ void PdfParser::opStroke(Object args[], int numArgs) {
 
 void PdfParser::opCloseStroke(Object * /*args[]*/, int /*numArgs*/) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/stroke"));
     return;
   }
   state->closePath();
@@@@ -1331,7 +1295,7 @@@@ void PdfParser::opCloseStroke(Object * /*args[]*/, int
 
 void PdfParser::opFill(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in fill"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in fill"));
     return;
   }
   if (state->isPath()) {
@@@@ -1347,7 +1311,7 @@@@ void PdfParser::opFill(Object args[], int numArgs) {
 
 void PdfParser::opEOFill(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in eofill"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in eofill"));
     return;
   }
   if (state->isPath()) {
@@@@ -1363,7 +1327,7 @@@@ void PdfParser::opEOFill(Object args[], int numArgs) {
 
 void PdfParser::opFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in fill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in fill/stroke"));
     return;
   }
   if (state->isPath()) {
@@@@ -1376,7 +1340,7 @@@@ void PdfParser::opFillStroke(Object args[], int numArg
 
 void PdfParser::opCloseFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/fill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/fill/stroke"));
     return;
   }
   if (state->isPath()) {
@@@@ -1388,7 +1352,7 @@@@ void PdfParser::opCloseFillStroke(Object args[], int n
 
 void PdfParser::opEOFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in eofill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in eofill/stroke"));
     return;
   }
   if (state->isPath()) {
@@@@ -1399,7 +1363,7 @@@@ void PdfParser::opEOFillStroke(Object args[], int numA
 
 void PdfParser::opCloseEOFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/eofill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/eofill/stroke"));
     return;
   }
   if (state->isPath()) {
@@@@ -1440,7 +1404,7 @@@@ void PdfParser::doPatternFillFallback(GBool eoFill) {
     doShadingPatternFillFallback((GfxShadingPattern *)pattern, gFalse, eoFill);
     break;
   default:
-    error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
+    error(errInternal, getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
 	  pattern->getType());
     break;
   }
@@@@ -1459,7 +1423,7 @@@@ void PdfParser::doPatternStrokeFallback() {
     doShadingPatternFillFallback((GfxShadingPattern *)pattern, gTrue, gFalse);
     break;
   default:
-    error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
+    error(errInternal, getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
 	  pattern->getType());
     break;
   }
@@@@ -1579,15 +1543,9 @@@@ void PdfParser::opShFill(Object args[], int numArgs) {
   double *matrix = NULL;
d58 3
a60 73
-#ifdef POPPLER_NEW_COLOR_SPACE_API
   if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
     return;
   }
-#else
-  if (!(shading = res->lookupShading(args[0].getName()))) {
-    return;
-  }
-#endif
 
   // save current graphics state
   if (shading->getType() != 2 && shading->getType() != 3) {
@@@@ -2156,7 +2114,7 @@@@ void PdfParser::opTextNextLine(Object args[], int numA
 
 void PdfParser::opShowText(Object args[], int numArgs) {
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in show"));
     return;
   }
   if (fontChanged) {
@@@@ -2170,7 +2128,7 @@@@ void PdfParser::opMoveShowText(Object args[], int numA
   double tx, ty;
 
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in move/show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in move/show"));
     return;
   }
   if (fontChanged) {
@@@@ -2188,7 +2146,7 @@@@ void PdfParser::opMoveSetShowText(Object args[], int n
   double tx, ty;
 
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in move/set/show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in move/set/show"));
     return;
   }
   if (fontChanged) {
@@@@ -2211,7 +2169,7 @@@@ void PdfParser::opShowSpaceText(Object args[], int num
   int i;
 
   if (!state->getFont()) {
-    error(getPos(), const_cast<char*>("No font in show/space"));
+    error(errInternal, getPos(), const_cast<char*>("No font in show/space"));
     return;
   }
   if (fontChanged) {
@@@@ -2236,7 +2194,7 @@@@ void PdfParser::opShowSpaceText(Object args[], int num
     } else if (obj.isString()) {
       doShowText(obj.getString());
     } else {
-      error(getPos(), const_cast<char*>("Element of show/space array must be number or string"));
+      error(errInternal, getPos(), const_cast<char*>("Element of show/space array must be number or string"));
     }
     obj.free();
   }
@@@@ -2334,7 +2292,7 @@@@ void PdfParser::doShowText(GooString *s) {
 	if (charProc.isStream()) {
 	  //parse(&charProc, gFalse); // TODO: parse into SVG font
 	} else {
-	  error(getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
+	  error(errInternal, getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
 	}
 	//out->endType3Char(state);
 	if (resDict) {
@@@@ -2410,7 +2368,7 @@@@ void PdfParser::opXObject(Object args[], int numArgs) 
     return;
   }
   if (!obj1.isStream()) {
-    error(getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
+    error(errInternal, getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
     obj1.free();
d63 2
a64 14
@@@@ -2426,9 +2384,9 @@@@ void PdfParser::opXObject(Object args[], int numArgs) 
 /*    out->psXObject(obj1.getStream(),
     		   obj3.isStream() ? obj3.getStream() : (Stream *)NULL);*/
   } else if (obj2.isName()) {
-    error(getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
+    error(errInternal, getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
   } else {
-    error(getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
+    error(errInternal, getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
   }
   obj2.free();
   obj1.free();
@@@@ -2559,11 +2517,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
       }
d67 7
a73 10
-#ifdef POPPLER_NEW_COLOR_SPACE_API
       colorSpace = GfxColorSpace::parse(&obj1, NULL);
-#else
-      colorSpace = GfxColorSpace::parse(&obj1);
-#endif
     } else if (csMode == streamCSDeviceGray) {
       colorSpace = new GfxDeviceGrayColorSpace();
     } else if (csMode == streamCSDeviceRGB) {
@@@@ -2648,11 +2602,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
 	  obj2.free();
d76 7
a82 37
-#ifdef POPPLER_NEW_COLOR_SPACE_API
       maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
-#else
-      maskColorSpace = GfxColorSpace::parse(&obj1);
-#endif
       obj1.free();
       if (!maskColorSpace || maskColorSpace->getMode() != csDeviceGray) {
 	goto err1;
@@@@ -2758,7 +2708,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
  err2:
   obj1.free();
  err1:
-  error(getPos(), const_cast<char*>("Bad image parameters"));
+  error(errInternal, getPos(), const_cast<char*>("Bad image parameters"));
 }
 
 void PdfParser::doForm(Object *str) {
@@@@ -2783,7 +2733,7 @@@@ void PdfParser::doForm(Object *str) {
   // check form type
   dict->lookup(const_cast<char*>("FormType"), &obj1);
   if (!(obj1.isNull() || (obj1.isInt() && obj1.getInt() == 1))) {
-    error(getPos(), const_cast<char*>("Unknown form type"));
+    error(errInternal, getPos(), const_cast<char*>("Unknown form type"));
   }
   obj1.free();
 
@@@@ -2791,7 +2741,7 @@@@ void PdfParser::doForm(Object *str) {
   dict->lookup(const_cast<char*>("BBox"), &bboxObj);
   if (!bboxObj.isArray()) {
     bboxObj.free();
-    error(getPos(), const_cast<char*>("Bad form bounding box"));
+    error(errInternal, getPos(), const_cast<char*>("Bad form bounding box"));
     return;
   }
   for (i = 0; i < 4; ++i) {
@@@@ -2827,11 +2777,7 @@@@ void PdfParser::doForm(Object *str) {
     if (obj1.dictLookup(const_cast<char*>("S"), &obj2)->isName(const_cast<char*>("Transparency"))) {
d85 6
a90 40
-#ifdef POPPLER_NEW_COLOR_SPACE_API
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
-#else
-	blendingColorSpace = GfxColorSpace::parse(&obj3);
-#endif
       }
       obj3.free();
       if (obj1.dictLookup(const_cast<char*>("I"), &obj3)->isBool()) {
@@@@ -2990,7 +2936,7 @@@@ Stream *PdfParser::buildImageStream() {
   parser->getObj(&obj);
   while (!obj.isCmd(const_cast<char*>("ID")) && !obj.isEOF()) {
     if (!obj.isName()) {
-      error(getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
+      error(errInternal, getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
       obj.free();
     } else {
       key = copyString(obj.getName());
@@@@ -3005,7 +2951,7 @@@@ Stream *PdfParser::buildImageStream() {
     parser->getObj(&obj);
   }
   if (obj.isEOF()) {
-    error(getPos(), const_cast<char*>("End of file in inline image"));
+    error(errInternal, getPos(), const_cast<char*>("End of file in inline image"));
     obj.free();
     dict.free();
     return NULL;
@@@@ -3020,11 +2966,11 @@@@ Stream *PdfParser::buildImageStream() {
 }
 
 void PdfParser::opImageData(Object args[], int numArgs) {
-  error(getPos(), const_cast<char*>("Internal: got 'ID' operator"));
+  error(errInternal, getPos(), const_cast<char*>("Internal: got 'ID' operator"));
 }
 
 void PdfParser::opEndImage(Object args[], int numArgs) {
-  error(getPos(), const_cast<char*>("Internal: got 'EI' operator"));
+  error(errInternal, getPos(), const_cast<char*>("Internal: got 'EI' operator"));
 }
 
 //------------------------------------------------------------------------
@


1.4
log
@Fix build with poppler-0.20.

ok aja@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update inkscape to 0.48.0, from brad

ok sthen@@
@
text
@d1 118
a118 4
$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.2 2009/12/04 20:12:35 kili Exp $
--- src/extension/internal/pdfinput/pdf-parser.cpp.orig	Tue Mar 11 05:20:21 2008
+++ src/extension/internal/pdfinput/pdf-parser.cpp	Mon Nov 30 21:32:15 2009
@@@@ -810,7 +810,7 @@@@ void PdfParser::opSetExtGState(Object args[], int numA
d121 4
a124 1
 	  if (!obj4.dictLookup("CS", &obj5)->isNull()) {
d126 1
a126 1
+	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
d129 40
a168 2
 	  if (obj4.dictLookup("I", &obj5)->isBool()) {
@@@@ -1010,9 +1010,9 @@@@ void PdfParser::opSetFillColorSpace(Object args[], int
d171 1
d173 6
d180 1
a180 2
+    colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
d182 2
a183 2
+    colorSpace = GfxColorSpace::parse(&obj, NULL);
   }
d186 12
a197 1
@@@@ -1033,9 +1033,9 @@@@ void PdfParser::opSetStrokeColorSpace(Object args[], i
d200 1
d202 6
d209 1
a209 2
+    colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
d211 2
a212 2
+    colorSpace = GfxColorSpace::parse(&obj, NULL);
   }
d215 39
a253 1
@@@@ -1102,7 +1102,7 @@@@ void PdfParser::opSetFillColorN(Object args[], int num
d256 1
d258 1
a258 2
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
+	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
d262 26
a287 1
@@@@ -1146,7 +1146,7 @@@@ void PdfParser::opSetStrokeColorN(Object args[], int n
d290 1
d292 1
a292 2
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
+	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
d296 151
a446 1
@@@@ -1544,7 +1544,7 @@@@ void PdfParser::opShFill(Object args[], int numArgs) {
d450 5
d456 12
a467 1
+  if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
d470 3
d474 64
a537 28
@@@@ -2196,7 +2196,7 @@@@ void PdfParser::doShowText(GooString *s) {
   int wMode;
   double riseX, riseY;
   CharCode code;
-  Unicode u[8];
+  Unicode *u = NULL;
   double x, y, dx, dy, dx2, dy2, curX, curY, tdx, tdy, lineX, lineY;
   double originX, originY, tOriginX, tOriginY;
   double oldCTM[6], newCTM[6];
@@@@ -2244,7 +2244,7 @@@@ void PdfParser::doShowText(GooString *s) {
     len = s->getLength();
     while (len > 0) {
       n = font->getNextChar(p, len, &code,
-			    u, (int)(sizeof(u) / sizeof(Unicode)), &uLen,
+			    &u, &uLen,
 			    &dx, &dy, &originX, &originY);
       dx = dx * state->getFontSize() + state->getCharSpace();
       if (n == 1 && *p == ' ') {
@@@@ -2293,7 +2293,7 @@@@ void PdfParser::doShowText(GooString *s) {
     len = s->getLength();
     while (len > 0) {
       n = font->getNextChar(p, len, &code,
-			    u, (int)(sizeof(u) / sizeof(Unicode)), &uLen,
+			    &u, &uLen,
 			    &dx, &dy, &originX, &originY);
       
       if (wMode) {
@@@@ -2487,7 +2487,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
d541 3
d545 1
a545 1
+      colorSpace = GfxColorSpace::parse(&obj1, NULL);
d549 1
a549 1
@@@@ -2572,7 +2572,7 @@@@ void PdfParser::doImage(Object *ref, Stream *str, GBoo
d553 3
d557 1
a557 1
+      maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
d561 29
a589 2
@@@@ -2747,7 +2747,7 @@@@ void PdfParser::doForm(Object *str) {
     if (obj1.dictLookup("S", &obj2)->isName("Transparency")) {
d591 4
a594 1
       if (!obj1.dictLookup("CS", &obj3)->isNull()) {
d596 1
a596 1
+	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
d599 33
a631 1
       if (obj1.dictLookup("I", &obj3)->isBool()) {
@


1.2
log
@Unbreak after the latest poppler update.
While here, update license marker.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_extension_internal_pdfinput_pdf-parser_cpp,v 1.1 2008/11/03 19:40:38 kili Exp $
@


1.1
log
@
Unbreak after poppler update. No cookies for me.

Fix from Mikko Tolmunen <oskari@@sefirosu.org>. Thanks.
@
text
@d1 63
a63 3
$OpenBSD$
--- src/extension/internal/pdfinput/pdf-parser.cpp.orig	Sun Nov  2 21:27:57 2008
+++ src/extension/internal/pdfinput/pdf-parser.cpp	Sun Nov  2 21:30:50 2008
d91 27
@

