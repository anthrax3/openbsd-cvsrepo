head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.0.8
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_7:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2015.11.14.12.41.53;	author sthen;	state dead;
branches;
next	1.1;
commitid	f8WPxAoZC1BTUuuw;

1.1
date	2015.03.26.09.16.31;	author jasper;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	CO7VYOz5EeIzje7n;

1.1.2.1
date	2015.03.26.09.16.39;	author jasper;	state Exp;
branches;
next	;
commitid	CKK6fPXgB3Mt4BK6;

1.1.4.1
date	2015.03.26.09.16.45;	author jasper;	state Exp;
branches;
next	;
commitid	Ujfho7A0zURBIGfq;


desc
@@


1.2
log
@update to gd-2.1.1, based on a diff from Rafael Sadowski
@
text
@$OpenBSD: patch-src_gd_gif_in_c,v 1.1 2015/03/26 09:16:31 jasper Exp $

Security fix for CVE-2014-9709, gd: buffer read overflow in gd_gif_in.c

--- src/gd_gif_in.c.orig	Thu Mar 26 10:07:17 2015
+++ src/gd_gif_in.c	Thu Mar 26 10:08:35 2015
@@@@ -75,8 +75,10 @@@@ static struct {
 
 #define STACK_SIZE ((1<<(MAX_LWZ_BITS))*2)
 
+#define CSD_BUF_SIZE 280
+
 typedef struct {
-	unsigned char buf[280];
+	unsigned char buf[CSD_BUF_SIZE];
 	int curbit;
 	int lastbit;
 	int done;
@@@@ -410,7 +412,12 @@@@ GetCode_(gdIOCtx *fd, CODE_STATIC_DATA *scd, int code_
 
 	ret = 0;
 	for (i = scd->curbit, j = 0; j < code_size; ++i, ++j) {
-		ret |= ((scd->buf[i / 8] & (1 << (i % 8))) != 0) << j;
+		if (i < CSD_BUF_SIZE * 8) {
+			ret |= ((scd->buf[i / 8] & (1 << (i % 8))) != 0) << j;
+		} else {
+			ret = -1;
+			break;
+		}
 	}
 
 	scd->curbit += code_size;
@


1.1
log
@Security fix for CVE-2014-9709, gd: buffer read overflow in gd_gif_in.c

php-gd was already fixed
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.4.1
log
@Security fix for CVE-2014-9709, gd: buffer read overflow in gd_gif_in.c

php-gd was already fixed
@
text
@@


1.1.2.1
log
@Security fix for CVE-2014-9709, gd: buffer read overflow in gd_gif_in.c

php-gd was already fixed
@
text
@@

