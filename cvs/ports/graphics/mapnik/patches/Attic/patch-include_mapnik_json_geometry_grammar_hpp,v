head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.09.18.20.07.09;	author landry;	state dead;
branches;
next	1.1;
commitid	N263cXg5vtZIzI4i;

1.1
date	2015.07.01.08.45.19;	author jasper;	state Exp;
branches;
next	;
commitid	sYFQHaeB2APMqCQ6;


desc
@@


1.2
log
@Update to mapnik 3.0.5.

Switch to use gcc 4.9 since it now requires c++11. Thx ajacoutot for
the build-testing - note that it requires more than 4gb of memory to
build, and might not build on i386.
@
text
@$OpenBSD: patch-include_mapnik_json_geometry_grammar_hpp,v 1.1 2015/07/01 08:45:19 jasper Exp $

From 76f111cc97a86cb029682f92b3d212f105f46aa6 Mon Sep 17 00:00:00 2001
From: Dane Springmeyer <dane@@dbsgeo.com>
Date: Sat, 27 Jul 2013 01:57:24 -0400
Subject: [PATCH] support optionally compiling with -std=c++11 on OSX / clang / apple libc++ / boost 1.53 - refs #1683

--- include/mapnik/json/geometry_grammar.hpp.orig	Tue Jun  4 03:35:27 2013
+++ include/mapnik/json/geometry_grammar.hpp	Mon Jun 29 09:08:51 2015
@@@@ -37,9 +37,58 @@@@ namespace qi = boost::spirit::qi;
 namespace standard_wide =  boost::spirit::standard_wide;
 using standard_wide::space_type;
 
+#ifdef BOOST_SPIRIT_USE_PHOENIX_V3
 struct push_vertex
 {
+    typedef void result_type;
+
     template <typename T0,typename T1, typename T2, typename T3>
+    result_type operator() (T0 c, T1 path, T2 x, T3 y) const
+    {
+        BOOST_ASSERT( path!=0 );
+        path->push_vertex(x,y,c);
+    }
+};
+
+struct close_path
+{
+    typedef void result_type;
+
+    template <typename T>
+    result_type operator() (T path) const
+    {
+        BOOST_ASSERT( path!=0 );
+        path->close_path();
+    }
+};
+
+struct cleanup
+{
+    typedef void result_type;
+    template <typename T0>
+    void operator() (T0 & path) const
+    {
+        if (path) delete path, path=0;
+    }
+};
+
+struct where_message
+{
+    typedef std::string result_type;
+
+    template <typename Iterator>
+    std::string operator() (Iterator first, Iterator last, std::size_t size) const
+    {
+        std::string str(first, last);
+        if (str.length() > size)
+            return str.substr(0, size) + "..." ;
+        return str;
+    }
+};
+#else
+struct push_vertex
+{
+    template <typename T0,typename T1, typename T2, typename T3>
     struct result
     {
         typedef void type;
@@@@ -101,12 +150,13 @@@@ struct where_message
         return str;
     }
 };
+#endif
 
 
 template <typename Iterator>
 struct geometry_grammar :
         qi::grammar<Iterator,qi::locals<int>, void(boost::ptr_vector<mapnik::geometry_type>& )
-                   , space_type>
+        , space_type>
 {
     geometry_grammar();
     qi::rule<Iterator, qi::locals<int>, void(boost::ptr_vector<mapnik::geometry_type>& ),space_type> geometry;
@


1.1
log
@- lots of fixes from upstream to build with new boost/phoenix v3 (from upstream)
- bump boost dependency

ok landry@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@

