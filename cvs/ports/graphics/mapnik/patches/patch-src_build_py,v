head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2016.09.04.16.46.57;	author landry;	state Exp;
branches;
next	1.4;
commitid	VoBhkVHsLvgbgjrq;

1.4
date	2015.09.18.20.07.09;	author landry;	state Exp;
branches;
next	1.3;
commitid	N263cXg5vtZIzI4i;

1.3
date	2013.07.06.11.19.48;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.05.07.05.16;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.03.08.48.26;	author landry;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to 3.0.10, still BROKEN because of missing symbol for
_ZN6icu_5713UnicodeStringC1EPKciEOS0_. Maybe switching icu to build with
a decent compiler would help, but that's not planned for now...
@
text
@$OpenBSD: patch-src_build_py,v 1.4 2015/09/18 20:07:09 landry Exp $
--- src/build.py.orig	Fri Feb 26 03:02:05 2016
+++ src/build.py	Sun Sep  4 17:29:08 2016
@@@@ -37,9 +37,6 @@@@ def call(cmd, silent=True):
     elif not silent:
         print stderr
 
-def ldconfig(*args,**kwargs):
-    call('ldconfig')
-
 if env['LINKING'] == 'static':
     lib_env.Append(CXXFLAGS="-fPIC")
 
@@@@ -136,7 +133,7 @@@@ else: # unix, non-macos
         else:
             mapnik_lib_link_flag += ' -Wl,-h,%s' %  mapnik_libname
     else: # Linux and others
-        if env['PLATFORM'] != 'FreeBSD':
+        if env['PLATFORM'] != 'OpenBSD':
             lib_env['LIBS'].append('dl')
         mapnik_lib_link_flag += ' -Wl,-rpath-link,.'
         if env['ENABLE_SONAME']:
@@@@ -434,9 +431,7 @@@@ else:
             os.remove(trgt)
         os.symlink(os.path.basename(src), trgt)
 
-    major, minor, micro = ABI_VERSION
-
-    soFile = "%s.%d.%d.%d" % (os.path.basename(env.subst(env['MAPNIK_LIB_NAME'])), int(major), int(minor), int(micro))
+    soFile = "%s.${LIBmapnik_VERSION}" % (os.path.basename(env.subst(env['MAPNIK_LIB_NAME'])))
     target = os.path.join(env['MAPNIK_LIB_BASE_DEST'], soFile)
 
     if 'uninstall' not in COMMAND_LINE_TARGETS:
@@@@ -446,30 +441,8 @@@@ else:
             mapnik = lib_env_final.SharedLibrary(env['MAPNIK_NAME'], source)
         result = env.InstallAs(target=target, source=mapnik)
         env.Alias(target='install', source=result)
-        if result:
-              env.AddPostAction(result, ldconfig)
 
-    # Install symlinks
-    target1 = os.path.join(env['MAPNIK_LIB_BASE_DEST'], "%s.%d.%d" % \
-        (os.path.basename(env.subst(env['MAPNIK_LIB_NAME'])),int(major), int(minor)))
-    target2 = os.path.join(env['MAPNIK_LIB_BASE_DEST'], os.path.basename(env.subst(env['MAPNIK_LIB_NAME'])))
-    if 'uninstall' not in COMMAND_LINE_TARGETS:
-        link1 = env.Command(target1, target, symlink)
-        env.Alias(target='install', source=link1)
-        link2 = env.Command(target2, target1, symlink)
-        env.Alias(target='install', source=link2)
-    # delete in reverse order..
-    env['create_uninstall_target'](env, target2)
-    env['create_uninstall_target'](env, target1)
     env['create_uninstall_target'](env, target)
-
-    # to enable local testing
-    lib_major_minor = "%s.%d.%d" % (os.path.basename(env.subst(env['MAPNIK_LIB_NAME'])), int(major), int(minor))
-    local_lib = os.path.basename(env.subst(env['MAPNIK_LIB_NAME']))
-    if os.path.islink(lib_major_minor) or os.path.exists(lib_major_minor):
-        os.remove(lib_major_minor)
-    os.symlink(local_lib,lib_major_minor)
-    Clean(mapnik,lib_major_minor);
 
 if not env['RUNTIME_LINK'] == 'static':
     Depends(mapnik, env.subst('../deps/agg/libagg.a'))
@


1.4
log
@Update to mapnik 3.0.5.

Switch to use gcc 4.9 since it now requires c++11. Thx ajacoutot for
the build-testing - note that it requires more than 4gb of memory to
build, and might not build on i386.
@
text
@d1 3
a3 3
$OpenBSD$
--- src/build.py.orig	Fri Jul 31 21:40:05 2015
+++ src/build.py	Sat Aug  8 15:27:39 2015
d23 1
a23 1
@@@@ -432,9 +429,7 @@@@ else:
d34 1
a34 1
@@@@ -444,30 +439,8 @@@@ else:
@


1.3
log
@Update to mapnik 2.2.0.

Fix depends, remove cairomm/libtool,-ltdl & agg. Mapnik uses its own
internal agg fork now. Fix WANTLIB while here, and ensure dependency on
png 1.6, otherwise build breaks horribly.
Force the dependency on scons 2.3.0, newer mapnik switched from CXXFLAGS
to CPPDEFINES, and with previous scons this produces broken build flags like
-DHAVE_JPEG-DMAPNIK_USE_PROJ4-DHAVE_PNG-DHAVE_TIFF-DBIGINT-DOPENBSD-DMAPNIK_THREADSAFE
in turn producing broken builds.
Add a warning about the 'dangerous' regress tests.
@
text
@d1 3
a3 4
$OpenBSD: patch-src_build_py,v 1.2 2012/05/05 07:05:16 landry Exp $
Set shlib version, don't do stupid symlinks, dont call ldconfig
--- src/build.py.orig	Tue Jun  4 03:35:27 2013
+++ src/build.py	Sat Jul  6 13:13:32 2013
d14 10
a23 10
@@@@ -98,7 +95,7 @@@@ if env['PLATFORM'] == 'Darwin':
     _d = {'version':env['MAPNIK_VERSION_STRING'].replace('-pre','')}
     mapnik_lib_link_flag += ' -current_version %(version)s -compatibility_version %(version)s' % _d
 else: # unix, non-macos
-    mapnik_libname = env.subst(env['MAPNIK_LIB_NAME']) + (".%d.%d" % (int(ABI_VERSION[0]),int(ABI_VERSION[1])))
+    mapnik_libname = 'libmapnik.so.${LIBmapnik_VERSION}'
     if env['PLATFORM'] == 'SunOS':
         if env['CXX'].startswith('CC'):
             mapnik_lib_link_flag += ' -R. -h %s' % mapnik_libname
@@@@ -421,9 +418,7 @@@@ else:
d34 2
a35 2
@@@@ -433,30 +428,8 @@@@ else:
             mapnik = lib_env_final.SharedLibrary('mapnik', source)
@


1.2
log
@Unbreak by not calling ldconfig during fake (whooo, oneliner fix!)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_build_py,v 1.1 2012/05/03 08:48:26 landry Exp $
d3 2
a4 2
--- src/build.py.orig	Tue Apr 10 00:56:48 2012
+++ src/build.py	Sat May  5 08:15:49 2012
d15 5
a19 5
@@@@ -81,7 +78,7 @@@@ if not env['RUNTIME_LINK'] == 'static':
 if env['PLATFORM'] == 'Darwin':
     mapnik_libname = 'libmapnik.dylib'
 else:
-    mapnik_libname = 'libmapnik.so.' + ("%d.%d" % (int(ABI_VERSION[0]),int(ABI_VERSION[1])))
d21 4
a24 4
 
 if env['PLATFORM'] == 'Darwin':
     if env['FULL_LIB_PATH']:
@@@@ -325,30 +322,13 @@@@ if env['PLATFORM'] != 'Darwin':
d29 3
a31 3
-    
-    soFile = "%s.%d.%d.%d" % (os.path.basename(str(mapnik[0])), int(major), int(minor), int(micro))
+    soFile = "%s.${LIBmapnik_VERSION}" % (os.path.basename(str(mapnik[0])))
d33 1
a33 1
     
d35 6
a40 4
       result = env.InstallAs(target=target, source=mapnik)
       env.Alias(target='install', source=result)
-      if result:
-            env.AddPostAction(result, ldconfig)
a41 1
-    
d43 3
a45 2
-    target1 = os.path.join(env['MAPNIK_LIB_BASE_DEST'], "%s.%d.%d" % (os.path.basename(str(mapnik[0])),int(major), int(minor)))
-    target2 = os.path.join(env['MAPNIK_LIB_BASE_DEST'], os.path.basename(str(mapnik[0])))
d47 4
a50 5
-        if 'install' in COMMAND_LINE_TARGETS:
-            link1 = env.Command(target1, target, symlink)
-            env.Alias(target='install', source=link1)
-            link2 = env.Command(target2, target1, symlink)
-            env.Alias(target='install', source=link2)
d55 8
d64 2
a65 1
 else:
@


1.1
log
@Update to mapnik 2.0.1

- enable sqlite input plugin
- enable regress tests
- fix WANTLIB
- now scons doesn't rebuild mapnik during make fake ! Hint :
http://wiki.gentoo.org/wiki/SCons#Why_you_should_NOT_use_SCons_in_your_project
@
text
@d1 2
a2 2
$OpenBSD$
Set shlib version, don't do stupid symlinks
d4 12
a15 2
+++ src/build.py	Wed May  2 22:39:34 2012
@@@@ -81,7 +81,7 @@@@ if not env['RUNTIME_LINK'] == 'static':
d24 1
a24 1
@@@@ -325,9 +325,7 @@@@ if env['PLATFORM'] != 'Darwin':
d35 4
a38 3
@@@@ -336,19 +334,6 @@@@ if env['PLATFORM'] != 'Darwin':
       if result:
             env.AddPostAction(result, ldconfig)
@

