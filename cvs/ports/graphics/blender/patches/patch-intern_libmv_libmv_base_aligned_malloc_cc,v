head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.6
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.03.30.13.30.04;	author pascal;	state Exp;
branches;
next	;
commitid	VsdYMia69bjIj7RP;


desc
@@


1.1
log
@Update to Blender 2.77.
@
text
@$OpenBSD$
--- intern/libmv/libmv/base/aligned_malloc.cc.orig	Wed Mar 30 13:31:27 2016
+++ intern/libmv/libmv/base/aligned_malloc.cc	Wed Mar 30 13:32:15 2016
@@@@ -21,7 +21,8 @@@@
 #include "libmv/base/aligned_malloc.h"
 #include "libmv/logging/logging.h"
 
-#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__NetBSD__)
+#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && \
+	!defined(__OpenBSD__)
 // Needed for memalign on Linux and _aligned_alloc on Windows.
 #  ifdef FREE_WINDOWS
 /* make sure _aligned_malloc is included */
@@@@ -49,7 +50,7 @@@@ void *aligned_malloc(int size, int alignment) {
   // they work natively with SSE types with no further work.
   CHECK_EQ(alignment, 16);
   return malloc(size);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
   void *result;
 
   if (posix_memalign(&result, alignment, size)) {
@
