head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.03.30.13.30.04;	author pascal;	state dead;
branches;
next	1.2;
commitid	VsdYMia69bjIj7RP;

1.2
date	2014.11.04.06.02.40;	author brad;	state Exp;
branches;
next	1.1;
commitid	LftYbVpsYNP5vftz;

1.1
date	2014.07.03.14.41.48;	author pascal;	state Exp;
branches;
next	;
commitid	FNg5RBnCCCFoe4Qt;


desc
@@


1.3
log
@Update to Blender 2.77.
@
text
@$OpenBSD: patch-extern_libmv_libmv_base_aligned_malloc_cc,v 1.2 2014/11/04 06:02:40 brad Exp $

- Don't use malloc.h header on OpenBSD.
- Use posix_memalign() on OpenBSD.

--- extern/libmv/libmv/base/aligned_malloc.cc.orig	Sun Jun 29 15:44:24 2014
+++ extern/libmv/libmv/base/aligned_malloc.cc	Sun Jun 29 15:45:16 2014
@@@@ -21,7 +21,8 @@@@
 #include "libmv/base/aligned_malloc.h"
 #include "libmv/logging/logging.h"
 
-#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__NetBSD__)
+#if !defined(__APPLE__) && !defined(__FreeBSD__) && !defined(__NetBSD__) && \
+	!defined(__OpenBSD__)
 // Needed for memalign on Linux and _aligned_alloc on Windows.
 #  ifdef FREE_WINDOWS
 /* make sure _aligned_malloc is included */
@@@@ -49,7 +50,7 @@@@ void *aligned_malloc(int size, int alignment) {
   // they work natively with SSE types with no further work.
   CHECK_EQ(alignment, 16);
   return malloc(size);
-#elif defined(__FreeBSD__) || defined(__NetBSD__)
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
   void *result;
 
   if (posix_memalign(&result, alignment, size)) {
@


1.2
log
@Sprinkle some comments.

ok pascal@@
@
text
@d1 1
a1 1
$OpenBSD: patch-extern_libmv_libmv_base_aligned_malloc_cc,v 1.1 2014/07/03 14:41:48 pascal Exp $
@


1.1
log
@Update to blender 2.71.
@
text
@d1 5
a5 1
$OpenBSD$
@

