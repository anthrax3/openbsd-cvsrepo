head	1.11;
access;
symbols
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	sturm_20050407:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2015.10.21.13.18.44;	author sthen;	state dead;
branches;
next	1.10;
commitid	nNvBEeJg1fv9dtnH;

1.10
date	2015.06.02.14.19.15;	author kirby;	state Exp;
branches;
next	1.9;
commitid	PW3u4uD4bmblhEyr;

1.9
date	2015.05.31.06.40.35;	author kirby;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	kN5YxTGGy4jES4IO;

1.8
date	2010.09.21.10.29.09;	author sthen;	state dead;
branches;
next	1.7;

1.7
date	2008.06.06.13.20.19;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.14.23.06.20;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.11.04.12.48;	author hugh;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.27.08.24.22;	author alek;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.18.18.14.49;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.03.17.47.59;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.07.21.36.31;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.04.07.21.36.31;	author sturm;	state Exp;
branches;
next	;

1.9.2.1
date	2015.06.01.07.51.22;	author jasper;	state Exp;
branches;
next	;
commitid	HLsBt1IdEJ66zClb;


desc
@@


1.11
log
@update to dcraw-9.26.0
@
text
@$OpenBSD: patch-dcraw_c,v 1.10 2015/06/02 14:19:15 kirby Exp $

input sanitization errors, CVE-2015-3885

--- dcraw.c.orig	Tue May 26 12:10:40 2015
+++ dcraw.c	Tue May 26 12:13:41 2015
@@@@ -824,7 +824,8 @@@@ struct jhead {
 
 int CLASS ljpeg_start (struct jhead *jh, int info_only)
 {
-  int c, tag, len;
+  int c, tag;
+  ushort len;
   uchar data[0x10000];
   const uchar *dp;
 
@


1.10
log
@fix typo in patch comment
spottend by jasper@@ in similar patch to graphics/darktable
@
text
@d1 1
a1 1
$OpenBSD: patch-dcraw_c,v 1.9 2015/05/31 06:40:35 kirby Exp $
@


1.9
log
@fix CVE-2015-3885 for embedded dcraw.
reported by Sevan / Venture37 on ports@@, thanks
switch to new distfile which is available from MASTER_SITES and contains
no win32 binary
looks ok to kili@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
imput sanitization errors, CVE-2015-3885
@


1.9.2.1
log
@Security fixes for CVE-2015-3885
@
text
@d1 1
a1 1
$OpenBSD: patch-dcraw_c,v 1.9 2015/05/31 06:40:35 kirby Exp $
@


1.8
log
@update to 9.04 and drop strl* patches which are difficult to maintain,
and this code is already present several other times in the ports tree
unpatched. jasper@@ has no objections to dropping strl* patches.
@
text
@d1 7
a7 12
--- dcraw.c.orig	Tue Apr 29 14:22:52 2008
+++ dcraw.c	Sun Jun  1 03:10:50 2008
@@@@ -1253,8 +1253,8 @@@@ void CLASS nikon_3700()
   bits = (dp[8] & 3) << 4 | (dp[20] & 3);
   for (i=0; i < sizeof table / sizeof *table; i++)
     if (bits == table[i].bits) {
-      strcpy (make,  table[i].make );
-      strcpy (model, table[i].model);
+      strlcpy (make,  table[i].make,  sizeof make);
+      strlcpy (model, table[i].model, sizeof model);
     }
 }
d9 1
a9 40
@@@@ -3030,7 +3030,7 @@@@ void CLASS foveon_interpolate()
     FORC3 diag[c][i] = LAST(1,1)*LAST(2,2) - LAST(1,2)*LAST(2,1);
   #undef LAST
   FORC3 div[c] = diag[c][0]*0.3127 + diag[c][1]*0.329 + diag[c][2]*0.3583;
-  sprintf (str, "%sRGBNeutral", model2);
+  snprintf (str, sizeof str, "%sRGBNeutral", model2);
   if (foveon_camf_param ("IncludeBlocks", str))
     foveon_fixed (div, 3, str);
   num = 0;
@@@@ -3397,9 +3397,9 @@@@ void CLASS bad_pixels (char *fname)
       if (*cp == '\\') *cp = '/';
 #endif
     cp = fname + strlen(fname);
-    if (cp[-1] == '/') cp--;
+    if (cp[-1] == '/') cp--, *cp = '\0';
     while (*fname == '/') {
-      strcpy (cp, "/.badpixels");
+      strlcat (fname, "/.badpixels", len);
       if ((fp = fopen (fname, "r"))) break;
       if (cp == fname) break;
       while (*--cp != '/');
@@@@ -4798,7 +4798,7 @@@@ void CLASS parse_mos (int offset)
     if (!strcmp(data,"ShootObj_back_type")) {
       fscanf (ifp, "%d", &i);
       if ((unsigned) i < sizeof mod / sizeof (*mod))
-	strcpy (model, mod[i]);
+	strlcpy (model, mod[i], sizeof model);
     }
     if (!strcmp(data,"icc_camera_to_tone_matrix")) {
       for (i=0; i < 9; i++)
@@@@ -5130,7 +5130,7 @@@@ int CLASS parse_tiff_ifd (int base)
 	  if (flip % 180 == 90) SWAP(width,height);
 	  filters = flip = 0;
 	}
-	sprintf (model, "Ixpress %d-Mp", height*width/1000000);
+	snprintf (model, sizeof model, "Ixpress %d-Mp", height*width/1000000);
 	load_raw = &CLASS imacon_full_load_raw;
 	if (filters) {
 	  if (left_margin & 1) filters = 0x61616161;
@@@@ -5438,6 +5438,7 @@@@ void CLASS parse_external_jpeg()
d11 5
a15 3
   char *file, *ext, *jname, *jfile, *jext;
   FILE *save=ifp;
+  size_t ifsize;
a16 173
   ext  = strrchr (ifname, '.');
   file = strrchr (ifname, '/');
@@@@ -5445,13 +5446,15 @@@@ void CLASS parse_external_jpeg()
   if (!file) file = ifname-1;
   file++;
   if (!ext || strlen(ext) != 4 || ext-file != 8) return;
-  jname = (char *) malloc (strlen(ifname) + 1);
+  ifsize = strlen(ifname) + 1;
+  jname = (char *) malloc (ifsize);
   merror (jname, "parse_external()");
-  strcpy (jname, ifname);
+  strlcpy (jname, ifname, ifsize);
   jfile = file - ifname + jname;
   jext  = ext  - ifname + jname;
   if (strcasecmp (ext, ".jpg")) {
-    strcpy (jext, isupper(ext[1]) ? ".JPG":".jpg");
+    *jext = '\0';
+    strlcat(ifname, isupper(ext[1]) ? ".JPG":".jpg", ifsize);
     memcpy (jfile, file+4, 4);
     memcpy (jfile+4, file, 4);
   } else
@@@@ -5668,7 +5671,7 @@@@ void CLASS parse_sinar_ia()
   fread (make, 64, 1, ifp);
   make[63] = 0;
   if ((cp = strchr(make,' '))) {
-    strcpy (model, cp+1);
+    strlcpy (model, cp+1, sizeof model);
     *cp = 0;
   }
   raw_width  = get2();
@@@@ -5846,7 +5849,7 @@@@ void CLASS parse_smal (int offset, int fsize)
   raw_height = height = get2();
   raw_width  = width  = get2();
   strcpy (make, "SMaL");
-  sprintf (model, "v%d %dx%d", ver, width, height);
+  snprintf (model, sizeof model, "v%d %dx%d", ver, width, height);
   if (ver == 6) load_raw = &CLASS smal_v6_load_raw;
   if (ver == 9) load_raw = &CLASS smal_v9_load_raw;
 }
@@@@ -5874,7 +5877,7 @@@@ void CLASS parse_cine()
   }
   fseek (ifp, off_setup+792, SEEK_SET);
   strcpy (make, "CINE");
-  sprintf (model, "%d", get4());
+  snprintf (model, sizeof model, "%d", get4());
   fseek (ifp, 12, SEEK_CUR);
   switch ((i=get4()) & 0xffffff) {
     case  3:  filters = 0x94949494;  break;
@@@@ -5973,11 +5976,11 @@@@ void CLASS parse_foveon()
 	  if (!strcmp (name, "ISO"))
 	    iso_speed = atoi(value);
 	  if (!strcmp (name, "CAMMANUF"))
-	    strcpy (make, value);
+	    strlcpy (make, value, sizeof make);
 	  if (!strcmp (name, "CAMMODEL"))
-	    strcpy (model, value);
+	    strlcpy (model, value, sizeof model);
 	  if (!strcmp (name, "WB_DESC"))
-	    strcpy (model2, value);
+	    strlcpy (model2, value, sizeof model2);
 	  if (!strcmp (name, "TIME"))
 	    timestamp = atoi(value);
 	  if (!strcmp (name, "EXPTIME"))
@@@@ -6396,7 +6399,7 @@@@ void CLASS adobe_coeff (char *make, char *model)
   char name[130];
   int i, j;
 
-  sprintf (name, "%s %s", make, model);
+  snprintf (name, sizeof name, "%s %s", make, model);
   for (i=0; i < sizeof table / sizeof *table; i++)
     if (!strncmp (name, table[i].prefix, strlen(table[i].prefix))) {
       if (table[i].black)   black   = (ushort) table[i].black;
@@@@ -6634,8 +6637,8 @@@@ void CLASS identify()
   else
     for (i=0; i < sizeof table / sizeof *table; i++)
       if (fsize == table[i].fsize) {
-	strcpy (make,  table[i].make );
-	strcpy (model, table[i].model);
+	strlcpy (make,  table[i].make, sizeof make);
+	strlcpy (model, table[i].model, sizeof model);
 	if (table[i].withjpeg)
 	  parse_external_jpeg();
       }
@@@@ -6644,7 +6647,7 @@@@ void CLASS identify()
 
   for (i=0; i < sizeof corp / sizeof *corp; i++)
     if (strstr (make, corp[i]))		/* Simplify company names */
-	strcpy (make, corp[i]);
+	strlcpy (make, corp[i], sizeof make);
   if (!strncmp (make,"KODAK",5))
     make[16] = model[16] = 0;
   cp = make + strlen(make);		/* Remove trailing spaces */
@@@@ -7035,7 +7038,7 @@@@ cp_e2500:
     load_raw = &CLASS unpacked_load_raw;
   } else if (!strcmp(make,"FUJIFILM")) {
     if (!strcmp(model+7,"S2Pro")) {
-      strcpy (model+7," S2Pro");
+      strcpy (model + 7, " S2Pro");
       height = 2144;
       width  = 2880;
       flip = 6;
@@@@ -7077,7 +7080,7 @@@@ cp_e2500:
     } else if (!strncmp(model,"ALPHA",5) ||
 	       !strncmp(model,"DYNAX",5) ||
 	       !strncmp(model,"MAXXUM",6)) {
-      sprintf (model+20, "DYNAX %-10s", model+6+(model[0]=='M'));
+      snprintf (model+20, sizeof model - 20, "DYNAX %-10s", model+6+(model[0]=='M'));
       adobe_coeff (make, model+20);
       load_raw = &CLASS packed_12_load_raw;
     } else if (!strncmp(model,"DiMAGE G",8)) {
@@@@ -7618,7 +7621,7 @@@@ qt_common:
     pre_mul[2] = 1.504;
   }
   if (!model[0])
-    sprintf (model, "%dx%d", width, height);
+    snprintf (model, sizeof model,  "%dx%d", width, height);
   if (filters == UINT_MAX) filters = 0x94949494;
   if (raw_color) adobe_coeff (make, model);
   if (thumb_offset && !thumb_height) {
@@@@ -7782,8 +7785,8 @@@@ void CLASS convert_to_rgb()
       }
     for (i=0; i < phead[0]/4; i++)
       oprof[i] = htonl(oprof[i]);
-    strcpy ((char *)oprof+pbody[2]+8, "auto-generated by dcraw");
-    strcpy ((char *)oprof+pbody[5]+12, name[output_color-1]);
+    strlcpy ((char *)oprof+pbody[2]+8, "auto-generated by dcraw", sizeof oprof-pbody[2]-8);
+    strlcpy ((char *)oprof+pbody[5]+12, name[output_color-1], sizeof oprof-pbody[5]-12);
     for (i=0; i < 3; i++)
       for (j=0; j < colors; j++)
 	for (out_cam[i][j] = k=0; k < 3; k++)
@@@@ -8033,7 +8036,7 @@@@ void CLASS tiff_head (struct tiff_hdr *th, int full)
   strncpy (th->model, model, 64);
   strcpy (th->soft, "dcraw v"VERSION);
   t = gmtime (&timestamp);
-  sprintf (th->date, "%04d:%02d:%02d %02d:%02d:%02d",
+  snprintf (th->date, sizeof th->date, "%04d:%02d:%02d %02d:%02d:%02d",
       t->tm_year+1900,t->tm_mon+1,t->tm_mday,t->tm_hour,t->tm_min,t->tm_sec);
   strncpy (th->artist, artist, 64);
 }
@@@@ -8111,6 +8114,7 @@@@ int CLASS main (int argc, char **argv)
   char opm, opt, *ofname, *sp, *cp, *bpfile=0, *dark_frame=0;
   const char *write_ext;
   struct utimbuf ut;
+  size_t ofsize;
   FILE *ofp;
 #ifndef NO_LCMS
   char *cam_profile=0, *out_profile=0;
@@@@ -8432,19 +8436,20 @@@@ thumbnail:
       write_ext = ".tiff";
     else
       write_ext = ".pgm\0.ppm\0.ppm\0.pam" + colors*5-5;
-    ofname = (char *) malloc (strlen(ifname) + 64);
+    ofsize = strlen(ifname) + 64;
+    ofname = (char *) malloc (ofsize);
     merror (ofname, "main()");
     if (write_to_stdout)
       strcpy (ofname,_("standard output"));
     else {
-      strcpy (ofname, ifname);
+      strlcpy (ofname, ifname, ofsize);
       if ((cp = strrchr (ofname, '.'))) *cp = 0;
       if (multi_out)
-	sprintf (ofname+strlen(ofname), "_%0*d",
+	snprintf (ofname+strlen(ofname), ofsize-strlen(ofname), "_%0*d",
 		snprintf(0,0,"%d",is_raw-1), shot_select);
       if (thumbnail_only)
-	strcat (ofname, ".thumb");
-      strcat (ofname, write_ext);
+	strlcat (ofname, ".thumb", ofsize);
+      strlcat (ofname, write_ext, ofsize);
       ofp = fopen (ofname, "wb");
       if (!ofp) {
 	status = 1;
@


1.7
log
@update to 8.86:

- don't crash on corrupt CR2 files
- extract largest JPEG from X3F files
- new DNG matrices
- support new cameras from Canon, Fuji, Hasselblad, Nikon, Nokia,
Olympus, Panasonic, Pentax, Sony

from brad, "go for it" okan
@
text
@@


1.6
log
@update dcraw to 8.81, supporting newer cameras.
ok okan (and also for a previous 8.80 update which I slacked on)
@
text
@d1 3
a3 3
--- dcraw.c.orig	Mon Dec 10 07:43:31 2007
+++ dcraw.c	Mon Feb  4 00:14:31 2008
@@@@ -1250,8 +1250,8 @@@@ void CLASS nikon_3700()
d14 1
a14 1
@@@@ -3007,7 +3007,7 @@@@ void CLASS foveon_interpolate()
d23 2
a24 2
@@@@ -3371,9 +3371,9 @@@@ void CLASS bad_pixels()
     if (*cp == '\\') *cp = '/';
d26 10
a35 10
   cp = fname + strlen(fname);
-  if (cp[-1] == '/') cp--;
+  if (cp[-1] == '/') cp--, *cp = '\0';
   while (*fname == '/') {
-    strcpy (cp, "/.badpixels");
+    strlcat (fname, "/.badpixels", len);
     if ((fp = fopen (fname, "r"))) break;
     if (cp == fname) break;
     while (*--cp != '/');
@@@@ -4746,7 +4746,7 @@@@ void CLASS parse_mos (int offset)
d44 1
a44 1
@@@@ -5073,7 +5073,7 @@@@ int CLASS parse_tiff_ifd (int base)
d53 1
a53 1
@@@@ -5376,6 +5376,7 @@@@ void CLASS parse_external_jpeg()
d61 1
a61 1
@@@@ -5383,13 +5384,15 @@@@ void CLASS parse_external_jpeg()
d80 1
a80 1
@@@@ -5606,7 +5609,7 @@@@ void CLASS parse_sinar_ia()
d89 1
a89 1
@@@@ -5784,7 +5787,7 @@@@ void CLASS parse_smal (int offset, int fsize)
d98 1
a98 1
@@@@ -5812,7 +5815,7 @@@@ void CLASS parse_cine()
d107 1
a107 1
@@@@ -5910,11 +5913,11 @@@@ void CLASS parse_foveon()
d122 1
a122 1
@@@@ -6305,7 +6308,7 @@@@ void CLASS adobe_coeff (char *make, char *model)
d130 2
a131 2
       if (table[i].black)
@@@@ -6527,8 +6530,8 @@@@ void CLASS identify()
d142 1
a142 1
@@@@ -6537,7 +6540,7 @@@@ void CLASS identify()
d151 3
a153 3
@@@@ -6894,7 +6897,7 @@@@ cp_e2500:
     maximum = 0x3e00;
   } else if (!strncmp(model,"FinePix",7)) {
d160 1
a160 1
@@@@ -6937,7 +6940,7 @@@@ cp_e2500:
d168 2
a169 2
       maximum = 0xffb;
@@@@ -7502,7 +7505,7 @@@@ qt_common:
d178 1
a178 1
@@@@ -7666,8 +7669,8 @@@@ void CLASS convert_to_rgb()
d189 1
a189 1
@@@@ -7897,7 +7900,7 @@@@ void CLASS tiff_head (struct tiff_hdr *th, int full)
d198 2
a199 2
@@@@ -7974,6 +7977,7 @@@@ int CLASS main (int argc, char **argv)
   char opm, opt, *ofname, *sp, *cp, *dark_frame=0;
d206 1
a206 1
@@@@ -8291,19 +8295,20 @@@@ thumbnail:
@


1.5
log
@Update dcraw; ok sturm, rohee
@
text
@d1 12
a12 5
--- dcraw.c.orig	Thu May 25 21:08:17 2006
+++ dcraw.c	Thu May 25 21:09:19 2006
@@@@ -2482,7 +2482,7 @@@@
     for (j=0; j < 3; j++)
       FORC3 last[i][j] += correct[i][c] * cam_xyz[c][j];
d14 4
d22 2
a23 2
   else {
@@@@ -2853,9 +2853,9 @@@@
d35 6
a40 15
@@@@ -3902,7 +3902,7 @@@@
   while (1) {
     fread (data, 1, 8, ifp);
     if (strcmp(data,"PKTS")) break;
-    if (!make[0]) strcpy(make,"Leaf");
+    if (!make[0]) strlcpy (make, "Leaf", sizeof make);
     fread (data, 1, 40, ifp);
     skip = get4();
     from = ftell(ifp);
@@@@ -3918,7 +3918,7 @@@@
       fread (data, 1, 40, ifp);
       for (i=0; i < sizeof mod / sizeof *mod; i++)
 	if (data[0] == mod[i][0] && data[1] == toupper(mod[i][1]))
-	  sprintf (model, "%s %d", mod[i], atoi(data+2));
+	  snprintf (model, sizeof model, "%s %d", mod[i], atoi(data+2));
d42 1
a42 1
     if (!strcmp(data,"CaptProf_color_matrix") && use_camera_wb) {
d44 3
a46 1
@@@@ -4053,7 +4053,7 @@@@
d48 6
a53 17
 	break;
       case 400:
-	strcpy (make, "Sarnoff");
+	strlcpy (make, "Sarnoff", sizeof make);
 	maximum = 0xfff;
 	break;
       case 29184: sony_offset = get4();  break;
@@@@ -4110,7 +4110,7 @@@@
 	}
 	break;
       case 46275:			/* Imacon tags */
-	strcpy (make, "Imacon");
+	strlcpy (make, "Imacon", sizeof make);
 	data_offset = ftell(ifp);
 	ima_len = len;
 	break;
@@@@ -4389,6 +4389,7 @@@@
d61 1
a61 1
@@@@ -4396,13 +4397,15 @@@@
d80 7
a86 27
@@@@ -4585,8 +4588,8 @@@@
   t.tm_mon -= 1;
   if (mktime(&t) > 0)
     timestamp = mktime(&t);
-  strcpy (make, "Rollei");
-  strcpy (model,"d530flex");
+  strlcpy (make, "Rollei", sizeof make);
+  strlcpy (model,"d530flex", sizeof model);
   write_thumb = rollei_thumb;
 }
 
@@@@ -4647,13 +4650,13 @@@@
   load_raw = ph1.format < 3 ?
 	phase_one_load_raw : phase_one_load_raw_c;
   maximum = 0xffff;
-  strcpy (make, "Phase One");
+  strlcpy (make, "Phase One", sizeof make);
   if (model[0]) return;
   switch (raw_height) {
-    case 2060: strcpy (model,"LightPhase");	break;
-    case 2682: strcpy (model,"H 10");		break;
-    case 4128: strcpy (model,"H 20");		break;
-    case 5488: strcpy (model,"H 25");		break;
+    case 2060: strlcpy (model,"LightPhase", sizeof model);	break;
+    case 2682: strlcpy (model,"H 10", sizeof model);		break;
+    case 4128: strlcpy (model,"H 20", sizeof model);		break;
+    case 5488: strlcpy (model,"H 25", sizeof model);		break;
d88 2
a89 4
 }
 
@@@@ -4756,8 +4759,8 @@@@
   if (ver > 6) data_offset = get4();
d92 1
a92 1
-  strcpy (make, "SMaL");
a93 1
+  strlcpy (make, "SMaL", sizeof make);
d95 2
a96 2
   if (ver == 6) load_raw = smal_v6_load_raw;
   if (ver == 9) load_raw = smal_v9_load_raw;
d98 10
a107 1
@@@@ -4833,11 +4836,11 @@@@
d122 1
a122 1
@@@@ -5118,7 +5121,7 @@@@
d131 1
a131 39
@@@@ -5278,14 +5281,14 @@@@
     order = 0x4949;
     fseek (ifp, 38, SEEK_SET);
     if (get4() == 2834 && get4() == 2834 && get4() == 0 && get4() == 4096) {
-      strcpy (model, "BMQ");
+      strlcpy (model, "BMQ", sizeof model);
       flip = 3;
       goto nucore;
     }
   } else if (!memcmp (head,"BR",2)) {
-    strcpy (model, "RAW");
+    strlcpy (model, "RAW", sizeof model);
 nucore:
-    strcpy (make, "Nucore");
+    strlcpy (make, "Nucore", sizeof make);
     order = 0x4949;
     fseek (ifp, 10, SEEK_SET);
     data_offset += get4();
@@@@ -5296,15 +5299,15 @@@@
       data_offset -= 0x1000;
     }
   } else if (!memcmp (head+25,"ARECOYK",7)) {
-    strcpy (make, "Contax");
-    strcpy (model,"N Digital");
+    strlcpy (make, "Contax", sizeof make);
+    strlcpy (model,"N Digital", sizeof model);
     fseek (ifp, 33, SEEK_SET);
     get_timestamp(1);
     fseek (ifp, 60, SEEK_SET);
     FORC4 cam_mul[c ^ (c >> 1)] = get4();
   } else if (!strcmp (head, "PXN")) {
-    strcpy (make, "Logitech");
-    strcpy (model,"Fotoman Pixtura");
+    strlcpy (make, "Logitech", sizeof make);
+    strlcpy (model,"Fotoman Pixtura", sizeof model);
   } else if (!memcmp (head,"FUJIFILM",8)) {
     fseek (ifp, 84, SEEK_SET);
     thumb_offset = get4();
@@@@ -5332,8 +5335,8 @@@@
d142 1
a142 1
@@@@ -5344,7 +5347,7 @@@@
d151 1
a151 55
@@@@ -5368,7 +5371,7 @@@@
     xmag = ymag = 1;
   }
   if (dng_version) {
-    strcat (model," DNG");
+    strlcat (model," DNG", sizeof model);
     if (filters == UINT_MAX) filters = 0;
     if (!filters)
       colors = tiff_samples;
@@@@ -5542,7 +5545,7 @@@@
     filters = 0xe1e1e1e1;
     load_raw = nikon_load_raw;
     if (!timestamp && nikon_e995())
-      strcpy (model, "E995");
+      strlcpy (model, "E995", sizeof model);
     if (strcmp(model,"E995")) {
       filters = 0xb4b4b4b4;
       simple_coeff(3);
@@@@ -5559,7 +5562,7 @@@@
     pre_mul[2] = 1.040;
   } else if (!strcmp(model,"E2500")) {
 cp_e2500:
-    strcpy (model, "E2500");
+    strlcpy (model, "E2500", sizeof model);
     height = 1204;
     width  = 1616;
     colors = 4;
@@@@ -5571,11 +5574,11 @@@@
     pre_mul[0] = 1.818;
     pre_mul[2] = 1.618;
     if ((i = nikon_3700()) == 2) {
-      strcpy (make, "OLYMPUS");
-      strcpy (model, "C740UZ");
+      strlcpy (make, "OLYMPUS", sizeof make);
+      strlcpy (model, "C740UZ", sizeof model);
     } else if (i == 0) {
-      strcpy (make, "PENTAX");
-      strcpy (model,"Optio 33WR");
+      strlcpy (make, "PENTAX", sizeof make);
+      strlcpy (model,"Optio 33WR", sizeof model);
       flip = 1;
       filters = 0x16161616;
       pre_mul[0] = 1.331;
@@@@ -5586,8 +5589,8 @@@@
     width  = 2288;
     filters = 0x16161616;
     if (!timestamp && minolta_z2()) {
-      strcpy (make, "Minolta");
-      strcpy (model,"DiMAGE Z2");
+      strlcpy (make, "Minolta", sizeof make);
+      strlcpy (model,"DiMAGE Z2", sizeof model);
     }
     if (make[0] == 'M')
       load_raw = nikon_e2100_load_raw;
@@@@ -5610,7 +5613,7 @@@@
d156 1
a156 1
+      strlcpy (model + 7, " S2Pro", sizeof model - 7);
d160 1
a160 1
@@@@ -5658,7 +5661,7 @@@@
d164 4
a167 3
-      sprintf (model, "DYNAX %s", model+6 + (model[0]=='M'));
+      snprintf (model, sizeof model, "DYNAX %s", model+6 + (model[0]=='M'));
       load_raw = packed_12_load_raw;
d169 2
a170 67
     } else if (!strncmp(model,"DiMAGE G",8)) {
@@@@ -5782,11 +5785,11 @@@@
       height -= 16;
       width  -= 28;
       maximum = 0xf5c0;
-      strcpy (make, "ISG");
+      strlcpy (make, "ISG", sizeof make);
       model[0] = 0;
     }
   } else if (!strcmp(make,"Imacon")) {
-    sprintf (model, "Ixpress %d-Mp", height*width/1000000);
+    snprintf (model, sizeof model, "Ixpress %d-Mp", height*width/1000000);
     load_raw = imacon_full_load_raw;
     if (filters) {
       data_offset += (top_margin*raw_width + left_margin) * 2;
@@@@ -5809,7 +5812,7 @@@@
       load_raw = lossless_jpeg_load_raw;
     maximum = 0x3fff;
     if (filters == 0) {
-      strcpy (model, "Volare");
+      strlcpy (model, "Volare", sizeof model);
       load_raw = leaf_full_load_raw;
       maximum = 0xffff;
       raw_color = 0;
@@@@ -5871,7 +5874,7 @@@@
     load_raw = sony_load_raw;
     filters = 0x9c9c9c9c;
     colors = 4;
-    strcpy (cdesc, "RGBE");
+    strlcpy (cdesc, "RGBE", sizeof cdesc);
   } else if (!strcmp(model,"DSC-V3")) {
     width = 3109;
     left_margin = 59;
@@@@ -5916,7 +5919,7 @@@@
     if (load_raw == eight_bit_load_raw)
 	load_raw = kodak_easy_load_raw;
     if (strstr(model,"DC25")) {
-      strcpy (model, "DC25");
+      strlcpy (model, "DC25", sizeof model);
       data_offset = 15424;
     }
     if (!strncmp(model,"DC2",3)) {
@@@@ -5935,19 +5938,19 @@@@
       pre_mul[3] = 1.036;
       load_raw = kodak_easy_load_raw;
     } else if (!strcmp(model,"Digital Camera 40")) {
-      strcpy (model, "DC40");
+      strlcpy (model, "DC40", sizeof model);
       height = 512;
       width  = 768;
       data_offset = 1152;
       load_raw = kodak_radc_load_raw;
     } else if (strstr(model,"DC50")) {
-      strcpy (model, "DC50");
+      strlcpy (model, "DC50", sizeof model);
       height = 512;
       width  = 768;
       data_offset = 19712;
       load_raw = kodak_radc_load_raw;
     } else if (strstr(model,"DC120")) {
-      strcpy (model, "DC120");
+      strlcpy (model, "DC120", sizeof model);
       height = 976;
       width  = 848;
       load_raw = (tiff_compress == 7)
@@@@ -6063,7 +6066,7 @@@@
     }
d178 22
a199 10
@@@@ -6084,7 +6087,7 @@@@
   if (flip == -1) flip = tiff_flip;
   if (flip == -1) flip = 0;
   if (!cdesc[0])
-    strcpy (cdesc, colors == 3 ? "RGB":"GMCY");
+    strlcpy (cdesc, colors == 3 ? "RGB":"GMCY", sizeof cdesc);
   if (!raw_height) raw_height = height;
   if (!raw_width ) raw_width  = width;
   if (filters && colors == 3)
@@@@ -6374,6 +6377,7 @@@@
a201 1
   FILE *ofp = stdout;
d203 1
a203 1
   void (*write_image)(FILE *) = write_ppm;
d205 3
a207 3
   char *cam_profile = NULL, *out_profile = NULL;
@@@@ -6649,16 +6653,17 @@@@
       write_ext = ".psd";
d210 2
a211 2
-    ofname = (char *) malloc (strlen(ifname) + 16);
+    ofsize = strlen(ifname) + 16;
d215 1
a215 2
-      strcpy (ofname, "standard output");
+      strlcpy (ofname, "standard output", ofsize);
d220 4
d227 1
a227 1
+        strlcat (ofname, ".thumb", ofsize);
@


1.4
log
@Update to 7.65

From rohee@@
@
text
@d1 3
a3 3
--- dcraw.c.orig	Thu Sep 15 00:17:59 2005
+++ dcraw.c	Thu Sep 15 00:18:35 2005
@@@@ -2228,7 +2228,7 @@@@ void CLASS foveon_interpolate()
d12 1
a12 1
@@@@ -2598,9 +2598,9 @@@@ void CLASS bad_pixels()
d24 19
a42 7
@@@@ -3530,7 +3530,7 @@@@ int CLASS parse_tiff_ifd (int base, int 
 	if (level) {
 	  data_offset = ftell(ifp);
 	} else {
-	  strcpy (make, "Leaf");
+	  strlcpy (make, "Leaf", sizeof make);
 	  data_offset = get4();
d45 8
a52 2
@@@@ -3565,7 +3565,7 @@@@ int CLASS parse_tiff_ifd (int base, int 
 	parse_exif (base);
d54 1
a54 1
       case 46275:
d58 3
a60 3
 	raw_width = 4090;
 	raw_height = len / raw_width / 2;
@@@@ -3716,6 +3716,7 @@@@ void CLASS parse_external_jpeg()
d68 1
a68 1
@@@@ -3723,13 +3724,15 @@@@ void CLASS parse_external_jpeg()
d71 2
a72 2
   if (strlen(ext) != 4 || ext-file != 8) return;
-  jname = malloc (strlen(ifname) + 1);
d74 1
a74 1
+  jname = malloc (ifsize);
d87 4
a90 4
@@@@ -3932,8 +3935,8 @@@@ void CLASS parse_rollei()
   if ((ts = mktime(&t)) > 0)
     timestamp = ts;
   data_offset += tx * ty * 2;
d95 1
d98 4
a101 5
 void CLASS parse_mos (int offset)
@@@@ -4019,14 +4022,14 @@@@ void CLASS parse_phase_one (int base)
   }
   load_raw = tiff_data_compression < 3 ?
 	phase_one_load_raw:phase_one_load_raw_c;
a104 2
-  sprintf (model, "%dx%d", width, height);
+  snprintf (model, sizeof model,  "%dx%d", width, height);
d117 1
a117 1
@@@@ -4081,8 +4084,8 @@@@ void CLASS parse_smal (int offset, int f
d128 16
a143 1
@@@@ -4372,7 +4375,7 @@@@ void CLASS adobe_coeff()
d151 2
a152 2
       for (j=0; j < 12; j++)
@@@@ -4525,14 +4528,14 @@@@ int CLASS identify (int will_decode)
d155 1
a155 1
     if (get4() == 2834 && get4() == 2834) {
d161 1
a161 1
   } else if (!memcmp (head, "BR", 2)) {
d170 1
a170 1
@@@@ -4544,15 +4547,15 @@@@ nucore:
d173 1
a173 1
   } else if (!memcmp (head+25, "ARECOYK", 7)) {
d187 4
a190 4
   } else if (!memcmp (head, "FUJIFILM", 8)) {
     fseek (ifp, 92, SEEK_SET);
     parse_fuji (get4());
@@@@ -4570,8 +4573,8 @@@@ nucore:
d201 1
a201 1
@@@@ -4582,7 +4585,7 @@@@ nucore:
d210 1
a210 1
@@@@ -4608,7 +4611,7 @@@@ nucore:
d219 10
a228 10
@@@@ -4793,7 +4796,7 @@@@ canon_cr2:
     pre_mul[2] = 1.018;
   } else if (!strcmp(model,"E995")) {
 cp_e995:
-    strcpy (model, "E995");
+    strlcpy (model, "E995", sizeof model);
     height = 1540;
     width  = 2064;
     colors = 4;
@@@@ -4807,7 +4810,7 @@@@ cp_e995:
d237 1
a237 1
@@@@ -4819,11 +4822,11 @@@@ cp_e2500:
d253 1
a253 9
@@@@ -4839,8 +4842,8 @@@@ cp_e2500:
     pre_mul[2] = 322;
   } else if (!strcmp(model,"DiMAGE Z2")) {
 dimage_z2:
-    strcpy (make, "MINOLTA");
-    strcpy (model,"DiMAGE Z2");
+    strlcpy (make, "MINOLTA", sizeof make);
+    strlcpy (model,"DiMAGE Z2", sizeof model);
     height = 1710;
d256 18
a273 10
@@@@ -4866,7 +4869,7 @@@@ dimage_z2:
     filters = 0x61616161;
     load_raw = fuji_s2_load_raw;
     black = 128;
-    strcpy (model+7, " S2Pro");
+    strlcpy (model+7, " S2Pro", sizeof model -7);
   } else if (!strcmp(model,"FinePix S3Pro")) {
     height = 3583;
     width  = 3584;
@@@@ -4938,7 +4941,7 @@@@ dimage_z2:
d277 2
a278 2
-      sprintf (model, "DYNAX%s", strchr (model,' '));
+      snprintf (model, sizeof model, "DYNAX%s", strchr (model,' '));
d282 1
a282 1
@@@@ -5051,15 +5054,15 @@@@ konica_400z:
a286 1
-      sprintf (model, "%dx%d", width, height);
d288 1
a288 1
+      snprintf (model, sizeof model, "%dx%d", width, height);
a290 4
     height = raw_height - 6;
     width  = raw_width - 10;
     data_offset += 6 + raw_width*12;
     flip = height > width+10 ? 5:3;
d293 4
a296 5
     filters = 0x61616161;
     load_raw = unpacked_load_raw;
     maximum = 0xffff;
@@@@ -5078,11 +5081,11 @@@@ konica_400z:
     if (tiff_data_compression == 99)
a298 2
-    strcpy (model, "Valeo");
+    strlcpy (model, "Valeo", sizeof model);
a299 2
       load_raw = leaf_load_raw;
       maximum = 0xffff;
d302 15
a316 6
     }
   } else if (!strcmp(make,"LEICA") || !strcmp(make,"Panasonic")) {
     if (width == 3304) width -= 16;
@@@@ -5219,7 +5222,7 @@@@ konica_400z:
 	return 1;
     }
d323 1
a323 1
@@@@ -5238,19 +5241,19 @@@@ konica_400z:
d345 21
a365 2
       if (tiff_data_compression == 7)
@@@@ -5672,6 +5675,7 @@@@ int CLASS main (int argc, char **argv)
a366 1
   const char *write_ext = ".ppm";
d369 8
a376 8
 #ifdef USE_LCMS
   char *profile = NULL;
 #endif
@@@@ -5844,14 +5848,15 @@@@ next:
     convert_to_rgb();
     if (flip) flip_image();
     fclose(ifp);
-    ofname = malloc (strlen(ifname) + 16);
d378 1
a378 1
+    ofname = malloc (ofsize);
d387 2
d390 1
@


1.3
log
@update to dcraw 7.30 and support even more cameras

from maintainer rohee@@
@
text
@d1 3
a3 7
$OpenBSD: patch-dcraw_c,v 1.2 2005/05/03 17:47:59 sturm Exp $

Remove instances of sprintf(3), strcat(3) and strcpy(3). 

--- dcraw.c.orig	Sat Jun 18 00:00:12 2005
+++ dcraw.c	Sat Jun 18 00:01:06 2005
@@@@ -1958,7 +1958,7 @@@@ void CLASS foveon_interpolate()
d12 1
a12 1
@@@@ -2323,9 +2323,9 @@@@ void CLASS bad_pixels()
d24 1
a24 1
@@@@ -3065,7 +3065,7 @@@@ int CLASS parse_tiff_ifd (int base, int 
d33 10
a42 10
@@@@ -3181,7 +3181,7 @@@@ guess_cfa_pc:
        raw_height++;
 
   if (make[0] == 0 && raw_width == 680)
-    strcpy (make, "Imacon");
+    strlcpy (make, "Imacon", sizeof make);
 
   return done;
 }
@@@@ -3243,6 +3243,7 @@@@ void CLASS parse_external_jpeg()
d50 1
a50 1
@@@@ -3250,13 +3251,15 @@@@ void CLASS parse_external_jpeg()
d69 1
a69 1
@@@@ -3459,8 +3462,8 @@@@ void CLASS parse_rollei()
d80 1
a80 3
@@@@ -3544,14 +3547,14 @@@@ void CLASS parse_phase_one (int base)
     }
     fseek (ifp, save, SEEK_SET);
d82 2
d88 1
a88 1
+  snprintf (model, sizeof model, "%dx%d", width, height);
d101 4
a104 13
@@@@ -3590,7 +3593,7 @@@@ void CLASS parse_jpeg (int offset)
     parse_tiff (save+6);
     fseek (ifp, save+len, SEEK_SET);
   }
-  strcat (model," JPEG");
+  strlcat (model," JPEG", sizeof model);
 }
 
 void CLASS parse_smal (int offset, int fsize)
@@@@ -3613,8 +3616,8 @@@@ void CLASS parse_smal (int offset, int f
     height = get2();
     width  = get2();
   }
d109 2
d112 1
a112 3
 
 char * CLASS foveon_gets (int offset, char *str, int len)
@@@@ -3886,7 +3889,7 @@@@ void CLASS adobe_coeff()
d121 1
a121 1
@@@@ -4010,14 +4013,14 @@@@ int CLASS identify (int will_decode)
d139 1
a139 1
@@@@ -4029,15 +4032,15 @@@@ nucore:
d159 1
a159 1
@@@@ -4055,8 +4058,8 @@@@ nucore:
d170 1
a170 1
@@@@ -4067,7 +4070,7 @@@@ nucore:
d176 1
a176 1
   if (!strncmp (make, "KODAK", 5))
d179 2
a180 1
@@@@ -4098,7 +4101,7 @@@@ nucore:
d182 1
a182 2
   load_raw = NULL;
   if (is_dng) {
d188 1
a188 1
@@@@ -4281,7 +4284,7 @@@@ canon_cr2:
d197 1
a197 1
@@@@ -4295,7 +4298,7 @@@@ cp_e995:
d206 2
a207 1
@@@@ -4309,8 +4312,8 @@@@ cp_e2500:
d209 14
a222 10
   } else if (!strcmp(model,"Optio 33WR")) {
 optio_33wr:
-    strcpy (make, "PENTAX");
-    strcpy (model,"Optio 33WR");
+    strlcpy (make, "PENTAX", sizeof make);
+    strlcpy (model, "Optio 33WR", sizeof model);
     height = 1542;
     width  = 2064;
     load_raw = nikon_e2100_load_raw;
@@@@ -4328,8 +4331,8 @@@@ optio_33wr:
d233 1
a233 1
@@@@ -4355,7 +4358,7 @@@@ dimage_z2:
d242 17
a258 3
@@@@ -4516,7 +4519,7 @@@@ konica_400z:
       data_offset -= 10;
       flip = 3;
d260 5
d270 3
a272 3
@@@@ -4533,11 +4536,11 @@@@ konica_400z:
   } else if (!strcmp(make,"Leaf")) {
     load_raw = unpacked_load_raw;
d282 3
a284 3
   } else if (!strcmp(model,"DIGILUX 2") || !strcmp(model,"DMC-LC1")) {
     height = 1928;
@@@@ -4662,7 +4665,7 @@@@ konica_400z:
d293 1
a293 1
@@@@ -4681,19 +4684,19 @@@@ konica_400z:
d316 1
a316 1
@@@@ -5112,6 +5115,7 @@@@ int CLASS main (int argc, char **argv)
d324 3
a326 3
@@@@ -5294,14 +5298,15 @@@@ next:
       flip_image();
     }
@


1.2
log
@udate to dcraw 7.17, adding support for Nikon D2x NEF files

from maintainer rohee@@
@
text
@d1 1
a1 1
$OpenBSD: patch-dcraw_c,v 1.1.1.1 2005/04/07 21:36:31 sturm Exp $
d5 3
a7 3
--- dcraw.c.orig	Tue May  3 01:07:46 2005
+++ dcraw.c	Tue May  3 01:10:33 2005
@@@@ -1825,7 +1825,7 @@@@ void CLASS foveon_interpolate()
d16 1
a16 1
@@@@ -2190,9 +2190,9 @@@@ void CLASS bad_pixels()
d28 1
a28 1
@@@@ -2826,7 +2826,7 @@@@ int CLASS parse_tiff_ifd (int base, int 
d37 1
a37 1
@@@@ -2938,7 +2938,7 @@@@ guess_cfa_pc:
d46 1
a46 1
@@@@ -3000,6 +3000,7 @@@@ void CLASS parse_external_jpeg()
d54 1
a54 1
@@@@ -3007,13 +3008,15 @@@@ void CLASS parse_external_jpeg()
d73 1
a73 1
@@@@ -3215,8 +3218,8 @@@@ void CLASS parse_rollei()
d84 1
a84 2
@@@@ -3273,7 +3276,7 @@@@ void parse_phase_one (int base)
 	nikon_curve_offset = ftell(ifp) - 4;
d86 1
d90 32
d124 5
a128 5
 void parse_fuji (int offset)
@@@@ -3561,7 +3564,7 @@@@ void CLASS adobe_coeff()
   for (i=0; i < 4; i++)
     for (j=0; j < 4; j++)
       cc[i][j] = i == j;
d134 1
a134 1
@@@@ -3685,14 +3688,14 @@@@ int CLASS identify()
d152 1
a152 1
@@@@ -3704,13 +3707,13 @@@@ nucore:
d160 2
d172 1
a172 1
@@@@ -3726,8 +3729,8 @@@@ nucore:
d183 1
a183 1
@@@@ -3736,7 +3739,7 @@@@ nucore:
d192 1
a192 1
@@@@ -3767,7 +3770,7 @@@@ nucore:
d196 3
a198 2
-    strcat (model, " DNG");
+    strlcat (model, " DNG", sizeof model);
d201 1
a201 2
     if (tiff_data_compression == 1)
@@@@ -3949,7 +3952,7 @@@@ canon_cr2:
d210 1
a210 1
@@@@ -3963,7 +3966,7 @@@@ cp_e995:
d219 1
a219 1
@@@@ -3977,8 +3980,8 @@@@ cp_e2500:
d230 1
a230 1
@@@@ -3996,8 +3999,8 @@@@ optio_33wr:
d241 1
a241 1
@@@@ -4025,7 +4028,7 @@@@ dimage_z2:
d250 1
a250 26
@@@@ -4168,20 +4171,20 @@@@ konica_400z:
   } else if (!strcmp(make,"Phase One")) {
     switch (raw_height) {
       case 2060:
-	strcpy (model, "LightPhase");
+	strlcpy (model, "LightPhase", sizeof model);
 	pre_mul[0] = 1.331;
 	pre_mul[2] = 1.154;
 	break;
       case 2682:
-	strcpy (model, "H10");
+	strlcpy (model, "H10", sizeof model);
 	break;
       case 4128:
-	strcpy (model, "H20");
+	strlcpy (model, "H20", sizeof model);
 	pre_mul[0] = 1.963;
 	pre_mul[2] = 1.430;
 	break;
       case 5488:
-	strcpy (model, "H25");
+	strlcpy (model, "H25", sizeof model);
 	pre_mul[0] = 2.80;
 	pre_mul[2] = 1.20;
     }
@@@@ -4199,7 +4202,7 @@@@ konica_400z:
d259 2
a260 2
@@@@ -4218,12 +4221,12 @@@@ konica_400z:
       filters = 0x16161616;
d265 1
a265 2
     if (raw_width == 2060) {
       filters = 0;
d273 1
a273 1
@@@@ -4348,7 +4351,7 @@@@ konica_400z:
d282 1
a282 1
@@@@ -4367,19 +4370,19 @@@@ konica_400z:
d305 2
a306 2
@@@@ -4794,6 +4797,7 @@@@ int CLASS main (int argc, char **argv)
   char opt, *ofname, *cp;
d313 1
a313 1
@@@@ -4961,14 +4965,15 @@@@ int CLASS main (int argc, char **argv)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- dcraw.c.orig	Wed Apr  6 23:51:58 2005
+++ dcraw.c	Wed Apr  6 23:54:16 2005
@@@@ -1826,7 +1826,7 @@@@ void CLASS foveon_interpolate()
d16 1
a16 1
@@@@ -2191,9 +2191,9 @@@@ void CLASS bad_pixels()
d28 1
a28 1
@@@@ -2774,7 +2774,7 @@@@ int CLASS parse_tiff_ifd (int base, int 
d37 1
a37 1
@@@@ -2886,7 +2886,7 @@@@ guess_cfa_pc:
d46 1
a46 1
@@@@ -2948,6 +2948,7 @@@@ void CLASS parse_external_jpeg()
d54 1
a54 1
@@@@ -2955,13 +2956,15 @@@@ void CLASS parse_external_jpeg()
d73 1
a73 1
@@@@ -3162,8 +3165,8 @@@@ void CLASS parse_rollei()
d84 10
a93 1
@@@@ -3480,7 +3483,7 @@@@ void CLASS adobe_coeff()
d102 1
a102 10
@@@@ -3578,7 +3581,7 @@@@ int CLASS identify()
   fseek (ifp, 0, SEEK_END);
   fsize = ftell(ifp);
   if ((cp = memmem (head, 32, "MMMMRawT", 8))) {
-    strcpy (make, "Phase One");
+    strlcpy (make, "Phase One", sizeof make);
     data_offset = cp - head;
     fseek (ifp, data_offset + 8, SEEK_SET);
     fseek (ifp, get4() + 136, SEEK_CUR);
@@@@ -3607,14 +3610,14 @@@@ int CLASS identify()
d120 1
a120 1
@@@@ -3626,13 +3629,13 @@@@ nucore:
d138 1
a138 1
@@@@ -3648,8 +3651,8 @@@@ nucore:
d149 1
a149 1
@@@@ -3658,7 +3661,7 @@@@ nucore:
d158 1
a158 1
@@@@ -3690,7 +3693,7 @@@@ nucore:
d167 1
a167 1
@@@@ -3871,7 +3874,7 @@@@ canon_cr2:
d176 1
a176 1
@@@@ -3885,7 +3888,7 @@@@ cp_e995:
d185 1
a185 1
@@@@ -3899,8 +3902,8 @@@@ cp_e2500:
d196 1
a196 1
@@@@ -3918,8 +3921,8 @@@@ optio_33wr:
d207 1
a207 1
@@@@ -3947,7 +3950,7 @@@@ dimage_z2:
d216 1
a216 1
@@@@ -4090,7 +4093,7 @@@@ konica_400z:
d222 1
a222 4
 	height = 2048;
 	width  = 3080;
 	top_margin  = 5;
@@@@ -4099,14 +4102,14 @@@@ konica_400z:
a227 4
 	height = 2672;
 	width  = 4012;
 	top_margin  = 5;
 	left_margin = 26;
d232 1
a232 4
 	height = 4098;
 	width  = 4098;
 	top_margin  = 20;
@@@@ -4115,7 +4118,7 @@@@ konica_400z:
d238 4
a241 4
 	height = 5458;
 	width  = 4098;
 	top_margin  = 20;
@@@@ -4138,7 +4141,7 @@@@ konica_400z:
d250 1
a250 1
@@@@ -4157,12 +4160,12 @@@@ konica_400z:
d265 1
a265 1
@@@@ -4287,7 +4290,7 @@@@ konica_400z:
d274 1
a274 1
@@@@ -4306,19 +4309,19 @@@@ konica_400z:
d297 1
a297 1
@@@@ -4726,6 +4729,7 @@@@ int CLASS main (int argc, char **argv)
d305 1
a305 1
@@@@ -4891,14 +4895,15 @@@@ int CLASS main (int argc, char **argv)
@


1.1.1.1
log
@Initial import of dcraw 7.12

dcraw permits converting most digital cameras RAW format file to JPEG
in a better way than the in-camera function.

from rohee@@
@
text
@@
