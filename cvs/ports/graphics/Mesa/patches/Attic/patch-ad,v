head	1.2;
access;
symbols
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	brad_1999-06-20:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.07.26.23.54.37;	author brad;	state dead;
branches;
next	1.1;

1.1
date	99.06.20.23.33.11;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.06.20.23.33.11;	author brad;	state Exp;
branches
	1.1.1.1.4.1;
next	;

1.1.1.1.4.1
date	2000.09.15.04.53.02;	author marc;	state dead;
branches;
next	;


desc
@@


1.2
log
@upgrade to Mesa 3.2.1
@
text
@--- src/copypix.c.orig	Mon Mar  8 22:33:30 1999
+++ src/copypix.c	Mon Mar  8 22:35:18 1999
@@@@ -71,9 +74,10 @@@@
 
 
 
-static void copy_rgb_pixels( GLcontext* ctx,
-                             GLint srcx, GLint srcy, GLint width, GLint height,
-                             GLint destx, GLint desty )
+static void copy_rgba_pixels( GLcontext* ctx,
+                              GLint srcx, GLint srcy,
+                              GLint width, GLint height,
+                              GLint destx, GLint desty )
 {
    GLdepth zspan[MAX_WIDTH];
    GLubyte rgba[MAX_WIDTH][4];
@@@@ -81,6 +85,7 @@@@
    GLint sy, dy, stepy;
    GLint i, j;
    GLboolean setbuffer;
+   GLubyte *saveAlpha;
    const GLboolean zoom = ctx->Pixel.ZoomX!=1.0F || ctx->Pixel.ZoomY!=1.0F;
 
    /* Determine if copy should be done bottom-to-top or top-to-bottom */
@@@@ -114,36 +119,46 @@@@
    }
 
    /* If read and draw buffer are different we must do buffer switching */
-   setbuffer = ctx->Pixel.ReadBuffer!=ctx->Color.DrawBuffer;
-
+   saveAlpha = ctx->Buffer->Alpha;
+   setbuffer = ctx->Pixel.ReadBuffer != ctx->Color.DrawBuffer;
    for (j=0; j<height; j++, sy+=stepy, dy+=stepy) {
       if (setbuffer) {
          (*ctx->Driver.SetBuffer)( ctx, ctx->Pixel.ReadBuffer );
+         if (ctx->Pixel.ReadBuffer == GL_FRONT)
+            ctx->Buffer->Alpha = ctx->Buffer->FrontAlpha;
+         else
+            ctx->Buffer->Alpha = ctx->Buffer->BackAlpha;
       }
       gl_read_rgba_span( ctx, width, srcx, sy, rgba );
-
       if (ctx->Pixel.ScaleOrBiasRGBA) {
          gl_scale_and_bias_rgba( ctx, width, rgba );
       }
       if (ctx->Pixel.MapColorFlag) {
          gl_map_rgba( ctx, width, rgba );
       }
-
       if (setbuffer) {
          (*ctx->Driver.SetBuffer)( ctx, ctx->Color.DrawBuffer );
+         if (ctx->Color.DrawBuffer == GL_FRONT)
+            ctx->Buffer->Alpha = ctx->Buffer->FrontAlpha;
+         else
+            ctx->Buffer->Alpha = ctx->Buffer->BackAlpha;
       }
       if (quick_draw && dy>=0 && dy<ctx->Buffer->Height) {
          (*ctx->Driver.WriteRGBASpan)( ctx, width, destx, dy, rgba, NULL );
+
       }
       else if (zoom) {
          gl_write_zoomed_rgba_span( ctx, width, destx, dy, zspan, rgba, desty);
       }
       else {
-         gl_write_rgba_span( ctx, width, destx, dy, zspan, rgba, GL_BITMAP );
+         gl_write_rgba_span( ctx, width, destx, dy, zspan, rgba, GL_BITMAP 
+);
       }
    }
-}
 
+   /* Restore current alpha buffer pointer */
+   ctx->Buffer->Alpha = saveAlpha;
+}
 
 
 static void copy_ci_pixels( GLcontext* ctx,
@@@@ -368,7 +383,7 @@@@
       desty = (GLint) (ctx->Current.RasterPos[1] + 0.5F);
 
       if (type==GL_COLOR && ctx->Visual->RGBAflag) {
-         copy_rgb_pixels( ctx, srcx, srcy, width, height, destx, desty );
+         copy_rgba_pixels( ctx, srcx, srcy, width, height, destx, desty );
       }
       else if (type==GL_COLOR && !ctx->Visual->RGBAflag) {
          copy_ci_pixels( ctx, srcx, srcy, width, height, destx, desty );
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@moving the MesaGL port to just Mesa for legal reasons
@
text
@@


1.1.1.1.4.1
log
@bring graphics as of cut-over date into 2.7 branch
@
text
@@

