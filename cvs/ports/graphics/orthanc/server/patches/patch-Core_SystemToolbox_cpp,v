head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	jasper_20170908:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.08.09.17.02.35;	author jasper;	state Exp;
branches;
next	1.1;
commitid	9a1JGF84nf5pGT9S;

1.1
date	2017.08.09.14.39.32;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;
commitid	AeS6A9PHtb9YgujH;

1.1.1.1
date	2017.08.09.14.39.32;	author jasper;	state Exp;
branches;
next	;
commitid	AeS6A9PHtb9YgujH;


desc
@@


1.2
log
@- resolve XXX and implement GetPathToExecutableInternal
- sync Compiler.cmake with what's been submitted upstream
@
text
@$OpenBSD: patch-Core_SystemToolbox_cpp,v 1.1.1.1 2017/08/09 14:39:32 jasper Exp $

Implement GetPathToExecutableInternal()

Index: Core/SystemToolbox.cpp
--- Core/SystemToolbox.cpp.orig
+++ Core/SystemToolbox.cpp
@@@@ -55,12 +55,16 @@@@
 #endif
 
 
-#if defined(__linux__) || defined(__FreeBSD_kernel__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__FreeBSD_kernel__) || defined(__FreeBSD__) || \
+	defined(__OpenBSD__)
 #  include <limits.h>      /* PATH_MAX */
 #  include <signal.h>
 #  include <unistd.h>
 #endif
 
+#if defined(__OpenBSD__)
+#  include <sys/sysctl.h>
+#endif
 
 // Inclusions for UUID
 // http://stackoverflow.com/a/1626302
@@@@ -157,7 +161,8 @@@@ namespace Orthanc
   {
 #if defined(_WIN32)
     ::Sleep(static_cast<DWORD>(microSeconds / static_cast<uint64_t>(1000)));
-#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD_kernel__) || defined(__FreeBSD__) || defined(__native_client__)
+#elif defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD_kernel__) || \
+  defined(__FreeBSD__) || defined(__native_client__) || defined(__OpenBSD__)
     usleep(microSeconds);
 #else
 #error Support your platform here
@@@@ -370,6 +375,26 @@@@ namespace Orthanc
     return std::string(pathbuf);
   }
 
+#elif defined(__OpenBSD__)
+  static std::string GetPathToExecutableInternal()
+  {
+    size_t len;
+    char **args;
+    int mib[] = { CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ARGV };
+
+    if (sysctl(mib, 4, NULL, &len, NULL, 0) == -1) {
+      throw OrthancException(ErrorCode_PathToExecutable);
+    }
+
+    args = (char **)malloc(len);
+
+    if (sysctl(mib, 4, args, &len, NULL, 0) == -1) {
+      free(args);
+      throw OrthancException(ErrorCode_PathToExecutable);
+    }
+
+    return std::string(args[0]);
+  }
 #else
 #error Support your platform here
 #endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
XXX: GetPathToExecutableInternal()
d8 1
a8 1
@@@@ -55,7 +55,8 @@@@
d18 9
a26 1
@@@@ -157,7 +158,8 @@@@ namespace Orthanc
d36 1
a36 1
@@@@ -370,6 +372,11 @@@@ namespace Orthanc
d43 16
a58 1
+    return "/usr/local/sbin/Orthanc";
@


1.1.1.1
log
@import orthanc-1.3.0

Orthanc aims at providing a simple, yet powerful standalone DICOM
server. It is designed to improve the DICOM flows in hospitals and to
support research about the automated analysis of medical images. Orthanc
lets its users focus on the content of the DICOM files, hiding the
complexity of the DICOM format and of the DICOM protocol.

might need some polishing which can happen in-tree
feedback and ok zhuk@@
@
text
@@
