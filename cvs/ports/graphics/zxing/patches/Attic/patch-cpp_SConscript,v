head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.16
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	bentley_20120403:1.1.1.1
	bentley:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.11.06.15.45.17;	author sthen;	state dead;
branches;
next	1.2;
commitid	O9hsI47GWLos1rQn;

1.2
date	2012.04.27.19.55.53;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.04.03.38.45;	author bentley;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.04.03.38.45;	author bentley;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to newer version of ZXing (fork), gets rid of scons and imagemagick dep
@
text
@$OpenBSD: patch-cpp_SConscript,v 1.2 2012/04/27 19:55:53 naddy Exp $
--- cpp/SConscript.orig	Sat Jan 14 11:38:44 2012
+++ cpp/SConscript	Fri Apr 27 21:38:41 2012
@@@@ -5,9 +5,9 @@@@ import fnmatch
 import os
 
 vars = Variables()
-vars.Add(BoolVariable('DEBUG', 'Set to disable optimizations', 1))
+vars.Add(BoolVariable('DEBUG', 'Set to disable optimizations', 0))
 vars.Add(BoolVariable('PIC', 'Set to 1 for to always generate PIC code', 0))
-env = Environment(variables = vars)
+env = Environment(variables = vars, CXX = "${CXX}")
 # env.Replace(CXX = "clang++") 
 
 debug = env['DEBUG']
@@@@ -17,7 +17,7 @@@@ if debug:
 	#compile_options['CPPDEFINES'] = "-DDEBUG"
 	flags.append("-O0 -g3 -ggdb -Wall")
 else:
-	flags.append("-Os -g3 -Wall")
+	flags.append("${CXXFLAGS} -Wall")
 if env['PIC']:
 	flags.append("-fPIC")
 
@@@@ -26,7 +26,7 @@@@ flags.append("-Wextra -Werror")
 # flags.append("-pedantic")
 
 compile_options['CXXFLAGS'] = ' '.join(flags)
-compile_options['LINKFLAGS'] = "-ldl -L/usr/lib -L/opt/local/lib"
+compile_options['LINKFLAGS'] = '-L/usr/lib -L/opt/local/lib -L${LOCALBASE}/lib -L${X11BASE}/lib -pthread'
 
 def all_files(dir, ext='.cpp', level=6):
 	files = []
@@@@ -36,8 +36,8 @@@@ def all_files(dir, ext='.cpp', level=6):
 
 
 
-magick_include = ['/usr/include/ImageMagick/', '/opt/local/include/ImageMagick/']
-magick_libs = ['Magick++', 'MagickWand', 'MagickCore']
+magick_include = ['${LOCALBASE}/include', '${LOCALBASE}/include/ImageMagick/']
+magick_libs = ['Magick++', 'MagickWand', 'MagickCore', 'iconv']
 
 # check for existence of libiconv and add it to magick_libs if possible
 matches = []
@@@@ -53,7 +53,7 @@@@ cppunit_libs = ['cppunit']
 
 zxing_files = all_files('core/src')
 
-zxing_include = ['core/src']
+zxing_include = ['${LOCALBASE}/include', 'core/src']
 zxing_libs = env.Library('zxing', source=zxing_files, CPPPATH=zxing_include, **compile_options)
 
 app_files = ['magick/src/MagickBitmapSource.cpp', 'magick/src/main.cpp']
@


1.2
log
@* honor CXX/CXXFLAGS
* explicitly link with libiconv (ImageMagick pulls it in, but
ImageMagick-no_x11 doesn't)
@
text
@d1 1
a1 1
$OpenBSD: patch-cpp_SConscript,v 1.1.1.1 2012/04/04 03:38:45 bentley Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 20
a22 2
+++ cpp/SConscript	Sun Feb 26 16:42:32 2012
@@@@ -22,11 +22,12 @@@@ if env['PIC']:
d25 1
a25 3
 flags.append("-Wextra -Werror")
+flags.append("-I${LOCALBASE}/include -I${LOCALBASE}/include/ImageMagick")
 # Can't enable unless we get rid of the dynamic variable length arrays
d34 20
@


1.1.1.1
log
@Import zxing-2.0.

ZXing (pronounced "zebra crossing") is an open-source, multi-format
1D/2D barcode image processing library. It currently supports these
formats:

 - UPC-A and UPC-E
 - EAN-8 and EAN-13
 - Data Matrix
 - Code 39
 - Code 93
 - Code 128
 - ITF
 - Codabar
 - RSS-14 (all variants)
 - QR Code
 - Data Matrix
 - Aztec
 - PDF 417

ok landry@@
@
text
@@
