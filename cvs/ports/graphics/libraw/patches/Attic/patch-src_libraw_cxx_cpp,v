head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	phessler_20100723:1.1.1.1
	phessler:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.03.18.11.37.53;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2013.06.18.18.39.58;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2013.05.28.13.51.12;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2012.02.26.15.07.40;	author ajacoutot;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2010.07.23.16.05.40;	author phessler;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.07.23.16.05.40;	author phessler;	state Exp;
branches;
next	;

1.2.4.1
date	2013.06.19.06.44.02;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to libraw-0.16.0
@
text
@$OpenBSD: patch-src_libraw_cxx_cpp,v 1.4 2013/06/18 18:39:58 sthen Exp $
--- src/libraw_cxx.cpp.orig	Tue Jun 18 19:23:59 2013
+++ src/libraw_cxx.cpp	Tue Jun 18 19:35:38 2013
@@@@ -798,8 +798,8 @@@@ int LibRaw::unpack(void)
                 S.iheight= S.height;
                 IO.shrink = 0;
                 // allocate image as temporary buffer, size 
-                imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));
-                imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;
+                imgdata.rawdata.raw_alloc = 0;
+                imgdata.image = (ushort (*)[4]) calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));
             }
 
 
@@@@ -809,8 +809,8 @@@@ int LibRaw::unpack(void)
         // recover saved
         if( decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)
             {
-                imgdata.image = 0; 
-                imgdata.rawdata.color_image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;
+                imgdata.rawdata.raw_alloc = imgdata.rawdata.color_image = imgdata.image;
+                imgdata.image = 0;
             }
 
         // calculate channel maximum
@


1.4
log
@patch libraw for CVE-2013-2126; incorrect error handling with broken full
colour images could result in a crash or possibly code execution
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libraw_cxx_cpp,v 1.3 2013/05/28 13:51:12 sthen Exp $
@


1.3
log
@update to latest 0.14.x libraw (N.B. 0.15.2 has a buffer overflow fix but it's
not yet clear whether this is in old code, or newly-added code for 0.15.x,
and 0.15.x changes API which breaks shotwell build).
@
text
@d1 25
a25 12
$OpenBSD: patch-src_libraw_cxx_cpp,v 1.2 2012/02/26 15:07:40 ajacoutot Exp $
--- src/libraw_cxx.cpp.orig	Fri May 17 20:54:17 2013
+++ src/libraw_cxx.cpp	Tue May 28 12:44:02 2013
@@@@ -27,6 +27,8 @@@@ it under the terms of the one of three licenses as you
 #include <sys/types.h>
 #include <sys/stat.h>
 #ifndef WIN32
+#include <sys/types.h>
+#include <sys/socket.h>
 #include <netinet/in.h>
 #else
 #include <winsock2.h>
@


1.2
log
@Update to libraw-0.14.5.
@
text
@d1 4
a4 4
$OpenBSD: patch-src_libraw_cxx_cpp,v 1.1.1.1 2010/07/23 16:05:40 phessler Exp $
--- src/libraw_cxx.cpp.orig	Sat Dec 24 15:59:38 2011
+++ src/libraw_cxx.cpp	Sun Feb 26 15:29:20 2012
@@@@ -26,6 +26,8 @@@@ it under the terms of the one of three licenses as you
@


1.2.4.1
log
@Security fix for CVE-2013-2126: incorrect error handling with broken full
colour images could result in a crash or possibly code execution
@
text
@d1 1
a1 6
$OpenBSD: patch-src_libraw_cxx_cpp,v 1.2 2012/02/26 15:07:40 ajacoutot Exp $

Chunk 2-3:
Security fix for CVE-2013-2126: incorrect error handling with broken full
colour images could result in a crash or possibly code execution

d3 1
a3 1
+++ src/libraw_cxx.cpp	Wed Jun 19 08:40:51 2013
a12 26
@@@@ -791,9 +793,9 @@@@ int LibRaw::unpack(void)
                 S.iwidth = S.width;
                 S.iheight= S.height;
                 IO.shrink = 0;
-                // allocate image as temporary buffer, size 
-                imgdata.rawdata.raw_alloc = calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));
-                imgdata.image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;
+                // allocate image as temporary buffer, size
+		imgdata.rawdata.raw_alloc = 0;
+		imgdata.image = (ushort (*)[4]) calloc(S.iwidth*S.iheight,sizeof(*imgdata.image));
             }
 
 
@@@@ -802,9 +804,9 @@@@ int LibRaw::unpack(void)
 
         // recover saved
         if( decoder_info.decoder_flags & LIBRAW_DECODER_LEGACY)
-            {
-                imgdata.image = 0; 
-                imgdata.rawdata.color_image = (ushort (*)[4]) imgdata.rawdata.raw_alloc;
+	{
+		imgdata.rawdata.raw_alloc = imgdata.rawdata.color_image = imgdata.image;
+		imgdata.image = 0; 
             }
 
         // calculate channel maximum
@


1.1
log
@Initial revision
@
text
@d1 6
a6 6
$OpenBSD$
--- src/libraw_cxx.cpp.orig	Thu Jul  1 18:09:19 2010
+++ src/libraw_cxx.cpp	Thu Jul  1 18:11:26 2010
@@@@ -23,6 +23,8 @@@@ it under the terms of the one of three licenses as you
 #include <float.h>
 #include <math.h>
@


1.1.1.1
log
@LibRaw is a library for reading RAW files obtained from digital photo
cameras (CRW/CR2, NEF, RAF, DNG, and others).

LibRaw is based on the source codes of the dcraw utility, where part of
drawbacks have already been eliminated and part will be fixed in future.
The users of the library are provided with API to be built into their
software programs.

requested by (and OK) landry@@ at c2k10....

(this time, imported into a better dir path)
@
text
@@
