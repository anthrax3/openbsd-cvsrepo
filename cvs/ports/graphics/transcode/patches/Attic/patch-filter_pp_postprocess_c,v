head	1.3;
access;
symbols
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	sturm_2004-Jun-18:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2005.01.25.22.00.35;	author naddy;	state dead;
branches;
next	1.2;

1.2
date	2004.06.24.19.27.00;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.18.18.56.46;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.06.18.18.56.46;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Complete move graphics/transcode -> multimedia/transcode.
@
text
@$OpenBSD: patch-filter_pp_postprocess_c,v 1.2 2004/06/24 19:27:00 sturm Exp $
--- filter/pp/postprocess.c.orig	2003-11-12 02:42:34.000000000 -0800
+++ filter/pp/postprocess.c	2004-05-20 19:29:05.000000000 -0700
@@@@ -72,8 +72,10 @@@@ try to unroll inner for(x=0 ... loop to 
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#ifdef HAVE_MALLOC_H
-#include <malloc.h>
+#ifndef SYS_BSD
+# ifdef HAVE_MALLOC_H
+# include <malloc.h>
+# endif
 #endif
 //#undef HAVE_MMX2
 //#define HAVE_3DNOW
@@@@ -103,14 +105,20 @@@@ try to unroll inner for(x=0 ... loop to 
 #define TEMP_STRIDE 8
 //#define NUM_BLOCKS_AT_ONCE 16 //not used yet
 
+#if defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 && __GNUC_MINOR__ > 0)
+#    define attribute_used __attribute__((used))
+#else
+#    define attribute_used
+#endif
+
 #ifdef ARCH_X86
-static uint64_t __attribute__((aligned(8))) w05=		0x0005000500050005LL;
-static uint64_t __attribute__((aligned(8))) w20=		0x0020002000200020LL;
-static uint64_t __attribute__((aligned(8))) b00= 		0x0000000000000000LL;
-static uint64_t __attribute__((aligned(8))) b01= 		0x0101010101010101LL;
-static uint64_t __attribute__((aligned(8))) b02= 		0x0202020202020202LL;
-static uint64_t __attribute__((aligned(8))) b08= 		0x0808080808080808LL;
-static uint64_t __attribute__((aligned(8))) b80= 		0x8080808080808080LL;
+static uint64_t __attribute__((aligned(8))) attribute_used w05=		0x0005000500050005LL;
+static uint64_t __attribute__((aligned(8))) attribute_used w20=		0x0020002000200020LL;
+static uint64_t __attribute__((aligned(8))) attribute_used b00= 		0x0000000000000000LL;
+static uint64_t __attribute__((aligned(8))) attribute_used b01= 		0x0101010101010101LL;
+static uint64_t __attribute__((aligned(8))) attribute_used b02= 		0x0202020202020202LL;
+static uint64_t __attribute__((aligned(8))) attribute_used b08= 		0x0808080808080808LL;
+static uint64_t __attribute__((aligned(8))) attribute_used b80= 		0x8080808080808080LL;
 #endif
 
 
@@@@ -119,7 +127,7 @@@@ static uint8_t * const clip_tab= clip_ta
 
 static int verbose= 0;
 
-static const int deringThreshold= 20;
+static const int attribute_used deringThreshold= 20;
 
 
 static struct PPFilter filters[]=
@


1.2
log
@improve port, from Jacob Meuser <jakemsr at jakemsr.com>
maintainer ok
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
--- filter/pp/postprocess.c.orig	2003-11-12 02:42:12.000000000 -0800
+++ filter/pp/postprocess.c	2004-04-27 19:16:19.000000000 -0700
d17 37
@


1.1.1.1
log
@Initial import of transcode 0.6.12

transcode is a text console video-stream processing tool. 
It supports elementary video and audio frame transformations. 
Some example modules are included to enable import of MPEG-1/2, 
Digital Video, and other formats. It also includes export 
modules for writing to AVI files with DivX, OpenDivX, XviD,
Digital Video or other codecs. Direct DVD transcoding is also 
supported. A set of tools is available to extract and decode 
the sources into raw video/audio streams for import and to 
enable post-processing of AVI files.

from Waldemar Brodkorb and Jacob Meuser, maintained by
Waldemar Brodkorb <wbx at openbsd.de>
@
text
@@
