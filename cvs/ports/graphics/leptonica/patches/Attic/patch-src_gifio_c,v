head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2015.11.13.12.47.54;	author ajacoutot;	state dead;
branches;
next	1.4;
commitid	83w5D3zct2OAuYLC;

1.4
date	2015.03.28.17.05.25;	author sthen;	state Exp;
branches;
next	1.3;
commitid	FYCrBa4PIkEneggQ;

1.3
date	2014.06.13.07.37.27;	author sthen;	state dead;
branches;
next	1.2;
commitid	PabYfs7h33bzULFK;

1.2
date	2014.01.18.14.11.23;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.25.07.58.40;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to leptonica-1.72.
@
text
@$OpenBSD: patch-src_gifio_c,v 1.4 2015/03/28 17:05:25 sthen Exp $

giflib 5.1+ compat

--- src/gifio.c.orig	Sat Mar 28 16:58:49 2015
+++ src/gifio.c	Sat Mar 28 16:59:29 2015
@@@@ -121,12 +121,12 @@@@ SavedImage       si;
 
         /* Read all the data, but use only the first image found */
     if (DGifSlurp(gif) != GIF_OK) {
-        DGifCloseFile(gif);
+        DGifCloseFile(gif, NULL);
         return (PIX *)ERROR_PTR("failed to read GIF data", procName, NULL);
     }
 
     if (gif->SavedImages == NULL) {
-        DGifCloseFile(gif);
+        DGifCloseFile(gif, NULL);
         return (PIX *)ERROR_PTR("no images found in GIF", procName, NULL);
     }
 
@@@@ -134,12 +134,12 @@@@ SavedImage       si;
     w = si.ImageDesc.Width;
     h = si.ImageDesc.Height;
     if (w <= 0 || h <= 0) {
-        DGifCloseFile(gif);
+        DGifCloseFile(gif, NULL);
         return (PIX *)ERROR_PTR("invalid image dimensions", procName, NULL);
     }
 
     if (si.RasterBits == NULL) {
-        DGifCloseFile(gif);
+        DGifCloseFile(gif, NULL);
         return (PIX *)ERROR_PTR("no raster data in GIF", procName, NULL);
     }
 
@@@@ -151,7 +151,7 @@@@ SavedImage       si;
         gif_cmap = gif->SColorMap;
     } else {
             /* don't know where to take cmap from */
-        DGifCloseFile(gif);
+        DGifCloseFile(gif, NULL);
         return (PIX *)ERROR_PTR("color map is missing", procName, NULL);
     }
 
@@@@ -175,7 +175,7 @@@@ SavedImage       si;
     }
 
     if ((pixd = pixCreate(w, h, d)) == NULL) {
-        DGifCloseFile(gif);
+        DGifCloseFile(gif, NULL);
         pixcmapDestroy(&cmap);
         return (PIX *)ERROR_PTR("failed to allocate pixd", procName, NULL);
     }
@@@@ -207,7 +207,7 @@@@ SavedImage       si;
         pixTransferAllData(pixd, &pixdi, 0, 0);
     }
 
-    DGifCloseFile(gif);
+    DGifCloseFile(gif, NULL);
     return pixd;
 }
 
@@@@ -356,14 +356,14 @@@@ GifByteType     *gif_line;
         != GIF_OK) {
         pixDestroy(&pixd);
         GifFreeMapObject(gif_cmap);
-        EGifCloseFile(gif);
+        EGifCloseFile(gif, NULL);
         return ERROR_INT("failed to write screen description", procName, 1);
     }
     GifFreeMapObject(gif_cmap); /* not needed after this point */
 
     if (EGifPutImageDesc(gif, 0, 0, w, h, FALSE, NULL) != GIF_OK) {
         pixDestroy(&pixd);
-        EGifCloseFile(gif);
+        EGifCloseFile(gif, NULL);
         return ERROR_INT("failed to image screen description", procName, 1);
     }
 
@@@@ -371,13 +371,13 @@@@ GifByteType     *gif_line;
     wpl = pixGetWpl(pixd);
     if (d != 1 && d != 2 && d != 4 && d != 8) {
         pixDestroy(&pixd);
-        EGifCloseFile(gif);
+        EGifCloseFile(gif, NULL);
         return ERROR_INT("image depth is not in {1, 2, 4, 8}", procName, 1);
     }
 
     if ((gif_line = (GifByteType *)CALLOC(sizeof(GifByteType), w)) == NULL) {
         pixDestroy(&pixd);
-        EGifCloseFile(gif);
+        EGifCloseFile(gif, NULL);
         return ERROR_INT("mem alloc fail for data line", procName, 1);
     }
 
@@@@ -406,7 +406,7 @@@@ GifByteType     *gif_line;
         if (EGifPutLine(gif, gif_line, w) != GIF_OK) {
             FREE(gif_line);
             pixDestroy(&pixd);
-            EGifCloseFile(gif);
+            EGifCloseFile(gif, NULL);
             return ERROR_INT("failed to write data line into GIF", procName, 1);
         }
     }
@@@@ -422,7 +422,7 @@@@ GifByteType     *gif_line;
 
     FREE(gif_line);
     pixDestroy(&pixd);
-    EGifCloseFile(gif);
+    EGifCloseFile(gif, NULL);
     return 0;
 }
 
@


1.4
log
@handle giflib api change
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@update to leptonica 1.70, ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_gifio_c,v 1.2 2014/01/18 14:11:23 ajacoutot Exp $
d3 1
a3 2
handle giflib 5.0+
https://code.google.com/p/leptonica/issues/detail?id=63
d5 79
a83 23
--- src/gifio.c.orig	Sun Jan 22 19:29:15 2012
+++ src/gifio.c	Sat Jan 18 14:47:02 2014
@@@@ -100,7 +100,11 @@@@ SavedImage       si;
     _lseek(fd, 0, SEEK_SET);
 #endif  /* _MSC_VER */
 
+#if GIFLIB_MAJOR < 5
     if ((gif = DGifOpenFileHandle(fd)) == NULL)
+#else
+    if ((gif = DGifOpenFileHandle(fd, NULL)) == NULL)
+#endif
         return (PIX *)ERROR_PTR("invalid file or file not found",
                                 procName, NULL);
 
@@@@ -316,6 +320,10 @@@@ GifByteType     *gif_line;
     }
 
         /* Save the cmap colors in a gif_cmap */
+#if GIFLIB_MAJOR >= 5
+#define MakeMapObject GifMakeMapObject
+#define FreeMapObject GifFreeMapObject
+#endif
     if ((gif_cmap = MakeMapObject(gif_ncolor, NULL)) == NULL) {
d85 3
a87 2
         return ERROR_INT("failed to create GIF color map", procName, 1);
@@@@ -337,7 +345,11 @@@@ GifByteType     *gif_line;
d90 1
a90 6
         /* Get the gif file handle */
+#if GIFLIB_MAJOR < 5
     if ((gif = EGifOpenFileHandle(fd)) == NULL) {
+#else
+    if ((gif = EGifOpenFileHandle(fd, NULL)) == NULL) {
+#endif
d92 23
a114 2
         FreeMapObject(gif_cmap);
         return ERROR_INT("failed to create GIF image handle", procName, 1);
@


1.2
log
@Update to leptonica-1.69.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_gifio_c,v 1.1 2013/09/25 07:58:40 sthen Exp $
@


1.1
log
@libungif->giflib and patch where necessary, ok jasper@@ aja@@
@
text
@d1 1
a1 1
$OpenBSD$
d6 3
a8 3
--- src/gifio.c.orig	Sun Mar  6 10:13:09 2011
+++ src/gifio.c	Thu Sep 19 02:21:55 2013
@@@@ -89,7 +89,11 @@@@ SavedImage       si;
d20 1
a20 1
@@@@ -305,6 +309,10 @@@@ GifByteType     *gif_line;
d31 1
a31 1
@@@@ -326,7 +334,11 @@@@ GifByteType     *gif_line;
@

