head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.52
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.54
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.50
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.48
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.46
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.44
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.42
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.40
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.30
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.28
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	vid:1.1.1.1
	angelos:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.04.26.18.06.26;	author jca;	state Exp;
branches;
next	1.3;
commitid	Y2yEyM7LQC8vYyHx;

1.3
date	2003.01.20.18.54.14;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.24.22.47.13;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.19.03.25.08;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.06.19.03.25.08;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Cope with the netpbm update

"go go go" naddy@@
@
text
@$OpenBSD: patch-vid_c,v 1.3 2003/01/20 18:54:14 sturm Exp $
--- vid.c.orig	Mon May  8 06:59:03 2000
+++ vid.c	Tue Apr 26 15:50:06 2016
@@@@ -37,7 +37,7 @@@@
 
 #include <dev/usb/usb.h>
 
-#include <pnm.h>
+#include <netpbm/pnm.h>
 
 #include "vid.h"
 
@@@@ -48,15 +48,15 @@@@ ov511_reg_read(int fd, int reg) {
   struct usb_ctl_request ur;
   unsigned char data[1024];
   
-  ur.request.bmRequestType = UT_READ_VENDOR_INTERFACE;
-  ur.request.bRequest = 2;
+  ur.ucr_request.bmRequestType = UT_READ_VENDOR_INTERFACE;
+  ur.ucr_request.bRequest = 2;
   
-  USETW(ur.request.wValue, 0);	/* unused */
-  USETW(ur.request.wIndex, reg); /* index */
-  USETW(ur.request.wLength, 1);	/* payload len in bytes */
-  ur.data = data;
-  ur.flags = 0;
-  ur.actlen = 0;
+  USETW(ur.ucr_request.wValue, 0);	/* unused */
+  USETW(ur.ucr_request.wIndex, reg);	/* index */
+  USETW(ur.ucr_request.wLength, 1);	/* payload len in bytes */
+  ur.ucr_data = data;
+  ur.ucr_flags = 0;
+  ur.ucr_actlen = 0;
   
   if(ioctl(fd, USB_DO_REQUEST, &ur) < 0) {
     return -1;
@@@@ -72,15 +72,15 @@@@ ov511_reg_write(int fd, int reg, int val) {
 
   data[0] = val;
   
-  ur.request.bmRequestType = UT_WRITE_VENDOR_INTERFACE;
-  ur.request.bRequest = 2;
+  ur.ucr_request.bmRequestType = UT_WRITE_VENDOR_INTERFACE;
+  ur.ucr_request.bRequest = 2;
   
-  USETW(ur.request.wValue, 0);	/* unused */
-  USETW(ur.request.wIndex, reg); /* index */
-  USETW(ur.request.wLength, 1);	/* payload len in bytes */
-  ur.data = data;
-  ur.flags = 0;
-  ur.actlen = 0;
+  USETW(ur.ucr_request.wValue, 0);	/* unused */
+  USETW(ur.ucr_request.wIndex, reg);	/* index */
+  USETW(ur.ucr_request.wLength, 1);	/* payload len in bytes */
+  ur.ucr_data = data;
+  ur.ucr_flags = 0;
+  ur.ucr_actlen = 0;
   
   if(ioctl(fd, USB_DO_REQUEST, &ur) < 0) {
     return -1;
@@@@ -213,16 +213,23 @@@@ main(int argc, char *argv[]) {
   char dev[FILENAME_MAX];	/* for constructing device names */
   char isocdev[FILENAME_MAX];	/* for constructing endpoint 1 device names */
   char *devname = NULL;		/* device name */
+  char *p = NULL;               /* for string ops */
+  int slen = -1;                 /* string length holder */
+  int plen = -1;                 /* string length holder */
   int len = -1;			/* isochronous input read length */
   struct vidstate vs;		/* current read state */
   int small = 0;		/* use 320x240 */
   int frmnm = 0;		/* cyclic frame number key */
+  int isplus;                  /* bridge is OV511+ if true, else OV511 */
+  int is20;                    /* sensor is OV7620 if true, else OV7610 */
+  int bufsize;                 /* size of packet buffer */
 
+
   /* pnm_init(&argc, argv); */	/* required for PNM programs? */
 
   while(++argv, --argc) {
     if(strcmp(*argv, "--version") == 0) {
-      fprintf(stderr, "OV511 capture program version " VERSION
+      fprintf(stderr, "OV511/OV511+ capture program version " VERSION
 	      "\nCopyright 2000 Peter S. Housel"
 	      "\nThis program is free software; "
 	      "you may redistribute it under the terms of"
@@@@ -235,7 +242,7 @@@@ main(int argc, char *argv[]) {
       exit(0);
     } else if(strcmp(*argv, "--help") == 0) {
       fprintf(stderr, "usage: vid [options]\n"
-	      "Capture an image frame from an OV511-based USB video camera\n"
+	      "Capture an image frame from an OV511/OV511+ based USB video camera\n"
 	      "and write image data to standard output in PNM format\n\n"
 	      "--version              print program version information\n"
 	      "--usage                summarize command line options\n"
@@@@ -243,6 +250,7 @@@@ main(int argc, char *argv[]) {
 	      "--small                capture as 320x240 image (default is 640x480)\n"
 	      "-d device, --device-name=device\n"
 	      "                       specify OV511 ugen device\n");
+      fprintf(stderr, "example: vid | pnmtojpeg > ~/public_html/mywebcam.jpg\n");
       exit(0);
     } else if(strcmp(*argv, "--small") == 0) {
       small = 1;
@@@@ -287,18 +295,21 @@@@ main(int argc, char *argv[]) {
       exit(1);
     }
 
-    if(udi.vendorNo != 0x05A9 || udi.productNo != 0x0511) {
-      fprintf(stderr, "device %s is not an OmniVision OV511\n", devname);
+   if(udi.udi_vendorNo != 0x05A9 ||
+     (udi.udi_productNo != 0x0511 && udi.udi_productNo != 0xa511)) {
+      fprintf(stderr, "device %s is not an OmniVision OV511/OV511+\n", devname);
       exit(1);
     }
   } else {
     int i = 0;
     for(i = 0; i < 15; ++i) {
-      sprintf(dev, "/dev/ugen%d", i);
+      snprintf(dev, sizeof(dev), "/dev/ugen%d.00", i);
       if((fd = open(dev, O_RDWR)) < 0)
 	continue;
-      if(ioctl(fd, USB_GET_DEVICEINFO, &udi) < 0
-	 || udi.vendorNo != 0x05A9 || udi.productNo != 0x0511) {
+      if(ioctl(fd, USB_GET_DEVICEINFO, &udi) < 0 ||
+	  udi.udi_vendorNo != 0x05A9 ||
+         (udi.udi_productNo != 0x0511 &&
+          udi.udi_productNo != 0xa511)) {
 	close(fd);
 	fd = -1;
 	continue;
@@@@ -308,12 +319,15 @@@@ main(int argc, char *argv[]) {
     }
 
     if(fd < 0) {
-      fprintf(stderr, "vid: couldn't locate an OV511 device\n");
+      fprintf(stderr, "vid: couldn't locate an OV511/OV511+ device\n");
       exit(1);
     }
 
     devname = dev;
   }
+
+  isplus = udi.udi_productNo == 0xa511;
+  bufsize = (isplus ? 961 : 993);
   
   /* reset the OV511 */
   if(ov511_reg_write(fd, OV511_REG_RST, 0x7f) < 0)
@@@@ -398,24 +412,57 @@@@ main(int argc, char *argv[]) {
   if(ov511_reg_write(fd, OV511_REG_CE_EN, 0x0) < 0)
     exit(1);
 
-  ov511_i2c_write(fd, OV7610_REG_RWB, 0x5);
-  ov511_i2c_write(fd, OV7610_REG_EC, 0xFF);
-  ov511_i2c_write(fd, OV7610_REG_COMB, 0x01);
-  ov511_i2c_write(fd, OV7610_REG_FD, 0x06);
-  ov511_i2c_write(fd, OV7610_REG_COME, 0x1c);
-  ov511_i2c_write(fd, OV7610_REG_COMF, 0x90);
-  ov511_i2c_write(fd, OV7610_REG_ECW, 0x2e);
-  ov511_i2c_write(fd, OV7610_REG_ECB, 0x7C);
-  ov511_i2c_write(fd, OV7610_REG_COMH, 0x24);
-  ov511_i2c_write(fd, OV7610_REG_EHSH, 0x04);
-  ov511_i2c_write(fd, OV7610_REG_EHSL, 0xAC);
-  ov511_i2c_write(fd, OV7610_REG_EXBK, 0xFE);
-  ov511_i2c_write(fd, OV7610_REG_COMJ, 0x93);
-  ov511_i2c_write(fd, OV7610_REG_BADJ, 0x48);
-  ov511_i2c_write(fd, OV7610_REG_COMK, 0x81);
+  /* This returns 0 if we have an OV7620 sensor */
+  if((is20 = ov511_i2c_read(fd, OV7610_REG_COMI)) < 0)
+    exit(1);
+  is20 = !is20;
 
-  ov511_i2c_write(fd, OV7610_REG_GAM, 0x04);
+  /* set up the OV7610/OV7620 */
+  if(is20) {
+    ov511_i2c_write(fd, OV7610_REG_EC,      0xff);
+    ov511_i2c_write(fd, OV7610_REG_FD,      0x06);
+    ov511_i2c_write(fd, OV7610_REG_COMH,    0x24);
+    ov511_i2c_write(fd, OV7610_REG_EHSL,    0xac);
+    ov511_i2c_write(fd, OV7610_REG_COMA,    0x00);
+    ov511_i2c_write(fd, OV7610_REG_COMH,    0x24);
+    ov511_i2c_write(fd, OV7610_REG_RWB,     0x85);
+    ov511_i2c_write(fd, OV7610_REG_COMD,    0x01);
+    ov511_i2c_write(fd, 0x23,               0x00);
+    ov511_i2c_write(fd, OV7610_REG_ECW,     0x10);
+    ov511_i2c_write(fd, OV7610_REG_ECB,     0x8a);
+    ov511_i2c_write(fd, OV7610_REG_COMG,    0xe2);
+    ov511_i2c_write(fd, OV7610_REG_EHSH,    0x00);
+    ov511_i2c_write(fd, OV7610_REG_EXBK,    0xfe);
+    ov511_i2c_write(fd, 0x30,               0x71);
+    ov511_i2c_write(fd, 0x31,               0x60);
+    ov511_i2c_write(fd, 0x32,               0x26);
+    ov511_i2c_write(fd, OV7610_REG_YGAM,    0x20);
+    ov511_i2c_write(fd, OV7610_REG_BADJ,    0x48);
+    ov511_i2c_write(fd, OV7610_REG_COMA,    0x24);
+    ov511_i2c_write(fd, OV7610_REG_SYN_CLK, 0x01);
+    ov511_i2c_write(fd, OV7610_REG_BBS,     0x24);
+    ov511_i2c_write(fd, OV7610_REG_RBS,     0x24);
+  } else {
+    ov511_i2c_write(fd, OV7610_REG_RWB, 0x5);
+    ov511_i2c_write(fd, OV7610_REG_EC, 0xFF);
+    ov511_i2c_write(fd, OV7610_REG_COMB, 0x01);
+    ov511_i2c_write(fd, OV7610_REG_FD, 0x06);
+    ov511_i2c_write(fd, OV7610_REG_COME, 0x1c);
+    ov511_i2c_write(fd, OV7610_REG_COMF, 0x90);
+    ov511_i2c_write(fd, OV7610_REG_ECW, 0x2e);
+    ov511_i2c_write(fd, OV7610_REG_ECB, 0x7C);
+    ov511_i2c_write(fd, OV7610_REG_COMH, 0x24);
+    ov511_i2c_write(fd, OV7610_REG_EHSH, 0x04);
+    ov511_i2c_write(fd, OV7610_REG_EHSL, 0xAC);
+    ov511_i2c_write(fd, OV7610_REG_EXBK, 0xFE);
+    ov511_i2c_write(fd, OV7610_REG_COMJ, 0x93);
+    ov511_i2c_write(fd, OV7610_REG_BADJ, 0x48);
+    ov511_i2c_write(fd, OV7610_REG_COMK, 0x81);
 
+    ov511_i2c_write(fd, OV7610_REG_GAM, 0x04);
+  }
+
+
   if(small) {
     vs.width = 320;
     vs.height = 240;
@@@@ -442,14 +489,14 @@@@ main(int argc, char *argv[]) {
   ov511_reg_write(fd, OV511_REG_LNDV, 0x00);
 
   /* set FIFO format (993-byte packets) */
-  if(ov511_reg_write(fd, OV511_REG_PKSZ, 0x1F) < 0)
+  if(ov511_reg_write(fd, OV511_REG_PKSZ, bufsize/32) < 0)
     exit(1);
   if(ov511_reg_write(fd, OV511_REG_PKFMT, 0x03) < 0)
     exit(1);
 
   /* select the 993-byte alternative */
-  alt.interface_index = 0;
-  alt.alt_no = 1;
+  alt.uai_interface_index = 0;
+  alt.uai_alt_no = (isplus ? 7 : 1);
   if(ioctl(fd, USB_SET_ALTINTERFACE, &alt) < 0) {
     perror("USB_SET_ALTINTERFACE");
     exit(1);
@@@@ -468,43 +515,62 @@@@ main(int argc, char *argv[]) {
   vs.xels = pnm_allocarray(vs.width, vs.height);
 
   /* open the isochronous endpoint (endpoint 1) */
-  sprintf(isocdev, "%s.1", devname);
+  /* first we need to construct the endpoint device from */
+  /* the given device */
+  p    = strchr(devname, '.');
+  slen = strlen(devname);
+  if(p == NULL) {
+    /* there is no dot, just append the isoc endpoint */
+    /* this is horribly contrived and needs some work, */
+    /* at this point OpenBSD doesn't use /dev/ugenX so */
+    /* it will get fixed if soon */
+    snprintf(isocdev, sizeof(isocdev), "%s.01", devname);
+  } else {
+    /* there is a dot */
+    plen = strlen(p);
+    snprintf(isocdev, sizeof(isocdev), "%s", devname);
+    isocdev[slen - plen] = NULL;
+    snprintf(isocdev, sizeof(isocdev), "%s.01", isocdev);
+  }
+
   if((isoc = open(isocdev, O_RDONLY)) < 0) {
     perror(isocdev);
     exit(1);
   }
 
   /* read, looking for start and end frames */
-  while(vs.state != DONE && (len = read(isoc, &buf, 993)) >= 0) {
+  while(vs.state != DONE && (len = read(isoc, &buf, bufsize)) >= 0) {
     if(buf[0] == 0 && buf[1] == 0 && buf[2] == 0 && buf[3] == 0
        && buf[4] == 0 && buf[5] == 0 && buf[6] == 0 && buf[7] == 0
-       && (buf[8] & 0x80) == 0 && buf[992] == 0 && vs.state == SKIPPING) {
+       && (buf[8] & 0x80) == 0 && buf[bufsize-1] == 0 && vs.state == SKIPPING) {
 	vs.state = READING;
 	vs.iY = vs.jY = vs.iUV = vs.jUV = 0;
 	vs.residue = 0;
-	procdata(&vs, buf + 9, 993 - 10);
+	procdata(&vs, buf + 9, bufsize - 10);
     } else if(buf[0] == 0 && buf[1] == 0 && buf[2] == 0 && buf[3] == 0
 	      && buf[4] == 0 && buf[5] == 0 && buf[6] == 0 && buf[7] == 0
-	      && (buf[8] & 0x80) == 0x80 && buf[992] == 0
+	      && (buf[8] & 0x80) == 0x80 && buf[bufsize-1] == 0
 	      && vs.state == READING) {
       vs.state = DONE;
     } else if(vs.state == READING) {
-      procdata(&vs, buf, 993 - 1);
+      procdata(&vs, buf, bufsize - 1);
 
       /* abort the capture and start over if packets come in out-of-order */
-      if(buf[992] != frmnm && buf[992] != 1) {
+      if(buf[bufsize-1] != frmnm && buf[bufsize-1] != 1) {
 	vs.state = SKIPPING;
       }
-      frmnm = buf[992] + 1;
+      frmnm = buf[bufsize-1] + 1;
       if(frmnm == 256)
 	frmnm = 1;
-    } else if(buf[992] != 0) {
-      frmnm = buf[992] + 1;
+    } else if(buf[bufsize-1] != 0) {
+      frmnm = buf[bufsize-1] + 1;
       if(frmnm == 256)
 	frmnm = 1;
     }
   }
 
+  /* reset and close the OV511 */
+  ov511_reg_write(fd, OV511_REG_RST, 0x7f);
   close(isoc);
   close(fd);
 
@


1.3
log
@some cleanup by new MAINTAINER Chris Kuethe <ckuethe at ualberta dot ca>

naddy@@ OK
@
text
@d1 1
a1 1
$OpenBSD$
d3 10
a12 1
+++ vid.c	Mon Jan 20 17:56:47 2003
d37 1
a37 1
@@@@ -72,15 +72,15 @@@@ ov511_reg_write(int fd, int reg, int val
d75 1
a76 1
 
d147 1
a147 1
@@@@ -398,23 +412,56 @@@@ main(int argc, char *argv[]) {
d170 2
a171 1
+
d213 1
a213 1
+
d216 2
a217 3
 
-  ov511_i2c_write(fd, OV7610_REG_GAM, 0x04);
 
d220 1
@


1.2
log
@* sync with USB namespace changes
* clean-up
@
text
@d1 1
a1 1
$OpenBSD: patch-vid_c,v 1.1.1.1 2001/06/19 03:25:08 angelos Exp $
d3 1
a3 1
+++ vid.c	Sat May 25 00:36:03 2002
d52 8
a59 1
@@@@ -217,12 +217,15 @@@@ main(int argc, char *argv[]) {
d63 4
a66 3
+  int isplus;			/* bridge is OV511+ if true, else OV511 */
+  int is20;			/* sensor is OV7620 if true, else OV7610 */
+  int bufsize;			/* size of packet buffer */
d77 1
a77 1
@@@@ -235,7 +238,7 @@@@ main(int argc, char *argv[]) {
d86 9
a94 1
@@@@ -287,8 +290,9 @@@@ main(int argc, char *argv[]) {
d100 3
a102 3
+    if(udi.udi_vendorNo != 0x05A9 || (udi.udi_productNo != 0x0511 &&
+				  udi.udi_productNo != 0xa511)) {
+      fprintf(stderr, "device %s is not an OmniVision OV511 or OV511+\n", devname);
d106 4
a109 1
@@@@ -298,7 +302,8 @@@@ main(int argc, char *argv[]) {
d112 1
a112 1
       if(ioctl(fd, USB_GET_DEVICEINFO, &udi) < 0
d114 4
a117 2
+	 || udi.udi_vendorNo != 0x05A9 || (udi.udi_productNo != 0x0511 &&
+				       udi.udi_productNo != 0xa511)) {
d121 1
a121 1
@@@@ -308,12 +313,15 @@@@ main(int argc, char *argv[]) {
d126 1
a126 1
+      fprintf(stderr, "vid: couldn't locate an OV511 or OV511+ device\n");
d138 1
a138 1
@@@@ -398,23 +406,55 @@@@ main(int argc, char *argv[]) {
d203 3
a207 2
+    ov511_i2c_write(fd, OV7610_REG_GAM, 0x04);
+  }
d211 1
a211 1
@@@@ -442,14 +482,14 @@@@ main(int argc, char *argv[]) {
d229 26
a254 1
@@@@ -475,36 +515,38 @@@@ main(int argc, char *argv[]) {
@


1.1
log
@Initial revision
@
text
@d1 51
a51 3
$OpenBSD$
--- vid.c.orig	Mon May  8 00:59:03 2000
+++ vid.c	Sat Jun  9 01:33:37 2001
d84 2
a85 2
+    if(udi.vendorNo != 0x05A9 || (udi.productNo != 0x0511 &&
+				  udi.productNo != 0xa511)) {
d95 2
a96 2
+	 || udi.vendorNo != 0x05A9 || (udi.productNo != 0x0511 &&
+				       udi.productNo != 0xa511)) {
d112 1
a112 1
+  isplus = udi.productNo == 0xa511;
d200 1
a200 1
   alt.interface_index = 0;
d202 2
a203 1
+  alt.alt_no = (isplus ? 7 : 1);
@


1.1.1.1
log
@Initial import of vid, based on FreeBSD port.

Capture images from USB cameras using the OV511/OV511+ chipset.
@
text
@@
