head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.6
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.09.24.09.35.45;	author sthen;	state Exp;
branches;
next	;
commitid	gxDaoZK2ri8dfV2e;


desc
@@


1.1
log
@fix openexr on 32-bit arch, 0xffffffffffffffffL
sync SHARED_LIBS with shared_libs.log while there
@
text
@$OpenBSD$
--- IlmImf/ImfFastHuf.cpp.orig	Thu Sep 24 03:01:56 2015
+++ IlmImf/ImfFastHuf.cpp	Thu Sep 24 03:02:43 2015
@@@@ -107,7 +107,7 @@@@ FastHufDecoder::FastHufDecoder
     for (int i = 0; i <= MAX_CODE_LEN; ++i)
     {
         codeCount[i] = 0;
-        base[i]      = 0xffffffffffffffffL;
+        base[i]      = 0xffffffffffffffffLL;
         offset[i]    = 0;
     }
 
@@@@ -352,7 +352,7 @@@@ FastHufDecoder::buildTables (Int64 *base, Int64 *offse
 
     for (int i = 0; i <= MAX_CODE_LEN; ++i)
     {
-        if (base[i] != 0xffffffffffffffffL)
+        if (base[i] != 0xffffffffffffffffLL)
         {
             _ljBase[i] = base[i] << (64 - i);
         }
@@@@ -362,7 +362,7 @@@@ FastHufDecoder::buildTables (Int64 *base, Int64 *offse
             // Unused code length - insert dummy values
             //
 
-            _ljBase[i] = 0xffffffffffffffffL;
+            _ljBase[i] = 0xffffffffffffffffLL;
         }
     }
 
@@@@ -417,7 +417,7 @@@@ FastHufDecoder::buildTables (Int64 *base, Int64 *offse
 
     int minIdx = TABLE_LOOKUP_BITS;
 
-    while (minIdx > 0 && _ljBase[minIdx] == 0xffffffffffffffffL)
+    while (minIdx > 0 && _ljBase[minIdx] == 0xffffffffffffffffLL)
         minIdx--;
 
     if (minIdx < 0)
@@@@ -427,7 +427,7 @@@@ FastHufDecoder::buildTables (Int64 *base, Int64 *offse
         // Set the min value such that the table is never tested.
         //
 
-        _tableMin = 0xffffffffffffffffL;
+        _tableMin = 0xffffffffffffffffLL;
     }
     else
     {
@
