head	1.3;
access;
symbols
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	jolan_2004-apr-17:1.1.1.1
	jolan:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2006.11.20.09.21.09;	author bernd;	state dead;
branches;
next	1.2;

1.2
date	2004.09.21.22.40.36;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.18.02.01.25;	author jolan;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.18.02.01.25;	author jolan;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to imlib2-1.3.0. Initial diffs from 'bsdmaniak at daemon-tips dot org'
and brad@@.

This contains security fixes from the imlib2 cvs repository for CVE-2006-4806,
CVE-2006-4807, CVE-2006-4808 and CVE-2006-4809.

ok brad@@, steven@@
@
text
@$OpenBSD: patch-src_rgba_c,v 1.2 2004/09/21 22:40:36 brad Exp $
--- src/rgba.c.orig	Sat Jul 12 21:09:17 2003
+++ src/rgba.c	Tue Aug 24 20:42:32 2004
@@@@ -2856,7 +2856,7 @@@@ __imlib_RGBA_to_RGB565_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -2926,7 +2926,7 @@@@ __imlib_RGBA_to_RGB565_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -2998,7 +2998,7 @@@@ __imlib_RGBA_to_BGR565_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3068,7 +3068,7 @@@@ __imlib_RGBA_to_BGR565_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3140,7 +3140,7 @@@@ __imlib_RGBA_to_RGB555_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3210,7 +3210,7 @@@@ __imlib_RGBA_to_RGB555_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3282,7 +3282,7 @@@@ __imlib_RGBA_to_BGR555_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3352,7 +3352,7 @@@@ __imlib_RGBA_to_BGR555_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_2(width))
           {
@@@@ -3423,7 +3423,7 @@@@ __imlib_RGBA_to_RGB332_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3467,7 +3467,7 @@@@ __imlib_RGBA_to_RGB332_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB332(src, dest);
                }
@@@@ -3520,7 +3520,7 @@@@ __imlib_RGBA_to_RGB332_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3565,7 +3565,7 @@@@ __imlib_RGBA_to_RGB332_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB332_DITHER(src, dest);
                }
@@@@ -3599,7 +3599,7 @@@@ __imlib_RGBA_to_RGB666_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3643,7 +3643,7 @@@@ __imlib_RGBA_to_RGB666_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB666(src, dest);
                }
@@@@ -3696,7 +3696,7 @@@@ __imlib_RGBA_to_RGB666_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3741,7 +3741,7 @@@@ __imlib_RGBA_to_RGB666_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB666_DITHER(src, dest);
                }
@@@@ -3775,7 +3775,7 @@@@ __imlib_RGBA_to_RGB232_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3819,7 +3819,7 @@@@ __imlib_RGBA_to_RGB232_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB232(src, dest);
                }
@@@@ -3872,7 +3872,7 @@@@ __imlib_RGBA_to_RGB232_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3917,7 +3917,7 @@@@ __imlib_RGBA_to_RGB232_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB232_DITHER(src, dest);
                }
@@@@ -3951,7 +3951,7 @@@@ __imlib_RGBA_to_RGB222_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -3995,7 +3995,7 @@@@ __imlib_RGBA_to_RGB222_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB222(src, dest);
                }
@@@@ -4048,7 +4048,7 @@@@ __imlib_RGBA_to_RGB222_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4093,7 +4093,7 @@@@ __imlib_RGBA_to_RGB222_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB222_DITHER(src, dest);
                }
@@@@ -4127,7 +4127,7 @@@@ __imlib_RGBA_to_RGB221_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4171,7 +4171,7 @@@@ __imlib_RGBA_to_RGB221_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB221(src, dest);
                }
@@@@ -4224,7 +4224,7 @@@@ __imlib_RGBA_to_RGB221_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4269,7 +4269,7 @@@@ __imlib_RGBA_to_RGB221_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB221_DITHER(src, dest);
                }
@@@@ -4303,7 +4303,7 @@@@ __imlib_RGBA_to_RGB121_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4347,7 +4347,7 @@@@ __imlib_RGBA_to_RGB121_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB121(src, dest);
                }
@@@@ -4400,7 +4400,7 @@@@ __imlib_RGBA_to_RGB121_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4445,7 +4445,7 @@@@ __imlib_RGBA_to_RGB121_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB121_DITHER(src, dest);
                }
@@@@ -4479,7 +4479,7 @@@@ __imlib_RGBA_to_RGB111_fast(DATA32 * src
    w = width;
    h = height;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4523,7 +4523,7 @@@@ __imlib_RGBA_to_RGB111_fast(DATA32 * src
      {
         for (y = 0; y < h; y++)
           {
-             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = 0; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB111(src, dest);
                }
@@@@ -4576,7 +4576,7 @@@@ __imlib_RGBA_to_RGB111_dither(DATA32 * s
    w = width + dx;
    h = height + dy;
 
-   if (IS_ALIGNED_32((int)dest))
+   if (IS_ALIGNED_32((long)dest))
      {
         if (IS_MULTIPLE_4(width))
           {
@@@@ -4621,7 +4621,7 @@@@ __imlib_RGBA_to_RGB111_dither(DATA32 * s
         for (y = dy; y < h; y++)
           {
              w = width + dx;
-             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((int)dest)))); x++)
+             for (x = dx; ((x < w) && (!(IS_ALIGNED_32((long)dest)))); x++)
                {
                   WRITE1_RGBA_RGB111_DITHER(src, dest);
                }
@


1.2
log
@upgrade to imlib2 1.1.2

Marcus Meissner discovered that imlib's BMP decoder would crash
when loading the test BMP file created by Chris Evans for testing
a previous Qt vulnerability. It is believed that this bug could
be exploited for arbitrary code execution.

also some port fixes, added missing dependencies, etc.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_rgba_c,v 1.1.1.1 2004/04/18 02:01:25 jolan Exp $
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- src/rgba.c.orig	Sat Jan 24 02:08:45 2004
+++ src/rgba.c	Sat Jan 24 02:12:02 2004
@@@@ -2856,7 +2856,7 @@@@
d13 1
a13 1
@@@@ -2926,7 +2926,7 @@@@
d22 1
a22 1
@@@@ -2998,7 +2998,7 @@@@
d31 1
a31 1
@@@@ -3068,7 +3068,7 @@@@
d40 1
a40 1
@@@@ -3140,7 +3140,7 @@@@
d49 1
a49 1
@@@@ -3210,7 +3210,7 @@@@
d58 1
a58 1
@@@@ -3282,7 +3282,7 @@@@
d67 1
a67 1
@@@@ -3352,7 +3352,7 @@@@
d76 1
a76 1
@@@@ -3423,7 +3423,7 @@@@
d85 1
a85 1
@@@@ -3467,7 +3467,7 @@@@
d94 1
a94 1
@@@@ -3520,7 +3520,7 @@@@
d103 1
a103 1
@@@@ -3565,7 +3565,7 @@@@
d112 1
a112 1
@@@@ -3599,7 +3599,7 @@@@
d121 1
a121 1
@@@@ -3643,7 +3643,7 @@@@
d130 1
a130 1
@@@@ -3696,7 +3696,7 @@@@
d139 1
a139 1
@@@@ -3741,7 +3741,7 @@@@
d148 1
a148 1
@@@@ -3775,7 +3775,7 @@@@
d157 1
a157 1
@@@@ -3819,7 +3819,7 @@@@
d166 1
a166 1
@@@@ -3872,7 +3872,7 @@@@
d175 1
a175 1
@@@@ -3917,7 +3917,7 @@@@
d184 1
a184 1
@@@@ -3951,7 +3951,7 @@@@
d193 1
a193 1
@@@@ -3995,7 +3995,7 @@@@
d202 1
a202 1
@@@@ -4048,7 +4048,7 @@@@
d211 1
a211 1
@@@@ -4093,7 +4093,7 @@@@
d220 1
a220 1
@@@@ -4127,7 +4127,7 @@@@
d229 1
a229 1
@@@@ -4171,7 +4171,7 @@@@
d238 1
a238 1
@@@@ -4224,7 +4224,7 @@@@
d247 1
a247 1
@@@@ -4269,7 +4269,7 @@@@
d256 1
a256 1
@@@@ -4303,7 +4303,7 @@@@
d265 1
a265 1
@@@@ -4347,7 +4347,7 @@@@
d274 1
a274 1
@@@@ -4400,7 +4400,7 @@@@
d283 1
a283 1
@@@@ -4445,7 +4445,7 @@@@
d292 1
a292 1
@@@@ -4479,7 +4479,7 @@@@
d301 1
a301 1
@@@@ -4523,7 +4523,7 @@@@
d310 1
a310 1
@@@@ -4576,7 +4576,7 @@@@
d319 1
a319 1
@@@@ -4621,7 +4621,7 @@@@
@


1.1.1.1
log
@import imlib2-1.1.0, an image manipulation library

from/maintained by francois briere, tweaks by robert nagy and myself
@
text
@@
