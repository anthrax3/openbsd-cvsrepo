head	1.1;
access;
symbols
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_7:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2006.02.01.20.53.32;	author sturm;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2006.02.01.20.53.32;	author sturm;	state Exp;
branches;
next	;

1.1.4.1
date	2006.02.01.20.55.25;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-magick_delegate_c was initially added on branch OPENBSD_3_7.
@
text
@@


1.1.4.1
log
@Prevent shell command injection in delegate code (via file names).
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=345238 (CVE-2005-4601)

from debian
@
text
@a0 71
$OpenBSD$
--- magick/delegate.c.orig	Sun Jan 29 09:45:06 2006
+++ magick/delegate.c	Sun Jan 29 09:51:29 2006
@@@@ -701,6 +701,8 @@@@ static MagickBooleanType InitializeDeleg
 MagickExport MagickBooleanType InvokeDelegate(ImageInfo *image_info,
   Image *image,const char *decode,const char *encode,ExceptionInfo *exception)
 {
+#define ProhibitedAlphabet  "*?\"'<>|`$"
+
   char
     *command,
     **commands,
@@@@ -755,11 +757,11 @@@@ MagickExport MagickBooleanType InvokeDel
         }
       image_info->temporary=MagickTrue;
     }
-  if (delegate_info->mode != 0)
-    if (((decode != (const char *) NULL) &&
-         (delegate_info->encode != (char *) NULL)) ||
-        ((encode != (const char *) NULL) &&
-         (delegate_info->decode != (char *) NULL)))
+  if ((delegate_info->mode != 0) &&
+      (((decode != (const char *) NULL) &&
+        (delegate_info->encode != (char *) NULL)) ||
+       ((encode != (const char *) NULL) &&
+        (delegate_info->decode != (char *) NULL))))
       {
         char
           filename[MaxTextExtent],
@@@@ -774,6 +776,13 @@@@ MagickExport MagickBooleanType InvokeDel
         /*
           Delegate requires a particular image format.
         */
+        if ((strpbrk(image_info->filename,ProhibitedAlphabet) != (char *) NULL) ||
+            (strpbrk(image->filename,ProhibitedAlphabet) != (char *) NULL))
+          {
+            ThrowFileException(exception,FileOpenError,
+              "FilenameContainsProhibitedCharacters",image->filename);
+            return(MagickFalse);
+          }
         if (AcquireUniqueFilename(image_info->unique) == MagickFalse)
           {
             ThrowFileException(exception,FileOpenError,
@@@@ -853,18 +862,25 @@@@ MagickExport MagickBooleanType InvokeDel
   for (i=0; commands[i] != (char *) NULL; i++)
   {
     status=MagickFalse;
+    if ((strpbrk(image_info->filename,ProhibitedAlphabet) != (char *) NULL) ||
+        (strpbrk(image->filename,ProhibitedAlphabet) != (char *) NULL))
+      {
+        ThrowFileException(exception,FileOpenError,
+          "FilenameContainsProhibitedCharacters",image->filename);
+        break;
+      }
     if (AcquireUniqueFilename(image_info->unique) == MagickFalse)
       {
         ThrowFileException(exception,FileOpenError,
           "UnableToCreateTemporaryFile",image_info->unique);
-        return(MagickFalse);
+        break;
       }
     if (AcquireUniqueFilename(image_info->zero) == MagickFalse)
       {
         (void) RelinquishUniqueFileResource(image_info->unique);
         ThrowFileException(exception,FileOpenError,
           "UnableToCreateTemporaryFile",image_info->zero);
-        return(MagickFalse);
+        break;
       }
     command=TranslateText(image_info,image,commands[i]);
     if (command == (char *) NULL)
@


1.1.2.1
log
@Prevent shell command injection in delegate code (via file names).
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=345238 (CVE-2005-4601)

from debian
@
text
@a0 67
$OpenBSD$
--- magick/delegate.c.orig	Sun Jan 29 09:08:37 2006
+++ magick/delegate.c	Sun Jan 29 09:16:41 2006
@@@@ -647,6 +647,8 @@@@ static unsigned int InitializeDelegateLi
 MagickExport unsigned int InvokeDelegate(ImageInfo *image_info,Image *image,
   const char *decode,const char *encode,ExceptionInfo *exception)
 {
+#define ProhibitedAlphabet  "*?\"'<>|`$"
+
   char
     *command,
     **commands,
@@@@ -701,9 +703,9 @@@@ MagickExport unsigned int InvokeDelegate
         }
       image_info->temporary=True;
     }
-  if (delegate_info->mode != 0)
-    if (((decode != False)&& (delegate_info->encode != (char *) NULL)) ||
-        ((encode != False) && (delegate_info->decode != (char *) NULL)))
+  if ((delegate_info->mode != 0) &&
+      (((decode != False) && (delegate_info->encode != (char *) NULL)) ||
+       ((encode != False) && (delegate_info->decode != (char *) NULL))))
       {
         char
           filename[MaxTextExtent],
@@@@ -718,6 +720,13 @@@@ MagickExport unsigned int InvokeDelegate
         /*
           Delegate requires a particular image format.
         */
+        if ((strpbrk(image_info->filename,ProhibitedAlphabet) != (char *) NULL) ||
+            (strpbrk(image->filename,ProhibitedAlphabet) != (char *) NULL))
+          {
+            ThrowFileException(exception,FileOpenError,
+              "FilenameContainsProhibitedCharacters",image->filename);
+            return(False);
+          }
         if (AcquireUniqueFilename(image_info->unique) == False)
           {
             ThrowFileException(exception,FileOpenError,
@@@@ -796,18 +805,25 @@@@ MagickExport unsigned int InvokeDelegate
   for (i=0; commands[i] != (char *) NULL; i++)
   {
     status=False;
+    if ((strpbrk(image_info->filename,ProhibitedAlphabet) != (char *) NULL) ||
+        (strpbrk(image->filename,ProhibitedAlphabet) != (char *) NULL))
+      {
+        ThrowFileException(exception,FileOpenError,
+          "FilenameContainsProhibitedCharacters",image->filename);
+        break;
+      }
     if (AcquireUniqueFilename(image_info->unique) == False)
       {
         ThrowFileException(exception,FileOpenError,
           "UnableToCreateTemporaryFile",image_info->unique);
-        return(False);
+        break;
       }
     if (AcquireUniqueFilename(image_info->zero) == False)
       {
         (void) RelinquishUniqueFileResource(image_info->unique);
         ThrowFileException(exception,FileOpenError,
           "UnableToCreateTemporaryFile",image_info->zero);
-        return(False);
+        break;
       }
     command=TranslateText(image_info,image,commands[i]);
     if (command == (char *) NULL)
@

