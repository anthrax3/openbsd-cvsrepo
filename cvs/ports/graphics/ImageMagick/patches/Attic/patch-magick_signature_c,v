head	1.6;
access;
symbols
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2008.11.20.13.29.56;	author okan;	state dead;
branches;
next	1.5;

1.5
date	2007.04.08.15.22.50;	author steven;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.27.17.40.05;	author bernd;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.04.14.39.21;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.31.04.23.42;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.13.20.14.18;	author marc;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- long awaited update ImageMagick to 6.4.5-6
- now includes perl modules, superseding graphics/p5-PerlMagick

feedback from ajacoutot@@, kili@@ and naddy@@ (and bulk)

ok kili@@
@
text
@$OpenBSD: patch-magick_signature_c,v 1.5 2007/04/08 15:22:50 steven Exp $
--- magick/signature.c.orig	Mon Jan  8 05:28:26 2007
+++ magick/signature.c	Sun Apr  8 09:38:55 2007
@@@@ -366,8 +366,19 @@@@ static void TransformSignature(SignatureInfo *signatur
     T2,
     W[64];
 
+  unsigned int
+    uT;
+
   shift=32;
   p=signature_info->message;
+
+  /*
+   * The original code was incorrect on sparc64 (and other arches) in that it
+   * assumes that &signature_info->message is on the appropriate boundary
+   * to cast to an unsigned long.   It isn't.   It causes a bus error
+   * on sparc64.   This code is not much better and assumes that an
+   * unsigned int is 4 bytes long.  At least it doesn't get a bus error.
+   */
   if (signature_info->lsb_first == MagickFalse)
     {
       if (sizeof(unsigned long) <= 4)
@@@@ -378,12 +389,11 @@@@ static void TransformSignature(SignatureInfo *signatur
           W[i]=Trunc32(T);
         }
       else
-        for (i=0; i < 16; i+=2)
+        for (i=0; i < 16; i++)
         {
-          T=(*((unsigned long *) p));
-          p+=8;
-          W[i]=Trunc32(T >> shift);
-          W[i+1]=Trunc32(T);
+	  uT=(*((unsigned int *) p));
+	  p+=4;
+	  W[i]=uT;
         }
     }
   else
@@@@ -396,15 +406,12 @@@@ static void TransformSignature(SignatureInfo *signatur
           ((T >> 8) & 0x0000ff00) | ((T >> 24) & 0x000000ff);
       }
     else
-      for (i=0; i < 16; i+=2)
+      for (i=0; i < 16; i++)
       {
-        T=(*((unsigned long *) p));
-        p+=8;
-        W[i]=((T << 24) & 0xff000000) | ((T << 8) & 0x00ff0000) |
-          ((T >> 8) & 0x0000ff00) | ((T >> 24) & 0x000000ff);
-        T>>=shift;
-        W[i+1]=((T << 24) & 0xff000000) | ((T << 8) & 0x00ff0000) |
-          ((T >> 8) & 0x0000ff00) | ((T >> 24) & 0x000000ff);
+	uT=(*((unsigned int *) p));
+	p+=4;
+	W[i]=((uT << 24) & 0xff000000) | ((uT << 8) & 0x00ff0000) |
+	  ((uT >> 8) & 0x0000ff00) | ((uT >> 24) & 0x000000ff);
       }
   /*
     Copy digest to registers.
@


1.5
log
@unbreak build with latest png, regen patches.  "get it in" naddy@@
@
text
@d1 1
a1 1
$OpenBSD: patch-magick_signature_c,v 1.4 2006/01/27 17:40:05 bernd Exp $
@


1.4
log
@Update to ImageMagick and p5-PerlMagick version 6.2.6.0.

help, testing and "go ahead" steven@@
@
text
@d1 4
a4 4
$OpenBSD: patch-magick_signature_c,v 1.3 2005/06/04 14:39:21 naddy Exp $
--- magick/signature.c.orig	Sun Oct  9 03:55:52 2005
+++ magick/signature.c	Tue Jan 17 13:16:17 2006
@@@@ -366,8 +366,19 @@@@ static void TransformSignature(Signature
d24 1
a24 1
@@@@ -378,12 +389,11 @@@@ static void TransformSignature(Signature
d41 1
a41 1
@@@@ -396,15 +406,12 @@@@ static void TransformSignature(Signature
@


1.3
log
@Update to 6.2.3:
* Fixed an obscure heap-overflow vulnerability in the PNM reader.
* Avoid infinite loop if bogus XWD rad/green/blue masks are 0.

Also:
* Regression test fixes.
* No need to remove previously installed ImageMagick.

From new maintainer Bernd Ahlers <b.ahlers@@ba-net.org>.
@
text
@d1 4
a4 4
$OpenBSD: patch-magick_signature_c,v 1.2 2005/03/31 04:23:42 pvalchev Exp $
--- magick/signature.c.orig	Tue May 24 00:32:49 2005
+++ magick/signature.c	Sun May 29 20:00:07 2005
@@@@ -369,8 +369,19 @@@@ static void TransformSignature(Signature
d24 1
a24 1
@@@@ -381,12 +392,11 @@@@ static void TransformSignature(Signature
d41 1
a41 1
@@@@ -399,15 +409,12 @@@@ static void TransformSignature(Signature
@


1.2
log
@update to ImageMagick-6.2.0-8; Bernd Ahlers <b.ahlers@@ba-net.org>
@
text
@d1 4
a4 4
$OpenBSD: patch-magick_signature_c,v 1.1 2004/11/13 20:14:18 marc Exp $
--- magick/signature.c.orig	Tue Jan 18 14:07:40 2005
+++ magick/signature.c	Tue Jan 18 14:12:25 2005
@@@@ -368,8 +368,19 @@@@ static void TransformSignature(Signature
d24 1
a24 1
@@@@ -380,12 +391,11 @@@@ static void TransformSignature(Signature
d41 1
a41 1
@@@@ -398,15 +408,12 @@@@ static void TransformSignature(Signature
@


1.1
log
@
Casting a structure element address to (unsigned long *) and
then dereferencing can give you a bus error on sparc64 and
other arches with stricter address alignment requirements than
i386.   "Please commit this" brad@@
@
text
@d1 4
a4 4
$OpenBSD$
--- magick/signature.c.orig	Sat Mar 20 08:25:06 2004
+++ magick/signature.c	Thu Nov 11 13:13:09 2004
@@@@ -367,8 +367,19 @@@@ static void TransformSignature(Signature
d21 1
a21 1
   if (signature_info->lsb_first == False)
d24 1
a24 1
@@@@ -379,12 +390,11 @@@@ static void TransformSignature(Signature
d35 3
a37 3
+          uT=(*((unsigned int *) p));
+          p+=4;
+          W[i]=uT;
d41 1
a41 1
@@@@ -397,15 +407,12 @@@@ static void TransformSignature(Signature
d55 4
a58 4
+        uT=(*((unsigned int *) p));
+        p+=4;
+        W[i]=((uT << 24) & 0xff000000) | ((uT << 8) & 0x00ff0000) |
+          ((uT >> 8) & 0x0000ff00) | ((uT >> 24) & 0x000000ff);
@

