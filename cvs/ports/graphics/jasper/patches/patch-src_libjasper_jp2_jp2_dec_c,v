head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.28
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.26
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.24
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	brad_2004-05-14:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.11.06.22.28.29;	author sthen;	state Exp;
branches;
next	1.2;
commitid	4ni4D6u36mcuFV1W;

1.2
date	2008.05.17.09.32.16;	author espie;	state Exp;
branches
	1.2.32.1;
next	1.1;

1.1
date	2004.05.14.05.33.57;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.14.05.33.57;	author brad;	state Exp;
branches;
next	;

1.2.32.1
date	2015.11.12.13.06.48;	author jasper;	state Exp;
branches;
next	;
commitid	dUxoBTuucapicQcU;


desc
@@


1.3
log
@add security fixes to graphics/jasper, from Slackware via patrick keshishian

CVE-2014-8137: double-free
CVE-2014-8138: heap-based buffer overflow
CVE-2014-8157: off-by-one
CVE-2014-8158: multiple stack-based buffer overflows
CVE-2014-9029: multiple off-by-one
@
text
@$OpenBSD: patch-src_libjasper_jp2_jp2_dec_c,v 1.2 2008/05/17 09:32:16 espie Exp $

Security fixes from Slackware:
	CVE-2014-8137: double-free
	CVE-2014-8138: heap-based buffer overflow

--- src/libjasper/jp2/jp2_dec.c.orig	Fri Jan 19 13:43:05 2007
+++ src/libjasper/jp2/jp2_dec.c	Thu Oct 29 22:04:41 2015
@@@@ -291,9 +291,14 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
 	case JP2_COLR_ICC:
 		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,
 		  dec->colr->data.colr.iccplen);
-		assert(iccprof);
+		if (!iccprof) {
+			jas_eprintf("error: failed to parse ICC profile\n");
+			goto error;
+		}
 		jas_iccprof_gethdr(iccprof, &icchdr);
-		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);
+		if (jas_getdbglevel() >= 1) {
+			jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);
+		}
 		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));
 		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);
 		assert(dec->image->cmprof_);
@@@@ -336,7 +341,7 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
 	}
 
 	/* Allocate space for the channel-number to component-number LUT. */
-	if (!(dec->chantocmptlut = jas_malloc(dec->numchans * sizeof(uint_fast16_t)))) {
+	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))) {
 		jas_eprintf("error: no memory\n");
 		goto error;
 	}
@@@@ -354,7 +359,7 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
 			if (cmapent->map == JP2_CMAP_DIRECT) {
 				dec->chantocmptlut[channo] = channo;
 			} else if (cmapent->map == JP2_CMAP_PALETTE) {
-				lutents = jas_malloc(pclrd->numlutents * sizeof(int_fast32_t));
+				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));
 				for (i = 0; i < pclrd->numlutents; ++i) {
 					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];
 				}
@@@@ -386,6 +391,11 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
 	/* Determine the type of each component. */
 	if (dec->cdef) {
 		for (i = 0; i < dec->numchans; ++i) {
+			/* Is the channel number reasonable? */
+			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {
+				jas_eprintf("error: invalid channel number in CDEF box\n");
+				goto error;
+			}
 			jas_image_setcmpttype(dec->image,
 			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],
 			  jp2_getct(jas_image_clrspc(dec->image),
@


1.2
log
@tidy up a few warnings.
with help from naddy@@
@
text
@d1 11
a11 4
$OpenBSD: patch-src_libjasper_jp2_jp2_dec_c,v 1.1.1.1 2004/05/14 05:33:57 brad Exp $
--- src/libjasper/jp2/jp2_dec.c.orig	Fri Jan 19 22:43:05 2007
+++ src/libjasper/jp2/jp2_dec.c	Fri May 16 21:27:34 2008
@@@@ -293,7 +293,9 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
d13 5
a17 1
 		assert(iccprof);
d26 1
a26 1
@@@@ -336,7 +338,7 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
d35 1
a35 1
@@@@ -354,7 +356,7 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
d44 12
@


1.2.32.1
log
@add security fixes to graphics/jasper, from Slackware via patrick keshishian

CVE-2014-8137: double-free
CVE-2014-8138: heap-based buffer overflow
CVE-2014-8157: off-by-one
CVE-2014-8158: multiple stack-based buffer overflows
CVE-2014-9029: multiple off-by-one
@
text
@d1 4
a4 11
$OpenBSD: patch-src_libjasper_jp2_jp2_dec_c,v 1.3 2015/11/06 22:28:29 sthen Exp $

Security fixes from Slackware:
	CVE-2014-8137: double-free
	CVE-2014-8138: heap-based buffer overflow

--- src/libjasper/jp2/jp2_dec.c.orig	Fri Jan 19 13:43:05 2007
+++ src/libjasper/jp2/jp2_dec.c	Thu Oct 29 22:04:41 2015
@@@@ -291,9 +291,14 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
 	case JP2_COLR_ICC:
 		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,
d6 1
a6 5
-		assert(iccprof);
+		if (!iccprof) {
+			jas_eprintf("error: failed to parse ICC profile\n");
+			goto error;
+		}
d15 1
a15 1
@@@@ -336,7 +341,7 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
d24 1
a24 1
@@@@ -354,7 +359,7 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
a32 12
@@@@ -386,6 +391,11 @@@@ jas_image_t *jp2_decode(jas_stream_t *in, char *optstr
 	/* Determine the type of each component. */
 	if (dec->cdef) {
 		for (i = 0; i < dec->numchans; ++i) {
+			/* Is the channel number reasonable? */
+			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {
+				jas_eprintf("error: invalid channel number in CDEF box\n");
+				goto error;
+			}
 			jas_image_setcmpttype(dec->image,
 			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],
 			  jp2_getct(jas_image_clrspc(dec->image),
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- src/libjasper/jp2/jp2_dec.c.orig	2004-02-08 20:34:40.000000000 -0500
+++ src/libjasper/jp2/jp2_dec.c	2004-04-22 21:37:19.000000000 -0400
@@@@ -293,7 +293,9 @@@@ jas_image_t *jp2_decode(jas_stream_t *in
d15 18
@


1.1.1.1
log
@add jasper 1.701.0
--
The JasPer Project is a collaborative effort between Image Power,
Inc.  and the University of British Columbia. The objective of this
project is to develop a software-based reference implementation of
the codec specified in the JPEG-2000 Part-1 standard (i.e., ISO/IEC
15444-1). This software has also been submitted to the ISO for
inclusion in the JPEG-2000 Part-5 standard (as an official reference
implementation).
@
text
@@
