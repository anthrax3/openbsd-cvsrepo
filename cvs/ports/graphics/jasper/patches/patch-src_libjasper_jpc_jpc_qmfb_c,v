head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.28
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.26
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.24
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.11.06.22.28.29;	author sthen;	state Exp;
branches;
next	1.1;
commitid	4ni4D6u36mcuFV1W;

1.1
date	2008.05.17.09.32.16;	author espie;	state Exp;
branches
	1.1.32.1;
next	;

1.1.32.1
date	2015.11.12.13.06.48;	author jasper;	state Exp;
branches;
next	;
commitid	dUxoBTuucapicQcU;


desc
@@


1.2
log
@add security fixes to graphics/jasper, from Slackware via patrick keshishian

CVE-2014-8137: double-free
CVE-2014-8138: heap-based buffer overflow
CVE-2014-8157: off-by-one
CVE-2014-8158: multiple stack-based buffer overflows
CVE-2014-9029: multiple off-by-one
@
text
@$OpenBSD: patch-src_libjasper_jpc_jpc_qmfb_c,v 1.1 2008/05/17 09:32:16 espie Exp $

Security fix from Slackware:
	CVE-2014-8158: multiple stack-based buffer overflows

--- src/libjasper/jpc/jpc_qmfb.c.orig	Fri Jan 19 13:43:07 2007
+++ src/libjasper/jpc/jpc_qmfb.c	Thu Oct 29 22:06:54 2015
@@@@ -306,11 +306,7 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numcols, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
@@@@ -318,15 +314,13 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 	register int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
-#endif
 
 	if (numcols >= 2) {
 		hstartcol = (numcols + 1 - parity) >> 1;
@@@@ -360,12 +354,10 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -374,11 +366,7 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
@@@@ -386,15 +374,13 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 	register int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
-#endif
 
 	if (numrows >= 2) {
 		hstartcol = (numrows + 1 - parity) >> 1;
@@@@ -428,12 +414,10 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -442,11 +426,7 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize * JPC_QMFB_COLGRPSIZE];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -457,15 +437,13 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 	int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
-#endif
 
 	if (numrows >= 2) {
 		hstartcol = (numrows + 1 - parity) >> 1;
@@@@ -517,12 +495,10 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -531,11 +507,7 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize * numcols];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -546,15 +518,13 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 	int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Get a buffer. */
 	if (bufsize > QMFB_SPLITBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide in this case. */
 			abort();
 		}
 	}
-#endif
 
 	if (numrows >= 2) {
 		hstartcol = (numrows + 1 - parity) >> 1;
@@@@ -606,12 +576,10 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -619,26 +587,20 @@@@ void jpc_qmfb_join_row(jpc_fix_t *a, int numcols, int 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numcols, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
 	register int n;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
 	}
-#endif
 
 	hstartcol = (numcols + 1 - parity) >> 1;
 
@@@@ -670,12 +632,10 @@@@ void jpc_qmfb_join_row(jpc_fix_t *a, int numcols, int 
 		++srcptr;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -684,26 +644,20 @@@@ void jpc_qmfb_join_col(jpc_fix_t *a, int numrows, int 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
 	register int n;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
 	}
-#endif
 
 	hstartcol = (numrows + 1 - parity) >> 1;
 
@@@@ -735,12 +689,10 @@@@ void jpc_qmfb_join_col(jpc_fix_t *a, int numrows, int 
 		++srcptr;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -749,11 +701,7 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize * JPC_QMFB_COLGRPSIZE];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -763,15 +711,13 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 	register int i;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * JPC_QMFB_COLGRPSIZE * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
 	}
-#endif
 
 	hstartcol = (numrows + 1 - parity) >> 1;
 
@@@@ -821,12 +767,10 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 		srcptr += JPC_QMFB_COLGRPSIZE;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -835,11 +779,7 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize * numcols];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -849,15 +789,13 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 	register int i;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
 	/* Allocate memory for the join buffer from the heap. */
 	if (bufsize > QMFB_JOINBUFSIZE) {
-		if (!(buf = jas_malloc(bufsize * numcols * sizeof(jpc_fix_t)))) {
+		if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t)))) {
 			/* We have no choice but to commit suicide. */
 			abort();
 		}
 	}
-#endif
 
 	hstartcol = (numrows + 1 - parity) >> 1;
 
@@@@ -907,12 +845,10 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 		srcptr += numcols;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@


1.1
log
@tidy up a few warnings.
with help from naddy@@
@
text
@d1 24
a24 5
$OpenBSD$
--- src/libjasper/jpc/jpc_qmfb.c.orig	Fri Jan 19 22:43:07 2007
+++ src/libjasper/jpc/jpc_qmfb.c	Fri May 16 22:46:25 2008
@@@@ -321,7 +321,7 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 #if !defined(HAVE_VLA)
d32 35
a66 2
@@@@ -389,7 +389,7 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 #if !defined(HAVE_VLA)
d74 35
a108 2
@@@@ -460,7 +460,7 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 #if !defined(HAVE_VLA)
d116 35
a150 2
@@@@ -549,7 +549,7 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 #if !defined(HAVE_VLA)
d158 34
a191 2
@@@@ -633,7 +633,7 @@@@ void jpc_qmfb_join_row(jpc_fix_t *a, int numcols, int 
 #if !defined(HAVE_VLA)
d199 34
a232 2
@@@@ -698,7 +698,7 @@@@ void jpc_qmfb_join_col(jpc_fix_t *a, int numrows, int 
 #if !defined(HAVE_VLA)
d240 35
a274 2
@@@@ -766,7 +766,7 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 #if !defined(HAVE_VLA)
d282 35
a316 2
@@@@ -852,7 +852,7 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 #if !defined(HAVE_VLA)
d324 18
@


1.1.32.1
log
@add security fixes to graphics/jasper, from Slackware via patrick keshishian

CVE-2014-8137: double-free
CVE-2014-8138: heap-based buffer overflow
CVE-2014-8157: off-by-one
CVE-2014-8158: multiple stack-based buffer overflows
CVE-2014-9029: multiple off-by-one
@
text
@d1 5
a5 24
$OpenBSD: patch-src_libjasper_jpc_jpc_qmfb_c,v 1.2 2015/11/06 22:28:29 sthen Exp $

Security fix from Slackware:
	CVE-2014-8158: multiple stack-based buffer overflows

--- src/libjasper/jpc/jpc_qmfb.c.orig	Fri Jan 19 13:43:07 2007
+++ src/libjasper/jpc/jpc_qmfb.c	Thu Oct 29 22:06:54 2015
@@@@ -306,11 +306,7 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numcols, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
@@@@ -318,15 +314,13 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 	register int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d13 2
a14 35
 	}
-#endif
 
 	if (numcols >= 2) {
 		hstartcol = (numcols + 1 - parity) >> 1;
@@@@ -360,12 +354,10 @@@@ void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -374,11 +366,7 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
@@@@ -386,15 +374,13 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 	register int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d22 2
a23 35
 	}
-#endif
 
 	if (numrows >= 2) {
 		hstartcol = (numrows + 1 - parity) >> 1;
@@@@ -428,12 +414,10 @@@@ void jpc_qmfb_split_col(jpc_fix_t *a, int numrows, int
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -442,11 +426,7 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize * JPC_QMFB_COLGRPSIZE];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -457,15 +437,13 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 	int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d31 2
a32 35
 	}
-#endif
 
 	if (numrows >= 2) {
 		hstartcol = (numrows + 1 - parity) >> 1;
@@@@ -517,12 +495,10 @@@@ void jpc_qmfb_split_colgrp(jpc_fix_t *a, int numrows, 
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -531,11 +507,7 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t splitbuf[bufsize * numcols];
-#endif
 	jpc_fix_t *buf = splitbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -546,15 +518,13 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 	int m;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d40 2
a41 34
 	}
-#endif
 
 	if (numrows >= 2) {
 		hstartcol = (numrows + 1 - parity) >> 1;
@@@@ -606,12 +576,10 @@@@ void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, 
 		}
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the split buffer was allocated on the heap, free this memory. */
 	if (buf != splitbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -619,26 +587,20 @@@@ void jpc_qmfb_join_row(jpc_fix_t *a, int numcols, int 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numcols, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
 	register int n;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d49 2
a50 34
 	}
-#endif
 
 	hstartcol = (numcols + 1 - parity) >> 1;
 
@@@@ -670,12 +632,10 @@@@ void jpc_qmfb_join_row(jpc_fix_t *a, int numcols, int 
 		++srcptr;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -684,26 +644,20 @@@@ void jpc_qmfb_join_col(jpc_fix_t *a, int numrows, int 
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	register jpc_fix_t *srcptr;
 	register jpc_fix_t *dstptr;
 	register int n;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d58 2
a59 35
 	}
-#endif
 
 	hstartcol = (numrows + 1 - parity) >> 1;
 
@@@@ -735,12 +689,10 @@@@ void jpc_qmfb_join_col(jpc_fix_t *a, int numrows, int 
 		++srcptr;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -749,11 +701,7 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize * JPC_QMFB_COLGRPSIZE];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -763,15 +711,13 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 	register int i;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
d67 2
a68 35
 	}
-#endif
 
 	hstartcol = (numrows + 1 - parity) >> 1;
 
@@@@ -821,12 +767,10 @@@@ void jpc_qmfb_join_colgrp(jpc_fix_t *a, int numrows, i
 		srcptr += JPC_QMFB_COLGRPSIZE;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@@@@ -835,11 +779,7 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 {
 
 	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
-#if !defined(HAVE_VLA)
 	jpc_fix_t joinbuf[QMFB_JOINBUFSIZE * JPC_QMFB_COLGRPSIZE];
-#else
-	jpc_fix_t joinbuf[bufsize * numcols];
-#endif
 	jpc_fix_t *buf = joinbuf;
 	jpc_fix_t *srcptr;
 	jpc_fix_t *dstptr;
@@@@ -849,15 +789,13 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 	register int i;
 	int hstartcol;
 
-#if !defined(HAVE_VLA)
a75 18
 	}
-#endif
 
 	hstartcol = (numrows + 1 - parity) >> 1;
 
@@@@ -907,12 +845,10 @@@@ void jpc_qmfb_join_colres(jpc_fix_t *a, int numrows, i
 		srcptr += numcols;
 	}
 
-#if !defined(HAVE_VLA)
 	/* If the join buffer was allocated on the heap, free this memory. */
 	if (buf != joinbuf) {
 		jas_free(buf);
 	}
-#endif
 
 }
 
@


