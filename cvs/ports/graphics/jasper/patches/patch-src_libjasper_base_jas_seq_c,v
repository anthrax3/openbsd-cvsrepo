head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.6
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.28
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.26
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.24
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.02.04.10.08.07;	author jasper;	state Exp;
branches;
next	1.1;
commitid	CEUZk17YSfbqdjCS;

1.1
date	2008.05.17.09.32.16;	author espie;	state Exp;
branches
	1.1.32.1;
next	;

1.1.32.1
date	2016.02.04.10.10.25;	author jasper;	state Exp;
branches;
next	;
commitid	ZzOVNz2Po3I88jPe;


desc
@@


1.2
log
@Security fix for CVE-2016-2089, patch from redhat bz.

ok sthen@@
@
text
@$OpenBSD: patch-src_libjasper_base_jas_seq_c,v 1.1 2008/05/17 09:32:16 espie Exp $

Security fix for CVE-2016-2089, patch (rows_ NULL check) from RH:
https://bugzilla.redhat.com/show_bug.cgi?id=1302636

--- src/libjasper/base/jas_seq.c.orig	Thu Feb  4 10:57:40 2016
+++ src/libjasper/base/jas_seq.c	Thu Feb  4 10:57:15 2016
@@@@ -114,7 +114,7 @@@@ jas_matrix_t *jas_matrix_create(int numrows, int numco
 	matrix->datasize_ = numrows * numcols;
 
 	if (matrix->maxrows_ > 0) {
-		if (!(matrix->rows_ = jas_malloc(matrix->maxrows_ *
+		if (!(matrix->rows_ = jas_alloc2(matrix->maxrows_,
 		  sizeof(jas_seqent_t *)))) {
 			jas_matrix_destroy(matrix);
 			return 0;
@@@@ -122,7 +122,7 @@@@ jas_matrix_t *jas_matrix_create(int numrows, int numco
 	}
 
 	if (matrix->datasize_ > 0) {
-		if (!(matrix->data_ = jas_malloc(matrix->datasize_ *
+		if (!(matrix->data_ = jas_alloc2(matrix->datasize_,
 		  sizeof(jas_seqent_t)))) {
 			jas_matrix_destroy(matrix);
 			return 0;
@@@@ -220,7 +220,7 @@@@ void jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix
 	mat0->numrows_ = r1 - r0 + 1;
 	mat0->numcols_ = c1 - c0 + 1;
 	mat0->maxrows_ = mat0->numrows_;
-	mat0->rows_ = jas_malloc(mat0->maxrows_ * sizeof(jas_seqent_t *));
+	mat0->rows_ = jas_alloc2(mat0->maxrows_, sizeof(jas_seqent_t *));
 	for (i = 0; i < mat0->numrows_; ++i) {
 		mat0->rows_[i] = mat1->rows_[r0 + i] + c0;
 	}
@@@@ -262,6 +262,10 @@@@ void jas_matrix_divpow2(jas_matrix_t *matrix, int n)
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -282,6 +286,10 @@@@ void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_
 	jas_seqent_t *data;
 	int rowstep;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -306,6 +314,10 @@@@ void jas_matrix_asr(jas_matrix_t *matrix, int n)
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	assert(n >= 0);
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
@@@@ -325,6 +337,10 @@@@ void jas_matrix_asl(jas_matrix_t *matrix, int n)
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -367,6 +383,10 @@@@ void jas_matrix_setall(jas_matrix_t *matrix, jas_seqen
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -432,7 +452,8 @@@@ int jas_seq2d_output(jas_matrix_t *matrix, FILE *out)
 	for (i = 0; i < jas_matrix_numrows(matrix); ++i) {
 		for (j = 0; j < jas_matrix_numcols(matrix); ++j) {
 			x = jas_matrix_get(matrix, i, j);
-			sprintf(sbuf, "%s%4ld", (strlen(buf) > 0) ? " " : "",
+			snprintf(sbuf, sizeof sbuf, 
+			    "%s%4ld", (strlen(buf) > 0) ? " " : "",
 			  JAS_CAST(long, x));
 			n = strlen(buf);
 			if (n + strlen(sbuf) > MAXLINELEN) {
@@@@ -440,7 +461,7 @@@@ int jas_seq2d_output(jas_matrix_t *matrix, FILE *out)
 				fputs("\n", out);
 				buf[0] = '\0';
 			}
-			strcat(buf, sbuf);
+			strlcat(buf, sbuf, sizeof buf);
 			if (j == jas_matrix_numcols(matrix) - 1) {
 				fputs(buf, out);
 				fputs("\n", out);
@


1.1
log
@tidy up a few warnings.
with help from naddy@@
@
text
@d1 7
a7 3
$OpenBSD$
--- src/libjasper/base/jas_seq.c.orig	Fri Jan 19 22:43:05 2007
+++ src/libjasper/base/jas_seq.c	Fri May 16 21:13:18 2008
d35 56
a90 1
@@@@ -432,7 +432,8 @@@@ int jas_seq2d_output(jas_matrix_t *matrix, FILE *out)
d100 1
a100 1
@@@@ -440,7 +441,7 @@@@ int jas_seq2d_output(jas_matrix_t *matrix, FILE *out)
@


1.1.32.1
log
@Security fix for CVE-2016-2089, patch from redhat bz.
@
text
@d1 3
a3 7
$OpenBSD: patch-src_libjasper_base_jas_seq_c,v 1.2 2016/02/04 10:08:07 jasper Exp $

Security fix for CVE-2016-2089, patch (rows_ NULL check) from RH:
https://bugzilla.redhat.com/show_bug.cgi?id=1302636

--- src/libjasper/base/jas_seq.c.orig	Thu Feb  4 10:57:40 2016
+++ src/libjasper/base/jas_seq.c	Thu Feb  4 10:57:15 2016
d31 1
a31 56
@@@@ -262,6 +262,10 @@@@ void jas_matrix_divpow2(jas_matrix_t *matrix, int n)
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -282,6 +286,10 @@@@ void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_
 	jas_seqent_t *data;
 	int rowstep;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -306,6 +314,10 @@@@ void jas_matrix_asr(jas_matrix_t *matrix, int n)
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	assert(n >= 0);
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
@@@@ -325,6 +337,10 @@@@ void jas_matrix_asl(jas_matrix_t *matrix, int n)
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -367,6 +383,10 @@@@ void jas_matrix_setall(jas_matrix_t *matrix, jas_seqen
 	int rowstep;
 	jas_seqent_t *data;
 
+	if (!matrix->rows_) {
+		return;
+	}
+
 	rowstep = jas_matrix_rowstep(matrix);
 	for (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,
 	  rowstart += rowstep) {
@@@@ -432,7 +452,8 @@@@ int jas_seq2d_output(jas_matrix_t *matrix, FILE *out)
d41 1
a41 1
@@@@ -440,7 +461,7 @@@@ int jas_seq2d_output(jas_matrix_t *matrix, FILE *out)
@


