head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.18
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.16
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	brad_2004-05-14:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.04.20.15.25.35;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.17.09.32.16;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.29.13.43.53;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2004.05.14.05.33.57;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.14.05.33.57;	author brad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Security:
Fixes for heap overflows CVE-2011-4516, CVE-2011-4517.  From FreeBSD/Debian.

While here, trim DESCR, routine cleanups.
@
text
@$OpenBSD: patch-src_libjasper_jpc_jpc_cs_c,v 1.3 2008/05/17 09:32:16 espie Exp $
--- src/libjasper/jpc/jpc_cs.c.orig	Fri Jan 19 22:43:07 2007
+++ src/libjasper/jpc/jpc_cs.c	Fri Apr 19 18:32:09 2013
@@@@ -502,7 +502,7 @@@@ static int jpc_siz_getparms(jpc_ms_t *ms, jpc_cstate_t
 	  !siz->tileheight || !siz->numcomps) {
 		return -1;
 	}
-	if (!(siz->comps = jas_malloc(siz->numcomps * sizeof(jpc_sizcomp_t)))) {
+	if (!(siz->comps = jas_alloc2(siz->numcomps, sizeof(jpc_sizcomp_t)))) {
 		return -1;
 	}
 	for (i = 0; i < siz->numcomps; ++i) {
@@@@ -744,6 +744,10 @@@@ static int jpc_cox_getcompparms(jpc_ms_t *ms, jpc_csta
 		return -1;
 	}
 	compparms->numrlvls = compparms->numdlvls + 1;
+	if (compparms->numrlvls > JPC_MAXRLVLS) {
+		jpc_cox_destroycompparms(compparms);
+		return -1;
+	}
 	if (prtflag) {
 		for (i = 0; i < compparms->numrlvls; ++i) {
 			if (jpc_getuint8(in, &tmp)) {
@@@@ -982,8 +986,12 @@@@ static int jpc_qcx_getcompparms(jpc_qcxcp_t *compparms
 		compparms->numstepsizes = (len - n) / 2;
 		break;
 	}
+	if (compparms->numstepsizes > 3 * JPC_MAXRLVLS + 1) {
+		jpc_qcx_destroycompparms(compparms);
+		return -1;
+	}
 	if (compparms->numstepsizes > 0) {
-		compparms->stepsizes = jas_malloc(compparms->numstepsizes *
+		compparms->stepsizes = jas_alloc2(compparms->numstepsizes,
 		  sizeof(uint_fast16_t));
 		assert(compparms->stepsizes);
 		for (i = 0; i < compparms->numstepsizes; ++i) {
@@@@ -1091,7 +1099,7 @@@@ static int jpc_ppm_getparms(jpc_ms_t *ms, jpc_cstate_t
 
 	ppm->len = ms->len - 1;
 	if (ppm->len > 0) {
-		if (!(ppm->data = jas_malloc(ppm->len * sizeof(unsigned char)))) {
+		if (!(ppm->data = jas_malloc(ppm->len))) {
 			goto error;
 		}
 		if (JAS_CAST(uint, jas_stream_read(in, ppm->data, ppm->len)) != ppm->len) {
@@@@ -1160,7 +1168,7 @@@@ static int jpc_ppt_getparms(jpc_ms_t *ms, jpc_cstate_t
 	}
 	ppt->len = ms->len - 1;
 	if (ppt->len > 0) {
-		if (!(ppt->data = jas_malloc(ppt->len * sizeof(unsigned char)))) {
+		if (!(ppt->data = jas_malloc(ppt->len))) {
 			goto error;
 		}
 		if (jas_stream_read(in, (char *) ppt->data, ppt->len) != JAS_CAST(int, ppt->len)) {
@@@@ -1223,7 +1231,7 @@@@ static int jpc_poc_getparms(jpc_ms_t *ms, jpc_cstate_t
 	uint_fast8_t tmp;
 	poc->numpchgs = (cstate->numcomps > 256) ? (ms->len / 9) :
 	  (ms->len / 7);
-	if (!(poc->pchgs = jas_malloc(poc->numpchgs * sizeof(jpc_pocpchg_t)))) {
+	if (!(poc->pchgs = jas_alloc2(poc->numpchgs, sizeof(jpc_pocpchg_t)))) {
 		goto error;
 	}
 	for (pchgno = 0, pchg = poc->pchgs; pchgno < poc->numpchgs; ++pchgno,
@@@@ -1328,7 +1336,7 @@@@ static int jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t
 	jpc_crgcomp_t *comp;
 	uint_fast16_t compno;
 	crg->numcomps = cstate->numcomps;
-	if (!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))) {
+	if (!(crg->comps = jas_alloc2(cstate->numcomps, sizeof(jpc_crgcomp_t)))) {
 		return -1;
 	}
 	for (compno = 0, comp = crg->comps; compno < cstate->numcomps;
@@@@ -1467,7 +1475,7 @@@@ static int jpc_unk_getparms(jpc_ms_t *ms, jpc_cstate_t
 	cstate = 0;
 
 	if (ms->len > 0) {
-		if (!(unk->data = jas_malloc(ms->len * sizeof(unsigned char)))) {
+		if (!(unk->data = jas_malloc(ms->len))) {
 			return -1;
 		}
 		if (jas_stream_read(in, (char *) unk->data, ms->len) != JAS_CAST(int, ms->len)) {
@


1.3
log
@tidy up a few warnings.
with help from naddy@@
@
text
@d1 3
a3 3
$OpenBSD$
--- src/libjasper/jpc/jpc_cs.c.orig	Fri May 16 21:00:25 2008
+++ src/libjasper/jpc/jpc_cs.c	Fri May 16 21:05:18 2008
d13 13
a25 1
@@@@ -983,7 +983,7 @@@@ static int jpc_qcx_getcompparms(jpc_qcxcp_t *compparms
d28 4
d38 1
a38 1
@@@@ -1091,7 +1091,7 @@@@ static int jpc_ppm_getparms(jpc_ms_t *ms, jpc_cstate_t
d47 1
a47 1
@@@@ -1160,7 +1160,7 @@@@ static int jpc_ppt_getparms(jpc_ms_t *ms, jpc_cstate_t
d56 1
a56 1
@@@@ -1223,7 +1223,7 @@@@ static int jpc_poc_getparms(jpc_ms_t *ms, jpc_cstate_t
d65 1
a65 1
@@@@ -1328,7 +1328,7 @@@@ static int jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t
d70 1
a70 1
+	if (!(crg->comps = jas_alloc2(cstate->numcomps, sizeof(uint_fast16_t)))) {
d74 1
a74 1
@@@@ -1467,7 +1467,7 @@@@ static int jpc_unk_getparms(jpc_ms_t *ms, jpc_cstate_t
@


1.2
log
@update myself to 1.900.1

ok ajacoutot@@
@
text
@d1 28
a28 11
$OpenBSD: patch-src_libjasper_jpc_jpc_cs_c,v 1.1 2004/05/14 05:33:57 brad Exp $
--- src/libjasper/jpc/jpc_cs.c.orig	2004-02-08 20:34:40.000000000 -0500
+++ src/libjasper/jpc/jpc_cs.c	2004-04-22 21:37:19.000000000 -0400
@@@@ -639,7 +639,7 @@@@ static int jpc_cod_dumpparms(jpc_ms_t *m
 	  cod->compparms.cblksty);
 	if (cod->csty & JPC_COX_PRT) {
 		for (i = 0; i < cod->compparms.numrlvls; ++i) {
-			fprintf(stderr, "prcwidth[%d] = %d, prcheight[%d] = %d\n",
+			fprintf(out, "prcwidth[%d] = %d, prcheight[%d] = %d\n",
 			  i, cod->compparms.rlvls[i].parwidthval,
 			  i, cod->compparms.rlvls[i].parheightval);
d30 37
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@add jasper 1.701.0
--
The JasPer Project is a collaborative effort between Image Power,
Inc.  and the University of British Columbia. The objective of this
project is to develop a software-based reference implementation of
the codec specified in the JPEG-2000 Part-1 standard (i.e., ISO/IEC
15444-1). This software has also been submitted to the ISO for
inclusion in the JPEG-2000 Part-5 standard (as an official reference
implementation).
@
text
@@
