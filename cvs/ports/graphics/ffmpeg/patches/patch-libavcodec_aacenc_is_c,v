head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.6
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5;
locks; strict;
comment	@# @;


1.5
date	2016.01.18.15.34.45;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	RwM3NoHU9JMWKEgE;

1.4
date	2016.01.14.06.09.43;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	1MTT7RUn5DsgY3tS;

1.3
date	2015.12.06.08.51.46;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	qmMp5nlfDfTw8ZGw;

1.2
date	2015.10.13.05.44.18;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	qst9LZIZleMKOm5n;

1.1
date	2015.09.12.09.44.54;	author ajacoutot;	state Exp;
branches;
next	;
commitid	2zCvmn8WdgiiJ5l4;


desc
@@


1.5
log
@Moar AAC.

from Brad (maintainer)
@
text
@$OpenBSD: patch-libavcodec_aacenc_is_c,v 1.4 2016/01/14 06:09:43 ajacoutot Exp $

aacenc_is: ignore PNS band types

aacenc_is: take absolute coefficient value upon energy calculations

AAC encoder: Extensive improvements

aacenc_is: rename variable

AAC encoder: in IS, fix index of sf_idx, band_type

AAC encoder: fix I/S relative error evaluation

AAC encoder: encode out-of-phase I/S efficiently

avcodec/aacenc_is: replace pow(x, 0.75) by x/sqrtf(sqrtf(x))

AAC encoder: use signed coeffs when measuring IS energy

--- libavcodec/aacenc_is.c.orig	Wed Jan 13 15:27:48 2016
+++ libavcodec/aacenc_is.c	Sun Jan 17 21:03:19 2016
@@@@ -45,11 +45,16 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
     float dist1 = 0.0f, dist2 = 0.0f;
     struct AACISError is_error = {0};
 
+    if (ener01 <= 0 || ener0 <= 0) {
+        is_error.pass = 0;
+        return is_error;
+    }
+
     for (w2 = 0; w2 < sce0->ics.group_len[w]; w2++) {
         FFPsyBand *band0 = &s->psy.ch[s->cur_channel+0].psy_bands[(w+w2)*16+g];
         FFPsyBand *band1 = &s->psy.ch[s->cur_channel+1].psy_bands[(w+w2)*16+g];
-        int is_band_type, is_sf_idx = FFMAX(1, sce0->sf_idx[(w+w2)*16+g]-4);
-        float e01_34 = phase*pow(ener1/ener0, 3.0/4.0);
+        int is_band_type, is_sf_idx = FFMAX(1, sce0->sf_idx[w*16+g]-4);
+        float e01_34 = phase*pos_pow34(ener1/ener0);
         float maxval, dist_spec_err = 0.0f;
         float minthr = FFMIN(band0->threshold, band1->threshold);
         for (i = 0; i < sce0->ics.swb_sizes[g]; i++)
@@@@ -61,17 +66,17 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
         is_band_type = find_min_book(maxval, is_sf_idx);
         dist1 += quantize_band_cost(s, &L[start + (w+w2)*128], L34,
                                     sce0->ics.swb_sizes[g],
-                                    sce0->sf_idx[(w+w2)*16+g],
-                                    sce0->band_type[(w+w2)*16+g],
-                                    s->lambda / band0->threshold, INFINITY, NULL, 0);
+                                    sce0->sf_idx[w*16+g],
+                                    sce0->band_type[w*16+g],
+                                    s->lambda / band0->threshold, INFINITY, NULL, NULL, 0);
         dist1 += quantize_band_cost(s, &R[start + (w+w2)*128], R34,
                                     sce1->ics.swb_sizes[g],
-                                    sce1->sf_idx[(w+w2)*16+g],
-                                    sce1->band_type[(w+w2)*16+g],
-                                    s->lambda / band1->threshold, INFINITY, NULL, 0);
+                                    sce1->sf_idx[w*16+g],
+                                    sce1->band_type[w*16+g],
+                                    s->lambda / band1->threshold, INFINITY, NULL, NULL, 0);
         dist2 += quantize_band_cost(s, IS, I34, sce0->ics.swb_sizes[g],
                                     is_sf_idx, is_band_type,
-                                    s->lambda / minthr, INFINITY, NULL, 0);
+                                    s->lambda / minthr, INFINITY, NULL, NULL, 0);
         for (i = 0; i < sce0->ics.swb_sizes[g]; i++) {
             dist_spec_err += (L34[i] - I34[i])*(L34[i] - I34[i]);
             dist_spec_err += (R34[i] - I34[i]*e01_34)*(R34[i] - I34[i]*e01_34);
@@@@ -82,9 +87,10 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
 
     is_error.pass = dist2 <= dist1;
     is_error.phase = phase;
-    is_error.error = fabsf(dist1 - dist2);
+    is_error.error = dist2 - dist1;
     is_error.dist1 = dist1;
     is_error.dist2 = dist2;
+    is_error.ener01 = ener01;
 
     return is_error;
 }
@@@@ -93,42 +99,58 @@@@ void ff_aac_search_for_is(AACEncContext *s, AVCodecCon
 {
     SingleChannelElement *sce0 = &cpe->ch[0];
     SingleChannelElement *sce1 = &cpe->ch[1];
-    int start = 0, count = 0, w, w2, g, i;
+    int start = 0, count = 0, w, w2, g, i, prev_sf1 = -1, prev_bt = -1, prev_is = 0;
     const float freq_mult = avctx->sample_rate/(1024.0f/sce0->ics.num_windows)/2.0f;
+    uint8_t nextband1[128];
 
     if (!cpe->common_window)
         return;
 
+    /** Scout out next nonzero bands */
+    ff_init_nextband_map(sce1, nextband1);
+
     for (w = 0; w < sce0->ics.num_windows; w += sce0->ics.group_len[w]) {
         start = 0;
         for (g = 0;  g < sce0->ics.num_swb; g++) {
             if (start*freq_mult > INT_STEREO_LOW_LIMIT*(s->lambda/170.0f) &&
                 cpe->ch[0].band_type[w*16+g] != NOISE_BT && !cpe->ch[0].zeroes[w*16+g] &&
-                cpe->ch[1].band_type[w*16+g] != NOISE_BT && !cpe->ch[1].zeroes[w*16+g]) {
-                float ener0 = 0.0f, ener1 = 0.0f, ener01 = 0.0f;
-                struct AACISError ph_err1, ph_err2, *erf;
+                cpe->ch[1].band_type[w*16+g] != NOISE_BT && !cpe->ch[1].zeroes[w*16+g] &&
+                ff_sfdelta_can_remove_band(sce1, nextband1, prev_sf1, w*16+g)) {
+                float ener0 = 0.0f, ener1 = 0.0f, ener01 = 0.0f, ener01p = 0.0f;
+                struct AACISError ph_err1, ph_err2, *best;
                 for (w2 = 0; w2 < sce0->ics.group_len[w]; w2++) {
                     for (i = 0; i < sce0->ics.swb_sizes[g]; i++) {
-                        float coef0 = sce0->pcoeffs[start+(w+w2)*128+i];
-                        float coef1 = sce1->pcoeffs[start+(w+w2)*128+i];
+                        float coef0 = sce0->coeffs[start+(w+w2)*128+i];
+                        float coef1 = sce1->coeffs[start+(w+w2)*128+i];
                         ener0  += coef0*coef0;
                         ener1  += coef1*coef1;
                         ener01 += (coef0 + coef1)*(coef0 + coef1);
+                        ener01p += (coef0 - coef1)*(coef0 - coef1);
                     }
                 }
                 ph_err1 = ff_aac_is_encoding_err(s, cpe, start, w, g,
-                                                 ener0, ener1, ener01, 0, -1);
+                                                 ener0, ener1, ener01p, 0, -1);
                 ph_err2 = ff_aac_is_encoding_err(s, cpe, start, w, g,
                                                  ener0, ener1, ener01, 0, +1);
-                erf = ph_err1.error < ph_err2.error ? &ph_err1 : &ph_err2;
-                if (erf->pass) {
+                best = (ph_err1.pass && ph_err1.error < ph_err2.error) ? &ph_err1 : &ph_err2;
+                if (best->pass) {
                     cpe->is_mask[w*16+g] = 1;
-                    cpe->ch[0].is_ener[w*16+g] = sqrt(ener0/ener01);
+                    cpe->ms_mask[w*16+g] = 0;
+                    cpe->ch[0].is_ener[w*16+g] = sqrt(ener0 / best->ener01);
                     cpe->ch[1].is_ener[w*16+g] = ener0/ener1;
-                    cpe->ch[1].band_type[w*16+g] = erf->phase ? INTENSITY_BT : INTENSITY_BT2;
+                    cpe->ch[1].band_type[w*16+g] = (best->phase > 0) ? INTENSITY_BT : INTENSITY_BT2;
+                    if (prev_is && prev_bt != cpe->ch[1].band_type[w*16+g]) {
+                        /** Flip M/S mask and pick the other CB, since it encodes more efficiently */
+                        cpe->ms_mask[w*16+g] = 1;
+                        cpe->ch[1].band_type[w*16+g] = (best->phase > 0) ? INTENSITY_BT2 : INTENSITY_BT;
+                    }
+                    prev_bt = cpe->ch[1].band_type[w*16+g];
                     count++;
                 }
             }
+            if (!sce1->zeroes[w*16+g] && sce1->band_type[w*16+g] < RESERVED_BT)
+                prev_sf1 = sce1->sf_idx[w*16+g];
+            prev_is = cpe->is_mask[w*16+g];
             start += sce0->ics.swb_sizes[g];
         }
     }
@


1.4
log
@Update to ffmpeg-20160113.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_is_c,v 1.3 2015/12/06 08:51:46 ajacoutot Exp $
d17 7
a23 3
--- libavcodec/aacenc_is.c.orig	Fri Dec 25 03:00:18 2015
+++ libavcodec/aacenc_is.c	Wed Jan 13 15:11:52 2016
@@@@ -45,10 +45,15 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
d36 1
d38 1
a38 1
         float e01_34 = phase*pow(ener1/ener0, 3.0/4.0);
d41 1
d110 2
a111 2
+                        float coef0 = fabsf(sce0->coeffs[start+(w+w2)*128+i]);
+                        float coef1 = fabsf(sce1->coeffs[start+(w+w2)*128+i]);
@


1.3
log
@More AAC bits and remove the experimental status for the encoder.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_is_c,v 1.2 2015/10/13 05:44:18 ajacoutot Exp $
d9 11
a19 3
--- libavcodec/aacenc_is.c.orig	Sat Dec  5 15:13:17 2015
+++ libavcodec/aacenc_is.c	Sat Dec  5 15:01:19 2015
@@@@ -45,6 +45,11 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
d31 8
a38 1
@@@@ -63,15 +68,15 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
d40 2
a41 2
                                     sce0->sf_idx[(w+w2)*16+g],
                                     sce0->band_type[(w+w2)*16+g],
d43 2
d48 2
a49 2
                                     sce1->sf_idx[(w+w2)*16+g],
                                     sce1->band_type[(w+w2)*16+g],
d51 2
d61 6
a66 2
@@@@ -85,6 +90,7 @@@@ struct AACISError ff_aac_is_encoding_err(AACEncContext
     is_error.error = fabsf(dist1 - dist2);
d73 1
a73 1
@@@@ -93,42 +99,56 @@@@ void ff_aac_search_for_is(AACEncContext *s, AVCodecCon
d78 1
a78 1
+    int start = 0, count = 0, w, w2, g, i, prev_sf1 = -1;
d95 1
d99 1
a99 6
                 struct AACISError ph_err1, ph_err2, *erf;
+                if (sce0->band_type[w*16+g] == NOISE_BT ||
+                    sce1->band_type[w*16+g] == NOISE_BT) {
+                    start += sce0->ics.swb_sizes[g];
+                    continue;
+                }
d118 3
a120 2
+                erf = (ph_err1.pass && ph_err1.error < ph_err2.error) ? &ph_err1 : &ph_err2;
                 if (erf->pass) {
d124 1
a124 1
+                    cpe->ch[0].is_ener[w*16+g] = sqrt(ener0 / erf->ener01);
d127 7
a133 1
+                    cpe->ch[1].band_type[w*16+g] = (erf->phase > 0) ? INTENSITY_BT : INTENSITY_BT2;
d139 1
@


1.2
log
@Some more AAC stuffs.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_is_c,v 1.1 2015/09/12 09:44:54 ajacoutot Exp $
d9 2
a10 2
--- libavcodec/aacenc_is.c.orig	Mon Sep  7 21:58:01 2015
+++ libavcodec/aacenc_is.c	Mon Oct 12 22:05:06 2015
d50 18
a67 1
@@@@ -105,27 +111,34 @@@@ void ff_aac_search_for_is(AACEncContext *s, AVCodecCon
d70 1
a70 1
                 cpe->ch[1].band_type[w*16+g] != NOISE_BT && !cpe->ch[1].zeroes[w*16+g]) {
d72 2
d111 5
@


1.1
log
@Back port some AAC encoder fixes.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d7 46
a52 3
--- libavcodec/aacenc_is.c.orig	Sat Sep 12 02:07:50 2015
+++ libavcodec/aacenc_is.c	Sat Sep 12 02:08:20 2015
@@@@ -107,10 +107,15 @@@@ void ff_aac_search_for_is(AACEncContext *s, AVCodecCon
d54 2
a55 1
                 float ener0 = 0.0f, ener1 = 0.0f, ener01 = 0.0f;
d66 2
a67 2
+                        float coef0 = fabsf(sce0->pcoeffs[start+(w+w2)*128+i]);
+                        float coef1 = fabsf(sce1->pcoeffs[start+(w+w2)*128+i]);
d71 21
@

