head	1.5;
access;
symbols
	OPENBSD_5_0:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2011.12.30.17.34.39;	author edd;	state dead;
branches;
next	1.4;

1.4
date	2011.09.12.21.04.49;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.24.09.26.41;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.23.11.59.59;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.16.19.01.47;	author sthen;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.08.21.16.51.13;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update ffmpeg to a stable snapshot, from brad, OK aja@@
@
text
@$OpenBSD: patch-libavcodec_cavsdec_c,v 1.4 2011/09/12 21:04:49 sthen Exp $

- Fix insufficient boundary check. oCERT #2011-002
- Fix some crashes with invalid bitstreams. oCERT #2011-002
- Check run value validity.
- Avoid possible crash with crafted input.

--- libavcodec/cavsdec.c.orig	Mon Mar 28 19:23:17 2011
+++ libavcodec/cavsdec.c	Thu Sep  8 14:16:46 2011
@@@@ -115,7 +115,8 @@@@ static inline int get_ue_code(GetBitContext *gb, int o
 static int decode_residual_block(AVSContext *h, GetBitContext *gb,
                                  const struct dec_2dvlc *r, int esc_golomb_order,
                                  int qp, uint8_t *dst, int stride) {
-    int i, level_code, esc_code, level, run, mask;
+    int i, esc_code, level, mask;
+    unsigned int level_code, run;
     DCTELEM level_buf[65];
     uint8_t run_buf[65];
     DCTELEM *block = h->block;
@@@@ -124,18 +125,22 @@@@ static int decode_residual_block(AVSContext *h, GetBit
         level_code = get_ue_code(gb,r->golomb_order);
         if(level_code >= ESCAPE_CODE) {
             run = ((level_code - ESCAPE_CODE) >> 1) + 1;
+            if(run > 64)
+                return -1;
             esc_code = get_ue_code(gb,esc_golomb_order);
             level = esc_code + (run > r->max_run ? 1 : r->level_add[run]);
             while(level > r->inc_limit)
                 r++;
             mask = -(level_code & 1);
             level = (level^mask) - mask;
-        } else {
+        } else if (level_code >= 0) {
             level = r->rltab[level_code][0];
             if(!level) //end of block signal
                 break;
             run   = r->rltab[level_code][1];
             r += r->rltab[level_code][2];
+        } else {
+            break;
         }
         level_buf[i] = level;
         run_buf[i] = run;
@@@@ -163,7 +168,7 @@@@ static inline int decode_residual_inter(AVSContext *h)
 
     /* get coded block pattern */
     int cbp= get_ue_golomb(&h->s.gb);
-    if(cbp > 63){
+    if(cbp > 63U){
         av_log(h->s.avctx, AV_LOG_ERROR, "illegal inter cbp\n");
         return -1;
     }
@@@@ -189,7 +194,8 @@@@ static inline int decode_residual_inter(AVSContext *h)
 
 static int decode_mb_i(AVSContext *h, int cbp_code) {
     GetBitContext *gb = &h->s.gb;
-    int block, pred_mode_uv;
+    unsigned pred_mode_uv;
+    int block;
     uint8_t top[18];
     uint8_t *left = NULL;
     uint8_t *d;
@@@@ -222,7 +228,7 @@@@ static int decode_mb_i(AVSContext *h, int cbp_code) {
     /* get coded block pattern */
     if(h->pic_type == FF_I_TYPE)
         cbp_code = get_ue_golomb(gb);
-    if(cbp_code > 63){
+    if(cbp_code > 63U){
         av_log(h->s.avctx, AV_LOG_ERROR, "illegal intra cbp\n");
         return -1;
     }
@@@@ -445,6 +451,8 @@@@ static inline int check_for_slice(AVSContext *h) {
     if((show_bits_long(gb,24+align) & 0xFFFFFF) == 0x000001) {
         skip_bits_long(gb,24+align);
         h->stc = get_bits(gb,8);
+        if (h->stc >= h->mb_height)
+            return 0;
         decode_slice_header(h,gb);
         return 1;
     }
@@@@ -659,7 +667,7 @@@@ static int cavs_decode_frame(AVCodecContext * avctx,vo
     buf_end = buf + buf_size;
     for(;;) {
         buf_ptr = ff_find_start_code(buf_ptr,buf_end, &stc);
-        if(stc & 0xFFFFFE00)
+        if((stc & 0xFFFFFE00) || buf_ptr == buf_end)
             return FFMAX(0, buf_ptr - buf - s->parse_context.last_index);
         input_size = (buf_end - buf_ptr)*8;
         switch(stc) {
@


1.4
log
@Some FFmpeg security and bug fixes from upstream, from Brad:

- jpegdec: Actually search for and parse RSTn.
- mpeg4: Adjust dummy frame threshold for packed DivX.
- mpeg4: Fix another packed DivX issue.
- jpegdec: Better RSTn skiping.
- Fix memory corruption in case of memory allocation failure.
- cavsdec: Avoid possible crash with crafted input.
- rtp: Fix integer underflow that could allow remote code execution. MSVR-11-008
8
- rtpdec_asf: Fix memleak.
- mp3dec: Dont spam the user on multiple MP3 frames.
- wavpack: Fixed invalid access with corrupted extra bits sub-blocks.
- wavpack: Fixed invalid writes with corrupted bitstreams.
- wavpack: Fixed invalid access with corrupted bitstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_cavsdec_c,v 1.3 2011/08/24 09:26:41 sthen Exp $
@


1.3
log
@Another cavs security-related bug fix; check run value validity. From Brad.
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_cavsdec_c,v 1.2 2011/08/23 11:59:59 sthen Exp $
d6 1
d9 1
a9 1
+++ libavcodec/cavsdec.c	Tue Aug 23 16:33:20 2011
d44 9
d63 9
@


1.2
log
@Fix crashes with invalid bitstreams in the cavs decoder (oCERT #2011-002),
From Brad.
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_cavsdec_c,v 1.1 2011/08/16 19:01:47 sthen Exp $
d5 1
d8 1
a8 1
+++ libavcodec/cavsdec.c	Mon Aug 22 21:06:48 2011
d19 9
a27 1
@@@@ -130,12 +131,14 @@@@ static int decode_residual_block(AVSContext *h, GetBit
d43 1
a43 1
@@@@ -189,7 +192,8 @@@@ static inline int decode_residual_inter(AVSContext *h)
d53 1
a53 1
@@@@ -445,6 +449,8 @@@@ static inline int check_for_slice(AVSContext *h) {
d62 1
a62 1
@@@@ -659,7 +665,7 @@@@ static int cavs_decode_frame(AVCodecContext * avctx,vo
@


1.1
log
@Bug and security fixes for FFmpeg, from Brad;
- cavs decoder: security fix; insufficient boundary check. oCERT #2011-002
- ogg demux: fix demuxing chained audio streams, correct duration
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 1
Fix insufficient boundary check. oCERT #2011-002
d6 2
a7 2
--- libavcodec/cavsdec.c.orig	Sat Aug 13 19:35:06 2011
+++ libavcodec/cavsdec.c	Sat Aug 13 19:36:04 2011
d18 44
@


1.1.2.1
log
@Bug and security fixes for FFmpeg, from Brad;
- cavs decoder: security fix; insufficient boundary check. oCERT #2011-002
- ogg demux: fix demuxing chained audio streams, correct duration
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_cavsdec_c,v 1.1 2011/08/16 19:01:47 sthen Exp $
@

