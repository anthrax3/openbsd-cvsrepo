head	1.3;
access;
symbols
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2014.08.14.08.20.27;	author brad;	state dead;
branches;
next	1.2;
commitid	pSVHmwDct53IFfXl;

1.2
date	2014.07.25.20.37.58;	author brad;	state Exp;
branches;
next	1.1;
commitid	wNkVRIVusJ28ppSi;

1.1
date	2014.07.17.23.00.27;	author brad;	state dead;
branches
	1.1.2.1;
next	;
commitid	MJmoxAoL7epFu7cq;

1.1.2.1
date	2014.07.17.23.00.27;	author brad;	state Exp;
branches;
next	;
commitid	MJmoxAoL7epFu7cq;


desc
@@


1.3
log
@Update to FFmpeg 20140810 snapshot. From master branch.

ok ajacoutot@@ zhuk@@
@
text
@$OpenBSD: patch-libavutil_lzo_c,v 1.2 2014/07/25 20:37:58 brad Exp $

Fix LZO integer overflow issues. CVE-2014-4610

--- libavutil/lzo.c.orig	Fri Jul 25 16:01:08 2014
+++ libavutil/lzo.c	Fri Jul 25 16:09:37 2014
@@@@ -22,6 +22,7 @@@@
 #include <string.h>
 
 #include "avutil.h"
+#include "avassert.h"
 #include "common.h"
 #include "intreadwrite.h"
 #include "lzo.h"
@@@@ -65,8 +66,13 @@@@ static inline int get_len(LZOContext *c, int x, int ma
 {
     int cnt = x & mask;
     if (!cnt) {
-        while (!(x = get_byte(c)))
+        while (!(x = get_byte(c))) {
+            if (cnt >= INT_MAX - 1000) {
+                c->error |= AV_LZO_ERROR;
+                break;
+            }
             cnt += 255;
+        }
         cnt += mask + x;
     }
     return cnt;
@@@@ -80,6 +86,7 @@@@ static inline void copy(LZOContext *c, int cnt)
 {
     register const uint8_t *src = c->in;
     register uint8_t *dst       = c->out;
+    av_assert0(cnt >= 0);
     if (cnt > c->in_end - src) {
         cnt       = FFMAX(c->in_end - src, 0);
         c->error |= AV_LZO_INPUT_DEPLETED;
@@@@ -111,6 +118,7 @@@@ static inline void copy(LZOContext *c, int cnt)
 static inline void copy_backptr(LZOContext *c, int back, int cnt)
 {
     register uint8_t *dst       = c->out;
+    av_assert0(cnt > 0);
     if (dst - c->out_start < back) {
         c->error |= AV_LZO_INVALID_BACKPTR;
         return;
@


1.2
log
@Fix LZO integer overflow issues. CVE-2014-4610

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-libavutil_lzo_c was initially added on branch OPENBSD_5_5.
@
text
@d1 45
@


1.1.2.1
log
@Fix LZO integer overflow issues. CVE-2014-4610

ok sthen@@
@
text
@a0 49
$OpenBSD$

Fix LZO integer overflow issues. CVE-2014-4610

--- libavutil/lzo.c.orig	Thu Jul 17 15:43:02 2014
+++ libavutil/lzo.c	Thu Jul 17 15:45:27 2014
@@@@ -22,6 +22,7 @@@@
 #include <string.h>
 
 #include "avutil.h"
+#include "avassert.h"
 #include "common.h"
 #include "intreadwrite.h"
 #include "lzo.h"
@@@@ -65,8 +66,13 @@@@ static inline int get_len(LZOContext *c, int x, int ma
 {
     int cnt = x & mask;
     if (!cnt) {
-        while (!(x = get_byte(c)))
+        while (!(x = get_byte(c))) {
+            if (cnt >= INT_MAX - 1000) {
+                c->error |= AV_LZO_ERROR;
+                break;
+            }
             cnt += 255;
+        }
         cnt += mask + x;
     }
     return cnt;
@@@@ -80,6 +86,7 @@@@ static inline void copy(LZOContext *c, int cnt)
 {
     register const uint8_t *src = c->in;
     register uint8_t *dst       = c->out;
+    av_assert0(cnt >= 0);
     if (cnt > c->in_end - src) {
         cnt       = FFMAX(c->in_end - src, 0);
         c->error |= AV_LZO_INPUT_DEPLETED;
@@@@ -110,9 +117,9 @@@@ static inline void copy(LZOContext *c, int cnt)
  */
 static inline void copy_backptr(LZOContext *c, int back, int cnt)
 {
-    register const uint8_t *src = &c->out[-back];
     register uint8_t *dst       = c->out;
-    if (src < c->out_start || src > dst) {
+    av_assert0(cnt > 0);
+    if (dst - c->out_start < back) {
         c->error |= AV_LZO_INVALID_BACKPTR;
         return;
     }
@

