head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7;
locks; strict;
comment	@# @;


1.7
date	2016.01.22.07.05.01;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	QxWiiXgyevTr4Srf;

1.6
date	2016.01.18.15.34.45;	author ajacoutot;	state Exp;
branches;
next	1.5;
commitid	RwM3NoHU9JMWKEgE;

1.5
date	2015.12.10.06.53.38;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	syJXIQ2pJKvIoUp8;

1.4
date	2015.12.06.08.51.46;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	qmMp5nlfDfTw8ZGw;

1.3
date	2015.10.25.08.46.41;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	SKomGDNtuQfFPemq;

1.2
date	2015.09.19.18.21.15;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	x8H1hGNYM4aZaOCR;

1.1
date	2015.09.15.12.49.42;	author ajacoutot;	state Exp;
branches;
next	;
commitid	ciTOHXX4AwC0OcBH;


desc
@@


1.7
log
@Yet again mor AAC fixes.

from Brad (maintainer)
@
text
@$OpenBSD: patch-libavcodec_aacenc_tns_c,v 1.6 2016/01/18 15:34:45 ajacoutot Exp $

aacenc_tns: redo coefficient quantization and decision making

aacenc_tns: encode coefficients directly and reenable compression

aacenc_tns: fix coefficient compression condition

aacenc_tns: add moving average filter for LTP

aacenc_tns: disable coefficient compression by default

aacenc_tns: simplify encoding function

aacenc_tns: rework TNS descision logic

aacenc_ltp: use an AR filter for LTP encoding as well

aacenc_tns: tune and reduce artifacts

aacenc_tns: use 4 bits for short windows

AAC encoder: TNS fixes on short windows

libavcodec/aacenc_tnc.c: remove unused variable w2

AAC encoder: check for NaNs/inf in TNS gain

--- libavcodec/aacenc_tns.c.orig	Wed Jan 13 15:27:48 2016
+++ libavcodec/aacenc_tns.c	Thu Jan 21 05:58:54 2016
@@@@ -25,62 +25,79 @@@@
  * @@author Rostislav Pehlivanov ( atomnuker gmail com )
  */
 
+#include "libavutil/libm.h"
 #include "aacenc.h"
 #include "aacenc_tns.h"
 #include "aactab.h"
 #include "aacenc_utils.h"
 #include "aacenc_quantization.h"
 
+/* Could be set to 3 to save an additional bit at the cost of little quality */
+#define TNS_Q_BITS 4
+
+/* Coefficient resolution in short windows */
+#define TNS_Q_BITS_IS8 4
+
+/* We really need the bits we save here elsewhere */
+#define TNS_ENABLE_COEF_COMPRESSION
+
+/* TNS will only be used if the LPC gain is within these margins */
+#define TNS_GAIN_THRESHOLD_LOW      1.4f
+#define TNS_GAIN_THRESHOLD_HIGH     1.16f*TNS_GAIN_THRESHOLD_LOW
+
+static inline int compress_coeffs(int *coef, int order, int c_bits)
+{
+    int i;
+    const int low_idx   = c_bits ?  4 : 2;
+    const int shift_val = c_bits ?  8 : 4;
+    const int high_idx  = c_bits ? 11 : 5;
+#ifndef TNS_ENABLE_COEF_COMPRESSION
+    return 0;
+#endif /* TNS_ENABLE_COEF_COMPRESSION */
+    for (i = 0; i < order; i++)
+        if (coef[i] >= low_idx && coef[i] <= high_idx)
+            return 0;
+    for (i = 0; i < order; i++)
+        coef[i] -= (coef[i] > high_idx) ? shift_val : 0;
+    return 1;
+}
+
 /**
  * Encode TNS data.
- * Coefficient compression saves a single bit per coefficient.
+ * Coefficient compression is simply not lossless as it should be
+ * on any decoder tested and as such is not active.
  */
 void ff_aac_encode_tns_info(AACEncContext *s, SingleChannelElement *sce)
 {
-    uint8_t u_coef;
-    const uint8_t coef_res = TNS_Q_BITS == 4;
-    int i, w, filt, coef_len, coef_compress = 0;
-    const int is8 = sce->ics.window_sequence[0] == EIGHT_SHORT_SEQUENCE;
     TemporalNoiseShaping *tns = &sce->tns;
+    int i, w, filt, coef_compress = 0, coef_len;
+    const int is8 = sce->ics.window_sequence[0] == EIGHT_SHORT_SEQUENCE;
+    const int c_bits = is8 ? TNS_Q_BITS_IS8 == 4 : TNS_Q_BITS == 4;
 
     if (!sce->tns.present)
         return;
 
     for (i = 0; i < sce->ics.num_windows; i++) {
         put_bits(&s->pb, 2 - is8, sce->tns.n_filt[i]);
-        if (tns->n_filt[i]) {
-            put_bits(&s->pb, 1, coef_res);
-            for (filt = 0; filt < tns->n_filt[i]; filt++) {
-                put_bits(&s->pb, 6 - 2 * is8, tns->length[i][filt]);
-                put_bits(&s->pb, 5 - 2 * is8, tns->order[i][filt]);
-                if (tns->order[i][filt]) {
-                    put_bits(&s->pb, 1, !!tns->direction[i][filt]);
-                    put_bits(&s->pb, 1, !!coef_compress);
-                    coef_len = coef_res + 3 - coef_compress;
-                    for (w = 0; w < tns->order[i][filt]; w++) {
-                        u_coef = (tns->coef_idx[i][filt][w])&(~(~0<<coef_len));
-                        put_bits(&s->pb, coef_len, u_coef);
-                    }
-                }
-            }
+        if (!tns->n_filt[i])
+            continue;
+        put_bits(&s->pb, 1, c_bits);
+        for (filt = 0; filt < tns->n_filt[i]; filt++) {
+            put_bits(&s->pb, 6 - 2 * is8, tns->length[i][filt]);
+            put_bits(&s->pb, 5 - 2 * is8, tns->order[i][filt]);
+            if (!tns->order[i][filt])
+                continue;
+            put_bits(&s->pb, 1, tns->direction[i][filt]);
+            coef_compress = compress_coeffs(tns->coef_idx[i][filt],
+                                            tns->order[i][filt], c_bits);
+            put_bits(&s->pb, 1, coef_compress);
+            coef_len = c_bits + 3 - coef_compress;
+            for (w = 0; w < tns->order[i][filt]; w++)
+                put_bits(&s->pb, coef_len, tns->coef_idx[i][filt][w]);
         }
     }
 }
 
-static inline void quantize_coefs(double *coef, int *idx, float *lpc, int order)
-{
-    int i;
-    uint8_t u_coef;
-    const float *quant_arr = tns_tmp2_map[TNS_Q_BITS == 4];
-    const double iqfac_p = ((1 << (TNS_Q_BITS-1)) - 0.5)/(M_PI/2.0);
-    const double iqfac_m = ((1 << (TNS_Q_BITS-1)) + 0.5)/(M_PI/2.0);
-    for (i = 0; i < order; i++) {
-        idx[i] = ceilf(asin(coef[i])*((coef[i] >= 0) ? iqfac_p : iqfac_m));
-        u_coef = (idx[i])&(~(~0<<TNS_Q_BITS));
-        lpc[i] = quant_arr[u_coef];
-    }
-}
-
 /* Apply TNS filter */
 void ff_aac_apply_tns(AACEncContext *s, SingleChannelElement *sce)
 {
@@@@ -114,81 +131,85 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
             }
             start += w * 128;
 
-            // ar filter
-            for (m = 0; m < size; m++, start += inc)
-                for (i = 1; i <= FFMIN(m, order); i++)
+            /* AR filter */
+            for (m = 0; m < size; m++, start += inc) {
+                for (i = 1; i <= FFMIN(m, order); i++) {
                     sce->coeffs[start] += lpc[i-1]*sce->pcoeffs[start - i*inc];
+                }
+            }
         }
     }
 }
 
+/*
+ * c_bits - 1 if 4 bit coefficients, 0 if 3 bit coefficients
+ */
+static inline void quantize_coefs(double *coef, int *idx, float *lpc, int order,
+                                  int c_bits)
+{
+    int i;
+    const float *quant_arr = tns_tmp2_map[c_bits];
+    for (i = 0; i < order; i++) {
+        idx[i] = quant_array_idx(coef[i], quant_arr, c_bits ? 16 : 8);
+        lpc[i] = quant_arr[idx[i]];
+    }
+}
+
+/*
+ * 3 bits per coefficient with 8 short windows
+ */
 void ff_aac_search_for_tns(AACEncContext *s, SingleChannelElement *sce)
 {
     TemporalNoiseShaping *tns = &sce->tns;
-    int w, w2, g, count = 0;
+    int w, g, count = 0;
+    double gain, coefs[MAX_LPC_ORDER];
     const int mmm = FFMIN(sce->ics.tns_max_bands, sce->ics.max_sfb);
     const int is8 = sce->ics.window_sequence[0] == EIGHT_SHORT_SEQUENCE;
+    const int c_bits = is8 ? TNS_Q_BITS_IS8 == 4 : TNS_Q_BITS == 4;
+    const int sfb_start = av_clip(tns_min_sfb[is8][s->samplerate_index], 0, mmm);
+    const int sfb_end   = av_clip(sce->ics.num_swb, 0, mmm);
     const int order = is8 ? 7 : s->profile == FF_PROFILE_AAC_LOW ? 12 : TNS_MAX_ORDER;
+    const int slant = sce->ics.window_sequence[0] == LONG_STOP_SEQUENCE  ? 1 :
+                      sce->ics.window_sequence[0] == LONG_START_SEQUENCE ? 0 : 2;
+    const int sfb_len = sfb_end - sfb_start;
+    const int coef_len = sce->ics.swb_offset[sfb_end] - sce->ics.swb_offset[sfb_start];
 
-    int sfb_start = av_clip(tns_min_sfb[is8][s->samplerate_index], 0, mmm);
-    int sfb_end   = av_clip(sce->ics.num_swb, 0, mmm);
+    if (coef_len <= 0 || sfb_len <= 0) {
+        sce->tns.present = 0;
+        return;
+    }
 
     for (w = 0; w < sce->ics.num_windows; w++) {
-        float e_ratio = 0.0f, threshold = 0.0f, spread = 0.0f, en[2] = {0.0, 0.0f};
-        double gain = 0.0f, coefs[MAX_LPC_ORDER] = {0};
-        int coef_start = w*sce->ics.num_swb + sce->ics.swb_offset[sfb_start];
-        int coef_len = sce->ics.swb_offset[sfb_end] - sce->ics.swb_offset[sfb_start];
+        float en[2] = {0.0f, 0.0f};
+        int oc_start = 0, os_start = 0;
+        int coef_start = sce->ics.swb_offset[sfb_start];
 
-        for (g = 0;  g < sce->ics.num_swb; g++) {
-            if (w*16+g < sfb_start || w*16+g > sfb_end)
-                continue;
-            for (w2 = 0; w2 < sce->ics.group_len[w]; w2++) {
-                FFPsyBand *band = &s->psy.ch[s->cur_channel].psy_bands[(w+w2)*16+g];
-                if ((w+w2)*16+g > sfb_start + ((sfb_end - sfb_start)/2))
-                    en[1] += band->energy;
-                else
-                    en[0] += band->energy;
-                threshold += band->threshold;
-                spread += band->spread;
-            }
+        for (g = sfb_start; g < sce->ics.num_swb && g <= sfb_end; g++) {
+            FFPsyBand *band = &s->psy.ch[s->cur_channel].psy_bands[w*16+g];
+            if (g > sfb_start + (sfb_len/2))
+                en[1] += band->energy;
+            else
+                en[0] += band->energy;
         }
 
-        if (coef_len <= 0 || (sfb_end - sfb_start) <= 0)
-            continue;
-        else
-            e_ratio = en[0]/en[1];
-
         /* LPC */
-        gain = ff_lpc_calc_ref_coefs_f(&s->lpc, &sce->coeffs[coef_start],
+        gain = ff_lpc_calc_ref_coefs_f(&s->lpc, &sce->coeffs[w*128 + coef_start],
                                        coef_len, order, coefs);
 
-        if (gain > TNS_GAIN_THRESHOLD_LOW && gain < TNS_GAIN_THRESHOLD_HIGH &&
-            (en[0]+en[1]) > TNS_GAIN_THRESHOLD_LOW*threshold &&
-            spread < TNS_SPREAD_THRESHOLD && order) {
-            if (is8 || order < 2 || (e_ratio > TNS_E_RATIO_LOW && e_ratio < TNS_E_RATIO_HIGH)) {
-                tns->n_filt[w] = 1;
-                for (g = 0; g < tns->n_filt[w]; g++) {
-                    tns->length[w][g] = sfb_end - sfb_start;
-                    tns->direction[w][g] = en[0] < en[1];
-                    tns->order[w][g] = order;
-                    quantize_coefs(coefs, tns->coef_idx[w][g], tns->coef[w][g],
-                                   order);
-                }
-            } else {  /* 2 filters due to energy disbalance */
-                tns->n_filt[w] = 2;
-                for (g = 0; g < tns->n_filt[w]; g++) {
-                    tns->direction[w][g] = en[g] < en[!g];
-                    tns->order[w][g] = !g ? order/2 : order - tns->order[w][g-1];
-                    tns->length[w][g] = !g ? (sfb_end - sfb_start)/2 : \
-                                    (sfb_end - sfb_start) - tns->length[w][g-1];
-                    quantize_coefs(&coefs[!g ? 0 : order - tns->order[w][g-1]],
-                                   tns->coef_idx[w][g], tns->coef[w][g],
-                                   tns->order[w][g]);
-                }
-            }
-            count++;
+        if (!order || !isfinite(gain) || gain < TNS_GAIN_THRESHOLD_LOW || gain > TNS_GAIN_THRESHOLD_HIGH)
+            continue;
+
+        tns->n_filt[w] = is8 ? 1 : order != TNS_MAX_ORDER ? 2 : 3;
+        for (g = 0; g < tns->n_filt[w]; g++) {
+            tns->direction[w][g] = slant != 2 ? slant : en[g] < en[!g];
+            tns->order[w][g] = g < tns->n_filt[w] ? order/tns->n_filt[w] : order - oc_start;
+            tns->length[w][g] = g < tns->n_filt[w] ? sfb_len/tns->n_filt[w] : sfb_len - os_start;
+            quantize_coefs(&coefs[oc_start], tns->coef_idx[w][g], tns->coef[w][g],
+                            tns->order[w][g], c_bits);
+            oc_start += tns->order[w][g];
+            os_start += tns->length[w][g];
         }
+        count++;
     }
-
     sce->tns.present = !!count;
 }
@


1.6
log
@Moar AAC.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_tns_c,v 1.5 2015/12/10 06:53:38 ajacoutot Exp $
d25 3
a27 1
ibavcodec/aacenc_tnc.c: remove unused variable w2
d30 9
a38 2
+++ libavcodec/aacenc_tns.c	Sun Jan 17 21:03:31 2016
@@@@ -31,56 +31,72 @@@@
d145 1
a145 1
@@@@ -114,81 +130,83 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
d193 2
d198 5
a202 1
-
d206 2
d210 1
a210 3
         int coef_start = w*sce->ics.num_swb + sce->ics.swb_offset[sfb_start];
         int coef_len = sce->ics.swb_offset[sfb_end] - sce->ics.swb_offset[sfb_start];
+        const int sfb_len = sfb_end - sfb_start;
d233 1
a233 2
+        if (coef_len <= 0 || sfb_len <= 0)
             continue;
d236 1
a236 1
 
d267 1
a267 1
+        if (!order || gain < TNS_GAIN_THRESHOLD_LOW || gain > TNS_GAIN_THRESHOLD_HIGH)
@


1.5
log
@Moar AAC fixes.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_tns_c,v 1.4 2015/12/06 08:51:46 ajacoutot Exp $
d23 6
a28 2
--- libavcodec/aacenc_tns.c.orig	Thu Nov 12 02:08:28 2015
+++ libavcodec/aacenc_tns.c	Wed Dec  9 01:11:15 2015
d136 1
a136 1
@@@@ -114,81 +130,87 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
d173 2
a174 1
     int w, w2, g, count = 0;
d197 5
a201 5
         for (g = 0;  g < sce->ics.num_swb; g++) {
             if (w*16+g < sfb_start || w*16+g > sfb_end)
                 continue;
             for (w2 = 0; w2 < sce->ics.group_len[w]; w2++) {
                 FFPsyBand *band = &s->psy.ch[s->cur_channel].psy_bands[(w+w2)*16+g];
d203 3
a205 4
+                if ((w+w2)*16+g > sfb_start + (sfb_len/2))
                     en[1] += band->energy;
                 else
                     en[0] += band->energy;
d208 7
a214 1
             }
d224 2
a225 1
         gain = ff_lpc_calc_ref_coefs_f(&s->lpc, &sce->coeffs[coef_start],
@


1.4
log
@More AAC bits and remove the experimental status for the encoder.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_tns_c,v 1.3 2015/10/25 08:46:41 ajacoutot Exp $
d19 7
a25 3
--- libavcodec/aacenc_tns.c.orig	Sat Dec  5 15:13:37 2015
+++ libavcodec/aacenc_tns.c	Sat Dec  5 15:12:34 2015
@@@@ -31,56 +31,75 @@@@
d35 2
a36 3
+/* Define this to save a bit, be warned decoders can't deal with it
+ * so it is not lossless despite what the specifications say */
+// #define TNS_ENABLE_COEF_COMPRESSION
d39 2
a40 4
+#define TNS_GAIN_THRESHOLD_LOW  1.477f
+#define TNS_GAIN_THRESHOLD_HIGH 7.0f
+#define TNS_GAIN_THRESHOLD_LOW_IS8  0.16f*TNS_GAIN_THRESHOLD_LOW
+#define TNS_GAIN_THRESHOLD_HIGH_IS8 0.26f*TNS_GAIN_THRESHOLD_HIGH
d71 1
a72 1
     TemporalNoiseShaping *tns = &sce->tns;
d132 1
a132 1
@@@@ -114,28 +133,50 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
d158 1
a158 1
+        idx[i] = quant_array_idx((float)coef[i], quant_arr, c_bits ? 16 : 8);
d169 1
a170 1
     int w, w2, g, count = 0;
a172 1
-    const int order = is8 ? 7 : s->profile == FF_PROFILE_AAC_LOW ? 12 : TNS_MAX_ORDER;
d174 3
d180 3
a182 4
     int sfb_start = av_clip(tns_min_sfb[is8][s->samplerate_index], 0, mmm);
     int sfb_end   = av_clip(sce->ics.num_swb, 0, mmm);
+    int order = is8 ? 5 : s->profile == FF_PROFILE_AAC_LOW ? 12 : TNS_MAX_ORDER;
 
d187 1
d190 1
d192 7
a198 1
@@@@ -148,47 +189,42 @@@@ void ff_aac_search_for_tns(AACEncContext *s, SingleCha
d207 2
a208 1
         if (coef_len <= 0 || (sfb_end - sfb_start) <= 0)
d235 1
a235 20
+        if (!order || gain < TNS_GAIN_THRESHOLD_LOW || gain > TNS_GAIN_THRESHOLD_HIGH)
+            continue;
+        if (is8 && (gain < TNS_GAIN_THRESHOLD_LOW_IS8 || gain > TNS_GAIN_THRESHOLD_HIGH_IS8))
+                continue;
+        if (is8 || order < 2) {
+            tns->n_filt[w] = 1;
+            for (g = 0; g < tns->n_filt[w]; g++) {
+                tns->length[w][g] = sfb_end - sfb_start;
+                tns->direction[w][g] = slant != 2 ? slant : en[0] < en[1];
+                tns->order[w][g] = order;
+                quantize_coefs(coefs, tns->coef_idx[w][g], tns->coef[w][g],
+                               order, c_bits);
+            }
+        } else {  /* 2 filters due to energy disbalance */
+            tns->n_filt[w] = 2;
+            for (g = 0; g < tns->n_filt[w]; g++) {
+                tns->direction[w][g] = slant != 2 ? slant : en[g] < en[!g];
+                tns->order[w][g] = !g ? order/2 : order - tns->order[w][g-1];
+                tns->length[w][g] = !g ? (sfb_end - sfb_start)/2 : \
                                     (sfb_end - sfb_start) - tns->length[w][g-1];
d240 1
a240 4
+                quantize_coefs(&coefs[!g ? 0 : order - tns->order[w][g-1]],
+                               tns->coef_idx[w][g], tns->coef[w][g],
+                               tns->order[w][g], c_bits);
             }
d242 12
d255 1
a255 1
+        count += tns->n_filt[w];
@


1.3
log
@More AAC fixes.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_tns_c,v 1.2 2015/09/19 18:21:15 ajacoutot Exp $
d17 4
a20 2
--- libavcodec/aacenc_tns.c.orig	Mon Sep  7 21:58:01 2015
+++ libavcodec/aacenc_tns.c	Sun Oct 18 22:26:25 2015
d131 1
a131 10
@@@@ -88,7 +107,7 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
     IndividualChannelStream *ics = &sce->ics;
     int w, filt, m, i, top, order, bottom, start, end, size, inc;
     const int mmm = FFMIN(ics->tns_max_bands, ics->max_sfb);
-    float lpc[TNS_MAX_ORDER];
+    float lpc[TNS_MAX_ORDER], tmp[TNS_MAX_ORDER+1];
 
     for (w = 0; w < ics->num_windows; w++) {
         bottom = ics->num_swb;
@@@@ -114,28 +133,59 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
d138 4
a141 14
-                    sce->coeffs[start] += lpc[i-1]*sce->pcoeffs[start - i*inc];
+            if (!s->options.ltp) {     // ar filter
+                for (m = 0; m < size; m++, start += inc) {
+                    for (i = 1; i <= FFMIN(m, order); i++) {
+                        sce->coeffs[start] += lpc[i-1]*sce->pcoeffs[start - i*inc];
+                    }
+                }
+            } else {                   // ma filter
+                for (m = 0; m < size; m++, start += inc) {
+                    tmp[0] = sce->pcoeffs[start];
+                    for (i = 1; i <= FFMIN(m, order); i++)
+                        sce->coeffs[start] += lpc[i-1]*tmp[i];
+                    for (i = order; i > 0; i--)
+                        tmp[i] = tmp[i - 1];
d188 1
a188 1
@@@@ -148,47 +198,42 @@@@ void ff_aac_search_for_tns(AACEncContext *s, SingleCha
@


1.2
log
@Back port anohter bug fix for the AAC encoder.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-libavcodec_aacenc_tns_c,v 1.1 2015/09/15 12:49:42 ajacoutot Exp $
d9 8
d18 2
a19 2
+++ libavcodec/aacenc_tns.c	Thu Sep 17 22:11:34 2015
@@@@ -31,17 +31,34 @@@@
d23 16
a38 3
+/*
+ * Shifts the values as well if compression is possible.
+ */
d41 1
a41 1
+    int i, res = 0;
d45 3
d49 5
a53 6
+        if (coef[i] < low_idx || coef[i] > high_idx)
+            res++;
+    if (res == order)
+        for (i = 0; i < order; i++)
+            coef[i] -= (coef[i] > high_idx) ? shift_val : 0;
+    return res == order;
d58 3
a60 1
  * Coefficient compression saves a single bit per coefficient.
d66 3
a68 2
     int i, w, filt, coef_len, coef_compress = 0;
     const int is8 = sce->ics.window_sequence[0] == EIGHT_SHORT_SEQUENCE;
d70 2
a71 1
+    const int c_bits = is8 ? TNS_Q_BITS_SHORT == 4 : TNS_Q_BITS == 4;
d75 1
a75 1
@@@@ -49,38 +66,24 @@@@ void ff_aac_encode_tns_info(AACEncContext *s, SingleCh
d78 1
a78 1
         if (tns->n_filt[i]) {
d80 6
a85 9
+            put_bits(&s->pb, 1, c_bits);
             for (filt = 0; filt < tns->n_filt[i]; filt++) {
                 put_bits(&s->pb, 6 - 2 * is8, tns->length[i][filt]);
                 put_bits(&s->pb, 5 - 2 * is8, tns->order[i][filt]);
                 if (tns->order[i][filt]) {
+                    coef_compress = compress_coeffs(tns->coef_idx[i][filt],
+                                                    tns->order[i][filt], c_bits);
                     put_bits(&s->pb, 1, !!tns->direction[i][filt]);
                     put_bits(&s->pb, 1, !!coef_compress);
d91 17
a107 5
+                    coef_len = c_bits + 3 - coef_compress;
+                    for (w = 0; w < tns->order[i][filt]; w++)
+                        put_bits(&s->pb, coef_len, tns->coef_idx[i][filt][w]);
                 }
             }
d129 33
a161 1
@@@@ -122,22 +125,41 @@@@ void ff_aac_apply_tns(AACEncContext *s, SingleChannelE
d185 1
d190 3
a192 1
+    const int c_bits = is8 ? TNS_Q_BITS_SHORT == 4 : TNS_Q_BITS == 4;
d196 1
d201 1
a201 2
+        int use_tns;
+        int order = is8 ? 5 : s->profile == FF_PROFILE_AAC_LOW ? 12 : TNS_MAX_ORDER;
a203 2
+        float e_ratio = 0.0f, threshold = 0.0f, spread = 0.0f, en[2] = {0.0, 0.0f};
+        double gain = 0.0f, coefs[MAX_LPC_ORDER] = {0};
d205 2
a206 3
         for (g = 0;  g < sce->ics.num_swb; g++) {
             if (w*16+g < sfb_start || w*16+g > sfb_end)
@@@@ -149,22 +171,26 @@@@ void ff_aac_search_for_tns(AACEncContext *s, SingleCha
d209 1
a209 1
                 threshold += band->threshold;
a210 1
+                spread    += band->spread;
d226 15
d242 18
a259 21
+            use_tns = 0;
+        else if ((en[0]+en[1]) < TNS_GAIN_THRESHOLD_LOW*threshold || spread < TNS_SPREAD_THRESHOLD)
+            use_tns = 0;
+        else
+            use_tns = 1;
+
+        if (use_tns) {
+            e_ratio = en[0]/en[1];
             if (is8 || order < 2 || (e_ratio > TNS_E_RATIO_LOW && e_ratio < TNS_E_RATIO_HIGH)) {
                 tns->n_filt[w] = 1;
                 for (g = 0; g < tns->n_filt[w]; g++) {
@@@@ -172,7 +198,7 @@@@ void ff_aac_search_for_tns(AACEncContext *s, SingleCha
                     tns->direction[w][g] = en[0] < en[1];
                     tns->order[w][g] = order;
                     quantize_coefs(coefs, tns->coef_idx[w][g], tns->coef[w][g],
-                                   order);
+                                   order, c_bits);
                 }
             } else {  /* 2 filters due to energy disbalance */
                 tns->n_filt[w] = 2;
@@@@ -183,12 +209,11 @@@@ void ff_aac_search_for_tns(AACEncContext *s, SingleCha
d261 2
a262 2
                     quantize_coefs(&coefs[!g ? 0 : order - tns->order[w][g-1]],
                                    tns->coef_idx[w][g], tns->coef[w][g],
d264 4
a267 2
+                                   tns->order[w][g], c_bits);
                 }
d269 1
a269 1
             count++;
d271 1
@


1.1
log
@Back port some more AAC encoder fixes.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d7 4
a10 2
--- libavcodec/aacenc_tns.c.orig	Sat Sep 12 15:01:30 2015
+++ libavcodec/aacenc_tns.c	Sat Sep 12 15:02:10 2015
d25 1
a25 1
+        if (coef[i] < low_idx && coef[i] > high_idx)
@

