head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	sthen_20100917:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.12.09.20.11.00;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2011.04.16.00.15.37;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.17.21.37.19;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.17.21.37.19;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@slightly overdue update of darktable to 0.9.3 - lots of improvements
and fixes since the previous version in ports
@
text
@$OpenBSD: patch-src_common_image_c,v 1.2 2011/04/16 00:15:37 sthen Exp $
--- src/common/image.c.orig	Thu Sep 16 23:45:50 2010
+++ src/common/image.c	Thu Sep 16 23:50:00 2010
@@@@ -884,7 +884,7 @@@@ int dt_image_alloc(dt_image_t *img, dt_image_buffer_t 
   dt_mipmap_cache_t *cache = darktable.mipmap_cache;
   // max memory: user supplied number of bytes, evenly distributed among mip levels.
   // clamped between 50MB -- 4GB
-#if defined(__APPLE__) || defined(__MACH__)
+#if defined(__APPLE__) || defined(__MACH__) || defined(__OpenBSD__)
   // apple's size_t sucks
   size_t max_mem = (size_t)(MAX(52428800, dt_conf_get_int("cache_memory"))/(float)DT_IMAGE_FULL);
 #else
@


1.2
log
@- remove casts now that NULL is a void *
- sync WANTLIB
@
text
@d1 1
a1 1
$OpenBSD: patch-src_common_image_c,v 1.1.1.1 2010/09/17 21:37:19 sthen Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 4
$OpenBSD$

hunk 1: missing sentinel in function call; pushed upstream

a3 9
@@@@ -495,7 +495,7 @@@@ int dt_image_import(const int32_t film_id, const char 
   // select from images; if found => return
   gchar *imgfname;
   if(film_id > 1) imgfname = g_path_get_basename((const gchar*)filename);
-  else            imgfname = g_build_filename((const gchar*)filename, NULL);
+  else            imgfname = g_build_filename((const gchar*)filename, (char *)NULL);
   sqlite3_stmt *stmt;
   rc = sqlite3_prepare_v2(darktable.db, "select id from images where film_id = ?1 and filename = ?2", -1, &stmt, NULL);
   rc = sqlite3_bind_int (stmt, 1, film_id);
@


1.1.1.1
log
@import ports/graphics/darktable, thanks ajacoutot@@ for review+fixes.

darktable is a virtual lighttable and darkroom for photographers:
it manages your digital negatives in a database and lets you view
them through a zoomable lighttable. It also enables you to develop
raw images and enhance them. It tries to fill the gap between the
many excellent existing free raw converters and image management
tools (such as ufraw or f-spot).

All editing is fully non-destructive and only operates on cached
image buffers for display. The full image is only converted during
export. Raw files, high-dynamic range and standard image formats
such as jpeg are all supported. The core operates completely on
floating point values, so darktable can not only be used for
photography but also for scientifically acquired images or output
of renderers (high dynamic range).
@
text
@@
