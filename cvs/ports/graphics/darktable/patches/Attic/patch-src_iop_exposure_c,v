head	1.2;
access;
symbols
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	sthen_20100917:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.04.16.00.15.37;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.17.21.37.18;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.17.21.37.18;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- remove casts now that NULL is a void *
- sync WANTLIB
@
text
@$OpenBSD: patch-src_iop_exposure_c,v 1.1 2010/09/17 21:37:18 sthen Exp $

missing sentinel in function call; pushed upstream

--- src/iop/exposure.c.orig	Thu Sep 16 22:29:41 2010
+++ src/iop/exposure.c	Thu Sep 16 22:38:04 2010
@@@@ -310,14 +310,14 @@@@ void gui_init(struct dt_iop_module_t *self)
   gtk_box_pack_start(GTK_BOX(g->vbox1), GTK_WIDGET(g->label2), TRUE, TRUE, 0);
   // gtk_box_pack_start(GTK_BOX(g->vbox1), GTK_WIDGET(g->label3), TRUE, TRUE, 0);
   g->scale1 = DTGTK_SLIDER(dtgtk_slider_new_with_range( DARKTABLE_SLIDER_VALUE, -.5, 1.0, .001,p->black,3));
-  gtk_object_set(GTK_OBJECT(g->scale1), "tooltip-text", _("adjust the black level"), NULL);
+  gtk_object_set(GTK_OBJECT(g->scale1), "tooltip-text", _("adjust the black level"), (char *)NULL);
   
   g->scale2 = DTGTK_SLIDER(dtgtk_slider_new_with_range( DARKTABLE_SLIDER_VALUE, -9.0, 9.0, .02, p->exposure,3));
-  gtk_object_set(GTK_OBJECT(g->scale2), "tooltip-text", _("adjust the exposure correction [ev]"), NULL);
+  gtk_object_set(GTK_OBJECT(g->scale2), "tooltip-text", _("adjust the exposure correction [ev]"), (char *)NULL);
   
   
   // g->scale3 = DTGTK_SLIDER(dtgtk_slider_new_with_range(DARKTABLE_SLIDER_VALUE,0.0, 2.0, .005, p->gain,3));
-  // gtk_object_set(GTK_OBJECT(g->scale3), "tooltip-text", _("leave black and white,\nbut compress brighter\nvalues (non-linear)"), NULL);
+  // gtk_object_set(GTK_OBJECT(g->scale3), "tooltip-text", _("leave black and white,\nbut compress brighter\nvalues (non-linear)"), (char *)NULL);
   gtk_box_pack_start(GTK_BOX(g->vbox2), GTK_WIDGET(g->scale1), TRUE, TRUE, 0);
   gtk_box_pack_start(GTK_BOX(g->vbox2), GTK_WIDGET(g->scale2), TRUE, TRUE, 0);
   // gtk_box_pack_start(GTK_BOX(g->vbox2), GTK_WIDGET(g->scale3), TRUE, TRUE, 0);
@@@@ -325,7 +325,7 @@@@ void gui_init(struct dt_iop_module_t *self)
   g->autoexp  = GTK_CHECK_BUTTON(gtk_check_button_new_with_label(_("auto")));
   gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(g->autoexp), FALSE);
   g->autoexpp = DTGTK_SLIDER(dtgtk_slider_new_with_range(DARKTABLE_SLIDER_VALUE,0.0, 0.2, .001, 0.01,3));
-  gtk_object_set(GTK_OBJECT(g->autoexpp), "tooltip-text", _("percentage of bright values clipped out"), NULL);
+  gtk_object_set(GTK_OBJECT(g->autoexpp), "tooltip-text", _("percentage of bright values clipped out"), (char *)NULL);
   gtk_widget_set_sensitive(GTK_WIDGET(g->autoexpp), FALSE);
   gtk_box_pack_start(GTK_BOX(g->vbox1), GTK_WIDGET(g->autoexp), TRUE, TRUE, 0);
   gtk_box_pack_start(GTK_BOX(g->vbox2), GTK_WIDGET(g->autoexpp), TRUE, TRUE, 0);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import ports/graphics/darktable, thanks ajacoutot@@ for review+fixes.

darktable is a virtual lighttable and darkroom for photographers:
it manages your digital negatives in a database and lets you view
them through a zoomable lighttable. It also enables you to develop
raw images and enhance them. It tries to fill the gap between the
many excellent existing free raw converters and image management
tools (such as ufraw or f-spot).

All editing is fully non-destructive and only operates on cached
image buffers for display. The full image is only converted during
export. Raw files, high-dynamic range and standard image formats
such as jpeg are all supported. The core operates completely on
floating point values, so darktable can not only be used for
photography but also for scientifically acquired images or output
of renderers (high dynamic range).
@
text
@@
