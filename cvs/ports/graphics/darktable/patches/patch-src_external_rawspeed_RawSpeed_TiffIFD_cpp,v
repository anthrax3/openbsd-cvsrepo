head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.10.18.09.40.25;	author sthen;	state Exp;
branches;
next	1.1;
commitid	lCCTg3FhnDygKljQ;

1.1
date	2016.06.24.13.56.57;	author sthen;	state Exp;
branches;
next	;
commitid	5AUxnc7tvEDnryoG;


desc
@@


1.2
log
@update to darktable-2.0.6 and switch to the version of the RawSpeed patch
that was committed upstream
@
text
@$OpenBSD: patch-src_external_rawspeed_RawSpeed_TiffIFD_cpp,v 1.1 2016/06/24 13:56:57 sthen Exp $

From abbc577bf87c211e73f663a78173168faaf8aca3 Mon Sep 17 00:00:00 2001
From: Roman Lebedev <lebedev.ri@@gmail.com>
Date: Fri, 14 Oct 2016 21:01:19 +0300
Subject: [PATCH] rawspeed: TiffIFD::parseDngPrivateData(): compare with
 "Adobe\0" via memcmp()

--- src/external/rawspeed/RawSpeed/TiffIFD.cpp.orig	Sat Sep  3 14:11:13 2016
+++ src/external/rawspeed/RawSpeed/TiffIFD.cpp	Tue Oct 18 10:27:08 2016
@@@@ -118,8 +118,7 @@@@ TiffIFD* TiffIFD::parseDngPrivateData(TiffEntry *t) {
   */
   uint32 size = t->count;
   const uchar8 *data = t->getData();
-  string id((const char*)data);
-  if (0 != id.compare("Adobe"))
+  if (0 != memcmp(data, "Adobe", 6))
     ThrowTPE("Not Adobe Private data");
 
   data+=6;
@


1.1
log
@Don't use std::string for a non-0-terminated string, fixing an out-of-bounds
read crash with DNG files. From Sven Gaerner.
@
text
@d1 1
a1 1
$OpenBSD$
d3 5
a7 2
Fix crash; buffer might not be 0-terminated
https://redmine.darktable.org/issues/11059
d9 3
a11 3
--- src/external/rawspeed/RawSpeed/TiffIFD.cpp.orig	Tue May  3 19:58:43 2016
+++ src/external/rawspeed/RawSpeed/TiffIFD.cpp	Fri Jun 24 14:13:08 2016
@@@@ -118,9 +118,10 @@@@ TiffIFD* TiffIFD::parseDngPrivateData(TiffEntry *t) {
d17 1
a17 2
+  const char *const ADOBE = "Adobe";
+  if (0 != strncmp((const char *)data, ADOBE, strlen(ADOBE))) {
a18 1
+  }
a20 10
   if (!(data[0] == 'M' && data[1] == 'a' && data[2] == 'k' &&data[3] == 'N' ))
@@@@ -161,7 +162,7 @@@@ TiffIFD* TiffIFD::parseDngPrivateData(TiffEntry *t) {
   memcpy(&maker_data[org_offset],data, count);
   FileMap *maker_map = new FileMap(maker_data, org_offset+count);
 
-  TiffIFD *maker_ifd;
+  TiffIFD *maker_ifd = 0;
   try {
     maker_ifd = parseMakerNote(maker_map, org_offset, makernote_endian);
   } catch (TiffParserException &e) {
@

