head	1.10;
access;
symbols
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2016.08.17.17.21.27;	author jasper;	state dead;
branches;
next	1.9;
commitid	VuDnQnqg7I5FuLni;

1.9
date	2015.03.28.16.01.55;	author sthen;	state Exp;
branches;
next	1.8;
commitid	l7ift4IcQVxMZkVB;

1.8
date	2013.09.25.07.56.59;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.08.20.36.09;	author naddy;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.09.16.21.42;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.15.19.41.44;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.20.14.53.12;	author avsm;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2002.05.17.02.42.15;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.10.20.45.48;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.13.20.28.59;	author espie;	state Exp;
branches;
next	;

1.4.2.1
date	2004.09.30.05.13.18;	author brad;	state Exp;
branches;
next	;

1.4.4.1
date	2004.09.30.05.15.32;	author brad;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove imlib-1.x which was only used by kde/graphics3

ok sthen@@
@
text
@$OpenBSD: patch-Imlib_load_c,v 1.9 2015/03/28 16:01:55 sthen Exp $

handle giflib-5.1+
https://projects.archlinux.org/svntogit/packages.git/plain/trunk/imlib-giflib5.patch?h=packages/imlib

and other patches

--- Imlib/load.c.orig	Fri Mar 22 14:43:04 2002
+++ Imlib/load.c	Sat Mar 28 15:59:47 2015
@@@@ -4,6 +4,14 @@@@
 #include "Imlib_private.h"
 #include <setjmp.h>
 
+static void
+localPrintGifError(void)
+{
+    int ErrorCode=0;
+    GifErrorString(ErrorCode);
+    fprintf(stderr, "\nGIF-LIB error: %i.\n", ErrorCode);
+}
+
 /*      Split the ID - damages input    */
 
 static char        *
@@@@ -191,12 +199,12 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
       png_destroy_read_struct(&png_ptr, NULL, NULL);
       return NULL;
     }
-  if (setjmp(png_ptr->jmpbuf))
+  if (setjmp(png_jmpbuf(png_ptr)))
     {
       png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
       return NULL;
     }
-  if (info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
+  if (png_get_color_type(png_ptr, info_ptr) == PNG_COLOR_TYPE_RGB_ALPHA)
     {
       png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
       return NULL;
@@@@ -254,7 +262,8 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
   png_read_image(png_ptr, lines);
   png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
   ptr = data;
-  if (color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
+  if (color_type == PNG_COLOR_TYPE_GRAY
+      || color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
     {
       for (y = 0; y < *h; y++)
 	{
@@@@ -279,6 +288,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
 	    }
 	}
     }
+#if 0
   else if (color_type == PNG_COLOR_TYPE_GRAY)
     {
       for (y = 0; y < *h; y++)
@@@@ -294,6 +304,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
 	    }
 	}
     }
+#endif
   else
     {
       for (y = 0; y < *h; y++)
@@@@ -433,6 +444,7 @@@@ _LoadGIF(ImlibData * id, FILE *f, int *w, int *h, int 
   int                 intjump[] = {8, 8, 4, 2};
   int                 istransp, transp;
   int                 fd;
+  int                 Error;
 
   done = 0;
   istransp = 0;
@@@@ -443,7 +455,7 @@@@ _LoadGIF(ImlibData * id, FILE *f, int *w, int *h, int 
   fd = fileno(f);
   /* Apparently rewind(f) isn't sufficient */
   lseek(fd, (long) 0, 0);
-  gif = DGifOpenFileHandle(fd);
+  gif = DGifOpenFileHandle(fd, &Error);
 
   if (!gif)
     return NULL;
@@@@ -451,14 +463,14 @@@@ _LoadGIF(ImlibData * id, FILE *f, int *w, int *h, int 
     {
       if (DGifGetRecordType(gif, &rec) == GIF_ERROR)
 	{
-	  PrintGifError();
+	  localPrintGifError();
 	  rec = TERMINATE_RECORD_TYPE;
 	}
       if ((rec == IMAGE_DESC_RECORD_TYPE) && (!done))
 	{
 	  if (DGifGetImageDesc(gif) == GIF_ERROR)
 	    {
-	      PrintGifError();
+	      localPrintGifError();
 	      rec = TERMINATE_RECORD_TYPE;
 	    }
 	  *w = gif->Image.Width;
@@@@ -470,13 +482,13 @@@@ _LoadGIF(ImlibData * id, FILE *f, int *w, int *h, int 
 	  rows = malloc(*h * sizeof(GifRowType *));
 	  if (!rows)
 	    {
-	      DGifCloseFile(gif);
+	      DGifCloseFile(gif, NULL);
 	      return NULL;
 	    }
 	  data = _imlib_malloc_image(*w, *h);
 	  if (!data)
 	    {
-	      DGifCloseFile(gif);
+	      DGifCloseFile(gif, NULL);
 	      free(rows);
 	      return NULL;
 	    }
@@@@ -487,7 +499,7 @@@@ _LoadGIF(ImlibData * id, FILE *f, int *w, int *h, int 
 	      rows[i] = malloc(*w * sizeof(GifPixelType));
 	      if (!rows[i])
 		{
-		  DGifCloseFile(gif);
+		  DGifCloseFile(gif, NULL);
 		  for (i = 0; i < *h; i++)
 		    if (rows[i])
 		      free(rows[i]);
@@@@ -576,7 +588,7 @@@@ _LoadGIF(ImlibData * id, FILE *f, int *w, int *h, int 
 	    }
 	}
     }
-  DGifCloseFile(gif);
+  DGifCloseFile(gif, NULL);
   for (i = 0; i < *h; i++)
     free(rows[i]);
   free(rows);
@@@@ -631,12 +643,12 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
   fread(dbuf, 4, 2, file);
   *w = (int)dbuf[0];
   *h = (int)dbuf[1];
-  if (*w > 32767)
+  if ((*w < 0) || (*w > 32767))
     {
       fprintf(stderr, "IMLIB ERROR: Image width > 32767 pixels for file\n");
       return NULL;
     }
-  if (*h > 32767)
+  if ((*h < 0) || (*h > 32767))
     {
       fprintf(stderr, "IMLIB ERROR: Image height > 32767 pixels for file\n");
       return NULL;
@@@@ -645,9 +657,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
   planes = (int)word;
   fread(&word, 2, 1, file);
   bpp = (int)word;
-  if (bpp != 1 && bpp != 4 && bpp != 8 && bpp && 16 && bpp != 24 && bpp != 32)
+  if (bpp != 1 && bpp != 4 && bpp != 8 && bpp != 16 && bpp != 24 && bpp != 32)
     {
-      fprintf(stderr, "IMLIB ERROR: unknown bitdepth in file\n");
+      fprintf(stderr, "IMLIB ERROR: unknown bitdepth %d in file\n", bpp);
       return NULL;
     }
   fread(dbuf, 4, 4, file);
@@@@ -661,6 +673,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
   ncolors = (int)dbuf[0];
   if (ncolors == 0)
     ncolors = 1 << bpp;
+  if ((ncolors < 0) || (ncolors > (1 << bpp)))
+    ncolors = 1 << bpp;
+
   /* some more sanity checks */
   if (((comp == BI_RLE4) && (bpp != 4)) || ((comp == BI_RLE8) && (bpp != 8)) || ((comp == BI_BITFIELDS) && (bpp != 16 && bpp != 32)))
     {
@@@@ -786,9 +801,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 		  for (bit = 0; bit < 8; bit++)
 		    {
 		      index = ((byte & (0x80 >> bit)) ? 1 : 0);
+		      /* possibly corrupted file? */
+		      if (index < ncolors && poffset < *w * *h * 3)
+			{
 		      ptr[poffset] = cmap[index].r;
 		      ptr[poffset + 1] = cmap[index].g;
 		      ptr[poffset + 2] = cmap[index].b;
+			}
 		      column++;
 		    }
 		}
@@@@ -810,9 +829,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 			  index = ((byte & (0xF0 >> nibble * 4)) >> (!nibble * 4));
 			  if (index >= 16)
 			    index = 15;
+			  /* possibly corrupted file? */
+			  if (index < ncolors && poffset < *w * *h * 3)
+			    {
 			  ptr[poffset] = cmap[index].r;
 			  ptr[poffset + 1] = cmap[index].g;
 			  ptr[poffset + 2] = cmap[index].b;
+			    }
 			  column++;
 			}
 		    }
@@@@ -851,9 +874,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 				{
 				  linepos++;
 				  byte = getc(file);
+				  /* possibly corrupted file? */
+				  if (byte < ncolors && poffset < *w * *h * 3)
+				    {
 				  ptr[poffset] = cmap[byte].r;
 				  ptr[poffset + 1] = cmap[byte].g;
 				  ptr[poffset + 2] = cmap[byte].b;
+				    }
 				  column++;
 				}
 			      if (absolute & 0x01)
@@@@ -864,9 +891,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 			{
 			  for (i = 0; i < first; i++)
 			    {
+			      /* possibly corrupted file? */
+			      if (byte < ncolors && poffset < *w * *h * 3)
+				{
 			      ptr[poffset] = cmap[byte].r;
 			      ptr[poffset + 1] = cmap[byte].g;
 			      ptr[poffset + 2] = cmap[byte].b;
+				}
 			      column++;
 			      linepos++;
 			    }
@@@@ -874,9 +905,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 		    }
 		  else
 		    {
+		      /* possibly corrupted file? */
+		      if (byte < ncolors && poffset < *w * *h * 3)
+			{
 		      ptr[poffset] = cmap[byte].r;
 		      ptr[poffset + 1] = cmap[byte].g;
 		      ptr[poffset + 2] = cmap[byte].b;
+			}
 		      column++;
 		    }
 		}
@@@@ -884,9 +919,12 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 	  else if (bpp == 24)
 	    {
 	      linepos += fread(bbuf, 1, 3, file);
+	      if (poffset< *w * *h * 3)
+		{
 	      ptr[poffset] = (unsigned char)bbuf[2];
 	      ptr[poffset + 1] = (unsigned char)bbuf[1];
 	      ptr[poffset + 2] = (unsigned char)bbuf[0];
+		}
 	      column++;
 	    }
 	  else if (bpp == 16)
@@@@ -894,12 +932,16 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 	      unsigned char       temp;
 
 	      linepos += fread(&word, 2, 1, file);
+	      /* possibly corrupted file? */
+	      if (poffset < *w * *h * 3)
+		{
 	      temp = (word & rmask) >> rshift;
 	      ptr[poffset] = temp;
 	      temp = (word & gmask) >> gshift;
 	      ptr[poffset + 1] = temp;
 	      temp = (word & bmask) >> gshift;
 	      ptr[poffset + 2] = temp;
+		}
 	      column++;
 	    }
 	  else
@@@@ -907,12 +949,16 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
 	      unsigned char       temp;
 
 	      linepos += fread(&dword, 4, 1, file);
+	      /* possibly corrupted file? */
+	      if (poffset < *w * *h * 3)
+		{
 	      temp = (dword & rmask) >> rshift;
 	      ptr[poffset] = temp;
 	      temp = (dword & gmask) >> gshift;
 	      ptr[poffset + 1] = temp;
 	      temp = (dword & bmask) >> bshift;
 	      ptr[poffset + 2] = temp;
+		}
 	      column++;
 	    }
 	}
@@@@ -1061,7 +1107,7 @@@@ _LoadXPM(ImlibData * id, FILE *file, int *w, int *h, i
 			  if (line[k] != ' ')
 			    {
 			      s[0] = 0;
-			      sscanf(&line[k], "%256s", s);
+			      sscanf(&line[k], "%255s", s);
 			      slen = strlen(s);
 			      k += slen;
 			      if (!strcmp(s, "c"))
@@@@ -1861,7 +1907,7 @@@@ Imlib_load_image(ImlibData * id, char *file)
 	  free(im);
 	  return NULL;
 	}
-      sscanf(s, "%256s %i", s1, &num);
+      sscanf(s, "%255s %i", s1, &num);
       if (num <= 0)
 	{
 	  fclose(p);
@@@@ -1870,10 +1916,10 @@@@ Imlib_load_image(ImlibData * id, char *file)
 	}
       while (fgets(s, 4096, p))
 	{
-	  sscanf(s, "%256s", s1);
+	  sscanf(s, "%255s", s1);
 	  if (!strcmp("IMAGE", s1))
 	    {
-	      sscanf(s, "%256s %i %256s %i %i %i %i %i %i %i %i %i", s1, &size,
+	      sscanf(s, "%255s %i %255s %i %i %i %i %i %i %i %i %i", s1, &size,
 		     s2, &w, &h, &r, &g, &b, &bl, &br, &bt, &bb);
 	      if (!iden[0])
 		break;
@


1.9
log
@handle giflib api change, reported by naddy
@
text
@d1 1
a1 1
$OpenBSD: patch-Imlib_load_c,v 1.8 2013/09/25 07:56:59 sthen Exp $
@


1.8
log
@libungif->giflib and patch where necessary, ok jasper@@ aja@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Imlib_load_c,v 1.7 2011/07/08 20:36:09 naddy Exp $
d3 1
a3 1
handle giflib-5.0+
d8 2
a9 2
--- Imlib/load.c.orig	Fri Mar 22 07:43:04 2002
+++ Imlib/load.c	Thu Sep 19 05:44:29 2013
d100 34
@


1.7
log
@Fix build with png-1.5.
All fixes from/via NetBSD pkgsrc.  The people there did a lot of
heavy lifting.
@
text
@d1 7
a7 1
$OpenBSD: patch-Imlib_load_c,v 1.6 2009/01/09 16:21:42 naddy Exp $
d9 17
a25 2
+++ Imlib/load.c	Mon Jul  4 17:33:14 2011
@@@@ -191,12 +191,12 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
d40 1
a40 1
@@@@ -254,7 +254,8 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
d50 1
a50 1
@@@@ -279,6 +280,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
d58 1
a58 1
@@@@ -294,6 +296,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *w, int *h, int
d66 35
a100 1
@@@@ -631,12 +634,12 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d115 1
a115 1
@@@@ -645,9 +648,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d127 1
a127 1
@@@@ -661,6 +664,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d137 1
a137 1
@@@@ -786,9 +792,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d151 1
a151 1
@@@@ -810,9 +820,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d165 1
a165 1
@@@@ -851,9 +865,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d179 1
a179 1
@@@@ -864,9 +882,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d193 1
a193 1
@@@@ -874,9 +896,13 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d207 1
a207 1
@@@@ -884,9 +910,12 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d220 1
a220 1
@@@@ -894,12 +923,16 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d237 1
a237 1
@@@@ -907,12 +940,16 @@@@ _LoadBMP(ImlibData * id, FILE *file, int *w, int *h, i
d254 1
a254 1
@@@@ -1061,7 +1098,7 @@@@ _LoadXPM(ImlibData * id, FILE *file, int *w, int *h, i
d263 1
a263 1
@@@@ -1861,7 +1898,7 @@@@ Imlib_load_image(ImlibData * id, char *file)
d272 1
a272 1
@@@@ -1870,10 +1907,10 @@@@ Imlib_load_image(ImlibData * id, char *file)
@


1.6
log
@regen patches
@
text
@d1 18
a18 3
$OpenBSD: patch-Imlib_load_c,v 1.5 2004/09/15 19:41:44 robert Exp $
--- Imlib/load.c.orig	Fri Mar 22 15:43:04 2002
+++ Imlib/load.c	Fri Jan  9 17:20:41 2009
@


1.5
log
@SECURITY:
Marcus Meissner discovered that imlib's BMP decoder would crash
when loading the test BMP file created by Chris Evans for testing
a previous Qt vulnerability.
It is believed that this bug could be exploited for arbitrary code execution.

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
+++ Imlib/load.c	Wed Sep 15 11:28:55 2004
@@@@ -254,7 +254,8 @@@@
d14 1
a14 1
@@@@ -279,6 +280,7 @@@@
d22 1
a22 1
@@@@ -294,6 +296,7 @@@@
d30 1
a30 1
@@@@ -631,12 +634,12 @@@@
d45 1
a45 1
@@@@ -645,9 +648,9 @@@@
d57 1
a57 1
@@@@ -661,6 +664,9 @@@@
d67 1
a67 1
@@@@ -786,9 +792,13 @@@@
d81 1
a81 1
@@@@ -810,9 +820,13 @@@@
d95 1
a95 1
@@@@ -851,9 +865,13 @@@@
d109 1
a109 1
@@@@ -864,9 +882,13 @@@@
d123 1
a123 1
@@@@ -874,9 +896,13 @@@@
d137 1
a137 1
@@@@ -884,9 +910,12 @@@@
d150 1
a150 1
@@@@ -894,12 +923,16 @@@@
d167 1
a167 1
@@@@ -907,12 +940,16 @@@@
d184 1
a184 1
@@@@ -1061,7 +1098,7 @@@@
d193 1
a193 1
@@@@ -1861,7 +1898,7 @@@@
d202 1
a202 1
@@@@ -1870,10 +1907,10 @@@@
@


1.4
log
@fix a bunch of bad bounds and off-by-ones, brad@@ ok
bump PKGNAME, will submit upstream
@
text
@d1 4
a4 3
--- Imlib/load.c.orig	Fri Mar 22 14:43:04 2002
+++ Imlib/load.c	Wed Jun 18 15:49:01 2003
@@@@ -254,7 +254,8 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *
d14 1
a14 1
@@@@ -279,6 +280,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *
d22 1
a22 1
@@@@ -294,6 +296,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *
d30 16
a45 1
@@@@ -645,9 +648,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int
d57 128
a184 1
@@@@ -1061,7 +1064,7 @@@@ _LoadXPM(ImlibData * id, FILE *file, int
d193 1
a193 1
@@@@ -1861,7 +1864,7 @@@@ Imlib_load_image(ImlibData * id, char *f
d202 1
a202 1
@@@@ -1870,10 +1873,10 @@@@ Imlib_load_image(ImlibData * id, char *f
@


1.4.4.1
log
@Marcus Meissner discovered that imlib's BMP decoder would crash
when loading the test BMP file created by Chris Evans for testing
a previous Qt vulnerability.
It is believed that this bug could be exploited for arbitrary code execution.
@
text
@d1 3
a3 4
$OpenBSD: patch-Imlib_load_c,v 1.5 2004/09/15 19:41:44 robert Exp $
--- Imlib/load.c.orig	Fri Mar 22 15:43:04 2002
+++ Imlib/load.c	Wed Sep 15 11:28:55 2004
@@@@ -254,7 +254,8 @@@@
d13 1
a13 1
@@@@ -279,6 +280,7 @@@@
d21 1
a21 1
@@@@ -294,6 +296,7 @@@@
d29 1
a29 16
@@@@ -631,12 +634,12 @@@@
   fread(dbuf, 4, 2, file);
   *w = (int)dbuf[0];
   *h = (int)dbuf[1];
-  if (*w > 32767)
+  if ((*w < 0) || (*w > 32767))
     {
       fprintf(stderr, "IMLIB ERROR: Image width > 32767 pixels for file\n");
       return NULL;
     }
-  if (*h > 32767)
+  if ((*h < 0) || (*h > 32767))
     {
       fprintf(stderr, "IMLIB ERROR: Image height > 32767 pixels for file\n");
       return NULL;
@@@@ -645,9 +648,9 @@@@
d41 1
a41 128
@@@@ -661,6 +664,9 @@@@
   ncolors = (int)dbuf[0];
   if (ncolors == 0)
     ncolors = 1 << bpp;
+  if ((ncolors < 0) || (ncolors > (1 << bpp)))
+    ncolors = 1 << bpp;
+
   /* some more sanity checks */
   if (((comp == BI_RLE4) && (bpp != 4)) || ((comp == BI_RLE8) && (bpp != 8)) || ((comp == BI_BITFIELDS) && (bpp != 16 && bpp != 32)))
     {
@@@@ -786,9 +792,13 @@@@
 		  for (bit = 0; bit < 8; bit++)
 		    {
 		      index = ((byte & (0x80 >> bit)) ? 1 : 0);
+		      /* possibly corrupted file? */
+		      if (index < ncolors && poffset < *w * *h * 3)
+			{
 		      ptr[poffset] = cmap[index].r;
 		      ptr[poffset + 1] = cmap[index].g;
 		      ptr[poffset + 2] = cmap[index].b;
+			}
 		      column++;
 		    }
 		}
@@@@ -810,9 +820,13 @@@@
 			  index = ((byte & (0xF0 >> nibble * 4)) >> (!nibble * 4));
 			  if (index >= 16)
 			    index = 15;
+			  /* possibly corrupted file? */
+			  if (index < ncolors && poffset < *w * *h * 3)
+			    {
 			  ptr[poffset] = cmap[index].r;
 			  ptr[poffset + 1] = cmap[index].g;
 			  ptr[poffset + 2] = cmap[index].b;
+			    }
 			  column++;
 			}
 		    }
@@@@ -851,9 +865,13 @@@@
 				{
 				  linepos++;
 				  byte = getc(file);
+				  /* possibly corrupted file? */
+				  if (byte < ncolors && poffset < *w * *h * 3)
+				    {
 				  ptr[poffset] = cmap[byte].r;
 				  ptr[poffset + 1] = cmap[byte].g;
 				  ptr[poffset + 2] = cmap[byte].b;
+				    }
 				  column++;
 				}
 			      if (absolute & 0x01)
@@@@ -864,9 +882,13 @@@@
 			{
 			  for (i = 0; i < first; i++)
 			    {
+			      /* possibly corrupted file? */
+			      if (byte < ncolors && poffset < *w * *h * 3)
+				{
 			      ptr[poffset] = cmap[byte].r;
 			      ptr[poffset + 1] = cmap[byte].g;
 			      ptr[poffset + 2] = cmap[byte].b;
+				}
 			      column++;
 			      linepos++;
 			    }
@@@@ -874,9 +896,13 @@@@
 		    }
 		  else
 		    {
+		      /* possibly corrupted file? */
+		      if (byte < ncolors && poffset < *w * *h * 3)
+			{
 		      ptr[poffset] = cmap[byte].r;
 		      ptr[poffset + 1] = cmap[byte].g;
 		      ptr[poffset + 2] = cmap[byte].b;
+			}
 		      column++;
 		    }
 		}
@@@@ -884,9 +910,12 @@@@
 	  else if (bpp == 24)
 	    {
 	      linepos += fread(bbuf, 1, 3, file);
+	      if (poffset< *w * *h * 3)
+		{
 	      ptr[poffset] = (unsigned char)bbuf[2];
 	      ptr[poffset + 1] = (unsigned char)bbuf[1];
 	      ptr[poffset + 2] = (unsigned char)bbuf[0];
+		}
 	      column++;
 	    }
 	  else if (bpp == 16)
@@@@ -894,12 +923,16 @@@@
 	      unsigned char       temp;
 
 	      linepos += fread(&word, 2, 1, file);
+	      /* possibly corrupted file? */
+	      if (poffset < *w * *h * 3)
+		{
 	      temp = (word & rmask) >> rshift;
 	      ptr[poffset] = temp;
 	      temp = (word & gmask) >> gshift;
 	      ptr[poffset + 1] = temp;
 	      temp = (word & bmask) >> gshift;
 	      ptr[poffset + 2] = temp;
+		}
 	      column++;
 	    }
 	  else
@@@@ -907,12 +940,16 @@@@
 	      unsigned char       temp;
 
 	      linepos += fread(&dword, 4, 1, file);
+	      /* possibly corrupted file? */
+	      if (poffset < *w * *h * 3)
+		{
 	      temp = (dword & rmask) >> rshift;
 	      ptr[poffset] = temp;
 	      temp = (dword & gmask) >> gshift;
 	      ptr[poffset + 1] = temp;
 	      temp = (dword & bmask) >> bshift;
 	      ptr[poffset + 2] = temp;
+		}
 	      column++;
 	    }
 	}
@@@@ -1061,7 +1098,7 @@@@
d50 1
a50 1
@@@@ -1861,7 +1898,7 @@@@
d59 1
a59 1
@@@@ -1870,10 +1907,10 @@@@
@


1.4.2.1
log
@Marcus Meissner discovered that imlib's BMP decoder would crash
when loading the test BMP file created by Chris Evans for testing
a previous Qt vulnerability.
It is believed that this bug could be exploited for arbitrary code execution.
@
text
@d1 3
a3 4
$OpenBSD: patch-Imlib_load_c,v 1.5 2004/09/15 19:41:44 robert Exp $
--- Imlib/load.c.orig	Fri Mar 22 15:43:04 2002
+++ Imlib/load.c	Wed Sep 15 11:28:55 2004
@@@@ -254,7 +254,8 @@@@
d13 1
a13 1
@@@@ -279,6 +280,7 @@@@
d21 1
a21 1
@@@@ -294,6 +296,7 @@@@
d29 1
a29 16
@@@@ -631,12 +634,12 @@@@
   fread(dbuf, 4, 2, file);
   *w = (int)dbuf[0];
   *h = (int)dbuf[1];
-  if (*w > 32767)
+  if ((*w < 0) || (*w > 32767))
     {
       fprintf(stderr, "IMLIB ERROR: Image width > 32767 pixels for file\n");
       return NULL;
     }
-  if (*h > 32767)
+  if ((*h < 0) || (*h > 32767))
     {
       fprintf(stderr, "IMLIB ERROR: Image height > 32767 pixels for file\n");
       return NULL;
@@@@ -645,9 +648,9 @@@@
d41 1
a41 128
@@@@ -661,6 +664,9 @@@@
   ncolors = (int)dbuf[0];
   if (ncolors == 0)
     ncolors = 1 << bpp;
+  if ((ncolors < 0) || (ncolors > (1 << bpp)))
+    ncolors = 1 << bpp;
+
   /* some more sanity checks */
   if (((comp == BI_RLE4) && (bpp != 4)) || ((comp == BI_RLE8) && (bpp != 8)) || ((comp == BI_BITFIELDS) && (bpp != 16 && bpp != 32)))
     {
@@@@ -786,9 +792,13 @@@@
 		  for (bit = 0; bit < 8; bit++)
 		    {
 		      index = ((byte & (0x80 >> bit)) ? 1 : 0);
+		      /* possibly corrupted file? */
+		      if (index < ncolors && poffset < *w * *h * 3)
+			{
 		      ptr[poffset] = cmap[index].r;
 		      ptr[poffset + 1] = cmap[index].g;
 		      ptr[poffset + 2] = cmap[index].b;
+			}
 		      column++;
 		    }
 		}
@@@@ -810,9 +820,13 @@@@
 			  index = ((byte & (0xF0 >> nibble * 4)) >> (!nibble * 4));
 			  if (index >= 16)
 			    index = 15;
+			  /* possibly corrupted file? */
+			  if (index < ncolors && poffset < *w * *h * 3)
+			    {
 			  ptr[poffset] = cmap[index].r;
 			  ptr[poffset + 1] = cmap[index].g;
 			  ptr[poffset + 2] = cmap[index].b;
+			    }
 			  column++;
 			}
 		    }
@@@@ -851,9 +865,13 @@@@
 				{
 				  linepos++;
 				  byte = getc(file);
+				  /* possibly corrupted file? */
+				  if (byte < ncolors && poffset < *w * *h * 3)
+				    {
 				  ptr[poffset] = cmap[byte].r;
 				  ptr[poffset + 1] = cmap[byte].g;
 				  ptr[poffset + 2] = cmap[byte].b;
+				    }
 				  column++;
 				}
 			      if (absolute & 0x01)
@@@@ -864,9 +882,13 @@@@
 			{
 			  for (i = 0; i < first; i++)
 			    {
+			      /* possibly corrupted file? */
+			      if (byte < ncolors && poffset < *w * *h * 3)
+				{
 			      ptr[poffset] = cmap[byte].r;
 			      ptr[poffset + 1] = cmap[byte].g;
 			      ptr[poffset + 2] = cmap[byte].b;
+				}
 			      column++;
 			      linepos++;
 			    }
@@@@ -874,9 +896,13 @@@@
 		    }
 		  else
 		    {
+		      /* possibly corrupted file? */
+		      if (byte < ncolors && poffset < *w * *h * 3)
+			{
 		      ptr[poffset] = cmap[byte].r;
 		      ptr[poffset + 1] = cmap[byte].g;
 		      ptr[poffset + 2] = cmap[byte].b;
+			}
 		      column++;
 		    }
 		}
@@@@ -884,9 +910,12 @@@@
 	  else if (bpp == 24)
 	    {
 	      linepos += fread(bbuf, 1, 3, file);
+	      if (poffset< *w * *h * 3)
+		{
 	      ptr[poffset] = (unsigned char)bbuf[2];
 	      ptr[poffset + 1] = (unsigned char)bbuf[1];
 	      ptr[poffset + 2] = (unsigned char)bbuf[0];
+		}
 	      column++;
 	    }
 	  else if (bpp == 16)
@@@@ -894,12 +923,16 @@@@
 	      unsigned char       temp;
 
 	      linepos += fread(&word, 2, 1, file);
+	      /* possibly corrupted file? */
+	      if (poffset < *w * *h * 3)
+		{
 	      temp = (word & rmask) >> rshift;
 	      ptr[poffset] = temp;
 	      temp = (word & gmask) >> gshift;
 	      ptr[poffset + 1] = temp;
 	      temp = (word & bmask) >> gshift;
 	      ptr[poffset + 2] = temp;
+		}
 	      column++;
 	    }
 	  else
@@@@ -907,12 +940,16 @@@@
 	      unsigned char       temp;
 
 	      linepos += fread(&dword, 4, 1, file);
+	      /* possibly corrupted file? */
+	      if (poffset < *w * *h * 3)
+		{
 	      temp = (dword & rmask) >> rshift;
 	      ptr[poffset] = temp;
 	      temp = (dword & gmask) >> gshift;
 	      ptr[poffset + 1] = temp;
 	      temp = (dword & bmask) >> bshift;
 	      ptr[poffset + 2] = temp;
+		}
 	      column++;
 	    }
 	}
@@@@ -1061,7 +1098,7 @@@@
d50 1
a50 1
@@@@ -1861,7 +1898,7 @@@@
d59 1
a59 1
@@@@ -1870,10 +1907,10 @@@@
@


1.3
log
@upgrade to imlib 1.9.14
@
text
@d1 2
a2 2
--- Imlib/load.c.orig	Fri Mar 22 09:43:04 2002
+++ Imlib/load.c	Thu May 16 22:12:55 2002
d41 31
@


1.2
log
@upgrade to imlib 1.9.11
@
text
@d1 3
a3 3
--- Imlib/load.c.orig	Tue Jul 31 18:15:16 2001
+++ Imlib/load.c	Tue Oct 30 21:49:59 2001
@@@@ -241,7 +241,8 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *
d13 1
a13 1
@@@@ -266,6 +267,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *
d21 1
a21 1
@@@@ -281,6 +283,7 @@@@ _LoadPNG(ImlibData * id, FILE * f, int *
d29 1
a29 1
@@@@ -623,9 +626,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int
@


1.1
log
@fix inane typo.
Recognize bmp 16 bpp much better.
@
text
@d1 29
a29 4
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
--- Imlib/load.c.orig	Tue Mar 13 19:54:26 2001
+++ Imlib/load.c	Tue Mar 13 19:54:44 2001
@@@@ -628,9 +628,9 @@@@ _LoadBMP(ImlibData * id, FILE *file, int
@

