head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	landry_20101028:1.1.1.1
	landry:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.09.12.18.22.19;	author jasper;	state dead;
branches;
next	1.3;

1.3
date	2011.04.05.18.43.43;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.17.13.05.21;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.28.12.36.10;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.28.12.36.10;	author landry;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
- update to 0.11.1
@
text
@$OpenBSD: patch-src_CameraTable_vala,v 1.3 2011/04/05 18:43:43 ajacoutot Exp $
We don't have gudev.. won't be able to detect cameras
--- src/CameraTable.vala.orig	Mon Apr  4 19:54:29 2011
+++ src/CameraTable.vala	Tue Apr  5 11:47:42 2011
@@@@ -26,7 +26,6 @@@@ public class CameraTable {
     
     private static CameraTable instance = null;
     
-    private GUdev.Client client = new GUdev.Client(SUBSYSTEMS);
     private OneShotScheduler camera_update_scheduler = null;
     private GPhoto.Context null_context = new GPhoto.Context();
     private GPhoto.CameraAbilitiesList abilities_list;
@@@@ -43,8 +42,6 @@@@ public class CameraTable {
         camera_update_scheduler = new OneShotScheduler("CameraTable update scheduler",
             on_update_cameras);
         
-        // listen for interesting events on the specified subsystems
-        client.uevent.connect(on_udev_event);
         volume_monitor = VolumeMonitor.get();
         volume_monitor.volume_changed.connect(on_volume_changed);
         volume_monitor.volume_added.connect(on_volume_changed);
@@@@ -105,31 +102,6 @@@@ public class CameraTable {
     private string[] get_all_usb_cameras() {
         string[] cameras = new string[0];
         
-        GLib.List<GUdev.Device> device_list = client.query_by_subsystem(null);
-        foreach (GUdev.Device device in device_list) {
-            string device_file = device.get_device_file();
-            if(
-                // only keep devices that have a non-null device file and that
-                // have both the ID_GPHOTO2 and GPHOTO2_DRIVER properties set
-                (device_file != null) &&
-                (device.has_property("ID_GPHOTO2")) &&
-                (device.has_property("GPHOTO2_DRIVER"))
-            ) {
-                int camera_bus, camera_device;
-                // extract the bus and device IDs from the device file string
-                // TODO: is it safe to parse the absolute path or should we be
-                // smarter and use a regex to only pick up the end of the path?
-                if (device_file.scanf("/dev/bus/usb/%d/%d", out camera_bus, out camera_device) < 2) {
-                    critical("get_all_usb_cameras: Failed to scanf device file %s", device_file);
-                    
-                    continue;
-                }
-                string camera = "usb:%.3d,%.3d".printf(camera_bus, camera_device);
-                debug("USB camera detected at %s", camera);
-                cameras += camera;
-            }
-        }
-        
         return cameras;
     }
     
@@@@ -204,24 +176,6 @@@@ public class CameraTable {
             "/dev/bus/usb/%s".printf(port.substring(4).replace(",", "/")) : null;
     }
     
-    private string? get_name_for_uuid(string uuid) {
-        foreach (Volume volume in volume_monitor.get_volumes()) {
-            if (volume.get_identifier(VOLUME_IDENTIFIER_KIND_UUID) == uuid) {
-                return volume.get_name();
-            }
-        }
-        return null;
-    }
-    
-    private GLib.Icon? get_icon_for_uuid(string uuid) {
-        foreach (Volume volume in volume_monitor.get_volumes()) {
-            if (volume.get_identifier(VOLUME_IDENTIFIER_KIND_UUID) == uuid) {
-                return volume.get_icon();
-            }
-        }
-        return null;
-    }
-
     private void update_camera_table() throws GPhotoError {
         // need to do this because virtual ports come and go in the USB world (and probably others)
         GPhoto.PortInfoList port_info_list;
@@@@ -311,23 +265,6 @@@@ public class CameraTable {
                 continue;
             }
             
-            // Get display name for camera.
-            string path = get_port_path(port);
-            if (null != path) {
-                GUdev.Device device = client.query_by_device_file(path);
-                string serial = device.get_property("ID_SERIAL_SHORT");
-                if (null != serial) {
-                    // Try to get the name and icon.
-                    display_name = get_name_for_uuid(serial);
-                    icon = get_icon_for_uuid(serial);
-                }
-                if (null == display_name) {
-                    display_name = device.get_sysfs_attr("product");
-                } 
-                if (null == display_name) {
-                    display_name = device.get_property("ID_MODEL");
-                }
-            }
             if (null == display_name) {
                 // Default to GPhoto detected name.
                 display_name = name;
@@@@ -365,13 +302,6 @@@@ public class CameraTable {
         }
     }
     
-    private void on_udev_event(string action, GUdev.Device device) {
-        debug("udev event: %s on %s", action, device.get_name());
-        
-        // Device add/removes often arrive in pairs; this allows for a single
-        // update to occur when they come in all at once
-        camera_update_scheduler.after_timeout(UPDATE_DELAY_MSEC, true);
-    }
     
     public void on_volume_changed(Volume volume) {
         camera_update_scheduler.after_timeout(UPDATE_DELAY_MSEC, true);
@


1.3
log
@Update to shotwell-0.9.1.

input from and ok landry@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_CameraTable_vala,v 1.2 2011/01/17 13:05:21 landry Exp $
@


1.2
log
@Update to shotwell 0.8.1:
* Video support for most major video formats
* Publish videos to major Web services, including YouTube, Flickr,
 Facebook, and PicasaWeb.
* Runtime monitoring of library directory and auto-import of newly
 created files.
* Background writing of metadata (tags, titles, ratings, orientation,
 and exposure date) to master files (user-configurable).
* Flagging photos for batch operations.
* Set multiple photos to desktop background slideshow.
* Numerous translation updates.
ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_CameraTable_vala,v 1.1.1.1 2010/10/28 12:36:10 landry Exp $
d3 3
a5 3
--- src/CameraTable.vala.orig	Tue Jan 11 00:13:03 2011
+++ src/CameraTable.vala	Mon Jan 17 00:54:28 2011
@@@@ -24,7 +24,6 @@@@ public class CameraTable {
d13 1
a13 1
@@@@ -41,8 +40,6 @@@@ public class CameraTable {
d22 1
a22 1
@@@@ -103,31 +100,6 @@@@ public class CameraTable {
d54 27
a80 1
@@@@ -300,20 +272,6 @@@@ public class CameraTable {
d83 1
a83 1
             // Get display name for camera.
d89 1
d91 1
d103 1
a103 1
@@@@ -351,13 +309,6 @@@@ public class CameraTable {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
--- src/CameraTable.vala.orig	Wed Jun 30 20:44:30 2010
+++ src/CameraTable.vala	Thu Jul  1 23:19:30 2010
d13 1
a13 1
@@@@ -40,9 +39,6 @@@@ public class CameraTable {
d19 4
a22 5
-        
         // because loading the camera abilities list takes a bit of time and slows down app
         // startup, delay loading it (and notifying any observers) for a small period of time,
         // after the dust has settled
@@@@ -99,31 +95,6 @@@@ public class CameraTable {
d54 22
a75 1
@@@@ -311,13 +282,6 @@@@ public class CameraTable {
d87 2
a88 2
     private void on_update_cameras() {
         try {
@


1.1.1.1
log
@Import shotwell 0.7.2 :

Shotwell is a digital photo organizer. It allows you to import photos
from disk or camera, organize them in various ways, view them in
full-window or fullscreen mode, and export them to share with others.

ok ajacoutot@@
@
text
@@
