head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.08.04.18.05.21;	author pascal;	state dead;
branches;
next	1.1;

1.1
date	2010.08.03.20.01.40;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove palm/pose.  Only works on i386, upstream is dead, and it requires a
substantial amount of changes to work with the upcoming x11/fltk update.

ok landry@@ aja@@, no objection from naddy@@
@
text
@$OpenBSD: patch-SrcShared_EmStream_h,v 1.1 2010/08/03 20:01:40 naddy Exp $
--- SrcShared/EmStream.h.orig	Tue Aug  3 13:35:49 2010
+++ SrcShared/EmStream.h	Tue Aug  3 13:39:15 2010
@@@@ -90,7 +90,7 @@@@ class EmStream
 
 									container.resize (numElements);
 
-									deque<T>::iterator	iter = container.begin ();
+									typename deque<T>::iterator	iter = container.begin ();
 									while (iter != container.end ())
 									{
 										*this >> *iter;
@@@@ -108,7 +108,7 @@@@ class EmStream
 
 									container.resize (numElements);
 
-									list<T>::iterator	iter = container.begin ();
+									typename list<T>::iterator	iter = container.begin ();
 									while (iter != container.end ())
 									{
 										*this >> *iter;
@@@@ -126,7 +126,7 @@@@ class EmStream
 
 									container.resize (numElements);
 
-									vector<T>::iterator	iter = container.begin ();
+									typename vector<T>::iterator	iter = container.begin ();
 									while (iter != container.end ())
 									{
 										*this >> *iter;
@@@@ -143,7 +143,7 @@@@ class EmStream
 
 									*this << numElements;
 
-									deque<T>::const_iterator	iter = container.begin ();
+									typename deque<T>::const_iterator	iter = container.begin ();
 									while (iter != container.end ())
 									{
 										*this << *iter;
@@@@ -160,7 +160,7 @@@@ class EmStream
 
 									*this << numElements;
 
-									list<T>::const_iterator	iter = container.begin ();
+									typename list<T>::const_iterator	iter = container.begin ();
 									while (iter != container.end ())
 									{
 										*this << *iter;
@@@@ -177,7 +177,7 @@@@ class EmStream
 
 									*this << numElements;
 
-									vector<T>::const_iterator	iter = container.begin ();
+									typename vector<T>::const_iterator	iter = container.begin ();
 									while (iter != container.end ())
 									{
 										*this << *iter;
@@@@ -321,7 +321,7 @@@@ EmStream& EmStream::operator<T> << (const deque<T>& co
 
 	*this << numElements;
 
-	const deque<T>::const_iterator	iter = container.begin ();
+	typename const deque<T>::const_iterator	iter = container.begin ();
 	while (iter != container.end ())
 	{
 		*this << *iter;
@@@@ -338,7 +338,7 @@@@ EmStream& EmStream::operator<T> << (const list<T>& con
 
 	*this << numElements;
 
-	const list<T>::const_iterator	iter = container.begin ();
+	typename const list<T>::const_iterator	iter = container.begin ();
 	while (iter != container.end ())
 	{
 		*this << *iter;
@@@@ -355,7 +355,7 @@@@ EmStream& EmStream::operator<T> << (const vector<T>& c
 
 	*this << numElements;
 
-	const vector<T>::const_iterator	iter = container.begin ();
+	typename const vector<T>::const_iterator	iter = container.begin ();
 	while (iter != container.end ())
 	{
 		*this << *iter;
@


1.1
log
@build fixes for gcc4; from FreeBSD
@
text
@d1 1
a1 1
$OpenBSD$
@

