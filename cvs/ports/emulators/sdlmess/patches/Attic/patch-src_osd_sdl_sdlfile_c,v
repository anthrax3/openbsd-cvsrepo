head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	landry_20090317:1.1.1.1
	priteau:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.07.19.11.29.12;	author landry;	state dead;
branches;
next	1.1;

1.1
date	2009.03.17.19.58.21;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.03.17.19.58.21;	author landry;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to sdlmame 0.132, from MAINTAINER Pierre Riteau. Patches merged
upstream.
@
text
@$OpenBSD: patch-src_osd_sdl_sdlfile_c,v 1.1 2009/03/17 19:58:21 landry Exp $
--- src/osd/sdl/sdlfile.c.orig	Sun Mar 15 15:49:29 2009
+++ src/osd/sdl/sdlfile.c	Sun Mar 15 15:50:38 2009
@@@@ -13,7 +13,7 @@@@
 #ifdef SDLMAME_LINUX
 #define __USE_LARGEFILE64
 #endif
-#ifndef SDLMAME_FREEBSD
+#ifndef SDLMAME_BSD
 #define _XOPEN_SOURCE 500
 #endif
 
@@@@ -96,7 +96,7 @@@@ file_error osd_open(const char *path, UINT32 openflags
 	UINT32 access;
 	const char *src;
 	char *dst;
-        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_FREEBSD) || defined(SDLMAME_OS2)
+        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_BSD) || defined(SDLMAME_OS2)
 	struct stat st;
 	#else
 	struct stat64 st;
@@@@ -180,7 +180,7 @@@@ file_error osd_open(const char *path, UINT32 openflags
 	#endif
 
 	// attempt to open the file
-        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_FREEBSD) || defined(SDLMAME_OS2)
+        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_BSD) || defined(SDLMAME_OS2)
 	(*file)->handle = open(tmpstr, access, 0666);
 	#else
 	(*file)->handle = open64(tmpstr, access, 0666);
@@@@ -203,7 +203,7 @@@@ file_error osd_open(const char *path, UINT32 openflags
 				// attempt to reopen the file
 				if (error == NO_ERROR)
 				{
-		                        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_FREEBSD) || defined(SDLMAME_OS2)
+		                        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_BSD) || defined(SDLMAME_OS2)
 					(*file)->handle = open(tmpstr, access, 0666);
 					#else
 					(*file)->handle = open64(tmpstr, access, 0666);
@@@@ -223,7 +223,7 @@@@ file_error osd_open(const char *path, UINT32 openflags
 	}
 
 	// get the file size
-        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_FREEBSD) || defined(SDLMAME_OS2)
+        #if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_BSD) || defined(SDLMAME_OS2)
 	fstat((*file)->handle, &st);
 	#else
 	fstat64((*file)->handle, &st);
@@@@ -253,7 +253,7 @@@@ file_error osd_read(osd_file *file, void *buffer, UINT
 {
 	ssize_t result;
 
-#if defined(SDLMAME_DARWIN) || defined(SDLMAME_FREEBSD)
+#if defined(SDLMAME_DARWIN) || defined(SDLMAME_BSD)
 	result = pread(file->handle, buffer, count, offset);
 	if (result < 0)
 #elif defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_OS2)
@@@@ -281,7 +281,7 @@@@ file_error osd_write(osd_file *file, const void *buffe
 {
 	UINT32 result;
 
-#if defined(SDLMAME_DARWIN) || defined(SDLMAME_FREEBSD)
+#if defined(SDLMAME_DARWIN) || defined(SDLMAME_BSD)
 	result = pwrite(file->handle, buffer, count, offset);
 	if (!result)
 #elif defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_OS2)
@@@@ -465,13 +465,13 @@@@ osd_directory_entry *osd_stat(const char *path)
 {
 	int err;
 	osd_directory_entry *result = NULL;
-	#if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_FREEBSD) || defined(SDLMAME_OS2)
+	#if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_BSD) || defined(SDLMAME_OS2)
 	struct stat st;
 	#else
 	struct stat64 st;
 	#endif
 	
-	#if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_FREEBSD) || defined(SDLMAME_OS2)
+	#if defined(SDLMAME_DARWIN) || defined(SDLMAME_WIN32) || defined(SDLMAME_NO64BITIO) || defined(SDLMAME_BSD) || defined(SDLMAME_OS2)
 	err = stat(path, &st);
 	#else
 	err = stat64(path, &st);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import sdlmess 0.130:
MESS stands for Multi Emulator Super System. It is an emulator for the
hardware of many different games consoles (e.g. Sega, NES, SNES, etc.)
as well as many different old games-oriented home computers (e.g. C64,
C128, ZX80, etc.)
SDLMESS is a port of MESS using the SDL library.

After many submissions and updates by Pierre Riteau (at gmail), thanks!
@
text
@@
