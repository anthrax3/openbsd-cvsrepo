head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	todd_20080119:1.1.1.1
	todd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.08.16.21.23.52;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2010.04.30.14.39.13;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.19.23.55.19;	author todd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.01.19.23.55.19;	author todd;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove kqemu (which was broken, reported by Alexander Schrijver and
probably others) and qemu-old; the current qemu version in emulators/qemu
works well now (kqemu is no longer supported upstream).

ok Brad (emulators/qemu maintainer) todd@@ and I think there were some others
@
text
@$OpenBSD: patch-common_monitor_c,v 1.2 2010/04/30 14:39:13 naddy Exp $
--- common/monitor.c.orig	Tue Feb  6 22:02:00 2007
+++ common/monitor.c	Fri Apr 30 16:28:43 2010
@@@@ -990,7 +990,8 @@@@ static void *map_vaddr(struct kqemu_state *s, unsigned
     e = &s->soft_tlb[(addr >> PAGE_SHIFT) & (SOFT_TLB_SIZE - 1)];
  redo:
     if (e->vaddr[(is_user << 1) + is_write] != (addr & PAGE_MASK)) {
-        soft_tlb_fill(s, addr, is_write, is_user);
+        if(cpu_x86_handle_mmu_fault(s, addr, is_write, is_user, 1))
+                return NULL;
         goto redo;
     } else {
         taddr = e->addend + addr;
@@@@ -1802,6 +1803,11 @@@@ static void update_dt_cache(struct kqemu_state *s, int
             page_end = dt_end;
         sel2 = sel + (page_end - dt_ptr);
         ptr = map_vaddr(s, dt_ptr, 0, 0);
+        if(!ptr)
+                /* Open/NetBSD have a 'dynamic' GDT, but they load the gdt
+                   register with LGDT only once and with a limit far beyond
+                   the end of the memory actually mapped for the table */
+                goto skip_the_rest;
         ram_addr = ram_ptr_to_ram_addr(s, ptr);
         if (dt_changed || 
             s->dt_ram_addr[dt_type][pindex] != ram_addr ||
@@@@ -1818,7 +1824,7 @@@@ static void update_dt_cache(struct kqemu_state *s, int
     sel_end = (s->dt_limit[dt_type] + 1) & ~7;
     if (sel < sel_end)
         reset_dt_entries(s, dt_type, sel, sel_end);
-
+skip_the_rest:
     s->dt_base[dt_type] = base;
     s->dt_limit[dt_type] = limit;
 }
@


1.2
log
@we need to explicitly include <sys/proc.h>
@
text
@d1 1
a1 1
$OpenBSD: patch-common_monitor_c,v 1.1.1.1 2008/01/19 23:55:19 todd Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
+++ common/monitor.c	Mon Nov 12 23:59:17 2007
@@@@ -990,7 +990,8 @@@@ static void *map_vaddr(struct kqemu_stat
d14 1
a14 1
@@@@ -1802,6 +1803,11 @@@@ static void update_dt_cache(struct kqemu
d26 1
a26 1
@@@@ -1818,7 +1824,7 @@@@ static void update_dt_cache(struct kqemu
@


1.1.1.1
log
@Import kqemu, submitted in the past, slightly tweaked by me

The QEMU Accelerator (KQEMU) is a driver allowing a user application to
run x86 code in a Virtual Machine (VM). The code can be either user or
kernel code, in 64, 32 or 16 bit protected mode. KQEMU is very similar
in essence to the VM86 Linux syscall call, but it adds some new concepts
to improve memory handling.

KQEMU is ported on many host OSes (currently Linux, Windows, FreeBSD,
Solaris). It can execute code from many guest OSes (e.g. Linux, Windows
2000/XP) even if the host CPU does not support hardware virtualization.
@
text
@@
