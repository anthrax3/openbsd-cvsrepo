head	1.6;
access;
symbols
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	todd_20080119:1.1.1.1
	todd:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2011.08.16.21.23.52;	author sthen;	state dead;
branches;
next	1.5;

1.5
date	2008.04.29.20.38.03;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.29.01.51.25;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.28.22.27.41;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2008.01.20.15.11.05;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.19.23.55.19;	author todd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.01.19.23.55.19;	author todd;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove kqemu (which was broken, reported by Alexander Schrijver and
probably others) and qemu-old; the current qemu version in emulators/qemu
works well now (kqemu is no longer supported upstream).

ok Brad (emulators/qemu maintainer) todd@@ and I think there were some others
@
text
@# $OpenBSD: Makefile.openbsd,v 1.5 2008/04/29 20:38:03 todd Exp $

NOMAN = noman
CFLAGS += -Wall
COMMON = kqemu-mod-${MACHINE_ARCH:S/amd64/x86_64/}.o
.if defined(MP)
CFLAGS += -DMULTIPROCESSOR
SRCS = kqemu-openbsd-mp.c
LKM = kqemu_mp
COMBINED = kqemu_mp.o
.else
SRCS = kqemu-openbsd.c
LKM = kqemu
COMBINED = kqemu.o
.endif
OBJS = ${COMMON}

.include <bsd.lkm.mk>

${COMMON}:
	gmake -C common all

clean:
	rm -f $(COMMON)
	gmake -C common clean
@


1.5
log
@o compile and install a MP lkm as well
o initial work by brad@@, polishing by me
o idea for MP detection shellcode from drahn@@

for those with MP systems, pay attention to the MESSAGE shellcode example,
and make sure to modify any existing shellcode you may have in
/etc/rc.securelevel lest you try to load a UP lkm on a MP kernel and have
unpleasant consequences.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.openbsd,v 1.4 2008/04/29 01:51:25 todd Exp $
@


1.4
log
@add rcs tag properly
@
text
@d1 1
a1 1
# $OpenBSD$
d6 6
a12 1
OBJS = ${COMMON}
d15 2
@


1.3
log
@various cleanups/knf/etc from brad@@
@
text
@d1 1
a1 1
# $OpenBSD
@


1.2
log
@- add missing RCS tags
- respect $CC
- add NO_REGRESS
- s/$LOCALBASE/$PREFIX and don't hardcode paths
- lowercase MAINTAINER's email

ok jasper@@ sthen@@ marco@@ todd@@ (MAINTAINER)
@
text
@d4 2
a5 9

.if ${MACHINE_ARCH} == "i386"
    CFLAGS += -Wall -DI386
    COMMON = kqemu-mod-i386.o
.elif ${MACHINE_ARCH} == "amd64"
    CFLAGS += -Wall -DAMD64
    COMMON = kqemu-mod-x86_64.o
.endif

@


1.1
log
@Initial revision
@
text
@d1 2
@


1.1.1.1
log
@Import kqemu, submitted in the past, slightly tweaked by me

The QEMU Accelerator (KQEMU) is a driver allowing a user application to
run x86 code in a Virtual Machine (VM). The code can be either user or
kernel code, in 64, 32 or 16 bit protected mode. KQEMU is very similar
in essence to the VM86 Linux syscall call, but it adds some new concepts
to improve memory handling.

KQEMU is ported on many host OSes (currently Linux, Windows, FreeBSD,
Solaris). It can execute code from many guest OSes (e.g. Linux, Windows
2000/XP) even if the host CPU does not support hardware virtualization.
@
text
@@
