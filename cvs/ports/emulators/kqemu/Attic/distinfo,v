head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	todd_20080119:1.1.1.1
	todd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.08.16.21.23.52;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2011.05.31.08.35.20;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.19.23.55.19;	author todd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.01.19.23.55.19;	author todd;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove kqemu (which was broken, reported by Alexander Schrijver and
probably others) and qemu-old; the current qemu version in emulators/qemu
works well now (kqemu is no longer supported upstream).

ok Brad (emulators/qemu maintainer) todd@@ and I think there were some others
@
text
@MD5 (kqemu-1.3.0pre11.tar.gz) = lwUhh074sbpFmJJazlk2ww==
RMD160 (kqemu-1.3.0pre11.tar.gz) = PULS5vOulDYsWinEYvf7g5aHpWM=
SHA1 (kqemu-1.3.0pre11.tar.gz) = eA1IuZcV5rJnGGStUFDxyVBvy3E=
SHA256 (kqemu-1.3.0pre11.tar.gz) = VBrvV5flxsanbjVMF8ZRPKIf4zcux5SToy9+Ubp4Ww8=
SIZE (kqemu-1.3.0pre11.tar.gz) = 161478
@


1.2
log
@use base64-encoded checksums, "if you wish to regen, go ahead" espie@@
@
text
@@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
MD5 (kqemu-1.3.0pre11.tar.gz) = 970521874ef8b1ba4598925ace5936c3
RMD160 (kqemu-1.3.0pre11.tar.gz) = 3d42d2e6f3ae94362c5a29c462f7fb839687a563
SHA1 (kqemu-1.3.0pre11.tar.gz) = 780d48b99715e6b2671864ad5050f1c9506fcb71
SHA256 (kqemu-1.3.0pre11.tar.gz) = 541aef5797e5c6c6a76e354c17c6513ca21fe3372ec79493a32f7e51ba785b0f
@


1.1.1.1
log
@Import kqemu, submitted in the past, slightly tweaked by me

The QEMU Accelerator (KQEMU) is a driver allowing a user application to
run x86 code in a Virtual Machine (VM). The code can be either user or
kernel code, in 64, 32 or 16 bit protected mode. KQEMU is very similar
in essence to the VM86 Linux syscall call, but it adds some new concepts
to improve memory handling.

KQEMU is ported on many host OSes (currently Linux, Windows, FreeBSD,
Solaris). It can execute code from many guest OSes (e.g. Linux, Windows
2000/XP) even if the host CPU does not support hardware virtualization.
@
text
@@
