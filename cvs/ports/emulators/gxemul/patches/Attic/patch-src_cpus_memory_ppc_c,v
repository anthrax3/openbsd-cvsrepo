head	1.3;
access;
symbols
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2006.03.23.01.40.03;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2005.12.20.18.57.41;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.20.08.06.02;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.3
log
@upgrade to gxemul 0.3.8
@
text
@$OpenBSD: patch-src_cpus_memory_ppc_c,v 1.2 2005/12/20 18:57:41 pvalchev Exp $
--- src/cpus/memory_ppc.c.orig	Tue Nov 22 14:56:18 2005
+++ src/cpus/memory_ppc.c	Tue Dec 20 11:31:56 2005
@@@@ -44,7 +44,7 @@@@
 int ppc_bat(struct cpu *cpu, uint64_t vaddr, uint64_t *return_addr, int flags,
 	int user)
 {
-	int i, pp, regnr;
+	int i, pp;
 
 	if (cpu->cd.ppc.bits != 32) {
 		fatal("TODO: ppc_bat() for non-32-bit\n");
@@@@ -57,7 +57,7 @@@@ int ppc_bat(struct cpu *cpu, uint64_t va
 
 	/*  4 instruction BATs, 4 data BATs...  */
 	for (i=0; i<8; i++) {
-		regnr = SPR_IBAT0U + i * 2;
+		int regnr = SPR_IBAT0U + i * 2;
 		uint32_t upper = cpu->cd.ppc.spr[regnr];
 		uint32_t lower = cpu->cd.ppc.spr[regnr + 1];
 		uint32_t phys = lower & BAT_RPN, ebs = upper & BAT_EPI;
@


1.2
log
@correct bugfix, i was on drugs; spotted by author Anders Gavare
@
text
@d1 1
a1 1
$OpenBSD: patch-src_cpus_memory_ppc_c,v 1.1 2005/12/20 08:06:02 pvalchev Exp $
@


1.1
log
@gcc2: move vars in beginning of block
@
text
@d1 13
a13 4
$OpenBSD$
--- src/cpus/memory_ppc.c.orig	Mon Dec 19 23:00:42 2005
+++ src/cpus/memory_ppc.c	Mon Dec 19 23:00:55 2005
@@@@ -57,11 +57,11 @@@@ int ppc_bat(struct cpu *cpu, uint64_t va
d18 1
a21 5
 		uint32_t mask = ((upper & BAT_BL) << 15) | 0x1ffff;
+		regnr = SPR_IBAT0U + i * 2;
 
 		/*  Instruction BAT, but not instruction lookup? Then skip.  */
 		if (i < 4 && !(flags & FLAG_INSTR))
@

