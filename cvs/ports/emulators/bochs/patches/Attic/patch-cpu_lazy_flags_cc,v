head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.18;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.08;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-cpu_lazy_flags_cc,v 1.1 2001/02/02 16:59:08 todd Exp $
--- cpu/lazy_flags.cc.orig	Sat Mar 25 21:39:08 2000
+++ cpu/lazy_flags.cc	Tue Oct 17 12:04:01 2000
@@@@ -188,14 +188,14 @@@@ BX_CPU_C::get_CF(void)
               (32 - BX_CPU_THIS_PTR oszapc.op2_32)) & 0x01;
           break;
         default:
-          bx_panic("get_CF: OSZAPC: unknown instr %u\n",
+          bio->panic("get_CF: OSZAPC: unknown instr %u\n",
             (unsigned) BX_CPU_THIS_PTR oszapc.instr);
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xfffff0;
       return(BX_CPU_THIS_PTR eflags.cf);
 
     default:
-      bx_panic("get_CF: unknown case\n");
+      bio->panic("get_CF: unknown case\n");
       return(0);
     }
 }
@@@@ -283,7 +283,7 @@@@ BX_CPU_C::get_AF(void)
           /* undefined */
           break;
         default:
-          bx_panic("get_AF: OSZAPC: unknown instr %u\n",
+          bio->panic("get_AF: OSZAPC: unknown instr %u\n",
             (unsigned) BX_CPU_THIS_PTR oszapc.instr);
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xfff0ff;
@@@@ -316,14 +316,14 @@@@ BX_CPU_C::get_AF(void)
             (BX_CPU_THIS_PTR oszap.result_32 & 0x0f) == 0x0f;
           break;
         default:
-          bx_panic("get_AF: OSZAP: unknown instr %u\n",
+          bio->panic("get_AF: OSZAP: unknown instr %u\n",
             (unsigned) BX_CPU_THIS_PTR oszap.instr);
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xfff0ff;
       return(BX_CPU_THIS_PTR eflags.af);
 
     default:
-      bx_panic("get_AF: unknown case\n");
+      bio->panic("get_AF: unknown case\n");
       return(0);
     }
 }
@@@@ -390,7 +390,7 @@@@ BX_CPU_C::get_ZF(void)
           BX_CPU_THIS_PTR eflags.zf = (BX_CPU_THIS_PTR oszapc.result_32 == 0);
           break;
         default:
-          bx_panic("get_ZF: OSZAPC: unknown instr\n");
+          bio->panic("get_ZF: OSZAPC: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xff0fff;
       return(BX_CPU_THIS_PTR eflags.zf);
@@@@ -410,13 +410,13 @@@@ BX_CPU_C::get_ZF(void)
           BX_CPU_THIS_PTR eflags.zf = (BX_CPU_THIS_PTR oszap.result_32 == 0);
           break;
         default:
-          bx_panic("get_ZF: OSZAP: unknown instr\n");
+          bio->panic("get_ZF: OSZAP: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xff0fff;
       return(BX_CPU_THIS_PTR eflags.zf);
 
     default:
-      bx_panic("get_ZF: unknown case\n");
+      bio->panic("get_ZF: unknown case\n");
       return(0);
     }
 }
@@@@ -486,7 +486,7 @@@@ BX_CPU_C::get_SF(void)
             (BX_CPU_THIS_PTR oszapc.result_32 >= 0x80000000);
           break;
         default:
-          bx_panic("get_SF: OSZAPC: unknown instr\n");
+          bio->panic("get_SF: OSZAPC: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xf0ffff;
       return(BX_CPU_THIS_PTR eflags.sf);
@@@@ -509,13 +509,13 @@@@ BX_CPU_C::get_SF(void)
             (BX_CPU_THIS_PTR oszap.result_32 >= 0x80000000);
           break;
         default:
-          bx_panic("get_SF: OSZAP: unknown instr\n");
+          bio->panic("get_SF: OSZAP: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xf0ffff;
       return(BX_CPU_THIS_PTR eflags.sf);
 
     default:
-      bx_panic("get_SF: unknown case\n");
+      bio->panic("get_SF: unknown case\n");
       return(0);
     }
 }
@@@@ -653,7 +653,7 @@@@ BX_CPU_C::get_OF(void)
                 BX_CPU_THIS_PTR oszapc.result_32) & 0x80000000) > 0;
           break;
         default:
-          bx_panic("get_OF: OSZAPC: unknown instr\n");
+          bio->panic("get_OF: OSZAPC: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0x0fffff;
       return(BX_CPU_THIS_PTR eflags.of);
@@@@ -685,13 +685,13 @@@@ BX_CPU_C::get_OF(void)
             BX_CPU_THIS_PTR oszap.result_32 == 0x7FFFFFFF;
           break;
         default:
-          bx_panic("get_OF: OSZAP: unknown instr\n");
+          bio->panic("get_OF: OSZAP: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0x0fffff;
       return(BX_CPU_THIS_PTR eflags.of);
 
     default:
-      bx_panic("get_OF: unknown case\n");
+      bio->panic("get_OF: unknown case\n");
       return(0);
     }
 }
@@@@ -759,7 +759,7 @@@@ BX_CPU_C::get_PF(void)
             bx_parity_lookup[(Bit8u) BX_CPU_THIS_PTR oszapc.result_32];
           break;
         default:
-          bx_panic("get_PF: OSZAPC: unknown instr\n");
+          bio->panic("get_PF: OSZAPC: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xffff0f;
       return(BX_CPU_THIS_PTR lf_pf);
@@@@ -782,7 +782,7 @@@@ BX_CPU_C::get_PF(void)
             bx_parity_lookup[(Bit8u) BX_CPU_THIS_PTR oszap.result_32];
           break;
         default:
-          bx_panic("get_PF: OSZAP: unknown instr\n");
+          bio->panic("get_PF: OSZAP: unknown instr\n");
         }
       BX_CPU_THIS_PTR lf_flags_status &= 0xffff0f;
       return(BX_CPU_THIS_PTR lf_pf);
@@@@ -793,7 +793,7 @@@@ BX_CPU_C::get_PF(void)
       return(BX_CPU_THIS_PTR lf_pf);
 
     default:
-      bx_panic("get_PF: unknown case\n");
+      bio->panic("get_PF: unknown case\n");
       return(0);
     }
 }
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

