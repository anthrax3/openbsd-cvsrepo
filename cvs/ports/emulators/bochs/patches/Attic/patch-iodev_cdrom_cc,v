head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.11.29.17.22.01;	author giovanni;	state dead;
branches;
next	1.4;

1.4
date	2010.07.08.15.40.11;	author giovanni;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.20.15.30.05;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.26.06.02.28;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.11;	author todd;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Update to 2.5
from Brad
@
text
@$OpenBSD: patch-iodev_cdrom_cc,v 1.4 2010/07/08 15:40:11 giovanni Exp $
--- iodev/cdrom.cc.orig	Fri Dec  4 14:50:26 2009
+++ iodev/cdrom.cc	Fri Jun 18 18:49:22 2010
@@@@ -91,6 +91,9 @@@@ extern "C" {
 #include <sys/param.h>
 #include <sys/file.h>
 #include <sys/cdio.h>
+#if defined(__OpenBSD__)
+#include <sys/dkio.h>
+#endif
 #include <sys/ioctl.h>
 #include <sys/disklabel.h>
 // ntohl(x) et al have been moved out of sys/param.h in FreeBSD 5
@


1.4
log
@
Update to 2.4.5
from Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-iodev_cdrom_cc,v 1.3 2010/05/20 15:30:05 naddy Exp $
@


1.3
log
@fix fallout from the removal of dkio.h from ioctl.h
@
text
@d1 4
a4 4
$OpenBSD$
--- iodev/cdrom.cc.orig	Thu May 20 09:25:50 2010
+++ iodev/cdrom.cc	Thu May 20 09:26:46 2010
@@@@ -97,6 +97,9 @@@@ extern "C" {
@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@d1 4
a4 13
$OpenBSD: patch-iodev_cdrom_cc,v 1.1 2001/02/02 16:59:11 todd Exp $
--- iodev/cdrom.cc.orig	Sat Mar 25 21:32:13 2000
+++ iodev/cdrom.cc	Tue Oct 17 12:04:02 2000
@@@@ -42,11 +42,6 @@@@ extern "C" {
 
 #ifdef __OpenBSD__
 // Here is a diff for cdrom.cc which adds support for OpenBSD.
-//
-// Note that since the i386 sys/disklabel.h contains code which c++ considers
-// invalid, it will not work with a default release until OpenBSD 2.7.
-// (I will fix disklabel.h as soon as 2.6 is done and the tree is unlocked.)
-extern "C" {
 #include <sys/types.h>
d7 7
a13 121
@@@@ -57,7 +52,6 @@@@ extern "C" {
 // XXX
 #define BX_CD_FRAMESIZE 2048
 #define CD_FRAMESIZE	2048
-}
 #endif
 
 #ifdef WIN32
@@@@ -163,7 +157,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
   // Read CD TOC. Returns false if start track is out of bounds.
 
   if (fd < 0) {
-    bx_panic("cdrom: read_toc: file not open.\n");
+    bio->panic("cdrom: read_toc: file not open.\n");
     }
 
 #ifdef WIN32
@@@@ -178,7 +172,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
   {
   struct cdrom_tochdr tochdr;
   if (ioctl(fd, CDROMREADTOCHDR, &tochdr))
-    bx_panic("cdrom: read_toc: READTOCHDR failed.\n");
+    bio->panic("cdrom: read_toc: READTOCHDR failed.\n");
 
   if (start_track > tochdr.cdth_trk1)
     return false;
@@@@ -195,7 +189,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
     tocentry.cdte_format = (msf) ? CDROM_MSF : CDROM_LBA;
     tocentry.cdte_track = i;
     if (ioctl(fd, CDROMREADTOCENTRY, &tocentry))
-      bx_panic("cdrom: read_toc: READTOCENTRY failed.\n");
+      bio->panic("cdrom: read_toc: READTOCENTRY failed.\n");
     buf[len++] = 0; // Reserved
     buf[len++] = (tocentry.cdte_adr << 4) | tocentry.cdte_ctrl ; // ADR, control
     buf[len++] = i; // Track number
@@@@ -220,7 +214,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
   tocentry.cdte_format = (msf) ? CDROM_MSF : CDROM_LBA;
   tocentry.cdte_track = 0xaa;
   if (ioctl(fd, CDROMREADTOCENTRY, &tocentry))
-    bx_panic("cdrom: read_toc: READTOCENTRY lead-out failed.\n");
+    bio->panic("cdrom: read_toc: READTOCENTRY lead-out failed.\n");
   buf[len++] = 0; // Reserved
   buf[len++] = (tocentry.cdte_adr << 4) | tocentry.cdte_ctrl ; // ADR, control
   buf[len++] = 0xaa; // Track number
@@@@ -252,7 +246,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
   struct ioc_read_toc_entry t;
 
   if (ioctl (fd, CDIOREADTOCHEADER, &h) < 0)
-    bx_panic("cdrom: read_toc: READTOCHDR failed.\n");
+    bio->panic("cdrom: read_toc: READTOCHDR failed.\n");
 
   if (start_track > h.ending_track)
     return false;
@@@@ -272,7 +266,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
     t.data = &tocentry;
 
     if (ioctl (fd, CDIOREADTOCENTRYS, &tocentry) < 0)
-      bx_panic("cdrom: read_toc: READTOCENTRY failed.\n");
+      bio->panic("cdrom: read_toc: READTOCENTRY failed.\n");
 
     buf[len++] = 0; // Reserved
     buf[len++] = (tocentry.addr_type << 4) | tocentry.control ; // ADR, control
@@@@ -301,7 +295,7 @@@@ cdrom_interface::read_toc(uint8* buf, in
   t.data = &tocentry;
 
   if (ioctl (fd, CDIOREADTOCENTRYS, &tocentry) < 0)
-    bx_panic("cdrom: read_toc: READTOCENTRY lead-out failed.\n");
+    bio->panic("cdrom: read_toc: READTOCENTRY lead-out failed.\n");
 
   buf[len++] = 0; // Reserved
   buf[len++] = (tocentry.addr_type << 4) | tocentry.control ; // ADR, control
@@@@ -349,10 +343,10 @@@@ cdrom_interface::capacity()
   uint32 nr_sects;
 
   if (fd < 0) {
-    bx_panic("cdrom: capacity: file not open.\n");
+    bio->panic("cdrom: capacity: file not open.\n");
     }
   if (ioctl(fd, BLKGETSIZE, &nr_sects) != 0) {
-    bx_panic("cdrom: ioctl(BLKGETSIZE) failed\n");
+    bio->panic("cdrom: ioctl(BLKGETSIZE) failed\n");
     }
   nr_sects /= (CD_FRAMESIZE / 512);
 
@@@@ -365,10 +359,10 @@@@ cdrom_interface::capacity()
   struct disklabel lp;
 
   if (fd < 0)
-    bx_panic("cdrom: capacity: file not open.\n");
+    bio->panic("cdrom: capacity: file not open.\n");
 
   if (ioctl(fd, DIOCGDINFO, &lp) < 0)
-    bx_panic("cdrom: ioctl(DIOCGDINFO) failed\n");
+    bio->panic("cdrom: ioctl(DIOCGDINFO) failed\n");
 
   fprintf(stderr, "#cdrom: capacity: %u\n", lp.d_secperunit);
   return(lp.d_secperunit);
@@@@ -397,12 +391,12 @@@@ cdrom_interface::read_block(uint8* buf, 
 #ifdef WIN32
   pos = SetFilePointer(hFile, lba*BX_CD_FRAMESIZE, NULL, SEEK_SET);
   if (pos == 0xffffffff) {
-    bx_panic("cdrom: read_block: lseek returned error.\n");
+    bio->panic("cdrom: read_block: lseek returned error.\n");
     }
 #else
   pos = lseek(fd, lba*BX_CD_FRAMESIZE, SEEK_SET);
   if (pos < 0) {
-    bx_panic("cdrom: read_block: lseek returned error.\n");
+    bio->panic("cdrom: read_block: lseek returned error.\n");
     }
 #endif 
 
@@@@ -413,7 +407,7 @@@@ cdrom_interface::read_block(uint8* buf, 
 #endif
   
   if (n != BX_CD_FRAMESIZE) {
-    bx_panic("cdrom: read_block: read returned %d\n",
+    bio->panic("cdrom: read_block: read returned %d\n",
       (int) n);
     }
 }
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

