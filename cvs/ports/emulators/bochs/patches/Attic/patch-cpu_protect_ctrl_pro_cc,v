head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.20;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.09;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-cpu_protect_ctrl_pro_cc,v 1.1 2001/02/02 16:59:09 todd Exp $
--- cpu/protect_ctrl_pro.cc.orig	Sat Mar 25 21:39:09 2000
+++ cpu/protect_ctrl_pro.cc	Tue Oct 17 12:04:01 2000
@@@@ -34,15 +34,15 @@@@
   void
 BX_CPU_C::enter_protected_mode(void)
 {
-// bx_printf("processor switching into PROTECTED mode!!!\n");
+// bio->printf("processor switching into PROTECTED mode!!!\n");
 // debug(BX_CPU_THIS_PTR prev_eip);
-  if (v8086_mode()) bx_panic("protect_ctrl: v8086 mode unsupported\n");
+  if (v8086_mode()) bio->panic("protect_ctrl: v8086 mode unsupported\n");
 
-  if (bx_dbg.reset)
-    bx_printf("processor switching into PROTECTED mode!!!\n");
+  if (bio->getdbg().reset)
+    bio->printf("processor switching into PROTECTED mode!!!\n");
 
 if ( BX_CPU_THIS_PTR sregs[BX_SEG_REG_CS].selector.rpl!=0 || BX_CPU_THIS_PTR sregs[BX_SEG_REG_SS].selector.rpl!=0 )
-  bx_panic("enter_protected_mode: CS or SS rpl != 0\n");
+  bio->panic("enter_protected_mode: CS or SS rpl != 0\n");
 }
 
 
@@@@ -50,13 +50,13 @@@@ if ( BX_CPU_THIS_PTR sregs[BX_SEG_REG_CS
 BX_CPU_C::enter_real_mode(void)
 {
 // ???
-// bx_printf("processor switching into REAL mode!!!\n");
+// bio->printf("processor switching into REAL mode!!!\n");
 // debug(BX_CPU_THIS_PTR prev_eip);
-  if (v8086_mode()) bx_panic("protect_ctrl: v8086 mode unsupported\n");
+  if (v8086_mode()) bio->panic("protect_ctrl: v8086 mode unsupported\n");
 
-  if (bx_dbg.reset)
-    bx_printf("processor switching into REAL mode!!!\n");
+  if (bio->getdbg().reset)
+    bio->printf("processor switching into REAL mode!!!\n");
 
 if ( BX_CPU_THIS_PTR sregs[BX_SEG_REG_CS].selector.rpl!=0 || BX_CPU_THIS_PTR sregs[BX_SEG_REG_SS].selector.rpl!=0 )
-  bx_panic("enter_real_mode: CS or SS rpl != 0\n");
+  bio->panic("enter_real_mode: CS or SS rpl != 0\n");
 }
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

