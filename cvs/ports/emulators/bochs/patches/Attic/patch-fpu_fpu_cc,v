head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.24;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.10;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-fpu_fpu_cc,v 1.1 2001/02/02 16:59:10 todd Exp $
--- fpu/fpu.cc.orig	Sat Mar 25 21:57:16 2000
+++ fpu/fpu.cc	Tue Oct 17 12:04:03 2000
@@@@ -46,7 +46,7 @@@@ BX_CPU_C::ESC0(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC0 not implemented\n");
+  bio->printf("ESC0 not implemented\n");
 #endif
 }
 
@@@@ -59,7 +59,7 @@@@ BX_CPU_C::ESC1(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC1 not implemented\n");
+  bio->printf("ESC1 not implemented\n");
 #endif
 }
 
@@@@ -72,7 +72,7 @@@@ BX_CPU_C::ESC2(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC2 not implemented\n");
+  bio->printf("ESC2 not implemented\n");
 #endif
 }
 
@@@@ -89,7 +89,7 @@@@ BX_CPU_C::ESC3(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC3 not implemented\n");
+  bio->printf("ESC3 not implemented\n");
 #endif
 }
 
@@@@ -102,7 +102,7 @@@@ BX_CPU_C::ESC4(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC4 not implemented\n");
+  bio->printf("ESC4 not implemented\n");
 #endif
 }
 
@@@@ -115,7 +115,7 @@@@ BX_CPU_C::ESC5(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC5 not implemented\n");
+  bio->printf("ESC5 not implemented\n");
 #endif
 }
 
@@@@ -128,7 +128,7 @@@@ BX_CPU_C::ESC6(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC6 not implemented\n");
+  bio->printf("ESC6 not implemented\n");
 #endif
 }
 
@@@@ -141,7 +141,7 @@@@ BX_CPU_C::ESC7(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("ESC7 not implemented\n");
+  bio->printf("ESC7 not implemented\n");
 #endif
 }
 
@@@@ -153,7 +153,7 @@@@ BX_CPU_C::FWAIT(BxInstruction_t *i)
   // The same goes for prefix instructions, and instructions which
   // modify segment registers. (pg4-16)
   // BX_CPU_THIS_PTR single_step_event = 0;
-  bx_panic("WAIT: not implemented for < 386\n");
+  bio->panic("WAIT: not implemented for < 386\n");
 #else // BX_CPU_LEVEL >= 3
 
   if ( BX_CPU_THIS_PTR cr0.ts && BX_CPU_THIS_PTR cr0.mp ) {
@@@@ -162,7 +162,7 @@@@ BX_CPU_C::FWAIT(BxInstruction_t *i)
 #if BX_SUPPORT_FPU
   fpu_execute(i);
 #else
-  bx_printf("FWAIT: no FPU\n");
+  bio->printf("FWAIT: no FPU\n");
 #endif
 
 #endif
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

