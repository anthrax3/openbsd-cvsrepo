head	1.5;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2012.01.12.17.01.47;	author giovanni;	state dead;
branches;
next	1.4;

1.4
date	2011.12.13.08.46.51;	author giovanni;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.05.14.56.27;	author giovanni;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.26.06.02.36;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.12;	author todd;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Update to 2.5.1
from Brad (Maintainer)
@
text
@$OpenBSD: patch-memory_memory_cc,v 1.4 2011/12/13 08:46:51 giovanni Exp $

Fix for busmaster DMA transfers from device to memory

--- memory/memory.cc.orig	Sun Nov 27 11:12:19 2011
+++ memory/memory.cc	Wed Dec  7 01:55:19 2011
@@@@ -42,7 +42,7 @@@@ void BX_MEM_C::writePhysicalPage(BX_CPU_C *cpu, bx_phy
   bx_phy_address a20addr = A20ADDR(addr);
   struct memory_handler_struct *memory_handler = NULL;
 
-  // Note: accesses should always be contained within a single page now
+  // Note: accesses should always be contained within a single page
   if ((addr>>12) != ((addr+len-1)>>12)) {
     BX_PANIC(("writePhysicalPage: cross page access at address 0x" FMT_PHY_ADDRX ", len=%d", addr, len));
   }
@@@@ -195,7 +195,7 @@@@ void BX_MEM_C::readPhysicalPage(BX_CPU_C *cpu, bx_phy_
   bx_phy_address a20addr = A20ADDR(addr);
   struct memory_handler_struct *memory_handler = NULL;
 
-  // Note: accesses should always be contained within a single page now
+  // Note: accesses should always be contained within a single page
   if ((addr>>12) != ((addr+len-1)>>12)) {
     BX_PANIC(("readPhysicalPage: cross page access at address 0x" FMT_PHY_ADDRX ", len=%d", addr, len));
   }
@@@@ -362,6 +362,43 @@@@ inc_one:
     }
     else {
       memset(data, 0xFF, len);
+    }
+  }
+}
+
+void BX_MEM_C::dmaReadPhysicalPage(bx_phy_address addr, unsigned len, Bit8u *data)
+{
+  // Note: accesses should always be contained within a single page
+  if ((addr>>12) != ((addr+len-1)>>12)) {
+    BX_PANIC(("dmaReadPhysicalPage: cross page access at address 0x" FMT_PHY_ADDRX ", len=%d", addr, len));
+  }
+
+  Bit8u *memptr = getHostMemAddr(NULL, addr, BX_READ);
+  if (memptr != NULL) {
+    memcpy(data, memptr, len);
+  }
+  else {
+    for (unsigned i=0;i < len; i++) {
+      readPhysicalPage(NULL, addr+i, 1, &data[i]);
+    }
+  }
+}
+
+void BX_MEM_C::dmaWritePhysicalPage(bx_phy_address addr, unsigned len, Bit8u *data)
+{
+  // Note: accesses should always be contained within a single page
+  if ((addr>>12) != ((addr+len-1)>>12)) {
+    BX_PANIC(("dmaWritePhysicalPage: cross page access at address 0x" FMT_PHY_ADDRX ", len=%d", addr, len));
+  }
+
+  Bit8u *memptr = getHostMemAddr(NULL, addr, BX_WRITE);
+  if (memptr != NULL) {
+    pageWriteStampTable.decWriteStamp(addr);
+    memcpy(memptr, data, len);
+  }
+  else {
+    for (unsigned i=0;i < len; i++) {
+      writePhysicalPage(NULL, addr+i, 1, &data[i]);
     }
   }
 }
@


1.4
log
@
Better fix for a bus DMA bug
From Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-memory_memory_cc,v 1.3 2011/12/05 14:56:27 giovanni Exp $
@


1.3
log
@
Add a fix for a bus DMA bug
From Brad, thanks
@
text
@d1 1
a1 1
$OpenBSD$
d5 21
a25 3
--- memory/memory.cc.orig	Thu Dec  1 04:34:02 2011
+++ memory/memory.cc	Thu Dec  1 04:35:34 2011
@@@@ -365,3 +365,12 @@@@ inc_one:
d27 23
a49 2
   }
 }
d51 1
a51 1
+void BX_MEM_C::writePhysicalBlock(bx_phy_address addr, unsigned len, void *data)
d53 5
d63 6
a68 1
+}
@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@d1 19
a19 79
$OpenBSD: patch-memory_memory_cc,v 1.1 2001/02/02 16:59:12 todd Exp $
--- memory/memory.cc.orig	Sat Mar 25 21:46:39 2000
+++ memory/memory.cc	Tue Oct 17 12:04:03 2000
@@@@ -170,7 +170,7 @@@@ inc_one:
     // adapter ROM     C0000 .. DFFFF
     // ROM BIOS memory E0000 .. FFFFF
     // (ignore write)
-    //bx_printf("ROM lock %08x: len=%u\n",
+    //bio->printf("ROM lock %08x: len=%u\n",
     //  (unsigned) a20addr, (unsigned) len);
 #if BX_PCI_SUPPORT == 0
 #if BX_SHADOW_RAM
@@@@ -187,7 +187,7 @@@@ inc_one:
         ((a20addr >= 0xC0000) && (a20addr <= 0xFFFFF))) {
       switch (bx_pci.wr_memType(a20addr & 0xFC000)) {
         case 0x0:   // Writes to ShadowRAM
-//        bx_printf ("Writing to ShadowRAM %08x, len %u ! \n", (unsigned) a20addr, (unsigned) len);
+//        bio->printf ("Writing to ShadowRAM %08x, len %u ! \n", (unsigned) a20addr, (unsigned) len);
           BX_MEM.vector[a20addr] = *data_ptr;
           BX_DBG_DIRTY_PAGE(a20addr >> 12);
           BX_DYN_DIRTY_PAGE(a20addr >> 12);
@@@@ -195,10 +195,10 @@@@ inc_one:
 
         case 0x1:   // Writes to ROM, Inhibit
 //        bx_pci.s.i440fx.shadow[(a20addr - 0xc0000)] = *data_ptr;
-//        bx_printf ("Writing to ROM %08x, Data %02x ! \n", (unsigned) a20addr, *data_ptr);
+//        bio->printf ("Writing to ROM %08x, Data %02x ! \n", (unsigned) a20addr, *data_ptr);
           goto inc_one;
         default:
-          bx_panic("write_physical: default case\n");
+          bio->panic("write_physical: default case\n");
           goto inc_one;
         }
       }
@@@@ -374,15 +374,15 @@@@ inc_one:
       switch (bx_pci.rd_memType(a20addr & 0xFC000)) {
         case 0x0:   // Read from ShadowRAM
           *data_ptr = BX_MEM.vector[a20addr];
-          bx_printf ("Reading from ShadowRAM %08x, Data %02x \n", (unsigned) a20addr, *data_ptr);
+          bio->printf ("Reading from ShadowRAM %08x, Data %02x \n", (unsigned) a20addr, *data_ptr);
           goto inc_one;
 
         case 0x1:   // Read from ROM
           *data_ptr = bx_pci.s.i440fx.shadow[(a20addr - 0xc0000)];
-          //bx_printf ("Reading from ROM %08x, Data %02x  \n", (unsigned) a20addr, *data_ptr);
+          //bio->printf ("Reading from ROM %08x, Data %02x  \n", (unsigned) a20addr, *data_ptr);
           goto inc_one;
         default:
-          bx_panic("::read_physical: default case\n");
+          bio->panic("::read_physical: default case\n");
         }
       }
     goto inc_one;
@@@@ -413,21 +413,21 @@@@ inc_one:
             switch (bx_pci.rd_memType(a20addr & 0xFC000)) {
               case 0x0:   // Read from ROM
                 *data_ptr = BX_MEM.vector[a20addr];
-                //bx_printf ("Reading from ROM %08x, Data %02x \n", (unsigned) a20addr, *data_ptr);
+                //bio->printf ("Reading from ROM %08x, Data %02x \n", (unsigned) a20addr, *data_ptr);
                 break;
 
               case 0x1:   // Read from Shadow RAM
                 *data_ptr = bx_pci.s.i440fx.shadow[(a20addr - 0xc0000)];
-                bx_printf ("Reading from ShadowRAM %08x, Data %02x  \n", (unsigned) a20addr, *data_ptr);
+                bio->printf ("Reading from ShadowRAM %08x, Data %02x  \n", (unsigned) a20addr, *data_ptr);
                 break;
               default:
-                bx_panic("read_physical: default case\n");
+                bio->panic("read_physical: default case\n");
               } // Switch
             }
           }
         else {
           *data_ptr = BX_MEM.vector[a20addr];
-          bx_printf ("Reading from Norm %08x, Data %02x  \n", (unsigned) a20addr, *data_ptr);
+          bio->printf ("Reading from Norm %08x, Data %02x  \n", (unsigned) a20addr, *data_ptr);
           }
         }
       else
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

