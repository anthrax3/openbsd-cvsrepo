head	1.3;
access;
symbols
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2001.05.26.06.02.21;	author todd;	state dead;
branches;
next	1.2;

1.2
date	2001.03.30.18.53.25;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.09;	author todd;	state Exp;
branches;
next	;


desc
@@


1.3
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-cpu_segment_ctrl_pro_cc,v 1.2 2001/03/30 18:53:25 todd Exp $
--- cpu/segment_ctrl_pro.cc.orig	Sat Mar 25 21:39:09 2000
+++ cpu/segment_ctrl_pro.cc	Fri Mar 30 11:29:40 2001
@@@@ -70,7 +70,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       Bit32u dword1, dword2;
 
       if ((new_value & 0xfffc) == 0) { /* null selector */
-        bx_panic("load_seg_reg: SS: new_value == 0\n");
+        bio->printd("[CPU%u] load_seg_reg: SS: new_value == 0\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, 0, 0);
         return;
         }
@@@@ -83,8 +83,8 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
 
       if (ti == 0) { /* GDT */
         if ((index*8 + 7) > BX_CPU_THIS_PTR gdtr.limit) {
-          bx_panic("load_seg_reg: GDT: %s: index(%04x) > limit(%06x)\n",
-            BX_CPU_THIS_PTR strseg(seg), (unsigned) index, (unsigned) BX_CPU_THIS_PTR gdtr.limit);
+          bio->printd("[CPU%u] load_seg_reg: GDT: %s: index(%04x) > limit(%06x)\n",
+            BX_SIM_ID, BX_CPU_THIS_PTR strseg(seg), (unsigned) index, (unsigned) BX_CPU_THIS_PTR gdtr.limit);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
@@@@ -95,12 +95,12 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
         }
       else { /* LDT */
         if (BX_CPU_THIS_PTR ldtr.cache.valid==0) { /* ??? */
-          bx_printf("load_seg_reg: LDT invalid\n");
+          bio->printd("[CPU%u] load_seg_reg: LDT invalid\n", BX_SIM_ID);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
         if ((index*8 + 7) > BX_CPU_THIS_PTR ldtr.cache.u.ldt.limit) {
-          bx_printf("load_seg_reg ss: LDT: index > limit\n");
+          bio->printd("[CPU%u] load_seg_reg ss: LDT: index > limit\n", BX_SIM_ID);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
@@@@ -112,7 +112,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
 
       /* selector's RPL must = CPL, else #GP(selector) */
       if (rpl != CPL) {
-        bx_printf("load_seg_reg(): rpl != CPL\n");
+        bio->printd("[CPU%u] load_seg_reg(): rpl != CPL\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
         return;
         }
@@@@ -120,7 +120,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       parse_descriptor(dword1, dword2, &descriptor);
 
       if (descriptor.valid==0) {
-        bx_printf("load_seg_reg(): valid bit cleared\n");
+        bio->printd("[CPU%u] load_seg_reg(): valid bit cleared\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
         return;
         }
@@@@ -129,19 +129,19 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       if ( (descriptor.segment==0) ||
            descriptor.u.segment.executable ||
            descriptor.u.segment.r_w==0 ) {
-        bx_printf("load_seg_reg(): not writable data segment\n");
+        bio->printd("[CPU%u] load_seg_reg(): not writable data segment\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
         }
 
       /* DPL in the AR byte must equal CPL else #GP(selector) */
       if (descriptor.dpl != CPL) {
-        bx_printf("load_seg_reg(): dpl != CPL\n");
+        bio->printd("[CPU%u] load_seg_reg(): dpl != CPL\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
         }
 
       /* segment must be marked PRESENT else #SS(selector) */
       if (descriptor.p == 0) {
-        bx_printf("load_seg_reg(): not present\n");
+        bio->printd("[CPU%u] load_seg_reg(): not present\n", BX_SIM_ID);
         exception(BX_SS_EXCEPTION, new_value & 0xfffc, 0);
         }
 
@@@@ -197,8 +197,8 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
 
       if (ti == 0) { /* GDT */
         if ((index*8 + 7) > BX_CPU_THIS_PTR gdtr.limit) {
-          bx_printf("load_seg_reg: GDT: %s: index(%04x) > limit(%06x)\n",
-            BX_CPU_THIS_PTR strseg(seg), (unsigned) index, (unsigned) BX_CPU_THIS_PTR gdtr.limit);
+          bio->printd("[CPU%u] load_seg_reg: GDT: %s: index(%04x) > limit(%06x)\n",
+            BX_SIM_ID, BX_CPU_THIS_PTR strseg(seg), (unsigned) index, (unsigned) BX_CPU_THIS_PTR gdtr.limit);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
@@@@ -209,12 +209,12 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
         }
       else { /* LDT */
         if (BX_CPU_THIS_PTR ldtr.cache.valid==0) {
-          bx_printf("load_seg_reg: LDT invalid\n");
+          bio->printd("[CPU%u] load_seg_reg: LDT invalid\n", BX_SIM_ID);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
         if ((index*8 + 7) > BX_CPU_THIS_PTR ldtr.cache.u.ldt.limit) {
-          bx_printf("load_seg_reg ds,es: LDT: index > limit\n");
+          bio->printd("[CPU%u] load_seg_reg ds,es: LDT: index > limit\n", BX_SIM_ID);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
@@@@ -227,7 +227,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       parse_descriptor(dword1, dword2, &descriptor);
 
       if (descriptor.valid==0) {
-        bx_printf("load_seg_reg(): valid bit cleared\n");
+        bio->printd("[CPU%u] load_seg_reg(): valid bit cleared\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
         return;
         }
@@@@ -236,7 +236,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       if ( descriptor.segment==0 ||
            (descriptor.u.segment.executable==1 &&
             descriptor.u.segment.r_w==0) ) {
-        bx_printf("load_seg_reg(): not data or readable code\n");
+        bio->printd("[CPU%u] load_seg_reg(): not data or readable code\n", BX_SIM_ID);
         exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
         return;
         }
@@@@ -246,7 +246,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       if ( descriptor.u.segment.executable==0 ||
            descriptor.u.segment.c_ed==0 ) {
         if ((rpl > descriptor.dpl) || (CPL > descriptor.dpl)) {
-          bx_printf("load_seg_reg: RPL & CPL must be <= DPL\n");
+          bio->printd("[CPU%u] load_seg_reg: RPL & CPL must be <= DPL\n", BX_SIM_ID);
           exception(BX_GP_EXCEPTION, new_value & 0xfffc, 0);
           return;
           }
@@@@ -254,7 +254,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
 
       /* segment must be marked PRESENT else #NP(selector) */
       if (descriptor.p == 0) {
-        bx_printf("load_seg_reg: segment not present\n");
+        bio->printd("[CPU%u] load_seg_reg: segment not present\n", BX_SIM_ID);
         exception(BX_NP_EXCEPTION, new_value & 0xfffc, 0);
         return;
         }
@@@@ -281,7 +281,7 @@@@ BX_CPU_C::load_seg_reg(bx_segment_reg_t 
       return;
       }
     else {
-      bx_panic("load_seg_reg(): invalid segment register passed!\n");
+      bio->panic("[CPU%u] load_seg_reg(): invalid segment register passed!\n", BX_SIM_ID);
       return;
       }
     }
@@@@ -447,7 +447,7 @@@@ BX_CPU_C::parse_descriptor(Bit32u dword1
         temp->valid = 1;
         break;
 #endif
-      default: bx_panic("parse_descriptor(): case %d unfinished\n",
+      default: bio->panic("parse_descriptor(): case %d unfinished\n",
                  (unsigned) temp->type);
         temp->valid    = 0;
       }
@@@@ -465,13 +465,13 @@@@ BX_CPU_C::load_ldtr(bx_selector_t *selec
     }
 
   if (!descriptor)
-    bx_panic("load_ldtr(): descriptor == NULL!\n");
+    bio->panic("load_ldtr(): descriptor == NULL!\n");
 
   BX_CPU_THIS_PTR ldtr.cache = *descriptor; /* whole structure copy */
   BX_CPU_THIS_PTR ldtr.selector = *selector;
 
   if (BX_CPU_THIS_PTR ldtr.cache.u.ldt.limit < 7) {
-    bx_panic("load_ldtr(): ldtr.limit < 7\n");
+    bio->panic("load_ldtr(): ldtr.limit < 7\n");
     }
 
   BX_CPU_THIS_PTR ldtr.cache.valid = 1;
@@@@ -500,10 +500,10 @@@@ BX_CPU_C::load_ss(bx_selector_t *selecto
   BX_CPU_THIS_PTR sregs[BX_SEG_REG_SS].selector.rpl = cpl;
 
   if ( (BX_CPU_THIS_PTR sregs[BX_SEG_REG_SS].selector.value & 0xfffc) == 0 )
-    bx_panic("load_ss(): null selector passed\n");
+    bio->panic("load_ss(): null selector passed\n");
 
   if ( !BX_CPU_THIS_PTR sregs[BX_SEG_REG_SS].cache.valid ) {
-    bx_panic("load_ss(): invalid selector/descriptor passed.\n");
+    bio->panic("load_ss(): invalid selector/descriptor passed.\n");
     }
 }
 
@@@@ -516,12 +516,12 @@@@ BX_CPU_C::fetch_raw_descriptor(bx_select
 {
   if (selector->ti == 0) { /* GDT */
     if ((selector->index*8 + 7) > BX_CPU_THIS_PTR gdtr.limit) {
-bx_printf("-----------------------------------\n");
-bx_printf("selector->index*8 + 7 = %u\n", (unsigned) selector->index*8 + 7);
-bx_printf("gdtr.limit = %u\n", (unsigned) BX_CPU_THIS_PTR gdtr.limit);
-      bx_printf("fetch_raw_descriptor: GDT: index > limit\n");
+bio->printd("-----------------------------------\n");
+bio->printd("selector->index*8 + 7 = %u\n", (unsigned) selector->index*8 + 7);
+bio->printd("gdtr.limit = %u\n", (unsigned) BX_CPU_THIS_PTR gdtr.limit);
+      bio->printd("fetch_raw_descriptor: GDT: index > limit\n");
 debug(BX_CPU_THIS_PTR prev_eip);
-bx_printf("-----------------------------------\n");
+bio->printd("-----------------------------------\n");
       exception(exception_no, selector->value & 0xfffc, 0);
       return;
       }
@@@@ -532,10 +532,10 @@@@ bx_printf("-----------------------------
     }
   else { /* LDT */
     if (BX_CPU_THIS_PTR ldtr.cache.valid==0) {
-      bx_panic("fetch_raw_descriptor: LDTR.valid=0\n");
+      bio->panic("fetch_raw_descriptor: LDTR.valid=0\n");
       }
     if ((selector->index*8 + 7) > BX_CPU_THIS_PTR ldtr.cache.u.ldt.limit) {
-      bx_panic("fetch_raw_descriptor: LDT: index > limit\n");
+      bio->printd("fetch_raw_descriptor: LDT: index > limit\n");
       exception(exception_no, selector->value & 0xfffc, 0);
       return;
       }
@


1.2
log
@more printd
@
text
@d1 1
a1 1
$OpenBSD: patch-cpu_segment_ctrl_pro_cc,v 1.1 2001/02/02 16:59:09 todd Exp $
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
d3 1
a3 1
+++ cpu/segment_ctrl_pro.cc	Tue Oct 31 12:21:32 2000
d9 1
a9 1
+        bio->panic("[CPU%u] load_seg_reg: SS: new_value == 0\n", BX_SIM_ID);
d19 1
a19 1
+          bio->panic("[CPU%u] load_seg_reg: GDT: %s: index(%04x) > limit(%06x)\n",
d29 1
a29 1
+          bio->printf("[CPU%u] load_seg_reg: LDT invalid\n", BX_SIM_ID);
d35 1
a35 1
+          bio->printf("[CPU%u] load_seg_reg ss: LDT: index > limit\n", BX_SIM_ID);
d44 1
a44 1
+        bio->printf("[CPU%u] load_seg_reg(): rpl != CPL\n", BX_SIM_ID);
d53 1
a53 1
+        bio->printf("[CPU%u] load_seg_reg(): valid bit cleared\n", BX_SIM_ID);
d62 1
a62 1
+        bio->printf("[CPU%u] load_seg_reg(): not writable data segment\n", BX_SIM_ID);
d69 1
a69 1
+        bio->printf("[CPU%u] load_seg_reg(): dpl != CPL\n", BX_SIM_ID);
d76 1
a76 1
+        bio->printf("[CPU%u] load_seg_reg(): not present\n", BX_SIM_ID);
d86 1
a86 1
+          bio->printf("[CPU%u] load_seg_reg: GDT: %s: index(%04x) > limit(%06x)\n",
d96 1
a96 1
+          bio->printf("[CPU%u] load_seg_reg: LDT invalid\n", BX_SIM_ID);
d102 1
a102 1
+          bio->printf("[CPU%u] load_seg_reg ds,es: LDT: index > limit\n", BX_SIM_ID);
d111 1
a111 1
+        bio->printf("[CPU%u] load_seg_reg(): valid bit cleared\n", BX_SIM_ID);
d120 1
a120 1
+        bio->printf("[CPU%u] load_seg_reg(): not data or readable code\n", BX_SIM_ID);
d129 1
a129 1
+          bio->printf("[CPU%u] load_seg_reg: RPL & CPL must be <= DPL\n", BX_SIM_ID);
d138 1
a138 1
+        bio->printf("[CPU%u] load_seg_reg: segment not present\n", BX_SIM_ID);
d197 4
a200 4
+bio->printf("-----------------------------------\n");
+bio->printf("selector->index*8 + 7 = %u\n", (unsigned) selector->index*8 + 7);
+bio->printf("gdtr.limit = %u\n", (unsigned) BX_CPU_THIS_PTR gdtr.limit);
+      bio->printf("fetch_raw_descriptor: GDT: index > limit\n");
d203 1
a203 1
+bio->printf("-----------------------------------\n");
d216 1
a216 1
+      bio->panic("fetch_raw_descriptor: LDT: index > limit\n");
@

