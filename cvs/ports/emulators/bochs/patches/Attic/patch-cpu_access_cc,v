head	1.5;
access;
symbols
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2009.06.23.16.03.58;	author pirofti;	state dead;
branches;
next	1.4;

1.4
date	2008.07.22.13.08.05;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.26.06.02.10;	author todd;	state dead;
branches;
next	1.2;

1.2
date	2001.03.30.18.53.25;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.06;	author todd;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update bochs to 2.4.1. From brad.
@
text
@$OpenBSD: patch-cpu_access_cc,v 1.4 2008/07/22 13:08:05 brad Exp $
--- cpu/access.cc.orig	Tue Jul 22 09:03:51 2008
+++ cpu/access.cc	Tue Jul 22 09:04:09 2008
@@@@ -1212,7 +1212,7 @@@@ BX_CPU_C::write_RMW_virtual_qword(Bit64u val64)
     BX_DBG_PHY_MEMORY_ACCESS(BX_CPU_ID,
         BX_CPU_THIS_PTR address_xlation.paddress1,
         BX_CPU_THIS_PTR address_xlation.len1, BX_WRITE,
-        ((Bit8u *) &val32) + (8 - BX_CPU_THIS_PTR address_xlation.len1));
+        ((Bit8u *) &val64) + (8 - BX_CPU_THIS_PTR address_xlation.len1));
     BX_MEM(0)->writePhysicalPage(BX_CPU_THIS,
         BX_CPU_THIS_PTR address_xlation.paddress2,
         BX_CPU_THIS_PTR address_xlation.len2,
@


1.4
log
@Allow Bochs to build on big endian systems.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@d1 12
a12 151
$OpenBSD: patch-cpu_access_cc,v 1.2 2001/03/30 18:53:25 todd Exp $
--- cpu/access.cc.orig	Sat Mar 25 21:39:07 2000
+++ cpu/access.cc	Fri Mar 30 11:16:57 2001
@@@@ -39,18 +39,18 @@@@ BX_CPU_C::write_virtual_checks(bx_segmen
 
   if ( protected_mode() ) {
     if ( seg->cache.valid==0 ) {
-      bx_printf("seg = %s\n", BX_CPU_THIS_PTR strseg(seg));
-      bx_printf("seg->selector.value = %04x\n", (unsigned) seg->selector.value);
-      bx_printf("write_virtual_checks: valid bit = 0\n");
-bx_printf("CS: %04x\n", (unsigned) BX_CPU_THIS_PTR sregs[1].selector.value);
-bx_printf("IP: %04x\n", (unsigned) BX_CPU_THIS_PTR prev_eip);
+      bio->printd("[CPU%u] seg = %s\n", BX_SIM_ID, BX_CPU_THIS_PTR strseg(seg));
+      bio->printd("[CPU%u] seg->selector.value = %04x\n", BX_SIM_ID, (unsigned) seg->selector.value);
+      bio->printd("[CPU%u] write_virtual_checks: valid bit = 0\n", BX_SIM_ID);
+bio->printd("[CPU%u] CS: %04x\n", BX_SIM_ID, (unsigned) BX_CPU_THIS_PTR sregs[1].selector.value);
+bio->printd("[CPU%u] IP: %04x\n", BX_SIM_ID, (unsigned) BX_CPU_THIS_PTR prev_eip);
 debug(BX_CPU_THIS_PTR eip);
       exception(BX_GP_EXCEPTION, 0, 0);
       return;
       }
 
     if (seg->cache.p == 0) { /* not present */
-bx_printf("write_virtual_checks(): segment not present\n");
+bio->printd("[CPU%u] write_virtual_checks(): segment not present\n", BX_SIM_ID);
       exception(int_number(seg), 0, 0);
       return;
       }
@@@@ -62,13 +62,13 @@@@ bx_printf("write_virtual_checks(): segme
       case 10: case 11: // execute/read
       case 12: case 13: // execute only, conforming
       case 14: case 15: // execute/read-only, conforming
-bx_printf("write_virtual_checks(): no write access to seg\n");
+bio->printd("[CPU%u] write_virtual_checks(): no write access to seg\n", BX_SIM_ID);
         exception(int_number(seg), 0, 0);
         return;
 
       case 2: case 3: /* read/write */
         if ( (offset+length-1) > seg->cache.u.segment.limit_scaled ) {
-bx_printf("write_virtual_checks(): write beyond limit, r/w\n");
+bio->printd("[CPU%u] write_virtual_checks(): write beyond limit, r/w\n", BX_SIM_ID);
           exception(int_number(seg), 0, 0);
           return;
           }
@@@@ -82,7 +82,7 @@@@ bx_printf("write_virtual_checks(): write
         if ( (offset <= seg->cache.u.segment.limit_scaled) ||
              (offset > upper_limit) ||
              ((upper_limit - offset) < (length - 1)) ) {
-bx_printf("write_virtual_checks(): write beyond limit, r/w ED\n");
+bio->printd("[CPU%] write_virtual_checks(): write beyond limit, r/w ED\n", BX_SIM_ID);
           exception(int_number(seg), 0, 0);
           return;
           }
@@@@ -94,7 +94,7 @@@@ bx_printf("write_virtual_checks(): write
 
   else { /* real mode */
     if ( (offset + length - 1)  >  seg->cache.u.segment.limit_scaled) {
-      //bx_printf("write_virtual_checks() SEG EXCEPTION:  %x:%x + %x\n",
+      //bio->printd("[CPU%u] write_virtual_checks() SEG EXCEPTION:  %x:%x + %x\n", BX_SIM_ID,
       //  (unsigned) seg->selector.value, (unsigned) offset, (unsigned) length);
       if (seg == & BX_CPU_THIS_PTR sregs[2]) exception(BX_SS_EXCEPTION, 0, 0);
       else exception(BX_GP_EXCEPTION, 0, 0);
@@@@ -111,19 +111,19 @@@@ BX_CPU_C::read_virtual_checks(bx_segment
 
   if ( protected_mode() ) {
     if ( seg->cache.valid==0 ) {
-      bx_printf("seg = %s\n", BX_CPU_THIS_PTR strseg(seg));
-      bx_printf("seg->selector.value = %04x\n", (unsigned) seg->selector.value);
-      //bx_printf("read_virtual_checks: valid bit = 0\n");
-      //bx_printf("CS: %04x\n", (unsigned)
+      bio->printd("[CPU%u] seg = %s\n", BX_CPU_THIS_PTR strseg(seg), BX_SIM_ID);
+      bio->printd("[CPU%u] seg->selector.value = %04x\n", BX_SIM_ID, (unsigned) seg->selector.value);
+      //bio->printd("[CPU%u] read_virtual_checks: valid bit = 0\n", BX_SIM_ID);
+      //bio->printd("[CPU%u] CS: %04x\n", BX_SIM_ID, (unsigned)
       //   BX_CPU_THIS_PTR sregs[1].selector.value);
-      //bx_printf("IP: %04x\n", (unsigned) BX_CPU_THIS_PTR prev_eip);
+      //bio->printd("[CPU%u] IP: %04x\n", BX_SIM_ID, (unsigned) BX_CPU_THIS_PTR prev_eip);
       //debug(BX_CPU_THIS_PTR eip);
       exception(BX_GP_EXCEPTION, 0, 0);
       return;
       }
 
     if (seg->cache.p == 0) { /* not present */
-bx_printf("read_virtual_checks(): segment not present\n");
+bio->printd("[CPU%u] read_virtual_checks(): segment not present\n", BX_SIM_ID);
       exception(int_number(seg), 0, 0);
       return;
       }
@@@@ -133,7 +133,7 @@@@ bx_printf("read_virtual_checks(): segmen
       case 10: case 11: /* execute/read */
       case 14: case 15: /* execute/read-only, conforming */
         if ( (offset+length-1) > seg->cache.u.segment.limit_scaled ) {
-bx_printf("read_virtual_checks(): write beyond limit\n");
+bio->printd("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
           exception(int_number(seg), 0, 0);
           return;
           }
@@@@ -141,7 +141,7 @@@@ bx_printf("read_virtual_checks(): write 
 
       case 2: case 3: /* read/write */
         if ( (offset+length-1) > seg->cache.u.segment.limit_scaled ) {
-bx_printf("read_virtual_checks(): write beyond limit\n");
+bio->printd("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
           exception(int_number(seg), 0, 0);
           return;
           }
@@@@ -155,7 +155,7 @@@@ bx_printf("read_virtual_checks(): write 
         if ( (offset <= seg->cache.u.segment.limit_scaled) ||
              (offset > upper_limit) ||
              ((upper_limit - offset) < (length - 1)) ) {
-bx_printf("read_virtual_checks(): write beyond limit\n");
+bio->printd("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
           exception(int_number(seg), 0, 0);
           return;
           }
@@@@ -169,7 +169,7 @@@@ bx_printf("read_virtual_checks(): write 
         if ( (offset <= seg->cache.u.segment.limit_scaled) ||
              (offset > upper_limit) ||
              ((upper_limit - offset) < (length - 1)) ) {
-bx_printf("read_virtual_checks(): write beyond limit\n");
+bio->printd("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
           exception(int_number(seg), 0, 0);
           return;
           }
@@@@ -178,7 +178,7 @@@@ bx_printf("read_virtual_checks(): write 
       case 8: case 9: /* execute only */
       case 12: case 13: /* execute only, conforming */
         /* can't read or write an execute-only segment */
-bx_printf("read_virtual_checks(): execute only\n");
+bio->printd("[CPU%u] read_virtual_checks(): execute only\n", BX_SIM_ID);
         exception(int_number(seg), 0, 0);
         return;
         break;
@@@@ -188,7 +188,7 @@@@ bx_printf("read_virtual_checks(): execut
 
   else { /* real mode */
     if ( (offset + length - 1)  >  seg->cache.u.segment.limit_scaled) {
-      //bx_printf("read_virtual_checks() SEG EXCEPTION:  %x:%x + %x\n",
+      //bio->printd("[CPU%u] read_virtual_checks() SEG EXCEPTION:  %x:%x + %x\n", BX_SIM_ID,
       //  (unsigned) seg->selector.value, (unsigned) offset, (unsigned) length);
       if (seg == & BX_CPU_THIS_PTR sregs[2]) exception(BX_SS_EXCEPTION, 0, 0);
       else exception(BX_GP_EXCEPTION, 0, 0);
@@@@ -210,7 +210,7 @@@@ BX_CPU_C::strseg(bx_segment_reg_t *seg)
   else if (seg == &BX_CPU_THIS_PTR sregs[4]) return("FS");
   else if (seg == &BX_CPU_THIS_PTR sregs[5]) return("GS");
   else {
-    bx_printf("undefined segment passed to strseg()!\n");
+    bio->printd("[CPU%u] undefined segment passed to strseg()!\n", BX_SIM_ID);
     return("??");
     }
 }
@


1.2
log
@more printd
@
text
@d1 1
a1 1
$OpenBSD: patch-cpu_access_cc,v 1.1 2001/02/02 16:59:06 todd Exp $
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
d3 1
a3 1
+++ cpu/access.cc	Tue Oct 31 12:48:34 2000
d13 5
a17 5
+      bio->printf("[CPU%u] seg = %s\n", BX_CPU_THIS_PTR strseg(seg), BX_SIM_ID);
+      bio->printf("[CPU%u] seg->selector.value = %04x\n", BX_SIM_ID, (unsigned) seg->selector.value);
+      bio->printf("[CPU%u] write_virtual_checks: valid bit = 0\n", BX_SIM_ID);
+bio->printf("[CPU%u] CS: %04x\n", BX_SIM_ID, (unsigned) BX_CPU_THIS_PTR sregs[1].selector.value);
+bio->printf("[CPU%u] IP: %04x\n", BX_SIM_ID, (unsigned) BX_CPU_THIS_PTR prev_eip);
d25 1
a25 1
+bio->printf("[CPU%u] write_virtual_checks(): segment not present\n", BX_SIM_ID);
d34 1
a34 1
+bio->printf("[CPU%u] write_virtual_checks(): no write access to seg\n", BX_SIM_ID);
d41 1
a41 1
+bio->printf("[CPU%u] write_virtual_checks(): write beyond limit, r/w\n", BX_SIM_ID);
d50 1
a50 1
+bio->printf("[CPU%] write_virtual_checks(): write beyond limit, r/w ED\n", BX_SIM_ID);
d59 1
a59 1
+      //bio->printf("[CPU%u] write_virtual_checks() SEG EXCEPTION:  %x:%x + %x\n", BX_SIM_ID,
d71 4
a74 4
+      bio->printf("[CPU%u] seg = %s\n", BX_CPU_THIS_PTR strseg(seg), BX_SIM_ID);
+      bio->printf("[CPU%u] seg->selector.value = %04x\n", BX_SIM_ID, (unsigned) seg->selector.value);
+      //bio->printf("[CPU%u] read_virtual_checks: valid bit = 0\n", BX_SIM_ID);
+      //bio->printf("[CPU%u] CS: %04x\n", BX_SIM_ID, (unsigned)
d77 1
a77 1
+      //bio->printf("[CPU%u] IP: %04x\n", BX_SIM_ID, (unsigned) BX_CPU_THIS_PTR prev_eip);
d85 1
a85 1
+bio->printf("[CPU%u] read_virtual_checks(): segment not present\n", BX_SIM_ID);
d94 1
a94 1
+bio->printf("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
d103 1
a103 1
+bio->printf("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
d112 1
a112 1
+bio->printf("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
d121 1
a121 1
+bio->printf("[CPU%u] read_virtual_checks(): write beyond limit\n", BX_SIM_ID);
d130 1
a130 1
+bio->printf("[CPU%u] read_virtual_checks(): execute only\n", BX_SIM_ID);
d139 1
a139 1
+      //bio->printf("[CPU%u] read_virtual_checks() SEG EXCEPTION:  %x:%x + %x\n", BX_SIM_ID,
d148 1
a148 1
+    bio->printf("[CPU%u] undefined segment passed to strseg()!\n", BX_SIM_ID);
@

