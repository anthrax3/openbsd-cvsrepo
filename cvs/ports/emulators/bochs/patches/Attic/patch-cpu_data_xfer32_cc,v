head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.14;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.08;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-cpu_data_xfer32_cc,v 1.1 2001/02/02 16:59:08 todd Exp $
--- cpu/data_xfer32.cc.orig	Sat Mar 25 21:39:07 2000
+++ cpu/data_xfer32.cc	Tue Oct 17 12:04:00 2000
@@@@ -85,7 +85,7 @@@@ BX_CPU_C::MOV_GdEd(BxInstruction_t *i)
 BX_CPU_C::LEA_GdM(BxInstruction_t *i)
 {
   if (i->mod == 0xc0) {
-    bx_panic("LEA_GvM: op2 is a register");
+    bio->panic("LEA_GvM: op2 is a register");
     UndefinedOpcode(i);
     return;
     }
@@@@ -160,7 +160,7 @@@@ BX_CPU_C::MOV_EdId(BxInstruction_t *i)
 BX_CPU_C::MOVZX_GdEb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVZX_GvEb: not supported on < 386\n");
+  bio->panic("MOVZX_GvEb: not supported on < 386\n");
 #else
   Bit8u  op2_8;
 
@@@@ -181,7 +181,7 @@@@ BX_CPU_C::MOVZX_GdEb(BxInstruction_t *i)
 BX_CPU_C::MOVZX_GdEw(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVZX_GvEw: not supported on < 386\n");
+  bio->panic("MOVZX_GvEw: not supported on < 386\n");
 #else
   Bit16u op2_16;
 
@@@@ -202,7 +202,7 @@@@ BX_CPU_C::MOVZX_GdEw(BxInstruction_t *i)
 BX_CPU_C::MOVSX_GdEb(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVSX_GvEb: not supported on < 386\n");
+  bio->panic("MOVSX_GvEb: not supported on < 386\n");
 #else
   Bit8u op2_8;
 
@@@@ -223,7 +223,7 @@@@ BX_CPU_C::MOVSX_GdEb(BxInstruction_t *i)
 BX_CPU_C::MOVSX_GdEw(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 3
-  bx_panic("MOVSX_GvEw: not supported on < 386\n");
+  bio->panic("MOVSX_GvEw: not supported on < 386\n");
 #else
   Bit16u op2_16;
 
@@@@ -296,7 +296,7 @@@@ BX_CPU_C::CMOV_GdEd(BxInstruction_t *i)
     case 0x14F: condition = !get_ZF() && (get_SF() == get_OF()); break;
     default:
       condition = 0;
-      bx_panic("CMOV_GdEd: default case\n");
+      bio->panic("CMOV_GdEd: default case\n");
     }
 
   if (i->mod == 0xc0) {
@@@@ -311,6 +311,6 @@@@ BX_CPU_C::CMOV_GdEd(BxInstruction_t *i)
     BX_WRITE_32BIT_REG(i->nnn, op2_32);
     }
 #else
-  bx_panic("cmov_gded called\n");
+  bio->panic("cmov_gded called\n");
 #endif
 }
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

