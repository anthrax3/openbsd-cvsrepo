head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.28;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.10;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-gui_win32_cc,v 1.1 2001/02/02 16:59:10 todd Exp $
--- gui/win32.cc.orig	Sat Mar 25 21:43:36 2000
+++ gui/win32.cc	Fri Oct 20 11:37:48 2000
@@@@ -157,7 +157,7 @@@@ static void processMouseXY( int x, int y
   if ( old_bx_state!=mouse_button_state)
   {
     /* Make up for missing message */
-    bx_printf( "&&&missing mouse state change\r\n");
+    bio->printf( "&&&missing mouse state change\r\n");
     EnterCriticalSection( &stInfo.keyCS);
     enq_mouse_event();
     mouse_button_state=old_bx_state;
@@@@ -204,6 +204,12 @@@@ static void cursorWarped()
 // GUI thread must be dead/done in order to call terminateEmul
 void terminateEmul(int reason) {
 
+// if not using debugger, then we can take control of SIGINT.
+// If using debugger, it needs control of this.
+#if BX_DEBUGGER==0
+  signal(SIGINT, bx_signal_handler);
+#endif
+
   // We know that Critical Sections were inited when x_tilesize has been set
   // See bx_gui_c::specific_init
   if (x_tilesize != 0) {
@@@@ -222,16 +228,16 @@@@ void terminateEmul(int reason) {
 
   switch (reason) {
   case EXIT_GUI_SHUTDOWN:
-    bx_panic("Window closed, exiting!\n");
+    bio->panic("Window closed, exiting!\n");
     break;
   case EXIT_GMH_FAILURE:
-    bx_panic("GetModuleHandle failure!\n");
+    bio->panic("GetModuleHandle failure!\n");
     break;
   case EXIT_FONT_BITMAP_ERROR:
-    bx_panic("Font bitmap creation failure!\n");
+    bio->panic("Font bitmap creation failure!\n");
     break;
   case EXIT_HEADER_BITMAP_ERROR:
-    bx_panic("Header bitmap creation failure!\n");
+    bio->panic("Header bitmap creation failure!\n");
     break;
   case EXIT_NORMAL:
     break;
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

