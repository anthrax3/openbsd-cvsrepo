head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.30;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.11;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-iodev_eth_obsd_cc,v 1.1 2001/02/02 16:59:11 todd Exp $
--- iodev/eth_obsd.cc.orig	Wed Oct 18 20:20:38 2000
+++ iodev/eth_obsd.cc	Wed Oct 18 20:27:29 2000
@@@@ -0,0 +1,96 @@@@
+//  Copyright (C) 2000  MandrakeSoft S.A.
+//
+//    MandrakeSoft S.A.
+//    43, rue d'Aboukir
+//    75002 Paris - France
+//    http://www.linux-mandrake.com/
+//    http://www.mandrakesoft.com/
+//
+//  This library is free software; you can redistribute it and/or
+//  modify it under the terms of the GNU Lesser General Public
+//  License as published by the Free Software Foundation; either
+//  version 2 of the License, or (at your option) any later version.
+//
+//  This library is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+//  Lesser General Public License for more details.
+//
+//  You should have received a copy of the GNU Lesser General Public
+//  License along with this library; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+
+#include "bochs.h"
+
+extern "C" {
+#include <sys/param.h>
+#include <netinet/in.h>
+#include <net/if_types.h>
+#include <net/if_tun.h>
+#include <netinet/in_systm.h>
+#include <netinet/ip.h>
+#include <sys/un.h>
+#include <sys/ioctl.h>
+#include <termios.h>
+
+};
+
+//
+//  Define the class. This is private to this module
+//
+class bx_obsd_pktmover_c : public eth_pktmover_c {
+public:
+  bx_obsd_pktmover_c(const char *netif, const char *macaddr,
+		     eth_rx_handler_t rxh,
+		     void *rxarg);
+  void sendpkt(void *buf, unsigned io_len);
+};
+
+
+//
+//  Define the static class that registers the derived pktmover class,
+// and allocates one on request.
+//
+class bx_obsd_locator_c : public eth_locator_c {
+public:
+  bx_obsd_locator_c(void) : eth_locator_c("obsd") {}
+protected:
+  eth_pktmover_c *allocate(const char *netif, const char *macaddr,
+			   eth_rx_handler_t rxh,
+			   void *rxarg) {
+	struct tuninfo info;
+	memset(&info, '\0', sizeof info);
+	info.type = IFT_PPP;
+	info.mtu = mtu;
+
+	info.baudrate = bundle->bandwidth;
+	info.flags = IFF_UP|IFF_POINTOPOINT;
+	if (ioctl(bundle->dev.fd, TUNSIFINFO, &info) < 0)
+		bio->printf("ioctl(TUNSIFINFO): %s\n",
+			strerror(errno));
+
+    return (new bx_obsd_pktmover_c(netif, macaddr, rxh, rxarg));
+  }
+} bx_obsd_match;
+
+
+//
+// Define the methods for the bx_obsd_pktmover derived class
+//
+
+// the constructor
+bx_obsd_pktmover_c::bx_obsd_pktmover_c(const char *netif, 
+				       const char *macaddr,
+				       eth_rx_handler_t rxh,
+				       void *rxarg)
+{
+  // Nothing here.
+}
+
+// the output routine - called with pre-formatted ethernet frame.
+void
+bx_obsd_pktmover_c::sendpkt(void *buf, unsigned io_len)
+{
+  // silent discard.
+}
+
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

