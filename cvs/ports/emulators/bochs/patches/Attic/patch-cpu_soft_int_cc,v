head	1.2;
access;
symbols
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.06.02.21;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2001.02.02.16.59.09;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gone are the days when bochs feedback heads to /dev/null
did I mention I commit this inside of bochs?  Thanks, angelos, for networking!
@
text
@$OpenBSD: patch-cpu_soft_int_cc,v 1.1 2001/02/02 16:59:09 todd Exp $
--- cpu/soft_int.cc.orig	Sat Mar 25 21:39:09 2000
+++ cpu/soft_int.cc	Tue Oct 31 12:28:56 2000
@@@@ -37,12 +37,12 @@@@
 BX_CPU_C::BOUND_GvMa(BxInstruction_t *i)
 {
 #if BX_CPU_LEVEL < 2
-  bx_panic("BOUND_GvMa: not supported on 8086!\n");
+  bio->panic("BOUND_GvMa: not supported on 8086!\n");
 #else
 
   if (i->mod == 0xc0) {
     /* undefined opcode exception */
-    bx_panic("bound: op2 must be mem ref\n");
+    bio->panic("bound: op2 must be mem ref\n");
     UndefinedOpcode(i);
     }
 
@@@@ -57,7 +57,7 @@@@ BX_CPU_C::BOUND_GvMa(BxInstruction_t *i)
 
     /* ??? */
     if ( (op1_32 < bound_min) || (op1_32 > bound_max) ) {
-      bx_printf("BOUND: fails bounds test\n");
+      bio->printf("BOUND: fails bounds test\n");
       exception(5, 0, 0);
       }
     }
@@@@ -72,7 +72,7 @@@@ BX_CPU_C::BOUND_GvMa(BxInstruction_t *i)
 
     /* ??? */
     if ( (op1_16 < bound_min) || (op1_16 > bound_max) ) {
-      bx_printf("BOUND: fails bounds test\n");
+      bio->printf("BOUND: fails bounds test\n");
       exception(5, 0, 0);
       }
     }
@@@@ -105,7 +105,7 @@@@ BX_CPU_C::INT3(BxInstruction_t *i)
   BX_CPU_THIS_PTR show_flag |= Flag_int;
 #endif
 
-//bx_panic("INT3: bailing\n");
+//bio->panic("INT3: bailing\n");
   interrupt(3, 1, 0, 0);
   BX_INSTR_FAR_BRANCH(BX_INSTR_IS_INT,
                       BX_CPU_THIS_PTR sregs[BX_SEG_REG_CS].selector.value,
@@@@ -125,15 +125,15 @@@@ BX_CPU_C::INT_Ib(BxInstruction_t *i)
   imm8 = i->Ib;
 
   if (v8086_mode() && (IOPL<3)) {
-    //bx_printf("int_ib: v8086: IOPL<3\n");
+    //bio->printf("int_ib: v8086: IOPL<3\n");
     exception(BX_GP_EXCEPTION, 0, 0);
     }
 
 #ifdef SHOW_EXIT_STATUS
 if ( (imm8 == 0x21) && (AH == 0x4c) ) {
-  fprintf(stderr, "#(%u) INT 21/4C called AL=0x%02x, BX=0x%04x\n", BX_SIM_ID,
+  bio->printf("#(%u) INT 21/4C called AL=0x%02x, BX=0x%04x\n", BX_SIM_ID,
           (unsigned) AL, (unsigned) BX);
-  bx_printf("INT 21/4C called AL=0x%02x, BX=0x%04x\n", (unsigned) AL, (unsigned) BX);
+  bio->printf("INT 21/4C called AL=0x%02x, BX=0x%04x\n", (unsigned) AL, (unsigned) BX);
   }
 #endif
 
@@@@ -153,7 +153,7 @@@@ BX_CPU_C::INTO(BxInstruction_t *i)
 #endif
 
   /* ??? is this IOPL sensitive ? */
-  if (v8086_mode()) bx_panic("soft_int: v8086 mode unsupported\n");
+  if (v8086_mode()) bio->panic("soft_int: v8086 mode unsupported\n");
 
   if (get_OF()) {
     interrupt(4, 1, 0, 0);
@


1.1
log
@o take over maintainership
o too many changes to mention specifically, but amongst them:
	- better error reporting
	- openbsd boots, freebsd boots
	- new 'term' flavor, I added a textmode interface, the only drawback
	  is that control-c is intercepted, and you must kill -9 it from
	  another tty if it doesn't exit normally
	- new flavors:
		- debugger -> debug (for shortness)
		- i386
		- pci
		- smp
		- net (compiles, does not yet provide networking, if anyone
			wants to help, I'd be ELATED to have this fixed!)
		- no_x11 (made it actually work)
		- term (make sure to use 'log: /dev/null' or something else
		  on the cmdline, otherwise, debugging and the screen will
		  start getting quite confusing!)
	- better error reporting (and no error reporting where it is not
	  necessary; a typicall boot of cdrom28.fs is a screenful of output now)
	- in general, if the hardware reaches an unknown state, fail
	  gracefully instead of calling exit(1) .. are we trying to work or
	  are we trying to .. fail?  I like working myself.
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@

