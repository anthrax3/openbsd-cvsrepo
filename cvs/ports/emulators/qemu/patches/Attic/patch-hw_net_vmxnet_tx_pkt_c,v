head	1.2;
access;
symbols
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2016.03.14.19.46.12;	author ajacoutot;	state dead;
branches;
next	1.1;
commitid	ZypCecrzOxeE8g1E;

1.1
date	2016.01.05.06.56.12;	author ajacoutot;	state Exp;
branches
	1.1.2.1;
next	;
commitid	z2cMvU8TlZZSH8m0;

1.1.2.1
date	2016.01.07.10.27.40;	author jasper;	state Exp;
branches;
next	;
commitid	Ciob9S8eFBoLGbjT;


desc
@@


1.2
log
@Major update to qemu-2.5.0.
Please direct any runtime fallout to Brad.

from Brad (maintainer)
@
text
@$OpenBSD: patch-hw_net_vmxnet_tx_pkt_c,v 1.1 2016/01/05 06:56:12 ajacoutot Exp $

net/vmxnet3: Refine l2 header validation

Validation of l2 header length assumed minimal packet size as
eth_header + 2 * vlan_header regardless of the actual protocol.

This caused crash for valid non-IP packets shorter than 22 bytes, as
'tx_pkt->packet_type' hasn't been assigned for such packets, and
'vmxnet3_on_tx_done_update_stats()' expects it to be properly set.

Refine header length validation in 'vmxnet_tx_pkt_parse_headers'.
Check its return value during packet processing flow.

As a side effect, in case IPv4 and IPv6 header validation failure,
corrupt packets will be dropped.

CVE-2015-8744

--- hw/net/vmxnet_tx_pkt.c.orig	Mon Jan  4 20:07:06 2016
+++ hw/net/vmxnet_tx_pkt.c	Mon Jan  4 20:09:59 2016
@@@@ -142,11 +142,24 @@@@ static bool vmxnet_tx_pkt_parse_headers(struct VmxnetT
 
     bytes_read = iov_to_buf(pkt->raw, pkt->raw_frags, 0, l2_hdr->iov_base,
                             ETH_MAX_L2_HDR_LEN);
-    if (bytes_read < ETH_MAX_L2_HDR_LEN) {
+    if (bytes_read < sizeof(struct eth_header)) {
         l2_hdr->iov_len = 0;
         return false;
-    } else {
-        l2_hdr->iov_len = eth_get_l2_hdr_length(l2_hdr->iov_base);
+    }
+
+    l2_hdr->iov_len = sizeof(struct eth_header);
+    switch (be16_to_cpu(PKT_GET_ETH_HDR(l2_hdr->iov_base)->h_proto)) {
+    case ETH_P_VLAN:
+        l2_hdr->iov_len += sizeof(struct vlan_header);
+        break;
+    case ETH_P_DVLAN:
+        l2_hdr->iov_len += 2 * sizeof(struct vlan_header);
+        break;
+    }
+
+    if (bytes_read < l2_hdr->iov_len) {
+        l2_hdr->iov_len = 0;
+        return false;
     }
 
     l3_proto = eth_get_l3_proto(l2_hdr->iov_base, l2_hdr->iov_len);
@


1.1
log
@SECURITY fixes for:
CVE-2015-8619, CVE-2015-8666, CVE-2015-8743, CVE-2015-8744, and CVE-2015-8745

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@SECURITY fixes for:
CVE-2015-8619, CVE-2015-8666, CVE-2015-8743, CVE-2015-8744, and CVE-2015-8745
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_net_vmxnet_tx_pkt_c,v 1.1 2016/01/05 06:56:12 ajacoutot Exp $
@

