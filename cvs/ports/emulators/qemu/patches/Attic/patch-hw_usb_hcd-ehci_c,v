head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2016.03.14.19.46.12;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	ZypCecrzOxeE8g1E;

1.2
date	2016.02.14.11.27.32;	author sthen;	state Exp;
branches;
next	1.1;
commitid	nAjcpd4pmbLbcSLM;

1.1
date	2015.12.16.06.41.06;	author ajacoutot;	state Exp;
branches
	1.1.2.1;
next	;
commitid	Mr3TINbPs4mSz43P;

1.1.2.1
date	2015.12.24.09.44.14;	author jasper;	state Exp;
branches;
next	1.1.2.2;
commitid	FaciMaYoEtARAEEx;

1.1.2.2
date	2016.02.15.11.06.13;	author jasper;	state Exp;
branches;
next	;
commitid	fruAVf67zMiz1SDO;


desc
@@


1.3
log
@Major update to qemu-2.5.0.
Please direct any runtime fallout to Brad.

from Brad (maintainer)
@
text
@$OpenBSD: patch-hw_usb_hcd-ehci_c,v 1.2 2016/02/14 11:27:32 sthen Exp $

ehci: make idt processing more robust

Make ehci_process_itd return an error in case we didn't do any actual
iso transfer because we've found no active transaction.  That'll avoid
ehci happily run in circles forever if the guest builds a loop out of
idts.

This is CVE-2015-8558.

usb: ehci: add capability mmio write function

USB Ehci emulation supports host controller capability registers.
But its mmio '.write' function was missing, which lead to a null
pointer dereference issue. Add a do nothing 'ehci_caps_write'
definition to avoid it; Do nothing because capability registers
are Read Only(RO).

CVE-2016-2198

--- hw/usb/hcd-ehci.c.orig	Tue Mar 10 13:38:27 2015
+++ hw/usb/hcd-ehci.c	Sat Jan 30 01:31:43 2016
@@@@ -899,6 +899,11 @@@@ static uint64_t ehci_caps_read(void *ptr, hwaddr addr,
     return s->caps[addr];
 }
 
+static void ehci_caps_write(void *ptr, hwaddr addr,
+                            uint64_t val, unsigned size)
+{
+}
+
 static uint64_t ehci_opreg_read(void *ptr, hwaddr addr,
                                 unsigned size)
 {
@@@@ -1395,7 +1400,7 @@@@ static int ehci_process_itd(EHCIState *ehci,
 {
     USBDevice *dev;
     USBEndpoint *ep;
-    uint32_t i, len, pid, dir, devaddr, endp;
+    uint32_t i, len, pid, dir, devaddr, endp, xfers = 0;
     uint32_t pg, off, ptr1, ptr2, max, mult;
 
     ehci->periodic_sched_active = PERIODIC_ACTIVE;
@@@@ -1485,9 +1490,10 @@@@ static int ehci_process_itd(EHCIState *ehci,
                 ehci_raise_irq(ehci, USBSTS_INT);
             }
             itd->transact[i] &= ~ITD_XACT_ACTIVE;
+            xfers++;
         }
     }
-    return 0;
+    return xfers ? 0 : -1;
 }
 
 
@@@@ -2316,6 +2322,7 @@@@ static void ehci_frame_timer(void *opaque)
 
 static const MemoryRegionOps ehci_mmio_caps_ops = {
     .read = ehci_caps_read,
+    .write = ehci_caps_write,
     .valid.min_access_size = 1,
     .valid.max_access_size = 4,
     .impl.min_access_size = 1,
@


1.2
log
@Add a patch from QEMU upstream to fix CVE-2016-2198. From Brad, ok aja@@

"USB Ehci emulation supports host controller capability registers.
But its mmio '.write' function was missing, which lead to a null
pointer dereference issue. Add a do nothing 'ehci_caps_write'
definition to avoid it; Do nothing because capability registers
are Read Only(RO)."
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_usb_hcd-ehci_c,v 1.1 2015/12/16 06:41:06 ajacoutot Exp $
@


1.1
log
@SECURITY fixes for:
CVE-2015-7549, CVE-2015-8504, CVE-2015-8558, CVE-2015-8567 and CVE-2015-8568

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d12 25
a36 3
--- hw/usb/hcd-ehci.c.orig	Tue Dec 15 20:12:17 2015
+++ hw/usb/hcd-ehci.c	Tue Dec 15 20:13:31 2015
@@@@ -1395,7 +1395,7 @@@@ static int ehci_process_itd(EHCIState *ehci,
d45 1
a45 1
@@@@ -1485,9 +1485,10 @@@@ static int ehci_process_itd(EHCIState *ehci,
d57 8
@


1.1.2.1
log
@Security fixes for CVE-2015-7549, CVE-2015-8504, CVE-2015-8558, CVE-2015-8567,
CVE-2015-8568, CVE-2015-8613
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_usb_hcd-ehci_c,v 1.1 2015/12/16 06:41:06 ajacoutot Exp $
@


1.1.2.2
log
@Security fix for CVE-2016-2198
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_usb_hcd-ehci_c,v 1.2 2016/02/14 11:27:32 sthen Exp $
d12 3
a14 25
usb: ehci: add capability mmio write function

USB Ehci emulation supports host controller capability registers.
But its mmio '.write' function was missing, which lead to a null
pointer dereference issue. Add a do nothing 'ehci_caps_write'
definition to avoid it; Do nothing because capability registers
are Read Only(RO).

CVE-2016-2198

--- hw/usb/hcd-ehci.c.orig	Tue Mar 10 13:38:27 2015
+++ hw/usb/hcd-ehci.c	Sat Jan 30 01:31:43 2016
@@@@ -899,6 +899,11 @@@@ static uint64_t ehci_caps_read(void *ptr, hwaddr addr,
     return s->caps[addr];
 }
 
+static void ehci_caps_write(void *ptr, hwaddr addr,
+                            uint64_t val, unsigned size)
+{
+}
+
 static uint64_t ehci_opreg_read(void *ptr, hwaddr addr,
                                 unsigned size)
 {
@@@@ -1395,7 +1400,7 @@@@ static int ehci_process_itd(EHCIState *ehci,
d23 1
a23 1
@@@@ -1485,9 +1490,10 @@@@ static int ehci_process_itd(EHCIState *ehci,
a34 8
@@@@ -2316,6 +2322,7 @@@@ static void ehci_frame_timer(void *opaque)
 
 static const MemoryRegionOps ehci_mmio_caps_ops = {
     .read = ehci_caps_read,
+    .write = ehci_caps_write,
     .valid.min_access_size = 1,
     .valid.max_access_size = 4,
     .impl.min_access_size = 1,
@


