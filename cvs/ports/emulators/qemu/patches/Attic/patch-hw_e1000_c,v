head	1.8;
access;
symbols
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2;
locks; strict;
comment	@# @;


1.8
date	2013.02.02.11.30.34;	author brad;	state dead;
branches;
next	1.7;

1.7
date	2012.12.30.08.49.15;	author brad;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2012.12.20.23.12.20;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.16.11.40.53;	author fgsch;	state dead;
branches;
next	1.4;

1.4
date	2012.02.02.22.07.33;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.12.10.56.56;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2011.10.19.08.12.06;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.28.11.21.05;	author sthen;	state Exp;
branches;
next	;

1.7.2.1
date	2013.01.02.00.58.49;	author brad;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to QEMU 1.3.1.

ok sthen@@
@
text
@$OpenBSD: patch-hw_e1000_c,v 1.7 2012/12/30 08:49:15 brad Exp $

Discard oversized packets based on SBP|LPE. CVE-2012-6075

--- hw/e1000.c.orig	Wed Dec 19 23:14:16 2012
+++ hw/e1000.c	Wed Dec 19 23:15:08 2012
@@@@ -61,6 +61,8 @@@@ static int debugflags = DBGBIT(TXERR) | DBGBIT(GENERAL
 
 /* this is the size past which hardware will drop packets when setting LPE=0 */
 #define MAXIMUM_ETHERNET_VLAN_SIZE 1522
+/* this is the size past which hardware will drop packets when setting LPE=1 */
+#define MAXIMUM_ETHERNET_LPE_SIZE 16384
 
 /*
  * HW models:
@@@@ -799,8 +801,9 @@@@ e1000_receive(NetClientState *nc, const uint8_t *buf, 
     }
 
     /* Discard oversized packets if !LPE and !SBP. */
-    if (size > MAXIMUM_ETHERNET_VLAN_SIZE
-        && !(s->mac_reg[RCTL] & E1000_RCTL_LPE)
+    if ((size > MAXIMUM_ETHERNET_LPE_SIZE ||
+        (size > MAXIMUM_ETHERNET_VLAN_SIZE
+        && !(s->mac_reg[RCTL] & E1000_RCTL_LPE)))
         && !(s->mac_reg[RCTL] & E1000_RCTL_SBP)) {
         return size;
     }
@


1.7
log
@Add the CVE id.
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_e1000_c,v 1.6 2012/12/20 23:12:20 brad Exp $
@


1.7.2.1
log
@MFC:
e1000: Discard oversized packets based on SBP|LPE. CVE-2012-6075

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 5
--- hw/e1000.c.orig	Wed Dec 19 22:55:32 2012
+++ hw/e1000.c	Wed Dec 19 23:05:38 2012
@@@@ -59,6 +59,11 @@@@ static int debugflags = DBGBIT(TXERR) | DBGBIT(GENERAL
 #define PNPMMIO_SIZE      0x20000
 #define MIN_BUF_SIZE      60 /* Min. octets in an ethernet frame sans FCS */
d9 2
a10 2
+/* this is the size past which hardware will drop packets when setting LPE=0 */
+#define MAXIMUM_ETHERNET_VLAN_SIZE 1522
d13 1
a13 1
+
d16 6
a21 8
  *  E1000_DEV_ID_82540EM works with Windows and Linux
@@@@ -793,6 +798,14 @@@@ e1000_receive(VLANClientState *nc, const uint8_t *buf,
         memset(&min_buf[size], 0, sizeof(min_buf) - size);
         buf = min_buf;
         size = sizeof(min_buf);
+    }
+
+    /* Discard oversized packets if !LPE and !SBP. */
d25 2
a26 2
+        && !(s->mac_reg[RCTL] & E1000_RCTL_SBP)) {
+        return size;
a27 2
 
     if (!receive_filter(s, buf, size))
@


1.6
log
@e1000: Also discard oversized packets if LPE is enabled.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
Discard oversized packets based on SBP|LPE.
@


1.5
log
@Update to qemu 1.0.1, from Brad.
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_e1000_c,v 1.4 2012/02/02 22:07:33 sthen Exp $
d3 1
a3 2
Bounds packet size against buffer size, otherwise we can write beyond
the buffer and corrupt memory.   CVE-2012-0029.
d5 22
a26 20
http://git.qemu.org/?p=qemu.git;a=commitdiff;h=65f82df0d7a71ce1b10cd4c5ab08888d176ac840

--- hw/e1000.c.orig	Thu Feb  2 20:07:37 2012
+++ hw/e1000.c	Thu Feb  2 20:11:43 2012
@@@@ -466,6 +466,8 @@@@ process_tx_desc(E1000State *s, struct e1000_tx_desc *d
             bytes = split_size;
             if (tp->size + bytes > msh)
                 bytes = msh - tp->size;
+
+            bytes = MIN(sizeof(tp->data) - tp->size, bytes);
             pci_dma_read(&s->dev, addr, tp->data + tp->size, bytes);
             if ((sz = tp->size + bytes) >= hdr && tp->size < hdr)
                 memmove(tp->header, tp->data, hdr);
@@@@ -481,6 +483,7 @@@@ process_tx_desc(E1000State *s, struct e1000_tx_desc *d
         // context descriptor TSE is not set, while data descriptor TSE is set
         DBGOUT(TXERR, "TCP segmentaion Error\n");
     } else {
+        split_size = MIN(sizeof(tp->data) - tp->size, split_size);
         pci_dma_read(&s->dev, addr, tp->data + tp->size, split_size);
         tp->size += split_size;
@


1.4
log
@Add a fix for CVE-2012-0029 from QEMU upstream, ok Brad, ajacoutot

"Heap-based buffer overflow in the process_tx_desc function in the
e1000 emulation (hw/e1000.c) [...] allows guest OS users to cause
a denial of service (QEMU crash) and possibly execute arbitrary
code via crafted legacy mode packets."
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update to QEMU 1.0, from Brad.

- disable the BSD userland emulation support for now, it's not widely useful yet
- workaround for incorrect time_t type assumption, from stsp@@

N.B. As of QEMU 1.0 the i386 target has been renamed from qemu to
qemu-system-i386, you will need to change scripts/command lines as necessary.

ok stsp@@ dcoppa@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_e1000_c,v 1.2 2011/10/19 08:12:06 sthen Exp $
d3 2
a4 2
- Use MII status register for link up/down.
- The Capabilities Pointer is NULL, so this bit shouldn't be set.
d6 21
a26 27
--- hw/e1000.c.orig	Wed Oct 12 12:41:43 2011
+++ hw/e1000.c	Sat Oct 15 05:19:04 2011
@@@@ -624,10 +624,13 @@@@ e1000_set_link_status(VLANClientState *nc)
     E1000State *s = DO_UPCAST(NICState, nc, nc)->opaque;
     uint32_t old_status = s->mac_reg[STATUS];
 
-    if (nc->link_down)
+    if (nc->link_down) {
         s->mac_reg[STATUS] &= ~E1000_STATUS_LU;
-    else
+        s->phy_reg[PHY_STATUS] &= ~MII_SR_LINK_STATUS;
+    } else {
         s->mac_reg[STATUS] |= E1000_STATUS_LU;
+        s->phy_reg[PHY_STATUS] |= MII_SR_LINK_STATUS;
+    }
 
     if (s->mac_reg[STATUS] != old_status)
         set_ics(s, 0, E1000_ICR_LSC);
@@@@ -1164,8 +1167,6 @@@@ static int pci_e1000_init(PCIDevice *pci_dev)
 
     pci_conf = d->dev.config;
 
-    /* TODO: we have no capabilities, so why is this bit set? */
-    pci_set_word(pci_conf + PCI_STATUS, PCI_STATUS_CAP_LIST);
     /* TODO: RST# value should be 0, PCI spec 6.2.4 */
     pci_conf[PCI_CACHE_LINE_SIZE] = 0x10;
 
@


1.2
log
@e1000 driver fix; don't set the capabilities list bit in the status register
as the capabiliities pointer is not defined. From Brad (maintainer).
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_e1000_c,v 1.1 2011/08/28 11:21:05 sthen Exp $
@


1.1
log
@qemu e1000 driver: use MII status reg for link up/down. From upstream via Brad.
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 1
use MII status register for link up/down
d6 2
a7 2
--- hw/e1000.c.orig	Fri Aug 26 02:20:32 2011
+++ hw/e1000.c	Fri Aug 26 02:23:52 2011
d24 9
@

