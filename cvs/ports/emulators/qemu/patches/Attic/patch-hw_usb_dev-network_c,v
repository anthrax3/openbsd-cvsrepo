head	1.3;
access;
symbols
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2016.03.14.19.46.12;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	ZypCecrzOxeE8g1E;

1.2
date	2016.03.01.10.18.25;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	D5jqwTdSa5ppzwr8;

1.1
date	2016.02.20.22.46.46;	author ajacoutot;	state Exp;
branches
	1.1.2.1;
next	;
commitid	qHYC60n3VEZAJH5H;

1.1.2.1
date	2016.02.22.09.12.35;	author jasper;	state Exp;
branches;
next	1.1.2.2;
commitid	oI3BPACP1hxhbjIW;

1.1.2.2
date	2016.03.09.13.45.46;	author jasper;	state Exp;
branches;
next	;
commitid	8JZMGHgp6qLrLmc8;


desc
@@


1.3
log
@Major update to qemu-2.5.0.
Please direct any runtime fallout to Brad.

from Brad (maintainer)
@
text
@$OpenBSD: patch-hw_usb_dev-network_c,v 1.2 2016/03/01 10:18:25 ajacoutot Exp $

usb: check USB configuration descriptor object

When processing remote NDIS control message packets, the USB Net
device emulator checks to see if the USB configuration descriptor
object is of RNDIS type(2). But it does not check if it is null,
which leads to a null dereference error. Add check to avoid it.

CVE-2016-2393

usb: check RNDIS buffer offsets & length

When processing remote NDIS control message packets,
the USB Net device emulator uses a fixed length(4096) data buffer.
The incoming informationBufferOffset & Length combination could
overflow and cross that range. Check control message buffer
offsets and length to avoid it.

CVE-2016-2538

--- hw/usb/dev-network.c.orig	Tue Mar 10 13:38:27 2015
+++ hw/usb/dev-network.c	Mon Feb 29 18:49:32 2016
@@@@ -650,7 +650,8 @@@@ typedef struct USBNetState {
 
 static int is_rndis(USBNetState *s)
 {
-    return s->dev.config->bConfigurationValue == DEV_RNDIS_CONFIG_VALUE;
+    return s->dev.config ?
+            s->dev.config->bConfigurationValue == DEV_RNDIS_CONFIG_VALUE : 0;
 }
 
 static int ndis_query(USBNetState *s, uint32_t oid,
@@@@ -911,8 +912,9 @@@@ static int rndis_query_response(USBNetState *s,
 
     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;
     buflen = le32_to_cpu(buf->InformationBufferLength);
-    if (bufoffs + buflen > length)
+    if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {
         return USB_RET_STALL;
+    }
 
     infobuflen = ndis_query(s, le32_to_cpu(buf->OID),
                             bufoffs + (uint8_t *) buf, buflen, infobuf,
@@@@ -957,8 +959,9 @@@@ static int rndis_set_response(USBNetState *s,
 
     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;
     buflen = le32_to_cpu(buf->InformationBufferLength);
-    if (bufoffs + buflen > length)
+    if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {
         return USB_RET_STALL;
+    }
 
     ret = ndis_set(s, le32_to_cpu(buf->OID),
                     bufoffs + (uint8_t *) buf, buflen);
@@@@ -1208,8 +1211,9 @@@@ static void usb_net_handle_dataout(USBNetState *s, USB
     if (le32_to_cpu(msg->MessageType) == RNDIS_PACKET_MSG) {
         uint32_t offs = 8 + le32_to_cpu(msg->DataOffset);
         uint32_t size = le32_to_cpu(msg->DataLength);
-        if (offs + size <= len)
+        if (offs < len && size < len && offs + size <= len) {
             qemu_send_packet(qemu_get_queue(s->nic), s->out_buf + offs, size);
+        }
     }
     s->out_ptr -= len;
     memmove(s->out_buf, &s->out_buf[len], s->out_ptr);
@


1.2
log
@Fix for CVE-2016-2538.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_usb_dev-network_c,v 1.1 2016/02/20 22:46:46 ajacoutot Exp $
@


1.1
log
@Security fix for CVE-2016-2391 and CVE-2016-2393.

from Brad (maintainer)
ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d12 12
a23 2
--- hw/usb/dev-network.c.orig	Thu Feb 18 19:21:12 2016
+++ hw/usb/dev-network.c	Thu Feb 18 19:21:37 2016
d34 33
@


1.1.2.1
log
@Security fixes for CVE-2016-2391 and CVE-2016-2393.
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_usb_dev-network_c,v 1.1 2016/02/20 22:46:46 ajacoutot Exp $
@


1.1.2.2
log
@security fix for CVE-2016-2538
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_usb_dev-network_c,v 1.2 2016/03/01 10:18:25 ajacoutot Exp $
d12 2
a13 12
usb: check RNDIS buffer offsets & length

When processing remote NDIS control message packets,
the USB Net device emulator uses a fixed length(4096) data buffer.
The incoming informationBufferOffset & Length combination could
overflow and cross that range. Check control message buffer
offsets and length to avoid it.

CVE-2016-2538

--- hw/usb/dev-network.c.orig	Tue Mar 10 13:38:27 2015
+++ hw/usb/dev-network.c	Mon Feb 29 18:49:32 2016
a23 33
@@@@ -911,8 +912,9 @@@@ static int rndis_query_response(USBNetState *s,
 
     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;
     buflen = le32_to_cpu(buf->InformationBufferLength);
-    if (bufoffs + buflen > length)
+    if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {
         return USB_RET_STALL;
+    }
 
     infobuflen = ndis_query(s, le32_to_cpu(buf->OID),
                             bufoffs + (uint8_t *) buf, buflen, infobuf,
@@@@ -957,8 +959,9 @@@@ static int rndis_set_response(USBNetState *s,
 
     bufoffs = le32_to_cpu(buf->InformationBufferOffset) + 8;
     buflen = le32_to_cpu(buf->InformationBufferLength);
-    if (bufoffs + buflen > length)
+    if (buflen > length || bufoffs >= length || bufoffs + buflen > length) {
         return USB_RET_STALL;
+    }
 
     ret = ndis_set(s, le32_to_cpu(buf->OID),
                     bufoffs + (uint8_t *) buf, buflen);
@@@@ -1208,8 +1211,9 @@@@ static void usb_net_handle_dataout(USBNetState *s, USB
     if (le32_to_cpu(msg->MessageType) == RNDIS_PACKET_MSG) {
         uint32_t offs = 8 + le32_to_cpu(msg->DataOffset);
         uint32_t size = le32_to_cpu(msg->DataLength);
-        if (offs + size <= len)
+        if (offs < len && size < len && offs + size <= len) {
             qemu_send_packet(qemu_get_queue(s->nic), s->out_buf + offs, size);
+        }
     }
     s->out_ptr -= len;
     memmove(s->out_buf, &s->out_buf[len], s->out_ptr);
@


