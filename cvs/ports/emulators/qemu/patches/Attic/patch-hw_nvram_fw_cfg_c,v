head	1.2;
access;
symbols
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2016.03.14.19.46.12;	author ajacoutot;	state dead;
branches;
next	1.1;
commitid	ZypCecrzOxeE8g1E;

1.1
date	2016.01.14.06.12.10;	author ajacoutot;	state Exp;
branches
	1.1.2.1;
next	;
commitid	Al0gdBpCDreQ5CKi;

1.1.2.1
date	2016.01.14.07.20.47;	author jasper;	state Exp;
branches;
next	;
commitid	ZWmRO3r4YkYZ8232;


desc
@@


1.2
log
@Major update to qemu-2.5.0.
Please direct any runtime fallout to Brad.

from Brad (maintainer)
@
text
@$OpenBSD: patch-hw_nvram_fw_cfg_c,v 1.1 2016/01/14 06:12:10 ajacoutot Exp $

fw_cfg: add check to validate current entry value

When processing firmware configurations, an OOB r/w access occurs
if 's->cur_entry' is set to be invalid(FW_CFG_INVALID=0xffff).
Add a check to validate 's->cur_entry' to avoid such access.

CVE-2016-1714

--- hw/nvram/fw_cfg.c.orig	Mon Jan 11 19:12:53 2016
+++ hw/nvram/fw_cfg.c	Mon Jan 11 19:15:13 2016
@@@@ -211,12 +211,15 @@@@ static void fw_cfg_reboot(FWCfgState *s)
 static void fw_cfg_write(FWCfgState *s, uint8_t value)
 {
     int arch = !!(s->cur_entry & FW_CFG_ARCH_LOCAL);
-    FWCfgEntry *e = &s->entries[arch][s->cur_entry & FW_CFG_ENTRY_MASK];
+    FWCfgEntry *e = (s->cur_entry == FW_CFG_INVALID) ? NULL :
+                     &s->entries[arch][s->cur_entry & FW_CFG_ENTRY_MASK];
 
     trace_fw_cfg_write(s, value);
 
-    if (s->cur_entry & FW_CFG_WRITE_CHANNEL && e->callback &&
-        s->cur_offset < e->len) {
+    if (s->cur_entry & FW_CFG_WRITE_CHANNEL
+        && e != NULL
+        && e->callback
+        && s->cur_offset < e->len) {
         e->data[s->cur_offset++] = value;
         if (s->cur_offset == e->len) {
             e->callback(e->callback_opaque, e->data);
@@@@ -245,7 +248,8 @@@@ static int fw_cfg_select(FWCfgState *s, uint16_t key)
 static uint8_t fw_cfg_read(FWCfgState *s)
 {
     int arch = !!(s->cur_entry & FW_CFG_ARCH_LOCAL);
-    FWCfgEntry *e = &s->entries[arch][s->cur_entry & FW_CFG_ENTRY_MASK];
+    FWCfgEntry *e = (s->cur_entry == FW_CFG_INVALID) ? NULL :
+                     &s->entries[arch][s->cur_entry & FW_CFG_ENTRY_MASK];
     uint8_t ret;
 
     if (s->cur_entry == FW_CFG_INVALID || !e->data || s->cur_offset >= e->len)
@


1.1
log
@SECURITY fix for CVE-2016-1714.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@security fix for CVE-2016-1714
@
text
@d1 1
a1 1
$OpenBSD: patch-hw_nvram_fw_cfg_c,v 1.1 2016/01/14 06:12:10 ajacoutot Exp $
@

