head	1.4;
access;
symbols
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	todd_20050307:1.1.1.1
	todd:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2007.05.01.12.55.14;	author todd;	state dead;
branches;
next	1.3;

1.3
date	2005.12.27.07.56.15;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.11.01.15.17;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.07.16.41.28;	author todd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.03.07.16.41.28;	author todd;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to 0.9.0, thanks to all who gave feedback
see http://qemu.org/changelog.html for details
new in OpenBSD, support for raw block devices
@
text
@$OpenBSD: patch-target-ppc_cpu_h,v 1.3 2005/12/27 07:56:15 todd Exp $
--- target-ppc/cpu.h.orig	Mon Dec 19 16:51:53 2005
+++ target-ppc/cpu.h	Tue Dec 20 08:06:20 2005
@@@@ -573,8 +573,7 @@@@ void cpu_ppc_close(CPUPPCState *s);
 /* you can call this signal handler from your SIGBUS and SIGSEGV
    signal handlers to inform the virtual CPU of exceptions. non zero
    is returned if the signal was handled by the virtual CPU.  */
-struct siginfo;
-int cpu_ppc_signal_handler(int host_signum, struct siginfo *info, 
+int cpu_ppc_signal_handler(int host_signum, qemu_siginfo *info, 
                            void *puc);
 
 void do_interrupt (CPUPPCState *env);
@


1.3
log
@update to 0.8.0, see qemu.org for full ChangeLog
for OpenBSD, amd64 simulation on i386 appars to work ok now
@
text
@d1 1
a1 1
$OpenBSD: patch-target-ppc_cpu_h,v 1.2 2005/08/11 01:15:17 todd Exp $
@


1.2
log
@update to 0.7.1 (http://qemu.org/changelog.html)
add pcnet nic support
@
text
@d1 4
a4 4
$OpenBSD: patch-target-ppc_cpu_h,v 1.1.1.1 2005/03/07 16:41:28 todd Exp $
--- target-ppc/cpu.h.orig	Sun Jul 24 13:52:08 2005
+++ target-ppc/cpu.h	Tue Aug  9 22:34:49 2005
@@@@ -589,8 +589,7 @@@@ void cpu_ppc_close(CPUPPCState *s);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- target-ppc/cpu.h.orig	Tue Feb 15 17:06:19 2005
+++ target-ppc/cpu.h	Sun Feb 27 15:47:13 2005
@@@@ -163,8 +163,7 @@@@ void cpu_ppc_close(CPUPPCState *s);
@


1.1.1.1
log
@Import qemu snapshot from 2005-02-27

QEMU is a generic and open source processor emulator 
which achieves a good emulation speed by using dynamic translation.

QEMU has two operating modes:

* Full system emulation. In this mode, QEMU emulates 
a full system (for example a PC), including a processor and 
various peripherials. It can be used to launch different
Operating Systems without rebooting the PC or to debug system code.

* User mode emulation (Linux host only). In this mode, 

.. many thanks for feedback from many people, and for Lars Hansson and 
   Michael Schmidt for posting early work on the port of qemu to ports@@

For now, only for macppc and i386, as these are currently the only archs
that have reported success building qemu.
QEMU can launch Linux processes compiled for one CPU on another CPU. 
@
text
@@
