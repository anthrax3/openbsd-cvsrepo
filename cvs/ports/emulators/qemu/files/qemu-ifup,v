head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.2
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2015.10.28.09.17.31;	author sthen;	state Exp;
branches;
next	1.9;
commitid	btLpwcAQY0PdZrMt;

1.9
date	2015.08.03.19.14.56;	author jung;	state Exp;
branches;
next	1.8;
commitid	TJf6NtYRtAfiUzo3;

1.8
date	2010.08.26.13.44.29;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2010.01.07.14.15.17;	author giovanni;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.20.20.45.47;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2008.01.09.10.17.54;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.01.12.55.13;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.08.14.33.38;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.10.21.10.05;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.16.16.27.44;	author todd;	state Exp;
branches;
next	;


desc
@@


1.10
log
@tap(4) and sudo cleanup for QEMU, from Brad.
@
text
@#! /bin/sh

_ETHER=`route -n get default 2>/dev/null |awk '/interface:/ {print $2}'`
_ETHER=${_ETHER:=trunk0}
_BRIDGE=bridge0

# Let the environment over-ride this
[ "$BRIDGE" ] || BRIDGE=${_BRIDGE}
[ "$ETHER" ] || ETHER=${_ETHER}

if test `id -u` -ne 0; then
	DOAS=doas
fi

echo -n " {$1 ($BRIDGE <-> $ETHER)"

# Set up our bridge
$DOAS ifconfig $1 group tap > /dev/null 2>&1
$DOAS ifconfig $BRIDGE create > /dev/null 2>&1 && {
  # Only add rules if the bridge creation succeeds; otherwise
  # duplicate rules get loaded each time qemu starts
  # The following two block carp packets from wasting cpu cycles inside the
  # qemu sessions, remove if testing carp inside qemu
  $DOAS ifconfig $BRIDGE rule block in on $ETHER dst 33:33:0:0:0:12
  $DOAS ifconfig $BRIDGE rule block in on $ETHER dst 01:00:5e:00:00:12
}
# Since we can specify ETHER and BRIDGE above, its possible that
# this tap interface or this physical interface was setup as part of
# a different bridge earlier, and that is never cleaned up, so we have
# to cleanup here first before we set it up; a physical interface cannot
# be member to more than one bridge, thankfully, or I never would have
# caught this
ifconfig bridge | sed -n '/^bridge[0-9]*/{s/:.*$//;p;}' | while read brif
do
	$DOAS ifconfig $brif del $ETHER > /dev/null 2>&1
	$DOAS ifconfig $brif del $1 > /dev/null 2>&1
done
$DOAS ifconfig $BRIDGE add $ETHER up
$DOAS ifconfig $BRIDGE add $1 up || true
echo "}"
@


1.9
log
@remove sudo as run dependency and switch to doas in readme and scripts

ok sthen deraadt
@
text
@d12 1
a12 1
	SUDO=doas
a16 3
# Set the tun device into layer2 mode
$SUDO ifconfig $1 link0 up

d18 2
a19 2
$SUDO ifconfig $1 group tun > /dev/null 2>&1
$SUDO ifconfig $BRIDGE create > /dev/null 2>&1 && {
d24 2
a25 2
  $SUDO ifconfig $BRIDGE rule block in on $ETHER dst 33:33:0:0:0:12
  $SUDO ifconfig $BRIDGE rule block in on $ETHER dst 01:00:5e:00:00:12
d28 1
a28 1
# this tun interface or this physical interface was setup as part of
d35 2
a36 2
	$SUDO ifconfig $brif del $ETHER > /dev/null 2>&1
	$SUDO ifconfig $brif del $1 > /dev/null 2>&1
d38 2
a39 2
$SUDO ifconfig $BRIDGE add $ETHER up
$SUDO ifconfig $BRIDGE add $1 up || true
@


1.8
log
@update qemu to 0.12.5; testing/feedback from Daniel Dickman, Dawe, lum@@,
commit requested by fgsch@@
@
text
@d12 1
a12 1
	SUDO=sudo
@


1.7
log
@
Change qemu scripts after brconfig(4) has gone in the attic,
fix homepage and master_site (upstream does not provide old versions
anymore).
ok todd@@ (Maintainer)
@
text
@d33 1
a33 1
# to cleanup here first before we set it up; a physcal interface cannot
@


1.6
log
@autoselect the most likely interface for qemu-ifup to bridge with by
looking at the default IPv4 route. still overridable in the environment
as before. ok todd@@
@
text
@d27 2
a28 2
  $SUDO brconfig $BRIDGE rule block in on $ETHER dst 33:33:0:0:0:12
  $SUDO brconfig $BRIDGE rule block in on $ETHER dst 01:00:5e:00:00:12
d38 2
a39 2
	$SUDO brconfig $brif del $ETHER > /dev/null 2>&1
	$SUDO brconfig $brif del $1 > /dev/null 2>&1
d41 2
a42 2
$SUDO brconfig $BRIDGE add $ETHER up
$SUDO brconfig $BRIDGE add $1 up || true
@


1.5
log
@o clean up output of qemu-ifup
o s/qcow/qcow2/ as that is now the recommended default
o bump pkgname
@
text
@d3 2
a4 1
_ETHER=trunk0
@


1.4
log
@update to 0.9.0, thanks to all who gave feedback
see http://qemu.org/changelog.html for details
new in OpenBSD, support for raw block devices
@
text
@a1 1
set -x 
d14 1
a14 1
echo "Initializing $1.."
d20 3
a22 3
$SUDO ifconfig $1 group tun
$SUDO ifconfig $BRIDGE create && {
  # Ony add rules if the bridge creation succeeds; otherwise
d32 1
a32 1
# to cleaup here first before we set it up; a physcal interface cannot
d37 2
a38 2
	$SUDO brconfig $brif del $ETHER
	$SUDO brconfig $brif del $1
d42 1
@


1.3
log
@update to 0.8.1, see http://qemu.org/changelog.html for details
@
text
@d2 1
d4 6
a9 2
ETHER=trunk0
BRIDGE=bridge0
d21 20
a40 1
$SUDO ifconfig $BRIDGE create
@


1.2
log
@fixes from various
o permit auto tun# allocation
o do not destroy trunk# to permit multiple qemu sessions to use the same trunk#
  in the sample qemu-ifup script
o fix building on zaurus
o detect case where no tun# is available, Nicholas Marriott
o bump pkgname
@
text
@d18 1
a18 1
$SUDO brconfig $BRIDGE add $1 up
@


1.1
log
@from Andrew Dalgleish openbsd at ajd dot net dot au
o sample qemu-ifup
o permit -net tap,ifname=/dev/tun1 to actually use tun1
from Reyk Floeter reyk at openbsd dot org
o re-enable pcnet

bump PKGNAME
@
text
@a15 1
$SUDO ifconfig $BRIDGE destroy 2>/dev/null || true
@

