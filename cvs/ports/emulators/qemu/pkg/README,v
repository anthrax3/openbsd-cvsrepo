head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.10
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@# @;


1.12
date	2015.10.28.09.17.31;	author sthen;	state Exp;
branches;
next	1.11;
commitid	btLpwcAQY0PdZrMt;

1.11
date	2015.08.03.19.14.56;	author jung;	state Exp;
branches;
next	1.10;
commitid	TJf6NtYRtAfiUzo3;

1.10
date	2013.01.03.08.30.54;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.08.14.30.40;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.16.11.40.53;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.26.19.19.15;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.12.10.56.56;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.02.13.41.38;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.09.15.54.56;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.19.16.22.31;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.11.22.11.32.01;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.12.14.43.13;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.12
log
@tap(4) and sudo cleanup for QEMU, from Brad.
@
text
@$OpenBSD: README,v 1.11 2015/08/03 19:14:56 jung Exp $

+-----------------------------------------------------------------------
| Running ${FULLPKGNAME} on OpenBSD
+-----------------------------------------------------------------------

==> Quick Start

1. Get a bootable CDROM image:

    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/i386/cd52.iso

   or to use a 64-bit client OS or SPARC, respectively:

    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/amd64/cd52.iso

    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/sparc/cd52.iso

2. Create a virtual disk image:

    $ qemu-img create -f qcow2 virtual.img 10G

3. Install the OS:

    $ qemu-system-i386 -m 32 -monitor stdio -no-fd-bootchk \
	-hda virtual.img -cdrom cd52.iso -boot d

   or:

    $ qemu-system-x86_64 -m 32 -monitor stdio -no-fd-bootchk \
	-hda virtual.img -cdrom cd52.iso -boot d

    $ qemu-system-sparc -m 32 -monitor stdio \
	-hda virtual.img -cdrom cd52.iso -boot d

   NOTE: start this inside an xterm or equivalent.
   NOTE: be sure to choose serial console during install.
   NOTE: -no-fd-bootchk permits booting faster when no floppy is
         in use, but is not supported for qemu-system-sparc.
   NOTE: qemu-system-ppc* and qemu-system-sparc* currently fail with
         J or S malloc flags

4. Compress the virtual disk:

    $ qemu-img convert -c -O qcow2 virtual.img v.tmp && \
	mv v.tmp virtual.img

   NOTE: do not do this while QEMU is running / using this virtual
         disk.

5. Boot normally from the virtual disk:

    $ qemu-system-i386 -m 32 -nographic -no-fd-bootchk -hda virtual.img

   or:

    $ qemu-system-x86_64 -m 32 -nographic -no-fd-bootchk -hda virtual.img

    $ qemu-system-sparc -m 32 -nographic -hda virtual.img

==> Networking

1. Default Settings

   By default, QEMU sets up the equivalent of the following networking:

	-net nic,vlan=0,model=e1000,macaddr=52:54:00:12:34:56
	-net user,vlan=0

   Also, inside this virtual usermode network, it uses the 10.0.2.0/24
   and serves DHCP from inside this virtual network.  Static address
   can be used if one cannot or does not want to do DHCP in the
   guest OS:

	Guest OS IP     : 10.0.2.15
	Default Gateway : 10.0.2.2
	Nameserver      : 10.0.2.3

   It is sufficient for most operations, QEMU itself performs NAT
   and then makes userland network calls for TCP/UDP operations.
   ICMP and other things are not possible in this mode.

   NOTE: If you use one '-net' cmdline argument, QEMU assumes you
         know what you want and clears defaults for the rest of the
         -net defaults.

   NOTE: The guest mode networking does not currently support IPv6,
         and QEMU will complain that it cannot find a DNS server
         if /etc/resolv.conf contains only IPv6 DNS servers.

2. tap mode

   Sometimes it is desirable to configure QEMU to access a network
   via layer2 directly. One way of doing this without having to run
   QEMU as root is to let root open /dev/tapN and pass the file
   descriptor to QEMU. The tap(4) interface should preferrably be
   configured before starting QEMU:

    $ doas ifconfig tap0 192.168.0.254

   The interface can also be configured as part of a bridge(4), in
   which case the ip address can be omitted:

    $ doas ifconfig bridge0 add tap0 add em0 up

   The tunnel and bridge interfaces can also be configured at system
   startup by editing /etc/hostname.tapN and /etc/hostname.bridgeN,
   respectively (see hostname.if(5)).

   After configuring the virtual network we can use doas to let
   root open the tunnel device and then use doas again to drop
   privileges and start QEMU:

    $ doas sh -c "doas -u $USER qemu-system-i386 -nographic -net nic \
	-net tap,fd=3 -no-fd-bootchk -hda virtual.img 3<>/dev/tap0"

   NOTE: if you use sudo instead of doas, remember that sudo calls
         closefrom(2).  In order to have more than one fd passed tap
         interface, a line to sudoers akin to:

		Defaults closefrom_override

         then calling sudo via 'sudo -C 5 -u $USER qemu-system-i386 ..'
         is required.  See sudoers(5) and sudo(8) for details.

   An alternative to the procedure described above is to have QEMU
   set up the network via ${SYSCONFDIR}/qemu-ifup. This is not
   recommended however, since you would have to run QEMU as root,
   and there is no way to drop from root privileges at this point.

   ${SYSCONFDIR}/qemu-ifup contains some default settings that
   permit one to do the following:

    # qemu-system-i386 -net nic -net tap -no-fd-bootchk -hda virtual.img

   It presumes you wish the tap(4) interface to talk to the interface
   holding the default IPv4 route (falling back to trunk0 if no
   route is found), and that you want 'bridge0' to be used to bridge
   the two.

   Setting the environment variables ETHER and BRIDGE will override
   these settings, respectively.

   When starting QEMU, the script attempts to output useful
   information, but there are also error messages that occur as
   well.  On my laptop, I want to route / nat natively using PF and
   also have layer2 access to the QEMU networks.  I thus have this
   as /etc/hostname.trunk101:

	inet6 fe80::1c 64 lladdr 00:03:25:0d:7a:2c
	inet 10.7.255.1 255.255.255.0
	inet6 alias 2001:240:58a:45::1c

   I have dhcpd configured to run on trunk101, and also run rtadvd.
   For QEMU, the startup looks like this:

    # export ETHER=trunk101
    # export BRIDGE=bridge101
    # qemu-system-i386 -net nic,vlan=0,macaddr=52:54:00:12:35:00 \
	-net tap,vlan=0 -vnc :0 -localtime -usb -usbdevice tablet \
	-m 256 -no-fd-bootchk -hda virtual.img -monitor stdio
    {tap0 (bridge101 <-> trunk101)ifconfig: bridge101: No such process
    ifconfig: bridge101: No such process
    }
    (qemu)

   The errors are normal and should be ignored.  One can verify the
   networking is properly configured by verifying the bridge
   interface:

    $ ifconfig bridge101
    bridge101: flags=41<UP,RUNNING>
	groups: bridge
	priority 32768 hellotime 2 fwddelay 15 maxage 20 holdcnt 6 proto rstp
	designated: id 00:00:00:00:00:00 priority 0
	tap0 flags=3<LEARNING,DISCOVER>
		port 16 ifpriority 0 ifcost 0
	trunk101 flags=3<LEARNING,DISCOVER>
		port 6 ifpriority 0 ifcost 0
	Addresses (max cache: 100, timeout: 240):

   NOTE: When running multiple QEMU sessions simultaneously on the
         same bridge, care must be taken because the network MAC
         address defaults to 52:54:00:12:34:56 for every QEMU
         instance.  To change this, observe the macaddr= syntax in
         the above example and choose a unique lladdr per QEMU nic.

==> Mice

   NOTE: Certain OS's work much better with the USB tablet device
         than the normal PS/2 mouse handling.  See the above example
         for usage.

==> Serial Console

   Installing OpenBSD via serial console is sometimes desirable.
   X may not be available, and so on.  There are two ways to
   accomplish this, both in effect the same solution:

    a. qemu-system-i386 -vnc :0 -serial stdio .. virtual.img \
         -cdrom install52.iso -boot d

	- this option permits you to use VNC from some system to
          connect to the QEMU instance and 'set tty com0' at the
          'boot>' prompt.
	- you may then disconnect VNC and use the terminal from
          which you started QEMU to do the install.

    b. qemu-system-i386 -nographic .. virtual.img -fda floppy52.fs -boot a

	- this maps both the serial port and the (qemu) monitor
          prompt to the terminal QEMU was started on.
	- to flip between them, Ctrl-a c; see the QEMU man page for
          other commands that work in -nographic mode.
	- preparation of the floppy image to force serial console
          mode is straightforward:

		vnconfig vnd0 floppy52.fs
		mount /dev/vnd0c /mnt
		mkdir /mnt/etc
		echo set tty com0 > /mnt/etc/boot.conf
		umount /mnt
		vnconfig -u vnd0

     .. be sure to choose 'yes' for setting com0 to be the serial
        console.

   NOTE: OpenBSD poweroff does work with QEMU, which actually causes
         QEMU itself to exit.  This is a good thing, as it is
         currently not possible to set what block device is booted
         from at runtime from QEMU.  So if you start an installation
         booting from a CD-ROM, you will always boot off a CD-ROM
         every time you reboot that QEMU session until you exit and
         start QEMU again booting off the virtual hard drive.

==> daemonized QEMU

   Sometimes you want QEMU to start as part of a system script.

   Adding to some of the above, the -daemonize option comes in
   handy, as well as the telnet: designator for -serial and monitor.
   This is a complete example that may be cut-and-pasted into
   rc.local:

    hddir=/var/vm
    USER=qemu
    if [ -x ${TRUEPREFIX}/bin/qemu ]; then
	echo -n 'Qemu: vmi386'
	(
            ifconfig bridge101 add trunk101 add tap0 up

            sh -c "doas -u $USER \
                ${TRUEPREFIX}/bin/qemu-system-i386 \
                -daemonize \
                -nographic \
                -net nic,vlan=0,macaddr=52:54:00:4e:62:8f \
                -net tap,vlan=0,fd=3 \
                -m 128 \
                -hda $hddir/virtual.img \
                -serial telnet:127.0.0.1:1080,server,nowait \
                -monitor telnet:127.0.0.1:1081,server,nowait \
                -no-fd-bootchk 3<>/dev/tap0"
	)
	echo "."
    fi

    NOTE: this presumes the user `qemu' exists, create it or set
          USER= to an existing user to use this example.
@


1.11
log
@remove sudo as run dependency and switch to doas in readme and scripts

ok sthen deraadt
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.10 2013/01/03 08:30:54 brad Exp $
d95 2
a96 2
   QEMU as root is to let root open /dev/tunN and pass the file
   descriptor to QEMU. The tun(4) interface should preferrably be
d99 1
a99 1
    $ doas ifconfig tun0 192.168.0.254 link0
d104 1
a104 2
    $ doas ifconfig tun0 link0
    $ doas ifconfig bridge0 add tun0 add em0 up
d107 1
a107 1
   startup by editing /etc/hostname.tunN and /etc/hostname.bridgeN,
d115 1
a115 1
	-net tap,fd=3 -no-fd-bootchk -hda virtual.img 3<>/dev/tun0"
d136 1
a136 1
   It presumes you wish the tun(4) interface to talk to the interface
d162 1
a162 1
    {tun0 (bridge101 <-> trunk101)ifconfig: bridge101: No such process
d176 1
a176 1
	tun0 flags=3<LEARNING,DISCOVER>
d250 1
a250 2
            ifconfig tun0 link0
            ifconfig bridge101 add trunk101 add tun0 up
d262 1
a262 1
                -no-fd-bootchk 3<>/dev/tun0"
@


1.10
log
@- Remove unused sparc CONFIGURE_ARGS option
- Clear contents of INSTALL_STRIP when using the debug FLAVOR so that
  the binary is not stripped
- Some small tweaks to the README

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.9 2012/07/08 14:30:40 sthen Exp $
d99 1
a99 1
    $ sudo ifconfig tun0 192.168.0.254 link0
d104 2
a105 2
    $ sudo ifconfig tun0 link0
    $ sudo ifconfig bridge0 add tun0 add em0 up
d111 2
a112 2
   After configuring the virtual network we can use sudo to let
   root open the tunnel device and then use sudo again to drop
d115 1
a115 1
    $ sudo sh -c "sudo -u $USER qemu-system-i386 -nographic -net nic \
d118 3
a120 2
   NOTE: sudo calls closefrom(2).  In order to have more than one
         fd passed tap interface, a line to sudoers akin to:
d254 1
a254 1
            sh -c "sudo -u $USER \
@


1.9
log
@switch from 5.1 to 5.2 in README, ok Brad
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.8 2012/03/16 11:40:53 fgsch Exp $
d40 2
a41 2
   NOTE: qemu-system-sparc currently fails with some
         /etc/malloc.conf settings
d159 1
a159 1
    # qemu-system-i386 -net nic,vlan=0,model=e1000,macaddr=52:54:00:12:35:00 \
d257 1
a257 1
                -net nic,vlan=0,model=e1000,macaddr=52:54:00:4e:62:8f \
@


1.8
log
@Update to qemu 1.0.1, from Brad.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.7 2012/01/26 19:19:15 sthen Exp $
d11 1
a11 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/i386/cd51.iso
d15 1
a15 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/amd64/cd51.iso
d17 1
a17 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/sparc/cd51.iso
d26 1
a26 1
	-hda virtual.img -cdrom cd51.iso -boot d
d31 1
a31 1
	-hda virtual.img -cdrom cd51.iso -boot d
d34 1
a34 1
	-hda virtual.img -cdrom cd51.iso -boot d
d201 1
a201 1
         -cdrom install51.iso -boot d
d209 1
a209 1
    b. qemu-system-i386 -nographic .. virtual.img -fda floppy51.fs -boot a
d218 1
a218 1
		vnconfig vnd0 floppy51.fs
@


1.7
log
@Update README to use cd51.iso, also talk about SPARC emulation now
that it's usable. OK Brad (maintainer).
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.6 2011/12/12 10:56:56 sthen Exp $
d201 1
a201 1
         -cdrom install43.iso -boot d
@


1.6
log
@Update to QEMU 1.0, from Brad.

- disable the BSD userland emulation support for now, it's not widely useful yet
- workaround for incorrect time_t type assumption, from stsp@@

N.B. As of QEMU 1.0 the i386 target has been renamed from qemu to
qemu-system-i386, you will need to change scripts/command lines as necessary.

ok stsp@@ dcoppa@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.5 2011/06/02 13:41:38 ajacoutot Exp $
d11 1
a11 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/i386/cd50.iso
d13 1
a13 1
   or to use a 64-bit client OS:
d15 3
a17 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/amd64/cd50.iso
d26 1
a26 1
	-hda virtual.img -cdrom cd50.iso -boot d
d31 4
a34 1
	-hda virtual.img -cdrom cd50.iso -boot d
d39 3
a41 1
         in use.
d59 2
d209 1
a209 1
    b. qemu-system-i386 -nographic .. virtual.img -fda floppy50.fs -boot a
d218 1
a218 1
		vnconfig vnd0 floppy50.fs
@


1.5
log
@Add a consistent header that substitutes FULLPKGNAME for the READMEs.

ok jasper@@ sthen@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.4 2011/05/09 15:54:56 ajacoutot Exp $
d11 1
a11 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/i386/cd49.iso
d15 1
a15 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/amd64/cd49.iso
d23 2
a24 2
    $ qemu -m 32 -monitor stdio -no-fd-bootchk \
	-hda virtual.img -cdrom cd49.iso -boot d
d29 1
a29 1
	-hda virtual.img -cdrom cd49.iso -boot d
d41 1
a41 1
   NOTE: do not do this while qemu is running / using this virtual
d46 1
a46 1
    $ qemu -m 32 -nographic -no-fd-bootchk -hda virtual.img
d56 1
a56 1
   By default, qemu sets up the equivalent of the following networking:
d62 2
a63 2
   and serves dhcp from inside this virtual network.  Static address
   can be used if one cannot or does not want to do dhcp in the
d70 3
a72 3
   It is sufficient for most operations, qemu itself performs NAT
   and then makes userland network calls for tcp/udp operations.
   icmp and other things are not possible in this mode.
d74 1
a74 1
   NOTE: If you use one '-net' cmdline argument, qemu assumes you
d79 2
a80 2
         and qemu will complain that it cannot find a dns server
         if /etc/resolv.conf contains only IPv6 dns servers.
d84 1
a84 1
   Sometimes it is desirable to configure qemu to access a network
d86 3
a88 3
   qemu as root is to let root open /dev/tunN and pass the file
   descriptor to qemu. The tun(4) interface should preferrably be
   configured before starting qemu:
d104 1
a104 1
   privileges and start qemu:
d106 1
a106 1
    $ sudo sh -c "sudo -u $USER qemu -nographic -net nic \
d114 2
a115 2
         then calling sudo via 'sudo -C 5 -u $USER qemu ..' is
         required.  See sudoers(5) and sudo(8) for details.
d117 1
a117 1
   An alternative to the procedure described above is to have qemu
d119 1
a119 1
   recommended however, since you would have to run qemu as root,
d125 1
a125 1
    # qemu -net nic -net tap -no-fd-bootchk -hda virtual.img
d135 1
a135 1
   When starting qemu, the script attempts to output useful
d137 2
a138 2
   well.  On my laptop, I want to route / nat natively using pf and
   also have layer2 access to the qemu networks.  I thus have this
d146 1
a146 1
   For qemu, the startup looks like this:
d150 1
a150 1
    # qemu -net nic,vlan=0,model=e1000,macaddr=52:54:00:12:35:00 \
d173 3
a175 3
   NOTE: When running multiple qemu sessions simultaneously on the
         same bridge, care must be taken because the network mac
         address defaults to 52:54:00:12:34:56 for every qemu
d177 1
a177 1
         the above example and choose a unique lladdr per qemu nic.
d181 2
a182 2
   NOTE: Certain OS's work much better with the tablet usb device
         than the normal ps2 mouse handling.  See the above example
d191 1
a191 1
    a. qemu -vnc :0 -serial stdio .. virtual.img \
d194 2
a195 2
	- this option permits you to use vnc from some system to
          connect to the qemu instance and 'set tty com0' at the
d197 2
a198 2
	- you may then disconnect vnc and use the terminal from
          which you started qemu to do the install.
d200 1
a200 1
    b. qemu -nographic .. virtual.img -fda floppy49.fs -boot a
d203 2
a204 2
          prompt to the terminal qemu was started on.
	- to flip between them, Ctrl-a c; see the qemu man page for
d209 1
a209 1
		vnconfig vnd0 floppy49.fs
d219 2
a220 2
   NOTE: OpenBSD poweroff does work with qemu, which actually causes
         qemu itself to exit.  This is a good thing, as it is
d222 4
a225 4
         from at runtime from qemu.  So if you start an installation
         booting from a cdrom, you will always boot off a cdrom
         every time you reboot that qemu session until you exit and
         start qemu again booting off the virtual hard drive.
d227 1
a227 1
==> daemonized qemu
d229 1
a229 1
   Sometimes you want qemu to start as part of a system script.
d245 1
a245 1
                ${TRUEPREFIX}/bin/qemu \
@


1.4
log
@Tweak README after recent vnd(4) changes.

ok todd@@ (maintainer qemu-old)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.3 2011/01/19 16:22:31 sthen Exp $
d3 3
a5 2
README for OpenBSD users
------------------------
@


1.3
log
@minor README changes;

- give examples for qemu-system-x86_64 (for 64-bit client OS)
- use 4.9 in examples

ok phessler@@ jasper@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.2 2010/11/22 11:32:01 fgsch Exp $
d208 2
a209 2
		vnconfig svnd0 floppy49.fs
		mount /dev/svnd0c /mnt
d213 1
a213 1
		vnconfig -u svnd0
@


1.2
log
@Update to qemu 0.13.0. fmt README and sync with reality.
with input and ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.1 2010/11/12 14:43:13 jasper Exp $
d10 5
a14 1
    $ ftp ftp://ftp.openbsd.org/pub/OpenBSD/snapshots/i386/cd48.iso
d22 7
a28 2
    $ qemu -m 32 -monitor stdio -no-fd-bootchk -hda virtual.img \
	-cdrom cd48.iso -boot d
d47 4
d199 1
a199 1
    b. qemu -nographic .. virtual.img -fda floppy48.fs -boot a
d208 1
a208 1
		vnconfig svnd0 floppy48.fs
@


1.1
log
@- switch to pkg-readmes
@
text
@d1 1
a1 1
$OpenBSD$
d8 1
a8 8
NOTE: amd64 cannot use '-net user' without SEGV'ing, to work around
      this, either run qemu as root by replacing
	qemu -m 32 ..
      in this quick start section with
         sudo env ETHER=em0 qemu -net nic,model=rtl8139 -net tap -m 32 ..
      or by reading the 'tap mode' section below.

1. Get a bootable CDROM image
d16 1
a16 1
3. Install the os:
d21 4
a24 3
   NOTE: start this inside an xterm or equivalent
   NOTE: be sure to choose serial console during install
   NOTE: -no-fd-bootchk permits booting faster when no floppy is in use
d28 2
a29 1
    $ qemu-img convert -c -O qcow2 virtual.img v.tmp && mv v.tmp virtual.img
d31 2
a32 1
   NOTE: do not do this while qemu is running / using this virtual disk
d36 1
a36 1
    $ qemu -m 32 -nographic -no-fd-bootchk -hda virtual.img 
d40 1
a40 1
1.  Default Settings
d42 1
a42 1
  By default, qemu sets up the equivalent of the following networking:
d44 1
a44 1
	-net nic,vlan=0,model=rtl8139,macaddr=52:54:00:12:34:56
d47 4
a50 3
  Also, inside this virtual usermode network, it uses the 10.0.2.0/24 and
  serves dhcp from inside this virtual network.  Static address can be used
  if one cannot or does not want to do dhcp in the guest os:
d56 3
a58 3
  It is sufficient for most operations, qemu itself performs NAT and then
  makes userland network calls for tcp/udp operations. icmp and other things
  are not possible in this mode.
d60 3
a62 2
  NOTE: If you use one '-net' cmdline argument, qemu assumes you know what you
	want and clears defaults for the rest of the -net defaults.
d64 3
a66 3
  NOTE: The guest mode networking does not currently support IPv6, and
	qemu will complain that it cannot find a dns server if
	/etc/resolv.conf contains only IPv6 dns servers.
d68 1
a68 1
2.  tap mode
d70 5
a74 4
  Sometimes it is desirable to configure qemu to access a network via layer2
  directly. One way of doing this without having to run qemu as root is to
  let root open /dev/tunN and pass the file descriptor to qemu. The tun(4)
  interface should preferrably be configured before starting qemu:
d76 1
a76 1
       $ sudo ifconfig tun0 192.168.0.254 link0
d78 2
a79 2
  The interface can also be configured as part of a bridge(4), in which case
  the ip address can be omitted:
d81 2
a82 3
       $ sudo ifconfig tun0 link0
       $ sudo ifconfig bridge0 create
       $ sudo ifconfig bridge0 add tun0 add em0 up
d84 3
a86 3
  The tunnel and bridge interfaces can also be configured at system startup by
  editing /etc/hostname.tunN and /etc/bridgename.bridgeN,
  respectively (see hostname.if(5)).
d88 3
a90 2
  After configuring the virtual network we can use sudo to let root open the
  tunnel device and then use sudo again to drop privileges and start qemu:
d92 2
a93 2
       $ sudo sh -c "sudo -u $USER qemu -nographic -net nic -net tap,fd=3 \
             -no-fd-bootchk -hda virtual.img 3<>/dev/tun0"
d95 2
a96 2
  NOTE: sudo calls closefrom(2).  In order to have more than one fd passed
	tap interface, a line to sudoers akin to:
d100 2
a101 2
        then calling sudo via 'sudo -C 5 -u $USER qemu ..' is required.
	See sudoers(5) and sudo(8) for details.
d103 23
a125 21
  An alternative to the procedure described above is to have qemu set up the
  network via ${SYSCONFDIR}/qemu-ifup. This is not recommended however, since
  you would have to run qemu as root, and there is no way to drop from root
  privileges at this point.

  ${SYSCONFDIR}/qemu-ifup contains some default settings that permit one to do
  the following:

	# qemu -net nic -net tap -no-fd-bootchk -hda virtual.img

  It presumes you wish the tun(4) interface to talk to the interface
  holding the default IPv4 route (falling back to trunk0 if no route is
  found), and that you want 'bridge0' to be used to bridge the two.

  If you wish to over-ride these settings, setting the environment variables
  ETHER and BRIDGE will over-ride these settings, respectively.

  When starting qemu, the script attempts to output useful information, but
  there are also error messages that occur as well.  On my laptop, I want to
  route / nat natively using pf and also have layer2 access to the qemu
  networks.  I thus have this as /etc/hostname.trunk101:
d131 2
a132 2
  I have dhcpd configured to run on trunk101, and also run rtadvd.  For qemu,
  the startup looks like this:
d134 3
a136 3
   # export ETHER=trunk101
   # export BRIDGE=bridge101
   # qemu -net nic,vlan=0,model=rtl8139,macaddr=52:54:00:12:35:00 \
d139 25
a163 23
   {tun0 (bridge101 <-> trunk101)ifconfig: bridge101: No such process
   ifconfig: bridge101: No such process
   }
   (qemu)

  The errors are normal and should be ignored.  One can verify the networking
  is properly configured by verifying the bridge interface:

   $ ifconfig bridge101
   bridge101: flags=41<UP,RUNNING>
        priority 32768 hellotime 2 fwddelay 15 maxage 20 holdcnt 6 proto rstp
        designated: id 00:00:00:00:00:00 priority 0
        tun0 flags=3<LEARNING,DISCOVER>
                port 16 ifpriority 0 ifcost 0
        trunk101 flags=3<LEARNING,DISCOVER>
                port 6 ifpriority 0 ifcost 0
        Addresses (max cache: 100, timeout: 240):

  NOTE: When running multiple qemu sessions simultaneously on the same bridge,
	care must be taken because the network mac address defaults to
	52:54:00:12:34:56 for every qemu instance.  To change this, observe
	the macaddr= syntax in the above example and choose a unique lladdr
	per qemu nic.
d167 3
a169 2
  NOTE: Certain OS's work much better with the tablet usb device than
	the normal ps2 mouse handling.  See the above example for usage.
d173 12
a184 10
  1. Installing OpenBSD via serial console is sometimes desirable.  X may not
     be available, and so on.  There are two ways to accomplish this, both in
     effect the same solution:

    a. qemu -vnc :0 -serial stdio .. virtual.img -cdrom install43.iso -boot d

	- this option permits you to use vnc from some system to connect to
	  the qemu instance and 'set tty com0' at the 'boot>' prompt.
	- you may then disconnect vnc and use the terminal from which you
	  started qemu to do the install
d188 6
a193 6
	- this maps both the serial port and the (qemu) monitor prompt to
	  the terminal qemu was started on
        - to flip between them, Ctrl-a c; see the qemu man page for other
          commands that work in -nographic mode.
	- preparation of the floppy image to force serial console mode is
	  straightforward:
d202 2
a203 1
     .. be sure to choose 'yes' for setting com0 to be the serial console.
d205 7
a211 7
  NOTE: OpenBSD poweroff does work with qemu, which actually causes qemu
	itself to exit.  This is a good thing, as it is currently not
	possible to set what block device is booted from at runtime from
	qemu.  So if you start an installation booting from a cdrom, you
	will always boot off a cdrom every time you reboot that qemu session
	until you exit and start qemu again booting off the virtual hard
	drive.
d217 4
a220 3
   Adding to some of the above, the -daemonize option comes in handy,
   as well as the telnet: designator for -serial and monitor.  This
   is a complete example that may be cut-and-pasted into rc.local:
d225 4
a228 5
        echo -n 'Qemu: vmi386'
        (
	    ifconfig tun0 link0
	    ifconfig bridge101 create
	    ifconfig bridge101 add trunk101 add tun0 up
d231 1
a231 1
		${TRUEPREFIX}/bin/qemu \
d234 1
a234 1
                -net nic,vlan=0,model=rtl8139,macaddr=52:54:00:4e:62:8f \
d240 3
a242 3
		-no-fd-bootchk 3<>/dev/tun0"
        )
        echo "."
d245 2
a246 2
    NOTE: this presumes the user `qemu' exists, create it or set USER= to an
          existing user to use this example.
@

