head	1.3;
access;
symbols
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	DAVID_LEONARD_980208:1.1.1.1
	DAVID_LEONARD:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2001.11.18.17.06.51;	author d;	state dead;
branches;
next	1.2;

1.2
date	98.09.04.00.35.55;	author d;	state Exp;
branches;
next	1.1;

1.1
date	98.02.08.06.00.09;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.02.08.06.00.09;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@hylafax 4.1, tested by Zsolt Erdei woodi%rozsomak.hu.
@
text
@--- faxd/ModemServer.c++.orig	Wed Sep  2 13:06:37 1998
+++ faxd/ModemServer.c++	Wed Sep  2 13:07:08 1998
@@@@ -895,7 +895,7 @@@@
     "7 bits, odd parity",	// ODD
 };
 
-#if defined(CCTS_OFLOW) && defined(CRTS_IFLOW) && !defined(__NetBSD__)
+#if defined(CCTS_OFLOW) && defined(CRTS_IFLOW) && !defined(__NetBSD__) && !defined(__OpenBSD__)
 #undef CRTSCTS				/* BSDi */
 #define	CRTSCTS	(CCTS_OFLOW|CRTS_IFLOW)
 #endif
@


1.2
log
@HylaFAX 4.0.2
@
text
@@


1.1
log
@Initial revision
@
text
@d1 5
a5 4
--- util/TypeRules.c++.orig	Wed Nov 27 00:20:45 1996
+++ util/TypeRules.c++	Sun Feb  8 03:38:01 1998
@@@@ -48,7 +48,7 @@@@
 }
d7 5
a11 62
 static const char* typeNames[] =
-    { "ascii", "string", "address", "byte", "short", "long" };
+    { "ascii", "asciiesc", "string", "address", "byte", "short", "long" };
 static const char* opNames[] =
     { "<any>", "=", "!=", "<", "<=", ">", ">=", "&", "^", "!" };
 static const char* resultNames[] = { "tiff", "postscript", "error" };
@@@@ -65,7 +65,7 @@@@
 	);
 	if (type == STRING)
 	    printf(" \"%s\"", value.s);
-	else if (type != ASCII) {
+	else if (type != ASCII && type != ASCIIESC) {
 	    if (op == ANY)
 		printf(" <any value>");
 	    else
@@@@ -83,6 +83,7 @@@@
     const u_char* cp = (const u_char*) data;
     switch (type) {
     case ASCII:
+      {
 	u_int i;
 	for (i = 0; i < size; i++)
 	    if (!isprint(cp[i]) && !isspace(cp[i])) {
@@@@ -92,6 +93,19 @@@@
 	    }
 	ok = TRUE;
 	goto done;
+       }
+    case ASCIIESC:
+       {
+	u_int i;
+	for (i = 0; i < size; i++)
+	    if (!isprint(cp[i]) && !isspace(cp[i]) && cp[i] != '\033') {
+		if (verbose)
+		    printf("failed (unprintable char %#x)\n", cp[i]);
+		return (FALSE);
+	    }
+	ok = TRUE;
+	goto done;
+       }
     case STRING:
 	ok = (strncmp((const char*)(cp+off), value.s,
 	    fxmin((u_int) strlen(value.s), (u_int)(size-off))) == 0);
@@@@ -307,6 +321,8 @@@@
 	    rule.type = TypeRule::STRING;
 	else if (strncasecmp(tp, "ascii", cp-tp) == 0)
 	    rule.type = TypeRule::ASCII;
+	else if (strncasecmp(tp, "asciiesc", cp-tp) == 0)
+	    rule.type = TypeRule::ASCIIESC;
 	else if (strncasecmp(tp, "addr", cp-tp) == 0)
 	    rule.type = TypeRule::ADDR;
 	else {
@@@@ -317,7 +333,8 @@@@
 	    cp++;
 	rule.op = TypeRule::EQ;		// default is '='
 	const char* vp = cp;
-	if (rule.type != TypeRule::STRING && rule.type != TypeRule::ASCII) {
+	if (rule.type != TypeRule::STRING && rule.type != TypeRule::ASCII
+	 && rule.type != TypeRule::ASCIIESC) {
 	    // numeric value
 	    switch (*vp) {
 	    case '=':	rule.op = TypeRule::EQ;	cp++; break;
@


1.1.1.1
log
@hylafax port from David Leonard <david.leonard@@dstc.edu.au> with some changes
by me.
@
text
@@
