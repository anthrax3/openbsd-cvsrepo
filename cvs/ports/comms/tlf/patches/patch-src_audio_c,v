head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2014.11.04.10.58.21;	author sthen;	state Exp;
branches;
next	1.1;
commitid	TWeJFjtS64hDqgZj;

1.1
date	2014.11.04.07.41.10;	author ratchov;	state Exp;
branches;
next	;
commitid	xdeCjAVyM9sO5hB3;


desc
@@


1.2
log
@update to tlf-1.2.1 to unbreak
@
text
@$OpenBSD$
--- src/audio.c.orig	Thu May 15 12:59:25 2014
+++ src/audio.c	Mon Nov  3 21:02:56 2014
@@@@ -32,13 +32,48 @@@@
 
 extern char sc_device[];
 
+#ifdef HAVE_SNDIO
+struct sio_hdl *ahdl;
+#else
 int afd;
+#endif
 
 #define ABUFSIZE          4000
 
 void init_audio()
 {
+#ifdef HAVE_SNDIO
+    struct sio_par par;
+ 
+    if ((ahdl = sio_open(SIO_DEVANY, SIO_REC, 0)) == NULL)
+    {
+        fprintf(stderr, "Failed to open audio device\n");
+	exit(1);
+    }
 
+    sio_initpar(&par);
+    par.bits = 8;
+    par.sig = 0;
+    par.rchan = 1;
+    par.rate = 8000;
+    if (!sio_setpar(ahdl, &par) || !sio_getpar(ahdl, &par))
+    {
+        fprintf(stderr, "Couldn't set audio parameters\n");
+	exit(1);
+    }
+
+    if (par.bits != 8 || par.sig || par.rchan != 1 || par.rate != 8000)
+    {
+        fprintf(stderr, "Unsupported audio parameters\n");
+	exit(1);
+    }
+
+    if (!sio_start(ahdl))
+    {
+        fprintf(stderr, "Couldn't start audio device\n");
+	exit(1);
+    }
+#else
     char afile[40];		/* Audio device name */
     int sndfmt;			/* Encoding of audio from */
     int channels;		/* Number of channels to record */
@@@@ -71,12 +106,16 @@@@ void init_audio()
 	perror("8000 sps");
 	exit(errno);
     }
+#endif
 }
 
 int close_audio()
 {
-
+#ifdef HAVE_SNDIO
+    sio_close (ahdl);
+#else
     close(afd);
+#endif
 
     return (0);
 }
@@@@ -132,6 +171,23 @@@@ int rescale(int testvalue)
     return (testvalue);
 }
 
+#ifdef HAVE_SNDIO
+void read_abuf(unsigned char *p) {
+    size_t todo, n;
+
+    todo = ABUFSIZE;
+    while (todo > 0) {
+	n = sio_read(ahdl, p, todo);
+	if (n == 0) {
+	    fprintf(stderr, "Failed to read from audio device\n");
+	    exit(1);
+	}
+	p += n;
+	todo -= n;
+    }
+}
+#endif
+
 float get_audio_sample(void)
 {
 
@@@@ -144,10 +200,14 @@@@ float get_audio_sample(void)
     int i, k;
 
     for (k = 0; k < 4; k++) {
+#ifdef HAVE_SNDIO
+	read_abuf(abuf);
+#else
 	if ((rc = read(afd, abuf, ABUFSIZE)) == -1) {
 	    perror("audio read");
 	    exit(errno);
 	}
+#endif
 
 	for (i = 0; i < rc; i++)	// calculate average
 	{
@


1.1
log
@Use sndio to record.

ok sthen
@
text
@d2 3
a4 3
--- src/audio.c.orig	Wed Apr  5 09:16:50 2006
+++ src/audio.c	Fri Oct 31 19:49:46 2014
@@@@ -31,12 +31,48 @@@@
d16 2
a17 1
  void init_audio() {
d19 3
a21 3
+	struct sio_par par;
 
+	if ((ahdl = sio_open(SIO_DEVANY, SIO_REC, 0)) == NULL)
d26 7
a32 7
+
+	sio_initpar(&par);
+	par.bits = 8;
+	par.sig = 0;
+	par.rchan = 1;
+	par.rate = 8000;
+	if (!sio_setpar(ahdl, &par) || !sio_getpar(ahdl, &par))
d38 1
a38 1
+	if (par.bits != 8 || par.sig || par.rchan != 1 || par.rate != 8000)
d44 1
a44 1
+	if (!sio_start(ahdl))
a48 1
+
d50 6
a55 6
 	char afile[40];                     /* Audio device name */
 	int sndfmt;                         /* Encoding of audio from */
 	int channels;                       /* Number of channels to record */
@@@@ -73,11 +109,15 @@@@ int afd;
         perror("8000 sps");
         exit(errno);
d60 2
a61 1
 int close_audio() {
d64 1
a64 1
+	sio_close (ahdl);
d66 1
a66 1
 	close (afd);
d69 1
a69 1
 return (0);
d71 2
a72 2
@@@@ -113,7 +153,23 @@@@ else testvalue = 0;
 	return (testvalue);
d77 8
a84 11
+	size_t todo, n;
 
+	todo = ABUFSIZE;
+	while (todo > 0) {
+		n = sio_read(ahdl, p, todo);
+		if (n == 0) {
+			fprintf(stderr, "Failed to read from audio device\n");
+			exit(1);
+		}
+		p += n;
+		todo -= n;
d86 3
d92 2
a93 1
 float get_audio_sample(void) {
d95 2
a96 3
     int rc=0;                      		/* Return value from subs */
@@@@ -125,11 +181,15 @@@@ float get_audio_sample(void) {
 	int i, k;
d98 1
a98 1
 	for (k=0; k < 4; k++) {
d100 1
a100 1
+	   read_abuf(abuf);
d102 4
a105 5
 	   if ((rc = read(afd, abuf, ABUFSIZE)) == -1)
         {
             perror("audio read");
             exit(errno);
         }
d108 2
a109 2
 		for (i=0; i < rc; i++)		// calculate average
 		{
@

