head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.05.23.17.05.36;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@yes, g++4 parses all templates... and if they don't make sense, they don't
@
text
@$OpenBSD$
--- src/mt63/dsp.h.orig	Sun May 23 19:03:49 2010
+++ src/mt63/dsp.h	Sun May 23 19:03:32 2010
@@@@ -551,6 +551,7 @@@@ template <class typeInp, class typeOut, class typeW>
 { double Sum, Diff;
   Sum=Mid+Out; Diff=Mid-Out; Mid+=W2*Inp-W1*Sum; Out+=W5*Diff; }
 
+#if 0
 template <class typeInp, class typeW>
  inline void LowPass2(typeInp Inp, LowPass2elem &Elem,
 		typeW W1, typeW W2, typeW W5)
@@@@ -565,6 +566,7 @@@@ template <class typeInp>
   Diff=Elem.Mid-Elem.Out;
   Elem.Mid+=Weight.W2*Inp-Weigth.W1*Sum;
   Out+=Weight.W5*Diff; }
+#endif
 
 /*
 inline void LowPass2(float Inp, double &Mid, double &Out,
@
