head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.52
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.48
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.50
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.46
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.44
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.42
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.26
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.24
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.12.30.01.18.55;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@multiline string literals
@
text
@$OpenBSD$
--- SeParse.y.orig	2003-12-30 02:12:58.000000000 +0100
+++ SeParse.y	2003-12-30 02:13:27.000000000 +0100
@@@@ -81,20 +81,20 @@@@ main(int argc, char *argv[])
 {
   char long_line[1000];
 
-  char input_str[] = "This(is, a, real, funky); script();
-            Scripts(); Can(be); Multi(Line, \"Can't they?\");
-            Commas(are, no, longer, optional, inside, arglists);
-	    Scripts(); Can(); contain(\"tabs \\t and backspaces \\b\");
-	    As(\"Well\\ as Quoted Strings\", and, '\"Quoted Strings inside
-	    quoted strings\"');
-	esc(can, appear, outside, strings, ^z, \\012\\015\\n);
-	    But(parenthesis, should, match);
-  We(\"have a funny way of specifying \\012 chars and even)\"); 
-	backslashes( \" \\\\ \");
-  new(\"in this version are ^m and ^A ctr-escapes, as in ^S^Q\");
- The(next, line, will, give, a, syntax, error, because, it, has, two, adj, functions,
-	without, a, separating, semicolon);
- End() script()";
+  char input_str[] = "This(is, a, real, funky); script();\n"
+"            Scripts(); Can(be); Multi(Line, \"Can't they?\");\n"
+"            Commas(are, no, longer, optional, inside, arglists);\n"
+"	    Scripts(); Can(); contain(\"tabs \\t and backspaces \\b\");\n"
+"	    As(\"Well\\ as Quoted Strings\", and, '\"Quoted Strings inside\n"
+"	    quoted strings\"');\n"
+"	esc(can, appear, outside, strings, ^z, \\012\\015\\n);\n"
+"	    But(parenthesis, should, match);\n"
+"  We(\"have a funny way of specifying \\012 chars and even)\"); \n"
+"	backslashes( \" \\\\ \");\n"
+"  new(\"in this version are ^m and ^A ctr-escapes, as in ^S^Q\");\n"
+" The(next, line, will, give, a, syntax, error, because, it, has, two, adj, functions,\n"
+"	without, a, separating, semicolon);\n"
+" End() script()";
 
   printf("------ String to parse: \n%s\n\n---- Parsing begins:\n", input_str);
   strcpy(long_line, input_str);
@
