head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	zhuk_20130425:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.12.08.19.13.30;	author zhuk;	state dead;
branches;
next	1.3;

1.3
date	2013.06.06.08.36.47;	author zhuk;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.14.09.16.26;	author zhuk;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.25.16.58.24;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.25.16.58.24;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Move on to KDE 4.11.4.

In this release, four "fat" packages were split:

  * kdeadmin
  * kdenetwork
  * kdesdk
  * kdetoys

To make updates reliable, we provide corresponding meta-packages now.

Many new patches in x11/kde4 correspond to the linking problems detected.
Those are planned to integrate upstream but probably we'll have to keep
some of them until KDE 5.

For information about major KDE 4.11 features, look at the official site:
http://www.kde.org/announcements/4.11/

Kopete Jingle support is disabled for now, until googletalk-call gets
cured from permanent coredumping.

This update involved a lot of help and patience for my mistakes from
many people, including ajacoutot@@, espie@@, naddy@@... but most of the
times this was landry@@ who definitely deserves personal "thank you"!
@
text
@$OpenBSD: patch-knumber_knumber_float_cpp,v 1.3 2013/06/06 08:36:47 zhuk Exp $
--- knumber/knumber_float.cpp.orig	Tue May 28 23:30:01 2013
+++ knumber/knumber_float.cpp	Wed Jun  5 17:31:03 2013
@@@@ -44,11 +44,11 @@@@ const mpfr_prec_t knumber_float::precision     = 1024;
 template <double F(double)>
 knumber_base *knumber_float::execute_libc_func(double x) {
 	const double r = F(x);
-	if(isnan(r)) {
+	if(std::isnan(r)) {
 		knumber_error *e = new knumber_error(knumber_error::ERROR_UNDEFINED);
 		delete this;
 		return e;
-	} else if(isinf(r)) {
+	} else if(std::isinf(r)) {
 		knumber_error *e = new knumber_error(knumber_error::ERROR_POS_INFINITY);
 		delete this;
 		return e;
@@@@ -61,11 +61,11 @@@@ knumber_base *knumber_float::execute_libc_func(double 
 template <double F(double, double)>
 knumber_base *knumber_float::execute_libc_func(double x, double y) {
 	const double r = F(x, y);
-	if(isnan(r)) {
+	if(std::isnan(r)) {
 		knumber_error *e = new knumber_error(knumber_error::ERROR_UNDEFINED);
 		delete this;
 		return e;
-	} else if(isinf(r)) {
+	} else if(std::isinf(r)) {
 		knumber_error *e = new knumber_error(knumber_error::ERROR_POS_INFINITY);
 		delete this;
 		return e;
@@@@ -89,8 +89,8 @@@@ knumber_float::knumber_float(const QString &s) {
 //------------------------------------------------------------------------------
 knumber_float::knumber_float(double value) {
 
-	Q_ASSERT(!isinf(value));
-	Q_ASSERT(!isnan(value));
+	Q_ASSERT(!std::isinf(value));
+	Q_ASSERT(!std::isnan(value));
 
 	mpf_init_set_d(mpf_, value);
 }
@@@@ -101,8 +101,8 @@@@ knumber_float::knumber_float(double value) {
 //------------------------------------------------------------------------------
 knumber_float::knumber_float(long double value) {
 
-	Q_ASSERT(!isinf(value));
-	Q_ASSERT(!isnan(value));
+	Q_ASSERT(!std::isinf(value));
+	Q_ASSERT(!std::isnan(value));
 
 	mpf_init_set_d(mpf_, value);
 }
@@@@ -397,7 +397,7 @@@@ knumber_base *knumber_float::cbrt() {
 	mpfr_clear(mpfr);
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -440,7 +440,7 @@@@ knumber_base *knumber_float::sin() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -464,7 +464,7 @@@@ knumber_base *knumber_float::cos() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -487,7 +487,7 @@@@ knumber_base *knumber_float::tan() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -514,7 +514,7 @@@@ knumber_base *knumber_float::asin() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -541,7 +541,7 @@@@ knumber_base *knumber_float::acos() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -564,7 +564,7 @@@@ knumber_base *knumber_float::atan() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -808,7 +808,7 @@@@ knumber_base *knumber_float::log2() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -830,7 +830,7 @@@@ knumber_base *knumber_float::log10() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -852,7 +852,7 @@@@ knumber_base *knumber_float::ln() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -874,7 +874,7 @@@@ knumber_base *knumber_float::exp2() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@@@@ -896,11 +896,12 @@@@ knumber_base *knumber_float::exp10() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
-		return execute_libc_func< ::exp10>(x);
+		// exp10 is glibc-specific extension, avoid it
+		return execute_libc_func< ::pow>(10, x);
 	}
 #endif
 }
@@@@ -918,7 +919,7 @@@@ knumber_base *knumber_float::exp() {
 	return this;
 #else
 	const double x = mpf_get_d(mpf_);
-	if(isinf(x)) {
+	if(std::isinf(x)) {
 		delete this;
 		return new knumber_error(knumber_error::ERROR_POS_INFINITY);
 	} else {
@


1.3
log
@Bugfix update to KDE 4.10.4. Tested with upcoming CMake 2.8.11.
@
text
@d1 1
a1 1
$OpenBSD: patch-knumber_knumber_float_cpp,v 1.2 2013/05/14 09:16:26 zhuk Exp $
@


1.2
log
@Bugfix update KDE4 to 4.10.3 version, including some tweaks:

  * Bump all SHARED_LIBS to 50.0, to avoid future clashes with KDE3
    libraries (based on input from espie@@);
  * Enable support for Telepathy in kdenetwork (see recently committed
    net/telepathy/telepathy-qt);
  * Fix build of analitza when GNU readline is installed (thanks kirby@@
    for pointing to GNU readline issue in general).
@
text
@d1 3
a3 3
$OpenBSD: patch-knumber_knumber_float_cpp,v 1.1.1.1 2013/04/25 16:58:24 zhuk Exp $
--- knumber/knumber_float.cpp.orig	Fri Mar  1 11:05:02 2013
+++ knumber/knumber_float.cpp	Mon Mar 25 23:11:46 2013
d117 1
a117 1
@@@@ -803,7 +803,7 @@@@ knumber_base *knumber_float::log2() {
d126 1
a126 1
@@@@ -825,7 +825,7 @@@@ knumber_base *knumber_float::log10() {
d135 1
a135 1
@@@@ -847,7 +847,7 @@@@ knumber_base *knumber_float::ln() {
d144 1
a144 1
@@@@ -869,7 +869,7 @@@@ knumber_base *knumber_float::exp2() {
d153 1
a153 1
@@@@ -891,11 +891,12 @@@@ knumber_base *knumber_float::exp10() {
d168 1
a168 1
@@@@ -913,7 +914,7 @@@@ knumber_base *knumber_float::exp() {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d75 1
a75 1
 	const double x = mpf_get_d(mpf_);	
@


1.1.1.1
log
@KCalc is a calculator which offers many mathematical functions.

Somehow missed yesterday. Noticed by nigel@@
@
text
@@
