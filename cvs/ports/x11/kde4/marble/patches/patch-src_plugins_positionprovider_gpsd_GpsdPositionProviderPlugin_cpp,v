head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.18
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.16
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.14
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.8
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.6
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	zhuk_20130424:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.04.24.18.30.32;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.24.18.30.32;	author zhuk;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- src/plugins/positionprovider/gpsd/GpsdPositionProviderPlugin.cpp.ports.orig	Sat Feb  9 17:52:38 2013
+++ src/plugins/positionprovider/gpsd/GpsdPositionProviderPlugin.cpp	Sat Feb  9 17:53:20 2013
@@@@ -12,7 +12,7 @@@@
 
 #include "GpsdThread.h"
 #include "MarbleDebug.h"
-#include <math.h>
+#include <cmath>
 
 using namespace Marble;
 /* TRANSLATOR Marble::GpsdPositionProviderPlugin */
@@@@ -76,7 +76,7 @@@@ void GpsdPositionProviderPlugin::update( gps_data_t da
 {
     PositionProviderStatus oldStatus = m_status;
     GeoDataCoordinates oldPosition = m_position;
-    if ( data.status == STATUS_NO_FIX || isnan( data.fix.longitude ) || isnan( data.fix.latitude ) )
+    if ( data.status == STATUS_NO_FIX || std::isnan( data.fix.longitude ) || std::isnan( data.fix.latitude ) )
         m_status = PositionProviderStatusUnavailable;
     else {
         m_status = PositionProviderStatusAvailable;
@@@@ -88,29 +88,29 @@@@ void GpsdPositionProviderPlugin::update( gps_data_t da
 
         m_accuracy.level = GeoDataAccuracy::Detailed;
 #if defined( GPSD_API_MAJOR_VERSION ) && ( GPSD_API_MAJOR_VERSION >= 3 )
-        if ( !isnan( data.fix.epx ) && !isnan( data.fix.epy ) ) {
+        if ( !std::isnan( data.fix.epx ) && !std::isnan( data.fix.epy ) ) {
             m_accuracy.horizontal = qMax( data.fix.epx, data.fix.epy );
         }
 #else
-        if ( !isnan( data.fix.eph ) ) {
+        if ( !std::isnan( data.fix.eph ) ) {
             m_accuracy.horizontal = data.fix.eph;
         }
 #endif
-        if ( !isnan( data.fix.epv ) ) {
+        if ( !std::isnan( data.fix.epv ) ) {
             m_accuracy.vertical = data.fix.epv;
         }
 
-        if( !isnan(data.fix.speed ) )
+        if( !std::isnan(data.fix.speed ) )
         {
             m_speed = data.fix.speed;
         }
 
-        if( !isnan( data.fix.track ) )
+        if( !std::isnan( data.fix.track ) )
         {
             m_track = data.fix.track;
         }
 
-        if ( !isnan( data.fix.time ) )
+        if ( !std::isnan( data.fix.time ) )
         {
             m_timestamp = QDateTime::fromMSecsSinceEpoch( data.fix.time * 1000 );
         }
@


1.1.1.1
log
@Marble is a Virtual Globe and World Atlas that you can use to learn
more about Earth: You can pan and zoom around and you can look up
places and roads.

Marble offers different thematic maps: A classroom-style topographic
map, a satellite view, street map, earth at night and temperature
and precipitation maps. All maps include a custom map key, so it
can also be used as an educational tool for use in class-rooms. For
educational purposes you can also change date and time and watch
how the starry sky and the twilight zone on the map change.

In opposite to other virtual globes Marble also features multiple
projections: Choose between a Flat Map ("Plate carr"), Mercator or
the Globe.

Note: Marble project (tries to) support non-KDE builds too. Anyone
interested could work on it...
@
text
@@
