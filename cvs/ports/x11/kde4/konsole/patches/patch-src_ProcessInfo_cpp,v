head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2014.07.10.15.12.59;	author sthen;	state Exp;
branches;
next	1.3;
commitid	KvkIBa0yI9MUnbFu;

1.3
date	2014.07.09.20.03.27;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	VIGhneE7m6586cHK;

1.2
date	2014.01.30.21.28.42;	author zhuk;	state Exp;
branches;
next	1.1;

1.1
date	2014.01.27.10.23.40;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.4
log
@include errno.h
@
text
@$OpenBSD: patch-src_ProcessInfo_cpp,v 1.3 2014/07/09 20:03:27 zhuk Exp $
Fix sysctl(3) error handling.
--- src/ProcessInfo.cpp.orig	Tue Jun  3 10:30:56 2014
+++ src/ProcessInfo.cpp	Thu Jul 10 16:12:33 2014
@@@@ -27,6 +27,7 @@@@
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <errno.h>
 #include <unistd.h>
 #include <pwd.h>
 #include <sys/param.h>
@@@@ -738,38 +739,28 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
 
 private:
     virtual bool readProcInfo(int aPid) {
+        struct kinfo_proc   kInfoProc;
         int      managementInfoBase[6];
-        size_t   mibLength;
-        struct kinfo_proc*  kInfoProc;
+        size_t   mibLength = sizeof(kInfoProc);
 
         managementInfoBase[0] = CTL_KERN;
         managementInfoBase[1] = KERN_PROC;
         managementInfoBase[2] = KERN_PROC_PID;
         managementInfoBase[3] = aPid;
-        managementInfoBase[4] = sizeof(struct kinfo_proc);
+        managementInfoBase[4] = sizeof(kInfoProc);
         managementInfoBase[5] = 1;
 
-        if (::sysctl(managementInfoBase, 6, NULL, &mibLength, NULL, 0) == -1) {
-            kWarning() << "first sysctl() call failed with code" << errno;
+        if (::sysctl(managementInfoBase, 6, &kInfoProc, &mibLength, NULL, 0) == -1) {
+            kWarning() << "sysctl() call failed with code" << errno;
             return false;
         }
 
-        kInfoProc = (struct kinfo_proc*)malloc(mibLength);
-
-        if (::sysctl(managementInfoBase, 6, kInfoProc, &mibLength, NULL, 0) == -1) {
-            kWarning() << "second sysctl() call failed with code" << errno;
-            free(kInfoProc);
-            return false;
-        }
-
-        setName(kInfoProc->p_comm);
-        setPid(kInfoProc->p_pid);
-        setParentPid(kInfoProc->p_ppid);
-        setForegroundPid(kInfoProc->p_tpgid);
-        setUserId(kInfoProc->p_uid);
-        setUserName(kInfoProc->p_login);
-
-        free(kInfoProc);
+        setName(kInfoProc.p_comm);
+        setPid(kInfoProc.p_pid);
+        setParentPid(kInfoProc.p_ppid);
+        setForegroundPid(kInfoProc.p_tpgid);
+        setUserId(kInfoProc.p_uid);
+        setUserName(kInfoProc.p_login);
         return true;
     }
 
@@@@ -785,7 +776,7 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
         managementInfoBase[2] = aPid;
         managementInfoBase[3] = whatMib;
 
-        do {
+        while (true) {
             len *= 2;
             nbuf = realloc(buf, len);
             if (nbuf == NULL) {
@@@@ -794,8 +785,13 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
 
             buf = nbuf;
             rc = ::sysctl(managementInfoBase, 4, buf, &len, NULL, 0);
-            kWarning() << "sysctl() call failed with code" << errno;
-        } while (rc == -1 && errno == ENOMEM);
+            if (rc != -1) {
+                break;
+            } else if (errno != ENOMEM) {
+                kWarning() << "sysctl() call failed with code" << errno;
+                break;
+            }
+        }
 
         if (nbuf == NULL || rc == -1) {
             free(buf);
@


1.3
log
@"small update" (c) tedu@@

Here KDE 4.13.2 comes. Big release changelogs could be read here:

  http://www.kde.org/announcements/4.12/
  http://www.kde.org/announcements/4.13/

Critical things you should be aware of:

  1. Nepomuk is gone, it's superseeded by Baloo. Nepomuk libraries
     are still here, though, but they do rely on Baloo internally.

  2. kdnssd was renamed to zeroconf-ioslave;

  3. kwallet was renamed to kwalletmanager;

  4. Akonadi cache will be rebuilt; this could result in change
     of PIM folder indexes, which in turn could mess up your
     mail filters - beware.

  5. ... a lot of other little problems that always happen during
     update.

Things could be broken for a day or two in subtle ways - don't
hesistate on reporting them!
@
text
@d1 1
a1 1
$OpenBSD: patch-src_ProcessInfo_cpp,v 1.2 2014/01/30 21:28:42 zhuk Exp $
d3 11
a13 3
--- src/ProcessInfo.cpp.orig	Wed May  7 17:44:07 2014
+++ src/ProcessInfo.cpp	Fri Jun 27 02:01:25 2014
@@@@ -738,38 +738,28 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
d63 1
a63 1
@@@@ -785,7 +775,7 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
d72 1
a72 1
@@@@ -794,8 +784,13 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
@


1.2
log
@Squash another bug introduced by me, that made Konsole crash by occasion.
The fix actually simplifies things a lot, as a bonus.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_ProcessInfo_cpp,v 1.1 2014/01/27 10:23:40 zhuk Exp $
d3 3
a5 3
--- src/ProcessInfo.cpp.orig	Mon Jan 27 14:10:44 2014
+++ src/ProcessInfo.cpp	Fri Jan 31 01:25:37 2014
@@@@ -734,38 +734,28 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
d55 1
a55 1
@@@@ -781,7 +771,7 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
d64 1
a64 1
@@@@ -790,8 +780,13 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pub
@


1.1
log
@Fix a bug in code I've added to Konsole some time ago that resulted in
superflows errors in .xsession-errors.

Reminded by STeve Andre' on ports@@, thanks!
@
text
@d1 1
a1 1
$OpenBSD$
d4 52
a55 2
+++ src/ProcessInfo.cpp	Mon Jan 27 14:15:43 2014
@@@@ -781,7 +781,7 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pri
d64 1
a64 1
@@@@ -790,8 +790,13 @@@@ class OpenBSDProcessInfo : public UnixProcessInfo (pri
@

