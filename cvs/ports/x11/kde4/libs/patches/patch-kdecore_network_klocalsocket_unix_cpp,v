head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.18
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.16
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.04.24.19.45.29;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update KDE4 libs package.
@
text
@$OpenBSD$
!!! XXX Remove later!!!


Or this "fake" length will go to bind(2), causing it fail.
--- kdecore/network/klocalsocket_unix.cpp.orig	Thu Dec 27 18:13:59 2012
+++ kdecore/network/klocalsocket_unix.cpp	Thu Dec 27 18:59:06 2012
@@@@ -142,7 +142,8 @@@@ KSockaddrUn::KSockaddrUn(const QString &path, KLocalSo
     sockaddr_un *saddr = reinterpret_cast<sockaddr_un *>(data.data());
     saddr->sun_family = AF_UNIX;
 #ifdef HAVE_STRUCT_SOCKADDR_SA_LEN
-    saddr->sun_len = datalen;
+    saddr->sun_len = (type == KLocalSocket::AbstractUnixSocket) ?
+        sizeof(saddr->sun_family) + sizeof(saddr->sun_len) : datalen;
 #endif
 
     if (type == KLocalSocket::UnixSocket) {
@@@@ -258,7 +259,8 @@@@ bool KLocalSocketServerPrivate::listen(const QString &
 
         // try to bind to the address
         localPath = path;
-        if (kBind(descriptor, addr.address(), addr.length()) == -1 ||
+        int addrlen = (aType == KLocalSocket::AbstractUnixSocket) ? MIN_SOCKADDR_UN_LEN : addr.length();
+        if (kBind(descriptor, addr.address(), addrlen) == -1 ||
             kListen(descriptor, 5) == -1) {
             int error = errno;
             close();
@
