head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.14
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.07.11.11.13.10;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	e1BO2Z8Rynr5Dlrm;

1.2
date	2014.02.04.15.25.44;	author zhuk;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.24.19.45.29;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Regen patches (non-critical, but lowers level of spam in my cvs diff output)
@
text
@$OpenBSD: patch-kdecore_kernel_kstandarddirs_cpp,v 1.2 2014/02/04 15:25:44 zhuk Exp $
1. Provide "libexec" resource type by default, and check for libexec items
   first by default when searching for executables.
2. Use separate from KDE3 links to special resource directories.
3. Use system constants instead of magic values.
--- kdecore/kernel/kstandarddirs.cpp.orig	Sun Jun  8 15:41:32 2014
+++ kdecore/kernel/kstandarddirs.cpp	Fri Jul 11 09:12:18 2014
@@@@ -285,6 +285,7 @@@@ QStringList KStandardDirs::allTypes() const
         list.append(QLatin1String(types_string + types_indices[i]));
     // Those are added manually by addKDEDefaults
     list.append(QString::fromLatin1("lib"));
+    list.append(QString::fromLatin1("libexec"));
     //list.append(QString::fromLatin1("home")); // undocumented on purpose, said Waldo in r113855.
 
     // Those are handled by resourceDirs() itself
@@@@ -479,8 +480,12 @@@@ QString KStandardDirs::findResource( const char *type,
         filename += QLatin1String(".exe");
     }
 #endif
-    const QString dir = findResourceDir(type, filename);
+    QString dir;
+    if (!strcmp(type, "exe"))
+        dir = findResourceDir("libexec", filename);
     if (dir.isEmpty())
+        dir = findResourceDir(type, filename);
+    if (dir.isEmpty())
       return dir;
     else
       return !KGlobal::hasLocale() ? dir + filename
@@@@ -1000,14 +1005,13 @@@@ KStandardDirs::realFilePath(const QString &filename)
 
 void KStandardDirs::KStandardDirsPrivate::createSpecialResource(const char *type)
 {
-    char hostname[256];
-    hostname[0] = 0;
-    gethostname(hostname, 255);
+    char hostname[MAXHOSTNAMELEN];
+    gethostname(hostname, MAXHOSTNAMELEN);
+    hostname[MAXHOSTNAMELEN-1] = 0;
     const QString localkdedir = m_prefixes.first();
-    QString dir = localkdedir + QString::fromLatin1(type) + QLatin1Char('-') + QString::fromLocal8Bit(hostname);
-    char link[1024];
-    link[1023] = 0;
-    int result = readlink(QFile::encodeName(dir).constData(), link, 1023);
+    QString dir = localkdedir + QString::fromLatin1(type) + QLatin1Char('4') + QLatin1Char('-') + QString::fromLocal8Bit(hostname);
+    char link[PATH_MAX+1];
+    int result = readlink(QFile::encodeName(dir).constData(), link, PATH_MAX);
     bool relink = (result == -1) && (errno == ENOENT);
     if (result > 0)
     {
@@@@ -1051,7 +1055,7 @@@@ void KStandardDirs::KStandardDirsPrivate::createSpecia
             if (system(QByteArray(QFile::encodeName(srv) + ' ' + type)) == -1) {
                 fprintf(stderr, "Error: unable to launch lnusertemp command" );
             }
-            result = readlink(QFile::encodeName(dir).constData(), link, 1023);
+            result = readlink(QFile::encodeName(dir).constData(), link, PATH_MAX);
         }
     }
     if (result > 0)
@@@@ -1329,7 +1333,7 @@@@ QString KStandardDirs::findExe( const QString& appname
                                 const QString& pstr,
                                 SearchOptions options )
 {
-    //kDebug(180) << "findExe(" << appname << ", pstr, " << ignoreExecBit << ") called";
+    kDebug(180) << "findExe(" << appname << ", pstr, " << options << ") called";
 
 #ifdef Q_OS_WIN
     QStringList executable_extensions = executableExtensions();
@@@@ -1359,7 +1363,7 @@@@ QString KStandardDirs::findExe( const QString& appname
     QString p = installPath("libexec") + appname;
     QString result = checkExecutable(p, options & IgnoreExecBit);
     if (!result.isEmpty()) {
-        //kDebug(180) << "findExe(): returning " << result;
+        kDebug(180) << "findExe(): returning libexec item " << result;
         return result;
     }
 
@@@@ -1373,7 +1377,7 @@@@ QString KStandardDirs::findExe( const QString& appname
         // Check for executable in this tokenized path
         result = checkExecutable(p, options & IgnoreExecBit);
         if (!result.isEmpty()) {
-            //kDebug(180) << "findExe(): returning " << result;
+            kDebug(180) << "findExe(): returning PATH item " << result;
             return result;
         }
     }
@@@@ -1383,14 +1387,14 @@@@ QString KStandardDirs::findExe( const QString& appname
     p += appname;
     result = checkExecutable(p, options & IgnoreExecBit);
     if (!result.isEmpty()) {
-        //kDebug(180) << "findExe(): returning " << result;
+        kDebug(180) << "findExe(): returning KDE bin " << result;
         return result;
     }
 
     // If we reach here, the executable wasn't found.
     // So return empty string.
 
-    //kDebug(180) << "findExe(): failed, nothing matched";
+    kDebug(180) << "findExe(): failed, nothing matched";
     return QString();
 }
 
@


1.2
log
@Rename KDE4 symlinks it creates in KDEHOME that point out to different
temporary areas. Now KDE3 and KDE4 use totally different "temp" areas and
programs from both worlds could work more or less fine together, even when
sharing KDEHOME (this is NOT a recommended way to do things, but sometimes
you have to, like me). The only two minor problems there I'm aware now are:

1. Konqueror (KDE3) can't open web sites (some KHTML or kio_http issue?).

2. kded (KDE3) hangs when run automatically through kdeinit; killing it and
   starting manually fixes the situation. May be kbuildsycoca-related, will
   investigate more.

If you see any other problems, like hardcoded paths to those symlinks,
don't stay silent.

Oh, and it's really NOT recommended to install this update while having
KDE4 apps running.
@
text
@d1 1
a1 1
$OpenBSD: patch-kdecore_kernel_kstandarddirs_cpp,v 1.1 2013/04/24 19:45:29 zhuk Exp $
d6 3
a8 3
--- kdecore/kernel/kstandarddirs.cpp.orig	Thu Jan  2 23:26:54 2014
+++ kdecore/kernel/kstandarddirs.cpp	Tue Feb  4 13:29:25 2014
@@@@ -279,6 +279,7 @@@@ QStringList KStandardDirs::allTypes() const
d16 1
a16 1
@@@@ -473,8 +474,12 @@@@ QString KStandardDirs::findResource( const char *type,
d30 1
a30 1
@@@@ -994,14 +999,13 @@@@ KStandardDirs::realFilePath(const QString &filename)
d51 1
a51 1
@@@@ -1045,7 +1049,7 @@@@ void KStandardDirs::KStandardDirsPrivate::createSpecia
d60 1
a60 1
@@@@ -1341,7 +1345,7 @@@@ QString KStandardDirs::findExe( const QString& appname
d69 1
a69 1
@@@@ -1371,7 +1375,7 @@@@ QString KStandardDirs::findExe( const QString& appname
d78 1
a78 1
@@@@ -1385,7 +1389,7 @@@@ QString KStandardDirs::findExe( const QString& appname
d87 1
a87 1
@@@@ -1395,14 +1399,14 @@@@ QString KStandardDirs::findExe( const QString& appname
@


1.1
log
@Update KDE4 libs package.
@
text
@d1 7
a7 5
$OpenBSD$
Provide "libexec" resource type by default, and check for libexec items
first by default when searching for executables.
--- kdecore/kernel/kstandarddirs.cpp.orig	Mon Dec 17 18:14:17 2012
+++ kdecore/kernel/kstandarddirs.cpp	Mon Jan  7 19:03:17 2013
d30 31
a60 1
@@@@ -1341,7 +1346,7 @@@@ QString KStandardDirs::findExe( const QString& appname
d69 1
a69 1
@@@@ -1371,7 +1376,7 @@@@ QString KStandardDirs::findExe( const QString& appname
d78 1
a78 1
@@@@ -1385,7 +1390,7 @@@@ QString KStandardDirs::findExe( const QString& appname
d87 1
a87 1
@@@@ -1395,14 +1400,14 @@@@ QString KStandardDirs::findExe( const QString& appname
@

