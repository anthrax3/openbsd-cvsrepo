head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	zhuk_20131208:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.07.09.20.03.27;	author zhuk;	state dead;
branches;
next	1.1;
commitid	VIGhneE7m6586cHK;

1.1
date	2013.12.08.18.39.44;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.12.08.18.39.44;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.2
log
@"small update" (c) tedu@@

Here KDE 4.13.2 comes. Big release changelogs could be read here:

  http://www.kde.org/announcements/4.12/
  http://www.kde.org/announcements/4.13/

Critical things you should be aware of:

  1. Nepomuk is gone, it's superseeded by Baloo. Nepomuk libraries
     are still here, though, but they do rely on Baloo internally.

  2. kdnssd was renamed to zeroconf-ioslave;

  3. kwallet was renamed to kwalletmanager;

  4. Akonadi cache will be rebuilt; this could result in change
     of PIM folder indexes, which in turn could mess up your
     mail filters - beware.

  5. ... a lot of other little problems that always happen during
     update.

Things could be broken for a day or two in subtle ways - don't
hesistate on reporting them!
@
text
@$OpenBSD: patch-plugins_otr_otrplugin_cpp,v 1.1 2013/12/08 18:39:44 zhuk Exp $
Support for libotr-4.0, from upstream.
--- plugins/otr/otrplugin.cpp.orig	Fri Jun 28 22:08:21 2013
+++ plugins/otr/otrplugin.cpp	Sat Oct  5 05:10:45 2013
@@@@ -1,5 +1,5 @@@@
 /*************************************************************************
- * Copyright <2007>  <Michael Zanetti> <michael_zanetti@@gmx.net>         *
+ * Copyright <2007 - 2013>  <Michael Zanetti> <mzanetti@@kde.org>         *
  *                                                                       *
  * This program is free software; you can redistribute it and/or         *
  * modify it under the terms of the GNU General Public License as        *
@@@@ -153,68 +153,23 @@@@ void OTRPlugin::slotNewChatSessionWindow( Kopete::Chat
 void OTRPlugin::slotOutgoingMessage( Kopete::Message& msg )
 {
 	if( msg.direction() == Kopete::Message::Outbound ){
-		QString accountId = msg.manager()->account()->accountId();
-		Kopete::Contact *contact = msg.to().first();
 
-		QString msgBody;
-		QString cacheBody;
-		bool plaintext = msg.format() == Qt::PlainText;
-		kDebug(14318) << "Message format is" << (plaintext ? "plaintext" : "richtext");
-		if(plaintext){
-			msgBody = msg.plainBody().replace('<', "&lt;");
-			cacheBody = msgBody;
-		} else {
-			msgBody = msg.escapedBody();
-			cacheBody = msgBody;
-		}
-		kDebug(14318) << "Outgoing message before processing:" << msgBody << "escaped" << Kopete::Message::escape(msgBody);
+	QString cacheBody;
+	if(msg.format() == Qt::PlainText){
+		cacheBody = msg.plainBody().replace('<', "&lt;");
+	} else {
+		cacheBody = msg.escapedBody();
+	}
 
-		int encryptionState = otrlChatInterface->encryptMessage( &msgBody, accountId, msg.manager()->account()->protocol()->displayName(), contact->contactId(), msg.manager() );
+	otrlChatInterface->encryptMessage( msg );
         
-		if(encryptionState == -1){
-			// Failure. Shouldn't happen. However, if it does DON'T
-			// send the message out in plaintext. overwrite with something else...
-			msg.setPlainBody(i18n("An error occurred while encrypting the message."));
+	if( !msg.plainBody().isEmpty() ){
+		messageCache.insert( msg.plainBody(), cacheBody );
+	} else {
+		messageCache.insert( "!OTR:MsgDelByOTR", cacheBody );
+	}
 
-		} else if(encryptionState == 0){
-			kDebug(14318) << "Encrypted successfully";
-
-			// Always set plaintext if the message has been encrypted.
-			// The parser wouldn't understand anything after encryption anyways...
-			msg.setPlainBody( msgBody );
-			msg.setType(Kopete::Message::TypeNormal);
-			if( !msg.plainBody().isEmpty() ){
-				messageCache.insert( msgBody, cacheBody );
-			} else {
-				messageCache.insert( "!OTR:MsgDelByOTR", cacheBody );
-			}
-		} else if(encryptionState == 1){
-			kDebug(14318) << "Tagged plaintext!";
-            
-			/* Here we have a problem... libotr tags messages with whitespaces to
-			   be recognized by other clients. Those whitespaces are discarded
-			   if we use setHtmlBody() and breaks opportunistic mode.
-			   If we use setPlainBody() for messages containing tags, those tags
-			   are escaped and will be visible in the other sides chatwindow.
-               
-			   This approach should always send out correct messages but will
-			   break opportunistic mode if the user enables RTF formatting.
-			   Sorry folks. No way to deal with this currently (Would need changes
-			   in the rich text handling in libkopete).
-			*/
-			if(plaintext){
-				msg.setPlainBody(msgBody);
-			} else {
-				msg.setHtmlBody(msgBody);
-			}
-            
-			messageCache.insert( msgBody, cacheBody );
-		} /* else {
-			Don't touch msg If encryptionState is something else than above!!!
-		} */
-
-
-		kDebug(14318) << "Outgoing message after processing:" << msgBody << msg.format();
+	kDebug(14318) << "Outgoing message after processing:" << msg.plainBody() << msg.format();
 	}
 }
 
@@@@ -287,23 +242,22 @@@@ void OtrMessageHandler::handleMessage( Kopete::Message
 		return;
 	}
 
+
 	Kopete::Message msg = event->message();
 //	Kopete::ChatSession *session = msg.manager();
 	QMap<QString, QString> messageCache = plugin->getMessageCache();
 
-	if( msg.direction() == Kopete::Message::Inbound ){
-		if( msg.type() == Kopete::Message::TypeFileTransferRequest )
+    kDebug(14318) << "OtrMessageHandler::handleMessage:" << msg.plainBody();
+
+    if( msg.direction() == Kopete::Message::Inbound){
+        if( msg.type() == Kopete::Message::TypeFileTransferRequest )
 		{
 			// file transfers aren't encrypted. Proceed with next plugin
 			MessageHandler::handleMessage( event );
 			return;
 		}
-		QString body = msg.plainBody();
-		QString accountId = msg.manager()->account()->accountId();
-		QString contactId = msg.from()->contactId();
-		int retValue = OtrlChatInterface::self()->decryptMessage( &body, accountId, msg.manager()->account()->protocol()->displayName(), contactId, msg.manager() );
-		msg.setHtmlBody( body );
-		if( (retValue == 2) | OtrlChatInterface::self()->shouldDiscard( msg.plainBody() ) ){
+        int retValue = OtrlChatInterface::self()->decryptMessage( msg );
+        if( (retValue == 2) | OtrlChatInterface::self()->shouldDiscard( msg.plainBody() ) ){
 			// internal OTR message
 			event->discard();
 			return;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: patch-kopete_plugins_otr_otrplugin_cpp,v 1.1 2013/10/05 01:39:03 zhuk Exp $
@


1.1.1.1
log
@Kopete is an instant messenger supporting AIM, Bonjour, Gadu-Gadu,
GroupWise, ICQ, Jabber (XMPP, Google Talk, Facebook, ...), Meanwhile,
QQ, Skype, Windows Live Messenger, WinPopup, Yahoo and more. It is
designed to be a flexible and extensible multi-protocol system
suitable for personal and enterprise use.

The goal of Kopete is to provide users with a single easy-to-use
way to access all of their instant messaging systems. The interface
puts people first, and is integrated with the system address book
to let you access your contacts from other KDE applications. Instant
messaging can be intrusive, but Kopete's notification system can
be tuned so that only important contacts interrupt you.

Kopete also features tools to enhance your instant messaging
experience, such as message encryption, archiving, and many other
fun and useful effects.

This is ex-kdenetwork member. Importing as a part of KDE 4.11.4 update.
This port won't work until update is finished, thus not hooking it up.
@
text
@@
