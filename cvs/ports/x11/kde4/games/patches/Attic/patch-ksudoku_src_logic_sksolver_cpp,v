head	1.2;
access;
symbols
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.06.18.13.30.17;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2008.01.21.22.08.14;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@actual applications !
@
text
@$OpenBSD: patch-ksudoku_src_logic_sksolver_cpp,v 1.1 2008/01/21 22:08:14 espie Exp $
--- ksudoku/src/logic/sksolver.cpp.orig	Sun Jan 20 13:03:17 2008
+++ ksudoku/src/logic/sksolver.cpp	Sun Jan 20 13:18:45 2008
@@@@ -40,7 +40,7 @@@@ SKPuzzle stack[625+1];
 using namespace ksudoku;
 using namespace std;
 
-class SolverState {
+class ksudoku::SolverState {
 public:
 	SolverState(uint size, uint order)
 		: m_size(size), m_order(order), m_values(size, 0), m_flags(order),
@@@@ -144,7 +144,7 @@@@ SKSolver::SKSolver(SKGraph* gr)
 
 SKSolver::SKSolver(int n, bool threedimensionalf)
 {
-	base = static_cast<int>(sqrt(n));
+	base = static_cast<int>(sqrt(static_cast<double>(n)));
 	order=n;
 	m_type = threedimensionalf ? roxdoku : sudoku;
 	           ///@@TODO fix above so more than 2
@@@@ -335,7 +335,7 @@@@ int SKSolver::remove_numbers(SKPuzzle* p, int level, i
 	}
 	
 	
-	int numberOfNumbersToAdd = (7*(3-level)*(((type!=1) ? ((int) sqrt(p->size)) : p->order )+LEVINC-(p->order-2)*(type==1)))/10;
+	int numberOfNumbersToAdd = (7*(3-level)*(((type!=1) ? ((int) sqrt((double)p->size)) : p->order )+LEVINC-(p->order-2)*(type==1)))/10;
  	printf("%d\n", numberOfNumbersToAdd);
 
 	ITERATE(i, numberOfNumbersToAdd)
@@@@ -579,7 +579,7 @@@@ uint SKSolver::removeAtIndex(QVector<uint>& puzzle, ui
 		puzzle[indices[i]] = 0;
 	}
 	
-	::SolverState state(size, order);
+	ksudoku::SolverState state(size, order);
 	for(uint i = 0; i < static_cast<uint>(size); ++i) {
 		if(puzzle[i]) state.setValue(i, puzzle[i], g);
 	}
@


1.1
log
@games compiles as well
@
text
@d1 1
a1 1
$OpenBSD$
@

