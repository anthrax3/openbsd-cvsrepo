head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2016.07.17.16.04.32;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	xBK8vUxMlENqxf1p;

1.1
date	2016.07.16.10.38.50;	author zhuk;	state Exp;
branches;
next	;
commitid	xscLvzvQPEvCiClI;


desc
@@


1.2
log
@Remove recently (a few days ago) introduced debugging printout of usernames
and passwords entered inside KDE4's KDM to syslog.

okay sthen@@ & naddy@@
@
text
@$OpenBSD: patch-kdm_backend_client_c,v 1.1 2016/07/16 10:38:50 zhuk Exp $
Add BSD authentication support.
--- kdm/backend/client.c.orig	Fri Jun 26 06:17:21 2015
+++ kdm/backend/client.c	Fri Jul 15 09:33:00 2016
@@@@ -53,7 +53,9 @@@@ extern int key_setnet(struct key_netstarg *arg);
 #ifdef HAVE_SETUSERCONTEXT
 # include <login_cap.h>
 #endif
-#ifdef USE_PAM
+#ifdef HAVE_BSDAUTH
+# include <bsd_auth.h>
+#elif defined(USE_PAM)
 # ifdef HAVE_PAM_PAM_APPL_H
 #  include <pam/pam_appl.h>
 # else
@@@@ -521,7 +523,9 @@@@ isNoPassAllowed(struct passwd *pw)
 int
 verify(GConvFunc gconv, int rootok)
 {
-#ifdef USE_PAM
+#ifdef HAVE_BSDAUTH
+    char *bsdstyle = NULL;
+#elif defined(USE_PAM)
     const char *psrv;
     struct pam_data pdata;
     int pretc, pnopass;
@@@@ -547,8 +551,19 @@@@ verify(GConvFunc gconv, int rootok)
 
     debug("verify ...\n");
 
-#ifdef USE_PAM
+#ifdef HAVE_BSDAUTH
 
+    if (!curuser)
+        curuser = gconv(GCONV_USER, 0);
+    if (!curpass)
+        curpass = gconv(GCONV_PASS, 0);
+    if (curtype != NULL && strcmp(curtype, "classic"))
+        bsdstyle = curtype;
+    if (!auth_userokay(curuser, bsdstyle, NULL, curpass))
+        return False;
+    
+#elif defined(USE_PAM)
+
     pnopass = False;
     if (!strcmp(curtype, "classic")) {
         if (!gconv(GCONV_USER, 0))
@@@@ -868,7 +883,7 @@@@ verify(GConvFunc gconv, int rootok)
     p->pw_shell = login_getcapstr(lc, "shell", p->pw_shell, p->pw_shell);
 # endif
 
-# ifndef USE_PAM
+# if !defined(USE_PAM) && !defined(HAVE_BSDAUTH)
 
 /* restrict_expired */
 #  if defined(HAVE_STRUCT_PASSWD_PW_EXPIRE) || defined(USESHADOW)
@@@@ -1012,7 +1027,7 @@@@ verify(GConvFunc gconv, int rootok)
     }
 #  endif
 
-# endif /* !USE_PAM */
+# endif /* !USE_PAM && !HAVE_BSDAUTH */
 
 /* restrict_nohome */
 # ifdef HAVE_SETUSERCONTEXT
@


1.1
log
@Finish & actually enable BSD authentication support in KDE4.
This overcomes tweaking getpw* calls: KDM and kcheckpass code did it wrong
on OpenBSD anyway (for example, compared the whole pw_passwd with "*",
instead of checking first character only). And we support other types
of password-based authentication as a bonus now (hello, login_-ldap!).

Also, we now create directory for persistent data of KDM by default,
and it's /var/kdm (previously KDM tried to access /var/lib/kdm).
The persistent data means "the name of the previous user" etc.
Previously features like "remember last user logged in" didn't work.

KDE3 bits to follow a bit later.

generic approvement from sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d27 1
a27 1
@@@@ -547,8 +551,21 @@@@ verify(GConvFunc gconv, int rootok)
a37 2
+    logWarn("curuser=%p, curtype=%p, curpass=%p\n", curuser, curtype, curpass);
+    logWarn("EXPANDED: curuser=%s, curtype=%s, curpass=%s\n", curuser, curtype, curpass);
d48 1
a48 1
@@@@ -868,7 +885,7 @@@@ verify(GConvFunc gconv, int rootok)
d57 1
a57 1
@@@@ -1012,7 +1029,7 @@@@ verify(GConvFunc gconv, int rootok)
@

