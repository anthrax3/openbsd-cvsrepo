head	1.5;
access;
symbols
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	experimental:1.1.1.1
	KDE:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2008.07.22.18.38.05;	author martynas;	state dead;
branches;
next	1.4;

1.4
date	2008.07.08.20.42.24;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.22.19.59.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.24.13.23.59;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.22.22.24.33;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.03.22.22.24.33;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove, now that math.h defines INFINITY;  looks good jdixon@@
@
text
@$OpenBSD: patch-kmplot_kmplot_parser_cpp,v 1.4 2008/07/08 20:42:24 martynas Exp $
--- kmplot/kmplot/parser.cpp.orig	Sat Jan  5 00:56:47 2008
+++ kmplot/kmplot/parser.cpp	Tue Jan 22 01:12:39 2008
@@@@ -1035,7 +1038,9 @@@@ bool Parser::tryConstant()
 	CHECK_CONSTANT( "pi", M_PI );
 	CHECK_CONSTANT( PiSymbol, M_PI );
 	CHECK_CONSTANT( "e", M_E );
+#ifndef __OpenBSD__
 	CHECK_CONSTANT( InfinitySymbol, INFINITY );
+#endif
 	
 	return false;
 }
@


1.4
log
@this patch was never right, because '#define tgamma gamma' would
define tgamma that'd compute natural logarithm of gamma function,
and not gamma function itself, therefore completely different values

e.g. parser 4! yields 3.178054 which is obviously wrong

though on vax this patch used to be right.  :-)

tested by, and ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-kmplot_kmplot_parser_cpp,v 1.3 2008/01/22 19:59:28 espie Exp $
@


1.3
log
@add the parts of kdeedu that currently compile
@
text
@d1 1
a1 1
$OpenBSD: patch-kmplot_kmplot_parser_cpp,v 1.2 2007/03/24 13:23:59 espie Exp $
a3 10
@@@@ -46,6 +46,9 @@@@
 #include <assert.h>
 #include <cmath>
 #include <locale.h>
+#ifdef __OpenBSD__
+#define tgamma	gamma
+#endif
 
 double Parser::m_radiansPerAngleUnit = 0;
 
@


1.2
log
@a few minor changes:
- dependencies for graphics.
- enable poppler
- let make plist normalize base PLIST
- reenable factorial and gamma in kmplot.
@
text
@d1 4
a4 5
$OpenBSD: patch-kmplot_kmplot_parser_cpp,v 1.1.1.1 2007/03/22 22:24:33 espie Exp $
--- kmplot/kmplot/parser.cpp.orig	Mon Feb 19 10:53:35 2007
+++ kmplot/kmplot/parser.cpp	Sat Mar 24 13:28:39 2007
@@@@ -45,6 +45,9 @@@@
 #include <math.h>
d7 1
d14 1
a14 1
@@@@ -950,7 +953,9 @@@@ bool Parser::tryConstant()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 7
a9 22
+++ kmplot/kmplot/parser.cpp	Wed Mar 21 08:13:46 2007
@@@@ -100,8 +100,10 @@@@ ScalarFunction Parser::scalarFunctions[ ScalarCount ]=
 	{"floor", 0, floor},				// round down to nearest integer
 	{"ceil", 0, ceil},					// round up to nearest integer
 	{"round", 0, round},				// round to nearest integer
+#ifndef __OpenBSD__
 	{"gamma", 0, tgamma},			// gamma function
 	{"factorial", 0, factorial},		// factorial
+#endif
 	
 	// legendre
 	{"P_0", 0, legendre0},				// lengedre polynomial (n=0)
@@@@ -456,11 +458,13 @@@@ double Parser::fkt( Equation * eq, const Vector & x )
 				break;
 			}
 			
+#ifndef __OpenBSD__
 			case FACT:
 			{
 				*stkptr = factorial(*stkptr);
 				break;
 			}
d11 4
a14 15
 				
 			case FKT_1:
 			{
@@@@ -816,8 +820,10 @@@@ void Parser::heir4()
 				return;
 			addToken(POW);
 		}
+#ifndef __OpenBSD__
 		else if ( match("!") )
 			addToken(FACT);
+#endif
 		else
 			return;
 	}
@@@@ -950,7 +956,9 @@@@ bool Parser::tryConstant()
a22 12
 }
@@@@ -1262,9 +1270,11 @@@@ double larcsin(double x) {
 double larctan(double x) {
 	return atan(x) / Parser::radiansPerAngleUnit();
 }
+#ifndef __OpenBSD__
 double factorial( double x ) {
 	return tgamma(x+1);
 }
+#endif
 double legendre0( double ) {
 	return 1.0;
@


1.1.1.1
log
@partial port of the kde4 beta.
this is totally experimental and not working yet !
it's in so that experimental people can look at it and play with it.
do not even think of building it if you don't know what you're doing.
@
text
@@
