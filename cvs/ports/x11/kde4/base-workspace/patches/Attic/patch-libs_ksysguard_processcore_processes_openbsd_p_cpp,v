head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.04.24.10.42.53;	author zhuk;	state dead;
branches;
next	1.3;

1.3
date	2011.07.08.10.27.23;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.18.18.15.51;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.21.21.47.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove stuff that got renamed, split or moved out of KDE4 SC.
@
text
@$OpenBSD: patch-libs_ksysguard_processcore_processes_openbsd_p_cpp,v 1.3 2011/07/08 10:27:23 dcoppa Exp $
--- libs/ksysguard/processcore/processes_openbsd_p.cpp.orig	Fri Feb 26 19:32:17 2010
+++ libs/ksysguard/processcore/processes_openbsd_p.cpp	Fri Jul  8 11:33:44 2011
@@@@ -284,6 +284,7 @@@@ long long ProcessesLocal::totalPhysicalMemory() {
     return Total /= 1024;
 }
 
+#ifndef _SC_NPROCESSORS_ONLN
 long int KSysGuard::ProcessesLocal::numberProcessorCores()
 {
     int mib[2];
@@@@ -298,6 +299,8 @@@@ long int KSysGuard::ProcessesLocal::numberProcessorCor
         return 1;
     return len;
 }
+#endif
+
 ProcessesLocal::~ProcessesLocal()
 {
    delete d;
@


1.3
log
@Adapt to new OpenBSD kinfo_proc API.

Untested diff, but this is not linked to the build and we suspect
it does not even compile anymore.

'looks plausible' sthen@@
'go ahead' jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-libs_ksysguard_processcore_processes_openbsd_p_cpp,v 1.2 2010/06/18 18:15:51 espie Exp $
@


1.2
log
@this builds, more or less
@
text
@d1 4
a4 13
$OpenBSD$
--- libs/ksysguard/processcore/processes_openbsd_p.cpp.orig	Fri Jun 18 15:39:01 2010
+++ libs/ksysguard/processcore/processes_openbsd_p.cpp	Fri Jun 18 15:44:23 2010
@@@@ -37,6 +37,8 @@@@
 #include <unistd.h>
 #include <stdlib.h>
 
+#define kinfo_proc2 kinfo_proc
+#define KERN_PROC KERN_PROC2
 
 
 
@@@@ -284,6 +286,7 @@@@ long long ProcessesLocal::totalPhysicalMemory() {
d12 1
a12 1
@@@@ -298,6 +301,8 @@@@ long int KSysGuard::ProcessesLocal::numberProcessorCor
@


1.1
log
@update `core' kde4 to 4.0.0.

Warning: thoroughly untested so far, most pieces probably do not work.
@
text
@d2 5
a6 7
--- libs/ksysguard/processcore/processes_openbsd_p.cpp.orig	Sun Jan 20 05:13:58 2008
+++ libs/ksysguard/processcore/processes_openbsd_p.cpp	Sun Jan 20 05:22:23 2008
@@@@ -35,6 +35,7 @@@@
 #endif
 #include <signal.h>
 #include <unistd.h>  
+#include <stdlib.h>
d8 2
a11 3
@@@@ -250,6 +251,14 @@@@ bool ProcessesLocal::setNiceness(long pid, int priorit
     return true;
 }
d13 1
a13 12
+bool ProcessesLocal::setScheduler(long pid, int priorityClass, int priority) 
+{
+    if(priorityClass == KSysGuard::Process::Other || priorityClass == KSysGuard::Process::Batch)
+	    priority = 0;
+    if(pid <= 0) return false; // check the parameters
+	    return false;
+}
+
 bool ProcessesLocal::setIoNiceness(long pid, int priorityClass, int priority) {
     return false; //Not yet supported
 }
@@@@ -275,6 +284,20 @@@@ long long ProcessesLocal::totalPhysicalMemory() {
d17 9
a25 9
+long int KSysGuard::ProcessesLocal::numberProcessorCores()
+{
+    int mib[2];
+    int ncpu;
+    size_t len;
+
+    mib[0] = CTL_HW;
+    mib[1] = HW_NCPU;
+    len = sizeof(ncpu);
a26 4
+    if (sysctl(mib, 2, &ncpu, &len, NULL, 0) == -1 || !len)
+        return 1;
+    return len;
+}
d29 1
a29 1
    delete d;  
@

