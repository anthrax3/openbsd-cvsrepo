head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.12
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.12
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.22
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.20
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.18
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.16
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2014.07.10.13.01.57;	author sthen;	state Exp;
branches;
next	1.4;
commitid	SMVCWtqts0yP0O8D;

1.4
date	2011.07.06.14.51.19;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.18.13.07.02;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.18.12.06.50;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.07.10.26.42;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@include errno.h
@
text
@$OpenBSD: patch-ksysguard_ksysguardd_OpenBSD_ProcessList_c,v 1.4 2011/07/06 14:51:19 dcoppa Exp $
--- ksysguard/ksysguardd/OpenBSD/ProcessList.c.orig	Wed Jul  9 18:47:14 2014
+++ ksysguard/ksysguardd/OpenBSD/ProcessList.c	Thu Jul 10 05:39:15 2014
@@@@ -0,0 +1,501 @@@@
+/*
+    KSysGuard, the KDE System Guard
+
+	Copyright (c) 1999-2000 Hans Petter Bieker<bieker@@kde.org>
+	Copyright (c) 1999 Chris Schlaeger <cs@@kde.org>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+
+*/
+
+#include <config.h>
+
+#include <ctype.h>
+#include <dirent.h>
+#include <pwd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/user.h>
+#include <unistd.h>
+#include <signal.h>
+
+#include "../../gui/SignalIDs.h"
+#include "Command.h"
+#include "ProcessList.h"
+#include "ccont.h"
+#include "ksysguardd.h"
+
+CONTAINER ProcessList = 0;
+
+#define BUFSIZE 1024
+
+typedef struct
+{
+	/* This flag is set for all found processes at the beginning of the
+	 * process list update. Processes that do not have this flag set will
+	 * be assumed dead and removed from the list. The flag is cleared after
+	 * each list update. */
+	int alive;
+
+	/* the process ID */
+	pid_t pid;
+
+	/* the parent process ID */
+	pid_t ppid;
+
+	/* the real user ID */
+	uid_t uid;
+
+	/* the real group ID */
+	gid_t gid;
+
+	/* a character description of the process status */
+	char status[16];
+
+	/* the number of the tty the process owns */
+	int ttyNo;
+
+	/*
+	 * The nice level. The range should be -20 to 20. I'm not sure
+	 * whether this is true for all platforms.
+	 */
+	int niceLevel;
+
+	/*
+	 * The scheduling priority.
+	 */
+	int priority;
+
+	/*
+	 * The total amount of memory the process uses. This includes shared and
+	 * swapped memory.
+	 */
+	unsigned int vmSize;
+
+	/*
+	 * The amount of physical memory the process currently uses.
+	 */
+	unsigned int vmRss;
+
+	/*
+	 * The amount of memory (shared/swapped/etc) the process shares with
+	 * other processes.
+	 */
+	unsigned int vmLib;
+
+	/*
+	 * The number of 1/100 of a second the process has spend in user space.
+	 * If a machine has an uptime of 1 1/2 years or longer this is not a
+	 * good idea. I never thought that the stability of UNIX could get me
+	 * into trouble! ;)
+	 */
+	unsigned int userTime;
+
+	/*
+	 * The number of 1/100 of a second the process has spend in system space.
+	 * If a machine has an uptime of 1 1/2 years or longer this is not a
+	 * good idea. I never thought that the stability of UNIX could get me
+	 * into trouble! ;)
+	 */
+	unsigned int sysTime;
+
+	/* system time as multime of 100ms */
+	int centStamp;
+
+	/* the current CPU load (in %) from user space */
+	double userLoad;
+
+	/* the current CPU load (in %) from system space */
+	double sysLoad;
+
+	/* the name of the process */
+	char name[64];
+
+	/* the command used to start the process */
+	char cmdline[256];
+
+	/* the login name of the user that owns this process */
+ 	char userName[32];
+} ProcessInfo;
+
+static unsigned ProcessCount;
+
+static int
+processCmp(void* p1, void* p2)
+{
+	return (((ProcessInfo*) p1)->pid - ((ProcessInfo*) p2)->pid);
+}
+
+static ProcessInfo*
+findProcessInList(int pid)
+{
+	ProcessInfo key;
+	long index;
+
+	key.pid = pid;
+	if ((index = search_ctnr(ProcessList, processCmp, &key)) < 0)
+		return (0);
+
+	return (get_ctnr(ProcessList, index));
+}
+
+static void
+fillProcessCmdline(char *cmdline, struct kinfo_proc *p, size_t maxlen)
+{
+	int mib[4];
+	int ret = -1;
+	static char *argbuf = NULL;
+	static size_t arglen = 0;
+
+	strlcpy(cmdline, p->p_comm, maxlen);
+
+	if (!argbuf) {
+		arglen = 1024;
+		argbuf = malloc(arglen);
+	}
+	mib[0] = CTL_KERN;
+	mib[1] = KERN_PROC_ARGS;
+	mib[2] = p->p_pid;
+	mib[3] = KERN_PROC_ARGV;
+
+	while (argbuf) {
+		ret = sysctl(mib, 4, argbuf, &arglen, NULL, 0);
+		if (ret == -1 && errno == ENOMEM) {
+			char *n;
+			n = realloc(argbuf, arglen * 2);
+			if (n != 0) {
+				argbuf = n;
+				arglen *= 2;
+				continue;
+			}
+		}
+		break;
+	}
+
+	if (ret != 1) {
+		char **argv;
+		int argc;
+
+		argv = (char **)argbuf;
+		if (argv[0] != NULL)
+			strlcpy(cmdline, argv[0], maxlen);
+		for (argc = 1; argv[argc] != NULL; argc++) {
+			strlcat(cmdline, " ", maxlen);
+			strlcat(cmdline, argv[argc], maxlen);
+		}
+	} else {
+		strlcpy(cmdline, p->p_comm, maxlen);
+	} 
+}
+
+static int
+updateProcess(struct kinfo_proc *p)
+{
+	static char *statuses[] = { "idle","run","sleep","stop","zombie" };
+	
+	ProcessInfo* ps;
+	struct passwd* pwent;
+	pid_t pid = p->p_pid;
+
+	if ((ps = findProcessInList(pid)) == 0)
+	{
+		ps = (ProcessInfo*) malloc(sizeof(ProcessInfo));
+		ps->pid = pid;
+		ps->centStamp = 0;
+		push_ctnr(ProcessList, ps);
+		bsort_ctnr(ProcessList, processCmp);
+	} 
+
+	ps->alive = 1;
+
+        ps->pid       = p->p_pid;
+        ps->ppid      = p->p_ppid;
+        ps->uid       = p->p_uid;
+        ps->gid       = p->p_gid;
+        ps->priority  = p->p_priority;
+        ps->niceLevel = p->p_nice;
+
+        /* this isn't usertime -- it's total time (??) */
+	ps->userTime = p->p_uutime_sec*100+p->p_uutime_usec/100;
+        ps->sysTime  = 0;
+        ps->sysLoad  = 0;
+
+        /* memory, process name, process uid */
+	/* find out user name with process uid */
+	pwent = getpwuid(ps->uid);
+	strlcpy(ps->userName,pwent&&pwent->pw_name? pwent->pw_name:"????",sizeof(ps->userName));
+	ps->userName[sizeof(ps->userName)-1]='\0';
+
+        ps->userLoad = p->p_pctcpu / 100;
+	ps->vmSize   = (p->p_vm_tsize +
+			p->p_vm_dsize +
+			p->p_vm_ssize) * getpagesize();
+	ps->vmRss    = p->p_vm_rssize * getpagesize();
+	strlcpy(ps->name,p->p_comm ? p->p_comm : "????", sizeof(ps->name));
+	strlcpy(ps->status,(p->p_stat>=1)&&(p->p_stat<=5)? statuses[p->p_stat-1]:"????", sizeof(ps->status));
+
+	fillProcessCmdline(ps->cmdline, p, sizeof(ps->cmdline));
+        /* process command line */
+
+	return (0);
+}
+
+static void
+cleanupProcessList(void)
+{
+	ProcessInfo* ps;
+
+	ProcessCount = 0;
+	/* All processes that do not have the active flag set are assumed dead
+	 * and will be removed from the list. The alive flag is cleared. */
+	for (ps = first_ctnr(ProcessList); ps; ps = next_ctnr(ProcessList))
+	{
+		if (ps->alive)
+		{
+			/* Process is still alive. Just clear flag. */
+			ps->alive = 0;
+			ProcessCount++;
+		}
+		else
+		{
+			/* Process has probably died. We remove it from the list and
+			 * destruct the data structure. i needs to be decremented so
+			 * that after i++ the next list element will be inspected. */
+			free(remove_ctnr(ProcessList));
+		}
+	}
+}
+
+/*
+================================ public part ==================================
+*/
+
+void
+initProcessList(struct SensorModul* sm)
+{
+	ProcessList = new_ctnr();
+
+	registerMonitor("ps", "table", printProcessList, printProcessListInfo, sm);
+	registerMonitor("pscount", "integer", printProcessCount, printProcessCountInfo, sm);
+
+	if (!RunAsDaemon)
+	{
+		registerCommand("kill", killProcess);
+		registerCommand("setpriority", setPriority);
+	}
+
+	updateProcessList();
+}
+
+void
+exitProcessList(void)
+{
+	removeMonitor("ps");
+	removeMonitor("pscount");
+
+	if (ProcessList)
+		free (ProcessList);
+}
+
+int
+updateProcessList(void)
+{
+        int mib[6];
+        size_t len;
+        size_t num;
+        struct kinfo_proc *p;
+
+
+        mib[0] = CTL_KERN;
+        mib[1] = KERN_PROC;
+        mib[2] = KERN_PROC_ALL;
+	mib[3] = 0;
+	mib[4] = sizeof(struct kinfo_proc);
+	mib[5] = 0;
+        if (sysctl(mib, 6, NULL, &len, NULL, 0) == -1)
+		return 0;
+	len = 5 * len / 4;
+	p = malloc(len);
+	if (!p)
+		return 0;
+	mib[5] = len/ sizeof(struct kinfo_proc);
+        if (sysctl(mib, 6, p, &len, NULL, 0) == -1)
+		return 0;
+
+	for (num = 0; num < len / sizeof(struct kinfo_proc); num++)
+		updateProcess(&p[num]);
+	free(p);
+	cleanupProcessList();
+
+	return (0);
+}
+
+void
+printProcessListInfo(const char* cmd)
+{
+	fprintf(CurrentClient, "Name\tPID\tPPID\tUID\tGID\tStatus\tUser%%\tSystem%%\tNice\tVmSize\tVmRss\tLogin\tCommand\n");
+	fprintf(CurrentClient, "s\td\td\td\td\tS\tf\tf\td\tD\tD\ts\ts\n");
+}
+
+void
+printProcessList(const char* cmd)
+{
+	ProcessInfo* ps;
+
+	for (ps = first_ctnr(ProcessList); ps; ps = next_ctnr(ProcessList))
+	{
+		fprintf(CurrentClient, "%s\t%ld\t%ld\t%ld\t%ld\t%s\t%.2f\t%.2f\t%d\t%d\t%d\t%s\t%s\n",
+			   ps->name, (long)ps->pid, (long)ps->ppid,
+			   (long)ps->uid, (long)ps->gid, ps->status,
+			   ps->userLoad, ps->sysLoad, ps->niceLevel,
+			   ps->vmSize / 1024, ps->vmRss / 1024, ps->userName, ps->cmdline);
+	}
+}
+
+void
+printProcessCount(const char* cmd)
+{
+	fprintf(CurrentClient, "%d\n", ProcessCount);
+}
+
+void
+printProcessCountInfo(const char* cmd)
+{
+	fprintf(CurrentClient, "Number of Processes\t1\t65535\t\n");
+}
+
+void
+killProcess(const char* cmd)
+{
+	int sig, pid;
+
+	sscanf(cmd, "%*s %d %d", &pid, &sig);
+	switch(sig)
+	{
+	case MENU_ID_SIGABRT:
+		sig = SIGABRT;
+		break;
+	case MENU_ID_SIGALRM:
+		sig = SIGALRM;
+		break;
+	case MENU_ID_SIGCHLD:
+		sig = SIGCHLD;
+		break;
+	case MENU_ID_SIGCONT:
+		sig = SIGCONT;
+		break;
+	case MENU_ID_SIGFPE:
+		sig = SIGFPE;
+		break;
+	case MENU_ID_SIGHUP:
+		sig = SIGHUP;
+		break;
+	case MENU_ID_SIGILL:
+		sig = SIGILL;
+		break;
+	case MENU_ID_SIGINT:
+		sig = SIGINT;
+		break;
+	case MENU_ID_SIGKILL:
+		sig = SIGKILL;
+		break;
+	case MENU_ID_SIGPIPE:
+		sig = SIGPIPE;
+		break;
+	case MENU_ID_SIGQUIT:
+		sig = SIGQUIT;
+		break;
+	case MENU_ID_SIGSEGV:
+		sig = SIGSEGV;
+		break;
+	case MENU_ID_SIGSTOP:
+		sig = SIGSTOP;
+		break;
+	case MENU_ID_SIGTERM:
+		sig = SIGTERM;
+		break;
+	case MENU_ID_SIGTSTP:
+		sig = SIGTSTP;
+		break;
+	case MENU_ID_SIGTTIN:
+		sig = SIGTTIN;
+		break;
+	case MENU_ID_SIGTTOU:
+		sig = SIGTTOU;
+		break;
+	case MENU_ID_SIGUSR1:
+		sig = SIGUSR1;
+		break;
+	case MENU_ID_SIGUSR2:
+		sig = SIGUSR2;
+		break;
+	}
+	if (kill((pid_t) pid, sig))
+	{
+		switch(errno)
+		{
+		case EINVAL:
+			fprintf(CurrentClient, "4\t%d\n", pid);
+			break;
+		case ESRCH:
+			fprintf(CurrentClient, "3\t%d\n", pid);
+			break;
+		case EPERM:
+			fprintf(CurrentClient, "2\t%d\n", pid);
+			break;
+		default:
+			fprintf(CurrentClient, "1\t%d\n", pid);	/* unknown error */
+			break;
+		}
+
+	}
+	else
+		fprintf(CurrentClient, "0\t%d\n", pid);
+}
+
+void
+setPriority(const char* cmd)
+{
+	int pid, prio;
+
+	sscanf(cmd, "%*s %d %d", &pid, &prio);
+	if (setpriority(PRIO_PROCESS, pid, prio))
+	{
+		switch(errno)
+		{
+		case EINVAL:
+			fprintf(CurrentClient, "4\n");
+			break;
+		case ESRCH:
+			fprintf(CurrentClient, "3\n");
+			break;
+		case EPERM:
+		case EACCES:
+			fprintf(CurrentClient, "2\n");
+			break;
+		default:
+			fprintf(CurrentClient, "1\n");	/* unknown error */
+			break;
+		}
+	}
+	else
+		fprintf(CurrentClient, "0\n");
+}
@


1.4
log
@Adapt to new OpenBSD kinfo_proc API.

ok jasper@@, sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-ksysguard_ksysguardd_OpenBSD_ProcessList_c,v 1.3 2006/02/18 13:07:02 espie Exp $
--- ksysguard/ksysguardd/OpenBSD/ProcessList.c.orig	Wed Jul  6 15:42:15 2011
+++ ksysguard/ksysguardd/OpenBSD/ProcessList.c	Wed Jul  6 15:57:03 2011
@@@@ -0,0 +1,500 @@@@
d35 1
@


1.3
log
@better processList: do not filter out init (so tree view works), use
one single sysctl to get the whole list (ouch performance), mark a few
more processes as known...
@
text
@d1 3
a3 3
$OpenBSD: patch-ksysguard_ksysguardd_OpenBSD_ProcessList_c,v 1.2 2006/02/18 12:06:50 espie Exp $
--- ksysguard/ksysguardd/OpenBSD/ProcessList.c.orig	Sat Feb 11 11:45:05 2006
+++ ksysguard/ksysguardd/OpenBSD/ProcessList.c	Sat Feb 18 14:02:58 2006
d164 1
a164 1
+fillProcessCmdline(char *cmdline, struct kinfo_proc2 *p, size_t maxlen)
d213 1
a213 1
+updateProcess(struct kinfo_proc2 *p)
d327 1
a327 1
+        struct kinfo_proc2 *p;
d331 1
a331 1
+        mib[1] = KERN_PROC2;
d334 1
a334 1
+	mib[4] = sizeof(struct kinfo_proc2);
d342 1
a342 1
+	mib[5] = len/ sizeof(struct kinfo_proc2);
d346 1
a346 1
+	for (num = 0; num < len / sizeof(struct kinfo_proc2); num++)
@


1.2
log
@show (sudo) if kdesu is using sudo.
better processlist, using KERN_PROC2, and full command line.
@
text
@d1 1
a1 1
$OpenBSD: patch-ksysguard_ksysguardd_OpenBSD_ProcessList_c,v 1.1 2006/02/07 10:26:42 espie Exp $
d3 2
a4 2
+++ ksysguard/ksysguardd/OpenBSD/ProcessList.c	Sat Feb 18 13:03:33 2006
@@@@ -0,0 +1,505 @@@@
d213 1
a213 1
+updateProcess(int pid)
d219 1
a219 3
+	int mib[6];
+	struct kinfo_proc2 p;
+	size_t len;
d228 1
a228 1
+	}
d232 6
a237 17
+	mib[0] = CTL_KERN;
+	mib[1] = KERN_PROC2;
+	mib[2] = KERN_PROC_PID;
+	mib[3] = pid;
+	mib[4] = sizeof(p);
+	mib[5] = 1;
+
+	len = mib[4];
+	if (sysctl(mib, 6, &p, &len, NULL, 0) == -1 || !len)
+		return -1;
+
+        ps->pid       = p.p_pid;
+        ps->ppid      = p.p_ppid;
+        ps->uid       = p.p_uid;
+        ps->gid       = p.p_gid;
+        ps->priority  = p.p_priority;
+        ps->niceLevel = p.p_nice;
d240 1
a240 1
+	ps->userTime = p.p_uutime_sec*100+p.p_uutime_usec/100;
d250 7
a256 7
+        ps->userLoad = p.p_pctcpu / 100;
+	ps->vmSize   = (p.p_vm_tsize +
+			p.p_vm_dsize +
+			p.p_vm_ssize) * getpagesize();
+	ps->vmRss    = p.p_vm_rssize * getpagesize();
+	strlcpy(ps->name,p.p_comm ? p.p_comm : "????", sizeof(ps->name));
+	strlcpy(ps->status,(p.p_stat>=1)&&(p.p_stat<=5)? statuses[p.p_stat-1]:"????", sizeof(ps->status));
d258 1
a258 1
+	fillProcessCmdline(ps->cmdline, &p, sizeof(ps->cmdline));
d324 1
a324 1
+        int mib[3];
d327 1
a327 1
+        struct kinfo_proc *p;
d331 1
a331 1
+        mib[1] = KERN_PROC;
d333 6
a338 1
+        sysctl(mib, 3, NULL, &len, NULL, 0);
d340 5
a344 1
+        sysctl(mib, 3, p, &len, NULL, 0);
d346 2
a347 2
+	for (num = 0; num < len / sizeof(struct kinfo_proc); num++)
+		updateProcess(p[num].kp_proc.p_pid);
d366 1
a366 2
+	ps = first_ctnr(ProcessList); /* skip 'kernel' entry */
+	for (ps = next_ctnr(ProcessList); ps; ps = next_ctnr(ProcessList))
@


1.1
log
@basic support for processes in ksysguard, taken from FreeBSD.
@
text
@d1 4
a4 4
$OpenBSD$
--- ksysguard/ksysguardd/OpenBSD/ProcessList.c.orig	Sun Feb  5 13:27:16 2006
+++ ksysguard/ksysguardd/OpenBSD/ProcessList.c	Sun Feb  5 13:25:22 2006
@@@@ -0,0 +1,457 @@@@
d163 49
d219 2
a220 2
+	int mib[4];
+	struct kinfo_proc p;
d235 1
a235 1
+	mib[1] = KERN_PROC;
d238 2
d241 2
a242 2
+	len = sizeof (p);
+	if (sysctl(mib, 4, &p, &len, NULL, 0) == -1 || !len)
d245 6
a250 6
+        ps->pid       = p.kp_proc.p_pid;
+        ps->ppid      = p.kp_eproc.e_ppid;
+        ps->uid       = p.kp_eproc.e_ucred.cr_uid;
+        ps->gid       = p.kp_eproc.e_pgid;
+        ps->priority  = p.kp_proc.p_priority;
+        ps->niceLevel = p.kp_proc.p_nice;
d253 1
a253 1
+	ps->userTime = p.kp_proc.p_rtime.tv_sec*100+p.kp_proc.p_rtime.tv_usec/100;
d263 7
a269 7
+        ps->userLoad = p.kp_proc.p_pctcpu / 100;
+	ps->vmSize   = (p.kp_eproc.e_vm.vm_tsize +
+			p.kp_eproc.e_vm.vm_dsize +
+			p.kp_eproc.e_vm.vm_ssize) * getpagesize();
+	ps->vmRss    = p.kp_eproc.e_vm.vm_rssize * getpagesize();
+	strlcpy(ps->name,p.kp_proc.p_comm ? p.kp_proc.p_comm : "????", sizeof(ps->name));
+	strlcpy(ps->status,(p.kp_proc.p_stat>=1)&&(p.kp_proc.p_stat<=5)? statuses[p.kp_proc.p_stat-1]:"????", sizeof(ps->status));
d271 1
a272 4
+	/* the following line causes segfaults on some FreeBSD systems... why?
+		strncpy(ps->cmdline, p.kp_proc.p_args->ar_args, sizeof(ps->cmdline) - 1);
+	*/
+	strcpy(ps->cmdline, "????");
@

