head	1.2;
access;
symbols
	espie:1.1.1.1 kde:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.04.10.01.24.39;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2002.03.23.15.04.03;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.03.23.15.04.03;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Use a common Makefile.inc to remove lots of common parts in all kde dirs.
Remove lame stuff in base3, since run-time auto-detection is working now.
@
text
@#include <lame/lame.h>

lame_global_flags *
lame_init()
{
	return NULL;
}

void
id3tag_init(lame_global_flags *f)
{
}

void 
id3tag_set_album(lame_global_flags *f, const char *s)
{
}

void
id3tag_set_artist(lame_global_flags *f, const char *s)
{
}

void
id3tag_set_title(lame_global_flags *f, const char *s)
{
}

int
lame_init_params(lame_global_flags *f)
{
	return -1;
}

int
lame_encode_buffer_interleaved(lame_global_flags *f, short int pcm[],
	int num_samples, unsigned char *mp3buf, int bufsize)
{
	return -1;
}

int
lame_encode_finish(lame_global_flags *f, unsigned char *mp3buf, int sz)
{
	return -1;
}

int
lame_set_VBR(lame_global_flags *f, vbr_mode m)
{
	return 0;
}

int
lame_set_brate(lame_global_flags *f, int z)
{
	return 0;
}

int
lame_get_brate(const lame_global_flags *f)
{
	return 0;
}

int
lame_set_quality(lame_global_flags *f, int z)
{
	return 0;
}

int 
lame_set_VBR_mean_bitrate_kbps(lame_global_flags *f, int z)
{
	return 0;
}

int
lame_get_VBR_mean_bitrate_kbps(const lame_global_flags *f)
{
	return 0;
}

vbr_mode
lame_get_VBR(const lame_global_flags *f)
{
	return 0;
}

int
lame_set_VBR_min_bitrate_kbps(lame_global_flags *f, int z)
{
	return 0;
}

int
lame_set_VBR_hard_min(lame_global_flags *f, int z)
{
	return 0;
}

int
lame_set_VBR_max_bitrate_kbps(lame_global_flags *f, int z)
{
	return 0;
}

int
lame_set_VBR_q(lame_global_flags *f, int z)
{
	return 0;
}

int
lame_set_mode(lame_global_flags *f, MPEG_mode m)
{
	return 0;
}

int
lame_set_copyright(lame_global_flags *f, int c)
{
	return 0;
}

int
lame_set_original(lame_global_flags *f, int c)
{
	return 0;
}

int
lame_set_strict_ISO(lame_global_flags *f, int s)
{
	return 0;
}

int
lame_set_error_protection(lame_global_flags *f, int s)
{
	return 0;
}

int
lame_set_lowpassfreq(lame_global_flags *f, int s)
{
	return 0;
}

int
lame_set_lowpasswidth(lame_global_flags *f, int s)
{
	return 0;
}

int
lame_set_highpassfreq(lame_global_flags *f, int s)
{
	return 0;
}

int
lame_set_highpasswidth(lame_global_flags *f, int s)
{
	return 0;
}

int
lame_set_bWriteVbrTag(lame_global_flags *f, int s)
{
	return 0;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@kde3, release candidate 3
@
text
@@
