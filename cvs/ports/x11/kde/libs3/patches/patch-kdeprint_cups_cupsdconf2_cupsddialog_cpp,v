head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.36
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.32
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.34
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.30
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.28
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.26
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.24
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.22
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.20
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.18
	OPENBSD_5_0:1.1.0.16
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.14
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.12
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.10
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.10.06.12.47.20;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.1
log
@- enhance CUPS support:
 * correct PATH for foomatic db files (asked by ian@@)
 * make it possible to restart the server from kcontrol (using pgreg
 instead of /proc - from FreeBSD)
 * fix WANTLIB
This changes make it possible to use kcontrol to easily
add/change/configure your printers when using CUPS.

- while here, don't try to strip the kdelibtool script
@
text
@$OpenBSD$
--- kdeprint/cups/cupsdconf2/cupsddialog.cpp.orig	Mon Oct 10 17:06:30 2005
+++ kdeprint/cups/cupsdconf2/cupsddialog.cpp	Sat Oct  6 14:48:54 2007
@@@@ -44,6 +44,7 @@@@
 #include <kio/passdlg.h>
 #include <kguiitem.h>
 #include <kprocess.h>
+#include <qprocess.h>
 
 #include <signal.h>
 #include <cups/cups.h>
@@@@ -69,24 +70,37 @@@@ extern "C"
 
 int getServerPid()
 {
-	QDir	dir("/proc",QString::null,QDir::Name,QDir::Dirs);
-	for (uint i=0;i<dir.count();i++)
-	{
-		if (dir[i] == "." || dir[i] == ".." || dir[i] == "self") continue;
-		QFile	f("/proc/" + dir[i] + "/cmdline");
-		if (f.exists() && f.open(IO_ReadOnly))
+	#if defined(__OpenBSD__)
+		QProcess *proc = new QProcess();
+		proc->addArgument("pgrep");
+		proc->addArgument("cupsd");
+		proc->start();
+		while (proc->isRunning()); //Wait for process to exit
+		QString pidString = proc->readLineStdout();
+		bool ok;
+		int pid = pidString.toInt(&ok);
+		if (ok) return pid;
+		return (-1);
+	#else
+		QDir	dir("/proc",QString::null,QDir::Name,QDir::Dirs);
+		for (uint i=0;i<dir.count();i++)
 		{
-			QTextStream	t(&f);
-			QString	line;
-			t >> line;
-			f.close();
-			if (line.right(5) == "cupsd" ||
-			    line.right(6).left(5) == "cupsd")	// second condition for 2.4.x kernels
-								// which add a null byte at the end
-				return dir[i].toInt();
+			if (dir[i] == "." || dir[i] == ".." || dir[i] == "self") continue;
+			QFile	f("/proc/" + dir[i] + "/cmdline");
+			if (f.exists() && f.open(IO_ReadOnly))
+			{
+				QTextStream	t(&f);
+				QString	line;
+				t >> line;
+				f.close();
+				if (line.right(5) == "cupsd" ||
+				line.right(6).left(5) == "cupsd")	// second condition for 2.4.x kernels
+									// which add a null byte at the end
+					return dir[i].toInt();
+			}
 		}
-	}
-	return (-1);
+		return (-1);
+	#endif
 }
 
 const char* getPassword(const char*)
@
