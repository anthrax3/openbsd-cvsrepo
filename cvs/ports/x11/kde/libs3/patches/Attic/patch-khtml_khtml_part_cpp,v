head	1.5;
access;
symbols
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_3:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2005.03.29.21.18.36;	author espie;	state dead;
branches;
next	1.4;

1.4
date	2005.02.27.07.42.03;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.18.09.46.36;	author espie;	state dead;
branches;
next	1.2;

1.2
date	2004.08.14.18.03.48;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.06.14.23.02;	author brad;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.08.06.14.23.02;	author brad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@most of kde 3.4, will finish getting fixed in tree... ;-)
@
text
@$OpenBSD: patch-khtml_khtml_part_cpp,v 1.4 2005/02/27 07:42:03 brad Exp $
--- khtml/khtml_part.cpp.orig	Sun Feb 27 02:32:27 2005
+++ khtml/khtml_part.cpp	Sun Feb 27 02:33:45 2005
@@@@ -4758,13 +4758,16 @@@@ KHTMLPart *
 KHTMLPart::findFrameParent( KParts::ReadOnlyPart *callingPart, const QString &f, khtml::ChildFrame **childFrame )
 {
 #ifdef DEBUG_FINDFRAME
-  kdDebug(6050) << "KHTMLPart::findFrameParent: this = " << this << " URL = " << m_url << " findFrameParent( " << f << " )" << endl;
+  kdDebug(6050) << "KHTMLPart::findFrameParent: this = " << this << " URL = " << m_url << " name = " << name() << " findFrameParent( " << f << " )" << endl;
 #endif
   // Check access
   KHTMLPart* const callingHtmlPart = dynamic_cast<KHTMLPart *>(callingPart);
 
   if (!checkFrameAccess(callingHtmlPart))
      return 0;
+
+  if (!childFrame && !parentPart() && (name() == f))
+     return this;
 
   FrameIt it = d->m_frames.find( f );
   const FrameIt end = d->m_frames.end();
@


1.4
log
@post-3.3.2-kdelibs-htmlframes2.patch
post-3.3.2-kdelibs-kio.diff
post-3.3.2-kdelibs-kioslave.patch
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@removed patches, better synched global patches.
@
text
@d1 5
a5 67
$OpenBSD: patch-khtml_khtml_part_cpp,v 1.2 2004/08/14 18:03:48 brad Exp $
--- khtml/khtml_part.cpp.orig	Sun May 30 08:24:22 2004
+++ khtml/khtml_part.cpp	Fri Aug 13 16:04:22 2004
@@@@ -734,12 +734,16 @@@@ DOM::Document KHTMLPart::document() cons
     return d->m_doc;
 }
 
-
 KParts::BrowserExtension *KHTMLPart::browserExtension() const
 {
   return d->m_extension;
 }
 
+KParts::BrowserHostExtension *KHTMLPart::browserHostExtension() const
+{
+  return d->m_hostExtension;
+}
+
 KHTMLView *KHTMLPart::view() const
 {
   return d->m_view;
@@@@ -857,30 +861,19 @@@@ QVariant KHTMLPart::crossFrameExecuteScr
     // we always allow these
   }
   else {
-    while (destpart->parentPart())
-      destpart = destpart->parentPart();
-    destpart = destpart->findFrame(target);
-
+    destpart = findFrame(target);
     if (!destpart)
-      destpart = this; // ### doesn't make sense, does it?
+       destpart = this;
   }
 
   // easy way out?
   if (destpart == this)
     return executeScript(DOM::Node(), script);
 
-
   // now compare the domains
-  if (!destpart->htmlDocument().isNull() &&
-      !htmlDocument().isNull())  {
-    DOM::DOMString actDomain = htmlDocument().domain();
-    DOM::DOMString destDomain = destpart->htmlDocument().domain();
+  if (destpart->checkFrameAccess(this))
+    return destpart->executeScript(DOM::Node(), script);
 
-    if (actDomain == destDomain)
-      return destpart->executeScript(DOM::Node(), script);
-  }
-
-
   // eww, something went wrong. better execute it in our frame
   return executeScript(DOM::Node(), script);
 }
@@@@ -3331,7 +3324,7 @@@@ void KHTMLPart::urlSelected( const QStri
   if ( hasTarget )
   {
     // unknown frame names should open in a new window.
-    khtml::ChildFrame *frame = recursiveFrameRequest( cURL, args, false );
+    khtml::ChildFrame *frame = recursiveFrameRequest( this, cURL, args, false );
     if ( frame )
     {
       args.metaData()["referrer"] = d->m_referrer;
@@@@ -4337,6 +4330,7 @@@@ void KHTMLPart::slotChildDocCreated()
 void KHTMLPart::slotChildURLRequest( const KURL &url, const KParts::URLArgs &args )
a6 25
   khtml::ChildFrame *child = frame( sender()->parent() );
+  KHTMLPart *callingHtmlPart = const_cast<KHTMLPart *>(dynamic_cast<const KHTMLPart *>(sender()->parent()));
 
   // TODO: handle child target correctly! currently the script are always executed fur the parent
   QString urlStr = url.url();
@@@@ -4368,7 +4362,7 @@@@ void KHTMLPart::slotChildURLRequest( con
     }
     else if ( frameName != QString::fromLatin1( "_self" ) )
     {
-      khtml::ChildFrame *_frame = recursiveFrameRequest( url, args );
+      khtml::ChildFrame *_frame = recursiveFrameRequest( callingHtmlPart, url, args );
 
       if ( !_frame )
       {
@@@@ -4412,46 +4406,92 @@@@ khtml::ChildFrame *KHTMLPart::frame( con
 
 //#define DEBUG_FINDFRAME
 
-KHTMLPart *KHTMLPart::findFrame( const QString &f )
+bool KHTMLPart::checkFrameAccess(KHTMLPart *callingHtmlPart)
 {
+  if (callingHtmlPart == this)
+    return true; // trivial
+
+  if (htmlDocument().isNull()) {
d8 2
a9 6
-  kdDebug(6050) << "KHTMLPart::findFrame '" << f << "'" << endl;
-  FrameIt it2 = d->m_frames.begin();
-  FrameIt end = d->m_frames.end();
-  for (; it2 != end; ++it2 )
-      kdDebug(6050) << "  - having frame '" << (*it2).m_name << "'" << endl;
+    kdDebug(6050) << "KHTMLPart::checkFrameAccess: Empty part " << this << " URL = " << m_url << endl;
d11 5
a15 11
-  // ### http://www.w3.org/TR/html4/appendix/notes.html#notes-frames
-  ConstFrameIt it = d->m_frames.find( f );
-  if ( it == d->m_frames.end() )
+    return false; // we are empty?
+  }
+
+  // now compare the domains
+  if (callingHtmlPart && !callingHtmlPart->htmlDocument().isNull() &&
+      !htmlDocument().isNull())  {
+    DOM::DOMString actDomain = callingHtmlPart->htmlDocument().domain();
+    DOM::DOMString destDomain = htmlDocument().domain();
d17 1
a17 39
+#ifdef DEBUG_FINDFRAME
+    kdDebug(6050) << "KHTMLPart::checkFrameAccess: actDomain = '" << actDomain.string() << "' destDomain = '" << destDomain.string() << "'" << endl;
+#endif
+
+    if (actDomain == destDomain)
+      return true;
+  }
+#ifdef DEBUG_FINDFRAME
+  else
   {
+    kdDebug(6050) << "KHTMLPart::checkFrameAccess: Unknown part/domain " << callingHtmlPart << " tries to access part " << this << endl;
+  }
+#endif
+  return false;
+}
+
+KHTMLPart *
+KHTMLPart::findFrameParent( KParts::ReadOnlyPart *callingPart, const QString &f, khtml::ChildFrame **childFrame )
+{
 #ifdef DEBUG_FINDFRAME
-    kdDebug(6050) << "KHTMLPart::findFrame frame " << f << " not found" << endl;
+  kdDebug(6050) << "KHTMLPart::findFrameParent: this = " << this << " URL = " << m_url << " findFrameParent( " << f << " )" << endl;
 #endif
-    return 0L;
+  // Check access
+  KHTMLPart *callingHtmlPart = dynamic_cast<KHTMLPart *>(callingPart);
+  
+  if (!checkFrameAccess(callingHtmlPart))
+     return 0;
+
+  FrameIt it = d->m_frames.find( f );
+  FrameIt end = d->m_frames.end();
+  if ( it != end )
+  {
+#ifdef DEBUG_FINDFRAME
+     kdDebug(6050) << "KHTMLPart::findFrameParent: FOUND!" << endl;
+#endif
+     if (childFrame)
+        *childFrame = &(*it);
a18 110
   }
-  else {
+     
+  it = d->m_frames.begin();
+  for (; it != end; ++it )
+  {
     KParts::ReadOnlyPart *p = (*it).m_part;
     if ( p && p->inherits( "KHTMLPart" ))
     {
-#ifdef DEBUG_FINDFRAME
-      kdDebug(6050) << "KHTMLPart::findFrame frame " << f << " is a KHTMLPart, ok" << endl;
-#endif
-      return (KHTMLPart*)p;
+      KHTMLPart *frameParent = static_cast<KHTMLPart*>(p)->findFrameParent(callingPart, f, childFrame);
+      if (frameParent)
+         return frameParent;
     }
-    else
-    {
-#ifdef DEBUG_FINDFRAME
-      if (p)
-        kdWarning() << "KHTMLPart::findFrame frame " << f << " found but isn't a KHTMLPart ! " << p->className() << endl;
-      else
-        kdWarning() << "KHTMLPart::findFrame frame " << f << " found but m_part=0L" << endl;
-#endif
-      return 0L;
-    }
   }
+  return 0;
 }
 
+
+KHTMLPart *KHTMLPart::findFrame( const QString &f )
+{
+  khtml::ChildFrame *childFrame;
+  KHTMLPart *parentFrame = findFrameParent(this, f, &childFrame);
+  if (parentFrame)
+  {
+     KParts::ReadOnlyPart *p = childFrame->m_part;
+     if ( p && p->inherits( "KHTMLPart" ))
+        return static_cast<KHTMLPart *>(p);
+  }
+  return 0;
+}
+
 KParts::ReadOnlyPart *KHTMLPart::currentFrame() const
 {
   KParts::ReadOnlyPart* part = (KParts::ReadOnlyPart*)(this);
@@@@ -4487,37 +4527,29 @@@@ KHTMLPart *KHTMLPart::parentPart()
   return (KHTMLPart *)parent();
 }
 
-khtml::ChildFrame *KHTMLPart::recursiveFrameRequest( const KURL &url, const KParts::URLArgs &args,
-                                                     bool callParent )
+khtml::ChildFrame *KHTMLPart::recursiveFrameRequest( KHTMLPart *callingHtmlPart, const KURL &url, 
+                                                     const KParts::URLArgs &args, bool callParent )
 {
-  FrameIt it = d->m_frames.find( args.frameName );
+#ifdef DEBUG_FINDFRAME
+  kdDebug( 6050 ) << "KHTMLPart::recursiveFrameRequest this = " << this << ", frame = " << args.frameName << ", url = " << url << endl;
+#endif  
+  khtml::ChildFrame *childFrame;
+  KHTMLPart *childPart = findFrameParent(callingHtmlPart, args.frameName, &childFrame);
+  if (childPart)
+  {
+     if (childPart == this)
+        return childFrame;
+     
+     childPart->requestObject( childFrame, url, args );
+     return 0;
+  }
 
-  if ( it != d->m_frames.end() )
-    return &(*it);
-
-  it = d->m_frames.begin();
-  FrameIt end = d->m_frames.end();
-  for (; it != end; ++it )
-    if ( (*it).m_part && (*it).m_part->inherits( "KHTMLPart" ) )
-    {
-      KHTMLPart *childPart = (KHTMLPart *)(KParts::ReadOnlyPart *)(*it).m_part;
-
-      khtml::ChildFrame *res = childPart->recursiveFrameRequest( url, args, false );
-      if ( !res )
-        continue;
-
-      childPart->requestObject( res, url, args );
-      return 0L;
-    }
-
   if ( parentPart() && callParent )
   {
-    khtml::ChildFrame *res = parentPart()->recursiveFrameRequest( url, args );
+     khtml::ChildFrame *res = parentPart()->recursiveFrameRequest( callingHtmlPart, url, args, callParent );
 
-    if ( res )
-      parentPart()->requestObject( res, url, args );
-
-    return 0L;
+     if ( res )
+       parentPart()->requestObject( res, url, args );
   }
 
   return 0L;
@@@@ -4525,7 +4557,7 @@@@ khtml::ChildFrame *KHTMLPart::recursiveF
 
 void KHTMLPart::saveState( QDataStream &stream )
 {
-  kdDebug( 6050 ) << "KHTMLPart::saveState saving URL " << m_url.url() << endl;
+  kdDebug( 6050 ) << "KHTMLPart::saveState this = " << this << " saving URL " << m_url.url() << endl;
d20 2
a21 2
   stream << m_url << (Q_INT32)d->m_view->contentsX() << (Q_INT32)d->m_view->contentsY()
          << (Q_INT32) d->m_view->contentsWidth() << (Q_INT32) d->m_view->contentsHeight() << (Q_INT32) d->m_view->marginWidth() << (Q_INT32) d->m_view->marginHeight();
@


1.2
log
@fix 3 security issues.

http://www.kde.org/info/security/advisory-20040811-1.txt
http://www.kde.org/info/security/advisory-20040811-2.txt
http://www.kde.org/info/security/advisory-20040811-3.txt

ok naddy@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-khtml_khtml_part_cpp was initially added on branch OPENBSD_3_3.
@
text
@d1 266
@


1.1.2.1
log
@Fix Konqueror Referer Leaking Website Authentication Credentials issue

http://marc.theaimsgroup.com/?l=bugtraq&m=105949563522672&w=2
@
text
@a0 54
$OpenBSD$
--- khtml/khtml_part.cpp.orig	Wed Jan 22 17:29:06 2003
+++ khtml/khtml_part.cpp	Mon Aug  4 22:25:57 2003
@@@@ -1316,9 +1316,12 @@@@ void KHTMLPart::begin( const KURL &url, 
   args.yOffset = yOffset;
   d->m_extension->setURLArgs( args );
 
+  if ( d->m_referrer != url.url() )
+      d->m_pageReferrer = d->m_referrer;
+
   KURL ref(url);
   ref.setRef(QString::null);
-  d->m_referrer = ref.protocol().startsWith("http") ? ref.url() : QString::null;
+  d->m_referrer = ref.protocol().startsWith("http") ? ref.url() : QString::fromLatin1( "" );
 
   m_url = url;
   KURL baseurl;
@@@@ -1735,7 +1738,8 @@@@ void KHTMLPart::slotRedirect()
   QString u = d->m_redirectURL;
   d->m_delayRedirect = 0;
   d->m_redirectURL = QString::null;
-  d->m_referrer = QString::null;
+  d->m_pageReferrer = d->m_referrer = "";
+  // SYNC check with ecma/kjs_window.cpp::goURL !
   if ( u.find( QString::fromLatin1( "javascript:" ), 0, false ) == 0 )
   {
     QString script = KURL::decode_string( u.right( u.length() - 11 ) );
@@@@ -4149,6 +4153,26 @@@@ QString KHTMLPart::jsDefaultStatusBarTex
 QString KHTMLPart::referrer() const
 {
    return d->m_referrer;
+}
+
+QString KHTMLPart::pageReferrer() const
+{
+   KURL referrerURL = d->m_pageReferrer;
+   if (referrerURL.isValid())
+   {
+      QString protocol = referrerURL.protocol();
+
+      if ((protocol == "http") ||
+         ((protocol == "https") && (m_url.protocol() == "https")))
+      {
+          referrerURL.setRef(QString::null);
+          referrerURL.setUser(QString::null);
+          referrerURL.setPass(QString::null);
+          return referrerURL.url();
+      }
+   }
+
+   return QString::null;
 }
 
 QString KHTMLPart::lastModified() const
@

