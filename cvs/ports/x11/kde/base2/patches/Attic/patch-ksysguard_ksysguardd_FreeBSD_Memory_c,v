head	1.4;
access;
symbols
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2002.09.11.17.43.42;	author espie;	state dead;
branches;
next	1.3;

1.3
date	2001.12.31.12.30.54;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.13.11.06.03;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.19.14.13.28;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@ditch the files.
@
text
@--- ksysguard/ksysguardd/FreeBSD/Memory.c.orig	Sat Nov 10 06:17:04 2001
+++ ksysguard/ksysguardd/FreeBSD/Memory.c	Mon Dec 31 00:37:47 2001
@@@@ -32,7 +32,11 @@@@
 #include <sys/types.h>
 #include <sys/vmmeter.h>
 #include <unistd.h>
+#ifdef __OpenBSD__
+#include <sys/swap.h>
+#else
 #include <vm/vm_param.h>
+#endif
 
 #include "Command.h"
 #include "Memory.h"
@@@@ -82,15 +86,42 @@@@ updateMemory(void)
 	struct vmtotal p;
 	FILE *file;
 	char buf[256];
+#ifdef __FreeBSD__
 	struct kvm_swap kswap[16];
+#endif
 	int i, swap_count, hlen, pagesize = getpagesize();
 	long blocksize;
 
         len = sizeof (Total);
+#ifdef __OpenBSD__
+        mib[0] = CTL_HW;
+        mib[1] = HW_PHYSMEM;
+        sysctl(mib, 2, &Total, &len, NULL, 0);
+#else
         sysctlbyname("hw.physmem", &Total, &len, NULL, 0);
+#endif
         Total /= 1024;
 
 	/* Borrowed from pstat */ 
+
+#ifdef __OpenBSD__
+	swap_count = swapctl(SWAP_NSWAP, 0, 0);
+	if (swap_count > 0) {
+		struct swapent *swdev;
+		swdev = malloc(swap_count * sizeof(*swdev));
+		if (swdev == NULL)
+			return 0;
+		(void)swapctl(SWAP_STATS, swdev, swap_count);
+		STotal = SUsed = 0;
+		for (i = 0; i < swap_count; i++) {
+		    if (!(swdev[i].se_flags & SWF_ENABLE))
+			continue;
+		    STotal += swdev[i].se_nblks;
+		    SUsed += swdev[i].se_inuse;
+		}
+		SFree = STotal - SUsed;
+	}
+#else
 	swap_count = kvm_getswapinfo(kd, kswap, 16, SWIF_DEV_PREFIX);
 	getbsize(&hlen, &blocksize);
 
@@@@ -101,22 +132,33 @@@@ updateMemory(void)
 		SUsed = CONVERT(kswap[0].ksw_used);
 		SFree = CONVERT(kswap[0].ksw_total - kswap[0].ksw_used);
 	}
+#endif
 
         len = sizeof (Buffers);
+#ifndef __OpenBSD__
         if ((sysctlbyname("vfs.bufspace", &Buffers, &len, NULL, 0) == -1) || !len)
+#endif
                 Buffers = 0; /* Doesn't work under FreeBSD v2.2.x */
         Buffers /= 1024;
 
 
         len = sizeof (Cached);
+#ifndef __OpenBSD__
         if ((sysctlbyname("vm.stats.vm.v_cache_count", &Cached, &len, NULL, 0) == -1) || !len)
+#endif
                 Cached = 0; /* Doesn't work under FreeBSD v2.2.x */
         Cached *= getpagesize() / 1024;
 
 
 	/* initializes the pointer to the vmmeter struct */
 	len = sizeof (p);
+#ifdef __OpenBSD__
+        mib[0] = CTL_VM;
+        mib[1] = VM_METER;
+        sysctl(mib, 2, &p, &len, NULL, 0);
+#else
 	sysctlbyname("vm.vmmeter", &p, &len, NULL, 0);
+#endif
         MFree = p.t_free * getpagesize() / 1024;
         Used = p.t_arm * getpagesize() / 1024 + Buffers + Cached;
 
@


1.3
log
@Update basic kde packages to 2.2.2.
@
text
@@


1.2
log
@No more vm includes
@
text
@d1 11
a11 3
--- ksysguard/ksysguardd/FreeBSD/Memory.c.orig	Fri Jul 28 01:59:28 2000
+++ ksysguard/ksysguardd/FreeBSD/Memory.c	Tue Nov 13 10:00:49 2001
@@@@ -29,7 +29,9 @@@@
d13 8
a20 4
 #include <sys/param.h>
 #include <sys/sysctl.h>
+#ifndef __OpenBSD__
 #include <vm/vm_param.h>
d22 2
a23 5
 #include <sys/vmmeter.h>
 #include <string.h>
 #include <unistd.h>
@@@@ -67,7 +69,13 @@@@ updateMemory(void)
         char buf[256];
d35 22
a56 2
         /* Q&D hack for swap display. Borrowed from xsysinfo-1.4 */
@@@@ -93,20 +101,30 @@@@ updateMemory(void)
d58 5
@


1.1
log
@Update to 2.2.1.
Some patches folded back.
ksysguardd from Sebastian Stark. Doesn't work squeaky-clean yet, but at
least some people can look at it now...
@
text
@d1 13
a13 4
$OpenBSD$
--- ksysguard/ksysguardd/FreeBSD/Memory.c.orig	Mon Sep  3 12:35:22 2001
+++ ksysguard/ksysguardd/FreeBSD/Memory.c	Mon Sep  3 12:37:47 2001
@@@@ -67,7 +67,13 @@@@ updateMemory(void)
d27 1
a27 1
@@@@ -93,20 +99,30 @@@@ updateMemory(void)
@

