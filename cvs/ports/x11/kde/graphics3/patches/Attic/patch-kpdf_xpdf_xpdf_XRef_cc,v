head	1.4;
access;
symbols
	OPENBSD_5_9:1.3.0.24
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.26
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.22
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.20
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.18
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.16
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.04.29.21.10.23;	author zhuk;	state dead;
branches;
next	1.3;
commitid	u9TvebbKy1wgQMr9;

1.3
date	2009.10.25.12.45.53;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.15.15.50.25;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.21.09.46.18;	author ajacoutot;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2009.11.12.02.23.53;	author william;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove KDE3 applications that have well-working KDE4+ counterparts.
@
text
@$OpenBSD: patch-kpdf_xpdf_xpdf_XRef_cc,v 1.3 2009/10/25 12:45:53 kili Exp $
--- kpdf/xpdf/xpdf/XRef.cc.orig	Mon May 14 09:39:30 2007
+++ kpdf/xpdf/xpdf/XRef.cc	Sun Oct 25 13:04:29 2009
@@@@ -52,6 +52,8 @@@@ class ObjectStream { (public)
   // generation 0.
   ObjectStream(XRef *xref, int objStrNumA);
 
+  GBool isOk() { return ok; }
+
   ~ObjectStream();
 
   // Return the object number of this object stream.
@@@@ -67,6 +69,7 @@@@ class ObjectStream { (public)
   int nObjects;			// number of objects in the stream
   Object *objs;			// the objects (length = nObjects)
   int *objNums;			// the object numbers (length = nObjects)
+  GBool ok;
 };
 
 ObjectStream::ObjectStream(XRef *xref, int objStrNumA) {
@@@@ -80,6 +83,7 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   nObjects = 0;
   objs = NULL;
   objNums = NULL;
+  ok = gFalse;
 
   if (!xref->fetch(objStrNum, 0, &objStr)->isStream()) {
     goto err1;
@@@@ -105,6 +109,13 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
     goto err1;
   }
 
+  // this is an arbitrary limit to avoid integer overflow problems
+  // in the 'new Object[nObjects]' call (Acrobat apparently limits
+  // object streams to 100-200 objects)
+  if (nObjects > 1000000) {
+    error(-1, "Too many objects in an object stream");
+    goto err1;
+  }
   objs = new Object[nObjects];
   objNums = (int *)gmallocn(nObjects, sizeof(int));
   offsets = (int *)gmallocn(nObjects, sizeof(int));
@@@@ -161,10 +172,10 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   }
 
   gfree(offsets);
+  ok = gTrue;
 
  err1:
   objStr.free();
-  return;
 }
 
 ObjectStream::~ObjectStream() {
@@@@ -771,19 +782,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
 }
 
 GBool XRef::okToPrint(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permPrint);
+  return (1);
 }
 
 GBool XRef::okToChange(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permChange);
+  return (1);
 }
 
 GBool XRef::okToCopy(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permCopy);
+  return (1);
 }
 
 GBool XRef::okToAddNotes(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permNotes);
+  return (1);
 }
 
 Object *XRef::fetch(int num, int gen, Object *obj) {
@@@@ -837,6 +848,11 @@@@ Object *XRef::fetch(int num, int gen, Object *obj) {
 	delete objStr;
       }
       objStr = new ObjectStream(this, e->offset);
+      if (!objStr->isOk()) {
+	delete objStr;
+	objStr = NULL;
+	goto err;
+      }
     }
     objStr->getObject(e->gen, num, obj);
     break;
@


1.3
log
@Bring back okTo{Print,Change,Copy,AddNotes} diffs, which I
dropped by accident.
@
text
@d1 1
a1 1
$OpenBSD: patch-kpdf_xpdf_xpdf_XRef_cc,v 1.2 2009/10/15 15:50:25 kili Exp $
@


1.2
log
@Add tons of xpdf-related security fixes.

"reads fine" landry@@
@
text
@d1 3
a3 3
$OpenBSD: patch-kpdf_xpdf_xpdf_XRef_cc,v 1.1 2008/05/21 09:46:18 ajacoutot Exp $
--- kpdf/xpdf/xpdf/XRef.cc.orig	Thu Oct 15 16:32:56 2009
+++ kpdf/xpdf/xpdf/XRef.cc	Thu Oct 15 16:35:46 2009
d55 24
@


1.1
log
@- disable the DRM bits from KPDF like it was done for xpdf

from brad@@
@
text
@d1 25
a25 5
$OpenBSD$
--- kpdf/xpdf/xpdf/XRef.cc.orig	Fri Apr 25 18:17:39 2008
+++ kpdf/xpdf/xpdf/XRef.cc	Fri Apr 25 18:18:22 2008
@@@@ -771,19 +771,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
 }
d27 5
a31 4
 GBool XRef::okToPrint(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permPrint);
+  return (1);
 }
d33 12
a44 4
 GBool XRef::okToChange(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permChange);
+  return (1);
 }
d46 2
a47 4
 GBool XRef::okToCopy(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permCopy);
+  return (1);
 }
d49 3
a51 3
 GBool XRef::okToAddNotes(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permNotes);
+  return (1);
d54 13
a66 1
 Object *XRef::fetch(int num, int gen, Object *obj) {
@


1.1.6.1
log
@SECURITY FIX

xpdf patches, from kili@@, thanks!

ok jasper@@
@
text
@a0 3
Security fixes for xpdf


d2 3
a4 54
--- kpdf/xpdf/xpdf/XRef.cc.orig	Mon May 14 09:39:30 2007
+++ kpdf/xpdf/xpdf/XRef.cc	Sun Oct 25 13:01:38 2009
@@@@ -52,6 +52,8 @@@@ class ObjectStream { (public)
   // generation 0.
   ObjectStream(XRef *xref, int objStrNumA);
 
+  GBool isOk() { return ok; }
+
   ~ObjectStream();
 
   // Return the object number of this object stream.
@@@@ -67,6 +69,7 @@@@ class ObjectStream { (public)
   int nObjects;			// number of objects in the stream
   Object *objs;			// the objects (length = nObjects)
   int *objNums;			// the object numbers (length = nObjects)
+  GBool ok;
 };
 
 ObjectStream::ObjectStream(XRef *xref, int objStrNumA) {
@@@@ -80,6 +83,7 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   nObjects = 0;
   objs = NULL;
   objNums = NULL;
+  ok = gFalse;
 
   if (!xref->fetch(objStrNum, 0, &objStr)->isStream()) {
     goto err1;
@@@@ -105,6 +109,13 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
     goto err1;
   }
 
+  // this is an arbitrary limit to avoid integer overflow problems
+  // in the 'new Object[nObjects]' call (Acrobat apparently limits
+  // object streams to 100-200 objects)
+  if (nObjects > 1000000) {
+    error(-1, "Too many objects in an object stream");
+    goto err1;
+  }
   objs = new Object[nObjects];
   objNums = (int *)gmallocn(nObjects, sizeof(int));
   offsets = (int *)gmallocn(nObjects, sizeof(int));
@@@@ -161,10 +172,10 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   }
 
   gfree(offsets);
+  ok = gTrue;
 
  err1:
   objStr.free();
-  return;
 }
 
 ObjectStream::~ObjectStream() {
@@@@ -771,19 +782,19 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
a27 12
@@@@ -837,6 +848,11 @@@@ Object *XRef::fetch(int num, int gen, Object *obj) {
 	delete objStr;
       }
       objStr = new ObjectStream(this, e->offset);
+      if (!objStr->isOk()) {
+	delete objStr;
+	objStr = NULL;
+	goto err;
+      }
     }
     objStr->getObject(e->gen, num, obj);
     break;
@


