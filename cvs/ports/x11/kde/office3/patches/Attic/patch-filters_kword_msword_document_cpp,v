head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.07.11.13.50.21;	author zhuk;	state dead;
branches;
next	1.1;
commitid	7STAl57prz3S8TiW;

1.1
date	2012.12.03.10.32.48;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove KOffice. Unlike KDE3 itself, this one has no use; at least,
there is no support for modern document formats while using own one.

Also, Calligra should hit CVS soon. And this one stands before it
and updating libpqxx.

no objections from espie@@
@
text
@$OpenBSD: patch-filters_kword_msword_document_cpp,v 1.1 2012/12/03 10:32:48 pascal Exp $
--- filters/kword/msword/document.cpp.orig	Sun Dec  2 12:32:15 2012
+++ filters/kword/msword/document.cpp	Sun Dec  2 12:36:40 2012
@@@@ -390,28 +390,28 @@@@ void Document::generateFrameBorder( QDomElement& frame
 {
     // Frame borders
 
-    if ( brcTop.ico != 255 && brcTop.dptLineWidth != 255 ) // see tablehandler.cpp
+    if ( brcTop.cv != 255 && brcTop.dptLineWidth != 255 ) // see tablehandler.cpp
         Conversion::setBorderAttributes( frameElementOut, brcTop, "t" );
-    if ( brcBottom.ico != 255 && brcBottom.dptLineWidth != 255 ) // see tablehandler.cpp
+    if ( brcBottom.cv != 255 && brcBottom.dptLineWidth != 255 ) // see tablehandler.cpp
         Conversion::setBorderAttributes( frameElementOut, brcBottom, "b" );
-    if ( brcLeft.ico != 255 && brcLeft.dptLineWidth != 255 ) // could still be 255, for first column
+    if ( brcLeft.cv != 255 && brcLeft.dptLineWidth != 255 ) // could still be 255, for first column
         Conversion::setBorderAttributes( frameElementOut, brcLeft, "l" );
-    if ( brcRight.ico != 255 && brcRight.dptLineWidth != 255 ) // could still be 255, for last column
+    if ( brcRight.cv != 255 && brcRight.dptLineWidth != 255 ) // could still be 255, for last column
         Conversion::setBorderAttributes( frameElementOut, brcRight, "r" );
 
     // Frame background brush (color and fill style)
-    if ( shd.icoFore != 0 || shd.icoBack != 0 )
+    if ( shd.cvFore != 0 || shd.cvBack != 0 )
     {
-        // If ipat = 0 (solid fill), icoBack is the background color.
-        // But otherwise, icoFore is the one we need to set as bkColor
-        // (and icoBack is usually white; it's the other colour of the pattern,
+        // If ipat = 0 (solid fill), cvBack is the background color.
+        // But otherwise, cvFore is the one we need to set as bkColor
+        // (and cvBack is usually white; it's the other colour of the pattern,
         // something that we can't set in Qt apparently).
-        int bkColor = shd.ipat ? shd.icoFore : shd.icoBack;
-        kdDebug(30513) << "generateFrameBorder: " << " icoFore=" << shd.icoFore << " icoBack=" << shd.icoBack << " ipat=" << shd.ipat << " -> bkColor=" << bkColor << endl;
+        int bkColor = shd.ipat ? shd.cvFore : shd.cvBack;
+        kdDebug(30513) << "generateFrameBorder: " << " cvFore=" << shd.cvFore << " cvBack=" << shd.cvBack << " ipat=" << shd.ipat << " -> bkColor=" << bkColor << endl;
 
         // Reverse-engineer MSWord's own hackery: it models various gray levels
         // using dithering. But this looks crappy with Qt. So we go back to a QColor.
-        bool grayHack = ( shd.ipat && shd.icoFore == 1 && shd.icoBack == 8 );
+        bool grayHack = ( shd.ipat && shd.cvFore == 1 && shd.cvBack == 8 );
         if ( grayHack )
         {
             bool ok;
@


1.1
log
@Adapt to wv2 changes; sorry for the breakage.

same diff from brad@@
@
text
@d1 1
a1 1
$OpenBSD$
@

