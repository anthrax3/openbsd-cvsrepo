head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2002.12.02.16.27.21;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2002.11.29.14.18.16;	author brad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to 3.0.5
i18n not checked yet...
@
text
@$OpenBSD: patch-lanbrowsing_kio_lan_kio_lan_cpp,v 1.1 2002/11/29 14:18:16 brad Exp $
--- lanbrowsing/kio_lan/kio_lan.cpp.orig	Thu Jan  3 15:34:12 2002
+++ lanbrowsing/kio_lan/kio_lan.cpp	Sun Nov 24 04:26:40 2002
@@@@ -176,13 +176,14 @@@@ int LANProtocol::lanReadDataFromServer()
 
    char *currentBuf=receiveBuffer;
    int bytesLeft=receivedBytes;
-   int tmpIP;
    //this should be large enough for a name
-   char tmpName[1024];
+   char tmpName[4*1024];
    //this should be large enough for the hostname
-   char tmpHostname[512];
+   char tmpHostname[4*1024];
    while (bytesLeft>0)
    {
+      int tmpIP=2;
+      tmpName[0]='\0';
       if ((memchr(currentBuf,0,bytesLeft)==0) || (memchr(currentBuf,int('\n'),bytesLeft)==0))
       {
          delete [] receiveBuffer;
@@@@ -190,17 +191,19 @@@@ int LANProtocol::lanReadDataFromServer()
          return 0;
       };
       kdDebug(7101)<<"LANProtocol::lanReadDataFromServer: processing "<<currentBuf;
-      sscanf(currentBuf,"%u %s\n",&tmpIP,tmpName);
       //since we check for 0 and \n with memchr() we can be sure
       //at this point that tmpBuf is correctly terminated
       int length=strlen(currentBuf)+1;
+      if (length<(4*1024))
+         sscanf(currentBuf,"%u %s\n",&tmpIP,tmpName);
+
       bytesLeft-=length;
       currentBuf+=length;
-      if ((bytesLeft==0) && (strstr(tmpName,"succeeded")!=0) && ((tmpIP==0) ||(tmpIP==1)))
+      if ((bytesLeft==0) && ((tmpIP==0) ||(tmpIP==1)) && (strstr(tmpName,"succeeded")!=0))
       {
          kdDebug(7101)<<"LANProtocol::lanReadDataFromServer: succeeded"<<endl;
       }
-      else
+      else if (tmpIP!=2)
       {
          kdDebug(7101)<<"LANProtocol::lanReadDataFromServer: listing host: "<<tmpName<<" with ip: "<<tmpIP<<endl;
          UDSAtom atom;
@@@@ -344,13 +347,14 @@@@ int LANProtocol::rlanReadDataFromServer(
 
    char *currentBuf=receiveBuffer;
    int bytesLeft=receivedBytes;
-   int tmpIP;
    //this should be large enough for a name
-   char tmpName[1024];
+   char tmpName[4*1024];
    //this should be large enough for the hostname
-   char tmpHostname[512];
+   char tmpHostname[4*1024];
    while (bytesLeft>0)
    {
+      int tmpIP=2;
+      tmpName[0]='\0';
       if ((memchr(currentBuf,0,bytesLeft)==0) || (memchr(currentBuf,int('\n'),bytesLeft)==0))
       {
          delete [] receiveBuffer;
@@@@ -358,17 +362,19 @@@@ int LANProtocol::rlanReadDataFromServer(
          return 0;
       };
       kdDebug(7101)<<"RLANProtocol::readDataFromServer: processing "<<currentBuf;
-      sscanf(currentBuf,"%u %s\n",&tmpIP,tmpName);
       //since we check for 0 and \n with memchr() we can be sure
       //at this point that tmpBuf is correctly terminated
       int length=strlen(currentBuf)+1;
+      if (length<(4*1024))
+         sscanf(currentBuf,"%u %s\n",&tmpIP,tmpName);
+
       bytesLeft-=length;
       currentBuf+=length;
-      if ((bytesLeft==0) && (strstr(tmpName,"succeeded")!=0) && ((tmpIP==0) ||(tmpIP==1)))
+      if ((bytesLeft==0) && ((tmpIP==0) ||(tmpIP==1)) && (strstr(tmpName,"succeeded")!=0) )
       {
          kdDebug(7101)<<"RLANProtocol::readDataFromServer: succeeded"<<endl;
       }
-      else
+      else if (tmpIP!=2)
       {
          kdDebug(7101)<<"RLANProtocol::readDataFromServer: listing host: "<<tmpName<<" with ip: "<<tmpIP<<endl;
          UDSAtom atom;
@@@@ -436,7 +442,7 @@@@ int LANProtocol::checkHost(const QString
          delete hostInfo;
          return 0;
       }
-      memcpy(&ip, hp->h_addr, hp->h_length);
+      memcpy(&ip, hp->h_addr, sizeof(ip));
 
       for (int i=0; i<KIOLAN_MAX; i++)
       {
@


1.1
log
@Fix 3 vulnerabilites.

The resLISa daemon contains a buffer overflow vulnerability which
potentially enables any local user to obtain access to a raw socket
if 'reslisa' is installed SUID root.  This vulnerability was
discovered by the iDEFENSE security team and Texonet.

The lisa daemon contains a buffer overflow vulnerability which
potentially enables any local user, as well any any remote attacker
on the LAN who is able to gain control of the LISa port (7741 by
default), to obtain root privileges.

In addition, a remote attacker potentially may be able to gain
access to a victim's account by using an "lan://" URL in an HTML
page or via another KDE application.  These vulnerabilities were
discovered by Olaf Kirch at SuSE Linux AG.

http://www.kde.org/info/security/advisory-20021111-2.txt
@
text
@d1 1
a1 1
$OpenBSD$
@

