head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.04.15.12.08.06;	author dcoppa;	state dead;
branches;
next	1.2;

1.2
date	2013.11.25.10.31.04;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.12.13.48.39;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
Update to xmobar-0.20.1
diff by Jack Szmidt with tweaks by me
@
text
@$OpenBSD: patch-src_Actions_hs,v 1.2 2013/11/25 10:31:04 dcoppa Exp $

Due to our regex(3) library not supporting GNU extensions, xmobar
immediately fails at startup:

xmobar: user error (Text.Regex.Posix.String died: (ReturnCode 13,"repetition-operator operand invalid"))

when using the StdinReader plugin.

So do what's required with Text.Regex.PCRE instead of Text.Regex.Posix.

Code contributed by Alexander Polakov, thanks!

--- src/Actions.hs.orig	Wed Jun  5 00:37:16 2013
+++ src/Actions.hs	Fri Jul 12 14:47:17 2013
@@@@ -14,7 +14,8 @@@@ module Actions (Action(..), runAction, stripActions) w
 
 import System.Process (system)
 import Control.Monad (void)
-import Text.Regex (subRegex, mkRegex)
+import Text.Regex.PCRE
+import Data.Array ((!))
 
 data Action = Spawn String
                 deriving (Eq)
@@@@ -23,5 +24,41 @@@@ runAction :: Action -> IO ()
 runAction (Spawn s) = void $ system (s ++ "&")
 
 stripActions :: String -> String
-stripActions s = subRegex actionRegex s "[action=\1]\2[action]"
-  where actionRegex = mkRegex "<action=([^>])*>(.+)</action>"
+stripActions s = subRegex actionRegex s "[action=\\1]\\2[action]"
+  where actionRegex = makeRegex "<action=([^>]*)>(.+?)</action>"
+
+-- copy-pasted from regex-compat
+subRegex :: Regex                          -- ^ Search pattern
+         -> String                         -- ^ Input string
+         -> String                         -- ^ Replacement text
+         -> String                         -- ^ Output string
+subRegex _ "" _ = ""
+subRegex regexp inp repl =
+  let compile _i str [] = \ _m ->  (str++)
+      compile i str (("\\",(off,len)):rest) =
+        let i' = off+len
+            pre = take (off-i) str
+            str' = drop (i'-i) str
+        in if null str' then \ _m -> (pre ++) . ('\\':)
+             else \  m -> (pre ++) . ('\\' :) . compile i' str' rest m
+      compile i str ((xstr,(off,len)):rest) =
+        let i' = off+len
+            pre = take (off-i) str
+            str' = drop (i'-i) str
+            x = read xstr
+        in if null str' then \ m -> (pre++) . ((fst (m!x))++)
+             else \ m -> (pre++) . ((fst (m!x))++) . compile i' str' rest m
+      compiled :: MatchText String -> String -> String
+      compiled = compile 0 repl findrefs where
+        -- bre matches a backslash then capture either a backslash or some digits
+        bre = makeRegex "\\\\(\\\\|[0-9]+)" :: Regex
+        findrefs = map (\m -> (fst (m!1),snd (m!0))) (matchAllText bre repl)
+      go _i str [] = str
+      go i str (m:ms) =
+        let (_,(off,len)) = m!0
+            i' = off+len
+            pre = take (off-i) str
+            str' = drop (i'-i) str
+        in if null str' then pre ++ (compiled m "")
+             else pre ++ (compiled m (go i' str' ms))
+  in go 0 inp (matchAllText regexp inp)   
@


1.2
log
@Update to xmobar-0.19
@
text
@d1 1
a1 1
$OpenBSD: patch-src_Actions_hs,v 1.1 2013/07/12 13:48:39 dcoppa Exp $
@


1.1
log
@Due to our regex(3) library not supporting GNU extensions, xmobar
immediately fails at startup:

xmobar: user error (Text.Regex.Posix.String died: (ReturnCode 13,"repetition-operator operand invalid"))

when using the StdinReader plugin.

So do what's required with Text.Regex.PCRE instead of Text.Regex.Posix.

Code contributed by Alexander Polakov, thanks!
@
text
@d1 1
a1 1
$OpenBSD$
d31 1
a31 1
-  where actionRegex = mkRegex "<action=([^>])*>(.+?)</action>"
@

