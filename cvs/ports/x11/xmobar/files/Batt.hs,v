head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.4
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.16
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.08.10.08.50.24;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	TPidjAO2G06MaEBf;

1.3
date	2012.10.02.10.27.56;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.12.21.42.07;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.17.14.55.21;	author kili;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
Update to xmobar-0.24.2
@
text
@module Plugins.Monitors.Batt where

import Plugins.Monitors.Common
import Plugins.Monitors.Batt.Binding

battConfig :: IO MConfig
battConfig = mkMConfig
       "Batt: <left>" -- default template
       ["left", "leftbar", "minleft", "status"] -- percent left, progress bar, minutes left, status

runBatt :: [String] -> Monitor String
runBatt _ = do
        mpowerinfo <- io getApmPowerInfo
        case mpowerinfo of
                Nothing -> parseTemplate $ take 4 $ repeat "N/A"
                Just powerinfo -> do
                        left <- renderLeft powerinfo
                        leftbar <- renderLeftBar powerinfo
                        minleft <- renderMinLeft powerinfo
                        status <- renderStatus powerinfo
                        parseTemplate ( left : leftbar : minleft : status : [] )

renderLeft :: ApmPowerInfo -> Monitor String
renderLeft powerinfo = case (apmBatteryState powerinfo) of
        BatAbsent  -> return []
        BatUnknown -> return []
        _          -> return $ (show $ apmBatteryPercent powerinfo) ++ "%"

renderLeftBar :: ApmPowerInfo -> Monitor String
renderLeftBar powerinfo = case (apmBatteryState powerinfo) of
        BatAbsent  -> render 0
        BatUnknown -> render 0
        _          -> render $ fromIntegral (apmBatteryPercent powerinfo)
        where
                render x = showPercentBar x (x / 100)

renderMinLeft :: ApmPowerInfo -> Monitor String
renderMinLeft powerinfo = case (apmAcState powerinfo) of
        AcOnline  -> return []
        AcUnknown -> return []
        _         -> return $ (show $ apmMinutesLeft powerinfo) ++ "min"

renderStatus :: ApmPowerInfo -> Monitor String
renderStatus powerinfo = return.show $ apmAcState powerinfo
@


1.3
log
@Fix redundancy warning
@
text
@d13 9
a21 9
	mpowerinfo <- io getApmPowerInfo
	case mpowerinfo of
		Nothing -> parseTemplate $ take 4 $ repeat "N/A"
		Just powerinfo -> do
			left <- renderLeft powerinfo
			leftbar <- renderLeftBar powerinfo
			minleft <- renderMinLeft powerinfo
			status <- renderStatus powerinfo
			parseTemplate ( left : leftbar : minleft : status : [] )
d25 3
a27 3
	BatAbsent  -> return []
	BatUnknown -> return []
	_          -> return $ (show $ apmBatteryPercent powerinfo) ++ "%"
d31 5
a35 5
	BatAbsent  -> render 0
	BatUnknown -> render 0
	_          -> render $ fromIntegral (apmBatteryPercent powerinfo)
	where
		render x = showPercentBar x (x / 100)
d39 3
a41 3
	AcOnline  -> return []
	AcUnknown -> return []
	_         -> return $ (show $ apmMinutesLeft powerinfo) ++ "min"
@


1.2
log
@
Update to xmobar-0.14.
Fix comment into files/Batt.hs.
Adjust WANTLIB.
Use lynx from base instead of curl for the weather plugin.

OK kili@@
@
text
@a2 2
import Control.Monad

@


1.1
log
@Update to to version 0.11.1.

Add battery monitor support for OpenBSD.

From maintainer Jona Joachim.
@
text
@d11 1
a11 1
       ["left", "leftbar", "minleft", "status"] -- progress bar, percent left, minutes left, status
@

