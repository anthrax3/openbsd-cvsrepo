head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.4
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.08.10.08.50.24;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	TPidjAO2G06MaEBf;

1.2
date	2012.09.02.22.01.26;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.17.14.55.21;	author kili;	state Exp;
branches;
next	;


desc
@@


1.3
log
@
Update to xmobar-0.24.2
@
text
@{-# LANGUAGE CPP, ForeignFunctionInterface #-}

module Plugins.Monitors.Batt.Binding (
        getApmPowerInfo,
        ApmPowerInfo (..),
        AcState (..), BatteryState(..)
) where

import Foreign
import Foreign.C

#include <sys/types.h>
#include <machine/apmvar.h>
type CApmPowerInfo = ()
foreign import ccall "apm.h get_power_info"
        c_getPowerInfo :: Ptr CApmPowerInfo -> IO CInt

data BatteryState = BatHigh | BatLow | BatCritical | BatCharging | BatAbsent | BatUnknown
        deriving (Show,Eq)

data AcState = AcOnline | AcOffline | AcBackup | AcUnknown
        deriving (Eq)

instance Show AcState where
        show AcOnline = "online"
        show AcOffline = "offline"
        show AcBackup = "backup"
        show AcUnknown = "unknown"

data ApmPowerInfo = ApmPowerInfo {
        apmBatteryState   :: BatteryState,
        apmAcState        :: AcState,
        apmBatteryPercent :: Int,
        apmMinutesLeft    :: Int
} deriving (Show, Eq)

getApmPowerInfo :: IO (Maybe ApmPowerInfo)
getApmPowerInfo =
  allocaBytes (#size struct apm_power_info) $ \powerinfo -> do
    res <- c_getPowerInfo powerinfo
    if res == -1 then return Nothing
      else do
        bstate  <- (#peek struct apm_power_info, battery_state) powerinfo
        acstate <- (#peek struct apm_power_info, ac_state) powerinfo
        blife   <- (#peek struct apm_power_info, battery_life) powerinfo
        minleft <- (#peek struct apm_power_info, minutes_left) powerinfo
        return $ Just ApmPowerInfo
                {
                        apmBatteryState   = transBatState (bstate :: CUChar),
                        apmAcState        = transAcState (acstate :: CUChar),
                        apmBatteryPercent = fromIntegral (blife :: CUChar),
                        apmMinutesLeft    = fromIntegral (minleft :: CUInt)
                }

transBatState :: Integral a => a -> BatteryState
transBatState s = case s of
        (#const APM_BATT_HIGH)      -> BatHigh
        (#const APM_BATT_LOW)       -> BatLow
        (#const APM_BATT_CRITICAL)  -> BatCritical
        (#const APM_BATT_CHARGING)  -> BatCharging
        (#const APM_BATTERY_ABSENT) -> BatAbsent
        _                           -> BatUnknown

transAcState :: Integral a => a -> AcState
transAcState s = case s of
        (#const APM_AC_ON)     -> AcOnline
        (#const APM_AC_OFF)    -> AcOffline
        (#const APM_AC_BACKUP) -> AcBackup
        _                      -> AcUnknown

{- vim: set filetype=haskell : -}
@


1.2
log
@Add fixes for ghc-7.4.
@
text
@d4 3
a6 3
	getApmPowerInfo,
	ApmPowerInfo (..),
	AcState (..), BatteryState(..)
d16 1
a16 1
	c_getPowerInfo :: Ptr CApmPowerInfo -> IO CInt
d19 1
a19 1
	deriving (Show,Eq)
d22 1
a22 1
	deriving (Eq)
d25 4
a28 4
	show AcOnline = "online"
	show AcOffline = "offline"
	show AcBackup = "backup"
	show AcUnknown = "unknown"
d31 4
a34 4
	apmBatteryState   :: BatteryState,
	apmAcState        :: AcState,
	apmBatteryPercent :: Int,
	apmMinutesLeft    :: Int
d48 6
a53 6
		{
			apmBatteryState   = transBatState (bstate :: CUChar),
			apmAcState        = transAcState (acstate :: CUChar),
			apmBatteryPercent = fromIntegral (blife :: CUChar),
			apmMinutesLeft    = fromIntegral (minleft :: CUInt)
		}
d57 6
a62 6
	(#const APM_BATT_HIGH)      -> BatHigh
	(#const APM_BATT_LOW)       -> BatLow
	(#const APM_BATT_CRITICAL)  -> BatCritical
	(#const APM_BATT_CHARGING)  -> BatCharging
	(#const APM_BATTERY_ABSENT) -> BatAbsent
	_                           -> BatUnknown
d66 4
a69 4
	(#const APM_AC_ON)     -> AcOnline
	(#const APM_AC_OFF)    -> AcOffline
	(#const APM_AC_BACKUP) -> AcBackup
	_                      -> AcUnknown
@


1.1
log
@Update to to version 0.11.1.

Add battery monitor support for OpenBSD.

From maintainer Jona Joachim.
@
text
@d12 1
@

