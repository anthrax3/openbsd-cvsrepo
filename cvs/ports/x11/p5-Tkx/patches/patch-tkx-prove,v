head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.4
	OPENBSD_5_8_BASE:1.1.1.1
	stu_20150507:1.1.1.1
	stu:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.05.08.03.11.18;	author stu;	state Exp;
branches
	1.1.1.1;
next	;
commitid	37ZjIwYXzrgDWvPr;

1.1.1.1
date	2015.05.08.03.11.18;	author stu;	state Exp;
branches;
next	;
commitid	37ZjIwYXzrgDWvPr;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- tkx-prove.orig	Sun Nov 29 15:34:20 2009
+++ tkx-prove	Thu May  7 05:46:07 2015
@@@@ -112,8 +112,7 @@@@ sub set_dir {
     }, "$dir/t");
 }
 
-use Test::Harness::Straps;
-my $strap = Test::Harness::Straps->new;
+use TAP::Parser;
 
 $tree->g_bind("<<TreeviewSelect>>", \&tree_select);
 
@@@@ -134,16 +133,19 @@@@ sub run_tests {
 	$tree->set($item, "time", "-");
 	Tkx::update();
 
-	my $cmd = $strap->_command_line("$dir/$test");
-	my $before = time;
-	my @@output = qx($cmd);
-	my $used = time - $before;
-	my $status = $?;
-	my %res = $strap->analyze($item, \@@output);
-	$res{output} = join("", @@output);
-	$res{start_time} = $before;
+	my %res;
+	my $parser = TAP::Parser->new( { source => "$dir/$test" } );
+	while ( my $pres = $parser->next ) {
+		$res{output} .= $pres->as_string . "\n";
+	}
+	my $used = $parser->end_time - $parser->start_time;
 	$res{used_time} = sprintf "%.03f", $used;
-	$res{status} = $status;
+	$res{skip_all} = $parser->skipped;
+	$res{passing} = ($parser->passed == $parser->tests_run);
+	$res{status} = $parser->exit;
+	$res{max} = $parser->tests_run;
+	$res{ok} = $parser->passed;
+
 	#use Data::Dump; print Data::Dump::dump(\%res), "\n";
 	$result{$item} = \%res;
 
@


1.1.1.1
log
@Import p5-Tkx 1.09.

The Tkx module provides yet another Tk interface for Perl.  Tk is a GUI
toolkit tied to the Tcl language, and Tkx provides a bridge to Tcl that
allows Tk based applications to be written in Perl.

The main idea behind Tkx is that it is a very thin wrapper on top of
Tcl, i.e. that what you get is exactly the behaviour you read about in
the Tcl/Tk documentation with no surprises added by the Perl layer.

For a gentle introduction please read the Tkx::Tutorial.

The tkx-ed example needs the bwidget OpenBSD package.

ok sthen@@
@
text
@@
