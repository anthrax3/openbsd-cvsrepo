head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	jasper_20120205:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2017.02.02.08.00.43;	author tb;	state Exp;
branches;
next	1.12;
commitid	sKB3E2ikuTmqWLy0;

1.12
date	2015.04.02.14.27.20;	author jasper;	state dead;
branches;
next	1.11;
commitid	weIlTm9rYce6oSIk;

1.11
date	2014.03.12.07.56.52;	author jasper;	state Exp;
branches;
next	1.10;

1.10
date	2014.03.09.20.03.43;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.08.10.23.13;	author jasper;	state dead;
branches;
next	1.8;

1.8
date	2012.10.10.07.20.16;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.08.11.26.48;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.08.11.12.54;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.08.10.33.39;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.08.10.20.50;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.08.10.07.41;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.03.20.27.26;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2012.05.02.07.37.10;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.05.02.07.37.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Suppress printing :00 seconds of remaining battery lifetime, as apm(4)'s
estimate only has a granularity of minutes.

ok jasper
@
text
@$OpenBSD$
--- src/print_battery_info.c.orig	Thu Feb  2 05:15:15 2017
+++ src/print_battery_info.c	Thu Feb  2 05:14:43 2017
@@@@ -482,7 +482,7 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
     /* These OSes report battery stats in whole percent. */
     integer_battery_capacity = true;
 #endif
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__) || defined(__OpenBSD__)
     /* These OSes report battery time in minutes. */
     hide_seconds = true;
 #endif
@


1.12
log
@- update to i3status 2.9
http://permalink.gmane.org/gmane.comp.window-managers.i3.announce/11
@
text
@d1 12
a12 19
$OpenBSD: patch-src_print_battery_info_c,v 1.11 2014/03/12 07:56:52 jasper Exp $

From 52814295a0b3a0785631256e9e2dc6b8139e2be8 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Mon, 10 Mar 2014 09:22:47 +0000
Subject: For the %percentage display of batteries, drop the leading '0' for values < 10.

--- src/print_battery_info.c.orig	Sun Jan  5 12:34:07 2014
+++ src/print_battery_info.c	Wed Mar 12 08:55:26 2014
@@@@ -284,7 +284,8 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
 	}
 
 	(void)snprintf(statusbuf, sizeof(statusbuf), "%s", BATT_STATUS_NAME(status));
-        (void)snprintf(percentagebuf, sizeof(percentagebuf), "%02d%%", apm_info.battery_life);
+	/* integer_battery_capacity is implied as battery_life is already in whole numbers. */
+	(void)snprintf(percentagebuf, sizeof(percentagebuf), "%.00d%%", apm_info.battery_life);
 
 	if (status == CS_DISCHARGING && low_threshold > 0) {
 		if (strncmp(threshold_type, "percentage", strlen(threshold_type)) == 0
@


1.11
log
@sync with what has been pushed upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.10 2014/03/09 20:03:43 jasper Exp $
@


1.10
log
@For the %percentage display of batteries, drop the leading '0' for values < 10.
@
text
@d1 1
a1 1
$OpenBSD$
d3 4
a6 1
For the %percentage display of batteries, drop the leading '0' for values < 10.
d9 2
a10 2
+++ src/print_battery_info.c	Sat Feb 15 14:41:43 2014
@@@@ -284,7 +284,7 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
d15 2
a16 1
+        (void)snprintf(percentagebuf, sizeof(percentagebuf), "%.00d%%", apm_info.battery_life);
@


1.9
log
@- update to i3status-2.7
* all functional patches have been committed upstream.

tested by and ok rpe@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.8 2012/10/10 07:20:16 jasper Exp $
d3 1
a3 4
From 8da0452d2c51826fd871520f7a8ba7a43a59401c Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@openbsd.org>
Date: Mon, 08 Oct 2012 11:30:38 +0000
Subject: Various fixes for the OpenBSD section of the battery backend.
d5 3
a7 32
- fix the battery status printing in %status.
- fix remaining time when we're charging.
- use colors to indicate battery status.
- small cleanups.

--- src/print_battery_info.c.orig	Wed Oct  3 13:44:44 2012
+++ src/print_battery_info.c	Mon Oct  8 15:23:17 2012
@@@@ -228,7 +228,7 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
 	 * probing acpi(4) devices.
 	 */
 	struct apm_power_info apm_info;
-	int apm_fd, ac_status, charging;
+	int apm_fd;
 
 	apm_fd = open("/dev/apm", O_RDONLY);
 	if (apm_fd < 0) {
@@@@ -249,26 +249,41 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
 
 	switch(apm_info.ac_state) {
 	case APM_AC_OFF:
-		ac_status = CS_DISCHARGING;
+		status = CS_DISCHARGING;
 		break;
 	case APM_AC_ON:
-		ac_status = CS_CHARGING;
+		status = CS_CHARGING;
 		break;
 	default:
 		/* If we don't know what's going on, just assume we're discharging. */
-		ac_status = CS_DISCHARGING;
+		status = CS_DISCHARGING;
 		break;
d11 2
a12 28
         (void)snprintf(percentagebuf, sizeof(percentagebuf), "%02d%%", apm_info.battery_life);
 
+	if (status == CS_DISCHARGING && low_threshold > 0) {
+		if (strncmp(threshold_type, "percentage", strlen(threshold_type)) == 0
+		    && apm_info.battery_life < low_threshold) {
+			START_COLOR("color_bad");
+			colorful_output = true;
+		} else if (strncmp(threshold_type, "time", strlen(threshold_type)) == 0
+			   && apm_info.minutes_left < (u_int) low_threshold) {
+			START_COLOR("color_bad");
+			colorful_output = true;
+		}
+	}
+
 	/* Can't give a meaningful value for remaining minutes if we're charging. */
-	if (ac_status == CS_CHARGING)
-		charging = 1;
+	if (status != CS_CHARGING) {
+		(void)snprintf(remainingbuf, sizeof(remainingbuf), "%d", apm_info.minutes_left);
+	} else {
+		(void)snprintf(remainingbuf, sizeof(remainingbuf), "%s", "(CHR)");
+	}
 
-	(void)snprintf(remainingbuf, sizeof(remainingbuf), (charging ? "%s" : "%d"),
-		       (charging ? "(CHR)" : apm_info.minutes_left));
+	if (colorful_output)
+		END_COLOR;
 #endif
d14 2
a15 1
 #define EAT_SPACE_FROM_OUTPUT_IF_EMPTY(_buf) \
@


1.8
log
@first patches merged upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.7 2012/10/08 11:26:48 jasper Exp $
@


1.7
log
@minor cleanup
@
text
@d1 6
a6 1
$OpenBSD: patch-src_print_battery_info_c,v 1.6 2012/10/08 11:12:54 jasper Exp $
d10 2
a11 1
- use colors to indicate battery status
@


1.6
log
@- implement colors too for threshold_type=time in the battery block.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.5 2012/10/08 10:33:39 jasper Exp $
d8 1
a8 1
+++ src/print_battery_info.c	Mon Oct  8 15:09:53 2012
d14 1
a14 1
+	int apm_fd, charging, seconds_remaining;
d45 1
a45 1
+			   && apm_info.minutes_left < low_threshold) {
@


1.5
log
@- use colors to indicate battery status (currently only implemented for "threshold_type=percentage")
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.4 2012/10/08 10:20:50 jasper Exp $
d5 1
a5 1
- use colors to indicate battery status (currently only implemented for "threshold_type=percentage"
d8 1
a8 1
+++ src/print_battery_info.c	Mon Oct  8 14:29:50 2012
d14 1
a14 1
+	int apm_fd, charging;
d18 1
a18 1
@@@@ -249,26 +249,38 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
a39 1
+		/* XXX: Implement for "time" too. */
d42 4
@


1.4
log
@- fix the display of remaining minutes when we're discharging.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.3 2012/10/08 10:07:41 jasper Exp $
d5 1
d8 1
a8 1
+++ src/print_battery_info.c	Mon Oct  8 14:16:30 2012
d18 1
a18 1
@@@@ -249,14 +249,14 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
d36 1
a36 1
@@@@ -264,11 +264,11 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
d39 9
a50 3
-
-	(void)snprintf(remainingbuf, sizeof(remainingbuf), (charging ? "%s" : "%d"),
-		       (charging ? "(CHR)" : apm_info.minutes_left));
d56 5
@


1.3
log
@fix the battery status printing in %status
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
d7 1
a7 1
+++ src/print_battery_info.c	Mon Oct  8 13:51:50 2012
d35 1
a35 1
@@@@ -264,7 +264,7 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
d40 10
a49 2
+	if (status == CS_CHARGING)
 		charging = 1;
d51 1
a51 1
 	(void)snprintf(remainingbuf, sizeof(remainingbuf), (charging ? "%s" : "%d"),
@


1.2
log
@- update to 2.5
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_battery_info_c,v 1.1 2012/05/02 07:37:10 jasper Exp $
d3 1
a3 1
Implement displaying battery status on OpenBSD (committed upstream).
d5 8
a12 5
--- src/print_battery_info.c.orig	Sun Apr 29 20:22:33 2012
+++ src/print_battery_info.c	Sun Apr 29 20:22:39 2012
@@@@ -13,6 +13,13 @@@@
 #include <sys/sysctl.h>
 #endif
d14 3
a16 66
+#if defined(__OpenBSD__)
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/fcntl.h>
+#include <machine/apmvar.h>
+#endif
+
 /*
  * Get battery information from /sys. Note that it uses the design capacity to
  * calculate the percentage, not the last full capacity, so you can see how
@@@@ -168,6 +175,57 @@@@ void print_battery_info(yajl_gen json_gen, char *buffe
                 (void)snprintf(remainingbuf, sizeof(remainingbuf), "%02dh%02d",
                                max(hours, 0), max(minutes, 0));
         }
+#elif defined(__OpenBSD__)
+	/*
+	 * We're using apm(4) here, which is the interface to acpi(4) on amd64/i386 and
+	 * the generic interface on macppc/sparc64/zaurus, instead of using sysctl(3) and
+	 * probing acpi(4) devices.
+	 */
+	struct apm_power_info apm_info;
+	int apm_fd, ac_status, charging;
+
+	apm_fd = open("/dev/apm", O_RDONLY);
+	if (apm_fd < 0) {
+		OUTPUT_FULL_TEXT("can't open /dev/apm");
+		return;
+	}
+	if (ioctl(apm_fd, APM_IOC_GETPOWER, &apm_info) < 0)
+		OUTPUT_FULL_TEXT("can't read power info");
+
+	close(apm_fd);
+
+	/* Don't bother to go further if there's no battery present. */
+	if ((apm_info.battery_state == APM_BATTERY_ABSENT) ||
+	    (apm_info.battery_state == APM_BATT_UNKNOWN)) {
+		OUTPUT_FULL_TEXT("No battery");
+		return;
+	}
+
+	switch(apm_info.ac_state) {
+	case APM_AC_OFF:
+		ac_status = CS_DISCHARGING;
+		break;
+	case APM_AC_ON:
+		ac_status = CS_CHARGING;
+		break;
+	default:
+		/* If we don't know what's going on, just assume we're discharging. */
+		ac_status = CS_DISCHARGING;
+		break;
+	}
+
+	(void)snprintf(statusbuf, sizeof(statusbuf), "%s",
+		       (ac_status == CS_CHARGING ? "CHR" :
+			(ac_status == CS_DISCHARGING ? "BAT" : "FULL")));
+
+        (void)snprintf(percentagebuf, sizeof(percentagebuf), "%02d%%", apm_info.battery_life);
+
+	/* Can't give a meaningful value for remaining minutes if we're charging. */
+	if (ac_status == CS_CHARGING)
+		charging = 1;
+
+	(void)snprintf(remainingbuf, sizeof(remainingbuf), (charging ? "%s" : "%d"),
+		       (charging ? "(CHR)" : apm_info.minutes_left));
 #endif
d18 25
a42 1
         for (walk = format; *walk != '\0'; walk++) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import i3status 2.4.1 (git clone as of a few days ago, along with a load of
patches for OpenBSD support, which have all been committed upstream already)

i3status is a small program (about 1500 SLOC) for generating a status
bar for dzen2, xmobar or similar programs. It is designed to be very
efficient by issuing a very small number of system calls, as one
generally wants to update such a status line every second. This ensures
that even under high load, your status bar is updated correctly. Also,
it saves a bit of energy by not hogging your CPU as much as spawning the
corresponding amount of shell commands would.

ok dcoppa@@
@
text
@@
