head	1.7;
access;
symbols
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	jasper_20120205:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2013.03.08.10.23.13;	author jasper;	state dead;
branches;
next	1.6;

1.6
date	2012.10.16.10.40.21;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.09.17.12.31;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.09.16.02.07;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.09.13.19.48;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.03.20.27.26;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2012.05.02.07.37.10;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.05.02.07.37.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.7
log
@- update to i3status-2.7
* all functional patches have been committed upstream.

tested by and ok rpe@@
@
text
@$OpenBSD: patch-src_print_cpu_temperature_c,v 1.6 2012/10/16 10:40:21 jasper Exp $

From ae4873bac793245e7dea4719c8e0d1c7bc990d5f Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@openbsd.org>
Date: Wed, 10 Oct 2012 07:57:32 +0000
Subject: i3status - More temperature related fixes for OpenBSD, and a general feature


From 1c2517a3998385dbfca0559aca3ba7e72b5c216c Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@openbsd.org>
Date: Wed, 10 Oct 2012 07:53:34 +0000
Subject: i3status - Default to acpitz(4) instead of cpu(4) for OpenBSD temperature readings

--- src/print_cpu_temperature.c.orig	Wed Oct  3 13:44:44 2012
+++ src/print_cpu_temperature.c	Tue Oct  9 20:36:23 2012
@@@@ -23,6 +23,8 @@@@
 #include <sys/sensors.h>
 #include <errno.h>
 #include <err.h>
+
+#define MUKTOC(v) ((v - 273150000) / 1000000.0)
 #endif
 
 static char *thermal_zone;
@@@@ -32,11 +34,11 @@@@ static char *thermal_zone;
  * returns the temperature in degree celcius.
  *
  */
-void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format) {
+void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format, int max_threshold) {
 #ifdef THERMAL_ZONE
         const char *walk;
         char *outwalk = buffer;
-        static char buf[16];
+	bool colorful_output;
 
         if (path == NULL)
                 asprintf(&thermal_zone, THERMAL_ZONE, zone);
@@@@ -54,6 +56,7 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
 
                 if (BEGINS_WITH(walk+1, "degrees")) {
 #if defined(LINUX)
+		        static char buf[16];
                         long int temp;
                         if (!slurp(path, buf, sizeof(buf)))
                                 goto error;
@@@@ -87,21 +90,27 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
 				break;
 			goto error;
 		}
-		/*
-		 * 'path' is actually the node within the full path (eg, cpu0).
-		 * XXX: Extend the API to allow a string instead of just an int for path, this would
-		 * allow us to have a path of 'acpitz0' for example.
-		 */
+		/* 'path' is the node within the full path (defaults to acpitz0). */
 		if (strncmp(sensordev.xname, path, strlen(path)) == 0) {
 			mib[3] = SENSOR_TEMP;
-			for (numt = 0; numt < sensordev.maxnumt[SENSOR_TEMP]; numt++) {
+			/* Limit to temo0, but should retrieve from a full path... */
+			for (numt = 0; numt < 1 /*sensordev.maxnumt[SENSOR_TEMP]*/; numt++) {
 				mib[4] = numt;
 				if (sysctl(mib, 5, &sensor, &slen, NULL, 0) == -1) {
-					if (errno != ENOENT)
+					if (errno != ENOENT) {
 						warn("sysctl");
-					continue;
+						continue;
+					}
 				}
-				outwalk += sprintf(outwalk, "%.2f", (sensor.value - 273150000) / 1000000.0 );
+				if ((int)MUKTOC(sensor.value) >= max_threshold) {
+					START_COLOR("color_bad");
+					colorful_output = true;
+				}
+
+				outwalk += sprintf(outwalk, "%.2f", MUKTOC(sensor.value));
+
+				if (colorful_output)
+					END_COLOR;
 			}
 		}
 	}
@@@@ -109,9 +118,9 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
                         walk += strlen("degrees");
                 }
         }
+error:
         OUTPUT_FULL_TEXT(buffer);
         return;
-error:
 #endif
         OUTPUT_FULL_TEXT("cant read temp");
         (void)fputs("i3status: Cannot read temperature. Verify that you have a thermal zone in /sys/class/thermal or disable the cpu_temperature module in your i3status config.\n", stderr);
@


1.6
log
@sync comments; everything is upstream now.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_cpu_temperature_c,v 1.5 2012/10/09 17:12:31 jasper Exp $
@


1.5
log
@- Temperature sensors can now set a 'max_threshold' value to color the
  output red if exceeded.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_cpu_temperature_c,v 1.4 2012/10/09 16:02:07 jasper Exp $
d3 4
a6 3
- Default to acpitz(4) for temperature readings, instead of cpu(4).
  The acpitz(4) values are eventually used by the kernel to determine if the machine
  is getting too hot.
a7 2
  Other devices can be used by setting 'path' in the config file to the sysctl(3)
  device node.
d9 4
a12 2
- Temperature sensors can now set a 'max_threshold' value to color the
  output red if exceeded.
@


1.4
log
@make it possible to get temperature readings from devices other than acpitz.
use the 'path' option in your configuration's cpu_temperature block to e.g. cpu0.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_cpu_temperature_c,v 1.3 2012/10/09 13:19:48 jasper Exp $
d3 3
a5 3
Default to acpitz(4) for temperature readings, instead of cpu(4).
The acpitz(4) values are eventually used by the kernel to determine if the machine
is getting too hot.
d7 5
a11 2
Other devices can be used by setting 'path' in the config file to the sysctl(3)
device node.
d14 33
a46 2
+++ src/print_cpu_temperature.c	Tue Oct  9 19:41:02 2012
@@@@ -87,19 +87,17 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
d70 10
a79 1
 				outwalk += sprintf(outwalk, "%.2f", (sensor.value - 273150000) / 1000000.0 );
d81 3
a83 1
@@@@ -109,9 +107,9 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
@


1.3
log
@- change the default (and since the API is still limiting us here, only)
device from which we read temperature values from, from cpu(4) to acpitz(4).
@
text
@d1 1
a1 1
$OpenBSD$
d7 7
a13 3
--- src/print_cpu_temperature.c.orig	Tue Oct  9 17:09:57 2012
+++ src/print_cpu_temperature.c	Tue Oct  9 17:10:07 2012
@@@@ -88,18 +88,19 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
d16 1
a16 1
 		/*
d18 1
a18 2
+		 * 'path' is actually the node within the full path (currently always acpitz0).
 		 * XXX: Extend the API to allow a string instead of just an int for path, this would
d20 2
a21 2
+		 * allow us to build an arbitrary path.
 		 */
d24 3
a26 1
 			for (numt = 0; numt < sensordev.maxnumt[SENSOR_TEMP]; numt++) {
d38 1
a38 1
@@@@ -109,9 +110,9 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
@


1.2
log
@- update to 2.5
@
text
@d1 1
a1 1
$OpenBSD: patch-src_print_cpu_temperature_c,v 1.1 2012/05/02 07:37:10 jasper Exp $
d3 3
a5 1
Implement basic fetching of cpu temperature on OpenBSD (committed upstream).
d7 27
a33 59
--- src/print_cpu_temperature.c.orig	Sun Apr 29 16:54:46 2012
+++ src/print_cpu_temperature.c	Sun Apr 29 16:54:56 2012
@@@@ -16,6 +16,15 @@@@
 #define TZ_KELVTOC(x) (((x) - TZ_ZEROC) / 10), abs(((x) - TZ_ZEROC) % 10)
 #endif
 
+#if defined(__OpenBSD__)
+#include <sys/param.h>
+#include <sys/types.h>
+#include <sys/sysctl.h>
+#include <sys/sensors.h>
+#include <errno.h>
+#include <err.h>
+#endif
+
 static char *thermal_zone;
 
 /*
@@@@ -59,11 +68,46 @@@@ void print_cpu_temperature_info(yajl_gen json_gen, cha
                                 goto error;
 
                         outwalk += sprintf(outwalk, "%d.%d", TZ_KELVTOC(sysctl_rslt));
+#elif defined(__OpenBSD__)
+	struct sensordev sensordev;
+	struct sensor sensor;
+	size_t sdlen, slen;
+	int dev, numt, mib[5] = { CTL_HW, HW_SENSORS, 0, 0, 0 };
+
+	sdlen = sizeof(sensordev);
+	slen = sizeof(sensor);
+
+	for (dev = 0; ; dev++) {
+		mib[2] = dev;
+		if (sysctl(mib, 3, &sensordev, &sdlen, NULL, 0) == -1) {
+			if (errno == ENXIO)
+				continue;
+			if (errno == ENOENT)
+				break;
+			goto error;
+		}
+		/*
+		 * 'path' is actually the node within the full path (eg, cpu0).
+		 * XXX: Extend the API to allow a string instead of just an int for path, this would
+		 * allow us to have a path of 'acpitz0' for example.
+		 */
+		if (strncmp(sensordev.xname, path, strlen(path)) == 0) {
+			mib[3] = SENSOR_TEMP;
+			for (numt = 0; numt < sensordev.maxnumt[SENSOR_TEMP]; numt++) {
+				mib[4] = numt;
+				if (sysctl(mib, 5, &sensor, &slen, NULL, 0) == -1) {
+					if (errno != ENOENT)
+						warn("sysctl");
+					continue;
+				}
+				outwalk += sprintf(outwalk, "%.2f", (sensor.value - 273150000) / 1000000.0 );
+			}
+		}
+	}
 #endif
d37 1
a37 1
-
d40 4
a43 1
 error:
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import i3status 2.4.1 (git clone as of a few days ago, along with a load of
patches for OpenBSD support, which have all been committed upstream already)

i3status is a small program (about 1500 SLOC) for generating a status
bar for dzen2, xmobar or similar programs. It is designed to be very
efficient by issuing a very small number of system calls, as one
generally wants to update such a status line every second. This ensures
that even under high load, your status bar is updated correctly. Also,
it saves a bit of energy by not hogging your CPU as much as spawning the
corresponding amount of shell commands would.

ok dcoppa@@
@
text
@@
