head	1.5;
access;
symbols
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2012.12.24.13.11.03;	author stsp;	state dead;
branches;
next	1.4;

1.4
date	2012.11.10.15.06.03;	author stsp;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.16.01.00.11;	author laurent;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.24.15.10.00;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.11.14.59.25;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update e17 ports to the final 0.17.0 release.
Major bump for all shared libs for safety (requested by sthen and landry).
ok sthen landry
@
text
@$OpenBSD: patch-src_modules_temperature_tempget_c,v 1.4 2012/11/10 15:06:03 stsp Exp $
support km(4) sensor
--- src/modules/temperature/tempget.c.orig	Fri Nov  9 03:22:17 2012
+++ src/modules/temperature/tempget.c	Fri Nov  9 03:22:31 2012
@@@@ -128,6 +128,11 @@@@ init(void)
 			sensor_name = strdup("cpu0");
 			break;
 		}
+		if (strcmp(snsrdev.xname, "km0") == 0) {
+			sensor_type = SENSOR_TYPE_OPENBSD;
+			sensor_name = strdup("km0");
+			break;
+		}
 	}
 #else
 	therms = ecore_file_ls("/proc/acpi/thermal_zone");
@


1.4
log
@Upgrade e17 to 0.17.0 alpha. Mostly works, see here for a list of known issues:
  http://marc.info/?l=openbsd-ports&m=135255696617191&w=2
ok landry armani
@
text
@d1 1
a1 1
$OpenBSD: patch-src_modules_temperature_tempget_c,v 1.3 2011/01/16 01:00:11 laurent Exp $
@


1.3
log
@Update. Fixes by fabien@@, armani@@, Azwaw OUSADOU and jasper@@, cleaning up to come.
@
text
@d1 9
a9 55
$OpenBSD$
--- src/modules/temperature/tempget.c.orig	Thu Nov 11 14:04:16 2010
+++ src/modules/temperature/tempget.c	Sat Jan  8 17:02:10 2011
@@@@ -8,6 +8,14 @@@@
 # include <sys/sysctl.h>
 #endif
 
+#ifdef __OpenBSD__
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#include <sys/sensors.h>
+#include <errno.h>
+#include <err.h>
+#endif
+
 #include <Ecore.h>
 #include <Ecore_File.h>
 
@@@@ -19,9 +27,18 @@@@ static int poll_interval = 32;
 static int cur_poll_interval = 32;
 
 static char *sensor_path = NULL;
-#ifdef __FreeBSD__
+#if defined (__FreeBSD__) || defined (__OpenBSD__)
 static int mib[5];
 #endif
+
+#ifdef __OpenBSD__
+static int dev, numt;
+static struct sensordev snsrdev;  
+static size_t sdlen = sizeof(snsrdev);
+static struct sensor snsr;
+static size_t slen = sizeof(snsr);
+#endif
+
 static Ecore_Poller *poller = NULL;
 static int ptemp = 0;
 
@@@@ -90,6 +107,24 @@@@ init(void)
 	/* TODO: FreeBSD can also have more temperature sensors! */
 	sensor_type = SENSOR_TYPE_FREEBSD;
 	sensor_name = strdup("tz0");
+#elif __OpenBSD__ 
+	mib[0] = CTL_HW;
+	mib[1] = HW_SENSORS;
+
+	for (dev = 0; ; dev++) {
+		mib[2] = dev;
+		if (sysctl(mib, 3, &snsrdev, &sdlen, NULL, 0) == -1) {
+			if (errno == ENOENT)    /* no further sensors */
+				break;
+			else
+				continue;                                       
+		}
+		if (strcmp(snsrdev.xname, "cpu0") == 0) {
d11 1
a11 1
+			sensor_name = strdup("cpu0");
d14 1
a14 1
+	}
a16 39
 	if (therms)
@@@@ -205,6 +240,20 @@@@ init(void)
 	     sysctlnametomib(sensor_path, mib, &len);
 #endif
 	     break;
+	   case SENSOR_TYPE_OPENBSD:
+#ifdef __OpenBSD__
+		for (numt = 0; numt < snsrdev.maxnumt[SENSOR_TEMP]; numt++) {
+			mib[4] = numt;
+			slen = sizeof(snsr);
+			if (sysctl(mib, 5, &snsr, &slen, NULL, 0) == -1)        
+				continue;
+			if (slen > 0 && (snsr.flags & SENSOR_FINVALID) == 0) {
+				break;
+			}
+               }
+#endif
+
+		break;
 	   case SENSOR_TYPE_OMNIBOOK:
 	     sensor_path = strdup("/proc/omnibook/temperature");
 	     break;
@@@@ -293,6 +342,16 @@@@ check(void)
 	  }
 	else
 	  goto error;
+#endif
+	break;
+      case SENSOR_TYPE_OPENBSD:
+#ifdef __OpenBSD__
+	if (sysctl(mib, 5, &snsr, &slen, NULL, 0) != -1) {
+	 temp = (snsr.value - 273150000) / 1000000.0;
+	 ret = 1;
+	}
+	else
+	 goto error;
 #endif
 	break;
       case SENSOR_TYPE_OMNIBOOK:
@


1.2
log
@Update sensors code to deal with MAXSENSORDEVICES removal, and handle
non-existing hw.sensors.cpu0 better.  ok laurent@@
@
text
@d1 5
a5 11
$OpenBSD: patch-src_modules_temperature_tempget_c,v 1.1 2010/01/11 14:59:25 jasper Exp $
--- src/modules/temperature/tempget.c.orig	Thu Feb 26 04:13:48 2009
+++ src/modules/temperature/tempget.c	Fri Apr 23 23:19:13 2010
@@@@ -3,21 +3,35 @@@@
  */
 #include "e.h"
 #include "e_mod_main.h"
-
 #ifdef __FreeBSD__
 #include <sys/types.h>
 #include <sys/sysctl.h>
d12 2
d16 4
a19 3
 static int sensor_type = SENSOR_TYPE_NONE;
 static char *sensor_name = NULL;
 static int poll_interval = 32;
a23 1
+
d30 1
a30 1
+static struct sensordev snsrdev;
d35 1
d39 1
a39 1
@@@@ -86,6 +100,24 @@@@ init(void)
d43 1
a43 1
+#elif __OpenBSD__
d45 1
a45 1
+	mib[1] = HW_SENSORS;	
d50 1
a50 1
+			if (errno == ENOENT)	/* no further sensors */
d53 1
a53 1
+				continue;
d64 1
a64 1
@@@@ -201,6 +233,21 @@@@ init(void)
d70 4
a73 5
+ 		for (numt = 0; numt < snsrdev.maxnumt[SENSOR_TEMP]; numt++) {
+     			mib[4] = numt;
+     			slen = sizeof(snsr);
+
+			if (sysctl(mib, 5, &snsr, &slen, NULL, 0) == -1)
a74 1
+
d78 1
a78 1
+		}
d80 2
a81 1
+	     break;
d85 3
a87 1
@@@@ -290,6 +337,16 @@@@ check(void)
d89 10
a100 10
+      case SENSOR_TYPE_OPENBSD:
+#ifdef __OpenBSD__
+      if (sysctl(mib, 5, &snsr, &slen, NULL, 0) != -1) {
+	temp = (snsr.value - 273150000) / 1000000.0;
+	ret = 1;
+      }
+      else
+	goto error;
+#endif
+       break;
a101 2
 	f = fopen(sensor_path, "r");
 	if (f)
@


1.1
log
@- update e to 0.16.999.061

with feedback and tweaks by me.
committing on behalf of laurent@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/modules/temperature/tempget.c	Sun Jul 26 23:19:49 2009
a26 1
-static int mib[5];
d29 1
a29 1
+int mib[5];
d33 5
a37 5
+int dev, numt;
+struct sensordev snsrdev;
+size_t sdlen = sizeof(snsrdev);
+struct sensor snsr;
+size_t slen = sizeof(snsr);
d42 1
a42 9
@@@@ -77,6 +91,7 @@@@ init(void)
    int len;
 #endif
 
+
    if ((!sensor_type) || ((!sensor_name) || (sensor_name[0] == 0)))
      {
 	if (sensor_name) free(sensor_name);
@@@@ -86,6 +101,18 @@@@ init(void)
a46 3
+	sensor_type = SENSOR_TYPE_OPENBSD;
+	sensor_name = strdup("cpu0");
+
d50 1
a50 1
+	for (dev = 0; dev < MAXSENSORDEVICES && (strcmp(snsrdev.xname, "cpu0") != 0); dev++) {
d52 11
a62 2
+		if (sysctl(mib, 3, &snsrdev, &sdlen, NULL, 0) == -1)
+			continue;
d67 1
a67 1
@@@@ -201,6 +228,21 @@@@ init(void)
d89 1
a89 1
@@@@ -290,6 +332,16 @@@@ check(void)
@

