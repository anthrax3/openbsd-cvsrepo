head	1.5;
access;
symbols
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2014.12.23.22.04.06;	author landry;	state dead;
branches;
next	1.4;
commitid	9yAzU2aFbBD6AyDt;

1.4
date	2014.04.25.09.38.45;	author mpi;	state Exp;
branches;
next	1.3;

1.3
date	2014.01.09.21.09.16;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.18.21.38.12;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.01.09.16.50.19;	author robert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xfce4-taskmanager 1.1.0.

See https://mail.xfce.org/pipermail/xfce-announce/2014-December/000350.html
for details.
@
text
@$OpenBSD: patch-src_task-manager-bsd_c,v 1.4 2014/04/25 09:38:45 mpi Exp $

Prefer the UVM way to the vmmeter one to get memory stats.

--- src/task-manager-bsd.c.orig	Wed Jan  8 19:42:02 2014
+++ src/task-manager-bsd.c	Thu Apr 10 14:25:30 2014
@@@@ -25,6 +25,7 @@@@
 #include <sys/param.h>
 #include <sys/sched.h>
 #include <sys/sysctl.h>
+#include <sys/proc.h>
 /* for swapctl() */
 #include <sys/swap.h>
 /* for strlcpy() */
@@@@ -213,11 +214,26 @@@@ gboolean get_cpu_usage (gushort *cpu_count, gfloat *cp
 
 gboolean get_memory_usage (guint64 *memory_total, guint64 *memory_free, guint64 *memory_cache, guint64 *memory_buffers, guint64 *swap_total, guint64 *swap_free)
 {
+#ifdef __OpenBSD__
+	int mib[] = {CTL_VM, VM_UVMEXP};
+	struct uvmexp  uvmexp;
+#else
 	int mib[] = {CTL_VM, VM_METER};
 	struct vmtotal vmtotal;
+#endif
 	struct swapent *swdev;
 	int nswap, i;
 	size_t size;
+#ifdef __OpenBSD__
+	size = sizeof(uvmexp);
+	if (sysctl(mib, 2, &uvmexp, &size, NULL, 0) < 0)
+		errx(1,"failed to get vm.uvmexp");
+	/* cheat : rm = tot used, add free to get total */
+	*memory_total = pagetok(uvmexp.npages);
+	*memory_free = pagetok(uvmexp.free);
+	*memory_cache = 0;
+	*memory_buffers = pagetok(uvmexp.npages - uvmexp.free -uvmexp.active);
+#else
 	size = sizeof(vmtotal);
 	if (sysctl(mib, 2, &vmtotal, &size, NULL, 0) < 0)
 		errx(1,"failed to get vm.meter");
@@@@ -226,6 +242,7 @@@@ gboolean get_memory_usage (guint64 *memory_total, guin
 	*memory_free = pagetok(vmtotal.t_free);
 	*memory_cache = 0;
 	*memory_buffers = pagetok(vmtotal.t_rm - vmtotal.t_arm);
+#endif
 
 	/* get swap stats */
 	if ((nswap = swapctl(SWAP_NSWAP, 0, 0)) == 0)
@


1.4
log
@Use the UVM way to get memory stats.  The VM_METER sysctl(3) should
only be used to query process stats.

ok landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_task-manager-bsd_c,v 1.3 2014/01/09 21:09:16 landry Exp $
@


1.3
log
@Update to xfce4-taskmanager 1.0.1.
@
text
@d1 6
a6 3
$OpenBSD$
--- src/task-manager-bsd.c.orig	Thu Jan  9 22:05:05 2014
+++ src/task-manager-bsd.c	Thu Jan  9 22:05:37 2014
d15 35
@


1.2
log
@cope with sysctl.h changes
@
text
@d1 3
a3 3
$OpenBSD: patch-src_task-manager-bsd_c,v 1.1 2012/01/09 16:50:19 robert Exp $
--- src/task-manager-bsd.c.orig	Fri May 21 05:37:20 2010
+++ src/task-manager-bsd.c	Fri Dec  7 06:22:48 2012
a11 63
@@@@ -41,7 +42,7 @@@@ gboolean get_task_list (GArray *task_list)
 {
 	int mib[6];
 	size_t size;
-	struct kinfo_proc2 *kp;
+	struct kinfo_proc *kp;
 	Task t;
 	struct passwd *passwdp;
 	char **args, **ptr;
@@@@ -49,23 +50,23 @@@@ gboolean get_task_list (GArray *task_list)
 	int nproc, i;
 
 	mib[0] = CTL_KERN;
-	mib[1] = KERN_PROC2;
+	mib[1] = KERN_PROC;
 	mib[2] = KERN_PROC_ALL;
 	mib[3] = 0;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 0;
 	if (sysctl(mib, 6, NULL, &size, NULL, 0) < 0)
-		errx(1, "could not get kern.proc2 size");
+		errx(1, "could not get kern.proc size");
 	size = 5 * size / 4;		/* extra slop */
 	if ((kp = malloc(size)) == NULL)
 		errx(1,"failed to allocate memory for proc structures");
-	mib[5] = (int)(size / sizeof(struct kinfo_proc2));
+	mib[5] = (int)(size / sizeof(struct kinfo_proc));
 	if (sysctl(mib, 6, kp, &size, NULL, 0) < 0)
-		errx(1, "could not read kern.proc2");
-	nproc = (int)(size / sizeof(struct kinfo_proc2));
+		errx(1, "could not read kern.proc");
+	nproc = (int)(size / sizeof(struct kinfo_proc));
 	for (i=0 ; i < nproc ; i++)
 	{
-		struct kinfo_proc2 p = kp[i];
+		struct kinfo_proc p = kp[i];
 		t.pid = p.p_pid;
 		t.ppid = p.p_ppid;
 		t.uid = p.p_uid;
@@@@ -117,17 +118,17 @@@@ gboolean
 pid_is_sleeping (guint pid)
 {
 	int mib[6];
-	struct kinfo_proc2 kp;
-	size_t size = sizeof(struct kinfo_proc2);
+	struct kinfo_proc kp;
+	size_t size = sizeof(struct kinfo_proc);
 
 	mib[0] = CTL_KERN;
-	mib[1] = KERN_PROC2;
+	mib[1] = KERN_PROC;
 	mib[2] = KERN_PROC_PID;
 	mib[3] = pid;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 1;
 	if (sysctl(mib, 6, &kp, &size, NULL, 0) < 0)
-		errx(1, "could not read kern.proc2 for pid %d", pid);
+		errx(1, "could not read kern.proc for pid %d", pid);
 	return (kp.p_stat == SSLEEP ? TRUE : FALSE);
 }
 
@


1.1
log
@KINFO_PROC2 is no more
@
text
@d1 12
a12 4
$OpenBSD$
--- src/task-manager-bsd.c.orig	Mon Jan  9 09:48:24 2012
+++ src/task-manager-bsd.c	Mon Jan  9 09:49:01 2012
@@@@ -41,7 +41,7 @@@@ gboolean get_task_list (GArray *task_list)
d21 1
a21 1
@@@@ -49,23 +49,23 @@@@ gboolean get_task_list (GArray *task_list)
d52 1
a52 1
@@@@ -117,17 +117,17 @@@@ gboolean
@

