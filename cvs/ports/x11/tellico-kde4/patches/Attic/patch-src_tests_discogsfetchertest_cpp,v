head	1.3;
access;
symbols
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.27.18.52.26;	author sthen;	state dead;
branches;
next	1.2;
commitid	9R6jZIzswjAQHYbs;

1.2
date	2016.12.19.11.57.22;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	2ba9fczZvHGq5T9A;

1.1
date	2015.05.02.15.30.31;	author zhuk;	state Exp;
branches;
next	;
commitid	qOH0aeYAXA17xb1A;


desc
@@


1.3
log
@zap zero-byte files, list from rsadowski
@
text
@@


1.2
log
@Minor update to Tellico 2.3.11. All patches went upstream.

From Rafael Sadowski.
@
text
@@


1.1
log
@Update KDE4 version of Tellico to 2.3.10.

This includes a few patches from upstream (to be gone in the next release).
Prodded and reminded by <private person>, thanks!
@
text
@a0 59
$OpenBSD$
Unbreak fetching Discogs images (upstream 61c9b539).
--- src/tests/discogsfetchertest.cpp.orig	Sun Feb 15 22:23:56 2015
+++ src/tests/discogsfetchertest.cpp	Sat May  2 18:10:19 2015
@@@@ -86,12 +86,9 @@@@ void DiscogsFetcherTest::testTitle() {
   QVERIFY(!entry->field(QLatin1String("year")).isEmpty());
   QVERIFY(!entry->field(QLatin1String("track")).isEmpty());
 
-  //OAuth is now required
-  /*
   QVERIFY(!entry->field(QLatin1String("cover")).isEmpty());
   const Tellico::Data::Image& img = Tellico::ImageFactory::imageById(entry->field(QLatin1String("cover")));
   QVERIFY(!img.isNull());
-*/
 }
 
 void DiscogsFetcherTest::testPerson() {
@@@@ -114,12 +111,10 @@@@ void DiscogsFetcherTest::testPerson() {
   QCOMPARE(entry->field(QLatin1String("artist")), QLatin1String("Evanescence"));
   QVERIFY(!entry->field(QLatin1String("title")).isEmpty());
   QVERIFY(!entry->field(QLatin1String("label")).isEmpty());
-  //OAuth is now required
-  /*
+
   QVERIFY(!entry->field(QLatin1String("cover")).isEmpty());
   const Tellico::Data::Image& img = Tellico::ImageFactory::imageById(entry->field(QLatin1String("cover")));
   QVERIFY(!img.isNull());
-  */
 }
 
 void DiscogsFetcherTest::testKeyword() {
@@@@ -143,12 +138,10 @@@@ void DiscogsFetcherTest::testKeyword() {
   QCOMPARE(entry->field(QLatin1String("artist")), QLatin1String("Evanescence"));
   QVERIFY(!entry->field(QLatin1String("label")).isEmpty());
   QVERIFY(!entry->field(QLatin1String("year")).isEmpty());
-  // OAuth is now required
-  /*
+
   QVERIFY(!entry->field(QLatin1String("cover")).isEmpty());
   const Tellico::Data::Image& img = Tellico::ImageFactory::imageById(entry->field(QLatin1String("cover")));
   QVERIFY(!img.isNull());
-  */
 }
 
 // use the Raw query type to fully test the data for a Discogs release
@@@@ -181,13 +174,6 @@@@ void DiscogsFetcherTest::testRawData() {
   QStringList trackList = Tellico::FieldFormat::splitTable(entry->field("track"));
   QCOMPARE(trackList.count(), 14);
   QCOMPARE(trackList.at(0), QLatin1String("Haunted::Evanescence::4:04"));
-
-  // OAuth is now required
-  /*
-  QVERIFY(!entry->field(QLatin1String("cover")).isEmpty());
-  const Tellico::Data::Image& img = Tellico::ImageFactory::imageById(entry->field(QLatin1String("cover")));
-  QVERIFY(!img.isNull());
-*/
 }
 
 // do another check to make sure the Vinyl format is captured
@

