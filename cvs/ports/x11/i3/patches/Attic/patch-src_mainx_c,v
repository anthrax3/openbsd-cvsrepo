head	1.5;
access;
symbols
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2011.05.09.11.03.40;	author dcoppa;	state dead;
branches;
next	1.4;

1.4
date	2011.04.07.08.58.10;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.14.12.55.18;	author dcoppa;	state dead;
branches;
next	1.2;

1.2
date	2011.01.05.12.45.04;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.18.12.20.54;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to i3-3.e-bf3 (i3-3.5.3)
@
text
@$OpenBSD: patch-src_mainx_c,v 1.4 2011/04/07 08:58:10 dcoppa Exp $
--- src/mainx.c.orig	Wed Jan 19 21:26:37 2011
+++ src/mainx.c	Wed Apr  6 12:48:34 2011
@@@@ -326,6 +326,7 @@@@ int main(int argc, char *argv[], char *env[]) {
         REQUEST_ATOM(_NET_CURRENT_DESKTOP);
         REQUEST_ATOM(_NET_ACTIVE_WINDOW);
         REQUEST_ATOM(_NET_WORKAREA);
+        REQUEST_ATOM(WM_TAKE_FOCUS);
 
         /* TODO: this has to be more beautiful somewhen */
         int major, minor, error;
@@@@ -491,6 +492,7 @@@@ int main(int argc, char *argv[], char *env[]) {
         GET_ATOM(_NET_CURRENT_DESKTOP);
         GET_ATOM(_NET_ACTIVE_WINDOW);
         GET_ATOM(_NET_WORKAREA);
+        GET_ATOM(WM_TAKE_FOCUS);
 
         xcb_property_set_handler(&prophs, atoms[_NET_WM_WINDOW_TYPE], UINT_MAX, handle_window_type, NULL);
         /* TODO: In order to comply with EWMH, we have to watch _NET_WM_STRUT_PARTIAL */
@


1.4
log
@Fix problems with Java apps (backported from upstream git)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update to i3-3.e-bf2 (aka i3-3.5.2)
@
text
@d1 8
a8 6
$OpenBSD: patch-src_mainx_c,v 1.2 2011/01/05 12:45:04 dcoppa Exp $
--- src/mainx.c.orig	Wed Jun  9 09:58:15 2010
+++ src/mainx.c	Wed Jan  5 12:55:57 2011
@@@@ -283,6 +283,11 @@@@ int main(int argc, char *argv[], char *env[]) {
         if (xcb_connection_has_error(conn))
                 die("Cannot open display\n");
d10 7
a16 11
+        /* Get the root window */
+        xcb_screen_t *root_screen = xcb_aux_get_screen(conn, screens);
+        root = root_screen->root;
+        root_depth = root_screen->root_depth;
+
         load_configuration(conn, override_configpath, false);
         if (only_check_config) {
                 LOG("Done checking configuration file. Exiting.\n");
@@@@ -441,11 +446,7 @@@@ int main(int argc, char *argv[], char *env[]) {
         /* Watch size hints (to obey correct aspect ratio) */
         xcb_property_set_handler(&prophs, WM_NORMAL_HINTS, UINT_MAX, handle_normal_hints, NULL);
d18 2
a19 33
-        /* Get the root window and set the event mask */
-        xcb_screen_t *root_screen = xcb_aux_get_screen(conn, screens);
-        root = root_screen->root;
-        root_depth = root_screen->root_depth;
-
+        /* Set the event mask */
         uint32_t mask = XCB_CW_EVENT_MASK;
         uint32_t values[] = { XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT |
                               XCB_EVENT_MASK_STRUCTURE_NOTIFY |         /* when the user adds a screen (e.g. video
@@@@ -526,17 +527,18 @@@@ int main(int argc, char *argv[], char *env[]) {
         translate_keysyms();
         grab_all_keys(conn, false);
 
-        int randr_base;
+        int randr_base = -1;
         if (force_xinerama) {
                 initialize_xinerama(conn);
         } else {
                 DLOG("Checking for XRandR...\n");
                 initialize_randr(conn, &randr_base);
 
-                xcb_event_set_handler(&evenths,
-                                      randr_base + XCB_RANDR_SCREEN_CHANGE_NOTIFY,
-                                      handle_screen_change,
-                                      NULL);
+                if (randr_base != -1)
+                    xcb_event_set_handler(&evenths,
+                                          randr_base + XCB_RANDR_SCREEN_CHANGE_NOTIFY,
+                                          handle_screen_change,
+                                          NULL);
         }
 
         xcb_flush(conn);
@


1.2
log
@Various bugfixes for fullscreen windows, xcb, xinerama, and configfile
parsing.
All from upstream git.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_mainx_c,v 1.1 2010/11/18 12:20:54 dcoppa Exp $
@


1.1
log
@Bump after libev update.

While here, add two patches from upstream:

"Don't setup event handler when RandR base event is not set"
"Properly call init_workspaces() when RandR is known but not present"

I've found that they are needed (the hard way) when tried to run i3
under Xnest.
@
text
@d1 1
a1 1
$OpenBSD$
d3 27
a29 2
+++ src/mainx.c	Thu Nov 18 12:16:59 2010
@@@@ -526,17 +526,18 @@@@ int main(int argc, char *argv[], char *env[]) {
@

