head	1.8;
access;
symbols
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5;
locks; strict;
comment	@# @;


1.8
date	2014.01.11.16.04.43;	author dcoppa;	state dead;
branches;
next	1.7;

1.7
date	2013.09.02.06.15.34;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.13.10.01.57;	author dcoppa;	state dead;
branches;
next	1.5;

1.5
date	2013.06.02.12.25.53;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.09.11.56.49;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2012.02.21.14.05.39;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.01.16.00.01;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2011.11.06.20.23.25;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to i3-4.7
@
text
@$OpenBSD: patch-src_tree_c,v 1.7 2013/09/02 06:15:34 dcoppa Exp $

commit 2481b9dcd73e91969033abb2b6f83aed608aeea1
Author: Michael Stapelberg <michael@@stapelberg.de>
Date:   Sun Sep 1 13:35:04 2013 +0200

Bugfix: don't flatten tabbed/stacked containers

--- src/tree.c.orig	Wed Aug  7 20:50:24 2013
+++ src/tree.c	Mon Sep  2 07:53:09 2013
@@@@ -702,6 +702,8 @@@@ void tree_flatten(Con *con) {
      * the conâ€™s parent to be redundant */
     if (!con_is_split(con) ||
         !con_is_split(child) ||
+        (con->layout != L_SPLITH && con->layout != L_SPLITV) ||
+        (child->layout != L_SPLITH && child->layout != L_SPLITV) ||
         con_orientation(con) == con_orientation(child) ||
         con_orientation(child) != con_orientation(parent))
         goto recurse;
@


1.7
log
@
Revert "raise fullscreen windows on top of all other X11 windows"
It was a fix for dzen2 setups, but broke several other use cases
(upstream git commit 103ab83131d30614ea9337e752548a834773bfc6)

Bugfix: update root geometry on output changes for "fullscreen global"
(upstream git commit 93463bc3932e820bc86383fc4de1a07c82356967)

Bugfix: don't flatten tabbed/stacked containers
(upstream git commit 2481b9dcd73e91969033abb2b6f83aed608aeea1)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@Update to i3-4.6

ok tobiasu@@, abieber@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_tree_c,v 1.5 2013/06/02 12:25:53 dcoppa Exp $
d3 1
a3 1
commit 62ef7834b042409acb99f0a030729c806be69335
d5 1
a5 1
Date:   Tue May 28 19:52:01 2013 +0200
d7 1
a7 1
Bugfix: Unmap windows before reparenting them to the root window
d9 11
a19 22
Some apps such as Mathematica send a synthetic UnmapNotify event
without properly unmapping their window first. This change makes
sure that happens and fixes an annoying bug with Mathematica where
some unmanaged windows would stay around, but you couldn't do
anything with them.

--- src/tree.c.orig	Mon Mar 18 22:43:36 2013
+++ src/tree.c	Sun Jun  2 13:51:02 2013
@@@@ -235,7 +235,12 @@@@ bool tree_close(Con *con, kill_window_t kill_window, b
             return false;
         } else {
             xcb_void_cookie_t cookie;
-            /* un-parent the window */
+            /* Ignore any further events by clearing the event mask,
+             * unmap the window,
+             * then reparent it to the root window. */
+            xcb_change_window_attributes(conn, con->window->id,
+                    XCB_CW_EVENT_MASK, (uint32_t[]){ XCB_NONE });
+            xcb_unmap_window(conn, con->window->id);
             cookie = xcb_reparent_window(conn, con->window->id, root, 0, 0);
 
             /* Ignore X11 errors for the ReparentWindow request.
@


1.5
log
@Bugfix: Unmap windows before reparenting them to the root window
(upstream git commit 62ef7834b042409acb99f0a030729c806be69335)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to i3-4.2

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_tree_c,v 1.3 2012/02/21 14:05:39 dcoppa Exp $
d3 3
a5 3
Bugfix: properly split when the current container is alone within
a stacked/tabbed container
(upstream git commit 0fc459892e381469a8b967c3895c33eda6c87b48)
d7 24
a30 12
--- src/tree.c.orig	Tue Feb 21 14:11:04 2012
+++ src/tree.c	Tue Feb 21 14:11:49 2012
@@@@ -291,7 +291,8 @@@@ void tree_split(Con *con, orientation_t orientation) {
     /* if we are in a container whose parent contains only one
      * child (its split functionality is unused so far), we just change the
      * orientation (more intuitive than splitting again) */
-    if (con_num_children(parent) == 1) {
+    if (con_num_children(parent) == 1 &&
+        parent->layout == L_DEFAULT) {
         parent->orientation = orientation;
         DLOG("Just changing orientation of existing container\n");
         return;
@


1.3
log
@Update to i3-4.1.2
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Major update to i3-4.1
@
text
@d1 1
a1 1
$OpenBSD: patch-src_tree_c,v 1.1 2011/11/06 20:23:25 dcoppa Exp $
d3 3
a5 2
bugfix: correctly revert focus to other floating windows when closing
a floating window (git commit 4dbda7311480c231332a9dab9ed23d00abecb7e9)
d7 12
a18 66
bugfix: only change focus in tree_close() when the container was
focused before (git commit 2fe0949abd8b73a5dbc3c7f825982f79ecfa976d)

--- src/tree.c.orig	Sun Aug 28 19:48:13 2011
+++ src/tree.c	Fri Nov  4 16:06:18 2011
@@@@ -115,7 +115,7 @@@@ static bool _is_con_mapped(Con *con) {
  * and the window is expected to kill itself.
  *
  */
-bool tree_close(Con *con, kill_window_t kill_window, bool dont_kill_parent) {
+bool tree_close(Con *con, kill_window_t kill_window, bool dont_kill_parent, bool force_set_focus) {
     bool was_mapped = con->mapped;
     Con *parent = con->parent;
 
@@@@ -138,7 +138,7 @@@@ bool tree_close(Con *con, kill_window_t kill_window, b
     for (child = TAILQ_FIRST(&(con->nodes_head)); child; ) {
         nextchild = TAILQ_NEXT(child, nodes);
         DLOG("killing child=%p\n", child);
-        if (!tree_close(child, kill_window, true))
+        if (!tree_close(child, kill_window, true, false))
             abort_kill = true;
         child = nextchild;
     }
@@@@ -191,7 +191,7 @@@@ bool tree_close(Con *con, kill_window_t kill_window, b
     if (con_is_floating(con)) {
         Con *ws = con_get_workspace(con);
         DLOG("Container was floating, killing floating container\n");
-        tree_close(parent, DONT_KILL_WINDOW, false);
+        tree_close(parent, DONT_KILL_WINDOW, false, (con == focused));
         DLOG("parent container killed\n");
         if (con == focused) {
             DLOG("This is the focused container, i need to find another one to focus. I start looking at ws = %p\n", ws);
@@@@ -220,12 +220,13 @@@@ bool tree_close(Con *con, kill_window_t kill_window, b
     if (was_mapped || con == focused) {
         if ((kill_window != DONT_KILL_WINDOW) || !dont_kill_parent || con == focused) {
             DLOG("focusing %p / %s\n", next, next->name);
-            /* TODO: check if the container (or one of its children) was focused */
             if (next->type == CT_DOCKAREA) {
                 /* Instead of focusing the dockarea, we need to restore focus to the workspace */
                 con_focus(con_descend_focused(output_get_content(next->parent)));
             } else {
-                con_focus(next);
+                if (!force_set_focus && con != focused)
+                    DLOG("not changing focus, the container was not focused before\n");
+                else con_focus(next);
             }
         }
         else {
@@@@ -258,7 +259,7 @@@@ void tree_close_con(kill_window_t kill_window) {
     assert(focused->type != CT_ROOT);
 
     /* Kill con */
-    tree_close(focused, kill_window, false);
+    tree_close(focused, kill_window, false, false);
 }
 
 /*
@@@@ -548,7 +549,7 @@@@ void tree_flatten(Con *con) {
 
     /* 4: close the redundant cons */
     DLOG("closing redundant cons\n");
-    tree_close(con, DONT_KILL_WINDOW, true);
+    tree_close(con, DONT_KILL_WINDOW, true, false);
 
     /* Well, we got to abort the recursion here because we destroyed the
      * container. However, if tree_flatten() is called sufficiently often,
@


1.1
log
@Update to i3-4.0.2 (plus patches from upstream git).
i3bar is now part of i3 itself and i3-wsbar is gone.
@
text
@d1 1
a1 1
$OpenBSD$
@

