head	1.6;
access;
symbols
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2017.09.25.06.30.43;	author dcoppa;	state dead;
branches;
next	1.5;
commitid	XdoD9A6U49Y0B3KZ;

1.5
date	2017.09.13.12.50.33;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	ygjP2ceTncTZ5BPk;

1.4
date	2012.12.13.12.10.14;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2012.09.21.17.16.14;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.14.12.55.18;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2011.01.05.12.45.04;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
Bugfixing update to i3-4.14.1
@
text
@$OpenBSD: patch-src_sighandler_c,v 1.5 2017/09/13 12:50:33 dcoppa Exp $

commit 09ee12d8e5e1cd219493fde3393dbca10c0cc23f
Author: hwangcc23 <hwangcc@@csie.nctu.edu.tw>
Date:   Thu Aug 31 14:48:33 2017

Properly initialize sigaction struct

The code in handle_signal() wasn't clearing the struct sigaction
before passing it to sigaction().
This meant that we would block a random set of signals while executing
the default handler, or jump to the uninitialized __sa_sigaction__
(instead of sa_handler).
Initialize properly as we do in setup_signal_handler().

Index: src/sighandler.c
--- src/sighandler.c.orig
+++ src/sighandler.c
@@@@ -305,6 +305,8 @@@@ void handle_signal(int sig, siginfo_t *info, void *dat
 
     struct sigaction action;
     action.sa_handler = SIG_DFL;
+    action.sa_flags = 0;
+    sigemptyset(&action.sa_mask);
     sigaction(sig, &action, NULL);
     raised_signal = sig;
 
@


1.5
log
@
Merge fixes from upstream:

Check if con_id exists in cmd_swap
(git commit 369c9ed50f2b9fc2dc904db07907cd5f95f0a5ad)

Set marks to NULL after freeing
realloc() was being called on an already freed pointer.
(git commit b48cbe42af94cf69700843922e57c68b81f3fddd)

Properly initialize sigaction struct
(git commit 09ee12d8e5e1cd219493fde3393dbca10c0cc23f)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to i3-4.4
@
text
@d1 1
a1 1
$OpenBSD: patch-src_sighandler_c,v 1.3 2012/09/21 17:16:14 dcoppa Exp $
d3 3
a5 4
From 710478055881928c70f8c6c1411076eb06a92936 Mon Sep 17 00:00:00 2001
From: Michael Stapelberg <michael@@stapelberg.de>
Date: Thu, 20 Sep 2012 08:55:03 +0000
Subject: spelling fix: s/succesfully/successfully/
d7 13
a19 3
--- src/sighandler.c.orig	Fri Sep 21 13:40:19 2012
+++ src/sighandler.c	Fri Sep 21 13:41:27 2012
@@@@ -112,12 +112,12 @@@@ static int backtrace(void) {
d21 6
a26 1
     waitpid(pid_gdb, &status, 0);
a27 11
-    /* see if the backtrace was succesful or not */
+    /* see if the backtrace was successful or not */
     if (!WIFEXITED(status) || WEXITSTATUS(status) != 0) {
         DLOG("GDB did not run properly\n");
         return -1;
     } else if (stat(filename, &bt) == -1) {
-        DLOG("GDB executed succesfully, but no backtrace was generated\n");
+        DLOG("GDB executed successfully, but no backtrace was generated\n");
         return -1;
     }
     return 1;
@


1.3
log
@Update to i3-4.3

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to i3-3.e-bf2 (aka i3-3.5.2)
@
text
@d1 10
a10 9
$OpenBSD: patch-src_sighandler_c,v 1.1 2011/01/05 12:45:04 dcoppa Exp $
--- src/sighandler.c.orig	Wed Jan  5 13:03:19 2011
+++ src/sighandler.c	Wed Jan  5 13:04:31 2011
@@@@ -109,7 +109,6 @@@@ static int sig_handle_key_press(void *ignored, xcb_con
  *
  */
 static xcb_window_t open_input_window(xcb_connection_t *conn, Rect screen_rect, uint32_t width, uint32_t height) {
-        xcb_window_t root = xcb_setup_roots_iterator(xcb_get_setup(conn)).data->root;
         xcb_window_t win = xcb_generate_id(conn);
d12 13
a24 1
         uint32_t mask = 0;
@


1.1
log
@Various bugfixes for fullscreen windows, xcb, xinerama, and configfile
parsing.
All from upstream git.
@
text
@d1 1
a1 1
$OpenBSD$
@

