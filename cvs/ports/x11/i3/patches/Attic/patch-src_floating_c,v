head	1.22;
access;
symbols
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_5:1.19.0.2
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.22
date	2016.03.09.09.25.51;	author dcoppa;	state dead;
branches;
next	1.21;
commitid	5e0lb25PYzcoURwg;

1.21
date	2015.12.18.15.53.09;	author dcoppa;	state Exp;
branches;
next	1.20;
commitid	0OqseA58UoyREWdQ;

1.20
date	2014.04.15.10.31.30;	author dcoppa;	state dead;
branches;
next	1.19;

1.19
date	2014.01.11.16.04.43;	author dcoppa;	state Exp;
branches;
next	1.18;

1.18
date	2013.08.13.10.01.56;	author dcoppa;	state dead;
branches;
next	1.17;

1.17
date	2013.07.01.13.42.25;	author dcoppa;	state Exp;
branches;
next	1.16;

1.16
date	2012.12.13.12.10.13;	author dcoppa;	state dead;
branches;
next	1.15;

1.15
date	2012.11.13.08.44.02;	author dcoppa;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.01.08.12.17;	author dcoppa;	state Exp;
branches;
next	1.13;

1.13
date	2012.09.21.17.16.14;	author dcoppa;	state dead;
branches;
next	1.12;

1.12
date	2012.08.08.14.33.25;	author dcoppa;	state Exp;
branches;
next	1.11;

1.11
date	2012.05.09.11.56.49;	author dcoppa;	state dead;
branches;
next	1.10;

1.10
date	2012.03.23.08.43.54;	author dcoppa;	state Exp;
branches;
next	1.9;

1.9
date	2012.02.21.14.05.39;	author dcoppa;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.25.10.29.30;	author dcoppa;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.11.13.33.48;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.01.16.00.01;	author dcoppa;	state dead;
branches;
next	1.5;

1.5
date	2011.11.06.20.23.25;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.09.11.03.40;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2011.05.06.14.14.31;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.14.12.55.18;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2011.01.05.12.45.04;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.22
log
@
Update to i3-4.12
Added halex@@'s window hints fix
Fixed trailing whitespace in pkg/DESCR (spotted by Josh Grosse)

Tested by tb@@ and Josh Grosse
OK tb@@
@
text
@$OpenBSD: patch-src_floating_c,v 1.21 2015/12/18 15:53:09 dcoppa Exp $

Fix crash when trying to split and float a dock container.

--- src/floating.c.orig	Wed Sep 30 08:55:10 2015
+++ src/floating.c	Fri Dec 18 13:58:58 2015
@@@@ -108,7 +108,7 @@@@ void floating_check_size(Con *floating_con) {
 void floating_enable(Con *con, bool automatic) {
     bool set_focus = (con == focused);
 
-    if (con->parent && con->parent->type == CT_DOCKAREA) {
+    if (con_is_docked(con)) {
         LOG("Container is a dock window, not enabling floating mode.\n");
         return;
     }
@


1.21
log
@
Merge all the fixes from the git stable branch of i3
Regen WANTLIB while here
@
text
@d1 1
a1 1
$OpenBSD$
@


1.20
log
@
Cleanup following libxcb/xcb-util updates
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.19 2014/01/11 16:04:43 dcoppa Exp $
d3 1
a3 1
Revert to libXcursor
d5 5
a9 5
--- src/floating.c.orig	Sun Dec 22 21:12:41 2013
+++ src/floating.c	Fri Jan 10 16:40:03 2014
@@@@ -583,7 +583,7 @@@@ drag_result_t drag_pointer(Con *con, const xcb_button_
     if (con != NULL)
         memcpy(&old_rect, &(con->rect), sizeof(Rect));
d11 5
a15 5
-    xcb_cursor_t xcursor = (cursor && xcursor_supported) ?
+    Cursor xcursor = (cursor && xcursor_supported) ?
         xcursor_get_cursor(cursor) : XCB_NONE;
 
     /* Grab the pointer */
@


1.19
log
@Update to i3-4.7
@
text
@d1 1
a1 1
$OpenBSD$
@


1.18
log
@Update to i3-4.6

ok tobiasu@@, abieber@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.17 2013/07/01 13:42:25 dcoppa Exp $
d3 1
a3 3
commit b4f7142509e3af51504a1e72163d544d305f0fa8
Author: Michael Stapelberg <michael@@stapelberg.de>
Date:   Sat Jun 29 20:27:33 2013 +0200
d5 5
a9 17
Bugfix: fix focus handling in 'floating disable' on non-visible windows

fixes #1027

--- src/floating.c.orig	Mon Mar 18 22:43:36 2013
+++ src/floating.c	Mon Jul  1 15:26:35 2013
@@@@ -315,6 +315,8 @@@@ void floating_disable(Con *con, bool automatic) {
         return;
     }
 
+    const bool set_focus = (con == focused);
+
     Con *ws = con_get_workspace(con);
 
     /* 1: detach from parent container */
@@@@ -344,8 +346,9 @@@@ void floating_disable(Con *con, bool automatic) {
     con_attach(con, con->parent, false);
d11 3
a13 7
     con_fix_percent(con->parent);
-    // TODO: donâ€™t influence focus handling when Con was not focused before.
-    con_focus(con);
+
+    if (set_focus)
+        con_focus(con);
 }
d15 1
a15 1
 /*
@


1.17
log
@Some bugfixes from upstream:

i3-nagbar: Bugfix: -m requires an argument (crashes if none specified)
(upstream git commit 4765427f219c306f0872f124d0b1e2398bf8e39f)

i3-nagbar: call i3-nagbar correctly for configfiles without the font directive
(upstream git commit e8759691b8fdac7f964626c357dd6512a698ea2f)

Bugfix: fix focus handling in 'floating disable' on non-visible windows
(upstream git commit b4f7142509e3af51504a1e72163d544d305f0fa8)

Bugfix: Ignore spaces in front of default workspace name
(upstream git commit 625d5bdba6318377baa716ad5ea5a0b2f85b1c0e)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.16
log
@Update to i3-4.4
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.15 2012/11/13 08:44:02 dcoppa Exp $
d3 3
a5 8
From 8480b4cb58c30a5fa4ff9761aaed198efa8429f8 Mon Sep 17 00:00:00 2001
From: Michael Stapelberg <michael@@stapelberg.de>
Date: Fri, 28 Sep 2012 16:23:01 +0000
Subject: Bugfix: don't crash when dragged floating window closes
Previously, while the loop would not be executed anymore, the
callback (for actually repositioning the window after a MotionNotify)
would still get called once. This commit avoids that, thus fixing
the crash.
d7 17
a23 5
--- src/floating.c.orig	Wed Sep 19 18:08:09 2012
+++ src/floating.c	Mon Oct  1 09:42:59 2012
@@@@ -570,7 +570,7 @@@@ void drag_pointer(Con *con, const xcb_button_press_eve
                 free(inside_event);
         } while ((inside_event = xcb_poll_for_event(conn)) != NULL);
d25 7
a31 3
-        if (last_motion_notify == NULL)
+        if (last_motion_notify == NULL || loop_done)
             continue;
d33 1
a33 1
         new_x = ((xcb_motion_notify_event_t*)last_motion_notify)->root_x;
@


1.15
log
@Bugfix: fix workspace back_and_forth after displaying a scratchpad
window (upstream git commit 81393c93c2810e098966fe4089f3c8ea09f9cbe6)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.14 2012/10/01 08:12:17 dcoppa Exp $
@


1.14
log
@
Bugfix: don't crash when dragged floating window close

Bugfix: draw h-split indicator at the right position

Bugfix: Correctly move floating windows to invisible workspaces
cross-output

From upstream git
@
text
@d1 1
a1 1
$OpenBSD$
a6 1

@


1.13
log
@Update to i3-4.3

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.12 2012/08/08 14:33:25 dcoppa Exp $
d3 1
a3 1
From 74510c59c7db676f1228d054791e1e37456f6660 Mon Sep 17 00:00:00 2001
d5 2
a6 2
Date: Sat, 04 Aug 2012 13:33:50 +0000
Subject: floating_fix_coordinates: properly deal with negative positions
d8 14
a21 33
--- src/floating.c.orig	Wed Apr 25 23:21:25 2012
+++ src/floating.c	Wed Aug  8 15:39:37 2012
@@@@ -607,19 +607,24 @@@@ void floating_reposition(Con *con, Rect newrect) {
  *
  */
 void floating_fix_coordinates(Con *con, Rect *old_rect, Rect *new_rect) {
-    DLOG("Fixing coordinates of floating window %p\n", con);
+    DLOG("Fixing coordinates of floating window %p (rect (%d, %d), %d x %d)\n",
+         con, con->rect.x, con->rect.y, con->rect.width, con->rect.height);
+    DLOG("old_rect = (%d, %d), %d x %d\n",
+         old_rect->x, old_rect->y, old_rect->width, old_rect->height);
+    DLOG("new_rect = (%d, %d), %d x %d\n",
+         new_rect->x, new_rect->y, new_rect->width, new_rect->height);
     /* First we get the x/y coordinates relative to the x/y coordinates
      * of the output on which the window is on */
-    uint32_t rel_x = (con->rect.x - old_rect->x);
-    uint32_t rel_y = (con->rect.y - old_rect->y);
+    int32_t rel_x = (con->rect.x - old_rect->x);
+    int32_t rel_y = (con->rect.y - old_rect->y);
     /* Then we calculate a fraction, for example 0.63 for a window
      * which is at y = 1212 of a 1920 px high output */
-    double fraction_x = ((double)rel_x / old_rect->width);
-    double fraction_y = ((double)rel_y / old_rect->height);
+    double fraction_x = ((double)rel_x / (int32_t)old_rect->width);
+    double fraction_y = ((double)rel_y / (int32_t)old_rect->height);
     DLOG("rel_x = %d, rel_y = %d, fraction_x = %f, fraction_y = %f, output->w = %d, output->h = %d\n",
          rel_x, rel_y, fraction_x, fraction_y, old_rect->width, old_rect->height);
-    con->rect.x = new_rect->x + (fraction_x * new_rect->width);
-    con->rect.y = new_rect->y + (fraction_y * new_rect->height);
+    con->rect.x = (int32_t)new_rect->x + (fraction_x * (int32_t)new_rect->width);
+    con->rect.y = (int32_t)new_rect->y + (fraction_y * (int32_t)new_rect->height);
     DLOG("Resulting coordinates: x = %d, y = %d\n", con->rect.x, con->rect.y);
 }
d23 1
@


1.12
log
@
Bugfix: fix duplicate return value for 'resize' command
(upstream git commit 83dc5d5cb6c71d365cd79b376fcb073e9120144d)

floating_fix_coordinates: properly deal with negative positions
(upstream git commit 74510c59c7db676f1228d054791e1e37456f6660)

randr: fix a crash when the current output cannot be determined
(upstream git commit e867fd810516431f06af0799c90c0f833bf61219)

randr: properly fix floating coordinates when disabling outputs
(upstream git commit d57d51da6d040e8572159332224615f232c4645a)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.11
log
@Update to i3-4.2

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.10 2012/03/23 08:43:54 dcoppa Exp $
d3 4
a6 2
Bugfix: obey workspace_layout when re-inserting floating containers
(upstream git commit 4f98bbf5ffc18a7b53c5545ce403e4667d75a703)
d8 33
a40 24
Bugfix: Fix restart with for_window floating configuration
(upstream git commit afed6da0e5f555003ace074bf627c9a7e1c14106)

--- src/floating.c.orig	Fri Jan 27 20:24:09 2012
+++ src/floating.c	Fri Mar 23 09:16:41 2012
@@@@ -223,7 +223,7 @@@@ void floating_disable(Con *con, bool automatic) {
     /* 2: kill parent container */
     TAILQ_REMOVE(&(con->parent->parent->floating_head), con->parent, floating_windows);
     TAILQ_REMOVE(&(con->parent->parent->focus_head), con->parent, focused);
-    tree_close(con->parent, DONT_KILL_WINDOW, false, false);
+    tree_close(con->parent, DONT_KILL_WINDOW, true, false);
 
     /* 3: re-attach to the parent of the currently focused con on the workspace
      * this floating con was on */
@@@@ -238,10 +238,9 @@@@ void floating_disable(Con *con, bool automatic) {
     /* con_fix_percent will adjust the percent value */
     con->percent = 0.0;
 
-    TAILQ_INSERT_TAIL(&(con->parent->nodes_head), con, nodes);
-    TAILQ_INSERT_TAIL(&(con->parent->focus_head), con, focused);
-
     con->floating = FLOATING_USER_OFF;
+
+    con_attach(con, con->parent, false);
a41 2
     con_fix_percent(con->parent);
     // TODO: donâ€™t influence focus handling when Con was not focused before.
@


1.10
log
@
Fix i3bar when using multiple displays
(upstream git commit 8b4ad8c6bdc73d8950b9ac67316811377acbf7b3)

Fix cfgparse: leave EAT_WHITESPACE and BINDSYM_COND states on EOL
(upstream git commit 1f6fbaf240351a3559f25bc47286c47b29c1047f)

Fix restart with for_window floating configuration
(upstream git commit afed6da0e5f555003ace074bf627c9a7e1c14106)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.9 2012/02/21 14:05:39 dcoppa Exp $
@


1.9
log
@Update to i3-4.1.2
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.8 2012/01/25 10:29:30 dcoppa Exp $
d6 3
d10 10
a19 1
+++ src/floating.c	Tue Feb 21 14:24:56 2012
@


1.8
log
@Bugfix: setup the _NET_SUPPORTING_WM_CHECK atom in a standards-compliant
way. This makes chrome (and probably other apps, too) receive changes
of the _NET_ACTIVE_WINDOW and thus show its bookmark dialog properly
(upstream git commit 4f26d6f2a1a0efb7fa15999f9cc00d8673220e97)

Bugfix: only ignore EnterNotify events after UnmapNotifies from
managed windows. This fixes some focus follows mouse problems
(upstream git commit 47fd15649ad63f3becef8870276e51c6214300fc)

Bugfix: force a new sequence number after UnmapNotify. This fixes
the problem where legitimate EnterNotify arrived with the same
sequence as the UnmapNotify and was ignored
(upstream git commit 7a4d8ed6ed67c4d0d958458f58e4db1598c9cd75)

Bugfix: position floating windows exactly where their geometry
specified
(upstream git commit cb4c9b9d27a095047a5ac22ae75f6ee17475ba18)

Bugfix: fix coordinates when the rect of an output changes
(upstream git commit 077d2433a7186550ee349284b1849ec2048af69c)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.7 2012/01/11 13:33:48 dcoppa Exp $
d3 2
a4 2
Fix assignments of floating windows to (yet) unused workspaces
(upstream git commit 96c491a4885bf33802e1be883dbf5fe24bece650)
d6 10
a15 59
Bugfix: position floating windows exactly where their geometry
specified
(upstream git commit cb4c9b9d27a095047a5ac22ae75f6ee17475ba18)

Bugfix: fix coordinates when the rect of an output changes
(upstream git commit 077d2433a7186550ee349284b1849ec2048af69c)

--- src/floating.c.orig	Mon Jan 23 09:50:24 2012
+++ src/floating.c	Mon Jan 23 09:51:06 2012
@@@@ -82,9 +82,17 @@@@ void floating_enable(Con *con, bool automatic) {
      * otherwise. */
     Con *ws = con_get_workspace(con);
     nc->parent = ws;
+    nc->orientation = NO_ORIENTATION;
+    nc->type = CT_FLOATING_CON;
+    /* We insert nc already, even though its rect is not yet calculated. This
+     * is necessary because otherwise the workspace might be empty (and get
+     * closed in tree_close()) even though it's not. */
+    TAILQ_INSERT_TAIL(&(ws->floating_head), nc, floating_windows);
+    TAILQ_INSERT_TAIL(&(ws->focus_head), nc, focused);
 
     /* check if the parent container is empty and close it if so */
-    if ((con->parent->type == CT_CON || con->parent->type == CT_FLOATING_CON) && con_num_children(con->parent) == 0) {
+    if ((con->parent->type == CT_CON || con->parent->type == CT_FLOATING_CON) &&
+        con_num_children(con->parent) == 0) {
         DLOG("Old container empty after setting this child to floating, closing\n");
         tree_close(con->parent, DONT_KILL_WINDOW, false, false);
     }
@@@@ -158,10 +166,6 @@@@ void floating_enable(Con *con, bool automatic) {
     }
 
     DLOG("Floating rect: (%d, %d) with %d x %d\n", nc->rect.x, nc->rect.y, nc->rect.width, nc->rect.height);
-    nc->orientation = NO_ORIENTATION;
-    nc->type = CT_FLOATING_CON;
-    TAILQ_INSERT_TAIL(&(ws->floating_head), nc, floating_windows);
-    TAILQ_INSERT_TAIL(&(ws->focus_head), nc, focused);
 
     /* 3: attach the child to the new parent container */
     con->parent = nc;
@@@@ -172,6 +176,14 @@@@ void floating_enable(Con *con, bool automatic) {
     if (automatic)
         con->border_style = config.default_floating_border;
 
+    /* 5: Subtract the deco_height in order to make the floating window appear
+     * at precisely the position it specified in its original geometry (which
+     * is what applications might remember). */
+    deco_height = (con->border_style == BS_NORMAL ? config.font.height + 5 : 0);
+    nc->rect.y -= deco_height;
+
+    DLOG("Corrected y = %d (deco_height = %d)\n", nc->rect.y, deco_height);
+
     TAILQ_INSERT_TAIL(&(nc->nodes_head), con, nodes);
     TAILQ_INSERT_TAIL(&(nc->focus_head), con, focused);
 
@@@@ -537,6 +549,28 @@@@ void floating_reposition(Con *con, Rect newrect) {
 
     floating_maybe_reassign_ws(con);
     tree_render();
+}
d17 1
a17 21
+/*
+ * Fixes the coordinates of the floating window whenever the window gets
+ * reassigned to a different output (or when the output's rect changes).
+ *
+ */
+void floating_fix_coordinates(Con *con, Rect *old_rect, Rect *new_rect) {
+    DLOG("Fixing coordinates of floating window %p\n", con);
+    /* First we get the x/y coordinates relative to the x/y coordinates
+     * of the output on which the window is on */
+    uint32_t rel_x = (con->rect.x - old_rect->x);
+    uint32_t rel_y = (con->rect.y - old_rect->y);
+    /* Then we calculate a fraction, for example 0.63 for a window
+     * which is at y = 1212 of a 1920 px high output */
+    double fraction_x = ((double)rel_x / old_rect->width);
+    double fraction_y = ((double)rel_y / old_rect->height);
+    DLOG("rel_x = %d, rel_y = %d, fraction_x = %f, fraction_y = %f, output->w = %d, output->h = %d\n",
+         rel_x, rel_y, fraction_x, fraction_y, old_rect->width, old_rect->height);
+    con->rect.x = new_rect->x + (fraction_x * new_rect->width);
+    con->rect.y = new_rect->y + (fraction_y * new_rect->height);
+    DLOG("Resulting coordinates: x = %d, y = %d\n", con->rect.x, con->rect.y);
 }
d19 2
a20 1
 #if 0
@


1.7
log
@
Bugfix: don't lose focus on fullscreen windows when another window
gets moved to that workspace
(upstream git commit f78caf8c5815ae7a66de9e4b734546fd740cc19d)

Bugfix: open new windows in the correct place when assignments match
(upstream git commit d4238c778a199ad88ebe8540904d98f81f110621)

Fix assignments of floating windows to (yet) unused workspaces
(upstream git commit 96c491a4885bf33802e1be883dbf5fe24bece650)
@
text
@d1 1
a1 1
$OpenBSD$
d6 9
a14 2
--- src/floating.c.orig	Wed Jan 11 14:18:12 2012
+++ src/floating.c	Wed Jan 11 14:19:35 2012
d45 44
@


1.6
log
@Major update to i3-4.1
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.5 2011/11/06 20:23:25 dcoppa Exp $
d3 2
a4 2
bugfix: don't use top border height twice when calculating dimensions
for floating windows (git commit f6eaa8a5807a43f3c682e1e7b25be9eafa06cce2)
d6 14
a19 12
bugfix: honor the X11 window border when calculating dimensions for
floating windows (git commit 983a6795375d1c49da55e7bfc5e90dfb34bc03b3)

bugfix: correctly revert focus to other floating windows when closing
a floating window (git commit 4dbda7311480c231332a9dab9ed23d00abecb7e9)

bugfix: don't fix floating coordinates when reassigning - fixes
flickering (upstream git commit 6b541d382b89de18104202e5820f466725d77576)

--- src/floating.c.orig	Sun Aug 28 19:48:13 2011
+++ src/floating.c	Fri Nov  4 16:16:52 2011
@@@@ -91,7 +91,7 @@@@ void floating_enable(Con *con, bool automatic) {
d21 3
a23 1
     if ((con->parent->type == CT_CON || con->parent->type == CT_FLOATING_CON) && con_num_children(con->parent) == 0) {
d25 3
a27 2
-        tree_close(con->parent, DONT_KILL_WINDOW, false);
+        tree_close(con->parent, DONT_KILL_WINDOW, false, false);
d30 5
a34 29
     char *name;
@@@@ -103,6 +103,7 @@@@ void floating_enable(Con *con, bool automatic) {
     int deco_height = config.font.height + 5;
 
     DLOG("Original rect: (%d, %d) with %d x %d\n", con->rect.x, con->rect.y, con->rect.width, con->rect.height);
+    DLOG("Geometry = (%d, %d) with %d x %d\n", con->geometry.x, con->geometry.y, con->geometry.width, con->geometry.height);
     Rect zero = { 0, 0, 0, 0 };
     nc->rect = con->geometry;
     /* If the geometry was not set (split containers), we need to determine a
@@@@ -122,9 +123,12 @@@@ void floating_enable(Con *con, bool automatic) {
     /* add pixels for the decoration */
     /* TODO: donâ€™t add them when the user automatically puts new windows into
      * 1pixel/borderless mode */
-    nc->rect.height += deco_height + 4;
+    nc->rect.height += deco_height + 2;
     nc->rect.width += 4;
 
+    nc->rect.height += con->border_width * 2;
+    nc->rect.width += con->border_width * 2;
+
     /* Some clients (like GIMPâ€™s color picker window) get mapped
      * to (0, 0), so we push them to a reasonable position
      * (centered over their leader) */
@@@@ -207,7 +211,7 @@@@ void floating_disable(Con *con, bool automatic) {
     /* 2: kill parent container */
     TAILQ_REMOVE(&(con->parent->parent->floating_head), con->parent, floating_windows);
     TAILQ_REMOVE(&(con->parent->parent->focus_head), con->parent, focused);
-    tree_close(con->parent, DONT_KILL_WINDOW, false);
+    tree_close(con->parent, DONT_KILL_WINDOW, false, false);
d36 2
a37 11
     /* 3: re-attach to the parent of the currently focused con on the workspace
      * this floating con was on */
@@@@ -286,7 +290,7 @@@@ bool floating_maybe_reassign_ws(Con *con) {
     Con *content = output_get_content(output->con);
     Con *ws = TAILQ_FIRST(&(content->focus_head));
     DLOG("Moving con %p / %s to workspace %p / %s\n", con, con->name, ws, ws->name);
-    con_move_to_workspace(con, ws, true);
+    con_move_to_workspace(con, ws, false, true);
     con_focus(con_descend_focused(con));
     return true;
 }
@


1.5
log
@Update to i3-4.0.2 (plus patches from upstream git).
i3bar is now part of i3 itself and i3-wsbar is gone.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to i3-3.e-bf3 (i3-3.5.3)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_floating_c,v 1.3 2011/05/06 14:14:31 dcoppa Exp $
d3 2
a4 2
Fix a pasto in the floating_resize_window function
(Commit ef3e241b78e9ed856d01608c24a223b82132403c)
d6 22
a27 3
--- src/floating.c.orig	Fri May  6 16:05:12 2011
+++ src/floating.c	Fri May  6 16:06:33 2011
@@@@ -361,7 +361,7 @@@@ void floating_resize_window(xcb_connection_t *conn, Cl
d29 12
a40 4
         if (event->event_y <= (client->rect.height / 2))
                 corner |= BORDER_TOP;
-        else corner |= BORDER_RIGHT;
+        else corner |= BORDER_BOTTOM;
d42 12
a53 1
         struct resize_window_callback_params params = { corner, proportional, event };
d55 11
@


1.3
log
@- New HOMEPAGE
- Fix a pasto in the floating_resize_window function
  (from upstream git)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to i3-3.e-bf2 (aka i3-3.5.2)
@
text
@d1 16
a16 11
$OpenBSD: patch-src_floating_c,v 1.1 2011/01/05 12:45:04 dcoppa Exp $
--- src/floating.c.orig	Wed Jan  5 13:03:09 2011
+++ src/floating.c	Wed Jan  5 13:03:48 2011
@@@@ -379,7 +379,6 @@@@ void floating_resize_window(xcb_connection_t *conn, Cl
  */
 void drag_pointer(xcb_connection_t *conn, Client *client, xcb_button_press_event_t *event,
                   xcb_window_t confine_to, border_t border, callback_t callback, void *extra) {
-        xcb_window_t root = xcb_setup_roots_iterator(xcb_get_setup(conn)).data->root;
         uint32_t new_x, new_y;
         Rect old_rect;
         if (client != NULL)
@


1.1
log
@Various bugfixes for fullscreen windows, xcb, xinerama, and configfile
parsing.
All from upstream git.
@
text
@d1 1
a1 1
$OpenBSD$
@

