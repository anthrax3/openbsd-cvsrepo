head	1.17;
access;
symbols
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.17
date	2014.01.11.16.04.43;	author dcoppa;	state dead;
branches;
next	1.16;

1.16
date	2013.10.10.16.34.58;	author dcoppa;	state Exp;
branches;
next	1.15;

1.15
date	2013.09.25.09.58.14;	author dcoppa;	state Exp;
branches;
next	1.14;

1.14
date	2013.09.02.06.15.34;	author dcoppa;	state Exp;
branches;
next	1.13;

1.13
date	2013.08.13.10.01.57;	author dcoppa;	state Exp;
branches;
next	1.12;

1.12
date	2013.05.16.18.42.30;	author dcoppa;	state dead;
branches;
next	1.11;

1.11
date	2012.12.27.19.58.05;	author dcoppa;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.21.17.16.14;	author dcoppa;	state dead;
branches;
next	1.9;

1.9
date	2012.06.28.09.33.06;	author dcoppa;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.21.14.05.39;	author dcoppa;	state dead;
branches;
next	1.7;

1.7
date	2012.01.25.10.29.30;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.20.15.53.18;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2011.12.27.09.05.17;	author dcoppa;	state dead;
branches;
next	1.4;

1.4
date	2011.12.01.16.00.01;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.06.20.23.25;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.14.12.55.18;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2011.01.05.12.45.04;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Update to i3-4.7
@
text
@$OpenBSD: patch-src_handlers_c,v 1.16 2013/10/10 16:34:58 dcoppa Exp $

commit 0b168ee499e6065969ddd3359f95dfdf7e14350c
Author: Kacper Kowalik (Xarthisius) <xarthisius@@gentoo.org>
Date:   Thu Aug 8 20:48:21 2013 +0200

Include float.h for DBL_EPSILON

commit 93463bc3932e820bc86383fc4de1a07c82356967
Author: Michael Stapelberg <michael@@stapelberg.de>
Date:   Fri Aug 30 19:59:57 2013 +0200

Bugfix: update root geometry on output changes for "fullscreen global"

commit 05e46848f07460f18574d51eba0b182b177ab2d2
Author: Tony Crisci <tony@@dubstepdish.com>
Date:   Wed Oct 9 12:49:15 2013 -0400

Reply to _NET_REQUEST_FRAME_EXTENTS correctly

Reply to _NET_REQUEST_FRAME_EXTENTS by settings _NET_FRAME_EXTENTS
property of the window to the widths of the respective borders added
by i3.

commit 1a1d42153408822d267d0cb4718b22d8ff116f27
Author: Michael Stapelberg <michael@@stapelberg.de>
Date:   Tue Sep 24 07:47:36 2013 +0200

Bugfix: correctly recognize assigned windows as urgent

--- src/handlers.c.orig	Wed Aug  7 20:50:24 2013
+++ src/handlers.c	Thu Oct 10 18:11:55 2013
@@@@ -13,6 +13,7 @@@@
 #include "all.h"
 
 #include <time.h>
+#include <float.h>
 #include <sys/time.h>
 #include <xcb/randr.h>
 #include <X11/XKBlib.h>
@@@@ -422,6 +423,19 @@@@ int handle_configure_event(void *prophs, xcb_connectio
 static void handle_screen_change(xcb_generic_event_t *e) {
     DLOG("RandR screen change\n");
 
+    /* The geometry of the root window is used for "fullscreen global" and
+     * changes when new outputs are added. */
+    xcb_get_geometry_cookie_t cookie = xcb_get_geometry(conn, root);
+    xcb_get_geometry_reply_t *reply = xcb_get_geometry_reply(conn, cookie, NULL);
+    if (reply == NULL) {
+        ELOG("Could not get geometry of the root window, exiting\n");
+        exit(1);
+    }
+    DLOG("root geometry reply: (%d, %d) %d x %d\n", reply->x, reply->y, reply->width, reply->height);
+
+    croot->rect.width = reply->width;
+    croot->rect.height = reply->height;
+
     randr_query_outputs();
 
     scratchpad_fix_resolution();
@@@@ -703,24 +717,13 @@@@ static void handle_client_message(xcb_client_message_e
         // says the application must cope with an estimate that is not entirely
         // accurate.
         DLOG("_NET_REQUEST_FRAME_EXTENTS for window 0x%08x\n", event->window);
-        xcb_get_geometry_reply_t *geometry;
-        xcb_get_geometry_cookie_t cookie = xcb_get_geometry(conn, event->window);
 
-        if (!(geometry = xcb_get_geometry_reply(conn, cookie, NULL))) {
-            ELOG("Could not get geometry of X11 window 0x%08x while handling "
-                 "the _NET_REQUEST_FRAME_EXTENTS ClientMessage\n",
-                 event->window);
-            return;
-        }
-
-        DLOG("Current geometry = x=%d, y=%d, width=%d, height=%d\n",
-             geometry->x, geometry->y, geometry->width, geometry->height);
-
+        /* The reply data: approximate frame size */
         Rect r = {
-            0, // left
-            geometry->width + 4, // right
-            0, // top
-            geometry->height + config.font.height + 5, // bottom
+            config.default_border_width, /* left */
+            config.default_border_width, /* right */
+            config.font.height + 5, /* top */
+            config.default_border_width /* bottom */
         };
         xcb_change_property(
                 conn,
@@@@ -869,24 +872,13 @@@@ static bool handle_hints(void *data, xcb_connection_t 
         return false;
     }
 
-    xcb_icccm_wm_hints_t hints;
-
+    bool urgency_hint;
     if (reply == NULL)
-        if (!(reply = xcb_get_property_reply(conn, xcb_icccm_get_wm_hints(conn, window), NULL)))
-            return false;
-
-    if (!xcb_icccm_get_wm_hints_from_reply(&hints, reply))
-        return false;
-
-    /* Update the flag on the client directly */
-    bool hint_urgent = (xcb_icccm_wm_hints_get_urgency(&hints) != 0);
-    con_set_urgency(con, hint_urgent);
-
+        reply = xcb_get_property_reply(conn, xcb_icccm_get_wm_hints(conn, window), NULL);
+    window_update_hints(con->window, reply, &urgency_hint);
+    con_set_urgency(con, urgency_hint);
     tree_render();
 
-    if (con->window)
-        window_update_hints(con->window, reply);
-    else free(reply);
     return true;
 }
 
@


1.16
log
@Reply to _NET_REQUEST_FRAME_EXTENTS correctly.
Reply to _NET_REQUEST_FRAME_EXTENTS by settings _NET_FRAME_EXTENTS
property of the window to the widths of the respective borders added
by i3.
(upstream git commit 05e46848f07460f18574d51eba0b182b177ab2d2)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.15 2013/09/25 09:58:14 dcoppa Exp $
@


1.15
log
@
Bugfix: correctly recognize assigned windows as urgent

http://bugs.i3wm.org/report/ticket/1086

upstream git commit 1a1d42153408822d267d0cb4718b22d8ff116f27
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.14 2013/09/02 06:15:34 dcoppa Exp $
d15 10
d32 1
a32 1
+++ src/handlers.c	Wed Sep 25 11:37:50 2013
d61 31
a91 1
@@@@ -869,24 +883,13 @@@@ static bool handle_hints(void *data, xcb_connection_t 
@


1.14
log
@
Revert "raise fullscreen windows on top of all other X11 windows"
It was a fix for dzen2 setups, but broke several other use cases
(upstream git commit 103ab83131d30614ea9337e752548a834773bfc6)

Bugfix: update root geometry on output changes for "fullscreen global"
(upstream git commit 93463bc3932e820bc86383fc4de1a07c82356967)

Bugfix: don't flatten tabbed/stacked containers
(upstream git commit 2481b9dcd73e91969033abb2b6f83aed608aeea1)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.13 2013/08/13 10:01:57 dcoppa Exp $
d15 6
d22 1
a22 1
+++ src/handlers.c	Mon Sep  2 07:46:48 2013
d31 1
a31 2
@@@@ -421,6 +422,19 @@@@ int handle_configure_event(void *prophs, xcb_connectio
  */
d34 1
a34 1
+
d47 7
d55 24
a78 1
     randr_query_outputs();
@


1.13
log
@Update to i3-4.6

ok tobiasu@@, abieber@@
@
text
@d1 1
a1 1
$OpenBSD$
d9 8
a16 2
--- src/handlers.c.orig	Mon Aug 12 15:42:17 2013
+++ src/handlers.c	Mon Aug 12 15:42:38 2013
d25 20
@


1.12
log
@Update to i3-4.5.1

ok jasper@@, abieber@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.11 2012/12/27 19:58:05 dcoppa Exp $
d3 3
a5 2
Bugfix: ignore ConfigureRequests for scratchpad windows
(upstream git commit 36b106a9d39727b06909113e3f11552f2f1b6abe)
d7 6
a12 12
--- src/handlers.c.orig	Wed Dec 12 00:08:17 2012
+++ src/handlers.c	Thu Dec 27 18:09:49 2012
@@@@ -349,6 +349,11 @@@@ static void handle_configure_request(xcb_configure_req
         }
         Con *floatingcon = con->parent;
 
+        if (strcmp(con_get_workspace(floatingcon)->name, "__i3_scratch") == 0) {
+            DLOG("This is a scratchpad container, ignoring ConfigureRequest\n");
+            return;
+        }
+
         Rect newrect = floatingcon->rect;
d14 5
a18 1
         if (event->value_mask & XCB_CONFIG_WINDOW_X) {
@


1.11
log
@Fixes, fixes, fixes:

i3-input: restore input focus on exit()
(upstream git commit 5779f573e7316664e4bff9d3ff17a234edc9d337)

Repect AR environment variable
(upstream git commit ef81bd183b579688b9f1a46a41c817b577d0b39e)

Fix scrolling on a tabbed titlebar which contains split cons
(upstream git commit 721fa7bdadac6d7f0c78f8c1eac0e66252ba2dc6)

Bugfix: ignore ConfigureRequests for scratchpad windows
(upstream git commit 36b106a9d39727b06909113e3f11552f2f1b6abe)

Bugfix: handle MapRequests sent between i3 registering as a wm and
handling events
(upstream git commit 625401d1628757a67a2ab4eeaa68be965683889c)

Bugfix: draw right tab border for split containers
(upstream git commit ae605bdd394bdf83a8015ac626b222fd40e35b04)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.10
log
@Update to i3-4.3

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.9 2012/06/28 09:33:06 dcoppa Exp $
d3 2
a4 4
From 6e9bbe67ce5f02ff6ac24889e5a215ee46247c32 Mon Sep 17 00:00:00 2001
From: Michael Stapelberg <michael@@stapelberg.de>
Date: Wed, 27 Jun 2012 15:48:22 +0000
Subject: Bugfix: fix reload crashes in rare cases
d6 3
a8 3
--- src/handlers.c.orig	Wed Apr 25 23:21:25 2012
+++ src/handlers.c	Thu Jun 28 10:58:57 2012
@@@@ -119,7 +119,9 @@@@ static void handle_key_press(xcb_key_press_event_t *ev
d10 1
a10 1
     }
d12 6
a17 4
-    struct CommandResult *command_output = parse_command(bind->command);
+    char *command_copy = sstrdup(bind->command);
+    struct CommandResult *command_output = parse_command(command_copy);
+    free(command_copy);
d19 1
a19 2
     if (command_output->needs_tree_render)
         tree_render();
@


1.9
log
@
Parser fix: reorder v/h/vertical/horizontal
This eliminates an error message upon split horizontal which did
not occur in older i3 versions.
(upstream git commit f0b56c5e98a152cb65e8d1935a83707b5d87e30d)

Bugfix: fix reload crashes in rare cases
Depending on the memory layout, it could happen that bind->command
was exchanged with something else while the parser still accessed
it.
Therefore, copy the command and let the parser use that copy.
(upstream git commit 6e9bbe67ce5f02ff6ac24889e5a215ee46247c32)

Fix: when using i3 -C, don't send remaining arguments via IPC
(upstream git commit 6146f39b8a253bc84bc5ce1feb2e3cabc50d71ba)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.8
log
@Update to i3-4.1.2
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.7 2012/01/25 10:29:30 dcoppa Exp $
d3 4
a6 3
Bugfix: respect WM_HINTS.input for WM_TAKE_FOCUS clients. This fixes
problems with some Qt apps
(upstream git commit 2d14ced024416e2074b57290bf7dade7d08899e5)
d8 3
a10 43
Bugfix: only ignore EnterNotify events after UnmapNotifies from
managed windows. This fixes some focus follows mouse problems
(upstream git commit 47fd15649ad63f3becef8870276e51c6214300fc)

Bugfix: force a new sequence number after UnmapNotify. This fixes
the problem where legitimate EnterNotify arrived with the same
sequence as the UnmapNotify and was ignored
(upstream git commit 7a4d8ed6ed67c4d0d958458f58e4db1598c9cd75)

--- src/handlers.c.orig	Mon Jan 23 09:50:24 2012
+++ src/handlers.c	Mon Jan 23 09:51:06 2012
@@@@ -457,23 +457,9 @@@@ static int handle_screen_change(xcb_generic_event_t *e
  * now, so we better clean up before.
  *
  */
-static int handle_unmap_notify_event(xcb_unmap_notify_event_t *event) {
-    /* If the client (as opposed to i3) destroyed or unmapped a window, an
-     * EnterNotify event will follow (indistinguishable from an EnterNotify
-     * event caused by moving your mouse), causing i3 to set focus to whichever
-     * window is now visible.
-     *
-     * In a complex stacked or tabbed layout (take two v-split containers in a
-     * tabbed container), when the bottom window in tab2 is closed, the bottom
-     * window of tab1 is visible instead. X11 will thus send an EnterNotify
-     * event for the bottom window of tab1, while the focus should be set to
-     * the remaining window of tab2.
-     *
-     * Therefore, we ignore all EnterNotify events which have the same sequence
-     * as an UnmapNotify event. */
-    add_ignore_event(event->sequence, XCB_ENTER_NOTIFY);
-
+static void handle_unmap_notify_event(xcb_unmap_notify_event_t *event) {
     DLOG("UnmapNotify for 0x%08x (received from 0x%08x), serial %d\n", event->window, event->event, event->sequence);
+    xcb_get_input_focus_cookie_t cookie;
     Con *con = con_by_window_id(event->window);
     if (con == NULL) {
         /* This could also be an UnmapNotify for the frame. We need to
@@@@ -481,63 +467,52 @@@@ static int handle_unmap_notify_event(xcb_unmap_notify_
         con = con_by_frame_id(event->window);
         if (con == NULL) {
             LOG("Not a managed window, ignoring UnmapNotify event\n");
-            return 1;
+            return;
a11 8
+
         if (con->ignore_unmap > 0)
             con->ignore_unmap--;
+        /* See the end of this function. */
+        cookie = xcb_get_input_focus(conn);
         DLOG("ignore_unmap = %d for frame of container %p\n", con->ignore_unmap, con);
-        return 1;
+        goto ignore_end;
d14 4
a17 141
+    /* See the end of this function. */
+    cookie = xcb_get_input_focus(conn);
+
     if (con->ignore_unmap > 0) {
         DLOG("ignore_unmap = %d, dec\n", con->ignore_unmap);
         con->ignore_unmap--;
-        return 1;
+        goto ignore_end;
     }
 
     tree_close(con, DONT_KILL_WINDOW, false, false);
     tree_render();
     x_push_changes(croot);
-    return 1;
 
-#if 0
-        if (client == NULL) {
-                DLOG("not a managed window. Ignoring.\n");
+ignore_end:
+    /* If the client (as opposed to i3) destroyed or unmapped a window, an
+     * EnterNotify event will follow (indistinguishable from an EnterNotify
+     * event caused by moving your mouse), causing i3 to set focus to whichever
+     * window is now visible.
+     *
+     * In a complex stacked or tabbed layout (take two v-split containers in a
+     * tabbed container), when the bottom window in tab2 is closed, the bottom
+     * window of tab1 is visible instead. X11 will thus send an EnterNotify
+     * event for the bottom window of tab1, while the focus should be set to
+     * the remaining window of tab2.
+     *
+     * Therefore, we ignore all EnterNotify events which have the same sequence
+     * as an UnmapNotify event. */
+    add_ignore_event(event->sequence, XCB_ENTER_NOTIFY);
 
-                /* This was most likely the destroyed frame of a client which is
-                 * currently being unmapped, so we add this sequence (again!) to
-                 * the ignore list (enter_notify events will get sent for both,
-                 * the child and its frame). */
-                add_ignore_event(event->sequence);
-
-                return 0;
-        }
-#endif
-
-
-#if 0
-        /* Let’s see how many clients there are left on the workspace to delete it if it’s empty */
-        bool workspace_empty = SLIST_EMPTY(&(client->workspace->focus_stack));
-        bool workspace_focused = (c_ws == client->workspace);
-        Client *to_focus = (!workspace_empty ? SLIST_FIRST(&(client->workspace->focus_stack)) : NULL);
-
-        /* If this workspace is currently visible, we don’t delete it */
-        if (workspace_is_visible(client->workspace))
-                workspace_empty = false;
-
-        if (workspace_empty) {
-                client->workspace->output = NULL;
-                ipc_send_event("workspace", I3_IPC_EVENT_WORKSPACE, "{\"change\":\"empty\"}");
-        }
-
-        /* Remove the urgency flag if set */
-        client->urgent = false;
-        workspace_update_urgent_flag(client->workspace);
-
-        render_layout(conn);
-#endif
-
-        return 1;
+    /* Since we just ignored the sequence of this UnmapNotify, we want to make
+     * sure that following events use a different sequence. When putting xterm
+     * into fullscreen and moving the pointer to a different window, without
+     * using GetInputFocus, subsequent (legitimate) EnterNotify events arrived
+     * with the same sequence and thus were ignored (see ticket #609). */
+    free(xcb_get_input_focus_reply(conn, cookie, NULL));
 }
 
 /*
@@@@ -549,7 +524,7 @@@@ static int handle_unmap_notify_event(xcb_unmap_notify_
  * important fields in the event data structure).
  *
  */
-static int handle_destroy_notify_event(xcb_destroy_notify_event_t *event) {
+static void handle_destroy_notify_event(xcb_destroy_notify_event_t *event) {
     DLOG("destroy notify for 0x%08x, 0x%08x\n", event->event, event->window);
 
     xcb_unmap_notify_event_t unmap;
@@@@ -557,7 +532,7 @@@@ static int handle_destroy_notify_event(xcb_destroy_not
     unmap.event = event->event;
     unmap.window = event->window;
 
-    return handle_unmap_notify_event(&unmap);
+    handle_unmap_notify_event(&unmap);
 }
 
 /*
@@@@ -855,18 +830,16 @@@@ static bool handle_hints(void *data, xcb_connection_t 
 
     xcb_icccm_wm_hints_t hints;
 
-    if (reply != NULL) {
-        if (!xcb_icccm_get_wm_hints_from_reply(&hints, reply))
+    if (reply == NULL)
+        if (!(reply = xcb_get_property_reply(conn, xcb_icccm_get_wm_hints(conn, window), NULL)))
             return false;
-    } else {
-        if (!xcb_icccm_get_wm_hints_reply(conn, xcb_icccm_get_wm_hints_unchecked(conn, con->window->id), &hints, NULL))
-            return false;
-    }
 
+    if (!xcb_icccm_get_wm_hints_from_reply(&hints, reply))
+        return false;
+
     if (!con->urgent && focused == con) {
         DLOG("Ignoring urgency flag for current client\n");
-        FREE(reply);
-        return true;
+        goto end;
     }
 
     /* Update the flag on the client directly */
@@@@ -882,17 +855,10 @@@@ static bool handle_hints(void *data, xcb_connection_t 
 
     tree_render();
 
-#if 0
-    /* If the workspace this client is on is not visible, we need to redraw
-     * the workspace bar */
-    if (!workspace_is_visible(client->workspace)) {
-            Output *output = client->workspace->output;
-            render_workspace(conn, output, output->current_workspace);
-            xcb_flush(conn);
-    }
-#endif
-
-    FREE(reply);
+end:
+    if (con->window)
+        window_update_hints(con->window, reply);
+    else free(reply);
     return true;
 }
d19 2
@


1.7
log
@Bugfix: setup the _NET_SUPPORTING_WM_CHECK atom in a standards-compliant
way. This makes chrome (and probably other apps, too) receive changes
of the _NET_ACTIVE_WINDOW and thus show its bookmark dialog properly
(upstream git commit 4f26d6f2a1a0efb7fa15999f9cc00d8673220e97)

Bugfix: only ignore EnterNotify events after UnmapNotifies from
managed windows. This fixes some focus follows mouse problems
(upstream git commit 47fd15649ad63f3becef8870276e51c6214300fc)

Bugfix: force a new sequence number after UnmapNotify. This fixes
the problem where legitimate EnterNotify arrived with the same
sequence as the UnmapNotify and was ignored
(upstream git commit 7a4d8ed6ed67c4d0d958458f58e4db1598c9cd75)

Bugfix: position floating windows exactly where their geometry
specified
(upstream git commit cb4c9b9d27a095047a5ac22ae75f6ee17475ba18)

Bugfix: fix coordinates when the rect of an output changes
(upstream git commit 077d2433a7186550ee349284b1849ec2048af69c)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.6 2012/01/20 15:53:18 dcoppa Exp $
@


1.6
log
@Bugfix: respect WM_HINTS.input for WM_TAKE_FOCUS clients. This fixes
problems with some Qt apps
(upstream git commit 2d14ced024416e2074b57290bf7dade7d08899e5)

Bugfix: either use SetInputFocus *or* send WM_TAKE_FOCUS, not both.
This fixes problems with Oracle/OpenJDK JRE 7.0
(upstream git commit 21a2971b2442ab0881cf79553cc6b65bbb44afa7)
@
text
@d1 1
a1 1
$OpenBSD$
d7 150
a156 3
--- src/handlers.c.orig	Sat Dec 24 16:25:08 2011
+++ src/handlers.c	Fri Jan 20 14:29:55 2012
@@@@ -855,18 +855,16 @@@@ static bool handle_hints(void *data, xcb_connection_t 
d181 1
a181 1
@@@@ -882,17 +880,10 @@@@ static bool handle_hints(void *data, xcb_connection_t 
@


1.5
log
@Bugfixing update to i3-4.1.1
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.4 2011/12/01 16:00:01 dcoppa Exp $
d3 3
a5 3
Bugfix: ignore EnterNotify events to prevent wrong focus in complex
tabbed/stacked layouts
(upstream git commit bd4b240d56df08bc255a09c9cb0d98b457c785dc)
d7 18
a24 36
Bugfix: skip dock clients when handling FocusIn events
(upstream git commit 5f8d719835832a91232d0331a25512e9a0853494)

--- src/handlers.c.orig	Fri Nov 11 23:41:20 2011
+++ src/handlers.c	Thu Dec  1 13:58:48 2011
@@@@ -452,10 +452,20 @@@@ static int handle_screen_change(xcb_generic_event_t *e
  *
  */
 static int handle_unmap_notify_event(xcb_unmap_notify_event_t *event) {
-    // XXX: this is commented out because in src/x.c we disable EnterNotify events
-    /* we need to ignore EnterNotify events which will be generated because a
-     * different window is visible now */
-    //add_ignore_event(event->sequence, XCB_ENTER_NOTIFY);
+    /* If the client (as opposed to i3) destroyed or unmapped a window, an
+     * EnterNotify event will follow (indistinguishable from an EnterNotify
+     * event caused by moving your mouse), causing i3 to set focus to whichever
+     * window is now visible.
+     *
+     * In a complex stacked or tabbed layout (take two v-split containers in a
+     * tabbed container), when the bottom window in tab2 is closed, the bottom
+     * window of tab1 is visible instead. X11 will thus send an EnterNotify
+     * event for the bottom window of tab1, while the focus should be set to
+     * the remaining window of tab2.
+     *
+     * Therefore, we ignore all EnterNotify events which have the same sequence
+     * as an UnmapNotify event. */
+    add_ignore_event(event->sequence, XCB_ENTER_NOTIFY);
 
     DLOG("UnmapNotify for 0x%08x (received from 0x%08x), serial %d\n", event->window, event->event, event->sequence);
     Con *con = con_by_window_id(event->window);
@@@@ -965,6 +975,12 @@@@ static int handle_focus_in(xcb_focus_in_event_t *event
 
     if (focused_id == event->event) {
         DLOG("focus matches the currently focused window, not doing anything\n");
+        return 1;
+    }
d26 5
a30 4
+    /* Skip dock clients, they cannot get the i3 focus. */
+    if (con->parent->type == CT_DOCKAREA) {
+        DLOG("This is a dock client, not focusing.\n");
         return 1;
d32 23
@


1.4
log
@Major update to i3-4.1
@
text
@d1 1
a1 1
$OpenBSD: patch-src_handlers_c,v 1.3 2011/11/06 20:23:25 dcoppa Exp $
@


1.3
log
@Update to i3-4.0.2 (plus patches from upstream git).
i3bar is now part of i3 itself and i3-wsbar is gone.
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 2
bugfix: honor the X11 window border in ConfigureRequests
(upstream git commit f2f636f9e7872ff19c31649b24d5a19a826e22bd)
d7 2
a8 2
bugfix: correctly handle ConfigureRequests for floating windows in
multi-monitor setups (git commit b1aa8107b3bc9510422b4a71744c2bfa71627b12)
d10 28
a37 41
bugfix: correctly revert focus to other floating windows when closing
a floating window (git commit 4dbda7311480c231332a9dab9ed23d00abecb7e9)

--- src/handlers.c.orig	Sun Aug 28 19:48:13 2011
+++ src/handlers.c	Mon Oct 31 12:44:02 2011
@@@@ -353,24 +353,27 @@@@ static int handle_configure_request(xcb_configure_requ
             bsr.y += deco_height;
             bsr.height -= deco_height;
         }
-        con = con->parent;
+        Con *floatingcon = con->parent;
         DLOG("Container is a floating leaf node, will do that.\n");
         if (event->value_mask & XCB_CONFIG_WINDOW_X) {
-            con->rect.x = event->x + (-1) * bsr.x;
-            DLOG("proposed x = %d, new x is %d\n", event->x, con->rect.x);
+            floatingcon->rect.x = event->x + (-1) * bsr.x;
+            DLOG("proposed x = %d, new x is %d\n", event->x, floatingcon->rect.x);
         }
         if (event->value_mask & XCB_CONFIG_WINDOW_Y) {
-            con->rect.y = event->y + (-1) * bsr.y;
-            DLOG("proposed y = %d, new y is %d\n", event->y, con->rect.y);
+            floatingcon->rect.y = event->y + (-1) * bsr.y;
+            DLOG("proposed y = %d, new y is %d\n", event->y, floatingcon->rect.y);
         }
         if (event->value_mask & XCB_CONFIG_WINDOW_WIDTH) {
-            con->rect.width = event->width + (-1) * bsr.width;
-            DLOG("proposed width = %d, new width is %d\n", event->width, con->rect.width);
+            floatingcon->rect.width = event->width + (-1) * bsr.width;
+            floatingcon->rect.width += con->border_width * 2;
+            DLOG("proposed width = %d, new width is %d (x11 border %d)\n", event->width, floatingcon->rect.width, con->border_width);
         }
         if (event->value_mask & XCB_CONFIG_WINDOW_HEIGHT) {
-            con->rect.height = event->height + (-1) * bsr.height;
-            DLOG("proposed height = %d, new height is %d\n", event->height, con->rect.height);
+            floatingcon->rect.height = event->height + (-1) * bsr.height;
+            floatingcon->rect.height += con->border_width * 2;
+            DLOG("proposed height = %d, new height is %d (x11 border %d)\n", event->height, floatingcon->rect.height, con->border_width);
         }
+        floating_maybe_reassign_ws(floatingcon);
         tree_render();
     }
d39 8
a46 1
@@@@ -454,7 +457,7 @@@@ static int handle_unmap_notify_event(xcb_unmap_notify_
a49 5
-    tree_close(con, DONT_KILL_WINDOW, false);
+    tree_close(con, DONT_KILL_WINDOW, false, false);
     tree_render();
     x_push_changes(croot);
     return 1;
@


1.2
log
@Update to i3-3.e-bf2 (aka i3-3.5.2)
@
text
@d1 49
a49 10
$OpenBSD: patch-src_handlers_c,v 1.1 2011/01/05 12:45:04 dcoppa Exp $
--- src/handlers.c.orig	Wed Jan  5 13:03:14 2011
+++ src/handlers.c	Wed Jan  5 13:04:03 2011
@@@@ -458,8 +458,6 @@@@ int handle_screen_change(void *prophs, xcb_connection_
  *
  */
 int handle_unmap_notify_event(void *data, xcb_connection_t *conn, xcb_unmap_notify_event_t *event) {
-        xcb_window_t root = xcb_setup_roots_iterator(xcb_get_setup(conn)).data->root;
-
         add_ignore_event(event->sequence);
d51 9
a59 1
         Client *client = table_get(&by_child, event->window);
@


1.1
log
@Various bugfixes for fullscreen windows, xcb, xinerama, and configfile
parsing.
All from upstream git.
@
text
@d1 1
a1 1
$OpenBSD$
@

