head	1.8;
access;
symbols
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2013.05.16.18.42.30;	author dcoppa;	state dead;
branches;
next	1.7;

1.7
date	2012.12.13.12.10.13;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2012.09.21.17.16.14;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2011.12.27.09.05.17;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.01.16.00.01;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.06.20.23.25;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.14.12.55.18;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2011.01.05.12.45.04;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to i3-4.5.1

ok jasper@@, abieber@@
@
text
@$OpenBSD: patch-src_cfgparse_y,v 1.7 2012/12/13 12:10:13 dcoppa Exp $
--- src/cfgparse.y.orig	Wed Dec 12 00:08:17 2012
+++ src/cfgparse.y	Thu Dec 13 09:45:54 2012
@@@@ -328,16 +328,16 @@@@ static void start_configerror_nagbar(const char *confi
     /* child */
     if (configerror_pid == 0) {
         char *edit_command, *pager_command;
-        sasprintf(&edit_command, "i3-sensible-editor \"%s\" && i3-msg reload\n", config_path);
-        sasprintf(&pager_command, "i3-sensible-pager \"%s\"\n", errorfilename);
+        sasprintf(&edit_command, "/usr/bin/vi \"%s\" && i3-msg reload\n", config_path);
+        sasprintf(&pager_command, "/usr/bin/less \"%s\"\n", errorfilename);
         if (!write_nagbar_script(edit_script_path, edit_command) ||
             !write_nagbar_script(pager_script_path, pager_command))
             return;
 
         char *editaction,
              *pageraction;
-        sasprintf(&editaction, "i3-sensible-terminal -e \"%s\"", edit_script_path);
-        sasprintf(&pageraction, "i3-sensible-terminal -e \"%s\"", pager_script_path);
+        sasprintf(&editaction, "${X11BASE}/bin/xterm -e \"%s\"", edit_script_path);
+        sasprintf(&pageraction, "${X11BASE}/bin/xterm -e \"%s\"", pager_script_path);
         char *argv[] = {
             NULL, /* will be replaced by the executable path */
             "-t",
@


1.7
log
@Update to i3-4.4
@
text
@d1 1
a1 1
$OpenBSD: patch-src_cfgparse_y,v 1.6 2012/09/21 17:16:14 dcoppa Exp $
@


1.6
log
@Update to i3-4.3

OK jasper@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_cfgparse_y,v 1.5 2011/12/27 09:05:17 dcoppa Exp $
--- src/cfgparse.y.orig	Thu Sep 20 14:33:19 2012
+++ src/cfgparse.y	Thu Sep 20 14:35:04 2012
@@@@ -325,16 +325,16 @@@@ static void start_configerror_nagbar(const char *confi
@


1.5
log
@Bugfixing update to i3-4.1.1
@
text
@d1 5
a5 4
$OpenBSD: patch-src_cfgparse_y,v 1.4 2011/12/01 16:00:01 dcoppa Exp $
--- src/cfgparse.y.orig	Sat Dec 24 16:25:08 2011
+++ src/cfgparse.y	Tue Dec 27 09:24:53 2011
@@@@ -286,8 +286,8 @@@@ static void start_configerror_nagbar(const char *confi
d7 9
d18 4
a21 4
-        sasprintf(&editaction, "i3-sensible-terminal -e sh -c \"i3-sensible-editor \\\"%s\\\" && i3-msg reload\"", config_path);
-        sasprintf(&pageraction, "i3-sensible-terminal -e i3-sensible-pager \"%s\"", errorfilename);
+        sasprintf(&editaction, "${X11BASE}/bin/xterm -e sh -c \"/usr/bin/vi \\\"%s\\\" && i3-msg reload\"", config_path);
+        sasprintf(&pageraction, "${X11BASE}/bin/xterm -e /usr/bin/less \"%s\"", errorfilename);
@


1.4
log
@Major update to i3-4.1
@
text
@d1 4
a4 4
$OpenBSD: patch-src_cfgparse_y,v 1.3 2011/11/06 20:23:25 dcoppa Exp $
--- src/cfgparse.y.orig	Fri Nov 11 23:41:20 2011
+++ src/cfgparse.y	Wed Nov 30 17:01:02 2011
@@@@ -284,8 +284,8 @@@@ static void start_configerror_nagbar(const char *confi
@


1.3
log
@Update to i3-4.0.2 (plus patches from upstream git).
i3bar is now part of i3 itself and i3-wsbar is gone.
@
text
@d1 14
a14 63
$OpenBSD$

bugfix: properly free memory/close fd upon errors
(upstream git commit e1631d6320cf6b47c3b46f0b56ae970986c9c20c)

bugfix: correctly split key/value when parsing variables
(upstream git commit e1949aa69421ff6e8a540eb505ac5d00dee403a0)

bugfix: boundary checking when replacing variables
(upstream git commits cd6c3fedcb89b8ae995ca1afac2789aef5567de8 and
77ae3cd8f77e4e255e823b07cd8b50d28b38e03b)

bugfix: ignore for_window commands with empty (invalid) criteria
(upstream git commit 2a215fd7e22f5d8e9f82fb5a1d610e56afa99fe7)

--- src/cfgparse.y.orig	Sun Aug 28 19:48:13 2011
+++ src/cfgparse.y	Mon Oct 31 12:44:02 2011
@@@@ -188,6 +188,7 @@@@ static char *migrate_config(char *input, off_t size) {
         ret = read(readpipe[0], converted + read_bytes, conv_size - read_bytes);
         if (ret == -1) {
             warn("Cannot read from pipe");
+            FREE(converted);
             return NULL;
         }
         read_bytes += ret;
@@@@ -357,12 +358,14 @@@@ void parse_file(const char *f) {
 
             /* get key/value for this variable */
             char *v_key = value, *v_value;
-            if ((v_value = strstr(value, " ")) == NULL &&
-                (v_value = strstr(value, "\t")) == NULL) {
+            if (strstr(value, " ") == NULL && strstr(value, "\t") == NULL) {
                 ELOG("Malformed variable assignment, need a value\n");
                 continue;
             }
 
+            if (!(v_value = strstr(value, " ")))
+                v_value = strstr(value, "\t");
+
             *(v_value++) = '\0';
 
             struct Variable *new = scalloc(sizeof(struct Variable));
@@@@ -387,7 +390,8 @@@@ void parse_file(const char *f) {
         int extra = (strlen(current->value) - strlen(current->key));
         char *next;
         for (next = bufcopy;
-             (next = strcasestr(bufcopy + (next - bufcopy), current->key)) != NULL;
+             next < (bufcopy + stbuf.st_size) &&
+             (next = strcasestr(next, current->key)) != NULL;
              next += strlen(current->key)) {
             *next = '_';
             extra_bytes += extra;
@@@@ -658,6 +662,10 @@@@ bindsym:
 for_window:
     TOK_FOR_WINDOW match command
     {
+        if (match_is_empty(&current_match)) {
+            ELOG("Match is empty, ignoring this for_window statement\n");
+            break;
+        }
         printf("\t should execute command %s for the criteria mentioned above\n", $3);
         Assignment *assignment = scalloc(sizeof(Assignment));
         assignment->type = A_COMMAND;
@


1.2
log
@Update to i3-3.e-bf2 (aka i3-3.5.2)
@
text
@d1 23
a23 23
$OpenBSD: patch-src_cfgparse_y,v 1.1 2011/01/05 12:45:04 dcoppa Exp $
--- src/cfgparse.y.orig	Wed Jan  5 13:10:53 2011
+++ src/cfgparse.y	Wed Jan  5 13:11:52 2011
@@@@ -119,14 +119,21 @@@@ void parse_file(const char *f) {
          * how much extra bytes it requires when replaced. */
         struct Variable *current, *nearest;
         int extra_bytes = 0;
+        /* We need to copy the buffer because we need to invalidate the
+         * variables (otherwise we will count them twice, which is bad when
+         * 'extra' is negative) */
+        char *bufcopy = sstrdup(buf);
         SLIST_FOREACH(current, &variables, variables) {
                 int extra = (strlen(current->value) - strlen(current->key));
                 char *next;
-                for (next = buf;
-                     (next = strcasestr(buf + (next - buf), current->key)) != NULL;
-                     next += strlen(current->key))
+                for (next = bufcopy;
+                     (next = strcasestr(bufcopy + (next - bufcopy), current->key)) != NULL;
+                     next += strlen(current->key)) {
+                        *next = '_';
                         extra_bytes += extra;
+                }
d25 2
a26 1
+        FREE(bufcopy);
d28 36
a63 2
         /* Then, allocate a new buffer and copy the file over to the new one,
          * but replace occurences of our variables */
@


1.1
log
@Various bugfixes for fullscreen windows, xcb, xinerama, and configfile
parsing.
All from upstream git.
@
text
@d1 1
a1 1
$OpenBSD$
@

