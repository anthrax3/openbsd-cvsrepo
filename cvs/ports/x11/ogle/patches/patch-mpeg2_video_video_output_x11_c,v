head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.28
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.22
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.20
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.18
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.2;
locks; strict;
comment	@# @;


1.9
date	2009.12.09.10.19.33;	author jakemsr;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.13.18.46.47;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.24.22.56.35;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.16.13.38.04;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.15.23.09.34;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.26.19.03.43;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.08.11.05.53;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.02.17.38.04;	author espie;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.10.24.12.54.33;	author espie;	state Exp;
branches;
next	;

1.2.2.1
date	2002.01.08.10.53.36;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@- use sndio(7) instead of audio(4)
- regen patches
@
text
@$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.8 2003/11/13 18:46:47 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	Tue Nov  4 04:02:10 2003
+++ mpeg2_video/video_output_x11.c	Sun Feb  8 12:15:47 2009
@@@@ -1377,6 +1377,12 @@@@ void check_x_events(yuv_image_t *current_image)
 	    break;
 	  }
 	}
+	if (keysym == XK_Z) {
+	  subtitle_pos[subtitle_index]++;
+	}
+	if (keysym == XK_X) {
+		subtitle_pos[subtitle_index]--;
+	}
       }
       break;
     case KeyRelease:
@@@@ -2067,6 +2073,8 @@@@ static void draw_win_x11(window_info *dwin)
 	      window.video_area.height);
     XSync(mydisplay, False);
   }
+  if (window.win_state == WINDOW_STATE_FULLSCREEN)
+  	XForceScreenSaver(mydisplay, ScreenSaverReset);
 }
 
 
@@@@ -2154,6 +2162,8 @@@@ static void draw_win_xv(window_info *dwin)
        It waits for an XShmCompletionEvent */
     XIfEvent(mydisplay, &ev, predicate, NULL);
   }
+  if (window.win_state == WINDOW_STATE_FULLSCREEN)
+  	XForceScreenSaver(mydisplay, ScreenSaverReset);
 #endif /* HAVE_XV */
 }
 
@


1.8
log
@Update ogle to 0.9.2.
Feedback by various people.

PgUp/PgDown now work better, various minor improvements.
The port now builds correctly even with an installed older version.
@
text
@d1 4
a4 4
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.7 2003/02/24 22:56:35 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	2003-11-04 13:02:10.000000000 +0100
+++ mpeg2_video/video_output_x11.c	2003-11-06 07:34:50.000000000 +0100
@@@@ -1377,6 +1377,12 @@@@ void check_x_events(yuv_image_t *current
d17 1
a17 1
@@@@ -2067,6 +2073,8 @@@@ static void draw_win_x11(window_info *dw
d26 1
a26 1
@@@@ -2154,6 +2162,8 @@@@ static void draw_win_xv(window_info *dwi
@


1.7
log
@ogle 0.9.0:
- most OpenBSD patches folded in, including simpler audio support,
- much less verbose console output,
- bookmark support,
- actual skip forward/backward,
- better dvdnav code.
@
text
@d1 6
a6 6
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.6 2002/07/16 13:38:04 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	Thu Feb 13 23:37:51 2003
+++ mpeg2_video/video_output_x11.c	Wed Feb 19 17:58:11 2003
@@@@ -1335,6 +1335,12 @@@@ void check_x_events(yuv_image_t *current
 	if(keysym == XK_I) {
 	  screenshot_spu = 1;
d17 1
a17 1
@@@@ -2028,6 +2034,8 @@@@ static void draw_win_x11(window_info *dw
d26 1
a26 1
@@@@ -2111,6 +2119,8 @@@@ static void draw_win_xv(window_info *dwi
@


1.6
log
@version 0.8.4, mostly small fixes
@
text
@d1 4
a4 4
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.5 2002/06/15 23:09:34 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	Sun Jun 30 00:04:31 2002
+++ mpeg2_video/video_output_x11.c	Tue Jul 16 15:17:38 2002
@@@@ -1225,6 +1225,12 @@@@ void check_x_events(yuv_image_t *current
d8 1
a8 1
+	if (keysym == XK_1) {
d11 1
a11 1
+	if (keysym == XK_2) {
d16 2
a17 2
     case ButtonPress:
@@@@ -1771,6 +1777,8 @@@@ static void draw_win_x11(window_info *dw
d26 1
a26 1
@@@@ -1854,6 +1862,8 @@@@ static void draw_win_xv(window_info *dwi
@


1.5
log
@Update to 0.8.3
- openbsd native audio, mostly thanks to Bjorn.
- slightly better navigation code.
@
text
@d1 4
a4 4
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.4 2002/05/26 19:03:43 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	Thu Jun  6 18:45:02 2002
+++ mpeg2_video/video_output_x11.c	Sun Jun 16 00:48:18 2002
@@@@ -1218,6 +1218,12 @@@@ void check_x_events(yuv_image_t *current
d17 1
a17 1
@@@@ -1764,6 +1770,8 @@@@ static void draw_win_x11(window_info *dw
d26 1
a26 1
@@@@ -1847,6 +1855,8 @@@@ static void draw_win_xv(window_info *dwi
@


1.4
log
@do not blank screen while in full screen mode and displaying new images.
@
text
@d1 4
a4 4
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.3 2002/01/08 11:05:53 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	Sun Dec  2 22:38:00 2001
+++ mpeg2_video/video_output_x11.c	Sun May 26 18:54:01 2002
@@@@ -1135,6 +1135,12 @@@@ void check_x_events(yuv_image_t *current
d17 1
a17 1
@@@@ -1699,6 +1705,8 @@@@ static void draw_win_x11(window_info *dw
d26 1
a26 1
@@@@ -1772,6 +1780,8 @@@@ static void draw_win_xv(window_info *dwi
@


1.3
log
@ogle 0.8.2
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ mpeg2_video/video_output_x11.c	Thu Dec 13 00:30:10 2001
d17 18
@


1.2
log
@V3.1, some patches integrated...
@
text
@d1 16
a16 262
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.1 2001/10/24 12:54:33 espie Exp $
--- mpeg2_video/video_output_x11.c.orig	Tue Oct  9 01:10:59 2001
+++ mpeg2_video/video_output_x11.c	Mon Oct 22 16:44:44 2001
@@@@ -291,6 +291,7 @@@@ static void display_init_xv(yuv_image_t 
 #ifdef HAVE_XV
   int i, j;
   int result;
+  int best;
 
   xv_port = 0; /* We have no port yet. */
   
@@@@ -299,17 +300,19 @@@@ static void display_init_xv(yuv_image_t 
 			    &xv_request_base, &xv_event_base, 
 			    &xv_error_base);
   if(result != Success) {
-    fprintf(stderr, "Xv not found\n");
+    fprintf(stderr, "vo: Xv extension not found\n");
     return;
   }
   
-  fprintf(stderr, "Found Xv extension, checking for suitable adaptors\n");
   /* Check for available adaptors */
   result = XvQueryAdaptors(mydisplay, DefaultRootWindow (mydisplay), 
 			   &xv_num_adaptors, &xv_adaptor_info);
-  if(result != Success)
+  if(result != Success) {
+    fprintf(stderr,"vo: no Xv adaptors found\n");
     return;
+  }
   
+  best = 0;
       
   /* Check adaptors */
   for(i = 0; i < xv_num_adaptors; i++) {
@@@@ -319,18 +322,16 @@@@ static void display_init_xv(yuv_image_t 
        !(xv_adaptor_info[i].type & XvImageMask))
       continue;
     
+    best = 1;
     xv_port = xv_adaptor_info[i].base_id;
-    fprintf(stderr, "Found adaptor \"%s\" checking for suitable formats\n",
-	    xv_adaptor_info[i].name);
       
     /* Check image formats of adaptor */
     xv_formats = XvListImageFormats(mydisplay, xv_port, &xv_num_formats);
     for(j = 0; j < xv_num_formats; j++) {
       if(xv_formats[j].id == 0x32315659) { /* YV12 */
 	//if(xv_formats[j].id == 0x30323449) { /* I420 */
-	fprintf(stderr, "Found image format \"%s\", using it\n", 
-		xv_formats[j].guid);
 	xv_id = xv_formats[j].id;
+	best = 2;
 	break;
       } 
     }
@@@@ -338,8 +339,6 @@@@ static void display_init_xv(yuv_image_t 
     if(j == xv_num_formats)
       continue;
       
-    fprintf(stderr, "Using Xvideo port %li for hw scaling\n", xv_port);
-      
     /* Allocate XvImages */
     xv_image = XvShmCreateImage(mydisplay, xv_port, xv_id, NULL,
 				picture_data->info->picture.padded_width,
@@@@ -350,6 +349,7 @@@@ static void display_init_xv(yuv_image_t 
     if(xv_image == NULL)
       continue;
     
+    best = 3;
     /* Test and see if we really got padded_width x padded_height */
     if(xv_image->width != picture_data->info->picture.padded_width ||
        xv_image->height != picture_data->info->picture.padded_height) {
@@@@ -394,6 +394,19 @@@@ static void display_init_xv(yuv_image_t 
     /* All set up! */
     break;
   }
+  switch(best) {
+  case 0:
+  	fprintf(stderr, "vo: no Xv adaptors suitable for display\n");
+  	break;
+  case 1:
+  	fprintf(stderr, "vo: no YV12 Xv adaptors\n");
+  	break;
+  case 2:
+  	fprintf(stderr, "vo: can't create YV12 XvImage\n");
+  	break;
+  case 3:
+  	break;
+  }
 #endif /* HAVE_XV */
 }
      
@@@@ -435,8 +448,8 @@@@ static void display_init_xshm()
 			  window.ximage->height, 
 			  IPC_CREAT | 0777);
   
-  if(shm_info.shmid < 0) {
-    fprintf(stderr, "vo: shmget failed\n");
+  if(shm_info.shmid == -1) {
+    perror("vo: shmget failed");
     exit(1);
   }
   
@@@@ -444,7 +457,7 @@@@ static void display_init_xshm()
   shm_info.shmaddr = (char *) shmat(shm_info.shmid, 0, 0);
   
   if(shm_info.shmaddr == ((char *) -1)) {
-    fprintf(stderr, "vo: shmat failed\n");
+    perror("vo: shmat failed");
     exit(1);
   }
   
@@@@ -479,7 +492,9 @@@@ static void display_init_xshm()
   pixel_stride = window.ximage->bits_per_pixel;
 
   
+#if DEBUG
   fprintf(stderr, "vo: pixel_stride: %d\n", pixel_stride);
+#endif
   
 
   // If we have blue in the lowest bit then obviously RGB 
@@@@ -541,6 +556,7 @@@@ void display_init(yuv_image_t *picture_d
   dpy_sar_frac_n = dpy_size.height * dpy_size.horizontal_pixels;
   dpy_sar_frac_d = dpy_size.width * dpy_size.vertical_pixels;
   
+#if DEBUG
   fprintf(stderr, "*d* h: %d, w: %d, hp: %d, wp: %d\n",
 	  dpy_size.height, dpy_size.width,
 	  dpy_size.vertical_pixels, dpy_size.horizontal_pixels);
@@@@ -548,6 +564,7 @@@@ void display_init(yuv_image_t *picture_d
 	  XHeightMMOfScreen(scr), XWidthMMOfScreen(scr),
 	  XHeightOfScreen(scr), XWidthOfScreen(scr));
   fprintf(stderr, "*** display_sar: %d/%d\n", dpy_sar_frac_n, dpy_sar_frac_d);
+#endif
   
   
   /* Assume (for now) that the window will be the same size as the source. */
@@@@ -560,12 +577,14 @@@@ void display_init(yuv_image_t *picture_d
   color_depth = attribs.depth;
   if(color_depth != 15 && color_depth != 16 && 
      color_depth != 24 && color_depth != 32) {
-    fprintf(stderr,"Only 15, 16, 24, and 32bpp supported. Trying 24bpp!\n");
+    fprintf(stderr,"vo: color_depth %d not supported (not 15, 16, 24, 32).  Trying 24bpp!\n", color_depth);
     color_depth = 24;
   }
   
   XMatchVisualInfo(mydisplay, screen, color_depth, TrueColor, &vinfo);
+#if DEBUG
   fprintf(stderr, "vo: X11 visual id is %lx\n", vinfo.visualid);
+#endif
 
   hint.x = 0;
   hint.y = 0;
@@@@ -651,7 +670,9 @@@@ void display_init(yuv_image_t *picture_d
   
 
   xshmeventbase = XShmGetEventBase(mydisplay);  
+#if DEBUG
   fprintf(stderr, "xshmeventbase: %d\n", xshmeventbase);
+#endif
 
   /* Try to use XFree86 Xv (X video) extension for display.
      Sets use_xv to true on success. */
@@@@ -670,15 +691,15 @@@@ void display_init(yuv_image_t *picture_d
     yuyv_fb = (unsigned int *)mmap(NULL, 4*1024*1024, PROT_READ | PROT_WRITE,
 				   MAP_SHARED, fb_fd, 0x0701a000);
     if(yuyv_fb == MAP_FAILED) {
-      perror("mmap");
-      exit(-1);
+      perror("vo: mmap failed");
+      exit(1);
     }
     
     rgb_fb = (uint8_t *)mmap(NULL, 4*2048*1024, PROT_READ | PROT_WRITE,
 				  MAP_SHARED, fb_fd, 0x05004000);
     if(rgb_fb == MAP_FAILED) {
-      perror("mmap");
-      exit(-1);
+      perror("vo: mmap failed");
+      exit(1);
     }
   }
   /*** end sun ffb2 ***/
@@@@ -701,7 +722,9 @@@@ static void display_change_size(yuv_imag
   int padded_height = img->info->picture.padded_height;
   //int alloc_width, alloc_height;
   int alloc_size;
+#if DEBUG
   fprintf(stderr, "vo resize: %d, %d\n", new_width, new_height);
+#endif
   
   
   /* If we cant scale (i.e no Xv or mediaLib) exit give up now. */
@@@@ -730,12 +753,12 @@@@ static void display_change_size(yuv_imag
       XShmDetach(mydisplay, &shm_info);
     XDestroyImage(window.ximage);
     shmdt(shm_info.shmaddr);
-    if(shm_info.shmaddr == ((char *) -1)) {
-      fprintf(stderr, "vo: Shared memory: Couldn't detach segment\n");
+    if(shmdt(shm_info.shmaddr) != 0) {
+      perror("vo: Shared memory: shmdt failed");
       exit(1);
     }
     if(shmctl(shm_info.shmid, IPC_RMID, 0) == -1) {
-      perror("vo: shmctl ipc_rmid");
+      perror("vo: shmctl ipc_rmid failed");
       exit(1);
     }
     
@@@@ -769,15 +792,15 @@@@ static void display_change_size(yuv_imag
 			    IPC_CREAT | 0777);
 
 
-    if(shm_info.shmid < 0) {
-      fprintf(stderr, "vo: Shared memory: Couldn't get segment\n");
+    if(shm_info.shmid == -1) {
+      perror("vo: Shared memory: shmget failed");
       exit(1);
     }
   
     /* Attach shared memory segment */
     shm_info.shmaddr = (char *) shmat(shm_info.shmid, 0, 0);
     if(shm_info.shmaddr == ((char *) -1)) {
-      fprintf(stderr, "vo: Shared memory: Couldn't attach segment\n");
+      perror("vo: Shared memory: shmat failed");
       exit(1);
     }
     
@@@@ -825,10 +848,12 @@@@ static void display_adjust_size(yuv_imag
   scale_frac_n = (int64_t)dpy_sar_frac_n * (int64_t)sar_frac_d; 
   scale_frac_d = (int64_t)dpy_sar_frac_d * (int64_t)sar_frac_n;
   
+#if DEBUG
   fprintf(stderr, "vo: sar: %d/%d, dpy_sar %d/%d, scale: %lld, %lld\n",
 	  sar_frac_n, sar_frac_d,
 	  dpy_sar_frac_n, dpy_sar_frac_d,
 	  scale_frac_n, scale_frac_d); 
+#endif
   
   /* Keep either the height or the width constant. */ 
   if(scale_frac_n > scale_frac_d) {
@@@@ -867,7 +892,9 @@@@ static void display_adjust_size(yuv_imag
     new_width  = max_width;
     new_height = (base_height * max_width) / base_width;
   } else {
+#if DEBUG
     fprintf(stderr, "vo: using zoom %d / %d\n", scale.zoom_n, scale.zoom_d);
+#endif
     /* Use the provided zoom value. */
     new_width  = (base_width  * scale.zoom_n) / scale.zoom_d;
     new_height = (base_height * scale.zoom_n) / scale.zoom_d;
@@@@ -895,7 +922,9 @@@@ static void display_adjust_size(yuv_imag
       scale.zoom_n = new_height;
       scale.zoom_d = base_height;
     }
+#if DEBUG
     fprintf(stderr, "vo: zoom2 %d / %d\n", scale.zoom_n, scale.zoom_d);
+#endif
   }
   
   /* Don't care about aspect and can't change the window size, use it all. */
@


1.2.2.1
log
@MFC: ogle-0.8.1, with fixed idct and much improved image quality.
@
text
@d1 1
a1 1
$OpenBSD: patch-mpeg2_video_video_output_x11_c,v 1.2 2001/11/02 17:38:04 espie Exp $
@


1.1
log
@avoid dumping core on exit.
be a lot less verbose on the console.
don't rebuild binutils if there is a /usr/bin/as-static
@
text
@d1 1
a1 1
$OpenBSD$
a262 16
@@@@ -1235,11 +1264,14 @@@@ void display_exit(void) 
   XSync(mydisplay,True);
   if(use_xshm)
     XShmDetach(mydisplay, &shm_info);
-  XDestroyImage(window.ximage);
+  if (!use_xv)
+    XDestroyImage(window.ximage);
   shmdt(shm_info.shmaddr);
   shmctl(shm_info.shmid, IPC_RMID, 0);
   
+#if DEBUG
   fprintf(stderr, "vo: removed shm segment\n");
+#endif
   display_process_exit();
 }
 
@

