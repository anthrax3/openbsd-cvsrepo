head	1.3;
access;
symbols
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.3
date	2015.05.24.07.16.31;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	ppIzpTyUJwYSsnNW;

1.2
date	2012.06.20.06.44.28;	author ratchov;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.23.13.47.08;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to vlc-2.2.1.

from brad (maintainer)
@
text
@/*****************************************************************************
 * sndio.c : sndio plugin for VLC
 *****************************************************************************
 * Copyright (C) 2012 RÃ©mi Denis-Courmont
 * Copyright (C) 2012 Alexandre Ratchov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
 *****************************************************************************/

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <assert.h>

#include <vlc_common.h>
#include <vlc_plugin.h>
#include <vlc_aout.h>
#include <vlc_aout_intf.h>

#include <sndio.h>

static int Open (vlc_object_t *);
static void Close (vlc_object_t *);

vlc_module_begin ()
    set_shortname ("sndio")
    set_description (N_("sndio audio output"))
    set_category (CAT_AUDIO)
    set_subcategory (SUBCAT_AUDIO_AOUT)
    set_capability ("audio output", 120)
    set_callbacks (Open, Close )
vlc_module_end ()

static void Play  (audio_output_t *, block_t *);
static void Pause (audio_output_t *, bool, mtime_t);
static void Flush (audio_output_t *, bool);
static int VolumeSet(audio_output_t *, float, bool);

struct aout_sys_t
{
    struct sio_hdl *hdl;
    int delay, bpf;
};

static void onmove (void *addr, int delta)
{
    audio_output_t *aout = (audio_output_t *)addr;
    struct aout_sys_t *sys = (struct aout_sys_t *)aout->sys;
    
    sys->delay -= delta;
}

/** Initializes an sndio playback stream */
static int Open (vlc_object_t *obj)
{
    char fourcc[4];
    unsigned int chans;
    audio_output_t *aout = (audio_output_t *)obj;
    struct aout_sys_t *sys;    
    struct sio_hdl *hdl;
    struct sio_par par;

    hdl = sio_open (NULL, SIO_PLAY, 0);
    if (hdl == NULL)
    {
        msg_Err (obj, "cannot create audio playback stream");
        return VLC_EGENERIC;
    }

    sio_initpar (&par);
    vlc_fourcc_to_char (aout->format.i_format, fourcc);
    do {
	if (fourcc[0] == 's')
	    par.sig = 1;
	else if (fourcc[0] == 'u')
	    par.sig = 0;
	else
	    break;
	if (fourcc[1] == '8' && fourcc[2] == ' ' && fourcc[3] == ' ') {
	    par.bits = 8;
	    break;
	} else if (fourcc[1] == '1' && fourcc[2] == '6') {
	    par.bits = 16;
	} else if (fourcc[1] == '2' && fourcc[2] == '4') {
	    par.bits = 24;
	    par.bps = 3;
	} else if (fourcc[1] == '3' && fourcc[2] == '2') {
	    par.bits = 32;
	}
	if (fourcc[3] == 'l')
	    par.le = 1;
	else if (fourcc[3] == 'b')
	    par.le = 0;
	else
	    break;
    } while (0);
    par.pchan = aout_FormatNbChannels (&aout->format);
    par.rate = aout->format.i_rate;
    par.appbufsz = par.rate / 2;
    if (!sio_setpar (hdl, &par) || !sio_getpar (hdl, &par))
    {
        msg_Err (obj, "cannot negotiate audio playback parameters");
        goto error;
    }

    fourcc[0] = par.sig ? 's' : 'u';
    if (par.bps == 1) {
	fourcc[1] = '8';
	fourcc[2] = ' ';
	fourcc[3] = ' ';
    } else {
	fourcc[1] = '0' + (par.bps << 3) / 10;
	fourcc[2] = '0' + (par.bps << 3) % 10;
	fourcc[3] = par.le ? 'l' : 'b';
	if (par.bits < (par.bps << 3) && !par.msb) {
	    msg_Err (obj, "unsupported LSB alignement (%u bits in %u bytes)",
		     par.bits, par.bps);
	    goto error;
	}
    }

    /* Channel map */
    switch (par.pchan)
    {
        case 1:
            chans = AOUT_CHAN_CENTER;
            break;
        case 2:
            chans = AOUT_CHANS_STEREO;
            break;
        case 4:
            chans = AOUT_CHANS_4_0;
            break;
        case 6:
            chans = AOUT_CHANS_5_1;
            break;
        case 8:
            chans = AOUT_CHANS_7_1;
            break;
        default:
            msg_Err (aout, "unknown %u channels map", par.pchan);
            goto error;
    }

    sys = malloc (sizeof(struct aout_sys_t));
    if (sys == NULL) {
	msg_Err (aout, "failed to allocate sndio structure");
	goto error;
    }
    sys->hdl = hdl;
    sys->bpf = par.bps * par.pchan;
    sys->delay = 0;
    aout->sys = sys;
    aout->format.i_format =
	VLC_FOURCC(fourcc[0], fourcc[1], fourcc[2], fourcc[3]);
    msg_Warn(aout, "pchan = %u, rate = %u, bufsz = %u, round = %u\n",
	par.pchan, par.rate, par.bufsz, par.round);
    msg_Warn(aout, "orig_chans = 0x%x, phys_chans = 0x%x, chans = 0x%x\n",
	aout->format.i_original_channels,
	aout->format.i_physical_channels,
	chans);
    aout->format.i_original_channels = chans;
    aout->format.i_physical_channels = chans;
    aout->format.i_rate = par.rate;
    aout->pf_play = Play;
    aout->pf_pause = Pause;
    aout->pf_flush = Flush;
    aout_VolumeHardInit (aout, VolumeSet);
    VolumeSet(aout,
	      var_InheritInteger (aout, "volume") / (float)AOUT_VOLUME_DEFAULT,
	      var_InheritBool (aout, "mute"));
    sio_onmove (hdl, onmove, aout);
    sio_start (hdl);
    return VLC_SUCCESS;

error:
    sio_close (hdl);
    return VLC_EGENERIC;
}

static void Close (vlc_object_t *obj)
{
    audio_output_t *aout = (audio_output_t *)obj;
    struct aout_sys_t *sys = (struct aout_sys_t *)aout->sys;

    sio_close (sys->hdl);
    free (sys);
}

static void Play (audio_output_t *aout, block_t *block)
{
    struct aout_sys_t *sys = (struct aout_sys_t *)aout->sys;

    aout_TimeReport (aout, block->i_pts -
		     sys->delay * CLOCK_FREQ / aout->format.i_rate);
    sio_write (sys->hdl, block->p_buffer, block->i_nb_samples * sys->bpf);
    sys->delay += block->i_nb_samples;
    block_Release (block);
}

static void Pause (audio_output_t *aout, bool pause, mtime_t date)
{
    struct aout_sys_t *sys = (struct aout_sys_t *)aout->sys;
    static char zeros[100];
    unsigned int todo, n;

    if (pause) {
        sio_stop (sys->hdl);
        sio_start (sys->hdl);
    } else {
	todo = sys->delay * sys->bpf;
	while (todo > 0) {
	    n = todo;
	    if (n >= sizeof(zeros))
		n = sizeof(zeros);
	    sio_write(sys->hdl, zeros, n);
	    todo -= n;
	}
    }
    (void)date;
}

static void Flush (audio_output_t *aout, bool wait)
{
    struct aout_sys_t *sys = (struct aout_sys_t *)aout->sys;
    
    sys->delay = 0;
    (void)wait;
}

static int VolumeSet(audio_output_t *aout, float vol, bool mute)
{
    struct aout_sys_t *sys = (struct aout_sys_t *)aout->sys;
    int ctl;

    if (mute)
	ctl = 0;
    else {
	if (vol < 0)
	    vol = 0;
	if (vol > 1)
	    vol = 1;
	ctl = vol * SIO_MAXVOL;
    }
    sio_setvol (sys->hdl, ctl);
    return VLC_SUCCESS;
}
@


1.2
log
@Complete the sndio backend and make it the default. It's supposed to
make video smoother. Adds support for 24-bit encodings and make vlc use
the sndiod volume knob to save few cpu cycles.
ok jasper, help from brad
@
text
@@


1.1
log
@Major update to vlc-2.0.1.
More details at http://www.videolan.org/vlc/releases/2.0.1.html

tested on i386, amd64, sparc64
from Brad (maintainer)
@
text
@d5 1
d31 1
d40 1
a40 1
    set_description (N_("OpenBSD sndio audio output"))
d43 1
a43 1
    set_capability ("audio output", 0)
d49 16
d69 2
d72 3
d76 2
a77 2
    struct sio_hdl *sio = sio_open (NULL, SIO_PLAY, 0 /* blocking */);
    if (sio == NULL)
a82 1
    struct sio_par par;
d84 26
a109 4
    par.bits = 16;
    par.bps = par.bits >> 3;
    par.sig = 1;
    par.le = SIO_LE_NATIVE;
d112 2
a113 3
    par.xrun = SIO_SYNC;

    if (!sio_setpar (sio, &par) || !sio_getpar (sio, &par))
d119 14
a132 30
    if (par.bps != par.bits >> 3)
    {
        msg_Err (obj, "unsupported audio sample format (%u bits in %u bytes)",
                 par.bits, par.bps);
        goto error;
    }

    audio_format_t f;

    switch (par.bits)
    {
        case 8:
            f.i_format = par.sig ? VLC_CODEC_S8 : VLC_CODEC_U8;
            break;
        case 16:
            f.i_format = par.sig ? (par.le ? VLC_CODEC_S16L : VLC_CODEC_S16B)
                                 : (par.le ? VLC_CODEC_U16L : VLC_CODEC_U16B);
            break;
        case 24:
            f.i_format = par.sig ? (par.le ? VLC_CODEC_S24L : VLC_CODEC_S24B)
                                 : (par.le ? VLC_CODEC_U24L : VLC_CODEC_U24B);
            break;
        case 32:
            f.i_format = par.sig ? (par.le ? VLC_CODEC_S32L : VLC_CODEC_S32B)
                                 : (par.le ? VLC_CODEC_U32L : VLC_CODEC_U32B);
            break;
        default:
            msg_Err (obj, "unsupported audio sample format (%u bits)",
                     par.bits);
            goto error;
a134 2
    f.i_rate = par.rate;

a135 1
    unsigned chans;
d142 1
a142 1
            chans = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT;
d145 1
a145 2
            chans = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT
                  | AOUT_CHAN_REARLEFT | AOUT_CHAN_REARRIGHT;
d148 4
a151 3
            chans = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT
                  | AOUT_CHAN_REARLEFT | AOUT_CHAN_REARRIGHT
                  | AOUT_CHAN_CENTER | AOUT_CHAN_LFE;
d158 20
a177 5
    f.i_original_channels = f.i_physical_channels = chans;
    aout_FormatPrepare (&f);

    aout->format = f;
    aout->sys = (void *)sio;
d180 7
a186 4
    aout->pf_flush  = NULL; /* sndio sucks! */
    aout_VolumeSoftInit (aout); /* TODO: sio_onvol() */

    sio_start (sio);
d190 1
a190 1
    sio_close (sio);
d197 1
a197 1
    struct sio_hdl *sio = (void *)aout->sys;
d199 2
a200 1
    sio_close (sio);
d205 1
a205 2
    struct sio_hdl *sio = (void *)aout->sys;
    struct sio_par par;
d207 6
a212 3
    if (sio_getpar (sio, &par) == 0)
    {
        mtime_t delay = par.bufsz * CLOCK_FREQ / aout->format.i_rate;
d214 18
a231 2
        delay = block->i_pts - (mdate () - delay);
        aout_TimeReport (aout, block->i_pts - delay);
d233 2
d236 6
a241 9
    while (block->i_buffer > 0 && !sio_eof (sio))
    {
        size_t bytes = sio_write (sio, block->p_buffer, block->i_buffer);

        block->p_buffer += bytes;
        block->i_buffer -= bytes;
        /* Note that i_nb_samples and i_pts are corrupted here. */
    }
    block_Release (block);
d244 1
a244 1
static void Pause (audio_output_t *aout, bool pause, mtime_t date)
d246 2
a247 1
    struct sio_hdl *sio = (void *)aout->sys;
d249 11
a259 5
    if (pause)
        sio_stop (sio);
    else
        sio_start (sio);
    (void) date;
@

