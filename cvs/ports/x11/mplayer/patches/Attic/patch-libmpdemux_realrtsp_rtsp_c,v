head	1.4;
access;
symbols
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_5:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2008.02.08.17.32.42;	author jakemsr;	state dead;
branches;
next	1.3;

1.3
date	2006.07.19.21.40.47;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.27.21.11.49;	author espie;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2004.05.08.13.11.12;	author biorn;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.05.08.13.11.12;	author biorn;	state Exp;
branches;
next	;

1.2.4.1
date	2005.09.22.20.43.25;	author robert;	state Exp;
branches;
next	;

1.2.6.1
date	2005.09.22.20.46.25;	author robert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
maintenence update to mplayer-1.0rc2

ok biorn@@ (MAINTAINER), ajacoutot@@, brad@@
@
text
@$OpenBSD: patch-libmpdemux_realrtsp_rtsp_c,v 1.3 2006/07/19 21:40:47 robert Exp $
--- libmpdemux/realrtsp/rtsp.c.orig	Sun Jun 11 20:35:46 2006
+++ libmpdemux/realrtsp/rtsp.c	Thu Jul  6 00:08:12 2006
@@@@ -280,7 +280,7 @@@@ static char *rtsp_get(rtsp_t *s) {
   read_stream(s->s, buffer, 1);
   while (n<BUF_SIZE) {
     read_stream(s->s, &(buffer[n]), 1);
-    if ((buffer[n-1]==0x0d)&&(buffer[n]==0x0a)) break;
+    if (n > 0 &&(buffer[n-1]==0x0d)&&(buffer[n]==0x0a)) break;
     n++;
   }
 
@


1.3
log
@update to versio 1.0pre8; include the speex and mpcdec codecs by default;
this version of mplayer now uses gtk2;

ok biorn@@ and tested by many
@
text
@d1 1
a1 1
$OpenBSD: patch-libmpdemux_realrtsp_rtsp_c,v 1.2 2005/08/27 21:11:49 espie Exp $
@


1.2
log
@Two bug-fixes.
- allows realmedia streams to work.
- fix af resample=wrongvalue.

Okay pvalchev@@
@
text
@d1 5
a5 5
$OpenBSD$
--- libmpdemux/realrtsp/rtsp.c.orig	Sat Aug 27 13:09:55 2005
+++ libmpdemux/realrtsp/rtsp.c	Sat Aug 27 13:10:08 2005
@@@@ -274,7 +274,7 @@@@ static char *rtsp_get(rtsp_t *s) {
 
@


1.2.6.1
log
@SECURITY:
finally fix the RTSP & MMST heap overflows. from biorn@@

ok brad@@
@
text
@d2 11
a12 19
--- libmpdemux/realrtsp/rtsp.c.orig	Sun Apr 25 02:17:23 2004
+++ libmpdemux/realrtsp/rtsp.c	Fri May  6 19:47:56 2005
@@@@ -397,6 +397,7 @@@@ static int rtsp_get_answers(rtsp_t *s) {
   unsigned int answer_seq;
   char **answer_ptr=s->answers;
   int code;
+  int ans_count = 0;
   
   answer=rtsp_get(s);
   if (!answer)
@@@@ -448,7 +449,7 @@@@ static int rtsp_get_answers(rtsp_t *s) {
     }
     *answer_ptr=answer;
     answer_ptr++;
-  } while (strlen(answer)!=0);
+  } while ((strlen(answer)!=0) && (++ans_count < MAX_FIELDS));
   
   s->cseq++;
   
@


1.2.4.1
log
@SECURITY:
finally fix the RTSP & MMST heap overflows. from biorn@@

ok brad@@
@
text
@d2 11
a12 19
--- libmpdemux/realrtsp/rtsp.c.orig	Mon Oct 18 22:08:44 2004
+++ libmpdemux/realrtsp/rtsp.c	Fri May  6 19:45:45 2005
@@@@ -397,6 +397,7 @@@@ static int rtsp_get_answers(rtsp_t *s) {
   unsigned int answer_seq;
   char **answer_ptr=s->answers;
   int code;
+  int ans_count = 0;
   
   answer=rtsp_get(s);
   if (!answer)
@@@@ -448,7 +449,7 @@@@ static int rtsp_get_answers(rtsp_t *s) {
     }
     *answer_ptr=answer;
     answer_ptr++;
-  } while (strlen(answer)!=0);
+  } while ((strlen(answer)!=0) && (++ans_count < MAX_FIELDS));
   
   s->cseq++;
   
@


1.1
log
@file patch-libmpdemux_realrtsp_rtsp_c was initially added on branch OPENBSD_3_5.
@
text
@d1 12
@


1.1.2.1
log
@Plug two remote exploits, streaming over http and rtsp
Bump PKGNAME

ok brad@@
@
text
@a0 170
$OpenBSD$
--- libmpdemux/realrtsp/rtsp.c.orig	2004-04-29 22:35:55.000000000 +0200
+++ libmpdemux/realrtsp/rtsp.c	2004-04-29 22:36:04.000000000 +0200
@@@@ -73,8 +73,6 @@@@ struct rtsp_s {
   unsigned int  server_state;
   uint32_t      server_caps;
   
-  char          buffer[BUF_SIZE]; /* scratch buffer */
-
   unsigned int  cseq;
   char         *session;
 
@@@@ -271,11 +269,12 @@@@ static void hexdump (char *buf, int leng
 static char *rtsp_get(rtsp_t *s) {
 
   int n=0;
-  char *string;
+  char *buffer = malloc(BUF_SIZE);
+  char *string = NULL;
 
   while (n<BUF_SIZE) {
-    read_stream(s->s, &s->buffer[n], 1);
-    if ((s->buffer[n-1]==0x0d)&&(s->buffer[n]==0x0a)) break;
+    read_stream(s->s, &(buffer[n]), 1);
+    if ((buffer[n-1]==0x0d)&&(buffer[n]==0x0a)) break;
     n++;
   }
 
@@@@ -284,7 +283,7 @@@@ static char *rtsp_get(rtsp_t *s) {
     exit(1);
   }
   string=malloc(sizeof(char)*n);
-  memcpy(string,s->buffer,n-1);
+  memcpy(string,buffer,n-1);
   string[n-1]=0;
 
 #ifdef LOG
@@@@ -292,6 +291,7 @@@@ static char *rtsp_get(rtsp_t *s) {
 #endif
   
 
+  free(buffer);
   return string;
 }
 
@@@@ -352,8 +352,13 @@@@ static int rtsp_get_code(const char *str
 static void rtsp_send_request(rtsp_t *s, const char *type, const char *what) {
 
   char **payload=s->scheduled;
-  sprintf(s->buffer,"%s %s %s",type, what, rtsp_protocol_version);
-  rtsp_put(s,s->buffer);
+  char *buf;
+  
+  buf = malloc(strlen(type)+strlen(what)+strlen(rtsp_protocol_version)+3);
+  
+  sprintf(buf,"%s %s %s",type, what, rtsp_protocol_version);
+  rtsp_put(s,buf);
+  free(buf);
   if (payload)
     while (*payload) {
       rtsp_put(s,*payload);
@@@@ -369,11 +374,17 @@@@ static void rtsp_send_request(rtsp_t *s,
 
 static void rtsp_schedule_standard(rtsp_t *s) {
 
-  sprintf(s->buffer, "Cseq: %u", s->cseq);
-  rtsp_schedule_field(s, s->buffer);
+  char tmp[16];
+  
+  snprintf(tmp, 16, "Cseq: %u", s->cseq);
+  rtsp_schedule_field(s, tmp);
+  
   if (s->session) {
-    sprintf(s->buffer, "Session: %s", s->session);
-    rtsp_schedule_field(s, s->buffer);
+    char *buf;
+    buf = malloc(strlen(s->session)+15);
+    sprintf(buf, "Session: %s", s->session);
+    rtsp_schedule_field(s, buf);
+    free(buf);
   }
 }
 /*
@@@@ -388,6 +399,8 @@@@ static int rtsp_get_answers(rtsp_t *s) {
   int code;
   
   answer=rtsp_get(s);
+  if (!answer)
+    return 0;
   code=rtsp_get_code(answer);
   free(answer);
 
@@@@ -396,6 +409,8 @@@@ static int rtsp_get_answers(rtsp_t *s) {
   do { /* while we get answer lines */
   
     answer=rtsp_get(s);
+    if (!answer)
+      return 0;
     
     if (!strncmp(answer,"Cseq:",5)) {
       sscanf(answer,"Cseq: %u",&answer_seq);
@@@@ -407,26 +422,29 @@@@ static int rtsp_get_answers(rtsp_t *s) {
       }
     }
     if (!strncmp(answer,"Server:",7)) {
-      sscanf(answer,"Server: %s",s->buffer);
+      char *buf = malloc(strlen(answer));
+      sscanf(answer,"Server: %s",buf);
       if (s->server) free(s->server);
-      s->server=strdup(s->buffer);
+      s->server=strdup(buf);
+      free(buf);
     }
     if (!strncmp(answer,"Session:",8)) {
-      memset(s->buffer,0, BUF_SIZE);
-      sscanf(answer,"Session: %s",s->buffer);
+      char *buf = calloc(1, strlen(answer));
+      sscanf(answer,"Session: %s",buf);
       if (s->session) {
-        if (strcmp(s->buffer, s->session)) {
-          printf("rtsp: warning: setting NEW session: %s\n", s->buffer);
+        if (strcmp(buf, s->session)) {
+          printf("rtsp: warning: setting NEW session: %s\n", buf);
           free(s->session);
-          s->session=strdup(s->buffer);
+          s->session=strdup(buf);
         }
       } else
       {
 #ifdef LOG
-        printf("rtsp: setting session id to: %s\n", s->buffer);
+        printf("rtsp: setting session id to: %s\n", buf);
 #endif
-        s->session=strdup(s->buffer);
+        s->session=strdup(buf);
       }
+      free(buf);
     }
     *answer_ptr=answer;
     answer_ptr++;
@@@@ -555,13 +573,15 @@@@ int rtsp_read_data(rtsp_t *s, char *buff
     if ((buffer[0]=='S')&&(buffer[1]=='E')&&(buffer[2]=='T')&&(buffer[3]=='_'))
     {
       char *rest=rtsp_get(s);
-      /* a real server wanna play table tennis? */
-      memcpy(s->buffer, buffer, 4);
-      strcpy(s->buffer+4, rest);
+      if (!rest)
+        return -1;      
+
       seq=-1;
       do {
         free(rest);
         rest=rtsp_get(s);
+        if (!rest)
+          return -1;
         if (!strncmp(rest,"Cseq:",5))
           sscanf(rest,"Cseq: %u",&seq);
       } while (strlen(rest)!=0);
@@@@ -623,9 +643,9 @@@@ rtsp_t *rtsp_connect(int fd, char* mrl, 
   s->mrl = strdup(mrl);
   s->host = strdup(host);
   s->port = port;
+  s->path = strdup(path);
   while (*path == '/')
     path++;
-  s->path = strdup(path);
   if ((s->param = strchr(s->path, '?')) != NULL)
     s->param++;
   //printf("path=%s\n", s->path);
@

