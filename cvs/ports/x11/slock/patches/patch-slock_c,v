head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.08.13.14.00.00;	author tb;	state Exp;
branches;
next	1.2;
commitid	ix8pK84DU5POXta4;

1.2
date	2008.06.02.20.09.53;	author wcmaier;	state dead;
branches;
next	1.1;

1.1
date	2008.01.26.18.48.19;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Make sure the password is cleared from memory when the password entry
is aborted with backspace or escape.  With help from jca and a lot of
feedback from many.

ok jca, gsoares (MAINTAINER)
@
text
@$OpenBSD$
--- slock.c.orig	Fri Feb 12 20:29:02 2016
+++ slock.c	Sat Aug 13 15:37:49 2016
@@@@ -47,7 +47,7 @@@@ static Bool rr;
 static int rrevbase;
 static int rrerrbase;
 
-static void
+static void __attribute__((__noreturn__, __format__(printf, 1, 2)))
 die(const char *errstr, ...)
 {
 	va_list ap;
@@@@ -172,10 +172,12 @@@@ readpw(Display *dpy, const char *pws)
 				break;
 			case XK_Escape:
 				len = 0;
+				explicit_bzero(passwd, sizeof(passwd));
 				break;
 			case XK_BackSpace:
 				if (len)
 					--len;
+				explicit_bzero(passwd + len, 1);
 				break;
 			default:
 				if (num && !iscntrl((int)buf[0]) && (len + num < sizeof(passwd))) {
@@@@ -185,6 +187,7 @@@@ readpw(Display *dpy, const char *pws)
 				break;
 			}
 			color = len ? INPUT : (failure || failonclear ? FAILED : INIT);
+			explicit_bzero(buf, sizeof(buf));
 			if (running && oldc != color) {
 				for (screen = 0; screen < nscreens; screen++) {
 					XSetWindowBackground(dpy, locks[screen]->win, locks[screen]->colors[color]);
@


1.2
log
@Update to 0.8.

Diff originally from Gleydson Soares <gsoares at gmail dot com>, who
also takes maintainership. Thanks! Tweaks from kili@@ (the Makefile
nazi) and myself.

ok kili@@
@
text
@d1 6
a6 6
$OpenBSD: patch-slock_c,v 1.1 2008/01/26 18:48:19 matthieu Exp $
--- slock.c.orig	Sat Nov 24 21:18:01 2007
+++ slock.c	Fri Jan 25 21:43:05 2008
@@@@ -17,6 +17,11 @@@@
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
d8 4
a11 7
+#if HAVE_BSD_AUTH
+#include <login_cap.h>
+#include <bsd_auth.h>
+#endif
+
 void
 eprint(const char *errstr, ...) {
d13 3
a15 48
@@@@ -27,6 +32,7 @@@@
 	exit(EXIT_FAILURE);
 }
 
+#ifndef HAVE_BSD_AUTH
 const char *
 get_password() { /* only run as root */
 	const char *rval;
@@@@ -51,13 +57,16 @@@@
 		eprint("slock: cannot drop privileges\n");
 	return rval;
 }
+#endif
 
 int
 main(int argc, char **argv) {
 	char curs[] = {0, 0, 0, 0, 0, 0, 0, 0};
 	char buf[32], passwd[256];
 	int num, screen;
+#ifndef HAVE_BSD_AUTH
 	const char *pws;
+#endif
 	unsigned int len;
 	Bool running = True;
 	Cursor invisible;
@@@@ -71,7 +80,9 @@@@
 
 	if((argc > 1) && !strncmp(argv[1], "-v", 3))
 		eprint("slock-"VERSION", Â© 2006-2007 Anselm R. Garbe, Sander van Dijk\n");
+#ifndef HAVE_BSD_AUTH
 	pws = get_password();
+#endif
 	if(!(dpy = XOpenDisplay(0)))
 		eprint("slock: cannot open display\n");
 	screen = DefaultScreen(dpy);
@@@@ -118,7 +129,13 @@@@
 			switch(ksym) {
 			case XK_Return:
 				passwd[len] = 0;
-				if((running = strcmp(crypt(passwd, pws), pws)) != 0)
+#ifndef HAVE_BSD_AUTH
+				running = strcmp(crypt(passwd, pws), pws);
+#else
+				running = !auth_userokay(getlogin(), NULL,
+				    "auth-xlock", passwd);
+#endif
+				if (running != 0)
 					XBell(dpy, 100);
d17 10
d28 6
@


1.1
log
@- update to 0.7
- add support for BSD authentification. (patch sent upstream)
ok Will Maier (maintainer).
@
text
@d1 1
a1 1
$OpenBSD$
@

