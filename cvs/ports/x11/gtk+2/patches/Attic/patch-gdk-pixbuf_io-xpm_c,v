head	1.3;
access;
symbols
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_4:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2006.05.22.01.49.07;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2006.01.07.07.14.52;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.30.04.22.54;	author brad;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1;
next	;

1.1.2.1
date	2004.09.30.04.22.54;	author brad;	state Exp;
branches;
next	;

1.1.4.1
date	2004.09.30.04.25.22;	author brad;	state Exp;
branches;
next	;

1.1.6.1
date	2005.11.21.09.42.47;	author sturm;	state Exp;
branches;
next	;

1.1.8.1
date	2005.11.21.09.44.09;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to GTK+ 2.8.17.
@
text
@$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.2 2006/01/07 07:14:52 pvalchev Exp $
--- gdk-pixbuf/io-xpm.c.orig	Sun Nov 20 21:19:29 2005
+++ gdk-pixbuf/io-xpm.c	Sun Nov 20 21:20:06 2005
@@@@ -1167,7 +1167,8 @@@@ file_buffer (enum buf_op op, gpointer ha
 		/* Fall through to the xpm_read_string. */
 
 	case op_body:
-		xpm_read_string (h->infile, &h->buffer, &h->buffer_size);
+		if (!xpm_read_string (h->infile, &h->buffer, &h->buffer_size))
+			return NULL;
 		return h->buffer;
 
 	default:
@@@@ -1262,7 +1263,9 @@@@ pixbuf_create_from_xpm (const gchar * (*
                              _("XPM has invalid number of chars per pixel"));
 		return NULL;
 	}
-	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1)) {
+	if (n_col <= 0 ||
+	    n_col >= G_MAXINT / (cpp + 1) ||
+	    n_col >= G_MAXINT / sizeof (XPMColor)) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
@


1.2
log
@security fixes from Debian:
CVE-2005-3186: Add check to XPM reader to prevent integer overflow for
specially crafted number of colors.
CVE-2005-2975: Fix endless loop with specially crafted number of colors.
@
text
@d1 1
a1 1
$OpenBSD: patch-gdk-pixbuf_io-xpm_c,v 1.1.8.1 2005/11/21 09:44:09 sturm Exp $
@


1.1
log
@file patch-gdk-pixbuf_io-xpm_c was initially added on branch OPENBSD_3_4.
@
text
@d1 24
@


1.1.8.1
log
@security fixes from Debian:
CVE-2005-3186: Add check to XPM reader to prevent integer overflow for
specially crafted number of colors.
CVE-2005-2975: Fix endless loop with specially crafted number of colors.
@
text
@a0 24
$OpenBSD$
--- gdk-pixbuf/io-xpm.c.orig	Sun Nov 20 21:19:29 2005
+++ gdk-pixbuf/io-xpm.c	Sun Nov 20 21:20:06 2005
@@@@ -1167,7 +1167,8 @@@@ file_buffer (enum buf_op op, gpointer ha
 		/* Fall through to the xpm_read_string. */
 
 	case op_body:
-		xpm_read_string (h->infile, &h->buffer, &h->buffer_size);
+		if (!xpm_read_string (h->infile, &h->buffer, &h->buffer_size))
+			return NULL;
 		return h->buffer;
 
 	default:
@@@@ -1262,7 +1263,9 @@@@ pixbuf_create_from_xpm (const gchar * (*
                              _("XPM has invalid number of chars per pixel"));
 		return NULL;
 	}
-	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1)) {
+	if (n_col <= 0 ||
+	    n_col >= G_MAXINT / (cpp + 1) ||
+	    n_col >= G_MAXINT / sizeof (XPMColor)) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
@


1.1.6.1
log
@security fixes from Debian:
CVE-2005-3186: Add check to XPM reader to prevent integer overflow for
specially crafted number of colors.
CVE-2005-2975: Fix endless loop with specially crafted number of colors.
@
text
@a0 24
$OpenBSD$
--- gdk-pixbuf/io-xpm.c.orig	Sun Nov 20 21:34:49 2005
+++ gdk-pixbuf/io-xpm.c	Sun Nov 20 21:36:43 2005
@@@@ -1167,7 +1167,8 @@@@ file_buffer (enum buf_op op, gpointer ha
 		/* Fall through to the xpm_read_string. */
 
 	case op_body:
-		xpm_read_string (h->infile, &h->buffer, &h->buffer_size);
+		if (!xpm_read_string (h->infile, &h->buffer, &h->buffer_size))
+			return NULL;
 		return h->buffer;
 
 	default:
@@@@ -1253,7 +1254,9 @@@@ pixbuf_create_from_xpm (const gchar * (*
                              _("XPM has invalid number of chars per pixel"));
 		return NULL;
 	}
-	if (n_col <= 0 || n_col >= G_MAXINT / (cpp + 1)) {
+	if (n_col <= 0 ||
+	    n_col >= G_MAXINT / (cpp + 1) ||
+	    n_col >= G_MAXINT / sizeof (XPMColor)) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
@


1.1.4.1
log
@fixes a DoS issue with the BMP decoder, integer overflow and heap-based
buffer overflow with the XPM decoder, and integer overflow with the ICO
decoder.

CAN-2004-0753, CAN-2004-0782, CAN-2004-0788
@
text
@a0 74
$OpenBSD$
--- gdk-pixbuf/io-xpm.c.orig	Wed Aug 25 09:52:18 2004
+++ gdk-pixbuf/io-xpm.c	Mon Sep 20 09:55:10 2004
@@@@ -1079,7 +1079,7 @@@@ xpm_extract_color (const gchar *buffer)
 	gint key = 0;
 	gint current_key = 1;
 	gint space = 128;
-	gchar word[128], color[128], current_color[128];
+	gchar word[129], color[129], current_color[129];
 	gchar *r; 
 	
 	word[0] = '\0';
@@@@ -1121,8 +1121,8 @@@@ xpm_extract_color (const gchar *buffer)
 				return NULL;
 			/* accumulate color name */
 			if (color[0] != '\0') {
-				strcat (color, " ");
-				space--;
+				strncat (color, " ", space);
+				space -= MIN (space, 1);
 			}
 			strncat (color, word, space);
 			space -= MIN (space, strlen (word));
@@@@ -1246,27 +1246,43 @@@@ pixbuf_create_from_xpm (const gchar * (*
 		return NULL;
 
 	}
-	if (n_col <= 0) {
+	if (cpp <= 0 || cpp >= 32) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
-                             _("XPM file has invalid number of colors"));
+                             _("XPM has invalid number of chars per pixel"));
 		return NULL;
-
 	}
-	if (cpp <= 0 || cpp >= 32) {
+	if (n_col <= 0 || n_col >= G_MAXUINT / (cpp + 1)) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
-                             _("XPM has invalid number of chars per pixel"));
+                             _("XPM file has invalid number of colors"));
 		return NULL;
 	}
 
 	/* The hash is used for fast lookups of color from chars */
 	color_hash = g_hash_table_new (g_str_hash, g_str_equal);
 
-	name_buf = g_new (gchar, n_col * (cpp + 1));
-	colors = g_new (XPMColor, n_col);
+	name_buf = g_try_malloc (n_col * (cpp + 1));
+	if (!name_buf) {
+		g_set_error (error,
+			     GDK_PIXBUF_ERROR,
+                             GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
+                             _("Cannot allocate memory for loading XPM image"));
+		g_hash_table_destroy (color_hash);
+		return NULL;
+	}
+	colors = (XPMColor *) g_try_malloc (sizeof (XPMColor) * n_col);
+	if (!colors) {
+		g_set_error (error,
+			     GDK_PIXBUF_ERROR,
+                             GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
+                             _("Cannot allocate memory for loading XPM image"));
+		g_hash_table_destroy (color_hash);
+		g_free (name_buf);
+		return NULL;
+	}
 
 	for (cnt = 0; cnt < n_col; cnt++) {
 		gchar *color_name;
@


1.1.2.1
log
@fixes a DoS issue with the BMP decoder, integer overflow and heap-based
buffer overflow with the XPM decoder, and integer overflow with the ICO
decoder.

CAN-2004-0753, CAN-2004-0782, CAN-2004-0788
@
text
@a0 74
$OpenBSD$
--- gdk-pixbuf/io-xpm.c.orig	Wed Aug 25 09:52:18 2004
+++ gdk-pixbuf/io-xpm.c	Mon Sep 20 09:55:10 2004
@@@@ -1079,7 +1079,7 @@@@ xpm_extract_color (const gchar *buffer)
 	gint key = 0;
 	gint current_key = 1;
 	gint space = 128;
-	gchar word[128], color[128], current_color[128];
+	gchar word[129], color[129], current_color[129];
 	gchar *r; 
 	
 	word[0] = '\0';
@@@@ -1121,8 +1121,8 @@@@ xpm_extract_color (const gchar *buffer)
 				return NULL;
 			/* accumulate color name */
 			if (color[0] != '\0') {
-				strcat (color, " ");
-				space--;
+				strncat (color, " ", space);
+				space -= MIN (space, 1);
 			}
 			strncat (color, word, space);
 			space -= MIN (space, strlen (word));
@@@@ -1246,27 +1246,43 @@@@ pixbuf_create_from_xpm (const gchar * (*
 		return NULL;
 
 	}
-	if (n_col <= 0) {
+	if (cpp <= 0 || cpp >= 32) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
-                             _("XPM file has invalid number of colors"));
+                             _("XPM has invalid number of chars per pixel"));
 		return NULL;
-
 	}
-	if (cpp <= 0 || cpp >= 32) {
+	if (n_col <= 0 || n_col >= G_MAXUINT / (cpp + 1)) {
                 g_set_error (error,
                              GDK_PIXBUF_ERROR,
                              GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
-                             _("XPM has invalid number of chars per pixel"));
+                             _("XPM file has invalid number of colors"));
 		return NULL;
 	}
 
 	/* The hash is used for fast lookups of color from chars */
 	color_hash = g_hash_table_new (g_str_hash, g_str_equal);
 
-	name_buf = g_new (gchar, n_col * (cpp + 1));
-	colors = g_new (XPMColor, n_col);
+	name_buf = g_try_malloc (n_col * (cpp + 1));
+	if (!name_buf) {
+		g_set_error (error,
+			     GDK_PIXBUF_ERROR,
+                             GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
+                             _("Cannot allocate memory for loading XPM image"));
+		g_hash_table_destroy (color_hash);
+		return NULL;
+	}
+	colors = (XPMColor *) g_try_malloc (sizeof (XPMColor) * n_col);
+	if (!colors) {
+		g_set_error (error,
+			     GDK_PIXBUF_ERROR,
+                             GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
+                             _("Cannot allocate memory for loading XPM image"));
+		g_hash_table_destroy (color_hash);
+		g_free (name_buf);
+		return NULL;
+	}
 
 	for (cnt = 0; cnt < n_col; cnt++) {
 		gchar *color_name;
@

