head	1.6;
access;
symbols
	OPENBSD_4_0:1.5.0.6
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2007.01.04.18.34.46;	author espie;	state dead;
branches;
next	1.5;

1.5
date	2006.10.24.22.39.36;	author espie;	state Exp;
branches
	1.5.2.1
	1.5.4.1
	1.5.6.1;
next	1.4;

1.4
date	2005.02.03.20.05.56;	author espie;	state dead;
branches;
next	1.3;

1.3
date	2004.09.20.20.05.51;	author brad;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2004.09.15.19.25.12;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2004.08.24.15.46.55;	author espie;	state Exp;
branches;
next	;

1.3.2.1
date	2004.10.01.01.51.41;	author brad;	state Exp;
branches;
next	;

1.3.4.1
date	2004.10.01.17.50.07;	author brad;	state Exp;
branches;
next	;

1.5.2.1
date	2006.10.29.17.50.15;	author sturm;	state Exp;
branches;
next	;

1.5.4.1
date	2006.10.30.20.59.12;	author sturm;	state Exp;
branches;
next	;

1.5.6.1
date	2006.11.01.12.25.47;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update to qt 3.3.7 now that we have a qt immodule patch finally.
@
text
@$OpenBSD: patch-src_kernel_qimage_cpp,v 1.5 2006/10/24 22:39:36 espie Exp $
--- src/kernel/qimage.cpp.orig	Fri Sep  2 14:43:01 2005
+++ src/kernel/qimage.cpp	Tue Oct 24 22:30:51 2006
@@@@ -475,7 +475,12 @@@@ QImage::QImage( uchar* yourdata, int w, 
 		Endian bitOrder )
 {
     init();
-    if ( w <= 0 || h <= 0 || depth <= 0 || numColors < 0 )
+    int bpl = ((w*depth+31)/32)*4;	// bytes per scanline
+    if ( w <= 0 || h <= 0 || depth <= 0 || numColors < 0
+         || INT_MAX / sizeof(uchar *) < uint(h)
+         || INT_MAX / uint(depth) < uint(w)
+         || bpl <= 0
+         || INT_MAX / uint(bpl) < uint(h) )
 	return;					// invalid parameter(s)
     data->w = w;
     data->h = h;
@@@@ -483,7 +488,6 @@@@ QImage::QImage( uchar* yourdata, int w, 
     data->ncols = depth != 32 ? numColors : 0;
     if ( !yourdata )
 	return;	    // Image header info can be saved without needing to allocate memory.
-    int bpl = ((w*depth+31)/32)*4;	// bytes per scanline
     data->nbytes = bpl*h;
     if ( colortable || !data->ncols ) {
 	data->ctbl = colortable;
@@@@ -523,7 +527,10 @@@@ QImage::QImage( uchar* yourdata, int w, 
 		Endian bitOrder )
 {
     init();
-    if ( !yourdata || w <= 0 || h <= 0 || depth <= 0 || numColors < 0 )
+    if ( !yourdata || w <= 0 || h <= 0 || depth <= 0 || numColors < 0
+         || INT_MAX / sizeof(uchar *) < uint(h)
+         || INT_MAX / uint(bpl) < uint(h)
+         )
 	return;					// invalid parameter(s)
     data->w = w;
     data->h = h;
@@@@ -1259,7 +1266,7 @@@@ bool QImage::create( int width, int heig
     if ( data->ncols != numColors )		// could not alloc color table
 	return FALSE;
 
-    if ( INT_MAX / depth < width) { // sanity check for potential overflow
+    if ( INT_MAX / uint(depth) < uint(width) ) { // sanity check for potential overflow
 	setNumColors( 0 );
 	return FALSE;
     }
@@@@ -1272,7 +1279,9 @@@@ bool QImage::create( int width, int heig
     // #### WWA: shouldn't this be (width*depth+7)/8:
     const int pad = bpl - (width*depth)/8;	// pad with zeros
 #endif
-    if (INT_MAX / bpl < height) { // sanity check for potential overflow
+    if ( INT_MAX / uint(bpl) < uint(height)
+        || bpl < 0
+        || INT_MAX / sizeof(uchar *) < uint(height) ) { // sanity check for potential overflow
 	setNumColors( 0 );
 	return FALSE;
     }
@


1.5
log
@Add the security patches from qt 3.3.7

we'll update to qt 3.3.7 after the immodule patch has been merged, which
should hopefully happen in the middle of november....
@
text
@d1 1
a1 1
$OpenBSD$
@


1.5.6.1
log
@MFC:
Add the security patches from qt 3.3.7
@
text
@d1 1
a1 1
$OpenBSD: patch-src_kernel_qimage_cpp,v 1.5 2006/10/24 22:39:36 espie Exp $
@


1.5.4.1
log
@MFC:
Add the security patches from qt 3.3.7
@
text
@d1 1
a1 1
$OpenBSD: patch-src_kernel_qimage_cpp,v 1.5 2006/10/24 22:39:36 espie Exp $
@


1.5.2.1
log
@MFC:
Add the security patches from qt 3.3.7
@
text
@d1 1
a1 1
$OpenBSD: patch-src_kernel_qimage_cpp,v 1.5 2006/10/24 22:39:36 espie Exp $
@


1.4
log
@update to 3.3.4, lots of sec patches included.
activate qt support. build dependency only, qt is smart enough
to autoload that stuff...
@
text
@d1 56
a56 5
$OpenBSD: patch-src_kernel_qimage_cpp,v 1.3 2004/09/20 20:05:51 brad Exp $
--- src/kernel/qimage.cpp.orig	Sun Sep 19 20:58:07 2004
+++ src/kernel/qimage.cpp	Sun Sep 19 21:01:10 2004
@@@@ -5723,6 +5723,9 @@@@ static void read_xpm_image_or_array( QIm
 	image.create( w, h, 8, ncols );
a57 7
 
+    if (image.isNull())
+        return;
+
     QMap<QString, int> colorMap;
     int currentColor;
 
@


1.3
log
@fix issues with the GIF and XPM parsers that could allow a remote attacker to cause a
DoS via a malformed image file that triggers a null dereference.

CAN-2004-0692, CAN-2004-0693
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3.4.1
log
@Chris Evans found a heap overflow vulnerability in the QT
library when handling 8-bit RLE encoded BMP files. An attacker could
use this to compromise the account used to view the specially crafted
image. Further investigations found similar vulnerabilities in
XPM, GIF and JPEG image handlers.

CAN-2004-0691, CAN-2004-0692, CAN-2004-0693
@
text
@d1 4
a4 45
$OpenBSD: patch-src_kernel_qimage_cpp,v 1.3.2.1 2004/10/01 01:51:41 brad Exp $
--- src/kernel/qimage.cpp.orig	Mon Nov 10 05:21:58 2003
+++ src/kernel/qimage.cpp	Thu Sep 30 21:53:47 2004
@@@@ -4803,6 +4803,7 @@@@ bool read_dib( QDataStream& s, int offse
 	if ( comp == BMP_RLE8 ) {		// run length compression
 	    int x=0, y=0, b;
 	    register uchar *p = line[h-1];
+	    const uchar *endp = line[h-1]+w;
 	    while ( y < h ) {
 		if ( (b=d->getch()) == EOF )
 		    break;
@@@@ -4820,9 +4821,20 @@@@ bool read_dib( QDataStream& s, int offse
 			case 2:			// delta (jump)
 			    x += d->getch();
 			    y += d->getch();
+
+			    // Protection
+			    if ( (uint)x >= (uint)w )
+				x = w-1;
+			    if ( (uint)y >= (uint)h )
+				y = h-1;
+
 			    p = line[h-y-1] + x;
 			    break;
 			default:		// absolute mode
+			    // Protection
+			    if ( p + b > endp )
+				b = endp-p;
+
 			    if ( d->readBlock( (char *)p, b ) != b )
 				return FALSE;
 			    if ( (b & 1) == 1 )
@@@@ -4831,6 +4843,10 @@@@ bool read_dib( QDataStream& s, int offse
 			    p += b;
 		    }
 		} else {			// encoded mode
+		    // Protection
+		    if ( p + b > endp )
+			b = endp-p;
+
 		    memset( p, d->getch(), b ); // repeat pixel
 		    x += b;
 		    p += b;
@@@@ -5665,6 +5681,9 @@@@ static void read_xpm_image_or_array( QIm
     } else {
d7 3
a10 3
+    if (image.isNull())
+	return;
 
d13 1
@


1.3.2.1
log
@Chris Evans found a heap overflow vulnerability in the QT
library when handling 8-bit RLE encoded BMP files. An attacker could
use this to compromise the account used to view the specially crafted
image. Further investigations found similar vulnerabilities in
XPM, GIF and JPEG image handlers.

CAN-2004-0691, CAN-2004-0692, CAN-2004-0693
@
text
@d2 3
a4 44
--- src/kernel/qimage.cpp.orig	Thu Sep 30 02:19:46 2004
+++ src/kernel/qimage.cpp	Thu Sep 30 02:26:23 2004
@@@@ -4742,6 +4742,7 @@@@ bool read_dib( QDataStream& s, int offse
 	if ( comp == BMP_RLE8 ) {		// run length compression
 	    int x=0, y=0, b;
 	    register uchar *p = line[h-1];
+	    const uchar *endp = line[h-1]+w;
 	    while ( y < h ) {
 		if ( (b=d->getch()) == EOF )
 		    break;
@@@@ -4759,9 +4760,20 @@@@ bool read_dib( QDataStream& s, int offse
 			case 2:			// delta (jump)
 			    x += d->getch();
 			    y += d->getch();
+
+			    // Protection
+			    if ( (uint)x >= (uint)w )
+				x = w-1;
+			    if ( (uint)y >= (uint)h )
+				y = h-1;
+
 			    p = line[h-y-1] + x;
 			    break;
 			default:		// absolute mode
+			    // Protection
+			    if ( p + b > endp )
+				b = endp-p;
+
 			    if ( d->readBlock( (char *)p, b ) != b )
 				return FALSE;
 			    if ( (b & 1) == 1 )
@@@@ -4770,6 +4782,10 @@@@ bool read_dib( QDataStream& s, int offse
 			    p += b;
 		    }
 		} else {			// encoded mode
+		    // Protection
+		    if ( p + b > endp )
+			b = endp-p;
+
 		    memset( p, d->getch(), b ); // repeat pixel
 		    x += b;
 		    p += b;
@@@@ -5576,6 +5592,9 @@@@ static void read_xpm_image_or_array( QIm
     } else {
d7 3
a10 3
+    if (image.isNull())
+	return;
 
d13 1
@


1.2
log
@qt 3.3.3 + new plist
@
text
@d1 9
a9 15
$OpenBSD: patch-src_kernel_qimage_cpp,v 1.1 2004/08/24 15:46:55 espie Exp $
--- src/kernel/qimage.cpp.orig	Mon Apr 19 11:36:05 2004
+++ src/kernel/qimage.cpp	Tue Aug 24 10:58:24 2004
@@@@ -4818,6 +4818,7 @@@@ bool read_dib( QDataStream& s, int offse
 	if ( comp == BMP_RLE8 ) {		// run length compression
 	    int x=0, y=0, b;
 	    register uchar *p = line[h-1];
+	    const uchar *endp = line[h-1]+w;
 	    while ( y < h ) {
 		if ( (b=d->getch()) == EOF )
 		    break;
@@@@ -4835,9 +4836,20 @@@@ bool read_dib( QDataStream& s, int offse
 			case 2:			// delta (jump)
 			    x += d->getch();
 			    y += d->getch();
d11 3
a13 27
+			    // Protection
+			    if ( (uint)x >= (uint)w )
+				x = w-1;
+			    if ( (uint)y >= (uint)h )
+				y = h-1;
+
 			    p = line[h-y-1] + x;
 			    break;
 			default:		// absolute mode
+			    // Protection
+			    if ( p + b > endp )
+				b = endp-p;
+
 			    if ( d->readBlock( (char *)p, b ) != b )
 				return FALSE;
 			    if ( (b & 1) == 1 )
@@@@ -4846,6 +4858,10 @@@@ bool read_dib( QDataStream& s, int offse
 			    p += b;
 		    }
 		} else {			// encoded mode
+		    // Protection
+		    if ( p + b > endp )
+			b = endp-p;
+
 		    memset( p, d->getch(), b ); // repeat pixel
 		    x += b;
 		    p += b;
@


1.1
log
@fixes for rle overload.
okay naddy@@
@
text
@d1 1
a1 1
$OpenBSD$
@

