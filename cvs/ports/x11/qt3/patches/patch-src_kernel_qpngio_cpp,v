head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.16
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.14
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.04.29.10.44.43;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.08.20.36.09;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.31.22.49.46;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.26.17.23.34;	author brad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@allow qtextstream to serialize long long integers out.

For completion, qt3 should also serialize long long in, but that's
a more intrusive change, and it's not really needed to keep existing
things compiling.

Obviously, this code is totally different and 64 bits capable in qt4.

this fixes the build of kdepim3 post 64 bits time_t.

problem noticed by sthen@@.
@
text
@$OpenBSD: patch-src_kernel_qpngio_cpp,v 1.3 2011/07/08 20:36:09 naddy Exp $
--- src/kernel/qpngio.cpp.orig	Fri Feb  2 15:01:15 2007
+++ src/kernel/qpngio.cpp	Sat Apr 27 10:56:50 2013
@@@@ -43,6 +43,7 @@@@
 #include "qiodevice.h"
 
 #include <png.h>
+#include <zlib.h>
 
 
 #ifdef Q_OS_TEMP
@@@@ -123,9 +124,24 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
     png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type,
 	0, 0, 0);
 
+    png_colorp info_ptr_palette = NULL;
+    int info_ptr_num_palette = 0;
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)) {
+	png_get_PLTE(png_ptr, info_ptr, &info_ptr_palette, &info_ptr_num_palette);
+    }
+
+    png_bytep info_ptr_trans_alpha = NULL;
+    int info_ptr_num_trans = 0;
+    png_color_16p info_ptr_trans_color = NULL;
+
+    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)) {
+	png_get_tRNS(png_ptr, info_ptr, &info_ptr_trans_alpha, &info_ptr_num_trans, &info_ptr_trans_color);
+    }
+
+
     if ( color_type == PNG_COLOR_TYPE_GRAY ) {
 	// Black & White or 8-bit grayscale
-	if ( bit_depth == 1 && info_ptr->channels == 1 ) {
+	if ( bit_depth == 1 && png_get_channels(png_ptr, info_ptr) == 1 ) {
 	    png_set_invert_mono( png_ptr );
 	    png_read_update_info( png_ptr, info_ptr );
 	    if (!image.create( width, height, 1, 2, QImage::BigEndian ))
@@@@ -159,7 +175,7 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 		image.setColor( i, qRgba(c,c,c,0xff) );
 	    }
 	    if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS) ) {
-		const int g = info_ptr->trans_values.gray;
+		const int g = info_ptr_trans_color->gray;
 		if (g < ncols) {
 		    image.setAlphaBuffer(TRUE);
 		    image.setColor(g, image.color(g) & RGB_MASK);
@@@@ -168,7 +184,7 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 	}
     } else if ( color_type == PNG_COLOR_TYPE_PALETTE
      && png_get_valid(png_ptr, info_ptr, PNG_INFO_PLTE)
-     && info_ptr->num_palette <= 256 )
+     && info_ptr_num_palette <= 256 )
     {
 	// 1-bit and 8-bit color
 	if ( bit_depth != 1 )
@@@@ -176,28 +192,28 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
 	png_read_update_info( png_ptr, info_ptr );
 	png_get_IHDR(png_ptr, info_ptr,
 	    &width, &height, &bit_depth, &color_type, 0, 0, 0);
-	if (!image.create(width, height, bit_depth, info_ptr->num_palette,
+	if (!image.create(width, height, bit_depth, info_ptr_num_palette,
 	    QImage::BigEndian))
 	    return;
 	int i = 0;
 	if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS) ) {
 	    image.setAlphaBuffer( TRUE );
-	    while ( i < info_ptr->num_trans ) {
+	    while ( i < info_ptr_num_trans ) {
 		image.setColor(i, qRgba(
-		    info_ptr->palette[i].red,
-		    info_ptr->palette[i].green,
-		    info_ptr->palette[i].blue,
-		    info_ptr->trans[i]
+		    info_ptr_palette[i].red,
+		    info_ptr_palette[i].green,
+		    info_ptr_palette[i].blue,
+		    info_ptr_trans_alpha[i]
 		    )
 		);
 		i++;
 	    }
 	}
-	while ( i < info_ptr->num_palette ) {
+	while ( i < info_ptr_num_palette ) {
 	    image.setColor(i, qRgba(
-		info_ptr->palette[i].red,
-		info_ptr->palette[i].green,
-		info_ptr->palette[i].blue,
+		info_ptr_palette[i].red,
+		info_ptr_palette[i].green,
+		info_ptr_palette[i].blue,
 		0xff
 		)
 	    );
@@@@ -284,7 +300,7 @@@@ void read_png_image(QImageIO* iio)
 	return;
     }
 
-    if (setjmp(png_ptr->jmpbuf)) {
+    if (setjmp(png_jmpbuf(png_ptr))) {
 	png_destroy_read_struct(&png_ptr, &info_ptr, &end_info);
 	iio->setStatus(-4);
 	return;
@@@@ -469,7 +485,7 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
 	return FALSE;
     }
 
-    if (setjmp(png_ptr->jmpbuf)) {
+    if (setjmp(png_jmpbuf(png_ptr))) {
 	png_destroy_write_struct(&png_ptr, &info_ptr);
 	return FALSE;
     }
@@@@ -491,10 +507,15 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
 
     png_set_write_fn(png_ptr, (void*)this, qpiw_write_fn, qpiw_flush_fn);
 
+/* 
+according to png.h, channels is only used on read, not writes, so we
+should be able to comment this out.
+
     info_ptr->channels =
 	(image.depth() == 32)
 	    ? (image.hasAlphaBuffer() ? 4 : 3)
 	    : 1;
+*/
 
     png_set_IHDR(png_ptr, info_ptr, image.width(), image.height(),
 	image.depth() == 1 ? 1 : 8 /* per channel */,
@@@@ -504,11 +525,12 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
 		: PNG_COLOR_TYPE_RGB
 	    : PNG_COLOR_TYPE_PALETTE, 0, 0, 0);
 
+    png_color_8 sig_bit;
+    sig_bit.red = 8;
+    sig_bit.green = 8;
+    sig_bit.blue = 8;
+    png_set_sBIT(png_ptr, info_ptr, &sig_bit);
 
-    //png_set_sBIT(png_ptr, info_ptr, 8);
-    info_ptr->sig_bit.red = 8;
-    info_ptr->sig_bit.green = 8;
-    info_ptr->sig_bit.blue = 8;
 
     if (image.depth() == 1 && image.bitOrder() == QImage::LittleEndian)
        png_set_packswap(png_ptr);
@@@@ -522,11 +544,14 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
 	png_set_PLTE(png_ptr, info_ptr, palette, num_palette);
 	int* trans = new int[num_palette];
 	int num_trans = 0;
+	png_colorp info_ptr_palette = NULL;
+	int tmp;
+	png_get_PLTE(png_ptr, info_ptr, &info_ptr_palette, &tmp);
 	for (int i=0; i<num_palette; i++) {
 	    QRgb rgb=image.color(i);
-	    info_ptr->palette[i].red = qRed(rgb);
-	    info_ptr->palette[i].green = qGreen(rgb);
-	    info_ptr->palette[i].blue = qBlue(rgb);
+	    info_ptr_palette[i].red = qRed(rgb);
+	    info_ptr_palette[i].green = qGreen(rgb);
+	    info_ptr_palette[i].blue = qBlue(rgb);
 	    if (image.hasAlphaBuffer()) {
 		trans[i] = rgb >> 24;
 		if (trans[i] < 255) {
@@@@ -534,6 +559,7 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
 		}
 	    }
 	}
+	png_set_PLTE(png_ptr, info_ptr, info_ptr_palette, num_palette);
 	if (num_trans) {
 	    copy_trans = new png_byte[num_trans];
 	    for (int i=0; i<num_trans; i++)
@@@@ -544,7 +570,10 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
     }
 
     if ( image.hasAlphaBuffer() ) {
-	info_ptr->sig_bit.alpha = 8;
+        png_color_8p sig_bit;
+        png_get_sBIT(png_ptr, info_ptr, &sig_bit);
+        sig_bit->alpha = 8;
+        png_set_sBIT(png_ptr, info_ptr, sig_bit);
     }
 
     // Swap ARGB to RGBA (normal PNG format) before saving on
@@@@ -1030,7 +1059,7 @@@@ int QPNGFormat::decode(QImage& img, QImageConsumer* co
 	    return -1;
 	}
 
-	if (setjmp((png_ptr)->jmpbuf)) {
+	if (setjmp(png_jmpbuf(png_ptr))) {
 	    png_destroy_read_struct(&png_ptr, &info_ptr, 0);
 	    image = 0;
 	    return -1;
@@@@ -1057,7 +1086,7 @@@@ int QPNGFormat::decode(QImage& img, QImageConsumer* co
 
     if ( !png_ptr ) return 0;
 
-    if (setjmp(png_ptr->jmpbuf)) {
+    if (setjmp(png_jmpbuf(png_ptr))) {
 	png_destroy_read_struct(&png_ptr, &info_ptr, 0);
 	image = 0;
 	state = MovieStart;
@@@@ -1117,7 +1146,7 @@@@ void QPNGFormat::end(png_structp png, png_infop info)
     consumer->frameDone(QPoint(offx,offy),r);
     consumer->end();
     state = FrameStart;
-    unused_data = (int)png->buffer_size; // Since libpng doesn't tell us
+    unused_data = png_process_data_pause(png, 0);
 }
 
 #ifdef PNG_USER_CHUNKS_SUPPORTED
@


1.3
log
@Fix build with png-1.5.
All fixes from/via NetBSD pkgsrc.  The people there did a lot of
heavy lifting.
@
text
@d1 3
a3 3
$OpenBSD: patch-src_kernel_qpngio_cpp,v 1.2 2007/03/31 22:49:46 espie Exp $
--- src/kernel/qpngio.cpp.orig	Mon Jul  4 12:10:21 2011
+++ src/kernel/qpngio.cpp	Mon Jul  4 12:17:43 2011
d12 1
a12 1
@@@@ -131,9 +132,24 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
d38 1
a38 1
@@@@ -167,7 +183,7 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
d47 1
a47 1
@@@@ -176,7 +192,7 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
d56 1
a56 1
@@@@ -184,28 +200,28 @@@@ void setup_qt( QImage& image, png_structp png_ptr, png
d95 1
a95 1
@@@@ -292,7 +308,7 @@@@ void read_png_image(QImageIO* iio)
d104 1
a104 1
@@@@ -477,7 +493,7 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
d113 1
a113 1
@@@@ -499,10 +515,15 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
d129 1
a129 1
@@@@ -512,11 +533,12 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
d146 1
a146 1
@@@@ -530,11 +552,14 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
d164 1
a164 1
@@@@ -542,6 +567,7 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
d172 1
a172 1
@@@@ -552,7 +578,10 @@@@ bool QPNGImageWriter::writeImage(const QImage& image, 
d184 1
a184 1
@@@@ -1038,7 +1067,7 @@@@ int QPNGFormat::decode(QImage& img, QImageConsumer* co
d193 1
a193 1
@@@@ -1065,7 +1094,7 @@@@ int QPNGFormat::decode(QImage& img, QImageConsumer* co
d202 1
a202 1
@@@@ -1125,7 +1154,7 @@@@ void QPNGFormat::end(png_structp png, png_infop info)
@


1.2
log
@regen patches.
handle utf8 encoding better.
@
text
@d1 105
a105 22
$OpenBSD: patch-src_kernel_qpngio_cpp,v 1.1 2004/09/26 17:23:34 brad Exp $
--- src/kernel/qpngio.cpp.orig	Thu Oct 19 16:25:20 2006
+++ src/kernel/qpngio.cpp	Sat Mar 31 14:51:24 2007
@@@@ -110,10 +110,18 @@@@ void CALLBACK_CALL_TYPE qpiw_flush_fn( png_structp png
 static
 void setup_qt( QImage& image, png_structp png_ptr, png_infop info_ptr, float screen_gamma=0.0 )
 {
-    if ( screen_gamma != 0.0 && png_get_valid(png_ptr, info_ptr, PNG_INFO_gAMA) ) {
+    if ( 0.0 == screen_gamma )
+	// PNG docs say this is a good guess for a PC monitor
+	// in a dark room
+	screen_gamma = 2.2;
+    if ( png_get_valid(png_ptr, info_ptr, PNG_INFO_gAMA) ) {
+	// the file has a gAMA attribute
 	double file_gamma;
-	png_get_gAMA(png_ptr, info_ptr, &file_gamma);
-	png_set_gamma( png_ptr, screen_gamma, file_gamma );
+	if ( png_get_gAMA(png_ptr, info_ptr, &file_gamma))
+	    png_set_gamma( png_ptr, screen_gamma, file_gamma );
+    } else {
+	// no file gamma, use a reasonable default
+	png_set_gamma( png_ptr, screen_gamma, 0.45455 );
d108 103
a210 1
     png_uint_32 width;
@


1.1
log
@fixes Qt not handling gamma correction properly with the PNG image
format.

From: KDE's qt-copy
@
text
@d1 4
a4 4
$OpenBSD$
--- src/kernel/qpngio.cpp.orig	Sun Sep 26 00:31:42 2004
+++ src/kernel/qpngio.cpp	Sun Sep 26 00:33:10 2004
@@@@ -110,10 +110,18 @@@@ void CALLBACK_CALL_TYPE qpiw_flush_fn( p
@

