head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.42
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.40
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.38
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.34
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.36
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.32
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.26
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.24
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.22
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.20
	OPENBSD_5_0:1.3.0.18
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.16
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.03.31.22.49.46;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.09.15.19.25.12;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.22.23.03.09;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@regen patches.
handle utf8 encoding better.
@
text
@$OpenBSD: patch-src_widgets_qprogressbar_cpp,v 1.2 2004/09/15 19:25:12 espie Exp $
--- src/widgets/qprogressbar.cpp.orig	Thu Oct 19 16:25:34 2006
+++ src/widgets/qprogressbar.cpp	Sat Mar 31 14:51:25 2007
@@@@ -47,6 +47,14 @@@@
 #endif
 #include <limits.h>
 
+class QProgressBarPrivate
+{
+    public:
+	QProgressBarPrivate() : last_painted_progress( 0 ) { }
+
+    int last_painted_progress;
+};
+
 /*!
     \class QProgressBar qprogressbar.h
     \brief The QProgressBar widget provides a horizontal progress bar.
@@@@ -99,7 +107,7 @@@@ QProgressBar::QProgressBar( QWidget *parent, const cha
       center_indicator( TRUE ),
       auto_indicator( TRUE ),
       percentage_visible( TRUE ),
-      d( 0 )
+      d( new QProgressBarPrivate )
 {
     setSizePolicy( QSizePolicy( QSizePolicy::Expanding, QSizePolicy::Fixed ) );
     initFrame();
@@@@ -130,13 +138,21 @@@@ QProgressBar::QProgressBar( int totalSteps,
       center_indicator( TRUE ),
       auto_indicator( TRUE ),
       percentage_visible( TRUE ),
-      d( 0 )
+      d( new QProgressBarPrivate )
 {
     setSizePolicy( QSizePolicy( QSizePolicy::Expanding, QSizePolicy::Fixed ) );
     initFrame();
 }
 
+/*!
+    Destroys the object and frees any allocated ressources.
+*/
 
+QProgressBar::~QProgressBar()
+{
+    delete d;
+}
+
 /*!
     Reset the progress bar. The progress bar "rewinds" and shows no
     progress.
@@@@ -188,11 +204,16 @@@@ void QProgressBar::setProgress( int progress )
 	 progress < 0 || ( ( progress > total_steps ) && total_steps ) )
 	return;
 
+    const bool needRepaint = isVisible() && requireRepaint( progress );
+
     progress_val = progress;
 
     setIndicator( progress_str, progress_val, total_steps );
 
-    repaint( FALSE );
+    if ( needRepaint ) {
+	repaint( FALSE );
+	d->last_painted_progress = progress;
+    }
 
 #if defined(QT_ACCESSIBILITY_SUPPORT)
     QAccessible::updateAccessibility( this, 0, QAccessible::ValueChanged );
@@@@ -318,6 +339,31 @@@@ void QProgressBar::styleChange( QStyle& old )
     QFrame::styleChange( old );
 }
 
+/*!
+    This method returns whether changing the progress to the \a newValue
+    would require a repaint of the progress bar. This allows efficient
+    repainting.
+*/
+bool QProgressBar::requireRepaint( int newProgress ) const
+{
+    if ( newProgress == progress_val ||
+	 newProgress == d->last_painted_progress ) {
+	return false;
+    }
+
+    const int width = contentsRect().width();
+    if ( width == 0 ) {
+	return false;
+    }
+
+    float progressPerPixel = 1.0;
+    if ( total_steps > width ) {
+	progressPerPixel = float( total_steps ) / float( width );
+    }
+
+    const int delta = d->last_painted_progress - newProgress;
+    return QABS( delta ) >= progressPerPixel;
+}
 
 /*!
     This method is called to generate the text displayed in the center
@


1.2
log
@qt 3.3.3 + new plist
@
text
@d1 3
a3 3
$OpenBSD: patch-src_widgets_qprogressbar_cpp,v 1.1 2004/07/22 23:03:09 brad Exp $
--- src/widgets/qprogressbar.cpp.orig	Mon Apr 19 11:36:18 2004
+++ src/widgets/qprogressbar.cpp	Tue Aug 24 10:56:30 2004
d19 1
a19 1
@@@@ -99,7 +107,7 @@@@ QProgressBar::QProgressBar( QWidget *par
d28 1
a28 1
@@@@ -130,13 +138,21 @@@@ QProgressBar::QProgressBar( int totalSte
d51 1
a51 1
@@@@ -188,11 +204,16 @@@@ void QProgressBar::setProgress( int prog
d69 1
a69 1
@@@@ -318,6 +339,31 @@@@ void QProgressBar::styleChange( QStyle& 
@


1.1
log
@upgrade to Qt 3.3.2

ok MAINTAINER
@
text
@d1 3
a3 3
$OpenBSD$
--- src/widgets/qprogressbar.cpp.orig	2004-04-19 03:36:18.000000000 -0600
+++ src/widgets/qprogressbar.cpp	2004-06-24 00:00:06.000000000 -0600
d28 1
a28 1
@@@@ -130,12 +138,20 @@@@ QProgressBar::QProgressBar( int totalSte
d42 1
a42 1
+
d47 1
a47 1
 
d50 1
@

