head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.28
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.05.09.16.19.22;	author robert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Cast pthread_self() to uintptr_t to make gcc4 happy here.
ok espie@@
@
text
@$OpenBSD$
--- src/tools/qmutex_unix.cpp.orig	Fri Feb  2 15:01:04 2007
+++ src/tools/qmutex_unix.cpp	Sun May  9 18:17:13 2010
@@@@ -69,6 +69,7 @@@@ typedef pthread_mutex_t     Q_MUTEX_T;
 #include "qmutex_p.h"
 
 #include <errno.h>
+#include <stdint.h>
 #include <string.h>
 
 
@@@@ -261,8 +262,8 @@@@ void QRecursiveMutexPrivate::unlock()
     } else {
 #ifdef QT_CHECK_RANGE
 	qWarning("QMutex::unlock: unlock from different thread than locker");
-	qWarning("                was locked by %d, unlock attempt from %d",
-		 (int)owner, (int)pthread_self());
+	qWarning("                was locked by %d, unlock attempt from %lu",
+		 (int)owner, (uintptr_t)pthread_self());
 #endif
     }
 
@
