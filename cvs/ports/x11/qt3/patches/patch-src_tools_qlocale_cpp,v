head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.28
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.07.29.13.41.45;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@An char array is not necessarily 8-byte aligned, to casting it to (double *)
and dereferencing it leads to unaligned access on strict alignment
architectures.  Unbreaks build on hppa.

ok espie@@
@
text
@$OpenBSD$
--- src/tools/qlocale.cpp.orig	Fri Feb  2 15:01:05 2007
+++ src/tools/qlocale.cpp	Thu Jul 29 10:08:21 2010
@@@@ -121,16 +121,6 @@@@ static inline double nan()
 #   define NAN (::nan())
 #endif
 
-// We can't rely on -NAN, since all operations on a NAN should return a NAN.
-static const unsigned char be_neg_nan_bytes[] = { 0xff, 0xf8, 0, 0, 0, 0, 0, 0 };
-static const unsigned char le_neg_nan_bytes[] = { 0, 0, 0, 0, 0, 0, 0xf8, 0xff };
-static inline double negNan()
-{
-    return (ByteOrder == BigEndian ?
-            *((const double *) be_neg_nan_bytes) :
-            *((const double *) le_neg_nan_bytes));
-}
-
 // Sizes as defined by the ISO C99 standard - fallback
 #ifndef LLONG_MAX
 #   define LLONG_MAX Q_INT64_C(9223372036854775807)
@@@@ -164,7 +154,7 @@@@ static inline bool qIsInf(double d)
 
 static inline bool qIsNan(double d)
 {
-    return compareBits(d, NAN) || compareBits(d, negNan());
+    return isnan(d);
 }
 
 static const uint locale_index[] = {
@
