head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.12
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.10
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.08.06.18.01.21;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.05.13.43.39;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@deal with a nasty signed/unsigned mix to fix a crash reported by Tero Koskinen
@
text
@$OpenBSD: patch-src_Netclient_cpp,v 1.1 2007/08/05 13:43:39 naddy Exp $
--- src/Netclient.cpp.orig	Fri Aug  3 21:43:44 2007
+++ src/Netclient.cpp	Fri Aug  3 21:45:07 2007
@@@@ -140,6 +140,7 @@@@ bool Netclient::getValue(Window win, Atom atom, Atom t
   int result;
   unsigned long maxread = nelements;
   bool ret = False;
+  int bsize;
 
   // try get the first element
   result = XGetWindowProperty(_display.XDisplay(), win, atom, 0l, 1l, False,
@@@@ -148,18 +149,19 @@@@ bool Netclient::getValue(Window win, Atom atom, Atom t
   ret = (result == Success && ret_type == type && ret_size == size &&
          nelements > 0);
   if (ret) {
+    bsize = (size == 32) ? sizeof(long) : size/8;
     if (ret_bytes == 0 || maxread <= nelements) {
       // we got the whole property's value
-      *value = new unsigned char[nelements * size/8 + 1];
-      memcpy(*value, c_val, nelements * size/8 + 1);
+      *value = new unsigned char[nelements * bsize + 1];
+      memcpy(*value, c_val, nelements * bsize + 1);
     } else {
       // get the entire property since it is larger than one long
       XFree(c_val);
       // the number of longs that need to be retreived to get the property's
       // entire value. The last + 1 is the first long that we retrieved above.
       int remain = (ret_bytes - 1)/sizeof(long) + 1 + 1;
-      if (remain > size/8 * (signed)maxread) // dont get more than the max
-        remain = size/8 * (signed)maxread;
+      if (remain > bsize * (signed)maxread) // dont get more than the max
+        remain = bsize * (signed)maxread;
       result = XGetWindowProperty(_display.XDisplay(), win, atom, 0l, remain, False, type,
                                   &ret_type, &ret_size, &nelements, &ret_bytes,
                                   &c_val);
@@@@ -173,8 +175,8 @@@@ bool Netclient::getValue(Window win, Atom atom, Atom t
       if (! ret)
         return getValue(win, atom, type, maxread, value, size);
   
-      *value = new unsigned char[nelements * size/8 + 1];
-      memcpy(*value, c_val, nelements * size/8 + 1);
+      *value = new unsigned char[nelements * bsize + 1];
+      memcpy(*value, c_val, nelements * bsize + 1);
     }    
   }
   if (c_val) XFree(c_val);
@


1.1
log
@LP64 fix, tested by jakemsr@@
@
text
@d1 1
a1 1
$OpenBSD$
d8 1
a8 1
+  size_t bsize;
@

