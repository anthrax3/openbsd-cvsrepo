head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.36
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.34
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.30
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.28
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.26
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.24
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.07.16.14.38.32;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.1
log
@LP64 fixes:
* use the correct length argument to memToVal()
* prevent sign extension of 4-byte values in memToVal()
* use memToVal() where required

"looks correct" fgsch@@
@
text
@$OpenBSD$
--- cmuwmraster.c.orig	Wed Jul 16 16:22:59 2008
+++ cmuwmraster.c	Wed Jul 16 16:23:21 2008
@@@@ -22,9 +22,9 @@@@ struct cmuwm_header *headerp;
 {
     printf("%s is a %ldx%ld %ld plane CMU WM raster\n",
 	   name,
-	   memToVal(headerp->width, sizeof(long)),
-	   memToVal(headerp->height, sizeof(long)),
-	   memToVal(headerp->depth, sizeof(short)));
+	   memToVal(headerp->width, 4),
+	   memToVal(headerp->height, 4),
+	   memToVal(headerp->depth, 2));
 }
 
 int cmuwmIdent(fullname, name)
@@@@ -48,7 +48,7 @@@@ char *fullname, *name;
 	  break;
 
       case sizeof(struct cmuwm_header):
-	if (memToVal(header.magic, sizeof(long)) != CMUWM_MAGIC)
+	if (memToVal(header.magic, 4) != CMUWM_MAGIC)
 	  {
 	      r = 0;
 	      break;
@@@@ -91,7 +91,7 @@@@ unsigned int verbose;
 	  exit(1);
 
       case sizeof(struct cmuwm_header):
-	  if (memToVal(header.magic, sizeof(long)) != CMUWM_MAGIC)
+	  if (memToVal(header.magic, 4) != CMUWM_MAGIC)
 	    {
 		zclose(zf);
 		return(NULL);
@@@@ -104,16 +104,16 @@@@ unsigned int verbose;
 	  return(NULL);
       }
 
-    if (memToVal(header.depth, sizeof(short)) != 1)
+    if (memToVal(header.depth, 2) != 1)
       {
 	  fprintf(stderr,"CMU WM raster %s is of depth %d, must be 1",
 		  name,
-		  (int) header.depth);
+		  memToVal(header.depth, 2));
 	  return(NULL);
       }
 
-    image = newBitImage(width = memToVal(header.width, sizeof(long)),
-			height = memToVal(header.height, sizeof(long)));
+    image = newBitImage(width = memToVal(header.width, 4),
+			height = memToVal(header.height, 4));
 
     linelen = (width / 8) + (width % 8 ? 1 : 0);
     lineptr = image->data;
@
