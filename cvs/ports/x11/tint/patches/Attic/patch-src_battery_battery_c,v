head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2010.06.15.10.10.06;	author edd;	state dead;
branches;
next	1.4;

1.4
date	2010.05.11.21.36.18;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.11.18.54.37;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.10.18.05.33;	author edd;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.19.13.55.56;	author edd;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update tint2 to 0.11beta. I worked with upstream to fix a whole bunch of bugs
exposed on BSD systems in 0.10. Many thanks to the tint2 team.

OK dcoppa@@
@
text
@$OpenBSD: patch-src_battery_battery_c,v 1.4 2010/05/11 21:36:18 kili Exp $
--- src/battery/battery.c.orig	Tue Jan 19 20:29:28 2010
+++ src/battery/battery.c	Tue May 11 23:29:23 2010
@@@@ -24,6 +24,13 @@@@
 #include <cairo-xlib.h>
 #include <pango/pangocairo.h>
 
+#if defined(__OpenBSD__)
+#include <machine/apmvar.h>
+#include <err.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+#endif
+
 #include "window.h"
 #include "server.h"
 #include "area.h"
@@@@ -51,6 +58,10 @@@@ char *path_energy_full=0;
 char *path_current_now=0;
 char *path_status=0;
 
+#if defined(__OpenBSD__)
+int apm_fd = -1;
+#endif
+
 void update_batterys(void* arg)
 {
 	int i;
@@@@ -80,6 +91,18 @@@@ void update_batterys(void* arg)
 
 void init_battery()
 {
+
+#if defined(__OpenBSD__)
+
+	apm_fd = open("/dev/apm", O_RDONLY);
+	if (apm_fd < 0) {
+		warn("init_battery: failed to open /dev/apm.");
+		battery_enabled = 0;
+		return;
+	}
+
+#else
+
 	// check battery
 	GDir *directory = 0;
 	GError *error = NULL;
@@@@ -150,6 +173,7 @@@@ void init_battery()
 
 	g_free(path1);
 	g_free(battery_dir);
+#endif
 
 	if (battery_enabled && battery_timeout==0)
 		battery_timeout = add_timeout(10, 10000, update_batterys, 0);
@@@@ -176,6 +200,12 @@@@ void cleanup_battery()
 
 	battery_low_cmd = path_energy_now = path_energy_full = path_current_now = path_status = 0;
 	bat1_font_desc = bat2_font_desc = 0;
+
+#if defined(__OpenBSD__)
+	if ((apm_fd != -1) && (close(apm_fd) == -1))
+		warn("cannot close /dev/apm");
+#endif
+
 }
 
 
@@@@ -223,12 +253,49 @@@@ void init_battery_panel(void *p)
 
 
 void update_battery() {
+	
+#if !defined(__OpenBSD__)
+	/* unused on OpenBSD, silence compiler warnings */
 	FILE *fp;
 	char tmp[25];
-	int64_t energy_now = 0, energy_full = 0, current_now = 0;
+	int64_t current_now = 0;
+#endif
+	int64_t energy_now = 0, energy_full = 0;
 	int seconds = 0;
 	int8_t new_percentage = 0;
 
+#if defined(__OpenBSD__)
+
+	struct apm_power_info info;
+	if (ioctl(apm_fd, APM_IOC_GETPOWER, &(info)) < 0)
+		warn("power update: APM_IOC_GETPOWER");
+
+	/* best attempt at mapping to linux battery states */
+	battery_state.state = BATTERY_UNKNOWN;
+	switch (info.battery_state) {
+		case APM_BATT_CHARGING:
+			battery_state.state = BATTERY_CHARGING;
+			break;
+		default:
+			battery_state.state = BATTERY_DISCHARGING;
+			break;
+	}
+
+	if (info.battery_life == 100)
+		battery_state.state = BATTERY_FULL;
+
+	/* no mapping for openbsd really */
+	energy_full = 0;
+	energy_now = 0;
+
+	if (info.minutes_left != -1)
+		seconds = info.minutes_left * 60;
+	else
+		seconds = -1;
+
+	new_percentage = info.battery_life;
+
+#else
 	fp = fopen(path_status, "r");
 	if(fp != NULL) {
 		if (fgets(tmp, sizeof tmp, fp)) {
@@@@ -271,6 +338,7 @@@@ void update_battery() {
 				break;
 		}
 	} else seconds = 0;
+#endif
 
 	battery_state.time.hours = seconds / 3600;
 	seconds -= 3600 * battery_state.time.hours;
@


1.4
log
@fix call to open(2).
From Matthew Dempsky <matthew AT dempsky DOT org>.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_battery_battery_c,v 1.3 2010/05/11 18:54:37 dcoppa Exp $
@


1.3
log
@Do not use NULL as a file descriptor value.

Pointed out by Matthew Dempsky <matthew AT dempsky DOT org>: thanks!

OK edd@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/battery/battery.c	Tue May 11 17:43:00 2010
d36 1
a36 1
+	apm_fd = open("/dev/apm", O_RDONLY, "r");
@


1.2
log
@clean up patch ready for upstream and fix WANTLIB.

ok dcoppa@@
@
text
@d1 3
a3 3
$OpenBSD: patch-src_battery_battery_c,v 1.1 2010/04/19 13:55:56 edd Exp $
--- src/battery/battery.c.orig	Tue Jan 19 19:29:28 2010
+++ src/battery/battery.c	Sun May  9 14:43:20 2010
d23 1
a23 1
+int apm_fd = NULL;
d62 1
a62 1
+	if ((apm_fd != NULL) && (close(apm_fd) == -1))
@


1.1
log
@Update to tint2-0.9. Now includes working battery monitor.

OK dcoppa_p@@ and sthen@@.
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/battery/battery.c	Fri Apr 16 11:03:54 2010
d29 1
a29 1
@@@@ -80,6 +91,21 @@@@ void update_batterys(void* arg)
a42 3
+	if (battery_enabled && battery_timeout==0)
+		battery_timeout = add_timeout(10, 10000, update_batterys, 0);
+
d48 1
a48 1
@@@@ -150,9 +176,8 @@@@ void init_battery()
d54 3
a56 6
-	if (battery_enabled && battery_timeout==0)
-		battery_timeout = add_timeout(10, 10000, update_batterys, 0);
 }
 
 
@@@@ -176,6 +201,12 @@@@ void cleanup_battery()
d62 1
a62 1
+	if (close(apm_fd) == -1)
d69 8
a76 1
@@@@ -227,8 +258,43 @@@@ void update_battery() {
d78 4
a81 1
 	int64_t energy_now = 0, energy_full = 0, current_now = 0;
d83 1
a83 2
-	int8_t new_percentage = 0;
+	unsigned int new_percentage = 0;
a86 1
+	/* OpenBSD */
a116 2
+	/* original linuxesque code */
+
d120 2
a121 9
@@@@ -240,6 +306,7 @@@@ void update_battery() {
 		fclose(fp);
 	}
 
+
 	fp = fopen(path_energy_now, "r");
 	if(fp != NULL) {
 		if (fgets(tmp, sizeof tmp, fp)) energy_now = atoi(tmp);
@@@@ -272,20 +339,22 @@@@ void update_battery() {
d124 1
a125 4
+	if(energy_full > 0)
+		new_percentage = (energy_now*100)/energy_full;
+#endif
+
a127 16
 	battery_state.time.minutes = seconds / 60;
 	seconds -= 60 * battery_state.time.minutes;
 	battery_state.time.seconds = seconds;
 
-	if(energy_full > 0)
-		new_percentage = (energy_now*100)/energy_full;
-
 	if(battery_low_status > new_percentage && battery_state.state == BATTERY_DISCHARGING && !battery_low_cmd_send) {
 		if (battery_low_cmd)
 			if (-1 != system(battery_low_cmd))
 				battery_low_cmd_send = 1;
 	}
+
 	if(battery_low_status < new_percentage && battery_state.state == BATTERY_CHARGING && battery_low_cmd_send) {
 		battery_low_cmd_send = 0;
 	}
@

