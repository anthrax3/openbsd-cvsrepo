head	1.2;
access;
symbols
	jasper_20110405:1.1.1.1 jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.05.04.11.33.16;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2011.05.04.09.41.50;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.04.09.41.50;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- use swprintf() now that it's available
- adjust include path

from pascal stumpf (MAINTAINER)
@
text
@$OpenBSD: patch-source_Irrlicht_CZipReader_cpp,v 1.1 2011/05/04 09:41:50 jasper Exp $
--- source/Irrlicht/CZipReader.cpp.orig	Sun Dec 26 20:30:20 2010
+++ source/Irrlicht/CZipReader.cpp	Sun Dec 26 20:30:23 2010
@@@@ -522,7 +522,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 	//99 - AES encryption, WinZip 9
 
 	const SZipFileEntry &e = FileInfo[Files[index].ID];
-	wchar_t buf[64];
+	char buf[64];
 	s16 actualCompressionMethod=e.header.CompressionMethod;
 	IReadFile* decrypted=0;
 	u8* decryptedBuf=0;
@@@@ -621,7 +621,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 			c8* pBuf = new c8[ uncompressedSize ];
 			if (!pBuf)
 			{
-				swprintf ( buf, 64, L"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
+				snprintf ( buf, 64, (const char*)"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
 				os::Printer::log( buf, ELL_ERROR);
 				if (decrypted)
 					decrypted->drop();
@@@@ -634,7 +634,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 				pcData = new u8[decryptedSize];
 				if (!pcData)
 				{
-					swprintf ( buf, 64, L"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
+					snprintf ( buf, 64, (const char*)"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
 					os::Printer::log( buf, ELL_ERROR);
 					delete [] pBuf;
 					return 0;
@@@@ -675,7 +675,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 
 			if (err != Z_OK)
 			{
-				swprintf ( buf, 64, L"Error decompressing %s", Files[index].FullName.c_str() );
+				snprintf ( buf, 64, (const char *)"Error decompressing %s", Files[index].FullName.c_str() );
 				os::Printer::log( buf, ELL_ERROR);
 				delete [] pBuf;
 				return 0;
@@@@ -695,7 +695,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 			c8* pBuf = new c8[ uncompressedSize ];
 			if (!pBuf)
 			{
-				swprintf ( buf, 64, L"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
+				snprintf ( buf, 64, (const char *)"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
 				os::Printer::log( buf, ELL_ERROR);
 				if (decrypted)
 					decrypted->drop();
@@@@ -708,7 +708,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 				pcData = new u8[decryptedSize];
 				if (!pcData)
 				{
-					swprintf ( buf, 64, L"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
+					snprintf ( buf, 64, (const char *)"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
 					os::Printer::log( buf, ELL_ERROR);
 					delete [] pBuf;
 					return 0;
@@@@ -746,7 +746,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 
 			if (err != BZ_OK)
 			{
-				swprintf ( buf, 64, L"Error decompressing %s", Files[index].FullName.c_str() );
+				snprintf ( buf, 64, (const char *)"Error decompressing %s", Files[index].FullName.c_str() );
 				os::Printer::log( buf, ELL_ERROR);
 				delete [] pBuf;
 				return 0;
@@@@ -767,7 +767,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 			c8* pBuf = new c8[ uncompressedSize ];
 			if (!pBuf)
 			{
-				swprintf ( buf, 64, L"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
+				snprintf ( buf, 64, (const char *)"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
 				os::Printer::log( buf, ELL_ERROR);
 				if (decrypted)
 					decrypted->drop();
@@@@ -780,7 +780,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 				pcData = new u8[decryptedSize];
 				if (!pcData)
 				{
-					swprintf ( buf, 64, L"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
+					snprintf ( buf, 64, (const char *)"Not enough memory for decompressing %s", Files[index].FullName.c_str() );
 					os::Printer::log( buf, ELL_ERROR);
 					delete [] pBuf;
 					return 0;
@@@@ -807,7 +807,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 
 			if (err != SZ_OK)
 			{
-				swprintf ( buf, 64, L"Error decompressing %s", Files[index].FullName.c_str() );
+				snprintf ( buf, 64, (const char *)"Error decompressing %s", Files[index].FullName.c_str() );
 				os::Printer::log( buf, ELL_ERROR);
 				delete [] pBuf;
 				return 0;
@@@@ -825,7 +825,7 @@@@ IReadFile* CZipReader::createAndOpenFile(u32 index)
 		os::Printer::log("Decryption support not enabled. File cannot be read.", ELL_ERROR);
 		return 0;
 	default:
-		swprintf ( buf, 64, L"file has unsupported compression method. %s", Files[index].FullName.c_str() );
+		snprintf ( buf, 64, (const char *)"file has unsupported compression method. %s", Files[index].FullName.c_str() );
 		os::Printer::log( buf, ELL_ERROR);
 		return 0;
 	};
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import irrlicht 1.7.2

The Irrlicht Engine is an open source high performance realtime 3D
engine written and usable in C++ and also available for .NET
languages. It is completely cross-platform, using D3D, OpenGL and
its own software renderer, and has all of the state-of-the-art
features which can be found in commercial 3d engines.

from Pascal Stumpf
with feedback from kili@@
ok phessler@@
@
text
@@
