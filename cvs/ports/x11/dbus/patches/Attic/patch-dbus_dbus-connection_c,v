head	1.11;
access;
symbols
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2012.10.10.17.20.36;	author ajacoutot;	state dead;
branches;
next	1.10;

1.10
date	2012.07.05.07.19.48;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.09.09.00.25;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.15.16.26.07;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.23.08.58.31;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.07.19.20.28;	author ajacoutot;	state dead;
branches;
next	1.5;

1.5
date	2010.12.21.14.59.49;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.21.05.57.42;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.16.07.13.58;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.13.10.41.22;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.20.17.48.18;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Simpler patch; from pkgsrc.
@
text
@$OpenBSD: patch-dbus_dbus-connection_c,v 1.10 2012/07/05 07:19:48 ajacoutot Exp $

From FreeBSD:
Linux is more relaxed when it comes to the timeout argument to poll(2).
Linux will accept aby negative number to mean an infinite timeout.
OpenBSD will only accept INFTIM (-1).  Make sure we do not pass an
arbitrary negative number to poll(2) to avoid an infinite EINVAL loop.

--- dbus/dbus-connection.c.orig	Wed Jun  6 12:45:55 2012
+++ dbus/dbus-connection.c	Thu Jul  5 07:47:00 2012
@@@@ -2367,7 +2367,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
   DBusConnection *connection;
   dbus_uint32_t client_serial;
   DBusTimeout *timeout;
-  int timeout_milliseconds, elapsed_milliseconds;
+  int timeout_milliseconds, elapsed_milliseconds, remain_milliseconds;
 
   _dbus_assert (pending != NULL);
 
@@@@ -2448,7 +2448,11 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
   _dbus_get_monotonic_time (&tv_sec, &tv_usec);
   elapsed_milliseconds = (tv_sec - start_tv_sec) * 1000 +
 	  (tv_usec - start_tv_usec) / 1000;
-  
+  if (timeout_milliseconds != -1)
+    remain_milliseconds = timeout_milliseconds - elapsed_milliseconds;
+  else
+    remain_milliseconds = -1;
+
   if (!_dbus_connection_get_is_connected_unlocked (connection))
     {
       DBusMessage *error_msg;
@@@@ -2474,7 +2478,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
            */
           _dbus_verbose ("dbus_connection_send_with_reply_and_block() waiting for more memory\n");
 
-          _dbus_memory_pause_based_on_timeout (timeout_milliseconds - elapsed_milliseconds);
+          _dbus_memory_pause_based_on_timeout (remain_milliseconds);
         }
       else
         {          
@@@@ -2483,7 +2487,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
                                                   pending,
                                                   DBUS_ITERATION_DO_READING |
                                                   DBUS_ITERATION_BLOCK,
-                                                  timeout_milliseconds - elapsed_milliseconds);
+                                                  remain_milliseconds);
         }
 
       goto recheck_status;
@@@@ -2492,7 +2496,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
     _dbus_verbose ("dbus_connection_send_with_reply_and_block(): clock set backward\n");
   else if (elapsed_milliseconds < timeout_milliseconds)
     {
-      _dbus_verbose ("dbus_connection_send_with_reply_and_block(): %d milliseconds remain\n", timeout_milliseconds - elapsed_milliseconds);
+      _dbus_verbose ("dbus_connection_send_with_reply_and_block(): %d milliseconds remain\n", remain_milliseconds);
       
       if (status == DBUS_DISPATCH_NEED_MEMORY)
         {
@@@@ -2502,7 +2506,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
            */
           _dbus_verbose ("dbus_connection_send_with_reply_and_block() waiting for more memory\n");
 
-          _dbus_memory_pause_based_on_timeout (timeout_milliseconds - elapsed_milliseconds);
+          _dbus_memory_pause_based_on_timeout (remain_milliseconds);
         }
       else
         {          
@@@@ -2511,7 +2515,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
                                                   NULL,
                                                   DBUS_ITERATION_DO_READING |
                                                   DBUS_ITERATION_BLOCK,
-                                                  timeout_milliseconds - elapsed_milliseconds);
+                                                  remain_milliseconds);
         }
 
       goto recheck_status;
@


1.10
log
@Update to dbus-1.6.2.
Committing now so that any fallout can be fixed during g2k12.
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.9 2011/09/09 09:00:25 ajacoutot Exp $
@


1.9
log
@Bugfix update to dbus-1.4.14.
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.8 2011/06/15 16:26:07 ajacoutot Exp $
d9 3
a11 3
--- dbus/dbus-connection.c.orig	Fri Jul 29 15:03:47 2011
+++ dbus/dbus-connection.c	Fri Sep  9 10:51:13 2011
@@@@ -2356,7 +2356,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d20 2
a21 2
@@@@ -2437,7 +2437,11 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
   _dbus_get_current_time (&tv_sec, &tv_usec);
d33 1
a33 1
@@@@ -2463,7 +2467,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d42 1
a42 1
@@@@ -2472,7 +2476,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d51 1
a51 1
@@@@ -2481,7 +2485,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d60 1
a60 1
@@@@ -2491,7 +2495,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d69 1
a69 1
@@@@ -2500,7 +2504,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
@


1.8
log
@Bugfix update to dbus-1.4.12.
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.7 2011/05/23 08:58:31 ajacoutot Exp $
d9 3
a11 3
--- dbus/dbus-connection.c.orig	Fri Jun 10 21:37:21 2011
+++ dbus/dbus-connection.c	Wed Jun 15 18:17:02 2011
@@@@ -2354,7 +2354,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d20 1
a20 1
@@@@ -2435,7 +2435,11 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d33 1
a33 1
@@@@ -2461,7 +2465,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d42 1
a42 1
@@@@ -2470,7 +2474,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d51 1
a51 1
@@@@ -2479,7 +2483,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d60 1
a60 1
@@@@ -2489,7 +2493,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d69 1
a69 1
@@@@ -2498,7 +2502,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
@


1.7
log
@Resurrect patch-dbus_dbus-connection_c which was lost during an update.
@
text
@d1 1
a1 1
$OpenBSD$
d9 3
a11 3
--- dbus/dbus-connection.c.orig	Thu Apr  7 19:22:13 2011
+++ dbus/dbus-connection.c	Mon May 23 10:52:34 2011
@@@@ -2361,7 +2361,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d20 1
a20 1
@@@@ -2442,7 +2442,11 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d33 1
a33 1
@@@@ -2468,7 +2472,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d42 1
a42 1
@@@@ -2477,7 +2481,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d51 1
a51 1
@@@@ -2486,7 +2490,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d60 1
a60 1
@@@@ -2496,7 +2500,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d69 1
a69 1
@@@@ -2505,7 +2509,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
@


1.6
log
@Update to dbus-1.4.6.
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.5 2010/12/21 14:59:49 ajacoutot Exp $
d5 3
a7 3
Linux will accept aby negative number to mean an infinite timeout.  FreeBSD
will only accept -1.  Make sure we do not pass an aribtrary negative number
to poll(2) to avoid an infinite EINVAL loop.
d9 2
a10 11
--- dbus/dbus-connection.c.orig	Mon Dec 13 16:16:13 2010
+++ dbus/dbus-connection.c	Tue Dec 21 15:09:50 2010
@@@@ -233,7 +233,7 @@@@ struct DBusPreallocatedSend
   DBusList *counter_link;     /**< Preallocated link in the resource counter */
 };
 
-#ifdef HAVE_DECL_MSG_NOSIGNAL
+#if HAVE_DECL_MSG_NOSIGNAL
 static dbus_bool_t _dbus_modify_sigpipe = FALSE;
 #else
 static dbus_bool_t _dbus_modify_sigpipe = TRUE;
@


1.5
log
@Bugfix update to dbus-1.4.1.
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.4 2010/12/21 05:57:42 ajacoutot Exp $
@


1.4
log
@Update to dbus-1.4.0... second try.
Previously missed regression is fixed.
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.2 2010/12/13 10:41:22 ajacoutot Exp $
d9 2
a10 2
--- dbus/dbus-connection.c.orig	Tue Aug 31 23:44:19 2010
+++ dbus/dbus-connection.c	Mon Dec 20 19:17:01 2010
d20 1
a20 1
@@@@ -2364,7 +2364,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d29 1
a29 1
@@@@ -2445,7 +2445,11 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d42 1
a42 1
@@@@ -2471,7 +2475,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d51 1
a51 1
@@@@ -2480,7 +2484,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d60 1
a60 1
@@@@ -2489,7 +2493,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d69 1
a69 1
@@@@ -2499,7 +2503,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d78 1
a78 1
@@@@ -2508,7 +2512,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
@


1.3
log
@There seems to be an annoying runtime regression with session bus after
the last update which I failed to see in my tests.
While this is being worked on, let's revert for now so that people don't
run into it. Other parts of the D-DBus gang update are fine (glib and
python). Also keep the recent rc script tweak.

Sorry about that...
@
text
@d1 1
a1 1
$OpenBSD: patch-dbus_dbus-connection_c,v 1.1 2010/04/20 17:48:18 ajacoutot Exp $
d9 12
a20 3
--- dbus/dbus-connection.c.orig	Tue Mar 23 20:01:32 2010
+++ dbus/dbus-connection.c	Tue Apr 20 19:43:43 2010
@@@@ -2287,7 +2287,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d29 1
a29 1
@@@@ -2367,6 +2367,10 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d33 1
d38 1
a38 1
   
d41 2
a42 1
@@@@ -2393,7 +2397,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d51 2
a52 2
@@@@ -2401,7 +2405,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
           _dbus_connection_do_iteration_unlocked (connection,
d60 1
a60 1
@@@@ -2410,7 +2414,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d69 1
a69 1
@@@@ -2420,7 +2424,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d78 2
a79 2
@@@@ -2428,7 +2432,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
           _dbus_connection_do_iteration_unlocked (connection,
@


1.2
log
@Update to dbus-1.4.0.
@
text
@d9 3
a11 3
--- dbus/dbus-connection.c.orig	Tue Aug 31 23:44:19 2010
+++ dbus/dbus-connection.c	Mon Dec 13 10:48:47 2010
@@@@ -2364,7 +2364,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d20 1
a20 1
@@@@ -2445,7 +2445,11 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
a23 1
-  
d28 1
a28 1
+
d31 1
a31 2
       DBusMessage *error_msg;
@@@@ -2471,7 +2475,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d40 2
a41 2
@@@@ -2480,7 +2484,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
                                                   pending,
d49 1
a49 1
@@@@ -2489,7 +2493,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d58 1
a58 1
@@@@ -2499,7 +2503,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d67 2
a68 2
@@@@ -2508,7 +2512,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
                                                   NULL,
@


1.1
log
@Prevent an infinite EINVAL loop, from FreeBSD.
@
text
@d1 1
a1 1
$OpenBSD$
d9 3
a11 3
--- dbus/dbus-connection.c.orig	Tue Mar 23 20:01:32 2010
+++ dbus/dbus-connection.c	Tue Apr 20 19:43:43 2010
@@@@ -2287,7 +2287,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d20 1
a20 1
@@@@ -2367,6 +2367,10 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d24 1
d29 1
a29 1
   
d32 2
a33 1
@@@@ -2393,7 +2397,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d42 2
a43 2
@@@@ -2401,7 +2405,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
           _dbus_connection_do_iteration_unlocked (connection,
d51 1
a51 1
@@@@ -2410,7 +2414,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d60 1
a60 1
@@@@ -2420,7 +2424,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
d69 2
a70 2
@@@@ -2428,7 +2432,7 @@@@ _dbus_connection_block_pending_call (DBusPendingCall *
           _dbus_connection_do_iteration_unlocked (connection,
@

