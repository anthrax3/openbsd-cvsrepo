head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2017.09.25.09.16.13;	author robert;	state Exp;
branches;
next	1.5;
commitid	xOeDnABBxynvFYIF;

1.5
date	2014.01.24.10.43.16;	author ajacoutot;	state dead;
branches;
next	1.4;

1.4
date	2013.05.07.07.00.01;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.08.09.30.27;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.30.07.51.33;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.04.06.32.52;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Unbreak autoconf checks with clang by not using nested functions
in the checks.

Someone clearly did not read the autoconf documentation because
using the following functions with a function declaration inside
the body will end up declaring a function inside a function.

- AC_TRY_COMPILE( [], [ int main() { return 0; } ],
- AC_LANG_PROGRAM([[]], [[int main (void) { return 0; }]])],
- AC_TRY_LINK([], [int main (void) { return 0; }],

Result:

int
main ()
{
int main (void) { return 0; }
  ;
  return 0;
}

nested functions is a gcc extension which is not supported by
clang.

test.c:4:17: error: function definition is not allowed here
int main (void) { return 0; }
                ^
1 error generated.

This causes tests to fail in the configure scripts resulting in
missing compile and link time flags from the builds.

This resulted in weird behaviour of several software, like gnome
hanging completely due to gtk+3 not being built properly.

This change intrudces the following fixes:

- remove int main() declaration from AC_TRY_COMPILE, AC_LANG_PROGRAM, AC_TRY_LINK
  as it comes with a declaration already, and people misused them

- change to use AC_LANG_SOURCE when needed in case a complete source block is specified

Most of the changes are in configure.(ac|in), however there were some cases
where autoconf is either broken or the build failed because of an autoconf
generated configure script. Everytihng else is switched to autoconf, so
the maintainers can go ahead and upstream these diffs.

There are more to come, we are continously checking the tree for these issues
and in the future the infrastructure will error if such a case is found.
@
text
@$OpenBSD$

Index: configure.ac
--- configure.ac.orig
+++ configure.ac
@@@@ -554,7 +554,7 @@@@ fi
 AC_LANG_PUSH(C)
 AC_CACHE_CHECK([whether va_lists can be copied by value],
 	dbus_cv_va_val_copy,
-	[AC_RUN_IFELSE([AC_LANG_PROGRAM(
+	[AC_RUN_IFELSE([AC_LANG_SOURCE(
 [[
 	#include <stdarg.h>
 	#include <stdlib.h>
@


1.5
log
@Update to dbus-1.8.0.

bulk testing by landry@@
runtime testing by myself
@
text
@d1 1
a1 1
$OpenBSD: patch-configure_ac,v 1.4 2013/05/07 07:00:01 ajacoutot Exp $
d3 12
a14 95
From 277675a40e7252a1c5c479b0e0572d9b8a4014ae Mon Sep 17 00:00:00 2001
From: Simon McVittie <simon.mcvittie@@collabora.co.uk>
Date: Mon, 13 Aug 2012 18:43:12 +0000
Subject: configure: redo pthread check to check for more things

--- configure.ac.orig	Tue Apr 23 20:17:43 2013
+++ configure.ac	Tue May  7 08:47:07 2013
@@@@ -958,15 +958,53 @@@@ AC_SUBST([XML_CFLAGS])
 AC_SUBST([XML_LIBS])
 
 # Thread lib detection
-AC_CHECK_FUNC(pthread_cond_timedwait,[AC_CHECK_LIB(pthread,pthread_cond_timedwait,
-                                                    [THREAD_LIBS="-lpthread"])])
+AC_ARG_VAR([THREAD_LIBS])
 save_libs="$LIBS"
 LIBS="$LIBS $THREAD_LIBS"
-AC_CHECK_FUNC(pthread_condattr_setclock,have_pthread_condattr_setclock=true,have_pthread_condattr_setclock=false)
-if test x$have_pthread_condattr_setclock = xtrue; then
-    AC_SEARCH_LIBS([clock_getres],[rt],[THREAD_LIBS="$THREAD_LIBS -lrt"])
-    AC_MSG_CHECKING([for CLOCK_MONOTONIC])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <time.h>
+
+is_missing_pthread_function="is required when compiling D-Bus on Unix platforms, but is not in your libc or libpthread. Please open a bug on https://bugs.freedesktop.org/enter_bug.cgi?product=dbus with details of your platform."
+
+# Don't do these automatic checks if the user set THREAD_LIBS on the
+# configure command-line. If they did, we assume they're right.
+#
+# We also don't do these checks on Windows, because you don't need magical
+# linker flags to have threading support there.
+AS_IF([test "x$dbus_unix" = xyes && test "x$THREAD_LIBS" = x],
+  [
+    # Mandatory pthread functions. In principle, some of these could be made
+    # optional if there are platforms that don't have them.
+    #
+    # Currently, we only look in -lpthread.
+    # In principle we might need to look in -lpthreads, -lthreads, ...
+    # as well - please file a bug if your platform needs this.
+    AC_SEARCH_LIBS([pthread_cond_timedwait],
+        [pthread],
+        [THREAD_LIBS="$LIBS"],
+        [AC_MSG_ERROR([pthread_cond_timedwait $is_missing_pthread_function])],
+        [])
+    AC_SEARCH_LIBS([pthread_mutexattr_init],
+        [pthread],
+        [THREAD_LIBS="$LIBS"],
+        [AC_MSG_ERROR([pthread_mutexattr_init $is_missing_pthread_function])],
+        [])
+    AC_SEARCH_LIBS([pthread_mutexattr_settype],
+        [pthread],
+        [THREAD_LIBS="$LIBS"],
+        [AC_MSG_ERROR([pthread_mutexattr_settype $is_missing_pthread_function])],
+        [])
+
+    # Optional, for monotonic clocks. Because it's optional, this check
+    # is non-fatal if we don't find it.
+    AC_SEARCH_LIBS([pthread_condattr_setclock],
+        [pthread],
+        [THREAD_LIBS="$LIBS"])
+
+    AS_IF([test "x$ac_cv_search_pthread_condattr_setclock" != xno],
+      [
+        AC_SEARCH_LIBS([clock_getres], [rt], [THREAD_LIBS="$LIBS"])
+        AC_MSG_CHECKING([for CLOCK_MONOTONIC])
+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
+[[#include <time.h>
 #include <pthread.h>
 ]], [[
 struct timespec monotonic_timer;
@@@@ -975,15 +1013,17 @@@@ pthread_condattr_init (&attr);
 pthread_condattr_setclock (&attr, CLOCK_MONOTONIC);
 clock_getres (CLOCK_MONOTONIC,&monotonic_timer);
 ]])],
-[have_clock_monotonic=true],
-[have_clock_monotonic=false])
-if test x$have_clock_monotonic = xtrue; then
-    AC_MSG_RESULT([found])
-    AC_DEFINE(HAVE_MONOTONIC_CLOCK, 1, [Define if we have CLOCK_MONOTONIC])
-else
-    AC_MSG_RESULT([not found])
-fi
-fi
+            [have_clock_monotonic=true],
+            [have_clock_monotonic=false])
+        AS_IF([test x$have_clock_monotonic = xtrue],
+	  [
+            AC_MSG_RESULT([found])
+            AC_DEFINE(HAVE_MONOTONIC_CLOCK, 1, [Define if we have CLOCK_MONOTONIC])
+	  ],
+          [AC_MSG_RESULT([not found])])
+      ]) dnl have pthread_condattr_setclock
+  ]) dnl on Unix
+
 LIBS="$save_libs"
 
 AC_SUBST([THREAD_LIBS])
@


1.4
log
@Update to dbus-1.6.10.
@
text
@d1 1
a1 1
$OpenBSD: patch-configure_ac,v 1.3 2013/01/08 09:30:27 ajacoutot Exp $
@


1.3
log
@Bring some fixes from upstream:
* sync configure.ac patch
* dbus-spawn: set SIGPIPE to SIG_IGN before activating services
* dbus-sysdeps-pthread.c: don't fail if !HAVE_MONOTONIC_CLOCK under -Werror=unused
* Remove redundant close() calls
* Don't leak temporary fds pointing to /dev/null
@
text
@d1 1
a1 1
$OpenBSD: patch-configure_ac,v 1.2 2012/09/30 07:51:33 ajacoutot Exp $
d8 3
a10 3
--- configure.ac.orig	Fri Sep 28 21:41:40 2012
+++ configure.ac	Tue Jan  8 09:54:30 2013
@@@@ -953,15 +953,53 @@@@ AC_SUBST([XML_CFLAGS])
d71 1
a71 1
@@@@ -970,15 +1008,17 @@@@ pthread_condattr_init (&attr);
@


1.2
log
@Update to dbus-1.6.8.
@
text
@d1 1
a1 1
$OpenBSD$
d3 4
a6 1
https://bugs.freedesktop.org/show_bug.cgi?id=47239
d9 1
a9 1
+++ configure.ac	Sun Sep 30 09:42:04 2012
d71 1
a71 1
@@@@ -970,15 +1008,18 @@@@ pthread_condattr_init (&attr);
a83 1
+
@


1.1
log
@Remove the -pthread patching and properly fix the autoconf test for the
pthread functions.

from Brad
@
text
@a2 1
pthread_* chunk is from:
d5 3
a7 13
--- configure.ac.orig	Wed Jul 18 13:05:04 2012
+++ configure.ac	Mon Sep  3 13:25:41 2012
@@@@ -766,7 +766,8 @@@@ dnl needed on darwin for NAME_MAX
 AC_CHECK_HEADERS(sys/syslimits.h)
 
 dnl Make it easy to check if we have MSG_NOSIGNAL without actually having to include sys/socket.h
-AC_CHECK_DECLS([MSG_NOSIGNAL], [], [], [[ #include <sys/socket.h> ]])
+AC_CHECK_DECLS([MSG_NOSIGNAL], [], [], [[ #include <sys/types.h>
+#include <sys/socket.h> ]])
 
 dnl check for flavours of varargs macros (test from GLib)
 AC_MSG_CHECKING(for ISO C99 varargs macros in C)
@@@@ -952,15 +953,53 @@@@ AC_SUBST([XML_CFLAGS])
d68 1
a68 1
@@@@ -969,15 +1008,18 @@@@ pthread_condattr_init (&attr);
a95 8
@@@@ -1220,6 +1262,7 @@@@ AC_SUBST([ADT_LIBS])
 # Check for SCM_RIGHTS
 AC_MSG_CHECKING([for SCM_RIGHTS])
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+#include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/un.h>
 static int x = SCM_RIGHTS;
@

