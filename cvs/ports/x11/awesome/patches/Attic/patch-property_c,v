head	1.10;
access;
symbols
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.10
date	2015.01.12.09.00.17;	author dcoppa;	state dead;
branches;
next	1.9;
commitid	ZXrBV9TNCMLtawvr;

1.9
date	2014.12.16.11.16.05;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	4UkLQ4p6HUpxFojY;

1.8
date	2014.04.15.11.16.04;	author dcoppa;	state dead;
branches;
next	1.7;

1.7
date	2014.04.15.10.32.36;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.14.13.33.37;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.15.09.28.46;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.07.14.28.52;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.28.12.45.38;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.22.15.05.50;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.30.11.50.58;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.10
log
@
Update to awesome-3.5.6, codename "For Those About To Rock"
@
text
@$OpenBSD: patch-property_c,v 1.9 2014/12/16 11:16:05 dcoppa Exp $

commit ed3d0489ced8c4f56d2af990979ba75cfa5107b8
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sun Dec 7 14:09:35 2014 +0100

Implement icon_pixmap and icon_mask from WM_HINTS (FS#1297)

Fun fact: ICCCM specifies that icon_pixmap must have depth 1. Xterm uses a
pixmap with depth 24. Yay... As such, I don't have any test for the depth == 1
case and will just assume that it does the right thing. If it doesn't, I bet no
one will notice anyway.

Signed-off-by: Uli Schlachter <psychon@@znc.in>

--- property.c.orig	Fri Apr 11 04:07:10 2014
+++ property.c	Tue Dec 16 04:47:13 2014
@@@@ -205,6 +205,19 @@@@ property_update_wm_hints(client_t *c, xcb_get_property
     if(wmh.flags & XCB_ICCCM_WM_HINT_WINDOW_GROUP)
         client_set_group_window(globalconf.L, -1, wmh.window_group);
 
+    if(!c->have_ewmh_icon)
+    {
+        if(wmh.flags & XCB_ICCCM_WM_HINT_ICON_PIXMAP)
+        {
+            if(wmh.flags & XCB_ICCCM_WM_HINT_ICON_MASK)
+                client_set_icon_from_pixmaps(c, wmh.icon_pixmap, wmh.icon_mask);
+            else
+                client_set_icon_from_pixmaps(c, wmh.icon_pixmap, XCB_NONE);
+        }
+        else
+            client_set_icon(c, NULL);
+    }
+
     lua_pop(globalconf.L, 1);
 }
 
@@@@ -261,6 +274,7 @@@@ property_update_net_wm_icon(client_t *c, xcb_get_prope
     if(!surface)
         return;
 
+    c->have_ewmh_icon = true;
     client_set_icon(c, surface);
     cairo_surface_destroy(surface);
 }
@


1.9
log
@
Merge fixes from the stable '3.5' branch:

Don't move clients on ConfigureRequests

Implement icon_pixmap and icon_mask from WM_HINTS

Don't set a background-pixel for our client frame windows
@
text
@d1 1
a1 1
$OpenBSD$
@


1.8
log
@
Update to awesome-3.5.5
@
text
@d1 1
a1 1
$OpenBSD: patch-property_c,v 1.7 2014/04/15 10:32:36 dcoppa Exp $
d3 1
a3 1
commit 389a54e356f700a4f2a621e05dbdbafab4a3a03a
d5 1
a5 1
Date:   Sat Nov 23 14:42:56 2013 +0100
d7 1
a7 1
Really ignore loops in transient_for (FS#1124)
d9 4
a12 3
The code in property_update_wm_transient_for() looked at the transient_for
relation before the new transient got set. However, the code is supposed to
check if we get a loop after introducing this new transient_for.
a13 8
Thus, if we arrive back at the client that we started from, we can be sure that
there is a cycle. Signal this by setting the loop counter high enough to abort
the loop and make the rest of this function do nothing.

No idea how I missed this case before nor why I cannot reproduce this on debian,
but can reproduce it on Arch just fine.

Reported-By: Kasimir Knallkopf at http://article.gmane.org/gmane.comp.window-managers.awesome/10415
d16 5
a20 5
--- property.c.orig	Sat Oct 12 18:48:49 2013
+++ property.c	Tue Jan 14 10:21:57 2014
@@@@ -119,9 +119,14 @@@@ property_update_wm_transient_for(client_t *c, xcb_get_
     client_set_type(globalconf.L, -1, WINDOW_TYPE_DIALOG);
     client_set_above(globalconf.L, -1, false);
d22 1
a22 3
-    /* Verify that there are no loops in the transient_for relation */
+    /* Verify that there are no loops in the transient_for relation after we are done */
     for(counter = 0; tmp != NULL && counter <= globalconf.stack.len; counter++)
d24 9
a32 4
+        if (tmp == c)
+            /* We arrived back at the client we started from, so there is a loop */
+            counter = globalconf.stack.len+1;
         tmp = tmp->transient_for;
d34 7
a40 2
     if (counter <= globalconf.stack.len)
         client_set_transient_for(globalconf.L, -1, tc);
d42 4
@


1.7
log
@
Cleanup following libxcb/xcb-util updates
@
text
@d1 1
a1 1
$OpenBSD: patch-property_c,v 1.6 2014/01/14 13:33:37 dcoppa Exp $
@


1.6
log
@Bugfixes from upstream:

awesomerc: Fix set menu clients width
(upstream git commit 843a36aa6e7fdb5e1e76fbb9879328c92adc77f7)

awful.menu.clients: Fix API
(upstream git commit 479f7b990cf411bc116f728eea8edc0ea6b4b8d3)

menu: do not double escape name in 'menu:clients()'
(upstream git commit 77e92e17a1ec1711233f42560b5b339944ce71b2)

awful.tag.delete: Deactivate tags
(upstream git commit d4b12bb1b2b8365d7c1b9be365dc5843303ba828)

awful.tag.viewmore: Make screen optional
(upstream git commit 5cd8c7e540c91b575581c7958ec82903bb646058)

tasklist: Add default colors for broken themes
(upstream git commit 15f088196699857cdac28250d7a3857fe8b57cee)

menubar: Fix API docs
(upstream git commit aa51379be0a9317a5549034bc9be149f41ad9201)

Fix a bug in luaA_drawin_set_shape_bounding() which forgot to include
the drawin's border in its size calculation
(part of upstream git commit 56c57979056ec23cbd4982f3b81f6d80895fbe46)

Really ignore loops in transient_for
(upstream git commit 389a54e356f700a4f2a621e05dbdbafab4a3a03a)
@
text
@d1 1
a1 3
$OpenBSD: patch-property_c,v 1.5 2013/10/15 09:28:46 dcoppa Exp $

Revert to the old xcb-util-0.3.6 API
a24 18
@@@@ -98,7 +98,7 @@@@ HANDLE_PROPERTY(net_wm_pid)
 xcb_get_property_cookie_t
 property_get_wm_transient_for(client_t *c)
 {
-    return xcb_icccm_get_wm_transient_for_unchecked(globalconf.connection, c->window);
+    return xcb_get_wm_transient_for_unchecked(globalconf.connection, c->window);
 }
 
 void
@@@@ -108,7 +108,7 @@@@ property_update_wm_transient_for(client_t *c, xcb_get_
     int counter;
     client_t *tc, *tmp;
 
-    if(!xcb_icccm_get_wm_transient_for_reply(globalconf.connection,
+    if(!xcb_get_wm_transient_for_reply(globalconf.connection,
 					     cookie,
 					     &trans, NULL))
             return;
a39 111
 
@@@@ -156,7 +161,7 @@@@ property_update_wm_client_leader(client_t *c, xcb_get_
 xcb_get_property_cookie_t
 property_get_wm_normal_hints(client_t *c)
 {
-    return xcb_icccm_get_wm_normal_hints_unchecked(globalconf.connection, c->window);
+    return xcb_get_wm_normal_hints_unchecked(globalconf.connection, c->window);
 }
 
 /** Update the size hints of a client.
@@@@ -166,7 +171,7 @@@@ property_get_wm_normal_hints(client_t *c)
 void
 property_update_wm_normal_hints(client_t *c, xcb_get_property_cookie_t cookie)
 {
-    xcb_icccm_get_wm_normal_hints_reply(globalconf.connection,
+    xcb_get_wm_normal_hints_reply(globalconf.connection,
 					cookie,
 					&c->size_hints, NULL);
 }
@@@@ -174,7 +179,7 @@@@ property_update_wm_normal_hints(client_t *c, xcb_get_p
 xcb_get_property_cookie_t
 property_get_wm_hints(client_t *c)
 {
-    return xcb_icccm_get_wm_hints_unchecked(globalconf.connection, c->window);
+    return xcb_get_wm_hints_unchecked(globalconf.connection, c->window);
 }
 
 /** Update the WM hints of a client.
@@@@ -184,20 +189,20 @@@@ property_get_wm_hints(client_t *c)
 void
 property_update_wm_hints(client_t *c, xcb_get_property_cookie_t cookie)
 {
-    xcb_icccm_wm_hints_t wmh;
+    xcb_wm_hints_t wmh;
 
-    if(!xcb_icccm_get_wm_hints_reply(globalconf.connection,
+    if(!xcb_get_wm_hints_reply(globalconf.connection,
 				     cookie,
 				     &wmh, NULL))
         return;
 
     luaA_object_push(globalconf.L, c);
-    client_set_urgent(globalconf.L, -1, xcb_icccm_wm_hints_get_urgency(&wmh));
+    client_set_urgent(globalconf.L, -1, xcb_wm_hints_get_urgency(&wmh));
 
-    if(wmh.flags & XCB_ICCCM_WM_HINT_INPUT)
+    if(wmh.flags & XCB_WM_HINT_INPUT)
         c->nofocus = !wmh.input;
 
-    if(wmh.flags & XCB_ICCCM_WM_HINT_WINDOW_GROUP)
+    if(wmh.flags & XCB_WM_HINT_WINDOW_GROUP)
         client_set_group_window(globalconf.L, -1, wmh.window_group);
 
     lua_pop(globalconf.L, 1);
@@@@ -206,7 +211,7 @@@@ property_update_wm_hints(client_t *c, xcb_get_property
 xcb_get_property_cookie_t
 property_get_wm_class(client_t *c)
 {
-    return xcb_icccm_get_wm_class_unchecked(globalconf.connection, c->window);
+    return xcb_get_wm_class_unchecked(globalconf.connection, c->window);
 }
 
 /** Update WM_CLASS of a client.
@@@@ -216,9 +221,9 @@@@ property_get_wm_class(client_t *c)
 void
 property_update_wm_class(client_t *c, xcb_get_property_cookie_t cookie)
 {
-    xcb_icccm_get_wm_class_reply_t hint;
+    xcb_get_wm_class_reply_t hint;
 
-    if(!xcb_icccm_get_wm_class_reply(globalconf.connection,
+    if(!xcb_get_wm_class_reply(globalconf.connection,
 				     cookie,
 				     &hint, NULL))
         return;
@@@@ -227,7 +232,7 @@@@ property_update_wm_class(client_t *c, xcb_get_property
     client_set_class_instance(globalconf.L, -1, hint.class_name, hint.instance_name);
     lua_pop(globalconf.L, 1);
 
-    xcb_icccm_get_wm_class_reply_wipe(&hint);
+    xcb_get_wm_class_reply_wipe(&hint);
 }
 
 static int
@@@@ -290,7 +295,7 @@@@ property_update_net_wm_pid(client_t *c, xcb_get_proper
 xcb_get_property_cookie_t
 property_get_wm_protocols(client_t *c)
 {
-    return xcb_icccm_get_wm_protocols_unchecked(globalconf.connection,
+    return xcb_get_wm_protocols_unchecked(globalconf.connection,
 						c->window, WM_PROTOCOLS);
 }
 
@@@@ -301,15 +306,15 @@@@ property_get_wm_protocols(client_t *c)
 void
 property_update_wm_protocols(client_t *c, xcb_get_property_cookie_t cookie)
 {
-    xcb_icccm_get_wm_protocols_reply_t protocols;
+    xcb_get_wm_protocols_reply_t protocols;
 
     /* If this fails for any reason, we still got the old value */
-    if(!xcb_icccm_get_wm_protocols_reply(globalconf.connection,
+    if(!xcb_get_wm_protocols_reply(globalconf.connection,
 					 cookie,
 					 &protocols, NULL))
         return;
 
-    xcb_icccm_get_wm_protocols_reply_wipe(&c->protocols);
+    xcb_get_wm_protocols_reply_wipe(&c->protocols);
     memcpy(&c->protocols, &protocols, sizeof(protocols));
 }
@


1.5
log
@Update to awesome-3.5.2, codename "The Fox".
@
text
@d1 1
a1 1
$OpenBSD: patch-property_c,v 1.4 2013/10/07 14:28:52 dcoppa Exp $
d5 20
d26 1
a26 1
+++ property.c	Tue Oct 15 09:51:13 2013
d45 17
a61 1
@@@@ -156,7 +156,7 @@@@ property_update_wm_client_leader(client_t *c, xcb_get_
d70 1
a70 1
@@@@ -166,7 +166,7 @@@@ property_get_wm_normal_hints(client_t *c)
d79 1
a79 1
@@@@ -174,7 +174,7 @@@@ property_update_wm_normal_hints(client_t *c, xcb_get_p
d88 1
a88 1
@@@@ -184,20 +184,20 @@@@ property_get_wm_hints(client_t *c)
d114 1
a114 1
@@@@ -206,7 +206,7 @@@@ property_update_wm_hints(client_t *c, xcb_get_property
d123 1
a123 1
@@@@ -216,9 +216,9 @@@@ property_get_wm_class(client_t *c)
d135 1
a135 1
@@@@ -227,7 +227,7 @@@@ property_update_wm_class(client_t *c, xcb_get_property
d144 1
a144 1
@@@@ -290,7 +290,7 @@@@ property_update_net_wm_pid(client_t *c, xcb_get_proper
d153 1
a153 1
@@@@ -301,15 +301,15 @@@@ property_get_wm_protocols(client_t *c)
@


1.4
log
@Bunch of bugfixes from upstream:

Fix possible deadlock during startup
awful.client.tiled: Ignore fullscreen clients
awful.screen.focus: Don't move mouse to (0, 0) first
naughty: Verify image parameters coming from dbus
wibox.layout.fixed: Fix fill space
Revert "client: add a limit to the loop"
client: Ignore transient_for causing loops
screen: Fix screen equality comparison
@
text
@d1 1
a1 1
$OpenBSD: patch-property_c,v 1.3 2013/06/28 12:45:38 dcoppa Exp $
d5 3
a7 32
commit ed66fda1f1d390db18383810c6f91e5aec6ebf16
Author: Uli Schlachter <psychon@@znc.in>
Date:   Fri Oct 4 14:31:48 2013 +0200

client: Ignore transient_for causing loops (FS#1124)

Lots of code assumes that it can recursively follow a client's transient_for
field until it reached an end without a transient_for client. Instead of fixing
all those places to properly handle loops, this patch just makes us ignore
WM_TRANSIENT_FOR if the property causes a loop.

This means that it can be a little random which WM_TRANSIENT_FOR property is
ignored, because it will always be the one that happens to complete the cycle. I
don't think that this is bad, because there shouldn't be any loops in the first
place.

Lots-of-kudos-to: David Mohr <david@@mcbf.net>
Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit 14722aa6e43f7108eddceb1306c3d5f91cb538e9
Author: Uli Schlachter <psychon@@znc.in>
Date:   Wed Jun 19 19:23:19 2013 +0200

Fix WM_CLIENT_LEADER handling

This was broken since 5d0a81c8bf48. Whoops.

Signed-off-by: Uli Schlachter <psychon@@znc.in>

--- property.c.orig	Mon Apr  1 13:44:46 2013
+++ property.c	Mon Oct  7 15:31:55 2013
@@@@ -98,23 +98,33 @@@@ HANDLE_PROPERTY(net_wm_pid)
d16 3
a18 5
 property_update_wm_transient_for(client_t *c, xcb_get_property_cookie_t cookie)
 {
     xcb_window_t trans;
+    int counter;
+    client_t *tc, *tmp;
d25 1
a25 27
 
+    tmp = tc = client_getbywin(trans);
+
     luaA_object_push(globalconf.L, c);
     client_set_type(globalconf.L, -1, WINDOW_TYPE_DIALOG);
     client_set_above(globalconf.L, -1, false);
-    client_set_transient_for(globalconf.L, -1, client_getbywin(trans));
+
+    /* Verify that there are no loops in the transient_for relation */
+    for(counter = 0; tmp != NULL && counter <= globalconf.stack.len; counter++)
+        tmp = tmp->transient_for;
+    if (counter <= globalconf.stack.len)
+        client_set_transient_for(globalconf.L, -1, tc);
+
     lua_pop(globalconf.L, 1);
 }
 
@@@@ -122,7 +132,7 @@@@ xcb_get_property_cookie_t
 property_get_wm_client_leader(client_t *c)
 {
     return xcb_get_property_unchecked(globalconf.connection, false, c->window,
-                                      WM_CLIENT_LEADER, XCB_ATOM_WINDOW, 1, 32);
+                                      WM_CLIENT_LEADER, XCB_ATOM_WINDOW, 0, 32);
 }
 
 /** Update leader hint of a client.
@@@@ -146,7 +156,7 @@@@ property_update_wm_client_leader(client_t *c, xcb_get_
d34 1
a34 1
@@@@ -156,7 +166,7 @@@@ property_get_wm_normal_hints(client_t *c)
d43 1
a43 1
@@@@ -164,7 +174,7 @@@@ property_update_wm_normal_hints(client_t *c, xcb_get_p
d52 1
a52 1
@@@@ -174,20 +184,20 @@@@ property_get_wm_hints(client_t *c)
d78 1
a78 1
@@@@ -196,7 +206,7 @@@@ property_update_wm_hints(client_t *c, xcb_get_property
d87 1
a87 1
@@@@ -206,9 +216,9 @@@@ property_get_wm_class(client_t *c)
d99 1
a99 1
@@@@ -217,7 +227,7 @@@@ property_update_wm_class(client_t *c, xcb_get_property
d108 1
a108 1
@@@@ -280,7 +290,7 @@@@ property_update_net_wm_pid(client_t *c, xcb_get_proper
d117 1
a117 1
@@@@ -291,15 +301,15 @@@@ property_get_wm_protocols(client_t *c)
@


1.3
log
@
luadoc: Clients have a leader_window, not leader_id
(upstream git commit 5b5dd0a19807298e8f63bc9a541177993a86a0e3)

Fix WM_CLIENT_LEADER handling
(upstream git commit 14722aa6e43f7108eddceb1306c3d5f91cb538e9)
@
text
@d1 1
a1 1
$OpenBSD: patch-property_c,v 1.2 2013/05/22 15:05:50 dcoppa Exp $
d5 19
d35 2
a36 2
+++ property.c	Fri Jun 28 14:20:15 2013
@@@@ -98,7 +98,7 @@@@ HANDLE_PROPERTY(net_wm_pid)
d45 1
a45 1
@@@@ -106,7 +106,7 @@@@ property_update_wm_transient_for(client_t *c, xcb_get_
d48 2
d56 18
a73 1
@@@@ -122,7 +122,7 @@@@ xcb_get_property_cookie_t
d82 1
a82 1
@@@@ -146,7 +146,7 @@@@ property_update_wm_client_leader(client_t *c, xcb_get_
d91 1
a91 1
@@@@ -156,7 +156,7 @@@@ property_get_wm_normal_hints(client_t *c)
d100 1
a100 1
@@@@ -164,7 +164,7 @@@@ property_update_wm_normal_hints(client_t *c, xcb_get_p
d109 1
a109 1
@@@@ -174,20 +174,20 @@@@ property_get_wm_hints(client_t *c)
d135 1
a135 1
@@@@ -196,7 +196,7 @@@@ property_update_wm_hints(client_t *c, xcb_get_property
d144 1
a144 1
@@@@ -206,9 +206,9 @@@@ property_get_wm_class(client_t *c)
d156 1
a156 1
@@@@ -217,7 +217,7 @@@@ property_update_wm_class(client_t *c, xcb_get_property
d165 1
a165 1
@@@@ -280,7 +280,7 @@@@ property_update_net_wm_pid(client_t *c, xcb_get_proper
d174 1
a174 1
@@@@ -291,15 +291,15 @@@@ property_get_wm_protocols(client_t *c)
@


1.2
log
@Major update to awesome-3.5.1

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-property_c,v 1.1 2011/11/30 11:50:58 dcoppa Exp $
d5 12
a16 2
--- property.c.orig	Mon May 20 13:43:41 2013
+++ property.c	Mon May 20 13:44:03 2013
d35 9
@


1.1
log
@Update to awesome v3.4.11 (Pickapart)

ChangeLog at http://awesome.naquadah.org/changelogs/short/v3.4.11
@
text
@d1 1
a1 1
$OpenBSD$
d5 41
a45 20
--- property.c.orig	Wed Nov 30 11:25:32 2011
+++ property.c	Wed Nov 30 11:28:37 2011
@@@@ -105,13 +105,13 @@@@ property_update_wm_transient_for(client_t *c, xcb_get_
 
     if(reply)
     {
-        if(!xcb_icccm_get_wm_transient_for_from_reply(&trans, reply))
+        if(!xcb_get_wm_transient_for_from_reply(&trans, reply))
             return;
     }
     else
     {
-        if(!xcb_icccm_get_wm_transient_for_reply(globalconf.connection,
-                                            xcb_icccm_get_wm_transient_for_unchecked(globalconf.connection,
+        if(!xcb_get_wm_transient_for_reply(globalconf.connection,
+                                            xcb_get_wm_transient_for_unchecked(globalconf.connection,
                                                                                      c->window),
                                             &trans, NULL))
             return;
@@@@ -160,13 +160,13 @@@@ property_update_wm_normal_hints(client_t *c, xcb_get_p
d47 6
a52 16
     if(reply)
     {
-        if(!xcb_icccm_get_wm_size_hints_from_reply(&c->size_hints, reply))
+        if(!xcb_get_wm_size_hints_from_reply(&c->size_hints, reply))
             return;
     }
     else
     {
-        if(!xcb_icccm_get_wm_normal_hints_reply(globalconf.connection,
-                                                xcb_icccm_get_wm_normal_hints_unchecked(globalconf.connection,
+        if(!xcb_get_wm_normal_hints_reply(globalconf.connection,
+                                                xcb_get_wm_normal_hints_unchecked(globalconf.connection,
                                                                                         c->window),
                                                 &c->size_hints, NULL))
             return;
@@@@ -180,31 +180,31 @@@@ property_update_wm_normal_hints(client_t *c, xcb_get_p
d54 1
a54 1
 property_update_wm_hints(client_t *c, xcb_get_property_reply_t *reply)
d59 5
a63 15
     if(reply)
     {
-        if(!xcb_icccm_get_wm_hints_from_reply(&wmh, reply))
+        if(!xcb_get_wm_hints_from_reply(&wmh, reply))
             return;
     }
     else
     {
-        if(!xcb_icccm_get_wm_hints_reply(globalconf.connection,
-                                         xcb_icccm_get_wm_hints_unchecked(globalconf.connection, c->window),
+        if(!xcb_get_wm_hints_reply(globalconf.connection,
+                                         xcb_get_wm_hints_unchecked(globalconf.connection, c->window),
                                          &wmh, NULL))
             return;
     }
a66 2
-    if(wmh.flags & XCB_ICCCM_WM_HINT_STATE &&
-       wmh.initial_state == XCB_ICCCM_WM_STATE_WITHDRAWN)
a67 3
+    if(wmh.flags & XCB_WM_HINT_STATE &&
+       wmh.initial_state == XCB_WM_STATE_WITHDRAWN)
         client_set_border_width(globalconf.L, -1, 0);
d78 10
a87 1
@@@@ -217,17 +217,17 @@@@ property_update_wm_hints(client_t *c, xcb_get_property
d89 1
a89 1
 property_update_wm_class(client_t *c, xcb_get_property_reply_t *reply)
d94 8
a101 16
     if(reply)
     {
-        if(!xcb_icccm_get_wm_class_from_reply(&hint, reply))
+        if(!xcb_get_wm_class_from_reply(&hint, reply))
             return;
     }
     else
     {
-        if(!xcb_icccm_get_wm_class_reply(globalconf.connection,
-                                         xcb_icccm_get_wm_class_unchecked(globalconf.connection, c->window),
+        if(!xcb_get_wm_class_reply(globalconf.connection,
+                                         xcb_get_wm_class_unchecked(globalconf.connection, c->window),
                                          &hint, NULL))
             return;
     }
@@@@ -238,7 +238,7 @@@@ property_update_wm_class(client_t *c, xcb_get_property
d103 2
a104 4
     /* only delete reply if we get it ourselves */
     if(!reply)
-        xcb_icccm_get_wm_class_reply_wipe(&hint);
+        xcb_get_wm_class_reply_wipe(&hint);
d108 10
a117 1
@@@@ -308,14 +308,14 @@@@ property_update_net_wm_pid(client_t *c,
d119 1
a119 1
 property_update_wm_protocols(client_t *c, xcb_get_property_reply_t *reply)
a122 1
     xcb_get_property_reply_t *reply_copy;
d124 6
a129 21
     if(reply)
     {
         reply_copy = p_dup(reply, 1);
 
-        if(!xcb_icccm_get_wm_protocols_from_reply(reply_copy, &protocols))
+        if(!xcb_get_wm_protocols_from_reply(reply_copy, &protocols))
         {
             p_delete(&reply_copy);
             return;
@@@@ -324,14 +324,14 @@@@ property_update_wm_protocols(client_t *c, xcb_get_prop
     else
     {
         /* If this fails for any reason, we still got the old value */
-        if(!xcb_icccm_get_wm_protocols_reply(globalconf.connection,
-                                             xcb_icccm_get_wm_protocols_unchecked(globalconf.connection,
+        if(!xcb_get_wm_protocols_reply(globalconf.connection,
+                                             xcb_get_wm_protocols_unchecked(globalconf.connection,
                                                                                   c->window, WM_PROTOCOLS),
                                              &protocols, NULL))
             return;
     }
@

