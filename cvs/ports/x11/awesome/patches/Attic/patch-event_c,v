head	1.16;
access;
symbols
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.16
date	2016.03.07.11.33.59;	author dcoppa;	state dead;
branches;
next	1.15;
commitid	7zUqqCR47GCkIAqa;

1.15
date	2016.03.01.11.42.24;	author dcoppa;	state Exp;
branches;
next	1.14;
commitid	QAoVD7PgkclyraIQ;

1.14
date	2016.02.01.08.26.23;	author dcoppa;	state dead;
branches;
next	1.13;
commitid	b8Z8D2Rds0QfNlTK;

1.13
date	2016.01.27.15.18.05;	author dcoppa;	state Exp;
branches;
next	1.12;
commitid	zO42Vzz8VkZuapnh;

1.12
date	2016.01.18.09.50.09;	author dcoppa;	state dead;
branches;
next	1.11;
commitid	lrRI65aKSWqF9Rnn;

1.11
date	2016.01.13.08.47.44;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	JTWbnf5NRvSlJUL9;

1.10
date	2015.11.09.14.36.12;	author dcoppa;	state Exp;
branches;
next	1.9;
commitid	LYfZ9mVasxXSCMq6;

1.9
date	2015.01.12.09.00.17;	author dcoppa;	state dead;
branches;
next	1.8;
commitid	ZXrBV9TNCMLtawvr;

1.8
date	2014.12.16.11.16.05;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	4UkLQ4p6HUpxFojY;

1.7
date	2014.04.29.11.36.22;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.15.10.32.36;	author dcoppa;	state dead;
branches;
next	1.5;

1.5
date	2013.10.15.09.28.42;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.08.11.48.58;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2013.05.24.16.15.24;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.22.15.05.50;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.30.11.50.58;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.16
log
@
Update to awesome-3.5.9
@
text
@$OpenBSD: patch-event_c,v 1.15 2016/03/01 11:42:24 dcoppa Exp $

commit a181bee46533f92d573f7a4622391ae58320cda8
Author: Uli Schlachter <psychon@@znc.in>
Date:   Wed Feb 17 18:52:35 2016 +0100

Fix unbalance Lua stack usage in event_handle_leavenotify()

Commit 42e00819584c removed a call to lua_pop(L,1) that was still necessary.
This commit adds that call again.

Fixes: https://github.com/awesomeWM/awesome/issues/703
Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit e54d911a94697eb5fd5b7d5ac2a72e4d3be6194b
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sun Feb 28 13:29:25 2016 +0100

Make client key bindings for e.g. xeyes work again

Instead of focusing the root window, we now create a "focus window" inside of
our frame window. This window is placed so that it is not visible, but we can
grab key bindings on it to simulate the window having the input focus.

Fixes: https://github.com/awesomeWM/awesome/issues/699
Signed-off-by: Uli Schlachter <psychon@@znc.in>

--- event.c.orig	Sat Jan 30 14:55:18 2016
+++ event.c	Tue Mar  1 11:24:18 2016
@@@@ -507,6 +507,7 @@@@ event_handle_leavenotify(xcb_leave_notify_event_t *ev)
     {
         luaA_object_push(globalconf.L, c);
         luaA_object_emit_signal(globalconf.L, -1, "mouse::leave", 0);
+        lua_pop(globalconf.L, 1);
     }
 
     lua_pushnil(globalconf.L);
@@@@ -644,7 +645,7 @@@@ event_handle_key(xcb_key_press_event_t *ev)
         /* get keysym ignoring all modifiers */
         xcb_keysym_t keysym = keyresolv_get_keysym(ev->detail, 0);
         client_t *c;
-        if((c = client_getbywin(ev->event)))
+        if((c = client_getbywin(ev->event)) || (c = client_getbynofocuswin(ev->event)))
         {
             luaA_object_push(globalconf.L, c);
             event_key_callback(ev, &c->keys, -1, 1, &keysym);
@@@@ -835,6 +836,8 @@@@ event_handle_mappingnotify(xcb_mapping_notify_event_t 
             client_t *c = *_c;
             xcb_ungrab_key(globalconf.connection, XCB_GRAB_ANY, c->window, XCB_BUTTON_MASK_ANY);
             xwindow_grabkeys(c->window, &c->keys);
+            if (c->nofocus_window)
+                xwindow_grabkeys(c->nofocus_window, &c->keys);
         }
     }
 }
@


1.15
log
@
Merge several fixes from the stable '3.5' branch
@
text
@d1 1
a1 1
$OpenBSD$
@


1.14
log
@
Update to awesome-3.5.8
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.13 2016/01/27 15:18:05 dcoppa Exp $
d3 1
a3 1
commit f128b313130ad10dfa6a8e1bdf8e360038aee378
d5 1
a5 1
Date:   Sat Jan 23 13:14:30 2016 +0100
d7 1
a7 1
Fix window key grabbing
d9 2
a10 3
Commit ff799a0f5dba06b is incomplete. It changed the window on which we grab
keys, but only in some places. When the keyboard layout changes, we have to
re-grab these keys, but the code does so on the wrong window.
d12 12
a23 1
This patch fixes that oversight.
d25 1
a25 1
Fixes: https://github.com/awesomeWM/awesome/issues/639
d28 16
a43 4
--- event.c.orig	Fri Jan 15 16:51:19 2016
+++ event.c	Wed Jan 27 16:10:03 2016
@@@@ -833,8 +833,8 @@@@ event_handle_mappingnotify(xcb_mapping_notify_event_t 
         foreach(_c, globalconf.clients)
d45 3
d49 4
a52 4
-            xcb_ungrab_key(globalconf.connection, XCB_GRAB_ANY, c->frame_window, XCB_BUTTON_MASK_ANY);
-            xwindow_grabkeys(c->frame_window, &c->keys);
+            xcb_ungrab_key(globalconf.connection, XCB_GRAB_ANY, c->window, XCB_BUTTON_MASK_ANY);
+            xwindow_grabkeys(c->window, &c->keys);
@


1.13
log
@
Merge fix from the stable '3.5' branch:

Fix window key grabbing
(git commit f128b313130ad10dfa6a8e1bdf8e360038aee378)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.12
log
@
Update to awesome-3.5.7
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.11 2016/01/13 08:47:44 dcoppa Exp $
d3 1
a3 1
commit bbf88211b4fe86288d1e918d1758681130438589
d5 1
a5 1
Date:   Sat Oct 10 17:41:05 2015 +0200
d7 1
a7 1
Apply window gravity when a window moves itself
d9 3
a11 2
This just makes us do what ICCCM requires us to do. Tested via metacity's
test-gravity.c.
d13 1
a13 81
Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit cd5cd52c20f44d53d8a47060f3d91b7d6fec925f
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sat Oct 10 17:42:25 2015 +0200

Refactor code a little

The previous commit added some variables and this commit makes the surrounding
code use these new variables as well.

Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit ac72f8e5a086f352da66525aa14174d2502b146b
Author: Uli Schlachter <psychon@@znc.in>
Date:   Thu Sep 17 16:32:56 2015 +0200

Fix enter/leave events on titlebars

This adds a global variable that tracks the drawable that is currently under the
mouse cursor. This new variable is then used so that we get consistent behavior
for enter/leave signals. Such signals are now also generated when a MotionNotify
event tells us that the pointer is now in a different titlebar.

Before this, it was possible that we did not generate a leave event on a
titlebar since the LeaveNotify contains the cursor position after the leave and
we did not manage to figure out which titlebar was left.

Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit 1c27a69131428e9e733374c2a3676ca4ecee45d2
Author: Kimball Thurston <kdt3rd@@gmail.com>
Date:   Tue Dec 22 21:46:17 2015 -0800

Fix focus handling with multiple awesome instances

When there are multiple X11 screens (i.e. :0.0 and :0.1) for zaphod mode
style X setups, this triggers a refresh of focus when the instance
running on a particular root receives the mouse

Fixes https://github.com/awesomeWM/awesome/issues/599.

commit de8fd4ffd4998e51164e4bc734fe74d11d358a56
Author: Uli Schlachter <psychon@@znc.in>
Date:   Thu Sep 17 17:03:36 2015 +0200

Handle enter/leave events with detail=Inferior correctly

There is a client window C. Around this window, awesome adds a frame window F.
When the pointer is inside of C and then moves inside of F, we get a LeaveNotify
with detail=Inferior, but from our point of view, the pointer is still inside of
C, because F is contained in C.

Similarly, if the pointer is in F and moves to C, we get an EnterNotify with
detail=Inferior that we should ignore. However, for an EnterNotify the pointer
can now be inside of a titlebar, so this case has to be handled now.

The above explains the enter/leave behavior for clients. Let's now think about
titlebars: When the pointer moves from C to F, it cannot be in any titlebar any
more, so we must generate a leave event on that titlebar. Similar when the
pointer moves from F to C, but in this case we also have to figure out which
titlebar now contains the pointer.

This patch makes the code handle these events with detail=Inferior correctly.

Closes https://github.com/awesomeWM/awesome/pull/461.

Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit ff799a0f5dba06beed9f13939237899e53ff8fd8
Author: Uli Schlachter <psychon@@znc.in>
Date:   Fri Oct 16 17:30:46 2015 +0200

Grab client keys on the client window (#496)

Before this, we grabbed the keys on the frame window. That meant we only got key
events for things that nothing else grabbed directly on the key window.

After this, we grab directly on the client window itself and so we "fight" with
everything else which wants to grab keys. I don't actually know how the winner
is decided... First come, first serve, the rest gets an error?
d15 1
d18 10
a27 34
--- event.c.orig	Sat Jan 10 20:36:35 2015
+++ event.c	Wed Jan 13 09:36:25 2016
@@@@ -296,27 +296,37 @@@@ event_handle_configurerequest(xcb_configure_request_ev
     if((c = client_getbywin(ev->window)))
     {
         area_t geometry = c->geometry;
+        uint16_t bw = c->border_width;
+        uint16_t tb_left = c->titlebar[CLIENT_TITLEBAR_LEFT].size;
+        uint16_t tb_right = c->titlebar[CLIENT_TITLEBAR_RIGHT].size;
+        uint16_t tb_top = c->titlebar[CLIENT_TITLEBAR_TOP].size;
+        uint16_t tb_bottom = c->titlebar[CLIENT_TITLEBAR_BOTTOM].size;
+        uint16_t deco_left = bw + tb_left;
+        uint16_t deco_right = bw + tb_right;
+        uint16_t deco_top = bw + tb_top;
+        uint16_t deco_bottom = bw + tb_bottom;
         int16_t diff_w = 0, diff_h = 0, diff_border = 0;
 
         if(ev->value_mask & XCB_CONFIG_WINDOW_X)
         {
+            int16_t diff = 0;
             geometry.x = ev->x;
-            /* The ConfigureRequest specifies the position of the outer corner of the client window, we want the frame */
-            geometry.x -= c->border_width;
+            xwindow_translate_for_gravity(c->size_hints.win_gravity, deco_left, 0, deco_right, 0, &diff, NULL);
+            geometry.x += diff;
         }
         if(ev->value_mask & XCB_CONFIG_WINDOW_Y)
         {
+            int16_t diff = 0;
             geometry.y = ev->y;
-            /* The ConfigureRequest specifies the position of the outer corner of the client window, we want the frame */
-            geometry.y -= c->border_width;
+            xwindow_translate_for_gravity(c->size_hints.win_gravity, 0, deco_top, 0, deco_bottom, NULL, &diff);
+            geometry.y += diff;
a28 116
         if(ev->value_mask & XCB_CONFIG_WINDOW_WIDTH)
         {
             uint16_t old_w = geometry.width;
             geometry.width = ev->width;
             /* The ConfigureRequest specifies the size of the client window, we want the frame */
-            geometry.width += c->titlebar[CLIENT_TITLEBAR_LEFT].size;
-            geometry.width += c->titlebar[CLIENT_TITLEBAR_RIGHT].size;
+            geometry.width += tb_left + tb_right;
             diff_w = geometry.width - old_w;
         }
         if(ev->value_mask & XCB_CONFIG_WINDOW_HEIGHT)
@@@@ -324,13 +334,12 @@@@ event_handle_configurerequest(xcb_configure_request_ev
             uint16_t old_h = geometry.height;
             geometry.height = ev->height;
             /* The ConfigureRequest specifies the size of the client window, we want the frame */
-            geometry.height += c->titlebar[CLIENT_TITLEBAR_TOP].size;
-            geometry.height += c->titlebar[CLIENT_TITLEBAR_BOTTOM].size;
+            geometry.height += tb_top + tb_bottom;
             diff_h = geometry.height - old_h;
         }
         if(ev->value_mask & XCB_CONFIG_WINDOW_BORDER_WIDTH)
         {
-            diff_border = ev->border_width - c->border_width;
+            diff_border = ev->border_width - bw;
             diff_h += diff_border;
             diff_w += diff_border;
 
@@@@ -392,6 +401,44 @@@@ event_handle_destroynotify(xcb_destroy_notify_event_t 
             }
 }
 
+/** Record that the given drawable contains the pointer.
+ */
+static void
+event_drawable_under_mouse(lua_State *L, int ud)
+{
+    void *d;
+
+    lua_pushvalue(L, ud);
+    d = luaA_object_ref(L, -1);
+
+    if (d == globalconf.drawable_under_mouse)
+    {
+        /* Nothing to do */
+        luaA_object_unref(L, d);
+        return;
+    }
+
+    if (globalconf.drawable_under_mouse != NULL)
+    {
+        /* Emit leave on previous drawable */
+        luaA_object_push(L, globalconf.drawable_under_mouse);
+        luaA_object_emit_signal(L, -1, "mouse::leave", 0);
+        lua_pop(L, 1);
+
+        /* Unref the previous drawable */
+        luaA_object_unref(L, globalconf.drawable_under_mouse);
+        globalconf.drawable_under_mouse = NULL;
+    }
+    if (d != NULL)
+    {
+        /* Reference the drawable for leave event later */
+        globalconf.drawable_under_mouse = d;
+
+        /* Emit enter */
+        luaA_object_emit_signal(L, ud, "mouse::enter", 0);
+    }
+}
+
 /** The motion notify event handler.
  * \param ev The event.
  */
@@@@ -419,6 +466,7 @@@@ event_handle_motionnotify(xcb_motion_notify_event_t *e
         if (d)
         {
             luaA_object_push_item(globalconf.L, -1, d);
+            event_drawable_under_mouse(globalconf.L, -1);
             lua_pushnumber(globalconf.L, x);
             lua_pushnumber(globalconf.L, y);
             luaA_object_emit_signal(globalconf.L, -3, "mouse::move", 2);
@@@@ -431,6 +479,7 @@@@ event_handle_motionnotify(xcb_motion_notify_event_t *e
     {
         luaA_object_push(globalconf.L, w);
         luaA_object_push_item(globalconf.L, -1, w->drawable);
+        event_drawable_under_mouse(globalconf.L, -1);
         lua_pushnumber(globalconf.L, ev->event_x);
         lua_pushnumber(globalconf.L, ev->event_y);
         luaA_object_emit_signal(globalconf.L, -3, "mouse::move", 2);
@@@@ -444,7 +493,6 @@@@ event_handle_motionnotify(xcb_motion_notify_event_t *e
 static void
 event_handle_leavenotify(xcb_leave_notify_event_t *ev)
 {
-    drawin_t *drawin;
     client_t *c;
 
     globalconf.timestamp = ev->time;
@@@@ -452,27 +500,18 @@@@ event_handle_leavenotify(xcb_leave_notify_event_t *ev)
     if(ev->mode != XCB_NOTIFY_MODE_NORMAL)
         return;
 
-    if((c = client_getbyframewin(ev->event)))
+    /* Ignore leave with detail inferior (we were left for a window contained in
+     * our window, so technically the pointer is still inside of this window).
+     */
+    if(ev->detail != XCB_NOTIFY_DETAIL_INFERIOR && (c = client_getbyframewin(ev->event)))
     {
         luaA_object_push(globalconf.L, c);
         luaA_object_emit_signal(globalconf.L, -1, "mouse::leave", 0);
-        drawable_t *d = client_get_drawable(c, ev->event_x, ev->event_y);
-        if (d)
-        {
-            luaA_object_push_item(globalconf.L, -1, d);
-            luaA_object_emit_signal(globalconf.L, -1, "mouse::leave", 0);
-            lua_pop(globalconf.L, 1);
-        }
-        lua_pop(globalconf.L, 1);
a29 11
 
-    if((drawin = drawin_getbywin(ev->event)))
-    {
-        luaA_object_push(globalconf.L, drawin);
-        luaA_object_push_item(globalconf.L, -1, drawin->drawable);
-        luaA_object_emit_signal(globalconf.L, -1, "mouse::leave", 0);
-        lua_pop(globalconf.L, 2);
-    }
+    lua_pushnil(globalconf.L);
+    event_drawable_under_mouse(globalconf.L, -1);
+    lua_pop(globalconf.L, 1);
a30 49
 
 /** The enter notify event handler.
@@@@ -493,23 +532,34 @@@@ event_handle_enternotify(xcb_enter_notify_event_t *ev)
     {
         luaA_object_push(globalconf.L, drawin);
         luaA_object_push_item(globalconf.L, -1, drawin->drawable);
-        luaA_object_emit_signal(globalconf.L, -1, "mouse::enter", 0);
+        event_drawable_under_mouse(globalconf.L, -1);
         lua_pop(globalconf.L, 2);
     }
 
     if((c = client_getbyframewin(ev->event)))
     {
         luaA_object_push(globalconf.L, c);
-        luaA_object_emit_signal(globalconf.L, -1, "mouse::enter", 0);
+        /* Ignore enter with detail inferior: The pointer was previously inside
+         * of a child window, so technically this isn't a 'real' enter.
+         */
+        if (ev->detail != XCB_NOTIFY_DETAIL_INFERIOR)
+            luaA_object_emit_signal(globalconf.L, -1, "mouse::enter", 0);
+
         drawable_t *d = client_get_drawable(c, ev->event_x, ev->event_y);
         if (d)
         {
             luaA_object_push_item(globalconf.L, -1, d);
-            luaA_object_emit_signal(globalconf.L, -1, "mouse::enter", 0);
+            event_drawable_under_mouse(globalconf.L, -1);
             lua_pop(globalconf.L, 1);
         }
         lua_pop(globalconf.L, 1);
     }
+    else if (ev->event == globalconf.screen->root) {
+        /* When there are multiple X screens with awesome running separate
+         * instances, reset focus.
+         */
+        globalconf.focus.need_update = true;
+    }
 }
 
 /** The focus in event handler.
@@@@ -594,7 +644,7 @@@@ event_handle_key(xcb_key_press_event_t *ev)
         /* get keysym ignoring all modifiers */
         xcb_keysym_t keysym = keyresolv_get_keysym(ev->detail, 0);
         client_t *c;
-        if((c = client_getbyframewin(ev->event)))
+        if((c = client_getbywin(ev->event)))
         {
             luaA_object_push(globalconf.L, c);
             event_key_callback(ev, &c->keys, -1, 1, &keysym);
@


1.11
log
@
Merge from upstream:
Fix focus handling with multiple awesome instances
(git commit 1c27a69131428e9e733374c2a3676ca4ecee45d2)
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.10 2015/11/09 14:36:12 dcoppa Exp $
@


1.10
log
@
Merge fixes from upstream (from the stable '3.5' branch)
@
text
@d1 1
a1 1
$OpenBSD$
d42 12
d97 1
a97 1
+++ event.c	Mon Nov  9 13:54:50 2015
d262 1
a262 1
@@@@ -493,19 +532,24 @@@@ event_handle_enternotify(xcb_enter_notify_event_t *ev)
d290 11
a300 1
@@@@ -594,7 +638,7 @@@@ event_handle_key(xcb_key_press_event_t *ev)
@


1.9
log
@
Update to awesome-3.5.6, codename "For Those About To Rock"
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.8 2014/12/16 11:16:05 dcoppa Exp $
d3 1
a3 1
commit 4073f8d88653032854136529da70e38daf6882be
d5 1
a5 1
Date:   Mon Apr 21 10:41:07 2014 +0200
d7 1
a7 1
Call AllowEvents after grabbed events on a drawin
d9 2
a10 3
When we get an event due to a previous GrabButtons call, we have
to continue normal event processing again, because the server froze
the input device for us. Without this, everything appears to freeze.
d14 1
a14 1
commit f4a7b2d73a15adc03f705be689bf2713d1ac663e
d16 1
a16 1
Date:   Fri Dec 5 18:40:06 2014 +0100
d18 1
a18 1
Don't move clients on ConfigureRequests (FS#1030)
d20 2
a21 4
I never saw a single program that set a border on its own windows. However,
awesome commonly sets borders on its clients and the position of a client is the
part outside of the border. So when processing a position request from a client,
we also have to include this border and fix things up correspondingly.
d23 58
a80 2
However, the same isn't needed for the client size, because the size does not
include the borders, but just the titlebar plus the "real" client content.
d84 4
a87 18
--- event.c.orig	Fri Apr 11 04:07:10 2014
+++ event.c	Tue Dec 16 04:45:59 2014
@@@@ -196,6 +196,16 @@@@ event_handle_button(xcb_button_press_event_t *ev)
         lua_pop(globalconf.L, 1);
         /* check if any button object matches */
         event_button_callback(ev, &drawin->buttons, -1, 1, NULL);
+        /* Either we are receiving this due to ButtonPress/Release on the root
+         * window or because we grabbed the button on the window. In the later
+         * case we have to call AllowEvents.
+         * Use AsyncPointer instead of ReplayPointer so that the event is
+         * "eaten" instead of being handled again on the root window.
+         */
+        if(ev->child == XCB_NONE)
+            xcb_allow_events(globalconf.connection,
+                             XCB_ALLOW_ASYNC_POINTER,
+                             XCB_CURRENT_TIME);
     }
     else if((c = client_getbyframewin(ev->event)))
d89 10
a98 1
@@@@ -289,9 +299,17 @@@@ event_handle_configurerequest(xcb_configure_request_ev
d102 2
a103 1
+        {
d105 5
a109 3
+            /* The ConfigureRequest specifies the position of the outer corner of the client window, we want the frame */
+            geometry.x -= c->border_width;
+        }
d111 2
a112 1
+        {
d114 5
a118 3
+            /* The ConfigureRequest specifies the position of the outer corner of the client window, we want the frame */
+            geometry.y -= c->border_width;
+        }
d122 165
@


1.8
log
@
Merge fixes from the stable '3.5' branch:

Don't move clients on ConfigureRequests

Implement icon_pixmap and icon_mask from WM_HINTS

Don't set a background-pixel for our client frame windows
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.7 2014/04/29 11:36:22 dcoppa Exp $
@


1.7
log
@
Bugfix (upstream git commit 4073f8d88653032854136529da70e38daf6882be):

Call AllowEvents after grabbed events on a drawin.

When we get an event due to a previous GrabButtons call, we have
to continue normal event processing again, because the server froze
the input device for us. Without this, everything appears to freeze.
@
text
@d1 1
a1 1
$OpenBSD$
d15 18
a32 2
--- event.c.orig	Fri Apr 11 11:07:10 2014
+++ event.c	Tue Apr 29 13:30:39 2014
d50 18
@


1.6
log
@
Cleanup following libxcb/xcb-util updates
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.5 2013/10/15 09:28:42 dcoppa Exp $
d3 3
a5 1
Revert to the old xcb-util-0.3.6 API
d7 27
a33 20
--- event.c.orig	Sat Oct 12 18:48:49 2013
+++ event.c	Tue Oct 15 10:01:42 2013
@@@@ -321,7 +321,7 @@@@ event_handle_configurerequest(xcb_configure_request_ev
         }
 
         /* If the client resizes without moving itself, apply window gravity */
-        if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_WIN_GRAVITY)
+        if(c->size_hints.flags & XCB_SIZE_HINT_P_WIN_GRAVITY)
         {
             int16_t diff_x = 0, diff_y = 0;
             xwindow_translate_for_gravity(c->size_hints.win_gravity, diff_border, diff_border, diff_w, diff_h, &diff_x, &diff_y);
@@@@ -701,7 +701,7 @@@@ event_handle_clientmessage(xcb_client_message_event_t 
         client_t *c;
         if((c = client_getbywin(ev->window))
            && ev->format == 32
-           && ev->data.data32[0] == XCB_ICCCM_WM_STATE_ICONIC)
+           && ev->data.data32[0] == XCB_WM_STATE_ICONIC)
         {
             luaA_object_push(globalconf.L, c);
             client_set_minimized(globalconf.L, -1, true);
@


1.5
log
@Update to awesome-3.5.2, codename "The Fox".
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.4 2013/10/08 11:48:58 dcoppa Exp $
@


1.4
log
@Add a couple of missing comments.
@
text
@d1 1
a1 16
$OpenBSD: patch-event_c,v 1.3 2013/05/24 16:15:24 dcoppa Exp $

commit 2d3103345e3a266eaf1d5261ef37e36ac5498ecc
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sun Apr 7 11:57:40 2013 +0200

Implement window gravity in ConfigureRequests

Previously, awesome didn't move windows when they sent a ConfigureRequest
(and it also shrunk them by the size of titlebars, before it forgot
to add these). This commit adds proper gravity support to
ConfigureRequest handling.

This was tested with test-gravity from metacity (in src/wm-tester).

Signed-off-by: Uli Schlachter <psychon@@znc.in>
d5 3
a7 40
--- event.c.orig	Mon Apr  1 13:44:46 2013
+++ event.c	Fri May 24 16:58:00 2013
@@@@ -285,23 +285,52 @@@@ event_handle_configurerequest(xcb_configure_request_ev
     if((c = client_getbywin(ev->window)))
     {
         area_t geometry = c->geometry;
+        int16_t diff_w = 0, diff_h = 0, diff_border = 0;
 
         if(ev->value_mask & XCB_CONFIG_WINDOW_X)
             geometry.x = ev->x;
         if(ev->value_mask & XCB_CONFIG_WINDOW_Y)
             geometry.y = ev->y;
         if(ev->value_mask & XCB_CONFIG_WINDOW_WIDTH)
+        {
+            uint16_t old_w = geometry.width;
             geometry.width = ev->width;
+            /* The ConfigureRequest specifies the size of the client window, we want the frame */
+            geometry.width += c->titlebar[CLIENT_TITLEBAR_LEFT].size;
+            geometry.width += c->titlebar[CLIENT_TITLEBAR_RIGHT].size;
+            diff_w = geometry.width - old_w;
+        }
         if(ev->value_mask & XCB_CONFIG_WINDOW_HEIGHT)
+        {
+            uint16_t old_h = geometry.height;
             geometry.height = ev->height;
-
+            /* The ConfigureRequest specifies the size of the client window, we want the frame */
+            geometry.height += c->titlebar[CLIENT_TITLEBAR_TOP].size;
+            geometry.height += c->titlebar[CLIENT_TITLEBAR_BOTTOM].size;
+            diff_h = geometry.height - old_h;
+        }
         if(ev->value_mask & XCB_CONFIG_WINDOW_BORDER_WIDTH)
         {
+            diff_border = ev->border_width - c->border_width;
+            diff_h += diff_border;
+            diff_w += diff_border;
+
             luaA_object_push(globalconf.L, c);
             window_set_border_width(globalconf.L, -1, ev->border_width);
             lua_pop(globalconf.L, 1);
d10 2
a11 1
+        /* If the client resizes without moving itself, apply window gravity */
d13 4
a16 13
+        {
+            int16_t diff_x = 0, diff_y = 0;
+            xwindow_translate_for_gravity(c->size_hints.win_gravity, diff_border, diff_border, diff_w, diff_h, &diff_x, &diff_y);
+            if(!(ev->value_mask & XCB_CONFIG_WINDOW_X))
+                geometry.x += diff_x;
+            if(!(ev->value_mask & XCB_CONFIG_WINDOW_Y))
+                geometry.y += diff_y;
+        }
+
         if(!client_resize(c, geometry, false))
             /* ICCCM 4.1.5 / 4.2.3, if nothing was changed, send an event saying so */
             client_send_configure(c);
@@@@ -672,7 +701,7 @@@@ event_handle_clientmessage(xcb_client_message_event_t 
@


1.3
log
@
commit 2d3103345e3a266eaf1d5261ef37e36ac5498ecc
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sun Apr 7 11:57:40 2013 +0200

Implement window gravity in ConfigureRequests

Previously, awesome didn't move windows when they sent a ConfigureRequest
(and it also shrunk them by the size of titlebars, before it forgot
to add these). This commit adds proper gravity support to
ConfigureRequest handling.

See: https://awesome.naquadah.org/bugs/index.php?do=details&task_id=1137
@
text
@d1 1
a1 1
$OpenBSD: patch-event_c,v 1.2 2013/05/22 15:05:50 dcoppa Exp $
a16 1

@


1.2
log
@Major update to awesome-3.5.1

OK jasper@@
@
text
@d1 17
a17 1
$OpenBSD: patch-event_c,v 1.1 2011/11/30 11:50:58 dcoppa Exp $
d22 56
a77 2
+++ event.c	Mon May 20 13:03:44 2013
@@@@ -672,7 +672,7 @@@@ event_handle_clientmessage(xcb_client_message_event_t 
@


1.1
log
@Update to awesome v3.4.11 (Pickapart)

ChangeLog at http://awesome.naquadah.org/changelogs/short/v3.4.11
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- event.c.orig	Wed Nov 23 15:08:50 2011
+++ event.c	Wed Nov 30 10:55:11 2011
@@@@ -721,7 +721,7 @@@@ event_handle_clientmessage(xcb_client_message_event_t 
@

