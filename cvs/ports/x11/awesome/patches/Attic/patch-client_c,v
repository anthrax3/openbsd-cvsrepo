head	1.5;
access;
symbols
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2013.05.22.15.05.50;	author dcoppa;	state dead;
branches;
next	1.4;

1.4
date	2012.07.17.11.32.00;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.30.11.50.58;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.17.11.30.54;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2011.01.19.12.41.08;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Major update to awesome-3.5.1

OK jasper@@
@
text
@$OpenBSD: patch-client_c,v 1.4 2012/07/17 11:32:00 dcoppa Exp $

Revert to the old xcb-util-0.3.6 API

--- client.c.orig	Sun Jul 15 12:12:21 2012
+++ client.c	Tue Jul 17 13:16:29 2012
@@@@ -52,7 +52,7 @@@@ luaA_client_gc(lua_State *L)
     client_t *c = luaA_checkudata(L, 1, &client_class);
     button_array_wipe(&c->buttons);
     key_array_wipe(&c->keys);
-    xcb_icccm_get_wm_protocols_reply_wipe(&c->protocols);
+    xcb_get_wm_protocols_reply_wipe(&c->protocols);
     p_delete(&c->machine);
     p_delete(&c->class);
     p_delete(&c->instance);
@@@@ -94,21 +94,21 @@@@ client_set_urgent(lua_State *L, int cidx, bool urgent)
     if(c->urgent != urgent)
     {
         xcb_get_property_cookie_t hints =
-            xcb_icccm_get_wm_hints_unchecked(globalconf.connection, c->window);
+            xcb_get_wm_hints_unchecked(globalconf.connection, c->window);
 
         c->urgent = urgent;
         ewmh_client_update_hints(c);
 
         /* update ICCCM hints */
-        xcb_icccm_wm_hints_t wmh;
-        xcb_icccm_get_wm_hints_reply(globalconf.connection, hints, &wmh, NULL);
+        xcb_wm_hints_t wmh;
+        xcb_get_wm_hints_reply(globalconf.connection, hints, &wmh, NULL);
 
         if(urgent)
-            wmh.flags |= XCB_ICCCM_WM_HINT_X_URGENCY;
+            wmh.flags |= XCB_WM_HINT_X_URGENCY;
         else
-            wmh.flags &= ~XCB_ICCCM_WM_HINT_X_URGENCY;
+            wmh.flags &= ~XCB_WM_HINT_X_URGENCY;
 
-        xcb_icccm_set_wm_hints(globalconf.connection, c->window, &wmh);
+        xcb_set_wm_hints(globalconf.connection, c->window, &wmh);
 
         hook_property(c, "urgent");
         luaA_object_emit_signal(L, cidx, "property::urgent", 0);
@@@@ -720,7 +720,7 @@@@ HANDLE_GEOM(height)
      *
      * At this stage it's just safer to keep it in normal state and avoid confusion.
      */
-    window_state_set(c->window, XCB_ICCCM_WM_STATE_NORMAL);
+    window_state_set(c->window, XCB_WM_STATE_NORMAL);
 
     if(!startup)
     {
@@@@ -766,14 +766,14 @@@@ client_geometry_hints(client_t *c, area_t geometry)
     int32_t real_basew = 0, real_baseh = 0;
 
     /* base size is substituted with min size if not specified */
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_SIZE)
     {
         basew = c->size_hints.base_width;
         baseh = c->size_hints.base_height;
         real_basew = basew;
         real_baseh = baseh;
     }
-    else if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MIN_SIZE)
+    else if(c->size_hints.flags & XCB_SIZE_HINT_P_MIN_SIZE)
     {
         basew = c->size_hints.min_width;
         baseh = c->size_hints.min_height;
@@@@ -782,12 +782,12 @@@@ client_geometry_hints(client_t *c, area_t geometry)
         basew = baseh = 0;
 
     /* min size is substituted with base size if not specified */
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MIN_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_MIN_SIZE)
     {
         minw = c->size_hints.min_width;
         minh = c->size_hints.min_height;
     }
-    else if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_SIZE)
+    else if(c->size_hints.flags & XCB_SIZE_HINT_P_SIZE)
     {
         minw = c->size_hints.base_width;
         minh = c->size_hints.base_height;
@@@@ -795,7 +795,7 @@@@ client_geometry_hints(client_t *c, area_t geometry)
     else
         minw = minh = 0;
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_ASPECT
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_ASPECT
        && c->size_hints.min_aspect_den > 0
        && c->size_hints.max_aspect_den > 0
        && geometry.height - real_baseh > 0
@@@@ -837,7 +837,7 @@@@ client_geometry_hints(client_t *c, area_t geometry)
     if(minh)
         geometry.height = MAX(geometry.height, minh);
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MAX_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_MAX_SIZE)
     {
         if(c->size_hints.max_width)
             geometry.width = MIN(geometry.width, c->size_hints.max_width);
@@@@ -845,7 +845,7 @@@@ client_geometry_hints(client_t *c, area_t geometry)
             geometry.height = MIN(geometry.height, c->size_hints.max_height);
     }
 
-    if(c->size_hints.flags & (XCB_ICCCM_SIZE_HINT_P_RESIZE_INC | XCB_ICCCM_SIZE_HINT_BASE_SIZE)
+    if(c->size_hints.flags & (XCB_SIZE_HINT_P_RESIZE_INC | XCB_SIZE_HINT_BASE_SIZE)
        && c->size_hints.width_inc && c->size_hints.height_inc)
     {
         uint16_t t1 = geometry.width, t2 = geometry.height;
@@@@ -968,9 +968,9 @@@@ client_set_minimized(lua_State *L, int cidx, bool s)
         c->minimized = s;
         banning_need_update((c)->screen);
         if(s)
-            window_state_set(c->window, XCB_ICCCM_WM_STATE_ICONIC);
+            window_state_set(c->window, XCB_WM_STATE_ICONIC);
         else
-            window_state_set(c->window, XCB_ICCCM_WM_STATE_NORMAL);
+            window_state_set(c->window, XCB_WM_STATE_NORMAL);
         ewmh_client_update_hints(c);
         if(strut_has_value(&c->strut))
             screen_emit_signal(globalconf.L, c->screen, "property::workarea", 0);
@@@@ -1332,7 +1332,7 @@@@ client_unmanage(client_t *c)
 
     /* Do this last to avoid races with clients. According to ICCCM, clients
      * arent allowed to re-use the window until after this. */
-    window_state_set(c->window, XCB_ICCCM_WM_STATE_WITHDRAWN);
+    window_state_set(c->window, XCB_WM_STATE_WITHDRAWN);
 
     /* set client as invalid */
     c->invalid = true;
@@@@ -2051,9 +2051,9 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
 
     lua_createtable(L, 0, 1);
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_US_POSITION)
+    if(c->size_hints.flags & XCB_SIZE_HINT_US_POSITION)
         u_or_p = "user_position";
-    else if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_POSITION)
+    else if(c->size_hints.flags & XCB_SIZE_HINT_P_POSITION)
         u_or_p = "program_position";
 
     if(u_or_p)
@@@@ -2067,9 +2067,9 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         u_or_p = NULL;
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_US_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_US_SIZE)
         u_or_p = "user_size";
-    else if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_SIZE)
+    else if(c->size_hints.flags & XCB_SIZE_HINT_P_SIZE)
         u_or_p = "program_size";
 
     if(u_or_p)
@@@@ -2082,7 +2082,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         lua_setfield(L, -2, u_or_p);
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MIN_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_MIN_SIZE)
     {
         lua_pushnumber(L, c->size_hints.min_width);
         lua_setfield(L, -2, "min_width");
@@@@ -2090,7 +2090,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         lua_setfield(L, -2, "min_height");
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_MAX_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_MAX_SIZE)
     {
         lua_pushnumber(L, c->size_hints.max_width);
         lua_setfield(L, -2, "max_width");
@@@@ -2098,7 +2098,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         lua_setfield(L, -2, "max_height");
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_RESIZE_INC)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_RESIZE_INC)
     {
         lua_pushnumber(L, c->size_hints.width_inc);
         lua_setfield(L, -2, "width_inc");
@@@@ -2106,7 +2106,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         lua_setfield(L, -2, "height_inc");
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_ASPECT)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_ASPECT)
     {
         lua_pushnumber(L, c->size_hints.min_aspect_num);
         lua_setfield(L, -2, "min_aspect_num");
@@@@ -2118,7 +2118,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         lua_setfield(L, -2, "max_aspect_den");
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_BASE_SIZE)
+    if(c->size_hints.flags & XCB_SIZE_HINT_BASE_SIZE)
     {
         lua_pushnumber(L, c->size_hints.base_width);
         lua_setfield(L, -2, "base_width");
@@@@ -2126,7 +2126,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
         lua_setfield(L, -2, "base_height");
     }
 
-    if(c->size_hints.flags & XCB_ICCCM_SIZE_HINT_P_WIN_GRAVITY)
+    if(c->size_hints.flags & XCB_SIZE_HINT_P_WIN_GRAVITY)
     {
         switch(c->size_hints.win_gravity)
         {
@


1.4
log
@Bugfix update to awesome v3.4.13 (Octopus)
@
text
@d1 1
a1 1
$OpenBSD: patch-client_c,v 1.3 2011/11/30 11:50:58 dcoppa Exp $
@


1.3
log
@Update to awesome v3.4.11 (Pickapart)

ChangeLog at http://awesome.naquadah.org/changelogs/short/v3.4.11
@
text
@d1 1
a1 1
$OpenBSD$
d5 2
a6 2
--- client.c.orig	Wed Nov 30 11:06:39 2011
+++ client.c	Wed Nov 30 11:21:09 2011
d44 1
a44 1
@@@@ -730,7 +730,7 @@@@ HANDLE_GEOM(height)
d53 1
a53 1
@@@@ -776,14 +776,14 @@@@ client_geometry_hints(client_t *c, area_t geometry)
d70 1
a70 1
@@@@ -792,12 +792,12 @@@@ client_geometry_hints(client_t *c, area_t geometry)
d85 1
a85 1
@@@@ -805,7 +805,7 @@@@ client_geometry_hints(client_t *c, area_t geometry)
d94 1
a94 1
@@@@ -847,7 +847,7 @@@@ client_geometry_hints(client_t *c, area_t geometry)
d103 1
a103 1
@@@@ -855,7 +855,7 @@@@ client_geometry_hints(client_t *c, area_t geometry)
d112 1
a112 1
@@@@ -978,9 +978,9 @@@@ client_set_minimized(lua_State *L, int cidx, bool s)
d124 1
a124 1
@@@@ -1342,7 +1342,7 @@@@ client_unmanage(client_t *c)
d133 1
a133 1
@@@@ -2061,9 +2061,9 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d145 1
a145 1
@@@@ -2077,9 +2077,9 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d157 1
a157 1
@@@@ -2092,7 +2092,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d166 1
a166 1
@@@@ -2100,7 +2100,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d175 1
a175 1
@@@@ -2108,7 +2108,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d184 1
a184 1
@@@@ -2116,7 +2116,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d193 1
a193 1
@@@@ -2128,7 +2128,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
d202 1
a202 1
@@@@ -2136,7 +2136,7 @@@@ luaA_client_get_size_hints(lua_State *L, client_t *c)
@


1.2
log
@Update to awesome-3.4.10 (codename "Exploder")
@
text
@d1 210
a210 31
$OpenBSD: patch-client_c,v 1.1 2011/01/19 12:41:08 dcoppa Exp $
--- client.c.orig	Mon Jan 17 12:38:13 2011
+++ client.c	Wed Jan 19 13:11:47 2011
@@@@ -1551,7 +1551,26 @@@@ luaA_client_tags(lua_State *L)
     {
         luaA_checktable(L, 2);
         for(int i = 0; i < tags->len; i++)
-            untag_client(c, tags->tab[i]);
+        {
+            /* Only untag if we aren't going to add this tag again */
+            bool found = false;
+            lua_pushnil(L);
+            while(lua_next(L, 2))
+            {
+                tag_t *t = lua_touserdata(L, -1);
+                /* Pop the value from lua_next */
+                lua_pop(L, 1);
+                if (t != tags->tab[i])
+                    continue;
+
+                /* Pop the key from lua_next */
+                lua_pop(L, 1);
+                found = true;
+                break;
+            }
+            if(!found)
+                untag_client(c, tags->tab[i]);
+        }
         lua_pushnil(L);
         while(lua_next(L, 2))
             tag_client(c);
@


1.1
log
@re-add "--skip-validation" to xmlto command line, erroneously removed
in previous commit.

fix a bug where untagging causes the client to lose the input focus
(from upstream git).
@
text
@d1 1
a1 1
$OpenBSD$
@

