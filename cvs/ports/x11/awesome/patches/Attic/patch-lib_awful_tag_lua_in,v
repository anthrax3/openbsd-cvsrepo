head	1.8;
access;
symbols
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@# @;


1.8
date	2016.01.18.09.50.09;	author dcoppa;	state dead;
branches;
next	1.7;
commitid	lrRI65aKSWqF9Rnn;

1.7
date	2015.09.07.10.30.01;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	WUqbLhpCG8h9lOEo;

1.6
date	2015.01.12.09.00.17;	author dcoppa;	state dead;
branches;
next	1.5;
commitid	ZXrBV9TNCMLtawvr;

1.5
date	2014.11.11.12.20.16;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	o3oFDGzsHVWY7AMc;

1.4
date	2014.04.15.11.16.04;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2014.01.14.13.33.37;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.15.09.28.43;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2013.10.11.08.50.21;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Update to awesome-3.5.7
@
text
@$OpenBSD: patch-lib_awful_tag_lua_in,v 1.7 2015/09/07 10:30:01 dcoppa Exp $

commit 2efc09d103693ad130b79577996cfa4e0f6b8f40
Author: Daniel Hahler <git@@thequod.de>
Date:   Tue Mar 17 16:23:40 2015 +0100

tag.lua: add "property::icon_only" signal

--- lib/awful/tag.lua.in.orig	Sat Jan 10 20:36:35 2015
+++ lib/awful/tag.lua.in	Mon Sep  7 11:03:51 2015
@@@@ -622,6 +622,7 @@@@ capi.tag.connect_signal("request::select", tag.viewonl
 
 capi.tag.add_signal("property::hide")
 capi.tag.add_signal("property::icon")
+capi.tag.add_signal("property::icon_only")
 capi.tag.add_signal("property::layout")
 capi.tag.add_signal("property::mwfact")
 capi.tag.add_signal("property::ncol")
@


1.7
log
@
Merge several fixes from the stable '3.5' branch
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@
Update to awesome-3.5.6, codename "For Those About To Rock"
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_awful_tag_lua_in,v 1.5 2014/11/11 12:20:16 dcoppa Exp $
d3 16
a18 193
commit 94cbc200edb0ae321610c3cbe09fd62c91dd5ba3
Author: Emmanuel Lepage Vallee <elv1313@@gmail.com>
Date:   Sat Nov 1 18:46:06 2014 -0400

tag: Improve tag property::index support (FS#1229)

* Move the "index" setting burden to individual functions
  instead of gettags().

* Add some properties earlier so the signal hooks will be called
  with valid data.

commit ed93b497b66f99de07f51b7410f4e34eeb4a5c74
Author: Emmanuel Lepage Vallee <elv1313@@gmail.com>
Date:   Mon Oct 13 21:36:11 2014 -0400

tag.delete: Do not reset client tag when unnecessary

commit f637265334259b29b3f959abfc133171e387b79c
Author: Emmanuel Lepage Vallee <elv1313@@gmail.com>
Date:   Mon Oct 13 15:00:09 2014 -0400

awful.tag.update: Fix identical tag set detection

If the "current" table is empty, then identical always true.
There is a lot of case where this can happen. Mostly when using
dynamic tagging.

--- lib/awful/tag.lua.in.orig	Fri Apr 11 11:07:10 2014
+++ lib/awful/tag.lua.in	Tue Nov 11 11:53:22 2014
@@@@ -46,16 +46,20 @@@@ function tag.move(new_index, target_tag)
         return
     end
 
+    local rm_index = nil
+
     for i, t in ipairs(tmp_tags) do
         if t == target_tag then
             table.remove(tmp_tags, i)
+            rm_index = i
             break
         end
     end
 
     table.insert(tmp_tags, new_index, target_tag)
 
-    for i, tmp_tag in ipairs(tmp_tags) do
+    for i=new_index < rm_index and new_index or rm_index, #tmp_tags do
+        local tmp_tag = tmp_tags[i]
         tag.setscreen(tmp_tag, scr)
         tag.setproperty(tmp_tag, "index", i)
     end
@@@@ -67,9 +71,23 @@@@ end
 -- @@return The created tag
 function tag.add(name, props)
     local properties = props or {}
-    local newtag = capi.tag{ name = name, activated = true }
+
+    -- Be sure to set the screen before the tag is activated to avoid function
+    -- connected to property::activated to be called without a valid tag.
+    -- set properies cannot be used as this has to be set before the first signal
+    -- is sent
     properties.screen = properties.screen or capi.mouse.screen
 
+    -- Index is also required
+    properties.index = (#tag.gettags(properties.screen))+1
+
+    local newtag = capi.tag{ name = name }
+
+    -- Start with a fresh property table to avoid collisions with unsupported data
+    data.tags[newtag] = {screen=properties.screen, index=properties.index}
+
+    newtag.activated = true
+
     for k, v in pairs(properties) do
         tag.setproperty(newtag, k, v)
     end
@@@@ -121,10 +139,12 @@@@ end
 function tag.delete(target_tag, fallback_tag)
     -- abort if no tag is passed or currently selected
     local target_tag = target_tag or tag.selected()
-    if target_tag == nil then return end
+    if target_tag == nil or target_tag.activated == false then return end
 
     local target_scr = tag.getscreen(target_tag)
-    local ntags = #tag.gettags(target_scr)
+    local tags       = tag.gettags(target_scr)
+    local idx        = tag.getidx(target_tag)
+    local ntags      = #tags
 
     -- We can't use the target tag as a fallback.
     local fallback_tag = fallback_tag
@@@@ -147,7 +167,8 @@@@ function tag.delete(target_tag, fallback_tag)
         if (not c.sticky and #c:tags() == 1) or
                                     (c.sticky and fallback_tag == nil) then
             return
-        else
+        -- If a client has multiple tags, then do not move it to fallback
+        elseif #c:tags() < 2 then
             c:tags({fallback_tag})
         end
     end
@@@@ -156,11 +177,16 @@@@ function tag.delete(target_tag, fallback_tag)
     data.tags[target_tag].screen = nil
     target_tag.activated = false
 
+    -- Update all indexes
+    for i=idx+1,#tags do
+        tag.setproperty(tags[i], "index", i-1)
+    end
+
     -- If no tags are visible, try and view one.
     if tag.selected(target_scr) == nil and ntags > 0 then
         tag.history.restore(nil, 1)
         if tag.selected(target_scr) == nil then
-            tag.gettags(target_scr)[1].selected = true
+            tags[tags[1] == target_tag and 2 or 1].selected = true
         end
     end
 
@@@@ -178,11 +204,13 @@@@ function tag.history.update(obj)
     else
         if data.history[s].current then
             -- Check that the list is not identical
-            local identical = true
-            for idx, _tag in ipairs(data.history[s].current) do
-                if curtags[idx] ~= _tag then
-                    identical = false
-                    break
+            local identical = #data.history[s].current == #curtags
+            if identical then
+                for idx, _tag in ipairs(data.history[s].current) do
+                    if curtags[idx] ~= _tag then
+                        identical = false
+                        break
+                    end
                 end
             end
 
@@@@ -247,22 +275,9 @@@@ function tag.gettags(s)
         end
     end
 
-    local without_index = 0
-    for _, t in ipairs(tags) do
-        if not tag.getproperty(t, "index") then
-            without_index = without_index + 1
-        end
-    end
-    if without_index > 0 then
-        for _, t in ipairs(tags) do
-            if not tag.getproperty(t, "index") then
-                tag.setproperty(t, "index", (#tags - without_index + 1))
-                without_index = without_index - 1
-            end
-        end
-    end
-
-    table.sort(tags, function(a, b) return tag.getproperty(a, "index") < tag.getproperty(b, "index") end)
+    table.sort(tags, function(a, b)
+        return (tag.getproperty(a, "index") or 9999) < (tag.getproperty(b, "index") or 9999) 
+    end)
     return tags
 end
 
@@@@ -271,6 +286,7 @@@@ end
 -- @@param s Screen number
 function tag.setscreen(t, s)
     local s = s or capi.mouse.screen
+    local sel = tag.selected
     local old_screen = tag.getproperty(t, "screen")
     if s == old_screen then return end
 
@@@@ -285,7 +301,18 @@@@ function tag.setscreen(t, s)
         c.screen = s --Move all clients
         c:tags({t})
     end
-    tag.history.restore(old_screen,1)
+
+    -- Update all indexes
+    for _,screen in ipairs {old_screen,s} do
+        for i,t in ipairs(tag.gettags(screen)) do
+            tag.setproperty(t, "index", i)
+        end
+    end
+
+    -- Restore the old screen history if the tag was selected
+    if sel then
+        tag.history.restore(old_screen,1)
+    end
 end
 
 --- Get a tag's screen
@


1.5
log
@
Merge fixes from the stable '3.5' branch:

Add context to request::activate signal
(git commit b0ede3108e4e4bb2f917f0c3fe607e86cb534b5a)

layouts: Allow layouts to be invoked with fake data
(git commit 1f431384cbb428d97a6991ba0c59217cbc71b4a6)

tag: Improve tag property::index support
(git commit 94cbc200edb0ae321610c3cbe09fd62c91dd5ba3)

tag.delete: Do not reset client tag when unnecessary
(git commit ed93b497b66f99de07f51b7410f4e34eeb4a5c74)

awful.tag.update: Fix identical tag set detection
(git commit f637265334259b29b3f959abfc133171e387b79c)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@
Update to awesome-3.5.5
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_awful_tag_lua_in,v 1.3 2014/01/14 13:33:37 dcoppa Exp $
d3 3
a5 3
commit d4b12bb1b2b8365d7c1b9be365dc5843303ba828
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sat Nov 23 14:54:13 2013 +0100
d7 1
a7 1
awful.tag.delete: Deactivate tags
d9 2
a10 3
The activated property was added to tag objects between awesome 3.4 and 3.5.
This is used in the C code to keep tags alive even when nothing else refers to
it and includes a tag e.g. in some root window properties.
d12 2
a13 2
Thus, to get rid of a tag and to make the C code drop its reference to it, we
have to set activated to false in this function.
d15 3
a17 1
Signed-off-by: Uli Schlachter <psychon@@znc.in>
d19 1
a19 3
commit 5cd8c7e540c91b575581c7958ec82903bb646058
Author: Uli Schlachter <psychon@@znc.in>
Date:   Mon Dec 30 11:33:09 2013 +0100
d21 3
a23 1
awful.tag.viewmore: Make screen optional (FS#1203)
d25 1
a25 3
The documentation says that screen, the last argument to viewmore(), is an
optional argument. However, the implementation only treated it as an optional
argument in one place.
d27 3
a29 1
Fix this by always setting the screen variable itself to a screen.
d31 61
a91 5
Signed-off-by: Uli Schlachter <psychon@@znc.in>

--- lib/awful/tag.lua.in.orig	Tue Jan 14 10:23:58 2014
+++ lib/awful/tag.lua.in	Tue Jan 14 10:30:35 2014
@@@@ -154,6 +154,7 @@@@ function tag.delete(target_tag, fallback_tag)
d93 13
a105 1
     -- delete the tag
d107 1
a107 1
+    target_tag.activated = false
d109 5
d116 80
a195 10
@@@@ -466,7 +467,8 @@@@ end
 -- @@param tags A table with tags to view only.
 -- @@param screen Optional screen number of the tags.
 function tag.viewmore(tags, screen)
-    local screen_tags = tag.gettags(screen or capi.mouse.screen)
+    local screen = screen or capi.mouse.screen
+    local screen_tags = tag.gettags(screen)
     for _, _tag in ipairs(screen_tags) do
         if not util.table.hasitem(tags, _tag) then
             _tag.selected = false
@


1.3
log
@Bugfixes from upstream:

awesomerc: Fix set menu clients width
(upstream git commit 843a36aa6e7fdb5e1e76fbb9879328c92adc77f7)

awful.menu.clients: Fix API
(upstream git commit 479f7b990cf411bc116f728eea8edc0ea6b4b8d3)

menu: do not double escape name in 'menu:clients()'
(upstream git commit 77e92e17a1ec1711233f42560b5b339944ce71b2)

awful.tag.delete: Deactivate tags
(upstream git commit d4b12bb1b2b8365d7c1b9be365dc5843303ba828)

awful.tag.viewmore: Make screen optional
(upstream git commit 5cd8c7e540c91b575581c7958ec82903bb646058)

tasklist: Add default colors for broken themes
(upstream git commit 15f088196699857cdac28250d7a3857fe8b57cee)

menubar: Fix API docs
(upstream git commit aa51379be0a9317a5549034bc9be149f41ad9201)

Fix a bug in luaA_drawin_set_shape_bounding() which forgot to include
the drawin's border in its size calculation
(part of upstream git commit 56c57979056ec23cbd4982f3b81f6d80895fbe46)

Really ignore loops in transient_for
(upstream git commit 389a54e356f700a4f2a621e05dbdbafab4a3a03a)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to awesome-3.5.2, codename "The Fox".
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_awful_tag_lua_in,v 1.1 2013/10/11 08:50:21 dcoppa Exp $
d3 1
a3 1
commit 4abf42b92f0f4b7676da4952dde86b0fce055240
d5 1
a5 1
Date:   Tue Oct 8 10:45:22 2013 +0200
d7 1
a7 1
awful.tag.withcurrent: Also act on restarts (FS#1155)
d9 20
a28 9
When awesome restarts because a new screen was added or removed, clients can end
up being on a different screen than before the restart. However, the tags will
be carried across the restart. This means that a client could end up being
tagged with a tag from another screen. This results in weird behavior of tag
switches and confuses users.

To work around this, remove the client from any tags that are on a different
screen during startup. If the client ends up without any tags, it will then be
tagged with the currently selected tags.
d32 3
a34 3
--- lib/awful/tag.lua.in.orig	Mon Apr  1 13:44:46 2013
+++ lib/awful/tag.lua.in	Fri Oct 11 10:34:12 2013
@@@@ -518,20 +518,17 @@@@ end
d36 3
a38 26
 --- Tag a client with the set of current tags.
 -- @@param c The client to tag.
--- @@param startup Optional: don't do anything if true.
-function tag.withcurrent(c, startup)
-    if startup ~= true then
-        local tags = {}
-        for k, t in ipairs(c:tags()) do
-            if tag.getscreen(t) == c.screen then
-                table.insert(tags, t)
-            end
+function tag.withcurrent(c)
+    local tags = {}
+    for k, t in ipairs(c:tags()) do
+        if tag.getscreen(t) == c.screen then
+            table.insert(tags, t)
         end
-        if #tags == 0 then
-            tags = tag.selectedlist(c.screen)
-        end
-        c:tags(tags)
     end
+    if #tags == 0 then
+        tags = tag.selectedlist(c.screen)
+    end
+    c:tags(tags)
 end
d40 12
a51 1
 local function attached_connect_signal_screen(screen, sig, func)
@


1.1
log
@Revert "client: Don't move clients around across restarts" commit,
it was causing more pain than gain.

Add another two bugfixes:

- event: Handle MotionNotify before ButtonPress/Release
- awful.tag.withcurrent: Also act on restarts

All from upstream git repo.
@
text
@d1 1
a1 1
$OpenBSD$
@

