head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2016.01.18.09.50.09;	author dcoppa;	state dead;
branches;
next	1.4;
commitid	lrRI65aKSWqF9Rnn;

1.4
date	2015.09.07.10.30.01;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	WUqbLhpCG8h9lOEo;

1.3
date	2013.10.15.09.28.47;	author dcoppa;	state dead;
branches;
next	1.2;

1.2
date	2013.10.07.14.28.52;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.02.11.49.00;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Update to awesome-3.5.7
@
text
@$OpenBSD: patch-screen_c,v 1.4 2015/09/07 10:30:01 dcoppa Exp $

commit 4c517cf9d32a6926bf97ac06fcec55b67d9db7bb
Author: Uli Schlachter <psychon@@znc.in>
Date:   Sat Jun 13 11:18:47 2015 +0200

Screen __index: Don't turn argument into a string

Calling lua_tostring() on a number/integer, turns that stack slot into a string.
This patch changes the code to only call lua_tostring() if the function argument
really is a string.

This partly also caused https://github.com/awesomeWM/awesome/issues/238.

Signed-off-by: Uli Schlachter <psychon@@znc.in>

--- screen.c.orig	Sat Jan 10 20:36:35 2015
+++ screen.c	Mon Sep  7 11:13:41 2015
@@@@ -422,7 +422,7 @@@@ luaA_screen_module_index(lua_State *L)
 {
     const char *name;
 
-    if((name = lua_tostring(L, 2)))
+    if(lua_type(L, 2) == LUA_TSTRING && (name = lua_tostring(L, 2)))
         foreach(screen, globalconf.screens)
             foreach(output, screen->outputs)
                 if(A_STREQ(output->name, name))
@


1.4
log
@
Merge several fixes from the stable '3.5' branch
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update to awesome-3.5.2, codename "The Fox".
@
text
@d1 1
a1 1
$OpenBSD: patch-screen_c,v 1.2 2013/10/07 14:28:52 dcoppa Exp $
d3 1
a3 1
commit 0bdaed2704c3b6315366f6c1f3d098cf707febe6
d5 1
a5 1
Date:   Fri Oct 4 15:24:09 2013 +0200
d7 1
a7 1
screen: Fix screen equality comparison (FS#1151)
d9 3
a11 2
We did some black magic which broke and was replaced with more black magic. This
now broke using screen objects as table indexes:
d13 1
a13 25
$ echo 'local l, s = {}, screen[1] ; l[s] = 42 ; return l[s]' | awesome-client
double 42
$ echo 'local l, s = {}, screen[1] ; l[s] = 42 ; return l[screen[1]]' | awesome-client
<no output>

Fix this by using just a single lua userdata for representing a screen object.

It would be even better if screens were allocated with lua, but that doesn't
really provide any benefits right now and would be more complicated...

Signed-off-by: Uli Schlachter <psychon@@znc.in>

commit fd8f2e23eeeec8d77f997d63b229fdc861beff03
Author: Uli Schlachter <psychon@@znc.in>
Date:   Fri Sep 27 23:07:33 2013 +0200

screen: Make sure we always have a screen

It is possible to configure RANDR so that no outputs are available. This means
awesome would be running with zero screens which leads to all kinds of
funnyness.

Work around this by falling back to other configuration mechanisms if we get no
screens from one of them. After all, screen_scan_x11() will always be able to
add a screen.
d17 3
a19 27
--- screen.c.orig	Mon Apr  1 13:44:46 2013
+++ screen.c	Mon Oct  7 15:36:23 2013
@@@@ -71,11 +71,26 @@@@ screen_add(screen_t new_screen)
                     MAX(new_screen.geometry.height, screen_to_test->geometry.height);
                 return;
             }
+
     signal_add(&new_screen.signals, "property::workarea");
     screen_array_append(&globalconf.screens, new_screen);
+
+    /* Allocate the lua userdata object representing this screen */
+    screen_t *s = &globalconf.screens.tab[globalconf.screens.len-1];
+    screen_t **ps = lua_newuserdata(globalconf.L, sizeof(*ps));
+    *ps = s;
+    luaL_getmetatable(globalconf.L, "screen");
+    lua_setmetatable(globalconf.L, -2);
+    s->userdata = luaA_object_ref(globalconf.L, -1);
 }
 
 static bool
+screens_exist(void)
+{
+    return globalconf.screens.len > 0;
+}
+
+static bool
 screen_scan_randr(void)
d21 1
a21 62
     /* Check for extension before checking for XRandR */
@@@@ -150,7 +165,7 @@@@ screen_scan_randr(void)
 
             p_delete(&screen_res_r);
 
-            return true;
+            return screens_exist();
         }
     }
 
@@@@ -195,7 +210,7 @@@@ screen_scan_xinerama(void)
 
         p_delete(&xsq);
 
-        return true;
+        return screens_exist();
     }
 
     return false;
@@@@ -392,10 +407,7 @@@@ screen_client_moveto(client_t *c, screen_t *new_screen
 static int
 luaA_pushscreen(lua_State *L, screen_t *s)
 {
-    screen_t **ps = lua_newuserdata(L, sizeof(*ps));
-    *ps = s;
-    luaL_getmetatable(L, "screen");
-    lua_setmetatable(L, -2);
+    luaA_object_push(L, s->userdata);
     return 1;
 }
 
@@@@ -493,23 +505,6 @@@@ luaA_screen_index(lua_State *L)
     return 0;
 }
 
-/** A screen.
- * \param L The Lua VM state.
- * \return The number of elements pushed on stack.
- */
-static int
-luaA_screen_equal(lua_State *L)
-{
-    screen_t **ps1;
-    screen_t **ps2;
-
-    ps1 = luaL_checkudata(L, 1, "screen");
-    ps2 = luaL_checkudata(L, 2, "screen");
-    lua_pushboolean(L, *ps1 == *ps2);
-
-    return 1;
-}
-
 /** Add a signal to a screen.
  * \param L The Lua VM state.
  * \return The number of elements pushed on stack.
@@@@ -625,7 +620,6 @@@@ const struct luaL_Reg awesome_screen_meta[] =
     { "disconnect_signal", luaA_screen_disconnect_signal },
     { "emit_signal", luaA_screen_emit_signal },
     { "__index", luaA_screen_index },
-    { "__eq", luaA_screen_equal },
     { NULL, NULL }
 };
d23 5
@


1.2
log
@Bunch of bugfixes from upstream:

Fix possible deadlock during startup
awful.client.tiled: Ignore fullscreen clients
awful.screen.focus: Don't move mouse to (0, 0) first
naughty: Verify image parameters coming from dbus
wibox.layout.fixed: Fix fill space
Revert "client: add a limit to the loop"
client: Ignore transient_for causing loops
screen: Fix screen equality comparison
@
text
@d1 1
a1 1
$OpenBSD: patch-screen_c,v 1.1 2013/10/02 11:49:00 dcoppa Exp $
@


1.1
log
@Bugfixes from upstream:

- Calling movetotag method threw an error on a blank screen
- Use $PATH when starting $SHELL
- screen: Make sure we always have a screen
@
text
@d1 22
a22 1
$OpenBSD$
d40 17
a56 3
--- screen.c.orig	Wed Oct  2 12:46:04 2013
+++ screen.c	Wed Oct  2 12:48:46 2013
@@@@ -76,6 +76,12 @@@@ screen_add(screen_t new_screen)
d69 1
a69 1
@@@@ -150,7 +156,7 @@@@ screen_scan_randr(void)
d78 1
a78 1
@@@@ -195,7 +201,7 @@@@ screen_scan_xinerama(void)
d87 44
@

