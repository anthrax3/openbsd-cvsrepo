head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_5:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2013.10.31.09.03.33;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.18.12.00.45;	author gonzalo;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.02.09.22.59;	author landry;	state Exp;
branches;
next	1.3;

1.3
date	2010.08.24.11.37.50;	author landry;	state dead;
branches;
next	1.2;

1.2
date	2009.11.05.19.05.12;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.04.20.24.25;	author landry;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2009.09.16.02.12.39;	author william;	state Exp;
branches;
next	;

1.1.4.1
date	2009.10.25.03.48.47;	author william;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to slim-1.3.6

ok rpe@@, jung@@, landry@@ (maintainer)
@
text
@$OpenBSD: patch-app_cpp,v 1.5 2013/04/18 12:00:45 gonzalo Exp $
add support for bsd_auth/auth_userokay on OpenBSD
only call the consolekit stuff if the ck session is okay
don't exit if the ck session fails to start
--- app.cpp.orig	Wed Oct  2 00:38:05 2013
+++ app.cpp	Wed Oct 30 08:30:31 2013
@@@@ -30,6 +30,11 @@@@
 #include <shadow.h>
 #endif
 
+/* for auth_userokay(3) */
+#ifdef __OpenBSD__
+#include <login_cap.h>
+#include <bsd_auth.h>
+#endif
 using namespace std;
 
 #ifdef USE_PAM
@@@@ -472,6 +477,12 @@@@ bool App::AuthenticateUser(bool focuspass){
 	if(pw == 0)
 		return false;
 
+#ifdef __OpenBSD__
+    char * pass = strdup(LoginPanel->GetPasswd().c_str());
+    int ret = auth_userokay(pw->pw_name, NULL, "auth-slim", pass);
+    free(pass);
+    return ret;
+#endif
 #ifdef HAVE_SHADOW
 	struct spwd *sp = getspnam(pw->pw_name);
 	endspent();
@@@@ -575,7 +586,6 @@@@ void App::Login() {
 	}
 	catch(Ck::Exception &e) {
 		logStream << APPNAME << ": " << e << endl;
-		exit(ERR_EXIT);
 	}
 #endif
 
@@@@ -588,6 +598,7 @@@@ void App::Login() {
 		char** child_env = pam.getenvlist();
 
 # ifdef USE_CONSOLEKIT
+	if(ck.has_session()) {
 		char** old_env = child_env;
 
 		/* Grow the copy of the environment for the session cookie */
@@@@ -600,6 +611,7 @@@@ void App::Login() {
 		memcpy(child_env, old_env, sizeof(char*)*n+1);
 		child_env[n - 1] = StrConcat("XDG_SESSION_COOKIE=", ck.get_xdg_session_cookie());
 		child_env[n] = NULL;
+	}
 # endif /* USE_CONSOLEKIT */
 #else
 
@@@@ -621,6 +633,7 @@@@ void App::Login() {
 		child_env[n++]=StrConcat("MAIL=", maildir.c_str());
 		child_env[n++]=StrConcat("XAUTHORITY=", xauthority.c_str());
 # ifdef USE_CONSOLEKIT
+	if (ck.has_session())
 		child_env[n++]=StrConcat("XDG_SESSION_COOKIE=", ck.get_xdg_session_cookie());
 # endif /* USE_CONSOLEKIT */
 		child_env[n++]=0;
@@@@ -667,6 +680,7 @@@@ void App::Login() {
 
 #ifdef USE_CONSOLEKIT
 	try {
+		if (ck.has_session())
 		ck.close_session();
 	}
 	catch(Ck::Exception &e) {
@


1.5
log
@Update for Slim to 1.3.5:

 * Support UTF8 string.
 * And fix some bugs.

Ok landry@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-app_cpp,v 1.4 2012/09/02 09:22:59 landry Exp $
d5 2
a6 2
--- app.cpp.orig	Mon Dec 31 10:03:42 2012
+++ app.cpp	Wed Apr 17 13:09:39 2013
d19 1
a19 1
@@@@ -462,6 +467,12 @@@@ bool App::AuthenticateUser(bool focuspass){
d32 1
a32 1
@@@@ -565,7 +576,6 @@@@ void App::Login() {
d40 1
a40 1
@@@@ -578,6 +588,7 @@@@ void App::Login() {
d48 1
a48 1
@@@@ -590,6 +601,7 @@@@ void App::Login() {
d56 1
a56 1
@@@@ -611,6 +623,7 @@@@ void App::Login() {
d64 1
a64 1
@@@@ -657,6 +670,7 @@@@ void App::Login() {
@


1.4
log
@Update to slim 1.3.4.

- switch to cmake.
- add missing setusercontext() call in switchuser.cpp, now the ulimits
  are properly applied when logging in.
- add support for bsd_auth(3) through auth_userokay(3). Now allows to
  login via login_ldap/login_yubikey/etc...
- add support for consolekit, no need to do ck-launch-session in
  .xinitrc anymore.
- make consolekit support at runtime optional, ie don't badly bail out
  if systemwide dbus daemon is not running. Being discussed with
upstream.
parts based on a diff from 'johnw', ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- app.cpp.orig	Tue Jun 26 10:20:14 2012
+++ app.cpp	Sat Sep  1 23:04:49 2012
@@@@ -32,6 +32,11 @@@@
d19 3
a21 3
@@@@ -468,6 +473,12 @@@@ bool App::AuthenticateUser(bool focuspass){
     if(pw == 0)
         return false;
d30 8
a37 8
     struct spwd *sp = getspnam(pw->pw_name);    
     endspent();
@@@@ -572,7 +583,6 @@@@ void App::Login() {
     }
     catch(Ck::Exception &e) {
         logStream << APPNAME << ": " << e << endl;
-        exit(ERR_EXIT);
     }
d40 2
a41 2
@@@@ -585,6 +595,7 @@@@ void App::Login() {
         char** child_env = pam.getenvlist();
d44 2
a45 2
+      if(ck.has_session()) {
         char** old_env = child_env;
d47 6
a52 6
         // Grow the copy of the environment for the session cookie
@@@@ -597,6 +608,7 @@@@ void App::Login() {
         memcpy(child_env, old_env, sizeof(char*)*n);
         child_env[n - 1] = StrConcat("XDG_SESSION_COOKIE=", ck.get_xdg_session_cookie());
         child_env[n] = NULL;
+      }
d54 1
d56 3
a58 4
         pam.end();
@@@@ -620,6 +632,7 @@@@ void App::Login() {
         child_env[n++]=StrConcat("MAIL=", maildir.c_str());
         child_env[n++]=StrConcat("XAUTHORITY=", xauthority.c_str());
d60 2
a61 2
+      if (ck.has_session())
         child_env[n++]=StrConcat("XDG_SESSION_COOKIE=", ck.get_xdg_session_cookie());
d63 2
a64 2
         child_env[n++]=0;
@@@@ -666,6 +679,7 @@@@ void App::Login() {
d67 5
a71 5
     try {
+      if (ck.has_session())
         ck.close_session();
     }
     catch(Ck::Exception &e) {
@


1.3
log
@Update to slim 1.3.2, fixes a security issue (removes . from
default_path, sometimes inherited by some window managers)
ref: http://secunia.com/advisories/41005
Removes patches merged upstream. Amend MESSAGE to teach users
who modified slim.conf how to fix it there.
Prompted by and ok jasper@@
@
text
@d1 9
a9 8
$OpenBSD: patch-app_cpp,v 1.2 2009/11/05 19:05:12 landry Exp $
Slim used to spawn 'xauth add . <COOKIE>' via the system() call, so the
cookie itself was visible.  On multi-user system one can poll for the
xauth processes via ps and gather cookies for X sessions.
fixes CVE-2009-1756
--- app.cpp.orig	Fri Sep 26 02:54:15 2008
+++ app.cpp	Wed Oct 28 19:31:08 2009
@@@@ -32,6 +32,62 @@@@
d11 5
a17 56
+/* Code taken from http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=529306 */
+/* From: Eygene Ryabinkin <rea@@shadow.codelabs.ru> */
+#include <time.h>
+#include <stdlib.h>
+
+/*
+ * Adds the given cookie to the specified Xauthority file.
+ * Returns true on success, false on fault.
+ */
+bool Util::add_mcookie(const std::string &mcookie, const char *display,
+   const std::string &xauth_cmd, const std::string &authfile)
+{
+   FILE *fp;
+   std::string cmd = xauth_cmd + " -f " + authfile + " -q";
+
+   fp = popen(cmd.c_str(), "w");
+   if (!fp)
+      return false;
+   fprintf(fp, "remove %s\n", display);
+   fprintf(fp, "add %s %s %s\n", display, ".", mcookie.c_str());
+   fprintf(fp, "exit\n");
+
+   pclose(fp);
+   return true;
+}
+/*
+ * Interface for random number generator.  Just now it uses ordinary
+ * random/srandom routines and serves as a wrapper for them.
+ */
+void Util::srandom(unsigned long seed)
+{
+   ::srandom(seed);
+}
+
+long Util::random(void)
+{
+   return ::random();
+}
+
+/*
+ * Makes seed for the srandom() using "random" values obtained from
+ * getpid(), time(NULL) and others.
+ */
+long Util::makeseed(void)
+{
+   struct timespec ts;
+   long pid = getpid();
+   long tm = time(NULL);
+
+   if (clock_gettime(CLOCK_MONOTONIC, &ts) != 0) {
+      ts.tv_sec = ts.tv_nsec = 0;
+   }
+
+   return pid + tm + (ts.tv_sec ^ ts.tv_nsec);
+}
+
d19 14
a32 38
 #include <string>
 
@@@@ -104,7 +160,8 @@@@ extern App* LoginApp;
 
 void CatchSignal(int sig) {
     cerr << APPNAME << ": unexpected signal " << sig << endl;
-    LoginApp->StopServer();
+    if (LoginApp->serverStarted)
+        LoginApp->StopServer();
     LoginApp->RemoveLock();
     exit(ERR_EXIT);
 }
@@@@ -131,12 +188,13 @@@@ void User1Signal(int sig) {
 App::App(int argc, char** argv):
     pam(conv, static_cast<void*>(&LoginPanel)){
 #else
-App::App(int argc, char** argv){
+App::App(int argc, char** argv) : mcookiesize(32) {
 #endif
     int tmp;
     ServerPID = -1;
+    serverStarted = false;
     testing = false;
-    mcookie = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
+    mcookie = string(App::mcookiesize, 'a');
     daemonmode = false;
     force_nodaemon = false;
     firstlogin = true;
@@@@ -856,6 +914,8 @@@@ int App::StartServer() {
     char* args = new char[argOption.length()+2]; // NULL plus vt
     strcpy(args, argOption.c_str());
 
+    serverStarted = false;
+
     int argc = 1;
     int pos = 0;
     bool hasVtSet = false;
@@@@ -935,7 +995,7 @@@@ int App::StartServer() {
d34 3
a36 9
     
     delete args;
-
+    serverStarted = true;
     return ServerPID;
 }
 
@@@@ -1127,13 +1187,13 @@@@ string App::findValidRandomTheme(const string& set)
         name = name.substr(0, name.length() - 1);
d38 1
d40 2
a41 15
-    srandom(getpid()+time(NULL));
+    Util::srandom(Util::makeseed());
 
     vector<string> themes;
     string themefile;
     Cfg::split(themes, name, ',');
     do {
-        int sel = random() % themes.size();
+        int sel = Util::random() % themes.size();
 
         name = Cfg::Trim(themes[sel]);
         themefile = string(THEMESDIR) +"/" + name + THEMESFILE;
@@@@ -1159,34 +1219,32 @@@@ void App::replaceVariables(string& input,
     }
 }
d43 27
a69 31
-
+/*
+ * We rely on the fact that all bits generated by Util::random()
+ * are usable, so we are taking full words from its output.
+ */
 void App::CreateServerAuth() {
     /* create mit cookie */
-    int i, r;
-    int hexcount = 0;
-        string authfile;
-    string cmd;
+    uint16_t word;
+    uint8_t hi, lo;
+    int i;
+    string authfile;
     const char *digits = "0123456789abcdef";
-        srand( time(NULL) );
-    for ( i = 0; i < 31; i++ ) {
-        r = rand()%16;
-                mcookie[i] = digits[r];
-                if (r>9)
-                        hexcount++;
+    Util::srandom(Util::makeseed());
+    for (i = 0; i < App::mcookiesize; i+=4) {
+        word = Util::random() & 0xffff;
+        lo = word & 0xff;
+        hi = word >> 8;
+        mcookie[i] = digits[lo & 0x0f];
+        mcookie[i+1] = digits[lo >> 4];
+        mcookie[i+2] = digits[hi & 0x0f];
+        mcookie[i+3] = digits[hi >> 4];
d71 1
a71 17
-        /* MIT-COOKIE: even occurrences of digits and hex digits */
-        if ((hexcount%2) == 0) {
-                r = rand()%10;
-        } else {
-                r = rand()%5+10;
-        }
-        mcookie[31] = digits[r];
     /* reinitialize auth file */
     authfile = cfg->getOption("authfile");
     remove(authfile.c_str());
     putenv(StrConcat("XAUTHORITY=", authfile.c_str()));
-    cmd = cfg->getOption("xauth_path") + " -q -f " + authfile + " add :0 . " + mcookie;
-    system(cmd.c_str());
+    Util::add_mcookie(mcookie, ":0", cfg->getOption("xauth_path"), authfile);
 }
 
 char* App::StrConcat(const char* str1, const char* str2) {
@


1.2
log
@Fix a nasty race condition/crash reported by 'goebbels@@wp.pl' : when an
X session finishes, slim goes to restart X, but if the machine is being
halted, slim gets a SIGTERM, and the signal handler tries to kill the X
server without checking if is has been restarted yet. Boom.
While here, fix xauth path.
@
text
@d1 1
a1 1
$OpenBSD: patch-app_cpp,v 1.1 2009/09/04 20:24:25 landry Exp $
@


1.1
log
@Add a bunch of patches to fix CVE-2009-1756, also reported in debian bz
#529306 & FreeBSD PR134801 :
The security issue is caused by slim generating the X authority file
by passing the X authority cookie via the command line to "xauth".
This can be exploited to disclose the X authority cookie by consulting
the process list and e.g. gain access the user's display.
While here, use slightly better random seeding for cookie generation.

Patches adapted from the ones provided to debian/FreeBSD by Eygene Ryabinkin <rea@@codelabs.ru>
@
text
@d1 1
a1 1
$OpenBSD$
d6 2
a7 2
--- app.cpp.orig	Fri Sep  4 21:58:08 2009
+++ app.cpp	Fri Sep  4 22:07:29 2009
d71 11
a81 1
@@@@ -131,12 +187,12 @@@@ void User1Signal(int sig) {
d90 1
d97 19
a115 1
@@@@ -1127,13 +1183,13 @@@@ string App::findValidRandomTheme(const string& set)
d131 1
a131 1
@@@@ -1159,34 +1215,32 @@@@ void App::replaceVariables(string& input,
@


1.1.4.1
log
@MFC:

SECURITY FIX

Resolves CVE-2009-1756
@
text
@d1 1
a1 1
$OpenBSD: patch-app_cpp,v 1.1 2009/09/04 20:24:25 landry Exp $
@


1.1.2.1
log
@MFC:

SECURITY FIX

Resolves CVE-2009-1756

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-app_cpp,v 1.1 2009/09/04 20:24:25 landry Exp $
@

