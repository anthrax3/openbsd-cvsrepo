head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2014.07.07.08.25.16;	author sthen;	state Exp;
branches;
next	1.1;
commitid	USz5zhMCqHadZQZy;

1.1
date	2014.06.18.20.49.15;	author matthew;	state Exp;
branches;
next	;
commitid	QP1jF6q6zsm957ao;


desc
@@


1.2
log
@add patches from patrick keshishian:

- fix issue where NUM_TARGETS in main() is incremented one too many times.
- plug memory leak in handle_targets() where copy of supported_targets created
to be passed to change_property() -> XChangeProperty() but not free()-ed.
@
text
@$OpenBSD: patch-xsel_c,v 1.1 2014/06/18 20:49:15 matthew Exp $

- Format "32" properties use "long", not "int", even on LP64 platforms.
- ensure NUM_TARGETS does not exceed MAX_NUM_TARGETS.
- plug a memory leak in handle_targets()

--- xsel.c.orig	Mon Jun 30 00:10:19 2014
+++ xsel.c	Mon Jun 30 00:20:50 2014
@@@@ -15,6 +15,7 @@@@
 #include "config.h"
 #endif
 
+#include <assert.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@@@ -1300,14 +1301,16 @@@@ handle_targets (Display * display, Window requestor, A
                 Atom selection, Time time, MultTrack * mparent)
 {
   Atom * targets_cpy;
+  HandleResult r;
 
   targets_cpy = malloc (sizeof (supported_targets));
   memcpy (targets_cpy, supported_targets, sizeof (supported_targets));
 
-  return
-    change_property (display, requestor, property, XA_ATOM, 32,
+  r = change_property (display, requestor, property, XA_ATOM, 32,
                      PropModeReplace, (unsigned char *)targets_cpy,
                      NUM_TARGETS, selection, time, mparent);
+  free(targets_cpy);
+  return r;
 }
 
 /*
@@@@ -2078,7 +2081,6 @@@@ main(int argc, char *argv[])
 
   /* Get the NULL atom */
   null_atom = XInternAtom (display, "NULL", False);
-  NUM_TARGETS++;
 
   /* Get the TEXT atom */
   text_atom = XInternAtom (display, "TEXT", False);
@@@@ -2096,6 +2098,8 @@@@ main(int argc, char *argv[])
 
   supported_targets[s++] = XA_STRING;
   NUM_TARGETS++;
+
+  assert(NUM_TARGETS <= MAX_NUM_TARGETS);
 
   /* Get the COMPOUND_TEXT atom.
    * NB. We do not currently serve COMPOUND_TEXT; we can retrieve it but
@


1.1
log
@Fix xsel to use "long" for "32"-bit properties, per Xlib's crazy API.

Pointed out by patrick keshishian on misc
ok naddy
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 1
Format "32" properties use "long", not "int", even on LP64 platforms.
d7 12
a18 13
--- xsel.c.orig	Wed Jun 18 12:42:56 2014
+++ xsel.c	Wed Jun 18 12:43:16 2014
@@@@ -630,7 +630,7 @@@@ wait_selection (Atom selection, Atom request_target)
         } else if (target == incr_atom) {
           /* Handle INCR transfers */
           retval = wait_incr_selection (selection, &event.xselection,
-                                        *(int *)value);
+                                        *(long *)value);
           keep_waiting = False;
         } else if (target != utf8_atom && target != XA_STRING &&
                    target != compound_text_atom &&
@@@@ -1165,7 +1165,7 @@@@ change_property (Display * display, Window requestor, 
                  Atom selection, Time time, MultTrack * mparent)
d20 30
a49 4
   XSelectionEvent ev;
-  int nr_bytes;
+  long nr_bytes;
   IncrTrack * it;
d51 2
a52 1
   print_debug (D_TRACE, "change_property ()");
@

