head	1.14;
access;
symbols
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@# @;


1.14
date	2014.10.05.19.52.59;	author jasper;	state dead;
branches;
next	1.13;
commitid	MGehpDF4EDD6BlBO;

1.13
date	2014.05.30.09.29.38;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2014.05.23.06.55.45;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2014.05.08.09.45.07;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.08.09.33.17;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2014.04.25.16.31.49;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.12.07.10.43;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2014.04.08.15.24.21;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.07.15.38.25;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2014.03.27.19.05.31;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2014.03.26.11.05.20;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2014.02.20.17.55.45;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.31.10.49.12;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.07.14.27.15;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.14
log
@update to gnome-shell-3.14.0
@
text
@$OpenBSD: patch-src_shell-global_c,v 1.13 2014/05/30 09:29:38 ajacoutot Exp $

From 35848879384888db7adf11dfef21ff70ea5a454d Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Fri, 30 May 2014 11:26:39 +0200
Subject: openbsd: fix shell_global_reexec_self()

--- src/shell-global.c.orig	Wed May 14 10:28:09 2014
+++ src/shell-global.c	Fri May 30 11:13:33 2014
@@@@ -34,7 +34,6 @@@@
 #endif
 
 #ifdef __OpenBSD__
-#include <sys/param.h>
 #include <sys/sysctl.h>
 #endif
 
@@@@ -1132,28 +1131,19 @@@@ shell_global_reexec_self (ShellGlobal *global)
 {
   GPtrArray *arr;
   gsize len;
+
+#if defined __linux__
   char *buf;
   char *buf_p;
   char *buf_end;
   GError *error = NULL;
 
-#if defined __linux__
   if (!g_file_get_contents ("/proc/self/cmdline", &buf, &len, &error))
     {
       g_warning ("failed to get /proc/self/cmdline: %s", error->message);
       return;
     }
-#elif defined __OpenBSD__
-  int pid = getpid();
-  int mib[] = { CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_ARGV };
-  if (sysctl(mib, G_N_ELEMENTS (mib), &buf, &len, NULL, 0) == -1) {
-    g_warning ("failed to get command line args: %d", errno);
-    return;
-  }
-#else
-  return;
-#endif
-  
+
   buf_end = buf+len;
   arr = g_ptr_array_new ();
   /* The cmdline file is NUL-separated */
@@@@ -1161,7 +1151,31 @@@@ shell_global_reexec_self (ShellGlobal *global)
     g_ptr_array_add (arr, buf_p);
 
   g_ptr_array_add (arr, NULL);
+#elif defined __OpenBSD__
+  gchar **args, **args_p;
+  gint mib[] = { CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ARGV };
 
+  if (sysctl (mib, G_N_ELEMENTS (mib), NULL, &len, NULL, 0) == -1)
+    return;
+
+  args = g_malloc0 (len);
+
+  if (sysctl (mib, G_N_ELEMENTS (mib), args, &len, NULL, 0) == -1) {
+    g_warning ("failed to get command line args: %d", errno);
+    g_free (args);
+    return;
+  }
+
+  arr = g_ptr_array_new ();
+  for (args_p = args; *args_p != NULL; args_p++) {
+    g_ptr_array_add (arr, *args_p);
+  }
+
+  g_ptr_array_add (arr, NULL);
+#else
+  return;
+#endif
+
   /* Close all file descriptors other than stdin/stdout/stderr, otherwise
    * they will leak and stay open after the exec. In particular, this is
    * important for file descriptors that represent mapped graphics buffer
@@@@ -1176,6 +1190,11 @@@@ shell_global_reexec_self (ShellGlobal *global)
   execvp (arr->pdata[0], (char**)arr->pdata);
   g_warning ("failed to reexec: %s", g_strerror (errno));
   g_ptr_array_free (arr, TRUE);
+#if defined __linux__
+  g_free (buf);
+#elif defined __OpenBSD__
+  g_free (args);
+#endif
 }
 
 /**
@


1.13
log
@Pushed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.12 2014/05/23 06:55:45 ajacoutot Exp $
@


1.12
log
@Sync patch with BZ.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.11 2014/05/08 09:45:07 ajacoutot Exp $
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=727763
d9 1
a9 1
+++ src/shell-global.c	Wed May 21 09:45:58 2014
d18 14
a31 1
@@@@ -1143,17 +1142,7 @@@@ shell_global_reexec_self (ShellGlobal *global)
d50 1
a50 1
@@@@ -1161,7 +1150,31 @@@@ shell_global_reexec_self (ShellGlobal *global)
d82 1
a82 1
@@@@ -1176,6 +1189,11 @@@@ shell_global_reexec_self (ShellGlobal *global)
@


1.11
log
@Don't append blank args.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.10 2014/05/08 09:33:17 ajacoutot Exp $
d5 2
a6 2
--- src/shell-global.c.orig	Tue Apr 15 23:36:27 2014
+++ src/shell-global.c	Thu May  8 11:41:10 2014
d66 1
a66 1
@@@@ -1176,6 +1189,8 @@@@ shell_global_reexec_self (ShellGlobal *global)
d70 5
a74 2
+  if (args)
+    g_free (args);
@


1.10
log
@Fix segfault.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.9 2014/04/25 16:31:49 ajacoutot Exp $
d6 1
a6 1
+++ src/shell-global.c	Thu May  8 11:30:47 2014
d34 1
a34 1
@@@@ -1161,7 +1150,33 @@@@ shell_global_reexec_self (ShellGlobal *global)
a54 2
+    if (args_p != args)
+      g_ptr_array_add (arr, " ");
d66 1
a66 1
@@@@ -1176,6 +1191,8 @@@@ shell_global_reexec_self (ShellGlobal *global)
@


1.9
log
@Drop useless header and simplify shell_global_reexec_self().
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.8 2014/04/12 07:10:43 ajacoutot Exp $
d6 1
a6 1
+++ src/shell-global.c	Wed Apr 16 17:52:57 2014
d34 1
a34 1
@@@@ -1161,6 +1150,33 @@@@ shell_global_reexec_self (ShellGlobal *global)
d41 1
a41 1
+
a60 1
+  g_free (args);
d64 1
a64 1
 
d67 10
@


1.8
log
@Sync with BZ patch.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.7 2014/04/08 15:24:21 ajacoutot Exp $
d5 11
a15 3
--- src/shell-global.c.orig	Wed Mar 19 21:27:35 2014
+++ src/shell-global.c	Tue Apr  8 18:38:55 2014
@@@@ -1143,17 +1143,7 @@@@ shell_global_reexec_self (ShellGlobal *global)
d34 1
a34 1
@@@@ -1161,6 +1151,40 @@@@ shell_global_reexec_self (ShellGlobal *global)
d40 1
a40 5
+  pid_t pid = getpid();
+  gint mib[] = { CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_ARGV };
+
+  args = NULL;
+  len = 128;
d42 1
a42 2
+  if (sysctl (mib, G_N_ELEMENTS (mib), NULL, &len, NULL, 0) == -1) {
+    g_warning ("sysctl failed to get data size: %d", errno);
a43 1
+  }
d45 1
a45 5
+  args = g_malloc0 (len + 1);
+  if (args == NULL) {
+    g_warning ("shell_global_reexec_self: cannot allocate memory");
+    return;
+  }
d54 6
a59 2
+  for (args_p = args; *args_p; args_p++)
+    g_ptr_array_add (arr, g_strdup (*args_p));
a60 1
+
@


1.7
log
@Sync patch with the one on BZ.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.6 2014/04/07 15:38:25 ajacoutot Exp $
d6 1
a6 1
+++ src/shell-global.c	Tue Apr  8 08:37:14 2014
d31 1
a31 1
+  gchar **args;
d51 1
d55 4
a58 1
+  buf = g_strndup (*args, len);
a60 4
+
+  arr = g_ptr_array_new ();
+  g_ptr_array_add (arr, buf);
+  g_ptr_array_add (arr, NULL);
@


1.6
log
@Fix shell_global_reexec_self() on OpenBSD.
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
a6 1
+++ src/shell-global.c	Mon Apr  7 17:24:52 2014
d31 1
a31 1
+  gchar **args, **args2;
a35 1
+  buf = NULL;
d38 3
a40 12
+  while (len < SIZE_MAX / 2) {
+    len *= 2;
+    if ((args2 = realloc (args, 2 * len)) == NULL)
+      break;
+    args = args2;
+    if (sysctl (mib, G_N_ELEMENTS (mib), args, &len, NULL, 0) == -1) {
+      if (errno == ENOMEM)
+        continue;
+      break;
+    }
+    buf = g_strndup (*args, len);
+    break;
d43 5
a47 1
+  g_free (args);
d49 2
a50 1
+  if (buf == NULL)
d52 5
@


1.5
log
@update to gnome-shell-3.12.0
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.4 2014/03/26 11:05:20 jasper Exp $
d3 1
a3 4
From 15ff426be8e76af7c038feb3b754fbfde4056e5d Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Thu, 31 Oct 2013 10:46:59 +0000
Subject: shell_global_reexec_self: add support for OpenBSD
d5 3
a7 37
From 1841df1670f97131e9e9b828f032c89404c7759f Mon Sep 17 00:00:00 2001
From: Tim Lunn <tim@@feathertop.org>
Date: Tue, 29 Oct 2013 18:12:10 +1100
Subject: [PATCH] remove direct access to jsapi

--- src/shell-global.c.orig	Wed Feb 19 19:19:34 2014
+++ src/shell-global.c	Wed Mar 26 11:52:15 2014
@@@@ -22,7 +22,6 @@@@
 #include <clutter/x11/clutter-x11.h>
 #include <gdk/gdkx.h>
 #include <gio/gio.h>
-#include <gjs/gjs-module.h>
 #include <girepository.h>
 #include <meta/display.h>
 #include <meta/util.h>
@@@@ -34,6 +33,11 @@@@
 #include <malloc.h>
 #endif
 
+#ifdef __OpenBSD__
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#endif
+
 #include "shell-enum-types.h"
 #include "shell-global-private.h"
 #include "shell-perf-log.h"
@@@@ -1124,20 +1128,30 @@@@ shell_global_reexec_self (ShellGlobal *global)
   char *buf_p;
   char *buf_end;
   GError *error = NULL;
-  
-  /* Linux specific (I think, anyways). */
+
+#if defined __linux__
   if (!g_file_get_contents ("/proc/self/cmdline", &buf, &len, &error))
     {
d11 19
a29 1
-      
d31 25
a55 4
+  int pid = getpid();
+  int mib[] = { CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_ARGV };
+  if (sysctl(mib, G_N_ELEMENTS (mib), &buf, &len, NULL, 0) == -1) {
+    g_warning ("failed to get command line args: %d", errno);
d57 4
a60 1
+  }
a63 9
+  
   buf_end = buf+len;
   arr = g_ptr_array_new ();
   /* The cmdline file is NUL-separated */
   for (buf_p = buf; buf_p < buf_end; buf_p = buf_p + strlen (buf_p) + 1)
     g_ptr_array_add (arr, buf_p);
-  
+
   g_ptr_array_add (arr, NULL);
d66 1
a66 45
@@@@ -1162,44 +1176,6 @@@@ shell_global_on_gc (GjsContext   *context,
 {
   global->last_gc_end_time = g_get_monotonic_time ();
 }
-
-/**
- * shell_global_get_memory_info:
- * @@global:
- * @@meminfo: (out caller-allocates): Output location for memory information
- *
- * Load process-global data about memory usage.
- */
-void
-shell_global_get_memory_info (ShellGlobal        *global,
-                              ShellMemoryInfo    *meminfo)
-{
-  JSContext *context;
-  gint64 now;
-
-#ifdef HAVE_MALLINFO
-  {
-    struct mallinfo info = mallinfo ();
-    meminfo->glibc_uordblks = info.uordblks;
-  }
-#else
-  meminfo->glibc_uordblks = 0;
-#endif
-
-  context = gjs_context_get_native_context (global->js_context);
-
-  meminfo->js_bytes = JS_GetGCParameter (JS_GetRuntime (context), JSGC_BYTES);
-
-  meminfo->gjs_boxed = (unsigned int) gjs_counter_boxed.value;
-  meminfo->gjs_gobject = (unsigned int) gjs_counter_object.value;
-  meminfo->gjs_function = (unsigned int) gjs_counter_function.value;
-  meminfo->gjs_closure = (unsigned int) gjs_counter_closure.value;
-
-  now = g_get_monotonic_time ();
-
-  meminfo->last_gc_seconds_ago = (now - global->last_gc_end_time) / G_TIME_SPAN_SECOND;
-}
-
 
 /**
  * shell_global_notify_error:
@


1.4
log
@add varous patches from upstream to unbreak with new spidermonkey/gjs.

they'll be removed once gnome-shell is updated to 3.12.0
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.3 2014/02/20 17:55:45 jasper Exp $
@


1.3
log
@update to gnome-shell-3.10.4, fixing a host of issues

ok aja@@ sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.2 2013/10/31 10:49:12 ajacoutot Exp $
d8 5
d14 10
a23 2
+++ src/shell-global.c	Thu Feb 20 14:48:22 2014
@@@@ -34,6 +34,11 @@@@
d35 1
a35 1
@@@@ -1124,20 +1129,30 @@@@ shell_global_reexec_self (ShellGlobal *global)
d70 45
@


1.2
log
@Committed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_shell-global_c,v 1.1 2013/10/07 14:27:15 ajacoutot Exp $
d8 2
a9 2
--- src/shell-global.c.orig	Mon Oct  7 16:06:32 2013
+++ src/shell-global.c	Mon Oct  7 16:06:00 2013
d22 1
a22 1
@@@@ -1100,20 +1105,30 @@@@ shell_global_reexec_self (ShellGlobal *global)
@


1.1
log
@Implement shell_global_reexec_self() so that alt-f2 + 'r' properly
re-execture the shell (one of the brazillions "no /proc here" patches).
Remove non-existent CONFIGURE_ARGS while here.
@
text
@d1 1
a1 1
$OpenBSD$
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=709571
@

