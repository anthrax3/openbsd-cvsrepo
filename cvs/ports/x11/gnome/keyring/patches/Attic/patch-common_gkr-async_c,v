head	1.2;
access;
symbols
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2008.05.27.15.30.42;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2008.02.14.12.39.15;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update gnome-keyring to latest stable version 2.22.2
(our local patch has been imported upstream)
- explicitly disable gtk-doc run

ok jasper@@
@
text
@$OpenBSD: patch-common_gkr-async_c,v 1.1 2008/02/14 12:39:15 jasper Exp $
--- common/gkr-async.c.orig	Thu Feb 14 00:03:24 2008
+++ common/gkr-async.c	Thu Feb 14 00:16:53 2008
@@@@ -34,6 +34,11 @@@@
 
 #define DEBUG_LOCKS 0
 
+/* 
+ * See comments on async_poll_func() on the order of the various
+ * gets and sets of waiting_on_* flags.
+ */
+
 #if DEBUG_LOCKS
 #define DO_LOCK(mtx) G_STMT_START { \
 		g_printerr ("%s LOCK %s\n", __func__, G_STRINGIFY(mtx));  \
@@@@ -93,8 +98,20 @@@@ async_poll_func (GPollFD *ufds, guint nfsd, gint timeo
 	gint ret;
 	
 	g_assert (orig_poll_func);
+
+	/* 
+	 * These two atomic variables are interlocked in the 
+	 * opposite order from those in DO_LOCK which prevents
+	 * race conditions in the if statements.
+	 */
 	g_atomic_int_set (&waiting_on_poll, 1);
+
+	if (g_atomic_int_get (&waiting_on_lock))
+
+		timeout = 0;
+
 	ret = (orig_poll_func) (ufds, nfsd, timeout);
+
 	g_atomic_int_set (&waiting_on_poll, 0);
 	
  	if (done_queue && !g_queue_is_empty (done_queue))
@@@@ -314,7 +331,6 @@@@ cleanup_done_thread (gpointer message, gpointer data)
 		running_workers = NULL;
 		
 		g_assert (main_loop);
-		gkr_wakeup_register (g_main_loop_get_context (main_loop));
 		return FALSE;
 	}
 	
@@@@ -346,7 +362,6 @@@@ gkr_async_worker_start (GThreadFunc func, GkrAsyncWork
 	
 	if (!done_queue) {
 		g_assert (main_loop);
-		gkr_wakeup_register (g_main_loop_get_context (main_loop));
 		
 		done_queue = g_queue_new ();
 		g_assert (!running_workers);
@


1.1
log
@- fix a possible deadlock, from gnome svn

ok ajacoutot@@ mbalmer@@
@
text
@d1 1
a1 1
$OpenBSD$
@

