head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2014.11.13.18.26.38;	author jasper;	state dead;
branches;
next	1.4;
commitid	Q4vACqwcvRHo2tUv;

1.4
date	2014.10.16.08.21.38;	author jasper;	state Exp;
branches;
next	1.3;
commitid	NcmqpjbBi2FtYqZk;

1.3
date	2014.10.15.19.32.49;	author jasper;	state dead;
branches;
next	1.2;
commitid	4J2MwM4uj8Q5cI7Y;

1.2
date	2014.10.15.14.11.44;	author jasper;	state Exp;
branches;
next	1.1;
commitid	VGuUXSfC5jSEB8rv;

1.1
date	2014.10.15.13.35.27;	author jasper;	state Exp;
branches;
next	;
commitid	pYgmuNcpSSgqTm13;


desc
@@


1.5
log
@update to mutter-3.14.2
@
text
@$OpenBSD: patch-src_backends_meta-cursor_c,v 1.4 2014/10/16 08:21:38 jasper Exp $

From 60ab11ecbfa0d30f7a750af48782b48c686375f1 Mon Sep 17 00:00:00 2001
From: "Jasper St. Pierre" <jstpierre@@mecheye.net>
Date: Wed, 15 Oct 2014 10:36:42 -0700
Subject: cursor: Clean up code flow slightly

From d88c8d9ced0e0b1cb570007e7857928e8d1046b6 Mon Sep 17 00:00:00 2001
From: "Jasper St. Pierre" <jstpierre@@mecheye.net>
Date: Wed, 15 Oct 2014 10:35:53 -0700
Subject: Make gbm optional

--- src/backends/meta-cursor.c.orig	Thu Oct 16 10:02:08 2014
+++ src/backends/meta-cursor.c	Thu Oct 16 10:01:32 2014
@@@@ -56,8 +56,11 @@@@ static void
 meta_cursor_image_free (MetaCursorImage *image)
 {
   cogl_object_unref (image->texture);
+
+#ifdef HAVE_NATIVE_BACKEND
   if (image->bo)
     gbm_bo_destroy (image->bo);
+#endif
 }
 
 static void
@@@@ -139,10 +142,10 @@@@ load_cursor_on_client (MetaCursor cursor)
                                   meta_prefs_get_cursor_size ());
 }
 
+#ifdef HAVE_NATIVE_BACKEND
 static void
 get_hardware_cursor_size (uint64_t *cursor_width, uint64_t *cursor_height)
 {
-#ifdef HAVE_NATIVE_BACKEND
   MetaBackend *meta_backend = meta_get_backend ();
   MetaCursorRenderer *renderer = meta_backend_get_cursor_renderer (meta_backend);
 
@@@@ -151,11 +154,12 @@@@ get_hardware_cursor_size (uint64_t *cursor_width, uint
       meta_cursor_renderer_native_get_cursor_size (META_CURSOR_RENDERER_NATIVE (renderer), cursor_width, cursor_height);
       return;
     }
-#endif
 
   g_assert_not_reached ();
 }
+#endif
 
+#ifdef HAVE_NATIVE_BACKEND
 static void
 meta_cursor_image_load_gbm_buffer (struct gbm_device *gbm,
                                    MetaCursorImage   *image,
@@@@ -193,37 +197,35 @@@@ meta_cursor_image_load_gbm_buffer (struct gbm_device *
   else
     meta_warning ("HW cursor for format %d not supported\n", gbm_format);
 }
+#endif
 
+#ifdef HAVE_NATIVE_BACKEND
 static struct gbm_device *
 get_gbm_device (void)
 {
-#ifdef HAVE_NATIVE_BACKEND
   MetaBackend *meta_backend = meta_get_backend ();
   MetaCursorRenderer *renderer = meta_backend_get_cursor_renderer (meta_backend);
 
   if (META_IS_CURSOR_RENDERER_NATIVE (renderer))
     return meta_cursor_renderer_native_get_gbm_device (META_CURSOR_RENDERER_NATIVE (renderer));
+  else
+    return NULL;
+}
 #endif
 
-  return NULL;
-}
-
 static void
 meta_cursor_image_load_from_xcursor_image (MetaCursorImage   *image,
                                            XcursorImage      *xc_image)
 {
   uint width, height, rowstride;
   CoglPixelFormat cogl_format;
-  uint32_t gbm_format;
   ClutterBackend *clutter_backend;
   CoglContext *cogl_context;
-  struct gbm_device *gbm;
 
   width           = xc_image->width;
   height          = xc_image->height;
   rowstride       = width * 4;
 
-  gbm_format = GBM_FORMAT_ARGB8888;
 #if G_BYTE_ORDER == G_LITTLE_ENDIAN
   cogl_format = COGL_PIXEL_FORMAT_BGRA_8888;
 #else
@@@@ -242,13 +244,15 @@@@ meta_cursor_image_load_from_xcursor_image (MetaCursorI
                                                   (uint8_t *) xc_image->pixels,
                                                   NULL);
 
-  gbm = get_gbm_device ();
+#ifdef HAVE_NATIVE_BACKEND
+  struct gbm_device *gbm = get_gbm_device ();
   if (gbm)
     meta_cursor_image_load_gbm_buffer (gbm,
                                        image,
                                        (uint8_t *) xc_image->pixels,
                                        width, height, rowstride,
-                                       gbm_format);
+                                       GBM_FORMAT_ARGB8888);
+#endif
 }
 
 MetaCursorReference *
@@@@ -277,14 +281,8 @@@@ meta_cursor_image_load_from_buffer (MetaCursorImage   
                                     int                 hot_x,
                                     int                 hot_y)
 {
-  struct gbm_device *gbm = get_gbm_device ();
-
   ClutterBackend *backend;
   CoglContext *cogl_context;
-  struct wl_shm_buffer *shm_buffer;
-  uint32_t gbm_format;
-  uint64_t cursor_width, cursor_height;
-  uint width, height;
 
   image->hot_x = hot_x;
   image->hot_y = hot_y;
@@@@ -294,13 +292,19 @@@@ meta_cursor_image_load_from_buffer (MetaCursorImage   
 
   image->texture = cogl_wayland_texture_2d_new_from_buffer (cogl_context, buffer, NULL);
 
-  width = cogl_texture_get_width (COGL_TEXTURE (image->texture));
-  height = cogl_texture_get_height (COGL_TEXTURE (image->texture));
-
-  shm_buffer = wl_shm_buffer_get (buffer);
-  if (shm_buffer)
+#ifdef HAVE_NATIVE_BACKEND
+  struct gbm_device *gbm = get_gbm_device ();
+  if (gbm)
     {
-      if (gbm)
+      uint32_t gbm_format;
+      uint64_t cursor_width, cursor_height;
+      uint width, height;
+
+      width = cogl_texture_get_width (COGL_TEXTURE (image->texture));
+      height = cogl_texture_get_height (COGL_TEXTURE (image->texture));
+
+      struct wl_shm_buffer *shm_buffer = wl_shm_buffer_get (buffer);
+      if (shm_buffer)
         {
           int rowstride = wl_shm_buffer_get_stride (shm_buffer);
 
@@@@ -332,10 +336,7 @@@@ meta_cursor_image_load_from_buffer (MetaCursorImage   
                                              width, height, rowstride,
                                              gbm_format);
         }
-    }
-  else
-    {
-      if (gbm)
+      else
         {
           /* HW cursors have a predefined size (at least 64x64), which usually is bigger than cursor theme
              size, so themed cursors must be padded with transparent pixels to fill the
@@@@ -356,6 +357,7 @@@@ meta_cursor_image_load_from_buffer (MetaCursorImage   
             meta_warning ("Importing HW cursor from wl_buffer failed\n");
         }
     }
+#endif
 }
 
 MetaCursorReference *
@@@@ -385,6 +387,7 @@@@ meta_cursor_reference_get_cogl_texture (MetaCursorRefe
   return COGL_TEXTURE (cursor->image.texture);
 }
 
+#ifdef HAVE_NATIVE_BACKEND
 struct gbm_bo *
 meta_cursor_reference_get_gbm_bo (MetaCursorReference *cursor,
                                   int                 *hot_x,
@@@@ -396,6 +399,7 @@@@ meta_cursor_reference_get_gbm_bo (MetaCursorReference 
     *hot_y = cursor->image.hot_y;
   return cursor->image.bo;
 }
+#endif
 
 MetaCursor
 meta_cursor_reference_get_meta_cursor (MetaCursorReference *cursor)
@


1.4
log
@- cvs decided patch-src_backends_meta-cursor_c wasn't needed; i beg to differ.
- while here apply a fix from upstream to fix a logic issue in changing
  grab behaviour

no bump since it didn't build,
spotted by aja@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@apply fix from upstream to make gbm optional
@
text
@d1 1
a1 1
$OpenBSD: patch-src_backends_meta-cursor_c,v 1.2 2014/10/15 14:11:44 jasper Exp $
d3 4
a6 2
Revert 488dd0b402dc8c56a70f995a7456c2ff511a818b,
while Wayland-specific, it requires Mesa >= 10.3.
d8 4
a11 1
https://bugzilla.gnome.org/show_bug.cgi?id=738578
d13 16
a28 3
--- src/backends/meta-cursor.c.orig	Thu Oct  2 16:29:20 2014
+++ src/backends/meta-cursor.c	Wed Oct 15 13:59:39 2014
@@@@ -140,55 +140,34 @@@@ load_cursor_on_client (MetaCursor cursor)
d31 1
d33 2
a34 2
-get_hardware_cursor_size (uint64_t *cursor_width, uint64_t *cursor_height)
-{
d36 7
a42 8
-  MetaBackend *meta_backend = meta_get_backend ();
-  MetaCursorRenderer *renderer = meta_backend_get_cursor_renderer (meta_backend);
-
-  if (META_IS_CURSOR_RENDERER_NATIVE (renderer))
-    {
-      meta_cursor_renderer_native_get_cursor_size (META_CURSOR_RENDERER_NATIVE (renderer), cursor_width, cursor_height);
-      return;
-    }
d44 7
a50 5
-
-  g_assert_not_reached ();
-}
-
-static void
d53 9
a61 7
                                    uint8_t           *pixels,
-                                   uint               width,
-                                   uint               height,
+                                   int                width,
+                                   int                height,
                                    int                rowstride,
                                    uint32_t           gbm_format)
d63 3
a65 11
-  uint64_t cursor_width, cursor_height;
-  get_hardware_cursor_size (&cursor_width, &cursor_height);
-
-  if (width > cursor_width || height > cursor_height)
+  if (width > 64 || height > 64)
     {
-      meta_warning ("Invalid theme cursor size (must be at most %ux%u)\n",
-                    (unsigned int)cursor_width, (unsigned int)cursor_height);
+      meta_warning ("Invalid theme cursor size (must be at most 64x64)\n");
       return;
     }
d67 6
a72 18
   if (gbm_device_is_format_supported (gbm, gbm_format,
-                                      GBM_BO_USE_CURSOR | GBM_BO_USE_WRITE))
+                                      GBM_BO_USE_CURSOR_64X64 | GBM_BO_USE_WRITE))
     {
-      uint8_t buf[4 * cursor_width * cursor_height];
-      uint i;
+      uint8_t buf[4 * 64 * 64];
+      int i;
 
-      image->bo = gbm_bo_create (gbm, cursor_width, cursor_height,
-                                 gbm_format, GBM_BO_USE_CURSOR | GBM_BO_USE_WRITE);
+      image->bo = gbm_bo_create (gbm, 64, 64,
+                                 gbm_format, GBM_BO_USE_CURSOR_64X64 | GBM_BO_USE_WRITE);
 
       memset (buf, 0, sizeof(buf));
       for (i = 0; i < height; i++)
-        memcpy (buf + i * 4 * cursor_width, pixels + i * rowstride, width * 4);
+        memcpy (buf + i * 4 * 64, pixels + i * rowstride, width * 4);
d74 4
a77 6
-      gbm_bo_write (image->bo, buf, cursor_width * cursor_height * 4);
+      gbm_bo_write (image->bo, buf, 64 * 64 * 4);
     }
   else
     meta_warning ("HW cursor for format %d not supported\n", gbm_format);
@@@@ -212,7 +191,7 @@@@ static void
d81 1
a81 2
-  uint width, height, rowstride;
+  int width, height, rowstride;
d83 1
a83 1
   uint32_t gbm_format;
a84 1
@@@@ -283,8 +262,7 @@@@ meta_cursor_image_load_from_buffer (MetaCursorImage   
d86 38
a123 2
   struct wl_shm_buffer *shm_buffer;
   uint32_t gbm_format;
a125 1
+  int width, height;
d129 12
a140 3
@@@@ -335,23 +313,22 @@@@ meta_cursor_image_load_from_buffer (MetaCursorImage   
     }
   else
d143 21
a163 7
+      /* HW cursors must be 64x64, but 64x64 is huge, and no cursor theme actually uses
+         that, so themed cursors must be padded with transparent pixels to fill the
+         overlay. This is trivial if we have CPU access to the data, but it's not
+         possible if the buffer is in GPU memory (and possibly tiled too), so if we
+         don't get the right size, we fallback to GL.
+      */
+      if (width != 64 || height != 64)
d165 3
a167 23
-          /* HW cursors have a predefined size (at least 64x64), which usually is bigger than cursor theme
-             size, so themed cursors must be padded with transparent pixels to fill the
-             overlay. This is trivial if we have CPU access to the data, but it's not
-             possible if the buffer is in GPU memory (and possibly tiled too), so if we
-             don't get the right size, we fallback to GL.
-          */
-          get_hardware_cursor_size (&cursor_width, &cursor_height);
+          meta_warning ("Invalid cursor size (must be 64x64), falling back to software (GL) cursors\n");
+          return;
+        }
 
-          if (width != cursor_width || height != cursor_height)
-            {
-              meta_warning ("Invalid cursor size (must be 64x64), falling back to software (GL) cursors\n");
-              return;
-            }
-
-          image->bo = gbm_bo_import (gbm, GBM_BO_IMPORT_WL_BUFFER, buffer, GBM_BO_USE_CURSOR);
+      if (gbm)
+        {
+          image->bo = gbm_bo_import (gbm, GBM_BO_IMPORT_WL_BUFFER,
+                                     buffer, GBM_BO_USE_CURSOR_64X64);
           if (!image->bo)
d170 21
@


1.2
log
@link to bz
@
text
@d1 1
a1 1
$OpenBSD: patch-src_backends_meta-cursor_c,v 1.1 2014/10/15 13:35:27 jasper Exp $
@


1.1
log
@update to mutter-3.14.1
@
text
@d1 1
a1 1
$OpenBSD$
d5 2
@

