head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.09.29.23.32.16;	author sthen;	state Exp;
branches;
next	1.1;
commitid	sjISdpqm77O4wyAL;

1.1
date	2017.09.25.09.16.13;	author robert;	state Exp;
branches;
next	;
commitid	xOeDnABBxynvFYIF;


desc
@@


1.2
log
@- unbreak a second autoconf check with clang by not using nested functions

- set AUTOCONF_DIR to actually regenerate clutter/configure, it wasn't being
regen'd at all, so both the -fvisibility=hidden and -Bsymbolic-functions tests
were broken
@
text
@$OpenBSD: patch-clutter_configure_ac,v 1.1 2017/09/25 09:16:13 robert Exp $

Index: clutter/configure.ac
--- clutter/configure.ac.orig
+++ clutter/configure.ac
@@@@ -149,7 +149,7 @@@@ AC_ARG_ENABLE([Bsymbolic],
                 saved_LDFLAGS="${LDFLAGS}"
                 AC_MSG_CHECKING([for -Bsymbolic-functions linker flag])
                 LDFLAGS=-Wl,-Bsymbolic-functions
-                AC_TRY_LINK([], [int main (void) { return 0; }],
+                AC_TRY_LINK([], [],
                             [
                               AC_MSG_RESULT([yes])
                               enable_Bsymbolic=yes
@@@@ -170,7 +170,7 @@@@ dnl on other compilers, check if we can do -fvisibilit
 SAVED_CFLAGS="${CFLAGS}"
 CFLAGS="-fvisibility=hidden"
 AC_MSG_CHECKING([for -fvisibility=hidden compiler flag])
-AC_TRY_COMPILE([], [int main (void) { return 0; }],
+AC_TRY_COMPILE([], [],
 	       AC_MSG_RESULT(yes)
 	       enable_fvisibility_hidden=yes,
 	       AC_MSG_RESULT(no)
@


1.1
log
@Unbreak autoconf checks with clang by not using nested functions
in the checks.

Someone clearly did not read the autoconf documentation because
using the following functions with a function declaration inside
the body will end up declaring a function inside a function.

- AC_TRY_COMPILE( [], [ int main() { return 0; } ],
- AC_LANG_PROGRAM([[]], [[int main (void) { return 0; }]])],
- AC_TRY_LINK([], [int main (void) { return 0; }],

Result:

int
main ()
{
int main (void) { return 0; }
  ;
  return 0;
}

nested functions is a gcc extension which is not supported by
clang.

test.c:4:17: error: function definition is not allowed here
int main (void) { return 0; }
                ^
1 error generated.

This causes tests to fail in the configure scripts resulting in
missing compile and link time flags from the builds.

This resulted in weird behaviour of several software, like gnome
hanging completely due to gtk+3 not being built properly.

This change intrudces the following fixes:

- remove int main() declaration from AC_TRY_COMPILE, AC_LANG_PROGRAM, AC_TRY_LINK
  as it comes with a declaration already, and people misused them

- change to use AC_LANG_SOURCE when needed in case a complete source block is specified

Most of the changes are in configure.(ac|in), however there were some cases
where autoconf is either broken or the build failed because of an autoconf
generated configure script. Everytihng else is switched to autoconf, so
the maintainers can go ahead and upstream these diffs.

There are more to come, we are continously checking the tree for these issues
and in the future the infrastructure will error if such a case is found.
@
text
@d1 1
a1 1
$OpenBSD$
d15 9
@

