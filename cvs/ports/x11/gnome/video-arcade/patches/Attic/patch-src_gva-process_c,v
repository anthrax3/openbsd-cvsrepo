head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2009.04.27.06.55.20;	author ajacoutot;	state dead;
branches;
next	1.3;

1.3
date	2009.04.14.09.43.42;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.11.12.18.00;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.10.22.35.08;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- update to gnome-video-arcade-0.6.7
Patches from Pierre Riteau were merged in original svn thanks to very
responsive upstream.
@
text
@$OpenBSD: patch-src_gva-process_c,v 1.3 2009/04/14 09:43:42 ajacoutot Exp $
--- src/gva-process.c.orig	Sun Apr  5 18:36:35 2009
+++ src/gva-process.c	Tue Apr 14 00:39:41 2009
@@@@ -152,7 +152,7 @@@@ process_exited (GPid pid,
         }
 }
 
-static void
+static GIOStatus
 process_read_line (GvaProcess *process,
                    GIOChannel *channel,
                    GQueue *queue,
@@@@ -171,10 +171,9 @@@@ process_read_line (GvaProcess *process,
                 g_signal_emit (process, signal_id, 0);
         }
         else
-        {
-                g_assert (error != NULL);
                 process_propagate_error (process, error);
-        }
+
+        return status;
 }
 
 static gboolean
@@@@ -182,6 +181,12 @@@@ process_stdout_ready (GIOChannel *channel,
                       GIOCondition condition,
                       GvaProcess *process)
 {
+        /* The logic here is tricky to get right across all operating
+         * systems due to the various ways poll() can report end-of-file.
+         * See http://www.greenend.org.uk/rjk/2001/06/poll.html. */
+
+        GIOStatus status;
+
         if (condition & G_IO_IN)
         {
                 /* For better performance, keep reading lines as long as
@@@@ -192,17 +197,23 @@@@ process_stdout_ready (GIOChannel *channel,
 
                 do
                 {
-                        process_read_line (
+                        status = process_read_line (
                                 process, channel,
                                 process->priv->stdout_lines,
                                 signals[STDOUT_READY]);
 
+                        if (status != G_IO_STATUS_NORMAL)
+                                break;
+
+                        /* Continue reading as long as data is available
+                         * in the internal buffer. */
                         condition =
                                 g_io_channel_get_buffer_condition (channel);
                 }
-                while (condition & G_IO_IN);
+                while (condition == G_IO_IN);
 
-                return TRUE;
+                if (status == G_IO_STATUS_NORMAL)
+                        return TRUE;
         }
 
         process->priv->stdout_source_id = 0;
@@@@ -215,16 +226,19 @@@@ process_stderr_ready (GIOChannel *channel,
                       GIOCondition condition,
                       GvaProcess *process)
 {
+        GIOStatus status;
+
         if (condition & G_IO_IN)
         {
                 /* Do NOT loop here, as we do for stdout. */
 
-                process_read_line (
+                status = process_read_line (
                         process, channel,
                         process->priv->stderr_lines,
                         signals[STDERR_READY]);
 
-                return TRUE;
+                if (status == G_IO_STATUS_NORMAL)
+                        return TRUE;
         }
 
         process->priv->stderr_source_id = 0;
@


1.3
log
@- remove workaround and add newly committed patch from upstream SVN

all from Pierre Riteau, thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-src_gva-process_c,v 1.2 2009/04/11 12:18:00 ajacoutot Exp $
@


1.2
log
@- better patch

from Pierre Riteau, thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-src_gva-process_c,v 1.1 2009/04/10 22:35:08 ajacoutot Exp $
d3 1
a3 1
+++ src/gva-process.c	Sat Apr 11 10:11:52 2009
d9 1
a9 1
+static int
d13 1
a13 3
@@@@ -169,11 +169,12 @@@@ process_read_line (GvaProcess *process,
                 g_assert (line != NULL);
                 g_queue_push_tail (queue, line);
a14 1
+                return 0;
d17 1
a17 1
         {
d20 3
a22 2
+                return -1;
         }
d25 15
a39 1
@@@@ -192,10 +193,17 @@@@ process_stdout_ready (GIOChannel *channel,
d44 1
a44 7
+                        /*
+                         * XXX For some reason on OpenBSD the G_IO_IN flag
+                         * is always present even when we hit EOF from the
+                         * source, so use the return value of
+                         * process_read_line to know when to remove the source
+                         */
+                        if (process_read_line (
d47 1
a47 3
-                                signals[STDOUT_READY]);
+                                signals[STDOUT_READY]) == -1)
+                                goto remove_source;
d49 5
d56 7
a62 2
@@@@ -205,6 +213,7 @@@@ process_stdout_ready (GIOChannel *channel,
                 return TRUE;
a64 1
+remove_source:
d66 7
a72 3
 
         return FALSE;
@@@@ -219,14 +228,22 @@@@ process_stderr_ready (GIOChannel *channel,
d77 1
a77 7
+                /*
+                 * XXX For some reason on OpenBSD the G_IO_IN flag
+                 * is always present even when we hit EOF from the
+                 * source, so use the return value of
+                 * process_read_line to know when to remove the source
+                 */
+                if (process_read_line (
d80 1
a80 3
-                        signals[STDERR_READY]);
+                        signals[STDERR_READY]) == -1)
+                        goto remove_source;
d82 3
a84 1
                 return TRUE;
a86 1
+remove_source:
a87 2
 
         return FALSE;
@


1.1
log
@- give this port a chance to run ; patch from Pierre Riteau
(this is a workaround, better fix is being worked on)
- fix schema file to quiet up gconftool-2
@
text
@d1 1
a1 1
$OpenBSD$
d3 13
a15 2
+++ src/gva-process.c	Fri Apr 10 21:01:15 2009
@@@@ -171,10 +171,7 @@@@ process_read_line (GvaProcess *process,
d17 1
d20 1
a20 1
-        {
d23 2
a24 1
-        }
d27 18
a44 11
 static gboolean
@@@@ -182,7 +179,7 @@@@ process_stdout_ready (GIOChannel *channel,
                       GIOCondition condition,
                       GvaProcess *process)
 {
-        if (condition & G_IO_IN)
+        if (condition == G_IO_IN)
         {
                 /* For better performance, keep reading lines as long as
                  * there's more data available.  This assumes the stderr
@@@@ -200,7 +197,7 @@@@ process_stdout_ready (GIOChannel *channel,
d47 1
a47 4
                 }
-                while (condition & G_IO_IN);
+                while (condition == G_IO_IN);
 
d50 6
a55 6
@@@@ -215,7 +212,7 @@@@ process_stderr_ready (GIOChannel *channel,
                       GIOCondition condition,
                       GvaProcess *process)
 {
-        if (condition & G_IO_IN)
+        if (condition == G_IO_IN)
d59 21
@

