head	1.3;
access;
symbols
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.2
	OPENBSD_4_4_BASE:1.1.1.1
	jasper_20080512:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.10.04.06.26.05;	author ajacoutot;	state dead;
branches;
next	1.2;

1.2
date	2009.02.10.21.01.23;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.12.21.56.32;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.05.12.21.56.32;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@gnome-keyring API has evolved since this unmaintained tool was written.
Debugging can be made in by different means, remove.

ok jasper@@
@
text
@/* $OpenBSD: gnome-keyring-query.c,v 1.2 2009/02/10 21:01:23 ajacoutot Exp $ */

/*
 * This file was found on:
 * http://gentoo-wiki.com/HOWTO_Use_gnome-keyring_to_store_SSH_passphrases
 *
 * It has been provided the PUBLIC DOMAIN, AS-IS, without warranty.
 */

#include <stdlib.h>
#include <stdio.h>

#include <glib.h>
#include "gnome-keyring.h"


#define APPLICATION_NAME "gnome-keyring-query"
#define MAX_PASSWORD_LENGTH 100


char * get_password(const char * name);
int    set_password(const char * name, const char * password);


void usage()
{
    puts("Usage:\n"
	 "    " APPLICATION_NAME " <mode> <name>\n"
	 "Parameters:\n"
	 "    mode     - either 'get' or 'set' (without quotes)\n"
	 "    name     - a name to identify the key\n"
	 "Notes:\n"
	 "    If mode is 'get', then the password is dumped to stdout.\n"
	 "    If mode is 'set', then the password is read from stdin.\n");
    exit(EXIT_FAILURE);
}


int main(int argc, char * argv[])
{
    enum
    {
	MODE_GET, MODE_SET
    } mode;
    char * name;
    char * password;
    
    g_set_application_name(APPLICATION_NAME);
    
    if (argc != 3)
	usage();
	
    if (g_ascii_strcasecmp(argv[1], "get") == 0)
	mode = MODE_GET;
    else if (g_ascii_strcasecmp(argv[1], "set") == 0)
	mode = MODE_SET;
    else
    {
	fprintf(stderr, "Invalid mode: %s\n", argv[1]);
	exit(EXIT_FAILURE);
    }
    
    name = argv[2];
    
    switch (mode)
    {
	case MODE_GET:
	    password = get_password(name);
	    if (!password)
	    {
		fprintf(stderr, "Failed to get password: %s\n", name);
		exit(EXIT_FAILURE);
	    }
	    
	    puts(password);
	    g_free(password);
	    break;
	    
	case MODE_SET:
	    password = g_malloc(MAX_PASSWORD_LENGTH);
	    *password = '\0';
	    fgets(password, MAX_PASSWORD_LENGTH, stdin);
	    
	    if (!set_password(name, password))
	    {
		fprintf(stderr, "Failed to set password: %s\n", name);
		exit(EXIT_FAILURE);
	    }
	    
	    g_free(password);
	    break;
    }
    
    return 0;
}


char * get_password(const char * name)
{
    GnomeKeyringAttributeList * attributes;
    GnomeKeyringResult result;
    GList * found_list;
    GList * i;
    GnomeKeyringFound * found;
    char * password;
    
    attributes = g_array_new(FALSE, FALSE, sizeof (GnomeKeyringAttribute));
    gnome_keyring_attribute_list_append_string(attributes,
	    "name",
	    name);
    gnome_keyring_attribute_list_append_string(attributes,
	    "magic",
	    APPLICATION_NAME);
    
    result = gnome_keyring_find_items_sync(GNOME_KEYRING_ITEM_GENERIC_SECRET,
	    attributes,
	    &found_list);
    gnome_keyring_attribute_list_free(attributes);
    
    if (result != GNOME_KEYRING_RESULT_OK)
	return NULL;
    
    for (i = found_list; i != NULL; i = i->next)
    {
	found = i->data;
	password = g_strdup(found->secret);
	break;
    }
    gnome_keyring_found_list_free(found_list);
    
    return password;
}


int set_password(const char * name, const char * password)
{
    GnomeKeyringAttributeList * attributes;
    GnomeKeyringResult result;
    guint item_id;
    
    attributes = g_array_new(FALSE, FALSE, sizeof (GnomeKeyringAttribute));
    gnome_keyring_attribute_list_append_string(attributes,
	    "name",
	    name);
    gnome_keyring_attribute_list_append_string(attributes,
	    "magic",
	    APPLICATION_NAME);
    
    result = gnome_keyring_item_create_sync(NULL,
	    GNOME_KEYRING_ITEM_GENERIC_SECRET,
	    name,
	    attributes,
	    password,
	    TRUE,
	    &item_id);
    gnome_keyring_attribute_list_free(attributes);
    
    return (result == GNOME_KEYRING_RESULT_OK);
}
@


1.2
log
@- use devel/gettext MODULES
- fix RCS id
- it is GNOME, not Gnome
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.1.1.1
log
@import gnome-keyring-query

gnome-keyring-query has the capability to store and retrieve simple
name/passphrase pairs in the default keyring. Unlike applications like
Nautilus and Evolution, no additional fields are stored, with the
exception of a 'magic' field to distinguish keys created by
gnome-keyring-query from those created by other applications.

'yeah!' ajacoutot@@
@
text
@@
