head	1.8;
access;
symbols
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	ajacoutot_20080922:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2010.09.30.10.21.57;	author ajacoutot;	state dead;
branches;
next	1.7;

1.7
date	2009.11.09.09.56.46;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.15.11.02.30;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2009.08.20.14.14.12;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.16.14.41.03;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.25.10.33.57;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.14.16.18.00;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.22.13.50.29;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.22.13.50.29;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Hmm, not sure what happened here, I did cvs rm...
@
text
@$OpenBSD: patch-src_cheese-webcam_c,v 1.7 2009/11/09 09:56:46 jasper Exp $

Unbreak cheese on OpenBSD with uvideo(4).

--- src/cheese-webcam.c.orig	Mon Nov  9 10:45:12 2009
+++ src/cheese-webcam.c	Mon Nov  9 10:53:12 2009
@@@@ -31,13 +31,19 @@@@
 #include <gst/gst.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <X11/Xlib.h>
+#ifndef __OpenBSD__
 #include <libhal.h>
+#endif /* !__OpenBSD__ */
 
 /* for ioctl query */
 #include <fcntl.h>
 #include <unistd.h>
 #include <sys/ioctl.h>
+#ifdef __OpenBSD__
+#include <sys/videoio.h>
+#else
 #include <linux/videodev.h>
+#endif /* __OpenBSD__ */
 
 #include "cheese-webcam.h"
 
@@@@ -276,11 +282,117 @@@@ cheese_webcam_bus_message_cb (GstBus *bus, GstMessage 
   }
 }
 
+#ifdef __OpenBSD__
 static void
 cheese_webcam_get_video_devices_from_hal (CheeseWebcam *webcam)
 {
   CheeseWebcamPrivate *priv = CHEESE_WEBCAM_GET_PRIVATE (webcam);
 
+  int            i, fd, ok, max_devs = 20;
+  struct dev_info {
+    int   node;
+    char  *pname;
+  }dev_list[max_devs];
+
+  priv->num_webcam_devices = 0;
+
+  g_print ("Probing devices with HAL...\n");
+
+  for (i = 0; i < max_devs; i++)
+   {
+    char                   *device;
+    struct stat s;
+    char                   *gstreamer_src, *product_name;
+    struct v4l2_capability  v2cap;
+
+    dev_list[i].node = -1;
+    device = g_strdup_printf("%s%d", "/dev/video", i);
+    if (lstat(device, &s) != 0)
+      continue;
+
+    if ((fd = open (device, O_RDONLY | O_NONBLOCK)) < 0)
+    {
+      g_warning ("Failed to open %s: %s", device, strerror (errno));
+      free (device);
+      continue;
+    }
+    ok = ioctl (fd, VIDIOC_QUERYCAP, &v2cap);
+    if (ok < 0)
+    {
+      g_warning ("Failed to query the capture capability of %s: %s", device, strerror (errno));
+      free (device);
+      continue;
+    }
+    else
+    {
+      guint cap = v2cap.capabilities;
+      g_print ("Detected v4l2 device: %s\n", v2cap.card);
+      g_print ("Driver: %s, version: %d\n", v2cap.driver, v2cap.version);
+
+      /* g_print ("Bus info: %s\n", v2cap.bus_info); */ /* Doesn't seem anything useful */
+      g_print ("Capabilities: 0x%08X\n", v2cap.capabilities);
+      if (!(cap & V4L2_CAP_VIDEO_CAPTURE))
+      {
+        g_print ("Device %s seems to not have the capture capability, (radio tuner?)\n"
+                 "Removing it from device list.\n", device);
+        free (device);
+        close (fd);
+        continue;
+      }
+      product_name  = (char *) v2cap.card;
+    }
+
+    g_print ("\n");
+
+    dev_list[i].node = i;
+    dev_list[i].pname = product_name;
+    priv->num_webcam_devices++;
+
+    free (device);
+    if (fd >= 0)
+      close (fd);
+  }
+
+  /* Initialize webcam structures */
+  priv->webcam_devices = g_new0 (CheeseWebcamDevice, priv->num_webcam_devices);
+  priv->num_webcam_devices = 0;
+
+  for (i = 0; i < max_devs; i++)
+  {
+    char *device;
+    if (dev_list[i].node < 0)
+      continue;
+    device = g_strdup_printf("%s%d", "/dev/video", i);
+    priv->webcam_devices[priv->num_webcam_devices].hal_udi           = g_strdup (device);
+    priv->webcam_devices[priv->num_webcam_devices].video_device      = g_strdup (device);
+    priv->webcam_devices[priv->num_webcam_devices].gstreamer_src     = g_strdup ("v4l2src");
+    priv->webcam_devices[priv->num_webcam_devices].product_name      = g_strdup (dev_list[i].pname);
+    priv->webcam_devices[priv->num_webcam_devices].num_video_formats = 0;
+    priv->webcam_devices[priv->num_webcam_devices].video_formats     =
+      g_array_new (FALSE, FALSE, sizeof (CheeseVideoFormat));
+    priv->webcam_devices[priv->num_webcam_devices].supported_resolutions =
+      g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
+    priv->num_webcam_devices++;
+
+  }
+
+  if (priv->num_webcam_devices == 0)
+  {
+    /* Create a fake device so that resolution changing stil works even if the
+     * computer doesn't have a webcam. */
+    priv->webcam_devices = g_new0 (CheeseWebcamDevice, 1);
+    priv->webcam_devices[0].num_video_formats = 0;
+    priv->webcam_devices[0].video_formats     =
+      g_array_new (FALSE, FALSE, sizeof (CheeseVideoFormat));
+    priv->webcam_devices[0].hal_udi = g_strdup ("cheese_fake_videodevice");
+  }
+}
+#else
+static void
+cheese_webcam_get_video_devices_from_hal (CheeseWebcam *webcam)
+{
+  CheeseWebcamPrivate *priv = CHEESE_WEBCAM_GET_PRIVATE (webcam);
+
   int            i, fd, ok;
   int            num_udis = 0;
   char         **udis;
@@@@ -470,6 +582,7 @@@@ fallback:
     priv->webcam_devices[0].hal_udi = g_strdup ("cheese_fake_videodevice");
   }
 }
+#endif /* __OpenBSD__ */
 
 static void
 cheese_webcam_get_supported_framerates (CheeseVideoFormat *video_format, GstStructure *structure)
@@@@ -712,7 +825,8 @@@@ cheese_webcam_get_webcam_device_data (CheeseWebcam    
     if ((pipeline != NULL) && (err == NULL))
     {
       /* Start the pipeline and wait for max. 10 seconds for it to start up */
-      gst_element_set_state (pipeline, GST_STATE_PLAYING);
+      /* XXX Disable this to make it startup instantly */
+      /* gst_element_set_state (pipeline, GST_STATE_PLAYING); */
       ret = gst_element_get_state (pipeline, NULL, NULL, 10 * GST_SECOND);
 
       /* Check if any error messages were posted on the bus */
@


1.7
log
@- tweak this patch a bit, no function change.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_cheese-webcam_c,v 1.6 2009/10/15 11:02:30 ajacoutot Exp $
@


1.6
log
@Major update to cheese-2.28.0.1.
@
text
@d1 7
a7 4
$OpenBSD: patch-src_cheese-webcam_c,v 1.5 2009/08/20 14:14:12 robert Exp $
--- src/cheese-webcam.c.orig	Fri Sep 18 20:45:08 2009
+++ src/cheese-webcam.c	Thu Oct 15 12:46:40 2009
@@@@ -31,13 +31,12 @@@@
d11 3
a13 1
-#include <libhal.h>
d19 1
a19 1
-#include <linux/videodev.h>
d21 3
d27 7
a33 1
@@@@ -281,141 +280,40 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
a36 5
-  int            i, fd, ok;
-  int            num_udis = 0;
-  char         **udis;
-  DBusError      error;
-  LibHalContext *hal_ctx;
d42 5
a46 47
 
   priv->num_webcam_devices = 0;
 
   g_print ("Probing devices with HAL...\n");
 
-  dbus_error_init (&error);
-  hal_ctx = libhal_ctx_new ();
-  if (hal_ctx == NULL)
-  {
-    g_warning ("Could not create libhal context");
-    dbus_error_free (&error);
-    goto fallback;
-  }
-
-  if (!libhal_ctx_set_dbus_connection (hal_ctx, dbus_bus_get (DBUS_BUS_SYSTEM, &error)))
-  {
-    g_warning ("libhal_ctx_set_dbus_connection: %s: %s", error.name, error.message);
-    dbus_error_free (&error);
-    goto fallback;
-  }
-
-  if (!libhal_ctx_init (hal_ctx, &error))
-  {
-    if (dbus_error_is_set (&error))
-    {
-      g_warning ("libhal_ctx_init: %s: %s", error.name, error.message);
-      dbus_error_free (&error);
-    }
-    g_warning ("Could not initialise connection to hald.\n"
-               "Normally this means the HAL daemon (hald) is not running or not ready");
-    goto fallback;
-  }
-
-  udis = libhal_find_device_by_capability (hal_ctx, "video4linux", &num_udis, &error);
-
-  if (dbus_error_is_set (&error))
-  {
-    g_warning ("libhal_find_device_by_capability: %s: %s", error.name, error.message);
-    dbus_error_free (&error);
-    goto fallback;
-  }
-
-  /* Initialize webcam structures */
-  priv->webcam_devices = g_new0 (CheeseWebcamDevice, num_udis);
-
-  for (i = 0; i < num_udis; i++)
-  {
d49 1
a49 4
     char                   *device;
-    char                   *parent_udi = NULL;
-    char                   *subsystem  = NULL;
     char                   *gstreamer_src, *product_name;
d51 3
a53 45
     struct v4l2_capability  v2cap;
-    struct video_capability v1cap;
-    gint                    vendor_id     = 0;
-    gint                    product_id    = 0;
-    gchar                  *property_name = NULL;
 
-    parent_udi = libhal_device_get_property_string (hal_ctx, udis[i], "info.parent", &error);
-    if (dbus_error_is_set (&error))
-    {
-      g_warning ("error getting parent for %s: %s: %s", udis[i], error.name, error.message);
-      dbus_error_free (&error);
-    }
-
-    if (parent_udi != NULL)
-    {
-      subsystem = libhal_device_get_property_string (hal_ctx, parent_udi, "info.subsystem", NULL);
-      if (subsystem == NULL) continue;
-      property_name = g_strjoin (".", subsystem, "vendor_id", NULL);
-      vendor_id     = libhal_device_get_property_int (hal_ctx, parent_udi, property_name, &error);
-      if (dbus_error_is_set (&error))
-      {
-        g_warning ("error getting vendor id: %s: %s", error.name, error.message);
-        dbus_error_free (&error);
-      }
-      g_free (property_name);
-
-      property_name = g_strjoin (".", subsystem, "product_id", NULL);
-      product_id    = libhal_device_get_property_int (hal_ctx, parent_udi, property_name, &error);
-      if (dbus_error_is_set (&error))
-      {
-        g_warning ("error getting product id: %s: %s", error.name, error.message);
-        dbus_error_free (&error);
-      }
-      g_free (property_name);
-      libhal_free_string (subsystem);
-      libhal_free_string (parent_udi);
-    }
-
-    g_print ("Found device %04x:%04x, getting capabilities...\n", vendor_id, product_id);
-
-    device = libhal_device_get_property_string (hal_ctx, udis[i], "video4linux.device", &error);
-    if (dbus_error_is_set (&error))
-    {
-      g_warning ("error getting V4L device for %s: %s: %s", udis[i], error.name, error.message);
-      dbus_error_free (&error);
d57 5
a61 16
       continue;
-    }
 
-    /* vbi devices support capture capability too, but cannot be used,
-     * so detect them by device name */
-    if (strstr (device, "vbi"))
-    {
-      g_print ("Skipping vbi device: %s\n", device);
-      libhal_free_string (device);
-      continue;
-    }
-
     if ((fd = open (device, O_RDONLY | O_NONBLOCK)) < 0)
     {
       g_warning ("Failed to open %s: %s", device, strerror (errno));
-      libhal_free_string (device);
d63 5
a67 18
       continue;
     }
     ok = ioctl (fd, VIDIOC_QUERYCAP, &v2cap);
     if (ok < 0)
     {
-      ok = ioctl (fd, VIDIOCGCAP, &v1cap);
-      if (ok < 0)
-      {
-        g_warning ("Error while probing v4l capabilities for %s: %s",
-                   device, strerror (errno));
-        libhal_free_string (device);
-        close (fd);
-        continue;
-      }
-      g_print ("Detected v4l device: %s\n", v1cap.name);
-      g_print ("Device type: %d\n", v1cap.type);
-      gstreamer_src = "v4lsrc";
-      product_name  = v1cap.name;
d71 13
a83 8
     }
     else
     {
@@@@ -429,20 +327,38 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
       {
         g_print ("Device %s seems to not have the capture capability, (radio tuner?)\n"
                  "Removing it from device list.\n", device);
-        libhal_free_string (device);
d85 8
a92 10
         close (fd);
         continue;
       }
-      gstreamer_src = "v4l2src";
       product_name  = (char *) v2cap.card;
     }
 
     g_print ("\n");
 
-    priv->webcam_devices[priv->num_webcam_devices].hal_udi           = g_strdup (udis[i]);
d113 1
a113 3
     priv->webcam_devices[priv->num_webcam_devices].video_device      = g_strdup (device);
-    priv->webcam_devices[priv->num_webcam_devices].gstreamer_src     = g_strdup (gstreamer_src);
-    priv->webcam_devices[priv->num_webcam_devices].product_name      = g_strdup (product_name);
d116 31
a146 9
     priv->webcam_devices[priv->num_webcam_devices].num_video_formats = 0;
     priv->webcam_devices[priv->num_webcam_devices].video_formats     =
       g_array_new (FALSE, FALSE, sizeof (CheeseVideoFormat));
@@@@ -450,20 +366,13 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
       g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
     priv->num_webcam_devices++;
 
-    libhal_free_string (device);
-    close (fd);
d148 2
a149 1
-  libhal_free_string_array (udis);
d151 3
a153 14
   if (priv->num_webcam_devices == 0)
   {
     /* Create a fake device so that resolution changing stil works even if the
      * computer doesn't have a webcam. */
-fallback:
-    if (num_udis == 0)
-    {
-      priv->webcam_devices = g_new0 (CheeseWebcamDevice, 1);
-    }
+    priv->webcam_devices = g_new0 (CheeseWebcamDevice, 1);
     priv->webcam_devices[0].num_video_formats = 0;
     priv->webcam_devices[0].video_formats     =
       g_array_new (FALSE, FALSE, sizeof (CheeseVideoFormat));
@@@@ -712,7 +621,8 @@@@ cheese_webcam_get_webcam_device_data (CheeseWebcam    
@


1.5
log
@Add an ugly XXX hack to make it start up faster.
Discussec with antoine@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_cheese-webcam_c,v 1.4 2009/06/16 14:41:03 ajacoutot Exp $
--- src/cheese-webcam.c.orig	Mon Jan 12 15:55:26 2009
+++ src/cheese-webcam.c	Thu Aug 20 16:12:04 2009
@@@@ -32,13 +32,12 @@@@
d18 2
a19 2
 #include "cheese-flash.h"
@@@@ -249,138 +248,38 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
d36 2
a37 2
-  g_print ("Probing devices with HAL...\n");
-
d41 2
a42 3
+  for (i = 0; i < max_devs; i++)
   {
-    g_error ("error: libhal_ctx_new");
d49 1
a49 1
-    g_error ("error: libhal_ctx_set_dbus_connection: %s: %s", error.name, error.message);
d58 1
a58 1
-      g_error ("error: libhal_ctx_init: %s: %s\n", error.name, error.message);
d61 2
a62 2
-    g_error ("Could not initialise connection to hald.\n"
-             "Normally this means the HAL daemon (hald) is not running or not ready");
d70 1
a70 1
-    g_error ("error: libhal_find_device_by_capability: %s: %s\n", error.name, error.message);
d80 2
d84 1
a84 1
-    char                   *subsystem = NULL;
d89 3
a91 3
-    gint vendor_id = 0;
-    gint product_id = 0;
-    gchar *property_name = NULL;
d96 1
a96 1
-      g_warning ("error getting parent for %s: %s: %s\n", udis[i], error.name, error.message);
d100 2
a101 1
-    if (parent_udi != NULL) {
d105 4
a108 3
-      vendor_id = libhal_device_get_property_int (hal_ctx, parent_udi, property_name , &error);
-      if (dbus_error_is_set (&error)) {
-        g_warning ("error getting vendor id: %s: %s\n", error.name, error.message);
d114 4
a117 3
-      product_id = libhal_device_get_property_int (hal_ctx, parent_udi, property_name, &error);
-      if (dbus_error_is_set (&error)) {
-        g_warning ("error getting product id: %s: %s\n", error.name, error.message);
d130 1
a130 1
-      g_error ("error geting device for %s: %s: %s\n", udis[i], error.name, error.message);
d149 1
a149 1
       g_error ("Failed to open %s: %s\n", device, strerror (errno));
d160 2
a161 2
-        g_error ("Error while probing v4l capabilities for %s: %s\n",
-                 device, strerror (errno));
d176 1
a176 7
@@@@ -388,46 +287,56 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
       g_print ("Detected v4l2 device: %s\n", v2cap.card);
       g_print ("Driver: %s, version: %d\n", v2cap.driver, v2cap.version);
       /* g_print ("Bus info: %s\n", v2cap.bus_info); */ /* Doesn't seem anything useful */
-     g_print ("Capabilities: 0x%08X\n", v2cap.capabilities);
+      g_print ("Capabilities: 0x%08X\n", v2cap.capabilities);
       if (!(cap & V4L2_CAP_VIDEO_CAPTURE))
d220 1
a220 1
     priv->webcam_devices[priv->num_webcam_devices].supported_resolutions =
d223 1
a223 1
-
d242 1
a242 9
@@@@ -435,6 +344,7 @@@@ fallback:
   }
 }
 
+
 static void
 cheese_webcam_get_supported_framerates (CheeseVideoFormat *video_format, GstStructure *structure)
 {
@@@@ -671,9 +581,9 @@@@ cheese_webcam_get_webcam_device_data (CheeseWebcam    
d250 1
a250 1
-
a251 2
       bus = gst_element_get_bus (pipeline);
       msg = gst_bus_poll (bus, GST_MESSAGE_ERROR, 0);
@


1.4
log
@Unbreak.
Courtesy of OpenSolaris.
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/cheese-webcam.c	Tue Jun 16 16:31:01 2009
d172 1
a172 1
@@@@ -388,52 +287,63 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
d244 1
a244 1
     priv->webcam_devices[0].hal_udi = g_strdup ("cheese_fake_videodevice");
d247 1
a248 1
 
d251 13
@


1.3
log
@- bugfix update to cheese-2.24.2
@
text
@d1 4
a4 4
$OpenBSD: patch-src_cheese-webcam_c,v 1.2 2008/11/14 16:18:00 ajacoutot Exp $
--- src/cheese-webcam.c.orig	Tue Nov 25 00:03:19 2008
+++ src/cheese-webcam.c	Tue Nov 25 11:27:08 2008
@@@@ -32,13 +32,25 @@@@
d8 1
a8 11
+#ifndef __OpenBSD__ // no HAL under OpenBSD
 #include <libhal.h>
+#else
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+#if defined(__NetBSD__) || defined(__OpenBSD__)
+#include <sys/types.h>
+#include <sys/videoio.h>
+#endif
+#endif
d14 2
a15 3
+#ifdef __linux__
 #include <linux/videodev.h>
+#endif
d19 209
a227 1
@@@@ -244,6 +256,7 @@@@ cheese_webcam_bus_message_cb (GstBus *bus, GstMessage 
d229 1
a229 1
 }
d231 13
a243 5
+#ifndef __OpenBSD__ // no HAL under OpenBSD
 static void
 cheese_webcam_get_video_devices_from_hal (CheeseWebcam *webcam)
 {
@@@@ -434,7 +447,55 @@@@ fallback:
d247 1
a247 26
+#else // __OpenBSD__
+static void
+cheese_webcam_get_video_devices_from_probe (CheeseWebcam *webcam)
+{
+  CheeseWebcamPrivate* priv = CHEESE_WEBCAM_GET_PRIVATE (webcam);
+  struct v4l2_capability caps;
+  gchar videodev[] = "/dev/video?";
+  guint16 cammask = 0;
+  int i, ncams = 0, fd, ret, cur = 0;
+ 
+  for (i = 0; i < 9; i++)
+  {
+    videodev[strlen(videodev) - 1] = '0' + i;
+    fd = open(videodev, O_RDONLY);
+    if (fd == -1)
+      continue;
+    ret = ioctl(fd, VIDIOC_QUERYCAP, &caps);
+    close(fd);
+    if (ret)
+    {
+      continue;
+    }
+    g_message("Found video device: %s\n", caps.card);
+    cammask |= (1 << i);
+    ++ncams;
+  }
a248 22
+  priv->num_webcam_devices = ncams;
+  if (ncams == 0)
+    return;
+  priv->webcam_devices = g_new0 (CheeseWebcamDevice, ncams);
+  for (i = 0; i < ncams; i++)
+  {
+    priv->webcam_devices[i].num_video_formats = 0;
+    priv->webcam_devices[i].video_formats = g_array_new (FALSE, FALSE, sizeof (CheeseVideoFormat));
+  }
+
+  for (i = 0; i < 9; i++)
+  {
+    if (cammask & (1 << i))
+    {
+      videodev[strlen(videodev) - 1] = '0' + i;
+      priv->webcam_devices[i].video_device = g_strdup (videodev);
+      ++cur;
+    }
+  }
+}
+#endif /* __OpenBSD__ */
+
a250 14
 {
@@@@ -739,7 +800,11 @@@@ cheese_webcam_detect_webcam_devices (CheeseWebcam *web
 
   int i;
 
-  cheese_webcam_get_video_devices_from_hal (webcam);
+#ifndef __OpenBSD__ // no HAL under OpenBSD
+   cheese_webcam_get_video_devices_from_hal (webcam);
+#else
+  cheese_webcam_get_video_devices_from_probe (webcam);
+#endif
 
   g_print ("Probing supported video formats...\n");
   for (i = 0; i < priv->num_webcam_devices; i++)
@


1.2
log
@- update to cheese-2.24.1

note that until gstreamer v4l2 support is fixed, this port stays not
functionnal (robert? ;-))
@
text
@d1 3
a3 3
$OpenBSD: patch-src_cheese-webcam_c,v 1.1.1.1 2008/09/22 13:50:29 ajacoutot Exp $
--- src/cheese-webcam.c.orig	Mon Oct 20 18:01:47 2008
+++ src/cheese-webcam.c	Fri Nov 14 17:08:41 2008
d38 1
a38 1
@@@@ -394,7 +407,55 @@@@ fallback:
d94 1
a94 1
@@@@ -698,7 +759,11 @@@@ cheese_webcam_detect_webcam_devices (CheeseWebcam *web
d104 2
a106 2
   {
     cheese_webcam_get_webcam_device_data (webcam, &(priv->webcam_devices[i]));
@


1.1
log
@Initial revision
@
text
@d1 5
a5 4
$OpenBSD$
--- src/cheese-webcam.c.orig	Sun Jun 29 18:17:43 2008
+++ src/cheese-webcam.c	Mon Sep  8 12:23:55 2008
@@@@ -31,8 +31,20 @@@@
a7 2
 #include <X11/extensions/xf86vmode.h>
+
d20 8
a27 1
+
d29 2
a30 3
 
 G_DEFINE_TYPE (CheeseWebcam, cheese_webcam, G_TYPE_OBJECT)
@@@@ -233,7 +245,7 @@@@ cheese_webcam_bus_message_cb (GstBus *bus, GstMessage 
a33 1
-
d38 2
a39 1
@@@@ -307,7 +319,55 @@@@ cheese_webcam_get_video_devices_from_hal (CheeseWebcam
a40 1
   libhal_free_string_array (udis);
d51 1
a51 1
 
d68 1
a68 1
+
d94 2
a95 2
@@@@ -549,7 +609,11 @@@@ cheese_webcam_detect_webcam_devices (CheeseWebcam *web
   CheeseWebcamPrivate* priv = CHEESE_WEBCAM_GET_PRIVATE (webcam);
d98 1
d100 1
a100 1
   cheese_webcam_get_video_devices_from_hal (webcam);
d104 1
a104 1
   for (i = 0; i < priv->num_webcam_devices; i++) 
d106 1
a106 1
     cheese_webcam_get_webcam_device_data (&(priv->webcam_devices[i]));
@


1.1.1.1
log
@Import cheese-2.22.3

Cheese uses your webcam to take photos and videos, applies fancy special
effects and lets you share the fun with others.  Under the hood, Cheese
uses GStreamer to apply fancy effects to photos and videos.  With Cheese
it is easy to take photos of you, your friends, pets or whatever you
want and share them with others.

Add a patch from NetBSD to fix v4l2 support.

BEWARE!
This port is not functionnal right now, an update to
gstreamer-plugins-good is needed first
@
text
@@
