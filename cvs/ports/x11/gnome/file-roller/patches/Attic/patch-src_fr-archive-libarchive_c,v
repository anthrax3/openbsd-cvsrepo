head	1.3;
access;
symbols
	OPENBSD_5_3:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.04.04.11.12.11;	author jasper;	state dead;
branches;
next	1.2;
commitid	pxCQGnNMttHgJd1w;

1.2
date	2015.04.03.12.31.10;	author jasper;	state Exp;
branches;
next	1.1;
commitid	nKIfzYlFqt7jXcdW;

1.1
date	2013.07.09.06.37.31;	author jasper;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.07.09.06.37.31;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove now-unneeded patch since libarchive has been updated
@
text
@$OpenBSD: patch-src_fr-archive-libarchive_c,v 1.2 2015/04/03 12:31:10 jasper Exp $

XXX: Make lrzip/lzop support conditional until libarchive is updated.

--- src/fr-archive-libarchive.c.orig	Sun Feb 15 11:49:09 2015
+++ src/fr-archive-libarchive.c	Fri Apr  3 14:29:20 2015
@@@@ -78,10 +78,14 @@@@ const char *libarchiver_mime_types[] = {
 		"application/x-cpio",
 		"application/x-deb",
 		"application/x-lha",
+#ifdef ARCHIVE_FILTER_LRZIP
 		"application/x-lrzip-compressed-tar",
+#endif
 		"application/x-lzip-compressed-tar",
 		"application/x-lzma-compressed-tar",
+#ifndef ARCHIVE_FILTER_LZOP
 		"application/x-lzop-compressed-tar",
+#endif
 		"application/x-rar",
 		"application/x-rpm",
 		"application/x-tar",
@@@@ -1083,10 +1087,12 @@@@ _archive_write_set_format_from_context (struct archive
 		archive_write_set_format_pax_restricted (a);
 		archive_filter = ARCHIVE_FILTER_GZIP;
 	}
+#ifdef ARCHIVE_FILTER_LRZIP
 	else if (_g_str_equal (mime_type, "application/x-lrzip-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
 		archive_filter = ARCHIVE_FILTER_LRZIP;
 	}
+#endif
 	else if (_g_str_equal (mime_type, "application/x-lzip-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
 		archive_filter = ARCHIVE_FILTER_LZIP;
@@@@ -1095,10 +1101,12 @@@@ _archive_write_set_format_from_context (struct archive
 		archive_write_set_format_pax_restricted (a);
 		archive_filter = ARCHIVE_FILTER_LZMA;
 	}
+#ifdef ARCHIVE_FILTER_LZOP
 	else if (_g_str_equal (mime_type, "application/x-lzop-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
 		archive_filter = ARCHIVE_FILTER_LZOP;
 	}
+#endif
 	else if (_g_str_equal (mime_type, "application/x-xz-compressed-tar")) {
 		archive_write_set_format_pax_restricted (a);
 		archive_filter = ARCHIVE_FILTER_XZ;
@@@@ -1142,18 +1150,22 @@@@ _archive_write_set_format_from_context (struct archive
 		case ARCHIVE_FILTER_GZIP:
 			archive_write_add_filter_gzip (a);
 			break;
+#ifdef ARCHIVE_FILTER_LRZIP
 		case ARCHIVE_FILTER_LRZIP:
 			archive_write_add_filter_lrzip (a);
 			break;
+#endif
 		case ARCHIVE_FILTER_LZIP:
 			archive_write_add_filter_lzip (a);
 			break;
 		case ARCHIVE_FILTER_LZMA:
 			archive_write_add_filter_lzma (a);
 			break;
+#ifdef ARCHIVE_FILTER_LZOP
 		case ARCHIVE_FILTER_LZOP:
 			archive_write_add_filter_lzop (a);
 			break;
+#endif
 		case ARCHIVE_FILTER_XZ:
 			archive_write_add_filter_xz (a);
 			break;
@


1.2
log
@- update to file-roller-3.16.0
- remove lrzip/lzop support pending a libarchive update
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-src_fr-archive-libarchive_c was initially added on branch OPENBSD_5_3.
@
text
@d1 70
@


1.1.2.1
log
@Security fix for CVE-2013-4668, File Roller path sanitization errors
@
text
@a0 60
$OpenBSD$

Security fix for CVE-2013-4668,
File Roller path sanitization errors

http://www.ocert.org/advisories/ocert-2013-001.html

--- src/fr-archive-libarchive.c.orig	Sat Oct 13 13:25:15 2012
+++ src/fr-archive-libarchive.c	Tue Jul  9 08:33:32 2013
@@@@ -504,6 +504,7 @@@@ extract_archive_thread (GSimpleAsyncResult *result,
 	while ((r = archive_read_next_header (a, &entry)) == ARCHIVE_OK) {
 		const char    *pathname;
 		char          *fullpath;
+		const char    *relative_path;
 		GFile         *file;
 		GFile         *parent;
 		GOutputStream *ostream;
@@@@ -523,7 +524,12 @@@@ extract_archive_thread (GSimpleAsyncResult *result,
 		}
 
 		fullpath = (*pathname == '/') ? g_strdup (pathname) : g_strconcat ("/", pathname, NULL);
-		file = g_file_get_child (extract_data->destination, _g_path_get_relative_basename (fullpath, extract_data->base_dir, extract_data->junk_paths));
+		relative_path = _g_path_get_relative_basename_safe (fullpath, extract_data->base_dir, extract_data->junk_paths);
+		if (relative_path == NULL) {
+			archive_read_data_skip (a);
+			continue;
+		}
+		file = g_file_get_child (extract_data->destination, relative_path);
 
 		/* honor the skip_older and overwrite options */
 
@@@@ -607,14 +613,22 @@@@ extract_archive_thread (GSimpleAsyncResult *result,
 
 			linkname = archive_entry_hardlink (entry);
 			if (linkname != NULL) {
-				char  *link_fullpath;
-				GFile *link_file;
-				char  *oldname;
-				char  *newname;
-				int    r;
+				char        *link_fullpath;
+				const char  *relative_path;
+				GFile       *link_file;
+				char        *oldname;
+				char        *newname;
+				int          r;
 
 				link_fullpath = (*linkname == '/') ? g_strdup (linkname) : g_strconcat ("/", linkname, NULL);
-				link_file = g_file_get_child (extract_data->destination, _g_path_get_relative_basename (link_fullpath, extract_data->base_dir, extract_data->junk_paths));
+				relative_path = _g_path_get_relative_basename_safe (link_fullpath, extract_data->base_dir, extract_data->junk_paths);
+				if (relative_path == NULL) {
+					g_free (link_fullpath);
+					archive_read_data_skip (a);
+					continue;
+				}
+
+				link_file = g_file_get_child (extract_data->destination, relative_path);
 				oldname = g_file_get_path (link_file);
 				newname = g_file_get_path (file);
 
@

