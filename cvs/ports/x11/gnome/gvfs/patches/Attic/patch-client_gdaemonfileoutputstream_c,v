head	1.6;
access;
symbols
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2013.04.16.13.59.24;	author ajacoutot;	state dead;
branches;
next	1.5;

1.5
date	2013.04.05.14.07.31;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.18.11.09.15;	author ajacoutot;	state dead;
branches;
next	1.3;

1.3
date	2011.07.02.15.46.17;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.15.06.36.44;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.24.16.04.21;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to gvfs-1.16.1.
@
text
@$OpenBSD: patch-client_gdaemonfileoutputstream_c,v 1.5 2013/04/05 14:07:31 ajacoutot Exp $

From 6141549ed4660e888fb6438434c789db47b6f665 Mon Sep 17 00:00:00 2001
From: Alexander Larsson <alexl@@redhat.com>
Date: Thu, 04 Apr 2013 17:08:02 +0000
Subject: channel: Unqueue cancelled requests

From e1be69f4bcec01c007016ae33dbb48514b09ba75 Mon Sep 17 00:00:00 2001
From: Alexander Larsson <alexl@@redhat.com>
Date: Thu, 04 Apr 2013 17:13:05 +0000
Subject: GVfsChannels: Verify that replies are for the right serial

--- client/gdaemonfileoutputstream.c.orig	Fri Apr  5 15:52:55 2013
+++ client/gdaemonfileoutputstream.c	Fri Apr  5 15:51:31 2013
@@@@ -316,6 +316,15 @@@@ error_is_cancel (GError *error)
 }
 
 static void
+unappend_request (GDaemonFileOutputStream *stream)
+{
+  g_assert (stream->output_buffer->len >= G_VFS_DAEMON_SOCKET_PROTOCOL_REQUEST_SIZE);
+  stream->seq_nr--;
+  g_string_truncate (stream->output_buffer,
+		     stream->output_buffer->len - G_VFS_DAEMON_SOCKET_PROTOCOL_REQUEST_SIZE);
+}
+
+static void
 append_request (GDaemonFileOutputStream *stream, guint32 command,
 		guint32 arg1, guint32 arg2, guint32 data_len, guint32 *seq_nr)
 {
@@@@ -499,6 +508,8 @@@@ iterate_write_state_machine (GDaemonFileOutputStream *
 	case WRITE_STATE_WROTE_COMMAND:
 	  if (io_op->io_cancelled)
 	    {
+	      if (!op->sent_cancel)
+		unappend_request (file);
 	      op->ret_val = -1;
 	      g_set_error_literal (&op->ret_error,
 				   G_IO_ERROR,
@@@@ -588,7 +599,8 @@@@ iterate_write_state_machine (GDaemonFileOutputStream *
 		g_string_truncate (file->input_buffer, 0);
 		return STATE_OP_DONE;
 	      }
-	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_WRITTEN)
+	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_WRITTEN &&
+		     reply.seq_nr == op->seq_nr)
 	      {
 		op->ret_val = reply.arg1;
 		g_string_truncate (file->input_buffer, 0);
@@@@ -674,6 +686,8 @@@@ iterate_close_state_machine (GDaemonFileOutputStream *
 	case CLOSE_STATE_WROTE_REQUEST:
 	  if (io_op->io_cancelled)
 	    {
+	      if (!op->sent_cancel)
+		unappend_request (file);
 	      op->ret_val = FALSE;
 	      g_set_error_literal (&op->ret_error,
 				   G_IO_ERROR,
@@@@ -744,7 +758,8 @@@@ iterate_close_state_machine (GDaemonFileOutputStream *
 		g_string_truncate (file->input_buffer, 0);
 		return STATE_OP_DONE;
 	      }
-	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_CLOSED)
+	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_CLOSED &&
+		     reply.seq_nr == op->seq_nr)
 	      {
 		op->ret_val = TRUE;
 		if (reply.arg2 > 0)
@@@@ -866,6 +881,8 @@@@ iterate_seek_state_machine (GDaemonFileOutputStream *f
 	case SEEK_STATE_WROTE_REQUEST:
 	  if (io_op->io_cancelled)
 	    {
+	      if (!op->sent_cancel)
+		unappend_request (file);
 	      op->ret_val = -1;
 	      g_set_error_literal (&op->ret_error,
 				   G_IO_ERROR,
@@@@ -936,7 +953,8 @@@@ iterate_seek_state_machine (GDaemonFileOutputStream *f
 		g_string_truncate (file->input_buffer, 0);
 		return STATE_OP_DONE;
 	      }
-	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_SEEK_POS)
+	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_SEEK_POS &&
+		     reply.seq_nr == op->seq_nr)
 	      {
 		op->ret_val = TRUE;
 		op->ret_offset = ((goffset)reply.arg2) << 32 | (goffset)reply.arg1;
@@@@ -1045,6 +1063,8 @@@@ iterate_query_state_machine (GDaemonFileOutputStream *
 	case QUERY_STATE_WROTE_REQUEST:
 	  if (io_op->io_cancelled)
 	    {
+	      if (!op->sent_cancel)
+		unappend_request (file);
 	      op->info = NULL;
 	      g_set_error_literal (&op->ret_error,
 				   G_IO_ERROR,
@@@@ -1116,7 +1136,8 @@@@ iterate_query_state_machine (GDaemonFileOutputStream *
 		g_string_truncate (file->input_buffer, 0);
 		return STATE_OP_DONE;
 	      }
-	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_INFO)
+	    else if (reply.type == G_VFS_DAEMON_SOCKET_PROTOCOL_REPLY_INFO &&
+		     reply.seq_nr == op->seq_nr)
 	      {
 		op->info = gvfs_file_info_demarshal (data, reply.arg2);
 		g_string_truncate (file->input_buffer, 0);
@


1.5
log
@Bring lots of fixes from upstream to fix several crashes.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Remove horrible uthreads hack.
@
text
@d1 1
a1 1
$OpenBSD: patch-client_gdaemonfileoutputstream_c,v 1.3 2011/07/02 15:46:17 ajacoutot Exp $
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=650883
d8 9
a16 5
--- client/gdaemonfileoutputstream.c.orig	Mon May 23 16:38:05 2011
+++ client/gdaemonfileoutputstream.c	Wed Jun 15 08:20:17 2011
@@@@ -297,6 +297,16 @@@@ g_daemon_file_output_stream_new (int fd,
 {
   GDaemonFileOutputStream *stream;
d18 8
a25 9
+/*
+ * Prevent EINTR caused by OpenBSD userland threads setting all file
+ * descriptors to non-blocking mode
+ */
+#ifdef __OpenBSD__
+  int flags = fcntl(fd, F_GETFL);
+  if (fcntl(fd, F_SETFL, flags & ~O_NONBLOCK) < 0)
+    g_warning ("Couldn't remove non-blocking I/O from fd %d", fd);
+#endif
d27 80
a106 3
   stream = g_object_new (G_TYPE_DAEMON_FILE_OUTPUT_STREAM, NULL);
 
   stream->command_stream = g_unix_output_stream_new (fd, FALSE);
@


1.3
log
@Typo.
@
text
@d1 1
a1 1
$OpenBSD: patch-client_gdaemonfileoutputstream_c,v 1.2 2011/06/15 06:36:44 ajacoutot Exp $
@


1.2
log
@Remove useless patch.
@
text
@d1 1
a1 1
$OpenBSD: patch-client_gdaemonfileoutputstream_c,v 1.1 2010/07/24 16:04:21 ajacoutot Exp $
d18 1
a18 1
+    g_warning ("Couldn't remove non-blocking I/O from fd %d, fd");
@


1.1
log
@Try to unfuck a bit glib2 functions with pthreads(3).
Remove the non-blocking flag from the fd passed to
g_daemon_file_input_stream_new(). This is needed because our userland
threads set the fd to non-blocking where g_input_stream_*() functions
are blocking operations.
This fixes the progress bar display and allows to write to remote
directories like ftp, sftp, webdav. Reading from these remote locations
is "somehow" working now too, but there is still something fishy when
copying directories.
You have been warned. However, it's much better than it was.
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 3
XXX Remove non-blocking flag from fd. This is needed because the
g_input_stream_*() functions are blocking but we compile with -pthread
which sets all fds to non-blocking. See pthreads(3).
d5 3
a7 3
--- client/gdaemonfileoutputstream.c.orig	Mon Oct 19 15:11:03 2009
+++ client/gdaemonfileoutputstream.c	Fri Jul 23 20:15:29 2010
@@@@ -297,6 +297,12 @@@@ g_daemon_file_output_stream_new (int fd,
d11 4
@

