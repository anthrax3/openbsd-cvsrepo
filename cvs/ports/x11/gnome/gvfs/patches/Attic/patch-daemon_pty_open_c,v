head	1.10;
access;
symbols
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2014.03.27.08.55.09;	author ajacoutot;	state dead;
branches;
next	1.9;

1.9
date	2014.01.17.13.12.15;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.15.13.30.39;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.11.17.27.44;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2012.09.27.13.03.01;	author ajacoutot;	state dead;
branches;
next	1.5;

1.5
date	2012.07.13.15.23.59;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.12.11.35.36;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.10.10.15.19;	author mpi;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.15.07.21.13;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2010.07.13.16.14.28;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to gvfs-1.20.0.
@
text
@$OpenBSD: patch-daemon_pty_open_c,v 1.9 2014/01/17 13:12:15 ajacoutot Exp $

From 9f5585c3d73e7013ad4e9b0e065e75646daf1bc6 Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Wed, 15 Jan 2014 13:26:22 +0000
Subject: sftp: force openpty(3) on BSD

--- daemon/pty_open.c.orig	Thu Nov  7 16:12:17 2013
+++ daemon/pty_open.c	Wed Jan 15 14:22:43 2014
@@@@ -78,6 +78,14 @@@@
 #undef HAVE_UNIX98_PTY
 #endif
 
+/*
+ * force openpty(3) on BSD
+ * https://bugzilla.gnome.org/show_bug.cgi?id=722001
+ */
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
+#undef HAVE_UNIX98_PTY
+#endif
+
 int _pty_set_size(int master, int columns, int rows);
 
 /* Solaris does not have the login_tty() function so implement locally. */
@


1.9
log
@Pushed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_pty_open_c,v 1.8 2014/01/15 13:30:39 ajacoutot Exp $
@


1.8
log
@Tweak patch to make it simpler.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_pty_open_c,v 1.7 2014/01/11 17:27:44 ajacoutot Exp $
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=722001
@


1.7
log
@Prefer the openpty(3) code path over grantpt(3) -- this fixes the
numerous SSH dialogs when mount an sftp share (known_hosts additions and
password auth).
@
text
@d1 1
a1 1
$OpenBSD$
d6 14
a19 4
+++ daemon/pty_open.c	Sat Jan 11 17:54:26 2014
@@@@ -72,7 +72,7 @@@@
 #include <glib.h>
 #include "pty_open.h"
d21 1
a21 5
-#if defined(HAVE_PTSNAME_R) || defined(HAVE_PTSNAME) || defined(TIOCGPTN)
+#if (defined(HAVE_PTSNAME_R) || defined(HAVE_PTSNAME) || defined(TIOCGPTN)) && !defined(HAVE_OPENPTY)
 #define HAVE_UNIX98_PTY
 #else
 #undef HAVE_UNIX98_PTY
@


1.6
log
@Update to gvfs-1.14.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_pty_open_c,v 1.5 2012/07/13 15:23:59 ajacoutot Exp $
d3 1
a3 4
From 2fec402d6523e4cf416d754f69d012dc67a58a2e Mon Sep 17 00:00:00 2001
From: Martin Pieuchot <mpi@@openbsd.org>
Date: Fri, 13 Jul 2012 14:51:39 +0000
Subject: daemon: Support allocating PTYs through openpty on BSD
d5 3
a7 3
--- daemon/pty_open.c.orig	Tue May 15 20:01:50 2012
+++ daemon/pty_open.c	Tue Jul 10 11:03:27 2012
@@@@ -72,6 +72,12 @@@@
d11 5
a15 156
+#if defined(HAVE_PTSNAME_R) || defined(HAVE_PTSNAME) || defined(TIOCGPTN)
+#define HAVE_UNIX98_PTY
+#else
+#undef HAVE_UNIX98_PTY
+#endif
+
 int _pty_set_size(int master, int columns, int rows);
 
 /* Solaris does not have the login_tty() function so implement locally. */
@@@@ -710,6 +716,8 @@@@ _pty_unlockpt(int fd)
 #endif
 }
 
+#if defined(HAVE_UNIX98_PTY)
+
 static int
 _pty_open_unix98(pid_t *child, guint flags, char **env_add,
 			   const char *command, char **argv,
@@@@ -746,6 +754,114 @@@@ _pty_open_unix98(pid_t *child, guint flags, char **env
 	return fd;
 }
 
+#elif defined(HAVE_OPENPTY)
+
+static int
+_pty_open_bsd(pid_t *child, const char *command, char **argv,
+	      int *stdin_fd, int *stdout_fd, int *stderr_fd)
+{
+	int master, slave;
+	char **args, *arg;
+	int stdin_pipe[2];
+	int stdout_pipe[2];
+	int stderr_pipe[2];
+	pid_t pid;
+	int i;
+
+	if (pipe(stdin_pipe))
+		goto bail_stdin;
+	if (pipe(stdout_pipe))
+		goto bail_stdout;
+	if (pipe(stderr_pipe))
+		goto bail_stderr;
+
+	if (openpty(&master, &slave, NULL, NULL, NULL) == -1)
+		return (-1);
+
+	switch(pid = fork()) {
+	case -1:
+		goto bail_fork;
+	case 0:
+		/*
+		 * Child
+		 */
+		close(master);
+		close(stdin_pipe[1]);
+		close(stdout_pipe[0]);
+		close(stderr_pipe[0]);
+
+		setsid();
+		if (ioctl(slave, TIOCSCTTY, (char *)NULL) == -1)
+			_exit(0);
+
+		/* Set up stdin/out/err */
+		dup2(stdin_pipe[0], STDIN_FILENO);
+		dup2(stdout_pipe[1], STDOUT_FILENO);
+		dup2(stderr_pipe[1], STDERR_FILENO);
+		close(stdin_pipe[0]);
+		close(stdout_pipe[1]);
+		close(stderr_pipe[1]);
+
+		/* Reset our signals -- our parent may have done any number of
+		 * weird things to them. */
+		_pty_reset_signal_handlers();
+
+		/* Outta here. */
+		if (argv != NULL) {
+			for (i = 0; (argv[i] != NULL); i++) ;
+			args = g_malloc0(sizeof(char*) * (i + 1));
+			for (i = 0; (argv[i] != NULL); i++) {
+				args[i] = g_strdup(argv[i]);
+			}
+			execvp(command, args);
+		} else {
+			arg = g_strdup(command);
+			execlp(command, arg, NULL);
+		}
+
+		/* Avoid calling any atexit() code. */
+		_exit(0);
+		g_assert_not_reached();
+	}
+
+	/*
+	 * Parent
+	 */
+
+	/* XXX Don't close the slave pty, it's now the control
+	 *     terminal of the child and ssh needs it to authenticate.
+	close(slave);
+	 */
+	close(stdin_pipe[0]);
+	close(stdout_pipe[1]);
+	close(stderr_pipe[1]);
+
+	*child = pid;
+	*stdin_fd = stdin_pipe[1];
+	*stdout_fd = stdout_pipe[0];
+	*stderr_fd = stderr_pipe[0];
+
+	return (master);
+
+ bail_fork:
+	close(stderr_pipe[0]);
+	close(stderr_pipe[1]);
+ bail_stderr:
+	close(stdout_pipe[0]);
+	close(stdout_pipe[1]);
+ bail_stdout:
+	close(stdin_pipe[0]);
+	close(stdin_pipe[1]);
+ bail_stdin:
+
+ 	*child = -1;
+ 	return -1;
+}
+
+#else
+#error Have neither UNIX98 PTY nor BSD openpty!
+#endif /* HAVE_UNIX98_PTY */
+
 /**
  * pty_open:
  * @@child: location to store the new process's ID
@@@@ -774,11 +890,17 @@@@ pty_open(pid_t *child, guint flags, char **env_add, 
 	 int *stdin_fd, int *stdout_fd, int *stderr_fd)
 {
 	int ret = -1;
-	if (ret == -1) {
-		ret = _pty_open_unix98(child, flags, env_add, command, 
-						 argv, directory, columns, rows,
-						 stdin_fd, stdout_fd, stderr_fd);
-	}
+
+#if defined(HAVE_UNIX98_PTY)
+	ret = _pty_open_unix98(child, flags, env_add, command, argv, directory,
+			       columns, rows, stdin_fd, stdout_fd, stderr_fd);
+#elif defined(HAVE_OPENPTY)
+	ret = _pty_open_bsd(child, command, argv,
+			    stdin_fd, stdout_fd, stderr_fd);
+#else
+#error Have neither UNIX98 PTY nor BSD openpty!
+#endif
+
 	return ret;
 }
 
@


1.5
log
@Committed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_pty_open_c,v 1.4 2012/07/12 11:35:36 ajacoutot Exp $
@


1.4
log
@Link to BZ.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_pty_open_c,v 1.3 2012/07/10 10:15:19 mpi Exp $
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=679790
@


1.3
log
@Make use of openpty(3) to allocate a pseudo-tty required for the ssh
authentication. This allow to mount sftp shares using passwords with
any application relying on gvfs. With a lot of help from nicm@@.

Packages already bumped but I failed again with cvs add.

Ok ajacoutot@@, jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 2
Use openpty(3) rather than the Unix98 function family to be able to
login using a password.
@


1.2
log
@Fix implicit declaration.
@
text
@d1 8
a8 13
$OpenBSD: patch-daemon_pty_open_c,v 1.1 2010/07/13 16:14:28 ajacoutot Exp $
--- daemon/pty_open.c.orig	Tue Jul 13 17:06:55 2010
+++ daemon/pty_open.c	Tue Jul 13 17:07:50 2010
@@@@ -66,9 +66,11 @@@@
 #ifdef HAVE_UTMP_H
 #include <utmp.h>
 #endif
+/* XXX HAVE_UTIL_H is not set by configure
 #ifdef HAVE_UTIL_H
+*/
 #include <util.h>
-#endif
+// #endif
d11 156
@


1.1
log
@Bugfix update to gvfs-1.6.3.
@
text
@d1 1
a1 1
$OpenBSD$
@

