head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.4
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.2
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5;
locks; strict;
comment	@# @;


1.15
date	2017.03.12.12.58.03;	author nigel;	state Exp;
branches;
next	1.14;
commitid	gLeVsKEybefzCnsn;

1.14
date	2017.03.11.00.22.27;	author ajacoutot;	state Exp;
branches;
next	1.13;
commitid	wTOKIz3zLsuh6oyz;

1.13
date	2017.03.03.13.01.26;	author ajacoutot;	state Exp;
branches;
next	1.12;
commitid	yUSOqvnIs3zvjqyw;

1.12
date	2016.04.26.08.25.04;	author ajacoutot;	state Exp;
branches;
next	1.11;
commitid	U2wyfq8sPYBn4Lxu;

1.11
date	2016.04.15.14.11.09;	author ajacoutot;	state Exp;
branches;
next	1.10;
commitid	Mbx3T92O3F2i3yTU;

1.10
date	2015.10.18.13.25.54;	author ajacoutot;	state Exp;
branches;
next	1.9;
commitid	hskL6TnJZ8GALNPe;

1.9
date	2014.04.15.13.15.19;	author ajacoutot;	state dead;
branches;
next	1.8;

1.8
date	2014.04.07.16.05.52;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2014.03.27.19.19.17;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.30.09.52.17;	author ajacoutot;	state dead;
branches;
next	1.5;

1.5
date	2013.01.11.19.20.46;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.29.15.59.21;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.27.16.29.34;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.10.12.34.35;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2012.10.03.06.40.50;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.15
log
@fix to allow building
Ok aja@@
@
text
@$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.14 2017/03/11 00:22:27 ajacoutot Exp $

REVERT - OpenBSD does not have a systemd implementation (we need ConsoleKit)
From 1ac67f522f5690c27023d98096ca817f12f7eb88 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@@redhat.com>
Date: Fri, 12 Jun 2015 13:28:01 -0400
Subject: drop consolekit support

REVERT - OpenBSD does not have a systemd implementation (we need ConsoleKit)
From 9be58c9ec9a3a411492a5182ac4b0d51fdc3a323 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@@redhat.com>
Date: Fri, 12 Jun 2015 13:48:52 -0400
Subject: require logind support

REVERT - OpenBSD does not have a systemd implementation (we need ConsoleKit)
From a9cacb929470eb82582396984c61d5b611bfeb1a Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@@redhat.com>
Date: Fri, 12 Jun 2015 14:33:40 -0400
Subject: session: drop session-type property

REVERT - OpenBSD does not have a systemd implementation (we need ConsoleKit)
From 6942fb9b16bab7173bbd295fb19a9770289dbe0e Mon Sep 17 00:00:00 2001
From: Tim Lunn <tim@@feathertop.org>
Date: Mon, 11 Apr 2016 23:18:10 +1000
Subject: gdm-session: set PAM_TTY when initialising pam

--- daemon/gdm-session-worker.c.orig	Fri Mar  3 20:32:37 2017
+++ daemon/gdm-session-worker.c	Sun Mar 12 12:37:19 2017
@@@@ -28,9 +28,11 @@@@
 #include <string.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#ifdef WITH_SYSTEMD
 #include <sys/ioctl.h>
 #include <sys/vt.h>
 #include <sys/kd.h>
+#endif
 #include <errno.h>
 #include <grp.h>
 #include <pwd.h>
@@@@ -49,7 +51,9 @@@@
 
 #include <X11/Xauth.h>
 
+#ifdef WITH_SYSTEMD
 #include <systemd/sd-daemon.h>
+#endif
 
 #ifdef ENABLE_SYSTEMD_JOURNAL
 #include <systemd/sd-journal.h>
@@@@ -131,6 +135,10 @@@@ struct GdmSessionWorkerPrivate
 
         int               exit_code;
 
+#ifdef WITH_CONSOLE_KIT
+        char             *session_cookie;
+#endif
+
         pam_handle_t     *pam_handle;
 
         GPid              child_pid;
@@@@ -145,6 +153,7 @@@@ struct GdmSessionWorkerPrivate
         char             *hostname;
         char             *username;
         char             *log_file;
+        char             *session_type;
         char             *session_id;
         uid_t             uid;
         gid_t             gid;
@@@@ -207,6 +216,204 @@@@ G_DEFINE_TYPE_WITH_CODE (GdmSessionWorker,
                          G_IMPLEMENT_INTERFACE (GDM_DBUS_TYPE_WORKER,
                                                 worker_interface_init))
 
+#ifdef WITH_CONSOLE_KIT
+static gboolean
+open_ck_session (GdmSessionWorker  *worker)
+{
+        GDBusConnection  *system_bus;
+        GVariantBuilder   builder;
+        GVariant         *parameters;
+        GVariant         *in_args;
+        struct passwd    *pwent;
+        GVariant         *reply;
+        GError           *error = NULL;
+        const char       *display_name;
+        const char       *display_device;
+        const char       *display_hostname;
+        const char       *session_type;
+        gint32            uid;
+
+        g_assert (worker->priv->session_cookie == NULL);
+
+        if (worker->priv->x11_display_name != NULL) {
+                display_name = worker->priv->x11_display_name;
+        } else {
+                display_name = "";
+        }
+        if (worker->priv->hostname != NULL) {
+                display_hostname = worker->priv->hostname;
+        } else {
+                display_hostname = "";
+        }
+        if (worker->priv->display_device != NULL) {
+                display_device = worker->priv->display_device;
+        } else {
+                display_device = "";
+        }
+
+        if (worker->priv->session_type != NULL) {
+                session_type = worker->priv->session_type;
+        } else {
+                session_type = "";
+        }
+
+        g_assert (worker->priv->username != NULL);
+
+        gdm_get_pwent_for_name (worker->priv->username, &pwent);
+        if (pwent == NULL) {
+                goto out;
+        }
+
+        uid = (gint32) pwent->pw_uid;
+
+        error = NULL;
+        system_bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
+
+        if (system_bus == NULL) {
+                g_warning ("Couldn't create connection to system bus: %s",
+                           error->message);
+
+                g_error_free (error);
+                goto out;
+        }
+
+        g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(sv)"));
+        g_variant_builder_add_parsed (&builder, "('unix-user', <%i>)", uid);
+        g_variant_builder_add_parsed (&builder, "('x11-display-device', <%s>)", display_device);
+        g_variant_builder_add_parsed (&builder, "('x11-display', <%s>)", display_name);
+        g_variant_builder_add_parsed (&builder, "('remote-host-name', <%s>)", display_hostname);
+        g_variant_builder_add_parsed (&builder, "('is-local', <%b>)", worker->priv->display_is_local);
+        g_variant_builder_add_parsed (&builder, "('session-type', <%s>)", session_type);
+
+        parameters = g_variant_builder_end (&builder);
+        in_args = g_variant_new_tuple (&parameters, 1);
+
+        reply = g_dbus_connection_call_sync (system_bus,
+                                             "org.freedesktop.ConsoleKit",
+                                             "/org/freedesktop/ConsoleKit/Manager",
+                                             "org.freedesktop.ConsoleKit.Manager",
+                                             "OpenSessionWithParameters",
+                                             in_args,
+                                             G_VARIANT_TYPE ("(s)"),
+                                             G_DBUS_CALL_FLAGS_NONE,
+                                             -1,
+                                             NULL,
+                                             &error);
+
+        if (! reply) {
+                g_warning ("%s\n", error->message);
+                g_clear_error (&error);
+                goto out;
+        }
+
+        g_variant_get (reply, "(s)", &worker->priv->session_cookie);
+
+        g_variant_unref (reply);
+
+out:
+        return worker->priv->session_cookie != NULL;
+}
+
+static void
+close_ck_session (GdmSessionWorker *worker)
+{
+        GDBusConnection  *system_bus;
+        GVariant         *reply;
+        GError           *error = NULL;
+        gboolean          was_closed;
+
+        if (worker->priv->session_cookie == NULL) {
+                return;
+        }
+
+        error = NULL;
+        system_bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
+
+        if (system_bus == NULL) {
+                g_warning ("Couldn't create connection to system bus: %s",
+                           error->message);
+
+                g_error_free (error);
+                goto out;
+        }
+
+        reply = g_dbus_connection_call_sync (system_bus,
+                                             "org.freedesktop.ConsoleKit",
+                                             "/org/freedesktop/ConsoleKit/Manager",
+                                             "org.freedesktop.ConsoleKit.Manager",
+                                             "CloseSession",
+                                             g_variant_new ("(s)", worker->priv->session_cookie),
+                                             G_VARIANT_TYPE ("(b)"),
+                                             G_DBUS_CALL_FLAGS_NONE,
+                                             -1,
+                                             NULL,
+                                             &error);
+
+        if (! reply) {
+                g_warning ("%s", error->message);
+                g_clear_error (&error);
+                goto out;
+        }
+
+        g_variant_get (reply, "(b)", &was_closed);
+
+        if (!was_closed) {
+                g_warning ("Unable to close ConsoleKit session");
+        }
+
+        g_variant_unref (reply);
+
+out:
+        g_clear_pointer (&worker->priv->session_cookie,
+                         (GDestroyNotify) g_free);
+}
+
+static char *
+get_ck_session_id (GdmSessionWorker *worker)
+{
+        GDBusConnection  *system_bus;
+        GVariant         *reply;
+        GError           *error = NULL;
+        char             *session_id = NULL;
+
+        error = NULL;
+        system_bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
+
+        if (system_bus == NULL) {
+                g_warning ("Couldn't create connection to system bus: %s",
+                           error->message);
+
+                g_error_free (error);
+                goto out;
+        }
+
+        reply = g_dbus_connection_call_sync (system_bus,
+                                             "org.freedesktop.ConsoleKit",
+                                             "/org/freedesktop/ConsoleKit/Manager",
+                                             "org.freedesktop.ConsoleKit.Manager",
+                                             "GetSessionForCookie",
+                                             g_variant_new ("(s)", worker->priv->session_cookie),
+                                             G_VARIANT_TYPE ("(o)"),
+                                             G_DBUS_CALL_FLAGS_NONE,
+                                             -1,
+                                             NULL,
+                                             &error);
+
+        if (reply == NULL) {
+                g_warning ("%s", error->message);
+                g_clear_error (&error);
+                goto out;
+        }
+
+        g_variant_get (reply, "(o)", &session_id);
+
+        g_variant_unref (reply);
+
+out:
+        return session_id;
+}
+#endif
+
 /* adapted from glib script_execute */
 static void
 script_execute (const gchar *file,
@@@@ -754,6 +961,7 @@@@ gdm_session_worker_stop_auditor (GdmSessionWorker *wor
         worker->priv->auditor = NULL;
 }
 
+#ifdef WITH_SYSTEMD
 static void
 on_release_display (int signal)
 {
@@@@ -879,6 +1087,7 @@@@ jump_to_vt (GdmSessionWorker  *worker,
 
         close (active_vt_tty_fd);
 }
+#endif
 
 static void
 gdm_session_worker_uninitialize_pam (GdmSessionWorker *worker,
@@@@ -909,9 +1118,11 @@@@ gdm_session_worker_uninitialize_pam (GdmSessionWorker 
 
         gdm_session_worker_stop_auditor (worker);
 
+#ifdef WITH_SYSTEMD
         if (worker->priv->login_vt != worker->priv->session_vt) {
                 jump_to_vt (worker, worker->priv->login_vt);
         }
+#endif
 
         worker->priv->login_vt = 0;
         worker->priv->session_vt = 0;
@@@@ -963,32 +1174,6 @@@@ _get_xauth_for_pam (const char *x11_authority_file)
 #endif
 
 static gboolean
-ensure_login_vt (GdmSessionWorker *worker)
-{
-        int fd;
-        struct vt_stat vt_state = { 0 };
-        gboolean got_login_vt = FALSE;
-
-        fd = open ("/dev/tty0", O_RDWR | O_NOCTTY);
-
-        if (fd < 0) {
-                g_debug ("GdmSessionWorker: couldn't open VT master: %m");
-                return FALSE;
-        }
-
-        if (ioctl (fd, VT_GETSTATE, &vt_state) < 0) {
-                g_debug ("GdmSessionWorker: couldn't get current VT: %m");
-                goto out;
-        }
-
-        worker->priv->login_vt = vt_state.v_active;
-        got_login_vt = TRUE;
-out:
-        close (fd);
-        return got_login_vt;
-}
-
-static gboolean
 gdm_session_worker_initialize_pam (GdmSessionWorker *worker,
                                    const char       *service,
                                    const char       *username,
@@@@ -1002,7 +1187,6 @@@@ gdm_session_worker_initialize_pam (GdmSessionWorker *w
 {
         struct pam_conv        pam_conversation;
         int                    error_code;
-        char tty_string[256];
 
         g_assert (worker->priv->pam_handle == NULL);
 
@@@@ -1063,10 +1247,12 @@@@ gdm_session_worker_initialize_pam (GdmSessionWorker *w
                 }
         }
 
+#ifdef WITH_SYSTEMD
         /* set seat ID */
-        if (seat_id != NULL && seat_id[0] != '\0') {
+        if (seat_id != NULL && seat_id[0] != '\0' && LOGIND_RUNNING()) {
                 gdm_session_worker_set_environment_variable (worker, "XDG_SEAT", seat_id);
         }
+#endif
 
         if (strcmp (service, "gdm-launch-environment") == 0) {
                 gdm_session_worker_set_environment_variable (worker, "XDG_SESSION_CLASS", "greeter");
@@@@ -1075,14 +1261,6 @@@@ gdm_session_worker_initialize_pam (GdmSessionWorker *w
         g_debug ("GdmSessionWorker: state SETUP_COMPLETE");
         worker->priv->state = GDM_SESSION_WORKER_STATE_SETUP_COMPLETE;
 
-        /* Temporarily set PAM_TTY with the currently active VT (login screen) 
-           PAM_TTY will be reset with the users VT right before the user session is opened */
-        ensure_login_vt (worker);
-        g_snprintf (tty_string, 256, "/dev/tty%d", worker->priv->login_vt);
-        pam_set_item (worker->priv->pam_handle, PAM_TTY, tty_string);
-        if (!display_is_local)
-                worker->priv->password_is_required = TRUE;
-
  out:
         if (error_code != PAM_SUCCESS) {
                 gdm_session_worker_uninitialize_pam (worker, error_code);
@@@@ -1629,6 +1807,26 @@@@ gdm_session_worker_get_environment (GdmSessionWorker *
         return (const char * const *) pam_getenvlist (worker->priv->pam_handle);
 }
 
+#ifdef WITH_CONSOLE_KIT
+static void
+register_ck_session (GdmSessionWorker *worker)
+{
+#ifdef WITH_SYSTEMD
+        if (LOGIND_RUNNING()) {
+                return;
+        }
+#endif
+
+        open_ck_session (worker);
+
+        if (worker->priv->session_cookie != NULL) {
+                gdm_session_worker_set_environment_variable (worker,
+                                                             "XDG_SESSION_COOKIE",
+                                                             worker->priv->session_cookie);
+        }
+}
+#endif
+
 static gboolean
 run_script (GdmSessionWorker *worker,
             const char       *dir)
@@@@ -1659,6 +1857,9 @@@@ session_worker_child_watch (GPid              pid,
                  : WIFSIGNALED (status) ? WTERMSIG (status)
                  : -1);
 
+#ifdef WITH_CONSOLE_KIT
+        close_ck_session (worker);
+#endif
 
         gdm_session_worker_uninitialize_pam (worker, PAM_SUCCESS);
 
@@@@ -1849,12 +2050,14 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
 
         error_code = PAM_SUCCESS;
 
+#ifdef WITH_SYSTEMD
         /* If we're in new vt mode, jump to the new vt now. There's no need to jump for
          * the other two modes: in the logind case, the session will activate itself when
          * ready, and in the reuse server case, we're already on the correct VT. */
         if (worker->priv->display_mode == GDM_SESSION_DISPLAY_MODE_NEW_VT) {
                 jump_to_vt (worker, worker->priv->session_vt);
         }
+#endif
 
         if (!worker->priv->is_program_session && !run_script (worker, GDMCONFDIR "/PostLogin")) {
                 g_set_error (error,
@@@@ -1919,6 +2122,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
                         _exit (2);
                 }
 
+#ifdef WITH_SYSTEMD
                 /* Take control of the tty
                  */
                 if (needs_controlling_terminal) {
@@@@ -1926,6 +2130,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
                                 g_debug ("GdmSessionWorker: could not take control of tty: %m");
                         }
                 }
+#endif
 
 #ifdef HAVE_LOGINCAP
                 if (setusercontext (NULL, passwd_entry, passwd_entry->pw_uid, LOGIN_SETALL) < 0) {
@@@@ -2070,11 +2275,13 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
         return TRUE;
 }
 
+#ifdef WITH_SYSTEMD
 static gboolean
 set_up_for_new_vt (GdmSessionWorker *worker)
 {
         int fd;
         char vt_string[256], tty_string[256];
+        struct vt_stat vt_state = { 0 };
         int session_vt = 0;
 
         fd = open ("/dev/tty0", O_RDWR | O_NOCTTY);
@@@@ -2084,6 +2291,11 @@@@ set_up_for_new_vt (GdmSessionWorker *worker)
                 return FALSE;
         }
 
+        if (ioctl (fd, VT_GETSTATE, &vt_state) < 0) {
+                g_debug ("GdmSessionWorker: couldn't get current VT: %m");
+                goto fail;
+        }
+
         if (worker->priv->display_is_initial) {
                 session_vt = atoi (GDM_INITIAL_VT);
         } else {
@@@@ -2093,6 +2305,7 @@@@ set_up_for_new_vt (GdmSessionWorker *worker)
                 }
         }
 
+        worker->priv->login_vt = vt_state.v_active;
         worker->priv->session_vt = session_vt;
 
         close (fd);
@@@@ -2155,6 +2368,7 @@@@ fail:
         close (fd);
         return FALSE;
 }
+#endif
 
 static gboolean
 set_up_for_current_vt (GdmSessionWorker  *worker,
@@@@ -2222,12 +2436,14 @@@@ set_up_for_current_vt (GdmSessionWorker  *worker,
          }
 #endif
 
+#ifdef WITH_SYSTEMD
         if (g_strcmp0 (worker->priv->display_seat_id, "seat0") == 0) {
                 g_debug ("GdmSessionWorker: setting XDG_VTNR to current vt");
                 set_xdg_vtnr_to_current_vt (worker);
         } else {
                 g_debug ("GdmSessionWorker: not setting XDG_VTNR since not seat0");
         }
+#endif
 
         return TRUE;
 out:
@@@@ -2251,6 +2467,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
                         return FALSE;
                 }
                 break;
+#ifdef WITH_SYSTEMD
         case GDM_SESSION_DISPLAY_MODE_NEW_VT:
         case GDM_SESSION_DISPLAY_MODE_LOGIND_MANAGED:
                 if (!set_up_for_new_vt (worker)) {
@@@@ -2261,6 +2478,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
                         return FALSE;
                 }
                 break;
+#endif
         }
 
         flags = 0;
@@@@ -2282,8 +2500,18 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
         g_debug ("GdmSessionWorker: state SESSION_OPENED");
         worker->priv->state = GDM_SESSION_WORKER_STATE_SESSION_OPENED;
 
+#ifdef WITH_SYSTEMD
         session_id = gdm_session_worker_get_environment_variable (worker, "XDG_SESSION_ID");
+#endif
 
+#ifdef WITH_CONSOLE_KIT
+        register_ck_session (worker);
+
+        if (session_id == NULL) {
+                session_id = get_ck_session_id (worker);
+        }
+#endif
+
         if (session_id != NULL) {
                 g_free (worker->priv->session_id);
                 worker->priv->session_id = session_id;
@@@@ -2388,6 +2616,19 @@@@ gdm_session_worker_handle_set_session_name (GdmDBusWor
 }
 
 static gboolean
+gdm_session_worker_handle_set_session_type (GdmDBusWorker         *object,
+                                            GDBusMethodInvocation *invocation,
+                                            const char            *session_type)
+{
+        GdmSessionWorker *worker = GDM_SESSION_WORKER (object);
+        g_debug ("GdmSessionWorker: session type set to %s", session_type);
+        g_free (worker->priv->session_type);
+        worker->priv->session_type = g_strdup (session_type);
+        gdm_dbus_worker_complete_set_session_type (object, invocation);
+        return TRUE;
+}
+
+static gboolean
 gdm_session_worker_handle_set_session_display_mode (GdmDBusWorker         *object,
                                                     GDBusMethodInvocation *invocation,
                                                     const char            *str)
@@@@ -3194,6 +3435,7 @@@@ worker_interface_init (GdmDBusWorkerIface *interface)
         interface->handle_open = gdm_session_worker_handle_open;
         interface->handle_set_language_name = gdm_session_worker_handle_set_language_name;
         interface->handle_set_session_name = gdm_session_worker_handle_set_session_name;
+        interface->handle_set_session_type = gdm_session_worker_handle_set_session_type;
         interface->handle_set_session_display_mode = gdm_session_worker_handle_set_session_display_mode;
         interface->handle_set_environment_variable = gdm_session_worker_handle_set_environment_variable;
         interface->handle_start_program = gdm_session_worker_handle_start_program;
@


1.14
log
@Update to gdm-3.22.3.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.13 2017/03/03 13:01:26 ajacoutot Exp $
d27 2
a28 2
--- daemon/gdm-session-worker.c.orig	Fri Mar  3 21:32:37 2017
+++ daemon/gdm-session-worker.c	Tue Mar  7 09:17:45 2017
d483 16
a498 1
@@@@ -2251,6 +2465,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d506 1
a506 1
@@@@ -2261,6 +2476,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d514 1
a514 1
@@@@ -2282,8 +2498,18 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d533 1
a533 1
@@@@ -2388,6 +2614,19 @@@@ gdm_session_worker_handle_set_session_name (GdmDBusWor
d553 1
a553 1
@@@@ -3194,6 +3433,7 @@@@ worker_interface_init (GdmDBusWorkerIface *interface)
@


1.13
log
@Update to gdm-3.22.2.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.12 2016/04/26 08:25:04 ajacoutot Exp $
d27 2
a28 2
--- daemon/gdm-session-worker.c.orig	Wed Mar  1 21:58:01 2017
+++ daemon/gdm-session-worker.c	Fri Mar  3 11:46:46 2017
d423 3
a425 3
         session_pid = fork ();
 
@@@@ -1901,6 +2104,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d433 1
a433 1
@@@@ -1908,6 +2112,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d441 1
a441 1
@@@@ -2052,11 +2257,13 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d455 1
a455 1
@@@@ -2066,6 +2273,11 @@@@ set_up_for_new_vt (GdmSessionWorker *worker)
d467 1
a467 1
@@@@ -2075,6 +2287,7 @@@@ set_up_for_new_vt (GdmSessionWorker *worker)
d475 1
a475 1
@@@@ -2102,6 +2315,7 @@@@ fail:
d483 1
a483 1
@@@@ -2190,6 +2404,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d491 1
a491 1
@@@@ -2200,6 +2415,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d499 1
a499 1
@@@@ -2229,7 +2445,9 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
a506 6
         /* FIXME: should we do something here?
          * Note that error return status from PreSession script should
@@@@ -2239,6 +2457,14 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
          */
         run_script (worker, GDMCONFDIR "/PreSession");
 
d518 1
a518 1
@@@@ -2343,6 +2569,19 @@@@ gdm_session_worker_handle_set_session_name (GdmDBusWor
d538 1
a538 1
@@@@ -3149,6 +3388,7 @@@@ worker_interface_init (GdmDBusWorkerIface *interface)
@


1.12
log
@Update to gdm-3.20.1.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.11 2016/04/15 14:11:09 ajacoutot Exp $
d27 2
a28 2
--- daemon/gdm-session-worker.c.orig	Tue Apr 19 07:00:41 2016
+++ daemon/gdm-session-worker.c	Tue Apr 26 10:02:48 2016
d410 1
a410 1
@@@@ -1847,12 +2048,14 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d425 1
a425 1
@@@@ -1899,6 +2102,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d433 1
a433 1
@@@@ -1906,6 +2110,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d441 1
a441 1
@@@@ -2050,11 +2255,13 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d455 1
a455 1
@@@@ -2064,6 +2271,11 @@@@ set_up_for_new_vt (GdmSessionWorker *worker)
d467 1
a467 1
@@@@ -2073,6 +2285,7 @@@@ set_up_for_new_vt (GdmSessionWorker *worker)
d475 1
a475 1
@@@@ -2100,6 +2313,7 @@@@ fail:
d483 1
a483 1
@@@@ -2188,6 +2402,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d491 1
a491 1
@@@@ -2198,6 +2413,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d499 1
a499 1
@@@@ -2227,7 +2443,9 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d509 1
a509 1
@@@@ -2237,6 +2455,14 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d524 1
a524 1
@@@@ -2341,6 +2567,19 @@@@ gdm_session_worker_handle_set_session_name (GdmDBusWor
d544 1
a544 1
@@@@ -3147,6 +3386,7 @@@@ worker_interface_init (GdmDBusWorkerIface *interface)
@


1.11
log
@Update to gdm-3.18.3.
Drop the gettext module while here.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.10 2015/10/18 13:25:54 ajacoutot Exp $
d27 2
a28 2
--- daemon/gdm-session-worker.c.orig	Thu Apr 14 07:56:26 2016
+++ daemon/gdm-session-worker.c	Fri Apr 15 15:48:26 2016
d544 1
a544 1
@@@@ -3148,6 +3387,7 @@@@ worker_interface_init (GdmDBusWorkerIface *interface)
@


1.10
log
@Update to gdm-3.18.0.
@
text
@d1 1
a1 1
$OpenBSD$
d21 8
a28 2
--- daemon/gdm-session-worker.c.orig	Sun Oct 18 14:26:47 2015
+++ daemon/gdm-session-worker.c	Sun Oct 18 14:24:34 2015
d303 42
a344 1
@@@@ -1036,10 +1247,12 @@@@ gdm_session_worker_initialize_pam (GdmSessionWorker *w
d358 16
a373 1
@@@@ -1595,6 +1808,26 @@@@ gdm_session_worker_get_environment (GdmSessionWorker *
d400 1
a400 1
@@@@ -1625,6 +1858,9 @@@@ session_worker_child_watch (GPid              pid,
d410 1
a410 1
@@@@ -1813,12 +2049,14 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d425 1
a425 1
@@@@ -1865,6 +2103,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d433 1
a433 1
@@@@ -1872,6 +2111,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d441 1
a441 1
@@@@ -2016,6 +2256,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
d449 27
a475 1
@@@@ -2073,6 +2314,7 @@@@ fail:
d483 1
a483 1
@@@@ -2161,6 +2403,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d491 1
a491 1
@@@@ -2171,6 +2414,7 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d499 1
a499 1
@@@@ -2200,7 +2444,9 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d509 1
a509 1
@@@@ -2210,6 +2456,14 @@@@ gdm_session_worker_open_session (GdmSessionWorker  *wo
d524 1
a524 1
@@@@ -2314,6 +2568,19 @@@@ gdm_session_worker_handle_set_session_name (GdmDBusWor
d544 1
a544 1
@@@@ -3121,6 +3388,7 @@@@ worker_interface_init (GdmDBusWorkerIface *interface)
@


1.9
log
@Update to gdm-3.12.1.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.8 2014/04/07 16:05:52 ajacoutot Exp $
d3 11
a13 4
From 1d76114a001c5c4eeba17fc9a455e3a132fc23c5 Mon Sep 17 00:00:00 2001
From: Ryan Lortie <desrt@@desrt.ca>
Date: Wed, 26 Mar 2014 04:33:58 +0000
Subject: ConsoleKit: a pair of tweaks
d15 2
a16 1
From e1206752ed525422a0f9b4509aa3562f472c9bac Mon Sep 17 00:00:00 2001
d18 2
a19 2
Date: Mon, 7 Apr 2014 10:13:10 -0400
Subject: worker: don't run shell scripts for program sessions
d21 110
a130 7
--- daemon/gdm-session-worker.c.orig	Mon Apr  7 17:44:34 2014
+++ daemon/gdm-session-worker.c	Mon Apr  7 17:44:49 2014
@@@@ -274,7 +274,7 @@@@ open_ck_session (GdmSessionWorker  *worker)
 
         g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(sv)"));
         g_variant_builder_add_parsed (&builder, "('unix-user', <%i>)", uid);
-        g_variant_builder_add_parsed (&builder, "('display-device', <%s>)", display_device);
d132 204
a335 4
         g_variant_builder_add_parsed (&builder, "('x11-display', <%s>)", display_name);
         g_variant_builder_add_parsed (&builder, "('remote-host-name', <%s>)", display_hostname);
         g_variant_builder_add_parsed (&builder, "('is-local', <%b>)", worker->priv->display_is_local);
@@@@ -1594,6 +1594,11 @@@@ static gboolean
d338 48
d387 43
a429 3
+        /* scripts are for non-program sessions only */
+        if (worker->priv->is_program_session) {
+                return TRUE;
d431 20
d452 12
a463 3
         return gdm_run_script (dir,
                                worker->priv->username,
                                worker->priv->x11_display_name,
@


1.8
log
@Revert previous and merge patch from upstream now that it's been fixed.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.7 2014/03/27 19:19:17 ajacoutot Exp $
@


1.7
log
@Update to gdm-3.12.0.
@
text
@d1 1
a1 1
$OpenBSD$
d8 7
a14 2
--- daemon/gdm-session-worker.c.orig	Wed Mar 19 23:32:33 2014
+++ daemon/gdm-session-worker.c	Thu Mar 27 18:27:58 2014
d24 12
@


1.6
log
@Update to gdm-3.8.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.5 2013/01/11 19:20:46 ajacoutot Exp $
d3 4
a6 4
From 61712dbc23421e4a5a53a2647692b96935effcb7 Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Tue, 27 Nov 2012 16:53:41 +0000
Subject: properly set ressources on BSD systems
d8 3
a10 3
--- daemon/gdm-session-worker.c.orig	Fri Oct 26 20:33:52 2012
+++ daemon/gdm-session-worker.c	Tue Nov 27 17:17:22 2012
@@@@ -34,6 +34,10 @@@@
d12 7
a18 28
 #include <security/pam_appl.h>
 
+#ifdef HAVE_LOGINCAP
+#include <login_cap.h>
+#endif
+
 #include <glib.h>
 #include <glib/gi18n.h>
 #include <glib/gstdio.h>
@@@@ -1792,10 +1796,18 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
                         fd = _open_program_session_log (worker->priv->log_file);
                 }
 
+#ifdef HAVE_LOGINCAP
+                if (setusercontext (NULL, passwd_entry, passwd_entry->pw_uid, LOGIN_SETALL) < 0) {
+                        g_debug ("GdmSessionWorker: setusercontext() failed for user %s: %s",
+                                 passwd_entry->pw_name, g_strerror (errno));
+                        _exit (1);
+                }	
+#else
                 if (setuid (worker->priv->uid) < 0) {
                         g_debug ("GdmSessionWorker: could not reset uid: %s", g_strerror (errno));
                         _exit (1);
                 }
+#endif
 
                 if (setsid () < 0) {
                         g_debug ("GdmSessionWorker: could not set pid '%u' as leader of new session and process group: %s",
@


1.5
log
@Pushed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.4 2012/11/29 15:59:21 ajacoutot Exp $
@


1.4
log
@Link to BZ.
@
text
@d1 1
a1 1
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.3 2012/11/27 16:29:34 ajacoutot Exp $
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=689174
@


1.3
log
@Don't use setuid() but setusercontext() with LOGIN_SETALL to setup the
complete user environment and limits.
@
text
@d1 4
a4 1
$OpenBSD$
@


1.2
log
@Remove some uneeded | old patches.
Add a schemas override.
@
text
@d1 17
a17 29
$OpenBSD: patch-daemon_gdm-session-worker_c,v 1.1 2012/10/03 06:40:50 ajacoutot Exp $

From 0fbe5f38740cb59d542241dae3457d6c0dcf2880 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@@redhat.com>
Date: Mon, 01 Oct 2012 21:51:23 +0000
Subject: worker: fix compiler warning

From 01c334ed94b64a3b2e9119e95e968db24dac5a31 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@@redhat.com>
Date: Mon, 01 Oct 2012 21:51:47 +0000
Subject: worker: create program session log file as root

--- daemon/gdm-session-worker.c.orig	Mon Sep 17 22:41:25 2012
+++ daemon/gdm-session-worker.c	Tue Oct  2 10:42:02 2012
@@@@ -1530,10 +1530,10 @@@@ gdm_session_worker_accredit_user (GdmSessionWorker  *w
         return ret;
 }
 
-static char **
+static const char * const *
 gdm_session_worker_get_environment (GdmSessionWorker *worker)
 {
-        return pam_getenvlist (worker->priv->pam_handle);
+        return (const char * const *) pam_getenvlist (worker->priv->pam_handle);
 }
 
 static void
@@@@ -1775,11 +1775,19 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
         }
d19 7
a25 15
         if (session_pid == 0) {
-                char **environment;
+                const char * const * environment;
                 char  *kerberos_cache;
                 char  *home_dir;
                 int    fd;
 
+                fd = open ("/dev/null", O_RDWR);
+                dup2 (fd, STDIN_FILENO);
+                close (fd);
+
+                if (worker->priv->is_program_session) {
+                        fd = _open_program_session_log (worker->priv->log_file);
+                }
+
a28 2
@@@@ -1791,7 +1799,6 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
                         _exit (2);
d30 1
d32 2
a33 36
-
                 kerberos_cache = gdm_session_worker_get_environment_variable (worker, "KRB5CCNAME");
 
                 if (kerberos_cache == NULL) {
@@@@ -1823,13 +1830,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
                         g_chdir ("/");
                 }
 
-                fd = open ("/dev/null", O_RDWR);
-                dup2 (fd, STDIN_FILENO);
-                close (fd);
-
-                if (worker->priv->is_program_session) {
-                        fd = _open_program_session_log (worker->priv->log_file);
-                } else {
+                if (!worker->priv->is_program_session) {
                         if (home_dir != NULL && home_dir[0] != '\0') {
                                 char *cache_dir;
                                 char *log_dir;
@@@@ -1869,6 +1870,7 @@@@ gdm_session_worker_start_session (GdmSessionWorker  *w
 
                 gdm_session_execute (worker->priv->arguments[0],
                                      worker->priv->arguments,
+                                     (char **)
                                      environment,
                                      TRUE);
 
@@@@ -2693,7 +2695,7 @@@@ reauthentication_request_new (GdmSessionWorker      *w
                               GDBusMethodInvocation *invocation)
 {
         ReauthenticationRequest *request;
-        char **environment;
+        const char * const * environment;
         char *address;
 
         environment = gdm_session_worker_get_environment (worker);
@


1.1
log
@Bring some patches from upstream to fix a couple of bugs.
Properly remove some subdirectory under _gdm homedir.
@
text
@d1 1
a1 1
$OpenBSD$
@

