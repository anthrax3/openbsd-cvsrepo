head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.01.06.17.17.32;	author zhuk;	state Exp;
branches;
next	1.3;
commitid	cNSdU4RpwcgaSAZD;

1.3
date	2015.09.17.12.24.42;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	Ow5BMo0nT8Lu9TE0;

1.2
date	2015.06.03.07.28.01;	author dcoppa;	state Exp;
branches;
next	1.1;
commitid	oaVrPQqHD3DHzE8M;

1.1
date	2014.11.13.18.33.24;	author zhuk;	state Exp;
branches;
next	;
commitid	qfUxrlKESVxj2zw2;


desc
@@


1.4
log
@Fix wrong fix (made by yours truly as well) for TLS protocol choosing.
It was the same story again: TLSv1_*_method() are TLSv1.0, not TLSv1.x.

Should fix problems landry@@ and sthen@@ (and likely others) were seeing.

Joint work with and final okay sthen@@
@
text
@$OpenBSD: patch-src_network_ssl_qsslsocket_openssl_cpp,v 1.3 2015/09/17 12:24:42 dcoppa Exp $
1.  Disable SSLv3 by default.
2.  TLSv1_*_method() are TLSv1.0-only, so default to SSLv23_*_method(), which is
    actually TLSv1.* nowadays.
2a. Make QSsl::TlsV1 also use SSLv23_*_method(), noone in good mind would
    want to run TLSv1.0-only connections, and too many developers fail
    same way due to bad naming.
--- src/network/ssl/qsslsocket_openssl.cpp.orig	Thu May  7 17:14:44 2015
+++ src/network/ssl/qsslsocket_openssl.cpp	Wed Jan  6 20:10:23 2016
@@@@ -267,16 +267,18 @@@@ init_context:
 #endif
         break;
     case QSsl::SslV3:
+#ifndef OPENSSL_NO_SSL3
         ctx = q_SSL_CTX_new(client ? q_SSLv3_client_method() : q_SSLv3_server_method());
+#else
+        ctx = 0; // SSL 3 not supported by the system, but chosen deliberately -> error
+#endif
         break;
-    case QSsl::SecureProtocols: // SslV2 will be disabled below
-    case QSsl::TlsV1SslV3: // SslV2 will be disabled below
     case QSsl::AnyProtocol:
+    case QSsl::SecureProtocols:
+    case QSsl::TlsV1SslV3:
+    case QSsl::TlsV1:   // this is TLSv1.0 only case, but misused as TLSv1.x too often
     default:
         ctx = q_SSL_CTX_new(client ? q_SSLv23_client_method() : q_SSLv23_server_method());
-        break;
-    case QSsl::TlsV1:
-        ctx = q_SSL_CTX_new(client ? q_TLSv1_client_method() : q_TLSv1_server_method());
         break;
     }
     if (!ctx) {
@


1.3
log
@
Fix libQtNetwork warnings following SSLv3 removal

OK sthen@@, zhuk@@
@
text
@d1 10
a10 5
$OpenBSD: patch-src_network_ssl_qsslsocket_openssl_cpp,v 1.2 2015/06/03 07:28:01 dcoppa Exp $
Disable SSLv3 by default.
--- src/network/ssl/qsslsocket_openssl.cpp.orig	Thu May  7 16:14:44 2015
+++ src/network/ssl/qsslsocket_openssl.cpp	Wed Sep 16 13:30:03 2015
@@@@ -267,15 +267,19 @@@@ init_context:
a22 4
-    default:
         ctx = q_SSL_CTX_new(client ? q_SSLv23_client_method() : q_SSLv23_server_method());
         break;
     case QSsl::TlsV1:
d25 6
a30 2
+    default:
         ctx = q_SSL_CTX_new(client ? q_TLSv1_client_method() : q_TLSv1_server_method());
d33 1
@


1.2
log
@
Bugfixing update to qt-4.8.7.
And use the new "qt.io" for HOMEPAGE / MASTER_SITES.

No fallout in a bulk build (ajacoutot@@)

OK espie@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_ssl_qsslsocket_openssl_cpp,v 1.1 2014/11/13 18:33:24 zhuk Exp $
d4 4
a7 2
+++ src/network/ssl/qsslsocket_openssl.cpp	Sun May 31 13:28:29 2015
@@@@ -269,13 +269,13 @@@@ init_context:
d9 1
d11 3
@


1.1
log
@Disable SSLv3 by default in Qt4.

okay espie@@ (MAINTAINER), went through a couple of KDE4 builds.

This should been committed a while ago. Even more, I was thinking that this
patch *was* committed at Oct 22... It's probably better late than never.
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- src/network/ssl/qsslsocket_openssl.cpp.orig	Tue Oct 21 12:38:17 2014
+++ src/network/ssl/qsslsocket_openssl.cpp	Tue Oct 21 12:39:14 2014
@@@@ -265,13 +265,13 @@@@ init_context:
@

