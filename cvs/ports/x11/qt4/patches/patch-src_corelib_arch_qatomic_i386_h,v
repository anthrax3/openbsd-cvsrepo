head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.30
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.28
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.05.23.10.36.49;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@misc fixes
- for gcc4, insist on -fno-wrapv, since it breaks things.
- use atomic builtins as they are available (on i386 at least)
- remove a few reasons why gmake is required (but not all)
- pass MAKE_JOBS to configure step.
@
text
@$OpenBSD$
--- src/corelib/arch/qatomic_i386.h.orig	Mon May 17 22:14:00 2010
+++ src/corelib/arch/qatomic_i386.h	Mon May 17 22:16:45 2010
@@@@ -107,7 +107,52 @@@@ template <typename T>
 Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::isFetchAndAddWaitFree()
 { return true; }
 
-#if defined(Q_CC_GNU) || defined(Q_CC_INTEL)
+#if defined(QT_GCC4_ATOMICS)
+inline bool QBasicAtomicInt::ref()
+{
+	return __sync_add_and_fetch(&_q_value, 1) != 0;
+}
+
+inline bool QBasicAtomicInt::deref()
+{
+	return __sync_sub_and_fetch(&_q_value, 1) != 0;
+}
+
+inline bool QBasicAtomicInt::testAndSetOrdered(int expectedValue, int newValue)
+{
+    return __sync_bool_compare_and_swap(&_q_value, expectedValue, newValue);
+}
+
+inline int QBasicAtomicInt::fetchAndStoreOrdered(int newValue)
+{
+    return __sync_lock_test_and_set(&_q_value, newValue);
+}
+
+inline int QBasicAtomicInt::fetchAndAddOrdered(int valueToAdd)
+{
+    return __sync_fetch_and_add(&_q_value, valueToAdd);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
+{
+    return __sync_bool_compare_and_swap(&_q_value, expectedValue, newValue);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
+{
+    return __sync_lock_test_and_set(&_q_value, newValue);
+}
+
+template <typename T>
+Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
+{
+    return __sync_fetch_and_add(&_q_value, valueToAdd);
+}
+
+
+#elif defined(Q_CC_GNU) || defined(Q_CC_INTEL)
 
 inline bool QBasicAtomicInt::ref()
 {
@
