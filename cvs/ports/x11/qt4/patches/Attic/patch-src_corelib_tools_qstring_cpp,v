head	1.2;
access;
symbols
	OPENBSD_4_1:1.1.0.6
	OPENBSD_3_9:1.1.0.4
	OPENBSD_4_0:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2007.05.22.09.09.32;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2007.03.31.23.10.18;	author espie;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2007.04.06.11.15.29;	author sturm;	state Exp;
branches;
next	;

1.1.4.1
date	2007.04.06.11.35.29;	author sturm;	state Exp;
branches;
next	;

1.1.6.1
date	2007.05.01.16.27.48;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 4.3.0rc1.
@
text
@$OpenBSD: patch-src_corelib_tools_qstring_cpp,v 1.1 2007/03/31 23:10:18 espie Exp $
--- src/corelib/tools/qstring.cpp.orig	Wed Feb 21 10:58:43 2007
+++ src/corelib/tools/qstring.cpp	Sat Mar 31 15:01:10 2007
@@@@ -3352,6 +3352,7 @@@@ QString QString::fromUtf8(const char *str, int size)
     result.resize(size); // worst case
     ushort *qch = result.d->data;
     uint uc = 0;
+    uint min_uc = 0;
     int need = 0;
     int error = -1;
     uchar ch;
@@@@ -3369,6 +3370,12 @@@@ QString QString::fromUtf8(const char *str, int size)
                         ushort low = uc%0x400 + 0xdc00;
                         *qch++ = high;
                         *qch++ = low;
+                    } else if ((uc < min_uc) || (uc >= 0xd800 && uc <= 0xdfff) || (uc >= 0xfffe)) {
+			// overlong seqence, UTF16 surrogate or BOM
+                        i = error;
+                        qch = addOne(qch, result);
+                        *qch++ = 0xdbff;
+                        *qch++ = 0xde00 + ((uchar)str[i]);
                     } else {
                         *qch++ = uc;
                     }
@@@@ -3391,14 +3398,17 @@@@ QString QString::fromUtf8(const char *str, int size)
                 uc = ch & 0x1f;
                 need = 1;
                 error = i;
+                min_uc = 0x80;
             } else if ((ch & 0xf0) == 0xe0) {
                 uc = ch & 0x0f;
                 need = 2;
                 error = i;
+                min_uc = 0x800;
             } else if ((ch&0xf8) == 0xf0) {
                 uc = ch & 0x07;
                 need = 3;
                 error = i;
+                min_uc = 0x10000;
             } else {
                 // Error
                 qch = addOne(qch, result);
@


1.1
log
@fix utf8 codec
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.6.1
log
@security fix for CVE-2007-0242

MFC:
handle utf8 encoding better.
@
text
@d1 4
a4 4
$OpenBSD: patch-src_corelib_tools_qstring_cpp,v 1.1 2007/03/31 23:10:18 espie Exp $
--- src/corelib/tools/qstring.cpp.orig	Mon Nov 27 18:26:07 2006
+++ src/corelib/tools/qstring.cpp	Sat Apr 14 19:11:53 2007
@@@@ -3352,6 +3352,7 @@@@ QString QString::fromUtf8(const char *st
d12 1
a12 1
@@@@ -3369,6 +3370,12 @@@@ QString QString::fromUtf8(const char *st
d25 1
a25 1
@@@@ -3391,14 +3398,17 @@@@ QString QString::fromUtf8(const char *st
@


1.1.4.1
log
@security fix for CVE-2007-0242

MFC:
handle utf8 encoding better.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_corelib_tools_qstring_cpp,v 1.1 2007/03/31 23:10:18 espie Exp $
@


1.1.2.1
log
@security fix for CVE-2007-0242

MFC:
handle utf8 encoding better.
@
text
@d1 4
a4 4
$OpenBSD: patch-src_corelib_tools_qstring_cpp,v 1.1 2007/03/31 23:10:18 espie Exp $
--- src/corelib/tools/qstring.cpp.orig	Sun May 14 12:47:00 2006
+++ src/corelib/tools/qstring.cpp	Fri Apr  6 11:36:54 2007
@@@@ -3267,6 +3267,7 @@@@ QString QString::fromUtf8(const char *st
d12 1
a12 1
@@@@ -3284,6 +3285,12 @@@@ QString QString::fromUtf8(const char *st
d25 1
a25 1
@@@@ -3306,14 +3313,17 @@@@ QString QString::fromUtf8(const char *st
@

