head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.7.0.20
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.22
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.16
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	espie:1.1.1.1
	trolltech:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2016.05.18.19.12.22;	author jca;	state Exp;
branches;
next	1.12;
commitid	tRQAatnRIOmxWAoA;

1.12
date	2016.03.26.20.37.35;	author zhuk;	state Exp;
branches;
next	1.11;
commitid	OEdThNVtQpfieDxV;

1.11
date	2016.03.10.17.45.11;	author zhuk;	state Exp;
branches;
next	1.10;
commitid	0mjhx6dypqaFfHN5;

1.10
date	2016.03.09.16.54.28;	author zhuk;	state Exp;
branches;
next	1.9;
commitid	pJJaWThLHR5epqlx;

1.9
date	2016.03.07.10.13.32;	author zhuk;	state Exp;
branches;
next	1.8;
commitid	taXf1h7Dqbp6Dn1H;

1.8
date	2016.03.06.23.59.51;	author zhuk;	state Exp;
branches;
next	1.7;
commitid	pgXtU4D5ESSJZWCl;

1.7
date	2010.11.22.08.37.04;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.06.16.41.23;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.05.13.47.46;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.29.12.15.57;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.03.21.58.17;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.23.16.28.52;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.04.11.10.13;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.07.04.11.10.13;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Add an abstraction for the lrelease Qt tool

ok sthen@@ zhuk@@
@
text
@# $OpenBSD: qt4.port.mk,v 1.12 2016/03/26 20:37:35 zhuk Exp $

# This fragment defines MODQT_* variables to make it easier to substitute
# qt1/qt2/qt3 in a port.
MODQT_OVERRIDE_UIC ?=	Yes
MODQT4_OVERRIDE_UIC ?=	${MODQT_OVERRIDE_UIC}

MODQT4_LIBDIR =	${LOCALBASE}/lib/qt4
MODQT_LIBDIR ?= ${MODQT4_LIBDIR}
MODQT4_INCDIR =	${LOCALBASE}/include/X11/qt4
MODQT_INCDIR ?= ${MODQT4_INCDIR}
MODQT_PKG_CONFIG_PATH ?= ${LOCALBASE}/lib/qt4/pkgconfig
MODQT4_CONFIGURE_ARGS =	--with-qt-includes=${MODQT4_INCDIR} \
			--with-qt-libraries=${MODQT4_LIBDIR}
MODQT_CONFIGURE_ARGS ?=	${MODQT4_CONFIGURE_ARGS}
_MODQT4_SETUP =	MOC=${MODQT4_MOC} \
		MODQT_INCDIR=${MODQT4_INCDIR} \
		MODQT_LIBDIR=${MODQT4_LIBDIR} \
		PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:${MODQT_PKG_CONFIG_PATH}
.if ${MODQT4_OVERRIDE_UIC:L} == "yes"
_MODQT4_SETUP +=UIC=${MODQT4_UIC}
.endif

# may be needed to find plugins
MODQT4_MOC =	${LOCALBASE}/bin/moc4
MODQT_MOC ?=	${MODQT4_MOC}
MODQT4_UIC =	${LOCALBASE}/bin/uic4
MODQT_UIC ?=	${MODQT4_UIC}
MODQT4_QMAKE =	${LOCALBASE}/bin/qmake4
MODQT_QMAKE ?=	${MODQT4_QMAKE}
MODQT4_QTDIR =	${LOCALBASE}/lib/qt4
MODQT_QTDIR ?=	${MODQT4_QTDIR}
MODQT4_LRELEASE = ${LOCALBASE}/bin/lrelease4
MODQT_LRELEASE ?= ${MODQT4_LRELEASE}

MODQT4_LIB_DEPENDS = 	x11/qt4
MODQT_LIB_DEPENDS ?= 	${MODQT4_LIB_DEPENDS}
LIB_DEPENDS += 		${MODQT4_LIB_DEPENDS}

MODQT4_WANTLIB = 	lib/qt4/QtCore
MODQT_WANTLIB ?= 	${MODQT4_WANTLIB}
WANTLIB += 		${MODQT4_WANTLIB}

CONFIGURE_ENV +=${_MODQT4_SETUP}
MAKE_ENV +=	${_MODQT4_SETUP}
MAKE_FLAGS +=	${_MODQT4_SETUP}
@


1.12
log
@Zap more lines from qmake-based ports by moving them from
the "MODULES=x11/qtX + CONFIGURE_STYLE=qmake" logic to
the "MODULES=devel/qmake x11/qtX" logic.

Discussed with espie@@ a few weeks ago.
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.11 2016/03/10 17:45:11 zhuk Exp $
d33 2
@


1.11
log
@Switch to a separate qmake.port.mk. Simplifies logic a lot.

This removes support of separate qmake versions in one port: as we
discovered, there are no ports actually needing this; strangers like
print/poppler don't use qmake in build.

This should be transparent to current ports. But expect more tweaks there:
for now, qt?.port.mk forces qmake.port.mk inclusion, but that will be
reworked to a more common scheme.

Same idea from (at least) espie@@ and me; also, espie@@ agrees on the plan.
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.10 2016/03/09 16:54:28 zhuk Exp $
a44 2

MODULES +=	devel/qmake
@


1.10
log
@Don't use MAKE_FILE, but hardcode Makefile instead: that's what qmake
actually generates, and some tricky ports like games/gambatte fail when
qmake-specific part tries to use MAKE_FILE variable.
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.9 2016/03/07 10:13:32 zhuk Exp $
d46 1
a46 91
.if ${CONFIGURE_STYLE:Mqmake} || ${CONFIGURE_STYLE:Mqmake4}
MAKE_FLAGS +=	CC="${CC}" CXX="${CXX}"
MAKE_FLAGS +=	PREFIX=${PREFIX}
. for _l _v in ${SHARED_LIBS}
MAKE_FLAGS +=	LIB${_l}_VERSION=${_v}
. endfor
.endif

MODQMAKE_PROJECTS ?=	.
MODQMAKE4_PROJECTS ?=	${MODQMAKE_PROJECTS}
MODQMAKE_ARGS ?=
MODQMAKE4_ARGS ?=	${MODQMAKE_ARGS}
MODQMAKE4_ARGS +=	-recursive \
			PREFIX=${PREFIX} \
			QMAKE_CFLAGS="${CFLAGS}" \
			QMAKE_CFLAGS_RELEASE="${CFLAGS}" \
			QMAKE_CXX="${CXX}" \
			QMAKE_CXXFLAGS="${CXXFLAGS}" \
			QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS}"

MODQMAKE_INSTALL_ROOT ?=	${WRKINST}
MODQMAKE4_INSTALL_ROOT ?=	${MODQMAKE_INSTALL_ROOT}
_MODQT4_FAKE_FLAGS =		INSTALL_ROOT=${MODQMAKE4_INSTALL_ROOT}

MODQMAKE4_configure =
MODQMAKE4_build =
MODQMAKE4_install =
.for _qp in ${MODQMAKE4_PROJECTS}
_MODQMAKE4_CD_${_qp:/=_} = \
	cd ${WRKBUILD}; \
	if [ -d ${WRKSRC}/${_qp} ]; then \
		dir=${_qp}; \
	else \
		dir=$$(dirname ${_qp}); \
	fi; \
	mkdir -p $$dir; \
	cd -- $$dir
MODQMAKE4_configure += \
	cd ${WRKSRC}; \
	if [ -d ${_qp} ]; then \
		pro=$$(echo ${_qp}/*.pro); \
	else \
		pro=${_qp}; \
	fi; \
	${_MODQMAKE4_CD_${_qp:/=_}}; \
	echo >&2 ${MODQT4_QMAKE} ${MODQMAKE4_ARGS} ${WRKSRC}/$$pro; \
	${MODQT4_QMAKE} ${MODQMAKE4_ARGS} ${WRKSRC}/$$pro;
MODQMAKE4_build += \
	${_MODQMAKE4_CD_${_qp:/=_}}; \
	${_MODQMAKE4_build_SYSTRACE_CMD} ${SETENV} ${MAKE_ENV} \
                ${MAKE_PROGRAM} ${MAKE_FLAGS} -f Makefile ${ALL_TARGET};
MODQMAKE4_install += \
	${_MODQMAKE4_CD_${_qp:/=_}}; \
	umask 022; \
	${_FAKESUDO} ${_MODQMAKE4_install_SYSTRACE_CMD} \
		${SETENV} ${MAKE_ENV} ${FAKE_SETUP} \
		${MAKE_PROGRAM} ${ALL_FAKE_FLAGS} ${_MODQT4_FAKE_FLAGS} \
		-f Makefile ${FAKE_TARGET};
.endfor
MODQMAKE_configure ?=	${MODQMAKE4_configure}
MODQMAKE_build ?=	${MODQMAKE4_build}
MODQMAKE_install ?=	${MODQMAKE4_install}

.if ${CONFIGURE_STYLE:Mqmake4} || ${CONFIGURE_STYLE:Mqmake}
SEPARATE_BUILD ?=	Yes
. if ${SEPARATE_BUILD:L} != "no"
.  if ${SEPARATE_BUILD:L} != "yes"
ERRORS +=	"Fatal: qmake supports only simple SEPARATE_BUILD builds."
.  endif
# "Shadow builds" of qmake can only work in subdirectory
WRKBUILD ?=		${WRKSRC}/build-${MACHINE_ARCH}
. endif

# Could not add ${_SYSTRACE_CMD} unconditionally since in case of
# do-build bsd.port.mk adds ${_SYSTRACE_CMD} itself.
. if !target(do-build) && "${CONFIGURE_STYLE:Nqmake:Nqmake4}" == ""
do-build:
	@@${MODQMAKE4_build}
. else
_MODQMAKE4_build_SYSTRACE_CMD =		${_SYSTRACE_CMD}
. endif

# Could not add ${_SYSTRACE_CMD} unconditionally since in case of
# do-install bsd.port.mk adds ${_SYSTRACE_CMD} itself.
. if !target(do-install) && "${CONFIGURE_STYLE:Nqmake:Nqmake4}" == ""
do-install:
	@@${MODQMAKE4_install}
. else
_MODQMAKE4_install_SYSTRACE_CMD =	${_SYSTRACE_CMD}
. endif
.endif
@


1.9
log
@Unbreak the case of USE_SYSTRACE=Yes: we tried to run under systrace
always, and bsd.port.mk invokes systrace for us already when in do-build
or do-install target.
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.8 2016/03/06 23:59:51 zhuk Exp $
d96 1
a96 1
                ${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKE_FILE} ${ALL_TARGET};
d103 1
a103 1
		-f ${MAKE_FILE} ${FAKE_TARGET};
@


1.8
log
@Add support for CONFIGURE_STYLE=qmake. No ports affected, since this is
an opt-in. Actual qmake-based ports will be switched on case-by-case
basis in the near future.

Unslacking after discussion with at least naddy@@ & espie@@ from... 2014?!

Oh my.
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.7 2010/11/22 08:37:04 espie Exp $
d95 1
a95 1
	${_SYSTRACE_CMD} ${SETENV} ${MAKE_ENV} \
d100 1
a100 1
	${_FAKESUDO} ${_SYSTRACE_CMD} \
d119 2
d124 2
d128 2
d133 2
@


1.7
log
@new depends
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.6 2010/11/06 16:41:23 espie Exp $
d5 2
a6 2
MODQT_OVERRIDE_UIC ?= Yes
MODQT4_OVERRIDE_UIC ?= ${MODQT_OVERRIDE_UIC}
d15 1
a15 1
MODQT_CONFIGURE_ARGS ?= ${MODQT4_CONFIGURE_ARGS}
d29 2
d45 84
@


1.6
log
@izbetter to also remove extra LIB_DEPENDS partz
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.5 2010/11/05 13:47:46 espie Exp $
d32 1
a32 1
MODQT4_LIB_DEPENDS = 	::x11/qt4
@


1.5
log
@zap old lib depends for qt4
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.4 2008/11/29 12:15:57 ajacoutot Exp $
d32 1
a32 1
MODQT4_LIB_DEPENDS = 	lib/qt4/QtCore::x11/qt4
@


1.4
log
@- add MODQT_PKG_CONFIG_PATH so that ports depending on the qt4 MODULE
don't need to be tweaked to be able to find qt4 pkgconfig files

input from and ok espie@@
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.3 2008/09/03 21:58:17 brad Exp $
a23 1
LIB_DEPENDS += lib/qt4/QtCore::x11/qt4
d31 8
@


1.3
log
@Remove forgotten MODGCC bits for sparc64. sparc64 has been using gcc3
for 4 1/2 years now.
@
text
@d1 1
a1 1
# $OpenBSD: qt4.port.mk,v 1.2 2007/03/23 16:28:52 espie Exp $
d12 1
d18 2
a19 1
		MODQT_LIBDIR=${MODQT4_LIBDIR}
@


1.2
log
@tweak the modules so they also define MODQTn_* values along the usual
MODQT_* values.

This makes it possible to include both qt3 and qt4, as long as one is
very careful in choosing the right variables, without any change for the
existing qt3-only, qt4-only ports.

We don't bother with qt and qt2 as they are mostly end-of-life.
@
text
@d1 1
a1 5
# $OpenBSD: qt4.port.mk,v 1.1.1.1 2005/07/04 11:10:13 espie Exp $

MODULES+=	gcc3
MODGCC3_ARCHES+=sparc64
MODGCC3_LANGS+=	c++
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: qt3.port.mk,v 1.2 2004/10/30 09:12:35 espie Exp $
d7 1
a7 1
# This fragment uses MODQT_* variables to make it easier to substitute
d9 15
a23 11
MODQT_LIBDIR=	${LOCALBASE}/lib/qt4
MODQT_INCDIR=	${LOCALBASE}/include/X11/qt4
MODQT_OVERRIDE_UIC?=Yes
MODQT_MT?=Yes
MODQT_CONFIGURE_ARGS=	--with-qt-includes=${MODQT_INCDIR} \
			--with-qt-libraries=${MODQT_LIBDIR}
_MODQT_SETUP=	MOC=${MODQT_MOC} \
		MODQT_INCDIR=${MODQT_INCDIR} \
		MODQT_LIBDIR=${MODQT_LIBDIR}
.if ${MODQT_OVERRIDE_UIC:L} == "yes"
_MODQT_SETUP+=	UIC=${MODQT_UIC}
d26 1
a26 1
LIB_DEPENDS+=lib/qt4/QtCore::x11/qt4
d28 6
a33 3
MODQT_MOC=	${LOCALBASE}/bin/moc4
MODQT_UIC=	${LOCALBASE}/bin/uic4
MODQT_QTDIR=	${LOCALBASE}/lib/qt4
d35 3
a37 3
CONFIGURE_ENV+=	${_MODQT_SETUP}
MAKE_ENV+=	${_MODQT_SETUP}
MAKE_FLAGS+=	${_MODQT_SETUP}
@


1.1.1.1
log
@new version of qt. nothing much uses it yet, but it looks nicer
than the old ones.
@
text
@@
