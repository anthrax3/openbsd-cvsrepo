head	1.8;
access;
symbols
	OPENBSD_5_9:1.5.0.8
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2016.08.05.13.55.33;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	SwYd49o0l4sRgZwG;

1.7
date	2016.08.05.13.23.09;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	x1ewle6AlHNngFmJ;

1.6
date	2016.06.17.11.49.33;	author dcoppa;	state dead;
branches;
next	1.5;
commitid	PIMSZ7WSwFcoJPlR;

1.5
date	2013.09.19.20.43.54;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2013.08.22.23.03.21;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.17.17.32.28;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.01.17.28.34;	author wilfried;	state dead;
branches;
next	1.1;

1.1
date	2003.08.14.21.23.55;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Merge commit 5561199c871293cca0b3dc2c6feff0d7783111c6 from upstream.

Allow alt+tabbed windows over fullscreen

Fullscreen windows should only be on top when they are in focus. Change
the stacking level temporarily back to WMNormalLevel if the fullscreen
window loses focus due to an alt+tab operation.

Change the stacking level back to WMFullscreenLevel if the fullscreen
window receives the focus again.
@
text
@$OpenBSD: patch-src_actions_c,v 1.7 2016/08/05 13:23:09 dcoppa Exp $

commit 5561199c871293cca0b3dc2c6feff0d7783111c6
Author: Bjorn Mork <bjorn@@mork.no>
Date:   Tue Jul 12 23:49:47 2016 +0200

wmaker: allow alt+tabbed windows over fullscreen

Fullscreen windows should only be on top when they are in focus. Change
the stacking level temporarily back to WMNormalLevel if the fullscreen
window loses focus due to an alt+tab operation.

Change the stacking level back to WMFullscreenLevel if the fullscreen
window receives the focus again.

Cc: Amadeusz Slawinski <amade@@asmblr.net>
Signed-off-by: Bjorn Mork <bjorn@@mork.no>

commit 6429847494fbcd84e2bab026c3fd9239c7cf8927
Author: Bjorn Mork <bjorn@@mork.no>
Date:   Tue Jul 12 23:49:46 2016 +0200

wmaker: fix stacking order of dock and fullscreen

This reverts the commits:
 311ab6b08ccf ("Raise fullscreened window")
 a504370f3b27 ("Remove WMFullscreenLevel")

Removing WMFullscreenLevel had the side effect that a dock or panel
having the _NET_WM_WINDOW_TYPE_DOCK type would stack on top of
fullscreen windows, obscuring part of them.  This is unwanted. No
other window should cover a focused fullscreen window:.
https://specifications.freedesktop.org/wm-spec/latest/ar01s09.html#STACKINGORDER

Simply raising the fullscreen window to the top of the stack of normal
windows is not sufficient if there are windows with higher stacking
levels present.  The separate WMFullscreenLevel is needed.

Cc: Amadeusz Slawinski <amade@@asmblr.net>
Signed-off-by: Bjorn Mork <bjorn@@mork.no>

--- src/actions.c.orig	Tue Aug 11 20:41:14 2015
+++ src/actions.c	Fri Aug  5 15:39:23 2016
@@@@ -216,6 +216,10 @@@@ void wSetFocusTo(WScreen *scr, WWindow *wwin)
 			if (wPreferences.highlight_active_app)
 				wApplicationDeactivate(oapp);
 		}
+
+		/* reset fullscreen if temporarily removed due to lost focus*/
+		if (wwin->flags.fullscreen)
+			ChangeStackingLevel(wwin->frame->core, WMFullscreenLevel);
 	}
 
 	wWindowFocus(wwin, focused);
@@@@ -726,8 +730,7 @@@@ void wFullscreenWindow(WWindow *wwin)
 
 	wWindowConfigureBorders(wwin);
 
-	ChangeStackingLevel(wwin->frame->core, WMNormalLevel);
-	wRaiseFrame(wwin->frame->core);
+	ChangeStackingLevel(wwin->frame->core, WMFullscreenLevel);
 
 	wwin->bfs_geometry.x = wwin->frame_x;
 	wwin->bfs_geometry.y = wwin->frame_y;
@@@@ -751,10 +754,15 @@@@ void wUnfullscreenWindow(WWindow *wwin)
 
 	wwin->flags.fullscreen = False;
 
-	if (WFLAGP(wwin, sunken))
-		ChangeStackingLevel(wwin->frame->core, WMSunkenLevel);
-	else if (WFLAGP(wwin, floating))
-		ChangeStackingLevel(wwin->frame->core, WMFloatingLevel);
+	if (wwin->frame->core->stacking->window_level == WMFullscreenLevel) {
+		if (WFLAGP(wwin, sunken)) {
+			ChangeStackingLevel(wwin->frame->core, WMSunkenLevel);
+		} else if (WFLAGP(wwin, floating)) {
+			ChangeStackingLevel(wwin->frame->core, WMFloatingLevel);
+		} else {
+			ChangeStackingLevel(wwin->frame->core, WMNormalLevel);
+		}
+	}
 
 	wWindowConfigure(wwin, wwin->bfs_geometry.x, wwin->bfs_geometry.y,
 			 wwin->bfs_geometry.width, wwin->bfs_geometry.height);
@


1.7
log
@
Merge fix from upstream:

Fix stacking order of dock and fullscreen.

This reverts the commits:
 311ab6b08ccf ("Raise fullscreened window")
 a504370f3b27 ("Remove WMFullscreenLevel")

Removing WMFullscreenLevel had the side effect that a dock or panel
having the _NET_WM_WINDOW_TYPE_DOCK type would stack on top of
fullscreen windows, obscuring part of them.  This is unwanted. No
other window should cover a focused fullscreen window.
@
text
@d1 17
a17 1
$OpenBSD$
d43 13
a55 2
+++ src/actions.c	Fri Aug  5 15:03:49 2016
@@@@ -726,8 +726,7 @@@@ void wFullscreenWindow(WWindow *wwin)
d65 1
a65 1
@@@@ -751,10 +750,15 @@@@ void wUnfullscreenWindow(WWindow *wwin)
@


1.6
log
@
Update to WindowMaker-0.95.7

OK reyk@@, sebastia@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_actions_c,v 1.5 2013/09/19 20:43:54 sthen Exp $
d3 52
a54 59
1. Fix periodic focus bug
From: Pedro Gimeno <parigalo@@formauri.es>
Date: Mon, 19 May 2008 17:52:00 -0300
http://repo.or.cz/w/wmaker-crm.git/commitdiff/c91bb1ba1360006c568db37438779e525868cf17

2. Bugfix: java menu problem after resize, maximize
From: Ambrus Szabo <donamo@@donamo.hu>
Date: Tue, 5 Apr 2011 12:36:11 +0200
http://repo.or.cz/w/wmaker-crm.git/commit/7490b14bf0573283cd11eea3b1b6392c6f38e2dd

--- src/actions.c.orig	Sun Jul  3 18:25:14 2005
+++ src/actions.c	Thu Sep 19 21:43:05 2013
@@@@ -78,6 +78,15 @@@@ static struct {
 #define SHADE_STEPS	shadePars[(int)wPreferences.shade_speed].steps
 #define SHADE_DELAY	shadePars[(int)wPreferences.shade_speed].delay
 
+static int
+compareTimes(Time t1, Time t2)
+{
+	Time diff;
+	if (t1 == t2)
+		return 0;
+	diff = t1 - t2;
+	return (diff < 60000) ? 1 : -1;
+}
 
 /*
  *----------------------------------------------------------------------
@@@@ -99,11 +108,11 @@@@ wSetFocusTo(WScreen *scr, WWindow  *wwin)
 
     WWindow *old_focused;
     WWindow *focused=scr->focused_window;
-    int timestamp=LastTimestamp;
+    Time timestamp=LastTimestamp;
     WApplication *oapp=NULL, *napp=NULL;
     int wasfocused;
 
-    if (scr->flags.ignore_focus_events || LastFocusChange > timestamp)
+    if (scr->flags.ignore_focus_events || compareTimes(LastFocusChange, timestamp) > 0)
         return;
 
     if (!old_scr)
@@@@ -463,8 +472,8 @@@@ wMaximizeWindow(WWindow *wwin, int directions)
                     &new_width, &new_height);
 
     wWindowConfigure(wwin, new_x, new_y, new_width, new_height);
+    wWindowSynthConfigureNotify(wwin);
 
-
     WMPostNotificationName(WMNChangedState, wwin, "maximize");
 
     wSoundPlay(WSOUND_MAXIMIZE);
@@@@ -494,6 +503,7 @@@@ wUnmaximizeWindow(WWindow *wwin)
 
     wwin->flags.maximized = 0;
     wWindowConfigure(wwin, x, y, w, h);
+    wWindowSynthConfigureNotify(wwin);
 
     WMPostNotificationName(WMNChangedState, wwin, "maximize");
d56 2
@


1.5
log
@regen patches
@
text
@d1 1
a1 1
$OpenBSD: patch-src_actions_c,v 1.4 2013/08/22 23:03:21 sthen Exp $
@


1.4
log
@- Add upstream patch to fix java/netbeans menu problem after
resize, maximize. From Christian Schulte on ports@@.

- While there: tidy Makefile, regen PLIST and merge PFRAG.shared,
don't USE_GROFF.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_actions_c,v 1.3 2012/03/17 17:32:28 dcoppa Exp $
d13 2
a14 2
--- src/actions.c.orig	Sun Jul  3 19:25:14 2005
+++ src/actions.c	Wed Jul 17 23:20:47 2013
d47 1
a47 1

d50 1
a50 1

d53 1
a53 1

d56 1
a56 1

d60 1
a60 1

d62 1
a62 1

@


1.3
log
@Fix the "periodic focus bug" described at:
http://repo.or.cz/w/wmaker-crm.git/commitdiff/c91bb1ba1360006c568db37438779e525868cf17

From upstream git via Bryan Linton (bl AT shoshoni DOT info)
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 2
This is a backport from WindowMaker cvs which fixes the
"periodic focus bug" described at:
d8 7
a14 2
--- src/actions.c.orig	Fri Mar 16 17:10:27 2012
+++ src/actions.c	Fri Mar 16 17:11:57 2012
d45 18
@


1.2
log
@update to 0.92.0
@
text
@d1 11
a11 5
--- src/actions.c	Mon Aug 11 15:29:31 2003
+++ src/actions.c	Mon Aug 11 15:31:56 2003
@@@@ -144,6 +144,14 @@@@
       old_scr=scr;
     old_focused=old_scr->focused_window;
d13 9
a21 9
+    /*
+     * Safeguard: make sure the timestamp is monotonically increasing
+     * (very unlikely that this will be needed, still a safeguard)
+     */
+    if (timestamp <= LastFocusChange)
+	    timestamp = LastFocusChange + 1;
+
+
     LastFocusChange = timestamp;
d24 2
a25 8
@@@@ -150,8 +158,8 @@@@
  * This is a hack, because XSetInputFocus() should have a proper
  * timestamp instead of CurrentTime but it seems that some times
  * clients will not receive focus properly that way.
+ */
     if (ignoreTimestamp)
-*/
       timestamp = CurrentTime;
d27 12
a38 1
     if (old_focused)
@


1.1
log
@fix some weird bugs interacting with gtk2 apps.  from wm cvs and debian.
ok wilfried@@
@
text
@@

