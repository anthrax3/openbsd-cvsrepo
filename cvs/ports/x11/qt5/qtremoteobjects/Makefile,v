head	1.2;
access;
symbols
	zhuk_20170615:1.1.1.1 zhuk:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.07.16.19.19.05;	author espie;	state Exp;
branches;
next	1.1;
commitid	tt0GhWK5c4uf9ILG;

1.1
date	2017.06.15.08.33.50;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	XPHayF1JYh78510U;

1.1.1.1
date	2017.06.15.08.33.50;	author zhuk;	state Exp;
branches;
next	;
commitid	XPHayF1JYh78510U;


desc
@@


1.2
log
@use COMPILER_LIBCXX where applicable
@
text
@# $OpenBSD: Makefile,v 1.1.1.1 2017/06/15 08:33:50 zhuk Exp $

QT5NAME =		QtRemoteObjects
COMMENT-main =		inter-process communication using Qt5 objects

MULTI_PACKAGES =	-main -examples -qch -html -docindex

SHARED_LIBS =	Qt5RemoteObjects		0.0

WANTLIB =  ${COMPILER_LIBCXX} GL Qt5Core Qt5Gui Qt5Network Qt5Qml c m pthread

LIB_DEPENDS =		x11/qt5/qtdeclarative>=${QT5_VERSION},<${QT5_NEXT_VERSION}

FLAVORS =		debug
PSEUDO_FLAVORS =	no_examples no_qch no_html
FLAVOR ?=

.include <bsd.port.mk>
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d10 1
a10 1
WANTLIB =  ${LIBCXX} GL Qt5Core Qt5Gui Qt5Network Qt5Qml c m pthread
@


1.1.1.1
log
@Qt Remote Objects (QtRO) is an inter-process communication (IPC) module
developed for Qt. The idea is to extend existing Qt's functionalities to enable
an easy exchange of information between processes or computers.

One of the key features of Qt to enable this is the distinction between an
objects API (defined by its Q_Property, Signals and Slots) and the
implementation of that API. The purpose of QtRO is to meet the expected API,
even if the true QObject is in a different process. A Slot called on a copy of
an object (called a Replica) is forwarded to the true object (called a Source)
for handling. Updates to the Source, either property changes or emitted Signals,
are forwarded to every Replica.

This is a part of upcoming Qt 5.9.
@
text
@@
