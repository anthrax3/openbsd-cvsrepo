head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	zhuk_20141208:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.03.06.11.56.41;	author zhuk;	state Exp;
branches;
next	1.4;
commitid	BJQWSohFrHUH1Fq7;

1.4
date	2015.10.20.21.37.26;	author zhuk;	state Exp;
branches;
next	1.3;
commitid	Kw0gZvtvCCO6gSWv;

1.3
date	2015.05.04.10.37.01;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	y1NHrMLTRHgXhzt5;

1.2
date	2015.04.19.13.18.28;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	2KOIQzUUZQrQrGt0;

1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	T3VSUps0elxgCqso;

1.1.1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches;
next	;
commitid	T3VSUps0elxgCqso;


desc
@@


1.5
log
@Update to Qt 5.5.1.

Some updates, unbreaking stuff, to follow.
@
text
@$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake2_cpp,v 1.4 2015/10/20 21:37:26 zhuk Exp $
1. Un-hardcode system paths and compiler flags.
2. Make sure some paths are listed before others, needed to
   make sure egcc won't pick up /usr/include before its own
   directories.
3. Respect OpenBSD shared library naming rules.
--- qtbase/qmake/generators/unix/unixmake2.cpp.ports.orig	Tue Oct 13 07:35:09 2015
+++ qtbase/qmake/generators/unix/unixmake2.cpp	Thu Dec 10 09:22:47 2015
@@@@ -74,6 +74,10 @@@@ UnixMakefileGenerator::writeMakefile(QTextStream &t)
     if (writeDummyMakefile(t))
         return true;
 
+    t << "LOCALBASE=" << LOCALBASE << endl
+      << "X11BASE="   << X11BASE   << endl
+      << endl;
+
     if (project->first("TEMPLATE") == "app" ||
         project->first("TEMPLATE") == "lib" ||
         project->first("TEMPLATE") == "aux") {
@@@@ -181,12 +185,12 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
     t << "DEFINES       = "
       << varGlue("PRL_EXPORT_DEFINES","-D"," -D"," ")
       << varGlue("DEFINES","-D"," -D","") << endl;
-    t << "CFLAGS        = " << var("QMAKE_CFLAGS") << " $(DEFINES)\n";
-    t << "CXXFLAGS      = " << var("QMAKE_CXXFLAGS") << " $(DEFINES)\n";
+    t << "CFLAGS        = " << var("QMAKE_CFLAGS") << " $(DEFINES) $(COPTS)\n";
+    t << "CXXFLAGS      = " << var("QMAKE_CXXFLAGS") << " $(DEFINES) $(CXXOPTS)\n";
     t << "INCPATH       =";
     {
         QString isystem = var("QMAKE_CFLAGS_ISYSTEM");
-        const ProStringList &incs = project->values("INCLUDEPATH");
+        ProStringList incs = project->values("QMAKE_INCDIR_PREPEND") + project->values("INCLUDEPATH");
         for(int i = 0; i < incs.size(); ++i) {
             const ProString &inc = incs.at(i);
             if (inc.isEmpty())
@@@@ -286,12 +290,19 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
             t << "TARGET0       = " << fileVar("TARGET_") << endl;
         } else if (!project->isActiveConfig("unversioned_libname")) {
             t << "TARGET0       = " << fileVar("TARGET_") << endl;
-            if (project->isEmpty("QMAKE_HPUX_SHLIB")) {
-                t << "TARGETD       = " << fileVar("TARGET_x.y.z") << endl;
-                t << "TARGET1       = " << fileVar("TARGET_x") << endl;
-                t << "TARGET2       = " << fileVar("TARGET_x.y") << endl;
+            if (!project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
+                t << "LIB" << fileVar("QMAKE_ORIG_TARGET") << "_VERSION   = "
+                  << project->first("VER_MAJ") << "." << project->first("VER_MIN")
+                  << endl;
+                t << "TARGETD       = " << fileVar("TARGET_x.y") << endl;
             } else {
-                t << "TARGETD       = " << fileVar("TARGET_x") << endl;
+                if (project->isEmpty("QMAKE_HPUX_SHLIB")) {
+                    t << "TARGETD       = " << fileVar("TARGET_x.y.z") << endl;
+                    t << "TARGET1       = " << fileVar("TARGET_x") << endl;
+                    t << "TARGET2       = " << fileVar("TARGET_x.y") << endl;
+                } else {
+                    t << "TARGETD       = " << fileVar("TARGET_x") << endl;
+                }
             }
         }
     }
@@@@ -626,7 +637,8 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
             if(!project->isEmpty("QMAKE_POST_LINK"))
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
-        } else if(project->isEmpty("QMAKE_HPUX_SHLIB")) {
+        } else if(project->isEmpty("QMAKE_HPUX_SHLIB")
+                      && project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
             t << "\n\t";
 
             if (!project->isActiveConfig("unversioned_libname"))
@@@@ -660,7 +672,22 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
             if(!project->isEmpty("QMAKE_POST_LINK"))
                 t << "\n\t" << var("QMAKE_POST_LINK");
             t << endl << endl;
+        } else if (!project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
+            // OpenBSD-specific shared libraries handling:
+            // libfoo.so.X.Y, without any symlinks.
+            // 
+            t << "\n\t"
+              << "-$(DEL_FILE) $(TARGET)\n\t"
+              << var("QMAKE_LINK_SHLIB_CMD");
+            if(!destdir.isEmpty())
+                t  << "\n\t-$(DEL_FILE) " << destdir << "$(TARGET)"
+                   << "\n\t-$(MOVE) $(TARGET)  " << destdir;
+            if(!project->isEmpty("QMAKE_POST_LINK"))
+                t << "\n\t" << var("QMAKE_POST_LINK");
+            t << endl << endl;
         } else {
+            // HP-UX-specific shared libraries handling:
+            // libfoo.sl.X, with symlink to libfoo.sl.
             t << "\n\t"
               << "-$(DEL_FILE) $(TARGET) $(TARGET0)\n\t"
               << var("QMAKE_LINK_SHLIB_CMD") << "\n\t";
@@@@ -1239,6 +1266,11 @@@@ void UnixMakefileGenerator::init2()
                 project->values("TARGET_x").append("lib" + project->first("TARGET") + "." +
                                                         project->first("VER_MAJ"));
             project->values("TARGET") = project->values("TARGET_x");
+        } else if (!project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
+            project->values("TARGET_x.y").append("lib" + project->first("TARGET") +
+                                                      "." + project->first("QMAKE_EXTENSION_SHLIB") + 
+                                                      ".$(LIB" + project->first("TARGET") + "_VERSION)");
+            project->values("TARGET") = project->values("TARGET_x.y");
         } else if (!project->isEmpty("QMAKE_AIX_SHLIB")) {
             project->values("TARGET_").append(project->first("QMAKE_PREFIX_STATICLIB") + project->first("TARGET")
                     + "." + project->first("QMAKE_EXTENSION_STATICLIB"));
@@@@ -1431,17 +1463,27 @@@@ UnixMakefileGenerator::writeLibtoolFile()
     t << "\n";
 
     t << "# The name that we can dlopen(3).\n"
-      << "dlname='" << fileVar(project->isActiveConfig("plugin") ? "TARGET" : "TARGET_x")
-      << "'\n\n";
+      << "dlname='";
+    if (project->isActiveConfig("plugin"))
+        t << fileVar("TARGET");
+    else if (!project->isEmpty("QMAKE_OPENBSD_SHLIB"))
+        t << fileVar("TARGET_x.y");
+    else
+        t << fileVar("TARGET_x");
+    t << "'\n\n";
 
     t << "# Names of this library.\n";
     t << "library_names='";
     if(project->isActiveConfig("plugin")) {
         t << fileVar("TARGET");
     } else {
-        if (project->isEmpty("QMAKE_HPUX_SHLIB"))
-            t << fileVar("TARGET_x.y.z") << ' ';
-        t << fileVar("TARGET_x") << ' ' << fileVar("TARGET_");
+        if (!project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
+            t << fileVar("TARGET_x.y") << " ";
+        } else {
+            if (!project->isEmpty("QMAKE_HPUX_SHLIB"))
+                t << fileVar("TARGET_x.y.z") << " ";
+            t << fileVar("TARGET_x") << " " << fileVar("TARGET_");
+        }
     }
     t << "'\n\n";
 
@


1.4
log
@Allow COPTS/CXXOPTS ha^Wfeature to work in qmake-generated makefiles.
Similar feature existed in qt4 port, but was lost during Qt5 porting.

Inspired by conversation with Caspar Schutijser, should help him on
updating Qt Creator port.
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake2_cpp,v 1.3 2015/05/04 10:37:01 zhuk Exp $
d7 3
a9 3
--- qtbase/qmake/generators/unix/unixmake2.cpp.ports.orig	Fri May 29 23:30:27 2015
+++ qtbase/qmake/generators/unix/unixmake2.cpp	Wed Oct  7 19:33:52 2015
@@@@ -75,6 +75,10 @@@@ UnixMakefileGenerator::writeMakefile(QTextStream &t)
d17 4
a20 4
     if (project->values("TEMPLATE").first() == "app" ||
         project->values("TEMPLATE").first() == "lib" ||
         project->values("TEMPLATE").first() == "aux") {
@@@@ -182,12 +186,12 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d34 1
a34 1
             ProString inc = escapeFilePath(incs.at(i));
d36 2
a37 3
@@@@ -283,13 +287,20 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
             t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y")) << endl;
             t << "TARGET0       = " << escapeFilePath(var("TARGET_")) << endl;
d39 1
a39 1
-            t << "TARGET0       = " << escapeFilePath(var("TARGET_")) << endl;
d41 3
a43 3
-                t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y.z")) << endl;
-                t << "TARGET1       = " << escapeFilePath(var("TARGET_x")) << endl;
-                t << "TARGET2       = " << escapeFilePath(var("TARGET_x.y")) << endl;
d45 1
a45 1
+                t << "LIB" << var("QMAKE_ORIG_TARGET") << "_VERSION   = "
d48 1
a48 1
+                t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y")) << endl;
d50 1
a50 2
-                t << "TARGETD       = " << escapeFilePath(var("TARGET_x")) << endl;
+                t << "TARGET0       = " << escapeFilePath(var("TARGET_")) << endl;
d52 3
a54 3
+                    t << "TARGETD       = " << escapeFilePath(var("TARGET_x.y.z")) << endl;
+                    t << "TARGET1       = " << escapeFilePath(var("TARGET_x")) << endl;
+                    t << "TARGET2       = " << escapeFilePath(var("TARGET_x.y")) << endl;
d56 1
a56 1
+                    t << "TARGETD       = " << escapeFilePath(var("TARGET_x")) << endl;
d61 1
a61 1
@@@@ -615,7 +626,8 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d71 1
a71 1
@@@@ -649,7 +661,22 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d94 1
a94 1
@@@@ -1202,6 +1229,11 @@@@ void UnixMakefileGenerator::init2()
d106 1
a106 1
@@@@ -1394,17 +1426,27 @@@@ UnixMakefileGenerator::writeLibtoolFile()
d110 1
a110 1
-      << "dlname='" << var(project->isActiveConfig("plugin") ? "TARGET" : "TARGET_x")
d114 1
a114 1
+        t << var("TARGET");
d116 1
a116 1
+        t << var("TARGET_x.y");
d118 1
a118 1
+        t << var("TARGET_x");
d124 1
a124 1
         t << var("TARGET");
d127 2
a128 2
-            t << var("TARGET_x.y.z") << " ";
-        t << var("TARGET_x") << " " << var("TARGET_");
d130 1
a130 1
+            t << var("TARGET_x.y") << " ";
d133 2
a134 2
+                t << var("TARGET_x.y.z") << " ";
+            t << var("TARGET_x") << " " << var("TARGET_");
@


1.3
log
@Improve hack that avoids picking up compiler intrinsics from
/usr/include in favor of /usr/local/lib/gcc ones by Qt5: now it
helps all qmake-qt5-based software as well.

Fixes problems aja@@ was seeing with games/gottcode/tanglet at least.
@
text
@d1 2
a2 2
$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake2_cpp,v 1.2 2015/04/19 13:18:28 zhuk Exp $
1. Un-hardcode system paths.
d7 2
a8 2
--- qtbase/qmake/generators/unix/unixmake2.cpp.ports.orig	Tue Feb 17 07:56:37 2015
+++ qtbase/qmake/generators/unix/unixmake2.cpp	Sun May  3 17:34:28 2015
d20 8
a27 1
@@@@ -187,7 +191,7 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d96 1
a96 1
@@@@ -1199,6 +1226,11 @@@@ void UnixMakefileGenerator::init2()
d108 1
a108 1
@@@@ -1391,17 +1423,27 @@@@ UnixMakefileGenerator::writeLibtoolFile()
@


1.2
log
@Update x11/qt5 to 5.4.1. Improvements included:

  * Builds fine when another version being installed;
  * Start building documentation, HTML generator bug was fixed (patch is
    waiting for inclusion upstream);

This update do NOT include QtWebEngine: it relies on building from
Chromium sources (bundled with Qt5) and is a real pain to proceed; so lets
concentrate on what we already have.

All dependant ports are checked by building and running.
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake2_cpp,v 1.1.1.1 2014/12/08 20:33:38 zhuk Exp $
d3 4
a6 1
2. Respect OpenBSD shared library naming rules.
d8 1
a8 1
+++ qtbase/qmake/generators/unix/unixmake2.cpp	Wed Apr  8 00:38:30 2015
d20 9
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d4 3
a6 3
--- qtbase/qmake/generators/unix/unixmake2.cpp.ports.orig	Mon Nov  3 17:43:42 2014
+++ qtbase/qmake/generators/unix/unixmake2.cpp	Tue Nov  4 14:06:19 2014
@@@@ -83,6 +83,10 @@@@ UnixMakefileGenerator::writeMakefile(QTextStream &t)
d17 1
a17 1
@@@@ -235,13 +239,20 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d44 1
a44 1
@@@@ -574,7 +585,8 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d54 1
a54 1
@@@@ -608,7 +620,22 @@@@ UnixMakefileGenerator::writeMakeParts(QTextStream &t)
d77 1
a77 1
@@@@ -1125,6 +1152,11 @@@@ void UnixMakefileGenerator::init2()
d89 1
a89 1
@@@@ -1348,17 +1380,27 @@@@ UnixMakefileGenerator::writeLibtoolFile()
@


1.1.1.1
log
@Import Qt 5.3.2.

Qt is a full development framework with tools designed to streamline
the creation of applications and user interfaces for desktop,
embedded, and mobile platforms.

This port is not enabled yet, because some ports will pick up Qt5
instead of Qt4, breaking build. Those will be fixed separately soon.

There are some non-critical things left to do:

1. Support for OpenBSD sensors framework.
2. V4L2 support.
3. -L${LOCALBASE}/* could come before -L${WRKBUILD}/* when linking is
   done across Qt module boundaries. This means that builds of Qt 5.y
   while having Qt 5.x installed (x < y) will be busted.

Volunteers are welcome to come in and help fixing those problems.

Last note: don't even try to build "debug" FLAVOR unless you know
what you're doing and you have about 20GB of free space. You've
been warned.

landry@@ agrees on continuing working in-tree
@
text
@@
