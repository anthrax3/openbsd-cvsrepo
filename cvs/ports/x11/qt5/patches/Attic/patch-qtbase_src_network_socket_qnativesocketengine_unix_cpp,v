head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	zhuk_20141208:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.12.25.14.28.41;	author zhuk;	state dead;
branches;
next	1.3;
commitid	iMrEYml4fihwjdKL;

1.3
date	2016.02.22.20.38.08;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	2fwGFzoZqRbBGFIx;

1.2
date	2015.04.19.13.18.28;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	2KOIQzUUZQrQrGt0;

1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	T3VSUps0elxgCqso;

1.1.1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches;
next	;
commitid	T3VSUps0elxgCqso;


desc
@@


1.4
log
@Remove leftover files from Qt 5.5 times.
@
text
@$OpenBSD: patch-qtbase_src_network_socket_qnativesocketengine_unix_cpp,v 1.3 2016/02/22 20:38:08 zhuk Exp $
1. Fix for cases of >1024 open files: https://bugreports.qt.io/browse/QTBUG-51274
2. Unbreak compilation (EPROTO).
--- qtbase/src/network/socket/qnativesocketengine_unix.cpp.ports.orig	Tue Feb 17 07:56:38 2015
+++ qtbase/src/network/socket/qnativesocketengine_unix.cpp	Sun Feb 21 23:42:16 2016
@@@@ -42,6 +42,7 @@@@
 #include <time.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <poll.h>
 #ifndef QT_NO_IPV6IFNAME
 #include <net/if.h>
 #endif
@@@@ -622,7 +623,9 @@@@ int QNativeSocketEnginePrivate::nativeAccept()
             setError(QAbstractSocket::SocketResourceError, NotSocketErrorString);
             break;
         case EPROTONOSUPPORT:
+#ifdef EPROTO
         case EPROTO:
+#endif
         case EAFNOSUPPORT:
         case EINVAL:
             setError(QAbstractSocket::UnsupportedSocketOperationError, ProtocolUnsupportedErrorString);
@@@@ -1192,48 +1195,31 @@@@ int QNativeSocketEnginePrivate::nativeSelect(int timeo
 
 int QNativeSocketEnginePrivate::nativeSelect(int timeout, bool selectForRead) const
 {
-    fd_set fds;
-    FD_ZERO(&fds);
-    FD_SET(socketDescriptor, &fds);
+    struct pollfd pd;
 
-    struct timespec tv;
-    tv.tv_sec = timeout / 1000;
-    tv.tv_nsec = (timeout % 1000) * 1000 * 1000;
-
-    int retval;
-    if (selectForRead)
-        retval = qt_safe_select(socketDescriptor + 1, &fds, 0, 0, timeout < 0 ? 0 : &tv);
-    else
-        retval = qt_safe_select(socketDescriptor + 1, 0, &fds, 0, timeout < 0 ? 0 : &tv);
-
-    return retval;
+    memset(&pd, 0, sizeof(struct pollfd));
+    pd.fd = socketDescriptor;
+    pd.events = selectForRead ? POLLIN : POLLOUT;
+    return poll(&pd, 1, timeout);
 }
 
 int QNativeSocketEnginePrivate::nativeSelect(int timeout, bool checkRead, bool checkWrite,
                        bool *selectForRead, bool *selectForWrite) const
 {
-    fd_set fdread;
-    FD_ZERO(&fdread);
-    if (checkRead)
-        FD_SET(socketDescriptor, &fdread);
-
-    fd_set fdwrite;
-    FD_ZERO(&fdwrite);
-    if (checkWrite)
-        FD_SET(socketDescriptor, &fdwrite);
-
-    struct timespec tv;
-    tv.tv_sec = timeout / 1000;
-    tv.tv_nsec = (timeout % 1000) * 1000 * 1000;
-
+    struct pollfd pd;
     int ret;
-    ret = qt_safe_select(socketDescriptor + 1, &fdread, &fdwrite, 0, timeout < 0 ? 0 : &tv);
 
-    if (ret <= 0)
-        return ret;
-    *selectForRead = FD_ISSET(socketDescriptor, &fdread);
-    *selectForWrite = FD_ISSET(socketDescriptor, &fdwrite);
-
+    memset(&pd, 0, sizeof(struct pollfd));
+    pd.fd = socketDescriptor;
+    if (checkRead)
+        pd.events |= POLLIN;
+    if (checkWrite)
+        pd.events |= POLLOUT;
+    ret = poll(&pd, 1, timeout);
+    if (ret > 0) {
+        *selectForRead = ((pd.events & POLLIN) == POLLIN);   
+        *selectForWrite = ((pd.events & POLLOUT) == POLLOUT);   
+    }
     return ret;
 }
 #endif // Q_OS_BLACKBERRY
@


1.3
log
@Fix fd_set handling bug in Qt5 as well.

okay naddy@@
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_src_network_socket_qnativesocketengine_unix_cpp,v 1.2 2015/04/19 13:18:28 zhuk Exp $
@


1.2
log
@Update x11/qt5 to 5.4.1. Improvements included:

  * Builds fine when another version being installed;
  * Start building documentation, HTML generator bug was fixed (patch is
    waiting for inclusion upstream);

This update do NOT include QtWebEngine: it relies on building from
Chromium sources (bundled with Qt5) and is a real pain to proceed; so lets
concentrate on what we already have.

All dependant ports are checked by building and running.
@
text
@d1 3
a3 2
$OpenBSD: patch-qtbase_src_network_socket_qnativesocketengine_unix_cpp,v 1.1.1.1 2014/12/08 20:33:38 zhuk Exp $
Unbreak compilation.
d5 10
a14 2
+++ qtbase/src/network/socket/qnativesocketengine_unix.cpp	Wed Apr  8 00:38:30 2015
@@@@ -622,7 +622,9 @@@@ int QNativeSocketEnginePrivate::nativeAccept()
d24 66
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- qtbase/src/network/socket/qnativesocketengine_unix.cpp.ports.orig	Sun Nov  2 17:26:25 2014
+++ qtbase/src/network/socket/qnativesocketengine_unix.cpp	Sun Nov  2 17:27:13 2014
@@@@ -604,7 +604,9 @@@@ int QNativeSocketEnginePrivate::nativeAccept()
@


1.1.1.1
log
@Import Qt 5.3.2.

Qt is a full development framework with tools designed to streamline
the creation of applications and user interfaces for desktop,
embedded, and mobile platforms.

This port is not enabled yet, because some ports will pick up Qt5
instead of Qt4, breaking build. Those will be fixed separately soon.

There are some non-critical things left to do:

1. Support for OpenBSD sensors framework.
2. V4L2 support.
3. -L${LOCALBASE}/* could come before -L${WRKBUILD}/* when linking is
   done across Qt module boundaries. This means that builds of Qt 5.y
   while having Qt 5.x installed (x < y) will be busted.

Volunteers are welcome to come in and help fixing those problems.

Last note: don't even try to build "debug" FLAVOR unless you know
what you're doing and you have about 20GB of free space. You've
been warned.

landry@@ agrees on continuing working in-tree
@
text
@@
