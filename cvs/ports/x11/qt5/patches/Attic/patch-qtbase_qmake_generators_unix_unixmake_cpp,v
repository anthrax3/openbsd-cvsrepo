head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	zhuk_20141208:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.12.25.14.28.41;	author zhuk;	state dead;
branches;
next	1.3;
commitid	iMrEYml4fihwjdKL;

1.3
date	2016.03.06.11.56.41;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	BJQWSohFrHUH1Fq7;

1.2
date	2015.04.19.13.18.28;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	2KOIQzUUZQrQrGt0;

1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	T3VSUps0elxgCqso;

1.1.1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches;
next	;
commitid	T3VSUps0elxgCqso;


desc
@@


1.4
log
@Remove leftover files from Qt 5.5 times.
@
text
@$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake_cpp,v 1.3 2016/03/06 11:56:41 zhuk Exp $
1. Always prepend project directory to list of linking directories,
   to avoid picking up wrong library from system.
2. Try to avoid picking up system libraries instead of locally built ones.
3. Don't special case GNU make, BSD make isn't that bad, too.
4. Respect OpenBSD shared library naming rules.
--- qtbase/qmake/generators/unix/unixmake.cpp.ports.orig	Tue Oct 13 07:35:09 2015
+++ qtbase/qmake/generators/unix/unixmake.cpp	Thu Dec 10 09:33:15 2015
@@@@ -42,7 +42,27 @@@@
 
 QT_BEGIN_NAMESPACE
 
+// Helper for putting -L for in-build-tree directories first, all other arguments later;
+// avoids picking up system libraries instead of built ones.
 void
+UnixMakefileGenerator::separateInternalLibdirs(ProStringList &libs, ProStringList &libdirsInt, QString prefix) {
+    QFileInfo fi(project->cacheFile().isEmpty() ? project->buildRoot() : project->cacheFile());
+    QFileInfo fi2(fi.dir().path());
+    QDir dir(fi2.dir().path());
+    QString lbroot(prefix + (dir.isRoot() ? project->buildRoot() : dir.path()) + QDir::separator());
+    for (int i = 0; i < libs.size();) {
+        QString l(libs[i].toQString());
+        if (l.startsWith(lbroot)) {
+            if (!libdirsInt.contains(l))
+                libdirsInt += l;
+            libs.remove(i);
+        } else {
+            ++i;
+        }
+    }
+}
+
+void
 UnixMakefileGenerator::init()
 {
     if(project->isEmpty("QMAKE_EXTENSION_SHLIB")) {
@@@@ -117,6 +137,10 @@@@ UnixMakefileGenerator::init()
               : project->isActiveConfig("ti_linker") ? "--search_path="
               : "-L");
     ProStringList ldadd;
+    QString destdir = project->first("DESTDIR").toQString();
+    if (destdir.isEmpty())
+        destdir = qmake_getpwd();
+    project->values("QMAKE_LIBDIR_FLAGS") += "-L" + escapeFilePath(destdir);
     if(!project->isEmpty("QMAKE_LIBDIR")) {
         const ProStringList &libdirs = project->values("QMAKE_LIBDIR");
         for(int i = 0; i < libdirs.size(); ++i) {
@@@@ -134,8 +158,16 @@@@ UnixMakefileGenerator::init()
         }
         ldadd += project->values("QMAKE_FRAMEWORKPATH_FLAGS");
     }
+
+    // Put -L for in-build-tree directories first, all other arguments later;
+    // avoids picking up system libraries instead of built ones.
     ProStringList &qmklibs = project->values("QMAKE_LIBS");
-    qmklibs = ldadd + qmklibs;
+    qmklibs += ldadd;
+    ProStringList libdirsInternal;
+    separateInternalLibdirs(qmklibs, libdirsInternal, QString::fromLatin1("-L"));
+    separateInternalLibdirs(project->values("QMAKE_LIBS_PRIVATE"), libdirsInternal, QString::fromLatin1("-L"));
+    qmklibs = libdirsInternal + qmklibs;
+
     if (!project->isEmpty("QMAKE_RPATHDIR") && !project->isEmpty("QMAKE_LFLAGS_RPATH")) {
         const ProStringList &rpathdirs = project->values("QMAKE_RPATHDIR");
         for (int i = 0; i < rpathdirs.size(); ++i) {
@@@@ -146,14 +178,17 @@@@ UnixMakefileGenerator::init()
         }
     }
     if (!project->isEmpty("QMAKE_RPATHLINKDIR")) {
-        const ProStringList &rpathdirs = project->values("QMAKE_RPATHLINKDIR");
+        ProStringList &rpathdirs = project->values("QMAKE_RPATHLINKDIR");
+        ProStringList rpathdirsInternal;
+        separateInternalLibdirs(rpathdirs, rpathdirsInternal, QString());
+        rpathdirs = rpathdirsInternal + rpathdirs;
         for (int i = 0; i < rpathdirs.size(); ++i) {
             if (!project->isEmpty("QMAKE_LFLAGS_RPATHLINK"))
                 project->values("QMAKE_LFLAGS") += var("QMAKE_LFLAGS_RPATHLINK") + escapeFilePath(QFileInfo(rpathdirs[i].toQString()).absoluteFilePath());
         }
     }
 
-    if(project->isActiveConfig("GNUmake") && !project->isEmpty("QMAKE_CFLAGS_DEPS"))
+    if(!project->isEmpty("QMAKE_CFLAGS_DEPS"))
         include_deps = true; //do not generate deps
     if(project->isActiveConfig("compile_libtool"))
         Option::obj_ext = ".lo"; //override the .o
@@@@ -552,6 +587,9 @@@@ UnixMakefileGenerator::processPrlFiles()
     static const char * const lflags[] = { "QMAKE_LIBS", "QMAKE_LIBS_PRIVATE", 0 };
     for (int i = 0; lflags[i]; i++) {
         ProStringList &l = project->values(lflags[i]);
+        ProStringList libdirsInt;
+        separateInternalLibdirs(l, libdirsInt, libArg);
+        l = libdirsInt + l;
         for(int lit = 0; lit < l.size(); ++lit) {
             QString opt = l.at(lit).trimmed().toQString();
             if(opt.startsWith("-")) {
@@@@ -690,6 +728,13 @@@@ UnixMakefileGenerator::processPrlFiles()
             }
         }
     }
+    ProStringList libdirsInt;
+    for (int i = 0; lflags[i]; i++) {
+        ProStringList &l = project->values(lflags[i]);
+        separateInternalLibdirs(l, libdirsInt, libArg);
+    }
+    ProStringList &libs = project->values("QMAKE_LIBS");
+    libs = libdirsInt + libs;
 }
 
 QString
@@@@ -718,7 +763,8 @@@@ UnixMakefileGenerator::defaultInstall(const QString &t
     } else if(project->first("TEMPLATE") == "app") {
         target = "$(QMAKE_TARGET)";
     } else if(project->first("TEMPLATE") == "lib") {
-        if(project->isEmpty("QMAKE_CYGWIN_SHLIB")) {
+        if(project->isEmpty("QMAKE_CYGWIN_SHLIB") 
+               && project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
             if (!project->isActiveConfig("staticlib")
                     && !project->isActiveConfig("plugin")
                     && !project->isActiveConfig("unversioned_libname")) {
@


1.3
log
@Update to Qt 5.5.1.

Some updates, unbreaking stuff, to follow.
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake_cpp,v 1.2 2015/04/19 13:18:28 zhuk Exp $
@


1.2
log
@Update x11/qt5 to 5.4.1. Improvements included:

  * Builds fine when another version being installed;
  * Start building documentation, HTML generator bug was fixed (patch is
    waiting for inclusion upstream);

This update do NOT include QtWebEngine: it relies on building from
Chromium sources (bundled with Qt5) and is a real pain to proceed; so lets
concentrate on what we already have.

All dependant ports are checked by building and running.
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_qmake_generators_unix_unixmake_cpp,v 1.1.1.1 2014/12/08 20:33:38 zhuk Exp $
d7 2
a8 2
--- qtbase/qmake/generators/unix/unixmake.cpp.ports.orig	Tue Feb 17 07:56:37 2015
+++ qtbase/qmake/generators/unix/unixmake.cpp	Sun Apr 19 00:14:44 2015
d36 2
a37 2
     if(init_flag)
@@@@ -144,6 +164,10 @@@@ UnixMakefileGenerator::init()
d41 1
a41 1
+    QString destdir = unescapeFilePath(project->first("DESTDIR").toQString());
d48 1
a48 1
@@@@ -161,8 +185,16 @@@@ UnixMakefileGenerator::init()
d66 1
a66 1
@@@@ -173,14 +205,17 @@@@ UnixMakefileGenerator::init()
d86 1
a86 1
@@@@ -576,6 +611,9 @@@@ UnixMakefileGenerator::processPrlFiles()
d96 1
a96 1
@@@@ -714,6 +752,13 @@@@ UnixMakefileGenerator::processPrlFiles()
d110 1
a110 1
@@@@ -742,7 +787,8 @@@@ UnixMakefileGenerator::defaultInstall(const QString &t
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d7 31
a37 3
--- qtbase/qmake/generators/unix/unixmake.cpp.ports.orig	Thu Sep 11 14:48:00 2014
+++ qtbase/qmake/generators/unix/unixmake.cpp	Mon Dec  8 14:32:38 2014
@@@@ -150,6 +150,10 @@@@ UnixMakefileGenerator::init()
d48 1
a48 1
@@@@ -167,8 +171,34 @@@@ UnixMakefileGenerator::init()
d57 5
a61 23
+    ProStringList nqmklibs;
+    QString lbroot = "-L" + project->buildRoot() + "/";
+    for (int i = 0; i < ldadd.size(); ++i) {
+        QString l = ldadd[i].toQString();
+        if (l.startsWith(lbroot))
+            nqmklibs += l;
+    }
+    for (int i = 0; i < qmklibs.size(); ++i) {
+        QString l = qmklibs[i].toQString();
+        if (l.startsWith(lbroot))
+            nqmklibs += l;
+    }
+    for (int i = 0; i < ldadd.size(); ++i) {
+        QString l = ldadd[i].toQString();
+        if (!l.startsWith(lbroot))
+            nqmklibs += l;
+    }
+    for (int i = 0; i < qmklibs.size(); ++i) {
+        QString l = qmklibs[i].toQString();
+        if (!l.startsWith(lbroot))
+            nqmklibs += l;
+    }
+    qmklibs = nqmklibs;
d63 1
a63 1
     if(!project->isEmpty("QMAKE_RPATHDIR")) {
d65 13
a77 2
         for(int i = 0; i < rpathdirs.size(); ++i) {
@@@@ -184,7 +214,7 @@@@ UnixMakefileGenerator::init()
d86 25
a110 1
@@@@ -748,7 +778,8 @@@@ UnixMakefileGenerator::defaultInstall(const QString &t
@


1.1.1.1
log
@Import Qt 5.3.2.

Qt is a full development framework with tools designed to streamline
the creation of applications and user interfaces for desktop,
embedded, and mobile platforms.

This port is not enabled yet, because some ports will pick up Qt5
instead of Qt4, breaking build. Those will be fixed separately soon.

There are some non-critical things left to do:

1. Support for OpenBSD sensors framework.
2. V4L2 support.
3. -L${LOCALBASE}/* could come before -L${WRKBUILD}/* when linking is
   done across Qt module boundaries. This means that builds of Qt 5.y
   while having Qt 5.x installed (x < y) will be busted.

Volunteers are welcome to come in and help fixing those problems.

Last note: don't even try to build "debug" FLAVOR unless you know
what you're doing and you have about 20GB of free space. You've
been warned.

landry@@ agrees on continuing working in-tree
@
text
@@
