head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	zhuk_20141208:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.05.29.07.14.44;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	vgp8FxznlDBhV660;

1.3
date	2015.05.04.10.37.01;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	y1NHrMLTRHgXhzt5;

1.2
date	2014.12.10.22.42.17;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	a3CkgEBubggoSTTG;

1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	T3VSUps0elxgCqso;

1.1.1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches;
next	;
commitid	T3VSUps0elxgCqso;


desc
@@


1.4
log
@Unbreak: libexecinfo header seems to be picked up after the switch to gcc4.9, so
add the corresponding QMAKE_LIBS_EXECINFO to qmake.conf for the time being.
@
text
@$OpenBSD: patch-qtbase_mkspecs_openbsd-g++_qmake_conf,v 1.3 2015/05/04 10:37:01 zhuk Exp $
1. Un-hardcode system paths.
2. Make sure some paths are listed before others, needed to 
   make sure egcc won't pick up /usr/include before its own 
   directories.
3. Respect OpenBSD shared library naming rules.
4. Use common GCC options to avoid duplication.
5. Fix --no-undefined usage and sync other things with current OpenBSD style.
6. Allow C++11 to work.
--- qtbase/mkspecs/openbsd-g++/qmake.conf.ports.orig	Tue Feb 17 05:56:54 2015
+++ qtbase/mkspecs/openbsd-g++/qmake.conf	Thu May 28 18:07:13 2015
@@@@ -7,40 +7,36 @@@@ QMAKE_PLATFORM          = openbsd bsd
 
 QMAKE_COMPILER          = gcc
 
+include(../common/gcc-base-unix.conf)
+include(../common/unix.conf)
+
 QMAKE_CC                = gcc
-QMAKE_LEX               = flex
-QMAKE_LEXFLAGS          =
-QMAKE_YACC              = yacc
-QMAKE_YACCFLAGS         = -d
 QMAKE_CFLAGS            = -pipe
-QMAKE_CFLAGS_DEPS       = -M
-QMAKE_CFLAGS_WARN_ON    = -Wall -W
-QMAKE_CFLAGS_WARN_OFF   = -w
-QMAKE_CFLAGS_RELEASE    = -O2
-QMAKE_CFLAGS_DEBUG      = -g
+QMAKE_CFLAGS_DEBUG      = -O0 -g
 QMAKE_CFLAGS_SHLIB      = -fPIC
-QMAKE_CFLAGS_STATIC_LIB = $$QMAKE_CFLAGS_SHLIB
+QMAKE_CFLAGS_STATIC_LIB = -fPIC
 QMAKE_CFLAGS_YACC       = -Wno-unused -Wno-parentheses
 QMAKE_CFLAGS_THREAD     = -pthread
+QMAKE_CFLAGS_OPTIMIZE_FULL = $$QMAKE_CFLAGS_RELEASE
 
 QMAKE_CXX               = g++
 QMAKE_CXXFLAGS          = $$QMAKE_CFLAGS
+QMAKE_CXXFLAGS_CXX11	= -std=c++11
 QMAKE_CXXFLAGS_DEPS     = $$QMAKE_CFLAGS_DEPS
-QMAKE_CXXFLAGS_WARN_ON  = $$QMAKE_CFLAGS_WARN_ON
-QMAKE_CXXFLAGS_WARN_OFF = $$QMAKE_CFLAGS_WARN_OFF
-QMAKE_CXXFLAGS_RELEASE  = $$QMAKE_CFLAGS_RELEASE
 QMAKE_CXXFLAGS_DEBUG    = $$QMAKE_CFLAGS_DEBUG
 QMAKE_CXXFLAGS_SHLIB    = $$QMAKE_CFLAGS_SHLIB
 QMAKE_CXXFLAGS_STATIC_LIB = $$QMAKE_CFLAGS_STATIC_LIB
 QMAKE_CXXFLAGS_YACC     = $$QMAKE_CFLAGS_YACC
 QMAKE_CXXFLAGS_THREAD   = $$QMAKE_CFLAGS_THREAD
+QMAKE_CXXFLAGS_OPTIMIZE_FULL = $$QMAKE_CXXFLAGS_RELEASE
 
-QMAKE_INCDIR            = /usr/local/include
-QMAKE_LIBDIR            = /usr/local/lib
-QMAKE_INCDIR_X11        = /usr/X11R6/include
-QMAKE_LIBDIR_X11        = /usr/X11R6/lib
-QMAKE_INCDIR_OPENGL     = /usr/X11R6/include
-QMAKE_LIBDIR_OPENGL     = /usr/X11R6/lib
+QMAKE_INCDIR            = $(LOCALBASE)/include
+QMAKE_LIBDIR            = $(LOCALBASE)/lib
+QMAKE_INCDIR_X11        = $(X11BASE)/include
+QMAKE_LIBDIR_X11        = $(X11BASE)/lib
+QMAKE_INCDIR_OPENGL     = $(X11BASE)/include
+QMAKE_LIBDIR_OPENGL     = $(X11BASE)/lib
+QMAKE_INCDIR_PREPEND    = ${OPENBSD_INCDIR_PREPEND}
 
 QMAKE_LINK              = g++
 QMAKE_LINK_SHLIB        = g++
@@@@ -52,22 +48,19 @@@@ QMAKE_LINK_SHLIB_CMD    = $$QMAKE_LINK_SHLIB $(LFLAGS)
 QMAKE_LFLAGS            =
 QMAKE_LFLAGS_RELEASE    =
 QMAKE_LFLAGS_DEBUG      =
-QMAKE_LFLAGS_SHLIB      = -shared
-QMAKE_LFLAGS_PLUGIN     = $$QMAKE_LFLAGS_SHLIB
-QMAKE_LFLAGS_SONAME     = -Wl,-soname,
-QMAKE_LFLAGS_THREAD     = -pthread
-QMAKE_LFLAGS_NOUNDEF    = -Wl,-no_unresolved
 
+QMAKE_OPENBSD_SHLIB	= 1
+
 QMAKE_LIBS              =
 QMAKE_LIBS_DYNLOAD      =
+QMAKE_LIBS_EXECINFO     = -lexecinfo
 QMAKE_LIBS_X11          = -lXext -lX11 -lm
 QMAKE_LIBS_OPENGL       = -lGL
-QMAKE_LIBS_THREAD       =
+QMAKE_LIBS_THREAD       = -lpthread
 
 QMAKE_AR                = ar q
 QMAKE_OBJCOPY           = objcopy
 QMAKE_NM                = nm -P
 QMAKE_RANLIB            = ranlib
 
-include(../common/unix.conf)
 load(qt_config)
@


1.3
log
@Improve hack that avoids picking up compiler intrinsics from
/usr/include in favor of /usr/local/lib/gcc ones by Qt5: now it
helps all qmake-qt5-based software as well.

Fixes problems aja@@ was seeing with games/gottcode/tanglet at least.
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_mkspecs_openbsd-g++_qmake_conf,v 1.2 2014/12/10 22:42:17 zhuk Exp $
d10 2
a11 2
--- qtbase/mkspecs/openbsd-g++/qmake.conf.ports.orig	Tue Feb 17 07:56:54 2015
+++ qtbase/mkspecs/openbsd-g++/qmake.conf	Sun May  3 17:32:50 2015
d68 1
a68 1
@@@@ -52,22 +48,18 @@@@ QMAKE_LINK_SHLIB_CMD    = $$QMAKE_LINK_SHLIB $(LFLAGS)
d82 1
@


1.2
log
@Enable C++11 in Qt5. Needed, e.g., in modern Qt Creator.

With help from espie@@ in alloca(3)-related bits.
@
text
@d1 1
a1 1
$OpenBSD: patch-qtbase_mkspecs_openbsd-g++_qmake_conf,v 1.1.1.1 2014/12/08 20:33:38 zhuk Exp $
d3 10
a12 7
2. Respect OpenBSD shared library naming rules.
3. Use common GCC options to avoid duplication.
4. Fix --no-undefined usage and sync other things with current OpenBSD style.
5. Allow C++11 to work.
--- qtbase/mkspecs/openbsd-g++/qmake.conf.ports.orig	Thu Sep 11 14:48:07 2014
+++ qtbase/mkspecs/openbsd-g++/qmake.conf	Tue Dec  9 16:09:10 2014
@@@@ -7,40 +7,35 @@@@ QMAKE_PLATFORM          = openbsd bsd
d64 1
d68 1
a68 1
@@@@ -52,22 +47,18 @@@@ QMAKE_LINK_SHLIB_CMD    = $$QMAKE_LINK_SHLIB $(LFLAGS)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
d8 2
a9 2
+++ qtbase/mkspecs/openbsd-g++/qmake.conf	Mon Dec  8 16:23:16 2014
@@@@ -7,40 +7,34 @@@@ QMAKE_PLATFORM          = openbsd bsd
d37 1
d64 1
a64 1
@@@@ -52,22 +46,18 @@@@ QMAKE_LINK_SHLIB_CMD    = $$QMAKE_LINK_SHLIB $(LFLAGS)
@


1.1.1.1
log
@Import Qt 5.3.2.

Qt is a full development framework with tools designed to streamline
the creation of applications and user interfaces for desktop,
embedded, and mobile platforms.

This port is not enabled yet, because some ports will pick up Qt5
instead of Qt4, breaking build. Those will be fixed separately soon.

There are some non-critical things left to do:

1. Support for OpenBSD sensors framework.
2. V4L2 support.
3. -L${LOCALBASE}/* could come before -L${WRKBUILD}/* when linking is
   done across Qt module boundaries. This means that builds of Qt 5.y
   while having Qt 5.x installed (x < y) will be busted.

Volunteers are welcome to come in and help fixing those problems.

Last note: don't even try to build "debug" FLAVOR unless you know
what you're doing and you have about 20GB of free space. You've
been warned.

landry@@ agrees on continuing working in-tree
@
text
@@
