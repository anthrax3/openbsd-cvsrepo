head	1.3;
access;
symbols
	OPENBSD_6_1:1.1.0.2
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.07.21.15.28.25;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	7BuLAeEnoqn4hZar;

1.2
date	2017.07.17.08.34.37;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	3tUsNizeEEvC87c0;

1.1
date	2017.01.27.16.13.08;	author zhuk;	state Exp;
branches;
next	;
commitid	QZuellQgImf7lyCn;


desc
@@


1.3
log
@Fix OpenSSL (actually, LibreSSL) run-time detection code.

Original report from Brendan Doyle <doyle.brendan@@yandex.com>, thanks.
@
text
@$OpenBSD: patch-src_network_ssl_qsslsocket_openssl_symbols_cpp,v 1.2 2017/07/17 08:34:37 zhuk Exp $
Unbreak build with LibreSSL.
See also https://github.com/libressl-portable/openbsd/issues/33
Index: src/network/ssl/qsslsocket_openssl_symbols.cpp
--- src/network/ssl/qsslsocket_openssl_symbols.cpp.orig
+++ src/network/ssl/qsslsocket_openssl_symbols.cpp
@@@@ -151,7 +151,7 @@@@ DEFINEFUNC3(int, BIO_read, BIO *a, a, void *b, b, int 
 DEFINEFUNC(BIO_METHOD *, BIO_s_mem, void, DUMMYARG, return 0, return)
 DEFINEFUNC3(int, BIO_write, BIO *a, a, const void *b, b, int c, c, return -1, return)
 DEFINEFUNC(int, BN_num_bits, const BIGNUM *a, a, return 0, return)
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if !defined(BN_is_word)
 DEFINEFUNC2(int, BN_is_word, BIGNUM *a, a, BN_ULONG w, w, return 0, return)
 #endif
 DEFINEFUNC2(BN_ULONG, BN_mod_word, const BIGNUM *a, a, BN_ULONG w, w, return static_cast<BN_ULONG>(-1), return)
@@@@ -461,6 +461,8 @@@@ DEFINEFUNC5(int, PKCS12_parse, PKCS12 *p12, p12, const
 DEFINEFUNC2(PKCS12 *, d2i_PKCS12_bio, BIO *bio, bio, PKCS12 **pkcs12, pkcs12, return 0, return);
 DEFINEFUNC(void, PKCS12_free, PKCS12 *pkcs12, pkcs12, return, DUMMYARG)
 
+DEFINEFUNC3(int, SSL_CTX_set1_groups, SSL_CTX *a, a, const int *b, b, size_t c, c, return 0, return)
+
 #define RESOLVEFUNC(func) \
     if (!(_q_##func = _q_PTR_##func(libs.first->resolve(#func)))     \
         && !(_q_##func = _q_PTR_##func(libs.second->resolve(#func)))) \
@@@@ -790,7 +792,7 @@@@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(EC_GROUP_get_degree)
 #endif
     RESOLVEFUNC(BN_num_bits)
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if !defined(BN_is_word)
     RESOLVEFUNC(BN_is_word)
 #endif
     RESOLVEFUNC(BN_mod_word)
@@@@ -1028,12 +1030,13 @@@@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(d2i_PKCS12_bio)
     RESOLVEFUNC(PKCS12_free)
 
+    RESOLVEFUNC(SSL_CTX_set1_groups)
+
     delete libs.first;
     delete libs.second;
-    if (!_q_SSLeay || q_SSLeay() >= 0x10100000L) {
+    if (!_q_SSLeay) {
         // OpenSSL 1.1 deprecated and removed SSLeay. We consider a failure to
         // resolve this symbol as a failure to resolve symbols.
-        // The right operand of '||' above ... a bit of paranoia.
         qCWarning(lcSsl, "Incompatible version of OpenSSL");
         return false;
     }
@


1.2
log
@Update from Qt 5.6.2 (LTS) to Qt 5.9.1 (LTS).

Tested with both GCC and CLang (less through).

This forces updating x11/py-qt5, which forces update of devel/py-sip,
which forces update of x11/py-qt4, but, thankfully, no breakage detected.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_network_ssl_qsslsocket_openssl_symbols_cpp,v 1.1 2017/01/27 16:13:08 zhuk Exp $
d7 9
d25 10
a34 2
@@@@ -1027,6 +1029,8 @@@@ bool q_resolveOpenSslSymbols()
     RESOLVEFUNC(PKCS12_parse)
d37 2
a39 2
+    RESOLVEFUNC(SSL_CTX_set1_groups)
 
d42 8
@


1.1
log
@Fix after recent LibreSSL changes.

Nowadays we have fake SSL_CTRL_SET_CURVES macro, and SSL_CTX_set1_curves
defined as synonym to SSL_CTX_set1_groups. So use the latter instead
of the former.

The patch should be tweaked furthermore before proposing it upstream,
but for now we can at least build things again.
@
text
@d1 1
a1 1
$OpenBSD$
d4 4
a7 3
--- src/network/ssl/qsslsocket_openssl_symbols.cpp.orig	Fri Jan 27 18:28:24 2017
+++ src/network/ssl/qsslsocket_openssl_symbols.cpp	Fri Jan 27 18:55:30 2017
@@@@ -432,6 +432,8 @@@@ DEFINEFUNC5(int, PKCS12_parse, PKCS12 *p12, p12, const
d16 1
a16 1
@@@@ -983,6 +985,8 @@@@ bool q_resolveOpenSslSymbols()
a22 1
     symbolsResolved = true;
d24 1
@

