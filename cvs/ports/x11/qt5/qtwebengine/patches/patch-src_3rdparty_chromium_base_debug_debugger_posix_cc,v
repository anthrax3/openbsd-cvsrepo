head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	zhuk_20161225:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.07.17.08.34.39;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	3tUsNizeEEvC87c0;

1.1
date	2016.12.25.14.13.19;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	QPfzuwiSTmth4MkN;

1.1.1.1
date	2016.12.25.14.13.19;	author zhuk;	state Exp;
branches;
next	;
commitid	QPfzuwiSTmth4MkN;


desc
@@


1.2
log
@Update from Qt 5.6.2 (LTS) to Qt 5.9.1 (LTS).

Tested with both GCC and CLang (less through).

This forces updating x11/py-qt5, which forces update of devel/py-sip,
which forces update of x11/py-qt4, but, thankfully, no breakage detected.
@
text
@$OpenBSD$
Automatically copied from www/chromium.

--- src/3rdparty/chromium/base/debug/debugger_posix.cc.orig.port	Thu Dec 15 00:02:02 2016
+++ src/3rdparty/chromium/base/debug/debugger_posix.cc	Tue Jan  3 20:29:54 2017
@@@@ -34,6 +34,10 @@@@
 #include <sys/sysctl.h>
 #endif
 
+#if defined(OS_OPENBSD)
+#include <sys/proc.h>
+#endif
+
 #if defined(OS_FREEBSD)
 #include <sys/user.h>
 #endif
@@@@ -92,33 +96,38 @@@@ bool BeingDebugged() {
 
   // Caution: struct kinfo_proc is marked __APPLE_API_UNSTABLE.  The source and
   // binary interfaces may change.
-  struct kinfo_proc info;
-  size_t info_size = sizeof(info);
+  struct kinfo_proc *info;
+  size_t info_size;
 
-#if defined(OS_OPENBSD)
   if (sysctl(mib, arraysize(mib), NULL, &info_size, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(info_size);
+
   mib[5] = (info_size / sizeof(struct kinfo_proc));
-#endif
 
-  int sysctl_result = sysctl(mib, arraysize(mib), &info, &info_size, NULL, 0);
+  int sysctl_result = sysctl(mib, arraysize(mib), info, &info_size, NULL, 0);
   DCHECK_EQ(sysctl_result, 0);
   if (sysctl_result != 0) {
     is_set = true;
     being_debugged = false;
-    return being_debugged;
+    goto out;
   }
 
   // This process is being debugged if the P_TRACED flag is set.
   is_set = true;
 #if defined(OS_FREEBSD)
-  being_debugged = (info.ki_flag & P_TRACED) != 0;
+  being_debugged = (info->ki_flag & P_TRACED) != 0;
+#elif defined(OS_OPENBSD) && !defined(_P_TRACED)
+  being_debugged = (info->p_psflags & PS_TRACED) != 0;
 #elif defined(OS_BSD)
-  being_debugged = (info.p_flag & P_TRACED) != 0;
+  being_debugged = (info->p_flag & P_TRACED) != 0;
 #else
-  being_debugged = (info.kp_proc.p_flag & P_TRACED) != 0;
+  being_debugged = (info->kp_proc.p_flag & P_TRACED) != 0;
 #endif
+
+out:
+  free(info);
   return being_debugged;
 }
 
@


1.1
log
@Initial revision
@
text
@d2 6
a7 4
--- src/3rdparty/chromium/base/debug/debugger_posix.cc.orig.port	Sat Aug  6 18:35:52 2016
+++ src/3rdparty/chromium/base/debug/debugger_posix.cc	Sat Aug  6 20:58:40 2016
@@@@ -32,6 +32,10 @@@@
 #include <sys/user.h>
d14 30
a43 1
 #include <ostream>
d45 1
a45 2
 #include "base/basictypes.h"
@@@@ -109,6 +113,8 @@@@ bool BeingDebugged() {
d48 4
a51 3
   being_debugged = (info.ki_flag & P_TRACED) != 0;
+#elif defined(OS_OPENBSD)
+  being_debugged = (info.ps_flags & PS_TRACED) != 0;
d53 2
a54 1
   being_debugged = (info.p_flag & P_TRACED) != 0;
d56 9
@


1.1.1.1
log
@Import Qt 5.6.2.

The port is now being split into pieces. Cleanup and conflict resolving
to follow.
@
text
@@
