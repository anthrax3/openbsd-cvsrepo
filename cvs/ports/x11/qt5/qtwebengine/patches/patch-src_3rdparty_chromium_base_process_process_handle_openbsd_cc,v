head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	zhuk_20161225:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.07.17.08.34.39;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	3tUsNizeEEvC87c0;

1.1
date	2016.12.25.14.13.19;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	QPfzuwiSTmth4MkN;

1.1.1.1
date	2016.12.25.14.13.19;	author zhuk;	state Exp;
branches;
next	;
commitid	QPfzuwiSTmth4MkN;


desc
@@


1.2
log
@Update from Qt 5.6.2 (LTS) to Qt 5.9.1 (LTS).

Tested with both GCC and CLang (less through).

This forces updating x11/py-qt5, which forces update of devel/py-sip,
which forces update of x11/py-qt4, but, thankfully, no breakage detected.
@
text
@$OpenBSD$
Automatically copied from www/chromium.

Index: src/3rdparty/chromium/base/process/process_handle_openbsd.cc
--- src/3rdparty/chromium/base/process/process_handle_openbsd.cc.orig
+++ src/3rdparty/chromium/base/process/process_handle_openbsd.cc
@@@@ -6,6 +6,8 @@@@
 #include "base/process/process_handle.h"
 
 #include <stddef.h>
+#include <sys/param.h>
+#include <sys/proc.h>
 #include <sys/sysctl.h>
 #include <sys/types.h>
 #include <unistd.h>
@@@@ -13,39 +15,59 @@@@
 namespace base {
 
 ProcessId GetParentProcessId(ProcessHandle process) {
-  struct kinfo_proc info;
+  struct kinfo_proc *info;
   size_t length;
+  pid_t ppid;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
                 sizeof(struct kinfo_proc), 0 };
 
   if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) < 0)
     return -1;
 
+  info = (struct kinfo_proc *)malloc(length);
+
   mib[5] = (length / sizeof(struct kinfo_proc));
 
-  if (sysctl(mib, arraysize(mib), &info, &length, NULL, 0) < 0)
-    return -1;
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0) {
+    ppid = -1;
+    goto out;
+  }
 
-  return info.p_ppid;
+  ppid = info->p_ppid;
+
+out:
+  free(info);
+  return ppid;
 }
 
 FilePath GetProcessExecutablePath(ProcessHandle process) {
-  struct kinfo_proc kp;
-  size_t len;
+  struct kinfo_proc *info;
+  size_t length;
+  char *path = NULL;
   int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, process,
                 sizeof(struct kinfo_proc), 0 };
 
-  if (sysctl(mib, arraysize(mib), NULL, &len, NULL, 0) == -1)
+  if (sysctl(mib, arraysize(mib), NULL, &length, NULL, 0) == -1)
     return FilePath();
-  mib[5] = (len / sizeof(struct kinfo_proc));
-  if (sysctl(mib, arraysize(mib), &kp, &len, NULL, 0) < 0)
-    return FilePath();
-  if ((kp.p_flag & P_SYSTEM) != 0)
-    return FilePath();
-  if (strcmp(kp.p_comm, "chrome") == 0)
-    return FilePath(kp.p_comm);
 
-  return FilePath();
+  info = (struct kinfo_proc *)malloc(length);
+
+  mib[5] = (length / sizeof(struct kinfo_proc));
+
+  if (sysctl(mib, arraysize(mib), info, &length, NULL, 0) < 0)
+    goto out;
+
+  if ((info->p_flag & P_SYSTEM) != 0)
+    goto out;
+
+  if (strcmp(info->p_comm, "chrome") == 0) {
+    path = info->p_comm;
+    goto out;
+  }
+
+out:
+  free(info);
+  return FilePath(path);
 }
 
 }  // namespace base
@


1.1
log
@Initial revision
@
text
@d2 58
a59 5
--- src/3rdparty/chromium/base/process/process_handle_openbsd.cc.orig.port	Sun Aug  7 08:02:06 2016
+++ src/3rdparty/chromium/base/process/process_handle_openbsd.cc	Sun Aug  7 08:03:36 2016
@@@@ -38,7 +38,7 @@@@ FilePath GetProcessExecutablePath(ProcessHandle proces
   mib[5] = (len / sizeof(struct kinfo_proc));
   if (sysctl(mib, arraysize(mib), &kp, &len, NULL, 0) < 0)
d61 3
d65 26
a90 4
+  if ((kp.p_ps_flags & PS_SYSTEM) != 0)
     return FilePath();
   if (strcmp(kp.p_comm, "chrome") == 0)
     return FilePath(kp.p_comm);
@


1.1.1.1
log
@Import Qt 5.6.2.

The port is now being split into pieces. Cleanup and conflict resolving
to follow.
@
text
@@
