head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	zhuk_20161225:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.07.29.00.07.15;	author zhuk;	state Exp;
branches;
next	1.3;
commitid	PLavWrVVGir1L8eQ;

1.3
date	2017.07.17.08.34.39;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	3tUsNizeEEvC87c0;

1.2
date	2016.12.28.01.41.24;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	zznJcJZGYlX0U9PC;

1.1
date	2016.12.25.14.13.18;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	QPfzuwiSTmth4MkN;

1.1.1.1
date	2016.12.25.14.13.18;	author zhuk;	state Exp;
branches;
next	;
commitid	QPfzuwiSTmth4MkN;


desc
@@


1.4
log
@Rework the process of building Qt5 documentation:

Now all documentation is built using a separate port using
the --single-exec option of qdoc. This gaves significant speedup
as well as fixing quiet a few interlinking problems.

All -qch, -html and -docindex subpackages of Qt modules ports are
removed. The qt5-html and qt5-qch are now provided by x11/qt5/docs
instead of meta/qt5, thus REVISION set from the start.

This commit should fix problems with building Qt5 documentation
that people started seeing after switching to Clang. We also could
zap some interdependencies between Qt5 modules as well, but that's
a different story.
@
text
@# $OpenBSD: Makefile,v 1.3 2017/07/17 08:34:39 zhuk Exp $

# Many parts are copied from www/chromium port, so keep in sync

ONLY_FOR_ARCHS =	${CLANG_ARCHS} amd64
QT5NAME =		QtWebEngine
COMMENT-main =		Chromium-based web engine for Qt5
CATEGORIES =		www
USE_WXNEEDED =		Yes

SHARED_LIBS =		Qt5WebEngine		0.0

MULTI_PACKAGES =	-main -examples

WANTLIB-main =		${WANTLIB}

# BSD-like
PERMIT_PACKAGE_CDROM=   patents
PERMIT_PACKAGE_FTP =    Yes

COMPILER =		base clang gcc
MODULES =		lang/python
MODPY_RUNDEP =		No

BUILD_DEPENDS =		\
			devel/re2c \
			sysutils/pciutils \

RUN_DEPENDS =		sysutils/pciutils

LIB_DEPENDS =		\
			archivers/minizip \
			audio/pulseaudio \
			archivers/snappy \
			devel/glib2 \
			devel/harfbuzz \
			devel/jsoncpp \
			devel/protobuf \
			graphics/libwebp \
			graphics/png \
			security/libsrtp \
			x11/qt5/qtdeclarative>=${QT5_VERSION},<${QT5_NEXT_VERSION} \
			x11/qt5/qtwebchannel>=${QT5_VERSION},<${QT5_NEXT_VERSION}

FLAVORS =		debug

PATCHORIG =		.orig.port

GN_ARGS=	enable_nacl=false \
		is_debug=false \
		enable_webrtc=false \
		enable_one_click_signin=true \
		use_kerberos=false \
		use_sndio=true \
		use_cups=true \
		use_experimental_allocator_shim=false \
		use_gtk3=true \
		is_clang=true \
		use_sysroot=false \
		treat_warnings_as_errors=false \
		clang_use_chrome_plugins=false \
		use_allocator=\"none\" \
		is_official_build=true \
		fieldtrial_testing_like_official_build=true \
		extra_cppflags=\"-idirafter ${LOCALBASE}/include -idirafter ${X11BASE}/include\" \
		extra_ldflags=\"-L${LOCALBASE}/lib -L${X11BASE}/lib\"

# Note: these keys are for OpenBSD use ONLY. For your own distribution,
# please get your own set of keys. It's free!
GN_ARGS+=	google_api_key=\"AIzaSyA015yecfJyWi8UQpneQVrNzIKlxjv4MhI\" \
		google_default_client_id=\"451220141585.apps.googleusercontent.com\" \
		google_default_client_secret=\"nQcDyaBvDyCeDrsRqKIWSHJn\" \
		ffmpeg_branding=\"Chrome\" \
		proprietary_codecs=true

.if ${FLAVOR:Mdebug}
GN_ARGS+=	remove_webcore_debug_symbols=true
.endif

MODQMAKE_ARGS =	\
		WEBENGINE_CONFIG+=use_proprietary_codecs \
		WEBENGINE_CONFIG+=use_system_ffmpeg \
		WEBENGINE_CONFIG+=use_system_icu \
		WEBENGINE_CONFIG+=use_system_jsoncpp \
		WEBENGINE_CONFIG+=use_system_libevent \
		WEBENGINE_CONFIG+=use_system_libsrtp \
		WEBENGINE_CONFIG+=use_system_libwebp \
		WEBENGINE_CONFIG+=use_system_libxslt \
		WEBENGINE_CONFIG+=use_system_minizip \
		WEBENGINE_CONFIG+=use_system_opus \
		WEBENGINE_CONFIG+=use_system_snappy \
		WEBENGINE_CONFIG+=use_system_vpx \

.for _v in ${GN_ARGS}
MODQMAKE_ARGS :=	${MODQMAKE_ARGS} WEBENGINE_CONFIG+=${_v}
.endfor

MAKE_ENV =	V=1

SEPARATE_BUILD =	No

UNBUNDLE_LIST =	libevent
CHROMESRC =	${WRKDIST}/src/3rdparty/chromium

post-extract:
	cd ${CHROMESRC}/third_party/ffmpeg/chromium/config/Chrome; \
	rm -Rf openbsd; \
	cp -pR linux openbsd
.for f t in linux openbsd desktop_linux desktop_openbsd
	cp ${WRKDIST}/src/core/config/$f.pri ${WRKDIST}/src/core/config/$t.pri
.endfor
# check if needed
.for _arch in x64 ia32
.  for _dir in avcodec avformat avutil
	@@cp -pR ${CHROMESRC}/third_party/ffmpeg/chromium/config/Chrome/linux/${_arch}/lib${_dir} \
		${CHROMESRC}/third_party/ffmpeg/chromium/config/Chrome/openbsd/${_arch}/lib${_dir}
.  endfor
.endfor
#	@@cd ${CHROMESRC}; \
#	${MODPY_BIN} build/linux/unbundle/remove_bundled_libraries.py \
#	    ${UNBUNDLE_LIST:C,^,base/third_party/,}; \
#	${MODPY_BIN} build/linux/unbundle/replace_gn_files.py \
#	    --system-libraries ${UNBUNDLE_LIST}

pre-configure:
	@@ln -sf ${MODPY_BIN} ${WRKDIR}/bin/python
	@@mkdir -p ${CHROMESRC}/media/audio/sndio ${CHROMESRC}/media/audio/openbsd
	@@cp ${FILESDIR}/sndio_{out,in}put.{cc,h} ${CHROMESRC}/media/audio/sndio
	@@cp ${FILESDIR}/audio_manager_openbsd.{cc,h} ${CHROMESRC}/media/audio/openbsd
	@@mkdir -p ${CHROMESRC}/third_party/node/openbsd/node-openbsd/bin
	@@ln -sf ${TRUEPREFIX}/bin/node ${CHROMESRC}/third_party/node/openbsd/node-openbsd/bin/node

.include <bsd.port.mk>


#
# Utility targets to make it easier syncing with www/chromium port
#

sync-patches: ${_EXTRACT_COOKIE}
	@@! test -e ${_PATCH_COOKIE} || { \
		echo "$@@ should be run on unpatched source, e.g., after 'make extract'" >&2; \
		false; \
	}
	@@echo "===> removing old auto-copied patches"
	@@cd ${PATCHDIR}; for p in patch-*; do \
		test "$$p" = "$${p%.orig}" || continue; \
		egrep -s '^--- src/3rdparty/chromium/' $$p || continue; \
		fgrep -q 'Automatically copied from www/chromium.' $$p || continue; \
		rm $$p; \
	done
	@@echo
	@@echo "===> copying new patches, preserving existing ones"
	@@added= ; skipped= ; \
	cd ${PORTSDIR}/www/chromium/patches; for p in patch-*; do \
		test "$$p" = "$${p%.orig}" || continue; \
		f=$$(awk '/^\+\+\+ / {print $$2}' $$p); \
		test -f ${WRKDIST}/src/3rdparty/chromium/$$f || continue; \
		np=patch-src_3rdparty_chromium_$${p##*/patch-}; \
		if [ -e ${PATCHDIR}/$$np ]; then \
			skipped="$$skipped $$np"; \
			continue; \
		fi; \
		added="$$added $$np"; \
		perl -p -e '$$. == 1 && s,.*,\$$OpenBSD\$$,;' \
		        -e '$$. == 2 && print "Automatically copied from www/chromium.\n\n";' \
		        -e 's,^Index: ,$$&src/3rdparty/chromium/,;' \
		        -e 's,^--- ,$$&src/3rdparty/chromium/,;' \
		        -e 's,^\+\+\+ ,$$&src/3rdparty/chromium/,;' \
		        <$$p >${PATCHDIR}/$$np; \
	done; \
	echo; \
	echo "===> checking new patches for appliability"; \
	failed= ; \
	cd ${WRKDIST}; for p in $$added; do \
		if ! patch -f -C <${PATCHDIR}/$$p >/dev/null 2>&1; then \
			if patch -f -C -R <${PATCHDIR}/$$p >/dev/null 2>&1; then \
				echo "$$p is already there, removing"; \
				rm ${PATCHDIR}/$$p; \
			else \
				failed="$$failed $$p"; \
			fi; \
		fi; \
	done; \
	echo; \
	echo "===> listing patches requring manual handling"; \
	for f in $$skipped $$failed; do echo $$f; done

zap-extra-patches: extract
	mkdir -p ${PATCHDIR}.zapped
	@@cd ${PATCHDIR}; for p in patch-*; do \
		test "$$p" = "$${p%.orig}" || continue; \
		f=$$(awk '/^\+\+\+ / {print $$2}' $$p); \
		if ! [ -f ${WRKDIST}/$$f ]; then \
			echo rm "$$p"; \
			mv "$$p" ${PATCHDIR}.zapped; \
		fi; \
	done
@


1.3
log
@Update from Qt 5.6.2 (LTS) to Qt 5.9.1 (LTS).

Tested with both GCC and CLang (less through).

This forces updating x11/py-qt5, which forces update of devel/py-sip,
which forces update of x11/py-qt4, but, thankfully, no breakage detected.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2016/12/28 01:41:24 zhuk Exp $
d13 1
a13 1
MULTI_PACKAGES =	-main -examples -qch -html -docindex
a45 2
PSEUDO_FLAVORS =	no_examples no_qch no_html
FLAVOR ?=
d98 3
a100 1
CHROMESRC =	${WRKSRC}/src/3rdparty/chromium
d102 2
a103 1
MAKE_ENV =	V=1
d119 5
a123 7
	@@cd ${CHROMESRC}; \
	${MODPY_BIN} build/linux/unbundle/remove_bundled_libraries.py \
	    ${UNBUNDLE_LIST:C,^,base/third_party/,}; \
	${MODPY_BIN} build/linux/unbundle/replace_gn_files.py \
	    --system-libraries ${UNBUNDLE_LIST}

UNBUNDLE_LIST =	libevent
d188 11
@


1.2
log
@Rework Qt5 documentation handling:

  * Move share/qt5/doc/* in qtbase from -main to a separate subpackage,
    -global, which (as a bonus) "owns" share/doc/qt5/ directory;

  * Move FOO.index files from -html to a separate subpackage, -docindex,
    and make 'em depend on qtbase,-global;

  * Make DEP,-docindex automatically added as BDEP for each DEP in
    LDEP and BDEP mentioned for -main;

  * Make it clear that building -qch without -html is impossible;

While there, fixed a few minor issues.

This make at least qtenginio,-html build correctly, which failed before
due to missing .index files during qdoc run. Initial report from kili@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2016/12/25 14:13:18 zhuk Exp $
d5 1
a5 1
ONLY_FOR_ARCHS =	i386 amd64
d21 2
a22 7
MODULES =		lang/python gcc4
MODULES =		lang/clang lang/python gcc4
#MODGCC4_ARCHS =
#MODGCC4_LANGS =
#MODQT5_USE_GCC4_MODULE =No
#MODCLANG_ARCHS =	*
#MODCLANG_LANGS =	c++
d32 1
d35 4
a40 1
			multimedia/libvpx \
d51 18
a68 37
MODQMAKE_ARGS =		\
			WEBENGINE_CONFIG+=use_proprietary_codecs
#			WEBENGINE_CONFIG+=use_system_minizip

# SEPARATE_BUILD =	No

GYP_DEFS =	-Duse_system_bzip2=1 \
		-Duse_system_libevent=1 \
		-Duse_system_libjpeg=0 \
		-Duse_system_libpng=1 \
		-Duse_system_libusb=0 \
		-Duse_system_libvpx=0 \
		-Duse_system_libxml=1 \
		-Duse_system_sqlite=0 \
		-Duse_system_yasm=1 \
		-Duse_system_zlib=0 \
		-Duse_system_ssl=0 \
		-Duse_system_icu=0 \
		-Ddisable_nacl=1 \
		-Dlinux_breakpad=0 \
		-Duse_allocator=none \
		-Dlinux_strip_binary=0 \
		-Dlinux_use_heapchecker=0 \
		-Denable_webrtc=1 \
		-Denable_one_click_signin=1 \
		-Duse_kerberos=0 \
		-Duse_sndio=1 \
		-Duse_aura=1 \
		-Dclang_use_chrome_plugins=0 \
		-Dwerror= \
		-Dno_gc_sections=1 \
		-Ddisable_fatal_linker_warnings=1 \
		-Dv8_use_external_startup_data=0 \
		-Dlibraries_for_target='-lestdc++' \
		-DOS=openbsd

#		-Dclang=1 \
d72 23
a94 5
GYP_DEFS +=	-Dgoogle_api_key='AIzaSyA015yecfJyWi8UQpneQVrNzIKlxjv4MhI' \
		-Dgoogle_default_client_id='451220141585.apps.googleusercontent.com' \
		-Dgoogle_default_client_secret='nQcDyaBvDyCeDrsRqKIWSHJn' \
		-Dffmpeg_branding=Chrome \
		-Dproprietary_codecs=1
d96 2
a97 2
.for d in ${GYP_DEFS}
MODQMAKE_ARGS +=GYP_CONFIG+=$d
d100 4
d106 1
d109 8
a116 1
	cp ${WRKSRC}/src/core/config/$f.pri ${WRKSRC}/src/core/config/$t.pri
d118 5
d124 1
a124 7
CHROMESRC =	${WRKSRC}/src/3rdparty/chromium

post-patch:
	perl -pi.linux \
		-e 's,(OS\s*==\s*"linux"),($$1 or  os_bsd == 1),g;' \
		-e 's,(OS\s*!=\s*"linux"),($$1 and os_bsd != 1),g;' \
		${WRKSRC}/src/3rdparty/chromium/third_party/ffmpeg/ffmpeg_generated.gypi
d127 6
a132 5
	ln -sf ${MODPY_BIN} ${WRKDIR}/bin/python
	cp ${FILESDIR}/sandbox_init_openbsd.{cc,h} ${CHROMESRC}/content/common/
	mkdir -p ${CHROMESRC}/media/audio/sndio ${CHROMESRC}/media/audio/openbsd
	cp ${FILESDIR}/sndio_{out,in}put.{cc,h} ${CHROMESRC}/media/audio/sndio
	cp ${FILESDIR}/audio_manager_openbsd.{cc,h} ${CHROMESRC}/media/audio/openbsd
d135 54
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d13 1
a13 1
MULTI_PACKAGES =	-main -examples -qch -html
@


1.1.1.1
log
@Import Qt 5.6.2.

The port is now being split into pieces. Cleanup and conflict resolving
to follow.
@
text
@@
