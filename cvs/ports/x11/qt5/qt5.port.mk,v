head	1.14;
access;
symbols
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	zhuk_20161225:1.1.1.2
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	zhuk_20141208:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2017.05.13.09.49.50;	author espie;	state Exp;
branches;
next	1.13;
commitid	Qq9CIQtBjFqtn5SM;

1.13
date	2016.12.25.14.18.55;	author zhuk;	state Exp;
branches;
next	1.12;
commitid	FpatVGCqyz79ORU8;

1.12
date	2016.05.18.19.12.22;	author jca;	state Exp;
branches;
next	1.11;
commitid	tRQAatnRIOmxWAoA;

1.11
date	2016.03.26.20.37.35;	author zhuk;	state Exp;
branches;
next	1.10;
commitid	OEdThNVtQpfieDxV;

1.10
date	2016.03.10.17.45.11;	author zhuk;	state Exp;
branches;
next	1.9;
commitid	0mjhx6dypqaFfHN5;

1.9
date	2016.03.09.16.54.28;	author zhuk;	state Exp;
branches;
next	1.8;
commitid	pJJaWThLHR5epqlx;

1.8
date	2016.03.07.10.13.32;	author zhuk;	state Exp;
branches;
next	1.7;
commitid	taXf1h7Dqbp6Dn1H;

1.7
date	2016.03.06.23.59.51;	author zhuk;	state Exp;
branches;
next	1.6;
commitid	pgXtU4D5ESSJZWCl;

1.6
date	2014.12.11.17.45.04;	author zhuk;	state Exp;
branches;
next	1.5;
commitid	d3rWP0hqM54wyC77;

1.5
date	2014.12.11.17.39.03;	author zhuk;	state Exp;
branches;
next	1.4;
commitid	jxNSCren9qIw9wT6;

1.4
date	2014.12.11.13.24.27;	author zhuk;	state Exp;
branches;
next	1.3;
commitid	rU7jwHKxnnrq01hI;

1.3
date	2014.12.10.20.11.03;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	B0ZrKhkjUSazDpyg;

1.2
date	2014.12.09.12.38.06;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	aoHeGDoh07KLGkfz;

1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	T3VSUps0elxgCqso;

1.1.1.1
date	2014.12.08.20.33.38;	author zhuk;	state Exp;
branches;
next	1.1.1.2;
commitid	T3VSUps0elxgCqso;

1.1.1.2
date	2016.12.25.14.13.11;	author zhuk;	state Exp;
branches;
next	;
commitid	QPfzuwiSTmth4MkN;


desc
@@


1.14
log
@first batch of WANT_CXX
@
text
@# $OpenBSD: qt5.port.mk,v 1.13 2016/12/25 14:18:55 zhuk Exp $

# This fragment defines MODQT_* variables to make it easier to substitute
# qt3/qt4/qt5 in a port.
MODQT_OVERRIDE_UIC ?=	Yes
MODQT5_OVERRIDE_UIC ?=	${MODQT_OVERRIDE_UIC}

MODQT5_LIBDIR =	${LOCALBASE}/lib/qt5
MODQT_LIBDIR ?= ${MODQT5_LIBDIR}
MODQT5_INCDIR =	${LOCALBASE}/include/X11/qt5
MODQT_INCDIR ?= ${MODQT5_INCDIR}
MODQT5_CONFIGURE_ARGS =	--with-qt-includes=${MODQT5_INCDIR} \
			--with-qt-libraries=${MODQT5_LIBDIR}
MODQT_CONFIGURE_ARGS ?=	${MODQT5_CONFIGURE_ARGS}
_MODQT5_SETUP =	MOC=${MODQT5_MOC} \
		MODQT_INCDIR=${MODQT5_INCDIR} \
		MODQT_LIBDIR=${MODQT5_LIBDIR}
.if ${MODQT5_OVERRIDE_UIC:L} == "yes"
_MODQT5_SETUP +=UIC=${MODQT5_UIC}
.endif

# may be needed to find plugins
MODQT5_MOC =	${LOCALBASE}/bin/moc-qt5
MODQT_MOC ?=	${MODQT5_MOC}
MODQT5_UIC =	${LOCALBASE}/bin/uic-qt5
MODQT_UIC ?=	${MODQT5_UIC}
MODQT5_QMAKE =	${LOCALBASE}/bin/qmake-qt5
MODQT_QMAKE ?=	${MODQT5_QMAKE}
MODQT5_QTDIR =	${LOCALBASE}/lib/qt5
MODQT_QTDIR ?=	${MODQT5_QTDIR}
MODQT5_LRELEASE = ${LOCALBASE}/bin/lrelease-qt5
MODQT_LRELEASE ?= ${MODQT5_LRELEASE}

_MODQT5_CMAKE_PKGS = \
	Qt5 \
	Qt53DCore \
	Qt53DInput \
	Qt53DLogic \
	Qt53DQuick \
	Qt53DQuickInput \
	Qt53DQuickRender \
	Qt5Render \
	Qt5Bluetooth \
	Qt5Concurrent \
	Qt5Core \
	Qt5DBus \
	Qt5Designer \
	Qt5Enginio \
	Qt5Gui \
	Qt5Help \
	Qt5LinguistTools \
	Qt5Location \
	Qt5Multimedia \
	Qt5MultimediaWidgets \
	Qt5Network \
	Qt5Nfc \
	Qt5OpenGL \
	Qt5OpenGLExtensions \
	Qt5Positioning \
	Qt5PrintSupport \
	Qt5Qml \
	Qt5Quick \
	Qt5QuickTest \
	Qt5QuickWidgets \
	Qt5Script \
	Qt5ScriptTools \
	Qt5Sensors \
	Qt5SerialBus \
	Qt5SerialPort \
	Qt5Sql \
	Qt5Svg \
	Qt5Test \
	Qt5UiPlugin \
	Qt5UiTools \
	Qt5WebChannel \
	Qt5WebKit \
	Qt5WebKitWidgets \
	Qt5WebSockets \
	Qt5Widgets \
	Qt5X11Extras \
	Qt5Xml \
	Qt5XmlPatterns
.for _p in ${_MODQT5_CMAKE_PKGS}
_MODQT5_SETUP +=	${_p}_DIR=${MODQT5_LIBDIR}/cmake
.endfor

MODQT5_LIB_DEPENDS = 	x11/qt5/qtbase,-main
MODQT_LIB_DEPENDS ?= 	${MODQT5_LIB_DEPENDS}

# qdoc, etc.
MODQT5_BUILD_DEPENDS = 	x11/qt5/qttools,-main
MODQT_BUILD_DEPENDS ?= 	${MODQT5_BUILD_DEPENDS}

MODQT_DEPS ?=		Yes
MODQT5_DEPS ?=		${MODQT_DEPS}
.if ${MODQT5_DEPS:L} == "yes"
LIB_DEPENDS += 		${MODQT5_LIB_DEPENDS}
BUILD_DEPENDS += 	${MODQT5_BUILD_DEPENDS}
.endif

CONFIGURE_ENV +=${_MODQT5_SETUP}
MAKE_ENV +=	${_MODQT5_SETUP}
MAKE_FLAGS +=	${_MODQT5_SETUP}

MODQT5_USE_GCC4_MODULE ?=	Yes
.if ${MODQT5_USE_GCC4_MODULE:L} == "yes"
# not really

WANT_CXX ?= base gcc
ONLY_FOR_ARCHS ?= ${CXX11_ARCHS}
# force using compilers/wrappers from ${WRKDIR}/bin
# XXX LINK_C is actually unused by qmake

_MODQT5_SETUP +=	CC=cc CXX=c++ LINK_C=cc LINK=c++
.endif

.include "Makefile.version"

MODQT5_VERSION =	${QT5_VERSION}
MODQT_VERSION ?=	${MODQT5_VERSION}

_MODQT5_PKGMATCH !=
show_deps: patch
	@@cpkgs=$$(echo ${_MODQT5_CMAKE_PKGS:NQt5} | sed 's/ /|/g'); \
	find ${WRKSRC} \( -name '*.pr[iof]' -or -iname '*cmake*' \) -print0 | \
		xargs -0r egrep -hA 2 "\\<(qtHaveModule|QT_CONFIG|$$cpkgs)\\>|Qt5::"
@


1.13
log
@Resolve conflicts after Qt 5.6.2 import.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.12 2016/05/18 19:12:22 jca Exp $
d107 8
a114 6
  MODULES +=		gcc4
  MODGCC4_LANGS +=	c++
  MODGCC4_ARCHS ?=	*
  # force using compilers/wrappers from ${WRKDIR}/bin
  # XXX LINK_C is actually unused by qmake
  _MODQT5_SETUP +=	CC=cc CXX=c++ LINK_C=cc LINK=c++
@


1.12
log
@Add an abstraction for the lrelease Qt tool

ok sthen@@ zhuk@@
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.11 2016/03/26 20:37:35 zhuk Exp $
d4 1
a4 1
# qt4/qt5 in a port.
d36 7
a46 1
	Qt5Declarative \
d52 1
d68 1
d73 1
d75 1
d87 1
a87 1
MODQT5_LIB_DEPENDS = 	x11/qt5
d89 8
d98 2
d106 1
a106 1
.if ${MODQT5_USE_GCC4_MODULE} == "Yes"
d110 3
d114 11
@


1.11
log
@Zap more lines from qmake-based ports by moving them from
the "MODULES=x11/qtX + CONFIGURE_STYLE=qmake" logic to
the "MODULES=devel/qmake x11/qtX" logic.

Discussed with espie@@ a few weeks ago.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.10 2016/03/10 17:45:11 zhuk Exp $
d31 2
@


1.10
log
@Switch to a separate qmake.port.mk. Simplifies logic a lot.

This removes support of separate qmake versions in one port: as we
discovered, there are no ports actually needing this; strangers like
print/poppler don't use qmake in build.

This should be transparent to current ports. But expect more tweaks there:
for now, qt?.port.mk forces qmake.port.mk inclusion, but that will be
reworked to a more common scheme.

Same idea from (at least) espie@@ and me; also, espie@@ agrees on the plan.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.9 2016/03/09 16:54:28 zhuk Exp $
a88 2

MODULES +=	devel/qmake
@


1.9
log
@Don't use MAKE_FILE, but hardcode Makefile instead: that's what qmake
actually generates, and some tricky ports like games/gambatte fail when
qmake-specific part tries to use MAKE_FILE variable.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.8 2016/03/07 10:13:32 zhuk Exp $
d90 1
a90 91
.if ${CONFIGURE_STYLE:Mqmake} || ${CONFIGURE_STYLE:Mqmake5}
MAKE_FLAGS +=	CC="${CC}" CXX="${CXX}"
MAKE_FLAGS +=	PREFIX=${PREFIX}
. for _l _v in ${SHARED_LIBS}
MAKE_FLAGS +=	LIB${_l}_VERSION=${_v}
. endfor
.endif

MODQMAKE_PROJECTS ?=	.
MODQMAKE5_PROJECTS ?=	${MODQMAKE_PROJECTS}
MODQMAKE_ARGS ?=
MODQMAKE5_ARGS ?=	${MODQMAKE_ARGS}
MODQMAKE5_ARGS +=	-recursive \
			PREFIX=${PREFIX} \
			QMAKE_CFLAGS="${CFLAGS}" \
			QMAKE_CFLAGS_RELEASE="${CFLAGS}" \
			QMAKE_CXX="${CXX}" \
			QMAKE_CXXFLAGS="${CXXFLAGS}" \
			QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS}"

MODQMAKE_INSTALL_ROOT ?=	${WRKINST}
MODQMAKE5_INSTALL_ROOT ?=	${MODQMAKE_INSTALL_ROOT}
_MODQT5_FAKE_FLAGS =		INSTALL_ROOT=${MODQMAKE5_INSTALL_ROOT}

MODQMAKE5_configure =
MODQMAKE5_build =
MODQMAKE5_install =
.for _qp in ${MODQMAKE5_PROJECTS}
_MODQMAKE5_CD_${_qp:/=_} = \
	cd ${WRKBUILD}; \
	if [ -d ${WRKSRC}/${_qp} ]; then \
		dir=${_qp}; \
	else \
		dir=$$(dirname ${_qp}); \
	fi; \
	mkdir -p $$dir; \
	cd -- $$dir
MODQMAKE5_configure += \
	cd ${WRKSRC}; \
	if [ -d ${_qp} ]; then \
		pro=$$(echo ${_qp}/*.pro); \
	else \
		pro=${_qp}; \
	fi; \
	${_MODQMAKE5_CD_${_qp:/=_}}; \
	echo >&2 ${MODQT5_QMAKE} ${MODQMAKE5_ARGS} ${WRKSRC}/$$pro; \
	${MODQT5_QMAKE} ${MODQMAKE5_ARGS} ${WRKSRC}/$$pro;
MODQMAKE5_build += \
	${_MODQMAKE5_CD_${_qp:/=_}}; \
	${_MODQMAKE5_build_SYSTRACE_CMD} ${SETENV} ${MAKE_ENV} \
                ${MAKE_PROGRAM} ${MAKE_FLAGS} -f Makefile ${ALL_TARGET};
MODQMAKE5_install += \
	${_MODQMAKE5_CD_${_qp:/=_}}; \
	umask 022; \
	${_FAKESUDO} ${_MODQMAKE5_install_SYSTRACE_CMD} \
		${SETENV} ${MAKE_ENV} ${FAKE_SETUP} \
		${MAKE_PROGRAM} ${ALL_FAKE_FLAGS} ${_MODQT5_FAKE_FLAGS} \
		-f Makefile ${FAKE_TARGET};
.endfor
MODQMAKE_configure ?=	${MODQMAKE5_configure}
MODQMAKE_build ?=	${MODQMAKE5_build}
MODQMAKE_install ?=	${MODQMAKE5_install}

.if ${CONFIGURE_STYLE:Mqmake5} || ${CONFIGURE_STYLE:Mqmake}
SEPARATE_BUILD ?=	Yes
. if ${SEPARATE_BUILD:L} != "no"
.  if ${SEPARATE_BUILD:L} != "yes"
ERRORS +=	"Fatal: qmake supports only simple SEPARATE_BUILD builds."
.  endif
# "Shadow builds" of qmake can only work in subdirectory
WRKBUILD ?=		${WRKSRC}/build-${MACHINE_ARCH}
. endif

# Could not add ${_SYSTRACE_CMD} unconditionally since in case of
# do-build bsd.port.mk adds ${_SYSTRACE_CMD} itself.
. if !target(do-build) && "${CONFIGURE_STYLE:Nqmake:Nqmake5}" == ""
do-build:
	@@${MODQMAKE5_build}
. else
_MODQMAKE5_build_SYSTRACE_CMD =		${_SYSTRACE_CMD}
. endif

# Could not add ${_SYSTRACE_CMD} unconditionally since in case of
# do-install bsd.port.mk adds ${_SYSTRACE_CMD} itself.
. if !target(do-install) && "${CONFIGURE_STYLE:Nqmake:Nqmake5}" == ""
do-install:
	@@${MODQMAKE5_install}
. else
_MODQMAKE5_install_SYSTRACE_CMD =	${_SYSTRACE_CMD}
. endif
.endif
@


1.8
log
@Unbreak the case of USE_SYSTRACE=Yes: we tried to run under systrace
always, and bsd.port.mk invokes systrace for us already when in do-build
or do-install target.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.7 2016/03/06 23:59:51 zhuk Exp $
d140 1
a140 1
                ${MAKE_PROGRAM} ${MAKE_FLAGS} -f ${MAKE_FILE} ${ALL_TARGET};
d147 1
a147 1
		-f ${MAKE_FILE} ${FAKE_TARGET};
@


1.7
log
@Add support for CONFIGURE_STYLE=qmake. No ports affected, since this is
an opt-in. Actual qmake-based ports will be switched on case-by-case
basis in the near future.

Unslacking after discussion with at least naddy@@ & espie@@ from... 2014?!

Oh my.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.6 2014/12/11 17:45:04 zhuk Exp $
d139 1
a139 1
	${_SYSTRACE_CMD} ${SETENV} ${MAKE_ENV} \
d144 1
a144 1
	${_FAKESUDO} ${_SYSTRACE_CMD} \
d163 2
d168 2
d172 2
d177 2
@


1.6
log
@Zap forgotten ".if", and tweak whitespace while there.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.5 2014/12/11 17:39:03 zhuk Exp $
a11 1

a14 1

a17 1

d27 2
d88 84
@


1.5
log
@Use existing _MODQT5_SETUP insted of inventing new variable.
No functional change.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.4 2014/12/11 13:24:27 zhuk Exp $
d5 2
a6 2
MODQT_OVERRIDE_UIC ?= Yes
MODQT5_OVERRIDE_UIC ?= ${MODQT_OVERRIDE_UIC}
d12 1
a12 1
.if ${CONFIGURE_STYLE:Mcmake}
d15 2
a16 2
.endif
MODQT_CONFIGURE_ARGS ?= ${MODQT5_CONFIGURE_ARGS}
d20 1
@


1.4
log
@Fix usage of Qt5 from CMake.

CMake files are not installed in ${PREFIX}/lib anymore; instead,
the qt5.port.mk will provide necessary environment variables to help
CMake to find the Qt5 packages.

Not connected to build, so no bump.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.3 2014/12/10 20:11:03 zhuk Exp $
a12 2
MODQT5_CONFIGURE_ARGS =	-DCMAKE_DISABLE_FIND_PACKAGE_Qt4=Yes
.else
a31 16
MODQT5_LIB_DEPENDS = 	x11/qt5
MODQT_LIB_DEPENDS ?= 	${MODQT5_LIB_DEPENDS}
LIB_DEPENDS += 		${MODQT5_LIB_DEPENDS}

CONFIGURE_ENV +=${_MODQT5_SETUP}
MAKE_ENV +=	${_MODQT5_SETUP}
MAKE_FLAGS +=	${_MODQT5_SETUP}

MODQT5_USE_GCC4_MODULE ?=	Yes
.if ${MODQT5_USE_GCC4_MODULE} == "Yes"
  MODULES +=		gcc4
  MODGCC4_LANGS +=	c++
  MODGCC4_ARCHS ?=	*
.endif

_MODQT5_ENV =
d72 1
a72 1
_MODQT5_ENV +=		${_p}_DIR=${MODQT5_LIBDIR}/cmake
d74 15
a88 2
CONFIGURE_ENV +=	${_MODQT5_ENV}
MAKE_ENV +=		${_MODQT5_ENV}
@


1.3
log
@Allow to avoid automatic addition of gcc4 to MODULES.

This is needed in some very complicated cases (hi, Poppler!).
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.2 2014/12/09 12:38:06 zhuk Exp $
d48 46
@


1.2
log
@Since Qt5 is built with eg++, force gcc4 in MODULES for dependant ports.
There are no such in CVS yet, so no actual change.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.1.1.1 2014/12/08 20:33:38 zhuk Exp $
d42 6
a47 3
MODULES +=		gcc4
MODGCC4_LANGS +=	c++
MODGCC4_ARCHS ?=	*
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d41 4
@


1.1.1.1
log
@Import Qt 5.3.2.

Qt is a full development framework with tools designed to streamline
the creation of applications and user interfaces for desktop,
embedded, and mobile platforms.

This port is not enabled yet, because some ports will pick up Qt5
instead of Qt4, breaking build. Those will be fixed separately soon.

There are some non-critical things left to do:

1. Support for OpenBSD sensors framework.
2. V4L2 support.
3. -L${LOCALBASE}/* could come before -L${WRKBUILD}/* when linking is
   done across Qt module boundaries. This means that builds of Qt 5.y
   while having Qt 5.x installed (x < y) will be busted.

Volunteers are welcome to come in and help fixing those problems.

Last note: don't even try to build "debug" FLAVOR unless you know
what you're doing and you have about 20GB of free space. You've
been warned.

landry@@ agrees on continuing working in-tree
@
text
@@


1.1.1.2
log
@Import Qt 5.6.2.

The port is now being split into pieces. Cleanup and conflict resolving
to follow.
@
text
@d1 1
a1 1
# $OpenBSD: qt5.port.mk,v 1.12 2016/05/18 19:12:22 jca Exp $
d4 3
a6 3
# qt3/qt4/qt5 in a port.
MODQT_OVERRIDE_UIC ?=	Yes
MODQT5_OVERRIDE_UIC ?=	${MODQT_OVERRIDE_UIC}
d12 3
d17 2
a18 1
MODQT_CONFIGURE_ARGS ?=	${MODQT5_CONFIGURE_ARGS}
a30 2
MODQT5_QMAKE =	${LOCALBASE}/bin/qmake-qt5
MODQT_QMAKE ?=	${MODQT5_QMAKE}
a32 55
MODQT5_LRELEASE = ${LOCALBASE}/bin/lrelease-qt5
MODQT_LRELEASE ?= ${MODQT5_LRELEASE}

_MODQT5_CMAKE_PKGS = \
	Qt5 \
	Qt53DCore \
	Qt53DInput \
	Qt53DLogic \
	Qt53DQuick \
	Qt53DQuickInput \
	Qt53DQuickRender \
	Qt5Render \
	Qt5Bluetooth \
	Qt5Concurrent \
	Qt5Core \
	Qt5DBus \
	Qt5Designer \
	Qt5Enginio \
	Qt5Gui \
	Qt5Help \
	Qt5LinguistTools \
	Qt5Location \
	Qt5Multimedia \
	Qt5MultimediaWidgets \
	Qt5Network \
	Qt5Nfc \
	Qt5OpenGL \
	Qt5OpenGLExtensions \
	Qt5Positioning \
	Qt5PrintSupport \
	Qt5Qml \
	Qt5Quick \
	Qt5QuickTest \
	Qt5QuickWidgets \
	Qt5Script \
	Qt5ScriptTools \
	Qt5Sensors \
	Qt5SerialBus \
	Qt5SerialPort \
	Qt5Sql \
	Qt5Svg \
	Qt5Test \
	Qt5UiPlugin \
	Qt5UiTools \
	Qt5WebChannel \
	Qt5WebKit \
	Qt5WebKitWidgets \
	Qt5WebSockets \
	Qt5Widgets \
	Qt5X11Extras \
	Qt5Xml \
	Qt5XmlPatterns
.for _p in ${_MODQT5_CMAKE_PKGS}
_MODQT5_SETUP +=	${_p}_DIR=${MODQT5_LIBDIR}/cmake
.endfor
d34 1
a34 1
MODQT5_LIB_DEPENDS = 	x11/qt5/qtbase,-main
a35 8

# qdoc, etc.
MODQT5_BUILD_DEPENDS = 	x11/qt5/qttools,-main
MODQT_BUILD_DEPENDS ?= 	${MODQT5_BUILD_DEPENDS}

MODQT_DEPS ?=		Yes
MODQT5_DEPS ?=		${MODQT_DEPS}
.if ${MODQT5_DEPS:L} == "yes"
a36 2
BUILD_DEPENDS += 	${MODQT5_BUILD_DEPENDS}
.endif
a40 21

MODQT5_USE_GCC4_MODULE ?=	Yes
.if ${MODQT5_USE_GCC4_MODULE:L} == "yes"
  MODULES +=		gcc4
  MODGCC4_LANGS +=	c++
  MODGCC4_ARCHS ?=	*
  # force using compilers/wrappers from ${WRKDIR}/bin
  # XXX LINK_C is actually unused by qmake
  _MODQT5_SETUP +=	CC=cc CXX=c++ LINK_C=cc LINK=c++
.endif

.include "Makefile.version"

MODQT5_VERSION =	${QT5_VERSION}
MODQT_VERSION ?=	${MODQT5_VERSION}

_MODQT5_PKGMATCH !=
show_deps: patch
	@@cpkgs=$$(echo ${_MODQT5_CMAKE_PKGS:NQt5} | sed 's/ /|/g'); \
	find ${WRKSRC} \( -name '*.pr[iof]' -or -iname '*cmake*' \) -print0 | \
		xargs -0r egrep -hA 2 "\\<(qtHaveModule|QT_CONFIG|$$cpkgs)\\>|Qt5::"
@

