head	1.4;
access;
symbols
	kili_20070902:1.1.1.1 kili:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2008.01.18.21.51.13;	author kili;	state dead;
branches;
next	1.3;

1.3
date	2007.11.18.20.13.31;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.01.20.46.30;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.01.22.18.41;	author kili;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.09.01.22.18.41;	author kili;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
Update to 0.5, and split up into subpackages -main and -lib.

Thanks to Simon Kuhnle for testing.
@
text
@$OpenBSD: patch-Main_hs,v 1.3 2007/11/18 20:13:31 kili Exp $
--- Main.hs.orig	Wed Oct 17 01:53:12 2007
+++ Main.hs	Sun Oct 28 18:22:13 2007
@@@@ -62,7 +62,7 @@@@ main = do
                     return . W.ensureTags layoutHook workspaces
                            $ W.mapLayout (fromMaybe layoutHook . maybeRead) ws
 
-        gaps = take (length xinesc) $ defaultGaps ++ repeat (0,0,0,0)
+        gaps = take (length xinesc) $ repeat (0,0,0,0)
 
         cf = XConf
             { display       = dpy
@


1.3
log
@
Update to 0.4. From Dmitri Alenitchev.
@
text
@d1 1
a1 1
$OpenBSD: patch-Main_hs,v 1.2 2007/10/01 20:46:30 kili Exp $
@


1.2
log
@
Update to 0.3.
Note to xmonad junkies: this doesn't include XMonadContrib and related
stuff; there's a lot of activity on the xmonad list, so adding knobs to
the port *now* may be a bad idea.
@
text
@d1 7
a7 7
$OpenBSD: patch-Main_hs,v 1.1.1.1 2007/09/01 22:18:41 kili Exp $
--- Main.hs.orig	Tue Sep  4 21:34:21 2007
+++ Main.hs	Fri Sep 14 15:10:20 2007
@@@@ -53,7 +53,7 @@@@ main = do
     let winset | ("--resume" : s : _) <- args
                , [(x, "")]            <- reads s = x
                | otherwise = new workspaces $ zipWith SD xinesc gaps
a10 1
         safeLayouts = case defaultLayouts of [] -> (full, []); (x:xs) -> (x,xs)
d12 1
@


1.1
log
@Initial revision
@
text
@d1 12
a12 12
$OpenBSD$
--- Main.hs.orig	Thu May 31 03:04:51 2007
+++ Main.hs	Sat Aug 25 19:07:00 2007
@@@@ -61,7 +61,7 @@@@ main = do
         st = XState
             { windowset     = winset
             , layouts       = M.fromList [(w, safeLayouts) | w <- [0 .. W workspaces - 1]]
-            , statusGaps    = take (length xinesc) $ defaultGaps ++ repeat (0,0,0,0)
+            , statusGaps    = take (length xinesc) $ repeat (0,0,0,0)
             , xineScreens   = xinesc
             , dimensions    = (fromIntegral (displayWidth  dpy dflt),
                                fromIntegral (displayHeight dpy dflt)) }
@


1.1.1.1
log
@
Xmonad is a tiling window manager for X. Windows are arranged
automatically to tile the screen without gaps or overlap, maximising
screen use. All features of the window manager are accessible from
the keyboard: a mouse is strictly optional. Xmonad is written and
extensible in Haskell. Custom layout algorithms, and other extensions,
may be written by the user in config files. Layouts are applied
dynamically, and different layouts may be used on each workspace.
Xinerama is fully supported, allowing windows to be tiled on several
screens. A guiding principle of the design is predictability: users
should know in advance precisely the window arrangement that will
result from any action, leading to a simpler user interface.

@
text
@@
