head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.14
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.12
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.8
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.6
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	ajacoutot_20070714:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2013.09.24.04.53.18;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	2012.07.10.15.22.45;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.14.18.29.59;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.15.10.06.01;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2007.09.05.16.48.02;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.27.13.19.33;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.14.20.33.55;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.07.14.20.33.55;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to boswars 2.7.

ok bentley@@
@
text
@$OpenBSD: patch-SConstruct,v 1.6 2012/07/10 15:22:45 jasper Exp $
--- SConstruct.orig	Sun Jun  2 08:41:11 2013
+++ SConstruct	Sat Sep 14 21:46:08 2013
@@@@ -32,12 +32,12 @@@@ SConsignFile()
 
 def DefineOptions(filename, args):
    opts = Variables(filename, args)
-   opts.Add('CPPPATH', 'Additional preprocessor paths', ['/usr/local/include'])
+   opts.Add('CPPPATH', 'Additional preprocessor paths', ['/usr/local/include'], Split(''))
    opts.Add('CPPFLAGS', 'Additional preprocessor flags')
    opts.Add('CPPDEFINES', 'defined constants', Split(''))
-   opts.Add('LIBPATH', 'Additional library paths', ['/usr/local/lib'])
+   opts.Add('LIBPATH', 'Additional library paths', ['/usr/local/lib'], Split(''))
    opts.Add('LIBS', 'Additional libraries')
-   opts.Add('CCFLAGS', 'C Compiler flags', Split(ccflags))
+   opts.Add('CCFLAGS', 'C Compiler flags', Split(ccflags), Split(''))
    opts.Add('LINKFLAGS', 'Linker Compiler flags')
    opts.Add('CC', 'C Compiler')
    opts.Add('CXX', 'C++ Compiler')
@@@@ -51,6 +51,9 @@@@ def DefineOptions(filename, args):
 opts = DefineOptions("build_options.py", ARGUMENTS)
 env = Environment(ENV = {'PATH':os.environ['PATH']}) # for an unknown reason Environment(options=opts) doesnt work well
 opts.Update(env) # Needed as Environment(options=opts) doesnt seem to work
+env['CCFLAGS'] = Split(ccflags) + Split(env['CCFLAGS'])
+env['CPPPATH'] = Split(env['CPPPATH'])
+env['LIBPATH'] = Split(env['LIBPATH'])
 Help(opts.GenerateHelpText(env))
 mingw = env.Clone()
 optionsChanged = True
@@@@ -144,6 +147,10 @@@@ def CheckOpenGL(env, conf):
       'LIBS': ['GL'], 
       'LIBPATH': ['/usr/lib', '/usr/X11R6/lib'],
       'CPPPATH': ['/usr/include']}
+  opengl['openbsd'] = { 
+      'LIBS': ['GL'], 
+      'LIBPATH': ['/usr/X11R6/lib'],
+      'CPPPATH': ['/usr/X11R6/include']}
   opengl['cygwin'] = {
       'LIBS': ['opengl3']}
   opengl['darwin'] = {
@@@@ -155,6 +162,8 @@@@ def CheckOpenGL(env, conf):
   else:
      if sys.platform[:5] == 'linux' or sys.platform.startswith('gnukfreebsd'):
         platform = 'linux'
+     if sys.platform[:7] == 'openbsd':
+        platform = 'openbsd'
      glconfig = opengl.get(platform, {})
   for key in glconfig:
       if key != 'LIBS':
@@@@ -178,7 +187,7 @@@@ def CheckLuaLib(env, conf):
     return 1
   if conf.CheckLibWithHeader('lua5.1', 'lua.h', 'c'):
     return 1
-  if not conf.CheckLibWithHeader('lua', 'lua.h', 'c'):
+  if not conf.CheckLibWithHeader('lua', 'lualib.h', 'c'):
     return 0
   # make sure we have lualib which is included in lua 5.1
   if conf.CheckFunc('luaopen_base'):
@@@@ -189,13 +198,13 @@@@ def AutoConfigure(env):
   conf = Configure(env)
 
   ## check for required libs ##
-  if not conf.CheckLibWithHeader('png', 'png.h', 'c'):
-     print 'Did not find png library or headers, exiting!'
-     Exit(1)
   if not conf.CheckLibWithHeader('z', 'zlib.h', 'c'):
      print 'Did not find the zlib library or headers, exiting!'
      Exit(1)
-  if not 'USE_WIN32' in env['CPPDEFINES'] and not sys.platform.startswith('freebsd'):
+  if not conf.CheckLibWithHeader('png', 'png.h', 'c'):
+     print 'Did not find png library or headers, exiting!'
+     Exit(1)
+  if not 'USE_WIN32' in env['CPPDEFINES'] and not sys.platform.startswith('openbsd'):
      if not conf.CheckLib('dl'):
         print 'Did not find dl library or header which is needed on some systems for lua. Exiting!'
         Exit(1)
@@@@ -207,12 +216,12 @@@@ def AutoConfigure(env):
      Exit(1)
 
   # Check for optional libraries #
+  if conf.CheckLib('ogg'):
+     env.Append(CPPDEFINES = 'USE_OGG')
   if conf.CheckLib('vorbis'):
      env.Append(CPPDEFINES = 'USE_VORBIS')
   if conf.CheckLib('theora'):
      env.Append(CPPDEFINES = 'USE_THEORA')
-  if conf.CheckLib('ogg'):
-     env.Append(CPPDEFINES = 'USE_OGG')
 
   # check for optional functions
   if conf.CheckFunc('strcasestr'):
@@@@ -265,7 +274,7 @@@@ addBosWarsPaths(env)
 
 # define the different build environments (variants)
 release = env.Clone()
-release.Append(CCFLAGS = Split('-O2 -pipe -fomit-frame-pointer -fexpensive-optimizations -ffast-math'))
+release.Append(CCFLAGS = Split('-fomit-frame-pointer -fexpensive-optimizations -ffast-math'))
 
 if mingw['extrapath']:
   mingw.Tool('crossmingw', toolpath = ['tools/scons/'])
@


1.6
log
@handle multiple lua versions, for now everything builds with the "old" 5.1 in the new location.
use FLAVOR=lua52 to use lua 5.2 with these ports.
@
text
@d1 3
a3 3
$OpenBSD: patch-SConstruct,v 1.5 2010/04/14 18:29:59 ajacoutot Exp $
--- SConstruct.orig	Sun Apr 18 20:04:54 2010
+++ SConstruct	Mon Jul  9 19:37:51 2012
d43 1
a43 1
      if sys.platform[:5] == 'linux':
@


1.5
log
@Update to boswars-2.6.
Resign from maintainership.
@
text
@d1 3
a3 3
$OpenBSD: patch-SConstruct,v 1.4 2008/03/15 10:06:01 ajacoutot Exp $
--- SConstruct.orig	Sun Apr 11 14:13:04 2010
+++ SConstruct	Mon Apr 12 15:27:22 2010
d9 1
a9 1
+   opts.Add('CPPPATH', 'Additional preprocessor paths', ['${LOCALBASE}/include'], Split(''))
d13 1
a13 1
+   opts.Add('LIBPATH', 'Additional library paths', ['${LOCALBASE}/lib'], Split(''))
d36 2
a37 2
+      'LIBPATH': ['${X11BASE}/lib'],
+      'CPPPATH': ['${X11BASE}/include']}
a49 9
@@@@ -170,7 +179,7 @@@@ def CheckOpenGL(env, conf):
 def CheckLuaLib(env, conf):
   if not 'USE_WIN32' in env['CPPDEFINES']:
      if env.WhereIs('pkg-config'):
-        for packagename in ['lua5.1', 'lua51', 'lua']:
+        for packagename in ['lua']:
            exitcode,_ = ParseConfig(env, 'pkg-config --cflags --libs ' + packagename)
            if exitcode == 0:
               break
@


1.4
log
@- update to version 2.5
@
text
@d1 3
a3 3
$OpenBSD: patch-SConstruct,v 1.3 2007/09/05 16:48:02 ajacoutot Exp $
--- SConstruct.orig	Mon Mar  3 10:32:55 2008
+++ SConstruct	Mon Mar  3 10:37:57 2008
d7 1
a7 1
    opts = Options(filename, args)
d9 1
a9 1
+   opts.Add('CPPPATH', 'Additional preprocessor paths', ['/usr/local/include'], Split(''))
d13 1
a13 1
+   opts.Add('LIBPATH', 'Additional library paths', ['/usr/local/lib'], Split(''))
d20 1
a20 1
@@@@ -50,6 +50,9 @@@@ def DefineOptions(filename, args):
d28 1
a28 1
 mingw = env.Copy()
d30 1
a30 1
@@@@ -143,6 +146,10 @@@@ def CheckOpenGL(env, conf):
d36 2
a37 2
+      'LIBPATH': ['!!X11BASE!!/lib'],
+      'CPPPATH': ['!!X11BASE!!/include']}
d41 1
a41 1
@@@@ -154,6 +161,8 @@@@ def CheckOpenGL(env, conf):
d50 1
a50 2
@@@@ -168,8 +177,8 @@@@ def CheckOpenGL(env, conf):
 
d53 14
a66 9
-     if env.WhereIs('lua-config'):
-        env.ParseConfig('lua-config --include --libs')
+     if env.WhereIs('pkg-config'):
+        env.ParseConfig('pkg-config --cflags --libs lua')
      elif env.WhereIs('pkg-config'):
         for packagename in ['lua5.1', 'lua51', 'lua']:
            exitcode, _ = ParseConfig(env, 'pkg-config --cflags --libs ' + packagename)
@@@@ -192,7 +201,7 @@@@ def CheckLuaLib(env, conf):
   lualibfound = 0
d68 1
a68 7
      return 1
-  if conf.CheckLibWithHeader('lualib', 'lualib.h', 'c'):
+  if conf.CheckLibWithHeader('lua', 'lualib.h', 'c'):
      lualibfound = 1
   elif conf.CheckLibWithHeader('lualib50', 'lualib.h', 'c'):
      lualibfound = 1
@@@@ -207,13 +216,13 @@@@ def AutoConfigure(env):
d86 1
a86 1
@@@@ -225,12 +234,12 @@@@ def AutoConfigure(env):
d101 1
a101 1
@@@@ -283,7 +292,7 @@@@ addBosWarsPaths(env)
d104 1
a104 1
 release = env.Copy()
@


1.3
log
@- small update to boswars-2.4.1
OpenGL is now compiled in (but disabled by default in the game options)
@
text
@d1 4
a4 4
$OpenBSD: patch-SConstruct,v 1.2 2007/08/27 13:19:33 ajacoutot Exp $
--- SConstruct.orig	Sun Sep  2 21:44:44 2007
+++ SConstruct	Wed Sep  5 18:24:18 2007
@@@@ -33,12 +33,12 @@@@ SConsignFile()
d16 1
a16 1
+   opts.Add('CCFLAGS', 'C Compiler flags', Split(''))
d20 1
a20 1
@@@@ -49,6 +49,9 @@@@ def DefineOptions(filename, args):
d30 1
a30 1
@@@@ -142,6 +145,10 @@@@ def CheckOpenGL(env, conf):
d41 7
a47 7
@@@@ -150,6 +157,8 @@@@ def CheckOpenGL(env, conf):
   platform = sys.platform
   if sys.platform[:5] == 'linux':
      platform = 'linux'
+  if sys.platform[:7] == 'openbsd':
+     platform = 'openbsd'
   glconfig = opengl.get(platform, {})
d50 1
a50 1
@@@@ -164,8 +173,8 @@@@ def CheckOpenGL(env, conf):
d61 1
a61 1
@@@@ -188,7 +197,7 @@@@ def CheckLuaLib(env, conf):
d70 1
a70 1
@@@@ -203,13 +212,13 @@@@ def AutoConfigure(env):
d88 1
a88 1
@@@@ -221,12 +230,12 @@@@ def AutoConfigure(env):
d103 1
a103 1
@@@@ -279,7 +288,7 @@@@ addBosWarsPaths(env)
@


1.2
log
@- update to latest version
- remove one patch (included upstream)
@
text
@d1 3
a3 3
$OpenBSD: patch-SConstruct,v 1.1.1.1 2007/07/14 20:33:55 ajacoutot Exp $
--- SConstruct.orig	Wed Aug  8 20:24:15 2007
+++ SConstruct	Mon Aug 27 14:20:11 2007
d20 1
a20 1
@@@@ -50,6 +50,9 @@@@ def DefineOptions(filename, args):
d30 21
a50 1
@@@@ -161,8 +164,8 @@@@ def CheckOpenGL(env, conf):
d61 1
a61 1
@@@@ -185,7 +188,7 @@@@ def CheckLuaLib(env, conf):
d70 1
a70 1
@@@@ -200,13 +203,13 @@@@ def AutoConfigure(env):
d88 1
a88 1
@@@@ -215,12 +218,12 @@@@ def AutoConfigure(env):
d100 4
a103 4
   if int(env['opengl']) == 1:
      CheckOpenGL(env, conf)
   
@@@@ -274,7 +277,7 @@@@ addBosWarsPaths(env)
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- SConstruct.orig	Sun Mar  4 14:14:23 2007
+++ SConstruct	Sat Jul 14 12:50:04 2007
d8 2
a9 2
-   opts.Add('CPPPATH', 'Additional preprocessor paths')
+   opts.Add('CPPPATH', 'Additional preprocessor paths', Split(''))
d12 2
a13 1
    opts.Add('LIBPATH', 'Additional library paths')
d20 1
a20 1
@@@@ -52,6 +52,8 @@@@ def DefineOptions(filename, args):
d26 1
d28 1
d30 1
a30 3
 if os.path.exists('build_options.py'):
@@@@ -101,8 +103,8 @@@@ def CheckOpenGL(env, conf):
   sourcesEngine.append(globSources("guichan/opengl"))
d33 12
a44 11
-  if env.WhereIs('lua-config'):
-    env.ParseConfig('lua-config --include --libs')
+  if env.WhereIs('pkg-config'):
+    env.ParseConfig('pkg-config --cflags --libs lua')
   found = 0
   if conf.CheckLibWithHeader('lua', 'lua.h', 'c'):
     found = 1
@@@@ -117,7 +119,7 @@@@ def CheckLuaLib(env, conf):
   if not found:
     return 0
 
d47 7
a53 7
      return 1
   if conf.CheckLibWithHeader('lualib50', 'lualib.h', 'c'):
      return 1
@@@@ -139,26 +141,23 @@@@ def AutoConfigure(env):
   if not conf.CheckLibWithHeader('SDL', 'SDL.h', 'c'):
      print 'Did not find SDL library or headers, exiting!'
      Exit(1)
d60 1
a60 2
-  if not conf.CheckLib('dl'):
-     print 'Did not find dl library or header which is needed on some systems for lua. Exiting!'
d63 6
a68 3
      Exit(1)
   if not CheckLuaLib(env, conf):
      print 'Did not find required lua library. Exiting!'
d80 1
a80 1
   if env['opengl'] == 1:
d83 6
a88 6
@@@@ -202,7 +201,7 @@@@ if env['debug'] or ARGUMENTS.has_key('DEBUG') or env['
     env.Append(CPPDEFINES = 'DEBUG')
     env.Append(CCFLAGS = Split('-g -Wsign-compare -Wall -Werror'))
 else:
-    env.Append(CCFLAGS = Split('-O2 -pipe -fomit-frame-pointer -fexpensive-optimizations -ffast-math'))
+    env.Append(CCFLAGS = Split('-fomit-frame-pointer -fexpensive-optimizations -ffast-math'))
d90 2
a91 2
 if env['profile']:
     env.Append(CCFLAGS = Split('-pg'))
@


1.1.1.1
log
@Import boswars-2.3

Bos Wars is a futuristic real-time strategy game. It is possible to play
against human opponents over LAN, internet, or against the computer.
It aims to create a completely original and fun open source RTS game.


ok simon@@
@
text
@@
