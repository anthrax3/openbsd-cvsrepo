head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.34
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.32
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.28
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.30
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.26
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.24
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.22
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.20
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.18
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.10.30.23.08.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@fix a few stupid warnings.
@
text
@$OpenBSD$
--- komi.c.orig	Mon Aug  9 22:07:21 2004
+++ komi.c	Fri Oct 31 00:05:45 2008
@@@@ -30,7 +30,6 @@@@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <malloc.h>
 #include <math.h>
 #include <time.h>
 
@@@@ -2875,8 +2874,8 @@@@ void loadsound(Mix_Chunk ** thesound, char * directory
    if (strlen(directory) + strlen(filename) >= sizeof(fullpath))    // Check for buffer overflow on fullpath
    {
       fprintf(stderr, "Fatal error while loading %s:\n", filename);
-      fprintf(stderr, "Size of directory name (%d chars) plus size of file name (%d chars)\n", strlen(directory), strlen(filename));
-      fprintf(stderr, "is too long (over %d chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
+      fprintf(stderr, "Size of directory name (%zu chars) plus size of file name (%zu chars)\n", strlen(directory), strlen(filename));
+      fprintf(stderr, "is too long (over %zu chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
       cleanexit(1);
    }
    strcpy(fullpath, directory);
@@@@ -3276,8 +3275,8 @@@@ void screenshot (SDL_Surface * surface, char * directo
    if (strlen(directory) + strlen(filename) >= sizeof(fullpath))    // Check for buffer overflow on fullpath
    {
       fprintf(stderr, "Error while saving %s:\n", filename);
-      fprintf(stderr, "Size of directory name (%d chars) plus size of file name (%d chars)\n", strlen(directory), strlen(filename));
-      fprintf(stderr, "is too long (over %d chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
+      fprintf(stderr, "Size of directory name (%zu chars) plus size of file name (%zu chars)\n", strlen(directory), strlen(filename));
+      fprintf(stderr, "is too long (over %zu chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
       return;
    }
    strcpy(fullpath, directory);
@@@@ -3625,8 +3624,8 @@@@ void saveprefs (char * directory, char * filename)
    if (strlen(directory) + strlen(filename) >= sizeof(fullpath))    // Check for buffer overflow on fullpath
    {
       fprintf(stderr, "Error while saving %s:\n", filename);
-      fprintf(stderr, "Size of directory name (%d chars) plus size of file name (%d chars)\n", strlen(directory), strlen(filename));
-      fprintf(stderr, "is too long (over %d chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
+      fprintf(stderr, "Size of directory name (%zu chars) plus size of file name (%zu chars)\n", strlen(directory), strlen(filename));
+      fprintf(stderr, "is too long (over %zu chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
       return;
    }
    strcpy(fullpath, directory);
@@@@ -3662,8 +3661,8 @@@@ void loadprefs (char * directory, char * filename)
    if (strlen(directory) + strlen(filename) >= sizeof(fullpath))    // Check for buffer overflow on fullpath
    {
       fprintf(stderr, "Error while loading %s:\n", filename);
-      fprintf(stderr, "Size of directory name (%d chars) plus size of file name (%d chars)\n", strlen(directory), strlen(filename));
-      fprintf(stderr, "is too long (over %d chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
+      fprintf(stderr, "Size of directory name (%zu chars) plus size of file name (%zu chars)\n", strlen(directory), strlen(filename));
+      fprintf(stderr, "is too long (over %zu chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
       return;
    }
    strcpy(fullpath, directory);
@@@@ -3740,8 +3739,8 @@@@ int playmusic (char * directory, char * filename, int 
    if (strlen(directory) + strlen(filename) >= sizeof(fullpath))    // Check for buffer overflow on fullpath
    {
       fprintf(stderr, "Error while loading %s:\n", filename);
-      fprintf(stderr, "Size of directory name (%d chars) plus size of file name (%d chars)\n", strlen(directory), strlen(filename));
-      fprintf(stderr, "is too long (over %d chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
+      fprintf(stderr, "Size of directory name (%zu chars) plus size of file name (%zu chars)\n", strlen(directory), strlen(filename));
+      fprintf(stderr, "is too long (over %zu chars), and would cause a buffer overflow...\n", sizeof(fullpath) - 1);
       return 1;
    }
    strcpy(fullpath, directory);
@
