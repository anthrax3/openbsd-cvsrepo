head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.24
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.16
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.14
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	edd_20101025:1.1.1.1
	edd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2010.10.25.12.12.05;	author edd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.25.12.12.05;	author edd;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Make sure the saves are in the user's home dir where they have write access

--- src/savegame.c.orig	Tue May 25 03:11:52 2010
+++ src/savegame.c	Sun Oct 24 23:11:23 2010
@@@@ -1,26 +1,50 @@@@
 // routines for handling save&load of savegames
 
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <errno.h>
+
 #include "keen.h"
 #include "savegame.fdh"
 
 #define SG_HEADERSIZE			8
 
-
 char game_save(int slot)
 {
 FILE *fp;
-char fname[20];
+char fname[KEEN_MAX_SAVENAME];
 int i;
+char *userhome;
+struct stat st;
 
 	// can't save game under certain circumstances
 	if (fade_in_progress()) return 1;
 	
-	
-	sprintf(fname, "savegame%d.dat", slot);
-		
+	userhome = getenv("HOME");
+	if (userhome == NULL) {
+		fprintf(stderr, "can't get $HOME\n");
+		return 1;
+	}
+
+	snprintf(fname, KEEN_MAX_SAVENAME, "%s/" KEEN_SAVE_DIR, userhome);
+	if (mkdir(fname, 0755) != 0) {
+		/* ok to fail so long as a dir */
+		stat(fname, &st);
+		if (! (st.st_mode & S_IFDIR)) {
+			perror(fname);
+			return 1;
+		}
+	}
+
+	snprintf(fname, KEEN_MAX_SAVENAME, 
+	    "%s/" KEEN_SAVE_DIR "/savegame%d.dat", userhome, slot);
+
 	lprintf("Saving game to %s\n", fname);
 	fp = fileopen(fname, "wb");
-	if (!fp) return 1;
+	if (!fp) {
+		perror(fname);	
+		return 1;
+	}
 	
 	fprintf(fp, "CKSAVE%c", SAVEGAMEVERSION);
 	fputc(IsBigEndian(), fp);
@@@@ -127,12 +151,19 @@@@ char custom = 0;
 char game_load(int slot)
 {
 FILE *fp;
-char fname[20];
+char fname[KEEN_MAX_SAVENAME];
 uchar episode, level, lives, iscustom;
 int i;
+char *userhome;
 
+	userhome = getenv("HOME");
+	if (userhome == NULL) {
+		fprintf(stderr, "can't get $HOME\n");
+		return 1;
+	}
 	
-	sprintf(fname, "savegame%d.dat", slot);
+	snprintf(fname, KEEN_MAX_SAVENAME,
+	    "%s/" KEEN_SAVE_DIR "/savegame%d.dat", userhome, slot);
 	
 	if (!IsValidSaveGame(fname))
 	{
@@@@ -210,8 +241,16 @@@@ int i;
 
 void DeleteSaveGame(int slot)
 {
-char fname[20];
+char fname[KEEN_MAX_SAVENAME];
+char *userhome;
 
-	sprintf(fname, "savegame%d.dat", slot);
+	userhome = getenv("HOME");
+	if (userhome == NULL) {
+		fprintf(stderr, "can't get $HOME\n");
+		return;
+	}
+
+	snprintf(fname, KEEN_MAX_SAVENAME,
+	    "%s/" KEEN_SAVE_DIR "/savegame%d.dat", userhome, slot);
 	remove(fname);	
 }
@


1.1.1.1
log
@import clonekeen. A commander keen clone.

OK phessler@@
@
text
@@
