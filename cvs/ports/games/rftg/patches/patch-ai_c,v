head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	ports:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.10.05.09.29.48;	author espie;	state Exp;
branches;
next	1.2;
commitid	6SY3pz6uWKBpFzFt;

1.2
date	2009.09.20.13.56.54;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2009.09.08.20.45.04;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.09.08.20.45.04;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@new version, with support for Alien Artefacts cards (but not play mode)
and a new "scenario" option.
@
text
@$OpenBSD$
--- ai.c.orig	Sat Aug 16 18:41:10 2014
+++ ai.c	Sun Oct  5 11:17:09 2014
@@@@ -8838,14 +8838,14 @@@@ static void initial_training(game *g)
 	g->deck_size = 0;
 	g->cur_action = 0;
 	memset(g->deck, 0, sizeof(card) * MAX_DECK);
-	memset(g->goal_active, 0, sizeof(int) * MAX_GOAL);
-	memset(g->goal_avail, 0, sizeof(int) * MAX_GOAL);
+	memset(g->goal_active, 0, sizeof(short) * MAX_GOAL);
+	memset(g->goal_avail, 0, sizeof(short) * MAX_GOAL);
 
 	/* Clear some uninitialized player information */
 	for (i = 0; i < g->num_players; i++)
 	{
 		/* Clear player's card counts and winner flag */
-		memset(g->p[i].goal_claimed, 0, sizeof(int) * MAX_GOAL);
+		memset(g->p[i].goal_claimed, 0, sizeof(int8_t) * MAX_GOAL);
 		g->p[i].fake_hand = 0;
 		g->p[i].drawn_round = 0;
 		g->p[i].fake_discards = 0;
@


1.2
log
@update: patches integrated.
new features:
- can play with any option combination (finally, extensions without conquest
and objectives)
- more readable UI.
@
text
@d1 21
a21 38
$OpenBSD: patch-ai_c,v 1.1 2009/09/08 20:45:04 espie Exp $
--- ai.c.orig	Tue Sep  8 21:27:26 2009
+++ ai.c	Tue Sep  8 21:28:23 2009
@@@@ -96,7 +96,7 @@@@ static void ai_initialize(game *g, int who, double fac
 #endif
 
 	/* Create evaluator filename */
-	sprintf(fname, "network/rftg.eval.%d.%d%s.net", g->expanded,
+	sprintf(fname, DATADIR "network/rftg.eval.%d.%d%s.net", g->expanded,
 	        g->num_players, g->advanced ? "a" : "");
 
 	/* Attempt to load network weights from disk */
@@@@ -122,7 +122,7 @@@@ static void ai_initialize(game *g, int who, double fac
 #endif
 
 	/* Create predictor filename */
-	sprintf(fname, "network/rftg.role.%d.%d%s.net", g->expanded,
+	sprintf(fname, DATADIR "network/rftg.role.%d.%d%s.net", g->expanded,
 	        g->num_players, g->advanced ? "a" : "");
 
 	/* Attempt to load network weights from disk */
@@@@ -3758,14 +3758,14 @@@@ static void ai_shutdown(game *g, int who)
 	if (saved) return;
 
 	/* Create evaluator filename */
-	sprintf(fname, "network/rftg.eval.%d.%d%s.net", g->expanded,
+	sprintf(fname, DATADIR "network/rftg.eval.%d.%d%s.net", g->expanded,
 	        g->num_players, g->advanced ? "a" : "");
 
 	/* Save weights to disk */
 	save_net(&eval, fname);
 
 	/* Create predictor filename */
-	sprintf(fname, "network/rftg.role.%d.%d%s.net", g->expanded,
+	sprintf(fname, DATADIR "network/rftg.role.%d.%d%s.net", g->expanded,
 	        g->num_players, g->advanced ? "a" : "");
 
 	/* Save weights to disk */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Race for the galaxy, a card game with AI
@
text
@@
