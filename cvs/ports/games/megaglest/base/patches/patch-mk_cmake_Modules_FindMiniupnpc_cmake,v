head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.06.12.49.52;	author stsp;	state Exp;
branches;
next	1.2;
commitid	1pin1hbzBcDwHRhj;

1.2
date	2014.02.03.15.20.45;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2013.05.21.10.34.14;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to megaglest 3.11.1; ok ajacoutot
@
text
@$OpenBSD: patch-mk_cmake_Modules_FindMiniupnpc_cmake,v 1.2 2014/02/03 15:20:45 dcoppa Exp $
--- mk/cmake/Modules/FindMiniupnpc.cmake.orig	Mon Mar  9 00:09:10 2015
+++ mk/cmake/Modules/FindMiniupnpc.cmake	Mon Apr  6 10:35:53 2015
@@@@ -154,6 +154,7 @@@@ if (MINIUPNP_FOUND)
             {
                 char externalIP[16]     = \"\";
                 int compileTest = 1;
+	        externalIP[0] = '\0';
 	        if(compileTest == 0) UPNP_GetExternalIPAddress(urls.controlURL, data.first.servicetype, externalIP);
 
                 return 0;
@@@@ -175,6 +176,7 @@@@ if (MINIUPNP_FOUND)
             {
                 char externalIP[16]     = \"\";
                 int compileTest = 1;
+	        externalIP[0] = '\0';
 	        if(compileTest == 0) UPNP_GetExternalIPAddress(urls.controlURL, data.servicetype, externalIP);
 
                 return 0;
@


1.2
log
@Fix annoying warning with cmake>=2.8.12
@
text
@d1 9
a9 64
$OpenBSD: patch-mk_cmake_Modules_FindMiniupnpc_cmake,v 1.1 2013/05/21 10:34:14 dcoppa Exp $

Unbreak build with miniupnpc>1.7
(from upstream SVN revision 3958)

--- mk/cmake/Modules/FindMiniupnpc.cmake.orig	Tue Jun  5 23:45:54 2012
+++ mk/cmake/Modules/FindMiniupnpc.cmake	Mon Feb  3 16:03:38 2014
@@@@ -58,20 +58,16 @@@@ if (MINIUPNP_FOUND)
     #include <stdio.h>
     int main()
     {
-        struct UPNPDev *devlist = NULL;
-	int upnp_delay = 5000;
-	const char *upnp_multicastif = NULL;
-	const char *upnp_minissdpdsock = NULL;
-	int upnp_sameport = 0;
-	int upnp_ipv6 = 0;
-	int upnp_error = 0;
-	devlist = upnpDiscover(upnp_delay, upnp_multicastif, upnp_minissdpdsock, upnp_sameport, upnp_ipv6, &upnp_error);
+        static struct UPNPUrls urls;
+        static struct IGDdatas data;
 
+        GetUPNPUrls (&urls, &data, \"myurl\",0);
+
         return 0;
     }"
-   MINIUPNPC_VERSION_1_6_OR_HIGHER)
-    
-   IF (NOT MINIUPNPC_VERSION_1_6_OR_HIGHER)
+   MINIUPNPC_VERSION_1_7_OR_HIGHER)
+
+  IF (NOT MINIUPNPC_VERSION_1_7_OR_HIGHER)
           set(CMAKE_REQUIRED_INCLUDES ${MINIUPNP_INCLUDE_DIR})
           set(CMAKE_REQUIRED_LIBRARIES ${MINIUPNP_LIBRARY})
           check_cxx_source_runs("
@@@@ -88,6 +84,30 @@@@ if (MINIUPNP_FOUND)
 	        int upnp_sameport = 0;
 	        int upnp_ipv6 = 0;
 	        int upnp_error = 0;
+	        devlist = upnpDiscover(upnp_delay, upnp_multicastif, upnp_minissdpdsock, upnp_sameport, upnp_ipv6, &upnp_error);
+
+                return 0;
+            }"
+           MINIUPNPC_VERSION_PRE1_7)
+   ENDIF()
+ 
+   IF (NOT MINIUPNPC_VERSION_PRE1_7 AND NOT MINIUPNPC_VERSION_1_7_OR_HIGHER)
+          set(CMAKE_REQUIRED_INCLUDES ${MINIUPNP_INCLUDE_DIR})
+          set(CMAKE_REQUIRED_LIBRARIES ${MINIUPNP_LIBRARY})
+          check_cxx_source_runs("
+            #include <miniwget.h>
+            #include <miniupnpc.h>
+            #include <upnpcommands.h>
+            #include <stdio.h>
+            int main()
+            {
+                struct UPNPDev *devlist = NULL;
+	        int upnp_delay = 5000;
+	        const char *upnp_multicastif = NULL;
+	        const char *upnp_minissdpdsock = NULL;
+	        int upnp_sameport = 0;
+	        int upnp_ipv6 = 0;
+	        int upnp_error = 0;
 	        devlist = upnpDiscover(upnp_delay, upnp_multicastif, upnp_minissdpdsock, upnp_sameport);
d12 1
a12 49
@@@@ -96,25 +116,28 @@@@ if (MINIUPNP_FOUND)
 
    ENDIF()
 
-   set(CMAKE_REQUIRED_INCLUDES ${MINIUPNP_INCLUDE_DIR})
-   set(CMAKE_REQUIRED_LIBRARIES ${MINIUPNP_LIBRARY})
-   check_cxx_source_runs("
-    #include <miniwget.h>
-    #include <miniupnpc.h>
-    #include <upnpcommands.h>
-    #include <stdio.h>
-    static struct UPNPUrls urls;
-    static struct IGDdatas data;
-    int main()
-    {
-        char externalIP[16]     = "";
-	UPNP_GetExternalIPAddress(urls.controlURL, data.first.servicetype, externalIP);
+   IF (NOT MINIUPNPC_VERSION_PRE1_6 AND NOT MINIUPNPC_VERSION_PRE1_7 AND NOT MINIUPNPC_VERSION_1_7_OR_HIGHER)
+           set(CMAKE_REQUIRED_INCLUDES ${MINIUPNP_INCLUDE_DIR})
+           set(CMAKE_REQUIRED_LIBRARIES ${MINIUPNP_LIBRARY})
+           check_cxx_source_runs("
+            #include <miniwget.h>
+            #include <miniupnpc.h>
+            #include <upnpcommands.h>
+            #include <stdio.h>
+            static struct UPNPUrls urls;
+            static struct IGDdatas data;
+            int main()
+            {
+	        char externalIP[16];
+	        externalIP[0] = '\0';
+	        UPNP_GetExternalIPAddress(urls.controlURL, data.first.servicetype, externalIP);
 
-        return 0;
-    }"
-    MINIUPNPC_VERSION_1_5_OR_HIGHER)
+                return 0;
+            }"
+            MINIUPNPC_VERSION_1_5_OR_HIGHER)
+    ENDIF()
 
-    IF (NOT MINIUPNPC_VERSION_1_5_OR_HIGHER)
+    IF (NOT MINIUPNPC_VERSION_1_5_OR_HIGHER AND NOT MINIUPNPC_VERSION_PRE1_6 AND NOT MINIUPNPC_VERSION_PRE1_7 AND NOT MINIUPNPC_VERSION_1_7_OR_HIGHER)
          set(CMAKE_REQUIRED_INCLUDES ${MINIUPNP_INCLUDE_DIR})
          set(CMAKE_REQUIRED_LIBRARIES ${MINIUPNP_LIBRARY})
          check_cxx_source_runs("
@@@@ -126,7 +149,8 @@@@ if (MINIUPNP_FOUND)
             static struct IGDdatas data;
             int main()
d14 2
a15 2
-                char externalIP[16]     = "";
+	        char externalIP[16];
d17 1
a17 1
 	        UPNP_GetExternalIPAddress(urls.controlURL, data.servicetype, externalIP);
a19 15
@@@@ -141,8 +165,12 @@@@ if (MINIUPNP_FOUND)
     IF(MINIUPNPC_VERSION_PRE1_6)
 	message(STATUS "Found miniupnpc version is pre v1.6")
     ENDIF()
-    IF(NOT MINIUPNPC_VERSION_PRE1_5 AND NOT MINIUPNPC_VERSION_PRE1_6)
-	message(STATUS "Found miniupnpc version is v1.6 or higher")
+    IF(MINIUPNPC_VERSION_PRE1_7)
+	message(STATUS "Found miniupnpc version is pre v1.7")
+    ENDIF()
+
+    IF(NOT MINIUPNPC_VERSION_PRE1_5 AND NOT MINIUPNPC_VERSION_PRE1_6 AND NOT MINIUPNPC_VERSION_PRE1_7)
+	message(STATUS "Found miniupnpc version is v1.7 or higher")
     ENDIF()
 
 else ()
@


1.1
log
@Fix build breakage with miniupnpc>1.7
(from upstream SVN revision 3958)

spotted by, and ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d7 1
a7 1
+++ mk/cmake/Modules/FindMiniupnpc.cmake	Tue May 21 11:06:22 2013
d67 1
a67 1
@@@@ -96,25 +116,27 @@@@ if (MINIUPNP_FOUND)
d96 2
a97 1
+                char externalIP[16]     = "";
d113 11
a123 1
@@@@ -141,8 +163,12 @@@@ if (MINIUPNP_FOUND)
@

