head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.16
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.8
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.10
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.6
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	ports:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.11.03.00.00.32;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.11.03.00.00.32;	author espie;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- src/archutils/Unix/Backtrace.h.orig	Sat Sep 14 17:20:36 2013
+++ src/archutils/Unix/Backtrace.h	Sat Sep 14 17:21:06 2013
@@@@ -40,10 +40,12 @@@@ void GetBacktrace( const void **buf, size_t size, cons
  * not be the current thread.  True is returned on success, false on failure. */
 bool GetThreadBacktraceContext( uint64_t ThreadID, BacktraceContext *ctx );
 
+#if !defined(__OpenBSD__)
 /* Set up a BacktraceContext to get a backtrace after receiving a signal, given
  * a ucontext_t (see sigaction(2)).  (This interface is UNIX-specific.) */
 #include <ucontext.h>
 void GetSignalBacktraceContext( BacktraceContext *ctx, const ucontext_t *uc );
+#endif
 
 #define BACKTRACE_METHOD_NOT_AVAILABLE ((void*) -1)
 
@


1.1.1.1
log
@Dance Dance Revolution clone
@
text
@@
