head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.09.29.18.23.15;	author kirby;	state Exp;
branches;
next	1.1;
commitid	XgzPY68RwZ98PQ3m;

1.1
date	2013.05.16.10.10.35;	author kirby;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to ufoai-2.5
@
text
@$OpenBSD: patch-src_tools_radiant_radiant_render_OpenGLRenderSystem_cpp,v 1.1 2013/05/16 10:10:35 kirby Exp $

Commited upstream ee51106ced2f17bcdd5cf6c706627f41f3f6c175

--- src/tools/radiant/radiant/render/OpenGLRenderSystem.cpp.orig	Thu Jun  5 08:18:39 2014
+++ src/tools/radiant/radiant/render/OpenGLRenderSystem.cpp	Thu Jul  3 18:24:45 2014
@@@@ -33,7 +33,7 @@@@
 
 # include <wtypes.h>
 
-#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__)
+#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__) || defined (__OpenBSD__)
 
 # include <GL/glx.h>
 # include <dlfcn.h>
@@@@ -53,7 +53,7 @@@@ static void QGL_Shutdown (OpenGLBinding& table)
 {
 	g_message("Shutting down OpenGL module...");
 
-#if defined __linux__ || defined __FreeBSD__ || defined __APPLE__
+#if defined __linux__ || defined __FreeBSD__ || defined __APPLE__ || defined __OpenBSD__
 	qglXGetProcAddressARB = 0;
 #elif !defined _WIN32
 #error "unsupported platform"
@@@@ -110,7 +110,7 @@@@ template<typename Func>
 bool QGL_constructExtensionFunc (Func& func, const char* symbol)
 {
 	func = reinterpret_cast<Func>(
-#if defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__)
+#if defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__) || defined(__OpenBSD__)
 		qglXGetProcAddressARB ? qglXGetProcAddressARB(reinterpret_cast<GLubyte const*>(symbol)) : 0
 #elif defined(_WIN32)
 		wglGetProcAddress(symbol)
@@@@ -123,7 +123,7 @@@@ bool QGL_constructExtensionFunc (Func& func, const cha
 
 static int QGL_Init (OpenGLBinding& table)
 {
-#if defined __linux__ || defined __FreeBSD__ || defined __APPLE__
+#if defined __linux__ || defined __FreeBSD__ || defined __APPLE__ || defined __OpenBSD__
 	qglXGetProcAddressARB = reinterpret_cast<glXGetProcAddressARBProc*>(reinterpret_cast<uintptr_t>(dlsym(RTLD_DEFAULT, "glXGetProcAddressARB")));
 	if (!glXQueryExtension(GDK_DISPLAY(), 0, 0))
 		return 0;
@


1.1
log
@Update to ufoai 2.4
From now all textures have permissive licenses, so we can ship packages.

Here are just a few of the changes in 2.4:
 - A dozen new maps to battle aliens
 - Rescue soldiers in dropships shot down by aliens and retreat from battles
 - New particle and sound effects for weapons
 - Support for smoke and incendiary effects
 - New skirmish options to save squads and respawn aliens
 - Battlescape render speed dramatically improved

Full changelog: http://ufoai.org/wiki/Changelog/2.4

With input from sthen@@ and bentley@@. Thanks guys!
Tested by me and bentley@@
OK bentley@@
@
text
@d1 8
a8 4
$OpenBSD$
--- src/tools/radiant/radiant/render/OpenGLRenderSystem.cpp.orig	Mon Feb  4 18:54:21 2013
+++ src/tools/radiant/radiant/render/OpenGLRenderSystem.cpp	Mon Feb  4 18:55:31 2013
@@@@ -34,7 +34,7 @@@@
a9 1
 PROC ( WINAPI * qwglGetProcAddress)(LPCSTR);
d12 1
a12 1
+#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__) || defined(__OpenBSD__)
d16 3
a18 1
@@@@ -55,7 +55,7 @@@@ void QGL_Shutdown (OpenGLBinding& table)
d20 2
a21 5
 #ifdef _WIN32
 	qwglGetProcAddress = 0;
-#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__)
+#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__) || defined(__OpenBSD__)
 	qglXQueryExtension = 0;
d23 4
a26 4
 #else
@@@@ -133,7 +133,7 @@@@ typedef int (QGL_DLLEXPORT *QGLFunctionPointer) ();
 
 QGLFunctionPointer QGL_getExtensionFunc (const char* symbol)
d28 1
d31 4
a34 4
 	if (qglXGetProcAddressARB == 0) {
 		return reinterpret_cast<QGLFunctionPointer> (glInvalidFunction);
 	} else {
@@@@ -170,7 +170,7 @@@@ int QGL_Init (OpenGLBinding& table)
d36 7
a42 7
 #ifdef _WIN32
 	qwglGetProcAddress = wglGetProcAddress;
-#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__)
+#elif defined(__linux__) || defined (__FreeBSD__) || defined(__APPLE__) || defined(__OpenBSD__)
 	qglXQueryExtension = glXQueryExtension;
 	qglXGetProcAddressARB = (glXGetProcAddressARBProc) dlsym(RTLD_DEFAULT, "glXGetProcAddressARB");
 	if ((qglXQueryExtension == 0) || (qglXQueryExtension(GDK_DISPLAY(), 0, 0) != True))
@

