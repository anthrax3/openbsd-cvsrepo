head	1.4;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2017.05.27.08.18.46;	author espie;	state Exp;
branches;
next	1.3;
commitid	Y02R7XkJg5y7moRD;

1.3
date	2014.03.09.22.35.51;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2013.01.30.01.40.49;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.21.16.37.41;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.4
log
@WANT_CXX, patches inspired by freebsd.

horrible hack to prevent build failure if incompatible ports' glm is
installed...
@
text
@$OpenBSD$

Index: lib/exceptionhandler/exceptionhandler.cpp
--- lib/exceptionhandler/exceptionhandler.cpp.orig
+++ lib/exceptionhandler/exceptionhandler.cpp
@@@@ -117,6 +117,7 @@@@ static LONG WINAPI windowsExceptionHandler(PEXCEPTION_
 # include <stdint.h>
 # include <signal.h>
 # include <string.h>
+# include <errno.h>
 
 // POSIX headers:
 # include <unistd.h>
@


1.3
log
@Update to Warzone 2100 3.1.1.

ok pascal@@
@
text
@d1 13
a13 13
$OpenBSD: patch-lib_exceptionhandler_exceptionhandler_cpp,v 1.2 2013/01/30 01:40:49 brad Exp $
--- lib/exceptionhandler/exceptionhandler.cpp.orig	Mon Jan 14 18:54:07 2013
+++ lib/exceptionhandler/exceptionhandler.cpp	Tue Jan 22 22:10:44 2013
@@@@ -121,7 +121,9 @@@@ static LONG WINAPI windowsExceptionHandler(PEXCEPTION_
 # include <sys/types.h>
 # include <sys/stat.h>
 # include <sys/wait.h>
+#ifdef HAVE_SYS_UCONTEXT_H
 # include <sys/ucontext.h>
+#endif
 # include <sys/utsname.h>
 #ifdef WZ_OS_LINUX
 # include <sys/prctl.h>
@


1.2
log
@- Uncomment bits of code using dprintf() now that OpenBSD has dprintf()
  within libc
- Slightly better way of dealing with the lack of a sys/ucontext.h header

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_exceptionhandler_exceptionhandler_cpp,v 1.1 2013/01/21 16:37:41 pascal Exp $
@


1.1
log
@Update to Warzone2100 3.1.0.

ok brad@@
@
text
@d1 4
a4 4
$OpenBSD$
--- lib/exceptionhandler/exceptionhandler.cpp.orig	Mon Jan 21 00:19:31 2013
+++ lib/exceptionhandler/exceptionhandler.cpp	Mon Jan 21 00:24:14 2013
@@@@ -121,7 +121,6 @@@@ static LONG WINAPI windowsExceptionHandler(PEXCEPTION_
d8 3
a10 1
-# include <sys/ucontext.h>
a13 18
@@@@ -539,14 +538,14 @@@@ static bool gdbExtendedBacktrace(int const dumpFile)
 	// Disassemble the faulting instruction (if we know it)
 	if (instruction)
 	{
-		dprintf(gdbPipe, "x/i %p\n", (void*)instruction);
+		//dprintf(gdbPipe, "x/i %p\n", (void*)instruction);
 	}
 
 	// We have an intelligent guess for the *correct* frame, disassemble *that* one.
 	if (frame)
 	{
-		dprintf(gdbPipe, "frame %p\n"
-		                 "disassemble /m\n", frame);
+		//dprintf(gdbPipe, "frame %p\n"
+		//                 "disassemble /m\n", frame);
 	}
 
 	write(gdbPipe, gdbCommands, strlen(gdbCommands));
@

