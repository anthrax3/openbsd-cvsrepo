head	1.4;
access;
symbols
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_TRACKING_SWITCH:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.20.06.43;	author sturm;	state dead;
branches;
next	1.3;

1.3
date	99.10.27.04.37.29;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	99.02.25.21.01.47;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	99.01.14.01.54.32;	author angelos;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- regen patchfiles
- remove hashfile support
  + useless due to missing permissions anyways
  + creates the hashfile during build outside the fake area, if building
    as root
@
text
@--- gnuan.c.orig	Sun Sep 27 23:41:21 1998
+++ gnuan.c	Sun Feb  7 19:23:01 1999
@@@@ -1348,12 +1348,12 @@@@
     fpout = stderr;
     fprintf (fpout, "Input the file with the algebraic moves of the game.\n");
     fflush (fpout);
-    gets (infilename);
+    fgets (infilename, 255, stdin);
     fprintf (fpout, "\n");
     do
       {
 	  fprintf (fpout, "Input the search depth you want to use.  (1 to 29)(- for depth from file)\n");
-	  gets (inbuf);
+	  fgets (inbuf, 256, stdin);
 	  search_depth = atoi (inbuf);
 	  if (search_depth < 0)
 	    {
@@@@ -1369,7 +1369,7 @@@@
     do
       {
 	  fprintf (fpout, "Input the maximum number of minutes per move you want to use.\n");
-	  gets (inbuf);
+	  fgets (inbuf, 256, stdin);
 	  max_minutes = atoi (inbuf);
 	  if (max_minutes < 0)
 	    {
@@@@ -1379,7 +1379,7 @@@@
       }
     while ((max_minutes + max_seconds) < 1);
     fprintf (fpout, "Post the search results(y/n).\n");
-    gets (inbuf);
+    fgets (inbuf, 256, stdin);
     if (inbuf[0] == 'y')
 	flag.post = true;
     else
@@@@ -1559,7 +1559,7 @@@@
 	      while (true)
 		{
 		    printf (">");
-		    gets (GNUANinbuf1);
+		    fgets (GNUANinbuf1, 128, stdin);
 		    p = GNUANinbuf1;
 		    q = GNUANinbuf;
 		    while (true)
@


1.3
log
@Update to version 4.0pl80. package ok.
@
text
@@


1.2
log
@patch update from op21@@squish.org (thanks)
["Classic" Gnu Chess]
@
text
@a44 9
@@@@ -1724,7 +1724,7 @@@@
     move_percent[black] = ((float) same_moves[black]) * 200 / (float) (GNUANmovecnt + (GNUANmovecnt % 2 ? 1 : 0));
     fprintf (fpout, "\n           White's percentage was %5.2f%%.     Black's percentage was %5.2f%%.\n", move_percent[white], move_percent[black]);
     time (&end_time);
-    elapsed_time = difftime(end_time - start_time);
+    elapsed_time = difftime(end_time, start_time);
     fprintf (fpout, "\n           Elapsed time was %ld seconds.\n", elapsed_time);
     fclose (fpin);
     fclose (fpout);
@


1.1
log
@Update to 4.0.pl79
@
text
@d1 53
a53 97
*** src/gnuan.c.orig	Mon Sep 28 02:41:21 1998
--- src/gnuan.c	Wed Jan 13 20:50:50 1999
***************
*** 1348,1359 ****
      fpout = stderr;
      fprintf (fpout, "Input the file with the algebraic moves of the game.\n");
      fflush (fpout);
!     gets (infilename);
      fprintf (fpout, "\n");
      do
        {
  	  fprintf (fpout, "Input the search depth you want to use.  (1 to 29)(- for depth from file)\n");
! 	  gets (inbuf);
  	  search_depth = atoi (inbuf);
  	  if (search_depth < 0)
  	    {
--- 1348,1359 ----
      fpout = stderr;
      fprintf (fpout, "Input the file with the algebraic moves of the game.\n");
      fflush (fpout);
!     fgets (infilename, 255, stdin);
      fprintf (fpout, "\n");
      do
        {
  	  fprintf (fpout, "Input the search depth you want to use.  (1 to 29)(- for depth from file)\n");
! 	  fgets (inbuf, 256, stdin);
  	  search_depth = atoi (inbuf);
  	  if (search_depth < 0)
  	    {
***************
*** 1369,1375 ****
      do
        {
  	  fprintf (fpout, "Input the maximum number of minutes per move you want to use.\n");
! 	  gets (inbuf);
  	  max_minutes = atoi (inbuf);
  	  if (max_minutes < 0)
  	    {
--- 1369,1375 ----
      do
        {
  	  fprintf (fpout, "Input the maximum number of minutes per move you want to use.\n");
! 	  fgets (inbuf, 256, stdin);
  	  max_minutes = atoi (inbuf);
  	  if (max_minutes < 0)
  	    {
***************
*** 1379,1385 ****
        }
      while ((max_minutes + max_seconds) < 1);
      fprintf (fpout, "Post the search results(y/n).\n");
!     gets (inbuf);
      if (inbuf[0] == 'y')
  	flag.post = true;
      else
--- 1379,1385 ----
        }
      while ((max_minutes + max_seconds) < 1);
      fprintf (fpout, "Post the search results(y/n).\n");
!     fgets (inbuf, 256, stdin);
      if (inbuf[0] == 'y')
  	flag.post = true;
      else
***************
*** 1559,1565 ****
  	      while (true)
  		{
  		    printf (">");
! 		    gets (GNUANinbuf1);
  		    p = GNUANinbuf1;
  		    q = GNUANinbuf;
  		    while (true)
--- 1559,1565 ----
  	      while (true)
  		{
  		    printf (">");
! 		    fgets (GNUANinbuf1, 128, stdin);
  		    p = GNUANinbuf1;
  		    q = GNUANinbuf;
  		    while (true)
***************
*** 1724,1730 ****
      move_percent[black] = ((float) same_moves[black]) * 200 / (float) (GNUANmovecnt + (GNUANmovecnt % 2 ? 1 : 0));
      fprintf (fpout, "\n           White's percentage was %5.2f%%.     Black's percentage was %5.2f%%.\n", move_percent[white], move_percent[black]);
      time (&end_time);
!     elapsed_time = difftime(end_time - start_time);
      fprintf (fpout, "\n           Elapsed time was %ld seconds.\n", elapsed_time);
      fclose (fpin);
      fclose (fpout);
--- 1724,1730 ----
      move_percent[black] = ((float) same_moves[black]) * 200 / (float) (GNUANmovecnt + (GNUANmovecnt % 2 ? 1 : 0));
      fprintf (fpout, "\n           White's percentage was %5.2f%%.     Black's percentage was %5.2f%%.\n", move_percent[white], move_percent[black]);
      time (&end_time);
!     elapsed_time = difftime(end_time, start_time);
      fprintf (fpout, "\n           Elapsed time was %ld seconds.\n", elapsed_time);
      fclose (fpin);
      fclose (fpout);
@

