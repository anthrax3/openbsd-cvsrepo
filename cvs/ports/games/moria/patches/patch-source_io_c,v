head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.12
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.1.1.0.50
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.48
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.46
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.44
	OPENBSD_5_0:1.1.1.1.0.42
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.40
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.38
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.36
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.34
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.32
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.30
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.28
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.26
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.24
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.22
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.20
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.18
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.16
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.14
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.12
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.10
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	lebel_2001-Jul-04:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.12.12.21.32.48;	author jca;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.04.16.57.50;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.04.16.57.50;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Use termios.h and tcgetattr/tcsetattr instead of ioctl's if USE_TERMIOS
is defined.  Compat code still available through #defines.  ok naddy@@
@
text
@$OpenBSD: patch-source_io_c,v 1.1.1.1 2001/07/04 16:57:50 lebel Exp $
--- source/io.c.orig	Fri Jul 22 03:47:26 1994
+++ source/io.c	Thu Dec 12 14:55:49 2013
@@@@ -60,6 +60,10 @@@@ long wgetch();
 char *getenv();
 #endif
 
+#ifdef __OpenBSD__
+#define USG
+#define USE_TERMIOS
+#endif
 
 #include <ctype.h>
 
@@@@ -109,6 +113,14 @@@@ typedef struct { int stuff; } fpvmach;
 /* Needs termio.h because curses.h doesn't include it */
 #include <termio.h>
 #endif
+#ifdef USE_TERMIOS
+# include <termios.h>
+#else
+# define termios termio
+# define tcgetattr(a, b) ioctl((a), TCGETA, (char *)(b))
+# define tcsetattr(a, b, c) ioctl((a), (b), (char *)(c))
+# define TCSANOW TCSETA
+#endif
 #else /* ! USG */
 #include <strings.h>
 #if defined(atarist) && defined(__GNUC__)
@@@@ -201,12 +213,8 @@@@ void sleep();
 #if !defined(MAC) && !defined(MSDOS) && !defined(ATARI_ST) && !defined(VMS)
 #ifndef AMIGA
 #ifdef USG
-#ifdef __linux__
 static struct termios save_termio;
 #else
-static struct termio save_termio;
-#endif
-#else
 static struct ltchars save_special_chars;
 static struct sgttyb save_ttyb;
 static struct tchars save_tchars;
@@@@ -237,32 +245,45 @@@@ static WINDOW *tempscr;		/* Spare window for VMS CTRL(
    restored.  */
 int suspend()
 {
-#ifdef USG
+#if defined(USG) && !defined(__OpenBSD__)
   /* for USG systems with BSDisms that have SIGTSTP defined, but don't
      actually implement it */
 #else
+#ifdef USE_TERMIOS
+  struct termios tbuf;
+#else
   struct sgttyb tbuf;
   struct ltchars lcbuf;
   struct tchars cbuf;
   int lbuf;
-  long time();
+#endif
 
   py.misc.male |= 2;
+#ifdef USE_TERMIOS
+  (void) tcgetattr(0, &tbuf);
+#else
   (void) ioctl(0, TIOCGETP, (char *)&tbuf);
   (void) ioctl(0, TIOCGETC, (char *)&cbuf);
   (void) ioctl(0, TIOCGLTC, (char *)&lcbuf);
 #if !defined(atarist) && !defined(__GNUC__)
   (void) ioctl(0, TIOCLGET, (char *)&lbuf);
 #endif
+#endif
+
   restore_term();
   (void) kill(0, SIGSTOP);
   curses_on = TRUE;
+
+#ifdef USE_TERMIOS
+  (void) tcsetattr(0, TCSANOW, &tbuf);
+#else
   (void) ioctl(0, TIOCSETP, (char *)&tbuf);
   (void) ioctl(0, TIOCSETC, (char *)&cbuf);
   (void) ioctl(0, TIOCSLTC, (char *)&lcbuf);
 #if !defined(atarist) && !defined(__GNUC__)
   (void) ioctl(0, TIOCLSET, (char *)&lbuf);
 #endif
+#endif
   (void) wrefresh(curscr);
   py.misc.male &= ~2;
 #endif
@@@@ -307,7 +328,7 @@@@ void init_curses()
 #else
 #if !defined(VMS) && !defined(MSDOS) && !defined(ATARI_ST)
 #ifndef AMIGA
-  (void) ioctl(0, TCGETA, (char *)&save_termio);
+  (void) tcgetattr(0, &save_termio);
 #endif
 #endif
 #endif
@@@@ -334,7 +355,7 @@@@ void init_curses()
 #ifdef  __386BSD__
   (void) signal (SIGTSTP, (sig_t)suspend);
 #else
-  (void) signal (SIGTSTP, suspend);
+  (void) signal (SIGTSTP, (sig_t)suspend);
 #endif
 #endif
 #endif
@@@@ -385,12 +406,8 @@@@ void moriaterm()
 #if !defined(MSDOS) && !defined(ATARI_ST) && !defined(VMS)
 #ifndef AMIGA
 #ifdef USG
-#ifdef __linux__
   struct termios tbuf;
 #else
-  struct termio tbuf;
-#endif
-#else
   struct ltchars lbuf;
   struct tchars buf;
 #endif
@@@@ -420,7 +437,7 @@@@ void moriaterm()
 #else
 #if !defined(ATARI_ST) && !defined(VMS)
 #ifdef USG
-  (void) ioctl(0, TCGETA, (char *)&tbuf);
+  (void) tcgetattr(0, &tbuf);
   /* disable all of the normal special control characters */
   tbuf.c_cc[VINTR] = (char)3; /* control-C */
   tbuf.c_cc[VQUIT] = (char)-1;
@@@@ -438,7 +455,7 @@@@ void moriaterm()
   tbuf.c_cc[VMIN] = 1;  /* Input should wait for at least 1 char */
   tbuf.c_cc[VTIME] = 0; /* no matter how long that takes. */
 
-  (void) ioctl(0, TCSETA, (char *)&tbuf);
+  (void) tcgetattr(0, &tbuf);
 #else
   /* disable all of the special characters except the suspend char, interrupt
      char, and the control flow start/stop characters */
@@@@ -552,7 +569,7 @@@@ void restore_term()
 #ifdef USG
 #if !defined(MSDOS) && !defined(ATARI_ST) && !defined(VMS)
 #ifndef AMIGA
-  (void) ioctl(0, TCSETA, (char *)&save_termio);
+  (void) tcsetattr(0, TCSANOW, &save_termio);
 #endif
 #endif
 #else
@@@@ -646,12 +663,8 @@@@ void shell_out()
 {
 #ifdef USG
 #if !defined(MSDOS) && !defined(ATARI_ST) && !defined(AMIGA)
-#ifdef __linux__
   struct termios tbuf;
-#else
-  struct termio tbuf;
 #endif
-#endif
 #else
   struct sgttyb tbuf;
   struct ltchars lcbuf;
@@@@ -683,7 +696,7 @@@@ void shell_out()
 
 #ifdef USG
 #if !defined(MSDOS) && !defined(ATARI_ST) && !defined(AMIGA)
-  (void) ioctl(0, TCGETA, (char *)&tbuf);
+  (void) tcgetattr(0, &tbuf);
 #endif
 #else
   (void) ioctl(0, TIOCGETP, (char *)&tbuf);
@@@@ -725,7 +738,7 @@@@ void shell_out()
       default_signals();
 #ifdef USG
 #if !defined(MSDOS) && !defined(ATARI_ST) && !defined(AMIGA)
-      (void) ioctl(0, TCSETA, (char *)&save_termio);
+      (void) tcsetattr(0, TCSANOW, &save_termio);
 #endif
 #else
       (void) ioctl(0, TIOCSLTC, (char *)&save_special_chars);
@@@@ -785,7 +798,7 @@@@ void shell_out()
   /* have to disable ^Y for tunneling */
 #ifdef USG
 #if !defined(MSDOS) && !defined(ATARI_ST)
-  (void) ioctl(0, TCSETA, (char *)&tbuf);
+  (void) tcsetattr(0, TCSANOW, &tbuf);
 #endif
 #else
   (void) ioctl(0, TIOCSLTC, (char *)&lcbuf);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- source/io.c.orig	Wed Jul  4 12:25:44 2001
+++ source/io.c	Wed Jul  4 12:25:53 2001
@@@@ -60,7 +60,8 @@@@ long wgetch();
d8 5
a12 3
-
+#include <sys/ioctl_compat.h>
+#include <curses.h>
d15 41
a55 2
 #if defined(SYS_V) && defined(lint)
@@@@ -245,7 +246,6 @@@@ int suspend()
d60 1
d63 3
d67 34
a100 10
@@@@ -316,7 +316,7 @@@@ void init_curses()
 #if defined(USG) && !defined(PC_CURSES) && !defined(AMIGA)
   if (initscr() == NULL)
 #else
-  if (initscr() == ERR)
+  if (initscr() == NULL)
 #endif
     {
       (void) printf("Error allocating screen in curses package.\n");
@@@@ -334,7 +334,7 @@@@ void init_curses()
d109 14
a122 3
@@@@ -760,7 +760,7 @@@@ void shell_out()
 #if defined(USG) || defined(__386BSD__)
   (void) wait((int *) 0);
d124 23
a146 2
-  (void) wait((union wait *) 0);
+  (void) wait((int *) 0);
d148 41
a188 2
 #endif /* ATARI_ST */
 #endif		 /* MSDOS }*/
@


1.1.1.1
log
@initial import of moria-5.5.2:
--
The game is set in Moria and the goal is to kill off the balrog.
Apart from this, the game is almost completely based on Dungeons &
Dragons. The game is a true classic and every true gamer should
have played it.

It was originally written by Robert Alan Koeneke with some help
from Jimmy Wayne Todd. Further development of the game has almost
ceased, but The Pits of Angband, which is based on its code, is
still very much in development.

WWW: http://www-math.bgsu.edu/~grabine/moria.html

@
text
@@
