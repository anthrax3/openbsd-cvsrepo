head	1.2;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.12
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	pascal_20140418:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.06.01.11.29.12;	author espie;	state Exp;
branches;
next	1.1;
commitid	G3GGQy2iKqfbnsh0;

1.1
date	2014.04.18.15.14.09;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.04.18.15.14.09;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix with clang
@
text
@$OpenBSD: patch-src_cmd_unit_generic_cpp,v 1.1.1.1 2014/04/18 15:14:09 pascal Exp $
Index: src/cmd/unit_generic.cpp
--- src/cmd/unit_generic.cpp.orig
+++ src/cmd/unit_generic.cpp
@@@@ -47,6 +47,7 @@@@
 
 #include "unit_find.h"
 #include "pilot.h"
+#include <cmath>
 
 #include "vsfilesystem.h"
 #include <iostream>
@@@@ -630,14 +631,6 @@@@ void Unit::DeactivateJumpDrive()
         jump.drive = -1;
 }
 
-float copysign( float x, float y )
-{
-    if (y > 0)
-        return x;
-    else
-        return -x;
-}
-
 float rand01()
 {
     return (float) rand()/(float) RAND_MAX;
@@@@ -3303,7 +3296,7 @@@@ Vector Unit::ClampTorque( const Vector &amt1 )
     //HACK this forces the reaction to be Li-6+D fusion with efficiency governed by the getFuelUsage function
     fuel -= GetFuelUsage( false )*SIMULATION_ATOM*Res.Magnitude()*FMEC_exit_vel_inverse/Lithium6constant;
 #ifndef __APPLE__
-    if ( ISNAN( fuel ) ) {
+    if ( std::isnan( fuel ) ) {
         fprintf( stderr, "FUEL is NAN\n" );
         fuel = 0;
     }
@@@@ -3468,7 +3461,7 @@@@ Vector Unit::ClampThrust( const Vector &amt1, bool aft
                && finegrainedFuelEfficiency) ? afterburnenergy : GetFuelUsage( afterburn ) )*SIMULATION_ATOM*Res.Magnitude()
             *FMEC_exit_vel_inverse/Lithium6constant;
 #ifndef __APPLE__
-        if ( ISNAN( fuel ) ) {
+        if ( std::isnan( fuel ) ) {
             fprintf( stderr, "Fuel is NAN A\n" );
             fuel = 0;
         }
@@@@ -3479,7 +3472,7 @@@@ Vector Unit::ClampThrust( const Vector &amt1, bool aft
         //HACK this forces the reaction to be Li-6+Li-6 fusion with efficiency governed by the getFuelUsage function
         fuel -= GetFuelUsage( false )*SIMULATION_ATOM*Res.Magnitude()*FMEC_exit_vel_inverse/Lithium6constant;
 #ifndef __APPLE__
-        if ( ISNAN( fuel ) ) {
+        if ( std::isnan( fuel ) ) {
             fprintf( stderr, "Fuel is NAN B\n" );
             fuel = 0;
         }
@


1.1
log
@Initial revision
@
text
@d1 4
a4 3
$OpenBSD$
--- src/cmd/unit_generic.cpp.orig.port	Mon Mar 19 09:20:14 2012
+++ src/cmd/unit_generic.cpp	Sat May 26 16:32:35 2012
d13 16
a28 1
@@@@ -3303,7 +3304,7 @@@@ Vector Unit::ClampTorque( const Vector &amt1 )
d37 1
a37 1
@@@@ -3468,7 +3469,7 @@@@ Vector Unit::ClampThrust( const Vector &amt1, bool aft
d46 1
a46 1
@@@@ -3479,7 +3480,7 @@@@ Vector Unit::ClampThrust( const Vector &amt1, bool aft
@


1.1.1.1
log
@Import games/vegastrike, ok bentley@@.

Vega Strike is an OpenSource 3d Space Simulator. Work is proceeding
on both the Vega Strike game engine and a Vega Strike Universe game
data set. Both engine and data are in a playable state, but still
under development. Each release serves as a beta for both engine
and data.

The Vega Strike engine serves as the foundation for the Privateer
Gemini Gold, Privateer Remake, Vega Trek, and Pi Armada projects.
@
text
@@
