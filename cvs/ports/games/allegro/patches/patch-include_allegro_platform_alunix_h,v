head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.28
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.04.26.02.56.30;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@- sndio supported as default audio output method
- build with -pthread in LDFLAGS instead of -lpthread in LIBS;
  allegro-config passes LDFLAGS on, so dependent ports build correctly
  (WANTLIB changes in dependent ports coming soon)
- don't build modules in liballegro: we don't ship an allegrorc to
  be able to choose which modules to use

"sndio bits look ok" ratchov@@
@
text
@$OpenBSD$
--- include/allegro/platform/alunix.h.orig	Fri Jun 15 18:52:28 2007
+++ include/allegro/platform/alunix.h	Wed Jan 13 02:49:06 2010
@@@@ -69,6 +69,8 @@@@ AL_VAR(TIMER_DRIVER, timerdrv_unix_sigalrm);
 #define DIGI_ALSA             AL_ID('A','L','S','A')
 #define MIDI_ALSA             AL_ID('A','M','I','D')
 #define DIGI_JACK             AL_ID('J','A','C','K')
+#define DIGI_SNDIO            AL_ID('S','I','O','D')
+#define MIDI_SNDIO            AL_ID('M','I','O','M')
 
 
 #ifdef ALLEGRO_WITH_OSSDIGI
@@@@ -84,6 +86,12 @@@@ AL_VAR(MIDI_DRIVER, midi_oss);
 #endif /* ALLEGRO_WITH_OSSMIDI */
 
 #ifndef ALLEGRO_WITH_MODULES
+
+#ifdef ALLEGRO_WITH_SNDIODIGI
+AL_VAR(DIGI_DRIVER, digi_sndio);
+#define DIGI_DRIVER_SNDIO                                         \
+      {  DIGI_SNDIO,       &digi_sndio,           TRUE  },
+#endif /* ALLEGRO_WITH_SNDIODIGI */
 
 #ifdef ALLEGRO_WITH_ESDDIGI
 AL_VAR(DIGI_DRIVER, digi_esd);
@
