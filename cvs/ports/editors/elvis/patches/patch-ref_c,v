head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.03.17.12.40.01;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@getline -> get_line and drop USE_GROFF, from Donovan Watteau
@
text
@$OpenBSD$
--- ref.c.orig	Tue Oct 21 04:32:25 2003
+++ ref.c	Sat Mar 17 12:28:41 2012
@@@@ -42,7 +42,7 @@@@ typedef enum
 
 #if USE_PROTOTYPES
 static void usage(char *argv0);
-static char *getline(FILE *fp);
+static char *get_line(FILE *fp);
 static void store(char *line, char **list);
 static LINECLS classify(char *line, LINECLS prev);
 static void lookup(TAG *tag);
@@@@ -171,7 +171,7 @@@@ ELVBOOL ioclose()
 /* This function reads a single line, and replaces the terminating newline with
  * a '\0' byte.  The string will be in a static buffer.  Returns NULL at EOF.
  */
-static char *getline(fp)
+static char *get_line(fp)
 	FILE	*fp;
 {
 	int	ch;
@@@@ -348,7 +348,7 @@@@ static void lookup(tag)
 	}
 
 	/* for each line... */
-	for (lnum = 1, lc = LC_COMPLETE; (line = getline(fp)) != NULL; lnum++)
+	for (lnum = 1, lc = LC_COMPLETE; (line = get_line(fp)) != NULL; lnum++)
 	{
 		/* is this the tag definition? */
 		if (taglnum > 0 ? taglnum == lnum : !strncmp(tagline, line, len))
@@@@ -377,7 +377,7 @@@@ static void lookup(tag)
 			{
 				if (strchr(line, '(') != NULL)
 				{
-					while ((line = getline(fp)) != NULL
+					while ((line = get_line(fp)) != NULL
 					    && *line
 					    && ((*line != '#' && *line != '{')
 						|| line[strlen(line) - 1] == '\\'))
@@@@ -387,7 +387,7 @@@@ static void lookup(tag)
 				}
 				else if ((lc = classify(line, lc)) == LC_PARTIAL)
 				{
-					while ((line = getline(fp)) != NULL
+					while ((line = get_line(fp)) != NULL
 					    && (lc = classify(line, lc)) == LC_PARTIAL)
 					{
 						puts(line);
@
