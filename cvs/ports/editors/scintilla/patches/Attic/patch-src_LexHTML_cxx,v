head	1.3;
access;
symbols
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.1.1.0.14
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.12
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.10
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.8
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	sturm_2003-Aug-14:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2007.08.01.09.21.07;	author steven;	state dead;
branches;
next	1.2;

1.2
date	2007.01.18.10.56.27;	author steven;	state Exp;
branches;
next	1.1;

1.1
date	2003.08.14.18.24.31;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.08.14.18.24.31;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 1.74
remove strc*/sprintf patches

from maintainer Jeremy Evans <openbsd@@jeremyevans.net>
@
text
@$OpenBSD: patch-src_LexHTML_cxx,v 1.2 2007/01/18 10:56:27 steven Exp $
--- src/LexHTML.cxx.orig	Thu Jan 18 08:42:00 2007
+++ src/LexHTML.cxx	Thu Jan 18 08:42:00 2007
@@@@ -308,7 +308,7 @@@@ static int classifyWordHTVB(unsigned int
 		return SCE_HB_DEFAULT;
 }
 
-static void classifyWordHTPy(unsigned int start, unsigned int end, WordList &keywords, Accessor &styler, char *prevWord, script_mode inScriptType) {
+static void classifyWordHTPy(unsigned int start, unsigned int end, WordList &keywords, Accessor &styler, char *prevWord, size_t prevWord_len, script_mode inScriptType) {
 	bool wordIsNumber = IsADigit(styler[start]);
 	char s[30 + 1];
 	unsigned int i = 0;
@@@@ -326,7 +326,7 @@@@ static void classifyWordHTPy(unsigned in
 	else if (keywords.InList(s))
 		chAttr = SCE_HP_WORD;
 	styler.ColourTo(end, statePrintForState(chAttr, inScriptType));
-	strcpy(prevWord, s);
+	strlcpy(prevWord, s, prevWord_len);
 }
 
 // Update the word colour to default or keyword
@@@@ -799,7 +799,7 @@@@ static void ColouriseHyperTextDoc(unsign
 				classifyWordHTVB(styler.GetStartSegment(), i - 1, keywords3, styler, inScriptType);
 				break;
 			case SCE_HP_WORD:
-				classifyWordHTPy(styler.GetStartSegment(), i - 1, keywords4, styler, prevWord, inScriptType);
+				classifyWordHTPy(styler.GetStartSegment(), i - 1, keywords4, styler, prevWord, sizeof(prevWord), inScriptType);
 				break;
 			case SCE_HPHP_WORD:
 				classifyWordHTPHP(styler.GetStartSegment(), i - 1, keywords5, styler);
@@@@ -1455,7 +1455,7 @@@@ static void ColouriseHyperTextDoc(unsign
 			break;
 		case SCE_HP_WORD:
 			if (!iswordchar(ch)) {
-				classifyWordHTPy(styler.GetStartSegment(), i - 1, keywords4, styler, prevWord, inScriptType);
+				classifyWordHTPy(styler.GetStartSegment(), i - 1, keywords4, styler, prevWord, sizeof(prevWord), inScriptType);
 				state = SCE_HP_DEFAULT;
 				if (ch == '#') {
 					state = SCE_HP_COMMENTLINE;
@@@@ -1540,7 +1540,7 @@@@ static void ColouriseHyperTextDoc(unsign
 					state = SCE_HPHP_COMMENTLINE;
 				} else if (ch == '\"') {
 					state = SCE_HPHP_HSTRING;
-					strcpy(phpStringDelimiter, "\"");
+					strlcpy(phpStringDelimiter, "\"", sizeof(phpStringDelimiter));
 				} else if (styler.Match(i, "<<<")) {
 					state = SCE_HPHP_HSTRING;
 					i = FindPhpStringDelimiter(phpStringDelimiter, sizeof(phpStringDelimiter), i + 3, lengthDoc, styler);
@@@@ -1645,7 +1645,7 @@@@ static void ColouriseHyperTextDoc(unsign
 				state = SCE_HPHP_COMMENTLINE;
 			} else if (ch == '\"') {
 				state = SCE_HPHP_HSTRING;
-				strcpy(phpStringDelimiter, "\"");
+				strlcpy(phpStringDelimiter, "\"", sizeof(phpStringDelimiter));
 			} else if (styler.Match(i, "<<<")) {
 				state = SCE_HPHP_HSTRING;
 				i = FindPhpStringDelimiter(phpStringDelimiter, sizeof(phpStringDelimiter), i + 3, lengthDoc, styler);
@


1.2
log
@upgrade to 1.72

based on diffs from new maintainer Jeremy Evans <jeremyevans0 at gmail.com>
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
--- src/LexHTML.cxx.orig	2003-08-14 01:19:02.000000000 +1000
+++ src/LexHTML.cxx	2003-08-14 01:21:26.000000000 +1000
@@@@ -287,7 +287,7 @@@@ static int classifyWordHTVB(unsigned int
d13 1
a13 1
@@@@ -305,7 +305,7 @@@@ static void classifyWordHTPy(unsigned in
d22 1
a22 1
@@@@ -724,7 +724,7 @@@@ static void ColouriseHyperTextDoc(unsign
d31 1
a31 1
@@@@ -1369,7 +1369,7 @@@@ static void ColouriseHyperTextDoc(unsign
d40 18
@


1.1.1.1
log
@Initial import of scintilla 1.54

Scintilla is a free source code editing component. As well as features
found in standard text editing components, Scintilla includes features
especially useful when editing and debugging source code. These include
support for syntax styling, error indicators, code completion and call
tips. The selection margin can contain markers like those used in debuggers
to indicate breakpoints and the current line. Styling choices are more open
than with many editors, allowing the use of proportional fonts, bold and
italics, multiple foreground and background colours and multiple fonts.

WWW: http://www.scintilla.org/

from Joerg Sonnenberger <joerg@@bec.de> with patches from Andrew Dalgleisch
@
text
@@
