head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.56
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.54
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.52
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.48
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.50
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.46
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.44
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.42
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.40
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.38
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.14
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.12
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.10
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_TRACKING_SWITCH:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.4
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	brad_1999-04-19:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2003.12.15.21.42.09;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.03.13.24.06;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	99.09.06.17.23.19;	author brad;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.04.20.03.08.59;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.20.03.08.59;	author brad;	state Exp;
branches;
next	;

1.2.4.1
date	2000.09.15.04.40.39;	author marc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove WWW lines
@
text
@LZO is a data compression library which is suitable for data
de-/compression in real-time. This means it favours speed over
compression ratio.

LZO implements a number of algorithms with the following features:
   + Decompression is simple and *very* fast.
   + Requires no memory for decompression.
   + Compression is pretty fast.
   + Requires 64 kB of memory for compression.
   + Allows you to dial up extra compression at a speed cost in the
     compressor. The speed of the decompressor is not reduced.
   + Includes compression levels for generating pre-compressed data
     which achieve a quite competitive compression ratio.
   + There is also a compression level which needs only 8 kB for
     compression.
   + Algorithm is thread safe.
   + Algorithm is lossless.
@


1.3
log
@- add HOMEPAGE
- use better filename for patch
- enable inter-library dependencies
@
text
@a17 2

WWW: ${HOMEPAGE}
@


1.2
log
@- chmod -> ${CHMOD}
- trim unnecessary comments from DESCR
@
text
@d1 3
a3 3
     LZO is a data compression library which is suitable for data
     de-/compression in real-time. This means it favours speed over
     compression ratio.
d5 15
a19 13
     LZO implements a number of algorithms with the following features:
        + Decompression is simple and *very* fast.
        + Requires no memory for decompression.
        + Compression is pretty fast.
        + Requires 64 kB of memory for compression.
        + Allows you to dial up extra compression at a speed cost in the
          compressor. The speed of the decompressor is not reduced.
        + Includes compression levels for generating pre-compressed data
          which achieve a quite competitive compression ratio.
        + There is also a compression level which needs only 8 kB for
          compression.
        + Algorithm is thread safe.
        + Algorithm is lossless.
@


1.2.4.1
log
@bring cut-off archivers into 2.7 branch
@
text
@d1 3
a3 3
LZO is a data compression library which is suitable for data
de-/compression in real-time. This means it favours speed over
compression ratio.
d5 13
a17 15
LZO implements a number of algorithms with the following features:
   + Decompression is simple and *very* fast.
   + Requires no memory for decompression.
   + Compression is pretty fast.
   + Requires 64 kB of memory for compression.
   + Allows you to dial up extra compression at a speed cost in the
     compressor. The speed of the decompressor is not reduced.
   + Includes compression levels for generating pre-compressed data
     which achieve a quite competitive compression ratio.
   + There is also a compression level which needs only 8 kB for
     compression.
   + Algorithm is thread safe.
   + Algorithm is lossless.

WWW: ${HOMEPAGE}
@


1.1
log
@Initial revision
@
text
@a17 4

 Author: Markus Franz Xaver Johannes Oberhumer
         markus.oberhumer@@jk.uni-linz.ac.at
         http://www.infosys.tuwien.ac.at/Staff/lux/marco
@


1.1.1.1
log
@add lzo port
-
portable speedy lossless data compression library
@
text
@@
