head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.42
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.40
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.38
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.22
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.16
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.14
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.12
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.10
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.8
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.6
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1
	OPENBSD_2_9:1.1.0.2
	OPENBSD_2_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.11.11.18.04.43;	author jca;	state dead;
branches;
next	1.3;
commitid	g4NMf9EyJRwA4XoE;

1.3
date	2015.04.03.11.26.27;	author naddy;	state Exp;
branches;
next	1.2;
commitid	SNsaCHNrfQK2bwlR;

1.2
date	2005.02.22.15.13.09;	author naddy;	state Exp;
branches
	1.2.40.1
	1.2.42.1;
next	1.1;

1.1
date	2001.03.24.22.31.20;	author brad;	state Exp;
branches
	1.1.14.1
	1.1.16.1;
next	;

1.1.14.1
date	2005.02.26.22.36.36;	author robert;	state Exp;
branches;
next	;

1.1.16.1
date	2005.02.26.22.36.02;	author robert;	state Exp;
branches;
next	;

1.2.40.1
date	2015.04.03.11.34.24;	author naddy;	state Exp;
branches;
next	;
commitid	xRbiMOBj5nR6bS5l;

1.2.42.1
date	2015.04.03.11.33.28;	author naddy;	state Exp;
branches;
next	;
commitid	84vUK9RK98No25ke;


desc
@@


1.4
log
@Remove unace

Removal proposed by Andre Smagin for the following reasons:
* cannot extract ACE archives from version 2.0 or newer of WinAce;
* very dated code (1998), has issues as shown by the compilers;
* dumps core on armv7/BeagleBone Black (at the least);
* unclear / non-existing license - no package;
* obsolete proprietary format, dead piece of software.

ok sthen@@ giovanni@@ naddy@@
@
text
@$OpenBSD: patch-unace_c,v 1.3 2015/04/03 11:26:27 naddy Exp $

read_header: CVE-2015-2063

--- unace.c.orig	Wed Jul  1 10:29:00 1998
+++ unace.c	Fri Apr  3 13:20:59 2015
@@@@ -111,6 +111,7 @@@@ INT  read_header(INT print_err)         // reads any h
 {
    USHORT rd,
         head_size,
+        need_size,
         crc_ok;
    LONG crc;
    UCHAR *tp=readbuf;
@@@@ -120,12 +121,15 @@@@ INT  read_header(INT print_err)         // reads any h
    if (read(archan, &head, 4)<4)
       return 0;                         // read CRC and header size
 
-#ifdef HI_LO_BYTE_ORDER
+#if BYTE_ORDER == BIG_ENDIAN
    WORDswap(&head.HEAD_CRC);
    WORDswap(&head.HEAD_SIZE);
 #endif
                                         // read size_headrdb bytes into 
    head_size = head.HEAD_SIZE;          // header structure 
+   need_size = 3;
+   if (need_size > head.HEAD_SIZE)
+      return 0;
    rd = (head_size > size_headrdb) ? size_headrdb : head_size;
    if (read(archan, readbuf, rd) < rd)
       return 0;
@@@@ -145,7 +149,12 @@@@ INT  read_header(INT print_err)         // reads any h
    head.HEAD_FLAGS=BUFP2WORD(tp);
 
    if (head.HEAD_FLAGS & ACE_ADDSIZE)
+   {
+      need_size += 4;
+      if (need_size > head.HEAD_SIZE)
+         return 0;
       skipsize = head.ADDSIZE = BUF2LONG(tp);   // get ADDSIZE
+   }
    else
       skipsize = 0;
 
@@@@ -156,6 +165,9 @@@@ INT  read_header(INT print_err)         // reads any h
    switch (head.HEAD_TYPE)              // specific buffer to head conversion
    {
       case MAIN_BLK:
+         need_size += 24;
+         if (need_size > head.HEAD_SIZE)
+            return 0;
          memcpy(mhead.ACESIGN, tp, acesign_len); tp+=acesign_len;
          mhead.VER_MOD=*tp++;
          mhead.VER_CR =*tp++;
@@@@ -166,9 +178,15 @@@@ INT  read_header(INT print_err)         // reads any h
          mhead.RES2   =BUFP2WORD(tp);
          mhead.RES    =BUFP2LONG(tp);
          mhead.AV_SIZE=*tp++;
-         memcpy(mhead.AV, tp, rd-(USHORT)(tp-readbuf));
+         if (mhead.AV_SIZE > sizeof(mhead.AV) ||
+             mhead.AV_SIZE + need_size > head.HEAD_SIZE)
+            return 0;
+         memcpy(mhead.AV, tp, mhead.AV_SIZE);
          break;
       case FILE_BLK:
+         need_size += 28;
+         if (need_size > head.HEAD_SIZE)
+            return 0;
          fhead.PSIZE     =BUFP2LONG(tp);
          fhead.SIZE      =BUFP2LONG(tp);
          fhead.FTIME     =BUFP2LONG(tp);
@@@@ -179,7 +197,10 @@@@ INT  read_header(INT print_err)         // reads any h
          fhead.TECH.PARM =BUFP2WORD(tp);
          fhead.RESERVED  =BUFP2WORD(tp);
          fhead.FNAME_SIZE=BUFP2WORD(tp);
-         memcpy(fhead.FNAME, tp, rd-(USHORT)(tp-readbuf));
+         if (fhead.FNAME_SIZE > sizeof(fhead.FNAME) ||
+             fhead.FNAME_SIZE + need_size > head.HEAD_SIZE)
+            return 0;
+         memcpy(fhead.FNAME, tp, fhead.FNAME_SIZE);
          break;
 //    default: (REC_BLK and future things): 
 //              do nothing 'cause isn't needed for extraction
@@@@ -240,6 +261,7 @@@@ INT read_arc_head(void)         // searches for the ar
 INT  open_archive(INT print_err)        // opens archive (or volume)
 {
    CHAR av_str[80];
+   unsigned int copylen;
 
    archan = open(aname, O_RDONLY | O_BINARY);   // open file
 
@@@@ -263,8 +285,11 @@@@ INT  open_archive(INT print_err)        // opens archi
       sprintf(av_str, "\ncreated on %d.%d.%d by ",
               ts_day(adat.time_cr), ts_month(adat.time_cr), ts_year(adat.time_cr));
       printf(av_str);
-      strncpy(av_str, mhead.AV, mhead.AV_SIZE);
-      av_str[mhead.AV_SIZE] = 0;
+      copylen = mhead.AV_SIZE;
+      if (copylen > 79)
+        copylen = 79;
+      strncpy(av_str, mhead.AV, copylen);
+      av_str[copylen] = 0;
       printf("%s\n\n", av_str);
    }
    comment_out("Main comment:");        // print main comment
@@@@ -300,7 +325,7 @@@@ void get_next_volname(void)             // get file na
 INT  proc_vol(void)                     // opens volume
 {
    INT  i;
-   CHAR s[80];
+   CHAR s[PATH_MAX + 80];
 
    // if f_allvol_pr is 2 we have -y and should never ask
    if ((!fileexists_insense(aname) && f_allvol_pr != 2) || !f_allvol_pr)
@@@@ -428,7 +453,7 @@@@ void extract_files(int nopath, int test)
       if (head.HEAD_TYPE == FILE_BLK)
       {
          comment_out("File comment:");   // show file comment
-         ace_fname(file, &head, nopath); // get file name
+         ace_fname(file, &head, nopath, sizeof(file)); // get file name
          printf("\n%s", file);
          flush;
          dcpr_init_file();               // initialize decompression of file
@@@@ -496,7 +521,7 @@@@ void list_files(int verbose)
       if (head.HEAD_TYPE == FILE_BLK)
       {
          ULONG ti=fhead.FTIME;
-         ace_fname(file, &head, verbose ? 0 : 1); // get file name
+         ace_fname(file, &head, verbose ? 0 : 1, sizeof(file)); // get file name
 
          size  += fhead.SIZE;
          psize +=
@@@@ -588,7 +613,8 @@@@ int main(INT argc, CHAR * argv[])              // proc
 
       init_unace();                              // initialize unace
 
-      strcpy(aname, argv[arg_cnt]);              // get archive name
+      strncpy(aname, argv[arg_cnt], sizeof(aname) - 4);  // get archive name
+      aname[sizeof(aname) - 5] = '\0';
       if (!(s = (CHAR *) strrchr(aname, DIRSEP)))
          s = aname;
       if (!strrchr(s, '.'))
@


1.3
log
@Security fix for
CVE-2015-2063: buffer overflow when reading bogus file headers

The header parser was not checking if it had read enough data when
trying to parse the header from memory, causing it to accept files
with headers smaller than expected.

From Debian
@
text
@d1 1
a1 1
$OpenBSD: patch-unace_c,v 1.2 2005/02/22 15:13:09 naddy Exp $
@


1.2
log
@SECURITY:
Fix multiple security vulnerabilities:
- buffer overflows (CAN-2005-0160)
- directory traversal problem (CAN-2005-0161)

From: Ulf Harnhammar <Ulf.Harnhammar.9485@@student.uu.se>
@
text
@d1 4
a4 1
$OpenBSD: patch-unace_c,v 1.1 2001/03/24 22:31:20 brad Exp $
d6 10
a15 2
+++ unace.c	Mon Feb 14 17:51:47 2005
@@@@ -120,7 +120,7 @@@@ INT  read_header(INT print_err)         
d24 61
a84 1
@@@@ -240,6 +240,7 @@@@ INT read_arc_head(void)         // searc
d92 1
a92 1
@@@@ -263,8 +264,11 @@@@ INT  open_archive(INT print_err)        
d106 1
a106 1
@@@@ -300,7 +304,7 @@@@ void get_next_volname(void)             
d115 1
a115 1
@@@@ -428,7 +432,7 @@@@ void extract_files(int nopath, int test)
d124 1
a124 1
@@@@ -496,7 +500,7 @@@@ void list_files(int verbose)
d133 1
a133 1
@@@@ -588,7 +592,8 @@@@ int main(INT argc, CHAR * argv[])       
@


1.2.40.1
log
@Security fix for
CVE-2015-2063: buffer overflow when reading bogus file headers

The header parser was not checking if it had read enough data when
trying to parse the header from memory, causing it to accept files
with headers smaller than expected.

From Debian
@
text
@d1 1
a1 4
$OpenBSD: patch-unace_c,v 1.3 2015/04/03 11:26:27 naddy Exp $

read_header: CVE-2015-2063

d3 2
a4 10
+++ unace.c	Fri Apr  3 13:20:59 2015
@@@@ -111,6 +111,7 @@@@ INT  read_header(INT print_err)         // reads any h
 {
    USHORT rd,
         head_size,
+        need_size,
         crc_ok;
    LONG crc;
    UCHAR *tp=readbuf;
@@@@ -120,12 +121,15 @@@@ INT  read_header(INT print_err)         // reads any h
d13 1
a13 61
                                         // read size_headrdb bytes into 
    head_size = head.HEAD_SIZE;          // header structure 
+   need_size = 3;
+   if (need_size > head.HEAD_SIZE)
+      return 0;
    rd = (head_size > size_headrdb) ? size_headrdb : head_size;
    if (read(archan, readbuf, rd) < rd)
       return 0;
@@@@ -145,7 +149,12 @@@@ INT  read_header(INT print_err)         // reads any h
    head.HEAD_FLAGS=BUFP2WORD(tp);
 
    if (head.HEAD_FLAGS & ACE_ADDSIZE)
+   {
+      need_size += 4;
+      if (need_size > head.HEAD_SIZE)
+         return 0;
       skipsize = head.ADDSIZE = BUF2LONG(tp);   // get ADDSIZE
+   }
    else
       skipsize = 0;
 
@@@@ -156,6 +165,9 @@@@ INT  read_header(INT print_err)         // reads any h
    switch (head.HEAD_TYPE)              // specific buffer to head conversion
    {
       case MAIN_BLK:
+         need_size += 24;
+         if (need_size > head.HEAD_SIZE)
+            return 0;
          memcpy(mhead.ACESIGN, tp, acesign_len); tp+=acesign_len;
          mhead.VER_MOD=*tp++;
          mhead.VER_CR =*tp++;
@@@@ -166,9 +178,15 @@@@ INT  read_header(INT print_err)         // reads any h
          mhead.RES2   =BUFP2WORD(tp);
          mhead.RES    =BUFP2LONG(tp);
          mhead.AV_SIZE=*tp++;
-         memcpy(mhead.AV, tp, rd-(USHORT)(tp-readbuf));
+         if (mhead.AV_SIZE > sizeof(mhead.AV) ||
+             mhead.AV_SIZE + need_size > head.HEAD_SIZE)
+            return 0;
+         memcpy(mhead.AV, tp, mhead.AV_SIZE);
          break;
       case FILE_BLK:
+         need_size += 28;
+         if (need_size > head.HEAD_SIZE)
+            return 0;
          fhead.PSIZE     =BUFP2LONG(tp);
          fhead.SIZE      =BUFP2LONG(tp);
          fhead.FTIME     =BUFP2LONG(tp);
@@@@ -179,7 +197,10 @@@@ INT  read_header(INT print_err)         // reads any h
          fhead.TECH.PARM =BUFP2WORD(tp);
          fhead.RESERVED  =BUFP2WORD(tp);
          fhead.FNAME_SIZE=BUFP2WORD(tp);
-         memcpy(fhead.FNAME, tp, rd-(USHORT)(tp-readbuf));
+         if (fhead.FNAME_SIZE > sizeof(fhead.FNAME) ||
+             fhead.FNAME_SIZE + need_size > head.HEAD_SIZE)
+            return 0;
+         memcpy(fhead.FNAME, tp, fhead.FNAME_SIZE);
          break;
 //    default: (REC_BLK and future things): 
 //              do nothing 'cause isn't needed for extraction
@@@@ -240,6 +261,7 @@@@ INT read_arc_head(void)         // searches for the ar
d21 1
a21 1
@@@@ -263,8 +285,11 @@@@ INT  open_archive(INT print_err)        // opens archi
d35 1
a35 1
@@@@ -300,7 +325,7 @@@@ void get_next_volname(void)             // get file na
d44 1
a44 1
@@@@ -428,7 +453,7 @@@@ void extract_files(int nopath, int test)
d53 1
a53 1
@@@@ -496,7 +521,7 @@@@ void list_files(int verbose)
d62 1
a62 1
@@@@ -588,7 +613,8 @@@@ int main(INT argc, CHAR * argv[])              // proc
@


1.2.42.1
log
@Security fix for
CVE-2015-2063: buffer overflow when reading bogus file headers

The header parser was not checking if it had read enough data when
trying to parse the header from memory, causing it to accept files
with headers smaller than expected.

From Debian
@
text
@d1 1
a1 4
$OpenBSD: patch-unace_c,v 1.3 2015/04/03 11:26:27 naddy Exp $

read_header: CVE-2015-2063

d3 2
a4 10
+++ unace.c	Fri Apr  3 13:20:59 2015
@@@@ -111,6 +111,7 @@@@ INT  read_header(INT print_err)         // reads any h
 {
    USHORT rd,
         head_size,
+        need_size,
         crc_ok;
    LONG crc;
    UCHAR *tp=readbuf;
@@@@ -120,12 +121,15 @@@@ INT  read_header(INT print_err)         // reads any h
d13 1
a13 61
                                         // read size_headrdb bytes into 
    head_size = head.HEAD_SIZE;          // header structure 
+   need_size = 3;
+   if (need_size > head.HEAD_SIZE)
+      return 0;
    rd = (head_size > size_headrdb) ? size_headrdb : head_size;
    if (read(archan, readbuf, rd) < rd)
       return 0;
@@@@ -145,7 +149,12 @@@@ INT  read_header(INT print_err)         // reads any h
    head.HEAD_FLAGS=BUFP2WORD(tp);
 
    if (head.HEAD_FLAGS & ACE_ADDSIZE)
+   {
+      need_size += 4;
+      if (need_size > head.HEAD_SIZE)
+         return 0;
       skipsize = head.ADDSIZE = BUF2LONG(tp);   // get ADDSIZE
+   }
    else
       skipsize = 0;
 
@@@@ -156,6 +165,9 @@@@ INT  read_header(INT print_err)         // reads any h
    switch (head.HEAD_TYPE)              // specific buffer to head conversion
    {
       case MAIN_BLK:
+         need_size += 24;
+         if (need_size > head.HEAD_SIZE)
+            return 0;
          memcpy(mhead.ACESIGN, tp, acesign_len); tp+=acesign_len;
          mhead.VER_MOD=*tp++;
          mhead.VER_CR =*tp++;
@@@@ -166,9 +178,15 @@@@ INT  read_header(INT print_err)         // reads any h
          mhead.RES2   =BUFP2WORD(tp);
          mhead.RES    =BUFP2LONG(tp);
          mhead.AV_SIZE=*tp++;
-         memcpy(mhead.AV, tp, rd-(USHORT)(tp-readbuf));
+         if (mhead.AV_SIZE > sizeof(mhead.AV) ||
+             mhead.AV_SIZE + need_size > head.HEAD_SIZE)
+            return 0;
+         memcpy(mhead.AV, tp, mhead.AV_SIZE);
          break;
       case FILE_BLK:
+         need_size += 28;
+         if (need_size > head.HEAD_SIZE)
+            return 0;
          fhead.PSIZE     =BUFP2LONG(tp);
          fhead.SIZE      =BUFP2LONG(tp);
          fhead.FTIME     =BUFP2LONG(tp);
@@@@ -179,7 +197,10 @@@@ INT  read_header(INT print_err)         // reads any h
          fhead.TECH.PARM =BUFP2WORD(tp);
          fhead.RESERVED  =BUFP2WORD(tp);
          fhead.FNAME_SIZE=BUFP2WORD(tp);
-         memcpy(fhead.FNAME, tp, rd-(USHORT)(tp-readbuf));
+         if (fhead.FNAME_SIZE > sizeof(fhead.FNAME) ||
+             fhead.FNAME_SIZE + need_size > head.HEAD_SIZE)
+            return 0;
+         memcpy(fhead.FNAME, tp, fhead.FNAME_SIZE);
          break;
 //    default: (REC_BLK and future things): 
 //              do nothing 'cause isn't needed for extraction
@@@@ -240,6 +261,7 @@@@ INT read_arc_head(void)         // searches for the ar
d21 1
a21 1
@@@@ -263,8 +285,11 @@@@ INT  open_archive(INT print_err)        // opens archi
d35 1
a35 1
@@@@ -300,7 +325,7 @@@@ void get_next_volname(void)             // get file na
d44 1
a44 1
@@@@ -428,7 +453,7 @@@@ void extract_files(int nopath, int test)
d53 1
a53 1
@@@@ -496,7 +521,7 @@@@ void list_files(int verbose)
d62 1
a62 1
@@@@ -588,7 +613,8 @@@@ int main(INT argc, CHAR * argv[])              // proc
@


1.1
log
@rename patches
@
text
@d1 3
a3 3
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
--- unace.c.orig	Wed Jul  1 04:29:10 1998
+++ unace.c	Sat Mar 24 17:30:41 2001
d13 59
@


1.1.14.1
log
@SECURITY:
Fix multiple security vulnerabilities:
- buffer overflows (CAN-2005-0160)
- directory traversal problem (CAN-2005-0161)

From: Ulf Harnhammar <Ulf.Harnhammar.9485@@student.uu.se>; ok brad@@
@
text
@d1 3
a3 3
$OpenBSD$
--- unace.c.orig	Wed Jul  1 10:29:00 1998
+++ unace.c	Mon Feb 14 17:51:47 2005
a12 59
@@@@ -240,6 +240,7 @@@@ INT read_arc_head(void)         // searc
 INT  open_archive(INT print_err)        // opens archive (or volume)
 {
    CHAR av_str[80];
+   unsigned int copylen;
 
    archan = open(aname, O_RDONLY | O_BINARY);   // open file
 
@@@@ -263,8 +264,11 @@@@ INT  open_archive(INT print_err)        
       sprintf(av_str, "\ncreated on %d.%d.%d by ",
               ts_day(adat.time_cr), ts_month(adat.time_cr), ts_year(adat.time_cr));
       printf(av_str);
-      strncpy(av_str, mhead.AV, mhead.AV_SIZE);
-      av_str[mhead.AV_SIZE] = 0;
+      copylen = mhead.AV_SIZE;
+      if (copylen > 79)
+        copylen = 79;
+      strncpy(av_str, mhead.AV, copylen);
+      av_str[copylen] = 0;
       printf("%s\n\n", av_str);
    }
    comment_out("Main comment:");        // print main comment
@@@@ -300,7 +304,7 @@@@ void get_next_volname(void)             
 INT  proc_vol(void)                     // opens volume
 {
    INT  i;
-   CHAR s[80];
+   CHAR s[PATH_MAX + 80];
 
    // if f_allvol_pr is 2 we have -y and should never ask
    if ((!fileexists_insense(aname) && f_allvol_pr != 2) || !f_allvol_pr)
@@@@ -428,7 +432,7 @@@@ void extract_files(int nopath, int test)
       if (head.HEAD_TYPE == FILE_BLK)
       {
          comment_out("File comment:");   // show file comment
-         ace_fname(file, &head, nopath); // get file name
+         ace_fname(file, &head, nopath, sizeof(file)); // get file name
          printf("\n%s", file);
          flush;
          dcpr_init_file();               // initialize decompression of file
@@@@ -496,7 +500,7 @@@@ void list_files(int verbose)
       if (head.HEAD_TYPE == FILE_BLK)
       {
          ULONG ti=fhead.FTIME;
-         ace_fname(file, &head, verbose ? 0 : 1); // get file name
+         ace_fname(file, &head, verbose ? 0 : 1, sizeof(file)); // get file name
 
          size  += fhead.SIZE;
          psize +=
@@@@ -588,7 +592,8 @@@@ int main(INT argc, CHAR * argv[])       
 
       init_unace();                              // initialize unace
 
-      strcpy(aname, argv[arg_cnt]);              // get archive name
+      strncpy(aname, argv[arg_cnt], sizeof(aname) - 4);  // get archive name
+      aname[sizeof(aname) - 5] = '\0';
       if (!(s = (CHAR *) strrchr(aname, DIRSEP)))
          s = aname;
       if (!strrchr(s, '.'))
@


1.1.16.1
log
@SECURITY:
Fix multiple security vulnerabilities:
- buffer overflows (CAN-2005-0160)
- directory traversal problem (CAN-2005-0161)

From: Ulf Harnhammar <Ulf.Harnhammar.9485@@student.uu.se>; ok brad@@
@
text
@d1 3
a3 3
$OpenBSD$
--- unace.c.orig	Wed Jul  1 10:29:00 1998
+++ unace.c	Mon Feb 14 17:51:47 2005
a12 59
@@@@ -240,6 +240,7 @@@@ INT read_arc_head(void)         // searc
 INT  open_archive(INT print_err)        // opens archive (or volume)
 {
    CHAR av_str[80];
+   unsigned int copylen;
 
    archan = open(aname, O_RDONLY | O_BINARY);   // open file
 
@@@@ -263,8 +264,11 @@@@ INT  open_archive(INT print_err)        
       sprintf(av_str, "\ncreated on %d.%d.%d by ",
               ts_day(adat.time_cr), ts_month(adat.time_cr), ts_year(adat.time_cr));
       printf(av_str);
-      strncpy(av_str, mhead.AV, mhead.AV_SIZE);
-      av_str[mhead.AV_SIZE] = 0;
+      copylen = mhead.AV_SIZE;
+      if (copylen > 79)
+        copylen = 79;
+      strncpy(av_str, mhead.AV, copylen);
+      av_str[copylen] = 0;
       printf("%s\n\n", av_str);
    }
    comment_out("Main comment:");        // print main comment
@@@@ -300,7 +304,7 @@@@ void get_next_volname(void)             
 INT  proc_vol(void)                     // opens volume
 {
    INT  i;
-   CHAR s[80];
+   CHAR s[PATH_MAX + 80];
 
    // if f_allvol_pr is 2 we have -y and should never ask
    if ((!fileexists_insense(aname) && f_allvol_pr != 2) || !f_allvol_pr)
@@@@ -428,7 +432,7 @@@@ void extract_files(int nopath, int test)
       if (head.HEAD_TYPE == FILE_BLK)
       {
          comment_out("File comment:");   // show file comment
-         ace_fname(file, &head, nopath); // get file name
+         ace_fname(file, &head, nopath, sizeof(file)); // get file name
          printf("\n%s", file);
          flush;
          dcpr_init_file();               // initialize decompression of file
@@@@ -496,7 +500,7 @@@@ void list_files(int verbose)
       if (head.HEAD_TYPE == FILE_BLK)
       {
          ULONG ti=fhead.FTIME;
-         ace_fname(file, &head, verbose ? 0 : 1); // get file name
+         ace_fname(file, &head, verbose ? 0 : 1, sizeof(file)); // get file name
 
          size  += fhead.SIZE;
          psize +=
@@@@ -588,7 +592,8 @@@@ int main(INT argc, CHAR * argv[])       
 
       init_unace();                              // initialize unace
 
-      strcpy(aname, argv[arg_cnt]);              // get archive name
+      strncpy(aname, argv[arg_cnt], sizeof(aname) - 4);  // get archive name
+      aname[sizeof(aname) - 5] = '\0';
       if (!(s = (CHAR *) strrchr(aname, DIRSEP)))
          s = aname;
       if (!strrchr(s, '.'))
@


