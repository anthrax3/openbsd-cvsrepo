head	1.4;
access;
symbols
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.06.13.20.31.32;	author naddy;	state dead;
branches;
next	1.3;
commitid	N2VsbiKXx0P70Kbj;

1.3
date	2015.02.18.13.04.09;	author sthen;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	Q9SP3tBPPi3szmqh;

1.2
date	2013.05.13.12.57.42;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.07.31.00.30.27;	author kevlo;	state Exp;
branches;
next	;

1.3.2.1
date	2015.02.18.13.43.51;	author sthen;	state Exp;
branches;
next	;
commitid	PGmGSP5qwBbG0uiW;


desc
@@


1.4
log
@Update to 1.6.

This release fixes the extraction to absolute file names with invalid
UTF-8 characters (CVE-2015-2060), which had already been fixed in
the port.

The security patch in the port for CVE-2014-9556 was already obsoleted
by extended input validation in 1.5.

ok jca@@
@
text
@$OpenBSD: patch-src_cabextract_c,v 1.3 2015/02/18 13:04:09 sthen Exp $

Prevent leading slashes check being evaded with malformed UTF-8
http://sourceforge.net/p/libmspack/code/217/

--- src/cabextract.c.orig	Sat Jan 10 18:13:11 2015
+++ src/cabextract.c	Wed Feb 18 13:01:06 2015
@@@@ -738,7 +738,7 @@@@ static int unix_path_seperators(struct mscabd_file *fi
 static char *create_output_name(unsigned char *fname, unsigned char *dir,
                          int lower, int isunix, int utf8)
 {
-  unsigned char *p, *name, c, *fe, sep, slash;
+  unsigned char *p, *name, c, *o, *fe, sep, slash;
   int x;
 
   sep   = (isunix) ? '/'  : '\\'; /* the path-seperator */
@@@@ -750,7 +750,7 @@@@ static char *create_output_name(unsigned char *fname, 
   if (utf8) x *= 4;
   /* length of output directory */
   if (dir) x += strlen((char *) dir);
-  x += 2;
+  x += 3;
 
   if (!(name = malloc(x))) {
     fprintf(stderr, "Can't allocate output filename (%u bytes)\n", x);
@@@@ -766,16 +766,14 @@@@ static char *create_output_name(unsigned char *fname, 
     strcat((char *) name, "/");
   }
 
-  /* remove leading slashes */
-  while (*fname == sep) fname++;
-
   /* copy from fi->filename to new name, converting MS-DOS slashes to UNIX
    * slashes as we go. Also lowercases characters if needed.
    */
-  p = &name[strlen((char *)name)];    /* p  = start of output filename */
+  p = o = &name[strlen((char *)name)]; /* p = o = start of output filename */
   fe = &fname[strlen((char *)fname)]; /* fe = end of input filename */
 
   if (utf8) {
+    int first = 1;
     /* handle UTF-8 encoded filenames (see RFC 3629). This doesn't reject bad
      * UTF-8 with overlong encodings, but does re-encode it as valid UTF-8.
      */
@@@@ -815,6 +813,10 @@@@ static char *create_output_name(unsigned char *fname, 
         x = 0xFFFD; /* invalid code point or cheeky null byte */
       }
 
+      /* remove leading slashes */
+      if (first && x == sep) continue;
+      first = 0;
+
       /* whatever is the path seperator -> '/'
        * whatever is the other slash    -> '\\'
        * otherwise, if lower is set, the lowercase version */
@@@@ -851,6 +853,7 @@@@ static char *create_output_name(unsigned char *fname, 
   }
   else {
     /* regular non-utf8 version */
+    while (*fname == sep) fname++;
     do {
       c = *fname++;
       if      (c == sep)   c = '/';
@@@@ -861,11 +864,16 @@@@ static char *create_output_name(unsigned char *fname, 
 
   /* search for "../" in cab filename part and change to "xx/".  This
    * prevents any unintended directory traversal. */
-  for (p = &name[dir ? strlen((char *) dir)+1 : 0]; *p; p++) {
+  for (p = o; *p; p++) {
     if ((p[0] == '.') && (p[1] == '.') && (p[2] == '/')) {
       p[0] = p[1] = 'x';
       p += 2;
     }
+  }
+
+  /* change filename composed entirely of leading slashes to "x" */
+  if (strlen(o) == 0) {
+      strcat(o, "x");
   }
 
   return (char *) name;
@


1.3
log
@Fix directory-traversal vulnerability involving long UTF-8 encodings.
Nice write-up at http://www.openwall.com/lists/oss-security/2015/02/18/3
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3.2.1
log
@MFC: Fix directory-traversal vulnerability involving long UTF-8 encodings.
Nice write-up at http://www.openwall.com/lists/oss-security/2015/02/18/3
@
text
@d1 1
a1 1
$OpenBSD: patch-src_cabextract_c,v 1.3 2015/02/18 13:04:09 sthen Exp $
@


1.2
log
@update to cabextract 1.4, ok Steve Shockley (maintainer)
@
text
@d1 81
a81 21
$OpenBSD: patch-src_cabextract_c,v 1.1 2010/07/31 00:30:27 kevlo Exp $
--- src/cabextract.c.orig	Mon Jul 12 22:53:12 2010
+++ src/cabextract.c	Fri Jul 30 16:48:06 2010
@@@@ -229,7 +229,7 @@@@ static int cabx_read(struct mspack_file *file, void *b
 static int cabx_write(struct mspack_file *file, void *buffer, int bytes);
 static int cabx_seek(struct mspack_file *file, off_t offset, int mode);
 static off_t cabx_tell(struct mspack_file *file);
-static void cabx_msg(struct mspack_file *file, char *format, ...);
+static void cabx_msg(struct mspack_file *file, const char *format, ...);
 static void *cabx_alloc(struct mspack_system *this, size_t bytes);
 static void cabx_free(void *buffer);
 static void cabx_copy(void *src, void *dest, size_t bytes);
@@@@ -1191,7 +1191,7 @@@@ static off_t cabx_tell(struct mspack_file *file) {
 #endif
 }
 
-static void cabx_msg(struct mspack_file *file, char *format, ...) {
+static void cabx_msg(struct mspack_file *file, const char *format, ...) {
   va_list ap;
   if (file) {
     fprintf(stderr, "%s: ", ((struct mspack_file_p *) file)->name);
@


1.1
log
@SECURITY update to 1.3:
http://www.cabextract.org.uk/#changes

ok merdely@@, sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@

