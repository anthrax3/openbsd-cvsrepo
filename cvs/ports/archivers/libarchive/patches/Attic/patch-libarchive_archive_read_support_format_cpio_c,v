head	1.2;
access;
symbols
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2016.05.26.20.31.37;	author naddy;	state dead;
branches;
next	1.1;
commitid	yuLwDJAplWxLaCJO;

1.1
date	2016.01.30.23.34.44;	author naddy;	state Exp;
branches
	1.1.2.1;
next	;
commitid	5Su4CSv12sRKnjcv;

1.1.2.1
date	2016.01.31.00.25.32;	author naddy;	state Exp;
branches;
next	;
commitid	H7UZw8qKElWAuGQ4;


desc
@@


1.2
log
@Update to 3.2.0.  Notable changes include:
* Incorporate patches for crash and overflow bugs
* Add support for lz4 compression
* Add bsdcat command-line tool

Also avoid picking up ext2fs header; reported by rpe@@
@
text
@$OpenBSD: patch-libarchive_archive_read_support_format_cpio_c,v 1.1 2016/01/30 23:34:44 naddy Exp $

Commit 3865cf2
    Issue 394: Segfault when reading malformed old-style cpio archives
    Root cause here was an implicit cast that resulted in
    reading very large file sizes as negative numbers.

Hunk 2, 3:
Commit 24f5de6
    Set a proper error message if we hit end-of-file when
    trying to read a cpio header.

--- libarchive/archive_read_support_format_cpio.c.orig	Mon Jan 14 02:43:45 2013
+++ libarchive/archive_read_support_format_cpio.c	Sat Jan 30 21:41:37 2016
@@@@ -198,7 +198,7 @@@@ static int	archive_read_format_cpio_read_data(struct a
 static int	archive_read_format_cpio_read_header(struct archive_read *,
 		    struct archive_entry *);
 static int	archive_read_format_cpio_skip(struct archive_read *);
-static int	be4(const unsigned char *);
+static int64_t	be4(const unsigned char *);
 static int	find_odc_header(struct archive_read *);
 static int	find_newc_header(struct archive_read *);
 static int	header_bin_be(struct archive_read *, struct cpio *,
@@@@ -213,7 +213,7 @@@@ static int	header_afiol(struct archive_read *, struct 
 		    struct archive_entry *, size_t *, size_t *);
 static int	is_octal(const char *, size_t);
 static int	is_hex(const char *, size_t);
-static int	le4(const unsigned char *);
+static int64_t	le4(const unsigned char *);
 static int	record_hardlink(struct archive_read *a,
 		    struct cpio *cpio, struct archive_entry *entry);
 
@@@@ -864,8 +864,11 @@@@ header_bin_le(struct archive_read *a, struct cpio *cpi
 
 	/* Read fixed-size portion of header. */
 	h = __archive_read_ahead(a, bin_header_size, NULL);
-	if (h == NULL)
+	if (h == NULL) {
+	    archive_set_error(&a->archive, 0,
+		"End of file trying to read next cpio header");
 	    return (ARCHIVE_FATAL);
+	}
 
 	/* Parse out binary fields. */
 	header = (const unsigned char *)h;
@@@@ -900,8 +903,11 @@@@ header_bin_be(struct archive_read *a, struct cpio *cpi
 
 	/* Read fixed-size portion of header. */
 	h = __archive_read_ahead(a, bin_header_size, NULL);
-	if (h == NULL)
+	if (h == NULL) {
+	    archive_set_error(&a->archive, 0,
+		"End of file trying to read next cpio header");
 	    return (ARCHIVE_FATAL);
+	}
 
 	/* Parse out binary fields. */
 	header = (const unsigned char *)h;
@@@@ -944,17 +950,17 @@@@ archive_read_format_cpio_cleanup(struct archive_read *
 	return (ARCHIVE_OK);
 }
 
-static int
+static int64_t
 le4(const unsigned char *p)
 {
-	return ((p[0]<<16) + (p[1]<<24) + (p[2]<<0) + (p[3]<<8));
+	return ((p[0] << 16) + (((int64_t)p[1]) << 24) + (p[2] << 0) + (p[3] << 8));
 }
 
 
-static int
+static int64_t
 be4(const unsigned char *p)
 {
-	return ((p[0]<<24) + (p[1]<<16) + (p[2]<<8) + (p[3]));
+	return ((((int64_t)p[0]) << 24) + (p[1] << 16) + (p[2] << 8) + (p[3]));
 }
 
 /*
@


1.1
log
@Apply patches for multiple security vulnerablities;
- CVE-2013-0211: denial of service via unspecified vectors
- CVE-2015-2304: directory traveral via absolute paths
- crash/infinite loop on malformed CPIO archives

From upstream git (commits 2253154, 5935715, 3865cf2, e6c9668, 24f5de6)
via FreeBSD.

Minor bump for the new ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS option.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@Apply patches for multiple security vulnerablities;
- CVE-2013-0211: denial of service via unspecified vectors
- CVE-2015-2304: directory traveral via absolute paths
- crash/infinite loop on malformed CPIO archives

From upstream git (commits 2253154, 5935715, 3865cf2, e6c9668, 24f5de6)
via FreeBSD.

Minor bump for the new ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS option.
@
text
@@

