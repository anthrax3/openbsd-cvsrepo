head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_7:1.3.0.2
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.17.20.16.49;	author naddy;	state Exp;
branches;
next	1.3;
commitid	LSQA2hSb03IcYnZB;

1.3
date	2015.03.31.15.36.52;	author naddy;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;
commitid	2ATlUkZrXvt3nbGs;

1.2
date	2007.04.17.19.46.42;	author naddy;	state dead;
branches;
next	1.1;

1.1
date	2005.10.20.21.45.18;	author naddy;	state Exp;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;

1.1.2.1
date	2007.04.19.13.47.06;	author sturm;	state dead;
branches;
next	;

1.1.4.1
date	2007.04.19.14.26.57;	author sturm;	state dead;
branches;
next	;

1.1.6.1
date	2007.05.01.16.37.56;	author sturm;	state dead;
branches;
next	;

1.3.2.1
date	2015.03.31.17.19.37;	author naddy;	state Exp;
branches;
next	;
commitid	NnVrKcAFUjoWE1Yb;

1.3.4.1
date	2015.03.31.17.47.02;	author naddy;	state Exp;
branches;
next	;
commitid	7Z6Erp1glhgnAeOI;


desc
@@


1.4
log
@Update to 2.12, but retain local fix for CVE-2015-1197.
Grab maintainer.
@
text
@$OpenBSD: patch-src_copyin_c,v 1.3 2015/03/31 15:36:52 naddy Exp $

CVE-2015-1197: cpio directory traversal

--- src/copyin.c.orig	Sat Sep 12 12:57:30 2015
+++ src/copyin.c	Wed Sep 16 23:21:15 2015
@@@@ -695,6 +695,51 @@@@ copyin_link (struct cpio_file_stat *file_hdr, int in_f
   free (link_name);
 }
 
+
+static int
+path_contains_symlink(char *path)
+{
+  struct stat st;
+  char *slash;
+  char *nextslash;
+
+  /* we got NULL pointer or empty string */
+  if (!path || !*path) {
+    return false;
+  }
+
+  slash = path;
+
+  while ((nextslash = strchr(slash + 1, '/')) != NULL) {
+    slash = nextslash;
+    *slash = '\0';
+
+    if (lstat(path, &st) != 0) {
+      if (errno == ELOOP) {
+        /* ELOOP - too many symlinks */
+        *slash = '/';
+        return true;
+      } else if (errno == ENOMEM) {
+        /* No memory for lstat - terminate */
+        xalloc_die();
+      } else {
+        /* cannot lstat path - give up */
+        *slash = '/';
+        return false;
+      }
+    }
+
+    if (S_ISLNK(st.st_mode)) {
+      *slash = '/';
+      return true;
+    }
+
+    *slash = '/';
+  }
+
+  return false;
+}
+
 static void
 copyin_file (struct cpio_file_stat *file_hdr, int in_file_des)
 {
@@@@ -1467,6 +1512,23 @@@@ process_copy_in ()
       else
 	{
 	  /* Copy the input file into the directory structure.  */
+
+          /* Can we write files over symlinks? */
+          if (!extract_over_symlinks)
+            {
+              if (path_contains_symlink(file_hdr.c_name))
+                {
+                  /* skip the file */
+                  /*
+                  fprintf(stderr, "Can't write over symlinks. Skipping %s\n", file_hdr.c_name);
+                  tape_toss_input (in_file_des, file_hdr.c_filesize);
+                  tape_skip_padding (in_file_des, file_hdr.c_filesize);
+                  continue;
+                  */
+                  /* terminate */
+	          error (PAXEXIT_FAILURE, 0, _("Can't write over symlinks: %s\n"), file_hdr.c_name);
+                }
+            }
 
 	  /* Do we need to rename the file? */
 	  if (rename_flag || rename_batch_file)
@


1.3
log
@CVE-2014-9112: Heap-based buffer overflow in the process_copy_in
function allows remote attackers to cause a denial of service via
a large block value in a cpio archive.
Fix from a series of upstream commits by Sergey Poznyakoff, via Debian.

CVE-2015-1197: cpio, when using the --no-absolute-filenames option,
allows local users to write to arbitrary files via a symlink attack
on a file in an archive.
Fix from Vitezslav Cizek after 3.5 years of gestation in the SUSE
bug tracker, via Debian.

Also apply an upstream fix for some regression tests while here.
@
text
@d1 1
a1 1
$OpenBSD$
a2 1
CVE-2014-9112: heap overflow in process_copy_in()
d5 3
a7 89
--- src/copyin.c.orig	Mon Feb 15 11:02:23 2010
+++ src/copyin.c	Sun Mar 29 21:11:10 2015
@@@@ -124,10 +124,30 @@@@ tape_skip_padding (int in_file_des, off_t offset)
   if (pad != 0)
     tape_toss_input (in_file_des, pad);
 }
-
 
+static char *
+get_link_name (struct cpio_file_stat *file_hdr, int in_file_des)
+{
+  char *link_name;
+  
+  if (file_hdr->c_filesize < 0 || file_hdr->c_filesize > SIZE_MAX-1)
+    {
+      error (0, 0, _("%s: stored filename length is out of range"),
+	     file_hdr->c_name);
+      link_name = NULL;
+    }
+  else
+    {
+      link_name = xmalloc (file_hdr->c_filesize + 1);
+      tape_buffered_read (link_name, in_file_des, file_hdr->c_filesize);
+      link_name[file_hdr->c_filesize] = '\0';
+      tape_skip_padding (in_file_des, file_hdr->c_filesize);
+    }
+  return link_name;
+}
+
 static void
-list_file(struct cpio_file_stat* file_hdr, int in_file_des)
+list_file (struct cpio_file_stat* file_hdr, int in_file_des)
 {
   if (verbose_flag)
     {
@@@@ -136,21 +156,16 @@@@ list_file(struct cpio_file_stat* file_hdr, int in_file
 	{
 	  if (archive_format != arf_tar && archive_format != arf_ustar)
 	    {
-	      char *link_name = NULL;	/* Name of hard and symbolic links.  */
-
-	      link_name = (char *) xmalloc ((unsigned int) file_hdr->c_filesize + 1);
-	      link_name[file_hdr->c_filesize] = '\0';
-	      tape_buffered_read (link_name, in_file_des, file_hdr->c_filesize);
-	      long_format (file_hdr, link_name);
-	      free (link_name);
-	      tape_skip_padding (in_file_des, file_hdr->c_filesize);
-	      return;
+	      char *link_name = get_link_name (file_hdr, in_file_des);
+	      if (link_name)
+		{
+		  long_format (file_hdr, link_name);
+		  free (link_name);
+		}
 	    }
 	  else
-	    {
-	      long_format (file_hdr, file_hdr->c_tar_linkname);
-	      return;
-	    }
+	    long_format (file_hdr, file_hdr->c_tar_linkname);
+	  return;
 	}
       else
 #endif
@@@@ -640,7 +655,7 @@@@ copyin_device (struct cpio_file_stat* file_hdr)
 }
 
 static void
-copyin_link(struct cpio_file_stat *file_hdr, int in_file_des)
+copyin_link (struct cpio_file_stat *file_hdr, int in_file_des)
 {
   char *link_name = NULL;	/* Name of hard and symbolic links.  */
   int res;			/* Result of various function calls.  */
@@@@ -650,10 +665,9 @@@@ copyin_link(struct cpio_file_stat *file_hdr, int in_fi
 
   if (archive_format != arf_tar && archive_format != arf_ustar)
     {
-      link_name = (char *) xmalloc ((unsigned int) file_hdr->c_filesize + 1);
-      link_name[file_hdr->c_filesize] = '\0';
-      tape_buffered_read (link_name, in_file_des, file_hdr->c_filesize);
-      tape_skip_padding (in_file_des, file_hdr->c_filesize);
+      link_name = get_link_name (file_hdr, in_file_des);
+      if (!link_name)
+	return;
     }
   else
     {
@@@@ -686,6 +700,51 @@@@ copyin_link(struct cpio_file_stat *file_hdr, int in_fi
d59 1
a59 21
@@@@ -1005,7 +1064,7 @@@@ read_in_header (struct cpio_file_stat *file_hdr, int i
 
   file_hdr->c_tar_linkname = NULL;
 
-  tape_buffered_read (magic.str, in_des, 6L);
+  tape_buffered_read (magic.str, in_des, sizeof (magic.str));
   while (1)
     {
       if (append_flag)
@@@@ -1050,8 +1109,8 @@@@ read_in_header (struct cpio_file_stat *file_hdr, int i
 	  break;
 	}
       bytes_skipped++;
-      memmove (magic.str, magic.str + 1, 5);
-      tape_buffered_read (magic.str, in_des, 1L);
+      memmove (magic.str, magic.str + 1, sizeof (magic.str) - 1);
+      tape_buffered_read (magic.str + sizeof (magic.str) - 1, in_des, 1L);
     }
 }
 
@@@@ -1456,6 +1515,23 @@@@ process_copy_in ()
d77 1
a77 1
+	          error (1, 0, _("Can't write over symlinks: %s\n"), file_hdr.c_name);
@


1.3.4.1
log
@CVE-2014-9112: Heap-based buffer overflow in the process_copy_in
function allows remote attackers to cause a denial of service via
a large block value in a cpio archive.
Fix from a series of upstream commits by Sergey Poznyakoff, via Debian.

CVE-2015-1197: cpio, when using the --no-absolute-filenames option,
allows local users to write to arbitrary files via a symlink attack
on a file in an archive.
Fix from Vitezslav Cizek after 3.5 years of gestation in the SUSE
bug tracker, via Debian.

Also apply an upstream fix for some regression tests while here.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_copyin_c,v 1.3 2015/03/31 15:36:52 naddy Exp $
@


1.3.2.1
log
@CVE-2014-9112: Heap-based buffer overflow in the process_copy_in
function allows remote attackers to cause a denial of service via
a large block value in a cpio archive.
Fix from a series of upstream commits by Sergey Poznyakoff, via Debian.

CVE-2015-1197: cpio, when using the --no-absolute-filenames option,
allows local users to write to arbitrary files via a symlink attack
on a file in an archive.
Fix from Vitezslav Cizek after 3.5 years of gestation in the SUSE
bug tracker, via Debian.

Also apply an upstream fix for some regression tests while here.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_copyin_c,v 1.3 2015/03/31 15:36:52 naddy Exp $
@


1.2
log
@Update to 2.7:
* Improved error checking and diagnostics
* Fixed CAN-1999-1572
* Allow to use --sparse in both copy-in and copy-pass.
* Fix bug that eventually caused copying out the same hard-linked file
several times to archive.

From: Rui Reis
@
text
@d1 67
a67 5
$OpenBSD: patch-src_copyin_c,v 1.1 2005/10/20 21:45:18 naddy Exp $
--- src/copyin.c.orig	Wed Sep  8 13:10:02 2004
+++ src/copyin.c	Thu Oct 20 23:33:40 2005
@@@@ -389,19 +389,20 @@@@ create_final_defers ()
 	  continue;
d69 12
d82 9
a90 23
-      if (close (out_file_des) < 0)
-	error (0, errno, "%s", d->header.c_name);
-
       /* File is now copied; set attributes.  */
       if (!no_chown_flag)
-	if ((chown (d->header.c_name,
+	if ((fchown (out_file_des,
 		    set_owner_flag ? set_owner : d->header.c_uid,
 	       set_group_flag ? set_group : d->header.c_gid) < 0)
 	    && errno != EPERM)
 	  error (0, errno, "%s", d->header.c_name);
       /* chown may have turned off some permissions we wanted. */
-      if (chmod (d->header.c_name, (int) d->header.c_mode) < 0)
+      if (fchmod (out_file_des, (int) d->header.c_mode) < 0)
 	error (0, errno, "%s", d->header.c_name);
+
+      if (close (out_file_des) < 0)
+	error (0, errno, "%s", d->header.c_name);
+
       if (retain_time_flag)
 	{
 	  times.actime = times.modtime = d->header.c_mtime;
@@@@ -1335,6 +1336,48 @@@@ swab_array (char *ptr, int count)
d92 4
d97 4
a100 5
 
+/* Return a safer suffix of FILE_NAME, or "." if it has no safer
+   suffix.  Check for fully specified file names and other atrocities.  */
+static const char *
+safer_name_suffix (char const *file_name)
d102 28
a129 16
+  char const *p;
+
+  /* Skip leading file name components that contain "..", and leading slashes.  */
+  size_t prefix_len = 0;
+
+  for (p = file_name; *p;)
+    {
+      if (p[0] == '.' && p[1] == '.' && ((p[2] == '/') || !p[2]))
+	prefix_len = p + 2 - file_name;
+
+      do
+	{
+	  if (*p++ == '/')
+	    break;
+	}
+      while (*p);
d132 3
a134 11
+  for (p = file_name + prefix_len; *p == '/'; p++)
+    continue;
+  prefix_len = p - file_name;
+
+  if (prefix_len)
+    {
+      char *prefix = alloca (prefix_len + 1);
+      memcpy (prefix, file_name, prefix_len);
+      prefix[prefix_len] = '\0';
+
+      error (0, 0, ("Removing leading `%s' from member names"), prefix);
d137 2
a138 2
+  if (!*p)
+    p = ".";
d140 1
a140 1
+  return p;
d143 4
a146 2
 /* Read the collection from standard input and create files
    in the file system.  */
d148 1
a148 1
@@@@ -1445,18 +1488,11 @@@@ process_copy_in ()
d150 18
a167 4
       /* Do we have to ignore absolute paths, and if so, does the filename
          have an absolute path?  */
-      if (no_abs_paths_flag && file_hdr.c_name && file_hdr.c_name [0] == '/')
+      if (no_abs_paths_flag && file_hdr.c_name && file_hdr.c_name [0])
d169 18
a186 2
-	  char *p;
+	  const char *p = safer_name_suffix (file_hdr.c_name);
d188 2
a189 12
-	  p = file_hdr.c_name;
-	  while (*p == '/')
-	    ++p;
-	  if (*p == '\0')
-	    {
-	      strcpy (file_hdr.c_name, ".");
-	    }
-	  else
+	  if (p != file_hdr.c_name)
 	    {
               /* Debian hack: file_hrd.c_name is sometimes set to
                  point to static memory by code in tar.c.  This
@


1.1
log
@Update to 2.6, which brings I18N support.
Also include Debian/Ubuntu patches for CAN-2005-1111 (chmod races) and
CAN-2005-1229 (path traversal).
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.6.1
log
@MFC:
Update to 2.7:
* Improved error checking and diagnostics
* Fixed CAN-1999-1572
* Allow to use --sparse in both copy-in and copy-pass.
* Fix bug that eventually caused copying out the same hard-linked file
several times to archive.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_copyin_c,v 1.1 2005/10/20 21:45:18 naddy Exp $
@


1.1.4.1
log
@MFC:
Update to 2.7:
* Improved error checking and diagnostics
* Fixed CAN-1999-1572
* Allow to use --sparse in both copy-in and copy-pass.
* Fix bug that eventually caused copying out the same hard-linked file
several times to archive.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_copyin_c,v 1.1 2005/10/20 21:45:18 naddy Exp $
@


1.1.2.1
log
@MFC:
* Improved error checking and diagnostics
* Fixed CAN-1999-1572
* Allow to use --sparse in both copy-in and copy-pass.
* Fix bug that eventually caused copying out the same hard-linked file
several times to archive.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_copyin_c,v 1.1 2005/10/20 21:45:18 naddy Exp $
@


