head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.36
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.34
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.32
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.28
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.30
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.26
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.24
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.22
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.20
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.18
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.16
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.14
	OPENBSD_5_0:1.3.0.12
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.10
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_6:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2009.01.14.16.59.51;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.30.17.33.40;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.04.15.36.36;	author robert;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2004.12.05.11.41.32;	author robert;	state Exp;
branches;
next	;

1.1.4.1
date	2004.12.05.11.42.57;	author robert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to zip 3.0

from form@@ via mikeb@@
@
text
@$OpenBSD: patch-unix_unix_c,v 1.2 2006/07/30 17:33:40 naddy Exp $
--- unix/unix.c.orig	Fri Dec 12 23:07:25 2008
+++ unix/unix.c	Fri Dec 12 23:08:04 2008
@@@@ -344,7 +344,7 @@@@ ulg filetime(f, a, n, t)
   z_stat s;         /* results of stat() */
   /* converted to pointer from using FNMAX - 11/8/04 EG */
   char *name;
-  int len = strlen(f);
+  size_t len = strlen(f);
 
   if (f == label) {
     if (a != NULL)
@@@@ -570,7 +570,7 @@@@ int set_extra_field(z, z_utim)
 {
   z_stat s;
   char *name;
-  int len = strlen(z->name);
+  size_t len = strlen(z->name);
 
   /* For the full sized UT local field including the UID/GID fields, we
    * have to stat the file again. */
@@@@ -695,7 +695,8 @@@@ char *d;                /* directory to delete */
 {
 # ifdef NO_RMDIR
     /* code from Greg Roelofs, who horked it from Mark Edwards (unzip) */
-    int r, len;
+    size_t len;
+    int r;
     char *s;              /* malloc'd string for system command */
 
     len = strlen(d);
@


1.2
log
@Update to 2.32 from David Hill <dhill@@mindcry.org>.  Clean up a bit.
@
text
@d1 5
a5 5
$OpenBSD$
--- unix/unix.c.orig	Tue May 30 00:35:00 2006
+++ unix/unix.c	Sun Jul 30 19:09:14 2006
@@@@ -338,7 +338,7 @@@@ ulg filetime(f, a, n, t)
   struct stat s;        /* results of stat() */
d13 1
a13 1
@@@@ -438,7 +438,7 @@@@ int set_extra_field(z, z_utim)
d15 1
a15 1
   struct stat s;
d22 10
@


1.1
log
@SECURITY:
fix a buffer overflow; bump PKGNAME;
When zip performs recursive folder compression, it does not check
for the length of resulting path. If the path is too long, a buffer overflow
occurs leading to stack corruption and segmentation fault;
CAN-2004-1010
@
text
@d2 3
a4 5
--- unix/unix.c.orig	Sat Dec  4 16:25:31 2004
+++ unix/unix.c	Sat Dec  4 16:26:56 2004
@@@@ -319,9 +319,9 @@@@
    a file size of -1 */
 {
d6 2
a7 1
-  char name[FNMAX];
a8 2
-
+  char *name;
d10 1
a10 1
+  
d13 9
a21 13
       *a = label_mode;
@@@@ -331,6 +331,11 @@@@
       t->atime = t->mtime = t->ctime = label_utim;
     return label_time;
   }
+  
+  name = malloc(len + 1);
+  if (!name)
+    return 0;
+    
   strcpy(name, f);
   if (name[len - 1] == '/')
     name[len - 1] = '\0';
@


1.1.4.1
log
@SECURITY:
fix a buffer overflow; bump PKGNAME;
When zip performs recursive folder compression, it does not check
for the length of resulting path. If the path is too long, a buffer overflow
occurs leading to stack corruption and segmentation fault;
CAN-2004-1010

ok brad@@
@
text
@@


1.1.2.1
log
@SECURITY:
fix a buffer overflow; bump PKGNAME;
When zip performs recursive folder compression, it does not check
for the length of resulting path. If the path is too long, a buffer overflow
occurs leading to stack corruption and segmentation fault;
CAN-2004-1010

ok brad@@
@
text
@@

