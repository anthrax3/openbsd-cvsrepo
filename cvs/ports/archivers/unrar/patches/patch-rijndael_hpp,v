head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.09.08.18.54.30;	author naddy;	state Exp;
branches;
next	1.2;
commitid	C44zr3BzpchHfAvL;

1.2
date	2013.09.06.13.28.16;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.08.16.36.12;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to 5.1.6; specifically tested on sparc64
@
text
@$OpenBSD: patch-rijndael_hpp,v 1.2 2013/09/06 13:28:16 naddy Exp $
--- rijndael.hpp.orig	Tue Jun 10 19:14:06 2014
+++ rijndael.hpp	Tue Sep  2 22:56:41 2014
@@@@ -16,6 +16,9 @@@@
 class Rijndael
 { 
   private:
+#ifdef OPENSSL_AES
+    EVP_CIPHER_CTX ctx;
+#else    
 #ifdef USE_SSE
     void blockEncryptSSE(const byte *input,size_t numBlocks,byte *outBuffer);
     void blockDecryptSSE(const byte *input, size_t numBlocks, byte *outBuffer);
@@@@ -25,6 +28,7 @@@@ class Rijndael
     void keySched(byte key[_MAX_KEY_COLUMNS][4]);
     void keyEncToDec();
     void GenerateTables();
+#endif
 
     // RAR always uses CBC, but we may need to turn it off when calling
     // this code from other archive formats with CTR and other modes.
@


1.2
log
@Update to 5.00 and take maintainer.
Multithreading is enabled but doesn't appear to be functional.
@
text
@d1 4
a4 4
$OpenBSD: patch-rijndael_hpp,v 1.1 2012/04/08 16:36:12 naddy Exp $
--- rijndael.hpp.orig	Fri Aug  2 15:30:12 2013
+++ rijndael.hpp	Thu Aug 29 22:58:10 2013
@@@@ -16,15 +16,21 @@@@
d8 7
a14 1
+#ifndef OPENSSL_AES
a16 2
     void encrypt(const byte a[16], byte b[16]);
     void decrypt(const byte a[16], byte b[16]);
d20 2
a21 10
+#ifdef OPENSSL_AES
+    EVP_CIPHER_CTX ctx;
+#else
     int      m_uRounds;
     byte     m_initVector[MAX_IV_SIZE];
     byte     m_expandedKey[_MAX_ROUNDS+1][4][4];
+#endif
   public:
     Rijndael();
     void Init(bool Encrypt,const byte *key,uint keyLen,const byte *initVector);
@


1.1
log
@Use OpenSSL instead of the included AES code to speed up extraction
of encrypted archives.
@
text
@d1 6
a6 6
$OpenBSD$
--- rijndael.hpp.orig	Wed Mar  2 08:43:13 2011
+++ rijndael.hpp	Fri Apr  6 00:32:04 2012
@@@@ -18,15 +18,21 @@@@ class Rijndael
   public:
     enum Direction { Encrypt , Decrypt };
d8 1
a8 1
+#ifndef OPENSSL
d16 1
a16 1
+#ifdef OPENSSL
d19 1
a19 1
     Direction m_direction;
d25 1
a25 1
     void init(Direction dir,const byte *key,byte *initVector);
@

