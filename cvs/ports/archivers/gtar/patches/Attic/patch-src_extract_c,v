head	1.6;
access;
symbols
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_3_9:1.3.0.4
	OPENBSD_4_0:1.3.0.2
	OPENBSD_3_5:1.1.0.10
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.8
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.4
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2010.10.28.13.50.30;	author naddy;	state dead;
branches;
next	1.5;

1.5
date	2010.06.12.15.17.11;	author naddy;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.14.20.29.00;	author naddy;	state dead;
branches;
next	1.3;

1.3
date	2006.11.30.20.37.30;	author naddy;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2004.04.22.02.56.10;	author naddy;	state dead;
branches;
next	1.1;

1.1
date	2002.10.01.02.03.52;	author brad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.10.03.02.50.45;	author brad;	state Exp;
branches;
next	;

1.3.2.1
date	2006.11.30.21.14.19;	author sturm;	state Exp;
branches;
next	;

1.3.4.1
date	2006.11.30.22.05.07;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update to 1.24: various bug fixes, no major changes
@
text
@$OpenBSD: patch-src_extract_c,v 1.5 2010/06/12 15:17:11 naddy Exp $
http://git.savannah.gnu.org/cgit/tar.git/commit/?id=b60e56fdb6fd8d82a1f92a4fa7781d9a3184dce1
--- src/extract.c.orig	Tue Jan 26 12:28:09 2010
+++ src/extract.c	Fri Jun 11 22:03:37 2010
@@@@ -888,12 +888,22 @@@@ create_placeholder_file (char *file_name, bool is_syml
   struct stat st;
 
   while ((fd = open (file_name, O_WRONLY | O_CREAT | O_EXCL, 0)) < 0)
-    if (! maybe_recoverable (file_name, interdir_made))
-      break;
+    {
+      switch (maybe_recoverable (file_name, interdir_made))
+	{
+	case RECOVER_OK:
+	  continue;
+	  
+	case RECOVER_SKIP:
+	  return 0;
+	  
+	case RECOVER_NO:
+	  open_error (file_name);
+	  return -1;
+	}
+      }
 
-  if (fd < 0)
-    open_error (file_name);
-  else if (fstat (fd, &st) != 0)
+  if (fstat (fd, &st) != 0)
     {
       stat_error (file_name);
       close (fd);
@@@@ -956,7 +966,8 @@@@ extract_link (char *file_name, int typeflag)
 {
   int interdir_made = 0;
   char const *link_name;
-
+  int rc;
+  
   link_name = current_stat_info.link_name;
   
   if (! absolute_names_option && contains_dot_dot (link_name))
@@@@ -996,8 +1007,10 @@@@ extract_link (char *file_name, int typeflag)
 
       errno = e;
     }
-  while (maybe_recoverable (file_name, &interdir_made));
+  while ((rc = maybe_recoverable (file_name, &interdir_made)) == RECOVER_OK);
 
+  if (rc == RECOVER_SKIP)
+    return 0;
   if (!(incremental_option && errno == EEXIST))
     {
       link_error (link_name, file_name);
@@@@ -1010,7 +1023,6 @@@@ static int
 extract_symlink (char *file_name, int typeflag)
 {
 #ifdef HAVE_SYMLINK
-  int status;
   int interdir_made = 0;
 
   if (! absolute_names_option
@@@@ -1018,16 +1030,23 @@@@ extract_symlink (char *file_name, int typeflag)
 	  || contains_dot_dot (current_stat_info.link_name)))
     return create_placeholder_file (file_name, true, &interdir_made);
 
-  while ((status = symlink (current_stat_info.link_name, file_name)))
-    if (!maybe_recoverable (file_name, &interdir_made))
-      break;
+  while (symlink (current_stat_info.link_name, file_name))
+    switch (maybe_recoverable (file_name, &interdir_made))
+      {
+      case RECOVER_OK:
+	continue;
+	
+      case RECOVER_SKIP:
+	return 0;
+	
+      case RECOVER_NO:
+	symlink_error (current_stat_info.link_name, file_name);
+	return -1;
+      }
+  
+  set_stat (file_name, &current_stat_info, NULL, 0, 0, SYMTYPE);
+  return 0;
 
-  if (status == 0)
-    set_stat (file_name, &current_stat_info, NULL, 0, 0, SYMTYPE);
-  else
-    symlink_error (current_stat_info.link_name, file_name);
-  return status;
-
 #else
   static int warned_once;
 
@@@@ -1052,16 +1071,23 @@@@ extract_node (char *file_name, int typeflag)
   mode_t invert_permissions =
     0 < same_owner_option ? mode & (S_IRWXG | S_IRWXO) : 0;
 
-  do
-    status = mknod (file_name, mode ^ invert_permissions,
-		    current_stat_info.stat.st_rdev);
-  while (status && maybe_recoverable (file_name, &interdir_made));
+  while (mknod (file_name, mode ^ invert_permissions,
+		current_stat_info.stat.st_rdev))
+    switch (maybe_recoverable (file_name, &interdir_made))
+      {
+      case RECOVER_OK:
+	continue;
+	
+      case RECOVER_SKIP:
+	return 0;
+	
+      case RECOVER_NO:
+	mknod_error (file_name);
+	return -1;
+      }
 
-  if (status != 0)
-    mknod_error (file_name);
-  else
-    set_stat (file_name, &current_stat_info, NULL, invert_permissions,
-	      ARCHIVED_PERMSTATUS, typeflag);
+  set_stat (file_name, &current_stat_info, NULL, invert_permissions,
+	    ARCHIVED_PERMSTATUS, typeflag);
   return status;
 }
 #endif
@@@@ -1077,15 +1103,22 @@@@ extract_fifo (char *file_name, int typeflag)
     0 < same_owner_option ? mode & (S_IRWXG | S_IRWXO) : 0;
 
   while ((status = mkfifo (file_name, mode)) != 0)
-    if (!maybe_recoverable (file_name, &interdir_made))
-      break;
+    switch (maybe_recoverable (file_name, &interdir_made))
+      {
+      case RECOVER_OK:
+	continue;
+	
+      case RECOVER_SKIP:
+	return 0;
+	
+      case RECOVER_NO:
+	mkfifo_error (file_name);
+	return -1;
+      }
 
-  if (status == 0)
-    set_stat (file_name, &current_stat_info, NULL, invert_permissions,
-	      ARCHIVED_PERMSTATUS, typeflag);
-  else
-    mkfifo_error (file_name);
-  return status;
+  set_stat (file_name, &current_stat_info, NULL, invert_permissions,
+	    ARCHIVED_PERMSTATUS, typeflag);
+  return 0;
 }
 #endif
 
@


1.5
log
@Fix dead loop on extracting existing symlinks with the -k option.
From upstream.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to 1.16.1.  User-visible changes:
* New option --exclude-tag allows to specify "exclusion tag files".
* The --exclude-cache option now excludes the directories themselves, too.
* Support for reading ustar type 'N' logical records has been removed.
* Race conditions around 'tar -x --same-owner' have been fixed.
@
text
@d1 6
a6 6
$OpenBSD: patch-src_extract_c,v 1.3 2006/11/30 20:37:30 naddy Exp $
--- src/extract.c.orig	Thu Nov 30 16:56:55 2006
+++ src/extract.c	Thu Nov 30 16:57:55 2006
@@@@ -1121,10 +1121,6 @@@@ prepare_to_extract (char const *file_nam
       *fun = extract_volhdr;
       break;
d8 2
a9 2
-    case GNUTYPE_NAMES:
-      *fun = extract_mangle_wrapper;
d11 81
d93 67
a159 3
     case GNUTYPE_MULTIVOL:
       ERROR ((0, 0,
 	      _("%s: Cannot extract -- file is continued from another volume"),
@


1.3
log
@SECURITY:
GNU tar allows user-assisted attackers to overwrite arbitrary files
via a tar file that contains a GNUTYPE_NAMES record with a symbolic
link. (CVE-2006-6097)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3.4.1
log
@MFC:
SECURITY:
GNU tar allows user-assisted attackers to overwrite arbitrary files
via a tar file that contains a GNUTYPE_NAMES record with a symbolic
link. (CVE-2006-6097)
@
text
@d2 4
a5 4
--- src/extract.c.orig	Thu Nov 30 22:59:30 2006
+++ src/extract.c	Thu Nov 30 23:00:03 2006
@@@@ -1100,10 +1100,6 @@@@ extract_archive (void)
 	fprintf (stdlis, _("Reading %s\n"), quote (current_stat_info.file_name));
d9 1
a9 1
-      extract_mangle ();
@


1.3.2.1
log
@MFC:
SECURITY:
GNU tar allows user-assisted attackers to overwrite arbitrary files
via a tar file that contains a GNUTYPE_NAMES record with a symbolic
link. (CVE-2006-6097)
@
text
@d2 4
a5 4
--- src/extract.c.orig	Thu Nov 30 22:06:50 2006
+++ src/extract.c	Thu Nov 30 22:09:16 2006
@@@@ -1100,10 +1100,6 @@@@ extract_archive (void)
 	fprintf (stdlis, _("Reading %s\n"), quote (current_stat_info.file_name));
d9 1
a9 1
-      extract_mangle ();
@


1.2
log
@Update to 1.13.94:
- Added support for POSIX.1-2001 and ustar archive formats.
- Various option cleanups.
- New message translations.
- Bug fixes.

Switch to .bz2 distfile since we already depend on bzip2 anyway.
@
text
@d1 6
a6 16
$OpenBSD: patch-src_extract_c,v 1.1 2002/10/01 02:03:52 brad Exp $
--- src/extract.c.orig	Mon Sep 24 14:55:17 2001
+++ src/extract.c	Mon Sep 30 21:39:17 2002
@@@@ -1019,10 +1019,19 @@@@ extract_archive (void)
       {
 	struct stat st1, st2;
 	int e;
+	size_t skiplinkcrud;
+
+	if (absolute_names_option)
+	  skiplinkcrud = 0;
+	else {
+	  skiplinkcrud = FILESYSTEM_PREFIX_LEN (current_link_name);
+	  while (ISSLASH (current_link_name[skiplinkcrud]))
+	    skiplinkcrud++;
+	}
d8 7
a14 7
 	/* MSDOS does not implement links.  However, djgpp's link() actually
 	   copies the file.  */
-	status = link (current_link_name, CURRENT_FILE_NAME);
+	status = link (current_link_name + skiplinkcrud, CURRENT_FILE_NAME);
 
 	if (status == 0)
 	  {
@


1.1
log
@Fix a directory traversal vulnerability in GNU tar 1.13.25 which allows
attackers to overwrite arbitrary files durring extraction via a ".."
in an extracted filename.

http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2002-0399
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@Fix a directory traversal vulnerability in GNU tar 1.13.25 which allows
attackers to overwrite arbitrary files durring extraction via a ".."
in an extracted filename.

http://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2002-0399
@
text
@d1 1
a1 1
$OpenBSD: patch-src_extract_c,v 1.1 2002/10/01 02:03:52 brad Exp $
@

