head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.07.02.18.38.24;	author jca;	state Exp;
branches;
next	1.2;
commitid	9Po8uWEEpRCZSUQU;

1.2
date	2016.04.10.19.53.09;	author naddy;	state Exp;
branches;
next	1.1;
commitid	iapjxAfShqoMiIMH;

1.1
date	2015.11.16.22.52.08;	author jca;	state Exp;
branches;
next	;
commitid	pORj1WEtS3ex4XoG;


desc
@@


1.3
log
@Detect endianness thru endian.h

Fixes build on at least mips64el, and might fix a problem on powerpc.
From Donovan Watteau, ok Josh Grosse (maintainer) bcallah@@
@
text
@$OpenBSD: patch-C_CpuArch_h,v 1.2 2016/04/10 19:53:09 naddy Exp $

Use <endian.h> to determine endianness, instead of a complex and 
incorrect list of architectures.

Index: C/CpuArch.h
--- C/CpuArch.h.orig
+++ C/CpuArch.h
@@@@ -5,6 +5,7 @@@@
 #define __CPU_ARCH_H
 
 #include "7zTypes.h"
+#include <endian.h>
 
 EXTERN_C_BEGIN
 
@@@@ -56,33 +57,9 @@@@ MY_CPU_LE_UNALIGN means that CPU is LITTLE ENDIAN and 
 #define MY_CPU_IA64_LE
 #endif
 
-#if defined(MY_CPU_X86_OR_AMD64) \
-    || defined(MY_CPU_ARM_LE) \
-    || defined(MY_CPU_IA64_LE) \
-    || defined(__LITTLE_ENDIAN__) \
-    || defined(__ARMEL__) \
-    || defined(__THUMBEL__) \
-    || defined(__AARCH64EL__) \
-    || defined(__MIPSEL__) \
-    || defined(__MIPSEL) \
-    || defined(_MIPSEL) \
-    || (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
+#if BYTE_ORDER == LITTLE_ENDIAN
   #define MY_CPU_LE
-#endif
-
-#if defined(__BIG_ENDIAN__) \
-    || defined(__ARMEB__) \
-    || defined(__THUMBEB__) \
-    || defined(__AARCH64EB__) \
-    || defined(__MIPSEB__) \
-    || defined(__MIPSEB) \
-    || defined(_MIPSEB) \
-    || defined(__m68k__) \
-    || defined(__s390__) \
-    || defined(__s390x__) \
-    || defined(__zarch__) \
-    || defined(__sparc) \
-    || (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__))
+#elif BYTE_ORDER == BIG_ENDIAN
   #define MY_CPU_BE
 #endif
 
@


1.2
log
@Update: 15.09 -> 15.14.1

While here removes some trailing whitespace in pkg/DESCR-main noted
by portcheck(1).

From maintainer Josh Grosse.
@
text
@d1 1
a1 1
$OpenBSD: patch-C_CpuArch_h,v 1.1 2015/11/16 22:52:08 jca Exp $
d3 2
a4 1
Add support for more OpenBSD architectures.
d6 27
a32 9
--- C/CpuArch.h.orig	Wed Feb 17 01:27:16 2016
+++ C/CpuArch.h	Sun Apr  3 19:05:55 2016
@@@@ -66,6 +66,8 @@@@ MY_CPU_LE_UNALIGN means that CPU is LITTLE ENDIAN and 
     || defined(__MIPSEL__) \
     || defined(__MIPSEL) \
     || defined(_MIPSEL) \
+    || defined(__alpha__) \
+    || defined(__sh__) \
     || (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
d34 16
a49 9
 #endif
@@@@ -82,6 +84,9 @@@@ MY_CPU_LE_UNALIGN means that CPU is LITTLE ENDIAN and 
     || defined(__s390x__) \
     || defined(__zarch__) \
     || defined(__sparc) \
+    || defined(__sparc__) \
+    || defined(__hppa__) \
+    || defined(__mips64__) \
     || (defined(__BYTE_ORDER__) && (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__))
d52 1
@


1.1
log
@Expand ifdefs to build on most if not all OpenBSD architectures.

The solution isn't very nice but is the least intrusive right now; and
you can only find portability bugs in programs that do build.  As
suggested by naddy@@, something based on endian.h would probably be
nicer.

ok sthen@@, Josh Grosse (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 4
--- C/CpuArch.h.orig	Sun Sep 27 21:31:20 2015
+++ C/CpuArch.h	Thu Nov 12 00:28:15 2015
@@@@ -65,7 +65,10 @@@@ If MY_CPU_LE_UNALIGN is not defined, we don't know abo
     || defined(__AARCH64EL__) \
d10 1
a10 2
-    || defined(_MIPSEL)
+    || defined(_MIPSEL) \
d13 1
a13 1
+    || defined(__vax__)
d16 5
a20 8
 
@@@@ -77,7 +80,11 @@@@ If MY_CPU_LE_UNALIGN is not defined, we don't know abo
     || defined(__MIPSEB) \
     || defined(_MIPSEB) \
     || defined(__m68k__) \
-    || defined(__s390x__)
+    || defined(__m88k__) \
+    || defined(__s390x__) \
d23 1
a23 1
+    || defined(__sparc__)
a25 1
 
@

