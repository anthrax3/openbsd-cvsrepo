head	1.7;
access;
symbols
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	wilfried_20010402:1.1.1.1
	wilfried:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2005.10.07.13.24.53;	author wilfried;	state dead;
branches;
next	1.6;

1.6
date	2005.09.08.01.51.00;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.06.11.16.53;	author wilfried;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.30.05.05.16;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.10.20.07.02;	author wilfried;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.05.12.30.07;	author wilfried;	state dead;
branches;
next	1.1;

1.1
date	2001.04.02.15.13.05;	author wilfried;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.04.02.15.13.05;	author wilfried;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to 2.0.6
@
text
@$OpenBSD: patch-sqlplusint_connection_cc,v 1.6 2005/09/08 01:51:00 pvalchev Exp $
--- sqlplusint/connection.cc.orig	Sat May 19 10:44:48 2001
+++ sqlplusint/connection.cc	Wed Sep  7 18:46:47 2005
@@@@ -2,6 +2,8 @@@@
 #include "connection3.hh"
 #include "result3.hh"
 
+using namespace std;
+
 Connection::Connection (const char *db, const char *host, const char *user, 
 			const char *passwd, bool te) 
   : throw_exceptions(te), locked(false)
@@@@ -10,38 +12,38 @@@@ Connection::Connection (const char *db, 
   if (real_connect (db, host, user, passwd,3306,0,60,NULL,0))
 	{
     locked = false;
-    Success = is_connected = true;
+    Success_ = is_connected = true;
   }
   else
   {
-    locked = false; Success = is_connected = false;
+    locked = false; Success_ = is_connected = false;
     if (throw_exceptions) throw BadQuery(error());
   }
 }
 
 Connection::Connection (const char *db, const char *host, const char *user, 
-			const char *passwd, uint port, my_bool compress = 0,
-			unsigned int connect_timeout = 60, bool te = true,
-			const char *socket_name = "", unsigned client_flag = 0)
+			const char *passwd, uint port, my_bool compress,
+			unsigned int connect_timeout, bool te,
+			const char *socket_name, unsigned client_flag)
   : throw_exceptions(te), locked(false)
 {
 	mysql_init(&mysql);
   if (real_connect (db, host, user, passwd, port, compress,		connect_timeout,socket_name, client_flag))
   {
     locked = false;
-    Success = is_connected = true;
+    Success_ = is_connected = true;
   }
   else
   {
-    locked = false; Success = is_connected = false;
+    locked = false; Success_ = is_connected = false;
     if (throw_exceptions) throw BadQuery(error());
   }
 }
 
 bool Connection::real_connect (cchar *db, cchar *host, cchar *user,
-			       cchar *passwd, uint port, my_bool compress = 0,
-			       unsigned int connect_timeout = 60,
-			       const char *socket_name = "", unsigned int client_flag = 0)
+			       cchar *passwd, uint port, my_bool compress,
+			       unsigned int connect_timeout,
+			       const char *socket_name, unsigned int client_flag)
 {
   mysql.options.compress = compress;
   mysql.options.connect_timeout=connect_timeout;
@@@@ -52,18 +54,18 @@@@ bool Connection::real_connect (cchar *db
 	if (mysql_real_connect(&mysql,host,user,passwd,db, port,socket_name,client_flag))
   {
     locked = false;
-    Success = is_connected = true;
+    Success_ = is_connected = true;
   }
   else
   {
-    locked = false; Success = is_connected = false;
+    locked = false; Success_ = is_connected = false;
     if (throw_exceptions) throw BadQuery(error());
   }
 	//	mysql.options.my_cnf_file=0;
-  if (!Success) return Success;
+  if (!Success_) return Success_;
   if (db && db[0]) // if db is not empty
-    Success = select_db(db);
-  return Success;
+    Success_ = select_db(db);
+  return Success_;
 }
 
 Connection::~Connection () {
@@@@ -83,7 +85,11 @@@@ bool Connection::reload() {
 }
 
 bool Connection::shutdown () {
+#if (MYSQL_VERSION_ID >= 40103 && MYSQL_VERSION_ID != 50000)
+  bool suc = !(mysql_shutdown(&mysql, SHUTDOWN_DEFAULT));
+#else
   bool suc = !(mysql_shutdown(&mysql));
+#endif
   if (throw_exceptions && !suc) throw MysqlBadQuery(error());
   else return suc;
 }  
@@@@ -95,21 +101,21 @@@@ bool Connection::connect (cchar *db, cch
 
 	if (mysql_real_connect(&mysql,host,user,passwd,db, 3306,NULL,0)) {
     locked = false;
-    Success = is_connected = true;
+    Success_ = is_connected = true;
   } else {
     locked = false;
     if (throw_exceptions) throw BadQuery(error());
-    Success = is_connected = false;
+    Success_ = is_connected = false;
   }
 	//	mysql.options.my_cnf_file=0;
-  if (!Success) return Success;
+  if (!Success_) return Success_;
   if (db && db[0]) // if db is not empty
-    Success = select_db(db);
-  return Success;
+    Success_ = select_db(db);
+  return Success_;
 }
 
 string Connection::info () {
-  char *i = mysql_info(&mysql);
+  const char *i = mysql_info(&mysql);
   if (!i)
     return string();
   else
@@@@ -117,44 +123,44 @@@@ string Connection::info () {
 }
 
 ResNSel Connection::execute(const string &str, bool throw_excptns) {
-  Success = false;
+  Success_ = false;
   if (lock()) 
     if (throw_excptns) throw BadQuery(error());
     else return ResNSel();
-  Success = !mysql_query(&mysql, str.c_str()); 
+  Success_ = !mysql_query(&mysql, str.c_str()); 
   unlock();
-  if (!Success) 
+  if (!Success_) 
     if (throw_excptns) throw BadQuery(error());
     else return ResNSel();
   return ResNSel(this);
 }
 
 bool Connection::exec(const string &str) {
-	Success = !mysql_query(&mysql,str.c_str());
-	if (!Success && throw_exceptions) throw BadQuery(error());
-	return Success;
+	Success_ = !mysql_query(&mysql,str.c_str());
+	if (!Success_ && throw_exceptions) throw BadQuery(error());
+	return Success_;
 }
 
 Result Connection::store(const string &str, bool throw_excptns) {
-  Success = false;
+  Success_ = false;
   if (lock()) 
     if (throw_excptns) throw BadQuery(error());
     else return Result();
-  Success = !mysql_query(&mysql, str.c_str()); 
+  Success_ = !mysql_query(&mysql, str.c_str()); 
   unlock();
-  if (!Success) 
+  if (!Success_) 
     if (throw_excptns) throw BadQuery(error());
     else return Result();
   return Result(mysql_store_result(&mysql));
 }
   
 ResUse Connection::use(const string &str, bool throw_excptns) {
-  Success = false;
+  Success_ = false;
   if (lock()) 
     if (throw_excptns) throw BadQuery(error());
     else return ResUse();
-  Success = !mysql_query(&mysql, str.c_str()); 
-  if (!Success) 
+  Success_ = !mysql_query(&mysql, str.c_str()); 
+  if (!Success_) 
     if (throw_excptns) throw BadQuery(error());
     else return ResUse();
   return ResUse(mysql_use_result(&mysql), this);
@


1.6
log
@fix another port broken by the mysql update that brad should've caught
@
text
@d1 1
a1 1
$OpenBSD: patch-sqlplusint_connection_cc,v 1.5 2004/01/06 11:16:53 wilfried Exp $
@


1.5
log
@a few gcc3 patches
also move the header files to ${LOCALBASE}/include/mysql++
@
text
@d1 3
a3 3
$OpenBSD: patch-sqlplusint_connection_cc,v 1.4 2003/12/30 05:05:16 brad Exp $
--- sqlplusint/connection.cc.orig	2001-05-19 18:44:48.000000000 +0200
+++ sqlplusint/connection.cc	2004-01-05 00:03:21.000000000 +0100
d86 13
a98 1
@@@@ -95,21 +97,21 @@@@ bool Connection::connect (cchar *db, cch
d126 1
a126 1
@@@@ -117,44 +119,44 @@@@ string Connection::info () {
@


1.4
log
@allow this to compile with MySQL 4.x and up
@
text
@d1 13
a13 4
$OpenBSD: patch-sqlplusint_connection_cc,v 1.3 2002/08/10 20:07:02 wilfried Exp $
--- sqlplusint/connection.cc.orig	2001-05-19 12:44:48.000000000 -0400
+++ sqlplusint/connection.cc	2003-12-29 23:51:20.000000000 -0500
@@@@ -10,11 +10,11 @@@@ Connection::Connection (const char *db, 
d27 11
a37 1
@@@@ -29,11 +29,11 @@@@ Connection::Connection (const char *db, 
d51 12
a62 1
@@@@ -52,18 +52,18 @@@@ bool Connection::real_connect (cchar *db
d86 1
a86 1
@@@@ -95,21 +95,21 @@@@ bool Connection::connect (cchar *db, cch
d114 1
a114 1
@@@@ -117,44 +117,44 @@@@ string Connection::info () {
@


1.3
log
@fix X11 define/typedef clashes as used in mysqlgui with new fltk
@
text
@d1 3
a3 3
$OpenBSD$
--- sqlplusint/connection.cc.orig	Sat May 19 18:44:48 2001
+++ sqlplusint/connection.cc	Fri Aug  9 16:10:03 2002
d56 1
a56 1
@@@@ -95,17 +95,17 @@@@ bool Connection::connect (cchar *db, cch
d79 5
@


1.2
log
@upgrade to 1.7.9
- Fixed a serious bug in Connection constructor when reading MySQL options
- Improved copy constructor and some other methods in Result / ResUse
- Many other minor improvements
- Produced a complete manual with chapter 5 included
- Updated documentation, including a Postscript format

add a -docs sub-package
@
text
@d1 32
a32 12
$OpenBSD: patch-sqlplusint_connection_cc,v 1.1 2001/04/02 15:13:05 wilfried Exp $
--- sqlplusint/connection.cc.orig	Tue Nov 14 13:17:19 2000
+++ sqlplusint/connection.cc	Mon Feb 12 19:17:09 2001
@@@@ -45,7 +45,10 @@@@ bool Connection::real_connect (cchar *db
 {
   mysql.options.compress = compress;
   mysql.options.connect_timeout=connect_timeout;
-  locked = true; mysql.options.my_cnf_file="my";
+  locked = true; //mysql.options.my_cnf_file="my";
+
+	mysql_options(&mysql, MYSQL_READ_DEFAULT_FILE, "my");
+
d36 7
a42 2
@@@@ -56,7 +59,7 @@@@ bool Connection::real_connect (cchar *db
     locked = false; Success = is_connected = false;
d45 3
a47 3
-	mysql.options.my_cnf_file=0;
+	//	mysql.options.my_cnf_file=0;
   if (!Success) return Success;
d49 9
a57 10
     Success = select_db(db);
@@@@ -86,7 +89,10 @@@@ bool Connection::shutdown () {
 }  
 
 bool Connection::connect (cchar *db, cchar *host, cchar *user, cchar *passwd) {
-  locked = true; mysql.options.my_cnf_file="my";
+  locked = true; // mysql.options.my_cnf_file="my";
+
+	mysql_options(&mysql, MYSQL_READ_DEFAULT_FILE, "my");
+
d60 4
a63 2
     Success = is_connected = true;
@@@@ -95,7 +101,7 @@@@ bool Connection::connect (cchar *db, cch
d65 2
a66 1
     Success = is_connected = false;
d68 3
a70 3
-	mysql.options.my_cnf_file=0;
+	//	mysql.options.my_cnf_file=0;
   if (!Success) return Success;
d72 64
a135 1
     Success = select_db(db);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: $
@


1.1.1.1
log
@Import of mysql++-1.7.8

MySQL++ is a C++ API for MySQL (and other SQL Databases Soon).  The
goal of this API is to make working with queries as easy as working
with other STL Containers.
@
text
@@
