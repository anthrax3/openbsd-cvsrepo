head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.44
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.42
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.38
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.40
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.36
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.34
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.32
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.30
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.28
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.26
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.24
	OPENBSD_5_0:1.2.0.22
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.20
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.18
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.14
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@; @;


1.2
date	2006.05.28.15.44.14;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.21.18.53.12;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to cil-1.3.5, lots of nice fixes to parsing gcc/msvc code
@
text
@(* $OpenBSD: nullint.ml,v 1.1 2004/06/21 18:53:12 avsm Exp $ *)
(* check for NULL/int comparisons - it does false positive at the moment *)

open Pretty
open Cil
module E = Errormsg

let checkNullInt exp other =
   let ty = (typeOf exp) in
   if isZero exp && longType = ty then
     match other with
      | CastE (TInt(longType, _), _) ->
        ignore (E.log "%t: Should not compare %a with NULL\n"
                d_thisloc d_exp other)
      | _ -> ignore ()

class grepNullInt = object
  inherit nopCilVisitor

  method vexpr (i: exp) : exp visitAction = 
    match i with 
      | BinOp(Gt, le, re, _)
      | BinOp(Lt, le, re, _)
      | BinOp(Le, le, re, _)
      | BinOp(Ge, le, re, _)
      | BinOp(Eq, le, re, _) ->
          checkNullInt le re;
          checkNullInt re le;
          SkipChildren
      | _ -> SkipChildren
end

let feature : featureDescr = 
  { fd_name = "nullint";
    fd_enabled = ref false;
    fd_description = "check for NULL and int comparisons";
    fd_extraopt = [];
    fd_doit = 
    (function (f: file) -> 
      let lwVisitor = new grepNullInt in
      visitCilFileSameGlobals lwVisitor f);
    fd_post_check = true;
  } 
@


1.1
log
@add a simple NULL/int comparison checker to CIL
@
text
@d1 1
a1 1
(* $OpenBSD$ *)
d27 3
a29 5
	  let tyle = (typeOf le) in
	  let tyre = (typeOf re) in
	    checkNullInt le re;
	    checkNullInt re le;
	    SkipChildren
d35 1
a35 1
    fd_enabled = Cilutil.nullInt;
@

