head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.1.0.14
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.12
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.10
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.8
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.4
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	dcoppa_20110708:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.09.04.12.32.45;	author dcoppa;	state dead;
branches;
next	1.1;
commitid	JuD8ix9UetPnkXWF;

1.1
date	2011.07.08.08.58.02;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.07.08.08.58.02;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
Update to protobuf-c 1.0.1
@
text
@$OpenBSD: patch-src_google_protobuf-c_protobuf-c_c,v 1.1 2011/07/08 08:58:02 dcoppa Exp $

malloc.h is obsolete

Be more permissive in accepting packed data for non-packed repeated
members (upstream svn revision r285)

--- src/google/protobuf-c/protobuf-c.c.orig	Thu Mar 10 20:02:48 2011
+++ src/google/protobuf-c/protobuf-c.c	Thu Jul  7 17:14:06 2011
@@@@ -38,11 +38,6 @@@@
 #include <stdio.h>                      /* for occasional printf()s */
 #include <stdlib.h>                     /* for abort(), malloc() etc */
 #include <string.h>                     /* for strlen(), memcpy(), memmove() */
-#if HAVE_ALLOCA_H
-#include <alloca.h>
-#elif HAVE_MALLOC_H
-#include <malloc.h>
-#endif
 
 #ifndef PRINT_UNPACK_ERRORS
 #define PRINT_UNPACK_ERRORS              1
@@@@ -1983,6 +1978,14 @@@@ no_unpacking_needed:
 }
 
 static protobuf_c_boolean
+is_packable_type (ProtobufCType type)
+{
+  return type != PROTOBUF_C_TYPE_STRING
+     &&  type != PROTOBUF_C_TYPE_BYTES
+     &&  type != PROTOBUF_C_TYPE_MESSAGE;
+}
+
+static protobuf_c_boolean
 parse_member (ScannedMember *scanned_member,
               ProtobufCMessage *message,
               ProtobufCAllocator *allocator)
@@@@ -2007,8 +2010,8 @@@@ parse_member (ScannedMember *scanned_member,
     case PROTOBUF_C_LABEL_OPTIONAL:
       return parse_optional_member (scanned_member, member, message, allocator);
     case PROTOBUF_C_LABEL_REPEATED:
-      if (field->packed
-       && scanned_member->wire_type == PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED)
+      if (scanned_member->wire_type == PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED
+       && (field->packed || is_packable_type (field->type)))
         return parse_packed_repeated_member (scanned_member, member, message);
       else
         return parse_repeated_member (scanned_member, member, message, allocator);
@@@@ -2261,8 +2264,8 @@@@ protobuf_c_message_unpack         (const ProtobufCMess
       if (field != NULL && field->label == PROTOBUF_C_LABEL_REPEATED)
         {
           size_t *n = STRUCT_MEMBER_PTR (size_t, rv, field->quantifier_offset);
-          if (field->packed
-           && wire_type == PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED)
+          if (wire_type == PROTOBUF_C_WIRE_TYPE_LENGTH_PREFIXED
+           && (field->packed || is_packable_type (field->type)))
             {
               size_t count;
               if (!count_packed_elements (field->type,
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import devel/protobuf-c, a C implementation of google protocol
buffers.

This is a new dependency of an upcoming update of audio/umurmur.

Tested by Jonathon Sisson, who also takes maintainership
OK ajacoutot@@

@
text
@@
