head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.4
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.2
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	jsg_20160429:1.1.1.1
	jsg:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2017.03.15.10.27.42;	author jsg;	state Exp;
branches;
next	1.7;
commitid	SL2zpMpFcB8WhJkk;

1.7
date	2017.01.13.00.20.00;	author jsg;	state Exp;
branches;
next	1.6;
commitid	Kx6F82VlbV3JUXbB;

1.6
date	2017.01.04.06.09.07;	author jsg;	state Exp;
branches;
next	1.5;
commitid	67AkdEkot2Y9tewN;

1.5
date	2016.11.20.09.59.56;	author jsg;	state Exp;
branches;
next	1.4;
commitid	FkRb9zkiuaUuec9i;

1.4
date	2016.11.03.07.39.03;	author jsg;	state Exp;
branches;
next	1.3;
commitid	NmTuYxa0bUWfD7cC;

1.3
date	2016.10.06.05.05.55;	author jsg;	state Exp;
branches;
next	1.2;
commitid	33yJu5x9dYrs6Qjl;

1.2
date	2016.06.27.12.39.46;	author jsg;	state Exp;
branches;
next	1.1;
commitid	Mt45T92RbiabUHUQ;

1.1
date	2016.04.29.11.43.12;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	pfNcP8sBCXDtscBy;

1.1.1.1
date	2016.04.29.11.43.12;	author jsg;	state Exp;
branches;
next	;
commitid	pfNcP8sBCXDtscBy;


desc
@@


1.8
log
@update to luacheck 0.19.1
@
text
@# $OpenBSD: Makefile,v 1.7 2017/01/13 00:20:00 jsg Exp $

COMMENT=	tool for linting and static analysis of Lua code
CATEGORIES=	devel

GH_ACCOUNT=	mpeterv
GH_PROJECT=	luacheck
GH_TAGNAME=	0.19.1

MAINTAINER=	Jonathan Gray <jsg@@openbsd.org>

BUILD_DEPENDS=	textproc/py-sphinx

# MIT
PERMIT_PACKAGE_CDROM=	Yes

NO_TEST=		Yes

MODULES=	lang/lua

pre-configure:
	sed -i 's,/usr/bin/env lua,${MODLUA_BIN},g' ${WRKSRC}/bin/luacheck.lua

do-build:
	${LOCALBASE}/bin/sphinx-build -N ${WRKSRC}/docsrc ${WRKSRC}/doc

do-install:
	${INSTALL_DATA_DIR} ${MODLUA_DATADIR}/luacheck
	${INSTALL_DATA} ${WRKSRC}/src/luacheck/*.lua ${MODLUA_DATADIR}/luacheck
	${INSTALL_SCRIPT} ${WRKSRC}/bin/luacheck.lua ${PREFIX}/bin/luacheck
	${INSTALL_DATA_DIR} ${PREFIX}/share/doc/luacheck
	cd ${WRKSRC}/doc && pax -rw * ${PREFIX}/share/doc/luacheck

.include <bsd.port.mk>
@


1.7
log
@update to luacheck 0.18.0
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2017/01/04 06:09:07 jsg Exp $
d8 1
a8 1
GH_TAGNAME=	0.18.0
@


1.6
log
@update to luacheck 0.17.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2016/11/20 09:59:56 jsg Exp $
d8 1
a8 1
GH_TAGNAME=	0.17.1
@


1.5
log
@update to luacheck 0.17.0
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2016/11/03 07:39:03 jsg Exp $
d8 1
a8 1
GH_TAGNAME=	0.17.0
@


1.4
log
@update to luacheck 0.16.3
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2016/10/06 05:05:55 jsg Exp $
a5 3
V=		0.16.3
DISTNAME=	luacheck-${V}

d8 1
a8 1
GH_TAGNAME=	${V}
@


1.3
log
@update to luacheck 0.16.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2016/06/27 12:39:46 jsg Exp $
d6 1
a6 1
V=		0.16.1
@


1.2
log
@update to luacheck 0.15.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2016/04/29 11:43:12 jsg Exp $
d6 1
a6 1
V=		0.15.1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d6 1
a6 1
V=		0.15.0
@


1.1.1.1
log
@import luacheck 0.15.0

Luacheck is a static analyzer and a linter for Lua. Luacheck detects
various issues such as usage of undefined global variables, unused
variables and values, accessing uninitialized variables, unreachable
code and more. Most aspects of checking are configurable: there are
options for defining custom project-related globals, for selecting set
of standard globals (version of Lua standard library), for filtering
warnings by type and name of related variable, etc. The options can be
used on the command line, put into a config or directly into checked
files as Lua comments.

Luacheck supports checking Lua files using syntax of Lua 5.1, Lua 5.2,
Lua 5.3 and LuaJIT 2.0. Luacheck itself is written in Lua and runs on
all of mentioned Lua versions.
@
text
@@
