head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	sthen_20110915:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.12.08.10.10.22;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.15.20.20.06;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.09.15.20.20.06;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to coccigrep 1.11
@
text
@$OpenBSD: patch-src_coccigrep_py,v 1.1.1.1 2011/09/15 20:20:06 sthen Exp $
--- src/coccigrep.py.orig	Mon Sep 10 15:50:20 2012
+++ src/coccigrep.py	Sat Dec  8 10:05:31 2012
@@@@ -79,7 +79,7 @@@@ class CocciRunException(CocciException):
 _CONF_FILES = tuple((path.join(dirname, name_format % 'coccigrep')
     for dirname, name_format in
     ((path.dirname(__file__), '%s.cfg'),
-    ('/etc', '%s'),
+    ('${SYSCONFDIR}', '%s'),
     (path.expanduser('~'), '.%s'),
     (getcwd(), '.%s'))))
 
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- src/coccigrep.py.orig	Sun Sep  4 22:34:12 2011
+++ src/coccigrep.py	Wed Sep  7 01:09:50 2011
@@@@ -77,7 +77,7 @@@@ class CocciRunException(CocciException):
@


1.1.1.1
log
@import ports/devel/coccigrep, ok jasper@@

coccigrep is a semantic grep for the C language based on coccinelle.
It can be used to find where a given structure is used in code files.
coccigrep depends on the spatch program which comes with coccinelle.

quick contrived example to find lines referencing m_len of a struct
mbuf, regardless of actual variable name:

$ coccigrep -t "struct mbuf" -a m_len /sys/netinet/ip_*.c
@
text
@@
