head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	cryptopp:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2015.11.23.13.19.40;	author dcoppa;	state dead;
branches;
next	1.4;
commitid	lkx07lop9gGuBBc8;

1.4
date	2013.03.14.11.16.02;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.29.12.46.30;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.24.07.55.18;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Update to cryptopp-5.6.3
@
text
@$OpenBSD: patch-misc_h,v 1.4 2013/03/14 11:16:02 dcoppa Exp $
--- misc.h.orig	Fri Aug  6 18:46:18 2010
+++ misc.h	Wed Feb 29 10:09:08 2012
@@@@ -141,7 +141,7 @@@@ const T & Singleton<T, F, instance>::Ref(CRYPTOPP_NOIN
 
 // ************** misc functions ***************
 
-#if (!__STDC_WANT_SECURE_LIB__ && !defined(_MEMORY_S_DEFINED))
+#if ((!defined(__STDC_WANT_SECURE_LIB__) || !__STDC_WANT_SECURE_LIB__) && !defined(_MEMORY_S_DEFINED))
 inline void memcpy_s(void *dest, size_t sizeInBytes, const void *src, size_t count)
 {
 	if (count > sizeInBytes)
@@@@ -156,7 +156,7 @@@@ inline void memmove_s(void *dest, size_t sizeInBytes, 
 	memmove(dest, src, count);
 }
 
-#if __BORLANDC__ >= 0x620
+#if defined(__BORLANDC__) && __BORLANDC__ >= 0x620
 // C++Builder 2010 workaround: can't use std::memcpy_s because it doesn't allow 0 lengths
 #define memcpy_s CryptoPP::memcpy_s
 #define memmove_s CryptoPP::memmove_s
@@@@ -367,7 +367,7 @@@@ inline unsigned int GetAlignmentOf(T *dummy=NULL)	// V
 		return 1;
 #endif
 
-#if (_MSC_VER >= 1300)
+#if defined(_MSC_VER) && (_MSC_VER >= 1300)
 	return __alignof(T);
 #elif defined(__GNUC__)
 	return __alignof__(T);
@@@@ -483,7 +483,7 @@@@ void SecureWipeBuffer(T *buf, size_t n)
 		*(--p) = 0;
 }
 
-#if (_MSC_VER >= 1400 || defined(__GNUC__)) && (CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86)
+#if (defined(_MSC_VER) && _MSC_VER >= 1400 || defined(__GNUC__)) && (CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86)
 
 template<> inline void SecureWipeBuffer(byte *buf, size_t n)
 {
@@@@ -651,7 +651,7 @@@@ template<> inline word32 rotrMod<word32>(word32 x, uns
 
 #endif // #ifdef _MSC_VER
 
-#if _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
+#if defined(_MSC_VER) && _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 calls a function instead of using the rotate instruction when using these instructions
 
 template<> inline word64 rotlFixed<word64>(word64 x, unsigned int y)
@@@@ -690,7 +690,7 @@@@ template<> inline word64 rotrMod<word64>(word64 x, uns
 
 #endif // #if _MSC_VER >= 1310
 
-#if _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
+#if defined(_MSC_VER) && _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 gives undefined externals with these
 
 template<> inline word16 rotlFixed<word16>(word16 x, unsigned int y)
@@@@ -837,7 +837,7 @@@@ inline word32 ByteReverse(word32 value)
 	return bswap_32(value);
 #elif defined(__MWERKS__) && TARGET_CPU_PPC
 	return (word32)__lwbrx(&value,0);
-#elif _MSC_VER >= 1400 || (_MSC_VER >= 1300 && !defined(_DLL))
+#elif (defined(_MSC_VER) && _MSC_VER >= 1400) || (defined (_MSC_VER) && _MSC_VER >= 1300 && !defined(_DLL))
 	return _byteswap_ulong(value);
 #elif CRYPTOPP_FAST_ROTATE(32)
 	// 5 instructions with rotate instruction, 9 without
@


1.4
log
@Update to cryptopp-5.6.2; lots of local patches go to the attic.
@
text
@d1 1
a1 1
$OpenBSD: patch-misc_h,v 1.3 2012/02/29 12:46:30 dcoppa Exp $
@


1.3
log
@
Fix warnings found by clang / gcc-4.6 (from upstream svn)
@
text
@d1 1
a1 1
$OpenBSD: patch-misc_h,v 1.2 2011/06/24 07:55:18 dcoppa Exp $
d8 2
a9 2
-#if (!__STDC_WANT_SECURE_LIB__)
+#if (!defined(__STDC_WANT_SECURE_LIB__) || !__STDC_WANT_SECURE_LIB__)
a39 16
@@@@ -580,13 +580,13 @@@@ CRYPTOPP_DLL void CRYPTOPP_API UnalignedDeallocate(voi
 template <class T> inline T rotlFixed(T x, unsigned int y)
 {
 	assert(y < sizeof(T)*8);
-	return T((x<<y) | (x>>(sizeof(T)*8-y)));
+	return y ? T((x<<y) | (x>>(sizeof(T)*8-y))) : x;
 }
 
 template <class T> inline T rotrFixed(T x, unsigned int y)
 {
 	assert(y < sizeof(T)*8);
-	return T((x>>y) | (x<<(sizeof(T)*8-y)));
+	return y ? T((x>>y) | (x<<(sizeof(T)*8-y))) : x;
 }
 
 template <class T> inline T rotlVariable(T x, unsigned int y)
@


1.2
log
@Update to cryptopp-5.6.1

'go for it' espie@@
@
text
@d1 1
a1 1
$OpenBSD: patch-misc_h,v 1.1.1.1 2008/08/26 14:57:58 espie Exp $
d3 1
a3 1
+++ misc.h	Sun Oct 24 12:21:50 2010
d40 16
@


1.1
log
@Initial revision
@
text
@d1 66
a66 39
$OpenBSD$
--- misc.h.orig	Wed Jun 18 13:42:22 2008
+++ misc.h	Fri Jun 20 13:36:34 2008
@@@@ -146,7 +146,7 @@@@ retry:
 
 // ************** misc functions ***************
 
-#if (!__STDC_WANT_SECURE_LIB__)
+#if (!defined(__STDC_WANT_SECURE_LIB__) || !__STDC_WANT_SECURE_LIB__)
 inline void memcpy_s(void *dest, size_t sizeInBytes, const void *src, size_t count)
 {
 	if (count > sizeInBytes)
@@@@ -322,7 +322,7 @@@@ inline unsigned int GetAlignmentOf(T *dummy=NULL)	// V
 		return 1;			// alignment not needed on x86 and x64
 #endif
 
-#if (_MSC_VER >= 1300)
+#if defined(_MSC_VER) && (_MSC_VER >= 1300)
 	return __alignof(T);
 #elif defined(__GNUC__)
 	return __alignof__(T);
@@@@ -487,7 +487,7 @@@@ template<> inline word32 rotrMod<word32>(word32 x, uns
 
 #endif // #ifdef _MSC_VER
 
-#if _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
+#if defined(_MSC_VER) && _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 calls a function instead of using the rotate instruction when using these instructions
 
 template<> inline word64 rotlFixed<word64>(word64 x, unsigned int y)
@@@@ -526,7 +526,7 @@@@ template<> inline word64 rotrMod<word64>(word64 x, uns
 
 #endif // #if _MSC_VER >= 1310
 
-#if _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
+#if defined(_MSC_VER) && _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 gives undefined externals with these
 
 template<> inline word16 rotlFixed<word16>(word16 x, unsigned int y)
@


1.1.1.1
log
@yet another crypto library, dependency for amule, when we get it to
work.
@
text
@@
