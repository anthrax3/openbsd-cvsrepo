head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	cryptopp:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2015.11.23.13.19.40;	author dcoppa;	state dead;
branches;
next	1.4;
commitid	lkx07lop9gGuBBc8;

1.4
date	2013.03.14.11.16.02;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.29.12.46.30;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.24.07.55.18;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@
Update to cryptopp-5.6.3
@
text
@$OpenBSD: patch-secblock_h,v 1.4 2013/03/14 11:16:02 dcoppa Exp $
--- secblock.h.orig	Fri Aug  6 18:46:20 2010
+++ secblock.h	Wed Feb 29 10:10:22 2012
@@@@ -120,7 +120,7 @@@@ class AllocatorWithCleanup : public AllocatorBase<T> (
 	// VS.NET STL enforces the policy of "All STL-compliant allocators have to provide a
 	// template class member called rebind".
     template <class U> struct rebind { typedef AllocatorWithCleanup<U, T_Align16> other; };
-#if _MSC_VER >= 1500
+#if defined(_MSC_VER) && _MSC_VER >= 1500
 	AllocatorWithCleanup() {}
 	template <class U, bool A> AllocatorWithCleanup(const AllocatorWithCleanup<U, A> &) {}
 #endif
@@@@ -243,8 +243,8 @@@@ class SecBlock (public)
 	typedef typename A::const_pointer const_iterator;
 	typedef typename A::size_type size_type;
 
-	explicit SecBlock(size_type size=0)
-		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}
+	explicit SecBlock(size_type sz=0)
+		: m_size(sz) {m_ptr = m_alloc.allocate(sz, NULL);}
 	SecBlock(const SecBlock<T, A> &t)
 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}
 	SecBlock(const T *t, size_type len)
@


1.4
log
@Update to cryptopp-5.6.2; lots of local patches go to the attic.
@
text
@d1 1
a1 1
$OpenBSD: patch-secblock_h,v 1.3 2012/02/29 12:46:30 dcoppa Exp $
@


1.3
log
@
Fix warnings found by clang / gcc-4.6 (from upstream svn)
@
text
@d1 1
a1 1
$OpenBSD: patch-secblock_h,v 1.2 2011/06/24 07:55:18 dcoppa Exp $
a3 9
@@@@ -88,7 +88,7 @@@@ class AllocatorWithCleanup : public AllocatorBase<T> (
 
 	pointer allocate(size_type n, const void * = NULL)
 	{
-		CheckSize(n);
+		this->CheckSize(n);
 		if (n == 0)
 			return NULL;
 
@


1.2
log
@Update to cryptopp-5.6.1

'go for it' espie@@
@
text
@d1 1
a1 1
$OpenBSD: patch-secblock_h,v 1.1.1.1 2008/08/26 14:57:58 espie Exp $
d3 10
a12 1
+++ secblock.h	Wed Jun  8 16:42:01 2011
@


1.1
log
@Initial revision
@
text
@d1 23
a23 23
$OpenBSD$
--- secblock.h.orig	Wed Jun 18 13:43:26 2008
+++ secblock.h	Wed Jun 18 13:43:49 2008
@@@@ -156,7 +156,7 @@@@ class AllocatorWithCleanup : public AllocatorBase<T> 
 	// VS.NET STL enforces the policy of "All STL-compliant allocators have to provide a
 	// template class member called rebind".
     template <class U> struct rebind { typedef AllocatorWithCleanup<U, T_Align16> other; };
-#if _MSC_VER >= 1500
+#if defined(_MSC_VER) && _MSC_VER >= 1500
 	AllocatorWithCleanup() {}
 	template <class U, bool A> AllocatorWithCleanup(const AllocatorWithCleanup<U, A> &) {}
 #endif
@@@@ -279,8 +279,8 @@@@ class SecBlock (public)
 	typedef typename A::const_pointer const_iterator;
 	typedef typename A::size_type size_type;
 
-	explicit SecBlock(size_type size=0)
-		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}
+	explicit SecBlock(size_type sz=0)
+		: m_size(sz) {m_ptr = m_alloc.allocate(sz, NULL);}
 	SecBlock(const SecBlock<T, A> &t)
 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}
 	SecBlock(const T *t, size_type len)
@


1.1.1.1
log
@yet another crypto library, dependency for amule, when we get it to
work.
@
text
@@
