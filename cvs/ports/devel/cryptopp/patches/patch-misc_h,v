head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	cryptopp:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.11.22.17.20.25;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	I1b7UlKmxi0fWXv6;

1.6
date	2016.10.10.12.55.51;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	TEvn5Z1IJ15l9dnk;

1.5
date	2015.11.23.13.19.40;	author dcoppa;	state dead;
branches;
next	1.4;
commitid	lkx07lop9gGuBBc8;

1.4
date	2013.03.14.11.16.02;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.29.12.46.30;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.24.07.55.18;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
Update to cryptopp-5.6.5
@
text
@$OpenBSD: patch-misc_h,v 1.6 2016/10/10 12:55:51 dcoppa Exp $
--- misc.h.orig	Tue Nov 22 15:09:45 2016
+++ misc.h	Tue Nov 22 15:12:43 2016
@@@@ -9,9 +9,9 @@@@
 
 #include "config.h"
 
-#if !CRYPTOPP_DOXYGEN_PROCESSING
+#if !defined(CRYPTOPP_DOXYGEN_PROCESSING)
 
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(push)
 # pragma warning(disable: 4146 4514)
 # if (CRYPTOPP_MSC_VERSION >= 1400)
@@@@ -82,7 +82,7 @@@@
 
 #endif // CRYPTOPP_DOXYGEN_PROCESSING
 
-#if CRYPTOPP_DOXYGEN_PROCESSING
+#if defined(CRYPTOPP_DOXYGEN_PROCESSING)
 //! \brief The maximum value of a machine word
 //! \details SIZE_MAX provides the maximum value of a machine word. The value is
 //!   \p 0xffffffff on 32-bit machines, and \p 0xffffffffffffffff on 64-bit machines.
@@@@ -116,7 +116,7 @@@@ class Integer;
 
 // ************** compile-time assertion ***************
 
-#if CRYPTOPP_DOXYGEN_PROCESSING
+#if defined(CRYPTOPP_DOXYGEN_PROCESSING)
 //! \brief Compile time assertion
 //! \param expr the expression to evaluate
 //! \details Asserts the expression expr though a dummy struct.
@@@@ -150,7 +150,7 @@@@ struct CompileAssert
 
 // ************** count elements in an array ***************
 
-#if CRYPTOPP_DOXYGEN_PROCESSING
+#if defined(CRYPTOPP_DOXYGEN_PROCESSING)
 //! \brief Counts elements in an array
 //! \param arr an array of elements
 //! \details COUNTOF counts elements in an array. On Windows COUNTOF(x) is defined
@@@@ -178,7 +178,7 @@@@ class CRYPTOPP_DLL Empty
 {
 };
 
-#if !CRYPTOPP_DOXYGEN_PROCESSING
+#if !defined(CRYPTOPP_DOXYGEN_PROCESSING)
 template <class BASE1, class BASE2>
 class CRYPTOPP_NO_VTABLE TwoBases : public BASE1, public BASE2
 {
@@@@ -225,7 +225,7 @@@@ struct NewObject
 	T* operator()() const {return new T;}
 };
 
-#if CRYPTOPP_DOXYGEN_PROCESSING
+#if defined(CRYPTOPP_DOXYGEN_PROCESSING)
 //! \brief A memory barrier
 //! \details MEMORY_BARRIER attempts to ensure reads and writes are completed
 //!   in the absence of a language synchronization point. It is used by the
@@@@ -238,7 +238,7 @@@@ struct NewObject
 #else
 #if defined(CRYPTOPP_CXX11_ATOMICS)
 # define MEMORY_BARRIER() std::atomic_thread_fence(std::memory_order_acq_rel)
-#elif (_MSC_VER >= 1400)
+#elif (defined(_MSC_VER) && _MSC_VER >= 1400)
 # pragma intrinsic(_ReadWriteBarrier)
 # define MEMORY_BARRIER() _ReadWriteBarrier()
 #elif defined(__INTEL_COMPILER)
@@@@ -336,7 +336,7 @@@@ const T & Singleton<T, F, instance>::Ref(CRYPTOPP_NOIN
 
 // ************** misc functions ***************
 
-#if (!__STDC_WANT_SECURE_LIB__ && !defined(_MEMORY_S_DEFINED)) || defined(CRYPTOPP_WANT_SECURE_LIB)
+#if (!defined(__STDC_WANT_SECURE_LIB__) && !defined(_MEMORY_S_DEFINED)) || defined(CRYPTOPP_WANT_SECURE_LIB)
 
 //! \brief Bounds checking replacement for memcpy()
 //! \param dest pointer to the desination memory block
@@@@ -367,7 +367,7 @@@@ inline void memcpy_s(void *dest, size_t sizeInBytes, c
 	if (count > sizeInBytes)
 		throw InvalidArgument("memcpy_s: buffer overflow");
 
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(push)
 # pragma warning(disable: 4996)
 # if (CRYPTOPP_MSC_VERSION >= 1400)
@@@@ -375,7 +375,7 @@@@ inline void memcpy_s(void *dest, size_t sizeInBytes, c
 # endif
 #endif
 	memcpy(dest, src, count);
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(pop)
 #endif
 }
@@@@ -409,7 +409,7 @@@@ inline void memmove_s(void *dest, size_t sizeInBytes, 
 	if (count > sizeInBytes)
 		throw InvalidArgument("memmove_s: buffer overflow");
 
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(push)
 # pragma warning(disable: 4996)
 # if (CRYPTOPP_MSC_VERSION >= 1400)
@@@@ -417,12 +417,12 @@@@ inline void memmove_s(void *dest, size_t sizeInBytes, 
 # endif
 #endif
 	memmove(dest, src, count);
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(pop)
 #endif
 }
 
-#if __BORLANDC__ >= 0x620
+#if (defined(__BORLANDC__) && __BORLANDC__ >= 0x620)
 // C++Builder 2010 workaround: can't use std::memcpy_s because it doesn't allow 0 lengths
 # define memcpy_s CryptoPP::memcpy_s
 # define memmove_s CryptoPP::memmove_s
@@@@ -483,12 +483,12 @@@@ template <class T> inline const T& STDMAX(const T& a, 
 	return a < b ? b : a;
 }
 
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(push)
 # pragma warning(disable: 4389)
 #endif
 
-#if CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE
+#if defined(CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE)
 # pragma GCC diagnostic push
 # pragma GCC diagnostic ignored "-Wsign-compare"
 # if (CRYPTOPP_LLVM_CLANG_VERSION >= 20800) || (CRYPTOPP_APPLE_CLANG_VERSION >= 30000)
@@@@ -529,6 +529,12 @@@@ inline bool SafeConvert(T1 from, T2 &to)
 //! \param value the value to convert
 //! \param base the base to use during the conversion
 //! \returns the string representation of value in base.
+template <typename T>
+inline bool IsNegative(T value)
+{
+	return std::numeric_limits<T>::is_signed * value < 0;
+}
+
 template <class T>
 std::string IntToString(T value, unsigned int base = 10)
 {
@@@@ -542,7 +548,7 @@@@ std::string IntToString(T value, unsigned int base = 1
 		return "0";
 
 	bool negate = false;
-	if (value < 0)
+	if (IsNegative(value))
 	{
 		negate = true;
 		value = 0-value;	// VC .NET does not like -a
@@@@ -590,11 +596,11 @@@@ std::string IntToString<word64>(word64 value, unsigned
 template <> CRYPTOPP_DLL
 std::string IntToString<Integer>(Integer value, unsigned int base);
 
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(pop)
 #endif
 
-#if CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE
+#if defined(CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE)
 # pragma GCC diagnostic pop
 #endif
 
@@@@ -924,7 +930,7 @@@@ inline unsigned int GetAlignmentOf(T *dummy=NULL)	// V
 	CRYPTOPP_UNUSED(dummy);
 #if defined(CRYPTOPP_CXX11_ALIGNOF)
 	return alignof(T);
-#elif (_MSC_VER >= 1300)
+#elif (defined(_MSC_VER) && _MSC_VER >= 1300)
 	return __alignof(T);
 #elif defined(__GNUC__)
 	return __alignof__(T);
@@@@ -1087,7 +1093,7 @@@@ void SecureWipeBuffer(T *buf, size_t n)
 		*((volatile T*)(--p)) = 0;
 }
 
-#if (_MSC_VER >= 1400 || defined(__GNUC__)) && (CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86)
+#if ((defined(_MSC_VER) && _MSC_VER >= 1400) || defined(__GNUC__)) && (CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86)
 
 //! \brief Sets each byte of an array to 0
 //! \param buf an array of bytes
@@@@ -1151,7 +1157,7 @@@@ template<> inline void SecureWipeBuffer(word64 *buf, s
 
 #endif	// #if (_MSC_VER >= 1400 || defined(__GNUC__)) && (CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86)
 
-#if (_MSC_VER >= 1700) && defined(_M_ARM)
+#if (defined(_MSC_VER) && _MSC_VER >= 1700) && defined(_M_ARM)
 template<> inline void SecureWipeBuffer(byte *buf, size_t n)
 {
 	char *p = reinterpret_cast<char*>(buf+n);
@@@@ -1501,7 +1507,7 @@@@ template<> inline word32 rotrMod<word32>(word32 x, uns
 
 #endif // #ifdef _MSC_VER
 
-#if _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
+#if (defined(_MSC_VER) && _MSC_VER >= 1300) && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 calls a function instead of using the rotate instruction when using these instructions
 
 //! \brief Performs a left rotate
@@@@ -1590,7 +1596,7 @@@@ template<> inline word64 rotrMod<word64>(word64 x, uns
 
 #endif // #if _MSC_VER >= 1310
 
-#if _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
+#if (defined(_MSC_VER) && _MSC_VER >= 1400) && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 gives undefined externals with these
 
 template<> inline word16 rotlFixed<word16>(word16 x, unsigned int y)
@@@@ -2395,7 +2401,7 @@@@ inline T SafeLeftShift(T value)
 
 NAMESPACE_END
 
-#if CRYPTOPP_MSC_VERSION
+#if defined(CRYPTOPP_MSC_VERSION)
 # pragma warning(pop)
 #endif
 
@


1.6
log
@
Get rid of all the noisy warnings like:
warning: "_MSC_VER" is not defined
@
text
@d1 3
a3 3
$OpenBSD$
--- misc.h.orig	Mon Oct 10 13:25:20 2016
+++ misc.h	Mon Oct 10 13:29:41 2016
d70 1
a70 1
@@@@ -333,7 +333,7 @@@@ const T & Singleton<T, F, instance>::Ref(CRYPTOPP_NOIN
d79 1
a79 1
@@@@ -364,7 +364,7 @@@@ inline void memcpy_s(void *dest, size_t sizeInBytes, c
d88 1
a88 1
@@@@ -372,7 +372,7 @@@@ inline void memcpy_s(void *dest, size_t sizeInBytes, c
d97 1
a97 1
@@@@ -406,7 +406,7 @@@@ inline void memmove_s(void *dest, size_t sizeInBytes, 
d106 1
a106 1
@@@@ -414,12 +414,12 @@@@ inline void memmove_s(void *dest, size_t sizeInBytes, 
d121 1
a121 1
@@@@ -480,12 +480,12 @@@@ template <class T> inline const T& STDMAX(const T& a, 
d136 23
a158 1
@@@@ -587,11 +587,11 @@@@ std::string IntToString<word64>(word64 value, unsigned
d172 1
a172 1
@@@@ -887,7 +887,7 @@@@ inline unsigned int GetAlignmentOf(T *dummy=NULL)	// V
d181 1
a181 1
@@@@ -1074,7 +1074,7 @@@@ void SecureWipeBuffer(T *buf, size_t n)
d190 1
a190 1
@@@@ -1138,7 +1138,7 @@@@ template<> inline void SecureWipeBuffer(word64 *buf, s
d199 1
a199 1
@@@@ -1488,7 +1488,7 @@@@ template<> inline word32 rotrMod<word32>(word32 x, uns
d208 1
a208 1
@@@@ -1577,7 +1577,7 @@@@ template<> inline word64 rotrMod<word64>(word64 x, uns
d217 1
a217 1
@@@@ -2382,7 +2382,7 @@@@ inline T SafeLeftShift(T value)
@


1.5
log
@
Update to cryptopp-5.6.3
@
text
@d1 70
a70 4
$OpenBSD: patch-misc_h,v 1.4 2013/03/14 11:16:02 dcoppa Exp $
--- misc.h.orig	Fri Aug  6 18:46:18 2010
+++ misc.h	Wed Feb 29 10:09:08 2012
@@@@ -141,7 +141,7 @@@@ const T & Singleton<T, F, instance>::Ref(CRYPTOPP_NOIN
d74 24
a97 4
-#if (!__STDC_WANT_SECURE_LIB__ && !defined(_MEMORY_S_DEFINED))
+#if ((!defined(__STDC_WANT_SECURE_LIB__) || !__STDC_WANT_SECURE_LIB__) && !defined(_MEMORY_S_DEFINED))
 inline void memcpy_s(void *dest, size_t sizeInBytes, const void *src, size_t count)
 {
d99 10
a108 1
@@@@ -156,7 +156,7 @@@@ inline void memmove_s(void *dest, size_t sizeInBytes, 
d110 4
d117 1
a117 1
+#if defined(__BORLANDC__) && __BORLANDC__ >= 0x620
d119 29
a147 4
 #define memcpy_s CryptoPP::memcpy_s
 #define memmove_s CryptoPP::memmove_s
@@@@ -367,7 +367,7 @@@@ inline unsigned int GetAlignmentOf(T *dummy=NULL)	// V
 		return 1;
d150 6
a155 2
-#if (_MSC_VER >= 1300)
+#if defined(_MSC_VER) && (_MSC_VER >= 1300)
d159 2
a160 2
@@@@ -483,7 +483,7 @@@@ void SecureWipeBuffer(T *buf, size_t n)
 		*(--p) = 0;
d164 1
a164 1
+#if (defined(_MSC_VER) && _MSC_VER >= 1400 || defined(__GNUC__)) && (CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86)
d166 8
d176 2
a177 1
@@@@ -651,7 +651,7 @@@@ template<> inline word32 rotrMod<word32>(word32 x, uns
d182 1
a182 1
+#if defined(_MSC_VER) && _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
d185 2
a186 2
 template<> inline word64 rotlFixed<word64>(word64 x, unsigned int y)
@@@@ -690,7 +690,7 @@@@ template<> inline word64 rotrMod<word64>(word64 x, uns
d191 1
a191 1
+#if defined(_MSC_VER) && _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
d195 9
a203 9
@@@@ -837,7 +837,7 @@@@ inline word32 ByteReverse(word32 value)
 	return bswap_32(value);
 #elif defined(__MWERKS__) && TARGET_CPU_PPC
 	return (word32)__lwbrx(&value,0);
-#elif _MSC_VER >= 1400 || (_MSC_VER >= 1300 && !defined(_DLL))
+#elif (defined(_MSC_VER) && _MSC_VER >= 1400) || (defined (_MSC_VER) && _MSC_VER >= 1300 && !defined(_DLL))
 	return _byteswap_ulong(value);
 #elif CRYPTOPP_FAST_ROTATE(32)
 	// 5 instructions with rotate instruction, 9 without
@


1.4
log
@Update to cryptopp-5.6.2; lots of local patches go to the attic.
@
text
@d1 1
a1 1
$OpenBSD: patch-misc_h,v 1.3 2012/02/29 12:46:30 dcoppa Exp $
@


1.3
log
@
Fix warnings found by clang / gcc-4.6 (from upstream svn)
@
text
@d1 1
a1 1
$OpenBSD: patch-misc_h,v 1.2 2011/06/24 07:55:18 dcoppa Exp $
d8 2
a9 2
-#if (!__STDC_WANT_SECURE_LIB__)
+#if (!defined(__STDC_WANT_SECURE_LIB__) || !__STDC_WANT_SECURE_LIB__)
a39 16
@@@@ -580,13 +580,13 @@@@ CRYPTOPP_DLL void CRYPTOPP_API UnalignedDeallocate(voi
 template <class T> inline T rotlFixed(T x, unsigned int y)
 {
 	assert(y < sizeof(T)*8);
-	return T((x<<y) | (x>>(sizeof(T)*8-y)));
+	return y ? T((x<<y) | (x>>(sizeof(T)*8-y))) : x;
 }
 
 template <class T> inline T rotrFixed(T x, unsigned int y)
 {
 	assert(y < sizeof(T)*8);
-	return T((x>>y) | (x<<(sizeof(T)*8-y)));
+	return y ? T((x>>y) | (x<<(sizeof(T)*8-y))) : x;
 }
 
 template <class T> inline T rotlVariable(T x, unsigned int y)
@


1.2
log
@Update to cryptopp-5.6.1

'go for it' espie@@
@
text
@d1 1
a1 1
$OpenBSD: patch-misc_h,v 1.1.1.1 2008/08/26 14:57:58 espie Exp $
d3 1
a3 1
+++ misc.h	Sun Oct 24 12:21:50 2010
d40 16
@


1.1
log
@Initial revision
@
text
@d1 66
a66 39
$OpenBSD$
--- misc.h.orig	Wed Jun 18 13:42:22 2008
+++ misc.h	Fri Jun 20 13:36:34 2008
@@@@ -146,7 +146,7 @@@@ retry:
 
 // ************** misc functions ***************
 
-#if (!__STDC_WANT_SECURE_LIB__)
+#if (!defined(__STDC_WANT_SECURE_LIB__) || !__STDC_WANT_SECURE_LIB__)
 inline void memcpy_s(void *dest, size_t sizeInBytes, const void *src, size_t count)
 {
 	if (count > sizeInBytes)
@@@@ -322,7 +322,7 @@@@ inline unsigned int GetAlignmentOf(T *dummy=NULL)	// V
 		return 1;			// alignment not needed on x86 and x64
 #endif
 
-#if (_MSC_VER >= 1300)
+#if defined(_MSC_VER) && (_MSC_VER >= 1300)
 	return __alignof(T);
 #elif defined(__GNUC__)
 	return __alignof__(T);
@@@@ -487,7 +487,7 @@@@ template<> inline word32 rotrMod<word32>(word32 x, uns
 
 #endif // #ifdef _MSC_VER
 
-#if _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
+#if defined(_MSC_VER) && _MSC_VER >= 1300 && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 calls a function instead of using the rotate instruction when using these instructions
 
 template<> inline word64 rotlFixed<word64>(word64 x, unsigned int y)
@@@@ -526,7 +526,7 @@@@ template<> inline word64 rotrMod<word64>(word64 x, uns
 
 #endif // #if _MSC_VER >= 1310
 
-#if _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
+#if defined(_MSC_VER) && _MSC_VER >= 1400 && !defined(__INTEL_COMPILER)
 // Intel C++ Compiler 10.0 gives undefined externals with these
 
 template<> inline word16 rotlFixed<word16>(word16 x, unsigned int y)
@


1.1.1.1
log
@yet another crypto library, dependency for amule, when we get it to
work.
@
text
@@
