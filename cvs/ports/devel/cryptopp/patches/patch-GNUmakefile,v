head	1.6;
access;
symbols
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	cryptopp:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2016.11.22.17.20.25;	author dcoppa;	state Exp;
branches;
next	1.5;
commitid	I1b7UlKmxi0fWXv6;

1.5
date	2016.09.13.13.50.59;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	hpfOMqSA4i5rL55T;

1.4
date	2015.11.23.13.19.40;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	lkx07lop9gGuBBc8;

1.3
date	2013.03.14.11.16.02;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.24.07.55.17;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
Update to cryptopp-5.6.5
@
text
@$OpenBSD: patch-GNUmakefile,v 1.5 2016/09/13 13:50:59 dcoppa Exp $
--- GNUmakefile.orig	Tue Nov 22 11:04:50 2016
+++ GNUmakefile	Tue Nov 22 11:12:02 2016
@@@@ -9,61 +9,25 @@@@ RANLIB ?= ranlib
 CP ?= cp
 MV ?= mv
 EGREP ?= egrep
-CHMOD ?= chmod
 MKDIR ?= mkdir
-LN ?= ln -sf
-LDCONF ?= /sbin/ldconfig -n
-UNAME := $(shell uname)
 
-IS_X86 := $(shell uname -m | $(EGREP) -v "x86_64" | $(EGREP) -i -c "i.86|x86|i86")
-IS_X32 ?= 0
-IS_X64 := $(shell uname -m | $(EGREP) -i -c "(_64|d64)")
-IS_PPC := $(shell uname -m | $(EGREP) -i -c "ppc|power")
-IS_ARM32 := $(shell uname -m | $(EGREP) -i -c "arm")
-IS_ARM64 := $(shell uname -m | $(EGREP) -i -c "aarch64")
+IS_X86 := $(shell arch -s | $(EGREP) -v "x86_64" | $(EGREP) -i -c "i.86|x86|i86")
+IS_X64 := $(shell arch -s | $(EGREP) -i -c "(_64|d64)")
+IS_ARM := $(shell arch -s | $(EGREP) -i -c "arm")
 
-IS_SUN := $(shell uname | $(EGREP) -i -c "SunOS")
-IS_LINUX := $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -i -c "Linux")
-IS_MINGW := $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -i -c "MinGW")
-IS_CYGWIN := $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -i -c "Cygwin")
-IS_DARWIN := $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -i -c "Darwin")
-IS_NETBSD := $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -i -c "NetBSD")
-
-SUN_COMPILER := $(shell $(CXX) -V 2>&1 | $(EGREP) -i -c "CC: (Sun|Studio)")
-GCC_COMPILER := $(shell $(CXX) --version 2>&1 | $(EGREP) -i -v "clang" | $(EGREP) -i -c "(gcc|g\+\+)")
-CLANG_COMPILER := $(shell $(CXX) --version 2>&1 | $(EGREP) -i -c "clang")
-INTEL_COMPILER := $(shell $(CXX) --version 2>&1 | $(EGREP) -i -c "\(icc\)")
-MACPORTS_COMPILER := $(shell $(CXX) --version 2>&1 | $(EGREP) -i -c "macports")
-
-# Sun Studio 12.0 provides SunCC 0x0510; and Sun Studio 12.3 provides SunCC 0x0512
-SUNCC_510_OR_LATER := $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: (Sun|Studio) .* (5\.1[0-9]|5\.[2-9]|6\.)")
-SUNCC_511_OR_LATER := $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: (Sun|Studio) .* (5\.1[1-9]|5\.[2-9]|6\.)")
-SUNCC_512_OR_LATER := $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: (Sun|Studio) .* (5\.1[2-9]|5\.[2-9]|6\.)")
-SUNCC_513_OR_LATER := $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: (Sun|Studio) .* (5\.1[3-9]|5\.[2-9]|6\.)")
-
-HAS_SOLIB_VERSION := $(IS_LINUX)
-
-# Fixup SunOS
-ifeq ($(IS_SUN),1)
-IS_X86 := $(shell isainfo -k 2>/dev/null | grep -i -c "i386")
-IS_X64 := $(shell isainfo -k 2>/dev/null | grep -i -c "amd64")
-endif
-
 ###########################################################
 #####                General Variables                #####
 ###########################################################
 
 # Base CXXFLAGS used if the user did not specify them
-ifeq ($(SUN_COMPILER),1)
-  ifeq ($(SUNCC_512_OR_LATER),1)
-    CXXFLAGS ?= -DNDEBUG -g3 -xO2
-  else
-    CXXFLAGS ?= -DNDEBUG -g -xO2
-  endif
-else
-  CXXFLAGS ?= -DNDEBUG -g2 -O2
+ifndef CXXFLAGS
+CXXFLAGS ?= -DNDEBUG -g2 -O2
 endif
 
+ifndef LDFLAGS
+LDFLAGS ?= -lpthread
+endif
+
 # Default prefix for make install
 ifeq ($(PREFIX),)
 PREFIX = /usr/local
@@@@ -83,332 +47,7 @@@@ ifeq ($(INCLUDEDIR),)
 INCLUDEDIR := $(PREFIX)/include
 endif
 
-# Fix CXX on Cygwin 1.1.4
-ifeq ($(CXX),gcc)
-CXX := g++
-endif
-
-# We honor ARFLAGS, but the "v" option used by default causes a noisy make
-ifeq ($(ARFLAGS),rv)
-ARFLAGS = r
-endif
-
 ###########################################################
-#####               X86/X32/X64 Options               #####
-###########################################################
-
-ifneq ($(IS_X86)$(IS_X32)$(IS_X64),000)
-
-# Fixup. Clang integrated assembler will be used (-Wa,-q)
-ifneq ($(MACPORTS_COMPILER),1)
-  IS_GAS := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler")
-endif
-
-ifneq ($(GCC_COMPILER),0)
-  IS_GCC_29 := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c gcc-9[0-9][0-9])
-  GCC42_OR_LATER := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c "gcc version (4\.[2-9]|[5-9]\.)")
-  GCC46_OR_LATER := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c "gcc version (4\.[6-9]|[5-9]\.)")
-endif
-
-ifneq ($(IS_GAS),0)
-  GAS210_OR_LATER := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.[1-9][0-9]|[3-9])")
-  GAS217_OR_LATER := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.1[7-9]|2\.[2-9]|[3-9])")
-  GAS219_OR_LATER := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.19|2\.[2-9]|[3-9])")
-endif
-
-ICC111_OR_LATER := $(shell $(CXX) --version 2>&1 | $(EGREP) -c "\(ICC\) ([2-9][0-9]|1[2-9]|11\.[1-9])")
-
-# Add -fPIC for targets *except* X86, X32, Cygwin or MinGW
-ifeq ($(IS_X86)$(IS_X32)$(IS_CYGWIN)$(IS_MINGW)$(SUN_COMPILER),00000)
- ifeq ($(findstring -fPIC,$(CXXFLAGS)),)
-   CXXFLAGS += -fPIC
- endif
-endif
-
-# Guard use of -march=native
-ifeq ($(GCC42_OR_LATER)$(IS_NETBSD),10)
-   CXXFLAGS += -march=native
-else ifneq ($(CLANG_COMPILER)$(INTEL_COMPILER),00)
-   CXXFLAGS += -march=native
-else
-  # GCC 3.3 and "unknown option -march="
-  # Ubuntu GCC 4.1 compiler crash with -march=native
-  # NetBSD GCC 4.8 compiler and "bad value (native) for -march= switch"
-  # Sun compiler is handled below
-  ifeq ($(SUN_COMPILER)$(IS_X64),01)
-    CXXFLAGS += -m64
-  else ifeq ($(SUN_COMPILER)$(IS_X86),01)
-    CXXFLAGS += -m32
-  endif # X86/X32/X64
-endif
-
-# Aligned access required for -O3 and above due to vectorization
-UNALIGNED_ACCESS := $(shell $(EGREP) -c "^[[:space:]]*//[[:space:]]*\#[[:space:]]*define[[:space:]]*CRYPTOPP_NO_UNALIGNED_DATA_ACCESS" config.h)
-ifneq ($(UNALIGNED_ACCESS),0)
-ifeq ($(findstring -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS,$(CXXFLAGS)),)
-ifeq ($(findstring -O3,$(CXXFLAGS)),-O3)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # -O3
-ifeq ($(findstring -O5,$(CXXFLAGS)),-O5)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # -O5
-ifeq ($(findstring -Ofast,$(CXXFLAGS)),-Ofast)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # -Ofast
-endif # CRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # UNALIGNED_ACCESS
-
-ifneq ($(INTEL_COMPILER),0)
-CXXFLAGS += -wd68 -wd186 -wd279 -wd327 -wd161 -wd3180
-ifeq ($(ICC111_OR_LATER),0)
-# "internal error: backend signals" occurs on some x86 inline assembly with ICC 9 and some x64 inline assembly with ICC 11.0
-# if you want to use Crypto++'s assembly code with ICC, try enabling it on individual files
-CXXFLAGS += -DCRYPTOPP_DISABLE_ASM
-endif
-endif
-
-# .intel_syntax wasn't supported until GNU assembler 2.10
-ifeq ($(GCC_COMPILER)$(MACPORTS_COMPILER)$(GAS210_OR_LATER),100)
-CXXFLAGS += -DCRYPTOPP_DISABLE_ASM
-else
-ifeq ($(GCC_COMPILER)$(MACPORTS_COMPILER)$(GAS217_OR_LATER),100)
-CXXFLAGS += -DCRYPTOPP_DISABLE_SSSE3
-else
-ifeq ($(GCC_COMPILER)$(MACPORTS_COMPILER)$(GAS219_OR_LATER),100)
-CXXFLAGS += -DCRYPTOPP_DISABLE_AESNI
-endif
-endif
-endif
-
-# Tell MacPorts GCC to use Clang integrated assembler
-#   http://github.com/weidai11/cryptopp/issues/190
-ifeq ($(GCC_COMPILER)$(MACPORTS_COMPILER),11)
-ifneq ($(findstring -Wa,-q,$(CXXFLAGS)),-Wa,-q)
-CXXFLAGS += -Wa,-q
-endif
-ifneq ($(findstring -Wa,-q,$(CXXFLAGS)),-DCRYPTOPP_CLANG_INTEGRATED_ASSEMBLER)
-CXXFLAGS += -DCRYPTOPP_CLANG_INTEGRATED_ASSEMBLER=1
-endif
-endif
-
-# GCC on Solaris needs -m64. Otherwise, i386 is default
-#   http://github.com/weidai11/cryptopp/issues/230
-ifeq ($(IS_SUN)$(GCC_COMPILER)$(IS_X64),111)
-CXXFLAGS += -m64
-endif
-
-# Allow use of "/" operator for GNU Assembler.
-#   http://sourceware.org/bugzilla/show_bug.cgi?id=4572
-ifeq ($(findstring -DCRYPTOPP_DISABLE_ASM,$(CXXFLAGS)),)
-ifeq ($(IS_SUN)$(GCC_COMPILER),11)
-CXXFLAGS += -Wa,--divide
-endif
-endif
-
-ifeq ($(UNAME),)	# for DJGPP, where uname doesn't exist
-CXXFLAGS += -mbnu210
-else ifneq ($(findstring -save-temps,$(CXXFLAGS)),-save-temps)
-ifeq ($(SUN_COMPILER),0)
-CXXFLAGS += -pipe
-endif
-endif
-
-else
-
-###########################################################
-#####                 Not X86/X32/X64                 #####
-###########################################################
-
-# Add PIC
-ifeq ($(findstring -fPIC,$(CXXFLAGS)),)
-  CXXFLAGS += -fPIC
-endif
-
-# Add -pipe for everything except ARM (allow ARM-64 because they seems to have > 1 GB of memory)
-ifeq ($(IS_ARM32),0)
-ifeq ($(findstring -save-temps,$(CXXFLAGS)),)
-CXXFLAGS += -pipe
-endif
-endif
-
-# Aligned access required for -O3 and above due to vectorization
-UNALIGNED_ACCESS := $(shell $(EGREP) -c "^[[:space:]]*//[[:space:]]*\#[[:space:]]*define[[:space:]]*CRYPTOPP_NO_UNALIGNED_DATA_ACCESS" config.h)
-ifneq ($(UNALIGNED_ACCESS),0)
-ifeq ($(findstring -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS,$(CXXFLAGS)),)
-ifeq ($(findstring -O3,$(CXXFLAGS)),-O3)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # -O3
-ifeq ($(findstring -O5,$(CXXFLAGS)),-O5)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # -O5
-ifeq ($(findstring -Ofast,$(CXXFLAGS)),-Ofast)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # -Ofast
-endif # CRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # UNALIGNED_ACCESS
-
-endif	# IS_X86
-
-###########################################################
-#####                      Common                     #####
-###########################################################
-
-ifneq ($(IS_MINGW),0)
-LDLIBS += -lws2_32
-endif
-
-ifneq ($(IS_SUN),0)
-LDLIBS += -lnsl -lsocket
-endif
-
-ifeq ($(IS_LINUX),1)
-LDFLAGS += -pthread
-ifeq ($(findstring -fopenmp,$(CXXFLAGS)),-fopenmp)
-ifeq ($(findstring -lgomp,$(LDLIBS)),)
-LDLIBS += -lgomp
-endif # LDLIBS
-endif # OpenMP
-endif # IS_LINUX
-
-ifneq ($(IS_DARWIN),0)
-AR = libtool
-ARFLAGS = -static -o
-CXX ?= c++
-ifeq ($(IS_GCC_29),1)
-CXXFLAGS += -fno-coalesce-templates -fno-coalesce-static-vtables
-LDLIBS += -lstdc++
-LDFLAGS += -flat_namespace -undefined suppress -m
-endif
-endif
-
-# Add -errtags=yes to get the name for a warning suppression
-ifneq ($(SUN_COMPILER),0)	# override flags for CC Sun C++ compiler
-IS_64 := $(shell isainfo -b 2>/dev/null | grep -i -c "64")
-ifeq ($(IS_64),1)
-CXXFLAGS += -m64
-else ifeq ($(IS_64),0)
-CXXFLAGS += -m32
-endif
-ifneq ($(SUNCC_513_OR_LATER),0)
-CXXFLAGS += -native
-endif
-# Add for non-i386
-ifneq ($(IS_X86),1)
-CXXFLAGS += -KPIC
-endif
-# Add to all Solaris
-CXXFLAGS += -template=no%extdef
-SUN_CC10_BUGGY := $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: Sun .* 5\.10 .* (2009|2010/0[1-4])")
-ifneq ($(SUN_CC10_BUGGY),0)
-# -DCRYPTOPP_INCLUDE_VECTOR_CC is needed for Sun Studio 12u1 Sun C++ 5.10 SunOS_i386 128229-02 2009/09/21 and was fixed in May 2010
-# remove it if you get "already had a body defined" errors in vector.cc
-CXXFLAGS += -DCRYPTOPP_INCLUDE_VECTOR_CC
-endif
-#ifneq ($SUNCC_512_OR_LATER),0)
-#CXXFLAGS += -xarch=aes -D__AES__=1 -xarch=no%sse4_1 -xarch=no%sse4_2
-#endif
-AR = $(CXX)
-ARFLAGS = -xar -o
-RANLIB = true
-endif
-
-# Undefined Behavior Sanitizer (UBsan) testing. There's no sense in
-#   allowing unaligned data access. There will too many findings.
-ifeq ($(findstring ubsan,$(MAKECMDGOALS)),ubsan)
-ifeq ($(findstring -fsanitize=undefined,$(CXXFLAGS)),)
-CXXFLAGS += -fsanitize=undefined
-endif # CXXFLAGS
-ifeq ($(findstring -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS,$(CXXFLAGS)),)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # CXXFLAGS
-endif # UBsan
-
-# Address Sanitizer (Asan) testing. Issue 'make asan'.
-ifeq ($(findstring asan,$(MAKECMDGOALS)),asan)
-ifeq ($(findstring -fsanitize=address,$(CXXFLAGS)),)
-CXXFLAGS += -fsanitize=address
-endif # CXXFLAGS
-ifeq ($(findstring -fno-omit-frame-pointer,$(CXXFLAGS)),)
-CXXFLAGS += -fno-omit-frame-pointer
-endif # CXXFLAGS
-endif # Asan
-
-# LD gold linker testing. Triggered by 'LD=ld.gold'.
-ifeq ($(findstring ld.gold,$(LD)),ld.gold)
-ifeq ($(findstring -fuse-ld=gold,$(CXXFLAGS)),)
-ELF_FORMAT := $(shell file `which ld.gold` 2>&1 | cut -d":" -f 2 | $(EGREP) -i -c "elf")
-ifneq ($(ELF_FORMAT),0)
-LDFLAGS += -fuse-ld=gold
-endif # ELF/ELF64
-endif # CXXFLAGS
-endif # Gold
-
-# Aligned access testing. Issue 'make aligned'.
-ifneq ($(filter align aligned,$(MAKECMDGOALS)),)
-ifeq ($(findstring -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS,$(CXXFLAGS)),)
-CXXFLAGS += -DCRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-endif # CXXFLAGS
-endif # Aligned access
-
-# GCC code coverage. Issue 'make coverage'.
-ifneq ($(filter coverage,$(MAKECMDGOALS)),)
-ifeq ($(findstring -coverage,$(CXXFLAGS)),)
-CXXFLAGS += -coverage
-endif # -coverage
-endif # GCC code coverage
-
-# Debug testing on GNU systems. Triggered by -DDEBUG.
-#   Newlib test due to http://sourceware.org/bugzilla/show_bug.cgi?id=20268
-ifneq ($(filter -DDEBUG -DDEBUG=1,$(CXXFLAGS)),)
-USING_GLIBCXX := $(shell $(CXX) -x c++ $(CXXFLAGS) -E adhoc.cpp.proto 2>&1 | $(EGREP) -i -c "__GLIBCXX__")
-ifneq ($(USING_GLIBCXX),0)
-HAS_NEWLIB := $(shell $(CXX) -x c++ $(CXXFLAGS) -E adhoc.cpp.proto 2>&1 | $(EGREP) -i -c "__NEWLIB__")
-ifeq ($(HAS_NEWLIB),0)
-ifeq ($(findstring -D_GLIBCXX_DEBUG,$(CXXFLAGS)),)
-CXXFLAGS += -D_GLIBCXX_DEBUG
-endif # CXXFLAGS
-endif # NAS_NEWLIB
-endif # USING_GLIBCXX
-endif # GNU Debug build
-
-# Dead code stripping. Issue 'make lean'.
-ifeq ($(findstring lean,$(MAKECMDGOALS)),lean)
-ifeq ($(findstring -ffunction-sections,$(CXXFLAGS)),)
-CXXFLAGS += -ffunction-sections
-endif # CXXFLAGS
-ifeq ($(findstring -fdata-sections,$(CXXFLAGS)),)
-CXXFLAGS += -fdata-sections
-endif # CXXFLAGS
-ifneq ($(IS_DARWIN),0)
-ifeq ($(findstring -Wl,-dead_strip,$(LDFLAGS)),)
-LDFLAGS += -Wl,-dead_strip
-endif # CXXFLAGS
-else # BSD, Linux and Unix
-ifeq ($(findstring -Wl,--gc-sections,$(LDFLAGS)),)
-LDFLAGS += -Wl,--gc-sections
-endif # LDFLAGS
-endif # MAKECMDGOALS
-endif # Dead code stripping
-
-# For Shared Objects, Diff, Dist/Zip rules
-LIB_VER := $(shell $(EGREP) "define CRYPTOPP_VERSION" config.h | cut -d" " -f 3)
-LIB_MAJOR := $(shell echo $(LIB_VER) | cut -c 1)
-LIB_MINOR := $(shell echo $(LIB_VER) | cut -c 2)
-LIB_PATCH := $(shell echo $(LIB_VER) | cut -c 3)
-
-ifeq ($(strip $(LIB_PATCH)),)
-LIB_PATCH := 0
-endif
-
-ifeq ($(HAS_SOLIB_VERSION),1)
-# Full version suffix for shared library
-SOLIB_VERSION_SUFFIX=.$(LIB_MAJOR).$(LIB_MINOR).$(LIB_PATCH)
-# Different patchlevels are compatible, minor versions are not
-SOLIB_COMPAT_SUFFIX=.$(LIB_MAJOR).$(LIB_MINOR)
-SOLIB_FLAGS=-Wl,-soname,libcryptopp.so$(SOLIB_COMPAT_SUFFIX)
-endif # HAS_SOLIB_VERSION
-
-###########################################################
 #####              Source and object files            #####
 ###########################################################
 
@@@@ -416,7 +55,7 @@@@ endif # HAS_SOLIB_VERSION
 SRCS := cryptlib.cpp cpu.cpp integer.cpp $(filter-out cryptlib.cpp cpu.cpp integer.cpp pch.cpp simple.cpp winpipes.cpp cryptlib_bds.cpp,$(wildcard *.cpp))
 
 # Need CPU for X86/X64/X32 and ARM
-ifeq ($(IS_X86)$(IS_X64)$(IS_ARM32)$(IS_ARM64),0000)
+ifeq ($(IS_X86)$(IS_X64)$(IS_ARM),0000)
   SRCS := $(filter-out cpu.cpp, $(SRCS))
 endif
 # Need RDRAND for X86/X64/X32
@@@@ -424,10 +63,6 @@@@ ifeq ($(IS_X86)$(IS_X64),00)
   SRCS := $(filter-out rdrand.cpp, $(SRCS))
 endif
 
-ifneq ($(IS_MINGW),0)
-SRCS += winpipes.cpp
-endif
-
 # List cryptlib.cpp first, then cpu.cpp, then integer.cpp to tame C++ static initialization problems.
 OBJS := $(SRCS:.cpp=.o)
 
@@@@ -436,92 +71,25 @@@@ TESTSRCS := test.cpp bench1.cpp bench2.cpp validat1.cp
 TESTOBJS := $(TESTSRCS:.cpp=.o)
 LIBOBJS := $(filter-out $(TESTOBJS),$(OBJS))
 
-# List cryptlib.cpp first, then cpu.cpp, then integer.cpp to tame C++ static initialization problems.
-DLLSRCS := cryptlib.cpp cpu.cpp integer.cpp shacal2.cpp md5.cpp shark.cpp zinflate.cpp gf2n.cpp salsa.cpp xtr.cpp oaep.cpp polynomi.cpp rc2.cpp default.cpp wait.cpp wake.cpp twofish.cpp iterhash.cpp adler32.cpp elgamal.cpp marss.cpp blowfish.cpp ecp.cpp filters.cpp strciphr.cpp camellia.cpp ida.cpp zlib.cpp des.cpp crc.cpp algparam.cpp dessp.cpp tea.cpp eax.cpp network.cpp emsa2.cpp pkcspad.cpp squaretb.cpp idea.cpp authenc.cpp hmac.cpp zdeflate.cpp xtrcrypt.cpp queue.cpp mars.cpp rc5.cpp blake2.cpp hrtimer.cpp eprecomp.cpp hex.cpp dsa.cpp sha.cpp fips140.cpp gzip.cpp seal.cpp files.cpp base32.cpp vmac.cpp tigertab.cpp sharkbox.cpp safer.cpp randpool.cpp esign.cpp arc4.cpp osrng.cpp skipjack.cpp seed.cpp sha3.cpp sosemanuk.cpp bfinit.cpp rabin.cpp 3way.cpp rw.cpp rdrand.cpp rsa.cpp rdtables.cpp gost.cpp socketft.cpp tftables.cpp nbtheory.cpp panama.cpp modes.cpp rijndael.cpp casts.cpp chacha.cpp gfpcrypt.cpp poly1305.cpp dll.cpp ec2n.cpp blumshub.cpp algebra.cpp basecode.cpp base64.cpp cbcmac.cpp rc6.cpp dh2.cpp gf256.cpp mqueue.cpp misc.cpp pssr.cpp channels.cpp tiger.cpp cast.cpp rng.cpp square.cpp asn.cpp whrlpool.cpp md4.cpp dh.cpp ccm.cpp md2.cpp mqv.cpp gf2_32.cpp ttmac.cpp luc.cpp trdlocal.cpp pubkey.cpp gcm.cpp ripemd.cpp eccrypto.cpp serpent.cpp cmac.cpp
-DLLOBJS := $(DLLSRCS:.cpp=.export.o)
-
-# Import lib testing
-LIBIMPORTOBJS := $(LIBOBJS:.o=.import.o)
-TESTIMPORTOBJS := $(TESTOBJS:.o=.import.o)
-DLLTESTOBJS := dlltest.dllonly.o
-
 ###########################################################
 #####                Targets and Recipes              #####
 ###########################################################
 
 .PHONY: all
-all: cryptest.exe
+SHARED_LIB = libcryptopp.so.${LIBcryptopp_VERSION}
 
-ifneq ($(IS_DARWIN),0)
+all: cryptest.exe ${SHARED_LIB}
+
 static: libcryptopp.a
-shared dynamic dylib: libcryptopp.dylib
-else
-static: libcryptopp.a
-shared dynamic: libcryptopp.so$(SOLIB_VERSION_SUFFIX)
-endif
 
-.PHONY: deps
-deps GNUmakefile.deps:
-	$(CXX) $(CXXFLAGS) -MM *.cpp > GNUmakefile.deps
-
-# CXXFLAGS are tuned earlier.
-.PHONY: asan ubsan align aligned
-asan ubsan align aligned: libcryptopp.a cryptest.exe
-
-# CXXFLAGS are tuned earlier. Applications must use linker flags
-#  -Wl,--gc-sections (Linux and Unix) or -Wl,-dead_strip (OS X)
-.PHONY: lean
-lean: static dynamic cryptest.exe
-
-# May want to export CXXFLAGS="-g3 -O1"
-.PHONY: coverage
-coverage: libcryptopp.a cryptest.exe
-	lcov --base-directory . --directory . --zerocounters -q
-	./cryptest.exe v
-	./cryptest.exe tv all
-	lcov --base-directory . --directory . -c -o cryptest.info
-	lcov --remove cryptest.info "*test.*" "bench*.cpp" "validat*.*" "/usr/*" -o cryptest.info
-	rm -rf ./TestCoverage/
-	genhtml -o ./TestCoverage/ -t "cryptest.exe test coverage" --num-spaces 4 cryptest.info
-
 .PHONY: test check
 test check: cryptest.exe
-	./cryptest.exe v
+	LD_LIBRARY_PATH=${WRKDIST} ./cryptest.exe v
 
-# Used to generate list of source files for Autotools, CMakeList, Android.mk, etc
-.PHONY: sources
-sources:
-	$(info Library sources: $(filter-out fipstest.cpp $(TESTSRCS),$(SRCS)))
-	$(info )
-	$(info Test sources: $(TESTSRCS))
-
-# Directory we want (can't specify on Doygen command line)
-DOCUMENT_DIRECTORY := ref$(LIB_VER)
-# Directory Doxygen uses (specified in Doygen config file)
-ifeq ($(wildcard Doxyfile),Doxyfile)
-DOXYGEN_DIRECTORY := $(strip $(shell $(EGREP) "OUTPUT_DIRECTORY" Doxyfile | grep -v "\#" | cut -d "=" -f 2))
-endif
-# Default directory (in case its missing in the config file)
-ifeq ($(strip $(DOXYGEN_DIRECTORY)),)
-DOXYGEN_DIRECTORY := html-docs
-endif
-
-# Builds the documentation. Directory name is ref563, ref570, etc.
-.PHONY: docs html
-docs html:
-	-$(RM) -r $(DOXYGEN_DIRECTORY)/ $(DOCUMENT_DIRECTORY)/ html-docs/
-	doxygen Doxyfile -d CRYPTOPP_DOXYGEN_PROCESSING
-	$(MV) $(DOXYGEN_DIRECTORY)/ $(DOCUMENT_DIRECTORY)/
-	-$(RM) CryptoPPRef.zip
-	zip -9 CryptoPPRef.zip -x ".*" -x "*/.*" -r $(DOCUMENT_DIRECTORY)/
-
 .PHONY: clean
 clean:
-	-$(RM) libcryptopp.a libcryptopp.so$(SOLIB_VERSION_SUFFIX) libcryptopp.dylib cryptopp.dll libcryptopp.dll.a libcryptopp.import.a
-ifeq ($(HAS_SOLIB_VERSION),1)
-	-$(RM) libcryptopp.so libcryptopp.so$(SOLIB_COMPAT_SUFFIX)
-endif
-	-$(RM) adhoc.cpp.o adhoc.cpp.proto.o $(LIBOBJS) $(TESTOBJS) $(DLLOBJS) $(LIBIMPORTOBJS) $(TESTIMPORTOBJS) $(DLLTESTOBJS)
+	-$(RM) libcryptopp.a ${SHARED_LIB} libcryptopp.dylib cryptopp.dll libcryptopp.dll.a libcryptopp.import.a
+	-$(RM) adhoc.cpp.o adhoc.cpp.proto.o $(LIBOBJS) $(TESTOBJS)
 	-$(RM) cryptest.exe dlltest.exe cryptest.import.exe cryptest.info ct rdrand-???.o
 	-$(RM) *.gcno *.gcda *.stackdump core-*
 	-$(RM) /tmp/adhoc.exe
@@@@ -566,41 +134,18 @@@@ endif
 install:
 	$(MKDIR) -p $(DESTDIR)$(INCLUDEDIR)/cryptopp
 	$(CP) *.h $(DESTDIR)$(INCLUDEDIR)/cryptopp
-	-$(CHMOD) 0755 $(DESTDIR)$(INCLUDEDIR)/cryptopp
-	-$(CHMOD) 0644 $(DESTDIR)$(INCLUDEDIR)/cryptopp/*.h
-ifneq ($(wildcard libcryptopp.a),)
 	$(MKDIR) -p $(DESTDIR)$(LIBDIR)
+ifneq ($(wildcard libcryptopp.a),)
 	$(CP) libcryptopp.a $(DESTDIR)$(LIBDIR)
-	-$(CHMOD) 0644 $(DESTDIR)$(LIBDIR)/libcryptopp.a
 endif
+	$(CP) ${SHARED_LIB} $(DESTDIR)$(LIBDIR)
 ifneq ($(wildcard cryptest.exe),)
 	$(MKDIR) -p $(DESTDIR)$(BINDIR)
 	$(CP) cryptest.exe $(DESTDIR)$(BINDIR)
-	-$(CHMOD) 0755 $(DESTDIR)$(BINDIR)/cryptest.exe
 	$(MKDIR) -p $(DESTDIR)$(DATADIR)/cryptopp
 	$(CP) -r TestData $(DESTDIR)$(DATADIR)/cryptopp
 	$(CP) -r TestVectors $(DESTDIR)$(DATADIR)/cryptopp
-	-$(CHMOD) 0755 $(DESTDIR)$(DATADIR)/cryptopp
-	-$(CHMOD) 0755 $(DESTDIR)$(DATADIR)/cryptopp/TestData
-	-$(CHMOD) 0755 $(DESTDIR)$(DATADIR)/cryptopp/TestVectors
-	-$(CHMOD) 0644 $(DESTDIR)$(DATADIR)/cryptopp/TestData/*.dat
-	-$(CHMOD) 0644 $(DESTDIR)$(DATADIR)/cryptopp/TestVectors/*.txt
 endif
-ifneq ($(wildcard libcryptopp.dylib),)
-	$(MKDIR) -p $(DESTDIR)$(LIBDIR)
-	$(CP) libcryptopp.dylib $(DESTDIR)$(LIBDIR)
-	-install_name_tool -id $(DESTDIR)$(LIBDIR)/libcryptopp.dylib $(DESTDIR)$(LIBDIR)/libcryptopp.dylib
-	-$(CHMOD) 0755 $(DESTDIR)$(LIBDIR)/libcryptopp.dylib
-endif
-ifneq ($(wildcard libcryptopp.so$(SOLIB_VERSION_SUFFIX)),)
-	$(MKDIR) -p $(DESTDIR)$(LIBDIR)
-	$(CP) libcryptopp.so$(SOLIB_VERSION_SUFFIX) $(DESTDIR)$(LIBDIR)
-	-$(CHMOD) 0755 $(DESTDIR)$(LIBDIR)/libcryptopp.so$(SOLIB_VERSION_SUFFIX)
-ifeq ($(HAS_SOLIB_VERSION),1)
-	-$(LN) -sf libcryptopp.so$(SOLIB_VERSION_SUFFIX) $(DESTDIR)$(LIBDIR)/libcryptopp.so
-	$(LDCONF) $(DESTDIR)$(LIBDIR)
-endif
-endif
 
 .PHONY: remove uninstall
 remove uninstall:
@@@@ -608,38 +153,16 @@@@ remove uninstall:
 	-$(RM) $(DESTDIR)$(LIBDIR)/libcryptopp.a
 	-$(RM) $(DESTDIR)$(BINDIR)/cryptest.exe
 	-$(RM) -r $(DESTDIR)$(DATADIR)/cryptopp
-ifneq ($(IS_DARWIN),0)
-	-$(RM) $(DESTDIR)$(LIBDIR)/libcryptopp.dylib
-else
-	-$(RM) $(DESTDIR)$(LIBDIR)/libcryptopp.so$(SOLIB_VERSION_SUFFIX)
-ifeq ($(HAS_SOLIB_VERSION),1)
-	-$(RM) $(DESTDIR)$(LIBDIR)/libcryptopp.so$(SOLIB_COMPAT_SUFFIX)
-	-$(RM) $(DESTDIR)$(LIBDIR)/libcryptopp.so
-	$(LDCONF) $(DESTDIR)$(LIBDIR)
-endif
-endif
+	-$(RM) $(DESTDIR)$(LIBDIR)/${SHARED_LIB}
 
 libcryptopp.a: $(LIBOBJS)
 	$(AR) $(ARFLAGS) $@@ $(LIBOBJS)
-ifeq ($(IS_SUN),0)
 	$(RANLIB) $@@
-endif
 
-ifeq ($(HAS_SOLIB_VERSION),1)
-.PHONY: libcryptopp.so
-libcryptopp.so: libcryptopp.so$(SOLIB_VERSION_SUFFIX) | so_warning
-endif
+.PHONY: ${SHARED_LIB}
+${SHARED_LIB}: $(LIBOBJS)
+	$(CXX) -shared -o $@@ $(CXXFLAGS) $(LDFLAGS) $(LIBOBJS) $(LDLIBS)
 
-libcryptopp.so$(SOLIB_VERSION_SUFFIX): $(LIBOBJS)
-	$(CXX) -shared $(SOLIB_FLAGS) -o $@@ $(CXXFLAGS) $(LDFLAGS) $(LIBOBJS) $(LDLIBS)
-ifeq ($(HAS_SOLIB_VERSION),1)
-	-$(LN) libcryptopp.so$(SOLIB_VERSION_SUFFIX) libcryptopp.so
-	-$(LN) libcryptopp.so$(SOLIB_VERSION_SUFFIX) libcryptopp.so$(SOLIB_COMPAT_SUFFIX)
-endif
-
-libcryptopp.dylib: $(LIBOBJS)
-	$(CXX) -dynamiclib -o $@@ $(CXXFLAGS) -install_name "$@@" -current_version "$(LIB_MAJOR).$(LIB_MINOR).$(LIB_PATCH)" -compatibility_version "$(LIB_MAJOR).$(LIB_MINOR)" -headerpad_max_install_names $(LDFLAGS) $(LIBOBJS)
-
 cryptest.exe: libcryptopp.a $(TESTOBJS)
 	$(CXX) -o $@@ $(CXXFLAGS) $(TESTOBJS) ./libcryptopp.a $(LDFLAGS) $(LDLIBS)
 
@@@@ -647,73 +170,6 @@@@ cryptest.exe: libcryptopp.a $(TESTOBJS)
 nolib: $(OBJS)
 	$(CXX) -o ct $(CXXFLAGS) $(OBJS) $(LDFLAGS) $(LDLIBS)
 
-dll: cryptest.import.exe dlltest.exe
-
-cryptopp.dll: $(DLLOBJS)
-	$(CXX) -shared -o $@@ $(CXXFLAGS) $(DLLOBJS) $(LDFLAGS) $(LDLIBS) -Wl,--out-implib=libcryptopp.dll.a
-
-libcryptopp.import.a: $(LIBIMPORTOBJS)
-	$(AR) $(ARFLAGS) $@@ $(LIBIMPORTOBJS)
-ifeq ($(IS_SUN),0)
-	$(RANLIB) $@@
-endif
-
-cryptest.import.exe: cryptopp.dll libcryptopp.import.a $(TESTIMPORTOBJS)
-	$(CXX) -o $@@ $(CXXFLAGS) $(TESTIMPORTOBJS) -L. -lcryptopp.dll -lcryptopp.import $(LDFLAGS) $(LDLIBS)
-
-dlltest.exe: cryptopp.dll $(DLLTESTOBJS)
-	$(CXX) -o $@@ $(CXXFLAGS) $(DLLTESTOBJS) -L. -lcryptopp.dll $(LDFLAGS) $(LDLIBS)
-
-# This recipe prepares the distro files
-TEXT_FILES := *.h *.cpp adhoc.cpp.proto License.txt Readme.txt Install.txt Filelist.txt CMakeLists.txt config.compat Doxyfile cryptest* cryptlib* dlltest* cryptdll* *.sln *.vcxproj *.filters cryptopp.rc TestVectors/*.txt TestData/*.dat TestScripts/*.sh TestScripts/*.pl TestScripts/*.cmd
-EXEC_FILES := GNUmakefile GNUmakefile-cross TestData/ TestVectors/ TestScripts/
-
-ifeq ($(wildcard Filelist.txt),Filelist.txt)
-DIST_FILES := $(shell cat Filelist.txt)
-endif
-
-.PHONY: trim
-trim:
-ifneq ($(IS_DARWIN),0)
-	sed -i '' -e's/[[:space:]]*$$//' *.compat *.sh *.h *.cpp *.sln *.vcxproj GNUmakefile GNUmakefile-cross
-	make convert
-else
-	sed -i -e's/[[:space:]]*$$//' *.compat *.sh *.h *.cpp *.sln *.vcxproj GNUmakefile GNUmakefile-cross
-	make convert
-endif
-
-.PHONY: convert
-convert:
-	-$(CHMOD) 0700 TestVectors/ TestData/ TestScripts/
-	-$(CHMOD) 0600 $(TEXT_FILES) *.asm *.S *.zip *.cmake TestVectors/*.txt TestData/*.dat
-	-$(CHMOD) 0700 $(EXEC_FILES) *.sh *.cmd TestScripts/*.sh TestScripts/*.pl TestScripts/*.cmd
-	-$(CHMOD) 0700 *.cmd *.sh GNUmakefile GNUmakefile-cross TestScripts/*.sh TestScripts/*.pl
-	-unix2dos --keepdate --quiet $(TEXT_FILES) *.asm *.cmd *.cmake TestScripts/*.pl TestScripts/*.cmd
-	-dos2unix --keepdate --quiet GNUmakefile GNUmakefile-cross *.S *.sh TestScripts/*.sh
-ifneq ($(IS_DARWIN),0)
-	-xattr -c *
-endif
-
-# Build the ZIP file with source files. No documentation.
-.PHONY: zip dist
-zip dist: | distclean convert
-	zip -q -9 cryptopp$(LIB_VER).zip $(DIST_FILES)
-
-# Build the ISO to transfer the ZIP to old distros via CDROM
-.PHONY: iso
-iso: | zip
-ifneq ($(IS_DARWIN),0)
-	$(MKDIR) -p $(PWD)/cryptopp$(LIB_VER)
-	$(CP) cryptopp$(LIB_VER).zip $(PWD)/cryptopp$(LIB_VER)
-	hdiutil makehybrid -iso -joliet -o cryptopp$(LIB_VER).iso $(PWD)/cryptopp$(LIB_VER)
-	-$(RM) -r $(PWD)/cryptopp$(LIB_VER)
-else ifneq ($(IS_LINUX),0)
-	$(MKDIR) -p $(PWD)/cryptopp$(LIB_VER)
-	$(CP) cryptopp$(LIB_VER).zip $(PWD)/cryptopp$(LIB_VER)
-	genisoimage -q -o cryptopp$(LIB_VER).iso $(PWD)/cryptopp$(LIB_VER)
-	-$(RM) -r $(PWD)/cryptopp$(LIB_VER)
-endif
-
 # CRYPTOPP_CPU_SPEED in GHz
 CRYPTOPP_CPU_SPEED ?= 2.4
 .PHONY: bench benchmark benchmarks
@@@@ -738,22 +194,6 @@@@ else
 	touch adhoc.cpp
 endif
 
-# Include dependencies, if present. You must issue `make deps` to create them.
-ifeq ($(wildcard GNUmakefile.deps),GNUmakefile.deps)
--include GNUmakefile.deps
-endif # Dependencies
-
-# MacPorts/GCC issue with init_priority. Apple/GCC and Fink/GCC are fine; limit to MacPorts.
-#   Also see http://lists.macosforge.org/pipermail/macports-users/2015-September/039223.html
-ifeq ($(GCC_COMPILER)$(MACPORTS_COMPILER),11)
-ifeq ($(findstring -DMACPORTS_GCC_COMPILER,$(CXXFLAGS)),)
-cryptlib.o:
-	$(CXX) $(CXXFLAGS) -DMACPORTS_GCC_COMPILER=1 -c cryptlib.cpp
-cpu.o:
-	$(CXX) $(CXXFLAGS) -DMACPORTS_GCC_COMPILER=1 -c cpu.cpp
-endif
-endif
-
 # Only use CRYPTOPP_DATA_DIR if its not set in CXXFLAGS
 ifeq ($(findstring -DCRYPTOPP_DATA_DIR,$(CXXFLAGS)),)
 ifneq ($(strip $(CRYPTOPP_DATA_DIR)),)
@@@@ -768,26 +208,5 @@@@ test.o : test.cpp
 endif
 endif
 
-%.dllonly.o : %.cpp
-	$(CXX) $(CXXFLAGS) -DCRYPTOPP_DLL_ONLY -c $< -o $@@
-
-%.import.o : %.cpp
-	$(CXX) $(CXXFLAGS) -DCRYPTOPP_IMPORTS -c $< -o $@@
-
-%.export.o : %.cpp
-	$(CXX) $(CXXFLAGS) -DCRYPTOPP_EXPORTS -c $< -o $@@
-
-%.bc : %.cpp
-	$(CXX) $(CXXFLAGS) -c $<
-
 %.o : %.cpp
 	$(CXX) $(CXXFLAGS) -c $<
-
-.PHONY: so_warning
-so_warning:
-ifeq ($(HAS_SOLIB_VERSION),1)
-	$(info WARNING: Only the symlinks to the shared-object library have been updated.)
-	$(info WARNING: If the library is installed in a system directory you will need)
-	$(info WARNING: to run 'ldconfig' to update the shared-object library cache.)
-	$(info )
-endif
@


1.5
log
@
Update to cryptopp-5.6.4
@
text
@d1 3
a3 3
$OpenBSD: patch-GNUmakefile,v 1.4 2015/11/23 13:19:40 dcoppa Exp $
--- GNUmakefile.orig	Mon Nov 23 12:40:00 2015
+++ GNUmakefile	Mon Nov 23 12:41:22 2015
d75 1
a75 1
@@@@ -83,336 +47,7 @@@@ ifeq ($(INCLUDEDIR),)
a293 4
-# Add to Sun Studio 12.2 and above
-ifneq ($(SUNCC_511_OR_LATER),0)
-CXXFLAGS += -w -erroff=wvarhidemem -erroff=voidretw
-endif
d408 1
a408 1
@@@@ -422,7 +57,7 @@@@ endif # HAS_SOLIB_VERSION
d417 1
a417 1
@@@@ -430,10 +65,6 @@@@ ifeq ($(IS_X86)$(IS_X64),00)
d425 1
a425 1
 # List of objects with crytlib.o and cpu.o at the first and second index position
d428 15
a442 1
@@@@ -456,43 +87,19 @@@@ DLLTESTOBJS := dlltest.dllonly.o
d459 4
a462 4
 .PHONY: deps
 deps GNUmakefile.deps:
 	$(CXX) $(CXXFLAGS) -MM *.cpp > GNUmakefile.deps
 
d488 7
a494 6
 # Used to generate list of source files for Autotools, CMakeList, Android.mk, etc
 .PHONY: sources
@@@@ -501,32 +108,9 @@@@ sources:
 	$(info )
 	$(info Test sources: $(TESTSRCS))
 
d521 1
d523 1
a523 1
 	-$(RM) adhoc.cpp.o adhoc.cpp.proto.o $(LIBOBJS) $(TESTOBJS) $(DLLOBJS) $(LIBIMPORTOBJS) $(TESTIMPORTOBJS) $(DLLTESTOBJS)
d526 2
a527 1
@@@@ -572,41 +156,18 @@@@ endif
d533 1
a533 1
 ifneq ($(wildcard libcryptopp.a),)
d535 1
d539 1
a551 1
+	-$(CP) ${SHARED_LIB} $(PREFIX)/lib
d571 1
a571 1
@@@@ -614,39 +175,17 @@@@ remove uninstall:
d585 1
a585 1
+	-$(RM) $(PREFIX)/lib/${SHARED_LIB}
d587 1
a587 2
-libcryptopp.a: $(LIBOBJS) | config_warning
+libcryptopp.a: $(LIBOBJS)
d611 1
a611 2
-cryptest.exe: libcryptopp.a $(TESTOBJS) | config_warning
+cryptest.exe: libcryptopp.a $(TESTOBJS)
d614 3
a616 2
 # Makes it faster to test changes
@@@@ -660,9 +199,6 @@@@ cryptopp.dll: $(DLLOBJS)
d618 7
a624 2
 libcryptopp.import.a: $(LIBIMPORTOBJS)
 	$(AR) $(ARFLAGS) $@@ $(LIBIMPORTOBJS)
d628 25
a652 7
 
 cryptest.import.exe: cryptopp.dll libcryptopp.import.a $(TESTIMPORTOBJS)
 	$(CXX) -o $@@ $(CXXFLAGS) $(TESTIMPORTOBJS) -L. -lcryptopp.dll -lcryptopp.import $(LDFLAGS) $(LDLIBS)
@@@@ -678,38 +214,6 @@@@ ifeq ($(wildcard Filelist.txt),Filelist.txt)
 DIST_FILES := $(shell cat Filelist.txt)
 endif
 
d655 6
a660 6
-	-$(CHMOD) 0700 TestVectors/ TestData/
-	-$(CHMOD) 0600 $(TEXT_FILES) *.asm *.S *.zip *.cmake
-	-$(CHMOD) 0700 $(EXEC_FILES) *.sh *.cmd
-	-$(CHMOD) 0700 *.cmd *.sh GNUmakefile GNUmakefile-cross
-	-unix2dos --keepdate --quiet $(TEXT_FILES) *.asm *.cmd *.cmake
-	-dos2unix --keepdate --quiet GNUmakefile GNUmakefile-cross *.S *.sh
d688 3
a690 3
@@@@ -739,17 +243,6 @@@@ ifeq ($(wildcard GNUmakefile.deps),GNUmakefile.deps)
 -include GNUmakefile.deps
 endif # Dependencies
d692 5
d711 3
a713 1
@@@@ -778,34 +271,3 @@@@ endif
d715 12
a728 22
-
-# Warn of potential configuration issues. They will go away after 5.6.4.
-UNALIGNED_ACCESS := $(shell $(EGREP) -c "^[[:space:]]*//[[:space:]]*\#[[:space:]]*define[[:space:]]*CRYPTOPP_NO_UNALIGNED_DATA_ACCESS" config.h)
-NO_INIT_PRIORITY := $(shell $(EGREP) -c "^[[:space:]]*//[[:space:]]*\#[[:space:]]*define[[:space:]]*CRYPTOPP_INIT_PRIORITY" config.h)
-COMPATIBILITY_562 := $(shell $(EGREP) -c "^[[:space:]]*\#[[:space:]]*define[[:space:]]*CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562" config.h)
-.PHONY: config_warning
-config_warning:
-ifneq ($(UNALIGNED_ACCESS),0)
-	$(info WARNING: CRYPTOPP_NO_UNALIGNED_DATA_ACCESS is not defined in config.h.)
-endif
-ifneq ($(NO_INIT_PRIORITY),0)
-	$(info WARNING: CRYPTOPP_INIT_PRIORITY is not defined in config.h.)
-endif
-ifneq ($(COMPATIBILITY_562),0)
-	$(info WARNING: CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562 is defined in config.h.)
-endif
-ifneq ($(UNALIGNED_ACCESS)$(NO_INIT_PRIORITY)$(COMPATIBILITY_562),000)
-	$(info WARNING: You should make these changes in config.h, and not CXXFLAGS.)
-	$(info WARNING: You can 'mv config.recommend config.h', but it breaks versioning.)
-	$(info WARNING: See http://cryptopp.com/wiki/config.h for more details.)
-	$(info )
-endif
@


1.4
log
@
Update to cryptopp-5.6.3
@
text
@d1 1
a1 1
$OpenBSD: patch-GNUmakefile,v 1.3 2013/03/14 11:16:02 dcoppa Exp $
d4 5
a8 14
@@@@ -1,6 +1,12 @@@@
 # Base CXXFLAGS used if the user did not specify them
+ifndef CXXFLAGS
 CXXFLAGS ?= -DNDEBUG -g2 -O2
+endif
 
+ifndef LDFLAGS
+LDFLAGS = -lpthread
+endif
+
 # -fPIC is supported, please report failures with steps to reproduce
 # If PIC is required but results in a crash, then use -DCRYPTOPP_DISABLE_ASM
 # CXXFLAGS += -fPIC
@@@@ -19,221 +25,14 @@@@ CHMOD ?= chmod
d10 3
a12 1
 EGREP ?= egrep
d14 9
a22 6
-UNAME := $(shell uname)
-IS_X86 := $(shell uname -m | $(EGREP) -i -c "i.86|x86|i86|amd64")
-IS_X86_64 := $(shell uname -m | $(EGREP) -i -c "(_64|d64)")
-IS_AARCH64 := $(shell uname -m | $(EGREP) -i -c "aarch64")
+IS_X86 := $(shell arch -s | $(EGREP) -i -c "i.86|x86|i86|amd64")
+IS_X86_64 := $(shell arch -s | $(EGREP) -i -c "(_64|d64)")
d29 1
d31 2
a32 2
-SUN_COMPILER := $(shell $(CXX) -V 2>&1 | $(EGREP) -i -c "CC: Sun")
-GCC_COMPILER := $(shell $(CXX) --version 2>&1 | $(EGREP) -i -c "(gcc|g\+\+)")
d34 1
a34 1
-INTEL_COMPILER := $(shell $(CXX) --version 2>&1 | $(EGREP) -c "\(ICC\)")
d37 35
d74 3
a76 1
 PREFIX = /usr
d79 2
a80 1
-ifeq ($(CXX),gcc)	# for some reason CXX is gcc on cygwin 1.1.4
d84 1
a84 1
-# We honor ARFLAGS, but the "v" often option used by default causes a noisy make
d89 16
a104 1
-ifeq ($(IS_X86),1)
d106 5
a110 5
-IS_GCC_29 := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c gcc-9[0-9][0-9])
-GCC42_OR_LATER := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c "gcc version (4\.[2-9]|[5-9]\.)")
-GCC46_OR_LATER := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c "gcc version (4\.[6-9]|[5-9]\.)")
-GCC48_OR_LATER := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c "gcc version (4\.[8-9]|[5-9]\.)")
-GCC49_OR_LATER := $(shell $(CXX) -v 2>&1 | $(EGREP) -i -c "gcc version (4\.9|[5-9]\.)")
d113 3
a115 8
-GAS210_OR_LATER := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.[1-9][0-9]|[3-9])")
-GAS217_OR_LATER := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.1[7-9]|2\.[2-9]|[3-9])")
-GAS219_OR_LATER := $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.19|2\.[2-9]|[3-9])")
-
-# Add -fPIC for x86_64, but not X32, Cygwin or MinGW
-ifneq ($(IS_X86_64),0)
- IS_X32 := $(shell $(CXX) -dM -E - < /dev/null 2>&1 | $(EGREP) -c "ILP32")
- ifeq ($(IS_X32)$(IS_CYGWIN)$(IS_MINGW),000)
a118 1
- endif
d122 1
a122 1
-ifeq ($(GCC_COMPILER),0)
d124 1
a124 1
-else ifneq ($(GCC42_OR_LATER),0)
d128 4
a131 2
-  # GCC 4.1 compiler crash with -march=native.
-  ifneq ($(IS_X86_64),0)
d133 1
a133 1
-  else
d138 1
a138 1
-# Aligned access required at -O3 for GCC due to vectorization (circa 08/2008). Expect other compilers to do the same.
a139 1
-ifeq ($(findstring -O3,$(CXXFLAGS)),-O3)
a140 1
-ifeq ($(GCC46_OR_LATER),1)
d142 1
d144 7
a151 1
-endif # GCC 4.6
a152 1
-endif # Vectorization
d163 2
a164 1
-ifeq ($(GCC_COMPILER)$(GAS210_OR_LATER),10)	# .intel_syntax wasn't supported until GNU assembler 2.10
d167 1
a167 1
-ifeq ($(GCC_COMPILER)$(GAS217_OR_LATER),10)
d170 1
a170 1
-ifeq ($(GCC_COMPILER)$(GAS219_OR_LATER),10)
d174 1
d176 9
a184 2
-ifneq ($(IS_SUN),0)
-CXXFLAGS += -Wa,--divide	# allow use of "/" operator
d186 5
d193 7
a199 1
-endif	# IS_X86
d204 19
d225 23
d253 4
a263 3
-ifneq ($(IS_X86_64),0)
-M32OR64 = -m64
-endif
a265 7
-# And add it for ARM64, too
-ifneq ($(IS_AARCH64),0)
- ifeq ($(findstring -fPIC,$(CXXFLAGS)),)
-   CXXFLAGS += -fPIC
- endif
-endif
-
d277 20
a296 3
-ifneq ($(IS_SUN),0)
-LDLIBS += -lnsl -lsocket
-M32OR64 = -m$(shell isainfo -b)
a297 7
-
-ifneq ($(SUN_COMPILER),0)	# override flags for CC Sun C++ compiler
-CXXFLAGS ?= -DNDEBUG -O -g0 -native -template=no%extdef $(M32OR64)
-LDFLAGS =
-AR = $(CXX)
-ARFLAGS = -xar -o
-RANLIB = true
d304 6
d323 1
a323 1
-# Address Sanitizer (Asan) testing
d328 3
d333 1
a333 1
-# LD gold linker testing
d335 1
a335 1
-ifeq ($(findstring -Wl,-fuse-ld=gold,$(CXXFLAGS)),)
d338 1
a338 1
-GOLD_OPTION = -Wl,-fuse-ld=gold
d343 1
a343 1
-# Aligned access testing
d347 1
a347 1
-endif # # CXXFLAGS
d350 9
a358 1
-# Debug testing on GNU systems
d362 2
d367 1
a367 3
-ifeq ($(findstring -D_GLIBCXX_CONCEPT_CHECKS,$(CXXFLAGS)),)
-CXXFLAGS += -D_GLIBCXX_CONCEPT_CHECKS
-endif # CXXFLAGS
d371 52
a422 5
 # List cryptlib.cpp first and cpu.o second in an attempt to tame C++ static initialization problems. The issue
 #  spills into POD data types, so cpu.cpp is the second candidate for explicit initialization order.
 SRCS := cryptlib.cpp cpu.cpp $(filter-out cryptlib.cpp cpu.cpp pch.cpp simple.cpp winpipes.cpp cryptlib_bds.cpp,$(wildcard *.cpp))
@@@@ -243,10 +42,6 @@@@ ifeq ($(IS_X86)$(IS_X86_64),00)
   SRCS := $(filter-out cpu.cpp rdrand.cpp, $(SRCS))
d432 2
a433 3
@@@@ -273,26 +68,19 @@@@ ifeq ($(strip $(LIB_PATCH)),)
 LIB_PATCH := 0
 endif
d435 1
d446 1
a446 1
-shared dynamic: libcryptopp.so
d453 1
d457 16
d478 26
a503 4
 # Directory we want (can't specify on Doygen command line)
 DOCUMENT_DIRECTORY := ref$(LIB_VER)
@@@@ -315,7 +103,7 @@@@ docs html:
 
d506 4
a509 1
-	-$(RM) libcryptopp.a libcryptopp.so libcryptopp.dylib cryptopp.dll libcryptopp.dll.a libcryptopp.import.a
d511 4
a514 4
 	-$(RM) adhoc.cpp.o adhoc.cpp.proto.o $(LIBOBJS) $(TESTOBJS) $(DLLOBJS) $(LIBIMPORTOBJS) $(TESTIMPORTOBJS) $(DLLTESTOBJS) *.stackdump core-*
 	-$(RM) cryptest.exe dlltest.exe cryptest.import.exe ct rdrand-???.o
 ifneq ($(wildcard *.exe.dSYM),)
@@@@ -345,44 +133,27 @@@@ endif
d516 37
a552 14
 	$(MKDIR) -p $(PREFIX)/include/cryptopp $(PREFIX)/lib $(PREFIX)/bin
 	-$(CP) *.h $(PREFIX)/include/cryptopp
-	-$(CHMOD) 755 $(PREFIX)/include/cryptopp
-	-$(CHMOD) 644 $(PREFIX)/include/cryptopp/*.h
 	-$(CP) libcryptopp.a $(PREFIX)/lib
-	-$(CHMOD) 644 $(PREFIX)/lib/libcryptopp.a
 	-$(CP) cryptest.exe $(PREFIX)/bin
-	-$(CHMOD) 755 $(PREFIX)/bin/cryptest.exe
-ifneq ($(IS_DARWIN),0)
-	-$(CP) libcryptopp.dylib $(PREFIX)/lib
-	-$(CHMOD) 755 $(PREFIX)/lib/libcryptopp.dylib
-else
-	-$(CP) libcryptopp.so $(PREFIX)/lib
-	-$(CHMOD) 755 $(PREFIX)/lib/libcryptopp.so
a553 1
+	-$(CP) ${SHARED_LIB} $(PREFIX)/lib
d557 4
a560 3
 	-$(RM) -r $(PREFIX)/include/cryptopp
 	-$(RM) $(PREFIX)/lib/libcryptopp.a
 	-$(RM) $(PREFIX)/bin/cryptest.exe
d562 1
a562 1
-	-$(RM) $(PREFIX)/lib/libcryptopp.dylib
d564 6
a569 1
-	-$(RM) $(PREFIX)/lib/libcryptopp.so
d573 1
a573 1
-libcryptopp.a: public_service | $(LIBOBJS)
d576 1
d578 1
d580 5
a584 2
-libcryptopp.so: public_service | $(LIBOBJS)
-	$(CXX) -shared -o $@@ $(CXXFLAGS) $(GOLD_OPTION) $(LIBOBJS) $(LDLIBS)
d586 1
a586 1
+	$(CXX) -shared -o $@@ $(CXXFLAGS) $(LIBOBJS) $(LDFLAGS) $(LDLIBS)
d588 7
d596 3
a598 1
-	$(CXX) -dynamiclib -o $@@ $(CXXFLAGS) -install_name "$@@" -current_version "$(LIB_MAJOR).$(LIB_MINOR).$(LIB_PATCH)" -compatibility_version "$(LIB_MAJOR).$(LIB_MINOR)" $(LIBOBJS)
d600 16
a615 1
+	$(CXX) -o $@@ $(CXXFLAGS) $(TESTOBJS) ./libcryptopp.a $(LDFLAGS) $(LDLIBS)
d617 16
a632 2
-cryptest.exe: public_service | libcryptopp.a $(TESTOBJS)
-	$(CXX) -o $@@ $(CXXFLAGS) $(TESTOBJS) ./libcryptopp.a $(LDFLAGS) $(GOLD_OPTION) $(LDLIBS)
d634 3
a636 7
 nolib: $(OBJS)		# makes it faster to test changes
 	$(CXX) -o ct $(CXXFLAGS) $(OBJS) $(LDFLAGS) $(LDLIBS)
 
@@@@ -423,9 +194,6 @@@@ convert:
 	chmod u+x *.cmd *.sh
 	unix2dos --keepdate --quiet $(TEXT_FILES) *.asm *.cmd
 	dos2unix --keepdate --quiet GNUmakefile GNUmakefile-cross *.S *.sh
d638 9
a646 1
-	xattr -c *
d648 5
a652 4
 
 .PHONY: zip dist
 zip dist: | distclean convert diff
@@@@ -458,17 +226,6 @@@@ ifeq ($(wildcard GNUmakefile.deps),GNUmakefile.deps)
d667 4
a670 4
 %.dllonly.o : %.cpp
 	$(CXX) $(CXXFLAGS) -DCRYPTOPP_DLL_ONLY -c $< -o $@@
 
@@@@ -480,25 +237,3 @@@@ endif
d675 1
a675 1
-# Warn of potential configurations issues. They will go away after 5.6.3.
d679 2
a680 2
-.PHONY: public_service
-public_service:
d694 9
@


1.3
log
@Update to cryptopp-5.6.2; lots of local patches go to the attic.
@
text
@d1 5
a5 4
$OpenBSD: patch-GNUmakefile,v 1.2 2011/06/24 07:55:17 dcoppa Exp $
--- GNUmakefile.orig	Thu Mar 14 11:33:28 2013
+++ GNUmakefile	Thu Mar 14 11:41:45 2013
@@@@ -1,4 +1,9 @@@@
d7 1
a7 1
 CXXFLAGS = -DNDEBUG -g -O2
d9 1
d13 3
a15 2
 # -O3 fails to link on Cygwin GCC version 4.5.3
 # -fPIC is supported. Please report any breakage of -fPIC as a bug.
d17 10
a26 11
@@@@ -9,118 +14,12 @@@@ ARFLAGS = -cr	# ar needs the dash on OpenBSD
 RANLIB = ranlib
 CP = cp
 MKDIR = mkdir
-EGREP = egrep
-UNAME = $(shell uname)
-ISX86 = $(shell uname -m | $(EGREP) -c "i.86|x86|i86|amd64")
-IS_SUN_CC = $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: Sun")
-IS_LINUX = $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -c "linux")
-IS_MINGW = $(shell $(CXX) -dumpmachine 2>&1 | $(EGREP) -c "mingw")
-CLANG_COMPILER = $(shell $(CXX) --version 2>&1 | $(EGREP) -i -c "clang version")
d28 12
d46 1
a46 1
-CXX = g++
d49 33
a81 12
-ifeq ($(ISX86),1)
-
-GCC42_OR_LATER = $(shell $(CXX) -v 2>&1 | $(EGREP) -c "^gcc version (4.[2-9]|[5-9])")
-INTEL_COMPILER = $(shell $(CXX) --version 2>&1 | $(EGREP) -c "\(ICC\)")
-ICC111_OR_LATER = $(shell $(CXX) --version 2>&1 | $(EGREP) -c "\(ICC\) ([2-9][0-9]|1[2-9]|11\.[1-9])")
-GAS210_OR_LATER = $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.[1-9][0-9]|[3-9])")
-GAS217_OR_LATER = $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.1[7-9]|2\.[2-9]|[3-9])")
-GAS219_OR_LATER = $(shell $(CXX) -xc -c /dev/null -Wa,-v -o/dev/null 2>&1 | $(EGREP) -c "GNU assembler version (2\.19|2\.[2-9]|[3-9])")
-
-ifneq ($(GCC42_OR_LATER),0)
-ifeq ($(UNAME),Darwin)
-CXXFLAGS += -arch x86_64 -arch i386
d83 20
a102 3
-CXXFLAGS += -march=native
-endif
-endif
d105 1
a105 1
-CXXFLAGS += -wd68 -wd186 -wd279 -wd327
d113 1
a113 1
-ifeq ($(GAS210_OR_LATER),0)	# .intel_syntax wasn't supported until GNU assembler 2.10
d116 1
a116 1
-ifeq ($(GAS217_OR_LATER),0)
d119 1
a119 1
-ifeq ($(GAS219_OR_LATER),0)
d123 2
a124 1
-ifeq ($(UNAME),SunOS)
d129 1
a129 1
-endif	# ISX86
d133 1
a133 1
-else
d137 1
a137 1
-ifeq ($(IS_MINGW),1)
d143 6
a148 1
-ifneq ($(shell uname -i | $(EGREP) -c "(_64|d64)"),0)
d151 7
d160 1
a160 1
-ifeq ($(UNAME),Darwin)
d163 2
a164 3
-CXX = c++
-IS_GCC2 = $(shell $(CXX) -v 2>&1 | $(EGREP) -c gcc-932)
-ifeq ($(IS_GCC2),1)
d171 1
a171 1
-ifeq ($(UNAME),SunOS)
d176 2
a177 6
-ifneq ($(CLANG_COMPILER),0)
-CXXFLAGS += -Wno-tautological-compare
-endif
-
-ifneq ($(IS_SUN_CC),0)	# override flags for CC Sun C++ compiler
-CXXFLAGS = -DNDEBUG -O -g0 -native -template=no%extdef $(M32OR64)
d182 1
a182 1
-SUN_CC10_BUGGY = $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: Sun .* 5\.10 .* (2009|2010/0[1-4])")
d190 65
a254 6
 SRCS = $(wildcard *.cpp)
 ifeq ($(SRCS),)				# workaround wildcard function bug in GNU Make 3.77
 SRCS = $(shell echo *.cpp)
@@@@ -137,12 +36,12 @@@@ LIBIMPORTOBJS = $(LIBOBJS:.o=.import.o)
 TESTIMPORTOBJS = $(TESTOBJS:.o=.import.o)
 DLLTESTOBJS = dlltest.dllonly.o
a256 2
-static: libcryptopp.a
-dynamic: libcryptopp.so
d259 2
a260 1
+all: libcryptopp.a ${SHARED_LIB}
d262 16
a277 1
 test: cryptest.exe
d281 5
d287 40
a326 4
 	-$(RM) cryptest.exe libcryptopp.a libcryptopp.so $(LIBOBJS) $(TESTOBJS) cryptopp.dll libcryptopp.dll.a libcryptopp.import.a cryptest.import.exe dlltest.exe $(DLLOBJS) $(LIBIMPORTOBJS) $(TESTI MPORTOBJS) $(DLLTESTOBJS)
@@@@ -167,8 +66,11 @@@@ libcryptopp.a: $(LIBOBJS)
 libcryptopp.so: $(LIBOBJS)
 	$(CXX) -shared -o $@@ $(LIBOBJS)
d328 9
a336 6
+${SHARED_LIB}: ${LIBOBJS}
+	$(CXX) -shared -o $@@ $(CXXFLAGS) $(LIBOBJS) $(LDFLAGS)
+
 cryptest.exe: libcryptopp.a $(TESTOBJS)
-	$(CXX) -o $@@ $(CXXFLAGS) $(TESTOBJS) ./libcryptopp.a $(LDFLAGS) $(LDLIBS)
+	$(CXX) -o $@@ $(CXXFLAGS) $(TESTOBJS) -L${WRKDIST} -lcryptopp $(LDFLAGS) $(LDLIBS)
d338 3
d343 55
@


1.2
log
@Update to cryptopp-5.6.1

'go for it' espie@@
@
text
@d1 3
a3 3
$OpenBSD: patch-GNUmakefile,v 1.1.1.1 2008/08/26 14:57:58 espie Exp $
--- GNUmakefile.orig	Sun Sep 23 21:03:14 2007
+++ GNUmakefile	Sun Jun 15 10:30:30 2008
d9 1
a9 1
+LDFLAGS = -pthread
d11 1
a11 1
 #CXXFLAGS = -g
d14 1
a14 1
@@@@ -9,112 +14,12 @@@@ ARFLAGS = -cr	# ar needs the dash on OpenBSD
d21 4
d40 3
a42 5
-IS_SUN_CC = $(shell $(CXX) -V 2>&1 | $(EGREP) -c "CC: Sun")
-GAS210_OR_LATER = $(shell echo "" | $(AS) -v 2>&1 | $(EGREP) -c "GNU assembler version (2\.[1-9][0-9]|[3-9])")
-GAS217_OR_LATER = $(shell echo "" | $(AS) -v 2>&1 | $(EGREP) -c "GNU assembler version (2\.1[7-9]|2\.[2-9]|[3-9])")
-GAS219_OR_LATER = $(shell echo "" | $(AS) -v 2>&1 | $(EGREP) -c "GNU assembler version (2\.19|2\.[2-9]|[3-9])")
-ISMINGW = $(shell $(CXX) --version 2>&1 | $(EGREP) -c "mingw")
a75 4
-ifeq ($(ISMINGW),1)
-LDLIBS += -lws2_32
-endif
-
d84 5
a88 1
-ifeq ($(UNAME),Linux)
d112 4
d133 1
a133 1
@@@@ -131,10 +36,12 @@@@ LIBIMPORTOBJS = $(LIBOBJS:.o=.import.o)
d138 2
d149 2
a150 2
 	$(RM) cryptest.exe libcryptopp.a $(LIBOBJS) $(TESTOBJS) cryptopp.dll libcryptopp.dll.a libcryptopp.import.a cryptest.import.exe dlltest.exe $(DLLOBJS) $(LIBIMPORTOBJS) $(TESTIMPORTOBJS) $(DLLTESTOBJS)
@@@@ -153,8 +60,11 @@@@ libcryptopp.a: $(LIBOBJS)
d158 1
a158 1
-	$(CXX) -o $@@ $(CXXFLAGS) $(TESTOBJS) -L. -lcryptopp $(LDFLAGS) $(LDLIBS)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d4 151
a154 17
@@@@ -102,7 +102,15 @@@@ LIBIMPORTOBJS = $(LIBOBJS:.o=.import.o)
 TESTIMPORTOBJS = $(TESTOBJS:.o=.import.o)
 DLLTESTOBJS = dlltest.dllonly.o
 
-all: cryptest.exe
+SHARED_LIB = libcryptopp.so.${LIBcryptopp_VERSION}
+
+all:  libcryptopp.a ${SHARED_LIB}
+
+${SHARED_LIB}: ${LIBOBJS}
+	$(CXX) -shared -o $@@ $(CXXFLAGS) $(LIBOBJS) $(LDFLAGS)
+
+regress: cryptest.exe
+	LD_LIBRARY_PATH=. ./cryptest.exe
 
 clean:
 	$(RM) cryptest.exe libcryptopp.a $(LIBOBJS) $(TESTOBJS) cryptopp.dll libcryptopp.dll.a libcryptopp.import.a cryptest.import.exe dlltest.exe $(DLLOBJS) $(LIBIMPORTOBJS) $(TESTIMPORTOBJS) $(DLLTESTOBJS)
@


1.1.1.1
log
@yet another crypto library, dependency for amule, when we get it to
work.
@
text
@@
