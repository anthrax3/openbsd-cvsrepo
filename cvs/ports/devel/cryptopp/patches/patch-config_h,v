head	1.9;
access;
symbols
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	cryptopp:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2016.11.22.17.20.25;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	I1b7UlKmxi0fWXv6;

1.8
date	2016.10.10.12.55.51;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	TEvn5Z1IJ15l9dnk;

1.7
date	2016.09.13.13.50.59;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	hpfOMqSA4i5rL55T;

1.6
date	2015.11.23.13.19.40;	author dcoppa;	state dead;
branches;
next	1.5;
commitid	lkx07lop9gGuBBc8;

1.5
date	2015.06.24.09.41.33;	author dcoppa;	state Exp;
branches;
next	1.4;
commitid	pp6aIfeq6bw3H6d4;

1.4
date	2015.06.24.09.19.49;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	80hPFeCigluZTN0M;

1.3
date	2013.03.14.11.16.02;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.24.07.55.18;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.08.26.14.57.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
Update to cryptopp-5.6.5
@
text
@$OpenBSD: patch-config_h,v 1.8 2016/10/10 12:55:51 dcoppa Exp $
--- config.h.orig	Tue Nov 22 12:10:09 2016
+++ config.h	Tue Nov 22 12:42:04 2016
@@@@ -47,7 +47,7 @@@@
 // If the user did not make a choice, then select CryptoNG if either
 // Visual Studio 2015 is available, or Windows 10 or above is available.
 #if !defined(USE_MS_CRYPTOAPI) && !defined(USE_MS_CNGAPI)
-# if (_MSC_VER >= 1900) || ((WINVER >= 0x0A00 /*_WIN32_WINNT_WIN10*/) || (_WIN32_WINNT >= 0x0A00 /*_WIN32_WINNT_WIN10*/))
+# if (defined(_MSC_VER) && (_MSC_VER >= 1900)) || ((defined(WINVER) && (WINVER >= 0x0A00)) || (defined(_WIN32_WINNT) && (_WIN32_WINNT >= 0x0A00)))
 #  define USE_MS_CNGAPI
 # else
 #  define USE_MS_CRYPTOAPI
@@@@ -152,16 +152,16 @@@@
 #endif
 
 // __attribute__(init_priority(250)) is supported
-#if (__GNUC__ && (CRYPTOPP_INIT_PRIORITY > 0) && ((CRYPTOPP_GCC_VERSION >= 40300) || (CRYPTOPP_LLVM_CLANG_VERSION >= 20900) || (_INTEL_COMPILER >= 300)) && !(MACPORTS_GCC_COMPILER > 0) && !defined(__sun__))
+#if (__GNUC__ && (CRYPTOPP_INIT_PRIORITY > 0) && ((defined(CRYPTOPP_GCC_VERSION) && (CRYPTOPP_GCC_VERSION >= 40300)) || (defined(CRYPTOPP_LLVM_CLANG_VERSION) && (CRYPTOPP_LLVM_CLANG_VERSION >= 20900)) || (defined(_INTEL_COMPILER) && (_INTEL_COMPILER >= 300))) && !(MACPORTS_GCC_COMPILER > 0) && !defined(__sun__))
 # define HAVE_GCC_CONSTRUCTOR1 1
 #endif
 
 // __attribute__(init_priority()) is supported
-#if (__GNUC__ && (CRYPTOPP_INIT_PRIORITY > 0) && !HAVE_GCC_CONSTRUCTOR1 && !(MACPORTS_GCC_COMPILER > 0) && !defined(__sun__))
+#if (__GNUC__ && (CRYPTOPP_INIT_PRIORITY > 0) && !defined(HAVE_GCC_CONSTRUCTOR1) && (defined(MACPORTS_GCC_COMPILER) && !(MACPORTS_GCC_COMPILER > 0)) && !defined(__sun__))
 # define HAVE_GCC_CONSTRUCTOR0 1
 #endif
 
-#if (_MSC_VER && (CRYPTOPP_INIT_PRIORITY > 0))
+#if (defined(_MSC_VER) && (CRYPTOPP_INIT_PRIORITY > 0))
 # define HAVE_MSC_INIT_PRIORITY 1
 #endif
 
@@@@ -273,7 +273,7 @@@@ const lword LWORD_MAX = W64LIT(0xffffffffffffffff);
 #endif
 
 // Need GCC 4.6/Clang 1.7/Apple Clang 2.0 or above due to "GCC diagnostic {push|pop}"
-#if (CRYPTOPP_GCC_VERSION >= 40600) || (CRYPTOPP_LLVM_CLANG_VERSION >= 10700) || (CRYPTOPP_APPLE_CLANG_VERSION >= 20000)
+#if (CRYPTOPP_GCC_VERSION >= 40600) || (defined(CRYPTOPP_LLVM_CLANG_VERSION) && (CRYPTOPP_LLVM_CLANG_VERSION >= 10700)) || (defined(CRYPTOPP_APPLE_CLANG_VERSION) && (CRYPTOPP_APPLE_CLANG_VERSION >= 20000))
 	#define CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE 1
 #endif
 
@@@@ -364,7 +364,7 @@@@ NAMESPACE_END
 #endif
 
 // The section attribute attempts to initialize CPU flags to avoid Valgrind findings above -O1
-#if ((__MACH__ >= 1) && ((CRYPTOPP_LLVM_CLANG_VERSION >= 30600) || (CRYPTOPP_APPLE_CLANG_VERSION >= 70100) || (CRYPTOPP_GCC_VERSION >= 40300)))
+#if ((defined(__MACH__) && (__MACH__ >= 1)) && ((CRYPTOPP_LLVM_CLANG_VERSION >= 30600) || (CRYPTOPP_APPLE_CLANG_VERSION >= 70100) || (CRYPTOPP_GCC_VERSION >= 40300)))
 	#define CRYPTOPP_SECTION_INIT __attribute__((section ("__DATA,__data")))
 #elif ((__ELF__ >= 1) && (CRYPTOPP_GCC_VERSION >= 40300))
 	#define CRYPTOPP_SECTION_INIT __attribute__((section ("nocommon")))
@@@@ -423,7 +423,7 @@@@ NAMESPACE_END
 #endif
 
 // [GCC Bug 53431] "C++ preprocessor ignores #pragma GCC diagnostic". Clang honors it.
-#if CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE
+#if defined(CRYPTOPP_GCC_DIAGNOSTIC_AVAILABLE)
 # pragma GCC diagnostic ignored "-Wunknown-pragmas"
 # pragma GCC diagnostic ignored "-Wunused-function"
 #endif
@@@@ -465,7 +465,7 @@@@ NAMESPACE_END
 		#define CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE 0
 	#endif
 
-	#if !defined(CRYPTOPP_DISABLE_SSE3) && (_MSC_VER >= 1500 || (defined(__SSE3__) && defined(__SSSE3__)))
+	#if !defined(CRYPTOPP_DISABLE_SSE3) && ((defined(_MSC_VER) && (_MSC_VER >= 1500)) || (defined(__SSE3__) && defined(__SSSE3__)))
 		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 1
 	#else
 		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 0
@@@@ -489,21 +489,21 @@@@ NAMESPACE_END
 // Intrinsics availible in GCC 4.3 (http://gcc.gnu.org/gcc-4.3/changes.html) and
 //   MSVC 2008 (http://msdn.microsoft.com/en-us/library/bb892950%28v=vs.90%29.aspx)
 //   SunCC could generate SSE4 at 12.1, but the intrinsics are missing until 12.4.
-#if !defined(CRYPTOPP_DISABLE_ASM) && !defined(CRYPTOPP_DISABLE_SSE4) && !defined(_M_ARM) && ((_MSC_VER >= 1500) || (defined(__SSE4_1__) && defined(__SSE4_2__)))
+#if !defined(CRYPTOPP_DISABLE_ASM) && !defined(CRYPTOPP_DISABLE_SSE4) && !defined(_M_ARM) && ((defined(_MSC_VER) && (_MSC_VER >= 1500)) || (defined(__SSE4_1__) && defined(__SSE4_2__)))
 	#define CRYPTOPP_BOOL_SSE4_INTRINSICS_AVAILABLE 1
 #else
 	#define CRYPTOPP_BOOL_SSE4_INTRINSICS_AVAILABLE 0
 #endif
 
 // Don't disgorge AES-NI from CLMUL. There will be two to four subtle breaks
-#if !defined(CRYPTOPP_DISABLE_ASM) && !defined(CRYPTOPP_DISABLE_AESNI) && !defined(_M_ARM) && (_MSC_FULL_VER >= 150030729 || __INTEL_COMPILER >= 1110 || (defined(__AES__) && defined(__PCLMUL__)))
+#if !defined(CRYPTOPP_DISABLE_ASM) && !defined(CRYPTOPP_DISABLE_AESNI) && !defined(_M_ARM) && ((defined(_MSC_FULL_VER) && (_MSC_FULL_VER >= 150030729)) || (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 1110)) || (defined(__AES__) && defined(__PCLMUL__)))
 	#define CRYPTOPP_BOOL_AESNI_INTRINSICS_AVAILABLE 1
 #else
 	#define CRYPTOPP_BOOL_AESNI_INTRINSICS_AVAILABLE 0
 #endif
 
 // AVX2 in MSC 18.00
-#if !defined(CRYPTOPP_DISABLE_ASM) && !defined(CRYPTOPP_DISABLE_AVX) && !defined(_M_ARM) && ((_MSC_VER >= 1600) || (defined(__RDRND__) || defined(__RDSEED__) || defined(__AVX__)))
+#if !defined(CRYPTOPP_DISABLE_ASM) && !defined(CRYPTOPP_DISABLE_AVX) && !defined(_M_ARM) && ((defined(_MSC_VER) && (_MSC_VER >= 1600)) || (defined(__RDRND__) || defined(__RDSEED__) || defined(__AVX__)))
 	#define CRYPTOPP_BOOL_AVX_AVAILABLE 1
 #else
 	#define CRYPTOPP_BOOL_AVX_AVAILABLE 0
@@@@ -579,7 +579,7 @@@@ NAMESPACE_END
 // Linux provides X32, which is 32-bit integers, longs and pointers on x86_64 using the full x86_64 register set.
 // Detect via __ILP32__ (http://wiki.debian.org/X32Port). However, __ILP32__ shows up in more places than
 // the System V ABI specs calls out, like on just about any 32-bit system with Clang.
-#if ((__ILP32__ >= 1) || (_ILP32 >= 1)) && defined(__x86_64__)
+#if ((defined(__ILP32__) && (__ILP32__ >= 1)) || (defined(_ILP32) && (_ILP32 >= 1))) && defined(__x86_64__)
 	#define CRYPTOPP_BOOL_X32 1
 #else
 	#define CRYPTOPP_BOOL_X32 0
@@@@ -776,7 +776,7 @@@@ NAMESPACE_END
 
 // ************** Deprecated ***************
 
-#if (CRYPTOPP_GCC_VERSION >= 40500) || (CRYPTOPP_LLVM_CLANG_VERSION >= 20800)
+#if (CRYPTOPP_GCC_VERSION >= 40500) || (defined(CRYPTOPP_LLVM_CLANG_VERSION) && (CRYPTOPP_LLVM_CLANG_VERSION >= 20800))
 # define CRYPTOPP_DEPRECATED(msg) __attribute__((deprecated (msg)));
 #elif (CRYPTOPP_GCC_VERSION)
 # define CRYPTOPP_DEPRECATED(msg) __attribute__((deprecated));
@@@@ -790,7 +790,7 @@@@ NAMESPACE_END
 // Intel and C++11 language features, http://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler
 // GCC and C++11 language features, http://gcc.gnu.org/projects/cxx0x.html
 // Clang and C++11 language features, http://clang.llvm.org/cxx_status.html
-#if ((_MSC_VER >= 1600) || (__cplusplus >= 201103L)) && !defined(_STLPORT_VERSION)
+#if ((defined(_MSC_VER) && (_MSC_VER >= 1600)) || (__cplusplus >= 201103L)) && !defined(_STLPORT_VERSION)
 # define CRYPTOPP_CXX11 1
 #endif
 
@


1.8
log
@
Get rid of all the noisy warnings like:
warning: "_MSC_VER" is not defined
@
text
@d1 3
a3 3
$OpenBSD: patch-config_h,v 1.7 2016/09/13 13:50:59 dcoppa Exp $
--- config.h.orig	Thu Oct  6 14:11:12 2016
+++ config.h	Thu Oct  6 14:51:46 2016
d13 21
a33 37
@@@@ -57,7 +57,7 @@@@
 // Define this to ensure C/C++ standard compliance and respect for GCC aliasing rules and other alignment fodder. If you
 // experience a break with GCC at -O3, you should try this first. Guard it in case its set on the command line (and it differs).
 #ifndef CRYPTOPP_NO_UNALIGNED_DATA_ACCESS
-// # define CRYPTOPP_NO_UNALIGNED_DATA_ACCESS
+# define CRYPTOPP_NO_UNALIGNED_DATA_ACCESS
 #endif
 
 // ***************** Less Important Settings ***************
@@@@ -79,7 +79,7 @@@@
 // Also see https://cryptopp.com/wiki/Config.h#Avoid_MAINTAIN_BACKWARDS_COMPATIBILITY
 #if (CRYPTOPP_VERSION <= 600)
 # if !defined(CRYPTOPP_NO_BACKWARDS_COMPATIBILITY_562) && !defined(CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562)
-#  define CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562
+// #  define CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562
 # endif
 #endif
 
@@@@ -127,7 +127,7 @@@@
 // Under GCC, the library uses init_priority attribute in the range
 // [CRYPTOPP_INIT_PRIORITY, CRYPTOPP_INIT_PRIORITY+100]. Under Windows,
 // CRYPTOPP_INIT_PRIORITY enlists "#pragma init_seg(lib)".
-// #define CRYPTOPP_INIT_PRIORITY 250
+#define CRYPTOPP_INIT_PRIORITY 250
 
 // CRYPTOPP_USER_PRIORITY is for other libraries and user code that is using Crypto++
 // and managing C++ static object creation. It is guaranteed not to conflict with
@@@@ -210,7 +210,7 @@@@ typedef unsigned int word32;
 #if defined(_MSC_VER) || defined(__BORLANDC__)
 	typedef unsigned __int64 word64;
 	#define W64LIT(x) x##ui64
-#elif (_LP64 || __LP64__) && ((__arm64__ || __aarch64__) || !defined(CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562))
+#elif (defined(_LP64) || defined(__LP64__)) && ((defined(__arm64__) || defined(__aarch64__)) || !defined(CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY_562))
 	typedef unsigned long word64;
 	#define W64LIT(x) x##UL
 #else
@@@@ -246,7 +246,7 @@@@ const lword LWORD_MAX = W64LIT(0xffffffffffffffff);
d38 1
a38 1
+#if (defined(CRYPTOPP_GCC_VERSION) && (CRYPTOPP_GCC_VERSION >= 40600)) || (defined(CRYPTOPP_LLVM_CLANG_VERSION) && (CRYPTOPP_LLVM_CLANG_VERSION >= 10700)) || (defined(CRYPTOPP_APPLE_CLANG_VERSION) && (CRYPTOPP_APPLE_CLANG_VERSION >= 20000))
d42 1
a42 1
@@@@ -337,7 +337,7 @@@@ NAMESPACE_END
d51 1
a51 1
@@@@ -396,7 +396,7 @@@@ NAMESPACE_END
d60 6
a65 6
@@@@ -441,7 +441,7 @@@@ NAMESPACE_END
 	// SSE3 was actually introduced in GNU as 2.17, which was released 6/23/2006, but we can't tell what version of binutils is installed.
 	// GCC 4.1.2 was released on 2/13/2007, so we'll use that as a proxy for the binutils version. Also see the output of
 	// `gcc -dM -E -march=native - < /dev/null | grep -i SSE` for preprocessor defines available.
-	#if !defined(CRYPTOPP_DISABLE_SSSE3) && (_MSC_VER >= 1400 || CRYPTOPP_GCC_VERSION >= 40102 || defined(__SSSE3__))
+	#if !defined(CRYPTOPP_DISABLE_SSSE3) && ((defined(_MSC_VER) && (_MSC_VER >= 1400)) || CRYPTOPP_GCC_VERSION >= 40102 || defined(__SSSE3__))
d69 2
a70 1
@@@@ -466,13 +466,13 @@@@ NAMESPACE_END
d72 3
a74 4
 //   SunCC could generate SSE4 at 12.1, but the intrinsics are missing until 12.4. However, we don't know
 //     when to activate the code paths because SunCC does not indicate it in the preprocessor with macros.
-#if !defined(CRYPTOPP_DISABLE_SSE2) && !defined(CRYPTOPP_DISABLE_SSE4) && (((_MSC_VER >= 1500) && !defined(_M_ARM)) || (defined(__SSE4_1__) && defined(__SSE4_2__)))
+#if !defined(CRYPTOPP_DISABLE_SSE2) && !defined(CRYPTOPP_DISABLE_SSE4) && (((defined(_MSC_VER) && (_MSC_VER >= 1500)) && !defined(_M_ARM)) || (defined(__SSE4_1__) && defined(__SSE4_2__)))
d80 3
a82 2
-#if !defined(CRYPTOPP_DISABLE_SSSE3) && !defined(CRYPTOPP_DISABLE_AESNI) && CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE && (CRYPTOPP_GCC_VERSION >= 40400 || _MSC_FULL_VER >= 150030729 || __INTEL_COMPILER >= 1110 || defined(__AES__))
+#if !defined(CRYPTOPP_DISABLE_SSSE3) && !defined(CRYPTOPP_DISABLE_AESNI) && CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE && (CRYPTOPP_GCC_VERSION >= 40400 || (defined(_MSC_FULL_VER) && (_MSC_FULL_VER >= 150030729)) || (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 1110)) || defined(__AES__))
d86 9
a94 1
@@@@ -548,7 +548,7 @@@@ NAMESPACE_END
d103 1
a103 1
@@@@ -741,7 +741,7 @@@@ NAMESPACE_END
d108 1
a108 1
+#if (defined(CRYPTOPP_GCC_VERSION) && (CRYPTOPP_GCC_VERSION >= 40500)) || (defined(CRYPTOPP_LLVM_CLANG_VERSION) && (CRYPTOPP_LLVM_CLANG_VERSION >= 20800))
d112 1
a112 1
@@@@ -755,7 +755,7 @@@@ NAMESPACE_END
@


1.7
log
@
Update to cryptopp-5.6.4
@
text
@d1 12
a12 3
$OpenBSD$
--- config.h.orig	Tue Sep 13 15:42:06 2016
+++ config.h	Tue Sep 13 15:43:06 2016
d40 88
@


1.6
log
@
Update to cryptopp-5.6.3
@
text
@d1 10
a10 4
$OpenBSD: patch-config_h,v 1.5 2015/06/24 09:41:33 dcoppa Exp $
--- config.h.orig	Wed Feb 20 15:30:54 2013
+++ config.h	Wed Jun 24 11:37:28 2015
@@@@ -263,7 +263,7 @@@@ NAMESPACE_END
d12 8
a19 9
 	// SSSE3 was actually introduced in GNU as 2.17, which was released 6/23/2006, but we can't tell what version of binutils is installed.
 	// GCC 4.1.2 was released on 2/13/2007, so we'll use that as a proxy for the binutils version.
-	#if !defined(CRYPTOPP_DISABLE_SSSE3) && (_MSC_VER >= 1400 || CRYPTOPP_GCC_VERSION >= 40102)
+	#if !defined(CRYPTOPP_DISABLE_SSSE3) && (defined(_MSC_VER) && _MSC_VER >= 1400 || CRYPTOPP_GCC_VERSION >= 40102)
 		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 1
 	#else
 		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 0
@@@@ -284,13 +284,13 @@@@ NAMESPACE_END
 	#define CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE 0
d22 6
a27 6
-#if !defined(CRYPTOPP_DISABLE_SSSE3) && !defined(CRYPTOPP_DISABLE_AESNI) && CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE && (CRYPTOPP_GCC_VERSION >= 40400 || _MSC_FULL_VER >= 150030729 || __INTEL_COMPILER >= 1110)
+#if !defined(CRYPTOPP_DISABLE_SSSE3) && !defined(CRYPTOPP_DISABLE_AESNI) && CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE && (CRYPTOPP_GCC_VERSION >= 40400 || (defined(_MSC_FULL_VER) && _MSC_FULL_VER >= 150030729) || (defined(__INTEL_COMPILER) && __INTEL_COMPILER >= 1110))
 	#define CRYPTOPP_BOOL_AESNI_INTRINSICS_AVAILABLE 1
 #else
 	#define CRYPTOPP_BOOL_AESNI_INTRINSICS_AVAILABLE 0
 #endif
d29 2
a30 5
-#if CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE || CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE || defined(CRYPTOPP_X64_MASM_AVAILABLE)
+#if CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE || defined(CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE) && CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE || defined(CRYPTOPP_X64_MASM_AVAILABLE)
 	#define CRYPTOPP_BOOL_ALIGN16_ENABLED 1
 #else
 	#define CRYPTOPP_BOOL_ALIGN16_ENABLED 0
@


1.5
log
@
Revert SSE2 disabling on !amd64: it's not necessary with cryptopp>=5.6.1
and we're at 5.6.2...

Grrr :(
@
text
@d1 1
a1 1
$OpenBSD: patch-config_h,v 1.4 2015/06/24 09:19:49 dcoppa Exp $
@


1.4
log
@
- Disable SSE2 on !amd64
- Add a pkg-config file

From Fedora
@
text
@d1 1
a1 1
$OpenBSD: patch-config_h,v 1.3 2013/03/14 11:16:02 dcoppa Exp $
d3 2
a4 10
+++ config.h	Wed Jun 24 09:47:47 2015
@@@@ -1,3 +1,7 @@@@
+#ifndef __x86_64__
+#define CRYPTOPP_DISABLE_SSE2
+#endif
+
 #ifndef CRYPTOPP_CONFIG_H
 #define CRYPTOPP_CONFIG_H
 
@@@@ -263,7 +267,7 @@@@ NAMESPACE_END
d13 1
a13 1
@@@@ -284,13 +288,13 @@@@ NAMESPACE_END
@


1.3
log
@Update to cryptopp-5.6.2; lots of local patches go to the attic.
@
text
@d1 1
a1 1
$OpenBSD: patch-config_h,v 1.2 2011/06/24 07:55:18 dcoppa Exp $
d3 10
a12 2
+++ config.h	Thu Mar 14 10:42:03 2013
@@@@ -263,7 +263,7 @@@@ NAMESPACE_END
d21 1
a21 1
@@@@ -284,13 +284,13 @@@@ NAMESPACE_END
@


1.2
log
@Update to cryptopp-5.6.1

'go for it' espie@@
@
text
@d1 4
a4 4
$OpenBSD: patch-config_h,v 1.1.1.1 2008/08/26 14:57:58 espie Exp $
--- config.h.orig	Mon Aug  9 14:22:42 2010
+++ config.h	Fri Jun 17 15:48:19 2011
@@@@ -268,7 +268,7 @@@@ NAMESPACE_END
d13 1
a13 1
@@@@ -289,13 +289,13 @@@@ NAMESPACE_END
@


1.1
log
@Initial revision
@
text
@d1 28
a28 12
$OpenBSD$
--- config.h.orig	Wed Jun 18 13:40:59 2008
+++ config.h	Wed Jun 18 13:41:28 2008
@@@@ -272,7 +272,7 @@@@ NAMESPACE_END
 
 	// SSSE3 was actually introduced in GNU as 2.17, which was released 6/23/2006, but we can't tell what version of binutils is installed.
 	// GCC 4.1.2 was released on 2/13/2007, so we'll use that as a proxy for the binutils version.
-	#if !defined(CRYPTOPP_DISABLE_SSSE3) && (_MSC_VER >= 1400 || CRYPTOPP_GCC_VERSION >= 40102)
+	#if !defined(CRYPTOPP_DISABLE_SSSE3) && (defined(_MSC_VER) && _MSC_VER >= 1400 || CRYPTOPP_GCC_VERSION >= 40102)
 		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 1
 	#else
 		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 0
@


1.1.1.1
log
@yet another crypto library, dependency for amule, when we get it to
work.
@
text
@@
