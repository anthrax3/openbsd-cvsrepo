head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.10
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.6
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.8
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.10.12.17.47.23;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	vmzTySuTouwb27bp;

1.1
date	2014.05.16.23.08.31;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@The p5-BSD-arc4random port in OpenBSD should keep the API of the
BSD::arc4random Perl module, but use our libc functions internally.
This has been done with arc4random() already, but arc4random_bytes()
and arc4random_uniform() were still using a pure Perl implementation.
Replace that with an XS wrapper to our arc4random_buf(3) and
arc4random_uniform(3) functions in libc.
Take maintainer, most remaining code is in my patches.
OK millert@@ sthen@@ deraadt@@
@
text
@$OpenBSD: patch-arc4rnd_xs_c,v 1.1 2014/05/16 23:08:31 bluhm Exp $

Implement Perl XS wrapper for OpenBSD libc arc4random(3),
arc4random_buf(3), arc4random_uniform(3), remove everything else.

--- arc4rnd_xs.c.orig	Sun Oct 11 00:44:17 2009
+++ arc4rnd_xs.c	Wed Oct 12 17:33:31 2016
@@@@ -1,4 +1,5 @@@@
 /*-
+ * Copyright (c) 2016 Alexander Bluhm <bluhm@@openbsd.org>
  * Copyright (c) 2008, 2009
  *	Thorsten Glaser <tg@@mirbsd.org>
  *
@@@@ -18,15 +19,8 @@@@
  * of said person's immediate fault when using the work as intended.
  */
 
-#include <sys/types.h>
 #include <stdlib.h>
 
-#if defined(HAVE_STDINT_H) && HAVE_STDINT_H
-#include <stdint.h>
-#elif defined(USE_INTTYPES)
-#include <inttypes.h>
-#endif
-
 #include "EXTERN.h"
 #include "perl.h"
 #include "XSUB.h"
@@@@ -48,17 +42,8 @@@@
 #define __RCSID(x)			__IDSTRING(rcsid,x)
 #endif
 
-__RCSID("$MirOS: contrib/hosted/tg/code/BSD::arc4random/arc4rnd_xs.c,v 1.5 2009/10/10 22:43:53 tg Exp $");
+__RCSID("$OpenBSD$");
 
-#ifdef REDEF_USCORETYPES
-#define u_int32_t	uint32_t
-#endif
-
-#ifdef NEED_ARC4RANDOM_DECL
-u_int32_t arc4random(void);
-void arc4random_addrandom(u_char *, int);
-#endif
-
 XS(XS_BSD__arc4random_arc4random_xs);
 XS(XS_BSD__arc4random_arc4random_xs)
 {
@@@@ -74,142 +59,62 @@@@ XS(XS_BSD__arc4random_arc4random_xs)
 	XSRETURN(1);
 }
 
-XS(XS_BSD__arc4random_stir_xs);
-XS(XS_BSD__arc4random_stir_xs)
+XS(XS_BSD__arc4random_arc4random_uniform_xs);
+XS(XS_BSD__arc4random_arc4random_uniform_xs)
 {
 	dXSARGS;
-
-	arc4random_stir();
-
-	XSRETURN_EMPTY;
-}
-
-XS(XS_BSD__arc4random_arc4random_addrandom_xs);
-XS(XS_BSD__arc4random_arc4random_addrandom_xs)
-{
-	dXSARGS;
 	dXSTARG;
 	SV *sv;
-	char *buf;
-	STRLEN len;
+	uint32_t upper_bound;
 	uint32_t rv;
 
 	sv = ST(0);
-	buf = SvPV(sv, len);
-	arc4random_addrandom((unsigned char *)buf, (int)len);
-	rv = arc4random();
-	XSprePUSH;
-	PUSHu((UV)rv);
+	upper_bound = SvUV(sv);
+	rv = arc4random_uniform(upper_bound);
 
-	XSRETURN(1);
-}
-
-#ifndef HAVE_ARC4RANDOM_PUSHB
-#define HAVE_ARC4RANDOM_PUSHB	1
-#endif
-
-#if HAVE_ARC4RANDOM_PUSHB
-XS(XS_BSD__arc4random_arc4random_pushb_xs);
-XS(XS_BSD__arc4random_arc4random_pushb_xs)
-{
-	dXSARGS;
-	dXSTARG;
-	SV *sv;
-	char *buf;
-	STRLEN len;
-	uint32_t rv;
-
-	sv = ST(0);
-	buf = SvPV(sv, len);
-	rv = arc4random_pushb((void *)buf, (size_t)len);
 	XSprePUSH;
 	PUSHu((UV)rv);
 
 	XSRETURN(1);
 }
-#elif defined(arc4random_pushk)
-#define XS_BSD__arc4random_arc4random_pushb_xs \
-	XS_BSD__arc4random_arc4random_pushk_xs
-#else
-#define XS_BSD__arc4random_arc4random_pushb_xs \
-	XS_BSD__arc4random_arc4random_addrandom_xs
-#endif
 
-#if defined(arc4random_pushk)
-XS(XS_BSD__arc4random_arc4random_pushk_xs);
-XS(XS_BSD__arc4random_arc4random_pushk_xs)
+XS(XS_BSD__arc4random_arc4random_buf_xs);
+XS(XS_BSD__arc4random_arc4random_buf_xs)
 {
 	dXSARGS;
 	dXSTARG;
 	SV *sv;
 	char *buf;
-	STRLEN len;
-	uint32_t rv;
+	size_t nbytes;
 
 	sv = ST(0);
-	buf = SvPV(sv, len);
-	rv = arc4random_pushk((void *)buf, (size_t)len);
+	nbytes = SvUV(sv);
+	sv = sv_newmortal();
+	if (nbytes == SIZE_T_MAX)
+		nbytes--;
+	Newx(buf, nbytes + 1, char);
+	arc4random_buf(buf, nbytes);
+	buf[nbytes] = '\0';
+	sv_usepvn_flags(sv, buf, nbytes, SV_SMAGIC | SV_HAS_TRAILING_NUL);
+
 	XSprePUSH;
-	PUSHu((UV)rv);
+	PUSHs(sv);
 
 	XSRETURN(1);
 }
-#elif HAVE_ARC4RANDOM_PUSHB
-#define XS_BSD__arc4random_arc4random_pushk_xs \
-	XS_BSD__arc4random_arc4random_pushb_xs
-#else
-#define XS_BSD__arc4random_arc4random_pushk_xs \
-	XS_BSD__arc4random_arc4random_addrandom_xs
-#endif
 
-#undef HAVE_ARC4RANDOM_KINTF
-#if HAVE_ARC4RANDOM_PUSHB || defined(arc4random_pushk)
-#define HAVE_ARC4RANDOM_KINTF	1
-#else
-#define HAVE_ARC4RANDOM_KINTF	0
-#endif
-
-
-/*
- * These may be needed because praeprocessor commands inside a
- * macro's argument list may not work
- */
-
-#if HAVE_ARC4RANDOM_PUSHB
-#define IDT_ARC4RANDOM_PUSHB	" arc4random_pushb"
-#else
-#define IDT_ARC4RANDOM_PUSHB	""
-#endif
-
-#if defined(arc4random_pushk)
-#define IDT_arc4random_pushk	" arc4random_pushk"
-#else
-#define IDT_arc4random_pushk	""
-#endif
-
-#if HAVE_ARC4RANDOM_KINTF
-#define IDT_ARC4RANDOM_KINTF	" have_kintf:=1"
-#else
-#define IDT_ARC4RANDOM_KINTF	" have_kintf:=0"
-#endif
-
 __IDSTRING(api_text, "BSD::arc4random " XS_VERSION " with {"
     " arc4random"
-    " arc4random_addrandom"
-    IDT_ARC4RANDOM_PUSHB
-    IDT_arc4random_pushk
-    IDT_ARC4RANDOM_KINTF
+    " arc4random_uniform"
+    " arc4random_buf"
     " }");
 
 
 /* the Perl API is not const clean */
 static char file[] = __FILE__;
 static char func_a4r[] = "BSD::arc4random::arc4random_xs";
-static char func_a4add[] = "BSD::arc4random::arc4random_addrandom_xs";
-static char func_a4rpb[] = "BSD::arc4random::arc4random_pushb_xs";
-static char func_a4rpk[] = "BSD::arc4random::arc4random_pushk_xs";
-static char func_astir[] = "BSD::arc4random::arc4random_stir_xs";
-static char func_kintf[] = "BSD::arc4random::have_kintf";
+static char func_a4r_uniform[] = "BSD::arc4random::arc4random_uniform_xs";
+static char func_a4r_buf[] = "BSD::arc4random::arc4random_buf_xs";
 
 #ifdef __cplusplus
 extern "C"
@@@@ -222,12 +127,8 @@@@ XS(boot_BSD__arc4random)
 	XS_VERSION_BOOTCHECK;
 
 	newXS(func_a4r, XS_BSD__arc4random_arc4random_xs, file);
-	newXS(func_a4add, XS_BSD__arc4random_arc4random_addrandom_xs, file);
-	newXS(func_a4rpb, XS_BSD__arc4random_arc4random_pushb_xs, file);
-	newXS(func_a4rpk, XS_BSD__arc4random_arc4random_pushk_xs, file);
-	newXS(func_astir, XS_BSD__arc4random_stir_xs, file);
-
-	newCONSTSUB(NULL, func_kintf, newSViv(HAVE_ARC4RANDOM_KINTF));
+	newXS(func_a4r_uniform, XS_BSD__arc4random_arc4random_uniform_xs, file);
+	newXS(func_a4r_buf, XS_BSD__arc4random_arc4random_buf_xs, file);
 
 	XSRETURN_YES;
 }
@


1.1
log
@The port of the Perl module p5-BSD-arc4random was broken since
arc4random_stir() and arc4random_addrandom() were removed from libc.
Make sure that BSD::arc4random can only use OpenBSD's arc4random(3).
Patch away all calls to obsolete and non existing functions in libc.
Leave stubs for these functions in BSD::arc4random's API so that
programs using them will not break.
OK sthen@@
@
text
@d1 5
a5 1
$OpenBSD$
d7 25
a31 3
+++ arc4rnd_xs.c	Fri May 16 22:18:56 2014
@@@@ -54,11 +54,6 @@@@ __RCSID("$MirOS: contrib/hosted/tg/code/BSD::arc4rando
 #define u_int32_t	uint32_t
d34 7
d49 1
a49 1
@@@@ -74,142 +69,14 @@@@ XS(XS_BSD__arc4random_arc4random_xs)
d55 4
a58 2
-{
-	dXSARGS;
d69 2
a70 2
-	dXSTARG;
-	SV *sv;
d73 4
a76 3
-	uint32_t rv;
-
-	sv = ST(0);
d82 3
a84 1
-
d106 5
a110 5
-	XSprePUSH;
-	PUSHu((UV)rv);
-
-	XSRETURN(1);
-}
d118 1
a118 1
-
d122 7
a128 5
-{
-	dXSARGS;
-	dXSTARG;
-	SV *sv;
-	char *buf;
d131 3
a133 2
-
-	sv = ST(0);
d136 10
a145 1
-	XSprePUSH;
d147 4
a150 3
-
-	XSRETURN(1);
-}
d158 1
a158 1
-
d196 2
d209 2
d214 1
a214 1
@@@@ -222,12 +89,6 @@@@ XS(boot_BSD__arc4random)
d224 2
@

