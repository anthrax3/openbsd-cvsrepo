head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	kili_20121202:1.1.1.1
	kili:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.12.02.20.10.22;	author kili;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.12.02.20.10.22;	author kili;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@A higher-level interface over threads, in which an "Async a" is a
concurrent thread that will eventually deliver a value of type "a".
The package provides ways to create "Async" computations, wait for
their results, and cancel them.

Using Async is safer than using threads in two ways:

* When waiting for a thread to return a result, if the thread dies
  with an exception then the caller must either re-throw the exception
  ('wait') or handle it ('waitCatch'); the exception cannot be
  ignored.

* The API makes it possible to build a tree of threads that are
  automatically killed when their parent dies (see 'withAsync').
@


1.1.1.1
log
@A higher-level interface over threads, in which an "Async a" is a
concurrent thread that will eventually deliver a value of type "a".
The package provides ways to create "Async" computations, wait for
their results, and cancel them.

ok sthen@@

@
text
@@
