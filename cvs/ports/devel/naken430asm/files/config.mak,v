head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.24
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.18
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.16
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.14
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	jasper_20110504:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.04.28.21.27.31;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.27.15.15.22;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.05.08.44.22;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.04.05.08.44.22;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@usage of SUBST_CMD wasn't needed here, so use MAKE_FLAGS instead. prevents
unneeded substitutions in PLIST too.
@
text
@CC=${CC}
COMPILER_PREFIX=
LDFLAGS+=${LDFLAGS}
LDFLAGS_UTIL=
CFLAGS+=${CFLAGS} -s
INSTALL_BIN=${PREFIX}/bin
INSTALL_INCLUDES=${PREFIX}/share/naken430asm
INCLUDE_PATH=${PREFIX}/share/naken430asm/include
CONFIG_EXT=
@


1.2
log
@- adjust INCLUDE_PATH
- tweak PLIST
@
text
@d3 1
a3 1
LDFLAGS=${LDFLAGS}
d5 3
a7 3
CFLAGS=${CFLAGS} -s
INSTALL_BIN=${DESTDIR}${PREFIX}/bin
INSTALL_INCLUDES=${DESTDIR}${PREFIX}/share/naken430asm
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
INCLUDE_PATH=${DESTDIR}${PREFIX}/share/naken430asm/include
@


1.1.1.1
log
@import naken430asm into the correct dir this time.

This is an open-sourced assembler / disassembler / simulator for the
MSP430 series of microcontrollers from Texas Instruments. The goal of
this project is to have a completely cross-platform assembler with the
exe (naken430asm) under 50k and to have a cross-platform disassembly
utility (naken430util) along with it to help with debugging and a bit of
profiling. The naken430util, when disassembling, shows how many CPU
cycles each instruction will take and it has a built in simulation to help
show how the binary code will flow on the chip and how many cycles it
will take to execute.
Code from this assembler can be uploaded to the device by installing the
mspdebug package.

ok aja@@
@
text
@@
