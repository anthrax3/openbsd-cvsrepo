head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.16
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.14
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	martynas_20070624:1.1.1.1
	martynas:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.18.03.13.42;	author naddy;	state Exp;
branches;
next	1.1;
commitid	INAcawJqik7lWSVj;

1.1
date	2007.06.23.21.41.54;	author martynas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.06.23.21.41.54;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Drop remaining MD5/RMD160/SHA1 checksums.
@
text
@SHA256 (PyProtocols-1.0a0dev_r2306.tar.gz) = VSQSgP21yaAOacUeD8otdiFNdBhDdT8Axzv3jqCdsoQ=
SIZE (PyProtocols-1.0a0dev_r2306.tar.gz) = 218555
@


1.1
log
@Initial revision
@
text
@a0 3
MD5 (PyProtocols-1.0a0dev_r2306.tar.gz) = jFWr/OXXXkJeOFvBaBmzVQ==
RMD160 (PyProtocols-1.0a0dev_r2306.tar.gz) = SVaJHYSvEli1EKkAb6eP3bcmxN0=
SHA1 (PyProtocols-1.0a0dev_r2306.tar.gz) = I2Pti3QVqdqZgkQWTTEcKptBzkw=
@


1.1.1.1
log
@import py-protocols-1.0r2306

PyProtocols extends the PEP 246 adapt() function with a new
"declaration API" that lets you easily define your own protocols
and adapters, and declare what adapters should be used to adapt
what types, objects, or protocols.  In addition to its own Interface
type, PyProtocols can also use Twisted and Zope's Interface types.

"go ahead" (after some nice tweaks, actually) steven@@
@
text
@@
