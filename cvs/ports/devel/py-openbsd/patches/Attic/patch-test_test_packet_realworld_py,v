head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.12.07.18.42.53;	author jca;	state dead;
branches;
next	1.1;
commitid	UIXzVXmKiYPykzhx;

1.1
date	2010.07.13.15.21.18;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove: abandoned upstream, we have to fix it each time base changes.

sthen had already warned more than one year ago.

ok sthen@@ jasper@@
@
text
@$OpenBSD: patch-test_test_packet_realworld_py,v 1.1 2010/07/13 15:21:18 naddy Exp $
--- test/test_packet_realworld.py.orig	Sun Jul 11 22:37:05 2010
+++ test/test_packet_realworld.py	Sun Jul 11 22:37:20 2010
@@@@ -603,57 +603,6 @@@@ class uICMP_AddressMaskReply(pcaptester.pcapTester):
 
 
 
-class uPfOld(pcaptester.pcapTester):
-    def setUp(self):
-        self.p = self.getpacket("pf.old")
-
-    def test_safamily(self):
-        p = self.p["pfold"]
-        self.failUnlessEqual(self.p["pfold"].safamily, self.p["pfold"].SAFamilyOptions["INET"])
-        self.p["pfold"].safamily = 5
-        self.failUnlessEqual(self.p["pfold"].safamily, 5)
-
-    def test_ifname(self):
-        p = self.p["pfold"]
-        self.failUnlessEqual(self.p["pfold"].ifname, "tun0")
-        self.p["pfold"].ifname = "bomb"
-        self.failUnlessEqual(self.p["pfold"].ifname, "bomb")
-
-    def test_ruleno(self):
-        p = self.p["pfold"]
-        self.failUnlessEqual(self.p["pfold"].ruleno, 0)
-        self.p["pfold"].ruleno = 5
-        self.failUnlessEqual(self.p["pfold"].ruleno, 5)
-
-    def test_reason(self):
-        self.failUnlessEqual(self.p["pfold"].reason, openbsd.packet.PFOld.ReasonOptions["MATCH"])
-        self.p["pfold"].reason = 4
-        self.failUnlessEqual(self.p["pfold"].reason, 4)
-
-    def test_action(self):
-        self.failUnlessEqual(self.p["pfold"].action, openbsd.packet.PFOld.ActionOptions["DROP"])
-        self.p["pfold"].action = 5
-        self.failUnlessEqual(self.p["pfold"].action, 5)
-
-    def test_direction(self):
-        self.failUnlessEqual(self.p["pfold"].direction, openbsd.packet.PFOld.DirectionOptions["IN"])
-        self.p["pfold"].direction = 5
-        self.failUnlessEqual(self.p["pfold"].direction, 5)
-
-    def test_encap(self):
-        self.failUnlessEqual(self.p["pfold"]._next.src, "68.18.67.181")
-
-    def test_payload(self):
-        self.failUnless(self.p["pfold"].payload)
-        self.p["pfold"].safamily = self.p["pfold"].SAFamilyOptions["UNSPEC"]
-        self.p["pfold"].payload = "asdf"
-        self.p.finalise()
-        self.failUnlessEqual(self.p["pfold"].payload, "asdf")
-
-    def test_repr(self):
-        repr(self.p)
-
-
 class uPf(pcaptester.pcapTester):
     def setUp(self):
         self.p = self.getpacket("pf")
@


1.1
log
@* fix build after the removal of DLT_OLD_PFLOG; ok sthen@@, jmeltzer@@
* fix HOMEPAGE/MASTER_SITES, from sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@

