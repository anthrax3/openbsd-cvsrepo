head	1.6;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	sthen_20140316:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2017.07.23.09.26.26;	author espie;	state Exp;
branches;
next	1.5;
commitid	FZPR2Emws5uDqXzb;

1.5
date	2017.07.16.19.18.51;	author espie;	state Exp;
branches;
next	1.4;
commitid	tt0GhWK5c4uf9ILG;

1.4
date	2017.04.10.11.45.26;	author sthen;	state Exp;
branches;
next	1.3;
commitid	XDh1zlSBq0boKsHk;

1.3
date	2016.10.17.10.13.56;	author jca;	state Exp;
branches;
next	1.2;
commitid	pcdWtCG7733E2MSF;

1.2
date	2016.03.11.20.28.24;	author naddy;	state Exp;
branches;
next	1.1;
commitid	UYLP8TE6V7RS2GhJ;

1.1
date	2014.03.16.11.26.21;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.16.11.26.21;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.6
log
@add pthread to COMPILER_LIBCXX.
white lie, but it allows clang and gcc to be more similar
bump accordingly.
@
text
@# $OpenBSD $

COMMENT =		lightweight C++ API for Lua
DISTNAME =		lutok-0.4
REVISION =		0

SHARED_LIBS +=		lutok                     0.0 # 2.0
CATEGORIES =		devel
HOMEPAGE =		https://github.com/jmmv/lutok/

MAINTAINER =		Sergey Bronnikov <estetus@@gmail.com>

# BSD
PERMIT_PACKAGE_CDROM =	Yes

WANTLIB += atf-c atf-c++ c ${MODLUA_WANTLIB} m ${COMPILER_LIBCXX}

MASTER_SITES =		https://github.com/jmmv/lutok/releases/download/${DISTNAME}/

MODULES =		lang/lua
MODLUA_SA =		Yes

LIB_DEPENDS =		devel/atf

TEST_DEPENDS =		devel/kyua-cli

CONFIGURE_STYLE  =	gnu
CONFIGURE_ARGS =	--without-doxygen
CONFIGURE_ENV =		LUA_CFLAGS="`pkg-config --cflags ${MODLUA_DEP}`" \
			LUA_LIBS="`pkg-config --libs ${MODLUA_DEP}`"

# Install the package and use the following TEST_TARGET if you want to
# perform the tests on the installed files.
#TEST_TARGET =		installcheck

PORTHOME =		${WRKDIR}

.include <bsd.port.mk>
@


1.5
log
@use COMPILER_LIBCXX where applicable
@
text
@d5 1
@


1.4
log
@use LIBCXX
@
text
@d15 1
a15 1
WANTLIB += atf-c atf-c++ c ${MODLUA_WANTLIB} m ${LIBCXX}
@


1.3
log
@Stop handling lua FLAVORS that aren't hooked to the build.

No objection from Sergey Bronnikov (maintainer)
@
text
@d15 1
a15 1
WANTLIB += atf-c atf-c++ c ${MODLUA_WANTLIB} m stdc++
@


1.2
log
@garbage collect CONFIGURE_SHARED
@
text
@a23 6
FLAVORS =		# lua52 from lua.port.mk
FLAVOR ?=

.if ${FLAVOR:Mlua52}
TEST_DEPENDS =		devel/kyua-cli,lua52
.else
a24 1
.endif
@


1.1
log
@Initial revision
@
text
@d34 1
a34 2
CONFIGURE_ARGS =	${CONFIGURE_SHARED} \
			--without-doxygen
@


1.1.1.1
log
@import devel/lutok, from Sergey Bronnikov, ok shadchin@@ pre-lock, only minor
changes since.

Lutok provides thin C++ wrappers around the Lua C API to easy the
interaction between C++ and Lua.  These wrappers make intensive use of
RAII to prevent resource leakage, expose C++-friendly data types, report
errors by means of exceptions and ensure that the Lua stack is always
left untouched in the face of errors. The library also provides a small
subset of miscellaneous utility functions built on top of the wrappers.
@
text
@@
