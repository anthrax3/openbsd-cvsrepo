head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.20
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.18
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	jasper_20132101:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.01.21.15.15.33;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.21.14.31.24;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.21.14.31.24;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@un-bullshitbingo DESCR a tad.
@
text
@Pure python implementation of a sliding memory map to help unifying
memory mapped access on 32 and 64 bit systems and to help managing
resources more efficiently.

When reading from many possibly large files in a fashion similar to
random access, it is usually the fastest and most efficient to use
memory maps.
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
Pure git implementation of a sliding window memory map manager.
@


1.1.1.1
log
@import py-smmap-0.8.2

Pure git implementation of a sliding window memory map manager.

When reading from many possibly large files in a fashion similar to
random access, it is usually the fastest and most efficient to use
memory maps.

ok aja@@
@
text
@@
