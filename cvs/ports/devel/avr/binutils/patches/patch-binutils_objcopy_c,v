head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.26
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.22
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.24
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.20
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.06.27.20.58.10;	author ckuethe;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.09.16.55.51;	author ckuethe;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.01.04.46.20;	author ckuethe;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to the latest AVR gcc, binutils, libc and gdb. Based on the FreeBSD
port, which is also in sync with winavr/avrstudio. Among other things, this
adds support for atmega328... which means new arduino boards should work.
@
text
@$OpenBSD$
--- binutils/objcopy.c.orig	Sat Jun 26 11:22:44 2010
+++ binutils/objcopy.c	Sat Jun 26 11:31:17 2010
@@@@ -32,6 +32,7 @@@@
 #include "elf-bfd.h"
 #include <sys/stat.h>
 #include "libbfd.h"
+#include "debug.h"
 #include "coff/internal.h"
 #include "libcoff.h"
 
@@@@ -297,6 +298,8 @@@@ enum command_line_switch
     OPTION_IMPURE,
     OPTION_EXTRACT_SYMBOL,
     OPTION_REVERSE_BYTES,
+    OPTION_CHANGE_PATHNAME,
+    OPTION_BASENAME,
     OPTION_FILE_ALIGNMENT,
     OPTION_HEAP,
     OPTION_IMAGE_BASE,
@@@@ -346,10 +349,12 @@@@ static struct option copy_options[] =
   {"adjust-section-vma", required_argument, 0, OPTION_CHANGE_SECTION_ADDRESS},
   {"adjust-warnings", no_argument, 0, OPTION_CHANGE_WARNINGS},
   {"alt-machine-code", required_argument, 0, OPTION_ALT_MACH_CODE},
+  {"basename", no_argument, 0, OPTION_BASENAME},
   {"binary-architecture", required_argument, 0, 'B'},
   {"byte", required_argument, 0, 'b'},
   {"change-addresses", required_argument, 0, OPTION_CHANGE_ADDRESSES},
   {"change-leading-char", no_argument, 0, OPTION_CHANGE_LEADING_CHAR},
+  {"change-pathname", required_argument, 0, OPTION_CHANGE_PATHNAME},
   {"change-section-address", required_argument, 0, OPTION_CHANGE_SECTION_ADDRESS},
   {"change-section-lma", required_argument, 0, OPTION_CHANGE_SECTION_LMA},
   {"change-section-vma", required_argument, 0, OPTION_CHANGE_SECTION_VMA},
@@@@ -543,6 +548,8 @@@@ copy_usage (FILE *stream, int exit_status)
      --prefix-alloc-sections <prefix>\n\
                                    Add <prefix> to start of every allocatable\n\
                                      section name\n\
+     --change-pathname <old>=<new> Change debug pathnames from <old> to <new>\n\
+     --basename                    Strip directory part from debug pathnames\n\
      --file-alignment <num>        Set PE file alignment to <num>\n\
      --heap <reserve>[,<commit>]   Set PE reserve/commit heap to <reserve>/\n\
                                    <commit>\n\
@@@@ -999,6 +1006,8 @@@@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,
   asymbol **from = isyms, **to = osyms;
   long src_count = 0, dst_count = 0;
   int relocatable = (abfd->flags & (EXEC_P | DYNAMIC)) == 0;
+  bfd_boolean need_for_debugging = convert_debugging
+    && bfd_get_arch (abfd) == bfd_arch_avr;
 
   for (; src_count < symcount; src_count++)
     {
@@@@ -1099,7 +1108,8 @@@@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,
 	       || bfd_is_com_section (bfd_get_section (sym)))
 	keep = strip_symbols != STRIP_UNNEEDED;
       else if ((flags & BSF_DEBUGGING) != 0)	/* Debugging symbol.  */
-	keep = (strip_symbols != STRIP_DEBUG
+	keep = need_for_debugging
+		|| (strip_symbols != STRIP_DEBUG
 		&& strip_symbols != STRIP_UNNEEDED
 		&& ! convert_debugging);
       else if (bfd_coff_get_comdat_section (abfd, bfd_get_section (sym)))
@@@@ -2817,6 +2827,10 @@@@ write_debugging_info (bfd *obfd, void *dhandle,
     return write_ieee_debugging_info (obfd, dhandle);
 
   if (bfd_get_flavour (obfd) == bfd_target_coff_flavour
+      && bfd_get_arch (obfd) == bfd_arch_avr)
+    return write_coff_debugging_info (obfd, dhandle, symcountp, symppp);
+
+  if (bfd_get_flavour (obfd) == bfd_target_coff_flavour
       || bfd_get_flavour (obfd) == bfd_target_elf_flavour)
     {
       bfd_byte *syms, *strings;
@@@@ -3639,6 +3653,30 @@@@ copy_main (int argc, char *argv[])
 
 	case OPTION_PREFIX_ALLOC_SECTIONS:
 	  prefix_alloc_sections_string = optarg;
+	  break;
+
+	case OPTION_CHANGE_PATHNAME:
+	  {
+	    const char *s;
+	    int len;
+	    char *name;
+
+	    s = strchr (optarg, '=');
+	    if (s == NULL)
+	      fatal (_("bad format for %s"), "--change-pathname");
+
+	    len = s - optarg;
+	    name = (char *) xmalloc (len + 1);
+	    strncpy (name, optarg, len);
+	    name[len] = '\0';
+
+	    debug_register_pathname_xlat (name, s + 1);
+	  }
+	  break;
+
+	case OPTION_BASENAME:
+	  /* very special case of pathname translation */
+	  debug_register_pathname_xlat (NULL, NULL);
 	  break;
 
 	case OPTION_READONLY_TEXT:
@


1.2
log
@based on the freebsd port, update to binutils 2.19.1. adds support for
a whole bunch of new devices.
@
text
@d2 2
a3 2
--- binutils/objcopy.c.orig	Tue Aug  5 17:42:17 2008
+++ binutils/objcopy.c	Sun Dec  6 21:48:53 2009
d9 2
d12 1
a12 4
 struct is_specified_symbol_predicate_data
 {
@@@@ -270,7 +271,9 @@@@ enum command_line_switch
     OPTION_PURE,
d15 1
a15 2
-    OPTION_REVERSE_BYTES
+    OPTION_REVERSE_BYTES,
d17 5
a21 5
+    OPTION_BASENAME
   };
 
 /* Options to handle if running as "strip".  */
@@@@ -314,10 +317,12 @@@@ static struct option copy_options[] =
d34 1
a34 1
@@@@ -502,6 +507,8 @@@@ copy_usage (FILE *stream, int exit_status)
d40 4
a43 4
   -v --verbose                     List all object files modified\n\
   @@<file>                          Read options from <file>\n\
   -V --version                     Display this program's version number\n\
@@@@ -948,6 +955,8 @@@@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,
d52 1
a52 1
@@@@ -1047,9 +1056,10 @@@@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,
a56 2
-		&& strip_symbols != STRIP_UNNEEDED
-		&& ! convert_debugging);
d59 2
a60 2
+		    && strip_symbols != STRIP_UNNEEDED
+		    && ! convert_debugging);
d62 1
a62 3
 	/* COMDAT sections store special information in local
 	   symbols, so we cannot risk stripping any of them.  */
@@@@ -2659,6 +2669,10 @@@@ write_debugging_info (bfd *obfd, void *dhandle,
d73 1
a73 1
@@@@ -3357,6 +3371,30 @@@@ copy_main (int argc, char *argv[])
@


1.1
log
@update to binutils 2.18, plus some new devices. based on the freebsd port.
@
text
@d2 2
a3 2
--- binutils/objcopy.c.orig	Mon Aug  6 12:56:13 2007
+++ binutils/objcopy.c	Sat Sep 27 20:20:27 2008
d10 3
a12 3
 /* A list of symbols to explicitly strip out, or to keep.  A linked
    list is good enough for a small number from the command line, but
@@@@ -272,7 +273,9 @@@@ enum command_line_switch
d23 1
a23 1
@@@@ -316,10 +319,12 @@@@ static struct option copy_options[] =
d36 1
a36 1
@@@@ -504,6 +509,8 @@@@ copy_usage (FILE *stream, int exit_status)
d45 1
a45 1
@@@@ -911,6 +918,8 @@@@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,
d54 1
a54 1
@@@@ -1010,9 +1019,10 @@@@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,
d68 1
a68 1
@@@@ -2588,6 +2598,10 @@@@ write_debugging_info (bfd *obfd, void *dhandle,
d79 1
a79 1
@@@@ -3287,6 +3301,30 @@@@ copy_main (int argc, char *argv[])
@

