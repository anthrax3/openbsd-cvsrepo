head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.26
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.22
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.20
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.18
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.12
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.10
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.8
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.6
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.4
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.2
	OPENBSD_3_9_BASE:1.1.1.1
	aanriot_20050920:1.1.1.1
	aanriot:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.06.27.20.58.10;	author ckuethe;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.09.16.55.51;	author ckuethe;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.01.04.46.20;	author ckuethe;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.20.15.22.43;	author aanriot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.09.20.15.22.43;	author aanriot;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to the latest AVR gcc, binutils, libc and gdb. Based on the FreeBSD
port, which is also in sync with winavr/avrstudio. Among other things, this
adds support for atmega328... which means new arduino boards should work.
@
text
@$OpenBSD$
--- binutils/Makefile.in.orig	Sat Jun 26 11:22:43 2010
+++ binutils/Makefile.in	Sat Jun 26 11:31:17 2010
@@@@ -126,7 +126,7 @@@@ am_nm_new_OBJECTS = nm.$(OBJEXT) $(am__objects_1)
 nm_new_OBJECTS = $(am_nm_new_OBJECTS)
 nm_new_LDADD = $(LDADD)
 am__objects_2 = rddbg.$(OBJEXT) debug.$(OBJEXT) stabs.$(OBJEXT) \
-	ieee.$(OBJEXT) rdcoff.$(OBJEXT)
+	ieee.$(OBJEXT) rdcoff.$(OBJEXT) wrcoff.$(OBJEXT)
 am__objects_3 = $(am__objects_2) wrstabs.$(OBJEXT)
 am_objcopy_OBJECTS = objcopy.$(OBJEXT) not-strip.$(OBJEXT) \
 	rename.$(OBJEXT) $(am__objects_3) $(am__objects_1)
@@@@ -439,7 +439,7 @@@@ CFILES = \
 	resbin.c rescoff.c resrc.c resres.c \
 	size.c srconv.c stabs.c strings.c sysdump.c \
 	unwind-ia64.c version.c \
-	windres.c winduni.c wrstabs.c \
+	windres.c winduni.c wrcoff.c wrstabs.c \
 	windmc.c mclex.c
 
 GENERATED_CFILES = \
@@@@ -447,7 +447,7 @@@@ GENERATED_CFILES = \
 	defparse.c deflex.c nlmheader.c rcparse.c mcparse.c
 
 DEBUG_SRCS = rddbg.c debug.c stabs.c ieee.c rdcoff.c
-WRITE_DEBUG_SRCS = $(DEBUG_SRCS) wrstabs.c
+WRITE_DEBUG_SRCS = $(DEBUG_SRCS) wrstabs.c wrcoff.c
 
 # Code shared by all the binutils.
 BULIBS = bucomm.c version.c filemode.c
@


1.3
log
@based on the freebsd port, update to binutils 2.19.1. adds support for
a whole bunch of new devices.
@
text
@d2 3
a4 3
--- binutils/Makefile.in.orig	Sun Aug 24 21:38:13 2008
+++ binutils/Makefile.in	Sun Dec  6 21:48:53 2009
@@@@ -133,7 +133,7 @@@@ am_nm_new_OBJECTS = nm.$(OBJEXT) $(am__objects_1)
d13 1
a13 1
@@@@ -421,7 +421,7 @@@@ CFILES = \
d22 1
a22 1
@@@@ -429,7 +429,7 @@@@ GENERATED_CFILES = \
@


1.2
log
@update to binutils 2.18, plus some new devices. based on the freebsd port.
@
text
@d2 3
a4 3
--- binutils/Makefile.in.orig	Mon Aug  6 13:29:53 2007
+++ binutils/Makefile.in	Sat Sep 27 20:20:27 2008
@@@@ -129,7 +129,7 @@@@ am_nm_new_OBJECTS = nm.$(OBJEXT) $(am__objects_1)
d13 1
a13 1
@@@@ -418,7 +418,7 @@@@ CFILES = \
d22 1
a22 1
@@@@ -426,7 +426,7 @@@@ GENERATED_CFILES = \
@


1.1
log
@Initial revision
@
text
@d2 18
a19 3
--- binutils/Makefile.in.orig	Fri Nov 28 05:58:41 2003
+++ binutils/Makefile.in	Sat Jun 25 15:44:24 2005
@@@@ -120,7 +120,7 @@@@ INTLLIBS = @@INTLLIBS@@
d21 3
a23 1
 AUTOMAKE_OPTIONS = cygnus dejagnu
d25 3
a27 4
-SUBDIRS = doc po
+SUBDIRS = doc
 
 tooldir = $(exec_prefix)/$(target_alias)
d29 2
@


1.1.1.1
log
@import avr, a Atmel AVR 8-bit RISC microcontrollers' framework.

It's composed by binutils, gcc, libc, and gdb, for these microcontrollers.

ok martin@@, review and ok espie@@

@
text
@@
