head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	jeremy_2012-Apr-03:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.10.20.01.13.38;	author abieber;	state dead;
branches;
next	1.3;
commitid	pHXiw0i0lP2XnSbp;

1.3
date	2012.12.05.00.45.05;	author abieber;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.28.17.27.51;	author jeremy;	state dead;
branches;
next	1.1;

1.1
date	2012.04.03.18.46.03;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.03.18.46.03;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove node-fibers

OK jturner@@ juanfra@@ jasper@@, "sounds alright to me" sthen@@
@
text
@$OpenBSD: patch-fibers_js,v 1.3 2012/12/05 00:45:05 abieber Exp $
--- fibers.js.orig	Tue Nov 27 08:17:20 2012
+++ fibers.js	Tue Nov 27 08:18:10 2012
@@@@ -5,7 +5,12 @@@@ Math.random();
 
 // Look for binary for this platform
 var v8 = 'v8-'+ /[0-9]+\.[0-9]+/.exec(process.versions.v8)[0];
-var modPath = path.join(__dirname, 'bin', process.platform+ '-'+ process.arch+ '-'+ v8, 'fibers');
+var modPath;
+if ( process.platform === 'openbsd' ) {
+  modPath = path.join(__dirname, 'bin', 'fibers' );
+} else {
+  modPath = path.join(__dirname, 'bin', process.platform+ '-'+ process.arch+ '-'+ v8, 'fibers');
+}
 try {
 	fs.statSync(modPath+ '.node');
 } catch (ex) {
@


1.3
log
@Make node-fibers use libv8

OK jeremy@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update node-fibers to 0.6.8, works with node 0.8.0.

Build process changed from waf to gyp, so modify patches accordingly.
@
text
@d1 17
a17 21
$OpenBSD: patch-fibers_js,v 1.1 2012/04/03 18:46:03 jeremy Exp $

Don't check mtimes against process, as it appears to break things
and should not be a problem with ports.

--- fibers.js.orig	Wed Feb  1 13:54:47 2012
+++ fibers.js	Wed Feb  1 13:55:09 2012
@@@@ -1,13 +1,2 @@@@
-var fs = require('fs'), path = require('path');
-
-if (fs.statSync(process.execPath).mtime >
-		fs.statSync(require.resolve('./src/fibers')).mtime) {
-	throw new Error(
-		'`node` has a newer mtime than `fiber`; it is possible your build is out of date. This ' +
-		'could happen if you upgrade node. Try `npm rebuild fibers` to rebuild. If that doesn\'t ' +
-		'work you could consider running `touch ' + __dirname + 'src/fibers` and maybe there won\'t ' +
-		'be a problem.');
-}
-
 // Injects `Fiber` and `yield` in to global
 require('./src/fibers');
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import node-fibers-0.6.4.

This extension provides a fiber/coroutine implementation for nodejs.  It
also ships with a futures implementation that wraps existing nodejs
async functions, allowing synchronous style code that handles exceptions
properly and doesn't block the nodejs event loop.

OK sthen@@
@
text
@@
