head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.10
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.8
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.12
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.10
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jeremy_2011-Nov-15:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.05.09.15.08.24;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	8J3W93SaX1bPwtIf;

1.1
date	2011.11.15.16.35.15;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.15.16.35.15;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to ragel-6.9.
@
text
@$OpenBSD: patch-test_runtests_in,v 1.1.1.1 2011/11/15 16:35:15 jeremy Exp $

Fix bug not respecting ruby version you pass to configure.

Use gdiff since our diff doesn't implement --strip-trailing-cr.

--- test/runtests.in.orig	Mon Oct 13 20:00:59 2014
+++ test/runtests.in	Sat May  9 16:56:59 2015
@@@@ -119,11 +119,11 @@@@ function run_test()
 		
 		exec_cmd=./$binary
 		[ $lang = java ] && exec_cmd="java ${root}"
-		[ $lang = ruby ] && exec_cmd="ruby ${code_src}"
+		[ $lang = ruby ] && exec_cmd="${ruby_engine} ${code_src}"
 		[ $lang = csharp ] && [ "$csharp_compiler" = gmcs ] && exec_cmd="mono ${exec_cmd}"
 
 		$exec_cmd 2>&1 > $output;
-		if diff --strip-trailing-cr $expected_out $output > /dev/null; then
+		if gdiff --strip-trailing-cr $expected_out $output > /dev/null; then
 			echo "passed";
 		else
 			echo "FAILED";
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d7 3
a9 3
--- test/runtests.in.orig	Mon Nov 14 16:38:12 2011
+++ test/runtests.in	Mon Nov 14 16:41:51 2011
@@@@ -118,11 +118,11 @@@@ function run_test()
@


1.1.1.1
log
@Import ragel 6.7.

Ragel compiles executable finite state machines from regular languages.
It targets C, C++, and Ruby. Ragel state machines can not only recognize
byte sequences as regular expression machines do, but can also execute
code at arbitrary points in the recognition of a regular language. Code
embedding is done using inline operators that do not disrupt the regular
language syntax.

OK robert@@
@
text
@@
