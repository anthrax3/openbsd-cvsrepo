head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.22
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.20
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.16
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.18
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.12
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.10
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jeremy_2011-Nov-15:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2011.11.15.16.35.15;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.15.16.35.15;	author jeremy;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@@@comment $OpenBSD$
@@bin bin/ragel
@@man man/man1/ragel.1
share/doc/ragel/
share/doc/ragel/CREDITS
share/doc/ragel/ChangeLog
@


1.1.1.1
log
@Import ragel 6.7.

Ragel compiles executable finite state machines from regular languages.
It targets C, C++, and Ruby. Ragel state machines can not only recognize
byte sequences as regular expression machines do, but can also execute
code at arbitrary points in the recognition of a regular language. Code
embedding is done using inline operators that do not disrupt the regular
language syntax.

OK robert@@
@
text
@@
