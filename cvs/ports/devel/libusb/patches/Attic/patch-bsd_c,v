head	1.13;
access;
symbols
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.7.0.16
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@# @;


1.13
date	2011.11.13.13.56.12;	author ajacoutot;	state dead;
branches;
next	1.12;

1.12
date	2011.01.25.21.04.16;	author jakemsr;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.17.18.03.49;	author sebastia;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.17.03.55.47;	author jakemsr;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.16.00.44.35;	author jakemsr;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.26.13.30.19;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.15.18.34.13;	author pvalchev;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.21.22.24.20;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.27.04.34.26;	author pvalchev;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.07.01.32.20;	author fgsch;	state dead;
branches;
next	1.3;

1.3
date	2002.05.30.18.38.17;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.25.20.43.17;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.05.00.16.47;	author jcs;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove, superseded by libusb-compat.
@
text
@$OpenBSD: patch-bsd_c,v 1.12 2011/01/25 21:04:16 jakemsr Exp $

usb_os_find_busses(): don't access to the bus.  just say there
  is one.

usb_os_find_devices(): only ugen(4) are supported, so just probe
  /dev/ugen*.


--- bsd.c.orig	Fri Mar  3 18:52:46 2006
+++ bsd.c	Mon Jan 24 23:46:26 2011
@@@@ -361,7 +361,7 @@@@ int usb_bulk_read(usb_dev_handle *dev, int ep, char *b
 int usb_interrupt_write(usb_dev_handle *dev, int ep, char *bytes, int size,
                         int timeout)
 {
-  int fd, ret, sent = 0;
+  int fd, ret;
 
   /* Ensure the endpoint address is correct */
   ep &= ~USB_ENDPOINT_IN;
@@@@ -383,8 +383,7 @@@@ int usb_interrupt_write(usb_dev_handle *dev, int ep, c
     USB_ERROR_STR(-errno, "error setting timeout: %s",
                   strerror(errno));
 
-  do {
-    ret = write(fd, bytes+sent, size-sent);
+  ret = write(fd, bytes, size);
     if (ret < 0)
 #ifdef __FreeBSD_kernel__
       USB_ERROR_STR(-errno, "error writing to interrupt endpoint %s.%d: %s",
@@@@ -394,16 +393,13 @@@@ int usb_interrupt_write(usb_dev_handle *dev, int ep, c
                   dev->device->filename, UE_GET_ADDR(ep), strerror(errno));
 #endif
 
-    sent += ret;
-  } while (ret > 0 && sent < size);
-
-  return sent;
+  return ret;
 }
 
 int usb_interrupt_read(usb_dev_handle *dev, int ep, char *bytes, int size,
                        int timeout)
 {
-  int fd, ret, retrieved = 0, one = 1;
+  int fd, ret, one = 1;
 
   /* Ensure the endpoint address is correct */
   ep |= USB_ENDPOINT_IN;
@@@@ -428,8 +424,7 @@@@ int usb_interrupt_read(usb_dev_handle *dev, int ep, ch
   if (ret < 0)
     USB_ERROR_STR(-errno, "error setting short xfer: %s", strerror(errno));
 
-  do {
-    ret = read(fd, bytes+retrieved, size-retrieved);
+  ret = read(fd, bytes, size);
     if (ret < 0)
 #ifdef __FreeBSD_kernel__
       USB_ERROR_STR(-errno, "error reading from interrupt endpoint %s.%d: %s",
@@@@ -438,10 +433,7 @@@@ int usb_interrupt_read(usb_dev_handle *dev, int ep, ch
       USB_ERROR_STR(-errno, "error reading from interrupt endpoint %s.%02d: %s",
                   dev->device->filename, UE_GET_ADDR(ep), strerror(errno));
 #endif
-    retrieved += ret;
-  } while (ret > 0 && retrieved < size);
-
-  return retrieved;
+  return ret;
 }
 
 int usb_control_msg(usb_dev_handle *dev, int requesttype, int request,
@@@@ -477,45 +469,28 @@@@ int usb_control_msg(usb_dev_handle *dev, int requestty
     USB_ERROR_STR(-errno, "error sending control message: %s",
                   strerror(errno));
 
-  return UGETW(req.ucr_request.wLength);
+  return req.ucr_actlen;
 }
 
 int usb_os_find_busses(struct usb_bus **busses)
 {
   struct usb_bus *fbus = NULL;
-  int controller;
-  int fd;
-  char buf[20];
+  struct usb_bus *bus;
 
-  for (controller = 0; controller < MAX_CONTROLLERS; controller++) {
-    struct usb_bus *bus;
+  /* just one bus that always exists.  this is faked, so we don't have
+   * to give access to the bus.
+   */
 
-    snprintf(buf, sizeof(buf) - 1, "/dev/usb%d", controller);
-    fd = open(buf, O_RDWR);
-    if (fd < 0) {
-      if (usb_debug >= 2)
-        if (errno != ENXIO && errno != ENOENT)
-          fprintf(stderr, "usb_os_find_busses: can't open %s: %s\n",
-                  buf, strerror(errno));
-      continue;
-    }
-    close(fd);
+  bus = malloc(sizeof(*bus));
+  if (!bus)
+    USB_ERROR(-ENOMEM);
 
-    bus = malloc(sizeof(*bus));
-    if (!bus)
-      USB_ERROR(-ENOMEM);
+  memset((void *)bus, 0, sizeof(*bus));
 
-    memset((void *)bus, 0, sizeof(*bus));
+  snprintf(bus->dirname, sizeof(bus->dirname), "/dev/usb");
 
-    strncpy(bus->dirname, buf, sizeof(bus->dirname) - 1);
-    bus->dirname[sizeof(bus->dirname) - 1] = 0;
+  LIST_ADD(fbus, bus);
 
-    LIST_ADD(fbus, bus);
-
-    if (usb_debug >= 2)
-      fprintf(stderr, "usb_os_find_busses: Found %s\n", bus->dirname);
-  }
-
   *busses = fbus;
 
   return 0;
@@@@ -523,43 +498,27 @@@@ int usb_os_find_busses(struct usb_bus **busses)
 
 int usb_os_find_devices(struct usb_bus *bus, struct usb_device **devices)
 {
+  struct usb_device *dev;
+  unsigned char device_desc[DEVICE_DESC_LENGTH];
+  char devnode[USB_MAX_DEVNAMELEN];
+  char devname[USB_MAX_DEVNAMELEN];
   struct usb_device *fdev = NULL;
-  int cfd, dfd;
-  int device;
+  int fd, i;
 
-  cfd = open(bus->dirname, O_RDONLY);
-  if (cfd < 0)
-    USB_ERROR_STR(-errno, "couldn't open(%s): %s", bus->dirname,
-                  strerror(errno));
+  /* USB_MAX_DEVICES is the max # of all devices per bus.  this is
+   * only for ugen(4) devices, but on all buses.  is 32 enough?
+   */
+  for (i = 0; i < 32 /* USB_MAX_DEVICES */; i++) {
+    snprintf(devname, sizeof(devname), "/dev/ugen%d", i);
 
-  for (device = 1; device < USB_MAX_DEVICES; device++) {
-    struct usb_device_info di;
-    struct usb_device *dev;
-    unsigned char device_desc[DEVICE_DESC_LENGTH];
-    char buf[20];
+    /* device control node */
+    snprintf(devnode, sizeof(devnode), "%s.00", devname);
 
-    di.udi_addr = device;
-    if (ioctl(cfd, USB_DEVICEINFO, &di) < 0)
-      continue;
-
-    /* There's a device; is it one we should mess with? */
-
-    if (strncmp(di.udi_devnames[0], "ugen", 4) != 0)
-      /* best not to play with things we don't understand */
-      continue;
-
-#ifdef __FreeBSD_kernel__
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.udi_devnames[0]);
-#else
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s.00", di.udi_devnames[0]);
-#endif
-
-    /* Open its control endpoint */
-    dfd = open(buf, O_RDONLY);
-    if (dfd < 0) {
+    fd = open(devnode, O_RDONLY);
+    if (fd < 0) {
       if (usb_debug >= 2)
         fprintf(stderr, "usb_os_find_devices: couldn't open device %s: %s\n",
-                buf, strerror(errno));
+                devname, strerror(errno));
       continue;
     }
 
@@@@ -571,21 +530,13 @@@@ int usb_os_find_devices(struct usb_bus *bus, struct us
 
     dev->bus = bus;
 
-    /* we need to report the device name as /dev/ugenx NOT /dev/ugenx.00
-     * This seemed easier than having 2 variables...
-     */
-#if (__NetBSD__ || __OpenBSD__)
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.udi_devnames[0]);
-#endif
+    strlcpy(dev->filename, devname, sizeof(dev->filename));
 
-    strncpy(dev->filename, buf, sizeof(dev->filename) - 1);
-    dev->filename[sizeof(dev->filename) - 1] = 0;
-
-    if (ioctl(dfd, USB_GET_DEVICE_DESC, device_desc) < 0)
+    if (ioctl(fd, USB_GET_DEVICE_DESC, device_desc) < 0)
       USB_ERROR_STR(-errno, "couldn't get device descriptor for %s: %s",
-                    buf, strerror(errno));
+                    devname, strerror(errno));
 
-    close(dfd);
+    close(fd);
 
     usb_parse_descriptor(device_desc, "bbwbbbbwwwbbbb", &dev->descriptor);
 
@@@@ -596,8 +547,6 @@@@ int usb_os_find_devices(struct usb_bus *bus, struct us
               dev->filename, bus->dirname);
   }
 
-  close(cfd);
-
   *devices = fdev;
 
   return 0;
@@@@ -623,9 +572,21 @@@@ int usb_resetep(usb_dev_handle *dev, unsigned int ep)
 
 int usb_clear_halt(usb_dev_handle *dev, unsigned int ep)
 {
-  /* Not yet done, because I haven't needed it. */
+  int ret;
+  struct usb_ctl_request ctl_req;
 
-  USB_ERROR_STR(-ENOSYS, "usb_clear_halt called, unimplemented on BSD");
+  ctl_req.ucr_addr = 0; // Not used for this type of request
+  ctl_req.ucr_request.bmRequestType = UT_WRITE_ENDPOINT;
+  ctl_req.ucr_request.bRequest = UR_CLEAR_FEATURE;
+  USETW(ctl_req.ucr_request.wValue, UF_ENDPOINT_HALT);
+  USETW(ctl_req.ucr_request.wIndex, ep);
+  USETW(ctl_req.ucr_request.wLength, 0);
+  ctl_req.ucr_flags = 0;
+
+  if ((ret = ioctl(dev->fd, USB_DO_REQUEST, &ctl_req)) < 0)
+      USB_ERROR_STR(-errno, "clear_halt:  failed for %d", ep);
+
+  return ret;
 }
 
 int usb_reset(usb_dev_handle *dev)
@


1.12
log
@allow libusb to find ugen(4) devices without needing to access
the bus.

ok espie@@
@
text
@d1 1
a1 1
$OpenBSD: patch-bsd_c,v 1.11 2011/01/17 18:03:49 sebastia Exp $
@


1.11
log
@make usb_interrupt_read blocking again. O_NOBLOCK broke communication with my Garmin device, used via qlandkarte(gt).

"please just commit it" ajacoutot@@, "I say make it blocking" jakemsr@@
@
text
@d1 1
a1 1
$OpenBSD: patch-bsd_c,v 1.10 2011/01/17 03:55:47 jakemsr Exp $
d3 2
a4 2
usb_os_find_busses(): these ioctls only need read access.  do not
  force read-write access to /dev/usb* to use libusb.
d6 2
a7 3
usb_os_find_devices(): ugen(4) aren't necessarily the first driver
  to attach to the device, since ugen can attach to unclaimed
  interfaces.
d10 2
a11 2
--- bsd.c.orig	Sat Mar  4 03:52:46 2006
+++ bsd.c	Mon Jan 17 08:24:49 2011
d72 1
a72 1
@@@@ -477,7 +469,7 @@@@ int usb_control_msg(usb_dev_handle *dev, int requestty
d81 12
a92 2
@@@@ -491,7 +483,7 @@@@ int usb_os_find_busses(struct usb_bus **busses)
     struct usb_bus *bus;
d94 1
a94 1
     snprintf(buf, sizeof(buf) - 1, "/dev/usb%d", controller);
d96 36
a131 5
+    fd = open(buf, O_RDONLY);
     if (fd < 0) {
       if (usb_debug >= 2)
         if (errno != ENXIO && errno != ENOENT)
@@@@ -525,7 +517,8 @@@@ int usb_os_find_devices(struct usb_bus *bus, struct us
d133 4
d138 1
a138 1
   int cfd, dfd;
d140 1
a140 2
+  int device, i;
+  char devname[USB_MAX_DEVNAMELEN];
d142 23
a164 6
   cfd = open(bus->dirname, O_RDONLY);
   if (cfd < 0)
@@@@ -543,15 +536,20 @@@@ int usb_os_find_devices(struct usb_bus *bus, struct us
       continue;
 
     /* There's a device; is it one we should mess with? */
d168 17
a184 8
+    devname[0] = '\0';
+    for (i = 0; i < USB_MAX_DEVNAMES; i++) {
+      if (strncmp(di.udi_devnames[i], "ugen", 4) == 0) {
+	snprintf(devname, sizeof(devname), di.udi_devnames[i]);
+        break;
+      }
+    }
+    if (devname[0] == '\0')
d186 1
d188 3
a190 6
 #ifdef __FreeBSD_kernel__
     snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.udi_devnames[0]);
 #else
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s.00", di.udi_devnames[0]);
+    snprintf(buf, sizeof(buf) - 1, "/dev/%s.00", devname);
 #endif
d192 4
a195 5
     /* Open its control endpoint */
@@@@ -575,7 +573,7 @@@@ int usb_os_find_devices(struct usb_bus *bus, struct us
      * This seemed easier than having 2 variables...
      */
 #if (__NetBSD__ || __OpenBSD__)
d197 24
a220 2
+    snprintf(buf, sizeof(buf) - 1, "/dev/%s", devname);
 #endif
d222 2
a223 2
     strncpy(dev->filename, buf, sizeof(dev->filename) - 1);
@@@@ -623,9 +621,21 @@@@ int usb_resetep(usb_dev_handle *dev, unsigned int ep)
@


1.10
log
@recognize ugen(4)s that aren't the first driver attached to a device.
@
text
@d1 1
a1 1
$OpenBSD: patch-bsd_c,v 1.9 2011/01/16 00:44:35 jakemsr Exp $
d11 2
a12 2
--- bsd.c.orig	Sat Jan 15 17:21:11 2011
+++ bsd.c	Sat Jan 15 17:19:33 2011
d32 1
a32 1
@@@@ -394,21 +393,18 @@@@ int usb_interrupt_write(usb_dev_handle *dev, int ep, c
a50 6
 
-  fd = ensure_ep_open(dev, ep, O_RDONLY);
+  fd = ensure_ep_open(dev, ep, O_RDONLY | O_NONBLOCK);
   if (fd < 0) {
     if (usb_debug >= 2) {
 #ifdef __FreeBSD_kernel__
@


1.9
log
@usb_os_find_busses() does not need write access to /dev/usb*, read-
only is enough.

ok jasper
@
text
@d1 1
a1 1
$OpenBSD: patch-bsd_c,v 1.8 2010/11/26 13:30:19 ajacoutot Exp $
d6 3
d10 3
a12 2
--- bsd.c.orig	Fri Mar  3 18:52:46 2006
+++ bsd.c	Mon Jan 10 23:31:57 2011
d97 45
a141 1
@@@@ -623,9 +615,21 @@@@ int usb_resetep(usb_dev_handle *dev, unsigned int ep)
@


1.8
log
@Implement usb_clear_halt as it's required by several scanners and UPS.
Add O_NONBLOCK inusb_interrupt_read  to to fix communication with UPS.
Fix return value of usb_control_msg.

All from FreeBSD.

Add missing WANTLIB while here.

ok sthen@@ jakemsr@@
@
text
@d1 8
a8 3
$OpenBSD$
--- bsd.c.orig	Sat Mar  4 03:52:46 2006
+++ bsd.c	Thu Nov 25 18:54:05 2010
d84 9
@


1.7
log
@libusb-0.1.12, latest stable; ok ian
@
text
@d2 3
a4 3
--- bsd.c.orig	Fri Mar  3 19:52:46 2006
+++ bsd.c	Tue Nov 14 21:00:00 2006
@@@@ -361,7 +361,7 @@@@ int usb_bulk_read(usb_dev_handle *dev, i
d13 1
a13 1
@@@@ -383,8 +383,7 @@@@ int usb_interrupt_write(usb_dev_handle *
d19 1
a19 1
+   ret = write(fd, bytes, size);
d23 1
a23 1
@@@@ -394,16 +393,13 @@@@ int usb_interrupt_write(usb_dev_handle *
d42 7
a48 1
@@@@ -428,8 +424,7 @@@@ int usb_interrupt_read(usb_dev_handle *d
d54 1
a54 1
+    ret = read(fd, bytes, size);
d58 1
a58 1
@@@@ -438,10 +433,7 @@@@ int usb_interrupt_read(usb_dev_handle *d
d70 33
@


1.6
log
@update to libusb-0.1.10a; based on Douglas Santos <dsantos@@hydroxyl.org>
@
text
@d1 4
a4 3
--- bsd.c.orig	Tue Feb 17 23:34:52 2004
+++ bsd.c	Fri May 20 22:35:57 2005
@@@@ -357,7 +357,7 @@@@ int usb_bulk_read(usb_dev_handle *dev, i
d13 1
a13 1
@@@@ -379,8 +379,7 @@@@ int usb_interrupt_write(usb_dev_handle *
d21 1
a21 1
 #if __FreeBSD__
d23 1
a23 1
@@@@ -390,16 +389,13 @@@@ int usb_interrupt_write(usb_dev_handle *
d42 1
a42 1
@@@@ -424,8 +420,7 @@@@ int usb_interrupt_read(usb_dev_handle *d
d50 1
a50 1
 #if __FreeBSD__
d52 1
a52 1
@@@@ -434,10 +429,7 @@@@ int usb_interrupt_read(usb_dev_handle *d
@


1.5
log
@fixes, see http://www.freebsd.org/cgi/query-pr.cgi?pr=ports%2F58925
from FreeBSD via Chris Kuethe <ckuethe@@ualberta.ca>
bump PKGNAME
@
text
@d1 5
a5 6
$OpenBSD$
--- bsd.c.orig	2002-11-11 11:04:16.000000000 -0700
+++ bsd.c	2003-11-26 21:20:46.000000000 -0700
@@@@ -276,7 +276,7 @@@@ static int ensure_ep_open(usb_dev_handle
 int usb_bulk_write(usb_dev_handle *dev, int ep, char *bytes, int size,
                    int timeout)
d12 2
a13 2
@@@@ -298,8 +298,7 @@@@ int usb_bulk_write(usb_dev_handle *dev, 
     USB_ERROR_STR(ret, "error setting timeout: %s",
d18 1
a18 1
+    ret = write(fd, bytes, size);
d21 2
a22 2
       USB_ERROR_STR(ret, "error writing to bulk endpoint %s.%d: %s",
@@@@ -309,16 +308,13 @@@@ int usb_bulk_write(usb_dev_handle *dev, 
d27 1
a27 1
-  } while(ret > 0 && sent < size);
d33 2
a34 2
 int usb_bulk_read(usb_dev_handle *dev, int ep, char *bytes, int size,
                   int timeout)
d41 3
a43 3
@@@@ -345,8 +341,7 @@@@ int usb_bulk_read(usb_dev_handle *dev, i
     USB_ERROR_STR(ret, "error setting short xfer: %s",
                   strerror(errno));
d50 3
a52 3
       USB_ERROR_STR(ret, "error reading from bulk endpoint %s.%d: %s",
@@@@ -355,10 +350,8 @@@@ int usb_bulk_read(usb_dev_handle *dev, i
       USB_ERROR_STR(ret, "error reading from bulk endpoint %s.%02d: %s",
d57 1
a57 1
 
@


1.4
log
@Update to libusb 0.1.6a; fixes several issues for bsd systems.
maintainer ok.
@
text
@d1 15
a15 24
$OpenBSD: patch-bsd_c,v 1.3 2002/05/30 18:38:17 naddy Exp $
--- bsd.c.orig	Wed Feb  6 23:43:25 2002
+++ bsd.c	Sat May 25 14:38:37 2002
@@@@ -14,7 +14,7 @@@@
  * man pages and source to try and find things that did the same as
  * the Linux version. -- Richard
  *
- * jjreynold@@home.com - minor fixes with debug mode output. Consistent brace
+ * johnjen@@reynoldsnet.org - minor fixes with debug mode output. Consistent brace
  * use as well as indenting. More error messages put in to test for failure
  * modes with /dev/ permissions (when it happens). Note: I, like Richard, have
  * no clue what I'm doing. Patches to increase/fix functionality happily
@@@@ -36,12 +36,91 @@@@
 #include <sys/ioctl.h>
 
 #include <dev/usb/usb.h>
+#ifdef USB_GET_REPORT_ID
+#define USB_NEW_HID
+#endif
 
 #include "usbi.h"
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
d17 8
a24 93
+#ifndef USB_NEW_HID
+/* It appears some of the BSD's (OpenBSD atleast) have switched over to a */
+/* new naming convention, so we setup some macro's for backward */
+/* compability with older versions --jerdfelt */
+
+/* struct usb_ctl_request */
+#define ucr_addr		addr
+#define ucr_request		request
+#define ucr_data		data
+#define ucr_flags		flags
+#define ucr_actlen		actlen
+
+/* struct usb_alt_interface */
+#define uai_config_index	config_index
+#define uai_interface_index	interface_index
+#deifne uai_alt_no		uai_alt_no
+
+/* struct usb_config_desc */
+#define ucd_config_index	config_index
+#define ucd_desc		desc
+
+/* struct usb_interface_desc */
+#define uid_config_index	config_index
+#define uid_interface_index	interface_index
+#define uid_alt_index		alt_index
+#define uid_desc		desc
+
+/* struct usb_endpoint_desc */
+#define ued_config_index	config_index
+#define ued_interface_index	interface_index
+#define ued_alt_index		alt_index
+#define ued_endpoint_index	endpoint_index
+#define ued_desc		desc
+
+/* struct usb_full_desc */
+#define ufd_config_index	config_index
+#define ufd_size		size
+#define ufd_data		data
+
+/* struct usb_string_desc */
+#define usd_string_index	string_index
+#define usd_language_id		language_id
+#define usd_desc		desc
+
+/* struct usb_ctl_report_desc */
+#define ucrd_size		size
+#define ucrd_data		data
+
+/* struct usb_device_info */
+#define udi_bus			bus
+#define udi_addr		addr
+#define udi_cookie		cookie
+#define udi_product		product
+#define udi_vendor		vendor
+#define udi_release		release
+#define udi_productNo		productNo
+#define udi_vendorNo		vendorNo
+#define udi_releaseNo		releaseNo
+#define udi_class		class
+#define udi_subclass		subclass
+#define udi_protocol		protocol
+#define udi_config		config
+#define udi_lowspeed		lowspeed
+#define udi_power		power
+#define udi_nports		nports
+#define udi_devnames		devnames
+#define udi_ports		ports
+
+/* struct usb_ctl_report */
+#define ucr_report		report
+#define ucr_data		data
+
+/* struct usb_device_stats */
+#define uds_requests		requests
+#endif
+
 static int ensure_ep_open(usb_dev_handle *dev, int ep, int mode);
 
 #define MAX_CONTROLLERS 10
@@@@ -151,8 +230,8 @@@@ int usb_set_altinterface(usb_dev_handle 
   if (dev->interface < 0)
     USB_ERROR(-EINVAL);
 
-  intf.interface_index = dev->interface;
-  intf.alt_no = alternate;
+  intf.uai_interface_index = dev->interface;
+  intf.uai_alt_no = alternate;
 
   ret = ioctl(dev->fd, USB_SET_ALTINTERFACE, &intf);
   if (ret < 0)
@@@@ -182,7 +261,12 @@@@ static int ensure_ep_open(usb_dev_handle
 #else
     snprintf(buf, sizeof(buf) - 1, "%s.%02d", dev->device->filename, ep);
a25 35
-    fd = open(buf, mode);
+    /* Try to open it O_RDWR first for those devices which have in and out
+     * endpoints with the same address (eg 0x02 and 0x82)
+     */
+    fd = open(buf, O_RDWR);
+    if (fd < 0 && errno == ENXIO)
+      fd = open(buf, mode);
     if (fd < 0)
       USB_ERROR_STR(fd, "can't open %s for bulk read: %s\n",
                     buf, strerror(errno));
@@@@ -284,14 +368,14 @@@@ int usb_control_msg (usb_dev_handle *dev
     fprintf(stderr, "usb_control_msg: %d %d %d %d %p %d %d\n",
             requesttype, request, value, index, bytes, size, timeout);
 
-  req.request.bmRequestType = requesttype;
-  req.request.bRequest = request;
-  USETW(req.request.wValue, value);
-  USETW(req.request.wIndex, index);
-  USETW(req.request.wLength, size);
+  req.ucr_request.bmRequestType = requesttype;
+  req.ucr_request.bRequest = request;
+  USETW(req.ucr_request.wValue, value);
+  USETW(req.ucr_request.wIndex, index);
+  USETW(req.ucr_request.wLength, size);
 
-  req.data = bytes;
-  req.flags = 0;
+  req.ucr_data = bytes;
+  req.ucr_flags = 0;
 
   ret = ioctl(dev->fd, USB_SET_TIMEOUT, &timeout);
   if (ret < 0)
@@@@ -303,7 +387,7 @@@@ int usb_control_msg (usb_dev_handle *dev
     USB_ERROR_STR(ret, "error sending control message: %s",
                   strerror(errno));
d27 5
a31 2
-  return UGETW(req.request.wLength);
+  return UGETW(req.ucr_request.wLength);
d34 11
a44 16
 int usb_find_devices_on_bus(struct usb_bus *bus)
@@@@ -321,28 +405,22 @@@@ int usb_find_devices_on_bus(struct usb_b
     struct usb_device *dev;
     char buf[20];
 
-    di.addr = device;
+    di.udi_addr = device;
     if (ioctl(cfd, USB_DEVICEINFO, &di) < 0)
       continue;
 
     /* There's a device; is it one we should mess with? */
 
-    if (strncmp(di.devnames[0], "ugen", 4) != 0)
+    if (strncmp(di.udi_devnames[0], "ugen", 4) != 0)
       /* best not to play with things we don't understand */
       continue;
d46 4
d51 4
a54 5
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.devnames[0]);
+    snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.udi_devnames[0]);
 #else
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s.00", di.devnames[0]);
+    snprintf(buf, sizeof(buf) - 1, "/dev/%s.00", di.udi_devnames[0]);
d56 2
d59 3
a61 16
-    /* Don't re-add it if we were called multiple times */
-    for (dev = bus->devices; dev; dev = dev->next) {
-      if (!strcmp(dev->filename, buf))
-        continue;
-    }
-
     /* Open its control endpoint */
     dfd = open(buf, O_RDONLY);
     if (dfd < 0) {
@@@@ -364,7 +442,7 @@@@ int usb_find_devices_on_bus(struct usb_b
      * This seemed easier than having 2 variables...
      */
 #if __NetBSD__
-    snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.devnames[0]);
+    snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.udi_devnames[0]);
 #endif
d63 1
a63 1
     strncpy(dev->filename, buf, sizeof(dev->filename) - 1);
@


1.3
log
@- remove bad chunk with RCS Id
- pull in prototypes for string functions
ok pval@@
@
text
@d1 1
a1 1
$OpenBSD: patch-bsd_c,v 1.2 2002/05/25 20:43:17 pvalchev Exp $
@


1.2
log
@adaptation for USB namespace changes; based on work in libusb CVS
@
text
@d1 1
a1 1
$OpenBSD: patch-bsd_c,v 1.1 2002/03/05 00:16:47 jcs Exp $
a3 9
@@@@ -3,7 +3,7 @@@@
  *
  * Derived from Linux version by Richard Tobin.
  *
- * $Id: bsd.c,v 1.11 2002/02/05 20:43:38 jerdfelt Exp $
+ * $Id: bsd.c,v 1.15 2002/05/24 03:58:41 jerdfelt Exp $
  * $Name:  $
  *
  * This library is covered by the LGPL, read LICENSE for details.
@


1.1
log
@return the correct device name in bsd.c
update to libusb-0.1.5
ok pvalchev@@
@
text
@d1 203
a203 5
$OpenBSD$
--- bsd.c.orig	Thu Feb  7 00:43:25 2002
+++ bsd.c	Sun Mar  3 19:35:19 2002
@@@@ -363,7 +363,7 @@@@
     /* we need to report the device name as /dev/ugenx NOT /dev/ugenx.00
d206 3
a208 3
-#if __NetBSD__
+#if (__NetBSD__ || __OpenBSD__)
     snprintf(buf, sizeof(buf) - 1, "/dev/%s", di.devnames[0]);
d211 1
@

