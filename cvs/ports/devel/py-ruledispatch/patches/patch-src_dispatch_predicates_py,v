head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.28
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.24
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.26
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.22
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.20
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.18
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2009.08.06.23.36.44;	author martynas;	state Exp;
branches;
next	;


desc
@@


1.1
log
@as is a special keyword in python2.6.  rename it to dispatch_as;
unbreaking build for MODPY_VERSION=2.6.  noticed by sthen@@ in a bulk build
fgs@@ ok
@
text
@$OpenBSD$
--- src/dispatch/predicates.py.orig	Wed Apr 25 07:01:44 2007
+++ src/dispatch/predicates.py	Wed Aug  5 18:48:17 2009
@@@@ -236,7 +236,7 @@@@ class OrExpr(LogicalExpr):
 
         return or_, (EXPR_GETTER_ID,)
 
-    [as(classmethod)]
+    [dispatch_as(classmethod)]
     def immediate(klass,seq):
         for item in seq:
             if item:
@@@@ -260,7 +260,7 @@@@ class AndExpr(LogicalExpr):
 
         return and_, (EXPR_GETTER_ID,)
 
-    [as(classmethod)]
+    [dispatch_as(classmethod)]
     def immediate(klass,seq):
         for item in seq:
             if not item:
@@@@ -278,7 +278,7 @@@@ class IfElse(LogicalExpr):
             return get(argIds[2])
         return ifelse, (EXPR_GETTER_ID,)
 
-    [as(classmethod)]
+    [dispatch_as(classmethod)]
     def immediate(klass,seq):
         if seq[1]: return seq[0]
         return seq[2]
@
