head	1.2;
access;
symbols
	OPENBSD_5_7:1.1.1.1.0.20
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.14
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.12
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.10
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	landry_20100324:1.1.1.1
	auclair:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.03.16.18.07.44;	author naddy;	state dead;
branches;
next	1.1;
commitid	IJdm3Zowcdkcxp5X;

1.1
date	2010.03.24.19.03.37;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.24.19.03.37;	author landry;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fold lib-only PFRAG.shared into PLIST, regen PLIST, and bump
@
text
@@@comment $OpenBSD: PFRAG.shared,v 1.1 2010/03/24 19:03:37 landry Exp $
@@lib lib/libprotobuf-lite.so.${LIBprotobuf-lite_VERSION}
@@lib lib/libprotobuf.so.${LIBprotobuf_VERSION}
@@lib lib/libprotoc.so.${LIBprotoc_VERSION}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@comment $OpenBSD$
@


1.1.1.1
log
@Import protobuf 2.3.0, from Vincent Auclair with a DESCR reformatting by me.

Protocol buffers are a flexible, efficient, automated mechanism for
serializing structured data - think XML, but smaller, faster, and
simpler. You define how you want your data to be structured once, then
you can use special generated source code to easily write and read your
structured data to and from a variety of data streams and using a
variety of languages. You can even update your data structure without
breaking deployed programs that are compiled against the "old" format.
@
text
@@
