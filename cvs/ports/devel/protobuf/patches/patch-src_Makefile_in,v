head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.24
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.22
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.18
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.20
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.16
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.14
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.12
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.10
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	landry_20100324:1.1.1.1
	auclair:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.05.17.20.23.45;	author sthen;	state Exp;
branches;
next	1.2;
commitid	xoeqLAjoP6wk3O2t;

1.2
date	2011.07.11.05.25.31;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.24.19.03.37;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.24.19.03.37;	author landry;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Unbreak protobuf tests following the gtest update, from Greg Steuck with some
tweaks by me. Greg contacted the maintainer who said he's no longer interested,
so drop MAINTAINER and bump REVISION while there. Also switch MASTER_SITES from
googlecode to github.
@
text
@$OpenBSD$

Index: src/Makefile.in
--- src/Makefile.in.orig
+++ src/Makefile.in
@@@@ -156,8 +156,8 @@@@ protobuf_lazy_descriptor_test_OBJECTS =  \
 	$(am_protobuf_lazy_descriptor_test_OBJECTS) \
 	$(nodist_protobuf_lazy_descriptor_test_OBJECTS)
 protobuf_lazy_descriptor_test_DEPENDENCIES = $(am__DEPENDENCIES_1) \
-	libprotobuf.la $(top_builddir)/gtest/lib/libgtest.la \
-	$(top_builddir)/gtest/lib/libgtest_main.la
+	libprotobuf.la
+protobuf_lazy_descriptor_test_LDADD = -L${LOCALBASE}/lib -lgtest -lgtest_main
 protobuf_lazy_descriptor_test_LINK = $(LIBTOOL) --tag=CXX \
 	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
 	$(protobuf_lazy_descriptor_test_CXXFLAGS) $(CXXFLAGS) \
@@@@ -224,8 +224,8 @@@@ nodist_protobuf_test_OBJECTS = $(am__objects_8)
 protobuf_test_OBJECTS = $(am_protobuf_test_OBJECTS) \
 	$(nodist_protobuf_test_OBJECTS)
 protobuf_test_DEPENDENCIES = $(am__DEPENDENCIES_1) libprotobuf.la \
-	libprotoc.la $(top_builddir)/gtest/lib/libgtest.la \
-	$(top_builddir)/gtest/lib/libgtest_main.la
+	libprotoc.la
+protobuf_test_LDADD = -L${LOCALBASE}/lib -lgtest -lgtest_main
 protobuf_test_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(protobuf_test_CXXFLAGS) \
 	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@@
@@@@ -237,7 +237,8 @@@@ am_test_plugin_OBJECTS = test_plugin-mock_code_generat
 	test_plugin-file.$(OBJEXT) test_plugin-test_plugin.$(OBJEXT)
 test_plugin_OBJECTS = $(am_test_plugin_OBJECTS)
 test_plugin_DEPENDENCIES = $(am__DEPENDENCIES_1) libprotobuf.la \
-	libprotoc.la $(top_builddir)/gtest/lib/libgtest.la
+	libprotoc.la
+test_plugin_LDADD = -L${LOCALBASE}/lib -lgtest
 am__zcgunzip_SOURCES_DIST = google/protobuf/testing/zcgunzip.cc
 @@HAVE_ZLIB_TRUE@@am_zcgunzip_OBJECTS = zcgunzip.$(OBJEXT)
 zcgunzip_OBJECTS = $(am_zcgunzip_OBJECTS)
@@@@ -692,11 +693,9 @@@@ COMMON_TEST_SOURCES = \
   google/protobuf/testing/file.h
 
 protobuf_test_LDADD = $(PTHREAD_LIBS) libprotobuf.la libprotoc.la \
-                      $(top_builddir)/gtest/lib/libgtest.la       \
-                      $(top_builddir)/gtest/lib/libgtest_main.la
+                      -L${LOCALBASE}/lib -lgtest -lgtest_main
 
-protobuf_test_CPPFLAGS = -I$(top_srcdir)/gtest/include         \
-                         -I$(top_builddir)/gtest/include
+protobuf_test_CPPFLAGS = -I${LOCALBASE}/include
 
 # Disable optimization for tests unless the user explicitly asked for it,
 # since test_util.cc takes forever to compile with optimization (with GCC).
@@@@ -738,11 +737,9 @@@@ nodist_protobuf_test_SOURCES = $(protoc_outputs)
 
 # Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.
 protobuf_lazy_descriptor_test_LDADD = $(PTHREAD_LIBS) libprotobuf.la \
-                      $(top_builddir)/gtest/lib/libgtest.la       \
-                      $(top_builddir)/gtest/lib/libgtest_main.la
+                      -L${LOCALBASE}/lib -lgtest -lgtest_main
 
-protobuf_lazy_descriptor_test_CPPFLAGS = -I$(top_srcdir)/gtest/include    \
-                                         -I$(top_builddir)/gtest/include  \
+protobuf_lazy_descriptor_test_CPPFLAGS = -I${LOCALBASE}/include  \
                                          -DPROTOBUF_TEST_NO_DESCRIPTORS
 
 protobuf_lazy_descriptor_test_CXXFLAGS = $(NO_OPT_CXXFLAGS)
@@@@ -764,10 +761,9 @@@@ nodist_protobuf_lite_test_SOURCES = $(protoc_lite_outp
 
 # Test plugin binary.
 test_plugin_LDADD = $(PTHREAD_LIBS) libprotobuf.la libprotoc.la \
-                    $(top_builddir)/gtest/lib/libgtest.la
+                    -L${LOCALBASE}/lib -lgtest
 
-test_plugin_CPPFLAGS = -I$(top_srcdir)/gtest/include         \
-                       -I$(top_builddir)/gtest/include
+test_plugin_CPPFLAGS = -I${LOCALBASE}/include
 
 test_plugin_SOURCES = \
   google/protobuf/compiler/mock_code_generator.cc              \
@


1.2
log
@Update to protobuf-2.4.1.
From Piotr Sikora: thanks!
@
text
@d1 5
a5 3
$OpenBSD: patch-src_Makefile_in,v 1.1.1.1 2010/03/24 19:03:37 landry Exp $
--- src/Makefile.in.orig	Sat Apr 30 19:25:00 2011
+++ src/Makefile.in	Sat Jul  9 02:32:35 2011
d12 2
a13 2
+	libprotobuf.la ${LOCALBASE}/lib/libgtest.la \
+	${LOCALBASE}/lib/libgtest_main.la
d23 2
a24 2
+	libprotoc.la ${LOCALBASE}/lib/libgtest.la \
+	${LOCALBASE}/lib/libgtest_main.la
d28 1
a28 1
@@@@ -237,7 +237,7 @@@@ am_test_plugin_OBJECTS = test_plugin-mock_code_generat
d33 2
a34 1
+	libprotoc.la ${LOCALBASE}/lib/libgtest.la
d38 1
a38 1
@@@@ -692,11 +692,10 @@@@ COMMON_TEST_SOURCES = \
d44 1
a44 2
+                      ${LOCALBASE}/lib/libgtest.la       \
+                      ${LOCALBASE}/lib/libgtest_main.la
d52 1
a52 1
@@@@ -738,11 +737,10 @@@@ nodist_protobuf_test_SOURCES = $(protoc_outputs)
d58 1
a58 2
+                      ${LOCALBASE}/lib/libgtest.la       \
+                      ${LOCALBASE}/lib/libgtest_main.la
d66 1
a66 1
@@@@ -764,10 +762,9 @@@@ nodist_protobuf_lite_test_SOURCES = $(protoc_lite_outp
d71 1
a71 1
+                    ${LOCALBASE}/lib/libgtest.la
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- src/Makefile.in.orig	Tue Jan 12 11:12:09 2010
+++ src/Makefile.in	Tue Jan 12 11:19:21 2010
@@@@ -139,8 +139,8 @@@@ protobuf_lazy_descriptor_test_OBJECTS =  \
d15 1
a15 1
@@@@ -207,8 +207,8 @@@@ nodist_protobuf_test_OBJECTS = $(am__objects_8)
d26 1
a26 1
@@@@ -220,7 +220,7 @@@@ am_test_plugin_OBJECTS = test_plugin-mock_code_generat
d35 1
a35 1
@@@@ -670,11 +670,10 @@@@ COMMON_TEST_SOURCES = \
d50 1
a50 1
@@@@ -716,11 +715,10 @@@@ nodist_protobuf_test_SOURCES = $(protoc_outputs)
d65 1
a65 1
@@@@ -742,10 +740,9 @@@@ nodist_protobuf_lite_test_SOURCES = $(protoc_lite_outp
@


1.1.1.1
log
@Import protobuf 2.3.0, from Vincent Auclair with a DESCR reformatting by me.

Protocol buffers are a flexible, efficient, automated mechanism for
serializing structured data - think XML, but smaller, faster, and
simpler. You define how you want your data to be structured once, then
you can use special generated source code to easily write and read your
structured data to and from a variety of data streams and using a
variety of languages. You can even update your data structure without
breaking deployed programs that are compiled against the "old" format.
@
text
@@
