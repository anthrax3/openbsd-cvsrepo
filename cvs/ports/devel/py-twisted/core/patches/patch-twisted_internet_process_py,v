head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.22
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.20
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.18
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.12
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2011.12.08.20.15.40;	author eric;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.20.10.25.32;	author eric;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to twisted 11.1.0

no problem ajacoutot@@
@
text
@$OpenBSD$
--- twisted/internet/process.py.orig	Thu Nov 24 11:55:40 2011
+++ twisted/internet/process.py	Thu Nov 24 11:55:12 2011
@@@@ -501,7 +501,7 @@@@ class _FDDetector(object):
         This will try to return the fewest possible descriptors without missing
         any.
         """
-        self._listOpenFDs = self._getImplementation()
+        self._listOpenFDs = self._correctFDImplementation
         return self._listOpenFDs()
 
 
@@@@ -577,6 +577,16 @@@@ class _FDDetector(object):
             maxfds = min(1024, resource.getrlimit(resource.RLIMIT_NOFILE)[1])
         return range(maxfds)
 
+    def _correctFDImplementation(self):
+        import resource
+
+        maxfds = resource.getrlimit(resource.RLIMIT_NOFILE)[0]
+        fds = set(xrange(maxfds))
+        poll = select.poll()
+        for fd in fds:
+            poll.register(fd, select.POLLIN)
+        invals = set(f for (f, e) in poll.poll(0) if e == select.POLLNVAL)
+        return sorted(fds.difference(invals))
 
 
 detector = _FDDetector()
@


1.1
log
@update to twisted 11.0.0

ok landry@@
@
text
@d2 5
a6 9
--- twisted/internet/process.py.orig	Mon Mar 21 03:43:05 2011
+++ twisted/internet/process.py	Tue May  3 13:02:00 2011
@@@@ -502,25 +502,25 @@@@ class _FDDetector(object):
         /proc/%d/fd exists, if so use that.
         
         Otherwise, ask resource.getrlimit, if that throws an exception, then
-        fallback to _fallbackFDImplementation.
+        fallback to _resourceFDImplementation or _fallbackFDImplementation as
+        last resort.
d8 3
a10 17
         try:
             self.listdir("/dev/fd")
             if self._checkDevFDSanity(): # FreeBSD support :-)
                 return self._devFDImplementation
-            else:
-                return self._fallbackFDImplementation
         except:
             try:
                 self.listdir("/proc/%d/fd" % (self.getpid(),))
                 return self._procFDImplementation
             except:
-                try:
-                    self._resourceFDImplementation() # Imports resource
-                    return self._resourceFDImplementation
-                except:
-                    return self._fallbackFDImplementation
+                pass
a11 5
+        try:
+            self._resourceFDImplementation() # Imports resource
+            return self._resourceFDImplementation
+        except:
+            return self._fallbackFDImplementation
d13 3
a15 13
     def _checkDevFDSanity(self):
         """
@@@@ -560,11 +560,7 @@@@ class _FDDetector(object):
         Note that on OS-X we expect to be using the /dev/fd implementation.
         """
         import resource
-        maxfds = resource.getrlimit(resource.RLIMIT_NOFILE)[1] + 1
-        # OS-X reports 9223372036854775808. That's a lot of fds
-        # to close
-        if maxfds > 1024:
-            maxfds = 1024
+        maxfds = resource.getrlimit(resource.RLIMIT_NOFILE)[0]
         return xrange(maxfds)
d17 2
a18 6
 
@@@@ -584,7 +580,21 @@@@ def _listOpenFDs():
     Use the global detector object to figure out which FD implementation to
     use.
     """
-    return detector._listOpenFDs()
d20 2
a21 7
+    def _filterReallyOpenFDs(guess):
+        """
+        Remove false-positive from a list of supposedly open file descriptors.
+        
+        Returns a set of open file descriptors.
+        """
+        fds = set(guess)
d25 2
a26 4
+        return sorted(fds.difference(set(fd for (fd, ev) in poll.poll(0)
+                                  if ev == select.POLLNVAL)))
+
+    return _filterReallyOpenFDs(detector._listOpenFDs())
d29 1
a29 1
 class Process(_BaseProcess):
@

