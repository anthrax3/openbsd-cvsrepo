head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.8
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.4
	OPENBSD_5_8_BASE:1.1.1.1
	czarkoff_20150619:1.1.1.1
	czarkoff:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.06.19.08.42.54;	author czarkoff;	state Exp;
branches
	1.1.1.1;
next	;
commitid	c9oY3CBizv9VBsTY;

1.1.1.1
date	2015.06.19.08.42.54;	author czarkoff;	state Exp;
branches;
next	;
commitid	c9oY3CBizv9VBsTY;


desc
@@



1.1
log
@Initial revision
@
text
@gocheck works as an extension to the testing package and to the "go test"
runner. That allows keeping all current tests and using gocheck-based tests
right away for new tests without conflicts. The gocheck API was purposefully
made similar to the testing package for a smooth migration.

gocheck includes features such as:

 * helpful error reporting to aid on figuring problems out
 * richer test helpers: assertions which interrupt the test immediately, deep
   multi-type comparisons, string matching, etc
 * suite-based grouping of tests
 * fixtures: per suite and/or per test set up and tear down
 * benchmarks integrated in the suite logic (with fixtures, etc)
 * management of temporary directories
 * panic-catching logic, with proper error reporting
 * proper counting of successes, failures, panics, missed tests, skips, etc
 * explicit test skipping
 * support for expected failures
 * verbosity flag which disables output caching
 * multi-line string reporting for more comprehensible failures
 * inclusion of comments surrounding checks on failure reports
@


1.1.1.1
log
@New port: devel/go-check-v1

gocheck works as an extension to the testing package and to the "go test"
runner. That allows keeping all current tests and using gocheck-based tests
right away for new tests without conflicts. The gocheck API was purposefully
made similar to the testing package for a smooth migration.

gocheck includes features such as:

 * helpful error reporting to aid on figuring problems out
 * richer test helpers: assertions which interrupt the test immediately, deep
   multi-type comparisons, string matching, etc
 * suite-based grouping of tests
 * fixtures: per suite and/or per test set up and tear down
 * benchmarks integrated in the suite logic (with fixtures, etc)
 * management of temporary directories
 * panic-catching logic, with proper error reporting
 * proper counting of successes, failures, panics, missed tests, skips, etc
 * explicit test skipping
 * support for expected failures
 * verbosity flag which disables output caching
 * multi-line string reporting for more comprehensible failures
 * inclusion of comments surrounding checks on failure reports
@
text
@@
