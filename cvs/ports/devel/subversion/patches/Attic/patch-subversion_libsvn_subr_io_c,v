head	1.2;
access;
symbols
	alek_20041201:1.1.1.1 alek:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2005.01.21.20.29.11;	author alek;	state dead;
branches;
next	1.1;

1.1
date	2004.12.01.16.47.54;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.01.16.47.54;	author alek;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to 1.1.3 (patch from Steven Mestdagh)
- Enable perl regression tests

help & ok msf@@
@
text
@$OpenBSD: patch-subversion_libsvn_subr_io_c,v 1.1 2004/12/01 16:47:54 alek Exp $
--- subversion/libsvn_subr/io.c.orig	Sat Sep 11 15:27:20 2004
+++ subversion/libsvn_subr/io.c	Mon Nov 29 00:34:51 2004
@@@@ -1412,7 +1412,7 @@@@ svn_io_remove_dir (const char *path, apr
   apr_status_t status;
   apr_dir_t *this_dir;
   apr_finfo_t this_entry;
-  apr_pool_t *subpool = svn_pool_create (pool);
+  apr_pool_t *subpool;
   apr_int32_t flags = APR_FINFO_TYPE | APR_FINFO_NAME;
   const char *path_apr;
 
@@@@ -1424,16 +1424,18 @@@@ svn_io_remove_dir (const char *path, apr
      instead of just using svn_io_dir_open, because we're going to
      need path_apr later anyway when we remove the dir itself. */
 
-  SVN_ERR (svn_path_cstring_from_utf8 (&path_apr, path, subpool));
+  SVN_ERR (svn_path_cstring_from_utf8 (&path_apr, path, pool));
 
-  status = apr_dir_open (&this_dir, path_apr, subpool);
+  status = apr_dir_open (&this_dir, path_apr, pool);
   if (status)
     return svn_error_wrap_apr (status, "Can't open directory '%s'", path);
 
+  subpool = svn_pool_create (pool);
   for (status = apr_dir_read (&this_entry, flags, this_dir);
        status == APR_SUCCESS;
        status = apr_dir_read (&this_entry, flags, this_dir))
     {
+      svn_pool_clear (subpool);
       if ((this_entry.filetype == APR_DIR)
           && ((this_entry.name[0] == '.')
               && ((this_entry.name[1] == '\0')
@@@@ -1449,7 +1451,7 @@@@ svn_io_remove_dir (const char *path, apr
           SVN_ERR (svn_path_cstring_to_utf8 (&entry_utf8, this_entry.name,
                                              subpool));
           
-          fullpath = svn_path_join (path, entry_utf8, pool);
+          fullpath = svn_path_join (path, entry_utf8, subpool);
 
           if (this_entry.filetype == APR_DIR)
             {
@@@@ -1471,6 +1473,8 @@@@ svn_io_remove_dir (const char *path, apr
         }
     }
 
+  apr_pool_destroy (subpool);
+
   if (!APR_STATUS_IS_ENOENT (status))
     return svn_error_wrap_apr (status, "Can't read directory '%s'", path);
 
@@@@ -1478,13 +1482,11 @@@@ svn_io_remove_dir (const char *path, apr
   if (status)
     return svn_error_wrap_apr (status, "Error closing directory '%s'", path);
 
-  status = apr_dir_remove (path_apr, subpool);
-  WIN32_RETRY_LOOP (status, apr_dir_remove (path_apr, subpool));
+  status = apr_dir_remove (path_apr, pool);
+  WIN32_RETRY_LOOP (status, apr_dir_remove (path_apr, pool));
   if (status)
     return svn_error_wrap_apr (status, "Can't remove '%s'", path);
 
-  apr_pool_destroy (subpool);
-
   return APR_SUCCESS;
 }
 
@@@@ -1731,8 +1733,8 @@@@ svn_io_run_diff (const char *dir, 
       args[i++] = label2;
     }
 
-  args[i++] = from;
-  args[i++] = to;
+  args[i++] = svn_path_local_style (from, subpool);
+  args[i++] = svn_path_local_style (to, subpool);
   args[i++] = NULL;
 
   assert (i == nargs);
@@@@ -1835,9 +1837,9 @@@@ svn_io_run_diff3 (const char *dir,
       }
   }
 #endif
-  args[i++] = mine;
-  args[i++] = older;
-  args[i++] = yours;
+  args[i++] = svn_path_local_style (mine, pool);
+  args[i++] = svn_path_local_style (older, pool);
+  args[i++] = svn_path_local_style (yours, pool);
   args[i++] = NULL;
   assert (i == nargs);
 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import Subversion 1.1.1

Subversion is a free/open-source version control system. That is,
Subversion manages files and directories over time. A tree of files
is placed into a central repository. The repository is much like an
ordinary file server, except that it remembers every change ever made
to your files and directories. This allows you to recover older versions
of your data, or examine the history of how your data changed.
In this regard, many people think of a version control system as a
sort of time machine.

Joint work with msf@@, Sigfred H?versen, Alex Holst and Steven Mestdagh

ok naddy@@, go ahead msf@@
@
text
@@
