head	1.2;
access;
symbols
	alek_20041201:1.1.1.1 alek:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2005.01.21.20.29.11;	author alek;	state dead;
branches;
next	1.1;

1.1
date	2004.12.01.16.47.54;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.01.16.47.54;	author alek;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to 1.1.3 (patch from Steven Mestdagh)
- Enable perl regression tests

help & ok msf@@
@
text
@$OpenBSD: patch-subversion_libsvn_fs_fs_fs_fs_c,v 1.1 2004/12/01 16:47:54 alek Exp $
--- subversion/libsvn_fs_fs/fs_fs.c.orig	Tue Oct 19 22:37:15 2004
+++ subversion/libsvn_fs_fs/fs_fs.c	Sun Nov 28 23:33:44 2004
@@@@ -2042,7 +2042,7 @@@@ fetch_all_changes (apr_hash_t *changed_p
   /* Read in the changes one by one, folding them into our local hash
      as necessary. */
   
-  SVN_ERR (read_change (&change, file, pool));
+  SVN_ERR (read_change (&change, file, iterpool));
 
   while (change)
     {
@@@@ -2081,10 +2081,10 @@@@ fetch_all_changes (apr_hash_t *changed_p
             }
         }
 
-      SVN_ERR (read_change (&change, file, pool));
-
       /* Clear the per-iteration subpool. */
       svn_pool_clear (iterpool);
+
+      SVN_ERR (read_change (&change, file, iterpool));
     }
 
   /* Destroy the per-iteration subpool. */
@@@@ -3272,7 +3272,8 @@@@ write_final_changed_path_info (apr_off_t
   apr_hash_t *changed_paths, *copyfrom_cache = apr_hash_make (pool);
   apr_off_t offset;
   apr_hash_index_t *hi;
-  
+  apr_pool_t *iterpool = svn_pool_create (pool);
+
   SVN_ERR (get_file_offset (&offset, file, pool));
 
   SVN_ERR (svn_fs_fs__txn_changes_fetch (&changed_paths, fs, txn_id,
@@@@ -3289,6 +3290,8 @@@@ write_final_changed_path_info (apr_off_t
       void *val;
       apr_ssize_t keylen;
 
+      svn_pool_clear (iterpool);
+
       apr_hash_this (hi, &key, &keylen, &val);
       change = val;
       
@@@@ -3300,7 +3303,7 @@@@ write_final_changed_path_info (apr_off_t
       if ((change->change_kind != svn_fs_path_change_delete) &&
           (! svn_fs_fs__id_txn_id (id)))
         {
-          SVN_ERR (svn_fs_fs__get_node_revision (&noderev, fs, id, pool));
+          SVN_ERR (svn_fs_fs__get_node_revision (&noderev, fs, id, iterpool));
           
           /* noderev has the permanent node-id at this point, so we just
              substitute it for the temporary one. */
@@@@ -3311,8 +3314,10 @@@@ write_final_changed_path_info (apr_off_t
       copyfrom = apr_hash_get (copyfrom_cache, key, APR_HASH_KEY_STRING);
 
       /* Write out the new entry into the final rev-file. */
-      SVN_ERR (write_change_entry (file, key, change, copyfrom, pool));
+      SVN_ERR (write_change_entry (file, key, change, copyfrom, iterpool));
     }
+
+  svn_pool_destroy (iterpool);
 
   *offset_p = offset;
   
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import Subversion 1.1.1

Subversion is a free/open-source version control system. That is,
Subversion manages files and directories over time. A tree of files
is placed into a central repository. The repository is much like an
ordinary file server, except that it remembers every change ever made
to your files and directories. This allows you to recover older versions
of your data, or examine the history of how your data changed.
In this regard, many people think of a version control system as a
sort of time machine.

Joint work with msf@@, Sigfred H?versen, Alex Holst and Steven Mestdagh

ok naddy@@, go ahead msf@@
@
text
@@
