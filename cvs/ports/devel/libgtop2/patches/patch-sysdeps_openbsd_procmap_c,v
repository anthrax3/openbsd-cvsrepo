head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.18.0.2
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.15.0.2
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2;
locks; strict;
comment	@# @;


1.24
date	2016.10.03.12.11.29;	author dlg;	state Exp;
branches;
next	1.23;
commitid	OglW3akjFBbNuSTg;

1.23
date	2016.04.20.06.20.38;	author jasper;	state dead;
branches;
next	1.22;
commitid	t93j0n2r5bzxZbbK;

1.22
date	2015.12.11.14.19.04;	author jasper;	state Exp;
branches;
next	1.21;
commitid	Ba1Rsjr8wwBsBpae;

1.21
date	2015.12.11.14.07.30;	author jasper;	state Exp;
branches;
next	1.20;
commitid	CWQNOsQpFRBLZIfv;

1.20
date	2014.11.18.18.35.47;	author jasper;	state Exp;
branches;
next	1.19;
commitid	BOxfFoaLKsmSKDOc;

1.19
date	2014.11.18.16.04.43;	author sthen;	state Exp;
branches;
next	1.18;
commitid	VvQtEPYJKlN2qxWA;

1.18
date	2014.07.15.06.53.29;	author ajacoutot;	state Exp;
branches;
next	1.17;
commitid	qVFs7xvC6xefcqYW;

1.17
date	2014.07.10.10.26.47;	author sthen;	state Exp;
branches;
next	1.16;
commitid	iulxBoigGXjW7GQY;

1.16
date	2014.04.29.06.27.57;	author jasper;	state dead;
branches;
next	1.15;

1.15
date	2014.02.08.10.55.31;	author ajacoutot;	state Exp;
branches;
next	1.14;

1.14
date	2014.02.03.13.50.32;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2014.02.03.13.46.19;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2013.12.09.14.26.56;	author robert;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.26.08.43.15;	author ajacoutot;	state dead;
branches;
next	1.10;

1.10
date	2013.03.27.07.57.38;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.09.22.47.31;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2012.04.04.17.24.29;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2012.03.11.08.45.24;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.22.11.55.10;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.09.17.39.19;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.09.17.22.15;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.09.16.45.20;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.18.11.46.16;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.17.17.43.44;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.24
log
@gut the procmap functionality so this can build.

i broke it by moving uvm datastructures from RB macros to RBT
functions. gutting libgtop2 basically means make it return an empty
list of mappings.

ok jasper@@ sthen@@
@
text
@$OpenBSD$
--- sysdeps/openbsd/procmap.c.orig	Mon Sep 26 11:23:34 2016
+++ sysdeps/openbsd/procmap.c	Mon Sep 26 11:23:44 2016
@@@@ -26,30 +26,6 @@@@
 
 #include <glibtop_suid.h>
 
-#include <kvm.h>
-#include <stdlib.h>
-#include <sys/param.h>
-#include <sys/proc.h>
-#include <sys/resource.h>
-#include <uvm/uvm_extern.h>
-
-#include <sys/vnode.h>
-#include <sys/mount.h>
-#include <ufs/ufs/quota.h>
-#include <ufs/ufs/inode.h>
-
-#include <sys/ucred.h>
-#include <sys/sysctl.h>
-
-/* XXX until uvm gets cleaned up */
-#include <sys/mutex.h>
-typedef int boolean_t;
-
-#undef _KERNEL
-#define _UVM_UVM_AMAP_I_H_ 1
-#define _UVM_UVM_MAP_I_H_ 1
-#include <uvm/uvm.h>
-
 static const unsigned long _glibtop_sysdeps_proc_map =
 (1L << GLIBTOP_PROC_MAP_TOTAL) + (1L << GLIBTOP_PROC_MAP_NUMBER) +
 (1L << GLIBTOP_PROC_MAP_SIZE);
@@@@ -59,12 +35,6 @@@@ static const unsigned long _glibtop_sysdeps_map_entry 
 (1L << GLIBTOP_MAP_ENTRY_OFFSET) + (1L << GLIBTOP_MAP_ENTRY_PERM) +
 (1L << GLIBTOP_MAP_ENTRY_INODE) + (1L << GLIBTOP_MAP_ENTRY_DEVICE);
 
-/* Local helper functions. */
-
-ssize_t	load_vmmap_entries(glibtop*, unsigned long, struct vm_map_entry**,
-	    struct vm_map_entry*);
-void	unload_vmmap_entries(struct vm_map_entry *);
-
 /* Init function. */
 
 void
@@@@ -74,240 +44,12 @@@@ _glibtop_init_proc_map_p (glibtop *server)
 }
 
 /*
- * Download vmmap_entries from the kernel into our address space.
- * We fix up the addr tree while downloading.
- *
- * Returns: the size of the tree on succes, or -1 on failure.
- * On failure, *rptr needs to be passed to unload_vmmap_entries to free
- * the lot.
- */
-ssize_t
-load_vmmap_entries(glibtop *server, unsigned long kptr,
-    struct vm_map_entry **rptr, struct vm_map_entry *parent)
-{
-	struct vm_map_entry *entry;
-	unsigned long left_kptr, right_kptr;
-	ssize_t left_sz;
-	ssize_t right_sz;
-
-	if (kptr == 0)
-		return 0;
-
-	/* Need space. */
-	entry = malloc(sizeof(*entry));
-	if (entry == NULL)
-		return -1;
-
-	/* Download entry at kptr. */
-	if (kvm_read (server->machine->kd, kptr,
-	    (char *)entry, sizeof(*entry)) != sizeof(*entry)) {
-		free(entry);
-		return -1;
-	}
-
-	/*
-	 * Update addr pointers to have sane values in this address space.
-	 * We save the kernel pointers in {left,right}_kptr, so we have them
-	 * available to download children.
-	 */
-	left_kptr = (unsigned long) RB_LEFT(entry, daddrs.addr_entry);
-	right_kptr = (unsigned long) RB_RIGHT(entry, daddrs.addr_entry);
-	RB_LEFT(entry, daddrs.addr_entry) =
-	    RB_RIGHT(entry, daddrs.addr_entry) = NULL;
-	/* Fill in parent pointer. */
-	RB_PARENT(entry, daddrs.addr_entry) = parent;
-
-	/*
-	 * Consistent state reached, fill in *rptr.
-	 */
-	*rptr = entry;
-
-	/*
-	 * Download left, right.
-	 * On failure, our map is in a state that can be handled by
-	 * unload_vmmap_entries.
-	 */
-	left_sz = load_vmmap_entries(server, left_kptr,
-	    &RB_LEFT(entry, daddrs.addr_entry), entry);
-	if (left_sz == -1)
-		return -1;
-	right_sz = load_vmmap_entries(server, right_kptr,
-	    &RB_RIGHT(entry, daddrs.addr_entry), entry);
-	if (right_sz == -1)
-		return -1;
-
-	return 1 + left_sz + right_sz;
-}
-
-/*
- * Free the vmmap entries in the given tree.
- */
-void
-unload_vmmap_entries(struct vm_map_entry *entry)
-{
-	if (entry == NULL)
-		return;
-
-	unload_vmmap_entries(RB_LEFT(entry, daddrs.addr_entry));
-	unload_vmmap_entries(RB_RIGHT(entry, daddrs.addr_entry));
-	free(entry);
-}
-
-/*
  * Provides detailed information about a process.
- * Due to the fact we are only requested info about one process, it's possible
- * the process has been reaped before we get to kvm_getprocs. Tough luck.
  */
 
 glibtop_map_entry *
 glibtop_get_proc_map_p (glibtop *server, glibtop_proc_map *buf,
 			pid_t pid)
 {
-	struct kinfo_proc *pinfo;
-	struct vm_map_entry *entry;
-	struct uvm_map_addr root;
-	struct vmspace vmspace;
-	struct vnode vnode;
-	struct inode inode;
-	ssize_t nentries;
-	GArray *maps = g_array_sized_new(FALSE, FALSE,
-					 sizeof(glibtop_map_entry),
-					 100);
-	int count = 0;
-
-	glibtop_init_p (server, (1L << GLIBTOP_SYSDEPS_PROC_MAP), 0);
-
-	memset (buf, 0, sizeof (glibtop_proc_map));
-
-	/* It does not work for the swapper task. */
-	if (pid == 0) return (glibtop_map_entry*) g_array_free(maps, TRUE);
-
-	glibtop_suid_enter (server);
-
-	/* Get the process data */
-	pinfo = kvm_getprocs (server->machine->kd, KERN_PROC_PID, pid, sizeof(struct kinfo_proc), &count);
-	if (pinfo == NULL) {
-		glibtop_warn_io_r (server, "kvm_getprocs (%d)", pid);
-		return (glibtop_map_entry*) g_array_free(maps, TRUE);
-	}
-
-	/* Now we get the memory maps. */
-
-	if (kvm_read (server->machine->kd,
-		      (unsigned long) pinfo [0].p_vmspace,
-		      (char *) &vmspace, sizeof (vmspace)) != sizeof (vmspace)) {
-			glibtop_warn_io_r (server, "kvm_read (vmspace)");
-			glibtop_suid_leave (server);
-			return NULL;
-	}
-
-	RB_INIT(&root);
-	nentries = load_vmmap_entries(server,
-	    (unsigned long) RB_ROOT(&vmspace.vm_map.addr),
-	    &RB_ROOT(&root), NULL);
-	if (nentries == -1) {
-		unload_vmmap_entries(RB_ROOT(&root));
-		glibtop_error_io_r (server, "kvm_read (entry)");
-	}
-
-	/* Allocate space. */
-
-	buf->number = nentries;
-	buf->size = sizeof (glibtop_map_entry);
-
-	buf->total = buf->number * buf->size;
-
-	buf->flags = _glibtop_sysdeps_proc_map;
-
-	/* Walk through the `vm_map_entry' list ... */
-
-	/* I tested this a few times with `mmap'; as soon as you write
-	 * to the mmap'ed area, the object type changes from OBJT_VNODE
-	 * to OBJT_DEFAULT so it seems this really works.
-	 */
-
-	RB_FOREACH(entry, uvm_map_addr, &root) {
-		glibtop_map_entry *mentry;
-		unsigned long inum, dev;
-		guint len;
-
- 		if (UVM_ET_ISSUBMAP(entry))
-			continue;
-		if (!entry->object.uvm_obj)
-			continue;
-
-		/* We're only interested in vnodes */
-
-		if (kvm_read (server->machine->kd,
-			      (unsigned long) entry->object.uvm_obj,
-			      &vnode, sizeof (vnode)) != sizeof (vnode)) {
-			glibtop_warn_io_r (server, "kvm_read (vnode)");
-			unload_vmmap_entries(RB_ROOT(&root));
-			glibtop_suid_leave (server);
-			return (glibtop_map_entry*) g_array_free(maps, TRUE);
-		}
-
-#if defined(UVM_VNODE_VALID)
-		if (!vnode.v_uvm.u_flags & UVM_VNODE_VALID)
-			continue;
-#endif
-		if ((vnode.v_type != VREG) || (vnode.v_tag != VT_UFS) ||
-		    !vnode.v_data) continue;
-
-		if (kvm_read (server->machine->kd,
-			      (unsigned long) vnode.v_data,
-			      &inode, sizeof (inode)) != sizeof (inode)) {
-			glibtop_warn_io_r (server, "kvm_read (inode)");
-			unload_vmmap_entries(RB_ROOT(&root));
-			glibtop_suid_leave (server);
-			return (glibtop_map_entry*) g_array_free(maps, TRUE);
-		}
-
-		inum  = inode.i_number;
-		dev = inode.i_dev;
-
-		len = maps->len;
-		g_array_set_size(maps, len + 1);
-		mentry = &g_array_index(maps, glibtop_map_entry, len);
-
-		mentry->flags  = _glibtop_sysdeps_map_entry;
-
-		mentry->start  = (guint64) entry->start;
-		mentry->end    = (guint64) entry->end;
-		mentry->offset = (guint64) entry->offset;
-		mentry->device = (guint64) dev;
-		mentry->inode  = (guint64) inum;
-
-		mentry->perm   = (guint64) 0;
-
-		if (entry->protection & PROT_READ)
-			mentry->perm |= GLIBTOP_MAP_PERM_READ;
-		if (entry->protection & PROT_WRITE)
-			mentry->perm |= GLIBTOP_MAP_PERM_WRITE;
-		if (entry->protection & PROT_EXEC)
-			mentry->perm |= GLIBTOP_MAP_PERM_EXECUTE;
-	}
-
-	glibtop_suid_leave (server);
-
-	buf->flags = _glibtop_sysdeps_proc_map;
-
-	buf->number = maps->len;
-	buf->size = sizeof (glibtop_map_entry);
-	buf->total = buf->number * buf->size;
-
-	unload_vmmap_entries(RB_ROOT(&root));
-	return (glibtop_map_entry*) g_array_free(maps, FALSE);
+	return NULL;
 }
-
-/*
- * Don't implement address comparison.
- */
-static __inline int
-no_impl(void *p, void *q)
-{
-	abort(); /* Should not be called. */
-	return 0;
-}
-
-RB_GENERATE(uvm_map_addr, vm_map_entry, daddrs.addr_entry, no_impl);
@


1.23
log
@update to libgtop-2.34.0
@
text
@d1 4
a4 17
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.22 2015/12/11 14:19:04 jasper Exp $

From fcfacf32133cd0f03ad8dd795c23adcda9b05b3c Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Fri, 11 Dec 2015 14:59:11 +0100
Subject: PROT_EXECUTE -> PROT_EXEC

--- sysdeps/openbsd/procmap.c.orig	Fri Dec 11 14:31:25 2015
+++ sysdeps/openbsd/procmap.c	Fri Dec 11 14:32:21 2015
@@@@ -284,7 +284,7 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 			mentry->perm |= GLIBTOP_MAP_PERM_READ;
 		if (entry->protection & PROT_WRITE)
 			mentry->perm |= GLIBTOP_MAP_PERM_WRITE;
-		if (entry->protection & PROT_EXECUTE)
+		if (entry->protection & PROT_EXEC)
 			mentry->perm |= GLIBTOP_MAP_PERM_EXECUTE;
 	}
d6 284
@


1.22
log
@pushed upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.21 2015/12/11 14:07:30 jasper Exp $
@


1.21
log
@- update to libgtop2-2.32.0
* various changes, mostly upstream rototilling code
@
text
@d1 1
a1 1
$OpenBSD$
d3 4
a6 1
PROT_EXECUTE -> PROT_EXEC
@


1.20
log
@committed upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.19 2014/11/18 16:04:43 sthen Exp $
d3 1
a3 4
From 057dcf77d63700b97f5c146cb35b1026f516eaec Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Tue, 18 Nov 2014 19:33:38 +0100
Subject: Sync with OpenBSD's uvm_extern.h changes
d5 3
a7 24
From 9a887feed2147f32ac360be92405e41ad324ff95 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Thu, 10 Jul 2014 13:15:50 +0200
Subject: Unbreak build on OpenBSD after recent header changes.

--- sysdeps/openbsd/procmap.c.orig	Mon Apr 28 15:09:24 2014
+++ sysdeps/openbsd/procmap.c	Tue Nov 18 08:39:53 2014
@@@@ -41,6 +41,10 @@@@
 #include <sys/ucred.h>
 #include <sys/sysctl.h>
 
+/* XXX until uvm gets cleaned up */
+#include <sys/mutex.h>
+typedef int boolean_t;
+
 #undef _KERNEL
 #define _UVM_UVM_AMAP_I_H_ 1
 #define _UVM_UVM_MAP_I_H_ 1
@@@@ -276,11 +280,11 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 
 		mentry->perm   = (guint64) 0;
 
-		if (entry->protection & VM_PROT_READ)
+		if (entry->protection & PROT_READ)
d9 1
a9 2
-		if (entry->protection & VM_PROT_WRITE)
+		if (entry->protection & PROT_WRITE)
d11 1
a11 1
-		if (entry->protection & VM_PROT_EXECUTE)
@


1.19
log
@fix following uvm_extern.h changes, ok jasper@@
@
text
@d1 6
a6 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.18 2014/07/15 06:53:29 ajacoutot Exp $
@


1.18
log
@Pushed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.17 2014/07/10 10:26:47 sthen Exp $
d8 2
a9 2
--- sysdeps/openbsd/procmap.c.orig	Thu Jul 10 04:25:16 2014
+++ sysdeps/openbsd/procmap.c	Thu Jul 10 04:25:40 2014
d21 15
@


1.17
log
@#include <sys/mutex.h>
typedef int boolean_t;
@
text
@d1 7
a7 1
$OpenBSD$
@


1.16
log
@update to libgtop-2.30.0
@
text
@d1 10
a10 56
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.15 2014/02/08 10:55:31 ajacoutot Exp $

RM at next release.

--- sysdeps/openbsd/procmap.c.orig	Sat Jul 27 14:40:23 2013
+++ sysdeps/openbsd/procmap.c	Sat Feb  8 11:25:52 2014
@@@@ -184,7 +184,7 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 
 	/* Get the process data */
 	pinfo = kvm_getprocs (server->machine.kd, KERN_PROC_PID, pid, sizeof(struct kinfo_proc), &count);
-	if ((pinfo == NULL) || (count < 1)) {
+	if (pinfo == NULL) {
 		glibtop_warn_io_r (server, "kvm_getprocs (%d)", pid);
 		return (glibtop_map_entry*) g_array_free(maps, TRUE);
 	}
@@@@ -193,8 +193,11 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 
 	if (kvm_read (server->machine.kd,
 		      (unsigned long) pinfo [0].p_vmspace,
-		      (char *) &vmspace, sizeof (vmspace)) != sizeof (vmspace))
-		glibtop_error_io_r (server, "kvm_read (vmspace)");
+		      (char *) &vmspace, sizeof (vmspace)) != sizeof (vmspace)) {
+			glibtop_warn_io_r (server, "kvm_read (vmspace)");
+			glibtop_suid_leave (server);
+			return NULL;
+	}
 
 	RB_INIT(&root);
 	nentries = load_vmmap_entries(server,
@@@@ -238,6 +241,7 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 			      &vnode, sizeof (vnode)) != sizeof (vnode)) {
 			glibtop_warn_io_r (server, "kvm_read (vnode)");
 			unload_vmmap_entries(RB_ROOT(&root));
+			glibtop_suid_leave (server);
 			return (glibtop_map_entry*) g_array_free(maps, TRUE);
 		}
 
@@@@ -250,8 +254,12 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 
 		if (kvm_read (server->machine.kd,
 			      (unsigned long) vnode.v_data,
-			      &inode, sizeof (inode)) != sizeof (inode))
-			glibtop_error_io_r (server, "kvm_read (inode)");
+			      &inode, sizeof (inode)) != sizeof (inode)) {
+			glibtop_warn_io_r (server, "kvm_read (inode)");
+			unload_vmmap_entries(RB_ROOT(&root));
+			glibtop_suid_leave (server);
+			return (glibtop_map_entry*) g_array_free(maps, TRUE);
+		}
 
 		inum  = inode.i_number;
 		dev = inode.i_dev;
@@@@ -277,6 +285,8 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 		if (entry->protection & VM_PROT_EXECUTE)
 			mentry->perm |= GLIBTOP_MAP_PERM_EXECUTE;
 	}
d12 3
a14 4
+	glibtop_suid_leave (server);
 
 	buf->flags = _glibtop_sysdeps_proc_map;
 
@


1.15
log
@Drop unecessary checks and bring glibtop_get_proc_segment from FreeBSD.
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.14 2014/02/03 13:50:32 ajacoutot Exp $
@


1.14
log
@Explicitely mark all files that can be removed when the next release is out.
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.13 2014/02/03 13:46:19 ajacoutot Exp $
d6 10
a15 1
+++ sysdeps/openbsd/procmap.c	Mon Feb  3 10:41:54 2014
@


1.13
log
@Sync with what was committed upstream to bring us closer to what FreeBSD
does.
Properly use the OpenBSD-specific code instead of the common one.

ok jasper@@ (maintainer)
@
text
@d1 4
a4 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.12 2013/12/09 14:26:56 robert Exp $
@


1.12
log
@fix several issues with libgtop2 process information code
ok jasper@@
@
text
@d1 3
a3 3
$OpenBSD$
--- sysdeps/openbsd/procmap.c.orig	Mon Dec  9 15:06:15 2013
+++ sysdeps/openbsd/procmap.c	Mon Dec  9 15:11:07 2013
d18 32
@


1.11
log
@Update to libgtop2-2.28.5.
No noticeable changes besides our patches being integrated upstream.
@
text
@d1 13
a13 184
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.10 2013/03/27 07:57:38 jasper Exp $

From b0f4bee85e3ef974ca9fde04abd1769a8b84a544 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date: Wed, 04 Apr 2012 17:23:07 +0000
Subject: sync with openbsd to use the new vmmap memory allocator

From b11aa1517e203e36a8901f03ea57c50a25dfbfc7 Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Sun, 22 Jan 2012 11:47:49 +0000
Subject: OpenBSD: kinfo_proc2 -> kinfo_proc

commit 7bd52fc397be0598638abae2bf71740af505d29c
Author: Jasper Lievisse Adriaanse <jasper@@humppa.nl>
Date:   Sun Sep 18 13:41:20 2011 +0200
Extend comment a bit regarding processes dying before we get to kvm_getproc2()

--- sysdeps/openbsd/procmap.c.orig	Sun Jul 24 21:13:56 2011
+++ sysdeps/openbsd/procmap.c	Wed Mar 27 08:48:04 2013
@@@@ -1,4 +1,4 @@@@
-/* $OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.10 2013/03/27 07:57:38 jasper Exp $	*/
+/* $OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.10 2013/03/27 07:57:38 jasper Exp $	*/
 
 /* Copyright (C) 1998 Joshua Sled
    This file is part of LibGTop 1.0.
@@@@ -29,6 +29,7 @@@@
 #include <glibtop_suid.h>
 
 #include <kvm.h>
+#include <stdlib.h>
 #include <sys/param.h>
 #include <sys/proc.h>
 #include <sys/resource.h>
@@@@ -56,6 +57,12 @@@@ static const unsigned long _glibtop_sysdeps_map_entry 
 (1L << GLIBTOP_MAP_ENTRY_OFFSET) + (1L << GLIBTOP_MAP_ENTRY_PERM) +
 (1L << GLIBTOP_MAP_ENTRY_INODE) + (1L << GLIBTOP_MAP_ENTRY_DEVICE);
 
+/* Local helper functions. */
+
+ssize_t	load_vmmap_entries(glibtop*, unsigned long, struct vm_map_entry**,
+	    struct vm_map_entry*);
+void	unload_vmmap_entries(struct vm_map_entry *);
+
 /* Init function. */
 
 void
@@@@ -64,22 +71,107 @@@@ _glibtop_init_proc_map_p (glibtop *server)
 	server->sysdeps.proc_map = _glibtop_sysdeps_proc_map;
 }
 
-/* Provides detailed information about a process. */
+/*
+ * Download vmmap_entries from the kernel into our address space.
+ * We fix up the addr tree while downloading.
+ *
+ * Returns: the size of the tree on succes, or -1 on failure.
+ * On failure, *rptr needs to be passed to unload_vmmap_entries to free
+ * the lot.
+ */
+ssize_t
+load_vmmap_entries(glibtop *server, unsigned long kptr,
+    struct vm_map_entry **rptr, struct vm_map_entry *parent)
+{
+	struct vm_map_entry *entry;
+	unsigned long left_kptr, right_kptr;
+	ssize_t left_sz;
+	ssize_t right_sz;
 
+	if (kptr == 0)
+		return 0;
+
+	/* Need space. */
+	entry = malloc(sizeof(*entry));
+	if (entry == NULL)
+		return -1;
+
+	/* Download entry at kptr. */
+	if (kvm_read (server->machine.kd, kptr,
+	    (char *)entry, sizeof(*entry)) != sizeof(*entry)) {
+		free(entry);
+		return -1;
+	}
+
+	/*
+	 * Update addr pointers to have sane values in this address space.
+	 * We save the kernel pointers in {left,right}_kptr, so we have them
+	 * available to download children.
+	 */
+	left_kptr = (unsigned long) RB_LEFT(entry, daddrs.addr_entry);
+	right_kptr = (unsigned long) RB_RIGHT(entry, daddrs.addr_entry);
+	RB_LEFT(entry, daddrs.addr_entry) =
+	    RB_RIGHT(entry, daddrs.addr_entry) = NULL;
+	/* Fill in parent pointer. */
+	RB_PARENT(entry, daddrs.addr_entry) = parent;
+
+	/*
+	 * Consistent state reached, fill in *rptr.
+	 */
+	*rptr = entry;
+
+	/*
+	 * Download left, right.
+	 * On failure, our map is in a state that can be handled by
+	 * unload_vmmap_entries.
+	 */
+	left_sz = load_vmmap_entries(server, left_kptr,
+	    &RB_LEFT(entry, daddrs.addr_entry), entry);
+	if (left_sz == -1)
+		return -1;
+	right_sz = load_vmmap_entries(server, right_kptr,
+	    &RB_RIGHT(entry, daddrs.addr_entry), entry);
+	if (right_sz == -1)
+		return -1;
+
+	return 1 + left_sz + right_sz;
+}
+
+/*
+ * Free the vmmap entries in the given tree.
+ */
+void
+unload_vmmap_entries(struct vm_map_entry *entry)
+{
+	if (entry == NULL)
+		return;
+
+	unload_vmmap_entries(RB_LEFT(entry, daddrs.addr_entry));
+	unload_vmmap_entries(RB_RIGHT(entry, daddrs.addr_entry));
+	free(entry);
+}
+
+/*
+ * Provides detailed information about a process.
+ * Due to the fact we are only requested info about one process, it's possible
+ * the process has been reaped before we get to kvm_getprocs. Tough luck.
+ */
+
 glibtop_map_entry *
 glibtop_get_proc_map_p (glibtop *server, glibtop_proc_map *buf,
 			pid_t pid)
 {
-	struct kinfo_proc2 *pinfo;
-	struct vm_map_entry entry, *first;
+	struct kinfo_proc *pinfo;
+	struct vm_map_entry *entry;
+	struct uvm_map_addr root;
 	struct vmspace vmspace;
 	struct vnode vnode;
 	struct inode inode;
+	ssize_t nentries;
 	GArray *maps = g_array_sized_new(FALSE, FALSE,
 					 sizeof(glibtop_map_entry),
 					 100);
-	int count, i = 0;
-	int update = 0;
+	int count = 0;
 
 	glibtop_init_p (server, (1L << GLIBTOP_SYSDEPS_PROC_MAP), 0);
 
@@@@ -91,7 +183,7 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 	glibtop_suid_enter (server);
 
 	/* Get the process data */
-	pinfo = kvm_getproc2 (server->machine.kd, KERN_PROC_PID, pid, sizeof(struct kinfo_proc2), &count);
+	pinfo = kvm_getprocs (server->machine.kd, KERN_PROC_PID, pid, sizeof(struct kinfo_proc), &count);
 	if ((pinfo == NULL) || (count < 1)) {
 		glibtop_warn_io_r (server, "kvm_getprocs (%d)", pid);
 		return (glibtop_map_entry*) g_array_free(maps, TRUE);
@@@@ -104,16 +196,18 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 		      (char *) &vmspace, sizeof (vmspace)) != sizeof (vmspace))
 		glibtop_error_io_r (server, "kvm_read (vmspace)");
 
-	first = vmspace.vm_map.header.next;
-
-	if (kvm_read (server->machine.kd,
-		      (unsigned long) vmspace.vm_map.header.next,
-		      (char *) &entry, sizeof (entry)) != sizeof (entry))
+	RB_INIT(&root);
+	nentries = load_vmmap_entries(server,
+	    (unsigned long) RB_ROOT(&vmspace.vm_map.addr),
+	    &RB_ROOT(&root), NULL);
+	if (nentries == -1) {
+		unload_vmmap_entries(RB_ROOT(&root));
 		glibtop_error_io_r (server, "kvm_read (entry)");
d16 2
a17 97
 	/* Allocate space. */
 
-	buf->number = vmspace.vm_map.nentries;
+	buf->number = nentries;
 	buf->size = sizeof (glibtop_map_entry);
 
 	buf->total = buf->number * buf->size;
@@@@ -124,34 +218,26 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 
 	/* I tested this a few times with `mmap'; as soon as you write
 	 * to the mmap'ed area, the object type changes from OBJT_VNODE
-	 * to OBJT_DEFAULT so it seems this really works. */
+	 * to OBJT_DEFAULT so it seems this really works.
+	 */
 
-	do {
+	RB_FOREACH(entry, uvm_map_addr, &root) {
 		glibtop_map_entry *mentry;
 		unsigned long inum, dev;
 		guint len;
 
-		if (update) {
-			if (kvm_read (server->machine.kd,
-				      (unsigned long) entry.next,
-				      &entry, sizeof (entry)) != sizeof (entry))
-				glibtop_error_io_r (server, "kvm_read (entry)");
-		} else {
-			update = 1;
-		}
-
- 		if (UVM_ET_ISSUBMAP (&entry))
+ 		if (UVM_ET_ISSUBMAP(entry))
 			continue;
-
-		if (!entry.object.uvm_obj)
+		if (!entry->object.uvm_obj)
 			continue;
 
 		/* We're only interested in vnodes */
 
 		if (kvm_read (server->machine.kd,
-			      (unsigned long) entry.object.uvm_obj,
+			      (unsigned long) entry->object.uvm_obj,
 			      &vnode, sizeof (vnode)) != sizeof (vnode)) {
 			glibtop_warn_io_r (server, "kvm_read (vnode)");
+			unload_vmmap_entries(RB_ROOT(&root));
 			return (glibtop_map_entry*) g_array_free(maps, TRUE);
 		}
 
@@@@ -176,21 +262,21 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 
 		mentry->flags  = _glibtop_sysdeps_map_entry;
 
-		mentry->start  = (guint64) entry.start;
-		mentry->end    = (guint64) entry.end;
-		mentry->offset = (guint64) entry.offset;
+		mentry->start  = (guint64) entry->start;
+		mentry->end    = (guint64) entry->end;
+		mentry->offset = (guint64) entry->offset;
 		mentry->device = (guint64) dev;
 		mentry->inode  = (guint64) inum;
 
 		mentry->perm   = (guint64) 0;
 
-		if (entry.protection & VM_PROT_READ)
+		if (entry->protection & VM_PROT_READ)
 			mentry->perm |= GLIBTOP_MAP_PERM_READ;
-		if (entry.protection & VM_PROT_WRITE)
+		if (entry->protection & VM_PROT_WRITE)
 			mentry->perm |= GLIBTOP_MAP_PERM_WRITE;
-		if (entry.protection & VM_PROT_EXECUTE)
+		if (entry->protection & VM_PROT_EXECUTE)
 			mentry->perm |= GLIBTOP_MAP_PERM_EXECUTE;
-	} while (entry.next != first);
+	}
 
 	buf->flags = _glibtop_sysdeps_proc_map;
 
@@@@ -198,5 +284,18 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
 	buf->size = sizeof (glibtop_map_entry);
 	buf->total = buf->number * buf->size;
 
+	unload_vmmap_entries(RB_ROOT(&root));
 	return (glibtop_map_entry*) g_array_free(maps, FALSE);
 }
+
+/*
+ * Don't implement address comparison.
+ */
+static __inline int
+no_impl(void *p, void *q)
+{
+	abort(); /* Should not be called. */
+	return 0;
+}
+
+RB_GENERATE(uvm_map_addr, vm_map_entry, daddrs.addr_entry, no_impl);
@


1.10
log
@adjust now that regular users can't read wchan anymore.
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.9 2012/07/09 22:47:31 jasper Exp $
d21 2
a22 2
-/* $OpenBSD: procmap.c,v 1.6 2011/06/06 17:12:12 jasper Exp $	*/
+/* $OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.9 2012/07/09 22:47:31 jasper Exp $	*/
@


1.9
log
@regen
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.8 2012/04/04 17:24:29 jasper Exp $
d19 1
a19 1
+++ sysdeps/openbsd/procmap.c	Tue Jul 10 00:46:58 2012
d22 1
a22 1
+/* $OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.8 2012/04/04 17:24:29 jasper Exp $	*/
@


1.8
log
@sync patch
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.7 2012/03/11 08:45:24 ajacoutot Exp $
d19 1
a19 1
+++ sysdeps/openbsd/procmap.c	Sun Mar 11 09:41:59 2012
d21 2
a22 2
-/* $OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.7 2012/03/11 08:45:24 ajacoutot Exp $	*/
+/* $OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.7 2012/03/11 08:45:24 ajacoutot Exp $	*/
@


1.7
log
@Bring back changes made for vmmap now that it's back in.
@
text
@d1 6
a6 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.6 2012/01/22 11:55:10 ajacoutot Exp $
d21 2
a22 2
-/* $OpenBSD: procmap.c,v 1.6 2011/06/06 17:12:12 jasper Exp $	*/
+/* $OpenBSD: procmap.c.vmmap,v 1.1 2011/06/06 17:12:12 jasper Exp $	*/
@


1.6
log
@Sync patches after upstream commit.
Remove bogus patch (indentical).

no pkg change
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.5 2012/01/09 17:39:19 ajacoutot Exp $
d14 29
a42 2
+++ sysdeps/openbsd/procmap.c	Mon Jan  9 18:37:24 2012
@@@@ -64,13 +64,17 @@@@ _glibtop_init_proc_map_p (glibtop *server)
d48 80
d132 1
a132 1
 
d138 1
d140 2
a141 1
 	struct vm_map_entry entry, *first;
d144 12
a155 1
@@@@ -91,7 +95,7 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
d164 26
a189 1
@@@@ -124,7 +128,8 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
d197 2
a198 1
 	do {
d200 79
@


1.5
log
@tsk tsk tsk.
@
text
@d1 6
a6 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.4 2012/01/09 17:22:15 robert Exp $
d11 1
a11 2

    Extend comment a bit regarding processes dying before we get to kvm_getproc2()
@


1.4
log
@s/kvm_getprocss/kvm_getprocs/g in unused code and warning messages
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.3 2012/01/09 16:45:20 robert Exp $
d9 2
a10 2
--- sysdeps/openbsd/procmap.c.orig	Sun Jul 24 13:13:56 2011
+++ sysdeps/openbsd/procmap.c	Mon Jan  9 09:31:58 2012
d31 1
a31 1
@@@@ -91,9 +95,9 @@@@ glibtop_get_proc_map_p (glibtop *server, glibtop_proc_
d38 1
a38 2
-		glibtop_warn_io_r (server, "kvm_getprocs (%d)", pid);
+		glibtop_warn_io_r (server, "kvm_getprocs (%d)", pid);
a39 2
 	}
 
@


1.3
log
@fix after kinfo_proc2 removal
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.2 2011/09/18 11:46:16 jasper Exp $
d39 1
a39 1
+		glibtop_warn_io_r (server, "kvm_getprocss (%d)", pid);
@


1.2
log
@sync, no functional change
@
text
@d1 1
a1 1
$OpenBSD: patch-sysdeps_openbsd_procmap_c,v 1.1 2011/09/17 17:43:44 jasper Exp $
d9 3
a11 3
--- sysdeps/openbsd/procmap.c.orig	Sat Sep 17 18:59:40 2011
+++ sysdeps/openbsd/procmap.c	Sat Sep 17 19:14:25 2011
@@@@ -64,7 +64,11 @@@@ _glibtop_init_proc_map_p (glibtop *server)
d19 1
a19 1
+ * the process has been reaped before we get to kvm_getproc2. Tough luck.
d24 19
@


1.1
log
@don't bother getting info from kernel threads
@
text
@d1 8
a8 1
$OpenBSD$
@

