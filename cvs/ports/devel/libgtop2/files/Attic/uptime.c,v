head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.7
date	2011.08.30.12.24.53;	author jasper;	state dead;
branches;
next	1.6;

1.6
date	2011.06.01.07.24.49;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.31.19.25.31;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.31.14.02.26;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.23.19.35.57;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.23.18.28.14;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.23.18.09.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.7
log
@- update libgtop to 2.28.4
* openbsd now has it's own backend
- remove some patch- files that i've committed upstream too
@
text
@/* $OpenBSD: uptime.c,v 1.6 2011/06/01 07:24:49 jasper Exp $	*/

/* Copyright (C) 1998-99 Martin Baulig
   This file is part of LibGTop 1.0.

   Contributed by Martin Baulig <martin@@home-of-linux.org>, April 1998.

   LibGTop is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License,
   or (at your option) any later version.

   LibGTop is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   for more details.

   You should have received a copy of the GNU General Public License
   along with LibGTop; see the file COPYING. If not, write to the
   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
*/

#include <config.h>
#include <glibtop.h>
#include <glibtop/error.h>
#include <glibtop/uptime.h>

#include <glibtop/cpu.h>

static const unsigned long _glibtop_sysdeps_uptime =
(1L << GLIBTOP_UPTIME_UPTIME) + (1L << GLIBTOP_UPTIME_IDLETIME) +
(1UL << GLIBTOP_UPTIME_BOOT_TIME);

static const unsigned long _required_cpu_flags =
(1L << GLIBTOP_CPU_TOTAL) + (1L << GLIBTOP_CPU_IDLE) +
(1L << GLIBTOP_CPU_FREQUENCY);

/* Init function. */

void
_glibtop_init_uptime_p (glibtop *server)
{
	server->sysdeps.uptime = _glibtop_sysdeps_uptime;
}

/* Provides uptime and idle time. */

void
glibtop_get_uptime_p (glibtop *server, glibtop_uptime *buf)
{
	time_t now;
	int mib[2];
	struct timeval boottime;
	size_t size;
	glibtop_cpu cpu;

	mib[0] = CTL_KERN;
	mib[1] = KERN_BOOTTIME;
	size = sizeof(boottime);
	if (sysctl(mib, 2, &boottime, &size, NULL, 0) != -1 &&
	    boottime.tv_sec != 0) {
		time(&now);
		buf->uptime = now - boottime.tv_sec;
		buf->boot_time = boottime.tv_sec;
	}

	glibtop_get_cpu_p (server, &cpu);

	/* Put something clever in buf->idletime: CP_IDLE. */
	buf->idletime = (double) cpu.idle / (double) cpu.frequency;
	buf->idletime /= (double) (server->ncpu + 1);

	buf->flags = _glibtop_sysdeps_uptime;
}
@


1.6
log
@- implement uptime.boot_time
@
text
@d1 1
a1 1
/* $OpenBSD: uptime.c,v 1.5 2011/05/31 19:25:31 jasper Exp $	*/
@


1.5
log
@- add a comment as to why we undef STAT_STATVFS now
- rename a function now it's in the openbsd implementation
- put CP_IDLE instead of 0 in uptime->idletime
@
text
@d1 1
a1 1
/* $OpenBSD: uptime.c,v 1.4 2011/05/31 14:02:26 jasper Exp $	*/
d32 2
a33 1
(1L << GLIBTOP_UPTIME_UPTIME) + (1L << GLIBTOP_UPTIME_IDLETIME);
d65 1
@


1.4
log
@- silence various warnings
@
text
@d1 1
a1 1
/* $OpenBSD: uptime.c,v 1.3 2011/05/23 19:35:57 jasper Exp $	*/
a30 2
#include <glibtop_suid.h>

d55 1
a63 3
		/* XXX: don't know a useful value to put here. */
		buf->idletime = 0;
		buf->flags = _glibtop_sysdeps_uptime;
d65 8
@


1.3
log
@add rcs id's
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
a53 1
	time_t uptime;
@


1.2
log
@start cleaning the ifdef-hell
@
text
@d1 2
@


1.1
log
@the openbsd code has diverged too much from the freebsd and generic bsd code
to be easily maintainable. so instead move it to files/ for now untill it
gets incorporated upstream.

discussed with aja@@
@
text
@a50 1
#if defined(__NetBSD__) || defined(__OpenBSD__)
a67 23
#else
	glibtop_cpu cpu;

	glibtop_init_p (server, (1L << GLIBTOP_SYSDEPS_UPTIME), 0);

	memset (buf, 0, sizeof (glibtop_uptime));

	/* We simply calculate it from the CPU usage. */

	glibtop_get_cpu_p (server, &cpu);

	/* Make sure all required fields are present. */

	if ((cpu.flags & _required_cpu_flags) != _required_cpu_flags)
		return;

	/* Calculate values. */

	buf->uptime = (double) cpu.total / (double) cpu.frequency;
	buf->idletime = (double) cpu.idle / (double) cpu.frequency;

	buf->flags = _glibtop_sysdeps_uptime;
#endif
@

