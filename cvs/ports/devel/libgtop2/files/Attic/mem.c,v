head	1.12;
access;
symbols
	OPENBSD_5_0:1.11.0.2
	OPENBSD_5_0_BASE:1.11;
locks; strict;
comment	@ * @;


1.12
date	2011.08.30.12.24.53;	author jasper;	state dead;
branches;
next	1.11;

1.11
date	2011.07.10.15.23.01;	author jasper;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.10.14.42.39;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.09.08.04.14;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.26.08.07.22;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.26.07.28.51;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.24.11.21.56;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.24.10.40.47;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.24.09.30.20;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.23.19.35.54;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.23.18.47.30;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.23.18.09.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- update libgtop to 2.28.4
* openbsd now has it's own backend
- remove some patch- files that i've committed upstream too
@
text
@/* $OpenBSD: mem.c,v 1.11 2011/07/10 15:23:01 jasper Exp $	*/

/* Copyright (C) 1998 Joshua Sled
   This file is part of LibGTop 1.0.

   Contributed by Joshua Sled <jsled@@xcf.berkeley.edu>, July 1998.

   LibGTop is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License,
   or (at your option) any later version.

   LibGTop is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   for more details.

   You should have received a copy of the GNU General Public License
   along with LibGTop; see the file COPYING. If not, write to the
   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
*/

#include <config.h>
#include <glibtop.h>
#include <glibtop/error.h>
#include <glibtop/mem.h>

#include <glibtop_suid.h>

#include <sys/mount.h>
#include <sys/sysctl.h>
#include <sys/vmmeter.h>
#include <uvm/uvm_extern.h>
#include <uvm/uvm_param.h>

static const unsigned long _glibtop_sysdeps_mem =
(1L << GLIBTOP_MEM_TOTAL)  + (1L << GLIBTOP_MEM_USED) +
(1L << GLIBTOP_MEM_FREE)   + (1L << GLIBTOP_MEM_SHARED) +
(1L << GLIBTOP_MEM_BUFFER) + (1L << GLIBTOP_MEM_CACHED) +
(1L << GLIBTOP_MEM_USER)   + (1L << GLIBTOP_MEM_LOCKED);

#ifndef LOG1024
#define LOG1024		10
#endif

/* these are for getting the memory statistics */
static int pageshift;		/* log base 2 of the pagesize */

/* define pagetok in terms of pageshift */
#define pagetok(size) ((size) << pageshift)

/* nlist structure for kernel access */
static struct nlist nlst [] = {
	{ "_bufpages" },
	{ 0 }
};

/* MIB array for sysctl */
static int vmmeter_mib [] = { CTL_VM, VM_METER };
static int uvmexp_mib  [] = { CTL_VM, VM_UVMEXP };
static int bcstats_mib [] = { CTL_VFS, VFS_GENERIC, VFS_BCACHESTAT };

/* Init function. */

void
_glibtop_init_mem_p (glibtop *server)
{
	register int pagesize;

	if (kvm_nlist (server->machine.kd, nlst) < 0) {
		glibtop_warn_io_r (server, "kvm_nlist (mem)");
		return;
	}

	/* get the page size and calculate pageshift from it */
	pagesize = sysconf(_SC_PAGESIZE);
	pageshift = 0;
	while (pagesize > 1) {
		pageshift++;
		pagesize >>= 1;
	}

	/* we only need the amount of log(2)1024 for our conversion */
	pageshift -= LOG1024;

	server->sysdeps.mem = _glibtop_sysdeps_mem;
}

void
glibtop_get_mem_p (glibtop *server, glibtop_mem *buf)
{
	struct vmtotal vmt;
	struct uvmexp uvmexp;
	struct bcachestats bcstats;
	u_int v_used_count;
	u_int v_total_count;
	u_int v_free_count;
	size_t length;

	glibtop_init_p (server, (1L << GLIBTOP_SYSDEPS_MEM), 0);

	memset (buf, 0, sizeof (glibtop_mem));

	if (server->sysdeps.mem == 0)
		return;

	/* Get the data from sysctl */
	length = sizeof (vmt);
	if (sysctl (vmmeter_mib, 2, &vmt, &length, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (vm.vmmeter)");
		bzero(&vmt, sizeof(length));
		return;
	}

	length = sizeof (uvmexp);
	if (sysctl (uvmexp_mib, 2, &uvmexp, &length, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (vm.uvmexp)");
		bzero(&uvmexp, sizeof(length));
		return;
	}

	length = sizeof (bcstats);
	if (sysctl (bcstats_mib, 3, &bcstats, &length, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (vfs.generic.bcstats)");
		bzero(&bcstats, sizeof(length));
		return;
	}

	/*
	 * t_arm = active real memory
	 * t_rm = total real memory in use
	 * t_free = free memory pages
	 */
	v_total_count = vmt.t_rm + vmt.t_free;
	v_used_count = vmt.t_rm;
	v_free_count = vmt.t_free;

	/* convert memory stats to Kbytes */
	buf->total = (guint64) pagetok (v_total_count) << LOG1024;
	buf->used  = (guint64) pagetok (v_used_count) << LOG1024;
	buf->free  = (guint64) pagetok (v_free_count) << LOG1024;
	buf->locked = (guint64) pagetok (uvmexp.wired) << LOG1024;
	buf->shared = (guint64) pagetok (vmt.t_rmshr) << LOG1024;
	buf->cached = (guint64) pagetok (bcstats.numbufpages) << LOG1024;
	buf->buffer = 0;

	buf->user = buf->total - buf->free - buf->cached - buf->buffer;

	/* Set the values to return */
	buf->flags = _glibtop_sysdeps_mem;
}
@


1.11
log
@- decrease stack usage when retrieving memory stats
- use consistent warnings when failing sysctl(3) calls
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.10 2011/07/10 14:42:39 jasper Exp $	*/
@


1.10
log
@- retrieve and use buffercache statistics so we get a proper view
of memory usage

ok aja@@
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.9 2011/07/09 08:04:14 jasper Exp $	*/
d38 4
a41 6
(1L << GLIBTOP_MEM_TOTAL) + (1L << GLIBTOP_MEM_USED) +
(1L << GLIBTOP_MEM_FREE) +
(1L << GLIBTOP_MEM_SHARED) +
(1L << GLIBTOP_MEM_BUFFER) +
(1L << GLIBTOP_MEM_CACHED) +
(1L << GLIBTOP_MEM_USER) + (1L << GLIBTOP_MEM_LOCKED);
a93 1
	size_t length_vmt;
a94 1
	size_t length_uvmexp;
a95 1
	size_t length_bcstats;
d99 1
d109 2
a110 2
	length_vmt = sizeof (vmt);
	if (sysctl (vmmeter_mib, 2, &vmt, &length_vmt, NULL, 0)) {
d112 1
a112 1
		bzero(&vmt, sizeof(length_vmt));
d116 2
a117 2
	length_uvmexp = sizeof (uvmexp);
	if (sysctl (uvmexp_mib, 2, &uvmexp, &length_uvmexp, NULL, 0)) {
d119 1
a119 1
		bzero(&uvmexp, sizeof(length_uvmexp));
d123 2
a124 2
	length_bcstats = sizeof (bcstats);
	if (sysctl (bcstats_mib, 3, &bcstats, &length_bcstats, NULL, 0)) {
d126 1
a126 1
		bzero(&bcstats, sizeof(length_bcstats));
@


1.9
log
@- correct sysctl names in two warning messages
- rename a few variables for clarity
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.8 2011/05/26 08:07:22 jasper Exp $	*/
d31 1
d42 1
d64 1
d99 2
d116 1
d123 8
d149 1
d152 1
a152 1
	buf->user = buf->total - buf->free - buf->shared - buf->buffer;
@


1.8
log
@revert previous, it only adds to the confusion..
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.7 2011/05/26 07:28:51 jasper Exp $	*/
d60 2
a61 2
static int mib [] = { CTL_VM, VM_METER };
static int mib_uvmexp [] = { CTL_VM, VM_UVMEXP };
d109 2
a110 2
	if (sysctl (mib, 2, &vmt, &length_vmt, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (vm.meter)");
d115 2
a116 2
	if (sysctl (mib_uvmexp, 2, &uvmexp, &length_uvmexp, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (uvmexp)");
@


1.7
log
@Change the way glibtop_mem->total is calculated. Instead of adding
t_free to t_rm, just use t_rm. And use t_arm for glibtop_mem->used.

This makes things less confusing and more in line with the values
top(1) returns.
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.6 2011/05/24 11:21:56 jasper Exp $	*/
d125 2
a126 2
	v_total_count = vmt.t_rm;
	v_used_count = vmt.t_arm;
@


1.6
log
@fix memory handling, instead of using 17179869183.3 GiB of RAM it's
now giving sensible values.
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.5 2011/05/24 10:40:47 jasper Exp $	*/
d120 7
a126 2
	v_total_count = vmt.t_rm + vmt.t_free;
	v_used_count = vmt.t_rm;
@


1.5
log
@use sysconf() instead of the deprecated getpagesize()
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.4 2011/05/24 09:30:20 jasper Exp $	*/
a98 1
	int bufspace;
d110 1
a110 1
		glibtop_warn_io_r (server, "sysctl (vmt)");
d120 3
a122 5
	if (kvm_read (server->machine.kd, nlst[0].n_value,
		      &bufspace, sizeof (bufspace)) != sizeof (bufspace)) {
		glibtop_warn_io_r (server, "kvm_read (bufspace)");
		return;
	}
a124 9

	v_total_count = uvmexp.reserve_kernel +
		uvmexp.reserve_pagedaemon +
		uvmexp.free + uvmexp.wired + uvmexp.active +
		uvmexp.inactive;

	v_used_count = uvmexp.active + uvmexp.inactive;
	v_free_count = uvmexp.free;

d130 1
a130 1
	buf->buffer = (guint64) pagetok (bufspace) << LOG1024;
a131 1
	/* user */
@


1.4
log
@remove comment that doesn't apply to us
@
text
@d1 1
a1 1
/* $OpenBSD: mem.c,v 1.3 2011/05/23 19:35:54 jasper Exp $	*/
d75 2
a76 3
	/* get the page size with "getpagesize" and calculate pageshift
	 * from it */
	pagesize = getpagesize ();
@


1.3
log
@add rcs id's
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
a107 4

	/* [FIXME: On FreeBSD 2.2.6, sysctl () returns an incorrect
	 *         value for `vmt.vm'. We use some code from Unix top
	 *         here.] */
@


1.2
log
@more ifdef cleaning
@
text
@d1 2
@


1.1
log
@the openbsd code has diverged too much from the freebsd and generic bsd code
to be easily maintainable. so instead move it to files/ for now untill it
gets incorporated upstream.

discussed with aja@@
@
text
@a30 5
#if defined(__NetBSD__)  && (__NetBSD_Version__ < 105020000)
#include <vm/vm_param.h>
#endif

#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a32 1
#endif
a38 3
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
(1L << GLIBTOP_MEM_CACHED) +
#endif
a52 1
#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a54 11
#else
#if defined(__bsdi__)
	{ "_bufcachemem" },
#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
	{ "_bufspace" },
#else
	{ "_bufpages" },
#endif
	{ "_cnt" },
	{ 0 }
#endif
a57 3
#ifdef __bsdi__
static int mib [] = { CTL_VM, VM_TOTAL };
#else
a58 3
#endif

#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a59 1
#endif
a92 1
#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a94 3
#else
	struct vmmeter vmm;
#endif
a117 1
#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a122 8
#else
	/* Get the data from kvm_* */
	if (kvm_read (server->machine.kd, nlst[1].n_value,
		      &vmm, sizeof (vmm)) != sizeof (vmm)) {
		glibtop_warn_io_r (server, "kvm_read (cnt)");
		return;
	}
#endif
a131 4
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
	v_total_count = vmm.v_page_count;
#else
#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a135 6
#else
	v_total_count = vmm.v_kernel_pages +
		vmm.v_free_count + vmm.v_wire_count +
		vmm.v_active_count + vmm.v_inactive_count;
#endif
#endif
a136 1
#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a138 4
#else
	v_used_count = vmm.v_active_count + vmm.v_inactive_count;
	v_free_count = vmm.v_free_count;
#endif
a142 6

#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
	buf->cached = (guint64) pagetok (vmm.v_cache_count) << LOG1024;
#endif

#if defined(__NetBSD__)  && (__NetBSD_Version__ >= 104000000) || defined(__OpenBSD__)
a143 4
#else
	buf->locked = (guint64) pagetok (vmm.v_wire_count) << LOG1024;
#endif

a144 4

#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
	buf->buffer = (guint64) bufspace;
#else
a145 1
#endif
@

