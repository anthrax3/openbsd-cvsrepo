head	1.8;
access;
symbols
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7;
locks; strict;
comment	@ * @;


1.8
date	2011.08.30.12.24.52;	author jasper;	state dead;
branches;
next	1.7;

1.7
date	2011.07.10.15.23.01;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2011.05.31.14.19.18;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.31.13.47.56;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.24.12.37.15;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.23.19.35.53;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.23.18.28.14;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.23.18.09.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.8
log
@- update libgtop to 2.28.4
* openbsd now has it's own backend
- remove some patch- files that i've committed upstream too
@
text
@/* $OpenBSD: cpu.c,v 1.7 2011/07/10 15:23:01 jasper Exp $	*/

/* Copyright (C) 1998 Joshua Sled
   This file is part of LibGTop 1.0.

   Contributed by Joshua Sled <jsled@@xcf.berkeley.edu>, July 1998.

   LibGTop is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License,
   or (at your option) any later version.

   LibGTop is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   for more details.

   You should have received a copy of the GNU General Public License
   along with LibGTop; see the file COPYING. If not, write to the
   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
*/

#include <config.h>
#include <glibtop.h>
#include <glibtop/error.h>
#include <glibtop/cpu.h>

#include <glibtop_suid.h>

#include <sys/sched.h>

static const unsigned long _glibtop_sysdeps_cpu =
(1L << GLIBTOP_CPU_TOTAL) + (1L << GLIBTOP_CPU_USER) +
(1L << GLIBTOP_CPU_NICE) + (1L << GLIBTOP_CPU_SYS) +
(1L << GLIBTOP_CPU_IDLE) + (1L << GLIBTOP_CPU_FREQUENCY) +
(1L << GLIBTOP_CPU_IRQ);

/* MIB array for sysctl */
static int mib_length=2;
static int mib [] = { CTL_KERN, KERN_CLOCKRATE };
static int mib2 [] = { CTL_KERN, KERN_CPTIME };

/* Init function. */

void
_glibtop_init_cpu_p (glibtop *server)
{
	server->sysdeps.cpu = _glibtop_sysdeps_cpu;
}

/* Provides information about cpu usage. */

void
glibtop_get_cpu_p (glibtop *server, glibtop_cpu *buf)
{
	gulong cpts [CPUSTATES];

	/* sysctl vars*/
	struct clockinfo ci;
	size_t length;

	glibtop_init_p (server, (1L << GLIBTOP_SYSDEPS_CPU), 0);

	memset (buf, 0, sizeof (glibtop_cpu));

	/* If this fails, the nlist may not be valid. */
	if (server->sysdeps.cpu == 0)
		return;

	length = sizeof (cpts);
	if (sysctl (mib2, mib_length, cpts, &length, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (kern.cptime)");
		return;
	}

	/* Get the clockrate data */
	length = sizeof (struct clockinfo);
	if (sysctl (mib, mib_length, &ci, &length, NULL, 0)) {
		glibtop_warn_io_r (server, "sysctl (kern.clockrate)");
		return;
	}

	/* set user time */
	buf->user = cpts [CP_USER];
	/* set nice time */
	buf->nice = cpts [CP_NICE];
	/* set sys time */
	buf->sys = cpts [CP_SYS];
	/* set idle time */
	buf->idle = cpts [CP_IDLE];
	/* set interrupt time */
	buf->irq = cpts [CP_INTR];

	/* set frequency */
	buf->frequency = ci.hz;
	/* set total */
	buf->total = cpts [CP_USER] + cpts [CP_NICE]
		+ cpts [CP_SYS] + cpts [CP_IDLE] + cpts [CP_INTR];

	/* Set the flags last. */
	buf->flags = _glibtop_sysdeps_cpu;
}
@


1.7
log
@- decrease stack usage when retrieving memory stats
- use consistent warnings when failing sysctl(3) calls
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.c,v 1.6 2011/05/31 14:19:18 jasper Exp $	*/
@


1.6
log
@make this work on 32 bit arches.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.c,v 1.5 2011/05/31 13:47:56 jasper Exp $	*/
d73 1
a73 1
		glibtop_warn_io_r (server, "sysctl");
d80 1
a80 1
		glibtop_warn_io_r (server, "sysctl");
@


1.5
log
@- slightly adjust cpu usage retrieval.

  this still doesn't work on i386 (32 bit arches?), whereas it does work
  fine on amd64, mips64el and sparc64..
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.c,v 1.4 2011/05/24 12:37:15 jasper Exp $	*/
d57 1
a57 1
	guint64 cpts [CPUSTATES];
@


1.4
log
@- fix cpu load calculation (was either 0% or 100%, but it seems only amd64
 is fixed now, will look at the others soon).
- take maintainership
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.c,v 1.3 2011/05/23 19:35:53 jasper Exp $	*/
d37 1
a37 1
(1L << GLIBTOP_CPU_IOWAIT);
d92 2
a93 2
	/* set iowait (really just interrupt) time */
	buf->iowait = cpts [CP_INTR];
a95 6
	/*
	   FIXME --  is hz, tick, profhz or stathz wanted?
	   buf->frequency = sysctl("kern.clockrate", ...);

	   struct clockinfo
	*/
d99 1
a99 1
		+ cpts [CP_SYS] + cpts [CP_IDLE];
@


1.3
log
@add rcs id's
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
a38 8
#ifndef KERN_CP_TIME
/* nlist structure for kernel access */
static struct nlist nlst [] = {
	{ "_cp_time" },
	{ 0 }
};
#endif

d42 1
a42 3
#ifdef KERN_CP_TIME
static int mib2 [] = { CTL_KERN, KERN_CP_TIME };
#endif
a48 8
#ifndef KERN_CP_TIME
	if (kvm_nlist (server->machine.kd, nlst) < 0) {
		glibtop_warn_io_r (server, "kvm_nlist (cpu)");
		return;
	}
#endif

	/* Set this only if kvm_nlist () succeeded. */
a56 1
#ifdef KERN_CP_TIME
d58 1
a58 3
#else
	long cpts [CPUSTATES];
#endif
a70 1
#ifdef KERN_CP_TIME
a75 7
#else
	if (kvm_read (server->machine.kd, nlst [0].n_value,
		      &cpts, sizeof (cpts)) != sizeof (cpts)) {
		glibtop_warn_io_r (server, "kvm_read (cp_time)");
		return;
	}
#endif
@


1.2
log
@start cleaning the ifdef-hell
@
text
@d1 2
@


1.1
log
@the openbsd code has diverged too much from the freebsd and generic bsd code
to be easily maintainable. so instead move it to files/ for now untill it
gets incorporated upstream.

discussed with aja@@
@
text
@a28 1
#if defined(__NetBSD__) || defined(__OpenBSD__)
a29 1
#endif
a39 3
#ifdef __bsdi__
	{ "_cpustats" },
#else
a40 1
#endif
@

