head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6;
locks; strict;
comment	@ * @;


1.7
date	2011.08.30.12.24.53;	author jasper;	state dead;
branches;
next	1.6;

1.6
date	2011.06.06.17.12.12;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.31.14.02.26;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.26.17.47.25;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.23.19.35.55;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.23.19.13.07;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.23.18.09.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.7
log
@- update libgtop to 2.28.4
* openbsd now has it's own backend
- remove some patch- files that i've committed upstream too
@
text
@/* $OpenBSD: procmap.c,v 1.6 2011/06/06 17:12:12 jasper Exp $	*/

/* Copyright (C) 1998 Joshua Sled
   This file is part of LibGTop 1.0.

   Contributed by Joshua Sled <jsled@@xcf.berkeley.edu>, July 1998.

   LibGTop is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License,
   or (at your option) any later version.

   LibGTop is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   for more details.

   You should have received a copy of the GNU General Public License
   along with LibGTop; see the file COPYING. If not, write to the
   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
*/

#include <config.h>
#include <glibtop.h>
#include <glibtop/error.h>
#include <glibtop/procmap.h>

#include <glibtop_suid.h>

#include <kvm.h>
#include <sys/param.h>
#include <sys/proc.h>
#include <sys/resource.h>
#include <uvm/uvm_extern.h>

#include <sys/vnode.h>
#include <sys/mount.h>
#include <ufs/ufs/quota.h>
#include <ufs/ufs/inode.h>

#include <sys/ucred.h>
#include <sys/sysctl.h>

#undef _KERNEL
#define _UVM_UVM_AMAP_I_H_ 1
#define _UVM_UVM_MAP_I_H_ 1
#include <uvm/uvm.h>

static const unsigned long _glibtop_sysdeps_proc_map =
(1L << GLIBTOP_PROC_MAP_TOTAL) + (1L << GLIBTOP_PROC_MAP_NUMBER) +
(1L << GLIBTOP_PROC_MAP_SIZE);

static const unsigned long _glibtop_sysdeps_map_entry =
(1L << GLIBTOP_MAP_ENTRY_START) + (1L << GLIBTOP_MAP_ENTRY_END) +
(1L << GLIBTOP_MAP_ENTRY_OFFSET) + (1L << GLIBTOP_MAP_ENTRY_PERM) +
(1L << GLIBTOP_MAP_ENTRY_INODE) + (1L << GLIBTOP_MAP_ENTRY_DEVICE);

/* Init function. */

void
_glibtop_init_proc_map_p (glibtop *server)
{
	server->sysdeps.proc_map = _glibtop_sysdeps_proc_map;
}

/* Provides detailed information about a process. */

glibtop_map_entry *
glibtop_get_proc_map_p (glibtop *server, glibtop_proc_map *buf,
			pid_t pid)
{
	struct kinfo_proc2 *pinfo;
	struct vm_map_entry entry, *first;
	struct vmspace vmspace;
	struct vnode vnode;
	struct inode inode;
	GArray *maps = g_array_sized_new(FALSE, FALSE,
					 sizeof(glibtop_map_entry),
					 100);
	int count, i = 0;
	int update = 0;

	glibtop_init_p (server, (1L << GLIBTOP_SYSDEPS_PROC_MAP), 0);

	memset (buf, 0, sizeof (glibtop_proc_map));

	/* It does not work for the swapper task. */
	if (pid == 0) return (glibtop_map_entry*) g_array_free(maps, TRUE);

	glibtop_suid_enter (server);

	/* Get the process data */
	pinfo = kvm_getproc2 (server->machine.kd, KERN_PROC_PID, pid, sizeof(struct kinfo_proc2), &count);
	if ((pinfo == NULL) || (count < 1)) {
		glibtop_warn_io_r (server, "kvm_getprocs (%d)", pid);
		return (glibtop_map_entry*) g_array_free(maps, TRUE);
	}

	/* Now we get the memory maps. */

	if (kvm_read (server->machine.kd,
		      (unsigned long) pinfo [0].p_vmspace,
		      (char *) &vmspace, sizeof (vmspace)) != sizeof (vmspace))
		glibtop_error_io_r (server, "kvm_read (vmspace)");

	first = vmspace.vm_map.header.next;

	if (kvm_read (server->machine.kd,
		      (unsigned long) vmspace.vm_map.header.next,
		      (char *) &entry, sizeof (entry)) != sizeof (entry))
		glibtop_error_io_r (server, "kvm_read (entry)");

	/* Allocate space. */

	buf->number = vmspace.vm_map.nentries;
	buf->size = sizeof (glibtop_map_entry);

	buf->total = buf->number * buf->size;

	buf->flags = _glibtop_sysdeps_proc_map;

	/* Walk through the `vm_map_entry' list ... */

	/* I tested this a few times with `mmap'; as soon as you write
	 * to the mmap'ed area, the object type changes from OBJT_VNODE
	 * to OBJT_DEFAULT so it seems this really works. */

	do {
		glibtop_map_entry *mentry;
		unsigned long inum, dev;
		guint len;

		if (update) {
			if (kvm_read (server->machine.kd,
				      (unsigned long) entry.next,
				      &entry, sizeof (entry)) != sizeof (entry))
				glibtop_error_io_r (server, "kvm_read (entry)");
		} else {
			update = 1;
		}

 		if (UVM_ET_ISSUBMAP (&entry))
			continue;

		if (!entry.object.uvm_obj)
			continue;

		/* We're only interested in vnodes */

		if (kvm_read (server->machine.kd,
			      (unsigned long) entry.object.uvm_obj,
			      &vnode, sizeof (vnode)) != sizeof (vnode)) {
			glibtop_warn_io_r (server, "kvm_read (vnode)");
			return (glibtop_map_entry*) g_array_free(maps, TRUE);
		}

#if defined(UVM_VNODE_VALID)
		if (!vnode.v_uvm.u_flags & UVM_VNODE_VALID)
			continue;
#endif
		if ((vnode.v_type != VREG) || (vnode.v_tag != VT_UFS) ||
		    !vnode.v_data) continue;

		if (kvm_read (server->machine.kd,
			      (unsigned long) vnode.v_data,
			      &inode, sizeof (inode)) != sizeof (inode))
			glibtop_error_io_r (server, "kvm_read (inode)");

		inum  = inode.i_number;
		dev = inode.i_dev;

		len = maps->len;
		g_array_set_size(maps, len + 1);
		mentry = &g_array_index(maps, glibtop_map_entry, len);

		mentry->flags  = _glibtop_sysdeps_map_entry;

		mentry->start  = (guint64) entry.start;
		mentry->end    = (guint64) entry.end;
		mentry->offset = (guint64) entry.offset;
		mentry->device = (guint64) dev;
		mentry->inode  = (guint64) inum;

		mentry->perm   = (guint64) 0;

		if (entry.protection & VM_PROT_READ)
			mentry->perm |= GLIBTOP_MAP_PERM_READ;
		if (entry.protection & VM_PROT_WRITE)
			mentry->perm |= GLIBTOP_MAP_PERM_WRITE;
		if (entry.protection & VM_PROT_EXECUTE)
			mentry->perm |= GLIBTOP_MAP_PERM_EXECUTE;
	} while (entry.next != first);

	buf->flags = _glibtop_sysdeps_proc_map;

	buf->number = maps->len;
	buf->size = sizeof (glibtop_map_entry);
	buf->total = buf->number * buf->size;

	return (glibtop_map_entry*) g_array_free(maps, FALSE);
}
@


1.6
log
@revert changes made for vmmap, but keep the new file around
@
text
@d1 1
a1 1
/* $OpenBSD: procmap.c,v 1.3 2011/05/23 19:35:55 jasper Exp $	*/
@


1.5
log
@- silence various warnings
@
text
@d1 1
a1 1
/* $OpenBSD: procmap.c,v 1.4 2011/05/26 17:47:25 jasper Exp $	*/
a31 1
#include <stdlib.h>
a58 6
/* Local helper functions. */

ssize_t	load_vmmap_entries(glibtop*, unsigned long, struct vm_map_entry**,
	    struct vm_map_entry*);
void	unload_vmmap_entries(struct vm_map_entry *);

a66 80
/*
 * Download vmmap_entries from the kernel into our address space.
 * We fix up the addr tree while downloading.
 *
 * Returns: the size of the tree on succes, or -1 on failure.
 * On failure, *rptr needs to be passed to unload_vmmap_entries to free
 * the lot.
 */
ssize_t
load_vmmap_entries(glibtop *server, unsigned long kptr,
    struct vm_map_entry **rptr, struct vm_map_entry *parent)
{
	struct vm_map_entry *entry;
	unsigned long left_kptr, right_kptr;
	ssize_t left_sz;
	ssize_t right_sz;

	if (kptr == 0)
		return 0;

	/* Need space. */
	entry = malloc(sizeof(*entry));
	if (entry == NULL)
		return -1;

	/* Download entry at kptr. */
	if (kvm_read (server->machine.kd, kptr,
	    (char *)entry, sizeof(*entry)) != sizeof(*entry)) {
		free(entry);
		return -1;
	}

	/*
	 * Update addr pointers to have sane values in this address space.
	 * We save the kernel pointers in {left,right}_kptr, so we have them
	 * available to download children.
	 */
	left_kptr = (unsigned long) RB_LEFT(entry, daddrs.addr_entry);
	right_kptr = (unsigned long) RB_RIGHT(entry, daddrs.addr_entry);
	RB_LEFT(entry, daddrs.addr_entry) =
	    RB_RIGHT(entry, daddrs.addr_entry) = NULL;
	/* Fill in parent pointer. */
	RB_PARENT(entry, daddrs.addr_entry) = parent;

	/*
	 * Consistent state reached, fill in *rptr.
	 */
	*rptr = entry;

	/*
	 * Download left, right.
	 * On failure, our map is in a state that can be handled by
	 * unload_vmmap_entries.
	 */
	left_sz = load_vmmap_entries(server, left_kptr,
	    &RB_LEFT(entry, daddrs.addr_entry), entry);
	if (left_sz == -1)
		return -1;
	right_sz = load_vmmap_entries(server, right_kptr,
	    &RB_RIGHT(entry, daddrs.addr_entry), entry);
	if (right_sz == -1)
		return -1;

	return 1 + left_sz + right_sz;
}

/*
 * Free the vmmap entries in the given tree.
 */
void
unload_vmmap_entries(struct vm_map_entry *entry)
{
	if (entry == NULL)
		return;

	unload_vmmap_entries(RB_LEFT(entry, daddrs.addr_entry));
	unload_vmmap_entries(RB_RIGHT(entry, daddrs.addr_entry));
	free(entry);
}

d74 1
a74 2
	struct vm_map_entry *entry;
	struct uvm_map_addr root;
a77 1
	ssize_t nentries;
d81 2
a82 1
	int count = 0;
d107 5
a111 6
	RB_INIT(&root);
	nentries = load_vmmap_entries(server,
	    (unsigned long) RB_ROOT(&vmspace.vm_map.addr),
	    &RB_ROOT(&root), NULL);
	if (nentries == -1) {
		unload_vmmap_entries(RB_ROOT(&root));
a112 1
	}
d116 1
a116 1
	buf->number = nentries;
d129 1
a129 1
	RB_FOREACH(entry, uvm_map_addr, &root) {
d134 10
a143 1
 		if (UVM_ET_ISSUBMAP(entry))
d145 2
a146 1
		if (!entry->object.uvm_obj)
d152 1
a152 1
			      (unsigned long) entry->object.uvm_obj,
a154 1
			unload_vmmap_entries(RB_ROOT(&root));
d179 3
a181 3
		mentry->start  = (guint64) entry->start;
		mentry->end    = (guint64) entry->end;
		mentry->offset = (guint64) entry->offset;
d187 1
a187 1
		if (entry->protection & VM_PROT_READ)
d189 1
a189 1
		if (entry->protection & VM_PROT_WRITE)
d191 1
a191 1
		if (entry->protection & VM_PROT_EXECUTE)
d193 1
a193 1
	}
a200 1
	unload_vmmap_entries(RB_ROOT(&root));
a202 12

/*
 * Don't implement address comparison.
 */
static __inline int
no_impl(void *p, void *q)
{
	abort(); /* Should not be called. */
	return 0;
}

RB_GENERATE(uvm_map_addr, vm_map_entry, daddrs.addr_entry, no_impl);
@


1.4
log
@- adjust for vmmap; we copy the full vmmap tree from the kernel into the process
memory and walk through it with RB_FOREACH.

committing on behalf of ariane@@ who wrote all the code, many thanks!
@
text
@d1 1
a1 1
/* $OpenBSD: procmap.c,v 1.3 2011/05/23 19:35:55 jasper Exp $	*/
d170 1
a170 1
	int count, i = 0;
@


1.3
log
@add rcs id's
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
d32 1
d60 6
d74 80
d161 2
a162 1
	struct vm_map_entry entry, *first;
d166 1
a170 1
	int update = 0;
d195 6
a200 5
	first = vmspace.vm_map.header.next;

	if (kvm_read (server->machine.kd,
		      (unsigned long) vmspace.vm_map.header.next,
		      (char *) &entry, sizeof (entry)) != sizeof (entry))
d202 1
d206 1
a206 1
	buf->number = vmspace.vm_map.nentries;
d219 1
a219 1
	do {
d224 1
a224 10
		if (update) {
			if (kvm_read (server->machine.kd,
				      (unsigned long) entry.next,
				      &entry, sizeof (entry)) != sizeof (entry))
				glibtop_error_io_r (server, "kvm_read (entry)");
		} else {
			update = 1;
		}

 		if (UVM_ET_ISSUBMAP (&entry))
d226 1
a226 2

		if (!entry.object.uvm_obj)
d232 1
a232 1
			      (unsigned long) entry.object.uvm_obj,
d235 1
d260 3
a262 3
		mentry->start  = (guint64) entry.start;
		mentry->end    = (guint64) entry.end;
		mentry->offset = (guint64) entry.offset;
d268 1
a268 1
		if (entry.protection & VM_PROT_READ)
d270 1
a270 1
		if (entry.protection & VM_PROT_WRITE)
d272 1
a272 1
		if (entry.protection & VM_PROT_EXECUTE)
d274 1
a274 1
	} while (entry.next != first);
d282 1
d285 12
@


1.2
log
@finish cleaning, this should now provide a base to fix bugs that doesn't
make you want to crawl out your eyes...
@
text
@d1 2
@


1.1
log
@the openbsd code has diverged too much from the freebsd and generic bsd code
to be easily maintainable. so instead move it to files/ for now untill it
gets incorporated upstream.

discussed with aja@@
@
text
@a32 6
#if defined(__NetBSD__) && (__NetBSD_Version__ < 105020000)
#include <vm/vm_object.h>
#include <vm/vm_prot.h>
#include <vm/vm_map.h>
#elif (defined(__NetBSD__) && (__NetBSD_Version__ >= 105020000)) || \
	defined(__OpenBSD__)
a33 9
#else
#include <vm/vm_object.h>
#include <vm/vm_map.h>
#if (__FreeBSD_version >= 400011) || defined(__FreeBSD_kernel__)
#include <vm/vm.h>
#else
#include <vm/vm_prot.h>
#endif
#endif
a34 3
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
#define _KVM_VNODE
#endif
a35 3
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
#undef _KVM_VNODE
#endif
a40 3
#if (!defined __OpenBSD__) && (!defined __bsdi__)
#include <sys/user.h>
#endif
a41 4
#if (!defined(__NetBSD__) || (__NetBSD_Version__ < 105020000)) && \
	!defined(__OpenBSD__)
#include <vm/vm.h>
#endif
a42 3
#if (defined(__NetBSD__) && (__NetBSD_Version__ >= 104000000)) || \
	defined(__OpenBSD__)
/* Fixme ... */
a46 1
#endif
a70 1
#if (defined(__OpenBSD__)) /* also some netbsd, but not sure which */
a71 3
#else
	struct kinfo_proc *pinfo;
#endif
a73 2
#if (defined(__NetBSD__) && (__NetBSD_Version__ >= 104000000)) || \
	defined(__OpenBSD__)
a75 3
#else
	struct vm_object object;
#endif
a78 6
#if (defined __FreeBSD__) || defined(__FreeBSD_kernel__)
	struct vnode vnode;
#if (__FreeBSD_version < 500039) && !defined(__FreeBSD_kernel__)
	struct inode inode;
#endif
#endif
a91 1
#if (defined(__OpenBSD__)) /* also some netbsd, but not sure which */
a92 3
#else
	pinfo = kvm_getprocs (server->machine.kd, KERN_PROC_PID, pid, &count);
#endif
a100 3
#if (defined(__FreeBSD__) && (__FreeBSD_version >= 500013)) || defined(__FreeBSD_kernel__)
		      (unsigned long) pinfo [0].ki_vmspace,
#elif (defined(__OpenBSD__))
a101 3
#else
		      (unsigned long) pinfo [0].kp_proc.p_vmspace,
#endif
a140 11
#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
#if (__FreeBSD__ >= 4) || defined(__FreeBSD_kernel__)
		if (entry.eflags & (MAP_ENTRY_IS_SUB_MAP))
			continue;
#else
 		if (entry.eflags & (MAP_ENTRY_IS_A_MAP|MAP_ENTRY_IS_SUB_MAP))
 			continue;
#endif
#else
#if (defined(__NetBSD__) && (__NetBSD_Version__ >= 104000000)) || \
	defined(__OpenBSD__)
a142 6
#else
		if (entry.is_a_map || entry.is_sub_map)
			continue;
#endif
#endif

a143 2
#if (defined(__NetBSD__) && (__NetBSD_Version__ >= 104000000)) || \
	defined(__OpenBSD__)
a154 5
#else
		if (!entry.object.vm_object)
			continue;

		/* We're only interested in `vm_object's */
a155 8
		if (kvm_read (server->machine.kd,
			      (unsigned long) entry.object.vm_object,
			      &object, sizeof (object)) != sizeof (object))
			glibtop_error_io_r (server, "kvm_read (object)");
#endif

#if (defined(__NetBSD__) && (__NetBSD_Version__ >= 104000000)) || \
	defined(__OpenBSD__)
a169 11
#endif


#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
		/* If the object is of type vnode, add its size */

		if (object.type != OBJT_VNODE)
			continue;

		if (!object.handle)
			continue;
a170 28
		if (kvm_read (server->machine.kd,
			      (unsigned long) object.handle,
			      &vnode, sizeof (vnode)) != sizeof (vnode))
			glibtop_error_io_r (server, "kvm_read (vnode)");

#if (defined(__FreeBSD__) && (__FreeBSD_version >= 500039)) || defined(__FreeBSD_kernel__)
               switch (vnode.v_type) {
                   case VREG:
#if (__FreeBSD_version < 600006) && !defined(__FreeBSD_kernel__)
                       inum = vnode.v_cachedid;
		       dev = vnode.v_cachedfs;
#endif
                   default:
                   continue;
               }
#else
		if ((vnode.v_type != VREG) || (vnode.v_tag != VT_UFS) ||
		    !vnode.v_data) continue;

		if (kvm_read (server->machine.kd,
			      (unsigned long) vnode.v_data,
			      &inode, sizeof (inode)) != sizeof (inode))
			glibtop_error_io_r (server, "kvm_read (inode)");

		inum  = inode.i_number;
		dev = inode.i_dev;
#endif
#endif
@

