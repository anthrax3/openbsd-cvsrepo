head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.10
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.8
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	dcoppa_20141014:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2014.10.14.13.06.02;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;
commitid	nrEmtrtnK9mp6Y0f;

1.1.1.1
date	2014.10.14.13.06.02;	author dcoppa;	state Exp;
branches;
next	;
commitid	nrEmtrtnK9mp6Y0f;


desc
@@



1.1
log
@Initial revision
@
text
@Data.Scientific provides a space efficient and arbitrary precision
scientific number type.

Scientific numbers are represented using scientific notation. It uses a
coefficient c :: Integer and a base-10 exponent e :: Int (do note that
since we're using an Int to represent the exponent these numbers aren't
truly arbitrary precision). A scientific number corresponds to the
Fractional number: fromInteger c * 10 ^^ e.

The main application of Scientific is to be used as the target of
parsing arbitrary precision numbers coming from an untrusted source.
@


1.1.1.1
log
@
Import hs-scientific, a space efficient and arbitrary precision
scientific number type.

New dependency for an upcoming databases/hs-postgresql-simple update.

From maintainer David Schaefer

@
text
@@
