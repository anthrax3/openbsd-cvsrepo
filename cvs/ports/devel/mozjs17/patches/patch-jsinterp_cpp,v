head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2017.04.18.21.16.08;	author espie;	state Exp;
branches;
next	;
commitid	5JOab5U5wRXODPCe;


desc
@@


1.1
log
@dynamic goto outside of a scope with non trivial destructors is a recipe
for disaster. Can't work even with gcc, caught by clang.

Turns out this is just debugging shitz, not really necessary, just comment
it off (we could rewrite the whole thing to have separate scope or use
new/delete, but what's the point ? mozjs17 is going to die one day anyway)

FreeBSD doesn't see the issue 'cause  they don't enable threads.

okay sthen@@
@
text
@$OpenBSD$
--- jsinterp.cpp.orig	Tue Apr 18 15:48:46 2017
+++ jsinterp.cpp	Tue Apr 18 15:34:55 2017
@@@@ -3664,19 +3664,19 @@@@ BEGIN_CASE(JSOP_LEAVEBLOCK)
 BEGIN_CASE(JSOP_LEAVEFORLETIN)
 BEGIN_CASE(JSOP_LEAVEBLOCKEXPR)
 {
-    DebugOnly<uint32_t> blockDepth = regs.fp()->blockChain().stackDepth();
+//    DebugOnly<uint32_t> blockDepth = regs.fp()->blockChain().stackDepth();
 
     regs.fp()->popBlock(cx);
 
     if (op == JSOP_LEAVEBLOCK) {
         /* Pop the block's slots. */
         regs.sp -= GET_UINT16(regs.pc);
-        JS_ASSERT(regs.stackDepth() == blockDepth);
+//        JS_ASSERT(regs.stackDepth() == blockDepth);
     } else if (op == JSOP_LEAVEBLOCKEXPR) {
         /* Pop the block's slots maintaining the topmost expr. */
         Value *vp = &regs.sp[-1];
         regs.sp -= GET_UINT16(regs.pc);
-        JS_ASSERT(regs.stackDepth() == blockDepth + 1);
+//        JS_ASSERT(regs.stackDepth() == blockDepth + 1);
         regs.sp[-1] = *vp;
     } else {
         /* Another op will pop; nothing to do here. */
@
