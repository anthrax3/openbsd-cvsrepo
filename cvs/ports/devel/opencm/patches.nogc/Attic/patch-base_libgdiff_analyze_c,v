head	1.2;
access;
symbols
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2003.10.15.13.12.04;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2003.05.23.13.22.14;	author todd;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove the nogc flavor, pointless now that boehm-gc works again
update to the last public release opencm0.1.2alpha7pl1-1
@
text
@$OpenBSD: patch-base_libgdiff_analyze_c,v 1.1 2003/05/23 13:22:14 todd Exp $
--- base/libgdiff/analyze.c.orig	Sat Mar 29 16:15:27 2003
+++ base/libgdiff/analyze.c	Thu May 22 17:46:39 2003
@@@@ -411,7 +411,7 @@@@ discard_confusing_lines (filevec)
   int *p;
 
   /* Allocate our results.  */
-  p = (int *) GC_MALLOC ((filevec[0].buffered_lines + filevec[1].buffered_lines)
+  p = (int *) malloc ((filevec[0].buffered_lines + filevec[1].buffered_lines)
 		       * (2 * sizeof (int)));
   for (f = 0; f < 2; f++)
     {
@@@@ -422,7 +422,7 @@@@ discard_confusing_lines (filevec)
   /* Set up equiv_count[F][I] as the number of lines in file F
      that fall in equivalence class I.  */
 
-  p = (int *) GC_MALLOC (filevec[0].equiv_max * (2 * sizeof (int)));
+  p = (int *) malloc (filevec[0].equiv_max * (2 * sizeof (int)));
   equiv_count[0] = p;
   equiv_count[1] = p + filevec[0].equiv_max;
   bzero (p, filevec[0].equiv_max * (2 * sizeof (int)));
@@@@ -434,7 +434,7 @@@@ discard_confusing_lines (filevec)
 
   /* Set up tables of which lines are going to be discarded.  */
 
-  discarded[0] = GC_MALLOC (sizeof (char)
+  discarded[0] = malloc (sizeof (char)
 			  * (filevec[0].buffered_lines
 			     + filevec[1].buffered_lines));
   discarded[1] = discarded[0] + filevec[0].buffered_lines;
@@@@ -600,8 +600,8 @@@@ discard_confusing_lines (filevec)
       filevec[f].nondiscarded_lines = j;
     }
 
-  GC_FREE (discarded[0]);
-  GC_FREE (equiv_count[0]);
+  free (discarded[0]);
+  free (equiv_count[0]);
 }
 
 /* Adjust inserts/deletes of identical lines to join changes
@@@@ -733,7 +733,7 @@@@ add_change (line0, line1, deleted, inser
      int line0, line1, deleted, inserted;
      struct change *old;
 {
-  struct change *new = (struct change *) GC_MALLOC (sizeof (struct change));
+  struct change *new = (struct change *) malloc (sizeof (struct change));
 
   new->line0 = line0;
   new->line1 = line1;
@@@@ -867,7 +867,7 @@@@ diff_2_files (filevec, depth)
 	  size_t buffer_size = buffer_lcm (STAT_BLOCKSIZE (filevec[0].stat),
 					   STAT_BLOCKSIZE (filevec[1].stat));
 	  for (i = 0; i < 2; i++)
-	    filevec[i].buffer = GC_REALLOC (filevec[i].buffer, buffer_size);
+	    filevec[i].buffer = realloc (filevec[i].buffer, buffer_size);
 
 	  for (;;  filevec[0].buffered_chars = filevec[1].buffered_chars = 0)
 	    {
@@@@ -917,7 +917,7 @@@@ diff_2_files (filevec, depth)
 	 Allocate an extra element, always zero, at each end of each vector.  */
 
       size_t s = filevec[0].buffered_lines + filevec[1].buffered_lines + 4;
-      filevec[0].changed_flag = GC_MALLOC (s);
+      filevec[0].changed_flag = malloc (s);
       bzero (filevec[0].changed_flag, s);
       filevec[0].changed_flag++;
       filevec[1].changed_flag = filevec[0].changed_flag
@@@@ -935,7 +935,7 @@@@ diff_2_files (filevec, depth)
       xvec = filevec[0].undiscarded;
       yvec = filevec[1].undiscarded;
       diags = filevec[0].nondiscarded_lines + filevec[1].nondiscarded_lines + 3;
-      fdiag = (int *) GC_MALLOC (diags * (2 * sizeof (int)));
+      fdiag = (int *) malloc (diags * (2 * sizeof (int)));
       bdiag = fdiag + diags;
       fdiag += filevec[1].nondiscarded_lines + 1;
       bdiag += filevec[1].nondiscarded_lines + 1;
@@@@ -954,7 +954,7 @@@@ diff_2_files (filevec, depth)
       compareseq (0, filevec[0].nondiscarded_lines,
 		  0, filevec[1].nondiscarded_lines, no_discards);
 
-      GC_FREE (fdiag - (filevec[1].nondiscarded_lines + 1));
+      free (fdiag - (filevec[1].nondiscarded_lines + 1));
 
       /* Modify the results slightly to make them prettier
 	 in cases where that can validly be done.  */
@@@@ -1052,20 +1052,20 @@@@ diff_2_files (filevec, depth)
 	    }
 	}
 
-      GC_FREE (filevec[0].undiscarded);
+      free (filevec[0].undiscarded);
 
-      GC_FREE (filevec[0].changed_flag - 1);
+      free (filevec[0].changed_flag - 1);
 
       for (i = 1; i >= 0; --i)
-	GC_FREE (filevec[i].equivs);
+	free (filevec[i].equivs);
 
       for (i = 0; i < 2; ++i)
-	GC_FREE (filevec[i].linbuf + filevec[i].linbuf_base);
+	free (filevec[i].linbuf + filevec[i].linbuf_base);
 
       for (e = script; e; e = p)
 	{
 	  p = e->link;
-	  GC_FREE (e);
+	  free (e);
 	}
 
       if (! ROBUST_OUTPUT_STYLE (output_style))
@@@@ -1078,8 +1078,8 @@@@ diff_2_files (filevec, depth)
     }
 
   if (filevec[0].buffer != filevec[1].buffer)
-    GC_FREE (filevec[0].buffer);
-  GC_FREE (filevec[1].buffer);
+    free (filevec[0].buffer);
+  free (filevec[1].buffer);
 
   return changes;
 }
@


1.1
log
@update to 0.1.2alpha5pl2 from 0.1.0alpha18

see http://www.opencm.org/news.html for hilights of this update, major
noteworthy changes include:

- sxd has gone away, gzfs is 'interim' while 'sxd2' is almost ready
- if you have an old sxd repository, read the mailing list archives for
  how to update (use an interum version)
- an incompatible update to the server/client protocol requires that you
  update both at the same time

(as a reminder, this is 'alpha' and as such is subject to incompatible changes
 like the above.  expect more to come when sxd2 emerges)

Also, add a 'nogc' flavor that removes the dependency on boehm-gc, at the
cost of not free()'ing all memory allocated (read: at the moment, most).
@
text
@d1 1
a1 1
$OpenBSD$
@

