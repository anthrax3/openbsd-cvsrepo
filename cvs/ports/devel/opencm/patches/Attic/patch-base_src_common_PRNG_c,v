head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.23.10.44.36;	author jca;	state dead;
branches;
next	1.3;
commitid	HUdXwmqB8sKBIfC6;

1.3
date	2014.04.19.12.38.45;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.11.12.27.00;	author todd;	state dead;
branches;
next	1.1;

1.1
date	2002.08.28.22.23.29;	author todd;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove opencm, dead upstream since years.

ok todd@@ (MAINTAINER) sthen@@
@
text
@$OpenBSD: patch-base_src_common_PRNG_c,v 1.3 2014/04/19 12:38:45 sthen Exp $
--- base/src/common/PRNG.c.orig	Sat Apr 19 06:34:16 2014
+++ base/src/common/PRNG.c	Sat Apr 19 06:34:51 2014
@@@@ -75,21 +75,6 @@@@ void initialize_PRNG(void)
   if(getenv("RANDFILE"))
     RAND_load_file(getenv("RANDFILE"), MAX_READ);
 
-  /* We limit gathering entropy from an EGD socket to only 128 bytes to work
-     around some flaws in the design of EGD (in particular, EGD is slow, it
-     will crash if too many requests come in too fast, it gathers entropy
-     slowly, and it will block if it doesn't have enough).
-
-     I (Jack L) recommend using PRNGD (a fast and stable EGD clone written in
-     C) instead of EGD for these reasons.
-
-     RAND_egd_bytes is only available in OpenSSL 0.9.6 and up. However, given
-     that 0.9.5 and previous versions have exploitable overflows, this is not a
-     major concern.
-  */
-  if(getenv("EGD_PATH"))
-    RAND_egd_bytes(getenv("EGD_PATH"), 128);
-
   /* Check to see if we are sufficiently initialized */
   if(!RAND_status())
   {
@


1.3
log
@no more egd, it wasn't used here anyway if RAND_status succeeded
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update to alpha17 (finally some activity!)
@
text
@d1 4
a4 4
$OpenBSD: patch-base_src_common_PRNG_c,v 1.1 2002/08/28 22:23:29 todd Exp $
--- base/src/common/PRNG.c.orig	Thu Jul 18 20:30:48 2002
+++ base/src/common/PRNG.c	Wed Aug 28 14:26:40 2002
@@@@ -75,18 +75,17 @@@@ void initialize_PRNG(void)
d8 18
a25 30
-  /* We limit gathering entropy from EGD to only 128 bytes. This is because
-       a) EGD is slow
-       b) EGD will sometimes crash if too many requests come in. I reported
-          this to the author a few months ago, but never got a response.
-       c) EGD gathers entropy at a not very fast rate; if we read much
-          more than this, we'll probably start running out, which would
-          be bad, especially for the client (several invocations might occur
-          over the course of only a few minutes)
+  /* We limit gathering entropy from an EGD socket to only 128 bytes to work
+     around some flaws in the design of EGD (in particular, EGD is slow, it
+     will crash if too many requests come in too fast, it gathers entropy
+     slowly, and it will block if it doesn't have enough).
 
-     However, EGD is by far the best choice for a RNG on systems that don't
-     have /dev/random, so it seems wise to support it.
-   */
+     I (Jack L) recommend using PRNGD (a fast and stable EGD clone written in
+     C) instead of EGD for these reasons.
+
+     RAND_egd_bytes is only available in OpenSSL 0.9.6 and up. However, given
+     that 0.9.5 and previous versions have exploitable overflows, this is not a
+     major concern.  */
   if(getenv("EGD_PATH"))
     RAND_egd_bytes(getenv("EGD_PATH"), 128);
 
@@@@ -96,3 +95,4 @@@@ void initialize_PRNG(void)
     THROW(ExPrngError, "Insufficient randomness to seed the PRNG");
   }
 }
+
@


1.1
log
@64bit stuff breaks in bad ways. more testing needed
@
text
@d1 1
a1 1
$OpenBSD$
@

