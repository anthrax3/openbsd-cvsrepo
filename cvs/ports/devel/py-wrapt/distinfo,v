head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	shadchin_20160330:1.1.1.1
	shadchin:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.03.18.07.48.06;	author shadchin;	state Exp;
branches;
next	1.2;
commitid	66dyGMmrnJDbKVUm;

1.2
date	2016.04.15.08.37.08;	author shadchin;	state Exp;
branches;
next	1.1;
commitid	NpE3OvBcHPIHt5CC;

1.1
date	2016.03.30.09.10.41;	author shadchin;	state Exp;
branches
	1.1.1.1;
next	;
commitid	syYytMGO3YyH0b9W;

1.1.1.1
date	2016.03.30.09.10.41;	author shadchin;	state Exp;
branches;
next	;
commitid	syYytMGO3YyH0b9W;


desc
@@


1.3
log
@Update to py-wrapt 1.10.10
@
text
@SHA256 (wrapt-1.10.10.tar.gz) = 3thT5CG7x7tmiwhTkfLivpvYP441Zfjv3ck3KERG46o=
SIZE (wrapt-1.10.10.tar.gz) = 122052
@


1.2
log
@Update to py-wrapt 1.10.8
@
text
@d1 2
a2 2
SHA256 (wrapt-1.10.8.tar.gz) = CWtH9E4xl5NMzDNcU9LSG/btn9lBspRybiah/Rj9RUE=
SIZE (wrapt-1.10.8.tar.gz) = 120359
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
SHA256 (wrapt-1.10.6.tar.gz) = tUDiN1PT9wF+wNOPFtr3f56c8XDVBAq8PYdXO6IPxPM=
SIZE (wrapt-1.10.6.tar.gz) = 120259
@


1.1.1.1
log
@Import py-wrapt, ok and tweak danj@@.

The aim of the wrapt module is to provide a transparent object proxy
for Python, which can be used as the basis for the construction of
function wrappers and decorator functions.

The wrapt module focuses very much on correctness. It therefore
goes way beyond existing mechanisms such as functools.wraps() to
ensure that decorators preserve introspectability, signatures, type
checking abilities etc. The decorators that can be constructed using
this module will work in far more scenarios than typical decorators
and provide more predictable and consistent behaviour.

To ensure that the overhead is as minimal as possible, a C extension
module is used for performance critical components. An automatic
fallback to a pure Python implementation is also provided where a
target system does not have a compiler to allow the C extension to
be compiled.

@
text
@@
