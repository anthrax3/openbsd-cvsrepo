head	1.4;
access;
symbols
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.18
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.16
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.14
	OPENBSD_5_0:1.2.0.12
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	stuart-20070516:1.1.1.1
	stuart:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.03.20.12.31.30;	author sthen;	state dead;
branches;
next	1.3;
commitid	3rYoBKl953R6nGr3;

1.3
date	2013.07.06.08.22.04;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.19.00.26.43;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.16.14.10.57;	author steven;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.16.14.10.57;	author steven;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to re2c-0.14.1
@
text
@$OpenBSD: patch-dfa_cc,v 1.3 2013/07/06 08:22:04 sthen Exp $

Our isprint() has a different idea of which chars are printable
than the system on which the regression tests were written.

--- dfa.cc.orig	Thu Jul  4 23:39:34 2013
+++ dfa.cc	Fri Jul  5 21:09:28 2013
@@@@ -16,7 +16,7 @@@@ void prtChOrHex(std::ostream& o, uint c)
 		prtHex(o, c);
 		if (DFlag) o << '"';
 	}
-	else if ((c < 256u) && (isprint(c) || isspace(c)))
+	else if ((c < 128u) && (isprint(c) || isspace(c)))
 	{
 		o << (DFlag ? '"' : '\'');
 		prtCh(o, c);
@


1.3
log
@update to re2c-0.13.6
@
text
@d1 1
a1 1
$OpenBSD: patch-dfa_cc,v 1.2 2008/09/19 00:26:43 sthen Exp $
@


1.2
log
@Maintenance update to 0.13.5 - a couple of segfaults fixed and
some new features. Regen plist while there.
@
text
@d1 1
a1 1
$OpenBSD$
d6 8
a13 8
--- dfa.cc.orig	Fri Sep 19 00:41:00 2008
+++ dfa.cc	Fri Sep 19 00:41:39 2008
@@@@ -12,7 +12,7 @@@@ void prtChOrHex(std::ostream& o, uint c, bool useTalx)
 {
 	int oc = (int)(re2c::wFlag || !useTalx ? c : re2c::talx[c]);
 
-	if ((oc < 256) && (isprint(oc) || isspace(oc)))
+	if ((oc < 128) && (isprint(oc) || isspace(oc)))
@


1.1
log
@Initial revision
@
text
@d2 6
a7 2
--- dfa.cc.orig	Mon Apr 16 22:22:28 2007
+++ dfa.cc	Mon May  7 02:01:10 2007
d12 2
a13 2
-	if ((oc < 256) && isprint(oc))
+	if ((oc < 128) && isprint(oc))
d15 2
a16 2
 		o << '\'';
 		prtCh(o, oc);
@


1.1.1.1
log
@import re2c 0.12.0

re2c is a tool for writing very fast and very flexible scanners.
re2c focuses on generating high efficient code for regular expression
matching. As a result this allows a much broader range of use than
any traditional lexer offers. And last but not least re2c generates
warning free code that is equal to hand-written code in terms of
size, speed and quality.

from Stuart Henderson <stu at spacehopper.org>
@
text
@@
