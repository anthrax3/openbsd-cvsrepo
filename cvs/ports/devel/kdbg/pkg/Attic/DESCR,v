head	1.4;
access;
symbols
	OPENBSD_5_9:1.3.0.48
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.50
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.46
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.40
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.38
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.36
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.34
	OPENBSD_5_0:1.3.0.32
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.30
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.28
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.14
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	kevlo_2000-Apr-05:1.1.1.1
	kevlo:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.04.29.21.20.37;	author zhuk;	state dead;
branches;
next	1.3;
commitid	jLKJQnZluyuYhQUu;

1.3
date	2003.12.15.21.42.20;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.13.18.06.17;	author danh;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.05.11.17.16;	author kevlo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.05.11.17.16;	author kevlo;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	2000.09.15.04.49.06;	author marc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove another bunch of KDE3 ports: outdated, superseded and useless ones.
@
text
@KDbg is a graphical frontend for GDB and KDE.

Features:

Inspection of variable values in a tree structure.

Direct member: For certain compound data types the most important member
values are displayed next to the variable name, so that it is not
necessary to expand the subtree of that variable in order to see the
member value. For example, you don't need to go into a variable of type
QString if you want to see the string that the variable holds. (BTW,
this is of course not hardcoded, but can be extended to new types.) KDbg
can also display Qt 2.0's QString values, which are Unicode strings.

Debugger at your finger tips: The basic debugger functions (step, next,
run, finish, until, set/clear/enable/disable breakpoint) are bound to
function keys F5 through F10.

Quick and easy.

Of course, lots of other basic functions: View source code, search text,
set program arguments and environment variables, display arbitrary
expressions. Everything you need to debug a program, eh!

Debugging of core dumps, attaching to running processes is possible.

Conditional breakpoints.
@


1.3
log
@remove WWW lines
@
text
@@


1.2
log
@port cleanup from maintainer.  removes explicit FAKE, and uses CONFIGURE_STYLE.
this also updates the PLIST.
@
text
@a27 2

WWW: ${HOMEPAGE}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
KDbg is a graphical frontend for GDB and KDE.  
d3 1
a3 1
Features (From the webpage at http://members.telecom.at/~johsixt/kdbg.html)
d5 1
a5 1
Inspection of variable values in a tree structure. 
d7 7
a13 6
Direct member: For certain compound data types the most important member values are 
displayed next to the variable name, so that it is not necessary to expand the
subtree of that variable in order to see the member value. For example, you don't 
need to go into a variable of type QString if you want to see the string that the variable
holds. (BTW, this is of course not hardcoded, but can be extended to new types.) KDbg 
can also display Qt 2.0's QString values, which are Unicode strings. 
d15 3
a17 2
Debugger at your finger tips: The basic debugger functions (step, next, run, finish, until, 
set/clear/enable/disable breakpoint) are bound to function keys F5 through F10.
d19 1
a19 1
Quick and easy. 
d21 3
a23 3
Of course, lots of other basic functions: View source code, search text, set program 
arguments and environment variables, display arbitrary expressions. Everything you
need to debug a program, eh! 
d25 1
a25 1
Debugging of core dumps, attaching to running processes is possible. 
d27 1
a27 1
Conditional breakpoints. 
d29 1
@


1.1.1.1
log
@Initial import of kdbg version 1.0.2.
kdbg is a graphical debugger for kde.

Submitted by:	Sean Cavanaugh <seanc@@mona.cginfo.sk.ca>
@
text
@@


1.1.1.1.2.1
log
@bring devel as of cut-over date into 2.7 branch
@
text
@d1 1
a1 1
KDbg is a graphical frontend for GDB and KDE.
d3 1
a3 1
Features:
d5 1
a5 1
Inspection of variable values in a tree structure.
d7 6
a12 7
Direct member: For certain compound data types the most important member
values are displayed next to the variable name, so that it is not
necessary to expand the subtree of that variable in order to see the
member value. For example, you don't need to go into a variable of type
QString if you want to see the string that the variable holds. (BTW,
this is of course not hardcoded, but can be extended to new types.) KDbg
can also display Qt 2.0's QString values, which are Unicode strings.
d14 2
a15 3
Debugger at your finger tips: The basic debugger functions (step, next,
run, finish, until, set/clear/enable/disable breakpoint) are bound to
function keys F5 through F10.
d17 1
a17 1
Quick and easy.
d19 3
a21 3
Of course, lots of other basic functions: View source code, search text,
set program arguments and environment variables, display arbitrary
expressions. Everything you need to debug a program, eh!
d23 1
a23 1
Debugging of core dumps, attaching to running processes is possible.
d25 1
a25 1
Conditional breakpoints.
a26 1
WWW: ${HOMEPAGE}
@

