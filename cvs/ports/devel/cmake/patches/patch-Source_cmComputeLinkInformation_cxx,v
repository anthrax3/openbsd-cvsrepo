head	1.19;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@# @;


1.19
date	2017.08.26.17.53.35;	author dcoppa;	state Exp;
branches;
next	1.18;
commitid	GZPWWvi7dHjhVGfr;

1.18
date	2016.11.28.09.15.13;	author dcoppa;	state Exp;
branches;
next	1.17;
commitid	jOocuc05F30hpQ6W;

1.17
date	2016.09.06.08.43.54;	author dcoppa;	state Exp;
branches;
next	1.16;
commitid	J21iimDWw0LsOp86;

1.16
date	2016.08.08.07.44.48;	author dcoppa;	state Exp;
branches;
next	1.15;
commitid	r4e0Be8ugQYraWeW;

1.15
date	2016.04.29.10.34.33;	author dcoppa;	state Exp;
branches;
next	1.14;
commitid	z7Jo8sWkfT7EmMLb;

1.14
date	2015.12.08.17.18.59;	author dcoppa;	state Exp;
branches;
next	1.13;
commitid	AX6ONjs8OJ4jyAD6;

1.13
date	2015.09.03.07.09.25;	author dcoppa;	state Exp;
branches;
next	1.12;
commitid	KGLL6yBcZn2xZciC;

1.12
date	2015.03.26.07.10.02;	author dcoppa;	state Exp;
branches;
next	1.11;
commitid	RC163bs6emik8Gf9;

1.11
date	2014.12.31.11.06.02;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	q283NDlM4qiVneVU;

1.10
date	2014.10.03.10.11.45;	author dcoppa;	state Exp;
branches;
next	1.9;
commitid	2kN0tj2KqHFNY4hg;

1.9
date	2014.09.28.17.06.25;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	aZjacCdYQd9Q1teY;

1.8
date	2014.09.11.10.24.38;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	m0ESeGbhnaGm45G1;

1.7
date	2013.10.14.12.58.03;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.06.12.47.06;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.08.07.23.09;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.20.08.07.34;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2012.06.14.09.32.00;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.12.19.19.30;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2010.05.28.20.21.48;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.19
log
@
Update to CMake-3.9.1

Tests and feedback by rsadowski@@, schwarze@@
Ports bulk build by sthen@@
@
text
@$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.18 2016/11/28 09:15:13 dcoppa Exp $
Index: Source/cmComputeLinkInformation.cxx
--- Source/cmComputeLinkInformation.cxx.orig
+++ Source/cmComputeLinkInformation.cxx
@@@@ -366,8 +366,9 @@@@ cmComputeLinkInformation::cmComputeLinkInformation(
     this->Target->GetLinkDirectories());
 
   // Set up the implicit link directories.
-  this->LoadImplicitLinkInfo();
+  this->LoadImplicitLinkInfoOpenBSD();
   this->OrderLinkerSearchPath->SetImplicitDirectories(this->ImplicitLinkDirs);
+  this->LoadImplicitLinkInfo();
   this->OrderRuntimeSearchPath->SetImplicitDirectories(this->ImplicitLinkDirs);
   if (this->OrderDependentRPath) {
     this->OrderDependentRPath->SetImplicitDirectories(this->ImplicitLinkDirs);
@@@@ -446,6 +447,8 @@@@ cmComputeLinkInformation::GetSharedLibrariesLinked()
 
 bool cmComputeLinkInformation::Compute()
 {
+  bool use_wxneeded = false;
+
   // Skip targets that do not link.
   if (!(this->Target->GetType() == cmStateEnums::EXECUTABLE ||
         this->Target->GetType() == cmStateEnums::SHARED_LIBRARY ||
@@@@ -474,10 +477,17 @@@@ bool cmComputeLinkInformation::Compute()
     if (lei->IsSharedDep) {
       this->AddSharedDepItem(lei->Item, lei->Target);
     } else {
+      std::string litem_tolower = lei->Item;
+      transform(litem_tolower.begin(), litem_tolower.end(), litem_tolower.begin(), ::tolower);
+      if (litem_tolower.find("webkit") != std::string::npos || litem_tolower.find("webengine") != std::string::npos)
+        use_wxneeded = true;
       this->AddItem(lei->Item, lei->Target);
     }
   }
 
+  if (use_wxneeded == true)
+    this->AddUserItem("-Wl,-z,wxneeded", false);
+
   // Restore the target link type so the correct system runtime
   // libraries are found.
   const char* lss = this->Target->GetProperty("LINK_SEARCH_END_STATIC");
@@@@ -644,10 +654,16 @@@@ void cmComputeLinkInformation::AddItem(std::string con
         // This is a directory.
         this->AddDirectoryItem(item);
       } else {
-        // Use the full path given to the library file.
         this->Depends.push_back(item);
-        this->AddFullItem(item);
-        this->AddLibraryRuntimeInfo(item);
+        if (!this->OpenBSD) {
+          // Use the full path given to the library file.
+          this->AddFullItem(item);
+          this->AddLibraryRuntimeInfo(item);
+        } else {
+          std::string file = cmSystemTools::GetFilenameName(item);
+          this->AddUserItem(file, false);
+          this->OrderLinkerSearchPath->AddLinkLibrary(item);
+        }
       }
     } else {
       // This is a library or option specified by the user.
@@@@ -993,11 +1009,18 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
     this->SharedLibrariesLinked.insert(target);
   }
 
-  // Handle case of an imported shared library with no soname.
-  if (this->NoSONameUsesPath &&
-      target->IsImportedSharedLibWithoutSOName(this->Config)) {
-    this->AddSharedLibNoSOName(item);
-    return;
+  if (this->OpenBSD) {
+    if (target->GetType() == cmStateEnums::SHARED_LIBRARY) {
+      this->AddSharedLibNoSOName(item);
+      return;
+    }
+  } else {
+    // Handle case of an imported shared library with no soname.
+    if (this->NoSONameUsesPath &&
+        target->IsImportedSharedLibWithoutSOName(this->Config)) {
+      this->AddSharedLibNoSOName(item);
+      return;
+    }
   }
 
   // If this platform wants a flag before the full path, add it.
@@@@ -1557,6 +1580,57 @@@@ void cmComputeLinkInformation::LoadImplicitLinkInfo()
   if (const char* implicitDirs =
         this->Makefile->GetDefinition(implicitDirVar)) {
     cmSystemTools::ExpandListArgument(implicitDirs, implicitDirVec);
+  }
+
+  // Store implicit link directories.
+  this->ImplicitLinkDirs.insert(implicitDirVec.begin(), implicitDirVec.end());
+
+  // Get language-specific implicit libraries.
+  std::vector<std::string> implicitLibVec;
+  std::string implicitLibVar = "CMAKE_";
+  implicitLibVar += this->LinkLanguage;
+  implicitLibVar += "_IMPLICIT_LINK_LIBRARIES";
+  if (const char* implicitLibs =
+        this->Makefile->GetDefinition(implicitLibVar)) {
+    cmSystemTools::ExpandListArgument(implicitLibs, implicitLibVec);
+  }
+
+  // Store implicit link libraries.
+  for (std::vector<std::string>::const_iterator i = implicitLibVec.begin();
+       i != implicitLibVec.end(); ++i) {
+    // Items starting in '-' but not '-l' are flags, not libraries,
+    // and should not be filtered by this implicit list.
+    std::string const& item = *i;
+    if (item[0] != '-' || item[1] == 'l') {
+      this->ImplicitLinkLibs.insert(item);
+    }
+  }
+
+  // Get platform specific rpath link directories
+  if (const char* rpathDirs =
+        (this->Makefile->GetDefinition("CMAKE_PLATFORM_RUNTIME_PATH"))) {
+    cmSystemTools::ExpandListArgument(rpathDirs, this->RuntimeLinkDirs);
+  }
+}
+
+void cmComputeLinkInformation::LoadImplicitLinkInfoOpenBSD()
+{
+  std::vector<std::string> implicitDirVec;
+
+  // Get platform-wide implicit directories.
+  if (const char* implicitLinks = (this->Makefile->GetDefinition(
+        "CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES"))) {
+    cmSystemTools::ExpandListArgument(implicitLinks, implicitDirVec);
+  }
+
+  // Append library architecture to all implicit platform directories
+  // and add them to the set
+  if (const char* libraryArch =
+        this->Makefile->GetDefinition("CMAKE_LIBRARY_ARCHITECTURE")) {
+    for (std::vector<std::string>::const_iterator i = implicitDirVec.begin();
+         i != implicitDirVec.end(); ++i) {
+      this->ImplicitLinkDirs.insert(*i + "/" + libraryArch);
+    }
   }
 
   // Store implicit link directories.
@


1.18
log
@
Update to CMake-3.7.0

Thanks to naddy@@ who ran a bulk build with it
@
text
@d1 16
a16 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.17 2016/09/06 08:43:54 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Fri Nov 11 15:37:14 2016
+++ Source/cmComputeLinkInformation.cxx	Fri Nov 25 22:31:45 2016
@@@@ -445,6 +445,8 @@@@ cmComputeLinkInformation::GetSharedLibrariesLinked()
d23 3
a25 3
   if (!(this->Target->GetType() == cmState::EXECUTABLE ||
         this->Target->GetType() == cmState::SHARED_LIBRARY ||
@@@@ -473,10 +475,17 @@@@ bool cmComputeLinkInformation::Compute()
d31 1
a31 1
+      if (litem_tolower.find("webkit") != std::string::npos)
d43 1
a43 1
@@@@ -627,10 +636,16 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d63 1
a63 1
@@@@ -973,11 +988,18 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
d73 1
a73 1
+    if (target->GetType() == cmState::SHARED_LIBRARY) {
d87 58
@


1.17
log
@
Hack cmake so that if webkit is in the list of shared libraries
that are passed to the linker, automatically add '-Wl,-z,wxneeded'
to the linker flags.
Works for libQt5WebKit, libQtWebKit, libwebkit2gtk, libwebkitgtk.

Requested by, and ok, ajacoutot@@
Also ok landry@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.16 2016/08/08 07:44:48 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Fri Jul 22 15:50:22 2016
+++ Source/cmComputeLinkInformation.cxx	Tue Sep  6 09:02:48 2016
@@@@ -449,6 +449,8 @@@@ cmComputeLinkInformation::GetSharedLibrariesLinked()
d13 1
a13 1
@@@@ -477,10 +479,17 @@@@ bool cmComputeLinkInformation::Compute()
d25 1
a25 1
+  if (use_wxneeded)
d31 1
a31 1
@@@@ -631,10 +640,16 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d51 1
a51 1
@@@@ -977,11 +992,18 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.16
log
@
Update to CMake-3.6.1.

Tested in a bulk build by naddy@@: the one and only fallout has been
fixed.
@
text
@d1 31
a31 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.15 2016/04/29 10:34:33 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Thu Aug  4 11:56:19 2016
+++ Source/cmComputeLinkInformation.cxx	Thu Aug  4 11:59:28 2016
@@@@ -631,10 +631,16 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d51 1
a51 1
@@@@ -977,11 +983,18 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.15
log
@
Update to CMake-3.5.2

ok sthen@@
@
text
@d1 7
a7 7
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.14 2015/12/08 17:18:59 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Fri Apr 15 15:41:21 2016
+++ Source/cmComputeLinkInformation.cxx	Wed Apr 27 10:55:08 2016
@@@@ -698,10 +698,19 @@@@ void cmComputeLinkInformation::AddItem(std::string con
         }
       else
         {
d12 1
a12 2
+        if(!this->OpenBSD)
+          {
d16 1
a16 3
+          }
+        else
+          {
d20 1
a20 2
+          }
         }
d22 3
a24 2
     else
@@@@ -1095,12 +1104,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
d26 1
a26 1
     }
d29 2
a30 4
-  if(this->NoSONameUsesPath &&
-     target->IsImportedSharedLibWithoutSOName(this->Config))
+  if(this->OpenBSD)
     {
d33 2
a34 2
+    if(target->GetType() == cmState::SHARED_LIBRARY)
+      {
d37 2
a38 2
+      }
+    } else {
d40 2
a41 3
+    if(this->NoSONameUsesPath &&
+       target->IsImportedSharedLibWithoutSOName(this->Config))
+      {
d44 2
a45 2
+      }
     }
@


1.14
log
@
Update to cmake-3.4.0

tested in a bulk build by naddy@@
kde4-related failures proactively fixed by zhuk@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.13 2015/09/03 07:09:25 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Thu Nov 12 16:39:50 2015
+++ Source/cmComputeLinkInformation.cxx	Mon Nov 23 16:21:00 2015
@@@@ -700,10 +700,19 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d27 1
a27 1
@@@@ -1101,12 +1110,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
d38 1
a38 1
+    if(target->GetType() == cmTarget::SHARED_LIBRARY)
@


1.13
log
@
Update to CMake-3.3.1

No fallout in a bulk build
OK ajacoutot@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.12 2015/03/26 07:10:02 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Thu Aug 13 16:57:00 2015
+++ Source/cmComputeLinkInformation.cxx	Mon Aug 17 15:39:13 2015
@@@@ -690,10 +690,19 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d27 1
a27 1
@@@@ -1086,12 +1095,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.12
log
@
Update to CMake-3.2.1

Tested in a bulk build by landry@@
OK landry@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.11 2014/12/31 11:06:02 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Tue Mar 10 09:38:44 2015
+++ Source/cmComputeLinkInformation.cxx	Wed Mar 18 06:24:00 2015
@@@@ -667,10 +667,19 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d27 1
a27 1
@@@@ -1064,12 +1073,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.11
log
@
Update to cmake-3.1.0

Bulk build by landry@@
KDE-related fixes by zhuk@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.10 2014/10/03 10:11:45 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Mon Dec 15 14:07:43 2014
+++ Source/cmComputeLinkInformation.cxx	Thu Dec 18 05:37:12 2014
@@@@ -682,10 +682,19 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d27 1
a27 1
@@@@ -1079,12 +1088,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.10
log
@
Do not register full paths to shared libraries in the ELF "NEEDED"
sections

tested in a bulk build by landry@@

OK landry@@, zhuk@@
@
text
@d1 4
a4 18
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.9 2014/09/28 17:06:25 dcoppa Exp $

XXX Temporary workaround for a sporadic segfault which seems to
result from memory corruption. To be removed when CMake 3.1 will
be released.

--- Source/cmComputeLinkInformation.cxx.orig	Thu Sep 11 15:24:01 2014
+++ Source/cmComputeLinkInformation.cxx	Fri Sep 26 22:49:55 2014
@@@@ -255,7 +255,7 @@@@ cmComputeLinkInformation
     ->GetPropertyAsBool("FIND_LIBRARY_USE_OPENBSD_VERSIONING");
 
   // The configuration being linked.
-  this->Config = config;
+  this->Config = this->Makefile->GetSafeDefinition("CMAKE_BUILD_TYPE");
 
   // Allocate internals.
   this->OrderLinkerSearchPath =
@@@@ -685,10 +685,19 @@@@ void cmComputeLinkInformation::AddItem(std::string con
d27 1
a27 1
@@@@ -1082,12 +1091,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.9
log
@
Temporary workaround for a sporadic segfault which seems to result
from memory corruption. To be removed when CMake 3.1 will be released.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.8 2014/09/11 10:24:38 dcoppa Exp $
d18 24
a41 1
@@@@ -1082,12 +1082,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.8
log
@
Update to cmake-3.0.1

Tested in a bulk build by landry@@
OK landry@@
@
text
@d1 17
a17 3
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.7 2013/10/14 12:58:03 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Thu Jul 31 17:03:56 2014
+++ Source/cmComputeLinkInformation.cxx	Wed Sep  3 08:10:09 2014
@


1.7
log
@Update to cmake-2.8.12.
Tested in a bulk build by the usual suspects, Thanks!

ok espie@@, kili@@
ok zhuk@@ for kde4
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.6 2013/06/06 12:47:06 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Mon Oct  7 17:31:00 2013
+++ Source/cmComputeLinkInformation.cxx	Wed Oct  9 09:38:48 2013
@@@@ -1076,12 +1076,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.6
log
@Update to cmake-2.8.11.

Tested in a bulk build by landry@@
Tested with KDE4 by zhuk@@
OK zhuk@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.5 2012/10/08 07:23:09 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Wed May 15 19:38:13 2013
+++ Source/cmComputeLinkInformation.cxx	Thu May 30 11:08:06 2013
@@@@ -1070,12 +1070,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.5
log
@CMake now creates shared libraries without soname.

Tested in a bulk build by landry@@
Feedback by nigel@@ and landry@@
OK landry@@
@
text
@d1 4
a4 4
$OpenBSD$
--- Source/cmComputeLinkInformation.cxx.orig	Thu Aug  9 20:15:19 2012
+++ Source/cmComputeLinkInformation.cxx	Wed Sep 26 11:45:53 2012
@@@@ -1059,12 +1059,21 @@@@ void cmComputeLinkInformation::AddTargetItem(std::stri
@


1.4
log
@Garbage collect the pthread patching for CMake.

From Brad, thanks.
@
text
@d1 5
a5 8
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.3 2012/06/14 09:32:00 dcoppa Exp $

Fix libpthread linking on OpenBSD: use '-pthread' instead of
'-lpthread'.

--- Source/cmComputeLinkInformation.cxx.orig	Wed Apr 18 20:10:54 2012
+++ Source/cmComputeLinkInformation.cxx	Mon Jun 11 14:28:03 2012
@@@@ -1304,7 +1304,19 @@@@ void cmComputeLinkInformation::AddUserItem(std::string
d8 23
a30 17
   // Create an option to ask the linker to search for the library.
+#if defined(__OpenBSD__)
+  std::string out;
+  if(strcmp(lib.c_str(), "pthread") == 0)
+    {
+    out += "-";
+    }
+  else
+    {
+    out += this->LibLinkFlag;
+    }
+#else
   std::string out = this->LibLinkFlag;
+#endif
   out += lib;
   out += this->LibLinkSuffix;
   this->Items.push_back(Item(out, false));
@


1.3
log
@Fix libpthread linking (use '-pthread' instead of '-lpthread') for
cmake-based ports that use "CHECK_LIBRARY_EXISTS(pthread ...)".

Fix libpthread linking for devel/llvm too (additional care was
needed).

No fallout in a bulk build: thanks landry!
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Fix a bug with shared libraries having OUTPUT_NAME in their target
properties.

Update to cmake-2.8.2.

While here, move to new-style LIB_DEPENDS/WANTLIB.

OK espie@@, landry@@, sthen@@
@
text
@d1 8
a8 9
$OpenBSD: patch-Source_cmComputeLinkInformation_cxx,v 1.1 2010/05/28 20:21:48 dcoppa Exp $
--- Source/cmComputeLinkInformation.cxx.orig	Tue Apr  6 16:45:33 2010
+++ Source/cmComputeLinkInformation.cxx	Fri Apr 23 22:39:44 2010
@@@@ -376,6 +376,8 @@@@ cmComputeLinkInformation
     {
     this->OrderDependentRPath
       ->SetImplicitDirectories(this->ImplicitLinkDirs);
+    this->OrderDependentRPath
+      ->AddLanguageDirectories(this->RuntimeLinkDirs);
d11 6
a16 5
   // Decide whether to enable compatible library search path mode.
@@@@ -1641,6 +1643,14 @@@@ void cmComputeLinkInformation::LoadImplicitLinkInfo()
       {
       this->ImplicitLinkLibs.insert(item);
       }
d18 1
a18 5
+
+  // Get platform specific rpath link directories
+  if(const char *rpathDirs =
+     (this->Makefile->GetDefinition
+      ("CMAKE_PLATFORM_RUNTIME_PATH")))
d20 8
a27 4
+    cmSystemTools::ExpandListArgument(rpathDirs, this->RuntimeLinkDirs);
     }
 }
 
@


1.1
log
@Update to cmake 2.8.1 (I also take maintainership).

"This is good, commit." espie@@
@
text
@d1 1
a1 1
$OpenBSD$
@

