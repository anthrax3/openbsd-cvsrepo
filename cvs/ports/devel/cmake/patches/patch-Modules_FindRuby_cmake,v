head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2;
locks; strict;
comment	@# @;


1.14
date	2016.11.28.09.15.13;	author dcoppa;	state Exp;
branches;
next	1.13;
commitid	jOocuc05F30hpQ6W;

1.13
date	2015.01.23.18.01.09;	author dcoppa;	state Exp;
branches;
next	1.12;
commitid	AasrIjjpfxr6UqVY;

1.12
date	2015.01.20.11.41.32;	author dcoppa;	state Exp;
branches;
next	1.11;
commitid	dOH6y5sUpeBAsMFC;

1.11
date	2015.01.13.08.22.48;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	BxokaRxycfspBSAJ;

1.10
date	2014.09.11.10.24.38;	author dcoppa;	state dead;
branches;
next	1.9;
commitid	m0ESeGbhnaGm45G1;

1.9
date	2014.01.15.19.54.37;	author dcoppa;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.14.13.02.51;	author zhuk;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.06.12.47.06;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2013.04.22.13.13.56;	author zhuk;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.07.07.06.20;	author dcoppa;	state dead;
branches;
next	1.4;

1.4
date	2012.01.12.13.14.33;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.07.22.14.51;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.03.13.38.43;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.14.17.22.10;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.14
log
@
Update to CMake-3.7.0

Thanks to naddy@@ who ran a bulk build with it
@
text
@$OpenBSD: patch-Modules_FindRuby_cmake,v 1.13 2015/01/23 18:01:09 dcoppa Exp $
--- Modules/FindRuby.cmake.orig	Fri Nov 11 15:37:13 2016
+++ Modules/FindRuby.cmake	Fri Nov 25 22:31:45 2016
@@@@ -42,35 +42,53 @@@@
 # uncomment the following line to get debug output for this file
 # set(_RUBY_DEBUG_OUTPUT TRUE)
 
+set(MODRUBY_REV $ENV{MODRUBY_REV})
+
+if(MODRUBY_REV AND MODRUBY_REV MATCHES "^[0-9]+\\.[0-9]$")
+   string(REPLACE "." "" MODRUBY_REV_NO_DOTS ${MODRUBY_REV})
+   string(REPLACE "." ";" MODRUBY_REV_LIST ${MODRUBY_REV})
+   list(GET MODRUBY_REV_LIST 0 MODRUBY_REV_MAJOR)
+   list(GET MODRUBY_REV_LIST 1 MODRUBY_REV_MINOR)
+endif()
+
 # Determine the list of possible names of the ruby executable depending
 # on which version of ruby is required
-set(_RUBY_POSSIBLE_EXECUTABLE_NAMES ruby)
+set(_RUBY_POSSIBLE_EXECUTABLE_NAMES)
 
 # if 1.9 is required, don't look for ruby18 and ruby1.8, default to version 1.8
 if(DEFINED Ruby_FIND_VERSION_MAJOR AND DEFINED Ruby_FIND_VERSION_MINOR)
    set(Ruby_FIND_VERSION_SHORT_NODOT "${Ruby_FIND_VERSION_MAJOR}${RUBY_FIND_VERSION_MINOR}")
    # we can't construct that if only major version is given
    set(_RUBY_POSSIBLE_EXECUTABLE_NAMES
-       ruby${Ruby_FIND_VERSION_MAJOR}.${Ruby_FIND_VERSION_MINOR}
        ruby${Ruby_FIND_VERSION_MAJOR}${Ruby_FIND_VERSION_MINOR}
+       ruby${Ruby_FIND_VERSION_MAJOR}.${Ruby_FIND_VERSION_MINOR}
        ${_RUBY_POSSIBLE_EXECUTABLE_NAMES})
 else()
-   set(Ruby_FIND_VERSION_SHORT_NODOT "18")
+   if(MODRUBY_REV_NO_DOTS)
+      set(Ruby_FIND_VERSION_SHORT_NODOT "${MODRUBY_REV_NO_DOTS}")
+   else(MODRUBY_REV_NO_DOTS)
+      set(Ruby_FIND_VERSION_SHORT_NODOT "18")
+   endif(MODRUBY_REV_NO_DOTS)
 endif()
 
 if(NOT Ruby_FIND_VERSION_EXACT)
-  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby2.1 ruby21)
-  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby2.0 ruby20)
-  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby1.9 ruby19)
+  if(MODRUBY_REV AND MODRUBY_REV_NO_DOTS)
+    list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby${MODRUBY_REV_NO_DOTS} ruby${MODRUBY_REV})
+  endif()
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby22 ruby2.2)
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby21 ruby2.1)
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby20 ruby2.0)
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby19 ruby1.9)
 
   # if we want a version below 1.9, also look for ruby 1.8
   if("${Ruby_FIND_VERSION_SHORT_NODOT}" VERSION_LESS "19")
-    list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby1.8 ruby18)
+    list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby18 ruby1.8)
   endif()
-
-  list(REMOVE_DUPLICATES _RUBY_POSSIBLE_EXECUTABLE_NAMES)
 endif()
 
+list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby)
+list(REMOVE_DUPLICATES _RUBY_POSSIBLE_EXECUTABLE_NAMES)
+
 find_program(RUBY_EXECUTABLE NAMES ${_RUBY_POSSIBLE_EXECUTABLE_NAMES})
 
 if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
@@@@ -155,6 +173,10 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
    set(RUBY_VERSION_MAJOR 1)
    set(RUBY_VERSION_MINOR 8)
    set(RUBY_VERSION_PATCH 0)
+   if(${RUBY_EXECUTABLE} MATCHES "ruby${MODRUBY_REV_NO_DOTS}")
+      set(RUBY_VERSION_MAJOR ${MODRUBY_REV_MAJOR})
+      set(RUBY_VERSION_MINOR ${MODRUBY_REV_MINOR})
+   endif()
    # check whether we found 1.9.x
    if(${RUBY_EXECUTABLE} MATCHES "ruby1.?9")
       set(RUBY_VERSION_MAJOR 1)
@@@@ -170,6 +192,11 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
       set(RUBY_VERSION_MAJOR 2)
       set(RUBY_VERSION_MINOR 1)
    endif()
+   # check whether we found 2.2.x
+   if(${RUBY_EXECUTABLE} MATCHES "ruby2.?2")
+      set(RUBY_VERSION_MAJOR 2)
+      set(RUBY_VERSION_MINOR 2)
+   endif()
 endif()
 
 if(RUBY_VERSION_MAJOR)
@@@@ -203,7 +230,7 @@@@ endif()
 
 
 # Determine the list of possible names for the ruby library
-set(_RUBY_POSSIBLE_LIB_NAMES ruby ruby-static ruby${_RUBY_VERSION_SHORT} ruby${_RUBY_VERSION_SHORT_NODOT} ruby-${_RUBY_VERSION_SHORT} ruby-${RUBY_VERSION})
+set(_RUBY_POSSIBLE_LIB_NAMES ruby${_RUBY_VERSION_SHORT_NODOT} ruby${_RUBY_VERSION_SHORT} ruby-${_RUBY_VERSION_SHORT} ruby-${RUBY_VERSION} ruby ruby-static)
 
 if(WIN32)
    set( _RUBY_MSVC_RUNTIME "" )
@


1.13
log
@
Maintenance update to cmake-3.1.1
@
text
@d1 4
a4 4
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.12 2015/01/20 11:41:32 dcoppa Exp $
--- Modules/FindRuby.cmake.orig	Wed Jan 21 08:10:26 2015
+++ Modules/FindRuby.cmake	Fri Jan 23 11:10:10 2015
@@@@ -53,35 +53,53 @@@@
d67 1
a67 1
@@@@ -166,6 +184,10 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
d78 1
a78 1
@@@@ -181,6 +203,11 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
d90 1
a90 1
@@@@ -214,7 +241,7 @@@@ endif()
@


1.12
log
@
Fetch the right version of ruby from MODRUBY_REV automagically
@
text
@d1 3
a3 37
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.11 2015/01/13 08:22:48 dcoppa Exp $

commit dd5d2eb156b7e45ded53f694a12a1e00d19f6cd6
Author: David Coppa <dcoppa@@gmail.com>
Date:   Mon Jan 12 19:28:02 2015 +0100

FindRuby: fix selection of version x.0 (#15345)

When "Ruby_FIND_VERSION_MINOR" is 0, the "if(Ruby_FIND_VERSION_MAJOR AND
Ruby_FIND_VERSION_MINOR)" check evaluated to false.

commit 802d0aa0b0a0af72fdc95bf1f69afeb362b6ef95
Author: Evangelos Foutras <evangelos@@foutrelis.com>
Date:   Mon Dec 29 19:02:04 2014 +0200

FindRuby: Fix output check in _RUBY_CONFIG_VAR

Since commit v2.8.8~173^2 (FindRuby: clean up querying variables from
Ruby, 2012-02-17) we query RbConfig::CONFIG first and, if the command
fails or its output equates to a false constant, then fall back to
querying Config::CONFIG.

Due to the above, an error condition exists with Ruby 2.2.0; when
querying RbConfig::CONFIG['TEENY'], the output of '0' will be discarded
since it matches the false constant '0'.

In previous versions this wasn't a problem, but Ruby 2.2 has completely
removed Config::CONFIG. This causes RUBY_VERSION_PATCH to be set to an
empty string and the Ruby version to be detected as '2.2.' (instead of
'2.2.0').

Fix the output check to explicitly look for an empty string before using
the fallback query method. (Someone more familiar with Ruby might be
able to deem the fallback as unnecessary and fully remove it.)

--- Modules/FindRuby.cmake.orig	Mon Dec 15 14:07:43 2014
+++ Modules/FindRuby.cmake	Tue Jan 20 04:36:32 2015
d23 1
a23 2
-if(Ruby_FIND_VERSION_MAJOR  AND  Ruby_FIND_VERSION_MINOR)
+if(DEFINED Ruby_FIND_VERSION_MAJOR AND DEFINED Ruby_FIND_VERSION_MINOR)
a66 9
@@@@ -90,7 +108,7 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
       RESULT_VARIABLE _RUBY_SUCCESS
       OUTPUT_VARIABLE _RUBY_OUTPUT
       ERROR_QUIET)
-    if(_RUBY_SUCCESS OR NOT _RUBY_OUTPUT)
+    if(_RUBY_SUCCESS OR _RUBY_OUTPUT STREQUAL "")
       execute_process(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['${RBVAR}']"
         RESULT_VARIABLE _RUBY_SUCCESS
         OUTPUT_VARIABLE _RUBY_OUTPUT
@


1.11
log
@
FindRuby.cmake: fix selection of version x.0
FindRuby.cmake: properly detect Ruby 2.2.0
@
text
@d1 1
a1 1
$OpenBSD$
d37 4
a40 2
+++ Modules/FindRuby.cmake	Tue Jan 13 01:56:31 2015
@@@@ -55,33 +55,35 @@@@
d42 9
d67 6
a72 1
    set(Ruby_FIND_VERSION_SHORT_NODOT "18")
d79 3
d102 1
a102 1
@@@@ -90,7 +92,7 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d111 12
a122 1
@@@@ -181,6 +183,11 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
d134 1
a134 1
@@@@ -214,7 +221,7 @@@@ endif()
@


1.10
log
@
Update to cmake-3.0.1

Tested in a bulk build by landry@@
OK landry@@
@
text
@d1 38
a38 14
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.9 2014/01/15 19:54:37 dcoppa Exp $
Add support for rubyarchhdrdir and rubyarchlibdir, with fallback to "defaults"
on systems that have such directories but RbConfig doesn't have such options.
--- Modules/FindRuby.cmake.orig	Tue Nov  5 20:07:22 2013
+++ Modules/FindRuby.cmake	Tue Jan 14 09:25:56 2014
@@@@ -1,6 +1,6 @@@@
 # - Find Ruby
 # This module finds if Ruby is installed and determines where the include files
-# and libraries are. Ruby 1.8 and 1.9 are supported.
+# and libraries are. Ruby 1.8, 1.9, 2.0 and 2.1 are supported.
 #
 # The minimum required version of Ruby can be specified using the
 # standard syntax, e.g. find_package(Ruby 1.8)
@@@@ -41,9 +41,9 @@@@
d45 3
a47 3
-# if 1.9 is required, don't look for ruby18 and ruby1.8, default to version 1.8
+# Check if exact version is required, default to version 1.8
 if(Ruby_FIND_VERSION_MAJOR  AND  Ruby_FIND_VERSION_MINOR)
d50 7
a56 1
@@@@ -56,16 +56,17 @@@@ else()
d60 2
d63 4
a66 1
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby2.1 ruby21 ruby2.0 ruby20 ruby1.9 ruby19)
d70 2
a71 1
     list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby1.8 ruby18)
d82 20
d103 2
a104 76
@@@@ -101,6 +102,16 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
    _RUBY_CONFIG_VAR("sitearchdir" RUBY_SITEARCH_DIR)
    _RUBY_CONFIG_VAR("sitelibdir" RUBY_SITELIB_DIR)
 
+   # not implemented in <2.0 but sometimes used
+   _RUBY_CONFIG_VAR("rubyarchhdrdir" RUBY_ARCHHDR_DIR)
+   if(NOT RUBY_ARCHHDR_DIR)
+      set(RUBY_ARCHHDR_DIR ${RUBY_HDR_DIR}/${RUBY_ARCH})
+   endif(NOT RUBY_ARCHHDR_DIR)
+   _RUBY_CONFIG_VAR("rubyarchlibdir" RUBY_ARCHLIB_DIR)
+   if(NOT RUBY_ARCHLIB_DIR)
+      set(RUBY_ARCHLIB_DIR ${RUBY_LIB_DIR}/${RUBY_ARCH})
+   endif(NOT RUBY_ARCHLIB_DIR)
+
    # vendor_ruby available ?
    execute_process(COMMAND ${RUBY_EXECUTABLE} -r vendor-specific -e "print 'true'"
       OUTPUT_VARIABLE RUBY_HAS_VENDOR_RUBY  ERROR_QUIET)
@@@@ -115,12 +126,14 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
    set(RUBY_VERSION_MINOR    ${RUBY_VERSION_MINOR}    CACHE PATH "The Ruby minor version" FORCE)
    set(RUBY_VERSION_PATCH    ${RUBY_VERSION_PATCH}    CACHE PATH "The Ruby patch version" FORCE)
    set(RUBY_ARCH_DIR         ${RUBY_ARCH_DIR}         CACHE PATH "The Ruby arch dir" FORCE)
-   set(RUBY_HDR_DIR          ${RUBY_HDR_DIR}          CACHE PATH "The Ruby header dir (1.9)" FORCE)
+   set(RUBY_HDR_DIR          ${RUBY_HDR_DIR}          CACHE PATH "The Ruby header dir (1.9+)" FORCE)
    set(RUBY_POSSIBLE_LIB_DIR ${RUBY_POSSIBLE_LIB_DIR} CACHE PATH "The Ruby lib dir" FORCE)
    set(RUBY_RUBY_LIB_DIR     ${RUBY_RUBY_LIB_DIR}     CACHE PATH "The Ruby ruby-lib dir" FORCE)
    set(RUBY_SITEARCH_DIR     ${RUBY_SITEARCH_DIR}     CACHE PATH "The Ruby site arch dir" FORCE)
    set(RUBY_SITELIB_DIR      ${RUBY_SITELIB_DIR}      CACHE PATH "The Ruby site lib dir" FORCE)
    set(RUBY_HAS_VENDOR_RUBY  ${RUBY_HAS_VENDOR_RUBY}  CACHE BOOL "Vendor Ruby is available" FORCE)
+   set(RUBY_ARCHHDR_DIR      ${RUBY_ARCHHDR_DIR}      CACHE PATH "The Ruby arch-specific header dir (1.9+)" FORCE)
+   set(RUBY_ARCHLIB_DIR      ${RUBY_ARCHLIBDIR}       CACHE PATH "The Ruby arch-specific lib dir (1.9+)" FORCE)
    set(RUBY_VENDORARCH_DIR   ${RUBY_VENDORARCH_DIR}   CACHE PATH "The Ruby vendor arch dir" FORCE)
    set(RUBY_VENDORLIB_DIR    ${RUBY_VENDORLIB_DIR}    CACHE PATH "The Ruby vendor lib dir" FORCE)
 
@@@@ -133,6 +146,8 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
      RUBY_SITEARCH_DIR
      RUBY_SITELIB_DIR
      RUBY_HAS_VENDOR_RUBY
+     RUBY_ARCHHDR_DIR
+     RUBY_ARCHLIB_DIR
      RUBY_VENDORARCH_DIR
      RUBY_VENDORLIB_DIR
      RUBY_VERSION_MAJOR
@@@@ -148,8 +163,14 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
    set(RUBY_VERSION_MAJOR 1)
    set(RUBY_VERSION_MINOR 8)
    set(RUBY_VERSION_PATCH 0)
-   # check whether we found 1.9.x
-   if(${RUBY_EXECUTABLE} MATCHES "ruby1.?9"  OR  RUBY_HDR_DIR)
+   # check whether we found 2.1.x, 2.0.x, or 1.9.x
+   if(${RUBY_EXECUTABLE} MATCHES "ruby2\\.?1")
+      set(RUBY_VERSION_MAJOR 2)
+      set(RUBY_VERSION_MINOR 1)
+   elseif(${RUBY_EXECUTABLE} MATCHES "ruby2\\.?0")
+      set(RUBY_VERSION_MAJOR 2)
+      set(RUBY_VERSION_MINOR 0)
+   elseif(${RUBY_EXECUTABLE} MATCHES "ruby1\\.?9")
       set(RUBY_VERSION_MAJOR 1)
       set(RUBY_VERSION_MINOR 9)
    endif()
@@@@ -166,6 +187,7 @@@@ find_path(RUBY_INCLUDE_DIR
    NAMES ruby.h
    HINTS
    ${RUBY_HDR_DIR}
+   ${RUBY_ARCHHDR_DIR}
    ${RUBY_ARCH_DIR}
    /usr/lib/ruby/${_RUBY_VERSION_SHORT}/i586-linux-gnu/ )
 
@@@@ -176,6 +198,7 @@@@ if( "${Ruby_FIND_VERSION_SHORT_NODOT}" GREATER 18  OR 
    find_path(RUBY_CONFIG_INCLUDE_DIR
      NAMES ruby/config.h  config.h
      HINTS
+     ${RUBY_ARCHHDR_DIR}
      ${RUBY_HDR_DIR}/${RUBY_ARCH}
      ${RUBY_ARCH_DIR}
      )
@@@@ -185,7 +208,14 @@@@ endif()
d109 1
a109 8
+set(_RUBY_POSSIBLE_LIB_NAMES
+  ruby-${RUBY_VERSION}
+  ruby-${_RUBY_VERSION_SHORT}
+  ruby${_RUBY_VERSION_SHORT}
+  ruby${_RUBY_VERSION_SHORT_NODOT}
+  ruby
+  ruby-static
+  )
@


1.9
log
@Teach FindRuby.cmake about the recently imported Ruby 2.1

ok zhuk@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.8 2013/10/14 13:02:51 zhuk Exp $
@


1.8
log
@Improve FindRuby.cmake and add support for Ruby 2.0.
input from and okay dcoppa@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.7 2013/06/06 12:47:06 dcoppa Exp $
d4 2
a5 2
--- Modules/FindRuby.cmake.orig	Mon Oct  7 19:31:00 2013
+++ Modules/FindRuby.cmake	Mon Oct 14 16:07:54 2013
d10 1
a10 1
+# and libraries are. Ruby 1.8, 1.9 and 2.0 are supported.
d31 1
a31 1
+  list(APPEND _RUBY_POSSIBLE_EXECUTABLE_NAMES ruby2.0 ruby20 ruby1.9 ruby19)
d89 2
a90 1
@@@@ -149,7 +164,10 @@@@ if(RUBY_EXECUTABLE AND NOT RUBY_VERSION_MAJOR)
d93 1
a93 1
    # check whether we found 1.9.x
d95 5
a99 1
+   if(${RUBY_EXECUTABLE} MATCHES "ruby2\\.?0")
d106 1
a106 1
@@@@ -166,6 +184,7 @@@@ find_path(RUBY_INCLUDE_DIR
d114 1
a114 1
@@@@ -176,6 +195,7 @@@@ if( "${Ruby_FIND_VERSION_SHORT_NODOT}" GREATER 18  OR 
d122 1
a122 1
@@@@ -185,7 +205,14 @@@@ endif()
@


1.7
log
@Update to cmake-2.8.11.

Tested in a bulk build by landry@@
Tested with KDE4 by zhuk@@
OK zhuk@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.6 2013/04/22 13:13:56 zhuk Exp $
d4 44
a47 3
--- Modules/FindRuby.cmake.orig	Wed May 15 19:38:12 2013
+++ Modules/FindRuby.cmake	Tue May 28 20:02:18 2013
@@@@ -101,6 +101,16 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d64 8
a71 1
@@@@ -121,6 +131,8 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d80 1
a80 1
@@@@ -133,6 +145,8 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d89 13
a101 1
@@@@ -166,6 +180,7 @@@@ find_path(RUBY_INCLUDE_DIR
d109 1
a109 1
@@@@ -176,6 +191,7 @@@@ if( "${Ruby_FIND_VERSION_SHORT_NODOT}" GREATER 18  OR 
d117 16
@


1.6
log
@Add support for rubyarchhdrdir and rubyarchlibdir, with fallback to "defaults"
on systems that have such directories but RbConfig doesn't have such options.

Needed for some minor KDE SC parts.

ok dcoppa@@
@
text
@d1 1
a1 1
$OpenBSD$
d4 3
a6 3
--- Modules/FindRuby.cmake.orig	Sun Feb 10 13:39:18 2013
+++ Modules/FindRuby.cmake	Sun Feb 10 14:15:07 2013
@@@@ -92,6 +92,16 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d23 1
a23 1
@@@@ -112,6 +122,8 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d32 1
a32 1
@@@@ -124,6 +136,8 @@@@ if(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
d41 1
a41 1
@@@@ -157,6 +171,7 @@@@ find_path(RUBY_INCLUDE_DIR
d49 1
a49 1
@@@@ -167,6 +182,7 @@@@ if( "${Ruby_FIND_VERSION_SHORT_NODOT}" GREATER 18  OR 
@


1.5
log
@Update to cmake-2.8.8

OK sthen@@
@
text
@d1 19
a19 64
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.4 2012/01/12 13:14:33 dcoppa Exp $

Use 'RbConfig::CONFIG' instead of deprecated 'Config::CONFIG'

Fix usage of RUBY_VERSION_MAJOR
(upstream git commit 93c55ec1421a2cf43dbcaf9afd0528c8dda42de5)

Add more possible library names
(upstream git commit 3db2c8b9eafe4cc1d3a6e9d1f3bfc90764544d01)

Add more debug output
(upstream git commit a9bca052f8ff013d8f47cf365495d2c8d0a2e70f)

--- Modules/FindRuby.cmake.orig	Fri Dec 30 17:49:56 2011
+++ Modules/FindRuby.cmake	Thu Jan 12 13:29:30 2012
@@@@ -60,38 +60,38 @@@@ ENDIF("${Ruby_FIND_VERSION_SHORT_NODOT}" VERSION_LESS 
 FIND_PROGRAM(RUBY_EXECUTABLE NAMES ${_RUBY_POSSIBLE_EXECUTABLE_NAMES})
 
 
-IF(RUBY_EXECUTABLE  AND NOT  RUBY_MAJOR_VERSION)
+IF(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
   # query the ruby version
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['MAJOR']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['MAJOR']"
       OUTPUT_VARIABLE RUBY_VERSION_MAJOR)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['MINOR']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['MINOR']"
       OUTPUT_VARIABLE RUBY_VERSION_MINOR)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['TEENY']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['TEENY']"
       OUTPUT_VARIABLE RUBY_VERSION_PATCH)
 
    # query the different directories
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['archdir']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['archdir']"
       OUTPUT_VARIABLE RUBY_ARCH_DIR)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['arch']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['arch']"
       OUTPUT_VARIABLE RUBY_ARCH)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['rubyhdrdir']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['rubyhdrdir']"
       OUTPUT_VARIABLE RUBY_HDR_DIR)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['libdir']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['libdir']"
       OUTPUT_VARIABLE RUBY_POSSIBLE_LIB_DIR)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['rubylibdir']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['rubylibdir']"
       OUTPUT_VARIABLE RUBY_RUBY_LIB_DIR)
 
    # site_ruby
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['sitearchdir']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['sitearchdir']"
       OUTPUT_VARIABLE RUBY_SITEARCH_DIR)
 
-   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['sitelibdir']"
+   EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['sitelibdir']"
       OUTPUT_VARIABLE RUBY_SITELIB_DIR)
 
d21 1
a21 1
@@@@ -99,10 +99,10 @@@@ IF(RUBY_EXECUTABLE  AND NOT  RUBY_MAJOR_VERSION)
d23 33
a55 14
 
    IF(RUBY_HAS_VENDOR_RUBY)
-      EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['vendorlibdir']"
+      EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['vendorlibdir']"
          OUTPUT_VARIABLE RUBY_VENDORLIB_DIR)
 
-      EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print Config::CONFIG['vendorarchdir']"
+      EXECUTE_PROCESS(COMMAND ${RUBY_EXECUTABLE} -r rbconfig -e "print RbConfig::CONFIG['vendorarchdir']"
          OUTPUT_VARIABLE RUBY_VENDORARCH_DIR)
    ENDIF(RUBY_HAS_VENDOR_RUBY)
 
@@@@ -135,7 +135,7 @@@@ IF(RUBY_EXECUTABLE  AND NOT  RUBY_MAJOR_VERSION)
      RUBY_VERSION_MINOR
      RUBY_VERSION_PATCH
a56 25
-ENDIF(RUBY_EXECUTABLE  AND NOT  RUBY_MAJOR_VERSION)
+ENDIF(RUBY_EXECUTABLE  AND NOT  RUBY_VERSION_MAJOR)
 
 # In case RUBY_EXECUTABLE could not be executed (e.g. cross compiling)
 # try to detect which version we found. This is not too good.
@@@@ -180,7 +180,7 @@@@ ENDIF( ${Ruby_FIND_VERSION_SHORT_NODOT} GREATER 18  OR
 
 
 # Determine the list of possible names for the ruby library
-SET(_RUBY_POSSIBLE_LIB_NAMES ruby ruby-static ruby${_RUBY_VERSION_SHORT} ruby${_RUBY_VERSION_SHORT_NODOT})
+SET(_RUBY_POSSIBLE_LIB_NAMES ruby ruby-static ruby${_RUBY_VERSION_SHORT} ruby${_RUBY_VERSION_SHORT_NODOT} ruby-${_RUBY_VERSION_SHORT} ruby-${RUBY_VERSION})
 
 IF(WIN32)
    SET( _RUBY_MSVC_RUNTIME "" )
@@@@ -224,6 +224,10 @@@@ IF(_RUBY_DEBUG_OUTPUT)
    MESSAGE(STATUS "RUBY_POSSIBLE_LIB_DIR: ${RUBY_POSSIBLE_LIB_DIR}")
    MESSAGE(STATUS "Found RUBY_VERSION: \"${RUBY_VERSION}\" , short: \"${_RUBY_VERSION_SHORT}\", nodot: \"${_RUBY_VERSION_SHORT_NODOT}\"")
    MESSAGE(STATUS "_RUBY_REQUIRED_VARS: ${_RUBY_REQUIRED_VARS}")
+   MESSAGE(STATUS "RUBY_EXECUTABLE: ${RUBY_EXECUTABLE}")
+   MESSAGE(STATUS "RUBY_LIBRARY: ${RUBY_LIBRARY}")
+   MESSAGE(STATUS "RUBY_INCLUDE_DIR: ${RUBY_INCLUDE_DIR}")
+   MESSAGE(STATUS "RUBY_CONFIG_INCLUDE_DIR: ${RUBY_CONFIG_INCLUDE_DIR}")
    MESSAGE(STATUS "--------------------")
 ENDIF(_RUBY_DEBUG_OUTPUT)
 
@


1.4
log
@Some fixes from upstream git:

fixes for Modules/FindRuby.cmake

fix wrong use of IS_ABSOLUTE into Modules/GenerateExportHeader.cmake

fix Source/cmLocalUnixMakefileGenerator3.cxx: exit the loop when
we have determined the language
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.3 2012/01/07 22:14:51 dcoppa Exp $
@


1.3
log
@Update to cmake-2.8.7.

Tested in a bulk build by naddy@@
@
text
@d1 17
a17 4
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.2 2011/12/03 13:38:43 dcoppa Exp $
--- Modules/FindRuby.cmake.orig	Tue Oct  4 18:09:24 2011
+++ Modules/FindRuby.cmake	Sat Dec  3 14:16:36 2011
@@@@ -62,36 +62,36 @@@@ FIND_PROGRAM(RUBY_EXECUTABLE NAMES ${_RUBY_POSSIBLE_EX
d19 3
a21 1
 IF(RUBY_EXECUTABLE  AND NOT  RUBY_MAJOR_VERSION)
d78 29
@


1.2
log
@FindRuby.cmake: use RbConfig::CONFIG instead of obsolete and
deprecated Config::CONFIG.

pointed out by Amit Kulkarni and jeremy@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_FindRuby_cmake,v 1.1 2011/10/14 17:22:10 dcoppa Exp $
a3 17
@@@@ -30,11 +30,11 @@@@
 # (To distribute this file outside of CMake, substitute the full
 #  License text for the above reference.)
 
-#   RUBY_ARCHDIR=`$RUBY -r rbconfig -e 'printf("%s",Config::CONFIG@@<:@@"archdir"@@:>@@)'`
-#   RUBY_SITEARCHDIR=`$RUBY -r rbconfig -e 'printf("%s",Config::CONFIG@@<:@@"sitearchdir"@@:>@@)'`
-#   RUBY_SITEDIR=`$RUBY -r rbconfig -e 'printf("%s",Config::CONFIG@@<:@@"sitelibdir"@@:>@@)'`
-#   RUBY_LIBDIR=`$RUBY -r rbconfig -e 'printf("%s",Config::CONFIG@@<:@@"libdir"@@:>@@)'`
-#   RUBY_LIBRUBYARG=`$RUBY -r rbconfig -e 'printf("%s",Config::CONFIG@@<:@@"LIBRUBYARG_SHARED"@@:>@@)'`
+#   RUBY_ARCHDIR=`$RUBY -r rbconfig -e 'printf("%s",RbConfig::CONFIG@@<:@@"archdir"@@:>@@)'`
+#   RUBY_SITEARCHDIR=`$RUBY -r rbconfig -e 'printf("%s",RbConfig::CONFIG@@<:@@"sitearchdir"@@:>@@)'`
+#   RUBY_SITEDIR=`$RUBY -r rbconfig -e 'printf("%s",RbConfig::CONFIG@@<:@@"sitelibdir"@@:>@@)'`
+#   RUBY_LIBDIR=`$RUBY -r rbconfig -e 'printf("%s",RbConfig::CONFIG@@<:@@"libdir"@@:>@@)'`
+#   RUBY_LIBRUBYARG=`$RUBY -r rbconfig -e 'printf("%s",RbConfig::CONFIG@@<:@@"LIBRUBYARG_SHARED"@@:>@@)'`
 
 # uncomment the following line to get debug output for this file
 # SET(_RUBY_DEBUG_OUTPUT TRUE)
a63 9
@@@@ -180,7 +180,7 @@@@ ENDIF( ${Ruby_FIND_VERSION_SHORT_NODOT} GREATER 18  OR
 
 
 # Determine the list of possible names for the ruby library
-SET(_RUBY_POSSIBLE_LIB_NAMES ruby ruby-static ruby${_RUBY_VERSION_SHORT})
+SET(_RUBY_POSSIBLE_LIB_NAMES ruby ruby-static ruby${_RUBY_VERSION_SHORT} ruby${_RUBY_VERSION_SHORT_NODOT})
 
 IF(WIN32)
    SET( _RUBY_MSVC_RUNTIME "" )
@


1.1
log
@Update to cmake-2.8.6

Fixed FindRuby.cmake module (from Vadim Zhukov)

Fixed FindJava.cmake and FindJNI.cmake modules when cmake is used
outside of our ports tree (problem reported and fix tested by
pirofti@@)

Still "100% tests passed, 0 tests failed out of 197".

No fallout in a bulk build.

OK jasper@@
@
text
@d1 80
a80 3
$OpenBSD$
--- Modules/FindRuby.cmake.orig	Sun Oct  9 18:41:47 2011
+++ Modules/FindRuby.cmake	Sun Oct  9 18:42:49 2011
@

