head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@# @;


1.11
date	2016.11.28.09.15.13;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	jOocuc05F30hpQ6W;

1.10
date	2015.03.26.07.10.02;	author dcoppa;	state Exp;
branches;
next	1.9;
commitid	RC163bs6emik8Gf9;

1.9
date	2014.09.11.10.24.38;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	m0ESeGbhnaGm45G1;

1.8
date	2012.11.11.17.13.32;	author dcoppa;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.13.18.23.02;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.22.22.27.02;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.22.16.26.30;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.19.16.18.12;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.19.11.10.35;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.12.19.19.30;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.05.28.20.21.48;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.11
log
@
Update to CMake-3.7.0

Thanks to naddy@@ who ran a bulk build with it
@
text
@$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.10 2015/03/26 07:10:02 dcoppa Exp $
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Fri Nov 11 15:37:13 2016
+++ Modules/Qt4ConfigDependentSettings.cmake	Fri Nov 25 22:31:45 2016
@@@@ -21,6 +21,10 @@@@
 # if a user needs the dependencies, and they couldn't be found, they can set
 # the variables themselves.
 
+include(FindIconv)
+include(FindIntl)
+include(FindLCMS)
+
 set(QT_QTGUI_LIB_DEPENDENCIES "")
 set(QT_QTCORE_LIB_DEPENDENCIES "")
 set(QT_QTNETWORK_LIB_DEPENDENCIES "")
@@@@ -55,10 +59,6 @@@@ if(Q_WS_WIN  AND  NOT QT_IS_STATIC)
   set(QT_DEFINITIONS ${QT_DEFINITIONS} -DQT_DLL)
 endif()
 
-if(NOT QT_IS_STATIC)
-  return()
-endif()
-
 # QtOpenGL dependencies
 find_package(OpenGL)
 set (QT_QTOPENGL_LIB_DEPENDENCIES ${OPENGL_glu_LIBRARY} ${OPENGL_gl_LIBRARY})
@@@@ -88,6 +88,15 @@@@ if(QT_QCONFIG MATCHES "system-mng")
   set(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${MNG_LIBRARY})
 endif()
 
+## system lcms
+if(LCMS_FOUND)
+  find_library(LCMS_LIBRARY NAMES lcms)
+  mark_as_advanced(LCMS_LIBRARY)
+  if(LCMS_LIBRARY)
+    set(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${LCMS_LIBRARY})
+  endif(LCMS_LIBRARY)
+endif(LCMS_FOUND)
+
 # for X11, get X11 library directory
 if(Q_WS_X11)
   find_package(X11)
@@@@ -175,6 +184,23 @@@@ if(QT_QCONFIG MATCHES "system-zlib")
   set(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${ZLIB_LIBRARIES})
 endif()
 
+## iconv
+if(ICONV_FOUND)
+  find_library(QT_ICONV_LIBRARY NAMES iconv)
+  mark_as_advanced(QT_ICONV_LIBRARY)
+  if(QT_ICONV_LIBRARY)
+    set(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${QT_ICONV_LIBRARY})
+  endif(QT_ICONV_LIBRARY)
+endif(ICONV_FOUND)
+
+## libintl
+if(Intl_FOUND)
+  find_library(QT_INTL_LIBRARY NAMES intl)
+  mark_as_advanced(QT_INTL_LIBRARY)
+  if(QT_INTL_LIBRARY)
+    set(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${QT_INTL_LIBRARY})
+  endif(QT_INTL_LIBRARY)
+endif(Intl_FOUND)
 
 ## openssl
 if(NOT Q_WS_WIN)
@


1.10
log
@
Update to CMake-3.2.1

Tested in a bulk build by landry@@
OK landry@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.9 2014/09/11 10:24:38 dcoppa Exp $
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Tue Mar 10 09:38:44 2015
+++ Modules/Qt4ConfigDependentSettings.cmake	Wed Mar 18 07:12:09 2015
@@@@ -32,6 +32,10 @@@@
d15 1
a15 1
@@@@ -66,10 +70,6 @@@@ if(Q_WS_WIN  AND  NOT QT_IS_STATIC)
d26 1
a26 1
@@@@ -99,6 +99,15 @@@@ if(QT_QCONFIG MATCHES "system-mng")
d42 1
a42 1
@@@@ -186,6 +195,23 @@@@ if(QT_QCONFIG MATCHES "system-zlib")
@


1.9
log
@
Update to cmake-3.0.1

Tested in a bulk build by landry@@
OK landry@@
@
text
@d1 3
a3 3
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.8 2012/11/11 17:13:32 dcoppa Exp $
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Thu Jul 31 17:03:56 2014
+++ Modules/Qt4ConfigDependentSettings.cmake	Wed Sep  3 08:10:09 2014
d9 1
a9 1
+include(FindLibintl)
d56 1
a56 1
+if(LIBINTL_FOUND)
d62 1
a62 1
+endif(LIBINTL_FOUND)
@


1.8
log
@Update to cmake-2.8.10.
Successfully gone through a bulk build.

Feedback landry@@, Vadim Zhukov, Amit Kulkarni
Bulk build and OK landry@@
@
text
@d1 4
a4 4
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.7 2011/03/13 18:23:02 dcoppa Exp $
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Tue Feb 15 18:47:27 2011
+++ Modules/Qt4ConfigDependentSettings.cmake	Thu Mar 10 10:07:02 2011
@@@@ -26,6 +26,10 @@@@
d15 1
a15 1
@@@@ -60,10 +64,6 @@@@ if(Q_WS_WIN  AND  NOT QT_IS_STATIC)
d26 1
a26 1
@@@@ -93,6 +93,15 @@@@ if(QT_QCONFIG MATCHES "system-mng")
d42 1
a42 1
@@@@ -180,6 +189,23 @@@@ if(QT_QCONFIG MATCHES "system-zlib")
@


1.7
log
@Update to cmake-2.8.4.
Tested in a bulk build by landry@@.
Lot of feedback from various people on ports@@: thanks!

OK landry@@, sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.6 2010/11/22 22:27:02 dcoppa Exp $
d8 3
a10 3
+INCLUDE(FindIconv)
+INCLUDE(FindLibintl)
+INCLUDE(FindLCMS)
d12 6
a17 6
 SET(QT_QTGUI_LIB_DEPENDENCIES "")
 SET(QT_QTCORE_LIB_DEPENDENCIES "")
 SET(QT_QTNETWORK_LIB_DEPENDENCIES "")
@@@@ -60,10 +64,6 @@@@ IF(Q_WS_WIN  AND  NOT QT_IS_STATIC)
   SET(QT_DEFINITIONS ${QT_DEFINITIONS} -DQT_DLL)
 ENDIF(Q_WS_WIN  AND  NOT QT_IS_STATIC)
d19 3
a21 3
-IF(NOT QT_IS_STATIC)
-  RETURN()
-ENDIF(NOT QT_IS_STATIC)
d25 4
a28 4
 SET (QT_QTOPENGL_LIB_DEPENDENCIES ${OPENGL_glu_LIBRARY} ${OPENGL_gl_LIBRARY})
@@@@ -93,6 +93,15 @@@@ IF(QT_QCONFIG MATCHES "system-mng")
   SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${MNG_LIBRARY})
 ENDIF(QT_QCONFIG MATCHES "system-mng")
d31 7
a37 7
+IF(LCMS_FOUND)
+  FIND_LIBRARY(LCMS_LIBRARY NAMES lcms)
+  MARK_AS_ADVANCED(LCMS_LIBRARY)
+  IF(LCMS_LIBRARY)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${LCMS_LIBRARY})
+  ENDIF(LCMS_LIBRARY)
+ENDIF(LCMS_FOUND)
d40 5
a44 5
 IF(Q_WS_X11)
   FIND_PACKAGE(X11)
@@@@ -180,6 +189,23 @@@@ IF(QT_QCONFIG MATCHES "system-zlib")
   SET(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${ZLIB_LIBRARIES})
 ENDIF(QT_QCONFIG MATCHES "system-zlib")
d47 7
a53 7
+IF(ICONV_FOUND)
+  FIND_LIBRARY(QT_ICONV_LIBRARY NAMES iconv)
+  MARK_AS_ADVANCED(QT_ICONV_LIBRARY)
+  IF(QT_ICONV_LIBRARY)
+    SET(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${QT_ICONV_LIBRARY})
+  ENDIF(QT_ICONV_LIBRARY)
+ENDIF(ICONV_FOUND)
d56 7
a62 7
+IF(LIBINTL_FOUND)
+  FIND_LIBRARY(QT_INTL_LIBRARY NAMES intl)
+  MARK_AS_ADVANCED(QT_INTL_LIBRARY)
+  IF(QT_INTL_LIBRARY)
+    SET(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${QT_INTL_LIBRARY})
+  ENDIF(QT_INTL_LIBRARY)
+ENDIF(LIBINTL_FOUND)
d65 1
a65 1
 IF(NOT Q_WS_WIN)
@


1.6
log
@It's better having iconv and intl as QtCore dependencies.
This is my last commit for this, I promise.
@
text
@d1 4
a4 4
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.5 2010/11/22 16:26:30 dcoppa Exp $
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Wed Nov  3 20:58:27 2010
+++ Modules/Qt4ConfigDependentSettings.cmake	Mon Nov 22 18:21:59 2010
@@@@ -26,6 +26,9 @@@@
d10 1
d15 1
a15 1
@@@@ -60,10 +63,6 @@@@ IF(Q_WS_WIN  AND  NOT QT_IS_STATIC)
d26 17
a42 1
@@@@ -163,6 +162,23 @@@@ IF(QT_QCONFIG MATCHES "system-zlib")
@


1.5
log
@Sync with KDE upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.4 2010/11/19 16:18:12 dcoppa Exp $
d3 1
a3 1
+++ Modules/Qt4ConfigDependentSettings.cmake	Fri Nov 19 17:14:55 2010
d14 1
a14 1
@@@@ -60,14 +63,27 @@@@ IF(Q_WS_WIN  AND  NOT QT_IS_STATIC)
d25 3
d34 1
a34 1
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_ICONV_LIBRARY})
d43 1
a43 1
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_INTL_LIBRARY})
d47 2
a48 2
 ## system png
 IF(QT_QCONFIG MATCHES "system-png")
@


1.4
log
@Just removing that check makes more sense. I'm a moron.
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.3 2010/11/19 11:10:35 dcoppa Exp $
d9 1
a9 1
+INCLUDE(FindLibIntl)
@


1.3
log
@Fix a bug that broke $QT_QT*_LIB_DEPENDENCIES since cmake-2.8.2.
Now port-lib-depends-check for geo/qgis is happy.

Problem noticed by, and OK landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.2 2010/07/12 19:19:30 dcoppa Exp $
d3 1
a3 1
+++ Modules/Qt4ConfigDependentSettings.cmake	Thu Nov 18 22:11:59 2010
d14 1
a14 1
@@@@ -60,14 +63,31 @@@@ IF(Q_WS_WIN  AND  NOT QT_IS_STATIC)
d19 1
a19 2
+IF(QT_IS_STATIC)
   RETURN()
d21 1
a21 2
+ENDIF(QT_IS_STATIC)
 
@


1.2
log
@Fix a bug with shared libraries having OUTPUT_NAME in their target
properties.

Update to cmake-2.8.2.

While here, move to new-style LIB_DEPENDS/WANTLIB.

OK espie@@, landry@@, sthen@@
@
text
@d1 3
a3 3
$OpenBSD: patch-Modules_Qt4ConfigDependentSettings_cmake,v 1.1 2010/05/28 20:21:48 dcoppa Exp $
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Mon Jun 28 17:15:57 2010
+++ Modules/Qt4ConfigDependentSettings.cmake	Mon Jul  5 11:23:18 2010
d14 11
a24 1
@@@@ -68,6 +71,23 @@@@ ENDIF(NOT QT_IS_STATIC)
@


1.1
log
@Update to cmake 2.8.1 (I also take maintainership).

"This is good, commit." espie@@
@
text
@d1 3
a3 3
$OpenBSD$
--- Modules/Qt4ConfigDependentSettings.cmake.orig	Tue Apr  6 16:45:32 2010
+++ Modules/Qt4ConfigDependentSettings.cmake	Tue May 11 09:19:48 2010
d14 3
a16 3
@@@@ -80,7 +83,24 @@@@ ELSE(Q_WS_MAC)
 ENDIF(Q_WS_MAC)
 SET (QT_QTOPENGL_LIB_DEPENDENCIES ${QT_QTOPENGL_LIB_DEPENDENCIES} ${QMAKE_LIBS_OPENGL})
d26 1
a26 1
 
d35 1
a35 1
+
a37 132
   FIND_LIBRARY(QT_PNG_LIBRARY NAMES png)
@@@@ -93,80 +113,63 @@@@ ENDIF(QT_QCONFIG MATCHES "system-png")
 
 # for X11, get X11 library directory
 IF(Q_WS_X11)
-  QT_QUERY_QMAKE(QMAKE_LIBDIR_X11 "QMAKE_LIBDIR_X11")
+  FIND_PACKAGE(X11)
 ENDIF(Q_WS_X11)
 
 
 ## X11 SM
 IF(QT_QCONFIG MATCHES "x11sm")
-  # ask qmake where the x11 libs are
-  FIND_LIBRARY(QT_X11_SM_LIBRARY NAMES SM PATHS ${QMAKE_LIBDIR_X11})
-  FIND_LIBRARY(QT_X11_ICE_LIBRARY NAMES ICE PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_X11_SM_LIBRARY)
-  MARK_AS_ADVANCED(QT_X11_ICE_LIBRARY)
-  IF(QT_X11_SM_LIBRARY AND QT_X11_ICE_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_X11_SM_LIBRARY} ${QT_X11_ICE_LIBRARY})
-  ENDIF(QT_X11_SM_LIBRARY AND QT_X11_ICE_LIBRARY)
+  IF(X11_SM_LIB AND X11_ICE_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_SM_LIB} ${X11_ICE_LIB})
+  ENDIF(X11_SM_LIB AND X11_ICE_LIB)
 ENDIF(QT_QCONFIG MATCHES "x11sm")
 
 
 ## Xi
 IF(QT_QCONFIG MATCHES "tablet")
-  FIND_LIBRARY(QT_XI_LIBRARY NAMES Xi PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_XI_LIBRARY)
-  IF(QT_XI_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_XI_LIBRARY})
-  ENDIF(QT_XI_LIBRARY)
+  IF(X11_Xi_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xi_LIB})
+  ENDIF(X11_Xi_LIB)
 ENDIF(QT_QCONFIG MATCHES "tablet")
 
 
 ## Xrender
 IF(QT_QCONFIG MATCHES "xrender")
-  FIND_LIBRARY(QT_XRENDER_LIBRARY NAMES Xrender PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_XRENDER_LIBRARY)
-  IF(QT_XRENDER_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_XRENDER_LIBRARY})
-  ENDIF(QT_XRENDER_LIBRARY)
+  IF(X11_Xrender_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xrender_LIB})
+  ENDIF(X11_Xrender_LIB)
 ENDIF(QT_QCONFIG MATCHES "xrender")
 
 
 ## Xrandr
 IF(QT_QCONFIG MATCHES "xrandr")
-  FIND_LIBRARY(QT_XRANDR_LIBRARY NAMES Xrandr PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_XRANDR_LIBRARY)
-  IF(QT_XRANDR_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_XRANDR_LIBRARY})
-  ENDIF(QT_XRANDR_LIBRARY)
+  IF(X11_Xrandr_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xrandr_LIB})
+  ENDIF(X11_Xrandr_LIB)
 ENDIF(QT_QCONFIG MATCHES "xrandr")
 
 
 ## Xcursor
 IF(QT_QCONFIG MATCHES "xcursor")
-  FIND_LIBRARY(QT_XCURSOR_LIBRARY NAMES Xcursor PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_XCURSOR_LIBRARY)
-  IF(QT_XCURSOR_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_XCURSOR_LIBRARY})
-  ENDIF(QT_XCURSOR_LIBRARY)
+  IF(X11_Xcursor_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xcursor_LIB})
+  ENDIF(X11_Xcursor_LIB)
 ENDIF(QT_QCONFIG MATCHES "xcursor")
 
 
 ## Xinerama
 IF(QT_QCONFIG MATCHES "xinerama")
-  FIND_LIBRARY(QT_XINERAMA_LIBRARY NAMES Xinerama PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_XINERAMA_LIBRARY)
-  IF(QT_XINERAMA_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_XINERAMA_LIBRARY})
-  ENDIF(QT_XINERAMA_LIBRARY)
+  IF(X11_Xinerama_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xinerama_LIB})
+  ENDIF(X11_Xinerama_LIB)
 ENDIF(QT_QCONFIG MATCHES "xinerama")
 
 
 ## Xfixes
 IF(QT_QCONFIG MATCHES "xfixes")
-  FIND_LIBRARY(QT_XFIXES_LIBRARY NAMES Xfixes PATHS ${QMAKE_LIBDIR_X11})
-  MARK_AS_ADVANCED(QT_XFIXES_LIBRARY)
-  IF(QT_XFIXES_LIBRARY)
-    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${QT_XFIXES_LIBRARY})
-  ENDIF(QT_XFIXES_LIBRARY)
+  IF(X11_Xfixes_LIB)
+    SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xfixes_LIB})
+  ENDIF(X11_Xfixes_LIB)
 ENDIF(QT_QCONFIG MATCHES "xfixes")
 
 
@@@@ -327,24 +330,13 @@@@ ENDIF(QT_QCONFIG MATCHES "clock-monotonic")
 
 
 IF(Q_WS_X11)
-  # X11 libraries Qt absolutely depends on
-  QT_QUERY_QMAKE(QT_LIBS_X11 "QMAKE_LIBS_X11")
-  SEPARATE_ARGUMENTS(QT_LIBS_X11)
-  FOREACH(QT_X11_LIB ${QT_LIBS_X11})
-    STRING(REGEX REPLACE "-l" "" QT_X11_LIB "${QT_X11_LIB}")
-    SET(QT_TMP_STR "QT_X11_${QT_X11_LIB}_LIBRARY")
-    FIND_LIBRARY(${QT_TMP_STR} NAMES "${QT_X11_LIB}" PATHS ${QMAKE_LIBDIR_X11})
-    MARK_AS_ADVANCED(${QT_TMP_STR})
-    IF(${QT_TMP_STR})
-      SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${${QT_TMP_STR}})
-    ENDIF(${QT_TMP_STR})
-  ENDFOREACH(QT_X11_LIB)
+  # X11 libraries Qt always depends on
+  SET(QT_QTGUI_LIB_DEPENDENCIES ${QT_QTGUI_LIB_DEPENDENCIES} ${X11_Xext_LIB} ${X11_X11_LIB})
 
   QT_QUERY_QMAKE(QT_LIBS_THREAD "QMAKE_LIBS_THREAD")
   SET(QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${QT_LIBS_THREAD})
 
-  QT_QUERY_QMAKE(QMAKE_LIBS_DYNLOAD "QMAKE_LIBS_DYNLOAD")
-  SET (QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${QMAKE_LIBS_DYNLOAD})
+  SET (QT_QTCORE_LIB_DEPENDENCIES ${QT_QTCORE_LIB_DEPENDENCIES} ${CMAKE_DL_LIBS})
 
 ENDIF(Q_WS_X11)
 
@

