head	1.4;
access;
symbols
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	kde:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.05.28.20.21.48;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2007.03.20.11.23.10;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.31.23.55.52;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.20.09.23.13;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.07.20.09.23.13;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to cmake 2.8.1 (I also take maintainership).

"This is good, commit." espie@@
@
text
@$OpenBSD: patch-Source_kwsys_CommandLineArguments_cxx,v 1.3 2007/03/20 11:23:10 espie Exp $
--- Source/kwsys/CommandLineArguments.cxx.orig	Wed Jan 10 18:59:15 2007
+++ Source/kwsys/CommandLineArguments.cxx	Sun Mar 18 13:52:03 2007
@@@@ -333,16 +333,18 @@@@ void CommandLineArguments::GetRemainingArguments(int* 
 
   // Copy Argv0 as the first argument
   char** args = new char*[ size ];
-  args[0] = new char[ this->Internals->Argv0.size() + 1 ];
-  strcpy(args[0], this->Internals->Argv0.c_str());
+  size_t sz = this->Internals->Argv0.size() + 1;
+  args[0] = new char[ sz ];
+  strlcpy(args[0], this->Internals->Argv0.c_str(), sz);
   int cnt = 1;
 
   // Copy everything after the LastArgument, since that was not parsed.
   for ( cc = this->Internals->LastArgument+1; 
     cc < this->Internals->Argv.size(); cc ++ )
     {
-    args[cnt] = new char[ this->Internals->Argv[cc].size() + 1];
-    strcpy(args[cnt], this->Internals->Argv[cc].c_str());
+    size_t sz2 = this->Internals->Argv[cc].size() + 1;
+    args[cnt] = new char[ sz2 ];
+    strlcpy(args[cnt], this->Internals->Argv[cc].c_str(), sz2);
     cnt ++;
     }
   *argc = cnt;
@@@@ -594,7 +596,7 @@@@ void CommandLineArguments::GenerateHelp()
 
   // Create format for that string
   char format[80];
-  sprintf(format, "  %%-%ds  ", static_cast<unsigned int>(maxlen));
+  snprintf(format, sizeof format, "  %%-%ds  ", static_cast<unsigned int>(maxlen));
 
   maxlen += 4; // For the space before and after the option
 
@


1.3
log
@find qmake4, not qmake...
regen other patches with new diff.
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_kwsys_CommandLineArguments_cxx,v 1.2 2006/07/31 23:55:52 espie Exp $
@


1.2
log
@update to 2.4.3
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_kwsys_CommandLineArguments_cxx,v 1.1.1.1 2006/07/20 09:23:13 espie Exp $
--- Source/kwsys/CommandLineArguments.cxx.orig	Mon Jul 31 16:49:59 2006
+++ Source/kwsys/CommandLineArguments.cxx	Tue Aug  1 00:32:19 2006
@@@@ -333,16 +333,18 @@@@ void CommandLineArguments::GetRemainingA
d27 1
a27 1
@@@@ -594,7 +596,7 @@@@ void CommandLineArguments::GenerateHelp(
@


1.1
log
@Initial revision
@
text
@d1 4
a4 16
$OpenBSD$
--- Source/kwsys/CommandLineArguments.cxx.orig	Wed May 17 15:48:54 2006
+++ Source/kwsys/CommandLineArguments.cxx	Mon Jul  3 12:47:07 2006
@@@@ -280,8 +280,9 @@@@ int CommandLineArguments::Parse()
             delete [] *variable;
             *variable = 0;
             }
-          *variable = new char[ strlen(var.c_str()) + 1 ];
-          strcpy(*variable, var.c_str());
+	  size_t sz = strlen(var.c_str()) + 1;
+          *variable = new char[ sz ];
+          strlcpy(*variable, var.c_str(), sz);
           }
         else if ( cs->VariableType == CommandLineArguments::STL_STRING_TYPE )
           {
@@@@ -342,16 +343,18 @@@@ void CommandLineArguments::GetRemainingA
d27 1
a27 1
@@@@ -593,7 +596,7 @@@@ void CommandLineArguments::GenerateHelp(
a35 22
@@@@ -607,16 +610,16 @@@@ void CommandLineArguments::GenerateHelp(
       {
       str << kwsys_ios::endl;
       char argument[100];
-      sprintf(argument, sit->c_str());
+      snprintf(argument, sizeof(argument), sit->c_str());
       switch ( this->Internals->Callbacks[*sit].ArgumentType )
         {
         case CommandLineArguments::NO_ARGUMENT: break;
-        case CommandLineArguments::CONCAT_ARGUMENT: strcat(argument, "opt"); break;
-        case CommandLineArguments::SPACE_ARGUMENT:  strcat(argument, " opt"); break;
-        case CommandLineArguments::EQUAL_ARGUMENT:  strcat(argument, "=opt"); break;
+        case CommandLineArguments::CONCAT_ARGUMENT: strlcat(argument, "opt", sizeof(argument)); break;
+        case CommandLineArguments::SPACE_ARGUMENT:  strlcat(argument, " opt", sizeof(argument)); break;
+        case CommandLineArguments::EQUAL_ARGUMENT:  strlcat(argument, "=opt", sizeof(argument)); break;
         }
       char buffer[80];
-      sprintf(buffer, format, argument);
+      snprintf(buffer, sizeof buffer, format, argument);
       str << buffer;
       }
     const char* ptr = this->Internals->Callbacks[mpit->first].Help;
@


1.1.1.1
log
@cmake, a `new' build system. Used by KDE4.

Easier to work with than autoconf/automake/libtool.
@
text
@@
