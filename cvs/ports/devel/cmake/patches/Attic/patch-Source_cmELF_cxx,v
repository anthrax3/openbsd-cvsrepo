head	1.4;
access;
symbols
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.12.31.11.06.02;	author dcoppa;	state dead;
branches;
next	1.3;
commitid	q283NDlM4qiVneVU;

1.3
date	2014.09.29.08.25.39;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	Rs6vJ0tO5v5EhITe;

1.2
date	2013.10.14.12.58.03;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2013.06.25.07.16.46;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.4
log
@
Update to cmake-3.1.0

Bulk build by landry@@
KDE-related fixes by zhuk@@
@
text
@$OpenBSD: patch-Source_cmELF_cxx,v 1.3 2014/09/29 08:25:39 dcoppa Exp $

commit 3022f2a1ef94b2c12df09b0ca420b6c2951888e2
Author: Rolf Eike Beer <eike@@sf-mail.de>
Date:   Mon Apr 14 18:13:19 2014 +0200

cmELF: fix signedness warning on OpenBSD

OpenBSD defines Elf64_Dyn::d_tag to be of an unsigned type, which differs from
what most other platforms do and what is the case for 32 bit. To have the tag
as unsigned makes sense, but this causes a compilation warning:

/.../CMake/Source/cmELF.cxx: In member function 'const cmELF::StringEntry* cmELFInternalImpl<Types>::GetDynamicSectionString(int) [with Types = cmELFTypes64]':
/.../CMake/Source/cmELF.cxx:945:   instantiated from here
/.../CMake/Source/cmELF.cxx:668: warning: comparison between signed and unsigned integer expressions

Add an explicit typedef to cast the value to for 32 and 64 bit. That type is
unsigned and has the proper length for both platforms so no information is
lost. Explicitely cast both arguments before comparing them to avoid the
warning in all situations.

--- Source/cmELF.cxx.orig	Thu Sep 11 15:24:01 2014
+++ Source/cmELF.cxx	Mon Sep 29 09:00:24 2014
@@@@ -104,7 +104,7 @@@@ class cmELFInternal (public)
   virtual unsigned int GetNumberOfSections() const = 0;
   virtual unsigned int GetDynamicEntryCount() = 0;
   virtual unsigned long GetDynamicEntryPosition(int j) = 0;
-  virtual StringEntry const* GetDynamicSectionString(int tag) = 0;
+  virtual StringEntry const* GetDynamicSectionString(unsigned int tag) = 0;
   virtual void PrintInfo(std::ostream& os) const = 0;
 
   bool ReadBytes(unsigned long pos, unsigned long size, char* buf)
@@@@ -167,7 +167,7 @@@@ class cmELFInternal (public)
     }
 
   // Store string table entry states.
-  std::map<int, StringEntry> DynamicSectionStrings;
+  std::map<unsigned int, StringEntry> DynamicSectionStrings;
 };
 
 //----------------------------------------------------------------------------
@@@@ -178,6 +178,7 @@@@ struct cmELFTypes32
   typedef Elf32_Shdr ELF_Shdr;
   typedef Elf32_Dyn  ELF_Dyn;
   typedef Elf32_Half ELF_Half;
+  typedef cmIML_INT_uint32_t tagtype;
   static const char* GetName() { return "32-bit"; }
 };
 
@@@@ -188,6 +189,7 @@@@ struct cmELFTypes64
   typedef Elf64_Shdr ELF_Shdr;
   typedef Elf64_Dyn  ELF_Dyn;
   typedef Elf64_Half ELF_Half;
+  typedef cmIML_INT_uint64_t tagtype;
   static const char* GetName() { return "64-bit"; }
 };
 
@@@@ -202,6 +204,7 @@@@ class cmELFInternalImpl: public cmELFInternal (public)
   typedef typename Types::ELF_Shdr ELF_Shdr;
   typedef typename Types::ELF_Dyn  ELF_Dyn;
   typedef typename Types::ELF_Half ELF_Half;
+  typedef typename Types::tagtype tagtype;
 
   // Construct with a stream and byte swap indicator.
   cmELFInternalImpl(cmELF* external,
@@@@ -219,7 +222,7 @@@@ class cmELFInternalImpl: public cmELFInternal (public)
   virtual unsigned long GetDynamicEntryPosition(int j);
 
   // Lookup a string from the dynamic section with the given tag.
-  virtual StringEntry const* GetDynamicSectionString(int tag);
+  virtual StringEntry const* GetDynamicSectionString(unsigned int tag);
 
   // Print information about the ELF file.
   virtual void PrintInfo(std::ostream& os) const
@@@@ -604,10 +607,10 @@@@ unsigned long cmELFInternalImpl<Types>::GetDynamicEntr
 //----------------------------------------------------------------------------
 template <class Types>
 cmELF::StringEntry const*
-cmELFInternalImpl<Types>::GetDynamicSectionString(int tag)
+cmELFInternalImpl<Types>::GetDynamicSectionString(unsigned int tag)
 {
   // Short-circuit if already checked.
-  std::map<int, StringEntry>::iterator dssi =
+  std::map<unsigned int, StringEntry>::iterator dssi =
     this->DynamicSectionStrings.find(tag);
   if(dssi != this->DynamicSectionStrings.end())
     {
@@@@ -645,7 +648,7 @@@@ cmELFInternalImpl<Types>::GetDynamicSectionString(int 
       di != this->DynamicSectionEntries.end(); ++di)
     {
     ELF_Dyn& dyn = *di;
-    if(dyn.d_tag == tag)
+    if(static_cast<tagtype>(dyn.d_tag) == static_cast<tagtype>(tag))
       {
       // We found the tag requested.
       // Make sure the position given is within the string section.
@


1.3
log
@
Merge OpenBSD-related fixes from upstream git
kudos to Rolf Eike Beer
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to cmake-2.8.12.
Tested in a bulk build by the usual suspects, Thanks!

ok espie@@, kili@@
ok zhuk@@ for kde4
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmELF_cxx,v 1.1 2013/06/25 07:16:46 dcoppa Exp $
d3 94
a96 29
commit 480e924daedee520d18c8a9c0b9823fef205b57a
Author: David Coppa <dcoppa@@openbsd.org>
Date:   Fri Jun 21 11:13:35 2013 +0200

OpenBSD: Enable ELF parsing and editing

OpenBSD provides ELF ABI declarations in

#include <stdint.h>
#include <elf_abi.h>

Teach the platform check and cmELF implementation to use these.

--- Source/cmELF.cxx.orig	Wed May 15 19:38:13 2013
+++ Source/cmELF.cxx	Fri Jun 21 09:18:46 2013
@@@@ -19,7 +19,12 @@@@
 #include <cmsys/CPU.h>
 
 // Include the ELF format information system header.
-#include <elf.h>
+#if defined(__OpenBSD__)
+# include <stdint.h>
+# include <elf_abi.h>
+#else
+# include <elf.h>
+#endif
 #if defined(__sun)
 # include <sys/link.h> // For dynamic section information
 #endif
@


1.1
log
@Enable ELF parsing and editing support on OpenBSD.
Ninja will use it.

OK espie@@
@
text
@d1 1
a1 1
$OpenBSD$
@

