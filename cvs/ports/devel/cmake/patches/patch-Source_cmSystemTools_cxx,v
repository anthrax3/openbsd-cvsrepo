head	1.9;
access;
symbols
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.2
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	kde:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2017.09.08.06.32.29;	author dcoppa;	state Exp;
branches;
next	1.8;
commitid	7tFNNMBSg4vq3SCs;

1.8
date	2017.08.26.17.53.35;	author dcoppa;	state Exp;
branches;
next	1.7;
commitid	GZPWWvi7dHjhVGfr;

1.7
date	2010.05.28.20.21.48;	author dcoppa;	state dead;
branches;
next	1.6;

1.6
date	2008.01.26.21.26.32;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.25.08.35.20;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2007.03.20.11.23.10;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.18.16.04.32;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.31.23.55.51;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.20.09.23.13;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.07.20.09.23.13;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@
Bugfixing update to cmake-3.9.2
@
text
@$OpenBSD: patch-Source_cmSystemTools_cxx,v 1.8 2017/08/26 17:53:35 dcoppa Exp $

Get rid of cmLocaleRAII.

It is of dubious utility:

it's trying to save the LC_CTYPE locale and set it from the environment
variables before processing each single file name, and to restore
the LC_CTYPE locale to the previous value after processing each
file name. There is no way how the environment could possibly change
between files, and setlocale(3) is a potentially expensive operation.

The way how it tries to save the previous locale is broken:

it calls setlocale(LC_CTYPE, NULL), which returns a pointer. CMake
saves that pointer, without strdup(3)ing it, then calls setlocale(3)
again as setlocale(LC_CTYPE, "") to actually set the desired locale,
discarding the return value. It later uses the saved pointer to try
and restore the original locale.
In an implementation using a static buffer, the second call will
overwrite the contents of the pointer returned by the first call,
so the third call will not restore the previous locale, but instead
set the one intended as temporary a second time.
A stricter implementation (one that doesn't just overwrite the
string, but actually frees the memory, so the string returned by
the earlier setlocale() call becomes invalid) will crash, revealing
the invalid use of the interface.

Index: Source/cmSystemTools.cxx
--- Source/cmSystemTools.cxx.orig
+++ Source/cmSystemTools.cxx
@@@@ -8,7 +8,6 @@@@
 
 #if defined(CMAKE_BUILD_WITH_CMAKE)
 #include "cmArchiveWrite.h"
-#include "cmLocale.h"
 #include "cm_libarchive.h"
 #ifndef __LA_INT64_T
 #define __LA_INT64_T la_int64_t
@@@@ -1625,8 +1624,6 @@@@ long copy_data(struct archive* ar, struct archive* aw)
 
 bool extract_tar(const char* outFileName, bool verbose, bool extract)
 {
-  cmLocaleRAII localeRAII;
-  static_cast<void>(localeRAII);
   struct archive* a = archive_read_new();
   struct archive* ext = archive_write_disk_new();
   archive_read_support_filter_all(a);
@


1.8
log
@
Update to CMake-3.9.1

Tests and feedback by rsadowski@@, schwarze@@
Ports bulk build by sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
Get rid of suboptimal cmLocaleRAII.
@


1.7
log
@Update to cmake 2.8.1 (I also take maintainership).

"This is good, commit." espie@@
@
text
@d1 32
a32 5
$OpenBSD: patch-Source_cmSystemTools_cxx,v 1.6 2008/01/26 21:26:32 espie Exp $
--- Source/cmSystemTools.cxx.orig	Sat Jan 26 20:49:32 2008
+++ Source/cmSystemTools.cxx	Sat Jan 26 20:52:09 2008
@@@@ -1365,11 +1365,18 @@@@ class cmDeletingCharVector : public std::vector<char*>
 };
d34 7
a40 29
         
+char* cmSystemTools::dupstring(const char* src)
+{
+  size_t sz = strlen(src)+1;
+  char* dest = new char[sz];
+  strlcpy(dest, src, sz);
+  return dest;
+}
+
 bool cmSystemTools::PutEnv(const char* value)
 { 
   static cmDeletingCharVector localEnvironment;
-  char* envVar = new char[strlen(value)+1];
-  strcpy(envVar, value);
+  char* envVar = dupstring(value);
   int ret = putenv(envVar);
   // save the pointer in the static vector so that it can
   // be deleted on exit
@@@@ -1428,7 +1435,7 @@@@ std::string cmSystemTools::MakeXMLSafe(const char* str
          && ch != '\r' )
       {
       char buffer[33];
-      sprintf(buffer, "&lt;%d&gt;", static_cast<int>(ch));
+      snprintf(buffer, sizeof buffer, "&lt;%d&gt;", static_cast<int>(ch));
       //sprintf(buffer, "&#x%0x;", (unsigned int)ch);
       result.insert(result.end(), buffer, buffer+strlen(buffer));
       }
@@@@ -1579,9 +1586,8 @@@@ bool cmSystemTools::CreateTar(const char* outFileName,
   };
d42 7
a48 30
   // Ok, this libtar is not const safe. for now use auto_ptr hack
-  char* realName = new char[ strlen(outFileName) + 1 ];
+  char* realName = dupstring(outFileName);
   std::auto_ptr<char> realNamePtr(realName);
-  strcpy(realName, outFileName);
   int options = 0;
   if(verbose)
     {
@@@@ -1658,9 +1664,8 @@@@ bool cmSystemTools::ExtractTar(const char* outFileName
   };
 
   // Ok, this libtar is not const safe. for now use auto_ptr hack
-  char* realName = new char[ strlen(outFileName) + 1 ];
+  char* realName = dupstring(outFileName);
   std::auto_ptr<char> realNamePtr(realName);
-  strcpy(realName, outFileName);
   if (tar_open(&t, realName,
       (gzip? &gztype : NULL),
       O_RDONLY
@@@@ -1712,9 +1717,8 @@@@ bool cmSystemTools::ListTar(const char* outFileName, 
   };
 
   // Ok, this libtar is not const safe. for now use auto_ptr hack
-  char* realName = new char[ strlen(outFileName) + 1 ];
+  char* realName = dupstring(outFileName);
   std::auto_ptr<char> realNamePtr(realName);
-  strcpy(realName, outFileName);
   if (tar_open(&t, realName,
       (gzip? &gztype : NULL),
       O_RDONLY
@


1.6
log
@minor update to 2.4.8 (all tests pass now)
@
text
@d1 1
a1 1
$OpenBSD: patch-Source_cmSystemTools_cxx,v 1.5 2007/08/25 08:35:20 espie Exp $
@


1.5
log
@minor update cmake 2.4.7
@
text
@d1 4
a4 5
$OpenBSD: patch-Source_cmSystemTools_cxx,v 1.4 2007/03/20 11:23:10 espie Exp $
--- Source/cmSystemTools.cxx.orig	Mon Jul 16 23:12:31 2007
+++ Source/cmSystemTools.cxx	Sun Aug 12 16:02:02 2007
@@@@ -1364,12 +1364,18 @@@@ class cmDeletingCharVector : public std::vector<char*>
     }
d7 1
d15 1
a15 1
         
d25 1
a25 1
@@@@ -1428,7 +1434,7 @@@@ std::string cmSystemTools::MakeXMLSafe(const char* str
d34 1
a34 1
@@@@ -1579,9 +1585,8 @@@@ bool cmSystemTools::CreateTar(const char* outFileName,
d42 4
a45 4
   if (tar_open(&t, realName,
       (gzip? &gztype : NULL),
       O_WRONLY | O_CREAT, 0644,
@@@@ -1651,9 +1656,8 @@@@ bool cmSystemTools::ExtractTar(const char* outFileName
d56 1
a56 1
@@@@ -1705,9 +1709,8 @@@@ bool cmSystemTools::ListTar(const char* outFileName, 
@


1.4
log
@find qmake4, not qmake...
regen other patches with new diff.
@
text
@d1 4
a4 4
$OpenBSD: patch-Source_cmSystemTools_cxx,v 1.3 2006/12/18 16:04:32 espie Exp $
--- Source/cmSystemTools.cxx.orig	Wed Jan 10 18:59:13 2007
+++ Source/cmSystemTools.cxx	Sun Mar 18 13:52:03 2007
@@@@ -1274,12 +1274,18 @@@@ class cmDeletingCharVector : public std::vector<char*>
d25 1
a25 1
@@@@ -1338,7 +1344,7 @@@@ std::string cmSystemTools::MakeXMLSafe(const char* str
d34 1
a34 1
@@@@ -1489,9 +1495,8 @@@@ bool cmSystemTools::CreateTar(const char* outFileName,
d45 1
a45 1
@@@@ -1561,9 +1566,8 @@@@ bool cmSystemTools::ExtractTar(const char* outFileName
d56 1
a56 1
@@@@ -1615,9 +1619,8 @@@@ bool cmSystemTools::ListTar(const char* outFileName, 
@


1.3
log
@update to cmake 2.4.5, quite a few patches vanish since cmake can now
build stuff with system libraries, so we no longer have to repair
curl/zlib... just xmlrpc which cmake can't find without help.
@
text
@d1 4
a4 4
$OpenBSD$
--- Source/cmSystemTools.cxx.orig	Mon Dec  4 17:04:00 2006
+++ Source/cmSystemTools.cxx	Sun Dec 17 11:07:03 2006
@@@@ -1274,12 +1274,18 @@@@ public:
d25 1
a25 1
@@@@ -1338,7 +1344,7 @@@@ std::string cmSystemTools::MakeXMLSafe(c
d34 1
a34 1
@@@@ -1489,9 +1495,8 @@@@ bool cmSystemTools::CreateTar(const char
d45 1
a45 1
@@@@ -1561,9 +1566,8 @@@@ bool cmSystemTools::ExtractTar(const cha
d56 1
a56 1
@@@@ -1615,9 +1619,8 @@@@ bool cmSystemTools::ListTar(const char* 
@


1.2
log
@update to 2.4.3
@
text
@d1 3
a3 12
$OpenBSD: patch-Source_cmSystemTools_cxx,v 1.1.1.1 2006/07/20 09:23:13 espie Exp $
--- Source/cmSystemTools.cxx.orig	Mon Jul 31 16:49:57 2006
+++ Source/cmSystemTools.cxx	Tue Aug  1 00:34:13 2006
@@@@ -48,7 +48,7 @@@@
 #  include <libtar/libtar.h>
 #  include <memory> // auto_ptr
 #  include <fcntl.h>
-#  include <cmzlib/zlib.h>
+#  include <zlib.h>
 #endif
 
 #if defined(__sgi) && !defined(__GNUC__)
a33 33
@@@@ -1439,7 +1445,7 @@@@ int cmSystemToolsGZStructOpen(void* call
     }
 #endif
 
-  gzf->GZFile = cm_zlib_gzdopen(fd, gzoflags);
+  gzf->GZFile = gzdopen(fd, gzoflags);
   if (!gzf->GZFile)
   {
     errno = ENOMEM;
@@@@ -1452,20 +1458,20 @@@@ int cmSystemToolsGZStructOpen(void* call
 int cmSystemToolsGZStructClose(void* call_data)
 {
   cmSystemToolsGZStruct* gzf = static_cast<cmSystemToolsGZStruct*>(call_data);
-  return cm_zlib_gzclose(gzf->GZFile);
+  return gzclose(gzf->GZFile);
 }
 
 ssize_t cmSystemToolsGZStructRead(void* call_data, void* buf, size_t count)
 {
   cmSystemToolsGZStruct* gzf = static_cast<cmSystemToolsGZStruct*>(call_data);
-  return cm_zlib_gzread(gzf->GZFile, buf, count);
+  return gzread(gzf->GZFile, buf, count);
 }
 
 ssize_t cmSystemToolsGZStructWrite(void* call_data, const void* buf,
                                    size_t count)
 {
   cmSystemToolsGZStruct* gzf = static_cast<cmSystemToolsGZStruct*>(call_data);
-  return cm_zlib_gzwrite(gzf->GZFile, (void*)buf, count);
+  return gzwrite(gzf->GZFile, (void*)buf, count);
 }
 
 #endif
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- Source/cmSystemTools.cxx.orig	Mon Jul  3 12:59:42 2006
+++ Source/cmSystemTools.cxx	Mon Jul  3 13:16:24 2006
d38 2
a39 2
-      sprintf(buffer, "&lt;%d&gt;", (int)ch);
+      snprintf(buffer, sizeof buffer, "&lt;%d&gt;", (int)ch);
@


1.1.1.1
log
@cmake, a `new' build system. Used by KDE4.

Easier to work with than autoconf/automake/libtool.
@
text
@@
