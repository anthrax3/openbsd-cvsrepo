head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.06.01.21.05.28;	author kurt;	state dead;
branches;
next	1.3;

1.3
date	2012.04.30.15.33.16;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.01.17.41.13;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.14.22.16.17;	author kili;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- Update to 7.2d. Tested on i386, amd64, sparc64, macppc, hppa and alpha.
okay and testing by sthen, landry, thanks!
@
text
@$OpenBSD: patch-pthread_support_c,v 1.3 2012/04/30 15:33:16 kurt Exp $
--- pthread_support.c.orig	Tue May 15 01:24:46 2007
+++ pthread_support.c	Tue Mar  6 10:24:21 2012
@@@@ -763,7 +763,7 @@@@ void GC_thr_init(void)
 	  GC_nprocs = pthread_num_processors_np();
 #       endif
 #	if defined(GC_OSF1_THREADS) || defined(GC_AIX_THREADS) \
-	   || defined(GC_SOLARIS_THREADS)
+	   || defined(GC_SOLARIS_THREADS) || defined(GC_OPENBSD_THREADS)
 	  GC_nprocs = sysconf(_SC_NPROCESSORS_ONLN);
 	  if (GC_nprocs <= 0) GC_nprocs = 1;
 #	endif
@@@@ -848,7 +848,7 @@@@ void GC_init_parallel(void)
 }
 
 
-#if !defined(GC_DARWIN_THREADS)
+#if !defined(GC_DARWIN_THREADS) && !defined(GC_OPENBSD_THREADS)
 int WRAP_FUNC(pthread_sigmask)(int how, const sigset_t *set, sigset_t *oset)
 {
     sigset_t fudged_set;
@@@@ -1103,6 +1103,12 @@@@ void * GC_start_routine(void * arg)
         GC_enable();
 #     endif
       return GC_inner_start_routine(&sb, arg);
+#   elif defined(GC_OPENBSD_THREADS)
+      /* On OpenBSD GC_get_stack_base() doesn't cause any allocations */
+      struct GC_stack_base sb;
+      if (GC_get_stack_base(&sb) != GC_SUCCESS)
+	ABORT("Failed to get thread stack base.");
+      return GC_inner_start_routine(&sb, arg);
 #   else
       return GC_call_with_stack_base(GC_inner_start_routine, arg);
 #   endif
@@@@ -1297,7 +1303,7 @@@@ void GC_generic_lock(pthread_mutex_t * lock)
 /* as STL alloc.h.  This isn't really the right way to do this.   */
 /* but until the POSIX scheduling mess gets straightened out ...  */
 
-volatile AO_TS_t GC_allocate_lock = 0;
+volatile AO_TS_t GC_allocate_lock = AO_TS_INITIALIZER;
 
 
 void GC_lock(void)
@


1.3
log
@Get GC_nprocs from sysconf _SC_NPROCESSORS_ONLN instead of
hardcoding to 1. From Brad Smith <brad@@comstyle.com> tested
in bulk build by naddy@@
@
text
@d1 1
a1 1
$OpenBSD: patch-pthread_support_c,v 1.2 2008/04/01 17:41:13 kurt Exp $
@


1.2
log
@- use __data_start symbol to find the beginning of the data sections
and adjust boehm-gc to deal with any number of holes that may appear
between __data_start and _end. (requires -current binutils)
- work-around libpthread bugs that prevent sigsuspend() from working
in a signal handler by using pthread_suspend_np() + an arch/libpthread
specific offset to obtain the suspended thread's stack pointer.

thanks to sthen@@ and jasper@@ for access to other arches. discussed
with todd@@
@
text
@d1 5
a5 6
$OpenBSD: patch-pthread_support_c,v 1.1 2007/07/14 22:16:17 kili Exp $
--- pthread_support.c.orig	Tue May 15 06:24:46 2007
+++ pthread_support.c	Mon Feb 11 16:35:23 2008
@@@@ -774,6 +774,9 @@@@ void GC_thr_init(void)
 #       if defined(GC_NETBSD_THREADS)
 	  GC_nprocs = get_ncpu();
d7 7
a13 7
+#       if defined(GC_OPENBSD_THREADS)
+	  GC_nprocs = 1;
+#       endif
 #       if defined(GC_DARWIN_THREADS) || defined(GC_FREEBSD_THREADS)
 	  int ncpus = 1;
 	  size_t len = sizeof(ncpus);
@@@@ -848,7 +851,7 @@@@ void GC_init_parallel(void)
d22 1
a22 1
@@@@ -1103,6 +1106,12 @@@@ void * GC_start_routine(void * arg)
d35 1
a35 1
@@@@ -1297,7 +1306,7 @@@@ void GC_generic_lock(pthread_mutex_t * lock)
@


1.1
log
@
Update to 7.0.

Most work done by kurt@@, who got bleeding eyes and has been trapped
into pthread issues because some of us (me and Stuart Henderson)
were slopyy and applied some patches only partial. A big sorry to
kurt@@ for this waste of time!

Tested by many. Intermediate ok's (IIRC) from kurt@@, naddy@@ and todd@@.
@
text
@d1 23
a23 4
$OpenBSD$
--- pthread_support.c.orig	Thu Jul 12 11:12:40 2007
+++ pthread_support.c	Thu Jul 12 11:13:47 2007
@@@@ -1103,6 +1103,12 @@@@ void * GC_start_routine(void * arg)
d36 9
@

