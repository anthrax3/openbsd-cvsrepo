head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.06.01.21.05.28;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2008.04.01.17.41.13;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to 7.2d. Tested on i386, amd64, sparc64, macppc, hppa and alpha.
okay and testing by sthen, landry, thanks!
@
text
@$OpenBSD: patch-libatomic_ops-1_2_src_atomic_ops_sysdeps_gcc_mips_h,v 1.1 2008/04/01 17:41:13 kurt Exp $
--- libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/mips.h.orig	Fri Mar 21 14:01:24 2008
+++ libatomic_ops-1.2/src/atomic_ops/sysdeps/gcc/mips.h	Fri Mar 21 14:01:24 2008
@@@@ -0,0 +1,89 @@@@
+/* 
+ * Copyright (c) 2005  Thiemo Seufer <ths@@networkno.de>
+ * Copyright (c) 2007  Zhang Le <r0bertz@@gentoo.org>
+ *
+ * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
+ * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
+ *
+ * Permission is hereby granted to use or copy this program
+ * for any purpose,  provided the above notices are retained on all copies.
+ * Permission to modify the code and to distribute modified code is granted,
+ * provided the above notices are retained, and a notice that the code was
+ * modified is included with the above copyright notice.
+ */
+
+#include "../all_aligned_atomic_load_store.h"
+#include "../test_and_set_t_is_ao_t.h"
+
+/* Data dependence does not imply read ordering.  */
+#define AO_NO_DD_ORDERING
+
+AO_INLINE void
+AO_nop_full()
+{
+  __asm__ __volatile__(
+      "       .set push           \n"
+      "       .set mips3          \n"
+      "       .set noreorder      \n"
+      "       .set nomacro        \n"
+      "       sync                \n"
+      "       .set pop              "
+      : : : "memory");
+}
+
+#define AO_HAVE_nop_full
+
+AO_INLINE int
+AO_compare_and_swap(volatile AO_t *addr, AO_t old, AO_t new_val)
+{
+  register int was_equal = 0;
+  register int temp;
+
+  __asm__ __volatile__(
+      "       .set push           \n"
+      "       .set mips3          \n"
+      "       .set noreorder      \n"
+      "       .set nomacro        \n"
+      "1:     ll      %0, %1      \n"
+      "       bne     %0, %4, 2f  \n"
+      "       move    %0, %3      \n"
+      "       sc      %0, %1      \n"
+      "       .set pop            \n"
+      "       beqz    %0, 1b      \n"
+      "       li      %2, 1       \n"
+      "2:                           "
+      : "=&r" (temp), "+R" (*addr), "+r" (was_equal)
+      : "r" (new_val), "r" (old)
+      : "memory");
+  return was_equal;
+}
+
+#define AO_HAVE_compare_and_swap
+
+AO_INLINE AO_t
+AO_fetch_and_add_full (volatile AO_t *p, AO_t incr)
+{
+  AO_t result, temp;
+  __asm__ __volatile__(
+      "       .set push           \n"
+      "       .set mips3          \n"
+      "       .set noreorder      \n"
+      "       .set nomacro        \n"
+      "1:     ll      %1, %2      \n"
+      "       addu    %0, %1, %3  \n"
+      "       sc      %0, %2      \n"
+      "       beqz    %0, 1b      \n"
+      "       addu    %0, %1, %3  \n"
+      "       sync                \n"
+      "       .set pop            \n"
+      : "=&r" (result), "=&r" (temp), "=m" (*p)
+      : "r" (incr), "m" (*p)
+      : "memory");
+  return result;
+}
+
+#define AO_HAVE_fetch_and_add_full
+
+/*
+ * FIXME: fetch_and_add_full implemented, any others?
+ */
@


1.1
log
@- use __data_start symbol to find the beginning of the data sections
and adjust boehm-gc to deal with any number of holes that may appear
between __data_start and _end. (requires -current binutils)
- work-around libpthread bugs that prevent sigsuspend() from working
in a signal handler by using pthread_suspend_np() + an arch/libpthread
specific offset to obtain the suspended thread's stack pointer.

thanks to sthen@@ and jasper@@ for access to other arches. discussed
with todd@@
@
text
@d1 1
a1 1
$OpenBSD$
@

