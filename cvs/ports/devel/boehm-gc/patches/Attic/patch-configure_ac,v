head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.06.01.21.05.28;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2012.02.22.12.31.42;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.01.17.41.13;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- Update to 7.2d. Tested on i386, amd64, sparc64, macppc, hppa and alpha.
okay and testing by sthen, landry, thanks!
@
text
@$OpenBSD: patch-configure_ac,v 1.2 2012/02/22 12:31:42 kurt Exp $
--- configure.ac.orig	Sat Jun 30 11:40:15 2007
+++ configure.ac	Sun Feb 19 12:57:00 2012
@@@@ -113,6 +113,11 @@@@ case "$THREADS" in
      *-*-hpux10*)
 	AC_MSG_WARN("Only HP-UX 11 POSIX threads are supported.")
 	;;
+     *-*-openbsd*)
+	AC_DEFINE(GC_OPENBSD_THREADS)
+	THREADDLLIBS=-pthread
+	INCLUDES="$INCLUDES -pthread"
+      	;;
      *-*-freebsd*)
 	AC_MSG_WARN("FreeBSD does not yet fully support threads with Boehm GC.")
 	AC_DEFINE(GC_FREEBSD_THREADS)
@@@@ -394,6 +399,9 @@@@ case "$host" in
     ;;
  sparc-*-netbsd*)
     machdep="mach_dep.lo sparc_netbsd_mach_dep.lo"
+    ;;
+ sparc*-*-openbsd*)
+    machdep="mach_dep.lo sparc_mach_dep.lo"
     ;;
  sparc-sun-solaris2.3)
     machdep="mach_dep.lo sparc_mach_dep.lo"
@


1.2
log
@Remove uthreads work-arounds. Works ok with rthreads now.
Tested by sthen@@ and espie@@
@
text
@d1 1
a1 1
$OpenBSD: patch-configure_ac,v 1.1 2008/04/01 17:41:13 kurt Exp $
@


1.1
log
@- use __data_start symbol to find the beginning of the data sections
and adjust boehm-gc to deal with any number of holes that may appear
between __data_start and _end. (requires -current binutils)
- work-around libpthread bugs that prevent sigsuspend() from working
in a signal handler by using pthread_suspend_np() + an arch/libpthread
specific offset to obtain the suspended thread's stack pointer.

thanks to sthen@@ and jasper@@ for access to other arches. discussed
with todd@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
+++ configure.ac	Fri Feb  8 17:29:19 2008
@@@@ -113,6 +113,12 @@@@ case "$THREADS" in
a11 1
+	openbsd_threads=true
d16 1
a16 9
@@@@ -222,6 +228,7 @@@@ AM_CONDITIONAL(THREADS, test x$THREADS != xnone)
 AM_CONDITIONAL(PTHREADS, test x$THREADS = xposix)
 AM_CONDITIONAL(DARWIN_THREADS, test x$darwin_threads = xtrue)
 AM_CONDITIONAL(WIN32_THREADS, test x$win32_threads = xtrue)
+AM_CONDITIONAL(OPENBSD_THREADS, test x$openbsd_threads = xtrue)
 
 case "$host" in 
    powerpc-*-darwin*)
@@@@ -394,6 +401,9 @@@@ case "$host" in
@

