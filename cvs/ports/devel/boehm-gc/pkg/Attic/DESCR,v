head	1.5;
access;
symbols
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	NIKLAS_990419:1.1.1.1
	NIKLAS:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2008.07.01.09.43.19;	author landry;	state dead;
branches;
next	1.4;

1.4
date	2003.12.15.21.42.17;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.10.21.06.15;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.01.03.49.08;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	99.04.19.21.34.05;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.19.21.34.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Split boehm-gc into -main and -atomic subpackages.
The latter contains libatomic_ops-1.2, which is developed inside boehm-gc,
as stated on libatomic_ops homepage. No change on -main subpackage.
libatomic_ops may be used by a future eventual pulseaudio port, which is
being worked on.

Feedback, tweaks and ok kurt@@
@
text
@The Boehm-Weiser garbage collection package, for C and C++ -
garbage collection and memory leak detection libraries.

A garbage collector is something which automatically frees malloc'd
memory for you by working out what parts of memory your program
no longer has pointers to. As a result, garbage collectors can also
inform you of memory leaks (if they find memory they can free, it means
you have lost all of your pointers to it, but you didn't free it).

C programs should run without change. C++ programs must include a header
to use garbage collection. See the man page and header files.
@


1.4
log
@remove WWW lines
@
text
@@


1.3
log
@update DESCR, no more libleak.
--
MAINTAINER ok
@
text
@a11 2

WWW: ${HOMEPAGE}
@


1.2
log
@- add RCS id
- add HOMEPAGE
- use MASTER_SITE_BACKUP
@
text
@d6 1
a6 1
no longer has pointers to.  As a result, garbage collectors can also
d10 2
a11 10
This package has two libraries and some include files:
libgc.a - a garbage collection library, replaces malloc/free/new/delete/etc
    with versions that do automatic garbage collection
libleak.a - a leak detection library, which is just libgc.a compiled with
    different switches.

C programs may be linked against either of these, and should run (with
GC or leak detection) without change.  C++ programs must include a header
to use garbage collection, though leak detection should work without
such source code modifications.  See the man page and header files.
@


1.1
log
@Initial revision
@
text
@d21 1
a21 3
-- Mike McGaughey <mmcg@@cs.monash.edu.au>

ps: garbage collection is addictive.
@


1.1.1.1
log
@Boehm's garbage collector for C & C++, can also find memleaks.
@
text
@@
