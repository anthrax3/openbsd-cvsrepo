head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.16
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.14
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	jeremy_2010-Dec-20:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.12.05.17.45.55;	author jeremy;	state Exp;
branches;
next	1.2;
commitid	0riHIzt6DGLcmdJS;

1.2
date	2015.01.18.03.13.47;	author naddy;	state Exp;
branches;
next	1.1;
commitid	INAcawJqik7lWSVj;

1.1
date	2010.12.20.18.09.01;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.12.20.18.09.01;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to ruby-subset_sum 1.0.2

Fix tests and HOMEPAGE.
@
text
@SHA256 (subset_sum-1.0.2.gem) = vWXzj5jxcrHKKRPhdhRF+UWzbhs1wKzhXeHP+eG1BAU=
SIZE (subset_sum-1.0.2.gem) = 9728
@


1.2
log
@Drop remaining MD5/RMD160/SHA1 checksums.
@
text
@d1 2
a2 2
SHA256 (subset_sum-1.0.1.gem) = /mqP9I41tmPTuye0wC2ok4wBFx8qhEbKaDoYoDWVwQs=
SIZE (subset_sum-1.0.1.gem) = 8704
@


1.1
log
@Initial revision
@
text
@a0 3
MD5 (subset_sum-1.0.1.gem) = +vqYymW5zpRyRPoRl8Mk8w==
RMD160 (subset_sum-1.0.1.gem) = T2jeHLVqe1Ncl/hupYAchLb+XwU=
SHA1 (subset_sum-1.0.1.gem) = rYWFi8gcoHd4oVzUKbxQI55hFLE=
@


1.1.1.1
log
@Import ruby-subset_sum 1.0.1

This module provides both a C and pure ruby simple subset sum problem
solver. The subset sum problem is, given a set of numbers, can the sum
of any subset of those numbers equal a given number. This problem is
NP-complete.

Both the C and pure ruby versions implement a fairly simple
meet-in-the-middle algorithm. The C version uses an AVL tree to store
the data, while the pure ruby version uses a ruby hash. For the C
version to be used, the sum of the positive numbers and the sum of the
negative numbers in the set, as well as the wanted number, must all be
Fixnums. Additionally, max_seconds should be nil or a Fixnum.
@
text
@@
