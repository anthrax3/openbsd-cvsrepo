head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	edd_20160902:1.1.1.1
	edd:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.03.19.19.49;	author landry;	state Exp;
branches;
next	1.2;
commitid	NkZaP5skFWQkYqhM;

1.2
date	2016.11.10.21.58.40;	author danj;	state Exp;
branches;
next	1.1;
commitid	4ER2f1Ti7zNi2Qmp;

1.1
date	2016.09.02.17.02.36;	author edd;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Rc15yvtFW2UQpYvZ;

1.1.1.1
date	2016.09.02.17.02.36;	author edd;	state Exp;
branches;
next	;
commitid	Rc15yvtFW2UQpYvZ;


desc
@@


1.3
log
@bump ports depending on python3 in devel
@
text
@# $OpenBSD: Makefile,v 1.2 2016/11/10 21:58:40 danj Exp $

COMMENT =	generic test automation framework for acceptance testing

MODPY_EGG_VERSION =	3.0
PKGNAME =		py-robotframework-${MODPY_EGG_VERSION}
REVISION =		0

# We could use PyPI, but the test suite is not distributed via that means.
GH_ACCOUNT =		robotframework
GH_PROJECT =		robotframework
GH_TAGNAME =		3.0

CATEGORIES =	devel

# Apache
PERMIT_PACKAGE_CDROM =	Yes

FLAVORS =               python3
FLAVOR ?=

MODULES =		lang/python
TEST_DEPENDS =		${FULLPKGNAME}:${FULLPKGPATH}

post-install:
.for i in pybot rebot robot
	mv ${PREFIX}/bin/$i ${PREFIX}/bin/$i${MODPY_BIN_SUFFIX}
.endfor

# There is also a suite of acceptance tests, but they are *very* slow and
# it asks the user to type things and click stuff.
do-test:
	cd ${WRKSRC}/utest && ${MODPY_BIN} run.py

.include <bsd.port.mk>
@


1.2
log
@Remove superfluous if ${FLAVOR:Mpython3}

tweaks and ok rpointel@@ shadchin@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2016/09/02 17:02:36 edd Exp $
d7 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.template,v 1.75 2016/03/20 17:19:49 naddy Exp $
a23 1
.if ${FLAVOR:Mpython3}
a27 1
.endif
@


1.1.1.1
log
@Import devel/py-robotframework.

---8<---
Robot Framework is a generic open source test automation framework for
acceptance testing and acceptance test-driven development (ATDD). It has
easy-to-use tabular test data syntax and it utilizes the keyword-driven
testing approach. Its testing capabilities can be extended by test
libraries implemented either with Python or Java, and users can create
new higher-level keywords from existing ones using the same syntax that
is used for creating test cases.
--->8---

OK giovanni@@, with input from sthen@@

@
text
@@
