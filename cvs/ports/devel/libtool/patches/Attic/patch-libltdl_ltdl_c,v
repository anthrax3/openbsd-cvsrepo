head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.09.22.21.10.19;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2009.11.17.10.15.35;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.11.18.55.43;	author steven;	state dead;
branches;
next	1.2;

1.2
date	2007.04.14.15.58.03;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.07.21.28.41;	author brad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- update libtool to 2.4
* only kaffe will be broken by this (but fixed in the next commit),
all other ports have been taken care of over the past couple of months
by brad and myself

joint work with brad (MAINTAINER)
@
text
@$OpenBSD: patch-libltdl_ltdl_c,v 1.4 2009/11/17 10:15:35 espie Exp $
--- libltdl/ltdl.c.orig	Mon Nov 16 19:39:41 2009
+++ libltdl/ltdl.c	Mon Nov 16 19:39:54 2009
@@@@ -3225,7 +3225,7 @@@@ try_dlopen (phandle, filename)
 	    }
 #endif
 	}
-      if (!file)
+      else
 	{
 	  file = fopen (filename, LT_READTEXT_MODE);
 	}
@


1.4
log
@backport important bug-fix from newest ltdl.

There are probably other bad bugs in there, this code is a textbook example
of how NOT to write code if you want it to work.

Between the gnu style that obfuscate the stuff, the various thingies added
"just in case", the misuse of autoconf results, and the really high
abstraction level together with long functions and internal concepts, how
can anyone make sense of this code ? (short answer: it doesn't make actual
sense).

Also, no cookies for the gnu guys who, along with an important bug-fix,
manage *again* to push out 10000+ lines of useless diff thanks to a change
in automake/autoconf itself.

We don't need to make fun of Windows  and its security, the GNU project
manages to produce as many problems on its own...

When will they learn secure practices ? I would bet "not this century",
but then I probably won't be around to collect the bet...
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@update to libtool 1.5.26

from brad@@ (maintainer)
ports build testing by naddy, ajacoutot, and me
@
text
@d1 12
a12 12
$OpenBSD: patch-libltdl_ltdl_c,v 1.2 2007/04/14 15:58:03 espie Exp $
--- libltdl/ltdl.c.orig	Mon Oct 31 20:44:43 2005
+++ libltdl/ltdl.c	Sat Mar 31 13:33:59 2007
@@@@ -894,7 +894,7 @@@@ static	const char	sys_search_path[]	= LTDL_SYSSEARCHPA
 		(*lt_dlmutex_seterror_func) (errormsg);		\
 	else 	lt_dllast_error = (errormsg);	} LT_STMT_END
 #define LT_DLMUTEX_GETERROR(errormsg)		LT_STMT_START {	\
-	if (lt_dlmutex_seterror_func)				\
+	if (lt_dlmutex_geterror_func)				\
 		(errormsg) = (*lt_dlmutex_geterror_func) ();	\
 	else	(errormsg) = lt_dllast_error;	} LT_STMT_END
 
@


1.2
log
@modify libtool to run install with *no* executable permissions on files that
do not need it.

After discussion with matthieu, theo, naddy, and a lot of tests, that
caught up the fact that sometimes, libtool uses cp, so we let it use cp
(for now).
@
text
@d1 1
a1 1
$OpenBSD: patch-libltdl_ltdl_c,v 1.1 2006/01/07 21:28:41 brad Exp $
@


1.1
log
@rev 1.174.2.21

(LT_DLMUTEX_GETERROR): check if `lt_dlmutex_geterror_func' is set
instead of `lt_dlmutex_seterror_func'.

From libtool CVS
@
text
@d1 4
a4 4
$OpenBSD$
--- libltdl/ltdl.c.orig	Sat Jan  7 16:10:47 2006
+++ libltdl/ltdl.c	Sat Jan  7 16:11:48 2006
@@@@ -894,7 +894,7 @@@@ static	const char	sys_search_path[]	= LT
@

