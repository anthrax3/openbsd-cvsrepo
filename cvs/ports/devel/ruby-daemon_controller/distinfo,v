head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.14
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.10
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jeremy_2011-Nov-17:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.06.26.14.45.53;	author jeremy;	state Exp;
branches;
next	1.1;
commitid	gzMBYpANjKApkQBN;

1.1
date	2011.11.17.15.33.29;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.17.15.33.29;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to daemon_controller 1.2.0.

Thanks sthen@@ for the reminder
@
text
@SHA256 (daemon_controller-1.2.0.gem) = bUtFiff47SIB6Fep8MgKXDwZVIxbe131V5Qpn9mBqgs=
SIZE (daemon_controller-1.2.0.gem) = 37888
@


1.1
log
@Initial revision
@
text
@d1 2
a2 5
MD5 (daemon_controller-0.2.6.gem) = W+as9z9+Zhm31OSkQKvZYA==
RMD160 (daemon_controller-0.2.6.gem) = 2rd9y3YdnUy94Wsa8JJR4EoOXHg=
SHA1 (daemon_controller-0.2.6.gem) = PTnxei1FXSRsyamLl+zFxCv7Xro=
SHA256 (daemon_controller-0.2.6.gem) = QtQDqU4NvUy0EKxvscR3FyypzonmeE5a8w4jqJdTaqM=
SIZE (daemon_controller-0.2.6.gem) = 22016
@


1.1.1.1
log
@Import ruby-daemon_controller 0.2.6

daemon_controller is a library for starting and stopping specific
daemons programmatically in a robust, race-condition-free manner.

It's not a daemon monitoring system like God or Monit. It's also not a
library for writing daemons.

It provides the following functionality:

    Starting daemons. If the daemon fails to start then an exception
    will be raised. daemon_controller can even detect failures that
    occur after the daemon has already daemonized.

    Starting daemons is done in a race-condition-free manner. If another
    process using daemon_controller is trying to start the same daemon,
    then daemon_controller will guarantee serialization.

    daemon_controller also raises an exception if it detects that the
    daemon is already started.

    Connecting to a daemon, starting it if it's not already started.
    This too is done in a race-condition-free manner. If the daemon
    fails to start then an exception will be raised.

    Stopping daemons.

    Checking whether a daemon is running.

OK ajacoutot@@
@
text
@@
