head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.28
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.22
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.20
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.18
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	jasper_20090811:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.10.10.18.11.42;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.10.18.11.42;	author jasper;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- ompi/mca/io/romio/romio/adio/common/ad_fstype.c.orig	Fri Aug 21 08:54:47 2009
+++ ompi/mca/io/romio/romio/adio/common/ad_fstype.c	Fri Aug 21 08:56:05 2009
@@@@ -30,7 +30,7 @@@@
  *
  * There are three more "general" mechanisms that we use for detecting
  * file system type:
- * - struct statfs's f_type field
+ * - struct statfs's f_fstypename field
  * - struct statvfs's f_basetype field
  * - struct stat's st_fstype field
  *
@@@@ -329,14 +329,14 @@@@ static void ADIO_FileSysType_fncall(char *filename, in
     /* BlueGene is a special case: all file systems are AD_BGL, except for
      * certain exceptions */
     *fstype = ADIO_BGL;
-    check_for_lockless_exceptions(fsbuf.f_type, fstype);
+    check_for_lockless_exceptions(fsbuf.f_fstypename, fstype);
     *error_code = MPI_SUCCESS;
     return;
 #  endif
 
-    /* FPRINTF(stderr, "%d\n", fsbuf.f_type);*/
+    /* FPRINTF(stderr, "%d\n", fsbuf.f_fstypename);*/
 # ifdef NFS_SUPER_MAGIC
-    if (fsbuf.f_type == NFS_SUPER_MAGIC) {
+    if (fsbuf.f_fstypename == NFS_SUPER_MAGIC) {
 	*fstype = ADIO_NFS;
 	return;
     }
@@@@ -345,42 +345,42 @@@@ static void ADIO_FileSysType_fncall(char *filename, in
 /*#if defined(LINUX) && defined(ROMIO_LUSTRE)*/
 #ifdef ROMIO_LUSTRE
 #define LL_SUPER_MAGIC 0x0BD00BD0
-    if (fsbuf.f_type == LL_SUPER_MAGIC) {
+    if (fsbuf.f_fstypename == LL_SUPER_MAGIC) {
 	*fstype = ADIO_LUSTRE;
 	return;
     }
 # endif
 
 # ifdef PAN_KERNEL_FS_CLIENT_SUPER_MAGIC
-    if (fsbuf.f_type == PAN_KERNEL_FS_CLIENT_SUPER_MAGIC) {
+    if (fsbuf.f_fstypename == PAN_KERNEL_FS_CLIENT_SUPER_MAGIC) {
 	*fstype = ADIO_PANFS;
 	return;
     }
 # endif
 
 # ifdef MOUNT_NFS
-    if (fsbuf.f_type == MOUNT_NFS) {
+    if (fsbuf.f_fstypename == MOUNT_NFS) {
 	*fstype = ADIO_NFS;
 	return;
     }
 # endif
 
 # ifdef MOUNT_PFS
-    if (fsbuf.f_type == MOUNT_PFS) {
+    if (fsbuf.f_fstypename == MOUNT_PFS) {
 	*fstype = ADIO_PFS;
 	return;
     }
 # endif
 
 # ifdef PVFS_SUPER_MAGIC
-    if (fsbuf.f_type == PVFS_SUPER_MAGIC) {
+    if (fsbuf.f_fstypename == PVFS_SUPER_MAGIC) {
 	*fstype = ADIO_PVFS;
 	return;
     }
 # endif
 
 # ifdef PVFS2_SUPER_MAGIC
-    if (fsbuf.f_type == PVFS2_SUPER_MAGIC) {
+    if (fsbuf.f_fstypename == PVFS2_SUPER_MAGIC) {
 	*fstype = ADIO_PVFS2;
 	return;
     }
@


1.1.1.1
log
@import openmpi 1.3.3

The Open MPI Project is an open source MPI-2 implementation that is
developed and maintained by a consortium of academic, research, and
industry partners. Open MPI is therefore able to combine the expertise,
technologies, and resources from all across the High Performance
Computing community in order to build the best MPI library available.
Open MPI offers advantages for system and software vendors, application
developers and computer science researchers.

from Andreas Bihlmaier (MAINTAINER) with minor tweaks by me
@
text
@@
