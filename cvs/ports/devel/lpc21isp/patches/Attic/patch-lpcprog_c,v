head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	jasper_20111501:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2013.09.10.18.11.29;	author jasper;	state dead;
branches;
next	1.2;

1.2
date	2011.10.19.11.38.47;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.15.12.40.17;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.01.15.12.40.17;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- update to lpc2lisp-1.94

from Alexander Shiryaev (MAINTAINER)
@
text
@$OpenBSD: patch-lpcprog_c,v 1.2 2011/10/19 11:38:47 jasper Exp $
--- lpcprog.c.orig	Tue Aug  2 16:45:04 2011
+++ lpcprog.c	Wed Oct 19 13:22:21 2011
@@@@ -1,3 +1,4 @@@@
+#include <assert.h>
 /******************************************************************************
 
 Project:           Portable command line ISP for NXP LPC1000 / LPC2000 family
@@@@ -495,7 +496,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
                 strippedsize--;
             }
 
-            sprintf(tmp_string, "StrippedAnswer(Length=%d): '", strippedsize);
+            int rCheckSNPrintF0 = snprintf(tmp_string, sizeof(tmp_string), "StrippedAnswer(Length=%d): '", strippedsize); assert( rCheckSNPrintF0 < sizeof(tmp_string) );
             DumpString(3, strippedAnswer, strippedsize, tmp_string);
 
             tStartUpload = time(NULL);
@@@@ -542,13 +543,13 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
 
     DebugPrintf(3, "Setting oscillator\n");
 
-    sprintf(temp, "%s\n", IspEnvironment->StringOscillator);
+    int rCheckSNPrintF1 = snprintf(temp, sizeof(temp), "%s\n", IspEnvironment->StringOscillator); assert( rCheckSNPrintF1 < sizeof(temp) );
 
     SendComPort(IspEnvironment, temp);
 
     ReceiveComPort(IspEnvironment, Answer, sizeof(Answer)-1, &realsize, 2, 1000);
 
-    sprintf(temp, "%s\nOK\r\n", IspEnvironment->StringOscillator);
+    int rCheckSNPrintF2 = snprintf(temp, sizeof(temp), "%s\nOK\r\n", IspEnvironment->StringOscillator); assert( rCheckSNPrintF2 < sizeof(temp) );
 
     if (strcmp(Answer, temp) != 0)
     {
@@@@ -771,7 +772,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
     {
         DebugPrintf(2, "Wiping Device. ");
 
-        sprintf(tmpString, "P %d %d\n", 0, LPCtypes[IspEnvironment->DetectedDevice].FlashSectors-1);
+        int rCheckSNPrintF3 = snprintf(tmpString, sizeof(tmpString), "P %d %d\n", 0, LPCtypes[IspEnvironment->DetectedDevice].FlashSectors-1); assert( rCheckSNPrintF3 < sizeof(tmpString) );
 
         if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
         {
@@@@ -779,7 +780,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
             return (WRONG_ANSWER_PREP + GetAndReportErrorNumber(Answer));
         }
 
-        sprintf(tmpString, "E %d %d\n", 0, LPCtypes[IspEnvironment->DetectedDevice].FlashSectors-1);
+        int rCheckSNPrintF4 = snprintf(tmpString, sizeof(tmpString), "E %d %d\n", 0, LPCtypes[IspEnvironment->DetectedDevice].FlashSectors-1); assert( rCheckSNPrintF4 < sizeof(tmpString) );
 
         if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
         {
@@@@ -792,7 +793,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
         //no wiping requested: erasing sector 0 first
         DebugPrintf(2, "Erasing sector 0 first, to invalidate checksum. ");
 
-        sprintf(tmpString, "P %d %d\n", 0, 0);
+        int rCheckSNPrintF5 = snprintf(tmpString, sizeof(tmpString), "P %d %d\n", 0, 0); assert( rCheckSNPrintF5 < sizeof(tmpString) );
 
         if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
         {
@@@@ -800,7 +801,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
             return (WRONG_ANSWER_PREP + GetAndReportErrorNumber(Answer));
         }
 
-        sprintf(tmpString, "E %d %d\n", 0, 0);
+        int rCheckSNPrintF6 = snprintf(tmpString, sizeof(tmpString), "E %d %d\n", 0, 0); assert( rCheckSNPrintF6 < sizeof(tmpString) );
 
         if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
         {
@@@@ -822,7 +823,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
 
         if (IspEnvironment->BinaryOffset < ReturnValueLpcRamStart(IspEnvironment)) // Skip Erase when running from RAM
         {
-            sprintf(tmpString, "P %ld %ld\n", Sector, Sector);
+            int rCheckSNPrintF7 = snprintf(tmpString, sizeof(tmpString), "P %ld %ld\n", Sector, Sector); assert( rCheckSNPrintF7 < sizeof(tmpString) );
 
             if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
             {
@@@@ -834,7 +835,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
             fflush(stdout);
             if (IspEnvironment->WipeDevice == 0 && (Sector!=0)) //Sector 0 already erased
             {
-                sprintf(tmpString, "E %ld %ld\n", Sector, Sector);
+                int rCheckSNPrintF8 = snprintf(tmpString, sizeof(tmpString), "E %ld %ld\n", Sector, Sector); assert( rCheckSNPrintF8 < sizeof(tmpString) );
 
                 if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
                 {
@@@@ -882,7 +883,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
                 CopyLength += ((45 * 4) - (CopyLength % (45 * 4)));
             }
 
-            sprintf(tmpString, "W %ld %ld\n", ReturnValueLpcRamBase(IspEnvironment), CopyLength);
+            int rCheckSNPrintF9 = snprintf(tmpString, sizeof(tmpString), "W %ld %ld\n", ReturnValueLpcRamBase(IspEnvironment), CopyLength); assert( rCheckSNPrintF9 < sizeof(tmpString) );
 
             if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
             {
@@@@ -982,13 +983,13 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
 
                             // printf("block_CRC = %ld\n", block_CRC);
 
-                            sprintf(tmpString, "%ld\n", block_CRC);
+                            int rCheckSNPrintF10 = snprintf(tmpString, sizeof(tmpString), "%ld\n", block_CRC); assert( rCheckSNPrintF10 < sizeof(tmpString) );
 
                             SendComPort(IspEnvironment, tmpString);
 
                             ReceiveComPort(IspEnvironment, Answer, sizeof(Answer)-1, &realsize, 2,5000);
 
-                            sprintf(tmpString, "%ld\nOK\r\n", block_CRC);
+                            int rCheckSNPrintF11 = snprintf(tmpString, sizeof(tmpString), "%ld\nOK\r\n", block_CRC); assert( rCheckSNPrintF11 < sizeof(tmpString) );
 
                             if (strcmp(Answer, tmpString) != 0)
                             {
@@@@ -1009,12 +1010,12 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
                         }
 #else
                         // printf("block_CRC = %ld\n", block_CRC);
-                        sprintf(tmpString, "%ld\r\n", block_CRC);
+                        int rCheckSNPrintF12 = snprintf(tmpString, sizeof(tmpString), "%ld\r\n", block_CRC); assert( rCheckSNPrintF12 < sizeof(tmpString) );
                         SendComPort(IspEnvironment, tmpString);
 
                         ReceiveComPort(IspEnvironment, Answer, sizeof(Answer)-1, &realsize, 2,5000);
 
-                        sprintf(tmpString, "%ld\r\nOK\r\n", block_CRC);
+                        int rCheckSNPrintF13 = snprintf(tmpString, sizeof(tmpString), "%ld\r\nOK\r\n", block_CRC); assert( rCheckSNPrintF13 < sizeof(tmpString) );
                         if (strcmp(Answer, tmpString) != 0)
                         {
                             DebugPrintf(1, "Error on writing block_CRC (2)\n");
@@@@ -1032,13 +1033,13 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
 #if !defined COMPILE_FOR_LPC21
                 for (repeat = 0; repeat < 3; repeat++)
                 {
-                    sprintf(tmpString, "%ld\n", block_CRC);
+                    int rCheckSNPrintF10 = snprintf(tmpString, sizeof(tmpString), "%ld\n", block_CRC); assert( rCheckSNPrintF10 < sizeof(tmpString) );
 
                     SendComPort(IspEnvironment, tmpString);
 
                     ReceiveComPort(IspEnvironment, Answer, sizeof(Answer)-1, &realsize, 2,5000);
 
-                    sprintf(tmpString, "%ld\nOK\r\n", block_CRC);
+                    int rCheckSNPrintF11 = snprintf(tmpString, sizeof(tmpString), "%ld\nOK\r\n", block_CRC); assert( rCheckSNPrintF11 < sizeof(tmpString) );
 
                     if (strcmp(Answer, tmpString) != 0)
                     {
@@@@ -1058,12 +1059,12 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
                     return (ERROR_WRITE_CRC2);
                 }
 #else
-                sprintf(tmpString, "%ld\r\n", block_CRC);
+                int rCheckSNPrintF12 = snprintf(tmpString, sizeof(tmpString), "%ld\r\n", block_CRC); assert( rCheckSNPrintF12 < sizeof(tmpString) );
                 SendComPort(IspEnvironment, tmpString);
 
                 ReceiveComPort(IspEnvironment, Answer, sizeof(Answer)-1, &realsize, 2,5000);
 
-                sprintf(tmpString, "%ld\r\nOK\r\n", block_CRC);
+                int rCheckSNPrintF13 = snprintf(tmpString, sizeof(tmpString), "%ld\r\nOK\r\n", block_CRC); assert( rCheckSNPrintF13 < sizeof(tmpString) );
                 if (strcmp(Answer, tmpString) != 0)
                 {
                     DebugPrintf(1, "Error on writing block_CRC (4)\n");
@@@@ -1075,7 +1076,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
             if (IspEnvironment->BinaryOffset < ReturnValueLpcRamStart(IspEnvironment))
             {
                 // Prepare command must be repeated before every write
-                sprintf(tmpString, "P %ld %ld\n", Sector, Sector);
+                int rCheckSNPrintF7 = snprintf(tmpString, sizeof(tmpString), "P %ld %ld\n", Sector, Sector); assert( rCheckSNPrintF7 < sizeof(tmpString) );
 
                 if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
                 {
@@@@ -1107,7 +1108,7 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
                     CopyLength = LPCtypes[IspEnvironment->DetectedDevice].MaxCopySize;
                 }
 
-                sprintf(tmpString, "C %ld %ld %ld\n", SectorStart + SectorOffset, ReturnValueLpcRamBase(IspEnvironment), CopyLength);
+                int rCheckSNPrintF14 = snprintf(tmpString, sizeof(tmpString), "C %ld %ld %ld\n", SectorStart + SectorOffset, ReturnValueLpcRamBase(IspEnvironment), CopyLength); assert( rCheckSNPrintF14 < sizeof(tmpString) );
 
                 if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
                 {
@@@@ -1123,11 +1124,11 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
                     //and the compare result may not be correct.
                     if (SectorStart + SectorOffset<64)
                     {
-                        sprintf(tmpString, "M %d %ld %ld\n", 64, ReturnValueLpcRamBase(IspEnvironment) + (64 - SectorStart - SectorOffset), CopyLength-(64 - SectorStart - SectorOffset));
+                        int rCheckSNPrintF15 = snprintf(tmpString, sizeof(tmpString), "M %d %ld %ld\n", 64, ReturnValueLpcRamBase(IspEnvironment) + (64 - SectorStart - SectorOffset), CopyLength-(64 - SectorStart - SectorOffset)); assert( rCheckSNPrintF15 < sizeof(tmpString) );
                     }
                     else
                     {
-                        sprintf(tmpString, "M %ld %ld %ld\n", SectorStart + SectorOffset, ReturnValueLpcRamBase(IspEnvironment), CopyLength);
+                        int rCheckSNPrintF16 = snprintf(tmpString, sizeof(tmpString), "M %ld %ld %ld\n", SectorStart + SectorOffset, ReturnValueLpcRamBase(IspEnvironment), CopyLength); assert( rCheckSNPrintF16 < sizeof(tmpString) );
                     }
 
                     if (!SendAndVerify(IspEnvironment, tmpString, Answer, sizeof Answer))
@@@@ -1169,13 +1170,13 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
 
         if(LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC2XXX)
         {
-            sprintf(tmpString, "G %ld A\n", IspEnvironment->StartAddress);
+            int rCheckSNPrintF17 = snprintf(tmpString, sizeof(tmpString), "G %ld A\n", IspEnvironment->StartAddress); assert( rCheckSNPrintF17 < sizeof(tmpString) );
         }
         else if(LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC17XX ||
                 LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC13XX ||
                 LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC11XX)
         {
-            sprintf(tmpString, "G %ld T\n", IspEnvironment->StartAddress & ~1);
+            int rCheckSNPrintF18 = snprintf(tmpString, sizeof(tmpString), "G %ld T\n", IspEnvironment->StartAddress & ~1); assert( rCheckSNPrintF18 < sizeof(tmpString) );
         }
         else
         {
@@@@ -1198,13 +1199,13 @@@@ int NxpDownload(ISP_ENVIRONMENT *IspEnvironment)
             */
             if(LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC2XXX)
             {
-                sprintf(ExpectedAnswer, "G %ld A\n0", IspEnvironment->StartAddress);
+                int rCheckSNPrintF19 = snprintf(ExpectedAnswer, sizeof(ExpectedAnswer), "G %ld A\n0", IspEnvironment->StartAddress); assert( rCheckSNPrintF19 < sizeof(ExpectedAnswer) );
             }
             else if(LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC17XX ||
                     LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC13XX ||
                     LPCtypes[IspEnvironment->DetectedDevice].ChipVariant == CHIP_VARIANT_LPC11XX)
             {
-                sprintf(ExpectedAnswer, "G %ld T\n0", IspEnvironment->StartAddress & ~1);
+                int rCheckSNPrintF20 = snprintf(ExpectedAnswer, sizeof(ExpectedAnswer), "G %ld T\n0", IspEnvironment->StartAddress & ~1); assert( rCheckSNPrintF20 < sizeof(ExpectedAnswer) );
             }
             else
             {
@


1.2
log
@- update to 1.83

from Alexander Shiryaev (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@Initial revision
@
text
@d2 8
a9 3
--- lpcprog.c.orig	Sat Feb 20 11:14:08 2010
+++ lpcprog.c	Fri Jan 14 22:59:03 2011
@@@@ -529,7 +529,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d14 1
a14 1
+            snprintf(tmp_string, sizeof(tmp_string), "StrippedAnswer(Length=%d): '", strippedsize);
d17 2
a18 11
             if (strcmp(strippedAnswer, "Bootloader\r\n") == 0 && IspEnvironment->TerminalOnly == 0)
@@@@ -541,7 +541,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
                 xtal = atol(IspEnvironment->StringOscillator) * 1000;
                 ticks = (unsigned long)WatchDogSeconds * ((xtal + 15) / 16);
                 DebugPrintf(2, "Entering ISP; re-synchronizing (watchdog = %ld seconds)\n", WatchDogSeconds);
-                sprintf(temp, "T %lu\r\n", ticks);
+                snprintf(temp, sizeof(temp), "T %lu\r\n", ticks);
                 SendComPort(IspEnvironment, temp);
                 ReceiveComPort(IspEnvironment, Answer, sizeof(Answer)-1, &realsize, 1,100);
                 if (strcmp(Answer, "OK\r\n") != 0)
@@@@ -601,13 +601,13 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d23 1
a23 1
+    snprintf(temp, sizeof(temp), "%s\n", IspEnvironment->StringOscillator);
d30 1
a30 1
+    snprintf(temp, sizeof(temp), "%s\nOK\r\n", IspEnvironment->StringOscillator);
d34 1
a34 1
@@@@ -751,7 +751,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d39 1
a39 1
+        snprintf(tmpString, sizeof(tmpString), "P %d %d\n", 0, LPCtypes[IspEnvironment->DetectedDevice].FlashSectors-1);
d43 1
a43 1
@@@@ -759,7 +759,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d48 1
a48 1
+        snprintf(tmpString, sizeof(tmpString), "E %d %d\n", 0, LPCtypes[IspEnvironment->DetectedDevice].FlashSectors-1);
d52 1
a52 1
@@@@ -772,7 +772,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d57 1
a57 1
+        snprintf(tmpString, sizeof(tmpString), "P %d %d\n", 0, 0);
d61 1
a61 1
@@@@ -780,7 +780,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d66 1
a66 1
+        snprintf(tmpString, sizeof(tmpString), "E %d %d\n", 0, 0);
d70 1
a70 1
@@@@ -802,7 +802,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d75 1
a75 1
+            snprintf(tmpString, sizeof(tmpString), "P %ld %ld\n", Sector, Sector);
d79 1
a79 1
@@@@ -814,7 +814,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d84 1
a84 1
+                snprintf(tmpString, sizeof(tmpString), "E %ld %ld\n", Sector, Sector);
d88 1
a88 1
@@@@ -862,7 +862,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d93 1
a93 1
+            snprintf(tmpString, sizeof(tmpString), "W %ld %ld\n", ReturnValueLpcRamBase(IspEnvironment), CopyLength);
d97 1
a97 1
@@@@ -962,13 +962,13 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d102 1
a102 1
+                            snprintf(tmpString, sizeof(tmpString), "%ld\n", block_CRC);
d109 1
a109 1
+                            snprintf(tmpString, sizeof(tmpString), "%ld\nOK\r\n", block_CRC);
d113 1
a113 1
@@@@ -989,12 +989,12 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d118 1
a118 1
+                        snprintf(tmpString, sizeof(tmpString), "%ld\r\n", block_CRC);
d124 1
a124 1
+                        snprintf(tmpString, sizeof(tmpString), "%ld\r\nOK\r\n", block_CRC);
d128 1
a128 1
@@@@ -1012,13 +1012,13 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d133 1
a133 1
+                    snprintf(tmpString, sizeof(tmpString), "%ld\n", block_CRC);
d140 1
a140 1
+                    snprintf(tmpString, sizeof(tmpString), "%ld\nOK\r\n", block_CRC);
d144 1
a144 1
@@@@ -1038,12 +1038,12 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d149 1
a149 1
+                snprintf(tmpString, sizeof(tmpString), "%ld\r\n", block_CRC);
d155 1
a155 1
+                snprintf(tmpString, sizeof(tmpString), "%ld\r\nOK\r\n", block_CRC);
d159 1
a159 1
@@@@ -1055,7 +1055,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d164 1
a164 1
+                snprintf(tmpString, sizeof(tmpString), "P %ld %ld\n", Sector, Sector);
d168 1
a168 1
@@@@ -1087,7 +1087,7 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d173 1
a173 1
+                snprintf(tmpString, sizeof(tmpString), "C %ld %ld %ld\n", SectorStart + SectorOffset, ReturnValueLpcRamBase(IspEnvironment), CopyLength);
d177 1
a177 1
@@@@ -1103,11 +1103,11 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d182 1
a182 1
+                        snprintf(tmpString, sizeof(tmpString), "M %d %ld %ld\n", 64, ReturnValueLpcRamBase(IspEnvironment) + (64 - SectorStart - SectorOffset), CopyLength-(64 - SectorStart - SectorOffset));
d187 1
a187 1
+                        snprintf(tmpString, sizeof(tmpString), "M %ld %ld %ld\n", SectorStart + SectorOffset, ReturnValueLpcRamBase(IspEnvironment), CopyLength);
d191 1
a191 1
@@@@ -1153,13 +1153,13 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d196 1
a196 1
+            snprintf(tmpString, sizeof(tmpString), "G %ld A\n", IspEnvironment->StartAddress);
d203 1
a203 1
+            snprintf(tmpString, sizeof(tmpString), "G %ld T\n", IspEnvironment->StartAddress & ~1);
d207 1
a207 1
@@@@ -1182,13 +1182,13 @@@@ int PhilipsDownload(ISP_ENVIRONMENT *IspEnvironment)
d212 1
a212 1
+                snprintf(ExpectedAnswer, sizeof(tmpString), "G %ld A\n0", IspEnvironment->StartAddress);
d219 1
a219 1
+                snprintf(ExpectedAnswer, sizeof(tmpString), "G %ld T\n0", IspEnvironment->StartAddress & ~1);
@


1.1.1.1
log
@import lpc21isp 1.79

In-circuit programming (ISP) tool for the NXP (Philips) LPC1300 /
LPC1700 / LPC2000 series ARM7 / M0 / M3 microcontrollers.

from Alexander Shiryaev (MAINTAINER) with tweaks by me
ok landry@@
@
text
@@
