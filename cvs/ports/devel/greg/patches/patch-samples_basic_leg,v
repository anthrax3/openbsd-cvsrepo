head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.8
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	bcallah_20150112:1.1.1.1
	bcallah:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.01.12.05.51.22;	author bcallah;	state Exp;
branches
	1.1.1.1;
next	;
commitid	5jpo7cidG4BYBJHL;

1.1.1.1
date	2015.01.12.05.51.22;	author bcallah;	state Exp;
branches;
next	;
commitid	5jpo7cidG4BYBJHL;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Use a four-arg YY_INPUT() as per patch-compile_c.  Turn sprintf(3) into
snprintf(3).

--- samples/basic.leg.orig	Tue Oct  8 22:39:24 2013
+++ samples/basic.leg	Fri Jan  2 14:31:43 2015
@@@@ -20,6 +20,7 @@@@
 
 %{
 # include <stdio.h>
+# include <assert.h>
 
   typedef struct line line;
 
@@@@ -39,7 +40,7 @@@@
 
 # define min(x, y) ((x) < (y) ? (x) : (y))
 
-# define YY_INPUT(buf, result, max_size)	\
+# define YY_INPUT(buf, result, max_size, D)	\
   {						\
     if ((pc >= 0) && (pc < numLines))		\
       {						\
@@@@ -286,7 +287,8 @@@@ char *extend(char *name)
 {
   static char path[1024];
   int len= strlen(name);
-  sprintf(path, "%s%s", name, (((len > 4) && !strcasecmp(".bas", name + len - 4)) ? "" : ".bas"));
+  int n= snprintf(path, sizeof(path), "%s%s", name, (((len > 4) && !strcasecmp(".bas", name + len - 4)) ? "" : ".bas"));
+  assert(n < sizeof(path));
   return path;
 }
 
@


1.1.1.1
log
@Import devel/greg
ok benoit@@, tweaks and ok sthen@@

greg is a recursive-descent parser generator based on Ian Piumarta's
peg/leg.  It implements a formalism called Parsing Expression Grammars.
@
text
@@
