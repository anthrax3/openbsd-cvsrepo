head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.10
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.8
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	bcallah_20150112:1.1.1.1
	bcallah:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.01.12.05.51.22;	author bcallah;	state Exp;
branches
	1.1.1.1;
next	;
commitid	5jpo7cidG4BYBJHL;

1.1.1.1
date	2015.01.12.05.51.22;	author bcallah;	state Exp;
branches;
next	;
commitid	5jpo7cidG4BYBJHL;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Carry along the compiles.c diff.

--- greg.c.orig	Tue Oct  8 22:39:24 2013
+++ greg.c	Fri Jan  2 14:31:43 2015
@@@@ -67,7 +67,7 @@@@ int main()\n\
 #define YY_NAME(N) yy##N
 #endif
 #ifndef YY_INPUT
-#define YY_INPUT(buf, result, max_size)			\
+#define YY_INPUT(buf, result, max_size, D)		\
   {							\
     int yyc= fgetc(G->input);				\
     if ('\n' == yyc) ++G->lineno;      		\
@@@@ -189,7 +189,7 @@@@ YY_LOCAL(int) yyrefill(GREG *G)
       G->buflen *= 2;
       G->buf= (char*)YY_REALLOC(G->buf, G->buflen, G->data);
     }
-  YY_INPUT((G->buf + G->pos), yyn, (G->buflen - G->pos));
+  YY_INPUT((G->buf + G->pos), yyn, (G->buflen - G->pos), G->data);
   if (!yyn) return 0;
   G->limit += yyn;
   return 1;
@


1.1.1.1
log
@Import devel/greg
ok benoit@@, tweaks and ok sthen@@

greg is a recursive-descent parser generator based on Ian Piumarta's
peg/leg.  It implements a formalism called Parsing Expression Grammars.
@
text
@@
