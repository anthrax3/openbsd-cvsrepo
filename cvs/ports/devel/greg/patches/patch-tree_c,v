head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.8
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	bcallah_20150112:1.1.1.1
	bcallah:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.01.12.05.51.22;	author bcallah;	state Exp;
branches
	1.1.1.1;
next	;
commitid	5jpo7cidG4BYBJHL;

1.1.1.1
date	2015.01.12.05.51.22;	author bcallah;	state Exp;
branches;
next	;
commitid	5jpo7cidG4BYBJHL;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Switch from sprintf(3) to snprintf(3) for cases involving strings that
come from the user, at least.  They already use assert(3) in the code
so I just followed along.

--- tree.c.orig	Tue Oct  8 22:39:24 2013
+++ tree.c	Fri Jan  2 14:31:43 2015
@@@@ -140,8 +140,10 @@@@ Node *makeAction(char *text)
 {
   Node *node= newNode(Action);
   char name[1024];
+  size_t n;
   assert(thisRule);
-  sprintf(name, "_%d_%s", ++actionCount, thisRule->rule.name);
+  n = snprintf(name,sizeof(name),"_%d_%s",++actionCount,thisRule->rule.name);
+  assert(n < sizeof(name));
   node->action.name= strdup(name);
   node->action.text= strdup(text);
   node->action.list= actions;
@


1.1.1.1
log
@Import devel/greg
ok benoit@@, tweaks and ok sthen@@

greg is a recursive-descent parser generator based on Ian Piumarta's
peg/leg.  It implements a formalism called Parsing Expression Grammars.
@
text
@@
