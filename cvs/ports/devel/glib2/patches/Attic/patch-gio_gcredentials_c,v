head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2011.09.20.21.09.34;	author ajacoutot;	state dead;
branches;
next	1.2;

1.2
date	2011.05.28.07.32.06;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.28.13.07.53;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to glib2-2.29.92 (2.30 coming in the next few days).
Committing now (along with upcoming atk, pango and gtk+3 updates) during
the hackathon where we have time to fix all the eventual fallout (bulk
running).

ok jasper@@ robert@@
@
text
@$OpenBSD: patch-gio_gcredentials_c,v 1.2 2011/05/28 07:32:06 ajacoutot Exp $

From 77f4f5aa02458e6c7f909dc6087a39d9b75d0ba6 Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@openbsd.org>
Date: Fri, 27 May 2011 13:51:08 +0000
Subject: Add glib credentials support to OpenBSD.

--- gio/gcredentials.c.orig	Fri Nov 12 14:52:52 2010
+++ gio/gcredentials.c	Wed Dec  8 08:36:10 2010
@@@@ -27,6 +27,11 @@@@
 #include <sys/socket.h>
 #include <string.h>
 #endif
+#ifdef __OpenBSD__
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <string.h>
+#endif
 #include <stdlib.h>
 
 #include <gobject/gvaluecollector.h>
@@@@ -63,6 +68,9 @@@@
  *
  * On FreeBSD, the native credential type is a <type>struct cmsgcred</type>.
  * This corresponds to %G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED.
+ *
+ * On OpenBSD, the native credential type is a <type>struct sockpeercred</type>.
+ * This corresponds to %G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED.
  */
 
 /**
@@@@ -82,6 +90,8 @@@@ struct _GCredentials
   struct ucred native;
 #elif defined(__FreeBSD__)
   struct cmsgcred native;
+#elif defined(__OpenBSD__)
+  struct sockpeercred native;
 #else
 #ifdef __GNUC__
 #warning Please add GCredentials support for your OS
@@@@ -135,6 +145,10 @@@@ g_credentials_init (GCredentials *credentials)
   credentials->native.cmcred_pid  = getpid ();
   credentials->native.cmcred_euid = geteuid ();
   credentials->native.cmcred_gid  = getegid ();
+#elif defined(__OpenBSD__)
+  credentials->native.pid = getpid ();
+  credentials->native.uid = geteuid ();
+  credentials->native.gid = getegid ();
 #endif
 }
 
@@@@ -196,6 +210,16 @@@@ g_credentials_to_string (GCredentials *credentials)
     g_string_append_printf (ret, "uid=%" G_GINT64_FORMAT ",", (gint64) credentials->native.cmcred_euid);
   if (credentials->native.cmcred_gid != -1)
     g_string_append_printf (ret, "gid=%" G_GINT64_FORMAT ",", (gint64) credentials->native.cmcred_gid);
+#elif defined(__OpenBSD__)
+  g_string_append (ret, "openbsd-sockpeercred:");
+  if (credentials->native.pid != -1)
+    g_string_append_printf (ret, "pid=%" G_GINT64_FORMAT ",", (gint64) credentials->native.pid);
+  if (credentials->native.uid != -1)
+    g_string_append_printf (ret, "uid=%" G_GINT64_FORMAT ",", (gint64) credentials->native.uid);
+  if (credentials->native.gid != -1)
+    g_string_append_printf (ret, "gid=%" G_GINT64_FORMAT ",", (gint64) credentials->native.gid);
+  if (ret->str[ret->len - 1] == ',')
+    ret->str[ret->len - 1] = '\0';
 #else
   g_string_append (ret, "unknown");
 #endif
@@@@ -239,6 +263,9 @@@@ g_credentials_is_same_user (GCredentials  *credentials
 #elif defined(__FreeBSD__)
   if (credentials->native.cmcred_euid == other_credentials->native.cmcred_euid)
     ret = TRUE;
+#elif defined(__OpenBSD__)
+  if (credentials->native.uid == other_credentials->native.uid)
+    ret = TRUE;
 #else
   g_set_error_literal (error,
                        G_IO_ERROR,
@@@@ -300,6 +327,17 @@@@ g_credentials_get_native (GCredentials     *credential
     {
       ret = &credentials->native;
     }
+#elif defined(__OpenBSD__)
+  if (native_type != G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED)
+    {
+      g_warning ("g_credentials_get_native: Trying to get credentials of type %d but only "
+                 "G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED is supported.",
+                 native_type);
+    }
+  else
+    {
+      ret = &credentials->native;
+    }
 #else
   g_warning ("g_credentials_get_native: Trying to get credentials but GLib has no support "
              "for the native credentials type. Please add support.");
@@@@ -350,6 +388,17 @@@@ g_credentials_set_native (GCredentials     *credential
     {
       memcpy (&credentials->native, native, sizeof (struct cmsgcred));
     }
+#elif defined(__OpenBSD__)
+  if (native_type != G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED)
+    {
+      g_warning ("g_credentials_set_native: Trying to set credentials of type %d "
+                 "but only G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED is supported.",
+                 native_type);
+    }
+  else
+    {
+      memcpy (&credentials->native, native, sizeof (struct sockpeercred));
+    }
 #else
   g_warning ("g_credentials_set_native: Trying to set credentials but GLib has no support "
              "for the native credentials type. Please add support.");
@@@@ -388,6 +437,8 @@@@ g_credentials_get_unix_user (GCredentials    *credenti
   ret = credentials->native.uid;
 #elif defined(__FreeBSD__)
   ret = credentials->native.cmcred_euid;
+#elif defined(__OpenBSD__)
+  ret = credentials->native.uid;
 #else
   ret = -1;
   g_set_error_literal (error,
@@@@ -433,6 +484,9 @@@@ g_credentials_set_unix_user (GCredentials    *credenti
   ret = TRUE;
 #elif defined(__FreeBSD__)
   credentials->native.cmcred_euid = uid;
+  ret = TRUE;
+#elif defined(__OpenBSD__)
+  credentials->native.uid = uid;
   ret = TRUE;
 #else
   g_set_error_literal (error,
@


1.2
log
@Rewrite / add glib credentials support to OpenBSD.
Joint work with upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gcredentials_c,v 1.1 2011/04/28 13:07:53 ajacoutot Exp $
@


1.1
log
@Workaround the fact that we cannot pass SCM_CREDS over unix sockets:
implement the "intended" SCM_CREDS stack as if we had support for that
in the kernel (by-pass it almost completely).
send/recv a single null byte without creds, but on recv, just do a
getsockopt(SO_PEERCRED) and return that as if it coming from the cmsg.
This works as long as creds are not retreived from an fd which has
already been handed over to a different process via SCM_RIGHTS. It will
probably not be enough in the future but we'll see then.
all this work done by eric@@ (thanks!) and tested by myself

Enable support for g_credential*
Fix a couple of warnings.

ok eric@@ jasper@@
@
text
@d1 7
a7 1
$OpenBSD$
@

