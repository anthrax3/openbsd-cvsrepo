head	1.3;
access;
symbols
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2009.07.12.20.38.09;	author ajacoutot;	state dead;
branches;
next	1.2;

1.2
date	2009.04.13.09.03.34;	author ajacoutot;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2009.03.22.19.33.39;	author jasper;	state Exp;
branches;
next	;

1.2.2.1
date	2009.06.19.02.29.47;	author william;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- major update to glib2-2.20.4
- add missing REGRESS_DEPENDS

*remove previous version before trying to compile this*

Report any failure directly to me please.

tested by landry@@ on a sparc64 bulk, thanks!
ok jasper@@ on a previous diff
@
text
@$OpenBSD: patch-glib_gbase64_c,v 1.2 2009/04/13 09:03:34 ajacoutot Exp $

Security fix for CVE-2008-4316.
Fixes multiple integer overflows.
Patch adapted from upstream svn -r 7973.

--- glib/gbase64.c.orig	Fri Jan  9 06:36:18 2009
+++ glib/gbase64.c	Mon Apr 13 10:42:02 2009
@@@@ -54,8 +54,9 @@@@ static const char base64_alphabet[] =
  *
  * The output buffer must be large enough to fit all the data that will
  * be written to it. Due to the way base64 encodes you will need
- * at least: @@len * 4 / 3 + 6 bytes. If you enable line-breaking you will
- * need at least: @@len * 4 / 3 + @@len * 4 / (3 * 72) + 7 bytes.
+ * at least: (@@len / 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of
+ * non-zero state). If you enable line-breaking you will need at least:
+ * ((@@len / 3 + 1) * 4 + 4) / 72 + 1 bytes of extra space.
  *
  * @@break_lines is typically used when putting base64-encoded data in emails.
  * It breaks the lines at 72 columns instead of putting all of the text on 
@@@@ -233,8 +234,13 @@@@ g_base64_encode (const guchar *data, 
   g_return_val_if_fail (data != NULL, NULL);
   g_return_val_if_fail (len > 0, NULL);
 
-  /* We can use a smaller limit here, since we know the saved state is 0 */
-  out = g_malloc (len * 4 / 3 + 4);
+  /* We can use a smaller limit here, since we know the saved state is 0,
+     +1 is needed for trailing \0, also check for unlikely integer overflow */
+  if (len >= ((G_MAXSIZE - 1) / 4 - 1) * 3)
+    g_error("%s: input too large for Base64 encoding (%"G_GSIZE_FORMAT" chars)",
+        G_STRLOC, len);
+  out = g_malloc ((len / 3 + 1) * 4 + 1);
+
   outlen = g_base64_encode_step (data, len, FALSE, out, &state, &save);
   outlen += g_base64_encode_close (FALSE, out + outlen, &state, &save);
   out[outlen] = '\0';
@@@@ -275,7 +281,8 @@@@ static const unsigned char mime_base64_rank[256] = {
  *
  * The output buffer must be large enough to fit all the data that will
  * be written to it. Since base64 encodes 3 bytes in 4 chars you need
- * at least: @@len * 3 / 4 bytes.
+ * at least: (@@len / 4) * 3 + 3 bytes (+ 3 may be needed in case of non-zero
+ * state).
  * 
  * Return value: The number of bytes of output that was written
  *
@@@@ -358,7 +365,8 @@@@ g_base64_decode (const gchar *text,
 		 gsize       *out_len)
 {
   guchar *ret;
-  gint input_length, state = 0;
+  gsize input_length;
+  gint state = 0;
   guint save = 0;
   
   g_return_val_if_fail (text != NULL, NULL);
@@@@ -368,7 +376,9 @@@@ g_base64_decode (const gchar *text,
 
   g_return_val_if_fail (input_length > 1, NULL);
 
-  ret = g_malloc0 (input_length * 3 / 4);
+  /* We can use a smaller limit here, since we know the saved state is 0,
+     +1 used to avoid calling g_malloc0(0), and hence retruning NULL */
+  ret = g_malloc0 ((input_length / 4) * 3 + 1);
   
   *out_len = g_base64_decode_step (text, input_length, ret, &state, &save);
   
@


1.2
log
@- previous patch to fix CVE-2008-4316 was missing a part
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gbase64_c,v 1.1 2009/03/22 19:33:39 jasper Exp $
@


1.2.2.1
log
@MFC:
Security fix for CVE-2008-4316.
Fixes multiple integer overflows.

and

- previous patch to fix CVE-2008-4316 was missing a part

ok robert@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@Security fix for CVE-2008-4316.
Fixes multiple integer overflows.

ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD$
d7 2
a8 2
--- glib/gbase64.c.orig	Sun Mar 22 20:11:01 2009
+++ glib/gbase64.c	Sun Mar 22 20:12:17 2009
d21 1
a21 1
@@@@ -233,8 +234,11 @@@@ g_base64_encode (const guchar *data, 
d32 2
d37 1
a37 1
@@@@ -275,7 +279,8 @@@@ static const unsigned char mime_base64_rank[256] = {
d47 1
a47 1
@@@@ -358,7 +363,8 @@@@ g_base64_decode (const gchar *text,
d57 1
a57 1
@@@@ -368,7 +374,9 @@@@ g_base64_decode (const gchar *text,
@

