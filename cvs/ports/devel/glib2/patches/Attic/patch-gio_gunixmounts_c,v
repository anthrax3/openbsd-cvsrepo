head	1.19;
access;
symbols
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_6:1.14.0.2
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.2
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.19
date	2015.10.18.06.33.54;	author ajacoutot;	state dead;
branches;
next	1.18;
commitid	Fi2Y7NQlBcMCEhps;

1.18
date	2015.09.24.10.24.37;	author ajacoutot;	state Exp;
branches;
next	1.17;
commitid	DUq93USgb7wqZ2Vu;

1.17
date	2015.09.24.10.23.42;	author ajacoutot;	state dead;
branches;
next	1.16;
commitid	TJvyXNuKGn4RlcXO;

1.16
date	2015.03.27.16.00.00;	author ajacoutot;	state Exp;
branches;
next	1.15;
commitid	Ss3iHv4vfdeLMqRd;

1.15
date	2014.10.01.08.39.25;	author ajacoutot;	state dead;
branches;
next	1.14;
commitid	99NPoXJkUIRIpCSU;

1.14
date	2014.03.26.08.28.15;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2014.02.02.09.10.35;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2014.01.21.17.37.56;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2013.09.25.12.37.07;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2013.09.19.11.56.11;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2013.09.19.11.35.23;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.27.17.49.34;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2012.03.30.10.25.35;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.23.13.19.32;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.27.06.05.28;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.20.21.09.34;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2011.03.07.19.17.14;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.30.07.17.19;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.14.01.29.39;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Better workaround for BZ #753378.
@
text
@$OpenBSD: patch-gio_gunixmounts_c,v 1.18 2015/09/24 10:24:37 ajacoutot Exp $

XXX REVERT (makes gio-kqueue hang)
From 548c165a9f8386af29e8bb8243d8923e0f315c2e Mon Sep 17 00:00:00 2001
From: Ryan Lortie <desrt@@desrt.ca>
Date: Thu, 8 Jan 2015 01:35:33 -0500
Subject: Make GUnixMountMonitor per-contex

--- gio/gunixmounts.c.orig	Thu Sep 24 12:09:58 2015
+++ gio/gunixmounts.c	Thu Sep 24 12:11:08 2015
@@@@ -68,7 +68,6 @@@@
 #include "gfilemonitor.h"
 #include "glibintl.h"
 #include "gthemedicon.h"
-#include "gcontextspecificgroup.h"
 
 
 #ifdef HAVE_MNTENT_H
@@@@ -1275,50 +1274,124 @@@@ static guint signals[LAST_SIGNAL];
 struct _GUnixMountMonitor {
   GObject parent;
 
-  GMainContext *context;
+  GFileMonitor *fstab_monitor;
+  GFileMonitor *mtab_monitor;
+
+  GList *mount_poller_mounts;
+
+  GSource *proc_mounts_watch_source;
 };
 
 struct _GUnixMountMonitorClass {
   GObjectClass parent_class;
 };
 
+static GUnixMountMonitor *the_mount_monitor = NULL;
 
 G_DEFINE_TYPE (GUnixMountMonitor, g_unix_mount_monitor, G_TYPE_OBJECT);
 
-static GContextSpecificGroup  mount_monitor_group;
-static GFileMonitor          *fstab_monitor;
-static GFileMonitor          *mtab_monitor;
-static GSource               *proc_mounts_watch_source;
-static GList                 *mount_poller_mounts;
+static void
+g_unix_mount_monitor_finalize (GObject *object)
+{
+  GUnixMountMonitor *monitor;
+  
+  monitor = G_UNIX_MOUNT_MONITOR (object);
 
+  if (monitor->fstab_monitor)
+    {
+      g_file_monitor_cancel (monitor->fstab_monitor);
+      g_object_unref (monitor->fstab_monitor);
+    }
+  
+  if (monitor->proc_mounts_watch_source != NULL)
+    g_source_destroy (monitor->proc_mounts_watch_source);
+
+  if (monitor->mtab_monitor)
+    {
+      g_file_monitor_cancel (monitor->mtab_monitor);
+      g_object_unref (monitor->mtab_monitor);
+    }
+
+  g_list_free_full (monitor->mount_poller_mounts, (GDestroyNotify)g_unix_mount_free);
+
+  the_mount_monitor = NULL;
+
+  G_OBJECT_CLASS (g_unix_mount_monitor_parent_class)->finalize (object);
+}
+
+
 static void
+g_unix_mount_monitor_class_init (GUnixMountMonitorClass *klass)
+{
+  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
+
+  gobject_class->finalize = g_unix_mount_monitor_finalize;
+ 
+  /**
+   * GUnixMountMonitor::mounts-changed:
+   * @@monitor: the object on which the signal is emitted
+   * 
+   * Emitted when the unix mounts have changed.
+   */ 
+  signals[MOUNTS_CHANGED] =
+    g_signal_new (I_("mounts-changed"),
+		  G_TYPE_FROM_CLASS (klass),
+		  G_SIGNAL_RUN_LAST,
+		  0,
+		  NULL, NULL,
+		  g_cclosure_marshal_VOID__VOID,
+		  G_TYPE_NONE, 0);
+
+  /**
+   * GUnixMountMonitor::mountpoints-changed:
+   * @@monitor: the object on which the signal is emitted
+   * 
+   * Emitted when the unix mount points have changed.
+   */
+  signals[MOUNTPOINTS_CHANGED] =
+    g_signal_new (I_("mountpoints-changed"),
+		  G_TYPE_FROM_CLASS (klass),
+		  G_SIGNAL_RUN_LAST,
+		  0,
+		  NULL, NULL,
+		  g_cclosure_marshal_VOID__VOID,
+		  G_TYPE_NONE, 0);
+}
+
+static void
 fstab_file_changed (GFileMonitor      *monitor,
-                    GFile             *file,
-                    GFile             *other_file,
-                    GFileMonitorEvent  event_type,
-                    gpointer           user_data)
+		    GFile             *file,
+		    GFile             *other_file,
+		    GFileMonitorEvent  event_type,
+		    gpointer           user_data)
 {
+  GUnixMountMonitor *mount_monitor;
+
   if (event_type != G_FILE_MONITOR_EVENT_CHANGED &&
       event_type != G_FILE_MONITOR_EVENT_CREATED &&
       event_type != G_FILE_MONITOR_EVENT_DELETED)
     return;
 
-  g_context_specific_group_emit (&mount_monitor_group, signals[MOUNTPOINTS_CHANGED]);
+  mount_monitor = user_data;
+  g_signal_emit (mount_monitor, signals[MOUNTPOINTS_CHANGED], 0);
 }
 
 static void
 mtab_file_changed (GFileMonitor      *monitor,
-                   GFile             *file,
-                   GFile             *other_file,
-                   GFileMonitorEvent  event_type,
-                   gpointer           user_data)
+		   GFile             *file,
+		   GFile             *other_file,
+		   GFileMonitorEvent  event_type,
+		   gpointer           user_data)
 {
+  GUnixMountMonitor *mount_monitor;
+
   if (event_type != G_FILE_MONITOR_EVENT_CHANGED &&
       event_type != G_FILE_MONITOR_EVENT_CREATED &&
       event_type != G_FILE_MONITOR_EVENT_DELETED)
     return;
-
-  g_context_specific_group_emit (&mount_monitor_group, signals[MOUNTS_CHANGED]);
+  
+  mount_monitor = user_data;
+  g_signal_emit (mount_monitor, signals[MOUNTS_CHANGED], 0);
 }
 
 static gboolean
@@@@ -1326,21 +1399,23 @@@@ proc_mounts_changed (GIOChannel   *channel,
                      GIOCondition  cond,
                      gpointer      user_data)
 {
+  GUnixMountMonitor *mount_monitor = G_UNIX_MOUNT_MONITOR (user_data);
   if (cond & G_IO_ERR)
-    g_context_specific_group_emit (&mount_monitor_group, signals[MOUNTS_CHANGED]);
-
+    g_signal_emit (mount_monitor, signals[MOUNTS_CHANGED], 0);
   return TRUE;
 }
 
 static gboolean
 mount_change_poller (gpointer user_data)
 {
+  GUnixMountMonitor *mount_monitor;
   GList *current_mounts, *new_it, *old_it;
   gboolean has_changed = FALSE;
 
+  mount_monitor = user_data;
   current_mounts = _g_get_unix_mounts ();
 
-  for ( new_it = current_mounts, old_it = mount_poller_mounts;
+  for ( new_it = current_mounts, old_it = mount_monitor->mount_poller_mounts;
         new_it != NULL && old_it != NULL;
         new_it = g_list_next (new_it), old_it = g_list_next (old_it) )
     {
@@@@ -1353,55 +1428,34 @@@@ mount_change_poller (gpointer user_data)
   if (!(new_it == NULL && old_it == NULL))
     has_changed = TRUE;
 
-  g_list_free_full (mount_poller_mounts, (GDestroyNotify) g_unix_mount_free);
+  g_list_free_full (mount_monitor->mount_poller_mounts,
+                    (GDestroyNotify)g_unix_mount_free);
 
-  mount_poller_mounts = current_mounts;
+  mount_monitor->mount_poller_mounts = current_mounts;
 
   if (has_changed)
     {
-      mount_poller_time = (guint64) g_get_monotonic_time ();
-      g_context_specific_group_emit (&mount_monitor_group, signals[MOUNTPOINTS_CHANGED]);
+      mount_poller_time = (guint64)g_get_monotonic_time ();
+      g_signal_emit (mount_monitor, signals[MOUNTS_CHANGED], 0);
     }
 
   return TRUE;
 }
 
-
 static void
-mount_monitor_stop (void)
+g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
 {
-  if (fstab_monitor)
-    {
-      g_file_monitor_cancel (fstab_monitor);
-      g_object_unref (fstab_monitor);
-    }
-
-  if (proc_mounts_watch_source != NULL)
-    g_source_destroy (proc_mounts_watch_source);
-
-  if (mtab_monitor)
-    {
-      g_file_monitor_cancel (mtab_monitor);
-      g_object_unref (mtab_monitor);
-    }
-
-  g_list_free_full (mount_poller_mounts, (GDestroyNotify) g_unix_mount_free);
-}
-
-static void
-mount_monitor_start (void)
-{
   GFile *file;
-
+    
   if (get_fstab_file () != NULL)
     {
       file = g_file_new_for_path (get_fstab_file ());
-      fstab_monitor = g_file_monitor_file (file, 0, NULL, NULL);
+      monitor->fstab_monitor = g_file_monitor_file (file, 0, NULL, NULL);
       g_object_unref (file);
-
-      g_signal_connect (fstab_monitor, "changed", (GCallback)fstab_file_changed, NULL);
+      
+      g_signal_connect (monitor->fstab_monitor, "changed", (GCallback)fstab_file_changed, monitor);
     }
-
+  
   if (get_mtab_monitor_file () != NULL)
     {
       const gchar *mtab_path;
@@@@ -1423,93 +1477,39 @@@@ mount_monitor_start (void)
             }
           else
             {
-              proc_mounts_watch_source = g_io_create_watch (proc_mounts_channel, G_IO_ERR);
-              g_source_set_callback (proc_mounts_watch_source,
+              monitor->proc_mounts_watch_source = g_io_create_watch (proc_mounts_channel, G_IO_ERR);
+              g_source_set_callback (monitor->proc_mounts_watch_source,
                                      (GSourceFunc) proc_mounts_changed,
-                                     NULL, NULL);
-              g_source_attach (proc_mounts_watch_source,
+                                     monitor,
+                                     NULL);
+              g_source_attach (monitor->proc_mounts_watch_source,
                                g_main_context_get_thread_default ());
-              g_source_unref (proc_mounts_watch_source);
+              g_source_unref (monitor->proc_mounts_watch_source);
               g_io_channel_unref (proc_mounts_channel);
             }
         }
       else
         {
           file = g_file_new_for_path (mtab_path);
-          mtab_monitor = g_file_monitor_file (file, 0, NULL, NULL);
+          monitor->mtab_monitor = g_file_monitor_file (file, 0, NULL, NULL);
           g_object_unref (file);
-          g_signal_connect (mtab_monitor, "changed", (GCallback)mtab_file_changed, NULL);
+          g_signal_connect (monitor->mtab_monitor, "changed", (GCallback)mtab_file_changed, monitor);
         }
     }
   else
     {
-      proc_mounts_watch_source = g_timeout_source_new_seconds (3);
-      mount_poller_mounts = _g_get_unix_mounts ();
+      monitor->proc_mounts_watch_source = g_timeout_source_new_seconds (3);
+      monitor->mount_poller_mounts = _g_get_unix_mounts ();
       mount_poller_time = (guint64)g_get_monotonic_time ();
-      g_source_set_callback (proc_mounts_watch_source,
-                             mount_change_poller,
-                             NULL, NULL);
-      g_source_attach (proc_mounts_watch_source,
+      g_source_set_callback (monitor->proc_mounts_watch_source,
+                             (GSourceFunc)mount_change_poller,
+                             monitor, NULL);
+      g_source_attach (monitor->proc_mounts_watch_source,
                        g_main_context_get_thread_default ());
-      g_source_unref (proc_mounts_watch_source);
+      g_source_unref (monitor->proc_mounts_watch_source);
     }
 }
 
-static void
-g_unix_mount_monitor_finalize (GObject *object)
-{
-  GUnixMountMonitor *monitor;
-
-  monitor = G_UNIX_MOUNT_MONITOR (object);
-
-  g_context_specific_group_remove (&mount_monitor_group, monitor->context, monitor, mount_monitor_stop);
-
-  G_OBJECT_CLASS (g_unix_mount_monitor_parent_class)->finalize (object);
-}
-
-static void
-g_unix_mount_monitor_class_init (GUnixMountMonitorClass *klass)
-{
-  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
-
-  gobject_class->finalize = g_unix_mount_monitor_finalize;
- 
-  /**
-   * GUnixMountMonitor::mounts-changed:
-   * @@monitor: the object on which the signal is emitted
-   * 
-   * Emitted when the unix mounts have changed.
-   */ 
-  signals[MOUNTS_CHANGED] =
-    g_signal_new (I_("mounts-changed"),
-		  G_TYPE_FROM_CLASS (klass),
-		  G_SIGNAL_RUN_LAST,
-		  0,
-		  NULL, NULL,
-		  g_cclosure_marshal_VOID__VOID,
-		  G_TYPE_NONE, 0);
-
-  /**
-   * GUnixMountMonitor::mountpoints-changed:
-   * @@monitor: the object on which the signal is emitted
-   * 
-   * Emitted when the unix mount points have changed.
-   */
-  signals[MOUNTPOINTS_CHANGED] =
-    g_signal_new (I_("mountpoints-changed"),
-		  G_TYPE_FROM_CLASS (klass),
-		  G_SIGNAL_RUN_LAST,
-		  0,
-		  NULL, NULL,
-		  g_cclosure_marshal_VOID__VOID,
-		  G_TYPE_NONE, 0);
-}
-
-static void
-g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
-{
-}
-
 /**
  * g_unix_mount_monitor_set_rate_limit:
  * @@mount_monitor: a #GUnixMountMonitor
@@@@ -1537,16 +1537,12 @@@@ g_unix_mount_monitor_set_rate_limit (GUnixMountMonitor
 /**
  * g_unix_mount_monitor_get:
  *
- * Gets the #GUnixMountMonitor for the current thread-default main
- * context.
+ * Gets the #GUnixMountMonitor.
  *
  * The mount monitor can be used to monitor for changes to the list of
  * mounted filesystems as well as the list of mount points (ie: fstab
  * entries).
  *
- * You must only call g_object_unref() on the return value from under
- * the same main context as you called this function.
- *
  * Returns: (transfer full): the #GUnixMountMonitor.
  *
  * Since: 2.44
@@@@ -1554,10 +1550,13 @@@@ g_unix_mount_monitor_set_rate_limit (GUnixMountMonitor
 GUnixMountMonitor *
 g_unix_mount_monitor_get (void)
 {
-  return g_context_specific_group_get (&mount_monitor_group,
-                                       G_TYPE_UNIX_MOUNT_MONITOR,
-                                       G_STRUCT_OFFSET(GUnixMountMonitor, context),
-                                       mount_monitor_start);
+  if (the_mount_monitor == NULL)
+    {
+      the_mount_monitor = g_object_new (G_TYPE_UNIX_MOUNT_MONITOR, NULL);
+      return the_mount_monitor;
+    }
+  
+  return g_object_ref (the_mount_monitor);
 }
 
 /**
@


1.18
log
@Eaten by cvs...
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.16 2015/03/27 16:00:00 ajacoutot Exp $
@


1.17
log
@Update to glib2-2.46.0.
@
text
@d7 1
a7 1
Subject: Make GUnixMountMonitor per-context
d9 2
a10 2
--- gio/gunixmounts.c.orig	Fri Mar 20 18:33:38 2015
+++ gio/gunixmounts.c	Fri Mar 27 11:59:28 2015
d89 1
a89 1
+    g_signal_new ("mounts-changed",
d104 1
a104 1
+    g_signal_new ("mountpoints-changed",
d332 1
a332 1
-    g_signal_new ("mounts-changed",
d347 1
a347 1
-    g_signal_new ("mountpoints-changed",
@


1.16
log
@Update to glib2-2.44.0.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.15
log
@Update to glib2-2.42.0.

bulk testing and ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.14 2014/03/26 08:28:15 ajacoutot Exp $
d3 5
a7 1
https://bugzilla.gnome.org/show_bug.cgi?id=583330
d9 7
a15 5
--- gio/gunixmounts.c.orig	Wed Feb 12 21:08:36 2014
+++ gio/gunixmounts.c	Tue Mar 25 08:12:54 2014
@@@@ -150,6 +150,9 @@@@ struct _GUnixMountMonitor {
   GFileMonitor *fstab_monitor;
   GFileMonitor *mtab_monitor;
d17 10
a26 1
+  guint mount_poller_source;
d29 5
a33 1
   GSource *proc_mounts_watch_source;
d36 1
a36 3
@@@@ -162,6 +165,8 @@@@ static GUnixMountMonitor *the_mount_monitor = NULL;
 static GList *_g_get_unix_mounts (void);
 static GList *_g_get_unix_mount_points (void);
a37 2
+static guint64 mount_poller_time = 0;
+
d40 11
a50 23
 #define MOUNT_POLL_INTERVAL 4000
@@@@ -188,6 +193,7 @@@@ G_DEFINE_TYPE (GUnixMountMonitor, g_unix_mount_monitor
 #endif
 
 #if (defined(HAVE_GETVFSSTAT) || defined(HAVE_GETFSSTAT)) && defined(HAVE_FSTAB_H) && defined(HAVE_SYS_MOUNT_H)
+#include <sys/param.h>
 #include <sys/ucred.h>
 #include <sys/mount.h>
 #include <fstab.h>
@@@@ -1134,6 +1140,10 @@@@ get_mounts_timestamp (void)
       if (stat (monitor_file, &buf) == 0)
 	return (guint64)buf.st_mtime;
     }
+  else
+    {
+      return mount_poller_time;
+    }
   return 0;
 }
 
@@@@ -1279,6 +1289,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
       g_object_unref (monitor->mtab_monitor);
     }
d52 1
a52 1
+  if (monitor->mount_poller_source > 0)
d54 2
a55 3
+      g_source_remove (monitor->mount_poller_source);
+      g_list_foreach (monitor->mount_poller_mounts, (GFunc)g_unix_mount_free, NULL);
+      g_list_free (monitor->mount_poller_mounts);
d57 3
d61 1
a61 17
   the_mount_monitor = NULL;
 
   G_OBJECT_CLASS (g_unix_mount_monitor_parent_class)->finalize (object);
@@@@ -1360,6 +1377,52 @@@@ mtab_file_changed (GFileMonitor      *monitor,
 }
 
 static gboolean
+mount_change_poller (gpointer user_data)
+{
+  GUnixMountMonitor *mount_monitor;
+  GList *current_mounts;
+  gboolean has_changed = FALSE;
+
+  mount_monitor = user_data;
+  current_mounts = _g_get_unix_mounts ();
+
+  if (g_list_length (current_mounts) != g_list_length (mount_monitor->mount_poller_mounts))
d63 2
a64 2
+      g_list_foreach (mount_monitor->mount_poller_mounts, (GFunc)g_unix_mount_free, NULL);
+      has_changed = TRUE;
a65 3
+  else
+    {
+      int i;
d67 3
a69 9
+      for (i = 0; i < g_list_length (current_mounts); i++)
+        {
+          GUnixMountEntry *m1;
+         GUnixMountEntry *m2;
+
+         m1 = (GUnixMountEntry *)g_list_nth_data (current_mounts, i);
+         m2 = (GUnixMountEntry *)g_list_nth_data (mount_monitor->mount_poller_mounts, i);
+          if (! has_changed && g_unix_mount_compare (m1, m2) != 0)
+            has_changed = TRUE;
d71 2
a72 3
+         g_unix_mount_free (m2);
+       }
+    }
a73 2
+  g_list_free (mount_monitor->mount_poller_mounts);
+  mount_monitor->mount_poller_mounts = current_mounts;
d75 4
a78 5
+  if (has_changed)
+    {
+      mount_poller_time = (guint64)time (NULL);
+      g_signal_emit (mount_monitor, signals[MOUNTS_CHANGED], 0);
+    }
d80 31
a110 1
+  return TRUE;
d113 12
d126 36
a161 2
+static gboolean
 proc_mounts_changed (GIOChannel   *channel,
d164 116
a279 1
@@@@ -1423,6 +1486,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
d281 2
a282 1
           g_signal_connect (monitor->mtab_monitor, "changed", (GCallback)mtab_file_changed, monitor);
d284 6
a289 3
+    }
+  else
+    {
d291 12
a302 2
+      mount_poller_time = (guint64)time (NULL);
+      monitor->mount_poller_source = g_timeout_add_seconds (3, (GSourceFunc)mount_change_poller, monitor);
d306 94
@


1.14
log
@Update to glib2-2.40.0.
First step of the road to GNOME 3.12...

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.13 2014/02/02 09:10:35 ajacoutot Exp $
@


1.13
log
@One chunk pushed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.12 2014/01/21 17:37:56 ajacoutot Exp $
d5 3
a7 8
From 7cf221aadb4f9bd6e7f015fb327ae551bb52b08f Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@gnome.org>
Date: Tue, 21 Jan 2014 16:25:35 +0000
Subject: gio: extend the system_internal lists with BSD paths

--- gio/gunixmounts.c.orig	Thu Nov  7 16:29:13 2013
+++ gio/gunixmounts.c	Tue Jan 21 17:15:11 2014
@@@@ -155,6 +155,9 @@@@ struct _GUnixMountMonitor {
d17 1
a17 1
@@@@ -167,6 +170,8 @@@@ static GUnixMountMonitor *the_mount_monitor = NULL;
d26 1
a26 1
@@@@ -193,6 +198,7 @@@@ G_DEFINE_TYPE (GUnixMountMonitor, g_unix_mount_monitor
d34 1
a34 45
@@@@ -243,22 +249,31 @@@@ g_unix_is_mount_path_system_internal (const char *moun
     "/",              /* we already have "Filesystem root" in Nautilus */ 
     "/bin",
     "/boot",
+    "/compat/linux/proc",
+    "/compat/linux/sys",
     "/dev",
     "/etc",
     "/home",
     "/lib",
     "/lib64",
+    "/libexec",
     "/live/cow",
     "/live/image",
     "/media",
     "/mnt",
     "/opt",
+    "/rescue",
     "/root",
     "/sbin",
     "/srv",
     "/tmp",
     "/usr",
+    "/usr/X11R6",
     "/usr/local",
+    "/usr/obj",
+    "/usr/ports",
+    "/usr/src",
+    "/usr/xobj",
     "/var",
     "/var/crash",
     "/var/local",
@@@@ -299,8 +314,11 @@@@ guess_system_internal (const char *mountpoint,
     "devfs",
     "devpts",
     "ecryptfs",
+    "fdescfs",
     "kernfs",
     "linprocfs",
+    "mfs",
+    "nullfs",
     "proc",
     "procfs",
     "ptyfs",
@@@@ -1128,6 +1146,10 @@@@ get_mounts_timestamp (void)
d45 1
a45 1
@@@@ -1273,6 +1295,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d59 1
a59 1
@@@@ -1354,6 +1383,52 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d112 1
a112 1
@@@@ -1417,6 +1492,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.12
log
@Add more paths to system_internal.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.11 2013/09/25 12:37:07 ajacoutot Exp $
a2 1
https://bugzilla.gnome.org/show_bug.cgi?id=722712
d4 5
@


1.11
log
@Major update to glib2-2.38.0 -- requirement for the WIP GNOME 3.10 update.
This and the following updates: atk, gdk-pixbuf2, pango, at-spi2-core,
at-spi2-atk, py-atspi and gtk+3 have been tested in a bulk by landry@@ (10x!)

Fallouts are:
- x11/gnome/anjuta: will be fixed within the next 2 or 3 days by the 3.10 update
- www/chromium: robert@@ is working on an update (removing -Werror should also
allow it to build)

ok landry@@ jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.10 2013/09/19 11:56:11 ajacoutot Exp $
d3 1
d6 2
a7 2
--- gio/gunixmounts.c.orig	Thu Aug  8 12:00:40 2013
+++ gio/gunixmounts.c	Tue Sep 24 10:05:43 2013
d67 1
a67 1
@@@@ -299,6 +314,7 @@@@ guess_system_internal (const char *mountpoint,
d74 2
d77 3
a79 1
@@@@ -1128,6 +1144,10 @@@@ get_mounts_timestamp (void)
d90 1
a90 1
@@@@ -1273,6 +1293,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d104 1
a104 1
@@@@ -1354,6 +1381,52 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d157 1
a157 1
@@@@ -1417,6 +1490,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.10
log
@Correctly flag hasmntopt usage, from upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.9 2013/09/19 11:35:23 ajacoutot Exp $
d5 2
a6 7
From d474309c3f439fbe8c4af8cd9acac70235cf67a3 Mon Sep 17 00:00:00 2001
From: Lionel Landwerlin <llandwerlin@@gmail.com>
Date: Fri, 05 Apr 2013 14:18:28 +0000
Subject: gunixmounts: correctly flag hasmntopt usage

--- gio/gunixmounts.c.orig	Wed Aug  7 16:34:32 2013
+++ gio/gunixmounts.c	Thu Sep 19 13:42:05 2013
d74 1
a74 13
@@@@ -774,9 +790,11 @@@@ _g_get_unix_mount_points (void)
           (strcmp (mntent->mnt_dir, "none") == 0))
 	continue;
 
+#ifdef HAVE_HASMNTOPT
       /* We ignore bind fstab entries, as we ignore bind mounts anyway */
       if (hasmntopt (mntent, "bind"))
         continue;
+#endif
 
       mount_entry = g_new0 (GUnixMountPoint, 1);
       mount_entry->mount_path = g_strdup (mntent->mnt_dir);
@@@@ -1126,6 +1144,10 @@@@ get_mounts_timestamp (void)
d85 1
a85 1
@@@@ -1271,6 +1293,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d99 1
a99 1
@@@@ -1352,6 +1381,52 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d152 1
a152 1
@@@@ -1415,6 +1490,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.9
log
@Sync patch-gio_gunixmounts_c with FreeBSD.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.8 2013/03/27 17:49:34 ajacoutot Exp $
d4 5
a8 2
From FreeBSD: poll the list of mounted filesystems since we can't rely
on checking for mtab updates like other systems.
d11 1
a11 1
+++ gio/gunixmounts.c	Thu Sep 19 12:51:59 2013
d79 13
a91 1
@@@@ -1126,6 +1142,10 @@@@ get_mounts_timestamp (void)
d102 1
a102 1
@@@@ -1271,6 +1291,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d116 1
a116 1
@@@@ -1352,6 +1379,52 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d169 1
a169 1
@@@@ -1415,6 +1488,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.8
log
@Major update to glib2-2.36.0.
*huge* thank to landry@@ for running a bulk with this diff and the few
others that are going to be committed and for informing me of the
breakage that needed some love.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.7 2012/03/30 10:25:35 ajacoutot Exp $
d7 4
a10 3
--- gio/gunixmounts.c.orig	Wed Mar 13 14:39:09 2013
+++ gio/gunixmounts.c	Tue Mar 26 11:02:30 2013
@@@@ -156,6 +156,9 @@@@ struct _GUnixMountMonitor {
a12 2
   GSource *proc_mounts_watch_source;
+
d15 2
a18 1
 struct _GUnixMountMonitorClass {
d36 1
a36 1
@@@@ -243,11 +249,14 @@@@ g_unix_is_mount_path_system_internal (const char *moun
d51 5
a55 1
@@@@ -258,7 +267,12 @@@@ g_unix_is_mount_path_system_internal (const char *moun
d63 1
a64 1
+    "/usr/src",
d68 9
a76 1
@@@@ -1126,6 +1140,10 @@@@ get_mounts_timestamp (void)
d87 1
a87 1
@@@@ -1271,6 +1289,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d101 1
a101 2
@@@@ -1362,6 +1387,51 @@@@ proc_mounts_changed (GIOChannel   *channel,
   return TRUE;
d104 1
a104 1
+static gboolean
d126 1
a126 1
+	  GUnixMountEntry *m2;
d128 2
a129 2
+	  m1 = (GUnixMountEntry *)g_list_nth_data (current_mounts, i);
+	  m2 = (GUnixMountEntry *)g_list_nth_data (mount_monitor->mount_poller_mounts, i);
d133 2
a134 2
+	  g_unix_mount_free (m2);
+	}
d149 6
a154 4
 static void
 g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
 {
@@@@ -1415,6 +1485,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.7
log
@Fix logic to repair mounts monitoring.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.6 2012/03/23 13:19:32 ajacoutot Exp $
d7 2
a8 2
--- gio/gunixmounts.c.orig	Sun Mar 18 03:35:25 2012
+++ gio/gunixmounts.c	Fri Mar 30 12:12:34 2012
d64 1
a64 1
@@@@ -1122,6 +1136,10 @@@@ get_mounts_timestamp (void)
d75 1
a75 1
@@@@ -1267,6 +1285,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d89 1
a89 1
@@@@ -1358,6 +1383,51 @@@@ proc_mounts_changed (GIOChannel   *channel,
d141 1
a141 1
@@@@ -1411,6 +1481,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.6
log
@Major update to glib2-2.31.20.
Note that this is a devel version but the new stable is expected within a
week or so. Committing now so that I have time to deal with the breakage
and can start the upcoming gnome3 update.

Please contact me _directly_ if you find any issue with it.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.5 2011/09/27 06:05:28 ajacoutot Exp $
d7 2
a8 2
--- gio/gunixmounts.c.orig	Tue Feb 21 01:10:54 2012
+++ gio/gunixmounts.c	Fri Mar 16 12:38:35 2012
d141 1
a141 7
@@@@ -1406,10 +1476,16 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
         }
       else
         {
+#if defined __linux__
           file = g_file_new_for_path (mtab_path);
           monitor->mtab_monitor = g_file_monitor_file (file, 0, NULL, NULL);
a143 5
+#else
+          monitor->mount_poller_mounts = _g_get_unix_mounts ();
+          mount_poller_time = (guint64)time (NULL);
+          monitor->mount_poller_source = g_timeout_add_seconds (3, (GSourceFunc)mount_change_poller, monitor);
+#endif
d145 6
d153 1
@


1.5
log
@Update to stable glib2-2.30.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.4 2011/09/20 21:09:34 ajacoutot Exp $
d7 4
a10 3
--- gio/gunixmounts.c.orig	Wed Sep 21 21:17:06 2011
+++ gio/gunixmounts.c	Tue Sep 27 07:52:34 2011
@@@@ -153,6 +153,9 @@@@ struct _GUnixMountMonitor {
d12 1
a12 2
   GFileMonitor *fstab_monitor;
   GFileMonitor *mtab_monitor;
d19 1
a19 1
@@@@ -164,6 +167,8 @@@@ static GUnixMountMonitor *the_mount_monitor = NULL;
d28 1
a28 1
@@@@ -190,6 +195,7 @@@@ G_DEFINE_TYPE (GUnixMountMonitor, g_unix_mount_monitor
d36 1
a36 1
@@@@ -240,11 +246,14 @@@@ g_unix_is_mount_path_system_internal (const char *moun
d51 1
a51 1
@@@@ -255,7 +264,12 @@@@ g_unix_is_mount_path_system_internal (const char *moun
d64 1
a64 1
@@@@ -1111,6 +1125,10 @@@@ get_mounts_timestamp (void)
d75 1
a75 1
@@@@ -1253,6 +1271,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d89 2
a90 2
@@@@ -1333,6 +1358,51 @@@@ mtab_file_changed (GFileMonitor      *monitor,
   g_signal_emit (mount_monitor, signals[MOUNTS_CHANGED], 0);
d141 15
a155 10
@@@@ -1354,6 +1424,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
       g_object_unref (file);
       
       g_signal_connect (monitor->mtab_monitor, "changed", (GCallback)mtab_file_changed, monitor);
+    }
+  else
+    {
+      monitor->mount_poller_mounts = _g_get_unix_mounts ();
+      mount_poller_time = (guint64)time (NULL);
+      monitor->mount_poller_source = g_timeout_add_seconds (3, (GSourceFunc)mount_change_poller, monitor);
a157 1
 
@


1.4
log
@Update to glib2-2.29.92 (2.30 coming in the next few days).
Committing now (along with upcoming atk, pango and gtk+3 updates) during
the hackathon where we have time to fix all the eventual fallout (bulk
running).

ok jasper@@ robert@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.3 2011/03/07 19:17:14 ajacoutot Exp $
d7 2
a8 7
From 0db338bdb0e9a0216681b6db7286ffb0f1711db1 Mon Sep 17 00:00:00 2001
From: Antoine Jacoutot <ajacoutot@@openbsd.org>
Date: Mon, 19 Sep 2011 23:18:45 +0000
Subject: gunixmounts: Fix compilation on BSD

--- gio/gunixmounts.c.orig	Thu Sep 15 02:10:44 2011
+++ gio/gunixmounts.c	Tue Sep 20 01:14:25 2011
d64 1
a64 9
@@@@ -1023,6 +1037,7 @@@@ _g_get_unix_mount_points (void)
   GList *return_list;
 #ifdef HAVE_SYS_SYSCTL_H
   int usermnt = 0;
+  size_t len = sizeof(usermnt);
   struct stat sb;
 #endif
   
@@@@ -1108,6 +1123,10 @@@@ get_mounts_timestamp (void)
d75 1
a75 1
@@@@ -1250,6 +1269,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d89 1
a89 1
@@@@ -1330,6 +1356,51 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d141 1
a141 1
@@@@ -1351,6 +1422,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.3
log
@Major update to glib2-2.28.2.

This (and the related 20 to 30 updates) has been tested twice in a bulk
by landry@@, thanks!
Runtime testing by myself under heavy GNOME usage...
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.2 2010/09/30 07:17:19 ajacoutot Exp $
d7 8
a14 3
--- gio/gunixmounts.c.orig	Fri Jan  7 17:55:29 2011
+++ gio/gunixmounts.c	Mon Jan 31 10:14:44 2011
@@@@ -135,6 +135,9 @@@@ struct _GUnixMountMonitor {
d24 1
a24 1
@@@@ -146,6 +149,8 @@@@ static GUnixMountMonitor *the_mount_monitor = NULL;
d33 1
a33 1
@@@@ -172,6 +177,7 @@@@ G_DEFINE_TYPE (GUnixMountMonitor, g_unix_mount_monitor
d36 1
a36 1
 #if defined(HAVE_GETMNTINFO) && defined(HAVE_FSTAB_H) && defined(HAVE_SYS_MOUNT_H)
d41 1
a41 1
@@@@ -222,20 +228,28 @@@@ g_unix_is_mount_path_system_internal (const char *moun
d53 2
d56 1
a56 5
     "/mnt",
     "/opt",
+    "/rescue",
     "/root",
     "/sbin",
d64 1
d67 11
a77 3
     "/var/log/audit", /* https://bugzilla.redhat.com/show_bug.cgi?id=333041 */
     "/var/tmp",       /* https://bugzilla.redhat.com/show_bug.cgi?id=335241 */
@@@@ -1056,6 +1070,10 @@@@ get_mounts_timestamp (void)
d88 1
a88 1
@@@@ -1198,6 +1216,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d102 1
a102 1
@@@@ -1278,6 +1303,51 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d154 1
a154 1
@@@@ -1299,6 +1369,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.2
log
@*** HEADS UP!

Major update to glib2-2.26.0.
This starts a flood commit of several big updates (gtk+2 and GNOME 2.32).

Please note that there will be some WANTLIB/DEPENDS breakage probably,
this went into several bulks but it's impossible to catch everything.
Any gtk+2/glib2 related build failures, please talk to me or jasper@@

The ports tree is expected to be in a unconsistent state for a couple of
days to give us time to fix everything we didn't spot or any runtime
issue with the latest GNOME.
We do this now so that we have packages with all the latest major bumped
libraries at p2k10.

Thanks to landry@@ and his zomg!cluster for the bulks and reports.

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gio_gunixmounts_c,v 1.1 2009/10/14 01:29:39 ajacoutot Exp $
d7 2
a8 2
--- gio/gunixmounts.c.orig	Mon Aug  9 15:34:46 2010
+++ gio/gunixmounts.c	Mon Sep 27 14:42:36 2010
d76 1
a76 1
@@@@ -1196,6 +1214,13 @@@@ g_unix_mount_monitor_finalize (GObject *object)
d90 1
a90 1
@@@@ -1276,6 +1301,51 @@@@ mtab_file_changed (GFileMonitor      *monitor,
d142 1
a142 1
@@@@ -1297,6 +1367,12 @@@@ g_unix_mount_monitor_init (GUnixMountMonitor *monitor)
@


1.1
log
@From FreeBSD: poll the list of mounted filesystems since we can't rely
on checking for mtab updates like other systems.
@
text
@d1 1
a1 1
$OpenBSD$
d7 3
a9 3
--- gio/gunixmounts.c.orig	Wed Apr  1 01:04:20 2009
+++ gio/gunixmounts.c	Wed Oct 14 03:13:38 2009
@@@@ -136,6 +136,9 @@@@ struct _GUnixMountMonitor {
d19 1
a19 1
@@@@ -147,6 +150,8 @@@@ static GUnixMountMonitor *the_mount_monitor = NULL;
d28 1
a28 1
@@@@ -173,6 +178,7 @@@@ G_DEFINE_TYPE (GUnixMountMonitor, g_unix_mount_monitor
d36 1
a36 1
@@@@ -223,20 +229,28 @@@@ g_unix_is_mount_path_system_internal (const char *moun
@

