head	1.15;
access;
symbols
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3;
locks; strict;
comment	@# @;


1.15
date	2012.05.01.06.17.01;	author ajacoutot;	state dead;
branches;
next	1.14;

1.14
date	2012.04.16.22.56.33;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.16.11.47.42;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2012.04.16.10.04.49;	author landry;	state Exp;
branches;
next	1.11;

1.11
date	2012.03.23.13.19.32;	author ajacoutot;	state dead;
branches;
next	1.10;

1.10
date	2012.03.12.07.21.06;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2012.03.06.11.39.17;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.16.15.34.54;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.12.13.14.21;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.19.15.04.45;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.14.15.25.40;	author ajacoutot;	state dead;
branches;
next	1.4;

1.4
date	2011.09.20.21.09.34;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.06.06.22.19;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.24.09.10.23;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2011.03.07.19.17.14;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Bugfix update to glib 2.32.2.
@
text
@$OpenBSD: patch-glib_gmain_c,v 1.14 2012/04/16 22:56:33 ajacoutot Exp $

From a49568ceccb133c5a99524f3fdb842f0c05eb0b3 Mon Sep 17 00:00:00 2001
From: Dan Winship <danw@@gnome.org>
Date: Wed, 11 Apr 2012 19:21:17 +0000
Subject: gmain: block child sources when blocking the parent

--- glib/gmain.c.orig	Mon Apr  2 05:08:41 2012
+++ glib/gmain.c	Mon Apr 16 10:41:41 2012
@@@@ -191,7 +191,8 @@@@ typedef struct _GSourceCallback GSourceCallback;
 typedef enum
 {
   G_SOURCE_READY = 1 << G_HOOK_FLAG_USER_SHIFT,
-  G_SOURCE_CAN_RECURSE = 1 << (G_HOOK_FLAG_USER_SHIFT + 1)
+  G_SOURCE_CAN_RECURSE = 1 << (G_HOOK_FLAG_USER_SHIFT + 1),
+  G_SOURCE_BLOCKED = 1 << (G_HOOK_FLAG_USER_SHIFT + 2)
 } GSourceFlags;
 
 typedef struct _GMainWaiter GMainWaiter;
@@@@ -313,8 +314,7 @@@@ struct _GSourcePrivate
 #define G_THREAD_SELF g_thread_self ()
 
 #define SOURCE_DESTROYED(source) (((source)->flags & G_HOOK_FLAG_ACTIVE) == 0)
-#define SOURCE_BLOCKED(source) (((source)->flags & G_HOOK_FLAG_IN_CALL) != 0 && \
-		                ((source)->flags & G_SOURCE_CAN_RECURSE) == 0)
+#define SOURCE_BLOCKED(source) (((source)->flags & G_SOURCE_BLOCKED) != 0)
 
 #define SOURCE_UNREF(source, context)                       \
    G_STMT_START {                                           \
@@@@ -2426,12 +2426,24 @@@@ block_source (GSource *source)
 
   g_return_if_fail (!SOURCE_BLOCKED (source));
 
+  source->flags |= G_SOURCE_BLOCKED;
+
   tmp_list = source->poll_fds;
   while (tmp_list)
     {
       g_main_context_remove_poll_unlocked (source->context, tmp_list->data);
       tmp_list = tmp_list->next;
     }
+
+  if (source->priv && source->priv->child_sources)
+    {
+      tmp_list = source->priv->child_sources;
+      while (tmp_list)
+	{
+	  block_source (tmp_list->data);
+	  tmp_list = tmp_list->next;
+	}
+    }
 }
 
 /* HOLDS: source->context's lock */
@@@@ -2440,15 +2452,27 @@@@ unblock_source (GSource *source)
 {
   GSList *tmp_list;
   
-  g_return_if_fail (!SOURCE_BLOCKED (source)); /* Source already unblocked */
+  g_return_if_fail (SOURCE_BLOCKED (source)); /* Source already unblocked */
   g_return_if_fail (!SOURCE_DESTROYED (source));
   
+  source->flags &= ~G_SOURCE_BLOCKED;
+
   tmp_list = source->poll_fds;
   while (tmp_list)
     {
       g_main_context_add_poll_unlocked (source->context, source->priority, tmp_list->data);
       tmp_list = tmp_list->next;
     }
+
+  if (source->priv && source->priv->child_sources)
+    {
+      tmp_list = source->priv->child_sources;
+      while (tmp_list)
+	{
+	  unblock_source (tmp_list->data);
+	  tmp_list = tmp_list->next;
+	}
+    }
 }
 
 /* HOLDS: context's lock */
@@@@ -2527,8 +2551,7 @@@@ g_main_dispatch (GMainContext *context)
 	  if (!was_in_call)
 	    source->flags &= ~G_HOOK_FLAG_IN_CALL;
 
-	  if ((source->flags & G_SOURCE_CAN_RECURSE) == 0 &&
-	      !SOURCE_DESTROYED (source))
+	  if (SOURCE_BLOCKED (source) && !SOURCE_DESTROYED (source))
 	    unblock_source (source);
 	  
 	  /* Note: this depends on the fact that we can't switch
@


1.14
log
@Sync patch; committed upstream (no pkg change)
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.13 2012/04/16 11:47:42 ajacoutot Exp $
@


1.13
log
@Fix patch header, this was never committed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.12 2012/04/16 10:04:49 landry Exp $
d3 4
a6 1
https://bugzilla.gnome.org/show_bug.cgi?id=669260
@


1.12
log
@apply patch from https://bugzilla.gnome.org/attachment.cgi?id=212002,
from gnome bug #669260

gmain: block child sources when blocking the parent

When blocking a source that has child sources, we need to consider the
children blocked as well. Otherwise they will still trigger repeatedly
in an inner loop started from the parent source's callback.

Fixes download dialog not rendered upon certain mimetypes on midori,
see https://bugs.launchpad.net/midori/+bug/780133
@
text
@d1 1
a1 2
$OpenBSD$
gmain: block child sources when blocking the parent
d3 1
a3 3
When blocking a source that has child sources, we need to consider the
children blocked as well. Otherwise they will still trigger repeatedly
in an inner loop started from the parent source's callback.
a4 3
patch from https://bugzilla.gnome.org/attachment.cgi?id=212002
https://bugzilla.gnome.org/show_bug.cgi?id=669260
Fixes https://bugs.launchpad.net/midori/+bug/780133
@


1.11
log
@Major update to glib2-2.31.20.
Note that this is a devel version but the new stable is expected within a
week or so. Committing now so that I have time to deal with the breakage
and can start the upcoming gnome3 update.

Please contact me _directly_ if you find any issue with it.
@
text
@d1 2
a2 1
$OpenBSD: patch-glib_gmain_c,v 1.10 2012/03/12 07:21:06 ajacoutot Exp $
d4 3
a6 3
Rewrote upstream, but provides similar functionnality.
(test with GDM that the following does not happen:
Failed to read from child watch wake up pipe: Interrupted system call)
d8 37
a44 12
--- glib/gmain.c.orig	Sun Mar 11 22:43:28 2012
+++ glib/gmain.c	Mon Mar 12 07:46:36 2012
@@@@ -4564,7 +4564,12 @@@@ unix_signal_helper_thread (gpointer data) 
       gboolean sigint_received = FALSE;
       gboolean sighup_received = FALSE;
 
-      bytes_read = read (unix_signal_wake_up_pipe[0], b, sizeof (b));
+      do
+        {
+          bytes_read = read (unix_signal_wake_up_pipe[0], b, sizeof (b));
+        }
+      while (bytes_read == -1 && errno == EINTR);
d46 51
a96 3
       if (bytes_read < 0)
 	{
 	  g_warning ("Failed to read from child watch wake up pipe: %s",
@


1.10
log
@Minor update to glib 2.30.3.
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.9 2012/03/06 11:39:17 ajacoutot Exp $
@


1.9
log
@Remove MONOTONIC_CLOCK hack since sysconf(3) has support for it now.
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.8 2011/11/16 15:34:54 ajacoutot Exp $
d7 3
a9 3
--- glib/gmain.c.orig	Fri Nov 11 18:56:52 2011
+++ glib/gmain.c	Wed Nov 16 15:46:52 2011
@@@@ -4564,7 +4568,12 @@@@ unix_signal_helper_thread (gpointer data) 
@


1.8
log
@Fix obvious mistake in a patch.
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.7 2011/11/12 13:14:21 ajacoutot Exp $
a8 15
@@@@ -2054,10 +2054,14 @@@@ g_get_monotonic_time (void)
       {
 	clockid_t best_clockid;
 
+#ifndef __OpenBSD__
 	if (sysconf (_SC_MONOTONIC_CLOCK) >= 0)
 	  best_clockid = CLOCK_MONOTONIC;
 	else
 	  best_clockid = CLOCK_REALTIME;
+#else
+	  best_clockid = CLOCK_MONOTONIC;
+#endif
 	g_once_init_leave (&clockid, (gsize)best_clockid);
       }
 #endif
@


1.7
log
@Bugfix update to glib2-2.30.2.
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.6 2011/10/19 15:04:45 ajacoutot Exp $
d7 2
a8 2
--- glib/gmain.c.orig	Sat Nov 12 14:01:13 2011
+++ glib/gmain.c	Sat Nov 12 14:01:24 2011
d24 2
a25 1
@@@@ -4565,6 +4569,13 @@@@ unix_signal_helper_thread (gpointer data) 
d28 1
a28 2
       bytes_read = read (unix_signal_wake_up_pipe[0], b, sizeof (b));
+
@


1.6
log
@unix_signal_helper_thread: loop in read(2) on EINTR.
@
text
@d1 1
a1 1
$OpenBSD$
d7 18
a24 3
--- glib/gmain.c.orig	Wed Oct 19 16:38:09 2011
+++ glib/gmain.c	Wed Oct 19 14:09:17 2011
@@@@ -4549,6 +4549,13 @@@@ unix_signal_helper_thread (gpointer data) 
@


1.5
log
@Bugfix update to glib2-2.30.1.
@
text
@d1 10
a10 6
$OpenBSD: patch-glib_gmain_c,v 1.4 2011/09/20 21:09:34 ajacoutot Exp $
--- glib/gmain.c.orig	Sun Sep 18 15:36:48 2011
+++ glib/gmain.c	Mon Sep 19 23:28:57 2011
@@@@ -2054,10 +2054,14 @@@@ g_get_monotonic_time (void)
       {
 	clockid_t best_clockid;
d12 11
a22 11
+#ifndef __OpenBSD__
 	if (sysconf (_SC_MONOTONIC_CLOCK) >= 0)
 	  best_clockid = CLOCK_MONOTONIC;
 	else
 	  best_clockid = CLOCK_REALTIME;
+#else
+	  best_clockid = CLOCK_MONOTONIC;
+#endif
 	g_once_init_leave (&clockid, (gsize)best_clockid);
       }
 #endif
@


1.4
log
@Update to glib2-2.29.92 (2.30 coming in the next few days).
Committing now (along with upcoming atk, pango and gtk+3 updates) during
the hackathon where we have time to fix all the eventual fallout (bulk
running).

ok jasper@@ robert@@
@
text
@d1 1
a1 1
$OpenBSD: patch-glib_gmain_c,v 1.3 2011/06/06 06:22:19 ajacoutot Exp $
@


1.3
log
@Bugfix update to glib2-2.28.8.
Remove patches applied upstream.
@
text
@d1 6
a6 4
$OpenBSD: patch-glib_gmain_c,v 1.2 2011/05/24 09:10:23 ajacoutot Exp $
--- glib/gmain.c.orig	Mon Jun  6 01:18:49 2011
+++ glib/gmain.c	Mon Jun  6 08:01:27 2011
@@@@ -2055,7 +2055,9 @@@@ g_get_monotonic_time (void)
a7 2
       if G_UNLIKELY (!checked)
         {
d9 6
a14 1
           if (sysconf (_SC_MONOTONIC_CLOCK) >= 0)
d16 3
a18 3
             clockid = CLOCK_MONOTONIC;
           checked = TRUE;
         }
@


1.2
log
@Rework patches and adapt comment about our monotonic clock support.
@
text
@d1 4
a4 4
$OpenBSD: patch-glib_gmain_c,v 1.1 2011/03/07 19:17:14 ajacoutot Exp $
--- glib/gmain.c.orig	Sat May 21 05:29:24 2011
+++ glib/gmain.c	Tue May 24 10:50:15 2011
@@@@ -2054,7 +2054,9 @@@@ g_get_monotonic_time (void)
@


1.1
log
@Major update to glib2-2.28.2.

This (and the related 20 to 30 updates) has been tested twice in a bulk
by landry@@, thanks!
Runtime testing by myself under heavy GNOME usage...
@
text
@d1 4
a4 5
$OpenBSD$
--- glib/gmain.c.orig	Fri Jan 28 18:10:26 2011
+++ glib/gmain.c	Mon Jan 31 10:33:20 2011
@@@@ -2044,6 +2044,13 @@@@ g_get_monotonic_time (void)
     struct timespec ts;
d6 6
a11 12
 #ifdef HAVE_MONOTONIC_CLOCK
+# if defined(__OpenBSD__)
+   /*
+      OpenBSD has support for monotonic clock but does not has the
+      sysconf(3) _SC_MONOTONIC_CLOCK define
+   */
+   clockid = CLOCK_MONOTONIC;
+# else
     /* We have to check if we actually have monotonic clock support.
      *
      * There is no thread safety issue here since there is no harm if we
@@@@ -2059,6 +2066,7 @@@@ g_get_monotonic_time (void)
a13 5
     }
+# endif // !__OpenBSD__
 #endif
 
     clock_gettime (clockid, &ts);
@

