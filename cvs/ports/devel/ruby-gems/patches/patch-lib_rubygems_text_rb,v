head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2017.09.02.21.34.12;	author jeremy;	state Exp;
branches;
next	;
commitid	CNZruoNJxjG8r965;


desc
@@


1.1
log
@Backport security patches in rubygems 2.6.13 to 1.8.24. No CVE numbers,
but this fixes the following vulnerabilities:

* Fix a DNS request hijacking vulnerability.
* Fix an ANSI escape sequence vulnerability.
* Fix a DOS vulernerability in the query command.
* Fix a vulnerability in the gem installer that allowed a malicious
  gem to overwrite arbitrary files.
@
text
@$OpenBSD$

Index: lib/rubygems/text.rb
--- lib/rubygems/text.rb.orig
+++ lib/rubygems/text.rb
@@@@ -5,13 +5,26 @@@@ require 'rubygems'
 
 module Gem::Text
 
+  ##   
+  # Remove any non-printable characters and make the text suitable for
+  # printing.
+  def clean_text(text)
+    text.gsub(/[\000-\b\v-\f\016-\037\177]/, ".".freeze)
+  end
+
+  def truncate_text(text, description, max_length = 100_000)
+    raise ArgumentError, "max_length must be positive" unless max_length > 0
+    return text if text.size <= max_length
+    "Truncating #{description} to #{max_length.to_s.reverse.gsub(/...(?=.)/,'\&,').reverse} characters:\n" + text[0, max_length]
+  end
+
   ##
   # Wraps +text+ to +wrap+ characters and optionally indents by +indent+
   # characters
 
   def format_text(text, wrap, indent=0)
     result = []
-    work = text.dup
+    work = clean_text(text)
 
     while work.length > wrap do
       if work =~ /^(.{0,#{wrap}})[ \n]/ then
@
