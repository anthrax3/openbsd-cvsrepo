head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.03.02.14.52.29;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Fixed bug 1426 - SDL_SemWaitTimeout returns -1 and sets error instead of
SDL_MUTEX_TIMEDOUT on time out

From upstream via brad. No bump needed.

OK ajacoutot@@
@
text
@$OpenBSD$

Fixed bug 1426 - SDL_SemWaitTimeout returns -1 and sets error instead of
SDL_MUTEX_TIMEDOUT on time out

--- src/thread/pthread/SDL_syssem.c.orig	Fri Mar  2 04:42:50 2012
+++ src/thread/pthread/SDL_syssem.c	Fri Mar  2 04:44:23 2012
@@@@ -144,8 +144,14 @@@@ int SDL_SemWaitTimeout(SDL_sem *sem, Uint32 timeout)
 		retval = sem_timedwait(&sem->sem, &ts_timeout);
 	while (retval == -1 && errno == EINTR);
 
-	if (retval == -1)
-		SDL_SetError(strerror(errno));
+	if (retval == -1) {
+		if (errno == ETIMEDOUT) {
+			retval = SDL_MUTEX_TIMEDOUT;
+		}
+		else {
+			SDL_SetError(strerror(errno));
+		}
+	}
 #else
 	end = SDL_GetTicks() + timeout;
 	while ((retval = SDL_SemTryWait(sem)) == SDL_MUTEX_TIMEDOUT) {
@
