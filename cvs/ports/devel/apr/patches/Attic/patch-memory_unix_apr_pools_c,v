head	1.3;
access;
symbols
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.14
	OPENBSD_5_0:1.2.0.12
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.10
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_5:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2012.04.28.09.48.20;	author stsp;	state dead;
branches;
next	1.2;

1.2
date	2009.08.07.04.28.28;	author steven;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2009.08.06.22.20.21;	author steven;	state Exp;
branches;
next	;

1.2.2.1
date	2009.08.16.01.50.40;	author william;	state Exp;
branches;
next	;

1.2.4.1
date	2009.11.10.03.31.57;	author william;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to APR-1.4.6. Enable threads by default and remove the 'mt' flavour.
Grab maintainership.
ok sthen
@
text
@$OpenBSD: patch-memory_unix_apr_pools_c,v 1.2 2009/08/07 04:28:28 steven Exp $

SECURITY: CVE-2009-2412 (cve.mitre.org)
Fix overflow in pools, where size alignment was taking place.

--- memory/unix/apr_pools.c.orig	Thu Aug  6 18:50:47 2009
+++ memory/unix/apr_pools.c	Thu Aug  6 18:53:45 2009
@@@@ -168,16 +168,19 @@@@ APR_DECLARE(void) apr_allocator_max_free_set(apr_alloc
 }
 
 static APR_INLINE
-apr_memnode_t *allocator_alloc(apr_allocator_t *allocator, apr_size_t size)
+apr_memnode_t *allocator_alloc(apr_allocator_t *allocator, apr_size_t in_size)
 {
     apr_memnode_t *node, **ref;
     apr_uint32_t max_index;
-    apr_size_t i, index;
+    apr_size_t size, i, index;
 
     /* Round up the block size to the next boundary, but always
      * allocate at least a certain size (MIN_ALLOC).
      */
-    size = APR_ALIGN(size + APR_MEMNODE_T_SIZE, BOUNDARY_SIZE);
+    size = APR_ALIGN(in_size + APR_MEMNODE_T_SIZE, BOUNDARY_SIZE);
+    if (size < in_size) {
+        return NULL;
+    }
     if (size < MIN_ALLOC)
         size = MIN_ALLOC;
 
@@@@ -591,13 +594,19 @@@@ APR_DECLARE(void) apr_pool_terminate(void)
  * Memory allocation
  */
 
-APR_DECLARE(void *) apr_palloc(apr_pool_t *pool, apr_size_t size)
+APR_DECLARE(void *) apr_palloc(apr_pool_t *pool, apr_size_t in_size)
 {
     apr_memnode_t *active, *node;
     void *mem;
-    apr_size_t free_index;
+    apr_size_t size, free_index;
 
-    size = APR_ALIGN_DEFAULT(size);
+    size = APR_ALIGN_DEFAULT(in_size);
+    if (size < in_size) {
+        if (pool->abort_fn)
+            pool->abort_fn(APR_ENOMEM);
+
+        return NULL;
+    }
     active = pool->active;
 
     /* If the active node has enough bytes left, use it. */
@@@@ -662,7 +671,6 @@@@ APR_DECLARE(void *) apr_pcalloc(apr_pool_t *pool, apr_
 {
     void *mem;
 
-    size = APR_ALIGN_DEFAULT(size);
     if ((mem = apr_palloc(pool, size)) != NULL) {
         memset(mem, 0, size);
     }
@


1.2
log
@fix patch description; no change

from Stefan Sperling
@
text
@d1 1
a1 1
$OpenBSD: patch-memory_unix_apr_pools_c,v 1.1 2009/08/06 22:20:21 steven Exp $
@


1.2.4.1
log
@MFC:

SECURITY FIX

Resolves CVE-2009-2412:

https://svn.apache.org/viewvc?view=rev&revision=800732

from Stefan Sperling
@
text
@d1 1
a1 1
$OpenBSD$
d6 2
a7 2
--- memory/unix/apr_pools.c.orig	Thu Aug  3 12:05:27 2006
+++ memory/unix/apr_pools.c	Thu Aug  6 23:59:18 2009
@


1.2.2.1
log
@MFC:

SECURITY FIX

Resolves CVE-2009-2412:

https://svn.apache.org/viewvc?view=rev&revision=800732

from Stefan Sperling
@
text
@d1 1
a1 1
$OpenBSD$
d6 2
a7 2
--- memory/unix/apr_pools.c.orig	Thu Aug  3 12:05:27 2006
+++ memory/unix/apr_pools.c	Thu Aug  6 23:59:18 2009
@


1.1
log
@security fix for CVE-2009-2412

https://svn.apache.org/viewvc?view=rev&revision=800732

from Stefan Sperling
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
a4 1
Fix overflow in pools and rmm, where size alignment was taking place.
@

