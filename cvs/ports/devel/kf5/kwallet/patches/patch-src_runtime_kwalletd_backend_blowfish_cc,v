head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	zhuk_20160527:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.12.25.14.54.49;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	xZpJehJb0ruEukQd;

1.1
date	2016.05.26.23.58.59;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Y1fRXYJVVfuFVsse;

1.1.1.1
date	2016.05.26.23.58.59;	author zhuk;	state Exp;
branches;
next	;
commitid	Y1fRXYJVVfuFVsse;


desc
@@


1.2
log
@Update KDE Frameworks to 5.29.0 and sync with Qt5.

A few tweaks are coming, but things should build at least for now.

Most work done from Rafael Sadowski, thanks!
@
text
@$OpenBSD: patch-src_runtime_kwalletd_backend_blowfish_cc,v 1.1.1.1 2016/05/26 23:58:59 zhuk Exp $
Unbreak build.
--- src/runtime/kwalletd/backend/blowfish.cc.orig	Sat Nov  5 15:59:12 2016
+++ src/runtime/kwalletd/backend/blowfish.cc	Sat Dec  3 16:23:16 2016
@@@@ -38,18 +38,18 @@@@
 BlowFish::BlowFish()
 {
     _blksz = 8;
-    _key = 0L;
-    _init = false;
+    key = 0L;
+    initialized = false;
 }
 
 bool BlowFish::init()
 {
     // Initialize the sboxes
     for (int i = 0; i < 256; i++) {
-        _S[0][i] = ks0[i];
-        _S[1][i] = ks1[i];
-        _S[2][i] = ks2[i];
-        _S[3][i] = ks3[i];
+        S[0][i] = ks0[i];
+        S[1][i] = ks1[i];
+        S[2][i] = ks2[i];
+        S[3][i] = ks3[i];
     }
 
     uint32_t datal = 0;
@@@@ -61,25 +61,25 @@@@ bool BlowFish::init()
     for (int i = 0; i < 18; i++) {
         data = 0;
         for (int k = 0; k < 4; ++k) {
-            data = (data << 8) | ((unsigned char *)_key)[j++];
-            if (j >= _keylen / 8) {
+            data = (data << 8) | ((unsigned char *)key)[j++];
+            if (j >= keylen / 8) {
                 j = 0;
             }
         }
-        _P[i] = P[i] ^ data;
+        Pm[i] = P[i] ^ data;
     }
 
     for (int i = 0; i < 18; i += 2) {
         encipher(&datal, &datar);
-        _P[i] = datal;
-        _P[i + 1] = datar;
+        Pm[i] = datal;
+        Pm[i + 1] = datar;
     }
 
     for (int j = 0; j < 4; j++) {
         for (int i = 0; i < 256; i += 2) {
             encipher(&datal, &datar);
-            _S[j][i] = datal;
-            _S[j][i + 1] = datar;
+            S[j][i] = datal;
+            S[j][i + 1] = datar;
         }
     }
 
@@@@ -87,22 +87,22 @@@@ bool BlowFish::init()
     //     check to see if the key is weak and return error if so
     for (int i = 0; i < 255; i++) {
         for (int j = i + 1; j < 256; j++) {
-            if ((_S[0][i] == _S[0][j]) || (_S[1][i] == _S[1][j]) ||
-                    (_S[2][i] == _S[2][j]) || (_S[3][i] == _S[3][j])) {
+            if ((S[0][i] == S[0][j]) || (S[1][i] == S[1][j]) ||
+                    (S[2][i] == S[2][j]) || (S[3][i] == S[3][j])) {
                 return false;
             }
         }
     }
 
-    _init = true;
+    initialized = true;
 
     return true;
 }
 
 BlowFish::~BlowFish()
 {
-    delete[](unsigned char *)_key;
-    _key = 0L;
+    delete[](unsigned char *)key;
+    key = 0L;
 }
 
 int BlowFish::keyLen() const
@@@@ -117,20 +117,20 @@@@ bool BlowFish::variableKeyLen() const
 
 bool BlowFish::readyToGo() const
 {
-    return _init;
+    return initialized;
 }
 
-bool BlowFish::setKey(void *key, int bitlength)
+bool BlowFish::setKey(void *newkey, int bitlength)
 {
     if (bitlength <= 0 || bitlength > 448 || bitlength % 8 != 0) {
         return false;
     }
 
-    delete[](unsigned char *)_key;
+    delete[](unsigned char *)key;
 
-    _key = new unsigned char[bitlength / 8];
-    memcpy(_key, key, bitlength / 8);
-    _keylen = bitlength;
+    key = new unsigned char[bitlength / 8];
+    memcpy(key, newkey, bitlength / 8);
+    keylen = bitlength;
 
     return init();
 }
@@@@ -149,7 +149,7 @@@@ int BlowFish::encrypt(void *block, int len)
 {
     uint32_t *d = (uint32_t *)block;
 
-    if (!_init || len % _blksz != 0) {
+    if (!initialized || len % _blksz != 0) {
         return -1;
     }
 
@@@@ -173,7 +173,7 @@@@ int BlowFish::decrypt(void *block, int len)
 {
     uint32_t *d = (uint32_t *)block;
 
-    if (!_init || len % _blksz != 0) {
+    if (!initialized || len % _blksz != 0) {
         return -1;
     }
 
@@@@ -206,9 +206,9 @@@@ uint32_t BlowFish::F(uint32_t x)
     x >>= 8;
     a = x & 0x000000ff;
 
-    y = _S[0][a] + _S[1][b];
-    y ^= _S[2][c];
-    y += _S[3][d];
+    y = S[0][a] + S[1][b];
+    y ^= S[2][c];
+    y += S[3][d];
 
     return y;
 }
@@@@ -218,7 +218,7 @@@@ void BlowFish::encipher(uint32_t *xl, uint32_t *xr)
     uint32_t Xl = *xl, Xr = *xr, temp;
 
     for (int i = 0; i < 16; ++i) {
-        Xl ^= _P[i];
+        Xl ^= Pm[i];
         Xr ^= F(Xl);
         // Exchange
         temp = Xl; Xl = Xr; Xr = temp;
@@@@ -227,8 +227,8 @@@@ void BlowFish::encipher(uint32_t *xl, uint32_t *xr)
     // Exchange
     temp = Xl; Xl = Xr; Xr = temp;
 
-    Xr ^= _P[16];
-    Xl ^= _P[17];
+    Xr ^= Pm[16];
+    Xl ^= Pm[17];
 
     *xl = Xl;
     *xr = Xr;
@@@@ -239,7 +239,7 @@@@ void BlowFish::decipher(uint32_t *xl, uint32_t *xr)
     uint32_t Xl = *xl, Xr = *xr, temp;
 
     for (int i = 17; i > 1; --i) {
-        Xl ^= _P[i];
+        Xl ^= Pm[i];
         Xr ^= F(Xl);
         // Exchange
         temp = Xl; Xl = Xr; Xr = temp;
@@@@ -248,8 +248,8 @@@@ void BlowFish::decipher(uint32_t *xl, uint32_t *xr)
     // Exchange
     temp = Xl; Xl = Xr; Xr = temp;
 
-    Xr ^= _P[1];
-    Xl ^= _P[0];
+    Xr ^= Pm[1];
+    Xl ^= Pm[0];
 
     *xl = Xl;
     *xr = Xr;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- src/runtime/kwalletd/backend/blowfish.cc.orig	Fri Nov 20 00:53:33 2015
+++ src/runtime/kwalletd/backend/blowfish.cc	Fri Nov 20 01:05:52 2015
@@@@ -34,18 +34,18 @@@@
d30 1
a30 1
@@@@ -57,25 +57,25 @@@@ bool BlowFish::init()
d63 1
a63 1
@@@@ -83,22 +83,22 @@@@ bool BlowFish::init()
d91 1
a91 1
@@@@ -113,20 +113,20 @@@@ bool BlowFish::variableKeyLen() const
d118 1
a118 1
@@@@ -145,7 +145,7 @@@@ int BlowFish::encrypt(void *block, int len)
d127 1
a127 1
@@@@ -169,7 +169,7 @@@@ int BlowFish::decrypt(void *block, int len)
d136 1
a136 1
@@@@ -202,9 +202,9 @@@@ uint32_t BlowFish::F(uint32_t x)
d149 1
a149 1
@@@@ -214,7 +214,7 @@@@ void BlowFish::encipher(uint32_t *xl, uint32_t *xr)
d158 1
a158 1
@@@@ -223,8 +223,8 @@@@ void BlowFish::encipher(uint32_t *xl, uint32_t *xr)
d169 1
a169 1
@@@@ -235,7 +235,7 @@@@ void BlowFish::decipher(uint32_t *xl, uint32_t *xr)
d178 1
a178 1
@@@@ -244,8 +244,8 @@@@ void BlowFish::decipher(uint32_t *xl, uint32_t *xr)
@


1.1.1.1
log
@Import KDE Frameworks 5.21.0. Somewhat outdated, but we need to move on.

This does not include NetworkManager and ModemManager bindings, for obvious
reasons. But there is the Bluez-Qt binding included, which acts as a stub,
allowing KDE stuff relying on it to compile.

Also, we ship outdated version of Baloo, because newer versions rely on
the MDB library which we don't have - and won't have until UBC is fixed.

Input from many, tested by kirby@@ and awolk@@, final okay awolk@@ - thanks!
@
text
@@
