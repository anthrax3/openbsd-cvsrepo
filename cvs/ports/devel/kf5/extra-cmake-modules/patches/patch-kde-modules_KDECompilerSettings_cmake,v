head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	zhuk_20160527:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.06.07.17.03.36;	author rsadowski;	state Exp;
branches;
next	1.2;
commitid	Cf5SXLjHWunoWVgU;

1.2
date	2016.12.25.14.54.48;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	xZpJehJb0ruEukQd;

1.1
date	2016.05.26.23.58.57;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Y1fRXYJVVfuFVsse;

1.1.1.1
date	2016.05.26.23.58.57;	author zhuk;	state Exp;
branches;
next	;
commitid	Y1fRXYJVVfuFVsse;


desc
@@


1.3
log
@Update KDE Frameworks to 5.34.0

A few tweaks from zhuk@@. Thanks!

ok jca@@
@
text
@$OpenBSD: patch-kde-modules_KDECompilerSettings_cmake,v 1.2 2016/12/25 14:54:48 zhuk Exp $
Allow KDE5 libraries to be built without having to link to libc explicitly.
Index: kde-modules/KDECompilerSettings.cmake
--- kde-modules/KDECompilerSettings.cmake.orig
+++ kde-modules/KDECompilerSettings.cmake
@@@@ -340,6 +340,8 @@@@ endfunction()
 # Better diagnostics (warnings, errors)
 ############################################################
 
+set(ALLOW_UNDEFINED_LIB_SYMBOLS No CACHE BOOL "allow undefined symbols in generated shared objects")
+
 if ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT APPLE) OR
         (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND NOT APPLE) OR
         (CMAKE_CXX_COMPILER_ID STREQUAL "Intel" AND NOT WIN32))
@@@@ -347,9 +349,11 @@@@ if ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND NOT APPL
     set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--fatal-warnings ${CMAKE_SHARED_LINKER_FLAGS}")
     set(CMAKE_MODULE_LINKER_FLAGS "-Wl,--fatal-warnings ${CMAKE_MODULE_LINKER_FLAGS}")
 
-    # Do not allow undefined symbols, even in non-symbolic shared libraries
-    set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined ${CMAKE_SHARED_LINKER_FLAGS}")
-    set(CMAKE_MODULE_LINKER_FLAGS "-Wl,--no-undefined ${CMAKE_MODULE_LINKER_FLAGS}")
+    if (NOT ${ALLOW_UNDEFINED_LIB_SYMBOLS})
+        # Do not allow undefined symbols, even in non-symbolic shared libraries
+        set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined ${CMAKE_SHARED_LINKER_FLAGS}")
+        set(CMAKE_MODULE_LINKER_FLAGS "-Wl,--no-undefined ${CMAKE_MODULE_LINKER_FLAGS}")
+    endif()
 endif()
 
 set(_KDE_GCC_COMMON_WARNING_FLAGS "-Wall -Wextra -Wcast-align -Wchar-subscripts -Wformat-security -Wno-long-long -Wpointer-arith -Wundef")
@


1.2
log
@Update KDE Frameworks to 5.29.0 and sync with Qt5.

A few tweaks are coming, but things should build at least for now.

Most work done from Rafael Sadowski, thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-kde-modules_KDECompilerSettings_cmake,v 1.1.1.1 2016/05/26 23:58:57 zhuk Exp $
d3 4
a6 3
--- kde-modules/KDECompilerSettings.cmake.orig	Mon Nov  7 15:54:55 2016
+++ kde-modules/KDECompilerSettings.cmake	Wed Nov 30 22:43:41 2016
@@@@ -332,6 +332,8 @@@@ endfunction()
d12 1
a12 1
 if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
d15 1
a15 1
@@@@ -339,9 +341,11 @@@@ if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- kde-modules/KDECompilerSettings.cmake.orig	Sat Feb 13 15:26:05 2016
+++ kde-modules/KDECompilerSettings.cmake	Sat Mar 26 19:48:42 2016
@@@@ -319,6 +319,8 @@@@ endfunction()
d14 1
a14 1
@@@@ -326,9 +328,11 @@@@ if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR
@


1.1.1.1
log
@Import KDE Frameworks 5.21.0. Somewhat outdated, but we need to move on.

This does not include NetworkManager and ModemManager bindings, for obvious
reasons. But there is the Bluez-Qt binding included, which acts as a stub,
allowing KDE stuff relying on it to compile.

Also, we ship outdated version of Baloo, because newer versions rely on
the MDB library which we don't have - and won't have until UBC is fixed.

Input from many, tested by kirby@@ and awolk@@, final okay awolk@@ - thanks!
@
text
@@
