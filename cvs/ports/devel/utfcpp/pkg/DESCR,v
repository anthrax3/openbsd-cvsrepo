head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	jasper_20161208:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.08.12.09.20.01;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;
commitid	NFud4vVnTdarfNWp;

1.1.1.1
date	2016.08.12.09.20.01;	author jasper;	state Exp;
branches;
next	;
commitid	NFud4vVnTdarfNWp;


desc
@@



1.1
log
@Initial revision
@
text
@Many C++ developers miss an easy and portable way of handling Unicode
encoded strings. The original C++ Standard (known as C++98 or C++03) is
Unicode agnostic. C++11 provides some support for Unicode on core
language and library level: u8, u, and U character and string literals,
char16_t and char32_t character types, u16string and u32string library
classes, and codecvt support for conversions between Unicode encoding
forms. In the meantime, developers use third party libraries like ICU,
OS specific capabilities, or simply roll out their own solutions.

In order to easily handle UTF-8 encoded Unicode strings, I came up with
a small generic library. For anybody used to work with STL algorithms
and iterators, it should be easy and natural to use.
@


1.1.1.1
log
@import utfcpp-2.3.4

"Many C++ developers miss an easy and portable way of handling Unicode
encoded strings. The original C++ Standard (known as C++98 or C++03) is
Unicode agnostic. C++11 provides some support for Unicode on core
language and library level: u8, u, and U character and string literals,
char16_t and char32_t character types, u16string and u32string library
classes, and codecvt support for conversions between Unicode encoding
forms. In the meantime, developers use third party libraries like ICU,
OS specific capabilities, or simply roll out their own solutions.
In order to easily handle UTF-8 encoded Unicode strings, I came up with
a small generic library. For anybody used to work with STL algorithms
and iterators, it should be easy and natural to use."

from maintainer Sergey Bronnikov
ok sthen@@
@
text
@@
