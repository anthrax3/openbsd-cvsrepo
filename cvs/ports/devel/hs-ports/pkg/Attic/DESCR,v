head	1.2;
access;
symbols
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	dons_2004-May-09:1.1.1.1
	dons:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2007.07.21.17.18.24;	author kili;	state dead;
branches;
next	1.1;

1.1
date	2004.05.09.10.30.22;	author dons;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.09.10.30.22;	author dons;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
This isn't maintained any longer, and, according to Don Stewart, should
be removed. (And it doesn't build with recent Haskell compilers).
@
text
@The Haskell Ports Library (HPL) supports concurrent and distributed
computing in the IO monad _without_ relying on mutable variables.
Instead, it supplies monotone single-assignment variables and ports
abstractions.

Ports are an abstraction for modelling variables whose values evolve
over time without the need to resort to mutable variable, such as
IORefs. More precisely, a port represents all values that a
time-dependent variable successively takes as a stream, where each
element of the stream corresponds to a state change - we can also say
that a port represents a time series. Moreover, a port supports
concurrent construction of the time series, or stream of values. 

Ports are ideally suited for purely functional GUI interfaces that
completely avoid the use of mutable variables. It is planned to extend
the library to interaction between different processes possibly
located on distinct processing nodes.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import hs-ports-0.4.1, a library for concurrent and distributed Haskell

	The Haskell Ports Library (HPL) supports concurrent and distributed
	computing in the IO monad _without_ relying on mutable variables.
	Instead, it supplies monotone single-assignment variables and ports
	abstractions. Ports are an abstraction for modelling variables whose
	values evolve over time without the need to resort to mutable
	variable, such as IORefs. More precisely, a port represents all values
	that a time-dependent variable successively takes as a stream, where
	each element of the stream corresponds to a state change.

	Ports are ideally suited for purely functional GUI interfaces that
	completely avoid the use of mutable variables. It is planned to extend
	the library to interaction between different processes possibly
	located on distinct processing nodes.

ok pvalchev@@
@
text
@@
