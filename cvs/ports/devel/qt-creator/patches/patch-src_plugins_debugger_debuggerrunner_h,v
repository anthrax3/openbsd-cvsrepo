head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.16
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.12
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.14
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.10
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.01.05.20.32.02;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Build and install Qt debugging helper library for system Qt with QtCreator,
and allow it being automatically loaded even when debugging external
applications.

While there, mark QtCreator as SHARED_ONLY, as the Qt4 itself already is.

ok espie@@
@
text
@$OpenBSD$
Use system Qt debugging helper by default instead of giving stupid error
to user when debugging helper is enabled but no custom path specified.
--- src/plugins/debugger/debuggerrunner.h.orig	Sat Jan  5 21:57:04 2013
+++ src/plugins/debugger/debuggerrunner.h	Sat Jan  5 23:50:21 2013
@@@@ -34,6 +34,7 @@@@
 
 #include <projectexplorer/runconfiguration.h>
 #include <projectexplorer/applicationrunconfiguration.h>
+#include <projectexplorer/debugginghelper.h>
 
 namespace ProjectExplorer {
 class LocalApplicationRunConfiguration;
@@@@ -124,7 +125,11 @@@@ class DefaultLocalApplicationRunConfiguration (public)
     virtual QStringList commandLineArguments() const  { return QStringList(); }
     virtual ProjectExplorer::Environment environment() const
         { return ProjectExplorer::Environment(); }
-    virtual QString dumperLibrary() const { return QString(); }
+    virtual QString dumperLibrary() const {
+           QString qmakePath = ProjectExplorer::DebuggingHelperLibrary::findSystemQt(ProjectExplorer::Environment::systemEnvironment());
+           QString qtInstallData = ProjectExplorer::DebuggingHelperLibrary::qtInstallDataDir(qmakePath);
+           return ProjectExplorer::DebuggingHelperLibrary::debuggingHelperLibraryByInstallData(qtInstallData);
+       }
     virtual QStringList dumperLibraryLocations() const { return QStringList(); }
     virtual ProjectExplorer::ToolChain::ToolChainType toolChainType() const
         { return ProjectExplorer::ToolChain::UNKNOWN; }
@
