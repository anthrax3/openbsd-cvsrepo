head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	bluhm_20160403:1.1.1.1
	markus-hennecke:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.04.03.11.21.05;	author bluhm;	state Exp;
branches
	1.1.1.1;
next	;
commitid	MIQcyJbNcmVjUIqv;

1.1.1.1
date	2016.04.03.11.21.05;	author bluhm;	state Exp;
branches;
next	;
commitid	MIQcyJbNcmVjUIqv;


desc
@@



1.1
log
@Initial revision
@
text
@@@comment $OpenBSD$
${P5SITE}/MCE/
${P5SITE}/MCE.pm
${P5SITE}/MCE.pod
${P5SITE}/MCE/Candy.pm
${P5SITE}/MCE/Core/
${P5SITE}/MCE/Core.pod
${P5SITE}/MCE/Core/Input/
${P5SITE}/MCE/Core/Input/Generator.pm
${P5SITE}/MCE/Core/Input/Handle.pm
${P5SITE}/MCE/Core/Input/Iterator.pm
${P5SITE}/MCE/Core/Input/Request.pm
${P5SITE}/MCE/Core/Input/Sequence.pm
${P5SITE}/MCE/Core/Manager.pm
${P5SITE}/MCE/Core/Validation.pm
${P5SITE}/MCE/Core/Worker.pm
${P5SITE}/MCE/Examples.pod
${P5SITE}/MCE/Flow.pm
${P5SITE}/MCE/Grep.pm
${P5SITE}/MCE/Loop.pm
${P5SITE}/MCE/Map.pm
${P5SITE}/MCE/Mutex.pm
${P5SITE}/MCE/Queue.pm
${P5SITE}/MCE/Relay.pm
${P5SITE}/MCE/Signal.pm
${P5SITE}/MCE/Step.pm
${P5SITE}/MCE/Stream.pm
${P5SITE}/MCE/Subs.pm
${P5SITE}/MCE/Util.pm
@@man man/man3p/MCE.3p
@@man man/man3p/MCE::Candy.3p
@@man man/man3p/MCE::Core.3p
@@man man/man3p/MCE::Examples.3p
@@man man/man3p/MCE::Flow.3p
@@man man/man3p/MCE::Grep.3p
@@man man/man3p/MCE::Loop.3p
@@man man/man3p/MCE::Map.3p
@@man man/man3p/MCE::Mutex.3p
@@man man/man3p/MCE::Queue.3p
@@man man/man3p/MCE::Relay.3p
@@man man/man3p/MCE::Signal.3p
@@man man/man3p/MCE::Step.3p
@@man man/man3p/MCE::Stream.3p
@@man man/man3p/MCE::Subs.3p
@@man man/man3p/MCE::Util.3p
@


1.1.1.1
log
@import p5-MCE 1.703
from Markus Hennecke; OK sthen@@

engine for Perl providing parallel processing capabilities

MCE spawns a pool of workers and therefore does not fork a new
process per each element of data. Instead, MCE follows a bank queuing
model. Imagine the line being the data and bank-tellers the parallel
workers. MCE enhances that model by adding the ability to chunk the
next n elements from the input stream to the next available worker.
@
text
@@
