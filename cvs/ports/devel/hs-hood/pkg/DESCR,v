head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.26
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.24
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.20
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.22
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.18
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	kili_20101025:1.1.1.1
	kili:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.10.26.16.52.53;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.24.22.18.35;	author kili;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.24.22.18.35;	author kili;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix $OpenBSD$ marker and a typo in pkg/DESCR.

From Charles Smith.
@
text
@HOOD is a small post-mortem debugger for the lazy functional language
Haskell. It is based on the concept of observation of intermediate
data structures, rather than the more traditional stepping and
variable examination paradigm used by imperative language debuggers.
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
]Haskell. It is based on the concept of observation of intermediate
@


1.1.1.1
log
@And now import into the right directory (hs-hood, not just hood) as
noticed by jasper@@. DESCR-Blurb again:

HOOD is a small post-mortem debugger for the lazy functional language
]Haskell. It is based on the concept of observation of intermediate
data structures, rather than the more traditional stepping and
variable examination paradigm used by imperative language debuggers.

@
text
@@
