head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.10
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.8
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	chrisz_20141025:1.1.1.1
	chrisz:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2014.10.25.16.53.42;	author chrisz;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OoQJpbpqI20L727h;

1.1.1.1
date	2014.10.25.16.53.42;	author chrisz;	state Exp;
branches;
next	;
commitid	OoQJpbpqI20L727h;


desc
@@



1.1
log
@Initial revision
@
text
@OCamlgraph is a graph library for Objective Caml. Its
contribution is three-fold:

It provides an easy-to-use graph data structure together
with several operations and algorithms over graphs, in
Graph.Pack. It is a reasonably efficient imperative data
structure for directed graphs with vertices and edges
labeled with integers. Have a look at this module first in
order to get an overview of what this library provides. See
also demo.ml.

Then OCamlgraph provides several other graph implementations
for those not satisfied with the one above. Some are
persistent (imutable) and other imperative (mutable). Some
are directed and other are not. Some have labels for
vertices, or labels for edges, or both. Some have abstract
types for vertices. etc.

See interface Sig for the graph signatures and modules
Persistent and Imperative for the implementations.

These implementations are written as functors: you give the
types of vertices labels, edge labels, etc. and you get the
data structure as a result.

Finally, OCamlgraph provides several classic operations and
algorithms over graphs. They are also written as functors
i.e. independently of the data structure for graphs. One
consequence is that you can define your own data structure
for graphs and yet re-use all the algorithms from this
library -- you only need to provide a few operations such as
iterating over all vertices, over the successors of a
vertex, etc. See module Path for an example.
@


1.1.1.1
log
@Import ocaml-graph - dependency of OPAM.

ok krw@@
@
text
@@
