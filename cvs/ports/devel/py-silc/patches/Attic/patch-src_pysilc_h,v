head	1.5;
access;
symbols
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	alek_20061009:1.1.1.1
	alek:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2008.07.08.21.29.20;	author martynas;	state dead;
branches;
next	1.4;

1.4
date	2007.10.02.17.35.48;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.14.10.31.04;	author martynas;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.05.17.50.04;	author martynas;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.09.13.10.34;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.10.09.13.10.34;	author alek;	state Exp;
branches;
next	;


desc
@@


1.5
log
@i am upstream now.  so release 0.5.  much thanks to fgsch@@, for
testing, bug-hunting, and diffs.
@
text
@$OpenBSD: patch-src_pysilc_h,v 1.4 2007/10/02 17:35:48 martynas Exp $
--- src/pysilc.h.orig	Mon Jul 10 11:42:36 2006
+++ src/pysilc.h	Sun Jul  1 22:52:11 2007
@@@@ -22,7 +22,7 @@@@
 #endif
 
 #include "pysilc_macros.h"
-#include <silcincludes.h>
+#include <silc.h>
 #include <silcclient.h>
 #include <silctypes.h>
 
@@@@ -40,7 +40,6 @@@@ typedef struct {
 
 typedef struct {
     PyObject_HEAD
-    SilcPKCS        pkcs;
     SilcPublicKey   public;
     SilcPrivateKey  private;
 } PySilcKeys;
@@@@ -107,9 +106,11 @@@@ typedef struct {
         *ftp,
         *detach;
 
-    SilcClient             silcobj;
-    SilcClientConnection   silcconn;
-    SilcClientOperations   callbacks;
+    SilcClient                   silcobj;
+    SilcClientConnection         silcconn;
+    SilcClientConnectCallback    conncallback;
+    SilcClientOperations         callbacks;
+    SilcClientConnectionParams   params;
 
 } PySilcClient;
 
@@@@ -182,7 +183,7 @@@@ static PyMemberDef pysilc_user_members[] = {
 
 /*  ---------------- pysilc keys ------------- */
 
-static PyObject *PySilcKeys_New(SilcPKCS pkcs, SilcPublicKey public, SilcPrivateKey private);
+static PyObject *PySilcKeys_New(SilcPublicKey public, SilcPrivateKey private);
 static void PySilcKeys_Del(PyObject *object);
 
 static PyMethodDef pysilc_keys_methods[] = {
@@@@ -227,9 +228,8 @@@@ static PyMethodDef pysilc_client_methods[] = {
         (PyCFunction)pysilc_client_send_channel_message, 
         METH_VARARGS | METH_KEYWORDS, 
         "send_channel_message(channel, messsage, private_key = None,\n"
-        "                     flags = 0, force_send = False)\n\n"
+        "                     flags = 0)\n\n"
         "Send a message (Unicode string) to a channel (SilcChannel object).\n"
-        "Setting 'force_send' to True means send the packet immediately\n."
         "TODO: flags and private_key support not implemented.\n"
     },
     {
@@@@ -237,9 +237,8 @@@@ static PyMethodDef pysilc_client_methods[] = {
         (PyCFunction)pysilc_client_send_private_message, 
         METH_VARARGS | METH_KEYWORDS, 
         "send_private_message(user, messsage, private_key = None,\n"
-        "                     flags = 0, force_send = False)\n\n"
+        "                     flags = 0)\n\n"
         "Send a message (Unicode string) to a user (SilcUser object).\n"
-        "Setting 'force_send' to True means send the packet immediately\n."
         "TODO: flags and private_key support not implemented.\n"
     },
     {
@@@@ -402,7 +401,8 @@@@ static PyMemberDef pysilc_client_members[] = {
 };
 
 #define PYSILC_CLIENT_DOC  "\
-  SilcClient(keys, nickname = \"\", username = \"\",\n\ realname = \"\",\
+  SilcClient(keys, nickname = \"\", username = \"\",\n\
+             realname = \"\",\
              hostname = \"\")\n\n\
   A SILC Client. 'keys' is a SilcKeys representing a public private\n\
   key pair. 'nickname', 'username', 'realname' and 'hostname'\n\
@@@@ -461,8 +461,7 @@@@ Attributes accessible:\n\n\
   channel_id = string (64-160bit)\n\n\
   mode = int\n\n\
   topic = string\n\n\
-  user_limit = int \n\n\
-  resolve_cmd_ident = int"
+  user_limit = int"
 
 static PyTypeObject PySilcChannel_Type = {
     PyObject_HEAD_INIT(&PyType_Type)
@@@@ -514,11 +513,8 @@@@ Accessible Attributes:\n\n\
   server = string\n\n\
   realname = string\n\n\
   fingerprint = string\n\n\
-  fingerprint_len = int\n\n\
   user_id = string (64/160bit)\n\n\
-  mode = int\n\n\
-  status = int\n\n\
-  resolve_cmd_ident = int"
+  mode = int"
 
 static PyTypeObject PySilcUser_Type = {
     PyObject_HEAD_INIT(&PyType_Type)
@


1.4
log
@update for silc-toolkit-1.1;  ok naddy@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_pysilc_h,v 1.2 2007/08/05 17:50:04 martynas Exp $
@


1.3
log
@revert now that silc-toolkit is reverted;  ok espie@@
@
text
@d1 67
a67 4
$OpenBSD: patch-src_pysilc_h,v 1.1 2006/10/09 13:10:34 alek Exp $
--- src/pysilc.h.orig	Mon Jul 10 10:42:36 2006
+++ src/pysilc.h	Mon Oct  9 13:23:30 2006
@@@@ -402,7 +402,8 @@@@ static PyMemberDef pysilc_client_members
d77 23
@


1.2
log
@unbreak to work with silc-toolkit-1.1

NOTE: the obvious thing you will need to do first for your existing
py-silc programs is to move connect_to_server to the running() callback
(see docs/examples updates).

tested by Simon Kuhnle, and steven@@ on amd64;  ok naddy@@
@
text
@d1 4
a4 67
$OpenBSD: patch-src_pysilc_h,v 1.1.1.1 2006/10/09 13:10:34 alek Exp $
--- src/pysilc.h.orig	Mon Jul 10 11:42:36 2006
+++ src/pysilc.h	Sun Jul  1 22:52:11 2007
@@@@ -22,7 +22,7 @@@@
 #endif
 
 #include "pysilc_macros.h"
-#include <silcincludes.h>
+#include <silc.h>
 #include <silcclient.h>
 #include <silctypes.h>
 
@@@@ -40,7 +40,6 @@@@ typedef struct {
 
 typedef struct {
     PyObject_HEAD
-    SilcPKCS        pkcs;
     SilcPublicKey   public;
     SilcPrivateKey  private;
 } PySilcKeys;
@@@@ -107,9 +106,11 @@@@ typedef struct {
         *ftp,
         *detach;
 
-    SilcClient             silcobj;
-    SilcClientConnection   silcconn;
-    SilcClientOperations   callbacks;
+    SilcClient                   silcobj;
+    SilcClientConnection         silcconn;
+    SilcClientConnectCallback    conncallback;
+    SilcClientOperations         callbacks;
+    SilcClientConnectionParams   params;
 
 } PySilcClient;
 
@@@@ -182,7 +183,7 @@@@ static PyMemberDef pysilc_user_members[] = {
 
 /*  ---------------- pysilc keys ------------- */
 
-static PyObject *PySilcKeys_New(SilcPKCS pkcs, SilcPublicKey public, SilcPrivateKey private);
+static PyObject *PySilcKeys_New(SilcPublicKey public, SilcPrivateKey private);
 static void PySilcKeys_Del(PyObject *object);
 
 static PyMethodDef pysilc_keys_methods[] = {
@@@@ -227,9 +228,8 @@@@ static PyMethodDef pysilc_client_methods[] = {
         (PyCFunction)pysilc_client_send_channel_message, 
         METH_VARARGS | METH_KEYWORDS, 
         "send_channel_message(channel, messsage, private_key = None,\n"
-        "                     flags = 0, force_send = False)\n\n"
+        "                     flags = 0)\n\n"
         "Send a message (Unicode string) to a channel (SilcChannel object).\n"
-        "Setting 'force_send' to True means send the packet immediately\n."
         "TODO: flags and private_key support not implemented.\n"
     },
     {
@@@@ -237,9 +237,8 @@@@ static PyMethodDef pysilc_client_methods[] = {
         (PyCFunction)pysilc_client_send_private_message, 
         METH_VARARGS | METH_KEYWORDS, 
         "send_private_message(user, messsage, private_key = None,\n"
-        "                     flags = 0, force_send = False)\n\n"
+        "                     flags = 0)\n\n"
         "Send a message (Unicode string) to a user (SilcUser object).\n"
-        "Setting 'force_send' to True means send the packet immediately\n."
         "TODO: flags and private_key support not implemented.\n"
     },
     {
@@@@ -402,7 +401,8 @@@@ static PyMemberDef pysilc_client_members[] = {
a13 23
@@@@ -461,8 +461,7 @@@@ Attributes accessible:\n\n\
   channel_id = string (64-160bit)\n\n\
   mode = int\n\n\
   topic = string\n\n\
-  user_limit = int \n\n\
-  resolve_cmd_ident = int"
+  user_limit = int"
 
 static PyTypeObject PySilcChannel_Type = {
     PyObject_HEAD_INIT(&PyType_Type)
@@@@ -514,11 +513,8 @@@@ Accessible Attributes:\n\n\
   server = string\n\n\
   realname = string\n\n\
   fingerprint = string\n\n\
-  fingerprint_len = int\n\n\
   user_id = string (64/160bit)\n\n\
-  mode = int\n\n\
-  status = int\n\n\
-  resolve_cmd_ident = int"
+  mode = int"
 
 static PyTypeObject PySilcUser_Type = {
     PyObject_HEAD_INIT(&PyType_Type)
@


1.1
log
@Initial revision
@
text
@d1 67
a67 4
$OpenBSD$
--- src/pysilc.h.orig	Mon Jul 10 10:42:36 2006
+++ src/pysilc.h	Mon Oct  9 13:23:30 2006
@@@@ -402,7 +402,8 @@@@ static PyMemberDef pysilc_client_members
d77 23
@


1.1.1.1
log
@Import py-silc 0.4

PySilc is a near-complete set of Python bindings for creating SILC
clients using the silc-toolkit. It allows developers to write
simple bots and clients for connecting to SILC servers.

From Martynas Venckus <martynas@@altroot.org>
@
text
@@
