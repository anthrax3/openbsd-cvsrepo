head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	sthen_20150913:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.06.26.14.15.26;	author espie;	state Exp;
branches;
next	1.6;
commitid	9tSQF6TQgVuF3xwF;

1.6
date	2016.06.24.15.59.12;	author krw;	state Exp;
branches;
next	1.5;
commitid	uNq7PAnG26SO2XnT;

1.5
date	2016.06.23.19.23.53;	author krw;	state Exp;
branches;
next	1.4;
commitid	vwUgBiCmN1lWQqPh;

1.4
date	2016.03.29.11.27.00;	author naddy;	state Exp;
branches;
next	1.3;
commitid	YG8j0S3Qu1QSiwCV;

1.3
date	2015.09.18.10.43.27;	author jca;	state Exp;
branches;
next	1.2;
commitid	zjoexRp2ohjkkCxX;

1.2
date	2015.09.17.17.18.34;	author jca;	state Exp;
branches;
next	1.1;
commitid	vgGQbF3HMLdM2z9R;

1.1
date	2015.09.13.15.20.19;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	C8LdE4IJDl3S4h5S;

1.1.1.1
date	2015.09.13.15.20.19;	author sthen;	state Exp;
branches;
next	;
commitid	C8LdE4IJDl3S4h5S;


desc
@@


1.7
log
@even if you're fixing stuff, you should STILL bump after tweaking the PLIST
contents!!!
@
text
@# $OpenBSD: Makefile,v 1.6 2016/06/24 15:59:12 krw Exp $

COMMENT =	OCaml parallel map primitive for multicores
CATEGORIES =	devel

V =		1.0-rc7
NAME =		ocaml-parmap
DISTNAME =	ocaml-parmap-$V
DISTFILES =	${DISTNAME}{$V}.tar.gz
WRKDIST =	${WRKDIR}/parmap-$V
PKGNAME =	ocaml-parmap-${V:S/-//}
REVISION =	2
MASTER_SITES =	https://github.com/rdicosmo/parmap/archive/

HOMEPAGE =	https://github.com/rdicosmo/parmap

# LGPLv2+ + static linking exception
PERMIT_PACKAGE_CDROM =		Yes

MODULES =	lang/ocaml
BUILD_DEPENDS =	sysutils/findlib devel/ocaml-ocamlbuild
USE_GMAKE =	Yes

CONFIGURE_STYLE =	gnu

FAKE_FLAGS =	DESTDIR=${WRKINST}${TRUEPREFIX}

TEST_TARGET =	tests
TEST_DEPENDS =	${BASE_PKGPATH}

post-patch:
	cp ${WRKSRC}/setcore.mli ${WRKSRC}/setcore.ml

.include <bsd.port.mk>
@


1.6
log
@Upgrade Ocaml to 4.3.0 and tweak ports the minimal amount to keep
them all compiling.

Tweaks include updating

ocaml-batteries 2.3.1 -> 2.5.0
ocaml-lwt 2.4.8 -> 2.5.2
ocaml-ppx-tools 0.99.2 -> 4.03.0
ocaml-camlp4 4.02+6 -> 4.03+1
utop 1.15 -> 1.19.2

and fixes to coccinelle and wyrd to let them build on bytecode archs.

Other necessary tweaks from the various homes of the projects.

Everything still builds on amd64 (native and bytecode) and sparc64 (bytecode).

ok anil@@ sthen@@ so final 4.3.0 tweaks can be done in-tree.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2016/06/23 19:23:53 krw Exp $
d12 1
a12 1
REVISION =	1
@


1.5
log
@Stop building Ocaml's internal ocamlbuild and use the ocaml-ocamlbuild port
where needed.

The next step towards Ocaml 4.3.0.

Bulk build by sthen@@ identified several laggards which are included here.

ok anil@@ sthen@@ so final 4.3.0 polishing can be done in-tree.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2016/03/29 11:27:00 naddy Exp $
d30 3
@


1.4
log
@g/c PFRAG.shared from OCaml ports; ok chrisz@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2015/09/18 10:43:27 jca Exp $
d12 1
a12 1
REVISION =	0
d21 1
a21 1
BUILD_DEPENDS =	sysutils/findlib
@


1.3
log
@Update to parmap-1.0-rc7, patches committed upstream.  ok sthen@@

While here, also tweak the license marker.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2015/09/17 17:18:34 jca Exp $
d12 1
@


1.2
log
@Allow building parmap - a dep of devel/coccinelle - on non-OCaml-native archs.

Patches already upstream.  ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2015/09/13 15:20:19 sthen Exp $
d6 1
a6 2
V =		1.0-rc6
REVISION =	0
d16 1
a16 1
# GPLv2+
a23 5

.include <bsd.port.arch.mk>
.if !${PROPERTIES:Mocaml_native_dynlink}
MAKE_FLAGS+=	CMXSLIBS=
.endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 4
# $OpenBSD: Makefile,v 1.8 2014/10/30 23:39:23 sthen Exp $

SHARED_ONLY =	Yes
ONLY_FOR_ARCHS = ${OCAML_NATIVE_ARCHS}
d7 1
d25 7
@


1.1.1.1
log
@import devel/ocaml-parmap, ok jca (we would prefer if this worked on !native
arch, but the upstream Makefiles are impenetrable)

Parmap is a minimalistic library allowing to exploit multicore
architecture for OCaml programs with minimal modifications: if you want
to use your many cores to accelerate an operation which happens to be a
map, fold or map/fold (map-reduce), just use Parmap's parmap, parfold
and parmapfold primitives in place of the standard List.map and friends,
and specify the number of subprocesses to use by the optional parameter
~ncores.
@
text
@@
