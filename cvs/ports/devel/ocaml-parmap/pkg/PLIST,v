head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	sthen_20150913:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2016.03.29.11.27.00;	author naddy;	state Exp;
branches;
next	1.2;
commitid	YG8j0S3Qu1QSiwCV;

1.2
date	2015.09.17.17.18.35;	author jca;	state Exp;
branches;
next	1.1;
commitid	vgGQbF3HMLdM2z9R;

1.1
date	2015.09.13.15.20.19;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	C8LdE4IJDl3S4h5S;

1.1.1.1
date	2015.09.13.15.20.19;	author sthen;	state Exp;
branches;
next	;
commitid	C8LdE4IJDl3S4h5S;


desc
@@


1.3
log
@g/c PFRAG.shared from OCaml ports; ok chrisz@@
@
text
@@@comment $OpenBSD: PLIST,v 1.2 2015/09/17 17:18:35 jca Exp $
%%native%%
lib/ocaml/parmap/
lib/ocaml/parmap/META
lib/ocaml/parmap/bytearray.cmi
lib/ocaml/parmap/bytearray.mli
lib/ocaml/parmap/libparmap_stubs.a
lib/ocaml/parmap/parmap.cma
lib/ocaml/parmap/parmap.cmi
lib/ocaml/parmap/parmap.mli
lib/ocaml/parmap/parmap_utils.cmi
lib/ocaml/parmap/parmap_utils.mli
lib/ocaml/parmap/setcore.cmi
lib/ocaml/parmap/setcore.mli
lib/ocaml/stublibs/dllparmap_stubs.so
@@comment lib/ocaml/stublibs/dllparmap_stubs.so.owner
@@man man/man3/Parmap.3o
@


1.2
log
@Allow building parmap - a dep of devel/coccinelle - on non-OCaml-native archs.

Patches already upstream.  ok sthen@@
@
text
@d1 1
a1 2
@@comment $OpenBSD$
%%SHARED%%
d15 1
@


1.1
log
@Initial revision
@
text
@d2 2
d8 1
a8 3
lib/ocaml/parmap/bytearray_stubs.o
lib/ocaml/parmap/libparmap.a
lib/ocaml/parmap/parmap.a
a10 2
lib/ocaml/parmap/parmap.cmxa
@@bin lib/ocaml/parmap/parmap.cmxs
d16 2
a17 3
lib/ocaml/parmap/setcore_stubs.o
lib/ocaml/stublibs/dllparmap.so
lib/ocaml/stublibs/dllparmap.so.owner
@


1.1.1.1
log
@import devel/ocaml-parmap, ok jca (we would prefer if this worked on !native
arch, but the upstream Makefiles are impenetrable)

Parmap is a minimalistic library allowing to exploit multicore
architecture for OCaml programs with minimal modifications: if you want
to use your many cores to accelerate an operation which happens to be a
map, fold or map/fold (map-reduce), just use Parmap's parmap, parfold
and parmapfold primitives in place of the standard List.map and friends,
and specify the number of subprocesses to use by the optional parameter
~ncores.
@
text
@@
