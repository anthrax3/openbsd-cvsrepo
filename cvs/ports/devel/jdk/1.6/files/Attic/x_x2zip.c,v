head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	kurt_20071118:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2013.02.01.15.34.35;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2007.11.19.03.19.44;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.19.03.19.44;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to openjdk6 u32 which is licensed under the GPL and allows
  packages.
- Initial BSD patchset from FreeBSD openjdk6 port.
- New bootstrap method. Since ecj is not able to bootstrap openjdk6
  without heavy patching, use a functional bootjdk to build.
- Add a target for building the bootjdk called build-bootjdk.
- Apply IcedTea AppletHole patches for icedtea-web support.
- Backport patch to serialize gconf client access which corrects
  gconf/dbus related crashes. From Christian Schulte Upstream
  CR 7188755.
- Reapply audio support from jakemsr@@.
- Port change for CWM. Recognize CWM as a Non-Reparenting window
  manager.
- Backport various openjdk7/bsd-port upstream fixes both specific
  to OpenBSD and general.
Tested by landry@@ espie@@ and others.
@
text
@/*
 * Copyright (C) 2007 Greg Lewis. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/types.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>

#ifndef BUFSIZ
#define BUFSIZ 0x10000
#endif

int
main(int argc, char* argv[]) {
    char *key;
    char *oname;
    char buf[BUFSIZ];
    size_t keylen, olen;
    int ifd, ofd, i, fileoff = 0, bufoff = 0, buflen = 0, eof = 0;
    ssize_t bytes;

    if (argc < 3) {
        errx(1, "Usage: x_x2zip <key> <file>");
    }

    // Key
    key = argv[1];
    keylen = strlen(key);

    // Open input file
    if ((ifd = open(argv[2], O_RDONLY)) == -1) {
        err(1, "Can't open input file %s", argv[2]);
    }

    // Open output file
    olen = strlen(argv[2]) + 5;
    if ((oname = (char *) malloc(olen)) == NULL) {
        err(1, "Can't create output file name");
    }
    if (strlcpy(oname, argv[2], olen) >= olen) {
        err(1, "Can't create output file name");
    }
    if (strlcat(oname, ".zip", olen) >= olen) {
        err(1, "Can't create output file name");
    }
    if ((ofd = open(oname,
                    O_CREAT | O_TRUNC | O_WRONLY, S_IRUSR | S_IWUSR)) == -1) {
        err(1, "Can't open output file %s", oname);
    }
    free(oname);

    while (!eof) {
        // Read into the buffer
        bufoff = 0;
        buflen = 0;
        while (1) {
            if (buflen >= BUFSIZ) {
                break;
            }
            if ((bytes = read(ifd, buf, BUFSIZ - buflen)) == -1) {
                err(1, "Error reading input file");
            }
            if (!bytes) {
                eof = 1;
                break;
            }
            buflen += bytes;
        }

        // Decrypt
        for (i = 0; i < buflen; i++) {
            buf[i] = buf[i] ^ key[(fileoff + i) % keylen];
        }

        // Update file offset
        fileoff += buflen;

        // Output the buffer
        bufoff = 0;
        while (bufoff < buflen) {
            if ((bytes = write(ofd, buf + bufoff, buflen - bufoff)) == -1) {
                err(1, "Error writing output file");
            }
            bufoff += bytes;
        }
    }

    return 0;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial import of Java (TM) 2 SDK, Standard Edition Version 1.6.0 with
amd64 plugin support. 64-bit plugin hacking by myself and Jung-uk Kim.
Credit for the majority of the 1.6 BSD porting goes to Greg Lewis who
back ported my 1.7 hotspot patches to 1.6 and forward ported the 1.5
j2se patches to 1.6. Thanks to several testers who provided helpful
feedback. okay ian@@
@
text
@@
