head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.11.20.23.14.58;	author kurt;	state dead;
branches;
next	1.1;
commitid	OqMxfbqOene3RIIF;

1.1
date	2013.02.01.15.34.35;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove 1.6 from cvs. It was unlinked last release. okay sthen@@
@
text
@$OpenBSD: patch-hotspot_src_os_bsd_vm_attachListener_bsd_cpp,v 1.1 2013/02/01 15:34:35 kurt Exp $
--- hotspot/src/os/bsd/vm/attachListener_bsd.cpp.orig	Tue Jan 29 12:03:16 2013
+++ hotspot/src/os/bsd/vm/attachListener_bsd.cpp	Tue Jan 29 12:08:58 2013
@@@@ -170,41 +170,58 @@@@ extern "C" {
 // Initialization - create a listener socket and bind it to a file
 
 int BsdAttachListener::init() {
-  char path[UNIX_PATH_MAX];        // socket file
-  int listener;                 // listener socket (file descriptor)
+  char path[UNIX_PATH_MAX];          // socket file
+  char initial_path[UNIX_PATH_MAX];  // socket file during setup
+  int listener;                      // listener socket (file descriptor)
 
   // register function to cleanup
   ::atexit(listener_cleanup);
 
+  int n = snprintf(path, UNIX_PATH_MAX, "%s/.java_pid%d",
+                   os::get_temp_directory(), os::current_process_id());
+  if (n < (int)UNIX_PATH_MAX) {
+    n = snprintf(initial_path, UNIX_PATH_MAX, "%s.tmp", path);
+  }
+  if (n >= (int)UNIX_PATH_MAX) {
+    return -1;
+  }
+
   // create the listener socket
   listener = ::socket(PF_UNIX, SOCK_STREAM, 0);
   if (listener == -1) {
     return -1;
   }
 
-  int res = -1;
+  // bind socket
   struct sockaddr_un addr;
   addr.sun_family = AF_UNIX;
-
-  snprintf(path, UNIX_PATH_MAX, "%s/.java_pid%d",
-           os::get_temp_directory(), os::current_process_id());
-  strcpy(addr.sun_path, path);
-  ::unlink(path);
-  res = ::bind(listener, (struct sockaddr*)&addr, sizeof(addr));
+  strcpy(addr.sun_path, initial_path);
+  ::unlink(initial_path);
+  int res = ::bind(listener, (struct sockaddr*)&addr, sizeof(addr));
   if (res == -1) {
     RESTARTABLE(::close(listener), res);
     return -1;
   }
-  set_path(path);
 
-  // put in listen mode and set permission and ownership
-  if ((::listen(listener, 5) == -1) || (::chmod(path, S_IREAD|S_IWRITE) == -1) ||
-      (::chown(path, geteuid(), getegid()) == -1)) {
+  // put in listen mode, set permissions, and rename into place
+  res = ::listen(listener, 5);
+  if (res == 0) {
+    RESTARTABLE(::chmod(initial_path, S_IREAD|S_IWRITE), res);
+    if (res == 0) {
+      // make sure the file is owned by the effective user and effective group
+      // (this is the default on linux, but not on mac os)
+      RESTARTABLE(::chown(initial_path, geteuid(), getegid()), res);
+      if (res == 0) {
+        res = ::rename(initial_path, path);
+      }
+    }
+  }
+  if (res == -1) {
     RESTARTABLE(::close(listener), res);
-    ::unlink(path);
-    set_path(NULL);
+    ::unlink(initial_path);
     return -1;
   }
+  set_path(path);
   set_listener(listener);
 
   return 0;
@


1.1
log
@- Update to openjdk6 u32 which is licensed under the GPL and allows
  packages.
- Initial BSD patchset from FreeBSD openjdk6 port.
- New bootstrap method. Since ecj is not able to bootstrap openjdk6
  without heavy patching, use a functional bootjdk to build.
- Add a target for building the bootjdk called build-bootjdk.
- Apply IcedTea AppletHole patches for icedtea-web support.
- Backport patch to serialize gconf client access which corrects
  gconf/dbus related crashes. From Christian Schulte Upstream
  CR 7188755.
- Reapply audio support from jakemsr@@.
- Port change for CWM. Recognize CWM as a Non-Reparenting window
  manager.
- Backport various openjdk7/bsd-port upstream fixes both specific
  to OpenBSD and general.
Tested by landry@@ espie@@ and others.
@
text
@d1 1
a1 1
$OpenBSD$
@

