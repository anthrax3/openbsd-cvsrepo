head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.02.01.15.34.35;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2008.03.17.03.28.26;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to openjdk6 u32 which is licensed under the GPL and allows
  packages.
- Initial BSD patchset from FreeBSD openjdk6 port.
- New bootstrap method. Since ecj is not able to bootstrap openjdk6
  without heavy patching, use a functional bootjdk to build.
- Add a target for building the bootjdk called build-bootjdk.
- Apply IcedTea AppletHole patches for icedtea-web support.
- Backport patch to serialize gconf client access which corrects
  gconf/dbus related crashes. From Christian Schulte Upstream
  CR 7188755.
- Reapply audio support from jakemsr@@.
- Port change for CWM. Recognize CWM as a Non-Reparenting window
  manager.
- Backport various openjdk7/bsd-port upstream fixes both specific
  to OpenBSD and general.
Tested by landry@@ espie@@ and others.
@
text
@$OpenBSD: patch-hotspot_src_os_cpu_bsd_amd64_vm_os_bsd_amd64_cpp,v 1.1 2008/03/17 03:28:26 kurt Exp $
--- hotspot/src/os_cpu/bsd_amd64/vm/os_bsd_amd64.cpp.orig	Sun Mar 16 09:33:24 2008
+++ hotspot/src/os_cpu/bsd_amd64/vm/os_bsd_amd64.cpp	Sun Mar 16 09:47:09 2008
@@@@ -449,6 +449,24 @@@@ JVM_handle_bsd_signal(int sig,
                thread->doing_unsafe_access()) {
       stub = StubRoutines::handler_for_unsafe_access();
     }
+
+    // jni_fast_Get<Primitive>Field can trap at certain pc's if a GC kicks in
+    // and the heap gets shrunk before the field access.
+    if ((sig == SIGSEGV) || (sig == SIGBUS)) {
+      address addr = JNI_FastGetField::find_slowcase_pc(pc);
+      if (addr != (address)-1) {
+        stub = addr;
+      }
+    }
+
+    // Check to see if we caught the safepoint code in the
+    // process of write protecting the memory serialization page.
+    // It write enables the page immediately after protecting it
+    // so we can just return to retry the write.
+    if ((sig == SIGSEGV || sig == SIGBUS) &&
+        os::is_memory_serialize_page(thread, (address)info->si_addr)) {
+      return true;
+    }
   }
 
   if (stub != NULL) {
@


1.1
log
@- use HW_{USER|PHYS}MEM64. okay naddy@@
- update to bsd patchset 4
- for amd64, sync JVM_handle_bsd_signal with its linux counterpart from
  which it was originally derived; add two segments of code dealing with
  sigsegv fringe cases.
- update pkg/MESSAGE-* to use recent mozilla product names.
@
text
@d1 1
a1 1
$OpenBSD$
@

