head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.0.16
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.10
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.8
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.02.01.15.34.35;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2009.03.01.20.43.09;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to openjdk6 u32 which is licensed under the GPL and allows
  packages.
- Initial BSD patchset from FreeBSD openjdk6 port.
- New bootstrap method. Since ecj is not able to bootstrap openjdk6
  without heavy patching, use a functional bootjdk to build.
- Add a target for building the bootjdk called build-bootjdk.
- Apply IcedTea AppletHole patches for icedtea-web support.
- Backport patch to serialize gconf client access which corrects
  gconf/dbus related crashes. From Christian Schulte Upstream
  CR 7188755.
- Reapply audio support from jakemsr@@.
- Port change for CWM. Recognize CWM as a Non-Reparenting window
  manager.
- Backport various openjdk7/bsd-port upstream fixes both specific
  to OpenBSD and general.
Tested by landry@@ espie@@ and others.
@
text
@$OpenBSD: patch-j2se_src_share_classes_java_util_Calendar_java,v 1.1 2009/03/01 20:43:09 naddy Exp $
--- j2se/src/share/classes/java/util/Calendar.java.orig	Tue Sep 25 00:44:04 2007
+++ j2se/src/share/classes/java/util/Calendar.java	Sat Feb 28 09:35:28 2009
@@@@ -23,9 +23,14 @@@@ package java.util;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.io.OptionalDataException;
 import java.io.Serializable;
+import java.security.AccessControlContext;
 import java.security.AccessController;
+import java.security.PermissionCollection;
+import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
+import java.security.ProtectionDomain;
 import java.text.DateFormat;
 import java.text.DateFormatSymbols;
 import sun.util.BuddhistCalendar;
@@@@ -2599,6 +2604,18 @@@@ public abstract class Calendar implements Serializable
 	}
     }
 
+    private static class CalendarAccessControlContext {
+        private static final AccessControlContext INSTANCE;
+        static {
+            RuntimePermission perm = new RuntimePermission("accessClassInPackage.sun.util.calendar");
+            PermissionCollection perms = perm.newPermissionCollection();
+            perms.add(perm);
+            INSTANCE = new AccessControlContext(new ProtectionDomain[] {
+                                                    new ProtectionDomain(null, perms)
+                                                });
+        }
+    }
+
     /**
      * Reconstitutes this object from a stream (i.e., deserialize it).
      */
@@@@ -2628,18 +2645,31 @@@@ public abstract class Calendar implements Serializable
         serialVersionOnStream = currentSerialVersion;
 
 	// If there's a ZoneInfo object, use it for zone.
+        ZoneInfo zi = null;
 	try {
-	    ZoneInfo zi = (ZoneInfo) AccessController.doPrivileged(
-		new PrivilegedExceptionAction() {
-		    public Object run() throws Exception {
-			return input.readObject();
-		    }
-		});
-	    if (zi != null) {
-		zone = zi;
-	    }
-	} catch (Exception e) {
+            zi = AccessController.doPrivileged(
+                    new PrivilegedExceptionAction<ZoneInfo>() {
+                        public ZoneInfo run() throws Exception {
+                            return (ZoneInfo) input.readObject();
+                        }
+                    },
+                    CalendarAccessControlContext.INSTANCE);
+        } catch (PrivilegedActionException pae) {
+            Exception e = pae.getException();
+            if (!(e instanceof OptionalDataException)) {
+                if (e instanceof RuntimeException) {
+                    throw (RuntimeException) e;
+                } else if (e instanceof IOException) {
+                    throw (IOException) e;
+                } else if (e instanceof ClassNotFoundException) {
+                    throw (ClassNotFoundException) e;
+                }
+                throw new RuntimeException(e);
+            }
 	}
+        if (zi != null) {
+            zone = zi;
+        }
 
 	// If the deserialized object has a SimpleTimeZone, try to
 	// replace it with a ZoneInfo equivalent (as of 1.4) in order
@@@@ -2647,9 +2677,9 @@@@ public abstract class Calendar implements Serializable
 	// implementation as much as possible.
 	if (zone instanceof SimpleTimeZone) {
 	    String id = zone.getID();
-	    TimeZone zi = TimeZone.getTimeZone(id);
-	    if (zi != null && zi.hasSameRules(zone) && zi.getID().equals(id)) {
-		zone = zi;
+            TimeZone tz = TimeZone.getTimeZone(id);
+            if (tz != null && tz.hasSameRules(zone) && tz.getID().equals(id)) {
+                zone = tz;
 	    }
 	}
     }
@


1.1
log
@Java bug fix; from kurt@@
@
text
@d1 1
a1 1
$OpenBSD$
@

