head	1.2;
access;
symbols
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	kurt_20071118:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.02.01.15.34.35;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2007.11.19.03.19.44;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.19.03.19.44;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update to openjdk6 u32 which is licensed under the GPL and allows
  packages.
- Initial BSD patchset from FreeBSD openjdk6 port.
- New bootstrap method. Since ecj is not able to bootstrap openjdk6
  without heavy patching, use a functional bootjdk to build.
- Add a target for building the bootjdk called build-bootjdk.
- Apply IcedTea AppletHole patches for icedtea-web support.
- Backport patch to serialize gconf client access which corrects
  gconf/dbus related crashes. From Christian Schulte Upstream
  CR 7188755.
- Reapply audio support from jakemsr@@.
- Port change for CWM. Recognize CWM as a Non-Reparenting window
  manager.
- Backport various openjdk7/bsd-port upstream fixes both specific
  to OpenBSD and general.
Tested by landry@@ espie@@ and others.
@
text
@$OpenBSD: patch-j2se_src_share_classes_java_lang_ClassLoader_java,v 1.1 2007/11/19 03:19:44 kurt Exp $
--- j2se/src/share/classes/java/lang/ClassLoader.java.orig	Thu Apr 12 04:43:44 2007
+++ j2se/src/share/classes/java/lang/ClassLoader.java	Wed Oct 10 17:42:40 2007
@@@@ -9,6 +9,7 @@@@ package java.lang;
 import java.io.InputStream;
 import java.io.IOException;
 import java.io.File;
+import java.io.FilenameFilter;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
@@@@ -29,6 +30,7 @@@@ import java.util.Set;
 import java.util.Stack;
 import java.util.Map;
 import java.util.Vector;
+import java.util.Arrays;
 import sun.misc.ClassFileTransformer;
 import sun.misc.CompoundEnumeration;
 import sun.misc.Resource;
@@@@ -1683,18 +1685,43 @@@@ public abstract class ClassLoader {
     }
 
     private static boolean loadLibrary0(Class fromClass, final File file) {
-	Boolean exists = (Boolean)
+	File libfile = (File)
 	    AccessController.doPrivileged(new PrivilegedAction() {
+		class LibraryFileFilter implements FilenameFilter {
+		    String lib_name;
+		    LibraryFileFilter(String lib_name) { this.lib_name = lib_name; }
+		    public boolean accept(File dir, String name) {
+			if (name.startsWith(lib_name)) {
+			    return name.substring(lib_name.length()).matches("\056[0-9]+\056[0-9]+$");
+			}
+			return false;
+		    }
+		}
+
 		public Object run() {
-		    return new Boolean(file.exists());
+		    if (file.exists())
+			return file;
+		    // if file is unversioned, check for a versioned one in same dir
+		    if (file.getName().endsWith(".so")) {
+			File dir = file.getParentFile();
+			if (dir != null) {
+			    String liblist[] = dir.list(new LibraryFileFilter(file.getName()));
+			    if (liblist != null && liblist.length > 0) {
+				// return the highest versioned lib
+				Arrays.sort(liblist);
+				return new File(dir, liblist[liblist.length - 1]);
+			    }
+			}
+		    }
+		    return null;
 		}
 	    });
-	if (!exists.booleanValue()) {
+	if (libfile == null) {
 	    return false;
 	}
         String name;
 	try {
-	    name = file.getCanonicalPath();
+	    name = libfile.getCanonicalPath();
 	} catch (IOException e) {
 	    return false;
 	}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Initial import of Java (TM) 2 SDK, Standard Edition Version 1.6.0 with
amd64 plugin support. 64-bit plugin hacking by myself and Jung-uk Kim.
Credit for the majority of the 1.6 BSD porting goes to Greg Lewis who
back ported my 1.7 hotspot patches to 1.6 and forward ported the 1.5
j2se patches to 1.6. Thanks to several testers who provided helpful
feedback. okay ian@@
@
text
@@
