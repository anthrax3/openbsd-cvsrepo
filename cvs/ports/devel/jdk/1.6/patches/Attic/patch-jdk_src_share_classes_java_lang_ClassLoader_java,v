head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.11.20.23.14.58;	author kurt;	state dead;
branches;
next	1.1;
commitid	OqMxfbqOene3RIIF;

1.1
date	2013.02.01.15.34.35;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove 1.6 from cvs. It was unlinked last release. okay sthen@@
@
text
@$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.1 2013/02/01 15:34:35 kurt Exp $
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Fri Oct 26 14:25:51 2012
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Tue Jan 29 08:31:38 2013
@@@@ -27,6 +27,7 @@@@ package java.lang;
 import java.io.InputStream;
 import java.io.IOException;
 import java.io.File;
+import java.io.FilenameFilter;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
@@@@ -39,6 +40,9 @@@@ import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.security.ProtectionDomain;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.HashMap;
@@@@ -1682,18 +1686,61 @@@@ public abstract class ClassLoader {
     }
 
     private static boolean loadLibrary0(Class fromClass, final File file) {
-        Boolean exists = (Boolean)
-            AccessController.doPrivileged(new PrivilegedAction() {
-                public Object run() {
-                    return new Boolean(file.exists());
+        File libfile = AccessController.doPrivileged(
+            new PrivilegedAction<File>() {
+                class LibraryFileFilter implements FilenameFilter {
+                    final String libname;
+
+                    LibraryFileFilter(String libname) {
+                        this.libname = libname;
+                    }
+
+                    public boolean accept(File dir, String name) {
+                        if (name.startsWith(libname)) {
+                            return name.substring(libname.length()).matches("\\.[0-9]{1,20}\\.[0-9]{1,20}$");
+                        }
+                        return false;
+                    }
                 }
-            });
-        if (!exists.booleanValue()) {
+
+                class LibraryFileVersionComparator implements Comparator<String> {
+                    public int compare(String s1, String s2) {
+                        String[] f1 = s1.split("\\."), f2 = s2.split("\\.");
+                        int res = compareComponents(f1[f1.length - 2], f2[f2.length - 2]);
+                        if (res == 0) {
+                            res = compareComponents(f1[f1.length - 1], f2[f2.length - 1]);
+                        }
+                        return res;
+                    }
+
+                    int compareComponents(String s1, String s2) {
+                        return Long.valueOf(s1).compareTo(Long.valueOf(s2));
+                    }
+                }
+
+                public File run() {
+                    if (file.exists())
+                        return file;
+                    // if file is unversioned, check for a versioned one in same dir
+                    if (file.getName().endsWith(".so")) {
+                        File dir = file.getParentFile();
+                        if (dir != null) {
+                            String liblist[] = dir.list(new LibraryFileFilter(file.getName()));
+                            if (liblist != null && liblist.length > 0) {
+                                // return the highest versioned lib
+                                String highest = Collections.max(Arrays.asList(liblist), new LibraryFileVersionComparator());
+                                return new File(dir, highest);
+                            }
+                        }
+                    }
+                    return null;
+                }});
+        if (libfile == null) {
             return false;
         }
         String name;
         try {
-            name = file.getCanonicalPath();
+            name = libfile.getCanonicalPath();
         } catch (IOException e) {
             return false;
         }
@


1.1
log
@- Update to openjdk6 u32 which is licensed under the GPL and allows
  packages.
- Initial BSD patchset from FreeBSD openjdk6 port.
- New bootstrap method. Since ecj is not able to bootstrap openjdk6
  without heavy patching, use a functional bootjdk to build.
- Add a target for building the bootjdk called build-bootjdk.
- Apply IcedTea AppletHole patches for icedtea-web support.
- Backport patch to serialize gconf client access which corrects
  gconf/dbus related crashes. From Christian Schulte Upstream
  CR 7188755.
- Reapply audio support from jakemsr@@.
- Port change for CWM. Recognize CWM as a Non-Reparenting window
  manager.
- Backport various openjdk7/bsd-port upstream fixes both specific
  to OpenBSD and general.
Tested by landry@@ espie@@ and others.
@
text
@d1 1
a1 1
$OpenBSD$
@

