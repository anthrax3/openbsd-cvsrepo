head	1.2;
access;
symbols
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2008.03.19.18.05.44;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2007.09.06.15.46.19;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@$OpenBSD: patch-j2se_src_closed_solaris_native_com_sun_media_sound_engine_HAE_API_BsdOS_Capture_c,v 1.1 2007/09/06 15:46:19 kurt Exp $
--- j2se/src/closed/solaris/native/com/sun/media/sound/engine/HAE_API_BsdOS_Capture.c.orig	Sun Jul 29 23:11:09 2007
+++ j2se/src/closed/solaris/native/com/sun/media/sound/engine/HAE_API_BsdOS_Capture.c	Sun Jul 29 23:19:53 2007
@@@@ -37,11 +37,13 @@@@
 #include <sys/ioctl.h>
 #include <sys/wait.h>
 #include <errno.h>
-#include <bsd/soundcard.h>
-#include <malloc.h>
 
-// for I_FLUSH
-#include <stropts.h>
+#ifdef __FreeBSD__
+#include <sys/soundcard.h>
+#endif
+#if defined(__NetBSD__) || defined(__OpenBSD__)
+#include <soundcard.h>
+#endif
 
 #include <string.h>
 
@@@@ -55,15 +57,15 @@@@
 #endif
 
 
-#define HAE_LINUX_NUM_CAPTURE_BUFFERS	1	// number of capture buffers
+#define HAE_BSD_NUM_CAPTURE_BUFFERS	1	// number of capture buffers
 
-#define HAE_LINUX_FRAMES_PER_BUFFER	4096	// how many frames do we read (capture) at a time?
+#define HAE_BSD_FRAMES_PER_BUFFER	4096	// how many frames do we read (capture) at a time?
 
-#define HAE_LINUX_SOUND_CAPTURE_PERIOD	10	// sleep time in milliseconds, between position checks
+#define HAE_BSD_SOUND_CAPTURE_PERIOD	10	// sleep time in milliseconds, between position checks
 // $$kk: 10.13.98: need to implement position checks!
 
-#define HAE_LINUX_DEFAULT_BUFFERSIZE_IN_MS	150		// default size of buffer in ms
-#define HAE_LINUX_MIN_BUFFERSIZE_IN_MS		50		// minimum size of buffer in ms (can't go beneath
+#define HAE_BSD_DEFAULT_BUFFERSIZE_IN_MS	150		// default size of buffer in ms
+#define HAE_BSD_MIN_BUFFERSIZE_IN_MS		50		// minimum size of buffer in ms (can't go beneath
 // hardware buffersize, however)
 
 
@@@@ -83,9 +85,9 @@@@ static short int g_soundDeviceIndex = 0; // if non zer
 
 static UINT32	g_encoding; // audio encoding
 
-// number of frames to read; right now this is fixed as HAE_LINUX_FRAMES_PER_BUFFER
+// number of frames to read; right now this is fixed as HAE_BSD_FRAMES_PER_BUFFER
 // $$kk: 10.13.98: need to figure out how to configure this
-static INT32 g_audioFramesToRead = HAE_LINUX_FRAMES_PER_BUFFER;
+static INT32 g_audioFramesToRead = HAE_BSD_FRAMES_PER_BUFFER;
 
 static HAE_CaptureDone	g_captureDoneProc; // capture callback
 
@@@@ -202,11 +204,11 @@@@ void PV_AudioWaveInFrameThread(void* context) {
 		    if (g_flushMode == FLUSHMODE_FLUSHED) {
 			break;
 		    }
-		    HAE_SleepFrameThread(context, HAE_LINUX_SOUND_CAPTURE_PERIOD);
+		    HAE_SleepFrameThread(context, HAE_BSD_SOUND_CAPTURE_PERIOD);
 		}
 	    } else if (!g_captureShutdown) {
 		/* what to do here ? */
-		HAE_SleepFrameThread(context, HAE_LINUX_SOUND_CAPTURE_PERIOD);
+		HAE_SleepFrameThread(context, HAE_BSD_SOUND_CAPTURE_PERIOD);
 	    }
 	}
 	if (g_flushMode == FLUSHMODE_FLUSHED) {
@@@@ -269,9 +271,9 @@@@ int HAE_AquireAudioCapture(void *context, UINT32 encod
 
     // $$jb: 05.19.99: Setting the buffer size
     // $$kk: 08.06.99: i got rid of the fixed minimum value for buffersize
-    // minFramesPerBuffer = sampleRate * HAE_LINUX_MIN_BUFFERSIZE_IN_MS / 1000;
+    // minFramesPerBuffer = sampleRate * HAE_BSD_MIN_BUFFERSIZE_IN_MS / 1000;
     if ( audioFramesPerBuffer == 0 ) {
-	audioFramesPerBuffer = sampleRate * HAE_LINUX_DEFAULT_BUFFERSIZE_IN_MS / 1000;
+	audioFramesPerBuffer = sampleRate * HAE_BSD_DEFAULT_BUFFERSIZE_IN_MS / 1000;
     }
 
 
@@@@ -383,7 +385,7 @@@@ int HAE_StartAudioCapture(HAE_CaptureDone done, void *
 
 	// allocate the capture buffer
 	// $$jb: 05.19.99:  This is set in HAE_AquireAudioCapture
-	//g_audioFramesToRead = HAE_LINUX_FRAMES_PER_BUFFER;	// our read buffer will hold this many frames of sampled audio data
+	//g_audioFramesToRead = HAE_BSD_FRAMES_PER_BUFFER;	// our read buffer will hold this many frames of sampled audio data
 
 	// we're going to build this many buffers at a time
 	if (g_bitSize == 8) {
@@@@ -555,7 +557,14 @@@@ void HAE_GetCaptureDeviceName(INT32 deviceID, char *cN
 {
     char		*data;
     static char *names[] =
-    {	"Bsd,dev/dsp,multi threaded",
+    {
+#ifdef __FreeBSD__
+               "FreeBSD,dev/dsp,multi threaded",
+#elif __NetBSD__
+               "NetBSD,dev/dsp,multi threaded",
+#elif __OpenBSD__
+               "OpenBSD,dev/dsp,multi threaded",
+#endif
     };
     if (cName && cNameLength)
 	{
@@@@ -587,7 +596,7 @@@@ UINT32 HAE_GetCaptureBufferSizeInFrames()
 // return the number of buffers used.
 int HAE_GetCaptureBufferCount()
 {
-    return HAE_LINUX_NUM_CAPTURE_BUFFERS;
+    return HAE_BSD_NUM_CAPTURE_BUFFERS;
 }
 
 // return the number of samples captured at the device
@


1.1
log
@Remove BROKEN and update port to b19. The port is fully 1.7 now (both
hotspot and j2se). The j2se patches are from the bsd java repositories
1.5 -> 1.6 (performed by Greg Lewis) -> 1.7 by myself. j2se patches are
in sync with 1.6 patchset 1 plus the Runtime.exec fix from Michiel Boland
via FreeBSD PR http://www.freebsd.org/cgi/query-pr.cgi?pr=115557.

Also from FreeBSD: interactive JRL license verification. By default the
port is IS_INTERACTIVE=Yes. Add ACCEPT_JRL_LICENSE=Yes to /etc/mk.conf
to permanently accept the JRL license.

At some point in the future I will work on switching this back to
OpenJDK/GPLv2 src. That largely depends on Sun's progress at removing more
of the binary plug bits so that stubbing out the remainder is less
cumbersome and time consuming.

Testing, comments and okay ian@@
@
text
@d1 1
a1 1
$OpenBSD$
@

