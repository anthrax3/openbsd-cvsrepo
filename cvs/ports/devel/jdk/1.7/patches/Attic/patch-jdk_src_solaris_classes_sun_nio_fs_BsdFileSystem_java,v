head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.3;

1.3
date	2009.10.07.01.53.54;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.10.19.01.09;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_classes_sun_nio_fs_BsdFileSystem_java,v 1.3 2009/10/07 01:53:54 kurt Exp $
--- jdk/src/solaris/classes/sun/nio/fs/BsdFileSystem.java.orig	Sun Sep 27 09:39:53 2009
+++ jdk/src/solaris/classes/sun/nio/fs/BsdFileSystem.java	Sun Sep 27 10:37:54 2009
@@@@ -31,49 +31,23 @@@@ import java.io.IOException;
 import java.util.*;
 import java.security.AccessController;
 import sun.security.action.GetPropertyAction;
-import static sun.nio.fs.BsdNativeDispatcher.*;
 
 /**
  * Bsd implementation of FileSystem
  */
 
 class BsdFileSystem extends UnixFileSystem {
-    private final boolean hasInotify;
 
     BsdFileSystem(UnixFileSystemProvider provider, String dir) {
         super(provider, dir);
-
-        // assume X.Y[-Z] format
-        String osversion = AccessController
-            .doPrivileged(new GetPropertyAction("os.version"));
-        String[] vers = Util.split(osversion, '.');
-        assert vers.length >= 2;
-
-        int majorVersion = Integer.parseInt(vers[0]);
-        int minorVersion = Integer.parseInt(vers[1]);
-        int microVersion = 0;
-        if (vers.length > 2) {
-            String[] microVers = Util.split(vers[2], '-');
-            microVersion = (microVers.length > 0) ?
-                Integer.parseInt(microVers[0]) : 0;
-        }
-
-        // inotify available since 2.6.13
-        this.hasInotify = ((majorVersion > 2) ||
-            (majorVersion == 2 && minorVersion > 6) ||
-            ((majorVersion == 2) && (minorVersion == 6) && (microVersion >= 13)));
     }
 
     @@Override
     public WatchService newWatchService()
         throws IOException
     {
-        if (hasInotify) {
-            return new BsdWatchService(this);
-        } else {
-            // use polling implementation on older kernels
-            return new PollingWatchService();
-        }
+        // use polling implementation until we implement a BSD/kqueue one
+        return new PollingWatchService();
     }
 
     @@Override
@@@@ -82,10 +56,6 @@@@ class BsdFileSystem extends UnixFileSystem {
                                                                 UnixPath file,
                                                                 LinkOption... options)
     {
-        if (view == DosFileAttributeView.class)
-            return (V) new BsdDosFileAttributeView(file, followLinks(options));
-        if (view == UserDefinedFileAttributeView.class)
-            return (V) new BsdUserDefinedFileAttributeView(file, followLinks(options));
         return super.newFileAttributeView(view, file, options);
     }
 
@@@@ -95,10 +65,6 @@@@ class BsdFileSystem extends UnixFileSystem {
                                                          UnixPath file,
                                                          LinkOption... options)
     {
-        if (name.equals("dos"))
-            return new BsdDosFileAttributeView(file, followLinks(options));
-        if (name.equals("user"))
-            return new BsdUserDefinedFileAttributeView(file, followLinks(options));
         return super.newFileAttributeView(name, file, options);
     }
 
@@@@ -109,9 +75,6 @@@@ class BsdFileSystem extends UnixFileSystem {
         private static Set<String> supportedFileAttributeViews() {
             Set<String> result = new HashSet<String>();
             result.addAll(UnixFileSystem.standardFileAttributeViews());
-            // additional Bsd-specific views
-            result.add("dos");
-            result.add("user");
             return Collections.unmodifiableSet(result);
         }
     }
@@@@ -123,40 +86,32 @@@@ class BsdFileSystem extends UnixFileSystem {
 
     @@Override
     void copyNonPosixAttributes(int ofd, int nfd) {
-        BsdUserDefinedFileAttributeView.copyExtendedAttributes(ofd, nfd);
     }
 
     /**
-     * Returns object to iterate over the mount entries in the given fstab file.
+     * Returns object to iterate over mount entries
      */
-    Iterable<UnixMountEntry> getMountEntries(String fstab) {
+    @@Override
+    Iterable<UnixMountEntry> getMountEntries() {
         ArrayList<UnixMountEntry> entries = new ArrayList<UnixMountEntry>();
         try {
-            long fp = setmntent(fstab.getBytes(), "r".getBytes());
+            long iter = BsdNativeDispatcher.getfsstat();
             try {
                 for (;;) {
                     UnixMountEntry entry = new UnixMountEntry();
-                    int res = getextmntent(fp, entry);
+                    int res = BsdNativeDispatcher.fsstatEntry(iter, entry);
                     if (res < 0)
                         break;
                     entries.add(entry);
                 }
             } finally {
-                endmntent(fp);
+                BsdNativeDispatcher.endfsstat(iter);
             }
 
         } catch (UnixException x) {
             // nothing we can do
         }
         return entries;
-    }
-
-    /**
-     * Returns object to iterate over the mount entries in /etc/mtab
-     */
-    @@Override
-    Iterable<UnixMountEntry> getMountEntries() {
-        return getMountEntries("/etc/mtab");
     }
 
     @@Override
@


1.3
log
@Update to early access build 72 plus the following:
- sync patches with upstream repo: OpenJDK/bds-port
- fix gtk look and feel issue caused by dlopen of non-matching major
- fix other dlopen's of non-matching majors
- change max memory utilization on i386 to correct build failures
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_classes_sun_nio_fs_BsdFileSystem_java,v 1.2 2009/06/10 19:01:09 kurt Exp $
@


1.2
log
@- binary plugs distfile no longer needed
- sync patches with OpenJDK7 bsd-port repository
- install a usable cacerts
- Remove Interruptible IO support
tested by ian@@ william@@
@
text
@d1 4
a4 4
$OpenBSD: patch-jdk_src_solaris_classes_sun_nio_fs_BsdFileSystem_java,v 1.1 2009/05/23 03:03:25 kurt Exp $
--- jdk/src/solaris/classes/sun/nio/fs/BsdFileSystem.java.orig	Sat May 30 11:21:14 2009
+++ jdk/src/solaris/classes/sun/nio/fs/BsdFileSystem.java	Tue Jun  2 12:15:02 2009
@@@@ -31,55 +31,23 @@@@ import java.io.IOException;
a15 1
-    private final boolean hasAtSysCalls;
d23 1
a23 1
-        String[] vers = osversion.split("\\.", 0);
d30 1
a30 1
-            String[] microVers = vers[2].split("-", 0);
a38 5
-
-        // openat etc. available since 2.6.16
-        this.hasAtSysCalls = ((majorVersion > 2) ||
-            (majorVersion == 2 && minorVersion > 6) ||
-            ((majorVersion == 2) && (minorVersion == 6) && (microVersion >= 16)));
d56 1
a56 1
@@@@ -88,10 +56,6 @@@@ class BsdFileSystem extends UnixFileSystem {
d67 3
a69 3
@@@@ -101,10 +65,6 @@@@ class BsdFileSystem extends UnixFileSystem {
                                                   UnixPath file,
                                                   LinkOption... options)
d73 1
a73 1
-        if (name.equals("xattr"))
d78 1
a78 1
@@@@ -115,9 +75,6 @@@@ class BsdFileSystem extends UnixFileSystem {
d84 1
a84 1
-            result.add("xattr");
d88 1
a88 1
@@@@ -129,32 +86,31 @@@@ class BsdFileSystem extends UnixFileSystem {
a94 6
     @@Override
     boolean supportsSecureDirectoryStreams() {
-        return hasAtSysCalls;
+        return false;
     }
 
d96 1
a96 1
-     * Returns object to iterate over entries in /etc/mtab
d99 3
a101 2
     @@Override
     Iterable<UnixMountEntry> getMountEntries() {
d104 1
a104 1
-            long fp = setmntent("/etc/mtab".getBytes(), "r".getBytes());
d121 14
@


1.1
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 4
a4 4
$OpenBSD$
--- jdk/src/solaris/classes/sun/nio/fs/BsdFileSystem.java.orig	Tue May 19 11:45:57 2009
+++ jdk/src/solaris/classes/sun/nio/fs/BsdFileSystem.java	Tue May 19 16:41:08 2009
@@@@ -31,55 +31,24 @@@@ import java.io.IOException;
a8 1
+import static sun.nio.fs.UnixNativeDispatcher.*;
d62 1
a62 1
@@@@ -88,10 +57,6 @@@@ class BsdFileSystem extends UnixFileSystem {
d73 1
a73 1
@@@@ -101,10 +66,6 @@@@ class BsdFileSystem extends UnixFileSystem {
d84 1
a84 1
@@@@ -115,9 +76,6 @@@@ class BsdFileSystem extends UnixFileSystem {
d94 1
a94 1
@@@@ -129,22 +87,22 @@@@ class BsdFileSystem extends UnixFileSystem {
d109 1
a109 1
+     * Returns object to iterate over entries in /etc/fstab
d116 1
a116 2
+            UnixPath fstab = new UnixPath(this, "/etc/fstab");
+            long fp = fopen(fstab, "r");
d120 4
a123 1
@@@@ -154,7 +112,7 @@@@ class BsdFileSystem extends UnixFileSystem {
d128 1
a128 1
+                fclose(fp);
@

