head	1.8;
access;
symbols
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2013.01.14.20.16.56;	author kurt;	state dead;
branches;
next	1.7;

1.7
date	2012.04.12.22.27.20;	author matthew;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.22.20.26.48;	author kurt;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.07.01.53.54;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.45;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update jdk 1.7 to u9 level:
- Update to u6 via patchset from upstream bsd_port and u6 source from Oracle
- Copied u6 -> u9 patchset from FreeBSD/Greg Lewis's port
- Updated classloader patch from Matthew Dempsky (matthew@@)
okay landry@@
@
text
@$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.7 2012/04/12 22:27:20 matthew Exp $
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Thu Nov 17 21:57:34 2011
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Wed Apr 11 09:10:38 2012
@@@@ -27,6 +27,7 @@@@ package java.lang;
 import java.io.InputStream;
 import java.io.IOException;
 import java.io.File;
+import java.io.FilenameFilter;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
@@@@ -40,7 +41,9 @@@@ import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.security.ProtectionDomain;
 import java.security.cert.Certificate;
+import java.util.Arrays;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
@@@@ -1861,18 +1864,61 @@@@ public abstract class ClassLoader {
     }
 
     private static boolean loadLibrary0(Class fromClass, final File file) {
-        boolean exists = AccessController.doPrivileged(
-            new PrivilegedAction<Object>() {
-                public Object run() {
-                    return file.exists() ? Boolean.TRUE : null;
-                }})
-            != null;
-        if (!exists) {
+        File libfile = AccessController.doPrivileged(
+            new PrivilegedAction<File>() {
+                class LibraryFileFilter implements FilenameFilter {
+                    final String libname;
+
+                    LibraryFileFilter(String libname) {
+                        this.libname = libname;
+                    }
+
+                    public boolean accept(File dir, String name) {
+                        if (name.startsWith(libname)) {
+                            return name.substring(libname.length()).matches("\\.[0-9]{1,20}\\.[0-9]{1,20}$");
+                        }
+                        return false;
+                    }
+                }
+
+                class LibraryFileVersionComparator implements Comparator<String> {
+                    public int compare(String s1, String s2) {
+                        String[] f1 = s1.split("\\."), f2 = s2.split("\\.");
+                        int res = compareComponents(f1[f1.length - 2], f2[f2.length - 2]);
+                        if (res == 0) {
+                            res = compareComponents(f1[f1.length - 1], f2[f2.length - 1]);
+                        }
+                        return res;
+                    }
+
+                    int compareComponents(String s1, String s2) {
+                        return Long.valueOf(s1).compareTo(Long.valueOf(s2));
+                    }
+                }
+
+                public File run() {
+                    if (file.exists())
+                        return file;
+                    // if file is unversioned, check for a versioned one in same dir
+                    if (file.getName().endsWith(".so")) {
+                        File dir = file.getParentFile();
+                        if (dir != null) {
+                            String liblist[] = dir.list(new LibraryFileFilter(file.getName()));
+                            if (liblist != null && liblist.length > 0) {
+                                // return the highest versioned lib
+                                String highest = Collections.max(Arrays.asList(liblist), new LibraryFileVersionComparator());
+                                return new File(dir, highest);
+                            }
+                        }
+                    }
+                    return null;
+                }});
+        if (libfile == null) {
             return false;
         }
         String name;
         try {
-            name = file.getCanonicalPath();
+            name = libfile.getCanonicalPath();
         } catch (IOException e) {
             return false;
         }
@


1.7
log
@Fix our patch for ClassLoader.loadLibrary().  Make sure that we prefer
libfoo.so.10.0 over libfoo.so.9, and fix the regex to prevent false
positive matches.

ok kurt@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.6 2011/09/22 20:26:48 kurt Exp $
@


1.6
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Mon Jun 27 13:28:16 2011
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Wed Sep  7 09:44:08 2011
d12 1
a12 1
@@@@ -40,6 +41,7 @@@@ import java.security.PrivilegedActionException;
d18 1
d21 2
a22 1
@@@@ -1861,18 +1863,42 @@@@ public abstract class ClassLoader {
d27 2
a28 14
+	File libfile = (File) AccessController.doPrivileged(
             new PrivilegedAction<Object>() {
+		class LibraryFileFilter implements FilenameFilter {
+		    String lib_name;
+		    LibraryFileFilter(String lib_name) { this.lib_name = lib_name; }
+		    public boolean accept(File dir, String name) {
+			if (name.startsWith(lib_name)) {
+			    return name.substring(lib_name.length()).matches("\056[0-9]+\056[0-9]+$");
+			}
+			return false;
+		    }
+		}
+
                 public Object run() {
d33 48
a80 15
+		    if (file.exists())
+			return file;
+		    // if file is unversioned, check for a versioned one in same dir
+		    if (file.getName().endsWith(".so")) {
+			File dir = file.getParentFile();
+			if (dir != null) {
+			    String liblist[] = dir.list(new LibraryFileFilter(file.getName()));
+			    if (liblist != null && liblist.length > 0) {
+				// return the highest versioned lib
+				Arrays.sort(liblist);
+				return new File(dir, liblist[liblist.length - 1]);
+			    }
+			}
+		    }
+		    return null;
d82 1
a82 1
+	if (libfile == null) {
@


1.5
log
@Update to early access build 122. okay jasper@@
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.4 2009/10/07 01:53:54 kurt Exp $
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Thu Dec 16 17:11:53 2010
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Tue Jan  4 18:25:20 2011
d20 1
a20 1
@@@@ -1865,18 +1867,42 @@@@ public abstract class ClassLoader {
@


1.4
log
@Update to early access build 72 plus the following:
- sync patches with upstream repo: OpenJDK/bds-port
- fix gtk look and feel issue caused by dlopen of non-matching major
- fix other dlopen's of non-matching majors
- change max memory utilization on i386 to correct build failures
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.3 2009/05/23 03:03:25 kurt Exp $
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Thu Sep 17 03:51:58 2009
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Sat Sep 26 10:00:48 2009
d20 1
a20 1
@@@@ -1876,18 +1878,42 @@@@ public abstract class ClassLoader {
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Fri May  8 03:34:34 2009
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Sat May  9 15:07:33 2009
d20 1
a20 1
@@@@ -1846,18 +1848,42 @@@@ public abstract class ClassLoader {
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_share_classes_java_lang_ClassLoader_java,v 1.1 2008/03/19 18:05:45 kurt Exp $
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Thu Jul 17 03:43:19 2008
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Fri Aug  8 16:13:51 2008
d12 4
a15 4
@@@@ -48,6 +49,7 @@@@ import java.util.Set;
 import java.util.Stack;
 import java.util.Map;
 import java.util.Vector;
d17 4
a20 4
 import sun.misc.ClassFileTransformer;
 import sun.misc.CompoundEnumeration;
 import sun.misc.Resource;
@@@@ -1706,18 +1708,42 @@@@ public abstract class ClassLoader {
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/share/classes/java/lang/ClassLoader.java.orig	Tue Oct 30 05:01:08 2007
+++ jdk/src/share/classes/java/lang/ClassLoader.java	Wed Nov  7 18:53:13 2007
d12 1
a12 1
@@@@ -47,6 +48,7 @@@@ import java.util.Set;
d20 1
a20 1
@@@@ -1699,18 +1701,43 @@@@ public abstract class ClassLoader {
d24 3
a26 3
-        Boolean exists = (Boolean)
+	File libfile = (File)
             AccessController.doPrivileged(new PrivilegedAction() {
d39 4
a42 1
-                    return new Boolean(file.exists());
d58 1
a58 3
                 }
             });
-        if (!exists.booleanValue()) {
d65 1
a65 1
+	    name = libfile.getCanonicalPath();
@

