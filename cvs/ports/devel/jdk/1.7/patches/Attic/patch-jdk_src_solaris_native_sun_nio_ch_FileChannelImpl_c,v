head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.4;

1.4
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_native_sun_nio_ch_FileChannelImpl_c,v 1.4 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c.orig	Fri Aug 13 03:22:14 2010
+++ jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c	Tue Oct 26 11:06:42 2010
@@@@ -26,15 +26,21 @@@@
 #include "jni.h"
 #include "jni_util.h"
 #include "jvm.h"
+#include "jvm_md.h"
 #include "jlong.h"
 #include <sys/mman.h>
 #include <sys/stat.h>
+#include <fcntl.h>
 #include "sun_nio_ch_FileChannelImpl.h"
 #include "java_lang_Integer.h"
 #include "nio.h"
 #include "nio_util.h"
 #include <dlfcn.h>
 
+#if defined(_ALLBSD_SOURCE)
+#include "largefile_bsd.h"
+#endif
+
 static jfieldID chan_fd;        /* jobject 'fd' in sun.io.FileChannelImpl */
 
 #ifdef __solaris__
@@@@ -59,8 +65,26 @@@@ sendfile_func* my_sendfile_func = NULL;
 typedef ssize_t sendfile64_func(int out_fd, int in_fd, off64_t *offset, size_t count);
 
 sendfile64_func* my_sendfile64_func = NULL;
+#elif defined(_ALLBSD_SOURCE)
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/uio.h>
+#include <errno.h>
+#include <stdlib.h>
+
+#ifdef __APPLE__
+typedef int sendfile_func(int fd, int s, off_t offset, off_t *len,
+                          struct sf_hdtr *hdtr, int flags);
+#elif defined(__FreeBSD__)
+typedef int sendfile_func(int fd, int s, off_t offset, size_t nbytes,
+                          struct sf_hdtr *hdtr, off_t *sbytes, int flags);
 #endif
 
+#if defined(__APPLE__) || defined(__FreeBSD__)
+sendfile_func* my_sendfile_func = NULL;
+#endif
+#endif
+
 JNIEXPORT jlong JNICALL
 Java_sun_nio_ch_FileChannelImpl_initIDs(JNIEnv *env, jclass clazz)
 {
@@@@ -68,7 +92,8 @@@@ Java_sun_nio_ch_FileChannelImpl_initIDs(JNIEnv *env, j
     chan_fd = (*env)->GetFieldID(env, clazz, "fd", "Ljava/io/FileDescriptor;");
 
 #ifdef __solaris__
-    if (dlopen("/usr/lib/libsendfile.so.1", RTLD_GLOBAL | RTLD_LAZY) != NULL) {
+    if (dlopen("/usr/lib/" VERSIONED_JNI_LIB_NAME("sendfile", "1"),
+               RTLD_GLOBAL | RTLD_LAZY) != NULL) {
         my_sendfile_func = (sendfile_func*) dlsym(RTLD_DEFAULT, "sendfilev64");
     }
 #endif
@@@@ -77,6 +102,10 @@@@ Java_sun_nio_ch_FileChannelImpl_initIDs(JNIEnv *env, j
     my_sendfile64_func = (sendfile64_func*) dlsym(RTLD_DEFAULT, "sendfile64");
 #endif
 
+#if defined(__APPLE__) || defined(__FreeBSD__)
+    my_sendfile_func = (sendfile_func*) dlsym(RTLD_DEFAULT, "sendfile");
+#endif
+
     return pageSize;
 }
 
@@@@ -242,5 +271,47 @@@@ Java_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *en
         }
         return result;
     }
+#endif
+
+#ifdef _ALLBSD_SOURCE
+#if defined(__APPLE__) || defined(__FreeBSD__)
+    if (my_sendfile_func == NULL)
+        return IOS_UNSUPPORTED;
+
+    off_t numBytes;
+    int result;
+
+    numBytes = count;
+
+#ifdef __APPLE__
+    result = (*my_sendfile_func)(srcFD, dstFD, position,
+                                     &numBytes, NULL, 0);
+#elif defined(__FreeBSD__)
+    result = (*my_sendfile_func)(srcFD, dstFD, position,
+                                     count, NULL, &numBytes, 0);
+#else
+    Add an #elif for your BSD flavor
+#endif
+
+    if (numBytes > 0)
+        return numBytes;
+
+    if (result == -1) {
+        if (errno == EAGAIN)
+            return IOS_UNAVAILABLE;
+        if (errno == EOPNOTSUPP || errno == ENOTSOCK || errno == ENOTCONN)
+            return IOS_UNSUPPORTED_CASE;
+        if ((errno == EINVAL) && ((ssize_t)count >= 0))
+            return IOS_UNSUPPORTED_CASE;
+        if (errno == EINTR)
+            return IOS_INTERRUPTED;
+        JNU_ThrowIOExceptionWithLastError(env, "Transfer failed");
+        return IOS_THROWN;
+    }
+
+    return result;
+#else
+    return IOS_UNSUPPORTED;
+#endif
 #endif
 }
@


1.4
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_native_sun_nio_ch_FileChannelImpl_c,v 1.3 2009/05/23 03:03:25 kurt Exp $
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_solaris_native_sun_nio_ch_FileChannelImpl_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c.orig	Fri May  8 03:35:08 2009
+++ jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c	Mon May 18 20:26:57 2009
d26 1
a26 1
@@@@ -59,6 +65,10 @@@@ sendfile_func* my_sendfile_func = NULL;
d31 1
d33 1
d36 7
d45 5
d51 3
a53 1
@@@@ -68,7 +78,8 @@@@ Java_sun_nio_ch_FileChannelImpl_initIDs(JNIEnv *env, j
d63 12
a74 1
@@@@ -242,5 +253,57 @@@@ Java_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *en
d81 18
a98 17
+    /*
+     * XXXBSD: make sure that we're returning what java class may understand
+     *
+     * XXXBSD: I'd prefer to have it implemented with sendfile(), but since
+     *         FreeBSD's sendfile() is only supposed to be used in file->socket
+     *         schema we need to provide some kind of fall-back operation, if
+     *         sendfile() failed with ENOTSOCK error only.
+     */
+    void *buf;
+    off_t offset = (off_t)position;
+    int r, w = 0;
+
+    buf = malloc(4096);
+    if (buf == NULL) {
+        JNU_ThrowOutOfMemoryError(env, "heap allocation failed");
+        return IOS_THROWN;
+    }
d100 2
a101 7
+    while ((r = pread(srcFD, buf, 4096, offset)) > 0) {
+        w = write(dstFD, buf, r);
+        if (w == -1)
+	    break;
+        offset += w;
+    }
+    free(buf);
d103 11
a113 20
+    /*
+     * Similar to solaris if we've transferred any data return
+     * the number of bytes and ignore any error
+    */
+    if (offset - (off_t)position > 0)
+	return (offset - (off_t)position);
+
+    /*
+     * Deal with NBIO EAGAIN & EINTR the same as solaris. 
+     */
+    if (r == -1 || w == -1) {
+        switch (errno) {
+	    case EAGAIN:
+	        return IOS_UNAVAILABLE;
+	    case EINTR:
+	        return IOS_INTERRUPTED;
+	    default:
+		JNU_ThrowIOExceptionWithLastError(env, "Transfer failed");
+		return IOS_THROWN;
+        }
d116 4
a119 1
+    return (0);
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 8
a8 4
$OpenBSD: patch-jdk_src_solaris_native_sun_nio_ch_FileChannelImpl_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
--- jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c.orig	Thu Jul 17 03:43:48 2008
+++ jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c	Sat Aug  2 17:11:47 2008
@@@@ -29,6 +29,7 @@@@
d15 1
a15 2
 #include "java_lang_Long.h"
@@@@ -36,6 +37,10 @@@@
d26 1
a26 1
@@@@ -60,6 +65,10 @@@@ sendfile_func* my_sendfile_func = NULL;
d37 12
a48 1
@@@@ -279,6 +288,58 @@@@ Java_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *en
d51 1
a51 1
 #endif
d103 1
a103 1
+#endif
a104 26
 
 JNIEXPORT jint JNICALL
@@@@ -338,6 +399,23 @@@@ Java_sun_nio_ch_FileChannelImpl_release0(JNIEnv *env, 
     fl.l_start = (off64_t)pos;
     fl.l_type = F_UNLCK;
     lockResult = fcntl(fd, cmd, &fl);
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
+    /* XXXFREEBSD:  While doing of preClose0() we're closing actual fd which
+       was locked, so here we'll get an error which need to be ignored to
+       satisfy TCK FileLock test */
+    /* XXXFREEBSD: backport to 1.4.2 */
+    if (lockResult < 0 && errno == EBADF)
+	lockResult = errno = 0;
+#endif
+#if defined(__NetBSD__)
+    /* XXXNETBSD: The dup2 in preClose0 is being done onto 1 end of a
+       socketpair which isn't a valid target for F_UNLCK. No good way to see
+       this vs. a bad lock setup so just return errno = 0 there
+       to pass JCK (lock will get removed once all fd's close anyways) */
+    /* XXXNETBSD: backport to 1.4.2 */
+    if (lockResult < 0 && errno == EINVAL)
+	lockResult = errno = 0;
+#endif
     if (lockResult < 0) {
         JNU_ThrowIOExceptionWithLastError(env, "Release failed");
     }
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 4
a4 4
$OpenBSD$
--- jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c.orig	Tue Dec  4 04:05:47 2007
+++ jdk/src/solaris/native/sun/nio/ch/FileChannelImpl.c	Thu Feb 14 18:00:10 2008
@@@@ -29,12 +29,17 @@@@
d11 2
a12 1
 #include "nio.h"
d23 1
a23 1
@@@@ -59,6 +64,10 @@@@ sendfile_func* my_sendfile_func = NULL;
d34 1
a34 1
@@@@ -278,6 +287,58 @@@@ Java_sun_nio_ch_FileChannelImpl_transferTo0(JNIEnv *en
d93 1
a93 1
@@@@ -329,6 +390,23 @@@@ Java_sun_nio_ch_FileChannelImpl_release0(JNIEnv *env, 
@

