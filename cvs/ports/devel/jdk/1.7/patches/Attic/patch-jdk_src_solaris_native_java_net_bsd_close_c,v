head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_0:1.1.0.10
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2013.03.12.04.39.42;	author kurt;	state dead;
branches;
next	1.3;

1.3
date	2013.02.02.17.39.23;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- Update to 7u17 which contains multiple security corrections
@
text
@$OpenBSD: patch-jdk_src_solaris_native_java_net_bsd_close_c,v 1.3 2013/02/02 17:39:23 kurt Exp $
--- jdk/src/solaris/native/java/net/bsd_close.c.orig	Tue Aug 28 19:15:27 2012
+++ jdk/src/solaris/native/java/net/bsd_close.c	Fri Feb  1 13:06:28 2013
@@@@ -345,7 +345,77 @@@@ int NET_Select(int s, fd_set *readfds, fd_set *writefd
  * signal other than our wakeup signal.
  */
 int NET_Timeout(int s, long timeout) {
+/*
+ * On MacOS X, poll(2) is not working correctly, so a select(2) based
+ * implementation is preferred.  See
+ *
+ * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7131399
+ *
+ * However, on FreeBSD, the select(2) based implementation can cause
+ * crashes under load and poll(2) is preferred.  See
+ *
+ * http://docs.freebsd.org/cgi/getmsg.cgi?fetch=215525+0+current/freebsd-java
+ *
+ * Other *BSD should adjust as appropriate.
+ */
+#ifndef __APPLE__
     long prevtime = 0, newtime;
+    struct timeval t;
+    fdEntry_t *fdEntry = getFdEntry(s);
+
+    /*
+     * Check that fd hasn't been closed.
+     */
+    if (fdEntry == NULL) {
+        errno = EBADF;
+        return -1;
+    }
+
+    /*
+     * Pick up current time as may need to adjust timeout
+     */
+    if (timeout > 0) {
+        gettimeofday(&t, NULL);
+        prevtime = t.tv_sec * 1000  +  t.tv_usec / 1000;
+    }
+
+    for(;;) {
+        struct pollfd pfd;
+        int rv;
+        threadEntry_t self;
+
+        /*
+         * Poll the fd. If interrupted by our wakeup signal
+         * errno will be set to EBADF.
+         */
+        pfd.fd = s;
+        pfd.events = POLLIN | POLLERR;
+
+        startOp(fdEntry, &self);
+        rv = poll(&pfd, 1, timeout);
+        endOp(fdEntry, &self);
+
+        /*
+         * If interrupted then adjust timeout. If timeout
+         * has expired return 0 (indicating timeout expired).
+         */
+        if (rv < 0 && errno == EINTR) {
+            if (timeout > 0) {
+                gettimeofday(&t, NULL);
+                newtime = t.tv_sec * 1000  +  t.tv_usec / 1000;
+                timeout -= newtime - prevtime;
+                if (timeout <= 0) {
+                    return 0;
+                }
+                prevtime = newtime;
+            }
+        } else {
+            return rv;
+        }
+
+    }
+#else
+    long prevtime = 0, newtime;
     struct timeval t, *tp = &t;
     fdEntry_t *fdEntry = getFdEntry(s);
 
@@@@ -414,4 +484,5 @@@@ int NET_Timeout(int s, long timeout) {
         }
 
     }
+#endif
 }
@


1.3
log
@- Restore poll(2) based NET_Timeout implementation that was changed
  to select(2) for MacOSX support. The select based implementation
  was causing crashes under load for at least FreeBSD.
- Fix MulticastSocket.setInterface(). Report and fix from Oliver
  Lehmann on bsd-port list.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@d1 5
a5 6
$OpenBSD: patch-jdk_src_solaris_native_java_net_bsd_close_c,v 1.1 2009/05/23 03:03:25 kurt Exp $
--- jdk/src/solaris/native/java/net/bsd_close.c.orig	Mon May 18 21:16:40 2009
+++ jdk/src/solaris/native/java/net/bsd_close.c	Mon May 18 21:17:02 2009
@@@@ -57,7 +57,7 @@@@ typedef struct {
 /*
  * Signal to unblock thread
d7 74
a80 2
-static int sigWakeup = (__SIGRTMAX - 2);
+static int sigWakeup = SIGIO;
d82 2
a83 3
 /*
  * The fd table and the number of file descriptors
@@@@ -281,9 +281,7 @@@@ int NET_ReadV(int s, const struct iovec * vector, int 
d85 2
a86 6
 int NET_RecvFrom(int s, void *buf, int len, unsigned int flags,
        struct sockaddr *from, int *fromlen) {
-    socklen_t socklen = *fromlen;
-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, &socklen) );
-    *fromlen = socklen;
+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );
a87 17
 
 int NET_Send(int s, void *msg, int len, unsigned int flags) {
@@@@ -300,9 +298,11 @@@@ int NET_SendTo(int s, const void *msg, int len,  unsig
 }
 
 int NET_Accept(int s, struct sockaddr *addr, int *addrlen) {
-    socklen_t socklen = *addrlen;
-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, &socklen) );
-    *addrlen = socklen;
+    socklen_t len = *addrlen;
+    int error = accept(s, addr, &len);
+    if (error != -1)
+	*addrlen = (int)len;
+    BLOCKING_IO_RETURN_INT( s, error );
 }
 
 int NET_Connect(int s, struct sockaddr *addr, int addrlen) {
@


1.1
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 1
a1 1
$OpenBSD$
@

