head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.4;

1.4
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_native_java_io_UnixFileSystem_md_c,v 1.4 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/solaris/native/java/io/UnixFileSystem_md.c.orig	Fri Aug 13 03:22:13 2010
+++ jdk/src/solaris/native/java/io/UnixFileSystem_md.c	Tue Oct 26 11:01:50 2010
@@@@ -41,6 +41,12 @@@@
 #include "java_io_FileSystem.h"
 #include "java_io_UnixFileSystem.h"
 
+#if defined(_ALLBSD_SOURCE)
+#define dirent64 dirent
+#define readdir64_r readdir_r
+#define stat64 stat
+#define statvfs64 statvfs
+#endif
 
 /* -- Field IDs -- */
 
@@@@ -139,7 +145,6 @@@@ Java_java_io_UnixFileSystem_checkAccess(JNIEnv *env, j
     } END_PLATFORM_STRING(env, path);
     return rv;
 }
-
 
 JNIEXPORT jboolean JNICALL
 Java_java_io_UnixFileSystem_setPermission(JNIEnv *env, jobject this,
@


1.4
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_native_java_io_UnixFileSystem_md_c,v 1.3 2009/05/23 03:03:25 kurt Exp $
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 4
a4 4
$OpenBSD: patch-jdk_src_solaris_native_java_io_UnixFileSystem_md_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/solaris/native/java/io/UnixFileSystem_md.c.orig	Fri May  8 03:35:07 2009
+++ jdk/src/solaris/native/java/io/UnixFileSystem_md.c	Mon May 18 17:03:13 2009
@@@@ -41,6 +41,11 @@@@
d12 1
d17 1
a17 1
@@@@ -139,7 +144,6 @@@@ Java_java_io_UnixFileSystem_checkAccess(JNIEnv *env, j
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 4
a4 14
$OpenBSD: patch-jdk_src_solaris_native_java_io_UnixFileSystem_md_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
--- jdk/src/solaris/native/java/io/UnixFileSystem_md.c.orig	Thu Jul 17 03:43:47 2008
+++ jdk/src/solaris/native/java/io/UnixFileSystem_md.c	Sat Aug  2 17:07:49 2008
@@@@ -27,7 +27,8 @@@@
 #include <sys/types.h>
 #include <sys/time.h>
 #include <sys/stat.h>
-#include <sys/statvfs.h>
+#include <sys/param.h>
+#include <sys/mount.h>
 #include <string.h>
 #include <stdlib.h>
 #include <dlfcn.h>
@@@@ -41,6 +42,11 @@@@
d10 1
a10 1
+#define readdir64 readdir
d16 2
a17 1
@@@@ -140,7 +146,6 @@@@ Java_java_io_UnixFileSystem_checkAccess(JNIEnv *env, j
d20 1
a21 1
-
a23 38
                                           jobject file,
@@@@ -292,6 +297,9 @@@@ Java_java_io_UnixFileSystem_list(JNIEnv *env, jobject 
     if (rv == NULL) goto error;
 
     /* Scan the directory */
+#ifdef _ALLBSD_SOURCE
+#define readdir64_r readdir_r
+#endif
     while ((readdir64_r(dir, ptr, &result) == 0)  && (result != NULL)) {
         jstring name;
         if (!strcmp(ptr->d_name, ".") || !strcmp(ptr->d_name, ".."))
@@@@ -414,20 +422,20 @@@@ Java_java_io_UnixFileSystem_getSpace(JNIEnv *env, jobj
     jlong rv = 0L;
 
     WITH_FIELD_PLATFORM_STRING(env, file, ids.path, path) {
-        struct statvfs fsstat;
-        memset(&fsstat, 0, sizeof(struct statvfs));
-        if (statvfs(path, &fsstat) == 0) {
+        struct statfs fsstat;
+        memset(&fsstat, 0, sizeof(struct statfs));
+        if (statfs(path, &fsstat) == 0) {
             switch(t) {
             case java_io_FileSystem_SPACE_TOTAL:
-                rv = jlong_mul(long_to_jlong(fsstat.f_frsize),
+                rv = jlong_mul(long_to_jlong(fsstat.f_bsize),
                                long_to_jlong(fsstat.f_blocks));
                 break;
             case java_io_FileSystem_SPACE_FREE:
-                rv = jlong_mul(long_to_jlong(fsstat.f_frsize),
+                rv = jlong_mul(long_to_jlong(fsstat.f_bsize),
                                long_to_jlong(fsstat.f_bfree));
                 break;
             case java_io_FileSystem_SPACE_USABLE:
-                rv = jlong_mul(long_to_jlong(fsstat.f_frsize),
+                rv = jlong_mul(long_to_jlong(fsstat.f_bsize),
                                long_to_jlong(fsstat.f_bavail));
                 break;
             default:
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/solaris/native/java/io/UnixFileSystem_md.c.orig	Tue Dec  4 04:05:20 2007
+++ jdk/src/solaris/native/java/io/UnixFileSystem_md.c	Wed Dec  5 17:37:36 2007
a18 1
+#define HAVE_LARGEFILE
d21 1
d26 1
a26 55
@@@@ -61,6 +67,8 @@@@ Java_java_io_UnixFileSystem_initIDs(JNIEnv *env, jclas
 
 /* -- Large-file support -- */
 
+#ifndef HAVE_LARGEFILE
+
 /* LINUX_FIXME: ifdef __solaris__ here is wrong.  We need to move the
  * definition of stat64 into a solaris_largefile.h and create a
  * linux_largefile.h with a good stat64 structure to compile on
@@@@ -121,6 +129,7 @@@@ static void init64IO(void) {
     dlclose(handle);
 }
 
+#endif /* HAVE_LARGEFILE */
 
 /* -- Path operations -- */
 
@@@@ -151,13 +160,16 @@@@ Java_java_io_UnixFileSystem_canonicalize0(JNIEnv *env,
 static jboolean
 statMode(const char *path, int *mode)
 {
+#ifndef HAVE_LARGEFILE
     if (stat64_ptr) {
         struct stat64 sb;
         if (((*stat64_ptr)(path, &sb)) == 0) {
             *mode = sb.st_mode;
             return JNI_TRUE;
         }
-    } else {
+    } else
+#endif
+    {
         struct stat sb;
         if (stat(path, &sb) == 0) {
             *mode = sb.st_mode;
@@@@ -266,17 +278,21 @@@@ Java_java_io_UnixFileSystem_getLastModifiedTime(JNIEnv
     jlong rv = 0;
 
     WITH_FIELD_PLATFORM_STRING(env, file, ids.path, path) {
+#ifndef HAVE_LARGEFILE
         if (stat64_ptr) {
             struct stat64 sb;
             if (((*stat64_ptr)(path, &sb)) == 0) {
                 rv = 1000 * (jlong)sb.st_mtime;
             }
         } else {
+#endif
             struct stat sb;
             if (stat(path, &sb) == 0) {
                 rv = 1000 * (jlong)sb.st_mtime;
             }
+#ifndef HAVE_LARGEFILE
         }
+#endif
     } END_PLATFORM_STRING(env, path);
a28 2
@@@@ -289,12 +305,15 @@@@ Java_java_io_UnixFileSystem_getLength(JNIEnv *env, job
     jlong rv = 0;
d30 5
a34 15
     WITH_FIELD_PLATFORM_STRING(env, file, ids.path, path) {
+#ifndef HAVE_LARGEFILE
         if (stat64_ptr) {
             struct stat64 sb;
             if (((*stat64_ptr)(path, &sb)) == 0) {
                 rv = sb.st_size;
             }
-        } else {
+        } else
+#endif
+        {
             struct stat sb;
             if (stat(path, &sb) == 0) {
                 rv = sb.st_size;
@@@@ -378,6 +397,9 @@@@ Java_java_io_UnixFileSystem_list(JNIEnv *env, jobject 
d44 1
a44 10
@@@@ -483,7 +505,7 @@@@ Java_java_io_UnixFileSystem_setLastModifiedTime(JNIEnv
 #endif
 
         /* Preserve access time */
-#ifdef __linux__
+#if defined(__linux__) || defined(_ALLBSD_SOURCE)
         struct stat sb;
 
         if (stat(path, &sb) == 0) {
@@@@ -534,20 +556,20 @@@@ Java_java_io_UnixFileSystem_getSpace(JNIEnv *env, jobj
@

