head	1.6;
access;
symbols
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.5;

1.5
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.07.01.53.54;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_native_sun_awt_awt_GraphicsEnv_c,v 1.5 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c.orig	Fri Aug 13 03:22:13 2010
+++ jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c	Mon Oct 25 18:15:59 2010
@@@@ -40,6 +40,7 @@@@
 #include <jni.h>
 #include <jni_util.h>
 #include <jvm.h>
+#include <jvm_md.h>
 #include <jlong.h>
 
 #include <stdlib.h>
@@@@ -122,7 +123,7 @@@@ static char *x11GraphicsConfigClassName = "sun/awt/X11
  */
 
 #define MAXFRAMEBUFFERS 16
-#ifdef __linux__
+#if defined(__linux__) || defined(_ALLBSD_SOURCE)
 typedef struct {
    int   screen_number;
    short x_org;
@@@@ -427,6 +428,11 @@@@ getAllConfigs (JNIEnv *env, int screen, AwtScreenDataP
     {
         xrenderLibHandle = dlopen("libXrender.so.1", RTLD_LAZY | RTLD_GLOBAL);
 
+        if (xrenderLibHandle == NULL) {
+            xrenderLibHandle = dlopen("libXrender.so",
+                                      RTLD_LAZY | RTLD_GLOBAL);
+        }
+
 #ifndef __linux__ /* SOLARIS */
         if (xrenderLibHandle == NULL) {
             xrenderLibHandle = dlopen("/usr/sfw/lib/libXrender.so.1",
@@@@ -640,19 +646,22 @@@@ void checkNewXineramaScreen(JNIEnv* env, jobject peer,
 #endif /* HEADLESS */
 
 #ifndef HEADLESS
-#ifdef __linux__
+#if defined(__linux__) || defined(_ALLBSD_SOURCE)
 static void xinerama_init_linux()
 {
-    void* libHandle = 0;
-    char* XineramaLibName= "libXinerama.so.1";
+    void* libHandle = NULL;
     int32_t locNumScr = 0;
     XineramaScreenInfo *xinInfo;
     char* XineramaQueryScreensName = "XineramaQueryScreens";
     XineramaQueryScreensFunc* XineramaQueryScreens = NULL;
 
     /* load library */
-    libHandle = dlopen(XineramaLibName, RTLD_LAZY | RTLD_GLOBAL);
-    if (libHandle != 0) {
+    libHandle = dlopen(VERSIONED_JNI_LIB_NAME("Xinerama", "1"),
+                       RTLD_LAZY | RTLD_GLOBAL);
+    if (libHandle == NULL) {
+        libHandle = dlopen(JNI_LIB_NAME("Xinerama"), RTLD_LAZY | RTLD_GLOBAL);
+    }
+    if (libHandle != NULL) {
         XineramaQueryScreens = (XineramaQueryScreensFunc*)
             dlsym(libHandle, XineramaQueryScreensName);
 
@@@@ -688,11 +697,10 @@@@ static void xinerama_init_linux()
     }
 }
 #endif
-#ifndef __linux__ /* Solaris */
+#if !defined(__linux__) && !defined(_ALLBSD_SOURCE) /* Solaris */
 static void xinerama_init_solaris()
 {
-    void* libHandle = 0;
-    char* XineramaLibName= "libXext.so";
+    void* libHandle = NULL;
     unsigned char fbhints[MAXFRAMEBUFFERS];
     int32_t locNumScr = 0;
     /* load and run XineramaGetInfo */
@@@@ -701,8 +709,8 @@@@ static void xinerama_init_solaris()
     XineramaGetInfoFunc* XineramaSolarisFunc = NULL;
 
     /* load library */
-    libHandle = dlopen(XineramaLibName, RTLD_LAZY | RTLD_GLOBAL);
-    if (libHandle != 0) {
+    libHandle = dlopen(JNI_LIB_NAME("Xext"), RTLD_LAZY | RTLD_GLOBAL);
+    if (libHandle != NULL) {
         XineramaSolarisFunc = (XineramaGetInfoFunc*)dlsym(libHandle, XineramaGetInfoName);
         XineramaSolarisCenterFunc =
             (XineramaGetCenterHintFunc*)dlsym(libHandle, XineramaGetCenterHintName);
@@@@ -749,11 +757,11 @@@@ static void xineramaInit(void) {
     }
 
     DTRACE_PRINTLN("Xinerama extension is available");
-#ifdef __linux__
+#if defined(__linux__) || defined(_ALLBSD_SOURCE)
     xinerama_init_linux();
 #else /* Solaris */
     xinerama_init_solaris();
-#endif /* __linux__ */
+#endif /* __linux__ || _ALLBSD_SOURCE */
 }
 #endif /* HEADLESS */
 
@@@@ -1628,7 +1636,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
 {
     jobject point = NULL;
 #ifndef HEADLESS    /* return NULL in HEADLESS, Linux */
-#ifndef __linux__
+#if !defined(__linux__) && !defined(_ALLBSD_SOURCE)
     int x,y;
 
     AWT_LOCK();
@@@@ -1641,7 +1649,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
         DTRACE_PRINTLN("unable to call XineramaSolarisCenterFunc: symbol is null");
     }
     AWT_FLUSH_UNLOCK();
-#endif /* __linux __ */
+#endif /* __linux __ || _ALLBSD_SOURCE */
 #endif /* HEADLESS */
     return point;
 }
@@@@ -1711,7 +1719,11 @@@@ X11GD_InitXrandrFuncs(JNIEnv *env)
 {
     int rr_maj_ver = 0, rr_min_ver = 0;
 
-    void *pLibRandR = dlopen("libXrandr.so.2", RTLD_LAZY | RTLD_LOCAL);
+    void *pLibRandR = dlopen(VERSIONED_JNI_LIB_NAME("Xrandr", "2"),
+                             RTLD_LAZY | RTLD_LOCAL);
+    if (pLibRandR == NULL) {
+        pLibRandR = dlopen(JNI_LIB_NAME("Xrandr"), RTLD_LAZY | RTLD_LOCAL);
+    }
     if (pLibRandR == NULL) {
         J2dRlsTraceLn(J2D_TRACE_ERROR,
                       "X11GD_InitXrandrFuncs: Could not open libXrandr.so.2");
@


1.5
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_native_sun_awt_awt_GraphicsEnv_c,v 1.4 2009/10/07 01:53:54 kurt Exp $
@


1.4
log
@Update to early access build 72 plus the following:
- sync patches with upstream repo: OpenJDK/bds-port
- fix gtk look and feel issue caused by dlopen of non-matching major
- fix other dlopen's of non-matching majors
- change max memory utilization on i386 to correct build failures
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_solaris_native_sun_awt_awt_GraphicsEnv_c,v 1.3 2009/05/23 03:03:25 kurt Exp $
--- jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c.orig	Thu Sep 17 03:52:32 2009
+++ jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c	Fri Oct  2 08:42:10 2009
d118 1
a118 1
@@@@ -1706,7 +1714,11 @@@@ X11GD_InitXrandrFuncs(JNIEnv *env)
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_solaris_native_sun_awt_awt_GraphicsEnv_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c.orig	Fri May  8 03:35:07 2009
+++ jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c	Mon May 18 19:51:58 2009
d21 13
a33 1
@@@@ -711,19 +712,22 @@@@ void checkNewXineramaScreen(JNIEnv* env, jobject peer,
d61 1
a61 1
@@@@ -759,11 +763,10 @@@@ static void xinerama_init_linux()
d75 1
a75 1
@@@@ -772,8 +775,8 @@@@ static void xinerama_init_solaris()
d86 1
a86 1
@@@@ -820,11 +823,11 @@@@ static void xineramaInit(void) {
d100 1
a100 1
@@@@ -1700,7 +1703,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
d109 1
a109 1
@@@@ -1713,7 +1716,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
d118 1
a118 1
@@@@ -1778,7 +1781,11 @@@@ X11GD_InitXrandrFuncs(JNIEnv *env)
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 12
a12 4
$OpenBSD: patch-jdk_src_solaris_native_sun_awt_awt_GraphicsEnv_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
--- jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c.orig	Thu Jul 17 03:43:47 2008
+++ jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c	Sat Aug  2 16:12:56 2008
@@@@ -122,7 +122,7 @@@@ static char *x11GraphicsConfigClassName = "sun/awt/X11
d21 1
a21 1
@@@@ -631,7 +631,7 @@@@ void checkNewXineramaScreen(JNIEnv* env, jobject peer,
d29 21
a49 2
     void* libHandle = 0;
@@@@ -679,7 +679,7 @@@@ static void xinerama_init_linux()
d57 18
a74 2
     void* libHandle = 0;
@@@@ -740,11 +740,11 @@@@ static void xineramaInit(void) {
d88 1
a88 1
@@@@ -1600,7 +1600,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
d97 1
a97 1
@@@@ -1613,7 +1613,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
d106 13
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c.orig	Tue Dec  4 04:05:26 2007
+++ jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.c	Thu Feb 14 17:34:41 2008
d31 1
a31 1
@@@@ -739,11 +739,11 @@@@ static void xineramaInit(void) {
d45 1
a45 1
@@@@ -1599,7 +1599,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
d54 1
a54 1
@@@@ -1612,7 +1612,7 @@@@ Java_sun_awt_X11GraphicsEnvironment_getXineramaCenterP
@

