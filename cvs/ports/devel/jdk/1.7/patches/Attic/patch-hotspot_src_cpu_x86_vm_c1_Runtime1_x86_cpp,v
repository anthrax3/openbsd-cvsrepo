head	1.2;
access;
symbols
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.05.23.03.03.24;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@$OpenBSD: patch-hotspot_src_cpu_x86_vm_c1_Runtime1_x86_cpp,v 1.1 2009/01/04 23:25:16 kurt Exp $
--- hotspot/src/cpu/x86/vm/c1_Runtime1_x86.cpp.orig	Fri Dec 19 03:42:04 2008
+++ hotspot/src/cpu/x86/vm/c1_Runtime1_x86.cpp	Tue Dec 30 08:16:21 2008
@@@@ -78,10 +78,10 @@@@ int StubAssembler::call_RT(Register oop_result1, Regis
     movptr(rax, Address(thread, Thread::pending_exception_offset()));
     // make sure that the vm_results are cleared
     if (oop_result1->is_valid()) {
-      movptr(Address(thread, JavaThread::vm_result_offset()), (int32_t)NULL_WORD);
+      movptr(Address(thread, JavaThread::vm_result_offset()), NULL_WORD);
     }
     if (oop_result2->is_valid()) {
-      movptr(Address(thread, JavaThread::vm_result_2_offset()), (int32_t)NULL_WORD);
+      movptr(Address(thread, JavaThread::vm_result_2_offset()), NULL_WORD);
     }
     if (frame_size() == no_frame_size) {
       leave();
@@@@ -96,12 +96,12 @@@@ int StubAssembler::call_RT(Register oop_result1, Regis
   // get oop results if there are any and reset the values in the thread
   if (oop_result1->is_valid()) {
     movptr(oop_result1, Address(thread, JavaThread::vm_result_offset()));
-    movptr(Address(thread, JavaThread::vm_result_offset()), (int32_t)NULL_WORD);
+    movptr(Address(thread, JavaThread::vm_result_offset()), NULL_WORD);
     verify_oop(oop_result1);
   }
   if (oop_result2->is_valid()) {
     movptr(oop_result2, Address(thread, JavaThread::vm_result_2_offset()));
-    movptr(Address(thread, JavaThread::vm_result_2_offset()), (int32_t)NULL_WORD);
+    movptr(Address(thread, JavaThread::vm_result_2_offset()), NULL_WORD);
     verify_oop(oop_result2);
   }
   return call_offset;
@@@@ -728,8 +728,8 @@@@ void Runtime1::generate_handle_exception(StubAssembler
 
   // clear exception fields in JavaThread because they are no longer needed
   // (fields must be cleared because they are processed by GC otherwise)
-  __ movptr(Address(thread, JavaThread::exception_oop_offset()), (int32_t)NULL_WORD);
-  __ movptr(Address(thread, JavaThread::exception_pc_offset()), (int32_t)NULL_WORD);
+  __ movptr(Address(thread, JavaThread::exception_oop_offset()), NULL_WORD);
+  __ movptr(Address(thread, JavaThread::exception_pc_offset()), NULL_WORD);
 
   // pop the stub frame off
   __ leave();
@@@@ -878,7 +878,7 @@@@ OopMapSet* Runtime1::generate_patching(StubAssembler* 
 
     // load and clear pending exception
     __ movptr(rax, Address(thread, Thread::pending_exception_offset()));
-    __ movptr(Address(thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);
+    __ movptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
 
     // check that there is really a valid exception
     __ verify_not_null_oop(rax);
@@@@ -971,14 +971,14 @@@@ OopMapSet* Runtime1::generate_code_for(StubID id, Stub
         // load pending exception oop into rax,
         __ movptr(exception_oop, Address(thread, Thread::pending_exception_offset()));
         // clear pending exception
-        __ movptr(Address(thread, Thread::pending_exception_offset()), (int32_t)NULL_WORD);
+        __ movptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
 
         // load issuing PC (the return address for this stub) into rdx
         __ movptr(exception_pc, Address(rbp, 1*BytesPerWord));
 
         // make sure that the vm_results are cleared (may be unnecessary)
-        __ movptr(Address(thread, JavaThread::vm_result_offset()), (int32_t)NULL_WORD);
-        __ movptr(Address(thread, JavaThread::vm_result_2_offset()), (int32_t)NULL_WORD);
+        __ movptr(Address(thread, JavaThread::vm_result_offset()), NULL_WORD);
+        __ movptr(Address(thread, JavaThread::vm_result_2_offset()), NULL_WORD);
 
         // verify that that there is really a valid exception in rax,
         __ verify_not_null_oop(exception_oop);
@@@@ -1393,7 +1393,7 @@@@ OopMapSet* Runtime1::generate_code_for(StubID id, Stub
         __ ret(0);
 
         __ bind(miss);
-        __ movptr(Address(rsp, (super_off) * VMRegImpl::stack_slot_size), 0); // result
+        __ movptr(Address(rsp, (super_off) * VMRegImpl::stack_slot_size), NULL_WORD); // result
         __ pop(rax);
         __ pop(rcx);
         __ pop(rsi);
@


1.1
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 1
a1 1
$OpenBSD$
@

