head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.4;

1.4
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_share_native_common_check_code_c,v 1.4 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/share/native/common/check_code.c.orig	Fri Aug 13 03:22:08 2010
+++ jdk/src/share/native/common/check_code.c	Mon Oct 25 18:15:47 2010
@@@@ -1067,7 +1067,7 @@@@ verify_method(context_type *context, jclass cb, int me
  * Make sure that branches don't go into the middle of nowhere.
  */
 
-static jint ntohl(jint n)
+static jint _ck_ntohl(jint n)
 {
     unsigned char *p = (unsigned char *)&n;
     return (p[0] << 24) | (p[1] << 16) | (p[2] << 8) | p[3];
@@@@ -1146,26 +1146,26 @@@@ verify_opcode_operands(context_type *context, unsigned
             }
         }
         if (opcode == JVM_OPC_tableswitch) {
-            keys = ntohl(lpc[2]) -  ntohl(lpc[1]) + 1;
+            keys = _ck_ntohl(lpc[2]) -  _ck_ntohl(lpc[1]) + 1;
             delta = 1;
         } else {
-            keys = ntohl(lpc[1]); /* number of pairs */
+            keys = _ck_ntohl(lpc[1]); /* number of pairs */
             delta = 2;
             /* Make sure that the tableswitch items are sorted */
             for (k = keys - 1, lptr = &lpc[2]; --k >= 0; lptr += 2) {
-                int this_key = ntohl(lptr[0]);  /* NB: ntohl may be unsigned */
-                int next_key = ntohl(lptr[2]);
+                int this_key = _ck_ntohl(lptr[0]);  /* NB: ntohl may be unsigned */
+                int next_key = _ck_ntohl(lptr[2]);
                 if (this_key >= next_key) {
                     CCerror(context, "Unsorted lookup switch");
                 }
             }
         }
         saved_operand = NEW(int, keys + 2);
-        if (!isLegalTarget(context, offset + ntohl(lpc[0])))
+        if (!isLegalTarget(context, offset + _ck_ntohl(lpc[0])))
             CCerror(context, "Illegal default target in switch");
-        saved_operand[keys + 1] = code_data[offset + ntohl(lpc[0])];
+        saved_operand[keys + 1] = code_data[offset + _ck_ntohl(lpc[0])];
         for (k = keys, lptr = &lpc[3]; --k >= 0; lptr += delta) {
-            int target = offset + ntohl(lptr[0]);
+            int target = offset + _ck_ntohl(lptr[0]);
             if (!isLegalTarget(context, target))
                 CCerror(context, "Illegal branch in tableswitch");
             saved_operand[k + 1] = code_data[target];
@@@@ -1634,7 +1634,7 @@@@ static int instruction_length(unsigned char *iptr, uns
             if (lpc + 2 >= (int *)end) {
                 return -1; /* do not read pass the end */
             }
-            index = ntohl(lpc[2]) - ntohl(lpc[1]);
+	    index = _ck_ntohl(lpc[2]) - _ck_ntohl(lpc[1]);
             if ((index < 0) || (index > 65535)) {
                 return -1;      /* illegal */
             } else {
@@@@ -1647,7 +1647,7 @@@@ static int instruction_length(unsigned char *iptr, uns
             int npairs;
             if (lpc + 1 >= (int *)end)
                 return -1; /* do not read pass the end */
-            npairs = ntohl(lpc[1]);
+	    npairs = _ck_ntohl(lpc[1]);
             /* There can't be more than 64K labels because of the limit
              * on per-method byte code length.
              */
@


1.4
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_share_native_common_check_code_c,v 1.3 2009/05/23 03:03:25 kurt Exp $
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 4
a4 4
$OpenBSD: patch-jdk_src_share_native_common_check_code_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/share/native/common/check_code.c.orig	Fri May  8 03:35:00 2009
+++ jdk/src/share/native/common/check_code.c	Sat May  9 11:04:59 2009
@@@@ -1066,7 +1066,7 @@@@ verify_method(context_type *context, jclass cb, int me
d13 1
a13 1
@@@@ -1145,26 +1145,26 @@@@ verify_opcode_operands(context_type *context, unsigned
d47 1
a47 1
@@@@ -1625,7 +1625,7 @@@@ static int instruction_length(unsigned char *iptr, uns
d56 1
a56 1
@@@@ -1638,7 +1638,7 @@@@ static int instruction_length(unsigned char *iptr, uns
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_share_native_common_check_code_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
--- jdk/src/share/native/common/check_code.c.orig	Thu Sep 11 03:44:46 2008
+++ jdk/src/share/native/common/check_code.c	Fri Sep 12 17:36:40 2008
d47 1
a47 1
@@@@ -1613,7 +1613,7 @@@@ static int instruction_length(unsigned char *iptr, uns
d56 1
a56 1
@@@@ -1626,7 +1626,7 @@@@ static int instruction_length(unsigned char *iptr, uns
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 4
a4 4
$OpenBSD$
--- jdk/src/share/native/common/check_code.c.orig	Tue Oct 30 05:03:37 2007
+++ jdk/src/share/native/common/check_code.c	Wed Nov  7 19:09:39 2007
@@@@ -1069,7 +1069,7 @@@@ verify_method(context_type *context, jclass cb, int me
d13 1
a13 1
@@@@ -1148,26 +1148,26 @@@@ verify_opcode_operands(context_type *context, unsigned
d16 1
a16 1
         if (opcode == opc_tableswitch) {
d18 1
a18 1
+	    keys = _ck_ntohl(lpc[2]) -  _ck_ntohl(lpc[1]) + 1;
d22 1
a22 1
+	    keys = _ck_ntohl(lpc[1]); /* number of pairs */
d28 2
a29 2
+		int this_key = _ck_ntohl(lptr[0]);	/* NB: _ck_ntohl may be unsigned */
+		int next_key = _ck_ntohl(lptr[2]);
d37 1
a37 1
+	if (!isLegalTarget(context, offset + _ck_ntohl(lpc[0]))) 
d40 1
a40 1
+	saved_operand[keys + 1] = code_data[offset + _ck_ntohl(lpc[0])];
d43 1
a43 1
+	    int target = offset + _ck_ntohl(lptr[0]);
d45 1
a45 1
                 CCerror(context, "Illegal branch in opc_tableswitch");
d47 1
a47 1
@@@@ -1615,7 +1615,7 @@@@ static int instruction_length(unsigned char *iptr, uns
d56 1
a56 1
@@@@ -1628,7 +1628,7 @@@@ static int instruction_length(unsigned char *iptr, uns
@

