head	1.2;
access;
symbols
	kurt_20070508:1.1.1.1 kurt:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2007.07.13.22.52.35;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2007.05.08.17.06.19;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.08.17.06.19;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to build 15
- switch to the JRL licensed src. why? because it will allow me to complete
the port. OpenJDK/GPLv2 src isn't complete and the parts that we don't have
are only released in binary form with a defend and indemnify clause. When
all of the jdk is GPLv2 I will switch back to OpenJDK/GPLv2 src.
- copy the Linux src files for the rest of the jdk so i can begin to patch
them. One src file is based on solaris code since that suits us better as
a starting point.
@
text
@$OpenBSD: patch-hotspot_src_cpu_amd64_vm_assembler_amd64_hpp,v 1.1 2007/05/08 17:06:19 kurt Exp $
--- hotspot/src/cpu/amd64/vm/assembler_amd64.hpp.orig	Tue Apr 10 04:01:22 2007
+++ hotspot/src/cpu/amd64/vm/assembler_amd64.hpp	Mon Apr 16 08:42:38 2007
@@@@ -433,12 +433,12 @@@@ class Assembler 
   void movl(Address dst, int imm32);
   void movl(Address dst, Register src);
 
-  void movq(Register dst, int64_t imm64);
+  void movq(Register dst, intptr_t imm64);
   void movq(Register dst, address imm64, relocInfo::relocType rtype);
   void movq(Register dst, Register src);
   void movq(Register dst, jobject obj);
   void movq(Register dst, Address src);
-  void movq(Address dst, int64_t imm64);
+  void movq(Address dst, intptr_t imm64);
   void movq(Address dst, Register src);
 
   void movsbl(Register dst, Address src);
@@@@ -976,7 +976,7 @@@@ class MacroAssembler
     check_reach(src) ? Assembler::movq(dst, src) :
                        Assembler::movq(dst, Address(rscratch1));
   }
-  void movq(Address dst, int64_t imm64)
+  void movq(Address dst, intptr_t imm64)
   { 
     if (check_reach(dst)) {
       if (is_simm32(imm64)) {
@@@@ -1441,7 +1441,7 @@@@ class MacroAssembler
   void popq(Register dst)                   { Assembler::popq(dst); }
   void movl(Register dst, int imm32)        { Assembler::movl(dst, imm32); }
   void movl(Register dst, Register src)     { Assembler::movl(dst, src); }
-  void movq(Register dst, int64_t imm64)    { Assembler::movq(dst, imm64); }
+  void movq(Register dst, intptr_t imm64)    { Assembler::movq(dst, imm64); }
   void movq(Register dst, address imm64, relocInfo::relocType rtype) { Assembler::movq(dst, imm64, rtype); }
   void movq(Register dst, Register src)     { Assembler::movq(dst, src); }
   void movq(Register dst, jobject obj)      { Assembler::movq(dst, obj); }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Initial import of jdk 1.7 (a.k.a. OpenJDK 7) work in progress. So far Sun
has released the hotspot portion of 1.7 under GPLv2. j2se and deploy
(plugin & webstart) will come later. No packages yet since j2se is copied
in from 1.5.

Note: hotspot for BSD in previous versions of the jdk were based on a
mixture of Solaris code and Linux code (for amd64). In this version I have
selected Linux as the base and only ported of small parts of the Solaris
code as needed. Using Linux code as the base has significantly reduced the
code divergence for BSD support and should make maintaining the port
easier.

okay ian@@, go for it espie@@
@
text
@@
