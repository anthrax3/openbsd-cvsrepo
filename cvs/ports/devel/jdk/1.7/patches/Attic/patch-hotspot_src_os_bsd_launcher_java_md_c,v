head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.09.22.20.26.47;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2011.01.11.15.47.49;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.23.03.03.24;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-hotspot_src_os_bsd_launcher_java_md_c,v 1.2 2011/01/11 15:47:49 kurt Exp $
--- hotspot/src/os/bsd/launcher/java_md.c.orig	Mon Nov  1 13:14:58 2010
+++ hotspot/src/os/bsd/launcher/java_md.c	Mon Nov  1 13:16:15 2010
@@@@ -45,8 +45,15 @@@@
 #include "version_comp.h"
 #endif
 
+#ifdef __APPLE__
+#define JVM_DLL "libjvm.dylib"
+#define JAVA_DLL "libjava.dylib"
+#define LD_LIBRARY_PATH "DYLD_LIBRARY_PATH"
+#else
 #define JVM_DLL "libjvm.so"
 #define JAVA_DLL "libjava.so"
+#define LD_LIBRARY_PATH "LD_LIBRARY_PATH"
+#endif
 
 #ifndef GAMMA   /* launcher.make defines ARCH */
 
@@@@ -116,7 +123,7 @@@@ extern char **environ;
  *      A collection of useful strings. One should think of these as #define
  *      entries, but actual strings can be more efficient (with many compilers).
  */
-#ifdef __bsd__
+#ifdef _ALLBSD_SOURCE
 static const char *system_dir   = "/usr/java";
 static const char *user_dir     = "/java";
 #else /* Solaris */
@@@@ -460,10 +467,10 @@@@ CreateExecutionEnvironment(int *_argcp,
        * If not on Solaris, assume only a single LD_LIBRARY_PATH
        * variable.
        */
-      runpath = getenv("LD_LIBRARY_PATH");
+      runpath = getenv(LD_LIBRARY_PATH);
 #endif /* __sun */
 
-#ifdef __bsd
+#ifdef _ALLBSD_SOURCE
       /*
        * On bsd, if a binary is running as sgid or suid, glibc sets
        * LD_LIBRARY_PATH to the empty string for security purposes.  (In
@@@@ -476,7 +483,7 @@@@ CreateExecutionEnvironment(int *_argcp,
        * return from the function now.  Getting the right libraries to
        * be found must be handled through other mechanisms.
        */
-      if((getgid() != getegid()) || (getuid() != geteuid()) ) {
+      if(issetugid()) {
         return;
       }
 #endif
@@@@ -487,7 +494,7 @@@@ CreateExecutionEnvironment(int *_argcp,
       new_runpath = MemAlloc( ((runpath!=NULL)?strlen(runpath):0) +
                               2*strlen(jrepath) + 2*strlen(arch) +
                               strlen(jvmpath) + 52);
-      newpath = new_runpath + strlen("LD_LIBRARY_PATH=");
+      newpath = new_runpath + strlen(LD_LIBRARY_PATH "=");
 
 
       /*
@@@@ -502,7 +509,7 @@@@ CreateExecutionEnvironment(int *_argcp,
 
         /* jvmpath, ((running != wanted)?((wanted==64)?"/"BIG_ARCH:"/.."):""), */
 
-        sprintf(new_runpath, "LD_LIBRARY_PATH="
+        sprintf(new_runpath, LD_LIBRARY_PATH "="
                 "%s:"
                 "%s/lib/%s:"
                 "%s/../lib/%s",
@@@@ -840,7 +847,7 @@@@ GetXUsagePath(char *buf, jint bufsize)
 jboolean
 GetApplicationHome(char *buf, jint bufsize)
 {
-#ifdef __bsd__
+#ifdef _ALLBSD_SOURCE
     char *execname = GetExecname();
     if (execname) {
         strncpy(buf, execname, bufsize-1);
@@@@ -1009,7 +1016,7 @@@@ SetExecname(char **argv)
             }
         }
     }
-#elif defined(__bsd__)
+#elif defined(__linux__)
     {
         const char* self = "/proc/self/exe";
         char buf[PATH_MAX+1];
@@@@ -1019,7 +1026,7 @@@@ SetExecname(char **argv)
             exec_path = strdup(buf);
         }
     }
-#else /* !__sun && !__bsd */
+#else /* !__sun && !__linux */
     {
         /* Not implemented */
     }
@@@@ -1224,7 +1231,7 @@@@ get_cpuid(uint32_t arg,
 
 #endif /* __sun && i586 */
 
-#if defined(__bsd__) && defined(i586)
+#if defined(_ALLBSD_SOURCE) && defined(i586)
 
 /*
  * A utility method for asking the CPU about itself.
@@@@ -1290,7 +1297,7 @@@@ get_cpuid(uint32_t arg,
 #endif
 }
 
-#endif /* __bsd__ && i586 */
+#endif /* _ALLBSD_SOURCE && i586 */
 
 #ifdef i586
 /*
@@@@ -1469,7 +1476,7 @@@@ solaris_i586_ServerClassMachine(void) {
 
 #endif /* __sun && i586 */
 
-#if defined(__bsd__) && defined(i586)
+#if defined(_ALLBSD_SOURCE) && defined(i586)
 
 /* The definition of a server-class machine for bsd-i586 */
 jboolean
@@@@ -1500,7 +1507,7 @@@@ bsd_i586_ServerClassMachine(void) {
   return result;
 }
 
-#endif /* __bsd__ && i586 */
+#endif /* _ALLBSD_SOURCE && i586 */
 
 /* Dispatch to the platform-specific definition of "server-class" */
 jboolean
@@@@ -1510,7 +1517,7 @@@@ ServerClassMachine(void) {
   result = solaris_sparc_ServerClassMachine();
 #elif defined(__sun) && defined(i586)
   result = solaris_i586_ServerClassMachine();
-#elif defined(__bsd__) && defined(i586)
+#elif defined(_ALLBSD_SOURCE) && defined(i586)
   result = bsd_i586_ServerClassMachine();
 #else
   if (_launcher_debug) {
@


1.2
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_launcher_java_md_c,v 1.1 2009/05/23 03:03:24 kurt Exp $
@


1.1
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 3
a3 3
$OpenBSD$
--- hotspot/src/os/bsd/launcher/java_md.c.orig	Fri May 15 17:19:44 2009
+++ hotspot/src/os/bsd/launcher/java_md.c	Fri May 15 17:58:17 2009
d20 1
a20 1
@@@@ -112,7 +119,7 @@@@ extern char **environ;
d29 1
a29 1
@@@@ -456,10 +463,10 @@@@ CreateExecutionEnvironment(int *_argcp,
d42 10
a51 1
@@@@ -483,7 +490,7 @@@@ CreateExecutionEnvironment(int *_argcp,
d60 1
a60 1
@@@@ -498,7 +505,7 @@@@ CreateExecutionEnvironment(int *_argcp,
d69 1
a69 1
@@@@ -836,7 +843,7 @@@@ GetXUsagePath(char *buf, jint bufsize)
d78 1
a78 1
@@@@ -1005,7 +1012,7 @@@@ SetExecname(char **argv)
d87 1
a87 1
@@@@ -1015,7 +1022,7 @@@@ SetExecname(char **argv)
d96 1
a96 1
@@@@ -1220,7 +1227,7 @@@@ get_cpuid(uint32_t arg,
d105 1
a105 1
@@@@ -1286,7 +1293,7 @@@@ get_cpuid(uint32_t arg,
d114 1
a114 1
@@@@ -1465,7 +1472,7 @@@@ solaris_i586_ServerClassMachine(void) {
d123 1
a123 1
@@@@ -1496,7 +1503,7 @@@@ bsd_i586_ServerClassMachine(void) {
d132 1
a132 1
@@@@ -1506,7 +1513,7 @@@@ ServerClassMachine(void) {
@

