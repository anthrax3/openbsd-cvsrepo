head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_classes_sun_tools_attach_BsdVirtualMachine_java,v 1.2 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/solaris/classes/sun/tools/attach/BsdVirtualMachine.java.orig	Tue Oct 26 09:56:36 2010
+++ jdk/src/solaris/classes/sun/tools/attach/BsdVirtualMachine.java	Tue Oct 26 10:58:55 2010
@@@@ -40,9 +40,6 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
     // temp directory for socket file
     private static final String tmpdir = System.getProperty("java.io.tmpdir");
 
-    // Indicates if this machine uses the old BsdThreads
-    static boolean isBsdThreads;
-
     // The patch to the socket file created by the target VM
     String path;
 
@@@@ -67,25 +64,10 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
         // Then we attempt to find the socket file again.
         path = findSocketFile(pid);
         if (path == null) {
-            File f = createAttachFile(pid);
+            File f = new File(tmpdir, ".attach_pid" + pid);
+	    createAttachFile(f.getPath());
             try {
-                // On BsdThreads each thread is a process and we don't have the
-                // pid of the VMThread which has SIGQUIT unblocked. To workaround
-                // this we get the pid of the "manager thread" that is created
-                // by the first call to pthread_create. This is parent of all
-                // threads (except the initial thread).
-                if (isBsdThreads) {
-                    int mpid;
-                    try {
-                        mpid = getBsdThreadsManager(pid);
-                    } catch (IOException x) {
-                        throw new AttachNotSupportedException(x.getMessage());
-                    }
-                    assert(mpid >= 1);
-                    sendQuitToChildrenOf(mpid);
-                } else {
-                    sendQuitTo(pid);
-                }
+                sendQuitTo(pid);
 
                 // give the target VM time to start the attach mechanism
                 int i = 0;
@@@@ -267,33 +249,10 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
         // First check for a .java_pid<pid> file in the working directory
         // of the target process
         String fn = ".java_pid" + pid;
-        String path = "/proc/" + pid + "/cwd/" + fn;
-        File f = new File(path);
-        if (!f.exists()) {
-            // Not found, so try temp directory
-            f = new File(tmpdir, fn);
-            path = f.exists() ? f.getPath() : null;
-        }
-        return path;
+        File f = new File(tmpdir, path);
+	return f.exists() ? f.getPath() : null;
     }
 
-    // On Solaris/Bsd a simple handshake is used to start the attach mechanism
-    // if not already started. The client creates a .attach_pid<pid> file in the
-    // target VM's working directory (or temp directory), and the SIGQUIT handler
-    // checks for the file.
-    private File createAttachFile(int pid) throws IOException {
-        String fn = ".attach_pid" + pid;
-        String path = "/proc/" + pid + "/cwd/" + fn;
-        File f = new File(path);
-        try {
-            f.createNewFile();
-        } catch (IOException x) {
-            f = new File(tmpdir, fn);
-            f.createNewFile();
-        }
-        return f;
-    }
-
     /*
      * Write/sends the given to the target VM. String is transmitted in
      * UTF-8 encoding.
@@@@ -316,12 +275,6 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
 
     //-- native methods
 
-    static native boolean isBsdThreads();
-
-    static native int getBsdThreadsManager(int pid) throws IOException;
-
-    static native void sendQuitToChildrenOf(int pid) throws IOException;
-
     static native void sendQuitTo(int pid) throws IOException;
 
     static native void checkPermissions(String path) throws IOException;
@@@@ -336,8 +289,9 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
 
     static native void write(int fd, byte buf[], int off, int bufLen) throws IOException;
 
+    static native void createAttachFile(String path);
+
     static {
         System.loadLibrary("attach");
-        isBsdThreads = isBsdThreads();
     }
 }
@


1.2
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_classes_sun_tools_attach_BsdVirtualMachine_java,v 1.1 2009/05/23 03:03:25 kurt Exp $
@


1.1
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 6
a6 6
$OpenBSD$
--- jdk/src/solaris/classes/sun/tools/attach/BsdVirtualMachine.java.orig	Mon May 18 16:56:42 2009
+++ jdk/src/solaris/classes/sun/tools/attach/BsdVirtualMachine.java	Mon May 18 16:57:00 2009
@@@@ -38,9 +38,6 @@@@ import java.util.Properties;
  */
 public class BsdVirtualMachine extends HotSpotVirtualMachine {
d14 1
a14 1
@@@@ -65,25 +62,10 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
d19 1
a19 1
+            File f = new File("/tmp/.attach_pid" + pid);
d43 1
a43 1
@@@@ -265,37 +247,14 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
d48 9
a56 12
+        String path = "/tmp/" + fn;
         File f = new File(path);
         if (!f.exists()) {
-            // Not found, so try /tmp
-            path = "/tmp/" + fn;
-            f = new File(path);
-            if (!f.exists()) {
-                return null;            // not found
-            }
+            return null;            // not found
         }
         return path;
d61 2
a62 2
-    // target VM's working directory (or /tmp), and the SIGQUIT handler checks
-    // for the file.
d70 1
a70 2
-            path = "/tmp/" + fn;
-            f = new File(path);
d79 1
a79 1
@@@@ -318,12 +277,6 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
d92 1
a92 1
@@@@ -338,8 +291,9 @@@@ public class BsdVirtualMachine extends HotSpotVirtualM
@

