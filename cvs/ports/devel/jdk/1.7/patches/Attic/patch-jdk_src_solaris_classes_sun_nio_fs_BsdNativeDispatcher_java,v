head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.10.19.01.09;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_classes_sun_nio_fs_BsdNativeDispatcher_java,v 1.2 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/solaris/classes/sun/nio/fs/BsdNativeDispatcher.java.orig	Mon Oct 25 18:02:19 2010
+++ jdk/src/solaris/classes/sun/nio/fs/BsdNativeDispatcher.java	Mon Oct 25 18:15:58 2010
@@@@ -36,84 +36,23 @@@@ class BsdNativeDispatcher extends UnixNativeDispatcher
     private BsdNativeDispatcher() { }
 
    /**
-    * FILE *setmntent(const char *filename, const char *type);
+    * struct fsstat_iter *getfsstat();
     */
-    static long setmntent(byte[] filename, byte[] type) throws UnixException {
-        NativeBuffer pathBuffer = NativeBuffers.asNativeBuffer(filename);
-        NativeBuffer typeBuffer = NativeBuffers.asNativeBuffer(type);
-        try {
-            return setmntent0(pathBuffer.address(), typeBuffer.address());
-        } finally {
-            typeBuffer.release();
-            pathBuffer.release();
-        }
-    }
-    private static native long setmntent0(long pathAddress, long typeAddress)
-        throws UnixException;
+    static native long getfsstat() throws UnixException;
 
    /**
-    * int endmntent(FILE* filep);
+    * int fsstatEntry(struct fsstat_iter * iter, UnixMountEntry entry);
     */
-    static native void endmntent(long stream) throws UnixException;
-
-    /**
-     * ssize_t fgetxattr(int filedes, const char *name, void *value, size_t size);
-     */
-    static int fgetxattr(int filedes, byte[] name, long valueAddress,
-                         int valueLen) throws UnixException
-    {
-        NativeBuffer buffer = NativeBuffers.asNativeBuffer(name);
-        try {
-            return fgetxattr0(filedes, buffer.address(), valueAddress, valueLen);
-        } finally {
-            buffer.release();
-        }
-    }
-
-    private static native int fgetxattr0(int filedes, long nameAddress,
-        long valueAdddress, int valueLen) throws UnixException;
-
-    /**
-     *  fsetxattr(int filedes, const char *name, const void *value, size_t size, int flags);
-     */
-    static void fsetxattr(int filedes, byte[] name, long valueAddress,
-        int valueLen) throws UnixException
-    {
-        NativeBuffer buffer = NativeBuffers.asNativeBuffer(name);
-        try {
-            fsetxattr0(filedes, buffer.address(), valueAddress, valueLen);
-        } finally {
-            buffer.release();
-        }
-    }
-
-    private static native void fsetxattr0(int filedes, long nameAddress,
-        long valueAdddress, int valueLen) throws UnixException;
-
-
-    /**
-     * fremovexattr(int filedes, const char *name);
-     */
-    static void fremovexattr(int filedes, byte[] name) throws UnixException {
-        NativeBuffer buffer = NativeBuffers.asNativeBuffer(name);
-        try {
-            fremovexattr0(filedes, buffer.address());
-        } finally {
-            buffer.release();
-        }
-    }
-
-    private static native void fremovexattr0(int filedes, long nameAddress)
+    static native int fsstatEntry(long iter, UnixMountEntry entry)
         throws UnixException;
 
-    /**
-     * size_t flistxattr(int filedes, const char *list, size_t size)
-     */
-    static native int flistxattr(int filedes, long listAddress, int size)
-        throws UnixException;
+   /**
+    * void endfsstat(struct fsstat_iter * iter);
+    */
+    static native void endfsstat(long iter) throws UnixException;
 
-    // initialize
-    private static native void init();
+    // initialize field IDs
+    private static native void initIDs();
 
     static {
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
@@@@ -121,6 +60,6 @@@@ class BsdNativeDispatcher extends UnixNativeDispatcher
                 System.loadLibrary("nio");
                 return null;
         }});
-        init();
+        initIDs();
     }
 }
@


1.2
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_classes_sun_nio_fs_BsdNativeDispatcher_java,v 1.1 2009/06/10 19:01:09 kurt Exp $
@


1.1
log
@- binary plugs distfile no longer needed
- sync patches with OpenJDK7 bsd-port repository
- install a usable cacerts
- Remove Interruptible IO support
tested by ian@@ william@@
@
text
@d1 3
a3 10
$OpenBSD$
--- jdk/src/solaris/classes/sun/nio/fs/BsdNativeDispatcher.java.orig	Tue Jun  2 13:13:56 2009
+++ jdk/src/solaris/classes/sun/nio/fs/BsdNativeDispatcher.java	Tue Jun  2 13:14:02 2009
@@@@ -1,5 +1,5 @@@@
 /*
- * Copyright 2008-2009 Sun Microsystems, Inc.  All Rights Reserved.
+ * Copyright 2009 Sun Microsystems, Inc.  All Rights Reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@

