head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	kurt_20070508:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2011.09.22.20.26.47;	author kurt;	state dead;
branches;
next	1.4;

1.4
date	2009.06.10.19.01.09;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.19.18.05.43;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.08.17.06.19;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.08.17.06.19;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-hotspot_src_os_bsd_vm_hpi_bsd_hpp,v 1.4 2009/06/10 19:01:09 kurt Exp $
--- hotspot/src/os/bsd/vm/hpi_bsd.hpp.orig	Tue Jun  2 13:44:43 2009
+++ hotspot/src/os/bsd/vm/hpi_bsd.hpp	Wed Jun  3 16:06:36 2009
@@@@ -36,7 +36,7 @@@@
 // HPI_FileInterface
 
 inline int hpi::close(int fd) {
-  return ::close(fd);
+  RESTARTABLE_RETURN_INT(::close(fd)); 
 }
 
 inline size_t hpi::read(int fd, void *buf, unsigned int nBytes) {
@@@@ -55,7 +55,7 @@@@ inline size_t hpi::write(int fd, const void *buf, unsi
 // HPI_SocketInterface
 
 inline int hpi::socket_close(int fd) {
-  return ::close(fd);
+  RESTARTABLE_RETURN_INT(::close(fd));
 }
 
 inline int hpi::socket(int domain, int type, int protocol) {
@@@@ -120,9 +120,9 @@@@ inline int hpi::accept(int fd, struct sockaddr *him, i
   // fetch it's value, this cast is safe for now. The java.net group
   // may need and want to change this interface someday if socklen_t goes
   // to 64 bits on some platform that we support.
-  // Bsd doc says this can't return EINTR, unlike accept() on Solaris
+  // At least OpenBSD and FreeBSD can return EINTR from accept.
 
-  return ::accept(fd, him, (socklen_t *)len);
+  RESTARTABLE_RETURN_INT(::accept(fd, him, (socklen_t *)len));
 }
 
 inline int hpi::recvfrom(int fd, char *buf, int nBytes, int flags,
@@@@ -136,12 +136,16 @@@@ inline int hpi::sendto(int fd, char *buf, int len, int
 }
 
 inline int hpi::socket_available(int fd, jint *pbytes) {
-  // Bsd doc says EINTR not returned, unlike Solaris
-  int ret = ::ioctl(fd, FIONREAD, pbytes);
+  int ret;
 
+  if (fd < 0)
+    return OS_OK;
+
+  RESTARTABLE(::ioctl(fd, FIONREAD, pbytes), ret);
+
   //%% note ioctl can return 0 when successful, JVM_SocketAvailable
   // is expected to return 0 on failure and 1 on success to the jdk.
-  return (ret < 0) ? 0 : 1;
+  return (ret == OS_ERR) ? 0 : 1;
 }
 
 
@


1.4
log
@- binary plugs distfile no longer needed
- sync patches with OpenJDK7 bsd-port repository
- install a usable cacerts
- Remove Interruptible IO support
tested by ian@@ william@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_hpi_bsd_hpp,v 1.3 2009/01/04 23:25:16 kurt Exp $
@


1.3
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 4
a4 4
$OpenBSD: patch-hotspot_src_os_bsd_vm_hpi_bsd_hpp,v 1.2 2008/03/19 18:05:43 kurt Exp $
--- hotspot/src/os/bsd/vm/hpi_bsd.hpp.orig	Sat Aug  2 16:12:29 2008
+++ hotspot/src/os/bsd/vm/hpi_bsd.hpp	Sat Aug  2 16:12:52 2008
@@@@ -36,26 +36,22 @@@@
d13 1
a13 14
-  size_t res;
-  RESTARTABLE( (size_t) ::read(fd, buf, (size_t) nBytes), res);
-  return res;
+  INTERRUPTIBLE_RETURN_INT(::read(fd, buf, (size_t) nBytes), os::Bsd::clear_interrupted);
 }
 
 inline size_t hpi::write(int fd, const void *buf, unsigned int nBytes) {
-  size_t res;
-  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);
-  return res;
+  INTERRUPTIBLE_RETURN_INT(::write(fd, buf, (size_t) nBytes), os::Bsd::clear_interrupted);
 }
 
 
d22 3
a24 57
@@@@ -63,11 +59,11 @@@@ inline int hpi::socket(int domain, int type, int proto
 }
 
 inline int hpi::recv(int fd, char *buf, int nBytes, int flags) {
-  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, (unsigned int) flags));
+  INTERRUPTIBLE_RETURN_INT(::recv(fd, buf, nBytes, (unsigned int) flags), os::Bsd::clear_interrupted);
 }
 
 inline int hpi::send(int fd, char *buf, int nBytes, int flags) {
-  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, (unsigned int) flags));
+  INTERRUPTIBLE_RETURN_INT(::send(fd, buf, nBytes, (unsigned int) flags), os::Bsd::clear_interrupted);
 }
 
 inline int hpi::raw_send(int fd, char *buf, int nBytes, int flags) {
@@@@ -83,11 +79,12 @@@@ inline int hpi::timeout(int fd, long timeout) {
 
   for(;;) {
     struct pollfd pfd;
+    int res;
 
     pfd.fd = fd;
     pfd.events = POLLIN | POLLERR;
 
-    int res = ::poll(&pfd, 1, timeout);
+    INTERRUPTIBLE_NORESTART(::poll(&pfd, 1, timeout), res, os::Bsd::clear_interrupted);
 
     if (res == OS_ERR && errno == EINTR) {
 
@@@@ -111,7 +108,26 @@@@ inline int hpi::listen(int fd, int count) {
 }
 
 inline int hpi::connect(int fd, struct sockaddr *him, int len) {
-  RESTARTABLE_RETURN_INT(::connect(fd, him, len));
+  do {
+    int _result;
+    INTERRUPTIBLE_NORESTART(::connect(fd, him, len), _result,
+			    os::Bsd::clear_interrupted);
+
+    // Depending on when thread interruption is reset, _result could be
+    // one of two values when errno == EINTR
+
+    if (((_result == OS_INTRPT) || (_result == OS_ERR)) && (errno == EINTR)) {
+      /* restarting a connect() changes its errno semantics */
+      INTERRUPTIBLE(::connect(fd, him, len), _result,
+		      os::Bsd::clear_interrupted);
+      /* undo these changes */
+      if (_result == OS_ERR) {
+	if (errno == EALREADY) errno = EINPROGRESS; /* fall through */
+	else if (errno == EISCONN) { errno = 0; return OS_OK; }
+      }
+    }
+    return _result;
+  } while(false);
 }
 
 inline int hpi::accept(int fd, struct sockaddr *him, int *len) {
@@@@ -122,26 +138,32 @@@@ inline int hpi::accept(int fd, struct sockaddr *him, i
d26 2
a27 1
   // Bsd doc says this can't return EINTR, unlike accept() on Solaris
d30 1
a30 3
+  if (fd < 0)
+    return OS_ERR;
+  INTERRUPTIBLE_RETURN_INT((int)::accept(fd, him, (socklen_t*) len), os::Bsd::clear_interrupted); 
d34 1
a34 9
                          sockaddr *from, int *fromlen) {
-  RESTARTABLE_RETURN_INT(::recvfrom(fd, buf, nBytes, (unsigned int) flags, from, (socklen_t *)fromlen));
+  INTERRUPTIBLE_RETURN_INT((int)::recvfrom(fd, buf, nBytes, (unsigned int) flags, from, (socklen_t *)fromlen), os::Bsd::clear_interrupted);
 }
 
 inline int hpi::sendto(int fd, char *buf, int len, int flags,
                         struct sockaddr *to, int tolen) {
-  RESTARTABLE_RETURN_INT(::sendto(fd, buf, len, (unsigned int) flags, to, tolen));
+  INTERRUPTIBLE_RETURN_INT((int)::sendto(fd, buf, len, (unsigned int) flags, to, tolen),os::Bsd::clear_interrupted);
a53 9
@@@@ -168,7 +190,7 @@@@ HPIDECL(bind, "bind", _socket, Bind,
         (fd, him, len));
 */
 inline int hpi::bind(int fd, struct sockaddr *him, int len){
-  return ::bind(fd, him, len);
+  INTERRUPTIBLE_RETURN_INT_NORESTART(::bind(fd, him, len),os::Bsd::clear_interrupted);
 }
 
 /*
@


1.2
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD: patch-hotspot_src_os_bsd_vm_hpi_bsd_hpp,v 1.1.1.1 2007/05/08 17:06:19 kurt Exp $
--- hotspot/src/os/bsd/vm/hpi_bsd.hpp.orig	Wed Nov  7 12:41:29 2007
+++ hotspot/src/os/bsd/vm/hpi_bsd.hpp	Wed Nov  7 12:55:54 2007
d48 2
a49 2
 inline int hpi::timeout(int fd, long timeout) {
@@@@ -79,11 +75,12 @@@@ inline int hpi::timeout(int fd, long timeout) {
d63 1
a63 1
@@@@ -107,7 +104,26 @@@@ inline int hpi::listen(int fd, int count) {
d91 1
a91 1
@@@@ -118,26 +134,32 @@@@ inline int hpi::accept(int fd, struct sockaddr *him, i
d130 1
a130 1
@@@@ -164,7 +186,7 @@@@ HPIDECL(bind, "bind", _socket, Bind,
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- hotspot/src/os/bsd/vm/hpi_bsd.hpp.orig	Mon Apr 16 08:42:36 2007
+++ hotspot/src/os/bsd/vm/hpi_bsd.hpp	Mon Apr 16 08:42:38 2007
@@@@ -39,26 +39,22 @@@@
d35 1
a35 1
@@@@ -66,11 +62,11 @@@@ inline int hpi::socket(int domain, int type, int proto
d49 1
a49 2
@@@@ -81,13 +77,13 @@@@ inline int hpi::timeout(int fd, long timeout) {
   prevtime = ((julong)t.tv_sec * 1000)  +  t.tv_usec / 1000;
d52 1
a53 1
     struct pollfd pfd;
d57 1
a57 1
   
a58 1
-
d60 1
d63 1
a63 2
       // On Bsd any value < 0 means "forever"
@@@@ -110,7 +106,26 @@@@ inline int hpi::listen(int fd, int count) {
d91 1
a91 1
@@@@ -121,26 +136,33 @@@@ inline int hpi::accept(int fd, struct sockaddr *him, i
d102 1
a102 1
 		         sockaddr *from, int *fromlen) {
d108 1
a108 1
 			struct sockaddr *to, int tolen) {
d116 2
a119 2
 
+  int ret;
a125 1
+
d130 1
a130 1
@@@@ -167,7 +189,7 @@@@ HPIDECL(bind, "bind", _socket, Bind, 
@


1.1.1.1
log
@Initial import of jdk 1.7 (a.k.a. OpenJDK 7) work in progress. So far Sun
has released the hotspot portion of 1.7 under GPLv2. j2se and deploy
(plugin & webstart) will come later. No packages yet since j2se is copied
in from 1.5.

Note: hotspot for BSD in previous versions of the jdk were based on a
mixture of Solaris code and Linux code (for amd64). In this version I have
selected Linux as the base and only ported of small parts of the Solaris
code as needed. Using Linux code as the base has significantly reduced the
code divergence for BSD support and should make maintaining the port
easier.

okay ian@@, go for it espie@@
@
text
@@
