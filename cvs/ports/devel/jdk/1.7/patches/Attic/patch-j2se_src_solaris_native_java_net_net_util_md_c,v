head	1.3;
access;
symbols
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2008.03.19.18.05.45;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2007.11.07.03.53.53;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.06.15.46.19;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@$OpenBSD: patch-j2se_src_solaris_native_java_net_net_util_md_c,v 1.2 2007/11/07 03:53:53 kurt Exp $
--- j2se/src/solaris/native/java/net/net_util_md.c.orig	Thu Aug 30 05:05:58 2007
+++ j2se/src/solaris/native/java/net/net_util_md.c	Tue Nov  6 18:36:47 2007
@@@@ -34,6 +34,15 @@@@
 #include <stdlib.h>
 #include <dlfcn.h>
 
+#ifdef _ALLBSD_SOURCE
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#endif
+
+#ifdef __OpenBSD__
+#include <sys/socketvar.h>
+#endif
+
 #ifdef __solaris__
 #include <sys/sockio.h>
 #include <stropts.h>
@@@@ -219,8 +228,16 @@@@ NET_GetFileDescriptorID(JNIEnv *env)
     return (*env)->GetFieldID(env, cls, "fd", "I");
 }
 
+#if defined(DONT_ENABLE_IPV6)
 jint  IPv6_supported()
 {
+    return JNI_FALSE;
+}
+
+#else /* !DONT_ENABLE_IPV6 */
+
+jint  IPv6_supported()
+{
 #ifndef AF_INET6
     return JNI_FALSE;
 #endif
@@@@ -355,6 +372,7 @@@@ jint  IPv6_supported()
     close(fd);
     return JNI_TRUE; 
 }
+#endif /* DONT_ENABLE_IPV6 */
 
 void 
 NET_AllocSockaddr(struct sockaddr **him, int *len) {
@@@@ -689,6 +707,10 @@@@ NET_InetAddressToSockaddr(JNIEnv *env, jobject iaObj, 
 	him6->sin6_family = AF_INET6; 
 	*len = sizeof(struct sockaddr_in6) ;
 
+#if defined(_ALLBSD_SOURCE) && defined(_AF_INET6)
+// XXXBSD: should we do something with scope id here ? see below linux comment
+#endif
+
 	/*
  	 * On Linux if we are connecting to a link-local address
 	 * we need to specify the interface in the scope_id (2.4 kernel only)
@@@@ -1133,6 +1155,20 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
 #define IPTOS_PREC_MASK 0xe0
 #endif
 
+#if defined(_ALLBSD_SOURCE)
+#if defined(KIPC_MAXSOCKBUF)
+    int mib[3];
+    size_t rlen;
+#endif
+
+    int *bufsize;
+
+    static long maxsockbuf = -1;
+
+    int addopt;
+    struct linger *ling;
+#endif
+
     /*
      * IPPROTO/IP_TOS :-
      * 1. IPv6 on Solaris: no-op and will be set in flowinfo
@@@@ -1165,6 +1201,10 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
         *iptos &= (IPTOS_TOS_MASK | IPTOS_PREC_MASK);
     }
 
+#if defined(AF_INET6) && defined(_ALLBSD_SOURCE)
+// XXXBSD: to be implemented ?
+#endif
+
     /*
      * SOL_SOCKET/{SO_SNDBUF,SO_RCVBUF} - On Solaris need to
      * ensure that value is <= max_buf as otherwise we get
@@@@ -1203,12 +1243,89 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
      * is that if SO_RCVBUF is too small then small packets
      * must be discard.
      */
-#ifdef __linux__
+#if defined(__linux__)
     if (level == SOL_SOCKET && opt == SO_RCVBUF) {
 	int *bufsize = (int *)arg;
 	if (*bufsize < 1024) {
 	    *bufsize = 1024;
 	}
+    }
+#endif
+
+#if defined(_ALLBSD_SOURCE)
+    /*
+     * SOL_SOCKET/{SO_SNDBUF,SO_RCVBUF} - On FreeBSD need to
+     * ensure that value is <= kern.ipc.maxsockbuf as otherwise we get
+     * an ENOBUFS error.
+     */
+    if (level == SOL_SOCKET) {
+        if (opt == SO_SNDBUF || opt == SO_RCVBUF) {
+#ifdef KIPC_MAXSOCKBUF
+            if (maxsockbuf == -1) {
+               mib[0] = CTL_KERN;
+               mib[1] = KERN_IPC;
+               mib[2] = KIPC_MAXSOCKBUF;
+               rlen = sizeof(maxsockbuf);
+               if (sysctl(mib, 3, &maxsockbuf, &rlen, NULL, 0) == -1)
+                   maxsockbuf = 1024;
+
+#if 1
+               /* XXXBSD: This is a hack to workaround mb_max/mb_max_adj
+                  problem.  It should be removed when kern.ipc.maxsockbuf
+                  will be real value. */
+               maxsockbuf = (maxsockbuf/5)*4;
+#endif
+           }
+#elif defined(__OpenBSD__)
+	   maxsockbuf = SB_MAX;
+#else
+	   maxsockbuf = 64 * 1024;	/* XXX: NetBSD */
+#endif
+
+           bufsize = (int *)arg;
+           if (*bufsize > maxsockbuf) {
+               *bufsize = maxsockbuf;
+           }
+
+	   if (opt == SO_RCVBUF && *bufsize < 1024) {
+		*bufsize = 1024;
+	   }
+
+        }
+    }
+
+    /*
+     * On Solaris, SO_REUSEADDR will allow multiple datagram
+     * sockets to bind to the same port.  The network jck tests
+     * for this "feature", so we need to emulate it by turning on
+     * SO_REUSEPORT as well for that combination.
+     */
+    if (level == SOL_SOCKET && opt == SO_REUSEADDR) {
+        int sotype, arglen;
+
+        arglen = sizeof(sotype);
+        if (getsockopt(fd, SOL_SOCKET, SO_TYPE, (void *)&sotype, &arglen) < 0) {
+            return -1;
+        }
+
+        if (sotype == SOCK_DGRAM) {
+            addopt = SO_REUSEPORT;
+            setsockopt(fd, level, addopt, arg, len);
+        }
+    }
+
+    /*
+     * Don't allow SO_LINGER value to be too big.
+     * Current max value (240) is empiric value based on tcp_timer.h's
+     * constant TCP_LINGERTIME, which was doubled.
+     *
+     * XXXBSD: maybe we should step it down to 120 ?
+     */
+    if (level == SOL_SOCKET && opt == SO_LINGER) {
+        ling = (struct linger *)arg;
+       if (ling->l_linger > 240 || ling->l_linger < 0) {
+           ling->l_linger = 240;
+       }
     }
 #endif
 
@


1.2
log
@- migrate forward a few necessary networking patches from 1.5 that fell
  through the cracks.
@
text
@d1 1
a1 1
$OpenBSD: patch-j2se_src_solaris_native_java_net_net_util_md_c,v 1.1 2007/09/06 15:46:19 kurt Exp $
@


1.1
log
@Remove BROKEN and update port to b19. The port is fully 1.7 now (both
hotspot and j2se). The j2se patches are from the bsd java repositories
1.5 -> 1.6 (performed by Greg Lewis) -> 1.7 by myself. j2se patches are
in sync with 1.6 patchset 1 plus the Runtime.exec fix from Michiel Boland
via FreeBSD PR http://www.freebsd.org/cgi/query-pr.cgi?pr=115557.

Also from FreeBSD: interactive JRL license verification. By default the
port is IS_INTERACTIVE=Yes. Add ACCEPT_JRL_LICENSE=Yes to /etc/mk.conf
to permanently accept the JRL license.

At some point in the future I will work on switching this back to
OpenJDK/GPLv2 src. That largely depends on Sun's progress at removing more
of the binary plug bits so that stubbing out the remainder is less
cumbersome and time consuming.

Testing, comments and okay ian@@
@
text
@d1 4
a4 4
$OpenBSD$
--- j2se/src/solaris/native/java/net/net_util_md.c.orig	Thu Jul  5 05:03:38 2007
+++ j2se/src/solaris/native/java/net/net_util_md.c	Fri Jul 27 18:25:14 2007
@@@@ -34,6 +34,11 @@@@
d13 4
d20 1
a20 1
@@@@ -219,8 +224,16 @@@@ NET_GetFileDescriptorID(JNIEnv *env)
d37 1
a37 1
@@@@ -355,6 +368,7 @@@@ jint  IPv6_supported()
d45 1
a45 1
@@@@ -689,6 +703,10 @@@@ NET_InetAddressToSockaddr(JNIEnv *env, jobject iaObj, 
d56 1
a56 1
@@@@ -1133,6 +1151,17 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d60 2
a61 1
+#if defined(__FreeBSD__) || defined(__NetBSD__)
d64 2
d77 1
a77 1
@@@@ -1165,6 +1194,10 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d88 1
a88 1
@@@@ -1203,12 +1236,87 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d102 1
a102 1
+#if defined(__FreeBSD__) || defined(__NetBSD__)
d126 2
@

