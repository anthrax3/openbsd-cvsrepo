head	1.6;
access;
symbols
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.5;

1.5
date	2009.10.07.01.53.54;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.23.03.27.41;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_native_java_lang_UNIXProcess_md_c,v 1.5 2009/10/07 01:53:54 kurt Exp $
--- jdk/src/solaris/native/java/lang/UNIXProcess_md.c.orig	Thu Sep 17 03:52:32 2009
+++ jdk/src/solaris/native/java/lang/UNIXProcess_md.c	Sun Oct  4 22:01:04 2009
@@@@ -40,7 +40,11 @@@@
 #include <stdlib.h>
 #include <sys/types.h>
 #include <ctype.h>
+#ifdef _ALLBSD_SOURCE
+#include <sys/wait.h>
+#else
 #include <wait.h>
+#endif
 #include <signal.h>
 #include <string.h>
 #include <errno.h>
@@@@ -49,6 +53,17 @@@@
 #include <fcntl.h>
 #include <limits.h>
 
+#ifdef __FreeBSD__
+#include <dlfcn.h>
+#include <pthread.h>
+#include <pthread_np.h>
+#endif
+
+#ifdef __APPLE__
+#include <crt_externs.h>
+#define environ (*_NSGetEnviron())
+#endif
+
 /*
  * There are 3 possible strategies we might use to "fork":
  *
@@@@ -385,9 +400,35 @@@@ isAsciiDigit(char c)
   return c >= '0' && c <= '9';
 }
 
+#if defined(__OpenBSD__)
+/*
+ * Directly call _thread_sys_closefrom() so the child process
+ * doesn't reset the parrent's file descriptors to be blocking.
+ * This function is only called from the child process which
+ * is single threaded and about to call execvp() so it is
+ * safe to bypass the threaded closefrom().
+ */
+int _thread_sys_closefrom(int);
+
 static int
 closeDescriptors(void)
 {
+  return _thread_sys_closefrom(FAIL_FILENO + 1);
+}
+
+#else
+
+#ifdef _ALLBSD_SOURCE
+#define FD_DIR "/dev/fd"
+#define dirent64 dirent
+#define readdir64 readdir
+#else
+#define FD_DIR "/proc/self/fd"
+#endif
+
+static int
+closeDescriptors(void)
+{
     DIR *dp;
     struct dirent64 *dirp;
     int from_fd = FAIL_FILENO + 1;
@@@@ -402,7 +443,7 @@@@ closeDescriptors(void)
     restartableClose(from_fd);          /* for possible use by opendir() */
     restartableClose(from_fd + 1);      /* another one for good luck */
 
-    if ((dp = opendir("/proc/self/fd")) == NULL)
+    if ((dp = opendir(FD_DIR)) == NULL)
         return 0;
 
     /* We use readdir64 instead of readdir to work around Solaris bug
@@@@ -419,6 +460,7 @@@@ closeDescriptors(void)
 
     return 1;
 }
+#endif /* !__OpenBSD__ */
 
 static int
 moveDescriptor(int fd_from, int fd_to)
@@@@ -556,6 +598,21 @@@@ JDK_execvpe(const char *file,
             const char *argv[],
             const char *const envp[])
 {
+    /* This is one of the rare times it's more portable to declare an
+     * external symbol explicitly, rather than via a system header.
+     * The declaration is standardized as part of UNIX98, but there is
+     * no standard (not even de-facto) header file where the
+     * declaration is to be found.  See:
+     * http://www.opengroup.org/onlinepubs/009695399/functions/environ.html
+     * http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_02.html
+     *
+     * "All identifiers in this volume of IEEE Std 1003.1-2001, except
+     * environ, are defined in at least one of the headers" (!)
+     */
+#ifndef __APPLE__
+    extern char **environ;
+#endif
+
     if (envp == NULL || (char **) envp == environ) {
         execvp(file, (char **) argv);
         return;
@


1.5
log
@Update to early access build 72 plus the following:
- sync patches with upstream repo: OpenJDK/bds-port
- fix gtk look and feel issue caused by dlopen of non-matching major
- fix other dlopen's of non-matching majors
- change max memory utilization on i386 to correct build failures
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_native_java_lang_UNIXProcess_md_c,v 1.4 2009/05/23 03:27:41 kurt Exp $
@


1.4
log
@- These patches were updated not removed. ?!?!
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/solaris/native/java/lang/UNIXProcess_md.c.orig	Fri May  8 03:35:07 2009
+++ jdk/src/solaris/native/java/lang/UNIXProcess_md.c	Mon May 18 17:20:44 2009
d31 5
a35 5
 #ifndef STDIN_FILENO
 #define STDIN_FILENO 0
 #endif
@@@@ -259,7 +274,85 @@@@ Java_java_lang_UNIXProcess_waitForProcessExit(JNIEnv* 
     }
a37 52
+#if defined(__FreeBSD__)
+
+extern pid_t   __sys_fork(void);
+
+static pid_t
+jdk_fork_wrapper()
+{
+    pid_t resultPid;
+    typedef void (*void_func)();
+    static void_func func_defer = NULL;
+    static void_func func_undefer = NULL;
+    static int is_libc_r = -1;
+
+    if (is_libc_r == -1) {
+
+	/*
+         * BSDNOTE: Check for loaded symbols.
+         *
+         * If "_thread_kern_sig_defer" symbol is found assume we are
+	 * libc_r
+         *
+         * If libc_r is loaded, use fork system call drectly to avoid
+         * problems with using protected pages. 
+         *
+         * --phantom
+	 */
+	func_defer =
+		(void_func)dlsym(RTLD_DEFAULT, "_thread_kern_sig_defer");
+	func_undefer =
+		(void_func)dlsym(RTLD_DEFAULT, "_thread_kern_sig_undefer");
+	if (func_defer != NULL)
+	    is_libc_r = 1;
+	else {
+	    is_libc_r = 0;
+	}
+    }
+
+    if (is_libc_r == 0) {
+	/* Not a libc_r */
+	resultPid = fork();
+    } else {
+        (*func_defer)();		/* call _thread_kern_sig_defer() */
+        resultPid = __sys_fork();
+        if (resultPid != 0)
+ 	    (*func_undefer)();		/* call _thread_kern_sig_undefer() */
+	/* leave child with signals disabled, but reenable in parent */
+    }
+
+    return resultPid;
+}
+#endif /* __FreeBSD__ */
+
d49 2
a50 2
+closeDescriptors(void)
+{
d65 8
a72 6
 isAsciiDigit(char c)
 {
   return c >= '0' && c <= '9';
@@@@ -282,7 +375,7 @@@@ closeDescriptors(void)
     close(from_fd);             /* for possible use by opendir() */
     close(from_fd + 1);         /* another one for good luck */
d79 1
a79 1
@@@@ -299,6 +392,7 @@@@ closeDescriptors(void)
d85 1
a85 1
 static void
d87 15
a101 4
@@@@ -452,7 +546,9 @@@@ execvpe(const char *file, const char *const argv[], co
      * "All identifiers in this volume of IEEE Std 1003.1-2001, except
      * environ, are defined in at least one of the headers" (!)
      */
d103 1
a103 1
     extern char **environ;
d105 4
a108 48
 
     if (envp != NULL)
         environ = (char **) envp;
@@@@ -516,10 +612,15 @@@@ readFully(int fd, void *buf, size_t nbyte)
     }
 }
 
+#if defined(__FreeBSD__)
+#undef fork1
+#define fork1() jdk_fork_wrapper()
+#else
 #ifndef __solaris__
 #undef fork1
 #define fork1() fork()
 #endif
+#endif
 
 JNIEXPORT jint JNICALL
 Java_java_lang_UNIXProcess_forkAndExec(JNIEnv *env,
@@@@ -584,6 +685,28 @@@@ Java_java_lang_UNIXProcess_forkAndExec(JNIEnv *env,
     if (resultPid == 0) {
         /* Child process */
 
+#ifdef __OpenBSD__
+// XXXBSD: Work-around userland pthread implementation issue.
+// Closing file descriptors will reset them to be blocking.
+// This is problematic for the parent when it attemts to use
+// the blocking fd and deadlocks. Setting them to non-blocking
+// in the child prevents the close/dup2 from resetting them.
+    {
+	int flags;
+	flags = fcntl(STDIN_FILENO, F_GETFL, NULL);
+	if (flags != -1)
+	    fcntl(STDIN_FILENO, F_SETFL, flags | O_NONBLOCK);
+
+	flags = fcntl(STDOUT_FILENO, F_GETFL, NULL);
+	if (flags != -1)
+	    fcntl(STDOUT_FILENO, F_SETFL, flags | O_NONBLOCK);
+
+	flags = fcntl(STDERR_FILENO, F_GETFL, NULL);
+	if (flags != -1)
+	    fcntl(STDOUT_FILENO, F_SETFL, flags | O_NONBLOCK);
+    }
+#endif
+ 
         /* Close the parent sides of the pipes.
            Closing pipe fds here is redundant, since closeDescriptors()
            would do it anyways, but a little paranoia is a good thing. */
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_solaris_native_java_lang_UNIXProcess_md_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/solaris/native/java/lang/UNIXProcess_md.c.orig	Thu Jul 17 03:43:47 2008
+++ jdk/src/solaris/native/java/lang/UNIXProcess_md.c	Sat Aug  2 17:10:19 2008
d16 1
a16 1
@@@@ -49,6 +53,12 @@@@
d26 5
d34 1
a34 1
@@@@ -259,9 +269,122 @@@@ Java_java_lang_UNIXProcess_waitForProcessExit(JNIEnv* 
a37 59
+#if defined(__OpenBSD__)
+/*
+ * Directly call _thread_sys_closefrom() so the child process
+ * doesn't reset the parrent's file descriptors to be blocking.
+ * This function is only called from the child process which
+ * is single threaded and about to call execvp() so it is
+ * safe to bypass the threaded closefrom().
+ */
+int _thread_sys_closefrom(int);
+
 static int
 closeDescriptors(void)
 {
+	return _thread_sys_closefrom(FAIL_FILENO + 1);
+}
+
+#elif defined(_ALLBSD_SOURCE)
+
+/*
+ * BSDNOTE: This function was returning 'int' originally.  But it assumed
+ * that OS has some intelegent functionality to close opened-only fds
+ * associated with current process.  Since we have to close them lineary
+ * make it void, until something really new functionality will appear.
+ */
+int closeDescriptors()
+{
+    int max_fd, savei, i, ebadf;
+
+    /*
+     * BSDNOTE: There's no known way to find list of all open file descriptors
+     * associated with process in FreeBSD.  Therefore we have to pass from
+     * fd == 3 to maximum fd per process number.  It's possible to retrive
+     * max number of fd's with three ways: sysctl(kern.maxfilesperproc),
+     * getrlimit(RLIMIT_NOFILE) and getdtablesize().  In current implementation
+     * getdtablesize() returns MIN() of first two ways.
+     *
+     * At my current system maxfileperproc > 7300.  And it's unlikely that
+     * all of these descriptors always are allocated.  Let's use some
+     * "heuristics" to avoid thousands of unneccessary calls.
+     */
+
+#define GUESS_FINISHED	51
+
+    max_fd = getdtablesize();
+    ebadf = 0;
+
+    for (i = 3; i < max_fd; i++) {
+	if (close(i) < 0) { ebadf++; } else { ebadf = 0; }
+	/*
+         * GUESS_FINISHED subsequent calls to close() returned EBADF, assume
+         * we don't have open descriptors anymore
+         */
+	if (ebadf > GUESS_FINISHED) {
+	    return (0);
+        }
+    }
+    return (0);
+}
+
d90 9
a98 1
+#else /* _ALLBSD_SOURCE */
d100 1
a100 1
+static int
d103 27
a129 4
     DIR *dp;
     struct dirent64 *dirp;
     int from_fd = FAIL_FILENO + 1;
@@@@ -293,6 +416,7 @@@@ closeDescriptors(void)
d133 1
a133 1
+#endif /* !_ALLBSD_SOURCE */
d137 11
a147 1
@@@@ -510,10 +634,15 @@@@ readFully(int fd, void *buf, size_t nbyte)
d163 1
a163 1
@@@@ -578,6 +707,28 @@@@ Java_java_lang_UNIXProcess_forkAndExec(JNIEnv *env,
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_native_java_lang_UNIXProcess_md_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/solaris/native/java/lang/UNIXProcess_md.c.orig	Tue Dec  4 04:05:20 2007
+++ jdk/src/solaris/native/java/lang/UNIXProcess_md.c	Wed Dec  5 17:46:43 2007
d160 2
a161 2
@@@@ -479,10 +603,15 @@@@ closeSafely(int fd)
         close(fd);
d176 1
a176 1
@@@@ -544,6 +673,28 @@@@ Java_java_lang_UNIXProcess_forkAndExec(JNIEnv *env,
d202 1
a202 2
         /* Close the parent sides of the pipe.
            Give the child sides of the pipes the right fileno's.
d204 1
@

