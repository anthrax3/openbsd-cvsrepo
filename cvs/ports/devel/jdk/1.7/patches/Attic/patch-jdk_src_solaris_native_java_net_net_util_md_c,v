head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.4;

1.4
date	2011.01.11.15.47.50;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.23.03.03.25;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_solaris_native_java_net_net_util_md_c,v 1.4 2011/01/11 15:47:50 kurt Exp $
--- jdk/src/solaris/native/java/net/net_util_md.c.orig	Thu Dec 16 17:15:16 2010
+++ jdk/src/solaris/native/java/net/net_util_md.c	Tue Jan  4 19:20:11 2011
@@@@ -33,8 +33,17 @@@@
 #include <netdb.h>
 #include <stdlib.h>
 #include <dlfcn.h>
-#include <values.h>
+#include <limits.h>
 
+#ifdef _ALLBSD_SOURCE
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#endif
+
+#ifdef __OpenBSD__
+#include <sys/socketvar.h>
+#endif
+
 #ifdef __solaris__
 #include <sys/sockio.h>
 #include <stropts.h>
@@@@ -127,7 +136,7 @@@@ getParam(char *driver, char *param)
 
 static int findMaxBuf(int fd, int opt, int sotype) {
     int a = 0;
-    int b = MAXINT;
+    int b = INT_MAX;
     int initial_guess;
     int limit = -1;
 
@@@@ -272,8 +281,16 @@@@ NET_GetFileDescriptorID(JNIEnv *env)
     return (*env)->GetFieldID(env, cls, "fd", "I");
 }
 
+#if defined(DONT_ENABLE_IPV6)
 jint  IPv6_supported()
 {
+    return JNI_FALSE;
+}
+
+#else /* !DONT_ENABLE_IPV6 */
+
+jint  IPv6_supported()
+{
 #ifndef AF_INET6
     return JNI_FALSE;
 #endif
@@@@ -410,6 +427,7 @@@@ jint  IPv6_supported()
     return JNI_TRUE;
 #endif /* AF_INET6 */
 }
+#endif /* DONT_ENABLE_IPV6 */
 
 void ThrowUnknownHostExceptionWithGaiError(JNIEnv *env,
                                            const char* hostname,
@@@@ -772,6 +790,10 @@@@ NET_InetAddressToSockaddr(JNIEnv *env, jobject iaObj, 
         him6->sin6_family = AF_INET6;
         *len = sizeof(struct sockaddr_in6) ;
 
+#if defined(_ALLBSD_SOURCE) && defined(_AF_INET6)
+// XXXBSD: should we do something with scope id here ? see below linux comment
+#endif
+
         /*
          * On Linux if we are connecting to a link-local address
          * we need to specify the interface in the scope_id (2.4 kernel only)
@@@@ -1178,7 +1200,6 @@@@ NET_GetSockOpt(int fd, int level, int opt, void *resul
         *len = socklen;
     }
 #endif
-
     if (rv < 0) {
         return rv;
     }
@@@@ -1224,6 +1245,24 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
 #define IPTOS_PREC_MASK 0xe0
 #endif
 
+#if defined(_ALLBSD_SOURCE)
+#if defined(KIPC_MAXSOCKBUF)
+    int mib[3];
+    size_t rlen;
+#endif
+
+    int *bufsize;
+
+#ifdef __APPLE__
+    static int maxsockbuf = -1;
+#else
+    static long maxsockbuf = -1;
+#endif
+
+    int addopt;
+    struct linger *ling;
+#endif
+
     /*
      * IPPROTO/IP_TOS :-
      * 1. IPv6 on Solaris: no-op and will be set in flowinfo
@@@@ -1256,6 +1295,10 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
         *iptos &= (IPTOS_TOS_MASK | IPTOS_PREC_MASK);
     }
 
+#if defined(AF_INET6) && defined(_ALLBSD_SOURCE)
+// XXXBSD: to be implemented ?
+#endif
+
     /*
      * SOL_SOCKET/{SO_SNDBUF,SO_RCVBUF} - On Solaris we may need to clamp
      * the value when it exceeds the system limit.
@@@@ -1263,7 +1306,8 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
 #ifdef __solaris__
     if (level == SOL_SOCKET) {
         if (opt == SO_SNDBUF || opt == SO_RCVBUF) {
-            int sotype=0, arglen;
+            int sotype = 0;
+            socklen_t arglen;
             int *bufsize, maxbuf;
             int ret;
 
@@@@ -1329,6 +1373,84 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
     }
 #endif
 
+#if defined(_ALLBSD_SOURCE)
+    /*
+     * SOL_SOCKET/{SO_SNDBUF,SO_RCVBUF} - On FreeBSD need to
+     * ensure that value is <= kern.ipc.maxsockbuf as otherwise we get
+     * an ENOBUFS error.
+     */
+    if (level == SOL_SOCKET) {
+        if (opt == SO_SNDBUF || opt == SO_RCVBUF) {
+#ifdef KIPC_MAXSOCKBUF
+            if (maxsockbuf == -1) {
+               mib[0] = CTL_KERN;
+               mib[1] = KERN_IPC;
+               mib[2] = KIPC_MAXSOCKBUF;
+               rlen = sizeof(maxsockbuf);
+               if (sysctl(mib, 3, &maxsockbuf, &rlen, NULL, 0) == -1)
+                   maxsockbuf = 1024;
+
+#if 1
+               /* XXXBSD: This is a hack to workaround mb_max/mb_max_adj
+                  problem.  It should be removed when kern.ipc.maxsockbuf
+                  will be real value. */
+               maxsockbuf = (maxsockbuf/5)*4;
+#endif
+           }
+#elif defined(__OpenBSD__)
+	   maxsockbuf = SB_MAX;
+#else
+	   maxsockbuf = 64 * 1024;	/* XXX: NetBSD */
+#endif
+
+           bufsize = (int *)arg;
+           if (*bufsize > maxsockbuf) {
+               *bufsize = maxsockbuf;
+           }
+
+	   if (opt == SO_RCVBUF && *bufsize < 1024) {
+		*bufsize = 1024;
+	   }
+
+        }
+    }
+
+    /*
+     * On Solaris, SO_REUSEADDR will allow multiple datagram
+     * sockets to bind to the same port.  The network jck tests
+     * for this "feature", so we need to emulate it by turning on
+     * SO_REUSEPORT as well for that combination.
+     */
+    if (level == SOL_SOCKET && opt == SO_REUSEADDR) {
+        int sotype;
+        socklen_t arglen;
+
+        arglen = sizeof(sotype);
+        if (getsockopt(fd, SOL_SOCKET, SO_TYPE, (void *)&sotype, &arglen) < 0) {
+            return -1;
+        }
+
+        if (sotype == SOCK_DGRAM) {
+            addopt = SO_REUSEPORT;
+            setsockopt(fd, level, addopt, arg, len);
+        }
+    }
+
+    /*
+     * Don't allow SO_LINGER value to be too big.
+     * Current max value (240) is empiric value based on tcp_timer.h's
+     * constant TCP_LINGERTIME, which was doubled.
+     *
+     * XXXBSD: maybe we should step it down to 120 ?
+     */
+    if (level == SOL_SOCKET && opt == SO_LINGER) {
+        ling = (struct linger *)arg;
+       if (ling->l_linger > 240 || ling->l_linger < 0) {
+           ling->l_linger = 240;
+       }
+    }
+#endif
+
     return setsockopt(fd, level, opt, arg, len);
 }
 
@@@@ -1379,7 +1501,8 @@@@ NET_Bind(int fd, struct sockaddr *him, int len)
      * corresponding IPv4 port is in use.
      */
     if (ipv6_available()) {
-        int arg, len;
+        int arg;
+        socklen_t len;
 
         len = sizeof(arg);
         if (getsockopt(fd, SOL_SOCKET, SO_REUSEADDR, (char *)&arg,
@


1.4
log
@Update to early access build 122. okay jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_solaris_native_java_net_net_util_md_c,v 1.3 2009/05/23 03:03:25 kurt Exp $
@


1.3
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 5
a5 4
$OpenBSD: patch-jdk_src_solaris_native_java_net_net_util_md_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
--- jdk/src/solaris/native/java/net/net_util_md.c.orig	Fri May  8 03:35:07 2009
+++ jdk/src/solaris/native/java/net/net_util_md.c	Mon May 18 19:41:43 2009
@@@@ -34,6 +34,15 @@@@
d8 2
d23 10
a32 1
@@@@ -219,8 +228,16 @@@@ NET_GetFileDescriptorID(JNIEnv *env)
d49 1
a49 2
@@@@ -355,6 +372,7 @@@@ jint  IPv6_supported()
     close(fd);
d51 1
d55 3
a57 3
 void
 NET_AllocSockaddr(struct sockaddr **him, int *len) {
@@@@ -688,6 +706,10 @@@@ NET_InetAddressToSockaddr(JNIEnv *env, jobject iaObj, 
d68 1
a68 1
@@@@ -1094,7 +1116,6 @@@@ NET_GetSockOpt(int fd, int level, int opt, void *resul
d76 1
a76 1
@@@@ -1141,6 +1162,24 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d101 1
a101 1
@@@@ -1173,6 +1212,10 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d110 3
a112 3
      * SOL_SOCKET/{SO_SNDBUF,SO_RCVBUF} - On Solaris need to
      * ensure that value is <= max_buf as otherwise we get
@@@@ -1181,7 +1224,8 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d116 2
a117 2
-            int sotype, arglen;
+            int sotype;
d120 1
d122 1
a122 2
             if (!init_max_buf) {
@@@@ -1220,6 +1264,84 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d207 1
a207 1
@@@@ -1270,7 +1392,8 @@@@ NET_Bind(int fd, struct sockaddr *him, int len)
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_solaris_native_java_net_net_util_md_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
--- jdk/src/solaris/native/java/net/net_util_md.c.orig	Thu Sep 11 03:44:53 2008
+++ jdk/src/solaris/native/java/net/net_util_md.c	Fri Sep 12 17:45:12 2008
d56 9
a64 1
@@@@ -1141,6 +1163,20 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d76 3
d80 1
d89 1
a89 1
@@@@ -1173,6 +1209,10 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d100 14
a113 7
@@@@ -1217,6 +1257,83 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
         if (*bufsize < 1024) {
             *bufsize = 1024;
         }
+    }
+#endif
+
d163 2
a164 1
+        int sotype, arglen;
d189 13
a201 2
     }
 #endif
d203 2
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/solaris/native/java/net/net_util_md.c.orig	Tue Dec  4 04:05:20 2007
+++ jdk/src/solaris/native/java/net/net_util_md.c	Fri Dec  7 17:33:12 2007
d45 1
a45 1
@@@@ -689,6 +707,10 @@@@ NET_InetAddressToSockaddr(JNIEnv *env, jobject iaObj, 
d56 1
a56 1
@@@@ -1133,6 +1155,20 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d77 1
a77 1
@@@@ -1165,6 +1201,10 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
d88 1
a88 1
@@@@ -1209,6 +1249,83 @@@@ NET_SetSockOpt(int fd, int level, int  opt, const void
@

