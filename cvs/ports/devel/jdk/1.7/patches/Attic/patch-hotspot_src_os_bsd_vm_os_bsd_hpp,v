head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.10
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.2
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	kurt_20070508:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2011.09.22.20.26.47;	author kurt;	state dead;
branches;
next	1.6;

1.6
date	2009.06.10.19.01.09;	author kurt;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.23.03.03.24;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.19.18.05.43;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2007.09.06.15.46.18;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.08.17.06.18;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.08.17.06.18;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_hpp,v 1.6 2009/06/10 19:01:09 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.hpp.orig	Sat May 30 10:11:57 2009
+++ hotspot/src/os/bsd/vm/os_bsd.hpp	Sat May 30 10:15:17 2009
@@@@ -27,6 +27,12 @@@@
 /* pthread_getattr_np comes with BsdThreads-0.9-7 on RedHat 7.1 */
 typedef int (*pthread_getattr_func_type) (pthread_t, pthread_attr_t *);
 
+#ifdef __APPLE__
+// Mac OS X doesn't support clock_gettime. Stub out the type, it is
+// unused
+typedef int clockid_t;
+#endif
+
 class Bsd {
   friend class os;
 
@@@@ -47,6 +53,7 @@@@ class Bsd {
   static int sigflags[MAXSIGNUM];
 
   static int (*_clock_gettime)(clockid_t, struct timespec *);
+#ifndef _ALLBSD_SOURCE
   static int (*_pthread_getcpuclockid)(pthread_t, clockid_t *);
 
   static address   _initial_thread_stack_bottom;
@@@@ -58,6 +65,7 @@@@ class Bsd {
   static bool _is_floating_stack;
   static bool _is_NPTL;
   static bool _supports_fast_thread_cpu_time;
+#endif
 
   static GrowableArray<int>* _cpu_to_node;
 
@@@@ -65,38 +73,52 @@@@ class Bsd {
 
   static julong _physical_memory;
   static pthread_t _main_thread;
+#ifndef _ALLBSD_SOURCE
   static Mutex* _createThread_lock;
+#endif
   static int _page_size;
 
   static julong available_memory();
   static julong physical_memory() { return _physical_memory; }
   static void initialize_system_info();
 
+#ifndef _ALLBSD_SOURCE
   static void set_glibc_version(const char *s)      { _glibc_version = s; }
   static void set_libpthread_version(const char *s) { _libpthread_version = s; }
+#endif
 
   static bool supports_variable_stack_size();
 
+#ifndef _ALLBSD_SOURCE
   static void set_is_NPTL()                   { _is_NPTL = true;  }
   static void set_is_BsdThreads()           { _is_NPTL = false; }
   static void set_is_floating_stack()         { _is_floating_stack = true; }
+#endif
 
   static void rebuild_cpu_to_node_map();
   static GrowableArray<int>* cpu_to_node()    { return _cpu_to_node; }
  public:
+
   static void init_thread_fpu_state();
+#ifndef _ALLBSD_SOURCE
   static int  get_fpu_control_word();
   static void set_fpu_control_word(int fpu_control);
+#endif
   static pthread_t main_thread(void)                                { return _main_thread; }
+
+#ifndef _ALLBSD_SOURCE
   // returns kernel thread id (similar to LWP id on Solaris), which can be
   // used to access /proc
   static pid_t gettid();
   static void set_createThread_lock(Mutex* lk)                      { _createThread_lock = lk; }
   static Mutex* createThread_lock(void)                             { return _createThread_lock; }
+#endif
   static void hotspot_sigmask(Thread* thread);
 
+#ifndef _ALLBSD_SOURCE
   static address   initial_thread_stack_bottom(void)                { return _initial_thread_stack_bottom; }
   static uintptr_t initial_thread_stack_size(void)                  { return _initial_thread_stack_size; }
+#endif
   static bool is_initial_thread(void);
 
   static int page_size(void)                                        { return _page_size; }
@@@@ -133,6 +155,7 @@@@ class Bsd {
   static struct sigaction *get_chained_signal_action(int sig);
   static bool chained_handler(int sig, siginfo_t* siginfo, void* context);
 
+#ifndef _ALLBSD_SOURCE
   // GNU libc and libpthread version strings
   static const char *glibc_version()          { return _glibc_version; }
   static const char *libpthread_version()     { return _libpthread_version; }
@@@@ -148,6 +171,7 @@@@ class Bsd {
   static void libpthread_init();
   static bool libnuma_init();
   static void* libnuma_dlsym(void* handle, const char* name);
+#endif
   // Minimum stack size a thread can be created with (allowing
   // the VM to completely create the thread and enter user code)
   static size_t min_stack_allowed;
@@@@ -156,17 +180,21 @@@@ class Bsd {
   static size_t default_stack_size(os::ThreadType thr_type);
   static size_t default_guard_size(os::ThreadType thr_type);
 
+#ifndef _ALLBSD_SOURCE
   static void capture_initial_stack(size_t max_size);
 
   // Stack overflow handling
   static bool manually_expand_stack(JavaThread * t, address addr);
   static int max_register_window_saves_before_flushing();
+#endif
 
   // Real-time clock functions
   static void clock_init(void);
 
+#ifndef _ALLBSD_SOURCE
   // fast POSIX clocks support
   static void fast_thread_clock_init(void);
+#endif
 
   static bool supports_monotonic_clock() {
     return _clock_gettime != NULL;
@@@@ -176,6 +204,7 @@@@ class Bsd {
     return _clock_gettime ? _clock_gettime(clock_id, tp) : -1;
   }
 
+#ifndef _ALLBSD_SOURCE
   static int pthread_getcpuclockid(pthread_t tid, clockid_t *clock_id) {
     return _pthread_getcpuclockid ? _pthread_getcpuclockid(tid, clock_id) : -1;
   }
@@@@ -185,6 +214,7 @@@@ class Bsd {
   }
 
   static jlong fast_thread_cpu_time(clockid_t clockid);
+#endif
 
   // Stack repair handling
 
@


1.6
log
@- binary plugs distfile no longer needed
- sync patches with OpenJDK7 bsd-port repository
- install a usable cacerts
- Remove Interruptible IO support
tested by ian@@ william@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_hpp,v 1.5 2009/05/23 03:03:24 kurt Exp $
@


1.5
log
@- update from early access b43 to b59
- sync patches with OpenJDK's bsd_port project
- require a pre-installed package for native_bootstrap
- The new 1.7 class java.nio.channels.spi.AsynchronousChannelProvider
  is not implemented yet on BSD.
- The new 1.7 package java.nio.sctp is not included and not supported on
  OpenBD
@
text
@d1 3
a3 3
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_hpp,v 1.4 2009/01/04 23:25:16 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.hpp.orig	Wed May 20 17:42:24 2009
+++ hotspot/src/os/bsd/vm/os_bsd.hpp	Wed May 20 19:02:42 2009
d33 1
a33 1
@@@@ -65,38 +73,73 @@@@ class Bsd {
a61 21
+#ifdef _ALLBSD_SOURCE
+//XXXBSD: ported from solaris version
+  enum {
+    clear_interrupted = true
+  };
+  static void setup_interruptible(JavaThread* thread);
+  static void setup_interruptible_already_blocked(JavaThread* thread);
+  static JavaThread* setup_interruptible();
+  static void cleanup_interruptible(JavaThread* thread);
+
+  // perf counter incrementers used by _INTERRUPTIBLE 
+
+  static void bump_interrupted_before_count();
+  static void bump_interrupted_during_count();
+
+#ifdef ASSERT
+  static JavaThread* setup_interruptible_native();
+  static void cleanup_interruptible_native(JavaThread* thread);
+#endif
+
+#endif
d86 1
a86 1
@@@@ -133,6 +176,7 @@@@ class Bsd {
d94 1
a94 1
@@@@ -148,6 +192,7 @@@@ class Bsd {
d102 1
a102 1
@@@@ -156,17 +201,21 @@@@ class Bsd {
d124 1
a124 1
@@@@ -176,6 +225,7 @@@@ class Bsd {
d132 1
a132 1
@@@@ -185,6 +235,7 @@@@ class Bsd {
@


1.4
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 17
a17 4
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_hpp,v 1.3 2008/03/19 18:05:43 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.hpp.orig	Wed Dec 24 10:02:07 2008
+++ hotspot/src/os/bsd/vm/os_bsd.hpp	Wed Dec 24 10:04:07 2008
@@@@ -47,6 +47,7 @@@@ class Bsd {
d25 1
a25 1
@@@@ -58,6 +59,7 @@@@ class Bsd {
d33 1
a33 1
@@@@ -65,38 +67,73 @@@@ class Bsd {
d107 1
a107 1
@@@@ -133,6 +170,7 @@@@ class Bsd {
d115 1
a115 3
@@@@ -146,6 +184,7 @@@@ class Bsd {
   static bool is_floating_stack()             { return _is_floating_stack; }
 
d117 2
a119 2
   static bool libnuma_init();
 
d121 3
a123 1
@@@@ -156,17 +195,21 @@@@ class Bsd {
d145 1
a145 1
@@@@ -176,6 +219,7 @@@@ class Bsd {
d153 1
a153 1
@@@@ -185,6 +229,7 @@@@ class Bsd {
@


1.3
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_hpp,v 1.2 2007/09/06 15:46:18 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.hpp.orig	Wed Nov  7 12:41:29 2007
+++ hotspot/src/os/bsd/vm/os_bsd.hpp	Wed Nov  7 12:41:35 2007
d12 1
a12 1
@@@@ -58,42 +59,78 @@@@ class Bsd {
d18 3
a20 1
  protected:
d34 2
a35 2
   static void set_glibc_version(char *s)      { _glibc_version = s; }
   static void set_libpthread_version(char *s) { _libpthread_version = s; }
d46 2
a48 1
 
d94 1
a94 1
@@@@ -130,6 +167,7 @@@@ class Bsd {
d100 3
a102 3
   static char *glibc_version()                { return _glibc_version; }
   static char *libpthread_version()           { return _libpthread_version; }
@@@@ -143,6 +181,7 @@@@ class Bsd {
d107 1
d110 1
a110 2
   // the VM to completely create the thread and enter user code)
@@@@ -152,17 +191,21 @@@@ class Bsd {
d132 1
a132 1
@@@@ -172,6 +215,7 @@@@ class Bsd {
d140 1
a140 1
@@@@ -181,6 +225,7 @@@@ class Bsd {
@


1.2
log
@Remove BROKEN and update port to b19. The port is fully 1.7 now (both
hotspot and j2se). The j2se patches are from the bsd java repositories
1.5 -> 1.6 (performed by Greg Lewis) -> 1.7 by myself. j2se patches are
in sync with 1.6 patchset 1 plus the Runtime.exec fix from Michiel Boland
via FreeBSD PR http://www.freebsd.org/cgi/query-pr.cgi?pr=115557.

Also from FreeBSD: interactive JRL license verification. By default the
port is IS_INTERACTIVE=Yes. Add ACCEPT_JRL_LICENSE=Yes to /etc/mk.conf
to permanently accept the JRL license.

At some point in the future I will work on switching this back to
OpenJDK/GPLv2 src. That largely depends on Sun's progress at removing more
of the binary plug bits so that stubbing out the remainder is less
cumbersome and time consuming.

Testing, comments and okay ian@@
@
text
@d1 4
a4 4
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_hpp,v 1.1.1.1 2007/05/08 17:06:18 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.hpp.orig	Fri Aug  3 18:02:38 2007
+++ hotspot/src/os/bsd/vm/os_bsd.hpp	Fri Aug  3 18:02:52 2007
@@@@ -50,6 +50,7 @@@@ class Bsd {
d12 1
a12 1
@@@@ -61,42 +62,78 @@@@ class Bsd {
d91 1
a91 1
@@@@ -133,6 +170,7 @@@@ class Bsd {
d99 1
a99 1
@@@@ -146,6 +184,7 @@@@ class Bsd {
d107 1
a107 1
@@@@ -155,17 +194,21 @@@@ class Bsd {
d129 1
a129 1
@@@@ -175,6 +218,7 @@@@ class Bsd {
d137 1
a137 1
@@@@ -184,6 +228,7 @@@@ class Bsd {
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.hpp.orig	Mon Apr 16 08:42:36 2007
+++ hotspot/src/os/bsd/vm/os_bsd.hpp	Mon Apr 16 08:42:39 2007
a144 47
@@@@ -250,7 +295,7 @@@@ class Bsd {
       int status = pthread_mutex_unlock(_mutex);
       assert_status(status == 0, status, "mutex_unlock");
     }
-    int timedwait(timespec* abstime) {
+    int timedwait(struct timespec* abstime) {
       verify();
       ++_nParked ; 
       int status = safe_cond_timedwait(_cond, _mutex, abstime);
@@@@ -264,12 +309,11 @@@@ class Bsd {
          pthread_cond_init (_cond, NULL) ; 
       }
       assert_status(status == 0 || status == EINTR || 
-		    status == ETIME || status == ETIMEDOUT, 
-		    status, "cond_timedwait");
+		    status == ETIMEDOUT, status, "cond_timedwait");
       return status;
     }
     int timedwait(jlong millis) {
-      timespec abst;
+      struct timespec abst;
       Event::compute_abstime(&abst, millis);
       return timedwait(&abst);
     }
@@@@ -278,11 +322,6 @@@@ class Bsd {
       ++_nParked ; 
       int status = pthread_cond_wait(_cond, _mutex);
       --_nParked ; 
-      // for some reason, under 2.7 lwp_cond_wait() may return ETIME ...
-      // Treat this the same as if the wait was interrupted
-      if(status == ETIME) {
-	status = EINTR;
-      }
       assert_status(status == 0 || status == EINTR, status, "cond_wait");
       return status;
     }
@@@@ -352,8 +391,9 @@@@ class Bsd {
      _count = 0;
     }
 
+// XXXBSD TODO: sync with 1.5 version
     // utility to compute the abstime argument to timedwait:
-    static struct timespec* compute_abstime(timespec* abstime, jlong millis) {
+    static struct timespec* compute_abstime(struct timespec* abstime, jlong millis) {
       // millis is the relative timeout time
       // abstime will be the absolute timeout time
       if (millis < 0)  millis = 0;
@


1.1.1.1
log
@Initial import of jdk 1.7 (a.k.a. OpenJDK 7) work in progress. So far Sun
has released the hotspot portion of 1.7 under GPLv2. j2se and deploy
(plugin & webstart) will come later. No packages yet since j2se is copied
in from 1.5.

Note: hotspot for BSD in previous versions of the jdk were based on a
mixture of Solaris code and Linux code (for amd64). In this version I have
selected Linux as the base and only ported of small parts of the Solaris
code as needed. Using Linux code as the base has significantly reduced the
code divergence for BSD support and should make maintaining the port
easier.

okay ian@@, go for it espie@@
@
text
@@
