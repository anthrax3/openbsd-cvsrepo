head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2011.09.22.20.26.48;	author kurt;	state dead;
branches;
next	1.3;

1.3
date	2009.10.07.01.53.54;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.04.23.25.16;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.19.18.05.46;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-jdk_src_share_transport_socket_socketTransport_c,v 1.3 2009/10/07 01:53:54 kurt Exp $
--- jdk/src/share/transport/socket/socketTransport.c.orig	Thu Sep 17 03:52:30 2009
+++ jdk/src/share/transport/socket/socketTransport.c	Sat Sep 26 16:09:25 2009
@@@@ -65,6 +65,9 @@@@ static jdwpTransportEnv single_env = (jdwpTransportEnv
 #define HEADER_SIZE     11
 #define MAX_DATA_SIZE 1000
 
+static jint recv_fully(int, char *, int);
+static jint send_fully(int, char *, int);
+
 /*
  * Record the last error for this thread.
  */
@@@@ -155,7 +158,7 @@@@ handshake(int fd, jlong timeout) {
         }
         buf = b;
         buf += received;
-        n = dbgsysRecv(fd, buf, helloLen-received, 0);
+        n = recv_fully(fd, buf, helloLen-received);
         if (n == 0) {
             setLastError(0, "handshake failed - connection prematurally closed");
             return JDWPTRANSPORT_ERROR_IO_ERROR;
@@@@ -180,7 +183,7 @@@@ handshake(int fd, jlong timeout) {
         return JDWPTRANSPORT_ERROR_IO_ERROR;
     }
 
-    if (dbgsysSend(fd, (char*)hello, helloLen, 0) != helloLen) {
+    if (send_fully(fd, (char*)hello, helloLen) != helloLen) {
         RETURN_IO_ERROR("send failed during handshake");
     }
     return JDWPTRANSPORT_ERROR_NONE;
@@@@ -555,19 +558,19 @@@@ socketTransport_writePacket(jdwpTransportEnv* env, con
     /* Do one send for short packets, two for longer ones */
     if (data_len <= MAX_DATA_SIZE) {
         memcpy(header + HEADER_SIZE, data, data_len);
-        if (dbgsysSend(socketFD, (char *)&header, HEADER_SIZE + data_len, 0) !=
+        if (send_fully(socketFD, (char *)&header, HEADER_SIZE + data_len) != 
             HEADER_SIZE + data_len) {
             RETURN_IO_ERROR("send failed");
         }
     } else {
         memcpy(header + HEADER_SIZE, data, MAX_DATA_SIZE);
-        if (dbgsysSend(socketFD, (char *)&header, HEADER_SIZE + MAX_DATA_SIZE, 0) !=
+        if (send_fully(socketFD, (char *)&header, HEADER_SIZE + MAX_DATA_SIZE) != 
             HEADER_SIZE + MAX_DATA_SIZE) {
             RETURN_IO_ERROR("send failed");
         }
         /* Send the remaining data bytes right out of the data area. */
-        if (dbgsysSend(socketFD, (char *)data + MAX_DATA_SIZE,
-                       data_len - MAX_DATA_SIZE, 0) != data_len - MAX_DATA_SIZE) {
+        if (send_fully(socketFD, (char *)data + MAX_DATA_SIZE, 
+                       data_len - MAX_DATA_SIZE) != data_len - MAX_DATA_SIZE) {
             RETURN_IO_ERROR("send failed");
         }
     }
@@@@ -575,13 +578,33 @@@@ socketTransport_writePacket(jdwpTransportEnv* env, con
     return JDWPTRANSPORT_ERROR_NONE;
 }
 
-static jint
+jint
 recv_fully(int f, char *buf, int len)
 {
     int nbytes = 0;
     while (nbytes < len) {
         int res = dbgsysRecv(f, buf + nbytes, len - nbytes, 0);
         if (res < 0) {
+	    if (errno == EINTR)
+		continue;
+            return res;
+        } else if (res == 0) {
+            break; /* eof, return nbytes which is less than len */
+        }
+        nbytes += res;
+    }
+    return nbytes;
+}
+
+jint
+send_fully(int f, char *buf, int len)
+{
+    int nbytes = 0;
+    while (nbytes < len) {
+        int res = dbgsysSend(f, buf + nbytes, len - nbytes, 0);
+        if (res < 0) {
+	    if (errno == EINTR)
+		continue;
             return res;
         } else if (res == 0) {
             break; /* eof, return nbytes which is less than len */
@


1.3
log
@Update to early access build 72 plus the following:
- sync patches with upstream repo: OpenJDK/bds-port
- fix gtk look and feel issue caused by dlopen of non-matching major
- fix other dlopen's of non-matching majors
- change max memory utilization on i386 to correct build failures
@
text
@d1 1
a1 1
$OpenBSD: patch-jdk_src_share_transport_socket_socketTransport_c,v 1.2 2009/01/04 23:25:16 kurt Exp $
@


1.2
log
@Update to early access build 42:
- sync/regen patches
- use os_bsd_x86.cpp from OpenJDK bsd-java repository plus
  Greg Lewis's fixes posted to the bsd-port-dev list
- use Xiaobin Lu's datatype corrections from OpenJDK bug
  6787106 + additional datatype corrections from me.
- use Vladimir Kozlov's bug fix from OpenJDK bug 6782820
- remove obsolete IcedTea awt binary plugs and update binary
  plug distfile
- correctly define DEVTOOLS_PATH for bsd and verify + correct
  Defs-utils.gmk locations for bsd utilities
@
text
@d1 3
a3 3
$OpenBSD: patch-jdk_src_share_transport_socket_socketTransport_c,v 1.1 2008/03/19 18:05:46 kurt Exp $
--- jdk/src/share/transport/socket/socketTransport.c.orig	Thu Sep 11 03:44:51 2008
+++ jdk/src/share/transport/socket/socketTransport.c	Fri Sep 12 18:07:24 2008
d14 1
a14 1
@@@@ -154,7 +157,7 @@@@ handshake(int fd, jlong timeout) {
d18 2
a19 2
-        n = dbgsysRecv(fd, buf, (int)strlen(hello)-received, 0);
+        n = recv_fully(fd, buf, (int)strlen(hello)-received);
d24 1
a24 1
         }
d27 2
a28 2
-    if (dbgsysSend(fd, hello, (int)strlen(hello), 0) != (int)strlen(hello)) {
+    if (send_fully(fd, hello, (int)strlen(hello)) != (int)strlen(hello)) {
@


1.1
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD$
--- jdk/src/share/transport/socket/socketTransport.c.orig	Tue Oct 30 05:03:55 2007
+++ jdk/src/share/transport/socket/socketTransport.c	Wed Nov  7 19:18:45 2007
d14 1
a14 1
@@@@ -153,7 +156,7 @@@@ handshake(int fd, jlong timeout) {
d18 2
a19 2
-        n = dbgsysRecv(fd, buf, strlen(hello)-received, 0);
+	n = recv_fully(fd, buf, strlen(hello)-received);
d23 1
a23 1
@@@@ -179,7 +182,7 @@@@ handshake(int fd, jlong timeout) {
d27 2
a28 2
-    if (dbgsysSend(fd, hello, strlen(hello), 0) != (int)strlen(hello)) {
+    if (send_fully(fd, hello, strlen(hello)) != (int)strlen(hello)) {
d32 1
a32 1
@@@@ -554,19 +557,19 @@@@ socketTransport_writePacket(jdwpTransportEnv* env, con
d56 1
a56 1
@@@@ -574,13 +577,33 @@@@ socketTransport_writePacket(jdwpTransportEnv* env, con
@

