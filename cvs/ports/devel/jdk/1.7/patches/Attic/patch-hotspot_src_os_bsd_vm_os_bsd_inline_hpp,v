head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.10
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.8
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	kurt_20070508:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.09.22.20.26.47;	author kurt;	state dead;
branches;
next	1.3;

1.3
date	2009.06.10.19.01.09;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.19.18.05.43;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.08.17.06.19;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.08.17.06.19;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update devel/jdk/1.7 to b147 / non-beta
- Remove Early Access now that jdk 1.7 is final
- Use a patch set for all patches from upstream repository:
  http://hg.openjdk.java.net/bsd-port/bsd-port
- Set milestone and build number to fcs b00 to match Oracle.
- Update cacerts file.
- Install unlimited crypto policy.
- Add DIST_SUBDIR=jdk.
- Include patches from icedtea-web for applet hole from
  Landry Breuil <landry@@openbsd.org> via FreeBSD OpenJDK7 port
- Include fix for Oracle bug "7070134: Hotspot crashes with
  sigsegv from PorterStemmer":
  http://hg.openjdk.java.net/hsx/hotspot-comp/hotspot/rev/4e761e7e6e12
okay landry@@ jasper@@
@
text
@$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_inline_hpp,v 1.3 2009/06/10 19:01:09 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.inline.hpp.orig	Sat May 30 10:11:57 2009
+++ hotspot/src/os/bsd/vm/os_bsd.inline.hpp	Sat May 30 10:15:39 2009
@@@@ -61,7 +61,15 @@@@ inline bool os::uses_stack_guard_pages() {
 
 inline bool os::allocate_stack_guard_pages() {
   assert(uses_stack_guard_pages(), "sanity check");
+#if !defined(__FreeBSD__) || __FreeBSD__ < 5
+  // Since FreeBSD 4 uses malloc() for allocating the thread stack
+  // there is no need to do anything extra to allocate the guard pages
+  return false;
+#else
+  // FreeBSD 5+ uses mmap MAP_STACK for allocating the thread stacks.
+  // Must 'allocate' them or guard pages are ignored.
   return true;
+#endif
 }
 
 
@


1.3
log
@- binary plugs distfile no longer needed
- sync patches with OpenJDK7 bsd-port repository
- install a usable cacerts
- Remove Interruptible IO support
tested by ian@@ william@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_inline_hpp,v 1.2 2008/03/19 18:05:43 kurt Exp $
@


1.2
log
@- switch to GPLv2 w/CLASSPATH exception licensed openjdk7 code
- update to early access build 24
- Use GPLv2 licensed binary plugs from the IcedTea project and parts of
  IcedTea's icedtea-copy-plugs.patch & icedtea-graphics.patch.
  For more info see:
    http://icedtea.classpath.org/wiki/Main_Page
- Enable packages since we're fully GPLv2 based now, but still not
  hooked up to bulk builds just yet.
@
text
@d1 3
a3 3
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_inline_hpp,v 1.1.1.1 2007/05/08 17:06:19 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.inline.hpp.orig	Wed Nov  7 12:41:29 2007
+++ hotspot/src/os/bsd/vm/os_bsd.inline.hpp	Wed Nov  7 12:41:35 2007
a18 108
 
@@@@ -108,6 +116,107 @@@@ inline int os::closedir(DIR *dirp)
   assert(dirp != NULL, "just checking");
   return ::closedir(dirp);
 }
+
+//XXXBSD: ported from solaris version
+//////////////////////////////////////////////////////////////////////////////
+////////////////////////////////////////////////////////////////////////////////
+
+// macros for interruptible io and system calls and system call restarting 
+
+#define _INTERRUPTIBLE(_setup, _cmd, _result, _thread, _clear, _before, _after, _int_enable) \
+do { \
+  _setup; \
+  _before; \
+  OSThread* _osthread = _thread->osthread(); \
+  if (_int_enable && _thread->has_last_Java_frame()) { \
+    /* this is java interruptible io stuff */ \
+    if (os::is_interrupted(_thread, _clear))  { \
+      os::Bsd::bump_interrupted_before_count(); \
+      _result = OS_INTRPT; \
+    } else { \
+      /* _cmd always expands to an assignment to _result */ \
+      if ((_cmd) < 0 && errno == EINTR  \
+       && os::is_interrupted(_thread, _clear)) { \
+        os::Bsd::bump_interrupted_during_count(); \
+        _result = OS_INTRPT; \
+      } \
+    } \
+  } else { \
+    /* this is normal blocking io stuff */ \
+    _cmd; \
+  } \
+  _after; \
+} while(false)
+
+// Interruptible io support + restarting of interrupted system calls
+
+#ifndef ASSERT
+
+#define INTERRUPTIBLE(_cmd, _result, _clear) do { \
+  _INTERRUPTIBLE( JavaThread* _thread = (JavaThread*)ThreadLocalStorage::thread(),_result = _cmd, _result, _thread, _clear, , , UseVMInterruptibleIO); \
+} while((_result == OS_ERR) && (errno == EINTR))
+
+#else 
+
+// This adds an assertion that it is only called from thread_in_native
+// The call overhead is skipped for performance in product mode
+#define INTERRUPTIBLE(_cmd, _result, _clear) do { \
+  _INTERRUPTIBLE(JavaThread* _thread = os::Bsd::setup_interruptible_native(), _result = _cmd, _result, _thread, _clear, , os::Bsd::cleanup_interruptible_native(_thread), UseVMInterruptibleIO ); \
+} while((_result == OS_ERR) && (errno == EINTR))
+
+#endif
+
+// Used for calls from _thread_in_vm, not from _thread_in_native
+#define INTERRUPTIBLE_VM(_cmd, _result, _clear) do { \
+  _INTERRUPTIBLE(JavaThread* _thread = os::Bsd::setup_interruptible(), _result = _cmd, _result, _thread, _clear, , os::Bsd::cleanup_interruptible(_thread), UseVMInterruptibleIO ); \
+} while((_result == OS_ERR) && (errno == EINTR))
+
+/* Use NORESTART when the system call cannot return EINTR, when something other
+   than a system call is being invoked, or when the caller must do EINTR 
+   handling. */
+
+#ifndef ASSERT
+
+#define INTERRUPTIBLE_NORESTART(_cmd, _result, _clear) \
+  _INTERRUPTIBLE( JavaThread* _thread = (JavaThread*)ThreadLocalStorage::thread(),_result = _cmd, _result, _thread, _clear, , , UseVMInterruptibleIO)
+
+#else
+
+// This adds an assertion that it is only called from thread_in_native
+// The call overhead is skipped for performance in product mode
+#define INTERRUPTIBLE_NORESTART(_cmd, _result, _clear) \
+  _INTERRUPTIBLE(JavaThread* _thread = os::Bsd::setup_interruptible_native(), _result = _cmd, _result, _thread, _clear, , os::Bsd::cleanup_interruptible_native(_thread), UseVMInterruptibleIO )
+
+#endif
+
+// Don't attend to UseVMInterruptibleIO. Always allow interruption.
+// Also assumes that it is called from the _thread_blocked state.
+// Used by os_sleep().
+
+#define INTERRUPTIBLE_NORESTART_VM_ALWAYS(_cmd, _result, _thread, _clear) \
+  _INTERRUPTIBLE(os::Bsd::setup_interruptible_already_blocked(_thread), _result = _cmd, _result, _thread, _clear, , , true )
+
+#define INTERRUPTIBLE_RETURN_INT(_cmd, _clear) do { \
+  int _result; \
+  do { \
+    INTERRUPTIBLE(_cmd, _result, _clear); \
+  } while((_result == OS_ERR) && (errno == EINTR)); \
+  return _result; \
+} while(false)
+
+#define INTERRUPTIBLE_RETURN_INT_VM(_cmd, _clear) do { \
+  int _result; \
+  do { \
+    INTERRUPTIBLE_VM(_cmd, _result, _clear); \
+  } while((_result == OS_ERR) && (errno == EINTR)); \
+  return _result; \
+} while(false)
+
+#define INTERRUPTIBLE_RETURN_INT_NORESTART(_cmd, _clear) do { \
+  int _result; \
+  INTERRUPTIBLE_NORESTART(_cmd, _result, _clear); \
+  return _result; \
+} while(false)
 
 // macros for restartable system calls
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.inline.hpp.orig	Mon Apr 16 08:42:36 2007
+++ hotspot/src/os/bsd/vm/os_bsd.inline.hpp	Mon Apr 16 08:42:39 2007
@@@@ -64,7 +64,15 @@@@ inline bool os::uses_stack_guard_pages() {
d20 1
a20 1
@@@@ -111,6 +119,107 @@@@ inline int os::closedir(DIR *dirp)
@


1.1.1.1
log
@Initial import of jdk 1.7 (a.k.a. OpenJDK 7) work in progress. So far Sun
has released the hotspot portion of 1.7 under GPLv2. j2se and deploy
(plugin & webstart) will come later. No packages yet since j2se is copied
in from 1.5.

Note: hotspot for BSD in previous versions of the jdk were based on a
mixture of Solaris code and Linux code (for amd64). In this version I have
selected Linux as the base and only ported of small parts of the Solaris
code as needed. Using Linux code as the base has significantly reduced the
code divergence for BSD support and should make maintaining the port
easier.

okay ian@@, go for it espie@@
@
text
@@
