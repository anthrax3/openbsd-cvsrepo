head	1.3;
access;
symbols
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.8
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.6
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2009.03.18.01.45.38;	author kurt;	state dead;
branches;
next	1.2;

1.2
date	2007.07.18.14.19.27;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.03.17.27.54;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove 1.3 and 1.4 as per plan made last June
@
text
@$OpenBSD: patch-j2sdk1_3_1_src_share_javavm_runtime_jni_c,v 1.2 2007/07/18 14:19:27 kurt Exp $
--- j2sdk1.3.1/src/share/javavm/runtime/jni.c.orig	Sun May  6 08:18:43 2001
+++ j2sdk1.3.1/src/share/javavm/runtime/jni.c	Wed Jul 18 09:36:14 2007
@@@@ -570,20 +570,17 @@@@ jni_FindMethodBlock(JNIEnv *env, jclass cls, const cha
 
 typedef char*
 (*JNI_PushArguments_t)(JNIEnv *env, char *terse_signature,
-                       JavaFrame *current_frame, void *args);
+                       JavaFrame *current_frame, void *orig_args);
 
 static char*
 jni_PushArgumentsVararg(JNIEnv *env, char *terse_signature,
-			JavaFrame *current_frame, void *a)
+			JavaFrame *current_frame, void *orig_args)
 {
     char *p = terse_signature;
     jvalue tdub;
     va_list args;
 
-    /* Assignment to va_list does not work on certain platforms:
-     * args = *(va_list *)a;
-     */
-    memcpy(&args, a, sizeof(va_list));
+    va_copy(args, *(va_list *)orig_args);
 
     while (1) {
         switch (*p++) {
@@@@ -592,7 +589,7 @@@@ jni_PushArgumentsVararg(JNIEnv *env, char *terse_signa
 	case TERSE_SIG_BYTE:
 	case TERSE_SIG_CHAR:
 	case TERSE_SIG_INT:
-            (current_frame->optop++)->i = va_arg(args, long);
+            (current_frame->optop++)->i = va_arg(args, int);
             continue;
 	case TERSE_SIG_FLOAT:
 	    (current_frame->optop++)->f = (float)va_arg(args, double);
@@@@ -621,49 +618,45 @@@@ jni_PushArgumentsVararg(JNIEnv *env, char *terse_signa
 
 static char*
 jni_PushArgumentsArray(JNIEnv *env, char *terse_signature,
-                       JavaFrame *current_frame, void *a)
+                       JavaFrame *current_frame, void *orig_args)
 {
     char *p = terse_signature;
     jvalue tdub;
-    jvalue *args = *(jvalue **)a;
+    va_list args;
 
+    va_copy(args, *(va_list *)orig_args);
+
     /*CONSTCOND*/
     while (1) {
         switch (*p++) {
 	case TERSE_SIG_BOOLEAN:
-            (current_frame->optop++)->i = (*args++).z;
-            continue;
 	case TERSE_SIG_SHORT:
-            (current_frame->optop++)->i = (*args++).s;
-            continue;
 	case TERSE_SIG_BYTE:
-            (current_frame->optop++)->i = (*args++).b;
-            continue;
 	case TERSE_SIG_CHAR:
-            (current_frame->optop++)->i = (*args++).c;
-            continue;
 	case TERSE_SIG_INT:
-            (current_frame->optop++)->i = (*args++).i;
+            (current_frame->optop++)->i = va_arg(args, int);
             continue;
 	case TERSE_SIG_FLOAT:
-	    (current_frame->optop++)->f = (*args++).f;
+	    (current_frame->optop++)->f = (float)va_arg(args,double);
             continue;
 	case TERSE_SIG_OBJECT: {
-	    jobject obj = (*args++).l;
+	    jobject obj = va_arg(args,jobject);
 	    (current_frame->optop++)->h = (JHandle *)DeRef(env, obj);
 	    continue;
 	}
 	case TERSE_SIG_LONG:
-            SET_INT64(tdub, current_frame->optop, (*args++).j);
+            SET_INT64(tdub, current_frame->optop, va_arg(args,int64_t));
             current_frame->optop += 2;
             continue;
 	case TERSE_SIG_DOUBLE:
-            SET_DOUBLE(tdub, current_frame->optop, (*args++).d);
+            SET_DOUBLE(tdub, current_frame->optop, va_arg(args,double));
             current_frame->optop += 2;
             continue;
         case TERSE_SIG_ENDFUNC:
+            va_end(args);
 	    return p;
 	default:
+            va_end(args);
             sysAssert(FALSE);
 	    return NULL;
         }
@


1.2
log
@regen patches
@
text
@d1 1
a1 1
$OpenBSD: patch-j2sdk1_3_1_src_share_javavm_runtime_jni_c,v 1.1 2005/06/03 17:27:54 kurt Exp $
@


1.1
log
@- Add support for powerpc. With some tips from tedu@@ and drahn@@, thanks!
- Change bootstrap method. No longer use 1.3-linux port to bootstrap.
  Use class files from a linux binary jdk and extra source and header
  files from my website.
- Remove plugin support. plugin has security issues and doesn't work
  with recent mozilla/firefox versions.
- Patches for arm native-threads are included but not enabled yet.
  I prefer to have all arches use green-threads to avoid arch specific
  pkg files. Also noticed some regressions with native-threads on i386.
  arm support from Dale Rahn (drahn@@).
- quiet pre-patch phase

okay ian@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
+++ j2sdk1.3.1/src/share/javavm/runtime/jni.c	Mon May 23 23:50:35 2005
@@@@ -570,20 +570,17 @@@@ jni_FindMethodBlock(JNIEnv *env, jclass 
d28 1
a28 1
@@@@ -592,7 +589,7 @@@@ jni_PushArgumentsVararg(JNIEnv *env, cha
d37 1
a37 1
@@@@ -621,49 +618,45 @@@@ jni_PushArgumentsVararg(JNIEnv *env, cha
@

