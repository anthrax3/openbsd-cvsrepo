head	1.15;
access;
symbols
	OPENBSD_5_0:1.14.0.10
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.4
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.2
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.2
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	kurt_20050525:1.1.1.1
	kurt:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2011.10.07.13.54.31;	author kurt;	state dead;
branches;
next	1.14;

1.14
date	2009.03.25.22.11.16;	author kurt;	state Exp;
branches;
next	1.13;

1.13
date	2008.10.22.16.02.24;	author kurt;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.17.03.21.25;	author kurt;	state Exp;
branches;
next	1.11;

1.11
date	2007.06.27.21.51.09;	author kurt;	state dead;
branches;
next	1.10;

1.10
date	2007.04.08.12.43.06;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2007.02.01.21.00.52;	author kurt;	state Exp;
branches;
next	1.8;

1.8
date	2007.01.23.14.14.37;	author kurt;	state dead;
branches;
next	1.7;

1.7
date	2006.09.26.17.48.19;	author kurt;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.11.00.45.42;	author kurt;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.02.22.22.52.44;	author kurt;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.11.30.02.21.32;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.22.14.43.05;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.09.04.38.01;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.25.17.27.53;	author kurt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.05.25.17.27.53;	author kurt;	state Exp;
branches;
next	;

1.5.2.1
date	2007.01.31.14.52.31;	author kurt;	state dead;
branches;
next	1.5.2.2;

1.5.2.2
date	2007.02.01.21.06.01;	author kurt;	state Exp;
branches;
next	;

1.6.2.1
date	2006.11.04.09.23.01;	author sturm;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2007.02.12.22.21.50;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.15
log
@- remove devel/jdk/1.5 and lang/kaffe
- adjust java.port.mk for their removal
- bump affected packages
okay jasper@@
@
text
@$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.14 2009/03/25 22:11:16 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Fri Mar 20 13:00:52 2009
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Fri Mar 20 13:02:03 2009
@@@@ -414,10 +414,10 @@@@ void os::Bsd::initialize_system_info() {
 #ifdef __OpenBSD__
   {
 	// limit _physical_memory memory view on OpenBSD since
-	// datasize maximum limits us anyway.
+	// datasize limits us anyway.
 	struct rlimit limits;
 	getrlimit(RLIMIT_DATA, &limits);
-	_physical_memory = MIN2(_physical_memory, (julong)limits.rlim_max);
+	_physical_memory = MIN2(_physical_memory, (julong)limits.rlim_cur);
   }
 #endif
 }
@


1.14
log
@- update to patchset 9 1.5.0 u16
- remove patches included in patchset 9
- fix native_bootstrap BUILD_DEPENDS
- chase plist changes
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.13 2008/10/22 16:02:24 kurt Exp $
@


1.13
log
@Limit the jdk's view of physical memory to rlimit_cur instead of
rlimit_max. This makes the jdk behave better on amd64.

okay naddy@@ ian@@
@
text
@d1 4
a4 28
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.12 2008/03/17 03:21:25 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Tue Sep 16 17:36:23 2008
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Tue Sep 16 17:41:40 2008
@@@@ -381,7 +381,11 @@@@ void os::Bsd::initialize_system_info() {
   int mib[2];
   size_t len;
   int cpu_val;
+#ifdef HW_USERMEM64
+  int64_t mem_val;
+#else
   u_long mem_val;
+#endif
 
   /* get processors count via hw.ncpus sysctl */
   mib[0] = CTL_HW;
@@@@ -396,7 +400,11 @@@@ void os::Bsd::initialize_system_info() {
    * instead of hw.physmem because we need size of allocatable memory
    */
   mib[0] = CTL_HW;
+#ifdef HW_USERMEM64
+  mib[1] = HW_USERMEM64;
+#else
   mib[1] = HW_USERMEM;
+#endif
   len = sizeof(mem_val);
   if (sysctl(mib, 2, &mem_val, &len, NULL, 0) != -1)
 	_physical_memory = mem_val;
@@@@ -406,10 +414,10 @@@@ void os::Bsd::initialize_system_info() {
@


1.12
log
@- use HW_{USER|PHYS}MEM64. okay naddy@@
- on amd64 only do implicit null optimizations on offsets landing in the
first page of memory.
@
text
@d1 3
a3 3
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Tue Feb 26 13:08:40 2008
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Tue Feb 26 13:11:24 2008
d28 13
@


1.11
log
@- update port to be based of Sun's 1.5.0 Update 11 src which includes many
bug fixes since the initial release of the 1.5 jdk. I'm sure some of the
fixes are security related but I wasn't able to find a concise list. All
the bugs fixes listed here from update 11 and lower should be fixed by
this update: http://java.sun.com/j2se/1.5.0/ReleaseNotes.html#150_11
- NOTE: License change: used to be SCSL, now is JRL (Java Research
License). Still no packages with this license but at least we get the bug
fixes and security fixes now: https://tiger.dev.java.net/
- enable version scripts on libjvm which fixes a symbol conflict with
recent xulrunner which is used by eclipse's internal swt-browser.
@
text
@d1 11
a11 29
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.10 2007/04/08 12:43:06 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Fri Apr  6 09:08:49 2007
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Fri Apr  6 10:37:25 2007
@@@@ -293,11 +293,7 @@@@ julong os::physical_memory() {
 
 julong os::allocatable_physical_memory(julong size) {
 #ifdef __OpenBSD__
-#ifdef _LP64
-   julong reasonable_size = (julong)650*M - 2 * LargePageSizeInBytes;
-#else
-   julong reasonable_size = (julong)900*M - 2 * LargePageSizeInBytes;
-#endif
+   julong reasonable_size = (julong)875*M - 2 * LargePageSizeInBytes;
    return MIN2(size, reasonable_size);
 #else
 #ifdef _LP64
@@@@ -356,6 +352,16 @@@@ void os::Bsd::initialize_system_info() {
 	_physical_memory = mem_val;
   else
 	_physical_memory = 256*1024*1024;	// fallback (XXXBSD?)
+
+#ifdef __OpenBSD__
+  {
+	// limit _physical_memory memory view on OpenBSD since
+	// datasize maximum limits us anyway.
+	struct rlimit limits;
+	getrlimit(RLIMIT_DATA, &limits);
+	_physical_memory = MIN2(_physical_memory, (julong)limits.rlim_max);
+  }
a12 6
 }
 
 int os::processor_count() {
@@@@ -451,7 +457,9 @@@@ void os::init_system_properties_values() {
 #define malloc(n) (char*)NEW_C_HEAP_ARRAY(char, (n))
 #define getenv(n) ::getenv(n)
d14 10
a23 2
+#ifndef DEFAULT_LD_LIBRARY_PATH
 #define DEFAULT_LD_LIBRARY_PATH "/usr/lib" /* See ld.so.1(1) */
d25 3
a27 3
 #define EXTENSIONS_DIR "/lib/ext"
 #define ENDORSED_DIR "/lib/endorsed"
 
@


1.10
log
@- fix the build for good on systems with >= 4G memory by limiting
the jdk's view of physical memory to datasize rlimit max
- remove and adjust old memory adjustments for OpenBSD
- shrink overhead on amd64 making more memory available for use
ok wilfried@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.9 2007/02/01 21:00:52 kurt Exp $
@


1.9
log
@- fix mistake that broke OOo build. the jdk needs to search ${PREFIX}/lib
by default.
- regen plist and move javaws man page to no-no_web PFRAG files where it
belongs.
@
text
@d1 34
a34 4
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Thu Feb  1 09:42:39 2007
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Thu Feb  1 09:42:44 2007
@@@@ -451,7 +451,9 @@@@ void os::init_system_properties_values()
@


1.8
log
@Update to patchset 4 which includes a security fix for CVE-2007-0243

Buffer overflow allows applets to gain privileges via a GIF image with a
block with a 0 width field, which triggers memory corruption and possible
execution of arbitrary code.

Also included in patchset 4 are corrections for building the jdk on amd64
systems with 4G+ memory and the inclusion of the mozilla headers needed to
build the plugin without an external dependency on the old mozilla suite.
@
text
@d1 4
a4 4
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.7 2006/09/26 17:48:19 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Mon Sep 25 22:47:23 2006
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Mon Sep 25 22:56:32 2006
@@@@ -447,7 +447,9 @@@@ void os::init_system_properties_values()
a13 32
@@@@ -1968,16 +1970,23 @@@@ static int os_nanosleep(jlong *millis) {
 
 static int os_sleep(jlong millis, bool interruptible) {
   int res;
-  if (!interruptible) {
-    do {
-	res = os_nanosleep(&millis);
-    } while ((res == OS_ERR) && (errno == EINTR) && (millis > 0));
-  } else {
-    INTERRUPTIBLE_NORESTART_VM(os_nanosleep(&millis), res, os::Bsd::clear_interrupted);
+
+  while (millis > 0) {
+    if (!interruptible) {
+      res = os_nanosleep(&millis);
+    } else {
+      INTERRUPTIBLE_NORESTART_VM(os_nanosleep(&millis), res, os::Bsd::clear_interrupted);
+    }
+    // INTERRUPTIBLE_NORESTART_VM returns res == OS_INTRPT for thread.Interrupt
+
+    if((res == OS_ERR) && (errno == EINTR)) {
+      if(millis <= 0)
+	return OS_OK;
+    } else
+      return res;
   }
-  // INTERRUPTIBLE_NORESTART_VM returns res == OS_INTRPT for thread.Interrupt
 
-  return res;
+  return OS_OK;
 }
 
 int os::Bsd::naked_sleep() {
@


1.7
log
@- Fix jdk build when timezone is GMT+0. Reported by Schöberle Dániel
<Schoeberle.Daniel at aamtech.hu>
- Fix short Thread.sleep() issue. Reported by Mr David SH Rosenthal
<dshr at stanford.edu>
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.6 2006/04/11 00:45:42 kurt Exp $
@


1.6
log
@Update to patchset 3. Patchset 3 includes several bug fixes that improve
compatiabily and stability which came from work sponsored by the FreeBSD
Foundation.
@
text
@d1 3
a3 3
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Sat Apr  8 11:31:03 2006
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Sat Apr  8 11:31:33 2006
d14 32
@


1.6.2.1
log
@MFC:
- Fix jdk build when timezone is GMT+0. Reported by Schvberle Daniel
<Schoeberle.Daniel at aamtech.hu>
- Fix short Thread.sleep() issue. Reported by Mr David SH Rosenthal
<dshr at stanford.edu>
@
text
@d1 3
a3 3
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.7 2006/09/26 17:48:19 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Mon Sep 25 22:47:23 2006
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Mon Sep 25 22:56:32 2006
a13 32
@@@@ -1968,16 +1970,23 @@@@ static int os_nanosleep(jlong *millis) {
 
 static int os_sleep(jlong millis, bool interruptible) {
   int res;
-  if (!interruptible) {
-    do {
-	res = os_nanosleep(&millis);
-    } while ((res == OS_ERR) && (errno == EINTR) && (millis > 0));
-  } else {
-    INTERRUPTIBLE_NORESTART_VM(os_nanosleep(&millis), res, os::Bsd::clear_interrupted);
+
+  while (millis > 0) {
+    if (!interruptible) {
+      res = os_nanosleep(&millis);
+    } else {
+      INTERRUPTIBLE_NORESTART_VM(os_nanosleep(&millis), res, os::Bsd::clear_interrupted);
+    }
+    // INTERRUPTIBLE_NORESTART_VM returns res == OS_INTRPT for thread.Interrupt
+
+    if((res == OS_ERR) && (errno == EINTR)) {
+      if(millis <= 0)
+	return OS_OK;
+    } else
+      return res;
   }
-  // INTERRUPTIBLE_NORESTART_VM returns res == OS_INTRPT for thread.Interrupt
 
-  return res;
+  return OS_OK;
 }
 
 int os::Bsd::naked_sleep() {
@


1.6.2.2
log
@MFC:
Update to patchset 4 which includes a security fix for CVE-2007-0243

Buffer overflow allows applets to gain privileges via a GIF image with a
block with a 0 width field, which triggers memory corruption and possible
execution of arbitrary code.

Also included in patchset 4 are corrections for building the jdk on amd64
systems with 4G+ memory and the inclusion of the mozilla headers needed to
build the plugin without an external dependency on the old mozilla suite.

ok kurt
@
text
@d1 4
a4 4
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.6.2.1 2006/11/04 09:23:01 sturm Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Mon Feb 12 23:02:01 2007
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Mon Feb 12 23:02:23 2007
@@@@ -451,7 +451,9 @@@@ void os::init_system_properties_values()
d14 32
@


1.5
log
@stablity fix for os_sleep. patchset 2 introduced a buggy version of
os_sleep based on nanosleep(). revert to patchset 1 version based on
poll(). fixes issues with large sleep values. okay pvalchev@@
@
text
@d1 4
a4 30
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.4 2005/11/30 02:21:32 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Thu Feb 16 11:07:32 2006
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Thu Feb 16 11:11:42 2006
@@@@ -290,8 +290,15 @@@@ julong os::allocatable_physical_memory(j
      // is not known at this point.  Alignments will 
      // be at most to LargePageSizeInBytes.  Protect 
      // allocations from alignments up to illegal
-     // values. If at this point 2G is illegal.
+     // values.
+// XXXBSD: This really should be using rlimit to get the actual
+// value and perhaps automaticlly increasing the current rlimit
+// up to the min(rlimit max, size)
+#ifdef __OpenBSD__
+     julong reasonable_size = (julong)1*G - 2 * LargePageSizeInBytes;
+#else
      julong reasonable_size = (julong)2*G - 2 * LargePageSizeInBytes;
+#endif
      result =  MIN2(size, reasonable_size);
    }
    return result;
@@@@ -313,7 +320,7 @@@@ static volatile int max_hrtime_lock = LO
 void os::Bsd::initialize_system_info() {
   int mib[2];
   size_t len;
-  int val;
+  u_int val;
 
   /* get processors count via hw.ncpus sysctl */
   mib[0] = CTL_HW;
@@@@ -429,7 +436,9 @@@@ void os::init_system_properties_values()
a13 59
@@@@ -1909,22 +1918,50 @@@@ char* os::reserve_memory_special(size_t 
 }
 
 static int os_sleep(jlong millis, bool interruptible) {
-  struct timespec t;
+  const jlong limit = INT_MAX;
+  jlong prevtime;
   int res;
   
-  t.tv_sec = millis / 1000L;
-  t.tv_nsec = (millis % 1000L) * 1000000;
+  while (millis > limit) {
+    if ((res = os_sleep(limit, interruptible)) != OS_OK)
+      return res;
+    millis -= limit;
+  } 
+
+  // Restart interrupted polls with new parameters until the proper delay 
+  // has been completed.
+
+  prevtime = getTimeMillis();
+
+  while (millis > 0) {
+    jlong newtime;
+
   if (!interruptible) {
-    do {
-      res = nanosleep(&t, &t);
-    } while ((res == OS_ERR) && (errno == EINTR) && (t.tv_sec != 0 || t.tv_nsec != 0));
+    // Following assert fails for os::yield_all:
+    // assert(!thread->is_Java_thread(), "must not be java thread");
+    res = poll(NULL, 0, millis);
   } else {
     assert(Thread::current()->is_Java_thread(), "must be java thread");
-    INTERRUPTIBLE_NORESTART_VM(nanosleep(&t, &t), res, os::Bsd::clear_interrupted);
+    INTERRUPTIBLE_NORESTART_VM(poll(NULL, 0, millis), res, 
+      os::Bsd::clear_interrupted);
   }
   // INTERRUPTIBLE_NORESTART_VM returns res == OS_INTRPT for thread.Interrupt
 
-  return res;
+    if((res == OS_ERR) && (errno == EINTR)) {
+      newtime = getTimeMillis();
+      assert(newtime >= prevtime, "time moving backwards");
+    /* Doing prevtime and newtime in microseconds doesn't help precision,
+       and trying to round up to avoid lost milliseconds can result in a
+       too-short delay. */
+      millis -= newtime - prevtime;
+      if(millis <= 0)
+	return OS_OK;
+      prevtime = newtime;
+    } else
+      return res;
+  }
+
+  return OS_OK;
 }
 
 int os::Bsd::naked_sleep() {
@


1.5.2.1
log
@Update to patchset 4 which includes a security fix for CVE-2007-0243

Buffer overflow allows applets to gain privileges via a GIF image with a
block with a 0 width field, which triggers memory corruption and possible
execution of arbitrary code.

Also included in patchset 4 are corrections for building the jdk on amd64
systems with 4G+ memory and the inclusion of the mozilla headers needed to
build the plugin without an external dependency on the old mozilla suite.

okay nikolay@@
@
text
@d1 1
a1 1
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.5 2006/02/22 22:52:44 kurt Exp $
@


1.5.2.2
log
@fix two mistakes with last update:
- the jdk needs to search for shared libs in ${PREFIX}/lib too
- WANTLIB += z

okay sturm@@
@
text
@d1 30
a30 4
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Thu Feb  1 09:42:39 2007
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Thu Feb  1 09:42:44 2007
@@@@ -451,7 +451,9 @@@@ void os::init_system_properties_values()
d40 59
@


1.4
log
@- fix build for systems with > 2G physical memory (signed int value was
assigned to uint64).
- set some fall-back max-memory values to reasonable values for OpenBSD.
Problem reported and update tested by Douglas Santos.
@
text
@d1 3
a3 3
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.3 2005/11/22 14:43:05 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Tue Nov 22 10:16:29 2005
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Tue Nov 29 09:47:23 2005
d40 59
@


1.3
log
@- update to patchset 2. mostly removing patches now included in patchset.
- link awt_robot with -pthread
- disable a runtime Motif version check that incorrectly thought we were
using Motif 1.2 based on Xm major version. problem reported by Laurence
Tratt
- plugin and webstart comming later
@
text
@d1 30
a30 4
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Wed Nov 16 09:11:20 2005
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Wed Nov 16 09:11:48 2005
@@@@ -429,7 +429,9 @@@@ void os::init_system_properties_values()
@


1.2
log
@Add PREFIX/lib to the default java.library.path. Noticed, testing and
okay by ian@@
@
text
@d1 4
a4 54
$OpenBSD: patch-hotspot_src_os_bsd_vm_os_bsd_cpp,v 1.1.1.1 2005/05/25 17:27:53 kurt Exp $
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Mon Aug  8 16:44:36 2005
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Mon Aug  8 16:58:29 2005
@@@@ -35,7 +35,7 @@@@
 # include <semaphore.h>
 # include <unistd.h>
 
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
 # include <pthread_np.h>
 #endif
 #if defined(__NetBSD__)
@@@@ -165,6 +165,12 @@@@ static inline size_t adjust_stack_size(a
 #endif
 
 address os::current_stack_base() {
+#ifdef __OpenBSD__
+  stack_t ss;
+  if (pthread_stackseg_np(pthread_self(), &ss))
+    goto err;
+  return (address) ss.ss_sp;
+#else
   uintptr_t addr = NULL;
   pthread_attr_t attr;
   void *mystack = NULL;
@@@@ -183,6 +189,7 @@@@ address os::current_stack_base() {
 
     return (address) addr;
   }
+#endif
 
 err:
   fatal("Unable to get current thread stack base pointer");
@@@@ -190,6 +197,11 @@@@ err:
 }
 
 size_t os::current_stack_size() {
+#ifdef __OpenBSD__
+  stack_t ss;
+  if (!pthread_stackseg_np(pthread_self(), &ss))
+    return ss.ss_size;
+#else
   pthread_attr_t attr;
   size_t sizep = 0;
 
@@@@ -200,6 +212,7 @@@@ size_t os::current_stack_size() {
     pthread_attr_destroy(&attr);
     return sizep;
   }
+#endif
 
   fatal("Unable to get current thread stack base size");
 }
@@@@ -416,7 +429,9 @@@@ void os::init_system_properties_values()
a13 77
@@@@ -844,9 +859,12 @@@@ err:
   // Set the default thread priority otherwise use NormalPriority
 
   if ( UseThreadPriorities ) {
+     //pthread_setprio is not supported yet on OpenBSD
+#ifndef __OpenBSD__
      pthread_setprio(tid, (DefaultThreadPriority == -1) ? 
                                            java_to_os_priority[NormPriority] : 
                                            DefaultThreadPriority);
+#endif
   }
 
   // Initial thread state is INITIALIZED, not SUSPENDED
@@@@ -1438,7 +1456,7 @@@@ bool _print_ascii_file(const char* filen
 void os::print_os_info(outputStream* st) {
   st->print("OS:");
 
-  st->print_cr("FreeBSD");
+  st->print_cr("OpenBSD");
 
   // kernel
   st->print("uname:");
@@@@ -1895,10 +1913,10 @@@@ static int os_sleep(jlong millis, bool i
   if (!interruptible) {
     do {
       res = nanosleep(&t, &t);
-    } while ((res == OS_ERR) && (errno == EINTR));
+    } while ((res == OS_ERR) && (errno == EINTR) && (t.tv_sec != 0 || t.tv_nsec != 0));
   } else {
     assert(Thread::current()->is_Java_thread(), "must be java thread");
-    INTERRUPTIBLE_NORESTART(nanosleep(&t, &t), res, os::Bsd::clear_interrupted);
+    INTERRUPTIBLE_NORESTART_VM(nanosleep(&t, &t), res, os::Bsd::clear_interrupted);
   }
   // INTERRUPTIBLE_NORESTART_VM returns res == OS_INTRPT for thread.Interrupt
 
@@@@ -2078,9 +2096,14 @@@@ int os::java_to_os_priority[MaxPriority 
 
 OSReturn os::set_native_priority(Thread* thread, int newpri) {
   assert(newpri >= MinimumPriority && newpri <= MaximumPriority, "bad priority mapping");
+#ifdef __OpenBSD__
+  // OpenBSD doesn't support pthread_setprio yet
+  return OS_OK;
+#else
   if ( !UseThreadPriorities ) return OS_OK;
   int status = pthread_setprio(thread->osthread()->thread_id(), newpri);
   return (status == 0) ? OS_OK : OS_ERR;
+#endif
 }
 
 
@@@@ -2485,6 +2508,18 @@@@ void os::Bsd::install_signal_handlers() 
 
 void report_error(const char* file_name, int line_no, const char* title, const char* format, ...);
 
+#ifdef __OpenBSD__
+const char * signames[] = {
+  "SIG0",
+  "SIGHUP", "SIGINT", "SIGQUIT", "SIGILL", "SIGTRAP",
+  "SIGABRT", "SIGEMT", "SIGFPE", "SIGKILL", "SIGBUS",
+  "SIGSEGV", "SIGSYS", "SIGPIPE", "SIGALRM", "SIGTERM",
+  "SIGURG", "SIGSTOP", "SIGTSP", "SIGCONT", "SIGCHLD",
+  "SIGTTIN", "SIGTTOU", "SIGIO", "SIGXCPU", "SIGXFSZ",
+  "SIGVTALRM", "SIGPROF", "SIGWINCH", "SIGINFO", "SIGUSR1",
+  "SIGUSR2"
+};
+#else
 // XXXBSD: fix names (order)
 const char * signames[] = {
   "SIG0",
@@@@ -2497,6 +2532,7 @@@@ const char * signames[] = {
   "SIGXFSZ", "SIGWAITING", "SIGLWP", "SIGFREEZE", "SIGTHAW",
   "SIGCANCEL", "SIGLOST"
 };
+#endif
 
 const char * os::exception_name(int exception_code, char* buf, int size) {
   if (0 < exception_code && exception_code <= SIGRTMAX) {
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- hotspot/src/os/bsd/vm/os_bsd.cpp.orig	Tue Feb 22 17:29:06 2005
+++ hotspot/src/os/bsd/vm/os_bsd.cpp	Tue Feb 22 17:32:45 2005
d54 11
a64 1
@@@@ -844,9 +857,12 @@@@ err:
d77 1
a77 1
@@@@ -1438,7 +1454,7 @@@@ bool _print_ascii_file(const char* filen
d86 1
a86 1
@@@@ -1895,10 +1911,10 @@@@ static int os_sleep(jlong millis, bool i
d99 1
a99 1
@@@@ -2078,9 +2094,14 @@@@ int os::java_to_os_priority[MaxPriority 
d114 1
a114 1
@@@@ -2485,6 +2506,18 @@@@ void os::Bsd::install_signal_handlers() 
d133 1
a133 1
@@@@ -2497,6 +2530,7 @@@@ const char * signames[] = {
@


1.1.1.1
log
@initial import of 1.5
@
text
@@
