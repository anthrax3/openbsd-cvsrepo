head	1.2;
access;
symbols
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.03.25.22.11.16;	author kurt;	state dead;
branches;
next	1.1;

1.1
date	2008.03.17.03.21.25;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to patchset 9 1.5.0 u16
- remove patches included in patchset 9
- fix native_bootstrap BUILD_DEPENDS
- chase plist changes
@
text
@$OpenBSD: patch-hotspot_src_os_cpu_bsd_amd64_vm_assembler_bsd_amd64_cpp,v 1.1 2008/03/17 03:21:25 kurt Exp $
--- hotspot/src/os_cpu/bsd_amd64/vm/assembler_bsd_amd64.cpp.orig	Sun Mar 16 09:34:53 2008
+++ hotspot/src/os_cpu/bsd_amd64/vm/assembler_bsd_amd64.cpp	Sun Mar 16 09:51:59 2008
@@@@ -54,9 +54,10 @@@@ void MacroAssembler::get_thread(Register thread)
    }
 }
 
-// NOTE: since the linux kernel resides at the low end of
-// user address space, no null pointer check is needed.
+// only do implicit null optimizations on offsets landing in the
+// first page of memory.
 bool MacroAssembler::needs_explicit_null_check(int offset)
 {
-  return offset < 0 || offset >= 0x100000;
+  bool offset_in_first_page =   0 <= offset  &&  offset < os::vm_page_size();
+  return !offset_in_first_page;
 }
@


1.1
log
@- use HW_{USER|PHYS}MEM64. okay naddy@@
- on amd64 only do implicit null optimizations on offsets landing in the
first page of memory.
@
text
@d1 1
a1 1
$OpenBSD$
@

