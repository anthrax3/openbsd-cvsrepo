head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.52
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.50
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.48
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.44
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.46
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.42
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.40
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.38
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.36
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.34
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.32
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	wcobb_20030512:1.1.1.1
	wcobb:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2005.03.15.01.57.03;	author db;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.15.21.42.23;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.12.07.25.32;	author wcobb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.12.07.25.32;	author wcobb;	state Exp;
branches;
next	;


desc
@@


1.3
log
@typo and wording fixes; approved by pval

ok mbalmer@@ "that diff was fun to read"
@
text
@Sfio manages I/O streams, much like the ANSI C Standard I/O library,
via a distinct interface that is more powerful, robust and efficient.

o Separate thread-safe I/O library.
o Correct sharing of file descriptors across streams and/or processes.
o An adaptive buffering algorithm enhances overall I/O performance.
o Efficient and customizable data formatting functions.
o I/O disciplines can be used to pre/post-process R/W data from/to streams.
o Streams can be stacked for recursive processing of nested streams.
o Streams can be pooled for automatic stream synchronization as I/O
  operations are switched from stream to stream.
o Support for zero-copy stream I/O.
o Support for reading lines and records of any length from any stream.
@


1.2
log
@remove WWW lines
@
text
@d6 1
a6 1
o An adaptive buffering algorithm enhaces overall I/O performance.
@


1.1
log
@Initial revision
@
text
@a13 2

WWW: ${HOMEPAGE}
@


1.1.1.1
log
@Import sfio-2002, a safe/fast I/O library.
@
text
@@
