head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.05.09.06.50.02;	author benoit;	state Exp;
branches;
next	1.2;
commitid	Y7CCSvTxUpdWl03u;

1.2
date	2014.11.19.21.59.31;	author benoit;	state Exp;
branches;
next	1.1;
commitid	vOqf1YaoQgcDKqOa;

1.1
date	2014.03.09.19.58.51;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to capstone-3.0.3.
@
text
@$OpenBSD: patch-arch_Mips_MipsInstPrinter_c,v 1.2 2014/11/19 21:59:31 benoit Exp $

The 'mips' symbol is special on MIPS platforms, so rename it to prevent a
conflict.

--- arch/Mips/MipsInstPrinter.c.orig	Fri May  8 11:06:59 2015
+++ arch/Mips/MipsInstPrinter.c	Sat May  9 08:34:16 2015
@@@@ -93,12 +93,12 @@@@ static void set_mem_access(MCInst *MI, bool status)
 		return;
 
 	if (status) {
-		MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].type = MIPS_OP_MEM;
-		MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].mem.base = MIPS_REG_INVALID;
-		MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].mem.disp = 0;
+		MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].type = MIPS_OP_MEM;
+		MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].mem.base = MIPS_REG_INVALID;
+		MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].mem.disp = 0;
 	} else {
 		// done, create the next operand slot
-		MI->flat_insn->detail->mips.op_count++;
+		MI->flat_insn->detail->mipsen.op_count++;
 	}
 }
 
@@@@ -195,11 +195,11 @@@@ static void printOperand(MCInst *MI, unsigned OpNo, SS
 		reg = Mips_map_register(reg);
 		if (MI->csh->detail) {
 			if (MI->csh->doing_mem) {
-				MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].mem.base = reg;
+				MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].mem.base = reg;
 			} else {
-				MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].type = MIPS_OP_REG;
-				MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].reg = reg;
-				MI->flat_insn->detail->mips.op_count++;
+				MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].type = MIPS_OP_REG;
+				MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].reg = reg;
+				MI->flat_insn->detail->mipsen.op_count++;
 			}
 		}
 	} else if (MCOperand_isImm(Op)) {
@@@@ -219,7 +219,7 @@@@ static void printOperand(MCInst *MI, unsigned OpNo, SS
 				}
 			}
 			if (MI->csh->detail)
-				MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].mem.disp = imm;
+				MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].mem.disp = imm;
 		} else {
 			if (imm >= 0) {
 				if (imm > HEX_THRESHOLD)
@@@@ -234,9 +234,9 @@@@ static void printOperand(MCInst *MI, unsigned OpNo, SS
 			}
 
 			if (MI->csh->detail) {
-				MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].type = MIPS_OP_IMM;
-				MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].imm = imm;
-				MI->flat_insn->detail->mips.op_count++;
+				MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].type = MIPS_OP_IMM;
+				MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].imm = imm;
+				MI->flat_insn->detail->mipsen.op_count++;
 			}
 		}
 	}
@@@@ -259,9 +259,9 @@@@ static void printUnsignedImm(MCInst *MI, int opNum, SS
 				SStream_concat(O, "-%u", (short int)-imm);
 		}
 		if (MI->csh->detail) {
-			MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].type = MIPS_OP_IMM;
-			MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].imm = (unsigned short int)imm;
-			MI->flat_insn->detail->mips.op_count++;
+			MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].type = MIPS_OP_IMM;
+			MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].imm = (unsigned short int)imm;
+			MI->flat_insn->detail->mipsen.op_count++;
 		}
 	} else
 		printOperand(MI, opNum, O);
@@@@ -277,9 +277,9 @@@@ static void printUnsignedImm8(MCInst *MI, int opNum, S
 		else
 			SStream_concat(O, "%u", imm);
 		if (MI->csh->detail) {
-			MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].type = MIPS_OP_IMM;
-			MI->flat_insn->detail->mips.operands[MI->flat_insn->detail->mips.op_count].imm = imm;
-			MI->flat_insn->detail->mips.op_count++;
+			MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].type = MIPS_OP_IMM;
+			MI->flat_insn->detail->mipsen.operands[MI->flat_insn->detail->mipsen.op_count].imm = imm;
+			MI->flat_insn->detail->mipsen.op_count++;
 		}
 	} else
 		printOperand(MI, opNum, O);
@


1.2
log
@Update to capstone-3.0.
@
text
@d1 1
a1 1
$OpenBSD$
d6 3
a8 3
--- arch/Mips/MipsInstPrinter.c.orig	Wed Nov 19 10:56:04 2014
+++ arch/Mips/MipsInstPrinter.c	Wed Nov 19 21:32:37 2014
@@@@ -93,12 +93,12 @@@@
d25 1
a25 1
@@@@ -195,11 +195,11 @@@@
d41 1
a41 1
@@@@ -219,7 +219,7 @@@@
d50 1
a50 1
@@@@ -234,9 +234,9 @@@@
d63 1
a63 1
@@@@ -259,9 +259,9 @@@@
d76 1
a76 1
@@@@ -277,9 +277,9 @@@@
@


1.1
log
@prevent a clash with the 'mips' symbol on mips64; fixes build.

ok benoit@@ (MAINTAINER)
@
text
@d6 3
a8 3
--- arch/Mips/MipsInstPrinter.c.orig	Sat Feb 22 13:00:26 2014
+++ arch/Mips/MipsInstPrinter.c	Sat Feb 22 13:01:16 2014
@@@@ -91,12 +91,12 @@@@ static void set_mem_access(MCInst *MI, bool status)
d12 6
a17 6
-		MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].type = MIPS_OP_MEM;
-		MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].mem.base = MIPS_REG_INVALID;
-		MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].mem.disp = 0;
+		MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].type = MIPS_OP_MEM;
+		MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].mem.base = MIPS_REG_INVALID;
+		MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].mem.disp = 0;
d20 2
a21 2
-		MI->flat_insn.mips.op_count++;
+		MI->flat_insn.mipsen.op_count++;
d25 1
a25 1
@@@@ -229,11 +229,11 @@@@ static void printOperand(MCInst *MI, unsigned OpNo, SS
d29 2
a30 2
-				MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].mem.base = reg;
+				MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].mem.base = reg;
d32 6
a37 6
-				MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].type = MIPS_OP_REG;
-				MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].reg = reg;
-				MI->flat_insn.mips.op_count++;
+				MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].type = MIPS_OP_REG;
+				MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].reg = reg;
+				MI->flat_insn.mipsen.op_count++;
d40 2
a41 2
 	}
@@@@ -255,7 +255,7 @@@@ static void printOperand(MCInst *MI, unsigned OpNo, SS
d45 2
a46 2
-				MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].mem.disp = imm;
+				MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].mem.disp = imm;
d50 1
a50 1
@@@@ -270,9 +270,9 @@@@ static void printOperand(MCInst *MI, unsigned OpNo, SS
d54 6
a59 6
-				MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].type = MIPS_OP_IMM;
-				MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].imm = imm;
-				MI->flat_insn.mips.op_count++;
+				MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].type = MIPS_OP_IMM;
+				MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].imm = imm;
+				MI->flat_insn.mipsen.op_count++;
d63 1
a63 1
@@@@ -295,9 +295,9 @@@@ static void printUnsignedImm(MCInst *MI, int opNum, SS
d67 6
a72 6
-			MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].type = MIPS_OP_IMM;
-			MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].imm = (unsigned short int)imm;
-			MI->flat_insn.mips.op_count++;
+			MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].type = MIPS_OP_IMM;
+			MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].imm = (unsigned short int)imm;
+			MI->flat_insn.mipsen.op_count++;
d76 1
a76 1
@@@@ -313,9 +313,9 @@@@ static void printUnsignedImm8(MCInst *MI, int opNum, S
d80 6
a85 6
-			MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].type = MIPS_OP_IMM;
-			MI->flat_insn.mips.operands[MI->flat_insn.mips.op_count].imm = imm;
-			MI->flat_insn.mips.op_count++;
+			MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].type = MIPS_OP_IMM;
+			MI->flat_insn.mipsen.operands[MI->flat_insn.mipsen.op_count].imm = imm;
+			MI->flat_insn.mipsen.op_count++;
@

