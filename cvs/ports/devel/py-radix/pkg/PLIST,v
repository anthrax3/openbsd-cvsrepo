head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.14
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.10
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.32
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.30
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.28
	OPENBSD_5_0:1.1.1.1.0.26
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.24
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.22
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.20
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.18
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.16
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	djm_20050531:1.1.1.1
	djm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.13.16.09.18;	author benoit;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.30.22.50.22;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.05.30.22.50.22;	author djm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update py-radix to 0.5
- update WANTLIB
- regen PLIST
@
text
@@@comment $OpenBSD: PLIST,v 1.1.1.1 2005/05/30 22:50:22 djm Exp $
lib/python${MODPY_VERSION}/site-packages/radix-0.5-py${MODPY_VERSION}.egg-info
lib/python${MODPY_VERSION}/site-packages/radix.so
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
@@comment $OpenBSD$
@


1.1.1.1
log
@import of py-radix-0.4:

py-radix is an implementation of a radix tree data structure for
the storage and retrieval of IPv4 and IPv6 network prefixes.

The radix tree is the data structure most commonly used for
routing table lookups. It efficiently stores network prefixes of
varying lengths and allows fast lookups of containing networks.

feedback and ok alek@@
@
text
@@
