head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4;
locks; strict;
comment	@# @;


1.5
date	2016.12.25.13.37.27;	author zhuk;	state Exp;
branches;
next	1.4;
commitid	B8jJdW7hLQ4VT0hc;

1.4
date	2016.04.28.08.27.25;	author sthen;	state Exp;
branches;
next	1.3;
commitid	n2ker9iZTkBIgWq3;

1.3
date	2016.03.26.21.03.03;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	Q3WsaFFhYoHevSmZ;

1.2
date	2016.03.26.20.37.34;	author zhuk;	state Exp;
branches;
next	1.1;
commitid	OEdThNVtQpfieDxV;

1.1
date	2016.03.10.17.45.11;	author zhuk;	state Exp;
branches;
next	;
commitid	0mjhx6dypqaFfHN5;


desc
@@


1.5
log
@Improvements for qmake.port.mk:

  * Pass LIBfoo_VERSION environment variables like it's done for simple and
    gnu configure scripts. This unbreaks generating CMake config files
    in the upcoming Qt 5.6.2.

  * Don't call -recursive for Qt3's qmake, it doesn't support this flag.
@
text
@# $OpenBSD: qmake.port.mk,v 1.4 2016/04/28 08:27:25 sthen Exp $

.if empty(CONFIGURE_STYLE)
CONFIGURE_STYLE =	qmake
.endif

.if ${MODULES:Mx11/qt?} == ${MODULES}
ERRORS +=	qmake port module requires one of the x11/qt* modules
.endif

MAKE_FLAGS +=	CC="${CC}" CXX="${CXX}"
MAKE_FLAGS +=	PREFIX=${PREFIX}
.for _l _v in ${SHARED_LIBS}
MAKE_FLAGS +=	LIB${_l}_VERSION=${_v}
.endfor

MODQMAKE_PROJECTS ?=	.
MODQMAKE_ARGS +=	PREFIX=${PREFIX} \
			QMAKE_CFLAGS="${CFLAGS}" \
			QMAKE_CFLAGS_RELEASE="${CFLAGS}" \
			QMAKE_CXX="${CXX}" \
			QMAKE_CXXFLAGS="${CXXFLAGS}" \
			QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS}" \
			QMAKE_LFLAGS="${LDFLAGS}" \
			QMAKE_LFLAGS_RELEASE="${LDFLAGS}"

.if !${MODULES:Mx11/qt3} || ${MODQT_QMAKE} != ${MODQT3_QMAKE}
MODQMAKE_ARGS +=	-recursive
.endif

MODQMAKE_INSTALL_ROOT ?=	${WRKINST}
_MODQMAKE_FAKE_FLAGS =		INSTALL_ROOT=${MODQMAKE_INSTALL_ROOT}

FLAVOR ?=
.if ${FLAVOR:Mdebug}
MODQMAKE_ARGS +=	CONFIG+=debug
.endif

.for _l _v in ${SHARED_LIBS}
MODQMAKE_ENV +=	LIB${_l}_VERSION=${_v}
.endfor

MODQMAKE_configure =
MODQMAKE_build =
MODQMAKE_install =
.for _qp in ${MODQMAKE_PROJECTS}
_MODQMAKE_CD_${_qp:/=_} = \
	cd ${WRKBUILD}; \
	if [ -d ${WRKSRC}/${_qp} ]; then \
		dir=${_qp}; \
	else \
		dir=$$(dirname ${_qp}); \
	fi; \
	mkdir -p $$dir; \
	cd -- $$dir
MODQMAKE_configure += \
	cd ${WRKSRC}; \
	if [ -d ${_qp} ]; then \
		pro=$$(echo ${_qp}/*.pro); \
	else \
		pro=${_qp}; \
	fi; \
	${_MODQMAKE_CD_${_qp:/=_}}; \
	echo >&2 ${MODQT_QMAKE} ${MODQMAKE_ARGS} ${WRKSRC}/$$pro; \
	${SETENV} ${CONFIGURE_ENV} \
		${MODQT_QMAKE} ${MODQMAKE_ARGS} ${WRKSRC}/$$pro;
MODQMAKE_build += \
	${_MODQMAKE_CD_${_qp:/=_}}; \
	${SETENV} ${MAKE_ENV} \
                ${MAKE_PROGRAM} ${MAKE_FLAGS} -f Makefile ${ALL_TARGET};
MODQMAKE_install += \
	${_MODQMAKE_CD_${_qp:/=_}}; \
	umask 022; \
	${_FAKESUDO} ${SETENV} ${MAKE_ENV} ${FAKE_SETUP} \
		${MAKE_PROGRAM} ${ALL_FAKE_FLAGS} ${_MODQMAKE_FAKE_FLAGS} \
		-f Makefile ${FAKE_TARGET};
.endfor

.if ${CONFIGURE_STYLE:Mqmake}
CONFIGURE_ENV +=	${MODQMAKE_ENV}
MAKE_ENV +=		${MODQMAKE_ENV}

SEPARATE_BUILD ?=	Yes
. if ${SEPARATE_BUILD:L} != "no"
.  if ${SEPARATE_BUILD:L} != "yes"
ERRORS +=	"Fatal: qmake supports only simple SEPARATE_BUILD builds."
.  endif
# "Shadow builds" of qmake can only work in subdirectory
WRKBUILD ?=		${WRKSRC}/build-${MACHINE_ARCH}
. endif

. if !target(do-build) && "${CONFIGURE_STYLE:Nqmake}" == ""
do-build:
	@@${MODQMAKE_build}
. endif

. if !target(do-install) && "${CONFIGURE_STYLE:Nqmake}" == ""
do-install:
	@@${MODQMAKE_install}
. endif
.endif		# CONFIGURE_STYLE:Mqmake
@


1.4
log
@fix systrace straggler, found by aja
@
text
@d1 1
a1 1
# $OpenBSD: qmake.port.mk,v 1.3 2016/03/26 21:03:03 zhuk Exp $
d18 1
a18 2
MODQMAKE_ARGS +=	-recursive \
			PREFIX=${PREFIX} \
d23 7
a29 1
			QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS}"
d34 9
d65 2
a66 1
	${MODQT_QMAKE} ${MODQMAKE_ARGS} ${WRKSRC}/$$pro;
d80 3
@


1.3
log
@Define variables even when CONFIGURE_STYLE isn't set to "qmake",
making qmake.port.mk more declarative.
@
text
@d1 1
a1 1
# $OpenBSD: qmake.port.mk,v 1.2 2016/03/26 20:37:34 zhuk Exp $
d54 1
a54 1
	${_MODQMAKE_build_SYSTRACE_CMD} ${SETENV} ${MAKE_ENV} \
d59 1
a59 2
	${_FAKESUDO} ${_MODQMAKE_install_SYSTRACE_CMD} \
		${SETENV} ${MAKE_ENV} ${FAKE_SETUP} \
a73 2
# Could not add ${_SYSTRACE_CMD} unconditionally since in case of
# do-build bsd.port.mk adds ${_SYSTRACE_CMD} itself.
a76 2
. else
_MODQMAKE_build_SYSTRACE_CMD =		${_SYSTRACE_CMD}
a78 2
# Could not add ${_SYSTRACE_CMD} unconditionally since in case of
# do-install bsd.port.mk adds ${_SYSTRACE_CMD} itself.
a81 2
. else
_MODQMAKE_install_SYSTRACE_CMD =	${_SYSTRACE_CMD}
@


1.2
log
@Zap more lines from qmake-based ports by moving them from
the "MODULES=x11/qtX + CONFIGURE_STYLE=qmake" logic to
the "MODULES=devel/qmake x11/qtX" logic.

Discussed with espie@@ a few weeks ago.
@
text
@d1 1
a1 1
# $OpenBSD: qmake.port.mk,v 1.1 2016/03/10 17:45:11 zhuk Exp $
d7 1
a7 2
.if ${CONFIGURE_STYLE:Mqmake}
. if ${MODULES:Mx11/qt?} == ${MODULES}
d9 1
a9 1
. endif
d13 1
a13 1
. for _l _v in ${SHARED_LIBS}
d15 1
a15 1
. endfor
d32 1
a32 1
. for _qp in ${MODQMAKE_PROJECTS}
d63 1
a63 1
. endfor
d65 1
@


1.1
log
@Switch to a separate qmake.port.mk. Simplifies logic a lot.

This removes support of separate qmake versions in one port: as we
discovered, there are no ports actually needing this; strangers like
print/poppler don't use qmake in build.

This should be transparent to current ports. But expect more tweaks there:
for now, qt?.port.mk forces qmake.port.mk inclusion, but that will be
reworked to a more common scheme.

Same idea from (at least) espie@@ and me; also, espie@@ agrees on the plan.
@
text
@d1 5
a5 1
# $OpenBSD$
@

