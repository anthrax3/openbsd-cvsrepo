head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.26
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.24
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.20
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.09.22.10.50.51;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Zero newly allocated space, to avoid (in some cases) passing an
unclean buffer to Perl_is_utf8_string which proceeds to strlen() it,
causing an illegal access with malloc_flags J as it runs past the
end of the 0xd0d0d0.

Note there are various other problems with YAML::Syck and upstream
recommend not using it - see the README file.

ok jasper@@
@
text
@$OpenBSD$

zeroing allocated space avoids a perl segfault with malloc_flags J.

--- syck.h.orig	Wed Sep 22 10:22:37 2010
+++ syck.h	Wed Sep 22 10:23:24 2010
@@@@ -75,7 +75,7 @@@@ extern "C" {
 
 #define ALLOC_CT 8
 #define SYCK_BUFFERSIZE 4096
-#define S_ALLOC_N(type,n) (type*)malloc(sizeof(type)*(n))
+#define S_ALLOC_N(type,n) (type*)calloc((n),sizeof(type))
 #define S_ALLOC(type) (type*)malloc(sizeof(type))
 #define S_REALLOC_N(var,type,n) (var)=(type*)realloc((char*)(var),sizeof(type)*(n))
 #define S_FREE(n) free(n); n = NULL;
@
