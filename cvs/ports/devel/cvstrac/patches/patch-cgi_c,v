head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.32
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.28
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.30
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.26
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.24
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.22
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	sthen_20090217:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2009.02.17.00.16.04;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.02.17.00.16.04;	author sthen;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

http://www.cvstrac.org/cvstrac/chngview?cn=994
Avoid using sqlite internal functions.

--- cgi.c.orig	Thu Dec 14 00:45:51 2006
+++ cgi.c	Thu Aug  7 01:01:25 2008
@@@@ -57,13 +57,6 @@@@
 #endif /* INTERFACE */
 
 /*
-** Provide a reliable implementation of a caseless string comparison
-** function.
-*/
-#define stricmp sqlite3StrICmp
-extern int sqlite3StrICmp(const char*, const char*);
-
-/*
 ** The body of the HTTP reply text is stored here.
 */
 static int nAllocTxt = 0; /* Amount of space allocated for HTTP reply text */
@@@@ -669,17 +662,17 @@@@ static void process_multipart_form_data(char *z, int l
       nArg = tokenize_line(zLine, sizeof(azArg)/sizeof(azArg[0]), azArg);
       for(i=0; i<nArg; i++){
         int c = tolower(azArg[i][0]);
-        if( c=='c' && stricmp(azArg[i],"content-disposition:")==0 ){
+        if( c=='c' && strcasecmp(azArg[i],"content-disposition:")==0 ){
           i++;
-        }else if( c=='n' && stricmp(azArg[i],"name=")==0 ){
+        }else if( c=='n' && strcasecmp(azArg[i],"name=")==0 ){
           zName = azArg[++i];
-        }else if( c=='f' && stricmp(azArg[i],"filename=")==0 ){
+        }else if( c=='f' && strcasecmp(azArg[i],"filename=")==0 ){
           char *z = azArg[++i];
           if( zName && z ){
             cgi_set_parameter_nocopy(mprintf("%s:filename",zName), z);
           }
           showBytes = 1;
-        }else if( c=='c' && stricmp(azArg[i],"content-type:")==0 ){
+        }else if( c=='c' && strcasecmp(azArg[i],"content-type:")==0 ){
           char *z = azArg[++i];
           if( zName && z ){
             cgi_set_parameter_nocopy(mprintf("%s:mimetype",zName), z);
@


1.1.1.1
log
@import cvstrac; N.B. requires a recent /usr/bin/rlog (thanks Joris!)

CVSTrac implements a patch-set and bug tracking system for CVS
as a single self-contained executable, running as CGI, from inetd,
or as a stand-alone web server.

- Automatically generates a patch-set log from check-in comments
- User-defined color-coded database queries
- Built-in repository browser and Wiki
- Minimal memory, disk and CPU requirements
- Per-user access control
- Uses SQLite, no heavy database engine dependency
- Can be run from a chroot jail
@
text
@@
