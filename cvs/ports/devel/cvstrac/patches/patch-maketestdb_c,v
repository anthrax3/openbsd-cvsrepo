head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.12
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.10
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.24
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.22
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	sthen_20090217:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.12.09.20.46.00;	author sthen;	state Exp;
branches;
next	1.1;
commitid	tWAQF6KyiOoRKcOo;

1.1
date	2009.02.17.00.16.04;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.02.17.00.16.04;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@srand_deterministic
@
text
@$OpenBSD: patch-maketestdb_c,v 1.1.1.1 2009/02/17 00:16:04 sthen Exp $

http://www.cvstrac.org/cvstrac/chngview?cn=969
Use sqlite3_free() not free() on functions returning memory strings.

--- maketestdb.c.orig	Tue Mar 28 02:38:54 2006
+++ maketestdb.c	Tue Dec  9 20:43:06 2014
@@@@ -62,7 +62,7 @@@@ static void generate_chng(sqlite3 *db, time_t when, in
     sprintf(zBase,"dir_%d",rand()%MAX_DIR);
     zSql = sqlite3_mprintf("REPLACE INTO file VALUES(1,'%q','%q')",zBase,zDir);
     sqlite3_exec(db,zSql,0,0,&zErrMsg);
-    free(zSql);
+    sqlite3_free(zSql);
     if(zDir[0]) strcat(zDir,"/");
     strcat(zDir,zBase);
   }
@@@@ -74,14 +74,14 @@@@ static void generate_chng(sqlite3 *db, time_t when, in
     sprintf(zBase,"file_%d.c",k);
     zSql = sqlite3_mprintf("REPLACE INTO file VALUES(0,'%q','%q')",zBase,zDir);
     sqlite3_exec(db,zSql,0,0,&zErrMsg);
-    free(zSql);
+    sqlite3_free(zSql);
 
     /* FIXME: this is definitely _not_ generating CVS version numbers */
     zSql = sqlite3_mprintf("INSERT INTO filechng "
                            "VALUES(%d,'%q/%q','%d',%d,%d)",
                            cn,zDir,zBase,cn,rand()%10,rand()%10);
     sqlite3_exec(db,zSql,0,0,&zErrMsg);
-    free(zSql);
+    sqlite3_free(zSql);
   }
 
   zSql = sqlite3_mprintf("INSERT INTO chng "
@@@@ -89,7 +89,7 @@@@ static void generate_chng(sqlite3 *db, time_t when, in
                        "COMMIT",
                        cn, when, cn, MAX_CHNG);
   rc = sqlite3_exec(db,zSql,0,0,&zErrMsg);
-  free(zSql);
+  sqlite3_free(zSql);
 }
 
 /***********************************************************************/
@@@@ -244,7 +244,7 @@@@ int main(int argc, char **argv){
   }
 
   /* a certain amount of repeatability is nice */
-  srand(0);
+  srand_deterministic(0);
 
   /* Initialize the database */
   rc = sqlite3_exec(db,zSchema,0,0,&zErrMsg);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d7 1
a7 1
+++ maketestdb.c	Thu Aug  7 01:10:02 2008
d43 9
@


1.1.1.1
log
@import cvstrac; N.B. requires a recent /usr/bin/rlog (thanks Joris!)

CVSTrac implements a patch-set and bug tracking system for CVS
as a single self-contained executable, running as CGI, from inetd,
or as a stand-alone web server.

- Automatically generates a patch-set log from check-in comments
- User-defined color-coded database queries
- Built-in repository browser and Wiki
- Minimal memory, disk and CPU requirements
- Per-user access control
- Uses SQLite, no heavy database engine dependency
- Can be run from a chroot jail
@
text
@@
