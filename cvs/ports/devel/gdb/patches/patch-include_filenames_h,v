head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.10
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.08.16.11.14.05;	author chrisz;	state Exp;
branches;
next	;
commitid	rj6gRergiWAENH60;


desc
@@


1.1
log
@Our libiberty does not have filename_cmp(), but since it would simply
call strcmp(), use a macro when building gdb and most of all libbfd.

Fixes linking against libbfd with our system libiberty.


reviewed and ok pascal@@
@
text
@$OpenBSD$

Our libiberty does not have filename_cmp(), but since it would simply
call strcmp(), use a macro when building gdb and most of all libbfd.

Fixes linking against libbfd with our system libiberty.

--- include/filenames.h.orig	Wed Jun 11 18:34:41 2014
+++ include/filenames.h	Sat Aug 16 12:34:25 2014
@@@@ -80,11 +80,10 @@@@ extern "C" {
   (IS_DIR_SEPARATOR_1 (dos_based, (f)[0])		 \
    || HAS_DRIVE_SPEC_1 (dos_based, f))
 
-extern int filename_cmp (const char *s1, const char *s2);
-#define FILENAME_CMP(s1, s2)	filename_cmp(s1, s2)
+#define FILENAME_CMP(s1, s2)		strcmp(s1, s2)
+#define filename_cmp(s1, s2)		strcmp(s1, s2)
 
-extern int filename_ncmp (const char *s1, const char *s2,
-			  size_t n);
+#define filename_ncmp(s1, s2, n)	strncmp(s1, s2, n)
 
 extern hashval_t filename_hash (const void *s);
 
@
