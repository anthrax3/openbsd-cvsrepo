head	1.9;
access;
symbols
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	jasper_20110917:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.07.18.11.12.13;	author edd;	state dead;
branches;
next	1.8;
commitid	bfJgjuyjgEx8icpW;

1.8
date	2014.06.19.20.55.02;	author sthen;	state Exp;
branches;
next	1.7;
commitid	UMQ2TpQyAayXWwMR;

1.7
date	2013.05.14.14.31.30;	author edd;	state Exp;
branches;
next	1.6;

1.6
date	2013.05.05.20.51.40;	author edd;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.13.12.13.37;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.22.21.26.11;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.24.06.37.32;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.09.11.55.46;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.17.16.41.30;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.09.17.16.41.30;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.9
log
@BSDmakefile -> Makefile in Arduino.

To reflect recent changes in make.

Tested on Arduino Uno. OK sthen@@
@
text
@# $OpenBSD: BSDmakefile,v 1.8 2014/06/19 20:55:02 sthen Exp $
# Arduino Makefile
# Arduino adaptation by mellis, eighthave, oli.keller
#
# Adapted for BSD make(1) by Seth Wright (seth@@crosse.org)
# Adapted for OpenBSD ports by Chris Kuethe (ckuethe@@openbsd.org)
#
# This makefile allows you to build sketches from the command line
# without the Arduino environment (or Java).
#
# Detailed instructions for using the makefile:
#
#  1. Copy this file into the folder with your sketch. There should be a
#     file with the same name as the folder and with the extension .ino
#     (e.g. foo.ino in the foo/ folder).
#
#  2. Modify the line containing "PORT" to refer to the filename
#     representing the USB or serial connection to your Arduino board
#     (e.g. PORT = /dev/tty.USB0).  If the exact name of this file
#     changes, you can use * as a wildcard (e.g. PORT = /dev/tty.usb*).
#
#  3. Set the line containing "MCU" to match your board's processor.
#     Older one's are atmega8 based, newer ones like Arduino Mini, Bluetooth
#     or Diecimila have the atmega168.  If you're using a LilyPad Arduino,
#     change F_CPU to 8000000.
#
#  4. At the command line, change to the directory containing your
#     program's file and the makefile.
#
#  5. Type "make" and press enter to compile/verify your program.
#
#  6. Type "make upload", reset your Arduino board, and press enter to
#     upload your program to the Arduino board.
#
# $Id: BSDmakefile,v 1.8 2014/06/19 20:55:02 sthen Exp $

TARGET = ${.CURDIR:C/.*\///g}

## you might use this for newer boards like the UNO
UPLOAD_RATE = 115200
PORT = /dev/cuaU0
AVRDUDE_PROGRAMMER = arduino

## for an arduino mega
#UPLOAD_RATE = 57600
#MCU = atmega1280
#AVRDUDE_PROGRAMMER = arduino

## or this for an older arduino
#UPLOAD_RATE = 19200
#PORT = /dev/cuaU0
#AVRDUDE_PROGRAMMER = stk500

## or this, if you have a usbtiny ISP
#PORT = usb
#AVRDUDE_PROGRAMMER = usbtiny

MCU = atmega328p
F_CPU = 16000000

# If your sketch uses any libraries, list them here, eg.
# LIBRARIES=EEPROM LiquidCrystal Wire
#
# If you want to use the Ethernet library, use:
# LIBRARIES=SPI Ethernet IPAddress Dhcp Dns EthernetClient EthernetServer \
#		EthernetUdp utility/w5100 utility/socket new
#
# To use the SD library:
# LIBRARIES=SD File utility/SdFile utility/SdVolume utility/Sd2Card
LIBRARIES=

# Arduino variant, one of: "eightanaloginputs", "leonardo", "mega",
# "micro" or "standard".
VARIANT = standard

############################################################################
# Below here nothing should be changed...

ARDUINO = ${TRUEPREFIX}/share/arduino/
.PATH: $(ARDUINO)/cores/arduino ${LIBRARIES:S|^|$(ARDUINO)/libraries/|g}
AVR_TOOLS_PATH = ${TRUEPREFIX}/bin
SRC = wiring.c wiring_analog.c wiring_digital.c \
wiring_pulse.c wiring_shift.c WInterrupts.c
CXXSRC = HardwareSerial.cpp WMath.cpp Print.cpp WString.cpp \
	${LIBRARIES:S|$|.cpp|g}
FORMAT = ihex


# Name of this Makefile (used for "make depend").
MAKEFILE = BSDmakefile

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
DEBUG = stabs

OPT = s

# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU) -DARDUINO=100
CXXDEFS = -DF_CPU=$(F_CPU) -DARDUINO=100

# Place -I options here
ROOTLIBINCS=${LIBRARIES:S|^|-I$(ARDUINO)/libraries/|g}
UTILITYLIBINCS=${ROOTLIBINCS:S|$|/utility/|g}
LIBINC=${ROOTLIBINCS} ${UTILITYLIBINCS} -I$(ARDUINO)/variants/$(VARIANT)
CINCS = -I$(ARDUINO)/cores/arduino $(LIBINC) -I$(ARDUINO)/variants/$(VARIANT)
CXXINCS = -I$(ARDUINO)/cores/arduino $(LIBINC) -I$(ARDUINO)/variants/$(VARIANT)

# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
CSTANDARD = -std=gnu99
CDEBUG = -g$(DEBUG)
CWARN = -Wall -Wstrict-prototypes
CTUNING = -ffunction-sections -fdata-sections
#CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
#CEXTRA = -Wa,-adhlns=$(<:.c=.lst)

CFLAGS = $(CDEBUG) $(CDEFS) $(CINCS) -O$(OPT) $(CWARN) \
	 $(CSTANDARD) $(CEXTRA) $(CTUNING)
CXXFLAGS = $(CDEFS) $(CINCS) -O$(OPT)
#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs
LDFLAGS = -lm -Wl,--gc-sections


# Programming support using avrdude. Settings and variables.
AVRDUDE_PORT = $(PORT)
AVRDUDE_WRITE_FLASH = -U flash:w:applet/$(TARGET).hex
AVRDUDE_CONF = /etc/avrdude.conf
AVRDUDE_FLAGS = -V -F -C $(AVRDUDE_CONF) -p $(MCU) -P $(AVRDUDE_PORT) \
-c $(AVRDUDE_PROGRAMMER) -b $(UPLOAD_RATE)

# Program settings
CC = $(AVR_TOOLS_PATH)/avr-gcc
CXX = $(AVR_TOOLS_PATH)/avr-g++
OBJCOPY = $(AVR_TOOLS_PATH)/avr-objcopy
OBJDUMP = $(AVR_TOOLS_PATH)/avr-objdump
AR  = $(AVR_TOOLS_PATH)/avr-ar
SIZE = $(AVR_TOOLS_PATH)/avr-size
NM = $(AVR_TOOLS_PATH)/avr-nm
AVRDUDE = $(AVR_TOOLS_PATH)/avrdude
REMOVE = rm -f
REMOVEDIR = rmdir
MKDIR = mkdir -p
MV = mv -f

# Define all object files.
OBJ = $(SRC:.c=.o) $(CXXSRC:.cpp=.o) $(ASRC:.S=.o)

# Define all listing files.
LST = $(ASRC:.S=.lst) $(CXXSRC:.cpp=.lst) $(SRC:.c=.lst)

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. $(CFLAGS)
ALL_CXXFLAGS = -mmcu=$(MCU) -I. $(CXXFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)


# Default target.
all: applet_files build sizeafter

build: mkdirs elf hex

mkdirs:
	$(MKDIR) utility

# Here is the "preprocessing".
# It creates a .cpp file based with the same name as the .ino file.
# On top of the new .cpp file comes the Arduino.h header.
# Then comes a stdc++ workaround, see:                                          
# http://stackoverflow.com/questions/920500/what-is-the-purpose-of-cxa-pure-virtual
# At the end there is a generic main() function attached.
# Then the .cpp file will be compiled. Errors during compile will
# refer to this new, automatically generated, file.
# Not the original .ino file you actually edit...
applet_files: $(TARGET).ino
	test -d applet || mkdir applet
	echo '#include "Arduino.h"' > applet/$(TARGET).cpp
	echo '#ifdef __cplusplus' >> applet/$(TARGET).cpp
	echo 'extern "C" void __cxa_pure_virtual(void) { while(1); }' \
		>> applet/$(TARGET).cpp
	echo '#endif\n' >> applet/$(TARGET).cpp
	cat $(TARGET).ino >> applet/$(TARGET).cpp
	cat $(ARDUINO)/cores/arduino/main.cpp >> applet/$(TARGET).cpp

elf: applet/$(TARGET).elf
hex: applet/$(TARGET).hex
eep: applet/$(TARGET).eep
lss: applet/$(TARGET).lss
sym: applet/$(TARGET).sym

# Program the device.
upload: applet/$(TARGET).hex
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) applet/$(TARGET).hex
ELFSIZE = $(SIZE)  applet/$(TARGET).elf
sizebefore:
	@@if [ -f applet/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter: applet/$(TARGET).hex
	@@if [ -f applet/$(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(HEXSIZE); echo; fi


# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000


coff: applet/$(TARGET).elf
	$(COFFCONVERT) -O coff-avr applet/$(TARGET).elf $(TARGET).cof


extcoff: $(TARGET).elf
	$(COFFCONVERT) -O coff-ext-avr applet/$(TARGET).elf $(TARGET).cof


.SUFFIXES: .elf .hex .eep .lss .sym .cpp .o .c .s .S

.elf.hex:
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@@

.elf.eep:
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@@

# Create extended listing file from ELF output file.
.elf.lss:
	$(OBJDUMP) -h -S $< > $@@

# Create a symbol table from ELF output file.
.elf.sym:
	$(NM) -n $< > $@@

# Link: create ELF output file from library.
applet/$(TARGET).elf: $(TARGET).ino applet/core.a
	$(CXX) $(ALL_CXXFLAGS) -o $@@ applet/$(TARGET).cpp -L. applet/core.a $(LDFLAGS)

applet/core.a: $(OBJ)
	@@for i in $(OBJ); do echo $(AR) rcs applet/core.a $$i; $(AR) rcs applet/core.a $$i; done


# Compile: create object files from C++ source files.
.cpp.o:
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@@

# Compile: create object files from C source files.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $< -o $@@


# Compile: create assembler files from C source files.
.c.s:
	$(CC) -S $(ALL_CFLAGS) $< -o $@@


# Assemble: create object files from assembler source files.
.S.o:
	$(CC) -c $(ALL_ASFLAGS) $< -o $@@


# Automatic dependencies
%.d: %.c
	$(CC) -M $(ALL_CFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@@

%.d: %.cpp
	$(CXX) -M $(ALL_CXXFLAGS) $< | sed "s;$(notdir $*).o:;$*.o $*.d:;" > $@@


# Target: clean project.
clean:
	$(REMOVE) applet/$(TARGET).hex applet/$(TARGET).eep applet/$(TARGET).cof applet/$(TARGET).elf \
	applet/$(TARGET).map applet/$(TARGET).sym applet/$(TARGET).lss applet/core.a \
	$(OBJ) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CXXSRC:.cpp=.s) $(CXXSRC:.cpp=.d) utility/*
	if [ -d utility ]; then $(REMOVEDIR) utility; fi

.PHONY:	all build elf hex eep lss sym program coff extcoff clean applet_files sizebefore sizeafter

@


1.8
log
@Define ARDUINO macro in the sample BSDmakefile used for user projects; some
things need this. See http://comments.gmane.org/gmane.os.openbsd.ports/67938
From Daniel Bolgheroni with slight wording tweak.
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.7 2013/05/14 14:31:30 edd Exp $
d35 1
a35 1
# $Id: BSDmakefile,v 1.7 2013/05/14 14:31:30 edd Exp $
@


1.7
log
@Fix a race when using 'make -j' -- missing dependency.

From Janne Johansson, OK jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.6 2013/05/05 20:51:40 edd Exp $
d35 1
a35 1
# $Id: BSDmakefile,v 1.6 2013/05/05 20:51:40 edd Exp $
d100 2
a101 2
CDEFS = -DF_CPU=$(F_CPU)
CXXDEFS = -DF_CPU=$(F_CPU)
@


1.6
log
@Improve BSDmakefile distributed with arduino libs:

 - Adds the utility/ directory as an include path for each library imported.
   Needed to build, for example, the SD library.

 - Add example settings for an arduino mega.

 - Add example of how to use the SD library.

 - Use -ffunction-sections -fdata-sections and link with
   -Wl,--gc-sections, as the official arduino toolchain does[1].
   This makes smaller hex files. I put the -f stuff in CTUNING, which
   was previously defined but unused. Commented the unused def out for now.

 - Implement __cxa_pure_virtual so the user does not have to[1][2].

 - Deal with the creation and removal of the utility/ directory
   automatically. The comment that explained this was actually wrong
   anyway. It said to create a 'utilities' directory, but it meant
   'utility'. Anyway, manage this automatically, why not.

[1] http://stackoverflow.com/questions/920500/what-is-the-purpose-of-cxa-pure-virtual
[2] http://playground.arduino.cc/OpenBSD/CLI

OK jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.5 2012/10/13 12:13:37 jasper Exp $
d35 1
a35 1
# $Id: BSDmakefile,v 1.5 2012/10/13 12:13:37 jasper Exp $
d207 1
a207 1
sizeafter:
@


1.5
log
@- add a note about how to use the Ethernet library.

based on a mail from Tom Doherty
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.4 2012/05/22 21:26:11 jasper Exp $
d35 1
a35 1
# $Id: BSDmakefile,v 1.4 2012/05/22 21:26:11 jasper Exp $
d44 5
a53 1

d61 4
a64 3
#If your sketch uses any libraries, list them here, eg.
#LIBRARIES=EEPROM LiquidCrystal Wire
# Or if you want to use the Ethernet library, use:
d67 3
a69 1
# and run 'mkdir utilities'
d104 3
a106 1
LIBINC=${LIBRARIES:S|^|-I$(ARDUINO)/libraries/|g} -I$(ARDUINO)/variants/$(VARIANT)
d118 2
a119 1
CTUNING = -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
d122 2
a123 1
CFLAGS = $(CDEBUG) $(CDEFS) $(CINCS) -O$(OPT) $(CWARN) $(CSTANDARD) $(CEXTRA)
d126 1
a126 1
LDFLAGS = -lm
d146 2
d166 4
a169 1
build: elf hex
d174 2
d183 4
d283 2
a284 1
	$(OBJ) $(LST) $(SRC:.c=.s) $(SRC:.c=.d) $(CXXSRC:.cpp=.s) $(CXXSRC:.cpp=.d)
@


1.4
log
@- update to 1.0.1
* release notes can be found here: http://arduino.cc/en/Main/ReleaseNotes
- set default baud rate for the uno, instead of defaulting to older boards.

tested by various
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.3 2012/04/24 06:37:32 jasper Exp $
d35 1
a35 1
# $Id: BSDmakefile,v 1.3 2012/04/24 06:37:32 jasper Exp $
d59 4
@


1.3
log
@- update arduino to 1.0, please see the changelog:
   http://arduino.cc/blog/2011/10/04/arduino-1-0/
   - various changes related to this port:
      * adjust sketch extensions from .pde to .ino
	 * deal better with different arduino variants
	    * adjust template to get it compiling/linking again

	    tested by various
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.2 2011/12/09 11:55:46 jasper Exp $
d35 1
a35 1
# $Id: BSDmakefile,v 1.2 2011/12/09 11:55:46 jasper Exp $
d39 2
a40 2
## you might use this for an older arduino
UPLOAD_RATE = 19200
d42 1
a42 1
AVRDUDE_PROGRAMMER = stk500
d44 2
a45 2
## or for newer boards like the UNO
#UPLOAD_RATE = 57600
d47 2
a48 1
#AVRDUDE_PROGRAMMER = arduino
@


1.2
log
@cleanup whitespace mess
@
text
@d1 1
a1 1
# $OpenBSD: BSDmakefile,v 1.1.1.1 2011/09/17 16:41:30 jasper Exp $
d14 2
a15 2
#     file with the same name as the folder and with the extension .pde
#     (e.g. foo.pde in the foo/ folder).
d35 1
a35 1
# $Id: BSDmakefile,v 1.1.1.1 2011/09/17 16:41:30 jasper Exp $
d60 4
d70 1
a70 1
SRC = pins_arduino.c wiring.c wiring_analog.c wiring_digital.c \
d92 3
a94 3
LIBINC=${LIBRARIES:S|^|-I$(ARDUINO)/libraries/|g}
CINCS = -I$(ARDUINO)/cores/arduino $(LIBINC)
CXXINCS = -I$(ARDUINO)/cores/arduino $(LIBINC)
d151 2
a152 2
# It creates a .cpp file based with the same name as the .pde file.
# On top of the new .cpp file comes the WProgram.h header.
d156 2
a157 2
# Not the original .pde file you actually edit...
applet_files: $(TARGET).pde
d159 2
a160 2
	echo '#include "WProgram.h"' > applet/$(TARGET).cpp
	cat $(TARGET).pde >> applet/$(TARGET).cpp
d218 1
a218 1
applet/$(TARGET).elf: $(TARGET).pde applet/core.a
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d22 1
a22 1
#  3. Set the line containing "MCU" to match your board's processor. 
d35 1
a35 1
# $Id$
d105 1
a105 1
#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs 
d129 1
a129 1
OBJ = $(SRC:.c=.o) $(CXXSRC:.cpp=.o) $(ASRC:.S=.o) 
d144 1
a144 1
build: elf hex 
d151 1
a151 1
# refer to this new, automatically generated, file. 
d162 1
a162 1
lss: applet/$(TARGET).lss 
d165 1
a165 1
# Program the device.  
d185 1
a185 1
--change-section-address .eeprom-0x810000 
d214 1
a214 1
applet/$(TARGET).elf: $(TARGET).pde applet/core.a 
d223 1
a223 1
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@@ 
d227 1
a227 1
	$(CC) -c $(ALL_CFLAGS) $< -o $@@ 
@


1.1.1.1
log
@import arduino 22

Arduino is an open-source electronics prototyping platform based on
flexible, easy-to-use hardware and software. It's intended for artists,
designers, hobbyists, and anyone interested in creating interactive
objects or environments. 
[..]
This package contains the libraries, header files and tools to develop
Arduino sketches. It does not include the Arduino IDE frontend.

based on work from and ok ckuethe@@
@
text
@@
