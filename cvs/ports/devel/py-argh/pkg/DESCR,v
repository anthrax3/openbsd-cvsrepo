head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.16
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.8
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.10
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.6
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	landry_20130810:1.1.1.1
	landry:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.08.10.13.40.37;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.08.10.13.40.37;	author landry;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@Did you ever say "argh" trying to remember the details of optparse or
argparse API? If yes, this package may be useful for you. It provides a
very simple wrapper for argparse with support for hierarchical commands
that can be bound to modules or classes. Argparse can do it; argh makes
it easy.
@


1.1.1.1
log
@Import py-argh 0.21.2.

Did you ever say "argh" trying to remember the details of optparse or
argparse API? If yes, this package may be useful for you. It provides a
very simple wrapper for argparse with support for hierarchical commands
that can be bound to modules or classes. Argparse can do it; argh makes
it easy.

ok ajacoutot@@
@
text
@@
