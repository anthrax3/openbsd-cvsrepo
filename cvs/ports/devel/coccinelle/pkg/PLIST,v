head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.8.0.14
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.10
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	sthen20110514:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2016.06.24.15.59.11;	author krw;	state Exp;
branches;
next	1.11;
commitid	uNq7PAnG26SO2XnT;

1.11
date	2015.10.29.15.41.36;	author sthen;	state Exp;
branches;
next	1.10;
commitid	TSo2trZwozDVp3J0;

1.10
date	2015.10.27.14.43.07;	author sthen;	state Exp;
branches;
next	1.9;
commitid	fCrlbSItEm96Kw0T;

1.9
date	2015.09.13.15.21.15;	author sthen;	state Exp;
branches;
next	1.8;
commitid	5RIVhZ8FZczDXszL;

1.8
date	2012.11.27.10.08.00;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.12.19.59.33;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2011.09.08.20.09.00;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.22.00.37.50;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.16.23.24.49;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.12.12.31.47;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.15.10.17.38;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.14.15.02.50;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.14.15.02.50;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Upgrade Ocaml to 4.3.0 and tweak ports the minimal amount to keep
them all compiling.

Tweaks include updating

ocaml-batteries 2.3.1 -> 2.5.0
ocaml-lwt 2.4.8 -> 2.5.2
ocaml-ppx-tools 0.99.2 -> 4.03.0
ocaml-camlp4 4.02+6 -> 4.03+1
utop 1.15 -> 1.19.2

and fixes to coccinelle and wyrd to let them build on bytecode archs.

Other necessary tweaks from the various homes of the projects.

Everything still builds on amd64 (native and bytecode) and sparc64 (bytecode).

ok anil@@ sthen@@ so final 4.3.0 tweaks can be done in-tree.
@
text
@@@comment $OpenBSD: PLIST,v 1.11 2015/10/29 15:41:36 sthen Exp $
%%dynlink%%
bin/pycocci
bin/spatch
bin/spatch.byte
lib/coccinelle/
lib/coccinelle/ocaml/
lib/coccinelle/ocaml/ast0_cocci.cmi
lib/coccinelle/ocaml/ast_c.cmi
lib/coccinelle/ocaml/ast_cocci.cmi
lib/coccinelle/ocaml/coccilib.cmi
lib/coccinelle/ocaml/common.cmi
lib/coccinelle/ocaml/config.cmi
lib/coccinelle/ocaml/exposed_modules.cmi
lib/coccinelle/ocaml/flag.cmi
lib/coccinelle/ocaml/iteration.cmi
lib/coccinelle/ocaml/lexer_c.cmi
lib/coccinelle/ocaml/lib_parsing_c.cmi
lib/coccinelle/ocaml/ocamlcocci_aux.cmi
lib/coccinelle/ocaml/parse_c.cmi
lib/coccinelle/ocaml/parser_c.cmi
lib/coccinelle/ocaml/prepare_ocamlcocci.cmi
lib/coccinelle/ocaml/pretty_print_c.cmi
lib/coccinelle/ocaml/regexp.cmi
lib/coccinelle/ocaml/run_ocamlcocci.cmi
lib/coccinelle/ocaml/type_cocci.cmi
lib/coccinelle/ocaml/visitor_c.cmi
lib/coccinelle/python/
lib/coccinelle/python/coccilib/
lib/coccinelle/python/coccilib/__init__.py
lib/coccinelle/python/coccilib/coccigui/
lib/coccinelle/python/coccilib/coccigui/__init__.py
lib/coccinelle/python/coccilib/coccigui/coccigui.py
lib/coccinelle/python/coccilib/coccigui/pycoccimodel.py
lib/coccinelle/python/coccilib/coccigui/pygui.glade
lib/coccinelle/python/coccilib/coccigui/pygui.gladep
lib/coccinelle/python/coccilib/coccigui/vim.py
lib/coccinelle/python/coccilib/coccigui/vimcom.py
lib/coccinelle/python/coccilib/coccigui/vimeditor.py
lib/coccinelle/python/coccilib/coccigui/vimembed.py
lib/coccinelle/python/coccilib/elems.py
lib/coccinelle/python/coccilib/org.py
lib/coccinelle/python/coccilib/output.py
lib/coccinelle/python/coccilib/report.py
lib/coccinelle/python/coccilib/trac.py
lib/coccinelle/python/coccilib/xml_firehose.py
@@bin lib/coccinelle/spatch
lib/coccinelle/standard.h
lib/coccinelle/standard.iso
lib/ocaml/stublibs/dllpycaml_stubs.so
@@man man/man1/pycocci.1
@@man man/man1/spatch.1
@@man man/man3/Coccilib.3
share/doc/coccinelle/
share/doc/coccinelle/contents_motif.gif
share/doc/coccinelle/index.html
share/doc/coccinelle/main_grammar.css
share/doc/coccinelle/main_grammar.html
share/doc/coccinelle/main_grammar.pdf
share/doc/coccinelle/main_grammar001.html
share/doc/coccinelle/main_grammar002.html
share/doc/coccinelle/main_grammar003.html
share/doc/coccinelle/main_grammar004.html
share/doc/coccinelle/main_grammar005.html
share/doc/coccinelle/main_grammar006.html
share/doc/coccinelle/main_grammar007.html
share/doc/coccinelle/main_grammar008.html
share/doc/coccinelle/main_grammar009.html
share/doc/coccinelle/main_grammar010.html
share/doc/coccinelle/main_grammar011.html
share/doc/coccinelle/main_grammar012.html
share/doc/coccinelle/main_grammar013.html
share/doc/coccinelle/main_grammar014.html
share/doc/coccinelle/main_grammar015.html
share/doc/coccinelle/manual.pdf
share/doc/coccinelle/next_motif.gif
share/doc/coccinelle/options.pdf
share/doc/coccinelle/previous_motif.gif
@


1.11
log
@update to coccinelle-1.0.4
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.10 2015/10/27 14:43:07 sthen Exp $
a27 1
lib/coccinelle/ocaml/yes_prepare_ocamlcocci.cmi
@


1.10
log
@update to coccinelle-1.0.3
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.9 2015/09/13 15:21:15 sthen Exp $
a5 1
bin/spgen
a48 2
lib/coccinelle/spgen/
@@bin lib/coccinelle/spgen/spgen
a53 1
@@man man/man1/spgen.1
@


1.9
log
@update to coccinelle-1.0.2
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.8 2012/11/27 10:08:00 sthen Exp $
d6 1
d50 2
d57 1
@


1.8
log
@- fix packaging on architectures which are native, non-dynlink for OCaml

- set CLEANDEPENDS_devel_coccinelle=No to fix regress now that dependencies
are auto-cleaned (coccinelle must itself be installed to run the tests)
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.7 2012/10/12 19:59:33 sthen Exp $
d3 1
d6 45
a50 2
lib/ocaml/
lib/ocaml/stublibs/
d52 1
d55 25
a79 87
share/coccinelle/
share/coccinelle/commons/
share/coccinelle/commons/commands.cmi
share/coccinelle/commons/common.cmi
share/coccinelle/commons/common_extra.cmi
share/coccinelle/commons/glimpse.cmi
share/coccinelle/commons/interfaces.cmi
share/coccinelle/commons/oarray.cmi
share/coccinelle/commons/oassoc.cmi
share/coccinelle/commons/objet.cmi
share/coccinelle/commons/ocollection.cmi
share/coccinelle/commons/ograph.cmi
share/coccinelle/commons/ograph_extended.cmi
share/coccinelle/commons/ograph_simple.cmi
share/coccinelle/commons/osequence.cmi
share/coccinelle/commons/oset.cmi
share/coccinelle/commons/parser_combinators.cmi
share/coccinelle/commons/seti.cmi
share/coccinelle/globals/
share/coccinelle/globals/iteration.cmi
share/coccinelle/ocaml/
share/coccinelle/ocaml/coccilib.cmi
share/coccinelle/parsing_c/
share/coccinelle/parsing_c/ast_c.cmi
share/coccinelle/parsing_c/comment_annotater_c.cmi
share/coccinelle/parsing_c/compare_c.cmi
share/coccinelle/parsing_c/control_flow_c.cmi
share/coccinelle/parsing_c/control_flow_c_build.cmi
share/coccinelle/parsing_c/cpp_analysis_c.cmi
share/coccinelle/parsing_c/cpp_ast_c.cmi
share/coccinelle/parsing_c/cpp_token_c.cmi
share/coccinelle/parsing_c/flag_parsing_c.cmi
share/coccinelle/parsing_c/lexer_c.cmi
share/coccinelle/parsing_c/lexer_parser.cmi
share/coccinelle/parsing_c/lib_parsing_c.cmi
share/coccinelle/parsing_c/parse_c.cmi
share/coccinelle/parsing_c/parser_c.cmi
share/coccinelle/parsing_c/parsing_consistency_c.cmi
share/coccinelle/parsing_c/parsing_hacks.cmi
share/coccinelle/parsing_c/parsing_recovery_c.cmi
share/coccinelle/parsing_c/parsing_stat.cmi
share/coccinelle/parsing_c/pretty_print_c.cmi
share/coccinelle/parsing_c/semantic_c.cmi
share/coccinelle/parsing_c/test_parsing_c.cmi
share/coccinelle/parsing_c/token_c.cmi
share/coccinelle/parsing_c/token_helpers.cmi
share/coccinelle/parsing_c/token_views_c.cmi
share/coccinelle/parsing_c/type_annoter_c.cmi
share/coccinelle/parsing_c/type_c.cmi
share/coccinelle/parsing_c/unparse_c.cmi
share/coccinelle/parsing_c/unparse_cocci.cmi
share/coccinelle/parsing_c/unparse_hrule.cmi
share/coccinelle/parsing_c/visitor_c.cmi
share/coccinelle/python/
share/coccinelle/python/coccilib/
share/coccinelle/python/coccilib/__init__.py
share/coccinelle/python/coccilib/__init__.pyc
share/coccinelle/python/coccilib/coccigui/
share/coccinelle/python/coccilib/coccigui/__init__.py
share/coccinelle/python/coccilib/coccigui/__init__.pyc
share/coccinelle/python/coccilib/coccigui/coccigui.py
share/coccinelle/python/coccilib/coccigui/coccigui.pyc
share/coccinelle/python/coccilib/coccigui/pycoccimodel.py
share/coccinelle/python/coccilib/coccigui/pycoccimodel.pyc
share/coccinelle/python/coccilib/coccigui/pygui.glade
share/coccinelle/python/coccilib/coccigui/pygui.gladep
share/coccinelle/python/coccilib/coccigui/vim.py
share/coccinelle/python/coccilib/coccigui/vim.pyc
share/coccinelle/python/coccilib/coccigui/vimcom.py
share/coccinelle/python/coccilib/coccigui/vimcom.pyc
share/coccinelle/python/coccilib/coccigui/vimeditor.py
share/coccinelle/python/coccilib/coccigui/vimeditor.pyc
share/coccinelle/python/coccilib/coccigui/vimembed.py
share/coccinelle/python/coccilib/coccigui/vimembed.pyc
share/coccinelle/python/coccilib/elems.py
share/coccinelle/python/coccilib/elems.pyc
share/coccinelle/python/coccilib/org.py
share/coccinelle/python/coccilib/org.pyc
share/coccinelle/python/coccilib/output.py
share/coccinelle/python/coccilib/output.pyc
share/coccinelle/python/coccilib/report.py
share/coccinelle/python/coccilib/report.pyc
share/coccinelle/python/coccilib/trac.py
share/coccinelle/python/coccilib/trac.pyc
@@bin share/coccinelle/spatch
share/coccinelle/standard.h
share/coccinelle/standard.iso
@


1.7
log
@update to coccinelle 1.0.0-rc15
@
text
@d1 2
a2 1
@@comment $OpenBSD: PLIST,v 1.6 2011/09/08 20:09:00 sthen Exp $
a4 2
%%native%%
%%SHARED%%
d7 1
@


1.6
log
@bytecode-compile the python parts
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.5 2011/08/22 00:37:50 sthen Exp $
d3 5
a7 1
lib/dllpycaml_stubs.so
d12 1
a20 1
share/coccinelle/commons/ofullcommon.cmi
a27 1
share/coccinelle/commons/sexp_common.cmi
d94 1
a94 1
@@bin share/coccinelle/spatch${OCAMLOPT}
@


1.5
log
@Update to coccinelle 1.0.0-rc6.
N.B. The operator to match a regexp changed to the perl style '=~'.
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.4 2011/06/16 23:24:49 sthen Exp $
d63 1
d66 1
d68 1
d70 1
d74 1
d76 1
d78 1
d80 1
d82 1
d84 1
d86 1
d88 1
d90 1
@


1.4
log
@update to coccinelle 1.0rc3 and fix running the regression tests

- Better handling of the case of a matched declaration that should only
  be replaced by other top level things.
- Improved filtering of result of matching atomic patterns
- Drop positions before creating function prototype rules
- Adjust position of { introduced by adding multiple statements in a
  single-statement position
- Drop newline after function call ( when all arguments on that line are
  eliminated
- Accept removal of a single declaration, replaced by arbitrary,
  non-declaration code
- smpl_spacing takes into account newlines, indentation
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.3 2011/06/12 12:31:47 sthen Exp $
a2 2
@@comment bin/spatch.byte
@@comment bin/spatch.opt
@


1.3
log
@update to coccinelle 1.0.0-rc2, tested by mk@@.
(yes I know there is an rc3, will update later).
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.2 2011/05/15 10:17:38 sthen Exp $
d7 1
@


1.2
log
@- Coccinelle native-code builds require dynlib support so only attempt
to use this where dynlib is available

- on native-code arch, only build the native version and install this
to be used by default - it's about 5x faster
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.1.1.1 2011/05/14 15:02:50 sthen Exp $
d3 1
a4 1
@@comment bin/spatch.byte
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@comment $OpenBSD$
d3 2
a4 1
bin/spatch.opt
d79 1
a79 2
@@bin share/coccinelle/spatch
@@bin share/coccinelle/spatch.opt
@


1.1.1.1
log
@import ports/net/coccinelle, help from kili@@ and Amit Kulkarni.
tweak & ok mk@@.

Coccinelle is a program matching and transformation engine which
provides the language SmPL (Semantic Patch Language) for specifying
desired matches and transformations in C code.

Coccinelle was initially targeted towards performing collateral
evolutions in Linux. Such evolutions comprise the changes that are
needed in client code in response to evolutions in library APIs, and may
include modifications such as renaming a function, adding a function
argument whose value is somehow context-dependent, and reorganizing a
data structure.

Beyond collateral evolutions, Coccinelle is successfully used (by INRIA
and others) for finding and fixing bugs in systems code.
@
text
@@
