head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	sthen20110514:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2012.10.12.19.59.33;	author sthen;	state dead;
branches;
next	1.4;

1.4
date	2012.07.18.08.04.43;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.30.10.20.11;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.16.08.26.16;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.14.15.02.50;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.05.14.15.02.50;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to coccinelle 1.0.0-rc15
@
text
@$OpenBSD: patch-configure,v 1.4 2012/07/18 08:04:43 sthen Exp $
--- configure.orig	Sun Mar 11 22:00:27 2012
+++ configure	Wed Mar 14 23:37:53 2012
@@@@ -236,7 +236,7 @@@@ if ($opt eq ".opt") {
 pr2 "";
 
 $error += check_config(
-  "make -v 2>&1 |grep Make|",
+  "${MAKE_PROGRAM} -v 2>&1 |grep Make|",
   "GNU Make [^0-9]*3\.[0-9]+.*", #version 3.79.1, 3.81
   "make (gnu version) is present.",
   "The program gnu make is missing or is not a good version.
@


1.4
log
@update to Cocinelle 1.0.0-rc11
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.3 2011/08/30 10:20:11 sthen Exp $
@


1.3
log
@update to coccinelle 1.0 rc7
Note: !=~ has changed to !~
@
text
@d1 4
a4 4
$OpenBSD: patch-configure,v 1.2 2011/08/16 08:26:16 sthen Exp $
--- configure.orig	Wed Aug 10 13:32:11 2011
+++ configure	Sat Aug 27 21:28:10 2011
@@@@ -186,7 +186,7 @@@@ if ($opt eq ".opt") {
a12 40
@@@@ -205,7 +205,7 @@@@ We need  3.XX",
 my $PY_VERSION;
 if($python) {
     if(check_config(
-	"python --version 2>&1 |",
+	"${MODPY_BIN} --version 2>&1 |",
 	'^Python 2\.([4567]|[4567]\.\S*)$',
 	"python is present",
 	"python is missing or is not a good version."
@@@@ -214,8 +214,8 @@@@ if($python) {
 	$python=0;
     }
     if($python) {
-	my $PY_PREFIX = `python pycaml/getprefix.py | tr -d '\n'`;
-	$PY_VERSION = `python pycaml/getversion.py | tr -d '\n'`;
+	my $PY_PREFIX = `${MODPY_BIN} pycaml/getprefix.py | tr -d '\n'`;
+	$PY_VERSION = `${MODPY_BIN} pycaml/getversion.py | tr -d '\n'`;
 	my $python_hdr = "$PY_PREFIX/include/python$PY_VERSION/Python.h";
 	if(check_config(
 	    "ls $python_hdr 2> /dev/null | ",
@@@@ -405,16 +405,16 @@@@ OPTBIN=$opt
 my $pythonprefix = $python ? "yes" : "no";
 pr2 "Support for python scripting: $pythonprefix";
 `cd python; ln -sf ${pythonprefix}_pycocci.ml pycocci.ml; `;
-`cd python; make depend`;
+`cd python; ${MAKE_PROGRAM} depend`;
 
 pr2 "Support for ocaml scripting: $ocamlprefix";
 `cd ocaml; ln -sf ${ocamlprefix}_prepare_ocamlcocci.ml prepare_ocamlcocci.ml;`;
-`cd ocaml; make depend`;
+`cd ocaml; ${MAKE_PROGRAM} depend`;
 
 my $pcresuffix = $pcre ? "pcre" : "str";
 pr2 "Support for regexp: $pcresuffix";
 `cd globals; ln -sf regexp_${pcresuffix}.ml regexp.ml; touch regexp.ml;`;
-`cd globals; make depend`;
+`cd globals; ${MAKE_PROGRAM} depend`;
 
 pr2 "Modifying globals/config.ml";
 my $command = "perl -p -e 's#Not_found.\*#Not_found->\\\"$src\\\"#' globals/config.ml.in > globals/config.ml";
@


1.2
log
@update to Coccinelle 1.0.0rc5
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.1.1.1 2011/05/14 15:02:50 sthen Exp $
d3 1
a3 1
+++ configure	Thu Aug 11 14:44:53 2011
d33 1
a33 1
@@@@ -405,11 +405,11 @@@@ OPTBIN=$opt
d47 6
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- configure.orig	Fri Jan 28 22:37:25 2011
+++ configure	Thu May  5 22:19:13 2011
@@@@ -179,7 +179,7 @@@@ if ($opt eq ".opt") {
d13 1
a13 1
@@@@ -198,7 +198,7 @@@@ We need  3.XX",
d22 1
a22 1
@@@@ -207,8 +207,8 @@@@ if($python) {
d33 1
a33 1
@@@@ -377,11 +377,11 @@@@ OPTBIN=$opt
d45 2
a46 2
 pr2 "Modifying globals/config.ml";
 my $command = "perl -p -e 's#Not_found.\*#Not_found->\\\"$src\\\"#' globals/config.ml.in > globals/config.ml";
@


1.1.1.1
log
@import ports/net/coccinelle, help from kili@@ and Amit Kulkarni.
tweak & ok mk@@.

Coccinelle is a program matching and transformation engine which
provides the language SmPL (Semantic Patch Language) for specifying
desired matches and transformations in C code.

Coccinelle was initially targeted towards performing collateral
evolutions in Linux. Such evolutions comprise the changes that are
needed in client code in response to evolutions in library APIs, and may
include modifications such as renaming a function, adding a function
argument whose value is somehow context-dependent, and reorganizing a
data structure.

Beyond collateral evolutions, Coccinelle is successfully used (by INRIA
and others) for finding and fixing bugs in systems code.
@
text
@@
