head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.16
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.14
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	jasper_20102311:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.09.21.17.03.17;	author kili;	state dead;
branches;
next	1.1;
commitid	FWWW8cb3fTYDRPDc;

1.1
date	2010.11.23.20.10.12;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.11.23.20.10.12;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove hs-atom. Not used by anything.
@
text
@Atom is a Haskell DSL for designing hard realtime embedded software.
Based on guarded atomic actions (similar to STM), Atom enables highly
concurrent programming without the need for mutex locking. In addition,
Atom performs compile-time task scheduling and generates code with
deterministic execution time and constant memory use, simplifying the
process of timing verification and memory consumption in hard realtime
applications. Without mutex locking and run-time task scheduling, Atom
eliminates the need and overhead of RTOSs for many embedded
applications.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import hs-atom 1.0.7

Atom is a Haskell DSL for designing hard realtime embedded software.
Based on guarded atomic actions (similar to STM), Atom enables highly
concurrent programming without the need for mutex locking. In addition,
Atom performs compile-time task scheduling and generates code with
deterministic execution time and constant memory use, simplifying the
process of timing verification and memory consumption in hard realtime
applications. You can now program your Arduino with Haskell. [..]

ok kili@@
@
text
@@
