head	1.1;
access;
symbols
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.03.23.11.38.36;	author jasper;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	Fx1JSym4gHXUmyDt;

1.1.2.1
date	2015.03.23.11.38.36;	author jasper;	state Exp;
branches;
next	;
commitid	Fx1JSym4gHXUmyDt;

1.1.4.1
date	2015.03.23.11.38.43;	author jasper;	state Exp;
branches;
next	;
commitid	GeN8Cbt2N8mBfGJh;


desc
@@


1.1
log
@file patch-dulwich__pack_c was initially added on branch OPENBSD_5_6.
@
text
@@


1.1.4.1
log
@security fix for CVE-2015-0838 python-dulwich: buffer overflow in apply_delta()

originally spotted by sthen@@
ok czarkoff@@
@
text
@a0 30
$OpenBSD$

Security fix for CVE-2015-0838 python-dulwich: buffer overflow in apply_delta()

--- dulwich/_pack.c.orig	Sun Sep 22 22:27:01 2013
+++ dulwich/_pack.c	Mon Mar 23 12:16:08 2015
@@@@ -146,10 +146,14 @@@@ static PyObject *py_apply_delta(PyObject *self, PyObje
 				break;
 			memcpy(out+outindex, src_buf+cp_off, cp_size);
 			outindex += cp_size;
+			dest_size -= cp_size;
 		} else if (cmd != 0) {
+			if (cmd > dest_size)
+				break;
 			memcpy(out+outindex, delta+index, cmd);
 			outindex += cmd;
 			index += cmd;
+			dest_size -= cmd;
 		} else {
 			PyErr_SetString(PyExc_ValueError, "Invalid opcode 0");
 			Py_DECREF(ret);
@@@@ -167,7 +171,7 @@@@ static PyObject *py_apply_delta(PyObject *self, PyObje
 		return NULL;
 	}
 
-	if (dest_size != outindex) {
+	if (dest_size != 0) {
 		PyErr_SetString(PyExc_ValueError, "dest size incorrect");
 		Py_DECREF(ret);
 		return NULL;
@


1.1.2.1
log
@security fix for CVE-2015-0838 python-dulwich: buffer overflow in apply_delta()

originally spotted by sthen@@
ok czarkoff@@
@
text
@a0 30
$OpenBSD$

Security fix for CVE-2015-0838 python-dulwich: buffer overflow in apply_delta()

--- dulwich/_pack.c.orig	Sun Sep 22 22:27:01 2013
+++ dulwich/_pack.c	Mon Mar 23 12:16:08 2015
@@@@ -146,10 +146,14 @@@@ static PyObject *py_apply_delta(PyObject *self, PyObje
 				break;
 			memcpy(out+outindex, src_buf+cp_off, cp_size);
 			outindex += cp_size;
+			dest_size -= cp_size;
 		} else if (cmd != 0) {
+			if (cmd > dest_size)
+				break;
 			memcpy(out+outindex, delta+index, cmd);
 			outindex += cmd;
 			index += cmd;
+			dest_size -= cmd;
 		} else {
 			PyErr_SetString(PyExc_ValueError, "Invalid opcode 0");
 			Py_DECREF(ret);
@@@@ -167,7 +171,7 @@@@ static PyObject *py_apply_delta(PyObject *self, PyObje
 		return NULL;
 	}
 
-	if (dest_size != outindex) {
+	if (dest_size != 0) {
 		PyErr_SetString(PyExc_ValueError, "dest size incorrect");
 		Py_DECREF(ret);
 		return NULL;
@

