head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.4
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.2
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.11.10.10.08.04;	author jca;	state Exp;
branches;
next	;
commitid	0B9Y2tVRTiPh6N5d;


desc
@@


1.1
log
@Update to sdl2-2.0.5

Initial diff from David Carlier.  Add a patch to disable SDL_GetBasePath
support, as we don't have kernel support for that feature.  Ports bulk
and ok ajacoutot@@
@
text
@$OpenBSD$

Disable SDL_GetBasePath implementation, not functional.

--- src/filesystem/unix/SDL_sysfilesystem.c.orig	Thu Oct 20 05:56:26 2016
+++ src/filesystem/unix/SDL_sysfilesystem.c	Fri Oct 21 15:15:01 2016
@@@@ -91,24 +91,6 @@@@ SDL_GetBasePath(void)
         }
     }
 #endif
-#if defined(__OPENBSD__)
-    char **retvalargs;
-    size_t len;
-    const int mib[] = { CTL_KERN, KERN_PROC_ARGS, getpid(), KERN_PROC_ARGV };
-    if (sysctl(mib, 4, NULL, &len, NULL, 0) != -1) {
-        retvalargs = SDL_malloc(len);
-        if (!retvalargs) {
-            SDL_OutOfMemory();
-            return NULL;
-        }
-        sysctl(mib, 4, retvalargs, &len, NULL, 0);
-        retval = SDL_malloc(PATH_MAX + 1);
-        if (retval)
-            realpath(retvalargs[0], retval);
-
-        SDL_free(retvalargs);
-    }
-#endif
 #if defined(__SOLARIS__)
     const char *path = getexecname();
     if ((path != NULL) && (path[0] == '/')) { /* must be absolute path... */
@
