head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.07.19.07.09.00;	author kili;	state dead;
branches;
next	1.1;

1.1
date	2013.01.17.13.19.05;	author kili;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to darcs-2.8.4.
@
text
@$OpenBSD: patch-src_Darcs_Repository_hs,v 1.1 2013/01/17 13:19:05 kili Exp $
--- src/Darcs/Repository.hs.orig	Mon May 14 13:10:13 2012
+++ src/Darcs/Repository.hs	Thu Jan 17 12:41:17 2013
@@@@ -302,19 +302,19 @@@@ removeMetaFiles :: IO ()
 removeMetaFiles = mapM_ (removeFile . (darcsdir </>)) .
   filter ("meta-" `isPrefixOf`) =<< getDirectoryContents darcsdir
 
-unpackBasic :: Cache -> Tar.Entries -> IO ()
+unpackBasic :: Show e => Cache -> Tar.Entries e -> IO ()
 unpackBasic c x = do
   withControlMVar $ \mv -> unpackTar c (basicMetaHandler c mv) x
   removeMetaFiles
 
-unpackPatches :: Cache -> [String] -> Tar.Entries -> IO ()
+unpackPatches :: Show e => Cache -> [String] -> Tar.Entries e -> IO ()
 unpackPatches c ps x = do
   withControlMVar $ \mv -> unpackTar c (patchesMetaHandler c ps mv) x
   removeMetaFiles
 
-unpackTar :: Cache -> IO () -> Tar.Entries -> IO ()
+unpackTar :: Show e => Cache -> IO () -> Tar.Entries e -> IO ()
 unpackTar  _ _ Tar.Done = return ()
-unpackTar  _ _ (Tar.Fail e)= fail e
+unpackTar  _ _ (Tar.Fail e)= fail $ show e
 unpackTar c mh (Tar.Next x xs) = case Tar.entryContent x of
   Tar.NormalFile x' _ -> do
     let p = Tar.entryPath x
@


1.1
log
@Unbreak with hs-tar-0.4.0.1.

Also, update to darcs-2.8.3.
@
text
@d1 1
a1 1
$OpenBSD$
@

