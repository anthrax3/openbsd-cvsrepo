head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.14
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.12
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	edd_20140427:1.1.1.1
	edd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2014.04.27.16.11.24;	author edd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.04.27.16.11.24;	author edd;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@The Secure Sockets layer is only actually secure if you check the
hostname in the certificate returned by the server to which you are
connecting, and verify that it matches to hostname that you are trying
to reach.

But the matching logic, defined in RFC2818, can be a bit tricky to
implement on your own. So the ssl package in the Standard Library of
Python 3.2 and greater now includes a match_hostname() function for
performing this check instead of requiring every application to
implement the check separately.

This backport brings match_hostname() to users of earlier versions of
Python.
@


1.1.1.1
log
@Import py-backports-ssl-match-hostname.

Needed for upcoming py-tornado (and ultimately ipython2) update.

OK rpointel@@

@
text
@@
