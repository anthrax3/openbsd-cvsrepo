head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.20
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	zhuk_20130205:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.02.05.10.36.34;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.02.05.10.36.34;	author zhuk;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@An extremely memory-efficient hash map implementation. 2 bits/entry
overhead! The SparseHash library contains several hash map
implementations, including implementations that optimize for space
or speed.

These hashtable implementations are similar in API to SGI's hash_map
class and the tr1 unordered_map class, but with different performance
characteristics. It's easy to replace hash_map or unordered_map by
sparse_hash_map or dense_hash_map in C++ code.

They also contain code to serialize and unserialize from disk.
@


1.1.1.1
log
@An extremely memory-efficient hash map implementation. 2 bits/entry
overhead! The SparseHash library contains several hash map
implementations, including implementations that optimize for space
or speed.

These hashtable implementations are similar in API to SGI's hash_map
class and the tr1 unordered_map class, but with different performance
characteristics. It's easy to replace hash_map or unordered_map by
sparse_hash_map or dense_hash_map in C++ code.

They also contain code to serialize and unserialize from disk.

This is a prerequisite of upcoming Clementine.

okay@@ landry
@
text
@@
