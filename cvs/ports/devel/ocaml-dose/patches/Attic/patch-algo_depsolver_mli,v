head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	chrisz_20141025:1.1.1.1
	chrisz:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.08.30.15.56.12;	author avsm;	state dead;
branches;
next	1.1;
commitid	ei46LXoLC3tn0SJ3;

1.1
date	2014.10.25.17.05.14;	author chrisz;	state Exp;
branches
	1.1.1.1;
next	;
commitid	5zjfFDyL4wFVPb68;

1.1.1.1
date	2014.10.25.17.05.14;	author chrisz;	state Exp;
branches;
next	;
commitid	5zjfFDyL4wFVPb68;


desc
@@


1.2
log
@update to ocaml-dose-3.3

Includes local patches for OPAM compatibility, as with the previous version

ok jca@@, tested by krw@@ daniel@@ jsg@@
@
text
@$OpenBSD: patch-algo_depsolver_mli,v 1.1 2014/10/25 17:05:14 chrisz Exp $

Changes for OPAM

--- algo/depsolver.mli.orig	Mon May 26 08:11:52 2014
+++ algo/depsolver.mli	Tue Sep  2 23:11:58 2014
@@@@ -135,3 +135,12 @@@@ type solver_result =
 *)
 val check_request : ?cmd : string -> ?callback:(int array * Diagnostic.diagnosis -> unit) -> 
   ?criteria:string -> ?explain : bool -> Cudf.cudf -> solver_result
+
+(** Same as [check_request], but allows to specify any function to call the
+    external solver. It should raise [Depsolver.Unsat] on failure *)
+val check_request_using:
+  ?call_solver:(Cudf.cudf -> Cudf.preamble option * Cudf.universe) ->
+  ?callback:(int array * Diagnostic.diagnosis -> unit) ->
+  ?criteria:string ->
+  ?explain : bool ->
+  Cudf.cudf -> solver_result
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import ocaml-dose - dependency of OPAM.

ok krw@@
@
text
@@
