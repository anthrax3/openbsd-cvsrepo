head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	sthen_20141118:1.1.1.2
	sthen:1.1.1
	OPENBSD_4_5:1.1.1.1.0.10
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.8
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.6
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.4
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	simon:1.1.1.1
	catalyst:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.11.18.22.32.24;	author sthen;	state Exp;
branches;
next	1.2;
commitid	G2HpNkPKV5BArxdZ;

1.2
date	2009.03.08.16.50.20;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2006.11.04.13.54.35;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.04.13.54.35;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.18.22.31.05;	author sthen;	state Exp;
branches;
next	;
commitid	tgp1vQEb4kW0av9C;


desc
@@


1.3
log
@merge
@
text
@Provides a simple but, hopefully, extensible way of having 'plugins'
for your module. Essentially all it does is export a method into your
namespace that looks through a search path for .pm files and turn those
into class names. Optionally it instantiates those classes for you.
@


1.2
log
@- remove perl modules that moved into base as of openbsd 4.5

ok simon@@, "sure" naddy@@
@
text
@d2 3
a4 7
for your module, by exporting a method into your namespace that
looks through a search path for .pm files and turn those into class
names.

As an option, it can instantiate those classes for you.


@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@`plugins' oo mechanism for perl modules. Prerequisite for Catalyst.
@
text
@@


1.1.1.2
log
@import devel/p5-Module-Pluggable, previously in base perl, ok giovanni@@ abieber@@

Provides a simple but, hopefully, extensible way of having 'plugins'
for your module. Essentially all it does is export a method into your
namespace that looks through a search path for .pm files and turn those
into class names. Optionally it instantiates those classes for you.
@
text
@d2 7
a8 3
for your module. Essentially all it does is export a method into your
namespace that looks through a search path for .pm files and turn those
into class names. Optionally it instantiates those classes for you.
@

