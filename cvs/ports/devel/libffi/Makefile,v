head	1.35;
access;
symbols
	OPENBSD_6_2:1.35.0.6
	OPENBSD_6_2_BASE:1.35
	OPENBSD_6_1:1.35.0.4
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.2
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.30.0.4
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.27.0.4
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.27.0.2
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.24.0.2
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	jasper_20090923:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.35
date	2016.05.26.20.48.50;	author jca;	state Exp;
branches;
next	1.34;
commitid	96E1RF5RKSgu28eG;

1.34
date	2016.03.23.22.50.29;	author sthen;	state Exp;
branches;
next	1.33;
commitid	gDMdfVkgxNYfdBoO;

1.33
date	2016.03.11.19.59.13;	author naddy;	state Exp;
branches;
next	1.32;
commitid	pguKLBEFv33DrgKU;

1.32
date	2016.01.28.08.40.46;	author jasper;	state Exp;
branches;
next	1.31;
commitid	fDXLZHdeuh3InIIy;

1.31
date	2015.09.29.07.45.33;	author jasper;	state Exp;
branches;
next	1.30;
commitid	sSAqNcxgNXBL8hNK;

1.30
date	2015.04.24.13.48.27;	author dcoppa;	state Exp;
branches;
next	1.29;
commitid	Ak02qNsOgnxuqtV8;

1.29
date	2015.04.06.12.11.39;	author jasper;	state Exp;
branches;
next	1.28;
commitid	FjEEtUIlkhe7AFcI;

1.28
date	2015.03.16.18.07.42;	author naddy;	state Exp;
branches;
next	1.27;
commitid	IJdm3Zowcdkcxp5X;

1.27
date	2014.06.04.17.40.27;	author jasper;	state Exp;
branches;
next	1.26;
commitid	1Q2YRNXbzPxCMReq;

1.26
date	2014.04.20.16.44.30;	author jasper;	state Exp;
branches;
next	1.25;

1.25
date	2014.04.20.16.09.47;	author jasper;	state Exp;
branches;
next	1.24;

1.24
date	2013.10.23.10.32.01;	author fgsch;	state Exp;
branches;
next	1.23;

1.23
date	2013.07.15.19.01.56;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2013.07.14.15.29.32;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2013.05.01.10.11.54;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2013.04.01.11.53.52;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2013.03.21.16.22.51;	author jasper;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.21.15.52.08;	author jasper;	state Exp;
branches;
next	1.17;

1.17
date	2013.03.21.08.45.15;	author ajacoutot;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.11.10.50.09;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2012.09.01.18.15.06;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2012.08.05.00.16.50;	author naddy;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.05.16.11.01;	author jasper;	state Exp;
branches;
next	1.12;

1.12
date	2010.11.15.19.45.59;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2010.10.18.17.47.53;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.19.20.19.15;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.23.19.08.55;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.09.12.18.45;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.12.16.39.00;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.23.15.39.51;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.10.22.48.54;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.10.18.18.14;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.25.15.59.15;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.25.14.33.05;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.23.20.55.46;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.09.23.20.55.46;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Stop using RWX memory for closures.

This switches libffi to the use of two different mappings per closure,
one with RW access, the other with RX access.  Even if not perfect it is
already an improvement.  Soon RWX memory will be unavailable by default,
so fixing libffi means that we don't have to tweak an unknown percentage
of the 565 ports that link against it...

Initial diff from sthen@@ who also did most of the tests.
ok sthen@@ jasper@@ (maintainer)
@
text
@# $OpenBSD: Makefile,v 1.34 2016/03/23 22:50:29 sthen Exp $

COMMENT=		Foreign Function Interface

DISTNAME=		libffi-3.2.1
REVISION=		2
SHARED_LIBS +=  ffi                  1.2      # .6.4
CATEGORIES=		devel

MAINTAINER=		Jasper Lievisse Adriaanse <jasper@@openbsd.org>

HOMEPAGE=		http://sourceware.org/libffi/

# BSD
PERMIT_PACKAGE_CDROM=	Yes

WANTLIB += pthread

MASTER_SITES=		ftp://sourceware.org/pub/libffi/

TEST_DEPENDS=		devel/dejagnu

CONFIGURE_STYLE=	gnu

FAKE_FLAGS+=		includesdir="${PREFIX}/include"

.include <bsd.port.mk>
@


1.34
log
@sync WANTLIB; needs pthread, and there are certainly some problems if it's
not updated in-sync with the recent libpthread.so changes.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2016/03/11 19:59:13 naddy Exp $
d6 1
a6 1
REVISION=		1
@


1.33
log
@garbage collect CONFIGURE_SHARED
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2016/01/28 08:40:46 jasper Exp $
d6 1
a6 1
REVISION=		0
d16 2
@


1.32
log
@Always link with -pthread for libffi, it depends on libpthread but didn't
propagate it.

originally spotted by Karel Gardas via jca@@
tested in a bulk by and OK aja@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2015/09/29 07:45:33 jasper Exp $
a21 1
CONFIGURE_ARGS+=	${CONFIGURE_SHARED}
@


1.31
log
@- update to libffi-3.2.1

(bulk) testing/ok aja@@, additional testing by tobiasu@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.30 2015/04/24 13:48:27 dcoppa Exp $
d6 1
@


1.30
log
@
Fix paths in libffi.pc.in
(upstream git commit ad0d1d239afc7ad09203847793dcc020856d1035)

This unbreaks lua-lgi runtime

with jasper@@ and Lauri Tirkkonen
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2015/04/06 12:11:39 jasper Exp $
d5 2
a6 3
DISTNAME=		libffi-3.1
REVISION=		0
SHARED_LIBS +=  ffi                  1.1      # .6.2
d20 1
a20 2
CONFIGURE_STYLE=	autoconf
AUTOCONF_VERSION=	2.69
@


1.29
log
@update to libffi-3.1 (not quite the newest, but better than what we currently have)

tested with gnome3 (heavily reliant on ffi/javascript/goi) for the better part of a year
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2015/03/16 18:07:42 naddy Exp $
d6 1
d21 2
a22 1
CONFIGURE_STYLE=	gnu
@


1.28
log
@fold lib-only PFRAG.shared into PLIST, regen PLIST, and bump
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2014/06/04 17:40:27 jasper Exp $
d5 2
a6 2
DISTNAME=		libffi-3.0.13
SHARED_LIBS +=  ffi                  1.0      # .6.1
a7 1
REVISION=		0
a19 7
AUTOCONF_VERSION=       2.68
AUTOMAKE_VERSION=       1.14

BUILD_DEPENDS=		${MODGNU_AUTOCONF_DEPENDS} \
			${MODGNU_AUTOMAKE_DEPENDS} \
			devel/libtool

a23 22

pre-configure:
	cd ${WRKSRC} && env AUTOCONF_VERSION=${AUTOCONF_VERSION} \
		AUTOMAKE_VERSION=${AUTOMAKE_VERSION} aclocal
	cd ${WRKSRC} && env AUTOCONF_VERSION=${AUTOCONF_VERSION} \
		AUTOMAKE_VERSION=${AUTOMAKE_VERSION} autoconf
	cd ${WRKSRC} && env AUTOCONF_VERSION=${AUTOCONF_VERSION} \
		AUTOMAKE_VERSION=${AUTOMAKE_VERSION} automake
	# Force a regen of missing
	rm ${WRKSRC}/missing
	cd ${WRKSRC} && env AUTOCONF_VERSION=${AUTOCONF_VERSION} \
		AUTOMAKE_VERSION=${AUTOMAKE_VERSION} automake --add-missing

post-patch:
	@@mkdir ${WRKSRC}/src/m88k
	@@cp ${FILESDIR}/m88k_ffi.c ${WRKSRC}/src/m88k/ffi.c
	@@cp ${FILESDIR}/m88k_ffitarget.h ${WRKSRC}/src/m88k/ffitarget.h
	@@cp ${FILESDIR}/m88k_obsd.S ${WRKSRC}/src/m88k/obsd.S
	@@mkdir ${WRKSRC}/src/vax
	@@cp ${FILESDIR}/vax_ffi.c ${WRKSRC}/src/vax/ffi.c
	@@cp ${FILESDIR}/vax_ffitarget.h ${WRKSRC}/src/vax/ffitarget.h
	@@cp ${FILESDIR}/vax_elfbsd.S ${WRKSRC}/src/vax/elfbsd.S
@


1.27
log
@- update to libffi-3.0.13 (an update to 3.1 will be worked on shortly)
- sync homepage

tested by many on nearly every supported architecture, thanks!

feedback/ok miod@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2014/04/20 16:09:47 jasper Exp $
d8 1
@


1.26
log
@add missing dependency on libtool; spotted by sthen@@
@
text
@d5 2
a6 3
DISTNAME=		libffi-3.0.9
REVISION=		6
SHARED_LIBS +=  ffi                  0.0      # .5.9
d11 1
a11 1
HOMEPAGE=		http://sources.redhat.com/libffi/
d20 2
a21 2
AUTOCONF_VERSION=       2.63
AUTOMAKE_VERSION=       1.11
d39 4
@


1.25
log
@patch and do the auto-dance to make merging with newer versions a lot easier.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.24 2013/10/23 10:32:01 fgsch Exp $
d25 2
a26 1
			${MODGNU_AUTOMAKE_DEPENDS}
@


1.24
log
@Fix libffi on arm. Change the code to work with our current ABI (APCS) as
much as possible until we switch to ATPCS or AAPCS.
jasper@@ (maintainer) ok.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.23 2013/07/15 19:01:56 miod Exp $
d21 6
d31 8
@


1.23
log
@The m68k fixes were not good enough to work correctly for closures around
functions returning structs of 5 to 15 bytes, inclusive; making me wonder
what I had actually tested. Now all the testcase passes, for real. Noticed
while working on cleaning these changes to push them upstream.
Bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2013/07/14 15:29:32 miod Exp $
d6 1
a6 1
REVISION=		5
@


1.22
log
@Update the VAX code to work in the ELF world: add register prefixes, and switch
to the reentrant struct return convention (non-pcc).
Bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2013/05/01 10:11:54 miod Exp $
d6 1
a6 1
REVISION=		4
@


1.21
log
@Fix m68k support (Linux/ELF uses a slightly different calling convention than
SysV/m68k, which NetBSD and OpenBSD follow).

Add m88k/ELF support.

Add vax/a.out support.

All tests from the libffi.call dejagnu testsuite pass on these three platforms.

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2013/04/01 11:53:52 kettenis Exp $
d6 1
a6 1
REVISION=		3
d34 1
a34 1
	@@cp ${FILESDIR}/vax_aoutbsd.S ${WRKSRC}/src/vax/aoutbsd.S
@


1.20
log
@Fix stack alignment on i386.

ok jasper@@, ajacoutot@@
@
text
@d1 1
a1 6
# $OpenBSD: Makefile,v 1.19 2013/03/21 16:22:51 jasper Exp $

# m68k - needs ELF and serious tinkering
# m88k - missing code
# vax - libffi hasn't been ported to vax, and most likely never will.
NOT_FOR_ARCHS= 		m68k m88k vax
d6 1
a6 1
REVISION=		2
d25 10
@


1.19
log
@- fix an implicit declaration
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2013/03/21 15:52:08 jasper Exp $
d11 1
a11 1
REVISION=		1
@


1.18
log
@- remove patch for arm that dealt with lack of UNWIND support in our 2.15 linker.

a full update of libffi is in the works as well, so remove the comment from Makefile.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2013/03/21 08:45:15 ajacoutot Exp $
d11 1
a11 1
REVISION=		0
@


1.17
log
@USE_LIBTOOL=Yes is the default now.
@
text
@d1 1
a1 4
# $OpenBSD: Makefile,v 1.16 2013/03/11 10:50:09 espie Exp $

# XXX: cannot be updated to a newer version before the binutils in base
# is updated to 2.17.
d11 1
d24 1
a24 2
TEST_DEPENDS=	devel/dejagnu

@


1.16
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2012/09/01 18:15:06 miod Exp $
a27 1
USE_LIBTOOL=		Yes
@


1.15
log
@Add m68k to the NOT_FOR_ARCHS list, needs significant work to build.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2012/08/05 00:16:50 naddy Exp $
a22 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM= Yes
PERMIT_DISTFILES_FTP=	Yes
d26 1
a26 1
REGRESS_DEPENDS=	devel/dejagnu
@


1.14
log
@no need for groff
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2012/04/05 16:11:01 jasper Exp $
d6 2
a7 1
# m88k - not tested yet, will it ever?
d9 1
a9 1
NOT_FOR_ARCHS= 		m88k vax
@


1.13
log
@add a reminder comment
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2010/11/15 19:45:59 espie Exp $
a30 1
USE_GROFF =		Yes
@


1.12
log
@move depends to new style
@
text
@d1 4
a4 1
# $OpenBSD: Makefile,v 1.11 2010/10/18 17:47:53 espie Exp $
@


1.11
log
@USE_GROFF=Yes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2010/09/19 20:19:15 jasper Exp $
d25 1
a25 1
REGRESS_DEPENDS=	::devel/dejagnu
d28 1
a28 1
USE_GROFF =	Yes
@


1.10
log
@- update libffi to 3.0.9
- remove unneeded patch
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2010/02/23 19:08:55 jasper Exp $
d28 1
@


1.9
log
@- enable libffi on mips64(el)

ok espie@@ phessler@@

ports is unlocked for a while only for those who have been informed.
if I DID NOT MAIL YOU, DO NOT COMMIT!
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2010/02/09 12:18:45 jasper Exp $
d3 1
a3 1
# m88k - not tested yet
d9 1
a9 2
DISTNAME=		libffi-3.0.8
PKGNAME=		${DISTNAME}p2
d31 2
@


1.8
log
@- extend archtecture tests for mips64el

ok naddy@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2009/12/12 16:39:00 espie Exp $
a3 1
# mips64* - OpenBSD doesn't provide a cacheflush/cachectl (yet)
d5 1
a5 1
NOT_FOR_ARCHS= 		m88k mips64 mips64el vax
@


1.7
log
@tsk, tsk. People still don't remember that updates happen.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2009/10/23 15:39:51 jasper Exp $
d4 1
a4 1
# mips64 - OpenBSD doesn't provide a cacheflush/cachectl (yet)
d6 1
a6 1
NOT_FOR_ARCHS= 		m88k mips64 vax
@


1.6
log
@- enable libffi on hppa

tested by landry@@, thanks!
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2009/10/10 22:48:54 jasper Exp $
d11 1
a11 1
PKGNAME=		${DISTNAME}p1
@


1.5
log
@- resolve the conflict with gcj
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2009/10/10 18:18:14 jasper Exp $
d3 1
a3 1
# hppa, m88k - not tested yet
d6 1
a6 1
NOT_FOR_ARCHS= 		hppa m88k mips64 vax
@


1.4
log
@- add a note that libffi will most likely never work on vax...
- fix license marker
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2009/09/25 15:59:15 jasper Exp $
d11 1
a11 1
PKGNAME=		${DISTNAME}p0
@


1.3
log
@- take maintainership of libffi, and drop it of two others. any takers?
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2009/09/25 14:33:05 sthen Exp $
d3 1
a3 1
# hppa, m88k, vax - not tested yet
d5 1
d19 1
a19 1
# MIT
@


1.2
log
@zap spurious commas in NOT_FOR_ARCHS
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2009/09/23 20:55:46 jasper Exp $
d10 1
d13 2
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d5 1
a5 1
NOT_FOR_ARCHS= 		hppa, m88k, mips64, vax
@


1.1.1.1
log
@import libffi 3.0.8

FFI stands for Foreign Function Interface. A foreign function interface
is the popular name for the interface that allows code written in one
language to call code written in another language. The libffi library
really only provides the lowest, machine dependent layer of a fully
featured foreign function interface. A layer must exist above libffi
that handles type conversions for values passed between the two
languages.

successfully tested on seven arches by me. other arches are disabled for now as
they need more work (mips64) or haven't been tested yet.
 
@
text
@@
