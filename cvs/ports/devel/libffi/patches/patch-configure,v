head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	jasper_20090923:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.01.28.08.40.47;	author jasper;	state Exp;
branches;
next	1.6;
commitid	fDXLZHdeuh3InIIy;

1.6
date	2014.04.20.16.09.47;	author jasper;	state dead;
branches;
next	1.5;

1.5
date	2013.05.01.10.11.54;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.19.20.19.15;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.23.19.08.55;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.23.15.39.51;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.23.20.55.46;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.09.23.20.55.46;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Always link with -pthread for libffi, it depends on libpthread but didn't
propagate it.

originally spotted by Karel Gardas via jca@@
tested in a bulk by and OK aja@@
@
text
@$OpenBSD$

- Always link with -pthread for libffi

--- configure.orig	Tue Jan 26 18:55:54 2016
+++ configure	Tue Jan 26 18:56:20 2016
@@@@ -18522,6 +18522,12 @@@@ $as_echo "#define SYMBOL_UNDERSCORE 1" >>confdefs.h
 
 fi
 
+case "$target" in
+    *-*-openbsd*)
+      LDFLAGS="-lpthread $LDFLAGS"
+    ;;
+esac
+
 FFI_EXEC_TRAMPOLINE_TABLE=0
 case "$target" in
      *arm*-apple-darwin*)
@


1.6
log
@patch and do the auto-dance to make merging with newer versions a lot easier.
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.5 2013/05/01 10:11:54 miod Exp $
d3 1
a3 1
Enable libffi on hppa, m88k, mips64(el), powerpc and vax platforms.
d5 3
a7 23
--- configure.orig	Thu Dec 31 12:41:51 2009
+++ configure	Wed Apr 24 15:46:57 2013
@@@@ -807,6 +807,8 @@@@ SH_FALSE
 SH_TRUE
 X86_64_FALSE
 X86_64_TRUE
+VAX_FALSE
+VAX_TRUE
 S390_FALSE
 S390_TRUE
 FRV_FALSE
@@@@ -825,6 +827,8 @@@@ POWERPC_AIX_FALSE
 POWERPC_AIX_TRUE
 POWERPC_FALSE
 POWERPC_TRUE
+M88K_FALSE
+M88K_TRUE
 M68K_FALSE
 M68K_TRUE
 M32R_FALSE
@@@@ -12167,7 +12171,7 @@@@ case "$host" in
 	TARGET=FRV; TARGETDIR=frv
 	;;
a8 43
-  hppa*-*-linux* | parisc*-*-linux*)
+  hppa*-*-linux* | hppa*-*-openbsd* | parisc*-*-linux*)
 	TARGET=PA_LINUX; TARGETDIR=pa
 	;;
   hppa*64-*-hpux*)
@@@@ -12207,10 +12211,14 @@@@ case "$host" in
 	TARGET=M68K; TARGETDIR=m68k
 	;;
 
+  m88k-*-openbsd*)
+	TARGET=M88K; TARGETDIR=m88k
+	;;
+
   mips-sgi-irix5.* | mips-sgi-irix6.*)
 	TARGET=MIPS; TARGETDIR=mips
 	;;
-  mips*-*-linux*)
+  mips*-*-linux* | mips*-*-openbsd*)
 	# Support 128-bit long double for NewABI.
 	HAVE_LONG_DOUBLE='defined(__mips64)'
 	TARGET=MIPS; TARGETDIR=mips
@@@@ -12228,7 +12236,7 @@@@ case "$host" in
   powerpc-*-aix* | rs6000-*-aix*)
 	TARGET=POWERPC_AIX; TARGETDIR=powerpc
 	;;
-  powerpc-*-freebsd*)
+  powerpc-*-freebsd* | powerpc-*-openbsd*)
 	TARGET=POWERPC_FREEBSD; TARGETDIR=powerpc
 	;;
   powerpc*-*-rtems*)
@@@@ -12250,6 +12258,10 @@@@ case "$host" in
 	TARGET=SPARC; TARGETDIR=sparc
 	;;
 
+  vax-*-openbsd*)
+	TARGET=VAX; TARGETDIR=vax
+	;;
+
   x86_64-*-darwin*)
 	TARGET=X86_DARWIN; TARGETDIR=x86
 	;;
@@@@ -12360,6 +12372,14 @@@@ else
   M68K_FALSE=
d11 5
a15 7
+ if test x$TARGET = xM88K; then
+  M88K_TRUE=
+  M88K_FALSE='#'
+else
+  M88K_TRUE='#'
+  M88K_FALSE=
+fi
d17 3
a19 46
  if test x$TARGET = xPOWERPC; then
   POWERPC_TRUE=
   POWERPC_FALSE='#'
@@@@ -12432,6 +12452,14 @@@@ else
   S390_FALSE=
 fi
 
+ if test x$TARGET = xVAX; then
+  VAX_TRUE=
+  VAX_FALSE='#'
+else
+  VAX_TRUE='#'
+  VAX_FALSE=
+fi
+
  if test x$TARGET = xX86_64; then
   X86_64_TRUE=
   X86_64_FALSE='#'
@@@@ -14887,6 +14915,13 @@@@ $as_echo "$as_me: error: conditional \"M68K\" was neve
 Usually this means the macro was only invoked conditionally." >&2;}
    { (exit 1); exit 1; }; }
 fi
+if test -z "${M88K_TRUE}" && test -z "${M88K_FALSE}"; then
+  { { $as_echo "$as_me:$LINENO: error: conditional \"M88K\" was never defined.
+Usually this means the macro was only invoked conditionally." >&5
+$as_echo "$as_me: error: conditional \"M88K\" was never defined.
+Usually this means the macro was only invoked conditionally." >&2;}
+   { (exit 1); exit 1; }; }
+fi
 if test -z "${POWERPC_TRUE}" && test -z "${POWERPC_FALSE}"; then
   { { $as_echo "$as_me:$LINENO: error: conditional \"POWERPC\" was never defined.
 Usually this means the macro was only invoked conditionally." >&5
@@@@ -14947,6 +14982,13 @@@@ if test -z "${S390_TRUE}" && test -z "${S390_FALSE}"; 
   { { $as_echo "$as_me:$LINENO: error: conditional \"S390\" was never defined.
 Usually this means the macro was only invoked conditionally." >&5
 $as_echo "$as_me: error: conditional \"S390\" was never defined.
+Usually this means the macro was only invoked conditionally." >&2;}
+   { (exit 1); exit 1; }; }
+fi
+if test -z "${VAX_TRUE}" && test -z "${VAX_FALSE}"; then
+  { { $as_echo "$as_me:$LINENO: error: conditional \"VAX\" was never defined.
+Usually this means the macro was only invoked conditionally." >&5
+$as_echo "$as_me: error: conditional \"VAX\" was never defined.
 Usually this means the macro was only invoked conditionally." >&2;}
    { (exit 1); exit 1; }; }
 fi
@


1.5
log
@Fix m68k support (Linux/ELF uses a slightly different calling convention than
SysV/m68k, which NetBSD and OpenBSD follow).

Add m88k/ELF support.

Add vax/a.out support.

All tests from the libffi.call dejagnu testsuite pass on these three platforms.

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.4 2010/09/19 20:19:15 jasper Exp $
@


1.4
log
@- update libffi to 3.0.9
- remove unneeded patch
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.3 2010/02/23 19:08:55 jasper Exp $
d3 1
a3 1
Enable libffi on hppa, mips64(el) and powerpc platforms.
d5 21
a25 3
--- configure.orig	Sun Sep 19 21:29:33 2010
+++ configure	Sun Sep 19 21:31:27 2010
@@@@ -12167,7 +12167,7 @@@@ case "$host" in
d34 8
a41 1
@@@@ -12210,7 +12210,7 @@@@ case "$host" in
d50 1
a50 1
@@@@ -12228,7 +12228,7 @@@@ case "$host" in
d59 69
@


1.3
log
@- enable libffi on mips64(el)

ok espie@@ phessler@@

ports is unlocked for a while only for those who have been informed.
if I DID NOT MAIL YOU, DO NOT COMMIT!
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.2 2009/10/23 15:39:51 jasper Exp $
d5 3
a7 3
--- configure.orig	Fri Dec 19 17:12:45 2008
+++ configure	Sat Feb 20 00:37:30 2010
@@@@ -20976,7 +20976,7 @@@@ case "$host" in
d16 1
a16 1
@@@@ -21017,8 +21017,9 @@@@ case "$host" in
d22 2
d25 1
a25 5
+	HAVE_LONG_DOUBLE='defined(__mips)'
 	;;
 
   powerpc*-*-linux* | powerpc-*-sysv*)
@@@@ -21033,7 +21034,7 @@@@ case "$host" in
@


1.2
log
@- enable libffi on hppa

tested by landry@@, thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.1.1.1 2009/09/23 20:55:46 jasper Exp $
d3 1
a3 1
Enable libffi on hppa and powerpc platforms.
d6 1
a6 1
+++ configure	Fri Oct 23 17:10:16 2009
d16 12
a27 1
@@@@ -21033,7 +21033,7 @@@@ case "$host" in
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
Enable libffi on powerpc platforms.
d5 11
a15 2
--- configure.orig	Fri Dec 19 09:12:45 2008
+++ configure	Sun Sep 20 13:15:28 2009
@


1.1.1.1
log
@import libffi 3.0.8

FFI stands for Foreign Function Interface. A foreign function interface
is the popular name for the interface that allows code written in one
language to call code written in another language. The libffi library
really only provides the lowest, machine dependent layer of a fully
featured foreign function interface. A layer must exist above libffi
that handles type conversions for values passed between the two
languages.

successfully tested on seven arches by me. other arches are disabled for now as
they need more work (mips64) or haven't been tested yet.
 
@
text
@@
