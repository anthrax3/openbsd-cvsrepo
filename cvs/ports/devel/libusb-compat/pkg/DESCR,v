head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.22
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.20
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.16
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.18
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.12
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.10
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.8
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.6
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	ajacoutot_20111113:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2011.11.13.13.49.50;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.13.13.49.50;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@A compatibility layer allowing applications written for libusb-0.1 to work
with libusb-1.0. libusb-compat-0.1 attempts to look, feel, smell and walk
like libusb-0.1.

Known quirks/differences from libusb-0.1:
 1. usb_resetep(), a previously deprecated function, is implemented as
    equivalent to calling usb_clear_halt().
 2. libusb-0.1 allowed you to open a device which you did not have
    permission to do anything useful with (all I/O requests would
    immediately fail). libusb-compat-0.1 does not allow you to open such
    devices. You can still read descriptor info without opening a
    device.
 3. usb_device's "num_children" attribute is hardcoded to 0, and
    "children" is hardcoded to NULL. Do you need this information in
    your software? Let us know on the mailing list, and we'll add it.
 4. Some libusb-0.1 users may have implemented I/O cancellation by
    running transfers in their own threads and simply killing the thread
    when they don't want to do the transfer any more. This is bad
    programming practice for obvious reasons, and this lack of
    functionality was one of the primary drivers for libusb-1.0
    development. With libusb-1.0 or libusb-compat-0.1 backed by
    libusb-1.0, forcefully killing threads in this way is likely to
    cause all libusb I/O to halt. Instead, port your application to use
    libusb-1.0's asynchronous transfer API, which supports transfer
    cancellation.
 5. Error codes returned on certain events may not exactly match the
    error codes returned by libusb-0.1.
@


1.1.1.1
log
@Import libusb-compat-0.1.3.

A compatibility layer allowing applications written for libusb-0.1 to work
with libusb-1.0. libusb-compat-0.1 attempts to look, feel, smell and walk
like libusb-0.1.

ok jasper@@
@
text
@@
