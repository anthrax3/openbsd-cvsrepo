head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.20
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.18
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.14
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.16
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.12
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.10
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	sthen_20120604:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.04.06.09.25.08;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.06.09.25.08;	author sthen;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@@@comment $OpenBSD$
${P5SITE}/Data/
${P5SITE}/Data/Dumper/
${P5SITE}/Data/Dumper/Concise/
${P5SITE}/Data/Dumper/Concise.pm
${P5SITE}/Data/Dumper/Concise/Sugar.pm
${P5SITE}/Devel/
${P5SITE}/Devel/Dwarn.pm
@@man man/man3p/Data::Dumper::Concise.3p
@@man man/man3p/Data::Dumper::Concise::Sugar.3p
@@man man/man3p/Devel::Dwarn.3p
@


1.1.1.1
log
@import p5-Data-Dumper-Concise, from Andrew Fresh, ok landry@@

This module always exports a single function, Dumper, which can be
called with an array of values to dump those values.

It exists, fundamentally, as a convenient way to reproduce a set
of Dumper options that we've found ourselves using across large
numbers of applications, primarily for debugging output.

The principle guiding theme is "all the concision you can get while
still having a useful dump and not doing anything cleverer than
setting Data::Dumper options" - it's been pointed out to us that
Data::Dump::Streamer can produce shorter output with less lines of
code. We know. This is simpler and we've never seen it segfault.
But for complex/weird structures, it generally rocks. You should
use it as well, when Concise is underkill. We do.

Why is deparsing on when the aim is concision? Because you often
want to know what subroutine refs you have when debugging and because
if you were planning to eval this back in you probably wanted to
remove subrefs first and add them back in a custom way anyway. Note
that this -does- force using the pure perl Dumper rather than the
XS one, but I've never in my life seen Data::Dumper show up in a
profile so "who cares?".
@
text
@@
