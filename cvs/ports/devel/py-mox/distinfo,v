head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.18
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.10
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	giovanni-20100421:1.1.1.1
	giovanni:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.01.16.08.59.06;	author benoit;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.21.06.48.49;	author giovanni;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.04.21.06.48.49;	author giovanni;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update py-mox to 0.5.3
@
text
@SHA256 (mox-0.5.3.tar.gz) = TRikV30U2hPQMr4hy9/O7TAhccJ1tyrapMWZfViaUDA=
SIZE (mox-0.5.3.tar.gz) = 31266
@


1.1
log
@Initial revision
@
text
@d1 2
a2 5
MD5 (mox-0.5.0.tar.gz) = QgPqTwPH3OwKHOsSkKi2FQ==
RMD160 (mox-0.5.0.tar.gz) = 60XpgJPsTqV2uBN0DcNXi79Q0OQ=
SHA1 (mox-0.5.0.tar.gz) = MeKlzK1f5Jluz3nwgkBlY7njQ9s=
SHA256 (mox-0.5.0.tar.gz) = hLw4BX8AWfZJMSqKDPpjh43eDODW61SoCESId0CeIOA=
SIZE (mox-0.5.0.tar.gz) = 24366
@


1.1.1.1
log
@
Import py-mox, a mock object framework for Python

Mox will make mock objects for you, so you don't have to create
your own! It mocks the public/protected interfaces of Python objects.
You set up your mock objects expected behavior using a domain
specific language (DSL), which makes it easy to use, understand,
and refactor!
@
text
@@
