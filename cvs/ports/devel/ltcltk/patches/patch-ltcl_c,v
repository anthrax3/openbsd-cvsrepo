head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.16
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.14
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.8
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.10
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.6
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	stu_20131129:1.1.1.1
	stu:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.11.29.18.41.52;	author stu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.11.29.18.41.52;	author stu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Fix vars not initialized.

--- ltcl.c.orig	Fri Nov 15 10:12:40 2013
+++ ltcl.c	Fri Nov 15 10:17:02 2013
@@@@ -715,7 +715,8 @@@@ static int ltcl_eval(lua_State *L)
 	lTcl *interp = ltcl_checkTclInterp(L, 1);
 	Tcl_Interp *tcli = interp->interp;
 	const char *cmd;
-	int flags, base = 2;
+	int flags = 0;
+	int base = 2;
 	size_t cmdlen;
 
 	/* flags are at the second position, but optional. */
@@@@ -770,7 +771,8 @@@@ static int ltcl_call(lua_State *L)
 	lTcl *interp = ltcl_checkTclInterp(L, 1);
 	Tcl_Interp *tcli = interp->interp;
 	Tcl_Obj *o;
-	int flags, base = 2;
+	int flags = 0;
+	int base = 2;
 	int nargs = lua_gettop(L) - 1;
 	lTclPtrList *args = _ltcl_ptrlistnew();
 	int i, res;
@@@@ -836,7 +838,8 @@@@ static int ltcl_callt(lua_State *L)
 {
 	lTcl *interp = ltcl_checkTclInterp(L, 1);
 	Tcl_Interp *tcli = interp->interp;
-	int flags, base = 2;
+	int flags = 0;
+	int base = 2;
 	lTclPtrList *args = _ltcl_ptrlistnew();
 	Tcl_Obj *o;
 	int i, tlen, res;
@@@@ -1375,7 +1378,7 @@@@ static char *ltcl_tracewrapper(ClientData cdata, Tcl_I
 	char *saveresult;
 	Tcl_FreeProc *saveproc;
 	char *traceres = NULL;
-	const char *s;
+	const char *s = NULL;
 	size_t l;
 
 	if (flags & TCL_INTERP_DESTROYED)
@


1.1.1.1
log
@Import devel/ltcltk, ok stsp@@

A binding of the Tcl interpreter to Lua. It allows for calls into Tcl,
setting and reading variables from Tcl and registering of Lua functions
for use from Tcl.  Also, a binding to the Tk toolit is included.
@
text
@@
