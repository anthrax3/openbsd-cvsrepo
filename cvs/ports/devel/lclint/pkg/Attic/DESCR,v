head	1.3;
access;
symbols
	OPENBSD_3_0:1.2.0.4
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.2.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	lclint-2_4b:1.1.1.1
	sds:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2002.03.24.23.07.25;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2000.12.21.21.20.36;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	99.06.07.23.37.56;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.06.07.23.37.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@really stub this out.
@
text
@LCLint is a tool for statically checking C programs.  With minimal
effort, LCLint can be used as a better lint.  If additional effort is
invested adding annotations to programs, LCLint can perform stronger
checks than can be done by any standard lint.

LCLint can detect lots of obscure errors that other lints can't find.
It takes some getting used to, and tends to output quite a large number
of warnings unless tuned for the current project.

WWW: ${HOMEPAGE}
@


1.2
log
@If HOMEPAGE is defined in Makefile, reference it in DESCR, too.
authorized by espie@@

Fix a few minor cosmetic issues along the way.
@
text
@@


1.1
log
@Initial revision
@
text
@d9 2
@


1.1.1.1
log
@rocket science meets lint.

Highly verbose, but can be toned down to a reasonable level using
the right flags, or the right annotations.

Knows something about such weird issues as ANSI C namespaces, and will
warn against E* or str* identifiers, for instance.

@
text
@@
