head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2015.01.06.21.28.05;	author sthen;	state Exp;
branches;
next	1.2;
commitid	RYKU0l8E4J620m0S;

1.2
date	2013.11.11.21.54.57;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.22.19.55.11;	author jca;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to libevent 2.0.22, various fixes including CVE-2014-6272 (integer
overflow in evbuffer_add() and related functions).
@
text
@$OpenBSD: patch-evutil_rand_c,v 1.2 2013/11/11 21:54:57 landry Exp $
OpenBSD does not need nor provide arc4random_addrandom anymore.
And evutil_secure_rng_add_bytes is a bad API anyway.
--- evutil_rand.c.orig	Mon Jan  5 15:17:40 2015
+++ evutil_rand.c	Mon Jan  5 23:01:59 2015
@@@@ -171,10 +171,3 @@@@ evutil_secure_rng_get_bytes(void *buf, size_t n)
 	ev_arc4random_buf(buf, n);
 }
 
-void
-evutil_secure_rng_add_bytes(const char *buf, size_t n)
-{
-	arc4random_addrandom((unsigned char*)buf,
-	    n>(size_t)INT_MAX ? INT_MAX : (int)n);
-}
-
@


1.2
log
@Instead of shuffling things around after arc4random_addrandom() removal,
take a stronger stance and remove evutil_secure_rng_add_bytes() from
libevent's API. Nothing calls it anyway, and there's even a big scary
warning (tm) in libevent's header..

---
You should almost never need to call this function; it should be
sufficient to invoke evutil_secure_rng_init(), or let Libevent take
care of calling evutil_secure_rng_init() on its own.

If you call this function as a _replacement_ for the regular
entropy sources, then you need to be sure that your input
contains a fairly large amount of strong entropy.  Doing so is
notoriously hard: most people who try get it wrong.  Watch out!
---

Bump event_core major, and remove the now useless configure.in patch.

Discussed with/ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-evutil_rand_c,v 1.1 2013/10/22 19:55:11 jca Exp $
d4 3
a6 3
--- evutil_rand.c.orig	Thu Aug  2 17:36:53 2012
+++ evutil_rand.c	Mon Nov 11 22:41:15 2013
@@@@ -150,10 +150,3 @@@@ evutil_secure_rng_get_bytes(void *buf, size_t n)
@


1.1
log
@Fixup after arc4random_addrandom/arc4random_stir removal.
If we can detect arc4random but not mentioned functions, then we don't
need to use them.  ok naddy@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
d5 3
a7 3
+++ evutil_rand.c	Tue Oct 22 18:18:59 2013
@@@@ -95,6 +95,14 @@@@ ev_arc4random_buf(void *buf, size_t n)
 #endif
d10 1
a10 29
+void
+evutil_secure_rng_add_bytes(const char *buf, size_t n)
+{
+#ifdef _EVENT_HAVE_ARC4RANDOM_ADDRANDOM
+	arc4random_addrandom(buf, n);
+#endif
+}
+
 #else /* !_EVENT_HAVE_ARC4RANDOM { */
 
 #ifdef _EVENT_ssize_t
@@@@ -142,18 +150,19 @@@@ ev_arc4random_buf(void *buf, size_t n)
 	arc4random_buf(buf, n);
 }
 
-#endif /* } !_EVENT_HAVE_ARC4RANDOM */
 
 void
-evutil_secure_rng_get_bytes(void *buf, size_t n)
+evutil_secure_rng_add_bytes(const char *buf, size_t n)
 {
-	ev_arc4random_buf(buf, n);
+	arc4_addrandom((unsigned char*)buf,
+	    n>(size_t)INT_MAX ? INT_MAX : (int)n);
 }
 
+#endif /* } !_EVENT_HAVE_ARC4RANDOM */
+
 void
d12 1
a12 2
+evutil_secure_rng_get_bytes(void *buf, size_t n)
 {
d15 2
a16 3
+	ev_arc4random_buf(buf, n);
 }
 
@

