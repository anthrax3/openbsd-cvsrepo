head	1.6;
access;
symbols
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	ajacoutot_20070425:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2009.01.17.12.30.08;	author jakemsr;	state dead;
branches;
next	1.5;

1.5
date	2008.08.20.01.57.31;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.08.02.49.00;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.29.15.28.44;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.15.17.38.07;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2007.04.25.11.12.26;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.04.25.11.12.26;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- add sndio backend
- remove OSS and esd support
ok ajacoutot@@ (MAINTAINER)
@
text
@$OpenBSD: patch-plugins_sound_oss_sound_oss_cxx,v 1.5 2008/08/20 01:57:31 jakemsr Exp $
--- plugins/sound_oss/sound_oss.cxx.orig	Thu Oct 18 23:22:33 2007
+++ plugins/sound_oss/sound_oss.cxx	Sat Aug  9 17:44:37 2008
@@@@ -384,7 +384,7 @@@@ static void CollectSoundDevices(PDirectory devdir, POr
         // When adding these to the 'dsp' string array, only the first one
         // found is used.
 
-#if !defined P_NETBSD || !defined P_OPENBSD
+#if !defined P_NETBSD && !defined P_OPENBSD
         // Look for dsp
         if (filename == "dsp") {
           dsp.SetAt(0, devname);
@@@@ -519,6 +519,7 @@@@ BOOL PSoundChannelOSS::Open(const PString & _device,
 
   Close();
 
+  resampleRate = 0;
 
   // lock the dictionary
   PWaitAndSignal mutex(dictMutex);
@@@@ -554,6 +555,14 @@@@ BOOL PSoundChannelOSS::Open(const PString & _device,
     DWORD cmd = 0;
     ::ioctl(os_handle, FIONBIO, &cmd);
 
+#ifdef P_OPENBSD
+    // full-duplex must be set explicitly.  don't worry if it fails because
+    // we might not really want full-duplex, even though we always open the
+    // device read-write.
+    cmd = 1;
+    ::ioctl(os_handle, SNDCTL_DSP_SETDUPLEX, &cmd);
+#endif
+
     // add the device to the dictionary
     SoundHandleEntry * entry = PNEW SoundHandleEntry;
     handleDict().SetAt(_device, entry); 
@@@@ -645,7 +654,9 @@@@ BOOL PSoundChannelOSS::Setup()
 
           mSampleRate = entry.sampleRate;
           arg = val = entry.sampleRate;
-          if (ConvertOSError(::ioctl(os_handle, SNDCTL_DSP_SPEED, &arg))) {
+          // don't error out if this gives us an error, simply resample
+          // based on the returned rate.
+          ConvertOSError(::ioctl(os_handle, SNDCTL_DSP_SPEED, &arg));
             stat = TRUE;
 
             // detect cases where the hardware can't do the actual rate we need, but can do a simple multiple
@@@@ -658,7 +669,6 @@@@ BOOL PSoundChannelOSS::Setup()
                 actualSampleRate = arg;
               }
             }
-          }
         }
       }
 
@@@@ -819,6 +829,7 @@@@ BOOL PSoundChannelOSS::Read(void * buf, PINDEX len)
       // use an average, not just a single sample
       const BYTE * src = resampleBuffer;
       while ( ((src - resampleBuffer) < bytes) && (dst < dstEnd)) {
+#if 0
         int sample = 0;
         unsigned j;
         for (j = 0; j < resampleRate; ++j) {
@@@@ -828,6 +839,13 @@@@ BOOL PSoundChannelOSS::Read(void * buf, PINDEX len)
         *(PUInt16l *)dst = sample / resampleRate;
         dst +=2 ;
         lastReadCount += 2;
+#else
+        // don't average, just use 1/resampleRate bytes
+        *(PUInt16l *)dst = *(PUInt16l *)src;
+        src += 2 * resampleRate;
+        dst +=2 ;
+        lastReadCount += 2;  
+#endif
       }
     }
   }
@


1.5
log
@
various audio fixes:

- recognize all available audio devices
- the audio device is always opened read-write.  this results in
  full-duplex operation for most OSS implementations, but full-dupplex
  needs to be explicitly enabled on OpenBSD.
- don't error out if SNDCTL_DSP_SPEED returns an error.  instead
  resample based on the returned sample rate.
- the resampling factor was not properly initilized and was returning
  random values.
- simply skip samples to down-sample.  the average method it uses
  sounds horrible.

now ekiga's softphone works for me when using the OSS audio backend

ok ajacoutot
@
text
@d1 1
a1 1
$OpenBSD: patch-plugins_sound_oss_sound_oss_cxx,v 1.4 2008/06/08 02:49:00 robert Exp $
@


1.4
log
@make the discovery of video(4) devices actually work by querying
the device itself; bump PKGNAME
@
text
@d1 51
a51 6
$OpenBSD: patch-plugins_sound_oss_sound_oss_cxx,v 1.3 2008/04/29 15:28:44 ajacoutot Exp $
--- plugins/sound_oss/sound_oss.cxx.orig	Fri Oct 19 08:22:33 2007
+++ plugins/sound_oss/sound_oss.cxx	Sun Jun  8 04:39:26 2008
@@@@ -429,6 +429,10 @@@@ static void CollectSoundDevices(PDirectory devdir, POr
             mixer.SetAt(cardnum+1, devname);
           }
d53 20
a72 3
+#if defined P_OPENBSD
+        dsp.SetAt(0, "/dev/audio");
+        mixer.SetAt(0, "/dev/mixer");
d76 1
a76 1
   } while (devdir.Next());
@


1.3
log
@- fix OSS device path
- make the v4l2 plugin compile (not very useful yet)
@
text
@d1 4
a4 4
$OpenBSD$
--- plugins/sound_oss/sound_oss.cxx.orig	Tue Apr 29 17:17:16 2008
+++ plugins/sound_oss/sound_oss.cxx	Tue Apr 29 17:17:22 2008
@@@@ -429,6 +432,10 @@@@ static void CollectSoundDevices(PDirectory devdir, POr
@


1.2
log
@- major upgrade to pwlib-1.12.0
- rework the way we handle shared_libs versus ptlib version so it stays
compatible with upstream
- install version.h
- dtmf decoder patch from FreeBSD
@
text
@d1 14
a14 12
$OpenBSD: patch-plugins_sound_oss_sound_oss_cxx,v 1.1 2007/04/25 11:12:26 ajacoutot Exp $
--- plugins/sound_oss/sound_oss.cxx.orig	Mon Apr 16 20:35:31 2007
+++ plugins/sound_oss/sound_oss.cxx	Mon Apr 16 20:37:28 2007
@@@@ -383,7 +383,7 @@@@ static void CollectSoundDevices(PDirectory devdir, POr
         // When adding these to the 'dsp' string array, only the first one
         // found is used.
 
-#ifndef P_NETBSD
+#ifndef P_OPENBSD
         // Look for dsp
         if (filename == "dsp") {
           dsp.SetAt(0, devname);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import pwlib-1.10.3

PWLib is a moderately large class library that has its genesis many
years ago as a method to product applications to run on both Microsoft
Windows and Unix X-Window systems.
Since then the system has grown to include many classes that assist in
writing complete multi-platform applications. Classes for I/O
portability, multi-threading portability, aid in producing unix daemons
and NT services portably and all sorts of internet protocols were added
over the years. The library now also supports the open H323 project.

ok jasper@@
@
text
@@
