head	1.9;
access;
symbols
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	jasper_20113006:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2014.07.08.15.33.11;	author jasper;	state dead;
branches;
next	1.8;
commitid	b3rp4QE6wEOJkSyq;

1.8
date	2013.11.25.12.58.58;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2013.09.06.07.52.41;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2013.07.09.10.03.47;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.22.06.22.21;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.12.17.19.47;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.28.16.59.22;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.25.07.11.20;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2011.06.30.12.07.02;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.06.30.12.07.02;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.9
log
@update to libgit2-0.21.0
@
text
@$OpenBSD: patch-CMakeLists_txt,v 1.8 2013/11/25 12:58:58 jasper Exp $

Don't clobber CFLAGS.

--- CMakeLists.txt.orig	Wed Nov 20 12:53:33 2013
+++ CMakeLists.txt	Mon Nov 25 13:42:48 2013
@@@@ -274,7 +274,7 @@@@ IF (MSVC)
    # Precompiled headers
 
 ELSE ()
-	SET(CMAKE_C_FLAGS "-D_GNU_SOURCE -Wall -Wextra -Wno-missing-field-initializers -Wstrict-aliasing=2 -Wstrict-prototypes ${CMAKE_C_FLAGS}")
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wextra -Wno-missing-field-initializers -Wstrict-aliasing=2 -Wstrict-prototypes ${CMAKE_C_FLAGS}")
 
 	IF (WIN32 AND NOT CYGWIN)
 		SET(CMAKE_C_FLAGS_DEBUG "-D_DEBUG")
@


1.8
log
@- update to libgit2-0.20.0
@
text
@d1 1
a1 1
$OpenBSD: patch-CMakeLists_txt,v 1.7 2013/09/06 07:52:41 ajacoutot Exp $
@


1.7
log
@Remove uneeded chunks.
@
text
@d1 1
a1 1
$OpenBSD: patch-CMakeLists_txt,v 1.6 2013/07/09 10:03:47 jasper Exp $
d5 3
a7 3
--- CMakeLists.txt.orig	Tue Jun 25 00:14:45 2013
+++ CMakeLists.txt	Tue Jul  9 11:47:58 2013
@@@@ -233,7 +233,7 @@@@ IF (MSVC)
@


1.6
log
@update to libgit2-0.19.0
@
text
@d1 1
a1 1
$OpenBSD: patch-CMakeLists_txt,v 1.5 2013/04/22 06:22:21 jasper Exp $
a3 1
-Wextra is not available with gcc < 4.
d12 1
a12 1
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE -Wall -Wno-missing-field-initializers -Wstrict-aliasing=2 -Wstrict-prototypes ${CMAKE_C_FLAGS}")
@


1.5
log
@- update to libgit2-0.18.0
@
text
@d1 1
a1 1
$OpenBSD: patch-CMakeLists_txt,v 1.4 2012/08/12 17:19:47 jasper Exp $
d6 3
a8 3
--- CMakeLists.txt.orig	Sun Apr 21 23:44:50 2013
+++ CMakeLists.txt	Sun Apr 21 23:44:54 2013
@@@@ -211,7 +211,7 @@@@ IF (MSVC)
@


1.4
log
@- update to 0.17.0
@
text
@d1 1
a1 1
$OpenBSD: patch-CMakeLists_txt,v 1.3 2011/08/28 16:59:22 naddy Exp $
d6 4
a9 3
--- CMakeLists.txt.orig	Mon Jul 23 09:41:36 2012
+++ CMakeLists.txt	Mon Jul 23 09:42:22 2012
@@@@ -70,7 +70,7 @@@@ IF (MSVC)
a10 1
    # Precompiled headers
d12 5
a16 5
-	SET(CMAKE_C_FLAGS "-O2 -g -D_GNU_SOURCE -fvisibility=hidden -Wall -Wextra -Wno-missing-field-initializers -Wstrict-aliasing=2 -Wstrict-prototypes -Wmissing-prototypes ${CMAKE_C_FLAGS}")
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -g -D_GNU_SOURCE -fvisibility=hidden -Wall -Wno-missing-field-initializers -Wstrict-aliasing=2 -Wstrict-prototypes -Wmissing-prototypes ${CMAKE_C_FLAGS}")
 	SET(CMAKE_C_FLAGS_DEBUG "-O0 -g")
 	IF (NOT MINGW) # MinGW always does PIC and complains if we tell it to
 		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
@


1.3
log
@Honor CFLAGS and don't use -Wextra (not available on gcc < 4); ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d6 5
a10 5
--- CMakeLists.txt.orig	Thu Jul 14 03:26:08 2011
+++ CMakeLists.txt	Sun Aug 28 18:43:17 2011
@@@@ -53,12 +53,10 @@@@ IF (MSVC)
 	SET(CMAKE_C_FLAGS_DEBUG "/Od /DEBUG /MTd")
 	SET(CMAKE_C_FLAGS_RELEASE "/MT /O2")
d12 3
a14 2
-	SET(CMAKE_C_FLAGS "-Wall -Wextra")
+	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
a16 6
 	ENDIF ()
-	SET(CMAKE_C_FLAGS_DEBUG "-g -O0")
-	SET(CMAKE_C_FLAGS_RELEASE "-O2")
 ENDIF()
 
 # Build Debug by default
@


1.2
log
@- update to 0.14.0

based on an update from wen heping
@
text
@d1 1
a1 1
$OpenBSD: patch-CMakeLists_txt,v 1.1 2011/06/30 12:07:02 jasper Exp $
d3 2
a4 1
Sync with upstream 0b10c9ea6ef5d85d862edd044d96561c4fd16e9b
d6 14
a19 5
--- CMakeLists.txt.orig	Wed Jun 29 20:04:37 2011
+++ CMakeLists.txt	Wed Jun 29 20:04:47 2011
@@@@ -24,36 +24,6 @@@@ SET(LIBGIT2_VERSION_STRING "${LIBGIT2_VERSION_MAJOR}.$
 # Find required dependencies
 INCLUDE_DIRECTORIES(deps/zlib src include)
d21 1
a21 100
-# Try finding openssl
-FIND_PACKAGE(OpenSSL)
-IF (OPENSSL_CRYPTO_LIBRARIES)
-    SET(SHA1_TYPE "openssl" CACHE STRING "Which SHA1 implementation to use: builtin, ppc, openssl")
-ELSEIF ()
-    SET(SHA1_TYPE "builtin" CACHE STRING "Which SHA1 implementation to use: builtin, ppc")
-ENDIF ()
-
-INCLUDE(FindPkgConfig)
-
-# Show SQLite3 settings in GUI (if they won't be found out)
-SET(SQLITE3_INCLUDE_DIRS "" CACHE PATH "SQLite include directory")
-SET(SQLITE3_LIBRARIES "" CACHE FILEPATH "SQLite library")
-
-# Are SQLite3 variables already set up? (poor Windows/no pkg-config/no sqlite3.pc)
-IF (SQLITE3_INCLUDE_DIRS AND SQLITE3_LIBRARIES)
-	SET(SQLITE3_FOUND 1)
-ENDIF ()
-
-# Try to find SQLite3 via pkg-config
-IF (PKG_CONFIG_FOUND AND NOT SQLITE3_FOUND)
-	pkg_check_modules(SQLITE3 sqlite3)
-ENDIF ()
-
-# Compile SQLite backend if SQLite3 is available
-IF (SQLITE3_FOUND)
-	ADD_DEFINITIONS(-DGIT2_SQLITE_BACKEND)
-	INCLUDE_DIRECTORIES(${SQLITE3_INCLUDE_DIRS})
-ENDIF ()
-
 # Installation paths
 SET(INSTALL_BIN bin CACHE PATH "Where to install binaries to.")
 SET(INSTALL_LIB lib CACHE PATH "Where to install libraries to.")
@@@@ -64,9 +34,21 @@@@ OPTION (BUILD_SHARED_LIBS "Build Shared Library (OFF f
 OPTION (BUILD_TESTS "Build Tests" ON)
 OPTION (THREADSAFE "Build libgit2 as threadsafe" OFF)
 
-# Build Release by default
+# Platform specific compilation flags
+IF (MSVC)
+	SET(CMAKE_C_FLAGS "/W4 /WX /nologo /Zi")
+	# TODO: bring back /RTC1 /RTCc
+	SET(CMAKE_C_FLAGS_DEBUG "/Od /DEBUG /MTd")
+	SET(CMAKE_C_FLAGS_RELEASE "/MT /O2")
+ELSE ()
+	SET(CMAKE_C_FLAGS "-Wall -Wextra -fPIC")
+	SET(CMAKE_C_FLAGS_DEBUG "-g -O0")
+	SET(CMAKE_C_FLAGS_RELEASE "-O2")
+ENDIF()
+
+# Build Debug by default
 IF (NOT CMAKE_BUILD_TYPE)
-    SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
+	SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
 ENDIF ()
 
 IF (THREADSAFE)
@@@@ -90,20 +72,9 @@@@ IF (WIN32 AND NOT CYGWIN)
     FILE(GLOB SRC_PLAT src/win32/*.c)
 ENDIF ()
 
-# Specify sha1 implementation
-IF (SHA1_TYPE STREQUAL "ppc")
-    ADD_DEFINITIONS(-DPPC_SHA1)
-    FILE(GLOB SRC_SHA1 src/ppc/*.c)
-ELSEIF (SHA1_TYPE STREQUAL "openssl")
-    ADD_DEFINITIONS(-DOPENSSL_SHA1)
-    SET (SRC_SHA1)
-    INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
-    SET (LIB_SHA1 ${OPENSSL_CRYPTO_LIBRARIES})
-ENDIF ()
-
 # Compile and link libgit2
 ADD_LIBRARY(git2 ${SRC} ${SRC_PLAT} ${SRC_SHA1} ${SRC_ZLIB})
-TARGET_LINK_LIBRARIES(git2 ${LIB_SHA1} ${CMAKE_THREAD_LIBS_INIT} ${SQLITE3_LIBRARIES})
+TARGET_LINK_LIBRARIES(git2 ${CMAKE_THREAD_LIBS_INIT})
 SET_TARGET_PROPERTIES(git2 PROPERTIES VERSION ${LIBGIT2_VERSION_STRING})
 SET_TARGET_PROPERTIES(git2 PROPERTIES SOVERSION ${LIBGIT2_VERSION_MAJOR})
 
@@@@ -118,16 +89,15 @@@@ INSTALL(FILES include/git2.h DESTINATION ${INSTALL_INC
 
 # Tests
 IF (BUILD_TESTS)
-    SET(TEST_RESOURCES "${CMAKE_CURRENT_SOURCE_DIR}/tests/resources" CACHE PATH "Path to test resources.")
+	SET(TEST_RESOURCES "${CMAKE_CURRENT_SOURCE_DIR}/tests/resources" CACHE PATH "Path to test resources.")
     ADD_DEFINITIONS(-DTEST_RESOURCES=\"${TEST_RESOURCES}\")
-    
-    ENABLE_TESTING()
-    INCLUDE_DIRECTORIES(tests)
 
+    INCLUDE_DIRECTORIES(tests)
 	FILE(GLOB SRC_TEST tests/t??-*.c)
 
 	ADD_EXECUTABLE(libgit2_test tests/test_main.c tests/test_lib.c tests/test_helpers.c ${SRC} ${SRC_PLAT} ${SRC_SHA1} ${SRC_TEST} ${SRC_ZLIB})
-	TARGET_LINK_LIBRARIES(libgit2_test ${LIB_SHA1} ${CMAKE_THREAD_LIBS_INIT} ${SQLITE3_LIBRARIES})
+	TARGET_LINK_LIBRARIES(libgit2_test ${CMAKE_THREAD_LIBS_INIT})
 
+	ENABLE_TESTING()
 	ADD_TEST(libgit2_test libgit2_test)
 ENDIF ()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import libgit2 0.12.0

libgit2 is a portable, pure C implementation of the Git core methods
provided as a re-entrant linkable library with a solid API, allowing you
to write native speed custom Git applications in any language which
supports C bindings.

ok sthen@@
@
text
@@
