head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	rpointel_20160615:1.1.1.1
	rpointel:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2016.06.15.19.49.40;	author rpointel;	state Exp;
branches
	1.1.1.1;
next	;
commitid	15lE6OHzJqN8DQfl;

1.1.1.1
date	2016.06.15.19.49.40;	author rpointel;	state Exp;
branches;
next	;
commitid	15lE6OHzJqN8DQfl;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- d2j_invoke.sh.orig	Mon Oct 27 17:32:20 2014
+++ d2j_invoke.sh	Thu Jun  9 21:21:17 2016
@@@@ -45,4 +45,6 @@@@ else
     done
 fi
 
-java -Xms512m -Xmx1024m -classpath "${_classpath}" "$@@"
+JAVA_CMD=$(javaPathHelper -c dex2jar)
+
+${JAVA_CMD} -Xms512m -Xmx1024m -classpath "${_classpath}" "$@@"
@


1.1.1.1
log
@import dex2jar. dex2jar contains following compment
* dex-reader is designed to read the Dalvik Executable (.dex/.odex) format. It
has a light weight API similar with ASM.
* dex-translator is designed to do the convert job. It reads the dex instruction
to dex-ir format, after some optimize, convert to ASM format.
* dex-ir used by dex-translator, is designed to represent the dex instruction
dex-tools tools to work with .class files.
* d2j-smali disassemble dex to smali files and assemble dex from smali files.
different implementation to smali/baksmali, same syntax, but we support escape
in type desc "Lcom/dex2jar\t\u1234;"
* dex-writer write dex same way as dex-reader.

ok benoit@@.

@
text
@@
