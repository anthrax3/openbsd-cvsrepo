head	1.8;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	avsm_2012-Aug-18:1.1.1.1
	avsm:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2017.03.12.15.22.48;	author krw;	state dead;
branches;
next	1.7;
commitid	e1S3rdoUn4WFjOA2;

1.7
date	2016.06.24.15.59.12;	author krw;	state Exp;
branches;
next	1.6;
commitid	uNq7PAnG26SO2XnT;

1.6
date	2015.08.30.16.01.16;	author avsm;	state Exp;
branches;
next	1.5;
commitid	E3yaax3KKoTxde4P;

1.5
date	2014.08.27.08.05.17;	author chrisz;	state Exp;
branches;
next	1.4;
commitid	vYMEJuwPEG8SFCN7;

1.4
date	2013.11.25.14.35.26;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.04.06.57.39;	author chrisz;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.05.21.39.09;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.19.00.27.50;	author avsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.19.00.27.50;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove port which is used only by ocaml-lambda-term, which is used
only by utop.

ok chrisz@@ avsm@@
@
text
@SHA256 (lwt-2.5.2.tar.gz) = sxlRTPUWVngKj2CaY+rQjTBSpEJUayGFMM4UbTe/YzE=
SIZE (lwt-2.5.2.tar.gz) = 268168
@


1.7
log
@Upgrade Ocaml to 4.3.0 and tweak ports the minimal amount to keep
them all compiling.

Tweaks include updating

ocaml-batteries 2.3.1 -> 2.5.0
ocaml-lwt 2.4.8 -> 2.5.2
ocaml-ppx-tools 0.99.2 -> 4.03.0
ocaml-camlp4 4.02+6 -> 4.03+1
utop 1.15 -> 1.19.2

and fixes to coccinelle and wyrd to let them build on bytecode archs.

Other necessary tweaks from the various homes of the projects.

Everything still builds on amd64 (native and bytecode) and sparc64 (bytecode).

ok anil@@ sthen@@ so final 4.3.0 tweaks can be done in-tree.
@
text
@@


1.6
log
@update to ocaml-lwt-2.4.8

This is not the latest upstream version, but the last one that is most
compatible due to an API change. Be careful about upgrading to lwt-2.5.0
without checking that no in-tree ports break due to new buffer APIs.

ok jca@@, tested by krw@@ daniel@@ jsg@@
@
text
@d1 2
a2 2
SHA256 (lwt-2.4.8.tar.gz) = ytqSocfOnGeK3GffoKjFH1gjWOmbvoOezi3s1oZs+jg=
SIZE (lwt-2.4.8.tar.gz) = 262232
@


1.5
log
@Upgrade ocaml-react. Since it has a major api charge, all of its dependers
need an upgrade, too.

* react uses opam without findlib as build system. Therefore call
  ocamlbuild directly. And roll a custom do-install.
* lwt will need camlp4.
* zed has moved to github.
* utop, too.
* lambda-term, too. Also will it need camlp4.


OK jca@@
@
text
@d1 2
a2 2
SHA256 (lwt-2.4.5.tar.gz) = kOHlbGbnfG5s7KYyl5vb7/24g3Uv8ot8N/PVoiBXfmE=
SIZE (lwt-2.4.5.tar.gz) = 298612
@


1.4
log
@ocaml-related updates:

ocaml-batteries 2.0.0 -> 2.1.0

ocaml-lwt 2.4.2 -> 2.4.4

ocaml-net 3.6 -> 3.7.3

All needed for an upcoming update to ocaml-4.01.0
@
text
@d1 2
a2 2
SHA256 (lwt-2.4.4.tar.gz) = 4GuIcIYOzdb7LpkUidSsAEl7y/gYa0QemPywYC3h6Rk=
SIZE (lwt-2.4.4.tar.gz) = 294161
@


1.3
log
@update to version 2.4.2
ok by @@avsm, @@jasper
@
text
@d1 2
a2 2
SHA256 (lwt-2.4.2.tar.gz) = EDM2yIQPxfYxP3Z0BbqatA/s5JE57Jpl72s8AnQbl2M=
SIZE (lwt-2.4.2.tar.gz) = 502942
@


1.2
log
@update to lwt-2.4.1
- patches now upstream, so remove local versions
- add missing GMAKE dependency (I am fixing this requirement in OASIS directly too)
@
text
@d1 2
a2 2
SHA256 (lwt-2.4.1.tar.gz) = XBKjEaFo0o8ZwQ4IeoRr6VSKzIvQOORBESuR3FsNIx8=
SIZE (lwt-2.4.1.tar.gz) = 501789
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
SHA256 (lwt-2.4.0.tar.gz) = mY0rIcnq9SrWPHysF5SABh/tTmp1hdh5eMZs7var30g=
SIZE (lwt-2.4.0.tar.gz) = 501062
@


1.1.1.1
log
@initial import of lwt-2.4.0; espie@@ ok

Does not include the enhanced top-level, which will be added in a later update.
From Christopher Zimmermann <madroach@@gmerlin.de>

--
Lwt provides very light-weight cooperative threads for OCaml;
``launching'' a thread is a very fast operation, it does not require
a new stack, a new process, or anything else. Moreover context
switches are very fast. In fact, it is so easy that a thread can
be launched for every system call. And composing cooperative threads
will allow highly asynchronous programs.

@
text
@@
