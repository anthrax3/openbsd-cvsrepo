head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	avsm_2012-Aug-18:1.1.1.1
	avsm:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.08.30.16.01.16;	author avsm;	state Exp;
branches;
next	1.2;
commitid	E3yaax3KKoTxde4P;

1.2
date	2013.11.25.14.35.26;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.19.00.27.50;	author avsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.19.00.27.50;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to ocaml-lwt-2.4.8

This is not the latest upstream version, but the last one that is most
compatible due to an API change. Be careful about upgrading to lwt-2.5.0
without checking that no in-tree ports break due to new buffer APIs.

ok jca@@, tested by krw@@ daniel@@ jsg@@
@
text
@@@comment $OpenBSD: PFRAG.native,v 1.2 2013/11/25 14:35:26 dcoppa Exp $
%%dynlink%%
lib/ocaml/lwt/liblwt-glib_stubs.a
lib/ocaml/lwt/liblwt-unix_stubs.a
lib/ocaml/lwt/lwt-glib.a
lib/ocaml/lwt/lwt-glib.cmxa
lib/ocaml/lwt/lwt-log.a
lib/ocaml/lwt/lwt-log.cmxa
lib/ocaml/lwt/lwt-preemptive.a
lib/ocaml/lwt/lwt-preemptive.cmxa
lib/ocaml/lwt/lwt-react.a
lib/ocaml/lwt/lwt-react.cmxa
lib/ocaml/lwt/lwt-simple-top.a
lib/ocaml/lwt/lwt-simple-top.cmxa
lib/ocaml/lwt/lwt-ssl.a
lib/ocaml/lwt/lwt-ssl.cmxa
lib/ocaml/lwt/lwt-syntax-log.a
lib/ocaml/lwt/lwt-syntax-log.cmxa
lib/ocaml/lwt/lwt-syntax-options.a
lib/ocaml/lwt/lwt-syntax-options.cmxa
lib/ocaml/lwt/lwt-syntax.a
lib/ocaml/lwt/lwt-syntax.cmxa
lib/ocaml/lwt/lwt-unix.a
lib/ocaml/lwt/lwt-unix.cmxa
lib/ocaml/lwt/lwt.a
lib/ocaml/lwt/lwt.cmx
lib/ocaml/lwt/lwt.cmxa
lib/ocaml/lwt/lwt_bytes.cmx
lib/ocaml/lwt/lwt_chan.cmx
lib/ocaml/lwt/lwt_condition.cmx
lib/ocaml/lwt/lwt_config.cmx
lib/ocaml/lwt/lwt_daemon.cmx
lib/ocaml/lwt/lwt_engine.cmx
lib/ocaml/lwt/lwt_gc.cmx
lib/ocaml/lwt/lwt_glib.cmx
lib/ocaml/lwt/lwt_io.cmx
lib/ocaml/lwt/lwt_list.cmx
lib/ocaml/lwt/lwt_log.cmx
lib/ocaml/lwt/lwt_log_core.cmx
lib/ocaml/lwt/lwt_log_rules.cmx
lib/ocaml/lwt/lwt_main.cmx
lib/ocaml/lwt/lwt_mutex.cmx
lib/ocaml/lwt/lwt_mvar.cmx
lib/ocaml/lwt/lwt_pool.cmx
lib/ocaml/lwt/lwt_pqueue.cmx
lib/ocaml/lwt/lwt_preemptive.cmx
lib/ocaml/lwt/lwt_process.cmx
lib/ocaml/lwt/lwt_react.cmx
lib/ocaml/lwt/lwt_sequence.cmx
lib/ocaml/lwt/lwt_simple_top.cmx
lib/ocaml/lwt/lwt_ssl.cmx
lib/ocaml/lwt/lwt_stream.cmx
lib/ocaml/lwt/lwt_switch.cmx
lib/ocaml/lwt/lwt_sys.cmx
lib/ocaml/lwt/lwt_throttle.cmx
lib/ocaml/lwt/lwt_timeout.cmx
lib/ocaml/lwt/lwt_unix.cmx
lib/ocaml/lwt/lwt_unix_jobs_generated.cmx
lib/ocaml/lwt/pa_lwt.cmx
lib/ocaml/lwt/pa_lwt_log.cmx
lib/ocaml/lwt/pa_lwt_options.cmx
lib/ocaml/lwt/ppx.a
lib/ocaml/lwt/ppx.cmxa
lib/ocaml/lwt/ppx_lwt.cmx
@


1.2
log
@ocaml-related updates:

ocaml-batteries 2.0.0 -> 2.1.0

ocaml-lwt 2.4.2 -> 2.4.4

ocaml-net 3.6 -> 3.7.3

All needed for an upcoming update to ocaml-4.01.0
@
text
@d1 1
a1 1
@@comment $OpenBSD: PFRAG.native,v 1.1.1.1 2012/08/19 00:27:50 avsm Exp $
d3 2
a4 2
lib/ocaml/lwt/lwt-extra.a
lib/ocaml/lwt/lwt-extra.cmxa
d31 1
a33 1
lib/ocaml/lwt/lwt_event.cmx
a36 1
lib/ocaml/lwt/lwt_lib.cmx
a49 1
lib/ocaml/lwt/lwt_signal.cmx
a58 1
lib/ocaml/lwt/lwt_util.cmx
d62 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@comment $OpenBSD: PFRAG.native,v 1.1.1.1 2011/09/15 15:50:23 sthen Exp $
d7 2
d40 1
@


1.1.1.1
log
@initial import of lwt-2.4.0; espie@@ ok

Does not include the enhanced top-level, which will be added in a later update.
From Christopher Zimmermann <madroach@@gmerlin.de>

--
Lwt provides very light-weight cooperative threads for OCaml;
``launching'' a thread is a very fast operation, it does not require
a new stack, a new process, or anything else. Moreover context
switches are very fast. In fact, it is so easy that a thread can
be launched for every system call. And composing cooperative threads
will allow highly asynchronous programs.

@
text
@@
