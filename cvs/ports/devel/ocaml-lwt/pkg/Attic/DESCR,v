head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	avsm_2012-Aug-18:1.1.1.1
	avsm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.03.12.15.22.48;	author krw;	state dead;
branches;
next	1.1;
commitid	e1S3rdoUn4WFjOA2;

1.1
date	2012.08.19.00.27.50;	author avsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.19.00.27.50;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove port which is used only by ocaml-lambda-term, which is used
only by utop.

ok chrisz@@ avsm@@
@
text
@Lwt provides very light-weight cooperative threads for OCaml;
``launching'' a thread is a very fast operation, it does not require
a new stack, a new process, or anything else. Moreover context
switches are very fast. In fact, it is so easy that a thread can
be launched for every system call. And composing cooperative threads
will allow highly asynchronous programs.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@initial import of lwt-2.4.0; espie@@ ok

Does not include the enhanced top-level, which will be added in a later update.
From Christopher Zimmermann <madroach@@gmerlin.de>

--
Lwt provides very light-weight cooperative threads for OCaml;
``launching'' a thread is a very fast operation, it does not require
a new stack, a new process, or anything else. Moreover context
switches are very fast. In fact, it is so easy that a thread can
be launched for every system call. And composing cooperative threads
will allow highly asynchronous programs.

@
text
@@
