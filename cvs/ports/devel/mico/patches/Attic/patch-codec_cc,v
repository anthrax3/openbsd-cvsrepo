head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	shell_2001-Jun-29:1.1.1.1
	shell:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.09.22.08.42.53;	author landry;	state dead;
branches;
next	1.3;

1.3
date	2004.09.26.12.11.00;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.08.12.33.23;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.28.19.59.08;	author shell;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.06.28.19.59.08;	author shell;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Unbreak mico on gcc4 archs by updating it to 2.3.13.

- remove commented out FLAVORS, and merge ssl FLAVOR into main package
- build regress tests (not everything is working, but at least they're here)
- add native-connect:permit to systrace.filter, idl absolutely wants to
  connect to the nearest dns server during build. Gross.
- remove shitload of now unneeded patches
- some tweaks from ajacoutot@@/jasper@@

Build-tested on :
- gcc3 archs: arm (fails) by sthen@@, alpha by naddy@@, mips64 by jasper@@
- gcc4 archs: sparc64/amd64/macppc by my$self
ok jasper@@
@
text
@$OpenBSD: patch-codec_cc,v 1.3 2004/09/26 12:11:00 espie Exp $
--- orb/codec.cc.orig	Fri Sep 21 17:05:51 2001
+++ orb/codec.cc	Fri Jul 30 16:27:43 2004
@@@@ -26,7 +26,6 @@@@
 #ifndef _WINDOWS
 #include <string.h>
 #endif
-#include <iostream.h>
 #include <mico/impl.h>
 #include <mico/template_impl.h>
 #include <mico/util.h>
@@@@ -1014,13 +1013,13 @@@@ CORBA::DataDecoder::byteorder (CORBA::By
 
 /**************************** CDREncoder ******************************/
 
-static inline void swap2 (void *d, const void *s)
+static inline void swapp2 (void *d, const void *s)
 {
     ((CORBA::Octet *)d)[0] = ((CORBA::Octet *)s)[1];
     ((CORBA::Octet *)d)[1] = ((CORBA::Octet *)s)[0];
 }
 
-static inline void swap4 (void *d, const void *s)
+static inline void swapp4 (void *d, const void *s)
 {
     ((CORBA::Octet *)d)[0] = ((CORBA::Octet *)s)[3];
     ((CORBA::Octet *)d)[1] = ((CORBA::Octet *)s)[2];
@@@@ -1028,7 +1027,7 @@@@ static inline void swap4 (void *d, const
     ((CORBA::Octet *)d)[3] = ((CORBA::Octet *)s)[0];
 }
 
-static inline void swap8 (void *d, const void *s)
+static inline void swapp8 (void *d, const void *s)
 {
     ((CORBA::Octet *)d)[0] = ((CORBA::Octet *)s)[7];
     ((CORBA::Octet *)d)[1] = ((CORBA::Octet *)s)[6];
@@@@ -1040,7 +1039,7 @@@@ static inline void swap8 (void *d, const
     ((CORBA::Octet *)d)[7] = ((CORBA::Octet *)s)[0];
 }
 
-static inline void swap16 (void *d, const void *s)
+static inline void swapp16 (void *d, const void *s)
 {
     ((CORBA::Octet *)d)[0]  = ((CORBA::Octet *)s)[15];
     ((CORBA::Octet *)d)[1]  = ((CORBA::Octet *)s)[14];
@@@@ -1096,7 +1095,7 @@@@ MICO::CDREncoder::put_short (CORBA::Shor
 	buf->put2 (&s);
     } else {
 	CORBA::Short s2;
-	swap2 (&s2, &s);
+	swapp2 (&s2, &s);
 	buf->put2 (&s2);
     }
 }
@@@@ -1108,7 +1107,7 @@@@ MICO::CDREncoder::put_ushort (CORBA::USh
 	buf->put2 (&us);
     } else {
 	CORBA::UShort us2;
-	swap2 (&us2, &us);
+	swapp2 (&us2, &us);
 	buf->put2 (&us2);
     }
 }
@@@@ -1120,7 +1119,7 @@@@ MICO::CDREncoder::put_long (CORBA::Long 
 	buf->put4 (&l);
     } else {
 	CORBA::Long l2;
-	swap4 (&l2, &l);
+	swapp4 (&l2, &l);
 	buf->put4 (&l2);
     }
 }
@@@@ -1132,7 +1131,7 @@@@ MICO::CDREncoder::put_longlong (CORBA::L
 	buf->put8 (&l);
     } else {
 	CORBA::LongLong l2;
-	swap8 (&l2, &l);
+	swapp8 (&l2, &l);
 	buf->put8 (&l2);
     }
 }
@@@@ -1144,7 +1143,7 @@@@ MICO::CDREncoder::put_ulong (CORBA::ULon
 	buf->put4 (&ul);
     } else {
 	CORBA::ULong ul2;
-	swap4 (&ul2, &ul);
+	swapp4 (&ul2, &ul);
 	buf->put4 (&ul2);
     }
 }
@@@@ -1156,7 +1155,7 @@@@ MICO::CDREncoder::put_ulonglong (CORBA::
 	buf->put8 (&ul);
     } else {
 	CORBA::ULongLong ul2;
-	swap8 (&ul2, &ul);
+	swapp8 (&ul2, &ul);
 	buf->put8 (&ul2);
     }
 }
@@@@ -1169,7 +1168,7 @@@@ MICO::CDREncoder::put_float (CORBA::Floa
 	buf->put4 (&f);
     } else {
 	CORBA::Float f2;
-	swap4 (&f2, &f);
+	swapp4 (&f2, &f);
 	buf->put4 (&f2);
     }
 #else
@@@@ -1179,7 +1178,7 @@@@ MICO::CDREncoder::put_float (CORBA::Floa
 	buf->put4 (b);
     } else {
 	CORBA::Octet b2[4];
-	swap4 (b2, b);
+	swapp4 (b2, b);
 	buf->put4 (b2);
     }
 #endif
@@@@ -1193,7 +1192,7 @@@@ MICO::CDREncoder::put_double (CORBA::Dou
 	buf->put8 (&d);
     } else {
 	CORBA::Double d2;
-	swap8 (&d2, &d);
+	swapp8 (&d2, &d);
 	buf->put8 (&d2);
     }
 #else
@@@@ -1203,7 +1202,7 @@@@ MICO::CDREncoder::put_double (CORBA::Dou
 	buf->put8 (b);
     } else {
 	CORBA::Octet b2[8];
-	swap8 (b2, b);
+	swapp8 (b2, b);
 	buf->put8 (b2);
     }
 #endif
@@@@ -1217,7 +1216,7 @@@@ MICO::CDREncoder::put_longdouble (CORBA:
 	buf->put16 (&d);
     } else {
 	CORBA::LongDouble d2;
-	swap16 (&d2, &d);
+	swapp16 (&d2, &d);
 	buf->put16 (&d2);
     }
 #else
@@@@ -1227,7 +1226,7 @@@@ MICO::CDREncoder::put_longdouble (CORBA:
 	buf->put16 (b);
     } else {
 	CORBA::Octet b2[16];
-	swap16 (b2, b);
+	swapp16 (b2, b);
 	buf->put16 (b2);
     }
 #endif
@@@@ -1281,7 +1280,7 @@@@ MICO::CDREncoder::put_shorts (const CORB
 	buf->resize (2*l);
 	CORBA::Short *d = (CORBA::Short *)buf->wdata();
 	for (CORBA::Long i = l; --i >= 0; ++d, ++p)
-	    swap2 (d, p);
+	    swapp2 (d, p);
 	buf->wseek_rel (2*l);
     }
 }
@@@@ -1296,7 +1295,7 @@@@ MICO::CDREncoder::put_ushorts (const COR
 	buf->resize (2*l);
 	CORBA::UShort *d = (CORBA::UShort *)buf->wdata();
 	for (CORBA::Long i = l; --i >= 0; ++d, ++p)
-	    swap2 (d, p);
+	    swapp2 (d, p);
 	buf->wseek_rel (2*l);
     }
 }
@@@@ -1311,7 +1310,7 @@@@ MICO::CDREncoder::put_longs (const CORBA
 	buf->resize (4*l);
 	CORBA::Long *d = (CORBA::Long *)buf->wdata();
 	for (CORBA::Long i = l; --i >= 0; ++d, ++p)
-	    swap4 (d, p);
+	    swapp4 (d, p);
 	buf->wseek_rel (4*l);
     }
 }
@@@@ -1326,7 +1325,7 @@@@ MICO::CDREncoder::put_longlongs (const C
 	buf->resize (8*l);
 	CORBA::LongLong *d = (CORBA::LongLong *)buf->wdata();
 	for (CORBA::Long i = l; --i >= 0; ++d, ++p)
-	    swap8 (d, p);
+	    swapp8 (d, p);
 	buf->wseek_rel (8*l);
     }
 }
@@@@ -1341,7 +1340,7 @@@@ MICO::CDREncoder::put_ulongs (const CORB
 	buf->resize (4*l);
 	CORBA::ULong *d = (CORBA::ULong *)buf->wdata();
 	for (CORBA::Long i = l; --i >= 0; ++d, ++p)
-	    swap4 (d, p);
+	    swapp4 (d, p);
 	buf->wseek_rel (4*l);
     }
 }
@@@@ -1356,7 +1355,7 @@@@ MICO::CDREncoder::put_ulonglongs (const 
 	buf->resize (8*l);
 	CORBA::ULongLong *d = (CORBA::ULongLong *)buf->wdata();
 	for (CORBA::Long i = l; --i >= 0; ++d, ++p)
-	    swap8 (d, p);
+	    swapp8 (d, p);
 	buf->wseek_rel (8*l);
     }
 }
@@@@ -1571,7 +1570,7 @@@@ MICO::CDRDecoder::get_short (CORBA::Shor
     CORBA::Short s2;
     if (!buf->get2 (&s2))
 	return FALSE;
-    swap2 (&s, &s2);
+    swapp2 (&s, &s2);
     return TRUE;
 }
 
@@@@ -1584,7 +1583,7 @@@@ MICO::CDRDecoder::get_ushort (CORBA::USh
     CORBA::UShort us2;
     if (!buf->get2 (&us2))
 	return FALSE;
-    swap2 (&us, &us2);
+    swapp2 (&us, &us2);
     return TRUE;
 }
 
@@@@ -1597,7 +1596,7 @@@@ MICO::CDRDecoder::get_long (CORBA::Long 
     CORBA::Long l2;
     if (!buf->get4 (&l2))
 	return FALSE;
-    swap4 (&l, &l2);
+    swapp4 (&l, &l2);
     return TRUE;
 }
 
@@@@ -1610,7 +1609,7 @@@@ MICO::CDRDecoder::get_longlong (CORBA::L
     CORBA::LongLong l2;
     if (!buf->get8 (&l2))
 	return FALSE;
-    swap8 (&l, &l2);
+    swapp8 (&l, &l2);
     return TRUE;
 }
 
@@@@ -1623,7 +1622,7 @@@@ MICO::CDRDecoder::get_ulong (CORBA::ULon
     CORBA::ULong ul2;
     if (!buf->get4 (&ul2))
 	return FALSE;
-    swap4 (&ul, &ul2);
+    swapp4 (&ul, &ul2);
     return TRUE;
 }
 
@@@@ -1636,7 +1635,7 @@@@ MICO::CDRDecoder::get_ulonglong (CORBA::
     CORBA::ULongLong ul2;
     if (!buf->get8 (&ul2))
 	return FALSE;
-    swap8 (&ul, &ul2);
+    swapp8 (&ul, &ul2);
     return TRUE;
 }
 
@@@@ -1650,7 +1649,7 @@@@ MICO::CDRDecoder::get_float (CORBA::Floa
     CORBA::Float f2;
     if (!buf->get4 (&f2))
 	return FALSE;
-    swap4 (&f, &f2);
+    swapp4 (&f, &f2);
 #else
     CORBA::Octet b[4];
     if (data_bo == mach_bo) {
@@@@ -1663,7 +1662,7 @@@@ MICO::CDRDecoder::get_float (CORBA::Floa
     CORBA::Octet b2[4];
     if (!buf->get4 (b2))
 	return FALSE;
-    swap4 (&b, &b2);
+    swapp4 (&b, &b2);
     mico_ieee2float (b, f);
 #endif
     return TRUE;
@@@@ -1679,7 +1678,7 @@@@ MICO::CDRDecoder::get_double (CORBA::Dou
     CORBA::Double d2;
     if (!buf->get8 (&d2))
 	return FALSE;
-    swap8 (&d, &d2);
+    swapp8 (&d, &d2);
 #else
     CORBA::Octet b[8];
     if (data_bo == mach_bo) {
@@@@ -1692,7 +1691,7 @@@@ MICO::CDRDecoder::get_double (CORBA::Dou
     CORBA::Octet b2[8];
     if (!buf->get8 (b2))
 	return FALSE;
-    swap8 (&b, &b2);
+    swapp8 (&b, &b2);
     mico_ieee2double (b, d);
 #endif
     return TRUE;
@@@@ -1708,7 +1707,7 @@@@ MICO::CDRDecoder::get_longdouble (CORBA:
     CORBA::LongDouble d2;
     if (!buf->get16 (&d2))
 	return FALSE;
-    swap16 (&d, &d2);
+    swapp16 (&d, &d2);
 #else
     CORBA::Octet b[16];
     if (data_bo == mach_bo) {
@@@@ -1721,7 +1720,7 @@@@ MICO::CDRDecoder::get_longdouble (CORBA:
     CORBA::Octet b2[16];
     if (!buf->get16 (b2))
 	return FALSE;
-    swap16 (&b, &b2);
+    swapp16 (&b, &b2);
     mico_ieee2ldouble (b, d);
 #endif
     return TRUE;
@@@@ -1779,7 +1778,7 @@@@ MICO::CDRDecoder::get_shorts (CORBA::Sho
 
     CORBA::Short *s = (CORBA::Short *)buf->data();
     for (CORBA::Long i = l; --i >= 0; ++p, ++s)
-	swap2 (p, s);
+	swapp2 (p, s);
     buf->rseek_rel (2*l);
 
     return TRUE;
@@@@ -1799,7 +1798,7 @@@@ MICO::CDRDecoder::get_ushorts (CORBA::US
 
     CORBA::UShort *s = (CORBA::UShort *)buf->data();
     for (CORBA::Long i = l; --i >= 0; ++p, ++s)
-	swap2 (p, s);
+	swapp2 (p, s);
     buf->rseek_rel (2*l);
 
     return TRUE;
@@@@ -1819,7 +1818,7 @@@@ MICO::CDRDecoder::get_longs (CORBA::Long
 
     CORBA::Long *s = (CORBA::Long *)buf->data();
     for (CORBA::Long i = l; --i >= 0; ++p, ++s)
-	swap4 (p, s);
+	swapp4 (p, s);
     buf->rseek_rel (4*l);
 
     return TRUE;
@@@@ -1839,7 +1838,7 @@@@ MICO::CDRDecoder::get_longlongs (CORBA::
 
     CORBA::LongLong *s = (CORBA::LongLong *)buf->data();
     for (CORBA::Long i = l; --i >= 0; ++p, ++s)
-	swap8 (p, s);
+	swapp8 (p, s);
     buf->rseek_rel (8*l);
 
     return TRUE;
@@@@ -1859,7 +1858,7 @@@@ MICO::CDRDecoder::get_ulongs (CORBA::ULo
 
     CORBA::ULong *s = (CORBA::ULong *)buf->data();
     for (CORBA::Long i = l; --i >= 0; ++p, ++s)
-	swap4 (p, s);
+	swapp4 (p, s);
     buf->rseek_rel (4*l);
 
     return TRUE;
@@@@ -1879,7 +1878,7 @@@@ MICO::CDRDecoder::get_ulonglongs (CORBA:
 
     CORBA::ULongLong *s = (CORBA::ULongLong *)buf->data();
     for (CORBA::Long i = l; --i >= 0; ++p, ++s)
-	swap8 (p, s);
+	swapp8 (p, s);
     buf->rseek_rel (8*l);
 
     return TRUE;
@


1.3
log
@make it build with gcc3.
Mostly work from Aleksander Piotrowski
@
text
@d1 1
a1 1
$OpenBSD: patch-codec_cc,v 1.2 2002/01/08 12:33:23 naddy Exp $
@


1.2
log
@make this build on sparc; regen patches
@
text
@d1 1
a1 1
$OpenBSD: patch-codec_cc,v 1.1.1.1 2001/06/28 19:59:08 shell Exp $
d3 10
a12 2
+++ orb/codec.cc	Mon Jan  7 13:27:26 2002
@@@@ -1014,13 +1014,13 @@@@ CORBA::DataDecoder::byteorder (CORBA::By
d28 1
a28 1
@@@@ -1028,7 +1028,7 @@@@ static inline void swap4 (void *d, const
d37 1
a37 1
@@@@ -1040,7 +1040,7 @@@@ static inline void swap8 (void *d, const
d46 1
a46 1
@@@@ -1096,7 +1096,7 @@@@ MICO::CDREncoder::put_short (CORBA::Shor
d55 1
a55 1
@@@@ -1108,7 +1108,7 @@@@ MICO::CDREncoder::put_ushort (CORBA::USh
d64 1
a64 1
@@@@ -1120,7 +1120,7 @@@@ MICO::CDREncoder::put_long (CORBA::Long 
d73 1
a73 1
@@@@ -1132,7 +1132,7 @@@@ MICO::CDREncoder::put_longlong (CORBA::L
d82 1
a82 1
@@@@ -1144,7 +1144,7 @@@@ MICO::CDREncoder::put_ulong (CORBA::ULon
d91 1
a91 1
@@@@ -1156,7 +1156,7 @@@@ MICO::CDREncoder::put_ulonglong (CORBA::
d100 1
a100 1
@@@@ -1169,7 +1169,7 @@@@ MICO::CDREncoder::put_float (CORBA::Floa
d109 1
a109 1
@@@@ -1179,7 +1179,7 @@@@ MICO::CDREncoder::put_float (CORBA::Floa
d118 1
a118 1
@@@@ -1193,7 +1193,7 @@@@ MICO::CDREncoder::put_double (CORBA::Dou
d127 1
a127 1
@@@@ -1203,7 +1203,7 @@@@ MICO::CDREncoder::put_double (CORBA::Dou
d136 1
a136 1
@@@@ -1217,7 +1217,7 @@@@ MICO::CDREncoder::put_longdouble (CORBA:
d145 1
a145 1
@@@@ -1227,7 +1227,7 @@@@ MICO::CDREncoder::put_longdouble (CORBA:
d154 1
a154 1
@@@@ -1281,7 +1281,7 @@@@ MICO::CDREncoder::put_shorts (const CORB
d163 1
a163 1
@@@@ -1296,7 +1296,7 @@@@ MICO::CDREncoder::put_ushorts (const COR
d172 1
a172 1
@@@@ -1311,7 +1311,7 @@@@ MICO::CDREncoder::put_longs (const CORBA
d181 1
a181 1
@@@@ -1326,7 +1326,7 @@@@ MICO::CDREncoder::put_longlongs (const C
d190 1
a190 1
@@@@ -1341,7 +1341,7 @@@@ MICO::CDREncoder::put_ulongs (const CORB
d199 1
a199 1
@@@@ -1356,7 +1356,7 @@@@ MICO::CDREncoder::put_ulonglongs (const 
d208 1
a208 1
@@@@ -1571,7 +1571,7 @@@@ MICO::CDRDecoder::get_short (CORBA::Shor
d217 1
a217 1
@@@@ -1584,7 +1584,7 @@@@ MICO::CDRDecoder::get_ushort (CORBA::USh
d226 1
a226 1
@@@@ -1597,7 +1597,7 @@@@ MICO::CDRDecoder::get_long (CORBA::Long 
d235 1
a235 1
@@@@ -1610,7 +1610,7 @@@@ MICO::CDRDecoder::get_longlong (CORBA::L
d244 1
a244 1
@@@@ -1623,7 +1623,7 @@@@ MICO::CDRDecoder::get_ulong (CORBA::ULon
d253 1
a253 1
@@@@ -1636,7 +1636,7 @@@@ MICO::CDRDecoder::get_ulonglong (CORBA::
d262 1
a262 1
@@@@ -1650,7 +1650,7 @@@@ MICO::CDRDecoder::get_float (CORBA::Floa
d271 1
a271 1
@@@@ -1663,7 +1663,7 @@@@ MICO::CDRDecoder::get_float (CORBA::Floa
d280 1
a280 1
@@@@ -1679,7 +1679,7 @@@@ MICO::CDRDecoder::get_double (CORBA::Dou
d289 1
a289 1
@@@@ -1692,7 +1692,7 @@@@ MICO::CDRDecoder::get_double (CORBA::Dou
d298 1
a298 1
@@@@ -1708,7 +1708,7 @@@@ MICO::CDRDecoder::get_longdouble (CORBA:
d307 1
a307 1
@@@@ -1721,7 +1721,7 @@@@ MICO::CDRDecoder::get_longdouble (CORBA:
d316 1
a316 1
@@@@ -1779,7 +1779,7 @@@@ MICO::CDRDecoder::get_shorts (CORBA::Sho
d325 1
a325 1
@@@@ -1799,7 +1799,7 @@@@ MICO::CDRDecoder::get_ushorts (CORBA::US
d334 1
a334 1
@@@@ -1819,7 +1819,7 @@@@ MICO::CDRDecoder::get_longs (CORBA::Long
d343 1
a343 1
@@@@ -1839,7 +1839,7 @@@@ MICO::CDRDecoder::get_longlongs (CORBA::
d352 1
a352 1
@@@@ -1859,7 +1859,7 @@@@ MICO::CDRDecoder::get_ulongs (CORBA::ULo
d361 1
a361 1
@@@@ -1879,7 +1879,7 @@@@ MICO::CDRDecoder::get_ulonglongs (CORBA:
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD: patch-codec.cc,v 1.1 2001/03/23 1:02:10 andre Exp $
--- orb/codec.cc.orig	Mon Dec  4 13:53:52 2000
+++ orb/codec.cc	Thu Mar 15 19:47:00 2001
@@@@ -983,13 +983,13 @@@@ CORBA::DataDecoder::byteorder (CORBA::By
d20 1
a20 1
@@@@ -997,7 +997,7 @@@@ static inline void swap4 (void *d, const
d29 1
a29 1
@@@@ -1009,7 +1009,7 @@@@ static inline void swap8 (void *d, const
d38 1
a38 1
@@@@ -1065,7 +1065,7 @@@@ MICO::CDREncoder::put_short (CORBA::Shor
d47 1
a47 1
@@@@ -1077,7 +1077,7 @@@@ MICO::CDREncoder::put_ushort (CORBA::USh
d56 1
a56 1
@@@@ -1089,7 +1089,7 @@@@ MICO::CDREncoder::put_long (CORBA::Long 
d65 1
a65 1
@@@@ -1101,7 +1101,7 @@@@ MICO::CDREncoder::put_longlong (CORBA::L
d74 1
a74 1
@@@@ -1113,7 +1113,7 @@@@ MICO::CDREncoder::put_ulong (CORBA::ULon
d83 1
a83 1
@@@@ -1125,7 +1125,7 @@@@ MICO::CDREncoder::put_ulonglong (CORBA::
d92 1
a92 1
@@@@ -1138,7 +1138,7 @@@@ MICO::CDREncoder::put_float (CORBA::Floa
d101 1
a101 1
@@@@ -1148,7 +1148,7 @@@@ MICO::CDREncoder::put_float (CORBA::Floa
d110 1
a110 1
@@@@ -1162,7 +1162,7 @@@@ MICO::CDREncoder::put_double (CORBA::Dou
d119 1
a119 1
@@@@ -1172,7 +1172,7 @@@@ MICO::CDREncoder::put_double (CORBA::Dou
d128 1
a128 1
@@@@ -1186,7 +1186,7 @@@@ MICO::CDREncoder::put_longdouble (CORBA:
d137 1
a137 1
@@@@ -1196,7 +1196,7 @@@@ MICO::CDREncoder::put_longdouble (CORBA:
d146 1
a146 1
@@@@ -1250,7 +1250,7 @@@@ MICO::CDREncoder::put_shorts (const CORB
d155 1
a155 1
@@@@ -1265,7 +1265,7 @@@@ MICO::CDREncoder::put_ushorts (const COR
d164 1
a164 1
@@@@ -1280,7 +1280,7 @@@@ MICO::CDREncoder::put_longs (const CORBA
d173 1
a173 1
@@@@ -1295,7 +1295,7 @@@@ MICO::CDREncoder::put_longlongs (const C
d182 1
a182 1
@@@@ -1310,7 +1310,7 @@@@ MICO::CDREncoder::put_ulongs (const CORB
d191 1
a191 1
@@@@ -1325,7 +1325,7 @@@@ MICO::CDREncoder::put_ulonglongs (const 
d200 1
a200 1
@@@@ -1541,7 +1541,7 @@@@ MICO::CDRDecoder::get_short (CORBA::Shor
d209 1
a209 1
@@@@ -1554,7 +1554,7 @@@@ MICO::CDRDecoder::get_ushort (CORBA::USh
d218 1
a218 1
@@@@ -1567,7 +1567,7 @@@@ MICO::CDRDecoder::get_long (CORBA::Long 
d227 1
a227 1
@@@@ -1580,7 +1580,7 @@@@ MICO::CDRDecoder::get_longlong (CORBA::L
d236 1
a236 1
@@@@ -1593,7 +1593,7 @@@@ MICO::CDRDecoder::get_ulong (CORBA::ULon
d245 1
a245 1
@@@@ -1606,7 +1606,7 @@@@ MICO::CDRDecoder::get_ulonglong (CORBA::
d254 1
a254 1
@@@@ -1620,7 +1620,7 @@@@ MICO::CDRDecoder::get_float (CORBA::Floa
d263 1
a263 1
@@@@ -1633,7 +1633,7 @@@@ MICO::CDRDecoder::get_float (CORBA::Floa
d272 1
a272 1
@@@@ -1649,7 +1649,7 @@@@ MICO::CDRDecoder::get_double (CORBA::Dou
d281 1
a281 1
@@@@ -1662,7 +1662,7 @@@@ MICO::CDRDecoder::get_double (CORBA::Dou
d290 1
a290 1
@@@@ -1678,7 +1678,7 @@@@ MICO::CDRDecoder::get_longdouble (CORBA:
d299 1
a299 1
@@@@ -1691,7 +1691,7 @@@@ MICO::CDRDecoder::get_longdouble (CORBA:
d308 1
a308 1
@@@@ -1749,7 +1749,7 @@@@ MICO::CDRDecoder::get_shorts (CORBA::Sho
d317 1
a317 1
@@@@ -1769,7 +1769,7 @@@@ MICO::CDRDecoder::get_ushorts (CORBA::US
d326 1
a326 1
@@@@ -1789,7 +1789,7 @@@@ MICO::CDRDecoder::get_longs (CORBA::Long
d335 1
a335 1
@@@@ -1809,7 +1809,7 @@@@ MICO::CDRDecoder::get_longlongs (CORBA::
d344 1
a344 1
@@@@ -1829,7 +1829,7 @@@@ MICO::CDRDecoder::get_ulongs (CORBA::ULo
d353 1
a353 1
@@@@ -1849,7 +1849,7 @@@@ MICO::CDRDecoder::get_ulonglongs (CORBA:
@


1.1.1.1
log
@Initial import of mico-2.3.5

Port Maintainer : Andre S. Barbosa <andre@@ravel.ufrj.br>
---
Mico is a freely available and complete CORBA-compliant implementation.
It allows applications to interoperate in a distributed and
heterogeneous environment, regardless of the locations of the
applications, operating systems and programming language.

WWW: http://www.mico.org

@
text
@@
