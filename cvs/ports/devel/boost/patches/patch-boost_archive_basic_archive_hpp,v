head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.16
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.03.08.01.21.37;	author brad;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update to boost 1.53.0.

Mostly from Amit Kulkarni.

ok sthen@@
@
text
@$OpenBSD$
--- boost/archive/basic_archive.hpp.orig	Wed Oct 10 17:12:59 2012
+++ boost/archive/basic_archive.hpp	Wed Oct 10 17:10:46 2012
@@@@ -115,7 +115,7 @@@@ class class_id_type { (public)
     explicit class_id_type(const int t_) : t(t_){
         BOOST_ASSERT(t_ <= boost::integer_traits<base_type>::const_max);
     }
-    explicit class_id_type(const std::size_t t_) : t(t_){
+    explicit class_id_type(const size_t t_) : t(t_){
  //       BOOST_ASSERT(t_ <= boost::integer_traits<base_type>::const_max);
     }
     class_id_type(const class_id_type & t_) : 
@@@@ -151,7 +151,7 @@@@ class object_id_type { (private)
 public:
     object_id_type(): t(0) {};
     // note: presumes that size_t >= unsigned int.
-    explicit object_id_type(const std::size_t & t_) : t(t_){
+    explicit object_id_type(const size_t & t_) : t(t_){
         BOOST_ASSERT(t_ <= boost::integer_traits<base_type>::const_max);
     }
     object_id_type(const object_id_type & t_) : 
@
