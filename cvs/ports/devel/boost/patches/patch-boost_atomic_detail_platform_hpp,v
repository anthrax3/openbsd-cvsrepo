head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.08.03.18.29.30;	author jca;	state Exp;
branches;
next	;
commitid	c3q5T4b9jjPIWkir;


desc
@@


1.1
log
@Unbreak boost on (at least) alpha, hppa and sparc64

- ensure we don't build the 'context' and 'coroutine' libs, they are not
  portable and the latter depends on the former
- don't use the 'gcc_sparc' backend in Boost.atomic, for it doesn't
  build; use the generic gcc backend based on __sync_*
- stop tweaking cc -march / -mcpu values; this is not desirable on any
  arch and it breaks on sparc64 due to a bogus -mcpu=c3 default
- don't attempt to force -m32 / -m64 flags, this breaks at least alpha
  (64 bits but doesn't understand -m64)

alpha, hppa & sparc64 tests by landry@@, amd64 bulk by ajacoutot@@
ok jasper@@
@
text
@$OpenBSD$

The gcc_sparc backend doesn't build.

--- boost/atomic/detail/platform.hpp.orig	Wed Jul 29 20:47:08 2015
+++ boost/atomic/detail/platform.hpp	Wed Jul 29 21:51:19 2015
@@@@ -59,7 +59,7 @@@@
 
 #define BOOST_ATOMIC_DETAIL_PLATFORM gcc_arm
 
-#elif defined(__GNUC__) && defined(__sparc_v9__)
+#elif defined(__GNUC__) && defined(__sparc_v9__) && defined(notyet)
 
 #define BOOST_ATOMIC_DETAIL_PLATFORM gcc_sparc
 
@
