head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.6
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2016.06.01.14.56.54;	author dcoppa;	state Exp;
branches;
next	;
commitid	Pkbl83HpNEHPVwrW;


desc
@@


1.1
log
@
boost does not like mixing different compilers at build and compile
time.

We build boost itself with gcc-4.2.1 from base, which doesn't support
the integer scalar type __int128, and this results in a
/usr/local/include/boost/config/user.hpp lacking the "BOOST_HAS_INT128"
define.

When compiling something that depends on boost using a newer compiler
like gcc-4.9 or clang, a code snippet in
/usr/local/include/boost/config/compiler/{clang,gcc}.hpp reactivates
__int128 support, but the code containing typedef declarations
inside /usr/local/include/boost/config/suffix.hpp is never reached,
because /usr/local/include/boost/config/user.hpp lacks "BOOST_HAS_INT128".
Hence, the following errors occur:

/usr/local/include/boost/type_traits/is_integral.hpp:72:1: error: 'int128_type' is not a member of 'boost'
/usr/local/include/boost/type_traits/is_integral.hpp:73:1: error: 'uint128_type' is not a member of 'boost'

As a temporary band-aid, completely disable __int128 support on
OpenBSD.

OK jca@@, sthen@@
@
text
@$OpenBSD$

commit 7e3e5ef60ce216ddddbfb15b76e98257a1eb8338
Author: Beman <bdawes@@acm.org>
Date:   Fri Oct 16 16:03:45 2015 -0400

Missing unistd.h include in boost/libs/filesystem/src/unique_path.cpp

Fix errors:

error: use of undeclared identifier 'read'
error: use of undeclared identifier 'close'

--- libs/filesystem/src/unique_path.cpp.orig	Mon Mar 30 16:28:45 2015
+++ libs/filesystem/src/unique_path.cpp	Tue May 31 09:16:45 2016
@@@@ -22,6 +22,9 @@@@
 
 # ifdef BOOST_POSIX_API
 #   include <fcntl.h>
+#   ifdef BOOST_HAS_UNISTD_H
+#      include <unistd.h>
+#   endif
 # else // BOOST_WINDOWS_API
 #   include <windows.h>
 #   include <wincrypt.h>
@
