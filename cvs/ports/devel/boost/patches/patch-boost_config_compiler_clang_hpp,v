head	1.2;
access;
symbols
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2017.05.24.08.30.20;	author espie;	state Exp;
branches;
next	1.1;
commitid	XvTSUEHBZGL4CvNk;

1.1
date	2016.06.01.14.56.54;	author dcoppa;	state Exp;
branches;
next	;
commitid	Pkbl83HpNEHPVwrW;


desc
@@


1.2
log
@improve the clang config: boost hardcodes __attribute__((unused)) on the
wrong compiler, so re-add it (dependent ports will whine a lot less)
tell boost we have threads and int128 (there's not issue about dual
compiler for clang)
@
text
@$OpenBSD: patch-boost_config_compiler_clang_hpp,v 1.1 2016/06/01 14:56:54 dcoppa Exp $

boost does not like mixing different compilers at build and compile
time.

We build boost itself with gcc-4.2.1 from base, which doesn't support
the integer scalar type __int128, and this results in a
/usr/local/include/boost/config/user.hpp lacking the "BOOST_HAS_INT128"
define.

When compiling something that depends on boost using a newer compiler
like gcc-4.9 or clang, a code snippet in
/usr/local/include/boost/config/compiler/{clang,gcc}.hpp reactivates
__int128 support, but the code containing typedef declarations
inside /usr/local/include/boost/config/suffix.hpp is never reached,
because /usr/local/include/boost/config/user.hpp lacks "BOOST_HAS_INT128".
Hence, the following errors occur:

/usr/local/include/boost/type_traits/is_integral.hpp:72:1: error: 'int128_type' is not a member of 'boost'
/usr/local/include/boost/type_traits/is_integral.hpp:73:1: error: 'uint128_type' is not a member of 'boost'

As a temporary band-aid, completely disable __int128 support on
OpenBSD.

Index: boost/config/compiler/clang.hpp
--- boost/config/compiler/clang.hpp.orig
+++ boost/config/compiler/clang.hpp
@@@@ -60,7 +60,7 @@@@
 // Only re-enable this for nvcc if you're absolutely sure
 // of the circumstances under which it's supported:
 //
-#if defined(__SIZEOF_INT128__) && !defined(__CUDACC__)
+#if defined(__SIZEOF_INT128__) && !defined(__CUDACC__) && !defined(__OpenBSD__)
 #  define BOOST_HAS_INT128
 #endif
 
@@@@ -258,7 +258,7 @@@@
 
 
 // Unused attribute:
-#if defined(__GNUC__) && (__GNUC__ >= 4)
+#if defined(__GNUC__) && (__GNUC__ >= 4) || defined(__clang__)
 #  define BOOST_ATTRIBUTE_UNUSED __attribute__((unused))
 #endif
 
@


1.1
log
@
boost does not like mixing different compilers at build and compile
time.

We build boost itself with gcc-4.2.1 from base, which doesn't support
the integer scalar type __int128, and this results in a
/usr/local/include/boost/config/user.hpp lacking the "BOOST_HAS_INT128"
define.

When compiling something that depends on boost using a newer compiler
like gcc-4.9 or clang, a code snippet in
/usr/local/include/boost/config/compiler/{clang,gcc}.hpp reactivates
__int128 support, but the code containing typedef declarations
inside /usr/local/include/boost/config/suffix.hpp is never reached,
because /usr/local/include/boost/config/user.hpp lacks "BOOST_HAS_INT128".
Hence, the following errors occur:

/usr/local/include/boost/type_traits/is_integral.hpp:72:1: error: 'int128_type' is not a member of 'boost'
/usr/local/include/boost/type_traits/is_integral.hpp:73:1: error: 'uint128_type' is not a member of 'boost'

As a temporary band-aid, completely disable __int128 support on
OpenBSD.

OK jca@@, sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d25 3
a27 2
--- boost/config/compiler/clang.hpp.orig	Tue Mar 24 19:27:48 2015
+++ boost/config/compiler/clang.hpp	Mon May 30 09:10:59 2016
d35 9
@

