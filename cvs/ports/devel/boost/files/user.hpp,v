head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6;
locks; strict;
comment	@// @;


1.6
date	2017.07.27.17.45.07;	author espie;	state Exp;
branches;
next	1.5;
commitid	yYkTH8jr7pZ4srRQ;

1.5
date	2017.06.04.19.05.03;	author espie;	state Exp;
branches;
next	1.4;
commitid	tpbUrE3QgPrzoWXP;

1.4
date	2017.06.03.14.59.11;	author espie;	state Exp;
branches;
next	1.3;
commitid	0pNxBPLgn8uHzj9K;

1.3
date	2017.05.30.18.00.53;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	UDNJ9wEjM8Ju1AuU;

1.2
date	2017.05.24.08.30.20;	author espie;	state Exp;
branches;
next	1.1;
commitid	XvTSUEHBZGL4CvNk;

1.1
date	2017.05.21.11.22.31;	author espie;	state Exp;
branches;
next	;
commitid	AxiqfOYgFporax4o;


desc
@@


1.6
log
@Fix the clang config, really configure for INT128, using clang built-in
defines.

This lets i386 build clang.
@
text
@//  (C) Copyright Boost.org 2001.
//  Do not check in modified versions of this file,
//  This file may be customised by the end user, but not by boost.

//
//  Use this file to define a site and compiler specific
//  configuration policy, this version was auto-generated by
//  configure on Sun May 28 16:40:11 MSK 2017
//  With the following options:
//    CXX      = c++
//    CXXFLAGS = -I./../.. -I./../../libs/config/test -O2 -pipe  -Wno-c++11-extensions -Wno-keyword-macro  -Wno-expansion-to-defined -Wno-unused-local-typedef  -DBOOST_NO_CONFIG
//    LDFLAGS  = 
//    LIBS     = -lm -lpthread 
//

// define this to disable all config options,
// excluding the user config.  Use if your
// setup is fully ISO complient, and has no
// useful extentions, or for autoconf generated
// setups:
#ifndef BOOST_NO_CONFIG
#  define BOOST_NO_CONFIG
#endif


// define if you want to disable threading support, even
// when available:
// #define BOOST_DISABLE_THREADS

// define if you want the regex library to use the C locale
// even on Win32:
// #define BOOST_REGEX_USE_C_LOCALE

// define this is you want the regex library to use the C++
// locale:
// #define BOOST_REGEX_USE_CPP_LOCALE


//
// clang autoconf'd values, sorted
//
#define BOOST_HAS_CLOCK_GETTIME
#define BOOST_HAS_DIRENT_H
#define BOOST_HAS_EXPM1
#define BOOST_HAS_GETTIMEOFDAY
#if defined(_SIZEOF_INT_128_)
# define BOOST_HAS_INT128
#endif
#define BOOST_HAS_LOG1P
#define BOOST_HAS_LONG_LONG
#define BOOST_HAS_NANOSLEEP
#define BOOST_HAS_NL_TYPES_H
#define BOOST_HAS_NRVO
#define BOOST_HAS_PARTIAL_STD_ALLOCATOR
#define BOOST_HAS_PTHREADS
#define BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE
#define BOOST_HAS_PTHREAD_YIELD
#define BOOST_HAS_RVALUE_REFS
#define BOOST_HAS_SCHED_YIELD
#define BOOST_HAS_SIGACTION
#define BOOST_HAS_STDINT_H
#define BOOST_HAS_TR1_COMPLEX_OVERLOADS
#define BOOST_HAS_UNISTD_H
#define BOOST_HAS_VARIADIC_TMPL
#define BOOST_MSVC6_MEMBER_TEMPLATES
#define BOOST_NO_CXX11_ALIGNAS
#define BOOST_NO_CXX11_ALLOCATOR
#define BOOST_NO_CXX11_CHAR16_T
#define BOOST_NO_CXX11_CHAR32_T
#define BOOST_NO_CXX11_CONSTEXPR
#define BOOST_NO_CXX11_DECLTYPE
#define BOOST_NO_CXX11_DECLTYPE_N3276
#define BOOST_NO_CXX11_DEFAULTED_FUNCTIONS
#define BOOST_NO_CXX11_DELETED_FUNCTIONS
#define BOOST_NO_CXX11_EXPLICIT_CONVERSION_OPERATORS
#define BOOST_NO_CXX11_HDR_ATOMIC
#define BOOST_NO_CXX11_HDR_FUNCTIONAL
#define BOOST_NO_CXX11_HDR_FUTURE
#define BOOST_NO_CXX11_HDR_INITIALIZER_LIST
#define BOOST_NO_CXX11_HDR_TUPLE
#define BOOST_NO_CXX11_HDR_TYPE_TRAITS
#define BOOST_NO_CXX11_LAMBDAS
#define BOOST_NO_CXX11_NOEXCEPT
#define BOOST_NO_CXX11_NON_PUBLIC_DEFAULTED_FUNCTIONS
#define BOOST_NO_CXX11_NULLPTR
#define BOOST_NO_CXX11_RAW_LITERALS
#define BOOST_NO_CXX11_STATIC_ASSERT
#define BOOST_NO_CXX11_TRAILING_RESULT_TYPES
#define BOOST_NO_CXX11_UNICODE_LITERALS
#define BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX
#define BOOST_NO_CXX11_USER_DEFINED_LITERALS
#define BOOST_NO_CXX14_AGGREGATE_NSDMI
#define BOOST_NO_CXX14_CONSTEXPR
#define BOOST_NO_CXX14_DECLTYPE_AUTO
#define BOOST_NO_CXX14_DIGIT_SEPARATORS
#define BOOST_NO_CXX14_GENERIC_LAMBDAS
#define BOOST_NO_CXX14_INITIALIZED_LAMBDA_CAPTURES
#define BOOST_NO_CXX14_RETURN_TYPE_DEDUCTION
#define BOOST_NO_MS_INT64_NUMERIC_LIMITS

// not autoconf'd removed because of various issues
#define BOOST_NO_CXX11_RVALUE_REFERENCES
#define BOOST_NO_CXX11_SCOPED_ENUMS
#define BOOST_NO_CXX11_SMART_PTR
#define BOOST_NO_CXX11_VARIADIC_TEMPLATES

// not autoconfiged but necessary
#define BOOST_ASIO_HAS_UNISTD_H
#define BOOST_HAS_THREADS
// prevent some warnings all over the place
#define BOOST_PP_VARIADICS_MSVC 0
@


1.5
log
@the tests are wrong, but it's simpler to define the annoying constant to 0
@
text
@d46 3
a48 1
#define BOOST_HAS_INT128
@


1.4
log
@clean up Vadim's mess, reorg file so that what we're doing is actually
documented
@
text
@d108 2
@


1.3
log
@Better Clang support for Boost. Allows facter & friends to be built.

To be revisited later if something else will break under CMake.

a lot of valuable input from espie@@
@
text
@d40 1
a40 1
// use gcc values until we figure out more of clang
a84 3
#define BOOST_NO_CXX11_RVALUE_REFERENCES
#define BOOST_NO_CXX11_SCOPED_ENUMS
#define BOOST_NO_CXX11_SMART_PTR
a89 1
#define BOOST_NO_CXX11_VARIADIC_TEMPLATES
d98 6
@


1.2
log
@improve the clang config: boost hardcodes __attribute__((unused)) on the
wrong compiler, so re-add it (dependent ports will whine a lot less)
tell boost we have threads and int128 (there's not issue about dual
compiler for clang)
@
text
@d8 1
a8 1
//  configure on Sat May 20 12:00:58 CEST 2017
d11 1
a11 1
//    CXXFLAGS = -I./../.. -I./../../libs/config/test -O2 -pipe   -DBOOST_NO_CONFIG
d42 11
a52 5
#define BOOST_MSVC6_MEMBER_TEMPLATES
#define BOOST_HAS_UNISTD_H
#define BOOST_HAS_STDINT_H
#define BOOST_HAS_SIGACTION
#define BOOST_HAS_SCHED_YIELD
d54 1
d56 17
a72 28
#define BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE
#define BOOST_HAS_PARTIAL_STD_ALLOCATOR
#define BOOST_HAS_NRVO
#define BOOST_HAS_NL_TYPES_H
#define BOOST_HAS_NANOSLEEP
#define BOOST_HAS_LONG_LONG
#define BOOST_HAS_LOG1P
#define BOOST_HAS_GETTIMEOFDAY
#define BOOST_HAS_EXPM1
#define BOOST_HAS_DIRENT_H
#define BOOST_HAS_CLOCK_GETTIME
#define BOOST_NO_CXX11_VARIADIC_TEMPLATES
#define BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX
#define BOOST_NO_CXX11_UNICODE_LITERALS
#define BOOST_NO_CXX11_TEMPLATE_ALIASES
#define BOOST_NO_CXX11_LOCAL_CLASS_TEMPLATE_PARAMETERS
#define BOOST_NO_CXX11_STATIC_ASSERT
#define BOOST_NO_SFINAE_EXPR
#define BOOST_NO_CXX11_SCOPED_ENUMS
#define BOOST_NO_CXX11_RVALUE_REFERENCES
#define BOOST_NO_CXX11_RAW_LITERALS
#define BOOST_NO_CXX11_RANGE_BASED_FOR
#define BOOST_NO_CXX11_NULLPTR
#define BOOST_NO_CXX11_NOEXCEPT
#define BOOST_NO_CXX11_LAMBDAS
#define BOOST_NO_MS_INT64_NUMERIC_LIMITS
#define BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS
#define BOOST_NO_CXX11_FIXED_LENGTH_VARIADIC_TEMPLATE_EXPANSION_PACKS
d74 1
a74 4
#define BOOST_NO_CXX11_DELETED_FUNCTIONS
#define BOOST_NO_CXX11_DEFAULTED_FUNCTIONS
#define BOOST_NO_CXX11_DECLTYPE_N3276
#define BOOST_NO_CXX11_DECLTYPE
d76 18
a93 2
#define BOOST_NO_CXX14_VARIABLE_TEMPLATES
#define BOOST_NO_CXX14_RETURN_TYPE_DEDUCTION
d95 4
d100 2
a101 42
#define BOOST_NO_CXX14_GENERIC_LAMBDAS
#define BOOST_NO_CXX14_DIGIT_SEPARATORS
#define BOOST_NO_CXX14_DECLTYPE_AUTO
#define BOOST_NO_CXX14_CONSTEXPR
#define BOOST_NO_CXX11_USER_DEFINED_LITERALS
#define BOOST_NO_CXX11_TRAILING_RESULT_TYPES
#define BOOST_NO_CXX11_STD_ALIGN
#define BOOST_NO_CXX11_SMART_PTR
#define BOOST_NO_CXX11_REF_QUALIFIERS
#define BOOST_NO_CXX11_NUMERIC_LIMITS
#define BOOST_NO_CXX11_NON_PUBLIC_DEFAULTED_FUNCTIONS
#define BOOST_NO_CXX11_INLINE_NAMESPACES
#define BOOST_NO_CXX11_HDR_UNORDERED_SET
#define BOOST_NO_CXX11_HDR_UNORDERED_MAP
#define BOOST_NO_CXX11_HDR_TYPEINDEX
#define BOOST_NO_CXX11_HDR_TYPE_TRAITS
#define BOOST_NO_CXX11_HDR_TUPLE
#define BOOST_NO_CXX11_HDR_THREAD
#define BOOST_NO_CXX11_HDR_SYSTEM_ERROR
#define BOOST_NO_CXX11_HDR_REGEX
#define BOOST_NO_CXX11_HDR_RATIO
#define BOOST_NO_CXX11_HDR_RANDOM
#define BOOST_NO_CXX11_HDR_MUTEX
#define BOOST_NO_CXX11_HDR_INITIALIZER_LIST
#define BOOST_NO_CXX11_HDR_FUTURE
#define BOOST_NO_CXX11_HDR_FORWARD_LIST
#define BOOST_NO_CXX11_HDR_CONDITION_VARIABLE
#define BOOST_NO_CXX11_HDR_CODECVT
#define BOOST_NO_CXX11_HDR_CHRONO
#define BOOST_NO_CXX11_HDR_ATOMIC
#define BOOST_NO_CXX11_HDR_ARRAY
#define BOOST_NO_CXX11_FINAL
#define BOOST_NO_CXX11_ATOMIC_SMART_PTR
#define BOOST_NO_CXX11_ALLOCATOR
#define BOOST_NO_CXX11_ALIGNAS
#define BOOST_NO_CXX11_ADDRESSOF
#define BOOST_NO_CXX11_CONSTEXPR
#define BOOST_NO_COMPLETE_VALUE_INITIALIZATION
#define BOOST_NO_CXX11_CHAR32_T
#define BOOST_NO_CXX11_CHAR16_T
#define BOOST_NO_CXX11_AUTO_MULTIDECLARATIONS
#define BOOST_NO_CXX11_AUTO_DECLARATIONS
a105 1
#define BOOST_HAS_INT128
@


1.1
log
@first try at a clang compile, reuse gcc config so that stuff that builds
does build.

todo:
- enable more stuff
- look closer at the tooling, needs something like the gcc config change

but at least, this allows us to look at the remaining ports.
@
text
@d132 2
@

