head	1.68;
access;
symbols
	OPENBSD_6_1:1.60.0.2
	OPENBSD_6_1_BASE:1.60
	OPENBSD_6_0:1.58.0.2
	OPENBSD_6_0_BASE:1.58
	OPENBSD_5_9:1.56.0.2
	OPENBSD_5_9_BASE:1.56
	OPENBSD_5_8:1.56.0.4
	OPENBSD_5_8_BASE:1.56
	OPENBSD_5_7:1.54.0.2
	OPENBSD_5_7_BASE:1.54
	OPENBSD_5_6:1.52.0.4
	OPENBSD_5_6_BASE:1.52
	OPENBSD_5_5:1.52.0.2
	OPENBSD_5_5_BASE:1.52
	OPENBSD_5_4:1.46.0.2
	OPENBSD_5_4_BASE:1.46
	OPENBSD_5_3:1.42.0.2
	OPENBSD_5_3_BASE:1.42
	OPENBSD_5_2:1.38.0.2
	OPENBSD_5_2_BASE:1.38
	OPENBSD_5_1_BASE:1.35
	OPENBSD_5_1:1.35.0.2
	OPENBSD_5_0:1.30.0.2
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.27.0.2
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.24.0.2
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.18.0.2
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.16.0.6
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.4
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.8.0.2
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	wilfried_20061105:1.1.1.1
	wilfried:1.1.1;
locks; strict;
comment	@# @;


1.68
date	2017.06.04.19.05.03;	author espie;	state Exp;
branches;
next	1.67;
commitid	tpbUrE3QgPrzoWXP;

1.67
date	2017.06.02.02.21.06;	author espie;	state Exp;
branches;
next	1.66;
commitid	EZEgvddEumPSsbRb;

1.66
date	2017.05.30.18.00.53;	author zhuk;	state Exp;
branches;
next	1.65;
commitid	UDNJ9wEjM8Ju1AuU;

1.65
date	2017.05.30.07.54.36;	author espie;	state Exp;
branches;
next	1.64;
commitid	k3QPJTM6i0STuuGf;

1.64
date	2017.05.24.08.30.20;	author espie;	state Exp;
branches;
next	1.63;
commitid	XvTSUEHBZGL4CvNk;

1.63
date	2017.05.21.11.22.31;	author espie;	state Exp;
branches;
next	1.62;
commitid	AxiqfOYgFporax4o;

1.62
date	2017.04.19.11.16.03;	author sthen;	state Exp;
branches;
next	1.61;
commitid	RQY4uecaoLumt4eI;

1.61
date	2017.04.10.11.45.25;	author sthen;	state Exp;
branches;
next	1.60;
commitid	XDh1zlSBq0boKsHk;

1.60
date	2017.03.07.15.54.05;	author naddy;	state Exp;
branches;
next	1.59;
commitid	4ivqggWC9XMpFxph;

1.59
date	2016.09.13.14.40.29;	author naddy;	state Exp;
branches;
next	1.58;
commitid	SpVZjufuFzi5eQet;

1.58
date	2016.06.01.14.56.54;	author dcoppa;	state Exp;
branches;
next	1.57;
commitid	Pkbl83HpNEHPVwrW;

1.57
date	2016.05.27.22.35.40;	author dcoppa;	state Exp;
branches;
next	1.56;
commitid	pXYjX8XIDBYJSOsN;

1.56
date	2015.08.03.18.29.30;	author jca;	state Exp;
branches;
next	1.55;
commitid	c3q5T4b9jjPIWkir;

1.55
date	2015.07.01.08.41.59;	author jasper;	state Exp;
branches;
next	1.54;
commitid	Mehnwl4kYOTECbel;

1.54
date	2015.01.05.21.14.46;	author brad;	state Exp;
branches;
next	1.53;
commitid	hHAspomlPB9NRtor;

1.53
date	2014.11.15.08.17.56;	author kirby;	state Exp;
branches;
next	1.52;
commitid	j4wgY1grMbimCkWI;

1.52
date	2013.12.25.08.49.47;	author ajacoutot;	state Exp;
branches;
next	1.51;

1.51
date	2013.12.20.16.42.34;	author ajacoutot;	state Exp;
branches;
next	1.50;

1.50
date	2013.12.20.16.37.16;	author ajacoutot;	state Exp;
branches;
next	1.49;

1.49
date	2013.12.17.07.03.38;	author ajacoutot;	state Exp;
branches;
next	1.48;

1.48
date	2013.11.25.14.16.22;	author sthen;	state Exp;
branches;
next	1.47;

1.47
date	2013.09.22.14.31.24;	author dcoppa;	state Exp;
branches;
next	1.46;

1.46
date	2013.04.12.01.11.32;	author brad;	state Exp;
branches;
next	1.45;

1.45
date	2013.03.26.20.15.10;	author brad;	state Exp;
branches;
next	1.44;

1.44
date	2013.03.11.10.50.01;	author espie;	state Exp;
branches;
next	1.43;

1.43
date	2013.03.08.01.21.37;	author brad;	state Exp;
branches;
next	1.42;

1.42
date	2012.12.10.13.37.57;	author landry;	state Exp;
branches;
next	1.41;

1.41
date	2012.12.09.08.23.31;	author brad;	state Exp;
branches;
next	1.40;

1.40
date	2012.10.15.20.31.59;	author robert;	state Exp;
branches;
next	1.39;

1.39
date	2012.09.29.07.08.38;	author landry;	state Exp;
branches;
next	1.38;

1.38
date	2012.04.22.10.18.13;	author ajacoutot;	state Exp;
branches;
next	1.37;

1.37
date	2012.04.13.06.22.02;	author ajacoutot;	state Exp;
branches;
next	1.36;

1.36
date	2012.04.12.20.28.47;	author espie;	state Exp;
branches;
next	1.35;

1.35
date	2012.01.06.07.39.55;	author ajacoutot;	state Exp;
branches;
next	1.34;

1.34
date	2011.11.26.10.23.31;	author ajacoutot;	state Exp;
branches;
next	1.33;

1.33
date	2011.11.06.20.05.47;	author jasper;	state Exp;
branches;
next	1.32;

1.32
date	2011.11.02.11.54.15;	author jasper;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.19.19.53.20;	author naddy;	state Exp;
branches;
next	1.30;

1.30
date	2011.06.08.17.40.08;	author jasper;	state Exp;
branches;
next	1.29;

1.29
date	2011.05.05.17.08.27;	author jasper;	state Exp;
branches;
next	1.28;

1.28
date	2011.05.05.15.09.20;	author jasper;	state Exp;
branches;
next	1.27;

1.27
date	2010.09.19.20.09.41;	author jasper;	state Exp;
branches;
next	1.26;

1.26
date	2010.08.30.22.03.58;	author jasper;	state Exp;
branches;
next	1.25;

1.25
date	2010.08.25.20.27.16;	author sthen;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.26.12.25.23;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2010.04.30.20.08.02;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2010.04.21.12.30.57;	author landry;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.21.09.26.58;	author landry;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.08.11.33.35;	author landry;	state Exp;
branches;
next	1.19;

1.19
date	2010.03.30.11.00.15;	author robert;	state Exp;
branches;
next	1.18;

1.18
date	2009.07.27.00.34.24;	author kurt;	state Exp;
branches;
next	1.17;

1.17
date	2009.07.25.02.17.06;	author kurt;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.05.12.55.56;	author kurt;	state Exp;
branches;
next	1.15;

1.15
date	2008.05.27.00.52.01;	author deanna;	state Exp;
branches;
next	1.14;

1.14
date	2008.04.10.20.06.52;	author deanna;	state Exp;
branches;
next	1.13;

1.13
date	2008.04.06.17.57.43;	author deanna;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.03.07.44.39;	author bernd;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.06.00.01.15;	author deanna;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.18.20.46.03;	author deanna;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.16.02.52.57;	author merdely;	state Exp;
branches;
next	1.8;

1.8
date	2007.07.14.14.13.48;	author deanna;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.07.22.20.20;	author deanna;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.28.10.46.20;	author deanna;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.11.21.42.30;	author deanna;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.24.18.46.58;	author steven;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.13.21.52.52;	author wilfried;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.07.10.55.43;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.05.19.20.41;	author wilfried;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.05.19.20.41;	author wilfried;	state Exp;
branches;
next	;


desc
@@


1.68
log
@the tests are wrong, but it's simpler to define the annoying constant to 0
@
text
@# $OpenBSD: Makefile,v 1.67 2017/06/02 02:21:06 espie Exp $

ONLY_FOR_ARCHS=	${GCC4_ARCHS} ${CLANG_ARCHS}

COMMENT=	free peer-reviewed portable C++ source libraries

VERSION=	1.58.0
REVISION=	7
DISTNAME=	boost_${VERSION:S/./_/g}
PKGNAME=	boost-${VERSION}
CATEGORIES=	devel
MASTER_SITES=	${MASTER_SITE_SOURCEFORGE:=boost/}
EXTRACT_SUFX=	.tar.bz2

SO_VERSION=	6.0
BOOST_LIBS=	boost_atomic-mt \
		boost_chrono-mt boost_chrono \
		boost_container-mt boost_container \
		boost_date_time-mt boost_date_time \
		boost_filesystem-mt boost_filesystem \
		boost_graph-mt boost_graph \
		boost_iostreams-mt boost_iostreams \
		boost_locale-mt \
		boost_log-mt boost_log \
		boost_log_setup-mt boost_log_setup \
		boost_math_c99-mt boost_math_c99 \
		boost_math_c99f-mt boost_math_c99f \
		boost_math_c99l-mt boost_math_c99l \
		boost_math_tr1-mt boost_math_tr1 \
		boost_math_tr1f-mt boost_math_tr1f \
		boost_math_tr1l-mt boost_math_tr1l \
		boost_prg_exec_monitor-mt boost_prg_exec_monitor \
		boost_program_options-mt boost_program_options \
		boost_python-mt boost_python \
		boost_python3-mt boost_python3 \
		boost_random-mt boost_random \
		boost_regex-mt boost_regex \
		boost_serialization-mt boost_serialization \
		boost_signals-mt boost_signals \
		boost_system-mt boost_system \
		boost_thread-mt \
		boost_timer-mt boost_timer \
		boost_unit_test_framework-mt boost_unit_test_framework \
		boost_wave-mt boost_wave \
		boost_wserialization-mt boost_wserialization

.for _lib in ${BOOST_LIBS}
SHARED_LIBS+=	${_lib} ${SO_VERSION}
.endfor

HOMEPAGE=	http://www.boost.org/

MAINTAINER=	Brad Smith <brad@@comstyle.com>

# MIT-like
PERMIT_PACKAGE_CDROM=	Yes

WANTLIB=	c bz2 iconv m pthread ${LIBCXX} util z

MODULES=	lang/python
MODPY_RUNDEP=	No

BUILD_DEPENDS+=	lang/python/${MODPY_DEFAULT_VERSION_3}
LIB_DEPENDS=	archivers/bzip2 \
		converters/libiconv 

.include <bsd.port.arch.mk>
.if ${PROPERTIES:Mclang}
# XXX clang is *very* verbose on boost, the tricks that create typedefs
# just for checking, and the extensive use of C++11 extensions are fun
# so warn them off until we do better...
CXXFLAGS +=	-Wno-c++11-extensions -Wno-keyword-macro \
		-Wno-expansion-to-defined -Wno-unused-local-typedef

CFLAGS +=	-Wno-string-plus-int
TOOLSET =	clang
CONFIG =	${FILESDIR}/user.hpp
.else
TOOLSET =	gcc
CONFIG =	user.hpp
.endif

MAKE_ENV=	GCC="${CC}" GXX="${CXX}"

BJAM_CONFIG=	-sICONV_PATH=${LOCALBASE} \
		-sBZIP2_INCLUDE=${LOCALBASE}/include \
		-sBZIP2_LIBPATH=${LOCALBASE}/lib \
		-d+2 -q \
		-j ${MAKE_JOBS} \
		cflags='${CFLAGS} -pthread' cxxflags='${CXXFLAGS} -pthread' \
		python=${MODPY_VERSION} \
		variant=release link=static,shared threading=single,multi \
		--layout=tagged \
		--user-config=${WRKSRC}/tools/build/user-config.jam

# 'context' and 'coroutine' use MD bits and miss support for Alpha,
# PA-RISC, SPARC and SuperH. The author does not care
# about adding support for Alpha and PA-RISC.
BOOTSTRAP=	--with-bjam=${WRKSRC}/bjam \
		--with-python=${MODPY_BIN} \
		--with-python-root=${LOCALBASE} \
		--with-python-version=${MODPY_VERSION} \
		--with-toolset=${TOOLSET} \
		--without-icu \
		--without-libraries=context,coroutine

# python.port.mk makes assumptions about an empty CONFIGURE_STYLE
CONFIGURE_STYLE= none
CONFIGURE_ENV=	BJAM_CONFIG="${BJAM_CONFIG}" \
		CXX="${CXX}" CXXFLAGS="${CXXFLAGS}"

DPB_PROPERTIES= parallel

NO_TEST=	Yes

SUBST_VARS+=	SO_VERSION

do-configure:
	echo "using python : ${MODPY_DEFAULT_VERSION_3} : ${LOCALBASE}/bin/python${MODPY_DEFAULT_VERSION_3} : ${LOCALBASE}/include/python${MODPY_DEFAULT_VERSION_3}$$(python${MODPY_DEFAULT_VERSION_3}-config --abiflags) ;" >> ${WRKSRC}/tools/build/user-config.jam
	echo "using ${TOOLSET} : : ${CXX} ;" >>${WRKSRC}/tools/build/user-config.jam
	@@${SUBST_CMD} ${WRKSRC}/Jamroot
	@@cd ${WRKSRC}/libs/config && \
	    ${SETENV} ${CONFIGURE_ENV} /bin/sh ./configure && \
	    cp ${CONFIG} ${WRKSRC}/boost/config
	@@cd ${WRKSRC}/tools/build/src/engine && \
	    ${SETENV} CC="${CC}" CFLAGS="${CFLAGS}" /bin/sh ./build.sh cc && \
	    cp bin.openbsd*/b2 bin.openbsd*/bjam ${WRKSRC}
	@@cd ${WRKSRC} && chmod -R a+x ./ && \
	    /bin/sh ./bootstrap.sh ${BOOTSTRAP}

do-build:
	@@cd ${WRKSRC} && \
	    ./b2 ${BJAM_CONFIG}

do-install:
	${INSTALL_PROGRAM} ${WRKSRC}/tools/build/src/engine/bin.*/{b2,bjam} \
	    ${PREFIX}/bin
	${INSTALL_DATA} ${WRKSRC}/stage/lib/lib!(*.so) ${PREFIX}/lib
	@@cd ${WRKSRC} && \
	    find boost -type d -exec ${INSTALL_DATA_DIR} ${PREFIX}/include/{} \;
	@@cd ${WRKSRC} && \
	    find boost ! -name \*.orig -type f -exec ${INSTALL_DATA} {} ${PREFIX}/include/{} \;

.include <bsd.port.mk>
@


1.67
log
@fix nasty clang bug that prevented facter from building
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.66 2017/05/30 18:00:53 zhuk Exp $
d8 1
a8 1
REVISION=	6
@


1.66
log
@Better Clang support for Boost. Allows facter & friends to be built.

To be revisited later if something else will break under CMake.

a lot of valuable input from espie@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.65 2017/05/30 07:54:36 espie Exp $
d8 1
a8 1
REVISION=	5
@


1.65
log
@rename COMPILER as TOOLSET in prevision of impending change
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.64 2017/05/24 08:30:20 espie Exp $
d8 1
a8 1
REVISION=	4
@


1.64
log
@improve the clang config: boost hardcodes __attribute__((unused)) on the
wrong compiler, so re-add it (dependent ports will whine a lot less)
tell boost we have threads and int128 (there's not issue about dual
compiler for clang)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.63 2017/05/21 11:22:31 espie Exp $
d76 1
a76 1
COMPILER =	clang
d79 1
a79 1
COMPILER =	gcc
d103 1
a103 1
		--with-toolset=${COMPILER} \
d120 1
a120 1
	echo "using ${COMPILER} : : ${CXX} ;" >>${WRKSRC}/tools/build/user-config.jam
@


1.63
log
@first try at a clang compile, reuse gcc config so that stuff that builds
does build.

todo:
- enable more stuff
- look closer at the tooling, needs something like the gcc config change

but at least, this allows us to look at the remaining ports.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.62 2017/04/19 11:16:03 sthen Exp $
d8 1
a8 1
REVISION=	3
d72 3
a74 2
CXXFLAGS +=	-Wno-c++11-extensions -Wno-unused-local-typedef \
		-Wno-keyword-macro
@


1.62
log
@Add ${CLANG_ARCHS} to "ONLY_FOR_ARCHS = ${GCC4_ARCHS}" lines to give them
a chance on aarch64.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.61 2017/04/10 11:45:25 sthen Exp $
d67 15
d102 1
a102 1
		--with-toolset=gcc \
d119 1
a119 1
	echo "using gcc : : ${CXX} ;" >>${WRKSRC}/tools/build/user-config.jam
d123 1
a123 1
	    cp user.hpp ${WRKSRC}/boost/config
@


1.61
log
@use LIBCXX
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.60 2017/03/07 15:54:05 naddy Exp $
d3 1
a3 1
ONLY_FOR_ARCHS=	${GCC4_ARCHS}
@


1.60
log
@Honor CXX, CXXFLAGS.
(1) Pass CXX and CXXFLAGS to the configure script run.
(2) Split out the build of the bjam tool from the bootstrap procedure.
(3) Tell the main build to use CXX via user-config.jam.

ok Brad, jca@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.59 2016/09/13 14:40:29 naddy Exp $
d58 1
a58 1
WANTLIB=	c bz2 iconv m pthread stdc++ util z
@


1.59
log
@replace libiconv module
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.58 2016/06/01 14:56:54 dcoppa Exp $
d8 1
a8 1
REVISION=	2
d82 3
a84 2
# care about adding support for Alpha and PA-RISC.
BOOTSTRAP=	--with-python=${MODPY_BIN} \
d87 1
d93 2
a94 1
CONFIGURE_ENV=	BJAM_CONFIG="${BJAM_CONFIG}"
d104 1
d109 3
@


1.58
log
@
boost does not like mixing different compilers at build and compile
time.

We build boost itself with gcc-4.2.1 from base, which doesn't support
the integer scalar type __int128, and this results in a
/usr/local/include/boost/config/user.hpp lacking the "BOOST_HAS_INT128"
define.

When compiling something that depends on boost using a newer compiler
like gcc-4.9 or clang, a code snippet in
/usr/local/include/boost/config/compiler/{clang,gcc}.hpp reactivates
__int128 support, but the code containing typedef declarations
inside /usr/local/include/boost/config/suffix.hpp is never reached,
because /usr/local/include/boost/config/user.hpp lacks "BOOST_HAS_INT128".
Hence, the following errors occur:

/usr/local/include/boost/type_traits/is_integral.hpp:72:1: error: 'int128_type' is not a member of 'boost'
/usr/local/include/boost/type_traits/is_integral.hpp:73:1: error: 'uint128_type' is not a member of 'boost'

As a temporary band-aid, completely disable __int128 support on
OpenBSD.

OK jca@@, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.57 2016/05/27 22:35:40 dcoppa Exp $
d58 1
a58 1
WANTLIB=	c bz2 m pthread stdc++ util z
d60 1
a60 2
MODULES=	converters/libiconv \
		lang/python
d64 2
a65 1
LIB_DEPENDS=	archivers/bzip2
@


1.57
log
@
Fix Boost.Asio, broken after the removal of SSLv3 support:

/usr/local/include/boost/asio/ssl/impl/context.ipp: In constructor 'boost::asio::ssl::context::context(boost::asio::ssl::context_base::method)':
/usr/local/include/boost/asio/ssl/impl/context.ipp:93: error: '::SSLv3_method' has not been declared
/usr/local/include/boost/asio/ssl/impl/context.ipp:96: error: '::SSLv3_client_method' has not been declared
/usr/local/include/boost/asio/ssl/impl/context.ipp:99: error: '::SSLv3_server_method' has not been declared

OK jca@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.56 2015/08/03 18:29:30 jca Exp $
d8 1
a8 1
REVISION=	1
@


1.56
log
@Unbreak boost on (at least) alpha, hppa and sparc64

- ensure we don't build the 'context' and 'coroutine' libs, they are not
  portable and the latter depends on the former
- don't use the 'gcc_sparc' backend in Boost.atomic, for it doesn't
  build; use the generic gcc backend based on __sync_*
- stop tweaking cc -march / -mcpu values; this is not desirable on any
  arch and it breaks on sparc64 due to a bogus -mcpu=c3 default
- don't attempt to force -m32 / -m64 flags, this breaks at least alpha
  (64 bits but doesn't understand -m64)

alpha, hppa & sparc64 tests by landry@@, amd64 bulk by ajacoutot@@
ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.55 2015/07/01 08:41:59 jasper Exp $
d8 1
a8 1
REVISION=	0
@


1.55
log
@- update to boost 1.58.0

earlier diff looked good to brad
tested in multiple bulks by aja@@ and me
ok aja@@ robert@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.54 2015/01/05 21:14:46 brad Exp $
d8 1
a18 2
		boost_context-mt \
		boost_coroutine-mt boost_coroutine \
d80 1
a80 1
# context uses MD bits and is missing support for Alpha,
d87 1
a87 1
		--without-libraries=context
@


1.54
log
@Remove some chunks of the patch now that _POSIX_VERSION has been
bumped higher.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.53 2014/11/15 08:17:56 kirby Exp $
d7 1
a7 1
VERSION=	1.53.0
a9 1
REVISION=	7
d14 1
a14 1
SO_VERSION=	5.1
d16 8
a23 5
		boost_chrono boost_chrono-mt \
		boost_date_time boost_date_time-mt \
		boost_filesystem boost_filesystem-mt \
		boost_graph boost_graph-mt \
		boost_iostreams boost_iostreams-mt \
d25 17
a41 15
		boost_math_c99 boost_math_c99-mt \
		boost_math_c99f boost_math_c99f-mt \
		boost_math_c99l boost_math_c99l-mt \
		boost_math_tr1 boost_math_tr1-mt \
		boost_math_tr1f boost_math_tr1f-mt \
		boost_math_tr1l boost_math_tr1l-mt \
		boost_prg_exec_monitor boost_prg_exec_monitor-mt \
		boost_program_options boost_program_options-mt \
		boost_python boost_python-mt \
		boost_python3 boost_python3-mt \
		boost_random boost_random-mt \
		boost_regex boost_regex-mt \
		boost_serialization boost_serialization-mt \
		boost_signals boost_signals-mt \
		boost_system boost_system-mt \
d43 4
a46 4
		boost_timer boost_timer-mt \
		boost_unit_test_framework boost_unit_test_framework-mt \
		boost_wave boost_wave-mt \
		boost_wserialization boost_wserialization-mt
d75 1
a75 1
		cflags='${CFLAGS}' cxxflags='${CXXFLAGS}' \
d78 2
a79 1
		--layout=tagged
d101 1
a101 1
	echo "using python : ${MODPY_DEFAULT_VERSION_3} : ${LOCALBASE}/bin/python${MODPY_DEFAULT_VERSION_3} : ${LOCALBASE}/include/python${MODPY_DEFAULT_VERSION_3}$$(python${MODPY_DEFAULT_VERSION_3}-config --abiflags) ;" >> ${WRKSRC}/tools/build/v2/user-config.jam
d111 1
a111 1
	    ./bjam ${BJAM_CONFIG}
d114 1
a114 1
	${INSTALL_PROGRAM} ${WRKSRC}/tools/build/v2/engine/bin.*/bjam \
@


1.53
log
@add bzip2 support for boost-iostreams.
needed for future releases of games/wesnoth.
ok brad@@ (maintainer)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.52 2013/12/25 08:49:47 ajacoutot Exp $
d10 1
a10 1
REVISION=	6
@


1.52
log
@Re-add python3 support properly.

maintainer timeout
ok nigel@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.49 2013/12/17 07:03:38 ajacoutot Exp $
d10 1
a10 1
REVISION=	5
d15 1
a15 1
SO_VERSION=	5.0
d55 1
a55 1
WANTLIB=	c m pthread stdc++ util z
d62 1
d67 2
a68 1
		-sNO_BZIP2=1 \
@


1.51
log
@Revert sure... expect the bump!
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.50 2013/12/20 16:37:16 ajacoutot Exp $
d10 1
a10 1
REVISION=	4
d32 1
d61 2
d70 1
d94 1
@


1.50
log
@Revert previous (py3 support); it requires more work and breaks some ports.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.47 2013/09/22 14:31:24 dcoppa Exp $
d10 1
a10 1
REVISION=	2
@


1.49
log
@Add python3 support.

ok brad@@ (maintainer)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.48 2013/11/25 14:16:22 sthen Exp $
d10 1
a10 1
REVISION=	3
a31 1
		boost_python3 boost_python3-mt \
a59 2
BUILD_DEPENDS+=	lang/python/${MODPY_DEFAULT_VERSION_3}

a89 1
	echo "using python : ${MODPY_DEFAULT_VERSION_3} : ${LOCALBASE}/bin/python${MODPY_DEFAULT_VERSION_3} : ${LOCALBASE}/include/python${MODPY_DEFAULT_VERSION_3}m : ${LOCALBASE}/lib ;" >> ${WRKSRC}/tools/build/v2/user-config.jam
@


1.48
log
@kill VMEM_WARNING
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.47 2013/09/22 14:31:24 dcoppa Exp $
d10 1
a10 1
REVISION=	2
d32 1
d61 2
d93 1
@


1.47
log
@Add libboost_locale-mt to the boost build.

ok brad@@ (maintainer)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.46 2013/04/12 01:11:32 brad Exp $
a81 2

VMEM_WARNING=	Yes
@


1.46
log
@Let Boost know OpenBSD has certain POSIX features but Boost does
not enable the use of said features because the POSIX feature
groups are not enabled yet due to missing functions/features
within respective feature groups.

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.45 2013/03/26 20:15:10 brad Exp $
d10 1
a10 1
REVISION=	1
d22 1
d56 2
a57 1
MODULES=	lang/python
d62 2
a63 1
BJAM_CONFIG=	-sNO_BZIP2=1 \
@


1.45
log
@Sync boost-filesystem library with upstream and add OpenBSD to the UTF-8
codepath to fix a run-time issue for apps using boost-filesystem with apps
failing with.. "std::runtime_error: locale::facet::_S_create_c_locale name not valid"

Reported by/tested/Ok gonzalo@@ bentley@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.44 2013/03/11 10:50:01 espie Exp $
d10 1
a10 1
REVISION=	0
@


1.44
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.43 2013/03/08 01:21:37 brad Exp $
d10 1
@


1.43
log
@Update to boost 1.53.0.

Mostly from Amit Kulkarni.

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.42 2012/12/10 13:37:57 landry Exp $
a50 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM=	Yes
PERMIT_DISTFILES_FTP=	Yes
d83 1
a83 1
NO_REGRESS=	Yes
@


1.42
log
@Remove BROKEN-hppa marker, not needed anymore since gcc is now built
without -pie. At least boost builds fine without ICE. Tested on hppa.ports.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.41 2012/12/09 08:23:31 brad Exp $
d7 1
a7 1
VERSION=	1.42.0
a9 1
REVISION=	15
d12 1
d14 4
a17 2
SO_VERSION=	4.0
BOOST_LIBS=	boost_date_time boost_date_time-mt \
d27 1
a27 1
		boost_prg_exec_monitor-mt boost_prg_exec_monitor \
d30 1
d36 1
d66 2
a67 1
		variant=release link=static,shared threading=single,multi
d69 4
a72 2
BOOTSTRAP=	--without-icu \
		--with-python=${MODPY_BIN} \
d74 3
a76 1
		--with-python-version=${MODPY_VERSION}
d103 1
a103 1
	${INSTALL_PROGRAM} ${WRKSRC}/tools/jam/src/bin.*/bjam \
@


1.41
log
@Mostly cosmetic tweaking and sync distinfo.

ok ajacoutot@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.40 2012/10/15 20:31:59 robert Exp $
a3 1
BROKEN-hppa =	ICE on src/tr1/assoc_laguerre.cpp
@


1.40
log
@bring back a diff from boost svn to support code compilation
with libreoffice and boost

tested in a bulk by jasper and ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.39 2012/09/29 07:08:38 landry Exp $
d8 2
d12 2
a13 3

VERSION=	1.42.0
DISTNAME=	boost_${VERSION:S/./_/g}
d37 1
d42 1
a42 1
CATEGORIES=	devel
a45 3
HOMEPAGE=	http://www.boost.org/
VMEM_WARNING =	Yes

d52 4
a55 1
MASTER_SITES=	${MASTER_SITE_SOURCEFORGE:=boost/}
d63 1
a63 1
		variant=release link=static,shared threading=single,multi 
d65 4
a68 5
BOOTSTRAP_CONFIG=	--without-icu \
			--with-python=${MODPY_BIN} \
			--with-python-root=${LOCALBASE} \
			--with-python-version=${MODPY_VERSION} \
#			--without-libraries=test,thread,serialization,system,date_time,filesystem,graph,math,mpi,program_options,signals,wave
d70 2
d74 1
a74 1
NO_REGRESS=	Yes
d76 1
a76 1
WANTLIB=	c m pthread stdc++ util z
d78 1
a78 5
MODULES=	lang/python
MODPY_RUNDEP=	No

# python.port.mk makes assumptions about an empty CONFIGURE_STYLE
CONFIGURE_STYLE=none
a80 2
pre-configure:
	${SUBST_CMD} ${WRKSRC}/Jamroot
d83 1
d85 2
a86 4
		${SETENV} ${CONFIGURE_ENV} /bin/sh ./configure && \
		cp user.hpp ${WRKSRC}/boost/config

post-configure:
d88 1
a88 1
	/bin/sh ./bootstrap.sh ${BOOTSTRAP_CONFIG}
d92 1
a92 1
		./bjam ${BJAM_CONFIG}
d96 1
a96 2
		${PREFIX}/bin

a97 1

d99 1
a99 1
		find boost -type d -exec ${INSTALL_DATA_DIR} ${PREFIX}/include/{} \;
d101 1
a101 1
		find boost ! -name \*.orig -type f -exec ${INSTALL_DATA} {} ${PREFIX}/include/{} \;
@


1.39
log
@Mark as BROKEN-hppa, triggers an ICE in src/tr1/assoc_laguerre.cpp,
apparently related the switch to PIE and the fact that boost uses
precompiled .gch headers.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.38 2012/04/22 10:18:13 ajacoutot Exp $
d9 1
a9 1
REVISION=	14
@


1.38
log
@Mark the port as for use with gcc4 only and garbage collect a gcc3
workaround patch.

from Brad
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.37 2012/04/13 06:22:02 ajacoutot Exp $
d4 1
@


1.37
log
@Remove patch no longer necessary now that the compiler has been fixed.

from Brad (maintainer)
@
text
@d1 3
a3 1
# $OpenBSD: Makefile,v 1.36 2012/04/12 20:28:47 espie Exp $
d8 1
a8 1
REVISION=	13
@


1.36
log
@bigger than cmake or mysql
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.35 2012/01/06 07:39:55 ajacoutot Exp $
d6 1
a6 1
REVISION=	12
@


1.35
log
@Remove workaround after wchar.h header was fixed.

from Brad
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.34 2011/11/26 10:23:31 ajacoutot Exp $
d42 1
@


1.34
log
@Brad take maintainer.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2011/11/06 20:05:47 jasper Exp $
d6 1
a6 1
REVISION=	11
@


1.33
log
@- Remove OpenBSD long double workaround for Boost.Functional/Hash.
- Have Boost.Filesystem use statvfs().

from brad
ok aja@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2011/11/02 11:54:15 jasper Exp $
d6 1
a6 1
REVISION=	10
d38 2
@


1.32
log
@- Remove the now unnecessary patches now the that wide character
  support has been integrated
  - Move the endian setting bits within endian.hpp header up above
    Boost's own set of checks to try and guess the endianness of
      the architecture so that the OpenBSD endian header is actually
	used
	- Sync the Boost.Math patch for enabling the long double support
	  on OpenBSD/hppa with what was submitted upstream and commited.

tested by aja@@ and naddy@@
	  from brad
	  ok aja@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2011/09/19 19:53:20 naddy Exp $
d6 1
a6 1
REVISION=	9
@


1.31
log
@* Pass MAKE_JOBS to jam, which can do parallel building.
* Don't add -O2 to all builds.
* Remove workaround for (no longer) missing libm functions and bump
  library.

* Remove OpenBSD hack after the gcc3 thread model has been
  switched to posix.  This part ok kurt@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.30 2011/06/08 17:40:08 jasper Exp $
d6 1
a6 1
REVISION=	8
d11 1
a11 1
SO_VERSION=	3.0
@


1.30
log
@bump after default python version switch
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2011/05/05 17:08:27 jasper Exp $
d6 1
a6 1
REVISION=	7
d11 1
a11 1
SO_VERSION=	2.0
d53 1
@


1.29
log
@- build and install boost_unit_test_framework and friends,

ok aja@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2011/05/05 15:09:20 jasper Exp $
d6 1
a6 1
REVISION=	6
@


1.28
log
@- sort lib list
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2010/09/19 20:09:41 jasper Exp $
d6 1
a6 1
REVISION=	5
d22 1
d30 1
a59 1
			--without-libraries=test
@


1.27
log
@- OpenBSD does not have the definitions for the signals SI_ASYNCIO and
SI_MESGQ.

from markus hennecke
ok landry@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2010/08/30 22:03:58 jasper Exp $
d15 1
a21 1
		boost_iostreams boost_iostreams-mt \
a25 1
		boost_wserialization boost_wserialization-mt \
d29 2
a30 1
		boost_wave boost_wave-mt
@


1.26
log
@- first round of bumps for devel
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2010/08/25 20:27:16 sthen Exp $
d6 1
a6 1
REVISION=	4
@


1.25
log
@add missing wantlibs, new-style lib_depends/revision, bump
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.24 2010/05/26 12:25:23 espie Exp $
d6 1
a6 1
REVISION=	3
@


1.24
log
@build boost with gcc4 and newer libstdc++-v3.
(I'll revisit the math funcs later)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.23 2010/04/30 20:08:02 espie Exp $
d5 2
a6 1
PKGNAME=	boost-${VERSION}p2
d65 1
a65 1
WANTLIB=	z c pthread util
@


1.23
log
@fix warning. wesnoth should compile again
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2010/04/21 12:30:57 landry Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p1
@


1.22
log
@Add necessary magic to BJAM_CONFIG so that boost honours CFLAGS/CXXFLAGS.
Another funky-build-system bites the dust..
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2010/04/21 09:26:58 landry Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p0
@


1.21
log
@Update to boost 1.42, fixes regressions in gzip module introduced in
1.41. Tested without fallout in a bulk build by stephan@@, thanks!
Endianess fixes from kili@@, mark as NO_REGRESS as regression suite
changed a lot since old previous 1.34 version.
Remove deanna@@ from MAINTAINER has she agreed not having time for it atm.
This port doesn't honour CFLAGS but this will be dealt separately.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2010/04/08 11:33:35 landry Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}
d50 1
@


1.20
log
@Fix boost header so that -Werror configure scripts (wesnoth) doesn't
bomb. An update to 1.42 is needed anyway.
ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2010/03/30 11:00:15 robert Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p0
d7 1
a7 1
VERSION=	1.41.0
d10 1
a10 1
SO_VERSION=	1.1
a37 2
MAINTAINER=	Deanna Phillips <deanna@@openbsd.org>

a49 1
		-sEXPAT_INCLUDE=/usr/include -sEXPAT_LIBPATH=/usr/lib \
a51 1

d61 1
a61 1
REGRESS_TARGET=	check
d63 1
a63 1
WANTLIB=	z c expat pthread util
d70 4
@


1.19
log
@Udpate to 1.41.0; original diff from Markus Hennecke
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2009/07/27 00:34:24 kurt Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}
@


1.18
log
@- revert last commit since gcc3/libstdc++ changes were reverted.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2009/07/25 02:17:06 kurt Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p4
d7 1
a7 1
VERSION=	1.34.1
d10 1
a10 1
SO_VERSION=	1.0
d14 6
a20 1
		boost_prg_exec_monitor boost_prg_exec_monitor-mt \
d25 1
d27 1
a28 1
		boost_unit_test_framework boost_unit_test_framework-mt \
d49 15
a63 1
CONFIGURE_ENV=	BJAM_CONFIG="-sNO_BZIP2=1 -sSO_VERSION=${SO_VERSION}"
d67 1
a67 1
WANTLIB=	z c
d81 6
a86 5
	@@cd ${WRKSRC} && ${SETENV} ${CONFIGURE_ENV} /bin/sh ./configure \
	    --with-python=${MODPY_BIN} \
	    --with-python-root=${LOCALBASE} \
	    --with-python-version=${MODPY_VERSION} \
	    --without-icu
@


1.17
log
@- remove hacks to force boost to use threads now that libstdc++ thread
safety has been enabled in gcc3 & libstdc++
- correct detection of thread support in libstdcpp3.hpp
- correct multiple defined T_DIVIDE
- use threads for python.jam

NOTE: this update requires userland to be rebuild with the recent
gcc3/libstdc++ changes. See current.html for instructions.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2008/06/05 12:55:56 kurt Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p3
@


1.16
log
@fix atomic_count.hpp: libstdc++ is not built with thread support yet so
adjust atomic_count.hpp to only use libstdc++ when it has been built with
thread support and fall back to using the pthreads implementation.
diagnosed, tested and okay deanna@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2008/05/27 00:52:01 deanna Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p2
@


1.15
log
@Security - add fix from boost svn for CVE-2008-0171:

"regex/v4/perl_matcher_non_recursive.hpp in the Boost regex library
(aka Boost.Regex) in Boost 1.33 and 1.34 allows context-dependent
attackers to cause a denial of service (failed assertion and crash)
via an invalid regular expression."

ok naddy@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2008/04/10 20:06:52 deanna Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p1
@


1.14
log
@Don't pick up textproc/icu4c.  Problem reported by brad and RD Thrush,
thanks.

no pkg change
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2008/04/06 17:57:43 deanna Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p0
@


1.13
log
@- unbreak on amd64 by adding -fPIC to the link cmd

tested by sthen@@, brad@@, eric@@ and others, ok brad@@ sthen@@

- use /dev/urandom (from Brad)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2008/04/03 07:44:39 bernd Exp $
d64 2
a65 1
	    --with-python-version=${MODPY_VERSION}
@


1.12
log
@Update to boost-1.34.1.

Initial diff from Mikko Tolmunen. Thank you!
Some corrections from brad@@.

Tested by deanna@@, naddy@@, brad@@ and myself.

ok deanna@@, brad@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2008/01/06 00:01:15 deanna Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}
@


1.11
log
@Build libboost_python.  Ports using it will need to satisfy any python
run depends on their own.  Patch from landry@@, change requested by a
few.

And regen patches.

ok landry@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2007/12/18 20:46:03 deanna Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p2
d7 1
a7 1
VERSION=	1.33.1
d10 17
a26 23
SHARED_LIBS=	boost_date_time			0.0 \
		boost_date_time-mt		0.0 \
		boost_filesystem		0.0 \
		boost_filesystem-mt		0.0 \
		boost_iostreams			0.0 \
		boost_iostreams-mt		0.0 \
		boost_prg_exec_monitor		0.0 \
		boost_prg_exec_monitor-mt	0.0 \
		boost_program_options		0.0 \
		boost_program_options-mt	0.0 \
		boost_python			0.0 \
		boost_python-mt			0.0 \
		boost_regex			0.0 \
		boost_regex-mt			0.0 \
		boost_serialization		0.0 \
		boost_serialization-mt		0.0 \
		boost_signals			0.0 \
		boost_signals-mt		0.0 \
		boost_test_exec_monitor		0.0 \
		boost_test_exec_monitor-mt	0.0 \
		boost_thread-mt			0.0 \
		boost_unit_test_framework	0.0 \
		boost_unit_test_framework-mt	0.0
d43 1
d67 1
a67 1
	${INSTALL_PROGRAM} ${WRKSRC}/tools/build/jam_src/bin.*/bjam \
d75 1
a75 1
		find boost -type f -exec ${INSTALL_DATA} {} ${PREFIX}/include/{} \;
@


1.10
log
@Bring boost back into a single package.  Splitting it was my mistake.

Discussed with several people, "go ahead" steven@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2007/09/16 02:52:57 merdely Exp $
d5 1
a5 1
PKGNAME=	boost-${VERSION}p1
d20 2
d54 6
d67 3
a69 1
		--without-libraries=python
@


1.9
log
@Remove quotes surrounding COMMENT*/PERMIT_*/BROKEN
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2007/07/14 14:13:48 deanna Exp $
d3 1
a3 2
COMMENT-main=	free peer-reviewed portable C++ source libraries (headers)
COMMENT-libs=	free peer-reviewed portable C++ source libraries (libraries)
d5 1
a5 2
PKGNAME-main=	boost-headers-${VERSION}p3
PKGNAME-libs=	boost-libs-${VERSION}p3
d50 1
a50 4
MULTI_PACKAGES=	-main -libs

PKG_ARCH-main=	*
WANTLIB-libs=	z c
@


1.8
log
@Add a patch from Boost CVS for amd64 support in endian.hpp.  From
Jon Olsson <jon at vexed.se>.  Bump pkgnames and order plist.

"looks good" wilfried@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2007/01/07 22:20:20 deanna Exp $
d3 2
a4 2
COMMENT-main=	"free peer-reviewed portable C++ source libraries (headers)"
COMMENT-libs=	"free peer-reviewed portable C++ source libraries (libraries)"
@


1.7
log
@The soname needs to match the filename in order for the libs to be
usable.  Noticed by Tero Koskinen, thanks.

Simplify the install by using an undocumented jam rule.

Ok wilfried@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2006/12/28 10:46:20 deanna Exp $
d6 2
a7 2
PKGNAME-main=	boost-headers-${VERSION}p2
PKGNAME-libs=	boost-libs-${VERSION}p2
@


1.6
log
@Remove the alpha exception workaround, now that kettenis@@ has fixed the
problem.

Ok brad@@.
@
text
@d1 1
a1 1
# $OpenBSD$
d7 1
a7 1
PKGNAME-libs=	boost-libs-${VERSION}p1
d70 1
a70 8
	find ${WRKSRC}/bin/boost/libs -name "libboost*" -type f \
		-exec ${INSTALL_DATA} \{\} ${PREFIX}/lib \;

	cd ${PREFIX}/lib && \
		for LIBS in libboost*; do \
			mv $$LIBS \
			`echo $$LIBS | perl -pi -e "s,-gcc(-mt)?(-d)?-${VERSION:S/./_/g},\1\2,"`; \
		done
@


1.5
log
@Fix this on alpha by disabling the serialization lib.  This lib does
not honor BOOST_NO_EXCEPTIONS, and exception support is currently
broken on alpha.

ok espie@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2006/11/24 18:46:58 steven Exp $
d6 2
a7 2
PKGNAME-main=	boost-headers-${VERSION}p1
PKGNAME-libs=	boost-libs-${VERSION}p0
a47 10
# this lib does not support BOOST_NO_EXCEPTIONS
.if ${MACHINE_ARCH} == "alpha"
PKG_ARGS+=-Dserialization=0
CONFIGURE_ARGS=--without-libraries=serialization
.else
PKG_ARGS+=-Dserialization=1
.endif

CONFIGURE_ARGS+=--without-libraries=python

d54 1
d64 1
a64 1
		${CONFIGURE_ARGS}
@


1.4
log
@new MULTI_PACKAGES
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2006/11/13 21:52:52 wilfried Exp $
d6 2
a7 2
PKGNAME-main=	boost-headers-${VERSION}p0
PKGNAME-libs=	boost-libs-${VERSION}
d38 1
a38 1
MAINTAINER=	Deanna Phillips <deanna@@sdf.lonestar.org>
d48 10
a63 1
PKG_ARCH-main=	*
d73 1
a73 1
		--without-libraries=python
@


1.3
log
@split into two subpackages, headers and libs, from maintainer
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2006/11/07 10:55:43 espie Exp $
d3 1
a3 1
COMMENT=	"free peer-reviewed portable C++ source libraries (headers)"
d6 1
a6 1
FULLPKGNAME=	boost-headers-${VERSION}
d52 1
a52 2
MULTI_PACKAGES=-libs
SUBPACKAGE?=
d54 2
a55 5
.if defined(PACKAGING) && empty(SUBPACKAGE)
PKG_ARCH=	*
.else
WANTLIB=	z c
.endif
@


1.2
log
@zap SCRIPTS_ENV, make sure include files belong to data owner, zap old
SH variable.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2006/11/05 19:20:41 wilfried Exp $
d3 5
a7 1
COMMENT=	"free peer-reviewed portable C++ source libraries"
a10 1
PKGNAME=	boost-${VERSION}p0
a45 2
WANTLIB=	z

d52 9
d64 1
a64 1
        	cp user.hpp ${WRKSRC}/boost/config
d66 1
d83 4
a86 3
	cd ${WRKSRC} && \
		cp -pR boost ${PREFIX}/include
	chown -R ${SHAREOWN}:${SHAREGRP} ${PREFIX}/include
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.template,v 1.49 2006/10/21 12:59:35 espie Exp $
d7 1
a7 1
PKGNAME=	boost-${VERSION}
d53 1
a53 1
		${SETENV} ${SCRIPTS_ENV} ${SH} ./configure && \
d56 1
a56 1
	@@cd ${WRKSRC} && ${SETENV} ${SCRIPTS_ENV} ${SH} ./configure \
d74 1
@


1.1.1.1
log
@Import boost 1.33.1

Free peer-reviewed portable C++ source libraries

From Deanna Phillips <deanna@@sdf.lonestar.org>
with work from me, robert@@ and kurt@@
@
text
@@
