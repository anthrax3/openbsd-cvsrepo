head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.09.29.23.36.03;	author sthen;	state Exp;
branches;
next	1.1;
commitid	MBQDSXeiUuPwB5ou;

1.1
date	2017.09.25.09.16.12;	author robert;	state Exp;
branches;
next	;
commitid	xOeDnABBxynvFYIF;


desc
@@


1.2
log
@fix a broken patch. I think this is actually a noop, the "function definition
is not allowed here" doesn't get triggered when running (this was an earlier
found port from the initial grep over unpacked ports source rather than from
the build-time check) and the relevant file doesn't get installed. however
it confused me a lot when I was trying to port over this patch to another
port which borrowed this and *does* use it.
@
text
@$OpenBSD: patch-acinclude_m4,v 1.1 2017/09/25 09:16:12 robert Exp $

Index: acinclude.m4
--- acinclude.m4.orig
+++ acinclude.m4
@@@@ -284,8 +284,7 @@@@ AC_DEFUN([LSH_GCC_ATTRIBUTES],
 	       lsh_cv_c_attribute,
 [ AC_TRY_COMPILE([
 #include <stdlib.h>
-],
-[
+
 static void foo(void) __attribute__ ((noreturn));
 
 static void __attribute__ ((noreturn))
@@@@ -294,6 +293,7 @@@@ foo(void)
   exit(1);
 }
 ],
+[],
 lsh_cv_c_attribute=yes,
 lsh_cv_c_attribute=no)])
 
@


1.1
log
@Unbreak autoconf checks with clang by not using nested functions
in the checks.

Someone clearly did not read the autoconf documentation because
using the following functions with a function declaration inside
the body will end up declaring a function inside a function.

- AC_TRY_COMPILE( [], [ int main() { return 0; } ],
- AC_LANG_PROGRAM([[]], [[int main (void) { return 0; }]])],
- AC_TRY_LINK([], [int main (void) { return 0; }],

Result:

int
main ()
{
int main (void) { return 0; }
  ;
  return 0;
}

nested functions is a gcc extension which is not supported by
clang.

test.c:4:17: error: function definition is not allowed here
int main (void) { return 0; }
                ^
1 error generated.

This causes tests to fail in the configure scripts resulting in
missing compile and link time flags from the builds.

This resulted in weird behaviour of several software, like gnome
hanging completely due to gtk+3 not being built properly.

This change intrudces the following fixes:

- remove int main() declaration from AC_TRY_COMPILE, AC_LANG_PROGRAM, AC_TRY_LINK
  as it comes with a declaration already, and people misused them

- change to use AC_LANG_SOURCE when needed in case a complete source block is specified

Most of the changes are in configure.(ac|in), however there were some cases
where autoconf is either broken or the build failed because of an autoconf
generated configure script. Everytihng else is switched to autoconf, so
the maintainers can go ahead and upstream these diffs.

There are more to come, we are continously checking the tree for these issues
and in the future the infrastructure will error if such a case is found.
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
a6 3
@@@@ -282,10 +282,8 @@@@ dnl Check for gcc's __attribute__ construction
 AC_DEFUN([LSH_GCC_ATTRIBUTES],
 [AC_CACHE_CHECK(for __attribute__,
d8 1
a8 2
-[ AC_TRY_COMPILE([
+[ AC_LANG_SOURCE([[
d12 1
d16 1
a16 2
@@@@ -293,9 +291,9 @@@@ foo(void)
 {
d19 2
a20 2
-],
+]]),
d22 1
a22 2
-lsh_cv_c_attribute=no)])
+lsh_cv_c_attribute=no])
a23 2
 AH_TEMPLATE([HAVE_GCC_ATTRIBUTE], [Define if the compiler understands __attribute__])
 if test "x$lsh_cv_c_attribute" = "xyes"; then
@

