head	1.2;
access;
symbols
	ajacoutot_20070930:1.1.1.1 ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.01.13.21.37.27;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2007.09.30.09.37.53;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.09.30.09.37.53;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to libopensync-0.35
@
text
@$OpenBSD: patch-build_osync_support_py,v 1.1 2007/09/30 09:37:53 ajacoutot Exp $
--- build/osync_support.py.orig	Thu Jun 21 14:38:39 2007
+++ build/osync_support.py	Sat Sep 29 15:44:10 2007
@@@@ -16,46 +16,9 @@@@ def CheckPKG(context, name):
 
 def SelectBuildDir(build_dir, platform=None):
 
-	# if no platform is specified, then default to sys.platform
-	if not(platform):
-		platform = sys.platform
-
-	print "Looking for build directory for platform '%s'" % platform
-
-	# setup where we start looking at first
-	test_dir = build_dir + os.sep + platform
 	default_dir = build_dir + os.sep + 'linux'
+	target_dir = default_dir
 
-
-	# we look for a directory named exactly after the
-	# platform so that very specific builds can be done
-	if os.path.exists(test_dir):
-		# make sure it is a directory
-		target_dir = test_dir
-	else:
-		print "Exact match not found, finding closest guess"
-
-		# looks like there isn't an exact match
-		# find the closest matching directory
-		dirs = os.listdir(build_dir)
-		found_match = 0
-		for dir in dirs:
-			if platform.find(dir) != -1:
-				# found a match (hopefully the right one)
-				target_dir = build_dir + os.sep + dir
-				found_match = 1
-				break
-		if not(found_match):
-			print "No match found, looking for 'default' directory"
-			# looks like this platform isn't available
-			# try the default target
-			if os.path.exists(default_dir):
-				target_dir = default_dir
-			else:
-				# bad, nothing is available, tell the user
-				print "No build directories found for your platform '%s'" % platform
-			return None
-
 	print "Found directory %s, will build there" % target_dir
 	return target_dir
 
@@@@ -287,12 +250,9 @@@@ def install_shlib(env, destination, lib): 
 	shlib_install_post_action = None 
 
 	if platform == 'posix': 
-		shlib_post_action = [ 'rm -f $TARGET', 
-					'ln -s ${SOURCE.file} $TARGET' ] 
 		shlib_post_action_output_re = [ 
 			'%s\\.[0-9\\.]*$' % re.escape(shlib_suffix), 
 			shlib_suffix ] 
-		shlib_install_post_action = shlib_post_action 
 		shlib_install_post_action_output_re = shlib_post_action_output_re 
 
 	ilib = env.Install(destination,lib) 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import libopensync-0.31

OpenSync is a synchronization framework that is platform and
distribution independent. It consists of a powerful sync-engine and
several plugins that can be used to connect to devices.
OpenSync is very flexible and capable of synchronizing any type of data,
including contacts, calendar, tasks, notes and files.


Note that it is still a development version. But it's better to have
this in-tree now so that one can port the different sync plugins as they
come out. Also it will ease integration with other apps (i.e kdepim).

"as long as it doesn't break kdepim" espie@@
@
text
@@
