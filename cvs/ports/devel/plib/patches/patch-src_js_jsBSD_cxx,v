head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.32
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.30
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.26
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.28
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.24
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.22
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.20
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.18
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.16
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.14
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.12
	OPENBSD_5_0:1.1.0.10
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.6
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2009.06.12.20.48.37;	author phessler;	state Exp;
branches;
next	;


desc
@@


1.1
log
@unbreak for !i386

js.h wants to include machine/joystick.h for analog joystick support.
other platforms don't have such support, so hide it with an arch define.
this allows us to use the "portable game librarys" on more than one arch.

OK MANTAINER
@
text
@--- src/js/jsBSD.cxx.orig	Tue Mar 11 03:06:21 2008
+++ src/js/jsBSD.cxx	Thu Mar 12 21:33:03 2009
@@@@ -50,8 +50,10 @@@@
 #if defined(__FreeBSD__)
 # include <sys/joystick.h>
 #else
+#if defined(__i386__)
 # include <machine/joystick.h>		// For analog joysticks
 #endif
+#endif
 #ifdef HAVE_USB_JS
 #if defined(__NetBSD__)
 #ifdef HAVE_USBHID_H
@@@@ -85,7 +87,9 @@@@ struct os_specific_s {
   int              fd;
   int              is_analog;
   // The following structure members are specific to analog joysticks
+#if defined(__i386__)
   struct joystick  ajs;
+#endif
 #ifdef HAVE_USB_JS
   // The following structure members are specific to USB joysticks
   struct hid_item *hids;
@@@@ -437,7 +441,7 @@@@ void jsJoystick::rawRead ( int *buttons, float *axes )
 
     return ;
   }
-
+#if defined(__i386__)
   if ( os->is_analog )
   {
     int status = ::read ( os->fd, &os->ajs, sizeof(os->ajs) );
@@@@ -462,6 +466,7 @@@@ void jsJoystick::rawRead ( int *buttons, float *axes )
 
     return;
   }
+#endif
 
 #ifdef HAVE_USB_JS
   while ((len = ::read(os->fd, os->hid_data_buf, os->hid_dlen)) == os->hid_dlen)
@
