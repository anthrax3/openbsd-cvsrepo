head	1.3;
access;
symbols
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.14
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.12
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.10
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	ajacoutot_20100323:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.05.07.20.48.29;	author espie;	state Exp;
branches;
next	1.2;
commitid	kt2FYx97Sw6sr0hM;

1.2
date	2014.04.25.11.17.27;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2010.03.23.21.10.17;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.23.21.10.17;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.3
log
@make it build with clang, mostly misses unistd.h everywhere
@
text
@$OpenBSD$
--- src/ptlib/unix/svcproc.cxx.orig	Fri Apr 28 01:32:32 2017
+++ src/ptlib/unix/svcproc.cxx	Fri Apr 28 01:41:06 2017
@@@@ -66,6 +66,7 @@@@
 #include <sys/resource.h>
 #endif
 
+#include <unistd.h>
 
 // Doesn't everybody have this?
 #ifndef _PATH_VARRUN
@@@@ -279,7 +280,8 @@@@ int PServiceProcess::InitialiseService()
     pid_t pid;
 
     {
-      ifstream pidfile(pidfilename);
+      const char *tmp = pidfilename;
+      ifstream pidfile(tmp);
       if (!pidfile.is_open()) {
         cout << "Could not open pid file: \"" << pidfilename << "\""
                 " - " << strerror(errno) << endl;
@@@@ -422,7 +424,8 @@@@ int PServiceProcess::InitialiseService()
   // Run as a daemon, ie fork
 
   if (!pidfilename) {
-    ifstream pidfile(pidfilename);
+    const char *tmp = pidfilename;
+    ifstream pidfile(tmp);
     if (pidfile.is_open()) {
       pid_t pid;
       pidfile >> pid;
@@@@ -450,7 +453,8 @@@@ int PServiceProcess::InitialiseService()
       cout << "Daemon started with pid " << pid << endl;
       if (!pidfilename) {
         // Write out the child pid to magic file in /var/run (at least for linux)
-        ofstream pidfile(pidfilename);
+	const char *tmp = pidfilename;
+        ofstream pidfile(tmp);
         if (pidfile.is_open())
           pidfile << pid;
         else
@


1.2
log
@Update to ptlib-2.12.9.
Drop support for v4l2, our implementation is seriously lacking behind.
@
text
@d1 4
a4 4
$OpenBSD: patch-src_ptlib_unix_svcproc_cxx,v 1.1 2010/03/23 21:10:17 ajacoutot Exp $
--- src/ptlib/unix/svcproc.cxx.orig	Thu Jun  4 05:56:25 2009
+++ src/ptlib/unix/svcproc.cxx	Thu Jun  4 05:57:23 2009
@@@@ -66,6 +66,10 @@@@
d8 1
a8 5
+#ifdef P_OPENBSD
+#include <sys/stdint.h>
+#endif
+
 #define new PNEW
d10 32
a41 1
 extern void PXSignalHandler(int);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import ptlib-2.6.5

PTLib is a moderately large C++ class library that originated many years
ago as a method to produce applications that run on both Microsoft
Windows and Unix X-Windows systems. It also was to have a Macintosh port
as well, but this never eventuated. In those days it was called the
PWLib the Portable Windows Library.

Since then, the availability of multi-platform GUI toolkits such as KDE
and wxWindows, and the development of the OpenH323 and OPAL projects as
primary user of the library, has emphasised the focus on networking, I/O
portability, multi-threading and protocol portability. Mostly, the
library is used to create high performance and highly portable
network-centric applications. So all the GUI abstractions ahave been
dropped and it was renamed the Portable Tools Library that you see
today.
@
text
@@
