head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.10
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	ajacoutot_20100323:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.04.25.11.17.27;	author ajacoutot;	state dead;
branches;
next	1.2;

1.2
date	2011.10.26.16.59.09;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.23.21.10.17;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.23.21.10.17;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to ptlib-2.12.9.
Drop support for v4l2, our implementation is seriously lacking behind.
@
text
@$OpenBSD: patch-src_ptlib_unix_socket_cxx,v 1.2 2011/10/26 16:59:09 ajacoutot Exp $
--- src/ptlib/unix/socket.cxx.orig	Fri Oct 14 08:54:51 2011
+++ src/ptlib/unix/socket.cxx	Sat Oct 22 12:41:24 2011
@@@@ -69,7 +69,7 @@@@
 #include <netinet/if_ether.h>
 #endif
 
-#if defined(P_NETBSD)
+#if defined(P_NETBSD) || defined(P_OPENBSD)
 #include <ifaddrs.h>
 #endif
 
@@@@ -484,9 +484,11 @@@@ PBoolean PIPSocket::IsLocalHost(const PString & hostna
   PUDPSocket sock;
   
   PBYTEArray buffer;
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
   struct ifconf ifConf;
+#endif
 
-#if defined(P_NETBSD)
+#if defined(P_NETBSD) || defined(P_OPENBSD)
   struct ifaddrs *ifap, *ifa;
 
   PAssert(getifaddrs(&ifap) == 0, "getifaddrs failed");
@@@@ -509,7 +511,7 @@@@ PBoolean PIPSocket::IsLocalHost(const PString & hostna
     while (ifName < ifEndList) {
 #endif
       struct ifreq ifReq;
-#if !defined(P_NETBSD)
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
       memcpy(&ifReq, ifName, sizeof(ifreq));
 #else
       memset(&ifReq, 0, sizeof(ifReq));
@@@@ -526,14 +528,14 @@@@ PBoolean PIPSocket::IsLocalHost(const PString & hostna
         }
       }
       
-#if defined(P_FREEBSD) || defined(P_OPENBSD) || defined(P_MACOSX) || defined(P_VXWORKS) || defined(P_RTEMS) || defined(P_QNX)
+#if defined(P_FREEBSD) || defined(P_MACOSX) || defined(P_VXWORKS) || defined(P_RTEMS) || defined(P_QNX)
       // move the ifName pointer along to the next ifreq entry
       ifName = (struct ifreq *)((char *)ifName + _SIZEOF_ADDR_IFREQ(*ifName));
-#elif !defined(P_NETBSD)
+#elif !defined(P_NETBSD) && !defined(P_OPENBSD)
       ifName++;
 #endif
     }
-#if !defined(P_NETBSD)
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
   }
 #endif
   
@@@@ -1875,9 +1877,11 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
   PUDPSocket sock;
 
   PBYTEArray buffer;
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
   struct ifconf ifConf;
+#endif
   
-#if defined(P_NETBSD)
+#if defined(P_NETBSD) || defined(P_OPENBSD)
   struct ifaddrs *ifap, *ifa;
 
   PAssert(getifaddrs(&ifap) == 0, "getifaddrs failed");
@@@@ -1901,7 +1905,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
     while (ifName < ifEndList) {
 #endif
       struct ifreq ifReq;
-#if !defined(P_NETBSD)
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
           memcpy(&ifReq, ifName, sizeof(ifreq));
 #else
           memset(&ifReq, 0, sizeof(ifReq));
@@@@ -1920,7 +1924,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
             macAddr = PEthSocket::Address((BYTE *)ifReq.ifr_macaddr);
 #endif
 
-#if !defined(P_NETBSD)
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
           memcpy(&ifReq, ifName, sizeof(ifreq));
 #else
           memset(&ifReq, 0, sizeof(ifReq));
@@@@ -1932,7 +1936,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
             sockaddr_in * sin = (sockaddr_in *)&ifReq.ifr_addr;
             PIPSocket::Address addr = sin->sin_addr;
 
-#if !defined(P_NETBSD)
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
             memcpy(&ifReq, ifName, sizeof(ifreq));
 #else
             memset(&ifReq, 0, sizeof(ifReq));
@@@@ -1966,15 +1970,15 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
         }
       }
 
-#if defined(P_FREEBSD) || defined(P_OPENBSD) || defined(P_MACOSX) || defined(P_VXWORKS) || defined(P_RTEMS) || defined(P_QNX)
+#if defined(P_FREEBSD) || defined(P_MACOSX) || defined(P_VXWORKS) || defined(P_RTEMS) || defined(P_QNX)
       // move the ifName pointer along to the next ifreq entry
       ifName = (struct ifreq *)((char *)ifName + _SIZEOF_ADDR_IFREQ(*ifName));
-#elif !defined(P_NETBSD)
+#elif !defined(P_NETBSD) && !defined(P_OPENBSD)
       ifName++;
 #endif
 
     }
-#if !defined(P_NETBSD)
+#if !defined(P_NETBSD) && !defined(P_OPENBSD)
   }
 #endif
 
@


1.2
log
@Major update to ptlib-2.10.3.

Some clue from espie@@

Needed to work on an Ekiga update.
There are still some rought edges but they'll be worked in-tree.

This and the upcoming VoIP ports commits wouldn't have been possible
without Miod's soft couch ;-)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_ptlib_unix_socket_cxx,v 1.1.1.1 2010/03/23 21:10:17 ajacoutot Exp $
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- src/ptlib/unix/socket.cxx.orig	Wed Jan 27 10:34:44 2010
+++ src/ptlib/unix/socket.cxx	Wed Jan 27 10:38:07 2010
@@@@ -67,7 +67,7 @@@@
d13 3
a15 1
@@@@ -475,7 +475,7 @@@@ PBoolean PIPSocket::IsLocalHost(const PString & hostna
d17 1
d19 1
d26 1
a26 1
@@@@ -498,7 +498,7 @@@@ PBoolean PIPSocket::IsLocalHost(const PString & hostna
d35 1
a35 1
@@@@ -515,14 +515,14 @@@@ PBoolean PIPSocket::IsLocalHost(const PString & hostna
d53 3
a55 1
@@@@ -1592,7 +1592,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
d57 1
d59 1
d66 1
a66 1
@@@@ -1616,7 +1616,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
d72 1
a72 1
       memcpy(&ifReq, ifName, sizeof(ifreq));
d74 3
a76 3
       memset(&ifReq, 0, sizeof(ifReq));
@@@@ -1637,7 +1637,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
           }
d84 1
a84 1
@@@@ -1649,7 +1649,7 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
d93 1
a93 1
@@@@ -1693,15 +1693,15 @@@@ PBoolean PIPSocket::GetInterfaceTable(InterfaceTable &
d111 1
a111 1
   return PTrue;
@


1.1.1.1
log
@Import ptlib-2.6.5

PTLib is a moderately large C++ class library that originated many years
ago as a method to produce applications that run on both Microsoft
Windows and Unix X-Windows systems. It also was to have a Macintosh port
as well, but this never eventuated. In those days it was called the
PWLib the Portable Windows Library.

Since then, the availability of multi-platform GUI toolkits such as KDE
and wxWindows, and the development of the OpenH323 and OPAL projects as
primary user of the library, has emphasised the focus on networking, I/O
portability, multi-threading and protocol portability. Mostly, the
library is used to create high performance and highly portable
network-centric applications. So all the GUI abstractions ahave been
dropped and it was renamed the Portable Tools Library that you see
today.
@
text
@@
