head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	afresh1_20140404:1.1.1.1
	afresh1:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.04.05.07.53.03;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.05.05.39.22;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.04.05.05.39.22;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@tweak long DESCR
@
text
@Role composition can be thought of as much more clever and meaningful
multiple inheritance. The basics of this implementation of roles is:
- If a method is already defined on a class, that method will not be
  composed in from the role.
- If a method that the role "requires" to be implemented is not
  implemented, role application will fail loudly.
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
composed in from the role.
d6 1
a6 7
implemented, role application will fail loudly.

Unlike Class::C3, where the last class inherited from "wins," role
composition is the other way around, where first wins. In a more
complete system (see Moose) roles are checked to see if they clash. The
goal of this is to be much simpler, hence disallowing composition of
multiple roles at once.
@


1.1.1.1
log
@Import p5-Role-Tiny-1.003003

From new maintainer Sergey Bronniko
@
text
@@
