head	1.3;
access;
symbols
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	dons_2004-May-08:1.1.1.1
	dons:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2005.03.25.05.53.21;	author dons;	state dead;
branches;
next	1.2;

1.2
date	2004.05.09.07.46.12;	author dons;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.08.07.21.03;	author dons;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.08.07.21.03;	author dons;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update devel/c2hs. All our patches have gone upstream :)
@
text
@$OpenBSD: patch-c2hs_c2hs_conf_in,v 1.2 2004/05/09 07:46:12 dons Exp $

Better package.conf.in. add haskell98 6.2.1ism

--- c2hs/c2hs.conf.in.orig	2002-02-13 15:49:06.000000000 +1100
+++ c2hs/c2hs.conf.in	2004-05-09 15:20:56.000000000 +1000
@@@@ -1,4 +1,3 @@@@
-[
 Package {
   name = "c2hs",
   import_dirs = ["@@LIBDIR@@/c2hs-@@C2HS_VERSION@@/@@SYS@@/import"],
@@@@ -8,9 +7,8 @@@@ Package {
   extra_libraries = [],
   include_dirs = [],
   c_includes = [],
-  package_deps = ["lang"],
+  package_deps = ["lang","haskell98"],
   extra_ghc_opts = ["-fglasgow-exts"],
   extra_cc_opts = [],
   extra_ld_opts = []
 }
-]
@


1.2
log
@. Have c2hs-config return the right -package flags
. Keep the version number in lib/c2hs-${V}
. Add haskell package "lang" as a dependency

ok pvalchev@@
@
text
@d1 1
a1 1
$OpenBSD: patch-c2hs_c2hs_conf_in,v 1.1.1.1 2004/05/08 07:21:03 dons Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
Better package.conf.in. lang => haskell98
d6 2
a7 2
+++ c2hs/c2hs.conf.in	2004-05-08 14:17:22.000000000 +1000
@@@@ -1,16 +1,14 @@@@
d11 2
a12 6
-  import_dirs = ["@@LIBDIR@@/c2hs-@@C2HS_VERSION@@/@@SYS@@/import"],
+  import_dirs = ["${PREFIX}/lib/c2hs/imports"],
   source_dirs = [],
-  library_dirs = ["@@LIBDIR@@/c2hs-@@C2HS_VERSION@@/@@SYS@@"],
+  library_dirs = ["${PREFIX}/lib/c2hs"],
   hs_libraries = ["c2hs"],
d17 1
a17 1
+  package_deps = ["haskell98"],
@


1.1.1.1
log
@Import C->Haskell (c2hs)

C->Haskell is an interface generator that simplifies the development
of Haskell bindings to C libraries.  The tool processes existing C
header files that determine data layout and function signatures on the
C side, in conjunction with Haskell modules that specify Haskell-side
type signatures and marshaling details. Hooks embedded in the Haskell
code signal access to C structures and functions; they are expanded by
the interfacing tool in conjunction with information in the
corresponding C header file. 

ok pvalchev@@
@
text
@@
