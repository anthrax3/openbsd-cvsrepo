head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.24
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.22
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.20
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.18
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.16
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.14
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.12
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.10
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.8
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	sturm_2003-Apr-17:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.05.22.20.35.17;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.17.10.59.48;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.04.17.10.59.48;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@ANSI __FUNCTION__
@
text
@$OpenBSD: patch-io_c,v 1.1.1.1 2003/04/17 10:59:48 sturm Exp $
--- io.c.orig	Wed Mar 27 05:41:07 2002
+++ io.c	Sat May 22 22:33:59 2010
@@@@ -102,7 +102,7 @@@@ io_detach_child(struct io_header *hparent, struct io_l
 	}
 
 	if (lparent == NULL)
-		errx(1, __FUNCTION__": data corrupt");
+		errx(1, "%s: data corrupt", __FUNCTION__);
 
 	TAILQ_REMOVE(&hchild->ihdr_parent, lparent, il_next);
 	free(lparent);
@@@@ -121,7 +121,7 @@@@ io_detach_parent(struct io_list *lparent, struct io_he
 	}
 
 	if (lchild == NULL)
-		errx(1, __FUNCTION__": data corrupt");
+		errx(1, "%s: data corrupt", __FUNCTION__);
 
 	TAILQ_REMOVE(&hparent->ihdr_queue, lchild, il_next);
 	free(lchild);
@@@@ -142,7 +142,7 @@@@ io_detach_hdr(struct io_header *parent, struct io_head
 	}
 
 	if (lchild == NULL)
-		errx(1, __FUNCTION__": data corrupt");
+		errx(1, "%s: data corrupt", __FUNCTION__);
 	TAILQ_REMOVE(&parent->ihdr_queue, lchild, il_next);
 	free(lchild);
 
@@@@ -152,7 +152,7 @@@@ io_detach_hdr(struct io_header *parent, struct io_head
 	}
 
 	if (lparent == NULL)
-		errx(1, __FUNCTION__": data corrupt");
+		errx(1, "%s: data corrupt", __FUNCTION__);
 	TAILQ_REMOVE(&child->ihdr_parent, lparent, il_next);
 	free(lparent);
 }
@@@@ -311,7 +311,7 @@@@ io_buffer_extend(struct io_buffer *buf, size_t size)
 
 	p = realloc(buf->data, buf->off + size);
 	if (p == NULL) {
-		warn(__FUNCTION__": realloc");
+		warn("%s: realloc", __FUNCTION__);
 		return (-1);
 	}
 
@@@@ -424,7 +424,7 @@@@ io_buffer_write(struct io_obj *obj, struct io_buffer *
 
 	filt = (struct io_filter *)obj;
 	if (obj->io_type != IOTYPE_FILTER || filt->io_filter == NULL)
-		errx(1, __FUNCTION__": data corrupt: %p\n", obj);
+		errx(1, "%s: data corrupt: %p\n", __FUNCTION__, obj);
 
 	res = filt->io_filter(filt->io_state, filt, buf, 0);
 	switch (res) {
@@@@ -704,12 +704,12 @@@@ io_header_init(struct io_header *hdr, int type)
 
 struct io_obj *
 io_new_obj(int fd, int type,
-	   int (*method)(int, void *, size_t), size_t blocksize)
+	   ssize_t (*method)(int, void *, size_t), size_t blocksize)
 {
 	struct io_obj *obj;
 
 	if (type != IOTYPE_SOURCE && type != IOTYPE_SINK) {
-		warnx(__FUNCTION__": bad type: %d", type);
+		warnx("%s: bad type: %d", type, __FUNCTION__);
 		return (NULL);
 	}
 
@@@@ -759,8 +759,8 @@@@ io_duplex_halffree(struct io_duplex *dplx, struct io_o
  */
 
 struct io_duplex *
-io_new_duplex(int fd, int (*mthd_read)(int, void *, size_t),
-	   int (*mthd_write)(int, const void *, size_t), size_t blocksize)
+io_new_duplex(int fd, ssize_t (*mthd_read)(int, void *, size_t),
+	   ssize_t (*mthd_write)(int, const void *, size_t), size_t blocksize)
 {
 	struct io_duplex *dplx;
 
@


1.1
log
@Initial revision
@
text
@d1 58
a58 4
$OpenBSD$
--- io.c.orig	Tue Mar 26 22:41:07 2002
+++ io.c	Mon Mar 10 18:48:50 2003
@@@@ -704,7 +704,7 @@@@ io_header_init(struct io_header *hdr, in
d67 7
a73 1
@@@@ -759,8 +759,8 @@@@ io_duplex_halffree(struct io_duplex *dpl
@


1.1.1.1
log
@Initial import of libio 0.1

libio provides an abstraction for general data transport. It creates
data sources and data sinks. The sources and sinks can be connected with
multiple filters. As a result encryption and authentication can happen
completely transparent to the main core of an application. Mutliplex
nodes can be used to deal with N-fan in and M-fan out.

WWW: http://monkey.org/~provos/libio/

from Jolan Luff <jolan@@cryptonomicon.org>
@
text
@@
