head	1.3;
access;
symbols
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	naddy_20021017:1.1.1.1
	naddy:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2008.10.28.14.33.59;	author steven;	state dead;
branches;
next	1.2;

1.2
date	2003.12.15.21.42.23;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.17.00.26.52;	author naddy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.17.00.26.52;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove snit; newer snit is included with devel/tcllib

pointed out by Stuart Cassoff
@
text
@Snit is pure-Tcl object and megawidget framework written entirely in
Tcl. Unlike most Tcl object systems, it isn't based on object
inheritance; relying on inheritance only ties you down to the object
system you've chosen.  Instead, Snit is all about delegation: an object
type can define its own methods and options, but it can easily delegate
methods and options to other kinds of object.
@


1.2
log
@remove WWW lines
@
text
@@


1.1
log
@Initial revision
@
text
@a6 2

WWW: ${HOMEPAGE}
@


1.1.1.1
log
@Import snit 0.6; submitted by Jose Nazario <jose@@crimelabs.net>.

Snit is a pure-Tcl object and megawidget framework written entirely
in Tcl.
@
text
@@
