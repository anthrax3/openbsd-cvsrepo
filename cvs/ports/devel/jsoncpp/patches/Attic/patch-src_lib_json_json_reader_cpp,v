head	1.4;
access;
symbols
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.06.29.10.10.48;	author dcoppa;	state dead;
branches;
next	1.3;
commitid	q31BdFO5S9A6MVRv;

1.3
date	2016.06.03.13.25.26;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	cmlVEYqCwkbceUVS;

1.2
date	2016.03.24.13.21.45;	author dcoppa;	state dead;
branches;
next	1.1;
commitid	Cwf714T7EFDOnB0j;

1.1
date	2016.01.20.09.37.13;	author dcoppa;	state Exp;
branches;
next	;
commitid	ey0Ro6PskHGbhmUS;


desc
@@


1.4
log
@
Update to jsoncpp-1.7.3
@
text
@$OpenBSD: patch-src_lib_json_json_reader_cpp,v 1.3 2016/06/03 13:25:26 dcoppa Exp $

Fix int->char conversions
(upstream git commit ea4af183171bcc1d775af301d9e8bd8db9405cc7)

--- src/lib_json/json_reader.cpp.orig	Fri Mar 25 21:09:15 2016
+++ src/lib_json/json_reader.cpp	Fri Jun  3 15:11:48 2016
@@@@ -430,25 +430,25 @@@@ void Reader::readNumber() {
   char c = '0'; // stopgap for already consumed character
   // integral part
   while (c >= '0' && c <= '9')
-    c = (current_ = p) < end_ ? *p++ : 0;
+    c = (current_ = p) < end_ ? *p++ : '\0';
   // fractional part
   if (c == '.') {
-    c = (current_ = p) < end_ ? *p++ : 0;
+    c = (current_ = p) < end_ ? *p++ : '\0';
     while (c >= '0' && c <= '9')
-      c = (current_ = p) < end_ ? *p++ : 0;
+      c = (current_ = p) < end_ ? *p++ : '\0';
   }
   // exponential part
   if (c == 'e' || c == 'E') {
-    c = (current_ = p) < end_ ? *p++ : 0;
+    c = (current_ = p) < end_ ? *p++ : '\0';
     if (c == '+' || c == '-')
-      c = (current_ = p) < end_ ? *p++ : 0;
+      c = (current_ = p) < end_ ? *p++ : '\0';
     while (c >= '0' && c <= '9')
-      c = (current_ = p) < end_ ? *p++ : 0;
+      c = (current_ = p) < end_ ? *p++ : '\0';
   }
 }
 
 bool Reader::readString() {
-  Char c = 0;
+  Char c = '\0';
   while (current_ != end_) {
     c = getNextChar();
     if (c == '\\')
@@@@ -1394,20 +1394,20 @@@@ bool OurReader::readNumber(bool checkInf) {
   char c = '0'; // stopgap for already consumed character
   // integral part
   while (c >= '0' && c <= '9')
-    c = (current_ = p) < end_ ? *p++ : 0;
+    c = (current_ = p) < end_ ? *p++ : '\0';
   // fractional part
   if (c == '.') {
-    c = (current_ = p) < end_ ? *p++ : 0;
+    c = (current_ = p) < end_ ? *p++ : '\0';
     while (c >= '0' && c <= '9')
-      c = (current_ = p) < end_ ? *p++ : 0;
+      c = (current_ = p) < end_ ? *p++ : '\0';
   }
   // exponential part
   if (c == 'e' || c == 'E') {
-    c = (current_ = p) < end_ ? *p++ : 0;
+    c = (current_ = p) < end_ ? *p++ : '\0';
     if (c == '+' || c == '-')
-      c = (current_ = p) < end_ ? *p++ : 0;
+      c = (current_ = p) < end_ ? *p++ : '\0';
     while (c >= '0' && c <= '9')
-      c = (current_ = p) < end_ ? *p++ : 0;
+      c = (current_ = p) < end_ ? *p++ : '\0';
   }
   return true;
 }
@


1.3
log
@
Generalize setting of JSONCPP_OVERRIDE to all compilers
(upstream git commit ba6fa48d31091a151b10dd47986602889731a893)

Fix int->char conversions
(upstream git commit ea4af183171bcc1d775af301d9e8bd8db9405cc7)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@
Update to jsoncpp-1.7.1
@
text
@d1 1
a1 1
$OpenBSD: patch-src_lib_json_json_reader_cpp,v 1.1 2016/01/20 09:37:13 dcoppa Exp $
d3 2
a4 3
commit 1b32e3e869059e437c43ba0f8765c3e5857801f7
Author: Michael Shields <mshields@@google.com>
Date:   Mon Jul 27 16:35:19 2015 -0700
d6 59
a64 17
Fix cases where the most negative signed integer was negated, causing
undefined behavior.

--- src/lib_json/json_reader.cpp.orig	Thu Jul 23 07:32:47 2015
+++ src/lib_json/json_reader.cpp	Wed Jan 20 09:47:02 2016
@@@@ -517,7 +517,7 @@@@ bool Reader::decodeNumber(Token& token, Value& decoded
     ++current;
   // TODO: Help the compiler do the div and mod at compile time or get rid of them.
   Value::LargestUInt maxIntegerValue =
-      isNegative ? Value::LargestUInt(-Value::minLargestInt)
+      isNegative ? Value::LargestUInt(Value::maxLargestInt) + 1
                  : Value::maxLargestUInt;
   Value::LargestUInt threshold = maxIntegerValue / 10;
   Value::LargestUInt value = 0;
@@@@ -538,7 +538,9 @@@@ bool Reader::decodeNumber(Token& token, Value& decoded
     }
     value = value * 10 + digit;
d66 2
a67 7
-  if (isNegative)
+  if (isNegative && value == maxIntegerValue)
+    decoded = Value::minLargestInt;
+  else if (isNegative)
     decoded = -Value::LargestInt(value);
   else if (value <= Value::LargestUInt(Value::maxInt))
     decoded = Value::LargestInt(value);
@


1.1
log
@
Merge bugfixes from upstream:

Fix cases where the most negative signed integer was negated, causing
undefined behavior.
(upstream git commit 1b32e3e869059e437c43ba0f8765c3e5857801f7)

Tests: fix undefined behavior from a left shift of a negative value.
(upstream git commit 22ec823cc707f38ee465805cfb158879e56758a3)
@
text
@d1 1
a1 1
$OpenBSD$
@

