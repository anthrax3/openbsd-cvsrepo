head	1.5;
access;
symbols
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2016.03.24.13.21.45;	author dcoppa;	state dead;
branches;
next	1.4;
commitid	Cwf714T7EFDOnB0j;

1.4
date	2016.01.20.09.37.13;	author dcoppa;	state Exp;
branches;
next	1.3;
commitid	ey0Ro6PskHGbhmUS;

1.3
date	2015.07.15.15.41.34;	author dcoppa;	state Exp;
branches;
next	1.2;
commitid	PRMXB6c80vMIwB0w;

1.2
date	2015.06.05.00.27.59;	author jsg;	state Exp;
branches;
next	1.1;
commitid	8S9uun0fgW1Kc55r;

1.1
date	2015.03.29.10.48.21;	author sthen;	state Exp;
branches;
next	;
commitid	MadpGoUi4wbbvNZN;


desc
@@


1.5
log
@
Update to jsoncpp-1.7.1
@
text
@$OpenBSD: patch-src_test_lib_json_main_cpp,v 1.4 2016/01/20 09:37:13 dcoppa Exp $
--- src/test_lib_json/main.cpp.orig	Thu Jul 23 07:32:47 2015
+++ src/test_lib_json/main.cpp	Wed Jan 20 09:45:46 2016
@@@@ -298,7 +298,7 @@@@ JSONTEST_FIXTURE(ValueTest, null) {
 
 #if !defined(__ARMEL__)
   // See line #165 of include/json/value.h
-  JSONTEST_ASSERT_EQUAL(Json::Value::null, null_);
+  JSONTEST_ASSERT_EQUAL(Json::Value::nullRef, null_);
 #endif
 }
 
@@@@ -1215,7 +1215,7 @@@@ JSONTEST_FIXTURE(ValueTest, nonIntegers) {
   JSONTEST_ASSERT_EQUAL(-2147483648.5, val.asDouble());
   JSONTEST_ASSERT_EQUAL(float(-2147483648.5), val.asFloat());
 #ifdef JSON_HAS_INT64
-  JSONTEST_ASSERT_EQUAL(-Json::Int64(1) << 31, val.asLargestInt());
+  JSONTEST_ASSERT_EQUAL(-(Json::Int64(1) << 31), val.asLargestInt());
 #endif
   JSONTEST_ASSERT_EQUAL(true, val.asBool());
   JSONTEST_ASSERT_EQUAL("-2147483648.5",
@@@@ -1257,7 +1257,7 @@@@ JSONTEST_FIXTURE(ValueTest, nonIntegers) {
 
   // A 16-digit floating point number.
   val = Json::Value(2199023255552000.0f);
-  JSONTEST_ASSERT_EQUAL(float(2199023255552000), val.asFloat());
+  JSONTEST_ASSERT_EQUAL(float(2199023255552000LL), val.asFloat());
   JSONTEST_ASSERT_STRING_EQUAL("2199023255552000",
                                normalizeFloatingPointStr(val.asString()));
 
@


1.4
log
@
Merge bugfixes from upstream:

Fix cases where the most negative signed integer was negated, causing
undefined behavior.
(upstream git commit 1b32e3e869059e437c43ba0f8765c3e5857801f7)

Tests: fix undefined behavior from a left shift of a negative value.
(upstream git commit 22ec823cc707f38ee465805cfb158879e56758a3)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_test_lib_json_main_cpp,v 1.3 2015/07/15 15:41:34 dcoppa Exp $
@


1.3
log
@
Update to jsoncpp-0.10.4
@
text
@d1 3
a3 3
$OpenBSD: patch-src_test_lib_json_main_cpp,v 1.2 2015/06/05 00:27:59 jsg Exp $
--- src/test_lib_json/main.cpp.orig	Sun Jul 12 22:02:28 2015
+++ src/test_lib_json/main.cpp	Wed Jul 15 16:52:10 2015
d13 9
@


1.2
log
@Test Json::Value::nullRef not Json::Value::null in regress tests
to allow this to build on arm.

ok sthen@@, dcoppa@@ (MAINTAINER)
@
text
@d1 4
a4 6
$OpenBSD: patch-src_test_lib_json_main_cpp,v 1.1 2015/03/29 10:48:21 sthen Exp $
--- src/test_lib_json/main.cpp.orig	Sun Apr 12 05:49:59 2015
+++ src/test_lib_json/main.cpp	Thu Jun  4 13:48:06 2015
@@@@ -282,7 +282,7 @@@@ JSONTEST_FIXTURE(ValueTest, null) {
   JSONTEST_ASSERT_EQUAL(0.0, null_.asFloat());
   JSONTEST_ASSERT_STRING_EQUAL("", null_.asString());
d6 2
d10 1
d13 1
a13 2
 JSONTEST_FIXTURE(ValueTest, strings) {
@@@@ -1240,7 +1240,7 @@@@ JSONTEST_FIXTURE(ValueTest, nonIntegers) {
@


1.1
log
@unbreak the tree for 32-bit arch
@
text
@d1 12
a12 3
$OpenBSD$
--- src/test_lib_json/main.cpp.orig	Sun Mar 29 11:47:25 2015
+++ src/test_lib_json/main.cpp	Sun Mar 29 11:47:39 2015
@

