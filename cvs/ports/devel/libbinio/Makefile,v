head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	fcambus_20161109:1.1.1.1
	fcambus:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2017.07.26.22.45.18;	author sthen;	state Exp;
branches;
next	1.4;
commitid	tD4MFrpYYDDL2UFT;

1.4
date	2017.07.23.09.26.26;	author espie;	state Exp;
branches;
next	1.3;
commitid	FZPR2Emws5uDqXzb;

1.3
date	2017.07.16.19.18.51;	author espie;	state Exp;
branches;
next	1.2;
commitid	tt0GhWK5c4uf9ILG;

1.2
date	2017.04.10.11.45.26;	author sthen;	state Exp;
branches;
next	1.1;
commitid	XDh1zlSBq0boKsHk;

1.1
date	2016.11.08.23.02.28;	author fcambus;	state Exp;
branches
	1.1.1.1;
next	;
commitid	xL2FKVhOIuG1Hndo;

1.1.1.1
date	2016.11.08.23.02.28;	author fcambus;	state Exp;
branches;
next	;
commitid	xL2FKVhOIuG1Hndo;


desc
@@


1.5
log
@bump LIBCXX/LIBECXX/COMPILER_LIBCXX ports.
@
text
@# $OpenBSD: Makefile,v 1.4 2017/07/23 09:26:26 espie Exp $

COMMENT =	binary I/O stream class library

DISTNAME =	libbinio-1.4
REVISION =	1
SHARED_LIBS +=	binio	0.0	# 1.0
CATEGORIES =	devel

HOMEPAGE =	http://libbinio.sourceforge.net/

MAINTAINER =	Frederic Cambus <fcambus@@openbsd.org>

# LGPLv2.1+
PERMIT_PACKAGE_CDROM =	Yes

WANTLIB +=	m ${COMPILER_LIBCXX}

MASTER_SITES =	${MASTER_SITE_SOURCEFORGE:=libbinio/}

CONFIGURE_STYLE = gnu

.include <bsd.port.mk>
@


1.4
log
@add pthread to COMPILER_LIBCXX.
white lie, but it allows clang and gcc to be more similar
bump accordingly.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2017/07/16 19:18:51 espie Exp $
d6 1
a6 1
REVISION =	0
@


1.3
log
@use COMPILER_LIBCXX where applicable
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2017/04/10 11:45:26 sthen Exp $
d6 1
@


1.2
log
@use LIBCXX
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2016/11/08 23:02:28 fcambus Exp $
d16 1
a16 1
WANTLIB +=	m ${LIBCXX}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile.template,v 1.75 2016/03/20 17:19:49 naddy Exp $
d16 1
a16 1
WANTLIB +=	m stdc++
@


1.1.1.1
log
@Import devel/libbinio.

The binary I/O stream class library presents a platform-independent way
to access binary data streams in C++.

The library is hardware independent in the form that it transparently
converts between the different forms of machine-internal binary data
representation. It further employs no special I/O protocol and can be
used on arbitrary binary data sources.

OK abieber@@

@
text
@@
