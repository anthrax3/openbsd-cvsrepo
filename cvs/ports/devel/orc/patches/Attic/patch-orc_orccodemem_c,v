head	1.2;
access;
symbols
	brad-20100325:1.1.1.1 sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.04.09.21.56.05;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.03.25.10.23.26;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.25.10.23.26;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update orc to 0.4.4, from Brad
@
text
@$OpenBSD: patch-orc_orccodemem_c,v 1.1 2010/03/25 10:23:26 sthen Exp $
--- orc/orccodemem.c.orig	Mon Mar 22 20:35:43 2010
+++ orc/orccodemem.c	Mon Mar 22 20:38:14 2010
@@@@ -29,26 +29,13 @@@@ orc_compiler_allocate_codemem (OrcCompiler *compiler)
   int fd;
   int n;
 
-  /* FIXME something combining these two would be ideal */
-#if 1
   {
-    char filename[32] = "/tmp/orcexecXXXXXX";
-    fd = mkstemp (filename);
-    if (fd == -1) {
-      /* FIXME oh crap */
-      ORC_COMPILER_ERROR (compiler, "failed to create temp file");
-      return;
-    }
-    unlink (filename);
-  }
-#else
-  {
     char *filename;
 
-    filename = malloc (strlen ("/tmp/orcexec") +
-        strlen (compiler->program->name) + 1);
-    sprintf(filename, "/tmp/orcexec%s", compiler->program->name);
-    fd = open (filename, O_RDWR | O_CREAT, S_IRWXU);
+    filename = malloc (strlen ("/tmp/orcexec..") +
+        strlen (compiler->program->name) + 6 + 1);
+    sprintf(filename, "/tmp/orcexec.%s.XXXXXX", compiler->program->name);
+    fd = mkstemp (filename);
     if (fd == -1) {
       /* FIXME oh crap */
       ORC_COMPILER_ERROR (compiler, "failed to create temp file");
@@@@ -57,7 +44,6 @@@@ orc_compiler_allocate_codemem (OrcCompiler *compiler)
     unlink (filename);
     free (filename);
   }
-#endif
 
   n = ftruncate (fd, SIZE);
 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import devel/orc, from Brad with a patch from me to drop ARM machines
back to the generic support rather than trying to use the asm backend
which appears to be broken upstream.

Orc is a library and set of tools for compiling and executing
very simple programs that operate on arrays of data.  The "language"
is a generic assembly language that represents many of the features
available in SIMD architectures, including saturated addition and
subtraction, and many arithmetic operations.
@
text
@@
