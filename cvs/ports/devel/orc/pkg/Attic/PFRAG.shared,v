head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	brad-20100325:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.10.05.19.54.47;	author brad;	state dead;
branches;
next	1.3;

1.3
date	2010.07.21.20.30.21;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.09.21.56.05;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.10.23.26;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.25.10.23.26;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to orc 0.4.18.

Re-enable the AltiVec backend. This might need to be disabled again but
it is being enabled to receive some testing in the wild so speak.

ok ajacoutot@@
@
text
@@@comment $OpenBSD: PFRAG.shared,v 1.3 2010/07/21 20:30:21 sthen Exp $
@@lib lib/liborc-0.4.so.${LIBorc-0.4_VERSION}
@@lib lib/liborc-test-0.4.so.${LIBorc-test-0.4_VERSION}
@


1.3
log
@Update orc to 0.4.6, patched to avoid opcodes not available on our
supported arm systems. From Brad, with some prodding from ajacoutot,
many opcodes worked out by me the slow way.
@
text
@d1 1
a1 1
@@comment $OpenBSD: PFRAG.shared,v 1.2 2010/04/09 21:56:05 sthen Exp $
@


1.2
log
@update orc to 0.4.4, from Brad
@
text
@d1 1
a1 1
@@comment $OpenBSD: PFRAG.shared,v 1.1.1.1 2010/03/25 10:23:26 sthen Exp $
a2 1
@@lib lib/liborc-float-0.4.so.${LIBorc-float-0.4_VERSION}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
@@comment $OpenBSD$
a3 1
@@lib lib/liborc-pixel-0.4.so.${LIBorc-pixel-0.4_VERSION}
@


1.1.1.1
log
@Import devel/orc, from Brad with a patch from me to drop ARM machines
back to the generic support rather than trying to use the asm backend
which appears to be broken upstream.

Orc is a library and set of tools for compiling and executing
very simple programs that operate on arrays of data.  The "language"
is a generic assembly language that represents many of the features
available in SIMD architectures, including saturated addition and
subtraction, and many arithmetic operations.
@
text
@@
