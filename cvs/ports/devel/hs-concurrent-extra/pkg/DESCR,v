head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.18
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.14
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.16
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.12
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.10
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	dcoppa_20120419:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.04.19.07.18.41;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.19.07.18.41;	author dcoppa;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@This package offers, among other things, the following selection of
synchronisation primitives:

    Broadcast: Wake multiple threads by broadcasting a value.

    Event: Wake multiple threads by signalling an event.

    Lock: Enforce exclusive access to a resource. Also known as a binary
    semaphore or mutex. The package additionally provides an alternative
    that works in the STM monad.

    RLock: A lock which can be acquired multiple times by the same
    thread. Also known as a reentrant mutex.

    ReadWriteLock: Multiple-reader, single-writer locks. Used to protect
    shared resources which may be concurrently read, but only
    sequentially written.

    ReadWriteVar: Concurrent read, sequential write variables.

This package was inspired by the concurrency libraries of Java and
Python.
@


1.1.1.1
log
@Import devel/hs-concurrent-extra.
Extra concurrency and synchronisation primitives.

Needed by an upcoming update of databases/hs-redis.

OK kili@@
@
text
@@
