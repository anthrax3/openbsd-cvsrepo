head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.24
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.20
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.22
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.18
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	jeremy_2010-Dec-20:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.12.20.18.13.08;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.20.18.07.39;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.12.20.18.07.39;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix DESCR formatting.
@
text
@ruby-prof is a fast code profiler for Ruby. Its features include:

* Speed - it is a C extension and therefore many times faster than the
  standard Ruby profiler.
* Modes - Ruby prof can measure a number of different parameters,
  including call times, memory usage and object allocations.
* Reports - can generate text and cross-referenced html reports
  o Flat Profiles - similar to the reports generated by the standard
    Ruby profiler
  o Graph profiles - similar to GProf, these show how long a method
    runs, which methods call it and which methods it calls.
  o Call tree profiles - outputs results in the calltree format
    suitable for the KCacheGrind profiling tool.
* Threads - supports profiling multiple threads simultaneously
* Recursive calls - supports profiling recursive method calls
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
 ruby-prof is a fast code profiler for Ruby. Its features include:
a15 1

@


1.1.1.1
log
@Import ruby-prof 0.9.2

ruby-prof is a fast code profiler for Ruby. Its features include:

* Speed - it is a C extension and therefore many times faster than the
  standard Ruby profiler.
* Modes - Ruby prof can measure a number of different parameters,
  including call times, memory usage and object allocations.
* Reports - can generate text and cross-referenced html reports
  o Flat Profiles - similar to the reports generated by the standard
    Ruby profiler
  o Graph profiles - similar to GProf, these show how long a method
    runs, which methods call it and which methods it calls.
  o Call tree profiles - outputs results in the calltree format
    suitable for the KCacheGrind profiling tool.
* Threads - supports profiling multiple threads simultaneously
* Recursive calls - supports profiling recursive method calls
@
text
@@
