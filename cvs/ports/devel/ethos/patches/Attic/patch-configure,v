head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	landry_20091011:1.1.1.1
	landry:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2014.04.17.23.36.27;	author jasper;	state dead;
branches;
next	1.5;

1.5
date	2012.05.16.19.35.22;	author landry;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.30.22.28.06;	author landry;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.12.18.21.14;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.11.13.37.47;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.11.11.31.13;	author landry;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.11.11.31.13;	author landry;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove the ethos, it's old, unmaintained and unused.

ok aja@@
@
text
@$OpenBSD: patch-configure,v 1.5 2012/05/16 19:35:22 landry Exp $
ensure vala and gjs are not picked as hidden deps
--- configure.orig	Thu Nov 19 23:20:25 2009
+++ configure	Wed May 16 21:33:00 2012
@@@@ -13036,81 +13036,6 @@@@ fi
 
 enable_vala=no
 
-pkg_failed=no
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for VALA" >&5
-$as_echo_n "checking for VALA... " >&6; }
-
-if test -n "$PKG_CONFIG"; then
-    if test -n "$VALA_CFLAGS"; then
-        pkg_cv_VALA_CFLAGS="$VALA_CFLAGS"
-    else
-        if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"vala-1.0\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "vala-1.0") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then
-  pkg_cv_VALA_CFLAGS=`$PKG_CONFIG --cflags "vala-1.0" 2>/dev/null`
-else
-  pkg_failed=yes
-fi
-    fi
-else
-	pkg_failed=untried
-fi
-if test -n "$PKG_CONFIG"; then
-    if test -n "$VALA_LIBS"; then
-        pkg_cv_VALA_LIBS="$VALA_LIBS"
-    else
-        if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"vala-1.0\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "vala-1.0") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then
-  pkg_cv_VALA_LIBS=`$PKG_CONFIG --libs "vala-1.0" 2>/dev/null`
-else
-  pkg_failed=yes
-fi
-    fi
-else
-	pkg_failed=untried
-fi
-
-
-
-if test $pkg_failed = yes; then
-
-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
-        _pkg_short_errors_supported=yes
-else
-        _pkg_short_errors_supported=no
-fi
-        if test $_pkg_short_errors_supported = yes; then
-	        VALA_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "vala-1.0"`
-        else
-	        VALA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "vala-1.0"`
-        fi
-	# Put the nasty error message in config.log where it belongs
-	echo "$VALA_PKG_ERRORS" >&5
-
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-                enable_vala=no
-elif test $pkg_failed = untried; then
-	enable_vala=no
-else
-	VALA_CFLAGS=$pkg_cv_VALA_CFLAGS
-	VALA_LIBS=$pkg_cv_VALA_LIBS
-        { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
-$as_echo "yes" >&6; }
-	enable_vala=yes
-fi
-if test "x$enable_vala" = "xyes"; then
-	VAPI_DIR=`pkg-config --variable=vapidir vala-1.0`
-else
-	VAPI_DIR=
-fi
  if test "x$enable_vala" = "xyes"; then
   ENABLE_VALA_TRUE=
   ENABLE_VALA_FALSE='#'
@@@@ -13682,76 +13607,7 @@@@ fi
 
 
 
-pkg_failed=no
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for GJS" >&5
-$as_echo_n "checking for GJS... " >&6; }
-
-if test -n "$PKG_CONFIG"; then
-    if test -n "$GJS_CFLAGS"; then
-        pkg_cv_GJS_CFLAGS="$GJS_CFLAGS"
-    else
-        if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gjs-1.0 >= 0.2\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "gjs-1.0 >= 0.2") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then
-  pkg_cv_GJS_CFLAGS=`$PKG_CONFIG --cflags "gjs-1.0 >= 0.2" 2>/dev/null`
-else
-  pkg_failed=yes
-fi
-    fi
-else
-	pkg_failed=untried
-fi
-if test -n "$PKG_CONFIG"; then
-    if test -n "$GJS_LIBS"; then
-        pkg_cv_GJS_LIBS="$GJS_LIBS"
-    else
-        if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"gjs-1.0 >= 0.2\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "gjs-1.0 >= 0.2") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then
-  pkg_cv_GJS_LIBS=`$PKG_CONFIG --libs "gjs-1.0 >= 0.2" 2>/dev/null`
-else
-  pkg_failed=yes
-fi
-    fi
-else
-	pkg_failed=untried
-fi
-
-
-
-if test $pkg_failed = yes; then
-
-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
-        _pkg_short_errors_supported=yes
-else
-        _pkg_short_errors_supported=no
-fi
-        if test $_pkg_short_errors_supported = yes; then
-	        GJS_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "gjs-1.0 >= 0.2"`
-        else
-	        GJS_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "gjs-1.0 >= 0.2"`
-        fi
-	# Put the nasty error message in config.log where it belongs
-	echo "$GJS_PKG_ERRORS" >&5
-
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
-$as_echo "no" >&6; }
-                enable_js=no
-elif test $pkg_failed = untried; then
 	enable_js=no
-else
-	GJS_CFLAGS=$pkg_cv_GJS_CFLAGS
-	GJS_LIBS=$pkg_cv_GJS_LIBS
-        { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
-$as_echo "yes" >&6; }
-	enable_js=yes
-fi
  if test "x$enable_js" = "xyes"; then
   ENABLE_JS_TRUE=
   ENABLE_JS_FALSE='#'
@


1.5
log
@Ensure GJS is not picked as a hidden dependency (reported by naddy@@)
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.4 2009/11/30 22:28:06 landry Exp $
@


1.4
log
@Update to ethos 0.2.2, upstream fixed tarball so we can remove the
bundled headers in files. Tweak CONFIGURE_ENV to correctly find
libintl.h, bump ethos major as a function was renamed.
ok jasper@@
@
text
@d1 2
a2 1
$OpenBSD: patch-configure,v 1.3 2009/10/12 18:21:14 landry Exp $
d4 1
a4 1
+++ configure	Sun Nov 29 21:35:32 2009
d87 77
@


1.3
log
@Remove checks for things that sucks donkey balls, as configure doesn't
provide (yet) the corresponding --idontwantmono-or-vala
reported by jasper@@
@
text
@d1 4
a4 4
$OpenBSD: patch-configure,v 1.2 2009/10/11 13:37:47 landry Exp $
--- configure.orig	Wed Jun 17 21:39:05 2009
+++ configure	Mon Oct 12 20:18:52 2009
@@@@ -12908,81 +12908,6 @@@@ fi
d9 1
a9 1
-{ $as_echo "$as_me:$LINENO: checking for VALA" >&5
d17 1
a17 1
-    { ($as_echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"vala-1.0\"") >&5
d20 2
a21 2
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; then
d35 1
a35 1
-    { ($as_echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"vala-1.0\"") >&5
d38 2
a39 2
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; then
d66 1
a66 1
-	{ $as_echo "$as_me:$LINENO: result: no" >&5
d74 1
a74 1
-        { $as_echo "$as_me:$LINENO: result: yes" >&5
a85 94
@@@@ -13665,76 +13590,7 @@@@ fi
 
 
 
-pkg_failed=no
-{ $as_echo "$as_me:$LINENO: checking for MONO" >&5
-$as_echo_n "checking for MONO... " >&6; }
-
-if test -n "$PKG_CONFIG"; then
-    if test -n "$MONO_CFLAGS"; then
-        pkg_cv_MONO_CFLAGS="$MONO_CFLAGS"
-    else
-        if test -n "$PKG_CONFIG" && \
-    { ($as_echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"mono >= 2.0\"") >&5
-  ($PKG_CONFIG --exists --print-errors "mono >= 2.0") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; then
-  pkg_cv_MONO_CFLAGS=`$PKG_CONFIG --cflags "mono >= 2.0" 2>/dev/null`
-else
-  pkg_failed=yes
-fi
-    fi
-else
-	pkg_failed=untried
-fi
-if test -n "$PKG_CONFIG"; then
-    if test -n "$MONO_LIBS"; then
-        pkg_cv_MONO_LIBS="$MONO_LIBS"
-    else
-        if test -n "$PKG_CONFIG" && \
-    { ($as_echo "$as_me:$LINENO: \$PKG_CONFIG --exists --print-errors \"mono >= 2.0\"") >&5
-  ($PKG_CONFIG --exists --print-errors "mono >= 2.0") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:$LINENO: \$? = $ac_status" >&5
-  (exit $ac_status); }; then
-  pkg_cv_MONO_LIBS=`$PKG_CONFIG --libs "mono >= 2.0" 2>/dev/null`
-else
-  pkg_failed=yes
-fi
-    fi
-else
-	pkg_failed=untried
-fi
-
-
-
-if test $pkg_failed = yes; then
-
-if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
-        _pkg_short_errors_supported=yes
-else
-        _pkg_short_errors_supported=no
-fi
-        if test $_pkg_short_errors_supported = yes; then
-	        MONO_PKG_ERRORS=`$PKG_CONFIG --short-errors --errors-to-stdout --print-errors "mono >= 2.0"`
-        else
-	        MONO_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "mono >= 2.0"`
-        fi
-	# Put the nasty error message in config.log where it belongs
-	echo "$MONO_PKG_ERRORS" >&5
-
-	{ $as_echo "$as_me:$LINENO: result: no" >&5
-$as_echo "no" >&6; }
-                enable_mono=no
-elif test $pkg_failed = untried; then
 	enable_mono=no
-else
-	MONO_CFLAGS=$pkg_cv_MONO_CFLAGS
-	MONO_LIBS=$pkg_cv_MONO_LIBS
-        { $as_echo "$as_me:$LINENO: result: yes" >&5
-$as_echo "yes" >&6; }
-	enable_mono=yes
-fi
  if test "x$enable_mono" = "xyes"; then
   ENABLE_MONO_TRUE=
   ENABLE_MONO_FALSE='#'
@@@@ -13974,7 +13830,7 @@@@ fi
 
 
 
-ac_config_files="$ac_config_files build/autotools/shave-libtool build/autotools/shave Makefile ethos/Makefile ethos/ethos-version.h plugin-loaders/Makefile plugin-loaders/c/Makefile plugin-loaders/python/Makefile plugin-loaders/js/Makefile plugin-loaders/mono/Makefile bindings/Makefile bindings/vala/Makefile bindings/python/Makefile bindings/mono/Makefile examples/Makefile examples/simple-ui/Makefile examples/vala/Makefile tests/Makefile tests/c-plugins/Makefile tests/manager-dep/Makefile data/Makefile data/pixmaps/Makefile doc/Makefile doc/reference/Makefile doc/reference/version.xml ethos.pc ethos-ui.pc"
+ac_config_files="$ac_config_files build/autotools/shave-libtool build/autotools/shave Makefile ethos/Makefile ethos/ethos-version.h plugin-loaders/Makefile plugin-loaders/c/Makefile plugin-loaders/python/Makefile plugin-loaders/js/Makefile plugin-loaders/mono/Makefile bindings/Makefile bindings/vala/Makefile bindings/python/Makefile examples/Makefile examples/simple-ui/Makefile examples/vala/Makefile tests/Makefile tests/c-plugins/Makefile tests/manager-dep/Makefile data/Makefile data/pixmaps/Makefile doc/Makefile doc/reference/Makefile doc/reference/version.xml ethos.pc ethos-ui.pc"
 
 
 cat >confcache <<\_ACEOF
@@@@ -14937,7 +14793,6 @@@@ do
     "bindings/Makefile") CONFIG_FILES="$CONFIG_FILES bindings/Makefile" ;;
     "bindings/vala/Makefile") CONFIG_FILES="$CONFIG_FILES bindings/vala/Makefile" ;;
     "bindings/python/Makefile") CONFIG_FILES="$CONFIG_FILES bindings/python/Makefile" ;;
-    "bindings/mono/Makefile") CONFIG_FILES="$CONFIG_FILES bindings/mono/Makefile" ;;
     "examples/Makefile") CONFIG_FILES="$CONFIG_FILES examples/Makefile" ;;
     "examples/simple-ui/Makefile") CONFIG_FILES="$CONFIG_FILES examples/simple-ui/Makefile" ;;
     "examples/vala/Makefile") CONFIG_FILES="$CONFIG_FILES examples/vala/Makefile" ;;
@


1.2
log
@Disable shave to make sure it really use our libtool & add -module
-avoid-version to libtool flags for plugin loaders, so that they are
real unversioned .so and they can be discovered by ethos users. Update
PFRAG.shared, PLIST & SHARED_LIBS.
Makes emerillon happy.
@
text
@d1 1
a1 1
$OpenBSD: patch-configure,v 1.1.1.1 2009/10/11 11:31:13 landry Exp $
d3 161
a163 2
+++ configure	Sun Oct 11 14:58:01 2009
@@@@ -13974,7 +13974,7 @@@@ fi
d172 1
a172 1
@@@@ -14937,7 +14937,6 @@@@ do
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- configure.orig	Sun Oct 11 11:38:49 2009
+++ configure	Sun Oct 11 11:39:09 2009
@


1.1.1.1
log
@Import ethos 0.2.0, a plugin framework library:

The core ethos library, libethos-1.0, only links against libgobject so
that it is safe to use in GUI-less applications.  The GTK+ library,
libethos-ui-1.0, provides widgets that can be embedded within your
application to manage plugins during run-time.

Add a pair of header files upstream forgot to put in distfile.
@
text
@@
