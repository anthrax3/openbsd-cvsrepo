head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	jeremy_2012-Dec-12:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.12.12.21.49.37;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.12.12.21.49.37;	author jeremy;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@ruby-ref provides object references for Ruby as well as some common
utilities for working with references. Object references are used to
point to other objects and come in three distinct flavors that interact
differently with the garbage collector.

* Ref::StrongReference - This is a plain old pointer to another object.

* Ref::WeakReference - This is a pointer to another object, but it is
not seen by the garbage collector and the memory used by the object can
be reclaimed at any time.

* Ref::SoftReference - This is similar to a weak reference, but the
garbage collector is not as eager to reclaim the referenced object.

All of these classes extend from a common Ref::Reference class and have
a common interface.

Weak and soft references are useful when you have instantiated objects
that you may want to use again but can recreate if necessary. Since the
garbage collector determines when to reclaim the memory used by the
objects, you don't need to worry about bloating the Ruby heap.
@


1.1.1.1
log
@Import ruby-ref-1.0.2.

ruby-ref provides object references for Ruby as well as some common
utilities for working with references. Object references are used to
point to other objects and come in three distinct flavors that interact
differently with the garbage collector.

* Ref::StrongReference - This is a plain old pointer to another object.

* Ref::WeakReference - This is a pointer to another object, but it is
not seen by the garbage collector and the memory used by the object can
be reclaimed at any time.

* Ref::SoftReference - This is similar to a weak reference, but the
garbage collector is not as eager to reclaim the referenced object.

All of these classes extend from a common Ref::Reference class and have
a common interface.

Weak and soft references are useful when you have instantiated objects
that you may want to use again but can recreate if necessary. Since the
garbage collector determines when to reclaim the memory used by the
objects, you don't need to worry about bloating the Ruby heap.

OK abieber@@
@
text
@@
