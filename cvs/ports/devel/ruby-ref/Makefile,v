head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	jeremy_2012-Dec-12:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.06.24.07.07.22;	author jasper;	state Exp;
branches;
next	1.3;
commitid	QEMQZsCvacThuAIo;

1.3
date	2013.10.26.23.55.36;	author jeremy;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.11.10.50.30;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.12.21.49.37;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.12.12.21.49.37;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to ref-1.0.5
@
text
@# $OpenBSD: Makefile,v 1.3 2013/10/26 23:55:36 jeremy Exp $

COMMENT =	object reference utilities for ruby

DISTNAME =	ref-1.0.5
CATEGORIES =	devel

HOMEPAGE=	https://github.com/bdurand/ref

# MIT
PERMIT_PACKAGE_CDROM =	Yes

MODULES =	lang/ruby
CONFIGURE_STYLE = ruby gem

MODRUBY_TEST = testrb
MODRUBY_TEST_TARGET = test/*_test.rb

.include <bsd.port.mk>
@


1.3
log
@Bump all ruby gem ports supporting rbx FLAVOR due to change to rubinius
gem directory when upgrading rubinius from 1.2.4 to 2.1.1.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2013/03/11 10:50:30 espie Exp $
d5 1
a5 2
DISTNAME =	ref-1.0.2
REVISION =	0
@


1.2
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2012/12/12 21:49:37 jeremy Exp $
d6 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2011/01/06 04:24:23 jeremy Exp $
a11 3
PERMIT_PACKAGE_FTP =	Yes
PERMIT_DISTFILES_CDROM = Yes
PERMIT_DISTFILES_FTP =	Yes
d16 2
a17 2
MODRUBY_REGRESS = testrb
MODRUBY_REGRESS_TARGET = test/*_test.rb
@


1.1.1.1
log
@Import ruby-ref-1.0.2.

ruby-ref provides object references for Ruby as well as some common
utilities for working with references. Object references are used to
point to other objects and come in three distinct flavors that interact
differently with the garbage collector.

* Ref::StrongReference - This is a plain old pointer to another object.

* Ref::WeakReference - This is a pointer to another object, but it is
not seen by the garbage collector and the memory used by the object can
be reclaimed at any time.

* Ref::SoftReference - This is similar to a weak reference, but the
garbage collector is not as eager to reclaim the referenced object.

All of these classes extend from a common Ref::Reference class and have
a common interface.

Weak and soft references are useful when you have instantiated objects
that you may want to use again but can recreate if necessary. Since the
garbage collector determines when to reclaim the memory used by the
objects, you don't need to worry about bloating the Ruby heap.

OK abieber@@
@
text
@@
