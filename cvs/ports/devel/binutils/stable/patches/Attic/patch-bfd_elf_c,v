head	1.6;
access;
symbols
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2004.11.18.23.40.06;	author fgsch;	state dead;
branches;
next	1.5;

1.5
date	2003.10.11.00.52.22;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.05.04.29.16;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.05.04.03.55;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2002.05.04.08.31.19;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.30.18.15.55;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove binutils now that we have a recent and more closely tracked version.
if it's needed in the future, we can bring it back. pvalchev@@ ok.
@
text
@$OpenBSD: patch-bfd_elf_c,v 1.5 2003/10/11 00:52:22 brad Exp $
--- bfd/elf.c.orig	2003-06-02 16:35:20.000000000 -0400
+++ bfd/elf.c	2003-09-04 02:03:34.000000000 -0400
@@@@ -4073,9 +4073,12 @@@@ get_program_header_size (abfd)
       return elf_tdata (abfd)->program_header_size;
     }
 
-  /* Assume we will need exactly two PT_LOAD segments: one for text
-     and one for data.  */
-  segs = 2;
+  /* We used to assume that two PT_LOAD segments would be enough,
+     code and data, with the change to pad the PLT and GOT, this is no
+     longer true. Now there can be several PT_LOAD sections. 7 seems
+     to be enough with BSS_PLT and .rodata-X, where we have text, data,
+     GOT, dynamic, PLT, bss */
+  segs = 7;
 
   s = bfd_get_section_by_name (abfd, ".interp");
   if (s != NULL && (s->flags & SEC_LOAD) != 0)
@


1.5
log
@upgrade to binutils 2.14

Tested on powerpc/sparc64/alpha
@
text
@d1 1
a1 1
$OpenBSD: patch-bfd_elf_c,v 1.4 2003/06/05 04:29:16 brad Exp $
@


1.4
log
@and 2 more missing patches.
@
text
@d1 4
a4 4
$OpenBSD$
--- bfd/elf.c.orig	Wed Mar 19 22:34:28 2003
+++ bfd/elf.c	Wed Mar 19 22:37:10 2003
@@@@ -4013,9 +4013,12 @@@@ get_program_header_size (abfd)
@


1.3
log
@upgrade to binutils 2.13.2.1

This is work in progress. It is being commited as a starting point so other
people can look at it/fix issues/and maybe Art can add Hammer support? :)
It has been lightly tested on macppc/sparc64/i386 and compile tested by
mickey@@ on hppa.

DO NOT try to build ld.so on sparc/sparc64/macppc and install the resulting
binary unless you like having a hosed system. A known "misfeature" in ld.so
that is being worked on.
--
MAINTAINER ok
@
text
@d1 5
a5 15
$OpenBSD: patch-bfd_elf_c,v 1.2 2002/05/04 08:31:19 fgsch Exp $
--- bfd/elf.c.orig	Tue Apr 30 06:24:34 2002
+++ bfd/elf.c	Tue Apr 30 06:25:29 2002
@@@@ -4535,7 +4535,9 @@@@ _bfd_elf_get_symtab_upper_bound (abfd)
   Elf_Internal_Shdr *hdr = &elf_tdata (abfd)->symtab_hdr;
 
   symcount = hdr->sh_size / get_elf_backend_data (abfd)->s->sizeof_sym;
-  symtab_size = (symcount - 1 + 1) * (sizeof (asymbol *));
+  symtab_size = (symcount + 1) * (sizeof (asymbol *));
+  if (symcount > 0)
+    symtab_size -= sizeof (asymbol *);
 
   return symtab_size;
 }
@@@@ -4555,7 +4557,9 @@@@ _bfd_elf_get_dynamic_symtab_upper_bound 
d8 9
a16 5
   symcount = hdr->sh_size / get_elf_backend_data (abfd)->s->sizeof_sym;
-  symtab_size = (symcount - 1 + 1) * (sizeof (asymbol *));
+  symtab_size = (symcount + 1) * (sizeof (asymbol *));
+  if (symcount > 0)
+    symtab_size -= sizeof (asymbol *);
d18 2
a19 2
   return symtab_size;
 }
@


1.2
log
@sigh, make this right for good.
@
text
@d1 1
a1 1
$OpenBSD: patch-bfd_elf_c,v 1.1 2002/04/30 18:15:55 fgsch Exp $
@


1.1
log
@Leave space for terminating NULL if empty symbol table. from bfd-current.
@
text
@d1 1
a1 1
$OpenBSD$
d10 1
a10 1
+  if (symtab_size > 0)
d21 1
a21 1
+  if (symtab_size > 0)
@

