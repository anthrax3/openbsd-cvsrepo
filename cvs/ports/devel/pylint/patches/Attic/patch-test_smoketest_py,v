head	1.2;
access;
symbols
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.16
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.14
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	alek_20070504:1.1.1.1
	alek:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.08.31.12.42.24;	author mpi;	state dead;
branches;
next	1.1;

1.1
date	2007.05.04.17.43.27;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.04.17.43.27;	author alek;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to pylint 0.24.0, maintainer timeout

ok rpointel@@, benoit@@
@
text
@$OpenBSD: patch-test_smoketest_py,v 1.1 2007/05/04 17:43:27 alek Exp $
--- test/smoketest.py.orig	Mon Apr  9 13:35:10 2007
+++ test/smoketest.py	Mon Apr  9 13:35:58 2007
@@@@ -25,23 +25,23 @@@@ class LintSmokeTest(TestCase):
         
     def test1(self):
         """make pylint checking itself"""
-        Run(['--include-ids=y', 'pylint'], reporter=TextReporter(StringIO()), quiet=1)
+        Run(['--persistent=n', '--include-ids=y', 'pylint'], reporter=TextReporter(StringIO()), quiet=1)
     
     def test2(self):
         """make pylint checking itself"""
-        Run(['pylint.lint'], reporter=ParseableTextReporter(StringIO()), quiet=1)
+        Run(['--persistent=n', 'pylint.lint'], reporter=ParseableTextReporter(StringIO()), quiet=1)
     
     def test3(self):
         """make pylint checking itself"""
-        Run(['pylint.checkers'], reporter=HTMLReporter(StringIO()), quiet=1)
+        Run(['--persistent=n', 'pylint.checkers'], reporter=HTMLReporter(StringIO()), quiet=1)
     
     def test4(self):
         """make pylint checking itself"""
-        Run(['pylint.checkers'], reporter=ColorizedTextReporter(StringIO()), quiet=1)
+        Run(['--persistent=n', 'pylint.checkers'], reporter=ColorizedTextReporter(StringIO()), quiet=1)
     
     def test5(self):
         """make pylint checking itself"""
-        Run(['pylint.checkers'], reporter=VSTextReporter(StringIO()), quiet=1)
+        Run(['--persistent=n', 'pylint.checkers'], reporter=VSTextReporter(StringIO()), quiet=1)
     
     def test_generate_config_option(self):
         """make pylint checking itself"""
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import 0.13.1

Pylint is a lint-like tool for Python code. It performs almost all the
verifications that pychecker does, and additionally can perform some
stylistic verification and coding standard enforcements. The checked
code is assigned a mark based on the number and the severity of the
encountered problems. The previous mark of a given piece of code is
cached so that you can see if the code quality has improved since the
last check.

From Andreas Bihlmaier <andreas.bihlmaier@@gmx.de>                           
									
With help and one okey from bernd@@ and steven@@
@
text
@@
