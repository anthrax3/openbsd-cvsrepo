head	1.2;
access;
symbols
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	xsa_2004-Jul-23:1.1.1.1
	xsa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.10.23.16.48.12;	author xsa;	state dead;
branches;
next	1.1;

1.1
date	2004.07.23.08.39.24;	author xsa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.23.08.39.24;	author xsa;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 1.2.2; see the CHANGES file for a detailed Changelog;
@
text
@$OpenBSD: patch-README,v 1.1 2004/07/23 08:39:24 xsa Exp $
--- README.orig	Thu Jan  8 21:40:56 2004
+++ README	Sat Jul  3 14:59:36 2004
@@@@ -13,7 +13,7 @@@@ that client code uses to construct the g
 Here is a program to parse "Hello, World!" (or any greeting of the form 
 "<salutation>, <addressee>!"):
 
-    from parsing import Word, alphas
+    from pyparsing import Word, alphas
     greet = Word( alphas ) + "," + Word( alphas ) + "!"
     hello = "Hello, World!"
     print hello, "->", greet.parseString( hello )
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@
Initial import of py-parsing-1.2

pyparsing is an alternative approach to creating and executing simple
grammars, vs. the traditional lex/yacc approach, or the use of regular
expressions.  The parsing module provides a library of classes that
client code uses to construct the grammar directly in Python code.
@
text
@@
