head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.8
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2015.09.19.07.58.00;	author kili;	state Exp;
branches;
next	1.5;
commitid	YEp9EDVS8k5vYiTj;

1.5
date	2014.11.22.20.48.00;	author kili;	state Exp;
branches;
next	1.4;
commitid	hQehp0WpIXh9BgjJ;

1.4
date	2013.07.18.21.48.49;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.02.20.27.19;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.21.22.27.18;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.02.13.35.40;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to hs-network-2.6.2.1.
@
text
@$OpenBSD: patch-Network_Socket_hsc,v 1.5 2014/11/22 20:48:00 kili Exp $

don't throw an error when attempting to setsockopt IPV6_V6ONLY

--- Network/Socket.hsc.orig	Tue Jul  7 20:40:52 2015
+++ Network/Socket.hsc	Tue Sep  1 10:14:57 2015
@@@@ -318,9 +318,10 @@@@ socket family stype protocol = do
     withSocketsDo $ return ()
     let sock = MkSocket fd family stype protocol socket_status
 #if HAVE_DECL_IPV6_V6ONLY
-# if defined(mingw32_HOST_OS)
+# if defined(mingw32_HOST_OS) || defined(openbsd_HOST_OS)
     -- the IPv6Only option is only supported on Windows Vista and later,
-    -- so trying to change it might throw an error
+    -- so trying to change it might throw an error. It's also not
+    -- supported on OpenBSD.
     when (family == AF_INET6) $
             E.catch (setSocketOption sock IPv6Only 0) $ (\(_ :: E.IOException) -> return ())
 # else
@


1.5
log
@Update to network-2.4.2.3.
@
text
@d1 1
a1 1
$OpenBSD: patch-Network_Socket_hsc,v 1.4 2013/07/18 21:48:49 kili Exp $
d5 4
a8 4
--- Network/Socket.hsc.orig	Fri Apr 18 09:16:03 2014
+++ Network/Socket.hsc	Wed Nov 12 22:40:00 2014
@@@@ -327,9 +327,10 @@@@ socket family stype protocol = do
     socket_status <- newMVar NotConnected
@


1.4
log
@Update to network-2.4.1.2
@
text
@d1 1
a1 3
$OpenBSD: patch-Network_Socket_hsc,v 1.3 2012/12/02 20:27:19 kili Exp $

ucred is sockpeercred on OpenBSD
d5 2
a6 11
--- Network/Socket.hsc.orig	Fri Feb 22 01:03:06 2013
+++ Network/Socket.hsc	Mon Jul  8 15:32:32 2013
@@@@ -82,7 +82,7 @@@@ module Network.Socket
     , getPeerName
     , getSocketName
 
-#ifdef HAVE_STRUCT_UCRED
+#ifdef HAVE_STRUCT_SOCKPEERCRED
     -- get the credentials of our domain socket peer.
     , getPeerCred
 #endif
a19 28
@@@@ -983,22 +984,22 @@@@ getSocketOption (MkSocket s _ _ _ _) so = do
        fromIntegral `liftM` peek ptr_v
 
 
-#ifdef HAVE_STRUCT_UCRED
+#ifdef HAVE_STRUCT_SOCKPEERCRED
 -- | Returns the processID, userID and groupID of the socket's peer.
 --
 -- Only available on platforms that support SO_PEERCRED on domain sockets.
 getPeerCred :: Socket -> IO (CUInt, CUInt, CUInt)
 getPeerCred sock = do
   let fd = fdSocket sock
-  let sz = (fromIntegral (#const sizeof(struct ucred)))
+  let sz = (fromIntegral (#const sizeof(struct sockpeercred)))
   with sz $ \ ptr_cr ->
    alloca       $ \ ptr_sz -> do
      poke ptr_sz sz
      throwSocketErrorIfMinus1Retry "getPeerCred" $
        c_getsockopt fd (#const SOL_SOCKET) (#const SO_PEERCRED) ptr_cr ptr_sz
-     pid <- (#peek struct ucred, pid) ptr_cr
-     uid <- (#peek struct ucred, uid) ptr_cr
-     gid <- (#peek struct ucred, gid) ptr_cr
+     pid <- (#peek struct sockpeercred, pid) ptr_cr
+     uid <- (#peek struct sockpeercred, uid) ptr_cr
+     gid <- (#peek struct sockpeercred, gid) ptr_cr
      return (pid, uid, gid)
 #endif
 
@


1.3
log
@Update to network-2.3.1.0.
@
text
@d1 1
a1 1
$OpenBSD: patch-Network_Socket_hsc,v 1.2 2012/11/21 22:27:18 kili Exp $
d7 3
a9 3
--- Network/Socket.hsc.orig	Thu Aug 16 18:06:46 2012
+++ Network/Socket.hsc	Wed Nov 21 22:08:08 2012
@@@@ -80,7 +80,7 @@@@ module Network.Socket
d18 1
a18 1
@@@@ -424,9 +424,10 @@@@ socket family stype protocol = do
d29 1
a29 1
             catch (setSocketOption sock IPv6Only 0) $ const $ return ()
d31 1
a31 1
@@@@ -1057,22 +1058,22 @@@@ getSocketOption (MkSocket s _ _ _ _) so = do
d45 1
a45 1
   with sz $ \ ptr_cr -> 
d48 1
a48 1
      throwErrnoIfMinus1 "getPeerCred" $
@


1.2
log
@Ignore exceptions thrown by setsockopt IPV6_ONLY in the socket
function. May look pointless to not just remove the call to setsockopt,
but this way it's probably easier to get it accepted upstream.

Problem initially reported and diff tested by Alexander Polakov.
@
text
@d1 1
a1 1
$OpenBSD: patch-Network_Socket_hsc,v 1.1 2012/10/02 13:35:40 dcoppa Exp $
d7 2
a8 2
--- Network/Socket.hsc.orig	Tue Apr 24 05:19:39 2012
+++ Network/Socket.hsc	Wed Nov 21 22:13:30 2012
d31 1
a31 1
@@@@ -1042,22 +1043,22 @@@@ getSocketOption (MkSocket s _ _ _ _) so = do
@


1.1
log
@Fix: ucred -> sockpeercred

ok kili@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d5 4
a8 2
--- Network/Socket.hsc.orig	Mon Oct  1 20:31:59 2012
+++ Network/Socket.hsc	Mon Oct  1 20:32:16 2012
d18 14
a31 1
@@@@ -1042,22 +1042,22 @@@@ getSocketOption (MkSocket s _ _ _ _) so = do
@

