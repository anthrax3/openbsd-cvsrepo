head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.20
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.14
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.16
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.8
	OPENBSD_5_0:1.1.1.1.0.6
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.4
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	jasper_20100708:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2012.05.15.15.16.29;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.11.20.51.04;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.08.12.28.57;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.07.08.12.28.57;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@adjust to new lua.port.mk
@
text
@@@comment $OpenBSD: PLIST,v 1.2 2012/05/11 20:51:04 jasper Exp $
lib/lua/${MODLUA_VERSION}/profiler.so
share/doc/${FULLPKGNAME}/
share/doc/${FULLPKGNAME}/index.html
share/doc/${FULLPKGNAME}/license.html
share/doc/${FULLPKGNAME}/manual.html
share/lua/${MODLUA_VERSION}/luaprofiler/
share/lua/${MODLUA_VERSION}/luaprofiler/summary.lua
@


1.2
log
@regen PLIST
(no REVISION bump needed)
@
text
@d1 1
a1 1
@@comment $OpenBSD: PLIST,v 1.1.1.1 2010/07/08 12:28:57 jasper Exp $
d3 4
a6 4
share/doc/luaprofiler/
share/doc/luaprofiler/index.html
share/doc/luaprofiler/license.html
share/doc/luaprofiler/manual.html
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
@@comment $OpenBSD$
lib/lua/5.1/profiler.so
d7 2
a8 2
share/lua/5.1/luaprofiler/
share/lua/5.1/luaprofiler/summary.lua
@


1.1.1.1
log
@import luaprofiler 2.0.2

LuaProfiler is a time profiler designed to help finding bottlenecks on
your Lua program.

If you use LuaProfiler into your program, it will generate a log of all
your function calls and their respective running times. You can use this
log to generate a summary of the functions your program uses, along with
how long it stayed in each of them, or you can import the log into a
spreadsheet for further analysis.
@
text
@@
