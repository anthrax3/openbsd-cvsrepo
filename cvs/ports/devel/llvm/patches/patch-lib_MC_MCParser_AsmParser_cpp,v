head	1.3;
access;
symbols
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.10.07.12.35.31;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	ncLfqubznjYd9wyB;

1.2
date	2016.03.05.15.31.40;	author pascal;	state dead;
branches;
next	1.1;
commitid	Hqi865xYWk2i2UMI;

1.1
date	2015.06.04.05.58.43;	author ajacoutot;	state Exp;
branches;
next	;
commitid	kCyWwP07h5Iemsa0;


desc
@@


1.3
log
@Make clang include a FILE symbol for .(s|S) files.

from Brad (maintainer), confirmed by robert@@
@
text
@$OpenBSD$

make clang include a FILE symbol for .(s|S) files

This is mostly needed by syspatch at the moment to be
to be able to re-link in the same order as the original
libraries were linked with by relying on the readelf(1)
and without this .(s|S) assembly files were not getting
a file directive.

Index: lib/MC/MCParser/AsmParser.cpp
--- lib/MC/MCParser/AsmParser.cpp.orig
+++ lib/MC/MCParser/AsmParser.cpp
@@@@ -742,6 +742,8 @@@@ bool AsmParser::Run(bool NoInitialTextSection, bool No
   AsmCond StartingCondState = TheCondState;
   SmallVector<AsmRewrite, 4> AsmStrRewrites;
 
+  StringRef Filename = getContext().getMainFileName();
+
   // If we are generating dwarf for assembly source files save the initial text
   // section and generate a .file directive.
   if (getContext().getGenDwarfForAssembly()) {
@@@@ -755,8 +757,11 @@@@ bool AsmParser::Run(bool NoInitialTextSection, bool No
     assert(InsertResult && ".text section should not have debug info yet");
     (void)InsertResult;
     getContext().setGenDwarfFileNumber(getStreamer().EmitDwarfFileDirective(
-        0, StringRef(), getContext().getMainFileName()));
+        0, StringRef(), Filename));
   }
+
+  if (!Filename.empty() && (Filename.compare(StringRef("-")) != 0))
+    Out.EmitFileDirective(Filename);
 
   // While we have input, parse each statement.
   while (Lexer.isNot(AsmToken::Eof)) {
@


1.2
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_MC_MCParser_AsmParser_cpp,v 1.1 2015/06/04 05:58:43 ajacoutot Exp $
d3 1
a3 2
r229911
MC: Allow multiple comma-separated expressions on the .uleb128 directive.
d5 12
a16 4
--- lib/MC/MCParser/AsmParser.cpp.orig	Thu Jun  4 00:34:57 2015
+++ lib/MC/MCParser/AsmParser.cpp	Thu Jun  4 00:40:09 2015
@@@@ -3574,21 +3574,27 @@@@ bool AsmParser::parseDirectiveSpace(StringRef IDVal) {
 }
d18 12
a29 26
 /// parseDirectiveLEB128
-/// ::= (.sleb128 | .uleb128) expression
+/// ::= (.sleb128 | .uleb128) [ expression (, expression)* ]
 bool AsmParser::parseDirectiveLEB128(bool Signed) {
   checkForValidSection();
   const MCExpr *Value;
 
-  if (parseExpression(Value))
-    return true;
+  for (;;) {
+    if (parseExpression(Value))
+      return true;
 
-  if (getLexer().isNot(AsmToken::EndOfStatement))
-    return TokError("unexpected token in directive");
+    if (Signed)
+      getStreamer().EmitSLEB128Value(Value);
+    else
+      getStreamer().EmitULEB128Value(Value);
 
-  if (Signed)
-    getStreamer().EmitSLEB128Value(Value);
-  else
-    getStreamer().EmitULEB128Value(Value);
+    if (getLexer().is(AsmToken::EndOfStatement))
+      break;
d31 2
a32 4
+    if (getLexer().isNot(AsmToken::Comma))
+      return TokError("unexpected token in directive");
+    Lex();
+  }
d34 2
a35 2
   return false;
 }
@


1.1
log
@Backport commit from upstream LLVM:

r229911
MC: Allow multiple comma-separated expressions on the .uleb128 directive.

from brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@

