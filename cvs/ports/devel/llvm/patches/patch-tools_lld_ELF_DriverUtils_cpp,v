head	1.5;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2017.07.14.17.14.03;	author sthen;	state Exp;
branches;
next	1.4;
commitid	2I37ZfTOrmp63Kb2;

1.4
date	2017.04.17.14.20.17;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	WGAasc2kWMjXmWb7;

1.3
date	2017.03.25.14.00.47;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	sJNuYNg15ib3zLsS;

1.2
date	2017.03.23.08.26.07;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	qqpBj8whlAgCQWje;

1.1
date	2017.02.10.09.37.43;	author ajacoutot;	state Exp;
branches;
next	;
commitid	fevyFq3hanzfmR8U;


desc
@@


1.5
log
@update to LLVM-4.0.1, from Brad (maintainer)
been through i386 and amd64 bulks
@
text
@$OpenBSD: patch-tools_lld_ELF_DriverUtils_cpp,v 1.4 2017/04/17 14:20:17 ajacoutot Exp $

- Disable colored diagnostics.
- Handle the OpenBSD-style major/minor shared library version scheme.

Index: tools/lld/ELF/DriverUtils.cpp
--- tools/lld/ELF/DriverUtils.cpp.orig
+++ tools/lld/ELF/DriverUtils.cpp
@@@@ -59,7 +59,7 @@@@ static bool getColorDiagnostics(opt::InputArgList &Arg
   auto *Arg = Args.getLastArg(OPT_color_diagnostics, OPT_color_diagnostics_eq,
                               OPT_no_color_diagnostics);
   if (!Arg)
-    return Default;
+    return false;
   if (Arg->getOption().getID() == OPT_color_diagnostics)
     return true;
   if (Arg->getOption().getID() == OPT_no_color_diagnostics)
@@@@ -194,9 +194,35 @@@@ Optional<std::string> elf::searchLibrary(StringRef Nam
     return findFromSearchPaths(Name.substr(1));
 
   for (StringRef Dir : Config->SearchPaths) {
-    if (!Config->Static)
+    if (!Config->Static) {
       if (Optional<std::string> S = findFile(Dir, "lib" + Name + ".so"))
         return S;
+
+      llvm::SmallString<128> Scratch;
+      const StringRef LibName = ("lib" + Name + ".so.").toStringRef(Scratch);
+      int MaxMaj = -1, MaxMin = -1;
+      std::error_code EC;
+      for (fs::directory_iterator LI(Dir, EC), LE;
+	   !EC && LI != LE; LI = LI.increment(EC)) {
+        StringRef FilePath = LI->path();
+	StringRef FileName = path::filename(FilePath);
+	if (!(FileName.startswith(LibName)))
+	  continue;
+	std::pair<StringRef, StringRef> MajMin =
+	  FileName.substr(LibName.size()).split('.');
+	int Maj, Min;
+	if (MajMin.first.getAsInteger(10, Maj) || Maj < 0)
+	  continue;
+	if (MajMin.second.getAsInteger(10, Min) || Min < 0)
+	  continue;
+	if (Maj > MaxMaj)
+	  MaxMaj = Maj, MaxMin = Min;
+	if (MaxMaj == Maj && Min > MaxMin)
+	  MaxMin = Min;
+      }
+      if (MaxMaj >= 0)
+	return findFile(Dir, LibName + Twine(MaxMaj) + "." + Twine(MaxMin));
+    }
     if (Optional<std::string> S = findFile(Dir, "lib" + Name + ".a"))
       return S;
   }
@


1.4
log
@Disable colored diagnostics.

from Brad (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_lld_ELF_DriverUtils_cpp,v 1.3 2017/03/25 14:00:47 ajacoutot Exp $
a3 3
- Print out "supported targets".
- Refine comment.
- [ELF] Print two more MIPS targets "supported" by LLD
d6 3
a8 2
--- tools/lld/ELF/DriverUtils.cpp.orig	Fri Jan  6 05:04:35 2017
+++ tools/lld/ELF/DriverUtils.cpp	Sun Apr 16 15:32:46 2017
d18 1
a18 22
@@@@ -120,6 +120,20 @@@@ opt::InputArgList ELFOptTable::parse(ArrayRef<const ch
 void elf::printHelp(const char *Argv0) {
   ELFOptTable Table;
   Table.PrintHelp(outs(), Argv0, "lld", false);
+  outs() << "\n";
+
+  // Scripts generated by Libtool versions up to at least 2.4.6 (the most
+  // recent version as of March 2017) expect /: supported targets:.* elf/
+  // in a message for the -help option. If it doesn't match, the scripts
+  // assume that the linker doesn't support very basic features such as
+  // shared libraries. Therefore, we need to print out at least "elf".
+  // Here, we print out all the targets that we support.
+  outs() << Argv0 << ": supported targets: "
+         << "elf32-i386 elf32-iamcu elf32-littlearm elf32-powerpc "
+         << "elf32-tradbigmips elf32-tradlittlemips "
+         << "elf32-ntradbigmips elf32-ntradlittlemips elf32-x86-64 "
+         << "elf64-amdgpu elf64-littleaarch64 elf64-powerpc "
+         << "elf64-tradbigmips elf64-tradlittlemips elf64-x86-64\n";
 }
 
 // Reconstructs command line arguments so that so that you can re-run
@@@@ -180,9 +194,35 @@@@ Optional<std::string> elf::searchLibrary(StringRef Nam
@


1.3
log
@Updated diff for the "supported targets" change.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_lld_ELF_DriverUtils_cpp,v 1.2 2017/03/23 08:26:07 ajacoutot Exp $
d3 1
d10 10
a19 1
+++ tools/lld/ELF/DriverUtils.cpp	Thu Mar 23 23:33:21 2017
@


1.2
log
@- Bring in an LLD workaround from base
- Add "(compatible with GNU linkers)" to the -version output
- Print out "supported targets".
- Update/fix PIE defaults
- -z nodlopen has been commited upstream

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_lld_ELF_DriverUtils_cpp,v 1.1 2017/02/10 09:37:43 ajacoutot Exp $
d4 2
d9 2
a10 2
+++ tools/lld/ELF/DriverUtils.cpp	Wed Mar 22 19:10:55 2017
@@@@ -120,6 +120,18 @@@@ opt::InputArgList ELFOptTable::parse(ArrayRef<const ch
d16 6
a21 5
+  // Scripts generated by Libtool 2.4.6 or earlier expects /supported
+  // targets:.* elf/ in a message for the -help option. If it doesn't
+  // match, the scripts suppose that the linker doesn't support very basic
+  // features such as shared libraries. Therefore, we need to print out at
+  // least "elf". Here, we print out all the targets that we support.
d24 2
a25 1
+         << "elf32-tradbigmips elf32-tradlittlemips elf32-x86-64 "
d31 1
a31 1
@@@@ -180,9 +192,35 @@@@ Optional<std::string> elf::searchLibrary(StringRef Nam
@


1.1
log
@Update to llvm-4.0.0rc2.
- survived a bulk on i386 and amd64

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 1
Handle the OpenBSD-style major/minor shared library version scheme.
d6 22
a27 3
--- tools/lld/ELF/DriverUtils.cpp.orig	Fri Jan 27 17:56:22 2017
+++ tools/lld/ELF/DriverUtils.cpp	Tue Jan 31 20:48:19 2017
@@@@ -180,9 +180,35 @@@@ Optional<std::string> elf::searchLibrary(StringRef Nam
@

