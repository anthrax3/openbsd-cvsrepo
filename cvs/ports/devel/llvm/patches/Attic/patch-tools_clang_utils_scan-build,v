head	1.5;
access;
symbols
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	sthen_20081110:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2010.04.29.16.37.09;	author jsg;	state dead;
branches;
next	1.4;

1.4
date	2009.08.09.11.26.03;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.21.23.13.48;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2009.02.08.22.55.43;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.10.11.25.33;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.11.10.11.25.33;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to LLVM/Clang 2.7
ok sthen@@
@
text
@$OpenBSD: patch-tools_clang_utils_scan-build,v 1.4 2009/08/09 11:26:03 sthen Exp $
--- tools/clang/utils/scan-build.orig	Sat Aug  8 00:34:45 2009
+++ tools/clang/utils/scan-build	Sun Aug  9 10:23:50 2009
@@@@ -423,7 +423,7 @@@@ sub CopyFiles {
 
   my $Dir = shift;
 
-  my $JS = Cwd::realpath("$RealBin/sorttable.js");
+  my $JS = Cwd::realpath("${LOCALBASE}/share/llvm/sorttable.js");
   
   DieDiag("Cannot find 'sorttable.js'.\n")
     if (! -r $JS);  
@@@@ -433,7 +433,7 @@@@ sub CopyFiles {
   DieDiag("Could not copy 'sorttable.js' to '$Dir'.\n")
     if (! -r "$Dir/sorttable.js");
     
-  my $CSS = Cwd::realpath("$RealBin/scanview.css");
+  my $CSS = Cwd::realpath("${LOCALBASE}/share/llvm/scanview.css");
   
   DieDiag("Cannot find 'scanview.css'.\n")
     if (! -r $CSS);
@


1.4
log
@Update to a newer snapshot, requested by jsg@@. Fixes building autoconf
projects, upstream rolled in the OpenBSD backend with proper target-specific
definitions etc.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_utils_scan-build,v 1.3 2009/06/21 23:13:48 sthen Exp $
@


1.3
log
@Update to a newer snapshot.
@
text
@d1 4
a4 4
$OpenBSD: patch-tools_clang_utils_scan-build,v 1.2 2009/02/08 22:55:43 sthen Exp $
--- tools/clang/utils/scan-build.orig	Fri May 15 22:14:16 2009
+++ tools/clang/utils/scan-build	Sun Jun 21 22:55:38 2009
@@@@ -429,7 +429,7 @@@@ sub CopyFiles {
d13 1
a13 1
@@@@ -439,7 +439,7 @@@@ sub CopyFiles {
@


1.2
log
@update to a newer snapshot; made after upstream's freeze in the
runup to 2.5 release towards the end of this month.
@
text
@d1 4
a4 4
$OpenBSD: patch-tools_clang_utils_scan-build,v 1.1.1.1 2008/11/10 11:25:33 sthen Exp $
--- tools/clang/utils/scan-build.orig	Thu Feb  5 13:22:38 2009
+++ tools/clang/utils/scan-build	Thu Feb  5 16:07:01 2009
@@@@ -402,7 +402,7 @@@@ sub CopyFiles {
d13 1
a13 1
@@@@ -412,7 +412,7 @@@@ sub CopyFiles {
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- tools/clang/utils/scan-build.orig	Tue Nov  4 00:22:12 2008
+++ tools/clang/utils/scan-build	Sun Nov  9 22:58:06 2008
@@@@ -406,7 +406,7 @@@@ sub CopyFiles {
d13 1
a13 1
@@@@ -416,7 +416,7 @@@@ sub CopyFiles {
@


1.1.1.1
log
@import llvm/clang. not heavily tested yet but there's been a lot
of interest in the static analyser and it basically works, so put
it in now and link to the build later.

Low Level Virtual Machine (LLVM) is:
- A compilation strategy designed to enable effective program
  optimization across the entire lifetime of a program.
- A virtual instruction set.
- A compiler infrastructure.
- LLVM does not imply things that you would expect from a high-level
  virtual machine. It does not require garbage collection or run-time
  code generation.

some parts from chl@@ and the FreeBSD port.
@
text
@@
