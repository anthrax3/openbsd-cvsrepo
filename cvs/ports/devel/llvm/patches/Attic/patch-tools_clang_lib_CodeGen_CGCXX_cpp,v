head	1.3;
access;
symbols
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2016.03.05.15.31.41;	author pascal;	state dead;
branches;
next	1.2;
commitid	Hqi865xYWk2i2UMI;

1.2
date	2014.04.18.21.26.56;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.18.09.30.48;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@$OpenBSD: patch-tools_clang_lib_CodeGen_CGCXX_cpp,v 1.2 2014/04/18 21:26:56 brad Exp $

r203007
Don't produce an alias between destructors with different calling conventions.

http://llvm.org/bugs/show_bug.cgi?id=19007
https://bugzilla.mozilla.org/show_bug.cgi?id=978423

--- tools/clang/lib/CodeGen/CGCXX.cpp.orig	Fri Apr  4 23:01:26 2014
+++ tools/clang/lib/CodeGen/CGCXX.cpp	Fri Apr  4 23:02:50 2014
@@@@ -92,7 +92,13 @@@@ bool CodeGenModule::TryEmitBaseDestructorAsAlias(const
   if (!ClassLayout.getBaseClassOffset(UniqueBase).isZero())
     return true;
 
+  // Give up if the calling conventions don't match. We could update the call,
+  // but it is probably not worth it.
   const CXXDestructorDecl *BaseD = UniqueBase->getDestructor();
+  if (BaseD->getType()->getAs<FunctionType>()->getCallConv() !=
+      D->getType()->getAs<FunctionType>()->getCallConv())
+    return true;
+
   return TryEmitDefinitionAsAlias(GlobalDecl(D, Dtor_Base),
                                   GlobalDecl(BaseD, Dtor_Base),
                                   false);
@


1.2
log
@Add SVN revision
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_CodeGen_CGCXX_cpp,v 1.1 2014/04/18 09:30:48 brad Exp $
@


1.1
log
@Update to LLVM 3.5 (trunk) snapshot just before switching to an unconditional
C++11 codebase.

This brings in a number of improvements over 3.4 including..
X86 assembler with 16-bit support
Much improved SPARC backend
stack protector strong support

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
@

