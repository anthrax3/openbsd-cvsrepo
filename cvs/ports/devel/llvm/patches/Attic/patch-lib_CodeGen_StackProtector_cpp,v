head	1.8;
access;
symbols
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2016.10.07.08.55.30;	author ajacoutot;	state dead;
branches;
next	1.7;
commitid	9CZYQ6vy0MJoEWYH;

1.7
date	2016.09.13.07.47.41;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	UZfknjQxTAHiVt2I;

1.6
date	2016.03.05.15.31.40;	author pascal;	state dead;
branches;
next	1.5;
commitid	Hqi865xYWk2i2UMI;

1.5
date	2014.05.17.11.41.15;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2014.04.18.09.30.48;	author brad;	state dead;
branches;
next	1.3;

1.3
date	2013.06.21.22.09.12;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.23.20.49.29;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.04.14.47.52;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to LLVM 3.9.0.
Been through bulks on amd64 / i386 by sthen@@ and naddy@@ respectively.

from Brad (maintainer)
@
text
@$OpenBSD: patch-lib_CodeGen_StackProtector_cpp,v 1.7 2016/09/13 07:47:41 ajacoutot Exp $

[SSP] Do not set __guard_local to hidden for OpenBSD SSP

__guard_local is defined as long on OpenBSD. If the source file contains
a definition of __guard_local, it mismatches with the int8 pointer type
used in LLVM. In that case, Module::getOrInsertGlobal() returns a
cast operation instead of a GlobalVariable. Trying to set the
visibility on the cast operation leads to random segfaults (seen when
compiling the OpenBSD kernel, which also runs with stack protection).

In the kernel, the hidden attribute does not matter. For userspace code,
__guard_local is defined as hidden in the startup code. If a program
re-defines __guard_local, the definition from the startup code will
either win or the linker complains about multiple definitions
(depending on whether the re-defined __guard_local is placed in the
common segment or not).

It also matches what gcc on OpenBSD does.

--- lib/CodeGen/StackProtector.cpp.orig	Mon Sep 12 10:54:50 2016
+++ lib/CodeGen/StackProtector.cpp	Mon Sep 12 10:55:34 2016
@@@@ -341,11 +341,9 @@@@ static bool CreatePrologue(Function *F, Module *M, Ret
     StackGuardVar =
         ConstantExpr::getIntToPtr(OffsetVal, PointerType::get(PtrTy,
                                                               AddressSpace));
-  } else if (TT.isOSOpenBSD()) {
+  } else if (TT.isOSOpenBSD())
     StackGuardVar = M->getOrInsertGlobal("__guard_local", PtrTy);
-    cast<GlobalValue>(StackGuardVar)
-        ->setVisibility(GlobalValue::HiddenVisibility);
-  } else {
+  else {
     SupportsSelectionDAGSP = true;
     StackGuardVar = M->getOrInsertGlobal("__stack_chk_guard", PtrTy);
   }
@


1.7
log
@- Remove an obsolete patch that was for the GNU make build infrastructure
- Merge in the stack protector and EH frame header patches

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_CodeGen_StackProtector_cpp,v 1.5 2014/05/17 11:41:15 brad Exp $
d3 1
a3 2
r206486
Make the StackProtector pass respect ssp-buffer-size.
d5 32
a36 20
--- lib/CodeGen/StackProtector.cpp.orig	Fri Apr 18 17:19:15 2014
+++ lib/CodeGen/StackProtector.cpp	Fri Apr 18 17:20:13 2014
@@@@ -86,14 +86,14 @@@@ bool StackProtector::runOnFunction(Function &Fn) {
   DT = DTWP ? &DTWP->getDomTree() : 0;
   TLI = TM->getTargetLowering();
 
-  if (!RequiresStackProtector())
-    return false;
-
   Attribute Attr = Fn.getAttributes().getAttribute(
       AttributeSet::FunctionIndex, "stack-protector-buffer-size");
   if (Attr.isStringAttribute() &&
       Attr.getValueAsString().getAsInteger(10, SSPBufferSize))
       return false; // Invalid integer string
+
+  if (!RequiresStackProtector())
+    return false;
 
   ++NumFunProtected;
   return InsertStackProtectors();
@


1.5
log
@- Switch to stack protector strong by default
- Fix the --param ssp-buffer-size= support

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to LLVM 3.5 (trunk) snapshot just before switching to an unconditional
C++11 codebase.

This brings in a number of improvements over 3.4 including..
X86 assembler with 16-bit support
Much improved SPARC backend
stack protector strong support

ok sthen@@
@
text
@d1 10
a10 19
$OpenBSD: patch-lib_CodeGen_StackProtector_cpp,v 1.3 2013/06/21 22:09:12 brad Exp $
--- lib/CodeGen/StackProtector.cpp.orig	Mon Mar  4 20:00:45 2013
+++ lib/CodeGen/StackProtector.cpp	Wed Jun  5 15:41:29 2013
@@@@ -25,6 +25,8 @@@@
 #include "llvm/IR/DataLayout.h"
 #include "llvm/IR/DerivedTypes.h"
 #include "llvm/IR/Function.h"
+#include "llvm/IR/GlobalValue.h"
+#include "llvm/IR/GlobalVariable.h"
 #include "llvm/IR/Instructions.h"
 #include "llvm/IR/Intrinsics.h"
 #include "llvm/IR/Module.h"
@@@@ -41,7 +43,8 @@@@ namespace {
   class StackProtector : public FunctionPass {
     /// TLI - Keep a pointer of a TargetLowering to consult for determining
     /// target type sizes.
-    const TargetLoweringBase *TLI;
+    const TargetLoweringBase *const TLI;
+    const Triple Trip;
d12 2
a13 17
     Function *F;
     Module *M;
@@@@ -84,7 +87,8 @@@@ namespace {
       initializeStackProtectorPass(*PassRegistry::getPassRegistry());
     }
     StackProtector(const TargetLoweringBase *tli)
-      : FunctionPass(ID), TLI(tli) {
+        : FunctionPass(ID), TLI(tli),
+          Trip(tli->getTargetMachine().getTargetTriple()) {
       initializeStackProtectorPass(*PassRegistry::getPassRegistry());
     }
 
@@@@ -128,8 +132,6 @@@@ bool StackProtector::ContainsProtectableArray(Type *Ty
       return true;
     const TargetMachine &TM = TLI->getTargetMachine();
     if (!AT->getElementType()->isIntegerTy(8)) {
-      Triple Trip(TM.getTargetTriple());
d15 8
a22 4
       // If we're on a non-Darwin platform or we're inside of a structure, don't
       // add stack protectors unless the array is a character array.
       if (InStruct || !Trip.isOSDarwin())
@@@@ -283,6 +285,10 @@@@ bool StackProtector::InsertStackProtectors() {
d24 2
a25 48
         StackGuardVar = ConstantExpr::getIntToPtr(OffsetVal,
                                       PointerType::get(PtrTy, AddressSpace));
+      } else if (Trip.getOS() == llvm::Triple::OpenBSD) {
+        StackGuardVar = M->getOrInsertGlobal("__guard_local", PtrTy);
+        cast<GlobalValue>(StackGuardVar)
+            ->setVisibility(GlobalValue::HiddenVisibility);
       } else {
         StackGuardVar = M->getOrInsertGlobal("__stack_chk_guard", PtrTy);
       }
@@@@ -359,12 +365,31 @@@@ bool StackProtector::InsertStackProtectors() {
 /// CreateFailBB - Create a basic block to jump to when the stack protector
 /// check fails.
 BasicBlock *StackProtector::CreateFailBB() {
-  BasicBlock *FailBB = BasicBlock::Create(F->getContext(),
-                                          "CallStackCheckFailBlk", F);
-  Constant *StackChkFail =
-    M->getOrInsertFunction("__stack_chk_fail",
-                           Type::getVoidTy(F->getContext()), NULL);
-  CallInst::Create(StackChkFail, "", FailBB);
-  new UnreachableInst(F->getContext(), FailBB);
+  LLVMContext &Context = F->getContext();
+  BasicBlock *FailBB = BasicBlock::Create(Context, "CallStackCheckFailBlk", F);
+  if (Trip.getOS() == llvm::Triple::OpenBSD) {
+    Constant *StackChkFail = M->getOrInsertFunction(
+        "__stack_smash_handler", Type::getVoidTy(Context),
+        Type::getInt8PtrTy(Context), NULL);
+
+    Constant *NameStr = ConstantDataArray::getString(Context, F->getName());
+    Constant *FuncName =
+        new GlobalVariable(*M, NameStr->getType(), true,
+                           GlobalVariable::PrivateLinkage, NameStr, "SSH");
+
+    SmallVector<Constant *, 2> IdxList;
+    IdxList.push_back(ConstantInt::get(Type::getInt8Ty(Context), 0));
+    IdxList.push_back(ConstantInt::get(Type::getInt8Ty(Context), 0));
+
+    SmallVector<Value *, 1> Args;
+    Args.push_back(ConstantExpr::getGetElementPtr(FuncName, IdxList));
+
+    CallInst::Create(StackChkFail, Args, "", FailBB);
+  } else {
+    Constant *StackChkFail = M->getOrInsertFunction(
+        "__stack_chk_fail", Type::getVoidTy(Context), NULL);
+    CallInst::Create(StackChkFail, "", FailBB);
+  }
+  new UnreachableInst(Context, FailBB);
   return FailBB;
 }
@


1.3
log
@Update to LLVM 3.3.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_CodeGen_StackProtector_cpp,v 1.2 2012/12/23 20:49:29 brad Exp $
@


1.2
log
@Update to LLVM 3.2 and switces to __guard_local for stack protector support.

Initial work from landry@@ with some fixes and further tweaking from pascal@@ and brad@@

ok sthen@@ landry@@
@
text
@d1 42
a42 4
$OpenBSD$
--- lib/CodeGen/StackProtector.cpp.orig	Tue Oct  9 09:45:08 2012
+++ lib/CodeGen/StackProtector.cpp	Mon Dec 10 21:36:28 2012
@@@@ -196,6 +196,9 @@@@ bool StackProtector::InsertStackProtectors() {
d46 1
a46 2
+      } else if (Triple(TLI->getTargetMachine().getTargetTriple()).getOS() ==
+        llvm::Triple::OpenBSD) {
d48 2
d53 1
a53 1
@@@@ -272,12 +275,28 @@@@ bool StackProtector::InsertStackProtectors() {
d58 1
a58 3
+  LLVMContext &Context = F->getContext();
+  BasicBlock *FailBB = BasicBlock::Create(Context,
                                           "CallStackCheckFailBlk", F);
d64 20
a83 13
+  if (Triple(TLI->getTargetMachine().getTargetTriple()).getOS() ==
+      llvm::Triple::OpenBSD) {
+    Constant *StackChkFail =
+      M->getOrInsertFunction("__stack_smash_handler",
+                            Type::getVoidTy(Context), Type::getInt8PtrTy(Context), NULL);
+    Constant *G = new GlobalVariable(*M,
+                        ArrayType::get(Type::getInt8Ty(Context),
+                        F->getName().size() + 1),
+                        true, GlobalVariable::PrivateLinkage,
+                        ConstantDataArray::getString(Context,
+                                F->getName(), true),
+                        "SSH");
+    CallInst::Create(StackChkFail, G, "", FailBB);
d85 2
a86 3
+    Constant *StackChkFail =
+      M->getOrInsertFunction("__stack_chk_fail",
+                             Type::getVoidTy(Context), NULL);
@


1.1
log
@Make stack smashing protection work with our native libc routines, and enable
it by default.

ok jsg@@
@
text
@d2 4
a5 3
--- lib/CodeGen/StackProtector.cpp.orig	Wed Nov 23 08:13:56 2011
+++ lib/CodeGen/StackProtector.cpp	Sun Jul 22 19:55:03 2012
@@@@ -169,7 +169,7 @@@@ bool StackProtector::InsertStackProtectors() {
d8 3
d12 1
a12 2
-        StackGuardVar = M->getOrInsertGlobal("__stack_chk_guard", PtrTy); 
+        StackGuardVar = M->getOrInsertGlobal("__guard", PtrTy); 
d14 7
a20 4
 
       BasicBlock &Entry = F->getEntryBlock();
@@@@ -247,9 +247,16 @@@@ BasicBlock *StackProtector::CreateFailBB() {
   BasicBlock *FailBB = BasicBlock::Create(F->getContext(),
d22 1
a22 1
   Constant *StackChkFail =
d24 1
a24 2
+    M->getOrInsertFunction("__stack_smash_handler",
                            Type::getVoidTy(F->getContext()), NULL);
d26 21
a46 9
+  Constant *G = new GlobalVariable(*M,
+  			ArrayType::get(Type::getInt1Ty(F->getContext()),
+			F->getName().size() + 1),
+  			true, GlobalVariable::PrivateLinkage, 
+  			ConstantDataArray::getString(F->getContext(),
+				F->getName(), true),
+  			"SSH", false, 0);
+  CallInst::Create(StackChkFail, G, "", FailBB);
   new UnreachableInst(F->getContext(), FailBB);
@

