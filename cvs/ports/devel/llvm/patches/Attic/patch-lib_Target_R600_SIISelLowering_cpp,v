head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.04.18.09.30.48;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2013.08.06.23.33.44;	author jsg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to LLVM 3.5 (trunk) snapshot just before switching to an unconditional
C++11 codebase.

This brings in a number of improvements over 3.4 including..
X86 assembler with 16-bit support
Much improved SPARC backend
stack protector strong support

ok sthen@@
@
text
@$OpenBSD: patch-lib_Target_R600_SIISelLowering_cpp,v 1.1 2013/08/06 23:33:44 jsg Exp $

llvm svn rev 182446

--- lib/Target/R600/SIISelLowering.cpp.orig	Tue May  7 09:02:15 2013
+++ lib/Target/R600/SIISelLowering.cpp	Sat Jul 20 00:30:00 2013
@@@@ -338,7 +338,7 @@@@ SDValue SITargetLowering::LowerBRCOND(SDValue BRCOND,
   return Chain;
 }
 
-#define RSRC_DATA_FORMAT 0xf00000000000
+const uint64_t RSRC_DATA_FORMAT = 0xf00000000000LL;
 
 SDValue SITargetLowering::LowerSTORE(SDValue Op, SelectionDAG &DAG) const {
   StoreSDNode *StoreNode = cast<StoreSDNode>(Op);
@@@@ -351,9 +351,9 @@@@ SDValue SITargetLowering::LowerSTORE(SDValue Op, Selec
     return SDValue();
   }
 
-  SDValue SrcSrc = DAG.getNode(ISD::BUILD_PAIR, DL, MVT::i128,
-                               DAG.getConstant(0, MVT::i64),
-			       DAG.getConstant(RSRC_DATA_FORMAT, MVT::i64));
+  SDValue Zero = DAG.getConstant(0, MVT::i64);
+  SDValue Format = DAG.getConstant(RSRC_DATA_FORMAT, MVT::i64);
+  SDValue SrcSrc = DAG.getNode(ISD::BUILD_PAIR, DL, MVT::i128, Zero, Format);
 
   SDValue Ops[2];
   Ops[0] = DAG.getNode(AMDGPUISD::BUFFER_STORE, DL, MVT::Other, Chain,
@


1.1
log
@enable the R600 target
ok sthen@@ brad@@
@
text
@d1 1
a1 1
$OpenBSD$
@

