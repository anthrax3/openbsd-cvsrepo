head	1.12;
access;
symbols
	OPENBSD_6_1:1.10.0.2
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.12
date	2017.09.01.06.40.28;	author ajacoutot;	state dead;
branches;
next	1.11;
commitid	Z3UHKMH3qAZXhBfH;

1.11
date	2017.07.14.17.14.03;	author sthen;	state Exp;
branches;
next	1.10;
commitid	2I37ZfTOrmp63Kb2;

1.10
date	2017.02.10.09.37.43;	author ajacoutot;	state Exp;
branches;
next	1.9;
commitid	fevyFq3hanzfmR8U;

1.9
date	2016.10.07.08.55.30;	author ajacoutot;	state Exp;
branches;
next	1.8;
commitid	9CZYQ6vy0MJoEWYH;

1.8
date	2016.09.24.12.35.38;	author ajacoutot;	state Exp;
branches;
next	1.7;
commitid	P8uBvX7hMStbSNIu;

1.7
date	2016.05.15.07.07.52;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	LWasRKnDGo7JO66q;

1.6
date	2016.05.14.20.36.36;	author ajacoutot;	state Exp;
branches;
next	1.5;
commitid	Ww8D7gwHYMZAZd2q;

1.5
date	2016.03.05.15.31.41;	author pascal;	state Exp;
branches;
next	1.4;
commitid	Hqi865xYWk2i2UMI;

1.4
date	2015.04.09.22.25.02;	author sthen;	state Exp;
branches;
next	1.3;
commitid	By0YomZj9fqvzzim;

1.3
date	2015.02.11.00.29.05;	author brad;	state Exp;
branches;
next	1.2;
commitid	G7LA6Os0pseQPeE5;

1.2
date	2009.08.09.11.26.03;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2009.06.25.15.25.13;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to llvm-5.0.0rc4.

Tested on amd64, i386, sparc64
from Brad (maintainer)
@
text
@$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.11 2017/07/14 17:14:03 sthen Exp $

Use the integrated assembler by default on Sparc and Mips64.

Index: tools/clang/lib/Driver/ToolChains.cpp
--- tools/clang/lib/Driver/ToolChains.cpp.orig
+++ tools/clang/lib/Driver/ToolChains.cpp
@@@@ -2919,15 +2919,20 @@@@ bool Generic_GCC::IsIntegratedAssemblerDefault() const
   case llvm::Triple::ppc64:
   case llvm::Triple::ppc64le:
   case llvm::Triple::systemz:
+  case llvm::Triple::sparc:
+  case llvm::Triple::sparcel:
+  case llvm::Triple::sparcv9:
   case llvm::Triple::mips:
   case llvm::Triple::mipsel:
     return true;
   case llvm::Triple::mips64:
   case llvm::Triple::mips64el:
-    // Enabled for Debian mips64/mips64el only. Other targets are unable to
+    // Enabled for Debian and OpenBSD mips64/mips64el only. Other targets are unable to
     // distinguish N32 from N64.
     if (getTriple().getEnvironment() == llvm::Triple::GNUABI64)
       return true;
+    if (getTriple().getOS() == llvm::Triple::OpenBSD)
+      return true;
     return false;
   default:
     return false;
@@@@ -3609,8 +3614,7 @@@@ void Haiku::addLibStdCxxIncludePaths(const llvm::opt::
 OpenBSD::OpenBSD(const Driver &D, const llvm::Triple &Triple,
                  const ArgList &Args)
     : Generic_ELF(D, Triple, Args) {
-  getFilePaths().push_back(getDriver().Dir + "/../lib");
-  getFilePaths().push_back("/usr/lib");
+  getFilePaths().push_back(getDriver().SysRoot + "/usr/lib");
 }
 
 Tool *OpenBSD::buildAssembler() const {
@@@@ -3618,6 +3622,63 @@@@ Tool *OpenBSD::buildAssembler() const {
 }
 
 Tool *OpenBSD::buildLinker() const { return new tools::openbsd::Linker(*this); }
+
+ToolChain::CXXStdlibType OpenBSD::GetCXXStdlibType(const ArgList &Args) const {
+  if (Arg *A = Args.getLastArg(options::OPT_stdlib_EQ)) {
+    StringRef Value = A->getValue();
+    if (Value == "libstdc++")
+      return ToolChain::CST_Libstdcxx;
+    if (Value == "libc++")
+      return ToolChain::CST_Libcxx;
+
+    getDriver().Diag(diag::err_drv_invalid_stdlib_name) << A->getAsString(Args);
+  }
+
+  switch (getArch()) {
+  case llvm::Triple::aarch64:
+    return ToolChain::CST_Libcxx;
+    break;
+  default:
+    return ToolChain::CST_Libstdcxx;
+    break;
+  }
+}
+
+void OpenBSD::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                          ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx:
+    addSystemInclude(DriverArgs, CC1Args,
+                     getDriver().SysRoot + "/usr/include/c++/v1");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    addSystemInclude(DriverArgs, CC1Args,
+                     getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}");
+    addSystemInclude(DriverArgs, CC1Args,
+                     getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}/${GCC_CONFIG}");
+    addSystemInclude(DriverArgs, CC1Args,
+                     getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}/backward");
+    break;
+  }
+}
+
+void OpenBSD::AddCXXStdlibLibArgs(const ArgList &Args,
+                                 ArgStringList &CmdArgs) const {
+ switch (GetCXXStdlibType(Args)) {
+  case ToolChain::CST_Libcxx:
+    CmdArgs.push_back("-lc++");
+    CmdArgs.push_back("-lc++abi");
+    CmdArgs.push_back("-lpthread");
+    break;
+  case ToolChain::CST_Libstdcxx:
+    CmdArgs.push_back("-lestdc++");
+    break;
+  }
+}
 
 /// Bitrig - Bitrig tool chain which can call as(1) and ld(1) directly.
 
@


1.11
log
@update to LLVM-4.0.1, from Brad (maintainer)
been through i386 and amd64 bulks
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.10 2017/02/10 09:37:43 ajacoutot Exp $
@


1.10
log
@Update to llvm-4.0.0rc2.
- survived a bulk on i386 and amd64

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.9 2016/10/07 08:55:30 ajacoutot Exp $
d5 3
a7 2
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Wed Jan 25 19:51:14 2017
+++ tools/clang/lib/Driver/ToolChains.cpp	Wed Jan 25 20:44:55 2017
d40 1
a40 1
@@@@ -3618,6 +3622,50 @@@@ Tool *OpenBSD::buildAssembler() const {
d55 9
a63 1
+  return ToolChain::CST_Libstdcxx;
d72 14
a85 9
+  /* XXX handle libc++ includes */
+
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}");
+
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}/${GCC_CONFIG}");
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "${LOCALBASE}/include/c++/${GCC_VER}/backward");
@


1.9
log
@Update to LLVM 3.9.0.
Been through bulks on amd64 / i386 by sthen@@ and naddy@@ respectively.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.8 2016/09/24 12:35:38 ajacoutot Exp $
d5 5
a9 3
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Thu Aug 18 13:56:48 2016
+++ tools/clang/lib/Driver/ToolChains.cpp	Sat Sep  3 17:05:50 2016
@@@@ -2702,6 +2702,11 @@@@ bool Generic_GCC::IsIntegratedAssemblerDefault() const
a10 4
   case llvm::Triple::mips:
   case llvm::Triple::mipsel:
+  case llvm::Triple::mips64:
+  case llvm::Triple::mips64el:
d14 2
d17 10
d29 11
a39 1
@@@@ -3355,6 +3360,50 @@@@ Tool *OpenBSD::buildAssembler() const {
@


1.8
log
@Adjust default CPU for OpenBSD/arm and set proper ABI.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.7 2016/05/15 07:07:52 ajacoutot Exp $
d5 3
a7 5
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Tue Feb 16 14:56:48 2016
+++ tools/clang/lib/Driver/ToolChains.cpp	Sun Sep 18 19:00:06 2016
@@@@ -2378,6 +2378,10 @@@@ bool Generic_GCC::IsIntegratedAssemblerDefault() const
   case llvm::Triple::ppc64:
   case llvm::Triple::ppc64le:
d9 4
d14 1
a15 2
+  case llvm::Triple::mips64:
+  case llvm::Triple::mips64el:
d19 1
a19 1
@@@@ -2985,6 +2989,50 @@@@ Tool *OpenBSD::buildAssembler() const {
@


1.7
log
@Enable the integrated assembler on Mips64 and Sparc.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.6 2016/05/14 20:36:36 ajacoutot Exp $
d6 1
a6 1
+++ tools/clang/lib/Driver/ToolChains.cpp	Sat May 14 20:34:32 2016
@


1.6
log
@Update to llvm-3.8.0.

from Brad (maintainer)
@
text
@d1 4
a4 1
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.5 2016/03/05 15:31:41 pascal Exp $
d6 14
a19 2
+++ tools/clang/lib/Driver/ToolChains.cpp	Fri Mar 25 21:50:14 2016
@@@@ -2986,6 +2986,50 @@@@ Tool *OpenBSD::buildAssembler() const {
d22 1
a22 1
 
d66 1
a66 1
+
a68 1
 Bitrig::Bitrig(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
@


1.5
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@d1 4
a4 4
$OpenBSD$
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Tue Jul 14 01:27:56 2015
+++ tools/clang/lib/Driver/ToolChains.cpp	Sat Sep 12 14:00:16 2015
@@@@ -2538,6 +2538,50 @@@@ Tool *OpenBSD::buildAssembler() const {
@


1.4
log
@Backport commit from upstream Clang/LLVM, from Brad (maintainer).

r211785
Implement the -fuse-ld= option.

This commit implements the -fuse-ld= option, so that the user
can specify -fuse-ld=bfd to use ld.bfd.
@
text
@d1 4
a4 25
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.3 2015/02/11 00:29:05 brad Exp $

r225958
Use the integrated assembler by default on 32-bit PowerPC and SPARC.

r211785
Implement the -fuse-ld= option.

This commit implements the -fuse-ld= option, so that the user
can specify -fuse-ld=bfd to use ld.bfd.

--- tools/clang/lib/Driver/ToolChains.cpp.orig	Sun Mar  2 22:03:41 2014
+++ tools/clang/lib/Driver/ToolChains.cpp	Thu Feb 26 07:06:45 2015
@@@@ -2035,7 +2035,12 @@@@ bool Generic_GCC::IsIntegratedAssemblerDefault() const
          getTriple().getArch() == llvm::Triple::aarch64 ||
          getTriple().getArch() == llvm::Triple::aarch64_be ||
          getTriple().getArch() == llvm::Triple::arm ||
-         getTriple().getArch() == llvm::Triple::thumb;
+         getTriple().getArch() == llvm::Triple::thumb ||
+         getTriple().getArch() == llvm::Triple::ppc ||
+         getTriple().getArch() == llvm::Triple::ppc64 ||
+         getTriple().getArch() == llvm::Triple::ppc64le ||
+         getTriple().getArch() == llvm::Triple::sparc ||
+         getTriple().getArch() == llvm::Triple::sparcv9;
 }
d6 1
a6 4
 void Generic_ELF::addClangTargetOptions(const ArgList &DriverArgs,
@@@@ -2850,7 +2855,7 @@@@ Linux::Linux(const Driver &D, const llvm::Triple &Trip
   PPaths.push_back(Twine(GCCInstallation.getParentLibPath() + "/../" +
                          GCCInstallation.getTriple().str() + "/bin").str());
d8 45
a52 4
-  Linker = GetProgramPath("ld");
+  Linker = GetLinkerPath();
 
   Distro Distro = DetectDistro(Arch);
d54 1
@


1.3
log
@r228507
Avoid integer overflows around realloc calls resulting in potential
heap. Problem identified by Guido Vranken.

r225819
Use the integrated assembler as default on PowerPC
r225957
Use the integrated assembler by default on SPARC.
r225958
Use the integrated assembler by default on 32-bit PowerPC and SPARC.
@
text
@d1 1
a1 1
$OpenBSD$
d6 8
a13 2
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Mon Feb  2 11:00:57 2015
+++ tools/clang/lib/Driver/ToolChains.cpp	Mon Feb  2 11:03:43 2015
d28 9
@


1.2
log
@Update to a newer snapshot, requested by jsg@@. Fixes building autoconf
projects, upstream rolled in the OpenBSD backend with proper target-specific
definitions etc.
@
text
@d1 18
a18 5
$OpenBSD: patch-tools_clang_lib_Driver_ToolChains_cpp,v 1.1 2009/06/25 15:25:13 sthen Exp $
--- tools/clang/lib/Driver/ToolChains.cpp.orig	Tue Jun 23 13:03:05 2009
+++ tools/clang/lib/Driver/ToolChains.cpp	Tue Jun 23 13:01:50 2009
@@@@ -384,6 +384,36 @@@@ DerivedArgList *Generic_GCC::TranslateArgs(InputArgLis
   return new DerivedArgList(Args, true);
d21 1
a21 33
+/// OpenBSD - OpenBSD tool chain which can call as(1) and ld(1) directly.
+
+OpenBSD::OpenBSD(const HostInfo &Host, const llvm::Triple& Triple)
+  : Generic_GCC(Host, Triple) {
+  getFilePaths().push_back(getHost().getDriver().Dir + "/../lib");
+  getFilePaths().push_back("/usr/lib");
+}
+
+Tool &OpenBSD::SelectTool(const Compilation &C, const JobAction &JA) const {
+  Action::ActionClass Key;
+  if (getHost().getDriver().ShouldUseClangCompiler(C, JA, getArchName()))
+    Key = Action::AnalyzeJobClass;
+  else
+    Key = JA.getKind();
+
+  Tool *&T = Tools[Key];
+  if (!T) {
+    switch (Key) {
+    case Action::AssembleJobClass:
+      T = new tools::openbsd::Assemble(*this); break;
+    case Action::LinkJobClass:
+      T = new tools::openbsd::Link(*this); break;
+    default:
+      T = &Generic_GCC::SelectTool(C, JA);
+    }
+  }
+
+  return *T;
+}
+
 /// FreeBSD - FreeBSD tool chain which can call as(1) and ld(1) directly.
 
 FreeBSD::FreeBSD(const HostInfo &Host, const llvm::Triple& Triple, bool Lib32)
@


1.1
log
@- add OpenBSD config; from jsg@@.
- install a symlink as a workaround to a bug identifying the path to clang-cc.

commit approved by naddy.
@
text
@d1 1
a1 1
$OpenBSD$
@

