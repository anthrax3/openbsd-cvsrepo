head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.02.10.09.37.43;	author ajacoutot;	state dead;
branches;
next	1.1;
commitid	fevyFq3hanzfmR8U;

1.1
date	2016.10.09.06.47.10;	author ajacoutot;	state Exp;
branches;
next	;
commitid	Q9cLLgjjoUbhockx;


desc
@@


1.2
log
@Update to llvm-4.0.0rc2.
- survived a bulk on i386 and amd64

from Brad (maintainer)
@
text
@$OpenBSD: patch-tools_lld_ELF_Writer_h,v 1.1 2016/10/09 06:47:10 ajacoutot Exp $

- [ELF] Minimal PHDRS parser and section to segment assignment support
- Fix build with gcc 6.

--- tools/lld/ELF/Writer.h.orig	Sat Oct  8 20:48:08 2016
+++ tools/lld/ELF/Writer.h	Sat Oct  8 21:04:59 2016
@@@@ -10,6 +10,7 @@@@
 #ifndef LLD_ELF_WRITER_H
 #define LLD_ELF_WRITER_H
 
+#include <cstdint>
 #include <memory>
 
 namespace llvm {
@@@@ -18,13 +19,30 @@@@ namespace llvm {
 
 namespace lld {
 namespace elf {
+template <class ELFT> class OutputSectionBase;
 template <class ELFT> class InputSectionBase;
 template <class ELFT> class ObjectFile;
 template <class ELFT> class SymbolTable;
-
 template <class ELFT> void writeResult(SymbolTable<ELFT> *Symtab);
-
 template <class ELFT> void markLive();
+template <class ELFT> bool needsInterpSection();
+template <class ELFT> bool isOutputDynamic();
+template <class ELFT> bool isRelroSection(OutputSectionBase<ELFT> *Sec);
+template <class ELFT> bool needsPtLoad(OutputSectionBase<ELFT> *Sec);
+uint32_t toPhdrFlags(uint64_t Flags);
+
+// This describes a program header entry.
+// Each contains type, access flags and range of output sections that will be
+// placed in it.
+template<class ELFT>
+struct PhdrEntry {
+  PhdrEntry(unsigned Type, unsigned Flags);
+  void AddSec(OutputSectionBase<ELFT> *Sec);
+
+  typename ELFT::Phdr H = {};
+  OutputSectionBase<ELFT> *First = nullptr;
+  OutputSectionBase<ELFT> *Last = nullptr;
+};
 
 template <class ELFT>
 llvm::StringRef getOutputSectionName(InputSectionBase<ELFT> *S);
@


1.1
log
@Enable building lld.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@

