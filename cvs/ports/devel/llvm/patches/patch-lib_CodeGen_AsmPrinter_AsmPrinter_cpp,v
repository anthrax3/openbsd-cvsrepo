head	1.4;
access;
symbols
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.09.01.06.40.28;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	Z3UHKMH3qAZXhBfH;

1.3
date	2017.08.10.10.29.01;	author sthen;	state Exp;
branches;
next	1.2;
commitid	fhvb7WxwEpVP91Wh;

1.2
date	2016.03.05.15.31.40;	author pascal;	state dead;
branches;
next	1.1;
commitid	Hqi865xYWk2i2UMI;

1.1
date	2014.09.18.20.19.27;	author brad;	state Exp;
branches;
next	;
commitid	YondZRNz2SpahE8s;


desc
@@


1.4
log
@Update to llvm-5.0.0rc4.

Tested on amd64, i386, sparc64
from Brad (maintainer)
@
text
@$OpenBSD: patch-lib_CodeGen_AsmPrinter_AsmPrinter_cpp,v 1.3 2017/08/10 10:29:01 sthen Exp $

Use int3 trap padding between functions instead of trapsleds with a leading jump.

Index: lib/CodeGen/AsmPrinter/AsmPrinter.cpp
--- lib/CodeGen/AsmPrinter/AsmPrinter.cpp.orig
+++ lib/CodeGen/AsmPrinter/AsmPrinter.cpp
@@@@ -644,7 +644,7 @@@@ void AsmPrinter::EmitFunctionHeader() {
 
   EmitLinkage(F, CurrentFnSym);
   if (MAI->hasFunctionAlignment())
-    EmitAlignment(MF->getAlignment(), F);
+    EmitTrapAlignment(MF->getAlignment(), F);
 
   if (MAI->hasDotTypeDotSizeDirective())
     OutStreamer->EmitSymbolAttribute(CurrentFnSym, MCSA_ELF_TypeFunction);
@@@@ -1880,6 +1880,31 @@@@ void AsmPrinter::EmitAlignment(unsigned NumBits, const
     OutStreamer->EmitCodeAlignment(1u << NumBits);
   else
     OutStreamer->EmitValueToAlignment(1u << NumBits);
+}
+
+//===----------------------------------------------------------------------===//
+/// EmitTrapAlignment - Emit an alignment directive to the specified power of
+/// two boundary, but call EmitTrapToAlignment to fill with Trap instructions
+/// if the Target implements EmitTrapToAlignment.
+void AsmPrinter::EmitTrapAlignment(unsigned NumBits, const GlobalObject *GV) const {
+  if (GV)
+    NumBits = getGVAlignmentLog2(GV, GV->getParent()->getDataLayout(), NumBits);
+
+  if (NumBits == 0) return;   // 1-byte aligned: no need to emit alignment.
+
+  assert(NumBits <
+             static_cast<unsigned>(std::numeric_limits<unsigned>::digits) &&
+         "undefined behavior");
+  EmitTrapToAlignment(NumBits);
+}
+
+//===----------------------------------------------------------------------===//
+/// EmitTrapToAlignment - Emit an alignment directive to the specified power
+/// of two boundary. This default implementation calls EmitCodeAlignment on
+/// the OutStreamer, but can be overridden by Target implementations.
+void AsmPrinter::EmitTrapToAlignment(unsigned NumBits) const {
+  if (NumBits == 0) return;
+  OutStreamer->EmitCodeAlignment(1u << NumBits);
 }
 
 //===----------------------------------------------------------------------===//
@


1.3
log
@Pull across more parts from base, from Brad:

- Use int3 trap padding between functions instead of trapsleds with a leading jump
- Declare lgamma library builtins as never being const
- Enable the kprintf format attribute
@
text
@d1 1
a1 1
$OpenBSD$
d8 1
a8 1
@@@@ -590,7 +590,7 @@@@ void AsmPrinter::EmitFunctionHeader() {
d17 1
a17 1
@@@@ -1758,6 +1758,31 @@@@ void AsmPrinter::EmitAlignment(unsigned NumBits, const
@


1.2
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_CodeGen_AsmPrinter_AsmPrinter_cpp,v 1.1 2014/09/18 20:19:27 brad Exp $
d3 1
a3 2
r217801
Fix a lot of confusion around inserting nops on empty functions.
d5 4
a8 18
On MachO, and MachO only, we cannot have a truly empty function since that
breaks the linker logic for atomizing the section.

When we are emitting a frame pointer, the presence of an unreachable will
create a cfi instruction pointing past the last instruction. This is perfectly
fine. The FDE information encodes the pc range it applies to. If some tool
cannot handle this, we should explicitly say which bug we are working around
and only work around it when it is actually relevant (not for ELF for example).

Given the unreachable we could omit the .cfi_def_cfa_register, but then
again, we could also omit the entire function prologue if we wanted to.

r217899
Add back a fallback case for targets that do not or cannot implement getNoopForMachoTarget().

--- lib/CodeGen/AsmPrinter/AsmPrinter.cpp.orig	Sun Mar  2 21:57:42 2014
+++ lib/CodeGen/AsmPrinter/AsmPrinter.cpp	Tue Sep 16 22:33:35 2014
@@@@ -739,14 +739,12 @@@@ void AsmPrinter::EmitFunctionBody() {
d10 4
a13 10
   // Print out code for the function.
   bool HasAnyRealCode = false;
-  const MachineInstr *LastMI = 0;
   for (MachineFunction::const_iterator I = MF->begin(), E = MF->end();
        I != E; ++I) {
     // Print a label for the basic block.
     EmitBasicBlockStart(I);
     for (MachineBasicBlock::const_iterator II = I->begin(), IE = I->end();
          II != IE; ++II) {
-      LastMI = II;
d15 23
a37 23
       // Print the assembly for the instruction.
       if (!II->isLabel() && !II->isImplicitDef() && !II->isKill() &&
@@@@ -807,24 +805,18 @@@@ void AsmPrinter::EmitFunctionBody() {
     }
   }
 
-  // If the last instruction was a prolog label, then we have a situation where
-  // we emitted a prolog but no function body. This results in the ending prolog
-  // label equaling the end of function label and an invalid "row" in the
-  // FDE. We need to emit a noop in this situation so that the FDE's rows are
-  // valid.
-  bool RequiresNoop = LastMI && LastMI->isPrologLabel();
-
   // If the function is empty and the object file uses .subsections_via_symbols,
   // then we need to emit *something* to the function body to prevent the
   // labels from collapsing together.  Just emit a noop.
-  if ((MAI->hasSubsectionsViaSymbols() && !HasAnyRealCode) || RequiresNoop) {
+  if ((MAI->hasSubsectionsViaSymbols() && !HasAnyRealCode)) {
     MCInst Noop;
     TM.getInstrInfo()->getNoopForMachoTarget(Noop);
-    if (Noop.getOpcode()) {
-      OutStreamer.AddComment("avoids zero-length function");
+    OutStreamer.AddComment("avoids zero-length function");
d39 8
a46 7
+    // Targets can opt-out of emitting the noop here by leaving the opcode
+    // unspecified.
+    if (Noop.getOpcode())
       OutStreamer.EmitInstruction(Noop, getSubtargetInfo());
-    } else  // Target not mc-ized yet.
-      OutStreamer.EmitRawText(StringRef("\tnop\n"));
   }
d48 1
a48 1
   const Function *F = MF->getFunction();
@


1.1
log
@r208965
Sparc: disable printing on longer "brX,pt" aliases

r208966
Sparc: disable printing of jmp/call aliases (C++ does it)

r217801
Fix a lot of confusion around inserting nops on empty functions.
@
text
@d1 1
a1 1
$OpenBSD$
@

