head	1.42;
access;
symbols
	OPENBSD_6_1:1.41.0.2
	OPENBSD_6_1_BASE:1.41
	OPENBSD_6_0:1.31.0.2
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.26.0.2
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.2
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.17.0.2
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.42
date	2017.06.06.14.12.59;	author robert;	state Exp;
branches;
next	1.41;
commitid	w6qyAwMHW5rangMu;

1.41
date	2017.03.23.08.26.07;	author ajacoutot;	state Exp;
branches;
next	1.40;
commitid	qqpBj8whlAgCQWje;

1.40
date	2017.03.14.17.29.45;	author ajacoutot;	state Exp;
branches;
next	1.39;
commitid	XTiylXnMOG4h8Oxu;

1.39
date	2017.02.20.07.04.00;	author ajacoutot;	state Exp;
branches;
next	1.38;
commitid	80OcmKVht3SvjxRS;

1.38
date	2017.02.10.09.37.43;	author ajacoutot;	state Exp;
branches;
next	1.37;
commitid	fevyFq3hanzfmR8U;

1.37
date	2016.10.18.06.59.02;	author ajacoutot;	state Exp;
branches;
next	1.36;
commitid	6GCpT3uuEo2XZefE;

1.36
date	2016.10.07.08.55.30;	author ajacoutot;	state Exp;
branches;
next	1.35;
commitid	9CZYQ6vy0MJoEWYH;

1.35
date	2016.09.28.07.16.23;	author ajacoutot;	state Exp;
branches;
next	1.34;
commitid	TlPxWywiCvVctWTQ;

1.34
date	2016.09.24.12.35.38;	author ajacoutot;	state Exp;
branches;
next	1.33;
commitid	P8uBvX7hMStbSNIu;

1.33
date	2016.09.18.07.46.32;	author ajacoutot;	state Exp;
branches;
next	1.32;
commitid	InSmiybwC5cxVzHp;

1.32
date	2016.09.13.07.47.41;	author ajacoutot;	state Exp;
branches;
next	1.31;
commitid	UZfknjQxTAHiVt2I;

1.31
date	2016.07.06.16.33.35;	author stefan;	state Exp;
branches;
next	1.30;
commitid	FuqKbjHj3rcOExoc;

1.30
date	2016.05.24.07.53.23;	author ajacoutot;	state Exp;
branches;
next	1.29;
commitid	wLyWnSeuKgH8uuqx;

1.29
date	2016.05.14.20.36.36;	author ajacoutot;	state Exp;
branches;
next	1.28;
commitid	Ww8D7gwHYMZAZd2q;

1.28
date	2016.03.07.17.03.05;	author pascal;	state Exp;
branches;
next	1.27;
commitid	W5Qj8j1mRD9W6gbv;

1.27
date	2016.03.05.15.31.41;	author pascal;	state Exp;
branches;
next	1.26;
commitid	Hqi865xYWk2i2UMI;

1.26
date	2015.06.04.09.04.44;	author ajacoutot;	state Exp;
branches;
next	1.25;
commitid	yKyhPHluAsbWlYwu;

1.25
date	2015.06.03.06.23.21;	author ajacoutot;	state Exp;
branches;
next	1.24;
commitid	nvw4jSvhWCMcjtqa;

1.24
date	2015.04.09.22.25.02;	author sthen;	state Exp;
branches;
next	1.23;
commitid	By0YomZj9fqvzzim;

1.23
date	2014.08.29.14.28.32;	author brad;	state Exp;
branches;
next	1.22;
commitid	AMVKIbMANJibkg5R;

1.22
date	2014.07.16.22.16.54;	author brad;	state Exp;
branches;
next	1.21;
commitid	R7yaqlRTZ3Ykxf8H;

1.21
date	2014.07.10.19.26.48;	author brad;	state Exp;
branches;
next	1.20;
commitid	Gna6nASmYoUeJ0Ga;

1.20
date	2014.06.13.22.29.40;	author brad;	state Exp;
branches;
next	1.19;
commitid	c2sJcOVE6BwRjMcT;

1.19
date	2014.05.29.00.23.36;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2014.04.18.09.30.48;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2013.12.02.22.14.29;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.21.22.09.12;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.08.10.14.13;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2013.01.04.01.10.30;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2012.12.23.20.49.29;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.31.16.21.20;	author pascal;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.29.00.45.47;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.21.17.51.53;	author pascal;	state Exp;
branches;
next	1.9;

1.9
date	2012.05.25.09.05.49;	author sthen;	state dead;
branches;
next	1.8;

1.8
date	2011.12.14.22.58.23;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.09.21.43.39;	author jsg;	state dead;
branches;
next	1.6;

1.6
date	2011.01.13.00.15.50;	author jeremy;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.12.12.15.08;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.29.16.37.09;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.02.22.53.27;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.09.11.26.03;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2009.06.25.15.25.13;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.42
log
@enable TLS emulation by default just like in base clang

ok espie@@
@
text
@$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.41 2017/03/23 08:26:07 ajacoutot Exp $

- Select proper SPARCv9 variant for the external assembler
- Set ABIs correctly for OpenBSD/arm; soft float and aapcs-linux
- Make LLVM create strict aligned code for OpenBSD/arm64
- Disable -fstrict-aliasing per default on OpenBSD
- Always use --eh-frame-hdr on OpenBSD, even for -static

Index: tools/clang/lib/Driver/Tools.cpp
--- tools/clang/lib/Driver/Tools.cpp.orig
+++ tools/clang/lib/Driver/Tools.cpp
@@@@ -79,7 +79,7 @@@@ static const char *getSparcAsmModeForCPU(StringRef Nam
           .Case("niagara2", "-Av9b")
           .Case("niagara3", "-Av9d")
           .Case("niagara4", "-Av9d")
-          .Default("-Av9");
+          .Default("-Av9a");
   } else {
     return llvm::StringSwitch<const char *>(Name)
           .Case("v8", "-Av8")
@@@@ -962,6 +962,10 @@@@ arm::FloatABI arm::getARMFloatABI(const ToolChain &TC,
       }
       break;
 
+    case llvm::Triple::OpenBSD:
+      ABI = FloatABI::Soft;
+      break;
+
     default:
       switch (Triple.getEnvironment()) {
       case llvm::Triple::GNUEABIHF:
@@@@ -1251,6 +1255,8 @@@@ void Clang::AddARMTargetArgs(const llvm::Triple &Tripl
     default:
       if (Triple.getOS() == llvm::Triple::NetBSD)
         ABIName = "apcs-gnu";
+      else if (Triple.getOS() == llvm::Triple::OpenBSD)
+        ABIName = "aapcs-linux";
       else
         ABIName = "aapcs";
       break;
@@@@ -2635,7 +2641,9 @@@@ getAArch64MicroArchFeaturesFromMcpu(const Driver &D, S
   return getAArch64MicroArchFeaturesFromMtune(D, CPU, Args, Features);
 }
 
-static void getAArch64TargetFeatures(const Driver &D, const ArgList &Args,
+static void getAArch64TargetFeatures(const Driver &D,
+                                     const llvm::Triple &Triple,
+                                     const ArgList &Args,
                                      std::vector<StringRef> &Features) {
   Arg *A;
   bool success = true;
@@@@ -2677,9 +2685,11 @@@@ static void getAArch64TargetFeatures(const Driver &D, 
   }
 
   if (Arg *A = Args.getLastArg(options::OPT_mno_unaligned_access,
-                               options::OPT_munaligned_access))
+                               options::OPT_munaligned_access)) {
     if (A->getOption().matches(options::OPT_mno_unaligned_access))
       Features.push_back("+strict-align");
+  } else if (Triple.isOSOpenBSD())
+    Features.push_back("+strict-align");
 
   if (Args.hasArg(options::OPT_ffixed_x18))
     Features.push_back("+reserve-x18");
@@@@ -2754,7 +2764,7 @@@@ static void getTargetFeatures(const ToolChain &TC, con
     break;
   case llvm::Triple::aarch64:
   case llvm::Triple::aarch64_be:
-    getAArch64TargetFeatures(D, Args, Features);
+    getAArch64TargetFeatures(D, Triple, Args, Features);
     break;
   case llvm::Triple::x86:
   case llvm::Triple::x86_64:
@@@@ -3845,9 +3855,10 @@@@ ParsePICArgs(const ToolChain &ToolChain, const ArgList
   // OpenBSD-specific defaults for PIE
   if (Triple.getOS() == llvm::Triple::OpenBSD) {
     switch (ToolChain.getArch()) {
+    case llvm::Triple::arm:
+    case llvm::Triple::aarch64:
     case llvm::Triple::mips64:
     case llvm::Triple::mips64el:
-    case llvm::Triple::sparcel:
     case llvm::Triple::x86:
     case llvm::Triple::x86_64:
       IsPICLevelTwo = false; // "-fpie"
@@@@ -3855,6 +3866,7 @@@@ ParsePICArgs(const ToolChain &ToolChain, const ArgList
 
     case llvm::Triple::ppc:
     case llvm::Triple::sparc:
+    case llvm::Triple::sparcel:
     case llvm::Triple::sparcv9:
       IsPICLevelTwo = true; // "-fPIE"
       break;
@@@@ -4466,9 +4478,12 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
       OFastEnabled ? options::OPT_Ofast : options::OPT_fstrict_aliasing;
   // We turn strict aliasing off by default if we're in CL mode, since MSVC
   // doesn't do any TBAA.
-  bool TBAAOnByDefault = !getToolChain().getDriver().IsCLMode();
+  bool StrictAliasingDefault = !getToolChain().getDriver().IsCLMode();
+  // We also turn off strict aliasing on OpenBSD.
+  if (getToolChain().getTriple().isOSOpenBSD())
+    StrictAliasingDefault = false;
   if (!Args.hasFlag(options::OPT_fstrict_aliasing, StrictAliasingAliasOption,
-                    options::OPT_fno_strict_aliasing, TBAAOnByDefault))
+                    options::OPT_fno_strict_aliasing, StrictAliasingDefault))
     CmdArgs.push_back("-relaxed-aliasing");
   if (!Args.hasFlag(options::OPT_fstruct_path_tbaa,
                     options::OPT_fno_struct_path_tbaa))
@@@@ -5359,7 +5374,8 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
   Args.AddLastArg(CmdArgs, options::OPT_fno_operator_names);
   // Emulated TLS is enabled by default on Android, and can be enabled manually
   // with -femulated-tls.
-  bool EmulatedTLSDefault = Triple.isAndroid() || Triple.isWindowsCygwinEnvironment();
+  bool EmulatedTLSDefault = Triple.isAndroid() || Triple.isOSOpenBSD() ||
+			    Triple.isWindowsCygwinEnvironment();
   if (Args.hasFlag(options::OPT_femulated_tls, options::OPT_fno_emulated_tls,
                    EmulatedTLSDefault))
     CmdArgs.push_back("-femulated-tls");
@@@@ -8907,12 +8923,12 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
     CmdArgs.push_back("__start");
   }
 
+  CmdArgs.push_back("--eh-frame-hdr");
   if (Args.hasArg(options::OPT_static)) {
     CmdArgs.push_back("-Bstatic");
   } else {
     if (Args.hasArg(options::OPT_rdynamic))
       CmdArgs.push_back("-export-dynamic");
-    CmdArgs.push_back("--eh-frame-hdr");
     CmdArgs.push_back("-Bdynamic");
     if (Args.hasArg(options::OPT_shared)) {
       CmdArgs.push_back("-shared");
@@@@ -8952,15 +8968,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
     }
   }
 
-  std::string Triple = getToolChain().getTripleString();
-  if (Triple.substr(0, 6) == "x86_64")
-    Triple.replace(0, 6, "amd64");
-  CmdArgs.push_back(
-      Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple + "/4.2.1"));
-
   Args.AddAllArgs(CmdArgs, {options::OPT_L, options::OPT_T_Group,
                             options::OPT_e, options::OPT_s, options::OPT_t,
                             options::OPT_Z_Flag, options::OPT_r});
+
+  std::string Triple = getToolChain().getTripleString();
+  if (Triple.substr(0, 5) == "amd64")
+    Triple.replace(0, 5, "x86_64");
+  CmdArgs.push_back(
+      Args.MakeArgString("-L${LOCALBASE}/lib/gcc/" + Triple + "/${GCC_VER}"));
+  CmdArgs.push_back(
+      Args.MakeArgString("-L${LOCALBASE}/lib"));
 
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs, JA);
 
@


1.41
log
@- Bring in an LLD workaround from base
- Add "(compatible with GNU linkers)" to the -version output
- Print out "supported targets".
- Update/fix PIE defaults
- -z nodlopen has been commited upstream

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.40 2017/03/14 17:29:45 ajacoutot Exp $
d9 3
a11 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Tue Feb 21 14:11:22 2017
+++ tools/clang/lib/Driver/Tools.cpp	Sat Mar 18 17:32:52 2017
d109 11
a119 1
@@@@ -8907,12 +8922,12 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d133 1
a133 1
@@@@ -8952,15 +8967,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.40
log
@Update to llvm-4.0.0.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.39 2017/02/20 07:04:00 ajacoutot Exp $
d9 2
a10 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Thu Mar  2 20:25:38 2017
+++ tools/clang/lib/Driver/Tools.cpp	Thu Mar  2 21:45:21 2017
d73 21
a93 1
@@@@ -4466,9 +4476,12 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d108 1
a108 1
@@@@ -8907,12 +8920,12 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d122 1
a122 1
@@@@ -8952,15 +8965,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.39
log
@Sync both the --eh-frame-hdr and float128 diffs to what was commited
upstream.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.38 2017/02/10 09:37:43 ajacoutot Exp $
d4 1
a4 2
- For now, force soft-float on ARM
- Set ABI for ARM
a7 1
- Link static PIE programs against rcrt0.o on OpenBSD
d9 2
a10 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Wed Feb  8 20:35:18 2017
+++ tools/clang/lib/Driver/Tools.cpp	Sun Feb 19 17:41:04 2017
d102 1
a102 12
@@@@ -8937,6 +8950,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
       if (Args.hasArg(options::OPT_pg))
         CmdArgs.push_back(
             Args.MakeArgString(getToolChain().GetFilePath("gcrt0.o")));
+      else if (Args.hasArg(options::OPT_static) &&
+               !Args.hasArg(options::OPT_nopie))
+        CmdArgs.push_back(
+            Args.MakeArgString(getToolChain().GetFilePath("rcrt0.o")));
       else
         CmdArgs.push_back(
             Args.MakeArgString(getToolChain().GetFilePath("crt0.o")));
@@@@ -8948,15 +8965,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.38
log
@Update to llvm-4.0.0rc2.
- survived a bulk on i386 and amd64

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.37 2016/10/18 06:59:02 ajacoutot Exp $
d8 1
a8 1
- Produce EH frame header for all binaries
d11 2
a12 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Wed Jan 25 19:51:14 2017
+++ tools/clang/lib/Driver/Tools.cpp	Wed Jan 25 20:44:56 2017
d90 1
a90 1
@@@@ -8907,12 +8920,13 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
a94 1
+
d104 1
a104 1
@@@@ -8937,6 +8951,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d115 1
a115 1
@@@@ -8948,15 +8966,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.37
log
@Add patch from upstream to fix the build issue with CMake.

fom Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.36 2016/10/07 08:55:30 ajacoutot Exp $
d6 1
d11 3
a13 3
--- tools/clang/lib/Driver/Tools.cpp.orig	Sat Aug 13 16:43:56 2016
+++ tools/clang/lib/Driver/Tools.cpp	Tue Sep 27 22:10:52 2016
@@@@ -78,7 +78,7 @@@@ static const char *getSparcAsmModeForCPU(StringRef Nam
d22 1
a22 1
@@@@ -837,6 +837,10 @@@@ arm::FloatABI arm::getARMFloatABI(const ToolChain &TC,
d33 1
a33 1
@@@@ -1102,6 +1106,8 @@@@ void Clang::AddARMTargetArgs(const llvm::Triple &Tripl
d42 34
a75 1
@@@@ -4176,9 +4182,12 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d90 1
a90 1
@@@@ -8206,12 +8215,13 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d105 1
a105 1
@@@@ -8236,6 +8246,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d116 1
a116 1
@@@@ -8247,15 +8261,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d138 1
a138 1
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs);
@


1.36
log
@Update to LLVM 3.9.0.
Been through bulks on amd64 / i386 by sthen@@ and naddy@@ respectively.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.35 2016/09/28 07:16:23 ajacoutot Exp $
d8 1
a8 1
- Link static PIEs with the correct C runtime (rcrt0.o)
@


1.35
log
@Disable -fstrict-aliasing per default on OpenBSD.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.34 2016/09/24 12:35:38 ajacoutot Exp $
d10 2
a11 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Fri Feb 12 17:51:41 2016
+++ tools/clang/lib/Driver/Tools.cpp	Tue Sep 27 19:01:30 2016
d21 1
a21 1
@@@@ -721,6 +721,10 @@@@ arm::FloatABI arm::getARMFloatABI(const ToolChain &TC,
d32 1
a32 1
@@@@ -977,6 +981,8 @@@@ void Clang::AddARMTargetArgs(const llvm::Triple &Tripl
d41 1
a41 1
@@@@ -3742,9 +3748,12 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d56 1
a56 1
@@@@ -7570,12 +7579,13 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d71 1
a71 1
@@@@ -7600,6 +7610,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d82 1
a82 1
@@@@ -7611,15 +7625,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.34
log
@Adjust default CPU for OpenBSD/arm and set proper ABI.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.33 2016/09/18 07:46:32 ajacoutot Exp $
d6 1
d11 1
a11 1
+++ tools/clang/lib/Driver/Tools.cpp	Mon Sep 19 20:58:33 2016
d41 16
a56 1
@@@@ -7570,12 +7576,13 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d71 1
a71 1
@@@@ -7600,6 +7607,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d82 1
a82 1
@@@@ -7611,15 +7622,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.33
log
@Merge in the fix clang types force soft-float on arm patches.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.32 2016/09/13 07:47:41 ajacoutot Exp $
d5 1
d10 1
a10 1
+++ tools/clang/lib/Driver/Tools.cpp	Sat Sep 17 18:37:22 2016
d31 10
a40 1
@@@@ -7570,12 +7574,13 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d55 1
a55 1
@@@@ -7600,6 +7605,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d66 1
a66 1
@@@@ -7611,15 +7620,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.32
log
@- Remove an obsolete patch that was for the GNU make build infrastructure
- Merge in the stack protector and EH frame header patches

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
d9 1
a9 1
+++ tools/clang/lib/Driver/Tools.cpp	Mon Sep 12 10:47:29 2016
d19 12
a30 1
@@@@ -7570,12 +7570,13 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d45 1
a45 1
@@@@ -7600,6 +7601,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d56 1
a56 1
@@@@ -7611,15 +7616,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.31
log
@Make clang build working binaries by linking against rcrt0 when
building static PIE binaries. This is also what Bitrig does

ok tobiasu@@ sthen@@
@
text
@d1 8
a8 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Fri Feb 12 23:51:41 2016
+++ tools/clang/lib/Driver/Tools.cpp	Sun Jun 26 20:24:44 2016
d18 16
a33 1
@@@@ -7600,6 +7600,10 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d44 1
a44 1
@@@@ -7611,15 +7615,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.30
log
@Select proper SPARCv9 variant for the assembler.

from Brad (maintainer)
@
text
@d1 2
a2 3
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.29 2016/05/14 20:36:36 ajacoutot Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Fri Feb 12 17:51:41 2016
+++ tools/clang/lib/Driver/Tools.cpp	Tue May 17 14:45:22 2016
d12 12
a23 1
@@@@ -7611,15 +7611,17 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
@


1.29
log
@Update to llvm-3.8.0.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.28 2016/03/07 17:03:05 pascal Exp $
d3 10
a12 1
+++ tools/clang/lib/Driver/Tools.cpp	Fri Mar 25 21:59:20 2016
@


1.28
log
@Correct LLVM linker patch: -L arguments passed on the command line need to be
processed *before* adding default -L directories.  Fixes
mail/mozilla-thunderbird.

ok landry@@
@
text
@d1 4
a4 4
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.27 2016/03/05 15:31:41 pascal Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Fri Nov  6 12:38:46 2015
+++ tools/clang/lib/Driver/Tools.cpp	Sat Mar  5 20:15:05 2016
@@@@ -6964,12 +6964,6 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d14 3
a16 7
   Args.AddAllArgs(CmdArgs, options::OPT_L);
   Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
   Args.AddAllArgs(CmdArgs, options::OPT_e);
@@@@ -6977,6 +6971,14 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
   Args.AddAllArgs(CmdArgs, options::OPT_t);
   Args.AddAllArgs(CmdArgs, options::OPT_Z_Flag);
   Args.AddAllArgs(CmdArgs, options::OPT_r);
@


1.27
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 2
+++ tools/clang/lib/Driver/Tools.cpp	Thu Jan  7 19:18:59 2016
@@@@ -6965,10 +6965,12 @@@@ void openbsd::Linker::ConstructJob(Compilation &C, con
d8 1
a8 1
   std::string Triple = getToolChain().getTripleString();
d11 12
d25 1
a25 2
   CmdArgs.push_back(
-      Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple + "/4.2.1"));
d30 2
a31 2
   Args.AddAllArgs(CmdArgs, options::OPT_L);
   Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
@


1.26
log
@Add SVN commit id.

from brad (maintainer)
@
text
@d1 4
a4 56
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.25 2015/06/03 06:23:21 ajacoutot Exp $

r212838
Handle SPARC float command line parameters for SPARCv9.

r216029
Handle SPARC float command line parameters for SPARCv9.

r211624
Use appropriate default PIE settings for OpenBSD.

r239028
Use the appropriate PIE level for OpenBSD/sparc.

r210883
Use dwarf-2 by default on OpenBSD and FreeBSD.

r209479
Don't reduce the stack protector level given -fstack-protector.

r211785
Implement the -fuse-ld= option.

This commit implements the -fuse-ld= option, so that the user
can specify -fuse-ld=bfd to use ld.bfd.

--- tools/clang/lib/Driver/Tools.cpp.orig	Sun Mar  2 22:03:41 2014
+++ tools/clang/lib/Driver/Tools.cpp	Tue Jun  2 16:46:10 2015
@@@@ -1150,7 +1150,7 @@@@ static std::string getR600TargetGPU(const ArgList &Arg
 }
 
 static void getSparcTargetFeatures(const ArgList &Args,
-                                   std::vector<const char *> Features) {
+                                   std::vector<const char *> &Features) {
   bool SoftFloatABI = true;
   if (Arg *A =
           Args.getLastArg(options::OPT_msoft_float, options::OPT_mhard_float)) {
@@@@ -1165,7 +1165,7 @@@@ void Clang::AddSparcTargetArgs(const ArgList &Args,
                              ArgStringList &CmdArgs) const {
   const Driver &D = getToolChain().getDriver();
 
-  // Select the float ABI as determined by -msoft-float, -mhard-float, and
+  // Select the float ABI as determined by -msoft-float and -mhard-float.
   StringRef FloatABI;
   if (Arg *A = Args.getLastArg(options::OPT_msoft_float,
                                options::OPT_mhard_float)) {
@@@@ -1486,6 +1486,7 @@@@ static void getTargetFeatures(const Driver &D, const l
     getPPCTargetFeatures(Args, Features);
     break;
   case llvm::Triple::sparc:
+  case llvm::Triple::sparcv9:
     getSparcTargetFeatures(Args, Features);
     break;
   case llvm::Triple::aarch64:
@@@@ -2261,6 +2262,27 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
     }
d7 10
a16 101
+  // OpenBSD-specific defaults for PIE
+  if (getToolChain().getTriple().getOS() == llvm::Triple::OpenBSD) {
+    switch (getToolChain().getTriple().getArch()) {
+    case llvm::Triple::mips64:
+    case llvm::Triple::mips64el:
+    case llvm::Triple::x86:
+    case llvm::Triple::x86_64:
+      IsPICLevelTwo = false; // "-fpie"
+      break;
+
+    case llvm::Triple::ppc:
+    case llvm::Triple::sparc:
+    case llvm::Triple::sparcv9:
+      IsPICLevelTwo = true; // "-fPIE"
+      break;
+
+    default:
+      break;
+    }
+  }
+
   // For the PIC and PIE flag options, this logic is different from the
   // legacy logic in very old versions of GCC, as that logic was just
   // a bug no one had ever fixed. This logic is both more rational and
@@@@ -2631,6 +2653,7 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
     break;
 
   case llvm::Triple::sparc:
+  case llvm::Triple::sparcv9:
     AddSparcTargetArgs(Args, CmdArgs);
     break;
 
@@@@ -2696,8 +2719,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
       // FIXME: we should support specifying dwarf version with
       // -gline-tables-only.
       CmdArgs.push_back("-gline-tables-only");
-      // Default is dwarf-2 for darwin.
-      if (getToolChain().getTriple().isOSDarwin())
+      // Default is dwarf-2 for Darwin, OpenBSD and FreeBSD.
+      const llvm::Triple &Triple = getToolChain().getTriple();
+      if (Triple.isOSDarwin() || Triple.getOS() == llvm::Triple::OpenBSD ||
+          Triple.getOS() == llvm::Triple::FreeBSD)
         CmdArgs.push_back("-gdwarf-2");
     } else if (A->getOption().matches(options::OPT_gdwarf_2))
       CmdArgs.push_back("-gdwarf-2");
@@@@ -2707,8 +2732,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
       CmdArgs.push_back("-gdwarf-4");
     else if (!A->getOption().matches(options::OPT_g0) &&
              !A->getOption().matches(options::OPT_ggdb0)) {
-      // Default is dwarf-2 for darwin.
-      if (getToolChain().getTriple().isOSDarwin())
+      // Default is dwarf-2 for Darwin, OpenBSD and FreeBSD.
+      const llvm::Triple &Triple = getToolChain().getTriple();
+      if (Triple.isOSDarwin() || Triple.getOS() == llvm::Triple::OpenBSD ||
+          Triple.getOS() == llvm::Triple::FreeBSD)
         CmdArgs.push_back("-gdwarf-2");
       else
         CmdArgs.push_back("-g");
@@@@ -3197,9 +3224,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
                                options::OPT_fstack_protector_all,
                                options::OPT_fstack_protector_strong,
                                options::OPT_fstack_protector)) {
-    if (A->getOption().matches(options::OPT_fstack_protector))
-      StackProtectorLevel = LangOptions::SSPOn;
-    else if (A->getOption().matches(options::OPT_fstack_protector_strong))
+    if (A->getOption().matches(options::OPT_fstack_protector)) {
+      StackProtectorLevel = std::max<unsigned>(LangOptions::SSPOn,
+        getToolChain().GetDefaultStackProtectorLevel(KernelOrKext));
+    } else if (A->getOption().matches(options::OPT_fstack_protector_strong))
       StackProtectorLevel = LangOptions::SSPStrong;
     else if (A->getOption().matches(options::OPT_fstack_protector_all))
       StackProtectorLevel = LangOptions::SSPReq;
@@@@ -5281,7 +5309,7 @@@@ void darwin::Link::ConstructJob(Compilation &C, const 
   Args.AddAllArgs(CmdArgs, options::OPT_F);
 
   const char *Exec =
-    Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+    Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -5478,7 +5506,7 @@@@ void solaris::Link::ConstructJob(Compilation &C, const
   addProfileRT(getToolChain(), Args, CmdArgs);
 
   const char *Exec =
-    Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+    Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -5590,7 +5618,7 @@@@ void auroraux::Link::ConstructJob(Compilation &C, cons
   addProfileRT(getToolChain(), Args, CmdArgs);
 
   const char *Exec =
-    Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+    Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -5743,6 +5771,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
                                        "/4.2.1"));
a18 1
+  Args.AddAllArgs(CmdArgs, options::OPT_R);
a19 56
   Args.AddAllArgs(CmdArgs, options::OPT_e);
   Args.AddAllArgs(CmdArgs, options::OPT_s);
@@@@ -5795,7 +5824,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   }
 
   const char *Exec =
-    Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+    Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -5935,7 +5964,7 @@@@ void bitrig::Link::ConstructJob(Compilation &C, const 
   }
 
   const char *Exec =
-    Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+    Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -6200,7 +6229,7 @@@@ void freebsd::Link::ConstructJob(Compilation &C, const
   addProfileRT(ToolChain, Args, CmdArgs);
 
   const char *Exec =
-    Args.MakeArgString(ToolChain.GetProgramPath("ld"));
+    Args.MakeArgString(ToolChain.GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -6448,7 +6477,7 @@@@ void netbsd::Link::ConstructJob(Compilation &C, const 
 
   addProfileRT(getToolChain(), Args, CmdArgs);
 
-  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+  const char *Exec = Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -6964,7 +6993,7 @@@@ void minix::Link::ConstructJob(Compilation &C, const J
          Args.MakeArgString(getToolChain().GetFilePath("crtend.o")));
   }
 
-  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+  const char *Exec = Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@@@@ -7148,7 +7177,7 @@@@ void dragonfly::Link::ConstructJob(Compilation &C, con
   addProfileRT(getToolChain(), Args, CmdArgs);
 
   const char *Exec =
-    Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+    Args.MakeArgString(getToolChain().GetLinkerPath());
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
@


1.25
log
@Have sparc use -fPIE by default.

from brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.24 2015/04/09 22:25:02 sthen Exp $
d11 3
@


1.24
log
@Backport commit from upstream Clang/LLVM, from Brad (maintainer).

r211785
Implement the -fuse-ld= option.

This commit implements the -fuse-ld= option, so that the user
can specify -fuse-ld=bfd to use ld.bfd.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.23 2014/08/29 14:28:32 brad Exp $
d25 1
a25 1
+++ tools/clang/lib/Driver/Tools.cpp	Thu Feb 26 07:09:54 2015
a60 1
+    case llvm::Triple::sparc:
d67 1
@


1.23
log
@- Remove a local PowerPC patch we don't need.
- A fix for the SPARC float handling. Adding the missing & to the field allows
  the backend feature flag to be passed back which it was not without it.
- Add some patches to enable the integrated assembler on PowerPC / SPARC.
  I left these out before as I thought because Clang was not obeying this
  setting and had its own similar bits they were not necessary but turns
  out the backend has some code that does obey this setting.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.22 2014/07/16 22:16:54 brad Exp $
d18 6
d25 1
a25 1
+++ tools/clang/lib/Driver/Tools.cpp	Thu Aug  7 19:57:25 2014
d128 27
d163 54
@


1.22
log
@Bring in some commits from upstream..

r213105
Use the integrated assembler by default on OpenBSD/sparc

r212838
Handle SPARC float command line parameters for SPARCv9.

ok matthew@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.21 2014/07/10 19:26:48 brad Exp $
d6 3
d19 10
a28 1
+++ tools/clang/lib/Driver/Tools.cpp	Wed Jul 16 16:00:01 2014
@


1.21
log
@r211624
Use appropriate default PIE settings for OpenBSD.

ok matthew@@
@
text
@d1 4
a4 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.20 2014/06/13 22:29:40 brad Exp $
d16 19
a34 2
+++ tools/clang/lib/Driver/Tools.cpp	Wed Jun 18 23:14:53 2014
@@@@ -2261,6 +2261,27 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d62 9
a70 1
@@@@ -2696,8 +2717,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d83 1
a83 1
@@@@ -2707,8 +2730,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d96 1
a96 1
@@@@ -3197,9 +3222,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d110 1
a110 1
@@@@ -5743,6 +5769,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.20
log
@Some fixes from uptream..

- Use dwarf-2 by default on OpenBSD and FreeBSD.
- Make VSELECT selection terminate in cases where the condition type has
  to be split and the result type widened.
  (fixes an OOM crash with the vectorizer on i386 if not utilizing SSE2
   or newer)
- The last step of _mm_cvtps_pi16 should use _mm_packs_pi32, which is a
  function that reads two __m64 values and packs four 32-bit values into
  four 16-bit values.

Fix profiling..

- Alias the command line parameter -p to -pg.

From Bitrig

ok sthen@@
@
text
@d1 4
a4 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.19 2014/05/29 00:23:36 brad Exp $
d13 30
a42 2
+++ tools/clang/lib/Driver/Tools.cpp	Fri Jun 13 00:15:55 2014
@@@@ -2696,8 +2696,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d55 1
a55 1
@@@@ -2707,8 +2709,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d68 1
a68 1
@@@@ -3197,9 +3201,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d82 1
a82 1
@@@@ -5743,6 +5748,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.19
log
@r209479
Don't reduce the stack protector level given -fstack-protector.

ok sthen@@
@
text
@d1 4
a4 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.18 2014/04/18 09:30:48 brad Exp $
d10 28
a37 2
+++ tools/clang/lib/Driver/Tools.cpp	Thu May 22 17:52:57 2014
@@@@ -3197,9 +3197,10 @@@@ void Clang::ConstructJob(Compilation &C, const JobActi
d51 1
a51 1
@@@@ -5743,6 +5744,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.18
log
@Update to LLVM 3.5 (trunk) snapshot just before switching to an unconditional
C++11 codebase.

This brings in a number of improvements over 3.4 including..
X86 assembler with 16-bit support
Much improved SPARC backend
stack protector strong support

ok sthen@@
@
text
@d1 5
a5 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.17 2013/12/02 22:14:29 brad Exp $
d7 16
a22 2
+++ tools/clang/lib/Driver/Tools.cpp	Sun Mar  2 22:13:02 2014
@@@@ -5743,6 +5743,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.17
log
@- Remove MAKE_FLAGS variables as they were only relevant for the GNU autoconf/make
  build infrastructure
- Remove the CMake patch as sebastia@@ says it did not actually work and should be
  removed
- Some frontend driver tweaks for the external assembler handling for 32-bit mode
  (-m32) on amd64, powerpc handling and bring the ABI determination bits in line
  with the other OS's to use the getGnuCompatibleMipsABIName function

ok sthen@@
@
text
@d1 5
a5 6
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.16 2013/06/21 22:09:12 brad Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Thu May 30 14:01:30 2013
+++ tools/clang/lib/Driver/Tools.cpp	Wed Nov 27 23:09:47 2013
@@@@ -5071,6 +5071,40 @@@@ void openbsd::Assemble::ConstructJob(Compilation &C, c
                                      const char *LinkingOutput) const {
   ArgStringList CmdArgs;
d7 5
a11 59
+  // When building 32-bit code on OpenBSD/amd64, we have to explicitly
+  // instruct as in the base system to assemble 32-bit code.
+  if (getToolChain().getArch() == llvm::Triple::x86)
+    CmdArgs.push_back("--32");
+  else if (getToolChain().getArch() == llvm::Triple::ppc) {
+    CmdArgs.push_back("-mppc");
+    CmdArgs.push_back("-many");
+  } else if (getToolChain().getArch() == llvm::Triple::mips64 ||
+             getToolChain().getArch() == llvm::Triple::mips64el) {
+    StringRef CPUName;
+    StringRef ABIName;
+    getMipsCPUAndABI(Args, getToolChain(), CPUName, ABIName);
+
+    CmdArgs.push_back("-mabi");
+    CmdArgs.push_back(getGnuCompatibleMipsABIName(ABIName).data());
+
+    if (getToolChain().getArch() == llvm::Triple::mips64)
+      CmdArgs.push_back("-EB");
+    else
+      CmdArgs.push_back("-EL");
+
+    Arg *LastPICArg = Args.getLastArg(options::OPT_fPIC, options::OPT_fno_PIC,
+                                      options::OPT_fpic, options::OPT_fno_pic,
+                                      options::OPT_fPIE, options::OPT_fno_PIE,
+                                      options::OPT_fpie, options::OPT_fno_pie);
+    if (LastPICArg &&
+        (LastPICArg->getOption().matches(options::OPT_fPIC) ||
+         LastPICArg->getOption().matches(options::OPT_fpic) ||
+         LastPICArg->getOption().matches(options::OPT_fPIE) ||
+         LastPICArg->getOption().matches(options::OPT_fpie))) {
+      CmdArgs.push_back("-KPIC");
+    }
+  }
+
   Args.AddAllArgValues(CmdArgs, options::OPT_Wa_COMMA,
                        options::OPT_Xassembler);
 
@@@@ -5104,6 +5138,11 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   // handled somewhere else.
   Args.ClaimAllArgs(options::OPT_w);
 
+  if (getToolChain().getArch() == llvm::Triple::mips64)
+    CmdArgs.push_back("-EB");
+  else if (getToolChain().getArch() == llvm::Triple::mips64el)
+    CmdArgs.push_back("-EL");
+
   if ((!Args.hasArg(options::OPT_nostdlib)) &&
       (!Args.hasArg(options::OPT_shared))) {
     CmdArgs.push_back("-e");
@@@@ -5124,6 +5163,9 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
       CmdArgs.push_back("/usr/libexec/ld.so");
     }
   }
+
+  if (Args.hasArg(options::OPT_nopie))
+    CmdArgs.push_back("-nopie");
 
   if (Output.isFilename()) {
     CmdArgs.push_back("-o");
@


1.16
log
@Update to LLVM 3.3.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.15 2013/01/08 10:14:13 brad Exp $
d3 2
a4 2
+++ tools/clang/lib/Driver/Tools.cpp	Tue Jun  4 23:43:06 2013
@@@@ -5071,6 +5071,36 @@@@ void openbsd::Assemble::ConstructJob(Compilation &C, c
d8 9
a16 2
+  if (getToolChain().getArch() == llvm::Triple::mips64 ||
+      getToolChain().getArch() == llvm::Triple::mips64el) {
a20 3
+    // Convert ABI name to the GNU tools acceptable variant.
+    ABIName = "64";
+
d22 1
a22 1
+    CmdArgs.push_back(ABIName.data());
d45 1
a45 1
@@@@ -5104,6 +5134,11 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
d57 1
a57 1
@@@@ -5124,6 +5159,9 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.15
log
@Add some initial bits for mips64 to pass down the proper flags
to the assembler and linker. Still work in progress.

ok sthen@@
@
text
@d1 4
a4 7
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.14 2013/01/04 01:10:30 brad Exp $

Silence some warnings and allow passing down some feature flags to the linker. r171329

--- tools/clang/lib/Driver/Tools.cpp.orig	Wed Nov 21 02:56:23 2012
+++ tools/clang/lib/Driver/Tools.cpp	Mon Jan  7 22:48:10 2013
@@@@ -5100,6 +5100,36 @@@@ void openbsd::Assemble::ConstructJob(Compilation &C, c
d41 3
a43 3
@@@@ -5125,6 +5155,22 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   const Driver &D = getToolChain().getDriver();
   ArgStringList CmdArgs;
a44 8
+  // Silence warning for "clang -g foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_g_Group);
+  // and "clang -emit-llvm foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_emit_llvm);
+  // and for "clang -w foo.o -o foo". Other warning options are already
+  // handled somewhere else.
+  Args.ClaimAllArgs(options::OPT_w);
+
a49 3
+  // XXX
+  CmdArgs.push_back("-nopie");
+
d53 7
a59 10
@@@@ -5179,6 +5225,10 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   Args.AddAllArgs(CmdArgs, options::OPT_L);
   Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
   Args.AddAllArgs(CmdArgs, options::OPT_e);
+  Args.AddAllArgs(CmdArgs, options::OPT_s);
+  Args.AddAllArgs(CmdArgs, options::OPT_t);
+  Args.AddAllArgs(CmdArgs, options::OPT_Z_Flag);
+  Args.AddAllArgs(CmdArgs, options::OPT_r);
 
   AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs);
d61 2
@


1.14
log
@Silence some warnings and allow passing down some feature flags to the linker.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.13 2012/12/23 20:49:29 brad Exp $
d5 40
a44 3
--- tools/clang/lib/Driver/Tools.cpp.orig	Mon Dec 24 18:44:21 2012
+++ tools/clang/lib/Driver/Tools.cpp	Mon Dec 31 18:01:11 2012
@@@@ -5125,6 +5125,17 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
d56 5
d67 1
a67 1
@@@@ -5178,6 +5189,10 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.13
log
@Update to LLVM 3.2 and switces to __guard_local for stack protector support.

Initial work from landry@@ with some fixes and further tweaking from pascal@@ and brad@@

ok sthen@@ landry@@
@
text
@d1 7
a7 4
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.12 2012/08/31 16:21:20 pascal Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Wed Nov 21 08:56:23 2012
+++ tools/clang/lib/Driver/Tools.cpp	Mon Dec 10 19:22:58 2012
@@@@ -5125,6 +5125,9 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
d11 8
d25 11
@


1.12
log
@Disable PIE for now in clang until someone is masochistic enough to figure
out how to best handle enabling it by default.  Manually speficying -fpie
-Wl,-pie will still work, of course.

ok sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.11 2012/08/29 00:45:47 sthen Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Wed Apr 18 23:32:25 2012
+++ tools/clang/lib/Driver/Tools.cpp	Fri Aug 31 13:20:45 2012
@@@@ -4601,6 +4601,9 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
a13 25
@@@@ -4672,14 +4675,21 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
     // the default system libraries. Just mimic this for now.
     CmdArgs.push_back("-lgcc");
 
-    if (Args.hasArg(options::OPT_pthread))
-      CmdArgs.push_back("-lpthread");
+    if (Args.hasArg(options::OPT_pthread)) {
+      if (!Args.hasArg(options::OPT_shared) &&
+          Args.hasArg(options::OPT_pg))
+         CmdArgs.push_back("-lpthread_p");
+      else
+         CmdArgs.push_back("-lpthread");
+    }
+
     if (!Args.hasArg(options::OPT_shared)) {
-      if (Args.hasArg(options::OPT_pg)) 
+      if (Args.hasArg(options::OPT_pg))
          CmdArgs.push_back("-lc_p");
       else
          CmdArgs.push_back("-lc");
     }
+
     CmdArgs.push_back("-lgcc");
   }
 
@


1.11
log
@Re-sync CLang with the OBSD_LIB_SPEC now used in base (-lc for libs was
removed again). From Brad.
@
text
@d1 14
a14 4
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.10 2012/08/21 17:51:53 pascal Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Wed Apr 18 17:32:25 2012
+++ tools/clang/lib/Driver/Tools.cpp	Sat Aug 25 10:29:30 2012
@@@@ -4672,14 +4672,21 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
@


1.10
log
@Mimic the new gcc -pthread semantics.  From Brad.

looks good to matthew@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
+++ tools/clang/lib/Driver/Tools.cpp	Thu Aug 16 02:23:30 2012
@@@@ -4672,14 +4672,20 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
a9 3
-    if (!Args.hasArg(options::OPT_shared)) {
-      if (Args.hasArg(options::OPT_pg)) 
-         CmdArgs.push_back("-lc_p");
d14 8
d23 1
a23 2
-         CmdArgs.push_back("-lc");
+         CmdArgs.push_back("-lpthread");
a24 6
+
+    if (!Args.hasArg(options::OPT_shared) &&
+        Args.hasArg(options::OPT_pg)) 
+      CmdArgs.push_back("-lc_p");
+    else
+      CmdArgs.push_back("-lc");
@


1.9
log
@Update to LLVM 3.1.
Thanks Brad for pointing out a few problems with my original diff.
@
text
@d1 19
a19 31
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.8 2011/12/14 22:58:23 sthen Exp $

- let profiling work on OpenBSD

--- tools/clang/lib/Driver/Tools.cpp.orig	Mon Nov  7 10:27:39 2011
+++ tools/clang/lib/Driver/Tools.cpp	Wed Dec 14 20:23:29 2011
@@@@ -3805,9 +3805,13 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   if (!Args.hasArg(options::OPT_nostdlib) &&
       !Args.hasArg(options::OPT_nostartfiles)) {
     if (!Args.hasArg(options::OPT_shared)) {
+      if (Args.hasArg(options::OPT_pg))  
+        CmdArgs.push_back(Args.MakeArgString(
+                                getToolChain().GetFilePath("gcrt0.o")));
+      else
+        CmdArgs.push_back(Args.MakeArgString(
+                                getToolChain().GetFilePath("crt0.o")));
       CmdArgs.push_back(Args.MakeArgString(
-                              getToolChain().GetFilePath("crt0.o")));
-      CmdArgs.push_back(Args.MakeArgString(
                               getToolChain().GetFilePath("crtbegin.o")));
     } else {
       CmdArgs.push_back(Args.MakeArgString(
@@@@ -3831,7 +3835,10 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
       !Args.hasArg(options::OPT_nodefaultlibs)) {
     if (D.CCCIsCXX) {
       getToolChain().AddCXXStdlibLibArgs(Args, CmdArgs);
-      CmdArgs.push_back("-lm");
+      if (Args.hasArg(options::OPT_pg)) 
+        CmdArgs.push_back("-lm_p");
+      else
+        CmdArgs.push_back("-lm");
d21 7
a27 11
 
     // FIXME: For some reason GCC passes -lgcc before adding
@@@@ -3841,7 +3848,10 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
     if (Args.hasArg(options::OPT_pthread))
       CmdArgs.push_back("-lpthread");
     if (!Args.hasArg(options::OPT_shared))
-      CmdArgs.push_back("-lc");
+      if (Args.hasArg(options::OPT_pg)) 
+         CmdArgs.push_back("-lc_p");
+      else
+         CmdArgs.push_back("-lc");
@


1.8
log
@update to LLVM/CLang 3.0, thanks sebastia@@ for testing.

- switch to cmake build
- add profiling support from jsg@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.7
log
@update to 2.9
ok sthen@@ tested by matthew@@ jeremy@@
@
text
@d1 32
a32 4
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.6 2011/01/13 00:15:50 jeremy Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Thu Sep  2 16:59:25 2010
+++ tools/clang/lib/Driver/Tools.cpp	Thu Jan  6 11:29:39 2011
@@@@ -2631,7 +2631,7 @@@@ void auroraux::Link::ConstructJob(Compilation &C, cons
d34 12
a45 4
   CmdArgs.push_back(Args.MakeArgString("-L/opt/gcc4/lib/gcc/"
                                        + getToolChain().getTripleString()
-                                       + "/4.2.4"));
+                                       + "/4.2.1"));
a46 2
   Args.AddAllArgs(CmdArgs, options::OPT_L);
   Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
@


1.6
log
@Bump llvm version to 2.8.

OK @@sthen
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.5 2010/06/12 12:15:08 sthen Exp $
@


1.5
log
@Adjust LLVM/CLang to work with GCC4 in base, while still working
with ports GCC4 for arch which haven't switched yet.

With/ok jsg@@.
@
text
@d1 9
a9 21
$OpenBSD$
--- tools/clang/lib/Driver/Tools.cpp.orig	Sun Mar  7 04:46:18 2010
+++ tools/clang/lib/Driver/Tools.cpp	Thu Jun 10 16:12:25 2010
@@@@ -576,6 +576,11 @@@@ void Clang::AddX86TargetArgs(const ArgList &Args,
         CPUName = "core2";
       else if (getToolChain().getArchName() == "i386")
         CPUName = "yonah";
+    } else if (getToolChain().getOS().startswith("openbsd"))  {
+      if (getToolChain().getArchName() == "x86_64")
+        CPUName = "x86-64";
+      else if (getToolChain().getArchName() == "i386")
+        CPUName = "i486";
     } else {
       if (getToolChain().getArchName() == "x86_64")
         CPUName = "x86-64";
@@@@ -2551,7 +2556,7 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   if (Triple.substr(0, 6) == "x86_64")
     Triple.replace(0, 6, "amd64");
   CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple +
-                                       "/3.3.5"));
+                                       "/4.2.1"));
@


1.4
log
@Update to LLVM/Clang 2.7
ok sthen@@
@
text
@d2 2
a3 2
--- tools/clang/lib/Driver/Tools.cpp.orig	Sun Mar  7 05:46:18 2010
+++ tools/clang/lib/Driver/Tools.cpp	Wed Apr 28 21:14:33 2010
d16 1
a16 2
@@@@ -2550,8 +2555,8 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
   std::string Triple = getToolChain().getTripleString();
d19 1
a19 1
-  CmdArgs.push_back(Args.MakeArgString("-L/usr/lib/gcc-lib/" + Triple +
d21 1
a21 2
+  CmdArgs.push_back(Args.MakeArgString("-L/usr/local/lib/gcc/" + Triple +
+                                       "/4.2.4"));
a24 13
@@@@ -2576,6 +2581,12 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
 
   if (!Args.hasArg(options::OPT_nostdlib) &&
       !Args.hasArg(options::OPT_nodefaultlibs)) {
+    if (D.CCCIsCXX) {
+      CmdArgs.push_back("-L/usr/local/lib");
+      CmdArgs.push_back("-lestdc++");
+      CmdArgs.push_back("-lm");
+    }
+
     // FIXME: For some reason GCC passes -lgcc before adding
     // the default system libraries. Just mimic this for now.
     CmdArgs.push_back("-lgcc");
@


1.3
log
@update to 2.6
ok sthen@@
@
text
@d2 22
a23 13
--- tools/clang/lib/Driver/Tools.cpp.orig	Sun Nov  1 22:19:03 2009
+++ tools/clang/lib/Driver/Tools.cpp	Sun Nov  1 22:19:06 2009
@@@@ -1992,9 +1992,12 @@@@ void openbsd::Link::ConstructJob(Compilation &C, const
     }
   }
 
+  std::string Triple = getToolChain().getTripleString();
+  if (Triple.substr(0, 6) == "x86_64")
+    Triple.replace(0, 6, "amd64");
   CmdArgs.push_back(MakeFormattedString(Args,
                            llvm::format("-L/usr/lib/gcc-lib/%s/3.3.5",
-                           getToolChain().getTripleString().c_str())));
+                           Triple.c_str())));
d27 13
@


1.2
log
@Update to a newer snapshot, requested by jsg@@. Fixes building autoconf
projects, upstream rolled in the OpenBSD backend with proper target-specific
definitions etc.
@
text
@d1 6
a6 6
$OpenBSD: patch-tools_clang_lib_Driver_Tools_cpp,v 1.1 2009/06/25 15:25:13 sthen Exp $
--- tools/clang/lib/Driver/Tools.cpp.orig	Mon Jun  8 23:48:20 2009
+++ tools/clang/lib/Driver/Tools.cpp	Thu Jun 25 10:01:13 2009
@@@@ -1747,6 +1747,141 @@@@ void darwin::Lipo::ConstructJob(Compilation &C, const 
   Dest.addCommand(new Command(Exec, CmdArgs));
 }
d8 7
a14 135
+void openbsd::Assemble::ConstructJob(Compilation &C, const JobAction &JA,
+                                     Job &Dest, const InputInfo &Output,
+                                     const InputInfoList &Inputs,
+                                     const ArgList &Args,
+                                     const char *LinkingOutput) const
+{
+  ArgStringList CmdArgs;
+
+  Args.AddAllArgValues(CmdArgs, options::OPT_Wa_COMMA,
+                       options::OPT_Xassembler);
+
+  CmdArgs.push_back("-o");
+  if (Output.isPipe())
+    CmdArgs.push_back("-");
+  else
+    CmdArgs.push_back(Output.getFilename());
+
+  for (InputInfoList::const_iterator
+         it = Inputs.begin(), ie = Inputs.end(); it != ie; ++it) {
+    const InputInfo &II = *it;
+    if (II.isPipe())
+      CmdArgs.push_back("-");
+    else
+      CmdArgs.push_back(II.getFilename());
+  }
+
+  const char *Exec =
+    Args.MakeArgString(getToolChain().GetProgramPath(C, "as").c_str());
+  Dest.addCommand(new Command(Exec, CmdArgs));
+}
+
+void openbsd::Link::ConstructJob(Compilation &C, const JobAction &JA,
+                                 Job &Dest, const InputInfo &Output,
+                                 const InputInfoList &Inputs,
+                                 const ArgList &Args,
+                                 const char *LinkingOutput) const {
+  const Driver &D = getToolChain().getHost().getDriver();
+  ArgStringList CmdArgs;
+
+  if (Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("-Bstatic");
+  } else {
+    CmdArgs.push_back("--eh-frame-hdr");
+    if (Args.hasArg(options::OPT_shared)) {
+      CmdArgs.push_back("-Bshareable");
+    } else {
+      CmdArgs.push_back("-dynamic-linker");
+      CmdArgs.push_back("/usr/libexec/ld.so");
+    }
+  }
+
+  if (Output.isPipe()) {
+    CmdArgs.push_back("-o");
+    CmdArgs.push_back("-");
+  } else if (Output.isFilename()) {
+    CmdArgs.push_back("-o");
+    CmdArgs.push_back(Output.getFilename());
+  } else {
+    assert(Output.isNothing() && "Invalid output.");
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib) &&
+      !Args.hasArg(options::OPT_nostartfiles)) {
+    if (!Args.hasArg(options::OPT_shared)) {
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath(C, "crt0.o").c_str()));
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath(C, "crtbegin.o").c_str()));
+    } else {
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath(C, "crtbeginS.o").c_str()));
+    }
+  }
+
+  Args.AddAllArgs(CmdArgs, options::OPT_L);
+  Args.AddAllArgs(CmdArgs, options::OPT_T_Group);
+  Args.AddAllArgs(CmdArgs, options::OPT_e);
+
+  for (InputInfoList::const_iterator
+         it = Inputs.begin(), ie = Inputs.end(); it != ie; ++it) {
+    const InputInfo &II = *it;
+
+    // Don't try to pass LLVM inputs to a generic gcc.
+    if (II.getType() == types::TY_LLVMBC)
+      D.Diag(clang::diag::err_drv_no_linker_llvm_support)
+        << getToolChain().getTripleString().c_str();
+
+    if (II.isPipe())
+      CmdArgs.push_back("-");
+    else if (II.isFilename())
+      CmdArgs.push_back(II.getFilename());
+    else
+      II.getInputArg().renderAsInput(Args, CmdArgs);
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib) &&
+      !Args.hasArg(options::OPT_nodefaultlibs)) {
+#if 0
+    // FIXME: For some reason GCC passes -lgcc and -lgcc_s before adding
+    // the default system libraries. Just mimic this for now.
+    CmdArgs.push_back("-lgcc");
+    if (Args.hasArg(options::OPT_static)) {
+      CmdArgs.push_back("-lgcc_eh");
+    } else {
+      CmdArgs.push_back("--as-needed");
+      CmdArgs.push_back("-lgcc_s");
+      CmdArgs.push_back("--no-as-needed");
+    }
+#endif
+
+    if (Args.hasArg(options::OPT_pthread))
+      CmdArgs.push_back("-pthread");
+    CmdArgs.push_back("-lc");
+
+#if 0
+    CmdArgs.push_back("-lgcc");
+    if (Args.hasArg(options::OPT_static)) {
+      CmdArgs.push_back("-lgcc_eh");
+    } else {
+      CmdArgs.push_back("--as-needed");
+      CmdArgs.push_back("-lgcc_s");
+      CmdArgs.push_back("--no-as-needed");
+    }
+#endif
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib) &&
+      !Args.hasArg(options::OPT_nostartfiles)) {
+    if (!Args.hasArg(options::OPT_shared))
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath(C, "crtend.o").c_str()));
+    else
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath(C, "crtendS.o").c_str()));
+  }
+
+  const char *Exec =
+    Args.MakeArgString(getToolChain().GetProgramPath(C, "ld").c_str());
+  Dest.addCommand(new Command(Exec, CmdArgs));
+}
d16 2
a17 2
 void freebsd::Assemble::ConstructJob(Compilation &C, const JobAction &JA,
                                      Job &Dest, const InputInfo &Output,
@


1.1
log
@- add OpenBSD config; from jsg@@.
- install a symlink as a workaround to a bug identifying the path to clang-cc.

commit approved by naddy.
@
text
@d1 1
a1 1
$OpenBSD$
@

