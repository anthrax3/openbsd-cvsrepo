head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.24
date	2017.03.14.17.29.45;	author ajacoutot;	state Exp;
branches;
next	1.23;
commitid	XTiylXnMOG4h8Oxu;

1.23
date	2017.03.01.08.55.28;	author ajacoutot;	state Exp;
branches;
next	1.22;
commitid	VdmexSNWBBWUTciv;

1.22
date	2017.02.22.09.06.11;	author ajacoutot;	state Exp;
branches;
next	1.21;
commitid	9ZrYu7Yze0vnuAKe;

1.21
date	2017.02.20.07.04.00;	author ajacoutot;	state Exp;
branches;
next	1.20;
commitid	80OcmKVht3SvjxRS;

1.20
date	2017.02.10.09.37.43;	author ajacoutot;	state Exp;
branches;
next	1.19;
commitid	fevyFq3hanzfmR8U;

1.19
date	2016.12.22.11.07.13;	author ajacoutot;	state Exp;
branches;
next	1.18;
commitid	O47C1FT214H07LYC;

1.18
date	2016.12.21.09.27.57;	author jsg;	state Exp;
branches;
next	1.17;
commitid	aZfc5zLmQdAEcyHn;

1.17
date	2016.10.07.08.55.30;	author ajacoutot;	state Exp;
branches;
next	1.16;
commitid	9CZYQ6vy0MJoEWYH;

1.16
date	2016.09.24.12.35.38;	author ajacoutot;	state Exp;
branches;
next	1.15;
commitid	P8uBvX7hMStbSNIu;

1.15
date	2016.09.18.07.46.32;	author ajacoutot;	state Exp;
branches;
next	1.14;
commitid	InSmiybwC5cxVzHp;

1.14
date	2016.03.05.15.31.41;	author pascal;	state dead;
branches;
next	1.13;
commitid	Hqi865xYWk2i2UMI;

1.13
date	2015.06.15.06.20.48;	author ajacoutot;	state Exp;
branches;
next	1.12;
commitid	JHj0Zl8dBKRa3uaM;

1.12
date	2015.05.21.05.37.50;	author ajacoutot;	state Exp;
branches;
next	1.11;
commitid	vqWnVCEAUKYHuK41;

1.11
date	2014.08.29.14.28.32;	author brad;	state dead;
branches;
next	1.10;
commitid	AMVKIbMANJibkg5R;

1.10
date	2014.04.18.09.30.48;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.21.22.09.12;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2012.12.23.20.49.29;	author brad;	state dead;
branches;
next	1.7;

1.7
date	2012.08.08.09.35.24;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.06.22.35.26;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.25.09.05.49;	author sthen;	state dead;
branches;
next	1.4;

1.4
date	2012.04.23.23.11.01;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.14.22.58.23;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.09.11.26.03;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2009.06.25.15.25.13;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Update to llvm-4.0.0.

from Brad (maintainer)
@
text
@$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.23 2017/03/01 08:55:28 ajacoutot Exp $

- Enable support for __float128 in Clang on OpenBSD/X86
- Set ABIs correctly for OpenBSD/arm; soft float and aapcs-linux
- Hook up OpenBSD AArch64 support
- Set the Int64Type / IntMaxType types correctly for OpenBSD/mips64

--- tools/clang/lib/Basic/Targets.cpp.orig	Wed Feb  8 20:35:17 2017
+++ tools/clang/lib/Basic/Targets.cpp	Mon Feb 27 15:31:50 2017
@@@@ -545,6 +545,8 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
     Builder.defineMacro("__ELF__");
     if (Opts.POSIXThreads)
       Builder.defineMacro("_REENTRANT");
+    if (this->HasFloat128)
+      Builder.defineMacro("__FLOAT128__");
   }
 public:
   OpenBSDTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
@@@@ -552,11 +554,11 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
     this->TLSSupported = false;
 
       switch (Triple.getArch()) {
-        default:
         case llvm::Triple::x86:
         case llvm::Triple::x86_64:
-        case llvm::Triple::arm:
-        case llvm::Triple::sparc:
+          this->HasFloat128 = true;
+          // FALLTHROUGH
+        default:
           this->MCountName = "__mcount";
           break;
         case llvm::Triple::mips64:
@@@@ -5144,6 +5146,8 @@@@ class ARMTargetInfo : public TargetInfo { (public)
       default:
         if (Triple.getOS() == llvm::Triple::NetBSD)
           setABI("apcs-gnu");
+        else if (Triple.getOS() == llvm::Triple::OpenBSD)
+          setABI("aapcs-linux");
         else
           setABI("aapcs");
         break;
@@@@ -5925,7 +5929,8 @@@@ class AArch64TargetInfo : public TargetInfo {
 public:
   AArch64TargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
       : TargetInfo(Triple), ABI("aapcs") {
-    if (getTriple().getOS() == llvm::Triple::NetBSD) {
+    if (getTriple().getOS() == llvm::Triple::NetBSD ||
+        getTriple().getOS() == llvm::Triple::OpenBSD) {
       WCharType = SignedInt;
 
       // NetBSD apparently prefers consistency across ARM targets to consistency
@@@@ -7535,7 +7540,11 @@@@ class MipsTargetInfo : public TargetInfo { (public)
 
   void setN64ABITypes() {
     setN32N64ABITypes();
-    Int64Type = SignedLong;
+    if (getTriple().getOS() == llvm::Triple::OpenBSD) {
+      Int64Type = SignedLongLong;
+    } else {
+      Int64Type = SignedLong;
+    }
     IntMaxType = Int64Type;
     LongWidth = LongAlign = 64;
     PointerWidth = PointerAlign = 64;
@@@@ -8574,6 +8583,8 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
       return new LinuxTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<AArch64leTargetInfo>(Triple, Opts);
+    case llvm::Triple::OpenBSD:
+      return new OpenBSDTargetInfo<AArch64leTargetInfo>(Triple, Opts);
     default:
       return new AArch64leTargetInfo(Triple, Opts);
     }
@


1.23
log
@Fix types for OpenBSD/mips64.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.22 2017/02/22 09:06:11 ajacoutot Exp $
d4 1
a4 1
- Set ABI for ARM
d6 1
a6 1
- Fix types for OpenBSD/mips64
@


1.22
log
@Fix OpenBSD/aarch64 types.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.21 2017/02/20 07:04:00 ajacoutot Exp $
d6 1
d9 1
a9 1
+++ tools/clang/lib/Basic/Targets.cpp	Tue Feb 21 18:34:04 2017
d53 14
a66 1
@@@@ -8574,6 +8579,8 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
@


1.21
log
@Sync both the --eh-frame-hdr and float128 diffs to what was commited
upstream.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.20 2017/02/10 09:37:43 ajacoutot Exp $
d5 1
a5 1
- [OpenBSD] set OpenBSD defines for aarch64
d8 1
a8 1
+++ tools/clang/lib/Basic/Targets.cpp	Sun Feb 19 17:36:20 2017
d42 11
a52 1
@@@@ -8574,6 +8578,8 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
@


1.20
log
@Update to llvm-4.0.0rc2.
- survived a bulk on i386 and amd64

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.19 2016/12/22 11:07:13 ajacoutot Exp $
d3 1
a3 1
- Enable __float128 support on X86
d7 2
a8 2
--- tools/clang/lib/Basic/Targets.cpp.orig	Tue Jan 10 21:16:47 2017
+++ tools/clang/lib/Basic/Targets.cpp	Tue Jan 10 22:19:10 2017
d18 2
a19 1
@@@@ -553,8 +555,11 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
d22 1
a22 2
         default:
+          break;
d25 2
d29 1
a29 2
         case llvm::Triple::arm:
         case llvm::Triple::sparc:
d31 3
a33 1
@@@@ -5144,6 +5149,8 @@@@ class ARMTargetInfo : public TargetInfo { (public)
d42 1
a42 1
@@@@ -8574,6 +8581,8 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
@


1.19
log
@Update to llvm-3.9.1.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.18 2016/12/21 09:27:57 jsg Exp $
a3 1
- [OpenBSD] Add type sign information for OpenBSD
d7 3
a9 3
--- tools/clang/lib/Basic/Targets.cpp.orig	Tue Nov 29 10:53:17 2016
+++ tools/clang/lib/Basic/Targets.cpp	Wed Dec 21 19:39:24 2016
@@@@ -542,6 +542,8 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
d18 1
a18 1
@@@@ -550,8 +552,11 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
d30 1
a30 29
@@@@ -4641,8 +4646,10 @@@@ class ARMTargetInfo : public TargetInfo {
     DoubleAlign = LongLongAlign = LongDoubleAlign = SuitableAlign = 64;
     const llvm::Triple &T = getTriple();
 
-    // size_t is unsigned long on MachO-derived environments, NetBSD and Bitrig.
+    // size_t is unsigned long on MachO-derived environments, NetBSD,
+    // OpenBSD and Bitrig.
     if (T.isOSBinFormatMachO() || T.getOS() == llvm::Triple::NetBSD ||
+        T.getOS() == llvm::Triple::OpenBSD ||
         T.getOS() == llvm::Triple::Bitrig)
       SizeType = UnsignedLong;
     else
@@@@ -4650,6 +4657,7 @@@@ class ARMTargetInfo : public TargetInfo {
 
     switch (T.getOS()) {
     case llvm::Triple::NetBSD:
+    case llvm::Triple::OpenBSD:
       WCharType = SignedInt;
       break;
     case llvm::Triple::Win32:
@@@@ -4849,6 +4857,7 @@@@ class ARMTargetInfo : public TargetInfo {
 
     switch (getTriple().getOS()) {
     case llvm::Triple::NetBSD:
+    case llvm::Triple::OpenBSD:
       PtrDiffType = SignedLong;
       break;
     default:
@@@@ -4901,6 +4910,8 @@@@ class ARMTargetInfo : public TargetInfo {
d39 1
a39 1
@@@@ -8161,6 +8172,8 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
@


1.18
log
@Recognise an OpenBSD aarch64 triple.  This enables some OpenBSD specific
builtin defines such as __OpenBSD__.  Same patch that patrick committed
to llvm in base.

ok patrick@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.17 2016/10/07 08:55:30 ajacoutot Exp $
d8 3
a10 3
--- tools/clang/lib/Basic/Targets.cpp.orig	Tue Jul 26 02:21:28 2016
+++ tools/clang/lib/Basic/Targets.cpp	Mon Dec 19 21:48:14 2016
@@@@ -531,6 +531,8 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
d19 1
a19 1
@@@@ -539,8 +541,11 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
d31 1
a31 1
@@@@ -4628,8 +4633,10 @@@@ class ARMTargetInfo : public TargetInfo {
d43 1
a43 1
@@@@ -4637,6 +4644,7 @@@@ class ARMTargetInfo : public TargetInfo {
d51 1
a51 1
@@@@ -4836,6 +4844,7 @@@@ class ARMTargetInfo : public TargetInfo {
d59 1
a59 1
@@@@ -4888,6 +4897,8 @@@@ class ARMTargetInfo : public TargetInfo {
d68 1
a68 1
@@@@ -8148,6 +8159,8 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
@


1.17
log
@Update to LLVM 3.9.0.
Been through bulks on amd64 / i386 by sthen@@ and naddy@@ respectively.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.16 2016/09/24 12:35:38 ajacoutot Exp $
d6 1
d8 2
a9 2
--- tools/clang/lib/Basic/Targets.cpp.orig	Mon Jul 25 12:21:28 2016
+++ tools/clang/lib/Basic/Targets.cpp	Sat Sep 24 12:02:09 2016
d68 9
@


1.16
log
@Adjust default CPU for OpenBSD/arm and set proper ABI.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.15 2016/09/18 07:46:32 ajacoutot Exp $
d3 1
d7 24
a30 3
--- tools/clang/lib/Basic/Targets.cpp.orig	Tue May 24 15:36:54 2016
+++ tools/clang/lib/Basic/Targets.cpp	Mon Sep 19 20:59:16 2016
@@@@ -4275,8 +4275,10 @@@@ class ARMTargetInfo : public TargetInfo {
d42 1
a42 1
@@@@ -4284,6 +4286,7 @@@@ class ARMTargetInfo : public TargetInfo {
d50 1
a50 1
@@@@ -4475,6 +4478,7 @@@@ class ARMTargetInfo : public TargetInfo {
d58 1
a58 1
@@@@ -4525,6 +4529,8 @@@@ class ARMTargetInfo : public TargetInfo {
@


1.15
log
@Merge in the fix clang types force soft-float on arm patches.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 1
fix clang types on arm
d6 2
a7 2
--- tools/clang/lib/Basic/Targets.cpp.orig	Sat Sep 17 13:20:27 2016
+++ tools/clang/lib/Basic/Targets.cpp	Sat Sep 17 13:22:32 2016
d36 9
@


1.14
log
@Update to LLVM 3.7.1.  This version is modified to use C++ includes from
ports GCC and link to libestdc++.

Currently, this still breaks mail/mozilla-thunderbird, which will be taken care
of shortly.

feedback/testing from jsg landry mmcc semarie aja naddy (hope I didn't forget
anyone)

ok landry robert
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.13 2015/06/15 06:20:48 ajacoutot Exp $
d3 1
a3 4
r236179
Propagate a terrible hack to the sparc target feature handling code
by erasing the soft-float target feature if the rest of the front
end added it because of defaults or the soft float option.
d5 5
a9 44
r239046
[SPARC] Fix types of size_t, intptr_t, and ptrdiff_t on Linux.

They should be 'int' instead of 'long int' everywhere else except
NetBSD too, from what I gather in GCC's spec files. So, optimistically
changing it for everyone else, too.

--- tools/clang/lib/Basic/Targets.cpp.orig	Sun Mar  2 22:03:40 2014
+++ tools/clang/lib/Basic/Targets.cpp	Fri Jun  5 00:55:44 2015
@@@@ -4477,9 +4477,12 @@@@ class SparcTargetInfo : public TargetInfo { (public)
   virtual bool handleTargetFeatures(std::vector<std::string> &Features,
                                     DiagnosticsEngine &Diags) {
     SoftFloat = false;
-    for (unsigned i = 0, e = Features.size(); i != e; ++i)
-      if (Features[i] == "+soft-float")
-        SoftFloat = true;
+    std::vector<std::string>::iterator Feature =
+      std::find(Features.begin(), Features.end(), "+soft-float");
+    if (Feature != Features.end()) {
+      SoftFloat = true;
+      Features.erase(Feature);
+    }
     return true;
   }
   virtual void getTargetDefines(const LangOptions &Opts,
@@@@ -4579,6 +4582,20 @@@@ class SparcV8TargetInfo : public SparcTargetInfo {
 public:
   SparcV8TargetInfo(const llvm::Triple &Triple) : SparcTargetInfo(Triple) {
     DescriptionString = "E-m:e-p:32:32-i64:64-f128:64-n32-S64";
+    // NetBSD / OpenBSD use long (same as llvm default); everyone else uses int.
+    switch (getTriple().getOS()) {
+    default:
+      SizeType = UnsignedInt;
+      IntPtrType = SignedInt;
+      PtrDiffType = SignedInt;
+      break;
+    case llvm::Triple::NetBSD:
+    case llvm::Triple::OpenBSD:
+      SizeType = UnsignedLong;
+      IntPtrType = SignedLong;
+      PtrDiffType = SignedLong;
+      break;
+    }
   }
d11 9
a19 3
   virtual void getTargetDefines(const LangOptions &Opts,
@@@@ -4650,25 +4667,6 @@@@ class SparcV9TargetInfo : public SparcTargetInfo { (pu
 } // end anonymous namespace.
d21 7
a27 22
 namespace {
-class AuroraUXSparcV8TargetInfo : public AuroraUXTargetInfo<SparcV8TargetInfo> {
-public:
-  AuroraUXSparcV8TargetInfo(const llvm::Triple &Triple)
-      : AuroraUXTargetInfo<SparcV8TargetInfo>(Triple) {
-    SizeType = UnsignedInt;
-    PtrDiffType = SignedInt;
-  }
-};
-class SolarisSparcV8TargetInfo : public SolarisTargetInfo<SparcV8TargetInfo> {
-public:
-  SolarisSparcV8TargetInfo(const llvm::Triple &Triple)
-      : SolarisTargetInfo<SparcV8TargetInfo>(Triple) {
-    SizeType = UnsignedInt;
-    PtrDiffType = SignedInt;
-  }
-};
-} // end anonymous namespace.
-
-namespace {
   class SystemZTargetInfo : public TargetInfo {
     static const char *const GCCRegNames[];
d29 1
a29 9
@@@@ -5812,9 +5810,9 @@@@ static TargetInfo *AllocateTarget(const llvm::Triple &
     case llvm::Triple::Linux:
       return new LinuxTargetInfo<SparcV8TargetInfo>(Triple);
     case llvm::Triple::AuroraUX:
-      return new AuroraUXSparcV8TargetInfo(Triple);
+      return new AuroraUXTargetInfo<SparcV8TargetInfo>(Triple);
     case llvm::Triple::Solaris:
-      return new SolarisSparcV8TargetInfo(Triple);
+      return new SolarisTargetInfo<SparcV8TargetInfo>(Triple);
d31 4
a34 2
       return new NetBSDTargetInfo<SparcV8TargetInfo>(Triple);
     case llvm::Triple::OpenBSD:
@


1.13
log
@Backport commit from upstream LLVM:

r239046
[SPARC] Fix types of size_t, intptr_t, and ptrdiff_t on Linux.

from brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.12 2015/05/21 05:37:50 ajacoutot Exp $
@


1.12
log
@Backport commit from upstream LLVM: r236179
Propagate a terrible hack to the sparc target feature handling code
by erasing the soft-float target feature if the rest of the front
end added it because of defaults or the soft float option.

from brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
d8 9
a16 2
--- tools/clang/lib/Basic/Targets.cpp.orig	Wed May 20 14:30:32 2015
+++ tools/clang/lib/Basic/Targets.cpp	Wed May 20 14:38:08 2015
d33 59
@


1.11
log
@- Remove a local PowerPC patch we don't need.
- A fix for the SPARC float handling. Adding the missing & to the field allows
  the backend feature flag to be passed back which it was not without it.
- Add some patches to enable the integrated assembler on PowerPC / SPARC.
  I left these out before as I thought because Clang was not obeying this
  setting and had its own similar bits they were not necessary but turns
  out the backend has some code that does obey this setting.

ok sthen@@
@
text
@d1 23
a23 19
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.10 2014/04/18 09:30:48 brad Exp $
--- tools/clang/lib/Basic/Targets.cpp.orig	Fri Jan 31 06:34:47 2014
+++ tools/clang/lib/Basic/Targets.cpp	Fri Jan 31 06:43:54 2014
@@@@ -909,7 +909,6 @@@@ bool PPCTargetInfo::handleTargetFeatures(std::vector<s
 void PPCTargetInfo::getTargetDefines(const LangOptions &Opts,
                                      MacroBuilder &Builder) const {
   // Target identification.
-  Builder.defineMacro("__ppc__");
   Builder.defineMacro("__PPC__");
   Builder.defineMacro("_ARCH_PPC");
   Builder.defineMacro("__powerpc__");
@@@@ -919,6 +918,10 @@@@ void PPCTargetInfo::getTargetDefines(const LangOptions
     Builder.defineMacro("__powerpc64__");
     Builder.defineMacro("__ppc64__");
     Builder.defineMacro("__PPC64__");
+  } else {
+    Builder.defineMacro("__powerpc");
+    Builder.defineMacro("__ppc__");
+    Builder.defineMacro("__PPC");
d25 1
a25 2
 
   // Target properties.
@


1.10
log
@Update to LLVM 3.5 (trunk) snapshot just before switching to an unconditional
C++11 codebase.

This brings in a number of improvements over 3.4 including..
X86 assembler with 16-bit support
Much improved SPARC backend
stack protector strong support

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.9 2013/06/21 22:09:12 brad Exp $
@


1.9
log
@Update to LLVM 3.3.

ok sthen@@
@
text
@d1 4
a4 4
$OpenBSD$
--- tools/clang/lib/Basic/Targets.cpp.orig	Wed May 15 17:07:09 2013
+++ tools/clang/lib/Basic/Targets.cpp	Sun Jun  9 18:39:31 2013
@@@@ -870,16 +870,19 @@@@ const Builtin::Info PPCTargetInfo::BuiltinInfo[] = {
d9 1
a9 1
+  Builder.defineMacro("__PPC__");
d12 1
a12 4
   Builder.defineMacro("__POWERPC__");
   if (PointerWidth == 64) {
+    Builder.defineMacro("__PPC64__");
     Builder.defineMacro("_ARCH_PPC64");
d15 2
a16 1
   } else {
d18 1
a18 1
     Builder.defineMacro("__ppc__");
@


1.8
log
@Update to LLVM 3.2 and switces to __guard_local for stack protector support.

Initial work from landry@@ with some fixes and further tweaking from pascal@@ and brad@@

ok sthen@@ landry@@
@
text
@d1 21
a21 16
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.7 2012/08/08 09:35:24 sthen Exp $

- OpenBSD does not support TLS.
- Provide target support for powerpc, arm, mips64, mips64el and sparc.

--- tools/clang/lib/Basic/Targets.cpp.orig	Wed Apr 25 19:26:22 2012
+++ tools/clang/lib/Basic/Targets.cpp	Wed Aug  8 10:32:41 2012
@@@@ -371,6 +371,7 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
   OpenBSDTargetInfo(const std::string &triple)
     : OSTargetInfo<Target>(triple) {
       this->UserLabelPrefix = "";
+      this->TLSSupported = false;
 
       llvm::Triple Triple(triple);
       switch (Triple.getArch()) {
@@@@ -727,7 +728,8 @@@@ void PPCTargetInfo::getTargetDefines(const LangOptions
a24 51
-  if (getTriple().getOS() != llvm::Triple::NetBSD)
+  if (getTriple().getOS() != llvm::Triple::NetBSD &&
+      getTriple().getOS() != llvm::Triple::OpenBSD)
     Builder.defineMacro("_BIG_ENDIAN");
   Builder.defineMacro("__BIG_ENDIAN__");
 
@@@@ -3926,6 +3928,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
       return new FreeBSDTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<ARMTargetInfo>(T);
+    case llvm::Triple::OpenBSD:
+      return new OpenBSDTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::RTEMS:
       return new RTEMSTargetInfo<ARMTargetInfo>(T);
     default:
@@@@ -3973,6 +3977,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
       return new FreeBSDTargetInfo<Mips64EBTargetInfo>(T);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<Mips64EBTargetInfo>(T);
+    case llvm::Triple::OpenBSD:
+      return new OpenBSDTargetInfo<Mips64EBTargetInfo>(T);
     default:
       return new Mips64EBTargetInfo(T);
     }
@@@@ -3987,6 +3993,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
       return new FreeBSDTargetInfo<Mips64ELTargetInfo>(T);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<Mips64ELTargetInfo>(T);
+    case llvm::Triple::OpenBSD:
+      return new OpenBSDTargetInfo<Mips64ELTargetInfo>(T);
     default:
       return new Mips64ELTargetInfo(T);
     }
@@@@ -4009,6 +4017,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
       return new FreeBSDTargetInfo<PPC32TargetInfo>(T);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<PPC32TargetInfo>(T);
+    case llvm::Triple::OpenBSD:
+      return new OpenBSDTargetInfo<PPC32TargetInfo>(T);
     case llvm::Triple::RTEMS:
       return new RTEMSTargetInfo<PPC32TargetInfo>(T);
     default:
@@@@ -4049,6 +4059,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
       return new SolarisSparcV8TargetInfo(T);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<SparcV8TargetInfo>(T);
+    case llvm::Triple::OpenBSD:
+      return new OpenBSDTargetInfo<SparcV8TargetInfo>(T);
     case llvm::Triple::RTEMS:
       return new RTEMSTargetInfo<SparcV8TargetInfo>(T);
     default:
@


1.7
log
@Sync with r161481 from upstream, "Revert part of r161175 which was wrong
for OpenBSD's PowerPC target". Problem pointed out by landry@@.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.6 2012/08/06 22:35:26 sthen Exp $
@


1.6
log
@Add several CLang patches from upstream via Brad.

- Only provide /usr/include in the default C header search path.
- OpenBSD does not support TLS.
- Provide target support for powerpc, arm, mips64, mips64el and sparc.
@
text
@d1 1
a1 1
$OpenBSD$
d6 2
a7 2
--- tools/clang/lib/Basic/Targets.cpp.orig	Wed Apr 25 14:26:22 2012
+++ tools/clang/lib/Basic/Targets.cpp	Sat Aug  4 20:18:40 2012
d26 1
a26 9
@@@@ -864,6 +866,7 @@@@ class PPC32TargetInfo : public PPCTargetInfo { (public
     case llvm::Triple::Linux:
     case llvm::Triple::FreeBSD:
     case llvm::Triple::NetBSD:
+    case llvm::Triple::OpenBSD:
       SizeType = UnsignedInt;
       PtrDiffType = SignedInt;
       IntPtrType = SignedInt;
@@@@ -3926,6 +3929,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
d35 1
a35 1
@@@@ -3973,6 +3978,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
d44 1
a44 1
@@@@ -3987,6 +3994,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
d53 1
a53 1
@@@@ -4009,6 +4018,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
d62 1
a62 1
@@@@ -4049,6 +4060,8 @@@@ static TargetInfo *AllocateTarget(const std::string &T
@


1.5
log
@Update to LLVM 3.1.
Thanks Brad for pointing out a few problems with my original diff.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.4 2012/04/23 23:11:01 sthen Exp $
d3 2
a4 2
- let profiling work on OpenBSD
- fix the symbol prefix to be empty rather than an underscore
d6 11
a16 8
--- tools/clang/lib/Basic/Targets.cpp.orig	Tue Oct 18 13:22:17 2011
+++ tools/clang/lib/Basic/Targets.cpp	Mon Apr 23 10:37:10 2012
@@@@ -363,11 +363,30 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
     DefineStd(Builder, "unix", Opts);
     Builder.defineMacro("__ELF__");
     if (Opts.POSIXThreads)
-      Builder.defineMacro("_POSIX_THREADS");
+      Builder.defineMacro("_REENTRANT");
a17 24
 public:
   OpenBSDTargetInfo(const std::string &triple)
-    : OSTargetInfo<Target>(triple) {}
+    : OSTargetInfo<Target>(triple) {
+      this->UserLabelPrefix = "";
+
+      llvm::Triple Triple(triple);
+      switch (Triple.getArch()) {
+        default:
+        case llvm::Triple::x86:
+        case llvm::Triple::x86_64:
+        case llvm::Triple::arm:
+       case llvm::Triple::sparc:
+          this->MCountName = "__mcount";
+          break;
+        case llvm::Triple::mips64:
+        case llvm::Triple::mips64el:
+        case llvm::Triple::ppc:
+       case llvm::Triple::sparcv9:
+          this->MCountName = "_mcount";
+          break;
+      }
+  }
 };
d19 60
a78 1
 // PSP Target
@


1.4
log
@Update Clang to use _REENTRANT instead of _POSIX_THREADS when using the
-pthread flag. From Brad.
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.3 2011/12/14 22:58:23 sthen Exp $
@


1.3
log
@update to LLVM/CLang 3.0, thanks sebastia@@ for testing.

- switch to cmake build
- add profiling support from jsg@@
@
text
@d1 1
a1 1
$OpenBSD$
d6 8
a13 3
--- tools/clang/lib/Basic/Targets.cpp.orig	Wed Dec 14 20:21:06 2011
+++ tools/clang/lib/Basic/Targets.cpp	Wed Dec 14 20:22:38 2011
@@@@ -367,7 +367,26 @@@@ class OpenBSDTargetInfo : public OSTargetInfo<Target> 
@


1.2
log
@Update to a newer snapshot, requested by jsg@@. Fixes building autoconf
projects, upstream rolled in the OpenBSD backend with proper target-specific
definitions etc.
@
text
@d1 14
a14 10
$OpenBSD: patch-tools_clang_lib_Basic_Targets_cpp,v 1.1 2009/06/25 15:25:13 sthen Exp $
--- tools/clang/lib/Basic/Targets.cpp.orig	Tue Jun 23 10:26:43 2009
+++ tools/clang/lib/Basic/Targets.cpp	Tue Jun 23 10:26:50 2009
@@@@ -70,6 +70,19 @@@@ static void getSolarisDefines(const LangOptions &Opts,
   Define(Defs, "__SVR4");
 }
 
+static void getOpenBSDDefines(const LangOptions &Opts, bool is64Bit,
+                              const char *Triple, std::vector<char> &Defs) {
+  // OpenBSD defines; list based off of gcc output
d16 16
a31 25
+  Define(Defs, "__OpenBSD__", "1");
+  Define(Defs, "__KPRINTF_ATTRIBUTE__");
+  DefineStd(Defs, "unix", Opts);
+  Define(Defs, "__ELF__", "1");
+  if (is64Bit) {
+    Define(Defs, "__LP64__");
+  }
+}
+
 static void getFreeBSDDefines(const LangOptions &Opts, bool is64Bit,
                               const char *Triple, std::vector<char> &Defs) {
   // FreeBSD defines; list based off of gcc output
@@@@ -862,6 +875,20 @@@@ class DarwinI386TargetInfo : public X86_32TargetInfo {
 } // end anonymous namespace
 
 namespace {
+// x86-32 OpenBSD target
+class OpenBSDX86_32TargetInfo : public X86_32TargetInfo {
+public:
+  OpenBSDX86_32TargetInfo(const std::string& triple) :
+      X86_32TargetInfo(triple) { }
+  virtual void getTargetDefines(const LangOptions &Opts,
+                                std::vector<char> &Defines) const {
+    X86_32TargetInfo::getTargetDefines(Opts, Defines);
+    getOpenBSDDefines(Opts, 0, getTargetTriple(), Defines);
d33 1
a33 9
+};
+} // end anonymous namespace
+
+namespace {
 // x86-32 FreeBSD target
 class FreeBSDX86_32TargetInfo : public X86_32TargetInfo {
 public:
@@@@ -983,6 +1010,20 @@@@ class X86_64TargetInfo : public X86TargetInfo { (publi
 } // end anonymous namespace
d35 1
a35 44
 namespace {
+// x86-64 OpenBSD target
+class OpenBSDX86_64TargetInfo : public X86_64TargetInfo {
+public:
+  OpenBSDX86_64TargetInfo(const std::string &triple)
+    : X86_64TargetInfo(triple) {}
+  virtual void getTargetDefines(const LangOptions &Opts,
+                                std::vector<char> &Defines) const {
+    X86_64TargetInfo::getTargetDefines(Opts, Defines);
+    getOpenBSDDefines(Opts, 1, getTargetTriple(), Defines);
+  }
+};
+} // end anonymous namespace
+
+namespace {
 // x86-64 FreeBSD target
 class FreeBSDX86_64TargetInfo : public X86_64TargetInfo {
 public:
@@@@ -1453,6 +1494,7 @@@@ TargetInfo* TargetInfo::CreateTargetInfo(const std::st
   // Additions and corrections are welcome.
   bool isDarwin = T.find("-darwin") != std::string::npos;
   bool isDragonFly = T.find("-dragonfly") != std::string::npos;
+  bool isOpenBSD = T.find("-openbsd") != std::string::npos;
   bool isFreeBSD = T.find("-freebsd") != std::string::npos;
   bool isSolaris = T.find("-solaris") != std::string::npos;
   bool isLinux = T.find("-linux") != std::string::npos;
@@@@ -1491,6 +1533,8 @@@@ TargetInfo* TargetInfo::CreateTargetInfo(const std::st
       return new DarwinX86_64TargetInfo(T);
     if (isLinux)
       return new LinuxX86_64TargetInfo(T);
+    if (isOpenBSD)
+      return new OpenBSDX86_64TargetInfo(T);
     if (isFreeBSD)
       return new FreeBSDX86_64TargetInfo(T);
     if (isSolaris)
@@@@ -1511,6 +1555,8 @@@@ TargetInfo* TargetInfo::CreateTargetInfo(const std::st
       return new LinuxX86_32TargetInfo(T);
     if (isDragonFly)
       return new DragonFlyX86_32TargetInfo(T);
+    if (isOpenBSD)
+      return new OpenBSDX86_32TargetInfo(T);
     if (isFreeBSD)
       return new FreeBSDX86_32TargetInfo(T);
     if (isSolaris)
@


1.1
log
@- add OpenBSD config; from jsg@@.
- install a symlink as a workaround to a bug identifying the path to clang-cc.

commit approved by naddy.
@
text
@d1 1
a1 1
$OpenBSD$
@

