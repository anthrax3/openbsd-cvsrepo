head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	sthen_20081110:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.12.07.10.30.39;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.14.22.58.23;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.21.23.13.48;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.10.11.25.33;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.11.10.11.25.33;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- Fix the test target since the switch from GNU autoconf/make to CMake
- Add the scan-build man page
- Correct the capitalization of Clang in DESCR

ok sthen@@
@
text
@The LLVM Project is a collection of modular and reusable compiler
and toolchain technologies. Despite its name, LLVM has little to
do with traditional virtual machines, though it does provide helpful
libraries that can be used to build them.

This package includes the LLVM Core and the Clang compiler suite.

The LLVM Core libraries provide a modern source- and target-independent
optimizer, along with code generation support for various popular CPUs
(i386, amd64, powerpc and arm are major targets). These libraries are
built around a well specified code representation known as the LLVM
intermediate representation ("LLVM IR"). The LLVM Core libraries are
well documented, and it is particularly easy to invent your own language
(or port an existing compiler) to use LLVM as an optimizer and code
generator.

Clang is an "LLVM native" C/C++/Objective-C compiler, which aims
to deliver fast compiles, extremely useful error and warning messages
and to provide a platform for building great source level tools.
The Clang Static Analyzer is a tool automatically finds bugs in
your code, and is a great example of the sort of tool that can be
built using the Clang frontend as a library to parse C/C++ code.
@


1.3
log
@update to LLVM/CLang 3.0, thanks sebastia@@ for testing.

- switch to cmake build
- add profiling support from jsg@@
@
text
@d6 1
a6 1
This package includes the LLVM Core and the CLang compiler suite.
@


1.2
log
@Update to a newer snapshot.
@
text
@d1 4
a4 8
Low Level Virtual Machine (LLVM) is:
- A compilation strategy designed to enable effective program
  optimization across the entire lifetime of a program.
- A virtual instruction set.
- A compiler infrastructure.
- LLVM does not imply things that you would expect from a high-level
  virtual machine. It does not require garbage collection or run-time
  code generation.
d6 17
a22 2
N.B. This package is built from development sources. As well as
LLVM, the Clang front-ends are also included.
@


1.1
log
@Initial revision
@
text
@d9 3
@


1.1.1.1
log
@import llvm/clang. not heavily tested yet but there's been a lot
of interest in the static analyser and it basically works, so put
it in now and link to the build later.

Low Level Virtual Machine (LLVM) is:
- A compilation strategy designed to enable effective program
  optimization across the entire lifetime of a program.
- A virtual instruction set.
- A compiler infrastructure.
- LLVM does not imply things that you would expect from a high-level
  virtual machine. It does not require garbage collection or run-time
  code generation.

some parts from chl@@ and the FreeBSD port.
@
text
@@
