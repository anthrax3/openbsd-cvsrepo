head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.18
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.16
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.14
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.12
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.6
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	sthen_20081110:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.06.30.19.57.14;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.03.15.03.03;	author chl;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.10.11.25.33;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.11.10.11.25.33;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- update scan-build link in MESSAGE

from tim van der molen
@
text
@For more information about using scan-build for the static
analyser, look at http://clang-analyzer.llvm.org/scan-build.html

For instance, the scanner on the kernel build can be launched with:

cd /usr/src/sys/arch/`uname -m`/conf && config GENERIC.MP
cd /usr/src/sys/arch/`uname -m`/compile/GENERIC.MP
make clean && scan-build make

This will generate HTML reports in /tmp/scan-build-(date).
@


1.2
log
@No need to "make depend" anymore to build kernel.

ok sthen@@
@
text
@d2 1
a2 1
analyser, look at http://clang.llvm.org/StaticAnalysisUsage.html
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
make clean && make depend && scan-build make
@


1.1.1.1
log
@import llvm/clang. not heavily tested yet but there's been a lot
of interest in the static analyser and it basically works, so put
it in now and link to the build later.

Low Level Virtual Machine (LLVM) is:
- A compilation strategy designed to enable effective program
  optimization across the entire lifetime of a program.
- A virtual instruction set.
- A compiler infrastructure.
- LLVM does not imply things that you would expect from a high-level
  virtual machine. It does not require garbage collection or run-time
  code generation.

some parts from chl@@ and the FreeBSD port.
@
text
@@
