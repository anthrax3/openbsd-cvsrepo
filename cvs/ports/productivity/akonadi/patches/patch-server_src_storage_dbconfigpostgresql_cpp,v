head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	zhuk_20130424:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.07.10.14.05.00;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	PYK5zoYxyTMVS76t;

1.2
date	2014.01.31.11.46.25;	author zhuk;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.24.09.05.59;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.24.09.05.59;	author zhuk;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update Akonadi to 1.12.1.
@
text
@$OpenBSD: patch-server_src_storage_dbconfigpostgresql_cpp,v 1.2 2014/01/31 11:46:25 zhuk Exp $
--- server/src/storage/dbconfigpostgresql.cpp.orig	Tue Apr  8 01:02:16 2014
+++ server/src/storage/dbconfigpostgresql.cpp	Wed May 14 11:24:14 2014
@@@@ -159,9 +159,14 @@@@ void DbConfigPostgresql::startInternalServer()
     // call 'initdb --pgdata=/home/user/.local/share/akonadi/data_db'
     const QString command = QString::fromLatin1( "%1" ).arg( mInitDbPath );
     QStringList arguments;
-    arguments << QString::fromLatin1( "--pgdata=%2" ).arg( mPgData )
-              // TODO check locale
-              << QString::fromLatin1( "--locale=en_US.UTF-8" );
+    arguments << QString::fromLatin1( "--pgdata=%2" ).arg( mPgData );
+#if defined(__OpenBSD__)
+    // Not full locale support, PostgreSQL bails out with non-C locale
+    arguments << QString::fromLatin1( "--locale=C" );
+#else
+    // TODO check locale
+    arguments << QString::fromLatin1( "--locale=en_US.UTF-8" );
+#endif
     QProcess::execute( command, arguments );
   }
 
@


1.2
log
@Forgot to sync patches. Did not build => no bump.

Spotted by nigel@@, thanks!
@
text
@d1 5
a5 5
$OpenBSD: patch-server_src_storage_dbconfigpostgresql_cpp,v 1.1.1.1 2013/04/24 09:05:59 zhuk Exp $
--- server/src/storage/dbconfigpostgresql.cpp.orig	Thu Nov 28 18:25:03 2013
+++ server/src/storage/dbconfigpostgresql.cpp	Thu Jan 30 21:23:48 2014
@@@@ -155,8 +155,13 @@@@ void DbConfigPostgresql::startInternalServer()
     // call 'initdb -D/home/user/.local/share/akonadi/data_db'
d8 2
a9 1
-    arguments << QString::fromLatin1( "-D%2" ).arg( dataDir )
d11 1
a11 1
+    arguments << QString::fromLatin1( "-D%2" ).arg( dataDir );
d16 1
d20 1
a21 1
     const QString configFileName = dataDir + QDir::separator() + QLatin1String( "postgresql.conf" );
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- server/src/storage/dbconfigpostgresql.cpp.orig	Sat Mar  2 15:51:18 2013
+++ server/src/storage/dbconfigpostgresql.cpp	Sat Mar 23 14:48:12 2013
@@@@ -146,8 +146,13 @@@@ void DbConfigPostgresql::startInternalServer()
@


1.1.1.1
log
@Import Akonadi 1.9.1.

Akonadi is a PIM layer, which provides an asynchronous API to access all kind
of PIM data (e.g. mails, contacts, events, todos etc.).

It consists of several processes (generally called the Akonadi server) and a
library (called client library) which encapsulates the communication
between the client and the server.

Note: Akonadi creates a cache of different data in ~/.local/share/akonadi,
using one or the other DB backend. By default, it uses (own) SQLite backend,
it behaves best here. If you change DB backend, you will NOT lose your data,
just the cache will need to be regenerated.

The old version in x11/kde4/akonadi will bite the dust soon.

ok landry@@
@
text
@@
