head	1.1;
access;
symbols
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2014.09.30.15.02.16;	author ajacoutot;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	EaWh9ot6gcGLnG64;

1.1.2.1
date	2014.09.30.15.02.16;	author ajacoutot;	state Exp;
branches;
next	;
commitid	EaWh9ot6gcGLnG64;

1.1.4.1
date	2014.09.30.15.03.27;	author ajacoutot;	state Exp;
branches;
next	;
commitid	oMq0fepPPymetkRz;


desc
@@


1.1
log
@file patch-trytond_tests_test_tools_py was initially added on branch OPENBSD_5_6.
@
text
@@


1.1.4.1
log
@SECURITY fixes:
* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)
@
text
@a0 20
$OpenBSD$

* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)

--- trytond/tests/test_tools.py.orig	Mon Oct 21 17:13:38 2013
+++ trytond/tests/test_tools.py	Tue Sep 30 16:59:23 2014
@@@@ -82,10 +82,8 @@@@ class ToolsTestCase(unittest.TestCase):
         self.assertRaises(Exception, safe_eval, "open('test.txt', 'w')")
 
     def test0061safe_eval_getattr(self):
-        '''
-        Attempt to get arround direct attr access.
-        '''
-        self.assertRaises(Exception, safe_eval, "getattr(int, '__abs__')")
+        'Attempt to get arround direct attr access'
+        self.assertRaises(NameError, safe_eval, "getattr(int, 'real')")
 
     def test0062safe_eval_func_globals(self):
         '''
@


1.1.2.1
log
@SECURITY fixes:
* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)
@
text
@a0 16
$OpenBSD$

* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)

--- trytond/tests/test_tools.py.orig	Sun Jun 15 18:55:33 2014
+++ trytond/tests/test_tools.py	Tue Sep 30 16:56:02 2014
@@@@ -64,7 +64,7 @@@@ class ToolsTestCase(unittest.TestCase):
 
     def test0061safe_eval_getattr(self):
         'Attempt to get arround direct attr access'
-        self.assertRaises(Exception, safe_eval, "getattr(int, '__abs__')")
+        self.assertRaises(NameError, safe_eval, "getattr(int, 'real')")
 
     def test0062safe_eval_func_globals(self):
         'Attempt to access global enviroment where fun was defined'
@

