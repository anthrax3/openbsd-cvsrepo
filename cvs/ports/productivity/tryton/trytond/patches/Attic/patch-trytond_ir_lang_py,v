head	1.1;
access;
symbols
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2014.09.30.15.02.16;	author ajacoutot;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	EaWh9ot6gcGLnG64;

1.1.2.1
date	2014.09.30.15.02.16;	author ajacoutot;	state Exp;
branches;
next	;
commitid	EaWh9ot6gcGLnG64;

1.1.4.1
date	2014.09.30.15.03.27;	author ajacoutot;	state Exp;
branches;
next	;
commitid	oMq0fepPPymetkRz;


desc
@@


1.1
log
@file patch-trytond_ir_lang_py was initially added on branch OPENBSD_5_6.
@
text
@@


1.1.4.1
log
@SECURITY fixes:
* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)
@
text
@a0 42
$OpenBSD$

* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)

--- trytond/ir/lang.py.orig	Mon Oct 21 17:13:37 2013
+++ trytond/ir/lang.py	Tue Sep 30 16:59:21 2014
@@@@ -2,10 +2,11 @@@@
 #this repository contains the full copyright notices and license terms.
 import datetime
 import warnings
+from ast import literal_eval
 
 from ..model import ModelView, ModelSQL, fields
 from ..cache import Cache
-from ..tools import safe_eval, datetime_strftime
+from ..tools import datetime_strftime
 from ..transaction import Transaction
 from ..pool import Pool
 from .time_locale import TIME_LOCALE
@@@@ -132,7 +133,7 @@@@ class Lang(ModelSQL, ModelView):
         '''
         for lang in langs:
             try:
-                grouping = safe_eval(lang.grouping)
+                grouping = literal_eval(lang.grouping)
                 for i in grouping:
                     if not isinstance(i, int):
                         raise
@@@@ -254,10 +255,10 @@@@ class Lang(ModelSQL, ModelView):
 
         if monetary:
             thousands_sep = monetary.mon_thousands_sep
-            grouping = safe_eval(monetary.mon_grouping)
+            grouping = literal_eval(monetary.mon_grouping)
         else:
             thousands_sep = lang.thousands_sep
-            grouping = safe_eval(lang.grouping)
+            grouping = literal_eval(lang.grouping)
         if not grouping:
             return (s, 0)
         if s[-1] == ' ':
@


1.1.2.1
log
@SECURITY fixes:
* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)
@
text
@a0 42
$OpenBSD$

* Use literal_eval instead of safe_eval (CVE-2014-6633)
* Prevent double underscore in safe_eval (CVE-2014-6633)

--- trytond/ir/lang.py.orig	Sun Jun 15 18:55:32 2014
+++ trytond/ir/lang.py	Tue Sep 30 16:55:15 2014
@@@@ -2,10 +2,11 @@@@
 #this repository contains the full copyright notices and license terms.
 import datetime
 import warnings
+from ast import literal_eval
 
 from ..model import ModelView, ModelSQL, fields
 from ..cache import Cache
-from ..tools import safe_eval, datetime_strftime
+from ..tools import datetime_strftime
 from ..transaction import Transaction
 from ..pool import Pool
 from .time_locale import TIME_LOCALE
@@@@ -132,7 +133,7 @@@@ class Lang(ModelSQL, ModelView):
         '''
         for lang in langs:
             try:
-                grouping = safe_eval(lang.grouping)
+                grouping = literal_eval(lang.grouping)
                 for i in grouping:
                     if not isinstance(i, int):
                         raise
@@@@ -254,10 +255,10 @@@@ class Lang(ModelSQL, ModelView):
 
         if monetary:
             thousands_sep = monetary.mon_thousands_sep
-            grouping = safe_eval(monetary.mon_grouping)
+            grouping = literal_eval(monetary.mon_grouping)
         else:
             thousands_sep = lang.thousands_sep
-            grouping = safe_eval(lang.grouping)
+            grouping = literal_eval(lang.grouping)
         if not grouping:
             return (s, 0)
         if s[-1] == ' ':
@

