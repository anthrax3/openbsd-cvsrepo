head	1.27;
access;
symbols;
locks; strict;
comment	@# @;


1.27
date	2014.04.01.17.23.03;	author deraadt;	state dead;
branches;
next	1.26;

1.26
date	2013.12.12.19.32.51;	author ajacoutot;	state Exp;
branches;
next	1.25;

1.25
date	2007.11.17.12.49.53;	author tobias;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.05.06.32.13;	author jufi;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.26.03.08.09;	author jufi;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.25.16.49.44;	author jufi;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.07.15.31.46;	author saad;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.20.07.29.59;	author saad;	state Exp;
branches;
next	1.19;

1.19
date	2005.05.20.14.55.35;	author jufi;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.15.14.38.45;	author saad;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.18.17.18.28;	author jufi;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.15.16.33.58;	author jufi;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.04.17.18.16;	author jufi;	state Exp;
branches;
next	1.14;

1.14
date	2004.08.29.10.04.05;	author jufi;	state Exp;
branches;
next	1.13;

1.13
date	2004.08.18.16.45.55;	author jufi;	state Exp;
branches;
next	1.12;

1.12
date	2004.05.23.20.33.03;	author jufi;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.19.11.43.20;	author jufi;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.16.00.29.59;	author jufi;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.04.14.46.45;	author jufi;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.10.20.07.25;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.02.19.31.56;	author jufi;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.10.17.19.19;	author jufi;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.19.21.00.31;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.28.18.35.28;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.17.17.58.36;	author jufi;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.16.19.36.31;	author jufi;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.08.20.36.30;	author jufi;	state Exp;
branches;
next	;


desc
@@


1.27
log
@more unmaintained transations go away
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
 <head>
  <meta http-equiv="Content-Type"
        content="text/html; charset=iso-8859-1">
  <meta http-equiv="refresh"
        content="8; url=../../faq/ports/differences.html">
  <script type="text/javascript">
  <!--
        window.location.href="../../faq/ports/differences.html"
  -->
  </script>
  <title>OpenBSD Porter's Handbook</title>
  <link rev="made" HREF="mailto:www@@openbsd.org">
 </head>
 <body text="#000000" bgcolor="#FFFFFF" link="#23238E">
<a href="../../de/index.html"><img alt="[OpenBSD]" height="30" width="141" src="../../images/smalltitle.gif" border="0"></a>

  <p>
   If you are not redirected automatically, follow the link
   to <a href='../../faq/ports/differences.html'>http://www.openbsd.org/faq/ports/differences.html</a>

  <hr>
  <a href="../../de/index.html"><img height=24 width=24 src=../../back.gif border=0 alt=OpenBSD></a> 
  <a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>
<!--
Originally [OpenBSD: diffs.html,v 1.20 ]<br>
$Translation: diffs.html,v 1.26 2013/12/12 19:16:54 steffen Exp $<br>
-->
$OpenBSD: diffs.html,v 1.26 2013/12/12 19:32:51 ajacoutot Exp $
</small>
</body>
</html>
@


1.26
log
@Sync with Steelix CVS
@
text
@d33 1
a33 1
$OpenBSD$
@


1.25
log
@Sync with Steelix CVS
@
text
@d1 2
a2 1
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
d4 24
a27 414
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta http-equiv="Content-Type" content=
"text/html; charset=iso-8859-1">
<meta name="resource-type" content="document">
<meta name="description" content=
"Differences with other BSD porting systems.">
<meta name="keywords" content="openbsd,ports">
<meta name="distribution" content="global">
<meta name="copyright" content="This document copyright 2000 by OpenBSD.">
<title>Unterschiede zu anderen BSD-Portierungssystemen</title>
</head>
<body text="Black" bgcolor="White" link="#23238E">
<img height="30" width="141" src="../../images/smalltitle.gif" alt=
"[OpenBSD]">

<h1>OpenBSD-Portierungsinformationen</h1>

<h2><font color="#e00000">Wichtige Unterschiede zu anderen
BSD-Projekten</font></h2>

<p>
NetBSD benutzt den Ausdruck <em>Ports</em> für Architektur-abhängige
Dinge. Ihre Ports-Struktur heißt stattdessen <em>packages</em>.
</p>

<h3>Zusätzliche Unterstützung</h3>
Die ,porting'-Infrastruktur enthält verschiedene Skripte, die das
Erzeugen neuer Ports erleichtern:
<dl>
<dt>build/resolve-lib
    <dd>aufgerufen durch <code>make lib-depends-check</code>, um
    Abhängigkeiten von Shared Librarys zu überprüfen.
<dt>build/update-patches
    <dd>aufgerufen durch <code>make update-patches</code>, das immer
    benutzt <strong>werden sollte, um die Patches neu zu
    erzeugen.</strong>
<dt>install/make-plist
    <dd>aufgerufen durch <code>make update-plist</code>. Hier wird sich
    sich um die meisten kleinen Punkte gekümmert, mit denen man
    akkurate Packing-Listen erzeugt. OpenBSD-Packing-Listen
    unterscheiden sich deutlich von anderen BSDs, zum Teil auch, weil
    die Packagetools vollkommen neu geschrieben wurden.
</dl>


<h3>Infrastruktur</h3>

<p>
OpenBSDs make unterstützt <code>${VAR:U}</code> und
<code>${VAR:L}</code>, um den Wert einer Variablen in Groß- oder
Kleinschreibung zu ändern. Dementsprechend sollte ,make test'
auch unabhängig von Groß- und Kleinschreibung programmiert sein,
also z.&nbsp;B.:
</p>

<pre>
	.if ${NEED_XXX:L} == "yes"
	do stuff if yes
	.else
	do other stuff
	.endif
</pre>

<p>
In der Theorie sollten alle Boolean-Variablen, die von
<code>bsd.port.mk</code> erkannt werden, auch definiert sein,
sodass Code wie
<code>defined(USE_FOO)</code> nicht notwendig sein sollte.
<code>${USE_FOO:L} != "no"</code> müsste funktionieren.
</p>

<p>
Die Haupt-<code>bsd.port.mk</code>-Datei wurde deutlich verändert und
schlanker gemacht. Insbesondere ist sie jetzt bereit für
,parallel-make'.
Das <code>scripts/{pre,do,post}-*</code>-Feature ging während des
Prozesses verloren. Um das Skript wieder auferstehen zu lassen, rufe es
per Hand aus dem Makefile auf.
</p>

<h3>make sauber benutzen</h3>

<p>
Denk daran, wenn du make mit <code>make VAR=value</code> aufrufst, wird
die Zuweisung jeden Wert <em>überschreiben</em>, den VAR vom Makefile
erhalten kann. Also sind viele Makefile-Patches nicht mehr notwendig,
es ist viel besser, die MAKE_FLAGS korrekt zu setzen, um den
Wartungsaufwand zu verringern.
</p>

<h3>Quelltexte holen</h3>

<p>
Es gibt zwei Arten von Archiven: DISTFILES und PATCHFILES.
OpenBSD behandelt sie in gleicher Art und Weise, und holt standardmäßig
alles von den MASTER_SITES. Es gibt <strong>keine</strong>
PATCH_SITES oder PATCH_SITES_SUBDIR.
</p>

<p>
Wenn nicht alle zu holenden Dateien von der selben Site kommen, erlaubt
OpenBSD die erweiterten Dateinamen:0 bis Dateiname:9, in diesem Fall
wird es die Dateien von den MASTER_SITES0 bis MASTER_SITES9 holen.
</p>

<p>
Manche Architekturen benötigen möglicherweise spezielle distfiles. In
der Vergangenheit gab es Probleme damit, soweit das Spiegeln von
distfiles betroffen war. OpenBSD unterstützt eine dritte Art von
Dateien: SUPDISTFILES. Diese werden nur zum Erzeugen von Prüfsummen
und beim Spiegeln verwendet. Denk dran, dass SUPDISTFILES
möglicherweise mit DISTFILES oder PATCHFILES kollidieren.
Zum Beispiel:
</p>

<pre>
	DISTFILES=foo-1.0.tgz
	.if ${ARCH} == "i386"
	DISTFILES+=foo-i386.tgz
	.elif ${ARCHI} == "sparc"
	DISTFILES+=foo-sparc.tgz
	.endif
	SUPDISTFILES=foo-i386.tgz foo-sparc.tgz
</pre>

<h3>Die <code>WRKDIR</code>-Infrastruktur</h3>

<p>
Wir wollen nicht, dass Ports <code>NO_WRKDIR</code> benutzen. Alle
OpenBSD-Ports müssen ein ,work directory' haben. Die Details der
Namensgebung sollten keine Angelegenheit des Portierers sein. Wenn du
einen solchen Namen erfahren musst, frage einfach das Makefile:
<code>cd that_ports_dir
&amp;&amp; make show=WRKDIR</code> wird die Vorstellung des
Codes von seinem <code>WRKDIR</code> offenlegen.
</p>

<p>
Der Hauptgrund hinter dieser Annahme ist, dass OpenBSDs
<code>bsd.port.mk</code> wie ein echtes Makefile agiert, allerdings mit
ein paar Abhängigkeiten. Die <code>fetch</code>-Stufe hängt von den
distfiles und patchfiles ab, alle anderen Stufen sind von echten
Dateien im ,working directory' (Cookies) abhängig, sodass sie gar
nicht ohne einem 'working directory' existieren können.
</p>

Wenn die DISTFILES-Extrahierung speziell ist, setze
</p>

<pre>
EXTRACT_ONLY=
</pre>

<p>
und mache die Extrahierung in <code>post-extract.</code>
</p>

<dl>
<dt>WRKDIR</dt>

<dd>Das Port-,working directory', wo es seine eigenen Cookies
unterbringt.
</dd>

<dt>WRKDIST</dt>

<dd>Unterverzeichnis von WRKDIR, in dem der Port tatsächlich ausgepackt
wird. Das ist auch das Basisverzeichnis für Patches. Andere BSDs haben
zurzeit keine WRKDIST/WRKSRC-Aufteilung, sondern nur WRKSRC.</dd>

<dt>WRKSRC</dt>

<dd>Unterverzeichnis von WRKDIST, in dem der tatsächliche Source
liegt.</dd>

<dt>WRKBUILD</dt>

<dd>Unterverzeichnis von WRKDIR, wo das Konfigurieren und Erzeugen
(build) des Ports geschehen wird. Andere BSDs haben die
WRKBUILD/WRKSRC-Aufteilung nicht. Programme, die (größtenteils) auf
autoconf basieren, können für gewöhnlich SEPARATE_BUILD setzen, damit
der Port in einem anderen Verzeichnis (WRKBUILD) als WRKSRC erzeugt
wird.</dd>

<dt>WRKCONF</dt>

<dd>Unterverzeichnis von WRKDIR, in dem configure-Skripte ausgeführt
werden sollten. Standardmäßig WRKBUILD, was in 99% der Fälle auch
korrekt ist.</dd>

<dt>WRKINST</dt>

<dd>Verzeichnis, in das der Port installiert wird, bevor er gepackt
wird (packaged) (siehe auch ,Faking ports' weiter unten).</dd>
</dl>

<p>
<em>Denk dran, dass es NO_WRKSUBDIR nicht mehr gibt: seine
Funktionalität kann stattdessen mit dem Setzen von WRKDIST=$(WRKDIR)
erreicht werden.</em>
</p>

<h3>Faking ports</h3>

<h4>Einführung</h4>

<p>
Nachdem ein ,build' komplett ist, gehen andere BSDs dazu, über den Port
zu installieren und erzeugen dann ein Package vom installierten Port.
OpenBSD benutzt stattdessen ,faked installation'.
</p>

<ul>
<li>Ein OpenBSD-Port wird ganz normal konfiguriert und erzeugt
(z.&nbsp;B. um unter <code>PREFIX</code> installiert zu werden,
normalerweise <code>/usr/local</code>).</li>

<li>Aber es wird ihm gesagt, er solle sich woanders installieren,
namentlich unter WRKINST, was für gewöhnlich ein Unterverzeichnis von
WRKDIR ist.</li>

<li>Dann wird die angebliche Installation gepackt (packaged), indem die
-B-Option von pkg_create benutzt wird.</li>

<li>Schlussendlich wird das daraus resultierende Paket (package)
mittels pkg_add installiert.</li>
</ul>

<h4>Vorteile</h4>

<ul>
<li>Für einen ,package builder' bedeutet es, dass die meisten Ports
nicht wirklich installiert werden müssen, was eine Menge potenzieller
Kompromisse und allgemeiner Probleme vermeidet.
Es erlaubt auch das Erzeugen von mehreren Paketen, die einen Konflikt
erzeugen, d.h. zum Beispiel verschiedene Versionen derselben Software
auf einer Maschine. Schlussendlich erlaubt es das Erzeugen von neuen,
ungetesteten Paketen ohne eine funktionierende Installation zu
gefährden.
</li>

<li>Für einen ,port writer' vereinfacht es das Ziel, Probleme in den
,packing lists' zu finden, da die ,fake area of installation' leer ist,
bevor der Port installiert wird. Zudem ist es nicht mehr nötig, die
Portinstallation zu beeinflussen, wenn ein Port zu viele Dateien
installiert, es reicht, die unwesentlichen Dateien einfach nicht in der
,packing list' aufzuführen.</li>

<li>Für den Anwender verbessert es die Qualität der Packages: da der
letztliche Port mit pkg_add installiert wird, erhält der Anwender
<em>exakt</em> die gleiche Software, wie die, die auf der Maschine des
Portierers vorbereitet wurde.
</li>
</ul>

<h4>Wie man es macht</h4>

<p>
Die Ziele (targets), die <code>make fake</code> aufruft, sind die üblichen
Installationsziele, mit einigen Ausnahmen:
</p>

<ul>
<li>FAKE_FLAGS wird anstelle von MAKE_FLAGS benutzt. Standardmäßig setzt
FAKE_FLAGS auf DESTDIR=${WRKINST}.</li>

<li>FAKE_TARGET wird anstelle von INSTALL_TARGET benutzt.</li>

<li>Die {pre,do,post}-Installationsfragmente werden mittels Setzen von
TRUEPREFIX auf $(PREFIX), PREFIX auf $(WRKINST)$(PREFIX) und DESTDIR
auf $(WRKINST) in Gang gebracht.</li>
</ul>

<p>
Ports, die imake benutzen, sollten so wie sie sind funktionieren, da
die imake-Fragmente konfiguriert sind, um DESTDIR zu benutzen. Genauso
sollten Ports, die ein aktuelles GNU configure nutzen, keine Änderungen
benötigen.
</p>

<p>
Eine weitere gute Technik ist ein ,late binding'-Trick: konfiguriere die
Ports so, dass sie einen Präfix von $(DESTDIR)/usr/local benutzen, so
dass das resultierende Makefile den Präfix
</p>

<pre>
prefix=$(DESTDIR)/usr/local
</pre>
<p>
hat. Wenn der Port erzeugt wird und DESTDIR nichts enthält, wird
/usr/local benutzt, und die fake-Installation wird alles unter
WRKINST/usr/local installieren (also für GNU configure benutze
<code>CONFIGURE_STYLE= gnu dest</code>).
</p>

<h4>Fallen</h4>

<ul>
<li>Einige Ports sind inkonsistent in ihrer DESTDIR-Verarbeitung: die
meisten Teile des Ports sind zufrieden mit dem gesetzten DESTDIR, mit
Ausnahme von zwei oder drei Ausreißern. Patche das Problem weg.</li>

<li>Unterscheide immer die wirkliche Stelle, an die der Port
installiert wird und die, die in den Konfigurationsdateien des Packages
aufgeführt ist. Das kann man leicht übersehen, ist aber leicht durch
die Verwendung von TRUEPREFIX zu vermeiden.</li>

<li>Absolute Symlinks müssen immer angepasst werden. Glücklicherweise
wird <code>bsd.port.mk</code> hier alle Probleme bemerken.</li>

<li>Ein paar Ports wollen $(DESTDIR) nicht alleine dem
configure-Schritt überlassen. Ein post-configure-Fragment, das allen
Makefiles das DESTDIR hinzufügt, wird benötigt.</li>

<li>Sehr selten wird ein Port allen vernünftigen Versuchen widerstehen,
FAKE zu benutzen. Ein Versuch mit roher Gewalt sollte funktionieren:
benutze pre-fake, um alles, was der Port im WRKINST-Bereich benötigt, zu
linken oder zu kopieren, danach installiere unter chroot.</li>
</ul>

<h3>Packaging-Tools</h3>

<p>
Die Package-Tools kennen schon ein paar Dateitypen und können viele
Dinge automatisch durchführen: in den meisten Fällen werden
<code>@@exec</code>-Kommandos oder <code>INSTALL</code>-Skripte nicht
gebraucht.<br>
<em>Beachte, dass alle unnötigen Skripte verbannt werden sollten, da
das zu ,scalability'-Problemen führen kann. Es ist sehr viel einfacher,
eine einzelne Package-Infrastruktur nach Fehlern zu überprüfen, als
hunderte von Skripten zu modifizieren, damit sie mit neuen Problemen
umgehen können.</em><br>
Zum Beispiel:
</p>

<ul>
<li><code>@@exec ldconfig</code> wird nicht benötigt, da Shared
Librarys mit <code>@@lib libfoo.so.1.0</code> kommentiert werden
und <code>ldconfig</code> nur ausgeführt wird, wenn es benötigt wird,
und dann auch chroot dankbar verarbeiten wird.</li>
<li><code>@@exec install-info</code> wird nicht benötigt, da
Dokumentationsdateien mit <code>@@info file.info</code> kommentiert
werden. Dies handhabt auch mehrere Info-Dateien und entfernt die
Notwendigkeit von <code>makeinfo --no-split</code>.</li>
<li>Schriftarten werden dank <code>@@font</code> und
<code>@@fontdir</code> automatisch eingebunden.</li>
<li>Neue User und Gruppen werden über <code>@@newuser</code> und
<code>@@newgroup</code> verarbeitet, statt über Installationsskripte.
Sie werden auch früh genug angelegt, sodass weitere
Package-Extrahierung sie nutzen kann.</li>
<li>Konfigurationsdateien werden über <code>@@sample</code> statt über
Installationsskripte verarbeitet.</li>
</ul>

<p>
Greife für weitere Details auf
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pkg_create&amp;sektion=1&amp;format=html">pkg_create(1)</a>
zurück. In den meisten Fällen wird <code>make update-plist</code> einen
sehr guten Angleich für eine komplette Packing-Liste erstellen und wird
des weiteren auch von Hand durchgenommene Verbesserungen von einer
Version zur nächsten übernehmen.
</p>

<h3>,flavors'</h3>

<p>
Optionen wurden zu ,flavors' zusammengefasst, sodass das Erzeugen von
Packages (package building) konsistent sein kann. Ein Port mit Optionen
sollte mit FLAVORS eine Liste von all den Optionen setzen, die Sinn für
diesen Port machen (also FLAVORS=foo bar zoinx); benutze ,FLAVOR' um zu
testen, welche Optionen tatsächlich gesetzt wurden
(also: FLAVOR=zoinx foo).
<code>bsd.port.mk</code> bietet einige Unterstützung:
</p>

<ul>
<li>Der PKGNAME wird angepasst, um mit Bindestrich getrennte Optionen zu
enthalten (z.&nbsp;B. package-foo-zoinx).</li>

<li>Das WRKDIR wird so angepasst, dass konkurrierende ,flavors' erzeugt
werden können, ohne zu kollidieren.</li>

<li>Konstrukte der Form %%flavor%% werden die Einbeziehung von
pfrag.Flavor auslösen.
Das %%SHARED%%-Konstrukt löst die Einbeziehung von PFRAG.shared aus.</li>

<li>bsd.port.subdir.mk versteht die Erweiterung von
SUBDIR=directory,opt1,opt2  um sagen zu wollen: ,Baue den Port in
directory mit FLAVOR=opt1 opt2.'</li>
</ul>

<p>
Zu überprüfen, ob ein gegebenes ,flavor' ausgewählt wurde, ist recht
leicht:
</p>

<pre>
.if ${FLAVOR:L:Mzoinx}
</pre>

Es gibt eine Extra-Erweiterung namens MULTI_PACKAGES.
Allgemein gesagt sind MULTI_PACKAGES und FLAVORS orthogonale
Mechanismen, also ergänzend.
Zusammen sorgen sie dafür, dass der OpenBSD-Ports-Tree
kleiner ist als der von anderen BSDs, da sie dafür sorgen,
dass ein einzelner Port viele verschiedene Packages erzeugen
kann.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&amp;sektion=5&amp;format=html">bsd.port.mk(5)</a>
enthält ein ganzes Kapitel über FLAVORS und MULTI_PACKAGES.

<hr>

d30 2
a31 2
Originally [OpenBSD: diffs.html,v 1.19 ]<br>
$Translation: diffs.html,v 1.25 2007/11/03 10:45:52 paldium Exp $<br>
a34 1

@


1.24
log
@Sync with steelix translation CVS
@
text
@d70 1
a70 1
so dass Code wie
d81 1
a81 1
per Hand aus der Makefile auf.
d135 1
a135 1
einen solchen Namen erfahren musst, frage einfach die Makefile:
d137 1
a137 1
&amp;&amp; make show VARNAME=WRKDIR</code> wird die Vorstellung des
d143 1
a143 1
<code>bsd.port.mk</code> wie eine echte Makefile agiert, allerdings mit
d146 1
a146 1
Dateien im ,working directory' (Cookies) abhängig, so dass sie gar
d236 2
a237 2
nicht wirklich installiert werden müssen, was eine Menge potentieller
Kompromisse und allgemeine Probleme vermeidet.
d241 1
a241 1
ungestesteten Paketen ohne eine funktionierende Installation zu
d253 1
a253 1
letzliche Port mit pkg_add installiert wird, erhält der Anwender
d294 1
a294 1
hat. Wenn der Port erzeugt wird und DESTDIR nichts enthät, wird
d303 1
a303 1
<li>Einige Ports sind inkonstistent in ihrer DESTDIR-Verarbeitung: die
d353 1
a353 1
Sie werden auch früh genug angelegt, so dass weitere
d371 1
a371 1
Optionen wurden zu ,flavors' zusammengefasst, so dass das Erzeugen von
d419 2
a420 2
Originally [OpenBSD: diffs.html,v 1.18 ]<br>
$Translation: diffs.html,v 1.23 2007/05/02 18:28:41 paldium Exp $<br>
@


1.23
log
@Sync with steelix translation CVS
@
text
@d35 1
a35 1
    Abhängigkeiten von ,shared libraries' zu überprüfen.
d341 2
a342 2
<li><code>@@exec ldconfig</code> wird nicht benötigt, da ,shared
libraries' mit <code>@@lib libfoo.so.1.0</code> kommentiert werden
d420 1
a420 1
$Translation: diffs.html,v 1.22 2007/04/25 15:41:16 paldium Exp $<br>
@


1.22
log
@sync with steelix translation CVS
@
text
@d17 1
a17 1
"[OpenBSD]"> 
d26 1
a26 1
Dinge. Ihre Ports-Struktur heißt stattdessen <em>packages</em>. 
d31 1
a31 1
Erzeugen neuer Ports erleichtern: 
d42 1
a42 1
    sich um die meisten kleinen Punkte gekümmert, mit denen man 
d54 1
a54 1
Kleinschreibung zu ändern. Dementsprechend sollte ,make test' 
d56 1
a56 1
also z.B.:
d77 2
a78 2
schlanker gemacht. Insbesondere ist sie jetzt bereit für 
,parallel-make'. 
d87 1
a87 1
Denk daran, wenn du make mit <code>make VAR=value</code> aufrufst, wird 
d99 1
a99 1
alles von den MASTER_SITES. Es gibt <strong>keine</strong> 
d116 1
a116 1
Z.B.: 
d155 1
a155 1
</pre> 
d217 3
a219 3
<li>Ein OpenBSD-Port wird ganz normal konfiguriert und erzeugt (z.B.,
um unter <code>PREFIX</code> installiert zu werden, normalerweise
<code>/usr/local</code>).</li>
d263 1
a263 1
Installationsziele, mit einigen Ausnahmen: 
d287 1
a287 1
dass das resultierende Makefile den Präfix 
d296 1
a296 1
WRKINST/usr/local installieren (also für GNU configure benutze 
d303 1
a303 1
<li>Einige Ports sind inkonstistent in ihrer DESTDIR-Verarbeitung: die 
d312 1
a312 1
<li>Absolute Symlinks müssen immer angepasst werden. Glücklicherweise 
d315 2
a316 2
<li>Ein paar Ports wollen $(DESTDIR) nicht alleine dem 
configure-Schritt überlassen. Ein post-configure-Fragment, das allen 
d377 1
a377 1
<code>bsd.port.mk</code> bietet einige Unterstützung: 
d382 1
a382 1
enthalten (z.B.,package-foo-zoinx).</li>
d388 1
a388 1
pfrag.Flavor auslösen. 
d398 1
a398 1
leicht: 
d406 1
a406 1
Allgemein gesagt sind MULTI_PACKAGES und FLAVORS orthogonale 
d408 1
a408 1
Zusammen sorgen sie dafür, dass der OpenBSD-Ports-Tree 
d420 1
a420 1
$Translation: diffs.html,v 1.21 2006/04/24 17:44:33 paldium Exp $<br>
@


1.21
log
@sync with Steelix CVS
@
text
@a4 1
<meta http-equiv="Content-Language" content="de">
d9 1
a9 1
"Unterschiede mit anderen BSD-Portierungssystemen.">
d12 1
a12 1
<meta name="copyright" content="Dieses Dokument unterliegt dem Copyright von OpenBSD 2000.">
d419 2
a420 2
Originally [OpenBSD: diffs.html,v 1.18 ]
$Translation: diffs.html,v 1.20 2005/12/06 20:37:28 paldium Exp $
@


1.20
log
@sync with Steelix CVS
@
text
@d173 1
a173 1
zur Zeit keine WRKDIST/WRKSRC-Aufteilung, sondern nur WRKSRC.</dd>
d421 1
a421 1
$Translation: diffs.html,v 1.19 2005/09/14 16:16:41 paldium Exp $
@


1.19
log
@sync with steelix translation CVS
@
text
@d5 1
a7 1
<meta http-equiv="Content-Language" content="de">
d13 1
a13 1
<meta name="copyright" content="This document copyright 2000 by OpenBSD.">
d421 1
a421 1
$Translation: diffs.html,v 1.18 2005/05/20 12:27:49 paldium Exp $
@


1.18
log
@sync with Steelix CVS
@
text
@a150 1
<p>
d421 1
a421 1
$Translation: diffs.html,v 1.17 2005/03/14 18:48:02 paldium Exp $
@


1.17
log
@Sync with Steelix CVS
@
text
@d190 6
d327 43
d421 2
a422 2
Originally [OpenBSD: diffs.html,v 1.17 ]
$Translation: diffs.html,v 1.16 2005/01/18 14:33:48 paldium Exp $
@


1.16
log
@Sync with Steelix CVS
@
text
@d14 1
a14 1
<title>Unterschiede zu anderen BSD Portierungssystemen</title>
d31 1
a31 1
Die porting-Infrastruktur enthält verschiedene Skripte, die das
d43 1
a43 1
    sich um die meisten kleinen Punkte gek&uml;mmert, mit denen man 
d371 5
a375 3
Originally [OpenBSD: diffs.html,v 1.17 ]<br>
$Translation: diffs.html,v 1.15 2005/01/14 13:52:42 paldium Exp $<br>
$OpenBSD: diffs.html,v 1.17 2004/08/11 11:00:23 espie Exp $
@


1.15
log
@Sync with Steelix CVS
@
text
@d7 1
d10 1
a10 1
"Differences with other BSD porting systems.">
d14 1
a14 1
<title>Unterschiede zu anderen BSD Port Systemen</title>
d20 1
a20 1
<h1>OpenBSD Porting Informationen</h1>
d23 1
a23 1
BSD Projekten</font></h2>
d26 2
a27 2
NetBSD benutzt den Ausdruck <em>ports</em> für Architektur-abhängige
Dinge. Ihre ports Struktur heisst stattdessen <em>packages</em>. 
d30 2
a31 2
<h3>Extra support</h3>
Die porting Infrastructure enthält verschiedene Skripte, die das
d35 2
a36 2
    <dd>aufgerufen durch <code>make lib-depends-check</code>, um Abhängigkeiten
    von shared libraries zu überprüfen.
d38 3
a40 2
    <dd>aufgerufen durch <code>make update-patches</code>, das immer benutzt
    <strong>werden sollte um die Patches neu zu erzeugen.</strong>
d44 3
a46 2
    akkurate Packing-Lists erzeugt. OpenBSD packing-lists sind deutlich verschieden
    von anderen BSDs, zum Teil auch, weil die package tools vollkommen neu geschrieben wurden.
d53 4
a56 4
OpenBSD's make unterstützt <code>${VAR:U}</code> und
<code>${VAR:L}</code> um den Wert einer Variablen in Groß- oder
Kleinschreibung zu ändern. Dementsprechend sollte 'make test' 
auch unabhängig von Gross- und Kleinschreibung programmiert sein,
d69 3
a71 3
In der Theorie sollten alle Boolean Variablen, die von
<code>bsd.port.mk</code> erkannt werden auch definiert sein,
so dass Code should wie
d77 1
a77 1
Die Haupt <code>bsd.port.mk</code> Datei wurde deutlich verändert und
d79 4
a82 4
parallel-make. 
Das <code>scripts/{pre,do,post}-*</code> Feature ging während des Prozesses
verloren. Um das Skript wieder auferstehen zu lassen, rufe es per Hand aus dem
Makefile auf.
d89 4
a92 3
die Zuweisung jeden Wert <em>überschreiben</em> den VAR vom Makefile
erhalten kann. Also sind viele Makefile patches nicht mehr notwendig, es ist viel
besser die MAKE_FLAGS korrekt zu setzen, um den Wartungsaufwand zu verringern.
d95 1
a95 1
<h3>Sources holen</h3>
d99 2
a100 2
OpenBSD behandelt sie in gleicher Art und Weise, und holt standardmässig alles
von den MASTER_SITES. Es gibt <strong>keine</strong> 
d106 2
a107 3
OpenBSD die erweiterten Dateinamen:0 bis Dateiname:9, in diesem Fall wird
es die Dateien von den
MASTER_SITES0 bis MASTER_SITES9 holen.
d111 6
a116 5
Manche Architekturen benötigen möglicherweise spezielle distfiles. In der Vergangenheit
gab es Probleme damit, soweit das Spiegeln von distfiles betroffen war. OpenBSD
unterstützt eine dritte Art von Dateien: SUPDISTFILES. Diese werden nur
zum Erzeugen von Checksummen und beim Spiegeln verwendet. Denk dran, dass
SUPDISTFILES möglicherweise mit DISTFILES oder PATCHFILES kollidieren.
d133 4
a136 4
Wir wollen nicht, dass ports <code>NO_WRKDIR</code> benutzen. Alle OpenBSD
ports müssen ein 'work directory' haben. Die Details der Namensgebung sollten
keine Angelegenheit des porters sein. Wenn du einen solchen Namen erfahren musst, 
frage einfach das Makefile:
d138 2
a139 2
&amp;&amp; make show VARNAME=WRKDIR</code> wird die Vorstellung des Codes von seinem 
<code>WRKDIR</code> offenlegen.
d143 6
a148 5
Der Hauptgrund hinter dieser Annahme ist, dass OpenBSD's
<code>bsd.port.mk</code> wie ein echtes Makefile agiert, allerdings mit ein paar Abhängigkeiten.
Die <code>fetch</code> Stufe hängt von den distfiles und patchfiles ab, alle anderen Stufen
sind von echten Dateien im 'working directory' (cookies) abhängig, so dass sie gar nicht ohne
ein 'working directory' existieren können.
d152 1
a152 1
Wenn die DISTFILES Extraktion speziell ist, setze
d160 1
a160 1
und mache die Extraktion in <code>post-extract.</code>
d166 2
a167 1
<dd>Das port working directory, wo es seine eigenen cookies unterbringt.
d172 3
a174 4
<dd>Unterverzeichnis von WRKDIR indem der port tatsächlich ausgepackt wird.
Das ist auch das Basisvberzeichnis für Patches. Andere BSD's haben zur Zeit keine
WRKDIST/WRKSRC Aufteilung, sondern nur
WRKSRC.</dd>
d178 2
a179 2
<dd>Unterverzeichnis von WRKDIST in dem der tatsächliche Source
lebt.</dd>
d183 6
a188 6
<dd>Unterverzeichnis von WRKDIR wo das Konfigurieren und Erzeugen (build) des port
geschehen wird. Andere BSD's haben die WRKBUILD/WRKSRC Aufteilung nicht.
Programme, die (größtenteils) auf autoconf basieren, können für 
gewöhnlich SEPARATE_BUILD setzen, damit der port in einem anderen Verzeichnis
(WRKBUILD) als
WRKSRC geschieht.</dd>
d192 2
a193 2
<dd>Verzeichnis, in dem der port installiert wird, bevor er gepackt wird (packaged)
(siehe auch 'Faking ports' weiter unten).</dd>
d197 3
a199 2
<em>Denk dran, dass es NO_WRKSUBDIR nicht mehr gibt: seine Funktionalität kann stattdessen
mit dem Setzen von  WRKDIST=$(WRKDIR) erreicht werden.</em>
d207 3
a209 3
Nachdem ein 'build' komplett ist gehen andere BSDs dazu über den port
zu installieren, und erzeugen dann ein package vom installierten port.
OpenBSD benutzt stattdessen 'faked installation'.
d213 2
a214 2
<li>Ein OpenBSD port wird ganz normal konfiguriert und erzeugt (z.B., um unter
<code>PREFIX</code> installiert zu werden, normalerweise
d217 3
a219 2
<li>Aber es wird ihm gesagt, er solle sich woanders installieren, namentlich unter WRKINST, was für
gewöhnlich ein Unterverzeichnis von WRKDIR ist.</li>
d221 2
a222 2
<li>Dann wird die angebliche Installation gepackt (packaged), indem die -B Option von
pkg_create benutzt wird.</li>
d224 2
a225 1
<li>Schlussendlich wird das daraus resultierende Paket (package) mittels pkg_add installiert.</li>
d231 1
a231 1
<li>Für einen 'package builder' bedeutet es, dass die meisten ports
d234 5
a238 4
Es erlaubt auch das Erzeugen von mehreren Paketen, die einen Konflikt erzeugen,
d.h. zum Beispiel verschiedene Versionen derselben Software, auf einer Maschine.
Schlussendlich erlaubt es das Erzeugen von neuen, ungestesteten Paketen ohne
eine funktionierende Installation zu gefährden.
d241 11
a251 9
<li>Für einen 'port writer' vereinfacht es das Ziel Probleme in den
'packing lists' zu finden, da die 'fake area of installation' leer ist,
bevor der port installiert wird. Zudem ist es nicht mehr nötig die port
Installation zu beeinflussen, wenn ein port zu viele Dateien installiert, es reicht
die unwesentlichen Dateien einfach nicht in der 'packing list' aufzuführen.</li>

<li>Für den User verbessert es die Qualität der packages: da der letzliche port
mit pkg_add installiert wird, erhält der User 
<em>exakt</em> die gleiche Software, wie die, die auf der Maschine des porters vorbereitet wurde.
d259 1
a259 1
Installationsziele, mit einigen Ausnahmen : 
d263 1
a263 1
<li>FAKE_FLAGS wird anstelle von MAKE_FLAGS benutzt. Standardmässig setzt
d268 2
a269 2
<li>Die {pre,do,post}-Installationsfragmente werden mittels Setzen von TRUEPREFIX
auf $(PREFIX), PREFIX auf $(WRKINST)$(PREFIX), und DESTDIR
d274 4
a277 3
Ports, die imake benutzen, sollten so wie sie sind funktionieren, da die imake Fragmente 
konfiguriert sind, um DESTDIR zu benutzen. Genauso sollten neuere GNU configure ports
keine Änderungen benötigen.
d281 3
a283 3
Eine weitere gute Technik ist ein `late binding' Trick: konfiguriere die
ports so, dass sie einen Präfix von $(DESTDIR)/usr/local benutzen, so dass das resultierende
Makefile den Präfix 
d290 2
a291 2
hat. Wenn der 'port' erzeugt wird, und DESTDIR nichts enthät, wird /usr/local benutzt.
Und die fake-Installation wird alles unter
d299 8
a306 8
<li>Einige ports sind inkonstistent in ihrer DESTDIR Verarbeitung: die 
meisten Teile des port sind zufrieden mit dem gesetzten DESTDIR, mit Ausnahme
von zwei oder drei Ausreissern. Patche das Problem weg.</li>

<li>Unterscheide immer die wirkliche Stelle, an der port installiert wird und
die, die in den Konfigurationsdateien des packages aufgeführt ist.
Das kann man leicht übersehen, ist aber leicht durch die Verwendung von
TRUEPREFIX zu vermeiden.</li>
d311 8
a318 8
<li>Ein paar ports wollen $(DESTDIR) nicht alleine dem 
configure Schritt überlassen. Ein post-configure Fragment, dass allen 
Makefiles das DESTDIR hinzufügt wird benötigt.</li>

<li>Sehr selten wird ein port allen vernünftigen Versuchen widerstehen, FAKE
zu benutzen. Ein Versuch mit roher Gewalt sollte funktionieren: benutze pre-fake
um alles, was der port im WRKINST Bereich benötigt, zu linken oder zu kopieren,
danach installiere unter chroot.</li>
d321 1
a321 1
<h3>Flavors</h3>
d324 6
a329 6
Options wurden zu flavors zusammengefasst, so dass das Erzeugen von packages
(package building) konsistent sein kann.
Ein port mit options sollte FLAVORS all der
Optionen setzen, die Sinn für diesen port machen (also
FLAVORS=foo bar zoinx); benutze 'FLAVOR' um zu testen, welche Optionen
tatsächlich gesetzt wurden (also: FLAVOR=zoinx foo).
d334 2
a335 2
<li>Der PKGNAME wird angepasst, um mit Bindestrich getrennte Optionen zu enthalten(z.B.,
package-foo-zoinx).</li>
d337 2
a338 2
<li>Das WRKDIR wird so angepasst, dass konkurrierende flavors erzeugt werden können,
ohne zu kollidieren.</li>
d340 3
a342 2
<li>Konstrukte der Form %%flavor%% werden die Einbeziehung von pfrag.Flavor auslösen. 
Das %%SHARED%% Konstrukt löst die Einbeziehung von PFRAG.shared aus.</li>
d345 2
a346 2
SUBDIR=directory,opt1,opt2  um sagen zu wollen: `baue den port in directory mit
FLAVOR=opt1 opt2.'</li>
d350 2
a351 1
Zu überprüfen, ob ein gegebener flavor ausgewählt wurde, ist recht leicht: 
d360 4
a363 4
Mechanismen, also ergäzend.
Zusammen sorgen sie dafür, dass der OpenBSD ports tree 
kleiner ist als der das anderen BSDs, da sie dafür sorgen,
dass ein einzelner Port viele verschiedene packages erzeugen
d366 1
a366 1
enthält eine ganze Sektion zu FLAVORS und MULTI_PACKAGES.
d369 1
d371 5
a375 5
Originally [OpenBSD: diffs.html,v 1.17 ]
<br>
$Translation: diffs.html,v 1.14 2004/11/04 16:32:20 jufi Exp $
<br></small>
<small>$OpenBSD: diffs.html,v 1.17 2004/08/11 11:00:23 espie Exp $</small>
@


1.14
log
@Sync with Steelix CVS
@
text
@d25 1
a25 1
NetBSD benutzt den Ausdruck <em>ports</em> f&uuml;r Architektur-abhängige
d30 1
a30 1
Die porting Infrastructure enth&auml;lt verschiedene Skripte, die das
d34 2
a35 2
    <dd>aufgerufen durch <code>make lib-depends-check</code>, um Abh&auml;ngigkeiten
    von shared libraries zu &uuml;berpr&uuml;fen.
d50 1
a50 1
OpenBSD's make unterst&uuml;tzt <code>${VAR:U}</code> und
d52 2
a53 2
Kleinschreibung zu &auml;ndern. Dementsprechend sollte 'make test' 
auch unabh&auml;ngig von Gross- und Kleinschreibung programmiert sein,
d70 1
a70 1
<code>${USE_FOO:L} != "no"</code> m&uuml;sste funktionieren.
d74 2
a75 2
Die Haupt <code>bsd.port.mk</code> Datei wurde deutlich ver&auml;ndert und
schlanker gemacht. Insbesondere ist sie jetzt bereit f&uuml;r 
d77 1
a77 1
Das <code>scripts/{pre,do,post}-*</code> Feature ging w&auml;hrend des Prozesses
d86 1
a86 1
die Zuweisung jeden Wert <em>&uuml;berschreiben</em> den VAR vom Makefile
d95 1
a95 1
OpenBSD behandelt sie in gleicher Art und Weise, und holt standardm&auml;ssig alles
d108 1
a108 1
Manche Architekturen ben&ouml;tigen m&ouml;glicherweise spezielle distfiles. In der Vergangenheit
d110 1
a110 1
unterst&uuml;tzt eine dritte Art von Dateien: SUPDISTFILES. Diese werden nur
d112 1
a112 1
SUPDISTFILES m&ouml;glicherweise mit DISTFILES oder PATCHFILES kollidieren.
d130 1
a130 1
ports m&uuml;ssen ein 'work directory' haben. Die Details der Namensgebung sollten
d140 4
a143 4
<code>bsd.port.mk</code> wie ein echtes Makefile agiert, allerdings mit ein paar Abh&auml;ngigkeiten.
Die <code>fetch</code> Stufe h&auml;ngt von den distfiles und patchfiles ab, alle anderen Stufen
sind von echten Dateien im 'working directory' (cookies) abh&auml;ngig, so dass sie gar nicht ohne
ein 'working directory' existieren k&ouml;nnen.
d166 2
a167 2
<dd>Unterverzeichnis von WRKDIR indem der port tats&auml;chlich ausgepackt wird.
Das ist auch das Basisvberzeichnis f&uuml;r Patches. Andere BSD's haben zur Zeit keine
d173 1
a173 1
<dd>Unterverzeichnis von WRKDIST in dem der tats&auml;chliche Source
d180 2
a181 2
Programme, die (gr&ouml;&szlig;tenteils) auf autoconf basieren, k&ouml;nnen f&uuml;r 
gew&ouml;hnlich SEPARATE_BUILD setzen, damit der port in einem anderen Verzeichnis
d192 1
a192 1
<em>Denk dran, dass es NO_WRKSUBDIR nicht mehr gibt: seine Funktionalit&auml;t kann stattdessen
d198 1
a198 1
<h4>Einf&uuml;hrung</h4>
d201 1
a201 1
Nachdem ein 'build' komplett ist gehen andere BSDs dazu &uuml;ber den port
d211 2
a212 2
<li>Aber es wird ihm gesagt, er solle sich woanders installieren, namentlich unter WRKINST, was f&uuml;r
gew&ouml;hnlich ein Unterverzeichnis von WRKDIR ist.</li>
d223 2
a224 2
<li>F&uuml;r einen 'package builder' bedeutet es, dass die meisten ports
nicht wirklich installiert werden m&uuml;ssen, was eine Menge potentieller
d229 1
a229 1
eine funktionierende Installation zu gef&auml;hrden.
d232 1
a232 1
<li>F&uuml;r einen 'port writer' vereinfacht es das Ziel Probleme in den
d234 1
a234 1
bevor der port installiert wird. Zudem ist es nicht mehr n&ouml;tig die port
d236 1
a236 1
die unwesentlichen Dateien einfach nicht in der 'packing list' aufzuf&uuml;hren.</li>
d238 2
a239 2
<li>F&uuml;r den User verbessert es die Qualit&auml;t der packages: da der letzliche port
mit pkg_add installiert wird, erh&auml;lt der User 
d247 1
a247 1
Die Ziele (targets), die <code>make fake</code> aufruft, sind die &uuml;blichen
d252 1
a252 1
<li>FAKE_FLAGS wird anstelle von MAKE_FLAGS benutzt. Standardm&auml;ssig setzt
d265 1
a265 1
keine &Auml;nderungen ben&ouml;tigen.
d270 2
a271 2
ports so, dass sie einen Pr&auml;fix von $(DESTDIR)/usr/local benutzen, so dass das resultierende
Makefile den Pr&auml;fix 
d278 1
a278 1
hat. Wenn der 'port' erzeugt wird, und DESTDIR nichts enth&auml;t, wird /usr/local benutzt.
d280 1
a280 1
WRKINST/usr/local installieren (also f&uuml;r GNU configure benutze 
d292 2
a293 2
die, die in den Konfigurationsdateien des packages aufgef&uuml;hrt ist.
Das kann man leicht &uuml;bersehen, ist aber leicht durch die Verwendung von
d296 1
a296 1
<li>Absolute Symlinks m&uuml;ssen immer angepasst werden. Gl&uuml;cklicherweise 
d300 2
a301 2
configure Schritt &uuml;berlassen. Ein post-configure Fragment, dass allen 
Makefiles das DESTDIR hinzuf&uuml;gt wird ben&ouml;tigt.</li>
d303 1
a303 1
<li>Sehr selten wird ein port allen vern&uuml;nftigen Versuchen widerstehen, FAKE
d305 1
a305 1
um alles, was der port im WRKINST Bereich ben&ouml;tigt, zu linken oder zu kopieren,
d315 1
a315 1
Optionen setzen, die Sinn f&uuml;r diesen port machen (also
d317 2
a318 2
tats&auml;chlich gesetzt wurden (also: FLAVOR=zoinx foo).
<code>bsd.port.mk</code> bietet einige Unterst&uuml;tzung: 
d325 1
a325 1
<li>Das WRKDIR wird so angepasst, dass konkurrierende flavors erzeugt werden k&ouml;nnen,
d328 2
a329 2
<li>Konstrukte der Form %%flavor%% werden die Einbeziehung von pfrag.Flavor ausl&ouml;sen. 
Das %%SHARED%% Konstrukt l&ouml;st die Einbeziehung von PFRAG.shared aus.</li>
d337 1
a337 1
Zu &uuml;berpr&uuml;fen, ob ein gegebener flavor ausgew&auml;hlt wurde, ist recht leicht: 
d346 3
a348 3
Mechanismen, also erg&auml;zend.
Zusammen sorgen sie daf&uuml;r, dass der OpenBSD ports tree 
kleiner ist als der das anderen BSDs, da sie daf&uuml;r sorgen,
d352 1
a352 1
enth&auml;lt eine ganze Sektion zu FLAVORS und MULTI_PACKAGES.
d358 1
a358 1
$Translation: diffs.html,v 1.13 2004/08/29 09:56:21 jufi Exp $
@


1.13
log
@sync
@
text
@d358 1
a358 1
$Translation: diffs.html,v 1.12 2004/05/23 19:59:28 jufi Exp $
@


1.12
log
@Sync with Steelix CVS
@
text
@d34 1
a34 1
    <dd>aufgerufen durch <code>make check-lib-depends</code>, um Abh&auml;ngigkeiten
d203 1
a203 2
OpenBSD benutzt stattdessen 'faked installation'. Der ports tree is noch nicht
komplett auf FAKE umgestellt, aber wir arbeiten daran.
d207 1
a207 1
<li>Ein 'faked port' wird ganz normal konfiguriert und erzeugt (z.B., um unter
d214 1
a214 1
<li>Dann wird die angebliche Installation gepackt (packaged), indem die -s Option von
d356 1
a356 1
Originally [OpenBSD: diffs.html,v 1.15 ]
d360 1
a360 1
<small>$OpenBSD: diffs.html,v 1.15 2004/05/07 05:44:52 pvalchev Exp $</small>
@


1.11
log
@Sync with Steelix CVS
@
text
@d43 1
a43 1
    von NetBSD, zum Teil auch, weil die package tools vollkommen neu geschrieben wurden.
d357 1
a357 1
Originally [OpenBSD: diffs.html,v 1.14 ]
d359 1
a359 1
$Translation: diffs.html,v 1.11 2004/02/18 20:11:32 jufi Exp $
d361 1
a361 1
<small>$OpenBSD: diffs.html,v 1.14 2004/02/16 00:07:26 jufi Exp $</small>
@


1.10
log
@Sync with Steelix CVS
@
text
@d357 1
a357 1
Originally [OpenBSD: diffs.html,v 1.13 ]
d359 1
a359 1
$Translation: diffs.html,v 1.10 2004/02/16 00:23:20 jufi Exp $
d361 1
a361 1
<small>$OpenBSD: diffs.html,v 1.13 2004/01/31 18:21:52 espie Exp $</small>
@


1.9
log
@
NEED_VERSION obsolete.
@
text
@d29 18
d66 5
a70 4
Es gibt eine M&ouml;glichkeit sicherzustellen, dass alle Variablen, die von
<code>bsd.port.mk</code> erkannt werden, auch definiert sind, so dass wir eventuell
<code>defined(USE_GMAKE)</code> loswerden und stattdessen
<code>${USE_GMAKE:L} != "no"</code> benutzen k&ouml;nnen. 
d126 1
a126 1
<h3>Die <code>Arbeits</code>-Infrastruktur</h3>
d147 1
a147 5
Aufgrund eines historischen Unfalls erzeugt das <code>do-extract</code> Fragment
das 'working directory'.Dementsprechend sollten  
<code>pre-extract</code> und <code>do-extract</code> <em>
niemals</em> &uuml;berschrieben werden. Wenn die DISTFILES Extraktion eine besondere ist,
setze 
d345 10
d357 1
a357 1
Originally [OpenBSD: diffs.html,v 1.12 ]
d359 1
a359 1
$Translation: diffs.html,v 1.9 2002/10/04 13:51:21 jufi Exp $
d361 1
a361 1
<small>$OpenBSD: diffs.html,v 1.12 2002/09/23 06:01:58 pvalchev Exp $</small>
@


1.8
log
@
copyright cleanup
@
text
@a31 10
Du kannst auf das Vorhandensein einer speziellen Version von <code>bsd.port.mk</code> 
mittels Setzen von NEED_VERSION pr&uuml;fen.
</p>

<p>
Setze die NEED_VERSION Zeile direkt unter die CATEGORIES Zeile, um
das automatische Verarbeiten zu erleichtern.
</p>

<p>
d332 1
a332 1
Originally [OpenBSD: diffs.html,v 1.11 ]
d334 1
a334 1
$Translation: diffs.html,v 1.8 2001/09/10 19:53:09 jufi Exp $
d336 1
a336 1
<small>$OpenBSD: diffs.html,v 1.11 2001/09/10 19:26:33 jufi Exp $</small>
@


1.7
log
@
updated.
@
text
@d12 1
a12 2
<meta name="copyright" content=
"This document copyright 2000 by OpenBSD.">
d342 1
a342 1
Originally [OpenBSD: diffs.html,v 1.10 ]
d344 1
a344 1
$Translation: diffs.html,v 1.7 2001/07/30 19:58:32 jufi Exp $
d346 1
a346 1
<small>$OpenBSD: diffs.html,v 1.10 2001/07/30 14:50:12 espie Exp $</small>
@


1.6
log
@
correction
@
text
@a337 9
.if ${FLAVOR:L}="zoinx foo"
</pre>

<p>
Zu &uuml;berpr&uuml;fen, ob ein flavor eine bestimmte Option enth&auml;lt, wird etwas
anders gemacht:
</p>

<pre>
d343 1
a343 1
Originally [OpenBSD: diffs.html,v 1.9 ]
d345 1
a345 1
$Translation: diffs.html,v 1.6 2001/06/10 15:21:37 jufi Exp $
d347 1
a347 1
<small>$OpenBSD: diffs.html,v 1.9 2001/06/09 16:39:06 pvalchev Exp $</small>
@


1.5
log
@
Updated.
@
text
@d118 1
a118 1
<h3>Die <code>Arbeits</code> Infrastruktur</h3>
d352 1
a352 1
Originally [OpenBSD: diffs.html,v 1.8 ]
d354 1
a354 1
$Translation: diffs.html,v 1.5 2001/05/19 19:37:48 jufi Exp $
d356 1
a356 1
<small>$OpenBSD: diffs.html,v 1.8 2001/05/18 02:25:29 brad Exp $</small>
@


1.4
log
@
Updated.
@
text
@d334 1
a334 1
&Uuml;berpr&uuml;fen ob ein gegebener flavor ausgew&auml;hlt wurde ist recht leicht: 
d342 2
a343 2
&Uuml;berpr&uuml;fen ob ein flavor eine bestimmte Option enth&auml;lt ist etwas 
schwieriger:
d352 1
a352 1
Originally [OpenBSD: diffs.html,v 1.7 ]
d354 1
a354 1
$Translation: diffs.html,v 1.4 2001/03/28 16:47:31 jufi Exp $
d356 1
a356 1
<small>$OpenBSD: diffs.html,v 1.7 2001/03/28 14:57:16 espie Exp $</small>
@


1.3
log
@
UPdated.
@
text
@d329 1
a329 1
SUBDIR=directory:opt1,opt2  um sagen zu wollen: `baue den port in directory mit
d352 1
a352 1
Originally [OpenBSD: diffs.html,v 1.6 ]
d354 1
a354 1
$Translation: diffs.html,v 1.3 2000/08/17 17:50:10 jufi Exp $
d356 1
a356 1
<small>$OpenBSD: diffs.html,v 1.6 2000/08/17 04:10:27 brad Exp $</small>
@


1.2
log
@
Updating.
@
text
@a243 5
Um das 'fake framework' zu aktivieren, musst du lediglich die Variable FAKE=Yes im
Makefile des port setzen.
</p>

<p>
d261 1
a261 1
konfiguriert sind, um DESTDIR zu benutzen. Genauso sollten neuere gnu-configure ports
d277 2
a278 2
WRKINST/usr/local installieren (also f&uuml;r gnu configure benutze 
<code>CONFIGURE_ARGS=--prefix='$$(DESTDIR)$(PREFIX)'</code>).
d325 2
a326 3
<li>Wenn die packing list PLIST.sed heisst, werden Konstrukte der Form
%%flavor%% die Einbeziehung von pfrag.Flavor ausl&ouml;sen. Das
%%SHARED%% Konstrukt l&ouml;st die Einbeziehung von PFRAG.shared aus.</li>
d352 1
a352 1
Originally [OpenBSD: diffs.html,v 1.5 ]
d354 1
a354 1
$Translation: diffs.html,v 1.2 2000/07/08 20:45:07 jufi Exp $
d356 1
a356 2
<small>$OpenBSD: diffs.html,v 1.5 2000/06/18 23:52:06 naddy Exp $</small>

@


1.1
log
@
And adding this fiel as well.
@
text
@d360 1
a360 1
$Translation: diffs.html,v 1.1 2000/07/04 17:12:59 jufi Exp $
@

