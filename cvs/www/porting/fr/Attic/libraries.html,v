head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2014.04.01.17.23.03;	author deraadt;	state dead;
branches;
next	1.12;

1.12
date	2013.08.29.06.30.47;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.24.06.51.44;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.12.17.32.51;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.25.12.13.09;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.08.08.34.58;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.14.09.55.33;	author saad;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.30.09.13.04;	author saad;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.02.20.39.57;	author saad;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.15.14.32.54;	author saad;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.28.20.33.51;	author saad;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.31.13.25.05;	author saad;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.28.16.20.56;	author jufi;	state Exp;
branches;
next	;


desc
@@


1.13
log
@more unmaintained transations go away
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta http-equiv="Content-Type" content=
"text/html; charset=iso-8859-1">
<meta name="resource-type" content="document">
<meta name="description" content=
"Shared libraries in the ports tree">
<meta name="keywords" content="openbsd,ports,library">
<meta name="distribution" content="global">
<meta name="copyright" content=
"This document copyright 2001 by OpenBSD.">
<title>Gestion des bibliothèques partagées dans l'arbre des ports OpenBSD</title>
</head>
<body text="Black" bgcolor="White" link="#23238E">
<img height="30" width="141" src="../../images/smalltitle.gif" alt=
"[OpenBSD]"> 

<h1>Comment gérer les bibliothèques partagées dans l'arbre des ports</h1>

<h2>Comprendre les règles de numérotation des bibliothèques partagées</h2>
Les bibliothèques partagées sont quelque peu rusées et ce pour plusieurs
raisons. Vous devez comprendre le schéma de nommage des bibliothèques :
<code>libfoo.so.majeur.mineur</code>.
<p>
Quand vous liez un programme, l'éditeur de liens <code>ld</code> inclut
cette information dans le binaire créé. Vous pouvez voir ceci avec 
<code>ldd</code>. Par la suite, lorsque vous lancez le programme,
l'éditeur de liens dynamique <code>ld.so</code> utilise cette information 
pour trouver la bonne bibliothèque dynamique :
<ul>
        <li>Une bibliothèque avec le même numéro majeur est requise.
        <li>Une bibliothèque avec un numéro mineur égal ou supérieur est requise.
</ul>
Ainsi, cela signifie que <strong>toutes</strong> les bibliothèques avec le
même numéro majeur et un numéro mineur égal ou supérieur <strong>
doivent satisfaire l'API binaire que le programme prévoit</strong>. Si
ce n'est pas le cas, votre port est alors cassé. Spécifiquement, cela se
produira quand les utilisateurs essaieront de mettre à jour leurs
systèmes.
<p>
Les règles pour les bibliothèques partagées sont relativement simples.
<ul>
        <li>Si vous ajoutez des fonctions aux bibliothèques, vous devez
            augmenter le numéro mineur de la bibliothèque : un programme
            qui nécessite ces fonctions n'a aucun moyen de les exiger
            mais peut le demander explicitement avec une version
            minimale à utiliser.

        <li>Si les API existantes changent, ce qui est souvent le cas,
            si toutes les signatures de fonction sont modifiées, si les
            séquences d'appel ne sont plus valides ou si un type change
            d'une façon incompatible, le numéro majeur de la bibliothèque
            <strong>doit être augmenté</strong>.

        <li>Ceci inclut la suppression des anciennes fonctions. Toutes
            les suppressions de fonction déclenchent une augmentation du
            numéro majeur.
</ul>
<p>
Parfois, il arrive qu'une bibliothèque soit écrite en plusieurs fichiers,
et que les fonctions internes doivent apparaitre comme visibles pour
communiquer avec ces fichiers.
Ces noms de fonction commencent traditionnellement avec un trait de
soulignement, et ne sont pas une partie proprement dite de l'API.
<p>
Notez que le schéma de nommage des bibliothèques est omniprésent sur les
plates-formes OpenBSD qu'elles soient ELF ou a.out.

<h2>Peaufiner les constructions de ports pour obtenir les noms corrects</h2>
Un certain nombre de ports ont besoin d'être peaufinés afin de
compiler correctement et continuellement les bibliothèques partagées.
Rappelez vous que la construction des bibliothèques partagées doit être
réalisée avec <code>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1
obj2</code>
<p>
Renommez la bibliothèque après ceci afin d'ajuster le numéro de version ne
marche pas : les bibliothèques ELF utilisent d'autres nombres magiques pour
fixer le nom interne de la bibliothèque, et vous devriez ainsi la lier avec
une version correcte dès la première fois.
<p>
D'un autre côté, rappelez vous que vous pouvez redéfinir les variables
du Makefile depuis la ligne de commande, en utilisant
<code>MAKE_FLAGS</code> dans le Makefile du port. Ceci est tout à fait
utile pour les ports basés sur la libtool par exemple, qui fournissent
une version variable pour chaque bibliothèque qu'ils créent.

<p>
Les ports basés sur libtool sont gérés par la version de libtool présente
l'arbre des ports, qui se charge automatiquement de la plupart des détails :
<ul>
 <li>libtool regarde <code>SHARED_LIBS</code> et remplace
     automatiquement les numéros de version. 
 <li>libtool crée un log des bibliothèques partagées dans le fichier
     <code>${WRKBUILD}/shared_libs.log</code> qui peut être directement
     intégré dans le Makefile du port.
</ul>

<h2>Essayer de placer toutes les bibliothèques visibles à un utilisateur
    dans /usr/local/lib</h2>
En règle générale, demander à l'utilisateur d'ajouter des répertoires
dans leur "path" ldconfig est une très mauvaise idée : toutes les
bibliothèques partagées qui sont directement liées aux programmes devraient
apparaitre dans /usr/local/lib. Cependant, il est tout à fait possible
d'utiliser un lien symbolique vers la bibliothèque actuelle. Vous devriez
comprendre les règles de parcours des bibliothèques :
<ul>
  <li>Au moment de la construction, <code>ld</code> utilise les drapeaux
      <code>-L</code> pour régler les "paths" dans lequel regarder pour
      une bibliothèque. Il arrête le parcours dès lors qu'il trouve une
      bibliothèque qui correspond à sa recherche.
  <li>Au moment du lancement, <code>ld.so</code> utilise l'information
      mise en cache par <code>ldconfig</code> pour trouver la bibliothèque
      requise.
</ul>

À présent, supposons que vous avez deux ports qui fournissent deux
versions majeures d'une bibliothèque donnée, à savoir <code>qt.1.45</code>
et <code>qt.2.31</code>. Puisque les deux ports peuvent être installés
simultanément, pour être sur qu'un programme donné sera lié avec qt.1,
cette bibliothèque est fournie avec
<code>/usr/local/lib/qt/libqt.so.1.45</code>, et les programmes seront
liés en utilisant <code>ld -o program program.o -L/usr/local/lib/qt
-lqt</code>. De même, un programme lié avec qt.2 utilisera le fichier
<code>/usr/local/lib/qt2/libqt.so.2.31</code> avec <code>ld -o program
program.o -L/usr/local/lib/qt2 -lqt</code>.
<p>
Pour résoudre ces bibliothèques au moment du lancement, un lien appelé
<code>/usr/local/lib/libqt.so.1.45</code> et un lien appelé
<code>/usr/local/lib/libqt.so.2.31</code> sont fournis. Ceci est
suffisant pour satisfaire <code>ld.so</code>
<p>
Lier un programme en utilisant qt1 avec
<code>ld -o program program.o -L/usr/local/lib -lqt</code> est une
erreur. Ce code suppose que le <code>qt.2.31</code> n'est pas installé,
ce qui est une fausse prétention.
<p>
De telles astuces sont uniquement nécessaires dans les rares cas de
bibliothèques dominantes ou une période de transition entre deux versions
majeures doit être fournie. En général, ceci est suffisant pour
s'assurer de la présence de la bibliothèque dans
<code>/usr/local/lib</code>.
<h2>Écrire correctement les dépendances de bibliothèque</h2>
Le nouveau code de dépendance a besoin des dépendances complètes des
bibliothèques. Vous devez utiliser <code>make lib-depends-check</code> ou
<code>make port-lib-depends-check</code>
pour vérifier qu'un port mentionne toutes les bibliothèques
requises. 
Vous devez juste les écrite dans LIB_DEPENDS/WANTLIB comme cela :
<pre>
        LIB_DEPENDS += x11/gtk+
        WANTLIB += gtk.&gt;=1.2,gdk.&gt;=1.2
</pre>
<p>
Spécifier les bibliothèques statiques sur la ligne WANTLIB n'est pas une
erreur à part entière. WANTLIB est évaluée intégralement au moment
de la construction du paquet : le paquetage résultant aura une information
de dépendance de bibliothèque inclut dans <code>ld.so</code> qui porte
le numéro majeur.mineur actuel qui était utilisé pour la construction,
mais rien pour les bibliothèques statiques.
<p>
Vous devez aussi fournir RUN_DEPENDS si un port requiert quelque chose au
delà d'une bibliothèque proprement dite. Ceci permettra au port de se
construire correctement sur les architectures qui ne supportent pas les
bibliothèques partagées.
<p>
En fait, fournir les lignes LIB_DEPENDS même pour les bibliothèques statiques
est une bonne idée : ceci simplifiera la mise à jour du port si une
dépendance donnée passe d'une bibliothèque statique à une bibliothèque
partagée.
<p>
Les lignes WANTLIB doivent spécifier les même "paths" que ceux
utilisés par <code>ld</code>. Avec le même exemple que précédemment, 
le fragment qt2 standard dit 
<code>WANTLIB += lib/qt2/qt.=2</code>.
Ceci permet au code de vérification des bibliothèques de faire le bon choix
quand plusieurs versions de la même bibliothèque sont découvertes.
<h2>Mettre à jour les ports correctement</h2>
Ainsi, quand vous mettez à jour ou ajoutez un port qui implique des
bibliothèques partagées, quelques détails doivent être respectés.
<ul>
        <li>Assurez-vous que les numéros majeur.mineur des bibliothèques
            partagées sont corrects.
        <li>Vérifiez tous les ports qui dépendent de votre port.
            Vérifiez qu'ils se construisent correctement avec vos
            changements. Notifiez les mainteneurs de la mise à jour,
            pour qu'ils puissent ainsi vérifier que leurs ports
            fonctionnent toujours correctement.
        <li>Vous pourriez avoir à ajuster les dépendances de ports WANTLIB et
            LIB_DEPENDS. Si vous introduisez de nouvelles bibliothèques
            partagées, regardez les BUILD_DEPENDS devant être changées
            en LIB_DEPENDS.
        <li>Chaque fois que vous introduisez un nouveau port, vous
            devriez vérifier que vous n'êtes pas en train de créer une
            bibliothèque qui entre en conflit avec une bibliothèque existante
            : les bibliothèques de deux ports avec le même nom sont un
            danger, car les schémas de numérotation de leurs versions
            n'ont aucune chance de correspondre. Vous devriez essayer de
            résoudre la situation avec l'auteur du logiciel (par
            exemple, une bibliothèque appelée libnet est définitivement mal
            dénommée).
        <li>Référez-vous au <a href="../update.html">guide de mise à jour
            des ports</a> pour de plus amples informations.
</ul>
  <hr>
  <a href="../index.html"><img height=24 width=24 src=../../back.gif border=0 alt=OpenBSD></a> 
  <a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br><small>
     <!--
     Originally [OpenBSD: libraries.html,v 1.9 ]<br>
     $Translation: libraries.html,v 1.15 2013/08/24 10:50:48 rustybsd Exp $<br>
     -->
     $OpenBSD: libraries.html,v 1.12 2013/08/29 06:30:47 ajacoutot Exp $
   </small>
 </body>
</html>
@


1.12
log
@Sync with Steelix CVS
@
text
@d214 1
a214 1
     $OpenBSD$
@


1.11
log
@Sync with Steelix CVS
@
text
@d55 1
a55 1
            <string>doit être augmenté</strong>.
d212 1
a212 1
     $Translation: libraries.html,v 1.14 2013/03/21 18:18:23 rustybsd Exp $<br>
@


1.10
log
@Sync with Steelix CVS
@
text
@d90 2
a91 5
Le meilleur moyen de gérer les ports basés sur libtool est d'utiliser la
variable
<code>USE_LIBTOOL=Yes</code>. Cela active la version de libtool présente
dans l'arbre des ports qui se charge automatiquement de la plupart des
détails :
d211 2
a212 2
     Originally [OpenBSD: libraries.html,v 1.8 ]<br>
     $Translation: libraries.html,v 1.13 2012/10/11 15:39:08 rustybsd Exp $<br>
@


1.9
log
@Sync with Steelix CVS
@
text
@d110 1
a110 1
comprendre les règles de parcour des bibliothèques :
d114 1
a114 1
      une bibliothèque. Il arrête le parcour dès lors qu'il trouve une
d121 1
a121 1
A présent, supposons que vous avez deux ports qui fournissent deux
d147 1
a147 1
<h2>Ecrire correctement les dépendances de bibliothèque</h2>
d155 1
a155 1
        LIB_DEPENDS += ::x11/gtk+
d166 1
a166 1
Vous devez aussi fournir RUN_DEPENDS si un port requiert quelquechose au
d177 1
a177 1
utilisés par <code>ld</code>. Avec le même exemple que précedemment, 
d186 1
a186 1
        <li>Assurez vous que les numéros majeur.mineur des bibliothèques
d188 1
a188 1
        <li>Verifiez tous les ports qui dépendent de votre port.
d214 2
a215 2
     Originally [OpenBSD: libraries.html,v 1.7 ]<br>
     $Translation: libraries.html,v 1.12 2011/08/25 12:04:17 ajacoutot Exp $<br>
@


1.8
log
@Sync with Steelix CVS
@
text
@d69 1
a69 1
plate-formes OpenBSD qu'elles soient ELF ou a.out.
d215 1
a215 1
     $Translation: libraries.html,v 1.11 2010/08/08 07:09:33 benoit Exp $<br>
@


1.7
log
@Sync with Steelix CVS
@
text
@d149 9
a157 5
bibliothèques. Vous devez utiliser <code>make lib-depends-check</code> pour
vérifier qu'un port mentionne toutes les bibliothèques requises.
Vous n'avez qu'a séparer les différentes bibliothèques avec des virgules,
comme ceci :
<code>LIB_DEPENDS=gtk.1.2,gdk.1.2::x11/gtk+</code>.
d159 2
a160 2
Spécifier les bibliothèques statiques sur la ligne LIB_DEPENDS n'est pas une
erreur à part entière. LIB_DEPENDS est évaluée intégralement au moment
d171 1
a171 1
En fait, fournir les lignes LIB_DEPENDS pour les bibliothèques statiques
d176 5
a180 5
Les lignes LIB_DEPENDS doivent spécifier les même "paths" que ceux
utilisés par <code>ld</code>. Par exemple, le fragment qt2 standard dit
: <code>LIB_DEPENDS+=lib/qt2/qt.2::x11/qt2</code>, la ligne de
dépendance des bibliothèques pourra ainsi être correctement résolue. Ceci
permet au code de vérification des bibliothèques de faire le bon choix
d193 1
a193 1
        <li>Vous pourriez avoir à ajuster les dépendances de ports
d214 2
a215 2
     Originally [OpenBSD: libraries.html,v 1.6 ]<br>
     $Translation: libraries.html,v 1.10 2006/11/06 15:20:28 ajacoutot Exp $<br>
@


1.6
log
@sync with Steelix CVS
@
text
@d9 2
a10 2
"Quick guide to writing ports">
<meta name="keywords" content="openbsd,ports">
d89 14
d202 2
d210 2
a211 2
     Originally [OpenBSD: libraries.html,v 1.5 ]<br>
     $Translation: libraries.html,v 1.9 2006/06/26 13:14:28 ajacoutot Exp $<br>
@


1.5
log
@sync with Steelix CVS
@
text
@d14 1
a14 1
<title>Gestion des librairies partagées dans l'arbre des ports OpenBSD</title>
d20 1
a20 1
<h1>Comment gérer les librairies partagées dans l'arbre des ports</h1>
d22 3
a24 3
<h2>Comprendre les règles de numérotation des librairies partagées</h2>
Les librairies partagées sont quelque peu rusées et ce pour plusieurs
raisons. Vous devez comprendre le schéma de nommage des librairies :
d31 1
a31 1
pour trouver la bonne librairie dynamique :
d33 2
a34 2
        <li>Une librairie avec le même numéro majeur est requise.
        <li>Une librairie avec un numéro mineur égal ou supérieur est requise.
d36 1
a36 1
Ainsi, cela signifie que <strong>toutes</strong> les librairies avec le
d43 1
a43 1
Les règles pour les librairies partagées sont relativement simples.
d45 2
a46 2
        <li>Si vous ajoutez des fonctions aux librairies, vous devez
            augmenter le numéro mineur de la librairie : un programme
d54 1
a54 1
            d'une façon incompatible, le numéro majeur de la librairie
d62 1
a62 1
Parfois, il arrive qu'une librairie soit écrite en plusieurs fichiers,
d68 2
a69 2
Notez que le schéma de nommage des librairies est omniprésent sur les
plateformes OpenBSD qu'elles soient ELF ou a.out.
d73 2
a74 2
compiler correctement et continuellement les librairies partagées.
Rappelez vous que la construction des librairies partagées doit être
d78 3
a80 3
Renommez la librairie après ceci afin d'ajuster le numéro de version ne
marche pas : les librairies ELF utilisent d'autres nombres magiques pour
fixer le nom interne de la librairie, et vous devriez ainsi la lier avec
d87 1
a87 1
une version variable pour chaque librairie qu'ils créent.
d89 1
a89 1
<h2>Essayer de placer toutes les librairies visibles à un utilisateur
d93 1
a93 1
librairies partagées qui sont directement liées aux programmes devraient
d95 2
a96 2
d'utiliser un lien symbolique vers la librairie actuelle. Vous devriez
comprendre les règles de parcour des librairies :
d100 2
a101 2
      une librairie. Il arrête le parcour dès lors qu'il trouve une
      librairie qui correspond à sa recherche.
d103 1
a103 1
      mise en cache par <code>ldconfig</code> pour trouver la librairie
d108 1
a108 1
versions majeures d'une librairie donnée, à savoir <code>qt.1.45</code>
d111 1
a111 1
cette librairie est fournie avec
d118 1
a118 1
Pour résoudre ces librairies au moment du lancement, un lien appelé
d129 1
a129 1
librairies dominantes ou une période de transition entre deux versions
d131 1
a131 1
s'assurer de la présence de la librairie dans
d133 1
a133 1
<h2>Ecrire correctement les dépendances de librairie</h2>
d135 3
a137 3
librairies. Vous devez utiliser <code>make lib-depends-check</code> pour
vérifier qu'un port mentionne toutes les librairies requises.
Vous n'avez qu'a séparer les différentes librairies avec des virgules,
d141 1
a141 1
Spécifier les librairies statiques sur la ligne LIB_DEPENDS n'est pas une
d143 2
a144 2
de la construction du paquet : le package résultant aura une information
de dépendance de librairie inclut dans <code>ld.so</code> qui porte
d146 1
a146 1
mais rien pour les librairies statiques.
d149 1
a149 1
delà d'une librairie proprement dite. Ceci permettra au port de se
d151 1
a151 1
librairies partagées.
d153 1
a153 1
En fait, fournir les lignes LIB_DEPENDS pour les librairies statiques
d155 1
a155 1
dépendance donnée passe d'une librairie statique à une librairie
d161 3
a163 3
dépendance des librairies pourra ainsi être correctement résolue. Ceci
permet au code de vérification des librairies de faire le bon choix
quand plusieurs versions de la même librairie sont découvertes.
d166 1
a166 1
librairies partagées, quelques détails doivent être respectés.
d168 1
a168 1
        <li>Assurez vous que les numéros majeur.mineur des librairies
d176 1
a176 1
            LIB_DEPENDS. Si vous introduisez de nouvelles librairies
d181 2
a182 2
            librairie qui entre en conflit avec une librairie existante
            : les librairies de deux ports avec le même nom sont un
d186 1
a186 1
            exemple, une librairie appelée libnet est définitivement mal
d195 1
a195 1
     $Translation: libraries.html,v 1.6 2005/07/16 17:00:38 aanriot Exp $<br>
@


1.4
log
@sync with Steelix CVS
@
text
@d33 2
a34 2
	<li>Une librairie avec le même numéro majeur est requise.
	<li>Une librairie avec un numéro mineur égal ou supérieur est requise.
d37 5
a41 4
même numéro majeur et un numéro mineur égal ou supérieur <strong> doivent
satisfaire l'API binaire que le programme prévoit</strong>. Si ce n'est
pas le cas, votre port est alors cassé. Spécifiquement, cela se produira
quand les utilisateurs essaieront de mettre à jour leurs systèmes.
d45 6
a50 4
	<li>Si vous ajoutez des fonctions aux librairies, vous devez augmenter
le numéro mineur de la librairie : un programme qui nécessite ces fonctions
n'a aucun moyen de les exiger mais peut le demander explicitement avec une
version minimale à utiliser.
d56 4
a59 2
        <li>Ceci inclut la suppression des anciennes fonctions. Toutes les 
suppressions de fonction déclenchent une augmentation du numéro majeur.
d62 4
a65 4
Parfois, il arrive qu'une librairie soit écrite en plusieurs fichiers, et que
les fonctions internes doivent apparaitre comme visibles pour communiquer avec
ces fichiers.
Ces noms de fonction commencent traditionnellement avec un trait de 
d68 2
a69 2
Notez que le schéma de nommage des librairies est omniprésent sur
les plateformes OpenBSD qu'elles soient ELF ou a.out.
d72 16
a87 15
Un certain nombre de ports ont besoin d'être peaufinés afin de construire 
correctement et continuellement les librairies partagées.
Rappelez vous que la construction des librairies partagées doit être réalisée
avec <code>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</code>
<p>
Renommez la librairie après ceci afin d'ajuster le numéro de version ne marche
pas : les librairies ELF utilisent d'autres nombres magiques pour fixer le
nom interne de la librairie, et vous devriez ainsi la lier avec une version
correcte dès la première fois.
<p>
D'un autre côté, rappelez vous que vous pouvez redéfinir les variables du
Makefile depuis la ligne de commande, en utilisant <code>MAKE_FLAGS</code>
dans le Makefile du port. Ceci est tout à fait utile pour les ports basés
sur la libtool par exemple, qui fournissent une version variable pour
chaque librairie qu'ils créent.
d89 2
a90 2
<h2>Essayer de placer toutes les librairies visibles à un utilisateur dans
/usr/local/lib</h2>
d92 5
a96 5
dans leur "path" ldconfig est une très mauvaise idée : toutes les librairies
partagées qui sont directement liées aux programmes devraient apparaitre
dans /usr/local/lib. Cependant, il est tout à fait possible d'utiliser
un lien symbolique vers la librairie actuelle. Vous devriez comprendre
les règles de parcour des librairies :
d107 10
a116 10
A présent, supposons que vous avez deux ports qui fournissent deux versions
majeures d'une librairie donnée, à savoir <code>qt.1.45</code> et
<code>qt.2.31</code>. Puisque les deux ports peuvent être installés 
simultanément, pour être sur qu'un programme donné sera lié avec
qt.1, cette librairie est fournie avec
<code>/usr/local/lib/qt/libqt.so.1.45</code>, et les programmes seront liés
en utilisant <code>ld -o program program.o -L/usr/local/lib/qt -lqt</code>.
De même, un programme lié avec qt.2 utilisera le fichier
<code>/usr/local/lib/qt2/libqt.so.2.31</code> avec
<code>ld -o program program.o -L/usr/local/lib/qt2 -lqt</code>.
d121 1
a121 1
suffisant pour satisfaire <code>ld.so</code>.
d124 2
a125 2
<code>ld -o program program.o -L/usr/local/lib -lqt</code> est une erreur.
Ce code suppose que le <code>qt.2.31</code> n'est pas installé,
d130 2
a131 2
majeures doit être fournie. En général, ceci est suffisant pour s'assurer
de la présence de la librairie dans
d135 2
a136 2
librairies. Vous devez utiliser <code>make lib-depends-check</code>
pour vérifier qu'un port mentionne toutes les librairies requises.
d148 16
a163 15
Vous devez aussi fournir RUN_DEPENDS si un port requiert quelquechose
au delà d'une librairie proprement dite. Ceci permettra au port de 
se construire correctement sur les architectures qui ne supportent pas
les librairies partagées.
<p>
En fait, fournir les lignes LIB_DEPENDS pour les librairies statiques est
une bonne idée : ceci simplifiera la mise à jour du port si une dépendance
donnée passe d'une librairie statique à une librairie partagée.
<p>
Les lignes LIB_DEPENDS doivent spécifier les même "paths" que ceux utilisés
par <code>ld</code>. Par exemple, le fragment qt2 standard dit :
<code>LIB_DEPENDS+=lib/qt2/qt.2::x11/qt2</code>, la ligne de dépendance
des librairies pourra ainsi être correctement résolue. Ceci permet au code
de vérification des librairies de faire le bon choix quand plusieurs
versions de la même librairie sont découvertes.
d165 2
a166 2
Ainsi, quand vous mettez à jour ou ajoutez un port qui implique des librairies
partagées, quelques détails doivent être respectés.
d168 20
a187 16
        <li>Assurez vous que les numéros majeur.mineur des librairies partagées 
sont corrects.
        <li>Verifiez tous les ports qui dépendent de votre port. Vérifiez qu'ils se
construisent correctement avec vos changements. Notifiez les mainteneurs 
de la mise à jour, pour qu'ils puissent ainsi vérifier que leurs ports 
fonctionnent toujours correctement.
        <li>Vous pourriez avoir à ajuster les dépendances de ports LIB_DEPENDS. Si
vous introduisez de nouvelles librairies partagées, regardez les BUILD_DEPENDS
devant être changées en LIB_DEPENDS.
        <li>Chaque fois que vous introduisez un nouveau port, vous devriez vérifier
que vous n'êtes pas en train de créer une librairie qui entre en conflit avec
une librairie existante : les librairies de deux ports avec le même nom
sont un danger, car les schémas de numérotation de leurs versions n'ont aucune
chance de correspondre. Vous devriez essayer de résoudre la situation avec
l'auteur du logiciel (par exemple, une librairie appelée libnet est
définitivement mal dénommée).
d195 1
a195 1
     $Translation: libraries.html,v 1.5 2005/03/12 17:59:24 aanriot Exp $<br>
@


1.3
log
@sync with Steelix CVS
@
text
@d72 1
a72 1
Renommer la librairie après ceci afin d'ajuster le numéro de version ne marche
d184 1
a184 1
     $Translation: libraries.html,v 1.4 2005/02/03 17:51:24 aanriot Exp $<br>
@


1.2
log
@sync with Steelix CVS
@
text
@d26 1
a26 1
</p>
d41 1
a41 1
</p>
d56 1
a56 1
</p>
d62 1
a62 1
</p>
d71 1
a71 1
</p>
d76 1
a76 1
</p>
d92 7
a98 6
        <li>Au moment de la construction, <code>ld</code> utilise les drapeaux
<code>-L</code> pour régler un "path" dans lequel regarder pour une librairie.
Il arrête le parcour dès lors qu'il trouve une librairie qui correspond à sa
recherche.
        <li>Au moment du lancement, <code>ld.so</code> utilise l'information
mise en cache par <code>ldconfig</code> pour trouver la librairie requise.
d106 1
a106 1
</code>/usr/local/lib/qt/libqt.so.1.45</code>, et les programmes seront liés
d109 1
a109 1
</code>/usr/local/lib/qt2/libqt.so.2.31</code> avec
d111 1
a111 1
</p>
d116 1
a116 1
</p>
d121 1
a121 1
</p>
d134 1
a134 1
</p>
d141 1
a141 1
</p>
d146 1
a146 1
</p>
d150 1
a150 1
</p>
d183 3
a185 3
	 Originally [OpenBSD: libraries.html,v 1.4 ]<br>
     $Translation: libraries.html,v 1.3 2005/01/19 17:40:38 aanriot Exp $<br>
	 -->
@


1.1
log
@sync with steelix translation CVS
@
text
@d181 4
a184 2
     Originally [OpenBSD: libraries.html,v 1.4 ]<br>
     $Translation: libraries.html,v 1.1 2004/11/28 13:00:01 aanriot Exp $<br>
@

