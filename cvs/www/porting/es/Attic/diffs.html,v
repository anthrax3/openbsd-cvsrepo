head	1.10;
access;
symbols;
locks; strict;
comment	@# @;


1.10
date	2014.04.01.17.23.03;	author deraadt;	state dead;
branches;
next	1.9;

1.9
date	2011.02.25.12.35.57;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.25.13.26.56;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.20.18.00.31;	author jufi;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.10.08.32.13;	author jufi;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.21.19.56.13;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.07.08.03.08;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.29.07.07.18;	author jufi;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.01.12.33.18;	author jufi;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.17.06.26;	author wvdputte;	state Exp;
branches;
next	;


desc
@@


1.10
log
@more unmaintained transations go away
@
text
@<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<meta http-equiv="Content-Type" content=
"text/html; charset=iso-8859-1">
<meta name="resource-type" content="document">
<meta name="description" content=
"Differences with other BSD porting systems.">
<meta name="keywords" content="openbsd,ports">
<meta name="distribution" content="global">
<meta name="copyright" content="This document copyright 2000 by OpenBSD.">
<title>Diferencias con otros sistemas de portes BSD</title>
</head>
<body text="Black" bgcolor="White" link="#23238E">
<img height="30" width="141" src="../../images/smalltitle.gif" alt=
"[OpenBSD]"> 

<h1>Información sobre los portes de OpenBSD</h1>

<h2><font color="#e00000">Diferencias importantes con otros proyectos
BSD</font></h2>

<p>
NetBSD usa el término <em>ports</em> ("portes") para
definir a las diferentes arquitecturas en las que funciona el sistema
operativo.  Su estructura de portes se llama
<em>packages</em> ("paquetes").
</p>

<h3>Soporte adicional</h3>
La infraestructura de portes incluye varios guiones (<i>scripts</i>) 
que facilitan la creación de nuevos portes:
<dl>
<dt>build/resolve-lib
    <dd>invocado vía <code>make lib-depends-check</code>, para verificar 
    dependencias de bibliotecas dinámicas (compartidas).
<dt>build/update-patches
    <dd>invocado vía <code>make update-patches</code>, que debe 
    <strong>usarse siempre para regenerar los parches.</strong>
<dt>install/make-plist
    <dd>invocado vía <code>make update-plist</code>. Se ocupa de
    las cuestiones más importantes que afectan a la creación de listas 
    de empaquetado. Las listas de empaquetado de OpenBSD son significativamente 
    diferentes de los de otras proyectos BSD, en parte debido a que las
    herramientas de empaquetado han sido completamente reescritas.
</dl>

<h3>Temas genéricos de infraestructura</h3>

<p>
En OpenBSD, 'make' tiene soporte para <code>${VAR:U}</code> y 
<code>${VAR:L}</code> para transformar el valor de una variable a
mayúsculas o minúsculas.
De acuerdo con esto, las comprobaciones de 'make' se deberían
codificar de forma independiente del caso, v.g.:
</p>

<pre>
	.if ${NEED_XXX:L} == &quot;yes&quot;
	do stuff if yes
	.else
	do other stuff
	.endif
</pre>
 
<p>
En teoría, todas las variables booleanas reconocidas por 
<code>bsd.port.mk</code> deben siempre definirse, 
de modo que al final código como
<code>defined(USE_FOO)</code> no deba ser necesario y  
<code>${USE_FOO:L} != "no"</code> debería funcionar.
</p>

<p>
El fichero principal <code>bsd.port.mk</code> ha sido fuertemente
adaptado y se han solucionado algunos problemas.
En particular, está preparado para ir paralelo a 'make'.
La funcionalidad <code>scripts/{pre,do,post}-*</code> se ha perdido en
el proceso.
Para reemplazar esta funcionalidad, invoque el guión
(&quot;<em>script</em>&quot;) a mano desde el fichero Makefile.
</p>

<p>
<h3>Usar make correctamente</h3>

<p>
Note que si invoca 'make' como <code>make VAR=value</code>, la
asignación <em>anulará</em> cualquier valor que VAR
obtenga de Makefile.
Por ello, muchos parches para Makefile no son necesarios, es mucho
mejor configurar correctamente MAKE_FLAGS para disminuir la carga del
mantenimiento.
</p>

<p>
<h3>Obtener el código fuente</h3>

<p>
Existen dos tipos de archivos de fuentes: DISTFILES y PATCHFILES.
OpenBSD los procesa de un modo uniforme y, de modo predeterminado, lo
saca todo de MASTER_SITES.
<strong>No</strong> hay PATCH_SITES ni PATCH_SITES_SUBDIR.
</p>

<p>
Si todos los parches que se bajaran no provinieran del mismo grupo de
sitios, OpenBSD permitiría las extensiones filename:0 a
filename:9, en cuyo caso usaría MASTER_SITES0 hasta
MASTER_SITES9 para bajar el fichero.
</p>

<p>
Es posible que algunas arquitecturas necesiten ficheros distfiles
específicos.  En el pasado, esto ha causado problemas en donde
ha sido preciso replicar (&quot;<em>mirror</em>&quot;) distfiles.
OpenBSD dispone de soporte para un tercer grupo de ficheros:
SUPDISTFILES.  éstos serán considerados sólo para
generar sumas de comprobación y réplicas.  Nótese
que es posible que SUPDISTFILES coincida en parte con DISTFILES o
PATCHFILES.  Por ejemplo:
</p>

<pre>
	DISTFILES=foo-1.0.tgz
	.if ${ARCH} == &quot;i386&quot;
	DISTFILES+=foo-i386.tgz
	.elif ${ARCHI} == &quot;sparc&quot;
	DISTFILES+=foo-sparc.tgz
	.endif
	SUPDISTFILES=foo-i386.tgz foo-sparc.tgz
</pre>

<p>
<h3>La infraestructura de trabajo <code>WRKDIR</code></h3>

<p>
No queremos portes que usen <code>NO_WRKDIR</code>.
Todos los portes de OpenBSD deben tener un directorio de trabajo.
Los detalles sobre el nombre de estos directorios de trabajo no tienen
porqué ser la preocupación de un &laquo;portador&raquo;.
Si necesita averiguar uno de estos nombres, mire en el fichero
Makefile: <code>cd that_ports_dir &amp;&amp; make show=WRKDIR</code> 
le dará una idea sobre el <code>WRKDIR</code>
(directorio de trabajo) de ese porte.
</p>

<p>
La principal razón detrás de esa prohibición es
que en OpenBSD, <code>bsd.port.mk</code> actúa como un fichero
Makefile real, con dependencias.
El paso <code>fethc</code> depende de los distfiles y patchfiles, y el
resto de los pasos dependen de ficheros reales ubicados en el
directorio de trabajo (&quot;cookies&quot;), así que no pueden
existir sin un directorio de trabajo.
</p>

Si la extracción de DISTFILES es específica, configure
</p>

<pre>
EXTRACT_ONLY=
</pre> 

<p>
y lleve a cabo la extracción en <code>post-extract</code>.
</p>

<dl>
<dt>WRKDIR</dt>

<dd>Directorio de trabajo del porte, en donde pone sus propias
<em>cookies</em>.</dd>

<dt>WRKDIST</dt>

<dd>Subdirectorio de WRKDIR, en donde el porte se desempaqueta.
También es el directorio base para parches.  Otros BSD no tienen
en la actualidad la distinción WRKDIST/WRKSRC, y sólo
tienen WRKSRC.</dd>

<dt>WRKSRC</dt>

<dd>Subdirectorio de WRKDIST, en donde están ubicados los
fuentes.</dd>

<dt>WRKBUILD</dt>

<dd>Subdirectorio de WRKDIR, en donde tendrá lugar la
configuración y compilación del porte.  Otros BSD no
tienen la distinción WRKBUILD/WRKSRC.  Los programas que se
basen en autoconf (la mayoría) pueden generalmente configurar
SEPARATE_BUILD para dejar que la compilación del porte sea en un
WRKBUILD diferente a WRKSRC.</dd>

<dt>WRKCONF</dt>

<dd>Subdirectorio de WRKDIR donde los scripts configure deben
ejecutarse. De forma predeterminada es WRKBUILD, lo que es correcto 
el 99% del tiempo.</dd>

<dt>WRKINST</dt>

<dd>Directorio en donde se instalará el porte antes de ser
empaquetado (ver &laquo;Simulación de portes&raquo;,
más abajo).</dd>
</dl>

<p>
<em>Nota: NO_WRKSUBDIR ha sido eliminado;  su funcionalidad se puede
obtener configurando WRKDIST=$(WRKDIR).</em>
</p>

<h3>Simulación de portes</h3>

<h4>Introducción</h4>

<p>
Después de que una compilación se ha completado, otros
BSD proceden con la instalación del porte y a
continuación compilan un paquete con el porte instalado.
En lugar de eso, OpenBSD usa una instalación simulada.  
</p>

<ul>
<li>Un porte OpenBSD se configura y compila normalmente (v.g., para
    instalarse en <code>PREFIX</code>, que suele ser
    /usr/local</code>).</li>

<li>Pero se le indica que se instale en otra parte, en
    <code>WRKINST</code>, que suele ser un subdirectorio de
    <code>WRKDIR</code>.</li>

<li>Entonces se empaqueta la instalación ficticia, usando la
    opción -B de pkg_create.</li>

<li>Finalmente, el paquete resultante puede ser instalado usando
    pkg_add.</li>
</ul>

<h4>Ventajas</h4>

<ul>
<li>Para quien construye el paquete, esto significa que la
    mayoría de portes no tienen que ser instalados, lo que
    elimina un gran número de compromisos potenciales y
    desagrado general debido a portes mal instalados.  También
    permite construir varios paquetes con conflictos entre sí en
    la misma máquina.  Finalmente, permite construir un nuevo
    grupo de paquetes no probados sin tener que hacer una
    instalación correcta.</li>

<li>Para quien construye un porte, simplifica enormemente la labor de
    encontrar problemas en listas de paquetes, ya que el área
    falsa de instalación se encuentra vacía antes de que
    sea instalado el porte.  Además, si un porte instala
    demasiados ficheros, ya no es necesario retocar la
    instalación del porte:  es suficiente con no grabar los
    ficheros extraños en la lista de empaquetado.</li>

<li>Para el usuario final, mejora la calidad de los paquetes;  ya que
    el porte final se instala usando pkg_add, el usuario final obtiene
    <em>exactamente</em> el mismo software que fue preparado en la
    máquina del portador.</li>
</ul>

<h4>Cómo hacerlo</h4>

<p>
Los objetivos invocados para <code>make fake</code> son los objetivos
de instalación usuales, con la excepción de unas pocas
diferencias:
</p>

<ul>
<li>Se usa FAKE_FLAGS en lugar de MAKE_FLAGS.
    Por definición, FAKE_FLAGS configura
    DESTDIR=${WRKINST}.</li>

<li>Se usa FAKE_TARGET en lugar de INSTALL_TARGET.</li>

<li>Los fragmentos {pre,per,post}-instalación se invocan con
    TRUEPREFIX configurado a $(PREFIX), PREFIX configurado a
    $(WRKINST)$(PREFIX), y DESTDIR configurado a $(WRKINST).</li>
</ul>

<p>
Los portes que usen imake deberían funcionar tal cual, ya que
los fragmentos imake están configurados para usar DESTDIR.
De forma parecida, los portes recientes que usen GNU configure no
deberían necesitar ningún cambio.
</p>

<p>
Otra técnica útil es un truco de `ligado tardío':
configure los portes para usar un prefijo $(DESTDIR)/usr/local, de modo
que el fichero Makefile resultante tenga
</p>

<pre>
prefix=$(DESTDIR)/usr/local
</pre>

<p>
configurado.
Cuando el porte se compile, y puesto que DESTDIR está
configurado a nada, se usará /usr/local y la falsa
instalación pondrá todo en WRKINST/usr/local (v.g., para
portes que usen GNU configure, utilice
<code>CONFIGURE_STYLE= gnu dest</code>).
</p>

<h4>Dificultades</h4>

<ul>
<li>Algunos portes son inconsistentes procesando sus DESTDIR: la
    mayoría de portes van bien con DESTDIR activado, excepto uno
    ó dos.
    Solucione el problema con parches.</li>

<li>Lleve cuidado al distinguir entre la ubicación real en donde
    está instalado el porte, y la ubicación grabada en los
    ficheros de configuración del paquete.
    Es muy fácil saltarse esto, pero también es fácil
    de solucionar usando TRUEPREFIX.</li>

<li>Siempre hay que retocar los enlaces simbólicos absolutos.
    Por suerte, <code>bsd.port.mk</code> se dará cuenta de los
    problemas en ese área.</li>

<li>Unos pocos portes no quieren dejar $(DESTDIR) sólo durante
    la configuración.
    Se necesita un fragmento de postconfiguración que retoque
    todos los ficheros Makefile para añadir DESTDIR.</li>

<li>En raras ocasiones, un porte se puede resistir a todos lo intentos
    razonables por usar FAKE.
    Una aproximación de fuerza bruta debería funcionar:
    use pre-fake para enlazar o copiar todo lo que el porte quiera
    encontrar en el área WRKINST, y entonces lleve a cabo la
    instalación bajo chroot.</li>
</ul>

<h3>Herramientas de empaquetado</h3>

<p>
Las herramientas de empaquetado conocen algunos tipos de fichero, 
y pueden hacer muchas cosas de forma automática: 
en la mayoría de los casos órdenes <code>@@exec</code> o
scripts <code>INSTALL</code> son innecesarios. 
<br>
<em>Tenga en cuenta que todos los scripts que no sean necesarios deben 
ser excluidos, ya que tienen problemas de escalabilidad. Es mucho más 
fácil de depurar una infraestructura simple de empaquetado que 
modificar cientos de scripts que generen nuevos problemas.
</em><br>
Por ejemplo:
</p>

<ul>
<li><code>@@exec ldconfig</code> no es necesario, pues las bibliotecas
compartidas están anotadas con <code>@@lib libfoo.so.1.0</code> 
y <code>ldconfig</code> es ejecutado cuando es necesario, y maneja
chroot con elegancia.</li>
<li><code>@@exec install-info</code> no es necesario, pues los ficheros de
documentación son anotados con <code>@@info file.info</code>. Se ocupa  
igualmente de  multiples ficheros info, y elimina la necesidad de
<code>makeinfo --no-split</code>.</li>
<li>las fuentes se integran automáticamente gracias a <code>@@font</code> 
y  <code>@@fontdir</code>.</li>
<li>Los nuevos usuarios y grupos son manejados con <code>@@newuser</code> y
<code>@@newgroup</code> en lugar de scripts de instalación. También son
creados lo suficientemente pronto para que la extracción de paquete 
pueda usarse.</li>
<li>Los ficheros de configuración son manejados por medio de 
<code>@@sample</code> en lugar de scripts de instalación.</li>
</ul>

<p>
Diríjase a 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pkg_create&amp;sektion=1&amp;format=html">pkg_create(1)</a>
para obtener más detalles.  En la mayoría de casos,
<code>make update-plist</code> escribirá una muy buena aproximación de la 
lista de empaquetado completa, y se encargará de las mejoras de una versión 
a otra. 
</p>

<h3>Sabores</h3>

<p>
Las opciones se han racionalizado como &laquo;sabores&raquo;, para que
la construcción de paquetes pueda ser consistente.
Un porte con opciones debe configurar FLAVORS a la lista de todas las
opciones que tengan sentido para ese porte (v.g., FLAVORS=foo bar
zoinx), y entonces usar FLAVOR para verificar qué opciones han
sido seleccionadas (v.g., FLAVOR=zoinx foo).<br>
bsd.port.mk provee algo de soporte:
</p>

<ul>
<li>PKGNAME se retoca para incluir opciones separadas por guiones
    (v.g., package-foo-zoinx).</li>

<li>WRKDIR se retoca para que se puedan compilar sabores distintos de
    forma concurrente sin que colisionen.</li>

<li>Las construcciones de la forma %%flavor%% activarán la
    inclusión de PFRAG.flavor.  La construcción
    %%SHARED%% activa la inclusión de PFRAG.shared.</li>

<li>bsd.port.subdir.mk entiende la extensión
    SUBDIR=directory,opt1,opt2 para decir &laquo;compila el porte en
    directorio con FLAVOR=opt1 opt2&raquo;.</li>
</ul>

<p>
Comprobar que un sabor dado ha sido seleccionado es tan simple como:
</p>

<pre>
.if ${FLAVOR:L:Mzoinx}
</pre>

Existe una extensión adicional denominada MULTI_PACKAGES. 
En términos generales, MULTI_PACKAGES y FLAVORS son mecanismos ortogonales. 
En conjunto, tratan de hacer el árbol de portes de OpenBSD algo más pequeño 
que los otros BSD, al permitir un directorio único de portes para construir un 
gran número de paquetes distintos. <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&amp;sektion=5&amp;format=html">bsd.port.mk(5)</a> 
tiene una sección completa dedicada a FLAVORS y MULTI_PACKAGES.

<hr>

<small>
<!--
Originally [OpenBSD: diffs.html,v 1.19 ]<br>
$Translation: diffs.html,v 1.10 2011/02/21 12:52:58 mvidal Exp $<br>
-->
$OpenBSD: diffs.html,v 1.9 2011/02/25 12:35:57 ajacoutot Exp $
</small>

</body>
</html>
@


1.9
log
@Sync with Steelix CVS
@
text
@d439 1
a439 1
$OpenBSD$
@


1.8
log
@
sync with badlands translation CVS
@
text
@d4 7
a10 5
<meta name="generator" content="HTML Tidy, ver www.w3.org">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="resource-type" content="documento">
<meta name="description" content="diferencia con los sistemas de portes de otros BSD">
<meta name="keywords" content="openbsd,portes">
d12 1
a12 1
<meta name="copyright" content= "Este documento es copyright 2001 de OpenBSD.">
d15 1
a15 1
<body text="black" bgcolor="white" link="#23238e">
d19 1
a19 1
<h1>Informaci&oacute;n sobre los Portes de OpenBSD</h1>
d25 1
a25 1
NetBSD usa el t&eacute;rmino <em>&quot;ports&quot;</em> (portes) para
d28 1
a28 1
<em>&quot;packages&quot;</em> (paquetes).
d31 19
a49 1
<h3>Temas gen&eacute;ricos de infraestructura</h3>
d54 2
a55 2
may&uacute;sculas o min&uacute;sculas.
De acuerdo con esto, las comprobaciones de 'make' se deber&iacute;an
d68 5
a72 5
Existe una tendencia a asegurarse que todas las variables
reconocidas por <code>bsd.port.mk</code> se encuentren siempre
definidas, de modo que al final podamos quitarnos de encima
<code>defined(GNU_GMAKE)</code> y usar 
<code>${GNU_GMAKE:L} != &quot;no&quot;</code> en su lugar.
d78 1
a78 1
En particular, est&aacute; preparado para ir paralelo a 'make'.
d81 1
a81 1
Para reemplazar esta funcionalidad, invoque el gui&oacute;n
d90 1
a90 1
asignaci&oacute;n <em>anular&aacute;</em> cualquier valor que VAR
d98 1
a98 1
<h3>Obtener el c&oacute;digo fuente</h3>
d109 2
a110 2
sitios, OpenBSD permitir&iacute;a las extensiones filename:0 a
filename:9, en cuyo caso usar&iacute;a MASTER_SITES0 hasta
d116 1
a116 1
espec&iacute;ficos.  En el pasado, esto ha causado problemas en donde
d119 2
a120 2
SUPDISTFILES.  &Eacute;stos ser&aacute;n considerados s&oacute;lo para
generar sumas de comprobaci&oacute;n y r&eacute;plicas.  N&oacute;tese
d136 1
a136 1
<h3>La infraestructura de trabajo <code>workdir</code></h3>
d142 1
a142 1
porqu&eacute; ser la preocupaci&oacute;n de un &laquo;portador&raquo;.
d144 2
a145 2
Makefile: <code>cd ese_porte_dir &amp;&amp; make show
VARNAME=WRKDIR</code> le dar&aacute; una idea sobre el <code>WRKDIR</code>
d150 2
a151 2
La principal raz&oacute;n detr&aacute;s de esa prohibici&oacute;n es
que en OpenBSD, <code>bsd.port.mk</code> act&uacute;a como un fichero
d155 1
a155 1
directorio de trabajo (&quot;cookies&quot;), as&iacute; que no pueden
d159 1
a159 6
<p>
Debido a un accidente hist&oacute;rico, el fragmento
<code>do-extract</code> crea el directorio de trabajo.
De acuerdo con esto, <code>pre-extract</code> y <code>do-extract</code>
<em>nunca</em> se deber&iacute;an anular.
Si la extracci&oacute;n de DISTFILES es especial, configure
d167 1
a167 1
y lleve a cabo la extracci&oacute;n en <code>post-extract</code>.
d173 2
a174 2
<dd>Directorio de trabajo del porte, en donde pone sus propios
&quot;<em>cookies</em>&quot;.</dd>
d179 2
a180 2
Tambi&eacute;n es el directorio base para parches.  Otros BSD no tienen
en la actualidad la distinci&oacute;n WRKDIST/WRKSRC, y s&oacute;lo
d185 1
a185 1
<dd>Subdirectorio de WRKDIST, en donde est&aacute;n ubicados los
d190 5
a194 5
<dd>Subdirectorio de WRKDIR, en donde tendr&aacute; lugar la
configuraci&oacute;n y compilaci&oacute;n del porte.  Otros BSD no
tienen la distinci&oacute;n WRKBUILD/WRKSRC.  Los programas que se
basen en autoconf (la mayor&iacute;a) pueden generalmente configurar
SEPARATE_BUILD para dejar que la compilaci&oacute;n del porte sea en un
d197 6
d205 3
a207 3
<dd>Directorio en donde se instalar&aacute; el porte antes de ser
empaquetado (ver &laquo;Falsificaci&oacute;n de portes&raquo;,
m&aacute;s abajo).</dd>
d215 1
a215 1
<h3>Portes falsos</h3>
d217 1
a217 1
<h4>Introducci&oacute;n</h4>
d220 4
a223 7
Despu&eacute;s de que una compilaci&oacute;n se ha completado, otros
BSD proceden con la instalaci&oacute;n del porte y a
continuaci&oacute;n compilan un paquete con el porte instalado.
<br>
En lugar de eso, OpenBSD usa una instalaci&oacute;n falsa.  Usando
FAKE, el &aacute;rbol de portes no se convierte del todo, pero se va
aproximando.
d227 1
a227 1
<li>Un porte falso se configura y compila normalmente (v.g., para
d235 2
a236 2
<li>Entonces se empaqueta la falsa instalaci&oacute;n, usando la
    opci&oacute;n -s de pkg_create.</li>
d246 5
a250 5
    mayor&iacute;a de portes no tienen que ser instalados, lo que
    elimina un gran n&uacute;mero de compromisos potenciales y
    desagrado general debido a portes mal instalados.  Tambi&eacute;n
    permite construir varios paquetes con conflictos entre s&iacute; en
    la misma m&aacute;quina.  Finalmente, permite construir un nuevo
d252 1
a252 1
    instalaci&oacute;n correcta.</li>
d255 3
a257 3
    encontrar problemas en listas de paquetes, ya que el &aacute;rea
    falsa de instalaci&oacute;n se encuentra vac&iacute;a antes de que
    sea instalado el porte.  Adem&aacute;s, si un porte instala
d259 2
a260 2
    instalaci&oacute;n del porte:  es suficiente con no grabar los
    ficheros extra&ntilde;os en la lista de empaquetado.</li>
d265 1
a265 1
    m&aacute;quina del portador.</li>
d268 1
a268 1
<h4>C&oacute;mo hacerlo</h4>
d272 1
a272 1
de instalaci&oacute;n usuales, con la excepci&oacute;n de unas pocas
d278 1
a278 1
    Por definici&oacute;n, FAKE_FLAGS configura
d283 1
a283 1
<li>Los fragmentos {pre,per,post}-instalaci&oacute;n se invocan con
d289 2
a290 2
Los portes que usen imake deber&iacute;an funcionar tal cual, ya que
los fragmentos imake est&aacute;n configurados para usar DESTDIR.
d292 1
a292 1
deber&iacute;an necesitar ning&uacute;n cambio.
d296 1
a296 1
Otra t&eacute;cnica &uacute;til es un truco de `ligado tard&iacute;o':
d307 3
a309 3
Cuando el porte se compile, y puesto que DESTDIR est&aacute;
configurado a nada, se usar&aacute; /usr/local y la falsa
instalaci&oacute;n pondr&aacute; todo en WRKINST/usr/local (v.g., para
d318 2
a319 2
    mayor&iacute;a de portes van bien con DESTDIR activado, excepto uno
    &oacute; dos.
d322 4
a325 4
<li>Lleve cuidado al distinguir entre la ubicaci&oacute;n real en donde
    est&aacute; instalado el porte, y la ubicaci&oacute;n grabada en los
    ficheros de configuraci&oacute;n del paquete.
    Es muy f&aacute;cil saltarse esto, pero tambi&eacute;n es f&aacute;cil
d328 8
a335 8
<li>Siempre hay que retocar los enlaces simb&oacute;licos absolutos.
    Por suerte, <code>bsd.port.mk</code> se dar&aacute; cuenta de los
    problemas en ese &aacute;rea.</li>

<li>Unos pocos portes no quieren dejar $(DESTDIR) s&oacute;lo durante
    la configuraci&oacute;n.
    Se necesita un fragmento de postconfiguraci&oacute;n que retoque
    todos los ficheros Makefile para a&ntilde;adir DESTDIR.</li>
d339 1
a339 1
    Una aproximaci&oacute;n de fuerza bruta deber&iacute;a funcionar:
d341 2
a342 2
    encontrar en el &aacute;rea WRKINST, y entonces lleve a cabo la
    instalaci&oacute;n bajo chroot.</li>
d345 45
a389 1
<h3>&laquo;Sabores&raquo;</h3>
d393 1
a393 1
la construcci&oacute;n de paquetes pueda ser consistente.
d396 1
a396 1
zoinx), y entonces usar FLAVOR para verificar qu&eacute; opciones han
d408 3
a410 3
<li>Las construcciones de la forma %%flavor%% activar&aacute;n la
    inclusi&oacute;n de PFRAG.flavor.  La construcci&oacute;n
    %%SHARED%% activa la inclusi&oacute;n de PFRAG.shared.</li>
d412 1
a412 1
<li>bsd.port.subdir.mk entiende la extensi&oacute;n
d425 7
d435 4
a438 2
Originally [OpenBSD: diffs.html,v 1.12 2002/09/23 06:01:58 pvalchev Exp ]<br>
$Translation: diffs.html,v 1.9 2002/09/25 06:40:58 horacio Exp $<br>
@


1.7
log
@
sync with badlands translation CVS.
@
text
@d5 1
a5 2
<meta http-equiv="Content-Type" content=
"text/html; charset=iso-8859-1">
a31 11
Puede comprobar si una versi&oacute;n espec&iacute;fica de
<code>bsd.port.mk</code> se encuentra disponible configurando
NEED_VERSION.
</p>

<p>
Ponga siempre la l&iacute;nea de NEED_VERSION justo debajo de
CATEGORIES para simplificar el procesamiento automatizado.
</p>

<p>
d366 2
a367 2
Originally [OpenBSD: diffs.html,v 1.11 2001/09/10 19:26:33 jufi Exp ]<br>
$Translation: diffs.html,v 1.8 2001/09/20 08:58:57 horacio Exp $<br>
@


1.6
log
@
Updated by Horacio
@
text
@d11 2
a12 2
<meta name="copyright" content= "Este documento es copyright 2000 de OpenBSD.">
<title>Diferencias con Otros Sistemas de Portes BSD</title>
a371 9
.if ${FLAVOR:L}=&quot;zoinx foo&quot;
</pre>

<p>
Comprobar que un sabor contiene una opci&oacute;n dada se hace de una
forma algo diferente:
</p>

<pre>
d378 2
a379 2
Originally [OpenBSD: diffs.html,v 1.9 2001/06/09 16:39:06 pvalchev Exp ]<br>
$Translation: diffs.html,v 1.7 2001/06/10 00:52:05 horacio Exp $<br>
@


1.5
log
@
Update by Horacio.
@
text
@d8 1
a8 1
<meta name="description" content="Diferencia con los sistemas de portes de otros BSD">
d44 1
a44 1
En OpenBSD 'make' tiene soporte para <code>${VAR:U}</code> y 
d60 1
a60 1
Existe una tendencia a asegurarse de que todas las variables
d69 2
a70 2
adaptado y se han arreglado problemas.
En particular, est&aacute; preparado para it paralelo a 'make'.
d74 1
a74 1
(&quot;script&quot;) manualmente desde el fichero Makefile.
d81 1
a81 1
Note que, si invoca 'make' como <code>make VAR=value</code>, la
d84 2
a85 2
Por ello, muchos parche para Makefile no son necesarios, es mucho mejor
configurar correctamente MAKE_FLAGS para disminuir la carga del
d94 1
a94 1
OpenBSD los procesa de un modo uniforme y, por definici&oacute;n, lo
d107 1
a107 1
Es posible que algunas arquitecturas necesiten distfiles
d109 5
a113 5
ha sido preciso replicar (&quot;mirror&quot;) distfiles.  OpenBSD
dispone de soporte para un tercer grupo de ficheros: SUPDISTFILES.
&Eacute;stos ser&aacute;n considerados s&oacute;lo para generar sumas
de comprobaci&oacute;n y r&eacute;plicas.  N&oacute;tese que es posible
que SUPDISTFILES tenga una coincidencia parcial con DISTFILES o
d171 1
a171 1
&quot;cookies&quot;.</dd>
d206 1
a206 1
<h3>Falsificar portes</h3>
d266 2
a267 1
de instalaci&oacute;n usuales, excepto unas pocas diferencias:
d331 1
a331 1
<li>Raras veces, un porte se resistir&aacute; a todos lo intentos
d358 1
a358 1
<li>Las construcciones de la forma %%flavor%% activar&acute;n la
d387 2
a388 2
Originally [OpenBSD: diffs.html,v 1.8 2001/05/18 02:25:29 brad Exp ]<br>
$Translation: diffs.html,v 1.6 2001/05/21 15:10:30 horacio Exp $<br>
@


1.4
log
@
Sync with translation CVS, work by Horacio
@
text
@d375 2
a376 2
Comprobar que un sabor contiene una opci&oacute;n dada no es mucho
m&aacute;s complicado:
d386 2
a387 2
Originally [OpenBSD: diffs.html,v 1.7 2001/03/28 14:57:16 espie Exp ]<br>
$Translation: diffs.html,v 1.5 2001/04/06 15:56:53 horacio Exp $<br>
@


1.3
log
@
And the next one.
Sync with Badlands Translation CVS. Work by es Horacio
@
text
@d4 1
a4 1
<meta name="generator" content="HTML Tidy, see www.w3.org">
d7 3
a9 4
<meta name="resource-type" content="document">
<meta name="description" content=
"Differences with other BSD porting systems.">
<meta name="keywords" content="openbsd,ports">
d11 1
a11 2
<meta name="copyright" content=
"This document copyright 2000 by OpenBSD.">
d18 1
a18 1
<h1>Informaci&oacute;n de los Portes de OpenBSD</h1>
d24 4
a27 3
NetBSD usa el t&eacute;rmino <em>ports</em> (portes) para temas
dependientes de la arquitectura.
Su estructura de portes se llama <em>packages</em> (paquetes).
d90 1
a90 1
<h3>Obtener los fuentes</h3>
d362 1
a362 1
    SUBDIR=directory:opt1,opt2 para decir &laquo;compila el porte en
d386 2
a387 2
Originally [OpenBSD: diffs.html,v 1.6 2000/08/17 04:10:27 brad Exp ]<br>
$Translation: diffs.html,v 1.4 2000/09/25 20:03:18 horacio Exp $<br>
@


1.2
log
@
Updating.Work by Horacio as well.
@
text
@a265 5
Para activar el marco de trabajo, s&oacute;lo necesita configurar
FAKE=Yes en el fichero Makefile del porte.
</p>

<p>
d285 1
a285 1
De forma parecida, los portes recientes de gnu-configure no
d304 2
a305 2
gnu configure use
CONFIGURE_ARGS=--prefix='$$(DESTDIR)$(PREFIX)').
d358 3
a360 5
<li>Si la lista de empaquetado se denomina PLIST.sed, las
    construcciones de la forma %%flavor%% diparar&aacute;n la
    inclusi&oacute;n de PFRAG.flavor.
    La construcci&oacute;n %%SHARED%% dispara la inclusi&oacute;n de
    PFRAG.shared.</li>
d363 2
a364 2
SUBDIR=directory:opt1,opt2 para decir &laquo;compila el porte en
directorio con FLAVOR=opt1 opt2&raquo;.</li>
d387 2
a388 2
Originally [OpenBSD: diffs.html,v 1.5 2000/06/18 23:52:06 naddy Exp ]<br>
$Translation: diffs.html,v 1.3 2000/06/21 20:39:01 horacio Exp $<br>
@


1.1
log
@Sync with Badlands Translation CVS. Work by Horacio
@
text
@d22 2
a23 1
<h2><font color="#e00000">Diferencias importantes con otros BSD</font></h2>
d25 1
d29 1
d33 1
d37 1
d39 1
a39 2
<br><br>

d42 1
d44 1
a44 2
<br><br>

d50 1
a51 1
<ul>
d53 5
a57 5
.if ${NEED_XXX:L} == &quot;yes&quot;
do stuff if yes
.else
do other stuff
.endif
d59 2
a60 4
</ul>

<br><br>

d64 3
a66 4
<code>defined(GNU_CONFIGURE)</code> y usar <code>${GNU_CONFIGURE:L} !=
&quot;no&quot;</code> en su lugar.

<br><br>
d68 1
d76 1
d81 1
d88 1
d93 1
d98 1
d100 1
a100 2
<br><br>

d105 1
d107 1
a107 2
<br><br>

d109 3
a111 5
espec&iacute;ficos.
En el pasado, esto ha causado problemas en donde ha sido preciso
replicar (&quot;mirror&quot;) distfiles.
OpenBSD dispone de soporte para un tercer grupo de ficheros:
SUPDISTFILES.
d113 4
a116 4
de comprobaci&oacute;n y r&eacute;plicas.
N&oacute;tese que es posible que SUPDISTFILES tenga una coincidencia
parcial con DISTFILES o PATCHFILES.
Por ejemplo:
d119 7
a125 7
DISTFILES=foo-1.0.tgz
.if ${ARCH} == &quot;i386&quot;
DISTFILES+=foo-i386.tgz
.elif ${ARCHI} == &quot;sparc&quot;
DISTFILES+=foo-sparc.tgz
.endif
SUPDISTFILES=foo-i386.tgz foo-sparc.tgz
d131 1
d140 1
d142 1
a142 2
<br><br>

d150 1
d152 1
a152 2
<br><br>

d158 1
d164 1
d166 1
d171 2
a172 2
<dd><code>Directorio de trabajo del porte, en donde pone sus propios
&quot;cookies&quot;</code>.</dd>
d176 4
a179 5
<dd><code>Subdirectorio de WRKDIR, en donde el porte se
desempaqueta.
Tambi&eacute;n es el directorio base para parches.
Otros BSD no tienen en la actualidad la distinci&oacute;n
WRKDIST/WRKSRC, y s&oacute;lo tienen WRKSRC</code>.</dd>
d183 2
a184 2
<dd><code>Subdirectorio de WRKDIST, en donde est&aacute;n ubicados
los fuentes</code>.</dd>
d188 6
a193 7
<dd><code>Subdirectorio de WRKDIR, en donde tendr&aacute; lugar la
configuraci&oacute;n y compilaci&oacute;n del porte.
Otros BSD no tienen la distinci&oacute;n WRKBUILD/WRKSRC.
Los programas que se basen en autoconf (la mayor&iacute;a) pueden
generalmente configurar SEPARATE_BUILD para dejar que la
compilaci&oacute;n del porte sea en un WRKBUILD diferente a
WRKSRC</code>.</dd>
d197 1
a197 1
<dd><code>Directorio en donde se instalar&aacute; el porte antes de ser
d199 1
a199 1
m&aacute;s abajo)</code>.</dd>
d202 1
d205 1
a205 1
</pre>
d207 1
a207 1
<h3><code>Falsificar portes</code></h3>
d209 1
a209 1
<h4><code>Introducci&oacute;n</code></h4>
d211 3
a213 2
<code>Despu&eacute;s de que una compilaci&oacute;n se ha completado,
otros BSD proceden con la instalaci&oacute;n del porte y a
d216 4
a219 3
En lugar de eso, OpenBSD usa una instalaci&oacute;n falsa.
Usando FAKE, el &aacute;rbol de portes no se convierte del todo, pero
se va aproximando.</code>
d241 7
a247 7
    mayor&iacute;a de portes no tienen que ser instalados, lo que elimina
    un gran n&uacute;mero de compromisos potenciales y desagrado general
    debido a portes mal instalados.
    Tambi&eacute;n permite construir varios paquetes con conflictos
    entre s&iacute; en la misma m&aacute;quina.
    Finalmente, permite construir un nuevo grupo de paquetes no
    probados sin tener que hacer una instalaci&oacute;n correcta.
d252 4
a255 5
    sea instalado el porte.
    Adem&aacute;s, si un porte instala demasiados ficheros, ya no es
    necesario retocar la instalaci&oacute;n del porte:  es suficiente
    con no grabar los ficheros extra&ntilde;os en la lista de
    empaquetado.</li>
d257 2
a258 2
<li>Para el usuario final, mejora la calidad de los paquetes;  ya que el
    porte final se instala usando pkg_add, el usuario final obtiene
d268 1
d270 1
a270 2
<br><br>

d273 1
d287 1
d292 1
d294 1
a294 2
<br><br>

d298 1
d304 1
d310 2
a311 3
<code>CONFIGURE_ARGS=--prefix='$$(DESTDIR)$(PREFIX)'</code>).

<br><br>
d346 1
d353 2
a354 1
<code>bsd.port.mk</code> provee algo de soporte:
d374 1
d376 1
d382 1
a382 2
<br>

d385 1
d391 1
a391 1
<br><hr><br>
d394 2
a395 2
Originally [OpenBSD: diffs.html,v 1.4 2000/04/14 02:29:41 wvdputte Exp ]<br>
$Translation: diffs.html,v 1.2 2000/04/21 00:54:42 horacio Exp $<br>
a400 1

@

