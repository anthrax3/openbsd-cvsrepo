head	1.57;
access;
symbols;
locks; strict;
comment	@# @;


1.57
date	2014.04.01.16.33.20;	author deraadt;	state dead;
branches;
next	1.56;

1.56
date	2013.12.12.19.32.51;	author ajacoutot;	state Exp;
branches;
next	1.55;

1.55
date	2012.04.25.12.13.16;	author ajacoutot;	state Exp;
branches;
next	1.54;

1.54
date	2012.04.19.23.56.50;	author ajacoutot;	state Exp;
branches;
next	1.53;

1.53
date	2012.04.16.00.11.29;	author ajacoutot;	state Exp;
branches;
next	1.52;

1.52
date	2012.01.31.23.04.07;	author ajacoutot;	state Exp;
branches;
next	1.51;

1.51
date	2011.11.27.14.41.28;	author ajacoutot;	state Exp;
branches;
next	1.50;

1.50
date	2009.02.22.20.35.20;	author tobias;	state Exp;
branches;
next	1.49;

1.49
date	2008.03.09.13.37.11;	author tobias;	state Exp;
branches;
next	1.48;

1.48
date	2008.01.06.13.57.18;	author tobias;	state Exp;
branches;
next	1.47;

1.47
date	2007.12.16.17.18.35;	author tobias;	state Exp;
branches;
next	1.46;

1.46
date	2007.11.12.20.26.06;	author saad;	state Exp;
branches;
next	1.45;

1.45
date	2007.06.20.09.29.46;	author jufi;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.05.06.32.12;	author jufi;	state Exp;
branches;
next	1.43;

1.43
date	2007.04.26.03.08.00;	author jufi;	state Exp;
branches;
next	1.42;

1.42
date	2007.02.10.05.22.16;	author saad;	state Exp;
branches;
next	1.41;

1.41
date	2006.11.10.10.44.44;	author jufi;	state Exp;
branches;
next	1.40;

1.40
date	2006.05.12.06.32.28;	author jufi;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.03.14.48.28;	author saad;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.02.17.09.32;	author jufi;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.25.08.25.47;	author saad;	state Exp;
branches;
next	1.36;

1.36
date	2005.12.10.12.51.38;	author jufi;	state Exp;
branches;
next	1.35;

1.35
date	2005.10.02.20.39.54;	author saad;	state Exp;
branches;
next	1.34;

1.34
date	2005.09.11.06.04.11;	author saad;	state Exp;
branches;
next	1.33;

1.33
date	2005.08.13.07.55.54;	author saad;	state Exp;
branches;
next	1.32;

1.32
date	2005.07.11.17.26.45;	author saad;	state Exp;
branches;
next	1.31;

1.31
date	2005.02.06.16.00.44;	author jufi;	state Exp;
branches;
next	1.30;

1.30
date	2005.02.04.20.39.01;	author jufi;	state Exp;
branches;
next	1.29;

1.29
date	2005.01.18.17.16.48;	author jufi;	state Exp;
branches;
next	1.28;

1.28
date	2005.01.03.19.49.30;	author jufi;	state Exp;
branches;
next	1.27;

1.27
date	2004.11.28.16.13.16;	author jufi;	state Exp;
branches;
next	1.26;

1.26
date	2004.11.04.15.48.53;	author jufi;	state Exp;
branches;
next	1.25;

1.25
date	2004.09.23.14.18.58;	author jufi;	state Exp;
branches;
next	1.24;

1.24
date	2004.08.23.07.12.57;	author jufi;	state Exp;
branches;
next	1.23;

1.23
date	2004.08.04.17.08.33;	author jufi;	state Exp;
branches;
next	1.22;

1.22
date	2004.02.21.08.47.13;	author jufi;	state Exp;
branches;
next	1.21;

1.21
date	2003.07.13.14.01.53;	author jufi;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.15.17.43.35;	author jufi;	state Exp;
branches;
next	1.19;

1.19
date	2003.01.13.22.56.05;	author jufi;	state Exp;
branches;
next	1.18;

1.18
date	2003.01.13.17.57.59;	author jufi;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.14.13.35.29;	author jufi;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.19.22.23.46;	author jufi;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.14.20.12.51;	author jufi;	state Exp;
branches;
next	1.14;

1.14
date	2002.02.22.23.35.28;	author jufi;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.13.15.22.30;	author jufi;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.19.19.47.59;	author jufi;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.17.20.24.31;	author jufi;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.16.08.00.15;	author jufi;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.10.20.02.07;	author jufi;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.29.06.31.36;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.30.19.36.55;	author jufi;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.13.20.35.11;	author jufi;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.12.18.47.02;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.25.09;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.02.39;	author jufi;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.10.20.01.05;	author jufi;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.08.20.32.59;	author jufi;	state Exp;
branches;
next	;


desc
@@


1.57
log
@abandon translations; ajacoutot and team are done
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
 <head>
  <meta http-equiv="Content-Type"
        content="text/html; charset=iso-8859-1">
  <meta http-equiv="refresh"
        content="8; url=../faq/ports">
  <script type="text/javascript">
  <!--
        window.location.href="../faq/ports"
  -->
  </script>
  <title>OpenBSD Porter's Handbook</title>
  <link rev="made" HREF="mailto:www@@openbsd.org">
 </head>
 <body text="#000000" bgcolor="#FFFFFF" link="#23238E">
<a href="index.html"><img alt="[OpenBSD]" height="30" width="141" src="../images/smalltitle.gif" border="0"></a>

  <p>
   If you are not redirected automatically, follow the link
   to <a href='../faq/ports'>http://www.openbsd.org/faq/ports</a>

  <hr>
  <a href="index.html"><img height=24 width=24 src=../back.gif border=0 alt=OpenBSD></a> 
  <a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br><small>
<!--
Originally [OpenBSD: porting.html,v 1.60 ]<br>
$Translation: porting.html,v 1.59 2013/12/12 19:16:55 steffen Exp $<br>
-->
$OpenBSD: porting.html,v 1.56 2013/12/12 19:32:51 ajacoutot Exp $
</small>
</body>
</html>
@


1.56
log
@Sync with Steelix CVS
@
text
@d32 1
a32 1
$OpenBSD$
@


1.55
log
@Sync with Steelix CVS
@
text
@d1 2
a2 1
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
d7 11
a17 14
  <meta name="resource-type"
        content="document">
  <meta name="description"
        CONTENT="How to make an OpenBSD port">
  <meta name="keywords"
        content="openbsd,ports">
  <meta name="distribution"
        content="global">
  <meta name="copyright"
	content="This document copyright 1997-2009 by OpenBSD.">
<title>Das Erzeugen einer OpenBSD-Portierung</title>
<link rev="made" HREF="mailto:www@@openbsd.org">
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#23238E">
a19 47
  <h2><font color="#e00000">Das Erzeugen eines OpenBSD-Portierung</font></h2>

   Du hast also gerade dein Lieblingssoftwarepaket auf deiner
   OpenBSD-Maschine kompiliert und möchtest deinen Erfolg mit anderen
   teilen, indem du davon eine Standard-Portierung machst? Was also ist
   jetzt zu tun?
  <p>
   Die wichtigste Sache, die du machen solltest, ist mit anderen zu
   <strong>kommunizieren</strong>. Frage die anderen Leute auf
   <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>, ob sie an
   derselben Portierung arbeiten. <em>Teile es dem ursprünglichen Programmierer
   mit</em>, inklusive der Probleme, wenn du welche findest. Wenn die
   Lizenzbedingungen nicht korrekt sind, sag es ihm. Wenn du große
   Schwierigkeiten hattest, die Portierung zum Laufen zu kriegen, teile ihm
   mit, was verbessert werden könnte. Wenn sie nur auf Linux entwickeln
   und den Rest der Unix-Welt ignorieren, versuche, ihre Sichtweise
   etwas zu erweitern.
  <p>
   <strong>KOMMUNIKATION</strong> macht den Unterschied zwischen einer
   erfolgreichen Portierung und einer Portierung, die langsam von allen alleine
   gelassen und nicht mehr benutzt wird, aus.
  <p>
   Sieh dir zuerst die Portierungsinformationen auf dieser Seite an.
   Dann überprüfe all die gelinkten Dokumente, insbesondere die
   OpenBSD-Porting-<a href="../porting/checklist.html">Checkliste</a>.
  <p>
   <a href="../porting/porttest.html">Teste</a>, teste nochmal und
   schlussendlich teste nochmals!
  <p>
   OpenBSD unterstützt Updates nun vollständig. Dies bedeutet, dass
   <a href="../porting/de/update.html">ein paar Sonderfälle</a>
   berücksichtigt werden müssen.
  <p>
   Liefere die Portierung aus (submit). Erzeuge einen ,gzipped tarball' des
   Verzeichnisses der Portierung. Du kannst diesen entweder auf einen
   öffentlichen FTP- oder HTTP-Server legen und die Adresse an
   <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> mailen
   oder ,mime encoded' an die selbe Adresse schicken. Wähle
   einfach eine Methode aus.
  <p>
   Neue Software zu portieren nimmt Zeit in Anspruch. Schwerer ist es
   allerdings, diese danach weiterhin zu verwalten. Es ist schon in
   Ordnung, wenn du Software portierst und die Verwaltung Anderen
   überlässt. Es ist ebenfalls in Ordnung, wenn du Anderen bei der
   Aktualisierung und Verwaltung anderer Portierungen hilfst, so lange du
   mit ihnen in Verbindung bleibst, damit nicht die gleiche Arbeit
   mehrmals gemacht wird.
d21 2
a22 352
   In der OpenBSD-Kultur zählt »<code>MAINTAINER</code>ship« (auf
   Deutsch Betreuung) nicht als Statussymbol sondern als Verantwortung.
   Wir verwenden CVS und die Kommentare werden verwendet, um die Person
   zu vermerken, die die Arbeit gemacht hat. Ein
   Portierungs-<code>MAINTAINER</code> ist jemand anderes: eine Person,
   die sich der Funktionalität der Portierungs verpflichtet fühlt und bereit
   ist, Zeit zu investieren, um diese so gut es geht bereitzustellen.

<h3><font color="#0000e0">Index der Portierungsdokumentation</font></h3>
<ul>
<li><a href="#Avail">Verfügbare Portierungsinformation</a></li>
<li><a href="#Policy">OpenBSD-Portierungsrichtlinie</a></li>
<li><a href="#Security">Sicherheitsemfpehlungen</a></li>
<li><a href="#Generic">Allgemeine Portierungshinweise</a></li>
<li><a href="#Other">Andere hilfreiche Hinweise</a></li>
</ul>

  <h3><font color="#0000e0"><a name="Avail">Verfügbare Portierungsinformation</a></font></h3>
  <ul>
   <li>OpenBSD-Portierungs-<a href="../porting/checklist.html">Checkliste</a>.
   <li>OpenBSDs <a href="../porting/de/update.html">Updaterichtlinien</a>
       für Portierungen.
   <li>Die Handbuchseite
   <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>.
       Sie dokumentiert das Makefile der Portierungs-Infrastruktur, das am
       Ende jeder individuellen Portierungs-Makefile eingeschlossen wird.
       Es gibt am Anfang noch ein paar Kommentare innerhalb der Datei
       selbst, aber die meisten der sinnvollen Informationen sind jetzt
       dokumentiert.
   <li>Einige Unterschiede zu den anderen BSD-Portierungssystemen,
   hauptsächlich eine Zusammenfassung
   der <a href="../porting/de/diffs.html">Infrastruktur-Unterschiede</a>.
   <li><a href="../porting/de/libraries.html">Das Benutzen von Shared
   Librarys in OpenBSD-Portierungen</a>. Die Regeln sind <strong>sehr wichtig
   </strong> sobald du Shared Librarys benutzt.
   <li><a href="../porting/de/autoconf.html">GNU-autoconf-Spezifikationen</a>,
       wie man sie im Gebrauch mit OpenBSD-Portierungen handhabt.
   <li><a href="../porting/de/config.html">Konfigurationsdateien</a>,
       ein häufiger Stolperstein für neue Entwickler und die
       einzigartigen Werkzeuge, die der OpenBSD-Portierungsbaum besitzt, um
       diese zu verarbeiten.
   <li><a href="../porting/audio-port.html">Das Portieren von
       Audio-Applikationen auf OpenBSD</a>.
   <li>Die
       <a href="http://www.netbsd.org/Documentation/software/packages.html">
       NetBSD Paketsystem</a>-Dokumentation. Dieses Dokument
       beschreibt die NetBSD-Version des FreeBSD-Portierungssystems und ist
       recht hilfreich.
   <li>Das
       <a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/index.html">FreeBSD
       Porter's Handbook</a>.  Das ist die FreeBSD-Portierungs-Bibel.
   <li>Die OpenBSD-Portierungs-Mailingliste
       <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>.
  </ul>
  <h3><font color="#0000e0"><a name="Policy">OpenBSD-Portierungsrichtlinie</a></font></h3>
  <ul>
   <li>OpenBSD benutzt NICHT <code>/usr/local/etc/rc.d</code>.<br>
       <code>/usr/local</code> wird dank NFS oftmals von verschiedenen
         Maschinen benutzt.  Aus diesem Grund können
         Konfigurationsdateien, die spezifisch für eine bestimmte
         Maschine sind, auch nicht in <code>/usr/local</code> abgelegt
         werden, <code>/etc</code> ist die zentrale Lagerstätte für
         individuelle Maschinen-Konfigurationsdateien.
         Außerdem ist es eine OpenBSD-Richtlinie, niemals Dateien unter
         <code>/etc</code> automatisch upzudaten. Portierungen, die ein
         bestimmtes Systemstart-Setup benötigen, sollten den Administrator
         anweisen, was zu tun ist, anstatt blind Dateien zu
         installieren.
   <li>OpenBSD komprimiert KEINE Handbuchseiten.
   <li>OpenBSD benötigt KEIN <code>-lcrypt</code>.<br>
       DES ist Teil der Standard-<code>libc</code>.
   <li>OpenBSD hat einen separaten Namensraum für User und Gruppen,
       die von Portierungen erzeugt werden.
       Siehe <code>/usr/ports/infrastructure/db/user.list</code> für
       genaue Details.
   <li>OpenBSD is stark sicherheitsorientiert. Du solltest die
       <a href="#Security">Sicherheitssektion</a> auf dieser Seite
       lesen und verstehen.
   <li>Stelle sicher, dass der <code>&#36;OpenBSD&#36;</code>-CVS-Tag
       in das Makefile eingefügt wird. Wenn du eine Portierung von einem
       anderen System importierst, stelle sicher, dass du auch ihren
       Tag in dem Makefile belässt.
   <li>Das Ziel ist, dass alle portierten Anwendungen OpenBSD
       unterstützen. Um dieses Ziel zu erreichen,
       <strong>musst</strong> du alle OpenBSD-Korrekturroutinen auch zurück an
       den ursprünglichen Programmierer zurückliefern.
  </ul>
  <h3><font color="#0000e0"><a name="Security">Sicherheitsempfehlungen</a></font></h3>
  Es gibt viele Sicherheitsprobleme, über die man sich Gedanken machen
       muss. Wenn du nicht absolut sicher bist, was du tust, frage
       bitte auf der
       <a href="mailto:ports@@openbsd.org">Portierungs</a>-Mailingliste um
       Hilfe.

  <ul>
   <li>Benutze <em>keinen</em> Alpha- oder Beta-Code, wenn du eine
       Portierung vorbereitest.
       Benutze die letzte reguläre Version oder die zuletzt korrigierte.

   <li>Jegliche Software, die auf einem Server installiert werden soll,
       sollte auf Pufferüberläufe (buffer overflows) untersucht werden,
       insbesondere unsichere Benutzung von
       <code>strcat/strcpy/strcmp/sprintf</code>. Im Allgemeinen sollte
       <code>sprintf</code> durch <code>snprintf</code> ersetzt werden.

   <li>Benutze niemals Dateinamen statt echter Sicherheit. Es gibt
       zahlreiche Wettlaufsituationen, in denen du keine saubere
       Kontrolle mehr hast. Ein Angreifer, der bereits normale
       Benutzerrechte auf deiner Maschine hat, könnte Dateien in
       <code>/tmp</code> mit symbolischen Links auf strategischere
       Dateien setzen, wie etwa <code>/etc/master.passwd</code>.

   <li>Zum Beispiel erzeugen sowohl <code>fopen</code> als auch
       <code>freopen</code>
       <strong>eine neue Datei oder öffnen eine bereits
       existierende</strong> zum Schreiben. Ein Angreifer könnte einen
       symbolischen Link von <code>/etc/master.passwd</code> auf
       <code>/tmp/addrpool_dump</code> setzen. Sofort wenn du ihn
       öffnest ist deine Passwortdatei verraten. Ja, sogar mit einem
       <code>unlink</code> direkt davor. Du kannst nur die Anzahl der
       Möglichkeiten verringern.  Benutze stattdessen
       <code>open</code> mit <code>O_CREAT|O_EXCL</code> und
       <code>fdopen</code>.

   <li>Ein weiteres sehr bekanntes Problem ist die
       <code>mktemp</code>-Funktion. Beachte die Warnungen des
       ,bsd linker's bei ihrer Benutzung.
       <strong>Die müssen gefixt werden</strong>. Das ist nicht ganz
       so einfach wie <code>s/mktemp/mkstemp/g</code>.  <br>
       Sieh dir
       <a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=3&amp;query=mktemp"
       ><code>mktemp(3)</code></a> genauer an, um weitere Informationen
       zu erhalten.
       Korrekter Code, der <code>mkstemp</code> benutzt, schließt den
       Source zu <code>ed</code> oder <code>mail</code> ein.
       Eine seltenes Beispiel an Code, der <code>mktemp</code> korrekt
       benutzt, kann in der <code>rsync</code>-Portierung gefunden werden.

   <li>Nur weil du etwas lesen kannst heißt es nicht, dass du das
       solltest. Eine sehr bekannte Lücke dieser Art war das
       <code>startx</code>-Problem. Als setuid-Programm konntest du
       startx mit jeder Datei als Skript starten. Wenn die Datei kein
       sauberes Shellskript war, folgte eine Fehlermeldung zusammen mit
       der ersten Zeile der betreffenden Datei, ohne weitere Überprüfung
       der Rechte. Ziemlich einfach die erste Zeile der
       shadow-passwd-Datei zu erhalten, besonders wenn man bedenkt, dass
       die erste Zeile meist den root-Eintrag enthält.
       Öffne nicht deine Datei, um dann ein <code>fstat</code> auf den
       ,open descriptor' zu machen, um zu überprüfen, ob du sie hättest
       öffnen können müssen (oder der Angreifer wird mit /dev/rst0
       spielen und dein Band zurückspulen) - öffne es mit korrekt
       gesetzter uid/gid/grouplist.

   <li>Tue nichts, was eine Shell im Hintergrund von setuid-Programmen
       forkt bevor du deine Rechte zurücksetzt. Das schließt
       <code>popen</code> und
       <code>system</code> ein.
       Benutze stattdessen <code>fork</code>, <code>pipe</code> und
       <code>execve</code>.

   <li>
       Gebe ,open descriptors' anstatt von Dateiname an andere Programme
       weiter, um Wettlaufsituationen zu vermeiden. Sogar wenn ein
       Programm keine 'file descriptors' akzeptiert, kannst du immer noch
       <code>/dev/fd/0</code> benutzen.

   <li>Zugriffsrechte sind an ,file descriptors' gebunden. Wenn du
       setuid-Rechte setzen musst, um eine Datei zu öffnen, öffne die
       Datei, dann lass deine Rechte fallen. Du kannst nach wie vor auf
       den ,open descriptor' zugreifen, aber du musst dir um ihn weniger
       Sorgen machen. Das hat aber zwei Seiten: auch nachdem du die
       Rechte fallen lassen hast, solltest du noch auf die ,descriptors'
       aufpassen.

   <li>Vermeide root-setuid wo du nur kannst. Grundsätzlich kann root
       alles tun, aber root-Rechte werden nur sehr selten wirklich
       benötigt, vielleicht mit Ausnahme vom Erzeugen von Sockets mit
       einer Nummer kleiner 1024. Es ist beutend besser, das
       <code>inetd</code> zu überlassen und nur die relevanten Einträge
       in <code>inetd.conf</code> zu machen. Du musst selbstverständlich
       die erforderliche Magie zum Schreiben von Daemons kennen, um das
       zu erreichen. Man könnte sagen, dass du keinerlei Chancen hast,
       ein gutes setuid-Programm zu schreiben, wenn du nicht weißt, wie
       man das macht.

   <li>Benutze setgid anstelle von setuid. Abgesehen von diesen
       bestimmten Dateien, die von setgid-Programmen benötigt werden,
       sind die meisten Dateien nicht ,group-writable'. Daher werden
       Sicherheitsprobleme in einem setgid-Programm dein System nicht
       bedrohen: nur mit Gruppenrechten wird das schlimmste, was ein
       Angreifer anrichten kann, das Hacken einer Score-Tabelle in einem
       Spiel oder etwas ähnliches sein. Siehe auch die
       <code>xkobo</code>-Portierung für ein Beispiel einer solchen Änderung.

   <li>Vertraue keinen ,group-writable' Dateien.  Auch wenn sie geprüft
       wurden, werden setgid immer noch als wichtige potenzielle
       Sicherheitslöcher betrachtet. Von daher sollten Informationen,
       die hiervon berührt werden nicht als sensitive Information
       betrachtet werden.

   <li>Vertraue nicht deiner Umgebung! Das schließt einfache Dinge wie
       etwa deinen <code>PATH</code> ein (benutze niemals
       <code>system</code> mit einem unqualifizierten Namen, vermeide
       <code>execvp</code>), es betrifft aber auch solche feinen Dinge
       wie locale, timezone, termcap, und so weiter. Sei vorsichtig mit
       ,transitivity': Auch wenn du alle Vorsichtsmaßregeln triffst,
       machen das Programme, die du aufrufst, noch lange nicht.
       Benutze <strong>niemals</strong> <code>system</code> in
       privilegierten Programmen, baue eine saubere Kommandozeile,
       eine kontrollierte Umgebung und rufe <code>execve</code> direkt
       auf. Die <code>perlsec</code>-Handbuchseite ist ein gutes Tutorium
       über solche Probleme.

   <li>Benutze niemals setuid-Shellskripte. Sie sind vererbliche
       Sicherheitslücken. Schließe sie in C-Code ein, der eine saubere
       Umgebung sicherstellt. Auf der anderen Seite gibt es unter
       OpenBSD auch die sicheren Perl-Skripte.

   <li>Nimm dich vor dem ,dynamic loader' in Acht. Wenn du ihn mit
       setuid laufen lässt, wird er nur vertrauenswürdigen Bibliotheken
       trauen, die mit ldconfig gescannt wurden. Setgid ist nicht genug.

   <li>Dynamische Bibliotheken sind schwierig. C++-Code stellt ein
       ähnliches Problem dar. Grundsätzlich könnten Bibliotheken einige
       Dinge basierend auf deiner Umgebung tun, sogar bevor dein
       Hauptprogramm dazu kommt, seinen setuid-Status zu checken.
       OpenBSD-<code>issetugid</code> kümmert sich um dieses Problem
       vom Standpunkt eines-Bibliotheks-Autors aus. Versuche nicht
       Bibliotheken zu portieren, bis du diesen Punkt wirklich
       absolut verstanden hast.
  </ul>
  <h3><font color="#0000e0"><a name="Generic">Allgemeine Portierungshinweise</a></font></h3>
  <ul>
   <li><code>__OpenBSD__</code> sollte sparsam benutzt werden, wenn
       überhaupt. Konstruktionen, die wie
       <pre>
            #if defined(__NetBSD__) || defined(__FreeBSD__)
       </pre>
       aussehen, sind oft unpassend. Füge nicht blindlings
       <code>__OpenBSD__</code> hinzu. Versuche stattdessen
       herauszufinden, was vor sich geht und welche Funktionalität
       tatsächlich gebraucht wird. Handbuchseiten sind oftmals hilfreich,
       da sie historische Kommentare enthalten und darstellen, wann eine
       spezielle Funktionalität in OpenBSD eingefügt wurde. Den
       numerischen Wert von <code>BSD</code> gegen bekannte
       Versionen/Zahlen zu prüfen ist meistens der richtige Weg. Der
       <a href="http://www.netbsd.org/Documentation/pkgsrc/">NetBSD
       pkgsrc guide</a>
       enthält noch weitere Informationen.
   <li><code>BSD</code> zu definieren ist eine schlechte Idee. Versuche
       <code>sys/param.h</code> einzubinden. Das definiert nicht nur
       <code>BSD</code>, sondern gibt auch einen sauberen Wert.
       Das richtige Codefragment sollte etwa so aussehen:
       <pre>
           #if (defined(__unix__) || defined(unix)) &amp;&amp; !defined(USG)
           #include &lt;sys/param.h&gt;
           #endif
       </pre>
   <li>Teste, ob Funktionalitäten vorhanden sind, und nicht nach
       bestimmten Betriebssystemen. Auf lange Sicht ist es besser zu
       erfahren, ob <code>tcgetattr</code> funktioniert, als zu
       erfahren, ob man gerade auf 4.3 BSD oder später oder etwa
       SystemVR4 arbeitet. Diese Art von Test trifft einfach nicht den
       Punkt. Ein sinnvoller Weg wäre zum Beispiel auf ein bestimmtes
       System zu testen, eine Runde von <code>HAVE_TCGETATTR</code> zu
       definieren und dann mit dem nächsten System weiterzumachen.
       Diese Technik trennt die Funktionalitätstests von denen auf
       spezielle Betriebssysteme. In großer Eile kann ein anderer
       Portierer das ganze Set an <code>-DHAVE_XXX</code>-Definitionen
       zum Makefile hinzufügen. Man könnte das auch selber schreiben
       oder im configure-Skript testen und es dann automatisch
       hinzufügen. Als negatives Beispiel, dem man _nicht_ folgen
       sollte, kann der nethack-3.2.2-Source dienen: er nimmt jede
       Menge Dinge basierend auf dem Systemtyp an. Die meisten dieser
       Annahmen sind veraltet und haben nichts mehr mit der Realität zu
       tun: POSIX sind nützlicher als alte
       BSD-versus-SystemV-Unterschiede, da einige traditionelle
       BSD-Funktionen jetzt nur noch durch
       Kompatibilitäts-Bibliotheken unterstützt werden.

   <li>Vermeide include-Dateien, die andere includes enthalten, die
       wiederum andere ... Erstens weil es ineffizient ist. Dein Projekt
       wird mit einer Datei enden, die alles andere ,included'. Und
       außerdem werden dabei Probleme erzeugt, die schwierig zu beheben
       sind. Es wird schwieriger an einem bestimmten Punkt
       <em>nicht</em> eine bestimmte Datei mit einzubinden.

   <li>Vermeide bizarre macro-Tricks. 'Undefining' eines Makros, das von
       einer Header-Datei definiert wurde, ist eine schlechte Idee. Das
       Definieren eines Makros, um ein spezielles Verhalten von einer
       include-Datei zu bekommen, ist auch eine schlechte Idee:
       Kompiliermodi sollten global sein. Wenn du POSIX-Verhalten willst,
       teile es mit, indem du <code>#define POSIX_C_SOURCE</code> im
       ganzen Projekt einsetzt, nicht nur wenn dir danach ist.

   <li>Schreibe niemals ,system function prototypes'.  Alle modernen
       Systeme, inklusive OpenBSD, haben einen Standardplatz für diese
       ,prototypes'. Wahrscheinliche Plätze sind etwa
       <code>unistd.h</code>, <code>fcntl.h</code> oder
       <code>termios.h</code>. Die Handbuchseite zeigt regelmäßig wo die
       ,prototypes' zu finden sind. Du könntest noch eine Runde
       <code>HAVE_XXX</code>-Makros benötigen, um die richtige Datei zu
       beschaffen. Mach dir keine Sorgen darum , dass du eine Datei
       zweimal 'includen' könntest, include Dateien haben Aufpasser, die
       solchen Unfug verhindern.<br>
       Falls irgendein kaputtes System von dir verlangt, den ,prototype'
       zu schreiben, dehne das nicht gleich auf alle anderen Systeme
       aus. ,Roll-your-own prototypes' werden nicht funktionieren, da
       sie Typen benutzen könnten, die auf deinem System funktionieren,
       aber eben nicht auf andere Systeme portierbar sind;
       (<code>unsigned long</code> anstelle von <code>size_t</code>)
       benutzen, oder einen <code>const</code>-Status falsch verstehen.
       Außerdem sind einige Compiler, so wie auch OpenBSDs gcc,
       in der Lage, bessere Arbeit mit sehr oft verwendeten Funktionen
       wie <code>strlen</code> zu leisten, wenn man die richtigen
       header-Dateien einbindet.

   <li>Untersuche das ,build log' sorgfältig auf Compiler-Warnungen.
       <ul><li>
           <code>implicit declaration of function foo()</code>
           bedeutet, dass ein Funktionsprototyp nicht vorhanden ist.
           Das bedeutet, dass der Compiler annimmt, dass der Typ
           des Rückgabewert Integer ist.
           Gibt die Funktion eigentlich einen Pointer zurück,
           wird dieser auf 64-Bit-Systemen abgeschnitten, was
           üblicherweiße zu einem Segmentation-Fault führt.
       </ul>

   <li>Benutze nicht den Namen einer Standard-Systemfunktion für
       irgendetwas anderes. Wenn du deine eigene Funktion schreiben
       willst, gib ihr einen eigenen Namen und rufe diese Funktion
       überall auf. Wenn du zur Standard-Systemfunktion zurückkehren
       willst, musst du nur deinen Code auskommentieren und den Namen
       wieder auf die Systemfunktion zurückschreiben. Mach es nicht
       andersherum. Der Code sollte etwa so aussehen:
<pre>
       /* ,prototype'-Teil */
       #ifdef USE_OWN_GCVT
       char *foo_gcvt(double number, size_t ndigit, char *buf);
       #else
       /* die richtige Datei einbinden */
       #include &lt;stdlib.h&gt;
       /* use system function */
       #define foo_gcvt  gcvt
       #endif

       /* ,definition'-Teil */
       #ifdef USE_OWN_GCVT
       char *foo_gcvt(double number, size_t ndigit, char *buf)
          {
          /* proper definition */
          }
a23 79
       /* typische Verwendung */
       s = foo_gcvt(n, 15, b);
       </pre>
  </ul>
  <h3><font color="#0000e0"><a name="Other">Andere hilfreiche Hinweise</a></font></h3>
  <ul>
   <li>Neuere Versionen von <code>bsd.port.mk</code> setzen den
       Installer-Pfad. Sie sorgen insbesondere dafür, dass
       <code>/usr/bin</code> und <code>/bin</code> <em>vor</em>
       <code>/usr/local/bin</code> und <code>/usr/X11R6/bin</code>
       durchsucht werden.
   <li>Erzeuge <em>KEINE</em> Shared Librarys wenn
       <code>${NO_SHARED_LIBS}</code> auf YES gesetzt ist (Vorsicht: es
       kann nur nach der Einbindung von <code>bsd.port.mk</code>
       definiert werden). Wenn deine Portierung ein
       GNU-configure benutzt, füge einfach die Zeile
       <code>CONFIGURE_ARGS += ${CONFIGURE_SHARED}</code> in das
       Makefile ein.
   <li>Es ist in Ordnung eine erst neulich hinzugefügte Funktionalität
       von <code>bsd.port.mk</code> zwingend zu benötigen, da die Leute
       sowieso ihren Portierungsbaum mitsamt <code>bsd.port.mk</code>
       updaten sollten. NEED_VERSION ist von nun an hinfällig.
   <li>Bevorzuge <code>update-plist</code>, um Paketlisten zu generieren
       und zu aktualisieren, anstatt diese Dinge per Hand zu erledigen.
       Du kannst die unerwünschten Zeilen auskommentieren.
       <code>update-plist</code> kann die meisten Dateitypen alleine
       erkennen und die meisten zusätzlichen ,annotations' korrekt
       kopieren.
   <li>Füge <code>USE_SYSTRACE=Yes</code> in <code>/etc/mk.conf</code>
       ein, um fehlfunktionierende Skripte, Makefiles etc. zu
       entdecken.
   <li>In OpenBSD sind <code>curses.h/libcurses/libtermlib</code> die
       ,neuen curses'.  Ändere:<br>
       <code>ncurses.h ==&gt; curses.h</code><br>
       ,old (BSD) curses' ist durch das Definieren von
       <code>_USE_OLD_CURSES_</code> verfügbar
       und zwar vor dem Einbinden von <code>curses.h</code> (für
       gewöhnlich in einem Makefile) und dem Linken mit
       <code>-locurses</code>.
   <li>In OpenBSD wurden die Terminals von den alten
       BSD-<code>sgtty</code> zur neuen
       POSIX-<code>tcgetattr</code>-Familie umgestellt. Vermeide den
       alten Stil in neuem Code. Es kann Code geben, der
       <code>tcgetattr</code> als Synonym für das ältere
       <code>sgtty</code> definiert, aber das ist auf OpenBSD höchstens
       eine kurzfristige Methode.
       Der <code>xterm</code>-Quelltext ist ein sehr gutes Beispiel,
       wie man es nicht machen sollte. Versuche deine
       Systemfunktionalität richtig hinzubekommen: Du
       willst ja einen Typen, der den Status deines Terminals behält
       (möglicher typedef), du willst eine Funktion, die den momentanen
       Status herausfindet, und eine Funktion, die den neuen Status
       setzt. Funktionen, die diesen Status modifizieren sind
       schwieriger als es den Anschein hat, da sie dazu tendieren, von
       System zu System unterschiedlich zu sein. Vergiss auch
       nicht, dass du Fälle behandeln musst, bei denen du gar nicht an
       einem  Terminal angeschlossen bist, und in denen du ,signals'
       behandeln musst: nicht nur das Beenden, sondern auch
       (<code>SIGTSTP</code>) im Hintergrund. Du solltest das Terminal
       immer in einem sauberen Zustand belassen. Mach die Tests unter
       einer alten Shell, wie etwa sh, die das Terminal nicht gleich in
       allen Fällen zurücksetzt, nachdem das Programm beendet wurde.
   <li>Die neueren termcap/terminfo und curses, wie sie Teil von
       OpenBSD sind, beinhalten Standardsequenzen für das Kontrollieren
       von Farb-Terminals. Wenn möglich benutze diese, kehre auf
       anderen Systemen auf die ANSI-Farbsequenzen zurück. Trotzdem
       sind noch nicht alle Terminalbeschreibungen auf dem neuesten
       Stand, und du musst möglicherweise in der Lage sein, diese
       Sequenzen von Hand zu bearbeiten. So macht es vim. Das ist aber
       nicht unbedingt notwendig. Mit Ausnahme von privilegierten
       Programmen ist es generell möglich, eine termcap-Definition
       durch die <code>TERMCAP</code>-Variable zu übersteuern
       und sie dadurch zu sauberem Arbeiten zu bringen.
   <li>Signal-Semantiken sind schwierig und von System zu System
       verschieden.
       Benutze <code>sigaction</code>, um spezifische Semantiken zu
       bekommen, zusammen mit anderen Systemaufrufen, die in der
       entsprechenden Handbuchseite aufgeführt werden.
  </ul>
d25 2
a26 2
<a href="index.html"><img height=24 width=24 src=../back.gif border=0 alt=OpenBSD></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
d29 2
a30 2
Originally [OpenBSD: porting.html,v 1.59 ]<br>
$Translation: porting.html,v 1.58 2012/04/24 18:47:48 steffen Exp $<br>
@


1.54
log
@Sync with Steelix CVS
@
text
@d135 1
a135 1
         bestimmtes Boot-Setup benötigen, sollten den Administrator
d508 1
a508 1
$Translation: porting.html,v 1.57 2012/04/19 17:46:12 steffen Exp $<br>
@


1.53
log
@Sync with Steelix CVS
@
text
@d154 1
a154 1
       <strong>musst</strong> du alle OpenBSD-Patches auch zurück an
d166 2
a167 2
       Portierung vorbereitest. Benutze die letzte reguläre Version oder die
       letzte gepatchte.
d508 1
a508 1
$Translation: porting.html,v 1.56 2012/04/14 18:35:22 steffen Exp $<br>
@


1.52
log
@Sync with Steelix CVS
@
text
@d16 1
a16 1
<title>Das Erzeugen eines OpenBSD-Ports</title>
d22 1
a22 1
  <h2><font color="#e00000">Das Erzeugen eines OpenBSD-Ports</font></h2>
d26 1
a26 1
   teilen, indem du davon einen Standard-Port machst? Was also ist
d31 2
a32 2
   <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>, ob sie am
   selben Port arbeiten. <em>Teile es dem ursprünglichen Programmierer
d35 1
a35 1
   Schwierigkeiten hattest, den Port zum Laufen zu kriegen, teile ihm
d40 2
a41 2
   <strong>KOMMUNIKATION</strong> macht den Unterschied zwischen einem
   erfolgreichen Port und einem Port, der langsam von allen alleine
d55 2
a56 2
   Liefere den Port aus (submit). Erzeuge einen ,gzipped tarball' des
   Port-Verzeichnisses. Du kannst diesen entweder auf einen
d58 2
a59 2
   <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> mailen,
   oder den Port ,mime encoded' an die selbe Adresse schicken. Wähle
d66 1
a66 1
   Aktualisierung und Verwaltung anderer Ports hilfst, so lange du
d74 2
a75 2
   Port-<code>MAINTAINER</code> ist jemand anderes: eine Person,
   die sich der Funktionalität des Ports verpflichtet fühlt und bereit
d89 1
a89 1
   <li>OpenBSD-Porting-<a href="../porting/checklist.html">Checkliste</a>.
d91 1
a91 1
       für Ports.
d94 2
a95 2
       Sie dokumentiert das Makefile der Ports-Infrastruktur, das am
       Ende jeder individuellen Port-Makefile eingeschlossen wird.
d99 1
a99 1
   <li>Einige Unterschiede zu den anderen BSD-Portsystemen,
d103 1
a103 1
   Librarys in OpenBSD-Ports</a>. Die Regeln sind <strong>sehr wichtig
d106 1
a106 1
       wie man sie im Gebrauch mit OpenBSD-Ports handhabt.
d109 1
a109 1
       einzigartigen Werkzeuge, die der OpenBSD-Ports-Tree besitzt, um
d115 2
a116 2
       NetBSD Package System</a>-Dokumentation. Dieses Dokument
       beschreibt die NetBSD-Version des FreeBSD-Portsystems und ist
d120 2
a121 2
       Porter's Handbook</a>.  Das ist die FreeBSD-Porting-Bibel.
   <li>Die OpenBSD-Ports-Mailingliste
d134 1
a134 1
         <code>/etc</code> automatisch upzudaten. Ports, die ein
d142 1
a142 1
       die von Ports erzeugt werden.
d149 1
a149 1
       in das Makefile eingefügt wird. Wenn du einen Port von einem
d161 1
a161 1
       <a href="mailto:ports@@openbsd.org">Ports</a>-Mailingliste um
d165 2
a166 2
   <li>Benutze <em>keinen</em> Alpha- oder Beta-Code, wenn du einen
       Port vorbereitest. Benutze die letzte reguläre Version oder die
d206 1
a206 1
       benutzt, kann im <code>rsync</code>-Port gefunden werden.
d261 2
a262 2
       Spiel oder etwas ähnliches sein. Siehe auch den
       <code>xkobo</code>-Port für ein Beispiel einer solchen Änderung.
d437 1
a437 1
       definiert werden). Wenn dein Port ein
d443 1
a443 1
       sowieso ihren Ports-Tree mitsamt <code>bsd.port.mk</code>
d508 1
a508 1
$Translation: porting.html,v 1.55 2012/01/31 21:20:30 tobias Exp $<br>
@


1.51
log
@Sync with Steelix CVS
@
text
@d92 1
a92 1
   <li>Die Manualseite
d138 1
a138 1
   <li>OpenBSD komprimiert KEINE Manualseiten.
d280 1
a280 1
       auf. Die <code>perlsec</code>-Manualseite ist ein gutes Tutorium
d311 1
a311 1
       tatsächlich gebraucht wird. Manualseiten sind oftmals hilfreich,
d369 1
a369 1
       <code>termios.h</code>. Die Manualseite zeigt regelmäßig wo die
d500 1
a500 1
       entsprechenden Manualseite aufgeführt werden.
d508 1
a508 1
$Translation: porting.html,v 1.54 2011/11/27 09:22:46 tobias Exp $<br>
@


1.50
log
@Sync with Steelix CVS
@
text
@d46 1
a46 1
   OpenBSD-Porting-<a href="../checklist.html">Checkliste</a>.
d48 2
a49 1
   Teste, teste nochmal und schlussendlich teste nochmals!
d89 1
a89 1
   <li>OpenBSD-Porting-<a href="../checklist.html">Checkliste</a>.
d111 1
a111 1
   <li><a href="audio-port.html">Das Portieren von
d507 2
a508 2
Originally [OpenBSD: porting.html,v 1.58 ]<br>
$Translation: porting.html,v 1.53 2009/01/31 21:38:39 simon Exp $<br>
@


1.49
log
@Sync with Steelix CVS
@
text
@d15 1
a15 1
	content="This document copyright 1997-2006 by OpenBSD.">
d386 11
d506 2
a507 2
Originally [OpenBSD: porting.html,v 1.57 ]<br>
$Translation: porting.html,v 1.52 2008/03/04 23:02:51 paldium Exp $<br>
@


1.48
log
@Sync with Steelix CVS
@
text
@d56 1
a56 1
   öffentlichen FTP- oder HTTP-Server legen und die Addresse an
d99 1
a99 1
   hautpsächlich eine Zusammenfassung
d196 1
a196 1
       <strong>Die müssen gefixed werden</strong>. Das ist nicht ganz
d240 1
a240 1
       Rechte fallenlassen hast, solltest du noch auf die ,descriptors'
d249 1
a249 1
       die erforderliche Magie zum Schreiben von Daemonen kennen, um das
d288 1
a288 1
       setuid laufen lässt, wird er nur vertraenswürdigen Bibliotheken
d350 1
a350 1
       wiederum andere ... Erstens weil es uneffizient ist. Dein Projekt
d377 1
a377 1
       sie Typen benutzen könnten, die auf deinem Sytem funktionieren,
d496 1
a496 1
$Translation: porting.html,v 1.51 2008/01/04 21:04:29 paldium Exp $<br>
@


1.47
log
@Sync with Steelix CVS
@
text
@d232 1
a232 1
       Programm keine 'file descriptors' akzeptiert, kannst du immernoch
d496 1
a496 1
$Translation: porting.html,v 1.50 2007/12/13 14:52:27 paldium Exp $<br>
@


1.46
log
@Sync with Steelix CVS
@
text
@d175 1
a175 1
       zahlreiche ,race conditions', in denen du keine saubere
d231 1
a231 1
       weiter, um ,race conditions' zu vermeiden. Sogar wenn ein
d496 1
a496 1
$Translation: porting.html,v 1.49 2007/11/08 21:44:13 paldium Exp $<br>
@


1.45
log
@Sync with steelix translation CVS
@
text
@d93 1
a93 1
       Sie dokumentiert die Makefile der Ports-Infrastruktur, die am
d148 1
a148 1
       in die Makefile eingefügt wird. Wenn du einen Port von einem
d150 1
a150 1
       Tag in der Makefile belässt.
d248 5
a252 5
       in <code>inetd.conf</code> zu machen.  Du musst natürlich die
       erforderliche Magie zum Schreiben von Daemonen kennen, um das zu
       erreichen. Man könnte sagen, dass du keinerlei Chancen hast, ein
       gutes setuid-Programm zu schreiben, wenn du nicht weißt, wie man
       das macht.
d264 1
a264 1
       wurden, werden setgid immer noch als wichtige potentielle
d338 1
a338 1
       zur Makefile hinzufügen. Man könnte das auch selber schreiben
d427 1
a427 1
       <code>CONFIGURE_ARGS += ${CONFIGURE_SHARED}</code> in die
d448 1
a448 1
       gewöhnlich in einer Makefile) und dem Linken mit
d496 1
a496 1
$Translation: porting.html,v 1.47 2007/06/18 18:32:14 paldium Exp $<br>
@


1.44
log
@Sync with steelix translation CVS
@
text
@d60 16
d495 2
a496 2
Originally [OpenBSD: porting.html,v 1.56 ]<br>
$Translation: porting.html,v 1.46 2007/05/04 13:15:36 paldium Exp $<br>
@


1.43
log
@Sync with steelix translation CVS
@
text
@d51 1
a51 1
   <a href="../porting/update.html">ein paar Sonderfälle</a>
d73 1
a73 1
   <li>OpenBSDs <a href="../porting/update.html">Updaterichtlinien</a>
d85 3
a87 3
   <li><a href="../porting/de/libraries.html">Das Benutzen von ,shared
   libraries' in OpenBSD-Ports</a>. Die Regeln sind <strong>sehr wichtig
   </strong> sobald du ,shared libraries' benutzt.
d406 1
a406 1
   <li>Erzeuge <em>KEINE</em> ,shared libraries' wenn
d480 1
a480 1
$Translation: porting.html,v 1.44 2007/04/25 15:41:10 paldium Exp $<br>
@


1.42
log
@sync with Steelix CVS
@
text
@d78 1
a78 1
       Ende jeder individuellen Port-Makefile eingeschlossen wird.  
d124 1
a124 1
   <li>OpenBSD hat einen separaten Namensraum für User und Gruppen, 
d150 1
a150 1
       letzte gepatchte.	 
d154 1
a154 1
       insbesondere unsichere Benutzung von 
d161 1
a161 1
       Benutzerrechte auf deiner Maschine hat, könnte Dateien in 
d163 1
a163 1
       Dateien setzen, wie etwa <code>/etc/master.passwd</code>.  
d171 1
a171 1
       öffnest ist deine Passwortdatei verraten. Ja, sogar mit einem 
d176 1
a176 1
                 
d203 1
a203 1
       spielen und dein Band zurückspulen) -- öffne es mit korrekt 
d208 2
a209 2
       <code>popen</code> und 
       <code>system</code> ein.  
d251 1
a251 1
       betrachtet werden. 
d278 1
a278 1
       Hauptprogramm dazu kommt, seinen setuid-Status zu checken.   
d282 1
a282 1
       absolut verstanden hast.	 
d323 1
a323 1
       oder im configure-Skript testen und es dann automatisch 
d343 1
a343 1
       include-Datei zu bekommen, ist auch eine schlechte Idee: 
d365 1
a365 1
       Außerdem sind einige Compiler, so wie auch OpenBSDs gcc, 
d437 2
a438 2
       alten Stil in neuem Code. Es kann Code geben, der  
       <code>tcgetattr</code> als Synonym für das ältere  
d440 1
a440 1
       eine kurzfristige Methode.  
d444 1
a444 1
       willst ja einen Typen, der den Status deines Terminals behält 
d449 1
a449 1
       System zu System unterschiedlich zu sein. Vergiss auch 
d452 1
a452 1
       behandeln musst: nicht nur das Beenden, sondern auch 
d466 1
a466 1
       durch die <code>TERMCAP</code>-Variable zu übersteuern 
d475 1
a475 1
<a href="index.html"><img height=24 width=24 src=../back.gif border=0 alt=OpenBSD></a> 
d480 1
a480 1
$Translation: porting.html,v 1.43 2007/02/09 18:13:46 paldium Exp $<br>
@


1.41
log
@sync with steelix translation CVS
@
text
@d424 1
a424 1
       ein, um fehlfunktionierende Skripte, Makefiles, etc. zu
d480 1
a480 1
$Translation: porting.html,v 1.42 2006/11/09 18:01:11 paldium Exp $<br>
@


1.40
log
@sync with steelix translation CVS
@
text
@d50 4
d73 2
d479 2
a480 2
Originally [OpenBSD: porting.html,v 1.55 ]<br>
$Translation: porting.html,v 1.41 2006/05/11 16:56:04 paldium Exp $<br>
@


1.39
log
@sync with Steelix CVS
@
text
@d178 1
a178 1
       >mktemp(3)</code></a> genauer an, um weitere Informationen
d474 1
a474 1
$Translation: porting.html,v 1.40 2006/05/03 10:41:46 paldium Exp $<br>
@


1.38
log
@sync with steelix translation CVS
@
text
@d473 2
a474 2
Originally [OpenBSD: porting.html,v 1.54 ]<br>
$Translation: porting.html,v 1.39 2006/05/02 14:45:22 paldium Exp $<br>
@


1.37
log
@sync with Steelix CVS
@
text
@d15 1
a15 1
	content="This document copyright 1997-2004 by OpenBSD.">
d176 4
a179 2
       Sieh dir die <code>mktemp(3)</code>-Manualseite von
       OpenBSD-current für mehr Hinweise an.
d473 2
a474 2
Originally [OpenBSD: porting.html,v 1.53 ]<br>
$Translation: porting.html,v 1.38 2006/04/24 17:44:26 paldium Exp $<br>
@


1.36
log
@sync with steelix translation CVS
@
text
@a3 2
  <meta http-equiv="Content-Language"
        content="de">
d9 1
a9 1
        CONTENT="Wie man einen OpenBSD-Port erzeugt">
d15 1
a15 1
        content="Dieses Dokument unterliegt dem Copyright von OpenBSD 1997 - 2004.">
d471 2
a472 2
Originally [OpenBSD: porting.html,v 1.53 ]
$Translation: porting.html,v 1.37 2005/12/09 16:48:25 paldium Exp $
@


1.35
log
@sync with Steelix CVS
@
text
@d90 1
a90 1
   <li><a href="../audio-port.html">Das Portieren von
d474 1
a474 1
$Translation: porting.html,v 1.36 2005/09/30 15:27:07 paldium Exp $
@


1.34
log
@sync with Steelix CVS
@
text
@d293 2
a294 1
       <a href="ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/Packages.txt">NetBSD package guide</a>
d473 2
a474 2
Originally [OpenBSD: porting.html,v 1.52 ]
$Translation: porting.html,v 1.35 2005/09/09 11:31:21 paldium Exp $
@


1.33
log
@sync with Steelix CVS
@
text
@d3 15
a17 8
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta http-equiv="Content-Language" content="de">
<meta name="resource-type" content="document">
<meta name="description" CONTENT="Wie man einen OpenBSD-Port erzeugt">
<meta name="keywords" content="openbsd,ports">
<meta name="distribution" content="global">
<meta name="copyright" content="This document copyright 1997-2004 by OpenBSD.">
d139 3
a141 2
       bitte auf der <a
       href="mailto:ports@@openbsd.org">Ports</a>-Mailingliste um Hilfe.
d327 1
a327 1
       wiederum andere... Erstens weil es uneffizient ist. Dein Projekt
d473 1
a473 1
$Translation: porting.html,v 1.34 2005/08/11 17:41:36 paldium Exp $
@


1.32
log
@sync with Steelix CVS
@
text
@d460 1
a460 1
<a href="index.html"><img height="24" width="24" src="../back.gif" border="0" alt="Zurück zur OpenBSD-Hauptseite"></a> 
d465 1
a465 1
$Translation: porting.html,v 1.33 2005/07/06 13:56:07 paldium Exp $
@


1.31
log
@Sync with Steelix CVS
@
text
@d1 1
a1 2
<!DOCTYPE HTML PUBLIC  "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
d12 1
a12 1
<link rev="made" href="mailto:www@@openbsd.org">
d14 1
a14 1
<body text="#000000" bgcolor="#ffffff" link="#23238e">
a50 1
  <p>
d401 1
a401 2
       updaten sollten. <code>NEED_VERSION</code> ist von nun an
       hinfällig.
d465 1
a465 1
$Translation: porting.html,v 1.32 2005/02/06 12:31:52 paldium Exp $
@


1.30
log
@Sync with Steelix CVS
@
text
@d8 1
a8 1
<meta name="description" CONTENT="Wie man einen OpenBSD port erzeugt">
d12 1
a12 1
<title>Das Erzeugen eines OpenBSD ports</title>
d18 1
a18 1
  <h2><font color="#e00000">Das Erzeugen eines OpenBSD ports</font></h2>
d20 4
a23 3
   Du hast also gerade dein Lieblingssoftwarepaket auf deiner OpenBSD-Maschine
   kompiliert und möchtest deinen Erfolg mit anderen teilen, indem du davon
   einen Standard port machst ? Was also ist jetzt zu tun ?
d25 10
a34 7
   Die wichtigste Sache, die du machen solltest, ist mit anderen zu <strong>kommunizieren</strong>.
   Frage die anderen Leute auf <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>,
   ob sie am selben port arbeiten. <em>Teile es dem ursprünglichen Programmierer
   mit</em>, inklusive der Probleme, wenn du welche findest. Wenn die Lizenzbedingungen
   nicht korrekt sind, sag es ihm. Wenn du grosse Schwierigkeiten hattest, den port zum Laufen
   zu kriegen, teile ihm mit, was verbessert werden könnte. Wenn sie nur auf Linux entwickeln und den
   Rest der Unix-Welt ignorieren, versuche, ihre Sichtweise etwas zu erweitern.
d36 3
a38 2
   <strong>KOMMUNIKATION</strong> macht den Unterschied zwischen einem erfolgreichen port
   und einem port, der langsam von allen alleine gelassen und nicht mehr benutzt wird aus.
d40 3
a42 3
   Sieh dir zuerst die porting-Informationen auf dieser Seite an. Dann überprüfe all
   die gelinkten Dokumente, insbesondere die OpenBSD porting 
   <a href="../checklist.html">checklist</a>.
d44 1
a44 1
   Teste, teste nochmal und schlussendlich teste nochmals !
d46 6
a51 4
   Liefere den port aus (submit).  Erzeuge einen 'gzipped tarball' des port Verzeichnisses.
   Du kannst diesen entweder auf einen öffentlichen FTP oder HTTP Server legen, und die
   Addresse an <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> mailen,
   oder den port 'mime encoded' an die selbe Adresse schicken. Wähle einfach eine Methode aus.
d54 1
a54 1
<h3><font color="#0000e0">Index der Porting Dokumentation</font></h3>
d56 2
a57 2
<li><a href="#Avail">Verfügbare Porting Information</a></li>
<li><a href="#Policy">OpenBSD Porting Policy</a></li>
d59 1
a59 1
<li><a href="#Generic">Generische Porting Hinweise</a></li>
d63 1
a63 1
  <h3><font color="#0000e0"><a name="Avail">Verfügbare Porting Information</a></font></h3>
d65 2
a66 2
   <li>OpenBSD porting <a href="../checklist.html">checklist</a>.
   <li>Die man page 
d68 13
a80 11
       Sie dokumentiert das ports Infrastruktur Makefile, das am Ende 
       jedes individuellen port Makefiles eingeschlossen wird.  
       Es gibt am Anfang noch ein paar Kommentare innerhalb der Datei selbst,
       aber die meisten der sinnvollen Informationen sind jetzt dokumentiert.
   <li>Einige Unterschiede zu den anderen BSD port Systemen, hautpsächlich eine Zusammenfassung
   der <a href="../porting/de/diffs.html">Infrastruktur Unterschiede</a>.
   <li><a href="../porting/de/libraries.html">Das Benutzen von shared libraries
   in OpenBSD Ports</a>. Die Regeln sind <strong>sehr wichtig
   </strong> sobald du shared libraries benutzt.
   <li><a href="../porting/de/autoconf.html">GNU autoconf Spezifikationen</a>,
       wie man sie im Gebrauch mit OpenBSD Ports handhabt.
d82 5
a86 3
       ein häufiger Stolperstein für neue Entwickler und die einzigartigen
       Werkzeuge, die der OpenBSD Ports Tree besitzt, um diese zu verarbeiten.
   <li><a href="../audio-port.html">Das Portieren von Audio-Applikationen auf OpenBSD</a>.
d89 3
a91 2
       NetBSD Package System</a> Dokumentation. Dieses Dokument beschreibt die  
       NetBSD Version des FreeBSD Portsystems und ist recht hilfreich.
d94 2
a95 2
       Porter's Handbook</a>.  Das ist die FreeBSD porting Bibel.
   <li>Die OpenBSD ports Mailingliste
d98 1
a98 1
  <h3><font color="#0000e0"><a name="Policy">OpenBSD Porting Politik</a></font></h3>
d101 12
a112 10
       <code>/usr/local</code> wird dank NFS oftmals von verschiedenen Maschinen
         benutzt.  Aus diesem Grund können Konfigurationsdateien, die spezifisch
         für eine bestimmte Maschine sind auch nicht in <code>/usr/local</code> abgelegt werden,
         <code>/etc</code> ist die zentrale Lagerstätte für individuelle 
 	 Maschinen-Konfigurationsdateien.
         Außerdem ist es OpenBSD Politik, niemals Dateien unter 
         <code>/etc</code> automatisch upzudaten. Ports, die ein spezifisches 
         Boot Setup benötigen, sollten den Administrator anweisen, was zu tun ist, 
	 anstatt blind Dateien zu instalieren.
   <li>OpenBSD komprimiert KEINE man pages.
d116 3
a118 2
       die von ports erzeugt werden.
       See <code>/usr/ports/infrastructure/db/user.list</code> for details.
d120 10
a129 7
       <a href="#Security">Sicherheitssektion</a> auf dieser Seite lesen und verstehen.
   <li>Stelle sicher, dass der <code>&#36;OpenBSD&#36;</code> CVS tag in das
       Makefile eingefügt wird. Wenn du einen port von einem anderen System importierst, stelle sicher,
       dass du auch ihren tag im Makefile belässt.
   <li>Das Ziel ist, dass alle 'ported applications' OpenBSD unterstützen. Um dieses Ziel zu erreichen
       <strong>musst</strong> du alle OpenBSD patches auch zurück an den originalen
       Programmierer zurückliefern.
d132 4
a135 3
  Es gibt viele Sicherheitsprobleme, über die man sich Gedanken machen muss. Wenn du nicht 
       absolut sicher bist, was du tust, frage bitte auf der 
       <a href="mailto:ports@@openbsd.org">ports</a> Mailingliste um Hilfe.
d138 8
a145 6
   <li>Benutze <em>keinen</em> alpha oder beta Code wenn du einen port vorbereitest. Benutze die letzte
       reguläre Version oder die letzte gepatchte.	 

   <li>Alle Software, die auf einem Server installiert werden soll, sollte auf
       buffer overflows untersucht werden, insbesondere unsichere Benutzung von 
       <code>strcat/strcpy/strcmp/sprintf</code>. Im allgemeinen sollte 
d148 18
a165 14
   <li>Benutze niemals Dateinamen statt echter Sicherheit. Es gibt zahlreiche 'race
       conditions'  in denen du keine saubere Kontrolle mehr hast. Ein Angreifer, der
       bereits normale Userrechte auf deiner Maschine hat, könnte Dateien in 
       <code>/tmp</code> mit symbolischen Links auf strategischere Dateien ersetzen, wie etwa
       <code>/etc/master.passwd</code>.  

   <li>Zum Beispiel erzeugen sowohl <code>fopen</code> als auch <code>freopen</code>
       <strong>eine neue Datei oder öffnen eine bereits existierende</strong> zum 
       Schreiben. Ein Angreifer könnte einen symbolischen Link von
       <code>/etc/master.passwd</code> auf <code>/tmp/addrpool_dump</code> setzen. Sofort 
       wenn ihn öffnest ist deine Passwortdatei verraten. Ja, sogar mit einem 
       <code>unlink</code> direkt davor. Du kannst nur das Fenster der Möglichkeiten
       enger machen.  Benutze stattdessen <code>open</code> mit
       <code>O_CREAT|O_EXCL</code> und <code>fdopen</code>.
d167 25
a191 23
   <li>Ein weiteres sehr bekanntes Problem ist die <code>mktemp</code>
       Funktion. Beachte die Warnungen des 'bsd linker' bei ihre Benutzung.  
       <strong>Die müssen gefixed werden</strong>.
       Das ist nicht ganz so einfach wie <code>s/mktemp/mkstemp/g</code>.  <br>
       Sieh dir die <code>mktemp(3)</code> man page von OpenBSD current 
       für mehr Hinweise an.
       Korrekter Code, der <code>mkstemp</code> benutzt, schließt den Source zu
       <code>ed</code> oder <code>mail</code> ein.
       Eine seltenes Beispiel von Code, der <code>mktemp</code> korrekt benutzt 
       kann im <code>rsync</code> port gefunden werden.

   <li>Nur weil du etwas lesen kannst heisst es nicht, dass du das solltest. Eine
       sehr bekannte Lücke dieser Art war das <code>startx</code> Problem. Als
       setuid Programm konntest du startx mit jeder Datei als Skript starten.
       Wenn die Datei kein sauberes Shell-Skript war folgte eine Fehlermeldung, 
       zusammen mit der ersten Zeile der betreffenden Datei, ohne weitere
       Überprüfung der Rechte.  Ziemlich einfach die
       erste Zeile der shadow passwd Datei zu erhalten, besonders wenn man bedenkt, dass
       die erste Zeile meist den root Eintrag enthält.
       Öffne nicht deine Datei um dann ein
       <code>fstat</code> auf den 'open descriptor' zu machen, um zu überprüfen 
       ob du sie hättest öffnen können müssen (oder der Angreifer wird
       mit /dev/rst0 spielen und dein Band zurückspulen) -- öffne es mit korrekt 
d194 2
a195 2
   <li>Tue nichts, was eine Shell im Hintergrund von setuid Programmen forkt bevor du  
       deine Rechte zurücksetzt. Das schließt
d198 2
a199 1
       Benutze stattdessen <code>fork</code>, <code>pipe</code> und <code>execve</code>.
d202 11
a212 8
       Gib' offene 'descriptors' anstatt von Dateiname an andere Programme weiter, um race
       conditions zu vermeiden. Sogar wenn ein Programm keine 'file descriptors'
       akzeptiert, kannst du immer noch <code>/dev/fd/0</code> benutzen.

   <li>Zugriffsrechte sind an 'file descriptors' gebunden. Wenn du setuid Rechte setzen musst,
       um eine Datei zu öffnen, öffne die Datei, dann lass deine Rechte fallen. Du kannst nach
       wie vor auf den 'open descriptor' zugreifen, aber du musst dir um ihn weniger Dinge Sorgen machen. Das hat aber
       zwei Seiten: auch nachdem du die Rechte fallenlassen hast, solltest du noch auf die 'descriptors'
d215 32
a246 27
   <li>Vermeide root setuid wo du nur kannst. Grundsätzlich kann root alles tun,
       aber root Rechte werden nur sehr selten wirklich benötigt, vielleicht mit Ausnahme
       vom Erzeugen von Sockets mit einer Nummer kleiner 1024. Es ist beutend besser, dass 
       <code>inetd</code> zu überlassen und nur die relevanten Einträge in 
       <code>inetd.conf</code> zu machen.  
       Du musst natürlich die erforderliche Magie zum Schreiben von daemons kennen, um das
       zu erreichen.
       Man könnte sagen, dass du keinerlei Chancen hast, ein gutes setuid Programm zu schreiben,
       wenn du nicht weisst, wie man das macht.

   <li>Benutze setgid anstelle von setuid. Abgesehen von diesen spezifischen Dateien, die von
       setgid Programmen benötigt werden, sind die meisten Dateien nicht 'group-writable'. Daher 
       werden Sicherheitsprobleme in einem 'setgid' Programm dein System nicht bedrohen: mit nur 
       Gruppenrechten wird  das schlimmste, was ein Angreifer anrichten kann, das Hacken einer 
       Score-Tabelle in einem Spiel oder etwas ähnliches sein.
       Siehe auch den <code>xkobo</code> port für ein Beispiel einer solchen Änderung.

   <li>Vertraue keinen 'group-writable' Dateien.  Auch wenn sie geprüft wurden, werden 
       setgid immer noch als wichtige potentielle Sicherheitslöcher betrachtet.
       Von daher sollten Informationen, die hiervon berührt werden nicht als sensitive 
       Information betrachtet werden. 

   <li>Vertraue nicht deinem 'environment' ! Das schließt einfache Dinge wie etwa  
       deinen <code>PATH</code> ein (benutze niemals <code>system</code> mit einem 
       unqualifizierten Namen, vermeide <code>execvp</code>), es betrifft aber auch solche
       feinen Dinge wie locale, timezone, termcap, und so weiter.  
       Sei vorsichtig mit 'transitivity': Auch wenn du alle Vorsichtsmassregeln triffst,
d248 22
a269 18
       Benutze <strong>niemals</strong>
        <code>system</code> in privilegierten Programmen, baue eine saubere 'command 
       line', ein kontrolliertes 'environment', und rufe <code>execve</code> direkt auf. 
       Die <code>perlsec</code> man page ist ein gutes Tutorium über solche Probleme.

   <li>Benutze niemals setuid shell-scripts. Sie sind vererbliche Sicherheitslücken.  
       Schliesse sie in C Code ein, der eine saubere 'environment' sicherstellt.
       Auf der anderen Seite gibt es unter OpenBSD auch die sicheren Perl-Skripte.

   <li>Nimm dich vor dem 'dynamic loader' in acht. Wenn du ihn mit setuid laufen lässt, wird er nur
       vertraenswürdigen Libraries trauen, die mit ldconfig gescannt wurden.
       Setgid ist nicht genug.

   <li>Dynamic libraries sind schwierig. C++ Code stellt ein ähnliches Problem dar. 
       Grundsätzlich könnten Libraries einige Dinge basierend auf deinem 'environment' 
       tun, sogar bevor dein Hauptprogramm dazu kommt seinen setuid Status zu checken.   
       OpenBSD <code>issetugid</code> kümmert sich um dieses Problem vom Standpunkt eines
       Library Autors.  Versuche nicht Libraries zu portieren, bis du diesen Punkt wirklich
d272 1
a272 1
  <h3><font color="#0000e0"><a name="Generic">Generische porting Hinweise</a></font></h3>
d274 2
a275 2
   <li><code>__OpenBSD__</code> sollte sparsam benutzt werden, wenn überhaupt.
       Konstruktionen, die wie
d279 8
a286 6
       aussehen, sind oft unpassend. Füge nicht blindlings <code>__OpenBSD__</code>
       hinzu. Versuche stattdessen herauszufinden, was vor sich geht und welches Feature 
       tatsächlich gebraucht wird. Manual pages sind oftmals hilfreich, da sie historische 
       Kommentare enthalten und darstellen, wann ein spezielles Feature in OpenBSD eingefügt
       wurde. Den numerischen Wert von <code>BSD</code> gegen bekannte Versionen/Zahlen zu 
       prüfen ist meistens der richtige Weg. Der
d289 4
a292 4
   <li><code>BSD</code> zu definieren ist eine schlechte Idee. Versuche <code>sys/param.h</code>
       einzubinden.
       Das definiert nicht nur <code>BSD</code>, sondern gibt auch einen sauberen Wert.
       Das richtige Code Fragment sollte etwa so aussehen:
d298 20
a317 16
   <li>Teste, ob Features vorhanden sind, und nicht nach spezifischen Betriebssystemen. Auf lange Sicht 
       ist es besser zu erfahren, ob <code>tcgetattr</code> funktioniert, als zu erfahren, ob man
       gerade auf 4.3 BSD oder später oder etwa SystemVR4 arbeitet.
       Diese Art von Test trifft einfach nicht den Punkt.
       Ein sinnvoller Weg wäre zum Beispiel auf ein bestimmtes System zu testen,
       eine Runde von  
       <code>HAVE_TCGETATTR</code> zu definieren, und dann mit dem nächsten System weiterzumachen.
       Diese Technik trennt die feature-Tests von denen auf spezielle Betriebssysteme.
       In grosser Eile kann ein anderer 'porter' das ganze set von
       <code>-DHAVE_XXX</code> Definitionen zum Makefile hinzufügen. 
       Man könnte das auch selber schreiben oder im configure-Skript testen und es dann automatisch 
       hinzufügen. Als negatives Beispiel, dem man _nicht_ folgen sollte kann der 
       nethack 3.2.2-Source dienen: er nimmt jede Menge Dinge basierend auf dem Systemtyp an.
       Die meisten dieser Annahmen sind veraltet und haben nichts mehr mit der Realität zu tun:
       POSIX sind nützlicher als alte BSD versus SystemV 
       Unterschiede, da einige traditionelle BSD-Funktionen jetzt nur noch durch
d320 44
a363 39
   <li>Vermeide include Dateien, die andere includes enthalten, die wiederum andere... Erstens weil es
       uneffizient ist. Dein Projekt wird mit einer Datei enden, die alles andere 'included'.
       Und außerdem werden dabei Probleme erzeugt, die schwierig zu beheben sind.
       Es wird schwieriger an einem bestimmten Punkt <em>nicht</em> eine bestimmte Datei
       mit einzubinden.

   <li>Vermeide bizarre macro Tricks.  'Undefining' eines Makros, die von einem Header-File
       definiert wurde ist eine schlechte Idee. Das Definieren eines Makros um ein
       spezielles Verhalten von einer include-Datei zu bekommen, ist auch eine schlechte Idee: 
       Kompiliermodi sollten global sein. Wenn du POSIX Verhalten willst, teile es mit, 
       indem du 
       <code>#define POSIX_C_SOURCE</code> im ganzen Projekt einsetzt, nicht
       nur wenn dir danach ist.

   <li>Schreibe niemals 'system function prototypes'.  Alle modernen Systeme, 
       inklusive OpenBSD, haben einen Standardplatz für diese 'prototypes'.  
       Wahrscheinliche Plätze sind etwa <code>unistd.h</code>, <code>fcntl.h</code> oder 
       <code>termios.h</code>.
       Die man page zeigt regelmäßig wo die 'prototypes' zu finden sind.
       Du könntest noch eine Runde <code>HAVE_XXX</code> Makros benötigen um die
       richtige Datei zu beschaffen. Mach dir keine Sorgen darum ,dass du eine Datei zwei 
       Mal 'includen' könntest, include Dateien haben Aufpasser, die solchen Unfug 
       verhindern.<br>
       Falls irgendein kaputtes System von dir verlangt, den 'prototype' zu schreiben, dehne das
       nicht gleich auf alle anderen Systeme aus. 
       'Roll-your-own prototypes' werden nicht funktionieren da sie Typen benutzen könnten,
       die auf deinem Sytem funktionieren, aber eben nicht auf andere Systeme portierbar sind
       ; (<code>unsigned long</code> anstelle von 
       <code>size_t</code>) benutzen, oder einen <code>const</code> Status falsch verstehen. 
       Außerdem sind einige Compiler, so wie auch OpenBSD's gcc, 
       in der Lage bessere Arbeit mit sehr oft verwendeten Funktionen wie 
       <code>strlen</code> zu leisten, wenn man die richtigen header-Dateien einbindet.

   <li>Benutze  nicht den Namen einer Standard-System-Funktion für irgend etwas anderes.
       Wenn du deine eigene Funktion schreiben willst, gib ihr einen eigenen Namen, und 
       rufe diese Funktion überall auf.  Wenn du zur Standard-System-Funktion 
       zurückkehren willst, musst du nur deinen Code auskommentieren, und den Namen
       wieder auf die Systemfunktion zurückschreiben. Mach es nicht andersherum.
       Der Code sollte etwa so aussehen:
d365 1
a365 1
       /* prototype part */
d369 1
a369 1
       /* include correct file */
d375 1
a375 1
       /* definition part */
d382 1
a382 1
       /* typical use */
d388 17
a404 13
   <li>Neuere Versionen von <code>bsd.port.mk</code> setzen den Installer-Pfad.
       Sie sorgen insbesondere dafür, dass <code>/usr/bin</code> und
       <code>/bin</code> <em>vor</em>
       <code>/usr/local/bin</code> und <code>/usr/X11R6/bin</code> durchsucht werden.
   <li>Erzeuge <em>KEINE</em> shared libraries wenn
       <code>${NO_SHARED_LIBS}</code> auf YES gesetzt ist (Vorsicht: es kann nur nach der
       Einbindung von <code>bsd.port.mk</code> definiert werden). Wenn dein port ein
       GNU configure benutzt, füge einfach die Zeile
       <code>CONFIGURE_ARGS += ${CONFIGURE_SHARED}</code> in das Makefile ein.
   <li>Es ist in Ordnung ein erst neuerlich hinzugefügtes Feature von
       <code>bsd.port.mk</code> zwingend zu benötigen, da die Leute sowieso  
	ihren ports tree mitsamt <code>bsd.port.mk</code> updaten sollten.
       <code>NEED_VERSION</code> ist von nun an hinfällig.
d408 6
a413 4
       <code>update-plist</code> kann die meisten Dateitypen alleine erkennen
       und die meisten extra annotations korrekt kopieren.
   <li>Füge <code>USE_SYSTRACE=Yes</code> in <code>/etc/mk.conf</code> ein,
       um fehlfunktionierende Skripte, Makefiles, etc. zu entdecken.
d415 1
a415 1
       ``neuen curses''.  Ändere:<br>
d417 1
a417 1
       ``old (BSD) curses'' ist durch das Definieren von
d419 2
a420 2
       und zwar vor dem Einbinden von <code>curses.h</code> (für gewöhnlich 
       in einem Makefile) und dem Linken mit
d422 10
a431 8
   <li>In OpenBSD wurden die Terminals von den alten BSD
       <code>sgtty</code> zur neuen POSIX <code>tcgetattr</code> Familie umgestellt.
       Vermeide den alten Stil in neuem Code. Es kann Code geben, der  
       <code>tcgetattr</code> als Synonym fiür das ältere  
       <code>sgtty</code> definiert, aber das ist auf OpenBSD höchstens eine 
       kurzfristige Methode.  
       Der <code>xterm</code> Source Code ist ein sehr gutes Beispiel, wie man es nicht
       machen sollte. Versuche deine Systemfunktionalität richtig hinzubekommen: Du
d433 22
a454 19
       (möglicher typedef), du willst eine Funktion die den momentanen Status herausfindet, 
       und eine Funktion, die den neuen Status setzt.
       Funktionen, die diesen Status modifizieren sind schwieriger als es den Anschein hat, 
       da sie dazu tendieren von System zu System unterschiedlich zu sein. Vergiss auch 
       nicht, dass du Fälle behandeln musst, bei denen du gar nicht an einem 
       Terminal angeschlossen bist, und in denen du 'signals' behandeln musst: nicht
       nur das Beenden, sondern auch 
       (<code>SIGTSTP</code>) im Hintergrund. Du solltest das Terminal immer in einem 
       sauberen Zustand belassen. Mach die Tests unter einer alten Shell, wie etwa sh, 
       die das Terminal nicht gleich in allen Fällen 'resettet', nachdem das Programm
       beendet wurde.
   <li>Die neueren termcap/terminfo und curses, wie sie Teil von OpenBSD sind, 
       beinhalten Standardsequenzen für das Kontrollieren von Farb-Terminals.
       Wenn möglich benutze diese, kehre auf anderen Systemen auf die ANSI Farb-
       Sequenzen zurück. Trotzdem sind noch nicht alle Terminalbeschreibungen 
       auf dem neuesten Stand, und du musst möglicherweise in der Lage sein diese
       Sequenzen von Hand zu bearbeiten. So macht es vim. Das ist aber nicht unbedingt
       notwendig. Mit Ausnahme von privilegierten Programmen ist es generell möglich
       eine termcap Definition durch die <code>TERMCAP></code>-Variable zu übersteuern 
d456 5
a460 3
   <li>Signal Semantiken sind schwierig, und sind von System zu System verschieden.
       Benutze <code>sigaction</code> um spezifische Semantiken zu bekommen, zusammen mit
       anderen 'System Calls' ,die in der entsprechenden manpage aufgeführt werden.
d468 1
a468 1
$Translation: porting.html,v 1.31 2005/02/03 14:19:16 paldium Exp $
@


1.29
log
@Sync with Steelix CVS
@
text
@d67 1
a67 1
   <li><a href="../porting/libraries.html">Das Benutzen von shared libraries
d70 1
a70 1
   <li><a href="../porting/autoconf.html">GNU autoconf Spezifikationen</a>,
d72 1
a72 1
   <li><a href="../porting/config.html">Konfigurationsdateien</a>,
d404 1
a404 1
$Translation: porting.html,v 1.29 2005/01/18 14:33:43 paldium Exp $
@


1.28
log
@Sync with Steelix CVS
@
text
@d402 5
a406 3
Originally [OpenBSD: porting.html,v 1.52 ]<br>
$Translation: porting.html,v 1.28 2005/01/03 12:56:42 paldium Exp $<br>
$OpenBSD: porting.html,v 1.52 2005/01/02 21:25:08 msf Exp $
@


1.27
log
@Sync with Steelix CVS
@
text
@d355 2
d401 4
a404 5
<small>
<br>
Originally [OpenBSD: porting.html,v 1.51 ]
<br>
$Translation: porting.html,v 1.27 2004/11/28 13:17:04 paldium Exp $
a405 1
<br><small>$OpenBSD: porting.html,v 1.51 2004/11/27 15:14:18 espie Exp $</small>
@


1.26
log
@Sync with Steelix CVS
@
text
@d69 6
a74 2
   </strong> sobald du shared libraries benutzt, insbesondere sobald
   pkg_update eines Tages funktionieren wird...
d84 1
a84 1
       <a href="mailto:ports@@openbsd.org">ports@@OpenBSD.ORG</a>.
d401 1
a401 1
Originally [OpenBSD: porting.html,v 1.49 ]
d403 1
a403 1
$Translation: porting.html,v 1.26 2004/11/04 15:10:33 jufi Exp $
d405 1
a405 1
<br><small>$OpenBSD: porting.html,v 1.48 2004/07/15 16:18:22 xsa Exp $</small>
@


1.25
log
@Sync with Steelix CVS
@
text
@d21 1
a21 1
   kompiliert und m&ouml;chtest deinen Erfolg mit anderen teilen, indem du davon
d26 1
a26 1
   ob sie am selben port arbeiten. <em>Teile es dem urspr&uuml;nglichen Programmierer
d29 1
a29 1
   zu kriegen, teile ihm mit, was verbessert werden k&ouml;nnte. Wenn sie nur auf Linux entwickeln und den
d35 1
a35 1
   Sieh dir zuerst die porting-Informationen auf dieser Seite an. Dann &uuml;berpr&uuml;fe all
d42 1
a42 1
   Du kannst diesen entweder auf einen &ouml;ffentlichen FTP oder HTTP Server legen, und die
d44 1
a44 1
   oder den port 'mime encoded' an die selbe Adresse schicken. W&auml;hle einfach eine Methode aus.
d49 1
a49 1
<li><a href="#Avail">Verf&uuml;gbare Porting Information</a></li>
d56 1
a56 1
  <h3><font color="#0000e0"><a name="Avail">Verf&uuml;gbare Porting Information</a></font></h3>
d65 1
a65 1
   <li>Einige Unterschiede zu den anderen BSD port Systemen, hautps&auml;chlich eine Zusammenfassung
d86 3
a88 3
         benutzt.  Aus diesem Grund k&ouml;nnen Konfigurationsdateien, die spezifisch
         f&uuml;r eine bestimmte Maschine sind auch nicht in <code>/usr/local</code> abgelegt werden,
         <code>/etc</code> ist die zentrale Lagerst&auml;tte f&uuml;r individuelle 
d90 1
a90 1
         Au&szlig;erdem ist es OpenBSD Politik, niemals Dateien unter 
d92 1
a92 1
         Boot Setup ben&ouml;tigen, sollten den Administrator anweisen, was zu tun ist, 
d95 1
a95 1
   <li>OpenBSD ben&ouml;tigt KEIN <code>-lcrypt</code>.<br>
d97 1
a97 1
   <li>OpenBSD hat einen separaten Namensraum f&uuml;r User und Gruppen, 
d103 5
a107 5
       Makefile eingef&uuml;gt wird. Wenn du einen port von einem anderen System importierst, stelle sicher,
       dass du auch ihren tag im Makefile bel&auml;sst.
   <li>Das Ziel ist, dass alle 'ported applications' OpenBSD unterst&uuml;tzen. Um dieses Ziel zu erreichen
       <strong>musst</strong> du alle OpenBSD patches auch zur&uuml;ck an den originalen
       Programmierer zur&uuml;ckliefern.
d110 1
a110 1
  Es gibt viele Sicherheitsprobleme, &uuml;ber die man sich Gedanken machen muss. Wenn du nicht 
d116 1
a116 1
       regul&auml;re Version oder die letzte gepatchte.	 
d125 1
a125 1
       bereits normale Userrechte auf deiner Maschine hat, k&ouml;nnte Dateien in 
d130 2
a131 2
       <strong>eine neue Datei oder &ouml;ffnen eine bereits existierende</strong> zum 
       Schreiben. Ein Angreifer k&ouml;nnte einen symbolischen Link von
d133 2
a134 2
       wenn ihn &ouml;ffnest ist deine Passwortdatei verraten. Ja, sogar mit einem 
       <code>unlink</code> direkt davor. Du kannst nur das Fenster der M&ouml;glichkeiten
d140 1
a140 1
       <strong>Die m&uuml;ssen gefixed werden</strong>.
d143 2
a144 2
       f&uuml;r mehr Hinweise an.
       Korrekter Code, der <code>mkstemp</code> benutzt, schlie&szlig;t den Source zu
d150 1
a150 1
       sehr bekannte L&uuml;cke dieser Art war das <code>startx</code> Problem. Als
d154 1
a154 1
       &Uuml;berpr&uuml;fung der Rechte.  Ziemlich einfach die
d156 5
a160 5
       die erste Zeile meist den root Eintrag enth&auml;lt.
       &Ouml;ffne nicht deine Datei um dann ein
       <code>fstat</code> auf den 'open descriptor' zu machen, um zu &uuml;berpr&uuml;fen 
       ob du sie h&auml;ttest &ouml;ffnen k&ouml;nnen m&uuml;ssen (oder der Angreifer wird
       mit /dev/rst0 spielen und dein Band zur&uuml;ckspulen) -- &ouml;ffne es mit korrekt 
d164 1
a164 1
       deine Rechte zur&uuml;cksetzt. Das schlie&szlig;t
d175 1
a175 1
       um eine Datei zu &ouml;ffnen, &ouml;ffne die Datei, dann lass deine Rechte fallen. Du kannst nach
d180 2
a181 2
   <li>Vermeide root setuid wo du nur kannst. Grunds&auml;tzlich kann root alles tun,
       aber root Rechte werden nur sehr selten wirklich ben&ouml;tigt, vielleicht mit Ausnahme
d183 1
a183 1
       <code>inetd</code> zu &uuml;berlassen und nur die relevanten Eintr&auml;ge in 
d185 1
a185 1
       Du musst nat&uuml;rlich die erforderliche Magie zum Schreiben von daemons kennen, um das
d187 1
a187 1
       Man k&ouml;nnte sagen, dass du keinerlei Chancen hast, ein gutes setuid Programm zu schreiben,
d191 1
a191 1
       setgid Programmen ben&ouml;tigt werden, sind die meisten Dateien nicht 'group-writable'. Daher 
d194 2
a195 2
       Score-Tabelle in einem Spiel oder etwas &auml;hnliches sein.
       Siehe auch den <code>xkobo</code> port f&uuml;r ein Beispiel einer solchen &Auml;nderung.
d197 3
a199 3
   <li>Vertraue keinen 'group-writable' Dateien.  Auch wenn sie gepr&uuml;ft wurden, werden 
       setgid immer noch als wichtige potentielle Sicherheitsl&ouml;cher betrachtet.
       Von daher sollten Informationen, die hiervon ber&uuml;hrt werden nicht als sensitive 
d202 1
a202 1
   <li>Vertraue nicht deinem 'environment' ! Das schlie&szlig;t einfache Dinge wie etwa  
d211 1
a211 1
       Die <code>perlsec</code> man page ist ein gutes Tutorium &uuml;ber solche Probleme.
d213 1
a213 1
   <li>Benutze niemals setuid shell-scripts. Sie sind vererbliche Sicherheitsl&uuml;cken.  
d217 2
a218 2
   <li>Nimm dich vor dem 'dynamic loader' in acht. Wenn du ihn mit setuid laufen l&auml;sst, wird er nur
       vertraensw&uuml;rdigen Libraries trauen, die mit ldconfig gescannt wurden.
d221 2
a222 2
   <li>Dynamic libraries sind schwierig. C++ Code stellt ein &auml;hnliches Problem dar. 
       Grunds&auml;tzlich k&ouml;nnten Libraries einige Dinge basierend auf deinem 'environment' 
d224 1
a224 1
       OpenBSD <code>issetugid</code> k&uuml;mmert sich um dieses Problem vom Standpunkt eines
d230 1
a230 1
   <li><code>__OpenBSD__</code> sollte sparsam benutzt werden, wenn &uuml;berhaupt.
d235 1
a235 1
       aussehen, sind oft unpassend. F&uuml;ge nicht blindlings <code>__OpenBSD__</code>
d237 2
a238 2
       tats&auml;chlich gebraucht wird. Manual pages sind oftmals hilfreich, da sie historische 
       Kommentare enthalten und darstellen, wann ein spezielles Feature in OpenBSD eingef&uuml;gt
d240 1
a240 1
       pr&uuml;fen ist meistens der richtige Weg. Der
d242 1
a242 1
       enth&auml;lt noch weitere Informationen.
d254 1
a254 1
       gerade auf 4.3 BSD oder sp&auml;ter oder etwa SystemVR4 arbeitet.
d256 1
a256 1
       Ein sinnvoller Weg w&auml;re zum Beispiel auf ein bestimmtes System zu testen,
d258 1
a258 1
       <code>HAVE_TCGETATTR</code> zu definieren, und dann mit dem n&auml;chsten System weiterzumachen.
d261 3
a263 3
       <code>-DHAVE_XXX</code> Definitionen zum Makefile hinzuf&uuml;gen. 
       Man k&ouml;nnte das auch selber schreiben oder im configure-Skript testen und es dann automatisch 
       hinzuf&uuml;gen. Als negatives Beispiel, dem man _nicht_ folgen sollte kann der 
d265 2
a266 2
       Die meisten dieser Annahmen sind veraltet und haben nichts mehr mit der Realit&auml;t zu tun:
       POSIX sind n&uuml;tzlicher als alte BSD versus SystemV 
d268 1
a268 1
       Kompatibilit&auml;ts-Bibliotheken unterst&uuml;tzt werden.
d272 1
a272 1
       Und auausserdemszlig;erdem werden dabei Probleme erzeugt, die schwierig zu beheben sind.
d285 2
a286 2
       inklusive OpenBSD, haben einen Standardplatz f&uuml;r diese 'prototypes'.  
       Wahrscheinliche Pl&auml;tze sind etwa <code>unistd.h</code>, <code>fcntl.h</code> oder 
d288 2
a289 2
       Die man page zeigt regelm&auml;&szlig;ig wo die 'prototypes' zu finden sind.
       Du k&ouml;nntest noch eine Runde <code>HAVE_XXX</code> Makros ben&ouml;tigen um die
d291 1
a291 1
       Mal 'includen' k&ouml;nntest, include Dateien haben Aufpasser, die solchen Unfug 
d295 1
a295 1
       'Roll-your-own prototypes' werden nicht funktionieren da sie Typen benutzen k&ouml;nnten,
d299 1
a299 1
       Au&szlig;erdem sind einige Compiler, so wie auch OpenBSD's gcc, 
d303 1
a303 1
   <li>Benutze  nicht den Namen einer Standard-System-Funktion f&uuml;r irgend etwas anderes.
d305 3
a307 3
       rufe diese Funktion &uuml;berall auf.  Wenn du zur Standard-System-Funktion 
       zur&uuml;ckkehren willst, musst du nur deinen Code auskommentieren, und den Namen
       wieder auf die Systemfunktion zur&uuml;ckschreiben. Mach es nicht andersherum.
d334 1
a334 1
       Sie sorgen insbesondere daf&uuml;r, dass <code>/usr/bin</code> und
d340 1
a340 1
       GNU configure benutzt, f&uuml;ge einfach die Zeile
d342 2
a343 2
   <li>Es ist in Ordnung ein erst neuerlich hinzugef&uuml;gtes Feature von
       <code>bsd.port.mk</code> zwingend zu ben&ouml;tigen, da die Leute sowieso  
d345 1
a345 1
       <code>NEED_VERSION</code> ist von nun an hinf&auml;llig.
d348 1
a348 1
       Du kannst die unerw&uuml;nschten Zeilen auskommentieren.
d352 1
a352 1
       ``neuen curses''.  &Auml;ndere:<br>
d355 2
a356 2
       <code>_USE_OLD_CURSES_</code> verf&uuml;gbar
       und zwar vor dem Einbinden von <code>curses.h</code> (f&uuml;r gew&ouml;hnlich 
d362 2
a363 2
       <code>tcgetattr</code> als Synonym fi&uuml;r das &auml;ltere  
       <code>sgtty</code> definiert, aber das ist auf OpenBSD h&ouml;chstens eine 
d366 3
a368 3
       machen sollte. Versuche deine Systemfunktionalit&auml;t richtig hinzubekommen: Du
       willst ja einen Typen, der den Status deines Terminals beh&auml;lt 
       (m&ouml;glicher typedef), du willst eine Funktion die den momentanen Status herausfindet, 
d372 1
a372 1
       nicht, dass du F&auml;lle behandeln musst, bei denen du gar nicht an einem 
d377 1
a377 1
       die das Terminal nicht gleich in allen F&auml;llen 'resettet', nachdem das Programm
d380 4
a383 4
       beinhalten Standardsequenzen f&uuml;r das Kontrollieren von Farb-Terminals.
       Wenn m&ouml;glich benutze diese, kehre auf anderen Systemen auf die ANSI Farb-
       Sequenzen zur&uuml;ck. Trotzdem sind noch nicht alle Terminalbeschreibungen 
       auf dem neuesten Stand, und du musst m&ouml;glicherweise in der Lage sein diese
d385 2
a386 2
       notwendig. Mit Ausnahme von privilegierten Programmen ist es generell m&ouml;glich
       eine termcap Definition durch die <code>TERMCAP></code>-Variable zu &uuml;bersteuern 
d390 1
a390 1
       anderen 'System Calls' ,die in der entsprechenden manpage aufgef&uuml;hrt werden.
d393 1
a393 1
<a href="index.html"><img height="24" width="24" src="../back.gif" border="0" alt="Zur&uuml;ck zur OpenBSD-Hauptseite"></a> 
d399 1
a399 1
$Translation: porting.html,v 1.25 2004/09/23 13:31:45 jufi Exp $
@


1.24
log
@Sync with Steelix CVS
@
text
@d144 1
a144 1
       Korrekter Code, der <code>mkstemp</code> benutzt, schliesst den Source zu
d164 1
a164 1
       deine Rechte zur&uuml;cksetzt. Das schliesst
d202 1
a202 1
   <li>Vertraue nicht deinem 'environment' ! Das schliesst einfache Dinge wie etwa  
d272 1
a272 1
       Und ausserdem werden dabei Probleme erzeugt, die schwierig zu beheben sind.
d288 1
a288 1
       Die man page zeigt regelm&auml;ssig wo die 'prototypes' zu finden sind.
d299 1
a299 1
       Ausserdem sind einige Compiler, so wie auch OpenBSD's gcc, 
d399 1
a399 1
$Translation: porting.html,v 1.24 2004/08/22 20:14:03 grunk Exp $
@


1.23
log
@Sync with Steelix CVS
@
text
@d338 1
a338 1
       <code>${NO_SHARED_LIBS}</code>  definiert ist (Vorsicht: es kann nur nach der 
d346 5
d397 1
a397 1
Originally [OpenBSD: porting.html,v 1.48 ]
d399 1
a399 1
$Translation: porting.html,v 1.23 2004/08/04 17:04:54 jufi Exp $
@


1.22
log
@Sync with Steelix CVS
@
text
@d104 1
a104 3
       dass du auch ihren tag im Makefile bel&auml;sst. Trotz allem ersetze den FreeBSD 	
       <code>&#36;Id&#36;</code> tag mit dem
       <code>&#36;FreeBSD&#36;</code> tag.
d392 1
a392 1
Originally [OpenBSD: porting.html,v 1.47 ]
d394 1
a394 1
$Translation: porting.html,v 1.22 2004/02/21 08:22:21 jufi Exp $
d396 1
a396 1
<br><small>$OpenBSD: porting.html,v 1.47 2004/02/19 03:30:52 nick Exp $</small>
@


1.21
log
@sync with steelix translation CVS
@
text
@d11 1
a11 1
<meta name="copyright" content="This document copyright 1997-2003 by OpenBSD.">
d394 1
a394 1
Originally [OpenBSD: porting.html,v 1.46 ]
d396 1
a396 1
$Translation: porting.html,v 1.21 2003/07/13 13:37:25 jufi Exp $
d398 1
a398 1
<br><small>$OpenBSD: porting.html,v 1.46 2003/06/22 13:24:32 sturm Exp $</small>
@


1.20
log
@
link to german version of diffs.html,
hint by Valentin Gelhorn, thanks !
@
text
@d97 3
d394 1
a394 1
Originally [OpenBSD: porting.html,v 1.45 ]
d396 1
a396 1
$Translation: porting.html,v 1.20 2003/04/15 17:37:58 jufi Exp $
d398 1
a398 1
<br><small>$OpenBSD: porting.html,v 1.45 2003/01/09 22:18:45 miod Exp $</small>
@


1.19
log
@
sync with steelix translation CVS
@
text
@d66 1
a66 1
   der <a href="../porting/diffs.html">Infrastruktur Unterschiede</a>.
d393 1
a393 1
$Translation: porting.html,v 1.19 2003/01/13 22:47:00 jufi Exp $
@


1.18
log
@
sync with steelix translation CVS
@
text
@d1 2
a2 1
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
d5 7
a11 12
<meta http-equiv="Content-Type"
        content="text/html; charset=iso-8859-1">
<meta name="resource-type"
        content="document">
<meta name="description"
        CONTENT="Wie man einen OpenBSD port erzeugt">
<meta name="keywords"
        content="openbsd,ports">
<meta name="distribution"
        content="global">
<meta name="copyright"
       content="This document copyright 1997-2002 by OpenBSD.">
d13 1
a13 1
<link rev="made" HREF="mailto:www@@openbsd.org">
d15 1
a15 1
<body text="#000000" bgcolor="#FFFFFF" link="#23238E">
d82 1
a82 1
  <h3><font color="#0000e0"><a name="Policy">OpenBSD Porting Politik</font></h3>
d108 1
a108 1
  <h3><font color="#0000e0"><a name="Security">Sicherheitsempfehlungen</font></h3>
d227 1
a227 1
  <h3><font color="#0000e0"><a name="Generic">Generische porting Hinweise</font></h3>
d330 1
a330 1
  <h3><font color="#0000e0"><a name="Other">Andere hilfreiche Hinweise</font></h3>
d387 2
a388 2
  <a href="index.html"><img height=24 width=24 src=../back.gif border=0 alt=OpenBSD></a> 
  <a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
d393 1
a393 1
$Translation: porting.html,v 1.18 2003/01/13 17:45:12 jufi Exp $
@


1.17
log
@
sync with badlands translation CVS
@
text
@a351 1
       <code>-lncurses ==&gt; -lcurses</code><br>
d395 1
a395 1
Originally [OpenBSD: porting.html,v 1.44 ]
d397 1
a397 1
$Translation: porting.html,v 1.17 2002/07/14 13:18:19 jufi Exp $
d399 1
a399 1
<br><small>$OpenBSD: porting.html,v 1.44 2002/07/06 09:32:08 pvalchev Exp $</small>
@


1.16
log
@
link to index.html
@
text
@d345 4
a348 3
   <li>Wenn du dich auf ein bestimmtes Feature einer bestimmten Version von
       <code>bsd.port.mk</code> verl&auml;sst, vergiss nicht die Zeile
       <code>NEED_VERSION = x.yy</code> im Makefile.
d396 1
a396 1
Originally [OpenBSD: porting.html,v 1.43 ]
d398 1
a398 1
$Translation: porting.html,v 1.16 2002/06/19 22:15:13 jufi Exp $
d400 1
a400 1
<br><small>$OpenBSD: porting.html,v 1.43 2002/06/18 01:44:06 jsyn Exp $</small>
@


1.15
log
@
sync with badlands translation CVS
@
text
@d3 2
a4 2
 <head>
  <meta http-equiv="Content-Type"
d6 1
a6 1
  <meta name="resource-type"
d8 1
a8 1
  <meta name="description"
d10 1
a10 1
  <meta name="keywords"
d12 1
a12 1
  <meta name="distribution"
d14 7
a20 7
  <meta name="copyright"
        content="This document copyright 1997-2002 by OpenBSD.">
  <title>Das Erzeugen eines OpenBSD ports</title>
  <link rev="made" HREF="mailto:www@@openbsd.org">
 </head>
 <body text="#000000" bgcolor="#FFFFFF" link="#23238E">
  <img height=30 width=141 src=../images/smalltitle.gif alt="[OpenBSD]" >
d395 1
a395 1
Originally [OpenBSD: porting.html,v 1.42 ]
d397 1
a397 1
$Translation: porting.html,v 1.15 2002/05/14 20:01:38 jufi Exp $
d399 1
a399 1
<br><small>$OpenBSD: porting.html,v 1.42 2002/05/12 17:34:30 pvalchev Exp $</small>
@


1.14
log
@
sync with badlands translation CVS.
@
text
@d81 1
a81 1
       <a href="http://www.freebsd.org/porters-handbook/index.html">FreeBSD
d102 1
a102 1
       <a href="#security">Sicherheitssektion</a> auf dieser Seite lesen und verstehen.
d395 1
a395 1
Originally [OpenBSD: porting.html,v 1.41 ]
d397 1
a397 1
$Translation: porting.html,v 1.14 2002/02/22 21:57:55 jufi Exp $
d399 1
a399 1
<br><small>$OpenBSD: porting.html,v 1.41 2002/02/18 23:40:18 rohee Exp $</small>
@


1.13
log
@
sync with badlands translation CVS
@
text
@d64 1
a64 1
   <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&sektion=5">bsd.port.mk(5)</a>.
d395 1
a395 1
Originally [OpenBSD: porting.html,v 1.40 ]
d397 1
a397 1
$Translation: porting.html,v 1.13 2002/01/13 15:11:45 jufi Exp $
d399 1
a399 1
<br><small>$OpenBSD: porting.html,v 1.40 2002/01/13 14:55:37 jufi Exp $</small>
@


1.12
log
@
repair links and sync
@
text
@d15 1
a15 1
        content="This document copyright 1997-1999 by OpenBSD.">
d395 1
a395 1
Originally [OpenBSD: porting.html,v 1.38 ]
d397 1
a397 1
$Translation: porting.html,v 1.12 2001/11/19 19:30:59 jufi Exp $
d399 1
a399 1
<br><small>$OpenBSD: porting.html,v 1.38 2001/11/16 13:34:12 espie Exp $</small>
@


1.11
log
@
sync with badlands translation CVS.
@
text
@d62 1
a62 1
   <li>OpenBSD porting <a href="checklist.html">checklist</a>.
d71 1
a71 1
   <li><a href="porting/libraries.html">Das Benutzen von shared libraries
d75 1
a75 1
   <li><a href="audio-port.html">Das Portieren von Audio-Applikationen auf OpenBSD</a>.
d397 1
a397 1
$Translation: porting.html,v 1.11 2001/11/17 20:14:49 jufi Exp $
@


1.10
log
@sync with badlands translation CVS; work by Paul Weismann
@
text
@d62 14
a75 4
   <li>Die Datei <code>/usr/share/mk/bsd.port.mk</code>.  Das ist das
       System ports Makefile, das am Ende von jeder einzelnen port-Datei
       eingebunden ist. Lies die Kommentare am Anfang jedes Makefiles. 
       Sie geben eine gute Erkl&auml;rung f&uuml;r die verf&uuml;gbaren make-Optionen.
a82 4
   <li>OpenBSD porting <a href="../checklist.html">Checkliste</a>.
   <li>Einige Unterschiede zu anderen BSD port Systemen, gr&ouml;&szlig;tenteils
   eine Zusammenfassung der <a href="../porting/de/diffs.html">Infrastruktur-Unterschiede</a>.
   <li><a href="../audio-port.html">Audio-Anwendungen auf OpenBSD portieren</a>.
d395 1
a395 1
Originally [OpenBSD: porting.html,v 1.37 ]
d397 1
a397 1
$Translation: porting.html,v 1.10 2001/11/14 16:08:15 paul Exp $
d399 1
a399 1
<br><small>$OpenBSD: porting.html,v 1.37 2001/09/10 19:26:32 jufi Exp $</small>
@


1.9
log
@
powerpc.html -> macppc.html
copyright cleanup
@
text
@d29 1
a29 1
   Frage die anderen Leute auf <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>
d33 2
a34 2
   zu kriegen, teile ihm mit, was verbessern kann. Wenn sie nur auf Linux entwickeln und den
   Rest der Unix-Welt ignorieren, versuche ihre Sichtweise etwas zu erweitern.
d37 1
a37 1
   und einem port, der langsam von allen alleine gelassen und nicht mehr benutzt wird.
d46 1
a46 1
   Du kannst ihn entweder auf einen &ouml;ffentlichen FTP oder HTTP Server legen, und seine
d65 1
a65 1
       Sie geben eine gute Erkl&auml;rung f&uuml;r die verfügbaren make-Optionen.
d72 1
a72 1
       Porter's Handbook</a>.  Das ist die FreeBSD porting bible.
d82 1
a82 1
   <li>OpenBSD benutzt <code>/usr/local/etc/rc.d</code> NICHT.<br>
d85 1
a85 1
         f&uuml;r eine bestimmte Maschine sind auch nicht <code>/usr/local</code> abgelegt werden,
d88 3
a90 3
         Au&szlig;erdem ist es OpenBSD Politik niemals Dateien unter 
         <code>/etc</code> automatisch upzudaten.  Ports, die ein spezifisches 
         Boot Setup ben&ouml;tigen sollten den Administrator anweisen ,was zu tun ist, 
d92 1
a92 1
   <li>OpenBSD  komprimiert KEINE man pages.
d107 2
a108 2
  Es gibt viele Sicherheitsprobleme, &uuml;ber die man sich Gedanken man muss. Wenn du nicht 
       absolut sicher bist, was du tust, bitte auf der 
d122 1
a122 1
       bereits normale Userrechte auf deiner Maschine hat k&ouml;nnte Dateien in 
d141 1
a141 1
       Korrekter Code, der <code>mkstemp</code> benutzt schliesst den Source zu
d187 1
a187 1
   <li>Benutze setgid  anstelle von setuid.  Abgesehen von diesen spezifischen Dateien, die von
d195 1
a195 1
       setgid  immer noch als wichtige potentielle Sicherheitsl&ouml;cher betrachtet.
d234 3
a236 3
       tats&auml;chlich gebraucht wird. Manuap pages sind oftmals hilfreich, da sie historische 
       Kommentare enthalten, und darstellen, wann ein spezielles Feature in OpenBSD eingef&uuml;gt
       wurde.  Den numerischen Wert von <code>BSD</code> gegen bekannte Versionen/Zahlen zu 
d238 1
a238 1
       <a href="ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/Packages.txt">the NetBSD package guide</a>
d391 1
a391 1
$Translation: porting.html,v 1.9 2001/09/10 19:45:00 jufi Exp $
@


1.8
log
@
sync with badlands translation CVS.
@
text
@d15 1
a15 1
        content="This document copyright 1997-1999 by the OpenBSD project">
d389 1
a389 1
Originally [OpenBSD: porting.html,v 1.36 ]
d391 1
a391 1
$Translation: porting.html,v 1.8 2001/08/29 06:19:58 jufi Exp $
d393 1
a393 1
<br><small>$OpenBSD: porting.html,v 1.36 2001/08/29 00:04:03 horacio Exp $</small>
@


1.7
log
@
index
@
text
@a105 1
  <a name=security></a>
d389 1
a389 1
Originally [OpenBSD: porting.html,v 1.35 ]
d391 1
a391 1
$Translation: porting.html,v 1.7 2001/07/30 19:21:10 jufi Exp $
d393 1
a393 1
<br><small>$OpenBSD: porting.html,v 1.35 2001/07/27 23:42:52 naddy Exp $</small>
@


1.6
log
@
Sync with badlands translation CVS.
@
text
@d50 11
a60 1
  <h3><font color="#0000e0">Verf&uuml;gbare Porting Information</font></h3>
d80 1
a80 1
  <h3><font color="#0000e0">OpenBSD Porting Politik</font></h3>
d107 1
a107 1
  <h3><font color="#0000e0">Sicherheitsempfehlungen</font></h3>
d226 1
a226 1
  <h3><font color="#0000e0">Generische porting Hinweise</font></h3>
d329 1
a329 1
  <h3><font color="#0000e0">Andere hilfreiche Hinweise</font></h3>
d390 1
a390 1
Originally [OpenBSD: porting.html,v 1.34 ]
d392 1
a392 1
$Translation: porting.html,v 1.6 2001/05/13 20:27:38 jufi Exp $
d394 1
a394 1
<br><small>$OpenBSD: porting.html,v 1.34 2001/05/13 20:16:52 jufi Exp $</small>
@


1.5
log
@
small updates.
@
text
@d380 1
a380 1
Originally [OpenBSD: porting.html,v 1.33 ]
d382 1
a382 1
$Translation: porting.html,v 1.5 2001/05/12 18:38:42 jufi Exp $
d384 1
a384 1
<br><small>$OpenBSD: porting.html,v 1.33 2001/05/12 12:36:21 naddy Exp $</small>
@


1.4
log
@
Another sync.
@
text
@d60 1
a60 1
   <li>Sektion 19.2.5 des
d62 1
a62 1
       Handbook</a>.  Dies ist die FreeBSD Porting Bibel.
d380 1
a380 1
Originally [OpenBSD: porting.html,v 1.32 ]
d382 1
a382 1
$Translation: porting.html,v 1.4 2000/09/12 19:13:04 jufi Exp $
d384 1
a384 1
<br><small>$OpenBSD: porting.html,v 1.32 2000/09/12 00:16:17 deraadt Exp $</small>
@


1.3
log
@
Updated.
@
text
@d380 1
a380 1
Originally [OpenBSD: porting.html,v 1.31 ]
d382 1
a382 1
$Translation: porting.html,v 1.3 2000/09/12 18:27:50 jufi Exp $
@


1.2
log
@
Only new version tags, original typos don't match here.
@
text
@d382 1
a382 1
$Translation: porting.html,v 1.2 2000/07/10 19:58:03 jufi Exp $
d384 1
a384 1
<br><small>$OpenBSD: porting.html,v 1.31 2000/07/10 19:35:43 jufi Exp $</small>
@


1.1
log
@
Some updates and a fresh translation.
@
text
@d380 1
a380 1
Originally [OpenBSD: porting.html,v 1.30 ]
d382 1
a382 1
$Translation: porting.html,v 1.1 2000/07/08 20:22:14 jufi Exp $
d384 1
a384 1
<br><small>$OpenBSD: porting.html,v 1.30 2000/06/30 21:51:02 espie Exp $</small>
@

