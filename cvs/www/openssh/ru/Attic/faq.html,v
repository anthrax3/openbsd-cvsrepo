head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2014.04.01.19.44.55;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2013.01.12.07.47.15;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.29.08.09.40;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.20.06.25.15;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2012.09.15.07.14.29;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.5
log
@give up on translation
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>OpenSSH FAQ</title>
<link rev= "made" href= "mailto:www@@openbsd.org">
<meta name= "resource-type" content= "document">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name= "description"   content= "the OpenSSH FAQ page">
<meta name= "keywords"      content= "OpenSSH,SSH,Secure Shell,faq">
<meta name= "distribution"  content= "global">
<meta name= "copyright"     content= "This document copyright 1999-2010 OpenBSD.">
</head>

<body bgcolor= "#ffffff" text= "#000000" link= "#23238E">
<a href="index.html"><img alt="[OpenSSH]" height="30" width="141" src="../images/smalltitle.gif" border="0"></a>
<p>

<h1>OpenSSH FAQ (Часто задаваемые вопросы)</h1>

<hr>

<blockquote>
<h3><a href= "#1.0">1.0 Что такое OpenSSH?</a></h3>
<ul>
<li><a href= "#1.1">1.1 – Что такое OpenSSH и где я могу скачать её?</a>
<li><a href= "#1.2">1.2 – Почему стоит использовать именно её?</a>
<li><a href= "#1.3">1.3 - Какие операционные системы поддерживаются?</a>
<li><a href= "#1.4">1.4 - Что на счет copyrights, лицензий и патентов?</a>
<li><a href= "#1.5">1.5 - Где я могу получить поддержку?</a>
<li><a href= "#1.6">1.6 - Я нашел ошибку. Где и как я могу сообщить о ней?</a>
</ul>

<h3><a href= "#2.0">2.0 - Общие вопросы</a></h3>
<ul>
<li><a href= "#2.1">2.1 - Почему ssh/scp используют низкие номера портов? Мой фаервол блокирует их.</a>
<li><a href= "#2.2">2.2 - Почему для ssh-клиента установлен setuid root?</a>
<li><a href= "#2.3">2.3 - Почему SSH 2.3 и OpenSSH 2.1.1 вместе работают некорректно?</a>
<li><a href= "#2.4">2.4 - Почему я получаю сообщение об ошибке "dispatch protocol error: type 20"?</a>
<li><a href= "#2.5">2.5 - Старая версия коммерческой SSH шифрует host-ключи при помощи IDEA.</a>
<li><a href= "#2.6">2.6 - Что означают эти предупреждения о длине ключа?</a>
<li><a href= "#2.7">2.7 - X11 и/или агент-переадресации не работают.</a>
<li><a href= "#2.8">2.8 - После обновления OpenSSH не работает поддержка SSH2.</a>
<li><a href= "#2.9">2.9 - sftp/scp не устанавливают соединение, хотя ssh работает нормально.</a>
<li><a href= "#2.10">2.10 - Будет ли добавлена [foo] в scp?</a>
<li><a href= "#2.11">2.11 - Как использовать перенаправление портов (port forwarding)?</a>
<li><a href= "#2.12">2.12 - Мое SSH-соединение зависает или обрывается после N минут бездействия.</a>
<li><a href= "#2.13">2.13 - Как я могу использовать scp для копирования файлов, в имени которых есть двоеточие?</a>
<li><a href= "#2.14">2.14 - Почему OpenSSH показывает свою версию клиенту?</a>
</ul>

<h3><a href= "#3.0">3.0 - Вопросы по поводу портированной версии OpenSSH</a></h3>
<ul>
<li><a href= "#3.1">3.1 - Стрaнные сообщения в лог-файлах по поводу PAM-аутентификации.</a>
<li><a href= "#3.2">3.2 - Не допускается использование пустых паролей при PAM-аутентификации.</a>
<li><a href= "#3.3">3.3 - ssh(1) нужно много времени, чтобы подключиться или войти в систему.</a>
<li><a href= "#3.4">3.4 - Сообщение "Can't locate module net-pf-10" в лог-файлах Linux.</a>
<li><a href= "#3.5">3.5 - Не работает аутентификация при использовании пароля (например, на Slackware 7.0 или Red Hat 6.x)</a>
<li><a href= "#3.6">3.6 - Configure или sshd(8) жалуются на отсутствие поддержки RSA или DSA.</a>
<li><a href= "#3.7">3.7 - Ошибка "scp: command not found".</a>
<li><a href= "#3.8">3.8 - Passphrase не может быть прочитана.</a>
<li><a href= "#3.9">3.9 - Нет 'configure' или поломан "make"</a>
<li><a href= "#3.10">3.10 - ssh зависает при выходе</a>
<li><a href= "#3.11">3.11 - Почему происходит зависание ssh при выходе?</a>
<li><a href= "#3.12">3.12 - X11 forwarding перестал работать после обновления OpenSSH до версии 3.1.</a>
<li><a href= "#3.13">3.13 - После обновления перестали работать некоторые X11 программы.</a>
<li><a href= "#3.14">3.14 - После добавления открытого ключа (public key) в authorized_keys авторизация все равно не работает.</a>
<li><a href= "#3.15">3.15 - Версии OpenSSH и поведение PAM (Pluggable Authentication Modules)</a>
<li><a href= "#3.16">3.16 - Почему "w" или "who" на AIX 5.x не показывает пользователей, вошедьших в систему через ssh?</a>
</ul>

</blockquote>

<hr>

<h2><u><a name= "1.0"></a>1.0 - Что такое OpenSSH?</u></h2>

<h2><a name= "1.1">1.1 - Что такое OpenSSH и где я могу скачать её?</a></h2>

OpenSSH представляет из себя замену таких приложений как telnet, rlogin, и ftp.
В отличие от них, OpenSSH никогда ничего не передает по сети в незашифрованном виде
(тем более логин и пароль), и всегда, перед тем как устанавить новое соединение,
проверяет подлинность пользователя (включая аутентификацию машины), чтобы обеспечить
более надежное и защищенное от прослушивания соединение.

<p>
Проект OpenSSH включает в себя 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1">ssh(1)</a>,
которая заменяет rlogin и telnet, и 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scp&amp;sektion=1">scp(1)</a>,
которая заменяет 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rcp&amp;sektion=1">rcp(1)</a>
и <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp&amp;sektion=1">ftp(1)</a>.
В OpenSSH также добавленны
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1">sftp(1)</a>
и <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&amp;sektion=8">
sftp-server(8)</a>, которые обеспечивают простую передачу файлов. Это основано на 
<a href="../txt/draft-ietf-secsh-filexfer-02.txt">secsh-filexfer</a> IETF проекте.

<p><strong>OpenSSH состоит из следующих программ:</strong>

<ul>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd&amp;sektion=8">sshd(8)</a>
- демон, запускаемый на сервере. Он прослушивает соединения от клиентских машин, и,
после получения запроса на соединение, выполняет аутентификацию и начинает обслуживание
клиента. Его поведение контролируется с помощью конфиг-файла
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd_config&amp;sektion=5">
sshd_config(5)</a></i>.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1">ssh(1)</a>
- это клиентская программа, используемая для входа на другую машину или для выполнения
команд на другой машине. Другое название для этой программы – <i>slogin</i>.
Её настройки находятся в конфиг-файле 
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh_config&amp;sektion=5">
ssh_config(5)</a></i>, а также в личных конфиг-файлах пользователей <i>$HOME/.ssh/config</i>.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scp&amp;sektion=1">scp(1)</a>
- безопасное копирование файлов с одной машины на другую.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keygen&amp;sektion=1">ssh-keygen(1)</a>
- используется для создания ключей (RSA или DSA) аутентификации (хост-ключи и пользовательские
ключи аутентификации).
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-agent&amp;sektion=1">ssh-agent(1)</a>
- агент аутентификации. Используется для хранения RSA-ключей аутентификации.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-add&amp;sektion=1">ssh-add(1)</a>
- используется для регистрации агентом новых ключей.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&amp;sektion=8">sftp-server(8)</a>
- SFTP сервер subsystem.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1">sftp(1)</a>
- программа для безопасной передачи файлов.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keyscan&amp;sektion=1">ssh-keyscan(1)</a>
- программа для сбора ssh public-ключей.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keysign&amp;sektion=8">ssh-keysign(8)</a>
- вспомогательная программа ssh для hostbased-аутентификации.
</ul>

<h3>Загрузка</h3>

<p>
Самая последняя версия OpenSSH включена в текущий дистрибутив
<a href="http://www.openbsd.org/">OpenBSD</a> (устанавливается как часть базовой системы).

<p>
Сегодня большинство других операционных систем включают некоторые версии OpenSSH,
так что большинство пользователей могут сразу же ее использовать. Однако, иногда
включаются довольно старые версии, которые могут не поддерживать последние функции
OpenSSH. В этом случае вы можете установить текущую версию в используемой вами
операционной системе, даже если последняя версия не поддерживается дистрибьютером.
Вы также можете использовать OpenSSH во встроенных приложениях.

<p>
Пользователи других операционных систем должны загрузить и собрать
(compile and install) мультиплатформенную <a href="portable.html">портированную</a> 
версию с наших <a href="portable.html#mirrors">зеркал</a>.

<h2><a name= "1.2">1.2 – Почему стоит использовать именно её?</a></h2>

<p>
OpenSSH это набор инструментов для обеспечения безопасных сетевых подключений.
Вот список поддерживаемых возможностей:

<ul>
	<li>Безопасная система аутентификации. Закрывает несколько дыр в безопасности
            (например, IP, маршрутизация и DNS-спуфинг).

	<li>Усилена система конфиденциальноси. Все каналы связи автоматически и
            прозрачно зашифрованы.

	<li>Безопасные X11-сеансы. Программа автоматически устанавливает DISPLAY на
            сервере и передает данные от X11-приложения через защищенный канал.

	<li>Произвольный TCP/IP-порт может быть перенаправлен через защищенный канал в
            обоих направлениях (например, для электронных кассовых операций).

	<li>Нет необходимости обучения обычных пользователей.

	<li>Никогда не доверяет сети. Доверие на удаленной стороне соединения самое
            минимальное. Минимальное доверие DNS. При RSA-аутентификации не доверяется
            ничего и никому, только закрытому ключу (private key).

	<li>При RSA-аутентификации клиент проверяет подлинность сервера перед каждым
            новым соединением, чтобы обойти троянские кони (путем имитации маршрутизации
            или DNS), а также атак "человек посередине" (man-in-the-middle); сервер также
            проверяет подлиность клиентской машины, прежде, чем подтвердить создание
            соединения при помощи <i>.rhosts</i>- или <i>/etc/hosts.equiv</i>-аутентификации
            (чтобы предотвратить DNS, маршрутизации или IP-спуфинг).

	<li>"Host authentication key" может использоваться администрацией централизованно,
            а также создаваться автоматически при первом подключении к машине.

	<li>Любой пользователь может создать любое количество RSA-ключей для аутентификации.

	<li>На стороне сервера есть свой собственный RSA-ключ, который автоматически
            регенерируется каждый час.

	<li>Агент аутентификации (authentication agent), работающий на ноутбуке или
            Workstation пользователя, может быть использован для хранения RSA-ключей.

	<li>Программное обеспечение может быть установлено и использованно без
            root-привилегий (с ограниченной функциональностью).

	<li>Клиент настраивается с помощью общесистемных и пользовательских файлов
            конфигурации.

	<li>Дополнительное сжатие всех передаваемых по сети данных при помощи gzip
            (в том числе перенаправление X11 и TCP/IP-портов), что может привести к
            значительному ускорению на медленных соединениях.

	<li>Полная замена функциональности rlogin, rsh и rcp.
</ul>

<p>
В настоящее время почти все системы связи в компьютерных сетях не
шифруются. Как следствие, любой, кто имеет доступ к компьютеру,
подключенному к сети, может подключиться к любому каналу связи.
Это делают хакеры, любопытные администраторы, работодатели, преступники,
шпионы (промышленный шпионаж), а также правительство. В следствии
электромагнитного излучения, данные из некоторых каналов связи могут
быть перехваченны даже на расстоянии.

<p>
Когда вы входите в систему (логинитесь), пароль передается по сети в
виде обычного текста. Таким образом, любой "слушатель" может использовать
ваш ​​аккаунт (учетную запись), чтобы делать, что захочет.
Это происходит постоянно по всему миру. Крэкеры запускают программы
на рабочих станциях без ведома их владельцев, просто прослушивают сеть и
собирают пароли. Программ для этого полным-полно в интернете, или они могут
быть написанны компетентным программистом в течение нескольких часов

<p>
Компании имеют коммерческие тайны, патентные заявки, информацию о ценах,
данные о клиентах, данные о персонале, финансовую информацию и т.д.
В настоящее время любой человек с доступом к сети (с любого компьютера
в сети) может слушать все, что происходит в интернет.

<p>
Многие компании не знают, что информация может быть так легко вытянута
​​из сети. Они верят, что их данные надежно защищены, поскольку никто не
знает, что они передают конфиденциальную информацию, или просто потому,
что так много другой информации передается через сеть. Это не самый лучший
подход к политики информационной безопасности.


<h2><a name= "1.3">1.3 - Какие операционные системы поддерживаются?</a></h2>

<p>
Несмотря на то, что OpenSSH разрабатыватеся главным образом на
<a href="http://www.openbsd.org/">OpenBSD</a>, существует много портов и для
других ОС. Проект портированной версии OpenSSH возглавляет
<a href="mailto:djm@@openbsd.org">Damien Miller</a>. Загляните на страницу
<a href="portable.html">http://www.openssh.com/portable.html</a> для знакомства
с этой версией OpenSSH. В список поддерживаемых ОС входят:
<ul>
	<li>OpenBSD
	<li>NetBSD
	<li>FreeBSD
	<li>AIX
	<li>HP-UX
	<li>IRIX
	<li>Linux
	<li>NeXT
	<li>SCO
	<li>SNI/Reliant Unix
	<li>Solaris
	<li>Digital Unix/Tru64/OSF
	<li>Mac OS X
	<li>Cygwin
</ul>

<p>
Список дистрибьютеров, которые включают OpenSSH в свои системы,
вы можете найти <a href="users.html">на этой странице</a>.

<h2><a name= "1.4">1.4 - Что на счет copyrights, лицензий и патентов?</a></h2>
<p>
Разработчики стараются сохранить OpenSSH без какихо-либо патентых или
авторских проблем. Чтобы оставаться свободной для всех, поддержка некоторых
функций не может быть включена в OpenSSH (например, поддержка запатентованных
алгоритмов шифрования).

<p>
OpenSSH не поддерживает никаких патентованных алгоритмов транспортного уровня.
При использовании SSH1 доступны только 3DES и Blowfish. При использовании SSH2
вы можете использовать только 3DES, Blowfish, CAST128, ArcFour и AES.
Запатентованный алгоритм IDEA естественно не поддерживается.

<p>
OpenSSH обеспечивает поддержку протоколов SSH1 и SSH2.

<p>
С тех пор как патент на RSA истек, нет никаких ограничений на использование
RSA-алгоритма, включая OpenBSD.

<h2><a name= "1.5">1.5 - Где я могу получить поддержку?</a></h2>
<p>
Есть много мест, где можно получить помощь. В дополнение к <a href="index.html">
основному сайту OpenSSH</a>, существует множество списков рассылки. Прежде чем
слать письма с вопросами, поищите пожалуйста ответ в архиве рассылки.
Существует большая вероятность того, что этот вопрос уже обсуждался, и ответ 
на него давно уже найден. Письма из рассылки находится в архиве, а чтобы поиск
по нему был еще проще, существует система 
<a href="http://marc.info/?l=openssh-unix-dev&amp;r=1&amp;w=2">marc.info</a>.

<p>
Для получения дополнительной информации о списках рассылки проекта OpenSSH,
загляните на <a href="list.html">эту страницу</a>.

<h2><a name= "1.6">1.6 - Я нашел ошибку. Где и как я могу сообщить о ней?</a></h2>
<p>
Информацию об отправке багрепортов (сообщений об ошибках) вы можете найти
на старнице <a href="report.html">Как сообщить об ошибке в OpenSSH</a>.
<p>

Если вы хотите сообщить об ошибке так или иначе связанной с безопасностью,
свяжитесь с разработчиками через рассылку <a href="mailto:openssh@@openssh.com">
openssh@@openssh.com</a>.

<h2><u><a name= "2.0">2.0 - Общие вопросы</a></u></h2>

<h2>
<a name= "2.1">2.1 - Почему ssh/scp используют низкие номера портов?
Мой фаервол блокирует их.</a></h2>
<p>

Клиент OpenSSH использует низкие номера портов для rhosts- и
rhosts-rsa-аутентификации, поскольку сервер "доверяет" имени пользователя,
предоставленным клиентом. Чтобы обойти это, вы можете добавить в
<i>ssh_config</i>- или <i>~/.ssh/config</i>-файлы эту строку:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b>UsePrivilegedPort no</b>
                </td>
        </tr>
</table>
</blockquote>

<p>
Или вы можете использовать параметр <b>-o</b> во время запуска
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1">
ssh(1)</a> из консоли:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
$ <b>ssh -o "UsePrivilegedPort no" host.com</b>
                </td>
        </tr>
</table>
</blockquote>

<h2>
<a name= "2.2">2.2 - Почему для ssh-клиента установлен setuid root?</a>
</h2>

<p>
Как мы только что сказали в <a href="#2.1">вопросе 2.1</a>,
чтобы иметь возможность использовать низкие номера портов для
<i>rhosts-аутентификации</i>, OpenSSH необходимы права root.
Использование привилегированных портов (с низкими номерами) также
требуется для rhosts-rsa-аутентификации в более старых версиях SSH.

<p>
Кроме того, для <i>rhosts-rsa-аутентификации</i> (в первой версии протокола)
и <i>hostbased-аутентификации</i> (во второй версии), SSH-клиенту необходим
доступ к <i>секретному ключу</i> (private host key) для проверки подлинности
клиентской машины на сервере. Для этого OpenSSH (версии 3,3 и более ранние)
нужен установленный setuid root для файла <code>ssh</code>.
В принципе, если вы не собираетесь использовать эти методы аутентификации,
вы можете убрать его.

<p>
Начиная с OpenSSH версии 3.3, для файла <code>ssh</code> setuid-бит
не установлен по умолчанию. Связанно это с тем, что
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keysign">
ssh-keysign</a>, который используется для доступа к приватному ключу
(private hosts keys), и ssh не используют привилегированных портов (портов
с низкими номерами) по умолчанию. Если вы хотите использовать
привилегированный порт, вы должны вручную установить setuid-бит для
<code>ssh</code>.

<h2>
<a name= "2.3">2.3 - Почему SSH 2.3 и OpenSSH 2.1.1 вместе работают некорректно?</a>
</h2>

<p>
SSH версии 2.3 (и более ранние) имеет проблему с реализацией HMAC.
Их код не поставляет полный блок данных из digest, а вместо этого
всегда предоставляет 128 бит. Если же используются более длинные digests,
то это приводит к конфликтам SSH 2.3 и OpenSSH.

<p>
OpenSSH 2.2.0 видит, что SSH 2.3 имеет эту проблему. В последних версиях SSH
эта ошибка исправлена. Если же вы по той или иной причине используете SSH 2.3,
то просто добавьте в <i>/etc/sshd2_config</i> эту строчку:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b>Mac hmac-md5</b>
               </td>
        </tr>
</table>
</blockquote>

<h2><a name= "2.4">
2.4 - Почему я получаю сообщение об ошибке "dispatch protocol error: type 20"?
</a></h2>

<p>
Были замечены проблемы взаимодействия, и причиной тому является отсутствие
поддержки "session rekeying" в старых версиях OpenSSH. Однако коммерческие
реализации SSH 2.3 договорились по поводу поведения работы этой функции,
что и приводит таперь либо к потери связи, либо к ошибке
<b>Dispatch protocol error: type 20 </b>.
Чтобы решить эту проблему, обновитесь до последней версии OpenSSH, или
отключите поддержку "session rekeying", добавив следующие строки в конфиг
файлы (<i>ssh2_config</i> или <i>sshd2_config</i>) вашего SSH 2.3:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b>RekeyIntervalSeconds 0</b>
                </td>
        </tr>
</table>
</blockquote>

<h2>
<a name= "2.5">
2.5 - Старая версия коммерческой SSH шифрует host-ключи при помощи IDEA.</a></h2>

<p>
Старые версии SSH использовали запатентованный алгоритм для шифрования
<i>/etc/ssh/ssh_host_key</i>. Это привело к проблеме, которая заключатеся
в том, что
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd&amp;sektion=8">
sshd(8)</a> не может прочитать хост-ключ (host key).
Чтобы решить эту проблему, воспользуйтесь командой, которая сконвертирует
ваши ssh_host_key с целью использования 3DES.
<b>ПРИМЕЧАНИЕ:</b> Используйте
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keygen&amp;sektion=1">
ssh-keygen(1)</a> из коммерческой SSH-реализации, а *НЕ* из OpenSSH, как
в примере ниже.

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
# <b>ssh-keygen -u -f /etc/ssh/ssh_host_key</b>
                </td>
        </tr>
</table>
</blockquote>

<h2><a name= "2.6">
2.6 - Что означают эти предупреждения о длине ключа?</a></h2>

<p>
Коммерческая 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keygen&amp;sektion=1">
ssh-keygen(1)</a> содержала ошибку, из-за которой он время от времени
генерировал ключи для аутентификации (RSA или DSA), которые не устанавливали
(unset) по умолчанию Most Significant Bit (MSB). Такие ключи рекламировались
как ключи во всю длину (full-length), но на самом деле они были в 2 раза
короче.

<p>
OpenSSH будет выводить предупреждения при обнаружении таких ключей.
Чтобы избавить себя от этих сообщений, отредактируйте свой <i>known_hosts</i>
и замените неправильную длину ключа (обычно это 1024) на правильную (1023).

<h2><a name= "2.7">2.7 - X11 и/или агент-переадресации не работают.</a></h2>

<p>
Проверьте ваши <i>ssh_config</i> и <i>sshd_config</i>.
Файлы конфигурации по умолчанию отключают агента аутентификации
и X11-перенаправление (X11 forwarding). Чтобы включить ее,
добавьте следующее в <i>sshd_config</i>:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b>X11Forwarding yes</b>
                </td>
        </tr>
</table>
</blockquote>

<p>
а эти строки добавьте в <i>ssh_config</i>:

<blockquote>
<table border=0 width="800">
	<tr>
		<td nowrap bgcolor="#EEEEEE">
<b>ForwardAgent yes</b><br>
<b>ForwardX11 yes</b>
		</td>
	</tr>
</table>
</blockquote>

<p>
Для X11-перенаправления требуется рабочий бинарник
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=xauth&amp;sektion=1">
xauth(1)</a>. В OpenBSD он входит в набор файлов <i>xbase</i>, но, вероятно,
в других системах нужен будет другой пакет. Для портированной версии OpenSSH
xauth долен быть либо найден во время установки/конфигурации или указан с
помощью <b>XauthLocation</b> в sshd_config(5) и ssh_config(5).

<p>
По поводу агентов: есть два разных и несовместимых агента, ускоряющих
механизмы работы протокола SSH2. OpenSSH всегда использовал расширение
оригинальных запросов SSH1-агента, однако некоторые коммерческие продукты
используют другой, закрытый (non-free) протокол перенаправления. Это значит,
что агент перенаправления не может быть использован между OpenSSH и этими
продуктами.

<p>
<b>ПРИМЕЧАНИЕ:</b> Для пользователей Linux Mandrake 7.2: 
Mandrake менят переменную <i>XAUTHORITY</i> из файла <i>/etc/skel/.bashrc</i>
и таким образом домашний каталог любого Bash-пользователя в системе.
Эта переменная меняет поведение OpenSSH и для любой из вышеперечисленных
вариантов, если вы хотите получить рабочую систему, раскомментируйте строку:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b># export XAUTHORITY=$HOME/.Xauthority</b>
                </td>
        </tr>
</table>
</blockquote>

<h2><a name= "2.8">
2.8 - После обновления OpenSSH не работает поддержка SSH2.</a></h2>

<p>
Файлы конфигурации <i>sshd_config</i> или <i>ssh_config</i> могут меняться
от версии к версии. Вы всегда должны проверять эти файлы при обновлении
OpenSSH. После 2.3.0 версии OpenSSH вам нужно добавить следующие строки
в ваш <i>sshd_config</i>:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b>HostKey /etc/ssh_host_dsa_key</b><br>
<b>HostKey /etc/ssh_host_rsa_key</b>
                </td>
        </tr>
</table>
</blockquote>

<h2><a name= "2.9">
2.9 - sftp/scp не устанавливают соединение, хотя ssh работает нормально.
</a></h2>

<p>
Используя sftp и/или scp связь может оборваться, если у вас есть
shell-конфиг (.profile, .bashrc, .chsrc etc.), который показывает
вывод и не интерактивных shell-сеансов (non-interactive sessions).
Этот вывод и является причиной проблемы. Проверить настройки вашего
shell можно этой командой:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<b>ssh yourhost /usr/bin/true</b>
                </td>
        </tr>
</table>
</blockquote>

<p>
Если эта команда что-то выводит, вы должны изменить настройки
вашей shell-оболочки.

<h2><a name= "2.10">2.10 - Будет ли добавлена [foo] в scp?</a></h2>

<p>
Короткий ответ: нет.

<p>
Длинный ответ: scp не стандартизирован. В спецификации указывается,
что именно "делает rcp". Так как команда используется на обоих концах
соединения, то добавление новых функций или опций является риском
нарушения совместимости с другими реализациями.
<p>
Практически вся функциональность, которую мы хотели реализовать,
уже добавленна в sftp. Протокол, на основе которого создается реализация,
<a href="http://www.ietf.org/html.charters/OLD/secsh-charter.html">
стандартизован</a>, поэтому изменение в реализации может отразиться и на
совместимости клиента с сервером.

<h2><a name= "2.11">
2.11 - Как использовать перенаправление портов (port forwarding)?</a></h2>

<p>
Если удаленный сервер работает под управлением sshd(8), то вы можете
построить 'туннель' через ssh. Например, это неплохая идея использовать
туннель для небезопасных POP или SMTP соединений (даже если программное
обеспечение не поддерживает работу с зашифрованными каналами связи).
Туннелирование использует перенаправление портов, чтобы создать соединение
между клиентом и сервером. Клиентское программное обеспечение должно иметь
возможность использовать нестандартный порт для подключения.

<p>
Идея состоит в следующем: пользователь подключается к удаленному компьютеру
(через ssh) и указывает порт, который должен быть использован на клиентской
машине для переадресации подключения к серверу. После этого, на клиентской
машине можно запустить сервис, соединение с которым должно быть зашифровано
(например, Fetchmail, IRC), указав тот же локальный порт. Соединение,
настроенное таким образом, будет ничем иным как туннелем через ssh. По
умолчанию, соединение будут обслуживать запросы только от этого пользователя.

<p>
Самые важные опции для настройки туннелирования являются -L и -R, которые
позволяют пользователю создать соединение; -D, которая позволяет использовать
динамическое перенаправление портов; -g, которая позволяет другим хостам
использовать это соединение/порт; -F, которая запускает ssh в фоновом режиме
после авторизации.
Для получения более подробной информации ознакомьтесь с man-страницей 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1">
ssh(1)</a>.

<p>
Это пример туннелирования IRC-сеанса связи от клиента с адесом 127.0.0.1
(localhost) с удаленным сервером "server.example.com":

<blockquote>
<table border=0 width="800">
	<tr>
		<td nowrap bgcolor="#EEEEEE">
<b>ssh -f -L 1234:server.example.com:6667 server.example.com sleep 10<br>
irc -c '#users' -p 1234 pinky 127.0.0.1</b>
	</td>
	</tr>
</table>
</blockquote>

<p>
Соединение, созданное в этом примере, является туннелем подключения к
IRC-серверу "server.example.com", каналу "#users", используя ник "pinky".
Локальный порт, используемый в данном примере, - 1234. Не имеет значение
какой именно порт используется, если этот порт больше 1023 (не забывайте,
что только root может создавать соединения используя для этого привилегированные
порты), и он не конфликтует с любым другим портом, который уже используется.
Соединение будет передано на порт 6667 на удаленном сервере, так как это
стандартный порт для IRC.

<p>
Команда "sleep 10" используется для задержки перед созданием/установкой
туннеля. Дело в том, что если в течении определенного времени никаких
соединений созданно не будут, то ssh будет закрыт (ssh will exit). 
Если требуется больше времени (более длинная задержка), значение, передаваемое
sleep(1), можно увеличить. Для более подробной информации о функциях,
доступных в вашем shell, смотрите ksh(1) и csh(1).

<p>
ssh также имеет опцию -N, которую удобно использовать для переадресации портов:
если -N не указано, то нет необходимости указывать удаленные команды
("sleep 10" в нашем примере). Однако, использование этой опции заставляет ssh
ждать (в отличие от выхода после того, как удаленная команда будет завершена),
и пользователь должен позаботиться, чтобы вручную завершить (kill(1)) процесс
впоследствии.

<h2><a name= "2.12">
2.12 - Мое SSH-соединение зависает или обрывается после N минут бездействия.
</a></h2>

<p>
Как правило, причиной тому может являться пакетный фильтр PF или NAT-устройство,
которые "timing out" ваше TCP-соединение из-за неактивности. Вы можете включить
<b>ClientAliveInterval</b> в
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd_config&amp;sektion=5">
sshd_config</a></i> (на стороне сервера), или <b>ServerAliveInterval</b> в 
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh_config&amp;sektion=5">
ssh_config</a></i> (клиентская сторона) (последний доступен в OpenSSH версии 3.8
и более новых).

<p>
Включение того или иного варианта и настройка интервала меньше, чем время,
необходимое для тайм-аута сеанса, гарантирует, что связь не оборвется по
этой причине.

<h2><a name= "2.13">2.13 - Как я могу использовать scp для копирования файлов,
в имени которых есть двоеточие?</a></h2>

<b><a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=scp&amp;sektion=1">
scp</a></b> будет интерпретировать часть перед двоеточием как имя удаленного
сервера и попытается подключиться к нему. Чтобы этого избежать, используйте
относительный или абсолютный путь, например:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
$ scp ./source:file sshserver:
                </td>
        </tr>
</table>
</blockquote>

<h2><a name= "2.14">2.14 - Почему OpenSSH показывает свою версию клиенту?
</a></h2>

<p>
OpenSSH, как и большинство реализаций SSH, показывает при подключении
клиенту свое название и версию, например:

</p>

<blockquote>
SSH-2.0-OpenSSH_3.9
</blockquote>

<p>
Эта информация используется клиентом и сервером с целью установки
соединения, использующего совместимые протоколы, т.е. чтобы избежать
различий в реализации, багов или просто отсутствующих возможностей.
Эта функция проверки протоколов нужна для проверки совместимости версий,
потому что старые версии, не поддерживающие многие возможности,
реализованные в последних версиях, все еще широко используются.
</p>

<h2><u>
<a name= "3.0">3.0 - Вопросы по поводу портированной версии OpenSSH</a></u></h2>

<h2><a name= "3.1">
3.1 - Стрaнные сообщения в лог-файлах по поводу PAM-аутентификации.</a></h2>

<p>
Портированная версия OpenSSH будет генерировать ложные сообщения о неудачной
попытке аутентификации при каждом входе, похожие на:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
"<b>authentication failure; (uid=0) -&gt; root for sshd service</b>"
                </td>
        </tr>
</table>
</blockquote>

<p>
Они создаются по причине того, что OpenSSH сначала пытается определить, должен
ли пользователь аутентифицироваться для входа в систему (например, пустой пароль).
К сожалению PAM любит регистрировать все события, связанные с аутентификацией,
и это сообщение не является исключением.

<p>
Если это вас раздражают эти сообщения, или их просто слишком много, установите
"<b>PermitEmptyPasswords no</b>" в <i>sshd_config</i>. Это отключит регистрацию
ошибок по поводу входа в систему, если пароль не установлен. Это значение
установленно по умолчанию, если вы используете прилагаемый файл
<i>sshd_config</i>.

<h2><a name= "3.2">
3.2 - Не допускается использование пустых паролей при PAM-аутентификации.</a></h2>

<p>
Чтобы разрешить использование пустых паролей при PAM-аутентификации
необходимо добавить флаг "nullok" в конец "password checking module"
в файл <i>/etc/pam.d/sshd</i>. Например:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
auth required/lib/security/pam_unix.so shadow nodelay nullok
                </td>
        </tr>
</table>
</blockquote>

<p>
Это должно быть сделано в дополнение к установке
"<b>PermitEmptyPasswords yes</b>" в файле <i>sshd_config</i>.

<p>
Существует одно предостережение по поводу использования пустых паролей
PAM-аутентификации: будет разрешен любой пароль для аутентификации
той или иной учетной записи с пустым паролем. Это сломает проверку,
которую использует 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd&amp;sektion=8">
sshd(8)</a>, чтобы определить, установлен ли для этого аккаунта
пароль вообще, независимо от политики, определенной с помощью 
<b>PermitEmptyPasswords</b>. По этой причине, рекомендуется не добавлять
<b>nullok</b>-директиву в ваш конфигурационный файл, если вы не хотите
использовать пустые пароли.


<h2><a name= "3.3">
3.3 - ssh(1) нужно много времени, чтобы подключиться или войти в систему.
</a></h2>

<p>
Большие задержки (более 10 секунд), как правило, вызваны проблемами с
разрешением имен:

<ul>
<li>Некоторым версиям glibc (например, glibc 2,1, которая поставляется
с Red Hat 6.1) может потребоваться много времени, чтобы преобразовать IPv6-
или IPv4-адрес в доменное имя (resolve). Это можно обойти, используя
параметр <b>AddressFamily inet</b> в файле <i>ssh_config</i>.</li>

<li>
Может быть проблема в поиске DNS (как на стороне клиента, так и на стороне
сервера). Вы можете использовать команду <code>nslookup</code>, чтобы
проверить это, узнав имя машины на другом конце соединения и её IP-адрес.
Вы можете отключить значительную часть поиска (на стороне сервера), задав
<b>UseDNS no</b> в <i>sshd_config</i>.</li>
</ul>

<p>
Задержки менее 10 секунд могут иметь другие причины.

<ul>

<li>Версии OpenSSH до 3.8 имели файл <i>moduli</i> со списком модулей,
которые, хоть и были небольшими по размеру, использовались не эффективно,
что сказывалось на скорости работы sshd. Замена файла <i>moduli</i> может
решить эту проблему (в большинстве случаев этот файл не будет заменен в
процессе обновления и должны быть заменены вручную).</li>

<li>Версии OpenSSH до 3.8 имели проблему в <code>ssh</code>, которая
заключалась в том, что загружалось больше модулей, чем было нужно
(в купе с вышеуказанной проблемой это приводило к еще большему
затормаживанию работы). Обновление клиента до версии 3.8 или выше должно
решить эту проблему.</li>

<li>Если у клиентской или серверной части возникают проблемы с генератором
случайных чисел в ядре (например, Solaris &lt; 9, AIX &lt; 5.2, HP-UX &lt;
11.11), и в системе нет никакой альтернативы (например, 
<a href="ftp://ftp.ayamura.org/pub/prngd/">prngd</a>), возможно, что одна
из <code>ssh-rand-helper</code> программ, ответсвенных за создание
энтропии, висит. Это можно проверить, запустив её в debug-режиме:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
/usr/local/libexec/ssh-rand-helper -vvv
                </td>
        </tr>
</table>
</blockquote>

Причина всех важных/значительных задержек в работе должны быть
определены и устранены, или соответствующие команды должны быть
удалены из <i>ssh_prng_cmds</i>.
</li>

</ul>

<h3>На сколько медленно значит "медленно"?</h3>

В нормальных условиях скорость процесса ssh-авторизации зависит
от скорости процессора клиента и сервера. Для сравнения ниже приведены
примеры соединений для <code>time ssh localhost true</code>, при использовании
1024-битного RSA-ключа. OpenSSH и OpenSSL были собраны при помощи gcc 3.3.x.

<p>
<table>
<tr><th>CPU</th><th>Время (SSHv1)<a href="#3.3fn1">[1]</a></th>
	<th>Время (SSHv2)</th></tr>
<tr><td>170MHz SPARC/sun4m</td><td>0.74 сек</td><td>1.25 сек</td></tr>
<tr><td>236MHz HPPA/8200<a href="#3.3fn2">[2]</a></td><td>0.44 сек</td>
	<td>0.79 сек</td></tr>
<tr><td>375MHz PowerPC/604e</td><td>0.38 сек</td><td>0.51 сек</td></tr>
<tr><td>933MHz VIA Ezra</td><td>0.34 сек</td><td>0.44 сек</td></tr>
<tr><td>2.1GHz Athlon 2600+</td><td>0.14 сек</td><td>0.22 сек</td></tr>
</table>

<br>

<a name="3.3fn1">[1]</a> Протокол SSHv1 быстрее, но в плане криптостойкости
слабее, чем SSHv2.<br>

<a name="3.3fn2">[2]</a> На момент написания статьи, gcc генерирует
относительно медленный код для HPPA для RSA и операций Диффи-Хеллмана
(смотрите
<a href= "http://gcc.gnu.org/bugzilla/show_bug.cgi?id=7625">gcc bug #7625</a>
и <a href="http://marc.info/?l=openssh-unix-dev&amp;m=102646106016694">
обсуждение в рассылке openssh-unix-dev</a>).

<h2><a name= "3.4">
3.4 - Сообщение "Can't locate module net-pf-10" в лог-файлах Linux.</a></h2>

<p>
Ядро Linux пытается подключить (при помощи modprobe) модуль, для семейства
протоколов 10 (IPv6). Либо загрузите соответствующий модуль ядра, добавив
адрес к модулю в файл <i>/etc/modules.conf</i>, или отключите IPv6 в
<i>/etc/modules.conf</i>.

<p>
По непонятным причинам файл <i>/etc/modules.conf</i> может называться
<i>/etc/conf.modules</i>.


<h2><a name= "3.5">3.5 - Не работает аутентификация при использовании
пароля (например, на Slackware 7.0 или Red Hat 6.x)</a></h2>

<p>
Если пароль правильный, но войти в систему все равно не получается, скорее
всего дело в том, что система настроена на использование MD5-типа паролей, но 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=crypt&amp;sektion=3">
crypt(3)</a>-функция, используемая sshd, не понимает их.

<p>
Информация о таких учетных записях в файлах <i>/etc/passwd</i> или
<i>/etc/shadow</i> будет начинаться с <b>$1$</b>. Если сбой аутентификации
(проверки подлинности пароля) просходит для новых учетных записей, или для
которых недавно был изменен пароль, но при этом старые учетные записи будут
работать по-прежднему (пользователи по-прежднему могут входить в систему без
проблем), то это (использование MD5-типа паролей) скорее всего и является
причиной проблемы.

<p>
Основной причиной являются некоторые версии OpenSSL, которые используют
crypt(3)-функции, которые не понимают MD5-пароли. Можно попоробовать
настроить OpenSSH, но не всегда эти попытки являются успешными.

<p>
Итак, есть несколько вариантов решений:

<ul>
<li>
<p>
Включение поддержки MD5-паролей в процессе сборки sshd.

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
./configure --with-md5-passwords [Optionen]
                </td>
        </tr>
</table>
</blockquote>

Тут не должно возникнуть никаких проблем, даже если вы используете
оба типа шифрования: sshd будет выбрать правильный алгоритм для каждой
учетной записи автоматически.

<li>
<p>
Если ваша система имеет отдельную libcrypt-библиотеку (какую имеет,
к примеру, седьмая версия Slackware), то вы можете вручную добавить
-lcrypt к LIBS-списку, что приведет к её использованию вместо OpenSSL:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
LIBS=-lcrypt ./configure [Optionen]
                </td>
        </tr>
</table>
</blockquote>

<li>
<p>
Если ваша платформа поддерживает PAM, то вы можете настроить sshd
использовать его (см. <a href= "#3.15" >раздел 3.15</a>).
Это значит, что демон не будет проверять пароли сам, а будет перекладывать
эту работу на настроенные PAM-модули.

</ul>

<h2><a name= "3.6">
3.6 - Configure или sshd(8) жалуются на отсутствие поддержки RSA или DSA.</a></h2>

<p>
Убедитесь, что ваша OpenSSL-библиотека была собрана с поддержкой RSA или DSA
(внутренне или при помощи RSAREF).


<h2><a name= "3.7">3.7 - Ошибка "scp: command not found"</a></h2>

<p>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scp&amp;sektion=1">
scp(1)</a> должена быть в стандартном PATH-пути по умолчанию на клиенте и сервере.
Возможно, вам придется использовать опцию <b>--with-default-path</b> для поиска
пути на сервере. Эта опция перезаписывает PATH, который используется по умолчанию,
поэтому вам нужно указать все текущие каталоги на вашем пути, как и где вы
установили scp. Например:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
$ <b>./configure --with-default-path=/bin:/usr/bin:/usr/local/bin:/path/to/scp</b>
                </td>
        </tr>
</table>
</blockquote>

<p>
Обратите внимание, что конфигурация администратора сервера будет иметь более
высокий приоритет, чем изменения при помощи опции <b>--with-default-path</b>.
Это будет включать в себя PATH в <i>/etc/profile</i>, PATH в
<i>/etc/environment</i> в AIX, или (для 3.7p1 и выше) установка PATH или
SUPATH в <i>/etc/default/login</i> в Solaris или  Reliant Unix.



<h2><a name= "3.8">3.8 - Passphrase не может быть прочитана.</a></h2>

<p>
В некоторых ОС устанавлен неправильный режим для <i>/dev/tty</i>,
в результате чего чтение паролей происходит неправильно, и мы получаем следующую
ошибку:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
You have no controlling tty.  Cannot read passphrase.
                </td>
        </tr>
</table>
</blockquote>

<p>
Решением этой проблемы будет перенастройка <i>/dev/tty</i> в режим 0666,
а также написание отчета об ошибке дистрибьютеру вашей ОС.

<h2><a name= "3.9">3.9 - Нет 'configure' или поломан "make"</a></h2>

<p>
Если в архиве, который вы скачали, нет 'configure'-файла, или "make"
при попытке сборки выдает ошибку "missing seperator", вы, вероятней всего,
скачали OpenSSH версию для OpenBSD и пытается скомпилировать её на другой
платформе. Пожалуйста, загляните <a href="portable.html">на страницу
портированной версии</a>.


<h2><a name= "3.10">3.10 - ssh зависает при выходе</a></h2>

<p>
OpenSSH может зависнуть при выходе. Это может произойти, когда запущен
активный процесс в фоновом режиме. Это, как известно, происходит в Linux
и HP-UX. Проблема может быть проверена, выполнив следующие действия:

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
$ <b>sleep 20 &amp; exit</b>
                </td>
        </tr>
</table>
</blockquote>

Попробуйте использовать вместо этого:
<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
$ <b>sleep 20 &lt; /dev/null &gt; /dev/null 2&gt;&amp;1 &amp;</b>
                </td>
        </tr>
</table>
</blockquote>

<p>

Решением этой проблемы для bash-пользователей будет добавление
<b>"shopt -s huponexit"</b> в /etc/bashrc или ~/.bashrc.
В противном случае, обратитесь к man-странице вашей shell-оболочки,
чтобы выяснить как включить отправку HUP-сигнала для активации запущенных
процессов. См. <a href="http://bugzilla.mindrot.org/show_bug.cgi?id=52">
bug #52</a>, где описываются некоторые другие обходные пути.

<h2><a name= "3.11">
3.11 - Почему происходит зависание ssh при выходе?</a></h2>

<p>
При запускке
<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
$ <b>ssh host command</b>
                </td>
        </tr>
</table>
</blockquote>
ssh <b>должен</b> зависнуть, потому что он ожидает некоторую информацию
от запущенного процесса. Другими словами, ssh зависает:
<ul>
<li>
пока она не будет уверен, что <code>command</code> не ожидает никаких
других опций (not need more input).
<li>
пока он не будет уверен, что <code>command</code> не будет больше
ничего выводить (not produce more output).
<li>
пока <code>command</code> не завершится, потому что sshd нужно знать
значение (exit status), которое вернет <code>command</code> ssh.
</ul>
<p>

<h2><a name= "3.12">3.12 - X11 forwarding перестал работать после
обновления OpenSSH до версии 3.1.</a></h2>

Начиная с OpenSSH 3.1, sshd сервер X11-переадресации (X11-forwarding server)
слушает localhost по умолчанию; см. sshd опцию <b>X11UseLocalhost</b> для
настройки его поведения (вернуться к конфигурации, которая была до обновления),
если ваши старые X11-клиенты не работают с этой конфигурацией.<p>

Вообще, X11-клиенты, использующие X11 R6, должны работать с настройками по
умолчанию. Некоторые производители, включая HP, используют X11-клиены с R6- и
R5-библиотеками, поэтому некоторые клиенты будут работать, а некоторые нет.
Это также касается и HP-UX 11.X.<p>

<h2><a name= "3.13">
3.13 - После обновления перестали работать некоторые X11 программы.</a></h2>

<p>
Как указано в <a href="../txt/release-3.8">информации к релизу 3.8</a>,
<code>ssh</code> теперь использует "untrusted X11 cookies" по умолчанию.
Его предыдущее поведение может быть восстановлено путем установки опции
<b>ForwardX11Trusted yes</b> в файле <i>sshd_config</i>.

<p>
Возможные ошибки, связанные с этим:<br>
<code>BadWindow (invalid Window parameter)<br>
BadAccess (attempt to access private resource denied)<br>
X Error of failed request:  BadAtom (invalid Atom parameter)<br>
Major opcode of failed request:  20 (X_GetProperty)<br></code>

<h2><a name= "3.14">3.14 - После добавления открытого ключа (public key)
в authorized_keys авторизация все равно не работает.</a></h2>

<p>
Обычно это связано с правами доступа к файлам в $HOME, $HOME/.ssh
или $HOME/.ssh/authorized_keys, которые более "доступные", чем sshd
позволяет по умолчанию.

<p>
В этом случае, это может быть решено при помощи выполнения следующих
команд на сервере.
<blockquote>
<table border=0 width="800">
<tr>
  <td nowrap bgcolor="#EEEEEE">
$ <b>chmod go-w $HOME $HOME/.ssh</b><br>
$ <b>chmod 600 $HOME/.ssh/authorized_keys</b><br>
$ <b>chown `whoami` $HOME/.ssh/authorized_keys</b><br>
  </td>
</tr>
</table>
</blockquote>

<p>
Если это невозможно по той или иной причине, то альтернативым методом
будет добавление <b>StrictModes no</b> в файл <i>sshd_config</i>,
однако к этому методу прибегать не рекомендуется.

<h2><a name= "3.15">
3.15 - Версии OpenSSH и поведение PAM (Pluggable Authentication Modules)</a></h2>

Портированная версия OpenSSH имеет опцию, которая может быть установленна
на этапе конфигурирования с целью использования 
<a href="http://www.opengroup.org/onlinepubs/008329799/">PAM</a>
(Pluggable Authentication Modules).

<blockquote>
<table border=0 width="800">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
./configure --with-pam [Optionen]
                </td>
        </tr>
</table>
</blockquote>

Для полноценного использования PAM, эта опция должна быть использована
во время сборки. Поведение во время выполнения, при сборке с PAM, варьируется
в зависимости от версии портированных OpenSSH, а в более поздних
версиях она также должна быть включена установкой опции <b>UsePAM</b> как
<b>yes</b> в файле <i>sshd_config</i>.

<p>
Поведение соответствующих вариантов аутентификации PAM (при включении её
поддержки во время сборки) кратко показано в следующей таблице.

<p>
<table border="1">
  <tr> <th>Версия</th> <th>UsePAM</th> <th>PasswordAuthentication</th> <th>ChallengeResponseAuthentication</th> </tr>
  <tr>
    <td>&lt;=3.6.1p2</td>
    <td>Не поддерживается </td>
    <td>Используется PAM </td>
    <td>Используется PAM, если включена <b>PAMAuthenticationViaKbdInt</b></td>
  </tr>
  <tr>
    <td>3.7p1 - 3.7.1p1</td>
    <td>По умолчанию - <b>yes</b></td>
    <td>Не используется PAM</td>
    <td>Используется PAM, если включена <b>UsePAM</b></td>
  </tr>
  <tr>
    <td>3.7.1p2 - 3.8.1p1</td>
    <td>По умолчанию - <b>no</b></td>
    <td>Не используется PAM <a href="#3.15fn1">[1]</a></td>
    <td>Используется PAM, если включена <b>UsePAM</b></td>
  </tr>
  <tr>
    <td>3.9p1</td>
    <td>По умолчанию - <b>no</b></td>
    <td>Используется PAM, если включена <b>UsePAM</b></td>
    <td>Используется PAM, если включена <b>UsePAM</b></td>
  </tr>
</table>
<p>

<a name= "3.15fn1">[1]</a> Некоторые дистрибьютеры, такие как например
RedHat/Fedora, перенесли PasswordAuthentication из версии 3.9p1 в
свой 3.8x пакет. Если вы используете пакет, предоставленный тем
или иным дистрибьютером, ознакомьтесь с документацией касательно
используемых им опций по умолчанию.

<p>
Портированная версия OpenSSH все еще имеет проблемы с некоторыми
PAM-модулями, однако мы надеемся, что в будущем ситуация улучшится.
На момент 3.9p1-релиза известными проблемами являются:

<ul>
  <li>Модули, опираясь на данные, полученные от module-private
      (например, pam_dhkeys, pam_krb5, AFS) могут не правильно
      устанавливать "credentials" (bug
      <a href="http://bugzilla.mindrot.org/show_bug.cgi?id=688">#688</a>)
      при проверке подлинности с помощью <b>ChallengeResponseAuthentication</b>.
      <b>PasswordAuthentication</b> в версиях 3.9p1 и выше должен работать.
</ul>

Вы можете также ознакомиться с
<a href="http://bugzilla.mindrot.org/buglist.cgi?product=Portable+OpenSSH&amp;bug_status=RESOLVED&amp;bug_status=NEW&amp;bug_status=ACCEPTED&amp;component=PAM+support">
известными PAM-багами</a>.

<h2><a name= "3.16">3.16 - Почему "w" или "who" на AIX 5.x не показывает
пользователей, вошедьших в систему через ssh?</a></h2>

Между AIX 4.3.3 и AIX 5.x есть различия в формате wtmp-структуры.
Она сильно изменилась. Это означает, что бинарники ssh, созданные в AIX 4.x
не смогут корректно работать в AIX 5.x. Это можно исправить путем простой
перекомпиляции sshd демона в системе AIX 5.x.

<hr>
<a href="index.html"><img height=24 width=24 src="../back.gif" border=0 alt=OpenSSH></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>
<!--
Originally [OpenBSD: faq.html,v 1.113 ]<br>
$Translation: faq.html,v 1.4 2013/01/12 00:13:38 alex Exp $<br>
-->
$OpenBSD: faq.html,v 1.4 2013/01/12 07:47:15 ajacoutot Exp $
</small>

</body>
</html>
@


1.4
log
@Sync with Steelix CVS
@
text
@d1269 1
a1269 1
$OpenBSD$
@


1.3
log
@Sync with Steelix CVS
@
text
@d37 1
a37 1
<li><a href= "#2.3">2.3 - Почему SSH 2.3 и OpenSSH 2.1.1 вместе работают некоректно?</a>
d356 1
a356 1
Как мы только что сказали в вопросе 2,1,
d382 1
a382 1
<a name= "2.3">2.3 - Почему SSH 2.3 и OpenSSH 2.1.1 вместе работают некоректно?</a>
d820 1
a820 1
<b>UseDNS no</b> в <i>sshd_config</i>.
d1267 1
a1267 1
$Translation: faq.html,v 1.3 2012/12/29 00:26:41 alex Exp $<br>
@


1.2
log
@Sync with Steelix CVS
@
text
@d23 1
a23 1
<h3><a href= "#1.0">1.0 Что такое OpenSSH и где я могу скачать её?</a></h3>
d25 1
a25 1
<li><a href= "#1.1">1.1 – Что такое OpenSSH и где я могу загрузить её?</a>
d28 1
a28 1
<li><a href= "#1.4">1.4 - Что на счет Copyrights, Benutzung и патентов?</a>
d35 14
a48 14
<li><a href= "#2.1">2.1 - Warum benutzt ssh/scp Verbindungen auf den unteren Ports? Meine Firewall blockiert diese.</a>
<li><a href= "#2.2">2.2 - Warum ist der ssh-Client setuid root?</a>
<li><a href= "#2.3">2.3 - Warum hat SSH 2.3 Probleme beim Interoperieren mit OpenSSH 2.1.1?</a>
<li><a href= "#2.4">2.4 - Warum gibt OpenSSH Folgendes aus: Dispatch protocol error: type 20</a>
<li><a href= "#2.5">2.5 - Alte Versionen des kommerziellen SSH verschlüsseln Hostkeys mit IDEA.</a>
<li><a href= "#2.6">2.6 - Was sind das für Warnmeldungen über Schlüssellängen?</a>
<li><a href= "#2.7">2.7 - X11- und/oder Agent-Weiterleitung funktioniert nicht.</a>
<li><a href= "#2.8">2.8 - Nach dem Upgrade auf OpenSSH habe ich keine SSH2-Unterstützung mehr.</a>
<li><a href= "#2.9">2.9 - sftp/scp kann keine Verbindung aufbauen, obwohl ssh funktioniert.</a>
<li><a href= "#2.10">2.10 - Werdet ihr [foo] zu scp hinzufügen?</a>
<li><a href= "#2.11">2.11 - Wie verwende ich Portweiterleitung?</a>
<li><a href= "#2.12">2.12 - Meine ssh-Verbindung friert ein oder steigt nach N Minuten Inaktivität aus.</a>
<li><a href= "#2.13">2.13 - Wie rufe ich scp auf, um eine Datei zu kopieren, die einen Doppelpunkt beinhaltet?</a>
<li><a href= "#2.14">2.14 - Warum teilt OpenSSH seine Version den Clients mit?</a>
d53 16
a68 16
<li><a href= "#3.1">3.1 - Unechte PAM-Authentifikationsmeldungen in den Logdateien.</a>
<li><a href= "#3.2">3.2 - Leere Passwörter sind bei der PAM-Authentifikation nicht erlaubt.</a>
<li><a href= "#3.3">3.3 - ssh(1) benötigt sehr lange zum Verbinden oder zum Einloggen</a>
<li><a href= "#3.4">3.4 - »Can't locate module net-pf-10«-Meldungen im Log unter Linux.</a>
<li><a href= "#3.5">3.5 - Passwortauthentifikation funktioniert nicht (z.&nbsp;B. unter Slackware 7.0 oder Red Hat 6.x)</a>
<li><a href= "#3.6">3.6 - Configure oder sshd(8) beschweren sich über fehlende RSA-Unterstützung</a>
<li><a href= "#3.7">3.7 - »scp: command not found«-Fehler</a>
<li><a href= "#3.8">3.8 - Kann die Passphrase nicht lesen</a>
<li><a href= "#3.9">3.9 - configure fehlt oder make versagt</a>
<li><a href= "#3.10">3.10 - Hängt beim Verlassen von ssh</a>
<li><a href= "#3.11">3.11 - Wieso hängt ssh beim Beenden?</a>
<li><a href= "#3.12">3.12 - Ich habe ein Upgrade auf OpenSSH 3.1 durchgeführt und dann ging die X11-Weiterleitung nicht mehr.</a>
<li><a href= "#3.13">3.13 - Ich habe ein Upgrade auf OpenSSH 3.8 durchgeführt und dann gingen einige X11-Programme nicht mehr.</a>
<li><a href= "#3.14">3.14 - Ich habe meinen öffentlichen Schlüssel in authorized_keys kopiert, aber Publickey-Authentifizierung funktioniert immer noch nicht.</a>
<li><a href= "#3.15">3.15 - OpenSSH-Versionen und das Verhalten von PAM.</a>
<li><a href= "#3.16">3.16 - Warum zeigen weder »w« noch »who« unter AIX 5.x Benutzer an, die über ssh eingeloggt sind?</a>
d75 1
a75 1
<h2><u><a name= "1.0"></a>1.0 - Что такое OpenSSH и где я могу скачать её?</u></h2>
d77 1
a77 1
<h2><a name= "1.1">1.1 - Что такое OpenSSH и где я могу загрузить её?</a></h2>
d148 3
a150 3
Пользователи других операционных систем должны загрузить и собрать (compile and install)
мультиплатформенную <a href="portable.html">портированную</a> версию с наших
<a href="portable.html#mirrors">зеркал</a>.
d155 2
a156 3
OpenSSH ist eine Sammlung von Werkzeugen, die dir hilft, deine
Netzwerkverbindungen sicherer zu machen. Hier ist eine Liste der
Funktionalitäten:
d158 6
d165 5
a169 17
<ul>
	<li>Starke Authentifikation.  Schließt verschiedene Sicherheitslöcher (z.&nbsp;B. IP-, ,routing'-, und DNS-,spoofing').
	<li>Verbesserte Privatsphäre.  Alle Verbindungen werden automatisch und transparent verschlüsselt.
	<li>Sichere X11-Sitzungen.  Das Programm setzt DISPLAY auf der Servermaschine automatisch und leitet alle X11-Verbindungen über den sicheren Kanal weiter.
	<li>Willkürliche TCP/IP-Ports können durch den verschlüsselten Kanal in beide Richtungen gelenkt werden (z.&nbsp;B. für e-cash-Transaktionen).
	<li>Für normale Benutzer wird keine Schulung und kein Training benötigt.
	<li>Vertraut nie dem Netzwerk. Minimales Vertrauen auf der Gegenseite der Verbindung. Minimales Vertrauen gegenüber den Domain Name Servern. Pure RSA-Authentifikation vertraut nichts und niemandem, bis auf den ,private key'.
	<li>Der Client authentifiziert die Servermaschine am Beginn jeder Verbindung mit RSA, um ,trojanischen Pferden' (durch ,routing'- oder DNS-,spoofing') und ,man-in-the-middle'-Angriffen vorzubeugen, und der Server tut das Gleiche mit der Clientmaschine bevor er <i>.rhosts</i>- oder <i>/etc/hosts.equiv</i>-Authentifikation erlaubt (um DNS-, ,routing'- oder IP-,spoofing' vorzubeugen).
	<li>Die ,host authentication key'-Distribution kann zentral laufen, wird jedoch automatisch, sobald die erste Verbindung zur Maschine geöffnet wird.
	<li>Jeder Benutzer kann beliebig viele RSA-Authentifikationsschlüssel zur eigenen Verwendung erzeugen.
	<li>Das Serverprogramm hat seinen eigenen RSA-Schlüssel, der jede Stunde automatisch neu erzeugt wird.
	<li>Ein Authentifikationsagent, der auf dem Laptop oder der Workstation des Benutzers läuft, kann benutzt werden, um die RSA-Authentifikationsschlüssel des Anwenders zu halten.
	<li>Die Software kann auch ohne root-Privilegien installiert und benutzt werden (mit eingeschränkter Funktionalität).
	<li>Der Client ist in systemweiten und benutzerspezifischen Konfigurationsdateien anpassbar.
	<li>Optionale Kompression aller Daten mittels gzip (inklusive ,forwarded X11'- und TCP/IP-Daten), was zu bedeutenden Beschleunigungen auf langsamen Verbindungen führen kann.
	<li>Kompletter Ersatz für rlogin, rsh und rcp.
</ul>
d171 1
a171 10
<p>
Zurzeit werden fast alle Übertragungen in Computernetzwerken
unverschlüsselt durchgeführt. Als Konsequenz kann jeder, der
Zugriff auf irgendeine Maschine in diesem Netzwerk hat, alle Verbindungen
abhören. Das wird auch von Hackern, neugierigen Administratoren,
Arbeitgebern, Kriminellen, Industriespionen und Regierungen so
durchgeführt.
Einige Netzwerke senden derartig viel elektromagnetische Strahlung ab,
dass Daten sogar in großer Entfernung noch aufgefangen werden
können.
d173 3
d177 6
a182 9
<p>
Wenn du dich einloggst, wird dein Passwort im Klartext übertragen.
Daher kann dann jeder Lauscher deinen Account zu jeglicher Tat benutzen.
Es gibt weltweit viele Zeugnisse dafür, dass Cracker auf dem Rechner
eines Opfers unbemerkt ein Programm gestartet haben, welches ohne Wissen des
Anwenders einfach nur das Netzwerk belauscht und Passwörter gesammelt
hat. Programme, die das tun, gibt es im Internet oder können von einem
kompetenten Programmierer innerhalb weniger Stunden selbst geschrieben
werden.
d184 2
d187 1
a187 6
<p>
Firmen haben Geschäftsgeheimnisse, Patentanträge in Vorbereitung,
Preisinformationen, Informationen über Vertragspartner, Kundendaten,
Personendaten, Finanzdaten etc. Zurzeit kann jeder mit Zugriff auf das
Netzwerk (jede Maschine im Netzwerk) alles belauschen, was im Netzwerk
vor sich geht, und das noch ohne die normalen Zugriffsbeschränkungen.
d189 2
d192 2
a193 6
<p>
Vielen Firmen ist nicht bewusst, dass Informationen so einfach aus ihrem
Netzwerk gesammelt werden können. Sie vertrauen darin, dass ihre
Daten sicher sind, da niemand wissen kann, dass dort vertrauliche
Informationen kursieren, oder auch, weil dort so viele andere Daten
übertragen werden. Dies ist keine sichere Einstellung.
d195 2
d198 2
a199 1
<h2><a name= "1.3">1.3 - Welche Betriebssysteme werden unterstützt?</a></h2>
d201 3
a203 8
<p>
Obwohl OpenSSH unter <a href="http://www.openbsd.org/">OpenBSD</a> entwickelt
wird, gibt es eine breite Palette an Portierungen auf andere Betriebssysteme.
Die portable Version von OpenSSH wird von
<a href="mailto:djm@@openbsd.org">Damien Miller</a> geleitet. Einen
schnellen Überblick über die portable Version von OpenSSH gibt
dir <a href="portable.html">http://www.openssh.com/portable.html</a>.
Betriebssysteme, die zurzeit unterstützt werden, sind:
d205 2
d208 41
d267 2
a268 2
Eine Liste der Anbieter, die OpenSSH in ihre Distributionen einbinden,
befindet sich auf der <a href="users.html">OpenSSH-Benutzerseite</a>.
d270 1
a270 1
<h2><a name= "1.4">1.4 - Was ist mit Copyrights, Benutzung und Patenten?</a></h2>
d272 4
a275 4
Die OpenSSH Entwickler haben sehr hart versucht, OpenSSH frei
von Patent- oder Copyrightproblemen zu halten. Dazu mussten einige
Optionen aus OpenSSH entfernt werden. Nämlich die Unterstützung
für patentierte Algorithmen.
d278 4
a281 5
OpenSSH unterstützt keinerlei patentierte Transportalgorithmen.
Im SSH1-Modus sind nur 3DES und Blowfish möglich.
Im SSH2-Modus können nur 3DES, Blowfish, CAST128, Arcfour und AES
ausgewählt werden. Der patentierte IDEA-Algorithmus wird nicht
unterstützt.
d284 1
a284 2
OpenSSH bietet Unterstützung für sowohl das SSH1- als auch das
SSH2-Protokoll.
d287 2
a288 2
Seit das RSA-Patent ausgelaufen ist, gibt es keinerlei Beschränkungen
mehr für Software, die den RSA-Algorithmus benutzen, inklusive OpenBSD.
d290 1
a290 1
<h2><a name= "1.5">1.5 - Wo sollte ich um Hilfe fragen?</a></h2>
d292 6
a297 6
Es gibt mehrere Stellen, die du um Hilfe bitten kannst. Zusätzlich
zur <a href="index.html">OpenSSH-Webseite</a> gibt es
mehrere Mailinglisten, in denen du dein Glück versuchen kannst.
Bevor du das tust, durchsuche bitte alle Mailinglisten-Archive um
zu sehen, ob deine Frage vielleicht schon beantwortet wurde. Die
OpenSSH-Mailingliste wurde archiviert und steht in durchsuchbarer Form unter
a298 1
zur Verfügung.
d301 2
a302 3
Mehr Informationen über das Abonnieren von OpenSSH-bezogenen
Mailinglisten gibt es unter
<a href="list.html">OpenSSH-Mailinglisten</a>.
d306 2
a307 2
Информацию об отправке багрепортов (сообщений об ошибках) вы можете найти на старнице
<a href="report.html">Как сообщить об ошибке в OpenSSH</a>.
d314 1
a314 1
<h2><u><a name= "2.0">2.0 - Allgemeine Fragen</a></u></h2>
d316 3
a318 1
<h2><a name= "2.1">2.1 - Warum benutzt ssh/scp Verbindungen auf den unteren Ports?</a></h2>
d320 5
a324 4
Der OpenSSH-Client benutzt die unteren Ports für rhosts- und
rhosts-rsa-Authentifikation, da der Server dem Benutzernamen vertrauen muss,
den der Client liefert. Um das zu umgehen, kannst du das Beispiel weiter unten
in deine <i>ssh_config</i>- oder <i>~/.ssh/config</i>-Datei kopieren.
d337 3
a339 4
Oder du kannst diese Option auf der Kommandozeile angeben, indem du die
Option <b>-o</b> des
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1">ssh(1)</a>-Kommandos
benutzt.
d351 44
a394 43
<h2><a name= "2.2">2.2 - Warum ist der ssh-Client setuid root?</a></h2>

<p>
In Verbindung mit der vorhergehenden Frage (<a href="#2.1">2.1</a>)
braucht OpenSSH root-Autorität, um sich an die unteren und privilegierten
Ports binden zu können, um dann eine <i>rhosts-Authentifikation</i>
durchzuführen. Genauso notwendig ist dieser privilegierte Port
für rhosts-rsa-Authentifikation zu älteren SSH-Versionen.

<p>
Zusätzlich gilt sowohl für <i>rhosts-rsa-Authentifikation</i>
(in Protokollversion 1) als auch für <i>hostbasierte Authentifikation</i>
(in Protokollversion 2), dass der ssh-Client Zugang zum
,<i>private host key</i>' braucht, um die Clientmaschine am Server
anzumelden.
OpenSSH-Versionen vor 3.3 benötigten ein gesetztes setuid-Bit für die
Binärdatei von <code>ssh</code>, um das zu erreichen, aber du kannst das Bit
löschen, wenn du diese Authentifizierungsmethoden nicht
benutzen willst.

<p>
Beginnend mit OpenSSH 3.3 ist <code>ssh</code> standardmäßig nicht
setuid. <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keysign">ssh-keysign</a>
wird benutzt, um die privaten Hostschlüssel auszulesen, und ssh benutzt
standardmäßig keine privilegierten Quellports. Wenn du
doch einen benutzen willst, musst du das setuid-Bit von <code>ssh</code>
per Hand setzen.

<h2><a name= "2.3">2.3 - Warum hat SSH 2.3 Probleme beim Interoperieren mit OpenSSH 2.1.1?</a></h2>

<p>
SSH 2.3 und frühere Versionen haben einen Fehler in ihrer
HMAC-Implementation. Ihr Code hat nicht die komplette Ausgabe des Datenblocks
von der Auswahl bereitgestellt, sondern stattdessen eben nur 128 Bits.
Bei längeren Anfragen konnte dann SSH 2.3 eben nicht mit OpenSSH
zusammenarbeiten.

<p>
OpenSSH 2.2.0 erkennt, dass SSH 2.3 diesen Fehler hat. In
zukünftigen Versionen von SSH wird dieser Fehler behoben sein.
Alternativ kannst du das folgende in deine <i>/etc/sshd2_config</i> von
SSH 2.3 einfügen.
d406 3
a408 1
<h2><a name= "2.4">2.4 - Warum gibt OpenSSH Folgendes aus: Dispatch protocol error: type 20</a></h2>
d411 8
a418 10
Probleme bei der Zusammenarbeit treten auf, weil ältere Versionen
von OpenSSH noch keine Unterstützung für ,session rekeying' hatten.
Das kommerzielle SSH 2.3 versucht diese Funktionalität abzulehnen, und es kann
zum Einfrieren der Verbindung kommen, oder die Fehlermeldung
,<b>Dispatch protocol error: type 20 </b>' kann zu lesen sein.
Das Problem wird entweder durch ein Upgrade auf eine aktuelle
OpenSSH-Version oder Abschalten des ,rekeying' durch Hinzufügen des
folgenden in die <i>ssh2_config</i> oder <i>sshd2_config</i> vom
kommerziellen SSH 2.3 behoben.

d430 16
a445 13
<h2><a name= "2.5">2.5 - Alte Versionen des kommerziellen SSH verschlüsseln Hostkeys mit IDEA.</a></h2>

<p>
Die alten Versionen von SSH haben einen patentierten Algorithmus benutzt,
um ihren <i>/etc/ssh/ssh_host_key</i> zu verschlüsseln. Das Problem
manifestiert sich darin, dass der
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd&amp;sektion=8">sshd(8)</a>
seinen Hostschlüssel nicht lesen kann. Um das Problem zu lösen, benutze
das Kommando weiter unten, um deinen ssh_host_key zu 3DES zu konvertieren.
<b>HINWEIS:</b> Benutze das
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keygen&amp;sektion=1">ssh-keygen(1)</a>-Programm
von dem kommerziellen SSH-Produkt und *NICHT* OpenSSH für
das Beispiel weiter unten.
d457 2
a458 1
<h2><a name= "2.6">2.6 - Was sind das für Warnungen über Schlüssellängen?</a></h2>
d461 7
a467 7
Das
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-keygen&amp;sektion=1">ssh-keygen(1)</a>
des kommerziellen SSH-Programms hat einen Fehler beinhaltet, der dazu
führte, dass es von Zeit zu Zeit ,Pubkey'-Authentifikationsschlüssel (RSA oder
DSA) generiert hat, deren ,Most Significant'-Bit (MSB) nicht
gesetzt war. Solche Schlüssel wurden zwar als ,mit voller Länge'
angekündigt, waren aber die Hälfte der Zeit über kleiner als angekündigt.
d470 3
a472 4
OpenSSH wird Warnungen ausgeben, wenn es solchen Schlüsseln begegnet.
Um diese Warnungen loszuwerden, passe deine <i>known_hosts</i>-Datei an und
ersetze die falsche Schlüssellänge (normalerweise ,1024') mit
der richtigen (normalerweise ,1023').
d474 1
a474 1
<h2><a name= "2.7">2.7 - X11- und/oder Agent-Weiterleitung funktioniert nicht.</a></h2>
d477 4
a480 4
Prüfe deine <i>ssh_config</i> und <i>sshd_config</i>. Die
voreingestellten Konfigurationsdateien schalten den Authentifikationsagenten
und X11-Weiterleitung ab. Füge die Zeilen unten in die <i>sshd_config</i>
ein, um sie zu aktivieren:
d493 1
a493 1
und füge die folgenden Zeilen in die <i>ssh_config</i> ein:
d507 21
a527 25
X11-Weiterleitung setzt eine funktionierende <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=xauth&amp;sektion=1"
>xauth(1)</a>-Binary voraus. Unter OpenBSD befindet sie sich im
<i>xbase</i>-Dateiset, was auf anderen Plattformen jedoch nicht der
Fall sein muss. Für die portable OpenSSH muss xauth entweder während
dem configure-Aufruf gefunden werden oder später mittels
<b>XauthLocation</b> in der sshd_config(5) und ssh_config(5)
angegeben werden.

<p>
Hinweis zur Agenten-Interoperabilität: Es gibt zwei unterschiedliche
und inkompatible Agentweiterleitung-Mechanismen innerhalb des
SSH2-Protokolls. OpenSSH hat immer eine Erweiterung der originalen
SSH1-Agent-Anfragen genutzt, jedoch verwenden einige kommerzielle
Produkte ein anderes, nicht freies Agentweiterleitungsprotokoll.
Dies bedeutet, dass Agentweiterleitung nicht zwischen OpenSSH und
diesen kommerziellen Produkten genutzt werden kann.

<p>
<b>HINWEIS:</b> Benutzer von Linux Mandrake 7.2: Mandrake modifiziert
die <i>XAUTHORITY</i>-Umgebungsvariable in <i>/etc/skel/.bashrc</i>
und damit das Heimatverzeichnis jedes Bash-Benutzers. Diese Variable wird
von OpenSSH gesetzt und daher muss für die oben genannten
Optionen die folgende Zeile auskommentiert werden:

d539 2
a540 1
<h2><a name= "2.8">2.8 - Nach dem Upgrade auf OpenSSH habe ich keine SSH2-Unterstützung mehr.</a></h2>
d543 4
a546 5
Die Dateien <i>sshd_config</i> oder <i>ssh_config</i> können von
Version zu Version verändert werden. Du solltest immer nach solchen
Änderungen Ausschau halten, wenn du auf eine neue Version von OpenSSH
upgradest. Nach OpenSSH 2.3.0 musst du das folgende in deine
<i>sshd_config</i> einfügen:
d559 3
a561 1
<h2><a name= "2.9">2.9 - sftp/scp kann keine Verbindung aufbauen, obwohl ssh funktioniert.</a></h2>
d564 5
a568 5
sftp und/oder scp können beim Aufbauen der Verbindung Probleme haben,
wenn du eine Shellinitialisierung (.profile, .bashrc, .chsrc etc.) hast,
die Ausgaben für nicht interaktive Sitzungen produziert. Diese Ausgabe
verwirrt den sftp/scp-Client. Hiermit kannst du prüfen, ob deine
Shell das tut:
d581 2
a582 2
Wenn das Kommando oben irgendeine Art von Ausgabe produziert, musst du
deine Shellinitialisierung modifizieren.
d584 1
a584 1
<h2><a name= "2.10">2.10 - Werdet ihr [foo] zu scp hinzufügen?</a></h2>
d587 1
a587 1
Kurze Antwort: Nein.
d590 4
a593 6
Lange Antwort: scp ist nicht standardisiert. Die Beschreibung, die einer
Spezifikation am nächsten kommt, ist: »Was rcp macht«. Da das selbe Kommando
auf beiden Seiten einer Verbindung benutzt wird, bedeutet das Hinzufügen
von Funktionalitäten oder Optionen das Risiko von Inkompatibilitäten
mit anderen Implementationen.

d595 5
a599 5
Neue Funktionalitäten sind eher in sftp wahrscheinlich, da das Protokoll
standardisiert (na ja, ein
,<a href="http://www.ietf.org/html.charters/OLD/secsh-charter.html">
draft standard</a>') und erweiterbar ist und Client sowie Server
voneinander getrennt sind.
d601 2
a602 1
<h2><a name= "2.11">2.11 - Wie verwende ich Portweiterleitung?</a></h2>
d605 7
a611 8
Wenn sshd(8) auf dem Server auf der Gegenseite läuft, kann es möglich
sein, bestimmte Dienste durch ssh zu ,tunneln'. Das kann wünschenswert
sein, um beispielsweise POP- und SMTP-Verbindungen zu verschlüsseln,
selbst wenn die Software keine eigene Unterstützung für
verschlüsselte Verbindungen hat. Das Tunneln verwendet Portweiterleitung,
um eine Verbindung zwischen dem Client und dem Server herzustellen. Die
Client-Software muss hierfür in der Lage sein, auf einen nicht standardisierten
Port verbinden zu können.
d614 7
a620 8
Die Idee dahinter ist, dass der Client sich mit dem entfernten System über
ssh verbindet und angibt, welcher Port auf der Maschine des Clients dazu
verwendet werden soll, Verbindungen zum Server weiterzuleiten. Danach ist es
möglich, die Dienste, die verschlüsselt werden sollen (z.&nbsp;B. fetchmail,
irc), auf dem Client mit der Angabe des gleichen Ports, der an ssh
übergeben wurde, zu starten, und die Verbindung wird durch ssh getunnelt.
Standardmäßig wird das System, das das Weiterleiten durchführt, nur
eigene Verbindungen zulassen.
d623 8
a630 7
Die wichtigsten Optionen zum Tunneln sind die Optionen -L und -R, welche dem
Benutzer das Portweiterleiten erlauben, die Option -D, welche das dynamische
Portweiterleiten erlaubt, die Option -g, die es anderen Hosts erlaubt,
Portweiterleitung zu benutzen, und die Option -f, welche ssh zuweist, nach
der Authentifizierung im Hintergrund weiterzuarbeiten. Lies die <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1"
>ssh(1)</a>-Handbuchseite, um weitere Details zu erfahren.
d633 2
a634 2
Dies ist ein Beispiel für eine getunnelte IRC-Sitzung von der Clientmaschine
,127.0.0.1' (localhost) zum entfernten Server ,server.example.com':
d648 43
a690 47
Dies tunnelt eine Verbindung zum IRC-Server server.example.com und tritt mit
dem Nick ,pinky' dem Channel ,#users' bei. Der lokale Port, der in diesem
Beispiel verwendet wurde, ist 1234. Es tut nichts zur Sache, welcher Port
benutzt wird, so lange er größer ist als 1023 (bedenke, nur root
kann Sockets auf privilegierten Ports öffnen) und keine Störung
mit bereits verwendeten Ports auftritt. Die Verbindung wird zum Port 6667
auf dem entfernten Server weitergeleitet, da das der Standardport für
IRC-Dienste ist.

<p>
Der Remote-Befehl ,sleep 10' wurde angegeben, um dem Dienst, der getunnelt
werden soll, eine gewisse Zeit (10 Sekunden in diesem Beispiel) zu geben, um
zu starten. Wenn in der angegebenen Zeit keine Verbindung aufgebaut wurde,
wird ssh sich beenden. Falls mehr Zeit benötigt wird, kann der sleep(1)-Wert
entsprechend erhöht werden oder alternativ könnte das oben
aufgelistete Beispiel als eine Funktion in die Benutzershell eingefügt
werden. Siehe ksh(1) und csh(1) für weitere Details über
benutzerdefinierte Funktionen.

<p>
ssh besitzt des Weiteren die Option -N, welche praktisch für das
Portweiterleiten ist: Wenn -N übergeben wurde, ist es nicht notwendig, einen
Remote-Befehl (»sleep 10« in dem Beispiel oben) anzugeben. Allerdings
führt die Benutzung dieser Option dazu, dass ssh für immer wartet
(anstatt zu beenden, wenn ein Remote-Befehl ausgeführt wurde), sodass
der Benutzer darauf achten muss, den Prozess hinterher manuell mit kill(1)
zu beenden.

<h2><a name= "2.12">2.12 - Meine ssh-Verbindung friert ein oder steigt nach N
Minuten Inaktivität aus.</a></h2>

<p>
Das ist üblicherweise das Resultat eines Paketfilters oder einem
NAT-Gerät, das die TCP-Verbindung wegen Inaktivität auslaufen
lässt. Du kannst <b>ClientAliveInterval</b> in der <i><a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd_config&amp;sektion=5">
sshd_config</a></i> des Servers aktivieren oder <b>ServerAliveInterval</b> in
der <i><a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh_config&amp;sektion=5">
ssh_config</a></i> des Clients ermöglichen (die letzte Option ist in
OpenSSH 3.8 und neuer verfügbar).

<p>
Das Aktivieren einer der beiden Optionen und das Setzen des Intervalls, das
kürzer als die benötigte Zeit ist, um die Verbindung auslaufen zu
lassen, sorgen dafür, dass die Verbindung in der Verbindungstabelle des
Gerätes ,frisch' gehalten wird.
d692 2
a693 2
<h2><a name= "2.13">2.13 - Wie rufe ich scp auf, um eine Datei zu kopieren,
die einen Doppelpunkt beinhaltet?</a></h2>
d697 3
a699 4
scp</a></b> interpretiert den Teil vor dem Doppelpunkt als Namen des
entfernten Servers und versucht, eine Verbindung zu diesem aufzubauen. Um
das zu verhindern, greife auf die Datei mit relativer oder absoluter
Pfadangabe zu, z.&nbsp;B.:
d711 2
a712 1
<h2><a name= "2.14">2.14 - Warum teilt OpenSSH seine Version den Clients mit?</a></h2>
d715 3
a717 2
OpenSSH, wie die meisten SSH-Implementationen, teilt seinen Namen und seine
Version den Clients mit, wenn sie eine Verbindung aufbauen, z.&nbsp;B.
d725 6
a730 5
Diese Information wird von den Clients und Servern verwendet, um
Protokollkompatibilitätskniffe zu aktiveren, die veränderte, fehlerhafte
oder fehlende Funktionen in der Implementation, mit der sie reden,
zu umgehen. Dieser Protokollfunktionstest ist weiterhin nötig, weil noch
immer Versionen mit Inkompatibilitäten im Umlauf sind.
d733 2
a734 1
<h2><u><a name= "3.0">3.0 - Fragen zum portablen OpenSSH</a></u></h2>
d736 2
a737 1
<h2><a name= "3.1">3.1 - Unechte PAM-Authentifikationsmeldungen in den Logdateien.</a></h2>
d740 2
a741 3
Die portable Version von OpenSSH generiert unechte misslungene
Authentifikationsmeldungen bei jedem Login, etwa wie:

d754 19
a772 20
Diese werden erzeugt, weil OpenSSH zuerst versucht herauszufinden, ob
der Anwender eine Authentifikation zum Login benötigt (z.&nbsp;B. leeres Passwort).
Dummerweise logt PAM alle Authentifikationversuche,
inklusive diesem hier.

<p>
Wenn es dich zu sehr stört, setze
»<b>PermitEmptyPasswords no</b>« in <i>sshd_config</i>. Das
wird die Meldung stilllegen, allerdings auf Kosten dessen, dass es nicht
mehr möglich ist, sich in Accounts mit leeren Passwörtern
einzuloggen. Das ist im übrigen bereits der Standard, wenn du die
mitgelieferte <i>sshd_config</i>-Datei benutzt.

<h2><a name= "3.2">3.2 - Leere Passwörter sind bei der PAM-Authentifikation nicht erlaubt.</a></h2>

<p>
Um leere Passwörter in einer OpenSSH-Version zu erlauben, die mit
PAM erzeugt wurde, musst du das ,nullok'-Flag an das Ende des
Password-Checking-Moduls in der <i>/etc/pam.d/sshd</i>-Datei
setzen. Zum Beispiel:
d785 2
a786 3
Das muss zusätzlich zum Setzen von
»<b>PermitEmptyPasswords yes</b>« in der
<i>sshd_config</i>-Datei geschehen.
d789 10
a798 9
Es gibt einen Fallstrick beim Benutzen leerer Passwörter mit
PAM-Authentifikation: PAM wird jegliches Passwort erlauben, wenn ein Account
mit einem leeren Passwort authentifiziert wird. Das macht den Check, den
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sshd&amp;sektion=8">sshd(8)</a>
benutzt, um zu prüfen, ob der Account ein Passwort gesetzt hat,
wirkungslos und umgeht ebenso die Richtlinie, die von
<b>PermitEmptyPasswords</b> gesetzt wurde. Aus diesem Grund raten wir
davon ab, die <b>nullok</b>-Direktive in deiner PAM-Konfigurationsdatei
zu setzen, es sei denn, du willst leere Passwörter explizit erlauben.
d801 3
a803 1
<h2><a name= "3.3">3.3 - ssh(1) benötigt sehr lange zum Verbinden oder zum Einloggen</a></h2>
d806 3
a808 2
Große Verzögerungen (mehr als 10 Sekunden) werden normalerweise
durch Probleme mit der Namensauflösung verursacht:
d810 11
a820 14
<li>Einige Versionen der glibc (insbesondere glibc 2.1, die mit Red Hat 6.1
ausgeliefert wurde) können einen langen Zeitraum benötigen, um
,IPv6 zu IPv4'-Adressen von Domänennamen aufzulösen. Das kann
umgangen werden, indem die Option <b>AddressFamily inet</b> in der
<i>ssh_config</i> eingetragen wird.</li>

<li>Es könnte ein DNS-Auflösungsproblem vorliegen, entweder beim
Client oder beim Server. Du kannst den <code>nslookup</code>-Befehl auf dem
Client und dem Server verwenden, um den Namen und die IP-Adresse der Gegenseite
auflösen zu lassen. Lass zusätzlich den Namen auf dem Server
auflösen, den der Client beim Auflösen der IP-Adresse des Servers
zurückgegeben hat. Du kannst die meisten Lookups serverseitig durch
das Hinzufügen von <b>UseDNS no</b> in <i>sshd_config</i>
deaktivieren.</li>
d824 1
a824 1
Verzögerungen unter 10 Sekunden können andere Ursachen haben.
d828 18
a845 22
<li>OpenSSH-Versionen vor 3.8 hatten eine <i>moduli</i>-Datei mit moduli,
die kleiner waren als die, nach denen OpenSSH Ausschau hielt, und als Resultat
würde sshd am Ende moduli verwenden, die beachtlich größer
wären als die, die angefragt wurden, was auf Kosten der Geschwindigkeit
geschah. Das Ersetzen der <i>moduli</i>-Datei wird das Problem lösen
(bedenke, dass diese Datei bei einem Upgrade in den meisten Fällen nicht
ausgetauscht wird und daher manuell ersetzt werden muss).</li>

<li>OpenSSH-Versionen vor 3.8 hatten einen Fehler in <code>ssh</code>, der
dazu führte, dass es größere moduli anforderte als erwartet
(was dann, in Kombination mit dem oben genannten Problem, in erheblichen
Geschwindigkeitseinbußen endete).
Ein Upgrade des Clients auf Version 3.8 oder höher wird das Problem
beheben.</li>

<li>Falls entweder der Server oder der Client keinen kernelbasierten
Zufallszahlengenerator besitzen (z.&nbsp;B. Solaris &lt; 9, AIX &lt; 5.2, HP-UX
&lt; 11.11) und kein Ersatz verfügbar ist (z.&nbsp;B. <a href=
"ftp://ftp.ayamura.org/pub/prngd/">prngd</a>), ist es möglich, dass ein
Programm, das von <code>ssh-rand-helper</code> zum Generieren vom Entropy
aufgerufen wird, hängt. Das kann ermittelt werden, indem es im Debug-Modus
ausgeführt wird:
d857 3
a859 3
Alle beachtlichen Verzögerungen sollten untersucht und behoben,
oder aber die entsprechenden Befehle aus <i>ssh_prng_cmds</i> entfernt
werden.
d864 6
a869 6
<h3>Wie langsam ist ,langsam'?</h3>
Unter normalen Umständen ist die Geschwindigkeit des SSH-Logins
abhängig von der CPU-Leistung des Clients und Servers. Zum Vergleich
folgen typische Verbindungszeiten für <code>time ssh localhost
true</code> mit einem 1024-Bit-RSA-Schlüssel auf einem ansonsten
ungenutzten System. OpenSSH und OpenSSL wurden mit gcc 3.3.x compiliert.
d873 8
a880 8
<tr><th>CPU</th><th>Zeit (SSHv1)<a href="#3.3fn1">[1]</a></th>
	<th>Zeit (SSHv2)</th></tr>
<tr><td>170MHz SPARC/sun4m</td><td>0.74 Sek</td><td>1.25 Sek</td></tr>
<tr><td>236MHz HPPA/8200<a href="#3.3fn2">[2]</a></td><td>0.44 Sek</td>
	<td>0.79 Sek</td></tr>
<tr><td>375MHz PowerPC/604e</td><td>0.38 Sek</td><td>0.51 Sek</td></tr>
<tr><td>933MHz VIA Ezra</td><td>0.34 Sek</td><td>0.44 Sek</td></tr>
<tr><td>2.1GHz Athlon 2600+</td><td>0.14 Sek</td><td>0.22 Sek</td></tr>
d885 2
a886 2
<a name="3.3fn1">[1]</a> Das SSHv1 Protokoll ist zwar schneller, aber
kryptographisch schwächer als SSHv2.<br>
d888 3
a890 2
<a name="3.3fn2">[2]</a> Zu dem Zeitpunkt des Schreibens generiert gcc relativ
langsamen Code auf HPPA für RSA- und Diffie-Hellman-Operationen (siehe
d892 2
a893 3
und <a
href="http://marc.info/?l=openssh-unix-dev&amp;m=102646106016694">
Diskussion auf openssh-unix-dev</a>).
d895 2
a896 1
<h2><a name= "3.4">3.4 - »Can't locate module net-pf-10«-Meldungen im Log unter Linux.</a></h2>
d899 4
a902 4
Der Linux-Kernel sucht (via modprobe) nach der Protokollfamilie 10 (IPv6).
Lade entweder das passende Kernelmodul, gib den korrekten Alias in
<i>/etc/modules.conf</i> an oder schalte IPv6 in <i>/etc/modules.conf</i> ab.

d905 2
a906 2
Aus irgendeinem blödsinnigen Grund kann
<i>/etc/modules.conf</i> auch <i>/etc/conf.modules</i> heißen.
d909 2
a910 1
<h2><a name= "3.5">3.5 - Passwortauthentifikation funktioniert nicht (z.&nbsp;B. unter Slackware 7.0 oder Red Hat 6.x)</a></h2>
d913 4
a916 6
Falls das Passwort das korrekte Passwort ist, und der Login weiterhin
verwehrt bleibt, liegt die Ursache normalerweise darin, dass das
System zwar mit MD5-Typ-Passwörtern arbeitet, aber die
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=crypt&amp;sektion=3"
>crypt(3)</a>-Funktion, die von sshd verwendet wird, diese nicht
verstehen kann.
d919 7
a925 6
Betroffene Passwörter haben eine Passwortzeichenkette in
<i>/etc/passwd</i> oder <i>/etc/shadow</i>, die mit <b>$1$</b> beginnt.
Falls die Passwortauthentifikation für neue Accounts oder Accounts
mit Passwörtern, die kürzlich aktualisiert wurden, fehlschlägt, aber
mit alten Accounts funktioniert, dann ist dies wahrscheinlich das
Problem.
d928 3
a930 5
Der Grund hierfür ist, dass einige Versionen von OpenSSL eine
crypt(3)-Funktion haben, die keine MD5-Passwörter versteht, und die
,link'-Reihenfolge von sshd führt dazu, dass OpenSSLs crypt(3) und nicht
das vom System genutzt wird. OpenSSHs configure versucht dies
zu korrigieren aber ist damit nicht immer erfolgreich.
d933 1
a933 1
Es gibt einige mögliche Lösungen:
d938 1
a938 2
Aktiviere sshds eingebaute Unterstützung für MD5-Passwörter während
der Erzeugungsphase.
d950 3
a952 3
Dies ist sogar dann sicher, wenn du beide Verschlüsselungstypen
verwendest, da sshd den korrekten Algorithmus für jeden Account
automatisch auswählt.
d956 3
a958 3
Wenn dein System eine separate libcrypt-Bibliothek hat (z.&nbsp;B.
Slackware 7), dann kannst du manuell -lcrypt zur LIBS-Liste
einfügen, sodass es statt OpenSSLs verwendet wird:
d972 5
a976 4
Wenn deine Plattform PAM unterstützt, könntest du sshd so konfigurieren,
dass es dieses verwendet (siehe <a href= "#3.15" >Sektion 3.15</a>). Das
bedeutet, dass sshd Passwörter nicht selbst überprüfen wird, sondern es
an die konfigurierten PAM-Module übergibt.
d979 2
a980 1
<h2><a name= "3.6">3.6 - Configure oder sshd(8) beschweren sich über fehlende RSA- oder DSA-Unterstützung</a></h2>
d983 2
a984 2
Stelle sicher, dass deine OpenSSL-Bibliotheken mit eingebauter RSA- oder
DSA-Unterstützung erzeugt wurden, entweder intern oder durch RSAref.
d987 1
a987 1
<h2><a name= "3.7">3.7 - »scp: command not found«-Fehler</a></h2>
d990 6
a995 7
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scp&amp;sektion=1">scp(1)</a>
muss sich im Standard-PATH sowohl auf dem Client als auch auf dem Server
befinden. Möglicherweise musst du die Option <b>--with-default-path</b>
angeben, um einen angepassten Pfad für die Suche auf dem
Server angeben zu können. Diese Option ersetzt den Standardpfad, sodass
du sowohl alle bisherigen Verzeichnisse in deinem Pfad angeben musst als auch
das Verzeichnis, in dem scp installiert ist. Zum Beispiel:
d1008 9
a1016 8
Bedenke, dass die Konfiguration des Administrators des Servers Vorrang
gegenüber der Option <b>--with-default-path</b> hat. Das beinhaltet
das Rücksetzen von PATH in <i>/etc/profile</i>, PATH in
<i>/etc/environment</i> unter AIX oder (für 3.7p1 und höher) das
Setzen von PATH oder SUPATH in <i>/etc/default/login</i> unter Solaris oder
Reliant Unix.

<h2><a name= "3.8">3.8 - Kann die Passphrase nicht lesen</a></h2>
d1019 3
a1021 3
Einige Betriebssysteme setzen <i>/dev/tty</i> mit falschen Modi, was
zum Fehler beim Lesen von Passwörtern mit folgender Fehlermeldung
führt:
d1034 2
a1035 4
Die Lösung hierzu ist, die Berechtigungen von <i>/dev/tty</i> auf 0666 zu
setzen und dann das ganze deinem Betriebssystem-Hersteller als Fehler zu
melden.

d1037 1
a1037 1
<h2><a name= "3.9">3.9 - configure fehlt oder make versagt</a></h2>
d1040 5
a1044 5
Wenn es keine configure-Datei in deiner tar.gz-Datei gibt, die du
heruntergeladen hast, oder make mit einem ,missing seperator'-Fehler
versagt, hast du vermutlich die OpenBSD-Distribution heruntergeladen
und versuchst, sie auf einer anderen Plattform zu kompilieren.
Bitte verwende die <a href="portable.html">portable Version</a>.
d1047 1
a1047 1
<h2><a name= "3.10">3.10 - Hängt beim Verlassen von ssh</a></h2>
d1050 3
a1052 3
OpenSSH kann beim Beenden hängen bleiben. Das kann passieren, wenn
es einen aktiven Hintergrundprozess gibt. Linux und HP-UX sind
hierfür bekannt. Das Problem kann hiermit verifiziert werden:
d1064 1
a1064 1
Versuche stattdessen das hier zu benutzen:
a1075 7
Ein Umgehen des Problems für bash-Anwender ist mittels eines
Einfügens von <b>"shopt -s huponexit"</b> in entweder /etc/bashrc oder
~/.bashrc möglich. Ansonsten konsultiere die Handbuchseite deiner Shell um
eine Option zu finden, mit der man aktiven Jobs ein HUP-Signal senden kann,
wenn man sie verlässt. Siehe <a
href="http://bugzilla.mindrot.org/show_bug.cgi?id=52">bug #52</a>
für andere Möglichkeiten, das Problem umgehen zu können.
d1077 9
a1085 1
<h2><a name= "3.11">3.11 - Wieso hängt ssh beim Beenden?</a></h2>
d1088 1
a1088 1
Beim Ausführen von
d1098 2
a1099 1
<b>muss</b> ssh hängen bleiben, da es zu warten hat
d1102 2
a1103 2
bis es sicherstellen kann, dass <code>command</code> keine weiteren
Eingaben benötigt.
d1105 2
a1106 2
bis es sicherstellen kann, dass <code>command</code> keine weitere
Ausgaben zurückgibt.
d1108 2
a1109 2
bis <code>command</code> beendet ist, da der sshd den Exitstatus
von <code>command</code> an ssh weitergeben muss.
d1113 2
a1114 2
<h2><a name= "3.12">3.12 - Ich habe ein Upgrade auf OpenSSH 3.1
durchgeführt und dann ging die X11-Weiterleitung nicht mehr.</a></h2>
d1116 4
a1119 5
Beginnend mit OpenSSH 3.1 lauscht der sshd-X11-Weiterleitungsserver
standardmäßig auf localhost; siehe auch die
Option <b>X11UseLocalhost</b> von sshd, um zum vorherigen Verhalten
zurückzukehren, wenn deine älteren X11-Clients nicht mit dieser
Konfiguration funktionieren.<p>
d1121 4
a1124 5
Im Allgemeinen sollten X11-Clients, die X11 R6 benutzen, mit dieser
Einstellung funktionieren. Einige Hersteller, einschließlich HP, setzen
X11-Clients mit R6- und R5-Bibliotheken ein, sodass einige Clients
funktionieren und andere nicht.
Das gilt z.&nbsp;B. für HP-UX 11.X.<p>
d1126 2
a1127 3
<h2><a name= "3.13">3.13 - Ich habe ein Upgrade auf OpenSSH 3.8
durchgeführt und dann gingen einige X11-Programme nicht
mehr.</a></h2>
d1130 4
a1133 4
Wie in den <a href="../txt/release-3.8">3.8 release notes</a> dokumentiert
worden ist, wird <code>ssh</code> standardmäßig ,untrusted X11
cookies' benutzen. Das vorherige Verhalten kann durch das Setzen von
<b>ForwardX11Trusted yes</b> in <i>sshd_config</i> wiederhergestellt werden.
d1136 1
a1136 1
Mögliche Symptome beinhalten:<br>
d1142 2
a1143 3
<h2><a name= "3.14">3.14 - Ich habe meinen öffentlichen Schlüssel
in authorized_keys kopiert, aber Publickey-Authentifizierung funktioniert
immer noch nicht.</a></h2>
d1146 3
a1148 3
Typischerweise wird das durch die Dateirechte von $HOME,
$HOME/.ssh oder $HOME/.ssh/authorized_keys hervorgerufen, die mehr erlauben
als sshd standardmäßig zulässt.
d1151 2
a1152 2
In diesem Falle kann es behoben werden, indem Folgendes auf dem Server
ausgeführt wird.
d1166 11
a1176 10
Falls das aus irgendeinem Grund nicht möglich sein sollte, besteht die
Alternative darin, <b>StrictModes no</b> in <i>sshd_config</i> zu setzen,
jedoch wird das nicht empfohlen.

<h2><a name= "3.15">3.15 - OpenSSH-Versionen und das Verhalten von PAM.</a></h2>

Das portable OpenSSH hat eine Option, die während der Konfigurationsphase
gesetzt werden kann, um sshds Nutzung des
<a href="http://www.opengroup.org/onlinepubs/008329799/">PAM</a>-
(Pluggable Authentication Modules) Interfaces zu aktivieren.
d1188 5
a1192 5
Um PAM auf irgendeine Weise nutzen zu können, muss diese Option während
der Erzeugungsphase gesetzt sein. Das Laufzeit-Verhalten, wenn PAM
erzeugt wurde, variiert mit der Version des portablen OpenSSH, und
spätere Versionen müssen es ebenfalls mit dem Setzen von
<b>UsePAM</b> auf <b>yes</b> in <i>sshd_config</i> aktivieren.
d1195 2
a1196 3
Das Verhalten der relevanten Authentifikations-Optionen, wenn
PAM-Unterstützung integriert wurde, ist in der folgenden Tabelle
zusammengefasst.
d1200 1
a1200 1
  <tr> <th>Version</th> <th>UsePAM</th> <th>PasswordAuthentication</th> <th>ChallengeResponseAuthentication</th> </tr>
d1203 3
a1205 3
    <td>Nicht nutzbar</td>
    <td>Verwendet PAM</td>
    <td>Verwendet PAM, wenn <b>PAMAuthenticationViaKbdInt</b> aktiv ist</td>
d1209 3
a1211 3
    <td>Standard ist <b>yes</b></td>
    <td>Verwendet nicht PAM</td>
    <td>Verwendet PAM, wenn <b>UsePAM</b> aktiv ist</td>
d1215 3
a1217 3
    <td>Standard ist <b>no</b></td>
    <td>Verwendet nicht PAM <a href="#3.15fn1">[1]</a></td>
    <td>Verwendet PAM, wenn <b>UsePAM</b> aktiv ist</td>
d1221 3
a1223 3
    <td>Standard ist <b>no</b></td>
    <td>Verwendet PAM, wenn <b>UsePAM</b> aktiv ist</td>
    <td>Verwendet PAM, wenn <b>UsePAM</b> aktiv ist</td>
d1228 5
a1232 5
<a name= "3.15fn1">[1]</a> Einige Verkäufer, insbesondere
Redhat/Fedora, haben die Passwortauthentifikation von 3.9p1
auf ihre 3.8x-basierten Pakete zurückportiert.
Wenn du ein Paket nutzt, das von einem Verkäufer bereitgestellt wurde,
konsultiere bitte dessen Dokumentation.
d1235 3
a1237 4
,OpenSSH Portable's PAM-Interface hat immer noch Probleme mit ein
paar Modulen, jedoch hoffen wir, dass wir diese Anzahl in Zukunft
verringern können. Zum Zeitpunkt der Veröffentlichung von 3.9p1
sind folgende Probleme bekannt:
d1240 6
a1245 7
  <li>Module, die sich auf ,module-private' Daten verlassen (z.&nbsp;B.
  pam_dhkeys, pam_krb5, AFS) können darin fehlschlagen, korrekte
  ,Credentials' zu erzeugen (Fehler <a
  href="http://bugzilla.mindrot.org/show_bug.cgi?id=688">#688</a>)
  wenn über <b>ChallengeResponseAuthentication</b> authentifiziert
  wird. <b>PasswordAuthentication</b> mit 3.9p1 und neuer sollten
  funktionieren.
d1248 11
a1258 11
Du kannst außerdem <a
href="http://bugzilla.mindrot.org/buglist.cgi?product=Portable+OpenSSH&amp;bug_status=RESOLVED&amp;bug_status=NEW&amp;bug_status=ACCEPTED&amp;component=PAM+support"
>bugzilla für aktuelle PAM-Probleme</a> durchsehen.

<h2><a name= "3.16">3.16 - Warum zeigen weder »w« noch »who« unter AIX 5.x Benutzer an, die über ssh eingeloggt sind?</a></h2>

Zwischen AIX 4.3.3 und AIX 5.x wurde das Format vom »wtmp struct«
geändert. Das bedeutet, dass sshd-Binarys, die unter AIX 4.x erzeugt
wurden, keine korrekten wtmp-Einträge schreiben, wenn sie unter AIX 5.x
ausgeführt werden. Dies kann behoben werden, indem einfach sshd auf
einem AIX-5.x-System neukompiliert und dieser dann eingesetzt wird.
d1267 1
a1267 1
$Translation: faq.html,v 1.2 2012/09/15 14:44:56 alex Exp $<br>
@


1.1
log
@Sync with Steelix CVS
@
text
@a297 1
<p>
d1261 1
a1261 1
$Translation: faq.html,v 1.1 2012/09/14 20:59:51 alex Exp $<br>
@

