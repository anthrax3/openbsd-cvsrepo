head	1.34;
access;
symbols;
locks; strict;
comment	@# @;


1.34
date	2014.04.01.19.44.54;	author deraadt;	state dead;
branches;
next	1.33;

1.33
date	2008.03.09.13.37.14;	author tobias;	state Exp;
branches;
next	1.32;

1.32
date	2008.01.06.13.57.19;	author tobias;	state Exp;
branches;
next	1.31;

1.31
date	2007.11.12.20.28.26;	author saad;	state Exp;
branches;
next	1.30;

1.30
date	2007.04.26.03.08.09;	author jufi;	state Exp;
branches;
next	1.29;

1.29
date	2006.08.08.07.14.20;	author saad;	state Exp;
branches;
next	1.28;

1.28
date	2006.04.25.16.49.43;	author jufi;	state Exp;
branches;
next	1.27;

1.27
date	2005.09.20.07.30.03;	author saad;	state Exp;
branches;
next	1.26;

1.26
date	2005.07.15.04.26.13;	author saad;	state Exp;
branches;
next	1.25;

1.25
date	2005.05.19.18.23.08;	author jufi;	state Exp;
branches;
next	1.24;

1.24
date	2005.01.18.17.17.24;	author jufi;	state Exp;
branches;
next	1.23;

1.23
date	2004.12.22.20.00.13;	author jufi;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.15.19.33.32;	author jufi;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.04.17.17.46;	author jufi;	state Exp;
branches;
next	1.20;

1.20
date	2004.09.23.14.19.34;	author jufi;	state Exp;
branches;
next	1.19;

1.19
date	2004.08.24.12.17.45;	author jufi;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.23.20.32.43;	author jufi;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.16.00.41.45;	author jufi;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.17.13.02.59;	author jufi;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.13.12.27.36;	author jufi;	state Exp;
branches;
next	1.14;

1.14
date	2002.05.20.12.31.27;	author jufi;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.19.20.39.30;	author jufi;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.20.11.44.39;	author jufi;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.16.08.02.03;	author jufi;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.30.21.24.11;	author jufi;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.19.18.24.37;	author jufi;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.23.19.15.23;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.17.18.14.43;	author jufi;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.01.15.53.59;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.26.19.14.36;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.30.19.01.54;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.10.10.09.22;	author wvdputte;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.07.13.51.34;	author wvdputte;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.14.02.39.52;	author wvdputte;	state Exp;
branches;
next	;


desc
@@


1.34
log
@give up on translation
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>OpenSSH-Funktionalitäten</title>
<link rev=made href="mailto:www@@openbsd.org">
<meta name="resource-type" content="document">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="description" content="OpenSSH Features">
<meta name="keywords" content="OpenSSH,features">
<meta name="distribution" content="global">
<meta name="copyright" content="This document copyright 1996-2005 by OpenBSD.">
</head>

<body bgcolor="#ffffff" text="#000000" link="#23238E">
<a href="index.html"><img alt="[OpenSSH]" height="30" width="141" src="../images/smalltitle.gif" border="0"></a>
<p>
<h2><font color="#e00000">Funktionalität</font></h2>
<hr>

OpenSSH ist eine freie SSH/SecSH-Protokollsuite, die Verschlüsselung
für Netzwerkdienste bereitstellt, wie etwa Remotelogins, also
Einloggen auf einem anderen, entfernten Rechner, oder auch
Dateiübertragung von oder zu einem entfernten Rechner.
<p>
Es folgt eine Liste der Fähigkeiten von OpenSSH:
<p>

<ul>
<li>Open-Source-Projekt
<li>Freie Lizenzpolitik
<li>Starke Verschlüsselung (3DES, Blowfish, AES, Arcfour)
<li>X11-Weiterleitung (verschlüsselt X-Window-System-Netzwerkverkehr)
<li>Portweiterleitung (verschlüsselte Kanäle für bestimmte Protokolle)
<li>Starke Authentifizierung (Öffentliche Schlüssel, Einmal-Passwort- und
    Kerberos-Authentifizierung)
<li>Agentweiterleitung (Single-Sign-On)
<li>Interoperabilität (arbeitet kompatibel zu den
    SSH-Protokollstandards 1.3, 1.5 und 2.0)
<li>SFTP-Client- und -Serverunterstützung sowohl im SSH1- als auch im
    SSH2-Protokoll.
<li>Kerberos- und AFS-Ticketpassing
<li>Datenkompression
</ul>
<p>

<hr>

&nbsp;<strong>Open-Source-Projekt</strong>
<p>
Der OpenSSH-Quelltext ist für jeden frei über das Internet
erhältlich. Das ermutigt zur Wiederverwendung und weiteren
Untersuchung des Quelltextes. Diese weitere Untersuchung stellt sicher,
dass Fehler von jedem gefunden und korrigiert werden können. Das
führt zu sicherem Code.
<p>

&nbsp;<strong>Freie Lizenzpolitik</strong>
<p>
OpenSSH wird nicht von einer restriktiven Lizenz eingeschränkt.
Es kann für jeglichen Zweck eingesetzt werden und das schließt
auch jegliche kommerzielle Nutzung ein. <a
href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/LICENCE?rev=HEAD"
>Die Lizenz</a> für OpenSSH ist selbstverständlich der Distribution
beigefügt. Wir sind der Meinung, dass die Welt besser wäre,
wenn Router, Netzwerkgeräte, Betriebssysteme und alle anderen
Netzwerkkomponenten ssh integriert hätten.
<p>

Alle Komponenten restriktiver Natur (z.&nbsp;B. Patente, siehe <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&amp;sektion=8"
>ssl</a>) wurden aus dem Quellcode entfernt: Jegliche lizenzierten oder
patentierten Teile werden aus externen Quellen bezogen (z.&nbsp;B.
<a href="http://www.openssl.org">OpenSSL</a>).

Die symmetrische Chiffre IDEA ist nicht mehr verfügbar, da sie in
vielen Ländern patentiert ist. Stattdessen empfehlen wir die
Benutzung einer der anderen verfügbaren Chiffren. (Wir sehen keine
Rechtfertigung für die Benutzung einer patentierten symmetrischen
Chiffre, zumal es so viele andere freie gibt).
<p>

&nbsp;<strong>Starke Verschlüsselung</strong>

<p>
OpenSSH unterstützt 3DES, Blowfish, AES und Arcfour als
Verschlüsselungsalgorithmen. Sie sind patentfrei.<br>
<b>Triple DES</b> ist ein sehr gut verstandener
Chiffrieralgorithmus, der den Zahn der Zeit überstanden hat und eine
starke Verschlüsselung bereitstellt.<br>
<b>Blowfish</b> ist ein schneller Blockchiffrierer, der von
Bruce Schneier entworfen wurde und von Leuten benutzt werden kann,
die eine schnellere Verschlüsselung benötigen.<br>
<b><a href="http://www.nist.gov/aes">AES</a></b> ist der
verbesserte Verschlüsselungsstandard des US Federal
Information Processing Standard (FIPS), der als Ersatz für DES
entwickelt wurde. Dabei handelt es sich um eine Blockchiffre.<br>
<b>Arcfour</b> ist eine schnelle Stromchiffre. Sie wird als
kompatibel zu RC4[TM] angesehen, einer proprietären Chiffre
von RSA Security Inc.

<p>
Die Verschlüsselung beginnt vor der Authentifizierung und es werden
keine Passwörter oder andere Daten im Klartext übermittelt.
Verschlüsselung wird auch benutzt, um sich gegen sogenannte
Spoof-Angriffe zu verteidigen, bei denen sich eine Person als jemand
anderes ausgibt.

<p>
&nbsp;<strong>X11-Weiterleitung</strong>
<p>
X11-Weiterleitung erlaubt die Verschlüsselung von
X-Windows-Netzwerkverkehr, also Netzwerkübertragung, auf eine Weise, die
niemanden den Datenverkehr mitlesen oder bösartige Kommandos
einschleusen lässt.  Das Programm setzt DISPLAY automatisch auf dem
Server und leitet jegliche X11-Verbindung über den sicheren Tunnel
weiter. Gefälschte Xauthority-Informationen werden automatisch
generiert und an die entfernte Maschine weitergeleitet; der lokale Client
untersucht automatisch ankommende X11-Verbindungen und ersetzt die
gefälschten Authorisierungsdaten mit den echten Daten (und gibt
der entfernten Maschine nie die echten Informationen).
<p>
&nbsp;<strong>Port-Weiterleitung</strong>
<p>
Port-Weiterleitung erlaubt die Weiterleitung von TCP/IP-Verbindungen zu
einer entfernten Maschine über ein verschlüsseltes Protokoll.
Standard-Internetapplikationen wie POP können damit sicherer
gemacht werden.
<p>
&nbsp;<strong>Starke Authentifizierung</strong>
<p>
Starke Authentifizierung schützt gegen verschiedene
Sicherheitsprobleme, z.&nbsp;B. IP-Spoofing, gefälschte Routen, und
DNS-Spoofing. Die Authentifizierungsmethoden sind: .rhosts zusammen mit
RSA-basierter Hostauthentifizierung, pure RSA-Authentifizierung,
Einmal-Passwörter mit s/key und letztlich Authentifizierung mittels <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=kerberos&amp;sektion=8"
>Kerberos</a>.
<p>
&nbsp;<strong>Agentweiterleitung</strong>
<p>
Ein Authentifizierungsagent, der auf dem Laptop oder der lokalen
Maschine des Anwenders läuft, kann benutzt werden, um den RSA- oder
DSA-Authentifizierungsschlüssel des Anwenders bereitzuhalten. OpenSSH
leitet die Verbindung automatisch an den Authentifizierungsagenten über
jede Verbindung weiter, und es gibt keine Notwendigkeit, die
RSA-Authentifizierungsschlüssel auf jeder Maschine im Netzwerk zu haben
(mit Ausnahme der lokalen Maschine des Benutzers). Die
Authentifizierungsprotokolle geben die Schlüssel niemals preis;
sie können nur dazu benutzt werden, um abzufragen, ob der Benutzer
einen entsprechenden Schlüssel hat. Eventuell könnte der
Agent auf einer Smart-Card beruhen, die alle
Authentifizierungsberechnungen macht.
<p>
&nbsp;<strong>Interoperabilität</strong>
<p>
OpenSSH-Versionen vor 2.0 unterstützen die SSH-1.3- und -1.5-Protokolle,
die es erlauben, mit den meisten Unix-, Windows- und anderen,
kommerziellen SSH-Implementationen zu kommunizieren.
<p>
Seit der Version 2.0 unterstützt OpenSSH neben den
SSH-Protokollversionen 1.3 und 1.5 auch die SSH-Protokollversion 2.0.
Dieses Protokoll vermeidet die Benutzung des RSA-Algorithmus - da zur
Zeit der Einführung des Protokolls 2.0 das RSA-Patent noch gültig
war - und benutzt stattdessen die frei benutzbaren DH- und
DSA-Algorithmen.
<p>
Daher gibt dir OpenSSH das Beste aus beiden Welten. Du kannst mit
<strong>beiden</strong> Typen von SSH-Clients und -Servern arbeiten und
kommunizieren!
<p>
&nbsp;<strong>SFTP-Client- und -Serverunterstützung in sowohl dem SSH1-
als auch dem SSH2-Protokoll</strong>
<p>
Seit OpenSSH 2.5.0 ist komplette SFTP-Unterstützung integriert; dazu
wird das <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1"
>sftp(1)</a>-Kommando als Client benutzt. Das <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&amp;sektion=8"
>sftp-server(8)</a>-Subsystem arbeitet automatisch mit sowohl dem SSH1-
als auch dem SSH2-Protokoll.
<p>
&nbsp;<strong>Kerberos- und AFS-Ticketpassing</strong>
<p>
OpenSSH gibt auch Tickets für Kerberos und AFS an die entfernte
Maschine weiter. Ein Benutzer kann daher auf alle seine Kerberos- und
AFS-Dienste zugreifen, ohne sein Passwort wieder eintippen zu müssen.
<p>
&nbsp;<strong>Datenkompression</strong>
<p>
Datenkompression vor der Verschlüsselung beschleunigt die Leistung
über langsame Netzwerkverbindungen.
<p>
<hr>
<a href="index.html"><img height=24 width=24 src="../back.gif" border=0 alt=OpenSSH></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>
<!--
Originally [OpenBSD: features.html,v 1.23 ]<br>
$Translation: features.html,v 1.37 2008/03/04 23:03:21 paldium Exp $<br>
-->
$OpenBSD: features.html,v 1.33 2008/03/09 13:37:14 tobias Exp $
</small>

</body>
</html>
@


1.33
log
@Sync with Steelix CVS
@
text
@d202 1
a202 1
$OpenBSD$
@


1.32
log
@Sync with Steelix CVS
@
text
@d37 1
a37 1
<li>Interoperatibilität (arbeitet kompatibel zu den
d144 1
a144 1
leitet die Verbindung automatisch an den Authenfizierungsagenten über
d154 1
a154 1
&nbsp;<strong>Interoperatibilität</strong>
d200 1
a200 1
$Translation: features.html,v 1.36 2008/01/04 21:02:59 paldium Exp $<br>
@


1.31
log
@Sync with Steelix CVS
@
text
@d21 1
a21 1
für Netzwerkdienste bereitstellt, wie etwa ,remote login', also
d33 9
a41 6
<li>Port-Weiterleitung (verschlüsselte Kanäle für bestimmte Protokolle)
<li>Starke Authentifizierung (,Public Key', Einmal-Passwort- und Kerberos-Authentifizierung)
<li>,Agent'-Weiterleitung (Single-Sign-On)
<li>Interoperatibilität (Arbeitet kompatibel zu den SSH-1.3-, -1.5- und -2.0-Protokollstandards)
<li>SFTP-Client- und -Serverunterstützung sowohl im SSH1- als auch im SSH2-Protokoll.
<li>Kerberos- und AFS-,Ticket Passing'
d50 1
a50 1
Der OpenSSH-Quellcode ist für jeden frei über das Internet
d52 1
a52 1
Untersuchung des Quellcodes. Diese weitere Untersuchung stellt sicher,
d61 3
a63 3
auch jegliche kommerzielle Nutzung ein.
<a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/LICENCE?rev=HEAD">
Die Lizenz</a> für OpenSSH ist selbstverständlich der Distribution
d69 5
a73 5
Alle Komponenten restriktiver Natur (z.&nbsp;B. Patente, siehe
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&amp;sektion=8">ssl</a>)
wurden aus dem Quellcode entfernt:
jegliche lizenzierten oder patentierten Teile werden aus externen Quellen
bezogen (z.&nbsp;B. <a href="http://www.openssl.org">OpenSSL</a>).
d85 2
a86 2
OpenSSH unterstützt 3DES, Blowfish, AES und Arcfour an Verschlüsselungsalgorithmen.
Sie sind patentfrei.<br>
d96 2
a97 2
entwickelt wurde. Er ist eine Blockchiffre.<br>
<b>Arcfour</b> ist eine schnelle Stromchiffre. Er wird als
d105 1
a105 1
,spoof'-Angriffe zu verteidigen, bei denen sich eine Person als jemand
d111 3
a113 3
X11-Weiterleitung erlaubt die Verschlüsselung von X-Windows-Netzwerkverkehr,
also Netzwerkübertragung, auf eine Weise, die niemanden
den Datenverkehr mitlesen oder bösartige Kommandos
d124 2
a125 2
Port-Weiterleitung erlaubt das Weiterleiten von TCP/IP-Verbindungen zu einer
entfernten Maschine über ein verschlüsseltes Protokoll.
d132 6
a137 5
Sicherheitsprobleme, z.&nbsp;B. IP-,spoofing', ,fake routes', und DNS-,spoofing'.
Die Authentifizierungsmethoden sind: .rhosts zusammen mit RSA-basierter
Hostauthentifizierung, pure RSA-Authentifizierung,
Einmal-Passwörter mit s/key und letztlich Authentifizierung mittels
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kerberos&amp;sektion=8">Kerberos</a>.
d139 1
a139 1
&nbsp;<strong>,Agent'-Weiterleitung</strong>
d151 2
a152 2
Agent auf einer Smart-Card beruhen, die alle Authentifizierungsberechnungen
macht.
d157 2
a158 2
die es erlauben, mit den meisten Unix-, Windows- und anderen, kommerziellen
SSH-Implementationen zu kommunizieren.
d164 2
a165 1
war - und benutzt stattdessen die frei benutzbaren DH- und DSA-Algorithmen.
d167 1
a167 1
Daher gibt dir OpenSSH das beste aus beiden Welten. Du kannst mit
d174 7
a180 6
Seit OpenSSH 2.5.0 ist komplette SFTP-Unterstützung integriert, dazu wird das
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1">sftp(1)</a>-Kommando
als Client benutzt. Das
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&amp;sektion=8">
sftp-server(8)</a>-Subsystem
arbeitet automatisch mit sowohl dem SSH1- als auch dem SSH2-Protokoll.
d182 1
a182 1
&nbsp;<strong>Kerberos- und AFS-,ticket passing'</strong>
d191 1
a191 1
(performance) über langsame Netzwerkverbindungen.
d200 1
a200 1
$Translation: features.html,v 1.35 2007/11/08 21:44:19 paldium Exp $<br>
@


1.30
log
@Sync with steelix translation CVS
@
text
@d60 1
a60 1
Die Lizenz</a> für OpenSSH ist natürlich der Distribution
d69 1
a69 1
jegliche lizensierten oder patentierten Teile werden aus externen Quellen
d153 2
a154 2
die es erlauben, mit den meisten UNIX-, Windows- und anderen, kommerziellen
SSH-Implementierungen zu kommunizieren.
d194 1
a194 1
$Translation: features.html,v 1.32 2007/04/25 15:41:15 paldium Exp $<br>
@


1.29
log
@sync with Steelix CVS
@
text
@d47 4
a50 4
Der OpenSSH-Quellcode ist für jeden frei über das Internet 
erhältlich. Das ermutigt zur Wiederverwendung und weiteren 
Untersuchung des Quellcodes. Diese weitere Untersuchung stellt sicher, 
dass Fehler von jedem gefunden und korrigiert werden können. Das 
d56 2
a57 2
OpenSSH wird nicht von einer restriktiven Lizenz eingeschränkt. 
Es kann für jeglichen Zweck eingesetzt werden und das schließt 
d60 3
a62 3
Die Lizenz</a> für OpenSSH ist natürlich der Distribution 
beigefügt. Wir sind der Meinung, dass die Welt besser wäre, 
wenn Router, Netzwerkgeräte, Betriebssysteme und alle anderen 
d72 4
a75 4
Die symmetrische Chiffre IDEA ist nicht mehr verfügbar, da sie in 
vielen Ländern patentiert ist. Stattdessen empfehlen wir die 
Benutzung einer der anderen verfügbaren Chiffren. (Wir sehen keine 
Rechtfertigung für die Benutzung einer patentierten symmetrischen 
d83 6
a88 6
Sie sind patentfrei.<br> 
<b>Triple DES</b> ist ein sehr gut verstandener 
Chiffrieralgorithmus, der den Zahn der Zeit überstanden hat und eine 
starke Verschlüsselung bereitstellt.<br> 
<b>Blowfish</b> ist ein schneller Blockchiffrierer, der von 
Bruce Schneier entworfen wurde und von Leuten benutzt werden kann, 
d90 1
a90 1
<b><a href="http://www.nist.gov/aes">AES</a></b> ist der 
d93 3
a95 3
entwickelt wurde. Er ist eine Blockchiffre.<br> 
<b>Arcfour</b> ist eine schnelle Stromchiffre. Er wird als 
kompatibel zu RC4[TM] angesehen, einer proprietären Chiffre 
d99 1
a99 1
Die Verschlüsselung beginnt vor der Authentifizierung und es werden 
d110 7
a116 7
den Datenverkehr mitlesen oder bösartige Kommandos 
einschleusen lässt.  Das Programm setzt DISPLAY automatisch auf dem 
Server und leitet jegliche X11-Verbindung über den sicheren Tunnel 
weiter. Gefälschte Xauthority-Informationen werden automatisch 
generiert und an die entfernte Maschine weitergeleitet; der lokale Client 
untersucht automatisch ankommende X11-Verbindungen und ersetzt die 
gefälschten Authorisierungsdaten mit den echten Daten (und gibt 
d123 1
a123 1
Standard-Internetapplikationen wie POP können damit sicherer 
d128 5
a132 5
Starke Authentifizierung schützt gegen verschiedene 
Sicherheitsprobleme, z.&nbsp;B. IP-,spoofing', ,fake routes', und DNS-,spoofing'.  
Die Authentifizierungsmethoden sind: .rhosts zusammen mit RSA-basierter 
Hostauthentifizierung, pure RSA-Authentifizierung, 
Einmal-Passwörter mit s/key und letztlich Authentifizierung mittels 
d137 3
a139 3
Ein Authentifizierungsagent, der auf dem Laptop oder der lokalen 
Maschine des Anwenders läuft, kann benutzt werden, um den RSA- oder 
DSA-Authentifizierungsschlüssel des Anwenders bereitzuhalten. OpenSSH 
d143 2
a144 2
(mit Ausnahme der lokalen Maschine des Benutzers). Die 
Authentifizierungsprotokolle geben die Schlüssel niemals preis; 
d146 1
a146 1
einen entsprechenden Schlüssel hat. Eventuell könnte der 
d152 1
a152 1
OpenSSH-Versionen vor 2.0 unterstützen die SSH-1.3- und -1.5-Protokolle, 
d157 4
a160 4
SSH-Protokollversionen 1.3 und 1.5 auch die SSH-Protokollversion 2.0. 
Dieses Protokoll vermeidet die Benutzung des RSA-Algorithmus -- da zur 
Zeit der Einführung des Protokolls 2.0 das RSA-Patent noch gültig 
war -- und benutzt stattdessen die frei benutzbaren DH- und DSA-Algorithmen.
d162 2
a163 2
Daher gibt dir OpenSSH das beste aus beiden Welten. Du kannst mit 
<strong>beiden</strong> Typen von SSH-Clients und -Servern arbeiten und 
d171 1
a171 1
als Client benutzt. Das 
d184 1
a184 1
Datenkompression vor der Verschlüsselung beschleunigt die Leistung 
d188 1
a188 1
<a href="index.html"><img height=24 width=24 src="../back.gif" border=0 alt=OpenSSH></a> 
d194 1
a194 1
$Translation: features.html,v 1.31 2006/08/06 14:08:11 paldium Exp $<br>
@


1.28
log
@sync with steelix translation CVS
@
text
@d66 1
a66 1
Alle Komponenten restriktiver Natur (z.B. Patente, siehe
d70 1
a70 1
bezogen (z.B. <a href="http://www.openssl.org">OpenSSL</a>).
d129 1
a129 1
Sicherheitsprobleme, z.B. IP-,spoofing', ,fake routes', und DNS-,spoofing'.  
d194 1
a194 1
$Translation: features.html,v 1.30 2006/04/24 17:44:31 paldium Exp $<br>
@


1.27
log
@sync with Steelix CVS
@
text
@a6 1
<meta http-equiv="Content-Language" content="de">
d8 2
a9 2
<meta name="description" content= "OpenSSH-Funktionalitäten">
<meta name="keywords" content= "openssh,Funktionalitäten">
d11 1
a11 1
<meta name="copyright" content="Dieses Dokument unterliegt dem Copyright von OpenBSD 1996 - 2005.">
d193 2
a194 2
Originally [OpenBSD: features.html,v 1.23 ]
$Translation: features.html,v 1.29 2005/09/14 16:16:40 paldium Exp $
@


1.26
log
@sync with Steelix CVS
@
text
@d4 1
a4 1
<title>OpenSSH-Funktionalität</title>
d7 1
a8 1
<meta http-equiv="Content-Language" content="de">
d10 1
a10 1
<meta name="keywords" content= "openssh,Funktionalität">
d12 1
a12 1
<meta name="copyright" content="Dieses Dokument ist Copyright 1996-2005 by OpenBSD.">
d195 1
a195 1
$Translation: features.html,v 1.28 2005/07/14 17:00:25 paldium Exp $
@


1.25
log
@sync with steelxi translation CVS
@
text
@d12 1
a12 1
<meta name="copyright" content="Dieses Dokument ist Copyright 1996-2004 by OpenBSD.">
d194 2
a195 2
Originally [OpenBSD: features.html,v 1.22 ]
$Translation: features.html,v 1.27 2005/05/19 17:32:46 paldium Exp $
@


1.24
log
@Sync with Steelix CVS
@
text
@d9 2
a10 2
<meta name="description" content= "OpenSSH Features">
<meta name="keywords" content= "openssh,features">
d12 1
a12 1
<meta name="copyright" content="This document copyright 1996-2004 by OpenBSD.">
d15 1
a15 1
<body bgcolor="#ffffff" text="#000000" link="#23238e">
a161 1
 <p>
d195 1
a195 1
$Translation: features.html,v 1.26 2005/01/18 14:33:47 paldium Exp $
@


1.23
log
@Sync with Steelix CVS
@
text
@d194 5
a198 3
Originally [OpenBSD: features.html,v 1.22 ]<br>
$Translation: features.html,v 1.25 2004/12/22 12:29:54 paldium Exp $<br>
$OpenBSD: features.html,v 1.22 2004/12/22 02:06:00 david Exp $
@


1.22
log
@Sync with Steelix CVS
@
text
@d16 1
a16 1
<img alt="[OpenSSH]" height=30 width=141 src="../images/smalltitle.gif">
d194 3
a196 3
Originally [OpenBSD: features.html,v 1.21 ]<br>
$Translation: features.html,v 1.24 2004/12/15 15:00:31 paldium Exp $<br>
$OpenBSD: features.html,v 1.21 2004/03/22 10:58:41 dtucker Exp $
@


1.21
log
@Sync with Steelix CVS
@
text
@d4 1
a4 1
<title>OpenSSH Funktionalität</title>
d18 1
a18 1
<h2><font color="#e00000">Features</font></h2>
d21 1
a21 1
OpenSSH ist eine freie SSH/SecSH Protokoll Suite, die Verschlüsselung
d24 1
a24 1
Dateiübertragung von oder zu einem ,remote' Rechner.
d26 1
a26 1
Das folgende ist eine Liste der Fähigkeiten von OpenSSH:
d30 1
a30 1
<li>Open Source Projekt
d33 7
a39 7
<li>,X11 Forwarding' (verschlüsselt X Window System Netzwerkverkehr)
<li>,Port Forwarding' (verschlüsselte Kanäle für bestimmte Protokolle)
<li>Starke Authentifizierung (,Public Key', Einmal-Passwort und Kerberos Authentifizierung)
<li>,Agent Forwarding' (Single-Sign-On)
<li>Interoperatibilität (Arbeitet kompatibel zu den SSH 1.3, 1.5 und 2.0 Protokoll Standards)
<li>SFTP Client und Server Unterstützung sowohl im SSH1 als auch im SSH2 Protokoll.
<li>Kerberos und AFS ,Ticket Passing'
d46 1
a46 1
&nbsp;<strong>Open Source Projekt</strong>
d48 1
a48 1
Der OpenSSH Quellcode ist für jeden frei über das Internet 
d55 1
a55 1
&nbsp;<strong>Free Licensing</strong>
d58 1
a58 1
Es kann für jeglichen Zweck eingesetzt werden, und das schließt 
d63 2
a64 2
wenn Router, Netzwerk-Geräte, Betriebssysteme und alle anderen 
Netzwerk-Komponenten ssh integriert hätten.
d66 1
d69 3
a71 4
 wurden aus dem Quellcode entfernt:
 jegliche lizensierten oder patentierten Teile werden aus externen Quellen
 bezogen
(z.B. <a href="http://www.openssl.org">OpenSSL</a>).
d79 3
a81 1
<strong>Starke Verschlüsselung</strong>
d83 1
a83 2

OpenSSH unterstützt 3DES, Blowfish, AES und arcfour an Verschlüsselungsalgorithmen.
d86 1
a86 1
Chiffrieralgorithmus, der den Zahn der Zeit übestanden hat und eine 
d92 1
a92 1
verbesserte Verschlüsselungs-Standard des US Federal
d94 2
a95 2
entwickelt wurde. Er ist eine Block-Chiffre.<br> 
<b>Arcfour</b> ist eine schnelle Strom-Chiffre. Er wird als 
d102 3
a104 2
Verschlüsselung wird auch benutzt, um sich gegen sogenannte "spoof 
attacks" zu verteidigen, bei denen sich eine Person als jemand anderes ausgibt.
d107 8
a114 9
&nbsp;<strong>X11 Forwarding</strong>
<p>

X11 Forwarding erlaubt die Verschlüsselung von X Windows 
Netzwerkverkehr, also Netzwerkübertragung, auf eine Weise, so dass 
niemand den Datenverkehr mitlesen oder bösartige Kommandos 
einschleusen kann.  Das Programm setzt DISPLAY automatisch auf dem 
Server, und leitet jegliche X11-Verbindung über den sicheren Tunnel 
weiter. Gefälschte Xauthority Informationen werden automatisch 
d116 2
a117 2
untersucht automatisch ankommende X11 Verbindungen und ersetzt die 
gefälschten Authorisierung-Daten mit den echten Daten (und gibt 
d120 1
a120 2

&nbsp;<strong>Port Forwarding</strong>
d122 1
a122 1
Port Forwarding erlaubt das Weiterleiten von TCP/IP Verbindungen zu einer
d124 1
a124 1
Standard Internet Applikationen wie POP können damit sicherer 
d130 4
a133 4
Sicherheitsprobleme, z.B. IP spoofing, fake routes, und DNS spoofing.  
Die Authentifizierungsmethoden sind: .rhosts zusammen mit RSA basierter 
Host Authentifizierung, pure RSA Authentifizierung, 
Einmal-Passwörter mit s/key, und letztlich Authentifizierung mittels 
d136 1
a136 2

&nbsp;<strong>Agent Forwarding</strong>
d138 3
a140 3
Ein Authentifizierungs Agent, der auf dem Laptop oder der lokalen 
Maschine des Users läuft, kann benutzt werden, um den RSA- oder 
DSA-Authentifizierungs-Schlüssel des Users bereitzuhalten. OpenSSH 
d142 3
a144 3
jede Verbindung weiter, und es gibt keine Notwendigkeit die RSA 
Authentifizierungsschlüssel auf jeder Maschine im Netzwerk zu haben
(mit Ausnahme der lokalen Maschine des Users). Die 
d146 1
a146 1
sie können nur dazu benutzt werden, um abzufragen, ob der User 
d148 2
a149 1
Agent auf einer Smart-Card beruhen, die alle Authentifizierungsberechnungen macht.
a150 1

d153 2
a154 2
OpenSSH Versionen vor 2.0 unterstützen die SSH 1.3 und 1.5 Protokolle, 
die es erlauben, mit den meisten UNIX-, Windows- und anderen, kommerziellen,
d157 5
a161 5
Seit der Version 2.0 unterstützt OpenSSH neben den SSH 
Protokollversionen 1.3 und 1.5 auch das SSH Protokoll Version 2.0. 
Dieses Protokoll vermeidet die Benutzung des RSA Algorithmus -- da zur 
Zeit der Einführung des Protokolls 2.0 das RSA Patent noch gültig 
war -- und benutzt stattdessen die frei benutzbaren DH und DSA Algorithmen.
d165 1
a165 1
<strong>beiden</strong> Typen von SSH Clients und Servern arbeiten und 
d168 2
a169 2
&nbsp;<strong>SFTP Client und Server Unterstützung in sowohl SSH1 
als auch dem SSH2 Protokoll</strong>
d171 3
a173 3
Seit OpenSSH 2.5.0 ist komplette SFTP Unterstützung integriert, dazu wird das
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1">sftp(1)</a>
Kommando als Client benutzt. Das 
d175 2
a176 2
sftp-server(8)</a>
Subsystem arbeitet automatisch mit sowohl SSH1 als auch dem SSH2 Protokoll.
d178 1
a178 2

&nbsp;<strong>Kerberos und AFS Ticket Passing</strong>
d181 2
a182 2
Maschine weiter. Ein User kann daher auf alle seine Kerberos und AFS Dienste
zugreifen, ohne sein Passwort wieder eintippen zu müssen.
d184 1
a184 2

&nbsp;<strong>Daten Kompression</strong>
a191 2
<br><small>
Originally [OpenBSD: features.html,v 1.21 ]
d193 4
a196 1
$Translation: features.html,v 1.23 2004/11/04 16:30:36 jufi Exp $
d198 1
a198 1
<br><small>$OpenBSD: features.html,v 1.21 2004/03/22 10:58:41 dtucker Exp $</small>
@


1.20
log
@Sync with Steelix CVS
@
text
@d4 1
a4 1
<title>OpenSSH Funktionalit&auml;t</title>
d21 2
a22 2
OpenSSH ist eine freie SSH/SecSH Protokoll Suite, die Verschl&uuml;sselung
f&uuml;r Netzwerkdienste bereitstellt, wie etwa ,remote login', also
d24 1
a24 1
Datei&uuml;bertragung von oder zu einem ,remote' Rechner.
d26 1
a26 1
Das folgende ist eine Liste der F&auml;higkeiten von OpenSSH:
d32 3
a34 3
<li>Starke Verschl&uuml;sselung (3DES, Blowfish, AES, Arcfour)
<li>,X11 Forwarding' (verschl&uuml;sselt X Window System Netzwerkverkehr)
<li>,Port Forwarding' (verschl&uuml;sselte Kan&auml;le f&uuml;r bestimmte Protokolle)
d37 2
a38 2
<li>Interoperatibilit&auml;t (Arbeitet kompatibel zu den SSH 1.3, 1.5 und 2.0 Protokoll Standards)
<li>SFTP Client und Server Unterst&uuml;tzung sowohl im SSH1 als auch im SSH2 Protokoll.
d48 2
a49 2
Der OpenSSH Quellcode ist f&uuml;r jeden frei &uuml;ber das Internet 
erh&auml;ltlich. Das ermutigt zur Wiederverwendung und weiteren 
d51 2
a52 2
dass Fehler von jedem gefunden und korrigiert werden k&ouml;nnen. Das 
f&uuml;hrt zu sicherem Code.
d57 2
a58 2
OpenSSH wird nicht von einer restriktiven Lizenz eingeschr&auml;nkt. 
Es kann f&uuml;r jeglichen Zweck eingesetzt werden, und das schlie&szlig;t 
d61 4
a64 4
Die Lizenz</a> f&uuml;r OpenSSH ist nat&uuml;rlich der Distribution 
beigef&uuml;gt. Wir sind der Meinung, dass die Welt besser w&auml;re, 
wenn Router, Netzwerk-Ger&auml;te, Betriebssysteme und alle anderen 
Netzwerk-Komponenten ssh integriert h&auml;tten.
d73 4
a76 4
Die symmetrische Chiffre IDEA ist nicht mehr verf&uuml;gbar, da sie in 
vielen L&auml;ndern patentiert ist. Stattdessen empfehlen wir die 
Benutzung einer der anderen verf&uuml;gbaren Chiffren. (Wir sehen keine 
Rechtfertigung f&uuml;r die Benutzung einer patentierten symmetrischen 
d79 1
a79 1
<strong>Starke Verschl&uuml;sselung</strong>
d82 1
a82 1
OpenSSH unterst&uuml;tzt 3DES, Blowfish, AES und arcfour an Verschl&uuml;sselungsalgorithmen.
d85 2
a86 2
Chiffrieralgorithmus, der den Zahn der Zeit &uuml;bestanden hat und eine 
starke Verschl&uuml;sselung bereitstellt.<br> 
d89 1
a89 1
die eine schnellere Verschl&uuml;sselung ben&ouml;tigen.<br>
d91 2
a92 2
verbesserte Verschl&uuml;sselungs-Standard des US Federal
Information Processing Standard (FIPS), der als Ersatz f&uuml;r DES
d95 1
a95 1
kompatibel zu RC4[TM] angesehen, einer propriet&auml;ren Chiffre 
d99 3
a101 3
Die Verschl&uuml;sselung beginnt vor der Authentifizierung und es werden 
keine Passw&ouml;rter oder andere Daten im Klartext &uuml;bermittelt.
Verschl&uuml;sselung wird auch benutzt, um sich gegen sogenannte "spoof 
d108 3
a110 3
X11 Forwarding erlaubt die Verschl&uuml;sselung von X Windows 
Netzwerkverkehr, also Netzwerk&uuml;bertragung, auf eine Weise, so dass 
niemand den Datenverkehr mitlesen oder b&ouml;sartige Kommandos 
d112 2
a113 2
Server, und leitet jegliche X11-Verbindung &uuml;ber den sicheren Tunnel 
weiter. Gef&auml;lschte Xauthority Informationen werden automatisch 
d116 1
a116 1
gef&auml;lschten Authorisierung-Daten mit den echten Daten (und gibt 
d123 2
a124 2
entfernten Maschine &uuml;ber ein verschl&uuml;sseltes Protokoll.
Standard Internet Applikationen wie POP k&ouml;nnen damit sicherer 
d129 1
a129 1
Starke Authentifizierung sch&uuml;tzt gegen verschiedene 
d133 1
a133 1
Einmal-Passw&ouml;rter mit s/key, und letztlich Authentifizierung mittels 
d140 3
a142 3
Maschine des Users l&auml;uft, kann benutzt werden, um den RSA- oder 
DSA-Authentifizierungs-Schl&uuml;ssel des Users bereitzuhalten. OpenSSH 
leitet die Verbindung automatisch an den Authenfizierungsagenten &uuml;ber
d144 1
a144 1
Authentifizierungsschl&uuml;ssel auf jeder Maschine im Netzwerk zu haben
d146 3
a148 3
Authentifizierungsprotokolle geben die Schl&uuml;ssel niemals preis; 
sie k&ouml;nnen nur dazu benutzt werden, um abzufragen, ob der User 
einen entsprechenden Schl&uuml;ssel hat. Eventuell k&ouml;nnte der 
d152 1
a152 1
&nbsp;<strong>Interoperatibilit&auml;t</strong>
d154 1
a154 1
OpenSSH Versionen vor 2.0 unterst&uuml;tzen die SSH 1.3 und 1.5 Protokolle, 
d158 1
a158 1
Seit der Version 2.0 unterst&uuml;tzt OpenSSH neben den SSH 
d161 1
a161 1
Zeit der Einf&uuml;hrung des Protokolls 2.0 das RSA Patent noch g&uuml;ltig 
d169 1
a169 1
&nbsp;<strong>SFTP Client und Server Unterst&uuml;tzung in sowohl SSH1 
d172 1
a172 1
Seit OpenSSH 2.5.0 ist komplette SFTP Unterst&uuml;tzung integriert, dazu wird das
d182 1
a182 1
OpenSSH gibt auch Tickets f&uuml;r Kerberos und AFS an die entfernte
d184 1
a184 1
zugreifen, ohne sein Passwort wieder eintippen zu m&uuml;ssen.
d189 2
a190 2
Datenkompression vor der Verschl&uuml;sselung beschleunigt die Leistung 
(performance) &uuml;ber langsame Netzwerkverbindungen.
d198 1
a198 1
$Translation: features.html,v 1.22 2004/09/23 14:11:15 jufi Exp $
@


1.19
log
@sync with Steelix translation CVS.
All work by Tobias Stoeckmann, correcting many typos, etc., thanks !
More to come.
@
text
@d4 1
a4 1
<title>OpenSSH Features</title>
d9 2
a10 2
<meta name= "description"   content= "OpenSSH Features">
<meta name= "keywords"      content= "openssh,features">
a17 1

d20 5
a24 4
OpenSSH ist eine freie SSH/SecSH Protokoll Suite, die Verschl&uuml;sselung 
f&uuml;r Netzwerkdienste bereitstellt, wie etwa "remote login", also 
Einloggen auf einem anderen, entfernten Rechner, oder auch 
Datei&uuml;bertragung von oder zu einem 'remote' Rechner.
d26 1
a26 1
Das folgende ist eine Liste der F&auml;higkeiten (Features) von OpenSSH:
d33 5
a37 5
<li>X11 Forwarding (verschl&uuml;sselt X Window System Netzwerkverkehr)
<li>Port Forwarding (verschl&uuml;sselte Kan&auml;le f&uuml;r bestimmte Protokolle)
<li>Starke Authentifizierung (Public Key, Einmal-Passwort und Kerberos Authentifizierung)
<li>Agent Forwarding (Single-Sign-On)
<li>Interoperatibilit&auml;t(Arbeitet kompatibel zu den SSH 1.3, 1.5 und 2.0 Protokoll Standards)
d39 1
a39 1
<li>Kerberos und AFS Ticket Passing
d156 1
a156 1
SSH-Implementationen zu kommunizieren.
d198 1
a198 1
$Translation: features.html,v 1.20 2004/08/24 12:11:24 jufi Exp $
@


1.18
log
@Sync with Steelix CVS
@
text
@d21 1
a21 1
OpenSSH ist eine freie SSH/SecSH Protokoll Suite , die Verschl&uuml;sselung 
d26 1
a26 1
Das folgendende ist eine Liste der F&auml;higkeiten (Features) von OpenSSH:
d58 1
a58 1
Es kann f&uuml;r jeglichen Zweck eingestzt werden, und das schliesst 
d62 1
a62 1
beigef&uuml;gt. Wir sind der  Meinung, das die Welt besser w&auml;re, 
d68 1
a68 1
 wurden aus dem Quellode entfernt:
d74 1
a74 1
vielen L&auml;ndern patentiert ist. Anstattdessen empfehlen wir die 
d82 1
a82 1
OpenSSH benutzt 3DES, Blowfish, AES und arcfour als Verschl&uuml;sselungsalgorithmus.
d95 1
a95 1
kompatible zu RC4[TM] angesehen, einer propriet&auml;ren Chiffre 
d108 1
a108 1
X11 Forwarding erlaubt die Verschl&uuml;sselung von X Window's 
d167 1
a167 1
kommunizieren !
d183 1
a183 1
Maschine weiter. Ein User daher auf alle seine Kerberos und AFS Dienste
d198 1
a198 1
$Translation: features.html,v 1.19 2004/05/23 20:25:04 jufi Exp $
@


1.17
log
@Sync with Steelix CVS
@
text
@d15 2
a16 2
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#23238E">
<img alt="[OpenSSH]" height=30 width=141 SRC="../images/smalltitle.gif">
d32 1
a32 1
<li>Starke Verschl&uuml;sselung (3DES, Blowfish)
d82 3
a84 2
OpenSSH benutzt 3DES und Blowfish als Verschl&uuml;sselungsalgorithmus.
Sie sind beide patentfrei. Triple DES ist ein sehr gut verstandener 
d86 13
a98 3
starke Verschl&uuml;sselung bereitstellt. Blowfish ist ein schneller 
Blockchiffrierer, der von Bruce Schneier entworfen wurde und von Leuten 
benutzt werden kann, die eine schnellere Verschl&uuml;sselung ben&ouml;tigen.
d196 1
a196 1
Originally [OpenBSD: features.html,v 1.18 ]
d198 1
a198 1
$Translation: features.html,v 1.18 2004/02/16 00:25:19 jufi Exp $
d200 1
a200 1
<br><small>$OpenBSD: features.html,v 1.18 2004/01/25 03:14:53 nick Exp $</small>
@


1.16
log
@
clean up description and keywords
@
text
@d12 1
a12 1
<meta name="copyright" content="This document copyright 1996-2003 by OpenBSD.">
d185 1
a185 1
Originally [OpenBSD: features.html,v 1.17 ]
d187 1
a187 1
$Translation: features.html,v 1.17 2003/01/17 12:48:49 jufi Exp $
d189 1
a189 1
<br><small>$OpenBSD: features.html,v 1.17 2002/11/13 11:45:46 jufi Exp $</small>
@


1.15
log
@
<= 72 chars per line
@
text
@d9 2
d12 1
a12 1
<meta name="copyright" content="This document copyright 1996-2002 by OpenBSD.">
d187 1
a187 1
$Translation: features.html,v 1.16 2002/11/13 11:54:48 jufi Exp $
@


1.14
log
@
sync with badlands translation CVS
@
text
@d19 4
a22 3
OpenSSH ist eine freie SSH/SecSH Protokoll Suite , die Verschl&uuml;sselung f&uuml;r 
Netzwerkdienste bereitstellt, wie etwa "remote login", also Einloggen auf einem anderen, entfernten Rechner,
oder auch Datei&uuml;bertragung von oder zu einem 'remote' Rechner.
d46 5
a50 4
Der OpenSSH Quellcode ist f&uuml;r jeden frei &uuml;ber das Internet erh&auml;ltlich.
Das ermutigt zur Wiederverwendung und weiteren Untersuchung des Quellcodes.
Diese weitere Untersuchung stellt sicher, dass Fehler von jedem gefunden 
und korrigiert werden k&ouml;nnen. Das f&uuml;hrt zu sicherem Code.
d55 3
a57 2
OpenSSH wird nicht von einer restriktiven Lizenz eingeschr&auml;nkt. Es kann f&uuml;r jeglichen
Zweck eingestzt werden, und das schliesst auch jegliche kommerzielle Nutzung ein.
d59 4
a62 3
Die Lizenz</a> f&uuml;r OpenSSH ist nat&uuml;rlich der Distribution beigef&uuml;gt.
Wir sind der  Meinung, das die Welt besser w&auml;re, wenn Router, Netzwerk-Ger&auml;te,
Betriebssysteme und alle anderen Netzwerk-Komponenten ssh integriert h&auml;tten.
d71 5
a75 3
Die symmetrische Chiffre IDEA ist nicht mehr verf&uuml;gbar, da sie in vielen L&auml;ndern patentiert ist.
Anstattdessen empfehlen wir die Benutzung einer der anderen verf&uuml;gbaren Chiffren. (Wir sehen keine Rechtfertigung f&uuml;r
die Benutzung einer patentierten symmetrischen Chiffre, zumal es so viele andere freie gibt).
d80 5
a84 4
OpenSSH benutzt 3DES und Blowfish als Verschl&uuml;sselungsalgorithmus.  Sie sind beide patentfrei.
Triple DES ist ein sehr gut verstandener Chiffrieralgorithmus, der den Zahn der Zeit &uuml;bestanden hat
und eine starke Verschl&uuml;sselung bereitstellt.
Blowfish ist ein schneller Blockchiffrierer, der von Bruce Schneier entworfen wurde und von Leuten
d86 4
a89 4
Die Verschl&uuml;sselung beginnt vor der Authentifizierung und es werden keine Passw&ouml;rter oder andere
Daten im Klartext &uuml;bermittelt.
Verschl&uuml;sselung wird auch benutzt, um sich gegen sogenannte "spoof attacks" zu verteidigen, bei denen
sich eine Person als jemand anderes ausgibt.
d95 10
a104 7
X11 Forwarding erlaubt die Verschl&uuml;sselung von X Window's Netzwerkverkehr, also Netzwerk&uuml;bertragung, auf eine Weise, so dass
niemand den Datenverkehr mitlesen oder b&ouml;sartige Kommandos einschleusen kann.
Das Programm setzt DISPLAY automatisch auf dem Server, und leitet jegliche X11-Verbindung &uuml;ber den sicheren Tunnel weiter.
Gef&auml;lschte Xauthority Informationen werden automatisch generiert und an die
entfernte Maschine weitergeleitet; der lokale Client untersucht automatisch ankommende
X11 Verbindungen und ersetzt die gef&auml;lschten Authorisierung-Daten mit den echten Daten.
(und gibt der entfernten Maschine nie die echten Informationen).
d111 2
a112 1
Standard Internet Applikationen wie POP k&ouml;nnen damit sicherer gemacht werden.
d116 6
a121 5
Starke Authentifizierung sch&uuml;tzt gegen verschiedene Sicherheitsprobleme, z.B. 
IP spoofing, fake routes, und DNS spoofing.  Die Authentifizierungsmethoden sind:
.rhosts zusammen mit RSA basierter Host Authentifizierung, pure
RSA Authentifizierung, Einmal-Passw&ouml;rter mit s/key, und letztlich Authentifizierung
mittels <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kerberos&amp;sektion=8">Kerberos</a>.
d126 11
a136 9
Ein Authentifizierungs Agent, der auf dem Laptop oder der lokalen Maschine des Users l&auml;uft,
kann benutzt werden, um den RSA-Authentifizierungs-Schl&uuml;ssel des Users bereitzuhalten.
OpenSSH leitet die Verbindung automatisch an den Authenfizierungsagenten &uuml;ber 
jede Verbindung weiter, und es gibt keine
Notwendigkeit die RSA Authentifizierungsschl&uuml;ssel auf jeder Maschine im Netzwerk zu haben 
(mit Ausnahme der lokalen Maschine des Users).
Die Authentifizierungsprotokolle geben die Schl&uuml;ssel niemals preis; sie k&ouml;nnen nur dazu
benutzt werden, um abzufragen, ob der User einen entsprechenden Schl&uuml;ssel hat.
Eventuell k&ouml;nnte der Agent auf einer Smart-Card beruhen, die alle Authentifizierungsberechnungen macht.
d145 5
a149 3
Seit der Version 2.0 unterst&uuml;tzt OpenSSH neben den SSH Protokollversionen 1.3 und 1.5 auch das SSH Protokoll Version 2.0.  
Dieses Protokoll vermeidet die Benutzung des RSA Algorithmus -- da zur Zeit der Einf&uuml;hrung des Protokolls 2.0 das 
RSA Patent noch g&uuml;ltig war -- und benutzt stattdessen die frei benutzbaren DH und DSA Algorithmen.
d152 3
a154 2
Daher gibt dir OpenSSH das beste aus beiden Welten. Du kannst mit <strong>beiden</strong> Typen
von SSH Clients und Servern arbeiten und kommunizieren !
d156 2
a157 1
&nbsp;<strong>SFTP Client und Server Unterst&uuml;tzung in sowohl SSH1 als auch dem SSH2 Protokoll</strong>
d183 1
a183 1
Originally [OpenBSD: features.html,v 1.16 ]
d185 1
a185 1
$Translation: features.html,v 1.15 2002/05/20 12:27:16 jufi Exp $
d187 1
a187 1
<br><small>$OpenBSD: features.html,v 1.16 2002/05/19 11:54:53 jufi Exp $</small>
@


1.13
log
@
better html
@
text
@d61 1
a61 1
<a href=http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&amp;sektion=8>ssl</a>)
d167 1
a167 1
$Translation: features.html,v 1.14 2002/05/19 20:20:40 jufi Exp $
@


1.12
log
@
copyrights extended to 2002
@
text
@d1 1
a1 1
<!DOCTYPE HTML PUBLIC  "-//IETF//DTD HTML Strict//EN">
d5 1
a5 1
<link rev=made href=mailto:www@@openbsd.org>
d7 2
d17 2
a18 1
<h2><font color=#e00000>Features</font><hr></h2>
d61 1
a61 1
<a href=http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&sektion=8>ssl</a>)
d65 1
a65 1
(z.B. <a href=http://www.openssl.org/>OpenSSL</a>).
d109 1
a109 1
mittels <a href=http://www.openbsd.org/cgi-bin/man.cgi?query=kerberos&sektion=8>Kerberos</a>.
d142 1
a142 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&sektion=1">sftp(1)</a>
d144 1
a144 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&sektion=8">
d162 2
a163 2
<a href="index.html"><img height=24 width=24 src=../back.gif border=0 alt=OpenSSH></a> 
<a href=mailto:www@@openbsd.org>www@@openbsd.org</a>
d165 1
a165 1
Originally [OpenBSD: features.html,v 1.14 ]
d167 1
a167 1
$Translation: features.html,v 1.13 2002/01/20 11:27:50 jufi Exp $
d169 1
a169 1
<br><small>$OpenBSD: features.html,v 1.14 2002/01/20 11:19:05 jufi Exp $</small>
@


1.11
log
@sync with badlands translation CVS; work by Paul Weissmann
@
text
@d8 1
a8 1
<meta name="copyright" content="This document copyright 1996-1999 by OpenBSD.">
d162 1
a162 1
Originally [OpenBSD: features.html,v 1.13 ]
d164 1
a164 1
$Translation: features.html,v 1.12 2001/11/15 19:43:57 paul Exp $
d166 1
a166 1
<br><small>$OpenBSD: features.html,v 1.13 2001/09/28 17:46:18 jufi Exp $</small>
@


1.10
log
@
X Windows -> X Window System
@
text
@d29 1
a29 1
<li>Starke Authentifizierung (Public Key,  Einmal-Passwort und Kerberos Authentifizierung)
d40 1
a40 1
&nbsp;<strong>Open Source Project</strong>
d42 1
a42 1
Der OpenSSH Source Code ist f&uuml;r jeden frei &uuml;ber das Internet erh&auml;ltlich.
d55 1
a55 1
Betriebssysteme, und alle anderen Netzwerk-Komponenten ssh integriert h&auml;tten.
d59 1
a59 1
 wurden aus dem SourceCode entfernt:
d85 2
a86 2
X11 forwarding erlaubt die Verschl&uuml;sselung von X Windows Netzwerkverkehr, also Netzwerk&uuml;bertragung, auf eine Weise, so dass
niemand den Datenverkehr mitlesen kann oder b&ouml;sartige Kommandos einschleusen kann.
d90 1
a90 1
X11 Verbindungen und ersetzt die gef&auml;lschten Authorisierung-Daten  mit den echten Daten.
d96 1
a96 1
Port forwarding erlaubt das Weiterleiten von TCP/IP Verbindungen zu einer
d100 1
a100 1
&nbsp;<strong>Starke Authentifikation</strong>
d103 1
a103 1
IP spoofing, fakes routes, und DNS spoofing.  Die Authentifizierungsmethoden sind:
d124 2
a125 2
OpenSSH Versionen vor 2.0 unterst&uuml;tzen die SSH 1.3 und 1.5 Protokolle
, die es erlauben mit den meisten UNIX-, Windows- und anderen kommerziellen
d155 2
a156 2
Datenkompression vor der Verschl&uuml;sselung beschleunigt die Leistung (performane) f&uuml;r 
langsame Netzwerkverbindungen.
d164 1
a164 1
$Translation: features.html,v 1.11 2001/09/30 17:27:49 jufi Exp $
@


1.9
log
@
several fixes.
@
text
@d27 1
a27 1
<li>X11 Forwarding (verschl&uuml;sselt X Windows Netzwerkverkehr)
d162 1
a162 1
Originally [OpenBSD: features.html,v 1.12 ]
d164 1
a164 1
$Translation: features.html,v 1.10 2001/09/19 18:09:24 jufi Exp $
d166 1
a166 1
<br><small>$OpenBSD: features.html,v 1.12 2001/02/23 06:26:29 deraadt Exp $</small>
@


1.8
log
@
Sync with translation CVS
@
text
@d29 1
a29 1
<li>Starke Autentifizierung (Public Key,  Einmal-Passwort und Kerberos Autentifizierung)
d31 1
a31 1
<li>Interoperatibilit&auml;t(Arbeitet kompatibel zu den SSH 1.3, 1.5, und 2.0 Protokoll Standards)
d34 1
a34 1
<li>Daten Kompression
d68 1
a68 1
+&nbsp;<strong>Starke Verschl&uuml;sselung</strong>
d79 1
a79 1
sich jemand als jemand anderes ausgibt.
d89 1
a89 1
entfernte Maschine weitergeleitet; der lokale Client untersucht autmatisch ankommende
d125 2
a126 2
, die es erlauben mit den meisten UNIX, Windows und anderen kommerziellen
ssh Implementationen zu kommunizieren.
d134 1
a134 1
von ssh Clients und Servers interoperieren!
d164 1
a164 1
$Translation: features.html,v 1.8 2001/02/23 18:41:06 jufi Exp $
@


1.7
log
@
Sync with translation CVS.
@
text
@d52 1
a52 1
<a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/LICENCE?rev=1.3">
d162 1
a162 1
Originally [OpenBSD: features.html,v 1.11 ]
d164 1
a164 1
$Translation: features.html,v 1.7 2001/02/17 18:05:39 jufi Exp $
d166 1
a166 1
<br><small>$OpenBSD: features.html,v 1.11 2001/02/16 14:35:08 deraadt Exp $</small>
@


1.6
log
@We are now in a new year. Crank copyright accordingly. ok markus@@
@
text
@d8 1
a8 1
<meta name="copyright" content="This document copyright 1996-2001 by OpenBSD.">
d16 1
a16 1
OpenSSH ist eine freie "secure shell" Suite , die Verschl&uuml;sselung f&uuml;r 
d31 2
a32 1
<li>Interoperatibilit&auml;t(Arbeitet kompatibel zu den SSH Remote Protokoll Standards 1.3, 1.5, und 2.0)
d50 6
a55 3
OpenSSH wird nicht von einer restriktiven Lizenz beschr&auml;nkt. Es kann f&uuml;r jeglichen Zweck genutzt werden, und das schliesst explizit auch 
kommerzielle Nutzung ein. Wir finden, dass die Welt besser w&auml;re wenn jeder Router, Netzwerkger&auml;t und jedes Betriebssystem ssh integriert
h&auml;tte.
d124 2
a125 2
OpenSSH Versionen vor 2.0 unterst&uuml;tzen die SSH remote Protokoll Versionen 1.3
und 1.5, die es erlauben mit den meisten UNIX, Windows und anderen kommerziellen
d128 1
a128 1
Mit OpenSSH Version 2.0, unterst&uuml;tzt OpenSSH neben den Protokoll Versionen 1.3 und 1.5 auch das SSH Protokoll Version 2.0.  
d130 1
a130 1
RSA Patent noch g&uuml;ltig war -- und benutzt stattdessen den frei benutzbare DSA Algorithmus.
d133 1
a133 1
Daher gibt dir OpenSSH das beste aus beiden Welten. Du kannst mit beiden Typen
d136 9
d162 1
a162 1
Originally [OpenBSD: features.html,v 1.7 ]
d164 1
a164 1
$Translation: features.html,v 1.5 2000/09/26 19:00:48 jufi Exp $
d166 1
a166 1
<br><small>$OpenBSD: features.html,v 1.5 2000/09/26 19:14:36 jufi Exp $</small>
@


1.5
log
@
More updates and a little cleanup.
@
text
@d8 1
a8 1
<meta name="copyright" content="This document copyright 1996-1999 by OpenBSD.">
d153 1
a153 1
<br><small>$OpenBSD: features.html,v 1.7 2000/09/25 20:07:41 deraadt Exp $</small>
@


1.4
log
@
And the 8-bit cleanup for openssh.. faq to follow
@
text
@d51 1
a51 6
h&auml;tte.<p>
Trotzdem musst dir klar sein, dass in den USA das SSH Version 1 Protokoll die Benutzung des RSA-public-key Algorithmus verlangt. 
<p>
Abh&auml;ngig von deiner Anwendung kann eine Lizensierung von RSA notwendig sein, bis ihr Patent im September 200 
ausl&auml;uft. Wenn du das SSH Protokoll 1 nciht benutzt ,sondern stattdessen nur das Protokoll 2, benutzt du 
anstatt von RSA den frei benutzbaren DSA Algorithmus.
d124 3
a126 1
Mit OpenSSH Version 2.0, unterst&uuml;tzt OpenSSH neben den Protokoll Versionen 1.3 und 1.5 auch das SSH Protokoll Version 2.0.  Dieses Protokoll vermeidet die Benutzugn des RSA Algorithmus und benutzt stattdessen den frei benutzbare DSA Algorithmus.
d149 1
a149 1
Originally [OpenBSD: features.html,v 1.6 ]
d151 3
a153 2
$Translation: features.html,v 1.4 2000/06/30 18:44:25 jufi Exp $
<br><small>$OpenBSD: features.html,v 1.6 2000/05/05 17:50:27 deraadt Exp $</small>
@


1.3
log
@Sync with Badlands Translation CVS. Work by Jufi
@
text
@d16 1
a16 1
OpenSSH ist eine freie "secure shell" Suite , die Verschlüsselung für 
d18 1
a18 1
oder auch Dateiübertragung von oder zu einem 'remote' Rechner.
d20 1
a20 1
Das folgendende ist eine Liste der Fähigkeiten (Features) von OpenSSH:
d26 3
a28 3
<li>Starke Verschlüsselung (3DES, Blowfish)
<li>X11 Forwarding (verschlüsselt X Windows Netzwerkverkehr)
<li>Port Forwarding (verschlüsselte Kanäle für bestimmte Protokolle)
d31 1
a31 1
<li>Interoperatibilität(Arbeitet kompatibel zu den SSH Remote Protokoll Standards 1.3, 1.5, und 2.0)
d41 1
a41 1
Der OpenSSH Source Code ist für jeden frei über das Internet erhältlich.
d44 1
a44 1
und korrigiert werden können. Das führt zu sicherem Code.
d49 3
a51 3
OpenSSH wird nicht von einer restriktiven Lizenz beschränkt. Es kann für jeglichen Zweck genutzt werden, und das schliesst explizit auch 
kommerzielle Nutzung ein. Wir finden, dass die Welt besser wäre wenn jeder Router, Netzwerkgerät und jedes Betriebssystem ssh integriert
hätte.<p>
d54 2
a55 2
Abhängig von deiner Anwendung kann eine Lizensierung von RSA notwendig sein, bis ihr Patent im September 200 
ausläuft. Wenn du das SSH Protokoll 1 nciht benutzt ,sondern stattdessen nur das Protokoll 2, benutzt du 
d65 2
a66 2
Die symmetrische Chiffre IDEA ist nicht mehr verfügbar, da sie in vielen Ländern patentiert ist.
Anstattdessen empfehlen wir die Benutzung einer der anderen verfügbaren Chiffren. (Wir sehen keine Rechtfertigung für
d69 1
a69 1
+&nbsp;<strong>Starke Verschlüsselung</strong>
d72 3
a74 3
OpenSSH benutzt 3DES und Blowfish als Verschlüsselungsalgorithmus.  Sie sind beide patentfrei.
Triple DES ist ein sehr gut verstandener Chiffrieralgorithmus, der den Zahn der Zeit übestanden hat
und eine starke Verschlüsselung bereitstellt.
d76 4
a79 4
benutzt werden kann, die eine schnellere Verschlüsselung benötigen.
Die Verschlüsselung beginnt vor der Authentifizierung und es werden keine Passwörter oder andere
Daten im Klartext übermittelt.
Verschlüsselung wird auch benutzt, um sich gegen sogenannte "spoof attacks" zu verteidigen, bei denen
d86 4
a89 4
X11 forwarding erlaubt die Verschlüsselung von X Windows Netzwerkverkehr, also Netzwerkübertragung, auf eine Weise, so dass
niemand den Datenverkehr mitlesen kann oder bösartige Kommandos einschleusen kann.
Das Programm setzt DISPLAY automatisch auf dem Server, und leitet jegliche X11-Verbindung über den sicheren Tunnel weiter.
Gefälschte Xauthority Informationen werden automatisch generiert und an die
d91 1
a91 1
X11 Verbindungen und ersetzt die gefälschten Authorisierung-Daten  mit den echten Daten.
d98 2
a99 2
entfernten Maschine über ein verschlüsseltes Protokoll.
Standard Internet Applikationen wie POP können damit sicherer gemacht werden.
d103 1
a103 1
Starke Authentifizierung schützt gegen verschiedene Sicherheitsprobleme, z.B. 
d106 1
a106 1
RSA Authentifizierung, Einmal-Passwörter mit s/key, und letztlich Authentifizierung
d112 3
a114 3
Ein Authentifizierungs Agent, der auf dem Laptop oder der lokalen Maschine des Users läuft,
kann benutzt werden, um den RSA-Authentifizierungs-Schlüssel des Users bereitzuhalten.
OpenSSH leitet die Verbindung automatisch an den Authenfizierungsagenten über 
d116 1
a116 1
Notwendigkeit die RSA Authentifizierungsschlüssel auf jeder Maschine im Netzwerk zu haben 
d118 3
a120 3
Die Authentifizierungsprotokolle geben die Schlüssel niemals preis; sie können nur dazu
benutzt werden, um abzufragen, ob der User einen entsprechenden Schlüssel hat.
Eventuell könnte der Agent auf einer Smart-Card beruhen, die alle Authentifizierungsberechnungen macht.
d123 1
a123 1
&nbsp;<strong>Interoperatibilität</strong>
d125 1
a125 1
OpenSSH Versionen vor 2.0 unterstützen die SSH remote Protokoll Versionen 1.3
d129 1
a129 1
Mit OpenSSH Version 2.0, unterstützt OpenSSH neben den Protokoll Versionen 1.3 und 1.5 auch das SSH Protokoll Version 2.0.  Dieses Protokoll vermeidet die Benutzugn des RSA Algorithmus und benutzt stattdessen den frei benutzbare DSA Algorithmus.
d138 1
a138 1
OpenSSH gibt auch Tickets für Kerberos und AFS an die entfernte
d140 1
a140 1
zugreifen, ohne sein Passwort wieder eintippen zu müssen.
d145 1
a145 1
Datenkompression vor der Verschlüsselung beschleunigt die Leistung (performane) für 
d154 1
a154 1
$Translation: features.html,v 1.3 2000/05/07 21:06:56 jufi Exp $
@


1.2
log
@Sync with Badlands Translation CVS. Work by Jufi
@
text
@d50 2
a51 1
kommerzielle Nutzung ein.
d54 3
a56 4
Lizensierung von RSA
kann notwendig sein, bis deren Patent im September 2000 ausläuft. Wenn du
anstatt des SSH Protokolls 1 nur das SSH Protokoll 2 benutzt, verwendest 
du stattdessen den frei verfügbaren DSA Algorithmus.
d64 4
d71 1
d81 1
d85 1
d94 1
d109 1
d122 2
a123 1
+&nbsp;<strong>Interoperatibilität</strong>
d135 1
d142 1
d152 1
a152 1
Originally [OpenBSD: features.html,v 1.5 ]
d154 2
a155 3
$Translation: features.html,v 1.2 2000/05/06 12:28:56 jufi Exp $
<br><small>$OpenBSD: features.html,v 1.5 2000/05/05 05:22:41 deraadt Exp $</small>

@


1.1
log
@New files, added by Jufi
@
text
@a13 1
<p>
d15 2
a16 1
OpenSSH ist eine freie "secure shell" suite , die Verschlüsselung für 
d22 1
a22 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Features</strong></td></tr></table>
d24 10
a33 30
<li>
Open Source Projekt
</li>
<li>
Freie Lizenzpolitik
</li>
<li>
Starke Verschlüsselung (3DES, Blowfish)
</li>
<li>
X11 Forwarding (verschlüsselter X Windows Verkehr)
</li>
<li>
Port Forwarding (verschlüsselte Kanäle für legacy protocols)
</li>
<li>
Starke Authentifizierung (Public Key,  One-Time Password und Kerberos Authentifizierung)
</li>
<li>
Agent Forwarding (Single-Sign-On)
</li>
<li>
Interoperabilität (Arbeitet mit den SSH Remote Protocol Standards 1.3 und 1.5)
</li>
<li>
Kerberos und AFS Ticket Passing
</li>
<li>
Datenkompression
</li>
d36 4
a39 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Open Source Projekt</strong></td></tr></table>
d46 2
a47 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Freie Lizensierung</strong></td></tr></table>
d51 6
a56 3
Trotzdem musst dir klar sein, dass in den USA das SSH Version 1 Protokoll die Benutzung
des RSA-public-key Algorithmus verlangt. Eine Lizensierung von RSA kann notwendig 
sein, bis das Patent im September 2000 ausläuft.
d65 1
a65 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Starke Verschlüsselung</strong></td></tr></table>
d77 1
a77 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>X11 Forwarding</strong></td></tr></table>
d87 1
a87 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Port Forwarding</strong></td></tr></table>
d93 1
a93 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Starke Authentifizierung</strong></td></tr></table>
d101 1
a101 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Agent Forwarding</strong></td></tr></table>
d113 1
a113 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Interoperatibilität</strong></td></tr></table>
d115 3
a117 2
OpenSSH unterstützt das SSH remote Protokoll in den Versionen 1.3 und 1.5 , was ihm erlaubt mit
den meisten UNIX, Windows und anderen kommerziellen Implemenationen zu reden.
d119 2
a120 3
OpenSSH unterstützt das SSH remote Protokoll in der Version 2.0 noch nicht; aber unsere
Meinung nach macht das kaum etwas, da fast alle ssh-Programme im Protokoll
1.5 reden, bzw. kommunizieren können.
d122 4
a125 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Kerberos und AFS Ticket Passing</strong></td></tr></table>
d131 1
a131 1
<table width="100%" cellpadding="0" border="0"><tr><td align="left" bgcolor="#99bbdd"><font color=#e02020>&nbsp;<strong>Datenkompression</strong></td></tr></table>
d140 1
a140 3
Originally [OpenBSD: features.html,v 1.4 ]
<br>
$Translation: features.html,v 1.1 2000/04/13 19:19:54 jufi Exp $
d142 2
a143 1
$OpenBSD: features.html,v 1.4 1999/12/06 20:10:35 deraadt Exp $</small>
@

