head	1.15;
access;
symbols;
locks; strict;
comment	@# @;


1.15
date	2014.04.01.19.44.54;	author deraadt;	state dead;
branches;
next	1.14;

1.14
date	2011.09.20.11.01.37;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.25.16.49.44;	author jufi;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.01.10.48.43;	author saad;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.15.04.26.13;	author saad;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.25.22.14.52;	author saad;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.31.10.59.40;	author saad;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.18.09.53.59;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.22.20.11.59;	author jufi;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.14.20.10.31;	author jufi;	state Exp;
branches;
next	1.5;

1.5
date	2004.03.23.12.22.48;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.05.07.16.17;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.08.11.58.49;	author jufi;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.13.21.24.23;	author jufi;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.13.11.19.09;	author jufi;	state Exp;
branches;
next	;


desc
@@


1.15
log
@give up on translation
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Fonctionnalités de OpenSSH</title>
<link rev=made href="mailto:www@@openbsd.org">
<meta name="resource-type" content="document">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="description" content="OpenSSH Features">
<meta name="keywords" content="OpenSSH,features">
<meta name="distribution" content="global">
<meta name="copyright" content="This document copyright 1996-2005 by OpenBSD.">
</head>

<body bgcolor="#ffffff" text="#000000" link="#23238E">
<a href="index.html"><img alt="[OpenSSH]" height="30" width="141"
src="../images/smalltitle.gif" border="0"></a>
<p>
<h2><font color="#e00000">Fonctionnalités</font></h2>
<hr>
OpenSSH est une mise en oeuvre libre du protocole SSH/SecSH qui fournit
des fonctionnalités de chiffrement pour les applications telles que la
connexion distante (login) ou le transfert de fichiers.
<p>
Les principales fonctionnalités d'OpenSSH sont les suivantes :
<p>

<ul>
<li>Projet Open Source
<li>Licence Libre
<li>chiffrement Fort à l'aide des algorithmes 3DES, Blowfish, AES,
    Arcfour
<li>chiffrement du trafic X Window (X11 Forwarding)
<li>Création de canaux chiffrés pour les protocoles courants (Port
    Forwarding)
<li>Authentification forte à l'aide de clef publique, de mot de passe à
    usage unique et de Kerberos
<li>Agent Forwarding (Single-Sign-On)
<li>Interopérabilité grâce à la conformité aux standards des
    protocoles SSH 1.3, 1.5, et 2.0
<li>Support client et serveur SFTP pour les protocoles SSH1 et SSH2
<li>Transmission des Tickets Kerberos et AFS 
<li>Compression des Données
</ul>
<p>

<hr>
&nbsp;<strong>Projet Open Source</strong>
<p>
Le code source OpenSSH est disponible librement pour tout le monde à
travers Internet. L'objectif est d'encourager la réutilisation et
l'audit du code dont l'examen assure la découverte de bogues et leur
correction par n'importe qui. Ce qui aboutit à un code sûr.
<p>

&nbsp;<strong>Licence Libre</strong> 
<p>
OpenSSH n'est couvert par aucune licence restrictive. Il peut être
utilisé pour tout motif, y compris à des fins commerciales.
<a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/LICENCE?rev=HEAD">La licence</a>
OpenSSH est incluse dans la distribution. Nous pensons sincèrement que
le monde serait meilleur si les routeurs, les équipements réseau, les
systèmes d'exploitation, et toute autre application réseau intégraient
ssh.
<p>

Tous les composants de nature restrictive (i.e. brevets, voir
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&amp;sektion=8">ssl</a>) 
ont été supprimés du code source ; tous les composants sous licence ou
brevetés sont choisis à partir de bibliothèques externes (<a
href="http://www.openssl.org">OpenSSL</a> par exemple). Le code de
chiffrement symétrique IDEA n'est plus disponible, car il est breveté
dans plusieurs pays. Nous recommandons l'utilisation des autres
algorithmes disponibles. (Nous ne voyons aucune justification à
l'utilisation d'un algorithme symétrique breveté, étant donné qu'il
existe plusieurs algorithmes libres).
<p>

&nbsp;<strong>chiffrement fort</strong> 

<p>
OpenSSH utilise les algorithmes de chiffrement libres 3DES Blowfish, AES
et Arcfour.<br>

<b>Triple DES</b> est un algorithme éprouvé et bien compris qui fournit
un chiffrement fort.<br>
<b>Blowfish</b> est un algorithme de chiffrement par blocs rapide
inventé par Bruce Schneier qui peut être utilisé par les personnes
nécessitant une rapidité de chiffrement.<br>
<b><a href="http://www.nist.gov/aes">AES</a></b> est le "US Federal
Information Processing Standard (FIPS) Advanced Encryption Standard"
développé pour remplacer DES. C'est un algorithme de chiffrement par
blocs rapide.<br>
<b>Arcfour</b> est un algorithme de chiffrement par flux rapide. Il
serait compatible avec RC4[TM], un algorithme propriétaire développé par
la société RSA Security Inc.

<p>
Le chiffrement s'effectue avant l'authentification de telle sorte
qu'aucun mot de passe ou toute autre information n'est transmis en
clair. Il est aussi utilisé pour se prémunir contre l'usurpation de
paquets.
<p>

&nbsp;<strong>X11 Forwarding</strong>
<p>
Le transfert X11 permet le chiffrement du trafic distant X Window. Cela
évite l'interception des sessions X distantes ou ou l'insertion de
commandes malicieuses. Le programme positionne automatiquement la
variable DISPLAY sur le serveur et fait suivre toutes les connexions X11
à travers le canal sécurisé. Des données Xauthority simulées sont
générées automatiquement et envoyées à la machine distante. Le client
local examine automatiquement les connexions X11 en entrée et remplace
les données d'autorisation simulées avec les données réelles (en ne
donnant jamais à la machine distante les informations réelles).
<p>

&nbsp;<strong>Port Forwarding</strong>
<p>
Le "Port forwarding" permet l'établissement de connexions TCP/IP entre
machines distantes à travers un canal chiffré. Des applications Internet
courantes telles que POP peuvent être sécurisées de cette manière.
<p>

&nbsp;<strong>Authentification Forte</strong>
<p>
L'authentification forte protège contre plusieurs problèmes de sécurité
comme l'usurpation IP, les fausses routes et l'usurpation DNS. Les
méthodes d'authentification sont : .rhosts avec authentification d'hôte
basée sur RSA, authentification RSA pure, mots de passe à usage unique
avec s/key, et enfin l'authentification
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kerberos&amp;sektion=8">Kerberos</a>. 
<p>

&nbsp;<strong>Agent Forwarding</strong>
<p>
Un agent d'authentification s'exécutant sur le portable ou la station de
travail, permet de garder en mémoire les clés d'authentification RSA ou
DSA de l'utilisateur. OpenSSH fait suivre automatiquement la connexion à
l'agent d'authentification à travers n'importe quelle connexion, et il
n'y a pas besoin de stocker les clés d'authentification RSA ou DSA sur
une machine du réseau (mis à part la propre machine de l'utilisateur).
Les protocoles d'authentification ne révèlent jamais les clés ; ils ne
sont utilisés que pour vérifier que l'agent d'un utilisateur possède une
clé donnée. Éventuellement, l'agent peut s'appuyer sur une carte à puce
pour effectuer les opérations d'authentification.
<p>

&nbsp;<strong>Interopérabilité</strong>
<p>
Les versions OpenSSH antérieures à 2.0 supportent les protocoles SSH 1.3
et SSH 1.5 permettant ainsi la communication avec la plupart des
systèmes UNIX, Windows et les autres implémentations ssh commerciales.
<p>
A partir de sa version 2.0, OpenSSH supporte aussi le protocole SSH 2.0.
Ce protocole évite d'utiliser l'algorithme RSA -- puisqu'au moment de
l'invention du protocole 2.0, le brevet RSA était encore d'actualité --
et emploie, au lieu de cela, les algorithmes libres d'utilisation DH et
DSA.
<p>
OpenSSH fournit ainsi le meilleur des deux mondes. Vous pouvez interagir
avec les <strong>deux</strong> types de clients et serveurs ssh !
<p>

&nbsp;<strong>Support client et serveur SFTP pour les protocoles SSH1 et
SSH2</strong>
<p>
Le support complet de SFTP est assuré depuis la version 2.5.0 et permet
d'utiliser la commande
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1">sftp(1)</a> 
en client. Le sous-système
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&amp;sektion=8"> 
sftp-server(8)</a>
fonctionne automatiquement pour les protocoles SSH1 et SSH2.
<p>

&nbsp;<strong>Transmission des Tickets Kerberos et AFS</strong>
<p>
OpenSSH transmet aussi les tickets pour Kerberos et AFS à la machine
distante. Un utilisateur peut donc accéder à tous ses services Kerberos
et AFS sans avoir besoin de saisir son mot de passe à chaque fois.
<p>

&nbsp;<strong>Compression des Données</strong> 
<p>
La compression des données avant le chiffrement améliore les
performances sur les liens réseau de faible capacité.

<p>
<hr>
<a href="index.html"><img height=24 width=24 src="../back.gif" border=0 alt=OpenSSH></a> 
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br><small>
<!--
Originally [OpenBSD: features.html,v 1.23 ]<br>
$Translation: features.html,v 1.16 2011/09/20 10:58:19 ajacoutot Exp $<br>
-->
$OpenBSD: features.html,v 1.14 2011/09/20 11:01:37 ajacoutot Exp $
</small>

</body>
</html>
@


1.14
log
@Sync with Steelix CVS
@
text
@d197 1
a197 1
$OpenBSD$
@


1.13
log
@sync with steelix translation CVS
@
text
@d71 1
a71 1
chiffrement symmétrique IDEA n'est plus disponible, car il est breveté
d74 1
a74 1
l'utilisation d'un algorithme symmétrique breveté, étant donné qu'il
d144 1
a144 1
clé donnée. Eventuellement, l'agent peut s'appuyer sur une carte à puce
d195 1
a195 1
$Translation: features.html,v 1.15 2006/04/25 13:32:43 ajacoutot Exp $<br>
@


1.12
log
@sync with Steelix CVS
@
text
@d69 1
a69 1
brevetés sont choisis à partir de librairies externes (<a
d195 1
a195 1
$Translation: features.html,v 1.14 2006/02/28 14:39:22 ajacoutot Exp $<br>
@


1.11
log
@sync with Steelix CVS
@
text
@d14 1
a14 1
<body bgcolor="#FFFFFF" text="#000000" link="#23238E">
d82 1
a82 1
et Arcfour.
d85 1
a85 1
un chiffrement fort.
d88 1
a88 1
nécessitant une rapidité de chiffrement.
d195 1
a195 1
$Translation: features.html,v 1.13 2005/07/14 10:30:27 aanriot Exp $<br>
@


1.10
log
@sync with Steelix CVS
@
text
@d11 1
a11 1
<meta name="copyright" content="This document copyright 1996-2004 by OpenBSD.">
d194 2
a195 2
Originally [OpenBSD: features.html,v 1.22 ]<br>
$Translation: features.html,v 1.12 2005/05/25 18:19:25 aanriot Exp $<br>
@


1.9
log
@sync with Steelix CVS
@
text
@d20 3
a22 1
OpenSSH est une mise en oeuvre libre du protocole SSH/SecSH qui fournit des fonctionnalités de chiffrement pour les applications telles que la connexion distante (login) ou le transfert de fichiers.
d30 2
a31 1
<li>chiffrement Fort à l'aide des algorithmes 3DES, Blowfish, AES, Arcfour
d33 2
a34 1
<li>Création de canaux chiffrés pour les protocoles courants (Port Forwarding)
d49 4
a52 5
Le code source OpenSSH est disponible librement pour tout le monde
à travers Internet. L'objectif est d'encourager la réutilisation et
l'audit du code dont l'examen assure la découverte de bogues
et leur correction par n'importe qui. Ce qui aboutit à un code
sûr.  
d60 4
a63 4
OpenSSH est incluse dans la distribution. Nous pensons sincèrement 
que le monde serait meilleur si les routeurs, les équipements 
réseau, les systèmes d'exploitation, et toute autre
application réseau intégraient ssh.
d68 8
a75 9
ont été supprimés du code source ; tous les
composants sous licence ou brevetés sont choisis à partir
de librairies externes (<a href="http://www.openssl.org">OpenSSL</a> par
exemple). Le code de chiffrement symmétrique IDEA n'est plus
disponible, car il est breveté dans plusieurs pays. Nous
recommandons l'utilisation des autres algorithmes disponibles.
(Nous ne voyons aucune justification à l'utilisation d'un
algorithme symmétrique breveté, étant donné
qu'il existe plusieurs algorithmes libres).
d81 2
a82 1
OpenSSH utilise les algorithmes de chiffrement libres 3DES Blowfish, AES et Arcfour.
d84 2
a85 2
<b>Triple DES</b> est un algorithme éprouvé et bien
compris qui fournit un chiffrement fort.
d87 2
a88 2
inventé par Bruce Schneier qui peut être utilisé par
les personnes nécessitant une rapidité de chiffrement.
d98 4
a101 1
Le chiffrement s'effectue avant l'authentification de telle sorte qu'aucun mot de passe ou toute autre information n'est transmis en clair. Il est aussi utilisé pour se prémunir contre l'usurpation de  paquets.
d106 9
a114 8
Le transfert X11 permet le chiffrement du trafic distant X Window. Cela évite l'interception des sessions X distantes ou 
ou l'insertion de commandes malicieuses. Le programme positionne
automatiquement la variable DISPLAY sur le serveur et fait suivre toutes les connexions X11 à travers le canal sécurisé. Des données Xauthority simulées sont générées automatiquement et envoyées
à la machine distante. Le client local examine automatiquement
les connexions X11 en entrée et remplace les données
d'autorisation simulées avec les données réelles
(en ne donnant jamais à la machine distante les informations
réelles).
d119 3
a121 4
Le "Port forwarding" permet l'établissement de connexions TCP/IP
entre machines distantes à travers un canal chiffré.
Des applications Internet courantes telles que POP peuvent être
sécurisées de cette manière.
d126 5
a130 6
L'authentification forte protège contre plusieurs
problèmes de sécurité comme l'usurpation IP, les
fausses routes et l'usurpation DNS. Les méthodes
d'authentification sont : .rhosts avec authentification d'hôte
basée sur RSA, authentification RSA pure, mots de passe à
usage unique avec s/key, et enfin l'authentification
d136 10
a145 10
Un agent d'authentification s'exécutant sur le portable ou la
station de travail, permet de garder en mémoire les clés d'authentification RSA ou DSA de l'utilisateur.
OpenSSH fait suivre automatiquement la connexion à l'agent
d'authentification à travers n'importe quelle connexion, et il
n'y a pas besoin de stocker les clés d'authentification RSA ou
DSA sur une machine du réseau (mis à part la propre
machine de l'utilisateur). Les protocoles d'authentification ne
révèlent jamais les clés ; ils ne sont utilisés que pour vérifier que l'agent d'un utilisateur possède une clé donnée. Eventuellement, l'agent peut
s'appuyer sur une carte à puce pour effectuer les
opérations d'authentification.
d150 12
a161 13
Les versions OpenSSH antérieures à 2.0 supportent les
protocoles SSH 1.3 et SSH 1.5 permettant ainsi la communication avec la
plupart des systèmes UNIX, Windows et les autres implémentations ssh
commerciales.
<p>
A partir de sa version 2.0, OpenSSH supporte aussi le protocole SSH 2.0. Ce protocole évite d'utiliser l'algorithme RSA -- puisqu'au moment de
l'invention du protocole 2.0, le brevet RSA était encore
d'actualité -- et emploie, au lieu de cela, les algorithmes
libres d'utilisation DH et DSA.
<p>
OpenSSH fournit ainsi le meilleur des deux mondes. Vous pouvez
interagir avec les <strong>deux</strong> types de clients et serveurs
ssh !
d167 1
a167 1
Le support complet de SFTP est assuré depuis la version 2.5.0 et permet 
d172 2
a173 2
  sftp-server(8)</a>
fonctionne automatiquement pour les protocoles SSH1 et SSH2. 
d178 3
a180 4
OpenSSH transmet aussi les tickets pour Kerberos et AFS à la
machine distante. Un utilisateur peut donc accéder à tous
ses services Kerberos et AFS sans avoir besoin de saisir son mot de
passe à chaque fois.
d187 1
d195 1
a195 1
$Translation: features.html,v 1.11 2005/01/31 10:47:37 saad Exp $<br>
@


1.8
log
@Sync with Steelix CVS
@
text
@d20 1
a20 3
OpenSSH est une suite libre du protocole SSH/SecSH, fournissant des
fonctionnalités de cryptage pour les services réseau tels
que le login ou le transfert de fichier distant.
d22 1
a22 1
La liste suivante présente des fonctionnalités OpenSSH : 
d28 5
a32 6
<li>Cryptage Fort (3DES, Blowfish, AES, Arcfour)
<li>X11 Forwarding (crypte le trafic X Window System)
<li>Port Forwarding (créé des canaux cryptés pour les
    protocoles usuels)
<li>Authentification Forte (Clé Publique, Mot de passe à
    usage unique et Authentification Kerberos)
d34 2
a35 2
<li>Interopérabilité (Conformité aux standards des
    protocoles SSH 1.3, 1.5, et 2.0)
d46 2
a47 2
à travers Internet. Ce qui encourage la réutilisation et
l'audit du code. L'examen du code assure la découverte de bogues
d55 1
a55 2
utilisé pour tout motif, et cela inclut explicitement
l'utilisation commerciale.
d57 4
a60 4
pour OpenSSH est incluse dans la distribution. Nous avons le sentiment
que le monde serait meilleur si les routeurs, les appareils
réseau, les systèmes d'exploitation, et tout autre
équipement réseau intégraient ssh.
d65 1
a65 1
ont été supprimés du code source; tous les
d68 3
a70 3
exemple). Le code de cryptage symmétrique IDEA n'est plus
disponible, vu qu'il est breveté dans plusieurs pays. Nous
recommandons aux gens d'utiliser un des autres algorithmes disponibles.
d76 1
a76 1
&nbsp;<strong>Cryptage Fort</strong> 
d79 1
a79 2
OpenSSH utilise 3DES Blowfish, AES et arcfour comme algorithmes de
cryptage. Ils sont tous libres.
d82 1
a82 1
compris fournissant un cryptage fort.
d85 1
a85 1
les personnes nécessitant une rapidité de cryptage.
d90 1
a90 1
<b>Arcfour</b> est un algorithme de chiffrement par streams rapide. Il
d92 1
a92 1
RSA Security Inc.
d95 1
a95 4
Le cryptage a lieu avant l'authentification et aucun mot de passe ou
toute autre information n'est transmis en clair. Le cryptage est aussi
utilisé pour se prémunir contre les paquets
usurpés.
d100 1
a100 2
X11 forwarding permet le cryptage du trafic distant X windows, de telle
façon à éviter le furetage de vos xterms distants
d102 2
a103 5
automatiquement DISPLAY sur le serveur, et fait suivre toutes les
connexions X11 à travers le canal sécurisé. Des
informations Xauthority simulées sont
générées automatiquement et envoyées
à la machine distante; le client local examine automatiquement
d112 3
a114 3
Le "Port forwarding" permet de faire suivre des connexions TCP/IP
à une machine distante à travers un canal crypté.
Des applications Internet usuelles telles que POP peuvent être
d122 1
a122 1
fausses routes, et l'usurpation DNS. Les méthodes
d125 1
a125 1
usage unique avec s/key, et finalement authentification
d132 1
a132 2
station de travail de l'utilisateur, peut être utiliser pour
retenir les clés d'authentification RSA ou DSA de l'utilisateur.
d138 2
a139 4
révèlent jamais les clés; ils peuvent être
seulement utilisés pour vérifier que l'agent d'un
utilisateur a une clé donnée. Eventuellement, l'agent peut
s'appuyer sur une carte à puce pour effectuer toutes les
d146 2
a147 2
protocoles SSH 1.3 et SSH 1.5 permettant ainsi la communication avec les
plupart des UNIX, Windows et d'autres implémentations ssh
d150 1
a150 3
A partir de OpenSSH 2.0, en plus du support de protocoles SSH 1.3 et SSH
1.5, OpenSSH supporte aussi le protocole SSH 2.0. Ce protocole
évite d'utiliser l'algorithme RSA -- puisqu'au moment de
d155 1
a155 1
Ainsi, OpenSSH vous fournit le meilleur des deux mondes. Vous pouvez
d163 2
a164 2
A partir de OpenSSH 2.5.0, un support complet de SFTP est inclus,
utilisant la commande
d176 2
a177 2
ses services Kerberos et AFS sans avoir besoin de resaisir son mot de
passe.
d182 1
a182 1
La compression des données avant le cryptage améliore les
d191 1
a191 1
$Translation: features.html,v 1.10 2005/01/17 21:34:03 aanriot Exp $<br>
@


1.7
log
@Sync with Steelix CVS
@
text
@d206 1
d208 2
a209 1
$Translation: features.html,v 1.9 2004/12/22 13:58:12 aanriot Exp $<br>
@


1.6
log
@Sync with Steelix CVS
@
text
@d15 2
a16 1
<img alt="[OpenSSH]" height=30 width=141 SRC="../images/smalltitle.gif">
d206 2
a207 2
Originally [OpenBSD: features.html,v 1.21 ]<br>
$Translation: features.html,v 1.8 2004/11/13 14:33:33 aanriot Exp $<br>
@


1.5
log
@Sync with Steelix CVS
@
text
@d4 1
a4 1
<title>Fonctionnalit&eacute;s de OpenSSH</title>
d17 1
a17 1
<h2><font color="#e00000">Fonctionnalit&eacute;s</font></h2>
d20 2
a21 2
fonctionnalit&eacute;s de cryptage pour les services r&eacute;seau tels
que le login ou le transfert de fichiers distants.
d23 1
a23 1
La liste suivante pr&eacute;sente des fonctionnalit&eacute;s OpenSSH : 
d31 1
a31 1
<li>Port Forwarding (cr&eacute;e des canaux crypt&eacute;s pour les
d33 1
a33 1
<li>Authentification Forte (Cl&eacute; Publique, Mot de passe &agrave;
d36 1
a36 1
<li>Interop&eacute;rabilit&eacute; (Conformit&eacute; aux standards des
d40 1
a40 1
<li>Compression des Donn&eacute;es
d45 1
a45 1
&nbsp;<strong>Project Open Source</strong>
d48 4
a51 4
&agrave; travers Internet. Ce qui encourage la r&eacute;utilisation et
l'audit du code. L'examen du code assure la d&eacute;couverte de bogues
et leur correction par n'importe qui. Ce qui aboutit &agrave; un code
s&ucirc;r.  
d56 2
a57 2
OpenSSH n'est couvert par aucune licence restrictive. Il peut &ecirc;tre
utilis&eacute; pour tout motif, et cela inclut explicitement
d62 2
a63 2
r&eacute;seau, les syst&egrave;mes d'exploitation, et tout autre
&eacute;quipement r&eacute;seau int&eacute;graient ssh.
d68 2
a69 2
ont &eacute;t&eacute; supprim&eacute;s du code source; tous les
composants sous licence ou brevet&eacute;s sont choisis &agrave; partir
d71 2
a72 2
exemple). Le code de cryptage symm&eacute;trique IDEA n'est plus
disponible, vu qu'il est brevet&eacute; dans plusieurs pays. Nous
d74 2
a75 2
(Nous ne voyons aucune justification &agrave; l'utilisation d'un
algorithme symm&eacute;trique brevet&eacute;, &eacute;tant donn&eacute;
d85 1
a85 1
<b>Triple DES</b> est un algorithme &eacute;prouv&eacute; et bien
d88 2
a89 2
invent&eacute; par Bruce Schneier qui peut &ecirc;tre utilis&eacute; par
les personnes n&eacute;cessitant une rapidit&eacute; de cryptage.
d101 2
a102 2
utilis&eacute; pour se pr&eacute;munir contre les paquets
usurp&eacute;s.
d108 1
a108 1
fa&ccedil;on &agrave; &eacute;viter le furetage de vos xterms distants
d111 8
a118 8
connexions X11 &agrave; travers le canal s&eacute;curis&eacute;. Des
informations Xauthority simul&eacute;es sont
g&eacute;n&eacute;r&eacute;es automatiquement et envoy&eacute;es
&agrave; la machine distante; le client local examine automatiquement
les connexions X11 en entr&eacute;e et remplace les donn&eacute;es
d'autorisation simul&eacute;es avec les donn&eacute;es r&eacute;elles
(en ne donnant jamais &agrave; la machine distante les informations
r&eacute;elles).
d124 3
a126 3
&agrave; une machine distante &agrave; travers un canal crypt&eacute;.
Des applications Internet usuelles telles que POP peuvent &ecirc;tre
s&eacute;curis&eacute;es de cette mani&egrave;re.
d131 5
a135 5
L'authentification forte prot&egrave;ge contre plusieurs
probl&egrave;mes de s&eacute;curit&eacute; comme l'usurpation IP, les
fausses routes, et l'usurpation DNS. Les m&eacute;thodes
d'authentification sont : .rhosts avec authentification d'h&ocirc;te
bas&eacute;e sur RSA, authentification RSA pure, mots de passe &agrave;
d142 7
a148 7
Un agent d'authentification s'ex&eacute;cutant sur le portable ou la
station de travail de l'utilisateur, peut &ecirc;tre utiliser pour
retenir les cl&eacute;s d'authentification RSA ou DSA de l'utilisateur.
OpenSSH fait suivre automatiquement la connexion &agrave; l'agent
d'authentification &agrave; travers n'importe quelle connexion, et il
n'y a pas besoin de stocker les cl&eacute;s d'authentification RSA ou
DSA sur une machine du r&eacute;seau (mis &agrave; part la propre
d150 5
a154 5
r&eacute;v&egrave;lent jamais les cl&eacute;s; ils peuvent &ecirc;tre
seulement utilis&eacute;s pour v&eacute;rifier que l'agent d'un
utilisateur a une cl&eacute; donn&eacute;e. Eventuellement, l'agent peut
s'appuyer sur une carte &agrave; puce pour effectuer toutes les
op&eacute;rations d'authentification.
d157 1
a157 1
&nbsp;<strong>Interop&eacute;rabilit&eacute;</strong>
d159 1
a159 1
Les versions OpenSSH ant&eacute;rieures &agrave; 2.0 supportent les
d161 1
a161 1
plupart des UNIX, Windows et d'autres impl&eacute;mentations ssh
d166 3
a168 3
&eacute;vite d'utiliser l'algorithme RSA -- puisqu'au moment de
l'invention du protocole 2.0, le brevet RSA &eacute;tait encore
d'actualit&eacute; -- et emploie, au lieu de cela, les algorithmes
d182 1
a182 1
en client. Le sous-syst&egrave;me
d190 3
a192 3
OpenSSH transmet aussi les tickets pour Kerberos et AFS &agrave; la
machine distante. Un utilisateur peut donc acc&eacute;der &agrave; tous
ses services Kerberos et AFS sans avoir besoin de ressaisir son mot de
d196 1
a196 1
&nbsp;<strong>Compression des Donn&eacute;es</strong> 
d198 2
a199 2
La compression des donn&eacute;es avant le cryptage am&eacute;liore les
performances sur les liens r&eacute;seau de faible capacit&eacute;.
d206 1
a206 1
$Translation: features.html,v 1.7 2004/03/22 14:49:06 saad Exp $<br>
@


1.4
log
@Sync with Steelix CVS
@
text
@d8 2
d22 2
a23 1
<p> La liste suivante pr&eacute;sente des fonctionnalit&eacute;s OpenSSH : 
d27 14
a40 14
  <li>Projet Open Source 
  <li>Licence Libre 
  <li>Cryptage Fort (3DES, Blowfish) 
  <li>X11 Forwarding (crypte le trafic X Window System) 
  <li>Port Forwarding (cr&eacute;e des canaux crypt&eacute;s pour les protocoles 
    usuels)
  <li>Authentification Forte (Cl&eacute; Publique, Mot de passe &agrave; usage 
    unique et Authentification Kerberos) 
  <li>Agent Forwarding (Single-Sign-On)
  <li>Interop&eacute;rabilit&eacute; (Conformit&eacute; aux standards des protocoles 
    SSH 1.3, 1.5, et 2.0) 
  <li>Support client et serveur SFTP pour les protocoles SSH1 et SSH2
  <li>Transmission des Tickets Kerberos et AFS 
  <li>Compression des Donn&eacute;es
a45 29
<p> Le code source OpenSSH est disponible librement pour tout le monde &agrave; 
  travers Internet. Ce qui encourage la r&eacute;utilisation et l'audit du code. 
  L'examen du code assure la d&eacute;couverte de bogues et leur correction par 
  n'importe qui. Ce qui aboutit &agrave; un code s&ucirc;r. 
<p> &nbsp;<strong>Licence Libre</strong> 
<p> OpenSSH n'est couvert par aucune licence restrictive. Il peut &ecirc;tre utilis&eacute; 
  pour tout motif, et cela inclut explicitement l'utilisation commerciale. <a href="http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/LICENCE?rev=HEAD">La 
  licence</a> pour OpenSSH est incluse dans la distribution. Nous avons le sentiment 
  que le monde serait meilleur si les routeurs, les appareils r&eacute;seau, les 
  syst&egrave;mes d'exploitation, et tout autre &eacute;quipement r&eacute;seau 
  int&eacute;graient ssh. 
<p> Tous les composants de nature restrictive (i.e. brevets, voir <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssl&amp;sektion=8">ssl</a>) 
  ont &eacute;t&eacute; supprim&eacute;s du code source; tous les composants sous 
  licence ou brevet&eacute;s sont choisis &agrave; partir de librairies externes 
  (<a href="http://www.openssl.org">OpenSSL</a> par exemple). Le code de cryptage 
  symm&eacute;trique IDEA n'est plus disponible, vu qu'il est brevet&eacute; dans 
  plusieurs pays. Nous recommandons aux gens d'utiliser un des autres algorithmes 
  disponibles. (Nous ne voyons aucune justification &agrave; l'utilisation d'un 
  algorithme symm&eacute;trique brevet&eacute;, &eacute;tant donn&eacute; qu'il 
  existe plusieurs algorithmes libres). 
<p> &nbsp;<strong>Cryptage Fort</strong> 
<p> OpenSSH utilise 3DES et Blowfish comme algorithmes de cryptage. Ils sont tous 
  les deux libres. Triple DES est un algorithme &eacute;prouv&eacute; et bien 
  compris fournissant un cryptage fort. Blowfish est un algorithme en blocs rapide 
  invent&eacute; par Bruce Schneier qui peut &ecirc;tre utilis&eacute; par les 
  personnes n&eacute;cessitant une rapidit&eacute; de cryptage. Le cryptage a 
  lieu avant l'authentification et aucun mot de passe ou toute autre information 
  n'est transmis en clair. Le cryptage est aussi utilis&eacute; pour se pr&eacute;munir 
  contre les paquets usurp&eacute;s. 
d47 58
a105 9
<p> X11 forwarding permet le cryptage du trafic distant X windows, de telle fa&ccedil;on 
  &agrave; &eacute;viter le furetage de vos xterms distants ou l'insertion de 
  commandes malicieuses. Le programme positionne automatiquement DISPLAY sur le 
  serveur, et fait suivre toutes les connexions X11 &agrave; travers le canal 
  s&eacute;curis&eacute;. Des informations Xauthority simul&eacute;es sont g&eacute;n&eacute;r&eacute;es 
  automatiquement et envoy&eacute;es &agrave; la machine distante; le client local 
  examine automatiquement les connexions X11 en entr&eacute;e et remplace les 
  donn&eacute;es d'autorisation simul&eacute;es avec les donn&eacute;es r&eacute;elles 
  (en ne donnant jamais &agrave; la machine distante les informations r&eacute;elles). 
d107 14
a121 10
<p> Port forwarding permet de faire suivre des connexions TCP/IP &agrave; une 
  machine distante &agrave; travers un canal crypt&eacute;. Des applications Internet 
  usuelles telles que POP peuvent &ecirc;tre s&eacute;curis&eacute;es de cette 
  mani&egrave;re. 
<p> &nbsp;<strong>Authentification Forte</strong>
<p> L'authentification forte prot&egrave;ge contre plusieurs probl&egrave;mes 
  de s&eacute;curit&eacute; comme l'usurpation IP, les fausses routes, et l'usurpation 
  DNS. Les m&eacute;thodes d'authentification sont : .rhosts avec authentification 
  d'h&ocirc;te bas&eacute;e sur RSA, authentification RSA pure, mots de passe 
  &agrave; usage unique avec s/key, et finalement authentification <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kerberos&amp;sektion=8">Kerberos</a>. 
d123 17
d141 12
a152 10
<p> Un agent d'authentification s'ex&eacute;cutant sur le portable ou la station
de travail de l'utilisateur, peut &ecirc;tre utiliser pour retenir les
cl&eacute;s d'authentification RSA ou DSA de l'utilisateur. OpenSSH fait suivre
automatiquement la connexion &agrave; l'agent d'authentification &agrave;
travers n'importe quelle connexion, et il n'y a pas besoin de stocker les
cl&eacute;s d'authentification RSA ou DSA sur une machine du r&eacute;seau (mis
&agrave; part la propre machine de l'utilisateur). Les protocoles
d'authentification ne r&eacute;v&egrave;lent jamais les cl&eacute;s; ils peuvent
&ecirc;tre seulement utilis&eacute;s pour v&eacute;rifier que l'agent d'un
utilisateur a une cl&eacute; donn&eacute;e.  Eventuellement, l'agent peut
d155 20
d176 2
a177 18
<p> &nbsp;<strong>Interop&eacute;rabilit&eacute;</strong>
<p> Les versions OpenSSH ant&eacute;rieures &agrave; 2.0 supportent les protocoles 
  SSH 1.3 et SSH 1.5 permettant ainsi la communication avec les plupart des UNIX, 
  Windows et d'autres impl&eacute;mentations ssh commerciales. 
<p> A partir de OpenSSH 2.0, en plus du support de protocoles SSH 1.3 et SSH 1.5, 
  OpenSSH supporte aussi le protocole SSH 2.0. Ce protocole &eacute;vite d'utiliser 
  l'algorithme RSA -- puisqu'au moment de l'invention du protocole 2.0, le brevet 
  RSA &eacute;tait encore d'actualit&eacute; -- et emploie, au lieu de cela, les 
  algorithmes libres d'utilisation DH et DSA. 
<p> Ainsi, OpenSSH vous fournit le meilleur des deux mondes. Vous pouvez interagir 
  avec les <strong>deux</strong> types de clients et serveurs ssh !
<p>
&nbsp;<strong>Support client et serveur SFTP pour les protocoles SSH1 et SSH2
</strong>
<p> A partir de OpenSSH 2.5.0, un support complet de SFTP est inclus, utilisant 
  la commande <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp&amp;sektion=1">sftp(1)</a> 
  en client. Le sous-syst&egrave;me <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sftp-server&amp;sektion=8"> 
  sftp-server(8)</a> fonctionne automatiquement pour les protocoles SSH1 et SSH2. 
d179 9
d189 11
a199 6
<p> OpenSSH transmet aussi les tickets pour Kerberos et AFS &agrave; la machine 
  distante. Un utilisateur peut donc acc&eacute;der &agrave; tous ses services 
  Kerberos et AFS sans avoir besoin de ressaisir son mot de passe.
<p> &nbsp;<strong>Compression des Donn&eacute;es</strong> 
<p> La compression des donn&eacute;es avant le cryptage am&eacute;liore les performances 
  sur les liens r&eacute;seau de faible capacit&eacute;. 
d205 2
a206 2
Originally [OpenBSD: features.html,v 1.19 ]<br>
$Translation: features.html,v 1.4 2004/03/04 18:59:46 saad Exp $<br>
@


1.3
log
@Sync with Steelix CVS
@
text
@d12 1
a12 1
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#23238E">
d141 2
a142 2
Originally [OpenBSD: features.html,v 1.18 ]<br>
$Translation: features.html,v 1.3 2004/01/25 23:08:31 saad Exp $<br>
@


1.2
log
@
DSA as well
@
text
@d9 1
a9 1
<meta name="copyright" content="This document copyright 1996-2002 by OpenBSD.">
d17 3
a19 3
OpenSSH est une suite libre du protocole SSH/SecSH, fournissant des fonctionnalit&eacute;s 
de cryptage pour les services r&eacute;seau tels que le login ou le transfert 
de fichiers distants. 
d24 1
a24 1
  <li>Project Open Source 
d141 2
a142 2
Originally [OpenBSD: features.html,v 1.17 ]<br>
$Translation: features.html,v 1.2 2002/11/13 19:50:24 saad Exp $<br>
@


1.1
log
@
new files from Saad Kadhi and links to them.
@
text
@d97 13
a109 11
<p> Un agent d'authentification s'ex&eacute;cutant sur le portable ou la station 
  de travail de l'utilisateur, peut &ecirc;tre utiliser pour retenir les cl&eacute;s 
  d'authentification RSA de l'utilisateur. OpenSSH fait suivre automatiquement 
  la connexion &agrave; l'agent d'authentification &agrave; travers n'importe 
  quelle connexion, et il n'y a pas besoin de stocker les cl&eacute;s d'authentification 
  RSA sur une machine du r&eacute;seau (mis &agrave; part la propre machine de 
  l'utilisateur). Les protocoles d'authentification ne r&eacute;v&egrave;lent 
  jamais les cl&eacute;s; ils peuvent &ecirc;tre seulement utilis&eacute;s pour 
  v&eacute;rifier que l'agent d'un utilisateur a une cl&eacute; donn&eacute;e. 
  Eventuellement, l'agent peut s'appuyer sur une carte &agrave; puce pour effectuer 
  toutes les op&eacute;rations d'authentification.
d141 2
a142 2
Originally [OpenBSD: features.html,v 1.16 ]<br>
$Translation: features.html,v 1.1 2002/11/13 07:38:19 saad Exp $<br>
@

