head	1.1;
access;
symbols;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2005.11.10.22.54.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.1
log
@my talk in venice
mostly just more material added on randomized malloc & mmap
@
text
@
Sample of allocation randomization


  (lots of details skipped, ie. shared libraries, etc)

Note: per-process address space is larger than shown: 3.75GB



tiny allocations done with
malloc() are randomly allocated
within a "bucket" page

allocations with malloc() over
pagesize are simply allocated
using mmap() 

mmap() gives us "gap pages"
(more on that later..)



mmap()-allocated memory

malloc()-allocated memory
(page size or greater)

malloc()-allocated memory
(objects < page in size)



@
