head	1.18;
access;
symbols;
locks; strict;
comment	@# @;


1.18
date	2017.02.06.18.55.43;	author tb;	state Exp;
branches;
next	1.17;
commitid	vtopsVj0vMsJadxe;

1.17
date	2017.02.06.17.24.32;	author tb;	state Exp;
branches;
next	1.16;
commitid	p4MExn9mNCOwPg7Q;

1.16
date	2016.11.19.13.15.10;	author tb;	state Exp;
branches;
next	1.15;
commitid	O4NKkV004kzxq6aY;

1.15
date	2016.11.19.13.09.36;	author tb;	state Exp;
branches;
next	1.14;
commitid	s9WbxXIDTgQILyKc;

1.14
date	2016.09.24.03.22.12;	author tb;	state Exp;
branches;
next	1.13;
commitid	aaAqUbOruqNbnWny;

1.13
date	2016.08.15.02.22.06;	author tb;	state Exp;
branches;
next	1.12;
commitid	3DeixV5YkPOb78RN;

1.12
date	2016.08.08.00.40.58;	author tb;	state Exp;
branches;
next	1.11;
commitid	ZT28bgZ9SZjct8br;

1.11
date	2016.07.23.20.04.29;	author benno;	state Exp;
branches;
next	1.10;
commitid	itm6Y0SzD2qbZYCE;

1.10
date	2016.04.24.20.08.48;	author tj;	state Exp;
branches;
next	1.9;
commitid	oyc80THUANK2zRxQ;

1.9
date	2016.03.29.14.58.59;	author tb;	state Exp;
branches;
next	1.8;
commitid	4PiiSh9UsDhQuzhb;

1.8
date	2016.03.22.10.54.42;	author sthen;	state Exp;
branches;
next	1.7;
commitid	cyODCFvIgxpUoVc0;

1.7
date	2016.03.21.05.46.19;	author beck;	state Exp;
branches;
next	1.6;
commitid	zEx6zFkNSFFExu0v;

1.6
date	2015.11.23.13.16.33;	author tb;	state Exp;
branches;
next	1.5;
commitid	GVCrfOHnRdztaaKi;

1.5
date	2015.10.19.13.26.26;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	j5hzf8236n5PgcOj;

1.4
date	2015.08.31.19.32.15;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	AGCmHSWk08UceEWt;

1.3
date	2015.08.30.17.32.13;	author beck;	state Exp;
branches;
next	1.2;
commitid	yybp5RMBaOOPlPXw;

1.2
date	2015.08.30.16.24.40;	author beck;	state Exp;
branches;
next	1.1;
commitid	ejkn27UuKjlaYiDz;

1.1
date	2015.08.30.16.23.13;	author beck;	state Exp;
branches;
next	;
commitid	RxRJjc8lIVJtnjpu;


desc
@@


1.18
log
@strip leading underbars from C symbols in assembler. this trades historical
accuracy for less confusion.

hat tip to guenther
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>OpenBSD: Crash Reports</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="description" content="How to report an OpenBSD kernel crash">
<meta name="copyright" content="This document copyright 1998-2016 by OpenBSD.">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/report.html">
<style type="text/css">
  h3, h4 { color: #0000e0; }
</style>
</head>

<body bgcolor="#ffffff" text="#000000" link="#23238e">

<h2>
<a href="index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">Crash Reports</font>
</h2>
<hr>
<p>

<h3>Minimum information for kernel problems</h3>

Familiarize yourself with
<a href="report.html">the general bug reporting procedures</a>
first.
All of that will apply.
When reporting a kernel panic or crash, please remember:

<ul>
  <li><i>We need the console output on the screen</i>.
    Capture it and save it.
    Serial consoles are best, but if you are on a VGA console you can
    <a href="faq/faq7.html">scroll the console back</a>
    and take readable pictures with a phone or camera.<br>

  <li><i>If the kernel panicked we need the traceback.</i>
    It may be displayed on the screen.
    If you are at a
    <tt><a href="http://man.openbsd.org/ddb.4">ddb</a>&gt;</tt>
    prompt, type <tt>trace</tt>.
    If you are running SMP, use the <tt>mach ddbcpu N</tt> command for each
    of the <tt>N</tt> processors you have and repeat the <tt>trace</tt>
    command for each processor.<br>

  <li><i>We need the process list.</i>
    Use the command <tt>ps</tt> to get that.
</ul>

<i>
Reports without the above information are useless.
This is the minimum we need to be able to track down the issue.
</i>

<h3>Additional information you can send</h3>

In some situations more information is desirable.
Below are outlined some additional steps you can take in certain situations:

<ul>
  <li><i>If your crash appears to involve filesystems.</i>
    The following additional things would be helpful
    <ul>
      <li>The output of the
        <tt><a href="http://man.openbsd.org/ddb.4">ddb</a>&gt;</tt> command
        <tt>show uvm</tt>
      <li>The output of the
        <tt><a href="http://man.openbsd.org/ddb.4">ddb</a>&gt;</tt>
        command <tt>show bcstats</tt>
      <li>The output of the <tt>mount</tt> command from your running machine, so
        we know what filesystems are mounted and how.
    </ul>
  <li> ... XXX boot crash? XXX
  <li> ... XXX show regs? XXX
</ul>

<h3>Lost the panic message?</h3>

Under some circumstances, you may lose the very first message of a panic,
stating the reason for the panic.

<blockquote><pre>
ddb> <b>show panic</b>
0:      kernel: page fault trap, code=0
ddb>
</pre></blockquote>

<h3>Note for SMP systems</h3>

You should get a trace from each processor as part of your report:

<blockquote><pre>
ddb{0}> <b>trace</b>
pool_get(d05e7c20,0,dab19ef8,d0169414,80) at pool_get+0x226
fxp_add_rfabuf(d0a62000,d3c12b00,dab19f10,dab19f10) at fxp_add_rfabuf+0xa5
fxp_intr(d0a62000) at fxp_intr+0x1e7
Xintr_ioapic0() at Xintr_ioapic0+0x6d
--- interrupt ---
idle_loop+0x21:
ddb{0}> <b>machine ddbcpu 1</b>
Stopped at      Debugger+0x4:   leave
ddb{1}> <b>trace</b>
Debugger(d0319e28,d05ff5a0,dab1bee8,d031cc6e,d0a61800) at Debugger+0x4
i386_ipi_db(d0a61800,d05ff5a0,dab1bef8,d01eb997) at i386_ipi_db+0xb
i386_ipi_handler(b0,d05f0058,dab10010,d01d0010,dab10010) at i386_ipi_handler+0x
4a
Xintripi() at Xintripi+0x47
--- interrupt ---
i386_softintlock(0,58,dab10010,dab10010,d01e0010) at i386_softintlock+0x37
Xintrltimer() at Xintrltimer+0x47
--- interrupt ---
idle_loop+0x21:
ddb{1}>
</pre></blockquote>

Repeat the <tt>machine ddbcpu x</tt> followed by <tt>trace</tt> for each
processor in your machine.

<h3>How do I gather further information from a kernel crash?</h3><p>

A typical kernel crash on OpenBSD might look like this:

<blockquote><pre>
kernel: page fault trap, code=0
Stopped at    <b>pf_route+0x263</b>:        mov     0x40(%edi),%edx
ddb>
</pre></blockquote>

This crash happened at offset <tt>0x263</tt> in the function <tt>pf_route</tt>.

<p>
The first command to run from the
<a href="http://man.openbsd.org/ddb">ddb(4)</a> prompt is <tt>trace</tt>:

<blockquote><pre>
ddb> <b>trace</b>
<b>pf_route</b>(e28cb7e4,e28bc978,2,1fad,d0b8b120) at <b>pf_route+0x263</b>
pf_test(2,1f4ad,e28cb7e4,b4c1) at pf_test+0x706
pf_route(e28cbb00,e28bc978,2,d0a65440,d0b8b120) at pf_route+0x207
pf_test(2,d0a65440,e28cbb00,d023c282) at pf_test+0x706
ip_output(d0b6a200,0,0,0,0) at ip_output+0xb67
icmp_send(d0b6a200,0,1,a012) at icmp_send+0x57
icmp_reflect(d0b6a200,0,1,0,3) at icmp_reflect+0x26b
icmp_input(d0b6a200,14,0,0,d0b6a200) at icmp_input+0x42c
ipv4_input(d0b6a200,e289f140,d0a489e0,e289f140) at ipv4_input+0x6eb
ipintr(10,10,e289f140,e289f140,e28cbd38) at ipintr+0x8d
Bad frame pointer: 0xe28cbcac
ddb>
</pre></blockquote>

This tells us what function calls lead to the crash.

<p>
To find out the particular line of C code that caused the crash, you can
do the following:

<p>
Find the source file where the crashing function is defined.
In this example, that would be <tt>pf_route()</tt> in <tt>/sys/net/pf.c</tt>.
Use <a href="http://man.openbsd.org/objdump">objdump(1)</a> to get the
disassembly:

<blockquote><pre>
$ <b>cd /sys/arch/$(uname -m)/compile/GENERIC</b>
$ <b>objdump -dlr obj/pf.o &gt;/tmp/pf.dis</b>
</pre></blockquote>

In the output, grep for the function name:

<blockquote><pre>
$ <b>grep "&lt;pf_route&gt;:" /tmp/pf.dis</b>
0000<b>7d88</b> &lt;pf_route&gt;:
</pre></blockquote>

Take this first hex number <tt>7d88</tt> and add the offset <tt>0x263</tt> from
the <tt>Stopped at</tt> line:

<blockquote><pre>
$ <b>printf '%x\n' $((0x7d88 + 0x263))</b>
7feb
</pre></blockquote>

Scroll down to the line <tt>7feb</tt>.
The assembler instruction should match the one quoted in the <tt>Stopped at</tt>
line.
Then scroll up to the nearest C line number:

<blockquote><pre>
$ <b>more /tmp/pf.dis</b>
/sys/net/pf.c:<b>3872</b>
    7fe7:       0f b7 43 02             movzwl 0x2(%ebx),%eax
    <b>7feb</b>:       8b 57 40                <b>mov    0x40(%edi),%edx</b>
    7fee:       39 d0                   cmp    %edx,%eax
    7ff0:       0f 87 92 00 00 00       ja     8088 &lt;pf_route+0x300&gt;
</pre></blockquote>

So, it's precisely line <tt>3872</tt> of <tt>pf.c</tt> that crashes:

<blockquote><pre>
$ <b>nl -ba /sys/net/pf.c | sed -n 3872p</b>
  3872		if ((u_int16_t)ip-&gt;ip_len &lt;= ifp-&gt;if_mtu) {
</pre></blockquote>

The kernel that produced the crash output and the object file for objdump must
be compiled from the exact same source file, otherwise the offsets won't match.

<p>
If you provide both the ddb trace output and the relevant objdump section,
that's very helpful.

<p>
</body>
</html>
@


1.17
log
@kernels are now compiled with debugging symbols, so we can skip one step.
avoid a few parenthetical remarks and simplify a number of command lines.
@
text
@d129 1
a129 1
Stopped at    <b>_pf_route+0x263</b>:        mov     0x40(%edi),%edx
d133 1
a133 1
This crash happened at offset <tt>0x263</tt> in the function <tt>_pf_route</tt>.
d141 10
a150 10
<b>_pf_route</b>(e28cb7e4,e28bc978,2,1fad,d0b8b120) at <b>_pf_route+0x263</b>
_pf_test(2,1f4ad,e28cb7e4,b4c1) at _pf_test+0x706
_pf_route(e28cbb00,e28bc978,2,d0a65440,d0b8b120) at _pf_route+0x207
_pf_test(2,d0a65440,e28cbb00,d023c282) at _pf_test+0x706
_ip_output(d0b6a200,0,0,0,0) at _ip_output+0xb67
_icmp_send(d0b6a200,0,1,a012) at _icmp_send+0x57
_icmp_reflect(d0b6a200,0,1,0,3) at _icmp_reflect+0x26b
_icmp_input(d0b6a200,14,0,0,d0b6a200) at _icmp_input+0x42c
_ipv4_input(d0b6a200,e289f140,d0a489e0,e289f140) at _ipv4_input+0x6eb
_ipintr(10,10,e289f140,e289f140,e28cbd38) at _ipintr+0x8d
d175 2
a176 2
$ <b>grep "&lt;_pf_route&gt;:" /tmp/pf.dis</b>
0000<b>7d88</b> &lt;_pf_route&gt;:
d187 4
a190 2
Scroll down to that line (the assembler instruction should match the one
quoted in the <tt>Stopped at</tt> line), then up to the nearest C line number:
d196 1
a196 1
    <b>7feb</b>:       8b 57 40                mov    0x40(%edi),%edx
d198 1
a198 1
    7ff0:       0f 87 92 00 00 00       ja     8088 &lt;_pf_route+0x300&gt;
@


1.16
log
@one more obj/ needed
@
text
@a125 1
(things to watch for are marked with bold font)
d133 5
a137 2
The first command to run from the <tt>ddb></tt> prompt is <tt>trace</tt>
(see <a href="http://man.openbsd.org/ddb">ddb(4)</a> for details):
d162 4
a165 3
Find the source file where the crashing function is defined in.
In this example, that would be <tt>pf_route()</tt> in <tt>sys/net/pf.c</tt>.
Recompile that source file with debug information:
d168 2
a169 3
# <b>cd /usr/src/sys/arch/$(uname -m)/compile/GENERIC</b>
# <b>rm obj/pf.o</b>
# <b>DEBUG=-g make pf.o</b>
d172 1
a172 2
Then use <a href="http://man.openbsd.org/objdump">objdump(1)</a> to get the
disassembly:
d175 2
a176 1
# <b>objdump --line --disassemble --reloc obj/pf.o &gt;pf.dis</b>
d179 2
a180 1
In the output, grep for the function name:
d183 2
a184 2
# <b>grep "&lt;_pf_route&gt;:" pf.dis</b>
0000<b>7d88</b> &lt;_pf_route&gt;:
a186 4
Take this first hex number and add the offset from the <tt>Stopped at</tt> line:
<tt>0x7d88 + 0x263 == 0x7feb</tt>.

<p>
d191 2
a192 2
# <b>more pf.dis</b>
/usr/src/sys/arch/i386/compile/GENERIC/../../../../net/pf.c:<b>3872</b>
d202 2
a203 2
# <b>cat -n pf.c | head -n 3872 | tail -n 1</b>
3872          if ((u_int16_t)ip-&gt;ip_len &lt;= ifp-&gt;if_mtu) {
d206 2
a207 3
Note that the kernel that produced the crash output and the object file
for objdump must be compiled from the exact same source file, otherwise
the offsets won't match.
@


1.15
log
@update to reflect existence of the obj/ directories for kernel builds.

spotted by rob pierce, thanks!
@
text
@d174 1
a174 1
# <b>objdump --line --disassemble --reloc pf.o &gt;pf.dis</b>
@


1.14
log
@move some ddb examples from the "getting to know openbsd" faq to ddb.html.
while there, tidy ddb.html up a little.

ok tj
@
text
@d166 1
a166 1
# <b>rm pf.o</b>
@


1.13
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@d11 3
d26 1
a26 1
<h3><font color="#0000e0">Minimum information for kernel problems</font></h3>
d35 14
a48 14
<li><em>We need the console output on the screen</em>.
	Capture it and save it.
	Serial consoles are best, but if you are on a VGA console you can
	<a HREF="faq/faq7.html">scroll the console back</a>
	and take readable pictures with a phone or camera.<BR>

<li><em>If the kernel panicked we need the traceback.</em>
	It may be displayed on the screen.
	If you are at a
	<tt><a href="http://man.openbsd.org/ddb.4">ddb</a>&gt;</tt>
	prompt, type <tt>trace</tt>.
	If you are running SMP, use the <tt>mach ddbcpu N</tt> command for each
	of the <tt>N</tt> processors you have and repeat the <tt>trace</tt>
	command for each processor.<BR>
d50 2
a51 2
<li><em>We need the process list.</em>
	Use the command <tt>ps</tt> to get us that.
d54 6
a59 4
<em>
	Reports without the above information are useless.
	This is the minimum we need to be able to track down the issue.
</em>
a60 2
<h3><font color="#0000e0">Additional information you can send</font></h3>
<P>
d63 1
d65 14
a78 14
<li> ... XXX boot crash? XXX
<li> ... XXX show regs? XXX
<li> <em>If your crash appears to involve filesystems.</em>
	The following additional things would be helpful
<ul>
<li> The output of the
	<tt><a href="http://man.openbsd.org/ddb.4">ddb</a>&gt;</tt>
	command <tt>show uvm</tt>
<li> The output of the
	<tt><a href="http://man.openbsd.org/ddb.4">ddb</a>&gt;</tt>
	command <tt>show bcstats</tt>
<li> The output of the <tt>mount</tt> command from your running machine,
	so we know what filesystems are mounted and how.
</ul>
d80 134
@


1.12
log
@zap stray '>' and shorten some links.
@
text
@d10 1
a10 1
<link rel="canonical" href="http://www.openbsd.org/report.html">
@


1.11
log
@mlarkin says ok to remove the hibernate/suspend line
@
text
@d1 1
a1 1
><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
d35 1
a35 1
	<a HREF="http://www.openbsd.org/faq/faq7.html">scroll the console back</a>
d41 1
a41 1
	<tt><a href="http://man.openbsd.org/?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
d67 1
a67 1
	<tt><a href="http://man.openbsd.org/?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
d70 1
a70 1
	<tt><a href="http://man.openbsd.org/?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
@


1.10
log
@<hr> inside of <h2> is invalid html and looks bad, so reorder them properly.

remove link to undeadly errata rss feed.

sync <title> and page title where they differ.

with/ok tb
@
text
@d1 1
a1 1
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
a74 3
<li> <em>If your crash appears to involve hibernate/resume.</em> XXX
</li>

@


1.9
log
@another batch of css conversions. except tshirts, these all pass
the validator test. with tj
@
text
@d4 1
a4 1
<title>OpenBSD kernel crash reports</title>
d18 1
a18 1
<font color="#e00000">ddb</font>
@


1.8
log
@fix URIs, the / before querystring isn't optional, if it isn't fixed up
by the browser the server returns 400 Bad Request
@
text
@d7 3
a9 1
<meta name="copyright" content="This document copyright 1998-2004 by OpenBSD.">
d14 7
a20 1
<a href="index.html"><img alt="[OpenBSD]" height="30" width="141" src="images/smalltitle.gif" border="0"></a>
a21 2
<h2><font color="#e00000">Extracting useful information from kernel crashes</font></h2>
<hr>
@


1.7
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d35 1
a35 1
	<tt><a href="http://man.openbsd.org?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
d61 1
a61 1
	<tt><a href="http://man.openbsd.org?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
d64 1
a64 1
	<tt><a href="http://man.openbsd.org?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
@


1.6
log
@Spelling and grammar fixes:

paniced -> panicked
If are -> If you are
If you crash appears -> If your crash appears

While there, hard wrap the lines and enforce "new sentence new lines",
so that future diffs will be easier to review.

Still passes validator.w3.org's tests.

Discussed on icb with sthen@@
@
text
@d35 1
a35 1
	<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
d61 1
a61 1
	<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
d64 1
a64 1
	<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ddb&amp;sektion=4&amp;">ddb</a>&gt;</tt>
@


1.5
log
@One too many dots.
@
text
@d19 4
a22 3
Familiarize yourself with <a href="report.html">the general bug reporting procedures</a>
first. All of that will apply. 

d26 14
a39 7
<li><em>We need the console output on the screen</em>. Capture it and
save it. Serial consoles are best, but if you are on a VGA console you
can <a HREF="http://www.openbsd.org/faq/faq7.html">scroll the console
back</a> and take readable pictures with a phone or camera.<BR>

<li><em>If the kernel paniced we need the traceback.</em> It may be
displayed on the screen.  If are at a <tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ddb&amp;sektion=4&amp;format=html">ddb</a>&gt;</tt> prompt, type <tt>trace</tt>, If you are running SMP, use the <tt>mach ddbcpu N</tt> command for each of the <tt>N</tt> processors you have and repeat the <tt>trace</tt> command for each processor.<BR> 
d41 2
a42 1
<li><em>We need the process list.</em> Use the command <tt>ps</tt> to get us that. 
d45 4
a48 1
<em>Reports without the above information are useless. This is the minimum we need to be able to track down the issue</em>.
d52 2
a53 1
In some situations more information is desirable. Below are outlined some additional steps you can take in certain situations:
d57 2
a58 1
<li> <em>If your crash appears to involve filesystems</em> The following additional things would be helpful
d60 8
a67 3
<li> The output of the <tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ddb&amp;sektion=4&amp;format=html">ddb</a>&gt;</tt> command <tt>show uvm</tt>
<li> The output of the <tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ddb&amp;sektion=4&amp;format=html">ddb</a>&gt;</tt> command <tt>show bcstats</tt>
<li> The output of the <tt>mount</tt> command from your running machine, so we know what filesystems are mounted and how. 
d69 1
a69 1
<li> <em>If you crash appears to involve hibernate/resume</em> XXX
@


1.4
log
@fix link
@
text
@d36 1
a36 1
<em>Reports without the above information are useless. This is the minimum we need to be able to track down the issue.</em>.
@


1.3
log
@Add sections for more specific info, still work in progress.
@
text
@d19 2
a20 2
Familiarize yourself with <a href="reports.html">the general bug reporting procedures</a>
 first. All of that will apply. 
@


1.2
log
@spelling
@
text
@d42 11
a52 1
<li> ... XXX
@


1.1
log
@Add ddb.html to be referenced from panic message. work in progress. keep it short and simple at first
@
text
@d33 1
a33 1
<li><em>We neet the process list.</em> Use the command <tt>ps</tt> to get us that. 
@

