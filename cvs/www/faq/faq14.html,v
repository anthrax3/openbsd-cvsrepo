head	1.358;
access;
symbols;
locks; strict;
comment	@# @;


1.358
date	2017.03.29.00.27.55;	author tj;	state Exp;
branches;
next	1.357;
commitid	8Z8uR9FdKVO1w4jq;

1.357
date	2017.03.25.19.07.05;	author tb;	state Exp;
branches;
next	1.356;
commitid	HspC9U4j3u1PNnAZ;

1.356
date	2017.03.19.15.05.04;	author tb;	state Exp;
branches;
next	1.355;
commitid	zbe3UYTKrwcjMLMX;

1.355
date	2017.03.16.19.56.31;	author tb;	state Exp;
branches;
next	1.354;
commitid	9XeCWy1DyvUWcnGo;

1.354
date	2017.03.12.20.45.24;	author tj;	state Exp;
branches;
next	1.353;
commitid	1mKmvUN6in4brUc8;

1.353
date	2017.03.07.18.25.22;	author tb;	state Exp;
branches;
next	1.352;
commitid	3rLv2Rs7JP1ACOdZ;

1.352
date	2017.03.04.21.22.45;	author tb;	state Exp;
branches;
next	1.351;
commitid	NDzuvM4hKpyk2gRW;

1.351
date	2017.03.02.16.22.35;	author tj;	state Exp;
branches;
next	1.350;
commitid	WqwDldAK8VgRQlaj;

1.350
date	2017.02.21.00.41.04;	author tb;	state Exp;
branches;
next	1.349;
commitid	OFB771eGdjwRAGUi;

1.349
date	2017.02.20.21.20.26;	author tb;	state Exp;
branches;
next	1.348;
commitid	8zpLyJU4e5uQIuTp;

1.348
date	2017.02.20.20.28.32;	author tb;	state Exp;
branches;
next	1.347;
commitid	KP3zwQcqSSB3usxs;

1.347
date	2017.02.20.20.20.38;	author tb;	state Exp;
branches;
next	1.346;
commitid	4p7lOgccquh97A57;

1.346
date	2017.02.20.17.23.20;	author tb;	state Exp;
branches;
next	1.345;
commitid	YZ5iyagZMnApzqTY;

1.345
date	2017.02.20.04.38.48;	author tb;	state Exp;
branches;
next	1.344;
commitid	bmZz0QWSDSAIsIUs;

1.344
date	2017.02.20.04.32.07;	author tb;	state Exp;
branches;
next	1.343;
commitid	Vo3zqaFaFOlnHVeJ;

1.343
date	2017.02.20.00.18.23;	author tb;	state Exp;
branches;
next	1.342;
commitid	OJpWwmMnj58O2XKs;

1.342
date	2017.02.19.22.25.21;	author tj;	state Exp;
branches;
next	1.341;
commitid	8VunqhpBEBBMIz86;

1.341
date	2017.02.18.01.58.27;	author tb;	state Exp;
branches;
next	1.340;
commitid	RZveshUo7RxGXtaB;

1.340
date	2017.02.09.17.22.19;	author tb;	state Exp;
branches;
next	1.339;
commitid	T7p2qUf6sgevbhcO;

1.339
date	2017.01.21.23.49.45;	author tb;	state Exp;
branches;
next	1.338;
commitid	wl9OR43HTotEIWQ1;

1.338
date	2017.01.19.06.41.57;	author tb;	state Exp;
branches;
next	1.337;
commitid	xQg8u3CbLzwdGJgL;

1.337
date	2016.12.05.20.09.43;	author tj;	state Exp;
branches;
next	1.336;
commitid	QNTPjvxfujQziDrq;

1.336
date	2016.11.27.18.25.30;	author tb;	state Exp;
branches;
next	1.335;
commitid	fZlCZVsXalXFWcyc;

1.335
date	2016.09.22.02.56.45;	author tb;	state Exp;
branches;
next	1.334;
commitid	fCY13ZSIxLm9ykLY;

1.334
date	2016.09.03.13.53.40;	author tj;	state Exp;
branches;
next	1.333;
commitid	m6ASQa7doHhu0Xq8;

1.333
date	2016.09.01.16.09.01;	author tj;	state Exp;
branches;
next	1.332;
commitid	szuG3RUW7Xig3iZV;

1.332
date	2016.09.01.12.05.14;	author tj;	state Exp;
branches;
next	1.331;
commitid	246a4S45DY24D3JM;

1.331
date	2016.08.15.02.22.13;	author tb;	state Exp;
branches;
next	1.330;
commitid	3DeixV5YkPOb78RN;

1.330
date	2016.08.10.18.04.55;	author tj;	state Exp;
branches;
next	1.329;
commitid	XDbRqHgAvWoJCfU4;

1.329
date	2016.08.10.12.28.33;	author benno;	state Exp;
branches;
next	1.328;
commitid	Q1xGRt90wJhbLYXj;

1.328
date	2016.07.15.12.43.48;	author tb;	state Exp;
branches;
next	1.327;
commitid	K8yw3YYAxi8bU7Jz;

1.327
date	2016.06.18.03.40.49;	author tb;	state Exp;
branches;
next	1.326;
commitid	p24yLZklXcRjmt26;

1.326
date	2016.06.17.00.25.33;	author tj;	state Exp;
branches;
next	1.325;
commitid	C6OT4QARoaY1nAFC;

1.325
date	2016.06.14.16.26.11;	author tj;	state Exp;
branches;
next	1.324;
commitid	PCHwYJ8G2TIOYpMG;

1.324
date	2016.06.14.00.19.41;	author tb;	state Exp;
branches;
next	1.323;
commitid	9DrxMXaKej8etkDk;

1.323
date	2016.06.05.04.24.15;	author tb;	state Exp;
branches;
next	1.322;
commitid	e1XtWQHzZcwtuhKp;

1.322
date	2016.06.04.15.45.45;	author tj;	state Exp;
branches;
next	1.321;
commitid	zj3ITCt0yt6tdGWZ;

1.321
date	2016.06.02.05.14.58;	author tb;	state Exp;
branches;
next	1.320;
commitid	udgPy2RBSqyFcoCC;

1.320
date	2016.05.28.21.29.45;	author tj;	state Exp;
branches;
next	1.319;
commitid	vYpFCVgBOn5pVjpo;

1.319
date	2016.05.28.18.47.54;	author tb;	state Exp;
branches;
next	1.318;
commitid	XKq4pPyzIYQTnfFR;

1.318
date	2016.05.28.18.31.36;	author tb;	state Exp;
branches;
next	1.317;
commitid	raX9rfI9PXAFaweb;

1.317
date	2016.04.21.00.45.48;	author tj;	state Exp;
branches;
next	1.316;
commitid	HtZ8nUjqaAunZXL2;

1.316
date	2016.04.16.00.30.41;	author tj;	state Exp;
branches;
next	1.315;
commitid	rTxoenHHaeutOff1;

1.315
date	2016.04.15.22.19.21;	author tj;	state Exp;
branches;
next	1.314;
commitid	SbVa2HBPaB5JhGVM;

1.314
date	2016.04.15.21.53.42;	author schwarze;	state Exp;
branches;
next	1.313;
commitid	YZv8S2kLQbFQZcyu;

1.313
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.312;
commitid	jwteSMEb4rFzI8UA;

1.312
date	2016.04.15.16.42.34;	author tj;	state Exp;
branches;
next	1.311;
commitid	4iGhbtsBAhiGE70P;

1.311
date	2016.03.30.14.41.06;	author tb;	state Exp;
branches;
next	1.310;
commitid	EwBsFk3vSh64bNEW;

1.310
date	2016.03.29.19.06.49;	author tb;	state Exp;
branches;
next	1.309;
commitid	CxLKCdcnkhKoXtrP;

1.309
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.308;
commitid	4Y8oU6GBrSY1UOfW;

1.308
date	2016.03.27.20.21.34;	author tb;	state Exp;
branches;
next	1.307;
commitid	w9r7bXfOo34mv9If;

1.307
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.306;
commitid	hi2ObFv9LGB98JY5;

1.306
date	2016.03.22.10.54.47;	author sthen;	state Exp;
branches;
next	1.305;
commitid	cyODCFvIgxpUoVc0;

1.305
date	2016.03.21.08.29.08;	author tb;	state Exp;
branches;
next	1.304;
commitid	M1Ht2VvUjNUD7doh;

1.304
date	2016.03.21.08.24.24;	author tb;	state Exp;
branches;
next	1.303;
commitid	FszPYViUktw26pO0;

1.303
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.302;
commitid	zEx6zFkNSFFExu0v;

1.302
date	2016.03.20.22.24.57;	author tj;	state Exp;
branches;
next	1.301;
commitid	oo3sAEjx5cFwFwEI;

1.301
date	2016.03.09.02.03.03;	author tj;	state Exp;
branches;
next	1.300;
commitid	syFbRj66d5Ti7uff;

1.300
date	2016.03.08.01.14.03;	author tb;	state Exp;
branches;
next	1.299;
commitid	p766lXiUsJHxxjRf;

1.299
date	2016.03.07.22.15.02;	author tb;	state Exp;
branches;
next	1.298;
commitid	Qmy5oaXKaM0PgzwB;

1.298
date	2016.03.07.19.02.46;	author tb;	state Exp;
branches;
next	1.297;
commitid	KQEand0XzFAyFryP;

1.297
date	2016.03.07.16.48.51;	author tb;	state Exp;
branches;
next	1.296;
commitid	JYpPi6XKVGeoJmjs;

1.296
date	2016.02.28.07.24.37;	author tb;	state Exp;
branches;
next	1.295;
commitid	K51WlUhjLIidABfb;

1.295
date	2016.02.28.05.57.53;	author tb;	state Exp;
branches;
next	1.294;
commitid	0Cntbx6QCKOKifGK;

1.294
date	2016.02.27.02.31.08;	author tb;	state Exp;
branches;
next	1.293;
commitid	wT0MyXEsIPggWOpZ;

1.293
date	2016.02.26.17.27.05;	author tb;	state Exp;
branches;
next	1.292;
commitid	4HrjksFJov7c4Ezm;

1.292
date	2016.02.25.23.51.58;	author tb;	state Exp;
branches;
next	1.291;
commitid	QLyJnkfh24fNIabp;

1.291
date	2016.02.25.21.49.46;	author tb;	state Exp;
branches;
next	1.290;
commitid	Z7NMsBdJc3SO5SgT;

1.290
date	2016.02.25.21.45.53;	author tb;	state Exp;
branches;
next	1.289;
commitid	1iAdGhd6O7yWiRVU;

1.289
date	2016.02.25.21.28.24;	author tb;	state Exp;
branches;
next	1.288;
commitid	e2iCnsRAPIRey6kj;

1.288
date	2016.02.25.21.25.59;	author tb;	state Exp;
branches;
next	1.287;
commitid	MPQ69ORrDd3rlLhy;

1.287
date	2016.02.25.05.40.18;	author tb;	state Exp;
branches;
next	1.286;
commitid	mrL8s1SVlvFlXg7J;

1.286
date	2016.02.25.01.23.27;	author tb;	state Exp;
branches;
next	1.285;
commitid	Wyub5RSAdqGMARBz;

1.285
date	2016.02.25.00.51.48;	author tb;	state Exp;
branches;
next	1.284;
commitid	rsiCXWQ1YDlLAufH;

1.284
date	2016.02.24.23.28.58;	author tb;	state Exp;
branches;
next	1.283;
commitid	YKhVU7dxCAmVjSAX;

1.283
date	2016.02.24.23.19.03;	author tb;	state Exp;
branches;
next	1.282;
commitid	0X7f6K93zRi5s7Xb;

1.282
date	2016.02.24.23.15.28;	author tb;	state Exp;
branches;
next	1.281;
commitid	f4sC3UQMUbphwcj2;

1.281
date	2016.02.24.22.56.01;	author tb;	state Exp;
branches;
next	1.280;
commitid	iTfgw0dINCvM6fPc;

1.280
date	2016.02.24.22.33.33;	author tb;	state Exp;
branches;
next	1.279;
commitid	HtFuXkEctf4Z1lR4;

1.279
date	2016.02.23.22.56.54;	author tb;	state Exp;
branches;
next	1.278;
commitid	REoQU2KAhfWhXhkf;

1.278
date	2016.02.23.21.17.14;	author tb;	state Exp;
branches;
next	1.277;
commitid	aaGGhTccYuWCV3Tb;

1.277
date	2016.02.23.21.05.59;	author tb;	state Exp;
branches;
next	1.276;
commitid	PvykPSC8z156ip0d;

1.276
date	2016.02.23.19.41.57;	author tb;	state Exp;
branches;
next	1.275;
commitid	SKkL8i60XfQ3Ku4j;

1.275
date	2016.02.23.09.45.57;	author tb;	state Exp;
branches;
next	1.274;
commitid	rYspduY9PWI7qSXS;

1.274
date	2016.02.23.08.03.08;	author tb;	state Exp;
branches;
next	1.273;
commitid	EO32iXQLp5VkIlt2;

1.273
date	2016.02.23.00.20.06;	author tb;	state Exp;
branches;
next	1.272;
commitid	n61PSGdIpKXBXxJy;

1.272
date	2016.02.22.22.51.23;	author tj;	state Exp;
branches;
next	1.271;
commitid	5aVjmXvZn1DTwlMT;

1.271
date	2016.02.22.20.30.39;	author tb;	state Exp;
branches;
next	1.270;
commitid	apRh8qiB7zwFMhT5;

1.270
date	2016.02.22.20.13.06;	author tb;	state Exp;
branches;
next	1.269;
commitid	UK3YCXBgG9czDS8v;

1.269
date	2016.02.22.01.56.37;	author tb;	state Exp;
branches;
next	1.268;
commitid	o6deQ70nMkvEeb9e;

1.268
date	2016.02.21.02.46.53;	author tb;	state Exp;
branches;
next	1.267;
commitid	9MAFGbRmAOoBGfIM;

1.267
date	2016.02.20.22.59.20;	author tj;	state Exp;
branches;
next	1.266;
commitid	8IPwAs1etKEHjS9q;

1.266
date	2016.02.07.02.20.12;	author tb;	state Exp;
branches;
next	1.265;
commitid	zd78P7Cn5AmZgux1;

1.265
date	2016.02.03.21.37.58;	author tj;	state Exp;
branches;
next	1.264;
commitid	QA2C36xqyQnTaXpc;

1.264
date	2016.02.03.19.41.10;	author tj;	state Exp;
branches;
next	1.263;
commitid	5PCd1csMnXfwXXGb;

1.263
date	2016.02.03.15.42.30;	author tj;	state Exp;
branches;
next	1.262;
commitid	apjK5UUPJdVgXvs3;

1.262
date	2016.01.26.20.58.30;	author tj;	state Exp;
branches;
next	1.261;
commitid	elNG1gXRQ2O8fy29;

1.261
date	2016.01.14.11.38.00;	author sthen;	state Exp;
branches;
next	1.260;
commitid	aS0eTs1sC4RzWPVz;

1.260
date	2016.01.14.04.26.42;	author mmcc;	state Exp;
branches;
next	1.259;
commitid	GuArWdwNFJG4ae8E;

1.259
date	2016.01.11.06.30.13;	author tb;	state Exp;
branches;
next	1.258;
commitid	kpxTb5fPDcXr5p29;

1.258
date	2015.11.23.03.16.31;	author deraadt;	state Exp;
branches;
next	1.257;
commitid	agWVJvjBEQwPNRmg;

1.257
date	2015.11.03.02.44.54;	author nick;	state Exp;
branches;
next	1.256;
commitid	tbUqMQ17UZ5Z84SY;

1.256
date	2015.10.18.19.42.11;	author nick;	state Exp;
branches;
next	1.255;
commitid	HJnmhJAcdZq1TNFu;

1.255
date	2015.09.27.19.20.00;	author nick;	state Exp;
branches;
next	1.254;
commitid	go1TTouoZxSLQXce;

1.254
date	2015.08.24.10.12.12;	author sthen;	state Exp;
branches;
next	1.253;
commitid	bgunzW1SkB0e0Eb3;

1.253
date	2015.07.02.05.49.04;	author bentley;	state Exp;
branches;
next	1.252;
commitid	AP3UllesavMDEUhQ;

1.252
date	2015.05.17.16.01.17;	author nick;	state Exp;
branches;
next	1.251;
commitid	JGccG6ktXk91qBFJ;

1.251
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.250;
commitid	wRrXxcro6dFYiwF8;

1.250
date	2015.04.30.23.38.57;	author nick;	state Exp;
branches;
next	1.249;
commitid	uIacNW3dhb39XNuY;

1.249
date	2015.02.27.01.56.59;	author nick;	state Exp;
branches;
next	1.248;
commitid	mU5nx3MEN2OvL1jt;

1.248
date	2014.11.24.05.29.42;	author bentley;	state Exp;
branches;
next	1.247;
commitid	9aQBA7n1IYaKxofI;

1.247
date	2014.11.18.02.00.07;	author nick;	state Exp;
branches;
next	1.246;
commitid	Di3OgaTka6YwDIR3;

1.246
date	2014.11.08.20.15.58;	author nick;	state Exp;
branches;
next	1.245;
commitid	t3M7aGv2gygAZgF8;

1.245
date	2014.11.01.13.42.51;	author nick;	state Exp;
branches;
next	1.244;
commitid	ZgANDuwHdulMn8Ng;

1.244
date	2014.09.17.01.45.54;	author nick;	state Exp;
branches;
next	1.243;
commitid	cx1LKsTWApC1CR5R;

1.243
date	2014.08.07.01.51.34;	author nick;	state Exp;
branches;
next	1.242;
commitid	RZYBSFOBtVHeVEME;

1.242
date	2014.05.01.15.01.14;	author nick;	state Exp;
branches;
next	1.241;

1.241
date	2014.03.30.19.13.39;	author nick;	state Exp;
branches;
next	1.240;

1.240
date	2013.11.01.14.05.57;	author nick;	state Exp;
branches;
next	1.239;

1.239
date	2013.10.07.13.57.20;	author nick;	state Exp;
branches;
next	1.238;

1.238
date	2013.08.09.02.18.38;	author nick;	state Exp;
branches;
next	1.237;

1.237
date	2013.08.09.02.01.10;	author nick;	state Exp;
branches;
next	1.236;

1.236
date	2013.07.23.02.29.04;	author nick;	state Exp;
branches;
next	1.235;

1.235
date	2013.07.14.17.05.50;	author nick;	state Exp;
branches;
next	1.234;

1.234
date	2013.06.01.23.22.48;	author nick;	state Exp;
branches;
next	1.233;

1.233
date	2013.06.01.18.40.21;	author nick;	state Exp;
branches;
next	1.232;

1.232
date	2013.05.31.16.46.32;	author nick;	state Exp;
branches;
next	1.231;

1.231
date	2013.05.31.16.23.44;	author nick;	state Exp;
branches;
next	1.230;

1.230
date	2013.05.01.13.16.32;	author nick;	state Exp;
branches;
next	1.229;

1.229
date	2013.02.20.17.10.24;	author sthen;	state Exp;
branches;
next	1.228;

1.228
date	2013.02.12.09.59.02;	author sthen;	state Exp;
branches;
next	1.227;

1.227
date	2013.01.12.17.44.50;	author jeremy;	state Exp;
branches;
next	1.226;

1.226
date	2012.12.27.01.20.08;	author nick;	state Exp;
branches;
next	1.225;

1.225
date	2012.11.01.15.05.30;	author nick;	state Exp;
branches;
next	1.224;

1.224
date	2012.06.28.00.51.33;	author nick;	state Exp;
branches;
next	1.223;

1.223
date	2012.06.05.22.46.57;	author nick;	state Exp;
branches;
next	1.222;

1.222
date	2012.06.05.02.38.05;	author nick;	state Exp;
branches;
next	1.221;

1.221
date	2012.05.22.01.13.07;	author nick;	state Exp;
branches;
next	1.220;

1.220
date	2012.05.20.15.13.03;	author jj;	state Exp;
branches;
next	1.219;

1.219
date	2012.05.01.14.35.15;	author nick;	state Exp;
branches;
next	1.218;

1.218
date	2012.02.01.02.48.43;	author nick;	state Exp;
branches;
next	1.217;

1.217
date	2012.01.13.12.53.49;	author ajacoutot;	state Exp;
branches;
next	1.216;

1.216
date	2011.12.31.09.49.59;	author jj;	state Exp;
branches;
next	1.215;

1.215
date	2011.11.09.03.10.21;	author nick;	state Exp;
branches;
next	1.214;

1.214
date	2011.11.01.10.52.28;	author nick;	state Exp;
branches;
next	1.213;

1.213
date	2011.06.20.02.07.50;	author nick;	state Exp;
branches;
next	1.212;

1.212
date	2011.06.17.06.53.40;	author lum;	state Exp;
branches;
next	1.211;

1.211
date	2011.05.30.12.40.43;	author lum;	state Exp;
branches;
next	1.210;

1.210
date	2011.05.05.02.14.10;	author nick;	state Exp;
branches;
next	1.209;

1.209
date	2011.05.01.13.08.58;	author nick;	state Exp;
branches;
next	1.208;

1.208
date	2011.01.29.03.39.14;	author nick;	state Exp;
branches;
next	1.207;

1.207
date	2011.01.28.03.10.10;	author nick;	state Exp;
branches;
next	1.206;

1.206
date	2011.01.28.03.04.49;	author nick;	state Exp;
branches;
next	1.205;

1.205
date	2011.01.02.18.46.05;	author nick;	state Exp;
branches;
next	1.204;

1.204
date	2010.12.04.00.18.42;	author nick;	state Exp;
branches;
next	1.203;

1.203
date	2010.11.01.09.48.45;	author nick;	state Exp;
branches;
next	1.202;

1.202
date	2010.05.19.12.41.02;	author nick;	state Exp;
branches;
next	1.201;

1.201
date	2010.03.19.02.16.55;	author nick;	state Exp;
branches;
next	1.200;

1.200
date	2010.03.19.01.59.08;	author nick;	state Exp;
branches;
next	1.199;

1.199
date	2010.03.08.12.29.01;	author nick;	state Exp;
branches;
next	1.198;

1.198
date	2010.03.04.01.14.13;	author nick;	state Exp;
branches;
next	1.197;

1.197
date	2010.01.18.03.41.49;	author nick;	state Exp;
branches;
next	1.196;

1.196
date	2009.12.16.03.57.44;	author nick;	state Exp;
branches;
next	1.195;

1.195
date	2009.11.30.12.50.27;	author nick;	state Exp;
branches;
next	1.194;

1.194
date	2009.11.09.01.33.22;	author nick;	state Exp;
branches;
next	1.193;

1.193
date	2009.11.08.02.56.33;	author nick;	state Exp;
branches;
next	1.192;

1.192
date	2009.10.30.02.07.57;	author nick;	state Exp;
branches;
next	1.191;

1.191
date	2009.10.30.02.06.03;	author nick;	state Exp;
branches;
next	1.190;

1.190
date	2009.10.25.17.01.44;	author steven;	state Exp;
branches;
next	1.189;

1.189
date	2009.10.16.19.07.37;	author nick;	state Exp;
branches;
next	1.188;

1.188
date	2009.04.30.17.19.11;	author nick;	state Exp;
branches;
next	1.187;

1.187
date	2009.04.07.00.41.14;	author nick;	state Exp;
branches;
next	1.186;

1.186
date	2009.04.04.17.14.53;	author nick;	state Exp;
branches;
next	1.185;

1.185
date	2009.03.05.12.06.45;	author nick;	state Exp;
branches;
next	1.184;

1.184
date	2009.03.05.01.21.12;	author nick;	state Exp;
branches;
next	1.183;

1.183
date	2009.02.26.08.38.53;	author sobrado;	state Exp;
branches;
next	1.182;

1.182
date	2009.02.05.11.16.51;	author sthen;	state Exp;
branches;
next	1.181;

1.181
date	2008.11.30.03.58.34;	author nick;	state Exp;
branches;
next	1.180;

1.180
date	2008.11.24.03.08.06;	author nick;	state Exp;
branches;
next	1.179;

1.179
date	2008.11.23.18.20.40;	author nick;	state Exp;
branches;
next	1.178;

1.178
date	2008.11.23.18.04.53;	author nick;	state Exp;
branches;
next	1.177;

1.177
date	2008.11.23.18.01.54;	author nick;	state Exp;
branches;
next	1.176;

1.176
date	2008.11.12.02.59.41;	author nick;	state Exp;
branches;
next	1.175;

1.175
date	2008.10.31.16.52.30;	author nick;	state Exp;
branches;
next	1.174;

1.174
date	2008.07.02.08.55.24;	author otto;	state Exp;
branches;
next	1.173;

1.173
date	2008.06.21.08.27.38;	author steven;	state Exp;
branches;
next	1.172;

1.172
date	2008.05.20.09.02.34;	author otto;	state Exp;
branches;
next	1.171;

1.171
date	2008.05.12.15.53.44;	author otto;	state Exp;
branches;
next	1.170;

1.170
date	2008.04.30.21.24.58;	author nick;	state Exp;
branches;
next	1.169;

1.169
date	2008.04.20.15.40.08;	author nick;	state Exp;
branches;
next	1.168;

1.168
date	2008.04.20.15.11.24;	author nick;	state Exp;
branches;
next	1.167;

1.167
date	2007.11.01.02.11.01;	author nick;	state Exp;
branches;
next	1.166;

1.166
date	2007.08.07.00.58.05;	author nick;	state Exp;
branches;
next	1.165;

1.165
date	2007.07.26.00.39.44;	author nick;	state Exp;
branches;
next	1.164;

1.164
date	2007.05.01.16.27.46;	author nick;	state Exp;
branches;
next	1.163;

1.163
date	2006.12.29.22.01.30;	author steven;	state Exp;
branches;
next	1.162;

1.162
date	2006.11.09.03.36.59;	author nick;	state Exp;
branches;
next	1.161;

1.161
date	2006.11.09.03.14.46;	author nick;	state Exp;
branches;
next	1.160;

1.160
date	2006.11.01.01.41.18;	author nick;	state Exp;
branches;
next	1.159;

1.159
date	2006.10.25.13.30.06;	author dtucker;	state Exp;
branches;
next	1.158;

1.158
date	2006.08.09.02.22.09;	author nick;	state Exp;
branches;
next	1.157;

1.157
date	2006.06.21.04.20.28;	author david;	state Exp;
branches;
next	1.156;

1.156
date	2006.05.01.01.02.59;	author nick;	state Exp;
branches;
next	1.155;

1.155
date	2006.03.04.04.12.47;	author nick;	state Exp;
branches;
next	1.154;

1.154
date	2006.03.02.03.50.55;	author nick;	state Exp;
branches;
next	1.153;

1.153
date	2006.02.26.21.35.33;	author nick;	state Exp;
branches;
next	1.152;

1.152
date	2006.02.26.21.19.39;	author nick;	state Exp;
branches;
next	1.151;

1.151
date	2006.02.26.21.09.19;	author nick;	state Exp;
branches;
next	1.150;

1.150
date	2005.12.29.11.49.15;	author steven;	state Exp;
branches;
next	1.149;

1.149
date	2005.12.28.02.36.42;	author nick;	state Exp;
branches;
next	1.148;

1.148
date	2005.12.28.02.33.30;	author nick;	state Exp;
branches;
next	1.147;

1.147
date	2005.12.18.15.29.05;	author steven;	state Exp;
branches;
next	1.146;

1.146
date	2005.12.18.10.47.50;	author steven;	state Exp;
branches;
next	1.145;

1.145
date	2005.12.17.17.04.43;	author nick;	state Exp;
branches;
next	1.144;

1.144
date	2005.12.17.04.33.28;	author nick;	state Exp;
branches;
next	1.143;

1.143
date	2005.12.11.22.50.40;	author steven;	state Exp;
branches;
next	1.142;

1.142
date	2005.12.05.22.21.45;	author steven;	state Exp;
branches;
next	1.141;

1.141
date	2005.11.26.21.14.40;	author jmc;	state Exp;
branches;
next	1.140;

1.140
date	2005.11.24.05.41.56;	author steven;	state Exp;
branches;
next	1.139;

1.139
date	2005.11.10.03.49.08;	author nick;	state Exp;
branches;
next	1.138;

1.138
date	2005.11.03.11.37.07;	author nick;	state Exp;
branches;
next	1.137;

1.137
date	2005.11.03.03.07.40;	author nick;	state Exp;
branches;
next	1.136;

1.136
date	2005.11.02.02.23.27;	author nick;	state Exp;
branches;
next	1.135;

1.135
date	2005.11.01.11.39.56;	author nick;	state Exp;
branches;
next	1.134;

1.134
date	2005.10.19.01.04.36;	author nick;	state Exp;
branches;
next	1.133;

1.133
date	2005.07.26.10.53.40;	author nick;	state Exp;
branches;
next	1.132;

1.132
date	2005.07.12.23.04.22;	author nick;	state Exp;
branches;
next	1.131;

1.131
date	2005.06.01.01.41.06;	author nick;	state Exp;
branches;
next	1.130;

1.130
date	2005.05.31.11.27.17;	author saad;	state Exp;
branches;
next	1.129;

1.129
date	2005.05.30.16.14.20;	author nick;	state Exp;
branches;
next	1.128;

1.128
date	2005.05.30.15.58.55;	author nick;	state Exp;
branches;
next	1.127;

1.127
date	2005.05.30.03.25.13;	author nick;	state Exp;
branches;
next	1.126;

1.126
date	2005.05.19.16.54.27;	author nick;	state Exp;
branches;
next	1.125;

1.125
date	2005.05.18.00.48.36;	author nick;	state Exp;
branches;
next	1.124;

1.124
date	2005.05.01.14.22.33;	author nick;	state Exp;
branches;
next	1.123;

1.123
date	2005.04.24.20.56.45;	author nick;	state Exp;
branches;
next	1.122;

1.122
date	2005.04.24.19.28.25;	author nick;	state Exp;
branches;
next	1.121;

1.121
date	2005.04.24.16.20.54;	author nick;	state Exp;
branches;
next	1.120;

1.120
date	2005.04.24.15.44.54;	author nick;	state Exp;
branches;
next	1.119;

1.119
date	2005.02.12.19.08.41;	author nick;	state Exp;
branches;
next	1.118;

1.118
date	2004.12.29.18.02.32;	author nick;	state Exp;
branches;
next	1.117;

1.117
date	2004.12.25.18.13.31;	author nick;	state Exp;
branches;
next	1.116;

1.116
date	2004.11.10.13.32.55;	author otto;	state Exp;
branches;
next	1.115;

1.115
date	2004.11.04.10.20.57;	author otto;	state Exp;
branches;
next	1.114;

1.114
date	2004.10.29.17.26.01;	author nick;	state Exp;
branches;
next	1.113;

1.113
date	2004.10.20.23.04.26;	author nick;	state Exp;
branches;
next	1.112;

1.112
date	2004.10.20.20.56.19;	author nick;	state Exp;
branches;
next	1.111;

1.111
date	2004.10.17.12.55.48;	author saad;	state Exp;
branches;
next	1.110;

1.110
date	2004.09.21.21.22.56;	author jaredy;	state Exp;
branches;
next	1.109;

1.109
date	2004.09.20.20.43.01;	author nick;	state Exp;
branches;
next	1.108;

1.108
date	2004.08.15.16.58.23;	author nick;	state Exp;
branches;
next	1.107;

1.107
date	2004.06.27.06.19.45;	author jmc;	state Exp;
branches;
next	1.106;

1.106
date	2004.06.22.23.52.56;	author nick;	state Exp;
branches;
next	1.105;

1.105
date	2004.04.30.18.04.29;	author nick;	state Exp;
branches;
next	1.104;

1.104
date	2004.04.23.16.18.57;	author nick;	state Exp;
branches;
next	1.103;

1.103
date	2004.04.14.00.32.36;	author nick;	state Exp;
branches;
next	1.102;

1.102
date	2004.02.13.07.20.28;	author david;	state Exp;
branches;
next	1.101;

1.101
date	2004.02.10.03.20.03;	author nick;	state Exp;
branches;
next	1.100;

1.100
date	2004.01.28.17.55.46;	author nick;	state Exp;
branches;
next	1.99;

1.99
date	2004.01.02.04.07.02;	author nick;	state Exp;
branches;
next	1.98;

1.98
date	2004.01.02.01.14.16;	author nick;	state Exp;
branches;
next	1.97;

1.97
date	2004.01.01.20.34.06;	author nick;	state Exp;
branches;
next	1.96;

1.96
date	2004.01.01.04.13.34;	author nick;	state Exp;
branches;
next	1.95;

1.95
date	2003.12.27.20.28.22;	author nick;	state Exp;
branches;
next	1.94;

1.94
date	2003.10.26.16.45.11;	author nick;	state Exp;
branches;
next	1.93;

1.93
date	2003.10.26.01.28.03;	author nick;	state Exp;
branches;
next	1.92;

1.92
date	2003.10.10.00.37.55;	author nick;	state Exp;
branches;
next	1.91;

1.91
date	2003.08.22.13.11.53;	author nick;	state Exp;
branches;
next	1.90;

1.90
date	2003.08.05.19.54.07;	author nick;	state Exp;
branches;
next	1.89;

1.89
date	2003.08.05.18.32.56;	author nick;	state Exp;
branches;
next	1.88;

1.88
date	2003.07.25.20.05.19;	author nick;	state Exp;
branches;
next	1.87;

1.87
date	2003.07.14.20.15.56;	author nick;	state Exp;
branches;
next	1.86;

1.86
date	2003.07.04.13.09.55;	author nick;	state Exp;
branches;
next	1.85;

1.85
date	2003.07.03.23.25.31;	author nick;	state Exp;
branches;
next	1.84;

1.84
date	2003.07.02.23.28.40;	author nick;	state Exp;
branches;
next	1.83;

1.83
date	2003.05.01.01.47.41;	author nick;	state Exp;
branches;
next	1.82;

1.82
date	2003.04.04.17.49.08;	author nick;	state Exp;
branches;
next	1.81;

1.81
date	2003.03.18.03.41.04;	author nick;	state Exp;
branches;
next	1.80;

1.80
date	2003.03.11.21.03.38;	author nick;	state Exp;
branches;
next	1.79;

1.79
date	2003.03.10.00.17.23;	author margarida;	state Exp;
branches;
next	1.78;

1.78
date	2003.02.28.00.34.28;	author nick;	state Exp;
branches;
next	1.77;

1.77
date	2003.02.25.04.00.10;	author david;	state Exp;
branches;
next	1.76;

1.76
date	2003.02.20.03.09.56;	author nick;	state Exp;
branches;
next	1.75;

1.75
date	2003.02.18.03.02.18;	author nick;	state Exp;
branches;
next	1.74;

1.74
date	2003.01.01.13.02.00;	author nick;	state Exp;
branches;
next	1.73;

1.73
date	2002.12.23.02.34.42;	author nick;	state Exp;
branches;
next	1.72;

1.72
date	2002.12.11.14.36.55;	author nick;	state Exp;
branches;
next	1.71;

1.71
date	2002.10.05.22.51.57;	author nick;	state Exp;
branches;
next	1.70;

1.70
date	2002.10.01.22.47.24;	author nick;	state Exp;
branches;
next	1.69;

1.69
date	2002.10.01.21.32.14;	author nick;	state Exp;
branches;
next	1.68;

1.68
date	2002.07.12.02.51.35;	author nick;	state Exp;
branches;
next	1.67;

1.67
date	2002.07.02.01.17.58;	author nick;	state Exp;
branches;
next	1.66;

1.66
date	2002.07.02.00.30.16;	author nick;	state Exp;
branches;
next	1.65;

1.65
date	2002.06.14.21.20.30;	author nick;	state Exp;
branches;
next	1.64;

1.64
date	2002.06.10.23.46.07;	author nick;	state Exp;
branches;
next	1.63;

1.63
date	2002.06.07.22.54.21;	author nick;	state Exp;
branches;
next	1.62;

1.62
date	2002.06.07.19.31.05;	author fgsch;	state Exp;
branches;
next	1.61;

1.61
date	2002.05.20.01.04.48;	author nick;	state Exp;
branches;
next	1.60;

1.60
date	2002.04.18.19.49.04;	author nick;	state Exp;
branches;
next	1.59;

1.59
date	2002.03.20.03.54.33;	author nick;	state Exp;
branches;
next	1.58;

1.58
date	2002.02.16.02.18.20;	author nick;	state Exp;
branches;
next	1.57;

1.57
date	2002.02.16.01.48.15;	author nick;	state Exp;
branches;
next	1.56;

1.56
date	2002.01.27.22.44.34;	author nick;	state Exp;
branches;
next	1.55;

1.55
date	2002.01.21.20.28.25;	author nick;	state Exp;
branches;
next	1.54;

1.54
date	2002.01.13.00.00.32;	author ericj;	state Exp;
branches;
next	1.53;

1.53
date	2002.01.12.01.39.29;	author ericj;	state Exp;
branches;
next	1.52;

1.52
date	2001.12.30.11.37.25;	author jufi;	state Exp;
branches;
next	1.51;

1.51
date	2001.11.01.02.32.39;	author nick;	state Exp;
branches;
next	1.50;

1.50
date	2001.10.20.16.51.39;	author horacio;	state Exp;
branches;
next	1.49;

1.49
date	2001.10.18.21.10.57;	author nick;	state Exp;
branches;
next	1.48;

1.48
date	2001.10.03.14.52.56;	author jufi;	state Exp;
branches;
next	1.47;

1.47
date	2001.10.03.14.49.05;	author jufi;	state Exp;
branches;
next	1.46;

1.46
date	2001.09.19.11.45.54;	author espie;	state Exp;
branches;
next	1.45;

1.45
date	2001.08.25.09.31.33;	author jufi;	state Exp;
branches;
next	1.44;

1.44
date	2001.08.08.21.06.32;	author jsyn;	state Exp;
branches;
next	1.43;

1.43
date	2001.08.07.18.42.48;	author heko;	state Exp;
branches;
next	1.42;

1.42
date	2001.08.07.18.10.42;	author jufi;	state Exp;
branches;
next	1.41;

1.41
date	2001.06.09.16.39.05;	author pvalchev;	state Exp;
branches;
next	1.40;

1.40
date	2001.05.06.23.51.45;	author ericj;	state Exp;
branches;
next	1.39;

1.39
date	2001.05.06.14.39.37;	author jufi;	state Exp;
branches;
next	1.38;

1.38
date	2001.05.05.04.43.03;	author ericj;	state Exp;
branches;
next	1.37;

1.37
date	2001.05.05.01.48.48;	author ericj;	state Exp;
branches;
next	1.36;

1.36
date	2001.03.26.17.14.09;	author todd;	state Exp;
branches;
next	1.35;

1.35
date	2001.03.07.21.28.30;	author jufi;	state Exp;
branches;
next	1.34;

1.34
date	2001.01.27.22.19.47;	author ericj;	state Exp;
branches;
next	1.33;

1.33
date	2001.01.14.19.41.02;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2001.01.13.20.35.36;	author ericj;	state Exp;
branches;
next	1.31;

1.31
date	2001.01.07.17.16.56;	author jufi;	state Exp;
branches;
next	1.30;

1.30
date	2001.01.06.20.57.15;	author jufi;	state Exp;
branches;
next	1.29;

1.29
date	2001.01.06.19.10.11;	author jufi;	state Exp;
branches;
next	1.28;

1.28
date	2001.01.05.19.02.59;	author todd;	state Exp;
branches;
next	1.27;

1.27
date	2001.01.05.18.52.31;	author todd;	state Exp;
branches;
next	1.26;

1.26
date	2000.12.26.22.35.59;	author horacio;	state Exp;
branches;
next	1.25;

1.25
date	2000.11.30.05.58.28;	author ericj;	state Exp;
branches;
next	1.24;

1.24
date	2000.09.14.19.28.19;	author ericj;	state Exp;
branches;
next	1.23;

1.23
date	2000.08.11.16.42.55;	author jufi;	state Exp;
branches;
next	1.22;

1.22
date	2000.08.10.10.38.08;	author jufi;	state Exp;
branches;
next	1.21;

1.21
date	2000.04.07.20.17.49;	author ericj;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.05.21.49.27;	author ericj;	state Exp;
branches;
next	1.19;

1.19
date	2000.03.25.00.05.04;	author wvdputte;	state Exp;
branches;
next	1.18;

1.18
date	2000.03.05.03.33.05;	author ericj;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.03.00.54.56;	author chris;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.12.21.35.42;	author aaron;	state Exp;
branches;
next	1.15;

1.15
date	99.12.20.22.34.36;	author chris;	state Exp;
branches;
next	1.14;

1.14
date	99.12.06.21.45.58;	author chris;	state Exp;
branches;
next	1.13;

1.13
date	99.12.05.21.35.49;	author chris;	state Exp;
branches;
next	1.12;

1.12
date	99.12.05.21.15.54;	author chris;	state Exp;
branches;
next	1.11;

1.11
date	99.11.28.03.26.05;	author ericj;	state Exp;
branches;
next	1.10;

1.10
date	99.11.15.20.03.31;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	99.11.03.19.57.04;	author chris;	state Exp;
branches;
next	1.8;

1.8
date	99.10.25.17.36.07;	author ericj;	state Exp;
branches;
next	1.7;

1.7
date	99.10.15.16.18.23;	author ericj;	state Exp;
branches;
next	1.6;

1.6
date	99.10.15.00.16.15;	author ericj;	state Exp;
branches;
next	1.5;

1.5
date	99.10.14.21.03.20;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	99.10.08.15.50.52;	author ericj;	state Exp;
branches;
next	1.3;

1.3
date	99.09.24.01.46.14;	author ericj;	state Exp;
branches;
next	1.2;

1.2
date	99.09.15.13.44.59;	author ericj;	state Exp;
branches;
next	1.1;

1.1
date	99.09.15.05.16.23;	author ericj;	state Exp;
branches;
next	;


desc
@@


1.358
log
@move "duplicating filesystems" to the main disk/filesystem page and reorder
table of contents for clarity. no text change.

discussed with tb
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD FAQ: Disk Setup</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="copyright" content="This document copyright 1998-2017 by OpenBSD.">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/faq14.html">
</head>

<body bgcolor= "#ffffff" text= "#000000">

<h2>
<a href="../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">FAQ - Disk Setup</font>
<small>
<a href="index.html" style="font-weight:normal; float:right">[FAQ Index]</a>
</small>
</h2>
<hr>

<ul>
<li><a href="#intro"           >Disks and partitions</a>
<li><a href="#fdisk"           >Using fdisk</a>
<li><a href="#disklabel"       >Disk labels</a>
<li><a href="#BootAmd64"       >The amd64 boot process</a>
<li><a href="#SoftUpdates"     >Soft updates</a>
<li><a href="#altroot"         >Duplicating your root partition:
                                <tt>/altroot</tt></a>
<li><a href="#DupFS"           >Duplicating filesystems</a>
<li><a href="#foreignfs"       >Accessing other filesystems</a>
<li><a href="#MountImage"      >Mounting disk images</a>
<li><a href="#softraid"        >RAID and disk encryption</a>
  <ul>
  <li><a href="#softraidDI"    >Installing to a mirror</a>
  <li><a href="#softraidFDE"   >Full disk encryption</a>
  <li><a href="#softraidCrypto">Encrypting external disks</a>
  </ul>
</ul>
<hr>

<h2 id="intro">Disks and partitions</h2>

The details of setting up disks in OpenBSD vary between
<a href="../plat.html">platforms</a>, so you should read the instructions in
your platform's <tt>INSTALL.&lt;arch&gt;</tt> file.

<h3>Drive identification</h3>

On most platforms, OpenBSD handles mass storage with two drivers:

<ul>
  <li><a href="http://man.openbsd.org/wd">wd(4)</a>:
    IDE-like disks: IDE, SATA, MFM or ESDI disks, or a flash device, attached to
    a <a href="http://man.openbsd.org/wdc">wdc(4)</a> or a
    <a href="http://man.openbsd.org/pciide">pciide(4)</a> interface.
  <li><a href="http://man.openbsd.org/sd">sd(4)</a>:
    SCSI-like disks: Devices that utilize SCSI commands, USB disks, SATA disks
    attached to an <a href="http://man.openbsd.org/ahci">ahci(4)</a> interface,
    and disk arrays attached to a RAID controller.
</ul>

The devices are numbered by the order in which they are detected at boot time,
starting at zero.
So, the first IDE-like disk will be <tt>wd0</tt> and the third SCSI-like disk
will be <tt>sd2</tt>.
Note that OpenBSD will not necessarily number drives in the same order as your
boot ROM.

<h3>Partitions and filesystems</h3>

The term "partition" can mean two different things in OpenBSD:

<ul>
  <li>
    <a href="http://man.openbsd.org/disklabel">disklabel(8)</a> partitions, also
    called filesystem partitions.
  <li>
    <a href="http://man.openbsd.org/fdisk">fdisk(8)</a> partitions, sometimes
    called Master Boot Record (MBR) partitions.
</ul>

All OpenBSD platforms use the disklabel program as the primary way to manage
filesystem partitions.
On the platforms that use fdisk, one MBR partition is used to hold all of the
OpenBSD filesystems.
This partition can be sliced into 16 disklabel partitions, labeled <tt>a</tt>
through <tt>p</tt>.
A few labels are special:

<ul>
  <li><tt>a</tt>:
    The boot disk's <tt>a</tt> partition is your root partition.
  <li><tt>b</tt>:
    The boot disk's <tt>b</tt> partition is usually a swap partition.
  <li><tt>c</tt>:
    The <tt>c</tt> partition is always the entire disk.
</ul>

To create a new filesystem on a disklabel partition, use the
<a href="http://man.openbsd.org/newfs">newfs(8)</a> command:

<blockquote><pre>
# <b>newfs sd2a</b>
</pre></blockquote>

Thus, a device name plus a disklabel identify an OpenBSD filesystem.
For example, the identifier <tt>sd2a</tt> refers to the filesystem on the
<tt>a</tt> partition of the third <tt>sd</tt> device.
Its device files would be <tt>/dev/sd2a</tt> for the block device and
<tt>/dev/rsd2a</tt> for the raw (character) device.
Remembering whether a rarely used command needs a block or a character device
is difficult.
Therefore, many commands make use of the
<a href="http://man.openbsd.org/opendev">opendev(3)</a> function, which
automatically expands <tt>sd0</tt> to <tt>/dev/rsd0c</tt> or <tt>wd0a</tt> to
<tt>/dev/wd0a</tt>, as appropriate.

<h3 id="DUID">Disklabel Unique Identifiers</h3>

Disks can also be identified by Disklabel Unique Identifiers (DUIDs), a
16 hex digit number, managed by the
<a href="http://man.openbsd.org/diskmap">diskmap(4)</a> device.
This number is a random number generated when a disklabel is first created.
You can specify partitions on the disk by appending a period and the partition
letter.
For example, <tt>f18e359c8fa2522b.d</tt> is the <tt>d</tt> partition of the disk
<tt>f18e359c8fa2522b</tt> and will always refer to the same chunk of storage, no
matter what order the devices attached to the system, or what kind of interface
it is attached to.
If you put data on <tt>wd2d</tt>, then later remove <tt>wd1</tt> from the system
and reboot, your data is now on <tt>wd1d</tt>, as your old <tt>wd2</tt> is now
<tt>wd1</tt>.
However, a drive's DUID won't change after boot.

<h2 id="fdisk">Using fdisk</h2>

The <a href="http://man.openbsd.org/fdisk">fdisk(8)</a> utility is used on some
platforms (i386, amd64 and macppc) to create a partition recognized by the
system boot ROM.
Normally, only one OpenBSD fdisk partition will be placed on a disk and that
partition will then be subdivided into disklabel partitions.

<p>
View your partition table with:

<blockquote><pre>
# <b>fdisk sd0</b>
Disk: sd0       geometry: 553/255/63 [8883945 Sectors]
Offset: 0       Signature: 0xAA55
         Starting       Ending       LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
------------------------------------------------------------------------
 0: 12    0   1  1 -    2 254 63 [          63:       48132 ] Compaq Diag.
 1: 00    0   0  0 -    0   0  0 [           0:           0 ] unused
 2: 00    0   0  0 -    0   0  0 [           0:           0 ] unused
*3: A6    3   0  1 -  552 254 63 [       48195:     8835750 ] OpenBSD
</pre></blockquote>

Here, the OpenBSD partition (id <tt>A6</tt>) is marked with a <tt>*</tt> to
indicate that it is the bootable partition.

<p>
A totally blank disk will need to have the master boot record's boot code
written to the disk before it can boot.
Normally, all you need to do is:

<blockquote><pre>
# <b>fdisk -iy sd0</b>
</pre></blockquote>

Alternatively, use the <tt>reinit</tt> or <tt>update</tt> commands in
interactive mode.

<p>
The <tt>-e</tt> flag starts interactive editing mode:

<blockquote><pre>
# <b>fdisk -e sd0</b>
Enter 'help' for information
fdisk: 1>
</pre></blockquote>

Beware that <tt>q</tt> saves changes and exits the program, while <tt>x</tt>
exits without saving.
This is the opposite of what many people are now used to in other environments.
Note also that fdisk does not warn before saving the changes.

<p>
If your system has a maintenance or diagnostic partition, it is recommended that
you leave it in place or install it <b>before</b> installing OpenBSD.

<h2 id="disklabel">Disk labels</h2>

Disk labels are used to manage OpenBSD filesystem partitions.
They contain certain details about your disk, such as drive geometry and
filesystem information, as described in depth in the
<a href="http://man.openbsd.org/disklabel.5">disklabel(5)</a> man page.
Use the <a href="http://man.openbsd.org/disklabel">disklabel(8)</a> command
to edit the labels.

<p>
This can help overcome some architectures' disk partitioning limitations.
For example, on i386, there are only four primary MBR partitions available.
With disk labels, one of these primary partitions contains all your OpenBSD
partitions, while the other three are still available for other operating
systems.

<p>
On platforms using fdisk, you should leave the first logical track unused, both
in disklabel and in fdisk.
For this reason, the default is to start the first partition at block 64.

<p>
Don't put swap at the very beginning of your disk on sparc64.
While Solaris often did that, OpenBSD requires the boot partition to be at the
beginning of the disk.

<h3>Recovering partitions after deleting the disklabel</h3>

If you have a damaged partition table, there are various things you can attempt
to do to recover it.

<p>
A copy of the disklabel for each disk is saved in <tt>/var/backups</tt> as part
of the daily system maintenance.
Assuming you still have the <tt>/var</tt> partition, you can simply read the
output, and put it back into disklabel with the <tt>-R</tt> flag.

<p>
In the event that you can no longer see that partition, there are two options:
Fix enough of the disk so you can see it, or fix enough of the disk so that you
can get your data off.
The <a href="http://man.openbsd.org/scan_ffs">scan_ffs(8)</a> utility will look
through a disk to find partitions.
You can use the information it finds to recreate the disklabel.
If you just want <tt>/var</tt> back, you can recreate the partition for
<tt>/var</tt>, then recover the backed up label and add the rest from that.
The <a href="http://man.openbsd.org/disklabel">disklabel(8)</a> utility will
both update the kernel's understanding of the disklabel and attempt to write
the label to disk.
Therefore, even if the area of the disk containing the disklabel is unreadable,
you will be able to mount until the next reboot.

<h2 id="BootAmd64">The amd64 boot process</h2>

Details on the amd64 bootstrapping procedure are given in the
<a href="http://man.openbsd.org/boot_amd64">boot_amd64(8)</a> man page.
The boot process is as follows:

<ol>
  <li>Master Boot Record (MBR) and GUID Partition Table (GPT).
    The <a href="http://man.openbsd.org/fdisk">fdisk(8)</a> man page contains
    the details.
  <li>Partition Boot Record (PBR).
    The first 512 bytes of the boot disk's OpenBSD partition contain the first
    stage boot loader <a href="http://man.openbsd.org/biosboot">biosboot(8)</a>.
    It is installed by the
    <a href="http://man.openbsd.org/installboot">installboot(8)</a> utility.
  <li>Second stage boot loader <tt>/boot</tt>.
    The PBR loads the <a href="http://man.openbsd.org/boot.8">boot(8)</a>
    program which has the task of locating and loading the kernel.
</ol>

So, the very start of the boot process could look like this:

<blockquote><pre>
Using drive 0, partition 3.                      <b>&lt;- MBR</b>
Loading......                                    <b>&lt;- PBR</b>
probing: pc0 com0 com1 mem[638K 1918M a20=on]    <b>&lt;- /boot</b>
disk: hd0+ hd1+
>> OpenBSD/amd64 BOOT 3.33
boot>
booting hd0a:/bsd 4464500+838332 [58+204240+181750]=0x56cfd0
entry point at 0x100120

[ using 386464 bytes of bsd ELF symbol table ]
Copyright (c) 1982, 1986, 1989, 1991, 1993       <b>&lt;- Kernel</b>
        The Regents of the University of California.  All rights reserved.
</pre></blockquote>

<h2 id="SoftUpdates">Soft updates</h2>

Soft updates are based on an idea proposed by
<a href="https://www.ece.cmu.edu/~ganger/papers/CSE-TR-254-95/">Greg Ganger
and Yale Patt</a> and developed for FreeBSD by
<a href="https://www.mckusick.com/softdep/">Kirk McKusick</a>.
Soft updates imposes a partial ordering on the buffer cache
operations which permits the requirement for synchronous writing of
directory entries to be removed from the FFS code.
A large increase is seen in diskwriting performance as a result.

<p>
Enabling soft updates must be done with a mount-time option.
When mounting a partition with the
<a href="http://man.openbsd.org/mount">mount(8)</a>
utility, you can specify that you wish to have soft updates enabled on
that partition.
Below is a sample
<a href="http://man.openbsd.org/fstab">fstab(5)</a>
entry that has one partition <tt>sd0a</tt> that we wish to have mounted
with soft updates.

<blockquote><pre>
/dev/sd0a / ffs rw,softdep 1 1
</pre></blockquote>

<h2 id="altroot">Duplicating your root partition: <tt>/altroot</tt></h2>

OpenBSD provides an <tt>/altroot</tt> facility in the
<a href="http://man.openbsd.org/daily">daily(8)</a>
scripts.
If the environment variable <tt>ROOTBACKUP=1</tt> is set in either
<tt>/etc/daily.local</tt> or root's
<a href="http://man.openbsd.org/crontab.5">crontab(5)</a>,
and a partition is specified in
<a href="http://man.openbsd.org/fstab">fstab(5)</a>
as mounting to <tt>/altroot</tt> with the mount options of <tt>xx</tt>, every
night the entire contents of the root partition will be duplicated to the
<tt>/altroot</tt> partition.

<p>
Assuming you want to back up your root partition to the partition specified
by the <a href="faq14.html#DUID">DUID</a> <tt>bfb4775bb8397569.a</tt>,
add the following to <tt>/etc/fstab</tt>

<blockquote><pre>
bfb4775bb8397569.a /altroot ffs xx 0 0
</pre></blockquote>

and set the appropriate environment variable in <tt>/etc/daily.local</tt>:

<blockquote><pre>
# <b>echo ROOTBACKUP=1 >>/etc/daily.local</b>
</pre></blockquote>

As the <tt>/altroot</tt> process will capture your <tt>/etc</tt> directory, this
will make sure any configuration changes there are updated daily.
This is a "disk image" copy done with
<a href="http://man.openbsd.org/dd">dd(1)</a>
not a file-by-file copy, so your <tt>/altroot</tt> partition should be at least
the same size as your root partition.
Generally, you will want your <tt>/altroot</tt> partition to be on a different
disk that has been configured to be fully bootable should the primary
disk fail.

<h2 id="DupFS">Duplicating filesystems</h2>

To duplicate everything under directory <tt>/SRC</tt> to directory <tt>/DST</tt>
with <a href="http://man.openbsd.org/dump">dump(8)</a> and
<a href="http://man.openbsd.org/restore">restore(8)</a>, do:

<blockquote><pre>
# <b>cd /SRC && dump 0f - . | (cd /DST && restore -rf - )</b>
</pre></blockquote>

or use <a href="http://man.openbsd.org/tar">tar(1)</a>:

<blockquote><pre>
# <b>cd /SRC && tar cf - . | (cd /DST && tar xpf - )</b>
</pre></blockquote>

<h2 id="foreignfs">Accessing other filesystems</h2>

Start with the <a href="http://man.openbsd.org/mount">mount(8)</a>
manual, which contains examples explaining how to mount some of the
most commonly used filesystems.
A partial list of
<a href="http://man.openbsd.org/?query=mount_&amp;sec=8&amp;apropos=1">
supported filesystems</a> and related commands can be obtained with:

<blockquote><pre>
$ <b>man -k -s 8 mount</b>
</pre></blockquote>

Note that support may be limited to read-only operation.

<h2 id="MountImage">Mounting disk images</h2>

To mount a disk image in OpenBSD you must configure a
<a href="http://man.openbsd.org/vnd">vnd(4)</a>
device.
For example, if you have an ISO image located at <tt>/tmp/ISO.image</tt>,
you would take the following steps to mount the image.

<blockquote><pre>
# <b>vnconfig vnd0 /tmp/ISO.image</b>
# <b>mount -t cd9660 /dev/vnd0c /mnt</b>
</pre></blockquote>

Since this is an ISO 9660 image, as used by CDs and DVDs, you must specify
type of <tt>cd9660</tt> when mounting it.

<p>
To unmount the image and unconfigure the vnd(4) device, do:

<blockquote><pre>
# <b>umount /mnt</b>
# <b>vnconfig -u vnd0</b>
</pre></blockquote>

For more information, refer to
<a href="http://man.openbsd.org/vnconfig">vnconfig(8)</a>
and
<a href="http://man.openbsd.org/mount">mount(8)</a>.

<h2 id="softraid">RAID and disk encryption</h2>

The <a href="http://man.openbsd.org/softraid">softraid(4)</a> subsystem works
by emulating a <a href="http://man.openbsd.org/scsibus">scsibus(4)</a> with
<a href="http://man.openbsd.org/sd">sd(4)</a> devices made by combining a number
of OpenBSD <a href="http://man.openbsd.org/disklabel">disklabel(8)</a>
partitions into a virtual disk with the desired RAID level.
This virtual disk is treated as any other disk, first partitioned with
<a href="#fdisk">fdisk</a> (on fdisk platforms) and then
<a href="#disklabel">disklabels</a> are created as usual.
Note that only RAID0, RAID1, RAID5 and crypto are fully supported at the moment.

<h3 id="softraidDI">Installing to a mirror</h3>

This section covers installing OpenBSD to a mirrored pair of hard drives,
and assumes familiarity with the <a href="faq4.html">installation process</a>.
Disk setup may vary from platform to platform, and
<b>booting from softraid devices isn't supported on all of them</b>.
It's currently only possible to boot from RAID1 and crypto volumes
on i386, amd64 and sparc64.

<p>
Before using the install script, you will drop to a shell and set up a
<a href="http://man.openbsd.org/softraid">softraid(4)</a> device.

<p>
The install kernel only has the <tt>/dev</tt> entries for one
<a href="http://man.openbsd.org/wd">wd(4)</a> device and one
<a href="http://man.openbsd.org/sd">sd(4)</a> device on boot, so you will need
to manually create more disk devices if your desired softraid setup requires
them.
For example, if you need to support a second and third
<a href="http://man.openbsd.org/sd">sd(4)</a> device for a mirrored setup, you
could do the following from the shell prompt:

<blockquote><pre>
Welcome to the OpenBSD/amd64 X.X installation program.
(I)nstall, (U)pgrade, (A)utoinstall or (S)hell? <b>s</b>
# <b>cd /dev</b>
# <b>sh MAKEDEV sd1 sd2</b>
</pre></blockquote>

You now have full support for the <tt>sd0</tt>, the <tt>sd1</tt> and
<tt>sd2</tt> devices.

<p>
Next, we'll initialize the disks with
<a href="http://man.openbsd.org/fdisk">fdisk(8)</a> and create RAID partitions
with <a href="http://man.openbsd.org/disklabel">disklabel(8)</a>.

<p>
If you're booting from MBR, do:

<blockquote><pre>
# <b>fdisk -iy sd0</b>
# <b>fdisk -iy sd1</b>
</pre></blockquote>

If you use GPT for UEFI booting, do:

<blockquote><pre>
# <b>fdisk -iy -g -b 960 sd0</b>
# <b>fdisk -iy -g -b 960 sd1</b>
</pre></blockquote>

Create the partition layout on the first device:

<blockquote><pre>
# <b>disklabel -E sd0</b>
Label editor (enter '?' for help at any prompt)
> <b>a a</b>
offset: [64]
size: [39825135] <b>*</b>
FS type: [4.2BSD] <b>RAID</b>
> <b>w</b>
> <b>q</b>
No label changes.
</pre></blockquote>

Copy the partition layout to the second device:

<blockquote><pre>
# <b>disklabel sd0 > layout</b>
# <b>disklabel -R sd1 layout</b>
# <b>rm layout</b>
</pre></blockquote>

Assemble the mirror with the
<a href="http://man.openbsd.org/bioctl">bioctl(8)</a> command:

<blockquote><pre>
# <b>bioctl -c 1 -l sd0a,sd1a softraid0</b>
scsibus1 at softraid0: 1 targets
sd2 at scsibus2 targ 0 lun 0: &lt;OPENBSD, SR RAID 1, 005&gt; SCSI2 0/direct fixed
sd2: 10244MB, 512 bytes/sec, 20980362 sec total
</pre></blockquote>

This shows that we now have a new SCSI bus and a new disk, <tt>sd2</tt>.
This volume will be automatically detected and assembled when the system boots.

<p>
Even if you create multiple RAID arrays, the device name will always be
<tt>softraid0</tt>.
There won't be a <tt>softraid1</tt> or anything else.

<p>
Because the new device probably has a lot of garbage where you expect
a master boot record and disklabel, zeroing the first chunk of it is
highly recommended.
Be <b>very careful</b> with this command; issuing it on the wrong device
could lead to a very bad day.
This assumes that the new softraid device was created as <tt>sd2</tt>.

<blockquote><pre>
# <b>dd if=/dev/zero of=/dev/rsd2c bs=1m count=1</b>
</pre></blockquote>

You are now ready to install OpenBSD on your system.
Perform the install as normal by invoking "install" or "exit" at the boot
media console.
Create all the partitions on your new softraid disk (<tt>sd2</tt> in our
example here) that should be there, rather than on <tt>sd0</tt> or <tt>sd1</tt>
(the non-RAID disks).

<p>
To check on the status of your mirror, issue the following command:

<blockquote><pre>
# <b>bioctl sd2</b>
</pre></blockquote>

A nightly cron job to check the status might be a good idea.

<h4>Rebuilding a mirror</h4>

When a drive failure happens, you will replace the failed drive, create the
RAID and other disklabel partitions, then rebuild the mirror.
Assuming your RAID volume is <tt>sd2</tt> and you are replacing the
failed device with <tt>sd1m</tt>, the following commands should work:

<blockquote><pre>
# <b>bioctl -R /dev/sd1m sd2</b>
# <b>reboot</b>
</pre></blockquote>

These steps can be performed in either
<a href="faq8.html#LostPW">single user mode</a>
or from the <a href="faq4.html#bsd.rd">install kernel</a>.

<h3 id="softraidFDE">Full disk encryption</h3>

Much like RAID, full disk encryption in OpenBSD is handled by the
<a href="http://man.openbsd.org/softraid">softraid(4)</a> subsystem and
<a href="http://man.openbsd.org/bioctl">bioctl(8)</a> command.
This section covers installing OpenBSD to a single encrypted disk, and is a
very similar process to the previous one.
Note that <b>using both RAID and disk encryption on the same device is not
currently supported</b>.

<p>
Select (S)hell at the initial prompt.

<blockquote><pre>
Welcome to the OpenBSD/amd64 X.X installation program.
(I)nstall, (U)pgrade, (A)utoinstall or (S)hell? <b>s</b>
</pre></blockquote>

From here, you'll be given a shell within the live environment to manipulate
the disks.
For this example, we will install to the <tt>sd0</tt> SATA drive, erasing all
of its previous contents.
You may want to write random data to the drive first with something like the
following:

<blockquote><pre>
# <b>dd if=/dev/random of=/dev/rsd0c bs=1m</b>
</pre></blockquote>

This can be a very time-consuming process, depending on the speed of your
CPU and disk, as well as the size of the disk.
If you don't write random data to the whole device, it may be possible for an
adversary to deduce how much space is actually being used.

<p>
Next, we'll initialize the disk with
<a href="http://man.openbsd.org/fdisk">fdisk(8)</a> and create the softraid
partition with <a href="http://man.openbsd.org/disklabel">disklabel(8)</a>.

<p>
If you're booting from MBR, do:

<blockquote><pre>
# <b>fdisk -iy sd0</b>
</pre></blockquote>

If you use GPT for UEFI booting, do:

<blockquote><pre>
# <b>fdisk -iy -g -b 960 sd0</b>
</pre></blockquote>

Next, create the partition layout:

<blockquote><pre>
# <b>disklabel -E sd0</b>
Label editor (enter '?' for help at any prompt)
> <b>a a</b>			<!-- sparc64 users MUST use 'a a' here -->
offset: [64]
size: [39825135] <b>*</b>
FS type: [4.2BSD] <b>RAID</b>
> <b>w</b>
> <b>q</b>
No label changes.
</pre></blockquote>

We'll use the entire disk, but note that the encrypted device can be
split up into multiple partitions as if it were a regular hard drive.

<p>
Now we can build the encrypted device on our "a" partition.

<blockquote><pre>
# <b>bioctl -c C -l sd0a softraid0</b>
New passphrase:
Re-type passphrase:
sd1 at scsibus2 targ 1 lun 0: &lt;OPENBSD, SR CRYPTO, 005&gt; SCSI2 0/direct fixed
sd1: 19445MB, 512 bytes/sector, 39824607 sectors
softraid0: CRYPTO volume attached as sd1
</pre></blockquote>

Since the installer does not have many device nodes by default, we'll make
sure the <tt>/dev/sd1</tt> device is accounted for.

<blockquote><pre>
# <b>cd /dev && sh MAKEDEV sd1</b>
</pre></blockquote>

All data written to <tt>sd1</tt> will now be encrypted with AES in XTS mode.

<p>
As in the previous example, we'll overwrite the first megabyte of our new
pseudo-device.

<blockquote><pre>
# <b>dd if=/dev/zero of=/dev/rsd1c bs=1m count=1</b>
</pre></blockquote>

Type <tt>exit</tt> to return to the main installer, then choose this new
device as the one for your installation.

<blockquote><pre>
[...]
Available disks are: sd0 sd1.
Which disk is the root disk? ('?' for details) [sd0] <b>sd1</b>
</pre></blockquote>

You will be prompted for the passphrase on startup, but all other operations
should be handled transparently.

<h3 id="softraidCrypto">Encrypting external disks</h3>

Cryptographic softraid volumes can be set up rather simply.
This section explains how you might do so for an external USB flash drive,
but can be applied to any disk device.
If you already read the section on full disk encryption, this should be very
familiar.
An outline of the steps is as follows:

<ul>
  <li>Overwrite the drive's contents with random data
  <li>Create the desired RAID-type partition with disklabel(8)
  <li>Encrypt the drive (note that the initial creation of the container and
      attaching the container are done with the same bioctl(8) command)
  <li>Zero the first megabyte of the new pseudo-partition
  <li>Create a filesystem on the pseudo-device with
  <a href="http://man.openbsd.org/newfs">newfs(8)</a>
  <li>Unlock and <a href="http://man.openbsd.org/mount">mount(8)</a> the new
      pseudo-device
  <li>Access the files as needed
  <li>Unmount the drive and detach the encrypted container
</ul>

A quick example runthrough of the steps follows, with <tt>sd3</tt> being
the USB drive.

<blockquote><pre>
# <b>dd if=/dev/random of=/dev/rsd3c bs=1m</b>
# <b>fdisk -iy sd3</b>
# <b>disklabel -E sd3</b> (create an "a" partition, see above for more info)
# <b>bioctl -c C -l sd3a softraid0</b>
New passphrase:
Re-type passphrase:
softraid0: CRYPTO volume attached as sd4
# <b>dd if=/dev/zero of=/dev/rsd4c bs=1m count=1</b>
# <b>fdisk -iy sd4</b>
# <b>disklabel -E sd4</b> (create an "i" partition, see above for more info)
# <b>newfs sd4i</b>
# <b>mkdir -p /mnt/secretstuff</b>
# <b>mount /dev/sd4i /mnt/secretstuff</b>
# <b>mv somefile /mnt/secretstuff/</b>
# <b>umount /mnt/secretstuff</b>
# <b>bioctl -d sd4</b>
</pre></blockquote>

Next time you need to access the drive, simply use bioctl(8) to attach it
and then repeat the last four commands as needed.

<p>
<!-- XXXrelease: remove this paragraph; bioctl(4) no longer says "delete." -->
The man page for this looks a little scary, as the <tt>-d</tt> command is
described as "deleting" the volume.
In the case of crypto, however, it just deactivates the encrypted volume so
it can't be accessed until it is activated again with the passphrase.

<p>
</body>
</html>
@


1.357
log
@a few more links can switch to https.
@
text
@d37 1
d353 16
@


1.356
log
@add a sentence introducing the newfs command to the "partitions and
filesystems" section. hoist the bullet list with special disklabels
up a bit, so the whole section remains coherent. prompted by a diff
by currell berry on tech.

ok tj
@
text
@d291 1
a291 1
<a href="http://www.ece.cmu.edu/~ganger/papers/CSE-TR-254-95/">Greg Ganger
d293 1
a293 1
<a href="http://www.mckusick.com/softdep/">Kirk McKusick</a>.
@


1.355
log
@boot(8), not boot(9)
@
text
@d95 17
a112 1
<p>
a123 12

<p>
A few labels are special:

<ul>
  <li><tt>a</tt>:
    The boot disk's <tt>a</tt> partition is your root partition.
  <li><tt>b</tt>:
    The boot disk's <tt>b</tt> partition is usually a swap partition.
  <li><tt>c</tt>:
    The <tt>c</tt> partition is always the entire disk.
</ul>
@


1.354
log
@despite its name, the faq has very few <h2> titles written in the form
of a question. rename these last survivors to the standard "topic" title.
zap a short blurb about df while here.

ok tb
@
text
@d263 2
a264 2
    The PBR loads the <a href="http://man.openbsd.org/boot">boot(8)</a> program
    which has the task of locating and loading the kernel.
@


1.353
log
@remove a confusing sentence about how adding or removing a disk may
influence disk numbers in openbsd

prompted by diffs by marcus merighi, thanks
@
text
@d32 1
a32 1
<li><a href="#disklabel"       >What are disk labels?</a>
d37 1
a37 2
<li><a href="#foreignfs"       >Can I access data on filesystems other
                                than FFS?</a>
a38 2
<li><a href="#NegSpace"        >Why does df tell me I have over 100%
                                of my disk used?</a>
d195 1
a195 1
<h2 id="disklabel">What are disk labels?</h2>
d349 1
a349 1
<h2 id="foreignfs">Can I access data on filesystems other than FFS?</h2>
d351 2
a352 4
Yes.
Start with the
<a href="http://man.openbsd.org/mount">mount(8)</a>
manual which contains examples explaining how to mount some of the
d356 1
a356 2
supported filesystems</a>
and related commands can be obtained with
a391 21

<h2 id="NegSpace">Why does df tell me I have over 100% of my disk used?</h2>

People are sometimes surprised to find they have negative available disk space,
or more than 100% of a filesystem in use, as shown by
<a href="http://man.openbsd.org/df">df(1)</a>.

<p>
When a filesystem is created with
<a href="http://man.openbsd.org/newfs">newfs(8)</a>,
some of the available space is held in reserve from normal users.
This provides a margin of error when you accidentally fill the disk, and
helps keep disk fragmentation to a minimum.
Default for this is 5% of the disk capacity, so if the root user has
been carelessly filling the disk, you may see up to 105% of the
available capacity in use.

<p>
If the 5% value is not appropriate for you, you can change it with the
<a href="http://man.openbsd.org/tunefs">tunefs(8)</a>
command.
@


1.352
log
@use a slightly more modern machine for the bootloader examples
@
text
@a75 1
Removing or adding a disk may impact the identity of other drives on the system.
@


1.351
log
@we can't boot from raid5, so remove a misleading comment about it.

ok tb
@
text
@d275 4
a278 4
Loading....                                      <b>&lt;- PBR</b>
probing: pc0 com0 com1 apm mem[636k 190M a20=on] <b>&lt;- /boot</b>
disk: fd0 hd0+
>> OpenBSD/i386 BOOT 3.26
@


1.350
log
@i forgot to remove an (8)
@
text
@d439 1
a439 1
It's currently only possible to boot from RAID1, RAID5 and crypto volumes
@


1.349
log
@slightly rework the boot amd64 section.
@
text
@d249 1
a249 1
you will be able to mount(8) it until the next reboot.
@


1.348
log
@remove "some words on raid in general".

suggested by naddy and discussed with tj
@
text
@d253 3
a255 4
Details on the amd64 bootstrapping procedures are given in the
<a href="http://man.openbsd.org/boot_amd64">boot_amd64(8)</a>
man page.
There are four key pieces to the boot process:
d258 11
a268 22
  <li><b>Master Boot Record (MBR) and GUID Partition Table (GPT):</b>
    The
    <a href="http://man.openbsd.org/fdisk">fdisk(8)</a>
    man page contains detailed explanations.
  <li><b>Partition Boot Record (PBR):</b>
    The first-stage boot loader
    <a href="http://man.openbsd.org/biosboot">biosboot(8)</a>
    occupies the first 512 bytes of the OpenBSD partition of the disk
    and is therefore called the PBR.
    It is installed by
    <a href="http://man.openbsd.org/installboot">installboot(8)</a>.
  <li><b>Second Stage Boot Loader <tt>/boot</tt>:</b>
    The
    <a href="http://man.openbsd.org/boot">boot(8)</a>
    program is loaded by the PBR and has the task of accessing the OpenBSD
    file system through the machine's BIOS.
    It locates and loads the kernel.
  <li><b>Kernel: <tt>/bsd</tt>:</b>
    The goal of the boot process is to have the OpenBSD kernel loaded into
    RAM and properly running.
    Once the kernel has loaded, OpenBSD accesses the hardware directly,
    no longer through the BIOS.
a285 1
   ...
@


1.347
log
@replace "using disklabel" with a short high level description of disklabels
in particular, avoid rehashing the man page. clean up the disaster recovery
bit.

with & ok tj
@
text
@d437 3
a439 3
by emulating a <a href="http://man.openbsd.org/scsibus">scsibus(4)</a>
with <a href="http://man.openbsd.org/sd">sd(4)</a> devices made by combining a
number of OpenBSD <a href="http://man.openbsd.org/disklabel">disklabel(8)</a>
a440 1
Note that only RAID0, RAID1, RAID5 and crypto are fully supported at the moment.
d444 1
a444 46

<h4>Some words on RAID in general:</h4>

<ul>
  <li>
    Before implementing any RAID solution, understand what it will and
    will not do for you.
    It is not a replacement for a good backup strategy.
    It will not keep your system running through every hardware failure.
    It may not keep your system running through a simple disk failure.
    In the case of software RAID, it won't guarantee the ability to boot
    from the surviving drive if your computer could not otherwise do so.
  <li>
    Before going into production, you must understand how you use your
    RAID solution to recover from failures.
    The time to do this is <b>before</b> your system has had a failure event.
    Poorly implemented RAID will often cause more down time than it will
    prevent.
    This is even more true if it has caused you to become complacent on your
    backups or other disaster planning.
  <li>
    The bigger your RAIDed partitions are, the longer it will take to
    recover from an "event."
    In other words, this is an especially bad time to allocate all of your
    cheap 500GB drives just because they are there.
    Remirroring 500GB drives takes a much longer time than mirroring the
    4GB that you actually use.
    One advantage of software mirroring is one can control how much of
    those "huge" drives is actually used in a RAID set.
  <li>
    There is a reflex to try to RAID as much of your system as possible.
    Even hardware which CAN boot from RAIDed drives will often have difficulty
    determining when a drive has failed to avoid booting from it.
    OpenBSD's <a href="#altroot">altroot</a> system can actually be better
    for some applications, as it provides a copy of old configuration
    information in case a change does not work quite as intended.
  <li>
    RAID provides redundancy only for the disk system.
    Many applications need more redundancy than just the disks, and for some
    applications, RAID can be just added complication, rather than a real
    benefit.
    An example of this is a CARP'd set of firewalls providing complete
    failover redundancy.
    In this case, adding RAID (either via hardware or softraid) is just
    added complication.
</ul>
@


1.346
log
@clean up the fdisk section: merge the bullet list "fdisk tips and tricks"
into the main text and spell out "fdisk -iy sd0" explicitly.

ok tj
@
text
@d32 1
a32 1
<li><a href="#disklabel"       >Using disklabel</a>
a194 1

d199 1
a199 3
<h2 id="disklabel">Using disklabel</h2>

<h3>What is disklabel?</h3>
d201 6
a206 2
First, be sure to read the
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a> man page.
d209 5
a213 9
The details of setting up disks in OpenBSD varies somewhat between
platforms.
For <a href="../i386.html">i386</a>,
<a href="../amd64.html">amd64</a>
and <a href="../macppc.html">macppc</a>,
disk setup is done in two stages:
First, the OpenBSD slice of the hard disk is defined using fdisk(8),
then that slice is subdivided into OpenBSD partitions using
disklabel(8).
d216 3
a218 9
All OpenBSD platforms, however, use disklabel(8) as the primary way to
manage OpenBSD partitions.
Labels hold certain information about your disk, like your drive
geometry and information about the filesystems on the disk.
The disklabel is then used by the bootstrap program to access the drive and
to know where filesystems are contained on the drive.
You can read more in-depth information about disklabel in the
<a href="http://man.openbsd.org/disklabel.5">disklabel(5)</a>
man page.
d221 3
a223 60
On some platforms, disklabel helps overcome architecture limitations on
disk partitioning.
For example, on i386, you can have four primary partitions.
With
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a>,
you use one of these primary partitions to store all of your OpenBSD partitions,
and you will still have 3 more partitions available for other OSs.

<h3>disklabel(8) during OpenBSD's install</h3>

By default, the installer will allocate disklabels automatically.

<h3>Disklabel basics</h3>

<ul>
  <li><b>Get help:</b>
    In the command-driven mode, hitting <tt>?</tt> will produce a list of
    available commands.
    <tt>M</tt> will show the man page for disklabel(8).
  <li><b>Auto-partitioning:</b>
    New users are encouraged to use the <tt>A</tt> command to auto-create a
    recommended disklabel.
    You can then edit or alter the auto-created label as you need.
  <li><b>Reset to default:</b>
    In some cases, you may wish to completely restart from scratch and
    delete all existing disklabel information.
    The "D" command will reset the label back to default, as if there had
    never been a disklabel on the drive.
  <li><b><tt>q</tt> vs. <tt>x</tt>:</b>
    For historical reasons, while in the command-driven editor mode, <tt>q</tt>
    saves changes and exits the program, and "x" exits without saving.
    This is the opposite of what many people are now used to in other
    environments.
    disklabel(8) does warn before saving the changes, though it will <tt>x</tt>
    quickly and quietly.
</ul>

<h3>Miscellaneous disklabel tidbits</h3>

<ul>
  <li>(fdisk platforms) <b>Leave first track free:</b>
    On platforms using fdisk(8), you should leave the first logical track
    unused, both in disklabel(8) and in fdisk(8).
    For this reason, OpenBSD defaults to starting the first partition at
    block 64.
  <li>(sparc64) <b>Don't put swap at the very beginning of your disk.</b>
    While Solaris often puts swap at the very beginning of a disk, OpenBSD
    requires the boot partition to be at the beginning of the disk.
  <li><b>Devices without a disklabel:</b>
    If a device does not currently have an OpenBSD disklabel on it but has
    another file system (for example, a disk with a pre-existing FAT32 file
    system), the OpenBSD kernel will "create" one in memory, and that can form
    the basis of a formal OpenBSD disklabel to be stored on disk.
    However, if a disklabel is created and saved to disk, and a non-OpenBSD
    file system is added later, the disklabel will not be automatically
    updated.
    You must do this yourself if you wish OpenBSD to be able to access this
    file system.
    More on this <a href="faq14.html#foreignfs">below</a>.
</ul>
d234 1
a234 1
output, and put it back into disklabel.
d237 6
a242 11
In the event that you can no longer see that partition, there are two
options.
Fix enough of the disk so you can see it, or fix enough of the disk so
that you can get your data off.

<p>
The first tool you need is
<a href="http://man.openbsd.org/scan_ffs">scan_ffs(8)</a>
which will look through a disk, and try and find partitions.
It will also tell you what information it finds about them.
You can use this information to recreate the disklabel.
d244 6
a249 11
<tt>/var</tt>, and then recover the backed up label and add the rest
from that.

<p>
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a>
will update both the kernel's understanding of the disklabel, and
then attempt to write the label to disk.
Therefore, even if the area of the disk containing the disklabel is
unreadable, you will be able to
<a href="http://man.openbsd.org/mount">mount(8)</a>
it until the next reboot.
@


1.345
log
@remove two unneeded labels
@
text
@d144 5
a148 2
Be sure to check the <a href="http://man.openbsd.org/fdisk">fdisk(8)</a>
man page.
d151 1
a151 19
fdisk(8) is used on some platforms (i386, amd64 and macppc)
to create a partition recognized by the system boot ROM, into
which the OpenBSD disklabel partitions can be placed.
Unlike the fdisk-like programs on some other operating systems,
OpenBSD's fdisk(8) assumes you know what you want to do.

<p>
Normally, only one OpenBSD fdisk partition will be placed on a disk.
That partition will be subdivided by <a href="#disklabel">disklabel</a>
into OpenBSD filesystem partitions.

<p>
To just view your partition table using fdisk, use:

<blockquote><pre>
$ <b>fdisk sd0</b>
</pre></blockquote>

Which will give an output similar to this:
d154 1
d160 2
a161 2
*0: A6    3   0  1 -  552 254 63 [       48195:     8835750 ] OpenBSD
 1: 12    0   1  1 -    2 254 63 [          63:       48132 ] Compaq Diag.
d163 1
a163 1
 3: 00    0   0  0 -    0   0  0 [           0:           0 ] unused
d166 2
a167 3
In this example, we are viewing the fdisk output of the first SCSI-like drive.
We can see the OpenBSD partition (id <tt>A6</tt>) and its size.
The <tt>*</tt> tells us that the OpenBSD partition is the bootable partition.
d170 13
a182 1
Edit the partition table with the <tt>-e</tt> flag:
d190 4
a193 1
<h3>fdisk tricks and tips</h3>
d195 4
a198 19
<ul>
  <li>
    fdisk(8) offers the ability to specify partitions both in raw sectors
    and in Cylinder/Head/Sector formats.
  <li>
    A totally blank disk will need to have the master boot record's boot code
    written to the disk before it can boot.
    You can use the <tt>reinit</tt> or <tt>update</tt> commands to do this.
  <li>
    If your system has a "maintenance" or "diagnostic" partition, it is
    recommended that you leave it in place or install it <b>before</b>
    installing OpenBSD.
  <li>
    For historical reasons, <tt>q</tt> saves changes and exits the program,
    and <tt>x</tt> exits without saving.
    This is the opposite of what many people are now used to in other
    environments.
    fdisk(8) does not warn before saving the changes, so use with care.
</ul>
@


1.344
log
@rewrap, clean up and tighten the "disks and partitions" section. inline
a few bullet lists and rearrange some sections to improve the flow.

ok tj
@
text
@d217 1
a217 1
<h3 id="disklabel.1">What is disklabel?</h3>
d253 1
a253 1
<h3 id="disklabel.2">disklabel(8) during OpenBSD's install</h3>
@


1.343
log
@clean up and tighten "installing to a mirror".

with & ok tj
@
text
@d53 3
a55 5
The details of setting up disks in OpenBSD vary between platforms, so
you should read the installation instructions in the
<tt>INSTALL.&lt;arch&gt;</tt> file for your
<a href="../plat.html">platform</a>
to determine the specifics for your system.
d59 1
a59 2
OpenBSD handles mass storage with two drivers on most platforms,
depending upon the normal command set that kind of device supports:
d63 3
a65 6
    IDE-like disks: IDE, SATA, MFM or ESDI disks, or a flash device
    with an appropriate adapter, attached to a
    <a href="http://man.openbsd.org/wdc">wdc(4)</a>
    or
    <a href="http://man.openbsd.org/pciide">pciide(4)</a>
    interface.
d67 3
a69 4
    SCSI-like disks:
    Devices that utilize SCSI commands, USB disks, SATA disks attached to an
    <a href="http://man.openbsd.org/ahci">ahci(4)</a>
    interface, and disk arrays attached to a RAID controller.
d72 7
a78 10
The first drive of a particular type identified by OpenBSD will be
drive <tt>0</tt>, the second will be <tt>1</tt>, etc.
So, the first IDE-like disk will be <tt>wd0</tt>, the third SCSI-like disk will
be <tt>sd2</tt>.
If you have two SCSI-like drives and three IDE-like drives on a system,
you would have <tt>sd0</tt>, <tt>sd1</tt>, <tt>wd0</tt>, <tt>wd1</tt> and
<tt>wd2</tt> on that machine.
The order is based on the order they are found during hardware discovery
at boot.
There are a few key points to keep in mind:
d80 1
a80 9
<ul>
  <li>
    Drives may not be numbered in the same order as your boot ROM
    attempts to boot them (i.e., your system may attempt to boot what OpenBSD
    identifies as <tt>wd2</tt> or <tt>sd1</tt>).
    Sometimes you may be able to change this, sometimes not.
  <li>Removing or adding a disk may impact the identity of other drives on
    the system.
</ul>
d82 1
a82 4
<h3>Partitioning</h3>

Due to historical reasons, the term "partition" is regularly used for
two different things in OpenBSD:
d86 2
a87 2
    <a href="http://man.openbsd.org/disklabel">disklabel(8)</a>
    partitions, often called filesystem partitions.
d89 2
a90 2
    <a href="http://man.openbsd.org/fdisk">fdisk(8)</a>
    partitions, often called Master Boot Record (MBR) partitions.
d93 22
a114 8
All OpenBSD platforms use disklabel(8) as the primary way to manage
OpenBSD filesystem partitions.
Some platforms also require using fdisk(8) to manage MBR partitions.
On the platforms that use them, one fdisk partition is used
to hold all of the OpenBSD file systems.
This partition is then sliced up into 16 disklabel partitions,
labeled <tt>a</tt> through <tt>p</tt>.
A few of these are special:
d118 1
a118 1
    On the boot disk, the <tt>a</tt> partition is your root partition.
d120 1
a120 2
    On the boot disk, the <tt>b</tt> partition is automatically used
    as a swap partition.
d122 1
a122 2
    On all disks, the <tt>c</tt> partition is the entire disk, from the
    first sector to the last.
a124 25
<h3>Partition identification</h3>

An OpenBSD filesystem is identified by the disk it is on, plus the
disklabel partition on that disk.
So, file systems may be identified by identifiers like <tt>sd0a</tt>
(the <tt>a</tt> partition of the first <tt>sd</tt> device),
<tt>wd2h</tt> (the <tt>h</tt> partition of the third <tt>wd</tt> device),
or <tt>sd1c</tt> (the entire second <tt>sd</tt> device).
The corresponding device files would be <tt>/dev/sd0a</tt> for the block device
and <tt>/dev/rsd0a</tt> for the raw (character) device, etc.
Remembering whether a rarely used command needs a block or a character device
is difficult.
Therefore, many commands make use of the
<a href="http://man.openbsd.org/opendev">opendev(3)</a>
function, which automatically expands <tt>sd0</tt> to <tt>/dev/rsd0c</tt> or
<tt>wd0a</tt> to <tt>/dev/wd0a</tt>, as appropriate.

<p>
If you put data on <tt>wd2d</tt>, then later remove <tt>wd1</tt>
from the system and reboot, your data is now on <tt>wd1d</tt>, as your old
<tt>wd2</tt> is now <tt>wd1</tt>.
However, a drive's identification won't change after boot, so if
a USB drive is unplugged or fails, it won't change the identification
of other drives until reboot.

d129 1
a129 2
<a href="http://man.openbsd.org/diskmap">diskmap(4)</a>
device.
d131 10
a140 8
These UIDs are persistent -- if you identify your disks this way,
drive <tt>f18e359c8fa2522b</tt> will always be <tt>f18e359c8fa2522b</tt>,
no matter what order or how it is attached.
You can specify partitions on the disk by appending a period and the
partition letter, for example, <tt>f18e359c8fa2522b.d</tt> is the <tt>d</tt>
partition of the disk <tt>f18e359c8fa2522b</tt> and will always refer
to the same chunk of storage, no matter what order the device is attached
to the system, or what kind of interface it is attached to.
@


1.342
log
@better separation of mbr and gpt instructions in the fde/raid sections.

ok tb
@
text
@a617 4
The tools to assemble your softraid system are in the basic OpenBSD
install (for adding softraid devices after install), but they are
also available on the CD-ROM and <a href="faq4.html#bsd.rd">bsd.rd</a>
for installing your system to a softraid setup.
d619 1
a619 2
and assumes familiarity with the <a href="faq4.html">installation process</a>
and ramdisk kernel.
d626 2
a627 8
The installation process will be a little different than the standard
OpenBSD install, as you will want to drop to the shell and create your
softraid(4) drive before doing the install.
Once the softraid(4) disk is created, you will perform the install relatively
normally, placing the partitions you wish to be RAIDed on the newly
configured drive.
If it sounds confusing at first, don't worry.
All the steps will be explained in detail.
d631 7
a637 12
<a href="http://man.openbsd.org/wd">wd(4)</a>
device and one
<a href="http://man.openbsd.org/sd">sd(4)</a>
device on boot, so you will need to manually create more disk devices
if your desired softraid setup requires them.

This process is normally done automatically by the installer, but you
haven't yet run the installer, and you will be adding a disk that didn't
exist at boot.
For example, if we needed to support a second and third sd(4) device
for a mirrored setup, you could do the following from the shell
prompt:
d651 2
a652 3
<a href="http://man.openbsd.org/fdisk">fdisk(8)</a> and create the softraid
partition with <a href="http://man.openbsd.org/disklabel">disklabel(8)</a>.
An "a" partition will be made on both of the drives for the new RAID device.
d669 1
a669 1
Next, create the partition layout:
d683 1
a683 4
You'll notice that we initialized both disks, but only created a partition
layout on the first drive.
That's because you can easily import the drive's configuration directly with the
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a> command.
d691 2
a692 6
The "layout" file in this example can be named anything.

<p>
Next, create the mirror with the
<a href="http://man.openbsd.org/bioctl">bioctl(8)</a>
command.
a695 16
</pre></blockquote>

Note that if you are creating multiple RAID devices, either on one disk
or on multiple devices, you're always going to be using the <tt>softraid0</tt>
virtual disk interface driver.
You won't be using "softraid1" or others.
The "softraid0" there is a virtual RAID controller, and you can hang many
virtual disks off this controller.

<p>
The new pseudo-disk device will show up as <tt>sd2</tt> here, assuming there
are no other sd(4) devices on your system.
This device will now show on the system console and dmesg as a newly
installed device:

<blockquote><pre>
d702 6
a707 2
This volume will be automatically detected and assembled from this point
onward when the system boots.
a728 5
Now you can reboot your system and, if you have done things properly, it
will automatically assemble your RAID set and mount the appropriate
partitions.

<p>
d735 1
a735 1
A nightly cron job to check the status might also be a good idea.
@


1.341
log
@add the magic fdisk incantation for gpt/uefi.
based on a diff from jason tubnor, verified by yasuoka.
@
text
@d670 3
a672 1
If you wish to boot from the MBR, do:
a675 1
Writing MBR at offset 0.
d677 12
a688 1
Writing MBR at offset 0.
a699 9
If you use GPT for UEFI booting, the fdisk(8) command is:

<blockquote><pre>
# <b>fdisk -b 960 -giy sd0</b>
</pre></blockquote>

This will change the offset of the first disklabel slice to 1024.

<p>
d832 3
a834 1
If you wish to boot from the MBR, do:
d838 11
a848 1
Writing MBR at offset 0.
a859 9
If you use GPT for UEFI booting, the fdisk(8) command is:

<blockquote><pre>
# <b>fdisk -b 960 -giy sd0</b>
</pre></blockquote>

This will change the offset of the first disklabel slice to 1024.

<p>
@


1.340
log
@2017
@
text
@d667 2
a668 3
<a href="http://man.openbsd.org/fdisk">fdisk(8)</a>
and create the softraid partition with
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a>.
d670 1
d688 9
d829 1
d845 9
@


1.339
log
@revert the previous cosmetic change; jsing confirms that the sparc64
bootloader only looks at disklabel 'a'. add a comment as a reminder.

pointed out by nick holland, thanks
@
text
@a9 2
<meta name= "copyright"         content="This document copyright 1998-2016
                                         by OpenBSD.">
d11 1
@


1.338
log
@disklabel partitions a, b and c are special while i is kinda special, so
use different ones in the softraid examples.

requested by & ok phessler
@
text
@d671 1
a671 1
A "d" partition will be made on both of the drives for the new RAID device.
d680 1
a680 1
> <b>a d</b>
d708 1
a708 1
# <b>bioctl -c 1 -l sd0d,sd1d softraid0</b>
d827 1
a827 1
> <b>a d</b>
d840 1
a840 1
Now we can build the encrypted device on our "d" partition.
d843 1
a843 1
# <b>bioctl -c C -l sd0d softraid0</b>
d909 2
a910 2
# <b>disklabel -E sd3</b> (create a "d" partition, see above for more info)
# <b>bioctl -c C -l sd3d softraid0</b>
d916 2
a917 2
# <b>disklabel -E sd4</b> (create an "e" partition, see above for more info)
# <b>newfs sd4e</b>
@


1.337
log
@note that stacking raid and disk encryption is currently unsupported.
tweak wording while here.
@
text
@d671 1
a671 1
An "a" partition will be made on both of the drives for the new RAID device.
d680 1
a680 1
> <b>a a</b>
d708 1
a708 1
# <b>bioctl -c 1 -l sd0a,sd1a softraid0</b>
d827 1
a827 1
> <b>a a</b>
d840 1
a840 1
Now we can build the encrypted device on our "a" partition.
d843 1
a843 1
# <b>bioctl -c C -l sd0a softraid0</b>
d909 2
a910 2
# <b>disklabel -E sd3</b> (create an "a" partition, see above for more info)
# <b>bioctl -c C -l sd3a softraid0</b>
d916 2
a917 2
# <b>disklabel -E sd4</b> (create an "i" partition, see above for more info)
# <b>newfs sd4i</b>
@


1.336
log
@add an XXXrelease marker to the paragraph about deleting softraid volumes.

pointed out by danj; tj agrees
@
text
@d786 2
a787 4
<a href="http://man.openbsd.org/softraid">softraid(4)</a>
subsystem and
<a href="http://man.openbsd.org/bioctl">bioctl(8)</a>
command.
d790 2
d819 2
a820 3
<a href="http://man.openbsd.org/fdisk">fdisk(8)</a>
and create the softraid partition with
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a>.
d837 4
a840 2
split up into multiple mount points as if it were a regular hard drive.
Now it's time to build the encrypted device on our "a" partition.
d882 1
a882 2
As we just illustrated, cryptographic softraid(4) volumes are set up rather
simply.
d893 1
a893 1
    attaching the container are done with the same bioctl(8) command)
d897 2
a898 3
  <li>Unlock and
  <a href="http://man.openbsd.org/mount">mount(8)</a>
    the new pseudo-device
@


1.335
log
@change random offset in softraid RAID1 to 64 and there was an sd0
that should have been sd2 due to a softraid on wd0 -> sd0 conversion.
spotted by daniel ouellet

ok tj
@
text
@d930 1
@


1.334
log
@remove zaurus mentions.
@
text
@d681 1
a681 1
offset: [2104515]
d740 1
a740 1
This assumes that the new softraid device was created as <tt>sd0</tt>.
@


1.333
log
@remove more sparc mentions and use "sparc64" to refer to ultrasparc.
@
text
@d182 1
a182 1
fdisk(8) is used on some platforms (i386, amd64, macppc and zaurus)
d260 2
a261 3
<a href="../amd64.html">amd64</a>,
<a href="../macppc.html">macppc</a>
and <a href="../zaurus.html">zaurus</a>,
@


1.332
log
@6.0 faq updates: setenv in doas.conf, proot, wxneeded, bump cvs examples
to -rOPENBSD_6_0 and link to the 6.0 upgrade guide.

ok tb
@
text
@d325 1
a325 1
  <li>(sparc/sparc64) <b>Don't put swap at the very beginning of your disk.</b>
a451 5

Note to sparc users: Do not enable soft updates on sun4 or sun4c machines.
These architectures support only a very limited amount of kernel memory and
cannot use this feature.
However, sun4m machines are fine.
@


1.331
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@d927 1
a927 1
# <b>mv planstotakeovertheworld.txt /mnt/secretstuff/</b>
@


1.330
log
@remove armish mentions.
@
text
@d15 1
a15 1
<link rel="canonical" href="http://www.openbsd.org/faq/faq14.html">
@


1.329
log
@change wd(4) to sd(4) in the "RAID and disk encryption" section.
The instructions in the "Full disk encryption" part are verified by me.
ok and feedback tj@@
@
text
@d182 2
a183 2
fdisk(8) is used on some platforms (i386, amd64, macppc, zaurus and
armish) to create a partition recognized by the system boot ROM, into
d261 2
a262 3
<a href="../macppc.html">macppc</a>,
<a href="../zaurus.html">zaurus</a>,
and <a href="../armish.html">armish</a>,
@


1.328
log
@provide -> providing
fail over -> failover
deactivates encrypted volume -> deactivates the encrypted volume

from Larry Hynes, thanks!
@
text
@d659 3
a661 2
For example, if we needed to support a second wd(4) device for a mirrored
setup, you could do the following from the shell prompt:
d667 1
a667 1
# <b>sh MAKEDEV wd1</b>
d670 2
a671 1
You now have full support for the <tt>wd0</tt> and <tt>wd1</tt> devices.
d681 1
a681 1
# <b>fdisk -iy wd0</b>
d683 1
a683 1
# <b>fdisk -iy wd1</b>
d685 1
a685 1
# <b>disklabel -E wd0</b>
d702 2
a703 2
# <b>disklabel wd0 > layout</b>
# <b>disklabel -R wd1 layout</b>
d715 1
a715 1
# <b>bioctl -c 1 -l wd0a,wd1a softraid0</b>
d726 1
a726 1
The new pseudo-disk device will show up as <tt>sd0</tt> here, assuming there
d733 2
a734 2
sd0 at scsibus2 targ 0 lun 0: &lt;OPENBSD, SR RAID 1, 005&gt; SCSI2 0/direct fixed
sd0: 10244MB, 512 bytes/sec, 20980362 sec total
d737 1
a737 1
This shows that we now have a new SCSI bus and a new disk, <tt>sd0</tt>.
d750 1
a750 1
# <b>dd if=/dev/zero of=/dev/rsd0c bs=1m count=1</b>
d756 2
a757 2
Create all the partitions on your new softraid disk (<tt>sd0</tt> in our
example here) that should be there, rather than on <tt>wd0</tt> or <tt>wd1</tt>
d769 1
a769 1
# <b>bioctl sd0</b>
d778 2
a779 2
Assuming your RAID volume is <tt>sd0</tt> and you are replacing the
failed device with <tt>wd1m</tt>, the following commands should work:
d782 1
a782 1
# <b>bioctl -R /dev/wd1m sd0</b>
d810 1
a810 1
For this example, we will install to the <tt>wd0</tt> SATA drive, erasing all
d816 1
a816 1
# <b>dd if=/dev/random of=/dev/rwd0c bs=1m</b>
d831 1
a831 1
# <b>fdisk -iy wd0</b>
d833 1
a833 1
# <b>disklabel -E wd0</b>
d836 1
a836 1
offset: [2104515]
d849 1
a849 1
# <b>bioctl -c C -l wd0a softraid0</b>
d852 3
a854 3
sd0 at scsibus2 targ 1 lun 0: &lt;OPENBSD, SR CRYPTO, 005&gt; SCSI2 0/direct fixed
sd0: 19445MB, 512 bytes/sector, 39824607 sectors
softraid0: CRYPTO volume attached as sd0
d858 1
a858 1
sure the <tt>/dev/sd0</tt> device is accounted for.
d861 1
a861 1
# <b>cd /dev && sh MAKEDEV sd0</b>
d864 1
a864 1
All data written to <tt>sd0</tt> will now be encrypted with AES in XTS mode.
d871 1
a871 1
# <b>dd if=/dev/zero of=/dev/rsd0c bs=1m count=1</b>
d879 2
a880 2
Available disks are: wd0 sd0.
Which disk is the root disk? ('?' for details) [wd0] <b>sd0</b>
d911 1
a911 1
A quick example runthrough of the steps follows, with <tt>sd0</tt> being
d915 4
a918 4
# <b>dd if=/dev/random of=/dev/rsd0c bs=1m</b>
# <b>fdisk -iy sd0</b>
# <b>disklabel -E sd0</b> (create an "a" partition, see above for more info)
# <b>bioctl -c C -l sd0a softraid0</b>
d921 5
a925 5
softraid0: CRYPTO volume attached as sd1
# <b>dd if=/dev/zero of=/dev/rsd1c bs=1m count=1</b>
# <b>fdisk -iy sd1</b>
# <b>disklabel -E sd1</b> (create an "i" partition, see above for more info)
# <b>newfs sd1i</b>
d927 1
a927 1
# <b>mount /dev/sd1i /mnt/secretstuff</b>
d930 1
a930 1
# <b>bioctl -d sd1</b>
@


1.327
log
@Remove a few superfluous "OpenBSD" from section titles.
Apply some lossless compression to the section on the boot loader
and unify the spelling of 'boot loader' throughout the FAQ.

tweaks and ok tj
@
text
@d618 2
a619 2
    An example of this is a CARP'd set of firewalls provide complete
    fail over redundancy.
d937 2
a938 2
In the case of crypto, however, it just deactivates encrypted volume so it
can't be accessed until it is activated again with the passphrase.
@


1.326
log
@remove man page connotations from section titles. there are man page links
directly below them in almost every instance.

ok tb
@
text
@d32 3
a34 3
<li><a href="#fdisk"           >Using OpenBSD's fdisk</a>
<li><a href="#disklabel"       >Using OpenBSD's disklabel</a>
<li><a href="#BootAmd64"       >The OpenBSD/amd64 boot process</a>
d40 1
a40 1
<li><a href="#MountImage"      >Mounting disk images in OpenBSD</a>
d176 1
a176 1
<h2 id="fdisk">Using OpenBSD's fdisk</h2>
d249 1
a249 1
<h2 id="disklabel">Using OpenBSD's disklabel</h2>
d378 1
a378 1
<h2 id="BootAmd64">The OpenBSD/amd64 boot process</h2>
d516 1
a516 1
<h2 id="MountImage">Mounting disk images in OpenBSD</h2>
@


1.325
log
@- simplify faq section titles, making the actual topics more prevalent
- merge flash and java sections into a single browser plugin section
- correct some tab/space inconsistency
- fix invalid html

from christian heckendorf <mbie at ulmus.me>

discussed with tb
@
text
@d32 2
a33 2
<li><a href="#fdisk"           >Using OpenBSD's fdisk(8)</a>
<li><a href="#disklabel"       >Using OpenBSD's disklabel(8)</a>
d41 1
a41 1
<li><a href="#NegSpace"        >Why does df(1) tell me I have over 100%
d176 1
a176 1
<h2 id="fdisk">Using OpenBSD's fdisk(8)</h2>
d178 1
a178 2
Be sure to check the
<a href="http://man.openbsd.org/fdisk">fdisk(8)</a>
d249 1
a249 1
<h2 id="disklabel">Using OpenBSD's disklabel(8)</h2>
d251 1
a251 1
<h3 id="disklabel.1">What is disklabel(8)?</h3>
d254 1
a254 2
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a>
man page.
d545 1
a545 1
<h2 id="NegSpace">Why does df(1) tell me I have over 100% of my disk used?</h2>
@


1.324
log
@interpolate an fdisk -iy also for the encrypted volume.  suggested by
gerald hanuer on misc, thanks
@
text
@d34 1
a34 1
<li><a href="#BootAmd64"       >How does OpenBSD/amd64 boot?</a>
d380 1
a380 1
<h2 id="BootAmd64">How does OpenBSD/amd64 boot?</h2>
@


1.323
log
@rework the softraid section a bit: hoist the essence of the disaster
recovery over the disk encryption stuff because it only concerns RAID 1
or 5. while there, lose some verbiage with little concrete info.

with and ok tj
@
text
@d923 1
@


1.322
log
@change the "how do i use softraid?" entry to "raid and disk encryption"
so people who aren't familiar with softraid can get to what they're
looking for faster.
@
text
@d41 2
a42 2
<li><a href="#NegSpace"        >Why does df(1) tell me
                                I have over 100% of my disk used?</a>
a47 2
  <li><a href="#softraidDR"    >Disaster recovery</a>
  <li><a href="#softraidNotes" >Softraid notes</a>
d570 4
a573 7
The
<a href="http://man.openbsd.org/softraid">softraid(4)</a>
subsystem works by emulating a
<a href="http://man.openbsd.org/scsibus">scsibus(4)</a>
with <a href="http://man.openbsd.org/sd">sd(4)</a>
devices made by combining a number of OpenBSD
<a href="http://man.openbsd.org/disklabel">disklabel(8)</a>
d774 16
a939 133

<p>
Many other options are available with softraid, and new features are
being added and improvements made, so do consult the aforementioned man
pages for detailed information.

<h4>I forgot my passphrase!</h4>

Sorry.
This is real encryption, there's not a back door or magic unlocking
tool.
If you lose your passphrase, your data on your softraid crypto volume
will be unusable.

<h3 id="softraidDR">Disaster recovery</h3>

This is the section you want to skip over, but don't.
This is the reason for RAID -- if disks never failed, you wouldn't add
the complexity of RAID to your system!
Unfortunately, as failures are very difficult to list comprehensively,
there is a strong probability that the event you experience won't be
described exactly here, but if you take the time to understand the
strategies here, and the WHY, hopefully you can use them to recover
from whatever situations come your way.

<p>
Keep in mind, failures are often not simple.
The author of this article had a drive in a hardware RAID solution develop
a short across the power feed, which in addition to the drive itself,
also required replacing the power supply, the RAID enclosure and a power
supply on a second computer he used to verify the drive was actually
dead, and the data from backup as he didn't properly configure the
replacement enclosure.

<p>
The steps needed for system recovery can be performed in
<a href="faq8.html#LostPW">single user mode</a>, or from the
<a href="faq4.html#bsd.rd">install kernel (bsd.rd)</a>.

<p>
If you plan on practicing softraid recovery (and we <b>highly</b> suggest you
do so!), you may find it helpful to zero a drive you remove from the
array before you attempt to return it to the array.
Not only does this more accurately simulate replacing the drive with a
new one, it will avoid the confusion that can result when the system
detects the remains of a softraid array.

<p>
Recovery from a failure will often be a two-stage event -- the first
stage is bringing the system back up to a running state, the second
stage is to rebuild the failed array.
The two stages may be separated by some time if you don't have a
replacement drive handy.

<h4>Recovery from drive failure: secondary</h4>

This is relatively easy.
You may have to remove the failed disk to get the system back up.

<p>
When you are ready to repair the system, you will replace the failed
drive, create the RAID and other disklabel partitions, then rebuild the
mirror.
Assuming your RAID volume is <tt>sd0</tt>, and you are replacing the
failed device with <tt>wd1m</tt>, the following process should work:

<ul>
  <li>Boot the system back up.
  <li>Create appropriate partitions on your new drive
  <li>Rebuild your RAID partition and reboot:
</ul>

<blockquote><pre>
# <b>bioctl -R /dev/wd1m sd0</b>
# <b>reboot</b>
</pre></blockquote>

<h4>Recovery from drive failure: primary</h4>

Many PC-like computers can not boot from a second drive if the primary
drive has failed, but still attached unless it is so dead it isn't
detected.
Many can not boot from a drive that isn't the "primary", even if there
is no other drive.

<p>
In general, if your primary drive fails, you will have to remove it, and
in many cases "promote" your secondary drive to primary configuration
before the system will boot.
This may involve re-jumpering the disk, plugging the disk into another
port or some other variation.
Of course, what is on the secondary disk has to not only include your RAID
partition, but also has to be functionally bootable.

<p>
Once you have the system back up on the secondary disk and a new
disk in place, you rebuild as above.

<h4>Recovery from "shuffling" your disks</h4>

What if you have four disks in your system, say, sd0, sd1, sd2, and sd3,
and for reasons of hardware replacement or upgrade, you end up with the
drives out of the machine, and lose track of which was which?

<p>
Fortunately, softraid handles this very well, it considers the disks
"roaming," but will successfully rebuild your arrays.
However, the boot disk in the machine has to be bootable, and if you
just made changes in the root partition before doing this, you probably
want to be sure you didn't boot from your altroot partition by mistake.

<h3 id="softraidNotes">Softraid notes</h3>

<h4>Complications when other sd(4) disks exist</h4>

Softraid disks are assembled <b>after</b> all other IDE, SATA, SAS and
SCSI disks are attached.
As a result, if the number of sd(4) devices changes (either by adding
or removing devices -- or if a device fails), the identifier of the
softraid disk will change.
For this reason, it's important to use <a href="faq14.html#DUID">DUIDs</a>
(Disklabel Unique Identifiers) rather than drive names in your
<a href="http://man.openbsd.org/fstab">fstab(5)</a> file.

<h4>Three disk RAID1?</h4>

Softraid supports RAID1 with more than two "chunks," and the man page
examples show a three-disk RAID1 configuration.
RAID1 simply duplicates the data across all the chunks of storage.
Two gives full redundancy, three gives additional fault tolerance.
The advantage of RAID1 with three (or more) disks/chunks is that, in
event of one disk failure, you still have complete redundancy.
Think of it as a hot spare that doesn't need time to rebuild!
@


1.321
log
@sd3 -> sd1

spotted by Daniel Bolgheroni, thanks!
@
text
@d43 1
a43 1
<li><a href="#softraid"        >How do I use softraid?</a>
d570 1
a570 1
<h2 id="softraid">How do I use softraid?</h2>
d576 1
a576 2
with
<a href="http://man.openbsd.org/sd">sd(4)</a>
@


1.320
log
@tweak previous: remove extra cd command, tighten up wording, zap stray <p>
@
text
@d911 1
a911 1
softraid0: CRYPTO volume attached as sd3
@


1.319
log
@Bah, I edited the wrong section. Fix previous...
@
text
@d847 2
a848 6
All data written to <tt>sd0</tt> will now be encrypted (with AES in XTS mode)
by default.

<p>
Since the installer does not have many device nodes, we make sure the device
nodes <tt>/dev/sd0*</tt> and <tt>/dev/rsd0*</tt> exist.
d851 1
a851 1
# <b>cd /dev && sh MAKEDEV sd0 && cd -</b>
d853 2
@


1.318
log
@Add a line to the softraid crypto rundown that ensures that the
necessary device nodes are created. This has bitten a few people
already.
@
text
@d851 8
d914 1
a914 2
# <b>cd /dev && sh MAKEDEV sd3 && cd -</b> (create /dev/sd3* if necessary)
# <b>dd if=/dev/zero of=/dev/rsd3c bs=1m count=1</b>
d918 1
a918 1
# <b>mount /dev/sd3i /mnt/secretstuff</b>
d921 1
a921 1
# <b>bioctl -d sd3</b>
@


1.317
log
@delete section numbers. this will make adding and removing content a lot
less work.
@
text
@d905 3
a907 2
softraid0: CRYPTO volume attached as sd1
# <b>dd if=/dev/zero of=/dev/rsd1c bs=1m count=1</b>
d911 1
a911 1
# <b>mount /dev/sd1i /mnt/secretstuff</b>
d914 1
a914 1
# <b>bioctl -d sd1</b>
@


1.316
log
@tweak [faq index] button and sync the pf user's guide with that style.
@
text
@d9 1
a9 2
<title>14 - Disk Setup</title>
<meta name= "description"       content="OpenBSD FAQ 14 - Disk Setup">
d23 1
a23 1
<font color="#e00000">FAQ 14 - Disk Setup</font>
d31 6
a36 6
<li><a href="#intro"           >14.1 - Disks and partitions</a>
<li><a href="#fdisk"           >14.2 - Using OpenBSD's fdisk(8)</a>
<li><a href="#disklabel"       >14.3 - Using OpenBSD's disklabel(8)</a>
<li><a href="#BootAmd64"       >14.4 - How does OpenBSD/amd64 boot?</a>
<li><a href="#SoftUpdates"     >14.5 - Soft updates</a>
<li><a href="#altroot"         >14.6 - Duplicating your root partition:
d38 1
a38 1
<li><a href="#foreignfs"       >14.7 - Can I access data on filesystems other
d40 2
a41 2
<li><a href="#MountImage"      >14.8 - Mounting disk images in OpenBSD</a>
<li><a href="#NegSpace"        >14.9 - Why does df(1) tell me
d43 1
a43 1
<li><a href="#softraid"        >14.10 - How do I use softraid?</a>
d45 5
a49 5
  <li><a href="#softraidDI"    >14.10.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.10.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.10.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.10.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.10.5 - Softraid notes</a>
d54 1
a54 1
<h2 id="intro">14.1 - Disks and partitions</h2>
d178 1
a178 1
<h2 id="fdisk">14.2 - Using OpenBSD's fdisk(8)</h2>
d252 1
a252 1
<h2 id="disklabel">14.3 - Using OpenBSD's disklabel(8)</h2>
d382 1
a382 1
<h2 id="BootAmd64">14.4 - How does OpenBSD/amd64 boot?</h2>
d432 1
a432 1
<h2 id="SoftUpdates">14.5 - Soft updates</h2>
d463 1
a463 1
<h2 id="altroot">14.6 - Duplicating your root partition: <tt>/altroot</tt></h2>
d502 1
a502 1
<h2 id="foreignfs">14.7 - Can I access data on filesystems other than FFS?</h2>
d520 1
a520 1
<h2 id="MountImage">14.8 - Mounting disk images in OpenBSD</h2>
d549 1
a549 2
<h2 id="NegSpace">14.9 - Why does df(1) tell me I have over 100% of
my disk used?</h2>
d570 1
a570 1
<h2 id="softraid">14.10 - How do I use softraid?</h2>
d632 1
a632 1
<h3 id="softraidDI">14.10.1 - Installing to a mirror</h3>
d780 1
a780 1
<h3 id="softraidFDE">14.10.2 - Full disk encryption</h3>
d870 1
a870 1
<h3 id="softraidCrypto">14.10.3 - Encrypting external disks</h3>
d938 1
a938 1
<h3 id="softraidDR">14.10.4 - Disaster recovery</h3>
d1035 1
a1035 1
<h3 id="softraidNotes">14.10.5 - Softraid notes</h3>
@


1.315
log
@save some space by moving the [faq index] button to the top right corner
and removing the <h3> table of contents.
@
text
@d25 3
a27 1
<small><a href= "index.html" style="float:right;">[FAQ Index]</a></small>
@


1.314
log
@fix a few links in the previous commit
@
text
@d25 1
a27 5
<p>
<a href= "index.html">[FAQ Index]</a>
<p>

<h3>Table of Contents</h3>
a1058 3
<hr>
<p>
<a href= "index.html">[FAQ Index]</a>
@


1.313
log
@use short form man links in the faq and fix a few broken links
@
text
@d473 1
a473 1
<a href="http://man.openbsd.org/crontab">crontab(5)</a>,
@


1.312
log
@each faq page has header and footer links that look like this:

[faq index] [to section x - some topic] [to section y - another topic]

that can be very useful if the faq you're reading only covers one topic,
or if the pages are meant to be read in order. it makes sense to have
them on the pf and smtpd faq pages, but the main faq contains a variety
of unrelated topics, so they're not actually very useful there. remove.

while here, make a few subject titles more concise.

ok tb
@
text
@d71 1
a71 1
  <li><a href="http://man.openbsd.org/?query=wd">wd(4)</a>:
d74 1
a74 1
    <a href="http://man.openbsd.org/?query=wdc">wdc(4)</a>
d76 1
a76 1
    <a href="http://man.openbsd.org/?query=pciide">pciide(4)</a>
d78 1
a78 1
  <li><a href="http://man.openbsd.org/?query=sd">sd(4)</a>:
d81 1
a81 1
    <a href="http://man.openbsd.org/?query=ahci">ahci(4)</a>
d113 1
a113 1
    <a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>
d116 1
a116 1
    <a href="http://man.openbsd.org/?query=fdisk">fdisk(8)</a>
d153 1
a153 1
<a href="http://man.openbsd.org/?query=opendev">opendev(3)</a>
d169 1
a169 1
<a href="http://man.openbsd.org/?query=diskmap">diskmap(4)</a>
d184 1
a184 1
<a href="http://man.openbsd.org/?query=fdisk">fdisk(8)</a>
d260 1
a260 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>
d284 1
a284 1
<a href="http://man.openbsd.org/?query=disklabel&amp;sec=5">disklabel(5)</a>
d292 1
a292 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>,
d368 1
a368 1
<a href="http://man.openbsd.org/?query=scan_ffs">scan_ffs(8)</a>
d377 1
a377 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>
d382 1
a382 1
<a href="http://man.openbsd.org/?query=mount">mount(8)</a>
d388 1
a388 1
<a href="http://man.openbsd.org/?query=boot_amd64">boot_amd64(8)</a>
d395 1
a395 1
    <a href="http://man.openbsd.org/?query=fdisk">fdisk(8)</a>
d399 1
a399 1
    <a href="http://man.openbsd.org/?query=biosboot">biosboot(8)</a>
d403 1
a403 1
    <a href="http://man.openbsd.org/?query=installboot">installboot(8)</a>.
d406 1
a406 1
    <a href="http://man.openbsd.org/?query=boot">boot(8)</a>
d449 1
a449 1
<a href="http://man.openbsd.org/?query=mount">mount(8)</a>
d453 1
a453 1
<a href="http://man.openbsd.org/?query=fstab">fstab(5)</a>
d469 1
a469 1
<a href="http://man.openbsd.org/?query=daily">daily(8)</a>
d473 1
a473 1
<a href="http://man.openbsd.org/?query=crontab">crontab(5)</a>,
d475 1
a475 1
<a href="http://man.openbsd.org/?query=fstab">fstab(5)</a>
d498 1
a498 1
<a href="http://man.openbsd.org/?query=dd">dd(1)</a>
d509 1
a509 1
<a href="http://man.openbsd.org/?query=mount">mount(8)</a>
d526 1
a526 1
<a href="http://man.openbsd.org/?query=vnd">vnd(4)</a>
d548 1
a548 1
<a href="http://man.openbsd.org/?query=vnconfig">vnconfig(8)</a>
d550 1
a550 1
<a href="http://man.openbsd.org/?query=mount">mount(8)</a>.
d557 1
a557 1
<a href="http://man.openbsd.org/?query=df">df(1)</a>.
d561 1
a561 1
<a href="http://man.openbsd.org/?query=newfs">newfs(8)</a>,
d571 1
a571 1
<a href="http://man.openbsd.org/?query=tunefs">tunefs(8)</a>
d577 1
a577 1
<a href="http://man.openbsd.org/?query=softraid">softraid(4)</a>
d579 1
a579 1
<a href="http://man.openbsd.org/?query=scsibus">scsibus(4)</a>
d581 1
a581 1
<a href="http://man.openbsd.org/?query=sd">sd(4)</a>
d583 1
a583 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>
d662 1
a662 1
<a href="http://man.openbsd.org/?query=wd">wd(4)</a>
d664 1
a664 1
<a href="http://man.openbsd.org/?query=sd">sd(4)</a>
d685 1
a685 1
<a href="http://man.openbsd.org/?query=fdisk">fdisk(8)</a>
d687 1
a687 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>.
d709 1
a709 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a> command.
d721 1
a721 1
<a href="http://man.openbsd.org/?query=bioctl">bioctl(8)</a>
d787 1
a787 1
<a href="http://man.openbsd.org/?query=softraid">softraid(4)</a>
d789 1
a789 1
<a href="http://man.openbsd.org/?query=bioctl">bioctl(8)</a>
d820 1
a820 1
<a href="http://man.openbsd.org/?query=fdisk">fdisk(8)</a>
d822 1
a822 1
<a href="http://man.openbsd.org/?query=disklabel">disklabel(8)</a>.
d891 1
a891 1
  <a href="http://man.openbsd.org/?query=newfs">newfs(8)</a>
d893 1
a893 1
  <a href="http://man.openbsd.org/?query=mount">mount(8)</a>
d1050 1
a1050 1
<a href="http://man.openbsd.org/?query=fstab">fstab(5)</a> file.
@


1.311
log
@Remove the long disklabel walkthrough. It really doesn't add much.
Rename the fdisk(8) section to a custom fdisk setup for dual booting
because that's what this section is about.
@
text
@a28 2
<a href= "faq13.html">[To Section 13 - Multimedia]</a>
<a href= "faq15.html">[To Section 15 - Packages and Ports]</a>
a1065 2
<a href= "faq13.html">[To Section 13 - Multimedia]</a>
<a href= "faq15.html">[To Section 15 - Packages and Ports]</a>
@


1.310
log
@zap stray "the" from "frusen" via tj
@
text
@a300 3
The <a href="faq4.html">installation guide</a> contains an example of
setting up a <a href="faq4.html#Moredisklabel">custom disklabel layout</a>
during install.
@


1.309
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d843 1
a843 1
We'll use the entire the disk, but note that the encrypted device can be
@


1.308
log
@two commands that can be run as regular users had a # prompt.
remove a sentence that was just spelling out the obvious.
@
text
@d21 1
d23 4
a26 2
<img alt="[OpenBSD]" height=30 width=141 src="../images/smalltitle.gif" border="0">
</a>
d31 1
a31 2

<h1><font color="#e00000">14 - Disk Setup</font></h1><hr>
@


1.307
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d203 1
a203 1
# <b>fdisk sd0</b>
d225 1
a225 2
In the previous example, we just viewed our information.
In order to edit the partition table use the <tt>-e</tt> flag:
d521 1
a521 1
# <b>man -k -s 8 mount</b>
@


1.306
log
@fix URIs, the / before querystring isn't optional, if it isn't fixed up
by the browser the server returns 400 Bad Request
@
text
@d14 2
@


1.305
log
@remove an extra blank
@
text
@d69 1
a69 1
  <li><a href="http://man.openbsd.org?query=wd">wd(4)</a>:
d72 1
a72 1
    <a href="http://man.openbsd.org?query=wdc">wdc(4)</a>
d74 1
a74 1
    <a href="http://man.openbsd.org?query=pciide">pciide(4)</a>
d76 1
a76 1
  <li><a href="http://man.openbsd.org?query=sd">sd(4)</a>:
d79 1
a79 1
    <a href="http://man.openbsd.org?query=ahci">ahci(4)</a>
d111 1
a111 1
    <a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>
d114 1
a114 1
    <a href="http://man.openbsd.org?query=fdisk">fdisk(8)</a>
d151 1
a151 1
<a href="http://man.openbsd.org?query=opendev">opendev(3)</a>
d167 1
a167 1
<a href="http://man.openbsd.org?query=diskmap">diskmap(4)</a>
d182 1
a182 1
<a href="http://man.openbsd.org?query=fdisk">fdisk(8)</a>
d259 1
a259 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>
d283 1
a283 1
<a href="http://man.openbsd.org?query=disklabel&amp;sec=5">disklabel(5)</a>
d291 1
a291 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>,
d370 1
a370 1
<a href="http://man.openbsd.org?query=scan_ffs">scan_ffs(8)</a>
d379 1
a379 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>
d384 1
a384 1
<a href="http://man.openbsd.org?query=mount">mount(8)</a>
d390 1
a390 1
<a href="http://man.openbsd.org?query=boot_amd64">boot_amd64(8)</a>
d397 1
a397 1
    <a href="http://man.openbsd.org?query=fdisk">fdisk(8)</a>
d401 1
a401 1
    <a href="http://man.openbsd.org?query=biosboot">biosboot(8)</a>
d405 1
a405 1
    <a href="http://man.openbsd.org?query=installboot">installboot(8)</a>.
d408 1
a408 1
    <a href="http://man.openbsd.org?query=boot">boot(8)</a>
d451 1
a451 1
<a href="http://man.openbsd.org?query=mount">mount(8)</a>
d455 1
a455 1
<a href="http://man.openbsd.org?query=fstab">fstab(5)</a>
d471 1
a471 1
<a href="http://man.openbsd.org?query=daily">daily(8)</a>
d475 1
a475 1
<a href="http://man.openbsd.org?query=crontab">crontab(5)</a>,
d477 1
a477 1
<a href="http://man.openbsd.org?query=fstab">fstab(5)</a>
d500 1
a500 1
<a href="http://man.openbsd.org?query=dd">dd(1)</a>
d511 1
a511 1
<a href="http://man.openbsd.org?query=mount">mount(8)</a>
d515 1
a515 1
<a href="http://man.openbsd.org?query=mount_&amp;sec=8&amp;apropos=1">
d528 1
a528 1
<a href="http://man.openbsd.org?query=vnd">vnd(4)</a>
d550 1
a550 1
<a href="http://man.openbsd.org?query=vnconfig">vnconfig(8)</a>
d552 1
a552 1
<a href="http://man.openbsd.org?query=mount">mount(8)</a>.
d559 1
a559 1
<a href="http://man.openbsd.org?query=df">df(1)</a>.
d563 1
a563 1
<a href="http://man.openbsd.org?query=newfs">newfs(8)</a>,
d573 1
a573 1
<a href="http://man.openbsd.org?query=tunefs">tunefs(8)</a>
d579 1
a579 1
<a href="http://man.openbsd.org?query=softraid">softraid(4)</a>
d581 1
a581 1
<a href="http://man.openbsd.org?query=scsibus">scsibus(4)</a>
d583 1
a583 1
<a href="http://man.openbsd.org?query=sd">sd(4)</a>
d585 1
a585 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>
d664 1
a664 1
<a href="http://man.openbsd.org?query=wd">wd(4)</a>
d666 1
a666 1
<a href="http://man.openbsd.org?query=sd">sd(4)</a>
d687 1
a687 1
<a href="http://man.openbsd.org?query=fdisk">fdisk(8)</a>
d689 1
a689 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>.
d711 1
a711 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a> command.
d723 1
a723 1
<a href="http://man.openbsd.org?query=bioctl">bioctl(8)</a>
d789 1
a789 1
<a href="http://man.openbsd.org?query=softraid">softraid(4)</a>
d791 1
a791 1
<a href="http://man.openbsd.org?query=bioctl">bioctl(8)</a>
d822 1
a822 1
<a href="http://man.openbsd.org?query=fdisk">fdisk(8)</a>
d824 1
a824 1
<a href="http://man.openbsd.org?query=disklabel">disklabel(8)</a>.
d893 1
a893 1
  <a href="http://man.openbsd.org?query=newfs">newfs(8)</a>
d895 1
a895 1
  <a href="http://man.openbsd.org?query=mount">mount(8)</a>
d1052 1
a1052 1
<a href="http://man.openbsd.org?query=fstab">fstab(5)</a> file.
@


1.304
log
@Some cleanup after beck@@'s monster man.openbsd.org diff.
@
text
@d520 1
a520 1
# <b> man -k -s 8 mount</b>
@


1.303
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d111 2
a112 2
    <a href="http://man.openbsd.org?query=disklabel">
    disklabel(8)</a> partitions, often called filesystem partitions.
d146 2
a147 2
The corresponding device files would be <tt>/dev/sd0a</tt> for the block device,
<tt>/dev/rsd0a</tt> for the raw (character) device.
d259 1
a259 2
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a>
d283 1
a283 2
<a href="http://man.openbsd.org?query=disklabel&amp;sec=5">
disklabel(5)</a>
d291 1
a291 2
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a>,
d298 3
a300 3
For an example of setting up a custom disklabel(8) during install, see the
<a href="faq4.html#Moredisklabel">custom disklabel layout</a> part of the
<a href="faq4.html">installation guide</a>.
d379 1
a379 2
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a>
d390 1
a390 2
<a href="http://man.openbsd.org?query=boot_amd64">
boot_amd64(8)</a>
d401 1
a401 2
    <a href="http://man.openbsd.org?query=biosboot">
    biosboot(8)</a>
d405 1
a405 2
    <a href="http://man.openbsd.org?query=installboot">
    installboot(8)</a>.
d413 1
a413 1
    This is the goal of the boot process, to have the OpenBSD kernel loaded into
d585 2
a586 3
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a> partitions into a virtual disk with the desired RAID level,
such as RAID0, RAID1, RAID4, RAID5 or crypto.
d689 1
a689 2
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a>.
d711 1
a711 2
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a> command.
d824 1
a824 2
<a href="http://man.openbsd.org?query=disklabel">
disklabel(8)</a>.
@


1.302
log
@fix a few broken links; from peter de wachter
@
text
@d69 1
a69 1
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>:
d72 1
a72 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wdc">wdc(4)</a>
d74 1
a74 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pciide">pciide(4)</a>
d76 1
a76 1
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>:
d79 1
a79 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ahci">ahci(4)</a>
d111 1
a111 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d114 1
a114 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
d151 1
a151 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=opendev">opendev(3)</a>
d167 1
a167 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=diskmap">diskmap(4)</a>
d182 1
a182 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
d259 1
a259 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d284 1
a284 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sec=5">
d293 1
a293 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d373 1
a373 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scan_ffs">scan_ffs(8)</a>
d382 1
a382 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d388 1
a388 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
d394 1
a394 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot_amd64">
d402 1
a402 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
d406 1
a406 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot">
d411 1
a411 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot">
d415 1
a415 1
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot">boot(8)</a>
d458 1
a458 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
d462 1
a462 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>
d478 1
a478 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=daily">daily(8)</a>
d482 1
a482 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=crontab">crontab(5)</a>,
d484 1
a484 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>
d507 1
a507 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd">dd(1)</a>
d518 1
a518 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
d522 1
a522 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_&amp;sec=8&amp;apropos=1">
d535 1
a535 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnd">vnd(4)</a>
d557 1
a557 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig">vnconfig(8)</a>
d559 1
a559 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>.
d566 1
a566 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=df">df(1)</a>.
d570 1
a570 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs">newfs(8)</a>,
d580 1
a580 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs">tunefs(8)</a>
d586 1
a586 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">softraid(4)</a>
d588 1
a588 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scsibus">scsibus(4)</a>
d590 1
a590 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>
d592 1
a592 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d672 1
a672 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>
d674 1
a674 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>
d695 1
a695 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
d697 1
a697 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d720 1
a720 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d733 1
a733 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl">bioctl(8)</a>
d799 1
a799 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">softraid(4)</a>
d801 1
a801 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl">bioctl(8)</a>
d832 1
a832 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
d834 1
a834 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
d904 1
a904 1
  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs">newfs(8)</a>
d906 1
a906 1
  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
d1063 1
a1063 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a> file.
@


1.301
log
@fix device name in newfs example; from daniel bolghero
@
text
@d351 1
a351 1
    More on this <a href="faq14.html#foreignfsafter">below</a>.
d640 2
a641 2
    An example of this is a <a href="faq6.html#CARP">CARP'd</a> set of
    firewalls provide complete fail over redundancy.
@


1.300
log
@Add two sentences about the opendev(3) function to the general intro
14.1 - disks and partitions.
@
text
@d927 1
a927 1
# <b>mount /dev/sd0i /mnt/secretstuff</b>
@


1.299
log
@natano@@ pointed out that it would be preferable to use abbreviated
forms for the disk name, so we don't have to bother to think whether
 block or character devices are needed. do that, where possible.
@
text
@d146 8
a153 3
The device files would be <tt>/dev/sd0a</tt> for the block device,
<tt>/dev/rsd0a</tt> would be the device file for the raw (character)
device.
@


1.298
log
@use raw device for newfs. From Daniel Jakots
@
text
@d732 1
a732 1
# <b>bioctl -c 1 -l /dev/wd0a,/dev/wd1a softraid0</b>
d851 1
a851 1
# <b>bioctl -c C -l /dev/wd0a softraid0</b>
d914 1
a914 1
# <b>bioctl -c C -l /dev/sd0a softraid0</b>
d920 1
a920 1
# <b>newfs /dev/rsd1i</b>
@


1.297
log
@yur -> your spotted by Jason Filley
+ a few more typos found with aspell
@
text
@d920 1
a920 1
# <b>newfs /dev/sd1i</b>
@


1.296
log
@Remove "large drives" and "backup" sections. Extremely verbose,
quite old, largely unmaintained.  If people start asking questions
on the lists, we can always add something back.
@
text
@d485 1
a485 1
Assuming you want to back up yur root partition to the partition specified
d567 1
a567 1
This provides a margin of error when you accidently fill the disk, and
d756 1
a756 1
onwards when the system boots.
d847 1
a847 1
split up into multiple mountpoints as if it were a regular hard drive.
d897 1
a897 1
  <li>Zero the first megabyte of the new psuedo-partition
@


1.295
log
@two small tweaks:
"a performance increase in performance", spotted by Jan Stary eons ago.
file systems vs filesystems is contentious, but a four-line paragraph
should stick to one spelling.
@
text
@d39 4
a42 2
<li><a href="#MountImage"      >14.7 - Mounting disk images in OpenBSD</a>
<li><a href="#NegSpace"        >14.8 - Why does df(1) tell me
d44 1
a44 1
<li><a href="#softraid"        >14.9 - How do I use softraid?</a>
d46 5
a50 5
  <li><a href="#softraidDI"    >14.9.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.9.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.9.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.9.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.9.5 - Softraid notes</a>
a51 6
<li><a href="#LargeDrive"      >14.10 - What are the issues regarding large
                                drives with OpenBSD?</a>
<li><a href="#Backup"          >14.11 - Preparing for disaster: backing up
                                and restoring from tape</a>
<li><a href="#foreignfs"       >14.12 - Can I access data on filesystems other
                                than FFS?</a>
d509 19
a527 1
<h2 id="MountImage">14.7 - Mounting disk images in OpenBSD</h2>
d551 1
a551 1
For more information, refer to 
d556 1
a556 1
<h2 id="NegSpace">14.8 - Why does df(1) tell me I have over 100% of
d578 1
a578 1
<h2 id="softraid">14.9 - How do I use softraid?</h2>
d641 1
a641 1
<h3 id="softraidDI">14.9.1 - Installing to a mirror</h3>
d791 1
a791 1
<h3 id="softraidFDE">14.9.2 - Full disk encryption</h3>
d882 1
a882 1
<h3 id="softraidCrypto">14.9.3 - Encrypting external disks</h3>
d950 1
a950 1
<h3 id="softraidDR">14.9.4 - Disaster recovery</h3>
d1047 1
a1047 1
<h3 id="softraidNotes">14.9.5 - Softraid notes</h3>
a1068 526

<h2 id="LargeDrive">14.10 - What are the issues regarding large drives with
OpenBSD?</h2>

OpenBSD supports both FFS and FFS2 file systems, also known as UFS and UFS2.
Before looking at the limits of each system, we need to look at some
more general system limits.

<p>
Of course, the ability of file system and the abilities of particular
hardware are two different things.
A newer 250G IDE hard disk may have issues on older (pre >137G
standards) interfaces (though for the most part, they work just fine),
and some very old SCSI adapters have been seen to
have problems with more modern drives, and some older BIOSs will hang
when they encounter a modern sized hard disk.
You must respect the abilities of your hardware and boot code, of
course.

<h3>Partition size and location limitations</h3>

Unfortunately, the full ability of the OS isn't available until <b>after</b>
the OS has been loaded into memory.
The boot process has to utilize (and is thus limited by) the system's boot ROM.

<p>
For this reason, the entire /bsd file (the kernel) must be located on
the disk within the boot ROM addressable area.
This means that on some older i386 systems, the root partition must be
completely within the first 504M, but newer computers may have limits of
2G, 8G, 32G, 128G or more.
It is worth noting that many relatively new computers which support
larger than 128G drives actually have BIOS limitations of booting
only from within the first 128G.
You can use these systems with large drives, but your root partition
must be within the space supported by the boot ROM.

<p>
Note that it is possible to install a 40G drive on an old 486 and load
OpenBSD on it as one huge partition, and think you have successfully
violated the above rule.
However, it might come back to haunt you in a most unpleasant way:

<ul>
  <li>You install on the 40G / partition.
    It works, because the base OS and all its files (including /bsd) are within
    the first 504M.
  <li>You use the system, and end up with more than 504M of files on it.
  <li>You upgrade, and copy your new /bsd over the old one.
  <li>You reboot.
  <li>You get a message such as "ERR M" or other problems on boot.
</ul>

Why?
Because when you copied "over" the new <tt>/bsd</tt> file, it didn't
overwrite the old one, it got relocated to a new location on the
disk, probably outside the 504M range the BIOS supported.
The boot loader was unable to fetch the file <tt>/bsd</tt>, and the system hung.

<p>
To get OpenBSD to boot, the boot loaders (biosboot(8) and <tt>/boot</tt>
in the case of i386/amd64) and the kernel (<tt>/bsd</tt>) must be within the
boot ROM's supported range, and within their own abilities.
To play it safe, the rule is simple:

<blockquote>
<b>The entire root partition must be within the computer's BIOS
(or boot ROM) addressable space.</b>
</blockquote>

Some non-i386 users think they are immune to this, however most platforms
have some kind of boot ROM limitation on disk size.
Finding out for sure what the limit is, however, can be difficult.

<p>
This is another good reason to <a href="faq4.html#Partitioning">partition
your hard disk</a>, rather than using one large partition.

<h3>fsck(8) time and memory requirements</h3>

Another consideration with large file systems is the time and memory
required to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck">fsck(8)</a>
the file system after a crash or power interruption.
One should not put a 120G file system on a system with 32M of RAM and
expect it to successfully fsck(8) after a crash.
A rough guideline is the system should have at least 1M of available
memory for every 1G of disk space to successfully fsck the disk.
Swap can be used here, but at a very significant performance penalty,
so severe that it is usually unacceptable, except in special cases.

<p>
The time required to fsck the drive may become a problem as the file
system size expands, but you only have to fsck the disk space that is
actually allocated to mounted filesystems.
This is another reason NOT to allocate all your disk space Just Because
It Is There.
Keeping file systems mounted RO or not mounted helps keep them from
needing to be fsck(8)ed after tripping over the power cord.
Reducing the number of inodes (using the -i option of newfs) can also
improve fsck time -- assuming you really don't need them.

<p>
Don't forget that if you have multiple disks on the system, they could
all end up being fsck(8)ed after a crash at the same time, so they could
require more RAM than a single disk.

<h3>FFS vs. FFS2</h3>

Using FFS, OpenBSD supports an individual file system of up to
2<sup>31</sup>-1, or 2,147,483,647 blocks, and as each block is 512
bytes, that's a tiny amount less than 1T.
FFS2 is capable of much larger file systems, though other limits will be
reached long before the file system limits will be reached.

<p>
The boot/installation kernels <i>only support FFS</i>, not FFS2, so key
system partitions (<tt>/, /usr, /var, /tmp</tt>) should not be FFS2, or
severe maintenance problems can arise (there should be no reason for
those partitions to be that large, anyway).
For this reason, very large partitions should only be used for
"non-system" partitions, for example, <tt>/home, /var/www/,
/bigarray</tt>, etc.

<p>
Note that not all controllers and drivers support large disks.
For example,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ami">ami(4)</a>
has a limit of 2TB per logical volume.
Always be aware of what was available when a controller or interface was
manufactured, and don't just rely on "the connectors fit".

<h3>Disks larger than 2TB</h3>

The MBR system used on PCs only directly understands disks up to 2TB in
size.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
will show disks larger than 2TB as only 2TB.
This does not in any way hinder OpenBSD's ability to utilize larger
disks, as the MBR is used only to bootstrap the OS.
Once the OS is
running, the file systems are defined by the disklabel, which does not
have a 2TB limit.

<p>
To use a disk larger than 2TB, create an OpenBSD partition on the disk
using fdisk, whatever size fdisk will let you.
When you label the disk with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>,
use the "b" option to set the OpenBSD boundaries (which defaulted to
the size of the OpenBSD fdisk partition) to cover the entire disk.
Now you can create your partitions as you wish.
You must still respect the abilities of your BIOS, which will have the
limitation of only understanding fdisk partitions, so your 'a'
partition should be entirely within the fdisk-managed part of the disk,
in addition to any BIOS limitations.

<h2 id="Backup">14.11 - Preparing for disaster: backing up and restoring
from tape</h2>

<h3>Introduction:</h3>

If you plan on running what might be called a production server, it is
advisable to have some form of backup in the event one of your fixed
disk drives fails, or the data is otherwise lost.

<p>
This information will assist you in using the standard
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump">dump(8)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore">restore(8)</a>
utilities provided with OpenBSD.
More advanced backup utilities, such as
"<a href="http://www.bacula.org/">Bacula</a>"
are available through
<a href="faq15.html#PkgMgmt">packages</a> for backing up multiple servers to
disk and tape.

<h3>Backing up to tape:</h3>

Backing up to tape requires knowledge of where your file systems are mounted.
You can determine how your filesystems are mounted using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
command at your shell prompt.
You should get output similar to this:

<blockquote><pre>
# <b>mount</b>
/dev/sd0a on / type ffs (local)
/dev/sd0h on /usr type ffs (local)
</pre></blockquote>

In this example, the root (<tt>/</tt>) filesystem resides physically on sd0a
which indicates a SCSI-like fixed disk 0, partition a.
The <tt>/usr</tt> filesystem resides on sd0h, which indicates SCSI-like
fixed disk 0, partition h.

<p>
Another example of a more advanced mount table might be:

<blockquote><pre>
# <b>mount</b>
/dev/sd0a on / type ffs (local)
/dev/sd0d on /var type ffs (local)
/dev/sd0e on /home type ffs (local)
/dev/sd0h on /usr type ffs (local)
</pre></blockquote>

In this more advanced example, the root (<tt>/</tt>) filesystem resides
physically on sd0a.
The <tt>/var</tt> filesystem resides on sd0d, the <tt>/home</tt>
filesystem on sd0e and finally <tt>/usr</tt> on sd0h.

<p>
To backup your machine, you will need to feed dump the name of each fixed disk
partition.
Here is an example of the commands needed to backup the simpler mount table
listed above:

<blockquote><pre>
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0a</b>
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0h</b>
# <b>mt -f /dev/rst0 rewind  </b>
</pre></blockquote>

For the more advanced mount table example, you would use something
similar to:

<blockquote><pre>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0a</b>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0d</b>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0e</b>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0h  </b>
# <b>mt -f /dev/rst0 rewind  </b>
</pre></blockquote>

You can review the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump">dump(8)</a>
man page to learn exactly what each command line switch does.
Here is a brief description of the parameters used above:

<ul>
  <li><b>0</b> - Perform a level 0 dump, get everything
  <li><b>a</b> - Attempt to automatically determine tape media length
  <li><b>u</b> - Update the file <tt>/etc/dumpdates</tt> to indicate when
    backup was last performed
  <li><b>f</b> - Which tape device to use (/dev/nrst0 in this case)
</ul>

Finally which partition to backup (/dev/rsd0a, etc.)

<p>
The
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt">mt(1)</a>
command is used at the end to rewind the drive.
Review the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt">mt(1)</a>
man page for more options (such as eject).

<p>
If you are unsure of your tape device name, use dmesg to locate it.
An example tape drive entry in dmesg might appear similar to:

<blockquote><pre>
st0 at scsibus0 targ 5 lun 0: &lt;ARCHIVE, Python 28388-XXX, 5.28&gt;
</pre></blockquote>

You may have noticed that when backing up, the tape drive is accessed as
device name <tt>nrst0</tt> instead of the <tt>st0</tt> name that is seen in
dmesg.
When you access <tt>st0</tt> as <tt>nrst0</tt> you are accessing the same
physical tape drive but telling the drive to not rewind at the end of the job
and access the device in raw mode.
To back up multiple file systems to a single tape, be sure you use the
non-rewind device.
If you use a rewind device (<tt>rst0</tt>) to back up multiple file systems,
you'll end up overwriting the prior filesystem with the next one dump tries
to write to tape.
You can find a more elaborate description of various tape drive devices in the
dump man page.

<p>
If you wanted to write a small script called "backup", it might look
something like this:

<blockquote><pre>
echo "  Starting Full Backup..."
dump -0au -f /dev/nrst0 /dev/rsd0a
dump -0au -f /dev/nrst0 /dev/rsd0d
dump -0au -f /dev/nrst0 /dev/rsd0e
dump -0au -f /dev/nrst0 /dev/rsd0h
echo
echo -n "  Rewinding Drive, Please wait..."
mt -f /dev/rst0 rewind
echo "Done."
echo
</pre></blockquote>

If scheduled nightly backups are desired,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cron">cron(8)</a>
could be used to launch your backup script automatically.

<p>
It will also be helpful to document (on a scrap of paper) how large each
file system needs to be.
You can use <tt>df -h</tt> to determine how much space each partition is
currently using.
This will be handy when the drive fails and you need to recreate your
partition table on the new drive.

<p>
Restoring your data will also help reduce fragmentation.
To ensure you get all files, the best way of backing up is rebooting your
system in single user mode.
File systems do not need to be mounted to be backed up.
Don't forget to mount root (/) r/w after rebooting in single user mode or
your dump will fail when trying to write out dumpdates.
Enter <tt>bsd -s</tt> at the boot> prompt for single user mode.

<h3>Viewing the contents of a dump tape:</h3>

After you've backed up your file systems for the first time, it would be
a good idea to briefly test your tape and be sure the data on it is as
you expect it should be.

<p>
You can use the following example to review a catalog of files on a dump
tape:

<blockquote><pre>
# <b>restore -tvs 1 -f /dev/rst0</b>
</pre></blockquote>

This will cause a list of files that exist on the 1st partition of the
dump tape to be listed.
Following along from the above examples, 1 would be your root file system.

<p>
To see what resides on the 2nd tape partition and send the output to a
file, you would use a command similar to:

<blockquote><pre>
# <b>restore -tvs 2 -f /dev/rst0 > /home/me/list.txt</b>
</pre></blockquote>

If you have a mount table like the simple one, 2 would be /usr, if yours
is a more advanced mount table 2 might be /var or another fs.
The sequence number matches the order in which the file systems are written
to tape.

<h3>Restoring from tape:</h3>

The example scenario listed below would be useful if your fixed drive
has failed completely.
In the event you want to restore a single file from tape, review the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore">restore(8)</a>
man page and pay attention to the interactive mode instructions.

<p>
If you have prepared properly, replacing a disk and restoring your data
from tape can be a very quick process.
The standard OpenBSD install/boot CD already contains the required restore(8)
utility as well as the binaries required to partition and make your new drive
bootable.
In most cases, a CD and your most recent dump tape is all you'll need to
get back up and running.

<p>
After physically replacing the failed disk drive, the basic steps to
restore your data are as follows:

<ul>
  <li>
    Boot from the OpenBSD install/boot floppy.
    At the menu selection, choose Shell.
    Write protect and insert your most recent back up tape into the drive.

  <li>
    Using the
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
    command, create a primary OpenBSD partition on this newly installed
    drive.
    Example:

    <blockquote><pre>
    # <b>fdisk -e sd0</b>
    </pre></blockquote>

    See <a href="#fdisk">fdisk FAQ</a> for more info.

  <li>
    Using the disklabel command, recreate your OpenBSD partition table
    inside that primary OpenBSD partition you just created with fdisk.
    Example:

    <blockquote><pre>
    # <b>disklabel -E sd0</b>
    </pre></blockquote>

    (Don't forget swap, see <a href="#disklabel">disklabel FAQ</a>
    for more info)

  <li>
    Use the newfs command to build a clean file system on each partition you
    created in the above step.
    Example:

    <blockquote><pre>
    # <b>newfs /dev/rsd0a</b>
    # <b>newfs /dev/rsd0h</b>
    </pre></blockquote>

  <li>
    Mount your newly prepared root (/) file system on /mnt.
    Example:

    <blockquote><pre>
    # <b>mount /dev/sd0a /mnt</b>
    </pre></blockquote>

  <li>
    Change into that mounted root file system and start the restore process.
    Example:

    <blockquote><pre>
    # <b>cd /mnt</b>
    # <b>restore -rs 1 -f /dev/rst0</b>
    </pre></blockquote>

  <li>
    You'll want this new disk to be bootable, use the following to write a
    new MBR to your drive.
    Example:

    <blockquote><pre>
    # <b>fdisk -i sd0</b>
    </pre></blockquote>

  <li>
    In addition to writing a new MBR to the drive, you will need to install
    boot blocks to boot from it.
    The following is a brief example:

    <blockquote><pre>
    # <b>installboot -v -r /mnt sd0</b>
    </pre></blockquote>

  <li>
    Your new root file system on the fixed disk should be ready enough so
    you can boot it and continue restoring the rest of your file systems.
    Since your operating system is not complete yet, be sure you boot back
    up with single user mode.
    At the shell prompt, issue the following commands to unmount and
    halt the system:

    <blockquote><pre>
    # <b>umount /mnt</b>
    # <b>halt</b>
    </pre></blockquote>

  <li>
    Remove the install/boot floppy from the drive and reboot your system.
    At the OpenBSD boot&gt; prompt, issue the following command:

    <blockquote><pre>
    boot> <b>bsd -s</b>
    </pre></blockquote>

    The bsd -s will cause the kernel to be started in single user mode which
    will only require a root (/) file system.

  <li>
    Assuming you performed the above steps correctly and nothing has gone
    wrong, you should end up at a prompt asking you for a shell path or press
    return.
    Press return to use sh.
    Next, you'll want to remount root in r/w mode as opposed to read only.
    Issue the following command:

    <blockquote><pre>
    # <b>mount -u -w /</b>
    </pre></blockquote>

  <li>
    Once you have re-mounted in r/w mode, you can continue restoring your
    other file systems.
    Example:

    <blockquote><pre>
    <i>(simple mount table)</i>
    # <b>mount /dev/sd0h /usr; cd /usr; restore -rs 2 -f /dev/rst0</b>

    <i>(more advanced mount table)</i>
    # <b>mount /dev/sd0d /var; cd /var; restore -rs 2 -f /dev/rst0</b>
    # <b>mount /dev/sd0e /home; cd /home; restore -rs 3 -f /dev/rst0</b>
    # <b>mount /dev/sd0h /usr; cd /usr; restore -rs 4 -f /dev/rst0</b>
    </pre></blockquote>

    You could use "<b>restore rvsf</b>" instead of just rsf to view names of
    objects as they are extracted from the dump set.

  <li>
    Finally after you finish restoring all your other file systems to disk,
    reboot into multiuser mode.
    If everything went as planned, your system will be back to the state it
    was in as of your most recent back up tape and ready to use again.
</ul>

<h2 id="foreignfs">14.12 - Can I access data on filesystems other than FFS?</h2>

Yes.
Start with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
manual which contains examples explaining how to mount some of the
most commonly used filesystems.
A partial list of
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_&amp;sec=8&amp;apropos=1">
supported filesystems</a>
and related commands can be obtained with

<blockquote><pre>
# <b> man -k -s 8 mount</b>
</pre></blockquote>

Note that support may be limited to read-only operation.
@


1.294
log
@Reduce "Can I access data on file systems other than FFS" to a minimum.
If more is needed, people will start asking questions, perhaps even
frequently.
@
text
@d452 1
a452 1
A large performance increase is seen in diskwriting performance as a result.
d1573 1
a1573 1
supported file systems</a>
@


1.293
log
@Can I use a flash memory device with OpenBSD?
Yes.
@
text
@a55 3
<ul>
  <li><a href="#foreignfsafter">14.12.1 - The partitions are not in my
                                disklabel! What should I do?</a>
a1564 2
<!-- This article written by Steven Mestdagh,
steven@@openbsd.org, and released under the BSD license -->
d1567 1
a1567 9
Other supported filesystems include: ext2/3/4 (Linux), ISO 9660 and UDF
(CD-ROM, DVD media), FAT (MS-DOS and Windows), NFS, NTFS (Windows).
Some of them have limited support; for instance read-only.

<p>
We will give a general overview on how to use one of these filesystems under
OpenBSD.
To be able to use a filesystem, it must be mounted.
For details and mount options, please consult the
d1569 6
a1574 125
manual page, and that of the mount command for the filesystem you will be
mounting, e.g. mount_msdos, mount_ext2fs, ...

<p>
First, you must know on which device your filesystem is located.
This can be simply your first hard disk, <tt>wd0</tt> or <tt>sd0</tt>,
but it may be less obvious.
All recognized and configured devices on your system are mentioned in the
output of the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg">dmesg(8)</a>
command: a device name, followed by a one-line description of the device.
For example, my first CD-ROM drive is recognized as follows:

<blockquote><pre>
cd0 at scsibus0 targ 0 lun 0: &lt;COMPAQ, DVD-ROM LTD163, GQH3&gt; SCSI0 5/cdrom removable
</pre></blockquote>

For a much shorter list of available disks, you can use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl">sysctl(8)</a>.
The command

<blockquote><pre>
# <b>sysctl hw.disknames</b>
</pre></blockquote>

will show all disks currently known to your system, for example:

<blockquote><pre>
hw.disknames=sd0:303c29298c315c77,cd0:,fd0:
</pre></blockquote>

At this point, it is time to find out which partitions are on the device, and
in which partition the desired filesystem resides.
Therefore, we examine the device using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>.
The disklabel contains a list of partitions, with a maximum number of 16.
Partition c always indicates the entire device.
Partitions a-b and d-p are used by OpenBSD.
Partitions i-p may be automatically allocated to file systems of other
operating systems.
In this case, I'll be viewing the disklabel of my hard disk, which contains
a number of different filesystems.

<p>
<b>NOTE: OpenBSD was installed after the other operating systems</b>
on this system, and during the install a disklabel containing partitions for
the native as well as the foreign filesystems was installed on the disk.
However, if you install foreign filesystems after the OpenBSD disklabel
was already installed on the disk, you need to add or modify them manually
afterwards.
This will be explained in <a href="#foreignfsafter">this subsection</a>.

<blockquote><pre>
# <b>disklabel wd0</b>

# using MBR partition 2: type A6 off 20338290 (0x1365672) size 29318625 (0x1bf5de1)
# /dev/rwd0c:
type: ESDI
disk: ESDI/IDE disk
label: ST340016A
duid: d920a43a5a56ad5f
flags:
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 16383
total sectors: 78165360
boundstart: 20338290
boundend: 49656915
drivedata: 0

16 partitions:
#             size        offset  fstype [fsize bsize  cpg]
  a:        408366      20338290  4.2BSD   2048 16384   16 # /
  b:       1638000      20746656    swap
  c:      78165360             0  unused
  d:       4194288      22384656  4.2BSD   2048 16384   16 # /usr
  e:        409248      26578944  4.2BSD   2048 16384   16 # /tmp
  f:      10486224      26988192  4.2BSD   2048 16384   16 # /var
  g:      12182499      37474416  4.2BSD   2048 16384   16 # /home
  i:         64197            63 unknown
  j:      20274030         64260 unknown
  k:       1975932      49656978   MSDOS
  l:       3919797      51632973 unknown
  m:       2939832      55552833  ext2fs
  n:       5879727      58492728  ext2fs
  o:      13783707      64372518  ext2fs

</pre></blockquote>

As can be seen in the above output, the OpenBSD partitions are listed first.
Next to them are a number of ext2 partitions and one MSDOS partition, as
well as a few 'unknown' partitions.
On i386 and amd64 systems, you can usually find out more about those using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
utility.
For the curious reader: partition i is a maintenance partition created by
the vendor, partition j is a NTFS partition and partition l is a Linux swap
partition.

<p>
Once you have determined which partition it is you want to use, you can
move to the final step: mounting the filesystem contained in it.
Most filesystems are supported in the GENERIC kernel: just have a look at
the kernel configuration file, located in the
<tt>/usr/src/sys/arch/&lt;<i>arch</i>&gt;/conf</tt> directory.
If you want to use one of the filesystems not supported in GENERIC, you
will need to <a href="faq5.html#Options">build a custom kernel</a>.

<p>
When you have gathered the information needed as mentioned above, it is
time to mount the filesystem.
Let's assume a directory <tt>/mnt/otherfs</tt> exists, which we will use as
a mount point where we will mount the desired filesystem.
In this example, we will mount the ext2 filesystem in partition m:

<blockquote><pre>
# <b>mount -t ext2fs /dev/wd0m /mnt/otherfs</b>
</pre></blockquote>

If you plan to use this filesystem regularly, you may save yourself some
time by inserting a line for it in <tt>/etc/fstab</tt>, for example something
like:
d1577 1
a1577 1
/dev/wd0m /mnt/otherfs ext2fs rw,noauto,nodev,nosuid 0 0
d1580 1
a1580 80
Notice the 0 values in the fifth and sixth field.
This means we do not require the filesystem to be dumped, and checked using
fsck.
Generally, those are things you want to have handled by the native
operating system associated with the filesystem.

<h3 id="foreignfsafter">14.12.1 - The partitions are not in my disklabel!
What should I do?</h3>

If you install foreign filesystems on your system (often the result of
adding a new operating system) after you have already installed OpenBSD,
a disklabel will already be present, and it will not be updated
automatically to contain the new foreign filesystem partitions.
If you wish to use them, you need to add or modify these partitions
manually using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>.

<p>
As an example, I have modified one of my existing ext2 partitions: using
Linux's fdisk program, I've reduced the size of the 'o' partition (see
disklabel output above) to 1G.
We will be able to recognize it easily by its starting position
(offset: 64372518) and size (13783707).
Note that these values are sector numbers, and that using sector numbers
(not megabytes or any other measure) is the most exact and safest way of
reading this information.

<p>
Before the change, the partition looked like this using OpenBSD's
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
utility (leaving only relevant output):

<blockquote><pre>
# <b>fdisk wd0</b>
. . .
Offset: 64372455        Signature: 0xAA55
         Starting       Ending       LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
------------------------------------------------------------------------
 0: 83 4007   1  1 - 4864 254 63 [    64372518:    13783707 ] Linux files*
. . .
</pre></blockquote>

As you can see, the starting position and size are exactly those reported
by disklabel(8) earlier.
(Dont' be confused by the value indicated by "Offset": it is referring to
the starting position of the extended partition in which the ext2 partition
is contained.)

<p>
After changing the partition's size from Linux, it looks like this:

<blockquote><pre>
# <b>fdisk wd0</b>
. . .
Offset: 64372455        Signature: 0xAA55
         Starting       Ending       LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
------------------------------------------------------------------------
 0: 83 4007   1  1 - 4137 254 63 [    64372518:     2104452 ] Linux files*
. . .
</pre></blockquote>

Now this needs to be changed using disklabel(8).
For instance, you can issue <tt>disklabel -e wd0</tt>, which will invoke
an editor specified by the EDITOR environment variable (default is vi).
Within the editor, change the last line of the disklabel to match the new
size:

<blockquote><pre>
  o:       2104452      64372518  ext2fs
</pre></blockquote>

Save the disklabel to disk when finished.
Now that the disklabel is up to date again, you should be able to mount
your partitions as described above.

<p>
You can follow a very similar procedure to add new partitions.
@


1.292
log
@change some <i> to <tt> or <b>, as appropriate
@
text
@a59 10
<li><a href="#flashmem"        >14.13 - Can I use a flash memory device with
                                OpenBSD?</a>
  <ul>
  <li><a href="#flashmemUSB"   >14.13.1 - Flash memory as a portable storage
                                device</a>
  <li><a href="#flashmemBoot"  >14.13.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.13.3 - How can I make a "live" bootable
                                USB device?</a>
  </ul>
</ul>
a1791 341

<h2 id="flashmem">14.13 - Can I use a flash memory device with OpenBSD?</h2>

<h3 id="flashmemUSB">14.13.1 - Flash memory as a portable storage device</h3>
<!-- This article written by Steven Mestdagh,
steven@@openbsd.org, and released under the BSD license -->

Normally, the memory device should be recognized upon plugging it into a
port of your machine.
Shortly after inserting it, a number of messages are written to the console
by the kernel.
For instance, when I plug in my USB flash memory device, I see the following
on my console:

<blockquote><pre>
umass0 at uhub1 port 1 configuration 1 interface 0
umass0: LEXR PLUG DRIVE LEXR PLUG DRIVE, rev 1.10/0.01, addr 2
umass0: using SCSI over Bulk-Only
scsibus2 at umass0: 2 targets
sd0 at scsibus2 targ 1 lun 0: &lt;LEXAR, DIGITAL FILM, /W1.&gt; SCSI2 0/direct removable
sd0: 123MB, 512 bytes/sec, 251904 sec total
</pre></blockquote>

These lines indicate that the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=umass">umass(4)</a>
(USB mass storage) driver has been attached to the memory device, and that
it is using the SCSI system.
The last two lines are the most important ones: they are saying to which
device node the memory device has been attached, and what the total amount of
storage space is.
If you somehow missed these lines, you can still see them afterwards with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg">dmesg(8)</a>
command.
The reported CHS geometry is a rather fictitious one, as the flash memory
is being treated like any regular SCSI disk.

<p>
We will discuss two scenarios below.

<h4>The device is new/empty and you want to use it with OpenBSD only</h4>

You will need to initialize a disklabel onto the device, and create at
least one partition.
Please read <a href="#disklabel">Using OpenBSD's disklabel</a> and the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>
manual page for details about this.

<p>
In this example I created just one partition <i>a</i> in which I will place
a FFS filesystem:

<blockquote><pre>
# <b>newfs sd0a</b>
Warning: inode blocks/cyl group (125) >= data blocks (62) in last
    cylinder group. This implies 1984 sector(s) cannot be allocated.
/dev/rsd0a:     249856 sectors in 122 cylinders of 64 tracks, 32 sectors
        122.0MB in 1 cyl groups (122 c/g, 122.00MB/g, 15488 i/g)
super-block backups (for fsck -b #) at:
 32,
</pre></blockquote>

Let's mount the filesystem we created in the <i>a</i> partition on
<tt>/mnt/flashmem</tt>.
Create the mount point first if it does not exist.

<blockquote><pre>
# <b>mkdir /mnt/flashmem</b>
# <b>mount /dev/sd0a /mnt/flashmem</b>
</pre></blockquote>

<h4>You received the memory device from someone with whom you want to
exchange data</h4>

There is a considerable chance the other person is not using OpenBSD, so there
may be a foreign filesystem on the memory device.
Therefore, we will first need to find out which partitions are on the device,
as described in <a href="#foreignfs">FAQ 14 - Foreign Filesystems</a>.

<blockquote><pre>
# <b>disklabel sd0</b>
# /dev/rsd0c:
type: SCSI
disk: SCSI disk
label: DIGITAL FILM
flags:
bytes/sector: 512
sectors/track: 32
tracks/cylinder: 64
sectors/cylinder: 2048
cylinders: 123
total sectors: 251904
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # microseconds
track-to-track seek: 0  # microseconds
drivedata: 0

16 partitions:
#             size        offset  fstype [fsize bsize  cpg]
  c:        251904             0  unused      0     0      # Cyl     0 -   122
  i:        250592            32   MSDOS                   # Cyl     0*-   122*
</pre></blockquote>

As can be seen in the disklabel output above, there is only one partition
<i>i</i>, containing a FAT filesystem created on a Windows machine.
As usual, the <i>c</i> partition indicates the entire device.

<p>
Let's now mount the filesystem in the <i>i</i> partition on
<tt>/mnt/flashmem</tt>.

<blockquote><pre>
# <b>mount -t msdos /dev/sd0i /mnt/flashmem</b>
</pre></blockquote>

Now you can start using it just like any other disk.

<blockquote>
<b>WARNING:</b>
You should <b>always unmount</b> the filesystem <b>before unplugging</b> the
memory device.
If you don't, the filesystem may be left in an inconsistent state, which
may result in data corruption.
</blockquote>

Upon detaching the memory device from your machine, you will again see the
kernel write messages about this to the console:

<blockquote><pre>
umass0: at uhub1 port 1 (addr 2) disconnected
sd0 detached
scsibus2 detached
umass0 detached
</pre></blockquote>

<h3 id="flashmemBoot">14.13.2 - Flash memory as bootable storage</h3>

<!-- This article written by Nick Holland
nick@@openbsd.org, and released under the BSD license -->

One can also use flash memory in various forms as bootable disk with
OpenBSD.
This can be done with both USB devices (assuming your computer can
boot from a USB flash device, not all can), or with a non-USB (i.e.,
CF) device with an IDE or SATA adapter.
(Non-USB devices attached with a USB adapter are treated as USB devices.)
In some cases, you may actually use a device in both ways (load the
media in a USB adapter, but run it in an IDE adapter).

<p>
A flash device attached to a USB port will show up as a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>
SCSI-like device.
When attached to an IDE adapter, it will show up as a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>
device.

<p>
In the case of flash media in an IDE adapter, it can be booted from
any system that could boot from an IDE hard disk on the same adapter.
In every sense, the system sees the flash media as an IDE disk.
Simply configure the hardware appropriately, then install OpenBSD
to the flash disk as normal.

<p>
In the case of booting from a USB device, your system must be
able to boot from the USB device without being distracted by
other devices on the system.
Note that if your intention is to make a portable boot environment on a
USB device, you really want to use <a href="#DUID">DUIDs</a>, rather
than the traditional <tt>/dev/sd0X</tt> notation.
The USB device will show up as a SCSI disk, sometimes sd0.
Without DUIDs, if you plug this device into a system which already has a few
SCSI-like disks (i.e., devices attached to an ahci(4) interface) on it,
it will probably end up with a different
identifier, which will complicate carrying the flash device from system
to system, as you would have to update <tt>/etc/fstab</tt>.
Using DUIDs completely resolves this issue.

<p>
Some notes:

<ul>
  <li><b>Speed:</b>
    In general, flash devices are much slower than hard disks, especially when
    it comes to writing.
    Using <a href="#SoftUpdates">soft updates</a> will help this
    considerably, as will using the "noatime" mount option.

  <li><b>"Write fatigue":</b>
    Much has been written about the finite number of times an individual
    flash cell can be rewritten before failure.
    Practically speaking, however, there are many ways a flash device can
    fail, write fatigue is just one of them.
    Modern flash devices will verify writes, and in the event of failure,
    will automatically remap the failed sectors with one of the many spare
    sectors.
    Most users with most flash devices will not have to worry about "write
    fatigue".
    You would probably experience more down time due to failure of "clever"
    tricks done to avoid writing to the flash drive than you will by just
    using the drives as read-write media.

  <li><b>Reliability:</b>
    The fact that flash media has no moving parts has prompted many people
    to assume the flash media is inherently more reliable than hard disks.
    It is not wise to assume that switching to flash means you
    don't need to worry about data loss or drive failure.
    People have reported considerable variation in flash media quality,
    it is probably best to consider flash storage as a silent and low-power
    alternative to disk rather than a failure-free storage media.

  <li><b>Creating a bootable USB flash drive:</b>
    While a USB device can only be booted on a machine which can boot from
    USB drives, it can be created on any machine with supported USB
    hardware.
    You will, of course, be unable to test your work until you can get to a
    USB bootable system.

  <li><b>Going from IDE to USB interfaces:</b>
    Since flash media can be readable and writable through USB, IDE and
    other adapters, you can create bootable media with one type of adapter
    but maintain or use it with another type of adapter.

  <li><b>Mixing OpenBSD and other partitions on one device:</b>
    OpenBSD treats the flash disk as any other disk so one can use
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
    to partition a flash device, as you would any hard disk.
    You can then have OpenBSD file systems on one partition, and use another
    partition for another file system, for example, FAT32.
    However, not all OSs treat USB devices as "equals".
    Windows, at least, will not attempt to use or create a partition that
    doesn't start at the beginning of the device, nor will the Windows
    partitioning tools allow you to partition the disk, though it will
    respect existing partitions.
    So, if you wish to create a USB flash drive that is bootable with
    OpenBSD, but also functions as a FAT32-capable device on other OSs, you
    would want to do something like this:

    <ol>
    <li>Partition the media with OpenBSD's fdisk, creating a partition
      of the type you desire for Windows to use at the beginning of the
      disk, and an OpenBSD partition at the end of the disk.
    <li>Install OpenBSD as normal to the OpenBSD fdisk partition, don't
      forget to flag the OpenBSD partition as "Active" for booting.
    <li>Format the other partition.
      This can be (and perhaps should be) done on the "target" OS
      (Windows, in this case).
    </ol>

    Note that if the other partition's type is chosen appropriately, it is
    possible to have OpenBSD access both partitions on the device.
    So, a Windows user could populate the FAT32 partition with MP3 files
    which could be played when they booted from the OpenBSD partition.
</ul>

<h3 id="flashmemLive">14.13.3 - How do I create a bootable "live" USB
device?</h3>

It is very easy to create a bootable USB flash (or other!) drive that
can be used as a "live" OpenBSD system without installing OpenBSD on
the local hard disk of a machine.
Obviously, the target machine must be bootable from a USB device, but
the initial load can actually be done from any machine with a USB
interface.

<p>
Some reasons you may want to do this:

<ul>
  <li>A portable, secure "machine" you can carry with you in your pocket.
  <li>Fix problems in OpenBSD and other installs with tools that aren't
    available with <a href="faq4.html#bsd.rd">bsd.rd</a>.
  <li>Evaluate hardware for OpenBSD compatibility at the point of purchase.
  <li>Install machines that lack any other form of boot media.
  <li>Collect <a href="faq4.html#SendDmesg">dmesg</a> outputs from your
    friends' computers!
    As OpenBSD's dmesg is useful for identifying hardware, this can be a
    good way to prep for the install of <b>other</b> OSs on a machine -- make
    sure you have all the needed drivers before starting.
</ul>

Creating such a "live OpenBSD drive" is simple.
<ul>
  <li>Mount your USB drive to the machine you are installing from.
  <li>Boot your favorite OpenBSD install media.
  <li><a href="faq4.html">Install</a> as normal, being careful to select
    your flash drive as the install target.
  <li>Boot from your newly created USB device.
</ul>

That's it!

<p>
There are some things you may want to do after the install to improve
your results:

<ul>
  <li>
    Install all packages and utilities you are likely to wish to have available.
  <li>
    Different target machines will likely have different NICs.
    You could create a bunch of
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
    hostname.if(5)</a>
    files in <tt>/etc</tt>, each containing just <tt>dhcp</tt>, for all the
    NICs you are likely to encounter (fxp0, re0, rl0, bge0, bnx0, em0, etc.)
    on USB-bootable machines, plus maybe sample wireless config files as
    well.
    OpenBSD will ignore all hostname.if(5) files for devices not present
    at boot time.
  <li>
    You may wish to have a copy of the install files and maybe any
    desired package .tgz files so you can use the drive as an install
    media (boot bsd.rd instead of letting it boot normally).
  <li>
    On many machines, X will "Just Work" with no config file, but you may
    wish to collect X config files for those systems that require them.
  <li>
    <a href="#SoftUpdates">Soft updates</a>
    will be something you will want to use.
  <li>
    For maximum flexibility, you probably want to use
    <a href="../i386.html">i386</a> rather than
    <a href="../amd64.html">amd64</a>.
    However, if you wish to use it as an install media, you could have an
    amd64 bsd.rd and install files in addition to i386.
  <li>
    Use <a href="#DUID">DUIDs</a> to identify your partitions (default).
  <li>
    You may find it desirable to have a FAT partition on the USB drive,
    create it as detailed <a href="#flashmemBoot">above</a>.
  <li>
    You may wish to use
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">
    softraid(4)</a>
    to encrypt a data partition.
</ul>
@


1.291
log
@don't use <tt> for df(1) in section title
@
text
@d475 1
a475 1
entry that has one partition <i>sd0a</i> that we wish to have mounted
d761 1
a761 1
Be <i>very careful</i> with this command; issuing it on the wrong device
d1050 1
a1050 1
Softraid disks are assembled <i>after</i> all other IDE, SATA, SAS and
@


1.290
log
@tweaks in "Mounting disk images" and "negative space according to df"
@
text
@d40 1
a40 1
<li><a href="#NegSpace"        >14.8 - Why does <tt>df(1)</tt> tell me
d555 1
a555 1
<h2 id="NegSpace">14.8 - Why does <tt>df(1)</tt> tell me I have over 100% of
@


1.289
log
@I overlooked one /altroot -> <tt>/altroot</tt>
@
text
@d528 1
a528 2
To mount a disk image (ISO images, disk images created with dd, etc.) in
OpenBSD you must configure a
d531 1
a531 1
For example, if you have an ISO image located at <i>/tmp/ISO.image</i>,
d539 2
a540 4
Notice that since this is an ISO 9660 image, as used by CDs and DVDs,
you must specify type of <i>cd9660</i> when mounting it.
This is true, no matter what type, e.g.  you must use type <i>ext2fs</i>
when mounting Linux disk images.
d543 1
a543 1
To unmount the image, use the following commands.
d550 1
a550 1
For more information, refer to the
d552 2
a553 1
man page.
d558 2
a559 3
People are sometimes surprised to find they have <i>negative</i>
available disk space, or more than 100% of a filesystem in use, as shown
by
d562 1
a562 1
gp>
@


1.288
log
@shuffle the sections a bit:
- shorten and merge "deleted disklabel" section into "using disklabel"
- move the four large beasts that will need a LOT of work to the end
@
text
@d487 1
a487 1
<h2 id="altroot">14.6 - Duplicating your root partition: altroot</h2>
@


1.287
log
@add link to boot_amd64(8) man page
@
text
@d35 16
a50 3
<li><a href="#SoftUpdates"     >14.4 - Soft updates</a>
<li><a href="#BootAmd64"       >14.5 - How does OpenBSD/amd64 boot?</a>
<li><a href="#LargeDrive"      >14.6 - What are the issues regarding large
d52 1
a52 1
<li><a href="#Backup"          >14.7 - Preparing for disaster: backing up
d54 1
a54 6
<li><a href="#MountImage"      >14.8 - Mounting disk images in OpenBSD</a>
<li><a href="#NegSpace"        >14.9 - Why does <tt>df(1)</tt> tell me
                                I have over 100% of my disk used?</a>
<li><a href="#OhBugger"        >14.10 - Recovering partitions after deleting
                                the disklabel</a>
<li><a href="#foreignfs"       >14.11 - Can I access data on filesystems other
d57 1
a57 1
  <li><a href="#foreignfsafter">14.11.1 - The partitions are not in my
d60 1
a60 1
<li><a href="#flashmem"        >14.12 - Can I use a flash memory device with
d63 1
a63 1
  <li><a href="#flashmemUSB"   >14.12.1 - Flash memory as a portable storage
d65 2
a66 2
  <li><a href="#flashmemBoot"  >14.12.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.12.3 - How can I make a "live" bootable
a68 10
<li><a href="#altroot"         >14.13 - Duplicating your root partition:
                                altroot</a>
<li><a href="#softraid"        >14.14 - How do I use softraid?</a>
  <ul>
  <li><a href="#softraidDI"    >14.14.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.14.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.14.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.14.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.14.5 - Softraid notes</a>
  </ul>
d366 1
a366 1
<h2 id="SoftUpdates">14.4 - Soft updates</h2>
d368 8
a375 8
Soft updates are based on an idea proposed by
<a href="http://www.ece.cmu.edu/~ganger/papers/CSE-TR-254-95/">Greg Ganger
and Yale Patt</a> and developed for FreeBSD by
<a href="http://www.mckusick.com/softdep/">Kirk McKusick</a>.
Soft updates imposes a partial ordering on the buffer cache
operations which permits the requirement for synchronous writing of
directory entries to be removed from the FFS code.
A large performance increase is seen in diskwriting performance as a result.
d378 4
a381 9
Enabling soft updates must be done with a mount-time option.
When mounting a partition with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
utility, you can specify that you wish to have soft updates enabled on
that partition.
Below is a sample
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>
entry that has one partition <i>sd0a</i> that we wish to have mounted
with soft updates.
d383 9
a391 3
<blockquote><pre>
/dev/sd0a / ffs rw,softdep 1 1
</pre></blockquote>
d393 9
a401 4
Note to sparc users: Do not enable soft updates on sun4 or sun4c machines.
These architectures support only a very limited amount of kernel memory and
cannot use this feature.
However, sun4m machines are fine.
d403 1
a403 1
<h2 id="BootAmd64">14.5 - How does OpenBSD/amd64 boot?</h2>
d456 1
a456 2
<h2 id="LargeDrive">14.6 - What are the issues regarding large drives with
OpenBSD?</h2>
d458 8
a465 3
OpenBSD supports both FFS and FFS2 file systems, also known as UFS and UFS2.
Before looking at the limits of each system, we need to look at some
more general system limits.
d468 13
a480 9
Of course, the ability of file system and the abilities of particular
hardware are two different things.
A newer 250G IDE hard disk may have issues on older (pre >137G
standards) interfaces (though for the most part, they work just fine),
and some very old SCSI adapters have been seen to
have problems with more modern drives, and some older BIOSs will hang
when they encounter a modern sized hard disk.
You must respect the abilities of your hardware and boot code, of
course.
d482 4
a485 1
<h3>Partition size and location limitations</h3>
d487 1
a487 3
Unfortunately, the full ability of the OS isn't available until <b>after</b>
the OS has been loaded into memory.
The boot process has to utilize (and is thus limited by) the system's boot ROM.
d489 11
a499 11
<p>
For this reason, the entire /bsd file (the kernel) must be located on
the disk within the boot ROM addressable area.
This means that on some older i386 systems, the root partition must be
completely within the first 504M, but newer computers may have limits of
2G, 8G, 32G, 128G or more.
It is worth noting that many relatively new computers which support
larger than 128G drives actually have BIOS limitations of booting
only from within the first 128G.
You can use these systems with large drives, but your root partition
must be within the space supported by the boot ROM.
d502 3
a504 4
Note that it is possible to install a 40G drive on an old 486 and load
OpenBSD on it as one huge partition, and think you have successfully
violated the above rule.
However, it might come back to haunt you in a most unpleasant way:
d506 3
a508 9
<ul>
  <li>You install on the 40G / partition.
    It works, because the base OS and all its files (including /bsd) are within
    the first 504M.
  <li>You use the system, and end up with more than 504M of files on it.
  <li>You upgrade, and copy your new /bsd over the old one.
  <li>You reboot.
  <li>You get a message such as "ERR M" or other problems on boot.
</ul>
d510 1
a510 5
Why?
Because when you copied "over" the new <tt>/bsd</tt> file, it didn't
overwrite the old one, it got relocated to a new location on the
disk, probably outside the 504M range the BIOS supported.
The boot loader was unable to fetch the file <tt>/bsd</tt>, and the system hung.
d512 3
a514 5
<p>
To get OpenBSD to boot, the boot loaders (biosboot(8) and <tt>/boot</tt>
in the case of i386/amd64) and the kernel (<tt>/bsd</tt>) must be within the
boot ROM's supported range, and within their own abilities.
To play it safe, the rule is simple:
d516 9
a524 4
<blockquote>
<b>The entire root partition must be within the computer's BIOS
(or boot ROM) addressable space.</b>
</blockquote>
d526 1
a526 3
Some non-i386 users think they are immune to this, however most platforms
have some kind of boot ROM limitation on disk size.
Finding out for sure what the limit is, however, can be difficult.
d528 6
a533 3
<p>
This is another good reason to <a href="faq4.html#Partitioning">partition
your hard disk</a>, rather than using one large partition.
d535 4
a538 1
<h3>fsck(8) time and memory requirements</h3>
d540 4
a543 10
Another consideration with large file systems is the time and memory
required to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck">fsck(8)</a>
the file system after a crash or power interruption.
One should not put a 120G file system on a system with 32M of RAM and
expect it to successfully fsck(8) after a crash.
A rough guideline is the system should have at least 1M of available
memory for every 1G of disk space to successfully fsck the disk.
Swap can be used here, but at a very significant performance penalty,
so severe that it is usually unacceptable, except in special cases.
d546 6
a551 9
The time required to fsck the drive may become a problem as the file
system size expands, but you only have to fsck the disk space that is
actually allocated to mounted filesystems.
This is another reason NOT to allocate all your disk space Just Because
It Is There.
Keeping file systems mounted RO or not mounted helps keep them from
needing to be fsck(8)ed after tripping over the power cord.
Reducing the number of inodes (using the -i option of newfs) can also
improve fsck time -- assuming you really don't need them.
d553 3
a555 4
<p>
Don't forget that if you have multiple disks on the system, they could
all end up being fsck(8)ed after a crash at the same time, so they could
require more RAM than a single disk.
d557 2
a558 1
<h3>FFS vs. FFS2</h3>
d560 4
a563 5
Using FFS, OpenBSD supports an individual file system of up to
2<sup>31</sup>-1, or 2,147,483,647 blocks, and as each block is 512
bytes, that's a tiny amount less than 1T.
FFS2 is capable of much larger file systems, though other limits will be
reached long before the file system limits will be reached.
d565 9
a573 8
<p>
The boot/installation kernels <i>only support FFS</i>, not FFS2, so key
system partitions (<tt>/, /usr, /var, /tmp</tt>) should not be FFS2, or
severe maintenance problems can arise (there should be no reason for
those partitions to be that large, anyway).
For this reason, very large partitions should only be used for
"non-system" partitions, for example, <tt>/home, /var/www/,
/bigarray</tt>, etc.
d576 3
a578 6
Note that not all controllers and drivers support large disks.
For example,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ami">ami(4)</a>
has a limit of 2TB per logical volume.
Always be aware of what was available when a controller or interface was
manufactured, and don't just rely on "the connectors fit".
d580 1
a580 1
<h3>Disks larger than 2TB</h3>
d582 14
a595 9
The MBR system used on PCs only directly understands disks up to 2TB in
size.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
will show disks larger than 2TB as only 2TB.
This does not in any way hinder OpenBSD's ability to utilize larger
disks, as the MBR is used only to bootstrap the OS.
Once the OS is
running, the file systems are defined by the disklabel, which does not
have a 2TB limit.
d597 1
a597 13
<p>
To use a disk larger than 2TB, create an OpenBSD partition on the disk
using fdisk, whatever size fdisk will let you.
When you label the disk with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>,
use the "b" option to set the OpenBSD boundaries (which defaulted to
the size of the OpenBSD fdisk partition) to cover the entire disk.
Now you can create your partitions as you wish.
You must still respect the abilities of your BIOS, which will have the
limitation of only understanding fdisk partitions, so your 'a'
partition should be entirely within the fdisk-managed part of the disk,
in addition to any BIOS limitations.
d599 43
a641 2
<h2 id="Backup">14.7 - Preparing for disaster: backing up and restoring
from tape</h2>
d643 1
a643 1
<h3>Introduction:</h3>
d645 11
a655 3
If you plan on running what might be called a production server, it is
advisable to have some form of backup in the event one of your fixed
disk drives fails, or the data is otherwise lost.
d658 8
a665 10
This information will assist you in using the standard
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump">dump(8)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore">restore(8)</a>
utilities provided with OpenBSD.
More advanced backup utilities, such as
"<a href="http://www.bacula.org/">Bacula</a>"
are available through
<a href="faq15.html#PkgMgmt">packages</a> for backing up multiple servers to
disk and tape.
d667 7
a673 1
<h3>Backing up to tape:</h3>
d675 5
a679 5
Backing up to tape requires knowledge of where your file systems are mounted.
You can determine how your filesystems are mounted using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
command at your shell prompt.
You should get output similar to this:
d682 4
a685 3
# <b>mount</b>
/dev/sd0a on / type ffs (local)
/dev/sd0h on /usr type ffs (local)
d688 1
a688 4
In this example, the root (<tt>/</tt>) filesystem resides physically on sd0a
which indicates a SCSI-like fixed disk 0, partition a.
The <tt>/usr</tt> filesystem resides on sd0h, which indicates SCSI-like
fixed disk 0, partition h.
d691 6
a696 1
Another example of a more advanced mount table might be:
d699 13
a711 5
# <b>mount</b>
/dev/sd0a on / type ffs (local)
/dev/sd0d on /var type ffs (local)
/dev/sd0e on /home type ffs (local)
/dev/sd0h on /usr type ffs (local)
d714 5
a718 10
In this more advanced example, the root (<tt>/</tt>) filesystem resides
physically on sd0a.
The <tt>/var</tt> filesystem resides on sd0d, the <tt>/home</tt>
filesystem on sd0e and finally <tt>/usr</tt> on sd0h.

<p>
To backup your machine, you will need to feed dump the name of each fixed disk
partition.
Here is an example of the commands needed to backup the simpler mount table
listed above:
d721 3
a723 3
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0a</b>
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0h</b>
# <b>mt -f /dev/rst0 rewind  </b>
d726 6
a731 2
For the more advanced mount table example, you would use something
similar to:
d734 1
a734 5
# <b>dump -0au -f /dev/nrst0 /dev/rsd0a</b>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0d</b>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0e</b>
# <b>dump -0au -f /dev/nrst0 /dev/rsd0h  </b>
# <b>mt -f /dev/rst0 rewind  </b>
d737 6
a742 4
You can review the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump">dump(8)</a>
man page to learn exactly what each command line switch does.
Here is a brief description of the parameters used above:
d744 5
a748 7
<ul>
  <li><b>0</b> - Perform a level 0 dump, get everything
  <li><b>a</b> - Attempt to automatically determine tape media length
  <li><b>u</b> - Update the file <tt>/etc/dumpdates</tt> to indicate when
    backup was last performed
  <li><b>f</b> - Which tape device to use (/dev/nrst0 in this case)
</ul>
d750 5
a754 1
Finally which partition to backup (/dev/rsd0a, etc.)
d756 3
a758 7
<p>
The
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt">mt(1)</a>
command is used at the end to rewind the drive.
Review the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt">mt(1)</a>
man page for more options (such as eject).
d761 6
a766 2
If you are unsure of your tape device name, use dmesg to locate it.
An example tape drive entry in dmesg might appear similar to:
d769 1
a769 1
st0 at scsibus0 targ 5 lun 0: &lt;ARCHIVE, Python 28388-XXX, 5.28&gt;
d772 11
a782 13
You may have noticed that when backing up, the tape drive is accessed as
device name <tt>nrst0</tt> instead of the <tt>st0</tt> name that is seen in
dmesg.
When you access <tt>st0</tt> as <tt>nrst0</tt> you are accessing the same
physical tape drive but telling the drive to not rewind at the end of the job
and access the device in raw mode.
To back up multiple file systems to a single tape, be sure you use the
non-rewind device.
If you use a rewind device (<tt>rst0</tt>) to back up multiple file systems,
you'll end up overwriting the prior filesystem with the next one dump tries
to write to tape.
You can find a more elaborate description of various tape drive devices in the
dump man page.
d785 1
a785 2
If you wanted to write a small script called "backup", it might look
something like this:
d788 1
a788 10
echo "  Starting Full Backup..."
dump -0au -f /dev/nrst0 /dev/rsd0a
dump -0au -f /dev/nrst0 /dev/rsd0d
dump -0au -f /dev/nrst0 /dev/rsd0e
dump -0au -f /dev/nrst0 /dev/rsd0h
echo
echo -n "  Rewinding Drive, Please wait..."
mt -f /dev/rst0 rewind
echo "Done."
echo
d791 3
a793 3
If scheduled nightly backups are desired,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cron">cron(8)</a>
could be used to launch your backup script automatically.
d795 7
a801 7
<p>
It will also be helpful to document (on a scrap of paper) how large each
file system needs to be.
You can use <tt>df -h</tt> to determine how much space each partition is
currently using.
This will be handy when the drive fails and you need to recreate your
partition table on the new drive.
d804 1
a804 7
Restoring your data will also help reduce fragmentation.
To ensure you get all files, the best way of backing up is rebooting your
system in single user mode.
File systems do not need to be mounted to be backed up.
Don't forget to mount root (/) r/w after rebooting in single user mode or
your dump will fail when trying to write out dumpdates.
Enter <tt>bsd -s</tt> at the boot> prompt for single user mode.
d806 4
a809 1
<h3>Viewing the contents of a dump tape:</h3>
d811 6
a816 7
After you've backed up your file systems for the first time, it would be
a good idea to briefly test your tape and be sure the data on it is as
you expect it should be.

<p>
You can use the following example to review a catalog of files on a dump
tape:
d819 1
a819 1
# <b>restore -tvs 1 -f /dev/rst0</b>
d822 4
a825 3
This will cause a list of files that exist on the 1st partition of the
dump tape to be listed.
Following along from the above examples, 1 would be your root file system.
d828 5
a832 2
To see what resides on the 2nd tape partition and send the output to a
file, you would use a command similar to:
d835 11
a845 1
# <b>restore -tvs 2 -f /dev/rst0 > /home/me/list.txt</b>
d848 3
a850 4
If you have a mount table like the simple one, 2 would be /usr, if yours
is a more advanced mount table 2 might be /var or another fs.
The sequence number matches the order in which the file systems are written
to tape.
d852 8
a859 1
<h3>Restoring from tape:</h3>
d861 2
a862 5
The example scenario listed below would be useful if your fixed drive
has failed completely.
In the event you want to restore a single file from tape, review the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore">restore(8)</a>
man page and pay attention to the interactive mode instructions.
d865 6
a870 7
If you have prepared properly, replacing a disk and restoring your data
from tape can be a very quick process.
The standard OpenBSD install/boot CD already contains the required restore(8)
utility as well as the binaries required to partition and make your new drive
bootable.
In most cases, a CD and your most recent dump tape is all you'll need to
get back up and running.
d872 2
a873 3
<p>
After physically replacing the failed disk drive, the basic steps to
restore your data are as follows:
d875 5
a879 5
<ul>
  <li>
    Boot from the OpenBSD install/boot floppy.
    At the menu selection, choose Shell.
    Write protect and insert your most recent back up tape into the drive.
d881 2
a882 6
  <li>
    Using the
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
    command, create a primary OpenBSD partition on this newly installed
    drive.
    Example:
d884 1
a884 3
    <blockquote><pre>
    # <b>fdisk -e sd0</b>
    </pre></blockquote>
d886 7
a892 1
    See <a href="#fdisk">fdisk FAQ</a> for more info.
d894 14
a907 4
  <li>
    Using the disklabel command, recreate your OpenBSD partition table
    inside that primary OpenBSD partition you just created with fdisk.
    Example:
d909 2
a910 3
    <blockquote><pre>
    # <b>disklabel -E sd0</b>
    </pre></blockquote>
d912 17
a928 2
    (Don't forget swap, see <a href="#disklabel">disklabel FAQ</a>
    for more info)
d930 2
a931 4
  <li>
    Use the newfs command to build a clean file system on each partition you
    created in the above step.
    Example:
d933 5
a937 4
    <blockquote><pre>
    # <b>newfs /dev/rsd0a</b>
    # <b>newfs /dev/rsd0h</b>
    </pre></blockquote>
d939 4
a942 3
  <li>
    Mount your newly prepared root (/) file system on /mnt.
    Example:
d944 1
a944 3
    <blockquote><pre>
    # <b>mount /dev/sd0a /mnt</b>
    </pre></blockquote>
d946 5
a950 3
  <li>
    Change into that mounted root file system and start the restore process.
    Example:
d952 1
a952 4
    <blockquote><pre>
    # <b>cd /mnt</b>
    # <b>restore -rs 1 -f /dev/rst0</b>
    </pre></blockquote>
d954 8
a961 4
  <li>
    You'll want this new disk to be bootable, use the following to write a
    new MBR to your drive.
    Example:
d963 8
a970 3
    <blockquote><pre>
    # <b>fdisk -i sd0</b>
    </pre></blockquote>
d972 4
a975 4
  <li>
    In addition to writing a new MBR to the drive, you will need to install
    boot blocks to boot from it.
    The following is a brief example:
d977 7
a983 3
    <blockquote><pre>
    # <b>installboot -v -r /mnt sd0</b>
    </pre></blockquote>
d985 6
a990 7
  <li>
    Your new root file system on the fixed disk should be ready enough so
    you can boot it and continue restoring the rest of your file systems.
    Since your operating system is not complete yet, be sure you boot back
    up with single user mode.
    At the shell prompt, issue the following commands to unmount and
    halt the system:
d992 1
a992 4
    <blockquote><pre>
    # <b>umount /mnt</b>
    # <b>halt</b>
    </pre></blockquote>
d994 2
a995 3
  <li>
    Remove the install/boot floppy from the drive and reboot your system.
    At the OpenBSD boot&gt; prompt, issue the following command:
d997 6
a1002 3
    <blockquote><pre>
    boot> <b>bsd -s</b>
    </pre></blockquote>
d1004 5
a1008 2
    The bsd -s will cause the kernel to be started in single user mode which
    will only require a root (/) file system.
d1010 4
a1013 7
  <li>
    Assuming you performed the above steps correctly and nothing has gone
    wrong, you should end up at a prompt asking you for a shell path or press
    return.
    Press return to use sh.
    Next, you'll want to remount root in r/w mode as opposed to read only.
    Issue the following command:
d1015 1
a1015 3
    <blockquote><pre>
    # <b>mount -u -w /</b>
    </pre></blockquote>
d1017 5
a1021 4
  <li>
    Once you have re-mounted in r/w mode, you can continue restoring your
    other file systems.
    Example:
d1023 8
a1030 3
    <blockquote><pre>
    <i>(simple mount table)</i>
    # <b>mount /dev/sd0h /usr; cd /usr; restore -rs 2 -f /dev/rst0</b>
d1032 3
a1034 5
    <i>(more advanced mount table)</i>
    # <b>mount /dev/sd0d /var; cd /var; restore -rs 2 -f /dev/rst0</b>
    # <b>mount /dev/sd0e /home; cd /home; restore -rs 3 -f /dev/rst0</b>
    # <b>mount /dev/sd0h /usr; cd /usr; restore -rs 4 -f /dev/rst0</b>
    </pre></blockquote>
d1036 1
a1036 2
    You could use "<b>restore rvsf</b>" instead of just rsf to view names of
    objects as they are extracted from the dump set.
d1038 3
a1040 6
  <li>
    Finally after you finish restoring all your other file systems to disk,
    reboot into multiuser mode.
    If everything went as planned, your system will be back to the state it
    was in as of your most recent back up tape and ready to use again.
</ul>
d1042 6
a1047 1
<h2 id="MountImage">14.8 - Mounting disk images in OpenBSD</h2>
d1049 1
a1049 6
To mount a disk image (ISO images, disk images created with dd, etc.) in
OpenBSD you must configure a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnd">vnd(4)</a>
device.
For example, if you have an ISO image located at <i>/tmp/ISO.image</i>,
you would take the following steps to mount the image.
d1051 1
a1051 4
<blockquote><pre>
# <b>vnconfig vnd0 /tmp/ISO.image</b>
# <b>mount -t cd9660 /dev/vnd0c /mnt</b>
</pre></blockquote>
d1053 8
a1060 4
Notice that since this is an ISO 9660 image, as used by CDs and DVDs,
you must specify type of <i>cd9660</i> when mounting it.
This is true, no matter what type, e.g.  you must use type <i>ext2fs</i>
when mounting Linux disk images.
d1062 1
a1062 2
<p>
To unmount the image, use the following commands.
d1064 7
a1070 4
<blockquote><pre>
# <b>umount /mnt</b>
# <b>vnconfig -u vnd0</b>
</pre></blockquote>
d1072 2
a1073 3
For more information, refer to the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig">vnconfig(8)</a>
man page.
d1075 3
a1077 7
<h2 id="NegSpace">14.9 - Why does <tt>df(1)</tt> tell me I have over 100% of
my disk used?</h2>

People are sometimes surprised to find they have <i>negative</i>
available disk space, or more than 100% of a filesystem in use, as shown
by
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=df">df(1)</a>.
d1080 9
a1088 8
When a filesystem is created with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs">newfs(8)</a>,
some of the available space is held in reserve from normal users.
This provides a margin of error when you accidently fill the disk, and
helps keep disk fragmentation to a minimum.
Default for this is 5% of the disk capacity, so if the root user has
been carelessly filling the disk, you may see up to 105% of the
available capacity in use.
d1090 1
a1090 4
<p>
If the 5% value is not appropriate for you, you can change it with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs">tunefs(8)</a>
command.
d1092 3
a1094 5
<h2 id="OhBugger">14.10 - Recovering partitions after deleting the
disklabel</h2>

If you have a damaged partition table, there are various things
you can attempt to do to recover it.
d1097 10
a1106 5
Firstly, panic.
You usually do so anyways, so you might as well get it over with.
Just don't do anything stupid.
Panic away from your machine.
Then relax, and see if the steps below won't help you out.
d1109 4
a1112 4
A copy of the disklabel for each disk is saved
in <tt>/var/backups</tt> as part of the daily system maintenance.
Assuming you still have the var partition, you can simply read the
output, and put it back into disklabel.
d1114 9
a1122 5
<p>
In the event that you can no longer see that partition, there are two
options.
Fix enough of the disk so you can see it, or fix enough of the disk so
that you can get your data off.
d1124 5
a1128 3
Depending on what happened, one or other of those may be preferable
(with dying disks you want the data first, with sloppy fingers you can
just have the label)
d1131 13
a1143 9
The first tool you need is
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scan_ffs">scan_ffs(8)</a>
(note the underscore, it isn't called "scanffs").
scan_ffs(8) will look through a disk, and try and find partitions and
also tell you what information it finds about them.
You can use this information to recreate the disklabel.
If you just want <tt>/var</tt> back, you can recreate the partition for
<tt>/var</tt>, and then recover the backed up label and add the rest
from that.
d1146 2
a1147 8
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>
will update both the kernel's understanding of the disklabel, and
then attempt to write the label to disk.
Therefore, even if the area of the disk containing the disklabel is
unreadable, you will be able to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
it until the next reboot.
d1149 1
a1149 3
<h2 id="foreignfs">14.11 - Can I access data on filesystems other than FFS?</h2>
<!-- This article written by Steven Mestdagh,
steven@@openbsd.org, and released under the BSD license -->
d1151 10
a1160 4
Yes.
Other supported filesystems include: ext2/3/4 (Linux), ISO 9660 and UDF
(CD-ROM, DVD media), FAT (MS-DOS and Windows), NFS, NTFS (Windows).
Some of them have limited support; for instance read-only.
d1163 9
a1171 7
We will give a general overview on how to use one of these filesystems under
OpenBSD.
To be able to use a filesystem, it must be mounted.
For details and mount options, please consult the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
manual page, and that of the mount command for the filesystem you will be
mounting, e.g. mount_msdos, mount_ext2fs, ...
d1174 5
a1178 8
First, you must know on which device your filesystem is located.
This can be simply your first hard disk, <tt>wd0</tt> or <tt>sd0</tt>,
but it may be less obvious.
All recognized and configured devices on your system are mentioned in the
output of the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg">dmesg(8)</a>
command: a device name, followed by a one-line description of the device.
For example, my first CD-ROM drive is recognized as follows:
d1180 5
a1184 3
<blockquote><pre>
cd0 at scsibus0 targ 0 lun 0: &lt;COMPAQ, DVD-ROM LTD163, GQH3&gt; SCSI0 5/cdrom removable
</pre></blockquote>
d1186 8
a1193 3
For a much shorter list of available disks, you can use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl">sysctl(8)</a>.
The command
d1195 7
a1201 3
<blockquote><pre>
# <b>sysctl hw.disknames</b>
</pre></blockquote>
d1203 1
a1203 1
will show all disks currently known to your system, for example:
d1205 9
a1213 3
<blockquote><pre>
hw.disknames=sd0:303c29298c315c77,cd0:,fd0:
</pre></blockquote>
d1215 4
a1218 3
At this point, it is time to find out which partitions are on the device, and
in which partition the desired filesystem resides.
Therefore, we examine the device using
d1220 17
a1236 8
disklabel(8)</a>.
The disklabel contains a list of partitions, with a maximum number of 16.
Partition c always indicates the entire device.
Partitions a-b and d-p are used by OpenBSD.
Partitions i-p may be automatically allocated to file systems of other
operating systems.
In this case, I'll be viewing the disklabel of my hard disk, which contains
a number of different filesystems.
d1239 18
a1256 7
<b>NOTE: OpenBSD was installed after the other operating systems</b>
on this system, and during the install a disklabel containing partitions for
the native as well as the foreign filesystems was installed on the disk.
However, if you install foreign filesystems after the OpenBSD disklabel
was already installed on the disk, you need to add or modify them manually
afterwards.
This will be explained in <a href="#foreignfsafter">this subsection</a>.
d1259 4
a1262 1
# <b>disklabel wd0</b>
d1264 4
a1267 16
# using MBR partition 2: type A6 off 20338290 (0x1365672) size 29318625 (0x1bf5de1)
# /dev/rwd0c:
type: ESDI
disk: ESDI/IDE disk
label: ST340016A
duid: d920a43a5a56ad5f
flags:
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 16383
total sectors: 78165360
boundstart: 20338290
boundend: 49656915
drivedata: 0
d1269 2
a1270 16
16 partitions:
#             size        offset  fstype [fsize bsize  cpg]
  a:        408366      20338290  4.2BSD   2048 16384   16 # /
  b:       1638000      20746656    swap
  c:      78165360             0  unused
  d:       4194288      22384656  4.2BSD   2048 16384   16 # /usr
  e:        409248      26578944  4.2BSD   2048 16384   16 # /tmp
  f:      10486224      26988192  4.2BSD   2048 16384   16 # /var
  g:      12182499      37474416  4.2BSD   2048 16384   16 # /home
  i:         64197            63 unknown
  j:      20274030         64260 unknown
  k:       1975932      49656978   MSDOS
  l:       3919797      51632973 unknown
  m:       2939832      55552833  ext2fs
  n:       5879727      58492728  ext2fs
  o:      13783707      64372518  ext2fs
d1272 6
d1280 4
a1283 9
As can be seen in the above output, the OpenBSD partitions are listed first.
Next to them are a number of ext2 partitions and one MSDOS partition, as
well as a few 'unknown' partitions.
On i386 and amd64 systems, you can usually find out more about those using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
utility.
For the curious reader: partition i is a maintenance partition created by
the vendor, partition j is a NTFS partition and partition l is a Linux swap
partition.
d1286 4
a1289 14
Once you have determined which partition it is you want to use, you can
move to the final step: mounting the filesystem contained in it.
Most filesystems are supported in the GENERIC kernel: just have a look at
the kernel configuration file, located in the
<tt>/usr/src/sys/arch/&lt;<i>arch</i>&gt;/conf</tt> directory.
If you want to use one of the filesystems not supported in GENERIC, you
will need to <a href="faq5.html#Options">build a custom kernel</a>.

<p>
When you have gathered the information needed as mentioned above, it is
time to mount the filesystem.
Let's assume a directory <tt>/mnt/otherfs</tt> exists, which we will use as
a mount point where we will mount the desired filesystem.
In this example, we will mount the ext2 filesystem in partition m:
d1292 3
a1294 1
# <b>mount -t ext2fs /dev/wd0m /mnt/otherfs</b>
d1297 2
a1298 3
If you plan to use this filesystem regularly, you may save yourself some
time by inserting a line for it in <tt>/etc/fstab</tt>, for example something
like:
d1301 5
a1305 1
/dev/wd0m /mnt/otherfs ext2fs rw,noauto,nodev,nosuid 0 0
d1308 4
a1311 5
Notice the 0 values in the fifth and sixth field.
This means we do not require the filesystem to be dumped, and checked using
fsck.
Generally, those are things you want to have handled by the native
operating system associated with the filesystem.
d1313 7
a1319 2
<h3 id="foreignfsafter">14.11.1 - The partitions are not in my disklabel!
What should I do?</h3>
d1321 1
a1321 8
If you install foreign filesystems on your system (often the result of
adding a new operating system) after you have already installed OpenBSD,
a disklabel will already be present, and it will not be updated
automatically to contain the new foreign filesystem partitions.
If you wish to use them, you need to add or modify these partitions
manually using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>.
d1324 6
a1329 8
As an example, I have modified one of my existing ext2 partitions: using
Linux's fdisk program, I've reduced the size of the 'o' partition (see
disklabel output above) to 1G.
We will be able to recognize it easily by its starting position
(offset: 64372518) and size (13783707).
Note that these values are sector numbers, and that using sector numbers
(not megabytes or any other measure) is the most exact and safest way of
reading this information.
d1332 2
a1333 3
Before the change, the partition looked like this using OpenBSD's
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
utility (leaving only relevant output):
d1336 1
a1336 8
# <b>fdisk wd0</b>
. . .
Offset: 64372455        Signature: 0xAA55
         Starting       Ending       LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
------------------------------------------------------------------------
 0: 83 4007   1  1 - 4864 254 63 [    64372518:    13783707 ] Linux files*
. . .
d1339 13
a1351 5
As you can see, the starting position and size are exactly those reported
by disklabel(8) earlier.
(Dont' be confused by the value indicated by "Offset": it is referring to
the starting position of the extended partition in which the ext2 partition
is contained.)
d1354 2
a1355 1
After changing the partition's size from Linux, it looks like this:
d1358 10
a1367 8
# <b>fdisk wd0</b>
. . .
Offset: 64372455        Signature: 0xAA55
         Starting       Ending       LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
------------------------------------------------------------------------
 0: 83 4007   1  1 - 4137 254 63 [    64372518:     2104452 ] Linux files*
. . .
d1370 20
a1389 5
Now this needs to be changed using disklabel(8).
For instance, you can issue <tt>disklabel -e wd0</tt>, which will invoke
an editor specified by the EDITOR environment variable (default is vi).
Within the editor, change the last line of the disklabel to match the new
size:
d1391 1
a1391 3
<blockquote><pre>
  o:       2104452      64372518  ext2fs
</pre></blockquote>
d1393 3
a1395 3
Save the disklabel to disk when finished.
Now that the disklabel is up to date again, you should be able to mount
your partitions as described above.
d1398 2
a1399 1
You can follow a very similar procedure to add new partitions.
d1401 3
a1403 1
<h2 id="flashmem">14.12 - Can I use a flash memory device with OpenBSD?</h2>
d1405 3
a1407 3
<h3 id="flashmemUSB">14.12.1 - Flash memory as a portable storage device</h3>
<!-- This article written by Steven Mestdagh,
steven@@openbsd.org, and released under the BSD license -->
d1409 3
a1411 6
Normally, the memory device should be recognized upon plugging it into a
port of your machine.
Shortly after inserting it, a number of messages are written to the console
by the kernel.
For instance, when I plug in my USB flash memory device, I see the following
on my console:
d1414 1
a1414 6
umass0 at uhub1 port 1 configuration 1 interface 0
umass0: LEXR PLUG DRIVE LEXR PLUG DRIVE, rev 1.10/0.01, addr 2
umass0: using SCSI over Bulk-Only
scsibus2 at umass0: 2 targets
sd0 at scsibus2 targ 1 lun 0: &lt;LEXAR, DIGITAL FILM, /W1.&gt; SCSI2 0/direct removable
sd0: 123MB, 512 bytes/sec, 251904 sec total
d1417 12
a1428 12
These lines indicate that the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=umass">umass(4)</a>
(USB mass storage) driver has been attached to the memory device, and that
it is using the SCSI system.
The last two lines are the most important ones: they are saying to which
device node the memory device has been attached, and what the total amount of
storage space is.
If you somehow missed these lines, you can still see them afterwards with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg">dmesg(8)</a>
command.
The reported CHS geometry is a rather fictitious one, as the flash memory
is being treated like any regular SCSI disk.
d1431 7
a1437 1
We will discuss two scenarios below.
d1439 3
a1441 1
<h4>The device is new/empty and you want to use it with OpenBSD only</h4>
d1443 5
a1447 6
You will need to initialize a disklabel onto the device, and create at
least one partition.
Please read <a href="#disklabel">Using OpenBSD's disklabel</a> and the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>
manual page for details about this.
d1449 6
a1454 3
<p>
In this example I created just one partition <i>a</i> in which I will place
a FFS filesystem:
d1456 3
a1458 9
<blockquote><pre>
# <b>newfs sd0a</b>
Warning: inode blocks/cyl group (125) >= data blocks (62) in last
    cylinder group. This implies 1984 sector(s) cannot be allocated.
/dev/rsd0a:     249856 sectors in 122 cylinders of 64 tracks, 32 sectors
        122.0MB in 1 cyl groups (122 c/g, 122.00MB/g, 15488 i/g)
super-block backups (for fsck -b #) at:
 32,
</pre></blockquote>
d1460 1
a1460 3
Let's mount the filesystem we created in the <i>a</i> partition on
<tt>/mnt/flashmem</tt>.
Create the mount point first if it does not exist.
d1462 4
a1465 4
<blockquote><pre>
# <b>mkdir /mnt/flashmem</b>
# <b>mount /dev/sd0a /mnt/flashmem</b>
</pre></blockquote>
d1467 3
a1469 2
<h4>You received the memory device from someone with whom you want to
exchange data</h4>
d1471 2
a1472 4
There is a considerable chance the other person is not using OpenBSD, so there
may be a foreign filesystem on the memory device.
Therefore, we will first need to find out which partitions are on the device,
as described in <a href="#foreignfs">FAQ 14 - Foreign Filesystems</a>.
d1474 4
a1477 20
<blockquote><pre>
# <b>disklabel sd0</b>
# /dev/rsd0c:
type: SCSI
disk: SCSI disk
label: DIGITAL FILM
flags:
bytes/sector: 512
sectors/track: 32
tracks/cylinder: 64
sectors/cylinder: 2048
cylinders: 123
total sectors: 251904
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # microseconds
track-to-track seek: 0  # microseconds
drivedata: 0
d1479 4
a1482 5
16 partitions:
#             size        offset  fstype [fsize bsize  cpg]
  c:        251904             0  unused      0     0      # Cyl     0 -   122
  i:        250592            32   MSDOS                   # Cyl     0*-   122*
</pre></blockquote>
d1484 3
a1486 3
As can be seen in the disklabel output above, there is only one partition
<i>i</i>, containing a FAT filesystem created on a Windows machine.
As usual, the <i>c</i> partition indicates the entire device.
d1488 3
a1490 3
<p>
Let's now mount the filesystem in the <i>i</i> partition on
<tt>/mnt/flashmem</tt>.
d1492 3
a1494 3
<blockquote><pre>
# <b>mount -t msdos /dev/sd0i /mnt/flashmem</b>
</pre></blockquote>
d1496 4
a1499 1
Now you can start using it just like any other disk.
d1501 4
a1504 7
<blockquote>
<b>WARNING:</b>
You should <b>always unmount</b> the filesystem <b>before unplugging</b> the
memory device.
If you don't, the filesystem may be left in an inconsistent state, which
may result in data corruption.
</blockquote>
d1506 3
a1508 2
Upon detaching the memory device from your machine, you will again see the
kernel write messages about this to the console:
d1510 4
a1513 6
<blockquote><pre>
umass0: at uhub1 port 1 (addr 2) disconnected
sd0 detached
scsibus2 detached
umass0 detached
</pre></blockquote>
d1515 3
a1517 1
<h3 id="flashmemBoot">14.12.2 - Flash memory as bootable storage</h3>
d1519 7
a1525 2
<!-- This article written by Nick Holland
nick@@openbsd.org, and released under the BSD license -->
d1527 4
a1530 8
One can also use flash memory in various forms as bootable disk with
OpenBSD.
This can be done with both USB devices (assuming your computer can
boot from a USB flash device, not all can), or with a non-USB (i.e.,
CF) device with an IDE or SATA adapter.
(Non-USB devices attached with a USB adapter are treated as USB devices.)
In some cases, you may actually use a device in both ways (load the
media in a USB adapter, but run it in an IDE adapter).
d1532 3
a1534 7
<p>
A flash device attached to a USB port will show up as a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>
SCSI-like device.
When attached to an IDE adapter, it will show up as a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>
device.
d1536 3
a1538 6
<p>
In the case of flash media in an IDE adapter, it can be booted from
any system that could boot from an IDE hard disk on the same adapter.
In every sense, the system sees the flash media as an IDE disk.
Simply configure the hardware appropriately, then install OpenBSD
to the flash disk as normal.
d1540 2
a1541 14
<p>
In the case of booting from a USB device, your system must be
able to boot from the USB device without being distracted by
other devices on the system.
Note that if your intention is to make a portable boot environment on a
USB device, you really want to use <a href="#DUID">DUIDs</a>, rather
than the traditional <tt>/dev/sd0X</tt> notation.
The USB device will show up as a SCSI disk, sometimes sd0.
Without DUIDs, if you plug this device into a system which already has a few
SCSI-like disks (i.e., devices attached to an ahci(4) interface) on it,
it will probably end up with a different
identifier, which will complicate carrying the flash device from system
to system, as you would have to update <tt>/etc/fstab</tt>.
Using DUIDs completely resolves this issue.
d1543 7
a1549 2
<p>
Some notes:
d1551 3
a1553 6
<ul>
  <li><b>Speed:</b>
    In general, flash devices are much slower than hard disks, especially when
    it comes to writing.
    Using <a href="#SoftUpdates">soft updates</a> will help this
    considerably, as will using the "noatime" mount option.
d1555 4
a1558 13
  <li><b>"Write fatigue":</b>
    Much has been written about the finite number of times an individual
    flash cell can be rewritten before failure.
    Practically speaking, however, there are many ways a flash device can
    fail, write fatigue is just one of them.
    Modern flash devices will verify writes, and in the event of failure,
    will automatically remap the failed sectors with one of the many spare
    sectors.
    Most users with most flash devices will not have to worry about "write
    fatigue".
    You would probably experience more down time due to failure of "clever"
    tricks done to avoid writing to the flash drive than you will by just
    using the drives as read-write media.
d1560 3
a1562 8
  <li><b>Reliability:</b>
    The fact that flash media has no moving parts has prompted many people
    to assume the flash media is inherently more reliable than hard disks.
    It is not wise to assume that switching to flash means you
    don't need to worry about data loss or drive failure.
    People have reported considerable variation in flash media quality,
    it is probably best to consider flash storage as a silent and low-power
    alternative to disk rather than a failure-free storage media.
d1564 5
a1568 6
  <li><b>Creating a bootable USB flash drive:</b>
    While a USB device can only be booted on a machine which can boot from
    USB drives, it can be created on any machine with supported USB
    hardware.
    You will, of course, be unable to test your work until you can get to a
    USB bootable system.
d1570 2
a1571 4
  <li><b>Going from IDE to USB interfaces:</b>
    Since flash media can be readable and writable through USB, IDE and
    other adapters, you can create bootable media with one type of adapter
    but maintain or use it with another type of adapter.
d1573 5
a1577 30
  <li><b>Mixing OpenBSD and other partitions on one device:</b>
    OpenBSD treats the flash disk as any other disk so one can use
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
    to partition a flash device, as you would any hard disk.
    You can then have OpenBSD file systems on one partition, and use another
    partition for another file system, for example, FAT32.
    However, not all OSs treat USB devices as "equals".
    Windows, at least, will not attempt to use or create a partition that
    doesn't start at the beginning of the device, nor will the Windows
    partitioning tools allow you to partition the disk, though it will
    respect existing partitions.
    So, if you wish to create a USB flash drive that is bootable with
    OpenBSD, but also functions as a FAT32-capable device on other OSs, you
    would want to do something like this:

    <ol>
    <li>Partition the media with OpenBSD's fdisk, creating a partition
      of the type you desire for Windows to use at the beginning of the
      disk, and an OpenBSD partition at the end of the disk.
    <li>Install OpenBSD as normal to the OpenBSD fdisk partition, don't
      forget to flag the OpenBSD partition as "Active" for booting.
    <li>Format the other partition.
      This can be (and perhaps should be) done on the "target" OS
      (Windows, in this case).
    </ol>

    Note that if the other partition's type is chosen appropriately, it is
    possible to have OpenBSD access both partitions on the device.
    So, a Windows user could populate the FAT32 partition with MP3 files
    which could be played when they booted from the OpenBSD partition.
d1580 3
a1582 2
<h3 id="flashmemLive">14.12.3 - How do I create a bootable "live" USB
device?</h3>
d1584 4
a1587 6
It is very easy to create a bootable USB flash (or other!) drive that
can be used as a "live" OpenBSD system without installing OpenBSD on
the local hard disk of a machine.
Obviously, the target machine must be bootable from a USB device, but
the initial load can actually be done from any machine with a USB
interface.
d1590 7
a1596 25
Some reasons you may want to do this:

<ul>
  <li>A portable, secure "machine" you can carry with you in your pocket.
  <li>Fix problems in OpenBSD and other installs with tools that aren't
    available with <a href="faq4.html#bsd.rd">bsd.rd</a>.
  <li>Evaluate hardware for OpenBSD compatibility at the point of purchase.
  <li>Install machines that lack any other form of boot media.
  <li>Collect <a href="faq4.html#SendDmesg">dmesg</a> outputs from your
    friends' computers!
    As OpenBSD's dmesg is useful for identifying hardware, this can be a
    good way to prep for the install of <b>other</b> OSs on a machine -- make
    sure you have all the needed drivers before starting.
</ul>

Creating such a "live OpenBSD drive" is simple.
<ul>
  <li>Mount your USB drive to the machine you are installing from.
  <li>Boot your favorite OpenBSD install media.
  <li><a href="faq4.html">Install</a> as normal, being careful to select
    your flash drive as the install target.
  <li>Boot from your newly created USB device.
</ul>

That's it!
d1599 8
a1606 2
There are some things you may want to do after the install to improve
your results:
d1608 3
a1610 41
<ul>
  <li>
    Install all packages and utilities you are likely to wish to have available.
  <li>
    Different target machines will likely have different NICs.
    You could create a bunch of
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
    hostname.if(5)</a>
    files in <tt>/etc</tt>, each containing just <tt>dhcp</tt>, for all the
    NICs you are likely to encounter (fxp0, re0, rl0, bge0, bnx0, em0, etc.)
    on USB-bootable machines, plus maybe sample wireless config files as
    well.
    OpenBSD will ignore all hostname.if(5) files for devices not present
    at boot time.
  <li>
    You may wish to have a copy of the install files and maybe any
    desired package .tgz files so you can use the drive as an install
    media (boot bsd.rd instead of letting it boot normally).
  <li>
    On many machines, X will "Just Work" with no config file, but you may
    wish to collect X config files for those systems that require them.
  <li>
    <a href="#SoftUpdates">Soft updates</a>
    will be something you will want to use.
  <li>
    For maximum flexibility, you probably want to use
    <a href="../i386.html">i386</a> rather than
    <a href="../amd64.html">amd64</a>.
    However, if you wish to use it as an install media, you could have an
    amd64 bsd.rd and install files in addition to i386.
  <li>
    Use <a href="#DUID">DUIDs</a> to identify your partitions (default).
  <li>
    You may find it desirable to have a FAT partition on the USB drive,
    create it as detailed <a href="#flashmemBoot">above</a>.
  <li>
    You may wish to use
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">
    softraid(4)</a>
    to encrypt a data partition.
</ul>
d1612 3
a1614 18
<h2 id="altroot">14.13 - Duplicating your root partition: altroot</h2>

OpenBSD provides an <tt>/altroot</tt> facility in the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=daily">daily(8)</a>
scripts.
If the environment variable <tt>ROOTBACKUP=1</tt> is set in either
<tt>/etc/daily.local</tt> or root's
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=crontab">crontab(5)</a>,
and a partition is specified in
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>
as mounting to <tt>/altroot</tt> with the mount options of <tt>xx</tt>, every
night the entire contents of the root partition will be duplicated to the
<tt>/altroot</tt> partition.

<p>
Assuming you want to back up yur root partition to the partition specified
by the <a href="faq14.html#DUID">DUID</a> <tt>bfb4775bb8397569.a</tt>,
add the following to <tt>/etc/fstab</tt>
d1617 1
a1617 1
bfb4775bb8397569.a /altroot ffs xx 0 0
d1620 1
a1620 1
and set the appropriate environment variable in <tt>/etc/daily.local</tt>:
d1623 1
a1623 1
# <b>echo ROOTBACKUP=1 >>/etc/daily.local</b>
d1626 12
a1637 9
As the <tt>/altroot</tt> process will capture your <tt>/etc</tt> directory, this
will make sure any configuration changes there are updated daily.
This is a "disk image" copy done with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd">dd(1)</a>
not a file-by-file copy, so your <tt>/altroot</tt> partition should be at least
the same size as your root partition.
Generally, you will want your <tt>/altroot</tt> partition to be on a different
disk that has been configured to be fully bootable should the primary
disk fail.
d1639 8
a1646 1
<h2 id="softraid">14.14 - How do I use softraid?</h2>
d1648 2
a1649 14
The
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">softraid(4)</a>
subsystem works by emulating a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scsibus">scsibus(4)</a>
with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>
devices made by combining a number of OpenBSD
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a> partitions into a virtual disk with the desired RAID level,
such as RAID0, RAID1, RAID4, RAID5 or crypto.
Note that only RAID0, RAID1, RAID5 and crypto are fully supported at the moment.
This virtual disk is treated as any other disk, first partitioned with
<a href="#fdisk">fdisk</a> (on fdisk platforms) and then
<a href="#disklabel">disklabels</a> are created as usual.
d1651 16
a1666 1
<h4>Some words on RAID in general:</h4>
d1668 16
a1683 43
<ul>
  <li>
    Before implementing any RAID solution, understand what it will and
    will not do for you.
    It is not a replacement for a good backup strategy.
    It will not keep your system running through every hardware failure.
    It may not keep your system running through a simple disk failure.
    In the case of software RAID, it won't guarantee the ability to boot
    from the surviving drive if your computer could not otherwise do so.
  <li>
    Before going into production, you must understand how you use your
    RAID solution to recover from failures.
    The time to do this is <b>before</b> your system has had a failure event.
    Poorly implemented RAID will often cause more down time than it will
    prevent.
    This is even more true if it has caused you to become complacent on your
    backups or other disaster planning.
  <li>
    The bigger your RAIDed partitions are, the longer it will take to
    recover from an "event."
    In other words, this is an especially bad time to allocate all of your
    cheap 500GB drives just because they are there.
    Remirroring 500GB drives takes a much longer time than mirroring the
    4GB that you actually use.
    One advantage of software mirroring is one can control how much of
    those "huge" drives is actually used in a RAID set.
  <li>
    There is a reflex to try to RAID as much of your system as possible.
    Even hardware which CAN boot from RAIDed drives will often have difficulty
    determining when a drive has failed to avoid booting from it.
    OpenBSD's <a href="#altroot">altroot</a> system can actually be better
    for some applications, as it provides a copy of old configuration
    information in case a change does not work quite as intended.
  <li>
    RAID provides redundancy only for the disk system.
    Many applications need more redundancy than just the disks, and for some
    applications, RAID can be just added complication, rather than a real
    benefit.
    An example of this is a <a href="faq6.html#CARP">CARP'd</a> set of
    firewalls provide complete fail over redundancy.
    In this case, adding RAID (either via hardware or softraid) is just
    added complication.
</ul>
d1685 1
a1685 1
<h3 id="softraidDI">14.14.1 - Installing to a mirror</h3>
d1687 9
a1695 11
The tools to assemble your softraid system are in the basic OpenBSD
install (for adding softraid devices after install), but they are
also available on the CD-ROM and <a href="faq4.html#bsd.rd">bsd.rd</a>
for installing your system to a softraid setup.
This section covers installing OpenBSD to a mirrored pair of hard drives,
and assumes familiarity with the <a href="faq4.html">installation process</a>
and ramdisk kernel.
Disk setup may vary from platform to platform, and
<b>booting from softraid devices isn't supported on all of them</b>.
It's currently only possible to boot from RAID1, RAID5 and crypto volumes
on i386, amd64 and sparc64.
d1698 7
a1704 8
The installation process will be a little different than the standard
OpenBSD install, as you will want to drop to the shell and create your
softraid(4) drive before doing the install.
Once the softraid(4) disk is created, you will perform the install relatively
normally, placing the partitions you wish to be RAIDed on the newly
configured drive.
If it sounds confusing at first, don't worry.
All the steps will be explained in detail.
d1707 5
a1711 12
The install kernel only has the <tt>/dev</tt> entries for one
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>
device and one
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>
device on boot, so you will need to manually create more disk devices
if your desired softraid setup requires them.

This process is normally done automatically by the installer, but you
haven't yet run the installer, and you will be adding a disk that didn't
exist at boot.
For example, if we needed to support a second wd(4) device for a mirrored
setup, you could do the following from the shell prompt:
d1714 1
a1714 4
Welcome to the OpenBSD/amd64 X.X installation program.
(I)nstall, (U)pgrade, (A)utoinstall or (S)hell? <b>s</b>
# <b>cd /dev</b>
# <b>sh MAKEDEV wd1</b>
d1717 3
a1719 9
You now have full support for the <tt>wd0</tt> and <tt>wd1</tt> devices.

<p>
Next, we'll initialize the disks with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
and create the softraid partition with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>.
An "a" partition will be made on both of the drives for the new RAID device.
d1722 1
a1722 13
# <b>fdisk -iy wd0</b>
Writing MBR at offset 0.
# <b>fdisk -iy wd1</b>
Writing MBR at offset 0.
# <b>disklabel -E wd0</b>
Label editor (enter '?' for help at any prompt)
> <b>a a</b>
offset: [2104515]
size: [39825135] <b>*</b>
FS type: [4.2BSD] <b>RAID</b>
> <b>w</b>
> <b>q</b>
No label changes.
d1725 15
a1739 3
You'll notice that we initialized both disks, but only created a partition
layout on the first drive.
That's because you can easily import the drive's configuration directly with the
d1741 1
a1741 1
disklabel(8)</a> command.
d1743 9
a1751 7
<blockquote><pre>
# <b>disklabel wd0 > layout</b>
# <b>disklabel -R wd1 layout</b>
# <b>rm layout</b>
</pre></blockquote>

The "layout" file in this example can be named anything.
d1754 3
a1756 3
Next, create the mirror with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl">bioctl(8)</a>
command.
d1759 8
a1766 1
# <b>bioctl -c 1 -l /dev/wd0a,/dev/wd1a softraid0</b>
d1769 5
a1773 6
Note that if you are creating multiple RAID devices, either on one disk
or on multiple devices, you're always going to be using the <tt>softraid0</tt>
virtual disk interface driver.
You won't be using "softraid1" or others.
The "softraid0" there is a virtual RAID controller, and you can hang many
virtual disks off this controller.
d1776 1
a1776 4
The new pseudo-disk device will show up as <tt>sd0</tt> here, assuming there
are no other sd(4) devices on your system.
This device will now show on the system console and dmesg as a newly
installed device:
d1779 8
a1786 3
scsibus1 at softraid0: 1 targets
sd0 at scsibus2 targ 0 lun 0: &lt;OPENBSD, SR RAID 1, 005&gt; SCSI2 0/direct fixed
sd0: 10244MB, 512 bytes/sec, 20980362 sec total
d1789 5
a1793 11
This shows that we now have a new SCSI bus and a new disk, <tt>sd0</tt>.
This volume will be automatically detected and assembled from this point
onwards when the system boots.

<p>
Because the new device probably has a lot of garbage where you expect
a master boot record and disklabel, zeroing the first chunk of it is
highly recommended.
Be <i>very careful</i> with this command; issuing it on the wrong device
could lead to a very bad day.
This assumes that the new softraid device was created as <tt>sd0</tt>.
d1796 1
a1796 1
# <b>dd if=/dev/zero of=/dev/rsd0c bs=1m count=1</b>
d1799 3
a1801 6
You are now ready to install OpenBSD on your system.
Perform the install as normal by invoking "install" or "exit" at the boot
media console.
Create all the partitions on your new softraid disk (<tt>sd0</tt> in our
example here) that should be there, rather than on <tt>wd0</tt> or <tt>wd1</tt>
(the non-RAID disks).
d1804 7
a1810 3
Now you can reboot your system and, if you have done things properly, it
will automatically assemble your RAID set and mount the appropriate
partitions.
d1812 6
a1817 2
<p>
To check on the status of your mirror, issue the following command:
d1820 6
a1825 1
# <b>bioctl sd0</b>
d1828 15
a1842 1
A nightly cron job to check the status might also be a good idea.
d1844 1
a1844 1
<h3 id="softraidFDE">14.14.2 - Full disk encryption</h3>
d1846 6
a1851 7
Much like RAID, full disk encryption in OpenBSD is handled by the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">softraid(4)</a>
subsystem and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl">bioctl(8)</a>
command.
This section covers installing OpenBSD to a single encrypted disk, and is a
very similar process to the previous one.
d1854 2
a1855 1
Select (S)hell at the initial prompt.
d1858 7
a1864 2
Welcome to the OpenBSD/amd64 X.X installation program.
(I)nstall, (U)pgrade, (A)utoinstall or (S)hell? <b>s</b>
d1867 3
a1869 6
From here, you'll be given a shell within the live environment to manipulate
the disks.
For this example, we will install to the <tt>wd0</tt> SATA drive, erasing all
of its previous contents.
You may want to write random data to the drive first with something like the
following:
d1872 2
a1873 1
# <b>dd if=/dev/random of=/dev/rwd0c bs=1m</b>
d1876 2
a1877 4
This can be a very time-consuming process, depending on the speed of your
CPU and disk, as well as the size of the disk.
If you don't write random data to the whole device, it may be possible for an
adversary to deduce how much space is actually being used.
d1879 4
a1882 6
<p>
Next, we'll initialize the disk with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
and create the softraid partition with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>.
d1885 19
a1903 12
# <b>fdisk -iy wd0</b>
Writing MBR at offset 0.
# <b>disklabel -E wd0</b>
Label editor (enter '?' for help at any prompt)
> <b>a a</b>
offset: [2104515]
size: [39825135] <b>*</b>
FS type: [4.2BSD] <b>RAID</b>
> <b>w</b>
> <b>q</b>
No label changes.
</pre></blockquote>
d1905 4
a1908 11
We'll use the entire the disk, but note that the encrypted device can be
split up into multiple mountpoints as if it were a regular hard drive.
Now it's time to build the encrypted device on our "a" partition.

<blockquote><pre>
# <b>bioctl -c C -l /dev/wd0a softraid0</b>
New passphrase:
Re-type passphrase:
sd0 at scsibus2 targ 1 lun 0: &lt;OPENBSD, SR CRYPTO, 005&gt; SCSI2 0/direct fixed
sd0: 19445MB, 512 bytes/sector, 39824607 sectors
softraid0: CRYPTO volume attached as sd0
d1911 3
a1913 2
All data written to <tt>sd0</tt> will now be encrypted (with AES in XTS mode)
by default.
d1916 2
a1917 2
As in the previous example, we'll overwrite the first megabyte of our new
pseudo-device.
d1920 1
a1920 1
# <b>dd if=/dev/zero of=/dev/rsd0c bs=1m count=1</b>
d1923 1
a1923 2
Type <tt>exit</tt> to return to the main installer, then choose this new
device as the one for your installation.
d1925 7
a1931 5
<blockquote><pre>
[...]
Available disks are: wd0 sd0.
Which disk is the root disk? ('?' for details) [wd0] <b>sd0</b>
</pre></blockquote>
d1933 2
a1934 30
You will be prompted for the passphrase on startup, but all other operations
should be handled transparently.

<h3 id="softraidCrypto">14.14.3 - Encrypting external disks</h3>

As we just illustrated, cryptographic softraid(4) volumes are set up rather
simply.
This section explains how you might do so for an external USB flash drive,
but can be applied to any disk device.
If you already read the section on full disk encryption, this should be very
familiar.
An outline of the steps is as follows:

<ul>
  <li>Overwrite the drive's contents with random data
  <li>Create the desired RAID-type partition with disklabel(8)
  <li>Encrypt the drive (note that the initial creation of the container and
    attaching the container are done with the same bioctl(8) command)
  <li>Zero the first megabyte of the new psuedo-partition
  <li>Create a filesystem on the pseudo-device with
  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs">newfs(8)</a>
  <li>Unlock and
  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
    the new pseudo-device
  <li>Access the files as needed
  <li>Unmount the drive and detach the encrypted container
</ul>

A quick example runthrough of the steps follows, with <tt>sd0</tt> being
the USB drive.
d1937 4
a1940 15
# <b>dd if=/dev/random of=/dev/rsd0c bs=1m</b>
# <b>fdisk -iy sd0</b>
# <b>disklabel -E sd0</b> (create an "a" partition, see above for more info)
# <b>bioctl -c C -l /dev/sd0a softraid0</b>
New passphrase:
Re-type passphrase:
softraid0: CRYPTO volume attached as sd1
# <b>dd if=/dev/zero of=/dev/rsd1c bs=1m count=1</b>
# <b>disklabel -E sd1</b> (create an "i" partition, see above for more info)
# <b>newfs /dev/sd1i</b>
# <b>mkdir -p /mnt/secretstuff</b>
# <b>mount /dev/sd0i /mnt/secretstuff</b>
# <b>mv planstotakeovertheworld.txt /mnt/secretstuff/</b>
# <b>umount /mnt/secretstuff</b>
# <b>bioctl -d sd1</b>
d1943 1
a1943 2
Next time you need to access the drive, simply use bioctl(8) to attach it
and then repeat the last four commands as needed.
d1945 2
a1946 5
<p>
The man page for this looks a little scary, as the <tt>-d</tt> command is
described as "deleting" the volume.
In the case of crypto, however, it just deactivates encrypted volume so it
can't be accessed until it is activated again with the passphrase.
d1948 8
a1955 23
<p>
Many other options are available with softraid, and new features are
being added and improvements made, so do consult the aforementioned man
pages for detailed information.

<h4>I forgot my passphrase!</h4>

Sorry.
This is real encryption, there's not a back door or magic unlocking
tool.
If you lose your passphrase, your data on your softraid crypto volume
will be unusable.

<h3 id="softraidDR">14.14.4 - Disaster recovery</h3>

This is the section you want to skip over, but don't.
This is the reason for RAID -- if disks never failed, you wouldn't add
the complexity of RAID to your system!
Unfortunately, as failures are very difficult to list comprehensively,
there is a strong probability that the event you experience won't be
described exactly here, but if you take the time to understand the
strategies here, and the WHY, hopefully you can use them to recover
from whatever situations come your way.
d1958 6
a1963 7
Keep in mind, failures are often not simple.
The author of this article had a drive in a hardware RAID solution develop
a short across the power feed, which in addition to the drive itself,
also required replacing the power supply, the RAID enclosure and a power
supply on a second computer he used to verify the drive was actually
dead, and the data from backup as he didn't properly configure the
replacement enclosure.
d1966 5
a1970 3
The steps needed for system recovery can be performed in
<a href="faq8.html#LostPW">single user mode</a>, or from the
<a href="faq4.html#bsd.rd">install kernel (bsd.rd)</a>.
d1973 13
a1985 6
If you plan on practicing softraid recovery (and we <b>highly</b> suggest you
do so!), you may find it helpful to zero a drive you remove from the
array before you attempt to return it to the array.
Not only does this more accurately simulate replacing the drive with a
new one, it will avoid the confusion that can result when the system
detects the remains of a softraid array.
d1988 1
a1988 5
Recovery from a failure will often be a two-stage event -- the first
stage is bringing the system back up to a running state, the second
stage is to rebuild the failed array.
The two stages may be separated by some time if you don't have a
replacement drive handy.
d1990 6
a1995 1
<h4>Recovery from drive failure: secondary</h4>
d1997 13
a2009 2
This is relatively easy.
You may have to remove the failed disk to get the system back up.
d2011 8
a2018 6
<p>
When you are ready to repair the system, you will replace the failed
drive, create the RAID and other disklabel partitions, then rebuild the
mirror.
Assuming your RAID volume is <tt>sd0</tt>, and you are replacing the
failed device with <tt>wd1m</tt>, the following process should work:
d2020 6
a2025 5
<ul>
  <li>Boot the system back up.
  <li>Create appropriate partitions on your new drive
  <li>Rebuild your RAID partition and reboot:
</ul>
d2027 4
a2030 4
<blockquote><pre>
# <b>bioctl -R /dev/wd1m sd0</b>
# <b>reboot</b>
</pre></blockquote>
d2032 14
a2045 1
<h4>Recovery from drive failure: primary</h4>
d2047 10
a2056 5
Many PC-like computers can not boot from a second drive if the primary
drive has failed, but still attached unless it is so dead it isn't
detected.
Many can not boot from a drive that isn't the "primary", even if there
is no other drive.
d2058 5
a2062 8
<p>
In general, if your primary drive fails, you will have to remove it, and
in many cases "promote" your secondary drive to primary configuration
before the system will boot.
This may involve re-jumpering the disk, plugging the disk into another
port or some other variation.
Of course, what is on the secondary disk has to not only include your RAID
partition, but also has to be functionally bootable.
d2064 2
a2065 3
<p>
Once you have the system back up on the secondary disk and a new
disk in place, you rebuild as above.
d2067 6
a2072 5
<h4>Recovery from "shuffling" your disks</h4>

What if you have four disks in your system, say, sd0, sd1, sd2, and sd3,
and for reasons of hardware replacement or upgrade, you end up with the
drives out of the machine, and lose track of which was which?
d2075 1
a2075 5
Fortunately, softraid handles this very well, it considers the disks
"roaming," but will successfully rebuild your arrays.
However, the boot disk in the machine has to be bootable, and if you
just made changes in the root partition before doing this, you probably
want to be sure you didn't boot from your altroot partition by mistake.
d2077 12
a2088 1
<h3 id="softraidNotes">14.14.5 - Softraid notes</h3>
d2090 8
a2097 1
<h4>Complications when other sd(4) disks exist</h4>
d2099 1
a2099 8
Softraid disks are assembled <i>after</i> all other IDE, SATA, SAS and
SCSI disks are attached.
As a result, if the number of sd(4) devices changes (either by adding
or removing devices -- or if a device fails), the identifier of the
softraid disk will change.
For this reason, it's important to use <a href="faq14.html#DUID">DUIDs</a>
(Disklabel Unique Identifiers) rather than drive names in your
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a> file.
d2101 3
a2103 1
<h4>Three disk RAID1?</h4>
d2105 41
a2145 7
Softraid supports RAID1 with more than two "chunks," and the man page
examples show a three-disk RAID1 configuration.
RAID1 simply duplicates the data across all the chunks of storage.
Two gives full redundancy, three gives additional fault tolerance.
The advantage of RAID1 with three (or more) disks/chunks is that, in
event of one disk failure, you still have complete redundancy.
Think of it as a hot spare that doesn't need time to rebuild!
@


1.286
log
@remove section on optimizing disk performance:
soft updates already have their separate section,
optimizing namei cache is very old and was largely unmaintained.

remove section on async mounts: if you found out about them,
you'll likely have found the man page which was just quoted.
@
text
@d401 4
d422 1
a422 1
    The 
@


1.285
log
@Remove very long, at times very outdated, description of boot process
for i386/amd64 and just refer to the relevant man pages. Nuke pointless
extra section on installboot. Don't pretend we document both i386 and
amd64 and just use amd64 as a proxy. Update anchor to reflect this.
@
text
@d37 1
a37 3
<li><a href="#InstBoot"        >14.6 - Installing bootblocks (most, but not
                                all platforms)</a>
<li><a href="#LargeDrive"      >14.7 - What are the issues regarding large
d39 1
a39 1
<li><a href="#Backup"          >14.8 - Preparing for disaster: backing up
d41 2
a42 2
<li><a href="#MountImage"      >14.9 - Mounting disk images in OpenBSD</a>
<li><a href="#NegSpace"        >14.10 - Why does <tt>df(1)</tt> tell me
d44 1
a44 1
<li><a href="#OhBugger"        >14.11 - Recovering partitions after deleting
d46 1
a46 1
<li><a href="#foreignfs"       >14.12 - Can I access data on filesystems other
d49 1
a49 1
  <li><a href="#foreignfsafter">14.12.1 - The partitions are not in my
d52 1
a52 1
<li><a href="#flashmem"        >14.13 - Can I use a flash memory device with
d55 1
a55 1
  <li><a href="#flashmemUSB"   >14.13.1 - Flash memory as a portable storage
d57 2
a58 2
  <li><a href="#flashmemBoot"  >14.13.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.13.3 - How can I make a "live" bootable
d61 1
a61 7
<li><a href="#DiskOpt"         >14.14 - Optimizing disk performance</a>
  <ul>
  <li><a href="#Optsoftu"      >14.14.1 - Soft updates</a>
  <li><a href="#Optmaxvnodes"  >14.14.2 - Size of the namei(9) cache</a>
  </ul>
<li><a href="#Async"           >14.15 - Why aren't we using async mounts?</a>
<li><a href="#altroot"         >14.16 - Duplicating your root partition:
d63 1
a63 1
<li><a href="#softraid"        >14.17 - How do I use softraid?</a>
d65 5
a69 5
  <li><a href="#softraidDI"    >14.17.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.17.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.17.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.17.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.17.5 - Softraid notes</a>
d193 1
a193 1
<h2 id="fdisk">14.2 - Using fdisk(8)</h2>
d1627 1
a1627 96
<h2 id="DiskOpt">14.13 - Optimizing disk performance</h2>

Disk performance is a significant factor in the overall speed of your computer.
It becomes increasingly important when your computer is hosting a
multi-user environment (users of all kinds, from those who log-in
interactively to those who see you as a file-server or a web-server).
Data storage constantly needs attention, especially when your partitions
run out of space or when your disks fail.
OpenBSD has a few options to increase the speed of your disk operations.

<ul>
  <li><a href="#Optsoftu">Soft updates</a>
  <li><a href="#Optmaxvnodes">Size of the namei(9) cache</a>
</ul>

<h3 id="Optsoftu">14.13.1 - Soft updates</h3>

An important tool that can be used to speed up your system is soft updates.
One of the slowest operations in the traditional BSD file system is
updating metainfo (which happens, among other times, when you create or
delete files and directories).
Soft updates attempts to update metainfo in RAM instead of writing to the
hard disk each and every single metainfo update.
Another effect of this is that the metainfo on disk should always be
complete, although not always up to date.
You can read more about soft updates in the
<a href="#SoftUpdates">soft updates FAQ</a> entry.

<h3 id="Optmaxvnodes">14.13.2 - Size of the namei(9) cache</h3>

The name-to-inode translation (a.k.a.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=namei">namei(9)</a>)
cache controls the speed of pathname to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inode">inode(5)</a>
translation.
A reasonable way to derive a value for the cache, should a large number of
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=namei">namei(9)</a>
cache misses be noticed with a tool such as
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=systat">systat(1)</a>,
is to examine the system's current computed value with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl">sysctl(8)</a>,
(which calls this parameter <tt>kern.maxvnodes</tt>) and to increase this
value until either the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=namei">namei(9)</a>
cache hit rate improves or it is determined that
the system does not benefit substantially from an increase in the size of the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=namei">namei(9)</a>
cache.
After the value has been determined, you can set it at system startup time with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf">
sysctl.conf(5)</a>.

<h2 id="Async">14.14 - Why aren't we using async mounts?</h2>

Question: "I simply do "mount -u -o async /" which makes one package I use
(which insists on touching a few hundred things from time to time) usable.
Why is async mounting frowned upon and not on by default (as it is in some
other unixen)?
Isn't it a much simpler, and therefore, a safer way of improving performance
in some applications?"

<p>
Answer: "Async mounts are indeed faster than sync mounts, but they are also
less safe.
What happens in case of a power failure?
Or a hardware problem?
The quest for speed should not sacrifice the reliability and the stability of
the system.
Check the man page for
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>."

<blockquote><pre>
         async   Metadata I/O to the file system should be done
                 asynchronously.  By default, only regular data is
                 read/written asynchronously.

                 This is a dangerous flag to set since it does not
                 guarantee to keep a consistent file system structure on
                 the disk.  You should not use this flag unless you are
                 prepared to recreate the file system should your system
                 crash.  The most common use of this flag is to speed up
                 restore(8) where it can give a factor of two speed
                 increase.
</pre></blockquote>

On the other hand, when you are dealing with temp data that you can recreate
from scratch after a crash, you can gain speed by using a separate
partition for that data only, mounted async.
 Again, do this <i>only if</i> you don't mind the loss of all the data in the
partition when something goes wrong.
For this reason,
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=mount_mfs">mfs</a>
partitions are mounted asynchronously, as they will get wiped and recreated
on a reboot anyway.

<h2 id="altroot">14.15 - Duplicating your root partition: altroot</h2>
d1666 1
a1666 1
<h2 id="softraid">14.16 - How do I use softraid?</h2>
d1729 1
a1729 1
<h3 id="softraidDI">14.16.1 - Installing to a mirror</h3>
d1879 1
a1879 1
<h3 id="softraidFDE">14.16.2 - Full disk encryption</h3>
d1970 1
a1970 1
<h3 id="softraidCrypto">14.16.3 - Encrypting external disks</h3>
d2038 1
a2038 1
<h3 id="softraidDR">14.16.4 - Disaster recovery</h3>
d2135 1
a2135 1
<h3 id="softraidNotes">14.16.5 - Softraid notes</h3>
@


1.284
log
@Swap 14.6 and 14.7. It makes more sense like this:
14.5 - How do OpenBSD/i386 and OpenBSD/amd64 boot?
14.6 - Installing bootblocks (most, but not all platforms)
14.7 - What are the issues regarding large drives with OpenBSD?
@
text
@d36 1
a36 2
<li><a href="#Boot386"         >14.5 - How do OpenBSD/i386 and OpenBSD/amd64
                                boot?</a>
d407 1
a407 2
<a name="BootAmd64"></a><h2 id="Boot386">14.5 - How do OpenBSD/i386 and
OpenBSD/amd64 boot?</h2>
a408 3
The boot process for OpenBSD/i386 and OpenBSD/amd64 is not trivial, and
understanding how it works can be useful to troubleshoot a problem when
things don't work.
d412 6
a417 45
  <li><b><i>Master Boot Record (MBR):</i></b>
    The Master Boot Record is the first 512 bytes on the disk.
    It contains the primary partition table and a small program to load the
    Partition Boot Record (PBR).
    Note that in some environments, the term "MBR" is used to refer to only
    the code portion of this first block on the disk, rather than the whole
    first block (including the partition table).
    It is critical to understand the meaning of "initialize the MBR" -- in
    the terminology of OpenBSD, it would involve rewriting the entire MBR,
    clearing any existing partition table, not just the code, as it
    might on some systems.
    You will often not want to do this.
    Instead, use fdisk(8)'s "-u" command line option
    (<tt>fdisk -u wd0</tt>) to (re)install the MBR boot code.

    <p>
    While OpenBSD includes its own MBR code, you are not obliged
    to use it, as virtually any MBR code can boot OpenBSD.
    The MBR is manipulated by the fdisk(8) program, which is used both to
    edit the partition table, and also to install the MBR code on the disk.

    <p>
    OpenBSD's MBR announces itself with the message:

    <blockquote><pre>
    Using drive 0, partition 3.
    </pre></blockquote>

    showing the disk and partition it is about to load the PBR from.
    In addition to the obvious, it also shows a trailing period ("."), which
    indicates this machine is capable of using LBA translation to boot.
    If the machine were incapable of using LBA translation, the above
    period would have been replaced with a semicolon (";"), indicating
    CHS translation:

    <blockquote><pre>
    Using drive 0, partition 3;
    </pre></blockquote>

    Note that the trailing period or semicolon can be used as an indicator
    of the "new" OpenBSD MBR, introduced with OpenBSD 3.5.

  <p>
  <li><b><i>Partition Boot Record (PBR):</i></b>
    The Partition Boot Record, also called the PBR or
d420 3
a422 15
    (after the name of the file that holds the code) is the first 512 bytes
    of the OpenBSD partition of the disk.
    The PBR is the "first-stage boot loader" for OpenBSD.
    It is loaded by the MBR code,
    and has the task of loading the OpenBSD second-stage boot loader,
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot">boot(8)</a>.
    Like the MBR, the PBR is a very tiny section of code and data,
    only 512 bytes, total.
    That's not enough to have a fully filesystem-aware application, so
    rather than having the PBR locate <tt>/boot</tt> on the disk, the
    BIOS-accessible location of <tt>/boot</tt> is physically coded into the
    PBR at installation time.

    <p>
    The PBR is installed by
d424 8
a431 64
    installboot(8)</a>,
    which is further described
    <a href="faq14.html#InstBoot">later in this document</a>.
    The PBR announces itself with the message:

    <blockquote><pre>
    Loading...
    </pre></blockquote>

    printing a dot for every file system block it attempts to load.
    Again, the PBR shows if it is using LBA or CHS to load, if it has
    to use CHS translation, it displays a message with a semicolon:

    <blockquote><pre>
    Loading;...
    </pre></blockquote>

  <li><b><i>Second Stage Boot Loader, <tt>/boot</tt>:</i></b>
    <tt>/boot</tt> is
    loaded by the PBR, and has the task of accessing the OpenBSD file system
    through the machine's BIOS, and locating and loading the actual kernel.
    boot(8) also passes various options and information to the kernel.

    <p>
    boot(8) is an interactive program.
    After it loads, it attempts to locate and read <tt>/etc/boot.conf</tt>,
    if it exists (which it does not on a default install), and processes any
    commands in it.
    Unless instructed otherwise by <tt>/etc/boot.conf</tt>, it then gives the
    user a prompt:

    <blockquote><pre>
    probing: pc0 com0 com1 apm mem[636k 190M a20=on]
    disk: fd0 hd0+
    >> OpenBSD/i386 BOOT 3.26
    boot>
    </pre></blockquote>

    It gives the user (by default) five seconds to start giving it other
    tasks, but if none are given before the timeout, it starts its default
    behavior: loading the kernel, <tt>bsd</tt>, from the root partition of
    the first hard drive.
    The second-stage boot loader probes (examines) your system hardware,
    through the BIOS (as the OpenBSD kernel is not loaded).
    Above, you can see a few things it looked for and found:
    <ul>
      <li><b>pc0</b> - the standard keyboard and video display of an i386
        system.
      <li><b>com0, com1</b> - Two serial ports
      <li><b>apm</b> - Advanced Power Management BIOS functions
      <li><b>636k 190M</b> - The amount of conventional (below 1M) and
        extended (above 1M) memory it found
      <li><b>fd0 hd0+</b> - The BIOS disk devices found, in this case, one
        floppy and one hard disk.
    </ul>

    The '+' character after the "hd0" indicates that the BIOS has told
    <tt>/boot</tt> that this disk can be accessed via LBA.
    When doing a first-time install, you will sometimes see a '*' after a
    hard disk -- this indicates a disk that does not seem to have a valid
    OpenBSD disk label on it.

  <p>
  <li><b><i>Kernel: <tt>/bsd</tt></i>:</b>
d441 3
a443 3
Using drive 0, partition 3.                      <b><i>&lt;- MBR</i></b>
Loading....                                      <b><i>&lt;- PBR</i></b>
probing: pc0 com0 com1 apm mem[636k 190M a20=on] <b><i>&lt;- /boot</i></b>
d451 1
a451 1
Copyright (c) 1982, 1986, 1989, 1991, 1993       <b><i>&lt;- Kernel</i></b>
d456 1
a456 123
<h3>What can go wrong</h3>

<ul>
  <li><b>Bad/invalid/incompatible MBR:</b>
    Usually, a used hard disk has some MBR code in place, but if the
    disk is new or moved from a different platform, AND you don't answer "w"
    to the "Use (W)hole disk or (E)dit the MBR?" question of the
    <a href="faq4.html#InstDisks">installation process</a>, you may end up
    with a disk without a valid MBR, and thus, it will not be bootable, even
    though it has a valid partition table.

    <p>
    You may install the OpenBSD MBR on your hard disk using the fdisk program.
    Boot from your install media, choose "Shell" to get a command prompt:

    <blockquote><pre>
    # <b>fdisk -u wd0</b>
    </pre></blockquote>

    You may also install a specific MBR to disk using fdisk:
    <blockquote><pre>
    # <b>fdisk -u -f /usr/mdec/mbr wd0 </b>
    </pre></blockquote>

    which will install the file <tt>/usr/mdec/mbr</tt> as your system's
    MBR.
    This particular file on a standard OpenBSD install happens
    to be the standard MBR that is also built into fdisk, but any other
    MBR could be specified here.

  <p>
    <li><b>Invalid <tt>/boot</tt> location installed in PBR:</b>
    When installboot(8) installs the partition boot record, it writes the
    block number and offset of <tt>/boot</tt>'s inode into the PBR.
    Therefore, deleting and replacing <tt>/boot</tt> without re-running
    <a href="faq14.html#InstBoot">installboot(8)</a> will render
    your system unbootable, as the PBR will load whatever happens to be
    pointed to by the inode specified in it, which will almost certainly no
    longer be the desired second-stage boot loader!

    Since <tt>/boot</tt> is being read using BIOS calls, old versions of
    the PBR were sensitive to BIOS disk translation.
    If you altered the
    drive's geometry (i.e., took it out of one computer that uses CHS
    translation and moving it into one that uses LBA translation, or even
    changed a translation option in your BIOS), it would have
    <i>appeared to the BIOS</i>
    to be in a different location (a different numerical block must be accessed
    to get the same data from the disk), so you would have had to run
    installboot(8) before the system could be rebooted.
    The new (as of OpenBSD 3.5 and later) PBR is much more tolerant to
    changes in translation.
</ul>

As the PBR is very small, its range of error messages is pretty limited,
and somewhat cryptic.
Most likely messages are:

<ul>
  <li><b>ERR R</b> -- BIOS returned an error when trying to read a block
    from the disk.
    Usually means exactly what it says: your disk wasn't readable.
  <li><b>ERR M</b> -- An invalid magic number was read in the second-stage
    bootloader's header.
    This generally means whatever it was that was read in was NOT
    <tt>/boot</tt>, usually meaning installboot(8) was run incorrectly,
    the /boot file was altered, or you have exceeded your BIOS's ability to
    read a <a href="#LargeDrive">large disk</a>.
</ul>

Other error messages are detailed in the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot">
biosboot(8)</a>
man page.

<p>
For more information on the i386 boot process, see:
<ul>
  <li>
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot_i386">
    boot_i386(8)</a>
  <li>
    Hale Landis's <a href=
    "https://web.archive.org/web/20080707020112/http://www.ata-atapi.com/hiw.html">
    How it Works Documents</a>.
</ul>

<h2 id="InstBoot">14.6 - Installing bootblocks
(most, but not all platforms)</h2>

OpenBSD has a very robust boot loader that is quite indifferent to drive
geometries.
However, it is sensitive to where the file
<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot">/boot</a></tt>
resides on the disk.
If you do something that causes boot(8) to be moved to a new place on
the disk (actually, a new inode), you will "break" your system,
preventing it from booting properly.
To fix your boot block so that you can boot normally, just use any boot
media (CD, floppy, network, USB) to get a <tt>boot&gt;</tt> prompt, then
type <tt>boot hd0a:/bsd</tt> to force it to boot from the first hard
disk (and not the boot media).
Your machine should come up normally.
You now need to reinstall the first-stage boot loader
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot">
biosboot(8)</a> based on the position of the <tt>/boot</tt>
file, using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot">
installboot(8)</a> program.

<p>
Our example will assume your boot disk is sd0 (but
for IDE it would be wd0, etc.):

<blockquote><pre>
# <b>installboot sd0</b>
</pre></blockquote>

installboot(8) copies over a new second stage boot loader to <tt>/boot</tt>
and installs the first stage boot loader to look for it in the right
place.

<h2 id="LargeDrive">14.7 - What are the issues regarding large drives with
d613 1
a613 1
<h2 id="Backup">14.8 - Preparing for disaster: backing up and restoring
d964 1
a964 1
<h2 id="MountImage">14.9 - Mounting disk images in OpenBSD</h2>
d995 1
a995 1
<h2 id="NegSpace">14.10 - Why does <tt>df(1)</tt> tell me I have over 100% of
d1018 1
a1018 1
<h2 id="OhBugger">14.11 - Recovering partitions after deleting the
d1068 1
a1068 1
<h2 id="foreignfs">14.12 - Can I access data on filesystems other than FFS?</h2>
d1219 1
a1219 1
<h3 id="foreignfsafter">14.12.1 - The partitions are not in my disklabel!
d1294 1
a1294 1
<h2 id="flashmem">14.13 - Can I use a flash memory device with OpenBSD?</h2>
d1296 1
a1296 1
<h3 id="flashmemUSB">14.13.1 - Flash memory as a portable storage device</h3>
d1431 1
a1431 1
<h3 id="flashmemBoot">14.13.2 - Flash memory as bootable storage</h3>
d1552 1
a1552 1
<h3 id="flashmemLive">14.13.3 - How do I create a bootable "live" USB
d1635 1
a1635 1
<h2 id="DiskOpt">14.14 - Optimizing disk performance</h2>
d1650 1
a1650 1
<h3 id="Optsoftu">14.14.1 - Soft updates</h3>
d1663 1
a1663 1
<h3 id="Optmaxvnodes">14.14.2 - Size of the namei(9) cache</h3>
d1687 1
a1687 1
<h2 id="Async">14.15 - Why aren't we using async mounts?</h2>
d1730 1
a1730 1
<h2 id="altroot">14.16 - Duplicating your root partition: altroot</h2>
d1769 1
a1769 1
<h2 id="softraid">14.17 - How do I use softraid?</h2>
d1832 1
a1832 1
<h3 id="softraidDI">14.17.1 - Installing to a mirror</h3>
d1982 1
a1982 1
<h3 id="softraidFDE">14.17.2 - Full disk encryption</h3>
d2073 1
a2073 1
<h3 id="softraidCrypto">14.17.3 - Encrypting external disks</h3>
d2141 1
a2141 1
<h3 id="softraidDR">14.17.4 - Disaster recovery</h3>
d2238 1
a2238 1
<h3 id="softraidNotes">14.17.5 - Softraid notes</h3>
@


1.283
log
@remove parentheses to fix some odd spacing
@
text
@d38 3
a40 1
<li><a href="#LargeDrive"      >14.6 - What are the issues regarding large
a41 2
<li><a href="#InstBoot"        >14.7 - Installing bootblocks (most, but not
                                all platforms)</a>
d481 2
a482 2
    which is further described <a href="faq14.html#InstBoot">later in this
    document</a>.
d655 36
a690 1
<h2 id="LargeDrive">14.6 - What are the issues regarding large drives with
a846 35
<h2 id="InstBoot">14.7 - Installing bootblocks
(most, but not all platforms)</h2>

OpenBSD has a very robust boot loader that is quite indifferent to drive
geometries.
However, it is sensitive to where the file
<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot">/boot</a></tt>
resides on the disk.
If you do something that causes boot(8) to be moved to a new place on
the disk (actually, a new inode), you will "break" your system,
preventing it from booting properly.
To fix your boot block so that you can boot normally, just use any boot
media (CD, floppy, network, USB) to get a <tt>boot&gt;</tt> prompt, then
type <tt>boot hd0a:/bsd</tt> to force it to boot from the first hard
disk (and not the boot media).
Your machine should come up normally.
You now need to reinstall the first-stage boot loader
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot">
biosboot(8)</a> based on the position of the <tt>/boot</tt>
file, using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot">
installboot(8)</a> program.

<p>
Our example will assume your boot disk is sd0 (but
for IDE it would be wd0, etc.):

<blockquote><pre>
# <b>installboot sd0</b>
</pre></blockquote>

installboot(8) copies over a new second stage boot loader to <tt>/boot</tt>
and installs the first stage boot loader to look for it in the right
place.

d858 3
a860 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump">
dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore">
restore(8)</a>
d1007 1
a1007 1
Enter <tt>bsd -s</tt> at the boot&gt; prompt for single user mode.
@


1.282
log
@update section numbers
@
text
@d829 2
a830 2
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot">
biosboot(8)</a>) based on the position of the <tt>/boot</tt>
@


1.281
log
@magic numbers in the second-stage bootloader have nothing to do with
magic(5)
@
text
@d45 1
a45 1
<li><a href="#NegSpace"        >14.11 - Why does <tt>df(1)</tt> tell me
d47 1
a47 1
<li><a href="#OhBugger"        >14.12 - Recovering partitions after deleting
d49 1
a49 1
<li><a href="#foreignfs"       >14.13 - Can I access data on filesystems other
d52 1
a52 1
  <li><a href="#foreignfsafter">14.13.1 - The partitions are not in my
d55 1
a55 1
<li><a href="#flashmem"        >14.14 - Can I use a flash memory device with
d58 1
a58 1
  <li><a href="#flashmemUSB"   >14.14.1 - Flash memory as a portable storage
d60 2
a61 2
  <li><a href="#flashmemBoot"  >14.14.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.14.3 - How can I make a "live" bootable
d64 1
a64 1
<li><a href="#DiskOpt"         >14.15 - Optimizing disk performance</a>
d66 2
a67 2
  <li><a href="#Optsoftu"      >14.15.1 - Soft updates</a>
  <li><a href="#Optmaxvnodes"  >14.15.2 - Size of the namei(9) cache</a>
d69 2
a70 2
<li><a href="#Async"           >14.16 - Why aren't we using async mounts?</a>
<li><a href="#altroot"         >14.17 - Duplicating your root partition:
d72 1
a72 1
<li><a href="#softraid"        >14.18 - How do I use softraid?</a>
d74 5
a78 5
  <li><a href="#softraidDI"    >14.18.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.18.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.18.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.18.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.18.5 - Softraid notes</a>
d1229 1
a1229 1
<h2 id="NegSpace">14.11 - Why does <tt>df(1)</tt> tell me I have over 100% of
d1252 1
a1252 1
<h2 id="OhBugger">14.12 - Recovering partitions after deleting the
d1302 1
a1302 1
<h2 id="foreignfs">14.13 - Can I access data on filesystems other than FFS?</h2>
d1453 1
a1453 1
<h3 id="foreignfsafter">14.13.1 - The partitions are not in my disklabel!
d1528 1
a1528 1
<h2 id="flashmem">14.14 - Can I use a flash memory device with OpenBSD?</h2>
d1530 1
a1530 1
<h3 id="flashmemUSB">14.14.1 - Flash memory as a portable storage device</h3>
d1665 1
a1665 1
<h3 id="flashmemBoot">14.14.2 - Flash memory as bootable storage</h3>
d1786 1
a1786 1
<h3 id="flashmemLive">14.14.3 - How do I create a bootable "live" USB
d1869 1
a1869 1
<h2 id="DiskOpt">14.15 - Optimizing disk performance</h2>
d1884 1
a1884 1
<h3 id="Optsoftu">14.15.1 - Soft updates</h3>
d1897 1
a1897 1
<h3 id="Optmaxvnodes">14.15.2 - Size of the namei(9) cache</h3>
d1921 1
a1921 1
<h2 id="Async">14.16 - Why aren't we using async mounts?</h2>
d1964 1
a1964 1
<h2 id="altroot">14.17 - Duplicating your root partition: altroot</h2>
d2003 1
a2003 1
<h2 id="softraid">14.18 - How do I use softraid?</h2>
d2066 1
a2066 1
<h3 id="softraidDI">14.18.1 - Installing to a mirror</h3>
d2216 1
a2216 1
<h3 id="softraidFDE">14.18.2 - Full disk encryption</h3>
d2307 1
a2307 1
<h3 id="softraidCrypto">14.18.3 - Encrypting external disks</h3>
d2375 1
a2375 1
<h3 id="softraidDR">14.18.4 - Disaster recovery</h3>
d2472 1
a2472 1
<h3 id="softraidNotes">14.18.5 - Softraid notes</h3>
@


1.280
log
@remove section 14.10 on ID DMA errors, i was informed the affected
hardware should be mostly dead. intentionally skip renumbering for
now
@
text
@d630 2
a631 3
  <li><b>ERR M</b> -- An invalid
    <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=magic">magic(5)</a>
    number was read in the second-stage bootloader's header.
@


1.279
log
@Nuke 14.4: utter crap.

This sad piece has been:
- Mostly rotting since revision 1.3.
- Marked <!-- XXX whoa. this section needs rework --> for 8 years.
- containing <b>If all this seems needlessly complex</b> ... since 1.3
- unsalvageable from the start.
Conclusion: coup de grace was long overdue.

Renumber again since this was so much fun.
@
text
@a44 2
<li><a href="#pciideErr"       >14.10 - Help! I'm getting errors with IDE
                                DMA!</a>
a1228 40

<h2 id="pciideErr">14.10 - Help! I'm getting errors with IDE DMA!</h2>

DMA IDE transfers, supported by
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pciide">pciide(4)</a>
are unreliable with many combinations of older hardware.

<p>
OpenBSD is aggressive and attempts to use the highest DMA Mode it can configure.
This will cause corruption of data transfers in some configurations because of
buggy motherboard chipsets, buggy drives, and/or noise on the cables.
Luckily, Ultra-DMA modes protect data transfers with a CRC to detect corruption.
When the Ultra-DMA CRC fails, OpenBSD will print an error message and try the
operation again.

<blockquote><pre>
wd2a:  aborted command, interface CRC error reading fsbn 64 of 64-79
(wd2 bn 127; cn 0 tn 2 sn 1), retrying
</pre></blockquote>

After failing a couple times, OpenBSD will downgrade to a slower
(hopefully more reliable) Ultra-DMA mode.
If Ultra-DMA mode 0 is hit, then the drive downgrades to PIO mode.

<p>
UDMA errors are often caused by low quality or damaged cables.
Cable problems should usually be the first suspect if you get many
DMA errors or unexpectedly low DMA performance.
It is also a bad idea to put the CD-ROM on the same channel with a hard
disk.

<p>
If replacing cables does not resolve the problem and OpenBSD does not
successfully downgrade, or the process causes your machine to lock hard,
or causes excessive messages on the console and in the logs, you may
wish to force the system to use a lower level of DMA or UDMA by default.
This can be done by using <a href="faq5.html#BootConfig">UKC</a> or
<a href="faq5.html#config">config(8)</a> to change the flags on the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>
device.
@


1.278
log
@Fix section numbers after removal of swap section since there is
currently no pending section removal on this page.
@
text
@d35 2
a36 3
<li><a href="#NewDisk"         >14.4 - Adding extra disks in OpenBSD</a>
<li><a href="#SoftUpdates"     >14.5 - Soft updates</a>
<li><a href="#Boot386"         >14.6 - How do OpenBSD/i386 and OpenBSD/amd64
d38 1
a38 1
<li><a href="#LargeDrive"      >14.7 - What are the issues regarding large
d40 1
a40 1
<li><a href="#InstBoot"        >14.8 - Installing bootblocks (most, but not
d42 1
a42 1
<li><a href="#Backup"          >14.9 - Preparing for disaster: backing up
d44 2
a45 2
<li><a href="#MountImage"      >14.10 - Mounting disk images in OpenBSD</a>
<li><a href="#pciideErr"       >14.11 - Help! I'm getting errors with IDE
d47 1
a47 1
<li><a href="#NegSpace"        >14.12 - Why does <tt>df(1)</tt> tell me
d49 1
a49 1
<li><a href="#OhBugger"        >14.13 - Recovering partitions after deleting
d51 1
a51 1
<li><a href="#foreignfs"       >14.14 - Can I access data on filesystems other
d54 1
a54 1
  <li><a href="#foreignfsafter">14.14.1 - The partitions are not in my
d57 1
a57 1
<li><a href="#flashmem"        >14.15 - Can I use a flash memory device with
d60 1
a60 1
  <li><a href="#flashmemUSB"   >14.15.1 - Flash memory as a portable storage
d62 2
a63 2
  <li><a href="#flashmemBoot"  >14.15.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.15.3 - How can I make a "live" bootable
d66 1
a66 1
<li><a href="#DiskOpt"         >14.16 - Optimizing disk performance</a>
d68 2
a69 2
  <li><a href="#Optsoftu"      >14.16.1 - Soft updates</a>
  <li><a href="#Optmaxvnodes"  >14.16.2 - Size of the namei(9) cache</a>
d71 2
a72 2
<li><a href="#Async"           >14.17 - Why aren't we using async mounts?</a>
<li><a href="#altroot"         >14.18 - Duplicating your root partition:
d74 1
a74 1
<li><a href="#softraid"        >14.19 - How do I use softraid?</a>
d76 5
a80 5
  <li><a href="#softraidDI"    >14.19.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.19.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.19.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.19.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.19.5 - Softraid notes</a>
d379 1
a379 131
<h2 id="NewDisk">14.4 - Adding extra disks in OpenBSD</h2>
<!-- XXX whoa. this section needs rework -->

Once you get your disk installed <b>properly</b> you need to use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
(<i>amd64/i386 only</i>) and
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
disklabel(8)</a>
to set up your disk in OpenBSD.

<p>
amd64/i386 folks should start with fdisk.
Other architectures can ignore this.
In the example below, we're adding a third SCSI-like drive to the system.

<blockquote><pre>
# <b>fdisk -i sd2</b>
</pre></blockquote>

This will initialize the disk's "real" partition table for exclusive use
by OpenBSD.
Next you need to create a disklabel for it.
This may seem confusing at first.

<blockquote><pre>
# <b>disklabel -e sd2</b>

<i>(screen goes blank, your $EDITOR comes up)</i>
type: SCSI
<i>...bla...</i>
sectors/track: 63
total sectors: 6185088
<i>...bla...</i>
16 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  c:  6185088        0    unused        0     0         # (Cyl.    0 - 6135)
  d:  1405080       63    4.2BSD     1024  8192    16   # (Cyl.    0*- 1393*)
  e:  4779945  1405143    4.2BSD     1024  8192    16   # (Cyl. 1393*- 6135)
</pre></blockquote>

First, ignore the 'c' partition, it's always there and is for programs
like disklabel to function!
Fstype for OpenBSD is 4.2BSD.
Total sectors is the total size of the disk.
Say this is a 3GB disk.
Three gigabytes in disk manufacturer terms is 3000MB.
So divide 6185088/3000 (use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bc">bc(1)</a>).
You get 2061.
So, to make up partition sizes for a, d, e, f, g, ...
just multiply X*2061 to get X megabytes of space on that partition.
The offset for your first new partition should be the same as the
"sectors/track" reported earlier in disklabel's output.
For us it is 63.
The offset for each partition afterwards should be a combination of
the size of each partition and the offset of each partition (except the
'c' partition, since it has no play into this equation.)

<p>
Or, if you just want one partition on the disk, say you will use the
whole thing for web storage or a home directory or something, just take
the total size of the disk and subtract the sectors per track from it.
6185088-63 = 6185025.
Your partition is

<blockquote><pre>
    d:  6185025       63    4.2BSD     1024  8192    16
</pre></blockquote>

<b>If all this seems needlessly complex, you can just use disklabel -E
to get the same partitioning mode that you got on your install disk!</b>
There, you can just use "96M" to specify "96 megabytes", or 96G for 96
gigs.

<p>
That was a lot.
But you are not finished.
Finally, you need to create the filesystem on that disk using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs">newfs(8)</a>.

<blockquote><pre>
# <b>newfs sd2d </b>
</pre></blockquote>

Or whatever your disk was named as per OpenBSD's disk numbering scheme.
(Look at the output from
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg">dmesg(8)</a>
to see what your disk was named by OpenBSD.)

<p>
Now figure out where you are going to mount this new partition you just created.
Say you want to put it on <tt>/u</tt>.
First, make the directory <tt>/u</tt>, then mount it.

<blockquote><pre>
# <b>mkdir /u</b>
# <b>mount /dev/sd2d /u</b>
</pre></blockquote>

Finally, add it to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>.

<blockquote><pre>
/dev/sd2d /u ffs rw 1 1
</pre></blockquote>

What if you need to migrate an existing directory like <tt>/usr/local</tt>?
You should mount the new drive on <tt>/mnt</tt> and copy <tt>/usr/local</tt>
to the <tt>/mnt</tt> directory.
Example:

<blockquote><pre>
# <b>cd /usr/local && pax -rw -p e . /mnt</b>
</pre></blockquote>

Edit the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>
file to show that the <tt>/usr/local</tt> partition is now <tt>/dev/sd2d</tt>,
your freshly formatted partition.
Example:

<blockquote><pre>
/dev/sd2d /usr/local ffs rw 1 1
</pre></blockquote>

Reboot into single user mode with <tt>boot -s</tt>, move the existing
<tt>/usr/local</tt> to <tt>/usr/local-backup</tt> (or delete it if you feel
lucky) and create an empty directory /usr/local.
Then reboot the system, and voila, the files are there!

<h2 id="SoftUpdates">14.5 - Soft updates</h2>
d410 1
a410 1
<a name="BootAmd64"></a><h2 id="Boot386">14.6 - How do OpenBSD/i386 and
d658 1
a658 1
<h2 id="LargeDrive">14.7 - What are the issues regarding large drives with
d815 1
a815 1
<h2 id="InstBoot">14.8 - Installing bootblocks
d850 1
a850 1
<h2 id="Backup">14.9 - Preparing for disaster: backing up and restoring
d1201 1
a1201 1
<h2 id="MountImage">14.10 - Mounting disk images in OpenBSD</h2>
d1232 1
a1232 1
<h2 id="pciideErr">14.11 - Help! I'm getting errors with IDE DMA!</h2>
d1272 1
a1272 1
<h2 id="NegSpace">14.12 - Why does <tt>df(1)</tt> tell me I have over 100% of
d1295 1
a1295 1
<h2 id="OhBugger">14.13 - Recovering partitions after deleting the
d1345 1
a1345 1
<h2 id="foreignfs">14.14 - Can I access data on filesystems other than FFS?</h2>
d1496 1
a1496 1
<h3 id="foreignfsafter">14.14.1 - The partitions are not in my disklabel!
d1571 1
a1571 1
<h2 id="flashmem">14.15 - Can I use a flash memory device with OpenBSD?</h2>
d1573 1
a1573 1
<h3 id="flashmemUSB">14.15.1 - Flash memory as a portable storage device</h3>
d1708 1
a1708 1
<h3 id="flashmemBoot">14.15.2 - Flash memory as bootable storage</h3>
d1829 1
a1829 1
<h3 id="flashmemLive">14.15.3 - How do I create a bootable "live" USB
d1912 1
a1912 1
<h2 id="DiskOpt">14.16 - Optimizing disk performance</h2>
d1927 1
a1927 1
<h3 id="Optsoftu">14.16.1 - Soft updates</h3>
d1940 1
a1940 1
<h3 id="Optmaxvnodes">14.16.2 - Size of the namei(9) cache</h3>
d1964 1
a1964 1
<h2 id="Async">14.17 - Why aren't we using async mounts?</h2>
d2007 1
a2007 1
<h2 id="altroot">14.18 - Duplicating your root partition: altroot</h2>
d2046 1
a2046 1
<h2 id="softraid">14.19 - How do I use softraid?</h2>
d2109 1
a2109 1
<h3 id="softraidDI">14.19.1 - Installing to a mirror</h3>
d2259 1
a2259 1
<h3 id="softraidFDE">14.19.2 - Full disk encryption</h3>
d2350 1
a2350 1
<h3 id="softraidCrypto">14.19.3 - Encrypting external disks</h3>
d2418 1
a2418 1
<h3 id="softraidDR">14.19.4 - Disaster recovery</h3>
d2515 1
a2515 1
<h3 id="softraidNotes">14.19.5 - Softraid notes</h3>
@


1.277
log
@Remove verbose version of the online help of fdisk(8) and
delete a long-winded demonstration of disklabel(8). A lot
of text for very little information. Moreover, most of
this is also in faq4.

ok and tweaks tj@@
@
text
@d36 2
a37 2
<li><a href="#SoftUpdates"     >14.6 - Soft updates</a>
<li><a href="#Boot386"         >14.7 - How do OpenBSD/i386 and OpenBSD/amd64
d39 1
a39 1
<li><a href="#LargeDrive"      >14.8 - What are the issues regarding large
d41 1
a41 1
<li><a href="#InstBoot"        >14.9 - Installing bootblocks (most, but not
d43 1
a43 1
<li><a href="#Backup"          >14.10 - Preparing for disaster: backing up
d45 2
a46 2
<li><a href="#MountImage"      >14.11 - Mounting disk images in OpenBSD</a>
<li><a href="#pciideErr"       >14.12 - Help! I'm getting errors with IDE
d48 1
a48 1
<li><a href="#NegSpace"        >14.13 - Why does <tt>df(1)</tt> tell me
d50 1
a50 1
<li><a href="#OhBugger"        >14.14 - Recovering partitions after deleting
d52 1
a52 1
<li><a href="#foreignfs"       >14.15 - Can I access data on filesystems other
d55 1
a55 1
  <li><a href="#foreignfsafter">14.15.1 - The partitions are not in my
d58 1
a58 1
<li><a href="#flashmem"        >14.16 - Can I use a flash memory device with
d61 1
a61 1
  <li><a href="#flashmemUSB"   >14.16.1 - Flash memory as a portable storage
d63 2
a64 2
  <li><a href="#flashmemBoot"  >14.16.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.16.3 - How can I make a "live" bootable
d67 1
a67 1
<li><a href="#DiskOpt"         >14.17 - Optimizing disk performance</a>
d69 2
a70 2
  <li><a href="#Optsoftu"      >14.17.1 - Soft updates</a>
  <li><a href="#Optmaxvnodes"  >14.17.2 - Size of the namei(9) cache</a>
d72 2
a73 2
<li><a href="#Async"           >14.18 - Why aren't we using async mounts?</a>
<li><a href="#altroot"         >14.19 - Duplicating your root partition:
d75 1
a75 1
<li><a href="#softraid"        >14.20 - How do I use softraid?</a>
d77 5
a81 5
  <li><a href="#softraidDI"    >14.20.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.20.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.20.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.20.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.20.5 - Softraid notes</a>
d510 1
a510 1
<h2 id="SoftUpdates">14.6 - Soft updates</h2>
d541 1
a541 1
<a name="BootAmd64"></a><h2 id="Boot386">14.7 - How do OpenBSD/i386 and
d789 1
a789 1
<h2 id="LargeDrive">14.8 - What are the issues regarding large drives with
d946 1
a946 1
<h2 id="InstBoot">14.9 - Installing bootblocks
d981 1
a981 1
<h2 id="Backup">14.10 - Preparing for disaster: backing up and restoring
d1332 1
a1332 1
<h2 id="MountImage">14.11 - Mounting disk images in OpenBSD</h2>
d1363 1
a1363 1
<h2 id="pciideErr">14.12 - Help! I'm getting errors with IDE DMA!</h2>
d1403 1
a1403 1
<h2 id="NegSpace">14.13 - Why does <tt>df(1)</tt> tell me I have over 100% of
d1426 1
a1426 1
<h2 id="OhBugger">14.14 - Recovering partitions after deleting the
d1476 1
a1476 1
<h2 id="foreignfs">14.15 - Can I access data on filesystems other than FFS?</h2>
d1627 1
a1627 1
<h3 id="foreignfsafter">14.15.1 - The partitions are not in my disklabel!
d1702 1
a1702 1
<h2 id="flashmem">14.16 - Can I use a flash memory device with OpenBSD?</h2>
d1704 1
a1704 1
<h3 id="flashmemUSB">14.16.1 - Flash memory as a portable storage device</h3>
d1839 1
a1839 1
<h3 id="flashmemBoot">14.16.2 - Flash memory as bootable storage</h3>
d1960 1
a1960 1
<h3 id="flashmemLive">14.16.3 - How do I create a bootable "live" USB
d2043 1
a2043 1
<h2 id="DiskOpt">14.17 - Optimizing disk performance</h2>
d2058 1
a2058 1
<h3 id="Optsoftu">14.17.1 - Soft updates</h3>
d2071 1
a2071 1
<h3 id="Optmaxvnodes">14.17.2 - Size of the namei(9) cache</h3>
d2095 1
a2095 1
<h2 id="Async">14.18 - Why aren't we using async mounts?</h2>
d2138 1
a2138 1
<h2 id="altroot">14.19 - Duplicating your root partition: altroot</h2>
d2177 1
a2177 1
<h2 id="softraid">14.20 - How do I use softraid?</h2>
d2240 1
a2240 1
<h3 id="softraidDI">14.20.1 - Installing to a mirror</h3>
d2390 1
a2390 1
<h3 id="softraidFDE">14.20.2 - Full disk encryption</h3>
d2481 1
a2481 1
<h3 id="softraidCrypto">14.20.3 - Encrypting external disks</h3>
d2549 1
a2549 1
<h3 id="softraidDR">14.20.4 - Disaster recovery</h3>
d2646 1
a2646 1
<h3 id="softraidNotes">14.20.5 - Softraid notes</h3>
@


1.276
log
@First pass over 14.3, markup fixes, tightening of text.
Split disklabel tricks and tips into a basic and miscellaneous section.
Use bold instead of all caps for emphasis and eleminate a few
parentheses and quotes.
@
text
@d227 1
a227 1
# <b>fdisk sd0</b><br>
d250 1
a250 3
What if we want to edit our partition table?
Well, to do so we must use the <tt>-e</tt> flag.
This will bring up a console to interact with fdisk.
d253 1
a253 1
# <b>fdisk -e wd0</b>
a257 58
Here is an overview of the commands you can use when you choose the
<tt>-e</tt> flag.

<ul>
  <li><tt>help</tt>:
    Display a list of commands that fdisk understands in the interactive edit
    mode.
  <li><tt>manual</tt>:
    Show the man page for fdisk.
    Useful in the ramdisk kernel <tt>bsd.rd</tt> which ships without man pages
    due to size limitations.
  <li><tt>reinit</tt>:
    Initialize the currently selected, in-memory copy of the boot block.
    This is a handy way to quickly slap a full-disk OpenBSD partition in
    place, update the boot code, and in general, make the system ready for
    OpenBSD (and nothing but OpenBSD).
  <li><tt>setpid</tt>:
    Change the partition identifier of the given partition table entry.
    This command is particularly useful for reassigning an existing partition
    to OpenBSD.
  <li><tt>disk</tt>:
    Display the current drive geometry that fdisk is using.
    You are given a chance to edit it if you wish.
  <li><tt>edit</tt>:
    Edit a given table entry in the memory copy of the current boot block.
    You may edit either in CHS geometry mode, or in sector offsets and sizes.
  <li><tt>flag</tt>:
    Make the given partition table entry bootable.
    Only one entry can be marked bootable.
    If you wish to boot from an extended partition, you will need to mark the
    partition table entry for the extended partition as bootable.
  <li><tt>update</tt>:
    Update the machine code in the memory copy of the currently selected boot
    block.
  <li><tt>select</tt>:
    Select and load into memory the boot block pointed to by the extended
    partition table entry in the current boot block.
  <li><tt>swap</tt>:
    Swaps two MBR entries, so you can re-order the MBR.
  <li><tt>print</tt>:
    Print the currently selected in-memory copy of the boot block and its
    MBR table to the terminal.
  <li><tt>write</tt>:
    Write the in-memory copy of the boot block to disk.
    You will be asked to confirm this operation.
  <li><tt>exit</tt>:
    Exit the current level of fdisk, either returning to the previously
    selected in-memory copy of a boot block, or exiting the program if there
    is none.
  <li><tt>quit</tt>:
    Exit the current level of fdisk, either returning to the previously
    selected in-memory copy of a boot block, or exiting the program if there
    is none.
    Unlike exit it does write the modified block out.
  <li><tt>abort</tt>:
    Quit program without saving current changes.
</ul>

d328 2
a329 86
<a href="faq4.html#Moredisklabel">Custom disklabel layout</a> part of the
<a href="faq4.html">Installation guide</a>.

<h3 id="disklabel.3">Using disklabel(8) after install</h3>

After install, one of the most common reasons to use disklabel(8) is to
look at how your disk is laid out.
The following command will show you the current disklabel of <tt>wd0</tt>:

<blockquote><pre>
$ <b>disklabel wd0</b>
type: ESDI
disk: ESDI/IDE disk
label: SAMSUNG HD154UI
duid: d920a43a5a56ad5f
flags:
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 2907021
total sectors: 2930277168
boundstart: 64
boundend: 2930272065
drivedata: 0

16 partitions:
#                size           offset  fstype [fsize bsize  cpg]
  a:          1024064               64  4.2BSD   2048 16384    1 # /
  b:          4195296          1024128    swap
  c:       2930277168                0  unused
  d:          4195296          5219424  4.2BSD   2048 16384    1 # /usr
  e:          4195296          9414720  4.2BSD   2048 16384    1 # /tmp
  f:         20972448         13610016  4.2BSD   2048 16384    1 # /var
  h:          2097632         34582464  4.2BSD   2048 16384    1 # /home
</pre></blockquote>

Note how this disk has only part of its disk space allocated at this
time.

<p>
Let's add a partition to the above system.

<blockquote>
<b>WARNING:</b>
Any time you are fiddling with your disklabel, you are putting all the data
on your disk at risk.
Make sure your data is backed up before editing an existing disklabel!
</blockquote>

We will use the built-in command-driven editor, which is invoked using
the <tt>-E</tt> option to disklabel(8).

<blockquote><pre>
# <b>disklabel -E wd0</b>
...
> <b>a k</b>
offset: [36680096]
size: [2893591969] 1T
Rounding to cylinder: 2147483536
FS type: [4.2BSD]
> <b>p m</b>
OpenBSD area: 64-2930272065; size: 1430796.9M; free: 364310.8M
#                size           offset  fstype [fsize bsize  cpg]
  a:           500.0M               64  4.2BSD   2048 16384    1 # /
  b:          2048.5M          1024128    swap
  c:       1430799.4M                0  unused
  d:          2048.5M          5219424  4.2BSD   2048 16384    1 # /usr
  e:          2048.5M          9414720  4.2BSD   2048 16384    1 # /tmp
  f:         10240.5M         13610016  4.2BSD   2048 16384    1 # /var
  h:          1024.2M         34582464  4.2BSD   2048 16384    1 # /home
  k:       1048575.9M         36680192  4.2BSD   8192 65536    1
> <b>q</b>
Write new label?: [y]
</pre></blockquote>

On most OpenBSD platforms, there are sixteen disklabel partitions
available, labeled <tt>a</tt> through <tt>p</tt>.
Every disklabel has a <tt>c</tt> partition, with an <tt>fstype</tt> of
<tt>unused</tt> that covers the entire physical drive.
Never try to use the <tt>c</tt> partition for anything other than accessing the
raw sectors of the disk.
On the boot device, <tt>a</tt> is reserved for the root partition, and
<tt>b</tt> is the swap partition.
Other devices may use all fifteen partitions other than <tt>c</tt> for file
systems.
@


1.275
log
@Nuke section on swap. Get more RAM. The defaults are sane and if you really
need this info, it's rather straightforward and only a 'man -k swap' away.
@
text
@d330 2
a331 2
    recommended that you leave it in place or install it BEFORE installing
    OpenBSD.
d357 1
a357 1
disk setup is done in two stages.
a364 4
Platforms that also use fdisk(8) place all the disklabel(8) partitions
in a single fdisk partition.

<p>
d367 2
a368 3
The disklabel is then used by the bootstrap program to
access the drive and to know where filesystems are contained on the
drive.
d377 2
a378 1
For example, on i386, you can have four primary partitions, but with
d380 3
a382 4
disklabel(8),</a>
you use one of these 'primary' partitions to store all of your
OpenBSD partitions (for example, 'swap', '/', '/usr', '/var', etc.),
and you still have 3 more partitions available for other OSs.
d386 2
a387 17
One of the major parts of OpenBSD's install is your initial creation of
labels.
During the install you use disklabel(8) to create your separate
partitions.
As part of the install process, you can define your mount points from
within disklabel(8), but you can change these later in the install or
post-install, as well.

<p>
There is not one "right" way to label a disk, but there are many wrong
ways.
Before attempting to label your disk, see
<a href="faq4.html#Partitioning">this discussion</a> on partitioning and
partition sizing.

<p>
For an example of using disklabel(8) during install, see the
d389 1
a389 1
<a href="faq4.html">Installation Guide</a>.
d395 1
a395 2
The following command will show you the current disklabel, without
modifying it:
d398 1
a398 1
# <b>disklabel wd0</b> &lt;-- <i>Or whatever disk device you'd like to view</i>
a427 8
Disklabel offers two different modes for editing the disklabel, a
built-in command-driven editor (this is how you installed OpenBSD
originally), and a full editor, such as
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vi">vi(1)</a>.
You may find the command-driven editor "easier", as it guides you through all
the steps and provides help upon request, but the full-screen editor has
definite use, too.

d439 1
a439 1
the "-E" option to disklabel(8).
a463 11
In this case, disklabel(8) was kind enough to calculate a good starting
offset for the partition.
In many cases, it will be able to do this, but if you have "holes" in
the disklabel (i.e., you deleted a partition, or you just like making
your life miserable) you may need to sit down with a paper and pencil
to calculate the proper offset.
Note that while disklabel(8) does some sanity checking, it is very
possible to do things very wrong here.
Be careful, understand the meaning of the numbers you are entering.

<p>
d465 8
a472 11
available, labeled "a" through "p".
(some "specialty" systems may have only eight).
Every disklabel should have a 'c' partition, with an "fstype" of
"unused" that covers the entire physical drive.
If your disklabel is not like this, it must be fixed, the "D" option
(below) can help.
Never try to use the "c" partition for anything other than accessing the
raw sectors of the disk, do not attempt to create a file system on "c".
On the boot device, "a" is reserved for the root partition, and "b" is
the swap partition, but only the boot device makes these distinctions.
Other devices may use all fifteen partitions other than "c" for file
d475 1
a475 1
<h3>Disklabel tricks and tips</h3>
d479 1
a479 1
    In the command-driven mode, hitting "?" will produce a list of
d481 5
a485 1
    "M" will show the man page for disklabel(8).
d491 17
a507 8
  <li><b>Duplicating a disklabel:</b>
    In some cases, you may wish to duplicate the partitioning from one disk
    to another, but not precisely (for example, you wish to have the same
    partitions, but on different sizes of drives).
    Use the '-e' (full-screen editor) mode of disklabel(8) to capture the
    partitions of the "model" drive, paste it into the new drive, remove the
    model's 'c' partition, save, and you have copied the disk layout to the
    other drive without altering its basic parameters.
a510 9
  <li>(fdisk platforms) <b>Leave first track free:</b>
    On platforms using fdisk(8), you should leave the first logical track
    unused, both in disklabel(8) and in fdisk(8).
    On "modern" computers (i.e., almost everything that will run OpenBSD),
    the exact amount doesn't really matter, though for performance reasons
    on the newest disks, having partitions aligned at 4k boundaries is good
    for performance.
    For this reason, OpenBSD now defaults to starting the first partition at
    block 64 instead of 63.
a521 11
  <li><b>"q" vs. "x":</b>
    For historical reasons, while in the command-driven editor mode, "q"
    saves changes and exits the program, and "x" exits without saving.
    This is the opposite of what many people are now used to in other
    environments.
    disklabel(8) does warn before saving the changes, though it will "x"
    quickly and quietly.
  <li><b>Auto-partitioning:</b>
    New users are encouraged to use the 'A' command to auto-create a
    recommended disklabel.
    You can then edit or alter the auto-created label as you need.
d527 1
a527 1
Once you get your disk installed <b>PROPERLY</b> you need to use
d953 1
a953 1
Unfortunately, the full ability of the OS isn't available until AFTER
d2125 3
a2127 3
    (As OpenBSD's dmesg is useful for identifying hardware, this can be a
    good way to prep for the install of OTHER OSs on a machine -- make sure
    you have all the needed drivers before starting).
d2352 1
a2352 1
    The time to do this is BEFORE your system has had a failure event.
d2719 1
a2719 1
If you plan on practicing softraid recovery (and we HIGHLY suggest you
@


1.274
log
@Markup fixes and minimal pruning in section 14.2.
@
text
@a35 6
<li><a href="#Swap"            >14.5 - How is swap handled?</a>
  <ul>
  <li><a href="#SwapAbout"     >14.5.1 - About swap</a>
  <li><a href="#SwapPartition" >14.5.2 - Swapping to a partition</a>
  <li><a href="#SwapFile"      >14.5.3 - Swapping to a file</a>
  </ul>
a703 144
<h2 id="Swap">14.5 - How is swap handled?</h2>

<h3 id="SwapAbout">14.5.1 - About swap</h3>

Historically, all kinds of rules have been tossed about to guide
administrators on how much swap to configure on their machines.
The problem, of course, is there are few "normal" applications.

<p>
One non-obvious use for swap is to be a place the kernel can dump a copy
of what is in core in the event of a system panic for later analysis.
For this to work, you must have a swap partition (not a swap file) at
least as large as your RAM.
By default, the system will save a copy of this dump to
<tt>/var/crash</tt> on reboot, so if you wish to be able to do this
automatically, you will need sufficient <i>free</i> space on
<tt>/var</tt>.
However, you can also bring the system up single-user, and use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=savecore">savecore(8)</a>
to dump it elsewhere.

<p>
Many types of systems may be appropriately configured with no swap
at all.
For example, firewalls should not swap in normal operation.
Machines with flash storage generally should not swap.
If your firewall is flash based, you may benefit (slightly) by
not allocating a swap partition, though in most other cases,
a swap partition won't actually hurt anything; most disks have
more than enough space to allocate a little to swap.

<p>
There are all kinds of tips about optimizing swap (where on the disk,
separate disks, etc.), but if you find yourself in a situation where
optimizing swap is an issue, you probably need more RAM.
In general, the best optimization for swap is to not need it.

<p>
In OpenBSD, swap is managed with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl">swapctl(8)</a>
program, which adds, removes, lists and prioritizes swap devices and
files.

<h3 id="SwapPartition">14.5.2 - Swapping to a partition</h3>

On OpenBSD, the 'b' partition of the boot drive is used by default and
automatically for swap.
No configuration is needed for this to take place.
If you do not wish to use swap on the boot disk, do not define a
"b" partition.
If you wish to use swap on other partitions or on other disks, you
need to define these partitions in <tt>/etc/fstab</tt> with lines
something like:

<blockquote><pre>
/dev/sd3b none swap sw 0 0
/dev/sd3d none swap sw 0 0
</pre></blockquote>

<h3 id="SwapFile">14.5.3 - Swapping to a file</h3>

(Note: if you are looking to swap to a file because you are getting
&quot;virtual memory exhausted&quot; errors, you should try raising
the per-process limits first with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=csh">csh(1)</a>'s unlimit,
or
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sh">sh(1)</a>'s ulimit.)

<p>
Sometimes, your initial guess about how much swap you need proves to
be wrong, and you have to add additional swap space, occasionally in
a hurry (as in, "Geez, at the rate it is burning swap, we'll be wedged
in five minutes").
If you find yourself in this position, adding swap space as a file on
an existing file system can be a quick fix.

<p>
The file must not reside on a filesystem which has soft updates enabled
(they are disabled by default).
To start out, you can see how much swap you currently have and how much you
are using with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl">swapctl(8)</a>
utility.
You can do this by using the command:

<blockquote><pre>
$ <b>swapctl -l</b>
Device      512-blocks     Used    Avail Capacity  Priority
swap_device      65520        8    65512     0%    0
</pre></blockquote>

This shows the devices currently being used for swapping and their
current statistics.
In the example above, there is only one device named swap_device.
This is the predefined area on disk that is used for swapping.
It shows up as partition b when viewing disklabels.
As you can also see in the example above, that device isn't getting much
use at the moment, but for the purposes of this document, we will act as
if an extra 32M is needed.

<p>
The first step to setting up a file as a swap device is to create the file.
It's best to do this with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd">dd(1)</a>
utility.
Here is an example of creating the file <i>/var/swap</i> that is 32M in size.

<blockquote><pre>
# <b>dd if=/dev/zero of=/var/swap bs=1k count=32768</b>
32768+0 records in
32768+0 records out
33554432 bytes transferred in 20 secs (1677721 bytes/sec)
</pre></blockquote>

Once this has been done, we can turn on swapping to that device.
Use the following command to turn on swapping to this device

<blockquote><pre>
# <b>chmod 600 /var/swap</b>
# <b>swapctl -a /var/swap</b>
</pre></blockquote>

Now we need to check to see if it has been correctly added to the list
of our swap devices.

<blockquote><pre>
$ <b>swapctl -l</b>
Device      512-blocks     Used    Avail Capacity  Priority
swap_device      65520        8    65512     0%    0
/var/swap        65536        0    65536     0%    0
Total           131056        8   131048     0%
</pre></blockquote>

Now that the file is setup and swapping is being done, you need to add a
line to your <i>/etc/fstab</i> file so that this file is configured on
the next boot time also.
If this line is not added, you won't have this swap device configured.

<blockquote><pre>
$ <b>cat /etc/fstab</b>
/dev/wd0a / ffs rw 1 1
/var/swap /var/swap swap sw 0 0
</pre></blockquote>

d980 1
a980 1
    How it Wkrks Documents</a>.
@


1.273
log
@First pass at cleaning up section 14.1.
- more consistent markup
- try to be a bit less verbose and repetitive
- avoid advertising features from 4.8 as new
- avoid introducing terms that aren't used later on
Cam be trimmed much more, but leave it at that for now.
@
text
@d182 1
a182 1
or <tt>sd1c</tt> (the entire second sd device).
a220 3
Other platforms do not need or use fdisk(8).
fdisk(8) can also be used for manipulations of the Master Boot Record (MBR),
which can impact all operating systems on a computer.
d222 1
a222 5
OpenBSD's fdisk assumes you know what you want to do, and for the most
part, it will let you do what you need to do, making it a powerful tool
to have on hand.
It will also let you do things you shouldn't or didn't intend to do, so
it must be used with care.
d251 2
a252 2
We can see the OpenBSD partition (id A6) and its size.
The * tells us that the OpenBSD partition is the bootable partition.
d263 1
a263 17
fdisk: 1&gt; <b>help</b>
        help            Command help list
        manual          Show entire OpenBSD man page for fdisk
        reinit          Re-initialize loaded MBR (to defaults)
        setpid          Set the identifier of a given table entry
        disk            Edit current drive stats
        edit            Edit given table entry
        flag            Flag given table entry as bootable
        update          Update machine code in loaded MBR
        select          Select extended partition table entry MBR
        swap            Swap two partition entries
        print           Print loaded MBR partition table
        write           Write loaded MBR to disk
        exit            Exit edit of current MBR, without saving changes
        quit            Quit edit of current MBR, saving current changes
        abort           Abort program without saving current changes
fdisk: 1&gt;
d267 1
a267 1
<b>-e</b> flag.
d270 1
a270 1
  <li><b>help</b>
d273 5
a277 1
  <li><b>reinit</b>
d279 1
a279 1
    This is a handy way to quickly slap a "full-disk" OpenBSD partition in
d282 1
a282 4
  <li><b>disk</b>
    Display the current drive geometry that fdisk is using.
    You are given a chance to edit it if you wish.
  <li><b>setpid</b>
d286 4
a289 1
  <li><b>edit</b>
d292 1
a292 1
  <li><b>flag</b>
d297 1
a297 1
  <li><b>update</b>
d300 1
a300 1
  <li><b>select</b>
d303 1
a303 1
  <li><b>swap</b>
d305 1
a305 1
  <li><b>print</b>
d308 1
a308 1
  <li><b>write</b>
d311 1
a311 1
  <li><b>exit</b>
d315 1
a315 1
  <li><b>quit</b>
d320 1
a320 1
  <li><b>abort</b>
a329 3
    Both options are given for a reason -- some tasks are easier accomplished
    one way, others the other way.
    Don't lock yourself into only using one option.
d333 1
a333 5
    You can use the "reinit" or "update" options to do this.
    If you fail to do this, you can write a valid partition table with fdisk,
    but not have a bootable disk.
    You may wish to update the existing boot code anyway if you are uncertain
    of its origin.
d339 2
a340 2
    For historical reasons, "q" saves changes and exits the program, and "x"
    exits without saving.
@


1.272
log
@more section renumbering.
@
text
@d106 12
a117 12
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd">wd(4)</a>:
IDE disks (and devices that look like IDE disks, for example, SATA, MFM
or ESDI disks, or a flash device with an appropriate adapter) attached to a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wdc">wdc(4)</a>
or
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pciide">pciide(4)</a>
interface.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd">sd(4)</a>:
Devices that utilize SCSI commands, such as SCSI disks attached to a
SCSI adapter, USB disks, SATA disks attached to an
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ahci">ahci(4)</a>
interface, and disk arrays attached to a RAID controller.
d121 3
a123 3
drive '0', the second will be '1', etc.
So, the first IDE-like disk will be wd0, the third SCSI-like disk will
be sd2.
d125 2
a126 1
you would have sd0, sd1, wd0, wd1, and wd2 on that machine.
d130 1
d132 7
a138 6
<li>Drives may not be numbered in the same order as your boot ROM
attempts to boot them (i.e., your system may attempt to boot what OpenBSD
identifies as wd2 or sd1).
Sometimes you may be able to change this, sometimes not.
<li>Removing or adding a disk may impact the identity of other drives on
the system.
d144 1
a144 1
two different things in OpenBSD and this leads to some confusion.
a145 2
<p>
The two types of "partitions" are:
d147 6
a152 8
  <li> "disklabel partitions" created with
  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel">
  disklabel(8)</a>
  (often called "filesystem partitions").
  <li> "fdisk partitions" created with
  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk">fdisk(8)</a>
  (often called "partition table partitions" or
  "Master Boot Record (MBR) partitions").
a154 1
<p>
d156 8
a163 7
OpenBSD filesystem partitions, but only some platforms also require
using fdisk(8) to manage Partition Table partitions.
On the platforms that use fdisk partitions, one fdisk partition is used
to hold all of the OpenBSD file systems, this partition is then sliced
up into disklabel partitions.
These disklabel partitions are labeled "a" through "p".
A few of these are "special":
d165 8
a172 9
  <li><b>a</b> -- On the boot disk, the 'a' partition is your root partition.
  <li><b>b</b> -- On the boot disk, the 'b' partition is automatically used
  as a swap partition.
  <li><b>c</b> -- On all disks, the 'c' partition is the entire disk,
  from the first sector to the last.
  (Hint: if you wish to totally clear a drive, you write zeros to the
  'c' partition of the drive.
  More commonly, the 'c' partition is used by utilities like 'fdisk' to
  install boot loaders, partition tables, etc.)
d177 6
a182 5
An OpenBSD filesystem is identified by the disk it is on, plus the file
system partition on that disk.
So, file systems may be identified by identifiers like "sd0a" (the "a"
partition of the first "sd" device), "wd2h" (the "h" partition of the
third "wd" device), or "sd1c" (the entire second sd device).
d184 1
a184 1
<tt>/dev/rsd0a</tt> would be the device file for the "raw" (character)
d188 3
a190 8
Some utilities will let you use the "shortcut" name of a partition
(i.e., "sd0d") or a drive (i.e., "wd1") instead of the actual device
name (<tt>/dev/sd0d</tt> or <tt>/dev/wd1c</tt>, respectively).

<p>
Note again that if you put data on <tt>wd2d</tt>, then later remove
<tt>wd1</tt> from the system and reboot, your data is now on
<tt>wd1d</tt>, as your old <tt>wd2</tt> is now <tt>wd1</tt>.
d201 4
a204 7
This number is generated automatically as a random number when a
disklabel is first created, though defaults to all zeros on an existing
(pre OpenBSD 4.8) labels.
disklabel(8) can be used to change the UID if desired.
These UIDs are "persistent" -- if you identify your disks this way,
drive <tt>f18e359c8fa2522b</tt> will always be
<tt>f18e359c8fa2522b</tt>, no matter what order or how it is attached.
d206 2
a207 2
partition letter, for example, <tt>f18e359c8fa2522b.d</tt> is the 'd'
partition of the disk <tt>f18e359c8fa2522b</tt> and will ALWAYS refer
a209 12

<p>
These UIDs can be used to identify the disks almost anywhere a partition
or device would be specified, for example in <tt>/etc/fstab</tt> (which
uses them by default in new installs) or in command lines.
Of course, disks and partitions may also be identified in the
traditional way, by device, unit number and partition (i.e., /dev/sd1f),
and this can be done interchangeably.

<p>
It is worth noting that the DUID is a property of the disklabel, though
as OpenBSD only supports one disklabel per disk, this is mostly academic.
@


1.271
log
@tweak previous;
@
text
@d54 1
a54 1
<li><a href="#NegSpace"        >14.14 - Why does <tt>df(1)</tt> tell me
d56 1
a56 1
<li><a href="#OhBugger"        >14.15 - Recovering partitions after deleting
d58 1
a58 1
<li><a href="#foreignfs"       >14.16 - Can I access data on filesystems other
d61 1
a61 1
  <li><a href="#foreignfsafter">14.16.1 - The partitions are not in my
d64 1
a64 1
<li><a href="#flashmem"        >14.17 - Can I use a flash memory device with
d67 1
a67 1
  <li><a href="#flashmemUSB"   >14.17.1 - Flash memory as a portable storage
d69 2
a70 2
  <li><a href="#flashmemBoot"  >14.17.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive"  >14.17.3 - How can I make a "live" bootable
d73 1
a73 1
<li><a href="#DiskOpt"         >14.18 - Optimizing disk performance</a>
d75 2
a76 2
  <li><a href="#Optsoftu"      >14.18.1 - Soft updates</a>
  <li><a href="#Optmaxvnodes"  >14.18.2 - Size of the namei(9) cache</a>
d78 2
a79 2
<li><a href="#Async"           >14.19 - Why aren't we using async mounts?</a>
<li><a href="#altroot"         >14.20 - Duplicating your root partition:
d81 1
a81 1
<li><a href="#softraid"        >14.21 - How do I use softraid?</a>
d83 5
a87 5
  <li><a href="#softraidDI"    >14.21.1 - Installing to a mirror</a>
  <li><a href="#softraidFDE"   >14.21.2 - Full disk encryption</a>
  <li><a href="#softraidCrypto">14.21.3 - Encrypting external disks</a>
  <li><a href="#softraidDR"    >14.21.4 - Disaster recovery</a>
  <li><a href="#softraidNotes" >14.21.5 - Softraid notes</a>
d1794 1
a1794 1
<h2 id="NegSpace">14.14 - Why does <tt>df(1)</tt> tell me I have over 100% of
d1817 1
a1817 1
<h2 id="OhBugger">14.15 - Recovering partitions after deleting the
d1867 1
a1867 1
<h2 id="foreignfs">14.16 - Can I access data on filesystems other than FFS?</h2>
d2018 1
a2018 1
<h3 id="foreignfsafter">14.16.1 - The partitions are not in my disklabel!
d2093 1
a2093 1
<h2 id="flashmem">14.17 - Can I use a flash memory device with OpenBSD?</h2>
d2095 1
a2095 1
<h3 id="flashmemUSB">14.17.1 - Flash memory as a portable storage device</h3>
d2230 2
a2231 1
<h3 id="flashmemBoot">14.17.2 - Flash memory as bootable storage</h3>
d2351 1
a2351 1
<h3 id="flashmemLive">14.17.3 - How do I create a bootable "live" USB
d2434 1
a2434 1
<h2 id="DiskOpt">14.18 - Optimizing disk performance</h2>
d2449 1
a2449 1
<h3 id="Optsoftu">14.18.1 - Soft updates</h3>
d2462 1
a2462 1
<h3 id="Optmaxvnodes">14.18.2 - Size of the namei(9) cache</h3>
d2486 1
a2486 1
<h2 id="Async">14.19 - Why aren't we using async mounts?</h2>
d2529 1
a2529 1
<h2 id="altroot">14.20 - Duplicating your root partition: altroot</h2>
d2568 1
a2568 1
<h2 id="softraid">14.21 - How do I use softraid?</h2>
d2631 1
a2631 1
<h3 id="softraidDI">14.21.1 - Installing to a mirror</h3>
d2781 1
a2781 1
<h3 id="softraidFDE">14.21.2 - Full disk encryption</h3>
d2872 1
a2872 1
<h3 id="softraidCrypto">14.21.3 - Encrypting external disks</h3>
d2940 1
a2940 1
<h3 id="softraidDR">14.21.4 - Disaster recovery</h3>
d3037 1
a3037 1
<h3 id="softraidNotes">14.21.5 - Softraid notes</h3>
@


1.270
log
@Use DUIDs instead of device names in the altroot section. While there,
tighten up the text a little, adjust formatting, fix manual links and
use the second person consistently.

Prompted by a question by Stefan Wollny,
input and help natano@@, deraadt@@
@
text
@d2536 4
a2539 3
and a partition is specified in <tt>/etc/fstab</tt> as mounting
to <tt>/altroot</tt> with the mount options of <tt>xx</tt>, every night
the entire contents of the root partition will be duplicated to the
@


1.269
log
@Use the same style of warnings as in faq8.html
@
text
@d2530 1
a2530 1
OpenBSD provides an "altroot" facility in the
d2533 2
a2534 2
If the environment variable <tt>ROOTBACKUP=1</tt> is set
in either <tt>/etc/daily.local</tt> or root's
d2537 1
a2537 1
to <tt>/altroot</tt> with the mount options of "xx", every night
d2540 5
a2544 2
Assuming we want to back up our root partition to wd1a, we add the
following to <tt>/etc/fstab</tt>
d2547 1
a2547 1
/dev/wd1a /altroot ffs xx 0 0
d2556 1
a2556 1
As the altroot process will capture your <tt>/etc</tt> directory, this
d2558 5
a2562 18

<p>
This is a "disk image" copy done with dd(8), not a file-by-file copy, so
your <tt>/altroot</tt> partition should be exactly the same size as your
root partition or larger.
Also, excessively large root partitions should be avoided so the process
does not take too long.

<p>
For full redundancy, the rest of the partitions should be duplicated as
well, using <a href="#softraid">softraid</a> disk, dump(8)/restore(8),
rsync, etc.
It can be done manually, or part of a regular schedule, such as the
<tt>weekly.local</tt>, <tt>daily.local</tt>, or <tt>monthly.local</tt>
scripts.

<p>
Generally, you will want your "altroot" partition to be on a different
a2564 10
It is possible to have an "altroot" on the same disk as your boot drive,
but the benefit of this is limited.

<p>
Note that we did not specify the altroot device by DUID, but by device
name.
We probably want to be pushing from the boot device to the secondary
device, which can end up changing if the drive order is changed.
For this reason, you may want to specify the root and altroot in
<tt>/etc/fstab</tt> as a device name, not a DUID.
d3046 1
a3046 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>
file.
You may not want to specify the root device by DUID.
@


1.268
log
@Unify spelling of ISO 9660
@
text
@d513 4
a516 3
<blockquote><i>
Warning: Any time you are fiddling with your disklabel, you are putting all
the data on your disk at risk.
d518 1
a518 1
</i></blockquote>
d2212 1
a2212 1
<p>
d2218 1
a2219 1
<p>
@


1.267
log
@- remove section 1.9 "what's new in 5.8" (just read the release page)
- remove section 2.1 "web pages of interest"
- amd 64 -> amd64
- mail list -> mailing list
- clean up table of contents
- remove "back" button on index (browsers can do this by themselves now)

ok tb
@
text
@d1736 1
a1736 1
Notice that since this is an ISO-9660 image, as used by CDs and DVDs,
d1871 1
a1871 1
Other supported filesystems include: ext2/3/4 (Linux), ISO9660 and UDF
@


1.266
log
@This page is a MONSTER.  Direly needs a strict diet.

Try to tame it the usual way:
- zap trailing white space
- line break at end of sentences
- try to obtain something approximating a uniform look
- normalize manual links
- chop up endless sentences into digestible pieces
- fix broken links
- remove stale comments

joint work with tj@@
@
text
@d4 5
@


1.265
log
@remove two strange sentences about comparing write speeds to the time
it takes to rebuild an array; suggested by stefan wollny

cut up two run-on sentences into smaller pieces while here.

tb agrees
@
text
@d15 1
a15 1
<img alt="[OpenBSD]" height=30 width=141 src="../images/smalltitle.gif" border="0">    
d25 1
d63 1
a63 1
                                device</a> 
d71 1
a71 1
  <li><a href="#Optmaxvnodes"  >14.18.2 - Size of the namei() cache</a>
a88 1
<p>
d91 1
a91 1
<tt>INSTALL.&lt;arch&gt;</tt> file for your 
a94 1
<p>
d96 1
d101 1
a101 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd&amp;sektion=4">wd(4):</a>
d104 1
a104 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wdc&amp;sektion=4">wdc(4)</a>
d106 1
a106 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pciide&amp;sektion=4">pciide(4)</a>
d108 1
a108 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd&amp;sektion=4">sd(4):</a>
d111 2
a112 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ahci&amp;sektion=4">ahci(4)</a>
interface, and disk arrays attached to a RAID controller. 
a132 1

d141 8
a148 6
<li> "disklabel partitions" created with 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
(often called "filesystem partitions").
<li> "fdisk partitions" created with 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
(often called "partition table partitions" or "Master Boot Record (MBR) partitions").
d153 1
a153 1
OpenBSD filesystem partitions, but only some platforms also require 
d161 9
a169 9
<li><b>a</b> -- On the boot disk, the 'a' partition is your root partition.
<li><b>b</b> -- On the boot disk, the 'b' partition is automatically used
as a swap partition.
<li><b>c</b> -- On all disks, the 'c' partition is the entire disk,
from the first sector to the last.
(Hint: if you wish to totally clear a drive, you write zeros to the
'c' partition of the drive.
More commonly, the 'c' partition is used by utilities like 'fdisk' to
install boot loaders, partition tables, etc.)
d173 1
d186 1
a186 2
name ("<tt>/dev/sd0d</tt>" or "<tt>/dev/wd1c</tt>", respectively).

d197 1
d200 2
a201 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=diskmap&amp;sektion=4"
>diskmap(4)</a> device.
d207 1
a207 1
drive "<tt>f18e359c8fa2522b</tt>" will always be
a226 1

d229 2
a230 2
Be sure to check the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
a252 2

<p>
a258 1
<p>
d267 1
a267 1
*0: A6    3   0  1 -  552 254 63 [       48195:     8835750 ] OpenBSD     
d269 2
a270 2
 2: 00    0   0  0 -    0   0  0 [           0:           0 ] unused      
 3: 00    0   0  0 -    0   0  0 [           0:           0 ] unused      
d273 3
a275 6
<p>
In this example we are viewing the fdisk output of the first SCSI-like
drive.
We can
see the OpenBSD partition (id A6) and its size. The * tells us that the
OpenBSD partition is the bootable partition.
d278 4
a281 3
In the previous example we just viewed our information. What if we want
to edit our partition table? Well, to do so we must use the <b>-e</b>
flag.  This will bring up a command line prompt to interact with fdisk.
d302 1
a302 1
fdisk: 1&gt; 
d305 1
a305 3
<p> 

<p>Here is an overview of the commands you can use when you choose the
d309 48
a356 36
<li><b>help</b>  Display a list of commands that fdisk understands in
the interactive edit mode.
<li><b>reinit</b>  Initialize the currently selected, in-memory copy of
the boot block.
This is a handy way to quickly slap a "full-disk" OpenBSD partition in
place, update the boot code, and in general, make the system ready for
OpenBSD (and nothing but OpenBSD).
<li><b>disk</b>  Display the current drive geometry that fdisk is using.
You are given a chance to edit it if you wish.
<li><b>setpid</b>  Change the partition identifier of the given
partition table entry. This command is particularly useful for
reassigning an existing partition to OpenBSD.
<li><b>edit</b>  Edit a given table entry in the memory copy of the
current boot block.  You may edit either in CHS geometry mode, or in
sector offsets and sizes.
<li><b>flag</b>  Make the given partition table entry bootable. Only one
entry can be marked bootable. If you wish to boot from an extended
partition, you will need to mark the partition table entry for the
extended partition as bootable.
<li><b>update</b>  Update the machine code in the memory copy of the
currently selected boot block.
<li><b>select</b>  Select and load into memory the boot block pointed to
by the extended partition table entry in the current boot block.
<li><b>swap</b> Swaps two MBR entries, so you can re-order the MBR.
<li><b>print</b>   Print the currently selected in-memory copy of the
boot block and its MBR table to the terminal.
<li><b>write</b>   Write the in-memory copy of the boot block
to disk. You will be asked to confirm this operation.
<li><b>exit</b>  Exit the current level of fdisk, either returning to
the previously selected in-memory copy of a boot block, or exiting the
program if there is none.
<li><b>quit</b>  Exit the current level of fdisk, either returning to
the previously selected in-memory copy of a boot block, or exiting the
program if there is none.  Unlike exit it does write the modified block
out.
<li><b>abort</b>   Quit program without saving current changes.
d360 1
d362 24
a385 25
<!-- <li>On OpenBSD platforms which use fdisk, you should leave the first
track free.
This leaves room for the Master Boot Record, which is where the fdisk
partition table resides.  (not sure if this is true) -->
<li>fdisk(8) offers the ability to specify partitions both in raw sectors
and in Cylinder/Head/Sector formats.
Both options are given for a reason -- some tasks are easier
accomplished one way, others the other way.
Don't lock yourself into only using one option.
<li>A totally blank disk will need to have the master boot record's boot
code written to the disk before it can boot.
You can use the "reinit" or "update" options to do this.
If you fail to do this, you can write a valid partition table with
fdisk, but not have a bootable disk.
You may wish to update the existing boot code anyway if you are
uncertain of its origin.
<li>If your system has a "maintenance" or "diagnostic" partition, it is
recommended that you leave it in place or install it BEFORE installing
OpenBSD.
<li> For historical reasons, "q" saves changes and exits the program,
and "x" exits without saving.
This is the opposite of what many people are now used to in other
environments.
fdisk(8) does not warn before saving the changes, so use with care.

d388 1
a389 1
<h2 id="disklabel">14.3 - Using OpenBSD's disklabel(8)</h2>
d391 1
a391 2
  
<p>
d393 2
a394 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
d423 2
a424 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=5">disklabel(5)</a>
d430 5
a434 5
For example, on i386, you can
have 4 primary partitions, but with 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8),</a>
you use one of these 'primary' partitions to store all of your 
OpenBSD partitions (for example, 'swap', '/', '/usr', '/var', etc.), 
a438 1
<p>
a458 1

a460 1
<p>
d463 1
a463 1
The following command will show you the current disklabel, without 
d470 1
a470 1
label: SAMSUNG HD154UI 
d481 1
a481 1
drivedata: 0 
d486 2
a487 2
  b:          4195296          1024128    swap                   
  c:       2930277168                0  unused                   
a493 1
<p>
d499 2
a500 2
originally), and a full editor, such as 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vi&amp;sektion=1">vi(1)</a>.
d508 5
a512 7
<p>
<blockquote>
<i>Warning: Any time you are fiddling with your disklabel, you are
putting all the data on your disk at risk.
Make sure your data is backed up before editing an existing
disklabel!</i>
</blockquote>
a513 1
<p>
d520 2
a521 2
> a k
offset: [36680096] 
d524 2
a525 2
FS type: [4.2BSD] 
> p m
d529 2
a530 2
  b:          2048.5M          1024128    swap                   
  c:       1430799.4M                0  unused                   
d535 3
a537 3
  k:       1048575.9M         36680192  4.2BSD   8192 65536    1 
> q
Write new label?: [y] 
d543 1
a543 1
the disklabel (i.e., you deleted a partition, or you just like making 
d546 1
a546 1
Note that while disklabel(8) does some sanity checking, it is very 
d560 1
a560 1
On the boot device, "a" is reserved for the root partition, and "b" is 
d562 1
a562 1
Other devices may use all fifteen partitions other than "c" for file 
a564 1
<p>
d566 1
d568 51
a618 59
<li><b>Get help:</b>  In the command-driven mode, hitting "?" will produce a 
list of available commands.
"M" will show the man page for disklabel(8).

<li><b>Reset to default:</b> In some cases, you may wish to completely
restart from scratch and delete all existing disklabel information.
The "D" command will reset the label back to default, as if there had
never been a disklabel on the drive.

<li><b>Duplicating a disklabel:</b> In some cases, you may wish to 
duplicate the partitioning from one disk to another, but not precisely
(for example, you wish to have the same partitions, but on different 
sizes of drives).
Use the '-e' (full-screen editor) mode of disklabel(8) to capture the 
partitions of the "model" drive, paste it into the new drive, remove the 
model's 'c' partition, save, and you have copied the disk layout to the
other drive without altering its basic parameters.

<li>(sparc/sparc64) <b>Don't put swap at the very beginning of your
disk.</b>
While Solaris often puts swap at the very beginning of a disk, OpenBSD
requires the boot partition to be at the beginning of the disk.

<li>(fdisk platforms) <b>Leave first track free:</b>
On platforms using fdisk(8), you should leave the first logical track
unused, both in disklabel(8) and in fdisk(8).
On "modern" computers (i.e., almost everything that will run OpenBSD),
the exact amount doesn't really matter, though for performance reasons
on the newest disks, having partitions aligned at 4k boundaries is good
for performance.
For this reason, OpenBSD now defaults to starting the first partition at
block 64 instead of 63.

<li><b>Devices without a disklabel:</b>
If a device does not currently have an OpenBSD disklabel on it but has 
another file system (for example, a disk with a pre-existing FAT32 file
system), the OpenBSD kernel will "create" one in memory, and that can form
the basis of a formal OpenBSD disklabel to be stored on disk.
However, if a disklabel is created and saved to disk, and a non-OpenBSD
file system is added later, the disklabel will not be automatically
updated.
You must do this yourself if you wish OpenBSD to be able to access this
file system.
More on this <a href="faq14.html#foreignfsafter">below</a>.

<li><b>"q" vs. "x":</b>
For historical reasons, while in the command-driven editor mode, "q"
saves changes and exits the program, and "x" exits without saving.
This is the opposite of what many people are now used to in other
environments.
disklabel(8) does warn before saving the changes, though it will
"x" quickly and quietly.

<li><b>Auto-partitioning:</b>
New users are encouraged to use the 'A' command to auto-create a
recommended disklabel.
You can then edit or alter the auto-created label as you need.


a620 1

d623 1
a623 1
<p>
d625 4
a628 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
(<i>amd64/i386 only</i>) and 
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
d632 3
a634 2
amd64/i386 folks should start with fdisk.  Other architectures can ignore this.
In the below example we're adding a third SCSI-like drive to the system. 
d642 2
a643 1
Next you need to create a disklabel for it.  This will seem confusing.
d662 1
a662 1
like disklabel to function! 
d664 7
a670 5
Total sectors is the total size of the disk.  Say
this is a 3 gigabyte disk.  Three gigabytes in disk manufacturer terms
is 3000 megabytes.  So divide 6185088/3000 (use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bc&amp;sektion=1">bc(1)</a>).
You get 2061.  So, to make up partition sizes for a, d, e, f, g, ...
d673 3
a675 2
"sectors/track" reported earlier in disklabel's output.  For us it is
63.  The offset for each partition afterwards should be a combination of
d683 2
a684 1
6185088-63 = 6185025.  Your partition is
d687 1
a687 1
    d:  6185025       63    4.2BSD     1024  8192    16 
d696 4
a699 3
That was a lot.  But you are not finished.  Finally, you need to create
the filesystem on that disk using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs&amp;sektion=8">newfs(8)</a>.
a704 1
<p>
d707 1
a707 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&amp;sektion=8">dmesg(8)</a>
d712 2
a713 1
Say you want to put it on /u.  First, make the directory /u.  Then, mount it.
a719 1
<p>
d721 1
a721 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a>.
d727 3
a729 3
<p>
What if you need to migrate an existing directory like /usr/local? You
should mount the new drive in /mnt and copy /usr/local to the /mnt directory.
d737 4
a740 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a>
file to show that the /usr/local partition is now /dev/sd2d (your
freshly formatted partition). Example:
d746 4
a749 5
<p>
Reboot into single user mode with <b>boot -s</b>, move the existing
/usr/local to /usr/local-backup (or delete it if you feel lucky) and
create an empty directory /usr/local. Then reboot the system, and voila,
the files are there!
d754 1
d769 1
a769 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=savecore&amp;sektion=8">savecore(8)</a>
d790 1
a790 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&amp;sektion=8">swapctl(8)</a>
d795 1
a795 1
<p>
d814 2
a815 2
the per-process limits first with 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=csh&amp;sektion=1">csh(1)</a>'s unlimit,
d817 1
a817 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sh&amp;sektion=1">sh(1)</a>'s ulimit.)
d828 7
a834 5
The file must not reside on a filesystem which has soft updates
enabled (they are disabled by default).  To start out, you can see how
much swap you currently have and how much you are using with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&amp;sektion=8">swapctl(8)</a>
utility. You can do this by using the command:
a841 1
<p>
d843 5
a847 4
current statistics. In the above example there is only one device named
&quot;swap_device&quot;. This is the predefined area on disk that is
used for swapping. (Shows up as partition b when viewing disklabels) As
you can also see in the above example, that device isn't getting much
d852 5
a856 5
The first step to setting up a file as a swap device is to create the
file. It's best to do this with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd&amp;sektion=1">dd(1)</a>
utility. Here is an example of creating the file <i>/var/swap</i> that
is 32M in size.
d865 2
a866 3
<p>
Once this has been done, we can turn on swapping to that device. Use the
following command to turn on swapping to this device
a872 1
<p>
a883 1
<p>
d886 2
a887 2
the next boot time also. If this line is not added, you won't have this
swap device configured.
a894 1

a896 1
<p>
d903 2
a904 2
directory entries to be removed from the FFS code. Thus, a large
performance increase is seen in disk writing performance.
d907 3
a909 3
Enabling soft updates must be done with a mount-time option. When
mounting a partition with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&amp;sektion=8">mount(8)</a> 
d911 3
a913 2
that partition. Below is a sample
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a></i> 
d921 7
a927 5
<p>
Note to sparc users: Do not enable soft updates on sun4 or sun4c
machines.  These architectures support only a very limited amount of
kernel memory and cannot use this feature.  However, sun4m machines are
fine.
a928 3
<p>
<a name="BootAmd64"></a>
<h2 id="Boot386">14.7 - How do OpenBSD/i386 and OpenBSD/amd64 boot?</h2>
d933 1
d935 131
a1065 124
<li><b><i>Master Boot Record (MBR):</i></b> The Master Boot Record is
the first 512 bytes on the disk.
It contains the primary partition table and a small program to load
the Partition Boot Record (PBR).
Note that in some environments, the term "MBR" is used to refer to only
the code portion of this first block on the disk, rather than the whole
first block (including the partition table).
It is critical to understand the meaning of "initialize the MBR" -- in
the terminology of OpenBSD, it would involve rewriting the entire MBR,
clearing any existing partition table, not just the code, as it
might on some systems.
You will often not want to do this.
Instead, use fdisk(8)'s "-u" command line option
("<tt>fdisk -u wd0</tt>") to (re)install the MBR boot code.

<p>
While OpenBSD includes its own MBR code, you are not obliged
to use it, as virtually any MBR code can boot OpenBSD.  
The MBR is manipulated by the fdisk(8) program, which is used both to 
edit the partition table, and also to install the MBR code on the 
disk.

<p>
OpenBSD's MBR announces itself with the message:

<blockquote><pre>
Using drive 0, partition 3.
</pre></blockquote>

showing the disk and partition it is about to load the PBR from.
In addition to the obvious, it also shows a trailing period ("."), which
indicates this machine is capable of using LBA translation to boot.
If the machine were incapable of using LBA translation, the above
period would have been replaced with a semicolon (";"), indicating
CHS translation:

<blockquote><pre>
Using drive 0, partition 3;
</pre></blockquote>

Note that the trailing period or semicolon can be used as an indicator
of the "new" OpenBSD MBR, introduced with OpenBSD 3.5.

<p>
<li><b><i>Partition Boot Record (PBR):</i></b>
The Partition Boot Record, also called the PBR or 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386">biosboot(8)</a>
(after the name of the file that holds the code) is the first 512 bytes
of the OpenBSD partition of the disk.
The PBR is the "first-stage boot loader" for OpenBSD.
It is loaded by the MBR code,
and has the task of loading the OpenBSD second-stage boot loader,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>.
Like the MBR, the PBR is a very tiny section of code and data,
only 512 bytes, total.
That's not enough to have a fully filesystem-aware application, so
rather than having the PBR locate <tt>/boot</tt> on the disk, the 
BIOS-accessible location of <tt>/boot</tt> is physically coded into the
PBR at installation time.

<p>
The PBR is installed by
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&amp;sektion=8&amp;arch=i386">installboot(8)</a>,
which is further described <a href="faq14.html#InstBoot">later in this
document</a>.
The PBR announces itself with the message:
<blockquote><pre>
Loading...
</pre></blockquote>
printing a dot for every file system block it attempts to load.
Again, the PBR shows if it is using LBA or CHS to load, if it has 
to use CHS translation, it displays a message with a semicolon:
<blockquote><pre>
Loading;...
</pre></blockquote>

<p>
<li><b><i>Second Stage Boot Loader, <tt>/boot</tt>:</i></b> <tt>/boot</tt> is
loaded by the PBR, and has the task of accessing the OpenBSD file system
through the machine's BIOS, and locating and loading the actual kernel.  
boot(8) also passes various options and information to the kernel.
<p>
boot(8) is an interactive program.  After it loads, it attempts to locate 
and read <tt>/etc/boot.conf</tt>, if it exists (which it does not on a 
default install), and processes any commands in it.  Unless instructed
otherwise by <tt>/etc/boot.conf</tt>, it then gives the user a prompt:

<blockquote><pre>
probing: pc0 com0 com1 apm mem[636k 190M a20=on]
disk: fd0 hd0+
>> OpenBSD/i386 BOOT 3.26
boot>
</pre></blockquote>

It gives the user (by default) five seconds to start giving it other
tasks, but if none are given before the timeout, it starts its default
behavior: loading the kernel, <tt>bsd</tt>, from the root partition of
the first hard drive.
The second-stage boot loader probes (examines) your system hardware,
through the BIOS (as the OpenBSD kernel is not loaded).
Above, you can see a few things it looked for and found:
<ul>
<li><b>pc0</b> - the standard keyboard and video display of an i386
system.
<li><b>com0, com1</b> - Two serial ports
<li><b>apm</b> - Advanced Power Management BIOS functions
<li><b>636k 190M</b> - The amount of conventional (below 1M) and
extended (above 1M) memory it found
<li><b>fd0 hd0+</b> - The BIOS disk devices found, in this case, one floppy and one hard
disk.
</ul>

The '+' character after the "hd0" indicates that the BIOS has told
<tt>/boot</tt> that this disk can be accessed via LBA.
When doing a first-time install, you will sometimes see a '*' after a
hard disk -- this indicates a disk that does not seem to have a valid
OpenBSD disk label on it. 

<p>
<li><b><i>Kernel: <tt>/bsd</tt></i>:</b>  This is the goal of the boot process,
to have the OpenBSD kernel loaded into RAM and properly running.
Once the kernel has loaded, OpenBSD accesses the hardware directly,
no longer through the BIOS.

d1086 1
a1087 1
<h3>What can go wrong</h3>
d1089 49
a1137 49
<li><b>Bad/invalid/incompatible MBR:</b>
Usually, a used hard disk has some MBR code in place, but if the
disk is new or moved from a different platform, AND you don't answer "w"
to the "Use (W)hole disk or (E)dit the MBR?" question of the
<a href="faq4.html#InstDisks">installation process</a>, you may end up
with a disk without a valid MBR, and thus, it will not be bootable, even
though it has a valid partition table.

<p>
You may install the OpenBSD MBR on your hard disk using the fdisk
program.  Boot from your install media, choose "Shell" to get a command
prompt:

<blockquote><pre>
# <b>fdisk -u wd0</b>
</pre></blockquote>

You may also install a specific MBR to disk using fdisk:
<blockquote><pre>
# <b>fdisk -u -f /usr/mdec/mbr wd0 </b>
</pre></blockquote>

which will install the file <tt>/usr/mdec/mbr</tt> as your system's
MBR.
This particular file on a standard OpenBSD install happens
to be the standard MBR that is also built into fdisk, but any other
MBR could be specified here.

<p>
<li><b>Invalid <tt>/boot</tt> location installed in PBR:</b>
When installboot(8) installs the partition boot record, it writes the
block number and offset of <tt>/boot</tt>'s inode into the PBR.
Therefore, deleting and replacing <tt>/boot</tt> without re-running
<a href="faq14.html#InstBoot">installboot(8)</a> will render
your system unbootable, as the PBR will load whatever happens to be 
pointed to by the inode specified in it, which will almost certainly no
longer be the desired second-stage boot loader!

Since <tt>/boot</tt> is being read using BIOS calls, old versions of 
the PBR were sensitive to BIOS disk translation.
If you altered the
drive's geometry (i.e., took it out of one computer that uses CHS
translation and moving it into one that uses LBA translation, or even
changed a translation option in your BIOS), it would have <i>appeared to the BIOS</i>
to be in a different location (a different numerical block must be accessed
to get the same data from the disk), so you would have had to run
installboot(8) before the system could be rebooted.
The new (as of OpenBSD 3.5 and later) PBR is much more tolerant to 
changes in translation.
d1141 2
a1142 1
and somewhat cryptic.  Most likely messages are:
d1145 16
a1160 15
<li><b>ERR R</b> -- BIOS returned an error when trying to read a
block from the disk.
Usually means exactly what it says: your disk wasn't readable.
<li><b>ERR M</b> -- An invalid 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=magic&amp;sektion=5">magic(5)</a>
number was read in the second-stage bootloader's header.
This generally means whatever it was that was read in was NOT
<tt>/boot</tt>, usually meaning installboot(8) was run incorrectly,
the /boot file was altered, or you have exceeded your BIOS's ability
to read a <a href="#LargeDrive">large disk</a>.

</ul>
Other error messages are detailed in the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386">biosboot(8)</a>
manual page.
d1165 7
a1171 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot_i386&amp;sektion=8&amp;arch=i386">boot_i386(8)</a>
<li><a href="http://www.ata-atapi.com/hiw.html">http://www.ata-atapi.com/hiw.html</a>
  Hale Landis' "How it Works" documents.
d1174 2
a1175 1
<h2 id="LargeDrive">14.8 - What are the issues regarding large drives with OpenBSD?</h2>
d1177 1
a1177 4
<p>
OpenBSD supports both FFS and FFS2 (also known as UFS and
UFS2) file systems.
FFS is the historic OpenBSD file system, FFS2 is new as of 4.3.
d1193 1
d1196 2
a1197 3
The boot process has to utilize (and is thus limited
by) the system's boot ROM.
 
d1204 2
a1205 2
It is worth noting that many relatively new computers which support 
larger than 128G drives actually have BIOS limitations of booting 
d1209 1
a1209 1
 
d1213 2
a1214 2
violated the above rule.  However, it might come back to haunt you in a
most unpleasant way:
d1217 3
a1219 2
  <li>You install on the 40G / partition.  It works, because the base 
OS and all its files (including /bsd) are within the first 504M.
d1221 1
a1221 1
  <li>You upgrade, and copy your new /bsd over the old one. 
d1225 6
a1230 6
<p>
Why?  Because when you copied "over" the new /bsd file, it didn't 
overwrite the old one, it got relocated to a new location on the 
disk, probably outside the 504M range the BIOS supported.  The 
boot loader was unable to fetch the file /bsd, and the 
system hung.
a1242 1
<p>
d1248 1
a1248 1
This is another good reason to <a href="faq4.html#Partitioning">partition 
d1252 1
d1255 1
a1255 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck&amp;sektion=8">fsck(8)</a>
d1262 1
a1262 1
so severe that it is usually unacceptable, except in special cases. 
d1266 1
a1266 1
system size expands, but you only have to fsck the disk space that is 
d1281 1
d1300 1
a1300 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ami&amp;sektion=4">ami(4)</a>
a1304 1
<p>
d1306 1
d1309 1
a1309 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8">fdisk(8)</a>
d1321 2
a1322 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>,
d1331 2
d1334 5
a1338 8
<h2 id="InstBoot">14.9 - Installing bootblocks (most, but not all platforms)</h2>

<p>
OpenBSD has a very robust boot
loader that is quite indifferent to drive geometries,
however, it is sensitive to where the file
<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386"
>/boot</a></tt> resides on the disk.
d1344 1
a1344 1
type "<tt>boot hd0a:/bsd</tt>" to force it to boot from the first hard
d1348 2
a1349 2
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386"
>biosboot(8)</a>) based on the position of the <tt>/boot</tt>
d1351 2
a1352 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&amp;sektion=8&amp;arch=i386"
>installboot(8)</a> program.
a1370 1
<p>
d1377 3
a1379 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&amp;sektion=8">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&amp;sektion=8">restore(8)</a>
d1389 5
a1393 5
<p>
Backing up to tape requires knowledge of where your file systems are
mounted. You can determine how your filesystems are mounted using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&amp;sektion=8">mount(8)</a>
command at your shell prompt. You should get output similar to this:
d1401 4
a1404 4
<p>
In this example, the root (/) filesystem resides physically on sd0a
which indicates a SCSI-like fixed disk 0, partition a. The /usr filesystem
resides on sd0h, which indicates SCSI-like fixed disk 0, partition h.
d1417 4
a1420 4
<p>
In this more advanced example, the root (/) filesystem resides
physically on sd0a. The /var filesystem resides on sd0d, the /home
filesystem on sd0e and finally /usr on sd0h.
d1423 4
a1426 3
To backup your machine, you will need to feed dump the name of each fixed
disk partition. Here is an example of the commands needed to backup the
simpler mount table listed above:
a1433 1
<p>
a1444 1
<p>
d1446 3
a1448 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&amp;sektion=8">dump(8)</a>
man page to learn exactly what each command line switch does. Here is a
brief description of the parameters used above:
d1451 5
a1455 4
<li><b>0</b> - Perform a level 0 dump, get everything
<li><b>a</b> - Attempt to automatically determine tape media length
<li><b>u</b> - Update the file /etc/dumpdates to indicate when backup was last performed
<li><b>f</b> - Which tape device to use (/dev/nrst0 in this case)
a1457 1
<p>
d1462 5
a1466 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt&amp;sektion=1">mt(1)</a>
command is used at the end to rewind the drive. Review the mt man page
for more options (such as eject).
d1469 2
a1470 2
If you are unsure of your tape device name, use dmesg to locate it. An
example tape drive entry in dmesg might appear similar to:
a1475 1
<p>
d1477 12
a1488 9
device name "<tt>nrst0</tt>" instead of the "<tt>st0</tt>" name that is seen in dmesg.
When you access <tt>st0</tt> as <tt>nrst0</tt> you are accessing the same physical tape
drive but telling the drive to not rewind at the end of the job and
access the device in raw mode. To back up multiple file systems to a
single tape, be sure you use the non-rewind device, if you use a rewind
device (<tt>rst0</tt>) to back up multiple file systems, you'll end up
overwriting the prior filesystem with the next one dump tries to write
to tape. You can find a more elaborate description of various tape drive
devices in the dump man page.
a1506 1
<p>
d1508 1
a1508 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cron&amp;sektion=8">cron(8)</a>
d1513 5
a1517 3
file system needs to be. You can use "<tt>df -h</tt>" to determine how much space
each partition is currently using. This will be handy when the drive
fails and you need to recreate your partition table on the new drive.
d1520 7
a1526 7
Restoring your data will also help reduce fragmentation. To ensure you
get all files, the best way of backing up is rebooting your system in
single user mode. File systems do not need to be mounted to be backed
up. Don't forget to mount root (/) r/w after rebooting in single user
mode or your dump will fail when trying to write out dumpdates. Enter
"<tt>bsd -s</tt>" at the boot&gt; prompt for single user mode.

a1529 1
<p>
a1541 1
<p>
d1543 2
a1544 2
dump tape to be listed. Following along from the above examples, 1 would
be your root (/) file system.
a1553 1
<p>
d1555 2
a1556 2
is a more advanced mount table 2 might be /var or another fs. The
sequence number matches the order in which the file systems are written
a1558 1

a1560 1
<p>
d1562 4
a1565 3
has failed completely. In the event you want to restore a single file
from tape, review the restore man page and pay attention to the
interactive mode instructions.
d1569 5
a1573 4
from tape can be a very quick process. The standard OpenBSD install/boot
CD already contains the required restore utility as well as the
binaries required to partition and make your new drive bootable. In most
cases, a CD and your most recent dump tape is all you'll need to
d1581 134
a1714 142
<li>
<p>
Boot from the OpenBSD install/boot floppy. At the menu selection, choose
Shell. Write protect and insert your most recent back up tape into the
drive.
<br>
<li>
<p>
Using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
command, create a primary OpenBSD partition on this newly installed
drive. Example:

<blockquote><pre>
# <b>fdisk -e sd0</b>
</pre></blockquote>

<p>
See <a href="#fdisk">fdisk FAQ</a> for more info.

<li>
<p>
Using the disklabel command, recreate your OpenBSD partition table
inside that primary OpenBSD partition you just created with fdisk.
Example:

<blockquote><pre>
# <b>disklabel -E sd0</b>
</pre></blockquote>

<p>
(Don't forget swap, see <a href="#disklabel">disklabel FAQ</a> for more
info)

<li>
<p>
Use the newfs command to build a clean file system on each partition you
created in the above step. Example:

<blockquote><pre>
# <b>newfs /dev/rsd0a</b>
# <b>newfs /dev/rsd0h</b>
</pre></blockquote>

<li>
<p>
Mount your newly prepared root (/) file system on /mnt. Example:

<blockquote><pre>
# <b>mount /dev/sd0a /mnt</b>
</pre></blockquote>

<li>
<p>
Change into that mounted root file system and start the restore process.
Example:

<blockquote><pre>
# <b>cd /mnt</b>
# <b>restore -rs 1 -f /dev/rst0</b>
</pre></blockquote>

<li>
<p>
You'll want this new disk to be bootable, use the following to write a
new MBR to your drive. Example:

<blockquote><pre>
# <b>fdisk -i sd0</b>
</pre></blockquote>

<li>
<p>
In addition to writing a new MBR to the drive, you will need to install
boot blocks to boot from it. The following is a brief example:

<blockquote><pre>
# <b>installboot -v -r /mnt sd0</b>
</pre></blockquote>

<li>
<p>
Your new root file system on the fixed disk should be ready enough so
you can boot it and continue restoring the rest of your file systems.
Since your operating system is not complete yet, be sure you boot back
up with single user mode. At the shell prompt, issue the following
commands to unmount and halt the system:

<blockquote><pre>
# <b>umount /mnt</b>
# <b>halt</b>
</pre></blockquote>

<li>
<p>
Remove the install/boot floppy from the drive and reboot your system. At
the OpenBSD boot&gt; prompt, issue the following command:

<blockquote><pre>
boot&gt; <b>bsd -s</b>
</pre></blockquote>

<p>
The bsd -s will cause the kernel to be started in single user mode which
will only require a root (/) file system.

<li>
<p>
Assuming you performed the above steps correctly and nothing has gone
wrong, you should end up at a prompt asking you for a shell path or press
return. Press return to use sh. Next, you'll want to remount root in r/w
mode as opposed to read only. Issue the following command:

<blockquote><pre>
# <b>mount -u -w /</b>
</pre></blockquote>

<li>
<p>
Once you have re-mounted in r/w mode, you can continue restoring your
other file systems. Example:

<blockquote><pre>
<i>(simple mount table)</i>
# <b>mount /dev/sd0h /usr; cd /usr; restore -rs 2 -f /dev/rst0</b>

<i>(more advanced mount table)</i>
# <b>mount /dev/sd0d /var; cd /var; restore -rs 2 -f /dev/rst0</b>
# <b>mount /dev/sd0e /home; cd /home; restore -rs 3 -f /dev/rst0</b>
# <b>mount /dev/sd0h /usr; cd /usr; restore -rs 4 -f /dev/rst0</b>
</pre></blockquote>

<p>
You could use "<b>restore rvsf</b>" instead of just rsf to view names of
objects as they are extracted from the dump set.

<li>
<p>
Finally after you finish restoring all your other file systems to disk,
reboot into multiuser mode. If everything went as planned, your system
will be back to the state it was in as of your most recent back up tape
and ready to use again.
a1718 1
<p>
d1721 4
a1724 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnd&amp;sektion=4">vnd(4)</a>
device. For example, if you have an ISO image located at
<i>/tmp/ISO.image</i>, you would take the following steps to mount the
image.
a1730 1
<p>
d1732 3
a1734 3
you must specify type of
<i>cd9660</i> when mounting it. This is true, no matter what type, e.g.
you must use type <i>ext2fs</i> when mounting Linux disk images.
d1744 2
a1745 3
<p>
For more information, refer to the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&amp;sektion=8">vnconfig(8)</a>
d1750 2
a1751 3
<p>
DMA IDE transfers, supported by 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pciide&amp;sektion=4">pciide(4)</a>
d1755 6
a1760 6
OpenBSD is aggressive and attempts to use the highest DMA Mode it can
configure. This will cause corruption of data transfers in some
configurations because of buggy motherboard chipsets, buggy drives,
and/or noise on the cables. Luckily, Ultra-DMA modes protect data
transfers with a CRC to detect corruption. When the Ultra-DMA CRC fails,
OpenBSD will print an error message and try the operation again.
a1766 1
<p>
d1768 2
a1769 2
(hopefully more reliable) Ultra-DMA mode. If Ultra-DMA mode 0 is hit,
then the drive downgrades to PIO mode.
d1784 2
a1785 2
<a href="faq5.html#config">config(8)</a> to change the flags on the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd&amp;sektion=4">wd(4)</a>
d1788 2
a1790 2
<h2 id="NegSpace">14.14 - Why does <tt>df(1)</tt> tell me I have over 100% of my disk
used?</h2>
d1794 1
a1794 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=df&amp;sektion=1">df(1)</a>.
d1798 1
a1798 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs&amp;sektion=8">newfs(8)</a>,
d1808 1
a1808 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs&amp;sektion=8">tunefs(8)</a>
d1811 2
a1812 1
<h2 id="OhBugger">14.15 - Recovering partitions after deleting the disklabel</h2>
a1813 1
<p>
a1840 1

d1852 2
a1853 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel;sektion=8">disklabel(8)</a>
d1858 1
a1858 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount;sektion=8">mount(8)</a>
d1865 2
a1866 1
Yes. Other supported filesystems include: ext2/3/4 (Linux), ISO9660 and UDF
d1871 3
a1873 2
We will give a general overview on how to use one of these filesystems
under OpenBSD. To be able to use a filesystem, it must be mounted.
d1875 1
a1875 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&amp;sektion=8">mount(8)</a>
d1880 3
a1882 3
First, you must know on which device your filesystem is located. This can be
simply your first hard disk, <tt>wd0</tt> or <tt>sd0</tt>, but it may be
less obvious.
d1885 1
a1885 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&amp;sektion=1">dmesg(1)</a>
a1892 1
<p>
d1894 1
a1894 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>.
d1898 1
a1898 1
# sysctl hw.disknames
a1906 1
<p>
d1910 2
a1911 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>.
d1926 2
a1927 2
afterwards. This will be explained in <a href="#foreignfsafter">this
subsection</a>.
d1936 1
a1936 1
label: ST340016A       
d1947 1
a1947 1
drivedata: 0 
d1964 1
a1964 1
  o:      13783707      64372518  ext2fs 
a1967 1
<p>
d1970 3
a1972 3
well as a few 'unknown' partitions. On i386 and amd64 systems, you can
usually find out more about those using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
a1997 1
<p>
d2012 2
a2013 1
<h3 id="foreignfsafter">14.16.1 - The partitions are not in my disklabel! What should I do?</h3>
d2021 2
a2022 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>.
d2036 1
a2036 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
d2040 1
a2040 1
# fdisk wd0
d2060 1
a2060 1
# fdisk wd0
d2088 1
d2110 1
a2110 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=umass&amp;sektion=4">umass(4)</a>
d2117 1
a2117 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&amp;sektion=1">dmesg(1)</a>
d2130 2
a2131 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
d2157 2
a2158 1
<h4>You received the memory device from someone with whom you want to exchange data</h4>
a2159 1
<p>
a2166 1

d2170 1
a2170 1
label: DIGITAL FILM    
d2184 1
a2184 1
drivedata: 0 
d2188 1
a2188 1
  c:        251904             0  unused      0     0      # Cyl     0 -   122 
d2227 1
d2239 1
a2239 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd&amp;sektion=4">sd(4)</a>
d2241 2
a2242 2
When attached to an IDE adapter, it will show up as a 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wd&amp;sektion=4">wd(4)</a>
d2258 1
a2258 1
than the traditional "<tt>/dev/sd0X</tt>" notation.
d2269 1
d2271 71
a2341 71
<li><b>Speed:</b> In general, flash devices are much slower than hard disks,
especially when it comes to writing.
Using <a href="#SoftUpdates">soft updates</a> will help this
considerably, as will using the "noatime" mount option.

<li><b>"Write fatigue":</b>
Much has been written about the finite number of times an individual
flash cell can be rewritten before failure.
Practically speaking, however, there are many ways a flash device can
fail, write fatigue is just one of them.
Modern flash devices will verify writes, and in the event of failure,
will automatically remap the failed sectors with one of the many spare
sectors.
Most users with most flash devices will not have to worry about "write
fatigue".
You would probably experience more down time due to failure of "clever"
tricks done to avoid writing to the flash drive than you will by just
using the drives as read-write media.

<li><b>Reliability:</b>
The fact that flash media has no moving parts has prompted many people
to assume the flash media is inherently more reliable than hard disks.
It is not wise to assume that switching to flash means you
don't need to worry about data loss or drive failure.
People have reported considerable variation in flash media quality,
it is probably best to consider flash storage as a silent and low-power
alternative to disk rather than a failure-free storage media.

<li><b>Creating a bootable USB flash drive:</b>
While a USB device can only be booted on a machine which can boot from
USB drives, it can be created on any machine with supported USB
hardware.
You will, of course, be unable to test your work until you can get to a
USB bootable system.

<li><b>Going from IDE to USB interfaces:</b>
Since flash media can be readable and writable through USB, IDE and 
other adapters, you can create bootable media with one type of adapter
but maintain or use it with another type of adapter.

<li><b>Mixing OpenBSD and other partitions on one device:</b>
OpenBSD treats the flash disk as any other disk so one can use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8">fdisk(8)</a>
to partition a flash device, as you would any hard disk.
You can then have OpenBSD file systems on one partition, and use another
partition for another file system, for example, FAT32.
However, not all OSs treat USB devices as "equals".
Windows, at least, will not attempt to use or create a partition that
doesn't start at the beginning of the device, nor will the Windows
partitioning tools allow you to partition the disk, though it will
respect existing partitions.
So, if you wish to create a USB flash drive that is bootable with
OpenBSD, but also functions as a FAT32-capable device on other OSs, you
would want to do something like this:

  <ol>
  <li>Partition the media with OpenBSD's fdisk, creating a partition
    of the type you desire for Windows to use at the beginning of the
    disk, and an OpenBSD partition at the end of the disk.
  <li>Install OpenBSD as normal to the OpenBSD fdisk partition, don't
    forget to flag the OpenBSD partition as "Active" for booting.
  <li>Format the other partition.
    This can be (and perhaps should be) done on the "target" OS
    (Windows, in this case).
  </ol>

Note that if the other partition's type is chosen appropriately, it is
possible to have OpenBSD access both partitions on the device.
So, a Windows user could populate the FAT32 partition with MP3 files
which could be played when they booted from the OpenBSD partition.

d2346 1
d2356 1
d2358 10
a2367 15
<li>A portable, secure "machine" you can carry with you in your pocket.

<li>Fix problems in OpenBSD and other installs with tools that aren't
available with <a href="faq4.html#bsd.rd">bsd.rd</a>.

<li>Evaluate hardware for OpenBSD compatibility at the point of purchase.

<li>Install machines that lack any other form of boot media.

<li>Collect <a href="faq4.html#SendDmesg">dmesg</a> outputs from your
friends' computers!
(As OpenBSD's dmesg is useful for identifying hardware, this can be a
good way to prep for the install of OTHER OSs on a machine -- make sure
you have all the needed drivers before starting).

d2372 5
a2376 5
<li>Mount your USB drive to the machine you are installing from.
<li>Boot your favorite OpenBSD install media.
<li><a href="faq4.html">Install</a> as normal, being careful to select
your flash drive as the install target.
<li>Boot from your newly created USB device.
d2386 39
a2424 36
<li>Install all packages and utilities you are likely to wish to have
available.
<li>Different target machines will likely have different NICs.
You could create a bunch of
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5">hostname.if(5)</a>
files in <tt>/etc</tt>, each containing just <tt>dhcp</tt>, for all the
NICs you are likely to encounter (fxp0, re0, rl0, bge0, bnx0, em0, etc.)
on USB-bootable machines, plus maybe sample wireless config files as
well.
OpenBSD will ignore all hostname.if(5) files for devices not present
at boot time.

<li>You may wish to have a copy of the install files and maybe any
desired package .tgz files so you can use the drive as an install
media (boot bsd.rd instead of letting it boot normally).

<li>On many machines, X will "Just Work" with no config file, but you
may wish to collect X config files for those systems that require them.

<li><a href="#SoftUpdates">Soft updates</a> will be something you will
want to use.

<li>For maximum flexibility, you probably want to use
<a href="../i386.html">i386</a> rather than
<a href="../amd64.html">amd64</a>.
However, if you wish to use it as an install media, you could have an
amd64 bsd.rd and install files in addition to i386.

<li>Use <a href="#DUID">DUIDs</a> to identify your partitions (default).
<li>You may find it desirable to have a FAT partition on the USB
drive, create it as detailed <a href="#flashmemBoot">above</a>.

<li>You may wish to use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid&amp;sektion=4">softraid(4)</a>
to encrypt a data partition.

a2426 1

d2429 1
a2429 3
<p>
Disk performance is a significant factor in the overall speed of your
computer.
d2435 1
a2435 2
OpenBSD has a few options to increase the speed of your disk
operations.
a2436 1
<p>
d2438 2
a2439 2
<li><a href="#Optsoftu">Soft updates</a>
<li><a href="#Optmaxvnodes">Size of the namei() cache</a>
d2455 1
a2455 1
<h3 id="Optmaxvnodes">14.18.2 - Size of the namei() cache</h3>
d2457 4
a2460 4
The name-to-inode translation (a.k.a., <!-- need to write the manual
page first... <a href="">namei(3)</a> --> namei()) cache controls
the speed of pathname to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inode&amp;sektion=5">inode(5)</a>
d2462 2
a2463 1
A reasonable way to derive a value for the cache, should a large number of namei()
d2465 1
a2465 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=systat&amp;sektion=1">systat(1)</a>,
d2467 5
a2471 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>,
(which calls this parameter "<tt>kern.maxvnodes</tt>") and to increase this
value until either the namei() cache hit rate improves or it is determined that
d2473 5
a2477 3
namei() cache. After the value has been determined, you can
set it at system startup time with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&amp;sektion=5">sysctl.conf(5)</a>.
a2480 1
<p>
a2482 1

d2484 3
a2486 2
other unixen)? Isn't it a much simpler, and therefore, a safer way of
improving performance in some applications?"
d2490 3
a2492 1
less safe. What happens in case of a power failure? Or a hardware problem?
d2494 3
a2496 2
the system. Check the man page for
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=mount&amp;sektion=8">mount(8)</a>."
d2498 13
a2510 10
<pre>
             async   All I/O to the file system should be done asynchronously.
                     This is a dangerous flag to set since it does not guaran-
                     tee to keep a consistent file system structure on the
                     disk.  You should not use this flag unless you are pre-
                     pared to recreate the file system should your system
                     crash.  The most common use of this flag is to speed up
                     restore(8) where it can give a factor of two speed in-
                     crease.
</pre>
a2511 1
<p>
d2513 5
a2517 4
from scratch after a crash, you can gain speed by using a separate  
partition for that data only, mounted async.  Again, do this <i>only if</i>
you don't mind the loss of all the data in the partition
when something goes wrong. For this reason,  
d2519 2
a2520 2
partitions are mounted asynchronously, as
they will get wiped and recreated on a reboot anyway.
d2522 1
a2523 1
<h2 id="altroot">14.20 - Duplicating your root partition: altroot</h2>
d2525 1
a2525 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=daily&amp;sektion=8">daily</a>
d2529 1
a2529 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=crontab&amp;sektion=5">crontab(5)</a>,
d2534 1
a2534 1
Assuming we want to back up our root partition to wd1a, we add the 
d2542 1
d2575 1
a2575 1
We probably want to be pushing from the boot device to the secondary 
d2577 1
a2577 1
For this reason, you may want to specify the root and altroot in 
a2579 1

d2583 2
a2584 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid">softraid(4)</a> 
subsystem works by emulating a 
d2591 2
a2592 2
such as RAID0, RAID1, RAID4, RAID5 or crypto. Note that only RAID0, RAID1,
RAID5 and crypto are fully supported at the moment.
a2596 1
<p>
d2598 1
d2600 41
a2640 40
<li>Before implementing any RAID solution, understand what it will and
will not do for you.
It is not a replacement for a good backup strategy.
It will not keep your system running through every hardware failure.
It may not keep your system running through a simple disk failure.
In the case of software RAID, it won't guarantee the ability to boot
from the surviving drive if your computer could not otherwise do so.

<li>Before going into production, you must understand how you use your
RAID solution to recover from failures.
The time to do this is BEFORE your system has had a failure event.
Poorly implemented RAID will often cause more down time than it will 
prevent.
This is even more true if it has caused you to become complacent on your
backups or other disaster planning.

<li>The bigger your RAIDed partitions are, the longer it will take to 
recover from an "event."
In other words, this is an especially bad time to allocate all of your 
cheap 500GB drives just because they are there.
Remirroring 500GB drives takes a much longer time than mirroring the
4GB that you actually use.
One advantage of software mirroring is one can control how much of
those "huge" drives is actually used in a RAID set.

<li>There is a reflex to try to RAID as much of your system as possible.
Even hardware which CAN boot from RAIDed drives will often have difficulty
determining when a drive has failed to avoid booting from it.
OpenBSD's <a href="#altroot">altroot</a> system can actually be better
for some applications, as it provides a copy of old configuration
information in case a change does not work quite as intended.

<li>RAID provides redundancy only for the disk system.
Many applications need more redundancy than just the disks, and for some
applications, RAID can be just added complication, rather than a real
benefit.
An example of this is a <a href="faq6.html#CARP">CARP'd</a> set of
firewalls provide complete fail over redundancy.
In this case, adding RAID (either via hardware or softraid) is just
added complication.
d2651 2
a2652 1
and ramdisk kernel. Disk setup may vary from platform to platform, and
d2660 4
a2663 3
softraid(4) drive before doing the install. Once the softraid(4) disk is
created, you will perform the install relatively normally, placing the
partitions you wish to be RAIDed on the newly configured drive.
d2695 2
a2696 2
disklabel(8)</a>. An "a" partition will be made on both of the drives for
the new RAID device.
d2706 1
a2706 1
offset: [2104515] 
d2715 2
a2716 2
layout on the first drive. That's because you can easily import the drive's
configuration directly with the
d2739 2
a2740 1
virtual disk interface driver. You won't be using "softraid1" or others.
d2763 4
a2766 3
highly recommended. Be <i>very careful</i> with this command; issuing it
on the wrong device could lead to a very bad day. This assumes that the
new softraid device was created as <tt>sd0</tt>.
d2774 4
a2777 3
media console. Create all the partitions on your new softraid disk
(<tt>sd0</tt> in our example here) that should be there, rather than on
<tt>wd0</tt> or <tt>wd1</tt> (the non-RAID disks).
d2799 3
a2801 2
command. This section covers installing OpenBSD to a single encrypted disk,
and is a very similar process to the previous one.
d2811 6
a2816 4
From here, you'll be given a shell within the live environment to manipulate 
the disks. For this example, we will install to the <tt>wd0</tt> SATA drive,
erasing all of its previous contents. You may want to write random data to
the drive first with something like the following:
d2823 3
a2825 3
CPU and disk, as well as the size of the disk. If you don't write random
data to the whole device, it may be possible for an adversary to deduce how
much space is actually being used.
d2840 1
a2840 1
offset: [2104515] 
d2854 2
a2855 2
New passphrase: 
Re-type passphrase: 
d2862 1
a2862 1
by default. 
d2886 6
a2891 4
As we just illustrated, cryptographic softraid(4) volumes are set up
rather simply. This section explains how you might do so for an external
USB flash drive, but can be applied to any disk device. If you already
read the section on full disk encryption, this should be very familiar.
d2895 12
a2906 12
<li>Overwrite the drive's contents with random data
<li>Create the desired RAID-type partition with disklabel(8)
<li>Encrypt the drive (note that the initial creation of the container and
attaching the container are done with the same bioctl(8) command)
<li>Zero the first megabyte of the new psuedo-partition
<li>Create a filesystem on the pseudo-device with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newfs">newfs(8)</a>
<li>Unlock and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount">mount(8)</a>
the new pseudo-device
<li>Access the files as needed
<li>Unmount the drive and detach the encrypted container
a2908 1
<p>
d2935 3
a2937 3
described as "deleting" the volume. In the case of crypto, however, it just
deactivates encrypted volume so it can't be accessed until it is activated
again with the passphrase.
d2945 1
d2973 1
a2973 1
The steps needed for system recovery can be performed in 
d2993 1
d3005 3
a3007 3
<li>Boot the system back up.
<li>Create appropriate partitions on your new drive
<li>Rebuild your RAID partition and reboot:
d3011 1
a3011 1
# <b>bioctl -R /dev/wd1m sd0</b> 
d3016 1
d3037 1
d3052 1
d3061 2
a3062 1
file. You may not want to specify the root device by DUID.
d3065 1
@


1.264
log
@fix mfs man page link; spotted by jungle boogie
@
text
@d3041 6
a3046 6
Softraid supports RAID1 with more than two "chunks", and the man page
examples show a three disk RAID1 configuration.
RAID1 simply duplicates the data across all the chunks of storage, two
gives full redundancy, three gives additional fault tolerance.
The advantage of RAID1 with three (or more!) disks or chunks is that in
event of one disk failure, you STILL have complete redundancy.
a3047 2
In theory, a three disk RAID1 is slower on writes than a two disk,
though should be much faster on writes than a rebuilding two disk RAID1.
@


1.263
log
@new section on full disk encryption, improved section on raid1, shuffle
a few other softraid bits around and clean up some formatting.

ok tb krw
@
text
@d2510 1
a2510 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=mfs&amp;sektion=8">mfs(8)</a>
@


1.262
log
@unify table of contents with actual page titles, fixing a few broken links
in the process. few minor tweaks while here.

ok tb
@
text
@d5 3
a7 2
<meta name= "description"   content= "OpenBSD FAQ 14 - Disk Setup">
<meta name= "copyright"     content= "This document copyright 1998-2014 by OpenBSD.">
d26 5
a30 5
<li><a href="#intro"  >14.1 - Disks and partitions</a>
<li><a href="#fdisk"      >14.2 - Using OpenBSD's fdisk(8)</a>
<li><a href="#disklabel"  >14.3 - Using OpenBSD's disklabel(8)</a>
<li><a href="#NewDisk"    >14.4 - Adding extra disks in OpenBSD</a>
<li><a href="#Swap"       >14.5 - How is swap handled?</a>
d32 3
a34 3
  <li><a href="#SwapAbout">14.5.1 - About swap</a>
  <li><a href="#SwapPartition">14.5.2 - Swapping to a partition</a>
  <li><a href="#SwapFile">14.5.3 - Swapping to a file</a>
d36 18
a53 15
<li><a href="#SoftUpdates">14.6 - Soft updates</a>
<li><a href="#Boot386"    >14.7 - How do OpenBSD/i386 and OpenBSD/amd64 boot?</a>
<li><a href="#LargeDrive" >14.8 - What are the issues regarding large
    drives with OpenBSD?</a>
<li><a href="#InstBoot"   >14.9 - Installing bootblocks (most, but not all
    platforms)</a>
<li><a href="#Backup"     >14.10 - Preparing for disaster: backing up and
    restoring from tape</a>
<li><a href="#MountImage" >14.11 - Mounting disk images in OpenBSD</a>
<li><a href="#pciideErr"  >14.12 - Help! I'm getting errors with IDE DMA!</a>
<li><a href="#NegSpace"   >14.14 - Why does <tt>df(1)</tt> tell me I
    have over 100% of my disk used?</a>
<li><a href="#OhBugger"   >14.15 - Recovering partitions after deleting
    the disklabel</a>
<li><a href="#foreignfs"  >14.16 - Can I access data on filesystems other than FFS?</a>
d56 1
a56 1
      disklabel! What should I do?</a>
d58 2
a59 1
<li><a href="#flashmem"   >14.17 - Can I use a flash memory device with OpenBSD?</a>
d61 5
a65 5
  <li><a href="#flashmemPortable">14.17.1 - Flash memory as a portable storage
    device</a> 
  <li><a href="#flashmemBoot">14.17.2 - Flash memory as bootable storage</a>
  <li><a href="#flashmemLive">14.17.3 - How can I make a "Live" bootable USB
    device?</a>
d67 1
a67 1
<li><a href="#DiskOpt"    >14.18 - Optimizing disk performance</a>
d69 2
a70 2
  <li><a href="#Optsoftu">14.18.1 - Soft updates</a>
  <li><a href="#Optmaxvnodes">14.18.2 - Size of the namei() cache</a>
d72 4
a75 3
<li><a href="#Async"      >14.19 - Why aren't we using async mounts?</a>
<li><a href="#altroot"    >14.20 - Duplicating your root partition: altroot</a>
<li><a href="#softraid"   >14.21 - How do I use softraid(4)?</a>
d77 5
a81 4
  <li><a href="#softraidDI">14.21.1 - Doing the install</a>
  <li><a href="#softraidNotes">14.21.3 - Softraid notes</a>
  <li><a href="#softraidDR">14.21.4 - Disaster recovery</a>
  <li><a href="#softraidCrypto">14.21.5 - Softraid Crypto</a>
d2088 1
a2088 1
<h3 id="flashmemPortable">14.17.1 - Flash memory as a portable storage device</h3>
d2341 2
a2342 1
<h3 id="flashmemLive">14.17.3 - How do I create a bootable "Live" USB device?</h3>
d2572 6
a2577 4
<h2 id="softraid">14.21 - How do I use softraid(4)?</h2>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid&amp;sektion=4">Softraid(4)</a> 
works by emulating a 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=scsibus&amp;sektion=4">scsibus(4)</a>
d2579 1
a2579 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sd&amp;sektion=4">sd(4)</a>
d2581 7
a2587 11
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
partitions ("chunks") into a virtual disk ("volume") with the desired
RAID strategy ("discipline"), such as RAID0, RAID1, RAID4, RAID5 or
Crypto.
(Note: only RAID0, RAID1 and Crypto are fully supported at the moment.)

<p>
This virtual disk is treated as any other disk -- first
partitioned with <a href="#fdisk">fdisk(8)</a> (on fdisk platforms)
and then with <a href="#disklabel">disklabel(8)</a>, partitions have file
systems made, mounted, then used.
d2609 1
a2609 1
recover from an "event".
d2611 3
a2613 3
cheap 500G drives just because they are there.
Remirroring 500G drives takes a much longer time than mirroring the
4G that you actually use.
d2618 1
a2618 4
Mirroring your boot partition in a software RAID system is difficult,
and often pointless, as most PC hardware has difficulty booting from any
drive other than its primary boot drive.
Even hardware which CAN boot from other drives will often have difficulty
d2620 1
a2620 1
OpenBSD's "<a href="#altroot">altroot</a>" system can actually be BETTER
d2634 1
a2634 4
<h3 id="softraidDI">14.21.1 - Doing the install</h3>
Softraid disk space can be created using free (or added!) chunks of
disk space after install, but that is just a special (and simple)
case of adding softraid during install.
a2635 1
<p>
d2639 7
a2645 4
installation kernels.
They do not exist on the floppies due to space issues; one simple
work-around is to do a very minimal OpenBSD install from floppy, then
boot from bsd.rd on your installed system and re-build as desired.
d2649 6
a2654 16
OpenBSD <a href="faq4.html">install</a>, as you will want to drop to
the shell and create your softraid(4) drive before doing the install.
Once the softraid(4) disk is created, you will perform the install
relatively normally, placing the partitions you wish to be RAIDed on
the newly configured drive.

<p>
You can pre-create just the RAID partitions and assemble them into a
softraid(4) volume and let the installer do the rest, but it is probably
easier to also manually create your root and swap partitions before
invoking the installer.

<p>
This does mean you will have to carefully set up the disk before
invoking the installer, making sure you manually do a few steps that the
installer normally takes you through.
d2657 6
a2662 3
The install kernel only has the <tt>/dev</tt> entries for one wd(4)
device and one sd(4) device on boot, so you will need to create more
disk devices to set up your softraid device.
d2667 2
a2668 3
For example, if we needed to support a second and third wd(4) device
and a second sd(4) device (remember, the softraid devices will be sd(4)
devices), you could do the following from the shell prompt:
d2671 2
d2674 1
a2674 1
# <b>sh MAKEDEV wd1 wd2 sd1</b>
d2677 1
a2677 7
You now have full support for sd0, sd1, wd0, wd1 and wd2.

<p>
You will need to properly <a href="#fdisk">fdisk(1)</a> the physical
drives (if appropriate for your platform -- make sure you set up the
second disk so it is bootable!) and then use
<a href="#disklabel">disklabel</a> to set up the partitions.
d2680 6
a2685 4
The fdisk(8) steps below will put an MBR on the disk and an OpenBSD
partition on the disk.
IF you wish to use the entire disk for OpenBSD (i.e., have NOTHING else
on the disk), you can do this with a simple one-liner for each drive:
d2689 1
d2691 1
a2691 19
</pre></blockquote>

(Do be sure you understand what those lines do to any data that was on
your disk before using it blindly!)
Otherwise, you will need to create an OpenBSD partition within the new
disks.

<h4>Create the partitions for softraid</h4>
When creating the softraid(4) partition, give it the type of "RAID"
rather than the normal "4.2BSD" or "swap".
In this case, we will create our desired partitions on wd0:

<ul>
<li>wd0a  500M /
<li>wd0b  500M swap
<li>wd0m  10G RAID
</ul>

<blockquote><pre>
d2695 2
a2696 13
offset: [64] <b><i>ENTER</i></b> 
size: [30282461] <b>500m</b>
Rounding to cylinder (16065 sectors): 1028096
FS type: [4.2BSD] <b><i>ENTER</i></b> 
> <b>a b</b>
offset: [1028160]  <b><i>ENTER</i></b> 
size: [29254365] <b>500m</b>
Rounding to cylinder (16065 sectors): 1028160
FS type: [swap] <b><i>ENTER</i></b> 
> <b>a m</b>
offset: [3148740]  <b><i>ENTER</i></b>
size: [28226205] <b>10g</b>
Rounding to cylinder (16065 sectors): 20980890
d2698 1
d2700 1
a2700 1
Write new label?: [y] <b><i>ENTER</i></b>
d2703 5
a2707 27
<p>
Now, we need to prep out the second disk to match key parts of the first
disk's layout.
Since we are using the <tt>/altroot</tt> system, we will want an 'a'
partition on the secondary disk the same size as the primary's 'a'.
We want the system to run off the second drive as it would the first,
so we will want to have a similar sized swap partition (though a little
bigger or smaller will not hurt).
We will also want a RAID partition the same size as the primary.
If the RAID partitions are not the same size, the smaller of the two
will dictate the final RAID volume size.

<p>
In short...you really want to just repeat the above allocation process
on the second drive, wd1.

<h4>Assembling the RAID volume</h4>
We will assume that your two RAID partitions are on wd0m and wd1m.
Note that the RAID partition letter is arbitrary, it does not need to be
the same letter on the secondary drive, but it will make keeping track
of things that much easier for you if you keep them the same.

<p>
Note that since softraid(4) has to look around a bit to find evidence
of arrays it needs to assemble, if your disk has been used for softraid
previously, you may find it very helpful to use dd(1) to clear the first
megabyte or so from each partition before going any further:
d2710 3
a2712 4
# <b>dd if=/dev/zero of=/dev/rwd0m bs=1m count=1</b>
   ...
# <b>dd if=/dev/zero of=/dev/rwd1m bs=1m count=1</b>
   ...
d2715 2
d2718 3
a2720 2
We now create our new softraid(4) disk using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl&amp;sektion=8">bioctl(8)</a>:
d2723 1
a2723 1
# <b>bioctl -c 1 -l /dev/wd0m,/dev/wd1m softraid0</b>
a2725 5
This creates a RAID1 volume ("<tt>-c 1</tt>"), using the listed
partitions ("<tt>-l /dev/wd0m,/dev/wd1m</tt>"), using the
<tt>softraid0</tt> driver.
If there are no other sd(4) devices on this system, this will become
sd0.
d2727 4
a2730 4
or on multiple devices, you are always going to be using the softraid0
virtual disk interface driver, you won't be using "softraid1" or others.
Remember, the "softraid0" there is a virtual RAID controller, you can
hang many virtual disks off this controller.
d2733 2
a2734 2
This will create a new disk, "sd0" (assuming there are no other sd(4)
devices on your system).
d2744 1
a2744 1
showing that we now have a new SCSI bus, and a new disk.
d2750 4
a2753 2
a MBR and disklabel, zeroing the first chunk of the new disk is highly
recommended, if you didn't zero the component parts above:
d2756 1
a2756 1
# dd if=/dev/zero of=/dev/rsd0c bs=1m count=1
d2760 4
a2763 8
Perform the install as normal by invoking "install" at the boot media
command prompt.
Be careful to select "custom" layout for disklabel when prompted,
otherwise your RAID partition will be overwritten!
Use the 'n' option of disklabel to define the mount point for your root
partition, and create all the partitions on your new softraid disk (sd0
in our example here) that should be there, rather than on your non-RAID
disks.
d2766 2
a2767 2
Now you can reboot your system, and if you have done all properly, it
will automatically assemble your RAID set, and mount the appropriate
d2770 150
a2919 11
<h3 id="softraidNotes">14.21.3 - Softraid notes</h3>
<h4>Complications when other sd(4) disks exist</h4>
Softraid disks are assembled <i>after</i> all other IDE, SATA, SAS and
SCSI disks are attached.
As a result, if the number of sd(4) devices changes (either by adding
or removing devices -- or if a device fails), the identifier of the
softraid disk will change.
For this reason, it is very important to use <a href="faq14.html#DUID">DUID</a>s
(Disklabel Unique Identifiers) rather than drive names in your
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">fstab(5)</a>
file.
d2922 3
a2924 1
You may not want to specify the root device by DUID.
d2926 6
a2931 10
<h4>Three disk RAID1?</h4>
Softraid supports RAID1 with more than two "chunks", and the man page
examples show a three disk RAID1 configuration.
RAID1 simply duplicates the data across all the chunks of storage, two
gives full redundancy, three gives additional fault tolerance.
The advantage of RAID1 with three (or more!) disks or chunks is that in
event of one disk failure, you STILL have complete redundancy.
Think of it as a hot spare that doesn't need time to rebuild!
In theory, a three disk RAID1 is slower on writes than a two disk,
though should be much faster on writes than a rebuilding two disk RAID1.
d2934 1
a2966 1

d2987 3
a2989 1
<li>Rebuild your RAID partition:
d2992 1
a2993 2
<li>reboot
</ul>
a3014 1

d3022 1
a3022 1
"roaming", but will successfully rebuild your arrays.
d3027 1
a3027 1
<h3 id="softraidCrypto">14.21.5 - Softraid Crypto</h3>
d3029 10
a3038 51
Cryptographic softraid(4) volumes are set up rather simply:

<ul>
<li>Create the desired partition with disklabel(8) as type RAID
<li>Zero the head of the partition as above.
<li><tt># <b>bioctl -c C -l /dev/sd0m softraid0</b><br>
New passphrase: <b><i>My Crypto Pass Phrase</i></b><br>
Re-type passphrase: <b><i>My Crypto Pass Phrase</i></b><br>
softraid0: CRYPTO volume attached as sd1</tt>
<li>Zero the first megabyte of the newly created volume so fdisk(8) or
disklabel(8) doesn't get confused<br>
<tt># <b>dd if=/dev/zero of=/dev/rsd1c bs=1m count=1</b></tt>
<li>fdisk(8), disklabel(8) and newfs(8) this new volume, sd1 as desired.
</ul>

Once this is set up, you can then "unlock" the crypto volume when desired
with:
<blockquote><pre>
# <b>bioctl -c C -l /dev/sd0m softraid0</b>
Passphrase: <b><i>My Crypto Pass Phrase</i></b>
softraid0: CRYPTO volume attached as sd1
</pre></blockquote>
You can then mount the encrypted volume's partitions using mount as usual.

<p>
To disconnect a crypto volume (rendering it unusable again), dismount
any file systems and use the following (where the encrypted volume is
sd1):
<blockquote><pre>
# <b>bioctl -d sd1</b>
</pre></blockquote>

The man page for this looks a little scary, as the -d command is
described as "deleting" the volume, but in the case of crypto, it just
deactivates encrypted volume so it can't be accessed until it is
activated again with the passphrase.

<p>
Many other options are available with softraid, and new features are
being added and improvements made, so do consult the man pages for
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl&amp;sektion=8">bioctl(8)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid&amp;sektion=4">softraid(4)</a>
on your system.

<h4>I forgot my passphrase!</h4>
Sorry.
This is real encryption, there's not a back door or magic unlocking
tool.
If you lose your passphrase, your data on your softraid crypto volume
will be unusable.
d3040 10
@


1.261
log
@i386 -> amd64/i386 in the "whoa. this section needs rework" section
@
text
@d25 1
a25 1
<li><a href="#intro"  >14.1 - Disks and Partitions</a>
d35 1
a35 1
<li><a href="#SoftUpdates">14.6 - Soft Updates</a>
d39 4
a42 3
<li><a href="#InstBoot"   >14.9 - Installing Bootblocks</a>
<li><a href="#Backup"     >14.10 - Preparing for disaster: Backing up and
    Restoring from tape.</a>
d79 1
a79 1
<h2 id="intro">14.1 - Disks and Partitions</h2>
d891 1
a891 1
<h2 id="SoftUpdates">14.6 - Soft Updates</h2>
d894 1
a894 1
Soft updates is based on an idea proposed by
d1314 1
a1314 1
<h2 id="InstBoot">14.9 - Installing Bootblocks (most, but not all platforms)</h2>
d1349 2
a1350 1
<h2 id="Backup">14.10 - Preparing for disaster: Backing up and Restoring from tape</h2>
d2432 1
a2432 1
<li><a href="#Optsoftu">Soft Updates</a>
d2447 1
a2447 1
<a href="#SoftUpdates">Soft updates FAQ</a> entry.
@


1.260
log
@two minor rewordings (as per XXX, more to come)
@
text
@d627 1
a627 1
(<i>i386 only</i>) and 
d632 1
a632 1
i386 folks should start with fdisk.  Other architectures can ignore this.
@


1.259
log
@TJ's work on the FAQ continues, this time a big diff with lots of small
fixes:

- only specify the current supported "set debug" choices in the options
  section of the pf faq
- clarify ipv4 vs ipv6 configs in the nat section of the pf faq
- mention that usb disk images are available in addition to the cd isos
- don't say that all donors get their name on the donations page anymore
- replace the last few instances of "ftp mirrors" with "http mirrors" or
  just "mirrors" where appropriate
- reword some 5.8 mentions to reduce the amount of version bumps we have
  to do each release
- few minor tweaks

Thanks!
@
text
@d625 1
a625 1
Well once you get your disk installed <b>PROPERLY</b> you need to use
d632 1
a632 1
For i386 folks, start with fdisk.  Other architectures can ignore this.
@


1.258
log
@get rid of some duplicate content; from TJ
@
text
@a1070 4
Copyright (c) 1995-2015 OpenBSD.  All rights reserved.  http://www.OpenBSD.org

OpenBSD 5.8 (GENERIC) #1066: Sun Aug 16 02:33:00 MDT 2015
    deraadt@@i386.openbsd.org:/usr/src/sys/arch/i386/compile/GENERIC
d1072 1
a1072 1
</pre></blockquote> <!-- XXXrelease - update kernel version -->
@


1.257
log
@
more improvements from from TJ at mrsk dot me, thanks!
@
text
@d1076 1
a1076 1
</pre></blockquote>
@


1.256
log
@
in comes 5.8
@
text
@d207 2
a208 2
or device would be specified, for example in <tt>/etc/fstab</tt> or in
command lines.
d709 1
d736 1
a736 1
<b>/dev/sd2d /usr/local ffs rw 1 1</b>
d821 1
a821 1
The file must not reside on a filesystem which has SoftUpdates
d893 1
a893 1
Soft Updates is based on an idea proposed by
d897 1
a897 1
SoftUpdates imposes a partial ordering on the buffer cache
d1109 1
d1292 1
a1292 1
<h3>Larger than 2TB disks</h3>
d1296 1
a1296 1
will show larger than 2TB disks as 2TB.
d1298 2
a1299 1
disks, as the MBR is used only to bootstrap the OS, once the OS is
d1304 1
a1304 1
To use a larger than 2TB disk, create an OpenBSD partition on the disk
d1407 1
a1407 1
To backup your machine you will need to feed dump the name of each fixed
d1422 4
a1425 4
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0a</b>
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0d</b>
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0e</b>
# <b>/sbin/dump -0au -f /dev/nrst0 /dev/rsd0h  </b>
d1477 4
a1480 4
/sbin/dump -0au -f /dev/nrst0 /dev/rsd0a
/sbin/dump -0au -f /dev/nrst0 /dev/rsd0d
/sbin/dump -0au -f /dev/nrst0 /dev/rsd0e
/sbin/dump -0au -f /dev/nrst0 /dev/rsd0h
d1520 1
a1520 1
# <b>/sbin/restore -tvs 1 -f /dev/rst0</b>
d1533 1
a1533 1
# <b>/sbin/restore -tvs 2 -f /dev/rst0 > /home/me/list.txt</b>
d1673 1
a1673 1
wrong you should end up at a prompt asking you for a shell path or press
d1683 1
a1683 1
Once you have re-mounted in r/w mode you can continue restoring your
d1703 1
a1703 1
reboot into multiuser mode. If everything went as planned your system
d1730 1
a1730 1
To unmount the image use the following commands.
d1829 1
a1829 1
Fix enough of the disc so you can see it, or fix enough of the disc so
d1833 1
a1833 1
(with dying discs you want the data first, with sloppy fingers you can
d1841 1
a1841 1
scan_ffs(8) will look through a disc, and try and find partitions and
d1899 1
a1899 1
hw.disknames=cd0:,cd1:,wd0:,fd0:,cd2:
d2357 1
a2357 1
friend's computers!
d2408 1
a2408 1
<li>Use <a href="#DUID">DUIDs</a> to identify your partitions.
d2440 1
a2440 1
An important tool that can be used to speed up your system is softupdates.
d2444 1
a2444 1
Softupdates attempts to update metainfo in RAM instead of writing to the
d2448 2
a2449 2
You can read more about softupdates in the
<a href="#SoftUpdates">Softupdates FAQ</a> entry.
@


1.255
log
@
de-sudo-ing.  How you run commands as root isn't the FAQ's role to dictate.
@
text
@d1072 1
a1072 1
OpenBSD 5.7 (GENERIC) #738: Sun Mar  8 10:59:31 MDT 2015
@


1.254
log
@Don't refer to the Amanda package in the section about backups, it was removed
(due to being out-of-date and seemingly no interest in updating). Pointed out
by Timo Myyra, though I didn't take the alternative suggestion of listing
BackupPC here (partly because it doesn't do tape, which this section is
talking about, and partly to avoid inflicting it on anyone else.. ;)
@
text
@d849 1
a849 1
$ <b>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</b>
d860 2
a861 2
$ <b>sudo chmod 600 /var/swap</b>
$ <b>sudo swapctl -a /var/swap</b>
@


1.253
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d1363 1
a1363 2
"<a href="http://www.amanda.org">Amanda</a>"
and "<a href="http://www.bacula.org">Bacula</a>"
@


1.252
log
@
Carlin Bingham (cb at viennan dot net) tells me this typo has been there
for 15 years...before I started messing things up!  whoo-hoo!
@
text
@a4 1
<meta name= "resource-type" content= "document">
a5 2
<meta name= "keywords"      content= "openbsd,faq14">
<meta name= "distribution"  content= "global">
@


1.251
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@d882 1
a882 1
the next boot time also. If this line is not added, your won't have this
@


1.250
log
@
updates for 5.7
@
text
@d11 1
@


1.249
log
@
installboot changed, pointed out by rolf dot sommerhalder at alumni dot
ethz dot ch
@
text
@d1021 1
a1021 1
>> OpenBSD/i386 BOOT 3.21
d1072 1
a1072 1
Copyright (c) 1995-2013 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1074 1
a1074 1
OpenBSD 5.6 (GENERIC) #274: Fri Aug  8 00:05:13 MDT 2014
@


1.248
log
@Use id="" instead of <a name=""></a> to link to sections.
It is both simpler to write and simpler to understand.

Discussed with nick@@
@
text
@d41 1
a41 1
<li><a href="#InstBoot"   >14.9 - Installing Bootblocks - i386/amd64 specific</a>
d1316 1
a1316 1
<h2 id="InstBoot">14.9 - Installing Bootblocks - i386/amd64 specific</h2>
d1327 5
a1331 5
To fix your boot block so that
you can boot normally, just put a boot CDROM in your drive (or use a
boot floppy) and at the boot prompt, type "<tt>boot hd0a:/bsd</tt>" to force it
to boot from the first hard disk (and not the CD or floppy).  Your machine
should come up normally.
d1344 1
a1344 1
# <b>cd /usr/mdec; ./installboot /boot biosboot sd0</b>
d1347 3
a1349 9
Note that "/boot" is the physical location of the file "boot" you wish
to use when the system boots normally as the system is currently
mounted.
If your situation were a little different and you had booted from the CD
and mounted your 'a' partition on /mnt, this would probably be
"/mnt/boot" instead.
installboot(8) does two things here -- it installs the file "biosboot"
to where it needs to be in the Partition Boot Record, and modifies it
with the physical location of the "/boot" file.
d1507 1
a1509 1

d1554 1
a1554 1
floppy already contains the required restore utility as well as the
d1556 1
a1556 1
cases, this floppy and your most recent dump tape is all you'll need to
d1641 1
a1641 2
# <b>cp /usr/mdec/boot /mnt/boot</b>
# <b>/usr/mdec/installboot -v /mnt/boot /usr/mdec/biosboot sd0</b>
@


1.247
log
@
section headings, from Daniel Jakots (vigdis + obsd at chown dot me), thanks!
@
text
@d80 1
a80 2
<a name="intro"></a>
<h2>14.1 - Disks and Partitions</h2>
d189 1
a189 2
<a name="DUID"></a>
<h3>Disklabel Unique Identifiers</h3>
d220 1
a220 3
<p>
<a name="fdisk"></a>
<h2>14.2 - Using fdisk(8)</h2>
d377 2
a378 4
<a name="disklabel"></a>
<h2>14.3 - Using OpenBSD's disklabel(8)</h2>
<a name="disklabel.1"></a>
<h3>What is disklabel(8)?</h3>
d424 1
a424 2
<a name="disklabel.2"></a>
<h3>disklabel(8) during OpenBSD's install</h3>
d448 1
a448 4
<p>

<a name="disklabel.3"></a>
<h3>Using disklabel(8) after install</h3>
d624 1
a624 2
<a name="NewDisk"></a>
<h2>14.4 - Adding extra disks in OpenBSD</h2>
d746 1
a746 3
<p>
<a name="Swap"></a>
<h2>14.5 - How is swap handled?</h2>
d748 1
a748 2
<a name="SwapAbout"></a>
<h3>14.5.1 - About swap</h3>
d788 1
a788 2
<a name="SwapPartition"></a>
<h3>14.5.2 - Swapping to a partition</h3>
d804 1
a804 2
<a name="SwapFile"></a>
<h3>14.5.3 - Swapping to a file</h3>
d891 1
a891 2
<a name="SoftUpdates"></a>
<h2>14.6 - Soft Updates</h2>
a923 1
<a name="Boot386"></a>
d925 1
a925 1
<h2>14.7 - How do OpenBSD/i386 and OpenBSD/amd64 boot?</h2>
d1160 1
a1160 2
<a name="LargeDrive"></a>
<h2>14.8 - What are the issues regarding large drives with OpenBSD?</h2>
d1316 1
a1316 3
<p>
<a name="InstBoot"></a>
<h2>14.9 - Installing Bootblocks - i386/amd64 specific</h2>
d1357 1
a1357 2
<a name="Backup"></a>
<h2>14.10 - Preparing for disaster: Backing up and Restoring from tape</h2>
d1715 1
a1715 2
<a name="MountImage"></a>
<h2>14.11 - Mounting disk images in OpenBSD</h2>
d1749 1
a1749 3
<p>
<a name="pciideErr"></a>
<h2>14.12 - Help! I'm getting errors with IDE DMA!</h2>
d1792 1
a1792 3
<p>
<a name="NegSpace"></a>
<h2>14.14 - Why does <tt>df(1)</tt> tell me I have over 100% of my disk
d1814 1
a1814 3
<p>
<a name="OhBugger"></a>
<h2>14.15 - Recovering partitions after deleting the disklabel</h2>
d1864 1
a1864 3
<p>
<a name="foreignfs"></a>
<h2>14.16 - Can I access data on filesystems other than FFS?</h2>
d2016 1
a2016 3
<p>
<a name="foreignfsafter"></a>
<h3>14.16.1 - The partitions are not in my disklabel! What should I do?</h3>
d2089 2
a2090 5
<p>
<a name="flashmem"></a>
<h2>14.17 - Can I use a flash memory device with OpenBSD?</h2>
<a name="flashmemPortable"></a>
<h3>14.17.1 - Flash memory as a portable storage device</h3>
d2225 1
a2225 2
<a name="flashmemBoot"></a>
<h3>14.17.2 - Flash memory as bootable storage</h3>
d2343 1
a2343 2
<a name="flashmemLive"></a>
<h3>14.17.3 - How do I create a bootable "Live" USB device?</h3>
d2426 1
a2426 3
<p>
<a name= "DiskOpt"></a>
<h2>14.18 - Optimizing disk performance</h2>
d2445 1
a2445 3
<p>
<a name="Optsoftu"></a>
<h3>14.18.1 - Soft updates</h3>
d2458 1
a2458 3
<p>
<a name="Optmaxvnodes"></a>
<h3>14.18.2 - Size of the namei() cache</h3>
d2477 1
a2477 3
<p>
<a name= "Async"></a>
<h2>14.19 - Why aren't we using async mounts?</h2>
d2516 1
a2516 2
<a name="altroot"></a>
<h2>14.20 - Duplicating your root partition: altroot</h2>
d2573 1
a2573 2
<a name="softraid"></a>
<h2>14.21 - How do I use softraid(4)?</h2>
d2640 1
a2640 2
<a name="softraidDI"></a>
<h3>14.21.1 - Doing the install</h3>
d2841 1
a2841 2
<a name="softraidNotes"></a>
<h3>14.21.3 - Softraid notes</h3>
d2867 1
a2867 2
<a name="softraidDR"></a>
<h3>14.21.4 - Disaster recovery</h3>
d2961 1
a2961 2
<a name="softraidCrypto"></a>
<h3>14.21.5 - Softraid Crypto</h3>
@


1.246
log
@
sheesh.  improvement from tg at mrsk dot me, I thank him, and forgot to
commit it!
@
text
@d32 5
d64 4
d71 6
a757 1
<a name="SwapFile"></a>
d761 1
d802 1
a802 1

d819 1
a819 1

d2688 1
d2890 1
d3012 1
@


1.245
log
@
faq updates for 5.6
@
text
@d1884 1
a1884 1
Yes. Other supported filesystems include: ext2 (Linux), ISO9660 and UDF
d1886 1
a1886 1
Some of them have limited, for instance read-only, support.
@


1.244
log
@
crypto likes this zero step, from Daniel Jakots, (vigdis at chown dot
me), thanks!
@
text
@d1077 1
a1077 1
OpenBSD 5.5 (GENERIC) #276: Wed Mar  5 09:57:06 MST 2014
@


1.243
log
@
more -> cvsweb.openbsd.org for, well, cvsweb.
@
text
@d3006 3
@


1.242
log
@
welcome 5.5!
@
text
@d3012 1
a3012 1
# <b>bioctl -c C -l /dev/sd1m softraid0</b>
@


1.241
log
@
remove www@@ references, simplify footers on all pages.
@
text
@d1067 1
a1067 1
>> OpenBSD/i386 BOOT 3.21
d1077 1
a1077 1
OpenBSD 5.4 (GENERIC) #37: Tue Jul 30 12:05:01 MDT 2013
@


1.240
log
@
updates for 5.4
@
text
@a4 1
<link rev= "made" href= "mailto:www@@openbsd.org">
d9 1
a9 1
<meta name= "copyright"     content= "This document copyright 1998-2013 by OpenBSD.">
a18 1
<font color= "#0000e0">
a21 1
</font>
d3048 2
a3049 1
<font color= "#0000e0">
a3052 9
</font>

<p>
<hr>
<a href= "index.html"><img height= "24" width= "24" src= "../images/back.gif" border= "0" alt="[back]"></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>$OpenBSD: faq14.html,v 1.239 2013/10/07 13:57:20 nick Exp $</small>

@


1.239
log
@
bit of left-over cruft that shouldn't have been there.  Spotted by Maurice
Janssen (Maurice at z74 dot net).  Thanks!
@
text
@d1080 1
a1080 1
OpenBSD 5.3 (GENERIC) #50: Tue Mar 12 18:35:23 MDT 2013
d3062 1
a3062 1
<small>$OpenBSD: faq14.html,v 1.238 2013/08/09 02:18:38 nick Exp $</small>
@


1.238
log
@
left out that the softraid volume must be created.
@
text
@a2996 4
OpenBSD's "<a href="#altroot">altroot</a>" system
can actually be BETTER for some applications, as it provides a copy
of old configuration information in case a change does not work quite as
intended.
d3062 1
a3062 1
<small>$OpenBSD: faq14.html,v 1.237 2013/08/09 02:01:10 nick Exp $</small>
@


1.237
log
@
one of my trademarked "change my mind mid-sentence and don't go back and
fix it"-Os.  Spotted by Maxime Villard, thanks!
@
text
@d2699 4
a2702 3
You can pre-create just the RAID partitions and let the
installer do the rest, but it is probably easier to create your root,
swap and RAID partitions before invoking the installer.
d3066 1
a3066 1
<small>$OpenBSD: faq14.html,v 1.236 2013/07/23 02:29:04 nick Exp $</small>
@


1.236
log
@
add target to link, from Maxime Villard, thanks!
@
text
@d2699 1
a2699 1
You can just pre-create the just the RAID partitions and let the
d3065 1
a3065 1
<small>$OpenBSD: faq14.html,v 1.235 2013/07/14 17:05:50 nick Exp $</small>
@


1.235
log
@
missing "softraid0" on crypto example.
@
text
@d2883 1
a2883 1
For this reason, it is very important to use <a href="faq14.html">DUID</a>s
d3065 1
a3065 1
<small>$OpenBSD: faq14.html,v 1.234 2013/06/01 23:22:48 nick Exp $</small>
@


1.234
log
@
"singe" passes ispell, who'da thunk?  spotted by Scott McEachern (scott at
blackstaff dot ca), thanks!
@
text
@d3018 1
a3018 1
# <b>bioctl -c C -l /dev/sd1m</b>
d3065 1
a3065 1
<small>$OpenBSD: faq14.html,v 1.233 2013/06/01 18:40:21 nick Exp $</small>
@


1.233
log
@
+14.21 - How do I use softraid(4)?
Assistence/look-over from krw@@, tedu@@, halex@@
@
text
@d2924 1
a2924 1
<a href="faq8.html#LostPW">singe user mode</a>, or from the
d3065 1
a3065 1
<small>$OpenBSD: faq14.html,v 1.232 2013/05/31 16:46:32 nick Exp $</small>
@


1.232
log
@
spell check, THEN commit.  I'll get that right one of these days....
@
text
@d64 1
a64 1

d2608 445
d3065 1
a3065 1
<small>$OpenBSD: faq14.html,v 1.231 2013/05/31 16:23:44 nick Exp $</small>
@


1.231
log
@
add #altroot.
@
text
@d2585 1
a2585 1
For full redunancy, the rest of the partitions should be duplicated as
d2620 1
a2620 1
<small>$OpenBSD: faq14.html,v 1.230 2013/05/01 13:16:32 nick Exp $</small>
@


1.230
log
@
updates for 5.3
@
text
@d63 1
d2550 58
d2620 1
a2620 1
<small>$OpenBSD: faq14.html,v 1.229 2013/02/20 17:10:24 sthen Exp $</small>
@


1.229
log
@typo controler/controller; from Nick Permyakov
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2012 by OpenBSD.">
d1026 1
a1026 1
>> OpenBSD/i386 BOOT 3.18
d1069 1
a1069 1
>> OpenBSD/i386 BOOT 3.18
d1077 1
a1077 1
Copyright (c) 1995-2012 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1079 1
a1079 1
OpenBSD 5.2 (GENERIC) #278: Wed Aug  1 10:04:16 MDT 2012
d1302 1
a1302 2
will typically report a disk size of the real size modulo 2TB, so your
2.7TB disk (sold as 3TB) will show as around 700GB in fdisk(8).
d2561 1
a2561 1
<small>$OpenBSD: faq14.html,v 1.228 2013/02/12 09:59:02 sthen Exp $</small>
@


1.228
log
@zap duplicated word; Nick Permyakov
@
text
@d1294 1
a1294 1
Always be aware of what was available when a controler or interface was
d2562 1
a2562 1
<small>$OpenBSD: faq14.html,v 1.227 2013/01/12 17:44:50 jeremy Exp $</small>
@


1.227
log
@Switch from "cpio -pdum" to "pax -rw -p e" to copy partitions since
cpio requires find which isn't available on bsd.rd.  Also, use a
more complete example.

OK naddy@@
@
text
@d969 1
a969 1
period would have have been replaced with a semicolon (";"), indicating
d2562 1
a2562 1
<small>$OpenBSD: faq14.html,v 1.226 2012/12/27 01:20:08 nick Exp $</small>
@


1.226
log
@
dead link due to restructure, spotted by notstop at live dot com, thanks!
@
text
@d722 8
a729 2
should mount the new drive in /mnt and use <tt>cpio -pdum</tt> to copy /usr/local
to the /mnt directory.  Edit the
d2562 1
a2562 1
<small>$OpenBSD: faq14.html,v 1.225 2012/11/01 15:05:30 nick Exp $</small>
@


1.225
log
@
enter 5.2!
@
text
@d438 1
a438 1
<a href="faq4.html#Disks">Setting up disks</a> part of the 
d2556 1
a2556 1
<small>$OpenBSD: faq14.html,v 1.224 2012/06/28 00:51:33 nick Exp $</small>
@


1.224
log
@
Bryan Irving (sparctacus at gmail) corrected my plural (or lack of).
@
text
@d1020 1
a1020 1
>> OpenBSD/i386 BOOT 3.17
d1063 1
a1063 1
>> OpenBSD/i386 BOOT 3.17
d1073 1
a1073 1
OpenBSD 5.1 (GENERIC) #160: Sun Feb 12 09:46:33 MST 2012
d2556 1
a2556 1
<small>$OpenBSD: faq14.html,v 1.223 2012/06/05 22:46:57 nick Exp $</small>
@


1.223
log
@
typo, spotted by Amit Kulkarni, thanks!
@
text
@d746 1
a746 1
The problem, of course, is there are few "normal" application.
d2556 1
a2556 1
<small>$OpenBSD: faq14.html,v 1.222 2012/06/05 02:38:05 nick Exp $</small>
@


1.222
log
@
update #LargeDrive...  memory is no longer a critical problem for big
disks (yay!) and add some notes on >2TB disks.
@
text
@d1309 1
a1309 1
the size of the OpenBSD fdisk partition) to cover then entire disk.
d2556 1
a2556 1
<small>$OpenBSD: faq14.html,v 1.221 2012/05/22 01:13:07 nick Exp $</small>
@


1.221
log
@
uid: -> duid:.  suggested by someone, I put it in my tree, forgot to commit
it...clearing out the M
@
text
@d1259 2
a1266 7
<p>
By the time one gets to somewhat larger than 1TB file system with
default fragment and block sizes, fsck will require 1GB RAM to run,
which is the application limit under OpenBSD.
Larger fragments and/or blocks will reduce the number of inodes, and
allow for larger file systems.

d1292 26
d2556 1
a2556 1
<small>$OpenBSD: faq14.html,v 1.220 2012/05/20 15:13:03 jj Exp $</small>
@


1.220
log
@Spelling nit, from rustybsd on www@@
@
text
@d458 1
a458 1
uid: d920a43a5a56ad5f
d1931 1
a1931 1
uid: d920a43a5a56ad5f
d2535 1
a2535 1
<small>$OpenBSD: faq14.html,v 1.219 2012/05/01 14:35:15 nick Exp $</small>
@


1.219
log
@
welcome 5.1!
@
text
@d202 1
a202 1
and this can be done interchangably.
d2535 1
a2535 1
<small>$OpenBSD: faq14.html,v 1.218 2012/02/01 02:48:43 nick Exp $</small>
@


1.218
log
@
make a little more clear, and make more platform amd64 friendly by
eliminating build instructions that shouldn't be there.  Why are
you building the boot code from source? you should be using a snapshot!
Inspired by a suggestion from Amit Kulkarni.
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2011 by OpenBSD.">
d1071 1
a1071 1
Copyright (c) 1995-2008 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1073 1
a1073 1
OpenBSD 5.0 (GENERIC) #43: Wed Aug 17 10:10:52 MDT 2011
d1208 1
a1208 2
  <li>You upgrade, build your own kernel, whatever, and copy your 
    new /bsd over the old one. 
d2535 1
a2535 1
<small>$OpenBSD: faq14.html,v 1.217 2012/01/13 12:53:49 ajacoutot Exp $</small>
@


1.217
log
@Fix several typos, from Steffen Daode Nurpmeso.
@
text
@d1302 3
a1304 3
Modern versions of OpenBSD (3.5 and later) have a very robust boot
loader that is much more indifferent to drive geometries than the older
boot loader was, however, they are sensitive to where the file
d1311 3
a1313 3
you can boot normally, just put a boot floppy in your drive (or use a
bootable CD-ROM) and at the boot prompt, type "b hd0a:/bsd" to force it
to boot from the first hard disk (and not the floppy).  Your machine
d1330 9
a1338 10
<p>
If a newer version of bootblocks are required, you will need to compile
these yourself. To do so simply:

<blockquote><pre>
# <b>cd /sys/arch/i386/stand/</b>
# <b>make &amp;&amp; make install </b>
# <b>cd /usr/mdec; cp ./boot /boot</b>
# <b>./installboot /boot biosboot sd0</b> (or whatever device your hard disk is)
</pre></blockquote>
d2536 1
a2536 1
<small>$OpenBSD: faq14.html,v 1.216 2011/12/31 09:49:59 jj Exp $</small>
@


1.216
log
@a -> an, first from Brian Callahan on www@@
@
text
@d181 2
a182 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=diskmap&amp;sektion=4">diskmap(4)</a>.
device.
d193 1
a193 1
to the same chunk of storage, no mater what order the device is attached
d2233 1
a2233 1
(Non-USB devices attached with a USB adapter are treated as USB devices).
d2235 1
a2235 1
media in a USB adapter, but run it in an IDE adapter)
d2358 1
a2358 1
available with <a href="faq4.html#bsd.rd">bsd.rd</a>
d2537 1
a2537 1
<small>$OpenBSD: faq14.html,v 1.215 2011/11/09 03:10:21 nick Exp $</small>
@


1.215
log
@
modernize: SCSI is rarely seen now, most things that use sd(4) are
SCSI-like.  Plus, SATA and SAS are options now.
@
text
@d1032 1
a1032 1
<li><b>pc0</b> - the standard keyboard and video display of a i386
d2537 1
a2537 1
<small>$OpenBSD: faq14.html,v 1.214 2011/11/01 10:52:28 nick Exp $</small>
@


1.214
log
@
updates for 5.0 (and some non-version-related improvements).
@
text
@d261 2
a262 1
In this example we are viewing the fdisk output of the first SCSI drive.
d587 3
a589 2
on the newest disks, having partitions aligned at 4k boundaries is good,
for this reason, OpenBSD now defaults to starting the first partition at
d633 1
a633 1
In the below example we're adding a third SCSI drive to the system. 
d1378 2
a1379 2
which indicates SCSI fixed disk 0, partition a. The /usr filesystem
resides on sd0h, which indicates SCSI fixed disk 0, partition h.
d2247 1
a2247 1
any system that could boot from an IDE hard disk.
d2537 1
a2537 1
<small>$OpenBSD: faq14.html,v 1.213 2011/06/20 02:07:50 nick Exp $</small>
@


1.213
log
@
-14.13, RAID options.
Theo pointed out we don't want to be suggesting "beta" software, and
removing that, the need, purpose, and point of the rest of this article
is questionable, so just remove this until we have something we can
endorse, just remove this all together.
@
text
@d177 32
d1018 1
a1018 1
>> OpenBSD/i386 BOOT 3.02
d1061 1
a1061 1
>> OpenBSD/i386 BOOT 3.15
d1071 1
a1071 1
OpenBSD 4.9 (GENERIC) #671: Wed Mar  2 07:09:00 MST 2011
d1704 1
a1704 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=svnd&amp;sektion=4">svnd(4)</a>
d1710 2
a1711 2
# <b>vnconfig svnd0 /tmp/ISO.image</b>
# <b>mount -t cd9660 /dev/svnd0c /mnt</b>
d1725 1
a1725 1
# <b>vnconfig -u svnd0</b>
d2255 4
a2258 2
USB device, the USB device will show up as a SCSI disk, sometimes sd0.
However, if you plug this device into a system which already has a few
d2262 2
a2263 1
to system, as you will have to update <tt>/etc/fstab</tt>.
d2414 1
a2414 7
<li>If your target machine has an
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ahci&amp;sektion=4">ahci(4)</a>
or SCSI interface, you will probably find your USB drive's identifier
changing.
Having multiple versions of your <tt>/etc/fstab</tt> file may make this
easier to "fix" (in single user mode).

d2535 1
a2535 1
<small>$OpenBSD: faq14.html,v 1.212 2011/06/17 06:53:40 lum Exp $</small>
@


1.212
log
@change links to point to something meaningful.
From Anthony J. Bentley (on www@@).
@
text
@a43 1
<li><a href="#RAID"       >14.13 - RAID options with OpenBSD</a>
a1744 68
<p>
<a name="RAID"></a>
<h2>14.13 - RAID options for OpenBSD</h2>
RAID (Redundant Array of Inexpensive Disks) gives an opportunity to use
multiple drives to give better performance, capacity and/or redundancy
than one can get out of a single drive alone.  While a full discussion
of the benefits and risks of RAID are outside the scope of this article,
there are a couple points that are important to make here:

<ul>
<li>RAID has nothing to do with backup.
<li>By itself, RAID will not eliminate down-time.
</ul>

If this is new information to you, this is not a good starting point for
your exploration of RAID.

<h3>Software Options</h3>
OpenBSD supports
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=softraid&amp;sektion=4">softraid(4)</a>,
a framework supporting many kinds of I/O transformations, including
RAID and encryption disciplines.
Softraid(4) is managed using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl&amp;sektion=8">bioctl(8)</a>.

<p>
OpenBSD also includes RAIDframe
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raid&amp;sektion=4">raid(4)</a>,
requires a custom kernel), and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ccd&amp;sektion=4">ccd(4)</a>
as historic ways of implementing RAID, but at this point OpenBSD does
not suggest implementing either as a RAID solution for new installs or
reinstalls.

<h3>Hardware Options</h3>
<p>
Many OpenBSD <a href="../plat.html">platforms</a> include support for
various hardware RAID products.  The options vary by platform, see the
appropriate hardware support page (listed
<a href="../plat.html">here</a>).

<p>
Note that many supported RAID controllers can be managed through the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bio&amp;sektion=4">bio(4)</a>
driver and the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bioctl&amp;sektion=8">bioctl(8)</a>
application.
This permits monitoring and control of the RAID system in a standardized
way from within OpenBSD.


<h3>Non-Options</h3>
<p>
An often asked question on the <a href="../mail.html">mail lists</a> is
"Are the low-cost IDE or SATA RAID controllers (such as those using
Highpoint, Promise or Adaptec HostRAID chips) supported?". The
answer is "No". These cards and chips are not true hardware RAID
controllers, but rather BIOS-assisted boot of a software RAID.  As
OpenBSD already supports software RAID in a hardware-independent way,
there isn't much desire among the OpenBSD developers to implement
special support for these cards.

<p>
Almost all on-board SATA or IDE "RAID" controllers are this
software-based style, and will typically work fine as a SATA or IDE
controller using the standard IDE driver
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pciide&amp;sektion=4">pciide(4)</a>),
but are not going to work as a hardware RAID system on OpenBSD.
d2506 1
a2506 1
<small>$OpenBSD: faq14.html,v 1.211 2011/05/30 12:40:43 lum Exp $</small>
@


1.211
log
@Some small things:
1. Make some meta tags more pertinent.
2. "a name" anchors align with top of browser.
3. Missing 'the' (@@ 14.15 Recovering partitions....)
@
text
@d773 1
a773 1
csh's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=unlimit&amp;sektion=1">unlimit(1)</a>,
d775 1
a775 1
sh's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ulimit&amp;sektion=1">ulimit(1)</a>.)
d2575 1
a2575 1
<small>$OpenBSD: faq14.html,v 1.210 2011/05/05 02:14:10 nick Exp $</small>
@


1.210
log
@
I stutter when I type.  Spotted by (francois at chambaud dot org), thanks!
@
text
@d7 2
a8 2
<meta name= "description"   content= "the OpenBSD FAQ page">
<meta name= "keywords"      content= "openbsd,faq">
d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2010 by OpenBSD.">
d178 1
d705 1
a705 1

d888 1
d1264 1
d1702 1
a1702 1

d1746 1
a1746 1

d1815 1
d1839 1
d1886 1
a1886 1
Therefore, even if area of the disk containing the disklabel is
d1891 1
a1891 1

d2045 1
d2120 1
a2120 1

d2575 1
a2575 1
<small>$OpenBSD: faq14.html,v 1.209 2011/05/01 13:08:58 nick Exp $</small>
@


1.209
log
@
updates for 4.9
@
text
@d2391 1
a2391 1
your friend's computers!
d2569 1
a2569 1
<small>$OpenBSD: faq14.html,v 1.208 2011/01/29 03:39:14 nick Exp $</small>
@


1.208
log
@
singular -> plural, thanks Joachim Schipper!
@
text
@d1028 1
a1028 1
>> OpenBSD/i386 BOOT 3.02
d1038 1
a1038 1
OpenBSD 4.8 (GENERIC) #136: Mon Aug 16 09:06:23 MDT 2010
d2569 1
a2569 1
<small>$OpenBSD: faq14.html,v 1.207 2011/01/28 03:10:10 nick Exp $</small>
@


1.207
log
@
the listed external box makers are high-end SAN-like device providers
now, I can't tell what Accusys is currently selling through their
perpetually sucky and now Flash driven website, and buying Arco products
seems to be difficult.  This section doesn't help people, remove.
@
text
@d36 1
a36 1
<li><a href="#Boot386"    >14.7 - How does OpenBSD/i386 and OpenBSD/amd64 boot?</a>
d889 1
a889 1
<h2>14.7 - How does OpenBSD/i386 and OpenBSD/amd64 boot?</h2>
d2569 1
a2569 1
<small>$OpenBSD: faq14.html,v 1.206 2011/01/28 03:04:49 nick Exp $</small>
@


1.206
log
@
sync section headers and index page, from Maurice Janssen, thanks!
While here, remove the note to translators.
@
text
@a1792 19
<p>
Another option available for many platforms is one of the many products
which make multiple drives act as a single IDE or SCSI drive, and are
then plugged into a standard IDE or SCSI adapter.  These devices can
work on virtually any hardware platform that supports either SCSI or
IDE.

<p>
Some manufacturers of these products:
<ul>
<li><a href="http://www.arcoide.com/">Arco</a>
<li><a href="http://www.accusys.com.tw/">Accusys</a>
<li><a href="http://www.maxtronic.com/">Maxtronic</a>
<li><a href="http://www.infortrend.com/">Infortrend</a>
</ul>
(Note: these are just products that OpenBSD users have reported using
-- this is not any kind of endorsement, nor is it an
exhaustive list.)

d2569 1
a2569 1
<small>$OpenBSD: faq14.html,v 1.205 2011/01/02 18:46:05 nick Exp $</small>
@


1.205
log
@
LOTS of rework and update inspired by comments from krw@@, and many thanks
to him for that!
@
text
@a15 3
<!-- Translation team: I'm going to be reworking a lot of this for a while,
     your time might be spent elsewhere for a few weeks... -->

d36 1
a36 1
<li><a href="#Boot386"    >14.7 - How does OpenBSD/amd64 and OpenBSD/i386 boot?</a>
d2588 1
a2588 1
<small>$OpenBSD: faq14.html,v 1.204 2010/12/04 00:18:42 nick Exp $</small>
@


1.204
log
@
rework of 14.1, Disks and Partitions.  Help from krw@@
@
text
@d39 1
a39 1
<li><a href="#Boot386"    >14.7 - How does OpenBSD/i386 boot?</a>
d234 2
a235 2
see the OpenBSD partition (A6) and its size. The * tells us that the
OpenBSD partition is a bootable partition.
d277 2
a278 2
<li><b>disk</b>  Display the current drive geometry that fdisk has
probed. You are given a chance to edit it if you wish.
d283 1
a283 1
current boot block.  You may edit either in BIOS geometry mode, or in
a288 2
(OpenBSD itself can only be booted from primary partitions, but
you can mark any partition as bootable.)
d314 1
a314 1
<li>fdisk(8) offers the ability to edit partitions both in raw sectors
a369 4
They also contain information about your disk itself, such as rotational
speed, interleave, etc.,  which is there for historic reasons, and is
often incorrect.
Don't worry about this.
d383 1
a383 1
you use one of these 'primary' partitions to store *all* of your 
a424 2
# Inside MBR partition 3: type A6 start 63 size 29880837
# /dev/rwd0c:
d427 2
a428 1
label: Maxtor 51536H2  
d434 4
a437 8
cylinders: 16383
total sectors: 29888820
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # microseconds
track-to-track seek: 0  # microseconds
d441 8
a448 8
#             size        offset  fstype [fsize bsize  cpg]
  a:        614817            63  4.2BSD   2048 16384  328 # Cyl     0*-   609 
  b:        409248        614880    swap                   # Cyl   610 -  1015 
  c:      29888820             0  unused      0     0      # Cyl     0 - 29651*
  d:       6291936       1024128  4.2BSD   2048 16384  328 # Cyl  1016 -  7257 
  e:        409248       7316064  4.2BSD   2048 16384  328 # Cyl  7258 -  7663 
  f:       1024128       9822960  4.2BSD   2048 16384  328 # Cyl  9745 - 10760 
  h:       2097648       7725312  4.2BSD   2048 16384  328 # Cyl  7664 -  9744 
d482 3
a484 3
offset: [10847088] 
size: [19033812] 2g
Rounding to nearest cylinder: 4194288
d487 10
a496 23
device: /dev/rwd0c
type: ESDI
disk: ESDI/IDE disk
label: Maxtor 51536H2  
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 16383
total bytes: 14594.2M
free bytes: 7245.9M
rpm: 3600

16 partitions:
#             size        offset  fstype [fsize bsize  cpg]
  a:        300.2M          0.0M  4.2BSD   2048 16384  328 # Cyl     0*-   609 
  b:        199.8M        300.2M    swap                   # Cyl   610 -  1015 
  c:      14594.2M          0.0M  unused      0     0      # Cyl     0 - 29651*
  d:       3072.2M        500.1M  4.2BSD   2048 16384  328 # Cyl  1016 -  7257 
  e:        199.8M       3572.3M  4.2BSD   2048 16384  328 # Cyl  7258 -  7663 
  f:        500.1M       4796.4M  4.2BSD   2048 16384  328 # Cyl  9745 - 10760 
  h:       1024.2M       3772.1M  4.2BSD   2048 16384  328 # Cyl  7664 -  9744 
  k:       2048.0M       5296.4M  4.2BSD   2048 16384   16 # Cyl 10761 - 14921 
d549 2
d552 8
a559 9
<li>(i386, amd64) <b>Leave first track free:</b>
On some platforms, you should leave the first logical track unused, both
in disklabel(8) and in fdisk(8).
This guideline is sometimes corrupted into "start the partitions at 
sector 63", but this is ONLY true if that is the size of a track on
your hardware.
Don't make that assumption, it is not always true, disklabel will 
tell you what it thinks the number of sectors per track is.
Many other platforms expect the OpenBSD partitions to start at sector 0.
d581 6
d891 5
a895 3
<h2>14.7 - How does OpenBSD/i386 boot?</h2>
The boot process for OpenBSD/i386 is not trivial, and understanding how
it works can be useful to troubleshoot a problem when things don't work.
d898 2
a899 2
<li><b><i>Master Boot Record (MBR):</i></b> The Master Boot Record is the 
first physical sector (512 bytes) on the disk.
d906 4
a909 3
the terminology of OpenBSD, it would involve rewriting the entire MBR
sector, not just the code, as it might on some systems.
You will rarely want to do this.
d911 1
a911 1
("<tt>fdisk -u wd0</tt>").
d914 2
a915 2
While OpenBSD includes an MBR, you are not obliged
to use it, as virtually any MBR can boot OpenBSD.  
d941 1
d945 2
a946 2
(after the name of the file that holds the code) is the first physical
sector of the OpenBSD partition of the disk.
a972 3
The older (pre v3.5) biosboot(8) showed the message "<tt>reading
boot...</tt>".

d974 1
d1016 1
a1016 1

d1140 1
a1140 1
A new 250G IDE hard disk may have issues on older (pre >137G
d1145 2
a1146 1
You must respect the abilities of your hardware, of course.
d1194 2
a1195 2
<p>
<b>the entire root partition must be within the computer's BIOS
d1197 1
d1243 1
a1243 1
2<sup>31</sup>-1, or 2,147,483,647 sectors, and as each sector is 512
a1257 5
Before doing upgrades, you will want to mark any FFS2 partitions as
"noauto" to keep them from being (mis)handled by the install kernel
(which does not support FFS2 partitions).

<p>
d1262 2
a1263 3
Many have just not been tested yet, for example, as of this writing,
there are no >1TB IDE or SATA drives available for testing, so we
can't say for sure everything works perfectly yet.
d1316 1
a1316 1
disk drives fails.
d1322 4
a1325 2
A more advanced backup utility called
"<a href="http://www.amanda.org">Amanda</a>" is also available through
d1327 1
a1327 13
one tape drive.
In most environments
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&amp;sektion=8">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&amp;sektion=8">restore(8)</a>
is enough. However, if you have a need to backup multiple machines,
Amanda might be worth investigating.

<p>
The device examples in this document are for a configuration that uses
both SCSI disks and tape. In a production environment, SCSI disks are
recommended over IDE due to the way in which they handle bad blocks.
That is not to say this information is useless if you are using an IDE
disk or other type of tape drive, your device names will simply differ
slightly. For example sd0a would be wd0a in an IDE based system.
d1673 1
a1673 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnd&amp;sektion=4">vnd(4)</a>
d1709 1
a1709 5
are unreliable with many combinations of hardware.  Until
recently, most "mainstream" operating systems that claimed to support
DMA transfers with IDE drives did not ship with that feature active by
default due to unreliable hardware.
Now many of these same machines are being used for OpenBSD.
d1915 1
a1915 1
(CD-ROM, DVD media), FAT (MS-DOS and Windows), NFS, NTFS (Windows), AmigaDOS.
d1952 1
a1952 1
hw.disknames=cd0,cd1,wd0,fd0,cd2
d1985 1
d1993 2
a1994 6
rpm: 3600
interleave: 1
trackskew: 0
cylinderskew: 0
headswitch: 0           # microseconds
track-to-track seek: 0  # microseconds
d1999 14
a2012 14
  a:        408366      20338290  4.2BSD   2048 16384   16 # Cyl 20176*- 20581 
  b:       1638000      20746656    swap                   # Cyl 20582 - 22206 
  c:      78165360             0  unused      0     0      # Cyl     0 - 77544 
  d:       4194288      22384656  4.2BSD   2048 16384   16 # Cyl 22207 - 26367 
  e:        409248      26578944  4.2BSD   2048 16384   16 # Cyl 26368 - 26773 
  f:      10486224      26988192  4.2BSD   2048 16384   16 # Cyl 26774 - 37176 
  g:      12182499      37474416  4.2BSD   2048 16384   16 # Cyl 37177 - 49262*
  i:         64197            63 unknown                   # Cyl     0*-    63*
  j:      20274030         64260 unknown                   # Cyl    63*- 20176*
  k:       1975932      49656978   MSDOS                   # Cyl 49262*- 51223*
  l:       3919797      51632973 unknown                   # Cyl 51223*- 55111*
  m:       2939832      55552833  ext2fs                   # Cyl 55111*- 58028*
  n:       5879727      58492728  ext2fs                   # Cyl 58028*- 63861*
  o:      13783707      64372518  ext2fs                   # Cyl 63861*- 77535*
a2032 2
However, some are not, e.g. the NTFS support is experimental and therefore
not included in GENERIC.
d2157 1
a2157 1
sd0: 123MB, 123 cyl, 64 head, 32 sec, 512 bytes/sec, 251904 sec total
d2308 1
a2308 1
USB device, the USB device will show up as a SCSI disk, usually sd0.
d2310 2
a2311 1
SCSI-like disks on it, it will probably end up with a different
d2340 1
a2340 1
It is probably not wise to assume that switching to flash means you
d2591 1
a2591 1
<small>$OpenBSD: faq14.html,v 1.202 2010/05/19 12:41:02 nick Exp $</small>
@


1.203
log
@
update to 4.8
@
text
@d75 1
a75 1
The details of setting up disks in OpenBSD varies between platforms, so
d77 3
a79 3
<b>INSTALL.&lt;arch&gt;</b> file for your 
<a href="http://www.openbsd.org/plat.html">platform</a>
to determine what is required. 
d82 39
a120 4
Some programs such as fdisk(8), disklabel(8) and others allow you to use
short syntax like "sd0" for the first SCSI drive or "wd0" for the
first IDE drive. The program will expand the short syntax out to the
correct device.
a121 1
<p>
d123 1
a123 7
two completely different things in the UNIX world and this leads to some
confusion.
Originally, a "partition" was defined by the operating system and used
to keep file systems separated on the disk. 
Later, other platforms such as i386 then reused this term for the name
of the entries in their required "Partition Table" and this newer
definition has mostly replaced the older definition in common usage.
d130 1
a130 1
(often called "filesystem partitions" or "labels").
d140 26
d167 13
@


1.202
log
@
updates for 4.7
@
text
@d989 1
a989 1
OpenBSD 4.7 (GENERIC) #558: Thu Mar 17 20:46:15 MDT 2010
d2561 1
a2561 1
<small>$OpenBSD: faq14.html,v 1.201 2010/03/19 02:16:55 nick Exp $</small>
@


1.201
log
@
New intro section, which forces a renumber, from J. C. Roberts.
Note: there is duplicated info, which is not JCR's fault, he's got it
cleaned up on diffs, but I want to make some further improvements to
some of what he has before I commit that.  Just want to get this part in
so we can go to town on the rest.
Translation team: give us a while, much of what we've just changed will
be changing more.
@
text
@d989 2
a990 2
OpenBSD 4.6 (GENERIC.MP) #89: Thu Jul  9 21:32:39 MDT 2009
    deraadt@@i386.openbsd.org:/usr/src/sys/arch/i386/compile/GENERIC.MP
d2561 1
a2561 1
<small>$OpenBSD: faq14.html,v 1.200 2010/03/19 01:59:08 nick Exp $</small>
@


1.200
log
@
Swap disklabel and fdisk sections, as the people that need both encounter
fdisk first.  From J. C. Roberts
@
text
@d16 3
d33 8
a40 7
<li><a href="#fdisk"      >14.1 - Using OpenBSD's fdisk(8)</a>
<li><a href="#disklabel"  >14.2 - Using OpenBSD's disklabel(8)</a>
<li><a href="#NewDisk"    >14.3 - Adding extra disks in OpenBSD</a>
<li><a href="#Swap"       >14.4 - How is swap handled?</a>
<li><a href="#SoftUpdates">14.5 - Soft Updates</a>
<li><a href="#Boot386"    >14.6 - How does OpenBSD/i386 boot?</a>
<li><a href="#LargeDrive" >14.7 - What are the issues regarding large
d42 2
a43 2
<li><a href="#InstBoot"   >14.8 - Installing Bootblocks - i386/amd64 specific</a>
<li><a href="#Backup"     >14.9 - Preparing for disaster: Backing up and
d45 2
a46 2
<li><a href="#MountImage" >14.10 - Mounting disk images in OpenBSD</a>
<li><a href="#pciideErr"  >14.11 - Help! I'm getting errors with IDE DMA!</a>
d71 43
d115 1
a115 1
<h2>14.1 - Using fdisk(8)</h2>
d274 1
a274 1
<h2>14.2 - Using OpenBSD's disklabel(8)</h2>
d541 1
a541 1
<h2>14.3 - Adding extra disks in OpenBSD</h2>
d660 1
a660 1
<h2>14.4 - How is swap handled?</h2>
d662 1
a662 1
<h3>14.4.1 - About swap</h3>
d703 1
a703 1
<h3>14.4.2 - Swapping to a partition</h3>
d720 1
a720 1
<h3>14.4.3 - Swapping to a file</h3>
d808 1
a808 1
<h2>14.5 - Soft Updates</h2>
d841 1
a841 1
<h2>14.6 - How does OpenBSD/i386 boot?</h2>
d1076 1
a1076 1
<h2>14.7 - What are the issues regarding large drives with OpenBSD?</h2>
d1218 1
a1218 1
<h2>14.8 - Installing Bootblocks - i386/amd64 specific</h2>
d1261 1
a1261 1
<h2>14.9 - Preparing for disaster: Backing up and Restoring from tape</h2>
d1630 1
a1630 1
<h2>14.10 - Mounting disk images in OpenBSD</h2>
d1666 1
a1666 1
<h2>14.11 - Help! I'm getting errors with IDE DMA!</h2>
d2561 1
a2561 1
<small>$OpenBSD: faq14.html,v 1.199 2010/03/08 12:29:01 nick Exp $</small>
@


1.199
log
@
Reword and improve (i.e., shorten), from J. C. Roberts, thanks!
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2009 by OpenBSD.">
d30 2
a31 2
<li><a href="#disklabel"  >14.1 - Using OpenBSD's disklabel(8)</a>
<li><a href="#fdisk"      >14.2 - Using OpenBSD's fdisk(8)</a>
d67 159
d227 1
a227 1
<h2>14.1 - Using OpenBSD's disklabel(8)</h2>
a492 159
<a name="fdisk"></a>
<h2>14.2 - Using fdisk(8)</h2>

Be sure to check the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
man page.

<p>
fdisk(8) is used on some platforms (i386, amd64, macppc, zaurus and
armish) to create a partition recognized by the system boot ROM, into
which the OpenBSD disklabel partitions can be placed.
Other platforms do not need or use fdisk(8).
fdisk(8) can also be used for manipulations of the Master Boot Record (MBR),
which can impact all operating systems on a computer.
Unlike the fdisk-like programs on some other operating systems,
OpenBSD's fdisk assumes you know what you want to do, and for the most
part, it will let you do what you need to do, making it a powerful tool
to have on hand.
It will also let you do things you shouldn't or didn't intend to do, so
it must be used with care.

<p>
Normally, only one OpenBSD fdisk partition will be placed on a disk.
That partition will be subdivided by <a href="#disklabel">disklabel</a>
into OpenBSD filesystem partitions.

<p>

<p>
To just view your partition table using fdisk, use:

<blockquote><pre>
# <b>fdisk sd0</b><br>
</pre></blockquote>

<p>
Which will give an output similar to this:

<blockquote><pre>
Disk: sd0       geometry: 553/255/63 [8883945 Sectors]
Offset: 0       Signature: 0xAA55
         Starting       Ending       LBA Info:
 #: id    C   H  S -    C   H  S [       start:      size   ]
------------------------------------------------------------------------
*0: A6    3   0  1 -  552 254 63 [       48195:     8835750 ] OpenBSD     
 1: 12    0   1  1 -    2 254 63 [          63:       48132 ] Compaq Diag.
 2: 00    0   0  0 -    0   0  0 [           0:           0 ] unused      
 3: 00    0   0  0 -    0   0  0 [           0:           0 ] unused      
</pre></blockquote>

<p>
In this example we are viewing the fdisk output of the first SCSI drive.
We can
see the OpenBSD partition (A6) and its size. The * tells us that the
OpenBSD partition is a bootable partition.

<p>
In the previous example we just viewed our information. What if we want
to edit our partition table? Well, to do so we must use the <b>-e</b>
flag.  This will bring up a command line prompt to interact with fdisk.

<blockquote><pre>
# <b>fdisk -e wd0</b>
Enter 'help' for information
fdisk: 1&gt; <b>help</b>
        help            Command help list
        manual          Show entire OpenBSD man page for fdisk
        reinit          Re-initialize loaded MBR (to defaults)
        setpid          Set the identifier of a given table entry
        disk            Edit current drive stats
        edit            Edit given table entry
        flag            Flag given table entry as bootable
        update          Update machine code in loaded MBR
        select          Select extended partition table entry MBR
        swap            Swap two partition entries
        print           Print loaded MBR partition table
        write           Write loaded MBR to disk
        exit            Exit edit of current MBR, without saving changes
        quit            Quit edit of current MBR, saving current changes
        abort           Abort program without saving current changes
fdisk: 1&gt; 
</pre></blockquote>

<p> 

<p>Here is an overview of the commands you can use when you choose the
<b>-e</b> flag.

<ul>
<li><b>help</b>  Display a list of commands that fdisk understands in
the interactive edit mode.
<li><b>reinit</b>  Initialize the currently selected, in-memory copy of
the boot block.
This is a handy way to quickly slap a "full-disk" OpenBSD partition in
place, update the boot code, and in general, make the system ready for
OpenBSD (and nothing but OpenBSD).
<li><b>disk</b>  Display the current drive geometry that fdisk has
probed. You are given a chance to edit it if you wish.
<li><b>setpid</b>  Change the partition identifier of the given
partition table entry. This command is particularly useful for
reassigning an existing partition to OpenBSD.
<li><b>edit</b>  Edit a given table entry in the memory copy of the
current boot block.  You may edit either in BIOS geometry mode, or in
sector offsets and sizes.
<li><b>flag</b>  Make the given partition table entry bootable. Only one
entry can be marked bootable. If you wish to boot from an extended
partition, you will need to mark the partition table entry for the
extended partition as bootable.
(OpenBSD itself can only be booted from primary partitions, but
you can mark any partition as bootable.)
<li><b>update</b>  Update the machine code in the memory copy of the
currently selected boot block.
<li><b>select</b>  Select and load into memory the boot block pointed to
by the extended partition table entry in the current boot block.
<li><b>swap</b> Swaps two MBR entries, so you can re-order the MBR.
<li><b>print</b>   Print the currently selected in-memory copy of the
boot block and its MBR table to the terminal.
<li><b>write</b>   Write the in-memory copy of the boot block
to disk. You will be asked to confirm this operation.
<li><b>exit</b>  Exit the current level of fdisk, either returning to
the previously selected in-memory copy of a boot block, or exiting the
program if there is none.
<li><b>quit</b>  Exit the current level of fdisk, either returning to
the previously selected in-memory copy of a boot block, or exiting the
program if there is none.  Unlike exit it does write the modified block
out.
<li><b>abort</b>   Quit program without saving current changes.
</ul>

<h3>fdisk tricks and tips</h3>
<ul>
<!-- <li>On OpenBSD platforms which use fdisk, you should leave the first
track free.
This leaves room for the Master Boot Record, which is where the fdisk
partition table resides.  (not sure if this is true) -->
<li>fdisk(8) offers the ability to edit partitions both in raw sectors
and in Cylinder/Head/Sector formats.
Both options are given for a reason -- some tasks are easier
accomplished one way, others the other way.
Don't lock yourself into only using one option.
<li>A totally blank disk will need to have the master boot record's boot
code written to the disk before it can boot.
You can use the "reinit" or "update" options to do this.
If you fail to do this, you can write a valid partition table with
fdisk, but not have a bootable disk.
You may wish to update the existing boot code anyway if you are
uncertain of its origin.
<li>If your system has a "maintenance" or "diagnostic" partition, it is
recommended that you leave it in place or install it BEFORE installing
OpenBSD.
<li> For historical reasons, "q" saves changes and exits the program,
and "x" exits without saving.
This is the opposite of what many people are now used to in other
environments.
fdisk(8) does not warn before saving the changes, so use with care.

</ul>


d2514 1
a2514 1
<small>$OpenBSD: faq14.html,v 1.198 2010/03/04 01:14:13 nick Exp $</small>
@


1.198
log
@
make it even more clear this is a way to do installs.
@
text
@d2277 3
a2279 4
As the media will be readable and writable from both USB and IDE
adapters, you can use create the media for booting in an IDE adapter but
maintain it in a USB adapter on a different machine (or the other way
around).
d2282 1
a2282 1
OpenBSD treats the flash disk as any other disk so one can use 
d2514 1
a2514 1
<small>$OpenBSD: faq14.html,v 1.197 2010/01/18 03:41:49 nick Exp $</small>
@


1.197
log
@
Wording improvement from Jan Stary (hans at stare dot cz), which
I agree with for a number of reasons. (second -> other)
@
text
@d2334 2
d2515 1
a2515 1
<small>$OpenBSD: faq14.html,v 1.196 2009/12/16 03:57:44 nick Exp $</small>
@


1.196
log
@
+#flashmemLive: Creating a "Live" OpenBSD USB device.
@
text
@d2308 1
a2308 1
Note that if the second partition's type is chosen appropriately, it is
d2513 1
a2513 1
<small>$OpenBSD: faq14.html,v 1.195 2009/11/30 12:50:27 nick Exp $</small>
@


1.195
log
@
punctuation, validation and spelling corrections from Alan Bueno.
@
text
@d54 7
d2063 1
d2315 87
d2513 1
a2513 1
<small>$OpenBSD: faq14.html,v 1.194 2009/11/09 01:33:22 nick Exp $</small>
@


1.194
log
@
we support UFS2 now.  Pointed out by matthew at dempsky dot org
confirmed by tedu@@
@
text
@d1690 1
a1690 1
reinistalls.
a2329 1
<p>
d2418 1
a2418 1
<small>$OpenBSD: faq14.html,v 1.193 2009/11/08 02:56:33 nick Exp $</small>
@


1.193
log
@
correct capitalization, per matthew at demsky dot org, thanks!
@
text
@a1828 1
Note that FreeBSD's UFS2 filesystem is not supported.
d2419 1
a2419 1
<small>$OpenBSD: faq14.html,v 1.192 2009/10/30 02:07:57 nick Exp $</small>
@


1.192
log
@
renumber.
@
text
@d828 1
a828 1
Using Drive 0, Partition 3;
d2420 1
a2420 1
<small>$OpenBSD: faq14.html,v 1.191 2009/10/30 02:06:03 nick Exp $</small>
@


1.191
log
@
krw@@ pointed out that the FAQ was still endorsing and even suggesting
RAIDframe, and that is clearly not the long-term direction we are going.
His diff didn't go far enough in my opinion... Let's outright say that
we don't recommend RAIDframe or ccd for new installations.
Also...I don't really consider simple RAID installs a performance boost
unless RAID0, and we really shouldn't be recommending that, so remove
RAID references from 14.8
@
text
@d2333 1
a2333 1
<h3>14.18.3 - Soft updates</h3>
d2348 1
a2348 1
<h3>14.18.4 - Size of the namei() cache</h3>
d2420 1
a2420 1
<small>$OpenBSD: faq14.html,v 1.190 2009/10/25 17:01:44 steven Exp $</small>
@


1.190
log
@whole disk question in installer was adapted; fix href as well.
from alan.bsd at gmail
@
text
@d1676 6
a1681 11
OpenBSD includes RAIDframe, a software RAID solution.  Documentation for
it can be found in the following places:

<ul>
<li><a href="#Optraid">Disk Optimization, RAID</a>
<li><a href="http://www.pdl.cmu.edu/RAIDframe/">RAIDframe Homepage</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raidctl&amp;sektion=8">man
     page for raidctl(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raid&amp;sektion=4">man
     page for raid(4)</a>
</ul>
d1684 3
a1686 5
The root partition can be directly
mirrored by OpenBSD using the "Autoconfiguration" option of RAIDframe.

<p>
OpenBSD 3.7-stable and later also includes mirroring as a feature of the
d1688 3
a1690 13
driver.
This system is built into the GENERIC kernel and is in the bsd.rd
kernel of some platforms (amd64, hppa, hppa64, i386), so it can be much
easier to use, though it has some limitations regarding rebuilding the
array.

See:
<ul>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ccd&amp;sektion=4">ccd(4)
man page</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ccdconfig&amp;sektion=8">ccdconfig(8)
man page</a>
</ul>
d1700 9
d2321 2
a2322 2
OpenBSD has several options to increase the speed of your disk
operations and provide fault tolerance.
a2325 2
<li><a href="#Optccd">CCD</a> - Concatenated Disk Driver.
<li><a href="#Optraid">RAID</a>
a2330 98
<a name="Optccd"></a>
<h3>14.18.1 - CCD</h3>

The first option is the use of
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ccd&amp;sektion=4">ccd(4)</a>,
the Concatenated Disk Driver.
This allows you to join several partitions into one virtual disk (and
thus, you can make several disks look like one disk).
This concept is similar to that of LVM (logical volume management),
which is found in many commercial Unix flavors.

<p>
If you are running GENERIC, ccd is already enabled (in
<tt>/usr/src/sys/conf/GENERIC</tt>).
If you have customized your kernel, you may need to return it to your
kernel configuration.
Either way, a line such as this should be in your configuration file:

<blockquote><pre>
<strong>pseudo-device   ccd     4       # concatenated disk devices</strong>
</pre></blockquote>

<p>
The above example gives you up to 4 ccd devices (virtual disks).
Now you need to figure out which partitions on your real disks you want
to dedicate to ccd.
Use disklabel to mark these partitions as type 'ccd'.
On some architectures, disklabel may not allow you to do this.
In this case, mark them as 'ffs'.

<p>
If you are using ccd to gain performance by striping, note that you will
not get optimum performance unless you use the same model of disks with
the same disklabel settings.

<p>
Edit /etc/ccd.conf to look something like this:
(for more information on configuring ccd, look at
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ccdconfig&amp;sektion=8">ccdconfig(8)</a>)

<blockquote><pre>
# Configuration file for concatenated disk devices
#
# ccd   ileave  flags   component devices
ccd0   16      none    /dev/sd2e /dev/sd3e
</pre></blockquote>

<p>
To make your changes take effect, run

<blockquote><pre>
# ccdconfig -C
</pre></blockquote>

<p>
As long as /etc/ccd.conf exists, ccd will automatically configure itself
upon boot.
Now, you have a new disk, ccd0, a combination of /dev/sd2e and /dev/sd3e.
Just use disklabel on it like you normally would to make the partition
or partitions you want to use.
Again, don't use the 'c' partition as an actual partition that you put
stuff on.
Make sure your usable partitions are at least one cylinder off from the
beginning of the disk.

<p>
<a name="Optraid"></a>
<h3>14.18.2 - RAID</h3>

Another solution is
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=raid&amp;sektion=4">raid(4)</a>,
which will have you use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raidctl&amp;sektion=8">raidctl(8)</a>
to control your raid devices.
OpenBSD's RAID is based upon Greg Oster's
<a href="http://www.cs.usask.ca/staff/oster/raid.html">NetBSD port</a> of
the CMU <a href="http://www.pdl.cmu.edu/RAIDframe/">RAIDframe</a>
software.
OpenBSD has support for RAID levels of 0, 1, 4, and 5.

<p>
With raid, as with ccd, support must be in the KERNEL.
Unlike ccd, support for RAID is not found in GENERIC, so it must be
compiled into your kernel (RAID support adds some 500K to the size of an
i386 kernel).

<blockquote><pre>
<strong>pseudo-device   raid   4       # RAIDframe disk device</strong>
</pre></blockquote>

<p>
Read the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raid&amp;sektion=4">raid(4)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raidctl&amp;sektion=8">raidctl(8)</a>
man pages to get full details.
There are many options and possible configurations available, and a
detailed explanation is beyond the scope of this document.

d2335 1
a2335 1
Another tool that can be used to speed up your system is softupdates.
a2342 7
So, a system crash should not
require
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck&amp;sektion=8">fsck(8)</a>
upon boot up, but simply a background version of fsck that makes changes
to the metainfo in RAM (a la softupdates).
This means rebooting a server is much faster, as you don't have to wait
for fsck!  (OpenBSD does not have this feature yet.)
d2420 1
a2420 1
<small>$OpenBSD: faq14.html,v 1.188 2009/04/30 17:19:11 nick Exp $</small>
@


1.189
log
@
updates for 4.6
@
text
@d945 5
a949 4
disk is new or moved from a different platform, AND you don't answer "Yes"
to the "Use entire disk" question of the <a href="faq4.html#Disks">installation
process</a>, you may end up with a disk without a valid MBR, and thus,
will not be bootable, even though it has a valid partition table.
@


1.188
log
@
updates for 4.5
@
text
@d935 2
a936 2
OpenBSD 4.5 (GENERIC) #1749: Sat Feb 28 14:51:18 MST 2009
    deraadt@@i386.openbsd.org:/usr/src/sys/arch/i386/compile/GENERIC
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.187 2009/04/07 00:41:14 nick Exp $</small>
@


1.187
log
@
updated/corrected links from Benoit Lecocq (blq at arcane-labs dot net),
thanks!
@
text
@d935 1
a935 1
OpenBSD 4.4 (GENERIC) #1021: Tue Aug 12 17:16:55 MDT 2008
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.186 2009/04/04 17:14:53 nick Exp $</small>
@


1.186
log
@
Frantisek Holop pointed out that swap's role in saving a core after a
panic would be appropriate to mention here, too (it's also in faq4.html).
Technical assistance from deraadt@@
@
text
@d1016 1
a1016 1
<li><a href="http://www.ata-atapi.com/hiw.htm">http://www.ata-atapi.com/hiw.htm</a>
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.185 2009/03/05 12:06:45 nick Exp $</small>
@


1.185
log
@
improper closing </h3>.  From (matt dot jibson at gmail dit com), thanks!
@
text
@d614 13
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.184 2009/03/05 01:21:12 nick Exp $</small>
@


1.184
log
@
rework 14.4 into "How is swap handled?", discuss swap in general, swapping
to partitions, and remove the swapping to a vnode device section (ick,
custom kernels).  Bump copyright date.
@
text
@d653 1
a653 1
<h3>14.4.3 - Swapping to a file</h2>
d2521 1
a2521 1
<small>$OpenBSD: faq14.html,v 1.183 2009/02/26 08:38:53 sobrado Exp $</small>
@


1.183
log
@the newfs(8)/mount(8) examples on section 14.3 should be related
with the label created on the disk drive on this section of the faq.

problem outlined by Chano Antuna.

ok nick@@
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2008 by OpenBSD.">
d33 1
a33 1
<li><a href="#SwapFile"   >14.4 - How to swap to a file</a>
d605 2
a606 1
<h2>14.4 - How to swap to a file</h2>
d608 29
d638 17
d663 6
a668 5
Swapping to a file doesn't require a custom built kernel, although that
can still be done, this faq will show you how to add swap space both
ways.

<h3>Swapping to a file. </h3>
d671 1
a671 2
Swapping to a file is the easiest and quickest way to get extra swap space
setup.  The file must not reside on a filesystem which has SoftUpdates
d689 1
a689 1
use at the moment. But for the purposes of this document, we will act as
d697 1
a697 1
is 32M large.
a738 60
<h3>Swapping via a vnode device</h3>

<p>
This is a more permanent solution to adding more swap space. To swap to
a file permanently, first make a kernel with vnd0c as swap. If you have
wd0a as root filesystem, wd0b is the previous swap, use this line in the
kernel configuration file (refer to compiling a new kernel if in doubt):

<blockquote><pre>
config          bsd     root on wd0a swap on wd0b and vnd0c dumps on wd0b
</pre></blockquote>

<p>
After this is done, the file which will be used for swapping needs to be
created. You should do this by using the same command as in the above
examples.

<blockquote><pre>
$ <b>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</b>
32768+0 records in
32768+0 records out
33554432 bytes transferred in 20 secs (1677721 bytes/sec)
</pre></blockquote>

<p>
Now your file is in place, you need to add the file to your
<i>/etc/fstab</i>. Here is a sample line to boot with this device as
swap on boot.

<blockquote><pre>
$ <b>cat /etc/fstab</b>
/dev/wd0a / ffs rw 1 1
/dev/vnd0c none swap sw 0 0 
</pre></blockquote>

<p>
At this point your computer needs to be rebooted so that the kernel
changes can take place. Once this has been done it's time to configure
the device as swap. To do this you will use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&amp;sektion=8">vnconfig(8)</a>.

<blockquote><pre>
$ <b>sudo vnconfig -c -v vnd0 /var/swap</b>
vnd0: 33554432 bytes on /var/swap
</pre></blockquote>

<p>
Now for the last step, turning on swapping to that device. We will do
this just like in the above examples, using swapctl(8). Then we will
check to see if it was correctly added to our list of swap devices.

<blockquote><pre>
$ <b>sudo swapctl -a /dev/vnd0c</b>
$ <b>swapctl -l</b>
Device      512-blocks     Used    Avail Capacity  Priority
swap_device      65520        8    65512     0%    0
/dev/vnd0c       65536        0    65536     0%    0
Total           131056        8   131048     0%
</pre></blockquote>

d2521 1
a2521 1
<small>$OpenBSD: faq14.html,v 1.182 2009/02/05 11:16:51 sthen Exp $</small>
@


1.182
log
@fix link to description of softdep; part of a diff on www@@ from
Alan R. S. Bueno.
@
text
@d560 1
a560 1
# <b>newfs sd2a </b>
d574 1
a574 1
# <b>mount /dev/sd2a /u</b>
d582 1
a582 1
/dev/sd2a /u ffs rw 1 1
d590 1
a590 1
file to show that the /usr/local partition is now /dev/sd2a (your
d594 1
a594 1
<b>/dev/sd2a /usr/local ffs rw 1 1</b>
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.181 2008/11/30 03:58:34 nick Exp $</small>
@


1.181
log
@
boot(8) is to version 3.02.
@
text
@d2243 1
a2243 1
Using <a href="faq8.html#softdep">soft updates</a> will help this
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.180 2008/11/24 03:08:06 nick Exp $</small>
@


1.180
log
@
missing 'e'.  Spotted by "Constantine A. Murenin" (mureninc at gmail)
Thanks!
@
text
@d882 1
a882 1
>> OpenBSD/i386 BOOT 2.10
d925 1
a925 1
>> OpenBSD/i386 BOOT 2.10
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.179 2008/11/23 18:20:40 nick Exp $</small>
@


1.179
log
@
put #flashmemBoot where it belongs (above the title, not below)
@
text
@d2293 1
a2293 1
So, if you wish to creat a USB flash drive that is bootable with
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.178 2008/11/23 18:04:53 nick Exp $</small>
@


1.178
log
@
missing closing ")", from Alan R. S. Bueno (alan dot bsd at gmail dot com)
@
text
@d2199 1
a2202 1
<a name="flashmemBoot"></a>
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.177 2008/11/23 18:01:54 nick Exp $</small>
@


1.177
log
@
add new article: #flashmemBoot, using flash devices for boot media.
Who needs a "live CD"? (don't answer that, probably less than 10% of
my HW can boot from USB).
@
text
@d530 1
a530 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bc&amp;sektion=1">bc(1)</a>.
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.176 2008/11/12 02:59:41 nick Exp $</small>
@


1.176
log
@
punctation, standardizing, other misc. cleanup, from from Alan R. S.
Bueno (alan dot bsd at gmail dot com)
@
text
@d2064 1
d2100 1
a2100 1
<h3>The device is new/empty and you want to use it with OpenBSD only</h3>
d2131 1
a2131 1
<h3>You received the memory device from someone with whom you want to exchange data</h3>
d2199 117
d2534 1
a2534 1
<small>$OpenBSD: faq14.html,v 1.175 2008/10/31 16:52:30 nick Exp $</small>
@


1.175
log
@
update for 4.4
@
text
@d121 1
a121 1
As part of the install process, you can can define your mount points from
d488 1
a488 1

d530 1
a530 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bc&amp;sektion=1">bc(1))</a>.
d536 1
a536 1
the size of each partition and the offset of each partition (Except the
d591 1
a591 1
freshly formatted partition.) Example:
d1188 1
a1188 1
for IDE it would be wd0, etc..):
d1308 1
a1308 1
Finally which partition to backup (/dev/rsd0a, etc)
d1578 1
a1578 1
To mount a disk image (ISO images, disk images created with dd, etc) in
d2416 1
a2416 1
<small>$OpenBSD: faq14.html,v 1.174 2008/07/02 08:55:24 otto Exp $</small>
@


1.174
log
@typo; Daniele Pilenga
@
text
@d935 1
a935 1
OpenBSD 4.3 (GENERIC) #698: Wed Mar 12 11:07:05 MDT 2008
d2416 1
a2416 1
<small>$OpenBSD: faq14.html,v 1.173 2008/06/21 08:27:38 steven Exp $</small>
@


1.173
log
@new sentence, new line
@
text
@d1159 1
a1159 1
three are no >1TB IDE or SATA drives available for testing, so we
d2416 1
a2416 1
<small>$OpenBSD: faq14.html,v 1.171 2008/05/12 15:53:44 otto Exp $</small>
@


1.172
log
@typo; from Simon Kuhnle
@
text
@d1128 3
a1130 3
which is the application limit under OpenBSD.  Larger fragments
and/or blocks will reduce the number of inodes, and allow for larger
file systems.
@


1.171
log
@fsck_ffs is almost twice as memory hungry as my memory told me.
@
text
@d1126 1
a1126 1
By the time one gets to somwat larger than 1TB file system with
d2416 1
a2416 1
<small>$OpenBSD: faq14.html,v 1.170 2008/04/30 21:24:58 nick Exp $</small>
@


1.170
log
@
update for 4.3
@
text
@d1126 5
a1130 5
By the time one gets to a 2TB file system with default fragment and
block sizes, fsck will require 1GB RAM to run, which is the application
limit under OpenBSD.
Larger fragments and/or blocks will reduce the number of inodes, and
allow for larger file systems.
d2416 1
a2416 1
<small>$OpenBSD: faq14.html,v 1.169 2008/04/20 15:40:08 nick Exp $</small>
@


1.169
log
@
Some style improvements and a broken link, spotted by Frank Bax, thanks!
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2007 by OpenBSD.">
d933 1
a933 1
Copyright (c) 1995-2007 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d935 1
a935 1
OpenBSD 4.2 (GENERIC) #375: Tue Aug 28 10:38:44 MDT 2007
d1024 5
a1028 8
OpenBSD supports an individual file system of up to
2<sup>31</sup>-1, or 2,147,483,647 sectors, and as each
sector is 512 bytes, that's a tiny amount less than 1T.

<p>
There is also a 1T limit on the size of the physical disk, although
under *some* circumstances, that may not cause you problems up to 2T,
although this is <b>not</b> guaranteed.
d1034 2
a1035 1
standards) interfaces, and some very old SCSI adapters have been seen to
d1056 1
a1056 1
must be within the first 128G.
d1082 1
a1082 1
in the case of i386) and the kernel (<tt>/bsd</tt>) must be within the
d1110 2
d1115 6
d1125 36
d1549 1
a1549 1
Once you have remounted in r/w mode you can continue restoring your
d2416 1
a2416 1
<small>$OpenBSD: faq14.html,v 1.168 2008/04/20 15:11:24 nick Exp $</small>
@


1.168
log
@
"g b" is no longer an option, and the other details here are probably
more confusing than they are worth, so remove.  Spotted by Frank Bax,
(fbax at sympatico.ca).
While in the neighborhood, the excitement over a 96G disk isn't really
that big a deal anymore, even for me, so simplify.  This section (14.3)
really needs a major clean-up.
@
text
@d852 1
a852 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&amp;sektion=8&amp;arch=i386">installboot</a>,
d1009 2
a1010 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8">biosboot(8)
manual page</a>
d1012 2
a1013 2

For more information on the i386 boot process, see
d2374 1
a2374 1
<small>$OpenBSD: faq14.html,v 1.167 2007/11/01 02:11:01 nick Exp $</small>
@


1.167
log
@
updates for 4.2.
@
text
@d551 2
a552 7
There, you can just use "96M" to specify "96 megabytes".  (Or, if you
have a disk big enough, 96G for 96 gigs!) Unfortunately, the -E mode
uses the BIOS disk geometry, not the real disk geometry, and often times
the two are not the same.  To get around this limitation, type 'g d' for
'geometry disk'.  (Other options are 'g b' for 'geometry bios' and 'g u'
for geometry user, or simply, what the label said before disklabel made
any changes.)
d2374 1
a2374 1
<small>$OpenBSD: faq14.html,v 1.166 2007/08/07 00:58:05 nick Exp $</small>
@


1.166
log
@
cats out, armish in.  From (maurice at z74 dot net), thanks!
@
text
@d940 1
a940 1
OpenBSD 4.1 (GENERIC) #1434: Thu Mar  8 22:56:57 MST 2007
d2379 1
a2379 1
<small>$OpenBSD: faq14.html,v 1.165 2007/07/26 00:39:44 nick Exp $</small>
@


1.165
log
@
make sure it is clear: no booting from extended partitions, even though
fdisk will let you manipulate them.
@
text
@d77 1
a77 1
and <a href="../cats.html">cats</a>,
d336 1
a336 1
cats) to create a partition recognized by the system boot ROM, into
d2379 1
a2379 1
<small>$OpenBSD: faq14.html,v 1.164 2007/05/01 16:27:46 nick Exp $</small>
@


1.164
log
@
update for 4.1
@
text
@d435 2
d2379 1
a2379 1
<small>$OpenBSD: faq14.html,v 1.163 2006/12/29 22:01:30 steven Exp $</small>
@


1.163
log
@mounted filesystems, not partitions
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2006 by OpenBSD.">
d936 1
a936 1
Copyright (c) 1995-2006 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d938 2
a939 1
OpenBSD 4.0 (GENERIC) #1107: Sat Sep 16 19:15:58 MDT 2006
d2377 1
a2377 1
<small>$OpenBSD: faq14.html,v 1.162 2006/11/09 03:36:59 nick Exp $</small>
@


1.162
log
@
since 3.5, /boot only cares about the inode, not the disk geometry.
This article is also directly applicable to amd64.
@
text
@d1116 1
a1116 1
actually allocated to mounted partitions.
d2376 1
a2376 1
<small>$OpenBSD: faq14.html,v 1.161 2006/11/09 03:14:46 nick Exp $</small>
@


1.161
log
@
>128G disks actually DO work on older machines, though there still can
be "issues".
Elaborate a bit more on the 1M RAM/1G disk guideline.
@
text
@d38 1
a38 1
<li><a href="#InstBoot"   >14.8 - Installing Bootblocks - i386 specific</a>
d1123 1
a1123 1
<h2>14.8 - Installing Bootblocks - i386 specific</h2>
d1126 9
a1134 15
Older versions of MS-DOS can only deal with disk geometries of 1024
cylinders or less.  Since virtually all modern disks have more than 1024
cylinders, most SCSI BIOS chips (which come on the SCSI controller card)
and IDE BIOS (which is part of the rest of the PC BIOS) have an option
(sometimes the default) to "translate" the real disk geometry into
something that fits within MS-DOS' ability.  However, not all BIOS chips
"translate" the geometry in the same way.  If you change your BIOS
(either with a new motherboard or a new SCSI controller), and the new
one uses a different "translated" geometry, you will be unable to load
the second-stage boot loader (and thus unable to load the kernel).
(This is because the first-stage boot loader contains a list of the
blocks that comprise /boot in terms of the original "translated"
geometry).  If you are using IDE disks, and you make changes to your
BIOS settings, you can (unknowingly) change its translation also (most
IDE BIOS offer 3 different translations). To fix your boot block so that
d1138 10
a1147 3
should come up normally.  You now need to update the first-stage boot
Loader to see the new geometry (and re-write the boot block
accordingly).  <br> Our example will assume your boot disk is sd0 (but
d2376 1
a2376 1
<small>$OpenBSD: faq14.html,v 1.160 2006/11/01 01:41:18 nick Exp $</small>
@


1.160
log
@
Updates for OpenBSD v4.0
@
text
@d1038 1
a1038 1
A new 250G IDE hard disk will not work on older (pre >137G
d1112 2
d1115 5
a1119 1
system size expands.
d2375 1
a2375 1
<small>$OpenBSD: faq14.html,v 1.159 2006/10/25 13:30:06 dtucker Exp $</small>
@


1.159
log
@partition -> filesystem where appropriate.  with & ok steven@@
@
text
@d938 1
a938 1
OpenBSD 3.9 (GENERIC) #617: Thu Mar  2 02:26:48 MST 2006
d2369 1
a2369 1
<small>$OpenBSD: faq14.html,v 1.158 2006/08/09 02:22:09 nick Exp $</small>
@


1.158
log
@
Standardize markup and layout with rest of FAQ and itself.
@
text
@d1710 1
a1710 1
available disk space, or more than 100% of a partition in use, as shown
d1715 1
a1715 1
When a partition is created with
d2369 1
a2369 1
<small>$OpenBSD: faq14.html,v 1.157 2006/06/21 04:20:28 david Exp $</small>
@


1.157
log
@HTML validation fixes; ok nick@@
@
text
@a11 5
<style type="text/css">
  <!--
  pre { margin-left: 20px; }
  -->
</style>
d148 2
a149 1
<pre>
d180 1
a180 1
</pre>
d204 1
d209 1
a209 1
<pre>
d243 1
a243 1
</pre>
d358 3
a360 2
<pre># <b>fdisk sd0</b><br>
</pre>
d365 1
a365 1
<pre>
d375 1
a375 1
</pre>
d388 1
a388 1
<pre>
d408 1
a408 1
</pre>
d497 2
a498 1
<pre>
d500 2
a501 1
</pre>
d505 2
a506 1
<pre>
d520 1
a520 1
</pre>
d543 1
a543 1
<pre>
d545 1
a545 1
</pre>
d562 1
a562 1
<pre>
d564 1
a564 1
</pre>
d576 1
a576 1
<pre>
d578 1
a578 1
</pre>
d584 3
a586 1
<pre>/dev/sd2a /u ffs rw 1 1</pre>
d596 1
a596 1
<pre>
d598 1
a598 1
</pre>
d633 1
a633 1
<pre>
d637 1
a637 1
</pre>
d655 1
a655 1
<pre>
d660 1
a660 1
</pre>
d666 1
a666 1
<pre>
d669 1
a669 1
</pre>
d675 1
a675 1
<pre>
d681 1
a681 1
</pre>
d689 1
a689 1
<pre>
d693 1
a693 1
</pre>
d703 1
a703 1
<pre>
d705 1
a705 1
</pre>
d712 1
a712 1
<pre>
d717 1
a717 1
</pre>
d724 1
a724 1
<pre>
d728 1
a728 1
</pre>
d736 1
a736 1
<pre>
d739 1
a739 1
</pre>
d746 1
a746 1
<pre>
d753 1
a753 2
</pre>

d779 1
a779 1
<pre>
d781 1
a781 1
</pre>
d818 5
a822 3
<pre>
    Using drive 0, partition 3.
</pre>
d829 5
a833 3
<pre>
    Using Drive 0, Partition 3;
</pre>
d859 3
a861 3
<pre>
    Loading...
</pre>
d865 3
a867 3
<pre>
    Loading;... 
</pre>
d882 7
a888 6
<pre>
     probing: pc0 com0 com1 apm mem[636k 190M a20=on]
     disk: fd0 hd0+
     >> OpenBSD/i386 BOOT 2.10
     boot>
</pre>
d922 1
d957 3
a959 3
<pre>
    # <b>fdisk -u wd0</b>
</pre>
d962 3
a964 3
<pre>
    # <b>fdisk -u -f /usr/mdec/mbr wd0 </b>
</pre> 
d1143 1
a1143 1
<pre>
d1145 1
a1145 1
</pre>
d1151 1
a1151 1
<pre>
d1156 1
a1156 1
</pre>
d1197 1
a1197 1
<pre>
d1201 1
a1201 1
</pre>
d1211 1
a1211 1
<pre>
d1217 1
a1217 1
</pre>
d1229 1
a1229 1
<pre>
d1233 1
a1233 1
</pre>
d1239 1
a1239 1
<pre>
d1245 1
a1245 1
</pre>
d1273 1
a1273 1
<pre>
d1275 1
a1275 1
</pre>
d1293 1
a1293 1
<pre>
d1304 1
a1304 1
</pre>
d1337 1
a1337 1
<pre>
d1339 1
a1339 1
</pre>
d1350 1
a1350 1
<pre>
d1352 1
a1352 1
</pre>
d1395 1
a1395 1
<pre>
d1397 1
a1397 1
</pre>
d1408 1
a1408 1
<pre>
d1410 1
a1410 1
</pre>
d1421 1
a1421 1
<pre>
d1424 1
a1424 1
</pre>
d1430 1
a1430 1
<pre>
d1432 1
a1432 1
</pre>
d1439 1
a1439 1
<pre>
d1442 1
a1442 1
</pre>
d1449 1
a1449 1
<pre>
d1451 1
a1451 1
</pre>
d1458 1
a1458 1
<pre>
d1461 1
a1461 1
</pre>
d1471 1
a1471 1
<pre>
d1474 1
a1474 1
</pre>
d1481 1
a1481 1
<pre>
d1483 1
a1483 1
</pre>
d1496 1
a1496 1
<pre>
d1498 1
a1498 1
</pre>
d1505 2
a1506 2
<pre>
(simple mount table)
d1509 1
a1509 1
(more advanced mount table)
d1513 1
a1513 1
</pre>
d1538 1
a1538 4
<table border=0 width="650">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<pre>
d1541 1
a1541 4
</pre>
                </td>
        </tr>
</table>
d1552 1
a1552 4
<table border=0 width="650">
        <tr>
                <td nowrap bgcolor="#EEEEEE">
<pre>
d1555 1
a1555 4
</pre>
                </td>
        </tr>
</table>
d1583 1
a1583 1
<pre>
d1586 1
a1586 1
</pre>
d2369 1
a2369 1
<small>$OpenBSD: faq14.html,v 1.156 2006/05/01 01:02:59 nick Exp $</small>
@


1.156
log
@
updates/revisions for 3.9
@
text
@d461 1
a461 1
partition table resides.  -- not sure if this is true -->
d2373 1
a2373 1
<small>$OpenBSD: faq14.html,v 1.155 2006/03/04 04:12:47 nick Exp $</small>
@


1.155
log
@
ccd(4) is only in some bsd.rd kernels: amd64, hppa, hppa64, i386.
Spotted by Okan Demirmen (okan at demirmen dot com).
@
text
@d928 1
a928 1
Copyright (c) 1995-2005 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d930 1
a930 1
OpenBSD 3.8 (GENERIC) #138: Sat Sep 10 15:41:37 MDT 2005
d2373 1
a2373 1
<small>$OpenBSD: faq14.html,v 1.154 2006/03/02 03:50:55 nick Exp $</small>
@


1.154
log
@
Rename (and new #target) for 4.7 - "How should I partition my OpenBSD disk".
Fits content better, easier to find (hopefully).
@
text
@d1653 4
a1656 2
kernel, so it can be much easier to use, though it has some limitations
regarding rebuilding the array.
d2373 1
a2373 1
<small>$OpenBSD: faq14.html,v 1.153 2006/02/26 21:35:33 nick Exp $</small>
@


1.153
log
@
repoint faq11 pointers to moved article
@
text
@d134 1
a134 1
<a href="faq4.html#SpaceNeeded">this discussion</a> on partitioning and
d1092 1
a1092 1
This is another good reason to <a href="faq4.html#SpaceNeeded">partition 
d2371 1
a2371 1
<small>$OpenBSD: faq14.html,v 1.152 2006/02/26 21:19:39 nick Exp $</small>
@


1.152
log
@
clearing out faq11.html.  Relocate async mount section from faq11 to faq14.
@
text
@d1636 1
a1636 1
<li><a href="faq11.html#raid">FAQ 11, RAID</a>
d2170 4
a2173 4
<li><a href="#ccd">CCD</a> - Concatenated Disk Driver.
<li><a href="#raid">RAID</a>
<li><a href="#softu">Soft Updates</a>
<li><a href="#maxvnodes">Size of the namei() cache</a>
d2177 1
a2177 1
<a name="ccd"></a>
d2243 1
a2243 1
<a name="raid"></a>
d2276 1
a2276 1
<a name="softu"></a>
d2298 1
a2298 1
<a name="maxvnodes"></a>
d2371 1
a2371 1
<small>$OpenBSD: faq14.html,v 1.151 2006/02/26 21:09:19 nick Exp $</small>
@


1.151
log
@
clearing out faq11.html.  relocate Disk I/O section to faq14.html.
Some cleanup to content, more will be needed.
@
text
@d60 1
a60 1

d2318 40
d2371 1
a2371 1
<small>$OpenBSD: faq14.html,v 1.150 2005/12/29 11:49:15 steven Exp $</small>
@


1.150
log
@fdisk(1) -> fdisk(8)
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2005 by OpenBSD.">
d59 2
d2154 166
d2331 1
a2331 1
<small>$OpenBSD: faq14.html,v 1.149 2005/12/28 02:36:42 nick Exp $</small>
@


1.149
log
@
don't bother mentioning kernel config.  Shoot foot at own risk.
@
text
@d336 1
a336 1
fdisk(1) is used on some platforms (i386, amd64, macppc, zaurus and
d339 2
a340 2
Other platforms do not need or use fdisk(1).
fdisk(1) can also be used for manipulations of the Master Boot Record (MBR),
d2163 1
a2163 1
<small>$OpenBSD: faq14.html,v 1.148 2005/12/28 02:33:30 nick Exp $</small>
@


1.148
log
@
Add note about 'q' vs. 'x' to disklabel.
Rework #fdisk article, hopefully more useful.  Some improvement could
still be made, however.
@
text
@a754 1

a765 8
To use Soft Updates, your kernel must have

<p>
<b>option FFS_SOFTUPDATES</b>
<p>
compiled in, this is already in place on GENERIC.

<p>
d2163 1
a2163 1
<small>$OpenBSD: faq14.html,v 1.147 2005/12/18 15:29:05 steven Exp $</small>
@


1.147
log
@some rewording for in-memory vs. on-disk disklabel.  ok nick@@
@
text
@d317 8
a327 2


d331 1
a331 1
First be sure to check the 
d336 17
a352 7
Fdisk is a program to help with the maintenance of your partitions. This
program is used at install time to set up your OpenBSD partition (this
partition can contain <u>several</u> labels, each with
filesystems/swap/etc.).  It can divide space on your drives and set one
partition
active. This program will usually be used in Single User Mode ( boot -s
). Fdisk also sets the MBR on your various hard disks.
a354 2
For installation purposes, most times you'll only need <b>ONE</b> OpenBSD
partition, and then using disklabel to put a swap and a filesystem on it.
d401 1
a410 3
It is perfectly safe in fdisk to go in and explore, just make sure to
answer <b>N</b> to saving the changes and *DON'T* use the <b>write</b>
command.
d420 3
d439 1
d454 30
d2172 1
a2172 1
<small>$OpenBSD: faq14.html,v 1.146 2005/12/18 10:47:50 steven Exp $</small>
@


1.146
log
@fix fdisk(8) man section number, slight rewording
@
text
@d308 7
a314 6
system), OpenBSD will "create" an imaginary one, and that can form the
basis of a formal OpenBSD disklabel.
However, if a disklabel is created then a non-OpenBSD file system is
added later, the disklabel will not be automatically updated, you must
do this yourself if you wish OpenBSD to be able to access this file
system.
d2126 1
a2126 1
<small>$OpenBSD: faq14.html,v 1.145 2005/12/17 17:04:43 nick Exp $</small>
@


1.145
log
@
er.. "past"-o, pointed out by Steven@@, wrap a long line and a minor wording
improvement.
@
text
@d89 1
a89 1
Platforms that also use fdisk(1) place all the disklabel(8) partitions
d102 1
a102 1
You can read more in-depth information about disklabel by reading the
d2125 1
a2125 1
<small>$OpenBSD: faq14.html,v 1.144 2005/12/17 04:33:28 nick Exp $</small>
@


1.144
log
@
rewrite of #disklabel.  Prompted by the observations of J. C. Roberts and
jmc@@, which made me read what was in this section I'd been trying to ignore.
It was bad.  It is less bad now.  Needs more work, but it is far less wrong.
@
text
@d288 1
a288 1
partitions of the "model" drive, past it into the new drive, remove the 
d290 1
a290 1
other drive.
d292 2
a293 1
<li>(sparc/sparc64) <b>Don't put swap at the very beginning of your disk.</b>
d2125 1
a2125 1
<small>$OpenBSD: faq14.html,v 1.143 2005/12/11 22:50:40 steven Exp $</small>
@


1.143
log
@change my e-mail address. ok nick@@
@
text
@a64 9
<h3>Table of Contents</h3>

<ul>
<li><a href="#disklabel.1">What is disklabel(8)?</a>
<li><a href="#disklabel.2">disklabel(8) during the OpenBSD install</a>
<li><a href="#disklabel.3">Common disklabel(8) uses.</a>
</ul>

   
d69 1
a69 1
First be sure to read the
d74 29
a102 8
Disklabels are created to allow an efficient interface between your disk
and the disk drivers contained within the kernel. Labels hold certain
information about your disk, like your drive geometry and information
about your filesystems. This is then used by the bootstrap program to
load the drive and to know where filesystems are contained on the drive.
Labels are also used in conjunction with the filesystems to create a
more efficient environment. You can read more in-depth information about
disklabel by reading the
d107 4
a110 4
As an additional gain, using disklabel helps overcome architecture
limitations on disk partitioning. For example, on i386, you can only
have 4 primary partitions. (Partitions that other operating systems,  
such as Windows NT or DOS can see.) With 
d113 2
a114 2
OpenBSD partitions (eg. 'swap', '/', '/usr' and '/var'). 
And you still have 3 more partitions available for other OSs!
d121 13
a133 111
labels. This comes (for i386 users) directly after using
<a href="#fdisk">fdisk(1)</a>.
During the install you use disklabel to create your separate labels
which will contain your separate mountpoints. During the install, you
can set your mountpoints from within
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8),</a>
but this isn't completely necessary considering you will be prompted
later to confirm you choices. But it does make your install go just a
little smoother.

<p>
Since this is during the install you won't have any existing labels, and
they will need to be created. The first label you will create is the
label 'a'. This label SHOULD be your where / will be mounted. You can
see recommended partitions that should be created and their sizes by
reading <a href="faq4.html#SpaceNeeded">FAQ 4, Space Needed</a>. For
servers it is recommended that you create at least these labels
separately. For desktop users creating one mountpoint at / will probably
suffice. When initially creating your root partition ( 'a' label ), keep
in mind that you will need SOME space left for your swap label. Now that
the basics have been explained, here is an example of using disklabel
during an install. In this first example it is assumed that OpenBSD will
be the only operating system on this computer, and that a full install
will be done.

<pre>

If this disk is shared with other operating systems, those operating systems
should have a BIOS partition entry that spans the space they occupy completely.
For safety, also make sure all OpenBSD file systems are within the offset and
size specified in the 'A6' BIOS partition table.  (By default, the disklabel
editor will try to enforce this).  If you are unsure of how to use multiple
partitions properly (ie. separating /,  /usr, /tmp, /var, /usr/local, and other
things) just split the space into a root and swap partition for now.

# using MBR partition 3: type A6 off 63 (0x3f) size 4991553 (0x4c2a41) 

Treating sectors 63-16386300 as the OpenBSD portion of the disk.
You can use the 'b' command to change this.

Initial label editor (enter '?' for help at any prompt)
&gt; <b>d a</b>
&gt; <b>a a</b>
offset: [63] <b>&lt;Enter&gt;</b>
size: [16386237] <b>64M</b>
Rounding to nearest cylinder: 131040
FS type: [4.2BSD] <b>&lt;Enter&gt;</b>
mount point: [none] <b>/</b>
fragment size: [1024] <b>&lt;Enter&gt;</b>
block size: [8192] <b>&lt;Enter&gt;</b>
cpg: [16] <b>&lt;Enter&gt;</b>
&gt; <b>a b</b>
offset: [131103] <b>&lt;Enter&gt;</b>
size: [16255197] <b>64M</b>
Rounding to nearest cylinder: 131040
FS type: [swap] <b>&lt;Enter&gt;</b>
</pre>

<p>
At this point we have created a 64M root partition mounted at /, and a
64Meg swap partition. Notice that the offset starts at sector 63. This
is what you want. When it comes to the size, disklabel will show your
size in sectors, however, you don't need to enter sizes in the same
format. Like the example above you can enter sizes in the manner of
<i>64 Megabytes = 64M</i> and <i>2 Gigabytes = 2G</i>. Disklabel will
then round to the nearest cylinder. In the example above you will also
notice that disklabel assumes that label 'b' will be a swap. This is a
correct assumption as the GENERIC kernel is set to look for swap on
label 'b', and you should just follow this guideline and use 'b' as your
swap area.

<p>
The next example will take you through the creation of two more labels.
This means that it's not a complete install, as the size of these won't
be enough to install OpenBSD to its fullest.  Showing the creation of
all the partitions would just be repetitive.

<pre>
&gt; <b>a d</b>
offset: [262143] <b>&lt;Enter&gt;</b>
size: [16124157] <b>64M</b>
Rounding to nearest cylinder: 131040
FS type: [4.2BSD] <b>&lt;Enter&gt;</b>
mount point: [none] <b>/tmp</b>
fragment size: [1024] <b>&lt;Enter&gt;</b>
block size: [8192] <b>&lt;Enter&gt;</b>
cpg: [16] <b>&lt;Enter&gt;</b>
&gt; <b>a e</b>
offset: [393183] <b>&lt;Enter&gt;</b>
size: [15993117] <b>64M</b>
Rounding to nearest cylinder: 131040
FS type: [4.2BSD] <b>&lt;Enter&gt;</b>
mount point: [none] <b>/var</b>
fragment size: [1024] <b>&lt;Enter&gt;</b>
block size: [8192] <b>&lt;Enter&gt;</b>
cpg: [16] <b>&lt;Enter&gt;</b>
</pre>

<p>
In the above example, there are two things you might notice. One being
that the offset is automatically figured out for you to be the next in
order. When doing an install of this sort, you won't need to mess with
changing the offsets at all. Another difference you might notice will be
that label 'c' has been skipped. This is done for a reason, which is
that label 'c' is a label that represents the whole disk.  For this
reason you shouldn't deal with label 'c' in any way.

<p>
Once all your labels have been created all that's left to do is write
the labels to disk, and move on in the installation process. To write
everything and quit disklabel (and continue with the install) do:
d135 4
a139 4
<pre>
&gt; <b>w</b>
&gt; <b>q</b>
</pre>
d144 1
a144 1
<h3>Common uses for disklabel(8)</h3>
d147 4
a150 5
Once your system is installed, you shouldn't need to use disklabel too
often. But some times you will need to use disklabel when adding,
removing or restructuring your disks. One of the first things you will
need to do is view your current disklabel. To do this, simply type:

d152 2
a153 3
# <b>disklabel wd0</b> &gt;----- Or whatever disk device you'd like to view

# using MBR partition 3: type A6 off 64 (0x40) size 16777152 (0xffffc0)
d156 2
a157 2
disk:
label: TOSHIBA MK2720FC
d163 2
a164 2
cylinders: 2633
total sectors: 2654064
d169 2
a170 2
headswitch: 0           # milliseconds
track-to-track seek: 0  # milliseconds
d174 8
a181 5
#        size   offset    fstype   [fsize bsize   cpg]
  a:  2071440    65583    4.2BSD     1024  8192    16   # (Cyl.   65*- 2120)
  b:    65520       63      swap                        # (Cyl.    0*- 65)
  c:  2654064        0    unused        0     0         # (Cyl.    0 - 2632)
  j:   512001  2137023    4.2BSD     1024  8192    16   # (Cyl. 2120*- 2627*)
d185 24
a208 4
The above command simply allows you to view the existing disklabel,
ensuring that you don't mess anything up. ( Which we all need sometimes.
) But to be able to make changes you must use the -E option with
disklabel like so:
d212 58
a269 1
</pre>
d272 47
a318 10
This will bring you to a prompt, the same as the one that you used
during the OpenBSD install. Probably the single most important command
at this prompt is '?'. This will give you a list of possible options
pertaining to disklabel. You can even view the entire
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
man page with the 'M' command. From this prompt, you will do all of your
adding, deleting and changing of partitions. For additional information
read the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8">disklabel(8)</a>
man page.
d2124 1
a2124 1
<small>$OpenBSD: faq14.html,v 1.142 2005/12/05 22:21:45 steven Exp $</small>
@


1.142
log
@mention explicitly that UFS2 is not supported.

ok nick@@
@
text
@d1716 1
a1716 1
steven.mestdagh@@esat.kuleuven.be, and released under the BSD license -->
d1950 1
a1950 1
steven.mestdagh@@esat.kuleuven.be, and released under the BSD license -->
d2095 1
a2095 1
<small>$OpenBSD: faq14.html,v 1.141 2005/11/26 21:14:40 jmc Exp $</small>
@


1.141
log
@- consistency fix
- DVDs use 9660 too

ok steven@@ nick@@
@
text
@d1721 1
d2095 1
a2095 1
<small>$OpenBSD: faq14.html,v 1.140 2005/11/24 05:41:56 steven Exp $</small>
@


1.140
log
@link to faq15 instead of old faq8 packages/ports sections.

ok nick@@
@
text
@d1472 2
a1473 1
Notice that, since this image is a CD image you must specify type of
d2094 1
a2094 1
<small>$OpenBSD: faq14.html,v 1.139 2005/11/10 03:49:08 nick Exp $</small>
@


1.139
log
@
there is also a 1T /disk/ size limit, according to Otto@@ and TedU@@.
@
text
@d1096 1
a1096 1
<a href="faq8.html#Ports">ports</a> for backing up multiple servers to
d2093 1
a2093 1
<small>$OpenBSD: faq14.html,v 1.138 2005/11/03 11:37:07 nick Exp $</small>
@


1.138
log
@
wording improvement and TOC entry, from Steven Mestdagh, spotted by
translator Steven Mestdagh.
@
text
@d953 5
d2093 1
a2093 1
<small>$OpenBSD: faq14.html,v 1.137 2005/11/03 03:07:40 nick Exp $</small>
@


1.137
log
@
Steven Mestdagh strikes again!  Added good example of adding and altering
the disklabel when OpenBSD is installed before another OS.  Thanks!
@
text
@d54 4
d1768 2
a1769 2
on this system, and during the install a disklabel containing the native as
well as the foreign filesystems was installed on the disk.
d2088 1
a2088 1
<small>$OpenBSD: faq14.html,v 1.136 2005/11/02 02:23:27 nick Exp $</small>
@


1.136
log
@
You would think that SOMEWHERE along the line I would notice that I was
snipping the banner from a -current kernel.  Actually, I did...but then
forgot until but Steven Mestdagh had to remind me.
@
text
@d1708 2
a1709 2
Yes. Other supported filesystems include: ext2 (Linux), ISO9660 (CD-ROM,
DVD media), FAT (MS-DOS and Windows), NFS, NTFS (Windows), AmigaDOS.
d1762 9
d1861 74
d2084 1
a2084 1
<small>$OpenBSD: faq14.html,v 1.135 2005/11/01 11:39:56 nick Exp $</small>
@


1.135
log
@
update for 3.8
@
text
@d856 1
a856 1
OpenBSD 3.8-current (GENERIC) #209: Tue Oct 25 17:42:53 MDT 2005
d2001 1
a2001 1
<small>$OpenBSD: faq14.html,v 1.134 2005/10/19 01:04:36 nick Exp $</small>
@


1.134
log
@
nifty tip, from Matthias Kilian (kili at outback dot escape dot de), thanks!
@
text
@d28 1
d805 1
a805 1
     >> OpenBSD/i386 BOOT 2.06
d846 1
a846 1
>> OpenBSD/i386 BOOT 2.06
d854 1
a854 1
Copyright (c) 1995-2003 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d856 1
a856 1
OpenBSD 3.7 (GENERIC) #50: Sun Mar 20 00:01:57 MST 2005
a1571 2
It is not recommended that one use 3.7-release for this, there was a bug
that was fixed in 3.7-stable.
d1666 1
a1666 1
Since OpenBSD 3.6, a copy of the disklabel for each disc has been saved
d1993 1
d2001 1
a2001 1
<small>$OpenBSD: faq14.html,v 1.133 2005/07/26 10:53:40 nick Exp $</small>
@


1.133
log
@
not sure what the "in the future" part was all about, add a link.  Pointed
out by Steve Shockley.
@
text
@d1736 15
d2001 1
a2001 1
<small>$OpenBSD: faq14.html,v 1.132 2005/07/12 23:04:22 nick Exp $</small>
@


1.132
log
@
comments on non-existant background fsck are "totally useless" -- TdR.
@
text
@d1084 2
a1085 1
A more advanced backup utility called "Amanda" is also available through
d1090 2
a1091 2
is enough. However, if you have a need to backup multiple machines to
one tape, Amanda might be worth investigating in the future.
d1986 1
a1986 1
<small>$OpenBSD: faq14.html,v 1.131 2005/06/01 01:41:06 nick Exp $</small>
@


1.131
log
@
sometimes, you need the &arch=.  From Steven Mestdagh, thanks!
@
text
@a684 7
The potential of background fsck(8), using Soft Updates
is not yet realised in OpenBSD, so
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck&amp;sektion=8">fsck(8)</a>
is still required after an unclean shutdown.
This may be changed in future versions.

<p>
d1985 1
a1985 1
<small>$OpenBSD: faq14.html,v 1.130 2005/05/31 11:27:17 saad Exp $</small>
@


1.130
log
@typo reported by Antoine Jacoutot <ajacoutot _at_ lphp _dot_ org>, thanks!
@
text
@d1801 1
a1801 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8">fdisk(8)</a>
d1992 1
a1992 1
<small>$OpenBSD: faq14.html,v 1.129 2005/05/30 16:14:20 nick Exp $</small>
@


1.129
log
@
ccd(4) is also a SW mirroring option now.
@
text
@d1822 1
a1822 1
a moint point where we will mount the desired filesystem.
d1992 1
a1992 1
<small>$OpenBSD: faq14.html,v 1.128 2005/05/30 15:58:55 nick Exp $</small>
@


1.128
log
@
New articles from Steven Mestdagh, who wrote them and submitted them to
me quite some time ago...
#foreignfs   14.16 - Can I access data on filesystems other than FFS?
#flashmem    14.17 - Can I use a flash memory device with OpenBSD?
Way cool. Thanks!
@
text
@d1573 17
d1992 1
a1992 1
<small>$OpenBSD: faq14.html,v 1.127 2005/05/30 03:25:13 nick Exp $</small>
@


1.127
log
@
I hate those danged &amp;'s, and there I go sticking in one that didn't
belong there.  Spotted by Tobias Stoeckmann, thanks!
@
text
@d52 2
d1692 272
d1975 1
a1975 1
<small>$OpenBSD: faq14.html,v 1.126 2005/05/19 16:54:27 nick Exp $</small>
@


1.126
log
@
Welcome 3.7!
@
text
@d405 1
a405 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.125 2005/05/18 00:48:36 nick Exp $</small>
@


1.125
log
@
Typos, spotted and fixed by Steven Mestdagh, thanks!
@
text
@d860 1
a860 1
OpenBSD 3.6 (GENERIC) #59: Fri Sep 17 12:32:57 MDT 2004
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.124 2005/05/01 14:22:33 nick Exp $</small>
@


1.124
log
@
Better example, as ffs was the default, and thus, not actually required.
Spotted by jmc@@
@
text
@d1611 1
a1611 1
software-based style, and will typically work fine as as an SATA or IDE
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.123 2005/04/24 20:56:45 nick Exp $</small>
@


1.123
log
@
knit the new faq13.html into the rest of the FAQ.  Not sure why I waited
to do this.
@
text
@d1468 1
a1468 1
you must use type ffs when mounting disk images.
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.122 2005/04/24 19:28:25 nick Exp $</small>
@


1.122
log
@
missing period, spotted by Alexandre Anriot, thanks!
@
text
@d27 1
a27 1
<a href= "faq12.html">[To Section 12 - Platform-Specific Questions]</a>
d1693 1
a1693 1
<a href= "faq12.html">[To Section 12 - Platform-Specific Questions]</a>
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.121 2005/04/24 16:20:54 nick Exp $</small>
@


1.121
log
@
missing </a> in <a name=> tag.
@
text
@d1657 1
a1657 1
output, and put it back into disklabel
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.120 2005/04/24 15:44:54 nick Exp $</small>
@


1.120
log
@
New article, #OhBugger, "14.15 - Recovering partitions after deleting the
disklabel".  Written by Sam Smith (s at msmith dot net), thanks!
@
text
@d1639 1
a1639 1
<a name="OhBugger">
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.119 2005/02/12 19:08:41 nick Exp $</small>
@


1.119
log
@
typos, wordos, linkos and other errors spotted by Steven Mestdagh (steven
dot mestdagh at esat dot kuleuven dot ac dot be), thanks!
@
text
@d50 3
d1639 50
d1701 1
a1701 1
<small>$OpenBSD: faq14.html,v 1.118 2004/12/29 18:02:32 nick Exp $</small>
@


1.118
log
@
Update the bogus-RAID list a bit.  Hint, people: if you didn't pay a fair
amount, it ain't real RAID.  On-board IDE or SATA "RAID" almost always isn't.
help, ok marco@@
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2004 by OpenBSD.">
d293 1
d534 1
a534 1
Swapping to a file is easiest and quickest way to get extra swap space
d628 1
a628 1
Now your file is in place, you need to add the file to you
d909 1
a909 1
The new (as of OpenBSD 3.5 and later) PBR is much more tollerant to 
d952 1
a952 1
A new 250G IDE hard disk will not work on an older (pre >137G
d1648 1
a1648 1
<small>$OpenBSD: faq14.html,v 1.117 2004/12/25 18:13:31 nick Exp $</small>
@


1.117
log
@
missing " which I actually noticed myself. :)
@
text
@d1597 2
a1598 1
"Are the Promise or HighPoint IDE RAID controllers supported?".  The
d1605 6
d1647 1
a1647 1
<small>$OpenBSD: faq14.html,v 1.116 2004/11/10 13:32:55 otto Exp $</small>
@


1.116
log
@missing quote, from Antoine Jacoutot
@
text
@d789 1
a789 1
boot...</tt>.
d1640 1
a1640 1
<small>$OpenBSD: faq14.html,v 1.115 2004/11/04 10:20:57 otto Exp $</small>
@


1.115
log
@fsck(1) -> fsck(8). From Antoine Jacoutot.
@
text
@d1235 1
a1235 1
"<tt>bsd -s</tt> at the boot&gt; prompt for single user mode.
d1640 1
a1640 1
<small>$OpenBSD: faq14.html,v 1.114 2004/10/29 17:26:01 nick Exp $</small>
@


1.114
log
@
Updates for 3.6
@
text
@d1022 1
a1022 1
expect it to successfully fsck(1) after a crash.
d1640 1
a1640 1
<small>$OpenBSD: faq14.html,v 1.113 2004/10/20 23:04:26 nick Exp $</small>
@


1.113
log
@
make "OpenBSD" logo on top of page a "click back" to the OpenBSD home page.
(about time!)
@
text
@d856 1
a856 1
OpenBSD 3.5 (GENERIC) #34: Mon Mar 29 12:24:55 MST 2004
d1640 1
a1640 1
<small>$OpenBSD: faq14.html,v 1.112 2004/10/20 20:56:19 nick Exp $</small>
@


1.112
log
@
Ooops..stray char.  spotted by Dmitry Medvedev (bullet at oganer dot net)
@
text
@d21 3
a23 1
<img alt="[OpenBSD]" height=30 width=141 src="../images/smalltitle.gif">
d1640 1
a1640 1
<small>$OpenBSD: faq14.html,v 1.111 2004/10/17 12:55:48 saad Exp $</small>
@


1.111
log
@typos reported by Antoine Jacoutot <ajacoutot _at_ lphp _dot_ org>. thanks!
@
text
@d47 1
a47 1
    have over 100% of my disk +used?</a>
d1638 1
a1638 1
<small>$OpenBSD: faq14.html,v 1.110 2004/09/21 21:22:56 jaredy Exp $</small>
@


1.110
log
@fix a typo

found by John Danks.

ok nick
@
text
@d850 1
a850 1
Copyright (c) 1982, 1986, 1989, 1991, 1993       <b><i><- Kernel</i></b>
d897 1
a897 1
Since <tt>/boot</tt> is being read using BIOS calls, old verions of 
d1638 1
a1638 1
<small>$OpenBSD: faq14.html,v 1.109 2004/09/20 20:43:01 nick Exp $</small>
@


1.109
log
@
Forgot what is probably the most common reason for ERR M...
@
text
@d1300 2
a1301 2
Using ther
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>r
d1638 1
a1638 1
<small>$OpenBSD: faq14.html,v 1.108 2004/08/15 16:58:23 nick Exp $</small>
@


1.108
log
@
Now we know the real limits.  Besides, it seemed SO BIG when I wrote that.
@
text
@d921 4
a924 2
<tt>/boot</tt>, usually meaning installboot(8) was run incorrectly
or the /boot file was altered.
d1638 1
a1638 1
<small>$OpenBSD: faq14.html,v 1.107 2004/06/27 06:19:45 jmc Exp $</small>
@


1.107
log
@grammar from xcitor, though i fixed it a little differently;
@
text
@d940 3
a942 4
OpenBSD has support for file systems of sizes much larger than any
currently or soon to be available hard disks, however there are
limitations on some interfaces which are smaller than the theoretical
maximum of OpenBSD.
d945 2
a946 1
Not all hardware combinations are possible, of course.
d1636 1
a1636 1
<small>$OpenBSD: faq14.html,v 1.106 2004/06/22 23:52:56 nick Exp $</small>
@


1.106
log
@
New article: 14.14 - Why does df(1)  tell me I have over 100% of my disk
used?
@
text
@d113 1
a113 1
servers it is recommended that you create at least these label's
d258 2
a259 2
The above command simply allows you to view the existing disklabel, and
assuring that you dont mess anything up. ( Which we all need sometimes.
d1636 1
a1636 1
<small>$OpenBSD: faq14.html,v 1.105 2004/04/30 18:04:29 nick Exp $</small>
@


1.105
log
@
Update boot limits info, help and checkover from tom@@,
general updates for 3.5
@
text
@d46 2
d1600 25
d1636 1
a1636 1
<small>$OpenBSD: faq14.html,v 1.104 2004/04/23 16:18:57 nick Exp $</small>
@


1.104
log
@
Update, improve, etc., DMA errors article.  Help and checkover, grange@@
@
text
@d739 1
a739 1
    Using Drive: 0 Partition: 3
d742 10
d776 1
a776 1
    reading boot....
d778 9
a786 1
printing the dots as it reads sectors from the disk.
d801 1
a801 1
     >> OpenBSD/i386 BOOT 2.02
d838 2
a839 2
Using Drive: 0 Partition: 3                      <b><i>&lt;- MBR</i></b>
reading boot....                                 <b><i>&lt;- PBR</i></b>
d842 1
a842 1
>> OpenBSD/i386 BOOT 2.02
d852 1
a852 1
OpenBSD 3.4 (GENERIC) #18: Wed Sep 17 03:34:47 MDT 2003
d888 1
a888 1
physical location of <tt>/boot</tt>'s disk sectors into the PBR.
d891 8
a898 5
your system unbootable, as the PBR will load whatever happens to be at
the blocks specified in it, which will almost certainly no longer be the
second-stage boot loader!
Since <tt>/boot</tt> is being read using BIOS calls, if you alter the
drive's geometry (i.e., taking it out of one computer that uses CHS
d900 1
a900 1
changing a translation option in your BIOS), it will <i>appear to the BIOS</i>
d902 8
a909 3
to get the same data from the disk), so again, you will have to run
installboot(8) before the system can be rebooted.
As the PBR is very small, its range of error messages is pretty limited:
d912 1
a912 1
<li><b>Read Error</b> -- BIOS returned an error when trying to read a
d914 2
a915 3
Could be a physical problem with the disk, or an invalid sector was
called for (i.e., geometry problem).
<li><b>Bad magic</b> -- An invalid 
d919 2
a920 7
<tt>/boot</tt>.
Usually, this is due to a drive geometry problem, having replaced 
<tt>/boot</tt> on your disk or ignoring the
<a href="faq14.html#LargeDrive">8G or BIOS limitations</a> of your 
system, and having <tt>/boot</tt> end up somewhere the PBR can't 
reach it.
</ul>
d922 4
a935 1
<!-- XXXversion i386 changes for 3.5 -->
d946 3
a948 2
standards) interfaces, and some very old SCSI adapters have been 
seen to have problems with more modern drives.
d953 3
a955 5
the OS has been loaded into memory, and the booting process introduces
limits of its own.  The boot process has to utilize (and is thus limited
by) the system's boot ROM.  The OpenBSD i386 first-stage boot loader
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386">biosboot(8)</a>)
also has its own internal 8G limitation, from an older BIOS limit.
d959 10
a968 6
the disk within the boot ROM addressable area, or within the first 8G of
the disk, whichever is smaller.  This means that on some older i386
systems, the root partition must be completely within the first 504M,
but for most newer computers, the root partition may be anywhere within
the first 8G.

d982 1
a982 1
  <li>You get a message such as "bad magic"
d998 7
a1004 4
<b>The entire root partition must be within the computer's BIOS (or boot
ROM) addressable space or within the first 8G, whichever is smaller.</b>
<br><i>Note: the OpenBSD/i386 8G limit has been removed in -current.
You must still respect your system's BIOS limit, however</i>
d1046 1
a1046 1
loader to see the new geometry (and re-write the boot block
a1054 12
If installboot complains that it is unable to read the BIOS geometry, at
the boot&gt; prompt you may issue the &quot;machine diskinfo&quot; (or
&quot;ma di&quot; for short) command to print the information you need.
Feed the &quot;heads&quot; and &quot;secs&quot; values to installboot's
-h and -s flags, respectively, so that the modified installboot command
is the following:

<pre>
#<b> cd /usr/mdec; ./installboot -h &lt;heads&gt; -s &lt;secs&gt; /boot biosboot sd0</b>
</pre>

<p>
d1185 2
a1186 2
device name "nrst0" instead of the "st0" name that is seen in dmesg.
When you access st0 as nrst0 you are accessing the same physical tape
d1190 1
a1190 1
device (rst0) to back up multiple file systems, you'll end up
d1219 1
a1219 1
file system needs to be. You can use df -h to determine how much space
d1229 1
a1229 1
bsd -s at the boot&gt; prompt for single user mode.
d1609 1
a1609 1
<small>$OpenBSD: faq14.html,v 1.103 2004/04/14 00:32:36 nick Exp $</small>
@


1.103
log
@
disklabel and fdisk -> disklabel(8) and fdisk(8) in section headings.
Remove semi-bogus and misleading comment about BIOS support.
Replace "fdisk fd0" example (???) with something more plausable, fix
indentation.
Suggest "fdisk -u" instead of "update" command to install MBR code.
@
text
@d44 1
a44 1
<li><a href="#pciideErr"  >14.11 - Help! I'm getting errors with PCIIDE!</a>
d1464 1
a1464 1
<h2>14.11 - Help! I'm getting errors with PCIIDE!</h2>
d1467 3
a1469 1
PCI IDE DMA is unreliable with many combinations of hardware.  Until
d1472 2
a1473 1
default.
d1494 16
a1509 3
If OpenBSD does not successfully downgrade, or the process causes
your machine to lock hard, please send in a 
<a href="../report.html">bug report</a>.
d1592 1
a1592 1
<small>$OpenBSD: faq14.html,v 1.102 2004/02/13 07:20:28 david Exp $</small>
@


1.102
log
@uppercase HTML -> lowercase HTML
ok nick@@
@
text
@d32 2
a33 2
<li><a href="#disklabel"  >14.1 - Using OpenBSD's disklabel</a>
<li><a href="#fdisk"      >14.2 - Using OpenBSD's fdisk</a>
d50 1
a50 1
<h2>14.1 - Using OpenBSD's disklabel</h2>
d54 3
a56 3
<li><a href="#disklabel.1">What is disklabel?</a>
<li><a href="#disklabel.2">disklabel during the OpenBSD install</a>
<li><a href="#disklabel.3">Common disklabel uses.</a>
d61 1
a61 1
<h3>What is disklabel?</h3>
d91 1
a91 1
<h3>disklabel during OpenBSD's install</h3>
a213 6
<b>*NOTE*</b> - For users with large drives. If your bios isn't able to
support a drive of that size OpenBSD cannot support it either. Otherwise
OpenBSD should be able to handle your drive just fine.  If you are in a
situation where your bios doesn't support your drive, you can try Maxtor
EZ-Drive or other similar overlay product.

d278 1
a278 1
<h2>14.2 - Using fdisk</h2>
d280 1
a280 1
First be sure to check the fdisk man page. 
d282 1
d299 1
a299 1
<pre># <b>fdisk fd0</b><br>
d306 9
a314 9
         Disk: fd0       geometry: 80/2/18 [2880 sectors]
         Offset: 0       Signatures: 0xAA55,0x0
                  Starting        Ending
          #: id  cyl  hd sec -  cyl  hd sec [     start -       size]
        ----------------------------------------------------------------------
         *0: A6    0   0   1 -   79   1  18 [         0 -       2880] OpenBSD
          1: 00    0   0   0 -    0   0   0 [         0 -          0] unused
          2: A7    0   0   2 -   79   1  18 [         1 -       2879] NEXTSTEP
          3: 00    0   0   0 -    0   0   0 [         0 -          0] unused
d318 2
a319 1
In this example we are viewing the fdisk output of floppy drive. We can
d726 2
a727 1
Instead, use fdisk(8)'s "update" command.
d1061 5
a1065 3
utilities provided with OpenBSD. A more advanced backup utility called
"Amanda" is also available for backing up multiple servers to one tape
drive. In most environments
d1525 1
a1525 2
<!-- XXXexpires - paragraph need rewriting when 3.1 becomes unsupported -->
Starting with OpenBSD 3.1, the root partition can now be directly
a1526 2
Previous releases of OpenBSD could not have the root partition mirrored
this way.
d1576 1
a1576 1
<small>$OpenBSD: faq14.html,v 1.101 2004/02/10 03:20:03 nick Exp $</small>
@


1.101
log
@
Point to more up-to-date and "orginal source" version of these files.
yes, I know, there is a ref in faq4.html, too.  Doing something different
there, I think.
@
text
@d489 1
a489 1
<P>
d961 1
a961 1
<P>
d1580 1
a1580 1
<small>$OpenBSD: faq14.html,v 1.100 2004/01/28 17:55:46 nick Exp $</small>
@


1.100
log
@
8g limit is gone for -current.  Yes, this violates "FAQ follows -release"
but I promised to stick an update in when this changed.
@
text
@d909 2
a910 4
<li><a href="ftp://ftp.openbsd.org/pub/OpenBSD/3.4/i386/INSTALL.mbr">INSTALL.mbr</a>
<li><a href="ftp://ftp.openbsd.org/pub/OpenBSD/3.4/i386/INSTALL.ata">INSTALL.ata</a>
<li><a href="ftp://ftp.openbsd.org/pub/OpenBSD/3.4/i386/INSTALL.chs">INSTALL.chs</a>
<li><a href="ftp://ftp.openbsd.org/pub/OpenBSD/3.4/i386/INSTALL.dbr">INSTALL.dbr</a>
d1580 1
a1580 1
<small>$OpenBSD: faq14.html,v 1.99 2004/01/02 04:07:02 nick Exp $</small>
@


1.99
log
@
Tom Cosgrove: "did you reference boot_i386(8) anywhere?"  me: "D'oh!"
@
text
@d917 1
d979 2
a980 2
There are no ways around this at this time.  Trust us.  You <i>must</i>
follow this rule.
d1582 1
a1582 1
<small>$OpenBSD: faq14.html,v 1.98 2004/01/02 01:14:16 nick Exp $</small>
@


1.98
log
@
new article: 14.6 - How does OpenBSD/i386 boot?
Lots of help from Tom Cosgrove, THANKS!
@
text
@d906 8
d1581 1
a1581 1
<small>$OpenBSD: faq14.html,v 1.97 2004/01/01 20:34:06 nick Exp $</small>
@


1.97
log
@
>137G is not new.  Not even unusual anymore.  Other clarifications, add
comments about time and memory needed to fsck a BIIIIG drive (info from
tedu@@).
@
text
@d37 1
d713 193
d927 1
a927 1
by) the system's boot ROM.  The OpenBSD i386 first stage boot loader
d1003 2
a1004 2
the second stage boot loader (and thus unable to load the kernel).
(This is because the first stage boot loader contains a list of the
d1012 1
a1012 1
should come up normally.  You now need to update the first stage boot
d1573 1
a1573 1
<small>$OpenBSD: faq14.html,v 1.96 2004/01/01 04:13:34 nick Exp $</small>
@


1.96
log
@
bump copyright to 2004
@
text
@a716 1
<!-- XXXexpires - paragraph need rewriting when 3.1 becomes unsupported -->
d720 1
a720 5
maximum of OpenBSD. In the case of IDE drives, the limit is 128GB, the
limit of the currently popular ATA interface.  Note the next generation
of ATA drives, those with capacities greater than 128G (1G=2^30 here,
not 1,000,000,000, so drive manufacturers will often call this 137G),
are not supported by OpenBSD 3.1 and earlier.
d723 7
d733 3
a735 5
by) the system's boot ROM.  The OpenBSD i386 boot loaders
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386">biosboot(8)</a>
and 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>)
also have their own internal 8G limitation, from an older BIOS limit.
d768 4
a771 2
To get OpenBSD to boot, /bsd must be within the boot ROM's
supported range. To play it safe, the rule is simple:
a778 1

d783 12
d1379 1
a1379 1
<small>$OpenBSD: faq14.html,v 1.95 2003/12/27 20:28:22 nick Exp $</small>
@


1.95
log
@
For something that "should always be", no one has griped when we changed
it.  Pointed out by Steve Shockley (steve dot shockley at shockley dot net)
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2003 by OpenBSD.">
d1366 1
a1366 1
<small>$OpenBSD: faq14.html,v 1.94 2003/10/26 16:45:11 nick Exp $</small>
@


1.94
log
@
More horribly obsolete stuff, from discussion with grange@@.  #IDEDMA removed.
If your IDE system doesn't work with DMA, forcing it won't help at this point.
@
text
@d431 3
a433 3
like disklabel to function!  For normal operations, fsize should always
be 1024, bsize should always be 8192, and cpg should always be 16.
Fstype is 4.2BSD.  Total sectors is the total size of the disk.  Say
d1366 1
a1366 1
<small>$OpenBSD: faq14.html,v 1.93 2003/10/26 01:28:03 nick Exp $</small>
@


1.93
log
@
*sniff* This article ("Drive 0 Partition 3") was the very first I wrote
for the FAQ.  It has been obsolete since 3.1, and the stuff I thought
might still be useful was covered elsewhere or wasn't really useful...
so out it goes.
@
text
@a43 1
<li><a href="#IDEDMA"     >14.12 - Forcing DMA access for IDE disks</a>
a1281 49
<a name="IDEDMA"></a>
<h2>14.12 - Forcing DMA access for IDE disks</h2>

<p>
With the PCI IDE code, your chipset may not be known.  If so, you will
get a message like:

<blockquote>
<pre>
pciide0: DMA, (unused)
</pre>
</blockquote>

If you get this message, you can try and force DMA mode by using 'flags
0x0001' on your pciide entry in your kernel config file.  That would
look something like this:

<blockquote>
<pre>
pciide* at pci ? dev ? function ? flags 0x0001
</pre>
</blockquote>

After doing this, the pciide code will try to use DMA mode regardless of
whether or not it actually knows how to do so with your chipset.  If
this works, and your system makes it through fsck and startup, it is
likely that this will work for good.  If this does not work, and the
system hangs or panics after booting, then you can't use DMA mode (yet,
until support is added for your chipset).  Note that if you find the
documentation for your PCI-IDE controller's chipset, this is a good
start to fully supporting your chipset within the PCI-IDE code.  You can
look on the manufacturer's website or call them.  If your PCI-IDE
controller is part of your motherboard, figure out who manufactures the
chipset and pursue their resources!

<p>
Note that you will know that DMA support has been enabled if you see
this message:

<blockquote>
<pre>
cd0(pciide0:1:0): using PIO mode 3, DMA mode 1
</pre>
</blockquote>

This means that pciide0, channel 1, drive 0 (which appears to be an
ATAPI CD-ROM) is using DMA data transfers.


d1366 1
a1366 1
<small>$OpenBSD: faq14.html,v 1.92 2003/10/10 00:37:55 nick Exp $</small>
@


1.92
log
@
Per prior discussion amoung developers CD-ROM it is, not CDROM.
Work by Tom Cosgrove, thanks!
@
text
@a36 2
<li><a href="#D0P3"       >14.6 - When I boot after installation of
    OpenBSD/i386, it stops at "Using Drive: 0 Partition 3".</a>
a713 168
<a name="D0P3"></a>
<h2>14.6 -  When I boot after installation of OpenBSD/i386, it 
  stops at "Using Drive: 0 Partition: 3" - i386 specific.</h2>

<p>
This isn't actually an error message by itself, it is the boot loader in
the MBR telling you which drive and partition it is about to boot from.
The problem is, the boot process stopped here.

<p>
There are two common reasons why this may happen:  an incompatibility
between the BIOS and the OpenBSD MBR, or a drive geometry problem.  An
example of a drive geometry problem would be if you were to move a drive
from one computer to another, update a BIOS or change a BIOS setting on
a computer, though it is also reported that it can happen for unknown
reasons during install.

<p>
<b>Note:</b> As of OpenBSD 3.1, the BIOS compatibility problem should be
resolved on virtually all computer systems.  However, it is still
possible to have a drive geometry problem, so it is still possible to
have the system hang after this message.

<p>
To fix the BIOS compatibility issue, you must replace the boot loader
with one that is compatible with your system.  Fortunately, boot loaders
are easy to come by.

<h3>Installing the BootEasy boot loader:</h3>
<p>
This requires booting your system.  As you can't boot off the hard disk
directly, we have to use a boot floppy or CD-ROM to start the boot
process.  When the system gets to the 'boot&gt;' prompt, redirect it to
boot from the hard disk:

<pre>
reading boot.......
probing pc0 com0 com1 pci mem [639k 79m a20=on]
disk hd0 fd0
&gt;&gt; OpenBSD BOOT 1.28
boot&gt; <b>boot hd0a:/bsd</b>
</pre>
<p>
This command redirects the boot process to the file /bsd on the 'a'
partition of the first hard drive, allowing your system to boot.

<p>
<!-- XXXversion -->
Once the system is booted, you need to install the BootEasy boot loader.
The file itself can be found on both the CD-ROM and the FTP sites, in
the directory <tt>3.3/tools/booteasy/Boot.bin</tt>, and can be installed using
the following
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386">fdisk(8)</a>
command:

<pre>
<!-- XXXversion -->
# <b>fdisk -i -f /mnt/3.3/tools/booteasy/Boot.bin wd0</b>
</pre>
<p>
<!-- XXXversion -->
This assumes you have the 3.3 CD mounted on /mnt and that you are using
an IDE drive.  You may need to change this depending upon where Boot.bin
is and what kind of hard disk you have (a SCSI drive would typically be
'sd0').  <b>Note: do NOT do this if your OpenBSD partition is not the
entire disk!</b> Initializing the MBR this way creates one OpenBSD
partition spanning the entire disk and deletes all other partitions,
which is rarely good.

<p>
BootEasy has another feature that might interest you even if you have
no problem with the default loader: It is capable of selecting a boot
partition at startup -- it will prompt you for which partition to boot
from, and will boot the active partition if no other choice is made. 
This might be very useful should you have multiple OS's on one disk. 
Installing BootEasy this way is done from MS-DOS with the BOOTINST.EXE 
program found in the BootEasy directory on the CD-ROM and FTP servers.

<h3>Installing the MS-DOS boot loader: </h3>
<p>
Boot from a Windows 9x or DOS v6 boot disk with FDISK.EXE on it.  Once
the system is booted to an MS-DOS prompt, enter the following:

<pre>
A:\&gt;<b>fdisk /mbr</b>
</pre>
<p>
You should see a brief disk access, and then a command prompt should
return, with NO message of any kind.  "Bad command or file name" means
the disk you used did not have FDISK.EXE on it.  If you do this
properly, the "Using ..." message will be removed, as it replaces the
very code that produces that message.  If you had a BIOS compatibility
issue, it will now be gone, reboot, your OpenBSD install should come
right up.

<p>
It has been reported that this also works with FreeDOS.


<h3>The OS-BS Boot Loader:</h3>
<p>
Another boot loader, OS-BS, is included with the OpenBSD CD-ROMs and
available on the FTP sites in <tt>3.3/tools/osbs135.exe</tt>. The OS-BS
web page is at 
<a href="http://www.prz.tu-berlin.de/~wolf/os-bs.html">
    http://www.prz.tu-berlin.de/~wolf/os-bs.html</a>.

<h3>LILO:</h3>
<p>
The Linux LILO program can also be used.  For details, see
<a href="ftp://ftp.openbsd.org/pub/OpenBSD/3.3/i386/INSTALL.linux">INSTALL.linux</a>


<h3>Avoiding the problem:</h3>
<p>
Relatively few machines have the BIOS compatibility problem, but if you
are setting up a machine that you know has this problem, it is fairly
easy to avoid it.  The only time the OpenBSD loader is installed on your
system during a normal install is when you say 'Y' to the 'Use entire
disk for OpenBSD' question.  If you answer 'N' and manually create the
OpenBSD disk partition, it will not replace the boot loader unless you
use the 'reinit' or 'update' commands of fdisk.  This, of course,
assumes that your drive STARTED with some kind of boot loader -- if it
doesn't (new, blank drive, drive pulled from another platform), you will
have to install one before the system will boot.


<h3>Fixing a drive geometry problem:</h3>
<p>
Ideally, you would want to avoid this problem by maintaining the same
drive geometry, not by fixing it, however sometimes you can't avoid it.
An example would be moving a large drive from an old computer which
didn't support LBA geometry to a new machine which insists upon using
LBA.

<p>
Start your machine using a boot disk or CD-ROM, as indicated above.  Log
in as root, and execute the following commands:

<pre>
# cp /usr/mdec/boot /boot
# /usr/mdec/installboot -v /boot /usr/mdec/biosboot wd0
</pre>
<p>
Reboot, your system should come right up.

<p>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&amp;sektion=8&amp;arch=i386">installboot(8)</a>
installs and configures the partition boot loader,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386">biosboot(8)</a>,
 which loads 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>
is the module which loads the kernel into RAM.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&amp;sektion=8&amp;arch=i386">biosboot(8)</a>
has a table within it that points to the physical location 
(according to the system's BIOS) of 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>.
If you do anything which changes the BIOS's perception of the location of 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>,
you must re-run
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&amp;sektion=8&amp;arch=i386">installboot(8)</a>
as above to reinitialize the table pointing to 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">boot(8)</a>.

<p>
See <a href="#InstBoot">Install Boot</a> for more info.

d1269 2
a1270 1
wd2a:  aborted command, interface CRC error reading fsbn 64 of 64-79 (wd2 bn 127; cn 0 tn 2 sn 1), retrying
d1416 1
a1416 1
<small>$OpenBSD: faq14.html,v 1.91 2003/08/22 13:11:53 nick Exp $</small>
@


1.91
log
@
Add Accusys to HW options.
There is no longer just one Promise IDE "RAID" card.
@
text
@d974 1
a974 1
bootable CDROM) and at the boot prompt, type "b hd0a:/bsd" to force it
d1585 1
a1585 1
<small>$OpenBSD: faq14.html,v 1.90 2003/08/05 19:54:07 nick Exp $</small>
@


1.90
log
@
You are right, Tom Cosgrove (tom dot cosgrove at arches-consulting dot com),
Platform-Specific should be hyphenated...
@
text
@d1555 1
d1567 1
a1567 1
"Is the Promise or HighPoint IDE RAID controller supported?".  The
d1585 1
a1585 1
<small>$OpenBSD: faq14.html,v 1.89 2003/08/05 18:32:56 nick Exp $</small>
@


1.89
log
@
Sync with new faq12.html
@
text
@d25 1
a25 1
<a href= "faq12.html">[To Section 12 - Platform Specific Questions]</a>
d1576 1
a1576 1
<a href= "faq12.html">[To Section 12 - Platform Specific Questions]</a>
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.88 2003/07/25 20:05:19 nick Exp $</small>
@


1.88
log
@
clean up other faq13.html references
@
text
@d25 1
a25 1
<a href= "faq12.html">[To Section 12 - For Advanced Users]</a>
d1576 1
a1576 1
<a href= "faq12.html">[To Section 12 - For Advanced Users]</a>
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.87 2003/07/14 20:15:56 nick Exp $</small>
@


1.87
log
@
Simplify man page links.  Several odd-ball links pointed out by
Dmitriy A. Medvedev (the_13 at mail dot ru).
@
text
@d25 1
a25 1
<a href= "faq13.html">[To Section 13 - IPsec]</a>
d1576 1
a1576 1
<a href= "faq13.html">[To Section 13 - IPsec]</a>
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.86 2003/07/04 13:09:55 nick Exp $</small>
@


1.86
log
@
whoops.  v2.9 reference updated.
@
text
@d523 1
a523 1
csh's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=unlimit&amp;sektion=1&amp;format=html">unlimit(1)</a>,
d525 1
a525 1
sh's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ulimit&amp;sektion=1&amp;format=html">ulimit(1)</a>.)
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386&amp;format=html">fdisk(8)</a>
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.85 2003/07/03 23:25:31 nick Exp $</small>
@


1.85
log
@
14.1 was missing the "14.1 - " part of the header (spotted by Miod
Vallat).  While in the neighborhood, removed <a name="14.xx"> targets,
and standardized the remaining targets.  No words changed.
@
text
@d818 1
a818 1
available on the FTP sites in 2.9/tools/osbs135.exe. The OS-BS
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.84 2003/07/02 23:28:40 nick Exp $</small>
@


1.84
log
@
Softupdates really isn't experiemental anymore.
First kick from Henning@@, and Sam Smith (s at msmith dot net) beat me
to it with a better diff than I was planning anyway.
@
text
@d51 2
a52 3
<a name= "disklabel"></a>
<a name="14.1"></a>
<h2>Using OpenBSD's disklabel</h2>
d285 1
a285 2
<a name= "fdisk"></a>
<a name="14.2"></a>
d398 1
a398 2
<a name= "NewDisk"></a>
<a name="14.3"></a>
d516 1
a516 2
<a name= "SwapFile"></a>
<a name="14.4"></a>
d666 1
a666 2
<a name= "SoftUpdates"></a>
<a name="14.5"></a>
d716 1
a716 2
<a name= "D0P3"></a>
<a name="14.6"></a>
d884 1
a884 2
<a name= "LargeDrive"></a>
<a name="14.7"></a>
d954 1
a954 2
<a name= "InstBoot"></a>
<a name="14.8"></a>
d1008 1
a1008 2
<a name= "Backup"></a>
<a name="14.9"></a>
d1374 1
a1374 2
<a name= "MountImage"></a>
<a name=14.10></a>
d1421 1
a1421 2
<a name= "pciideErr"></a>
<a name=14.11></a>
d1452 1
a1452 1
<a name= "IDEDMA"></a>
d1501 1
a1501 1
<a name= "RAID"></a>
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.82 2003/04/04 17:49:08 nick Exp $</small>
@


1.83
log
@
Updated FAQ for OpenBSD 3.3.
@
text
@d676 6
a681 4
Over the last few years Kirk McKusick has been working on something
called "Soft Updates". This is based on an idea proposed by Greg Ganger
and Yale Patt that imposing a partial ordering on the buffer cache
operations would permit the requirement for synchronous writing of
d683 1
a683 1
performance increase of disk writing performance.
d686 5
a690 10
As Soft Updates are still in development as a whole, an 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck&amp;sektion=8">fsck(8)</a> is still needed after
the computer is abruptly turned off without a clean shutdown sequence,
but this will be remedied in future versions.

<p>
More internals and details about Soft Updates can be found in the papers
of <a href="http://www.ece.cmu.edu/~ganger/papers/CSE-TR-254-95/">Ganger
and Patt</a> and from
<a href="http://www.mckusick.com/softdep/index.html">McKusick</a>.
@


1.82
log
@
More tags for Stuff That Changes every release, from Sam Smith.
@
text
@d319 1
a319 1
----------------------------------------------------------------------
d775 1
a775 1
the directory 3.0/tools/booteasy/Boot.bin, and can be installed using
d782 1
a782 1
# <b>fdisk -i -f /mnt/3.0/tools/booteasy/Boot.bin wd0</b>
d786 1
a786 1
This assumes you have the 3.0 CD mounted on /mnt and that you are using
d835 1
a835 1
<a href="ftp://ftp.openbsd.org/pub/OpenBSD/3.0/i386/INSTALL.linux">INSTALL.linux</a>
d1598 1
a1598 1
<small>$OpenBSD: faq14.html,v 1.81 2003/03/18 03:41:04 nick Exp $</small>
@


1.81
log
@
* [FAQ Index] [Back] [Next] links at top of page ('bout time.  Finally
decided not having them was worse than the lame ideas I had).
* Top heading changed from <h2> to <h1> throughout
* [Back to Main Index] shortened to [FAQ Index] top and bottom
* Bottoms of faq5.html and faq14.html standardized.
@
text
@d772 1
d781 1
d785 1
d898 1
d1545 1
d1598 1
a1598 1
<small>$OpenBSD: faq14.html,v 1.80 2003/03/11 21:03:38 nick Exp $</small>
@


1.80
log
@
14.7: typo, spotted by "parksie ;-\)" (mike at parksie dot net).
Made the BIOS/Boot ROM limitation stronger, suggested by (dj at djlauk dot de)
@
text
@d22 7
a28 1
<h2><font color="#e00000">14 - Disk Setup</font></h2><hr>
d1584 1
a1584 1
<a href= "index.html">[Back to Main Index]</a>
d1588 1
a1588 1

a1589 1
<p>
d1593 1
a1593 1
<small>$OpenBSD: faq14.html,v 1.79 2003/03/10 00:17:23 margarida Exp $</small>
@


1.79
log
@Stick with sd2, typos and word improving.

Nick@@ ok
@
text
@d896 1
a896 1
are not be supported by OpenBSD 3.1 and earlier.
d945 3
d1588 1
a1588 1
<small>$OpenBSD: faq14.html,v 1.78 2003/02/28 00:34:28 nick Exp $</small>
@


1.78
log
@
Typo fixes from Tom Cosgrove (tom dot cosgrove at arches-consulting dot com).
Thanks!
@
text
@d407 1
d471 1
a471 1
# <b>newfs wd1a </b>
d485 1
a485 1
# <b>mount /dev/wd1a /u</b>
d490 1
a490 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a>
d492 1
a492 1
<pre>/dev/wd1a /u ffs rw 1 1</pre>
d496 1
a496 1
should mount the new drive in /mnt and use cpio -pdum to copy /usr/local
d499 1
a499 1
file to show that the /usr/local partition is now /dev/wd1a (your
d503 1
a503 1
<b>/dev/wd1a /usr/local ffs rw 1 1</b>
d507 1
a507 1
Reboot into single user mode..<b>boot -s</b> Move the existing
d509 1
a509 1
create an empty directory /usr/local. Then reboot the system, and viola,
d1585 1
a1585 1
<small>$OpenBSD: faq14.html,v 1.77 2003/02/25 04:00:10 david Exp $</small>
@


1.77
log
@remove double word stuttering.
ok nick@@
@
text
@d697 1
a697 1
Enabling soft updates must be done with a mount time option, When
d820 1
a820 1
    http://www.prz.tu-berlin.de/~wolf/os-bs.html</a>
d1377 1
a1377 1
To mount a disk image (ISO images, Disk images created with dd, etc) in
d1380 1
a1380 1
device. For example, If you have an ISO image located at
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.76 2003/02/20 03:09:56 nick Exp $</small>
@


1.76
log
@
Page name cleanups.  Standardize capitalization, and change
x.0 -> x on titles and on "next/previous" links at bottom of page.
From Tom Cosgrove (tom dot cosgrove at arches-consulting dot com), thanks!
@
text
@d739 1
a739 1
have the system hang after this this message.
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.75 2003/02/18 03:02:18 nick Exp $</small>
@


1.75
log
@
Pick a charset, any charset.  However, bouncing back and forth between
them is probably not a good idea.  Picked "ISO-8859-1" rather than
"us-ascii".  Issue brought to my attention by David Krause, which
prompted me to go looking for more.
@
text
@d4 1
a4 1
<title>14.0 - Disk setup</title>
d22 1
a22 1
<h2><font color="#e00000">14.0 - Disk setup</font></h2><hr>
d1575 1
a1575 1
<a href= "faq13.html">[To Section 13.0 - IPsec]</a>
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.74 2003/01/01 13:02:00 nick Exp $</small>
@


1.74
log
@
Rev copyrights to 2003.
@
text
@d11 1
a11 1
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.73 2002/12/23 02:34:42 nick Exp $</small>
@


1.73
log
@
somewhat de-ugly the HTML:
* wrap long lines
* shorten man page links
* remove </li> and </p>
* <strong> -> <b>
No wording was changed in this diff, and output remains the same on at
some browsers.
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2002 by OpenBSD.">
d1584 1
a1584 1
<small>$OpenBSD: faq14.html,v 1.72 2002/12/11 14:36:55 nick Exp $</small>
@


1.72
log
@
Oops, extra word.  Spotted by Dimitry Andric (dimitry at andric. com).
@
text
@d26 14
a39 12
<li><a href="#disklabel"  >14.1 - Using OpenBSD's disklabel</a></li>
<li><a href="#fdisk"      >14.2 - Using OpenBSD's fdisk</a></li>
<li><a href="#NewDisk"    >14.3 - Adding extra disks in OpenBSD</a></li>
<li><a href="#SwapFile"   >14.4 - How to swap to a file</a></li>
<li><a href="#SoftUpdates">14.5 - Soft Updates</a></li>
<li><a href="#D0P3"       >14.6 - When I boot after installation of OpenBSD/i386, it stops at 
"Using Drive: 0 Partition 3".</a></li>
<li><a href="#LargeDrive" >14.7 - What are the issues regarding large drives with OpenBSD?</a></li>
<li><a href="#InstBoot"   >14.8 - Installing Bootblocks - i386 specific</a></li>
<li><a href="#Backup"     >14.9 - Preparing for disaster: Backing up and Restoring from tape.</a></li>
<li><a href="#MountImage" >14.10 - Mounting disk images in OpenBSD</a></li>
<li><a href="#pciideErr"  >14.11 - Help! I'm getting errors with PCIIDE!</a></li>
d41 1
a41 1
<li><a href="#RAID"       >14.13 - RAID options with OpenBSD</a></li>
d62 1
a62 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8&amp;format=html">disklabel(8)</a>
a63 1
</p>
d67 1
a67 1
and the disk drivers contained within the kernel. Labels hold certain 
d69 6
a74 5
about your filesystems. This is then used by the bootstrap program to load
the drive and to know where filesystems are contained on the drive. Labels are
also used in conjunction with the filesystems to create a more efficient
environment. You can read more in-depth information about disklabel by
reading the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=5&amp;format=html">disklabel(5)</a>
a75 1
</p> 
d81 2
a82 2
such as Windows NT or DOS can see.) With <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8&amp;format=html">disklabel(8),</a>
a85 1
</p>
d92 9
a100 8
labels. This comes (for i386 users) directly after using <a href="#fdisk">fdisk(1)</a>.
During the install you use disklabel to create your separate labels which
will contain your separate mountpoints. During the install, you can set
your mountpoints from within 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8&amp;format=html">disklabel(8),</a>
but this isn't completely necessary considering you will be prompted later 
to confirm you choices. But it does make your install go just a little smoother.
</p>
d104 12
a115 12
they will need to be created. The first label you will create is the label
'a'. This label SHOULD be your where / will be mounted. You can see
recommended partitions that should be created and their sizes by
reading <a href="faq4.html#SpaceNeeded">FAQ 4, Space Needed</a>. For servers it is recommended
that you create at least these label's separately. For desktop users
creating one mountpoint at / will probably suffice. When initially
creating your root partition ( 'a' label ), keep in mind that you will 
need SOME space left for your swap label. Now that the basics have been
explained, here is an example of using disklabel during an install. In   
this first example it is assumed that OpenBSD will be the only operating
system on this computer, and that a full install will be done.
</p>
d133 4
a136 4
&gt; <strong>d a</strong>
&gt; <strong>a a</strong>
offset: [63] <strong>&lt;Enter&gt;</strong>
size: [16386237] <strong>64M</strong>
d138 8
a145 8
FS type: [4.2BSD] <strong>&lt;Enter&gt;</strong>
mount point: [none] <strong>/</strong>
fragment size: [1024] <strong>&lt;Enter&gt;</strong>
block size: [8192] <strong>&lt;Enter&gt;</strong>
cpg: [16] <strong>&lt;Enter&gt;</strong>
&gt; <strong>a b</strong>
offset: [131103] <strong>&lt;Enter&gt;</strong>
size: [16255197] <strong>64M</strong>
d147 1
a147 1
FS type: [swap] <strong>&lt;Enter&gt;</strong>
d151 11
a161 8
At this point we have created a 64M root partition mounted at /, and a 64Meg swap partition. Notice that
the offset starts at sector 63. This is what you want. When it comes to the size, disklabel will show
your size in sectors, however, you don't need to enter sizes in the same format. Like the example above
you can enter sizes in the manner of <i>64 Megabytes = 64M</i> and <i>2 Gigabytes = 2G</i>. Disklabel
will then round to the nearest cylinder. In the example above you will also notice that disklabel
assumes that label 'b' will be a swap. This is a correct assumption as the GENERIC kernel is set to look
for swap on label 'b', and you should just follow this guideline and use 'b' as your swap area.
</p>
d164 4
a167 4
The next example will take you through the creation of two more labels. This means that it's not a
complete install, as the size of these won't be enough to install OpenBSD to its fullest. 
Showing the creation of all the partitions would just be repetitive.
</p>
d170 3
a172 3
&gt; <strong>a d</strong>
offset: [262143] <strong>&lt;Enter&gt;</strong>
size: [16124157] <strong>64M</strong>
d174 8
a181 8
FS type: [4.2BSD] <strong>&lt;Enter&gt;</strong>
mount point: [none] <strong>/tmp</strong>
fragment size: [1024] <strong>&lt;Enter&gt;</strong>
block size: [8192] <strong>&lt;Enter&gt;</strong>
cpg: [16] <strong>&lt;Enter&gt;</strong>
&gt; <strong>a e</strong>
offset: [393183] <strong>&lt;Enter&gt;</strong>
size: [15993117] <strong>64M</strong>
d183 5
a187 5
FS type: [4.2BSD] <strong>&lt;Enter&gt;</strong>
mount point: [none] <strong>/var</strong>
fragment size: [1024] <strong>&lt;Enter&gt;</strong>
block size: [8192] <strong>&lt;Enter&gt;</strong>
cpg: [16] <strong>&lt;Enter&gt;</strong>
d191 7
a197 6
In the above example, there are two things you might notice. One being that the offset is automatically
figured out for you to be the next in order. When doing an install of this sort, you won't need to mess
with changing the offsets at all. Another difference you might notice will be that label 'c' has been
skipped. This is done for a reason, which is that label 'c' is a label that represents the whole disk.
For this reason you shouldn't deal with label 'c' in any way.
</p>
d200 4
a203 3
Once all your labels have been created all that's left to do is write the labels to disk, and move on in
the installation process. To write everything and quit disklabel (and continue with the install) do:
</p>
d206 2
a207 2
&gt; <strong>w</strong>
&gt; <strong>q</strong>
d211 5
a215 4
<strong>*NOTE*</strong> - For users with large drives. If your bios isn't able to support a drive of that size
OpenBSD cannot support it either. Otherwise OpenBSD should be able to handle your drive just fine. If you are in a 
situation where your bios doesn't support your drive, you can try Maxtor EZ-Drive or other similar overlay product.
</p>
d222 4
a225 4
Once your system is installed, you shouldn't need to use disklabel too often. But some times you will
need to use disklabel when adding, removing or restructuring your disks. One of the first things
you will need to do is view your current disklabel. To do this, simply type:
</p>
d228 1
a228 1
# <strong>disklabel wd0</strong> &gt;----- Or whatever disk device you'd like to view
d259 4
a262 4
The above command simply allows you to view the existing disklabel, and assuring that you dont mess
anything up. ( Which we all need sometimes. ) But to be able to make changes you must use the -E option
with disklabel like so:
</p>
d265 1
a265 1
# <strong>disklabel -E wd0</strong>
d269 9
a277 7
This will bring you to a prompt, the same as the one that you used during the OpenBSD install. Probably
the single most important command at this prompt is '?'. This will give you a list of possible options
pertaining to disklabel. You can even view the entire 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8&amp;format=html">disklabel(8)</a>
man page with the 'M' command. From this prompt, you will do all of your adding, deleting and 
changing of partitions. For additional information read the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;sektion=8&amp;format=html">disklabel(8)</a>
a278 1
</p>
a283 1
<p>
d285 2
a286 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;apropos=0&amp;sektion=8&amp;arch=i386&amp;format=html">fdisk(8)</a>
</p>
d290 4
a293 5
partition can contain <u>several</u> labels, each with filesystems/swap/etc.).
It can divide space on your drives and set one active. This program will
usually be used in Single User Mode ( boot -s ). Fdisk also sets the MBR on
your various hard disks.
</p>
a297 1
</p>
d301 2
a302 2
</p>
<pre># <strong>fdisk fd0</strong><br>
a306 1
</p>
a323 1
</p>
d326 3
a328 4
In the previous example we just viewed our information. What if we want to
edit our partition table? Well, to do so we must use the <b>-e</b> flag.
This will bring up a command line prompt to interact with fdisk.
</p>
d331 1
a331 1
# <strong>fdisk -e wd0</strong>
d333 1
a333 1
fdisk: 1&gt; <strong>help</strong>
d352 3
a354 3
It is perfectly safe in fdisk to go in and explore, just make sure to answer <Strong>N</strong> to saving
the changes and *DON'T* use the <strong>write</strong> command.
</p>
d357 2
a358 1
<b>-e</b> flag.</p>
d360 32
a391 15
<li><strong>help</strong>    Display a list of commands that fdisk understands in the interactive edit mode.</li>
<li><strong>reinit</strong>  Initialize the currently selected, in-memory copy of the boot block.</li>
<li><strong>disk</strong>    Display the current drive geometry that fdisk has probed. You are given a chance to edit it if you wish.</li>
<li><strong>setpid</strong>  Change the partition identifier of the given partition table entry. This command is particularly useful for reassigning an existing partition to OpenBSD.</li>
<li><strong>edit</strong>    Edit a given table entry in the memory copy of the current boot block.  You may edit either in BIOS geometry mode, or in sector offsets and sizes.</li>
<li><strong>flag</strong>    Make the given partition table entry bootable. Only one entry can be marked bootable. If you 
wish to boot from an extended partition, you will need to mark the partition table entry for the extended partition as bootable.</li>
<li><strong>update</strong>  Update the machine code in the memory copy of the currently selected boot block.</li>
<li><strong>select</strong>  Select and load into memory the boot block pointed to by the extended partition table entry in the current boot block.</li>
<li><strong>print</strong>   Print the currently selected in-memory copy of the boot block and its MBR table to the terminal.</li>
<li><strong>write</strong>   Write the in-memory copy of the boot block to disk. You will be asked to confirm this operation.</li>
<li><strong>exit</strong>    Exit the current level of fdisk, either returning to the previously selected in-memory copy of a boot block, or exiting the program if there is none.</li>
<li><strong>quit</strong>    Exit the current level of fdisk, either returning to the previously selected
in-memory copy of a boot block, or exiting the program if there is none.  Unlike exit it does write the modified block out.</li>
<li><strong>abort</strong>   Quit program without saving current changes.</li>
d399 2
a400 2
Well once you get your disk installed <strong>PROPERLY</strong> you need to use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;apropos=0&amp;sektion=8&amp;arch=i386&amp;format=html">fdisk(8)</a>
d402 4
a405 5
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&amp;apropos=0&amp;sektion=8&amp;format=html">
disklabel(8)</a> to set
 up your
disk in OpenBSD.
<P>
d408 1
a408 1
# <Strong>fdisk -i sd2</strong>
d414 1
a414 1
# <strong>disklabel -e sd2</strong>
d428 17
a444 16
First, ignore the 'c' partition, it's always there and is for
programs like disklabel to function! 
For normal operations, fsize should always be 1024, bsize should always be 8192,
and cpg should always be 16.  Fstype is 4.2BSD.  Total sectors is
the total size of the disk.
Say this is a 3 gigabyte disk.  Three gigabytes in disk manufacturer
terms is 3000 megabytes.  So divide 6185088/3000 (use 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bc&amp;sektion=1">bc(1))</a>.  You get 2061.
So, to make up partition sizes for a, d, e, f, g, ... just multiply X*2061
to get X megabytes of space on that partition.   The offset for your
first new partition should be the same as the "sectors/track" reported
earlier in disklabel's output.  For us it is 63.  The offset for each
partition afterwards should be a combination of the size of each partition
and the offset of each partition (Except the 'c' partition, since it has
no play into this equation.)
<P>
d446 2
a447 2
whole thing for web storage or a home directory or something,
just take the total size of the disk and subtract the sectors per track from it.
d449 1
d453 15
a467 15
<P>
<b>If all this seems needlessly complex, you can just use disklabel -E to get
the same partitioning mode that you got on your install disk!</b>
There, you can just use "96M" to specify "96 megabytes".  (Or, if you have a disk
big enough, 96G for 96 gigs!) Unfortunately,
the -E mode uses the BIOS disk geometry, not the real disk geometry,
and often times the two are not the same.  To get around this limitation,
type 'g d' for 'geometry disk'.  (Other options are 'g b' for 'geometry bios'
and 'g u' for geometry user, or simply, what the label said before
disklabel made any changes.)
<P>
That was a lot.  But you are not finished.  
Finally, you need to create the filesystem on that disk using <a href=
"http://www.openbsd.org/cgi-bin/man.cgi?query=newfs&amp;apropos=0&amp;sektion=8&amp;format=html">newfs(8)</a>.
</p>
d470 1
a470 1
# <strong>newfs wd1a </strong>
d474 4
a477 3
Or whatever your disk was named as per OpenBSD's disk numbering scheme.  (Look at the
output from <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&amp;sektion=8">dmesg(8)</a> to see what your disk was named by OpenBSD.)
</p>
a481 1
</p>
d484 1
a484 1
# <strong>mount /dev/wd1a /u</strong>
d488 3
a490 2
Finally, add it to <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a>
</p>
d494 6
a499 6
What if you need to migrate an existing directory like /usr/local? You should mount 
the new drive in /mnt and use cpio -pdum to copy /usr/local to the /mnt directory.
Edit the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a> file to show that the /usr/local partition is now /dev/wd1a
(your freshly formatted partition.) 
Example:
</p>
d502 1
a502 1
<strong>/dev/wd1a /usr/local ffs rw 1 1</strong>
d506 4
a509 4
Reboot into single user mode..<strong>boot -s</strong> Move the existing
/usr/local to /usr/local-backup (or delete it if you feel lucky) and create an
empty directory /usr/local. Then reboot the system, and viola, the files are there!
</p>
a510 1
<br>
a522 1
</p>
d525 3
a527 3
Swapping to a file doesn't require a custom built kernel, although that 
can still be done, this faq will show you how to add swap space both ways.
</p>
d532 5
a536 5
Swapping to a file is easiest and quickest way to get extra swap space setup.
The file must not reside on a filesystem which
has SoftUpdates enabled (they are disabled by default).
To start out, you can see how much swap you currently have and how much you are using with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&amp;sektion=8&amp;format=html">swapctl(8)</a>
a537 1
</p>
d540 1
a540 1
$ <strong>swapctl -l</strong>
d546 14
a559 11
This shows the devices currently being used for swapping and their current statistics. In the above
example there is only one device named &quot;swap_device&quot;. This is the predefined area on disk that
is used for swapping. (Shows up as partition b when viewing disklabels) As you can also see in the above
example, that device isn't getting much use at the moment. But for the purposes of this document, we
will act as if an extra 32M is needed. 
</p>
<p>
The first step to setting up a file as a swap device is to create the file. It's best to do this with
the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd&amp;sektion=1&amp;format=html">dd(1)</a>
utility. Here is an example of creating the file <i>/var/swap</i> that is 32M large.
</p>
d562 1
a562 1
$ <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d569 2
a570 3
Once this has been done, we can turn on swapping to that device. Use the following command to turn on
swapping to this device
</p>
d573 2
a574 2
$ <strong>sudo chmod 600 /var/swap</strong>
$ <strong>sudo swapctl -a /var/swap</strong>
d578 2
a579 2
Now we need to check to see if it has been correctly added to the list of our swap devices.
</p>
d582 1
a582 1
$ <strong>swapctl -l</strong>
d590 4
a593 4
Now that the file is setup and swapping is being done, you need to add a line to your <i>/etc/fstab</i>
file so that this file is configured on the next boot time also. If this line is not added, your won't
have this swap device configured.
</p>
d596 1
a596 1
$ <strong>cat /etc/fstab</strong>
d604 4
a607 4
This is a more permanent solution to adding more swap space. To swap to a file permanently, first make a
kernel with vnd0c as swap. If you have wd0a as root filesystem, wd0b is the previous swap, use this line
in the kernel configuration file (refer to compiling a new kernel if in doubt): 
</p>
d614 3
a616 3
After this is done, the file which will be used for swapping needs to be created. You should do this by
using the same command as in the above examples.
</p>
d619 1
a619 1
$ <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d626 3
a628 3
Now your file is in place, you need to add the file to you <i>/etc/fstab</i>. Here is a sample line to
boot with this device as swap on boot.
</p>
d631 1
a631 1
$ <strong>cat /etc/fstab</strong>
d637 4
a640 4
At this point your computer needs to be rebooted so that the kernel changes can take place. Once this
has been done it's time to configure the device as swap. To do this you will use <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&amp;sektion=8&amp;format=html">vnconfig(8)</a>.
</p>
d643 1
a643 1
$ <strong>sudo vnconfig -c -v vnd0 /var/swap</strong>
d648 3
a650 4
Now for the last step, turning on swapping to that device. We will do this just like in the above
examples, using swapctl(8). Then we will check to see if it was correctly added to our list of swap
devices.
</p>
d653 2
a654 2
$ <strong>sudo swapctl -a /dev/vnd0c</strong>
$ <strong>swapctl -l</strong>
d669 7
a675 6
Over the last few years Kirk McKusick has been working on something called
"Soft Updates". This is based on an idea proposed by Greg Ganger and Yale
Patt that imposing a partial ordering on the buffer cache operations would
permit the requirement for synchronous writing of directory entries to be
removed from the FFS code. Thus, a large performance increase of disk
writing performance.
d679 8
a686 6
the computer is abruptly turned off without a clean shutdown sequence, 
but this will be remedied in future versions.<p>
More internals and details about Soft Updates can be found in the papers of
<a href="http://www.ece.cmu.edu/~ganger/papers/CSE-TR-254-95/">Ganger and Patt</a> 
and from <a href="http://www.mckusick.com/softdep/index.html">McKusick</a>. 
</p>
a689 1
</p>
d692 2
a693 2
<strong>option FFS_SOFTUPDATES</strong>
</p>
d697 2
a698 2
Enabling soft updates must be done with a mount time option,
When mounting a partition with the  
d700 2
a701 2
utility, you can specify that you wish to have soft updates enabled on 
that partition. Below is a sample 
d703 1
a703 1
entry that has one partition <i>sd0a</i> that we wish to have mounted 
a704 1
</p>
d711 4
a714 4
Note to sparc users: Do not enable soft updates on sun4 or sun4c machines.  
These architectures support only a very limited amount of kernel memory 
and cannot use this feature.  However, sun4m machines are fine.
</p>
d719 2
a720 1
<h2>14.6 -  When I boot after installation of OpenBSD/i386, it stops at "Using Drive: 0 Partition: 3" - i386 specific.</h2>
d723 4
a726 12
This isn't actually an error message by itself, it is the boot loader in 
the MBR telling you which drive and partition it is about to boot 
from.  The problem is, the boot process stopped here.
</p>
<p>
There are two common reasons why this may happen:  an incompatibility 
between the BIOS and the OpenBSD MBR, or a drive geometry problem.  An 
example of a drive geometry problem would be if you were to move a 
drive from one computer to another, update a BIOS or change a BIOS 
setting on a computer, though it is also reported that it can happen 
for unknown reasons during install. 
</p>
d728 10
a737 2
<b>Note:</b> As of OpenBSD 3.1, the BIOS compatibility problem should 
be resolved on virtually all computer systems.  However, it is still 
d740 1
a740 1
</p>
d742 3
a744 4
To fix the BIOS compatibility issue, you must replace the boot loader 
with one that is compatible with your system.  Fortunately, boot 
loaders are easy to come by.
</p>
d748 2
a749 2
This requires booting your system.  As you can't boot off the hard
disk directly, we have to use a boot floppy or CD-ROM to start the boot
d752 1
a752 1
</p>
d762 2
a763 2
partition of the first hard drive, allowing your system to boot. 
</p>
d765 4
a768 4
Once the system is booted, you need to install the BootEasy boot
loader.  The file itself can be found on both the CD-ROM and the FTP
sites, in the directory 3.0/tools/booteasy/Boot.bin, and can be
installed using the following 
d771 1
a771 1
</p>
d776 5
a780 6
This assumes you have the 3.0 CD mounted on /mnt and that you
are using an IDE drive.  You may need to change this depending 
upon where Boot.bin is and what kind of hard disk you have (a SCSI 
drive would typically be 'sd0').  <b>Note: do NOT do this if your 
OpenBSD partition is not the entire
disk!</b> Initializing the MBR this way creates one OpenBSD
d783 1
a783 1
</p>
d792 1
a792 1
</p>
d795 3
a797 3
Boot from a Windows 9x or DOS v6 boot disk with FDISK.EXE on it.
Once the system is booted to an MS-DOS prompt, enter the following:
</p>
d809 1
a809 1
</p>
d812 1
a812 1
</p>
d821 1
a821 1
</p>
d826 1
a826 1
</p>
d830 11
a840 12
Relatively few machines have the BIOS compatibility problem, but if
you are setting up a machine that you know has this problem, it is
fairly easy to avoid it.  The only time the OpenBSD loader is
installed on your system during a normal install is when you say 'Y'
to the 'Use entire disk for OpenBSD' question.  If you answer 'N' 
and manually create the OpenBSD disk partition, it will not replace
the boot loader unless you use the 'reinit' or 'update' commands of
fdisk.  This, of course, assumes that your drive STARTED with some
kind of boot loader -- if it doesn't (new, blank drive, drive pulled
from another platform), you will have to install one before the system
will boot.
</p>
d844 10
a853 10
Ideally, you would want to avoid this problem by maintaining
the same drive geometry, not by fixing it, however sometimes you
can't avoid it.  An example would be moving a large drive from an old
computer which didn't support LBA geometry to a new machine which
insists upon using LBA.
</p>
<p>
Start your machine using a boot disk or CD-ROM, as indicated above. 
Log in as root, and execute the following commands:
</p>
d860 1
a860 1
</p>
d879 2
a880 1
</p>
a881 2
<br>

d889 1
a889 1
currently or soon to be available hard disks, however there are 
d891 4
a894 5
maximum of OpenBSD. In
the case of IDE drives, the limit is 128GB, the limit of the currently 
popular ATA interface.  Note the next generation of ATA drives, 
those with capacities greater than 128G (1G=2^30 here, not 
1,000,000,000, so drive manufacturers will often call this 137G), 
d896 1
a896 1
</p>
d898 4
a901 5
Unfortunately, the full ability of the 
OS isn't available until AFTER the OS has been loaded into memory, 
and the booting process introduces limits of its own.  The boot
process has to utilize (and is thus limited by) the system's boot ROM.  
The OpenBSD i386 boot loaders 
d905 16
a920 17
also have their own internal 
8G limitation, from an older BIOS limit.
</p> 
<p>
For this reason, the entire /bsd file (the kernel) must be located 
on the disk within the boot ROM addressable area, or within the first 8G 
of the disk, whichever is smaller.  This means that on some older 
i386 systems, the root partition must be completely within the first 
504M, but for most newer computers, the root partition may be 
anywhere within the first 8G.
</p>
<p>
Note that it is possible to install a 40G drive on an old 486 and 
load OpenBSD on it as one huge partition, and think you have 
successfully violated the above rule.  However, it might come 
back to haunt you in a most unpleasant way:
</p>
d936 1
a936 1
</p>
d940 1
a940 1
</p>
d942 3
a944 3
<b>The entire root partition must be within the computer's BIOS (or boot ROM)
addressable space or within the first 8G, whichever is smaller.</b>
</p>
d948 1
a948 1
</p>
d955 2
a956 2
Older versions of MS-DOS can only deal with disk geometries of 1024 cylinders
or less.  Since virtually all modern disks have more than 1024
d958 19
a976 22
and IDE BIOS (which is part of the rest of the PC BIOS)
have an option (sometimes the default) to "translate" the real disk
geometry into something that fits within MS-DOS' ability.
However, not all BIOS chips "translate" the geometry in
the same way.  If you change your BIOS (either with a new motherboard
or a new SCSI controller), and the new one uses a
different "translated" geometry, you will be unable to load the
second stage boot loader (and thus unable to load the kernel).
(This is because the first stage boot loader contains a list of the blocks
that comprise /boot in terms of the original "translated" geometry).
If you are using IDE disks, and you make changes to your BIOS settings,
you can (unknowingly) change its translation also (most IDE BIOS offer 3 different
translations). To fix your boot block so that you can boot normally,
just put a boot floppy in your drive (or use a bootable CDROM)
and at the boot prompt,
type "b hd0a:/bsd" to force it to boot from the first hard disk (and not the
floppy).  Your machine should come up normally.  You now need
to update the first stage boot loader to see the new geometry
(and re-write the boot block accordingly).
<br>
Our example will assume your boot disk is sd0 (but for IDE it would be wd0, etc..):
</p>
d979 1
a979 1
# <strong>cd /usr/mdec; ./installboot /boot biosboot sd0</strong>
d986 4
a989 4
Feed the &quot;heads&quot; and &quot;secs&quot; values to installboot's -h
and -s flags, respectively, so that the modified installboot command is
the following:
</p>
d991 1
a991 1
#<strong> cd /usr/mdec; ./installboot -h &lt;heads&gt; -s &lt;secs&gt; /boot biosboot sd0</strong>
d995 2
a996 2
If a newer version of bootblocks are required, you will need to compile these yourself. To do so simply:
</p>
d999 4
a1002 4
# <strong>cd /sys/arch/i386/stand/</strong>
# <strong>make &amp;&amp; make install </strong>
# <strong>cd /usr/mdec; cp ./boot /boot</strong>
# <strong>./installboot /boot biosboot sd0</strong> (or whatever device your hard disk is)
d1012 21
a1032 10
If you plan on running what might be called a production server, it is advisable to have some form of backup in the event one of your fixed disk drives fails.
</p>

<p>
This information will assist you in using the standard <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&amp;sektion=8&amp;format=html">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&amp;sektion=8&amp;format=html">restore(8)</a> utilities provided with OpenBSD. A more advanced backup utility called "Amanda" is also available for backing up multiple servers to one tape drive. In most environments <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&amp;sektion=8&amp;format=html">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&amp;sektion=8&amp;format=html">restore(8)</a> is enough. However, if you have a need to backup multiple machines to one tape, Amanda might be worth investigating in the future.
</p>

<p>
The device examples in this document are for a configuration that uses both SCSI disks and tape. In a production environment, SCSI disks are recommended over IDE due to the way in which they handle bad blocks. That is not to say this information is useless if you are using an IDE disk or other type of tape drive, your device names will simply differ slightly. For example sd0a would be wd0a in an IDE based system.
</p>
d1037 4
a1040 2
Backing up to tape requires knowledge of where your file systems are mounted. You can determine how your filesystems are mounted using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&amp;sektion=8">mount(8)</a> command at your shell prompt. You should get output similar to this:
</p>
d1049 3
a1051 2
In this example, the root (/) filesystem resides physically on sd0a which indicates SCSI fixed disk 0, partition a. The /usr filesystem resides on sd0h, which indicates SCSI fixed disk 0, partition h.
</p>
a1054 1
</p>
d1065 3
a1067 2
In this more advanced example, the root (/) filesystem resides physically on sd0a. The /var filesystem resides on sd0d, the /home filesystem on sd0e and finally /usr on sd0h.
</p>
d1070 3
a1072 2
To backup your machine you will need to feed dump the name of each fixed disk partition. Here is an example of the commands needed to backup the simpler mount table listed above:
</p>
d1081 2
a1082 2
For the more advanced mount table example, you would use something similar to:
</p>
d1093 4
a1096 2
You can review the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&amp;sektion=8&amp;format=html">dump(8)</a> man page to learn exactly what each command line switch does. Here is a brief description of the parameters used above:
</p>
a1106 1
</p>
d1109 4
a1112 2
The <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt&amp;sektion=1">mt(1)</a> command is used at the end to rewind the drive. Review the mt man page for more options (such as eject).
</p>
d1115 2
a1116 2
If you are unsure of your tape device name, use dmesg to locate it. An example tape drive entry in dmesg might appear similar to:
</p>
d1123 10
a1132 2
You may have noticed that when backing up, the tape drive is accessed as device name "nrst0" instead of the "st0" name that is seen in dmesg. When you access st0 as nrst0 you are accessing the same physical tape drive but telling the drive to not rewind at the end of the job and access the device in raw mode. To back up multiple file systems to a single tape, be sure you use the non-rewind device, if you use a rewind device (rst0) to back up multiple file systems, you'll end up overwriting the prior filesystem with the next one dump tries to write to tape. You can find a more elaborate description of various tape drive devices in the dump man page.
</p>
d1135 2
a1136 2
If you wanted to write a small script called "backup", it might look something like this:
</p>
d1152 17
a1168 10
If scheduled nightly backups are desired, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cron&amp;sektion=8&amp;format=html">cron(8)</a> could be used to launch your backup script automatically.
</p>

<p>
It will also be helpful to document (on a scrap of paper) how large each file system needs to be. You can use df -h to determine how much space each partition is currently using. This will be handy when the drive fails and you need to recreate your partition table on the new drive.
</p>

<p>
Restoring your data will also help reduce fragmentation. To ensure you get all files, the best way of backing up is rebooting your system in single user mode. File systems do not need to be mounted to be backed up. Don't forget to mount root (/) r/w after rebooting in single user mode or your dump will fail when trying to write out dumpdates. Enter bsd -s at the boot&gt; prompt for single user mode.
</p>
d1174 3
a1176 2
After you've backed up your file systems for the first time, it would be a good idea to briefly test your tape and be sure the data on it is as you expect it should be.
</p>
d1179 2
a1180 2
You can use the following example to review a catalog of files on a dump tape:
</p>
d1187 3
a1189 2
This will cause a list of files that exist on the 1st partition of the dump tape to be listed. Following along from the above examples, 1 would be your root (/) file system.
</p>
d1192 2
a1193 2
To see what resides on the 2nd tape partition and send the output to a file, you would use a command similar to:
</p>
d1200 4
a1203 2
If you have a mount table like the simple one, 2 would be /usr, if yours is a more advanced mount table 2 might be /var or another fs. The sequence number matches the order in which the file systems are written to tape.
</p>
d1209 12
a1220 6
The example scenario listed below would be useful if your fixed drive has failed completely. In the event you want to restore a single file from tape, review the restore man page and pay attention to the interactive mode instructions.
</p>

<p>
If you have prepared properly, replacing a disk and restoring your data from tape can be a very quick process. The standard OpenBSD install/boot floppy already contains the required restore utility as well as the binaries required to partition and make your new drive bootable. In most cases, this floppy and your most recent dump tape is all you'll need to get back up and running.
</p>
d1223 2
a1224 2
After physically replacing the failed disk drive, the basic steps to restore your data are as follows:
</p>
d1229 3
a1231 1
Boot from the OpenBSD install/boot floppy. At the menu selection, choose Shell. Write protect and insert your most recent back up tape into the drive.
a1232 2
</p>

d1235 4
a1238 2
Using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&amp;sektion=8&amp;arch=i386&amp;format=html">fdisk(8)</a> command, create a primary OpenBSD partition on this newly installed drive. Example:
</p>
a1245 1
</p>
d1249 3
a1251 2
Using the disklabel command, recreate your OpenBSD partition table inside that primary OpenBSD partition you just created with fdisk. Example:
</p>
d1258 2
a1259 2
(Don't forget swap, see <a href="#disklabel">disklabel FAQ</a> for more info)
</p>
d1263 2
a1264 2
Use the newfs command to build a clean file system on each partition you created in the above step. Example:
</p>
a1273 1
</p>
d1281 2
a1282 2
Change into that mounted root file system and start the restore process. Example:
</p>
d1291 2
a1292 2
You'll want this new disk to be bootable, use the following to write a new MBR to your drive. Example:
</p>
d1300 2
a1301 2
In addition to writing a new MBR to the drive, you will need to install boot blocks to boot from it. The following is a brief example:
</p>
d1310 5
a1314 2
Your new root file system on the fixed disk should be ready enough so you can boot it and continue restoring the rest of your file systems. Since your operating system is not complete yet, be sure you boot back up with single user mode. At the shell prompt, issue the following commands to unmount and halt the system:
</p>
d1323 2
a1324 2
Remove the install/boot floppy from the drive and reboot your system. At the OpenBSD boot&gt; prompt, issue the following command:
</p>
d1331 2
a1332 2
The bsd -s will cause the kernel to be started in single user mode which will only require a root (/) file system.
</p>
d1336 4
a1339 2
Assuming you performed the above steps correctly and nothing has gone wrong you should end up at a prompt asking you for a shell path or press return. Press return to use sh. Next, you'll want to remount root in r/w mode as opposed to read only. Issue the following command:
</p>
d1347 2
a1348 2
Once you have remounted in r/w mode you can continue restoring your other file systems. Example:
</p>
d1361 2
a1362 2
You could use "<b>restore rvsf</b>" instead of just rsf to view names of objects as they are extracted from the dump set.
</p>
d1366 4
a1369 2
Finally after you finish restoring all your other file systems to disk, reboot into multiuser mode. If everything went as planned your system will be back to the state it was in as of your most recent back up tape and ready to use again.
</p>
d1377 6
a1382 3
To mount a disk image (ISO images, Disk images created with dd, etc) in OpenBSD
you must configure a <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnd&amp;sektion=4">vnd(4)</a> device. For example, If you have an ISO image located at <i>/tmp/ISO.image</i>, you would take the following steps to mount the image.
</p>
d1388 2
a1389 2
# <strong>vnconfig svnd0 /tmp/ISO.image</strong>
# <strong>mount -t cd9660 /dev/svnd0c /mnt</strong>
d1396 3
a1398 2
Notice that, since this image is a CD image you must specify type of <i>cd9660</i> when mounting it. This is true, no matter what type, e.g. you must use type ffs when mounting disk images. 
</p>
a1401 1
</p>
d1407 2
a1408 2
# <strong>umount /mnt</strong>
# <strong>vnconfig -u svnd0</strong>
d1416 2
a1417 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&amp;sektion=8">vnconfig(8)</a> man page.
</p>
d1425 4
a1428 5
PCI IDE DMA is unreliable with many combinations of hardware.
Until recently, most "mainstream" operating systems that claimed 
to support DMA transfers with IDE drives did not ship with that 
feature active by default.
</p>
d1435 2
a1436 4
transfers with a CRC to detect corruption. When the Ultra-DMA CRC
fails, OpenBSD will print an error message and try the operation
again.
</p>
a1445 1
</p>
d1449 2
a1450 2
your machine to lock hard, please send in a <a href="../report.html">bug report</a>.
</p>
d1465 3
a1467 3
If you get this message, you can try and force DMA mode by using 
'flags 0x0001' on your pciide entry in your kernel config file.  That
would look something like this:
d1505 4
a1508 3
than one can get out of a single drive alone.  While
a full discussion of the benefits and risks of RAID are outside the scope
of this article, there are a couple points that are important to make here:
d1510 2
a1511 2
<li>RAID has nothing to do with backup.</li>
<li>By itself, RAID will not eliminate down-time.</li>
d1513 1
d1520 1
d1523 5
a1527 3
<li><a href="http://www.pdl.cmu.edu/RAIDframe/">RAIDframe Homepage</a></li>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raidctl&amp;sektion=8">man page for raidctl(8)</a></li>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=raid&amp;sektion=4">man page for raid(4)</a></li>
d1529 1
d1531 4
a1534 4
Starting with OpenBSD 3.1, the root partition can now be directly mirrored 
by OpenBSD using the "Autoconfiguration" option of RAIDframe.  Previous 
releases of OpenBSD could not have the root partition mirrored this way. 
</p>
d1538 5
a1542 4
Many OpenBSD <a href="../plat.html">platforms</a> include support for various
hardware RAID products.  The options vary by platform, see the appropriate
hardware support page (listed <a href="../plat.html">here</a>).
</p>
d1547 4
a1550 2
work on virtually any hardware platform that supports either SCSI or IDE.
</p>
d1553 3
a1555 3
<li><a href="http://www.arcoide.com/">Arco</a></li>
<li><a href="http://www.maxtronic.com/">Maxtronic</a></li>
<li><a href="http://www.infortrend.com/">Infortrend</a></li>
d1565 7
a1571 8
"Is the Promise or HighPoint IDE RAID controller supported?".  The answer
is "No". These cards and chips are not true hardware RAID controllers,
but rather
BIOS-assisted boot of a software RAID.  As OpenBSD already supports
software RAID in a hardware-independent way, there isn't
much desire among the OpenBSD developers to implement special support
for these cards.
</p>
d1577 1
a1577 1
</p>
d1584 2
a1585 2
<small>$OpenBSD: faq14.html,v 1.71 2002/10/05 22:51:57 nick Exp $</small>
</p>
@


1.71
log
@
Oops.  Broke validation, fixed by removing stray </a>
@
text
@d1464 1
a1464 1
by on OpenBSD using the "Autoconfiguration" option of RAIDframe.  Previous 
d1514 1
a1514 1
<small>$OpenBSD: faq14.html,v 1.70 2002/10/01 22:47:24 nick Exp $</small>
@


1.70
log
@
relocate IDE DMA info from FAQ12 to FAQ14 with other disk stuff.
Translators: Note, this is the exact same text as was in FAQ12.2, minor
formatting improvement.

Yes, something new is planned for FAQ 13 now. 8-)
@
text
@a1391 1
</a>
d1514 1
a1514 1
<small>$OpenBSD: faq14.html,v 1.69 2002/10/01 21:32:14 nick Exp $</small>
@


1.69
log
@
Narrow down "gray boxes" to improve many things...
@
text
@d38 2
a39 1
<li><a href="#RAID"       >14.12 - RAID options with OpenBSD</a></li>
a1357 1

d1390 49
d1441 1
a1441 1
<h2>14.12 - RAID options for OpenBSD</h2>
d1515 1
a1515 1
<small>$OpenBSD: faq14.html,v 1.68 2002/07/12 02:51:35 nick Exp $</small>
@


1.68
log
@
Typos, grammar, wording fixes.
From David Krause <openbsd@@davidkrause.com>, thanks!
@
text
@d1317 1
a1317 1
<table border=0 width="800">
d1336 1
a1336 1
<table border=0 width="800">
d1466 1
a1466 1
<small>$OpenBSD: faq14.html,v 1.67 2002/07/02 01:17:58 nick Exp $</small>
@


1.67
log
@
recommended by EricJ@@ some time ago, done by Sam Smith <S@@mSmith.net>,
standarizing the displayed shell prompts to be either '#' or '$', as
appropriate.  If anyone cares, Sam was even kind enough to list the
sections where changes were made:
   2.2  2.3  4.5  6.6.3  6.9.1  8.3  8.5  8.10  10.12  10.13  13.7
   13.11  14.3  14.4  14.9
Thanks!
@
text
@d754 1
a754 1
This assumes you have a the 3.0 CD mounted on /mnt and that you
d843 1
a843 1
installs and configures the the partition boot loader,
d1466 1
a1466 1
<small>$OpenBSD: faq14.html,v 1.66 2002/07/02 00:30:16 nick Exp $</small>
@


1.66
log
@
& -> &amp; (and occassionally, "and")  > -> &gt;   < -> &lt;
work submitted by Sam Smith <S@@mSmith.net>, many thanks!
@
text
@d448 1
a448 1
bsd# <strong>newfs wd1a </strong>
d462 1
a462 1
mount /dev/wd1a /u
d520 1
a520 1
ericj@@oshibana&gt; <strong>swapctl -l</strong>
d539 1
a539 1
ericj@@oshibana&gt; <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d551 2
a552 2
ericj@@oshibana&gt; <strong>sudo chmod 600 /var/swap</strong>
ericj@@oshibana&gt; <strong>sudo swapctl -a /var/swap</strong>
d560 1
a560 1
ericj@@oshibana&gt; <strong>swapctl -l</strong>
d574 1
a574 1
ericj@@oshibana&gt; <strong>cat /etc/fstab</strong>
d597 1
a597 1
ericj@@oshibana&gt; <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d609 1
a609 1
ericj@@oshibana&gt; <strong>cat /etc/fstab</strong>
d621 1
a621 1
ericj@@oshibana&gt; <strong>sudo vnconfig -c -v vnd0 /var/swap</strong>
d632 2
a633 2
ericj@@oshibana&gt; <strong>sudo swapctl -a /dev/vnd0c</strong>
ericj@@oshibana&gt; <strong>swapctl -l</strong>
d1017 1
a1017 1
shell# <b>mount</b>
d1031 1
a1031 1
shell# <b>mount</b>
d1183 1
a1183 1
shell# <b>fdisk -e sd0</b>
d1196 1
a1196 1
shell# <b>disklabel -E sd0</b>
d1209 2
a1210 2
shell# <b>newfs /dev/rsd0a</b>
shell# <b>newfs /dev/rsd0h</b>
d1219 1
a1219 1
shell# <b>mount /dev/sd0a /mnt</b>
d1228 2
a1229 2
shell# <b>cd /mnt</b>
shell# <b>restore -rs 1 -f /dev/rst0</b>
d1238 1
a1238 1
shell# <b>fdisk -i sd0</b>
d1247 2
a1248 2
shell# <b>cp /usr/mdec/boot /mnt/boot</b>
shell# <b>/usr/mdec/installboot -v /mnt/boot /usr/mdec/biosboot sd0</b>
d1257 2
a1258 2
shell# <b>umount /mnt</b>
shell# <b>halt</b>
d1280 1
a1280 1
shell# <b>mount -u -w /</b>
d1290 1
a1290 1
shell# <b>mount /dev/sd0h /usr; cd /usr; restore -rs 2 -f /dev/rst0</b>
d1293 3
a1295 3
shell#	<b>mount /dev/sd0d /var; cd /var; restore -rs 2 -f /dev/rst0</b>
shell#	<b>mount /dev/sd0e /home; cd /home; restore -rs 3 -f /dev/rst0</b>
shell#	<b>mount /dev/sd0h /usr; cd /usr; restore -rs 4 -f /dev/rst0</b>
d1466 1
a1466 1
<small>$OpenBSD: faq14.html,v 1.65 2002/06/14 21:20:30 nick Exp $</small>
@


1.65
log
@
Wording improvement from Sam Smith <S@@mSmith.net>, Thanks!
@
text
@d380 1
a380 2
(<i>i386 only</i
>) and 
d728 1
a728 1
process.  When the system gets to the 'boot>' prompt, redirect it to
d735 2
a736 2
>> OpenBSD BOOT 1.28
boot> <b>boot hd0a:/bsd</b>
d778 1
a778 1
A:\&gt<b>fdisk /mbr</b>
d987 1
a987 1
# <strong>make && make install </strong>
d1121 1
a1121 1
Restoring your data will also help reduce fragmentation. To ensure you get all files, the best way of backing up is rebooting your system in single user mode. File systems do not need to be mounted to be backed up. Don't forget to mount root (/) r/w after rebooting in single user mode or your dump will fail when trying to write out dumpdates. Enter bsd -s at the boot> prompt for single user mode.
d1466 1
a1466 1
<small>$OpenBSD: faq14.html,v 1.64 2002/06/10 23:46:07 nick Exp $</small>
@


1.64
log
@
"put a boot floppy in your hard drive"  Neat trick.  Spotted by
Neil Groeber <neil.groeber@@btinternet.com>, thanks!
Also fixed a couple punctuation quirks.
@
text
@d512 3
a514 2
Swapping to a file is easiest and quickest way to get extra swap area's setup. This is not for users who
are currently using Soft Updates. (Which isn't enabled by default).
d1467 1
a1467 1
<small>$OpenBSD: faq14.html,v 1.63 2002/06/07 22:54:21 nick Exp $</small>
@


1.63
log
@
Updates to 14.7 and 4.3 reflecting the fact that many platforms
have boot partition size limitations.  Inspired by posting by
Theo de Raadt on Tech@@ on 5/26/2002.
@
text
@d951 1
a951 1
that comprise /boot in terms of the original "translated" geometry.)
d954 3
a956 2
translations.) To fix your boot block so that you can boot normally,
just put a boot floppy in your hard drive, and at the boot prompt,
d1466 1
a1466 1
<small>$OpenBSD: faq14.html,v 1.62 2002/06/07 19:31:05 fgsch Exp $</small>
@


1.62
log
@talk about setpid wrt fdisk; from Margarida Sequeira <niness@@devilness.org>.
nick@@ ok.
@
text
@d33 1
a33 1
<li><a href="#LargeDrive" >14.7 - What are the issues regarding large drives with OpenBSD? -i386 specific</a></li>
d866 1
a866 1
<h2>14.7 - What are the issues regarding large drives with OpenBSD? - i386 specific</h2>
d877 1
a877 6
will not be supported until new interface standard(s) are 
implemented in OpenBSD. 
(<a href="/donations.html">Donations</a> 
of 
<a href="/want.html">hardware</a> 
for development purposes welcome.)   
d883 2
a884 2
process has to utilize (and is thus limited by) the system's BIOS.  
The OpenBSD boot loaders 
d893 1
a893 1
on the disk within the BIOS addressable area, or within the first 8G 
d895 1
a895 1
computers, the root partition must be completely within the first 
d918 1
a918 1
BIOS-based boot loader was unable to fetch the file /bsd, and the 
d922 1
a922 1
To get OpenBSD to boot, /bsd must be within the BIOS's
d926 1
a926 1
<b>The entire root partition must be within the computer's BIOS 
d930 2
a931 3
OpenBSD is capable of accessing entire IDE drives (up to 128G), not just the 
space recognized by the system BIOS, but root had best be 
within the BIOS's range.
d1465 1
a1465 1
<small>$OpenBSD: faq14.html,v 1.61 2002/05/20 01:04:48 nick Exp $</small>
@


1.61
log
@
Updates for OpenBSD 3.1.  ok Miod@@
@
text
@d334 1
d359 1
d1471 1
a1471 1
<small>$OpenBSD: faq14.html,v 1.60 2002/04/18 19:49:04 nick Exp $</small>
@


1.60
log
@
fix some no longer accurate comments in #pciideErr.
Problem spotted by Matt Behrens <matt.behrens@@Kohler.Com>, thanks.
ok, miod@@
@
text
@d503 2
a504 6
After the release of OpenBSD 2.5 came
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&amp;sektion=8&amp;format=html">swapctl(8)</a>,
which made dealing with swap devices much easier. If you are on an OpenBSD 2.5 system, exchange swapctl
with swapon, and use pstat -s to list swap devices. Swapping to a file doesn't require a 
custom built kernel, although that can still be done, this faq will show you how to add 
swap space both ways.
d651 2
a652 1
writing performance.<br>
d663 1
a663 1
To enable Softupdates your kernel must have
d669 1
a669 5
compiled in.

<p>
This option is included in GENERIC kernels starting with OpenBSD 2.9. However, you still must enable it on a per mount point basis.
</p>
d672 8
a679 1
Starting with 2.9, enabling soft updates must be done with a mount time option, instead of using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs&amp;sektion=8">tunefs(8)</a>. Now, when mounting a partition with the  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&amp;sektion=8">mount(8)</a> utility, you can specify that you wish to have soft updates enabled on that partition. Below is a sample <i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&amp;sektion=5">/etc/fstab(5)</a></i> entry that has one partition <i>sd0a</i> that we wish to have mounted with soft updates.
d687 3
a689 12
If you are using an OpenBSD release earlier than 2.9 you need to boot into single-user mode:
</p>

<pre>
        boot> <strong>boot -s</strong>
        [snip]
        bsd# <strong>tunefs -s enable &lt;raw device&gt;</strong>
        bsd# <strong>reboot -n</strong>
</pre>

<p>
Note to sparc users: Do not enable soft updates on sun4 or sun4c machines.  These architectures support only a very limited amount of kernel memory and cannot use this feature.  However, sun4m machines are fine.
d711 6
d1418 3
a1420 2
At this time, the root partition can not be directly mirrored by RAIDframe on
OpenBSD, but this will be changing for the next release of OpenBSD.
d1469 1
a1469 1
<small>$OpenBSD: faq14.html,v 1.59 2002/03/20 03:54:33 nick Exp $</small>
@


1.59
log
@
Typos, grammar improvements, submitted by David Krause
<openbsd@@davidkrause.com>, including correction of loopback subnet from
rootix@@yahoo.fr.  Some fixes had also been submitted by Saad
Kadhi <bsdguy@@docisland.org>.
@
text
@d1365 4
a1368 2
PCI IDE DMA is unreliable. This is why Microsoft disables it by
default on the operating systems it ships.
d1471 1
a1471 1
<small>$OpenBSD: faq14.html,v 1.58 2002/02/16 02:18:20 nick Exp $</small>
@


1.58
log
@
Add section 14.12, #RAID, answering commonly asked questions about
OpenBSD RAID options.  ok ericj@@
@
text
@d811 1
a811 1
you are setting up a machine which you know has this problem, it is
d1469 1
a1469 1
<small>$OpenBSD: faq14.html,v 1.57 2002/02/16 01:48:15 nick Exp $</small>
@


1.57
log
@
HTML clean up, now passes test at http://validator.w3.org/
Work peformed by Henning Brauer (hostmaster@@bsws.de), many thanks!
ok ericj
@
text
@d38 1
d1394 70
d1469 1
a1469 1
<small>$OpenBSD: faq14.html,v 1.56 2002/01/27 22:44:34 nick Exp $</small>
@


1.56
log
@
Link Cleanup:  Retargeting links, test all links,
man page references, update and repair as needed.
ok ericj@@
@
text
@d1 1
d11 6
d22 1
a22 3
<p>
<h2><font color=#e00000>14.0 - Disk setup</font><hr></h2>
</p>
d24 2
a25 2
<p>
<ul><h3>Table of Contents</h3>
a38 1
</p> 
a40 1
<p>
a43 2
</p>   
<p>
d45 1
d51 1
a51 1
</p>
a52 1
<p>
d58 1
a58 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8)</a>
d70 1
a70 1
reading the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=5&format=html">disklabel(5)</a>
d79 1
a79 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8),</a>
d94 1
a94 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8),</a>
d114 1
a114 1
<ul><pre>
d145 1
a145 1
</pre></ul>
d163 1
a163 1
<ul><pre>
d182 1
a182 1
</pre></ul>
d197 1
a197 1
<ul><pre>
d200 1
a200 1
</pre></ul>
d218 1
a218 1
<ul><pre>
d247 1
a247 1
</pre></ul>
d255 1
a255 1
<ul><pre>
d257 1
a257 1
</pre></ul>
d263 1
a263 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8)</a>
d266 1
a266 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8)</a>
a269 1
<p>
d273 1
a273 1
</p>
d276 1
a276 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&apropos=0&sektion=8&arch=i386&format=html">fdisk(8)</a>
d293 2
a294 2
To just view your partition table using fdisk, use:<br>
<ul>
a296 1
</ul>
d298 1
a301 1
<ul>
a312 1
</ul>
d326 1
a326 2
<ul>
<PRE>
d344 1
a344 2
</PRE>
</ul>
d351 2
a352 1
<p>Here is an overview of the commands you can use when you choose the <b>-e</b> flag.<br>
a368 2
</p>
<br>
a369 1
<p>
a372 1
</p>
d376 1
a376 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&apropos=0&sektion=8&arch=i386&format=html">fdisk(8)</a>
d379 1
a379 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&apropos=0&sektion=8&format=html">
d385 1
a385 1
<ul><pre>
d387 1
a387 1
</pre></ul>
d391 1
a391 1
<ul><pre>
d405 1
a405 1
</pre></ul>
d413 1
a413 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bc&sektion=1">bc(1))</a>.  You get 2061.
d426 1
a426 1
<UL><PRE>
d428 1
a428 1
</PRE></UL>
d442 1
a442 2
"http://www.openbsd.org/cgi-bin/man.cgi?query=newfs
&apropos=0&sektion=8&format=html">newfs(8)</a>.
d445 3
a447 4
<p>
<ul><pre>
bsd# <strong>newfs wd1a </strong></pre></ul>
</p>
d451 1
a451 1
output from <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&sektion=8">dmesg(8)</a> to see what your disk was named by OpenBSD.)
d459 1
a459 1
<UL><PRE>
d461 1
a461 1
</PRE></UL>
d464 1
a464 1
Finally, add it to <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&sektion=5">/etc/fstab(5)</a>
d466 1
a466 1
<UL><PRE>/dev/wd1a /u ffs rw 1 1</PRE></UL>
d471 1
a471 1
Edit the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&sektion=5">/etc/fstab(5)</a> file to show that the /usr/local partition is now /dev/wd1a
d476 1
a476 1
<ul>
d478 1
a478 1
</ul>
a487 1
<p>
a490 1
</p>
d496 1
a496 1
csh's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=unlimit&sektion=1&format=html">unlimit(1)</a>,
d498 1
a498 1
sh's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ulimit&sektion=1&format=html">ulimit(1)</a>.)
d503 1
a503 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&sektion=8&format=html">swapctl(8)</a>, 
d516 1
a516 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&sektion=8&format=html">swapctl(8)</a>
d520 1
a520 1
<ul><pre>
d524 1
a524 1
</pre></ul>
d535 1
a535 1
the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd&sektion=1&format=html">dd(1)</a>
d539 1
a539 1
<ul><pre>
d544 1
a544 1
</pre></ul>
d551 1
a551 1
<ul><pre>
d554 1
a554 1
</pre></ul>
d560 1
a560 1
<ul><pre>
d566 1
a566 1
</pre></ul>
d574 1
a574 1
<ul><pre>
d578 1
a578 1
</pre></ul>
d588 1
a588 1
<ul><pre>
d590 1
a590 1
</pre></ul>
d597 1
a597 1
<ul><pre>
d602 1
a602 1
</pre></ul>
d609 1
a609 1
<ul><pre>
d613 1
a613 1
</pre></ul>
d618 1
a618 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&sektion=8&format=html">vnconfig(8)</a>.
d621 1
a621 1
<ul><pre>
d624 1
a624 1
</pre></ul>
d632 1
a632 1
<ul><pre>
d639 1
a639 1
</pre></ul>
a642 1
<p>
d646 1
a646 1
</p>
d656 1
a656 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fsck&sektion=8">fsck(8)</a> is still needed after 
d678 1
a678 1
Starting with 2.9, enabling soft updates must be done with a mount time option, instead of using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs&sektion=8">tunefs(8)</a>. Now, when mounting a partition with the  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&sektion=8">mount(8)</a> utility, you can specify that you wish to have soft updates enabled on that partition. Below is a sample <i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab&sektion=5">/etc/fstab(5)</a></i> entry that has one partition <i>sd0a</i> that we wish to have mounted with soft updates.
d681 1
a681 1
<ul><pre>
d683 1
a683 1
</pre></ul>
a688 1
<ul>
a694 1
</ul>
d700 1
a700 1
<p>
d704 1
a704 1
</p>
d731 1
a731 1
<UL><PRE>
d737 1
a737 1
</pre></ul>
d747 1
a747 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&sektion=8&arch=i386&format=html">fdisk(8)</a> 
d750 1
a750 1
<ul><pre>
d752 1
a752 1
</pre></ul>
d777 1
a777 1
<UL><PRE>
d779 1
a779 1
</pre></ul>
d807 1
a808 1
<h3>Avoiding the problem:</h3>
d834 1
a834 1
<ul><pre>
d837 1
a837 1
</pre></ul>
d842 1
a842 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8&arch=i386">installboot(8)</a>
d844 1
a844 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&sektion=8&arch=i386">biosboot(8)</a>,
d846 2
a847 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8&arch=i386">boot(8)</a>.  
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8&arch=i386">boot(8)</a> 
d849 1
a849 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&sektion=8&arch=i386">biosboot(8)</a>
d852 1
a852 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8&arch=i386">boot(8)</a>.
d854 1
a854 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8&arch=i386">boot(8)</a>, 
d856 1
a856 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8&arch=i386">installboot(8)</a>
d858 1
a858 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8&arch=i386">boot(8)</a>.
d863 1
a863 1
<p>
d867 1
a867 1
</p>
a868 1

d890 1
a890 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&sektion=8&arch=i386">biosboot(8)</a> 
d892 1
a892 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8&arch=i386">boot(8)</a>)
a939 1
<p>
a942 1
</p>
d969 1
a969 1
<ul>
d973 1
a973 1
</ul>
d982 1
a982 1
<ul><pre>
d984 1
a984 1
</pre></ul>
d990 1
a990 1
<ul><pre>
d995 1
a995 1
</pre></ul>
a996 1
<p>
a999 1
</p>
d1008 1
a1008 1
This information will assist you in using the standard <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&format=html">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&sektion=8&format=html">restore(8)</a> utilities provided with OpenBSD. A more advanced backup utility called "Amanda" is also available for backing up multiple servers to one tape drive. In most environments <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&format=html">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&sektion=8&format=html">restore(8)</a> is enough. However, if you have a need to backup multiple machines to one tape, Amanda might be worth investigating in the future.
d1018 1
a1018 1
Backing up to tape requires knowledge of where your file systems are mounted. You can determine how your filesystems are mounted using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&sektion=8">mount(8)</a> command at your shell prompt. You should get output similar to this:
d1021 1
a1021 1
<ul><pre>
d1025 1
a1025 1
</pre></ul>
d1035 1
a1035 1
<ul><pre>
d1041 1
a1041 1
</pre></ul>
d1051 1
a1051 1
<ul><pre>
d1055 1
a1055 1
</pre></ul>
d1061 1
a1061 1
<ul><pre>
d1067 1
a1067 1
</pre></ul>
d1070 1
a1070 1
You can review the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&format=html">dump(8)</a> man page to learn exactly what each command line switch does. Here is a brief description of the parameters used above:
d1085 1
a1085 1
The <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mt&sektion=1">mt(1)</a> command is used at the end to rewind the drive. Review the mt man page for more options (such as eject).
d1092 1
a1092 1
<ul><pre>
d1094 1
a1094 1
</pre></ul>
d1104 1
a1104 1
<ul><pre>
d1115 1
a1115 1
</pre></ul>
d1118 1
a1118 1
If scheduled nightly backups are desired, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cron&sektion=8&format=html">cron(8)</a> could be used to launch your backup script automatically.
d1140 1
a1140 1
<ul><pre>
d1142 1
a1142 1
</pre></ul>
d1152 1
a1152 1
<ul><pre>
d1154 1
a1154 1
</pre></ul>
d1184 1
a1184 1
Using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&sektion=8&arch=i386&format=html">fdisk(8)</a> command, create a primary OpenBSD partition on this newly installed drive. Example:
d1187 1
a1187 1
<ul><pre>
d1189 1
a1189 1
</pre></ul>
d1200 1
a1200 1
<ul><pre>
d1202 1
a1202 1
</pre></ul>
d1213 1
a1213 1
<ul><pre>
d1216 1
a1216 1
</pre></ul>
d1223 1
a1223 1
<ul><pre>
d1225 1
a1225 1
</pre></ul>
d1232 1
a1232 1
<ul><pre>
d1235 1
a1235 1
</pre></ul>
d1242 1
a1242 1
<ul><pre>
d1244 1
a1244 1
</pre></ul>
d1251 1
a1251 1
<ul><pre>
d1254 1
a1254 1
</pre></ul>
d1261 1
a1261 1
<ul><pre>
d1264 1
a1264 1
</pre></ul>
d1271 1
a1271 1
<ul><pre>
d1273 1
a1273 1
</pre></ul>
d1284 1
a1284 1
<ul><pre>
d1286 1
a1286 1
</pre></ul>
d1293 1
a1293 1
<ul><pre>
d1301 1
a1301 1
</pre></ul>
a1312 1
<p>
a1315 1
</p>
d1319 1
a1319 1
you must configure a <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnd&sektion=4">vnd(4)</a> device. For example, If you have an ISO image located at <i>/tmp/ISO.image</i>, you would take the following steps to mount the image.
a1321 1
<ul>
a1331 1
</ul>
a1340 1
<ul>
a1350 1
</ul>
d1354 1
a1354 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&sektion=8">vnconfig(8)</a> man page.
a1357 1
<p>
d1361 1
a1361 1
</p>
d1378 1
a1378 1
<ul><pre>
d1380 1
a1380 1
</pre></ul>
d1393 1
a1394 8
<font color= "#0000e0">
<a href= "index.html">[Back to Main Index]</a>
<a href= "faq13.html">[To Section 13.0 - IPsec]</a>
</font>
</p>

<p>
<hr>
d1398 1
a1398 1
<small>$OpenBSD: faq14.html,v 1.55 2002/01/21 20:28:25 nick Exp $</small>
@


1.55
log
@
Update copyright notice to 2002.  ok ericj@@
@
text
@d89 1
a89 1
labels. This comes (for i386 users) directly after using <a href="#14.2">fdisk(1)</a>.
d103 1
a103 1
reading <a href="faq4.html#4.3">faq4.3</a>. For servers it is recommended
d818 1
a818 1
<a href="ftp://ftp.openbsd.org/pub/OpenBSD/2.9/i386/INSTALL.linux">INSTALL.linux</a>
d856 1
a856 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">installboot(8)</a>
d858 1
a858 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">biosboot(8)</a>,
d860 2
a861 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">boot(8)</a>.  
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">boot(8)</a> 
d863 1
a863 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&apropos=0&sektion=8&manpath=OpenBSD+Current&arch=i386&format=html">biosboot(8)</a>
d866 1
a866 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">boot(8)</a>.
d868 1
a868 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">boot(8)</a>, 
d870 1
a870 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">installboot(8)</a>
d872 1
a872 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">boot(8)</a>.
d874 1
a874 1
See <a href="#14.8">section 14.8</a> for more info.
d905 1
a905 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=biosboot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">biosboot(8)</a> 
d907 1
a907 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">boot(8)</a>)
d1211 1
a1211 1
See <a href="#14.2">fdisk FAQ</a> for more info.
d1224 1
a1224 1
(Don't forget swap, see <a href="#14.1">disklabel FAQ</a> for more info)
d1431 1
a1431 1
<small>$OpenBSD: faq14.html,v 1.54 2002/01/13 00:00:32 ericj Exp $</small>
@


1.54
log
@
change followed link color, so it is more visible in all netscape,
IE, konqueror

from Nick Holland <nick@@holland-consulting.net>
@
text
@d9 1
a9 1
<meta name= "copyright"     content= "This document copyright 1998-2001 by OpenBSD.">
d1431 1
a1431 1
<small>$OpenBSD: faq14.html,v 1.53 2002/01/12 01:39:29 ericj Exp $</small>
@


1.53
log
@
re-target the faq.
Change internal links from #10.XX -> #somethingmeaningfull
This will probobly break some external links to us, but will allow
us greater mobility in moving internal things around without breaking
links in the future.

work by Nick Holland <nick@@holland-consulting.net>
@
text
@d12 1
a12 1
<body bgcolor= "#ffffff" text= "#000000" link= "#23238E">
d1431 1
a1431 1
<small>$OpenBSD: faq14.html,v 1.52 2001/12/30 11:37:25 jufi Exp $</small>
@


1.52
log
@
trying to let the FAQ be more 3.0-compliant.
much more work is left to be done.
@
text
@d21 6
a26 6
<li><a href="#14.1">14.1 - Using OpenBSD's disklabel</a></li>
<li><a href="#14.2">14.2 - Using OpenBSD's fdisk</a></li>
<li><a href="#14.3">14.3 - Adding extra disks in OpenBSD</a></li>
<li><a href="#14.4">14.4 - How to swap to a file</a></li>
<li><a href="#14.5">14.5 - Soft Updates</a></li>
<li><a href="#14.6">14.6 - When I boot after installation of OpenBSD/i386, it stops at 
d28 5
a32 5
<li><a href="#14.7">14.7 - What are the issues regarding large drives with OpenBSD? -i386 specific</a></li>
<li><a href="#14.8">14.8 - Installing Bootblocks - i386 specific</a></li>
<li><a href="#14.9">14.9 - Preparing for disaster: Backing up and Restoring from tape.</a></li>
<li><a href="#14.10">14.10 - Mounting disk images in OpenBSD</a></li>
<li><a href="#14.11">14.11 - Help! I'm getting errors with PCIIDE!</a></li>
d37 2
d41 1
a41 1
   
d45 3
a47 3
<li><a href="#14.1.1">What is disklabel?</a>
<li><a href="#14.1.2">disklabel during the OpenBSD install</a>
<li><a href="#14.1.3">Common disklabel uses.</a>
d52 1
a52 1
<a name="14.1.1"></a>
d84 1
a84 1
<a name="14.1.2"></a>
d208 1
a208 1
<a name="14.1.3"></a>
d270 1
d376 1
d498 1
d654 3
a656 1
<p><a name="14.5"></a>
d715 1
d876 1
d878 1
d956 1
d1015 1
d1333 1
d1384 1
d1431 1
a1431 1
<small>$OpenBSD: faq14.html,v 1.50 2001/10/20 16:51:39 horacio Exp $</small>
@


1.51
log
@Replaced obsolete 14.7 with info about large hard drives on i386
systems.  ok jufi@@
@
text
@d751 1
a751 1
sites, in the directory 2.9/tools/booteasy/Boot.bin, and can be
d757 1
a757 1
# <b>fdisk -i -f /mnt/2.9/tools/booteasy/Boot.bin wd0</b>
d760 1
a760 1
This assumes you have a the 2.9 CD mounted on /mnt and that you
@


1.50
log
@typos
man pages
@
text
@d28 1
a28 1
<li><a href="#14.7">14.7 - How do I get a dmesg from a boot floppy?</a></li>
d870 1
a870 1
<h2>14.7 - How do I get a dmesg from a boot floppy?</h2>
d873 41
a913 3
RAMDISK images (boot floppies) do not ship with the <i>dmesg</i> utility.
They do, however, have the <code>/kern</code> filesystem mounted. To copy 
the dmesg information to a file, do a:
d915 9
a923 4

<ul><pre>
# <strong>cat /kern/msgbuf >mydmesg</strong>
</pre></ul>
d925 19
a943 6
Boot disks also have <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=more&sektion=1">more(1)</a> to page through the output:
<pre><ul>
# <strong>more /kern/msgbuf</strong>
</ul></pre>

Also check with <a href= "faq4.html#4.5">section 4.5</a>
d1417 1
a1417 1
<small>$OpenBSD: faq14.html,v 1.49 2001/10/18 21:10:57 nick Exp $</small>
@


1.49
log
@Rewrite of 14.6 ("Using Drive: 0 Partition: 3")
ok jufi@@, weingart@@, kjell@@
@
text
@d200 1
a200 1
<strong>*NOTE*</strong> - For user's with large drives. If your bios isn't able to support a drive of that size
d211 2
a212 2
need to use disklabel are when adding, removing or restructuring your disks. One of the first things
you will need to do is view your current disklabel. To do this simply type:
d290 1
a290 1
To just view your partition table using fdisk just use:<br>
d415 3
a417 2
terms is 3000 megabytes.  So divide 6185088/3000 (use bc(1)).  You get 2061.
So to make up partition sizes for a, d, e, f, g, ... just multiply X*2061
d422 2
a423 2
and the offset of each partition (Except the C partition, since it has no
play into this equation.)
d456 1
a456 1
output from dmesg(1) to see what your disk was named by OpenBSD.)
d469 1
a469 1
Finally, add it to /etc/fstab
d476 1
a476 1
Edit the /etc/fstab file to show that the /usr/local partition is now /dev/wd1a
d521 1
a521 1
To start out, you can see how much swap you are currently have and how much you are using with the
d660 2
a661 1
As Soft Updates are still in development as a whole, an fsck is still needed after 
d683 1
a683 1
Starting with 2.9, enabling soft updates must be done with a mount time option, instead of using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs&sektion=8">tunefs(8)</a>. Now, when mounting a partition with the  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&sektion=8">mount(8)</a> utility, you can specify that you wish to have soft updates enabled on that partition. Below is a sample <i>/etc/fstab</i> entry that has one partition <i>sd0a</i> that we wish to have mounted with soft updates.
d816 1
a816 1
you are setting up machine which you know has this problem, it is
d850 1
a850 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8%2fi386&apropos=0&manpath=OpenBSD+Current&arch=i386">biosboot</a>,
d882 1
a882 1
Boot disks also have 'more' to page through the output:
d959 1
a959 1
This information will assist you in using the standard <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&format=html">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&sektion=8&format=html">restore(8)</a> utilities provided with OpenBSD. A more advanced backup utility called "Amanda" is also available for backing up multiple servers to one tape drive. In most environments <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&format=html">dump(8)</a>/<a href=http://www.openbsd.org/cgi-bin/man.cgi?query=restore&sektion=8&format=html">restore(8)</a> is enough. However if you have a need to backup multiple machines to one tape, Amanda might be worth investigating in the future.
d969 1
a969 1
Backing up to tape requires knowledge of where your file systems are mounted. You can determine how your filesystems are mounted using the "mount" command at your shell prompt. You should get output similar to this:
d1021 1
a1021 1
You can review the dump man page to learn exactly what each command line switch does. Here is a brief description of the parameters used above:
d1036 1
a1036 1
The mt command is used at the end to rewind the drive. Review the mt man page for more options (such as eject).
d1361 1
a1361 1
<small>$OpenBSD: faq14.html,v 1.48 2001/10/03 14:52:56 jufi Exp $</small>
@


1.48
log
@- i.e.
@
text
@d27 1
a27 1
"Using partition 3 id 0".</a></li>
d707 1
a707 1
<h2>14.6 -  When I boot after installation of OpenBSD/i386, it stops at "Using partition 3 id 0".</h2>
d710 25
a734 11
This means that your MBR (Master Boot Record) was not installed properly
or that your BIOS' idea of the hard disk geometry is not compatible with
your current MBR. To solve this,
first try to reinstall the OpenBSD boot blocks. To do so use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&sektion=8&arch=i386&format=html">fdisk(8)</a> and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8&arch=i386&format=html">installboot(8)</a>.
<P>
First, to get up and running, you will need to use your boot disk as a bootstrap.
After you put the install disk in, and before it loads the kernel and
ramdisk,
you get a <tt>boot&gt;</tt> prompt from the floppy disk.  Use it to boot OpenBSD off of your hard disk.
d736 45
a780 10
booting...
OpenBSD boot 1.2.3
probing hd0 fd0...
boot&gt; <b>boot hd0a:/bsd</b>
</pre></ul>
Now that you are booted, and assuming you have dedicated your entire
hard disk to OpenBSD, re-initialize the Master Boot Record with fdisk(8).
(If you have partitions on your hard disk for operating systems other
then OpenBSD, you cannot use <tt>installboot</tt> anyways, you must look
at another option such as OS-BS, described below.)
d782 11
a792 8
# <b>fdisk -i wd0</b>
</PRE></UL>
Now, you need to write the boot blocks again.
<UL><PRE>
# <strong>cp /usr/mdec/boot /boot</strong>
# <strong>/usr/mdec/installboot -v /boot /usr/mdec/biosboot wd0</strong>
</PRE></UL>
Finally, reboot and test it out.
d794 1
a794 6
If this doesn't work you still have a few more options. So, luck hasn't
run out yet. The first is to use a bootloader such as OS-BS. The OpenBSD
cd has the os-bs bootloader included in the tools directory. If you didn't
purchase a CD-ROM, you can download os-bs from any of the OpenBSD ftp
sites.  The file to grab is
<tt>pub/OpenBSD/2.8/tools/osbs135.exe</tt>
d797 9
d807 2
a808 3
Also, take some time to look through the OS-BS web pages at
<a href= "http://www.prz.tu-berlin.de/~wolf/os-bs.html">
          http://www.prz.tu-berlin.de/~wolf/os-bs.html</a>
d812 12
a823 2
There are also other commercial bootloaders or lilo that you can use for
multi-booting.
d826 1
d828 5
a832 1
Here is a simple outline of how to get lilo onto your system.
a833 1

d835 9
a843 6
<ul>
<li>Boot a DOS floppy and do a fdisk /MBR. Make sure you do that on the
drive you'll be booting from.</li>
<li>Boot from a linux disk and install LILO &amp; chain it to your OpenBSD
boot block.</li>
</ul>
a844 1

d846 17
a862 1
For further instructions read <a href="ftp://ftp.openbsd.org/pub/OpenBSD/2.8/i386/INSTALL.linux">INSTALL.linux</a>
d864 1
a864 1

a865 1

d1359 1
a1359 1
<small>$OpenBSD: faq14.html,v 1.47 2001/10/03 14:49:05 jufi Exp $</small>
@


1.47
log
@Soft Updates section enhanced/corrected.
@
text
@d662 1
a662 1
More internals and details about Soft Updates can i.e. be found in the papers of
d1273 1
a1273 1
<small>$OpenBSD: faq14.html,v 1.46 2001/09/19 11:45:54 espie Exp $</small>
@


1.46
log
@just because a lot of moronic browsers let you get away with it
doesn't mean you should be able to close
<ul><pre>
with
</ul></pre>
@
text
@d25 1
a25 1
<li><a href="#14.5">14.5 - Soft-updates</a></li>
d519 1
a519 1
are currently using Softupdates. (Which isn't enabled by default).
d649 1
a649 1
<h2>14.5 - Soft-updates</h2>
d654 1
a654 1
"soft updates". This is based on an idea proposed by Greg Ganger and Yale
d658 7
a664 1
writing performance.
d674 1
d677 1
a677 1
This option is included in GENERIC kernels starting with OpenBSD 2.9. However, you still must enable it on a per disk partition basis.
d1273 1
a1273 1
<small>$OpenBSD: faq14.html,v 1.45 2001/08/25 09:31:33 jufi Exp $</small>
@


1.45
log
@
copyright extended to 2001
@
text
@d197 1
a197 1
</ul></pre>
d559 1
a559 1
</ul></pre>
d583 1
a583 1
</ul></pre>
d719 1
a719 1
</UL></PRE>
d880 2
a881 2
/dev/sd0h on /usr type ffs (local)  
</ul></pre>
d896 2
a897 2
/dev/sd0h on /usr type ffs (local)  
</ul></pre>
d911 1
a911 1
</ul></pre>
d923 1
a923 1
</ul></pre>
d950 1
a950 1
</ul></pre>
d970 2
a971 2
echo                      
</ul></pre>
d998 1
a998 1
</ul></pre>
d1010 1
a1010 1
</ul></pre>
d1024 1
a1024 1
If you have prepared properly, replacing a disk and restoring your data from tape can be a very quick process. The standard OpenBSD install/boot floppy already contains the required restore utility as well as the binaries required to partition and make your new drive bootable. In most cases, this floppy and your most recent dump tape is all you'll need to get back up and running. 
d1045 1
a1045 1
</ul></pre>
d1052 1
a1052 1
<p>  
d1058 1
a1058 1
</ul></pre>
d1072 1
a1072 1
</ul></pre>
d1081 1
a1081 1
</ul></pre>
d1085 1
a1085 1
Change into that mounted root file system and start the restore process. Example: 
d1091 1
a1091 1
</ul></pre>
d1100 1
a1100 1
</ul></pre>
d1110 1
a1110 1
</ul></pre>
d1120 1
a1120 1
</ul></pre>
d1129 1
a1129 1
</ul></pre>
d1142 1
a1142 1
</ul></pre>
d1157 1
a1157 1
</ul></pre>
d1266 1
a1266 1
<small>$OpenBSD: faq14.html,v 1.44 2001/08/08 21:06:32 jsyn Exp $</small>
@


1.44
log
@giant spelling/grammar clean-up; ok millert@@
@
text
@d9 1
a9 1
<meta name= "copyright"     content= "This document copyright 1998,1999 by OpenBSD.">
d1266 1
a1266 1
<small>$OpenBSD: faq14.html,v 1.43 2001/08/07 18:42:48 heko Exp $</small>
@


1.43
log
@o Reference disklabel(8) manual page first on the disklabel FAQ
  entry
o Reference disklabel(8) manual page when advising to use disklabel
  to view ext2fs partition list on FAQ 9
ok jufi@@
@
text
@d487 1
a487 1
empty directory /usr/local. Then reboot the system, and whala!! the files are there!
d1266 1
a1266 1
<small>$OpenBSD$</small>
@


1.42
log
@
cleanup and referencing disklabel(8)
patch by mpech@@
@
text
@d52 7
a58 1
   
d1266 1
a1266 1
<small>$OpenBSD: faq14.html,v 1.41 2001/06/09 16:39:05 pvalchev Exp $</small>
@


1.41
log
@typos, spelling and link fixes; dstoikov@@biosgroup.com
@
text
@d21 1
a21 1
<li><a href="#14.1">14.1 - Using OpenBSD's Disklabel</a></li>
d38 1
a38 1
<h2>Using OpenBSD's Disklabel</h2>
d43 3
a45 3
<li><a href="#14.1.1">What is disklabel(8)?</a>
<li><a href="#14.1.2">Disklabel during the OpenBSD install</a>
<li><a href="#14.1.3">Common disklabel(8) uses.</a>
d51 1
a51 1
<h3>What is disklabel(8)?</h3>
d69 5
a73 4
such as Windows NT or DOS can see.) With disklabel(8), you use one of   
these 'primary' partitions to store *all* of your OpenBSD partitions  
(eg. 'swap', '/', '/usr' and '/var'). And you still have 3 more
partitions available for other OSs!
d77 1
a77 1
<h3>disklabel(8) during OpenBSD's install</h3>
d84 4
a87 3
your mountpoints from within disklabel(8), but this isn't completely
necessary considering you will be prompted later to confirm you choices.
But it does make your install go just a little smoother.
d253 5
a257 3
pertaining to disklabel. You can even view the entire disklabel(8) man page with the 'M' command. From
this prompt, you will do all of your adding, deleting and changing of partitions. For additional
information read the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8)</a>
d1260 1
a1260 1
<small>$OpenBSD: faq14.html,v 1.40 2001/05/06 23:51:45 ericj Exp $</small>
@


1.40
log
@improvments to softdep section; naddy@@
@
text
@d1240 1
a1240 1
If OpenBSD does not succesfully downgrade, or the process causes
d1256 1
a1256 1
<small>$OpenBSD: faq14.html,v 1.39 2001/05/06 14:39:37 jufi Exp $</small>
@


1.39
log
@
Better.
@
text
@d652 1
a652 2
To enable Softupdates your kernel must have option<br>
<b>NOTE:</b> This option is on by default after the release of OpenBSD 2.7 and will be default in 2.8. However, you still must enable it on a per disk partition basis.
d660 5
a664 1
Starting with 2.9, enabling soft updates can be done with a mount time option, instead of using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tunefs&sektion=8">tunefs(8)</a>. Now, when mounting a partition with the  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount&sektion=8">mount(8)</a> utility, you can specify that you wish to have soft updates enabled on that partition. Below is a sample <i>/etc/fstab</i> entry that has one partition <i>sd0a</i> that we wish to have mounted with soft updates.
d685 4
d1256 1
a1256 1
<small>$OpenBSD: faq14.html,v 1.38 2001/05/05 04:43:03 ericj Exp $</small>
@


1.38
log
@
add a section discribing how openbsd deals with PCIIDE. from costa@@
@
text
@d1233 1
a1233 1
If OpenBSD does not succesfully downgrade, or in the process causes
d1249 1
a1249 1
<small>$OpenBSD: faq14.html,v 1.37 2001/05/05 01:48:48 ericj Exp $</small>
@


1.37
log
@update softupdates faq
@
text
@d32 1
d1201 36
d1249 1
a1249 1
<small>$OpenBSD: faq14.html,v 1.36 2001/03/26 17:14:09 todd Exp $</small>
@


1.36
log
@spelling
@
text
@d660 9
a668 1
then you need to boot into single-user mode:
a671 1
<strong>
d673 1
a673 1
        boot> boot -s
d675 2
a676 2
        bsd# tunefs -s enable &lt;raw device&gt;
        bsd# reboot -n
a677 1
</strong>
d1212 1
a1212 1
<small>$OpenBSD: faq14.html,v 1.35 2001/03/07 21:28:30 jufi Exp $</small>
@


1.35
log
@
fdisk main page -> fdisk man page
@
text
@d109 1
a109 1
partitions properly (ie. seperating /,  /usr, /tmp, /var, /usr/local, and other
d1016 1
a1016 1
Using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&sektion=8&arch=i386&format=html">fdisk(8)</a> command, create a primary OpenBSD partition on this newly intalled drive. Example:
d1206 1
a1206 1
<small>$OpenBSD: faq14.html,v 1.34 2001/01/27 22:19:47 ericj Exp $</small>
@


1.34
log
@
some html cleanup; from mpech@@prosoft.org.lv
@
text
@d261 1
a261 1
First be sure to check the fdisk main page. 
d1206 1
a1206 1
<small>$OpenBSD: faq14.html,v 1.33 2001/01/14 19:41:02 millert Exp $</small>
@


1.33
log
@Fix fstab swap entry; cazz@@wezl.org
@
text
@d133 1
a133 1
</ul></pre>
d170 1
a170 1
</ul></pre>
d235 1
a235 1
</ul></pre>
d245 1
a245 1
</ul></pre>
a247 1
<p>
d257 1
a257 1
<a name="14.2">
a335 1
</p>
d362 1
a362 1
<a name="14.3">
d377 1
a377 1
<UL><PRE>
d379 1
a379 1
</ul></pre>
d383 1
a383 1
<UL><PRE>
d397 1
a397 1
</PRE></ul>
d439 1
a439 1
bsd# <strong>newfs wd1a </strong></ul></pre>
d482 1
a482 1
<a name="14.4">
d538 1
a538 1
</ul></pre>
d560 1
a560 1
</ul></pre>
d584 1
a584 1
</ul></pre>
d596 1
a596 1
</ul></pre>
d607 1
a607 1
</ul></pre>
d618 1
a618 1
</ul></pre>
d633 1
a633 1
</ul></pre>
d675 1
a675 1
<a name="14.6">
d706 2
a707 2
# <strong>cp /usr/mdec/boot /boot</li></strong>
# <strong>/usr/mdec/installboot -v /boot /usr/mdec/biosboot wd0</li></strong>
d750 1
a750 1
<a name="14.7">
d759 1
a759 1
<pre><ul>
d771 1
a771 1
<a name="14.8">
d1206 1
a1206 1
<small>$OpenBSD: faq14.html,v 1.32 2001/01/13 20:35:36 ericj Exp $</small>
@


1.32
log
@
FAQ on mounting disk images.. requested by Diana Eichert <deichert@@wrench.com>
@
text
@d573 1
a573 1
/var/swap /var/swap sw 0 0
d1208 1
a1208 1
<small>$OpenBSD: faq14.html,v 1.31 2001/01/07 17:16:56 jufi Exp $</small>
@


1.31
log
@
More typos.
@
text
@d31 1
d1148 49
d1208 1
a1208 1
<small>$OpenBSD: faq14.html,v 1.30 2001/01/06 20:57:15 jufi Exp $</small>
@


1.30
log
@
More typos.
@
text
@d930 1
a930 1
You may have noticed that when backing up, the tape drive is accessed as device name "nrst0" instead of the "st0" name that is seen in dmesg. When you access st0 as nrst0 you are accessing the same physical tape drive but telling the drive to not rewind at the end of the job and access the device in raw mode. To back up multiple file systems to a single tape, be sure you use the non-rewind device, if you use a rewind device (rst0) to back up multiple file systems, you'll end up overwriting the prior filesystem with the next one dump tries to write to tape. You can find a more elaborate decription of various tape drive devices in the dump man page.
d1038 1
a1038 1
Don't forget swap, see <a href="#14.1">disklabel FAQ</a> for more info)
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.29 2001/01/06 19:10:11 jufi Exp $</small>
@


1.29
log
@
Typo.
@
text
@d717 1
a717 1
<tt>pub/OpenBSD/2.6/tools/osbs135.exe</tt>
d819 1
a819 1
If a newer version of bootblocks are required, you will need to compile these yourself. To do so simply.
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.28 2001/01/05 19:02:59 todd Exp $</small>
@


1.28
log
@more >aixelsid< fixes
@
text
@d645 1
a645 1
Patt that imposing a partial ordering on the buffer cache opertions would
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.27 2001/01/05 18:52:31 todd Exp $</small>
@


1.27
log
@o fix typo reported by Kevin Sindhu <kevin@@tgivan.com> .. Thanks!
o fix spacing problem
@
text
@d117 2
a118 2
&lt; <strong>d a</strong>
&lt; <strong>a a</strong>
d127 1
a127 1
&lt; <strong>a b</strong>
d151 1
a151 1
&lt; <strong>a d</strong>
d160 1
a160 1
&lt; <strong>a e</strong>
d185 2
a186 2
&lt; <strong>w</strong>
&lt; <strong>q</strong>
d318 1
a318 1
fdisk: 1&lt; <strong>help</strong>
d332 1
a332 1
fdisk: 1&lt; 
d516 1
a516 1
ericj@@oshibana&lt; <strong>swapctl -l</strong>
d535 1
a535 1
ericj@@oshibana&lt; <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d547 2
a548 2
ericj@@oshibana&lt; <strong>sudo chmod 600 /var/swap</strong>
ericj@@oshibana&lt; <strong>sudo swapctl -a /var/swap</strong>
d556 1
a556 1
ericj@@oshibana&lt; <strong>swapctl -l</strong>
d570 1
a570 1
ericj@@oshibana&lt; <strong>cat /etc/fstab</strong>
d593 1
a593 1
ericj@@oshibana&lt; <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d605 1
a605 1
ericj@@oshibana&lt; <strong>cat /etc/fstab</strong>
d617 1
a617 1
ericj@@oshibana&lt; <strong>sudo vnconfig -c -v vnd0 /var/swap</strong>
d628 2
a629 2
ericj@@oshibana&lt; <strong>sudo swapctl -a /dev/vnd0c</strong>
ericj@@oshibana&lt; <strong>swapctl -l</strong>
d808 1
a808 1
the boot&lt; prompt you may issue the &quot;machine diskinfo&quot; (or
d926 1
a926 1
st0 at scsibus0 targ 5 lun 0: &gt;ARCHIVE, Python 28388-XXX, 5.28&lt;
d1101 1
a1101 1
Remove the install/boot floppy from the drive and reboot your system. At the OpenBSD boot&lt; prompt, issue the following command:
d1105 1
a1105 1
boot&lt; <b>bsd -s</b>
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.26 2000/12/26 22:35:59 horacio Exp $</small>
@


1.26
log
@add arch=i386 to i386 dependant man pages links
vnconfig(1) -> vnconfig(8)
@
text
@d667 1
a667 1
        boot>boot -s
d695 1
a695 1
boot&lt; <b>boot hd0a:/bsd</b>
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.25 2000/11/30 05:58:28 ericj Exp $</small>
@


1.25
log
@make these link off the ftp site as well
@
text
@d52 1
a52 1
Disklabel's are created to allow an efficient interface between your disk
d117 2
a118 2
> <strong>d a</strong>
> <strong>a a</strong>
d127 1
a127 1
> <strong>a b</strong>
d151 1
a151 1
> <strong>a d</strong>
d160 1
a160 1
> <strong>a e</strong>
d185 2
a186 2
> <strong>w</strong>
> <strong>q</strong>
d206 1
a206 1
# <strong>disklabel wd0</strong> <----- Or whatever disk device you'd like to view
d262 1
a262 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&apropos=0&sektion=8&format=html">fdisk(8)</a>
d318 1
a318 1
fdisk: 1> <strong>help</strong>
d332 1
a332 1
fdisk: 1> 
d369 1
a369 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&apropos=0&sektion=8&format=html">fdisk(8)</a>
d516 1
a516 1
ericj@@oshibana> <strong>swapctl -l</strong>
d535 1
a535 1
ericj@@oshibana> <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d547 2
a548 2
ericj@@oshibana> <strong>sudo chmod 600 /var/swap</strong>
ericj@@oshibana> <strong>sudo swapctl -a /var/swap</strong>
d556 1
a556 1
ericj@@oshibana> <strong>swapctl -l</strong>
d570 1
a570 1
ericj@@oshibana> <strong>cat /etc/fstab</strong>
d593 1
a593 1
ericj@@oshibana> <strong>sudo dd if=/dev/zero of=/var/swap bs=1k count=32768</strong>
d605 1
a605 1
ericj@@oshibana> <strong>cat /etc/fstab</strong>
d613 1
a613 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=vnconfig&sektion=1&format=html">vnconfig(1)</a>.
d617 1
a617 1
ericj@@oshibana> <strong>sudo vnconfig -c -v vnd0 /var/swap</strong>
d628 2
a629 2
ericj@@oshibana> <strong>sudo swapctl -a /dev/vnd0c</strong>
ericj@@oshibana> <strong>swapctl -l</strong>
d684 2
a685 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&sektion=8&format=html">fdisk(8)</a> and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8&format=html">installboot(8)</a>.
d695 1
a695 1
boot> <b>boot hd0a:/bsd</b>
d739 1
a739 1
<li>Boot from a linux disk and install LILO & chain it to your OpenBSD
d745 1
a745 1
For further instructions read <a href=ftp://ftp.openbsd.org/pub/OpenBSD/2.8/i386/INSTALL.linux"">INSTALL.linux</a>
d808 1
a808 1
the boot> prompt you may issue the &quot;machine diskinfo&quot; (or
d841 1
a841 1
This information will assist you in using the standard <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&format=html">dump(8)</a>/<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=restore&sektion=8&format=html">restore(8)</a> utilities provided with OpenBSD. A more advanced backup utility called "Amanda" is also available for backing up multiple servers to one tape drive. In most environments <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dump&sektion=8&sektion=html">dump(8)</a>/<a href=http://www.openbsd.org/cgi-bin/man.cgi?query=restore&sektion=8&format=html">restore(8)</a> is enough. However if you have a need to backup multiple machines to one tape, Amanda might be worth investigating in the future.
d926 1
a926 1
st0 at scsibus0 targ 5 lun 0: <ARCHIVE, Python 28388-XXX, 5.28>
d1017 1
a1017 1
Using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fdisk&sektion=8&format=html">fdisk(8)</a> command, create a primary OpenBSD partition on this newly intalled drive. Example:
d1101 1
a1101 1
Remove the install/boot floppy from the drive and reboot your system. At the OpenBSD boot> prompt, issue the following command:
d1105 1
a1105 1
boot> <b>bsd -s</b>
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.24 2000/09/14 19:28:19 ericj Exp $</small>
@


1.24
log
@update info on softupdates
@
text
@d745 1
a745 1
For further instructions read <a href="INSTALL.linux">INSTALL.linux</a>
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.23 2000/08/11 16:42:55 jufi Exp $</small>
@


1.23
log
@
Typos.
@
text
@d652 2
a653 1
To enable Softupdates your kernel must have option
d1158 1
a1158 1
<small>$OpenBSD: faq14.html,v 1.22 2000/08/10 10:38:08 jufi Exp $</small>
@


1.22
log
@
Simple typo.
@
text
@d248 1
a248 1
This will bring you to a prompt, the same as the one that you used during the OpenBSD install. Probobly
d1157 1
a1157 1
<small>$OpenBSD: faq14.html,v 1.21 2000/04/07 20:17:49 ericj Exp $</small>
@


1.21
log
@minor cleanups
@
text
@d93 1
a93 1
creating one mountpoint at / will probobly suffice. When initially
d1157 1
a1157 1
<small>$OpenBSD: faq14.html,v 1.20 2000/04/05 21:49:27 ericj Exp $</small>
@


1.20
log
@add some links and fix restore(8) usage
@
text
@d547 1
d1157 1
a1157 1
<small>$OpenBSD: faq14.html,v 1.19 2000/03/25 00:05:04 wvdputte Exp $</small>
a1160 1

@


1.19
log
@A lot of typo's and grammar errors, spotted by Horacio and me
@
text
@d972 1
a972 1
# <b>/sbin/restore -tvsf 1 /dev/rst0</b>
d984 1
a984 1
# <b>/sbin/restore -tvsf 2 /dev/rst0 > /home/me/list.txt</b>
d1065 1
a1065 1
shell# <b>restore rsf 1 /dev/rst0</b>
d1126 1
a1126 1
shell# <b>mount /dev/sd0h /usr; cd /usr; restore rsf 2 /dev/rst0</b>
d1129 3
a1131 3
shell#	<b>mount /dev/sd0d /var; cd /var; restore rsf 2 /dev/rst0</b>
shell#	<b>mount /dev/sd0e /home; cd /home; restore rsf 3 /dev/rst0</b>
shell#	<b>mount /dev/sd0h /usr; cd /usr; restore rsf 4 /dev/rst0</b>
d1156 1
a1156 1
<small>$OpenBSD: faq14.html,v 1.18 2000/03/05 03:33:05 ericj Exp $</small>
@


1.18
log
@
14.9 - Preparing for disaster: Backing up and Restoring from tape
Very informative section from Scott <sin@@bytebandits.com>
@
text
@d180 1
a180 1
Once all your labels have been created all thats left to do is write the labels to disk, and move on in
d1156 1
a1156 1
<small>$OpenBSD: faq14.html,v 1.17 2000/03/03 00:54:56 chris Exp $</small>
@


1.17
log
@softupdates are not experimental anymore
@
text
@d30 1
d828 317
d1156 1
a1156 1
<small>$OpenBSD: faq14.html,v 1.16 2000/02/12 21:35:42 aaron Exp $</small>
@


1.16
log
@permenant -> permanent
@
text
@a640 6
<strong>
Softupdates are experimental and are NOT recomended for regular users.
</strong>
</p>

<p>
a672 7
GOOD LUCK. Please direct all problem reports with as MUCH information as
possible (kernel coredumps, tracebacks, etc) to <a href="mailto:csapuntz@@openbsd.org">Costa</a>. 
Do not waste his time with any other questions or incomplete problem
reports.
</p>

<p>
d838 1
a838 1
<small>$OpenBSD: faq14.html,v 1.15 1999/12/20 22:34:36 chris Exp $</small>
@


1.15
log
@fix href
@
text
@d576 1
a576 1
This is a more permenant solution to adding more swap space. To swap to a file permanently, first make a
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.14 1999/12/06 21:45:58 chris Exp $</small>
@


1.14
log
@missed a few
@
text
@d529 1
a529 1
the <a href="href="http://www.openbsd.org/cgi-bin/man.cgi?query=dd&sektion=1&format=html">dd(1)</a>
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.13 1999/12/05 21:35:49 chris Exp $</small>
@


1.13
log
@2.6 updates and minor corrections
@
text
@d3 1
a3 1
<title>OpenBSD FAQ: 14 - Disk setup</title>
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.12 1999/12/05 21:15:54 chris Exp $</small>
@


1.12
log
@minor nit-pick
@
text
@d727 1
a727 1
<tt>pub/OpenBSD/2.5/tools/osbs135.exe</tt>
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.11 1999/11/28 03:26:05 ericj Exp $</small>
@


1.11
log
@revamp install section
@
text
@d3 1
a3 1
<title>OpenBSD FAQ: 14 - Working With Disks in OpenBSD</title>
d16 1
a16 1
<h2><font color=#e00000>14.0 - Working with disks in OpenBSD</font><hr></h2>
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.10 1999/11/15 20:03:31 ericj Exp $</small>
@


1.10
log
@remove repeating lines. Mike Hardy <mhardy@@smithsonite.rice.edu>
@
text
@d90 1
a90 1
reading <a href="faq4.html#4.5">faq4.5</a>. For servers it is recommended
d779 1
a779 1
Also check with <a href= "faq4.html#4.7">section 4.7</a>
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.9 1999/11/03 19:57:04 chris Exp $</small>
@


1.9
log
@Now that I encountered this one again, fix the FAQ entry to
explain that fdisk -i will be a big help.
@
text
@a69 3

(eg. 'swap', '/', '/usr' and '/var'). And you still have 3 more
partitions available for other OSs!
d851 1
a851 1
<small>$OpenBSD: faq14.html,v 1.8 1999/10/25 17:36:07 ericj Exp $</small>
@


1.8
log
@
Start moving 2.5 specific info to faq11-2.5.html
But leave it in the regular faq until 2.6 is released.
also correct swap section.
@
text
@d26 2
a27 2
<li><a href="#14.6">14.6 - When I boot after installation of OpenBSD/i386, it says
"partition 3 id 0".</a></li>
d690 1
a690 1
<h2>14.6 -  When I boot after installation of OpenBSD/i386, it says "partition 3 id 0".</h2>
d694 2
a695 1
or that your BIOS is not compatible with your current MBR. To solve this
d697 27
a723 18
<a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=installboot&sektion=8&format=html">installboot(8)</a>.
For example, the most common usage is:
</p>

<p>
<ul>
<li>Boot from the OpenBSD bootdisk</li>
<ul>
<li># <strong>fsck /dev/rwd0a && mount /dev/wd0a /mnt </li></strong>
<li># <strong>cp /usr/mdec/boot /mnt/boot</li></strong>
<li># <strong>/usr/mdec/installboot -v /mnt/boot /usr/mdec/biosboot wd0</li></strong>
</ul>
<li>Here substitute your disk devices for rwd0a & wd0a. This will install the boot blocks again.</li>
<li>Then Reboot.</li>
</ul>
</p>

d729 2
a730 5
sites.
</p>

<p>
<kbd>pub/OpenBSD/2.5/tools/osbs135.exe</kbd>
d734 1
a734 1
and take some time to look through the web pages at
d854 1
a854 1
<small>$OpenBSD: faq14.html,v 1.7 1999/10/15 16:18:23 ericj Exp $</small>
@


1.7
log
@fix up disklabel more. Add blurb about large drives
@
text
@d499 4
a502 3
With OpenBSD 2.5 came the introduction of <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&sektion=8&format=html">swapctl(8)</a>, 
which made dealing with swap devices much easier. Swapping to a file doesn't require a 
d847 1
a847 1
<small>$OpenBSD: faq14.html,v 1.6 1999/10/15 00:16:15 ericj Exp $</small>
@


1.6
log
@grammer fix's <caz@@monkey.org>
@
text
@d51 1
a51 1
Disklabel's are created to allow an effecient interface between your disk
d56 1
a56 1
also used in conjunction with the filesystems to create a more effecient
d191 7
d276 1
a276 1
For installation purposes, most times you'll only need <b>ONE</b> Openbsd
d846 1
a846 1
<small>$OpenBSD: faq14.html,v 1.5 1999/10/14 21:03:20 ericj Exp $</small>
@


1.5
log
@better disklabel section, still needs expanded
@
text
@d53 1
a53 1
information about your disk, like your drives geometry and information
d55 1
a55 1
the drive and where filesystems are contained on the drive. Labels are
d81 2
a82 2
During the install you use disklabel to create your seperate labels which
will contain your seperate mountpoints. During the install, you can set
d94 1
a94 1
that you create at least these label's seperately. For desktop users
d147 3
a149 3
The next example will take you through the creation of two more labels. This means that its not a
complete install as the size of these won't be enough to install OpenBSD to its fullest. But showing the
full creation will just get redundant.
d183 1
a183 2
the installation process. Here is an example of all you need to type to write the label to disk, and
move on.
d196 1
a196 1
need to use disklabel are when adding, subtracting or restructuring your disks. One of the first things
d247 1
a247 1
information read the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">d$
d839 1
a839 1
<small>$OpenBSD: faq14.html,v 1.4 1999/10/08 15:50:52 ericj Exp $</small>
@


1.4
log
@much improved swap faq
@
text
@d34 3
d38 48
a85 2
<a name="14.1">
<h2>14.1 - Using the OpenBSD disklabel</h2>
d89 12
a100 1
Be sure to check the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=disklabel&sektion=8&format=html">disklabel(8)</a> man page! 
d103 33
d137 7
a143 9
Disklabel is used to identify disks and/or partitions. The main idea behind
them is abstraction of disk hardware, since there exists several partitioning
tables. A <b>disklabel</b> is a universal partitioning table. These
labels tell the system everything about the disk, but most of it is irrelevant.
The important parts of the label are both the part that tells the disk
geometry and also the part that actually defines what partitions
exist on your disk.  This label resides on the beginning of the disk, this is to
help bootstrap code use them (since most ROM based booting reads the first sectors of the first disk). 
Disklabel can, on some systems, be used to install bootstrap code.
d147 3
a149 7
As an additional gain, using disklabel helps overcome architecture limitations
on disk partitioning. For example, on i386, you can only have 4 primary
partitions.  (Partitions that other operating systems, such as Windows NT
or DOS can see.)  With <b>disklabel</b>, you use one of these
'primary' partitions to store *all* of your OpenBSD partitions
(eg. 'swap', '/', '/usr' and '/var'). And you still have 3 more partitions
available for other OSs!
d152 21
d174 5
a178 6
You can think of them as 'subpartitions' for installation purposes. But they
are a necessity for kernel disk access based on geometry. And remember to use
'b' for the swap label, and 'a' for root filesystem (default names in kernel).
(Note also that in other FAQ documents we usually refer to these OpenBSD
'subpartitions' as partitions.  Most architectures do not have two layers
of partitions like the i386 does.)
d182 4
a185 1
To just view the current disklabel for your disk just do:<br>
d188 11
a198 3
# <Strong>disklabel &lt;disk-device name&gt;</strong><br>
</pre></ul>
This will give output similar to this:<br>
d202 2
d207 1
a207 1
disk: 
d230 1
a230 7
</PRE></ul>

<p> 
In this example, there are 4 labels - A, B, C, J. A is one main partition, B is swap, and J is another
partition. C in all cases represents the full disk. This is helpful in showing what values in size, cyl, etc you have
to work with. But with this command you cannot change any values, you can just view. 
</p>
d233 3
a235 2
To be able to edit your label's interactively you would use the <b>-E</b> flag.<br>
Example:
d240 1
a240 1
# using MBR partition 3: type A6 off 64 (0x40) size 16777152 (0xffffc0)
d242 8
a249 58
Treating sectors 64-16777216 as the OpenBSD portion of the disk.
You can use the 'b' command to change this.

Initial label editor (enter '?' for help at any prompt)
> <Strong>?</strong>
Available commands:
        p [unit]  - print label.
        M         - show entire OpenBSD man page for disklabel.
        e         - edit drive parameters.
        a [part]  - add new partition.
        b         - set OpenBSD disk boundaries.
        c [part]  - change partition size.
        d [part]  - delete partition.
        m [part]  - modify existing partition.
        r         - recalculate free space.
        u         - undo last change.
        s [path]  - save label to file.
        w         - write label to disk.
        q         - quit and save changes.
        x         - exit without saving changes.
        ? [cmnd]  - this message or command specific help.
Numeric parameters may use suffixes to indicate units:
        'b' for bytes, 'c' for cylinders, 'k' for kilobytes, 'm' for megabytes,
        'g' for gigabytes or no suffix for sectors (usually 512 bytes).
        Non-sector units will be rounded to the nearest cylinder.
Entering '?' at most prompts will give you (simple) context sensitive help.
> <strong>p</strong>
device: /dev/rwd0c
type: ESDI
disk: 
label: TOSHIBA MK2720FC
bytes/sector: 512
sectors/track: 63
tracks/cylinder: 16
sectors/cylinder: 1008
cylinders: 2633
total sectors: 2654064
free sectors: 14193711
rpm: 3600

16 partitions:
#        size   offset    fstype   [fsize bsize   cpg]
  a:  2071440    65583    4.2BSD     1024  8192    16   # (Cyl.   65*- 2120)
  b:    65520       63      swap                        # (Cyl.    0*- 65)
  c:  2654064        0    unused        0     0         # (Cyl.    0 - 2632)
  j:   512001  2137023    4.2BSD     1024  8192    16   # (Cyl. 2120*- 2627*)
> <strong>q</strong>
No changes.
</pre></ul>

<p> 
In this example we get into disklabel's interactive mode. From here we can issue the command "?" asking for help. This
gives us many commands we can use to add, delete, edit existing labels.  
</p> 

<p> 
There is a new feature on disklabel, to help installation. The '-f' flag writes a 'fstab' like file, if
given a mount point for a label. This is only used at installation. 
a251 4
<p> 
To see an example install involving disklabel check <a href="log25.txt">log25.txt</a> </p>
<br>

d840 1
a840 1
<small>$OpenBSD: faq14.html,v 1.3 1999/09/24 01:46:14 ericj Exp $</small>
@


1.3
log
@re-organization of the faq, based greatly on the recent changes to the main web page. This way will hopefully allow for greater expansion and readability. Some of the numbers have changed. sorry.
@
text
@d433 1
a433 2
href="http://www.openbsd.org/cgi-bin/man.cgi?query=swapctl&sektion=8&format=h
tml">swapctl(8)</a>, 
d439 36
d476 2
a477 3
To swap to a file permanently, first make a kernel with vnd0c as swap. If you 
have wd0a as root filesystem, wd0b is the previous swap, use this line in the 
kernel configuration file (refer to compiling a new kernel if in doubt):
d480 15
a494 5
<ul>
<pre>
config          bsd     root on wd0a swap on wd0b and vnd0c dumps on wd0b
</pre>
</ul>
d497 3
a499 1
Second make the file for swap. If you want a 32MB swapfile named /newswap do:
d502 7
a508 3
<ul>
<strong># dd if=/dev/zero of=/newswap bs=1k count=32768</strong>
</ul>
d511 3
a513 1
Add a line to your /etc/fstab file to indicate where the new swap will be.
d516 3
a518 3
<ul>
<strong>/dev/vnd0c none swap sw 0 0</strong>
</ul>
d521 2
a522 2
Now boot with the new kernel. Then create the vnd0 device to use that file
as a device:
d525 6
a530 3
<ul>
<strong># vnconfig -c -v vnd0 /newswap</strong>
</ul>
d533 2
a534 1
And add it now to swap:
d537 5
a541 3
<ul>
<strong># swapon /dev/vnd0c</strong>
</ul>
d544 3
a546 1
You can now see if it is working with:
d549 4
a552 3
<ul>
<strong># pstat -s</strong>
</ul>
d555 17
a571 1
<a name="14.5">
d779 1
a779 1
<small>$OpenBSD$</small>
@


1.2
log
@move existing ipsec info to faq14.html
@
text
@d3 1
a3 1
<title>OpenBSD FAQ: 14 - Using IPsec in OpenBSD</title>
d13 2
d16 1
a16 5
<font color= "#0000e0">
<a href= "index.html">[Back to Main Index]</a>
<a href= "faq13.html">[To Section 13.0 - For Advanced Users]</a>
<a href= "faq15.html">[To Section 15.0 - Using Disks in OpenBSD]</a>
</font>
d20 12
a31 1
<h1>14.0 - Using IPsec in OpenBSD</h1>
d33 4
d40 1
a40 1
<a name="14.1"> 
d42 76
d119 2
a120 11
IPSec is partially documented in the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vpn&apropos=0&sektion=0&format=html">vpn(8)</a>
man page.  There are various files in <A HREF="http://www.openbsd.org/cgi-bin/cvsweb/src/share/ipsec/">/usr/share/ipsec/</a>
directory which can also assist you.  The manual pages for
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipsec&apropos=0&sektion=4&format=html">ipsec(4)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipsecadm&apropos=0&sektion=8&format=html">ipsecadm(8)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=photurisd&apropos=0&sektion=8&format=html">photurisd(8)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=startkey&apropos=0&sektion=1&format=html">startkey(1)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=isakmpd&apropos=0&sektion=8&format=html">isakmpd(8)</a> and
<a HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=isakmpd.conf&apropos=0&sektion=5&format=html">isakmpd.conf(5)</a>
are also available!
d122 60
d183 2
a184 2
You should also check <a href="http://www.codetalker.com/greenbox/docs/vpn-24-minifaq.html">Codetalker</a> which has an FAQ
for setting up an IPSec VPN with OpenBSD.  It explains some basic IPSec concepts and how to apply them to a VPN setup.
d187 2
d190 499
a688 2
 
<b>Section Under Work</b>
d693 1
a693 2
<a href= "faq13.html">[To Section 13.0 - For Advanced Users]</a>
<a href= "faq15.html">[To Section 15.0 - Using Disks in OpenBSD]</a>
d702 1
a702 1
<small>$OpenBSD: faq14.html,v 1.1 1999/09/15 05:16:23 ericj Exp $</small>
d706 1
@


1.1
log
@move disk information away from faq4 to a new faq15. This will leave room for an expanded installation section. faq14 added also although no information is in there to fill it. Soon it will be the IPsec FAQ
@
text
@d3 1
a3 1
<title>OpenBSD FAQ: 15 - Using IPsec in OpenBSD</title>
d22 1
a22 1
<h1>15.0 - Using IPsec in OpenBSD</h1>
d27 1
a27 1
Section comming SOON!
d29 21
d64 1
a64 1
<small>$OpenBSD$</small>
@

