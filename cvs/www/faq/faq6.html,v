head	1.435;
access;
symbols;
locks; strict;
comment	@# @;


1.435
date	2017.03.25.19.07.05;	author tb;	state Exp;
branches;
next	1.434;
commitid	HspC9U4j3u1PNnAZ;

1.434
date	2017.03.20.16.18.47;	author tb;	state Exp;
branches;
next	1.433;
commitid	7pyAhUnFOM5eML6i;

1.433
date	2017.02.28.04.08.49;	author tb;	state Exp;
branches;
next	1.432;
commitid	W2QXicHWngPS7Del;

1.432
date	2017.02.27.02.01.38;	author tb;	state Exp;
branches;
next	1.431;
commitid	EoRD8N9VfktGIKoH;

1.431
date	2017.02.27.00.41.31;	author tj;	state Exp;
branches;
next	1.430;
commitid	yM6XG0pTuLfoumVd;

1.430
date	2017.02.26.22.01.36;	author tj;	state Exp;
branches;
next	1.429;
commitid	ZEUK45dXSJjkghZ3;

1.429
date	2017.02.16.00.55.07;	author tb;	state Exp;
branches;
next	1.428;
commitid	tKETEa1G7kWIrGsx;

1.428
date	2017.02.15.23.56.26;	author tb;	state Exp;
branches;
next	1.427;
commitid	GuBxktLa9L8cWIf4;

1.427
date	2017.02.09.17.22.19;	author tb;	state Exp;
branches;
next	1.426;
commitid	T7p2qUf6sgevbhcO;

1.426
date	2017.01.31.11.06.35;	author tb;	state Exp;
branches;
next	1.425;
commitid	BHo6YWAWY2ljoAVe;

1.425
date	2017.01.09.10.50.10;	author tb;	state Exp;
branches;
next	1.424;
commitid	9RdjtfnAQo5rmwZk;

1.424
date	2017.01.07.19.41.33;	author tb;	state Exp;
branches;
next	1.423;
commitid	66tU8RK5RVwpzKwN;

1.423
date	2017.01.07.18.11.37;	author tb;	state Exp;
branches;
next	1.422;
commitid	lQ4OdHuHoDufwQ4N;

1.422
date	2017.01.07.16.59.28;	author tb;	state Exp;
branches;
next	1.421;
commitid	lfd57FOM7CpjIzWK;

1.421
date	2017.01.06.17.10.15;	author tb;	state Exp;
branches;
next	1.420;
commitid	SAUJWstBQTQLoEjP;

1.420
date	2017.01.06.15.04.13;	author tb;	state Exp;
branches;
next	1.419;
commitid	nplAfwyqUNCji8c5;

1.419
date	2016.10.08.03.17.45;	author tj;	state Exp;
branches;
next	1.418;
commitid	ZtKLbmxGKXgpYzLA;

1.418
date	2016.10.08.00.14.34;	author tj;	state Exp;
branches;
next	1.417;
commitid	TafkjRsX8zjvQVLB;

1.417
date	2016.09.22.17.10.55;	author tb;	state Exp;
branches;
next	1.416;
commitid	xSATy2Yicu9KNYqf;

1.416
date	2016.09.18.11.22.37;	author tb;	state Exp;
branches;
next	1.415;
commitid	iUzflDNg84hKNQn2;

1.415
date	2016.09.18.11.13.18;	author tb;	state Exp;
branches;
next	1.414;
commitid	UX2Jo3TxqRMMDgCe;

1.414
date	2016.09.18.10.56.34;	author tb;	state Exp;
branches;
next	1.413;
commitid	eFNztFvtzK50uDEa;

1.413
date	2016.09.18.10.15.30;	author tb;	state Exp;
branches;
next	1.412;
commitid	3Bp2ddbJKSWKPV90;

1.412
date	2016.09.18.10.10.49;	author tb;	state Exp;
branches;
next	1.411;
commitid	6EuZnsXAgzDbNiei;

1.411
date	2016.09.18.10.09.52;	author tb;	state Exp;
branches;
next	1.410;
commitid	uo0dtsr3XTE6pgj3;

1.410
date	2016.09.18.09.46.39;	author tb;	state Exp;
branches;
next	1.409;
commitid	qg3DU5zOJ78ktI0Y;

1.409
date	2016.09.18.03.04.23;	author tb;	state Exp;
branches;
next	1.408;
commitid	FPa9ibFJWMo5BmQl;

1.408
date	2016.09.18.02.55.52;	author tb;	state Exp;
branches;
next	1.407;
commitid	UJhgyW5FtJ20Xdom;

1.407
date	2016.09.18.02.46.22;	author tb;	state Exp;
branches;
next	1.406;
commitid	vnpUdYkIP3PX47i0;

1.406
date	2016.09.18.02.27.43;	author tb;	state Exp;
branches;
next	1.405;
commitid	3YB4WmEqoKw6d0TY;

1.405
date	2016.09.18.02.07.15;	author tb;	state Exp;
branches;
next	1.404;
commitid	Agw6vwNQIX3g3zoJ;

1.404
date	2016.09.18.01.46.12;	author tb;	state Exp;
branches;
next	1.403;
commitid	vFQkAWg5j7hDJxS9;

1.403
date	2016.09.18.01.14.51;	author tb;	state Exp;
branches;
next	1.402;
commitid	kPKL0m0B2zOPNKHe;

1.402
date	2016.09.18.00.29.55;	author tb;	state Exp;
branches;
next	1.401;
commitid	SJ1eb0dKc5fk53wQ;

1.401
date	2016.09.18.00.26.00;	author tb;	state Exp;
branches;
next	1.400;
commitid	SlLjNaVmeMV3tJRH;

1.400
date	2016.09.17.23.26.49;	author tb;	state Exp;
branches;
next	1.399;
commitid	A2zgVXESX2L0t121;

1.399
date	2016.09.17.20.15.41;	author tb;	state Exp;
branches;
next	1.398;
commitid	X1ws6oLU2aGfzPm9;

1.398
date	2016.09.17.16.36.38;	author tb;	state Exp;
branches;
next	1.397;
commitid	ADCEQ0cnc5P6jt7g;

1.397
date	2016.09.17.14.53.59;	author tb;	state Exp;
branches;
next	1.396;
commitid	JXFO9hzTwYNDhPxS;

1.396
date	2016.09.17.12.56.19;	author tb;	state Exp;
branches;
next	1.395;
commitid	wEjfLIKzMSsrO8R5;

1.395
date	2016.09.17.10.29.55;	author tb;	state Exp;
branches;
next	1.394;
commitid	66UexlhDIKzQcpor;

1.394
date	2016.09.17.04.58.44;	author tb;	state Exp;
branches;
next	1.393;
commitid	wlnqWauAq9JkxGK0;

1.393
date	2016.09.17.03.04.48;	author tb;	state Exp;
branches;
next	1.392;
commitid	JXMbK3lExDLCfLfT;

1.392
date	2016.09.17.02.03.51;	author tb;	state Exp;
branches;
next	1.391;
commitid	Ruz2psGqmEuzXynZ;

1.391
date	2016.09.17.01.37.04;	author tb;	state Exp;
branches;
next	1.390;
commitid	QoznxzjLRzwq53tY;

1.390
date	2016.09.17.00.50.42;	author tb;	state Exp;
branches;
next	1.389;
commitid	IdJObRVKLOCl5yNG;

1.389
date	2016.09.17.00.04.03;	author tb;	state Exp;
branches;
next	1.388;
commitid	bh10h48eYKqM2MBt;

1.388
date	2016.09.16.15.14.08;	author tb;	state Exp;
branches;
next	1.387;
commitid	c2SJDKYQwRUtJNgr;

1.387
date	2016.09.16.12.46.12;	author tb;	state Exp;
branches;
next	1.386;
commitid	jA1LHA98KqbQ5j3N;

1.386
date	2016.09.09.17.09.05;	author tj;	state Exp;
branches;
next	1.385;
commitid	MjnBqiryO9n85H39;

1.385
date	2016.09.04.18.32.12;	author tb;	state Exp;
branches;
next	1.384;
commitid	qzkSPxjthML9aAnq;

1.384
date	2016.09.04.14.35.21;	author tj;	state Exp;
branches;
next	1.383;
commitid	UM1D6mArQagHmxTS;

1.383
date	2016.08.15.02.22.13;	author tb;	state Exp;
branches;
next	1.382;
commitid	3DeixV5YkPOb78RN;

1.382
date	2016.08.04.00.29.24;	author tb;	state Exp;
branches;
next	1.381;
commitid	AEA1JFhUbu3EVwQ0;

1.381
date	2016.08.03.20.40.25;	author tb;	state Exp;
branches;
next	1.380;
commitid	UUFjQubS8bOrM9m8;

1.380
date	2016.08.03.20.25.48;	author tb;	state Exp;
branches;
next	1.379;
commitid	Q6M0x8LLymdQ7AiV;

1.379
date	2016.07.16.17.49.05;	author tj;	state Exp;
branches;
next	1.378;
commitid	kqSS5HoLmYB9Cy12;

1.378
date	2016.06.18.02.24.33;	author tj;	state Exp;
branches;
next	1.377;
commitid	IZNDXjoQTSwZtVYE;

1.377
date	2016.06.17.15.12.02;	author tb;	state Exp;
branches;
next	1.376;
commitid	lmTcvwQYhsABNECe;

1.376
date	2016.06.17.10.45.19;	author tb;	state Exp;
branches;
next	1.375;
commitid	nuup2z7jEmhIjXuU;

1.375
date	2016.06.14.16.26.11;	author tj;	state Exp;
branches;
next	1.374;
commitid	PCHwYJ8G2TIOYpMG;

1.374
date	2016.04.27.23.07.05;	author tb;	state Exp;
branches;
next	1.373;
commitid	dxD1xVx41Orjg4Hn;

1.373
date	2016.04.27.07.25.33;	author tb;	state Exp;
branches;
next	1.372;
commitid	PmSYxgGp7DVJVAFq;

1.372
date	2016.04.27.07.24.23;	author tb;	state Exp;
branches;
next	1.371;
commitid	sdGGlftkWMIqLbcy;

1.371
date	2016.04.26.10.04.09;	author tb;	state Exp;
branches;
next	1.370;
commitid	nfrIshL1d0Ndme0b;

1.370
date	2016.04.21.00.47.30;	author tb;	state Exp;
branches;
next	1.369;
commitid	sKLcSVXJQumhAMaJ;

1.369
date	2016.04.16.00.30.41;	author tj;	state Exp;
branches;
next	1.368;
commitid	rTxoenHHaeutOff1;

1.368
date	2016.04.15.22.19.22;	author tj;	state Exp;
branches;
next	1.367;
commitid	SbVa2HBPaB5JhGVM;

1.367
date	2016.04.15.21.53.42;	author schwarze;	state Exp;
branches;
next	1.366;
commitid	YZv8S2kLQbFQZcyu;

1.366
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.365;
commitid	jwteSMEb4rFzI8UA;

1.365
date	2016.04.15.16.42.34;	author tj;	state Exp;
branches;
next	1.364;
commitid	4iGhbtsBAhiGE70P;

1.364
date	2016.04.12.09.40.11;	author espie;	state Exp;
branches;
next	1.363;
commitid	5O3m99HUNzaTIbHB;

1.363
date	2016.04.02.13.26.59;	author tb;	state Exp;
branches;
next	1.362;
commitid	RZwHxIC7tWHGSSZG;

1.362
date	2016.03.31.19.51.33;	author tb;	state Exp;
branches;
next	1.361;
commitid	5Ir8At3d2VDhuyaw;

1.361
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.360;
commitid	4Y8oU6GBrSY1UOfW;

1.360
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.359;
commitid	hi2ObFv9LGB98JY5;

1.359
date	2016.03.26.00.44.27;	author tb;	state Exp;
branches;
next	1.358;
commitid	ukJGqHty6I98ck4V;

1.358
date	2016.03.23.06.52.20;	author tb;	state Exp;
branches;
next	1.357;
commitid	uGV1nvA1mYJRwNAB;

1.357
date	2016.03.22.10.54.47;	author sthen;	state Exp;
branches;
next	1.356;
commitid	cyODCFvIgxpUoVc0;

1.356
date	2016.03.21.08.24.24;	author tb;	state Exp;
branches;
next	1.355;
commitid	FszPYViUktw26pO0;

1.355
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.354;
commitid	zEx6zFkNSFFExu0v;

1.354
date	2016.02.25.18.07.49;	author tj;	state Exp;
branches;
next	1.353;
commitid	pzZ9545r0WZxRGpt;

1.353
date	2016.02.25.00.51.48;	author tb;	state Exp;
branches;
next	1.352;
commitid	rsiCXWQ1YDlLAufH;

1.352
date	2016.02.22.19.19.01;	author tb;	state Exp;
branches;
next	1.351;
commitid	UTLsk1JLV5kcKOg9;

1.351
date	2016.02.22.00.12.44;	author tj;	state Exp;
branches;
next	1.350;
commitid	YkMDEjSu6XuN6KXQ;

1.350
date	2016.02.20.22.59.20;	author tj;	state Exp;
branches;
next	1.349;
commitid	8IPwAs1etKEHjS9q;

1.349
date	2016.02.06.13.35.34;	author tb;	state Exp;
branches;
next	1.348;
commitid	qLP6wJtSw0G8CPlL;

1.348
date	2016.02.04.23.39.08;	author tb;	state Exp;
branches;
next	1.347;
commitid	pmWjAu9zDvdaSdoa;

1.347
date	2016.01.31.00.23.56;	author tj;	state Exp;
branches;
next	1.346;
commitid	A5Uvf7HKig9RND33;

1.346
date	2016.01.30.22.05.21;	author tj;	state Exp;
branches;
next	1.345;
commitid	QUz1AXcPPeT8Y3l3;

1.345
date	2016.01.26.20.58.30;	author tj;	state Exp;
branches;
next	1.344;
commitid	elNG1gXRQ2O8fy29;

1.344
date	2016.01.18.22.38.27;	author tj;	state Exp;
branches;
next	1.343;
commitid	jrgxpochJNogjGYD;

1.343
date	2016.01.13.21.55.55;	author tb;	state Exp;
branches;
next	1.342;
commitid	QtnhUiqtRLjFFnqZ;

1.342
date	2016.01.11.06.30.13;	author tb;	state Exp;
branches;
next	1.341;
commitid	kpxTb5fPDcXr5p29;

1.341
date	2015.12.23.22.51.54;	author sthen;	state Exp;
branches;
next	1.340;
commitid	ii15iIPZRAPrtZId;

1.340
date	2015.12.23.21.29.03;	author mmcc;	state Exp;
branches;
next	1.339;
commitid	QZ0PK4sVZykNqFjU;

1.339
date	2015.11.23.03.16.31;	author deraadt;	state Exp;
branches;
next	1.338;
commitid	agWVJvjBEQwPNRmg;

1.338
date	2015.10.26.21.31.04;	author sthen;	state Exp;
branches;
next	1.337;
commitid	37WYrHG5dnXh5nw8;

1.337
date	2015.10.26.21.28.51;	author sthen;	state Exp;
branches;
next	1.336;
commitid	PQr1QzPYAILjOzW2;

1.336
date	2015.10.18.19.42.11;	author nick;	state Exp;
branches;
next	1.335;
commitid	HJnmhJAcdZq1TNFu;

1.335
date	2015.08.05.17.08.45;	author bentley;	state Exp;
branches;
next	1.334;
commitid	iV03SsbVK0inVfcB;

1.334
date	2015.07.02.05.49.04;	author bentley;	state Exp;
branches;
next	1.333;
commitid	AP3UllesavMDEUhQ;

1.333
date	2015.06.07.11.12.17;	author stsp;	state Exp;
branches;
next	1.332;
commitid	xvm45J9GoQOYnzgL;

1.332
date	2015.06.07.00.18.11;	author deraadt;	state Exp;
branches;
next	1.331;
commitid	fsD9ThILviUrmd0L;

1.331
date	2015.06.06.23.24.49;	author czarkoff;	state Exp;
branches;
next	1.330;
commitid	g8tOu2Mis5L2PmtM;

1.330
date	2015.06.05.12.20.13;	author stsp;	state Exp;
branches;
next	1.329;
commitid	xGtPW5aLcQPfu5S3;

1.329
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.328;
commitid	wRrXxcro6dFYiwF8;

1.328
date	2015.04.30.23.38.57;	author nick;	state Exp;
branches;
next	1.327;
commitid	uIacNW3dhb39XNuY;

1.327
date	2015.04.09.17.57.29;	author stsp;	state Exp;
branches;
next	1.326;
commitid	0MUwCvKXi3V8mMwK;

1.326
date	2015.03.05.01.54.35;	author nick;	state Exp;
branches;
next	1.325;
commitid	27GgB3asBjrZtadD;

1.325
date	2014.12.01.09.49.47;	author bentley;	state Exp;
branches;
next	1.324;
commitid	VffT7s4nM0NK88NG;

1.324
date	2014.11.19.01.36.36;	author nick;	state Exp;
branches;
next	1.323;
commitid	T3NFliiMKGuiScoX;

1.323
date	2014.11.05.00.41.59;	author nick;	state Exp;
branches;
next	1.322;
commitid	HpT0Ua5X3cVg5vDG;

1.322
date	2014.11.01.13.42.51;	author nick;	state Exp;
branches;
next	1.321;
commitid	ZgANDuwHdulMn8Ng;

1.321
date	2014.09.16.02.28.34;	author nick;	state Exp;
branches;
next	1.320;
commitid	qAFrwsY5vhI2VVh3;

1.320
date	2014.09.14.17.50.51;	author nick;	state Exp;
branches;
next	1.319;
commitid	q6bpBdkgfLlNXkvI;

1.319
date	2014.08.29.05.48.47;	author brad;	state Exp;
branches;
next	1.318;
commitid	zuT0Z5tdvRalC846;

1.318
date	2014.08.07.01.51.34;	author nick;	state Exp;
branches;
next	1.317;
commitid	RZYBSFOBtVHeVEME;

1.317
date	2014.07.19.21.25.39;	author sthen;	state Exp;
branches;
next	1.316;
commitid	JzuOgQXOCtR9FUJq;

1.316
date	2014.05.01.15.01.13;	author nick;	state Exp;
branches;
next	1.315;

1.315
date	2014.03.30.19.17.28;	author nick;	state Exp;
branches;
next	1.314;

1.314
date	2014.03.30.19.13.39;	author nick;	state Exp;
branches;
next	1.313;

1.313
date	2013.12.01.23.42.04;	author nick;	state Exp;
branches;
next	1.312;

1.312
date	2013.12.01.17.09.56;	author nick;	state Exp;
branches;
next	1.311;

1.311
date	2013.11.12.00.30.25;	author nick;	state Exp;
branches;
next	1.310;

1.310
date	2013.11.01.14.05.56;	author nick;	state Exp;
branches;
next	1.309;

1.309
date	2013.09.07.18.55.50;	author nick;	state Exp;
branches;
next	1.308;

1.308
date	2013.06.02.21.36.41;	author nick;	state Exp;
branches;
next	1.307;

1.307
date	2013.05.01.13.16.32;	author nick;	state Exp;
branches;
next	1.306;

1.306
date	2013.02.13.20.45.09;	author sthen;	state Exp;
branches;
next	1.305;

1.305
date	2013.02.13.19.22.32;	author sthen;	state Exp;
branches;
next	1.304;

1.304
date	2012.11.02.11.25.12;	author nick;	state Exp;
branches;
next	1.303;

1.303
date	2012.11.01.15.05.30;	author nick;	state Exp;
branches;
next	1.302;

1.302
date	2012.10.14.17.33.40;	author nick;	state Exp;
branches;
next	1.301;

1.301
date	2012.10.14.17.26.04;	author nick;	state Exp;
branches;
next	1.300;

1.300
date	2012.08.16.02.40.18;	author nick;	state Exp;
branches;
next	1.299;

1.299
date	2012.08.13.01.43.25;	author nick;	state Exp;
branches;
next	1.298;

1.298
date	2012.05.01.14.35.14;	author nick;	state Exp;
branches;
next	1.297;

1.297
date	2012.04.23.22.41.40;	author nick;	state Exp;
branches;
next	1.296;

1.296
date	2011.11.01.10.52.27;	author nick;	state Exp;
branches;
next	1.295;

1.295
date	2011.06.28.08.33.48;	author jj;	state Exp;
branches;
next	1.294;

1.294
date	2011.06.20.15.11.36;	author sthen;	state Exp;
branches;
next	1.293;

1.293
date	2011.06.18.18.23.00;	author lum;	state Exp;
branches;
next	1.292;

1.292
date	2011.06.16.09.26.43;	author sthen;	state Exp;
branches;
next	1.291;

1.291
date	2011.06.10.16.27.47;	author lum;	state Exp;
branches;
next	1.290;

1.290
date	2011.05.01.13.08.58;	author nick;	state Exp;
branches;
next	1.289;

1.289
date	2010.11.07.03.13.37;	author nick;	state Exp;
branches;
next	1.288;

1.288
date	2010.11.06.16.56.11;	author nick;	state Exp;
branches;
next	1.287;

1.287
date	2010.11.01.09.48.45;	author nick;	state Exp;
branches;
next	1.286;

1.286
date	2010.09.14.05.27.12;	author steven;	state Exp;
branches;
next	1.285;

1.285
date	2010.09.08.19.16.45;	author sthen;	state Exp;
branches;
next	1.284;

1.284
date	2010.05.19.12.41.02;	author nick;	state Exp;
branches;
next	1.283;

1.283
date	2010.03.18.22.53.54;	author nick;	state Exp;
branches;
next	1.282;

1.282
date	2010.02.05.12.20.51;	author blambert;	state Exp;
branches;
next	1.281;

1.281
date	2009.11.30.03.25.40;	author nick;	state Exp;
branches;
next	1.280;

1.280
date	2009.10.25.16.49.36;	author steven;	state Exp;
branches;
next	1.279;

1.279
date	2009.10.16.19.07.37;	author nick;	state Exp;
branches;
next	1.278;

1.278
date	2009.09.09.00.36.47;	author nick;	state Exp;
branches;
next	1.277;

1.277
date	2009.07.02.11.35.51;	author sthen;	state Exp;
branches;
next	1.276;

1.276
date	2009.06.04.13.23.55;	author sthen;	state Exp;
branches;
next	1.275;

1.275
date	2009.04.30.17.19.11;	author nick;	state Exp;
branches;
next	1.274;

1.274
date	2009.04.07.10.56.27;	author nick;	state Exp;
branches;
next	1.273;

1.273
date	2009.04.03.01.51.12;	author nick;	state Exp;
branches;
next	1.272;

1.272
date	2009.01.30.22.25.57;	author sthen;	state Exp;
branches;
next	1.271;

1.271
date	2009.01.25.18.09.49;	author jasper;	state Exp;
branches;
next	1.270;

1.270
date	2008.10.31.16.52.29;	author nick;	state Exp;
branches;
next	1.269;

1.269
date	2008.06.08.20.36.10;	author nick;	state Exp;
branches;
next	1.268;

1.268
date	2008.05.01.20.41.24;	author steven;	state Exp;
branches;
next	1.267;

1.267
date	2008.04.30.21.24.58;	author nick;	state Exp;
branches;
next	1.266;

1.266
date	2008.04.16.00.29.29;	author nick;	state Exp;
branches;
next	1.265;

1.265
date	2008.03.01.14.10.26;	author steven;	state Exp;
branches;
next	1.264;

1.264
date	2008.03.01.11.31.08;	author steven;	state Exp;
branches;
next	1.263;

1.263
date	2008.03.01.09.50.58;	author steven;	state Exp;
branches;
next	1.262;

1.262
date	2008.02.27.12.13.42;	author sthen;	state Exp;
branches;
next	1.261;

1.261
date	2008.02.11.04.44.38;	author joel;	state Exp;
branches;
next	1.260;

1.260
date	2008.01.05.17.13.04;	author joel;	state Exp;
branches;
next	1.259;

1.259
date	2007.12.21.11.57.21;	author nick;	state Exp;
branches;
next	1.258;

1.258
date	2007.11.01.20.35.02;	author tobias;	state Exp;
branches;
next	1.257;

1.257
date	2007.11.01.02.11.00;	author nick;	state Exp;
branches;
next	1.256;

1.256
date	2007.05.01.16.27.46;	author nick;	state Exp;
branches;
next	1.255;

1.255
date	2007.04.25.21.47.33;	author nick;	state Exp;
branches;
next	1.254;

1.254
date	2007.04.25.16.45.38;	author nick;	state Exp;
branches;
next	1.253;

1.253
date	2006.12.03.22.49.00;	author joel;	state Exp;
branches;
next	1.252;

1.252
date	2006.12.03.03.39.27;	author nick;	state Exp;
branches;
next	1.251;

1.251
date	2006.12.03.03.22.33;	author nick;	state Exp;
branches;
next	1.250;

1.250
date	2006.11.24.18.16.48;	author joel;	state Exp;
branches;
next	1.249;

1.249
date	2006.11.10.06.13.38;	author joel;	state Exp;
branches;
next	1.248;

1.248
date	2006.11.01.06.04.26;	author steven;	state Exp;
branches;
next	1.247;

1.247
date	2006.11.01.01.41.18;	author nick;	state Exp;
branches;
next	1.246;

1.246
date	2006.10.27.01.22.12;	author nick;	state Exp;
branches;
next	1.245;

1.245
date	2006.10.20.02.24.25;	author nick;	state Exp;
branches;
next	1.244;

1.244
date	2006.08.21.14.17.21;	author tom;	state Exp;
branches;
next	1.243;

1.243
date	2006.08.20.15.22.31;	author steven;	state Exp;
branches;
next	1.242;

1.242
date	2006.08.19.17.30.11;	author steven;	state Exp;
branches;
next	1.241;

1.241
date	2006.08.19.17.28.41;	author steven;	state Exp;
branches;
next	1.240;

1.240
date	2006.08.18.02.00.45;	author nick;	state Exp;
branches;
next	1.239;

1.239
date	2006.08.18.01.25.23;	author nick;	state Exp;
branches;
next	1.238;

1.238
date	2006.08.05.09.35.10;	author steven;	state Exp;
branches;
next	1.237;

1.237
date	2006.05.31.09.24.08;	author steven;	state Exp;
branches;
next	1.236;

1.236
date	2006.05.20.06.17.12;	author steven;	state Exp;
branches;
next	1.235;

1.235
date	2006.05.13.20.29.15;	author steven;	state Exp;
branches;
next	1.234;

1.234
date	2006.05.01.01.02.59;	author nick;	state Exp;
branches;
next	1.233;

1.233
date	2006.03.18.02.22.17;	author nick;	state Exp;
branches;
next	1.232;

1.232
date	2006.03.09.03.17.45;	author nick;	state Exp;
branches;
next	1.231;

1.231
date	2005.11.24.05.41.56;	author steven;	state Exp;
branches;
next	1.230;

1.230
date	2005.11.02.02.23.27;	author nick;	state Exp;
branches;
next	1.229;

1.229
date	2005.11.02.02.02.08;	author nick;	state Exp;
branches;
next	1.228;

1.228
date	2005.11.01.11.39.57;	author nick;	state Exp;
branches;
next	1.227;

1.227
date	2005.10.29.12.52.25;	author jmc;	state Exp;
branches;
next	1.226;

1.226
date	2005.10.08.18.39.01;	author nick;	state Exp;
branches;
next	1.225;

1.225
date	2005.09.01.10.55.17;	author nick;	state Exp;
branches;
next	1.224;

1.224
date	2005.08.11.10.51.54;	author nick;	state Exp;
branches;
next	1.223;

1.223
date	2005.06.03.00.57.22;	author joel;	state Exp;
branches;
next	1.222;

1.222
date	2005.05.24.01.15.46;	author nick;	state Exp;
branches;
next	1.221;

1.221
date	2005.05.19.16.54.27;	author nick;	state Exp;
branches;
next	1.220;

1.220
date	2005.05.13.13.31.19;	author nick;	state Exp;
branches;
next	1.219;

1.219
date	2005.04.19.02.28.27;	author nick;	state Exp;
branches;
next	1.218;

1.218
date	2005.03.22.12.01.32;	author nick;	state Exp;
branches;
next	1.217;

1.217
date	2005.02.04.04.20.58;	author joel;	state Exp;
branches;
next	1.216;

1.216
date	2005.02.04.03.40.50;	author joel;	state Exp;
branches;
next	1.215;

1.215
date	2005.02.02.04.37.18;	author joel;	state Exp;
branches;
next	1.214;

1.214
date	2005.01.23.01.30.58;	author nick;	state Exp;
branches;
next	1.213;

1.213
date	2005.01.22.22.05.30;	author nick;	state Exp;
branches;
next	1.212;

1.212
date	2005.01.06.02.23.31;	author nick;	state Exp;
branches;
next	1.211;

1.211
date	2005.01.04.17.13.17;	author jmc;	state Exp;
branches;
next	1.210;

1.210
date	2004.12.25.04.14.39;	author nick;	state Exp;
branches;
next	1.209;

1.209
date	2004.12.22.02.27.16;	author nick;	state Exp;
branches;
next	1.208;

1.208
date	2004.12.10.10.33.42;	author jmc;	state Exp;
branches;
next	1.207;

1.207
date	2004.12.03.03.35.16;	author nick;	state Exp;
branches;
next	1.206;

1.206
date	2004.11.20.22.08.39;	author nick;	state Exp;
branches;
next	1.205;

1.205
date	2004.11.19.15.04.57;	author nick;	state Exp;
branches;
next	1.204;

1.204
date	2004.11.10.17.04.37;	author nick;	state Exp;
branches;
next	1.203;

1.203
date	2004.11.03.17.27.41;	author nick;	state Exp;
branches;
next	1.202;

1.202
date	2004.10.30.15.51.38;	author canacar;	state Exp;
branches;
next	1.201;

1.201
date	2004.10.29.17.26.01;	author nick;	state Exp;
branches;
next	1.200;

1.200
date	2004.10.20.23.04.26;	author nick;	state Exp;
branches;
next	1.199;

1.199
date	2004.10.19.03.20.04;	author krw;	state Exp;
branches;
next	1.198;

1.198
date	2004.10.13.13.41.03;	author nick;	state Exp;
branches;
next	1.197;

1.197
date	2004.09.28.20.27.50;	author nick;	state Exp;
branches;
next	1.196;

1.196
date	2004.09.25.12.41.11;	author nick;	state Exp;
branches;
next	1.195;

1.195
date	2004.09.14.07.39.24;	author otto;	state Exp;
branches;
next	1.194;

1.194
date	2004.09.10.07.07.58;	author otto;	state Exp;
branches;
next	1.193;

1.193
date	2004.09.06.14.12.44;	author saad;	state Exp;
branches;
next	1.192;

1.192
date	2004.08.19.15.28.50;	author nick;	state Exp;
branches;
next	1.191;

1.191
date	2004.08.19.13.37.28;	author nick;	state Exp;
branches;
next	1.190;

1.190
date	2004.08.04.15.44.11;	author nick;	state Exp;
branches;
next	1.189;

1.189
date	2004.07.26.04.35.10;	author david;	state Exp;
branches;
next	1.188;

1.188
date	2004.06.14.15.47.21;	author nick;	state Exp;
branches;
next	1.187;

1.187
date	2004.06.11.21.15.16;	author otto;	state Exp;
branches;
next	1.186;

1.186
date	2004.05.31.01.34.21;	author nick;	state Exp;
branches;
next	1.185;

1.185
date	2004.04.30.18.02.51;	author nick;	state Exp;
branches;
next	1.184;

1.184
date	2004.02.06.01.07.52;	author nick;	state Exp;
branches;
next	1.183;

1.183
date	2004.01.15.23.54.26;	author nick;	state Exp;
branches;
next	1.182;

1.182
date	2004.01.01.04.13.34;	author nick;	state Exp;
branches;
next	1.181;

1.181
date	2003.11.12.23.39.58;	author nick;	state Exp;
branches;
next	1.180;

1.180
date	2003.10.31.04.46.29;	author nick;	state Exp;
branches;
next	1.179;

1.179
date	2003.10.30.22.43.42;	author nick;	state Exp;
branches;
next	1.178;

1.178
date	2003.09.09.02.08.41;	author nick;	state Exp;
branches;
next	1.177;

1.177
date	2003.07.25.20.05.19;	author nick;	state Exp;
branches;
next	1.176;

1.176
date	2003.07.23.01.53.01;	author nick;	state Exp;
branches;
next	1.175;

1.175
date	2003.07.17.19.22.25;	author nick;	state Exp;
branches;
next	1.174;

1.174
date	2003.07.06.16.04.04;	author nick;	state Exp;
branches;
next	1.173;

1.173
date	2003.05.30.15.16.59;	author nick;	state Exp;
branches;
next	1.172;

1.172
date	2003.05.20.01.27.45;	author nick;	state Exp;
branches;
next	1.171;

1.171
date	2003.05.05.22.18.48;	author nick;	state Exp;
branches;
next	1.170;

1.170
date	2003.05.05.22.02.49;	author nick;	state Exp;
branches;
next	1.169;

1.169
date	2003.05.01.01.47.41;	author nick;	state Exp;
branches;
next	1.168;

1.168
date	2003.04.04.17.49.08;	author nick;	state Exp;
branches;
next	1.167;

1.167
date	2003.04.04.16.29.08;	author nick;	state Exp;
branches;
next	1.166;

1.166
date	2003.04.01.02.57.17;	author nick;	state Exp;
branches;
next	1.165;

1.165
date	2003.03.18.03.41.04;	author nick;	state Exp;
branches;
next	1.164;

1.164
date	2003.03.08.02.31.57;	author nick;	state Exp;
branches;
next	1.163;

1.163
date	2003.02.28.00.40.17;	author nick;	state Exp;
branches;
next	1.162;

1.162
date	2003.02.28.00.34.28;	author nick;	state Exp;
branches;
next	1.161;

1.161
date	2003.02.26.02.54.48;	author nick;	state Exp;
branches;
next	1.160;

1.160
date	2003.02.20.03.09.55;	author nick;	state Exp;
branches;
next	1.159;

1.159
date	2003.01.01.13.02.00;	author nick;	state Exp;
branches;
next	1.158;

1.158
date	2002.12.14.23.36.27;	author couderc;	state Exp;
branches;
next	1.157;

1.157
date	2002.12.05.20.10.14;	author nick;	state Exp;
branches;
next	1.156;

1.156
date	2002.11.24.00.32.36;	author nick;	state Exp;
branches;
next	1.155;

1.155
date	2002.11.20.14.20.56;	author dhartmei;	state Exp;
branches;
next	1.154;

1.154
date	2002.11.10.17.59.05;	author nick;	state Exp;
branches;
next	1.153;

1.153
date	2002.11.05.21.45.02;	author jufi;	state Exp;
branches;
next	1.152;

1.152
date	2002.11.05.20.10.17;	author nick;	state Exp;
branches;
next	1.151;

1.151
date	2002.11.01.17.55.52;	author nick;	state Exp;
branches;
next	1.150;

1.150
date	2002.10.31.02.02.02;	author nick;	state Exp;
branches;
next	1.149;

1.149
date	2002.10.30.21.10.35;	author nick;	state Exp;
branches;
next	1.148;

1.148
date	2002.10.26.14.58.50;	author dhartmei;	state Exp;
branches;
next	1.147;

1.147
date	2002.10.25.14.18.48;	author dhartmei;	state Exp;
branches;
next	1.146;

1.146
date	2002.10.04.14.15.26;	author nick;	state Exp;
branches;
next	1.145;

1.145
date	2002.10.04.13.48.36;	author nick;	state Exp;
branches;
next	1.144;

1.144
date	2002.07.25.22.06.57;	author nick;	state Exp;
branches;
next	1.143;

1.143
date	2002.07.25.15.15.21;	author henning;	state Exp;
branches;
next	1.142;

1.142
date	2002.07.25.12.36.29;	author henning;	state Exp;
branches;
next	1.141;

1.141
date	2002.07.12.02.51.35;	author nick;	state Exp;
branches;
next	1.140;

1.140
date	2002.07.02.01.17.58;	author nick;	state Exp;
branches;
next	1.139;

1.139
date	2002.07.02.00.30.16;	author nick;	state Exp;
branches;
next	1.138;

1.138
date	2002.06.24.12.09.54;	author espie;	state Exp;
branches;
next	1.137;

1.137
date	2002.06.24.09.47.46;	author dhartmei;	state Exp;
branches;
next	1.136;

1.136
date	2002.06.17.22.41.59;	author horacio;	state Exp;
branches;
next	1.135;

1.135
date	2002.06.14.23.51.16;	author nick;	state Exp;
branches;
next	1.134;

1.134
date	2002.05.30.17.22.05;	author nick;	state Exp;
branches;
next	1.133;

1.133
date	2002.05.23.13.10.11;	author dhartmei;	state Exp;
branches;
next	1.132;

1.132
date	2002.05.20.01.03.28;	author nick;	state Exp;
branches;
next	1.131;

1.131
date	2002.04.30.13.02.47;	author nick;	state Exp;
branches;
next	1.130;

1.130
date	2002.04.15.19.24.34;	author jufi;	state Exp;
branches;
next	1.129;

1.129
date	2002.03.27.08.54.17;	author mpech;	state Exp;
branches;
next	1.128;

1.128
date	2002.03.20.03.54.33;	author nick;	state Exp;
branches;
next	1.127;

1.127
date	2002.03.01.18.53.51;	author dhartmei;	state Exp;
branches;
next	1.126;

1.126
date	2002.01.27.22.51.50;	author nick;	state Exp;
branches;
next	1.125;

1.125
date	2002.01.26.00.17.54;	author horacio;	state Exp;
branches;
next	1.124;

1.124
date	2002.01.25.23.25.33;	author horacio;	state Exp;
branches;
next	1.123;

1.123
date	2002.01.25.20.15.35;	author chris;	state Exp;
branches;
next	1.122;

1.122
date	2002.01.25.03.44.02;	author nick;	state Exp;
branches;
next	1.121;

1.121
date	2002.01.21.20.28.25;	author nick;	state Exp;
branches;
next	1.120;

1.120
date	2002.01.20.06.04.50;	author kjell;	state Exp;
branches;
next	1.119;

1.119
date	2002.01.13.00.00.32;	author ericj;	state Exp;
branches;
next	1.118;

1.118
date	2002.01.12.01.39.30;	author ericj;	state Exp;
branches;
next	1.117;

1.117
date	2001.12.30.11.37.25;	author jufi;	state Exp;
branches;
next	1.116;

1.116
date	2001.12.23.03.09.52;	author miod;	state Exp;
branches;
next	1.115;

1.115
date	2001.12.10.23.06.26;	author ian;	state Exp;
branches;
next	1.114;

1.114
date	2001.12.10.09.06.58;	author dhartmei;	state Exp;
branches;
next	1.113;

1.113
date	2001.12.06.03.20.46;	author ericj;	state Exp;
branches;
next	1.112;

1.112
date	2001.12.01.07.03.59;	author jcs;	state Exp;
branches;
next	1.111;

1.111
date	2001.11.23.00.38.48;	author horacio;	state Exp;
branches;
next	1.110;

1.110
date	2001.11.20.12.59.01;	author horacio;	state Exp;
branches;
next	1.109;

1.109
date	2001.11.20.00.39.41;	author dhartmei;	state Exp;
branches;
next	1.108;

1.108
date	2001.11.19.20.59.00;	author horacio;	state Exp;
branches;
next	1.107;

1.107
date	2001.10.16.02.00.43;	author nick;	state Exp;
branches;
next	1.106;

1.106
date	2001.08.25.09.31.33;	author jufi;	state Exp;
branches;
next	1.105;

1.105
date	2001.08.23.22.01.27;	author heko;	state Exp;
branches;
next	1.104;

1.104
date	2001.08.23.20.34.40;	author heko;	state Exp;
branches;
next	1.103;

1.103
date	2001.08.23.15.27.26;	author wvdputte;	state Exp;
branches;
next	1.102;

1.102
date	2001.08.08.21.06.32;	author jsyn;	state Exp;
branches;
next	1.101;

1.101
date	2001.07.06.07.41.29;	author horacio;	state Exp;
branches;
next	1.100;

1.100
date	2001.06.14.22.57.01;	author fgsch;	state Exp;
branches;
next	1.99;

1.99
date	2001.05.06.16.33.15;	author jufi;	state Exp;
branches;
next	1.98;

1.98
date	2001.05.06.16.00.18;	author jufi;	state Exp;
branches;
next	1.97;

1.97
date	2001.05.05.04.34.09;	author ericj;	state Exp;
branches;
next	1.96;

1.96
date	2001.05.05.03.17.28;	author ericj;	state Exp;
branches;
next	1.95;

1.95
date	2001.05.05.02.50.04;	author ericj;	state Exp;
branches;
next	1.94;

1.94
date	2001.05.05.01.58.28;	author ericj;	state Exp;
branches;
next	1.93;

1.93
date	2001.04.18.17.59.57;	author ericj;	state Exp;
branches;
next	1.92;

1.92
date	2001.03.30.18.57.15;	author ericj;	state Exp;
branches;
next	1.91;

1.91
date	2001.03.27.17.40.26;	author jufi;	state Exp;
branches;
next	1.90;

1.90
date	2001.03.26.17.14.10;	author todd;	state Exp;
branches;
next	1.89;

1.89
date	2001.03.17.20.59.33;	author austin;	state Exp;
branches;
next	1.88;

1.88
date	2001.01.27.22.19.47;	author ericj;	state Exp;
branches;
next	1.87;

1.87
date	2001.01.13.20.15.52;	author ericj;	state Exp;
branches;
next	1.86;

1.86
date	2000.12.26.20.07.04;	author ericj;	state Exp;
branches;
next	1.85;

1.85
date	2000.12.26.17.06.36;	author ericj;	state Exp;
branches;
next	1.84;

1.84
date	2000.12.26.16.57.55;	author ericj;	state Exp;
branches;
next	1.83;

1.83
date	2000.11.30.04.58.09;	author ericj;	state Exp;
branches;
next	1.82;

1.82
date	2000.11.24.05.36.07;	author jeremy;	state Exp;
branches;
next	1.81;

1.81
date	2000.11.15.22.06.06;	author chris;	state Exp;
branches;
next	1.80;

1.80
date	2000.11.10.14.03.33;	author art;	state Exp;
branches;
next	1.79;

1.79
date	2000.09.17.16.13.49;	author jeremy;	state Exp;
branches;
next	1.78;

1.78
date	2000.09.15.21.23.34;	author jeremy;	state Exp;
branches;
next	1.77;

1.77
date	2000.09.14.19.09.10;	author ericj;	state Exp;
branches;
next	1.76;

1.76
date	2000.09.09.21.31.03;	author jeremy;	state Exp;
branches;
next	1.75;

1.75
date	2000.08.21.16.48.58;	author jufi;	state Exp;
branches;
next	1.74;

1.74
date	2000.07.18.09.02.47;	author reinhard;	state Exp;
branches;
next	1.73;

1.73
date	2000.05.26.19.43.44;	author reinhard;	state Exp;
branches;
next	1.72;

1.72
date	2000.05.26.07.10.33;	author chris;	state Exp;
branches;
next	1.71;

1.71
date	2000.05.16.20.42.16;	author ericj;	state Exp;
branches;
next	1.70;

1.70
date	2000.05.15.21.29.18;	author ericj;	state Exp;
branches;
next	1.69;

1.69
date	2000.05.15.01.27.42;	author ericj;	state Exp;
branches;
next	1.68;

1.68
date	2000.05.13.21.46.44;	author ericj;	state Exp;
branches;
next	1.67;

1.67
date	2000.05.13.06.27.04;	author ericj;	state Exp;
branches;
next	1.66;

1.66
date	2000.05.12.19.39.56;	author ericj;	state Exp;
branches;
next	1.65;

1.65
date	2000.05.12.19.12.57;	author ericj;	state Exp;
branches;
next	1.64;

1.64
date	2000.05.12.17.15.26;	author chris;	state Exp;
branches;
next	1.63;

1.63
date	2000.05.12.15.31.12;	author ericj;	state Exp;
branches;
next	1.62;

1.62
date	2000.05.12.15.29.41;	author ericj;	state Exp;
branches;
next	1.61;

1.61
date	2000.05.12.15.12.11;	author ericj;	state Exp;
branches;
next	1.60;

1.60
date	2000.05.12.15.10.18;	author ericj;	state Exp;
branches;
next	1.59;

1.59
date	2000.04.05.21.49.26;	author ericj;	state Exp;
branches;
next	1.58;

1.58
date	2000.03.25.00.05.05;	author wvdputte;	state Exp;
branches;
next	1.57;

1.57
date	2000.03.06.23.16.17;	author ericj;	state Exp;
branches;
next	1.56;

1.56
date	2000.03.05.01.20.37;	author ericj;	state Exp;
branches;
next	1.55;

1.55
date	2000.02.20.12.44.43;	author wvdputte;	state Exp;
branches;
next	1.54;

1.54
date	2000.02.12.21.35.42;	author aaron;	state Exp;
branches;
next	1.53;

1.53
date	2000.02.09.22.11.37;	author ericj;	state Exp;
branches;
next	1.52;

1.52
date	2000.01.20.23.08.34;	author ericj;	state Exp;
branches;
next	1.51;

1.51
date	2000.01.11.21.12.06;	author ericj;	state Exp;
branches;
next	1.50;

1.50
date	2000.01.09.08.19.56;	author ericj;	state Exp;
branches;
next	1.49;

1.49
date	2000.01.09.07.58.20;	author ericj;	state Exp;
branches;
next	1.48;

1.48
date	99.12.21.18.21.16;	author ericj;	state Exp;
branches;
next	1.47;

1.47
date	99.12.20.21.43.42;	author ericj;	state Exp;
branches;
next	1.46;

1.46
date	99.12.11.15.51.28;	author ericj;	state Exp;
branches;
next	1.45;

1.45
date	99.12.11.08.50.54;	author chris;	state Exp;
branches;
next	1.44;

1.44
date	99.12.11.05.45.56;	author ericj;	state Exp;
branches;
next	1.43;

1.43
date	99.12.06.01.27.18;	author ericj;	state Exp;
branches;
next	1.42;

1.42
date	99.11.11.07.23.16;	author ericj;	state Exp;
branches;
next	1.41;

1.41
date	99.11.11.00.29.40;	author ericj;	state Exp;
branches;
next	1.40;

1.40
date	99.11.01.06.15.36;	author ericj;	state Exp;
branches;
next	1.39;

1.39
date	99.10.15.16.04.22;	author ericj;	state Exp;
branches;
next	1.38;

1.38
date	99.10.11.22.46.04;	author ericj;	state Exp;
branches;
next	1.37;

1.37
date	99.10.07.19.14.08;	author chris;	state Exp;
branches;
next	1.36;

1.36
date	99.10.07.19.05.49;	author chris;	state Exp;
branches;
next	1.35;

1.35
date	99.10.07.16.39.41;	author chris;	state Exp;
branches;
next	1.34;

1.34
date	99.10.07.05.56.04;	author chris;	state Exp;
branches;
next	1.33;

1.33
date	99.10.07.04.57.24;	author chris;	state Exp;
branches;
next	1.32;

1.32
date	99.10.06.07.02.01;	author beck;	state Exp;
branches;
next	1.31;

1.31
date	99.10.04.15.08.13;	author chris;	state Exp;
branches;
next	1.30;

1.30
date	99.09.28.20.01.59;	author ericj;	state Exp;
branches;
next	1.29;

1.29
date	99.09.24.20.03.44;	author ericj;	state Exp;
branches;
next	1.28;

1.28
date	99.09.24.17.59.35;	author ericj;	state Exp;
branches;
next	1.27;

1.27
date	99.09.24.01.46.14;	author ericj;	state Exp;
branches;
next	1.26;

1.26
date	99.09.15.13.44.59;	author ericj;	state Exp;
branches;
next	1.25;

1.25
date	99.09.15.02.39.47;	author ericj;	state Exp;
branches;
next	1.24;

1.24
date	99.09.07.18.30.16;	author ericj;	state Exp;
branches;
next	1.23;

1.23
date	99.09.07.18.05.24;	author ericj;	state Exp;
branches;
next	1.22;

1.22
date	99.07.26.17.38.46;	author ericj;	state Exp;
branches;
next	1.21;

1.21
date	99.07.07.23.23.42;	author ericj;	state Exp;
branches;
next	1.20;

1.20
date	99.07.05.01.22.42;	author ericj;	state Exp;
branches;
next	1.19;

1.19
date	99.07.03.05.51.35;	author ericj;	state Exp;
branches;
next	1.18;

1.18
date	99.06.30.16.01.27;	author ericj;	state Exp;
branches;
next	1.17;

1.17
date	99.06.28.18.55.20;	author ericj;	state Exp;
branches;
next	1.16;

1.16
date	99.06.27.21.32.23;	author ericj;	state Exp;
branches;
next	1.15;

1.15
date	99.06.25.20.32.53;	author ericj;	state Exp;
branches;
next	1.14;

1.14
date	99.06.24.21.54.51;	author ericj;	state Exp;
branches;
next	1.13;

1.13
date	99.06.09.00.04.28;	author wvdputte;	state Exp;
branches;
next	1.12;

1.12
date	99.05.21.03.47.25;	author ericj;	state Exp;
branches;
next	1.11;

1.11
date	99.05.21.02.44.00;	author ericj;	state Exp;
branches;
next	1.10;

1.10
date	99.04.19.20.13.54;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	99.04.08.22.54.43;	author ericj;	state Exp;
branches;
next	1.8;

1.8
date	99.03.14.19.19.20;	author ericj;	state Exp;
branches;
next	1.7;

1.7
date	99.02.28.04.59.21;	author ericj;	state Exp;
branches;
next	1.6;

1.6
date	99.02.21.21.44.05;	author wvdputte;	state Exp;
branches;
next	1.5;

1.5
date	99.02.11.18.10.11;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	99.01.05.02.52.18;	author ericj;	state Exp;
branches;
next	1.3;

1.3
date	99.01.04.22.28.19;	author ericj;	state Exp;
branches;
next	1.2;

1.2
date	99.01.02.20.00.36;	author ericj;	state Exp;
branches;
next	1.1;

1.1
date	98.12.17.21.00.34;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.435
log
@a few more links can switch to https.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD FAQ: Networking</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="copyright" content="This document copyright 1998-2017 by OpenBSD.">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/faq6.html">
</head>

<body bgcolor="#ffffff" text="#000000">

<h2>
<a href="../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">FAQ - Networking</font>
<small>
<a href="index.html" style="font-weight:normal; float:right">[FAQ Index]</a>
</small>
</h2>
<hr>

<ul>
<li><a href="#Setup"           >Network configuration</a>
<ul>
  <li><a href="#Setup.if"      >Identifying and setting up your
                                network interfaces</a>
  <li><a href="#Setup.gateway" >Default hostname and gateway</a>
  <li><a href="#Setup.resolver">DNS resolution</a>
  <li><a href="#Setup.activate">Activating the changes</a>
  <li><a href="#Setup.chkroute">Checking routes</a>
  <li><a href="#Setup.aliases" >Setting up aliases on interfaces</a>
</ul>
<li><a href="#DHCP"            >Dynamic Host Configuration Protocol</a>
<li><a href="#Wireless"        >Wireless networking</a>
<li><a href="#Bridge"          >Setting up a network bridge</a>
<li><a href="#Multipath"       >Equal-cost multipath routing</a>
<li><a href="#NFS"             >Using NFS</a>
</ul>

<hr>

<h2 id="Setup">Network configuration</h2>

Network configuration in OpenBSD is done with text files in <tt>/etc</tt>.
Typically, these settings are initially configured during the
<a href="faq4.html">installation process</a>.

<h3 id="Setup.if">Identifying and setting up your network interfaces</h3>

Interfaces are named by the type of card, not the type of connection.
For example, here's a <a href="http://man.openbsd.org/dmesg">dmesg(8)</a>
snippet for an Intel Fast Ethernet network card:

<blockquote><pre>
fxp0 at pci0 dev 10 function 0 "Intel 82557" rev 0x0c: irq 5, address 00:02:b3:2b:10:f7
inphy0 at fxp0 phy 1: i82555 10/100 media interface, rev. 4
</pre></blockquote>

This device uses the <a href="http://man.openbsd.org/fxp">fxp(4)</a> driver
and is assigned the number 0 here.

<p>
You can find out what network interfaces have been identified by using the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> utility.
The following command will show all network interfaces on a system.

<blockquote><pre>
$ <b>ifconfig</b>
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 33200
        index 3 priority 0 llprio 3
        groups: lo
        inet 127.0.0.1 netmask 0xff000000
fxp0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
        lladdr 00:02:b3:2b:10:f7
        index 1 priority 0 llprio 3
        media: Ethernet autoselect (100baseTX full-duplex)
        status: active
        inet 10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255
enc0: flags=0&lt;&gt;
        index 2 priority 0 llprio 3
        groups: enc
        status: active
pflog0: flags=141&lt;UP,RUNNING,PROMISC&gt; mtu 33200
        index 4 priority 0 llprio 3
        groups: pflog
</pre></blockquote>

This sample shows only one physical Ethernet interface: <tt>fxp0</tt>.
An IP is configured on it, hence the values
<tt>inet 10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255</tt>.
The <tt>UP</tt> and <tt>RUNNING</tt> flags are also set on it.

<p>
The <a href="http://man.openbsd.org/netstart">netstart(8)</a> script configures
network interfaces at boot time using
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> files, where
"if" is replaced by the full name of each interface.
The example above would use the file <tt>/etc/hostname.fxp0</tt>, containing
the following options:

<blockquote><pre>
inet 10.0.0.38 255.255.255.0
</pre></blockquote>

This <tt>hostname.fxp0</tt> file also has an interactive equivalent:

<blockquote><pre>
# <b>ifconfig fxp0 10.0.0.38 255.255.255.0</b>
</pre></blockquote>

Finally, you will notice several other interfaces come enabled by default.
These are virtual interfaces that serve various functions.
The following manual pages describe them:

<ul>
  <li><a href="http://man.openbsd.org/enc">enc</a>
    - Encapsulating interface
  <li><a href="http://man.openbsd.org/lo">lo</a>
    - Loopback interface
  <li><a href="http://man.openbsd.org/pflog">pflog</a>
    - Packet Filter logging interface
</ul>

Other virtual interfaces can be added with
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>'s <tt>create</tt>
subcommand.

<h3 id="Setup.gateway">Default hostname and gateway</h3>

The <tt>/etc/myname</tt> and <tt>/etc/mygate</tt> files are read by the
<a href="http://man.openbsd.org/netstart">netstart(8)</a> script.
Both of these files consist of a single line, specifying the fully qualified
domain name of the system and the address of the gateway host, respectively.
The <tt>/etc/mygate</tt> file need not exist on all systems.
See <a href="http://man.openbsd.org/myname">myname(5)</a> for more details.

<h3 id="Setup.resolver">DNS resolution</h3>

DNS resolution is controlled by
<a href="http://man.openbsd.org/resolv.conf">resolv.conf(5)</a>.

<blockquote><pre>
$ <b>cat /etc/resolv.conf</b>
search example.com
nameserver 125.2.3.4
nameserver 125.2.3.5
lookup file bind
</pre></blockquote>

Here, the default domain name will be <tt>example.com</tt>, there will be two
DNS resolvers, <tt>125.2.3.4</tt> and <tt>125.2.3.5</tt>, and the
<a href="http://man.openbsd.org/hosts">hosts(5)</a> file will be consulted
before the DNS resolvers are.

<h3 id="Setup.activate">Activating the changes</h3>

From here, you can either reboot or run the
<a href="http://man.openbsd.org/netstart">netstart(8)</a> script:

<blockquote><pre>
# <b>sh /etc/netstart</b>
</pre></blockquote>

Note that a few warnings may be produced when running this script if you are
reconfiguring interfaces that have already been configured.
Use <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> to make sure that
your interfaces were set up correctly.

<p>
Even though you can completely reconfigure networking on a running OpenBSD
system, a reboot is recommended after any significant reconfiguration.

<h3 id="Setup.chkroute">Checking routes</h3>

You can check your routes via
<a href="http://man.openbsd.org/netstat">netstat(1)</a> or
<a href="http://man.openbsd.org/route">route(8)</a>.

<blockquote><pre>
$ <b>netstat -rn</b>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use    Mtu  Prio Interface
default            10.0.0.1           UGS         4       16      -    12 fxp0
224/4              127.0.0.1          URS         0        0  32768     8 lo0
127/8              127.0.0.1          UGRS        0        0  32768     8 lo0
127.0.0.1          127.0.0.1          UH          2       15  32768     1 lo0
10.0.0/24          link#1             UC          1        4      -     4 fxp0
10.0.0.1           aa:0:4:0:81:d      UHL         1       11      -     1 fxp0
10.0.0.38          127.0.0.1          UGHS        0        0      -     1 lo0

$ <b>route show</b>
Routing tables

Internet:
Destination        Gateway            Flags     Refs     Use    Mtu  Prio Iface
default            10.0.0.1           UGS         4       16      -    12 fxp0
base-address.mcast localhost          URS         0        0  32768     8 lo0
loopback           localhost          UGRS        0        0  32768     8 lo0
localhost          localhost          UH          2       15  32768     1 lo0
10.0.0/24          link#1             UC          1        4      -     4 fxp0
10.0.0.1           aa:0:4:0:81:d      UHL         1       11      -     1 fxp0
10.0.0.38          localhost          UGHS        0        0      -     1 lo0
</pre></blockquote>

<h3 id="Setup.aliases">Setting up aliases on an interface</h3>

To set up an IP alias on an interface, simply edit its
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> file.

<p>
Suppose you have a <tt>dc0</tt> interface.
You are on the network <tt>192.168.0.0</tt>, the IP address for <tt>dc0</tt> is
<tt>192.168.0.2</tt> and the netmask is <tt>255.255.255.0</tt>.

<p>
Assuming you are using multiple IP addresses which are in the same subnet
with aliases, your netmask setting for each alias becomes
<tt>255.255.255.255</tt>.
They do not need to follow the netmask of the first IP bound to the interface.
In this example, two aliases are added to the interface <tt>dc0</tt>, which was
configured as <tt>192.168.0.2</tt> with a netmask of <tt>255.255.255.0</tt>.

<blockquote><pre>
$ <b>cat /etc/hostname.dc0</b>
inet 192.168.0.2 255.255.255.0
inet alias 192.168.0.3 255.255.255.255
inet alias 192.168.0.4 255.255.255.255
</pre></blockquote>

Once you've created this file, <a href="#Setup.activate">run netstart</a> or
reboot.
To view all aliases, use <tt>ifconfig -A</tt>.

<h2 id="DHCP">Dynamic Host Configuration Protocol</h2>

The Dynamic Host Configuration Protocol (DHCP) is a way to configure network
interfaces automatically.
OpenBSD can be a DHCP server that configures other machines, or a DHCP client
that is configured by a DHCP server.

<h3 id="DHCPclient">DHCP client</h3>

To use <a href="http://man.openbsd.org/dhclient">dhclient(8)</a>, edit the
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> file of your
interface.
The <a href="#Wireless">wireless networking</a> section explains how to
set up wireless interfaces.
For ethernet interfaces, one line is enough:

<blockquote><pre>
dhcp
</pre></blockquote>

OpenBSD will gather its IP address, default gateway and DNS servers from
the DHCP server at startup time.

<p>
If you want to get an IP via DHCP from the command line, simply run:

<blockquote><pre>
# <b>dhclient xl0</b>
</pre></blockquote>

Replace <tt>xl0</tt> with your interface name.

<p>
Once the interface is configured, the <tt>/etc/resolv.conf</tt> file will
be overwritten.
You can customize the resolver configuration by using settings in
<a href="http://man.openbsd.org/dhclient.conf">dhclient.conf(5)</a> and using
<a href="http://man.openbsd.org/resolv.conf.tail">resolv.conf.tail(5)</a>.
To prevent the DHCP server from overriding the DNS server you configured in
<tt>/etc/resolv.conf.tail</tt>, add <tt>ignore domain-name-servers;</tt>
to your <tt>/etc/dhclient.conf</tt>.

<h3 id="DHCPserver">DHCP server</h3>

If you want to use OpenBSD as a DHCP server, enable the
<a href="http://man.openbsd.org/dhcpd">dhcpd(8)</a> daemon at startup.

<blockquote><pre>
# <b>rcctl enable dhcpd</b>
</pre></blockquote>

On the next boot, dhcpd will run and attach to all NICs that have valid
configurations in <a href="http://man.openbsd.org/dhcpd.conf">dhcpd.conf(5)</a>.
You may specify individual interfaces instead by naming them explicitly.

<blockquote><pre>
# <b>rcctl set dhcpd flags em1 em2</b>
</pre></blockquote>

An example <tt>/etc/dhcpd.conf</tt> file might look like this:

<blockquote><pre>
# Home
subnet 192.168.1.0 netmask 255.255.255.0 {
	option domain-name-servers 192.168.1.2;
	option routers 192.168.1.1;
	range 192.168.1.3 192.168.1.50;
}

# Guests
subnet 172.16.0.0 netmask 255.255.255.0 {
	option domain-name-servers 209.244.0.3, 8.8.8.8;
	option routers 172.16.0.1;
	range 172.16.0.2 172.16.0.254;
}
</pre></blockquote>

There are two subnets in this example: a home network and a guest network.
Clients will automatically be given an IP address and pointed to the gateway
and DNS servers you specify.
See <a href="http://man.openbsd.org/dhcp-options">dhcp-options(5)</a> for more
options.

<h3 id="PXE">PXE booting (i386, amd64)</h3>

The Preboot Execution Environment (PXE) is a standard method of booting systems
using only the network.
A client's PXE-capable NIC broadcasts a DHCP request at the start of the
<a href="faq14.html#BootAmd64">boot process</a> and, rather than only receiving
basic IP/DNS information, is also given a file to boot from.
On OpenBSD, this file is known as
<a href="http://man.openbsd.org/pxeboot">pxeboot(8)</a>, and is typically
served by <a href="http://man.openbsd.org/tftpd">tftpd(8)</a>.

<h2 id="Wireless">Wireless networking</h2>

OpenBSD has support for
<a href="http://man.openbsd.org/?query=wireless&amp;apropos=1">a number of
wireless chipsets</a>.
Further supported devices can be found in
<a href="http://man.openbsd.org/usb">usb(4)</a> and
<a href="http://man.openbsd.org/pci">pci(4)</a>.
The precise extent of their support is described in the driver man pages.

<p>
The following cards support Host-based Access Point (HostAP) mode, permitting
them to be used as a wireless access point:

<ul>
  <li><a href="http://man.openbsd.org/acx">acx(4)</a>
    TI ACX100/ACX111
  <li><a href="http://man.openbsd.org/ath">ath(4)</a>
    Atheros 802.11a/b/g
  <li><a href="http://man.openbsd.org/athn">athn(4)</a>
    Atheros 802.11/a/g/n devices
  <li><a href="http://man.openbsd.org/pgt">pgt(4)</a>
    Conexant/Intersil Prism GT Full-MAC 802.11a/b/g
  <li><a href="http://man.openbsd.org/ral">ral(4)</a>
    and <a href="http://man.openbsd.org/ural">ural(4)</a>
    Ralink Technology RT25x0 802.11a/b/g
  <li><a href="http://man.openbsd.org/rtw">rtw(4)</a>
    Realtek 8180 802.11b
  <li><a href="http://man.openbsd.org/rum">rum(4)</a>
    Ralink Technology RT2501USB
  <li><a href="http://man.openbsd.org/wi">wi(4)</a>
    Prism2/2.5/3
</ul>

The <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> <tt>media</tt>
subcommand shows media capabilities of network interfaces.
For wireless devices, it displays supported 802.11a/b/g/n media modes and the
supported operating modes (<tt>hostap</tt>, <tt>ibss</tt>, <tt>monitor</tt>).
For example, to see media capabilities of interface <tt>ath0</tt>, type:

<blockquote><pre>
$ <b>ifconfig ath0 media</b>
</pre></blockquote>

In order to use some wireless cards, you will need to acquire firmware files
with <a href="http://man.openbsd.org/fw_update">fw_update(1)</a>.
Some manufacturers refuse to allow <a href="faq1.html#ReallyFree">free</a>
distribution of their firmware, so it can't be included with OpenBSD.

<p>
Another option to consider: use a conventional NIC and an external bridging
wireless access point for your OpenBSD-based firewall.
This has the added advantage of letting you easily position the antenna where it
is most effective, which is often not directly on the back of your firewall.

<h3>Configuring your wireless adapter</h3>

Adapters based on supported chips can be used like any other network interface.
To connect an OpenBSD system to an existing wireless network, use the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> utility.

<p>
An example of a <a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a>
file for a wireless client might be:

<blockquote><pre>
nwid puffyuberalles
wpakey puffyguffy
dhcp
</pre></blockquote>

Note that the <tt>dhcp</tt> keyword should be after the other configuration
lines, as the network adapter will not be able to send a DHCP request until
it is configured.

<p>
The corresponding access point might be configured like this:

<blockquote><pre>
media autoselect mode 11n mediaopt hostap chan 1
nwid puffyuberalles
wpakey puffyguffy
inet 192.168.1.1 255.255.255.0
</pre></blockquote>

<h3>Trunking your wireless adapter</h3>

Trunks are virtual interfaces consisting of one or more network interfaces.
In this section, our example will be a laptop with a wired
<a href="http://man.openbsd.org/bge">bge0</a> interface and a wireless
<a href="http://man.openbsd.org/iwn">iwn0</a> interface.
We will build a <a href="http://man.openbsd.org/trunk">trunk(4)</a> interface
using both of them.

<p>
To do this, we first activate the two physical ports, then assign them to
<tt>trunk0</tt>.

<blockquote><pre>
# <b>echo up > /etc/hostname.bge0</b>
</pre></blockquote>

The wireless interface, however, needs a bit more configuration.
It will need to attach to our wireless WPA-protected network:

<blockquote><pre>
$ <b>cat /etc/hostname.iwn0</b>
nwid puffynet
wpakey mysecretkey
up
</pre></blockquote>

Now, our trunk interface is defined like this:

<blockquote><pre>
$ <b>cat /etc/hostname.trunk0</b>
trunkproto failover trunkport bge0
trunkport iwn0
dhcp
</pre></blockquote>

The trunk is set up in <tt>failover</tt> mode, so either interface can be used.
If both are available, it will prefer the <tt>bge0</tt> port, since that is the
first one added to the trunk device.

<h2 id="Bridge">Setting up a network bridge</h2>

A <a href="http://man.openbsd.org/bridge">bridge(4)</a> is a link between two or
more separate networks.
Unlike a router, packets go through the bridge transparently -- the two network
segments appear as one to nodes on either side.
Bridges will only forward packets that have to pass from one segment to the
other and, as a result, an interface in a bridge may or may not have an IP
address of its own.
If it does, the interface has effectively two modes of operation: one as part
of a bridge, the other as a stand-alone NIC.
If neither interface has an IP address, the bridge will pass network data,
but will not be externally maintainable (which can be a feature).

<h3>A bridge acting as a DHCP server</h3>

Let's say we have a system which has four
<a href="http://man.openbsd.org/vr">vr(4)</a> interfaces, <tt>vr0</tt> through
<tt>vr3</tt>.
We want to bridge <tt>vr1</tt>, <tt>vr2</tt> and <tt>vr3</tt> together, leaving
out <tt>vr0</tt> for the uplink.
We also want to serve IP addresses through DHCP over the bridged interfaces.
Being a DHCP server and an uplink router, the box needs to have an IP address
on the bridged network.

<p>
It is not possible to assign an IP address directly to a bridge interface.
The IP address should be added to one of the member interfaces, but we cannot
use a physical interface as the link might be down, in which case the address
would not be reachable.
Fortunately, there is the <a href="http://man.openbsd.org/vether">vether(4)</a>
(virtual Ethernet) driver that can be used for this purpose.
We will add it to the bridge, assign the IP address to it and make
<a href="http://man.openbsd.org/dhcpd">dhcpd(8)</a> listen there.

<ul>
  <li>The <a href="#DHCPserver">DHCP server configuration</a> is not described
      yet again in this section, but the addressing scheme used here is the same.
  <li>This will also be the uplink router for your bridged network, so we will
      use IP address 192.168.1.1 to match the DHCP server configuration.
  <li>We will not cover the uplink, routing or firewalling configuration here.
</ul>

First, mark the <tt>vr1</tt>, <tt>vr2</tt> and <tt>vr3</tt> interfaces as up:

<blockquote><pre>
# <b>echo up > /etc/hostname.vr1</b>
# <b>echo up > /etc/hostname.vr2</b>
# <b>echo up > /etc/hostname.vr3</b>
</pre></blockquote>

Then create the <tt>vether0</tt> configuration:

<blockquote><pre>
# <b>echo 'inet 192.168.1.1 255.255.255.0 192.168.1.255' > /etc/hostname.vether0</b>
</pre></blockquote>

Configure the bridge interface to contain all the above interfaces:

<blockquote><pre>
$ <b>cat /etc/hostname.bridge0</b>
add vether0
add vr1
add vr2
add vr3
up
</pre></blockquote>

And finally we make the DHCP daemon listen on the <tt>vether0</tt> interface:

<blockquote><pre>
# <b>rcctl set dhcpd flags vether0</b>
</pre></blockquote>

Reboot, and voil&agrave;!

<h3>Filtering on a bridge</h3>

While there are certainly uses for a simple bridge like this, it is likely you
might want to DO something with the packets as they go through your bridge.
As you might expect, <a href="pf/index.html">Packet Filter</a> can be used to
restrict what traffic goes through your bridge.
Keep in mind, by the nature of a bridge, the same data flows through both
interfaces, so you only need to filter on one interface.

<h3>Tips on bridging</h3>

<ul>
  <li>By using the <tt>blocknonip</tt> option of
      <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> or in
      <a href="http://man.openbsd.org/hostname.if">hostname.bridge0</a>, you can
      prevent non-IP traffic (such as IPX or NETBEUI) from slipping around your
      filters.
      This may be important in some situations, but you should be aware that
      bridges work for all kinds of traffic, not just IP.
  <li>Bridging requires that the NICs be in a promiscuous mode -- they listen
      to <b>all</b> network traffic, not just that directed at the interface.
      This will put a higher load on the processor and bus than one might expect.
</ul>

<h2 id="Multipath">Equal-cost multipath routing</h2>

Equal-cost multipath routing refers to having multiple routes in the routing
table for the same network, such as the default route, <tt>0.0.0.0/0</tt>.
When the kernel is doing a route lookup to determine where to send packets
destined to that network, it can choose from any of the equal-cost routes.
In most scenarios, multipath routing is used to provide redundant uplink
connections, e.g., redundant connections to the internet.

<p>
The <a href="http://man.openbsd.org/route">route(8)</a> command is used to
add/change/delete routes in the routing table.
The <tt>-mpath</tt> argument is used when adding multipath routes.

<blockquote><pre>
# <b>route add -mpath default 10.130.128.1</b>
# <b>route add -mpath default 10.132.0.1</b>
</pre></blockquote>

Verify the routes:

<blockquote><pre>
# <b>netstat -rnf inet | grep default</b>
default     10.130.128.1      UGS       2      134      -     fxp1
default     10.132.0.1        UGS       0      172      -     fxp2
</pre></blockquote>

In this example we can see that one default route points to
<tt>10.130.128.1</tt>, which is accessible via the <tt>fxp1</tt> interface, and
the other points to <tt>10.132.0.1</tt>, which is accessible via <tt>fxp2</tt>.

<p>
Since the <a href="http://man.openbsd.org/mygate">mygate(5)</a> file does not
yet support multipath default routes, the above commands should be added to the
bottom of the <a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a>
files for the <tt>fxp1</tt> and <tt>fxp2</tt> interfaces.
The <tt>/etc/mygate</tt> file should then be deleted.

<blockquote><pre>
$ <b>tail -1 /etc/hostname.fxp1</b>
!route add -mpath default 10.130.128.1
$ <b>tail -1 /etc/hostname.fxp2</b>
!route add -mpath default 10.132.0.1
</pre></blockquote>

Lastly, don't forget to activate the use of multipath routes by enabling the
proper <a href="http://man.openbsd.org/sysctl">sysctl(8)</a> variable.

<blockquote><pre>
# <b>sysctl net.inet.ip.multipath=1</b>
# <b>sysctl net.inet6.ip6.multipath=1</b>
</pre></blockquote>

Be sure to edit <a href="http://man.openbsd.org/sysctl.conf">sysctl.conf(5)</a>
to make the changes permanent.

<p>
Now try a traceroute to different destinations.
The kernel will load balance the traffic over each multipath route.

<blockquote><pre>
# <b>traceroute -n 154.11.0.4</b>
traceroute to 154.11.0.4 (154.11.0.4), 64 hops max, 60 byte packets
 1  10.130.128.1  19.337 ms  18.194 ms  18.849 ms
 2  154.11.95.170  17.642 ms  18.176 ms  17.731 ms
 3  154.11.5.33  110.486 ms  19.478 ms  100.949 ms
 4  154.11.0.4  32.772 ms  33.534 ms  32.835 ms

# <b>traceroute -n 154.11.0.5</b>
traceroute to 154.11.0.5 (154.11.0.5), 64 hops max, 60 byte packets
 1  10.132.0.1  14.175 ms  14.503 ms  14.58 ms
 2  154.11.95.38  13.664 ms  13.962 ms  13.445 ms
 3  208.38.16.151  13.964 ms  13.347 ms  13.788 ms
 4  154.11.0.5  30.177 ms  30.95 ms  30.593 ms
</pre></blockquote>

For more information about how the route is chosen, please refer to
<a href="https://www.ietf.org/rfc/rfc2992.txt">RFC2992</a>, "Analysis of an
Equal-Cost Multi-Path Algorithm".

<p>
It's worth noting that if an interface used by a multipath route goes down
(i.e., loses carrier), the kernel will still try to forward packets using the
route that points to that interface.
This traffic will of course be blackholed and end up going nowhere.
It's highly recommended to use
<a href="http://man.openbsd.org/ifstated">ifstated(8)</a> to check for
unavailable interfaces and adjust the routing table accordingly.

<h2 id="NFS">Using NFS</h2>

The Network File System, NFS, is used to share a filesystem over the network.

<p>
This section will go through the steps for a simple NFS setup.
The example details a server on a LAN, with clients accessing NFS on the LAN.
It does not cover securing NFS.
We presume you have already set up packet filtering or other firewalling
protection to prevent outside access.

<h3>Setting up an NFS server</h3>

First, enable the <a href="http://man.openbsd.org/portmap">portmap(8)</a>,
<a href="http://man.openbsd.org/mountd">mountd(8)</a> and
<a href="http://man.openbsd.org/nfsd">nfsd(8)</a> services on the server:

<blockquote><pre>
# <b>rcctl enable portmap mountd nfsd</b>
</pre></blockquote>

Then configure the list of filesystems that will be made available.

<p>
In this example, we have a server with IP address <tt>10.0.0.1</tt>.
This server will be serving NFS only to clients within its own subnet.
This is configured in the following
<a href="http://man.openbsd.org/exports">exports(5)</a> file:

<blockquote><pre>
$ <b>cat /etc/exports</b>
/work -alldirs -ro -network=10.0.0 -mask=255.255.255.0
</pre></blockquote>

The local filesystem <tt>/work</tt> will be made available via NFS.
The <tt>-alldirs</tt> option specifies that clients will be able to mount at any
point under <tt>/work</tt> as well as <tt>/work</tt> itself.
The <tt>-ro</tt> option specifies that clients will only be granted read-only
access.
The last two arguments specify that only clients within the <tt>10.0.0.0</tt>
network using a netmask of <tt>255.255.255.0</tt> will be authorized to mount
this filesystem.

<p>
Now you can start the server services.

<blockquote><pre>
# <b>rcctl start portmap mountd nfsd</b>
</pre></blockquote>

If you make changes to <tt>/etc/exports</tt> while NFS is already running, you
need to make mountd aware of this:

<blockquote><pre>
# <b>rcctl reload mountd</b>
</pre></blockquote>

<h3>Mounting NFS Filesystems</h3>

NFS filesystems should be mounted via
<a href="http://man.openbsd.org/mount_nfs">mount(8)</a>, or more specifically,
<a href="http://man.openbsd.org/mount_nfs">mount_nfs(8)</a>.

<p>
To mount the <tt>/work</tt> filesystem on host <tt>10.0.0.1</tt> to local
filesystem <tt>/mnt</tt>, run:

<blockquote><pre>
# <b>mount -t nfs 10.0.0.1:/work /mnt</b>
</pre></blockquote>

To have that filesystem mounted at boot, append a line to your
<a href="http://man.openbsd.org/fstab">fstab(5)</a>:

<blockquote><pre>
# <b>echo '10.0.0.1:/work /mnt nfs rw,nodev,nosuid 0 0' >> /etc/fstab</b>
</pre></blockquote>

It is important that you use <tt>0 0</tt> at the end of this line so that your
computer does not try to <a href="http://man.openbsd.org/fsck">fsck(8)</a> the
NFS filesystem on boot.

<p>
When accessing an NFS mount as the root user, the server automatically maps
root's access to username <tt>nobody</tt> and group <tt>nobody</tt>.
This is important to know when considering file permissions.
For example, take a file with these permissions:

<blockquote><pre>
-rw-------    1 root     wheel           0 Dec 31 03:00 _daily.B20143
</pre></blockquote>

If this file was on an NFS share and the root user tried to access this file
from the NFS client, access would be denied.

<p>
The user and group that root are mapped to are configurable via the
<a href="http://man.openbsd.org/export">exports(5)</a> file on the NFS server.

<h3>Checking Stats on NFS</h3>

One thing to check to ensure NFS is operating properly is that all the daemons
have properly registered with RPC.
To do this, use <a href="http://man.openbsd.org/rpcinfo">rpcinfo(8)</a>.

<blockquote><pre>
$ <b>rpcinfo -p 10.0.0.1</b>
   program vers proto   port
    100000    2   tcp    111  portmapper
    100000    2   udp    111  portmapper
    100005    1   udp    633  mountd
    100005    3   udp    633  mountd
    100005    1   tcp    916  mountd
    100005    3   tcp    916  mountd
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
</pre></blockquote>

There are a few utilities that allow you to see what is happening with NFS.
<a href="http://man.openbsd.org/showmount">showmount(8)</a> allows you to view
what is currently mounted by whom.
There is also <a href="http://man.openbsd.org/nfsstat">nfsstat(1)</a>, which
shows much more verbose statistics.

<p>
</body>
</html>
@


1.434
log
@lists aren't really documentation, so zap incomplete list of virtual
interfaces.

ok tj
@
text
@d639 1
a639 1
<a href="http://www.ietf.org/rfc/rfc2992.txt">RFC2992</a>, "Analysis of an
@


1.433
log
@validation fix: </h2> -> </h3>
@
text
@a133 31
These include, but are not limited to:

<ul>
  <li><a href="http://man.openbsd.org/bridge">bridge</a>
    - Ethernet bridge interface
  <li><a href="http://man.openbsd.org/carp.4">carp</a>
    - Common Address Redundancy Protocol interface
  <li><a href="http://man.openbsd.org/gif">gif</a>
    - Generic IPv4/IPv6 tunnel interface
  <li><a href="http://man.openbsd.org/gre">gre</a>
    - GRE/MobileIP encapsulation interface
  <li><a href="http://man.openbsd.org/mpe">mpe</a>
    - MPLS Provider Edge
  <li><a href="http://man.openbsd.org/ppp">ppp</a>
    - Point-to-Point Protocol interface
  <li><a href="http://man.openbsd.org/svlan">svlan</a>
    - IEEE 802.1AD provider bridges (QinQ)
  <li><a href="http://man.openbsd.org/trunk">trunk</a>
    - Link aggregation and link failover interface
  <li><a href="http://man.openbsd.org/tun">tun</a>
    - Tunnel network interface
  <li><a href="http://man.openbsd.org/vether">vether</a>
    - Virtual Ethernet interface
  <li><a href="http://man.openbsd.org/vlan">vlan</a>
    - IEEE 802.1Q encapsulation interface
  <li><a href="http://man.openbsd.org/vxlan">vxlan</a>
    - Virtual eXtensible Local Area Network tunnel Interface
</ul>

For a complete listing of virtual interfaces, refer to the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> man page.
@


1.432
log
@move nfs section to the end and some minor tweaks.

with tj
@
text
@d357 1
a357 1
<h3 id="PXE">PXE booting (i386, amd64)</h2>
@


1.431
log
@remove many redundant explanations, repeated concepts, campfire stories
about systems with 10mbit nics, etc.

input/ok tb
@
text
@d40 1
a40 6
<li><a href= "#DHCP"           >Dynamic Host Configuration Protocol</a>
<ul>
  <li><a href="#DHCPclient"    >DHCP client</a>
  <li><a href="#DHCPserver"    >DHCP server</a>
</ul>
<li><a href="#PXE"             >PXE booting</a>
a41 1
<li><a href="#NFS"             >Using NFS</a>
d44 1
d123 2
d126 1
a126 1
    - loopback interface
a128 2
  <li><a href="http://man.openbsd.org/enc">enc</a>
    - encapsulating interface
d357 1
a357 1
<h2 id="PXE">PXE booting (i386, amd64)</h2>
a492 126
<h2 id="NFS">Using NFS</h2>

The Network File System, NFS, is used to share a filesystem over the network.

<p>
This section will go through the steps for a simple NFS setup.
The example details a server on a LAN, with clients accessing NFS on the LAN.
It does not cover securing NFS.
We presume you have already set up packet filtering or other firewalling
protection to prevent outside access.

<h3>Setting up an NFS server</h3>

First, enable the <a href="http://man.openbsd.org/portmap">portmap(8)</a>,
<a href="http://man.openbsd.org/mountd">mountd(8)</a> and
<a href="http://man.openbsd.org/nfsd">nfsd(8)</a> services on the server:

<blockquote><pre>
# <b>rcctl enable portmap mountd nfsd</b>
</pre></blockquote>

Then configure the list of filesystems that will be made available.

<p>
In this example, we have a server with IP address <tt>10.0.0.1</tt>.
This server will be serving NFS only to clients within its own subnet.
This is configured in the following
<a href="http://man.openbsd.org/exports">exports(5)</a> file:

<blockquote><pre>
$ <b>cat /etc/exports</b>
/work -alldirs -ro -network=10.0.0 -mask=255.255.255.0
</pre></blockquote>

The local filesystem <tt>/work</tt> will be made available via NFS.
The <tt>-alldirs</tt> option specifies that clients will be able to mount at any
point under <tt>/work</tt> as well as <tt>/work</tt> itself.
The <tt>-ro</tt> option specifies that clients will only be granted read-only
access.
The last two arguments specify that only clients within the <tt>10.0.0.0</tt>
network using a netmask of <tt>255.255.255.0</tt> will be authorized to mount
this filesystem.

<p>
Now you can start the server services.

<blockquote><pre>
# <b>rcctl start portmap mountd nfsd</b>
</pre></blockquote>

If you make changes to <tt>/etc/exports</tt> while NFS is already running, you
need to make mountd aware of this:

<blockquote><pre>
# <b>rcctl reload mountd</b>
</pre></blockquote>

<h3>Mounting NFS Filesystems</h3>

NFS filesystems should be mounted via
<a href="http://man.openbsd.org/mount_nfs">mount(8)</a>, or more specifically,
<a href="http://man.openbsd.org/mount_nfs">mount_nfs(8)</a>.

<p>
To mount the <tt>/work</tt> filesystem on host <tt>10.0.0.1</tt> to local
filesystem <tt>/mnt</tt>, run:

<blockquote><pre>
# <b>mount -t nfs 10.0.0.1:/work /mnt</b>
</pre></blockquote>

To have that filesystem mounted at boot, append a line to your
<a href="http://man.openbsd.org/fstab">fstab(5)</a>:

<blockquote><pre>
# <b>echo '10.0.0.1:/work /mnt nfs rw,nodev,nosuid 0 0' >> /etc/fstab</b>
</pre></blockquote>

It is important that you use <tt>0 0</tt> at the end of this line so that your
computer does not try to <a href="http://man.openbsd.org/fsck">fsck(8)</a> the
NFS filesystem on boot.

<p>
When accessing an NFS mount as the root user, the server automatically maps
root's access to username <tt>nobody</tt> and group <tt>nobody</tt>.
This is important to know when considering file permissions.
For example, take a file with these permissions:

<blockquote><pre>
-rw-------    1 root     wheel           0 Dec 31 03:00 _daily.B20143
</pre></blockquote>

If this file was on an NFS share and the root user tried to access this file
from the NFS client, access would be denied.

<p>
The user and group that root are mapped to are configurable via the
<a href="http://man.openbsd.org/export">exports(5)</a> file on the NFS server.

<h3>Checking Stats on NFS</h3>

One thing to check to ensure NFS is operating properly is that all the daemons
have properly registered with RPC.
To do this, use <a href="http://man.openbsd.org/rpcinfo">rpcinfo(8)</a>.

<blockquote><pre>
$ <b>rpcinfo -p 10.0.0.1</b>
   program vers proto   port
    100000    2   tcp    111  portmapper
    100000    2   udp    111  portmapper
    100005    1   udp    633  mountd
    100005    3   udp    633  mountd
    100005    1   tcp    916  mountd
    100005    3   tcp    916  mountd
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
</pre></blockquote>

There are a few utilities that allow you to see what is happening with NFS.
<a href="http://man.openbsd.org/showmount">showmount(8)</a> allows you to view
what is currently mounted by whom.
There is also <a href="http://man.openbsd.org/nfsstat">nfsstat(1)</a>, which
shows much more verbose statistics.

d681 126
@


1.430
log
@remove much redundant text, self-introspection and unhelpful rambling.
still got a lot to do on this page...

ok tb
@
text
@a49 1
<li><a href="#Replace"         >Adding and replacing NICs</a>
a459 17
Many laptops have both wireless and wired adapters.
Sometimes, you may be directly connected to your high speed network and want
the full performance of the wire.
Other times, you will be using wireless.
You probably don't want to reconfigure your machine each time you switch
locations.

<p>
You could set up both interfaces with DHCP, but then you would have to wait for
the unused interface to time out while booting (see the <tt>link-timeout</tt>
option of <a href="http://man.openbsd.org/dhclient.conf">dhclient.conf(5)</a>).
Things would be a little confusing if you had both resources available, and
switching between the two resources would be a bit annoying.

<p>
Using a <a href="http://man.openbsd.org/trunk">trunk(4)</a> device may simplify
your life.
d461 2
a462 4

<p>
In the rest of this section, we will use a laptop with a wired
<a href="http://man.openbsd.org/bge">bge0</a> and a wireless
d464 2
a465 2
Using these two interfaces, we will build a <tt>trunk0</tt> interface, then use
DHCP to get an IP address for this virtual interface.
d468 2
a469 3
To do this, we first configure the two physical ports.
As we are just assigning them to a combined <tt>trunk0</tt> interface, we won't
do much of anything with the wired interface other than activate it:
d494 1
a494 2
The trunk is set up to be in <tt>failover</tt> mode, so either interface can be
used.
d503 2
a504 2
This section will go through the steps for a simple setup of NFS.
This example details a server on a LAN, with clients accessing NFS on the LAN.
a507 7
If you are allowing outside access to your NFS server, and you have any kind of
sensitive data stored on it, we strongly recommend that you employ IPsec.
Otherwise, people can potentially see your NFS traffic.
Someone could also pretend to be the IP address which you are allowing into your
NFS server.
There are several attacks that can result.
When properly configured, IPsec protects against these types of attacks.
a534 2
For example, if there was a directory called <tt>/work/monday</tt>, clients
could mount <tt>/work</tt> or they could mount <tt>/work/monday</tt>.
a539 6
This is important for some servers that are accessible by different networks.

<p>
Don't just add a filesystem to <tt>/etc/exports</tt> without some kind of list
of allowed hosts, otherwise anyone who can reach your server will be able to
mount your NFS exported directories.
a547 3
You're now ready to mount the exported filesystems from the clients.

<p>
d549 1
a549 2
need to make mountd aware of this.
Just HUP mountd and the changes will take effect.
d563 1
a563 1
filesystem <tt>/mnt</tt>, do:
a568 3
Note that you don't need to use an IP address; mount(8) will resolve host names.

<p>
a591 4
This is because the server uses the credentials of the user <tt>nobody</tt> when
root tries to access the file.
Since the user <tt>nobody</tt> doesn't have permissions to access the file,
access is denied.
d628 2
a629 3
Unlike a router, packets transfer through the bridge "invisibly" -- logically,
the two network segments appear to be one segment to nodes on either side of the
bridge.
d631 4
a634 9
other.
They provide, among other things, an easy way to reduce traffic in a complex
network and yet allow any node to access any other node when needed.

<p>
Note that because of this "invisible" nature, an interface in a bridge may or
may not have an IP address of its own.
If it does, the interface has effectively two modes of operation, one as part
of a bridge, the other as a normal, stand-alone NIC.
a637 68
<h3>A simple example of a bridge application</h3>

One of my computer racks has a number of older systems, none of which have a
built-in 10BASE-TX NIC.
While they all have an AUI or AAUI connector, my supply of transceivers is
limited to coax.
One of the machines on this rack is an OpenBSD-based terminal server which is
always on and connected to the high-speed network.
Adding a second NIC with a coax port will allow me to use this machine as a
bridge to the coax network.

<p>
This system has two NICs in it now, an Intel EtherExpress/100 <tt>fxp0</tt> and
a 3c590-Combo card <tt>ep0</tt> for the coax port.
<tt>fxp0</tt> is the link to the rest of my network and will thus have an IP
address, while <tt>ep0</tt> is going to be for bridging only, and will have no
IP address.
Machines attached to the coax segment will communicate as if they were on the
rest of my network.
So, how do we make this happen?

<p>
The file <tt>hostname.fxp0</tt> contains the configuration info for the
<tt>fxp0</tt> card.
This machine is set up using DHCP, so its file looks like this:

<blockquote><pre>
$ <b>cat /etc/hostname.fxp0</b>
dhcp
</pre></blockquote>

The <tt>ep0</tt> card is a bit different, as you might guess:

<blockquote><pre>
$ <b>cat /etc/hostname.ep0</b>
up media 10base2
</pre></blockquote>

Here, we are instructing the system to activate this interface using
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> and setting it to
10BASE-2 (coax).
No IP address or similar information needs to be specified for this interface.
The options the <tt>ep</tt> card accepts are detailed in its
<a href="http://man.openbsd.org/ep">man page</a>.

<p>
Now, we need to set up the bridge.
Bridges are initialized by the existence of a file named something like
<a href="http://man.openbsd.org/hostname.if"><tt>hostname.bridge0</tt></a>.
Here is an example for my situation here:

<blockquote><pre>
$ <b>cat /etc/hostname.bridge0</b>
add fxp0
add ep0
up
</pre></blockquote>

This is saying "set up a bridge consisting of the two NICs, <tt>fxp0</tt> and
<tt>ep0</tt>, and activate it."
Does the order in which the cards are listed matter?
No; remember, a bridge is symmetrical -- packets flow in and out in both
directions.

<p>
That's it!
Reboot and you now have a functioning bridge.

d640 1
a640 1
Let's say we have a small system which has four
d644 1
a644 1
out <tt>vr0</tt> for an uplink (a cable modem for instance).
d647 1
a647 2
on the bridged network (contrary to the previous example in which the bridging
box was not visible on the network).
d655 1
a655 1
virtual Ethernet interface driver that can be used for this purpose.
a658 3
<p>
Notes:

d661 1
a661 1
    yet again in this section, but the addressing scheme used here is the same.
d663 1
a663 1
    use IP address 192.168.1.1 to match the DHCP server configuration.
d681 1
a681 1
We configure the bridge interface to contain all the above interfaces:
d692 1
a692 1
And finally we make dhcpd(8) listen on the vether0 interface:
a705 2

<p>
a707 34
Your default "pass all" statements would look something like this:

<blockquote><pre>
pass in  on ep0  all
pass out on ep0  all
pass in  on fxp0 all
pass out on fxp0 all
</pre></blockquote>

Now, let's say I wish to filter traffic hitting these old machines.
I want only web and SSH traffic to reach them.
In this case, we are going to let all traffic in and out of the <tt>ep0</tt>
interface, but filter on the <tt>fxp0</tt> interface.

<blockquote><pre>
# Pass all traffic through ep0
pass in  quick on ep0 all
pass out quick on ep0 all

# Block fxp0 traffic
block in  on fxp0 all
block out on fxp0 all

pass in quick on fxp0 proto tcp from any to any port { 22 80 }
</pre></blockquote>

Note that this rule set will prevent anything but incoming HTTP and SSH traffic
from reaching either the bridge machine or any of the other nodes "behind" it.
Other results could be had by filtering the other interface.

<p>
To monitor and control the bridge you have created, use the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> command, which can
also be used to create a bridge after boot.
a711 4
  <li>It is <b>highly</b> recommended that you filter on only one interface.
    While it is possible to filter on both, you really need to understand this
    very well to do it right.

d713 9
a721 12
    <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> or in
    <a href="http://man.openbsd.org/hostname.if">hostname.bridge0</a>, you can
    prevent non-IP traffic (such as IPX or NETBEUI) from slipping around your
    filters.
    This may be important in some situations, but you should be aware that
    bridges work for all kinds of traffic, not just IP.

  <li>Bridging requires that the NICs be in a "promiscuous mode" -- they listen
    to ALL network traffic, not just that directed at the interface.
    This will put a higher load on the processor and bus than one might expect.
    Some NICs don't work properly in this mode -- the TI ThunderLAN chip is an
    example of a chip that won't work as part of a bridge.
a811 119

<h2 id="Replace">Adding and replacing NICs</h2>

You may have to replace or add a network adapter on an OpenBSD system,
maybe upgrading the capabilities of the system or repairing failed
hardware.
This will require some reconfiguration.
The good news is that it's relatively easy, though there are some things
to be aware of.

<p>
The key is understanding how OpenBSD names NICs.
Unlike some OSs that try to remember any network adapter the installed
OS has ever seen, OpenBSD does not remember a NIC's identification
between boots -- it names them in the order that they are found.
In most cases, this is far simpler for you, as the system will always
identify a NIC the same way in the same hardware configuration, and
when configurations change, the results are easily understood.

<p>
Here are some cases:

<ul>
  <li><b>Replace a NIC with an identical device:</b>
    This would be the case when you move the disk system from a failed machine
    to another identical machine, or install an image or full backup to
    identical hardware.
    In this case, things are easy -- no change in configuration will be needed,
    other than perhaps changing the IP address in the <tt>hostname.if</tt> file
    if needed.

  <li><b>Replace a NIC with a different device:</b>
    This would also be the case when one moves a disk system to a non-identical
    machine.
    In this case, simply rename the old <tt>hostname.if</tt> file to match the
    new device.
    For example, if you replace an
    <a href="http://man.openbsd.org/fxp">fxp(4)</a> device which was
    <tt>fxp0</tt> with a <a href="http://man.openbsd.org/re">re(4)</a> device,
    which would end up as <tt>re0</tt>, you could rename
    <tt>/etc/hostname.fxp0</tt> to <tt>/etc/hostname.re0</tt> and your new
    device would take over the configuration of the old device.
    If you might someday restore the original configuration, you may prefer to
    make the new file a hard link to the original, rather than renaming it.

  <li><b>Replacing one of several similar cards with a different type:</b>
    Let's assume you have a machine with <tt>fxp0</tt>, <tt>fxp1</tt> and
    <tt>fxp2</tt>, and <tt>fxp0</tt> fails.
    Unfortunately, you don't have a spare similar fxp card, so you need to
    replace it with an <a href="http://man.openbsd.org/em">em(4)</a> card.
    This gets a little ugly, as <tt>fxp1</tt> and <tt>fxp2</tt> will rename
    themselves:

    <blockquote><pre>
    <b>old  -> new</b>
    fxp0 -> em0
    fxp1 -> fxp0
    fxp2 -> fxp1<!--
    --></pre></blockquote>

    Again, rename your <tt>/etc/hostname.if</tt> files accordingly:

    <blockquote><pre>
    # <b>cd /etc</b>
    # <b>mv hostname.fxp0 hostname.em0</b>
    # <b>mv hostname.fxp1 hostname.fxp0</b>
    # <b>mv hostname.fxp2 hostname.fxp1</b><!--
    --></pre></blockquote>

  <li><b>Adding a new NIC to an existing system:</b>
    If your added NIC is of a different type, it will be the "0" device of
    whatever driver it is.
    For example, if you are adding a
    <a href="http://man.openbsd.org/bge">bge(4)</a> device to a machine with
    only an <a href="http://man.openbsd.org/rl">rl(4)</a> device, life is easy
    -- the new device will be <tt>bge0</tt>, so create an appropriate
    <tt>/etc/hostname.bge0</tt>.

    <p>
    The more difficult variation is when you are adding a new card of the same
    type as another in the machine.
    Most add-on NICs will have their MAC address written somewhere on the card.
    Make note of this, insert the card, and look at the dmesg.
    Note the identifier of the new NIC and its relationship to the earlier NICs.
    You may find that ALL the existing NICs have changed number.
    You may be able to put the new NIC in a different slot to change the
    identifier as desired, but if the earlier devices were onboard, you may have
    no option but to adjust the <tt>hostname.if</tt> files.

  <li><b>Total Confusion:</b>
    Sometimes, things get totally confused.
    Maybe your new machine has lots of multi-port NICs, or several onboard NICs
    and you aren't quite sure how they are identified.
    Or perhaps changes were made with less care than might be hoped for, and now
    you aren't sure what is what.

    <p>
    The first thing to note is that
    <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> will tell you both
    the MAC address and the link status of each port.
    So the first trick might be to mark add-in cards with their MAC addresses.
    Another trick in a confused situation can be to simply attach ONE unknown
    NIC to a switch port at a time, and look for which NIC in
    <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> is now showing a
    link.
    Once you have a few ports identified, you will often figure out the rest
    quickly.
</ul>

In addition to the <tt>hostname.if</tt> files, any other file that deals with
hardware interfaces will have to be adjusted.
Some likely candidates might include:

<ul>
  <li>PF configuration (<tt>/etc/pf.conf</tt>)
  <li>CARP configuration (<tt>/etc/hostname.carp*</tt>)
  <li>Bridge configuration (<tt>/etc/hostname.bridge*</tt>)
  <li>Trunk configuration (<tt>/etc/hostname.trunk*</tt>)
</ul>
@


1.429
log
@rephrase slightly
@
text
@a29 1
<li><a href="#Intro"           >Background</a>
a54 26
<h2 id="Intro">Background</h2>

For the bulk of this document, it helps if you have read and at least partially
understand the <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> and
<a href="http://man.openbsd.org/netstat">netstat(1)</a> man pages.

<p>
If you are a network administrator, setting up routing protocols, using your
OpenBSD box as a router or want to go in-depth into IP networking, it is
recommended that you read the chapter on
<a href="http://www.tcpipguide.com/free/t_IPAddressing.htm">IP addressing</a>
in the TCP/IP guide.
It contains fundamental knowledge to build upon when working with IP networks,
especially when you deal with or are responsible for more than one network.

<p>
If you are working with applications such as web servers, ftp servers and mail
servers, you may wish to read some of
<a href="http://www.rfc-editor.org/rfc.html">the RFCs</a>.
The RFCs define many standards for protocols on the internet and explain how
they are supposed to work.

<p>
Note that this FAQ page does not cover firewalling on OpenBSD: this topic is
described in the <a href="pf/index.html">PF User's Guide</a>.

d57 2
a58 1
Normally, OpenBSD's network settings are initially configured by the
a59 1
All network configuration is done using text files in <tt>/etc</tt>.
d63 3
a65 5
In OpenBSD, interfaces are named for the type of card, not for the type of
connection.
For example, here is the part of the
<a href="http://man.openbsd.org/dmesg">dmesg(8)</a> for an Intel Fast Ethernet
network card, which uses the device name <tt>fxp</tt>.
d72 2
a73 2
This device uses the <a href="http://man.openbsd.org/fxp">fxp(4)</a> driver, and
is assigned the number 0 here.
a78 2
This sample output shows us only one physical Ethernet interface, an
<a href="http://man.openbsd.org/fxp">fxp(4)</a>.
d101 4
a104 5
As you can see here, <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
gives us a lot more information than we need at this point.
In the above example, an IP network is configured on <tt>fxp0</tt>, hence the
values <tt>inet 10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255</tt>.
Also, the <tt>UP</tt> and <tt>RUNNING</tt> flags are set.
d111 2
a112 1
The example above would use the file <tt>/etc/hostname.fxp0</tt>:
a114 1
$ <b>cat /etc/hostname.fxp0</b>
d118 1
a118 1
Note that this <tt>hostname.fxp0</tt> file has an interactive equivalent:
a123 4
See <a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> for the
precise relation with <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>.

<p>
d137 3
a139 3
Other virtual interfaces can be added with the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> <tt>create</tt>
command.
a198 4
<p>
If you are using DHCP, you'll want to read <a href="#DHCP">DHCP</a>, taking note
of <a href="http://man.openbsd.org/resolv.conf.tail">resolv.conf.tail(5)</a>.

a215 6
The reason for this is that the environment at boot is somewhat different than
it is when the system is up and running.
For example, if you had specified a DNS-resolved symbolic name in any of the
files, you would probably find it worked as expected after reconfiguring.
On initial boot, however, your external resolver may not be available, so the
configuration will fail.
a221 3
If you are having routing problems, you may want to use the <tt>-n</tt> flag to
route(8), which prints the IP addresses rather than doing a DNS lookup and
displaying the hostname.
d253 2
a254 4
OpenBSD has a simple mechanism for setting up IP aliases on an interface.
To do this, simply edit the
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> file of that
interface.
d262 1
a262 1
Assuming you are using multiple IP addresses which are in the same IP subnet
d267 1
a267 1
configured as <tt>192.168.0.2</tt> netmask <tt>255.255.255.0</tt>.
d278 1
a278 1
To view all aliases, use <tt>$ <b>ifconfig -A</b></tt>
d294 1
a294 1
For ethernet interfaces one line is enough:
a296 1
$ <b>cat /etc/hostname.xl0</b>
d300 2
a301 3
This will cause OpenBSD to start the DHCP client on boot.
By default, OpenBSD will gather its IP address, default gateway, and DNS servers
from the DHCP server.
d304 1
a304 1
If you want to start a DHCP client from the command line, simply run
d310 1
a310 1
where <tt>xl0</tt> is the interface on which you want to receive DHCP.
d313 2
a314 2
Once the interface is configured, dhclient(8) will overwrite the
<a href="http://man.openbsd.org/resolv.conf">resolv.conf(5)</a> file.
d318 2
a319 9

<p>
For example, to prevent the DHCP server from overriding the DNS server you
configured in <tt>/etc/resolv.conf.tail</tt>, add

<blockquote><pre>
ignore domain-name-servers;
</pre></blockquote>

a321 4
<p>
There are several useful configuration snippets in
<tt>/etc/examples/dhclient.conf</tt>.

d377 1
a377 1
<a href="http://man.openbsd.org/?query=wireless&amp;apropos=1"> a number of
d386 1
a386 1
them to be used as a wireless access point.
d446 2
a447 2
lines, as the network adapter will not be able to send a
<a href="#DHCPclient">DHCP</a> request until it is configured.
d461 4
a464 3
Many laptops have both a wireless and a hard-wired adapter.
Sometimes, you may be directly connected to your high speed network and want the
full performance of the wire, other times, you will be using the wireless.
@


1.428
log
@no need to set the nfsd -tun 4 flags since it's the default.  zap the
following paragraph, too, since it makes no sense without the rcctl line.

brought up by daniel bolgheroni and requested by jung
@
text
@d603 1
a603 1
The <a href="http://man.openbsd.org/portmap">portmap(8)</a>,
d605 1
a605 2
<a href="http://man.openbsd.org/nfsd">nfsd(8)</a>
services must be enabled on the server:
@


1.427
log
@2017
@
text
@a609 1
# <b>rcctl set nfsd flags -tun 4</b>
a611 6
The <tt>-t</tt> and <tt>-u</tt> flags for nfsd(8) enable TCP and UDP,
respectively, and four server instances are created with <tt>-n 4</tt>.
You should set an appropriate number of NFS server instances to handle the
maximum number of concurrent client requests that you want to service.

<p>
@


1.426
log
@adjust the hostap hostname.if example to the one given by stsp on
http://undeadly.org/cgi?action=article&sid=20170109213803&pid=3
@
text
@d11 1
a11 2
<meta name= "copyright"     content= "This document copyright 1998-2016
                                      by OpenBSD.">
@


1.425
log
@fix some ugly vertical spacing in bullet lists
@
text
@d518 1
a518 1
mediaopt hostap mode 11a
@


1.424
log
@sort list of virtual interfaces
@
text
@d1110 2
a1111 2
    fxp2 -> fxp1
    </pre></blockquote>
d1119 2
a1120 2
    # <b>mv hostname.fxp2 hostname.fxp1</b>
    </pre></blockquote>
@


1.423
log
@add a lost 'a'
@
text
@a179 4
  <li><a href="http://man.openbsd.org/ppp">ppp</a>
    - Point-to-Point Protocol interface
  <li><a href="http://man.openbsd.org/tun">tun</a>
    - Tunnel network interface
d182 4
a185 4
  <li><a href="http://man.openbsd.org/vlan">vlan</a>
    - IEEE 802.1Q encapsulation interface
  <li><a href="http://man.openbsd.org/svlan">svlan</a>
    - IEEE 802.1AD provider bridges (QinQ)
a187 4
  <li><a href="http://man.openbsd.org/gif">gif</a>
    - Generic IPv4/IPv6 tunnel interface
  <li><a href="http://man.openbsd.org/carp.4">carp</a>
    - Common Address Redundancy Protocol interface
d190 8
d200 2
a201 2
  <li><a href="http://man.openbsd.org/trunk">trunk</a>
    - Link aggregation and link failover interface
@


1.422
log
@shorten and smoothen the section on pxe booting a bit. this version is
mostly from tj who massaged my rough initial diff into something much
more pleasant.
@
text
@d430 1
a430 1
The Preboot Execution Environment (PXE) is standard method of booting systems
@


1.421
log
@make the transition from the client config to the ap config a bit smoother
@
text
@d430 5
a434 15
The Preboot Execution Environment, or PXE, is a way to boot a computer from the
network.
It is supported by most major network card manufacturers.
Traditionally, PXE booting is done using ROMs on the NIC or mainboard of the
system.

<p>
Familiarize yourself with OpenBSD's
<a href="faq14.html#BootAmd64">bootstrap procedure</a> first.
Upon starting the boot process, the PXE-capable NIC broadcasts a DHCP request
over the network.
The DHCP server will assign the adapter an IP address.
Then it will specify the name of a file to be retrieved from the tftp server
<a href="http://man.openbsd.org/tftpd">tftpd(8)</a> and then execute it.
This file then conducts the rest of the boot process.
d436 2
a437 8
<a href="http://man.openbsd.org/pxeboot">pxeboot(8)</a>, and it takes the
place of the standard <a href="http://man.openbsd.org/boot">boot(8)</a> file.
pxeboot(8) is then able to load and execute a kernel from the same TFTP server.

<p>
Details on how to set up PXE booting can be found in the
<a href="http://man.openbsd.org/pxeboot">pxeboot(8)</a> manual.
See also <a href="http://man.openbsd.org/tftpd">tftpd(8)</a>.
@


1.420
log
@instead of having two wireless client hostname.if(5) examples where the
only difference is static IP vs. dhcp, change one of the examples into a
wireless access point.

ok stsp
@
text
@d517 2
a518 2
Some examples of wireless
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> files might be:
d529 3
@


1.419
log
@trim some extraneous text and sort range/options items.
@
text
@a520 1
inet 10.0.0.157 255.255.255.0
d523 1
d526 3
a528 1
or
d531 1
d534 1
a534 1
dhcp
a535 4

Note that the <tt>dhcp</tt> keyword should be after the other configuration
lines, as the network adapter will not be able to send a
<a href="#DHCPclient">DHCP</a> request until it is configured.
@


1.418
log
@expand the dhcpd example to include multiple subnets and tighten up
some wording.

input from sthen, ok krw
@
text
@d390 1
a390 1
<a href="http://man.openbsd.org/dhcpd">dhcpd(8)</a> daemon at startup:
d396 1
a396 1
On the next boot, this will run dhcpd and attach to all NICs that have valid
d398 1
a398 1
You may specify individual interfaces instead by naming them explicitly:
d404 1
a404 1
The options in <tt>/etc/dhcpd.conf</tt> are pretty self-explanatory.
d409 1
a411 1
	option domain-name-servers 192.168.1.2;
d416 1
a418 1
	option domain-name-servers 209.244.0.3, 8.8.8.8;
d422 3
a424 17
There are two subnets in this example, a home network and a guest network.
For hosts that are on the same network as an ethernet interface on the OpenBSD
machine, dhcpd(8) will point them to the correct gateway and assign them an
IP address.
Using this configuration, users on the home subnet would use a local DNS server
and users on the guest subnet would use two public DNS servers.

<p>
If you are serving DHCP to a Windows box, you may want dhcpd(8) to give the
client a <tt>WINS</tt> server address.
To make this happen, just add the following to your <tt>/etc/dhcpd.conf</tt>:

<blockquote><pre>
option    netbios-name-servers    192.168.92.55;
</pre></blockquote>

where <tt>192.168.92.55</tt> is the IP of your Windows or Samba server.
d426 1
a426 1
options that your DHCP clients may want.
@


1.417
log
@link was missing a #. spotted by wuy13 () rpi edu
@
text
@d396 1
a396 1
On the next boot, this will run dhcpd and attach to all NICs which have valid
d401 1
a401 1
# <b>rcctl set dhcpd flags xl1 xl2 xl3</b>
d404 1
a404 2
Then edit <tt>/etc/dhcpd.conf</tt>.
The options are pretty self-explanatory:
d407 1
a407 2
option  domain-name "example.com";
option  domain-name-servers 192.168.1.3, 192.168.1.5;
d409 10
a418 2
        option routers 192.168.1.1;
        range 192.168.1.32 192.168.1.127;
d422 1
a422 3
This will tell your DHCP clients that the domain to append to DNS requests is
<tt>example.com</tt> and the DNS servers are <tt>192.168.1.3</tt> and
<tt>192.168.1.5</tt>.
d424 4
a427 15
machine, which is in the <tt>192.168.1.0/24</tt> range, it will assign them an
IP address between <tt>192.168.1.32</tt> and <tt>192.168.1.127</tt>.
It will set their default gateway as <tt>192.168.1.1</tt>.

<p>
If you want to start dhcpd(8) from the command line, run:

<blockquote><pre>
# <b>rcctl start dhcpd</b>
</pre></blockquote>

If there were fatal configuration errors, it will exit and let you know that it
failed to start.
You can usually see why in <tt>/var/log/messages</tt> or
<tt>/var/log/daemon</tt>.
@


1.416
log
@in the nfs statistics section, the rpcinfo example is good, but we don't
need to show and explain the output of showmount -a.
@
text
@d328 1
a328 1
Once you've created this file, <a href="Setup.activate">run netstart</a> or
@


1.415
log
@clean up the nfs mount section. this is not the place to explain
mount options, just use them in the example, the link to fstab(5) is
right there. also do some markup fixes.
@
text
@d773 3
a775 4
During normal usage, there are a few other utilities that allow you to see what
is happening with NFS.
One is <a href="http://man.openbsd.org/showmount">showmount(8)</a>, which allows
you to view what is currently mounted and who is mounting it.
a777 11
To use showmount(8), try <tt>/usr/bin/showmount -a host</tt>.
For example:

<blockquote><pre>
$ <b>showmount -a 10.0.0.1</b>
All mount points on 10.0.0.1:
10.0.0.37:/work
</pre></blockquote>

This output shows that the client <tt>10.0.0.37</tt> has mounted the
<tt>/work</tt> export being served from the server at <tt>10.0.0.1</tt>.
@


1.414
log
@some initial NFS pruning. save some vertical space by inlining some
lists, reorder some stuff that got badly converted to rcctl and do the
usual amount of rephrasing and deleting repetitions.
@
text
@a691 2

<p>
d705 3
a707 3
NFS filesystems can be mounted from a client without needing to enable any
services or daemons.
They can be mounted just like any other filesystem.
a709 2
NFS filesystems should be mounted via mount(8), or more specifically,
<a href="http://man.openbsd.org/mount_nfs">mount_nfs(8)</a>.
d711 1
a711 2
filesystem <tt>/mnt</tt>, do this (note that you don't need to use an
IP address; mount will resolve host names):
d717 4
a720 1
To have that filesystem mounted at boot, add something like this to
d724 1
a724 1
# <b>echo '10.0.0.1:/work /mnt nfs rw 0 0' >> /etc/fstab</b>
d728 2
a729 13
computer does not try to fsck the NFS filesystem on boot.
The other standard security options, such as <tt>noexec</tt>, <tt>nodev</tt>,
and <tt>nosuid</tt>, should also be used where applicable.
For example:

<blockquote><pre>
10.0.0.1:/work /mnt nfs rw,nodev,nosuid 0 0
</pre></blockquote>

This way, no devices or setuid programs on the NFS server can subvert security
measures on the NFS client.
If you are not mounting programs that you expect to run on the NFS client, add
<tt>noexec</tt> to this list.
d733 1
a733 1
root's access to username "nobody" and group "nobody."
d743 4
a746 4
This is because the server uses the credentials of the user "nobody" when root
tries to access the file.
Since the user nobody doesn't have permissions to access the file, access is
denied.
@


1.413
log
@unify markup of hostname.if (remove italics in a few places)
@
text
@d621 1
a621 2
NFS, or the Network File System, is used to share a filesystem over the
network.
d639 4
a642 10
These services must be enabled and running on the server:

<ul>
  <li><a href="http://man.openbsd.org/portmap">portmap(8)</a>
  <li><a href="http://man.openbsd.org/mountd">mountd(8)</a>
  <li><a href="http://man.openbsd.org/nfsd">nfsd(8)</a>
</ul>

By default, each of these is disabled in OpenBSD.
If you want them enabled, run the following commands:
d649 7
a655 2
The next step is to configure the list of filesystems that will be made
available for clients to mount.
d660 2
a661 7
All of this is configured in the <tt>/etc/exports</tt> file.
This file lists which filesystems you wish to have accessible via NFS
and defines who is able to access them.
There are many options that you can use in <tt>/etc/exports</tt>; it is
best that you read the <a href="http://man.openbsd.org/exports">exports(5)</a>
man page.
For our example server, we've set up an exports file that looks like this:
d664 1
a664 3
# NFS exports Database
# See exports(5) for more information.  Be very careful, misconfiguration
# of this file can result in your filesystems being readable by the world.
d668 1
a668 2
This means that the local filesystem <tt>/work</tt> will be made available via
NFS.
d672 1
a672 3
could mount <tt>/work</tt> (and have access to all files/directories underneath
that directory) or they could mount <tt>/work/monday</tt> and have access to
just the files/directories contained there.
d681 3
a683 4
Another important security note: don't just add a filesystem to
<tt>/etc/exports</tt> without some kind of list of allowed host(s).
Without a list of hosts which can mount a particular directory, anyone who can
reach your server will be able to mount your NFS exported directories.
a686 2
You can either reboot (after enabling them as per the instructions above) or
start them manually.
a691 5
The <tt>nfsd_flags</tt> enable TCP (<tt>-t</tt>) and UDP (<tt>-u</tt>)
connections and enable 4 instances (<tt>-n</tt>) of nfsd to run.
You should set an appropriate number of NFS server instances to handle the
maximum number of concurrent client requests that you want to service by
adjusting the flags nfsd is started with.
d694 1
a694 1
You're now ready to mount the exported filesystems from the client(s).
d697 3
a699 3
Remember: If you make changes to <tt>/etc/exports</tt> while NFS is already
running, you need to make mountd aware of this!
Just HUP mountd and the changes will take affect.
@


1.412
log
@sysctl(8), not (3); add link to manual
@
text
@d1167 2
a1168 2
    In this case, simply rename the old <tt>hostname.<i>if</i></tt> file to
    match the new device.
d1193 1
a1193 1
    Again, rename your <tt>/etc/hostname.<i>if</i></tt> files accordingly:
d1220 1
a1220 1
    no option but to adjust the <tt>hostname.<i>if</i></tt> files.
d1242 2
a1243 2
In addition to the <tt>hostname.<i>if</i></tt> files, any other file that deals
with hardware interfaces will have to be adjusted.
@


1.411
log
@mark up ip addresses and ranges consistently
@
text
@d1091 1
a1091 1
proper sysctl(3) variable.
@


1.410
log
@relegate the "adding and replacing NICs" section to the end of
the page for now, at least until it is cleaned up a little.
@
text
@d310 2
a311 2
You are on the network 192.168.0.0, the IP address for <tt>dc0</tt> is
192.168.0.2 and the netmask is 255.255.255.0.
d315 2
a316 1
with aliases, your netmask setting for each alias becomes 255.255.255.255.
d319 1
a319 1
configured as 192.168.0.2 netmask 255.255.255.0.
d417 2
a418 1
<tt>example.com</tt> and the DNS servers are 192.168.1.3 and 192.168.1.5.
d420 3
a422 3
machine, which is in the 192.168.1.0/24 range, it will assign them an IP address
between 192.168.1.32 and 192.168.1.127.
It will set their default gateway as 192.168.1.1.
d660 1
a660 1
In this example, we have a server with IP address 10.0.0.1.
d687 3
a689 2
The last two arguments specify that only clients within the 10.0.0.0 network
using a netmask of 255.255.255.0 will be authorized to mount this filesystem.
d734 3
a736 3
To mount the <tt>/work</tt> filesystem on host 10.0.0.1 to local filesystem
<tt>/mnt</tt>, do this (note that you don't need to use an IP address;
mount will resolve host names):
d821 2
a822 2
This output shows that the client 10.0.0.37 has mounted the <tt>/work</tt>
export being served from the server at 10.0.0.1.
d1048 1
a1048 1
table for the same network, such as the default route, 0.0.0.0/0.
d1072 3
a1074 3
In this example we can see that one default route points to 10.130.128.1, which
is accessible via the <tt>fxp1</tt> interface, and the other points to
10.132.0.1, which is accessible via <tt>fxp2</tt>.
@


1.409
log
@don't show the Encap: line in the netstat -rn output
@
text
@a40 1
  <li><a href="#Setup.replace" >Adding and replacing NICs</a>
d52 1
a330 119
<h3 id="Setup.replace">Adding and replacing NICs</h3>

You may have to replace or add a network adapter on an OpenBSD system,
maybe upgrading the capabilities of the system or repairing failed
hardware.
This will require some reconfiguration.
The good news is that it's relatively easy, though there are some things
to be aware of.

<p>
The key is understanding how OpenBSD names NICs.
Unlike some OSs that try to remember any network adapter the installed
OS has ever seen, OpenBSD does not remember a NIC's identification
between boots -- it names them in the order that they are found.
In most cases, this is far simpler for you, as the system will always
identify a NIC the same way in the same hardware configuration, and
when configurations change, the results are easily understood.

<p>
Here are some cases:

<ul>
  <li><b>Replace a NIC with an identical device:</b>
    This would be the case when you move the disk system from a failed machine
    to another identical machine, or install an image or full backup to
    identical hardware.
    In this case, things are easy -- no change in configuration will be needed,
    other than perhaps changing the IP address in the <tt>hostname.if</tt> file
    if needed.

  <li><b>Replace a NIC with a different device:</b>
    This would also be the case when one moves a disk system to a non-identical
    machine.
    In this case, simply rename the old <tt>hostname.<i>if</i></tt> file to
    match the new device.
    For example, if you replace an
    <a href="http://man.openbsd.org/fxp">fxp(4)</a> device which was
    <tt>fxp0</tt> with a <a href="http://man.openbsd.org/re">re(4)</a> device,
    which would end up as <tt>re0</tt>, you could rename
    <tt>/etc/hostname.fxp0</tt> to <tt>/etc/hostname.re0</tt> and your new
    device would take over the configuration of the old device.
    If you might someday restore the original configuration, you may prefer to
    make the new file a hard link to the original, rather than renaming it.

  <li><b>Replacing one of several similar cards with a different type:</b>
    Let's assume you have a machine with <tt>fxp0</tt>, <tt>fxp1</tt> and
    <tt>fxp2</tt>, and <tt>fxp0</tt> fails.
    Unfortunately, you don't have a spare similar fxp card, so you need to
    replace it with an <a href="http://man.openbsd.org/em">em(4)</a> card.
    This gets a little ugly, as <tt>fxp1</tt> and <tt>fxp2</tt> will rename
    themselves:

    <blockquote><pre>
    <b>old  -> new</b>
    fxp0 -> em0
    fxp1 -> fxp0
    fxp2 -> fxp1
    </pre></blockquote>

    Again, rename your <tt>/etc/hostname.<i>if</i></tt> files accordingly:

    <blockquote><pre>
    # <b>cd /etc</b>
    # <b>mv hostname.fxp0 hostname.em0</b>
    # <b>mv hostname.fxp1 hostname.fxp0</b>
    # <b>mv hostname.fxp2 hostname.fxp1</b>
    </pre></blockquote>

  <li><b>Adding a new NIC to an existing system:</b>
    If your added NIC is of a different type, it will be the "0" device of
    whatever driver it is.
    For example, if you are adding a
    <a href="http://man.openbsd.org/bge">bge(4)</a> device to a machine with
    only an <a href="http://man.openbsd.org/rl">rl(4)</a> device, life is easy
    -- the new device will be <tt>bge0</tt>, so create an appropriate
    <tt>/etc/hostname.bge0</tt>.

    <p>
    The more difficult variation is when you are adding a new card of the same
    type as another in the machine.
    Most add-on NICs will have their MAC address written somewhere on the card.
    Make note of this, insert the card, and look at the dmesg.
    Note the identifier of the new NIC and its relationship to the earlier NICs.
    You may find that ALL the existing NICs have changed number.
    You may be able to put the new NIC in a different slot to change the
    identifier as desired, but if the earlier devices were onboard, you may have
    no option but to adjust the <tt>hostname.<i>if</i></tt> files.

  <li><b>Total Confusion:</b>
    Sometimes, things get totally confused.
    Maybe your new machine has lots of multi-port NICs, or several onboard NICs
    and you aren't quite sure how they are identified.
    Or perhaps changes were made with less care than might be hoped for, and now
    you aren't sure what is what.

    <p>
    The first thing to note is that
    <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> will tell you both
    the MAC address and the link status of each port.
    So the first trick might be to mark add-in cards with their MAC addresses.
    Another trick in a confused situation can be to simply attach ONE unknown
    NIC to a switch port at a time, and look for which NIC in
    <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> is now showing a
    link.
    Once you have a few ports identified, you will often figure out the rest
    quickly.
</ul>

In addition to the <tt>hostname.<i>if</i></tt> files, any other file that deals
with hardware interfaces will have to be adjusted.
Some likely candidates might include:

<ul>
  <li>PF configuration (<tt>/etc/pf.conf</tt>)
  <li>CARP configuration (<tt>/etc/hostname.carp*</tt>)
  <li>Bridge configuration (<tt>/etc/hostname.bridge*</tt>)
  <li>Trunk configuration (<tt>/etc/hostname.trunk*</tt>)
</ul>

d1130 119
@


1.408
log
@mention that the netstart script is used for configuring interfaces

ok tj
@
text
@a286 3
Encap:
Source             Port  Destination        Port  Proto SA(Address/SPI/Proto)

@


1.407
log
@the mac address in the dmesg and in the example ifconfig output
should be the same
@
text
@d140 2
a141 1
Interfaces are configured at boot time using
@


1.406
log
@move the openntpd section to the other system time questions in faq8

ok tj
@
text
@d119 1
a119 1
        lladdr 00:04:ac:dd:39:6a
@


1.405
log
@shuffle the sections around so that the long long sections that still
need a lot of work (NFS, Bridge, Equal-cost multipath routing) are at
the end of the page.
@
text
@a49 1
<li><a href="#OpenNTPD"        >Using OpenNTPD</a>
a736 41

<h2 id="OpenNTPD">Using OpenNTPD</h2>

<a href="http://www.openntpd.org">OpenNTPD</a> is a trivial-to-administer, safe
and simple NTP-compatible way to have accurate time on your computer.
OpenBSD's <a href="http://man.openbsd.org/ntpd">ntpd(8)</a> is controlled with a
simple configuration file,
<a href="http://man.openbsd.org/ntpd.conf">ntpd.conf(5)</a>.

<p>
The OpenNTPD daemon is enabled by default at install time, which results in your
computer's clock slowly moving into synchronization with the
<a href="http://www.pool.ntp.org">pool.ntp.org</a> time servers.
Once your clock is accurately set, <tt>ntpd</tt> will hold it at a high degree
of accuracy.
However, if your clock is more than a few minutes off, it is recommended that
you bring it close to accurate initially, as it may take days or weeks to bring
a very-off clock to sync.
You can do this using the <tt>-s</tt> option of ntpd(8) or any other way to
accurately set your system clock.

<h3 id="OpenNTPDNoServe">Why can't my other machines synchronize to ntpd?</h3>

OpenNTPD does not listen on any address by default.
In order to use it as a server, you have to add a <tt>listen on *</tt> line to
<a href="http://man.openbsd.org/ntpd.conf">/etc/ntpd.conf</a> and restart the
daemon.
Of course, if you want it to listen on a particular IP address rather than all
available addresses and interfaces, replace the "*" with the desired address.

<p>
When you have ntpd(8) listening, it may happen that other machines still can't
synchronize to it!
A freshly started ntpd(8) daemon (for example, if you just restarted it after
modifying ntpd.conf) refuses to serve time information to other clients until
it adjusts its own clock to a reasonable level of stability first.
When ntpd(8) considers its own time information stable, it announces it by a
"clock now synced" message in <tt>/var/log/daemon</tt>.
Even if the system clock is pretty accurate in the beginning, it can take up to
10 minutes to get in sync, and hours or days if the clock is not accurately set
at the start.
@


1.404
log
@rework the trunk section, mostly markup fixes.

with & ok tj
@
text
@d48 3
a52 3
<li><a href="#PXE"             >PXE booting</a>
<li><a href="#OpenNTPD"        >Using OpenNTPD</a>
<li><a href="#Wireless"        >Wireless networking</a>
d569 211
a1203 211

<h2 id="PXE">PXE booting (i386, amd64)</h2>

The Preboot Execution Environment, or PXE, is a way to boot a computer from the
network.
It is supported by most major network card manufacturers.
Traditionally, PXE booting is done using ROMs on the NIC or mainboard of the
system.

<p>
Familiarize yourself with OpenBSD's
<a href="faq14.html#BootAmd64">bootstrap procedure</a> first.
Upon starting the boot process, the PXE-capable NIC broadcasts a DHCP request
over the network.
The DHCP server will assign the adapter an IP address.
Then it will specify the name of a file to be retrieved from the tftp server
<a href="http://man.openbsd.org/tftpd">tftpd(8)</a> and then execute it.
This file then conducts the rest of the boot process.
On OpenBSD, this file is known as
<a href="http://man.openbsd.org/pxeboot">pxeboot(8)</a>, and it takes the
place of the standard <a href="http://man.openbsd.org/boot">boot(8)</a> file.
pxeboot(8) is then able to load and execute a kernel from the same TFTP server.

<p>
Details on how to set up PXE booting can be found in the
<a href="http://man.openbsd.org/pxeboot">pxeboot(8)</a> manual.
See also <a href="http://man.openbsd.org/tftpd">tftpd(8)</a>.

<h2 id="OpenNTPD">Using OpenNTPD</h2>

<a href="http://www.openntpd.org">OpenNTPD</a> is a trivial-to-administer, safe
and simple NTP-compatible way to have accurate time on your computer.
OpenBSD's <a href="http://man.openbsd.org/ntpd">ntpd(8)</a> is controlled with a
simple configuration file,
<a href="http://man.openbsd.org/ntpd.conf">ntpd.conf(5)</a>.

<p>
The OpenNTPD daemon is enabled by default at install time, which results in your
computer's clock slowly moving into synchronization with the
<a href="http://www.pool.ntp.org">pool.ntp.org</a> time servers.
Once your clock is accurately set, <tt>ntpd</tt> will hold it at a high degree
of accuracy.
However, if your clock is more than a few minutes off, it is recommended that
you bring it close to accurate initially, as it may take days or weeks to bring
a very-off clock to sync.
You can do this using the <tt>-s</tt> option of ntpd(8) or any other way to
accurately set your system clock.

<h3 id="OpenNTPDNoServe">Why can't my other machines synchronize to ntpd?</h3>

OpenNTPD does not listen on any address by default.
In order to use it as a server, you have to add a <tt>listen on *</tt> line to
<a href="http://man.openbsd.org/ntpd.conf">/etc/ntpd.conf</a> and restart the
daemon.
Of course, if you want it to listen on a particular IP address rather than all
available addresses and interfaces, replace the "*" with the desired address.

<p>
When you have ntpd(8) listening, it may happen that other machines still can't
synchronize to it!
A freshly started ntpd(8) daemon (for example, if you just restarted it after
modifying ntpd.conf) refuses to serve time information to other clients until
it adjusts its own clock to a reasonable level of stability first.
When ntpd(8) considers its own time information stable, it announces it by a
"clock now synced" message in <tt>/var/log/daemon</tt>.
Even if the system clock is pretty accurate in the beginning, it can take up to
10 minutes to get in sync, and hours or days if the clock is not accurately set
at the start.

<h2 id="Wireless">Wireless networking</h2>

OpenBSD has support for
<a href="http://man.openbsd.org/?query=wireless&amp;apropos=1"> a number of
wireless chipsets</a>.
Further supported devices can be found in
<a href="http://man.openbsd.org/usb">usb(4)</a> and
<a href="http://man.openbsd.org/pci">pci(4)</a>.
The precise extent of their support is described in the driver man pages.

<p>
The following cards support Host-based Access Point (HostAP) mode, permitting
them to be used as a wireless access point.

<ul>
  <li><a href="http://man.openbsd.org/acx">acx(4)</a>
    TI ACX100/ACX111
  <li><a href="http://man.openbsd.org/ath">ath(4)</a>
    Atheros 802.11a/b/g
  <li><a href="http://man.openbsd.org/athn">athn(4)</a>
    Atheros 802.11/a/g/n devices
  <li><a href="http://man.openbsd.org/pgt">pgt(4)</a>
    Conexant/Intersil Prism GT Full-MAC 802.11a/b/g
  <li><a href="http://man.openbsd.org/ral">ral(4)</a>
    and <a href="http://man.openbsd.org/ural">ural(4)</a>
    Ralink Technology RT25x0 802.11a/b/g
  <li><a href="http://man.openbsd.org/rtw">rtw(4)</a>
    Realtek 8180 802.11b
  <li><a href="http://man.openbsd.org/rum">rum(4)</a>
    Ralink Technology RT2501USB
  <li><a href="http://man.openbsd.org/wi">wi(4)</a>
    Prism2/2.5/3
</ul>

The <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> <tt>media</tt>
subcommand shows media capabilities of network interfaces.
For wireless devices, it displays supported 802.11a/b/g/n media modes and the
supported operating modes (<tt>hostap</tt>, <tt>ibss</tt>, <tt>monitor</tt>).
For example, to see media capabilities of interface <tt>ath0</tt>, type:

<blockquote><pre>
$ <b>ifconfig ath0 media</b>
</pre></blockquote>

In order to use some wireless cards, you will need to acquire firmware files
with <a href="http://man.openbsd.org/fw_update">fw_update(1)</a>.
Some manufacturers refuse to allow <a href="faq1.html#ReallyFree">free</a>
distribution of their firmware, so it can't be included with OpenBSD.

<p>
Another option to consider: use a conventional NIC and an external bridging
wireless access point for your OpenBSD-based firewall.
This has the added advantage of letting you easily position the antenna where it
is most effective, which is often not directly on the back of your firewall.

<h3>Configuring your wireless adapter</h3>

Adapters based on supported chips can be used like any other network interface.
To connect an OpenBSD system to an existing wireless network, use the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> utility.

<p>
Some examples of wireless
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> files might be:

<blockquote><pre>
inet 10.0.0.157 255.255.255.0
nwid puffyuberalles
wpakey puffyguffy
</pre></blockquote>

or

<blockquote><pre>
nwid puffyuberalles
wpakey puffyguffy
dhcp
</pre></blockquote>

Note that the <tt>dhcp</tt> keyword should be after the other configuration
lines, as the network adapter will not be able to send a
<a href="#DHCPclient">DHCP</a> request until it is configured.

<h3>Trunking your wireless adapter</h3>

Many laptops have both a wireless and a hard-wired adapter.
Sometimes, you may be directly connected to your high speed network and want the
full performance of the wire, other times, you will be using the wireless.
You probably don't want to reconfigure your machine each time you switch
locations.

<p>
You could set up both interfaces with DHCP, but then you would have to wait for
the unused interface to time out while booting (see the <tt>link-timeout</tt>
option of <a href="http://man.openbsd.org/dhclient.conf">dhclient.conf(5)</a>).
Things would be a little confusing if you had both resources available, and
switching between the two resources would be a bit annoying.

<p>
Using a <a href="http://man.openbsd.org/trunk">trunk(4)</a> device may simplify
your life.
Trunks are virtual interfaces consisting of one or more network interfaces.

<p>
In the rest of this section, we will use a laptop with a wired
<a href="http://man.openbsd.org/bge">bge0</a> and a wireless
<a href="http://man.openbsd.org/iwn">iwn0</a> interface.
Using these two interfaces, we will build a <tt>trunk0</tt> interface, then use
DHCP to get an IP address for this virtual interface.

<p>
To do this, we first configure the two physical ports.
As we are just assigning them to a combined <tt>trunk0</tt> interface, we won't
do much of anything with the wired interface other than activate it:

<blockquote><pre>
# <b>echo up > /etc/hostname.bge0</b>
</pre></blockquote>

The wireless interface, however, needs a bit more configuration.
It will need to attach to our wireless WPA-protected network:

<blockquote><pre>
$ <b>cat /etc/hostname.iwn0</b>
nwid puffynet
wpakey mysecretkey
up
</pre></blockquote>

Now, our trunk interface is defined like this:

<blockquote><pre>
$ <b>cat /etc/hostname.trunk0</b>
trunkproto failover trunkport bge0
trunkport iwn0
dhcp
</pre></blockquote>

The trunk is set up to be in <tt>failover</tt> mode, so either interface can be
used.
If both are available, it will prefer the <tt>bge0</tt> port, since that is the
first one added to the trunk device.
@


1.403
log
@rework the first two parts of the wireless sections (without trunk)
reword some awkward sentences and shuffle some things around to make
things clearer.

with & ok tj
@
text
@d1141 3
a1143 2
Note that the <tt>dhcp</tt> should be after the other configuration lines, as
the network adapter will not be able to request the DHCP until it is configured.
d1145 1
a1145 1
<h3>trunk(4)ing your wireless adapter</h3>
d1155 4
a1158 3
the unused interface to time out while booting, plus things would be a little
confusing if you had both resources available, and switching between the two
resources would be a bit annoying.
d1163 4
a1166 2
Trunks are virtual interfaces made up of one or more other network interfaces.
In this case, we will use a laptop with a wired
d1169 1
a1169 1
Using these two interfaces we will build an interface, <tt>trunk0</tt>, then use
a1170 2
If we have a cable available, we want to use it, but if not we want to use the
wireless interface.
d1174 2
a1175 2
As we are just assigning them to a combined trunk0 interface, we won't do much
of anything with the wired interface other than activate it:
d1200 2
a1201 1
The trunk is set up to be in "failover" mode, so either interface can be used.
@


1.402
log
@replace a stale reference to #PF with a reference to pf/index.html
@
text
@d1065 3
a1067 3
<a href="http://man.openbsd.org/?query=wireless&amp;apropos=1">
a number of wireless chipsets</a>.
Further supported devices can be found in the
d1069 7
a1075 4
<a href="http://man.openbsd.org/pci">pci(4)</a> man pages.
Please see the man pages for precise details.
The following cards support "host-based access point" mode.
This permits them to be made into the wireless access point.
d1099 1
a1099 1
supported operating modes (hostap, ibss, monitor).
d1106 4
a1109 13
Adapters based on supported chips can be used much like any other network
adapter.
To connect an OpenBSD system to an existing wireless network, use the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> utility.

<p>
Note that in order to use some of these cards, you will need to acquire the
firmware files, which the manufacturers refuse to allow
<a href="faq1.html#ReallyFree">free</a> distribution of, so they can not be
included with OpenBSD.
When possible, the man pages linked above include contact information so you can
contact the right people at the manufacturers to let them know what you feel
about this, or to let them know what other product you have purchased instead.
d1112 2
a1113 3
Another option to consider for using your OpenBSD-based firewall to provide
wireless access is to use a conventional NIC and an external bridging access
point.
d1119 3
a1121 3
Your wireless adapter can be configured through a
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> file as other
network adapters are.
d1124 2
a1125 1
An example of a wireless hostname file might be:
d1128 1
a1130 1
dhcp
a1135 1
inet 10.0.0.157 255.255.255.0
d1138 1
d1141 1
a1141 1
Note that the <tt>dhcp</tt> should be AFTER the other configuration lines, as
@


1.401
log
@rework the DHCP section: update some outdated references, make it
more concise, shuffle the text a bit and and tweak some wording

with & ok tj
@
text
@d931 2
a932 2
As you might expect, <a href="#PF">Packet Filter</a> can be used to restrict
what traffic goes through your bridge.
@


1.400
log
@remove the firewalling sectoin. this was just a paragraph pointing
to the pf user's guide. add this pointer to the intro part of the page

ok tj
@
text
@d455 4
a458 4
Dynamic Host Configuration Protocol is a way to configure network
interfaces "automatically."
OpenBSD can be a DHCP server (configuring other machines), a DHCP client
(configured by another machine) or, in some cases, both.
d462 6
a467 5
To use the DHCP client included with OpenBSD,
<a href="http://man.openbsd.org/dhclient">dhclient(8)</a>, edit
<tt>/etc/hostname.xl0</tt>.
This is assuming your main Ethernet interface is <tt>xl0</tt>.
Yours might be <tt>em0</tt> or <tt>fxp0</tt> or something else.
d470 2
a471 1
# <b>echo dhcp > /etc/hostname.xl0</b>
d474 2
a475 2
This will cause OpenBSD to automatically start the DHCP client on boot.
OpenBSD will gather its IP address, default gateway, and DNS servers
d479 1
a479 2
If you want to start a DHCP client from the command line, make sure
<tt>/etc/dhclient.conf</tt> exists, then run:
d488 1
a488 18
No matter how you start the DHCP client, you can edit the
<tt>/etc/dhclient.conf</tt> file to <b>not</b> update your DNS according to the
DHCP server's idea of DNS by first uncommenting the "request" lines in it.
They are examples of the default settings, but you need to uncomment
them to override dhclient's defaults.

<blockquote><pre>
request subnet-mask, broadcast-address, time-offset, routers,
      domain-name, domain-name-servers, host-name, lpr-servers, ntp-servers;
</pre></blockquote>

Then remove <tt>domain-name-servers</tt>.
Of course, you may want to remove <tt>host-name</tt>, or other settings too.

<p>
By changing options in your
<a href="http://man.openbsd.org/dhclient.conf">dhclient.conf(5)</a>
file, you're telling the DHCP client how to build your
d490 3
a492 3
The DHCP client overrides any information you already have in
resolv.conf with the information it retrieves from the DHCP server.
Therefore, you'll lose any changes you made manually to resolv.conf.
d495 2
a496 16
There are two mechanisms available to prevent this:

<ul>
  <li>Option modifiers (<tt>default</tt>, <tt>supersede</tt>, <tt>prepend</tt>
    and <tt>append</tt>) allow you to override any of the options in
    <a href="http://man.openbsd.org/dhclient.conf">dhclient.conf(5)</a>.
  <li>The
    <a href="http://man.openbsd.org/resolv.conf.tail">resolv.conf.tail(5)</a>
    file allows you to append anything you want to the resolv.conf file created
    by dhclient.
</ul>

An example would be if you're using DHCP but want to append
<tt>lookup file bind</tt> to the resolv.conf created by dhclient.
There is no option for this in <tt>dhclient.conf</tt>, so you must use
<tt>resolv.conf.tail</tt> to preserve this.
d499 1
a499 1
# <b>echo "lookup file bind" > /etc/resolv.conf.tail</b>
d502 1
a502 1
Now your resolv.conf should include "lookup file bind" at the end.
d504 3
a506 6
<blockquote><pre>
$ <b>cat /etc/resolv.conf</b>
nameserver 192.168.1.1
nameserver 192.168.1.2
lookup file bind
</pre></blockquote>
d511 1
a511 2
<a href="http://man.openbsd.org/dhcpd">dhcpd(8)</a> daemon at startup.
For example:
d517 3
a519 4
This will run dhcpd and attach to all NICs which have valid configurations
in <a href="http://man.openbsd.org/dhcpd.conf">dhcpd.conf(5)</a>.
You may specify individual interfaces instead by naming them explicitly.
For example:
d526 1
a526 1
The options are pretty self-explanatory.
d537 5
a541 7
This will tell your DHCP clients that the domain to append to DNS
requests is example.com (so, if the user types in 'telnet joe' then it
will send them to joe.example.com).
It will point them to DNS servers 192.168.1.3 and 192.168.1.5.
For hosts that are on the same network as an Ethernet interface on the
OpenBSD machine, which is in the 192.168.1.0/24 range, it will assign
them an IP address between 192.168.1.32 and 192.168.1.127.
d545 1
a545 2
If you want to start dhcpd(8) from the command line after editing
<tt>/etc/dhcpd.conf</tt>, run:
d551 2
a552 2
If there were fatal configuration errors, it will exit and let you know
that it failed to start.
d557 3
a559 4
If you are serving DHCP to a Windows box, you may want dhcpd(8) to give
the client a 'WINS' server address.
To make this happen, just add the following line to your
<tt>/etc/dhcpd.conf</tt>:
d566 2
a567 2
See <a href="http://man.openbsd.org/dhcp-options">dhcp-options(5)</a>
for more options that your DHCP clients may want.
@


1.399
log
@mention early on that many hostname.if lines correspond to ifconfig
commands.  this allows us to avoid giving two versions of later
sections, one using config files and one using interactive commands.
@
text
@a42 1
<li><a href= "#PF"             >Firewalling</a>
d65 3
a67 3
If you are a network administrator, setting up routing protocols, using
your OpenBSD box as a router or want to go in-depth into IP networking,
it is recommended that you read the chapter on
d74 2
a75 2
If you are working with applications such as web servers, ftp servers
and mail servers, you may benefit greatly by reading
d77 6
a82 4
Pick some topics that you are interested in or that you use in your
network environment.
The RFCs define many (thousands of) standards for protocols on the
internet and how they are supposed to work.
a451 9

<h2 id="PF">Firewalling</h2>

Packet Filter (from here on referred to as PF) is OpenBSD's system for
filtering IP traffic and doing Network Address Translation.
PF is also capable of normalizing and conditioning IP traffic,
providing bandwidth control and packet prioritization, and can be used
to create powerful and flexible firewalls.
It is described in the <a href="pf/index.html">PF User's Guide</a>.
@


1.398
log
@rework setting aliases a bit. tweaks & ok tj
@
text
@d150 10
d331 1
a331 19

<p>
You can also configure aliases by hand using the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> utility.
To bring up the first alias, you would use the command:

<blockquote><pre>
# <b>ifconfig dc0 inet alias 192.168.0.3 netmask 255.255.255.255</b>
</pre></blockquote>

To view these aliases, use:

<blockquote><pre>
$ <b>ifconfig -A</b>
dc0: flags=8863&lt;UP,BROADCAST,NOTRAILERS,RUNNING,SIMPLEX,MULTICAST&gt;
        media: Ethernet manual
        inet 192.168.0.2 netmask 0xffffff00 broadcast 192.168.0.255
        inet 192.168.0.3 netmask 0xffffffff broadcast 192.168.0.3
</pre></blockquote>
@


1.397
log
@zap a useless sentence
@
text
@d258 3
a260 3
If you are having routing problems, you may want to use the <tt>-n</tt> flag
to route(8), which prints the IP addresses rather than doing a DNS lookup
and displaying the hostname.
d295 3
a297 1
OpenBSD has a simple mechanism for setting up IP aliases on an
a298 7
To do this, simply edit the file <tt>/etc/hostname.<i>if</i></tt>.
This file is read upon boot by the
<a href="http://man.openbsd.org/netstart">netstart(8)</a>
script, which is part of the <a href="faq10.html#rc">rc startup hierarchy</a>.
For the example, we assume that the user has an
interface <tt>dc0</tt> and is on the network 192.168.0.0.
The IP address for <tt>dc0</tt> is 192.168.0.2 and the netmask is 255.255.255.0.
d301 3
a303 9
A few side notes about aliases.
In OpenBSD, you only use the interface name.
There is no difference between the first alias and the second alias.
Unlike some other operating systems, OpenBSD doesn't refer to them as
<tt>dc0:0</tt>, <tt>dc0:1</tt>.
If you are referring to a specific aliased IP address with <tt>ifconfig</tt>,
or adding an alias, be sure to use <tt>ifconfig int alias</tt> instead of
just <tt>ifconfig int</tt> at the command line.
You can delete aliases with <tt>ifconfig int delete</tt>.
d306 2
a307 3
Assuming you are using multiple IP addresses which are in the same IP
subnet with aliases, your netmask setting for each alias becomes
255.255.255.255.
d309 2
a310 2
In this example, <tt>/etc/hostname.dc0</tt>, two aliases are added to the
device <tt>dc0</tt>, which was configured as 192.168.0.2 netmask 255.255.255.0.
d314 1
a314 1
inet 192.168.0.2 255.255.255.0 NONE media 100baseTX
d319 5
a323 2
Once you've created this file, a reboot is required for it to take effect.
You can, however, bring up the aliases by hand using the
d331 1
a331 5
(but again, a reboot is recommended to make sure you entered everything
as you expected it to be!)

<p>
To view these aliases, you must use the command:
@


1.396
log
@adjust outputs of netstat -rn and route show to reality:
over the past 17 years since ericj copy-pasted the output from
his box, some columns were added and some other stuff changed.
issue noted by phessler during g2k16
@
text
@a260 1
Here is an example of viewing your routing tables using both programs.
@


1.395
log
@add a forgotten <p> and re-wrap a line
@
text
@d268 8
a275 8
Destination        Gateway            Flags     Refs     Use    Mtu  Interface
default            10.0.0.1           UGS         0       86      -  fxp0
127/8              127.0.0.1          UGRS        0        0      -  lo0
127.0.0.1          127.0.0.1          UH          0        0      -  lo0
10.0.0/24          link#1             UC          0        0      -  fxp0
10.0.0.1           aa:0:4:0:81:d      UHL         1        0      -  fxp0
10.0.0.38          127.0.0.1          UGHS        0        0      -  lo0
224/4              127.0.0.1          URS         0        0      -  lo0
d284 8
a291 8
Destination      Gateway            Flags
default          10.0.0.1           UG
127.0.0.0        LOCALHOST          UG
localhost        LOCALHOST          UH
10.0.0.0         link#1             U
10.0.0.1         aa:0:4:0:81:d      UH
10.0.0.38        LOCALHOST          UGH
BASE-ADDRESS.MCA LOCALHOST          U
@


1.394
log
@clean up whitespace to match the rest of the faq. will make future
diffs smaller
@
text
@d306 1
d652 2
a653 2
Someone could also pretend to be the IP address which you are allowing into
your NFS server.
@


1.393
log
@slightly rework the netstart(8) section: remove sample error output and
corresponding sentences, wording tweaks from tj
@
text
@d155 6
a160 6
<li><a href="http://man.openbsd.org/lo">lo</a>
 - loopback interface
<li><a href="http://man.openbsd.org/pflog">pflog</a>
 - Packet Filter logging interface
<li><a href="http://man.openbsd.org/enc">enc</a>
 - encapsulating interface
d169 24
a192 24
<li><a href="http://man.openbsd.org/ppp">ppp</a>
 - Point-to-Point Protocol interface
<li><a href="http://man.openbsd.org/tun">tun</a>
 - Tunnel network interface
<li><a href="http://man.openbsd.org/bridge">bridge</a>
 - Ethernet bridge interface
<li><a href="http://man.openbsd.org/vlan">vlan</a>
 - IEEE 802.1Q encapsulation interface
<li><a href="http://man.openbsd.org/svlan">svlan</a>
 - IEEE 802.1AD provider bridges (QinQ)
<li><a href="http://man.openbsd.org/gre">gre</a>
 - GRE/MobileIP encapsulation interface
<li><a href="http://man.openbsd.org/gif">gif</a>
 - Generic IPv4/IPv6 tunnel interface
<li><a href="http://man.openbsd.org/carp.4">carp</a>
 - Common Address Redundancy Protocol interface
<li><a href="http://man.openbsd.org/mpe">mpe</a>
 - MPLS Provider Edge
<li><a href="http://man.openbsd.org/vether">vether</a>
 - Virtual Ethernet interface
<li><a href="http://man.openbsd.org/trunk">trunk</a>
 - Link aggregation and link failover interface
<li><a href="http://man.openbsd.org/vxlan">vxlan</a>
 - Virtual eXtensible Local Area Network tunnel Interface
d304 1
a304 6
Other important information:

<ul>
<li>IP for dc0 is 192.168.0.2
<li>NETMASK is 255.255.255.0
</ul>
d376 84
a459 85
<li><b>Replace a NIC with an identical device:</b> This would be the
case when you move the disk system from a failed machine to another
identical machine, or install an image or full backup to identical
hardware.
In this case, things are easy -- no change in configuration will be
needed, other than perhaps changing the IP address in the
<tt>hostname.if</tt> file if needed.

<li><b>Replace a NIC with a different device:</b> This would also be
the case when one moves a disk system to a non-identical machine.
In this case, simply rename the old <tt>hostname.<i>if</i></tt> file to match
the new device.
For example, if you replace an
<a href="http://man.openbsd.org/fxp">fxp(4)</a>
device which was <tt>fxp0</tt> (first fxp) with a
<a href="http://man.openbsd.org/re">re(4)</a>
device, which would end up as <tt>re0</tt>,
you could rename <tt>/etc/hostname.fxp0</tt> to <tt>/etc/hostname.re0</tt>
and your new device would take over the configuration of the old device.
If you might someday restore the original configuration, you may prefer
to make the new file a hard link to the original, rather than renaming it.

<li><b>Replacing one of several similar cards with a different type:</b>
Let's assume you have a machine with <tt>fxp0</tt>, <tt>fxp1</tt> and
<tt>fxp2</tt>, and <tt>fxp0</tt> fails.
Unfortunately, you don't have a spare similar fxp card, so you need to
replace it with an
<a href="http://man.openbsd.org/em">em(4)</a>
card.
This gets a little ugly, as <tt>fxp1</tt> and <tt>fxp2</tt> will rename
themselves:

<blockquote><pre>
<b>old  -> new</b>
fxp0 -> em0
fxp1 -> fxp0
fxp2 -> fxp1
</pre></blockquote>

Again, rename your <tt>/etc/hostname.<i>if</i></tt> files accordingly:

<blockquote><pre>
# <b>cd /etc</b>
# <b>mv hostname.fxp0 hostname.em0</b>
# <b>mv hostname.fxp1 hostname.fxp0</b>
# <b>mv hostname.fxp2 hostname.fxp1</b>
</pre></blockquote>


<li><b>Adding a new NIC to an existing system:</b>
If your added NIC is of a different type, it will be the "0" device of
whatever driver it is.
For example, if you are adding a <a href="http://man.openbsd.org/bge">bge(4)</a>
device to a machine with only an <a href="http://man.openbsd.org/rl">rl(4)</a>
device, life is easy -- the new device will be <tt>bge0</tt>, so create an
appropriate <tt>/etc/hostname.bge0</tt>.

<p>
The more difficult variation is when you are adding a new card of the
same type as another in the machine.
Most add-on NICs will have their MAC address written somewhere on the card.
Make note of this, insert the card, and look at the dmesg.
Note the identifier of the new NIC and its relationship to the earlier NICs.
You may find that ALL the existing NICs have changed number.
You may be able to put the new NIC in a different slot to change the
identifier as desired, but if the earlier devices were onboard, you
may have no option but to adjust the <tt>hostname.<i>if</i></tt> files.

<li><b>Total Confusion:</b> Sometimes, things get totally confused.
Maybe your new machine has lots of multi-port NICs, or several onboard
NICs and you aren't quite sure how they are identified.
Or perhaps changes were made with less care than might be hoped for, and
now you aren't sure what is what.

<p>
The first thing to note is that
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> will tell you both the
MAC address and the link status of each port.
So the first trick might be to mark add-in cards with their MAC addresses.
Another trick in a confused situation can be to simply attach ONE unknown
NIC to a switch port at a time, and look for which NIC in
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> is now showing a link.
Once you have a few ports identified, you will often figure out the rest
quickly.

d467 4
a470 4
<li>PF configuration (<tt>/etc/pf.conf</tt>)
<li>CARP configuration (<tt>/etc/hostname.carp*</tt>)
<li>Bridge configuration (<tt>/etc/hostname.bridge*</tt>)
<li>Trunk configuration (<tt>/etc/hostname.trunk*</tt>)
d543 7
a549 10
<li>
Option modifiers (<tt>default</tt>, <tt>supersede</tt>, <tt>prepend</tt>
and <tt>append</tt>) allow you to override any of the options in
<a href="http://man.openbsd.org/dhclient.conf">dhclient.conf(5)</a>.

<li>
The
<a href="http://man.openbsd.org/resolv.conf.tail">resolv.conf.tail(5)</a>
file allows you to append anything you want to the resolv.conf file
created by dhclient.
d661 3
a663 3
<li><a href="http://man.openbsd.org/portmap">portmap(8)</a>
<li><a href="http://man.openbsd.org/mountd">mountd(8)</a>
<li><a href="http://man.openbsd.org/nfsd">nfsd(8)</a>
d695 10
a704 12
This means that the local filesystem <tt>/work</tt> will be made
available via NFS.
The <tt>-alldirs</tt> option specifies that clients will be able
to mount at any point under <tt>/work</tt> as well as <tt>/work</tt>
itself.
For example, if there was a directory called <tt>/work/monday</tt>,
clients could mount <tt>/work</tt> (and have access to all
files/directories underneath that directory) or they could mount
<tt>/work/monday</tt> and have access to just the files/directories
contained there.
The <tt>-ro</tt> option specifies that clients will only be granted
read-only access.
d712 2
a713 3
Without a list of hosts which can mount a particular directory, anyone
who can reach your server will be able to mount your NFS exported
directories.
d717 2
a718 2
You can either reboot (after enabling them as per the instructions
above) or start them manually.
d727 2
a728 2
maximum number of concurrent client requests that you want to service
by adjusting the flags nfsd is started with.
d744 2
a745 2
NFS filesystems can be mounted from a client without needing to enable
any services or daemons.
d766 4
a769 4
It is important that you use <tt>0 0</tt> at the end of this line so
that your computer does not try to fsck the NFS filesystem on boot.
The other standard security options, such as <tt>noexec</tt>,
<tt>nodev</tt>, and <tt>nosuid</tt>, should also be used where applicable.
d776 4
a779 4
This way, no devices or setuid programs on the NFS server can subvert
security measures on the NFS client.
If you are not mounting programs that you expect to run on the NFS
client, add <tt>noexec</tt> to this list.
d782 2
a783 2
When accessing an NFS mount as the root user, the server automatically
maps root's access to username "nobody" and group "nobody."
d791 6
a796 6
If this file was on an NFS share and the root user tried to access this
file from the NFS client, access would be denied.
This is because the server uses the credentials of the user "nobody"
when root tries to access the file.
Since the user nobody doesn't have permissions to access the file,
access is denied.
d800 1
a800 2
<a href="http://man.openbsd.org/export">exports(5)</a>
file on the NFS server.
d804 3
a806 4
One thing to check to ensure NFS is operating properly is that all the
daemons have properly registered with RPC.
To do this, use
<a href="http://man.openbsd.org/rpcinfo">rpcinfo(8)</a>.
d823 6
a828 8
During normal usage, there are a few other utilities that allow you to
see what is happening with NFS.
One is
<a href="http://man.openbsd.org/showmount">showmount(8)</a>,
which allows you to view what is currently mounted and who is mounting it.
There is also
<a href="http://man.openbsd.org/nfsstat">nfsstat(1)</a>,
which shows much more verbose statistics.
d838 2
a839 2
This output shows that the client 10.0.0.37 has mounted the
<tt>/work</tt> export being served from the server at 10.0.0.1.
d850 2
a851 2
They provide, among other things, an easy way to reduce traffic in a
complex network and yet allow any node to access any other node when needed.
d854 2
a855 2
Note that because of this "invisible" nature, an interface in a bridge
may or may not have an IP address of its own.
d863 2
a864 2
One of my computer racks has a number of older systems, none of which
have a built-in 10BASE-TX NIC.
d873 7
a879 7
This system has two NICs in it now, an Intel EtherExpress/100 <tt>fxp0</tt>
and a 3c590-Combo card <tt>ep0</tt> for the coax port.
<tt>fxp0</tt> is the link to the rest of my network and will thus have an
IP address, while <tt>ep0</tt> is going to be for bridging only, and will
have no IP address.
Machines attached to the coax segment will communicate as if they
were on the rest of my network.
a891 3
No surprises here.

<p>
d919 2
a920 2
This is saying "set up a bridge consisting of the two NICs, <tt>fxp0</tt>
and <tt>ep0</tt>, and activate it."
d934 2
a935 2
We want to bridge <tt>vr1</tt>, <tt>vr2</tt> and <tt>vr3</tt> together,
leaving out <tt>vr0</tt> for an uplink (a cable modem for instance).
d938 2
a939 2
on the bridged network (contrary to the previous example in which
the bridging box was not visible on the network).
d955 5
a959 8
<li>The <a href="#DHCPserver">DHCP server configuration</a> is not
described yet again in this section, but the addressing scheme used here is
the same.
<li>This will also be the uplink router for your bridged network, so we
will use IP address 192.168.1.1 to match the DHCP server configuration.
<li>We will not cover the uplink, routing or firewalling configuration
here.
</li>
d1003 2
a1004 2
Keep in mind, by the nature of a bridge, the same data flows through
both interfaces, so you only need to filter on one interface.
d1031 2
a1032 3
Note that this rule set will prevent anything but incoming HTTP and SSH
traffic from reaching either the bridge machine or any of the other
nodes "behind" it.
d1037 2
a1038 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
command, which can also be used to create a bridge after boot.
d1043 17
a1059 17
<li>It is HIGHLY recommended that you filter on only one interface.
While it is possible to filter on both, you really need to understand
this very well to do it right.

<li>By using the <i>blocknonip</i> option of
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> or in
<a href="http://man.openbsd.org/hostname.if">hostname.bridge0</a>,
you can prevent non-IP traffic (such as IPX or NETBEUI) from slipping
around your filters.
This may be important in some situations, but you should be aware that bridges
work for all kinds of traffic, not just IP.

<li>Bridging requires that the NICs be in a "promiscuous mode" -- they
listen to ALL network traffic, not just that directed at the interface.
This will put a higher load on the processor and bus than one might expect.
Some NICs don't work properly in this mode -- the TI ThunderLAN chip is an
example of a chip that won't work as part of a bridge.
d1064 2
a1065 2
The Preboot Execution Environment, or PXE, is a way to boot a computer
from the network.
d1067 2
a1068 2
Traditionally, PXE booting is done using ROMs on the NIC or mainboard
of the system.
d1073 2
a1074 2
Upon starting the boot process, the PXE-capable NIC broadcasts a DHCP
request over the network.
d1091 4
a1094 4
<a href="http://www.openntpd.org">OpenNTPD</a> is a trivial-to-administer,
safe and simple NTP-compatible way to have accurate time on your computer.
OpenBSD's <a href="http://man.openbsd.org/ntpd">ntpd(8)</a> is controlled
with a simple configuration file,
d1098 2
a1099 2
The OpenNTPD daemon is enabled by default at install time, which results in
your computer's clock slowly moving into synchronization with the
d1101 5
a1105 5
Once your clock is accurately set, <tt>ntpd</tt> will hold it at a high
degree of accuracy.
However, if your clock is more than a few minutes off, it is <i>highly</i>
recommended that you bring it close to accurate initially, as it may take days
or weeks to bring a very-off clock to sync.
d1112 3
a1114 3
In order to use it as a server, you have to add a "<tt>listen on *</tt>" line
to <a href="http://man.openbsd.org/ntpd.conf">/etc/ntpd.conf</a> and restart
the daemon.
d1124 5
a1128 5
When ntpd(8) considers its own time information stable, it announces
it by a "clock now synced" message in <tt>/var/log/daemon</tt>.
Even if the system clock is pretty accurate in the beginning, it can take up
to 10 minutes to get in sync, and hours or days if the clock is not accurately
set at the start.
d1177 14
a1190 16
Note that in order to use some of these cards, you will need to acquire
the firmware files, which the manufacturers refuse to allow
<a href="faq1.html#ReallyFree">free</a> distribution of, so they can not
be included with OpenBSD.
When possible, the man pages linked above include contact information so
you can contact the right people at the manufacturers to let them know
what you feel about this, or to let them know what other product you
have purchased instead.

<p>
Another option to consider for using your OpenBSD-based firewall to
provide wireless access is to use a conventional NIC and an external
bridging Access Point.
This has the added advantage of letting you easily position the antenna
where it is most effective, which is often not directly on the back of
your firewall.
d1195 2
a1196 3
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a>
file as other network adapters are, but as they have more options, they
will often be more complicated.
d1215 2
a1216 3
Note that the <tt>dhcp</tt> should be AFTER the other configuration
lines, as the network adapter will not be able to request the DHCP until
it is configured.
d1221 2
a1222 3
Sometimes, you may be directly connected to your high speed network and
want the full performance of the wire, other times, you will be using
the wireless.
d1227 4
a1230 4
You COULD set up both interfaces with DHCP, but then you would have to
wait for the unused interface to time out while booting, plus things
would be a little confusing if you had both resources available, and
switching between the two resources would be a bit annoying.
d1239 4
a1242 4
Using these two interfaces we will build an interface, <tt>trunk0</tt>, then
use DHCP to get an IP address for this virtual interface.
If we have a cable available, we want to use it, but if not we want to
use the wireless interface.
d1246 2
a1247 2
As we are just assigning them to a combined trunk0 interface, we won't
do much of anything with the wired interface other than activate it:
d1272 3
a1274 4
The trunk is set up to be in "failover" mode, so either interface can be
used.
If both are available, it will prefer the <tt>bge0</tt> port, since that
is the first one added to the trunk device.
d1278 4
a1281 6
Equal-cost multipath routing refers to having multiple routes in
the routing table for the same network, such as the default route,
0.0.0.0/0.
When the kernel is doing a route lookup to determine where to send
packets destined to that network, it can choose from any of the
equal-cost routes.
d1303 3
a1305 3
In this example we can see that one default route points to 10.130.128.1,
which is accessible via the <tt>fxp1</tt> interface, and the other points
to 10.132.0.1, which is accessible via <tt>fxp2</tt>.
d1357 3
a1359 3
It's worth noting that if an interface used by a multipath route goes
down (i.e., loses carrier), the kernel will still try to
forward packets using the route that points to that interface.
d1362 2
a1363 3
<a href="http://man.openbsd.org/ifstated">ifstated(8)</a>
to check for unavailable interfaces and adjust the routing table accordingly.

@


1.392
log
@trim some fat from the resolv.conf(5) section
@
text
@d207 1
a207 1
<h3 id="Setup.resolver">DNS Resolution</h3>
d231 2
a232 2
From here, you can either reboot or run the <tt>/etc/netstart</tt> script.
You can do this by simply typing (as root):
a235 4
writing to routing socket: File exists
add net 127: gateway 127.0.0.1: File exists
writing to routing socket: File exists
add net 224.0.0.0: gateway 127.0.0.1: File exists
d238 4
a241 7
Notice that a few errors were produced.
By running this script, you are reconfiguring things which are already
configured.
As such, some routes already exist in the kernel routing table.
From here, your system should be up and running.
Again, you can check to make sure that your interface was set up correctly with
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>.
d244 8
a251 9
Even though you can completely reconfigure networking on an OpenBSD
system without rebooting, a reboot is HIGHLY recommended after any
significant reconfiguration.
The reason for this is that the environment at boot is somewhat different
than it is when the system is completely up and running.
For example, if you had specified a DNS-resolved symbolic name in any of
the files, you would probably find it worked as expected after reconfigure.
On initial boot, however, your external resolver may not be available,
so the configuration will fail.
@


1.391
log
@move the example hostname.fxp0 file right after the example ifconfig
output so the two can be compared easily. lose some repetition of
hostname.if(5) and some unexplained examples. discussed with tj
@
text
@a197 1

d209 1
a209 1
DNS resolution is controlled by the file
a210 1
Here is an example of the <tt>/etc/resolv.conf</tt> file:
d220 4
a223 11
In this case, the default domain name will be <tt>example.com</tt>,
there are two DNS resolvers, <tt>125.2.3.4</tt> and <tt>125.2.3.5</tt>
specified, and the <tt>/etc/hosts</tt> file will be consulted before the
DNS resolvers are.

<p>
As with virtually all Unix (and many non-Unix) systems, there is a
<a href="http://man.openbsd.org/hosts">hosts(5)</a>
file that can be used to specify systems that are not in (or if used
with the above "lookup" priority, not as desired in) the formal DNS
system.
d226 2
a227 3
If you are using DHCP, you'll want to read <a href="#DHCP">DHCP</a>,
taking note of
<a href="http://man.openbsd.org/resolv.conf.tail">resolv.conf.tail(5)</a>.
@


1.390
log
@merge description of mygate(5) and myname(5) into a single brief section
that explains their purpose and refer to the manual for details
@
text
@d140 10
a197 35
<p>
Interfaces are configured at boot time using /etc/hostname.<i>if</i> files,
where <i>if</i> is replaced by the full name of each interface.
Each interface has its own file.
The example above would use the file <tt>/etc/hostname.fxp0</tt>.

<p>
The layout of this file is simple:

<blockquote><pre>
address_family address netmask broadcast [other options]
</pre></blockquote>

Much more detail about the format of this file can be found in the
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a> man page.

<p>
A typical interface configuration file for an IPv4 address would look like this:

<blockquote><pre>
$ <b>cat /etc/hostname.fxp0</b>
inet 10.0.0.38 255.255.255.0 NONE
</pre></blockquote>

In this case, we have defined an IPv4 (inet) address, with an IP address of
10.0.0.38, a subnet mask of 255.255.255.0 and no specific broadcast address
(which will default to 10.0.0.255 in this case).

<p>
You may want to use special flags specific to a certain interface.

<blockquote><pre>
$ <b>cat /etc/hostname.vlan0</b>
inet 172.21.0.31 255.255.255.0 NONE vlan 2 vlandev fxp1
</pre></blockquote>
@


1.389
log
@sync ifconfig example output with reality:
also display interface index and llprio instead of just priority
@
text
@d36 1
a36 1
  <li><a href="#Setup.gateway" >Default gateway</a>
a37 1
  <li><a href="#Setup.myname"  >Host name</a>
d224 1
a224 1
<h3 id="Setup.gateway">Default gateway</h3>
d226 6
a231 11
Put the IP of your gateway in the file <tt>/etc/mygate</tt>.
This will allow for your gateway to be set upon boot.
This file consists of one line, with just the address of this machine's
gateway.

<p>
It is possible to use a symbolic name there, but be careful.
You can't assume things like the resolver are fully configured
(or even reachable) until <b>after</b> the default gateway is configured.
In other words, it had better be an IP address or something that is
defined in the <tt>/etc/hosts</tt> file.
a262 13

<h3 id="Setup.myname">Host name</h3>

Every Unix machine has a name.
In OpenBSD, the name is specified as a "Fully Qualified Domain Name" (FQDN)
on one line in the file <tt>/etc/myname</tt>.
If this machine is named "puffy" and in the domain example.com, the
file would contain:

<blockquote><pre>
$ <b>cat /etc/myname</b>
puffy.example.com
</pre></blockquote>
@


1.388
log
@compress the first part of the networking faq a little:
remove some strange sentences and superfluous explanations.

ok tj
@
text
@d116 1
a116 1
        priority: 0
d121 1
a121 1
        priority: 0
d126 1
a126 1
        priority: 0
d130 1
a130 1
        priority: 0
@


1.387
log
@zap some <p>'s
@
text
@a78 1
Most likely, you can't read all of them.
a80 1
Look them up, find out how they are intended to work.
d87 2
a88 5
<a href="faq4.html">installation</a> process.
However, it is good to understand what is happening in this process and
how it works.
All network configuration is done using simple text files in the
<tt>/etc</tt> directory.
d94 2
a95 4
You can see your network card get initialized during the booting process,
or after the booting process using the
<a href="http://man.openbsd.org/dmesg">dmesg(8)</a> command.
For example, here is the part of dmesg for an Intel Fast Ethernet
a104 9
The number is assigned based on various criteria, depending upon the
card and other details of the system.
In most cases, with today's common hardware, cards are assigned in the order
they are found during bus probing.
The first fxp found will be <tt>fxp0</tt>, second will be <tt>fxp1</tt>
and so on.
Users of unusual or very old hardware (ISA) may find devices numbered by
hardware resource settings (ISA ne2 is I/O 280 IRQ 9 even if there is no
ne1 or ne0), or MAC address.
d136 3
a138 6
But, it still allows us to see our interface.
In the above example, the interface card is already configured.
This is obvious because an IP network is already configured on fxp0,
hence the values
&quot;inet 10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255&quot;.
Also, the <b>UP</b> and <b>RUNNING</b> flags are set.
a203 1
You will need to read this for less trivial configurations.
d206 1
a206 2
A typical interface configuration file, configured for an IPv4 address,
would look like this:
d218 1
a218 17
You could also specify media types for Ethernet, say, if you wanted to
force 100baseTX full-duplex mode.

<blockquote><pre>
$ <b>cat /etc/hostname.fxp0</b>
inet 10.0.0.38 255.255.255.0 NONE media 100baseTX mediaopt full-duplex
</pre></blockquote>

Of course, you should never force full duplex mode unless both sides of
the connection are set to do this!
In the absence of special needs, media settings should be excluded.
A more likely case might be to force 10base-T or half duplex when your
infrastructure requires it.

<p>
You may also want to use special flags specific to a certain interface.
The format of the hostname file doesn't change much.
@


1.386
log
@trim down the openntpd section and adapt the example config file to its
current version.

from benjamin baier <programmer at netzbasis.de>
ok tb
@
text
@d63 2
a64 5
understand the
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
and
<a href="http://man.openbsd.org/netstat">netstat(1)</a>
man pages.
d95 1
a95 2
<h3 id="Setup.if">Identifying and setting up your network interfaces
</h3>
a96 1
<p>
d124 1
a124 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
utility.
a149 1
<p>
a204 1
<p>
d207 1
a233 1
<p>
a246 1
<p>
a332 1
<p>
a394 1
<p>
a409 1
<p>
a595 1
<p>
a605 1
<p>
a659 1
<p>
a679 1
<p>
a696 1
<p>
a773 1
<p>
a1082 1
<p>
@


1.385
log
@gzip PXE booting. With help from phessler, ok tj
@
text
@d1232 4
a1235 22
Accurate time is important for many computer applications.
However, many people have noticed that their $5 watch can keep better
time than their $2,000 computer.
In addition to knowing what time it is, it is also often important to
synchronize computers so that they all agree on what time it is.
For some time, <a href="http://www.ntp.org">ntp.org</a> has
produced a Network Time Protocol
(<a href="http://www.ietf.org/rfc/rfc1305.txt">RFC1305</a>,
<a href="http://www.ietf.org/rfc/rfc2030.txt">RFC2030</a>)
application, available through <a href="faq15.html#Ports">ports</a>,
which can be used to synchronize clocks on computers over the internet.
However, it is a non-trivial program to set up, has code that's difficult
to audit and has a large memory requirement.
In short, it fills an important role for some people, but it is far
from a solution for all.

<p>
<a href="http://www.openntpd.org">OpenNTPD</a> is an attempt to resolve
some of these problems, making a trivial-to-administer, safe and simple
NTP-compatible way to have accurate time on your computer.
OpenBSD's <a href="http://man.openbsd.org/ntpd">ntpd(8)</a>
is controlled with an easy to understand configuration file,
d1239 3
a1241 3
The OpenNTPD daemon is enabled by default at install time, which
results in your computer's clock slowly moving into synchronization with
the <a href="http://www.pool.ntp.org/">pool.ntp.org</a> time servers.
d1244 14
a1257 52
However, if your clock is more than a few minutes off, it is
<i>highly</i> recommended that you bring it close to accurate initially,
as it may take days or weeks to bring a very-off clock to sync.
You can do this using the <tt>-s</tt> option of ntpd(8) or any other
way to accurately set your system clock.

<h3 id="OpenNTPDaccurate">"But OpenNTPD isn't as accurate as the
ntp.org daemon!"</h3>

This may be true, as that is not among OpenNTPD's
<a href="http://www.openntpd.org/goals.html">design goals</a>.
It is intended to be free, simple, reliable and secure.
There is no plan or desire to have OpenNTPD bloated with every
imaginable feature.

<h3 id="OpenNTPDharmful">"Someone has claimed that OpenNTPD is 'harmful'!"</h3>

Some people have not understood the goals of OpenNTPD -- a simple,
secure and easy to maintain way to keep your computer's clock accurate.
If accurate time keeping is important, a number of users have reported
better results from OpenNTPD than from ntp.org's ntpd.
If security is important, OpenNTPD's code is much more readable (and
thus, auditable) and was written using native OpenBSD function calls
like <a href="http://man.openbsd.org/strlcpy">strlcpy</a>,
rather than more portable functions like
<a href="http://man.openbsd.org/strcpy">strcpy</a>.
It was also written to be secure from the beginning, not "made secure" later.
If having more people using time synchronization is valuable, OpenNTPD
makes it much easier for larger numbers of people to use it.
If this is "harmful," we're all for it.

<p>
There are applications where the ntp.org ntpd is
more appropriate; however it is felt that for a large majority of the
users, OpenNTPD is more than sufficient.

<p>
A more complete response to this by one of the maintainers of OpenNTPD
can be read
<a href="http://www.advogato.org/person/dtucker/diary.html?start=52">here</a>.

<h3 id="OpenNTPDNoServe">Why can't my other machines synchronize
to OpenNTPD?</h3>

ntpd(8) does not listen on any address by default.
So in order to use it as a server, you have to uncomment the
"<tt>#listen on *</tt>" line in
<a href="http://man.openbsd.org/ntpd.conf">/etc/ntpd.conf</a> and restart the
ntp daemon.
Of course, if you wish it to listen on a particular IP address rather
than all available addresses and interfaces, replace the "*" with
the desired address.
d1260 5
a1264 6
When you have ntpd(8) listening, it may happen that other machines still
can't synchronize to it!
A freshly started ntpd(8) daemon (for example, if you just restarted it
after modifying ntpd.conf) refuses to serve time information to other
clients until it adjusts its own clock to a reasonable level of
stability first.
d1267 3
a1269 3
Even if the system clock is pretty accurate in the beginning, it can
take up to 10 minutes to get in sync, and hours or days if the clock is
not accurately set at the start.
@


1.384
log
@remove "setting up your openbsd box as a forwarding gateway" section that
was just a link to a different page.
@
text
@d1206 2
a1207 3
from the network, rather than from a hard disk, USB drive or CD-ROM.
The technology was originally developed by Intel, but is now supported
by most major network card and computer manufacturers.
d1209 1
a1209 4
of the system, but boot floppies are available from various sources
that will also permit PXE booting.
Many ROMs on older NICs support network booting but do NOT support PXE;
OpenBSD/i386 or amd64 cannot currently be booted across the network by these.
d1211 3
a1213 4
<h3>How does PXE booting work?</h3>

First, it is wise to understand how
<a href="faq14.html#BootAmd64">OpenBSD boots</a> on i386 and amd64 platforms.
d1216 3
a1218 3
The DHCP server will assign the adapter an IP address and give it
the name of a file to be retrieved from a
<a href="http://man.openbsd.org/tftp">tftp(1)</a> server and executed.
d1223 1
a1223 12
pxeboot(8) is then able to load and execute a kernel (such as
<tt>bsd</tt> or <a href="faq4.html#bsd.rd"><tt>bsd.rd</tt></a>) from the
same TFTP server.

<h3>How do I do it?</h3>

The first and obvious step is you must have a pxeboot-capable computer
or network adapter.
Some documentation will indicate all modern NICs and computers are PXE
capable, but this is clearly not true -- many low cost systems do not
include PXE ROMs or use an older network boot protocol.
You also need a properly configured <a href="#DHCP">DHCP</a> and TFTP server.
d1226 3
a1228 99
Assuming an OpenBSD machine is the source of the boot files (this is
NOT required), your DHCP server's
<a href="http://man.openbsd.org/dhcpd.conf">dhcpd.conf</a> file will need to
have the following line:

<blockquote><pre>
filename "pxeboot";
</pre></blockquote>

to have the DHCP server offer that file to the booting workstation.
For example:

<blockquote><pre>
shared-network LOCAL-NET {
        option  domain-name "example.com";
        option  domain-name-servers 192.168.1.3, 192.168.1.5;

        subnet 192.168.1.0 netmask 255.255.255.0 {
                option routers 192.168.1.1;
                <b>filename "pxeboot";</b>
                range 192.168.1.32 192.168.1.127;
                default-lease-time 86400;
                max-lease-time 90000;
        }
}
</pre></blockquote>

<p>
You will also have to activate the
<a href="http://man.openbsd.org/tftpd">tftpd(8)</a> daemon.

<blockquote><pre>
# <b>rcctl enable tftpd</b>
# <b>rcctl set tftpd flags /tftpboot</b>
</pre></blockquote>

<tt>tftpd</tt> serves files from a particular directory -- we're using
<tt>/tftpboot</tt> for the example above.
Obviously, this directory needs to be created and populated.
Typically, you will have only a few files here for PXE booting:

<ul>
<li><a href="http://man.openbsd.org/pxeboot">pxeboot</a>, the PXE boot loader
<li><a href="faq4.html#bsd.rd">bsd.rd</a>, the install kernel (or <tt>bsd</tt>,
a customized kernel)
<li><a href="http://man.openbsd.org/boot.conf">boot.conf</a>,
a boot configuration file
</ul>

Note that <tt>/etc/boot.conf</tt> is only needed if the kernel you wish to
boot from is not named <tt>bsd</tt>, or other pxeboot defaults are not
as you need them (for example, you wish to use a serial console).
You can test your tftpd(8) server using a
<a href="http://man.openbsd.org/tftp">tftp(1)</a> client, making sure you can
fetch the needed files.

<p>
When your DHCP and TFTP servers are running, you are ready to try it.
You will have to activate the PXE boot on your system or network card;
consult your system documentation.
Once you have it set, you should see something similar to the following:

<blockquote><pre>
Intel UNDI, PXE-2.0 (build 067)
Copyright (C) 1997,1998 Intel Corporation

For Realtek RTL 8139(X) PCI Fast Ethernet Controller v1.00 (990420)

DHCP MAC ADDR: 00 E0 C5 C8 CF E1
CLIENT IP: 192.168.1.76  MASK: 255.255.255.0  DHCP IP: 192.168.1.252
GATEWAY IP: 192.168.1.1
probing: pc0 com0 com1 apm pxe![2.1] mem[540k 28m a20=on]
disk: hd0*
net: mac 00:e0:c5:c8:cf:e1, ip 192.168.1.76, server 192.168.1.252
>> OpenBSD/i386 PXEBOOT 3.23
boot>
</pre></blockquote>

At this point, you have the standard OpenBSD boot prompt.
If you simply type "<tt>bsd.rd</tt>" here, you will then fetch the
<tt>bsd.rd</tt> file from the TFTP server.

<blockquote><pre>
>> OpenBSD/i386 PXEBOOT 3.23
boot> <b>bsd.rd</b>
booting tftp:bsd.rd: 4375152+733120 [58+122112+105468]=0x516d04
entry point at 0x100120

Copyright (c) 1982, 1986, 1989, 1991, 1993
        The Regents of the University of California.  All rights reserved.
  ...
</pre></blockquote>

The <a href="faq4.html#bsd.rd">bsd.rd install kernel</a> will now boot.

<h3>Can I boot OpenBSD kernels other than <tt>bsd.rd</tt> using PXE?</h3>

Yes, although with the tools currently in OpenBSD, PXE booting is
primarily intended for installing the OS.
@


1.383
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@a402 6
<h3 id="Setup.forward">Setting up your OpenBSD box as a forwarding
gateway</h3>

<p>
This is covered in more detail <a href="pf/example1.html">here</a>.

@


1.382
log
@sthen noticed that 3com's guide was very dated and suggested
to replace it with the relevant chapter of the TCP/IP guide
that contains essentially the same info + a lot more nearby.
@
text
@d15 1
a15 1
<link rel="canonical" href="http://www.openbsd.org/faq/faq6.html">
@


1.381
log
@zap an extra 'href=' that snuck in
@
text
@d72 3
a74 3
you really need to read
<a href="https://web.archive.org/web/20160408121038/https://www.scribd.com/doc/52483921/3Com-Understanding-IP-Addressing">
Understanding IP Addressing</a>.
@


1.380
log
@Understanding IP addressing is no longer available on scribd.
Replace it with its web.archive.org version.

Broken link and replacement found by Michael Reed, thanks!
@
text
@d73 1
a73 1
<a href="href=https://web.archive.org/web/20160408121038/https://www.scribd.com/doc/52483921/3Com-Understanding-IP-Addressing">
@


1.379
log
@grammar and formatting fixes; from larry hynes <larry at larryhynes.com>
@
text
@d73 1
a73 1
<a href="https://www.scribd.com/doc/52483921/3Com-Understanding-IP-Addressing">
d75 2
a76 4
This is an excellent document.
"Understanding IP Addressing" contains fundamental knowledge to build upon
when working with IP networks, especially when you deal with or are
responsible for more than one network.
@


1.378
log
@- shorten a few section titles and fix a title mismatch
- remove "with openbsd" from titles (it should be obvious)
- merge "adding a file set after install" into explanation of file sets
- merge "device not configured" and unsupported hardware sections
- remove invisible <p> tags

ok tb
@
text
@d89 1
a89 1
Internet and how they are supposed to work.
d109 1
a109 1
For example, here is the part of dmesg for a Intel Fast Ethernet
d121 1
a121 1
In most cases with today's common hardware, cards are assigned by the order
d283 1
a283 1
(or even reachable) until AFTER the default gateway is configured.
d455 1
a455 1
Once you've made this file, it just requires a reboot for it to take effect.
d491 1
a491 1
between boots -- it names them in order that they are found.
d506 1
a506 1
<tt>hostname.if</tt> if needed.
d553 2
a554 2
device to a machine with only a <a href="http://man.openbsd.org/rl">rl(4)</a>
device, life is easy -- the new device will be <tt>bge0</tt>, create an
d560 1
a560 2
Most add-on NICs will have the MAC address of the card somewhere written
on the card.
d566 1
a566 2
may have no options, and have to adjust the <tt>hostname.<i>if</i></tt>
files.
d568 1
a568 1
<li><b>Total Confusion:</b>  Sometimes, things get totally confused.
d570 3
a572 3
NICs and you aren't quite sure how they are identified, or changes were
made with less care than might be hoped for, and now you aren't sure
what is what.
d640 1
a640 1
Where <tt>xl0</tt> is the interface on which you want to receive DHCP.
d778 1
a778 1
It does not talk about securing NFS.
d820 1
a820 1
For our example server, we've setup an exports file that looks like this:
d863 1
a863 1
You should set an appropriate number of NFS server instances handle the
d989 3
a991 2
The bridge will only forward packets that have to pass from one segment to the
other, so among other things, they provide an easy way to reduce traffic in a
d1063 5
a1067 5
This is saying set up a bridge consisting of the two NICs, <tt>fxp0</tt>
and <tt>ep0</tt>, and activate it.
Does it matter which order the cards are listed?
No, remember a bridge is very symmetrical -- packets flow in and out
in both directions.
d1141 1
a1141 1
Reboot and voil&agrave;!
d1207 1
a1207 1
Some NICs don't work properly in this mode, the TI ThunderLAN chip is an
d1215 2
a1216 2
The technology was originally developed by Intel, but is supported
by most major network card and computer manufacturers now.
d1219 1
a1219 1
that will permit PXE booting, as well.
d1229 1
a1229 1
The DHCP server will assign the adapter an IP address, and gives it
d1233 3
a1235 3
For OpenBSD, the file is <a href="http://man.openbsd.org/pxeboot">pxeboot</a>,
which takes the place of the standard
<a href="http://man.openbsd.org/boot">boot(8)</a> file.
d1286 2
a1287 2
It serves files from a particular directory, and in the case that directory
is <tt>/tftpboot</tt>, which we will use for this example.
d1354 1
a1354 1
time than their $2000 computer.
d1362 1
a1362 1
which can be used to synchronize clocks on computers over the Internet.
d1378 3
a1380 3
will result in your computer's clock slowly moving towards, then keeping
itself synchronized to the <a href="http://www.pool.ntp.org/">pool.ntp.org</a>
time servers.  Once your clock is accurately set, ntpd will hold it at a high
d1596 3
a1598 2
used, but if both are available, it will prefer the bge0 port, since
that is the first added to the trunk device.
d1609 1
a1609 1
connections, e.g., redundant connections to the Internet.
d1629 3
a1631 3
In this example we can see that one default route points to 10.130.128.1
which is accessible via the fxp1 interface, and the other points
to 10.132.0.1 which is accessible via <tt>fxp2</tt>.
@


1.377
log
@unify spelling of 'man page'
@
text
@d44 1
a44 1
<li><a href= "#PF"             >Firewalling with OpenBSD</a>
d51 1
a51 1
<li><a href="#Bridge"          >Setting up a bridge with OpenBSD</a>
d600 1
a600 1
<h2 id="PF">Firewalling with OpenBSD</h2>
d984 1
a984 1
<h2 id="Bridge">Setting up a network bridge in OpenBSD</h2>
@


1.376
log
@drop ?query= from man-links and update scribd link to https.
from validator.w3.org/checklink
@
text
@d216 1
a216 1
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> manpage.
d1456 2
a1457 2
<a href="http://man.openbsd.org/pci">pci(4)</a> manpages.
Please see the manpages for precise details.
@


1.375
log
@- simplify faq section titles, making the actual topics more prevalent
- merge flash and java sections into a single browser plugin section
- correct some tab/space inconsistency
- fix invalid html

from christian heckendorf <mbie at ulmus.me>

discussed with tb
@
text
@d73 1
a73 1
<a href="http://www.scribd.com/doc/52483921/3Com-Understanding-IP-Addressing">
d1470 1
a1470 1
    and <a href="http://man.openbsd.org/?query=ural">ural(4)</a>
d1493 1
a1493 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a> utility.
@


1.374
log
@some more wrapping of man links
@
text
@d44 1
a44 1
<li><a href= "#PF"             >How do I filter and firewall with OpenBSD?</a>
d52 1
a52 1
<li><a href="#PXE"             >How do I boot using PXE?</a>
d54 2
a55 2
<li><a href="#Wireless"        >What are my wireless networking options?</a>
<li><a href="#Multipath"       >How can I do equal-cost multipath routing?</a>
d600 1
a600 1
<h2 id="PF">How do I filter and firewall with OpenBSD?</h2>
d1212 1
a1212 1
<h2 id="PXE">How do I boot using PXE? (i386, amd64)</h2>
d1449 1
a1449 1
<h2 id="Wireless">What are my wireless networking options?</h2>
d1600 1
a1600 1
<h2 id="Multipath">How can I do equal-cost multipath routing?</h2>
@


1.373
log
@s/on the/in the
@
text
@d108 1
a108 2
<a href="http://man.openbsd.org/dmesg">dmesg(8)</a>
command.
d117 2
a118 3
This device uses the
<a href="http://man.openbsd.org/fxp">fxp(4)</a>
driver, and is assigned the number 0 here.
d159 1
a159 2
As you can see here,
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
d183 2
a184 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
<tt>create</tt> command.
d216 1
a216 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
manpage.
d315 2
a316 2
taking note of <a href="http://man.openbsd.org/resolv.conf.tail">
resolv.conf.tail(5)</a>.
d367 2
a368 2
<a href="http://man.openbsd.org/netstat">netstat(1)</a>
or <a href="http://man.openbsd.org/route">route(8)</a>.
d457 1
a457 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
utility.
d552 2
a553 4
For example, if you are adding a
<a href="http://man.openbsd.org/bge">bge(4)</a>
device to a machine with only a
<a href="http://man.openbsd.org/rl">rl(4)</a>
d578 2
a579 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
will tell you both the MAC address and the link status of each port.
d583 1
a583 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
is now showing a link.
d620 2
a621 2
<a href="http://man.openbsd.org/dhclient">dhclient(8)</a>,
edit <tt>/etc/hostname.xl0</tt>.
d707 1
a707 2
<a href="http://man.openbsd.org/dhcpd">dhcpd(8)</a>
daemon at startup.
d820 1
a820 2
best that you read the
<a href="http://man.openbsd.org/exports">exports(5)</a>
d986 2
a987 2
A <a href="http://man.openbsd.org/bridge">bridge(4)</a>
is a link between two or more separate networks.
d1045 2
a1046 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
and setting it to 10BASE-2 (coax).
d1054 1
a1054 2
<a href="http://man.openbsd.org/hostname.if">
<tt>hostname.bridge0</tt></a>.
d1077 2
a1078 2
<a href="http://man.openbsd.org/vr">vr(4)</a>
interfaces, <tt>vr0</tt> through <tt>vr3</tt>.
d1091 1
a1091 2
Fortunately, there is the
<a href="http://man.openbsd.org/vether">vether(4)</a>
d1094 1
a1094 2
<a href="http://man.openbsd.org/dhcpd">dhcpd(8)</a>
listen there.
d1198 2
a1199 2
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
or in  <a href="http://man.openbsd.org/hostname.if">hostname.bridge0</a>,
d1226 2
a1227 2
First, it is wise to understand how <a href="faq14.html#BootAmd64">OpenBSD
boots</a> on i386 and amd64 platforms.
d1232 1
a1232 2
<a href="http://man.openbsd.org/tftp">tftp(1)</a>
server and executed.
d1234 1
a1234 2
For OpenBSD, the file is
<a href="http://man.openbsd.org/pxeboot">pxeboot</a>,
d1253 2
a1254 2
<a href="http://man.openbsd.org/dhcpd.conf">dhcpd.conf</a>
file will need to have the following line:
d1280 1
a1280 2
<a href="http://man.openbsd.org/tftpd">tftpd(8)</a>
daemon.
d1293 1
a1293 2
<li><a href="http://man.openbsd.org/pxeboot">pxeboot</a>,
the PXE boot loader
d1304 2
a1305 2
<a href="http://man.openbsd.org/tftp">tftp(1)</a>
client, making sure you can fetch the needed files.
d1373 1
a1373 2
OpenBSD's
<a href="http://man.openbsd.org/ntpd">ntpd(8)</a>
d1380 2
a1381 3
itself synchronized to the
<a href="http://www.pool.ntp.org/">pool.ntp.org</a> time servers.
Once your clock is accurately set, ntpd will hold it at a high
d1398 1
a1398 2
<h3 id="OpenNTPDharmful">"Someone has claimed that OpenNTPD is
'harmful'!"</h3>
d1406 1
a1406 2
like
<a href="http://man.openbsd.org/strlcpy">strlcpy</a>,
d1430 2
a1431 2
<a href="http://man.openbsd.org/ntpd.conf">/etc/ntpd.conf</a>
and restart the ntp daemon.
d1455 2
a1456 4
<a href="http://man.openbsd.org/usb">usb(4)</a>
and
<a href="http://man.openbsd.org/pci">pci(4)</a>
manpages.
d1480 2
a1481 3
The
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
<tt>media</tt> subcommand shows media capabilities of network interfaces.
d1493 1
a1493 2
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
utility.
d1557 3
a1559 5
Using a
<a href="http://man.openbsd.org/trunk">trunk(4)</a>
device may simplify your life.
Trunks are virtual interfaces made up of one or more other network
interfaces.
d1561 2
a1562 4
<a href="http://man.openbsd.org/bge">bge0</a>
and a wireless
<a href="http://man.openbsd.org/iwn">iwn0</a>
interface.
d1612 2
a1613 3
The
<a href="http://man.openbsd.org/route">route(8)</a>
command is used to add/change/delete routes in the routing table.
d1634 3
a1636 5
Since the
<a href="http://man.openbsd.org/mygate">mygate(5)</a>
file does not yet support multipath default routes, the
above commands should be added to the bottom of the
<a href="http://man.openbsd.org/hostname.if">hostname.if(5)</a>
d1655 1
a1655 2
Be sure to edit
<a href="http://man.openbsd.org/sysctl.conf">sysctl.conf(5)</a>
@


1.372
log
@some tweaks from tj
@
text
@d1475 1
a1475 1
Further supported devices can be found on the
@


1.371
log
@remove long list of wireless devices and use an apropos query instead.
just keep the ones supporting hostap mode.

explain the ifconfig media subcommand and give an example.

discussed with and with input from stsp@@
@
text
@d1484 1
a1484 1
  <li><a href="http://man.openbsd.org/?query=acx">acx(4)</a>
d1486 1
a1486 1
  <li><a href="http://man.openbsd.org/?query=ath">ath(4)</a>
d1488 1
a1488 1
  <li><a href="http://man.openbsd.org/?query=athn">athn(4)</a>
d1490 1
a1490 1
  <li><a href="http://man.openbsd.org/?query=pgt">pgt(4)</a>
d1492 1
a1492 1
  <li><a href="http://man.openbsd.org/?query=ral">ral(4)</a>
d1495 1
a1495 1
  <li><a href="http://man.openbsd.org/?query=rtw">rtw(4)</a>
d1497 1
a1497 1
  <li><a href="http://man.openbsd.org/?query=rum">rum(4)</a>
d1499 1
a1499 1
  <li><a href="http://man.openbsd.org/?query=wi">wi(4)</a>
d1506 1
a1506 1
For wireless devices it displays supported 802.11a/b/g/n media modes and the
d1508 1
a1508 1
For example, to see media capabilities of interface "ath0", type:
a1513 1
<p>
@


1.370
log
@delete section numbers. constantly out of sync, not really used.
@
text
@d1472 11
a1482 1
OpenBSD has support for a number of wireless chipsets:
d1484 17
a1500 57
<li><a href="http://man.openbsd.org/acx">acx(4)</a>
TI ACX100/ACX111 <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/an">an(4)</a>
Aironet Communications 4500/4800
<li><a href="http://man.openbsd.org/ath">ath(4)</a>
Atheros 802.11a/b/g <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/athn">athn(4)</a>
Atheros 802.11/a/g/n devices <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/atu">atu(4)</a>
Atmel AT76C50x USB 802.11b
<li><a href="http://man.openbsd.org/atw">atw(4)</a>
ADMtek ADM8211
<li><a href="http://man.openbsd.org/bwi">bwi(4)</a>
Broadcom AirForce 802.11b/g
<li><a href="http://man.openbsd.org/cnw">cnw(4)</a>
Xircom CreditCard Netwave
<li><a href="http://man.openbsd.org/ipw">ipw(4)</a>
Intel PRO/Wireless 2100 802.11b
<li><a href="http://man.openbsd.org/iwi">iwi(4)</a>
Intel PRO/Wireless 2200BG/2225BG/2915ABG 802.11a/b/g
<li><a href="http://man.openbsd.org/iwm">iwm(4)</a>
Intel Wireless 7260/7265/3160 802.11a/ac/b/g/n
<li><a href="http://man.openbsd.org/iwn">iwn(4)</a>
Intel WiFi Link 4965/5100/5300 802.11a/b/g/n wireless
<li><a href="http://man.openbsd.org/malo">malo(4)</a>
Marvell Libertas 802.11b/g
<li><a href="http://man.openbsd.org/otus">otus(4)</a>
Atheros USB 802.11a/g/n
<li><a href="http://man.openbsd.org/pgt">pgt(4)</a>
Conexant/Intersil Prism GT Full-MAC 802.11a/b/g <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/ral">ral(4)</a>
and <a href="http://man.openbsd.org/ural">ural(4)</a>
Ralink Technology RT25x0 802.11a/b/g <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/rsu">rsu(4)</a>
Realtek RTL8188SU/RTL8192SU USB 802.11b/g/n
<li><a href="http://man.openbsd.org/rtw">rtw(4)</a>
Realtek 8180 802.11b <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/rtwn">rtwn(4)</a>
Realtek RTL8188CE PCIe IEEE 802.11b/g/n
<li><a href="http://man.openbsd.org/rum">rum(4)</a>
Ralink Technology RT2501USB <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/run">run(4)</a>
Ralink Technology USB 802.11a/b/g/Draft-N
<li><a href="http://man.openbsd.org/uath">uath(4)</a>
Atheros USB 802.11a/b/g
<li><a href="http://man.openbsd.org/upgt">upgt(4)</a>
Conexant/Intersil PrismGT SoftMAC USB 802.11b/g
<li><a href="http://man.openbsd.org/urtw">urtw(4)</a>
Realtek RTL8187L USB 802.11b/g
<li><a href="http://man.openbsd.org/urtwn">urtwn(4)</a>
Realtek RTL8188CU/RTL8192CU USB 802.11b/g/n
<li><a href="http://man.openbsd.org/wi">wi(4)</a>
Prism2/2.5/3 <sup>(AP)</sup>
<li><a href="http://man.openbsd.org/wpi">wpi(4)</a>
Intel PRO/Wireless 3945ABG
<li><a href="http://man.openbsd.org/zyd">zyd(4)</a>
ZyDAS ZD1211/ZD1211B USB 802.11b/g
d1503 10
a1512 1
<sup>(AP)</sup> indicates card can be used as an access point.
d1515 4
a1518 4
Adapters based on these chips can be used much like any other network
adapter to connect an OpenBSD system to an existing wireless network,
configured using the standard
<a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a>
a1519 4
Please see the manual pages for precise details.
Some of these cards can also be used in the "Host-Based Access Point" mode,
permitting them to be made into the wireless access point for your network as
part of your firewall.
@


1.369
log
@tweak [faq index] button and sync the pf user's guide with that style.
@
text
@d9 1
a9 1
<title>6 - Networking</title>
a10 1
<meta name= "description"   content= "OpenBSD FAQ 6 - Networking">
d23 1
a23 1
<font color="#e00000">FAQ 6 - Networking</font>
d31 2
a32 2
<li><a href= "#Intro"          >6.1 - Background</a>
<li><a href= "#Setup"          >6.2 - Network configuration</a>
d34 1
a34 1
  <li><a href="#Setup.if"      >6.2.1 - Identifying and setting up your
d36 7
a42 7
  <li><a href="#Setup.gateway" >6.2.2 - Default gateway</a>
  <li><a href="#Setup.resolver">6.2.3 - DNS resolution</a>
  <li><a href="#Setup.myname"  >6.2.4 - Host name</a>
  <li><a href="#Setup.activate">6.2.5 - Activating the changes</a>
  <li><a href="#Setup.chkroute">6.2.6 - Checking routes</a>
  <li><a href="#Setup.aliases" >6.2.8 - Setting up aliases on interfaces</a>
  <li><a href="#Setup.replace" >6.2.9 - Adding and replacing NICs</a>
d44 2
a45 3
<li><a href= "#PF"             >6.3 - How do I filter and firewall with
                                OpenBSD?</a>
<li><a href= "#DHCP"           >6.4 - Dynamic Host Configuration Protocol</a>
d47 2
a48 2
  <li><a href="#DHCPclient"    >6.4.1 - DHCP client</a>
  <li><a href="#DHCPserver"    >6.4.2 - DHCP server</a>
d50 6
a55 8
<li><a href= "#NFS"            >6.5 - Using NFS</a>
<li><a href= "#Bridge"         >6.6 - Setting up a bridge with OpenBSD</a>
<li><a href= "#PXE"            >6.7 - How do I boot using PXE?</a>
<li><a href="#OpenNTPD"        >6.8 - Using OpenNTPD</a>
<li><a href="#Wireless"        >6.9 - What are my wireless networking
                                options?</a>
<li><a href="#Multipath"       >6.10 - How can I do equal-cost multipath
                                routing?</a>
d60 1
a60 1
<h2 id="Intro">6.1 - Background</h2>
d91 1
a91 1
<h2 id="Setup">6.2 - Network configuration</h2>
d100 1
a100 1
<h3 id="Setup.if">6.2.1 - Identifying and setting up your network interfaces
d277 1
a277 1
<h3 id="Setup.gateway">6.2.2 - Default gateway</h3>
d291 1
a291 1
<h3 id="Setup.resolver">6.2.3 - DNS Resolution</h3>
d318 1
a318 1
If you are using DHCP, you'll want to read <a href="#DHCP">6.4 - DHCP</a>,
d322 1
a322 1
<h3 id="Setup.myname">6.2.4 - Host name</h3>
d335 1
a335 1
<h3 id="Setup.activate">6.2.5 - Activating the changes</h3>
d368 1
a368 1
<h3 id="Setup.chkroute">6.2.6 - Checking routes</h3>
d409 1
a409 1
<h3 id="Setup.forward">6.2.7 - Setting up your OpenBSD box as a forwarding
d415 1
a415 1
<h3 id="Setup.aliases">6.2.8 - Setting up aliases on an interface</h3>
d483 1
a483 1
<h3 id="Setup.replace">6.2.9 - Adding and replacing NICs</h3>
d608 1
a608 1
<h2 id="PF">6.3 - How do I filter and firewall with OpenBSD?</h2>
d617 1
a617 1
<h2 id="DHCP">6.4 - Dynamic Host Configuration Protocol</h2>
d624 1
a624 1
<h3 id="DHCPclient">6.4.1 - DHCP client</h3>
d711 1
a711 1
<h3 id="DHCPserver">6.4.2 - DHCP server</h3>
d781 1
a781 1
<h2 id="NFS">6.5 - Using NFS</h2>
d994 1
a994 1
<h2 id="Bridge">6.6 - Setting up a network bridge in OpenBSD</h2>
d1225 1
a1225 1
<h2 id="PXE">6.7 - How do I boot using PXE? (i386, amd64)</h2>
d1368 1
a1368 1
<h2 id="OpenNTPD">6.8 - Using OpenNTPD</h2>
d1470 1
a1470 1
<h2 id="Wireless">6.9 - What are my wireless networking options?</h2>
d1655 1
a1655 1
<h2 id="Multipath">6.10 - How can I do equal-cost multipath routing?</h2>
@


1.368
log
@save some space by moving the [faq index] button to the top right corner
and removing the <h3> table of contents.
@
text
@d25 3
a27 1
<small><a href= "index.html" style="float:right;">[FAQ Index]</a></small>
@


1.367
log
@fix a few links in the previous commit
@
text
@d25 1
a25 1
<div style='float: right'><a href="index.html">FAQ Index</a></div>
d28 1
a1753 3
<hr>
<p>
<a href="index.html">[FAQ Index]</a>
@


1.366
log
@use short form man links in the faq and fix a few broken links
@
text
@d519 1
a519 1
<a href="http://man.openbsd.org/fxp4">fxp(4)</a>
@


1.365
log
@each faq page has header and footer links that look like this:

[faq index] [to section x - some topic] [to section y - another topic]

that can be very useful if the faq you're reading only covers one topic,
or if the pages are meant to be read in order. it makes sense to have
them on the pf and smtpd faq pages, but the main faq contains a variety
of unrelated topics, so they're not actually very useful there. remove.

while here, make a few subject titles more concise.

ok tb
@
text
@d25 1
a27 5
<p>
<a href= "index.html">[FAQ Index]</a>
<p>

<h3>Table of Contents</h3>
d65 1
a65 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d67 1
a67 1
<a href="http://man.openbsd.org/?query=netstat">netstat(1)</a>
d109 1
a109 1
<a href="http://man.openbsd.org/?query=dmesg">dmesg(8)</a>
d120 1
a120 1
<a href="http://man.openbsd.org/?query=fxp">fxp(4)</a>
d134 1
a134 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d138 1
a138 1
<a href="http://man.openbsd.org/?query=fxp">fxp(4)</a>.
d163 1
a163 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d178 1
a178 1
<li><a href="http://man.openbsd.org/?query=lo">lo</a>
d180 1
a180 1
<li><a href="http://man.openbsd.org/?query=pflog">pflog</a>
d182 1
a182 1
<li><a href="http://man.openbsd.org/?query=enc">enc</a>
d187 1
a187 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d192 1
a192 1
<li><a href="http://man.openbsd.org/?query=ppp">ppp</a>
d194 1
a194 1
<li><a href="http://man.openbsd.org/?query=tun">tun</a>
d196 1
a196 1
<li><a href="http://man.openbsd.org/?query=bridge">bridge</a>
d198 1
a198 1
<li><a href="http://man.openbsd.org/?query=vlan">vlan</a>
d200 1
a200 1
<li><a href="http://man.openbsd.org/?query=svlan">svlan</a>
d202 1
a202 1
<li><a href="http://man.openbsd.org/?query=gre">gre</a>
d204 1
a204 1
<li><a href="http://man.openbsd.org/?query=gif">gif</a>
d206 1
a206 1
<li><a href="http://man.openbsd.org/?query=carp&amp;sec=4">carp</a>
d208 1
a208 1
<li><a href="http://man.openbsd.org/?query=mpe">mpe</a>
d210 1
a210 1
<li><a href="http://man.openbsd.org/?query=vether">vether</a>
d212 1
a212 1
<li><a href="http://man.openbsd.org/?query=trunk">trunk</a>
d214 1
a214 1
<li><a href="http://man.openbsd.org/?query=vxlan">vxlan</a>
d220 1
a220 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d236 1
a236 1
<a href="http://man.openbsd.org/?query=hostname.if">hostname.if(5)</a> man page.
d295 1
a295 1
<a href="http://man.openbsd.org/?query=resolv.conf">resolv.conf(5)</a>.
d313 1
a313 1
<a href="http://man.openbsd.org/?query=hosts">hosts(5)</a>
d320 1
a320 1
taking note of <a href="http://man.openbsd.org/?query=resolv.conf.tail">
d356 1
a356 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>.
d372 2
a373 2
<a href="http://man.openbsd.org/?query=netstat">netstat(1)</a>
or <a href="http://man.openbsd.org/?query=route">route(8)</a>.
d423 1
a423 1
<a href="http://man.openbsd.org/?query=netstart">netstart(8)</a>
d462 1
a462 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d519 1
a519 1
<a href="http://man.openbsd.org/?query=fxp4">fxp(4)</a>
d521 1
a521 1
<a href="http://man.openbsd.org/?query=re&amp;sec=4">re(4)</a>
d533 1
a533 1
<a href="http://man.openbsd.org/?query=em">em(4)</a>
d559 1
a559 1
<a href="http://man.openbsd.org/?query=bge">bge(4)</a>
d561 1
a561 1
<a href="http://man.openbsd.org/?query=rl">rl(4)</a>
d586 1
a586 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d591 1
a591 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d629 1
a629 1
<a href="http://man.openbsd.org/?query=dhclient">dhclient(8)</a>,
d670 1
a670 1
<a href="http://man.openbsd.org/?query=dhclient.conf">dhclient.conf(5)</a>
d672 1
a672 1
<a href="http://man.openbsd.org/?query=resolv.conf">resolv.conf(5)</a> file.
d684 1
a684 1
<a href="http://man.openbsd.org/?query=dhclient.conf">dhclient.conf(5)</a>.
d688 1
a688 1
<a href="http://man.openbsd.org/?query=resolv.conf.tail">resolv.conf.tail(5)</a>
d716 1
a716 1
<a href="http://man.openbsd.org/?query=dhcpd">dhcpd(8)</a>
d725 1
a725 1
in <a href="http://man.openbsd.org/?query=dhcpd.conf">dhcpd.conf(5)</a>.
d779 1
a779 1
See <a href="http://man.openbsd.org/?query=dhcp-options">dhcp-options(5)</a>
d806 3
a808 3
<li><a href="http://man.openbsd.org/?query=portmap">portmap(8)</a>
<li><a href="http://man.openbsd.org/?query=mountd">mountd(8)</a>
<li><a href="http://man.openbsd.org/?query=nfsd">nfsd(8)</a>
d831 1
a831 1
<a href="http://man.openbsd.org/?query=exports">exports(5)</a>
d900 1
a900 1
<a href="http://man.openbsd.org/?query=mount_nfs">mount_nfs(8)</a>.
d910 1
a910 1
<a href="http://man.openbsd.org/?query=fstab">fstab(5)</a>:
d950 1
a950 1
<a href="http://man.openbsd.org/?query=export">exports(5)</a>
d958 1
a958 1
<a href="http://man.openbsd.org/?query=rpcinfo">rpcinfo(8)</a>.
d978 1
a978 1
<a href="http://man.openbsd.org/?query=showmount">showmount(8)</a>,
d981 1
a981 1
<a href="http://man.openbsd.org/?query=nfsstat">nfsstat(1)</a>,
d997 1
a997 1
A <a href="http://man.openbsd.org/?query=bridge">bridge(4)</a>
d1056 1
a1056 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d1060 1
a1060 1
<a href="http://man.openbsd.org/?query=ep">man page</a>.
d1065 1
a1065 1
<a href="http://man.openbsd.org/?query=hostname.if">
d1089 1
a1089 1
<a href="http://man.openbsd.org/?query=vr">vr(4)</a>
d1104 1
a1104 1
<a href="http://man.openbsd.org/?query=vether">vether(4)</a>
d1107 1
a1107 1
<a href="http://man.openbsd.org/?query=dhcpd">dhcpd(8)</a>
d1201 1
a1201 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d1212 2
a1213 2
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
or in  <a href="http://man.openbsd.org/?query=hostname.if">hostname.bridge0</a>,
d1246 1
a1246 1
<a href="http://man.openbsd.org/?query=tftp">tftp(1)</a>
d1250 1
a1250 1
<a href="http://man.openbsd.org/?query=pxeboot">pxeboot</a>,
d1252 1
a1252 1
<a href="http://man.openbsd.org/?query=boot">boot(8)</a> file.
d1269 1
a1269 1
<a href="http://man.openbsd.org/?query=dhcpd.conf">dhcpd.conf</a>
d1296 1
a1296 1
<a href="http://man.openbsd.org/?query=tftpd">tftpd(8)</a>
d1310 1
a1310 1
<li><a href="http://man.openbsd.org/?query=pxeboot">pxeboot</a>,
d1314 1
a1314 1
<li><a href="http://man.openbsd.org/?query=boot.conf">boot.conf</a>,
d1322 1
a1322 1
<a href="http://man.openbsd.org/?query=tftp">tftp(1)</a>
d1392 1
a1392 1
<a href="http://man.openbsd.org/?query=ntpd">ntpd(8)</a>
d1394 1
a1394 1
<a href="http://man.openbsd.org/?query=ntpd.conf">ntpd.conf(5)</a>.
d1428 1
a1428 1
<a href="http://man.openbsd.org/?query=strlcpy">strlcpy</a>,
d1430 1
a1430 1
<a href="http://man.openbsd.org/?query=strcpy">strcpy</a>.
d1452 1
a1452 1
<a href="http://man.openbsd.org/?query=ntpd.conf">/etc/ntpd.conf</a>
d1475 1
a1475 1
<li><a href="http://man.openbsd.org/?query=acx">acx(4)</a>
d1477 1
a1477 1
<li><a href="http://man.openbsd.org/?query=an">an(4)</a>
d1479 1
a1479 1
<li><a href="http://man.openbsd.org/?query=ath">ath(4)</a>
d1481 1
a1481 1
<li><a href="http://man.openbsd.org/?query=athn">athn(4)</a>
d1483 1
a1483 1
<li><a href="http://man.openbsd.org/?query=atu">atu(4)</a>
d1485 1
a1485 1
<li><a href="http://man.openbsd.org/?query=atw">atw(4)</a>
d1487 1
a1487 1
<li><a href="http://man.openbsd.org/?query=bwi">bwi(4)</a>
d1489 1
a1489 1
<li><a href="http://man.openbsd.org/?query=cnw">cnwi(4)</a>
d1491 1
a1491 1
<li><a href="http://man.openbsd.org/?query=ipw">ipw(4)</a>
d1493 1
a1493 1
<li><a href="http://man.openbsd.org/?query=iwi">iwi(4)</a>
d1495 1
a1495 1
<li><a href="http://man.openbsd.org/?query=iwm">iwm(4)</a>
d1497 1
a1497 1
<li><a href="http://man.openbsd.org/?query=iwn">iwn(4)</a>
d1499 1
a1499 1
<li><a href="http://man.openbsd.org/?query=malo">malo(4)</a>
d1501 1
a1501 1
<li><a href="http://man.openbsd.org/?query=otus">otus(4)</a>
d1503 1
a1503 1
<li><a href="http://man.openbsd.org/?query=pgt">pgt(4)</a>
d1505 2
a1506 2
<li><a href="http://man.openbsd.org/?query=ral">ral(4)</a>
and <a href="http://man.openbsd.org/?query=ural">ural(4)</a>
d1508 1
a1508 1
<li><a href="http://man.openbsd.org/?query=rsu">rsu(4)</a>
d1510 1
a1510 1
<li><a href="http://man.openbsd.org/?query=rtw">rtw(4)</a>
d1512 1
a1512 1
<li><a href="http://man.openbsd.org/?query=rtwn">rtwn(4)</a>
d1514 1
a1514 1
<li><a href="http://man.openbsd.org/?query=rum">rum(4)</a>
d1516 1
a1516 1
<li><a href="http://man.openbsd.org/?query=run">run(4)</a>
d1518 1
a1518 1
<li><a href="http://man.openbsd.org/?query=uath">uath(4)</a>
d1520 1
a1520 1
<li><a href="http://man.openbsd.org/?query=upgt">upgt(4)</a>
d1522 1
a1522 1
<li><a href="http://man.openbsd.org/?query=urtw">urtw(4)</a>
d1524 1
a1524 1
<li><a href="http://man.openbsd.org/?query=urtwn">urtwn(4)</a>
d1526 1
a1526 1
<li><a href="http://man.openbsd.org/?query=wi">wi(4)</a>
d1528 1
a1528 1
<li><a href="http://man.openbsd.org/?query=wpi">wpi(4)</a>
d1530 1
a1530 1
<li><a href="http://man.openbsd.org/?query=zyd">zyd(4)</a>
d1540 1
a1540 1
<a href="http://man.openbsd.org/?query=ifconfig">ifconfig(8)</a>
d1568 1
a1568 1
<a href="http://man.openbsd.org/?query=hostname.if">hostname.if(5)</a>
d1610 1
a1610 1
<a href="http://man.openbsd.org/?query=trunk">trunk(4)</a>
d1615 1
a1615 1
<a href="http://man.openbsd.org/?query=bge">bge0</a>
d1617 1
a1617 1
<a href="http://man.openbsd.org/?query=iwn">iwn0</a>
d1669 1
a1669 1
<a href="http://man.openbsd.org/?query=route">route(8)</a>
d1692 1
a1692 1
<a href="http://man.openbsd.org/?query=mygate">mygate(5)</a>
d1695 1
a1695 1
<a href="http://man.openbsd.org/?query=hostname.if">hostname.if(5)</a>
d1715 1
a1715 1
<a href="http://man.openbsd.org/?query=sysctl.conf">sysctl.conf(5)</a>
d1748 1
a1748 1
<a href="http://man.openbsd.org/?query=ifstated">ifstated(8)</a>
@


1.364
log
@pretty sure network doesn't care about carp(3p)
@
text
@a28 2
<a href= "faq5.html">[To Section 5 - Building the System from Source]</a>
<a href= "faq7.html">[To Section 7 - Keyboard and Display Controls]</a>
d48 1
a48 2
<li><a href= "#DHCP"           >6.4 - Dynamic Host Configuration Protocol
                                (DHCP)</a>
d324 2
a325 2
taking note of
<a href="http://man.openbsd.org/?query=resolv.conf.tail">resolv.conf.tail(5)</a>.
d622 1
a622 1
<h2 id="DHCP">6.4 - Dynamic Host Configuration Protocol (DHCP)</h2>
a1759 2
<a href="faq5.html">[To Section 5 - Building the System from Source]</a>
<a href="faq7.html">[To Section 7 - Keyboard and Display Controls]</a>
@


1.363
log
@Make a cross reference to 'ifconfig create' for a longer list
of pseudo-devices. Drop a repetition of 'address'.

Based on an initial diff and with further input from Rob Pierce.
@
text
@d213 1
a213 1
<li><a href="http://man.openbsd.org/?query=carp">carp</a>
@


1.362
log
@No more sl(4). Reported by Jan Vlach, thanks
@
text
@d193 4
a196 1
Other virtual interfaces are automatically created on demand, including:
d226 4
d290 1
a290 1
gateway address.
@


1.361
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@a195 2
<li><a href="http://man.openbsd.org/?query=sl">sl</a>
 - SLIP network interface
@


1.360
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d21 1
d23 8
a30 2
<img alt="[OpenBSD]" height=30 width=141 src="../images/smalltitle.gif" border="0">
</a>
a31 5
<font color="#0000e0">
<a href="index.html">[FAQ Index]</a>
<a href="faq5.html">[To Section 5 - Building the System from Source]</a>
<a href="faq7.html">[To Section 7 - Keyboard and Display Controls]</a>
</font>
a32 4
<h1><font color="#e00000">6 - Networking</font></h1>
<hr>

<p>
@


1.359
log
@fix word order in the rcctl command

from fabian raetz via tj
@
text
@d14 2
@


1.358
log
@uaw -> use
from Juuso Lapinlampi, thanks
@
text
@d1155 1
a1155 1
# <b>rcctl set flags dhcpd vether0</b>
@


1.357
log
@fix URIs, the / before querystring isn't optional, if it isn't fixed up
by the browser the server returns 400 Bad Request
@
text
@d443 1
a443 1
or adding an alias, be sure to uaw <tt>ifconfig int alias</tt> instead of
@


1.356
log
@Some cleanup after beck@@'s monster man.openbsd.org diff.
@
text
@d72 1
a72 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d74 1
a74 1
<a href="http://man.openbsd.org?query=netstat">netstat(1)</a>
d116 1
a116 1
<a href="http://man.openbsd.org?query=dmesg">dmesg(8)</a>
d127 1
a127 1
<a href="http://man.openbsd.org?query=fxp">fxp(4)</a>
d141 1
a141 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d145 1
a145 1
<a href="http://man.openbsd.org?query=fxp">fxp(4)</a>.
d170 1
a170 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d185 1
a185 1
<li><a href="http://man.openbsd.org?query=lo">lo</a>
d187 1
a187 1
<li><a href="http://man.openbsd.org?query=pflog">pflog</a>
d189 1
a189 1
<li><a href="http://man.openbsd.org?query=enc">enc</a>
d196 1
a196 1
<li><a href="http://man.openbsd.org?query=sl">sl</a>
d198 1
a198 1
<li><a href="http://man.openbsd.org?query=ppp">ppp</a>
d200 1
a200 1
<li><a href="http://man.openbsd.org?query=tun">tun</a>
d202 1
a202 1
<li><a href="http://man.openbsd.org?query=bridge">bridge</a>
d204 1
a204 1
<li><a href="http://man.openbsd.org?query=vlan">vlan</a>
d206 1
a206 1
<li><a href="http://man.openbsd.org?query=svlan">svlan</a>
d208 1
a208 1
<li><a href="http://man.openbsd.org?query=gre">gre</a>
d210 1
a210 1
<li><a href="http://man.openbsd.org?query=gif">gif</a>
d212 1
a212 1
<li><a href="http://man.openbsd.org?query=carp">carp</a>
d214 1
a214 1
<li><a href="http://man.openbsd.org?query=mpe">mpe</a>
d216 1
a216 1
<li><a href="http://man.openbsd.org?query=vether">vether</a>
d218 1
a218 1
<li><a href="http://man.openbsd.org?query=trunk">trunk</a>
d220 1
a220 1
<li><a href="http://man.openbsd.org?query=vxlan">vxlan</a>
d238 1
a238 1
<a href="http://man.openbsd.org?query=hostname.if">hostname.if(5)</a> man page.
d297 1
a297 1
<a href="http://man.openbsd.org?query=resolv.conf">resolv.conf(5)</a>.
d315 1
a315 1
<a href="http://man.openbsd.org?query=hosts">hosts(5)</a>
d323 1
a323 1
<a href="http://man.openbsd.org?query=resolv.conf.tail">resolv.conf.tail(5)</a>.
d358 1
a358 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>.
d374 2
a375 2
<a href="http://man.openbsd.org?query=netstat">netstat(1)</a>
or <a href="http://man.openbsd.org?query=route">route(8)</a>.
d425 1
a425 1
<a href="http://man.openbsd.org?query=netstart">netstart(8)</a>
d464 1
a464 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d521 1
a521 1
<a href="http://man.openbsd.org?query=fxp4">fxp(4)</a>
d523 1
a523 1
<a href="http://man.openbsd.org?query=re&amp;sec=4">re(4)</a>
d535 1
a535 1
<a href="http://man.openbsd.org?query=em">em(4)</a>
d561 1
a561 1
<a href="http://man.openbsd.org?query=bge">bge(4)</a>
d563 1
a563 1
<a href="http://man.openbsd.org?query=rl">rl(4)</a>
d588 1
a588 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d593 1
a593 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d631 1
a631 1
<a href="http://man.openbsd.org?query=dhclient">dhclient(8)</a>,
d672 1
a672 1
<a href="http://man.openbsd.org?query=dhclient.conf">dhclient.conf(5)</a>
d674 1
a674 1
<a href="http://man.openbsd.org?query=resolv.conf">resolv.conf(5)</a> file.
d686 1
a686 1
<a href="http://man.openbsd.org?query=dhclient.conf">dhclient.conf(5)</a>.
d690 1
a690 1
<a href="http://man.openbsd.org?query=resolv.conf.tail">resolv.conf.tail(5)</a>
d718 1
a718 1
<a href="http://man.openbsd.org?query=dhcpd">dhcpd(8)</a>
d727 1
a727 1
in <a href="http://man.openbsd.org?query=dhcpd.conf">dhcpd.conf(5)</a>.
d781 1
a781 1
See <a href="http://man.openbsd.org?query=dhcp-options">dhcp-options(5)</a>
d808 3
a810 3
<li><a href="http://man.openbsd.org?query=portmap">portmap(8)</a>
<li><a href="http://man.openbsd.org?query=mountd">mountd(8)</a>
<li><a href="http://man.openbsd.org?query=nfsd">nfsd(8)</a>
d833 1
a833 1
<a href="http://man.openbsd.org?query=exports">exports(5)</a>
d902 1
a902 1
<a href="http://man.openbsd.org?query=mount_nfs">mount_nfs(8)</a>.
d912 1
a912 1
<a href="http://man.openbsd.org?query=fstab">fstab(5)</a>:
d952 1
a952 1
<a href="http://man.openbsd.org?query=export">exports(5)</a>
d960 1
a960 1
<a href="http://man.openbsd.org?query=rpcinfo">rpcinfo(8)</a>.
d980 1
a980 1
<a href="http://man.openbsd.org?query=showmount">showmount(8)</a>,
d983 1
a983 1
<a href="http://man.openbsd.org?query=nfsstat">nfsstat(1)</a>,
d999 1
a999 1
A <a href="http://man.openbsd.org?query=bridge">bridge(4)</a>
d1058 1
a1058 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d1062 1
a1062 1
<a href="http://man.openbsd.org?query=ep">man page</a>.
d1067 1
a1067 1
<a href="http://man.openbsd.org?query=hostname.if">
d1091 1
a1091 1
<a href="http://man.openbsd.org?query=vr">vr(4)</a>
d1106 1
a1106 1
<a href="http://man.openbsd.org?query=vether">vether(4)</a>
d1109 1
a1109 1
<a href="http://man.openbsd.org?query=dhcpd">dhcpd(8)</a>
d1203 1
a1203 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d1214 2
a1215 2
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
or in  <a href="http://man.openbsd.org?query=hostname.if">hostname.bridge0</a>,
d1248 1
a1248 1
<a href="http://man.openbsd.org?query=tftp">tftp(1)</a>
d1252 1
a1252 1
<a href="http://man.openbsd.org?query=pxeboot">pxeboot</a>,
d1254 1
a1254 1
<a href="http://man.openbsd.org?query=boot">boot(8)</a> file.
d1271 1
a1271 1
<a href="http://man.openbsd.org?query=dhcpd.conf">dhcpd.conf</a>
d1298 1
a1298 1
<a href="http://man.openbsd.org?query=tftpd">tftpd(8)</a>
d1312 1
a1312 1
<li><a href="http://man.openbsd.org?query=pxeboot">pxeboot</a>,
d1316 1
a1316 1
<li><a href="http://man.openbsd.org?query=boot.conf">boot.conf</a>,
d1324 1
a1324 1
<a href="http://man.openbsd.org?query=tftp">tftp(1)</a>
d1394 1
a1394 1
<a href="http://man.openbsd.org?query=ntpd">ntpd(8)</a>
d1396 1
a1396 1
<a href="http://man.openbsd.org?query=ntpd.conf">ntpd.conf(5)</a>.
d1430 1
a1430 1
<a href="http://man.openbsd.org?query=strlcpy">strlcpy</a>,
d1432 1
a1432 1
<a href="http://man.openbsd.org?query=strcpy">strcpy</a>.
d1454 1
a1454 1
<a href="http://man.openbsd.org?query=ntpd.conf">/etc/ntpd.conf</a>
d1477 1
a1477 1
<li><a href="http://man.openbsd.org?query=acx">acx(4)</a>
d1479 1
a1479 1
<li><a href="http://man.openbsd.org?query=an">an(4)</a>
d1481 1
a1481 1
<li><a href="http://man.openbsd.org?query=ath">ath(4)</a>
d1483 1
a1483 1
<li><a href="http://man.openbsd.org?query=athn">athn(4)</a>
d1485 1
a1485 1
<li><a href="http://man.openbsd.org?query=atu">atu(4)</a>
d1487 1
a1487 1
<li><a href="http://man.openbsd.org?query=atw">atw(4)</a>
d1489 1
a1489 1
<li><a href="http://man.openbsd.org?query=bwi">bwi(4)</a>
d1491 1
a1491 1
<li><a href="http://man.openbsd.org?query=cnw">cnwi(4)</a>
d1493 1
a1493 1
<li><a href="http://man.openbsd.org?query=ipw">ipw(4)</a>
d1495 1
a1495 1
<li><a href="http://man.openbsd.org?query=iwi">iwi(4)</a>
d1497 1
a1497 1
<li><a href="http://man.openbsd.org?query=iwm">iwm(4)</a>
d1499 1
a1499 1
<li><a href="http://man.openbsd.org?query=iwn">iwn(4)</a>
d1501 1
a1501 1
<li><a href="http://man.openbsd.org?query=malo">malo(4)</a>
d1503 1
a1503 1
<li><a href="http://man.openbsd.org?query=otus">otus(4)</a>
d1505 1
a1505 1
<li><a href="http://man.openbsd.org?query=pgt">pgt(4)</a>
d1507 2
a1508 2
<li><a href="http://man.openbsd.org?query=ral">ral(4)</a>
and <a href="http://man.openbsd.org?query=ural">ural(4)</a>
d1510 1
a1510 1
<li><a href="http://man.openbsd.org?query=rsu">rsu(4)</a>
d1512 1
a1512 1
<li><a href="http://man.openbsd.org?query=rtw">rtw(4)</a>
d1514 1
a1514 1
<li><a href="http://man.openbsd.org?query=rtwn">rtwn(4)</a>
d1516 1
a1516 1
<li><a href="http://man.openbsd.org?query=rum">rum(4)</a>
d1518 1
a1518 1
<li><a href="http://man.openbsd.org?query=run">run(4)</a>
d1520 1
a1520 1
<li><a href="http://man.openbsd.org?query=uath">uath(4)</a>
d1522 1
a1522 1
<li><a href="http://man.openbsd.org?query=upgt">upgt(4)</a>
d1524 1
a1524 1
<li><a href="http://man.openbsd.org?query=urtw">urtw(4)</a>
d1526 1
a1526 1
<li><a href="http://man.openbsd.org?query=urtwn">urtwn(4)</a>
d1528 1
a1528 1
<li><a href="http://man.openbsd.org?query=wi">wi(4)</a>
d1530 1
a1530 1
<li><a href="http://man.openbsd.org?query=wpi">wpi(4)</a>
d1532 1
a1532 1
<li><a href="http://man.openbsd.org?query=zyd">zyd(4)</a>
d1542 1
a1542 1
<a href="http://man.openbsd.org?query=ifconfig">ifconfig(8)</a>
d1570 1
a1570 1
<a href="http://man.openbsd.org?query=hostname.if">hostname.if(5)</a>
d1612 1
a1612 1
<a href="http://man.openbsd.org?query=trunk">trunk(4)</a>
d1617 1
a1617 1
<a href="http://man.openbsd.org?query=bge">bge0</a>
d1619 1
a1619 1
<a href="http://man.openbsd.org?query=iwn">iwn0</a>
d1671 1
a1671 1
<a href="http://man.openbsd.org?query=route">route(8)</a>
d1694 1
a1694 1
<a href="http://man.openbsd.org?query=mygate">mygate(5)</a>
d1697 1
a1697 1
<a href="http://man.openbsd.org?query=hostname.if">hostname.if(5)</a>
d1717 1
a1717 1
<a href="http://man.openbsd.org?query=sysctl.conf">sysctl.conf(5)</a>
d1750 1
a1750 1
<a href="http://man.openbsd.org?query=ifstated">ifstated(8)</a>
@


1.355
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d238 1
a238 2
<a href="http://man.openbsd.org?query=hostname.if">
hostname.if(5)</a> man page.
d297 1
a297 2
<a href="http://man.openbsd.org?query=resolv.conf">
resolv.conf(5)</a>.
d323 1
a323 2
<a href="http://man.openbsd.org?query=resolv.conf.tail">
resolv.conf.tail(5)</a>.
d523 1
a523 1
<a href="http://man.openbsd.org?query=re">re(4)</a>
d631 2
a632 2
<a href="http://man.openbsd.org?query=dhclient">
dhclient(8)</a>, edit <tt>/etc/hostname.xl0</tt>.
d672 1
a672 2
<a href="http://man.openbsd.org?query=dhclient.conf">
dhclient.conf(5)</a>
d674 1
a674 2
<a href="http://man.openbsd.org?query=resolv.conf">
resolv.conf(5)</a> file.
d686 1
a686 2
<a href="http://man.openbsd.org?query=dhclient.conf">
dhclient.conf(5)</a>.
d690 1
a690 2
<a href="http://man.openbsd.org?query=resolv.conf.tail">
resolv.conf.tail(5)</a>
d727 1
a727 2
in <a href="http://man.openbsd.org?query=dhcpd.conf">
dhcpd.conf(5)</a>.
d781 2
a782 2
See <a href="http://man.openbsd.org?query=dhcp-options">
dhcp-options(5)</a> for more options that your DHCP clients may want.
d808 3
a810 6
<li><a href="http://man.openbsd.org?query=portmap">
portmap(8)</a>
<li><a href="http://man.openbsd.org?query=mountd">
mountd(8)</a>
<li><a href="http://man.openbsd.org?query=nfsd">
nfsd(8)</a>
d902 1
a902 2
<a href="http://man.openbsd.org?query=mount_nfs">
mount_nfs(8)</a>.
d980 1
a980 2
<a href="http://man.openbsd.org?query=showmount">
showmount(8)</a>,
d1215 1
a1215 2
or in  <a href="http://man.openbsd.org?query=hostname.if">
hostname.bridge0</a>,
d1312 2
a1313 2
<li><a href="http://man.openbsd.org?query=pxeboot">
pxeboot</a>, the PXE boot loader
d1316 2
a1317 2
<li><a href="http://man.openbsd.org?query=boot.conf">
boot.conf</a>, a boot configuration file
d1396 1
a1396 2
<a href="http://man.openbsd.org?query=ntpd.conf">
ntpd.conf(5)</a>.
d1454 2
a1455 2
<a href="http://man.openbsd.org?query=ntpd.conf">
/etc/ntpd.conf</a> and restart the ntp daemon.
d1570 1
a1570 2
<a href="http://man.openbsd.org?query=hostname.if">
hostname.if(5)</a>
d1697 2
a1698 2
<a href="http://man.openbsd.org?query=hostname.if">
hostname.if(5)</a> files for the <tt>fxp1</tt> and <tt>fxp2</tt> interfaces.
d1717 2
a1718 2
<a href="http://man.openbsd.org?query=sysctl.conf">
sysctl.conf(5)</a> to make the changes permanent.
@


1.354
log
@remove the following sections:
- setting up your openbsd box as a gateway (was just a link to another page)
- tuning network parameters (which only discussed dynamically allocating ports)
- common address redundancy protocol (covered in great detail in the pf faq)
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d74 1
a74 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstat">netstat(1)</a>
d116 1
a116 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg">dmesg(8)</a>
d127 1
a127 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp">fxp(4)</a>
d141 1
a141 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d145 1
a145 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp">fxp(4)</a>.
d170 1
a170 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d185 1
a185 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo">lo</a>
d187 1
a187 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog">pflog</a>
d189 1
a189 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc">enc</a>
d196 1
a196 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sl">sl</a>
d198 1
a198 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp">ppp</a>
d200 1
a200 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun">tun</a>
d202 1
a202 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge">bridge</a>
d204 1
a204 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vlan">vlan</a>
d206 1
a206 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=svlan">svlan</a>
d208 1
a208 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre">gre</a>
d210 1
a210 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gif">gif</a>
d212 1
a212 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=carp">carp</a>
d214 1
a214 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mpe">mpe</a>
d216 1
a216 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vether">vether</a>
d218 1
a218 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=trunk">trunk</a>
d220 1
a220 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vxlan">vxlan</a>
d238 1
a238 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
d298 1
a298 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf">
d317 1
a317 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts">hosts(5)</a>
d325 1
a325 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf.tail">
d361 1
a361 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>.
d377 2
a378 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstat">netstat(1)</a>
or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route">route(8)</a>.
d428 1
a428 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstart">netstart(8)</a>
d467 1
a467 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d524 1
a524 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp4">fxp(4)</a>
d526 1
a526 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=re">re(4)</a>
d538 1
a538 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=em">em(4)</a>
d564 1
a564 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bge">bge(4)</a>
d566 1
a566 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rl">rl(4)</a>
d591 1
a591 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d596 1
a596 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d634 1
a634 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient">
d675 1
a675 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient.conf">
d678 1
a678 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf">
d691 1
a691 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient.conf">
d696 1
a696 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf.tail">
d725 1
a725 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd">dhcpd(8)</a>
d734 1
a734 1
in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd.conf">
d789 1
a789 1
See <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcp-options">
d816 1
a816 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=portmap">
d818 1
a818 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mountd">
d820 1
a820 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd">
d844 1
a844 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports">exports(5)</a>
d913 1
a913 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_nfs">
d924 1
a924 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fstab">fstab(5)</a>:
d964 1
a964 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=export">exports(5)</a>
d972 1
a972 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rpcinfo">rpcinfo(8)</a>.
d992 1
a992 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=showmount">
d996 1
a996 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsstat">nfsstat(1)</a>,
d1012 1
a1012 1
A <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge">bridge(4)</a>
d1071 1
a1071 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d1075 1
a1075 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep">man page</a>.
d1080 1
a1080 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
d1104 1
a1104 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vr">vr(4)</a>
d1119 1
a1119 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vether">vether(4)</a>
d1122 1
a1122 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd">dhcpd(8)</a>
d1216 1
a1216 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d1227 2
a1228 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
or in  <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
d1262 1
a1262 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tftp">tftp(1)</a>
d1266 1
a1266 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pxeboot">pxeboot</a>,
d1268 1
a1268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot">boot(8)</a> file.
d1285 1
a1285 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd.conf">dhcpd.conf</a>
d1312 1
a1312 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tftpd">tftpd(8)</a>
d1326 1
a1326 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pxeboot">
d1330 1
a1330 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot.conf">
d1338 1
a1338 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tftp">tftp(1)</a>
d1408 1
a1408 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ntpd">ntpd(8)</a>
d1410 1
a1410 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ntpd.conf">
d1445 1
a1445 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strlcpy">strlcpy</a>,
d1447 1
a1447 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strcpy">strcpy</a>.
d1469 1
a1469 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ntpd.conf">
d1492 1
a1492 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=acx">acx(4)</a>
d1494 1
a1494 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=an">an(4)</a>
d1496 1
a1496 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ath">ath(4)</a>
d1498 1
a1498 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=athn">athn(4)</a>
d1500 1
a1500 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=atu">atu(4)</a>
d1502 1
a1502 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=atw">atw(4)</a>
d1504 1
a1504 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bwi">bwi(4)</a>
d1506 1
a1506 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cnw">cnwi(4)</a>
d1508 1
a1508 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipw">ipw(4)</a>
d1510 1
a1510 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwi">iwi(4)</a>
d1512 1
a1512 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwm">iwm(4)</a>
d1514 1
a1514 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwn">iwn(4)</a>
d1516 1
a1516 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=malo">malo(4)</a>
d1518 1
a1518 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=otus">otus(4)</a>
d1520 1
a1520 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pgt">pgt(4)</a>
d1522 2
a1523 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ral">ral(4)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ural">ural(4)</a>
d1525 1
a1525 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rsu">rsu(4)</a>
d1527 1
a1527 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rtw">rtw(4)</a>
d1529 1
a1529 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rtwn">rtwn(4)</a>
d1531 1
a1531 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rum">rum(4)</a>
d1533 1
a1533 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=run">run(4)</a>
d1535 1
a1535 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=uath">uath(4)</a>
d1537 1
a1537 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=upgt">upgt(4)</a>
d1539 1
a1539 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=urtw">urtw(4)</a>
d1541 1
a1541 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=urtwn">urtwn(4)</a>
d1543 1
a1543 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wi">wi(4)</a>
d1545 1
a1545 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wpi">wpi(4)</a>
d1547 1
a1547 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=zyd">zyd(4)</a>
d1557 1
a1557 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>
d1585 1
a1585 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
d1628 1
a1628 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=trunk">trunk(4)</a>
d1633 1
a1633 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bge">bge0</a>
d1635 1
a1635 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwn">iwn0</a>
d1687 1
a1687 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route">route(8)</a>
d1710 1
a1710 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mygate">mygate(5)</a>
d1713 1
a1713 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if">
d1733 1
a1733 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf">
d1766 1
a1766 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifstated">ifstated(8)</a>
@


1.353
log
@Remove very long, at times very outdated, description of boot process
for i386/amd64 and just refer to the relevant man pages. Nuke pointless
extra section on installboot. Don't pretend we document both i386 and
amd64 and just use amd64 as a proxy. Update anchor to reflect this.
@
text
@d12 2
a13 1
<meta name= "copyright"     content= "This document copyright 1998-2016 by OpenBSD.">
a44 2
  <li><a href="#Setup.forward" >6.2.7 - Setting up your OpenBSD box as
                                a gateway</a>
d56 5
a60 8
<li><a href= "#Tuning"         >6.5 - Tuning networking parameters</a>
<li><a href= "#NFS"            >6.6 - Using NFS</a>
<li><a href= "#Bridge"         >6.7 - Setting up a bridge with OpenBSD</a>
<li><a href= "#PXE"            >6.8 - How do I boot using PXE?</a>
<li><a href= "#CARP"           >6.9 - Common Address Redundancy Protocol
                                (CARP)</a>
<li><a href="#OpenNTPD"        >6.10 - Using OpenNTPD</a>
<li><a href="#Wireless"        >6.11 - What are my wireless networking
d62 1
a62 1
<li><a href="#Multipath"       >6.12 - How can I do equal-cost multipath
d792 1
a792 33
<h2 id="Tuning">6.6 - Tuning networking parameters</h2>

One goal of OpenBSD is to have the system <i>Just Work</i> for the vast
majority of our users.
Twisting knobs you don't understand is far more likely to break the
system than it is to improve its performance.
Always start from the default settings, and <i>only</i> adjust things
you actually see a problem with.
VERY FEW people will need to adjust any networking parameters!

<h3>6.6.1 - I don't want the kernel to dynamically allocate a certain
port</h3>

From <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl#EXAMPLES">
sysctl(8)</a>:

<blockquote><pre>
To set the list of reserved TCP ports that should not be allocated by the
kernel dynamically:

      # <b>sysctl net.inet.tcp.baddynamic=749,750,751,760,761,871</b>

This can be used to keep daemons from stealing a specific port that
another program needs to function.
List elements may be separated by commas and/or whitespace.

It is also possible to add or remove ports from the current list:

      # <b>sysctl net.inet.tcp.baddynamic=+748</b>
      # <b>sysctl net.inet.tcp.baddynamic=-871</b>
</pre></blockquote>

<h2 id="NFS">6.6 - Using NFS</h2>
d1010 1
a1010 1
<h2 id="Bridge">6.7 - Setting up a network bridge in OpenBSD</h2>
d1242 1
a1242 1
<h2 id="PXE">6.8 - How do I boot using PXE? (i386, amd64)</h2>
d1385 1
a1385 253
<h2 id="CARP">6.9 - Common Address Redundancy Protocol (CARP)</h2>

<h3>6.11.1 - What is CARP and how does it work?</h3>

CARP is a tool to help achieve system redundancy by having multiple
computers creating a single, virtual network interface between them.
That way, if any machine fails, another can respond instead.
This allows a degree of load sharing between systems.
CARP is an improvement over the Virtual Router Redundancy Protocol
(VRRP) standard.
It was developed after VRRP was deemed to be not free enough because of
a possibly-overlapping Cisco patent.
For more information on CARP's origins and the legal issues surrounding
VRRP, please visit <a href="../lyrics.html#35">this page</a>.

<p>
To avoid legal conflicts, Ryan McBride (with help from Michael
Shalayeff, Marco Pfatschbacher and Markus Friedl) designed CARP to be
fundamentally different.
The inclusion of cryptography is the most prominent change, but still
only one of many.

<p>
How it works: CARP is a multicast protocol.
It groups several physical computers together under one or more virtual
addresses.
Of these, one system is the master and responds to all packets destined
for the group, the other systems act as hot spares.
No matter what the IP and MAC address of the local physical interface,
packets sent to the CARP address are returned with the CARP information.

<p>
At configurable intervals, the master advertises its operation on IP
protocol number 112.
If the master goes offline, the other systems in the CARP group begin to
advertise.
The host that's able to advertise most frequently becomes the new
master.
When the main system comes back up, it becomes a back up host by
default, although if it's more desirable for one host to be master
whenever possible (e.g. one host is a fast Sun Fire V120 and the
others are comparatively slow SPARCstation IPCs), you can so configure
them.

<p>
While highly redundant and fault-tolerant hardware minimizes the need
for CARP, it doesn't erase it.
There's no hardware fault tolerance that's capable of helping if someone
knocks out a power cord, or if your system administrator types
<tt>reboot</tt> in the wrong window.
CARP also makes it easier to make the patch and reboot cycle transparent
to users, and easier to test a software or hardware upgrade--if it
doesn't work, you can fall back to your spare until fixed.

<p>
There are, however, situations in which CARP won't help.
CARP's design does require that the members of a group be on the same
physical subnet with a static IP address, although with the introduction
of the carpdev directive, there is no more need for IP addresses on the
physical interfaces.
Similarly, services that require a constant connection to the server
(such as SSH or IRC) will not be transparently transferred to the other
system--though in this case, CARP can help with minimizing downtime.
CARP by itself does not synchronize data between applications, this has
to be done through "alternative channels" such as
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfsync">pfsync(4)</a>
(for redundant filtering), manually duplicating data between boxes with
<a href="http://rsync.samba.org/">rsync</a>, or whatever is appropriate
for your application.

<h3>6.11.2 - Configuration</h3>

CARP's controls are located in two places:
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl">sysctl(8)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>.
Let's look at the sysctls first.

<p>
The first sysctl, <tt>net.inet.carp.allow</tt>, defines whether the
host handles CARP packets at all.
Clearly, this is necessary to use CARP.
This sysctl is enabled by default.

<p>
The second, <tt>net.inet.carp.log</tt>, logs CARP state changes,
bad packets and other errors.
Set to log state changes by default.

<p>
Third, <tt>net.inet.carp.preempt</tt> enables natural selection
among CARP hosts.
The most fit for the job (that is to say, able to advertise most
frequently) will become master.
Disabled by default, meaning a system that is not a master will
not attempt to (re)gain master status.

<p>
All these sysctl variables are documented in
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3">
sysctl(3)</a>.

<p>
For the remainder of CARP's configuration, we'll rely on
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a>.
The CARP-specific commands <tt>advbase</tt> and
<tt>advskew</tt> deal with the interval between CARP advertisements.
The formula (in seconds) is <tt>advskew</tt> divided by 256, then added
to <tt>advbase</tt>.
<tt>advbase</tt> can be used to decrease network
traffic or allow longer latency before a backup host takes over;
<tt>advskew</tt> lets you control which host will be master without much
delaying failover (should that be required).

<p>
Next, <tt>pass</tt> sets a password, and <tt>vhid</tt> sets the
virtual host identifier number of the CARP group.
You need to assign a unique number for each CARP group, even if (for
load balancing purposes) they share the same IP address.
CARP is limited to 255 groups.

<p>
Finally, <tt>carpdev</tt> specifies which physical interface belongs to
this particular CARP group.
By default, whichever interface has an IP address in the same subnet
assigned to the CARP interface will be used.

<p>
Let's put all these settings together in a basic configuration.
Let's say you're deploying two identically configured web servers,
<i>rachael</i> (192.168.0.5) and <i>pris</i> (192.168.0.6), to replace
an older system that was at 192.168.0.7.
The commands:

<blockquote><pre>
# <b>ifconfig carp0 create</b>
# <b>ifconfig carp0 vhid 1 pass tyrell carpdev fxp0 192.168.0.7 netmask 255.255.255.0</b>
</pre></blockquote>

will create the carp0 interface and give it a vhid of 1, a password of
<i>tyrell</i>, and the IP address 192.168.0.7 with mask 255.255.255.0.
Assign <tt>fxp0</tt> as the member interface.
To make it permanent across reboots, you can create an
<tt>/etc/hostname.carp0</tt> file that looks like this:

<blockquote><pre>
inet 192.168.0.7 255.255.255.0 192.168.0.255 vhid 1 pass tyrell carpdev fxp0
</pre></blockquote>

Note that the broadcast address is specified in that line, in addition
to the vhid and the password.
Failing to do this is a common cause of errors, as it is needed as a
place holder.

<p>
Do the same on <i>pris</i>.
Whichever system brings the CARP interface up first will be master (assuming
that preempt is disabled; the opposite is true when preempt is enabled).

<p>
But let's say you're not deploying from scratch.
<i>Rachael</i> was already in place at the address 192.168.0.7.
How do you work around that?
Fortunately, CARP can deal with this situation.
You simply assign the address to the CARP interface and leave the physical
interface specified by the `carpdev' keyword without an IP address.
However, it tends to be cleaner to have an IP for each system -- it makes
individual monitoring and access much simpler.

<p>
Let's add another layer of complexity; we want <i>rachael</i> to stay
master when possible.
There are several reasons we might want this: hardware differences,
simple prejudice, "if this system isn't master, there's a problem," or
knowing the default master without doing scripting to parse and email
the output of ifconfig.

<p>
On <i>rachael</i>, we'll use the sysctl we created above, then edit
<tt>/etc/sysctl.conf</tt> to make it permanent.

<blockquote><pre>
# <b>sysctl net.inet.carp.preempt=1</b>
# <b>echo 'net.inet.carp.preempt=1' >> /etc/sysctl.conf</b>
</pre></blockquote>

We'll do configuration on <i>pris</i> too:

<blockquote><pre>
# <b>ifconfig carp0 advskew 100</b>
</pre></blockquote>

This slightly delays <i>pris</i>'s advertisements, meaning
<i>rachael</i> will be master when alive.

<p>
Note that if you are using PF on a CARP'd computer, you must pass
"proto carp" on all involved interfaces, with a line similar to:

<blockquote><pre>
pass on fxp0 proto carp keep state
</pre></blockquote>

<h3>6.11.3 - Load balancing</h3>

Flash forward a few months.
Our company of the previous example has grown to the point where a single
internal Web server is just barely managing the load.
What to do?
CARP to the rescue.
It's time to try load balancing.
Create a new CARP interface and group on <i>rachael</i>:

<blockquote><pre>
# <b>ifconfig carp1 create</b>
# <b>ifconfig carp1 vhid 2 advskew 100 pass bryant carpdev fxp0 192.168.0.7 netmask 255.255.255.0</b>
</pre></blockquote>

On <i>pris</i>, we'll create the new group and interface as well, then set
the "preempt" sysctl:

<blockquote><pre>
# <b>ifconfig carp1 create</b>
# <b>ifconfig carp1 vhid 2 pass bryant carpdev fxp0 192.168.0.7 netmask 255.255.255.0</b>
# <b>sysctl net.inet.carp.preempt=1</b>
</pre></blockquote>

Now we have two CARP groups with the same IP address.
Each group is skewed toward a different host, which means <i>rachael</i>
will stay master of the original group, but <i>pris</i> will take over
the new one.

<p>
While these examples are for a two-machine cluster, the same
principles apply to more systems.
Please note, however, that it's not expected that you will achieve
perfect 50/50 distribution between the two machines--CARP uses a hash of
the originating IP address to determine which system handles the
request, rather than by load.

<h3>6.11.4 - More Information on CARP</h3>
<ul>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=carp">
carp(4)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">
ifconfig(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl">
sysctl(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3">
sysctl(3)</a>
</ul>

<h2 id="OpenNTPD">6.10 - Using OpenNTPD</h2>
d1426 1
a1426 1
<h3 id="OpenNTPDaccurate">6.12.1 - "But OpenNTPD isn't as accurate as the
d1435 1
a1435 1
<h3 id="OpenNTPDharmful">6.12.2 - "Someone has claimed that OpenNTPD is
d1463 1
a1463 1
<h3 id="OpenNTPDNoServe">6.12.3 - Why can't my other machines synchronize
d1488 1
a1488 1
<h2 id="Wireless">6.11 - What are my wireless networking options?</h2>
d1674 1
a1674 1
<h2 id="Multipath">6.12 - How can I do equal-cost multipath routing?</h2>
@


1.352
log
@Pease -> Please, spotted by Chad Dougherty
@
text
@d1292 1
a1292 1
First, it is wise to understand how <a href="faq14.html#Boot386">OpenBSD
@


1.351
log
@sync table of contents with actual page titles and renumber a few so
there are no gaps between them.
@
text
@d1847 4
a1850 4
Pease see the manual pages for precise details.
Some of these cards can also be used in the
"Host-Based Access Point" mode, permitting them to be made into the
wireless access point for your network as part of your firewall.
@


1.350
log
@- remove section 1.9 "what's new in 5.8" (just read the release page)
- remove section 2.1 "web pages of interest"
- amd 64 -> amd64
- mail list -> mailing list
- clean up table of contents
- remove "back" button on index (browsers can do this by themselves now)

ok tb
@
text
@d57 5
a61 5
<li><a href= "#Tuning"         >6.6 - Tuning networking parameters</a>
<li><a href= "#NFS"            >6.7 - Using NFS</a>
<li><a href= "#Bridge"         >6.9 - Setting up a bridge with OpenBSD</a>
<li><a href= "#PXE"            >6.10 - How do I boot using PXE?</a>
<li><a href= "#CARP"           >6.11 - Common Address Redundancy Protocol
d63 2
a64 2
<li><a href="#OpenNTPD"        >6.12 - Using OpenNTPD</a>
<li><a href="#Wireless"        >6.13 - What are my wireless networking
d66 1
a66 1
<li><a href="#Multipath"       >6.14 - How can I do equal-cost multipath
d828 1
a828 1
<h2 id="NFS">6.7 - Simple NFS usage</h2>
d1046 1
a1046 1
<h2 id="Bridge">6.9 - Setting up a network bridge in OpenBSD</h2>
d1278 1
a1278 1
<h2 id="PXE">6.10 - How do I boot using PXE? (i386, amd64)</h2>
d1421 1
a1421 1
<h2 id="CARP">6.11 - Common Address Redundancy Protocol (CARP)</h2>
d1673 1
a1673 1
<h2 id="OpenNTPD">6.12 - Using OpenNTPD</h2>
d1776 1
a1776 1
<h2 id="Wireless">6.13 - What are my wireless networking options?</h2>
d1962 1
a1962 1
<h2 id="Multipath">6.14 - How can I do equal-cost multipath routing?</h2>
@


1.349
log
@s/fconfig/ifconfig

From Bertrand Janin, thanks!
@
text
@d4 5
a16 1
<!-- passes validator.w3.org, please keep it this way -->
@


1.348
log
@new sentence, new line. few small tweaks and zap some whitespace.

ok tj
@
text
@d1259 1
a1259 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">fconfig(8)</a>
@


1.347
log
@tweak previous a bit.
@
text
@d83 4
a86 4
This is an excellent document.  "Understanding IP Addressing" contains
fundamental knowledge to build upon when working with IP networks,
especially when you deal with or are responsible for more than one
network.
d92 6
a97 5
Most likely, you can't read all of them.  Pick some topics that you are
interested in or that you use in your network environment.  Look them
up, find out how they are intended to work.  The RFCs define many
(thousands of) standards for protocols on the Internet and how they are
supposed to work.
d101 1
a101 1
Normally, OpenBSD's network settings are initially configured by the 
d113 3
a115 2
connection. You can see your network card get initialized during the
booting process, or after the booting process using the
d132 3
a134 2
they are found during bus probing. The first fxp found will be <tt>fxp0</tt>,
second will be <tt>fxp1</tt> and so on.
d142 4
a145 3
utility. The following command will show all network interfaces on a
system.  This sample output shows us only one physical Ethernet interface,
an <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp">fxp(4)</a>.
d169 9
a177 8
As you can see here, 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig">ifconfig(8)</a> 
gives us a lot more information than we need at this point. But, it
still allows us to see our interface. In the above example, the
interface card is already configured. This is obvious because an IP
network is already configured on fxp0, hence the values &quot;inet
10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255&quot;.  Also, the
<b>UP</b> and <b>RUNNING</b> flags are set.
d180 2
a181 2
Finally, you will notice several other interfaces come enabled by
default.  These are virtual interfaces that serve various functions.
d252 1
a252 1
In this case, we have defined an IPv4 (inet) address, with an IP address of 
d267 2
a268 2
the connection are set to do this! In the absence of special needs,
media settings should be excluded. 
d289 3
a291 3
It is possible to use a symbolic name there, but be careful. You can't
assume things like the resolver are fully configured (or even reachable)
until AFTER the default gateway is configured.
d316 1
a316 1
As with virtually all Unix (and many non-Unix) systems, there is a 
d355 6
a360 5
Notice that a few errors were produced.  By running this script, you are
reconfiguring things which are already configured.  As such, some routes
already exist in the kernel routing table.  From here, your system should
be up and running. Again, you can check to make sure that your interface
was set up correctly with
d370 3
a372 3
the files, you would probably find it worked as expected after
reconfigure. On initial boot, however, your external resolver may not be
available, so the configuration will fail.
d381 2
a382 2
and displaying the hostname.  Here is an example of viewing your routing
tables using both programs.
d425 2
a426 1
interface. To do this, simply edit the file <tt>/etc/hostname.<i>if</i></tt>.
d431 2
a432 2
interface <tt>dc0</tt> and is on the network 192.168.0.0. Other important
information:
d440 9
a448 7
A few side notes about aliases. In OpenBSD you use the interface name
only. There is no difference between the first alias and the second
alias. Unlike some other operating systems, OpenBSD doesn't refer to
them as dc0:0, dc0:1. If you are referring to a specific aliased IP
address with <tt>ifconfig</tt>, or adding an alias, be sure to uaw
<tt>ifconfig int alias</tt> instead of just <tt>ifconfig int</tt> at
the command line. You can delete aliases with <tt>ifconfig int delete</tt>.
d453 4
a456 4
255.255.255.255.  They do not need to follow the netmask of the first IP
bound to the interface.  In this example, <tt>/etc/hostname.dc0</tt>, two
aliases are added to the device <tt>dc0</tt>, which was configured as
192.168.0.2 netmask 255.255.255.0.
d465 2
a466 2
Once you've made this file, it just requires a reboot for it to take
effect. You can, however, bring up the aliases by hand using the
d468 2
a469 1
utility. To bring up the first alias, you would use the command:
d527 1
a527 1
device, which would end up as <tt>re0</tt>, 
d560 1
a560 1
<li><b>Adding a new NIC to an existing system:</b> 
d574 2
a575 1
on the card.  Make note of this, insert the card, and look at the dmesg.
d617 2
a618 2
filtering IP traffic and doing Network Address Translation. PF is
also capable of normalizing and conditioning IP traffic,
d623 1
a623 1
<h2 id="DHCP">6.4 - Dynamic Host Configuration Protocol (DHCP)</h2> 
d635 2
a636 2
dhclient(8)</a>, edit <tt>/etc/hostname.xl0</tt>. This is assuming
your main Ethernet interface is <tt>xl0</tt>.
d674 1
a674 1
By changing options in your 
d690 1
a690 1
and <tt>append</tt>) allow you to override any of the options in 
d726 2
a727 1
daemon at startup. For example:
d744 2
a745 1
Then edit <tt>/etc/dhcpd.conf</tt>. The options are pretty self-explanatory.
d758 6
a763 6
will send them to joe.example.com).  It will point them to DNS servers
192.168.1.3 and 192.168.1.5.  For hosts that are on the same network as
an Ethernet interface on the OpenBSD machine, which is in the
192.168.1.0/24 range, it will assign them an IP address between
192.168.1.32 and 192.168.1.127.  It will set their default gateway as
192.168.1.1.
d774 3
a776 2
that it failed to start. You can usually see why in <tt>/var/log/messages</tt>
or <tt>/var/log/daemon</tt>.
d780 3
a782 2
the client a 'WINS' server address.  To make this happen, just add the
following line to your <tt>/etc/dhcpd.conf</tt>:
d799 2
a800 2
you actually see a problem with. VERY FEW people will need to adjust any
networking parameters!
d815 2
a816 2
another program needs to function.  List elements may be separated by
commas and/or whitespace.
d830 12
a841 11
This section will go through the steps for a simple setup of NFS. This
example details a server on a LAN, with clients accessing NFS on the
LAN. It does not talk about securing NFS. We presume you have already
setup packet filtering or other firewalling protection to prevent
outside access.  If you are allowing outside access to your NFS server,
and you have any kind of sensitive data stored on it, we strongly
recommend that you employ IPsec.  Otherwise, people can potentially see
your NFS traffic.  Someone could also pretend to be the IP address which
you are allowing into your NFS server.  There are several attacks that
can result.  When properly configured, IPsec protects against these
types of attacks.
d857 2
a858 2
By default, each of these is disabled in OpenBSD. If you want them enabled,
run the following commands:
d894 1
a894 1
files/directories underneath that directory) or they could mount 
d900 2
a901 3
using a netmask of 255.255.255.0 will be authorized to mount this
filesystem. This is important for some servers that are accessible by
different networks.
d919 5
a923 4
The <tt>nfsd_flags</tt> enable TCP (-t) and UDP (-u) connections and enable
4 instances (-n) of nfsd to run. You should set an appropriate number of NFS
server instances handle the maximum number of concurrent client requests
that you want to service by adjusting the flags nfsd is started with.
d940 2
a941 1
any services or daemons. They can be mounted just like any other filesystem.
d1002 2
a1003 1
daemons have properly registered with RPC. To do this, use
d1022 2
a1023 1
see what is happening with NFS. One is
d1025 3
a1027 3
showmount(8)</a>, 
which allows you to view what is currently mounted and who is mounting
it. There is also
d1030 2
a1031 1
To use showmount(8), try <tt>/usr/bin/showmount -a host</tt>. For example:
d1045 7
a1051 7
is a link between two or more separate networks.  Unlike a router, 
packets transfer through the bridge "invisibly" -- logically, the two
network segments appear to be one segment to nodes on either side of the
bridge.  The bridge will only forward packets that have to pass from one
segment to the other, so among other things, they provide an easy way to
reduce traffic in a complex network and yet allow any node to access any
other node when needed.
d1055 5
a1059 5
may or may not have an IP address of its own.  If it does, the interface
has effectively two modes of operation, one as part of a bridge, the
other as a normal, stand-alone NIC.  If neither interface has an IP
address, the bridge will pass network data, but will not be externally
maintainable (which can be a feature).
d1064 7
a1070 6
have a built-in 10BASE-TX NIC.  While they all have an AUI or AAUI
connector, my supply of transceivers is limited to coax.  One of the
machines on this rack is an OpenBSD-based terminal server which is always
on and connected to the high-speed network.  Adding a second NIC with a
coax port will allow me to use this machine as a bridge to the coax
network.
d1079 2
a1080 1
were on the rest of my network.  So, how do we make this happen?
d1083 3
a1085 3
The file <tt>hostname.fxp0</tt> contains the configuration info for
the <tt>fxp0</tt> card.  This machine is set up using DHCP, so its file
looks like this:
d1102 1
a1102 1
Here, we are instructing the system to activate this interface using 
d1104 3
a1106 3
and setting it to 10BASE-2 (coax).  No IP address or similar information
needs to be specified for this interface.  The options the <tt>ep</tt>
card accepts are detailed in its
d1110 2
a1111 2
Now, we need to set up the bridge.  Bridges are initialized by the
existence of a file named something like 
d1113 1
a1113 1
<tt>hostname.bridge0</tt></a>. 
d1124 4
a1127 3
and <tt>ep0</tt>, and activate it.  Does it matter which order the cards
are listed? No, remember a bridge is very symmetrical -- packets flow in
and out in both directions.
d1130 2
a1131 1
That's it!  Reboot and you now have a functioning bridge.
d1140 4
a1143 4
We also want to serve IP addresses through DHCP over the bridged
interfaces.  Being a DHCP server and an uplink router, the box needs to
have an IP address on the bridged network (contrary to the previous
example in which the bridging box was not visible on the network).
d1146 4
a1149 4
It is not possible to assign an IP address directly to a bridge
interface.  The IP address should be added to one of the member
interfaces, but we cannot use a physical interface as the link might be
down, in which case the address would not be reachable.
d1207 4
a1210 5
While there are certainly uses for a simple bridge like this, it is
likely you might want to DO something with the packets as they go
through your bridge.  As you might expect, <a href="#PF">Packet
Filter</a> can be used to restrict what traffic goes through your
bridge.
d1214 2
a1215 2
both interfaces, so you only need to filter on one interface.  Your
default "pass all" statements would look something like this:
d1225 3
a1227 3
I want only web and SSH traffic to reach them.  In this case, we are going
to let all traffic in and out of the <tt>ep0</tt> interface, but filter
on the <tt>fxp0</tt> interface.
d1238 1
a1238 1
pass in quick on fxp0 proto tcp from any to any port { 22 80 } 
d1243 2
a1244 2
nodes "behind" it.  Other results could be had by filtering the other
interface.
d1258 1
a1258 1
<li>By using the <i>blocknonip</i> option of 
d1263 3
a1265 2
around your filters.  This may be important in some situations, but you
should be aware that bridges work for all kinds of traffic, not just IP.
d1269 3
a1271 3
This will put a higher load on the processor and bus than one might
expect.  Some NICs don't work properly in this mode, the TI ThunderLAN
chip is an example of a chip that won't work as part of a bridge. 
d1293 1
a1293 1
the name of a file to be retrieved from a 
d1343 1
a1343 1
You will also have to activate the 
d1353 1
a1353 1
is <tt>/tftpboot</tt>, which we will use for this example. 
d1367 1
a1367 1
boot from is not named <tt>bsd</tt>, or other pxeboot defaults are not 
d1369 1
a1369 1
You can test your tftpd(8) server using a 
d1395 3
a1397 3
At this point, you have the standard OpenBSD boot prompt.  
If you simply type "<tt>bsd.rd</tt>" here, you will then fetch the 
file <tt>bsd.rd</tt> from the TFTP server.
d1481 1
a1481 1
to be done through "alternative channels" such as 
d1503 2
a1504 1
bad packets and other errors. Set to log state changes by default.
d1548 2
a1549 1
an older system that was at 192.168.0.7.  The commands:
d1572 3
a1574 3
Do the same on <i>pris</i>. Whichever system brings the CARP interface
up first will be master (assuming that preempt is disabled; the opposite
is true when preempt is enabled).
d1580 3
a1582 3
Fortunately, CARP can deal with this situation. You simply assign the
address to the CARP interface and leave the physical interface specified
by the `carpdev' keyword without an IP address.
d1613 1
a1613 1
Note that if you are using PF on a CARP'd computer, you must pass 
d1622 7
a1628 4
Flash forward a few months. Our company of the previous example has
grown to the point where a single internal Web server is just barely
managing the load. What to do?  CARP to the rescue.  It's time to try
load balancing. Create a new CARP interface and group on <i>rachael</i>:
d1674 1
a1674 1
In addition to knowing what time it is, it is also often important to 
d1676 1
a1676 1
For some time, <a href="http://www.ntp.org">ntp.org</a> has 
d1690 2
a1691 1
NTP-compatible way to have accurate time on your computer. OpenBSD's 
d1702 5
a1706 5
Once your clock is accurately set, ntpd will hold it at a high 
degree of accuracy. However, if your clock is more than a few minutes
off, it is <i>highly</i> recommended that you bring it close to
accurate initially, as it may take days or weeks to bring a very-off
clock to sync.
d1713 3
a1715 3
This may be true, as that is not among OpenNTPD's 
<a href="http://www.openntpd.org/goals.html">design goals</a>. It is
intended to be free, simple, reliable and secure.
d1730 1
a1730 1
rather than more portable functions like 
d1733 1
a1733 1
If having more people using time synchronization is valuable, OpenNTPD 
d1738 1
a1738 1
There are applications where the ntp.org ntpd is 
d1751 2
a1752 2
So in order to use it as a server, you have to uncomment the 
"<tt>#listen on *</tt>" line in 
d1836 1
a1836 1
 
d1850 1
a1850 1
the firmware files, which the manufacturers refuse to allow 
d1916 1
a1916 1
In this case, we will use a laptop with a wired 
@


1.346
log
@less rc.conf.local, more rcctl, many formatting improvements, remove a few
dead links.

ok tb
@
text
@d196 1
a196 1
 - tunnel network interface
d198 1
a198 1
 - ethernet bridge Interface
d206 1
a206 1
 - generic IPv4/IPv6 tunnel interface
d212 1
a212 1
 - virtual ethernet interface
d214 1
a214 1
 - link aggregation and link failover interface
d278 1
a278 3
Put the IP of your gateway in the file <tt>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mygate">/etc/mygate</a>
</tt>.
d327 1
a327 1
in one line in the file <tt>/etc/myname</tt>.
d329 1
a329 1
file would contain the one line:
d354 1
a354 1
was setup correctly with
d446 2
a447 2
aliases are added to the device dc0, which was configured as 192.168.0.2
netmask 255.255.255.0.
d450 1
a450 1
# <b>cat /etc/hostname.dc0</b>
d568 1
a568 1
identifier as desired, but if the earlier devices were on-board, you
d573 1
a573 1
Maybe your new machine has lots of multi-port NICs, or several on-board
d678 4
a681 4
<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient.conf#OPTION+MODIFIERS">
OPTION MODIFIERS</a></tt>
(<tt>default</tt>, <tt>supersede</tt>, <tt>prepend</tt>, and <tt>append</tt>)
allow you to override any of the options in dhclient.conf(5).
a736 1

a738 1

d753 2
a754 2
If you want to start dhcpd(8) from the command line, after editing
<tt>/etc/dhcpd.conf</tt>, try:
d812 1
a812 11
network. A few choice man pages to read before trying to setup a NFS
server are:

<ul>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd">
nfsd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mountd">
mountd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports">
exports(5)</a>
</ul>
d979 1
a979 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=export">>exports(5)</a>
d1101 4
a1104 4
This is saying set up a bridge consisting of the two NICs, fxp0 and ep0,
and activate it.  Does it matter which order the cards are listed?  No,
remember a bridge is very symmetrical -- packets flow in and out in both
directions.
d1274 1
a1274 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pxeboot">>pxeboot</a>,
d1339 1
a1339 1
/etc/boot.conf</a>, a boot configuration file
d1377 1
a1377 1
boot> bsd.rd
d1521 1
a1521 1
Let's say you're deploying two identically configured Web servers,
@


1.345
log
@unify table of contents with actual page titles, fixing a few broken links
in the process. few minor tweaks while here.

ok tb
@
text
@d7 1
a7 1
<meta name= "copyright"     content= "This document copyright 1998-2015 by OpenBSD.">
d30 2
a31 2
<li><a href= "#Intro" >6.1 - Before we go any further</a>
<li><a href= "#Setup" >6.2 - Network configuration</a>
d34 1
a34 1
    network interfaces</a>
d40 2
a41 1
  <li><a href="#Setup.forward" >6.2.7 - Setting up your OpenBSD box as a gateway</a>
d43 1
a43 1
  <li><a href="#Setup.replace" >6.2.9 - Adding and Replacing NICs</a>
d45 4
a48 2
<li><a href= "#PF"    >6.3 - How do I filter and firewall with OpenBSD?</a>
<li><a href= "#DHCP"  >6.4 - Dynamic Host Configuration Protocol (DHCP)</a>
d50 2
a51 2
  <li><a href="#DHCPclient">6.4.1 - DHCP Client</a>
  <li><a href="#DHCPserver">6.4.2 - DHCP Server</a>
d53 11
a63 9
<li><a href= "#Tuning">6.6 - Tuning networking parameters</a>
<li><a href= "#NFS"   >6.7 - Using NFS</a>
<li><a href= "#Bridge">6.9 - Setting up a bridge with OpenBSD</a>
<li><a href= "#PXE"   >6.10 - How do I boot using PXE?</a>
<li><a href= "#CARP">6.11 - Common Address Redundancy Protocol (CARP)</a>
<li><a href="#OpenNTPD">6.12 - Using OpenNTPD</a>
<li><a href="#Wireless">6.13 - What are my wireless networking options?</a>
<li><a href="#Multipath">6.14 - How can I do equal-cost multipath
	routing?</a>
d68 8
a75 1
<h2 id="Intro">6.1 - Before we go any further</h2>
d78 5
a82 14
For the bulk of this document, it helps if you have read and
at least partially understood the <a href="faq5.html">Kernel
Configuration and Setup</a> section of the FAQ, and the
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">
ifconfig(8)</a> and
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&amp;sektion=1">
netstat(1)</a> man pages.

<p>
If you are a network administrator, and you are setting up routing
protocols, if you are using your OpenBSD box as a router, if you need to
go in depth into IP networking, you really need to read
<a href="http://www.scribd.com/doc/52483921/3Com-Understanding-IP-Addressing"
>Understanding IP Addressing</a>.
d89 3
a91 3
If you are working with applications such as web servers, ftp servers,
and mail servers, you may benefit greatly by
<a href="http://www.rfc-editor.org/rfc.html">reading the RFCs</a>.
d93 1
a93 1
interested in, or that you use in your network environment.  Look them
d100 1
a100 1
Normally, OpenBSD is initially configured by the 
d105 1
a105 1
<i>/etc</i> directory.
d107 2
a108 1
<h3 id="Setup.if">6.2.1 - Identifying and setting up your network interfaces</h3>
d111 1
a111 2
In
OpenBSD, interfaces are named for the type of card, not for the type of
d114 1
a114 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&amp;sektion=8">dmesg(8)</a>
d117 1
a117 1
network card, which uses the device name fxp:
d125 2
a126 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp&amp;sektion=4">fxp</a>
driver, and here is assigned the number 0.
d129 3
a131 3
In most cases today in common hardware, cards are assigned by the order
they are found during bus probing (first fxp found is fxp0, second is
fxp1, etc.).
d138 1
a138 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
d141 1
a141 1
an <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp&amp;sektion=4">fxp(4)</a>.
a147 2
        inet6 ::1 prefixlen 128
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x3
d166 1
a166 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a> 
d180 6
a185 6
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4">lo</a>
 - Loopback Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4">pflog</a>
 - Packet Filter Logging Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&amp;sektion=4">enc</a>
 - Encapsulating Interface
d191 1
a191 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sl&amp;sektion=4">sl</a>
d193 1
a193 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=4">ppp</a>
d195 1
a195 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun&amp;sektion=4">tun</a>
d197 1
a197 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4">bridge</a>
d199 1
a199 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vlan&amp;sektion=4">vlan</a>
d201 1
a201 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=svlan&amp;sektion=4">svlan</a>
d203 1
a203 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&amp;sektion=4">gre</a>
d205 1
a205 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gif&amp;sektion=4">gif</a>
d207 1
a207 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=carp&amp;sektion=4">carp</a>
d209 1
a209 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mpe&amp;sektion=4">mpe</a>
d211 1
a211 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vether&amp;sektion=4">vether</a>
d213 1
a213 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=trunk&amp;sektion=4">trunk</a>
d215 1
a215 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vxlan&amp;sektion=4">vxlan</a>
d221 3
a223 3
where <i>if</i> is replaced by the full name of each interface
and each interface has its own file.
The example above would use the file <i>/etc/hostname.fxp0</i>.
d233 2
a234 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5">hostname.if(5)</a>
man page.
d256 1
d261 1
a261 1
(Of course, you should never force full duplex mode unless both sides of
d265 1
a265 1
infrastructure requires it.)
d268 2
a269 2
Or, you may want to use special flags specific to a certain interface.
The format of the hostname file doesn't change much!
d277 4
a280 2
Put the IP of your gateway in the file <i>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mygate&amp;sektion=5">/etc/mygate</a></i>.
d283 1
a283 1
gateway address:
d285 3
a287 6
<blockquote><pre>
10.0.0.1
</pre></blockquote>

It is possible to use a symbolic name there, but be careful: you can't
assume things like the resolver are fully configured or even reachable
d290 1
a290 1
defined in the <i>/etc/hosts</i> file.
d293 1
d295 3
a297 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5"><i>/etc/resolv.conf</i></a>.
Here is an example of a <i>/etc/resolv.conf</i> file:
d300 1
d309 1
a309 1
specified, and the <i>/etc/hosts</i> file will be consulted before the
d313 3
a315 3
As with virtually all Unix (and many non-Unix) systems, there is an 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5"><i>/etc/hosts</i></a>
file which can be used to specify systems that are not in (or if used
d320 1
a320 1
If you are using DHCP, you'll want to read <a href="#DHCP">6.4 - DHCP</a> 
d322 2
a323 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf.tail&amp;sektion=5">resolv.conf.tail(5)</a>.
d326 1
d329 2
a330 3
in one line in the file
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=myname&amp;sektion=5"><i>/etc/myname</i></a>.
If this machine is named "puffy" and in the domain "example.com", the
d334 1
d339 3
a341 3
From here, you can either reboot or run the
<b>/etc/netstart</b> script. You can do this by simply typing
(as root):
d354 1
a354 1
already exist in the kernel routing table.  From here your system should
d357 1
a357 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>.
d363 1
a363 1
The reason for this is the environment at boot is somewhat different
d367 1
a367 1
reconfigure, but on initial boot, your external resolver may not be
d371 1
d373 4
a376 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&amp;sektion=1">netstat(1)</a>
or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&amp;sektion=8">route(8)</a>.
If you are having routing problems, you may want to use the -n flag to
route(8) which prints the IP addresses rather than doing a DNS lookup
d411 2
a412 1
<h3 id="Setup.forward">6.2.7 - Setting up your OpenBSD box as a forwarding gateway</h3>
d415 1
a415 1
This is covered in detail <a href="pf/example1.html">here</a>.
d421 1
a421 2
interface. To do this simply edit the file
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5"><i>/etc/hostname.&lt;if&gt;</i></a>.
d423 4
a426 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstart&amp;sektion=8">/etc/netstart(8)</a>
script, which is part of the <a href="faq10.html#rc">rc startup
hierarchy</a>.  For the example, we assume that the user has an
interface <b>dc0</b> and is on the network 192.168.0.0. Other important
d438 4
a441 4
them as dc0:0, dc0:1.  If you are referring to a specific aliased IP
address with ifconfig, or adding an alias, be sure to say "<tt>ifconfig
int alias</tt>" instead of just "<tt>ifconfig int</tt>" at the command
line.  You can delete aliases with "<tt>ifconfig int delete</tt>".
d447 3
a449 3
bound to the interface.  In this example, <i>/etc/hostname.dc0</i>, two
aliases are added to the device dc0, which, by the way, was configured
as 192.168.0.2 netmask 255.255.255.0.
d458 1
a458 2
<p>
Once you've made this file, it just takes a reboot for it to take
d460 2
a461 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
utility. To bring up the first alias you would use the command:
d471 1
a471 1
To view these aliases you must use the command:
d481 2
a482 1
<h3 id="Setup.replace">6.2.9 - Adding and Replacing NICs</h3>
d487 1
a487 1
The good news is this is relatively easy, though there are some things
d491 3
a493 5
Key is understanding how OpenBSD names NICs -- we'll ignore "special"
cases like ISA devices which probably shouldn't be used in important
applications today.
Unlike some OSs which try to remember any network adapter the installed
OS has ever seen, OpenBSD does not remember a NICs identification
d501 1
d516 4
a519 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp&amp;sektion=4">fxp(4)</a>
device which was fxp0 (first fxp) with a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=re&amp;sektion=r">re(4)</a>
device, which would end up as re0, 
d521 1
a521 2
and your new re0 device would take over the configuration of the
old fxp0 device.
d523 1
a523 2
to make the new file a hard link to the original, rather than renaming
it.
d526 2
a527 2
Let's assume you have a machine with fxp0, fxp1 and fxp2, and fxp0
fails.
d530 1
a530 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=em&amp;sektion=4">em(4)</a>
d532 3
a534 1
This gets a little ugly, as fxp1 and fxp2 will rename themselves:
d541 3
a543 1
Again, you will rename your <tt>/etc/hostname.*</tt> accordingly:
d556 1
a556 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bge&amp;sektion=4">bge(4)</a>
d558 2
a559 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rl&amp;sektion=4">rl(4)</a>
device, life is easy -- the new device will be bge0, create an
d561 1
d566 2
a567 3
on the card.  Make note of this, insert the card, and look at the dmesg
and note the identifier of the new NIC and its relationship to the
earlier NICs.
d579 1
d582 1
a582 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
d584 2
a585 2
So first trick might be to mark add-in cards with their MAC addresses.
Second trick in a confused situation can be to simply attach ONE unknown
d587 1
a587 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
d597 1
d599 1
a599 1
<li><tt>/etc/pf.conf</tt>
d606 1
d609 1
a609 1
also capable of normalizing and conditioning IP traffic and
d619 1
a619 1
(configured by another machine), and in some cases, can be both.
d621 1
a621 1
<h3 id="DHCPclient">6.4.1 - DHCP Client</h3>
d624 5
a628 5
To use the DHCP client
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient&amp;sektion=8">dhclient(8)</a>
included with OpenBSD, edit <tt>/etc/hostname.xl0</tt> (this is assuming
your main Ethernet interface is xl0.
Yours might be ep0 or fxp0 or something else.)
d631 1
a631 1
# <b>echo dhcp &gt; /etc/hostname.xl0</b>
d641 1
a641 1
<tt>/etc/dhclient.conf</tt> exists, then try:
d644 1
a644 1
# <b>dhclient fxp0</b>
d647 1
a647 2
<p>
Where <tt>fxp0</tt> is the interface on which you want to receive DHCP.
d652 3
a654 3
dhcp server's idea of DNS by first uncommenting the 'request' lines in
it (they are examples of the default settings, but you need to uncomment
them to override dhclient's defaults.)
d661 2
a662 4
<p>
and then remove <tt>domain-name-servers</tt>.
Of course, you may want to remove <tt>host-name</tt>, or other settings
too.
d666 1
a666 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient.conf&amp;sektion=5">
d669 2
a670 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5">resolv.conf(5)</a>
file.
d672 1
a672 1
resolv.conf(5) with the information it retrieves from the DHCP server.
d680 3
a682 3
<tt><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient.conf&amp;sektion=5#OPTION+MODIFIERS">OPTION
MODIFIERS</a></tt>
(<b>default</b>, <b>supersede</b>, <b>prepend</b>, and <b>append</b>)
d686 5
a690 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf.tail&amp;sektion=5"><tt>resolv.conf.tail(5)</tt></a>
allows you to append anything you want to the resolv.conf(5) file
created by dhclient(8).
d694 3
a696 3
An example would be if you're using DHCP but you want to append
<tt>lookup file bind</tt> to the resolv.conf(5) created by dhclient(8).
There is no option for this in <tt>dhclient.conf</tt> so you must use
d700 1
a700 1
# <b>echo "lookup file bind" &gt /etc/resolv.conf.tail</b>
d703 2
a704 1
Now your resolv.conf(5) should include "lookup file bind" at the end.
d706 1
d712 1
a712 1
<h3 id="DHCPserver">6.4.2 - DHCP Server</h3>
d715 12
a726 4
If you want to use OpenBSD as a DHCP server
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd&amp;sektion=8">dhcpd(8)</a>,
edit <tt>/etc/rc.conf.local</tt> so that it contains the line
<tt>dhcpd_flags=""</tt>.
a727 3
<pre>
     # <b>rcctl enable dhcpd</b>
</pre>
d729 3
a731 5
This will run dhcpd, and it will attach to all NICs which have valid
configurations in <tt>/etc/dhcpd.conf</tt>.
You may specify individual interfaces instead of all by naming them
explicitly, for example, <tt>dhcpd_flags="xl1 xl2
xl3"</tt>.
d734 1
a734 2
Then, edit <tt>/etc/dhcpd.conf</tt>.
The options are pretty self-explanatory.
d736 3
a738 3
<pre>
        option  domain-name "example.com";
        option  domain-name-servers 192.168.1.3, 192.168.1.5;
d740 2
a741 2
        subnet 192.168.1.0 netmask 255.255.255.0 {
                option routers 192.168.1.1;
d743 3
a745 3
                range 192.168.1.32 192.168.1.127;
        }
</pre>
a746 1
<p>
d760 3
a762 4
<pre>
     # <b>rcctl start dhcpd</b>
     dhcpd(ok)
</pre>
d765 2
a766 2
that it failed to start ("<tt>dhcpd(failed)</tt>"),
and tell you why in <tt>/var/log/messages</tt>.
d773 3
a775 9
<pre>
     option    netbios-name-servers    192.168.92.55;
</pre>

<p>
(where <tt>192.168.92.55</tt> is the IP of your Windows or Samba
server.) See
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcp-options&amp;sektion=5">dhcp-options(5)</a>
for more options that your DHCP clients may want.
d777 3
d788 2
a789 4
you actually see a problem with.

<p>
<i>VERY FEW people will need to adjust any networking parameters!</i>
a790 1
<p>
d794 2
a795 3
<p>
From
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8#EXAMPLES">sysctl(8)</a>:
d803 3
a805 3
This can be used to keep daemons from stealing a specific port that an-
other program needs to function.  List elements may be separated by com-
mas and/or whitespace.
d815 1
a815 2
<p>
NFS, or Network File System, is used to share a filesystem over the
d820 6
a825 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd&amp;sektion=8">nfsd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mountd&amp;sektion=8">mountd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&amp;sektion=5">exports(5)</a>
d832 1
a832 1
setup packet filtering or other firewalling protection, to prevent
d841 1
a841 1
<h3>Setting up an NFS Server</h3>
a842 1
<p>
d846 6
a851 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=portmap&amp;sektion=8">portmap(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mountd&amp;sektion=8">mountd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd&amp;sektion=8">nfsd(8)</a>
d855 2
a856 5
By default each of these is disabled in OpenBSD.
Add the following lines to 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf.local&amp;sektion=8"
>rc.conf.local(8)</a>
to enable them:
d859 2
a860 3
portmap_flags=""
mountd_flags=""
nfsd_flags="-tun 4"
a862 1
<p>
d869 1
a869 1
All of this is configured in the /etc/exports file.
d872 3
a874 4
There are many options that you can use in /etc/exports; it is best that
you read the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&amp;sektion=5"
>exports(5)</a>
d876 1
a876 2
For our example server, we've setup an exports file that looks like
this:
a878 1
#
a884 1
<p>
d897 1
a897 2
The last
two arguments specify that only clients within the 10.0.0.0 network
d904 1
a904 1
/etc/exports without some kind of list of allowed host(s).
d912 1
a912 1
above) or run them manually.
d915 1
a915 3
# <b>rcctl start portmap</b>
# <b>rcctl start mountd</b>
# <b>rcctl start nfsd</b>
d918 4
a921 6
<p>
The <tt>nfsd_flags</tt> enable TCP (-t) and UDP (-u) connections and enable 4
instances (-n) of nfsd to run. You should set an appropriate number of
NFS server instances handle the maximum number of concurrent client
requests that you want to service by adjusting the <tt>nfsd_flags</tt>
line in rc.conf.local.
d927 2
a928 2
Remember: If you make changes to /etc/exports while NFS is already running, you
need to make mountd aware of this!
d934 1
a936 1
<p>
d938 1
a938 2
any services or daemons.
They can be mounted just like any other filesystem.
d942 3
a944 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_nfs&amp;sektion=8">mount_nfs(8)</a>.
To mount a filesystem <tt>/work</tt> on host 10.0.0.1 to local filesystem
a951 1
<p>
d953 1
a953 1
/etc/fstab:
d956 1
a956 1
10.0.0.1:/work /mnt nfs rw 0 0
a958 1
<p>
d962 1
a962 2
<tt>nodev</tt>, and <tt>nosuid</tt>, should also be used where
applicable.
a968 1
<p>
d971 2
a972 2
If you are not mounting programs which you expect to run on the NFS
client, add noexec to this list.
d976 1
a976 1
maps root's access to username "nobody" and group "nobody".
a983 1
<p>
d993 1
a993 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&amp;sektion=5"
>exports(5)</a>
a997 1
<p>
d999 2
a1000 2
daemons have properly registered with RPC.
To do this, use rpcinfo(8).
a1016 1
<p>
d1019 2
a1020 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=showmount&amp;sektion=8">showmount(8)</a>, 
d1023 1
a1023 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsstat&amp;sektion=1"
>nfsstat(1)</a>
d1025 1
a1025 2
To use showmount(8), try <tt>/usr/bin/showmount -a host</tt>. For
example:
d1028 1
a1028 1
$ <b>/usr/bin/showmount -a 10.0.0.1</b>
a1032 1
<p>
d1038 1
a1038 2
<p>
A <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4">bridge</a>
d1048 1
a1048 1
Note that because of this "invisible" nature, an interface in a  bridge
a1054 1
<p>
a1056 1
<p>
d1066 5
a1070 7
This system has two NICs in it now, an Intel EtherExpress/100
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp&amp;sektion=4"><tt>fxp0</tt></a>)
and a 3c590-Combo card 
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&amp;sektion=4"><tt>ep0</tt></a>)
for the coax port.  <tt>fxp0</tt> is the link to the
rest of my network and will thus have an IP address, <tt>ep0</tt> is
going to be for bridging only and will have no IP address.
d1081 1
a1081 1
dhcp NONE NONE NONE
a1083 1
<p>
a1093 1
<p>
d1095 2
a1096 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
and set it to 10BASE-2 (coax).  No IP address or similar information
d1099 1
a1099 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&amp;sektion=4">man page</a>.
d1104 2
a1105 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5"><tt>hostname.bridge0</tt></a>. 
a1114 1
<p>
d1121 1
a1121 1
That's it!  Reboot, and you now have a functioning bridge.
a1122 1
<p>
a1124 1
<p>
d1126 4
a1129 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vr&amp;sektion=4">vr(4)</a>
interfaces, vr0 through vr3.  We want to bridge vr1, vr2 and vr3
together, leaving out vr0 for an uplink (a cable modem for instance).
d1136 1
a1136 2
It is not possible to assign an IP address directly to a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4">bridge(4)</a>
d1139 6
a1144 6
down, in which case the address would not be reachable.  Fortunately,
starting with OpenBSD 4.7, there is a virtual Ethernet interface driver
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vether&amp;sektion=4">vether(4)</a>
that can be used for that purpose.  We will add it to the bridge, assign
the IP address to it and make
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd&amp;sektion=8">dhcpd(8)</a>
d1152 1
a1152 1
described yet again in this section but the addressing scheme used here is
d1157 2
a1158 1
here.</li>
d1161 2
a1162 1
<p>First mark vr1, vr2 and vr3 as up:
d1165 3
a1167 6
$ <b>cat /etc/hostname.vr1</b>
up
$ <b>cat /etc/hostname.vr2</b>
up
$ <b>cat /etc/hostname.vr3</b>
up
d1170 1
a1170 2
<p>
Then create the vether0 configuration:
d1173 1
a1173 3
$ <b>cat /etc/hostname.vether0</b>
inet 192.168.1.1 255.255.255.0 192.168.1.255
up
d1176 1
a1176 3
<p>
We configure the bridge interface to contain all the above
interfaces:
a1186 1
<p>
d1190 1
a1190 2
$ <b>grep ^dhcpd_flags= /etc/rc.conf.local</b>
dhcpd_flags="vether0"
a1192 1
<p>
a1194 1
<p>
d1206 1
a1206 1
default "Pass all" statements would look something like this:
d1215 4
a1218 5
<p>
Now, let's say I wish to filter traffic hitting these old machines, I
want only web and SSH traffic to reach them.  In this case, we are going
to let all traffic in and out of the <tt>ep0</tt> interface, but filter on the
<tt>fxp0</tt> interface.
d1222 1
a1222 1
pass in quick on ep0 all
a1231 1
<p>
d1239 1
a1239 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
a1241 1
<p>
d1250 3
a1252 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
or in 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5">hostname.bridge0</a>,
d1257 1
a1257 1
<li>Bridging requires that the NICs be in a "Promiscuous mode" -- they
d1261 1
a1261 3
chip
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tl&amp;sektion=4">tl(4)</a>)
is an example of a chip that won't work as part of a bridge. 
d1265 1
d1267 1
a1267 1
from the network, rather than from a hard disk, a floppy or a CD-ROM.
d1276 1
a1277 3

<p>
<h3>How does PXE booting work?</h3>
d1284 2
a1285 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tftp&amp;sektion=1"
>tftp(1)</a> server and executed.
d1288 3
a1290 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pxeboot&amp;sektion=8&amp;arch=i386"
>pxeboot</a>, which takes the place of the standard
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386">
boot(8)</a> file.
d1293 1
a1293 1
same tftp(1) server.
d1296 2
a1297 1
The first and obvious step is you must have a PXE-boot capable computer
d1306 2
a1307 2
NOT required), your DHCP server
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd.conf&amp;sektion=5">dhcpd.conf</a>
d1309 5
a1313 3
<pre>
    filename "pxeboot";
</pre>
d1317 14
a1330 14
<pre>
    shared-network LOCAL-NET {
            option  domain-name "example.com";
            option  domain-name-servers 192.168.1.3, 192.168.1.5;

            subnet 192.168.1.0 netmask 255.255.255.0 {
                    option routers 192.168.1.1;
                    <b>filename "pxeboot";</b>
                    range 192.168.1.32 192.168.1.127;
                    default-lease-time 86400;
                    max-lease-time 90000;
            }
    }
</pre>
d1334 10
a1343 6
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tftpd&amp;sektion=8">tftpd(8)</a>
daemon.  This is typically done by adding "<tt>tftpd_flags=/tftpboot</tt>"
to your <tt>/etc/rc.conf.local</tt> file.
tftpd(8) serves files from a particular directory, in the case of this
line, that directory is <tt>/tftpboot</tt>, which we will use for this
example. 
d1348 6
a1353 8
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pxeboot&amp;sektion=8&amp;arch=i386"
>pxeboot</a>, the PXE boot loader (serving the same function as
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8&amp;arch=i386"
>boot</a> on a disk-based system).
<li><a href="faq4.html#bsd.rd">bsd.rd</a>, the install kernel or <tt>bsd</tt>,
a customized kernel.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot.conf&amp;sektion=8&amp;arch=i386"
>/etc/boot.conf</a>, a boot configuration file.
d1360 2
a1361 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tftp&amp;sektion=1"
>tftp(1)</a> client, making sure you can fetch the needed files.
d1369 15
a1383 15
<pre>
    Intel UNDI, PXE-2.0 (build 067)
    Copyright (C) 1997,1998 Intel Corporation

    For Realtek RTL 8139(X) PCI Fast Ethernet Controller v1.00 (990420)

    DHCP MAC ADDR: 00 E0 C5 C8 CF E1
    CLIENT IP: 192.168.1.76  MASK: 255.255.255.0  DHCP IP: 192.168.1.252
    GATEWAY IP: 192.168.1.1
    probing: pc0 com0 com1 apm pxe![2.1] mem[540k 28m a20=on]
    disk: hd0*
    net: mac 00:e0:c5:c8:cf:e1, ip 192.168.1.76, server 192.168.1.252
    >> OpenBSD/i386 PXEBOOT 3.23
    boot>
</pre>
d1389 10
a1398 10
<pre>
    >> OpenBSD/i386 PXEBOOT 3.23
    boot> bsd.rd
    booting tftp:bsd.rd: 4375152+733120 [58+122112+105468]=0x516d04
    entry point at 0x100120

    Copyright (c) 1982, 1986, 1989, 1991, 1993
            The Regents of the University of California.  All rights reserved.
      ...
</pre>
d1402 1
a1402 4
<p>

<h3>Can I boot OpenBSD kernels other than <tt>bsd.rd</tt> using
PXE?</h3>
d1408 1
a1409 2
<!-- This article written by Sunny Raspet, slr@@mordac.info, and
released under the BSD license -->
d1411 4
a1414 5
<p>
CARP is a tool to help achieve system redundancy, by having multiple
computers creating a single, virtual network interface between them,
so that if any machine fails, another can respond instead, and/or
allowing a degree of load sharing between systems.
d1461 2
a1462 1
<p>There are, however, situations in which CARP won't help.
d1472 1
a1472 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfsync&amp;sektion=4">pfsync(4)</a>
a1476 2
 

a1478 1
<p>
d1480 1
a1480 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>
d1482 1
a1482 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>.
d1485 2
a1486 1
<p>The first sysctl, <tt>net.inet.carp.allow</tt>, defines whether the
d1491 2
a1492 1
<p>The second, <tt>net.inet.carp.log</tt>, logs CARP state changes,
d1495 2
a1496 1
<p>Third, <tt>net.inet.carp.preempt</tt> enables natural selection
d1505 2
a1506 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3">sysctl(3)</a>.
d1508 3
a1510 2
<p>For the remainder of CARP's configuration, we rely on
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>.
d1520 2
a1521 1
<p>Next, <tt>pass</tt> sets a password, and <tt>vhid</tt> sets the
d1533 2
a1534 1
<p>Let's put all these settings together in a basic configuration.
d1540 2
a1541 3
rachael# <b>ifconfig carp0 create</b>
rachael# <b>ifconfig carp0 vhid 1 pass tyrell carpdev fxp0 \
&nbsp;&nbsp;&nbsp;&nbsp;192.168.0.7 netmask 255.255.255.0</b>
d1544 1
a1544 1
<p>create the carp0 interface and give it a vhid of 1, a password of
d1546 1
a1546 1
Assign fxp0 as the member interface.
a1563 1

a1564 1

d1571 1
a1571 1
However, it tends to be cleaner to have an IP for each system--it makes
d1574 2
a1575 1
<p>Let's add another layer of complexity; we want <i>rachael</i> to stay
d1582 2
a1583 1
<p>On <i>rachael</i>, we'll use the sysctl we created above, then edit
d1587 2
a1588 1
rachael# <b>sysctl net.inet.carp.preempt=1</b>
d1591 1
a1591 1
<p>We'll do configuration on <i>pris</i>, too:
d1594 1
a1594 1
pris# <b>ifconfig carp0 advskew 100</b>
d1597 1
a1597 1
<p>This slightly delays <i>pris</i>'s advertisements, meaning
d1603 1
d1610 1
a1610 1
<p>Flash forward a few months. Our company of the previous example has
d1616 2
a1617 3
rachael# <b>ifconfig carp1 create</b>
rachael# <b>ifconfig carp1 vhid 2 advskew 100 pass bryant carpdev fxp0 \
&nbsp;&nbsp;&nbsp;&nbsp;192.168.0.7 netmask 255.255.255.0</b>
d1620 1
a1620 1
<p>On <i>pris</i>, we'll create the new group and interface as well, then set
d1624 3
a1626 4
pris# <b>ifconfig carp1 create</b>
pris# <b>ifconfig carp1 vhid 2 pass bryant carpdev fxp0 \
&nbsp;&nbsp;&nbsp;&nbsp;192.168.0.7 netmask 255.255.255.0</b>
pris# <b>sysctl net.inet.carp.preempt=1</b>
d1629 1
a1629 1
<p>Now we have two CARP groups with the same IP address.
d1634 2
a1635 1
<p>While these examples are for a two-machine cluster, the same
d1644 8
a1651 6
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=carp&amp;sektion=4">carp(4)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3">sysctl(3)</a>
<li><a href="http://www.countersiege.com/doc/pfsync-carp/">Firewall
Failover with pfsync and CARP</a>
d1655 1
d1667 2
a1668 2
However, it is a nontrivial program to set up, difficult code to audit,
and has a large memory requirement.
d1675 2
a1676 3
NTP-compatible way to have accurate time on your computer.
OpenBSD's 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ntpd&amp;sektion=8">ntpd(8)</a>
d1678 2
a1679 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ntpd.conf&amp;sektion=5"><tt>/etc/ntpd.conf</tt></a>.
d1691 1
a1691 1
You can do this using the "<tt>-s</tt>" option of ntpd(8) or any other
d1694 3
a1696 1
<h3 id="OpenNTPDaccurate">6.12.1 - "But OpenNTPD isn't as accurate as the ntp.org daemon!"</h3>
d1703 3
a1705 1
<h3 id="OpenNTPDharmful">6.12.2 - "Someone has claimed that OpenNTPD is 'harmful'!"</h3>
d1713 1
a1713 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strlcpy&amp;sektion=3">strlcpy</a>,
d1715 1
a1715 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strcpy&amp;sektion=3">strcpy</a>.
d1719 1
a1719 1
If this is "harmful", we are all for it.
d1731 2
a1732 1
<h3 id="OpenNTPDNoServe">6.12.3 - Why can't my other machines synchronize to OpenNTPD?</h3>
d1736 3
a1738 3
"<tt>#listen&nbsp;on&nbsp;*</tt>" line in 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ntpd.conf&amp;sektion=5">/etc/ntpd.conf</a>
and restart the ntpd(8) daemon.
d1757 1
d1760 1
a1760 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=acx&amp;sektion=4">acx(4)</a>
d1762 1
a1762 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=an&amp;sektion=4">an(4)</a>
d1764 5
a1768 5
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ath&amp;sektion=4">ath(4)</a>
driver for Atheros 802.11a/b/g <sup>(AP)</sup>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=athn&amp;sektion=4">athn(4)</a>
driver for Atheros 802.11/a/g/n devices <sup>(AP)</sup>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=atu&amp;sektion=4">atu(4)</a>
d1770 1
a1770 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=atw&amp;sektion=4">atw(4)</a>
d1772 1
a1772 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bwi&amp;sektion=4">bwi(4)</a>
d1774 1
a1774 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=cnw&amp;sektion=4">cnwi(4)</a>
d1776 1
a1776 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipw&amp;sektion=4">ipw(4)</a>
d1778 1
a1778 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwi&amp;sektion=4">iwi(4)</a>
d1780 1
a1780 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwm&amp;sektion=4">iwm(4)</a>
d1782 1
a1782 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwn&amp;sektion=4">iwn(4)</a>
d1784 1
a1784 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=malo&amp;sektion=4">malo(4)</a>
d1786 1
a1786 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=otus&amp;sektion=4">otus(4)</a>
d1788 1
a1788 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pgt&amp;sektion=4">pgt(4)</a>
d1790 2
a1791 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ral&amp;sektion=4">ral(4)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ural&amp;sektion=4">ural(4)</a> [USB]
d1793 1
a1793 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rsu&amp;sektion=4">rsu(4)</a>
d1795 1
a1795 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rtw&amp;sektion=4">rtw(4)</a>
d1797 1
a1797 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rtwn&amp;sektion=4">rtwn(4)</a>
d1799 1
a1799 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rum&amp;sektion=4">rum(4)</a>
d1801 1
a1801 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=run&amp;sektion=4">run(4)</a>
d1803 1
a1803 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=uath&amp;sektion=4">uath(4)</a>
d1805 1
a1805 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=upgt&amp;sektion=4">upgt(4)</a>
d1807 1
a1807 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=urtw&amp;sektion=4">urtw(4)</a>
d1809 1
a1809 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=urtwn&amp;sektion=4">urtwn(4)</a>
d1811 1
a1811 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wi&amp;sektion=4">wi(4)</a>
d1813 1
a1813 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wpi&amp;sektion=4">wpi(4)</a>
d1815 1
a1815 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=zyd&amp;sektion=4">zyd(4)</a>
d1819 1
a1819 1
<sup>(AP)</sup> indicates card can be used as an access point.<br>
d1825 3
a1827 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
(please see the manual pages for precise details).
a1849 1
<p>
d1851 1
d1853 2
a1854 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5">hostname.if(5)</a>
d1860 1
d1866 1
d1868 1
d1880 1
d1896 1
a1896 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=trunk&amp;sektion=4">trunk(4)</a>
d1898 1
a1898 1
trunk(4)s are virtual interfaces made up of one or more other network
d1901 1
a1901 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bge&amp;sektion=4">bge0</a>
d1903 1
a1903 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwn&amp;sektion=4">iwn0</a>
d1905 1
a1905 1
Using these two interfaces we will build an interface, trunk0, then
d1914 1
d1916 1
a1916 2
# <b>cat /etc/hostname.bge0</b>
up
d1921 1
d1923 1
a1923 1
# <b>cat /etc/hostname.iwn0</b>
d1930 1
d1932 1
a1932 1
# <b>cat /etc/hostname.trunk0</b>
a1943 1
<p>
d1955 1
a1955 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&amp;sektion=8">route(8)</a>
a1963 1
<p>
a1971 1
<p>
d1974 1
a1974 1
to 10.132.0.1 which is accessible via fxp2.
d1978 2
a1979 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mygate&amp;sektion=5"
>mygate(5)</a> file does not yet support multipath default routes, the
d1981 2
a1982 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5"
>hostname.if(5)</a> files for the fxp1 and fxp2 interfaces.
d1985 6
a1990 6
<dl>
<dt><b>/etc/hostname.fxp1</b></dt>
<dd><tt>!route add -mpath default 10.130.128.1</tt></dd>
<dt><b>/etc/hostname.fxp2</b></dt>
<dd><tt>!route add -mpath default 10.132.0.1</tt></dd>
</dl>
a1991 1
<p>
a1999 1
<p>
d2001 2
a2002 4
<a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&amp;sektion=5"
>sysctl.conf(5)</a>
to make the changes permanent.
a2023 1
<p>
d2034 2
a2035 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifstated&amp;sektion=8"
>ifstated(8)</a> to check for unavailable interfaces and adjust the routing
table accordingly.
@


1.344
log
@update faq6 to use rcctl where applicable.

from adam jeanguenat <avj at iwerk.com>
@
text
@d54 1
a54 1
<li><a href= "#CARP">6.11 - The Common Address Redundancy Protocol (CARP)</a>
d601 1
a601 2
It is described in the <a href="pf/index.html"><b>PF User's
Guide</b></a>.
d606 1
a606 1
interfaces "automatically".
a617 1
All you need to put in this hostname file is '<tt>dhcp</tt>':
d1446 1
a1446 1
<h2 id="CARP">6.11 - The Common Address Redundancy Protocol (CARP)</h2>
@


1.343
log
@TJ strikes again:

faq10.html:
- mention rcctl as an alternative to editing rc.conf.local directly
- blowfish uses eight rounds, not six (redo example too)

faq6.html:
- remove redundant info, link to more detailed article
- fix redundant pf line, keep state is default now
- i don't think pxe was "recently" introduced
- replace mention of "draft n" with just n

faq8.html:
- replace more ugly tables

faq9.html:
- modernize disk device name examples

...and of course the usual healthy dose of sprinkling small
improvements here and there.
@
text
@d711 1
a711 1
     # <b>echo 'dhcpd_flags=""' &gt;&gt;/etc/rc.conf.local</b>
d750 1
a750 1
     # <b>/etc/rc.d/dhcpd start</b>
d918 3
a920 3
# <b>/etc/rc.d/portmap start</b>
# <b>/etc/rc.d/mountd start</b>
# <b>/etc/rc.d/nfsd start</b>
d939 1
a939 1
# <b>/etc/rc.d/mountd reload</b>
@


1.342
log
@TJ's work on the FAQ continues, this time a big diff with lots of small
fixes:

- only specify the current supported "set debug" choices in the options
  section of the pf faq
- clarify ipv4 vs ipv6 configs in the nat section of the pf faq
- mention that usb disk images are available in addition to the cd isos
- don't say that all donors get their name on the donations page anymore
- replace the last few instances of "ftp mirrors" with "http mirrors" or
  just "mirrors" where appropriate
- reword some 5.8 mentions to reduce the amount of version bumps we have
  to do each release
- few minor tweaks

Thanks!
@
text
@d407 1
a407 53
This is the basic information you need to set up your OpenBSD box as a
gateway (also called a router). If you are using OpenBSD as a router on
the Internet, we suggest that you also read the Packet Filter setup
instructions below to block potentially malicious traffic. Also, due to
the low availability of
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4">IPv4</a>
addresses from network service providers and regional registries, you
may want to look at Network Address Translation for information on
conserving your IP address space.

<p>
The GENERIC kernel already has the ability to allow IP Forwarding, but
needs to be turned on. You should do this using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>
utility. To change this permanently you should edit the file 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&amp;sektion=5">/etc/sysctl.conf</a>
to allow for IP Forwarding. To do so add this line in that configuration
file.

<blockquote><pre>
net.inet.ip.forwarding=1
</pre></blockquote>

<p>
To make this change without rebooting you would use the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>
utility directly. Remember though that this change will no longer exist
after a reboot, and needs to be run as root.

<blockquote><pre>
# <b>sysctl net.inet.ip.forwarding=1</b>
net.inet.ip.forwarding: 0 -&gt; 1
</pre></blockquote>

<p>
Now modify the routes on the other hosts on both sides.
This is often done with static route entries, but more advanced
networks can make use of the rich suite of routing daemons
included as part of OpenBSD to pass routes to other systems.
These include
<a href="http://www.openbgpd.org/">OpenBGPD</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ospfd&amp;sektion=8">ospfd(8)</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ospf6d&amp;sektion=8">ospf6d(8)</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ldpd&amp;sektion=8">ldpd(8)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ripd&amp;sektion=8">ripd(8)</a>.
Additionally the ports collection includes software such as
<a href="http://bird.network.cz/">bird</a>,
<a href="http://igmpproxy.sourceforge.net/">igmpproxy</a> and
<a href="http://www.quagga.net">quagga</a>.
OpenBSD supports several T1, HSSI, ATM, FDDI and serial
(PPP/SLIP) interfaces, and of course many Ethernet devices
(including 10Gb).
d1253 1
a1253 1
want only Web and SSH traffic to reach them.  In this case, we are going
d1255 1
a1255 1
<tt>fxp0</tt> interface, using <tt>keep state</tt> to handle the reply data:
d1266 1
a1266 2
pass in quick on fxp0 proto tcp from any to any port {22, 80} \
     flags S/SA keep state
d1271 1
a1271 1
traffic  from reaching either the bridge machine or any of the other
a1309 2
Note that there are several different network boot protocols, PXE is
relatively recent.
d1687 1
a1687 1
Failover with pfsync and CARP</a> by Ryan McBride
d1812 1
a1812 1
Intel WiFi Link 4965/5100/5300 802.11a/b/g/Draft-N wireless
@


1.341
log
@tweaks from TJ at mrsk/me, including not suggesting ntp.org
@
text
@a1489 4

    Copyright (c) 1995-2013 OpenBSD.  All rights reserved.  http://www.OpenBSD.org

    OpenBSD 5.8 (RAMDISK_CD) #1038: Sun Aug 16 02:43:32 MDT 2015
d1491 1
a1491 1
</pre> <!-- XXXrelease - replace version string -->
@


1.340
log
@Update discussion of ntpd now that it's enabled by default, and tweak
the wording a little. From TJ, lightly modified by me.
@
text
@d1776 1
a1776 1
The OpenNTPD daemon is enabled by default at install time, and
d1789 1
a1789 2
This may be true.
That is not among OpenNTPD's 
a1791 4
If you really need microsecond precision more than the <a href=
"http://openntpd.org/features.html">benefits</a> of
OpenNTPD, feel free to use ntp.org's daemon, as it will remain available
through ports and packages.
d1805 2
a1806 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strcpy&amp;sektion=3">strcpy</a>,
and written to be secure from the beginning, not "made secure later".
@


1.339
log
@get rid of some duplicate content; from TJ
@
text
@d1769 1
a1769 1
NTP compatible way to have accurate time on your computer.
d1776 1
a1776 1
Simply activating ntpd(8) through <a href="faq10.html#rc">rc.conf.local</a>
d1778 2
a1779 3
itself synchronized to, the
<a href="http://www.pool.ntp.org/">pool.ntp.org</a> servers,
a collection of publicly available time servers.
d1781 1
a1781 1
degree of accuracy, however, if your clock is more than a few minutes
d1789 3
a1791 3
That may be true.
That is not OpenNTPD's 
<a href="http://www.openntpd.org/goals.html">design goal</a>, it is
d1793 3
a1795 2
If you really need microsecond precision more than the benefits of
OpenNTPD, feel free to use ntp.org's ntpd, as it will remain available
@


1.338
log
@consistency; remove . at end of items in list of 802.11 adapters (some had
them, others didn't)
@
text
@a153 1
        inet6 fe80::204:acff:fedd:396a%fxp0 prefixlen 64 scopeid 0x1
a178 1
<!-- XXXrelease -->
d187 1
a187 1
Other virtual interfaces are automatically created on-demand, including:
d191 1
a191 1
 - SLIP Network Interface
d193 1
a193 1
 - Point to Point Protocol
d195 1
a195 1
 - Tunnel Network Interface
d197 1
a197 1
 - Ethernet Bridge Interface
d199 1
a199 1
 - IEEE 802.1Q Encapsulation Interface
d201 1
a201 1
 - IEEE 802.1AD Provider Bridges (QinQ)
d203 1
a203 1
 - GRE/MobileIP Encapsulation Interface
d205 1
a205 1
 - Generic IPv4/IPv6 Tunnel Interface
d207 1
a207 1
 - Common Address Redundancy Protocol Interface
d211 1
a211 1
 - Virtual Ethernet Interface
d214 2
a215 4
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man4/vxlan.4?query=vxlan&amp;sec=4">vxlan</a>
 - virtual extensible local area network tunnel interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man4/mpe.4?query=mpe&amp;sec=4">mpe</a>
 - MPLS Provider Edge
d1495 1
a1495 1
</pre>
@


1.337
log
@mention rtwn, from Mariano Baragiola
@
text
@d1858 1
a1858 1
TI ACX100/ACX111. <sup>(AP)</sup>
d1860 1
a1860 1
Aironet Communications 4500/4800.
d1862 1
a1862 1
driver for Atheros 802.11a/b/g. <sup>(AP)</sup>
d1864 1
a1864 1
driver for Atheros 802.11/a/g/n devices. <sup>(AP)</sup>
d1868 1
a1868 1
ADMtek ADM8211.
d1874 1
a1874 1
Intel PRO/Wireless 2100 802.11b.
d1876 1
a1876 1
Intel PRO/Wireless 2200BG/2225BG/2915ABG 802.11a/b/g.
d1878 1
a1878 1
Intel Wireless 7260/7265/3160 802.11a/ac/b/g/n.
d1880 1
a1880 1
Intel WiFi Link 4965/5100/5300 802.11a/b/g/Draft-N wireless.
d1886 1
a1886 1
Conexant/Intersil Prism GT Full-MAC 802.11a/b/g. <sup>(AP)</sup>
d1889 1
a1889 1
Ralink Technology RT25x0 802.11a/b/g. <sup>(AP)</sup>
d1893 1
a1893 1
Realtek 8180 802.11b. <sup>(AP)</sup>
d1897 1
a1897 1
Ralink Technology RT2501USB. <sup>(AP)</sup>
d1909 1
a1909 1
Prism2/2.5/3. <sup>(AP)</sup>
d1911 1
a1911 1
Intel PRO/Wireless 3945ABG.
@


1.336
log
@
in comes 5.8
@
text
@d1894 2
@


1.335
log
@Mention vxlan(4) and mpe(4) in list of virtual interfaces.

Missing entries pointed out by Pedro Caetano. ok nick@@
@
text
@d1497 1
a1497 1
    OpenBSD 5.7 (RAMDISK_CD) #719: Sun Mar  8 11:09:19 MDT 2015
@


1.334
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d216 4
@


1.333
log
@Fix an omission in FAQ wireless section: athn(4) supports hostap mode
@
text
@a5 1
<meta name= "resource-type" content= "document">
a6 2
<meta name= "keywords"      content= "openbsd,faq6">
<meta name= "distribution"  content= "global">
@


1.332
log
@The text "indicates chip requires a non-free firmware which can not be
included with OpenBSD" is a marker which helps noone, in fact probably
hurts some people due to lack of detail or direction.  This is overFAQ'in
a non-issue which is actually not at all FAQ.

The markers do not allow people choose alternative product, since driver
abg on a chip from vendor XYZ does not come in a box labelled like that.
Secondly, the actual user experience is that post-install, they generally
do find that the chip works just fine, either because fw_update runs for
them or they find out soon that they need it.  Once again, this one liner
is not going to help people.  This particular FAQ entry, LOCATED RIGHT
HERE, does not help people who run into trouble.

Delete it all.
@
text
@d1863 1
a1863 1
driver for Atheros 802.11/a/g/n devices.
@


1.331
log
@Flagged with "NFF" wireless drivers that have firmware packages separately
@
text
@d1857 1
a1857 1
TI ACX100/ACX111. <sup>(NFF) (AP)</sup>
d1863 1
a1863 1
driver for Atheros 802.11/a/g/n devices. <sup>(NFF)</sup>
d1869 1
a1869 1
Broadcom AirForce 802.11b/g <sup>(NFF)</sup>
d1873 1
a1873 1
Intel PRO/Wireless 2100 802.11b. <sup>(NFF)</sup>
d1875 1
a1875 1
Intel PRO/Wireless 2200BG/2225BG/2915ABG 802.11a/b/g. <sup>(NFF)</sup>
d1877 1
a1877 1
Intel Wireless 7260/7265/3160 802.11a/ac/b/g/n. <sup>(NFF)</sup>
d1879 1
a1879 1
Intel WiFi Link 4965/5100/5300 802.11a/b/g/Draft-N wireless. <sup>(NFF)</sup>
d1881 1
a1881 1
Marvell Libertas 802.11b/g <sup>(NFF)</sup>
d1883 1
a1883 1
Atheros USB 802.11a/g/n <sup>(NFF)</sup>
d1885 1
a1885 1
Conexant/Intersil Prism GT Full-MAC 802.11a/b/g. <sup>(AP) (NFF)</sup>
d1890 1
a1890 1
Realtek RTL8188SU/RTL8192SU USB 802.11b/g/n <sup>(NFF)</sup>
d1898 1
a1898 1
Atheros USB 802.11a/b/g <sup>(NFF)</sup>
d1900 1
a1900 1
Conexant/Intersil PrismGT SoftMAC USB 802.11b/g <sup>(NFF)</sup>
d1904 1
a1904 1
Realtek RTL8188CU/RTL8192CU USB 802.11b/g/n <sup>(NFF)</sup>
d1908 1
a1908 1
Intel PRO/Wireless 3945ABG. <sup>(NFF)</sup>
a1913 2
<sup>(NFF)</sup> indicates chip requires a non-free firmware which can
not be included with OpenBSD.
@


1.330
log
@Add iwm(4) to list of wifi drivers in faq; diff from vigdis chown.me; ok nick@@
@
text
@d1863 1
a1863 1
driver for Atheros 802.11/a/g/n devices.
d1869 1
a1869 1
Broadcom AirForce 802.11b/g
d1881 1
a1881 1
Marvell Libertas 802.11b/g
d1883 1
a1883 1
Atheros USB 802.11a/g/n 
d1885 1
a1885 1
Conexant/Intersil Prism GT Full-MAC 802.11a/b/g. <sup>(AP)</sup>
d1890 1
a1890 1
Realtek RTL8188SU/RTL8192SU USB 802.11b/g/n 
d1898 1
a1898 1
Atheros USB 802.11a/b/g
d1900 1
a1900 1
Conexant/Intersil PrismGT SoftMAC USB 802.11b/g
d1904 1
a1904 1
Realtek RTL8188CU/RTL8192CU USB 802.11b/g/n 
@


1.329
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@d1876 2
@


1.328
log
@
updates for 5.7
@
text
@d11 1
@


1.327
log
@pgt(4) supports hostap, so mark it as such.
@
text
@d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2014 by OpenBSD.">
d1495 1
a1495 1
    OpenBSD 5.6 (RAMDISK_CD) #268: Fri Aug  8 00:15:04 MDT 2014
@


1.326
log
@
iwn has non-free firmware, too.  from Jan Stary (hans at stare dot cz), thanks!
@
text
@d1882 1
a1882 1
Conexant/Intersil Prism GT Full-MAC 802.11a/b/g
@


1.325
log
@Convert the rest of the FAQ to id="" instead of <a name=""></a>.

prodded by nick@@
@
text
@d1876 1
a1876 1
Intel WiFi Link 4965/5100/5300 802.11a/b/g/Draft-N wireless.
@


1.324
log
@
userland PPP is gone, and that's what this article covered.
It would be really nice if someone reworked this for kernel ppp(4), but
I can not do it due to lack of ability to test (and to be honest:
indifference.  I love my ethernet handoff!)
@
text
@d65 1
a65 3
<p>
<a name="Intro"></a>
<h2>6.1 - Before we go any further</h2>
d97 1
a97 3
<p>
<a name="Setup"></a>
<h2>6.2 - Network configuration</h2>
d106 1
a106 3
<p>
<a name="Setup.if"></a>
<h3>6.2.1 - Identifying and setting up your network interfaces</h3>
d276 1
a276 2
<a name="Setup.gateway"></a>
<h3>6.2.2 - Default gateway</h3>
d293 1
a293 3
<p>
<a name="Setup.resolver"></a>
<h3>6.2.3 - DNS Resolution</h3>
d322 1
a322 3
<p>
<a name="Setup.myname"></a>
<h3>6.2.4 - Host name</h3>
d334 1
a334 2
<a name="Setup.activate"></a>
<h3>6.2.5 - Activating the changes</h3>
d366 1
a366 3
<p>
<a name="Setup.chkroute"></a>
<h3>6.2.6 - Checking routes</h3>
d406 1
a406 3
<p>
<a name="Setup.forward"></a>
<h3>6.2.7 - Setting up your OpenBSD box as a forwarding gateway</h3>
d463 1
a463 3
<p>
<a name="Setup.aliases"></a>
<h3>6.2.8 - Setting up aliases on an interface</h3>
d529 1
a529 2
<a name="Setup.replace"></a>
<h3>6.2.9 - Adding and Replacing NICs</h3>
d649 1
a649 3
<p>
<a name="PF"></a>
<h2>6.3 - How do I filter and firewall with OpenBSD?</h2>
d658 1
a658 4

<p> 
<a name= "DHCP"></a>
<h2>6.4 - Dynamic Host Configuration Protocol (DHCP)</h2> 
d665 1
a665 3
<p>
<a name="DHCPclient"></a>
<h3>6.4.1 - DHCP Client</h3>
d756 1
a756 3
<p>
<a name="DHCPserver"></a>
<h3>6.4.2 - DHCP Server</h3>
d828 1
a828 3
<p>
<a name="Tuning"></a>
<h2>6.6 - Tuning networking parameters</h2>
d864 1
a864 3
<p>
<a name="NFS"></a>
<h2>6.7 - Simple NFS usage</h2>
d1107 1
a1107 4

<p>
<a name="Bridge"></a>
<h2>6.9 - Setting up a network bridge in OpenBSD</h2>
d1360 1
a1360 2
<a name="PXE"></a>
<h2>6.10 - How do I boot using PXE? (i386, amd64)</h2>
d1509 1
a1509 3
<p>
<a name="CARP"></a>
<h2>6.11 - The Common Address Redundancy Protocol (CARP)</h2>
d1751 1
a1751 2
<a name="OpenNTPD"></a>
<h2>6.12 - Using OpenNTPD</h2>
d1791 1
a1791 2
<a name="OpenNTPDaccurate"></a>
<h3>6.12.1 - "But OpenNTPD isn't as accurate as the ntp.org daemon!"</h3>
d1802 1
a1802 2
<a name="OpenNTPDharmful"></a>
<h3>6.12.2 - "Someone has claimed that OpenNTPD is 'harmful'!"</h3>
d1828 1
a1828 2
<a name="OpenNTPDNoServe"></a>
<h3>6.12.3 - Why can't my other machines synchronize to OpenNTPD?</h3>
d1852 1
a1852 4

<p>
<a name="Wireless"></a>
<h2>6.13 - What are my wireless networking options?</h2>
d2027 1
a2027 4

<p>
<a name="Multipath"></a>
<h2>6.14 - How can I do equal-cost multipath routing?</h2>
@


1.323
log
@
excess word and add man page links -- from Ross Richardson (openbsd at rlr
dot id dot au), thanks!
@
text
@a51 1
<li><a href= "#PPP"   >6.5 - Point to Point Protocol</a>
a854 250

<p>
<a name="PPP"></a>
<h2>6.5 - PPP </h2>

<p>
The Point to Point Protocol (PPP) is generally what is used to create a
connection to your ISP via a dial-up modem. OpenBSD has 2 ways of doing this:

<ul>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppd&amp;sektion=8">pppd(8)</a>
 - the kernel PPP daemon
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a>
 - the userland PPP daemon 
</ul>

<p>
Both ppp and pppd perform similar functions, in different ways.
pppd works with the kernel
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=4">ppp(4)</a>
driver, whereas ppp works in userland with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun&amp;sektion=4">tun(4)</a>.
This document will cover only the userland PPP daemon, since it is
easier to debug and to interact with. To start
off you will need some simple information about your ISP. Here is a list
of helpful information that you will need.

<ul>
<li>Your ISP's dial-up number
<li>Your nameserver 
<li>Your username and password
<li>Your gateway
</ul>

<p>
Some of these you can do without, but would be helpful in setting up
ppp. The userland PPP daemon uses the file 
<a href="http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.conf.sample">/etc/ppp/ppp.conf</a>
as its configuration file. There are many helpful files in
<i>/etc/ppp</i> that can have different setups for many different
situations. You should take a browse through that directory.

<p>
<h3>Initial Setup - for PPP(8)</h3>

<p>
Initial Setup for the userland PPP daemon consists of editing your
<i>/etc/ppp/ppp.conf</i> file. This file doesn't exist by default, but
there is a file <i>/etc/ppp/ppp.conf.sample</i> which you can simply
edit to create your own <i>ppp.conf</i> file. Here I will start with the
simplest and probably most used setup.  Here is a quick
<i>ppp.conf</i> file that simply sets some defaults:

<blockquote><pre>
default:
  set log Phase Chat LCP IPCP CCP tun command     
  set device /dev/cua01                           
  set speed 115200     
  set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK ATE1Q0 OK \\dATDT\\T TIMEOUT 40 CONNECT"
</pre></blockquote>

<p>
The section under the <tt>default:</tt> tag gets executed each time.
Here we set up all our critical information. With &quot;set
log&quot; we set our logging levels. This can be changed: refer to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a>
for more info on setting up logging levels. Our device gets set with
&quot;set device&quot;. This is the device that the modem is on. In this
example the modem is on com port 2. Therefore com port 1 would be
<i>/dev/cua00</i>. With &quot;set speed&quot; we set the speed of our
dial-up connection and with &quot;set dial&quot; we set our dial-up
parameters. With this we can change our timeout time, etc. This line
should stay pretty much as it is though.

<p>
Now we can move on and set up information specific to our ISP. We do
this by adding another tag under our <tt>default:</tt> section. This tag
can be called anything you want - easiest to just use the name of your
ISP.  Here I will use <tt>myisp:</tt> as our tag referring to our ISP.
Here is a simple setup incorporating all we need to get ourselves
connected:

<blockquote><pre>
myisp:
  set phone 1234567   
  set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word: ppp"
  set timeout 120   
  set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
  add default HISADDR 
  enable dns
</pre></blockquote>

<p>
Here we have set up essential info for that specific ISP. The first
option &quot;set phone&quot; sets your ISP's dial-up number. The
&quot;set login&quot; sets our login options. Here we have the timeout
set to 5; this means that we will abort our login attempt after 5
seconds if no carrier is found. Otherwise it will wait for &quot;login:&quot;
to be sent and send in your username and password.

<p>
In this example our
Username = ppp and Password = ppp. These values will need to be changed.
The line &quot;set timeout&quot; sets the idle timeout for the entire
connection duration to 120 seconds. The &quot;set ifaddr&quot; line is a
little tricky. Here is a more extensive explanation.

<blockquote><pre>
set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
</pre></blockquote>

<p>
In the above line, we have it set in the format of &quot;<b>set ifaddr
[myaddr[/nn] [hisaddr[/nn] [netmask [triggeraddr]]]]</b>&quot;. So the
first IP specified is what we want as our IP. If you have a static IP
address, you set it here. In our example we use /0 which says that no
bits of this IP address need to match and the whole thing can be
replaced. The second IP specified is what we expect as their IP. If you
know this you can specify it. Again in our line we don't know what will
be assigned, so we let them tell us. The third option is our netmask,
here set to 255.255.255.0.  If triggeraddr is specified, it is used in
place of myaddr in the initial IPCP negotiation.  However, only an
address in the myaddr range will be accepted.  This is useful when
negotiating with some PPP implementations that will not assign an IP
number unless their peer requests ``0.0.0.0''.

<p>
The next option used &quot;add default HISADDR&quot; sets our default
route to their IP. This is 'sticky', meaning that if their IP should
change, our route will automatically be updated. With &quot;enable
dns&quot; we are telling our ISP to authenticate our nameserver
addresses. Do NOT do this if you are running a local DNS, as ppp will
simply circumvent its use by entering some nameserver lines in
<i>/etc/resolv.conf</i>.

<p>
Instead of traditional login methods, many ISPs now use either CHAP or
PAP authentication. If this is the case, our configuration will look
slightly different:

<blockquote><pre>
myisp:
  set phone 1234567   
  set authname ppp
  set authkey ppp
  set login
  set timeout 120   
  set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
  add default HISADDR 
  enable dns
</pre></blockquote>

<p>
In the above example, we specify our username (ppp) and password (ppp)
using authname and authkey, respectively. There is no need to specify
whether CHAP or PAP authentication is used - it will be negotiated
automatically. "set login" merely specifies to attempt to log in, with
the username and password previously specified.

<p>
<h3>Using PPP(8)</h3>

<p>
Now that we have our <i>ppp.conf</i> file set up we can start trying to
make a connection to our ISP. I will detail some commonly used arguments
with ppp:

<ul>
<li><tt>ppp -auto myisp</tt> - This will run ppp, configure your
interfaces and connect to your ISP and then go into the background.
<li><tt>ppp -ddial myisp</tt> - This is similar to -auto, but if your
connection is dropped it will try and reconnect.
</ul>

<p>
If the above fails, try running <i>/usr/sbin/ppp</i> with no options - it
will run ppp in interactive mode. The options can be specified one by
one to check for error or other problems. Using the setup specified above,
ppp will log to /var/log/ppp.log. That log, as well as the man page,
all contain helpful information.

<p>
<h3>ppp(8) extras</h3>

<p>
In some situations you might want commands executed as your connection
is made or dropped. There are two files you can create for just these
situations: <i>/etc/ppp/ppp.linkup</i> and <i>/etc/ppp/ppp.linkdown</i>.
Sample configurations can be viewed here:

<ul>
<li><a href="http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.linkup.sample">ppp.linkup</a>
<li><a href="http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.linkdown.sample">ppp.linkdown</a>
</ul>

<p>
<h3>ppp(8) variations</h3>

<p>
Many ISPs now offer xDSL services, which are faster than traditional
dial-up methods. This includes variants such as ADSL and SDSL.
Although no physical dialing takes place, connection is still based on the
Point to Point Protocol. Examples include:

<ul>
<li>PPPoE
<li>PPPoA
<li>PPTP
</ul>

<p>
<h3>PPPoE/PPPoA</h3>

<p>
The Point to Point Protocol over Ethernet (PPPoE) is a method for sending
PPP packets in Ethernet frames.
The Point to Point Protocol over ATM (PPPoA) is typically run on ATM networks,
such as those found in the UK and Belgium.

<p>
Typically this means you can establish a connection with
your ISP using just a standard Ethernet card and Ethernet-based DSL modem
(as opposed to a USB-only modem).

<p>
If you have a modem which speaks PPPoE/PPPoA, it is possible to configure
the modem to do the connecting. Alternatively, if the modem has a `bridge'
mode, it is possible to enable this and have the modem "pass through" the
packets to a machine running PPPoE software (see below).

<p>
The software interface to act as a client to connect to PPPoE on OpenBSD is
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=4">pppoe(4)</a>.
OpenBSD can also handle the server side of PPPoE with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=npppd&amp;sektion=8">npppd(8)</a>.

<p>
<h3>PPTP</h3>

<p>
The Point to Point Tunneling Protocol (PPTP) is a proprietary Microsoft
protocol.
A pptp client is available which interfaces with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppd&amp;sektion=8">pppd(8)</a>
and is capable of connecting to the PPTP-based Virtual Private Networks (VPN)
used by some cable and xDSL providers.
pptp itself must be installed from <a href="faq15.html#PkgMgmt">packages</a>
or <a href="faq15.html#Ports">ports</a>.
Further instructions on setting up and using pptp are available in the man page
which is installed with the pptp package.
@


1.322
log
@
faq updates for 5.6
@
text
@d595 1
a595 1
<li><b>Replacing the one of several similar cards with a different type:</b>
d646 3
a648 2
First thing to note is that ifconfig(8) will tell you both the MAC
address and the link status of each port.
d651 2
a652 1
NIC to a switch port at a time, and look for which NIC in ifconfig(8)
@


1.321
log
@
+ 6.2.9 - Adding and Replacing NICs.  Inspired by how easy this is on
OpenBSD and what a nightmare it is on many other OSs.
@
text
@d1780 1
a1780 1
    OpenBSD 5.5 (RAMDISK_CD) #229: Wed Mar  5 10:13:54 MST 2014
@


1.320
log
@
updated.  website no longer lists supported devices on popular platforms
(yay!).  While here, update a few other things -- modern hw is enumerated by
order of bus probing, make it clear quirky ISA stuff is unusual.
@
text
@d44 1
d548 118
@


1.319
log
@Add otus(4), rsu(4), urtwn(4) and remove ray(4).

The additions from Carlin Bingham.
@
text
@d120 3
a122 5
command.  You also have the chance of seeing your network interface
using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a> command.
For example, here is the output of dmesg for a Intel Fast Ethernet
network card, which uses the device name fxp.
d129 3
a131 7
<p>
If you don't know what your device name is, please look at the
<a href="../plat.html">supported hardware list</a> for your platform.
You will find a list of many common card names and their OpenBSD device
names here.  Combine the short alphabetical device name (such as fxp)
with a number assigned by the kernel and you have an interface name
(such as fxp0).
d134 6
a139 2
Some cards are assigned by the order they are found during bus probing.
Others may be by hardware resource settings or MAC address.
@


1.318
log
@
more -> cvsweb.openbsd.org for, well, cvsweb.
@
text
@d2056 2
d2063 2
a2064 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ray&amp;sektion=4">ray(4)</a>
Raytheon Raylink/WebGear Aviator 802.11FH
d2077 2
@


1.317
log
@Don't advertise pppoe(8) here, from markowski1 at gmail, tweak by me to
make it clear we're talking about client side, plus a quick mention of npppd
for server. More work is required on the file to remove ppp(8). (Technically
not removed until 5.6 but it doesn't make sense for new users to find
faq information about a method which will be removed next release).
@
text
@d774 1
a774 1
<a href="http://www.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.conf.sample">/etc/ppp/ppp.conf</a>
d928 2
a929 2
<li><a href="http://www.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.linkup.sample">ppp.linkup</a>
<li><a href="http://www.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.linkdown.sample">ppp.linkdown</a>
@


1.316
log
@
welcome 5.5!
@
text
@d968 4
a971 8
The main software interface to PPPoE/PPPoA on OpenBSD is
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8">pppoe(8)</a>,
which is a userland implementation (in much the same way that we described
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a>,
above).
A kernel PPPoE implementation,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=4">pppoe(4)</a>,
has been incorporated into OpenBSD.
@


1.315
log
@
correct <blockquote><pre> orders, spotted by validator.w3.org
@
text
@d1648 1
a1648 1
    >> OpenBSD/i386 PXEBOOT 3.19
d1657 1
a1657 1
    >> OpenBSD/i386 PXEBOOT 3.19
d1667 1
a1667 1
    OpenBSD 5.4 (RAMDISK_CD) #34: Tue Jul 30 12:20:01 MDT 2013
@


1.314
log
@
remove www@@ references, simplify footers on all pages.
@
text
@d2185 1
a2185 1
<pre><blockquote>
d2193 1
a2193 1
<pre><blockquote>
@


1.313
log
@
better wording suggested by krw@@
@
text
@a4 1
<link rev= "made" href= "mailto:www@@openbsd.org">
d10 1
a10 1
<meta name= "copyright"     content= "This document copyright 1998-2013 by OpenBSD.">
d2313 2
a2314 1
<font color="#0000e0">
a2317 9
</font>

<p>
<hr>
<a href="index.html"><img height="24" width="24" src="../images/back.gif" border="0" alt="[back]"></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>$OpenBSD: faq6.html,v 1.312 2013/12/01 17:09:56 nick Exp $</small>

@


1.312
log
@
make it slightly more clear that ONLY OpenBSD booting is being discussed here.
@
text
@d1676 2
a1677 2
<h3>Can I boot other kinds of OpenBSD kernels using PXE other than
<tt>bsd.rd</tt>?</h3>
d2325 1
a2325 1
<small>$OpenBSD: faq6.html,v 1.311 2013/11/12 00:30:25 nick Exp $</small>
@


1.311
log
@
plural.  From Senthil Kumar (senthil dot debian at gmail dot com) thanks
@
text
@d1676 1
a1676 1
<h3>Can I boot other kinds of kernels using PXE other than
d2325 1
a2325 1
<small>$OpenBSD: faq6.html,v 1.310 2013/11/01 14:05:56 nick Exp $</small>
@


1.310
log
@
updates for 5.4
@
text
@d721 1
a721 1
and tell you why in <tt>/var/log/message</tt>.
d2325 1
a2325 1
<small>$OpenBSD: faq6.html,v 1.309 2013/09/07 18:55:50 nick Exp $</small>
@


1.309
log
@
someone can't keep either his plurals nor his interfaces straight, and
that someone is me.  Fortunately, Casper (at) Schutijster (dot com) can.
thanks!
@
text
@d1668 1
a1668 1
    OpenBSD 5.3 (RAMDISK_CD) #49: Tue Mar 12 18:50:37 MDT 2013
d2325 1
a2325 1
<small>$OpenBSD: faq6.html,v 1.308 2013/06/02 21:36:41 nick Exp $</small>
@


1.308
log
@
add trunk(4) to list of virtual interfaces.
Add sections on configuring wireless adapters and setting up trunk
interfaces with them.
@
text
@d2162 1
a2162 1
devices may simplify your life.
d2169 1
a2169 1
interfaces.
d2187 1
a2187 1
# <b>cat /etc/hostname.wpi0</b>
d2197 1
a2197 1
trunkport wpi0 
d2325 1
a2325 1
<small>$OpenBSD: faq6.html,v 1.307 2013/05/01 13:16:32 nick Exp $</small>
@


1.307
log
@
updates for 5.3
@
text
@d225 2
d2121 86
d2325 1
a2325 1
<small>$OpenBSD: faq6.html,v 1.306 2013/02/13 20:45:09 sthen Exp $</small>
@


1.306
log
@Add an example for dhcpd on a bridge, from Jeremie Le Hen.
Small tweak suggested by aja@@, and add href for dhcpd from me.
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2012 by OpenBSD.">
d1386 1
a1386 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&sektion=4">bridge(4)</a>
d1391 1
a1391 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vether&sektion=4">vether(4)</a>
d1394 1
a1394 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd&sektion=8">dhcpd(8)</a>
d1647 1
a1647 1
    >> OpenBSD/i386 PXEBOOT 3.17
d1656 1
a1656 1
    >> OpenBSD/i386 PXEBOOT 3.17
d1664 1
a1664 1
    Copyright (c) 1995-2012 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1666 1
a1666 1
    OpenBSD 5.2 (RAMDISK_CD) #207: Wed Aug  1 10:19:00 MDT 2012
d2237 1
a2237 1
<small>$OpenBSD: faq6.html,v 1.305 2013/02/13 19:22:32 sthen Exp $</small>
@


1.305
log
@- missing . in 802.11, from amit kulkarni
- awi(4) was removed 4 years ago, from amit
- zap trailing whitespace
@
text
@d1298 1
a1298 1
<h3>An example of a bridge application</h3>
d1372 83
d2237 1
a2237 1
<small>$OpenBSD: faq6.html,v 1.304 2012/11/02 11:25:12 nick Exp $</small>
@


1.304
log
@
Maurice Janssen pointed out I changed a RAMDISK_CD banner to a GENERIC
banner.  Ooops!
@
text
@d18 1
a18 1
<img alt="[OpenBSD]" height=30 width=141 src="../images/smalltitle.gif" border="0">    
d1959 1
a1959 1
driver for Atheros 80211/a/g/n devices.
a1963 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=awi&amp;sektion=4">awi(4)</a>
AMD 802.11 PCnet Mobile.
d2154 1
a2154 1
<small>$OpenBSD: faq6.html,v 1.303 2012/11/01 15:05:30 nick Exp $</small>
@


1.303
log
@
enter 5.2!
@
text
@d1583 1
a1583 1
    OpenBSD 5.2 (GENERIC) #278: Wed Aug  1 10:04:16 MDT 2012
d2156 1
a2156 1
<small>$OpenBSD: faq6.html,v 1.302 2012/10/14 17:33:40 nick Exp $</small>
@


1.302
log
@
bring example and text into sync; pointed out by Peter Teeson (pteeson at
me dot com), thanks!
@
text
@d1520 2
a1521 11
daemon.  This is typically done through 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8"
>inetd(8)</a>.
The standard OpenBSD install has a sample line in <tt>inetd.conf</tt>
which will do nicely for you:
<pre>
    #tftp  dgram   udp  wait  root  /usr/libexec/tftpd   tftpd -s /tftpboot
</pre>

which simply needs to have the '#' character removed and send inetd(8) a 
-HUP signal to get it to reload <tt>/etc/inetd.conf</tt>.
d1564 1
a1564 1
    >> OpenBSD/i386 PXEBOOT 3.16
d1573 1
a1573 1
    >> OpenBSD/i386 PXEBOOT 3.16
d1583 1
a1583 1
    OpenBSD 5.1 (RAMDISK_CD) #95: Sun Feb 12 10:02:21 MST 2012
d2156 1
a2156 1
<small>$OpenBSD: faq6.html,v 1.301 2012/10/14 17:26:04 nick Exp $</small>
@


1.301
log
@
minor (but quite real!) typos from Rob Pierce (rob at 2keys dot ca),
thanks!
@
text
@d164 1
a164 1
        inet 192.168.1.34 netmask 0xffffff00 broadcast 192.168.1.255
d2165 1
a2165 1
<small>$OpenBSD: faq6.html,v 1.300 2012/08/16 02:40:18 nick Exp $</small>
@


1.300
log
@
mountd is needed.
-tun4 helps, though there is conflict with the man page.  According to
nfsd(8), -t is to specify a timeout value, -T is TCP transport.  -u
doesn't exist, and the default is to start four servers.  however -T
doesn't work, and -tun4 starts five nfsd processes.  But this is
certainly more right than what was there.  This diff (best of the bunch
I got) was from robert at peichaer dotorg, thanks!
@
text
@d1885 1
a1885 1
off, it is <i>highly</i> recommended that you bring it to close to
d2165 1
a2165 1
<small>$OpenBSD: faq6.html,v 1.299 2012/08/13 01:43:25 nick Exp $</small>
@


1.299
log
@
update rc.conf.local lines for NFS for the new rc.d startup process.
Started by a posting on misc@@ (erk. back in march), but there was more
to do than just nfsd_flags.
@
text
@d1077 2
a1078 1
nfsd_flags=""
d1145 5
a1149 6
The default arguments passed to nfsd in 
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">
rc.conf(8)</a> enable TCP (-t) and UDP (-u) connections and enable 4 instances (-n) 
of nfsd to run. You should set an appropriate number of NFS server instances handle
the maximum number of concurrent client requests that you want to
service by adjusting the <tt>nfsd_flags</tt> line in rc.conf.local.
d2165 1
a2165 1
<small>$OpenBSD: faq6.html,v 1.298 2012/05/01 14:35:14 nick Exp $</small>
@


1.298
log
@
welcome 5.1!
@
text
@d1076 2
a1077 2
portmap=YES
nfs_server=YES
d1148 2
a1149 2
the maximum number of concurrent client requests that you want to service by adding
nfsd_flags to rc.conf.local.
d2165 1
a2165 1
<small>$OpenBSD: faq6.html,v 1.297 2012/04/23 22:41:40 nick Exp $</small>
@


1.297
log
@
dhcpd and nfs are best started via rc.d/ scripts now, based on diff from
robert at t61 at peichaer dotorg, thanks!
While here, improve dhcpd config a bit; no need to list interfaces normally.
@
text
@d1590 1
a1590 1
    Copyright (c) 1995-2011 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1592 1
a1592 1
    OpenBSD 5.0 (RAMDISK_CD) #36: Wed Aug 17 10:27:31 MDT 2011
d2165 1
a2165 1
<small>$OpenBSD: faq6.html,v 1.296 2011/11/01 10:52:27 nick Exp $</small>
@


1.296
log
@
updates for 5.0 (and some non-version-related improvements).
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2011 by OpenBSD.">
d671 2
a672 4
<tt>dhcpd_flags="<i>interface</i>"</tt>, replacing
<tt><i>interface</i></tt> with the list of interfaces that 
dhcpd(8) should listen on, for example:

d674 1
a674 1
     # <b>echo 'dhcpd_flags="xl1 xl2 xl3"' &gt;&gt;/etc/rc.conf.local</b>
d677 6
d713 2
a714 2
     # <b>touch /var/db/dhcpd.leases</b>
     # <b>dhcpd fxp0</b>
d717 3
a719 7
<p>
The <tt>touch</tt> line is needed to create an empty
<tt>dhcpd.leases</tt> file before dhcpd(8) can start.
The OpenBSD <a href="faq10.html#rc">startup scripts</a> will create this
file if needed on boot, but if you are starting dhcpd(8) manually,
you must create it first.
<tt>fxp0</tt> is an interface that you want to start serving DHCP on.
d1138 3
a1140 4
# <b>/usr/sbin/portmap</b>
# <b>echo -n &gt;/var/db/mountdtab</b>
# <b>/sbin/mountd</b>
# <b>/sbin/nfsd -tun 4</b>
d1144 6
a1149 4
The arguments passed to nfsd enable TCP (-t) and UDP (-u) connections and
enable 4 instances (-n) of nfsd to run.
You should set an appropriate number of NFS server instances to handle the
maximum number of concurrent client requests that you want to service.
d1160 1
a1160 1
# <b>kill -HUP `cat /var/run/mountd.pid`</b>
d2165 1
a2165 1
<small>$OpenBSD: faq6.html,v 1.295 2011/06/28 08:33:48 jj Exp $</small>
@


1.295
log
@Fixes from Michal Mazurek
@
text
@d164 1
a993 1
<!-- XXXrelease -->
d1572 1
a1572 1
    >> OpenBSD/i386 PXEBOOT 3.15
d1581 1
a1581 1
    >> OpenBSD/i386 PXEBOOT 3.15
d1591 1
a1591 1
    OpenBSD 4.9 (RAMDISK_CD) #329: Wed Mar  2 07:27:01 MST 2011
d2164 1
a2164 1
<small>$OpenBSD: faq6.html,v 1.294 2011/06/20 15:11:36 sthen Exp $</small>
@


1.294
log
@3com's "Understanding IP addressing" document is no longer present
on their/HP's website; pointed out by Garrett Holmstrom. Switch to an
alternative source.
@
text
@d294 1
a294 1
It is possible use a symbolic name there, but be careful: you can't
d2164 1
a2164 1
<small>$OpenBSD: faq6.html,v 1.293 2011/06/18 18:23:00 lum Exp $</small>
@


1.293
log
@Remove duplication, from Maurice Janssen.
Plus tidy hostname.if para.
@
text
@d83 2
a84 2
<a href="http://www.3com.com/other/pdfs/infra/corpinfo/en_US/501302.pdf">Understanding
IP Addressing</a>.
d2164 1
a2164 1
<small>$OpenBSD: faq6.html,v 1.292 2011/06/16 09:26:43 sthen Exp $</small>
@


1.292
log
@- sync ifconfig example output with recent OS versions
- explain that most virtual interface types are now created at runtime
- add a few more virtual if types (mpe, svlan, bridge)
- mention more routing daemons from base and ports

structure ok nick@@ (who agrees with me that there's still a lot of
work to do on this page).
@
text
@a223 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4">bridge</a>
 - Ethernet Bridge Interface
d227 4
a230 4
The interface is configured at boot time using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5">/etc/hostname.<i>if</i>(5)</a>
files, where <i>if</i> will be replaced by the full name of your interface,
for the example above, <i>/etc/hostname.fxp0</i>.
d2164 1
a2164 1
<small>$OpenBSD: faq6.html,v 1.291 2011/06/10 16:27:47 lum Exp $</small>
@


1.291
log
@ports/net/zebra was removed over 2 years ago
also align "a name" links with top of browser window
and make some Meta Tags more pertinent.
@
text
@d153 5
a157 1
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 33224
a158 3
        inet6 ::1 prefixlen 128
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x5
lo1: flags=8008&lt;LOOPBACK,MULTICAST&gt; mtu 33224
d160 2
a161 1
        address: 00:04:ac:dd:39:6a
a163 1
        inet 10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255
d165 7
a171 22
pflog0: flags=0&lt;&gt; mtu 33224
pfsync0: flags=0&lt;&gt; mtu 2020
sl0: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt; mtu 296
sl1: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt; mtu 296
ppp0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
ppp1: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
tun0: flags=10&lt;POINTOPOINT&gt; mtu 3000
tun1: flags=10&lt;POINTOPOINT&gt; mtu 3000
enc0: flags=0&lt;&gt; mtu 1536
bridge0: flags=0&lt;&gt; mtu 1500
bridge1: flags=0&lt;&gt; mtu 1500
vlan0: flags=0&lt;&gt; mtu 1500
        address: 00:00:00:00:00:00
vlan1: flags=0&lt;&gt; mtu 1500
        address: 00:00:00:00:00:00
gre0: flags=9010&lt;POINTOPOINT,LINK0,MULTICAST&gt; mtu 1450
carp0: flags=0&lt;&gt; mtu 1500
carp1: flags=0&lt;&gt; mtu 1500
gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
gif1: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
gif2: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
gif3: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
d195 7
a207 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&amp;sektion=4">enc</a>
 - Encapsulating Interface
d212 2
d220 2
d224 2
d462 9
a470 7
Now modify the routes on the other hosts on both sides.  There are many
possible uses of OpenBSD as a router by using software such as
OpenBSD's own <a href="http://www.openbgpd.org/">OpenBGPD</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=routed&amp;sektion=8">routed(8)</a>.
There is also support in the ports collection for
<a href="http://sourceforge.net/projects/mrt">mrtd</a>
d472 8
a479 4
<a href="http://www.quagga.net">quagga</a>. 
OpenBGPD and routed are installed as part of the base system.
OpenBSD supports
several T1, HSSI, ATM, FDDI, Ethernet, and serial (PPP/SLIP) interfaces.
d2166 1
a2166 1
<small>$OpenBSD: faq6.html,v 1.290 2011/05/01 13:08:58 nick Exp $</small>
@


1.290
log
@
updates for 4.9
@
text
@d8 2
a9 2
<meta name= "description"   content= "the OpenBSD FAQ page">
<meta name= "keywords"      content= "openbsd,faq">
d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2010 by OpenBSD.">
d305 1
d336 1
d383 1
d467 6
a472 4
OpenBSD's own <a href="http://www.openbgpd.org/">OpenBGPD</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=routed&amp;sektion=8">routed(8)</a>,
<a href="http://sourceforge.net/projects/mrt">mrtd</a>,
<a href="http://www.zebra.org">zebra</a>, and 
a473 1
OpenBSD has support in the ports collection for zebra, quagga, and mrtd.
d1273 1
a1273 1

d1604 1
a1604 1

d1954 1
a1954 1

d2044 1
a2044 1

d2163 1
a2163 1
<small>$OpenBSD: faq6.html,v 1.289 2010/11/07 03:13:37 nick Exp $</small>
@


1.289
log
@
knob twisting bad, m'kay?  pointed out by deraadt@@
@
text
@d1567 1
a1567 1
    >> OpenBSD/i386 PXEBOOT 2.03
d1576 1
a1576 1
    >> OpenBSD/i386 PXEBOOT 2.03
d1584 1
a1584 1
    Copyright (c) 1995-2010 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1586 1
a1586 1
    OpenBSD 4.8 (RAMDISK_CD) #89: Mon Aug 16 09:24:20 MDT 2010
d2159 1
a2159 1
<small>$OpenBSD: faq6.html,v 1.288 2010/11/06 16:56:11 nick Exp $</small>
@


1.288
log
@
"Delete it please." deraadt@@
@
text
@d998 1
a998 1
<i>VERY FEW people will need to do these things!</i>
d1001 1
a1001 40
<h3>6.6.1 - How can I tweak the kernel so that there are a higher number
of retries and longer timeouts for TCP sessions?</h3>

<p>
You would normally use this to allow for routing or connection problems.
Of course, for it to be most effective, both sides of the connection
need to use similar values.

<p>
To tweak this, use <tt>sysctl</tt> and increase the values of:

<pre>
net.inet.tcp.keepinittime
net.inet.tcp.keepidle
net.inet.tcp.keepintvl
</pre>

<p>
Using sysctl -a, you can see the current values of these (and many
other) parameters.  To change one, do something like
<tt>sysctl net.inet.tcp.keepidle=28800</tt>.

<p>
<h3>6.6.2 - How can I turn on directed broadcasts?</h3>

<p>
Normally, you don't want to do this.  This allows someone to send
traffic to the broadcast address(es) of your connected network(s) if you
are using your OpenBSD box as a router.

<p>
There are some instances, in closed networks, where this may be useful,
particularly when using older implementations of the NetBIOS protocol.
This is another sysctl.
<tt>sysctl net.inet.ip.directed-broadcast=1</tt> turns this on.  Read
about <a href="http://www.netscan.org">smurf attacks</a> if you want to
know why it is off by default.

<p>
<h3>6.6.3 - I don't want the kernel to dynamically allocate a certain
d1005 1
a1005 1
There is a sysctl for this also.  From
d2159 1
a2159 1
<small>$OpenBSD: faq6.html,v 1.287 2010/11/01 09:48:45 nick Exp $</small>
@


1.287
log
@
update to 4.8
@
text
@a1063 17
<h3>6.6.4 - How can I increase performance on really high-speed, high
traffic links?</h3>

If you are seeing performance limitations when using a high-speed WAN
connection transferring lots of data, you may see a performance gain
by altering the following sysctls:
<blockquote><pre>
net.inet.tcp.recvspace
net.inet.tcp.sendspace
</pre></blockquote>

Try a value like 65536 instead of the default of 16384.
Note that very few will see any benefit from this.
Don't adjust this unless you are actually seeing performance below what
you expect.

<p>
d2198 1
a2198 1
<small>$OpenBSD: faq6.html,v 1.286 2010/09/14 05:27:12 steven Exp $</small>
@


1.286
log
@bridgename.if -> hostname.if

noticed by Jim Lucas
@
text
@d1642 1
a1642 1
    OpenBSD 4.7 (RAMDISK_CD) #353: Wed Mar 17 21:02:53 MST 2010
d2215 1
a2215 1
<small>$OpenBSD: faq6.html,v 1.284 2010/05/19 12:41:02 nick Exp $</small>
@


1.285
log
@brconfig->ifconfig, bridgename.if->hostname.if. ok nick@@
@
text
@d1402 1
a1402 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridgename.if&amp;sektion=5"><tt>bridgename.bridge0</tt></a>. 
d1406 1
a1406 1
$ <b>cat /etc/bridgename.bridge0</b>
@


1.284
log
@
updates for 4.7
@
text
@d1469 1
a1469 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=brconfig&amp;sektion=8">brconfig(8)</a>
d1481 1
a1481 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=brconfig&amp;sektion=8">brconfig(8)</a>
d1483 1
a1483 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridgename.if&amp;sektion=5">bridgename.bridge0</a>,
d2215 1
a2215 1
<small>$OpenBSD: faq6.html,v 1.283 2010/03/18 22:53:54 nick Exp $</small>
@


1.283
log
@
typo fixes from Marcus dot Lude at gmx dot de, thanks!
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2009 by OpenBSD.">
d227 2
d1640 1
a1640 1
    Copyright (c) 1995-2009 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1642 1
a1642 1
    OpenBSD 4.6 (RAMDISK_CD) #53: Thu Jul  9 21:41:35 MST 2009
d2017 2
d2215 1
a2215 1
<small>$OpenBSD: faq6.html,v 1.282 2010/02/05 12:20:51 blambert Exp $</small>
@


1.282
log
@According to mpf@@, net.inet.carp.arpbalance is as dead as disco, so
don't refer to it here.

ok nick@@
@
text
@d536 1
a536 1
        inet 192.168.0.2  netmask 0xffffff00 broadcast 192.168.0.255
d608 1
a608 1
Of course, you may want to remove <tt>hostname</tt>, or other settings
d2211 1
a2211 1
<small>$OpenBSD: faq6.html,v 1.281 2009/11/30 03:25:40 nick Exp $</small>
@


1.281
log
@
update for 4.6, prompted by Alan Bueno.
@
text
@d1743 1
a1743 10
<p>
The second, <tt>net.inet.carp.arpbalance</tt>, is used for load
balancing.
If this feature is enabled, CARP source-hashes the originating IP of a
request.
The hash is then used to select a virtual host from the available pool
to handle the request.
This is disabled by default.

<p>The third, <tt>net.inet.carp.log</tt>, logs CARP state changes,
d1746 1
a1746 1
<p>Fourth, <tt>net.inet.carp.preempt</tt> enables natural selection
a1880 7
<p>All we have to do now is enable the load balancing sysctl we
discussed previously on both machines:

<blockquote><pre>
# <b>sysctl net.inet.carp.arpbalance=1</b>
</pre></blockquote>

d2211 1
a2211 1
<small>$OpenBSD: faq6.html,v 1.280 2009/10/25 16:49:36 steven Exp $</small>
@


1.280
log
@missing bits in href for urtw(4); alan.bsd at gmail
@
text
@d1638 1
a1638 1
    Copyright (c) 1995-2008 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1640 1
a1640 1
    OpenBSD 4.5 (RAMDISK_CD) #1112: Sat Feb 28 15:06:26 MST 2009
d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.278 2009/09/09 00:36:47 nick Exp $</small>
@


1.279
log
@
updates for 4.6
@
text
@d2066 1
a2066 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=&amp;sektion=">urtw(4)</a>
@


1.278
log
@
Alan R. S. Bueno pointed out the man page segment quoted has been updated,
and I wanted it in <blockquote> and use a target to show what part of the
man page was updated.
@
text
@a2065 1
<!-- XXX for 4.6
a2067 1
-->
d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.277 2009/07/02 11:35:51 sthen Exp $</small>
@


1.277
log
@ppp.conf(5) needs indentation. pointed out by Vijay Sankar,
ok nick@@
@
text
@d1043 1
a1043 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>:
d1045 5
a1049 5
<pre>
Set the list of reserved TCP ports that should not be allocated by the
kernel dynamically.  This can be used to keep daemons from stealing a
specific port that another program needs to function.  List elements may
be separated by commas and/or whitespace.
d1051 3
a1053 1
 #  <b>sysctl net.inet.tcp.baddynamic=749,750,751,760,761,871</b>
d1055 1
a1055 1
It is also possible to add or remove ports from the current list.
d1057 3
a1059 3
 #  <b>sysctl net.inet.tcp.baddynamic=+748</b>
 #  <b>sysctl net.inet.tcp.baddynamic=-871</b>
</pre>
d2229 1
a2229 1
<small>$OpenBSD: faq6.html,v 1.276 2009/06/04 13:23:55 sthen Exp $</small>
@


1.276
log
@carp.log defaults to logging carp state changes; pointed out by
Rodolfo Gouveia, ok nick@@
@
text
@d783 4
a786 4
set log Phase Chat LCP IPCP CCP tun command     
set device /dev/cua01                           
set speed 115200     
set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK ATE1Q0 OK \\dATDT\\T TIMEOUT 40 CONNECT"
d812 6
a817 6
set phone 1234567   
set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word: ppp"
set timeout 120   
set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
add default HISADDR 
enable dns
d870 8
a877 8
set phone 1234567   
set authname ppp
set authkey ppp
set login
set timeout 120   
set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0 0.0.0.0
add default HISADDR 
enable dns
d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.275 2009/04/30 17:19:11 nick Exp $</small>
@


1.275
log
@
updates for 4.5
@
text
@d1750 2
a1751 2
<p>The third, <tt>net.inet.carp.log</tt>, logs CARP errors.
Disabled by default.
d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.274 2009/04/07 10:56:27 nick Exp $</small>
@


1.274
log
@
more link changes from Benoit Lecocq, thanks!
@
text
@d1619 1
a1619 1
    >> OpenBSD/i386 PXEBOOT 1.00
d1628 1
a1628 1
    >> OpenBSD/i386 PXEBOOT 1.00
d1638 1
a1638 1
    OpenBSD 4.4 (RAMDISK_CD) #857: Tue Aug 12 17:31:49 MDT 2008
d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.273 2009/04/03 01:51:12 nick Exp $</small>
@


1.273
log
@
update list of wireless adapters
@
text
@d464 1
a464 1
<a href="http://www.mrtd.net">mrtd</a>,
d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.272 2009/01/30 22:25:57 sthen Exp $</small>
@


1.272
log
@bump copyright for files edited this year
@
text
@d2023 2
a2024 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=awi&amp;sektion=4">awi(4)</a>
AMD 802.11 PCnet Mobile.
d2027 4
a2030 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wi&amp;sektion=4">wi(4)</a>
Prism2/2.5/3. <sup>(AP)</sup>
d2033 8
a2040 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ath&amp;sektion=4">ath(4)</a>
driver for Atheros IEEE 802.11a/b/g. <sup>(AP)</sup>
d2042 7
a2048 5
Intel PRO/Wireless 2200BG/2225BG/2915ABG IEEE 802.11a/b/g. <sup>(NFF)</sup>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipw&amp;sektion=4">ipw(4)</a>
Intel PRO/Wireless 2100 IEEE 802.11b. <sup>(NFF)</sup>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=atu&amp;sektion=4">atu(4)</a>
Atmel AT76C50x USB IEEE 802.11b. 
d2051 3
a2053 1
Ralink Technology RT25x0 IEEE 802.11a/b/g. <sup>(AP)</sup>
d2055 1
a2055 6
Realtek 8180 IEEE 802.11b. <sup>(AP)</sup>

<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=acx&amp;sektion=4">acx(4)</a>
TI ACX100/ACX111. <sup>(NFF) (AP)</sup>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pgt&amp;sektion=4">pgt(4)</a>
Conexant/Intersil Prism GT Full-MAC. <sup>(NFF) (AP)</sup>
d2058 12
d2072 2
a2073 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=uath&amp;sektion=4">uath(4)</a>
Atheros AR5005UG/AR5005UX USB2.0 (work-in-progress). <sup>(NFF)</sup>

d2227 1
a2227 1
<small>$OpenBSD: faq6.html,v 1.271 2009/01/25 18:09:49 jasper Exp $</small>
@


1.271
log
@- fix a bunch of tyop's

from Tom Van Looy, thanks!
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2008 by OpenBSD.">
d2209 1
a2209 1
<small>$OpenBSD: faq6.html,v 1.270 2008/10/31 16:52:29 nick Exp $</small>
@


1.270
log
@
update for 4.4
@
text
@d929 1
a929 1
Although no physical dialling takes place, connection is still based on the
d2209 1
a2209 1
<small>$OpenBSD: faq6.html,v 1.269 2008/06/08 20:36:10 nick Exp $</small>
@


1.269
log
@
apparently, rc.conf.local has been the prefered way to specify
interfaces for dhcpd for some time and will become manditory for 4.4, so
change this now.
@
text
@d1638 1
a1638 1
    OpenBSD 4.3 (RAMDISK_CD) #645: Wed Mar 12 11:31:03 MDT 2008
d2209 1
a2209 1
<small>$OpenBSD: faq6.html,v 1.268 2008/05/01 20:41:24 steven Exp $</small>
@


1.268
log
@slight rewording...
@
text
@d662 4
a665 3
edit <tt>/etc/rc.conf.local</tt> so that it contains the line <tt>dhcpd_flags=""</tt>.
Put the interfaces that you want
dhcpd to <b>listen</b> on in <tt>/etc/dhcpd.interfaces</tt>.
d668 1
a668 1
     # <b>echo xl1 xl2 xl3 &gt;/etc/dhcpd.interfaces</b>
d2209 1
a2209 1
<small>$OpenBSD: faq6.html,v 1.267 2008/04/30 21:24:58 nick Exp $</small>
@


1.267
log
@
update for 4.3
@
text
@d989 2
a990 2
Twisting knobs you don't understand is far more likely to break your
system than it is to improve your performance.
d2208 1
a2208 1
<small>$OpenBSD: faq6.html,v 1.266 2008/04/16 00:29:29 nick Exp $</small>
@


1.266
log
@
add another "Don't twist knobs you don't understand and don't need to twist"
warning.
@
text
@d1635 1
a1635 1
    Copyright (c) 1995-2007 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1637 1
a1637 1
    OpenBSD 4.2 (RAMDISK_CD) #468: Tue Aug 28 11:02:17 MDT 2007
d2208 1
a2208 1
<small>$OpenBSD: faq6.html,v 1.265 2008/03/01 14:10:26 steven Exp $</small>
@


1.265
log
@more consistent formatting
@
text
@d987 10
d2208 1
a2208 1
<small>$OpenBSD: faq6.html,v 1.264 2008/03/01 11:31:08 steven Exp $</small>
@


1.264
log
@bump copyright year
@
text
@d152 1
a152 1
$ <strong>ifconfig</strong>
d196 1
a196 1
<strong>UP</strong> and <strong>RUNNING</strong> flags are set.
d252 1
a252 1
$ <strong>cat /etc/hostname.fxp0</strong>
d281 1
a281 1
$ <strong>cat /etc/hostname.vlan0</strong>
d349 1
a349 1
<strong>/etc/netstart</strong> script. You can do this by simply typing
d353 1
a353 1
# <strong>sh /etc/netstart</strong>
d390 1
a390 1
$ <strong>netstat -rn</strong>
d406 1
a406 1
$ <strong>route show</strong>
d455 1
a455 1
# <strong>sysctl net.inet.ip.forwarding=1</strong>
d780 1
a780 2
<blockquote>
<pre>
d786 1
a786 2
</pre>
</blockquote>
d809 1
a809 2
<blockquote>
<pre>
d817 1
a817 2
</pre>
</blockquote>
d867 1
a867 2
<blockquote>
<pre>
d877 1
a877 2
</pre>
</blockquote>
d1040 1
a1040 1
 #  <strong>sysctl net.inet.tcp.baddynamic=749,750,751,760,761,871</strong>
d1044 2
a1045 2
 #  <strong>sysctl net.inet.tcp.baddynamic=+748</strong>
 #  <strong>sysctl net.inet.tcp.baddynamic=-871</strong>
d1111 2
a1112 3
<blockquote>
<tt>
portmap=YES<br>
d1114 1
a1114 2
</tt>
</blockquote>
d1173 6
a1178 8
<blockquote>
<tt>
# <b>/usr/sbin/portmap</b><br>
# <b>echo -n &gt;/var/db/mountdtab</b><br>
# <b>/sbin/mountd</b><br>
# <b>/sbin/nfsd -tun 4</b><br>
</tt>
</blockquote>
d1247 1
a1247 2
<blockquote>
<tt>
d1249 1
a1249 2
</tt>
</blockquote>
d1273 1
a1273 1
$ <strong>rpcinfo -p 10.0.0.1</strong>
d1300 1
a1300 1
$ <strong>/usr/bin/showmount -a 10.0.0.1</strong>
d1360 1
a1360 2
<blockquote>
<pre>
d1363 1
a1363 2
</pre>
</blockquote>
d1371 1
a1371 2
<blockquote>
<pre>
d1374 1
a1374 2
</pre>
</blockquote>
d1390 1
a1390 2
<blockquote>
<pre>
d1395 1
a1395 2
</pre>
</blockquote>
d1420 1
a1420 2
<blockquote>
<pre>
d1425 1
a1425 2
</pre>
</blockquote>
d1433 1
a1433 2
<blockquote>
<pre>
d1444 1
a1444 2
</pre>
</blockquote>
d1881 1
a1881 1
# <strong>sysctl net.inet.carp.arpbalance=1</strong>
d2099 4
a2102 6
<blockquote>
<tt>
# route add -mpath default 10.130.128.1<br>
# route add -mpath default 10.132.0.1<br>
</tt>
</blockquote>
d2107 2
a2108 3
<blockquote>
<pre>
# netstat -rnf inet | grep default
d2111 1
a2111 2
</pre>
</blockquote>
d2138 4
a2141 6
<blockquote>
<tt>
# sysctl net.inet.ip.multipath=1<br>
# sysctl net.inet6.ip6.multipath=1
</tt>
</blockquote>
d2154 2
a2155 3
<blockquote>
<pre>
# traceroute -n 154.11.0.4
d2162 1
a2162 1
# traceroute -n 154.11.0.5
d2168 1
a2168 2
</pre>
</blockquote>
d2198 1
a2198 1
<small>$OpenBSD: faq6.html,v 1.263 2008/03/01 09:50:58 steven Exp $</small>
@


1.263
log
@fix link to portmap(8)
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2007 by OpenBSD.">
d2228 1
a2228 1
<small>$OpenBSD: faq6.html,v 1.262 2008/02/27 12:13:42 sthen Exp $</small>
@


1.262
log
@fix example for hostname.dc0 to include broadcast address of NONE.

from Matthew Dempsky
ok nick
@
text
@d1105 1
a1105 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd&amp;sektion=8">portmap(8)</a>
d2228 1
a2228 1
<small>$OpenBSD: faq6.html,v 1.261 2008/02/11 04:44:38 joel Exp $</small>
@


1.261
log
@Expand on NFS section. Clarify what steps are needed for clients and
what are needed for servers.

Reviewed and ok nick@@
@
text
@d511 1
a511 1
inet 192.168.0.2 255.255.255.0 media 100baseTX
d2228 1
a2228 1
<small>$OpenBSD: faq6.html,v 1.260 2008/01/05 17:13:04 joel Exp $</small>
@


1.260
log
@nfsstat(8) -> nfsstat(1)


from Jiri Navratil <jiri..navratil.cz>, thank you
@
text
@d1099 2
d1102 7
a1108 4
Another important security note.  Don't just add a filesystem to
<i>/etc/exports</i> without some kind of list of allowed host(s).
Without a list of hosts which can mount a particular directory, anyone
on who can reach your host will be able to mount your NFS exports.
d1111 5
a1115 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=portmap&amp;sektion=8">portmap(8)</a>
must be running for NFS to operate.  Portmap(8) is off by
default on OpenBSD, so you must add the line
d1117 6
a1122 3
<blockquote><pre>
portmap=YES
</pre></blockquote>
d1124 3
a1126 7
to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf.local&amp;sektion=8">rc.conf.local(8)</a>
to start it on boot. It can also be started manually:

<blockquote><pre>
# <strong>/usr/sbin/portmap</strong>
</pre></blockquote>
d1129 12
a1140 9
The setup consists of a server with the ip <b>10.0.0.1</b>. This server
will be serving NFS only to clients within that network. The first step
to setting up NFS is to setup your <i>/etc/exports</i> file. This file
lists which filesystems you wish to have accessible via NFS and defines
who is able to access them. There are many options that you can use in
your <i>/etc/exports</i> file, and it is best that you read the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&amp;sektion=5">exports(5)</a>
man page. For this example we have an <i>/etc/exports</i> that looks
like this:
d1152 12
a1163 3
available via NFS. <tt>-alldirs</tt> specifies that clients will be able
to mount at any point under the <tt>/work</tt> mount point. <tt>-ro</tt>
specifies that it will only be allowed to be mounted read-only. The last
d1170 33
a1202 4
Once your <i>/etc/exports</i> file is setup, you can go ahead and setup
your NFS server. You should first make sure that options NFSSERVER &amp;
NFSCLIENT are in your kernel configuration. (GENERIC kernel has these
options included.) Next, you should add the line
d1205 1
a1205 1
nfs_server=YES
d1207 6
d1214 6
a1219 8
to <i>/etc/rc.conf.local</i>.
This will bring up both nfsd(8) and mountd(8) when
you reboot. Now, you can go ahead and start the daemons yourself. These
daemons need to be started as root, and you need to make sure that
portmap(8) is running on your system. Here is an example of starting
nfsd(8) which serves on both TCP and UDP using 4 daemons.  You should
set an appropriate number of NFS server daemons to handle the maximum
number of concurrent client requests that you want to service.
d1222 1
a1222 1
# <strong>/sbin/nfsd -tun 4</strong>
d1226 2
a1227 4
Not only do you have to start the nfsd(8) server, but you need to start
mountd(8). This is the daemon that actually services the mount requests
on NFS. To start mountd(8), make sure an empty mountdtab file exists,
and run the daemon:
d1230 1
a1230 2
# <strong>echo -n &gt;/var/db/mountdtab</strong>
# <strong>/sbin/mountd</strong>
d1234 6
a1239 2
If you make changes to /etc/exports while NFS is already running, you
need to make mountd aware of this!  Just HUP it:
d1242 1
a1242 1
# <strong>kill -HUP `cat /var/run/mountd.pid`</strong>
d1246 31
d1280 3
a1282 2
From here, you can check to make sure that all these daemons are up and
registered with RPC. To do this, use rpcinfo(8).
d1318 2
a1319 1
<h3>Mounting NFS Filesystems</h3>
a1320 33
<p>
NFS filesystems should be mounted via mount(8), or more specifically,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_nfs&amp;sektion=8">mount_nfs(8)</a>.
To mount a filesystem <i>/work</i> on host 10.0.0.1 to local filesystem
<i>/mnt</i>, do this (note that you don't need to use an IP address;
mount will resolve host names):

<blockquote><pre>
# <strong>mount -o ro -t nfs 10.0.0.1:/work /mnt</strong>
</pre></blockquote>

<p>
To have your system mount upon boot,
add something like this to your <i>/etc/fstab</i>:

<blockquote><pre>
10.0.0.1:/work /mnt nfs ro 0 0
</pre></blockquote>

<p>
It is important that you use <tt>0 0</tt> at the end of this line so
that your computer does not try to fsck the NFS filesystem on boot!!!!
The other standard security options, such as noexec, nodev, and nosuid,
should also be used where applicable.  Such as:

<blockquote><pre>
10.0.0.1:/work /mnt nfs ro,nodev,nosuid 0 0
</pre></blockquote>

<p>
This way, no devices or setuid programs on the NFS server can subvert
security measures on the NFS client.  If you are not mounting programs
which you expect to run on the NFS client, add noexec to this list.
d2228 1
a2228 1
<small>$OpenBSD: faq6.html,v 1.259 2007/12/21 11:57:21 nick Exp $</small>
@


1.259
log
@
misplaced cap, spotted by (arsen dot stasic at wu-wien dot ac dot at), thanks!
@
text
@d1220 4
a1223 1
it. There is also nfsstat(8) which shows much more verbose statistics.
d2176 1
a2176 1
<small>$OpenBSD: faq6.html,v 1.258 2007/11/01 20:35:02 tobias Exp $</small>
@


1.258
log
@Missing char typo

OK nick@@
@
text
@d282 1
a282 1
Inet 172.21.0.31 255.255.255.0 NONE vlan 2 vlandev fxp1
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.257 2007/11/01 02:11:00 nick Exp $</small>
@


1.257
log
@
updates for 4.2.
@
text
@d1594 1
a1594 1
    OpenBSD 4.2 (RAMDISK_CD) #468: Tue Aug 28 11:02:17 MDT 200
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.256 2007/05/01 16:27:46 nick Exp $</small>
@


1.256
log
@
update for 4.1
@
text
@d1594 1
a1594 1
    OpenBSD 4.1 (RAMDISK_CD) #247: Thu Mar  8 23:21:43 MST 2007
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.255 2007/04/25 21:47:33 nick Exp $</small>
@


1.255
log
@
PF: It's not just for TCP.
@
text
@d1592 1
a1592 1
    Copyright (c) 1995-2006 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1594 1
a1594 1
    OpenBSD 4.0 (RAMDISK_CD) #39: Sat Sep 16 19:34:26 MDT 2006
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.254 2007/04/25 16:45:38 nick Exp $</small>
@


1.254
log
@
Tobias Stoeckmann found a </a> that didn't belong, and I found one
missing.  No </a>s were wasted in the making of this diff.
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2006 by OpenBSD.">
d545 2
a546 2
filtering TCP/IP traffic and doing Network Address Translation. PF is
also capable of normalizing and conditioning TCP/IP traffic and
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.253 2006/12/03 22:49:00 joel Exp $</small>
@


1.253
log
@a really small typo
@
text
@d2047 1
a2047 1
<a name="Multipath">
d2148 1
a2148 1
Equal-Cost Multi-Path Algorithm"</a>.
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.252 2006/12/03 03:39:27 nick Exp $</small>
@


1.252
log
@
spellcheck, THEN commit.  Though in this case, I didn't make those errors.
At least, not recently...  ethernet -> Ethernet.
@
text
@d317 1
a317 1
there are two DNS resolvers, <tt>125.2.3.4</tt> and <tt>125.2.3.4</tt>
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.251 2006/12/03 03:22:33 nick Exp $</small>
@


1.251
log
@
Rework the network config section.  Could be improved yet, I'm sure, but
this organizes the content a lot better, I think.  Wanted to do this for
about five years now...
@
text
@d148 1
a148 1
system.  This sample output shows us only one physical ethernet interface,
d570 1
a570 1
your main ethernet interface is xl0.
d690 1
a690 1
an ethernet interface on the OpenBSD machine, which is in the
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.250 2006/11/24 18:16:48 joel Exp $</small>
@


1.250
log
@Wording and style improvements from saad@@
@
text
@d34 1
a34 1
<li><a href= "#Setup" >6.2 - Initial network setup</a>
d36 9
a44 4
  <li><a href="#Setup.1" >6.2.1 - Identifying and setting up your network
    interfaces</a>
  <li><a href="#Setup.2" >6.2.2 - Setting up your OpenBSD box as a Gateway</a>
  <li><a href="#Setup.3" >6.2.3 - Setting up aliases on an interface</a>
d102 8
a109 1
<h2>6.2 - Initial Network Setup</h2>
d112 1
a112 1
<a name="Setup.1"></a>
d116 1
a116 1
To start off, you must first identify your network interface.  In
d139 4
d230 7
a236 5
If you don't have your interface configured, the first step is to create
the <i>/etc/hostname.xxx</i> file, where the name of your interface will
take the place of "xxx". From the information in the examples above, the
name would be <i>/etc/hostname.fxp0</i>. The layout of this file is
simple:<br>
d242 1
a242 1
(Much more detail about the format of this file can be found in the
d244 2
a245 1
man page.)
d257 5
d272 3
a274 1
media settings should be excluded.)
d282 13
a294 1
inet 172.21.0.31 255.255.255.0 NONE vlan 2 vlandev fxp1
d297 5
a301 15
<p>
The next step from here is to setup your default gateway. To do this,
simply put the IP of your gateway in the file <i>/etc/mygate</i>. This
will allow for your gateway to be set upon boot. From here you should
setup your nameservers, and your <i>/etc/hosts</i> file (see the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5">hosts(5)</a>
man page). To setup your nameservers, you will create a file called
<i>/etc/resolv.conf</i>. You can read more about the format of this file
in the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5">resolv.conf(5)</a>
man page.
If you are using DHCP, you'll want to read <a href="#DHCP">6.4 - DHCP</a> 
taking note of
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf.tail&amp;sektion=5">resolv.conf.tail(5)</a>.
But for standard usage, here is an example.
d303 5
a307 3
<p>
In this example your domain servers are 125.2.3.4 and 125.2.3.5.
You also belong in the domain &quot;example.com&quot;.
a309 1
$ <strong>cat /etc/resolv.conf</strong>
d316 12
d329 19
d367 15
a381 1
You can also check your routes via
d421 2
a422 2
<a name="Setup.2"></a>
<h3>6.2.2 - Setting up your OpenBSD box as a Gateway</h3>
d473 2
a474 2
<a name="Setup.3"></a>
<h3>6.2.3 - Setting up aliases on an interface</h3>
d526 3
a541 1
<a name="NAT"></a>
d2173 1
a2173 1
<small>$OpenBSD: faq6.html,v 1.249 2006/11/10 06:13:38 joel Exp $</small>
@


1.249
log
@New subsection: 6.14 - How can I do equal-cost multipath routing?

Constructive criticism from Nick, thank you :)
@
text
@d2017 1
a2017 1
above ifconfig commands should be added to the bottom of the
d2019 2
a2020 3
>hostname.if(5)</a> files for the fxp1 and fxp2 interfaces and
<tt>/etc/mygate</tt> should be deleted.
This will install the routes when the system is booted.
d2030 1
a2030 1
Lastly, don't forget to enable use of multipath routes by enabling the
a2031 5
Be sure to edit
<a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&amp;sektion=5"
>sysctl.conf(5)</a>
to make the changes permanent.
d2041 7
d2076 2
a2077 2
down (i.e., loses carrier), the kernel can and will still try to
forward packets using the route that points out that interface.
d2081 1
a2081 1
>ifstated(8)</a> to check for downed interfaces and adjust the routing
d2097 1
a2097 1
<small>$OpenBSD: faq6.html,v 1.248 2006/11/01 06:04:26 steven Exp $</small>
@


1.248
log
@typo, tweak
@
text
@d55 2
d1971 113
d2096 1
a2096 1
<small>$OpenBSD: faq6.html,v 1.247 2006/11/01 01:41:18 nick Exp $</small>
@


1.247
log
@
Updates for OpenBSD v4.0
@
text
@d1938 1
a1938 1
not be included with OpenBSD
d1952 1
a1952 1
the firmware files, which the manufacturers refuses to allow 
d1981 1
a1981 1
<small>$OpenBSD: faq6.html,v 1.246 2006/10/27 01:22:12 nick Exp $</small>
@


1.246
log
@
Too many NONEs (there's a bad pun in there, and I can't think of it).
Spotted by raff at brodewicz pl, thanks!
@
text
@d1516 1
a1516 1
    OpenBSD 3.9 (RAMDISK_CD) #1025: Thu Mar  2 02:43:29 MST 2006
d1902 1
a1902 1
AMD 802.11 PCnet Mobile
d1904 1
a1904 1
Aironet Communications 4500/4800
d1906 1
a1906 1
Prism2/2.5/3
d1908 1
a1908 1
ADMtek ADM8211
d1910 1
a1910 1
driver for Atheros IEEE 802.11a/b/g.
d1912 1
a1912 1
Intel PRO/Wireless 2200BG/2225BG/2915ABG IEEE 802.11a/b/g.
d1914 1
a1914 1
Intel PRO/Wireless 2100 IEEE 802.11b.
d1916 1
a1916 1
Atmel AT76C50x USB IEEE 802.11b.
d1919 1
a1919 1
Ralink Technology RT25x0 IEEE 802.11a/b/g.
d1921 12
a1932 1
Realtek 8180 IEEE 802.11b.
d1935 6
a1940 1
  
d1942 3
a1944 1
adapter to connect an OpenBSD system to an existing wireless network
d1951 10
a1967 18
<p>
Note that in order to use the Intel-based cards, you will need to acquire
the firmware files, which Intel refuses to allow 
<a href="faq1.html#ReallyFree">free</a> distribution of, so they can not
be included with OpenBSD.
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwi&amp;sektion=4#FILES">Contact
Intel</a> to let them know what you feel about this, or to let them know
what other product you have purchased instead.

<p>
Other manufacturers, such as Broadcom, Texas Instruments and Connexant
have actively fought our attempts to develop free drivers for their
products.
We encourage you to respect their wishes by not buying their products.
Realtek, Ralink, Atmel, and ADMtek make good products and 
support the open source community's desire for free drivers, and have
earned our support and business.

d1981 1
a1981 1
<small>$OpenBSD: faq6.html,v 1.245 2006/10/20 02:24:25 nick Exp $</small>
@


1.245
log
@
spello
@
text
@d1242 1
a1242 1
dhcp NONE NONE NONE NONE
d1971 1
a1971 1
<small>$OpenBSD: faq6.html,v 1.244 2006/08/21 14:17:21 tom Exp $</small>
@


1.244
log
@s|</tt>|<tt>| to open the tag
@
text
@d981 1
a981 1
connection transfering lots of data, you may see a performance gain
d1971 1
a1971 1
<small>$OpenBSD: faq6.html,v 1.243 2006/08/20 15:22:31 steven Exp $</small>
@


1.243
log
@merge 6.12.4 content into 6.12.3, and some minor rewording.

ok nick@@
@
text
@d1875 1
a1875 1
"</tt>#listen&nbsp;on&nbsp;*</tt>" line in 
d1971 1
a1971 1
<small>$OpenBSD: faq6.html,v 1.242 2006/08/19 17:30:11 steven Exp $</small>
@


1.242
log
@syncronize -> synchronize
@
text
@d1834 2
a1835 2
That wasn't OpenNTPD's 
<a href="http://www.openntpd.org/goals.html">design goal</a>, it was
d1862 1
a1862 1
more appropriate; however it is felt that for the other 95% of the 
d1882 3
a1884 4
<a name="OpenNTPDStillNoServe"></a>
<h3>6.12.4 - ntpd(8) is listening, but other machines still can't
synchronize to it!</h3>

d1971 1
a1971 1
<small>$OpenBSD: faq6.html,v 1.241 2006/08/19 17:28:41 steven Exp $</small>
@


1.241
log
@add a few useful subsections to the table of contents.

ok nick@@
@
text
@d1871 1
a1871 1
<h3>6.12.3 - Why can't my other machines syncronize to OpenNTPD?</h3>
d1884 1
a1884 1
syncronize to it!</h3>
d1972 1
a1972 1
<small>$OpenBSD: faq6.html,v 1.240 2006/08/18 02:00:45 nick Exp $</small>
@


1.240
log
@
add 6.12.3 (Why can't my other machines sync to OpenNTPD) and 6.12.4 (ntpd
is listening, but others still can't sync).  Suggestion and most wording
from Mitja Muzenic (mitja at muzenic dot net), thanks!   ok henning@@
@
text
@d35 6
d43 4
d99 1
a99 1
<h3>6.2.1 - Identifying and Setting Up Your Network Interfaces</h3>
d485 2
a486 1
<h3>6.4.1 DHCP Client</h3>
d578 2
a579 1
<h3>6.4.2 DHCP Server</h3>
d1972 1
a1972 1
<small>$OpenBSD: faq6.html,v 1.239 2006/08/18 01:25:23 nick Exp $</small>
@


1.239
log
@
update, improve OpenNTPD article, prompting by Henning, ok henning@@
@
text
@d1858 28
d1960 1
a1960 1
<small>$OpenBSD: faq6.html,v 1.238 2006/08/05 09:35:10 steven Exp $</small>
@


1.238
log
@fix ifconfig syntax for CARP.  from Volker Uhrig <volker at uhrig.eu.org>
@
text
@d1807 2
a1808 1
will result in your computer keeping itself synchronized to the 
d1813 1
a1813 1
off, it is *highly* recommended that you bring it to close to
d1816 2
a1817 5
You can do this manually using the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=date&amp;sektion=1">date(1)</a>
command or semi-automatically using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rdate&amp;sektion=8">rdate(8)</a>
command, or by manually setting your computer's hardware clock.
d1932 1
a1932 1
<small>$OpenBSD: faq6.html,v 1.237 2006/05/31 09:24:08 steven Exp $</small>
@


1.237
log
@fix order of arguments for ifconfig.

from Przemyslaw Nowaczyk <p_nowaczyk at o2.pl>
@
text
@d1661 1
a1661 1
&nbsp;&nbsp;&nbsp;&nbsp;192.168.0.7 255.255.255.0</b>
d1736 1
a1736 1
&nbsp;&nbsp;&nbsp;&nbsp;192.168.0.7 255.255.255.0</b>
d1744 2
a1745 1
pris# <b>ifconfig carp1 vhid 2 pass bryant carpdev fxp0 192.168.0.7 255.255.255.0</b>
d1934 1
a1934 1
<small>$OpenBSD: faq6.html,v 1.236 2006/05/20 06:17:12 steven Exp $</small>
@


1.236
log
@ifconfig(8) uses -a by default, so skip it.  ok nick@@
@
text
@d1743 1
a1743 1
pris# <b>ifconfig create carp1</b>
d1933 1
a1933 1
<small>$OpenBSD: faq6.html,v 1.235 2006/05/13 20:29:15 steven Exp $</small>
@


1.235
log
@reboot is not necessary to start portmap; from john.danks at gmail
a few tweaks/reformatting while here. ok nick@@
@
text
@d124 1
a124 1
$ <strong>ifconfig -a</strong>
d1933 1
a1933 1
<small>$OpenBSD: faq6.html,v 1.234 2006/05/01 01:02:59 nick Exp $</small>
@


1.234
log
@
updates/revisions for 3.9
@
text
@d1018 1
a1018 1
default on OpenBSD 3.2 and later, so you must add the line
d1026 5
a1030 1
and reboot. 
d1065 8
a1072 2
options included.) Next, you should add the line <tt>nfs_server=YES</tt> to
<i>/etc/rc.conf.local</i>. This will bring up both nfsd(8) and mountd(8) when
d1933 1
a1933 1
<small>$OpenBSD: faq6.html,v 1.233 2006/03/18 02:22:17 nick Exp $</small>
@


1.233
log
@
Paul de Weerd points out that carpdev means physical devices no longer
need an IP address.  Thanks!
@
text
@d964 16
d1492 1
a1492 1
    Copyright (c) 1995-2005 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1494 1
a1494 1
    OpenBSD 3.8 (RAMDISK_CD) #794: Sat Sep 10 15:58:32 MDT 2005
d1923 1
a1923 1
<small>$OpenBSD: faq6.html,v 1.232 2006/03/09 03:17:45 nick Exp $</small>
@


1.232
log
@
bump copyright date (eliminatate Ms from my tree)
@
text
@d1552 3
a1554 2
physical subnet, and each interface requires a real, static IP address,
in addition to a static CARP IP address.
d1907 1
a1907 1
<small>$OpenBSD: faq6.html,v 1.231 2005/11/24 05:41:56 steven Exp $</small>
@


1.231
log
@link to faq15 instead of old faq8 packages/ports sections.

ok nick@@
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2005 by OpenBSD.">
d1906 1
a1906 1
<small>$OpenBSD: faq6.html,v 1.230 2005/11/02 02:23:27 nick Exp $</small>
@


1.230
log
@
You would think that SOMEWHERE along the line I would notice that I was
snipping the banner from a -current kernel.  Actually, I did...but then
forgot until but Steven Mestdagh had to remind me.
@
text
@d893 2
a894 2
pptp itself must be installed from <a href="faq8.html#Ports">ports</a> or
<a href="faq8.html#Packages">packages</a>.
d1761 1
a1761 1
application, available through <a href="faq8.html#Ports">ports</a>,
d1906 1
a1906 1
<small>$OpenBSD: faq6.html,v 1.229 2005/11/02 02:02:08 nick Exp $</small>
@


1.229
log
@
typos, wordos, etc.  Fixed by Steven Mestdagh, thanks!
@
text
@d1478 1
a1478 1
    OpenBSD 3.8-current (RAMDISK_CD) #852: Tue Oct 25 18:00:44 MDT 2005
d1906 1
a1906 1
<small>$OpenBSD: faq6.html,v 1.228 2005/11/01 11:39:57 nick Exp $</small>
@


1.228
log
@
update for 3.8
@
text
@d1789 1
a1789 1
or semi-automatically
d1791 1
a1791 1
commands, or by manually setting your computer's hardware clock.
d1906 1
a1906 1
<small>$OpenBSD: faq6.html,v 1.227 2005/10/29 12:52:25 jmc Exp $</small>
@


1.227
log
@some spelling fixes;
@
text
@d881 1
a881 1
has been incorporated into OpenBSD 3.7.
d1478 1
a1478 1
    OpenBSD 3.7 (RAMDISK_CD) #573: Sun Mar 20 00:27:05 MST 2005
d1489 1
a1489 1
Yes, although with the tools currently in OpenBSD 3.7, PXE booting is
d1779 1
a1779 1
will result in your computer synchronizing itself to the 
d1783 9
a1791 1
degree of accuracy.
a1832 1
<!-- XXX remove "new" for 3.8 -->
d1844 1
a1844 1
<li><i>New</i> <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ath&amp;sektion=4">ath(4)</a>
d1846 1
a1846 1
<li><i>New</i> <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwi&amp;sektion=4">iwi(4)</a>
d1848 1
a1848 1
<li><i>New</i> <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipw&amp;sektion=4">ipw(4)</a>
d1850 1
a1850 1
<li><i>New</i> <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=atu&amp;sektion=4">atu(4)</a>
d1852 1
a1852 1
<li><i>New</i> <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ral&amp;sektion=4">ral(4)</a>
d1855 1
a1855 1
<li><i>New</i> <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rtw&amp;sektion=4">rtw(4)</a>
d1906 1
a1906 1
<small>$OpenBSD: faq6.html,v 1.226 2005/10/08 18:39:01 nick Exp $</small>
@


1.226
log
@
Atheros ain't nice guys after all.  Pointed out by jsg@@.
<rant>*sigh* remember when HW vendors were PROUD of their products?
'course, that was back when someone would bring their computer in for
repair when it crashed.  If the bar gets any lower, won't even have to
worry about stubbing our toes on it.</rant>
@
text
@d1869 1
a1869 1
Note that in order to use the Intel-based cards, you will need to aquire
d1899 1
a1899 1
<small>$OpenBSD: faq6.html,v 1.225 2005/09/01 10:55:17 nick Exp $</small>
@


1.225
log
@
add '=' char after -network and -mask options.  Doesn't seem to be
absolutely needed, but matches man page better...
From (muzqocrust at yahoo dot com dot br), thanks.
@
text
@d1882 1
a1882 1
Realtek, Ralink, Atmel, ADMtek and Atheros make good products and 
d1899 1
a1899 1
<small>$OpenBSD: faq6.html,v 1.224 2005/08/11 10:51:54 nick Exp $</small>
@


1.224
log
@
leaving out broadcast address can be a tad frustrating.  Suggested by
someone (again, my appologies for forgetting/losing who) long ago,
confirmed by personal experience...
@
text
@d1028 1
a1028 1
/work -alldirs -ro -network 10.0.0 -mask 255.255.255.0
d1899 1
a1899 1
<small>$OpenBSD: faq6.html,v 1.223 2005/06/03 00:57:22 joel Exp $</small>
@


1.223
log
@Bring the CARP section up-to-date with 3.7
@
text
@d1647 5
d1899 1
a1899 1
<small>$OpenBSD: faq6.html,v 1.222 2005/05/24 01:15:46 nick Exp $</small>
@


1.222
log
@
HTML validation, from (rfilter at telus dot net)
@
text
@d1605 3
a1607 3
Two of the four CARP-specific commands, <tt>advbase</tt> and
<tt>advskew</tt>, deal with the interval between CARP advertisements.
The formula (in seconds) is <tt>advskew</tt> divided by 255, then added
d1620 6
d1633 2
a1634 1
rachael# <b>ifconfig carp0 vhid 1 pass tyrell 192.168.0.7</b>
d1638 2
a1639 1
<i>tyrell</i>, and the IP address 192.168.0.7.
d1644 1
a1644 1
inet 192.168.0.7 255.255.255.0 192.168.0.255 vhid 1 pass tyrell 
d1649 2
a1650 1
up first will be master.
a1651 3
<p>
Note that in a machine with multiple interfaces, the CARP interface is 
on the same subnet as the physical interface.  
d1703 2
a1704 1
rachael# <b>ifconfig carp1 vhid 2 advskew 100 pass bryant 192.168.0.7</b>
d1712 1
a1712 1
pris# <b>ifconfig carp1 vhid 2 pass bryant 192.168.0.7</b>
d1894 1
a1894 1
<small>$OpenBSD: faq6.html,v 1.221 2005/05/19 16:54:27 nick Exp $</small>
@


1.221
log
@
Welcome 3.7!
@
text
@d1861 1
a1861 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=iwi&sektion=4#FILES">Contact
d1887 1
a1887 1
<small>$OpenBSD: faq6.html,v 1.220 2005/05/13 13:31:19 nick Exp $</small>
@


1.220
log
@
If showing an export which is Read Only, might be best to show it being
mounted as Read Only, too.  Pointed out by and patch from Jason Ackley
(jason a tackley dot net), thanks!
@
text
@d881 1
a881 3
has been incorporated into OpenBSD -current; however, this will not be
available to non-current users until OpenBSD 3.7.
<!-- XXXrelease -->
d1476 1
a1476 1
    Copyright (c) 1995-2004 OpenBSD.  All rights reserved.  http://www.OpenBSD.org
d1478 1
a1478 1
    OpenBSD 3.6 (RAMDISK_CD) #378: Fri Sep 17 13:04:04 MDT 2004
d1489 1
a1489 1
Yes, although with the tools currently in OpenBSD 3.6, PXE booting is
d1652 3
a1654 3
Fortunately, CARP has no problem with one system having an IP both as
its physical interface address and in a CARP group, so there's no need
to change the commands above.
a1769 10
<!-- XXXversion 3.6 only -->
If the clock on your computer is very far off, you should first
set it as closely as possible, possibly using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rdate&amp;sektion=8">rdate(8)</a>,
as ntpd(8) adjusts your clock VERY slowly using 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=adjtime&amp;sektion=2">adjtime(2)</a>
-- it may take <i>many hours</i> (or days or even longer) to synchronize
a clock that is only a couple minutes off (<i>-current</i> will
immediately set the clock on boot).

d1813 1
d1815 1
a1815 1
OpenBSD has support for a few wireless chipsets:
d1825 14
d1844 1
a1844 1
The Prism2 and Prism3-based cards, however, can also be used in the
a1846 21
Unfortunately, Prism2/3-based network adapters are no longer being
produced by most of the "mass market" manufacturers, as they have
switched to lower cost and newer chips, often
<a href="#GenSupport">without changing model number</a>.
Most of the manufacturers of newer chips have chosen to not release
documentation needed to produce free and open drivers for these
devices (feel free to contact the manufacturers and ask them to
change their policies).

<p>
Fortunately, Prism2/3-based adapters are still available through the
surplus and used market, and a few manufacturers understand the value
of a properly documented, open-source friendly chipset, and continue to
produce professional-grade Prism-based adapters.
One reseller of these cards is
<a href="http://www.netgate.com">Netgate.com</a>.
In general, if a manufacturer does not explicitly identify a current
product as being Prism-based, you can safely assume it is not compatible
with the wi(4) driver.
Note that the newest Prism-series chips (such as the Prism-GT) are not
supported.
d1856 17
d1887 1
a1887 1
<small>$OpenBSD: faq6.html,v 1.219 2005/04/19 02:28:27 nick Exp $</small>
@


1.219
log
@
Big cleanup of #DHCP section and documentation of resolv.conf.tail, done
by Rick Barter (rick.barter at gmail dot com), thanks!
(also one long-time typo spotted by dillo's HTML checker)
@
text
@d1127 1
a1127 1
# <strong>mount -t nfs 10.0.0.1:/work /mnt</strong>
d1135 1
a1135 1
10.0.0.1:/work /mnt nfs rw 0 0
d1145 1
a1145 1
10.0.0.1:/work /mnt nfs rw,nodev,nosuid 0 0
d1888 1
a1888 1
<small>$OpenBSD: faq6.html,v 1.218 2005/03/22 12:01:32 nick Exp $</small>
@


1.218
log
@
Maybe we aren't so "harmful" after all...  Spotted by Raymond Lillard,
(rlillard at sonic dot net), thanks.
@
text
@d204 1
a204 1
take the place of xxx. From the information in the examples above, the
d257 9
a265 3
man page. But for a standard usage, here is an example. In this example
your domain servers are 125.2.3.4 and 125.2.3.5. You also belong in the
domain &quot;example.com&quot;.
d480 4
a483 3
included with OpenBSD, edit <tt>/etc/hostname.xl0</tt> (this is assuming your
main ethernet interface is xl0.  Yours might be ep0 or fxp0 or something
else!) All you need to put in this hostname file is '<tt>dhcp</tt>':
d485 3
a487 3
<pre>
# <strong>echo dhcp &gt;/etc/hostname.xl0</strong>
</pre>
d495 1
a495 1
If you want to start a dhcp client from the command line, make sure
d498 3
a500 3
<pre>
# <strong>dhclient fxp0</strong>
</pre>
d503 1
a503 1
Where <tt>fxp0</tt> is the interface that you want to receive dhcp on.
d506 1
a506 1
No matter how you start the dhclient, you can edit the
d512 1
a512 1
<pre>
d515 33
a547 1
</pre>
d550 15
a564 2
and then <b>remove</b> domain-name-servers.  Of course, you may want to
remove hostname, or other settings too.
d1484 1
a1484 1
The <a name="faq4.html#bsd.rd">bsd.rd install kernel</a> will now boot.
d1888 1
a1888 1
<small>$OpenBSD: faq6.html,v 1.217 2005/02/04 04:20:58 joel Exp $</small>
@


1.217
log
@mention quagga as a valid routing daemon. suggested by Dries
Schellekens.


ok nick@@
@
text
@d1747 2
a1748 3
That would probably be 
<a href="http://bradknowles.typepad.com/considered_harmful/2004/09/openntpd.html">Brad
Knowles</a>.
d1836 1
a1836 1
<small>$OpenBSD: faq6.html,v 1.216 2005/02/04 03:40:50 joel Exp $</small>
@


1.216
log
@hostname.if(5) is read from netstart(8), not rc(8)

fix copyright while here.

ok nick@@
@
text
@d373 3
a375 2
and <a href="http://www.zebra.org">zebra</a>.  OpenBSD has support in
the ports collection for zebra and mrtd.
d1837 1
a1837 1
<small>$OpenBSD: faq6.html,v 1.215 2005/02/02 04:37:18 joel Exp $</small>
@


1.215
log
@mention openbgpd as viable routing daemon; remove references to gated; small grammar fix while here


ok nick@@
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2004 by OpenBSD.">
d388 1
a388 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&amp;sektion=8">/etc/rc(8)</a>
d1836 1
a1836 1
<small>$OpenBSD: faq6.html,v 1.214 2005/01/23 01:30:58 nick Exp $</small>
@


1.214
log
@
Can't use x.x.x.0 in the host address if the netmask is 255.255.255.0
directly from Joel Knight, thanks!
@
text
@d369 2
a370 1
possible uses of OpenBSD as a router, using software such as
d372 1
a372 1
<a href="http://www.gated.org">gated</a>, <a href="http://www.mrtd.net">mrtd</a>,
d374 3
a376 1
the ports collection for zebra, gated and mrtd.  OpenBSD supports
d1836 1
a1836 1
<small>$OpenBSD: faq6.html,v 1.213 2005/01/22 22:05:30 nick Exp $</small>
@


1.213
log
@
Cleanup work, directly from Joel Knight, thanks!
@
text
@d244 1
a244 1
inet 172.21.0.0 255.255.255.0 NONE vlan 2 vlandev fxp1
d1833 1
a1833 1
<small>$OpenBSD: faq6.html,v 1.212 2005/01/06 02:23:31 nick Exp $</small>
@


1.212
log
@
Tag errors, typo.  Spotted by Tobias Stoeckmann, thanks!
@
text
@d381 1
a381 1
OpenBSD has a simple mechanism for setting up ip aliases on an
d492 1
a492 1
Where '<tt>fxp0</tt> is the interface that you want to receive dhcp on.
d659 1
a659 1
this by adding another tag under our <b>default:</b> section. This tag
d661 1
a661 1
ISP.  Here I will use <b>myisp:</b> as our tag referring to our ISP.
d1225 2
a1226 2
to let all traffic in and out of the ep0 interface, but filter on the
fxp0 interface, using keep state to handle the reply data:
d1410 1
a1410 1
If you simply type "<tt>bsd.rd</tt> here, you will then fetch the 
d1615 1
a1615 1
rachael# <strong>sysctl net.inet.carp.preempt=1</strong>
d1621 1
a1621 1
pris# <strong>ifconfig carp0 advskew 100</strong>
d1642 2
a1643 3
rachael# <strong>ifconfig carp1 create</strong>
rachael# <strong>ifconfig carp1 vhid 2 advskew 100 pass bryant
192.168.0.7</strong>
d1650 3
a1652 3
pris# <strong>ifconfig create carp1</strong>
pris# <strong>ifconfig carp1 vhid 2 pass bryant 192.168.0.7</strong>
pris# <strong>sysctl net.inet.carp.preempt=1</strong>
d1833 1
a1833 1
<small>$OpenBSD: faq6.html,v 1.211 2005/01/04 17:13:17 jmc Exp $</small>
@


1.211
log
@remove 6.8 (pptp) and replace w/ more general ppp variations section,
added at the end of 6.5 (ppp);

lots of tweaks and ok nick@@
@
text
@d792 3
a794 3
<li>PPPoE</a>
<li>PPPoA</a>
<li>PPTP</a>
d833 1
a833 1
The Point to Point Tunnelling Protocol (PPTP) is a proprietary Microsoft
d1834 1
a1834 1
<small>$OpenBSD: faq6.html,v 1.210 2004/12/25 04:14:39 nick Exp $</small>
@


1.210
log
@
Suggested wording and punctuation improvements from Paul Janzen (pjanzen
at foatdi dot net), thanks!
@
text
@a39 1
<li><a href= "#PPTP"  >6.8 - Setting up a PPTP connection in OpenBSD</a>
d783 62
a1096 112
<p>
<a name="PPTP"></a>
<h2>6.8 - Setting up a PPTP connection in OpenBSD</h2>

<p>
<strong>NOTE:</strong> This does not apply to <strong>ALL</strong> ADSL
providers, but much information can be gleaned from the setup here. This
is known to work for <a href="http://www.inode.at">Inode</a>, an ADSL
provider in Austria and <a href="http://www.kpn.nl">KPN</a> in the
Netherlands.

<p>
To start off, you need to install pptp. The port is located at 
<i>/usr/ports/net/pptp</i>. Read <a href="faq8.html#Ports">FAQ 8, 
Ports</a> for more information on the OpenBSD ports tree.

<p>
While not actually using a
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&amp;sektion=4">gre(4)</a>
device, PPTP uses GRE encapsulation. To allow the kernel to accept incoming GRE
encapsulated packets, issue the following command:
<blockquote><pre>
# sysctl net.inet.gre.allow=1
</pre></blockquote>
And add the following line to your <i>/etc/sysctl.conf</i> file:
<blockquote><pre>
net.inet.gre.allow=1
</pre></blockquote>
which makes the above change upon each reboot.

<p>
After you have the <b>pptp</b> package installed and edited
<i>/etc/sysctl.conf</i>, you need to edit a few files to setup for your
connection. This packages uses the in-house OpenBSD
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a>,
so if you are familiar with ppp(8), much of the setup is the same. Also,
refer to <a href="#PPP">FAQ 6, PPP</a>.

<ul>
<li>1 - /etc/ppp/options
<li>2 - /etc/ppp/pap-secrets
</ul>

<p>
For the <i>/etc/ppp/options</i> file, a setup like below will most likely
do all that you need:

<blockquote><pre>
# <strong>cat /etc/ppp/options</strong>
name "LOGINNAME"
noauth
noipdefault
defaultroute
debug
</pre></blockquote>

<p>
<tt>LOGINNAME</tt> should be replaced with your User-ID.

<p>
The <i>/etc/ppp/pap-secrets</i> a line like:

<blockquote><pre>
# <strong>cat /etc/ppp/pap-secrets</strong>
LOGINNAME 10.0.0.138 PASSWORD
</pre></blockquote>

<p>
Where LOGINNAME is your User-ID and PASSWORD is your password.
10.0.0.138 is the IP assigned to your MODEM in the case that you are
using ADSL, etc. Make sure this file stays readonly by root (mode 600).

<p>
<h3>6.8.1 - Assigning an address to your Network Interface</h3>

<p>
In the above example, our modem came with a preconfigured interface of
10.0.0.138. We now need to assign an address to OUR interface. It's best
to pick an IP close to the one given by your MODEM, or use the static IP
assigned to you. Read more about setting up interfaces in 
<a href="#Setup">FAQ 6, Setup</a>.

<p>
Once your interface is setup, you should be able to create a pptp
connection with the command:

<blockquote><pre>
# <strong>/usr/local/sbin/pptp 10.0.0.138 &amp;</strong>
</pre></blockquote>

<p>
Since this uses the in-house OpenBSD ppp(8), two processes are started.
You can kill pptp by killing both these processes:

<blockquote><pre>
# <strong>kill -9 [pid of pppd]</strong>
$ <strong>kill -9 [pid of pptp]</strong>
</pre></blockquote>

<p>
It is recommended to open <tt>/var/log/messages</tt> in an extra terminal
window, to recognize possible problems.

<blockquote>
<pre>
# <strong>tail -f /var/log/messages</strong>
</pre></blockquote>

<p>
We also suggest that you put the startup command in <i>/etc/rc.local</i>
so that you automatically connect on reboot.

d1834 1
a1834 1
<small>$OpenBSD: faq6.html,v 1.209 2004/12/22 02:27:16 nick Exp $</small>
@


1.209
log
@
Requested by Henning, djm's response to NTPD being "harmful".
@
text
@d1807 1
a1807 1
If having as many people using time synchronization is valuable, OpenNTPD 
d1812 2
a1813 2
There are almost certainly applications where the ntp.org ntpd is 
more appropriate, however it is felt that for the other 95% of the 
d1885 1
a1885 1
<small>$OpenBSD: faq6.html,v 1.208 2004/12/10 10:33:42 jmc Exp $</small>
@


1.208
log
@small update for 6.5 (ppp);
ok nick@@
@
text
@d1816 5
d1885 1
a1885 1
<small>$OpenBSD: faq6.html,v 1.207 2004/12/03 03:35:16 nick Exp $</small>
@


1.207
log
@
It may not be obvious that "grossly incorrectly set" may be only a couple
minutes off. Just set your clocks really close, or be really patient.
@
text
@d588 2
a589 2
Point-to-Point Protocol is generally what is used to create a connection to
your ISP via your modem. OpenBSD has 2 ways of doing this.
d593 1
a593 1
 - Which is the kernel ppp daemon.
d595 1
a595 1
 - Which is the userland ppp daemon. 
d599 7
a605 1
The first one we will cover will be the userland PPP daemon. To start
d610 1
a610 1
<li>Your ISP's dialup number
d618 1
a618 1
your ppp. The userland PPP daemon uses the file 
a624 8
Also make sure that if you're not using a GENERIC kernel, you
have this line in your configuration file:

<blockquote><pre><strong>
pseudo-device   tun
</strong></pre></blockquote>

<p>
d630 1
a630 1
there is a file <i>/etc/ppp/ppp.conf.sample</i> in which you can simply
d654 1
a654 1
dialup connection and with &quot;set dial&quot; we set our dialup
d680 1
a680 1
option &quot;set phone&quot; sets your ISP's dialup number. The
d722 26
d763 5
a767 3
Using <i>/usr/sbin/ppp</i> with no options will put you into
interactive mode. From here you can interact directly with the modem; it
is great for debugging problems in your <i>ppp.conf</i> file.
a783 6
Extended information can be found at
<a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/userppp.html">FreeBSD 
Handbook entry on User PPP</a>. 


<p>
d1880 1
a1880 1
<small>$OpenBSD: faq6.html,v 1.206 2004/11/20 22:08:39 nick Exp $</small>
@


1.206
log
@
typo/spello.  Spotted by Lawrence Teo, thanks!
@
text
@d1752 1
a1752 1
as ntpd(8) adjusts your clock slowly using 
d1754 4
a1757 3
-- it may take many hours (or days or even longer) to synchronize a
grossly incorrectly set clock (<i>-current</i> will immediately set the
clock on boot).
d1860 1
a1860 1
<small>$OpenBSD: faq6.html,v 1.205 2004/11/19 15:04:57 nick Exp $</small>
@


1.205
log
@
oops.  another dhcpd -q.  Emiel van de Laar (emiel at il dot fontys dot nl)
@
text
@d1826 1
a1826 1
surplus and used market, and a few manufactures understand the value
d1859 1
a1859 1
<small>$OpenBSD: faq6.html,v 1.204 2004/11/10 17:04:37 nick Exp $</small>
@


1.204
log
@
Relocate "Wireless Networking Options" article to a more sane location.
@
text
@d517 1
a517 1
edit <tt>/etc/rc.conf.local</tt> so that it contains the line <tt>dhcpd_flags="-q"</tt>.
d1859 1
a1859 1
<small>$OpenBSD: faq6.html,v 1.203 2004/11/03 17:27:41 nick Exp $</small>
@


1.203
log
@
typo, make it easier to find CARP if CARP is what you are looking for.
Unfortunately, I've misplaced the e-mail with the suggestion, so thanks,
whoever you are.  index.html was sync'd accidently in 1.223 (oops).
@
text
@d45 1
d1795 51
d1859 1
a1859 1
<small>$OpenBSD: faq6.html,v 1.202 2004/10/30 15:51:38 canacar Exp $</small>
@


1.202
log
@-q to dhcpd is not used anymore, ok nick@@
@
text
@d43 1
a43 1
<li><a href= "#CARP">6.11 - The Common Address Redundancy Protocol</a>
d1468 1
d1470 1
a1470 1
<h2>6.11 - The Common Address Redundancy Protocol</h2>
d1739 1
a1739 1
is controlled with a easy to understand configuration file,
a1794 3



d1807 1
a1807 1
<small>$OpenBSD: faq6.html,v 1.201 2004/10/29 17:26:01 nick Exp $</small>
@


1.201
log
@
Updates for 3.6
@
text
@d555 1
a555 1
     # <b>dhcpd -q fxp0</b>
a564 1
The <tt>-q</tt> flag makes dhcpd(8) quiet; otherwise it is very noisy.
d1809 1
a1809 1
<small>$OpenBSD: faq6.html,v 1.200 2004/10/20 23:04:26 nick Exp $</small>
@


1.200
log
@
make "OpenBSD" logo on top of page a "click back" to the OpenBSD home page.
(about time!)
@
text
@d44 1
d179 1
a179 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4&amp;manpath=OpenBSD+3.5">pflog</a>
d1455 1
a1455 1
    OpenBSD 3.5 (RAMDISK_CD) #25: Thu Mar 19 23:16:56 EST 2004
d1466 1
a1466 1
Yes, although with the tools currently in OpenBSD 3.5, PXE booting is
d1715 81
d1810 1
a1810 1
<small>$OpenBSD: faq6.html,v 1.199 2004/10/19 03:20:04 krw Exp $</small>
@


1.199
log
@Recommend editing rc.conf.local rather than rc.conf, just as it is
recommended in rc.conf(8).

Fix a sektion=5 in one link to rc.conf(8).

ok nick@@
@
text
@d17 3
a19 1
<img alt="[OpenBSD]" height=30 width=141 src="../images/smalltitle.gif">
d1728 1
a1728 1
<small>$OpenBSD: faq6.html,v 1.198 2004/10/13 13:41:03 nick Exp $</small>
@


1.198
log
@
Make it a bit more clear that PXE uses /etc/boot.conf, just like all
the other boot loaders.
@
text
@d513 2
a514 2
edit <tt>/etc/rc.conf</tt>.  Set it up so that <tt>dhcpd_flags="-q"</tt>
instead of <tt>dhcpd_flags=NO</tt>.  Put the interfaces that you want
a861 1
NFS depends upon
d863 2
a864 4
to be running before it will operate.  Portmap(8) is now off by
default on OpenBSD 3.2 and later, so you must enable it in
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">rc.conf(8)</a>
by changing the <tt>portmap</tt> line to read:
d869 4
a872 1
and reboot to make it take effect. 
d907 2
a908 2
options included.) Next, you should set <tt>nfs_server=YES</tt> in
<i>/etc/rc.conf</i>. This will bring up both nfsd(8) and mountd(8) when
d1726 1
a1726 1
<small>$OpenBSD: faq6.html,v 1.197 2004/09/28 20:27:50 nick Exp $</small>
@


1.197
log
@
New article: 6.11 - Common Address Redundancy Protocol  (#CARP)
Originally written by Sunny Raspet <slr@@mordac.info>.  Published first
on Newsforge, rights have reverted back to Sunny, and he's kindly given
it to OpenBSD with a "BSD license".  Many thanks!
@
text
@d1405 1
a1405 1
>boot.conf</a>, a boot configuration file.
d1408 1
a1408 1
Note that <tt>boot.conf</tt> is only needed if the kernel you wish to
d1410 1
a1410 1
as you need them.
d1726 1
a1726 1
<small>$OpenBSD: faq6.html,v 1.196 2004/09/25 12:41:11 nick Exp $</small>
@


1.196
log
@
Minor rework of #DHCP, inspired by a couple issues pointed out by Tobias
Stoeckmann (tobias at bugol dot de), and a few things that irritated me.
@
text
@d41 1
d1466 246
d1726 1
a1726 1
<small>$OpenBSD: faq6.html,v 1.195 2004/09/14 07:39:24 otto Exp $</small>
@


1.195
log
@missing )
@
text
@d34 1
a34 1
<li><a href= "#DHCP"  >6.4 - Dynamic Host Configuration Protocol</a>
d453 6
a458 1
<h2>6.4 - DHCP</h2> 
d468 1
a468 1
else!) All you need to put in this hostname file is '<tt>dhcp</tt>'
d481 1
a481 1
/etc/dhclient.conf exists, then try:
d488 1
a488 1
Where fxp0 is the interface that you want to receive dhcp on.
d492 1
a492 1
/etc/dhclient.conf file to <b>not</b> update your DNS according to the
d547 1
a547 1
/etc/dhcpd.conf, try:
d1309 1
a1309 1
from the network, rather than from a hard disk, a floppy or a CDROM.
d1479 1
a1479 1
<small>$OpenBSD: faq6.html,v 1.194 2004/09/10 07:07:58 otto Exp $</small>
@


1.194
log
@Typo from Antoine Jacoutot
@
text
@d1334 1
a1334 1
<tt>bsd</tt> or <a href="faq4.html#bsd.rd"><tt>bsd.rd</tt></a> from the
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.193 2004/09/06 14:12:44 saad Exp $</small>
@


1.193
log
@typo from Antoine Jacoutot <ajacoutot _at lphp _dot_ org>. Thanks!
@
text
@d21 1
a21 1
<a href="faq5.html">[To Section 5 - Building the System from Source</a>
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.192 2004/08/19 15:28:50 nick Exp $</small>
@


1.192
log
@
-w is optional for sysctl since 3.5 and no longer needed, and was
annoying, so remove from FAQ.
Thanks to krw@@, tom@@, jolan@@, jmc@@, jaredy@@ and probably 20 other
people whos messages will get to me after they clear spamd...
@
text
@d560 1
a560 1
the client a 'WINS' server address.  To make this happen, just the
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.191 2004/08/19 13:37:28 nick Exp $</small>
@


1.191
log
@
missing -w on sysctl line.  From nickus at nickus dot net, thanks!
@
text
@d359 1
a359 1
# <strong>sysctl -w net.inet.ip.forwarding=1</strong>
d779 2
a780 2
other) parameters.  To change one, use <tt>sysctl -w</tt>, as in
<tt>sysctl -w net.inet.tcp.keepidle=28800</tt>.
d794 1
a794 1
<tt>sysctl -w net.inet.ip.directed-broadcast=1</tt> turns this on.  Read
d812 1
a812 1
 #  <strong>sysctl -w  net.inet.tcp.baddynamic=749,750,751,760,761,871</strong>
d816 2
a817 2
 #  <strong>sysctl -w net.inet.tcp.baddynamic=+748</strong>
 #  <strong>sysctl -w net.inet.tcp.baddynamic=-871</strong>
d1029 1
a1029 1
# sysctl -w net.inet.gre.allow=1
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.190 2004/08/04 15:44:11 nick Exp $</small>
@


1.190
log
@
Screwed up links, on spotted by Dick Davies, rasputnikAThellooperatorDOTnet
the other spotted by me while looking over Dick's change.
@
text
@d1029 1
a1029 1
# sysctl net.inet.gre.allow=1
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.189 2004/07/26 04:35:10 david Exp $</small>
@


1.189
log
@more a->an; ok nick@@ jolan@@ jmc@@
@
text
@d40 1
a40 1
<li><a href=" #PXE"   >6.10 - How do I boot using PXE?</a>
d1394 1
a1394 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=boot&amp;sektion=8"
d1396 1
a1396 1
<li><a href="#bsd.rd">bsd.rd</a>, the install kernel or <tt>bsd</tt>,
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.188 2004/06/14 15:47:21 nick Exp $</small>
@


1.188
log
@
PXE booting can be started by floppy sometimes, too.
@
text
@d1107 1
a1107 1
It is recommended to open <tt>/var/log/messages</tt> in a extra terminal
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.187 2004/06/11 21:15:16 otto Exp $</small>
@


1.187
log
@No need to recompile a kernel to use pptp, use sysctl to allow gre packets.
Help from markus@@; ok nick@@
@
text
@d1309 4
a1312 1
Many older NICs support network booting but do NOT support PXE;
d1315 2
d1474 1
a1474 1
<small>$OpenBSD: faq6.html,v 1.186 2004/05/31 01:34:21 nick Exp $</small>
@


1.186
log
@
Language clean-up and update, from jmc@@
@
text
@d1015 2
a1016 1
provider in Austria.
d1024 1
a1024 1
Because of a conflict between the In-Kernel 
d1026 8
a1033 21
support and pptp, you will need to re-compile your kernel, removing
support for gre(4).

<blockquote>Patch to remove GRE(4) support.
<pre>
Index: GENERIC
===================================================================
RCS file: /cvs/src/sys/conf/GENERIC,v
retrieving revision 1.105
diff -u -r1.105 GENERIC
--- GENERIC	3 May 2004 17:41:22 -0000	1.105
+++ GENERIC	27 May 2004 08:18:26 -0000
@@@@ -96,7 +96,7 @@@@
 pseudo-device	bridge		# network bridging support
 pseudo-device	carp		# CARP protocol support
 pseudo-device	gif		# IPv[46] over IPv[46] tunnel (RFC1933)
-pseudo-device	gre		# GRE encapsulation interface
+#pseudo-device	gre		# GRE encapsulation interface
 pseudo-device	loop		# network loopback
 pseudo-device	ppp		# PPP
 pseudo-device	sl		# CSLIP
d1035 1
d1038 3
a1040 9
To recompile your kernel, check out OpenBSD source via cvs (refer to <a
href="../anoncvs.html">AnonCVS</a> web page for more information), apply
the patch above, and rebuild your kernel as per <a
href="faq5.html#Building">FAQ 5, Building a kernel</a>.

<p>
After you have the <b>pptp</b> package installed and a new kernel, you
need to edit a few files to set up your connection. This package
uses the in-house OpenBSD
d1469 1
a1469 1
<small>$OpenBSD: faq6.html,v 1.185 2004/04/30 18:02:51 nick Exp $</small>
@


1.185
log
@
New PXE booting section, checkover and help tom@@,
update for 3.5.
@
text
@d579 1
a579 1
Point-to-Protocol is generally what is used to create a connection to
d607 1
a607 1
situations. You should take a browse though that directory.
d610 1
a610 1
Also, make sure, that if you're not using a GENERIC kernel, that you
d614 1
a614 1
pseudo-device   tun             2
d625 2
a626 4
simplist setup and probably most used setup.  Here is a quick
<i>ppp.conf</i> file that will simply connect to your ISP and set your
default routes and nameserver. With this file all the information you
need is your ISP's phone number and your username and password.
d634 1
a634 1
set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK ATE1Q0 OK\\dATDT\\T TIMEOUT 40 CONNECT"
d639 3
a641 3
The section under the <tt>default:</tt> tag will get executed each time.
Here we setup all our critical information. Here with &quot;set
log&quot; we set our logging levels. This can be changed; refer to
d652 1
a652 1
Now we can move on and setup our information specific to our ISP. We do
d654 1
a654 1
can be called anything you want, easiest to just use the name of your
d657 1
a657 1
connected.
d672 1
a672 1
Here we have setup essential info for that specific ISP. The first
d676 5
a680 2
seconds if no carrier. Otherwise it will wait for &quot;login:&quot; to
be sent and send in your username and password. In this example our
d695 1
a695 1
bits of this ip address need to match and the whole thing can be
d718 1
a718 1
Now that we have our <i>ppp.conf</i> file setup we can start trying to
d720 1
a720 1
with ppp.
d730 2
a731 2
By using <i>/usr/sbin/ppp</i> with no options will put you into
interactive mode. From here you can interact directly with the modem, it
d740 1
a740 1
situations. <i>/etc/ppp/ppp.linkup</i> and <i>/etc/ppp/ppp.linkdown</i>.
d1033 13
a1045 13
retrieving revision 1.86
diff -u -r1.86 GENERIC
--- GENERIC     14 Mar 2002 00:42:25 -0000      1.86
+++ GENERIC     17 May 2002 01:52:17 -0000
@@@@ -87,7 +87,7 @@@@
 pseudo-device  enc     1       # option IPSEC needs the encapsulation interface
 pseudo-device  bridge  2       # network bridging support
 pseudo-device  vlan    2       # IEEE 802.1Q VLAN
-pseudo-device  gre     1       # GRE encapsulation interface
+#pseudo-device gre     1       # GRE encapsulation interface
 #pseudo-device strip   1       # Starmode Radio IP interface

 pseudo-device  pty     64      # pseudo-terminals
d1051 1
a1051 1
the following patch, and rebuild your kernel as per <a
d1056 1
a1056 1
need to edit a few files to setup for your connection. This packages
d1486 1
a1486 1
<small>$OpenBSD: faq6.html,v 1.184 2004/02/06 01:07:52 nick Exp $</small>
@


1.184
log
@
"is" is missing.  Thanks, Ido {Nuuskamuikkunen} (rhingael at start dot no)
@
text
@d40 1
d148 2
d175 1
a175 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4&amp;manpath=OpenBSD+3.4">pflog</a>
d193 2
d1317 155
d1485 1
a1485 1
<small>$OpenBSD: faq6.html,v 1.183 2004/01/15 23:54:26 nick Exp $</small>
@


1.183
log
@
Frequently Suggested Addition: "touch /var/db/dhcpd.leases" before manually
invoking dhcpd.  Most recently from Alexander Farber.
@
text
@d1159 1
a1159 1
machines on this rack is an OpenBSD-based terminal server which always
d1325 1
a1325 1
<small>$OpenBSD: faq6.html,v 1.182 2004/01/01 04:13:34 nick Exp $</small>
@


1.182
log
@
bump copyright to 2004
@
text
@d540 1
d545 6
a550 1
Where <tt>fxp0</tt> is an interface that you want to start serving DHCP on.
d1325 1
a1325 1
<small>$OpenBSD: faq6.html,v 1.181 2003/11/12 23:39:58 nick Exp $</small>
@


1.181
log
@
Renumber error, spotted by Okan Demirmen (okan+openbsd at demirmen dot com)
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2003 by OpenBSD.">
d1319 1
a1319 1
<small>$OpenBSD: faq6.html,v 1.180 2003/10/31 04:46:29 nick Exp $</small>
@


1.180
log
@
kill the one remaining </p> in the FAQ. (no text changes)
@
text
@d1085 1
a1085 1
<h3>6.9.1 - Assigning an address to your Network Interface</h3>
d1319 1
a1319 1
<small>$OpenBSD: faq6.html,v 1.179 2003/10/30 22:43:42 nick Exp $</small>
@


1.179
log
@
FAQ updates for OpenBSD 3.4.  Lots of help from lots of people, but
special thanks to Tom Cosgrove who provided many improvements and
proofreading.
@
text
@a116 1
</p>
d1319 1
a1319 1
<small>$OpenBSD: faq6.html,v 1.178 2003/09/09 02:08:41 nick Exp $</small>
@


1.178
log
@
Some wrapping and tag improvements.  Not complete, but they were
bothering me before some new work.  No words were changed.
@
text
@d31 3
a33 3
<li><a href= "#Intro" >6.0.1 - Before we go any further</a>
<li><a href= "#Setup" >6.1 - Initial network setup</a>
<li><a href= "#PF"    >6.2 - Packet Filter (PF)</a>
d38 2
a39 2
<li><a href= "#PPTP"  >6.9 - Setting up a PPTP connection in OpenBSD</a>
<li><a href= "#Bridge">6.10 - Setting up a bridge with OpenBSD</a>
d46 1
a46 1
<h2>6.0.1 - Before we go any further</h2>
d80 1
a80 1
<h2>6.1 - Initial Network Setup</h2>
d84 1
a84 1
<h3>6.1.1 - Identifying and Setting Up Your Network Interfaces</h3>
d173 1
a173 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4&amp;manpath=OpenBSD+3.3">pflog</a>
d322 1
a322 1
<h3>6.1.2 - Setting up your OpenBSD box as a Gateway</h3>
d370 1
a370 1
<h3>6.1.3 - Setting up aliases on an interface</h3>
d437 1
a437 1
<h2>6.2 - Packet Filter (PF)</h2>
d441 4
a444 3
providing bandwidth control and packet prioritization. PF has been a
part of the GENERIC OpenBSD kernel since OpenBSD 3.0.  It is described
in the new <a href="pf/index.html"><b>PF User's Guide</b></a>.
a445 2
<p>
The old PF FAQ is still available <a href="faq6pf.html">here</a>.
d998 1
a998 1
<h2>6.9 - Setting up a PPTP connection in OpenBSD</h2>
d1127 1
a1127 1
<h2>6.10 - Setting up a network bridge in OpenBSD</h2>
a1228 1
<!-- XXXchanges - changes with OpenBSD 3.3 -->
d1320 1
a1320 1
<small>$OpenBSD: faq6.html,v 1.177 2003/07/25 20:05:19 nick Exp $</small>
@


1.177
log
@
clean up other faq13.html references
@
text
@d65 2
a66 1
especially when you deal with or are responsible for more than one network.
d240 4
a243 4
The next step from here is to setup your default gateway. To do this, simply put
the IP of your gateway in the file <i>/etc/mygate</i>. This will allow
for your gateway to be set upon boot. From here you should setup your
nameservers, and your <i>/etc/hosts</i> file (see the
d284 4
a287 4
If you are having routing problems, you may want to use the -n flag
to route(8) which prints the IP addresses rather than doing a DNS
lookup and displaying the hostname.
Here is an example of viewing your routing tables using both programs.
d331 2
a332 2
addresses from network service providers and regional registries, you may
want to look at Network Address Translation for information on
d456 5
a460 4
To use the DHCP client <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient&amp;sektion=8">dhclient(8)</a>
included with OpenBSD, edit /etc/hostname.xl0
(this is assuming your main ethernet interface is xl0.  Yours might be ep0 or fxp0 or something else!)
All you need to put in this hostname file is 'dhcp'
d467 3
a469 2
This will cause OpenBSD to automatically start the DHCP client on boot.  OpenBSD will gather its IP address,
default gateway, and DNS servers from the DHCP server.  
d483 5
a487 5
No matter how you start the dhclient, you can edit
the /etc/dhclient.conf file to <b>not</b> update your DNS according to the dhcp
server's idea of DNS by first uncommenting the 'request' lines in it (they are
examples of the default settings, but you need to uncomment them to override
dhclient's defaults.)
d495 2
a496 2
and then <b>remove</b> domain-name-servers.  Of course, you may want to remove
hostname, or other settings too.
d502 5
a506 3
If you want to use OpenBSD as a DHCP server <A href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd&amp;sektion=8">dhcpd(8)</a>,
edit /etc/rc.conf.  Set it up so that dhcpd_flags="-q" instead of dhcpd_flags=NO.
Put the interfaces that you want dhcpd to <b>listen</b> on in /etc/dhcpd.interfaces.
d513 1
a513 1
Then, edit /etc/dhcpd.conf.
d528 3
a530 2
This will tell your DHCP clients that the domain to append to DNS requests is example.com (so, if the user types in 'telnet joe' then it will
send them to joe.example.com).  It will point them to DNS servers
d532 4
a535 2
an ethernet interface on the OpenBSD machine, which is in the 192.168.1.0/24 range, it will assign them an IP address between
192.168.1.32 and 192.168.1.127.  It will set their default gateway as 192.168.1.1.
d538 2
a539 2
If you want to start dhcpd(8) from the command line, after editing /etc/dhcpd.conf,
try:
d550 3
a552 3
If you are serving DHCP to a Windows box, you may want
dhcpd(8) to give the client a 'WINS' server address.
To make this happen, just the following line to your /etc/dhcpd.conf:
d559 4
a562 3
(where <tt>192.168.92.55</tt> is the IP of your Windows or Samba server.)
See <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcp-options&amp;sektion=5">dhcp-options(5)</a> for more options that your DHCP
clients may want.
d645 6
a650 4
Now we can move on and setup our information specific to our ISP. We do this by adding another tag under our
<b>default:</b> section. This tag can be called anything you want, easiest to just use the name of your ISP.
Here I will use <b>myisp:</b> as our tag referring to our ISP. Here is a simple setup incorporating all we need
to get ourselves connected.
d778 3
a780 1
are using your OpenBSD box as a router.<P>
d783 4
a786 3
This is another sysctl.  <Tt>sysctl -w net.inet.ip.directed-broadcast=1</tt> 
turns this on.  Read about <a href="http://www.netscan.org">smurf attacks</a>
if you want to know why it is off by default.
d789 2
a790 1
<h3>6.6.3 - I don't want the kernel to dynamically allocate a certain port</h3>
d793 2
a794 1
There is a sysctl for this also.  From <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>:
d833 5
a837 5
recommend that you employ IPsec.  Otherwise,
people can potentially see your NFS traffic.  Someone could also pretend
to be the IP address which you are allowing into your NFS server.  There
are several attacks that can result.  When properly configured, IPsec
protects against these types of attacks.
d1152 7
a1158 6
One of my computer racks has a number of older systems, none of which have
a built-in 10BASE-TX NIC.  While they all have an AUI or AAUI connector,
my supply of transceivers is limited to coax.  One of the
machines on this rack is an OpenBSD-based terminal server which always on
and connected to the high-speed network.  Adding a second NIC with a 
coax port will allow me to use this machine as a bridge to the coax network.
d1253 4
a1256 4
Now, let's say I wish to filter traffic hitting these old machines, I want 
only Web and SSH traffic to reach them.  In this case, we are going to let
all traffic in and out of the ep0 interface, but filter on the fxp0
interface, using keep state to handle the reply data:
d1277 1
a1277 1
interface.  
d1322 1
a1322 1
<small>$OpenBSD: faq6.html,v 1.176 2003/07/23 01:53:01 nick Exp $</small>
@


1.176
log
@
remove old numeric targets (<a name="1.3">).  No text changes.
@
text
@d817 1
a817 1
recommend that you employ <a href="faq13.html">IPsec</a>.  Otherwise,
d1305 1
a1305 1
<small>$OpenBSD: faq6.html,v 1.175 2003/07/17 19:22:25 nick Exp $</small>
@


1.175
log
@
Remove #DNS article.
  OpenBSD 3.3 now includes BIND9, not BIND4, and I'm tired of the
trickle of messages from people who missed the intro saying "The
following section was for those running 3.2 and before...", and I don't
wish to punish the innocent by putting it in <blink></blink>. 8-)
  No, I am not interested in a new BIND9 article.  BIND4 was not
well documented elsewhere, so a BIND4 article in the FAQ was
appropriate.  BIND9 is well documented in print and on the web.  DNS,
like Sendmail and many other things, is a very complicated topic, and
really needs more than a few paragraphs to cover; I don't want people
reading a few paragraphs and thinking they are ready to serve DNS to the
Internet.
  Of course, the old version will live on forever in CVSWEB.
@
text
@a45 1
<a name="6.0.1"></a>
a78 1
<a name="6.1"></a>
a82 1
<a name="6.1.1"></a>
a320 1
<a name="6.1.2"></a>
a368 1
<a name="6.1.3"></a>
a448 1
<a name= "6.4"></a> 
a557 1
<a name="6.5"></a>
a734 1
<a name="6.6"></a>
a796 1
<a name="6.7"></a>
a982 1
<a name="6.9"></a>
d1305 1
a1305 1
<small>$OpenBSD: faq6.html,v 1.174 2003/07/06 16:04:04 nick Exp $</small>
@


1.174
log
@
Correct bad URL.  From Joel Knight.
@
text
@a37 1
<li><a href= "#DNS"   >6.8 - Domain Name Service  - DNS, BIND, and named</a>
a989 601

<p>
<a name="DNS"></a>
<a name="6.8"></a>
<h2>6.8 - Domain Name Service  - DNS, BIND, and named</h2>

<p>
<i>Note: The following section was written for OpenBSD 3.2 and before,
which included BIND4.  OpenBSD v3.3 now includes BIND9, which is more 
thorougly documented in print and on the Internet than the previous 
BIND 4 was.</i>

<p><i>As with OpenBSD's BIND4,
BIND9 on OpenBSD is run in a chroot(2), and has a number of security
improvements over the standard BIND9:
</i>
<ul>
<li><i>arc4random() support (integrated in 9.3.0-snapshot)</i>
<li><i>call tzset before chroot</i>
<li><i>open /dev/null before chroot</i>
<li><i>fall back to system default random device when running chroot</i>
<li><i>add LCG (Linear Congruential Generator) implementation to libisc</i>
<li><i>use LCG instead of LFSR for ID generation until LFSR is proven reliable</i>
<li><i>IPv{4,6} query transport selection for dig(1)</i>
<li><i>fixed sha1.c to work around gcc optimization bug (sparc64)</i>
<li><i>chroot to <tt>/var/named</tt> by default</i>
<li><i>setuid to user <tt>named</tt> by default</i>
<li><i>write pid-file before chroot</i>
</ul>
<i>OpenBSD 3.3 users will wish to look at: </i>
<ul>
<li><i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=named&amp;sektion=8">named(8)</a></i>
<li><i><a href="http://www.openbsd.org/cgi-bin/cvsweb/~checkout~/src/usr.sbin/bind/doc/arm/Bv9ARM.html"
>BIND 9 Administrator Reference Manual</a> (These pages are also
available in the <tt>/usr/share/doc/html/bind/</tt> directory on your
installed system)</i>
</ul>

<h3>6.8.1 What is DNS?</h3>
Domain Name Service is a network facility allowing IP network domains to
provide name-to-IP address resolution and IP address-to-name resolution
in response to a query. Your OpenBSD installation is configured by
default as a DNS client but not as a DNS server. That is, your OpenBSD
installation can perform a DNS query against a domain name server for
the address of a machine, but it cannot answer such DNS queries itself
unless you specifically configure it to do so.

<p>
My OpenBSD machine is currently connected to the Internet via my ISP, so
I can use the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&amp;sektion=8">nslookup(8)</a>
utility to execute the DNS query:

<blockquote><pre>
$ <strong>nslookup www.openbsd.org</strong>
Server:  ns4.us.prserv.net
Address:  165.87.201.244

Non-authoritative answer:
Name:    www.openbsd.org
Address:  129.128.5.191
</pre></blockquote>

<p>
<b>165.87.201.244</b> is the name server which answered, because it is
the nameserver that my ISP told me to use with my account and whose
number is entered in
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5">/etc/resolv.conf</a>.
But the answer was not authoritative. For an authoritative answer, let's
find which is the authoritative DNS server for the <i>openbsd.org</i>
domain and ask it for the address of <i>www.openbsd.org</i>:

<blockquote><pre>
# Identify the name servers for openbsd.org
# with the help of my ISP's name server.
$ <strong>nslookup -type=NS openbsd.org</strong>
Server:  ns4.us.prserv.net
Address:  165.87.201.244

Non-authoritative answer:
openbsd.org     nameserver = cvs.openbsd.org
openbsd.org     nameserver = gandalf.sigmasoft.com
openbsd.org     nameserver = cs.colorado.edu
openbsd.org     nameserver = ns.appli.se
openbsd.org     nameserver = zeus.theos.com

Authoritative answers can be found from:
cvs.openbsd.org internet address = 199.185.137.3
gandalf.sigmasoft.com   internet address = 198.144.202.98
cs.colorado.edu internet address = 128.138.243.151
ns.appli.se     internet address = 194.198.196.230
zeus.theos.com  internet address = 199.185.137.1

# Use the info gained to query for an authoritative
# resolution: query the authoritative zeus.theos.com.
$ <strong>nslookup www.openbsd.org zeus.theos.com</strong>
Server:  zeus.theos.com
Address:  199.185.137.1

Name:    www.openbsd.org
Address:  129.128.5.191
</pre></blockquote>

<p>
<i>zeus.theos.com</i> is, one would suppose, running OpenBSD and is
properly configured to be a DNS server for the <i>openbsd.org</i>
domain.

<p>
<a name="DNS.1.1"></a>
<a name="6.8.1.1"></a>
<h3>6.8.1.1 Where can I learn all about DNS and its implementation under
OpenBSD?</h3>

<ul>
<li>See RFCs <a href="http://www.faqs.org/rfcs/rfc1033.html">1033</a>, 
<a href="http://www.faqs.org/rfcs/rfc1034.html">1034</a>, and 
<a href="http://www.faqs.org/rfcs/rfc1035.html">1035</a> for more
information on the Internet name-domain system.
<li>Read the O'Reilly Associates book <i><a href="../books.html#6">DNS
and BIND</a></i>.
<li>Read the <a href="http://www.openbsd.org/cgi-bin/man.cgi">OpenBSD Manual</a> especially the pages for
  <ul>
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a>
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&amp;sektion=8">nslookup(8)</a>
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gethostbyname&amp;sektion=3">gethostbyname(3)</a>
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=named&amp;sektion=8">named(8)</a>
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&amp;sektion=3">resolver(3)</a>
  <li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&amp;sektion=5">resolver(5)</a>
  </ul>
</ul>

<p>
The
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a>
command is especially useful, because it can query a domain and return
information in much the same record format as required in BIND
configuration files. You can use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a>
to examine name servers you know to be operating properly as a way of
comparing your setup to theirs.

<p>
<h3>6.8.2 Does my machine need to be a domain name server?</h3>

<p>
If you aren't sure that you need your machine to perform the role of DNS
server, don't configure it as one. The OpenBSD installation does not, by
default, activate your machine as a domain name server, though all
necessary files are installed. For most workstations, just the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5">/etc/hosts</a>
file naming local machines' IP addresses and the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5">/etc/resolv.conf</a>
file for indicating which DNS servers serve you out on the intranet or
internet is sufficient.

<p>
On the other hand, you might need to set up a machine as a domain name
server:

<ul>
<li>If you have an IP LAN on which you do not wish to replicate "hosts"
files of local addresses machine by machine. In such a case, you may
configure your OpenBSD machine as a DNS server and serve queries from
the other machines on your LAN.
  <ul>
  <li><b>Note:</b> There is no practical restriction on the number of
  DNS servers on a LAN. Any or all machines on the LAN may offer DNS
  service if they are so configured. Whether any such server is
  considered authoritative from outside your LAN (or is even known from
  outside your LAN) is a configuration factor that typically is
  controlled at the next level up from your LAN in the domain hierarchy.
  </ul>
<li>If you have an IP LAN on which reside machines you will wish to be
findable via DNS query by machines on another IP LAN or WAN.
<li>If you experience difficulties resolving the local hostname to an IP
address, or resolving other local names to IP addresses even though you
have correct <i>/etc/hosts</i> and <i>/etc/resolv.conf</i> (E.g.,
Netscape on OpenBSD sometimes exhibits this behavior because it
implements its own resolver instead of just using
<i>gethostbyname(3)</i> to look up addresses.)
</ul>

<p>
One more consideration is speed of execution. Since name resolution is
an iterative process, in which the name server makes repeated queries to
other nameservers for addresses in remote domains, name resolution may
take slightly longer if you have a modem connection to the Internet and
are querying your own DNS server for remote addresses (which will then
iteratively query remote name servers via the modem) than if you are
querying your ISP's name server (which probably has a faster connection
to remote name servers).

<p>
<h3>6.8.3 What are the software components of the DNS server?</h3>

<ul>
<li>named <i>("name daemon")</i>
<li>Configuration files in the directory hierarchy under <i>/var/named/</i>
</ul>

<p>
<h4>6.8.3.1 What level of BIND is supported?</h4>
<!-- XXXchanges - changes with OpenBSD 3.3 -->

<p>
BIND is the name of the behavioral specification of a domain name
server. Domain name server components exist to collectively implement
BIND.

<p>
There are three distinct BIND specifications:

<ol>
<li>BIND 4
<li>BIND 8
<li>BIND 9
</ol>

<p>
As installed, OpenBSD <b>named</b> supports BIND 4.x.

<p>
<h4>6.8.3.2 What are some of the alternatives to providing DNS via the
default BIND 4.x implementation?</h4>
<!-- XXXexpires - goes away when 3.2 becomes unsupported -->

<ul>
<li>The BIND 9.x implementation in <i>/usr/ports/net/bind9</i>.(See
<a href="../ports.html">ports</a>)
</ul>

<p>
<h5>6.8.3.2.1 <u>Security</u> note</h5>

<p>
If you use these alternative implementations of domain name service, you
are providing a critical network service using software which may not
have been subject to quite the same level of scrutiny as the
<a href="http://www.openbsd.org/security.html">security-audited</a>
<b>named</b> name daemon in the base installation. This is a significant
consideration, since if a domain name server is compromised, resolvers
using that name server can be re-directed to impostor sites.

<p>
<h3>6.8.4 How much do I have to install?</h3>

<p>
If the default networking setup was installed properly at OpenBSD
installation time, everything is already installed. You just have to
configure the name daemon ("<tt>named</tt>").

<p>
<h3>6.8.5 How do I configure DNS?</h3>
<!-- XXXchanges - changes with OpenBSD 3.3 -->

<p>
You configure OpenBSD DNS by editing and/or creating files that control
the name daemon <tt>named</tt>. These files reside by default in the
directory <i>/var/named</i> and its subdirectories, especially the file
<i>/var/named/named.boot</i> which is the initialization file for
<b>named</b>. There are also a couple of other configuration steps to be
taken in <i>/etc</i>.

<p>
In this document, we will configure the name daemon on
<i>nemo.yewtopia.com</i> be the primary nameserver for the (very small!)
domain <i>yewtopia.com</i>. The address of <i>nemo.yewtopia.com</i> is
<i>192.168.1.9</i>. Two other machines are on that subnet,
<i>crater.yewtopia.com </i>at 192.168.1.1 and
<i>earhart.yewtopia.com</i> at 192.168.1.2.

<p>
<h4>6.8.5.1 Configuration in <i>/var/named</i></h4>
<!-- XXXchanges - changes with OpenBSD 3.3 -->

<p>
<h5>6.8.5.1.1 <i>/var/named/named.boot</i></h5>

<blockquote><pre>
; tell what subdir has the lookup database files
directory       /namedb

; type    domain   source host/file backup file
cache     .	   root.cache
primary   0.0.127.IN-ADDR.ARPA  localhost.rev

; example primary server config:
primary  yewtopia.com yewtopia
primary  1.168.192.IN-ADDR.ARPA yewtopia.rev
</pre></blockquote>

<p>
This tells the initialization process in what subdirectory and under
which filenames to find the configuration files for <i>yewtopia.com</i>.

<p>
<h5>6.8.5.1.2 <i>/var/named/namedb/localhost.rev</i></h5>

<blockquote><pre>
; Reverse lookup for localhost interface
@@       IN      SOA     nemo.yewtopia.com.  your_id.nemo.yewtopia.com.  (
                                14      ; Serial
                                3600    ; Refresh
                                900     ; Retry
                                3600000 ; Expire
                                3600 )  ; Minimum
        IN      NS      nemo.yewtopia.com.
1       IN      PTR     localhost.yewtopia.com.
</pre></blockquote>

<p>
<h5>6.8.5.1.3 <i>/var/named/namedb/yewtopia</i></h5>

<blockquote><pre>
; yewtopia.com domain database
@@      IN      SOA     nemo.yewtopia.com.  your_id.nemo.yewtopia.com.  (
                                14      ; Serial
                                3600    ; Refresh
                                900     ; Retry
                                3600000 ; Expire
                                3600 )  ; Minimum
                     IN      NS      nemo.yewtopia.com.

; Addresses
localhost.yewtopia.com.      IN A    127.0.0.1
crater.yewtopia.com.         IN A    192.168.1.1
earhart.yewtopia.com.        IN A    192.168.1.2
nemo.yewtopia.com.           IN A    192.168.1.9
</pre></blockquote>

<p>
<h5>6.8.5.1.4 <i>/var/named/namedb/yewtopia.rev</i></h5>

<blockquote><pre>
; yewtopia domain reverse lookup database
@@      IN      SOA     nemo.yewtopia.com.  your_id.nemo.yewtopia.com.  (
                                14      ; Serial
                                3600    ; Refresh
                                900     ; Retry
                                3600000 ; Expire
                                3600 )  ; Minimum
1.168.192.in-addr.arpa. IN      NS      nemo.yewtopia.com.

; Addresses
1.1.168.192.in-addr.arpa. IN PTR crater.yewtopia.com.
2.1.168.192.in-addr.arpa. IN PTR earhart.yewtopia.com.
9.1.168.192.in-addr.arpa. IN PTR nemo.yewtopia.com.
</pre></blockquote>

<p>
<h4>6.8.5.2 Configuration in <i>/etc</i></h4>

<p>
<h5>6.8.5.2.1 <i>/etc/resolv.conf</i></h5>

<p>
Make sure <i>/etc/resolv.conf</i> now points to the domain of the local
machine (instead of, for example, your ISP's name server) so that name
resolution requests actually get sent to the <b>named</b> you have
configured!

<blockquote><pre>
domain yewtopia.com
lookup file bind
</pre></blockquote>

<p>
<h4>6.8.5.2.2 <i>/etc/hosts</i></h4>

<p>
If you previously had added the addresses of various machines to the
<i>/etc/hosts</i> file, you might consider shortening your
<i>/etc/hosts</i> file back to the default:

<blockquote><pre>
# Host addresses
127.0.0.1       localhost       localhost.localdomain
192.168.1.9     nemo            nemo.yewtopia.com
</pre></blockquote>

<p>
So that <b>named</b> isn't bypassed in favor of (possibly outdated)
addresses in the <i>/etc/hosts</i> file. <u>Make sure you have at least
the default <i>localhost</i> entry</u> or your network won't start
properly! Note also <i>nemo</i> must appear in its own hosts file or you
will see a (mostly harmless) error message at bootup when
<i>/etc/netstart</i> invokes 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&amp;sektion=8">route(8)</a>
in order to add <i>nemo</i> (whose name appears in <i>/etc/myname</i>).

<p>
<h4>6.8.5.3 Using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a>
 to examine the results.</h4>

<blockquote><pre>
$ <strong>dig @@nemo.yewtopia.com yewtopia.com any any</strong>

; &lt;&lt;&gt;&gt; DiG 2.2 &lt;&lt;&gt;&gt; @@nemo.yewtopia yewtopia any any
; (1 server found)
;; res options: init recurs defnam dnsrch
;; got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 59904
;; flags: qr rd ra; Ques: 1, Ans: 2, Auth: 0, Addit: 1
;; QUESTIONS:
;;      yewtopia.com, type = ANY, class = ANY

;; ANSWERS:
yewtopia.com.   3600    SOA    nemo.yewtopia.com.  your_id.nemo.yewtopia.com. (
                        14      ; serial
                        3600    ; refresh (1 hour)
                        900     ; retry (15 mins)
                        3600000 ; expire (41 days 16 hours)
                        3600 )  ; minimum (1 hour)
yewtopia.com.   3600    NS      nemo.yewtopia.com.

;; ADDITIONAL RECORDS:
nemo.yewtopia.com.  3600    A       192.168.1.9

;; Total query time: 4 msec
;; FROM: nemo to SERVER: nemo.yewtopia.com  192.168.1.9
;; WHEN: Tue May  2 23:47:19 2000
;; MSG SIZE  sent: 25  rcvd: 102
</pre></blockquote>

<p>
<h3>6.8.6 How and when do I start and stop DNS?</h3>

<p>
<h4>6.8.6.1 Starting DNS</h4>

<p>
The name daemon <b>named</b> is launched during system startup from
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&amp;sektion=8">/etc/rc</a>
if the line installed by default in
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">/etc/rc.conf</a>.

<blockquote><pre>
named_flags=NO          # for normal use: ""
</pre></blockquote>

<p>
is changed to

<blockquote><pre>
named_flags=""          # for normal use: ""
</pre></blockquote>

<p>
Also, examine these lines in /etc/rc.conf:

<blockquote><pre>
named_user=named                # Named should not run as root unless necessary
named_chroot=/var/named         # Where to chroot named if not empty
</pre></blockquote>

<p>
These defaults will be correct for nearly all setups.

<p>
To start <b>named</b> by hand, use the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&amp;sektion=8">ndc(8)</a>
command. For example:

<blockquote><pre>
# <strong>ndc start</strong>
          or
# <strong>ndc restart</strong>
</pre></blockquote>

<p>
<h4>6.8.6.2 Stopping DNS</h4>

<p>
The best way to stop the name daemon is to use the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&amp;sektion=8">ndc(8)</a>
command. For example:

<blockquote><pre>
# <strong>ndc stop</strong>
</pre></blockquote>

<p>
If this fails to work, find the process id of named and use the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kill&amp;sektion=1">kill(1)</a>
command to end that process. The PID for <b>named</b> while it is
running is found as the first line in the file
<i>/var/named/named.pid</i>:

<blockquote><pre>
# <strong>cat /var/named/named.pid</strong>
4608
named -t /var/named -u named
# <strong>kill -KILL 4608</strong>
</pre></blockquote>

<p>
<h4>6.8.6.3 Restarting DNS with an altered configuration</h4>

<p>
To cause a running instance of the name daemon to restart itself
reloading its configuration after you have made changes, send it a
"hangup" signal:

<blockquote><pre>
# <strong>kill -HUP 4608</strong> 
</pre></blockquote>

<p>
or by using the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&amp;sektion=8">ndc(8)</a> 
command. For example:

<blockquote><pre>
# <strong>ndc reload</strong>
</pre></blockquote>

<p>
<h3>6.8.7 How do I block AXFR queries? </h3>

<p>
example:

<blockquote><pre>
garden:/home/jeremy$<strong>  host -l openssh.com</strong>
openssh.com.            NS      zeus.theos.com.
openssh.com.            NS      cvs.openbsd.org.
openssh.com.            NS      gandalf.sigmasoft.com.
openssh.com.            NS      cs.colorado.edu.
openssh.com.            NS      ns.appli.se.
openssh.com.            A       199.185.137.4
cvs.openssh.com.        A       199.185.137.4
localhost.openssh.com.  A       127.0.0.1
</pre></blockquote>

<p>
This information is useful for debugging DNS, but in some instances you
may not want this output publicly offered.  If you are using classless
in-addr(rfc2317) for reverse, host -l may report every domain that your
system hosts!  This can easily be remedied by the 'allow-transfer'
clause in your zone file.

<br><br>

If you're using Bind8 you need to specify the hosts you want to allow to
transfer zones in your individual zone file(s):

<blockquote><pre>
zone "foo.com" in {
        type master;
        file "directory/zonefile";
        allow-transfer {
          127.0.0.1;
          10.0.0.6;
          10.0.255.12;
        };
};
</pre></blockquote>

<p>
You can also block transfers for all domains by editing /var/named.conf
and add the 'allow-transfer' parameter to the 'options' section of the
configuration file:

<blockquote><pre>
   options {
        allow-transfer { 127.0.0.1; };
    };
</pre></blockquote>

<p>
The Bind8 method also works with Bind9.<br>
If you are using Bind 4 (default in OpenBSD) you can edit
/var/named/named.boot and use the 'xfrnets' option.

<blockquote><pre>
xfrnets 209.142.221.5 12.7.96.7
; type    domain                source host/file                backup file
cache     .                                                     root.cache
primary   0.0.127.IN-ADDR.ARPA  localhost.rev
</pre></blockquote>

<p>
Bind 4 allows transfers from entire classes so it is not as exact.
Typically, the only hosts that need to perform transfers are your DNS
slaves and hosts you may want to debug from (127.0.0.1 is usually a good
host to allow transfers from!) Blocking AXFR queries adds an extra level
of privacy, but can hinder useful DNS debugging.  (Thanks to
<a href="mailto:ntang@@nachtwache.org">Nicholas Tang</a> for that tip.)

<p>
<h3>6.8.8 What didn't you tell me about setting up DNS?</h3>

<p>
There's a lot we didn't tell you, for example, how to set up DNS so that
queries for intranet domains that aren't visible from the root of the
domain hierarchy get relayed to servers within your enterprise. Read the
<a href="#DNS.1.1">documents we recommended</a> for more information on
DNS.


d1315 1
a1315 1
<small>$OpenBSD: faq6.html,v 1.172 2003/05/20 01:27:45 nick Exp $</small>
@


1.173
log
@
Inconsistancy...  Spotted by Michal Slocinski, brought to my attention
by Joel Knight.  Thanks!
@
text
@d72 1
a72 1
<a href="http://the.rfceditor.org/rfc.html">reading the RFCs</a>.
@


1.172
log
@
Typo; thanks Joel Knight.
@
text
@d133 1
a133 1
        inet 192.168.1.35 netmask 0xffffff00 broadcast 192.168.1.255
d1917 1
a1917 1
<small>$OpenBSD: faq6.html,v 1.171 2003/05/05 22:18:48 nick Exp $</small>
@


1.171
log
@
Huh.  Broke validation on the 3.3 commit.  Oops.
@
text
@d447 1
a447 1
part of the GENERIC OpenBSD kernel since OpenBSD 3.0.  It is discribed
d1917 1
a1917 1
<small>$OpenBSD: faq6.html,v 1.170 2003/05/05 22:02:49 nick Exp $</small>
@


1.170
log
@
Relocate the old faq6.html PF/NAT content out to its own file, point
people at the new PF User's guide.
@
text
@d124 1
a124 1
lo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 33224
d128 2
a129 2
lo1: flags=8008<LOOPBACK,MULTICAST> mtu 33224
fxp0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST> mtu 1500
d135 12
a146 12
pflog0: flags=0<> mtu 33224
pfsync0: flags=0<> mtu 2020
sl0: flags=c010<POINTOPOINT,LINK2,MULTICAST> mtu 296
sl1: flags=c010<POINTOPOINT,LINK2,MULTICAST> mtu 296
ppp0: flags=8010<POINTOPOINT,MULTICAST> mtu 1500
ppp1: flags=8010<POINTOPOINT,MULTICAST> mtu 1500
tun0: flags=10<POINTOPOINT> mtu 3000
tun1: flags=10<POINTOPOINT> mtu 3000
enc0: flags=0<> mtu 1536
bridge0: flags=0<> mtu 1500
bridge1: flags=0<> mtu 1500
vlan0: flags=0<> mtu 1500
d148 1
a148 1
vlan1: flags=0<> mtu 1500
d150 5
a154 5
gre0: flags=9010<POINTOPOINT,LINK0,MULTICAST> mtu 1450
gif0: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
gif1: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
gif2: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
gif3: flags=8010<POINTOPOINT,MULTICAST> mtu 1280
d1001 1
a1001 1
BIND 4 was.
d1003 1
a1003 1
<p>As with OpenBSD's BIND4,
d1006 1
d1008 11
a1018 11
<li>arc4random() support (integrated in 9.3.0-snapshot)
<li>call tzset before chroot
<li>open /dev/null before chroot
<li>fall back to system default random device when running chroot
<li>add LCG (Linear Congruential Generator) implementation to libisc
<li>use LCG instead of LFSR for ID generation until LFSR is proven reliable
<li>IPv{4,6} query transport selection for dig(1)
<li>fixed sha1.c to work around gcc optimization bug (sparc64)
<li>chroot to <tt>/var/named</tt> by default
<li>setuid to user <tt>named</tt> by default
<li>write pid-file before chroot
d1020 1
a1020 1
OpenBSD 3.3 users will wish to look at: 
d1022 2
a1023 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=named&amp;sektion=8">named(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/cvsweb/~checkout~/src/usr.sbin/bind/doc/arm/Bv9ARM.html"
d1026 1
a1026 1
installed system)
a1027 1
</blockquote> </i>
d1917 1
a1917 1
<small>$OpenBSD: faq6.html,v 1.169 2003/05/01 01:47:41 nick Exp $</small>
@


1.169
log
@
Updated FAQ for OpenBSD 3.3.
@
text
@a33 1
<li><a href= "#NAT"   >6.3 - Network Address Translation</a>
d440 1
a440 1
<a name="6.2"></a>
d443 6
a448 454
<!-- XXXrelease -->

<p>
The Packet Filter subsystem, which was introduced in OpenBSD 3.0,
performs two tasks: dealing with packet level forwarding permissions,
and mapping hosts/subnets to a range of external addresses.
The configuration file for this service is
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">/etc/pf.conf(5)</a></i>. 

<p>
(Note: in OpenBSD 3.0 and 3.1 there was an additional configuration file,
<i>/etc/nat.conf</i>.
Its functions are now incorporated into <i>/etc/pf.conf</i>.)

<p>
The
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5"><i>/etc/pf.conf(5)</i></a>
file has four parts:

<ul>
<li><b>Options:</b> Various options to control how PF works.
<li><b>Scrub:</b> Reprocessing packets to normalize and defragment
  them.
<li><b><a href="#NAT">NAT and Redirection Rules:</a></b> NAT allows many machines to access
  the Internet through one IP address.  Redirection allows incoming
  requests to be forwarded to a particular machine behind the NAT.
<li><b>Filter Rules:</b> Allows the selective filtering or blocking
  of packets as they pass through any of the interfaces.
</ul>

None of these sections are required to exist, but those that do must 
be in the above order.

<p>
To start these services with your system, you need to edit
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">/etc/rc.conf(8)</a></i>
and set the line to:

<blockquote><pre>
pf=YES
</pre></blockquote>

<p>
If you are using NAT, you will most likely also need to set
the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>
value <tt>net.inet.ip.forwarding</tt> to 1. You can do this by
uncommenting the relevant lines in 
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&amp;sektion=5">/etc/sysctl.conf(5)</a></i>
and rebooting your computer.

<p>
If you have Packet Filter compiled into your kernel, but you
don't have it turned on in your
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">/etc/rc.conf(8)</a></i>
file, you can still activate it with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+3.3">pfctl(8)</a> command.

<blockquote><pre>
# <b>pfctl -f /etc/pf.conf</b>
# <b>pfctl -e</b>
</pre></blockquote>

<p>
The first line sets up filtering and NAT, using <i>/etc/pf.conf</i> and
the second line activates PF.

<p>
This can also be combined into one command line:

<blockquote><pre>
# <strong>pfctl -f /etc/pf.conf -e</strong>
</pre></blockquote>

<p>
If you make changes to <i>/etc/pf.conf</i> after 
PF is started, you can reload your rules by reloading the 
file:

<blockquote><pre>
# <b>pfctl -f /etc/pf.conf</b>
</pre></blockquote>

<p>
This document will cover some basic 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">pf.conf(5)</a>
configurations below.  You can also look at the <a href="#sample_pf.conf">resulting 
ruleset</a> that includes all the tweaks explained below in more detail.
You can find other Packet Filter information
at the <a href="http://www.benzedrine.cx/pf.html">Packet Filter web site</a> 
and in the 
<a href="http://www.inebriated.demon.nl/pf-howto/">Packet Filter HOWTO</a>. 

<p>
<h3>Packet Filter</h3>

<p>
In order to enable Packet Filter at boot, you will need to 
modify <i>/etc/rc.conf</i> so that it reads <tt>pf=YES</tt>.  Packet Filter (pf)
is controlled by <i>/etc/pf.conf</i>, which is read at boot. For a 
more detailed explanation, see 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">pf.conf(5)</a>. 
In the examples that follow, <tt>fxp0</tt> will represent the external 
interface to the internet. It will be different for you, 
based on the ethernet adapter present in your computer. These 
rules will assume full-time internet connectivity, such as 
you would see on a webserver.

<p>
Packet Filter rules are processed sequentially from top to bottom; 
it helps to visualize each packet having to traverse every 
rule before it reaches its destination.

<p>
For example, the default ruleset provided allows all packets 
to travel in, and all packets to travel out:

<blockquote><pre>
pass out all 
pass in all
</pre></blockquote>

<p>
This is shorthand, for:

<blockquote><pre>
pass in from any to any
pass out from any to any
</pre></blockquote>

<p>
which can be read as &quot;pass incoming packets from any source to 
any destination&quot;, with an implied &quot;on any interface (which is 
always implied if a specific interface isn't specified) of any
address family, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inet&amp;sektion=4">inet (v4)</a> or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inet6&amp;sektion=4">inet6 (v6)</a>&quot;.

<p>
Obviously, this isn't much of a filter.  More useful filtering
will be based on the address family (IPv4 or IPv6), protocol(s) 
and port(s) used by the services
you wish to filter.  Any of the protocols listed in
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5">/etc/protocols(5)</a></i>
can be specified, by either name or number, but we will
concern ourselves with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4">tcp(4)</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4">udp(4)</a> and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4">icmp(4)</a>.

<p>
Now let's say we don't want to allow any incoming IPv4 connections to 
TCP port 3306 (MySQL) because the database should only be connected 
to from localhost. Our ruleset would look like this:

<blockquote><pre>
pass out all
pass in all
block in on fxp0 inet proto tcp from any to any port 3306
</pre></blockquote>

<p>
This says &quot;block in all IPv4 (inet) incoming packets, from 
any source to 
any destination bound for tcp port 3306.&quot;  Note that 
it is required that you specify a protocol with any port-based
filter, and recommended that you specify the address family.  
For services defined in the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5">/etc/services(5)</a>
file, you can also use the service names, such as <em>www</em>
or <em>mysql</em>.
A packet destined for tcp port 3306 on interface 
<tt>fxp0</tt> will pass the first &quot;pass in&quot; rule and then 
be dropped by the &quot;block 
in port 3306&quot; rule. If you reversed the order of our 
incoming rules (remember, order is important):

<blockquote><pre>
pass out all
block in on fxp0 inet proto tcp from any to any port 3306
pass in all
</pre></blockquote>

<p>
Packets destined for tcp port 3306 would pass because the last rule 
in the set allows all packets to pass. It is important to keep 
this in mind when writing packet filter rules:
<b>The last matching rule wins</b>.

<p>
Of course, there are exceptions to every rule. The <em>quick</em> 
option drops the packet at the first rule that matches. Let's 
look at our above flawed example, if we add <em>quick</em> to 
the &quot;block in&quot; rule:

<blockquote><pre>
pass out all
block in quick on fxp0 inet proto tcp from any to any port 3306
pass in all
</pre></blockquote>

<p>
A packet destined for our host on tcp port 3306 will hit the 
&quot;block in quick&quot; rule and be dropped immediately. All 
packets destined for other ports or protocols won't find a rule match until 
they reach our &quot;pass in&quot; rule that allows all packets 
to pass.

<p>
<b>Default Deny</b>
<p>
The safest packet filtering policy is a default deny policy. 
All traffic not explicitly allowed is denied. This policy is far 
safer than explicitly denying each protected service, allows for 
smaller rulesets, and can protect from an accidentally 
misconfigured service that has been left exposed.

<p>
Let's now look at another example ruleset and explain 
things line by line. Here's an example for a webserver with a 
default deny policy that only allows ssh connections (for 
administration) and connections to http (port 80) and https 
(port 443).

<blockquote><pre>
block in on fxp0 all
pass  in on fxp0 inet proto tcp from any to any port 22
pass  in on fxp0 inet proto tcp from any to any port 80
pass  in on fxp0 inet proto tcp from any to any port 443
pass out on fxp0 all
</pre></blockquote>

<p>
This will allow incoming connections from anywhere to tcp ports 
22(ssh), 80(http), and 443(https). It will drop all other 
connection attempts, and allow all outgoing connections. This 
is a pretty tight ruleset.  But what if you only wanted to 
allow internal hosts on your 1.1.1.0 address block to connect 
to ssh, but allow outside connections to http and https?

<blockquote><pre>
block in on fxp0 all
pass  in on fxp0 inet proto tcp from 1.1.1.0/24 to any port 22
pass  in on fxp0 inet proto tcp from any to any port 80
pass  in on fxp0 inet proto tcp from any to any port 443
pass out on fxp0 all
</pre></blockquote>

<p>
Pretty good, but what if we only want to allow one machine 
(1.1.1.1) to administer the web server remotely?
In that case, we can change this:

<blockquote><pre>
pass  in on fxp0 inet proto tcp from 1.1.1.0/24 to any port 22
</pre></blockquote>

<p>
to this:

<blockquote><pre>
pass  in on fxp0 inet proto tcp from 1.1.1.1/32 to any port 22
</pre></blockquote>

<p>
<b>Sample Rules</b>
<p>
Here are some good rules for everyone to use (assuming that 
fxp0 is the external internet-connected interface). First we 
will set up a simple address spoofing protection.  These addresses
shouldn't (normally) be floating around the Internet, 
and if they are, it is rarely good, so we block them:

<blockquote><pre>
block in quick on fxp0 inet from { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 } to any
block out quick on fxp0 inet from any to { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 }
</pre></blockquote>

<p>
Our ruleset is starting to look pretty good; when we put 
it together, here is what it looks like:

<blockquote><pre>
# don't allow anyone to spoof non-routeable addresses
block in quick on fxp0 inet from { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 } to any
block out quick on fxp0 inet from any to { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 }

# only allow our administration machine to connect via ssh
pass in quick on fxp0 inet proto tcp from 1.1.1.1/32 to any port 22

# allow others to use http and https
pass in quick on fxp0 inet proto tcp from any to any port 80
pass in quick on fxp0 inet proto tcp from any to any port 443

# finally lock the rest down with a default deny
block in quick on fxp0 from any to any

# and let out-going traffic out
pass out on fxp0 from any to any
</pre></blockquote>

<p>
<b>Packet Logging</b>
<p>
Now that's pretty good, but it could be better. What if we want to 
log any connection attempts to port 22(ssh) that get blocked by 
our firewall? Easy, Packet Filter can handle this with the <em>log</em> keyword:

<blockquote><pre>
pass in quick on fxp0 inet proto tcp from 1.1.1.1/32 to any port 22
block in log quick on fxp0 inet proto tcp from any to any port 22
</pre></blockquote>

<p>
This rule will allow our remote administration machine to connect 
to port 22, but deny and log all other attempts to connect to 
port 22.

<p>
Logged packets are sent to the pflog0 interface, which is monitored
by 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.3">pflogd(8)</a>,
which typically dumps the packets to <i>/var/log/pflog</i> in 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.3">tcpdump(8)</a>
binary format.  pflogd(8) is started by default by
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&amp;sektion=8">/etc/rc(8)</a></i>
if pf is enabled in
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">/etc/rc.conf(8)</a></i>.
You can read these log files using the following command:

<blockquote><pre>
# <b>tcpdump -n -e -ttt -r /var/log/pflog</b>
</pre></blockquote>

<p>
One should be aware that using tcpdump to watch the pflog file does 
NOT give a real-time display.  If you wish a real-time display, you 
can use this command:

<blockquote><pre>
# <b>tcpdump -i pflog0</b>
</pre></blockquote>

<p>
One could also use tcpdump to narrow down the focus to facilitate
debugging:

<blockquote><pre>
# <b>tcpdump -e -i pflog0 port 80</b>
</pre></blockquote>

<p>
Doing this does NOT impact the data that is put to the file 
<i>/var/log/pflog</i>.  

<p>
When examining one's logs, especial care should be taken
with tcpdump's verbose protocol decoding (activated via the -v command
line option).  Tcpdump's protocol decoders do not have a perfect
security history.  At least in theory, a delayed attack could be
possible via the partial packet payloads recorded by the logging
device.

<p>
Additional care should be taken about access to the logs.  Pflogd
will capture 96 bytes of the packet and log it.  Access to the logs
could provide partial access to sensitive packet payloads (like
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=telnet&amp;sektion=1">telnet(1)</a> or
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp&amp;sektion=1">ftp(1)</a> logins).

<p>
<b>Packet Logging through syslog</b>
<p>
In many situations it is desirable to have the firewall logs available
in ASCII format and/or to send them to a remote logging server.
All this can be accomplished with 2 small shell scripts and with minor changes
of the OpenBSD configuration files.

<p>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=syslogd&amp;sektion=8&amp;manpath=OpenBSD+3.3">Syslogd(8)</a>
is the standard daemon for logging, it logs in ASCII and is also able
to log to a remote logging server.

<p>
First we have to create a user <em>pflogger</em> with a .nologin. shell.
The easiest way to create this user is with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=adduser&amp;sektion=8&amp;manpath=OpenBSD+3.3">adduser(8)</a>.

<p>
After creating the user <em>pflogger</em> create the following two scripts:

<p>
<i>/etc/pflogrotate</i>

<blockquote><pre>
FILE=/home/pflogger/pflog5min.$(date "+%Y%m%d%H%M")
kill -ALRM $(cat /var/run/pflogd.pid)
if [ $(ls -l /var/log/pflog | cut -d " " -f 8) -gt 24 ]; then
        mv /var/log/pflog $FILE
        chown pflogger $FILE
        kill -HUP $(cat /var/run/pflogd.pid)
fi
</pre></blockquote>


<p>
<i>/home/pflogger/pfl2sysl</i>

<blockquote><pre>
#!/bin/sh
# feed rotated pflog file(s) to syslog
for logfile in /home/pflogger/pflog5min* ; do
        tcpdump -n -e -ttt -r $logfile | logger -t pf -p local0.info
        rm $logfile
done
</pre></blockquote>

<p>
Edit the cron job for user <em>root</em>

<blockquote><pre>
# <b>crontab -u root -e</b>
</pre></blockquote>

<p>
and add the following two lines:

<blockquote><pre>
# rotate pf log file every 5 minutes
0-59/5 *       *       *       *       /bin/sh /etc/pflogrotate
</pre></blockquote>

<p>
Create a cron job for user <em>pflogger</em>

<blockquote><pre>
# <b>crontab -u pflogger -e</b>
</pre></blockquote>

<p>
and add the following two lines:

<blockquote><pre>
# feed rotated pflog file(s) to syslog
0-59/5 *       *       *       *       /bin/sh /home/pflogger/pfl2sysl
</pre></blockquote>

<p>
Add the following line to <i>/etc/syslog.conf</i>:

<blockquote><pre>
local0.info    /var/log/pflog.txt
</pre></blockquote>
d451 1
a451 1015
If you want to log to a remote log server also add the line:

<blockquote><pre>
local0.info    @@syslogger
</pre></blockquote>

<p>
and make sure host <i>syslogger</i> has been defined in the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5&amp;manpath=OpenBSD+3.3">
/etc/hosts(5)</a> file.

<p>
All logged packets are sent to <i>/var/log/pflog.txt</i>.
If the second line is added too they are sent to the remote logging host
<i>syslogger</i> as well.

<p>
<i>/etc/pflogrotate</i> now processes and then deletes <i>/var/log/pflog</i>
so rotation of <i>pflog</i> by
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newsyslog&amp;sektion=8&amp;manpath=OpenBSD+3.3">
newsyslogd(8)</a> is no longer necessary and it should be
disabled. However <i>/var/log/pflog.txt</i> replaces <i>/var/log/pflog</i> and rotation of it
should be activated.
Change <i>/etc/newsyslog.conf</i> as follows:

<blockquote><pre>
#/var/log/pflog        600     3       250     *       ZB      /var/run/pflogd.pid
/var/log/pflog.txt     600     7       *       24
</pre></blockquote>

<p>
Pf will now log in ASCII to /var/log/pflog.txt. If so configured in
<em>/etc/syslog.conf</em> it will also log to a remote server.
The logging is not immediate but
it can take up to about 5-6 minutes (the cron job interval) before the logged
packets appear in the file.

<p>
<b>Multiple Protocols</b>
<p>
What if we need to allow connections to a service running 
over multiple protocols, such as bind, which uses TCP and UDP? 
Packet filter lets you lump options together into sets  
(more on this later): 

<blockquote><pre>
# Pass DNS traffic for BIND
pass in quick on fxp0 inet proto { tcp, udp } from any to any port 53
</pre></blockquote>

<p>
Notice the spaces on both sides of the '{ }' characters.  This is 
neater than the alternative you might otherwise have to use:

<blockquote><pre>
pass in quick on fxp0 inet proto tcp from any to any port 53
pass in quick on fxp0 inet proto udp from any to any port 53
</pre></blockquote>

<p>
<a name="normalization"></a>
<b> Packet Normalization</b>
<p> 
Packet Normalization means reassembling fragmented packets and clearing IP
options.
Some OSs and applications have trouble with abnormal or fragmented packets,
and it's in general good to have normalized packets for the filter rules to
look at and for the destination hosts to look at.
Thus, it is nearly always beneficial to normalize the
packets before they are passed on to their ultimate destination.
This is done with the <b>scrub</b> directive, used as here:

<blockquote><pre>
scrub in all
</pre></blockquote>

<p>
This does put a very minor additional load on the system, and requires a bit of
memory to cache the packet fragments. The advantages of packet normalization
almost always outweigh this cost.

<p>
<b>IP Options</b>
<p>
By default, PF blocks packets with IP options set.  This can make
the job more difficult for &quot;OS fingerprinting&quot; utilities
like nmap.  If you have an application that requires the passing of 
these packets, such as multicast or IGMP, you can use the 
<b>allow-opts</b>
directive:

<blockquote><pre>
pass in quick on fxp0 all allow-opts
</pre></blockquote>

<p>
<b>TCP Flags, established connections and keeping state</b>
<p>
Packet Filter can also filter packets based on TCP flags and 
maintain established connections and connection state. It is 
recommend that all users who wish to filter packets based on 
TCP flags understand what role each flag plays. For instance, 
if you wanted to deny all packets with the FIN, URG, and PSH 
flags set (like for instance an nmap OS fingerprinting attempt) 
you could use a rule like this:

<blockquote><pre>
block in quick on fxp0 inet proto tcp from any to any flags FUP/FUP
</pre></blockquote>

<p>
(Thanks to <a href="mailto:halogen@@nol.net">Kyle Hargraves</a> for that tip)

<p>
Packet Filter's next cool trick is its ability to maintain state. 
Maintaining state has been described as &quot;not speaking until 
spoken to&quot;; in other words, once a connection is established, 
packets no longer have to traverse rulesets. This is a very 
powerful feature allowing much simpler and more secure rule 
writing.

<p>
For example, let's see how we can apply state to our previous 
example ruleset (confused yet?). To review, we are allowing 
management access from our Class C to port 22(ssh) and allowing 
all incoming web traffic on ports 80(http) and 443(https). We 
are blocking all other traffic. But, what if I want to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&amp;sektion=1">ssh(1)</a>
out of the webserver? What if I need to use
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lynx&amp;sektion=1">lynx(1)</a> to look up 
something in the FAQ? Well, I can't because I have blocked all 
incoming connections other than those on the specified ports. While 
this is the safest route, it can be quite inconvenient. By 
adding the <em>keep state</em> keywords to our &quot;pass 
out&quot; rule, we can automatically allow incoming 
packets in response to connections we initiate, such as 
when web browsing.  Remember, we do need to specify what 
protocol we are keeping state for.

<blockquote><pre>
block in  on fxp0 inet proto tcp all
pass  in  on fxp0 inet proto tcp from 1.1.1.0/24 to any port 22 keep state
pass  in  on fxp0 inet proto tcp from any to any port 80 keep state
pass  in  on fxp0 inet proto tcp from any to any port 443 keep state
pass  out on fxp0 inet proto tcp all keep state
</pre></blockquote>

<p>
This little change will dramatically increase the flexibility and
security of our ruleset: for instance, in the above ruleset, we are
allowing all tcp traffic into ports 80 &amp; 443. We can tighten this up
even more. In order for a tcp connection to be established, we only need
to allow the initial handshake to occur; once that occurs, we can block
traffic to that port and allow our &quot;keep state&quot; rule to manage
the connection. To allow the initial handshake to complete, we need only
allow packets with the SYN flag set and ACK flag not set. By passing only 
packets with SYN set, we can prevent many forms of portscanning such
as FIN scanning. flags S/SA means: out of flags S (SYN) and A (ACK), only
SYN may be set. Other flags aren't investigated.
The rules now look like this:

<blockquote><pre>
block in  on fxp0 inet proto tcp all
pass  in  on fxp0 inet proto tcp from 1.1.1.0/24 to any port 22 \
	flags S/SA keep state
pass  in  on fxp0 inet proto tcp from any to any port 80 \
	flags S/SA keep state
pass  in  on fxp0 inet proto tcp from any to any port 443 \
	flags S/SA keep state
block out on fxp0 inet proto tcp all
pass  out on fxp0 inet proto tcp all flags S/SA keep state
</pre></blockquote>

<p>
Let's start to tie things together by putting all of the rules we 
have so far into a ruleset. This ruleset will support IPv4, have 
a default deny policy, allow management connections from an 
internal network only (via ssh) and allow incoming traffic on 
ports 80(http) and 443(https). It will also protect against 
spoofed non-routeable ip addresses, and drop all packets that are 
too fragmented to inspect. A pretty comprehensive setup for a public 
webserver. Here's what <i>/etc/pf.conf</i> could look like:

<blockquote><pre>
# Clean up fragmented and abnormal packets
scrub in all

# don't allow anyone to spoof non-routeable addresses
block in quick on fxp0 inet from { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 } to any
block out quick on fxp0 inet from any to { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 }

# by default, block all incoming packets, except those explicitly
# allowed by further rules
block in on fxp0 all

# allow others to use http and https
pass in on fxp0 inet proto tcp from any to any port 80 \
	flags S/SA keep state
pass in on fxp0 inet proto tcp from any to any port 443 \
	flags S/SA keep state

# and let out-going traffic out and maintain state on established connections
# pass out all protocols, including TCP, UDP and ICMP, and create state,
# so that external DNS servers can reply to our own DNS requests (UDP).
block out on fxp0                 all
pass  out on fxp0 inet proto tcp  all flags S/SA keep state
pass  out on fxp0 inet proto udp  all            keep state
pass  out on fxp0 inet proto icmp all            keep state
</pre></blockquote>

<p>
While this may look good, there are some things Packet Filter 
will let you do to make your <i>pf.conf</i> file look neater and easier
to maintain.

<p>
<b>Sets</b>
<p>
Sets are useful "shortcuts" for writing simple and clear 
rules in PF.  For example, what if we need to allow 
connections to a service running
over multiple protocols, such as BIND, which uses TCP and UDP?

<blockquote><pre>
pass in quick on fxp0 inet proto { tcp, udp } from any to any port 53
</pre></blockquote>

<p>
Note the spaces on both sides of the '{ }' characters. 

<p>
Groups of related IPs can be clustered together into sets, which 
can be used anywhere a single IP could be used.  For example, 
looking at our anti-spoofing rules above:

<blockquote><pre>
# don't allow anyone to spoof non-routeable addresses
block in quick on fxp0 inet from { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 } to any
block out quick on fxp0 inet from any to { 127.0.0.0/8, 192.168.0.0/16, \
172.16.0.0/12, 10.0.0.0/8 }
</pre></blockquote>

<p>
<b>Variable Expansion</b>
<p>
One problem with the above sample <i>pf.conf</i> file is that should
you need to change your NIC, or change an IP address, you would
need to change a number of lines.  This can be lessened by using
variable expansion:

<blockquote><pre>
NoRouteIPs="{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"
ExtIF="fxp0"
block in quick on $ExtIF from $NoRouteIPs to any
block out quick on $ExtIF from any to $NoRouteIPs
</pre></blockquote>

<p>
<a name="sample_pf.conf"></a>
<b>Putting it all together</b>
<p>
Now, let's put it all together, and look at the elegance of the file:

<blockquote><pre>
# Define useful variables
ExtIF="fxp0"              # External Interface
IntNet="1.1.1.0/24"       # Our internal network
NoRouteIPs="{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"
Services="{ www, https }"

# Clean up fragmented and abnormal packets
scrub in all

# don't allow anyone to spoof non-routeable addresses
block in  quick on $ExtIF from $NoRouteIPs to any
block out quick on $ExtIF from any to $NoRouteIPs

# by default, block all incoming packets, except those explicitly
# allowed by further rules
block in on $ExtIF all

# allow others to use http and https
pass  in on $ExtIF inet proto tcp from any to any port $Services \
	flags S/SA keep state

# and let out-going traffic out and maintain state on established connections
# pass out all protocols, including TCP, UDP and ICMP, and create state,
# so that external DNS servers can reply to our own DNS requests (UDP).
block out on $ExtIF                 all
pass  out on $ExtIF inet proto tcp  all flags S/SA keep state
pass  out on $ExtIF inet proto udp  all            keep state
pass  out on $ExtIF inet proto icmp all            keep state
</pre></blockquote>

<p>
If you experience problems, you may want to enable logging on 
individual rules to effectively troubleshoot. ie: 

<blockquote><pre>
pass in log quick on fxp0 proto tcp from 1.1.1.0/24 to any port 22
</pre></blockquote>

<p>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.3">pflogd(8)</a> will write the ip log entries to <i>/var/log/pflog</i>.
Remember that <i>/var/log/pflog</i> is a binary file, intended to be
read by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.3">tcpdump(8)</a>, NOT directly by humans.

<p>
When you modify the configuration file to log packets, don't 
forget to <b>pfctl -R /etc/pf.conf</b> for the changes to take effect! 

<a name="6.3"></a>
<a name="NAT"></a>
<h2>6.3 - NAT</h2>
<!-- XXXrelease -->

<p>
<h4>Note: For OpenBSD 3.2 and later, the NAT functions are incorporated
in the <i>/etc/pf.conf</i> file, not the separate <i>/etc/nat.conf</i>
file used in OpenBSD 3.0 and 3.1</h4>

<p>
<a name="nat1.0"></a>
<h3><u>6.3.1 NAT Introduction</u></h3>

<a name="nat1.1"></a>

<p>
Based on 
<a href="http://www.geektools.com/rfc/rfc1631.txt">RFC 1631</a>, 
NAT provides an easy way to map internal networks to a single 
routeable ("real") internet address. This is very useful if you 
don't have officially assigned addresses for every host on your 
internal network. When you set up private/internal networks, you 
can take advantage of reserved address blocks (assigned in 
<a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>), 
such as:

<p>
10.0.0.0/8 (10.0.0.0 - 10.255.255.255)<br>
172.16.0.0/12 (172.16.0.0 - 172.31.255.255)<br>
192.168.0.0/16 (192.168.0.0 - 192.168.255.255)

<p>
The user is assumed to have already set up
and configured an OpenBSD machine with two network cards (one
connected to the Internet and the other to the local network).

<p>
<a name="nat1.3"></a>
<b>Configuration</b>

<p>
For the purpose of example, we will use the system described
below. Your setup will almost certainly vary from this, so be 
very careful in typing anything you see here literally into
your system and expecting it to work as you desire.  

<blockquote>
<b>NICs: </b>
<pre>
Intel EtherExpress Pro/100 <b>fxp0</b>
Connected to the EXTERNAL LAN (or WAN)
<b>IP Address: </b>24.5.0.5
<b>Netmask: </b>255.255.255.0

Compaq Netelligent 10/100Mb <b>tl0</b>
Connected to the INTERNAL LAN
<b>IP Address: </b>192.168.1.1
<b>Netmask: </b>255.255.255.0
</pre>
</blockquote>

<blockquote>
<b>External, Internet-routeable IP (provided by ISP, in this example, a cable modem provider)<br></b>
<pre>
<b>IP Address: </b>24.5.0.5
<b>Netmask: </b>255.255.255.0
<b>Gateway: </b>24.5.0.1
</pre>
</blockquote>

<blockquote>
<b>Local Area Network</b><br>
In this example environment,
machines on the internal network use the IP addressing scheme 192.168.1.xxx
(where xxx is a unique number). There could be a variety of different
operating systems on the internal network, such as Windows 98,
Windows NT, OpenBSD and Linux, but the client OS is not an issue for NAT. 
For the examples, the client we will look at on the internal
network will be assumed to have an IP address of 192.168.1.40.
</blockquote>

<blockquote>
<b>Diagram of Configuration</b>
<pre>
+-----+              +---------+          +----------+
| Hub |--------- tl0 |   NAT   | fxp0 ----| Internet |
+-----+              +---------+          +----------+
| |
| +-- Client A
+---- More clients 

		      +--------------------------+
		      |          LEGEND          |
		      +--------------------------+
		      |  NIC fxp0 - 24.5.0.5     |
		      |  NIC tl0  - 192.168.1.1  |
		      | Client A  - 192.168.1.40 |
		      +--------------------------+

</pre>
</blockquote>

<p>
<a name="nat2.0"></a>
<h3><u>6.3.2 Network Address Translation</u></h3>

<p>
<a name="nat2.1"></a>
<b>Introduction to NAT</b>

<p>
Each node on the Internet requires a unique IP address.  At least
with IPv4, there is a very finite number of distinct IP addresses 
available, and as a result, they are not free.  Most "low-cost" ISPs
will limit a site to anywhere from 1 to 30 addresses, and while 
larger budget organizations may be able to afford a larger block, 
in most cases, there are relatively few benefits and considerable 
risks to having each computer individually addressable on the 
Internet.

<p>
Network Address Translation, or NAT, (also known as &quot;IP Masquerading&quot;
if you are coming from a Linux background) allows multiple computers
to be located &quot;behind&quot; one (or a small number of) IP address.  Each 
&quot;internal&quot; computer has a locally assigned, unregistered
IP address (per <a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>), 
and all utilize the same external IP address, simultaneously.  

<p>
The way NAT works is rather simple. When a client on the LAN
wants to connect to a machine on the Internet, it sends out a TCP
packet with a request to connect. Inside the TCP packet header is the
client's IP address (e.g. 192.168.1.40) and the requested host's IP
address (e.g. 123.45.67.89). The machine running NAT intercepts this
TCP packet and changes the client's IP address from 192.168.1.40 to
the IP address of the Internet-connected machine (e.g. 24.5.0.5). This
effectively tricks the host machine into thinking the actual connection
is from the NAT machine, not the actual client's machine. The host then
sends back responses to the NAT machine like it was the one connecting.
When the NAT machine receives the responses it quickly translates the
destination IP address back from itself to the client's machine and
sends the packet to the client. The client normally does not have any 
idea what happened and the apparent Internet connectivity is 
transparent to the user and user's applications.

<p>
The example below shows NAT a little more clearly:

<blockquote><pre>
Client ----------------- tl0 [ NAT ] fxp0 ---------- Internet Host
192.168.1.40 --- 192.168.1.1 [ NAT ] 24.5.0.5 --- 123.45.67.89

OUTGOING TCP Packet                     OUTGOING TCP Packet
From: 192.168.1.40  &gt;&gt;=== NAT ===&gt;&gt;     From: 24.5.0.5
To: 123.45.67.89                        To: 123.45.67.89

INCOMING TCP Packet                     INCOMING TCP Packet
From: 123.45.67.89 			From: 123.45.67.89
To:   192.168.1.40  &lt;&lt;=== NAT ===&lt;&lt;     To: 24.5.0.5
</pre></blockquote>

<p>
<a name="nat2.2"></a>
<b>Why use NAT?</b>

<p>
When presented with a cable modem in my new apartment I was also
presented with another minor problem. How to get Internet access for
my roommates, when the cable modem resides in my room? There were a
few options I could implement, ranging from obtaining extra IP
addresses, to setting up a proxy server, to setting up NAT.
(Don't let the home cable modem example fool you.  NAT is powerful enough
to masquerade a large network with hundreds or even thousands of computers!)

<p>
There are many reasons why I wanted to set up NAT. The number one
reason is to save money. There
are two roommates in my house; splitting the cost is certainly attractive.
Further, as each roommate has their own PC and I have three, we
had five computers to connect, but my ISP only allows for three IP 
addresses per household.  This means that there weren't enough IP 
addresses to allow every machine simultaneous direct Internet access.

<p>
By using NAT each machine will have a unique internal IP address
but share the one IP address given to me by my ISP. The cost goes down.

<p>
<a name="nat2.4"></a>
<b>Setup</b>

<p>
In order to enable NAT on your OpenBSD machine you will need to turn on
PF. This is easily accomplished by editing the files listed
below (make the changes to the file so it looks like the options below):

<p>
<b>/etc/rc.conf</b> (this file used to start services at boot time)

<blockquote><pre>
pf=YES<br>
</pre></blockquote>

<p>
<b>/etc/sysctl.conf</b>

<blockquote><pre>
net.inet.ip.forwarding=1
</pre></blockquote>

<p>
After these changes are made, the machine is now ready for the
configuration of NAT.

<p>
<a name="nat2.5"></a>
<b>Configuration</b>

<p>
The first step is to configure the PF configuration file
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">/etc/pf.conf</a></i>).
For the purposes of this document we will allow traffic to pass
through this firewall without any interference. The file
should look like this:

<blockquote><pre>
pass in all
pass out all
</pre></blockquote>

<p>
Again, for more information you can read <a href="#PF">FAQ 6, Packet Filter</a>

<p>
The NAT portion of the PF configuration file
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">/etc/pf.conf</a></i>)
has a very simple syntax.
For the configuration set forth above, the file should contain the
following entry:

<blockquote><pre>
nat on fxp0 from 192.168.1.0/24 to any -&gt; 24.5.0.5
</pre></blockquote>

<p>
Here is an explanation for the above lines.

<dl>
<dt>"nat"
<dd>This indicates the command you are giving is a NAT rule.
</dl>

<dl>
<dt>"fxp0"
<dd>This is the network interface that is connected to the Internet.
</dl>

<dl>
<dt>"192.168.1.0/24"
<dd>the IP address and netmask (the netmask is in
CIDR format). Combined they state "any IP address of value
192.168.1.1 through 192.168.1.254" should be mapped. 
</dl>

<dl>
<dt>"24.5.0.5"
<dd>This is the external IP address the internal IP addresses will be mapped to.
</dl>

<p>
<a name="nat2.6"></a>
<b>Running</b>

<p>
Once the configuration is
complete, there are two ways to enable NAT. The first (and best way if
possible) is to reboot your OpenBSD machine.
This is accomplished with the command "<i>reboot</i>". 

<p>
If you would like to configure NAT from the command line, use the following
commands:

<blockquote><pre>
# <b>pfctl -f /etc/pf.conf</b>
# <b>pfctl -e</b>
</pre></blockquote>

<p>
The first line is to load a set of NAT rules into PF (and flushing any
old rules); the second line enables PF.  Again, though, rebooting is
the best way to ensure that everything will startup from a reboot as 
you expect.

<p>
<b>Note:</b> in order to reload the NAT settings (in case you edit the file
but don't want to reboot) just execute the first command over again. The
settings will be flushed and reloaded.

<p>
<a name="nat3.0"></a>
<h3><u>6.3.3 Nat Knowledge Base</u></h3>

<p>
<a name="nat3.1"></a>
<b>Checking NAT Status</b>

<p>
To find out how NAT is doing or make sure the settings have taken
effect, you use the "-ss" option. This option will list all the
current sessions that NAT is running:

<blockquote><pre>
# pfctl -ss
TCP  192.168.1.40:2132 -&gt; 24.5.0.5:53136 -&gt; 65.42.33.245:22       TIME_WAIT:TIME_WAIT
TCP  192.168.1.40:2492 -&gt; 24.5.0.5:55011 -&gt; 65.42.33.245:22       ESTABLISHED:ESTABLISHED
UDP  192.168.1.40:2491 -&gt; 24.5.0.5:60527 -&gt; 24.2.68.33:53       2:1
</pre></blockquote>

<p>
Explanations (first line, others are similar):

<dl>
<dt>"192.168.1.40:2132"
<dd>This tells you the IP address of the
machine on the LAN that is using NAT (192.168.1.40). The port number used to make
the connection (2132) is displayed afterwards.
</dl>

<dl>
<dt>"24.5.0.5:53136"
<dd>This denotes that the connection is going
to the Internet via IP address 24.5.0.5 and using port 53136.
</dl>

<dl>
<dt>"65.42.33.245:22"
<dd>The IP address and the port being connected to.
</dl>

<dl>
<dt>"TIME_WAIT:TIME_WAIT"
<dd>This indicates what state PF believes the TCP connection to be in.
</dl>

<p>
<a name="nat3.2"></a>
<b>Issues with FTP and NAT</b>

<p>
There are a few limitations of NAT; the most commonly encountered is
with FTP. You can use FTP in two ways: passive and active. Of these,
passive FTP is generally considered more secure.

<p>
With active FTP, when a user connects to a remote FTP server and
requests information or a file, the FTP client sends the server a random
port number that the FTP server will make a connection to on the
client and transfer the info. This is a problem for users attempting
to gain access to FTP servers from within the LAN. When the FTP server
sends its information it sends it to the external NIC at a random port.
The NAT machine will receive this, but because it has no mappings for
the unknown packet and doesn't have any mappings for that port, it will
drop the packet and won't deliver it.

<p>
With passive mode FTP (the default with OpenBSD <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp&amp;sektion=1">ftp(1)</a>
client), the client requests that the server picks up a random port
that it will listen on for the data connection. The server informs the
client of the port it has chosen, and the client connects to this port
to transfer the data. Unfortunately, this is not always possible or
desirable. ftp(1) uses this mode by default; to force active mode FTP,
use the -A flag to ftp, or set the passive mode to off by issuing
the command

<blockquote><pre>
passive off
</pre></blockquote>

<p>
at the ftp&gt; prompt.

<p>
Packet Filter provides another solution for this situation, redirecting 
FTP traffic through an FTP proxy server, a process which acts to "guide" your 
FTP traffic through the filters.  The FTP proxy used by OpenBSD and PF is 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.3">ftp-proxy(8)</a>.
To activate it, put something like this in your <i>/etc/pf.conf</i> file:

<blockquote><pre>
rdr on tl0 proto tcp from any to any port 21 -&gt; 127.0.0.1 port 8021
</pre></blockquote>

<p>
Short explanation of this line is, "TCP port 21 traffic on the internal
interface is redirected to the proxy server running on this machine
which is listening at port 8021".

<p>
Hopefully, it is apparent the proxy server has to be started and running on 
the OpenBSD box; this is done by inserting the following line in
<i>/etc/inetd.conf</i>:

<blockquote><pre>
127.0.0.1:8021 stream tcp nowait root /usr/libexec/ftp-proxy ftp-proxy
</pre></blockquote>

<p>
and either rebooting the system or sending a 'HUP' signal to
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8">inetd(8)</a>.
One way to send the 'HUP' signal is with the command:

<blockquote><pre>
kill -HUP `cat /var/run/inetd.pid`
</pre></blockquote>

<p>
You will note that ftp-proxy is listening on port 8021, the same port the above 
rdr statement was sending FTP traffic to.  The choice of port 8021 is arbitrary,
though 8021 is a good choice, as it is not defined for any other application.

<p>
<a name="nat3.3"></a>
<b>Redirecting Traffic</b>

<p>
For some applications, you may need to redirect incoming or outgoing 
traffic for a certain protocol and/or port to a particular machine behind
the filtering system. An example of this would be a computer residing inside 
the local network running a web server which was to be accessed by the outside world
(or of course, the already discussed ftp-proxy(8)). Incoming connections to 
your valid Internet IP will find that unless your NAT box is also running
a web server, no connection can be made. For this purpose we use the
NAT 'rdr' directive in the rules file to instruct where to redirect
a particular connection to.

<p>
For our example, lets say a web server resides on the LAN with IP address
of 192.168.1.80. The NAT rules file needs a new directive to handle this.
Add a line similar to the following one to your <i>/etc/pf.conf</i>:

<blockquote><pre>
rdr on fxp0 proto tcp from any to any port 80 -&gt; 192.168.1.80 port 80
</pre></blockquote>

<p>
The explanation for each part of this line:

<dl>
<dt>"rdr"
<dd>This is the command you are giving NAT. It is telling NAT 
that this entry is an entry to redirect a connection. 
</dl>

<dl>
<dt>"on fxp0"
<dd>This is the network interface that is connected to the Internet.
</dl>

<dl>
<dt>"from any to any"
<dd>This indicates which IP addresses to redirect (from any coming in 
on fxp0, as indicated above, to any destination IP) 
</dl>

<dl>
<dt>"port 80"
<dd>This is the incoming port (80) that should be redirected. The number
"80" didn't have to be used. You can use "port www" also to specify
a redirection of port 80. If you would like to use a name instead of
a number, the service name and corresponding port must exist in the
file <i>/etc/services</i>.
</dl>

<dl>
<dt>"192.168.1.80 port 80"
<dd>The IP address of the LAN machine which the packets are redirected to. 
Note that the destination port does NOT need to match the incoming port. 
For example, the following is valid, and even potentially useful:
<pre>
rdr on fxp0 proto tcp from any to any port 8080 -&gt; 192.168.1.35 port 80
</pre>
This line would redirect incoming traffic on port 8080 to a webserver
running on a machine in the internal network, at the "standard" port 80.
</dl>

<p>
When the addition is complete reload the NAT rules, and the redirection
will start immediately.

<p>
<b>Negation</b>
<p>
Sometimes, you need to make exceptions to a NAT or redirection rule.
Here's an example.  AOL Instant Messenger is noted for sneaking out 
firewalls through any available port.  You may find that the 
ftp-proxy is interfering with AIM when it chooses to go out to 
remote port 21.  In the event you consider this bad (many people 
spend considerable time trying to block AIM!), you might wish to 
exclude the IP addresses used by the AIM servers from the traffic
redirected by our above ftp-proxy line.  You can do this with the
following line:

<blockquote><pre>
rdr on tl0 proto tcp from any to ! 64.12.163.199 port 21 -&gt; 127.0.0.1 port 8021
</pre></blockquote>

<p>
Interpretation: Redirect traffic coming in on tl0 going to port 21 
but NOT to 64.12.163.199 (the AIM server users were having trouble
with) to localhost port 8021 (where
hopefully ftp-proxy is waiting).  Now, be advised that there are many
AIM servers; if this application interests you, you will probably
have to play with these IP addresses (64.12.0.0/16 might be more 
productive, though probably also interferes with some non-AOL sites).

<p>
<a name="nat3.4"></a>
<b>NAT versus Proxy</b>

<p>
The difference between NAT and an application-based proxy is that the proxy
software acts as a middle-man between the Internet and the machines connected
on the LAN. This is fine, however each application you want to run on
your machine and connect to the Internet through the proxy server MUST
be proxy-aware (be able to use a proxy server). Not all applications are
able to do this (especially games). Furthermore, there simply are not
proxy server applications for all of the Internet services out there.
NAT transparently maps
your internal network so that it may connect to the Internet.  The only
security advantage to using a proxy software over NAT is that the proxy
software may have been made security aware, and can filter based on content,
to keep your Windows machine from getting a macro virus, it can protect
against buffer overflows to your client software, and more.  To maintain
these filters is often a high-maintenance job.

<p>
<a name="nat3.5"></a>
<b>Redirection and reflection</b>

<p>
Often, redirection rules are used to forward incoming connections from
the Internet to a local server with a private address in the LAN, as in:

<pre>
rdr on $ext_if proto tcp from any to $ext_if port 80 -&gt; $server port 80
</pre>

<p>
But when the redirection rule is tested from a client on the LAN, it's
found to not work.
The reason is that redirection rules apply only to packets that pass
through the specified interface ($ext_if, the external interface, in
the example).
Connecting to the external address of the firewall from a host on the
LAN, however, does not mean the packets will actually pass through its
external interface.
The TCP/IP stack on the firewall compares the destination address of
incoming packets with its own addresses and aliases, and detects
connections to itself as soon as they have passed the internal interface.
Such packets do not physically pass through the external interface, and
the stack does not simulate such a passage in any way.
pf never sees these packets on the external interface, and the
redirection rule, specifying the external interface, does not apply.

<p>
Adding a second redirection rule for the internal interface does not
have the desired effect.
When the local client connects to the external address of the firewall,
the initial packet of the TCP handshake reaches the firewall through
the internal interface.
The redirection rule does apply and the destination address gets
replaced with that of the internal server.
The packet gets forwarded back through the internal interface and
reaches the internal server.
But the source address has not been translated, and still contains
the local client's address, so the server sends its replies directly
to the client.
The firewall never sees the reply and has no chance to properly reverse
the translation.
The client receives a reply from a source it never expected, and drops
it, the TCP handshake fails, and no connection can be established.

<p>
Still, it's often desirable for clients on the LAN to connect to the
same internal server as external clients, transparently.
There are several solutions for this problem:

<p>
<b>Split horizon DNS</b>
<p>
It's possible to configure DNS servers to answer queries from local
hosts differently than external queries, so that local clients will
receive the internal server's address during name resolution.
They will then connect directly to the local server, and the firewall
isn't involved at all.
This reduces local traffic, since packets don't have to be sent through
the firewall.

<p>
<b>Moving the server into a separate local network</b>
<p>
Adding an additional network interface to the firewall and moving the
local server from the client's network into a dedicated network (DMZ)
allows to redirect connections from local clients in the same way as
the redirection of external connections.
Use of separate networks has several advantages, including improving
security by isolating the server from the remaining local hosts.
Should the server (which in our case is reachable from the Internet)
ever become compromised, it can't access other local hosts directly,
as all connections have to pass through the firewall.

<p>
<b>TCP proxying</b>
<p>
A generic TCP proxy can be setup on the firewall, either listening on
the port to be forwarded or getting connections on the internal interface
redirected to the port it's listening on.
When a local client connects to the firewall, the proxy accepts the
connection, establishes a second connection to the internal server,
and forwards data between those two connections.

<p>
Simple proxies can be created using
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8">inetd(8)</a>
and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1">nc(1)</a>.
The following <i>/etc/inetd.conf</i> entry creates a listening socket
bound to the loopback address and port 5000.
Connections are forwarded to port 80 on server 192.168.1.10.

<pre>
127.0.0.1:5000 stream tcp wait nobody /usr/bin/nc nc -w 20 192.168.1.10 80
</pre>

<p>
The following redirection rule forwards port 80 on the internal interface
to the proxy:

<pre>
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -&gt; 127.0.0.1 port 5000
</pre>

<p>
<b>RDR and NAT combination</b>
<p>
With an additional NAT rule on the internal interface, the lacking
source address translation described above can be achieved.

<pre>
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -&gt; $server
no nat on $int_if proto tcp from $int_if to $int_net
nat on $int_if proto tcp from $int_net to $server port 80 -&gt; $int_if
</pre>

<p>
This will cause the initial packet from the client to be translated again
when it's forwarded back through the internal interface, replacing the
client's source address with the firewall's internal address.
The internal server will reply back to the firewall, which can reverse
both NAT and RDR translations when forwarding to the local client.
This construct is rather complex, as it creates two separate states
for each reflected connection.
Care must taken to prevent the NAT rule from applying to other traffic,
for instance connections originating from external hosts (through
other redirections) or the firewall itself.
Note that the rdr rule above will cause the TCP/IP stack to see packets
arriving on the internal interface with a destination address inside the
internal network.
To prevent the stack from issuing ICMP redirect messages (telling the
client that its destination is reachable directly, breaking the reflection),
disable redirects on the gateway, using

<pre>
# <strong>sysctl -w net.inet.ip.redirect=0</strong>
</pre>

In general, the previously mentioned solutions should be used instead.

<p>
<a name="nat4.0"></a>
<b>6.3.4 Links and Cross-References</b>

<p>
OpenBSD files:
<ul>
<li>/etc/pf.conf - PF/NAT rules file
<li>/etc/rc.conf - need to edit to start up NAT and PF at boot time
<li>/etc/sysctl.conf - need to edit to enable IP forwarding
</ul>

<p>
NAT Internet Links:

<ul>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">pf.conf man page</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+3.3">pfctl man page</a>
<li><a href="http://www.geektools.com/rfc/rfc1631.txt">http://www.geektools.com/rfc/rfc1631.txt</a>
</ul>

d1917 1
a1917 1
<small>$OpenBSD: faq6.html,v 1.168 2003/04/04 17:49:08 nick Exp $</small>
@


1.168
log
@
More tags for Stuff That Changes every release, from Sam Smith.
@
text
@d21 2
a22 2
<a href="faq5.html">[To Section 5 - Kernel configuration and Disk Setup]</a>
<a href="faq7.html">[To Section 7 - Keyboard controls]</a>
d125 2
a126 2
lo0: flags=8049&lt;UP,LOOPBACK,RUNNING,MULTICAST&gt; mtu 33224
        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x4
d128 4
a131 3
        inet 127.0.0.1 netmask 0xff000000 
lo1: flags=8008&lt;LOOPBACK,MULTICAST&gt; mtu 33224
fxp0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500
d134 22
a155 19
        inet 10.0.0.38 netmask 0xffffff00 broadcast 10.0.0.255
        inet6 fe80::202:b3ff:fe2b:10f7%fxp0 prefixlen 64 scopeid 0x1
pflog0: flags=0&lt;&gt; mtu 33224
sl0: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt; mtu 296
sl1: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt; mtu 296
ppp0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
ppp1: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1500
tun0: flags=10&lt;POINTOPOINT&gt; mtu 3000
tun1: flags=10&lt;POINTOPOINT&gt; mtu 3000
enc0: flags=0&lt;&gt; mtu 1536
bridge0: flags=0&lt;&gt; mtu 1500
bridge1: flags=0&lt;&gt; mtu 1500
vlan0: flags=0&lt;&gt; mtu 1500
vlan1: flags=0&lt;&gt; mtu 1500
gre0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1450
gif0: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
gif1: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
gif2: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
gif3: flags=8010&lt;POINTOPOINT,MULTICAST&gt; mtu 1280
d177 1
a177 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4&amp;manpath=OpenBSD+3.2">pflog</a>
d255 1
a255 1
domain &quot;yourdomain.com&quot;.
d259 1
a259 1
search yourdomain.com
d447 5
a451 3
<h4>Note:  For OpenBSD 3.2, the functions of the <i>/etc/nat.conf</i>
have been merged into <i>/etc/pf.conf</i>.  
</h4>
d454 7
a460 2
The new 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5"><i>/etc/pf.conf</i></a>
a477 7
The Packet Filter subsystem was created to handle two tasks, dealing 
with packet level forwarding permissions and mapping hosts/subnets to 
a range of external addresses.  The configuration file for this 
service is
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.2">/etc/pf.conf(5)</a></i>. 

<p>
d499 1
a499 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+3.2">pfctl(8)</a> command.
d528 1
a528 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.2">pf.conf(5)</a>
d544 1
a544 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.2">pf.conf(5)</a>. 
d766 1
a766 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.2">pflogd(8)</a>,
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.2">tcpdump(8)</a>
d824 1
a824 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=syslogd&amp;sektion=8&amp;manpath=OpenBSD+3.2">Syslogd(8)</a>
d831 1
a831 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=adduser&amp;sektion=8&amp;manpath=OpenBSD+3.2">adduser(8)</a>.
d908 1
a908 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5&amp;manpath=OpenBSD+3.2">
d919 1
a919 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newsyslog&amp;sektion=8&amp;manpath=OpenBSD+3.2">
d1206 1
a1206 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.2">pflogd(8)</a> will write the ip log entries to <i>/var/log/pflog</i>.
d1208 1
a1208 1
read by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.2">tcpdump(8)</a>, NOT directly by humans.
d1435 1
a1435 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.2">/etc/pf.conf</a></i>).
d1450 1
a1450 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&amp;sektion=5&amp;manpath=OpenBSD+3.2">/etc/pf.conf</a></i>)
d1601 1
a1601 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.2">ftp-proxy(8)</a>.
d1910 2
a1911 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.2">pf.conf man page</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+3.2">pfctl man page</a>
d1982 1
a1982 1
        option  domain-name "xyz.mil";
d1993 3
a1995 2
This will tell your DHCP clients that the domain to append to DNS requests is xyz.mil (so, if the user types in 'telnet joe' then it will
send them to joe.xyz.mil).  It will point them to DNS servers 192.168.1.3 and 192.168.1.5.  For hosts that are on the same network as
d2461 31
a2492 2

<p>
d3371 2
a3372 2
<a href="faq5.html">[To Section 5 - Kernel configuration and Disk Setup]</a>
<a href="faq7.html">[To Section 7 - Keyboard controls]</a>
d3380 1
a3380 1
<small>$OpenBSD: faq6.html,v 1.167 2003/04/04 16:29:08 nick Exp $</small>
@


1.167
log
@
Wording Improvements from Sam Smith.
@
text
@d170 1
d440 1
d1213 1
d2203 1
d2623 1
d2645 1
d2674 1
d2694 1
d3254 2
d3346 1
a3346 1
<small>$OpenBSD: faq6.html,v 1.166 2003/04/01 02:57:17 nick Exp $</small>
@


1.166
log
@
punctuation, missing words and numbering consistency.
From Adrian Daigle (Adrian dot Daigle at Colorado dot EDU), thanks!
@
text
@d239 1
a239 1
The next step from here is to setup your gateway. To do this, simply put
d283 4
a286 1
Here is an example of viewing your routing tables using both.
d340 1
a340 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&amp;sektion=5">/etc/sysctl.conf(5)</a>
d3336 1
a3336 1
<small>$OpenBSD: faq6.html,v 1.165 2003/03/18 03:41:04 nick Exp $</small>
@


1.165
log
@
* [FAQ Index] [Back] [Next] links at top of page ('bout time.  Finally
decided not having them was worse than the lame ideas I had).
* Top heading changed from <h2> to <h1> throughout
* [Back to Main Index] shortened to [FAQ Index] top and bottom
* Bottoms of faq5.html and faq14.html standardized.
@
text
@d111 1
a111 1
name here.  Combine the short alphabetical device name (such as fxp)
d194 1
a194 1
the <i>/etc/hostname.xxx</i> file. Where the name of your interface will
d368 1
a368 1
<h3>6.1.3 - Setting up aliases on an interface.</h3>
d968 1
a968 1
This does put a very minor additional load on the system, and requires a bit 
d1301 1
a1301 1
		      | Client A  - 192.168.1.35 |
d1355 1
a1355 1
192.168.1.35 --- 192.168.1.1 [ NAT ] 24.5.0.5 --- 123.45.67.89
d1358 1
a1358 1
From: 192.168.1.35  &gt;&gt;=== NAT ===&gt;&gt;     From: 24.5.0.5
d1382 1
a1382 1
are two roommates in my house, splitting the cost is certainly attractive.
d1495 1
a1495 1
old rules), the second line enables PF.  Again, though, rebooting is 
d1519 3
a1521 3
TCP  192.168.1.35:2132 -&gt; 24.5.0.5:53136 -&gt; 65.42.33.245:22       TIME_WAIT:TIME_WAIT
TCP  192.168.1.35:2492 -&gt; 24.5.0.5:55011 -&gt; 65.42.33.245:22       ESTABLISHED:ESTABLISHED
UDP  192.168.1.35:2491 -&gt; 24.5.0.5:60527 -&gt; 24.2.68.33:53       2:1
d1528 1
a1528 1
<dt>"192.168.1.35:2132"
d1530 1
a1530 1
machine on the LAN that is using NAT (192.168.1.35). The port number used to make
d1555 1
a1555 1
There are a few limitations of NAT, the most commonly encountered is
d1561 1
a1561 1
requests information or file, the FTP client sends the server a random
d1605 1
a1605 1
the OpenBSD box, this is done by inserting the following line in 
d1634 1
a1634 1
the local network running a web server which was to be accessed by the outside world, 
d1675 1
a1675 1
a number, the service name and corresponding port, must exist in the
d1717 1
a1717 1
AIM servers, if this application interests you, you will probably 
d2039 1
a2039 1
<li>Your username and password.
d2085 1
a2085 1
log&quot; we set our logging levels. This can be changed, refer to
d2117 1
a2117 1
set to 5, this means that we will abort our login attempt after 5
d2149 1
a2149 1
addresses. Do NOT do this if you are running an local DNS, as ppp will
d2412 1
a2412 1
<i>/mnt</i>, do this (note that you don't need to use an IP address,
d2766 1
a2766 1
Make sure <i>/etc/resolv.conf</i> now points to the domain of local
d3333 1
a3333 1
<small>$OpenBSD: faq6.html,v 1.164 2003/03/08 02:31:57 nick Exp $</small>
@


1.164
log
@
3Com moved their documents around again.  Removed dead link, file is still
accessable.  Spotted by Wouter Clarie <rimshot@@pandora.be>.  Fixed up some
caps and punctuation while in neighborhood.
@
text
@d19 7
a25 1
<h2><font color="#e00000">6 - Networking</font></h2>
d3323 1
a3323 1
<a href="index.html">[Back to Main Index]</a>
d3333 1
a3333 1
<small>$OpenBSD: faq6.html,v 1.163 2003/02/28 00:40:17 nick Exp $</small>
@


1.163
log
@
typo -- closes PR 2906
@
text
@d58 3
a60 4
<a href="http://www.3com.com/corpinfo/en_US/technology/tech_paper.jsp?DOC_ID=135">Understanding
IP Addressing</a> (or
<a href="http://www.3com.com/other/pdfs/infra/corpinfo/en_US/501302.pdf">here</a>).
This is an excellent document.  Understanding IP addressing contains
d3327 1
a3327 1
<small>$OpenBSD: faq6.html,v 1.162 2003/02/28 00:34:28 nick Exp $</small>
@


1.162
log
@
Typo fixes from Tom Cosgrove (tom dot cosgrove at arches-consulting dot com).
Thanks!
@
text
@d3174 1
a3174 1
rest of my network and will thus has an IP address, <tt>ep0</tt> is
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.161 2003/02/26 02:54:48 nick Exp $</small>
@


1.161
log
@
typos, spotted by Tom Cosgrove (tom dot cosgrove at arches-consulting dot com>,
and at least a few weren't made by me!  whoo-hoo!  Thanks!
@
text
@d1714 1
a1714 1
productive, though probably also interferes with some non-AOL sites)
d2528 1
a2528 1
and BIND</a> </i>.
d2891 1
a2891 1
<i>/var/named/named.pid</i>
d2992 1
a2992 1
<a href="mailto:ntang@@nachtwache.org">Nicholas Tang</a> for that tip)
d3100 1
a3100 1
10.0.0.138. We now need to assign an address to OUR interface, It's best
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.160 2003/02/20 03:09:55 nick Exp $</small>
@


1.160
log
@
Page name cleanups.  Standardize capitalization, and change
x.0 -> x on titles and on "next/previous" links at bottom of page.
From Tom Cosgrove (tom dot cosgrove at arches-consulting dot com), thanks!
@
text
@d323 1
a323 1
adresses from network service providers and regional registries, you may
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.159 2003/01/01 13:02:00 nick Exp $</small>
@


1.159
log
@
Rev copyrights to 2003.
@
text
@d4 1
a4 1
<title>6.0 - Networking</title>
d19 1
a19 1
<h2><font color="#e00000">6.0 - Networking</font></h2>
d3319 2
a3320 2
<a href="faq5.html">[To Section 5.0 - Kernel configuration and Disk Setup]</a>
<a href="faq7.html">[To Section 7.0 - Keyboard controls]</a>
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.158 2002/12/14 23:36:27 couderc Exp $</small>
@


1.158
log
@Fixed mediaopt, noticed by Nicolas Baldi
@
text
@d11 1
a11 1
<meta name= "copyright"     content= "This document copyright 1998-2002 by OpenBSD.">
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.157 2002/12/05 20:10:14 nick Exp $</small>
@


1.157
log
@
mention needing "portmap=YES" in rc.conf to use NFS.
Suggested by Tom Ryan (tom.ryan at whitehorsestrategic dot com).
@
text
@d216 1
a216 1
inet 10.0.0.38 255.255.255.0 NONE media 100baseTX media-opt full-duplex
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.156 2002/11/24 00:32:36 nick Exp $</small>
@


1.156
log
@
Got a little careless doing 3.1 -> 3.2 changes...
Spotted by Vaclav Rehak (vasek at openbsd.cz), thanks!
@
text
@d2286 13
d3328 1
a3328 1
<small>$OpenBSD: faq6.html,v 1.155 2002/11/20 14:20:56 dhartmei Exp $</small>
@


1.155
log
@Document the ICMP redirect issue with reflection.
ok henning@@, nick@@, camield@@
@
text
@d1504 1
a1504 1
<a name="nat3.2"></a>
d3315 1
a3315 1
<small>$OpenBSD: faq6.html,v 1.154 2002/11/10 17:59:05 nick Exp $</small>
@


1.154
log
@
required parts of rdr syntax changed, spotted by <kenmacd at hushmail,com>
ok henning@@
@
text
@d1866 11
d3315 1
a3315 1
<small>$OpenBSD: faq6.html,v 1.153 2002/11/05 21:45:02 jufi Exp $</small>
@


1.153
log
@
typo
@
text
@d1590 1
a1590 1
rdr on tl0 from any to any port 21 -&gt; 127.0.0.1 port 8021
d1594 3
a1596 3
Short explanation of this line is, "Traffic on the internal interface is 
redirected to the proxy server running on this machine which is listening at
port 8021".
d1642 1
a1642 1
rdr on fxp0 from any to any port 80 -&gt; 192.168.1.80 port 80
d1680 1
a1680 1
rdr on fxp0 from any to any port 8080 -&gt; 192.168.1.35 port 80
d1704 1
a1704 1
rdr on tl0 from any to ! 64.12.163.199 port 21 -&gt; 127.0.0.1 port 8021
d1745 1
a1745 1
rdr on $ext_if from any to $ext_if port 80 -&gt; $server port 80
d3304 1
a3304 1
<small>$OpenBSD: faq6.html,v 1.152 2002/11/05 20:10:17 nick Exp $</small>
@


1.152
log
@
typo fix, spotted by Mike Burden (mwb at link dot com), which prompted me
to notice several presentation issues.
@
text
@d1990 1
a1990 1
     optioni    netbios-name-serversi    192.168.92.55;
d3304 1
a3304 1
<small>$OpenBSD: faq6.html,v 1.151 2002/11/01 17:55:52 nick Exp $</small>
@


1.151
log
@
Update to PF/NAT sections reflecting the elimination of /etc/nat.conf.
This will hold us until I get the complete rewrite done.
@
text
@d1948 1
a1948 1
# <strong>echo xl1 xl2 xl3 &gt;/etc/dhcpd.interfaces</strong>
d1967 1
a1967 1
This will tell your dhcp clients that the domain to append to DNS requests is xyz.mil (so, if the user types in 'telnet joe' then it will
d1973 1
a1973 1
If you want to start dhcpd from the command line, after editing /etc/dhcpd.conf,
d1977 1
a1977 1
# <strong>dhcpd -q fxp0</strong>
d1981 2
a1982 2
Where fxp0 is an interface that you want to start serving dhcp on.
The -q flag makes dhcpd quiet; otherwise it is very noisy.
d1985 2
a1986 2
If you are serving DHCP to a Windows box, you may want to
dhcpd to give the client a 'WINS' server address.
d1990 1
a1990 1
option	netbios-name-servers	192.168.92.55;
d1994 1
a1994 1
(where 192.168.92.55 is the IP of your Windows or Samba server.)
d3304 1
a3304 1
<small>$OpenBSD: faq6.html,v 1.150 2002/10/31 02:02:02 nick Exp $</small>
@


1.150
log
@
line wrapping, also *some* standardization of <tt>, <b>, and <i> tags...
@
text
@d167 1
a167 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4&amp;manpath=OpenBSD+3.1">pflog</a>
d433 22
a454 3
<h5>Note: Packet Filter is the filtering system in OpenBSD 3.0 and 
later.  If you are looking for the IPF/IPNAT FAQ for OpenBSD 2.9 and 
before, click <a href="faqipf.html">here</a>.</h5>
d459 3
a461 5
a range of external addresses.  The configuration files for these 
two services are 
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">/etc/pf.conf(5)</a></i> 
and 
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">/etc/nat.conf(5)</a></i>.
d485 1
a485 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+3.1">pfctl(8)</a> command.
d488 1
a488 2
# <b>pfctl -R /etc/pf.conf</b>
# <b>pfctl -N /etc/nat.conf</b>
d493 2
a494 4
The first line sets up filtering, using <i>/etc/pf.conf</i> and the 
second sets up NAT, using <i>/etc/nat.conf</i> (more on NAT later 
in <a href="#NAT">Section 6.3, NAT</a>), and finally, the last line 
activates PF.
d500 1
a500 1
# <strong>pfctl -R /etc/pf.conf -N /etc/nat.conf -e</strong>
d506 1
a506 1
appropriate file:
d509 1
a509 1
# <b>pfctl -R /etc/pf.conf</b>
d514 1
a514 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">pf.conf(5)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">nat.conf(5)</a> 
d530 1
a530 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">pf.conf(5)</a>. 
d752 1
a752 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.1">pflogd(8)</a>,
d754 1
a754 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.1">tcpdump(8)</a>
d810 1
a810 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=syslogd&amp;sektion=8&amp;manpath=OpenBSD+3.1">Syslogd(8)</a>
d817 1
a817 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=adduser&amp;sektion=8&amp;manpath=OpenBSD+3.1">adduser(8)</a>.
d894 1
a894 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5&amp;manpath=OpenBSD+3.1">
d905 1
a905 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newsyslog&amp;sektion=8&amp;manpath=OpenBSD+3.1">
d1192 1
a1192 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.1">pflogd(8)</a> will write the ip log entries to <i>/var/log/pflog</i>.
d1194 1
a1194 1
read by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.1">tcpdump(8)</a>, NOT directly by humans.
a1199 28
<p>
<h3>Differences between PF and IPF</h3>

<p>
Packet Filter (PF) was designed to be very compatible with IPF's 
<i>ipf.rules</i> file.  However, PF is not simply a drop-in replacement for IPF.
The main syntax differences for filtering (pf.conf) rules are as follows:

<ul>
<li><b>group and head:</b>  These options are no longer used,
as the filter rules are optimized on the fly.  If you are 
migrating your old rulesets from IPF, you should delete any <em>group</em>
or <em>head</em> definitions and manually reorder your rules, making sure
their semantics haven't changed.
<li><b>level:</b> When logging, PF does not accept a <em>level</em> option to the log
keyword, as logging is not performed by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=syslogd&amp;sektion=8">syslogd(8)</a>, but by a separate 
logging daemon.  To examine a particular kind of traffic, as might have been
done with <em>level</em> option, use any of the available options of 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&amp;sektion=8&amp;manpath=OpenBSD+3.1">tcpdump(8)</a>.
<li><b>keep frags:</b>  This has been replaced by the normalization 
the <a href="#normalization">scrub</a> option performs.
<li><b>@@n Rules:</b>  PF does not support prepending rules with <em>@@n</em>
to insert them into particular points in the rule list as IPF does.  To
view the rule numbers PF has assigned, use the command <tt>pfctl -sr</tt>
</ul>


<p>
d1205 3
a1207 3
<h5>Note: Packet Filter is the filtering system in OpenBSD 3.0 and
later.  If you are looking for the IPF/IPNAT FAQ for OpenBSD 2.9 and
before, click <a href="faqipf.html">here</a>.</h5>
d1420 1
a1420 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">/etc/pf.conf</a></i>).
d1434 2
a1435 2
The NAT configuration file
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">/etc/nat.conf</a></i>)
d1484 1
a1484 1
# <b>pfctl -N /etc/nat.conf</b>
d1504 1
a1504 1
<a name="nat3.1"></a>
d1586 2
a1587 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.1">ftp-proxy(8)</a>.
To activate it, put something like this in your <i>/etc/nat.conf</i> file:
d1639 1
a1639 1
Add a line similar to the following one to your <i>/etc/nat.conf</i>:
d1875 1
a1875 1
<li>/etc/nat.conf - NAT rules file
d1884 2
a1885 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&amp;sektion=5&amp;manpath=OpenBSD+3.1">nat.conf man page</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+3.1">pfctl man page</a>
d3304 1
a3304 1
<small>$OpenBSD: faq6.html,v 1.149 2002/10/30 21:10:35 nick Exp $</small>
@


1.149
log
@
HTML validation.
Incredible amount of work done by Horacio <homega@@wanadoo.es>, many
many thank!
@
text
@d58 3
a60 2
<a href="http://www.3com.com/corpinfo/en_US/technology/tech_paper.jsp?DOC_ID=135">Understanding IP Addressing</a>
(or <a href="http://www.3com.com/other/pdfs/infra/corpinfo/en_US/501302.pdf">here</a>).
d66 8
a73 8
If you are working with applications such as web servers, ftp servers, and
mail servers, you may benefit greatly by <a href="http://the.rfceditor.org/rfc.html">reading the RFCs</a>.
Most likely, you can't read all of them.  
Pick some topics that you are interested in, or that you use in
your network environment.  Look them up, find out how they are intended to
work.
The RFCs define many (thousands of) standards for protocols on the
Internet and how they are supposed to work.
d86 10
a95 9
To start off, you must first identify your network interface.
In OpenBSD, interfaces are named for the type of card, not for
the type of connection. You can see your network card get
initialized during the booting process, or after the
booting process using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&amp;sektion=8">dmesg(8)</a> command.
You also have the chance of seeing your network interface
using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a> command.
For example, here is the output of dmesg for a Intel Fast Ethernet network
card, which uses the device name fxp.
d104 5
a108 4
<a href="../plat.html">supported hardware list</a> for your platform.  You
will find a list of many common card names and their OpenBSD device name
here.  Combine the short alphabetical device name (such as fxp) with a number
assigned by the kernel and you have an interface name (such as fxp0).
d111 2
a112 1
You can find out what network interfaces have been identified by using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>
d152 6
a157 4
gives us a lot more information than we need at this
point. But, it still allows us to see our interface. In the above example, the interface card is already
configured. This is obvious because an IP network is already configured on fxp0, hence the values &quot;inet 10.0.0.38 netmask
0xffffff00 broadcast 10.0.0.255&quot;.  Also, the <strong>UP</strong> and <strong>RUNNING</strong> flags are set.
d160 3
a162 3
Finally, you will notice several other interfaces come enabled by default.
These are virtual interfaces that serve various functions.  The following manual
pages describe them:
d165 20
a184 10
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4">lo</a> - Loopback Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&amp;sektion=4&amp;manpath=OpenBSD+3.1">pflog</a> - Packet Filter Logging Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sl&amp;sektion=4">sl</a> - SLIP Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=4">ppp</a> - Point to Point Protocol
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun&amp;sektion=4">tun</a> - Tunnel Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&amp;sektion=4">enc</a> - Encapsulating Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4">bridge</a> - Ethernet Bridge Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vlan&amp;sektion=4">vlan</a> - IEEE 802.1Q Encapsulation Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&amp;sektion=4">gre</a> - GRE/MobileIP Encapsulation Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gif&amp;sektion=4">gif</a> - Generic IPv4/IPv6 Tunnel Interface
d188 5
a192 3
If you don't have your interface configured, the first step is to create the <strong>/etc/hostname.xxx</strong>
file. Where the name of your interface will take the place of xxx. From the information in the examples
above, the name would be <strong>/etc/hostname.fxp0</strong>. The layout of this file is simple:<br>
d199 2
a200 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&amp;sektion=5">hostname.if(5)</a> man page.)
d212 2
a213 3
You could also specify media types for Ethernet, say, if you wanted to force
100baseTX
full-duplex mode.
d220 3
a222 3
(Of course, you should never force full duplex mode unless
both sides of the connection are set to do this! In the absence of special
needs, media settings should be excluded.)
d225 2
a226 2
Or, you may want to use special flags specific to a certain interface.  The
format of the hostname file doesn't change much!
d234 8
a241 4
The next step from here is to setup your gateway. To do this, simply put the IP of your gateway in the file
<strong>/etc/mygate</strong>. This will allow for your gateway to be set upon boot. From here you should
setup your nameservers, and your <strong>/etc/hosts</strong> file (see the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5">hosts(5)</a> man page). To setup your nameservers, you will
create a file called <strong>/etc/resolv.conf</strong>. You can read more about the format of this file in the
d243 3
a245 2
man page. But for a standard usage, here is an example. In this example your domain servers are 125.2.3.4
and 125.2.3.5. You also belong in the domain &quot;yourdomain.com&quot;.
d256 3
a258 2
From here, you can either reboot or run the <strong>/etc/netstart</strong> script. You can do this by simply
typing (as root):
d269 9
a277 7
Notice that a few errors were produced.  By running this script,
you are reconfiguring things which are already configured.  As such,
some routes already exist in the kernel routing table.
From here your system should be up and running. Again, you can check to
make sure that your interface was setup correctly with
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a>. You can also check your routes via
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&amp;sektion=1">netstat(1)</a> or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&amp;sektion=8">route(8)</a>.
d317 9
a325 9
This is the basic information you need to set up your OpenBSD
box as a gateway (also called a router). If you are using
OpenBSD as a router on the Internet, we suggest that you also
read the Packet Filter setup instructions below to block
potentially malicious traffic. Also, due to the low
availability of <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4">IPv4</a> addresses from network service providers
and regional registries, you may want to look at Network
Address Translation for information on conserving your IP
address space. 
d328 3
a330 3
The GENERIC kernel already has the ability to allow IP
Forwarding, but needs to be turned on. You should do this
using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=8">sysctl(8)</a>
d333 2
a334 2
to allow for IP Forwarding. To do so add this line in that
configuration file.
d343 2
a344 2
utility directly. Remember though that this change will no
longer exist after a reboot, and needs to be run as root.
d352 7
a358 5
Now modify the routes on the other hosts on both sides.  There are many possible uses of OpenBSD as a router, using software
such as <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=routed&amp;sektion=8">routed(8)</a>,
<a href="http://www.gated.org">gated</a>, <a href="http://www.mrtd.net">mrtd</a>, and <a href="http://www.zebra.org">zebra</a>.
OpenBSD has support in the ports collection for zebra, gated and mrtd.
OpenBSD supports several T1, HSSI, ATM, FDDI, Ethernet, and serial (PPP/SLIP) interfaces.
d370 5
a374 5
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&amp;sektion=8">/etc/rc(8)</a> script,
which is part of the <a href="faq10.html#rc">rc startup
hierarchy</a>. For the example, we assume that the user has an
interface <b>dc0</b> and is on the network 192.168.0.0. Other
important information:
d382 7
a388 5
A few side notes about aliases. In OpenBSD you use the interface name only. There is no difference between the first alias and the second alias. Unlike some other operating systems, OpenBSD doesn't refer to them as dc0:0, dc0:1.  If you
are referring to a specific aliased IP address with ifconfig, or adding
an alias, be sure
to say "<tt>ifconfig int alias</tt>" instead of just "<tt>ifconfig int</tt>"
at the command line.   You can delete aliases with "<tt>ifconfig int delete</tt>".
d391 6
a396 5
Assuming you are using multiple IP addresses which are in the same IP subnet with
aliases, your netmask setting for each alias becomes 255.255.255.255.  
They do not need to follow the netmask of the first IP bound to the interface.
In this example, <i>/etc/hostname.dc0</i>, two aliases are added to the device dc0,
which, by the way, was configured as 192.168.0.2 netmask 255.255.255.0.
d406 4
a409 1
Once you've made this file, it just takes a reboot for it to take effect. You can, however, bring up the aliases by hand using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8">ifconfig(8)</a> utility. To bring up the first alias you would use the command:
d2020 2
a2021 1
Point-to-Protocol is generally what is used to create a connection to your ISP via your modem. OpenBSD has 2 ways of doing this. 
d2024 4
a2027 4
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppd&amp;sektion=8">pppd(8)</a> - Which is
the kernel ppp daemon.
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a> - Which is
the userland ppp daemon. 
d2031 3
a2033 2
The first one we will cover will be the userland PPP daemon. To start off you will need some simple
information about your ISP. Here is a list of helpful information that you will need.
d2043 6
a2048 4
Some of these you can do without, but would be helpful in setting up your ppp. The userland PPP daemon uses
the file <a href="http://www.openbsd.org/cgi-bin/cvsweb/src/etc/ppp/ppp.conf.sample">/etc/ppp/ppp.conf</a> as
its configuration file. There are many helpful files in <b>/etc/ppp</b> that can have different setups for
many different situations. You should take a browse though that directory.
d2051 2
a2052 1
Also, make sure, that if you're not using a GENERIC kernel, that you have this line in your configuration file:
d2062 8
a2069 6
Initial Setup for the userland PPP daemon consists of editing your <b>/etc/ppp/ppp.conf</b> file. This file
doesn't exist by default, but there is a file <b>/etc/ppp/ppp.conf.sample</b> in which you can simply edit to
create your own <b>ppp.conf</b> file. Here I will start with the simplist setup and probably most used setup.
Here is a quick <b>ppp.conf</b> file that will simply connect to your ISP and set your default routes and
nameserver. With this file all the information you need is your ISP's phone number and your username and
password.
d2082 11
a2092 7
The section under the <b>default:</b> tag will get executed each time. Here we setup all our critical
information. Here with &quot;set log&quot; we set our logging levels. This can be changed, refer to 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a> for more info on
setting up logging levels. Our device gets set with &quot;set device&quot;. This is the device that the modem
is on. In this example the modem is on com port 2. Therefore com port 1 would be /dev/cua00. With &quot;set
speed&quot; we set the speed of our dialup connection and with &quot;set dial&quot; we set our dialup
parameters. With this we can change our timeout time, etc. This line should stay pretty much as it is though.
d2113 10
a2122 7
Here we have setup essential info for that specific ISP. The first option &quot;set phone&quot; sets your
ISP's dialup number. The &quot;set login&quot; sets our login options. Here we have the timeout set to 5, this
means that we will abort our login attempt after 5 seconds if no carrier. Otherwise it will wait for
&quot;login:&quot; to be sent and send in your username and password. In this example our Username = ppp and
Password = ppp. These values will need to be changed. The line &quot;set timeout&quot; sets the idle timeout for
the entire connection duration to 120 seconds. The &quot;set ifaddr&quot; line is a little tricky. Here is a more
extensive explanation.
d2129 22
a2150 14
In the above line, we have it set in the format of &quot;<b>set ifaddr [myaddr[/nn] [hisaddr[/nn] [netmask
[triggeraddr]]]]</b>&quot;. So the first IP specified is what we want as our IP. If you have a static IP address, you set it here. In our example we use /0
which says that no bits of this ip address need to match and the whole thing can be replaced. The second IP
specified is what we expect as their IP. If you know this you can specify it. Again in our line we don't know
what will be assigned, so we let them tell us. The third option is our netmask, here set to 255.255.255.0.If
triggeraddr is specified, it is used in place of myaddr in the initial IPCP negotiation.  However, only an
address in the myaddr range will be accepted.  This is useful when negotiating with some PPP implementations
that will not assign an IP number unless their peer requests ``0.0.0.0''.

<p>
The next option used &quot;add default HISADDR&quot; sets our default route to their IP. This is 'sticky',
meaning that if their IP should change, our route will automatically be updated. With &quot;enable dns&quot;
we are telling our ISP to authenticate our nameserver addresses. Do NOT do this if you are running an local
DNS, as ppp will simply circumvent its use by entering some nameserver lines in /etc/resolv.conf.
d2156 3
a2158 2
Now that we have our <b>ppp.conf</b> file setup we can start trying to make a connection to our ISP. I will
detail some commonly used arguments with ppp.
d2161 4
a2164 4
<li><b>ppp -auto myisp</b> - This will run ppp, configure your interfaces and connect to your ISP and then go
into the background.
<li><b>ppp -ddial myisp</b> - This is similar to -auto, but if your connection is dropped it will try and
reconnect.
d2168 3
a2170 2
By using <b>/usr/sbin/ppp</b> with no options will put you into interactive mode. From here you can interact
directly with the modem, it is great for debugging problems in your <b>ppp.conf</b> file.
d2176 3
a2178 3
In some situations you might want commands executed as your connection is
made or dropped. There are two files you can create for just these
situations. <b>/etc/ppp/ppp.linkup</b> and <b>/etc/ppp/ppp.linkdown</b>.
d2187 3
a2189 1
Extended information can be found at <a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/userppp.html">FreeBSD Handbook entry on User PPP</a>. 
d2198 2
a2199 1
<h3>6.6.1 - How can I tweak the kernel so that there are a higher number of retries and longer timeouts for TCP sessions?</h3>
d2216 3
a2218 3
Using sysctl -a, you can see the current values of these (and many other)
parameters.  To change one, use <tt>sysctl -w</tt>, as in <tt>sysctl -w
net.inet.tcp.keepidle=28800</tt>.  
d2271 17
a2287 17
This section will go through the steps for a simple setup of NFS. This example
details a server on a LAN, with clients accessing NFS on the LAN. It
does not talk about securing NFS. We presume you have already setup
packet filtering or other firewalling protection, to prevent outside access.
If you are allowing outside access to your NFS server, and you have
any kind of sensitive data stored on it, we strongly recommend that you employ 
<a href="faq13.html">IPsec</a>.  Otherwise, people can potentially see your NFS
traffic.  Someone could also pretend to be the IP address which you are 
allowing into your NFS server.  There are several attacks that can result.
When properly configured, IPsec protects against these types of attacks.

<p>
Another important security note.  Don't
just add a filesystem to /etc/exports without some kind of list of allowed
host(s). Without a list of hosts which can mount a particular directory,
anyone on who can reach your host will be able to mount your NFS
exports.
d2291 5
a2295 5
will be serving NFS only to clients within that network. The first step to
setting up NFS is to setup your <i>/etc/exports</i> file. This file lists
which filesystems you wish to have accessible via NFS and defines who is
able to access them. There are many options that you can use in your
<i>/etc/exports</i> file, and it is best that you read the 
d2297 2
a2298 2
man page. For this example we have an <i>/etc/exports</i> that looks like
this:
d2309 8
a2316 7
This means that the local filesystem <b>/work</b> will be made available
via NFS. <b>-alldirs</b> specifies that clients will be able to mount at
any point under the <b>/work</b> mount point. <b>-ro</b> specifies that it
will only be allowed to be mounted read-only. The last two arguments
specify that only clients within the 10.0.0.0 network using a netmask of
255.255.255.0 will be authorized to mount this filesystem. This is
important for some servers that are accessible by different networks.
d2319 4
a2322 4
Once your <i>/etc/exports</i> file is setup, you can go ahead and
setup your NFS server. You should first make sure that options NFSSERVER
&amp; NFSCLIENT are in your kernel configuration. (GENERIC kernel has these
options included.) Next, you should set <strong>nfs_server=YES</strong> in
d2327 3
a2329 3
nfsd(8) which serves on both TCP and UDP using 4 daemons.  You should set
an appropriate number of NFS server daemons to handle the maximum number of
concurrent client requests that you want to service.
d2337 3
a2339 3
mountd(8). This is the daemon that actually services the mount requests on
NFS. To start mountd(8), make sure an empty mountdtab file exists, and run
the daemon:
d2347 2
a2348 2
If you make changes to /etc/exports while NFS is already running,
you need to make mountd aware of this!  Just HUP it:
d2359 1
a2359 1
registered with RPC. To do this, use rpcinfo(8). 
d2378 5
a2382 4
see what is happening with NFS. One is <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=showmount&amp;sektion=8">showmount(8)</a>
, which allows you to view what is currently mounted and who is mounting
it. There is also nfsstat(8) which shows much more verbose statistics. To
use showmount(8), try <b>/usr/bin/showmount -a host</b>. For
d2397 3
a2399 3
To mount a filesystem /work on host 10.0.0.1 to local filesystem /mnt,
do this (note that you don't need to use an IP address, mount will resolve
host names):
d2414 2
a2415 2
It is important that you use <tt>0 0</tt> at the end of this line so that
your computer does not try to fsck the NFS filesystem on boot!!!!
d2424 3
a2426 3
This way, no devices or setuid programs on the NFS server can subvert security measures
on the NFS client.  If you are not mounting programs which you expect
to run on the NFS client, add noexec to this list.
d2438 7
a2444 1
Domain Name Service is a network facility allowing IP network domains to provide name-to-IP address resolution and IP address-to-name resolution in response to a query. Your OpenBSD installation is configured by default as a DNS client but not as a DNS server. That is, your OpenBSD installation can perform a DNS query against a domain name server for the address of a machine, but it cannot answer such DNS queries itself unless you specifically configure it to do so.
d2447 4
a2450 1
My OpenBSD machine is currently connected to the Internet via my ISP, so I can use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&amp;sektion=8">nslookup(8)</a> utility to execute the DNS query:
d2463 7
a2469 1
<b>165.87.201.244</b> is the name server which answered, because it is the nameserver that my ISP told me to use with my account and whose number is entered in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5">/etc/resolv.conf</a>. But the answer was not authoritative. For an authoritative answer, let's find which is the authoritative DNS server for the <i>openbsd.org</i> domain and ask it for the address of <i>www.openbsd.org</i>:
d2503 3
a2505 1
<i>zeus.theos.com</i> is, one would suppose, running OpenBSD and is properly configured to be a DNS server for the <i>openbsd.org</i> domain.
d2510 2
a2511 1
<h3>6.8.1.1 Where can I learn all about DNS and its implementation under OpenBSD?</h3>
d2514 6
a2519 2
<li>See RFCs <a href="http://www.faqs.org/rfcs/rfc1033.html">1033</a>, <a href="http://www.faqs.org/rfcs/rfc1034.html">1034</a>, and <a href="http://www.faqs.org/rfcs/rfc1035.html">1035</a> for more information on the Internet name-domain system.
<li>Read the O'Reilly Associates book <i><a href="../books.html#6">DNS and BIND</a> </i>.
d2521 8
a2528 8
	<ul>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&amp;sektion=8">nslookup(8)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gethostbyname&amp;sektion=3">gethostbyname(3)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=named&amp;sektion=8">named(8)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&amp;sektion=3">resolver(3)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&amp;sektion=5">resolver(5)</a>
	</ul>
d2532 8
a2539 1
The <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a> command is especially useful, because it can query a domain and return information in much the same record format as required in BIND configuration files. You can use <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a> to examine name servers you know to be operating properly as a way of comparing your setup to theirs.
d2545 9
a2553 1
If you aren't sure that you need your machine to perform the role of DNS server, don't configure it as one. The OpenBSD installation does not, by default, activate your machine as a domain name server, though all necessary files are installed. For most workstations, just the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&amp;sektion=5">/etc/hosts</a> file naming local machines' IP addresses and the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&amp;sektion=5">/etc/resolv.conf</a> file for indicating which DNS servers serve you out on the intranet or internet is sufficient.
d2556 2
a2557 1
On the other hand, you might need to set up a machine as a domain name server:
d2560 20
a2579 6
<li>If you have an IP LAN on which you do not wish to replicate "hosts" files of local addresses machine by machine. In such a case, you may configure your OpenBSD machine as a DNS server and serve queries from the other machines on your LAN.
<ul>
<li><b>Note:</b> There is no practical restriction on the number of DNS servers on a LAN. Any or all machines on the LAN may offer DNS service if they are so configured. Whether any such server is considered authoritative from outside your LAN (or is even known from outside your LAN) is a configuration factor that typically is controlled at the next level up from your LAN in the domain hierarchy.
</ul>
<li>If you have an IP LAN on which reside machines you will wish to be findable via DNS query by machines on another IP LAN or WAN.
<li>If you experience difficulties resolving the local hostname to an IP address, or resolving other local names to IP addresses even though you have correct <i>/etc/hosts</i> and <i>/etc/resolv.conf</i> (E.g., Netscape on OpenBSD sometimes exhibits this behavior because it implements its own resolver instead of just using <i>gethostbyname(3)</i> to look up addresses.)
d2583 8
a2590 1
One more consideration is speed of execution. Since name resolution is an iterative process, in which the name server makes repeated queries to other nameservers for addresses in remote domains, name resolution may take slightly longer if you have a modem connection to the Internet and are querying your own DNS server for remote addresses (which will then iteratively query remote name servers via the modem) than if you are querying your ISP's name server (which probably has a faster connection to remote name servers).
d2604 3
a2606 1
BIND is the name of the behavioral specification of a domain name server. Domain name server components exist to collectively implement BIND. 
d2621 2
a2622 1
<h4>6.8.3.2 What are some of the alternatives to providing DNS via the default BIND 4.x implementation?</h4>
d2625 2
a2626 1
<li>The BIND 9.x implementation in <i>/usr/ports/net/bind9</i>.(See <a href="../ports.html">ports</a>)
d2633 7
a2639 1
If you use these alternative implementations of domain name service, you are providing a critical network service using software which may not have been subject to quite the same level of scrutiny as the <a href="http://www.openbsd.org/security.html">security-audited</a> <b>named</b> name daemon in the base installation. This is a significant consideration, since if a domain name server is compromised, resolvers using that name server can be re-directed to impostor sites.
d2645 3
a2647 1
If the default networking setup was installed properly at OpenBSD installation time, everything is already installed. You just have to configure the name daemon ("<tt>named</tt>").
d2653 6
a2658 1
You configure OpenBSD DNS by editing and/or creating files that control the name daemon <tt>named</tt>. These files reside by default in the directory <i>/var/named</i> and its subdirectories, especially the file <i>/var/named/named.boot</i> which is the initialization file for <b>named</b>. There are also a couple of other configuration steps to be taken in <i>/etc</i>.
d2661 6
a2666 1
In this document, we will configure the name daemon on <i>nemo.yewtopia.com</i> be the primary nameserver for the (very small!) domain <i>yewtopia.com</i>. The address of <i>nemo.yewtopia.com</i> is <i>192.168.1.9</i>. Two other machines are on that subnet, <i>crater.yewtopia.com </i>at 192.168.1.1 and <i>earhart.yewtopia.com</i> at 192.168.1.2.
d2688 2
a2689 1
This tells the initialization process in what subdirectory and under which filenames to find the configuration files for <i>yewtopia.com</i>. 
d2752 4
a2755 1
Make sure <i>/etc/resolv.conf</i> now points to the domain of local machine (instead of, for example, your ISP's name server) so that name resolution requests actually get sent to the <b>named</b> you have configured!
d2766 3
a2768 1
If you previously had added the addresses of various machines to the <i>/etc/hosts</i> file, you might consider shortening your <i>/etc/hosts</i> file back to the default:
d2777 8
a2784 1
So that <b>named</b> isn't bypassed in favor of (possibly outdated) addresses in the <i>/etc/hosts</i> file. <u>Make sure you have at least the default <i>localhost</i> entry</u> or your network won't start properly! Note also <i>nemo</i> must appear in its own hosts file or you will see a (mostly harmless) error message at bootup when <i>/etc/netstart</i> invokes <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&amp;sektion=8">route(8)</a> in order to add <i>nemo</i> (whose name appears in <i>/etc/myname</i>).
d2787 2
a2788 1
<h4>6.8.5.3 Using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&amp;sektion=1">dig(1)</a> to examine the results.</h4>
d2827 4
a2830 1
The name daemon <b>named</b> is launched during system startup from <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&amp;sektion=8">/etc/rc</a> if the line installed by default in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&amp;sektion=8">/etc/rc.conf</a>.
d2855 3
a2857 1
To start <b>named</b> by hand, use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&amp;sektion=8">ndc(8)</a> command. For example:
d2869 3
a2871 1
The best way to stop the name daemon is to use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&amp;sektion=8">ndc(8)</a> command. For example:
d2878 5
a2882 1
If this fails to work, find the process id of named and use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kill&amp;sektion=1">kill(1)</a> command to end that process. The PID for <b>named</b> while it is running is found as the first line in the file <i>/var/named/named.pid</i>
d2895 3
a2897 1
To cause a running instance of the name daemon to restart itself reloading its configuration after you have made changes, send it a "hangup" signal:
d2904 3
a2906 1
or by using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&amp;sektion=8">ndc(8)</a> command. For example:
d2931 6
a2936 3
This information is useful for debugging DNS, but in some instances you may not want this output publicly offered.
If you are using classless in-addr(rfc2317) for reverse, host -l may report every domain that your system hosts!
This can easily be remedied by the 'allow-transfer' clause in your zone file.
d2938 3
a2940 1
If you're using Bind8 you need to specify the hosts you want to allow to transfer zones in your individual zone file(s):
d2955 3
a2957 1
You can also block transfers for all domains by editing /var/named.conf and add the 'allow-transfer' parameter to the 'options' section of the configuration file:
d2967 2
a2968 1
If you are using Bind 4 (default in OpenBSD) you can edit /var/named/named.boot and use the 'xfrnets' option.
d2979 5
a2983 4
Typically, the only hosts that need to perform transfers are your DNS slaves and hosts you may want to debug from (127.0.0.1 is usually a good host to
allow transfers from!)
Blocking AXFR queries adds an extra level of privacy, but can hinder useful DNS debugging.
(Thanks to <a href="mailto:ntang@@nachtwache.org">Nicholas Tang</a> for that tip)
d2989 5
a2993 1
There's a lot we didn't tell you, for example, how to set up DNS so that queries for intranet domains that aren't visible from the root of the domain hierarchy get relayed to servers within your enterprise. Read the <a href="#DNS.1.1">documents we recommended</a> for more information on DNS. 
d3002 4
a3005 1
<strong>NOTE:</strong> This does not apply to <strong>ALL</strong> ADSL providers, but much information can be gleaned from the setup here. This is known to work for <a href="http://www.inode.at">Inode</a>, an ADSL provider in Austria.
d3013 4
a3016 1
Because of a conflict between the In-Kernel <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&amp;sektion=4">gre(4)</a> support and pptp, you will need to re-compile your kernel, removing support for gre(4).
d3039 4
a3042 4
To recompile your kernel, check out OpenBSD source via cvs (refer to
<a href="../anoncvs.html">AnonCVS</a> web page for more information),
apply the following patch, and rebuild your kernel as per 
<a href="faq5.html#Building">FAQ 5, Building a kernel</a>.
d3045 6
a3050 2
After you have the <b>pptp</b> package installed and a new kernel, you need to edit a few files to setup for your connection. This packages uses the in-house OpenBSD 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&amp;sektion=8">ppp(8)</a>, so if you are familiar with ppp(8), much of the setup is the same. Also, refer to <a href="#PPP">FAQ 6, PPP</a>.
d3082 3
a3084 1
Where LOGINNAME is your User-ID and PASSWORD is your password. 10.0.0.138 is the IP assigned to your MODEM in the case that you are using ADSL, etc. Make sure this file stays readonly by root (mode 600).
d3090 5
a3094 1
In the above example, our modem came with a preconfigured interface of 10.0.0.138. We now need to assign an address to OUR interface, It's best to pick an IP close to the one given by your MODEM, or use the static IP assigned to you. Read more about setting up interfaces in <a href="#Setup">FAQ 6, Setup</a>.
d3097 2
a3098 1
Once your interface is setup, you should be able to create a pptp connection with the command.
d3105 2
a3106 1
Since this uses the in-house OpenBSD ppp(8), two processes are started. You can kill pptp by killing both these processes:
d3114 2
a3115 1
It is recommended to open <tt>/var/log/messages</tt> in a extra terminal window, to recognize possible problems.
d3123 2
a3124 1
We also suggest that you put the startup command in <i>/etc/rc.local</i> so that you automatically connect on reboot.
d3132 1
a3132 1
 is a link between two or more separate networks.  Unlike a router, 
d3319 1
a3319 1
<small>$OpenBSD: faq6.html,v 1.148 2002/10/26 14:58:50 dhartmei Exp $</small>
@


1.148
log
@'pass in any' -> 'pass in all'. 'all' is short for 'from any to any'.
Found by pilot9@@efnet.
@
text
@d1 1
d6 1
d14 2
a15 1
<body bgcolor= "#ffffff" text= "#000000">
d19 2
a20 2
<h2><font color=#e00000>6.0 - Networking</font><hr></h2>
</p>
d23 3
a25 2
<ul><h3>Table of Contents</h3>
<li><A href= "#Intro" >6.0.1 - Before we go any further</a>
d31 1
a31 1
<li><A href= "#Tuning">6.6 - Tuning networking parameters</a>
d35 1
a35 1
<li><a href="#Bridge" >6.10 - Setting up a bridge with OpenBSD</a>
d37 1
a37 1
</p>
d40 6
a45 6
<br>
<P>
<a name= "Intro"></a>
<A name="6.0.1"></a>
<H2>6.0.1 - Before we go any further</h2>
<P>
d49 1
a49 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">
d51 1
a51 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&sektion=1">
d53 2
a54 1
<P>
d63 1
d74 2
a75 1
<a name= "Setup"></a>
d80 1
a80 1
<a name= "Setup.1"></a>
a82 1
</p>
d89 1
a89 1
booting process using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dmesg&sektion=8">dmesg(8)</a> command.
d91 1
a91 1
using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">ifconfig(8)</a> command.
a93 1
</p>
d95 1
a95 1
<ul><pre>
d98 1
a98 1
</pre></ul>
d102 1
a102 1
<A HREF="../plat.html">supported hardware list</a> for your platform.  You
a105 1
</p>
d108 1
a108 1
You can find out what network interfaces have been identified by using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">ifconfig(8)</a>
d111 1
a111 1
an <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp&sektion=4">fxp(4)</a>.
d114 1
a114 1
<ul><pre>
d143 1
a143 1
</pre></ul>
d147 1
a147 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">ifconfig(8)</a> 
d152 1
a152 1
</p>
a156 1
</p>
d159 10
a168 10
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&sektion=4">lo</a> - Loopback Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&sektion=4&manpath=OpenBSD+3.1">pflog</a> - Packet Filter Logging Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sl&sektion=4">sl</a> - SLIP Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=4">ppp</a> - Point to Point Protocol
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun&sektion=4">tun</a> - Tunnel Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&sektion=4">enc</a> - Encapsulating Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&sektion=4">bridge</a> - Ethernet Bridge Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vlan&sektion=4">vlan</a> - IEEE 802.1Q Encapsulation Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&sektion=4">gre</a> - GRE/MobileIP Encapsulation Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gif&sektion=4">gif</a> - Generic IPv4/IPv6 Tunnel Interface
a174 1
</p>
d176 1
a176 1
<ul><pre>
d178 1
a178 1
</pre></ul>
d181 1
a181 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5">hostname.if(5)</a> man page.)
a185 1
</p>
d187 1
a187 1
<ul><pre>
d190 1
a190 1
</pre></ul>
a195 1
</p>
d197 1
a197 1
<ul><pre>
d199 1
a199 1
</pre></ul>
d201 1
a208 1
</p>
d210 1
a210 1
<ul><pre>
d213 1
a213 1
</pre></ul>
d218 1
a218 1
setup your nameservers, and your <strong>/etc/hosts</strong> file (see the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&sektion=5">hosts(5)</a> man page). To setup your nameservers, you will
d220 1
a220 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5">resolv.conf(5)</a>
a222 1
</p>
d224 1
a224 1
<ul><pre>
d230 1
a230 1
</pre></ul>
a234 1
</p>
d236 1
a236 1
<ul><pre>
d242 1
a242 1
</pre></ul>
d250 2
a251 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">ifconfig(8)</a>. You can also check your routes via
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&sektion=1">netstat(1)</a> or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&sektion=8">route(8)</a>.
a252 1
</p>
d254 1
a254 1
<ul><pre>
d283 1
a283 1
</pre></ul>
d286 1
a286 1
<a name= "Setup.2"></a>
a288 1
</p>
d296 1
a296 1
availability of <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&sektion=4">IPv4</a> addresses from network service providers
a299 1
</p>
d304 1
a304 1
using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&sektion=8">sysctl(8)</a>
d306 1
a306 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&sektion=5">/etc/sysctl.conf(5)</a>
a308 1
</p>
d310 1
a310 1
<ul><pre>
d312 1
a312 1
</pre></ul>
d316 1
a316 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&sektion=8">sysctl(8)</a>
a318 1
</p>
d320 1
a320 1
<ul><pre>
d323 1
a323 1
</pre></ul>
d327 1
a327 1
such as <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=routed&sektion=8">routed(8)</a>,
a330 1
</p>
d333 1
a333 1
<a name= "Setup.3"></a>
a335 1
</p>
a337 1

d340 1
a340 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5"><i>/etc/hostname.&lt;if&gt;</i></a>.
d342 1
a342 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&sektion=8">/etc/rc(8)</a> script,
a346 1
</p>
d359 1
a365 1
</p>
d367 1
a367 1
<ul><pre>
d372 1
a372 1
</pre></ul>
d375 1
a375 2
Once you've made this file, it just takes a reboot for it to take effect. You can, however, bring up the aliases by hand using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">ifconfig(8)</a> utility. To bring up the first alias you would use the command:
</p>
d377 1
a377 1
<ul><pre>
d379 1
a379 1
</pre></ul>
a382 1
</p>
d384 1
a384 1
<ul><pre>
d390 1
a390 2
</pre></ul>

d394 2
a395 2
<a name= "6.2"></a>
<a name= "PF"></a>
d397 1
a397 1
</p>
d402 1
a402 1
</p>
d408 1
a408 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5&manpath=OpenBSD+3.1">/etc/pf.conf(5)</a></i> 
d410 2
a411 2
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5&manpath=OpenBSD+3.1">/etc/nat.conf(5)</a></i>.
</p>
d414 1
a414 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&sektion=8">/etc/rc.conf(8)</a></i>
a415 1
</p>
d417 1
a417 1
<ul><pre>
d419 1
a419 1
</pre></ul>
d423 1
a423 1
the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&sektion=8">sysctl(8)</a>
d426 1
a426 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&sektion=5">/etc/sysctl.conf(5)</a></i>
d428 1
a428 1
</p>
d432 1
a432 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&sektion=8">/etc/rc.conf(8)</a></i>
d434 3
a436 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&sektion=8&manpath=OpenBSD+3.1">pfctl(8)</a> command.
</p>
<ul><pre>
d440 1
a440 1
</pre></ul>
d447 2
a448 1
</p>
d450 2
a451 1
<ul><pre>
d453 2
a454 1
</pre></ul>
d459 2
a460 2
</p>
<ul><pre>
d462 1
a462 1
</pre></ul>
d466 2
a467 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5&manpath=OpenBSD+3.1">pf.conf(5)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5&manpath=OpenBSD+3.1">nat.conf(5)</a> 
a473 1
</p>
a476 1
</p>
d483 1
a483 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5&manpath=OpenBSD+3.1">pf.conf(5)</a>. 
a488 1
</p>
a493 1
</p>
d499 1
a499 1
<ul><pre>
d502 1
a502 1
</pre></ul>
d504 1
d506 2
a507 1
<ul><pre>
d510 1
a510 1
</pre></ul>
d512 1
d516 2
a517 2
address family, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inet&sektion=4">inet (v4)</a> or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inet6&sektion=4">inet6 (v6)</a>&quot;.
</p>
d523 1
a523 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&sektion=5">/etc/protocols(5)</a></i>
d526 3
a528 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&sektion=4">tcp(4)</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&sektion=4">udp(4)</a> and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&sektion=4">icmp(4)</a>.
</p>
d535 1
a535 1
<ul><pre>
d539 1
a539 1
</pre></ul>
d541 1
d548 1
a548 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&sektion=5">/etc/services(5)</a>
d557 1
a557 1
<ul><pre>
d561 1
a561 1
</pre></ul>
d563 1
a567 1
</p>
d575 1
a575 1
<ul><pre>
d579 1
a579 1
</pre></ul>
a586 1
</p>
d588 1
d590 2
a591 1
<p> The safest packet filtering policy is a default deny policy. 
d596 1
a596 1
</p>
d603 2
a604 2
</p>
<ul><pre>
d610 1
a610 1
</pre></ul>
d620 1
a620 1
<ul><pre>
d626 1
a626 1
</pre></ul>
d628 1
d633 1
a633 1
<ul><pre>
d635 3
a637 1
</pre></ul>
d639 2
a640 1
<ul><pre>
d642 1
a642 2
</pre></ul>
</p>
d644 1
d652 2
a653 1
<ul><pre>
d658 1
a658 1
</pre></ul>
d660 1
d664 1
a664 1
<ul><pre>
d683 1
a683 2
</pre></ul>
</p>
d685 1
d691 2
a692 1
<ul><pre>
d695 3
a697 1
</pre></ul>
d701 1
a701 1
</p>
d705 1
a705 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&sektion=8&manpath=OpenBSD+3.1">pflogd(8)</a>,
d707 1
a707 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&sektion=8&manpath=OpenBSD+3.1">tcpdump(8)</a>
d709 1
a709 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&sektion=8">/etc/rc(8)</a></i>
d711 1
a711 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&sektion=8">/etc/rc.conf(8)</a></i>.
d713 2
a714 1
<ul><pre>
d716 2
a717 2
</pre></ul>
</p>
d722 2
a723 1
<ul><pre>
d725 3
a727 1
</pre></ul>
d730 2
a731 1
<ul><pre>
d733 3
a735 1
</pre></ul>
d738 1
a738 1
</p>
d746 1
a746 1
</p>
d751 2
a752 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=telnet&sektion=1">telnet(1)</a> or
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp&sektion=1">ftp(1)</a> logins).
</p>
d754 1
a760 1
</p>
d762 2
a763 1
<p><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=syslogd&sektion=8&manpath=OpenBSD+3.1">Syslogd(8) </a>
a765 1
</p>
d770 1
a770 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=adduser&sektion=8&manpath=OpenBSD+3.1">adduser(8)</a>.
</p>
d774 1
a774 1
</p>
d777 2
a778 1
<ul><pre>
d786 1
a786 1
</ul></pre>
d789 1
d791 2
a792 1
<ul><pre>
d799 1
a799 2
</ul></pre>
</p>
d803 2
a804 1
<ul><pre>
d806 1
a806 1
</pre></ul>
d808 1
d811 1
a811 1
<ul><pre>
d814 1
a814 1
</ul></pre>
d816 1
d818 2
a819 1
<ul><pre>
d821 1
a821 1
</pre></ul>
d823 1
d826 1
a826 1
<ul><pre>
d829 1
a829 1
</ul></pre>
d831 1
d833 2
a834 1
<ul><pre>
d836 1
a836 1
</ul></pre>
d840 2
a841 1
<ul><pre>
d843 3
a845 1
</ul></pre>
d847 1
a847 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&sektion=5&manpath=OpenBSD+3.1">
a848 1
</p>
d854 2
a855 1
</p>
d858 2
a859 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=newsyslog&sektion=8&manpath=OpenBSD+3.1">
newsyslogd(8) </a> is no longer necessary and it should be
d863 2
a864 1
<ul><pre>
d867 2
a868 1
</ul></pre>
a874 1
</p>
a877 1
</p>
d883 2
a884 1
<ul><pre>
d887 3
a889 1
</pre></ul>
d892 2
a893 1
<ul><pre>
d896 1
a896 2
</pre></ul>
</p>
a900 1
</p>
d910 2
a911 1
<ul><pre>
d913 3
a915 1
</pre></ul>
a918 1
</p>
a921 1
</p>
d929 2
a930 1
<ul><pre>
d932 1
a932 2
</pre></ul>
</p>
a935 1
</p>
d944 2
a945 1
<ul><pre>
d947 5
a951 3
</pre></ul>
(Thanks to <a href=mailto:halogen@@nol.net>Kyle Hargraves</a> for that tip)
</p>
d959 1
a959 1
</p>
d966 1
a966 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh&sektion=1">ssh(1)</a>
d968 1
a968 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lynx&sektion=1">lynx(1)</a> to look up 
d977 2
a978 2
</p>
<ul><pre>
d984 2
a985 1
</pre></ul>
d999 2
a1000 1
<ul><pre>
d1010 2
a1011 2
</pre></ul>
</p>
d1021 2
a1022 1
<ul><pre>
d1049 2
a1050 2
</pre></ul>
</p>
a1054 1
</p>
a1057 1
</p>
d1063 2
a1064 1
<ul><pre>
d1066 3
a1068 1
</pre></ul>
d1070 1
a1070 1
</p>
d1075 2
a1076 1
<ul><pre>
d1082 1
a1082 2
</pre></ul>
</p>
a1085 1
</p>
d1091 2
a1092 2
</p>
<ul><pre>
d1097 1
a1097 2
</pre></ul>
</p>
a1101 1
</p>
d1104 2
a1105 1
<ul><pre>
d1134 1
a1134 2
</pre></ul>
</p>
d1139 2
a1140 1
<ul><pre>
d1142 4
a1145 2
</pre></ul>
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&sektion=8&manpath=OpenBSD+3.1">pflogd(8)</a> will write the ip log entries to <i>/var/log/pflog</i>.
d1147 2
a1148 2
read by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&sektion=8&manpath=OpenBSD+3.1">tcpdump(8)</a>, NOT directly by humans.
</p>
a1151 1
</p>
d1155 1
a1155 1
</p>
d1160 1
a1160 1
</p>
d1166 1
a1166 1
their semantics haven't changed.</li>
d1168 1
a1168 1
keyword, as logging is not performed by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=syslogd&sektion=8">syslogd(8)</a>, but by a separate 
d1171 1
a1171 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&sektion=8&manpath=OpenBSD+3.1">tcpdump(8)</a>.</li>
d1173 1
a1173 1
the <a href="#normalization">scrub</a> option performs.</li>
d1176 1
a1176 1
view the rule numbers PF has assigned, use the command <tt>pfctl -sr</tt></li>
d1179 1
d1184 1
a1184 1
</p>
d1189 2
a1190 1
</p>
a1205 1
</p>
d1210 1
a1210 2
192.168.0.0/16 (192.168.0.0 - 192.168.255.255)<br>
</p>
a1215 1
</p>
d1217 1
a1217 2

<br>
a1225 1
</p>
d1227 1
a1227 1
<ul>
d1229 14
a1242 12
<ul>
Intel EtherExpress Pro/100 <b>fxp0</b><br>
Connected to the EXTERNAL LAN (or WAN)<br>
<b>IP Address: </b>24.5.0.5<br>
<b>Netmask: </b>255.255.255.0<br>
<br>
Compaq Netelligent 10/100Mb <b>tl0</b><br>
Connected to the INTERNAL LAN<br>
<b>IP Address: </b>192.168.1.1<br>
<b>Netmask: </b>255.255.255.0<br>	
</ul>
<br>
d1244 8
a1251 6
<ul>
<b>IP Address: </b>24.5.0.5<br>
<b>Netmask: </b>255.255.255.0<br>
<b>Gateway: </b>24.5.0.1<br>
</ul>
<br>
a1252 1
<ul>
d1260 3
a1262 2
</ul>
<br>
d1264 1
a1264 1
<ul><pre>
d1280 2
a1281 2
</pre></ul>
</ul>
d1283 1
a1283 1
<br>
a1285 1
<br>
d1287 1
d1300 1
a1300 1
</p>
d1308 1
a1308 1
</p>
a1324 1
</p>
a1327 1
</p>
d1329 1
a1329 1
<ul><pre>
d1340 1
a1340 1
</pre></ul>
d1342 1
a1342 1
<br>
a1353 1
</p>
a1362 1
</p>
a1366 1
</p>
d1368 1
a1368 1
<br>
a1375 1
</p>
a1378 1
</p>
d1380 1
a1380 1
<ul><pre>
d1382 1
a1382 1
</pre></ul>
a1385 1
</p>
d1387 1
a1387 1
<ul><pre>
d1389 1
a1389 1
</pre></ul>
a1393 1
</p>
d1395 1
a1395 1
<br>
d1401 1
a1401 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5&manpath=OpenBSD+3.1">/etc/pf.conf</a></i>).
a1404 1
</p>
d1406 1
a1406 1
<ul><pre>
d1409 1
a1409 1
</pre></ul>
a1412 1
</p>
d1416 1
a1416 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5&manpath=OpenBSD+3.1">/etc/nat.conf</a></i>)
a1419 1
</p>
d1421 1
a1421 1
<ul><pre>
d1423 1
a1423 1
</pre></ul>
a1426 8
</p>

<ul>
<strong>"nat"</strong>
<p>
This indicates the command you are giving is a NAT rule.
</p>
</ul>
d1428 13
a1440 11
<ul>
<strong>"fxp0"</strong>
<p>
This is the network interface that is connected to the Internet.
</p>
</ul>

<ul>
<b>"192.168.1.0/24"</b>
<p>
the IP address and netmask (the netmask is in
d1443 6
a1448 2
</p>
</ul>
a1449 2
<ul>
<b>"24.5.0.5"</b>
a1450 4
This is the external IP address the internal IP addresses will be mapped to.
</p>
</ul>

a1458 1
</p>
a1462 1
</p>
d1464 1
a1464 1
<ul><pre>
d1467 1
a1467 1
</pre></ul>
a1473 2
</p>

a1478 1
</p>
d1480 1
a1480 1
<br>
d1484 1
a1484 1
<br>
a1491 1
</p>
d1493 1
a1493 1
<ul><pre>
d1498 1
a1498 1
</pre></ul>
d1502 4
a1505 5
</p>
<ul>
<b>"192.168.1.35:2132"</b>
<p>
This tells you the IP address of the
d1508 5
a1512 6
</p>
</ul>
<ul>
<b>"24.5.0.5:53136"</b>
<p>
This denotes that the connection is going
d1514 12
a1525 10
</p>
</ul>
<ul>
<b>"65.42.33.245:22"</b>
<p>
The IP address and the port being connected to.
</p>
</ul>
<ul>
<b>"TIME_WAIT:TIME_WAIT"</b>
a1526 4
This indicates what state PF believes the TCP connection to be in.
</p>
</ul>

d1528 1
a1528 1
<b> Issues with FTP and NAT</b>
d1534 1
a1534 1
</p>
d1545 1
a1545 1
</p>
d1547 1
a1547 2
With passive mode FTP (the default with OpenBSD <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp&sektion=1">ftp(1)</a>
d1555 6
a1560 4
<dl><dt>
<pre>passive off
</pre>
</dt></dl>
d1562 2
a1563 2
</p>
<P>
d1567 1
a1567 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&sektion=8&manpath=OpenBSD+3.1">ftp-proxy(8)</a>.
d1569 2
a1570 1
<ul><pre>
d1572 3
a1574 1
</pre></ul>
d1578 2
a1579 2
</p>
<P>
d1583 2
a1584 1
<ul><pre>
d1586 3
a1588 1
</pre></ul>
d1590 1
a1590 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&sektion=8">inetd(8)</a>.
d1592 2
a1593 1
<ul><pre>
d1595 3
a1597 1
</pre></ul>
d1601 2
a1602 2
</p>
<br>
a1615 1
</p>
a1620 1
</p>
d1622 1
a1622 1
<ul><pre>
d1624 1
a1624 1
</pre></ul>
d1628 4
a1631 5
</p>
<ul>
<b>"rdr"</b>
<p>
This is the command you are giving NAT. It is telling NAT 
d1633 1
a1633 2
</p>
</ul>
d1635 8
a1642 11
<ul>
<b>"on fxp0"</b>
<p>
This is the network interface that is connected to the Internet.
</p>
</ul>

<ul>
<b>"from any to any"</b>
<p>
This indicates which IP addresses to redirect (from any coming in 
d1644 1
a1644 2
</p>
</ul>
d1646 3
a1648 4
<ul>
<b>"port 80"</b>
<p>
This is the incoming port (80) that should be redirected. The number
d1653 5
a1657 6
</p>
</ul>
<ul>
<b>"192.168.1.80 port 80"</b>
<p>
The IP address of the LAN machine which the packets are redirected to. 
d1665 2
a1666 2
</p>
</ul>
d1670 1
a1670 1
</p>
a1672 1
</p>
d1683 2
a1684 1
<ul><pre>
d1686 3
a1688 1
</pre></ul>
a1695 1
</p>
d1697 1
a1697 1
<br>
a1715 1
</p>
d1717 1
a1717 1
<br>
d1724 1
d1728 2
d1745 1
a1745 1
</p>
d1763 1
a1763 1
</p>
d1768 2
a1769 1
</p>
d1779 2
a1780 1
</p>
d1792 2
a1793 1
</p>
d1802 1
a1802 1
</p>
d1805 1
a1805 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&sektion=8">inetd(8)</a>
d1807 1
a1807 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&sektion=1">nc(1)</a>.
d1811 1
d1815 2
d1819 1
d1821 1
a1821 1
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -> 127.0.0.1 port 5000
d1823 2
a1824 1
</p>
d1829 1
d1831 1
a1831 1
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -> $server
d1833 1
a1833 1
nat on $int_if proto tcp from $int_net to $server port 80 -> $int_if
d1835 2
a1847 1
</p>
d1849 1
a1859 1
</p>
d1863 1
d1865 2
a1866 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5&manpath=OpenBSD+3.1">nat.conf man page</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&sektion=8&manpath=OpenBSD+3.1">pfctl man page</a>
a1868 1
<p>
a1869 1
<br>
a1874 1
</p>
d1876 1
d1878 3
a1880 1
<p>To use the DHCP client <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient&sektion=8">dhclient(8)</a>
d1884 1
d1888 2
d1892 1
d1896 2
a1897 1
<PRE>
d1900 2
d1903 3
a1905 1
<P>No matter how you start the dhclient, you can edit
d1910 1
d1915 2
d1919 2
a1920 1
<P>
d1923 2
a1924 1
If you want to use OpenBSD as a DHCP server <A href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd&sektion=8">dhcpd(8)</a>,
d1927 1
d1931 2
d1935 1
d1946 1
d1952 1
d1956 2
a1957 1
<PRE>
d1959 3
a1961 1
</PRE>
d1964 2
a1965 1
<P>
d1969 1
d1973 2
d1976 1
a1976 1
See <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcp-options&sektion=5">dhcp-options(5)</a> for more options that your DHCP
d1978 2
d1981 2
a1982 2
<a name= "PPP"></a>
<a name= "6.5"></a>
a1983 1
</p>
d1985 1
d1989 1
a1989 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppd&sektion=8">pppd(8)</a> - Which is
d1991 1
a1991 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=8">ppp(8)</a> - Which is
a1997 1
</p>
a2010 1
</p>
a2013 1
</p>
d2015 1
a2015 1
<ul><pre><strong>
d2017 1
a2017 2
</strong></pre></ul>

d2019 1
a2028 1
</p>
d2030 1
a2030 1
<ul>
d2038 1
a2038 1
</ul>
d2043 1
a2043 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=8">ppp(8)</a> for more info on
a2047 1
</p>
a2053 1
<p>
d2055 1
a2055 1
<ul>
d2065 1
a2065 1
</ul>
a2074 1
</p>
d2076 1
a2076 1
<ul><pre>
d2078 1
a2078 1
</pre></ul>
a2088 1
</p>
a2094 1
</p>
d2096 1
a2101 1
</p>
a2112 1
</p>
d2114 1
a2121 1
</p>
d2130 1
a2130 1
</p>
d2133 2
a2134 2
<a name= "Tuning"></a>
<a name= "6.6"></a>
d2137 4
a2140 1
<H3>6.6.1 - How can I tweak the kernel so that there are a higher number of retries and longer timeouts for TCP sessions?</h3>
d2144 2
a2145 1
<P>
d2147 1
d2153 2
d2158 2
d2161 2
d2171 8
a2178 3
<H3>6.6.3 - I don't want the kernel to dynamically allocate a certain port</h3>
There is a sysctl for this also.  From <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&sektion=8">sysctl(8)</a>:
<PRE>
d2192 1
d2194 1
a2194 1
<a name= "NFS"></a>
a2196 1
</p>
d2198 2
a2199 1
<p> NFS, or Network File System, is used to share a filesystem over the
a2202 2
<p>

d2204 3
a2206 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd&sektion=8">nfsd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mountd&sektion=8">mountd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&sektion=5">exports(5)</a>
d2220 2
a2221 1
<P>
a2226 1
</p>
d2235 1
a2235 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&sektion=5">exports(5)</a>
a2237 1
</p>
d2239 1
a2239 1
<ul><pre>
d2245 1
a2245 1
</pre></ul>
a2254 1
</p>
d2256 2
a2257 1
<p> Once your <i>/etc/exports</i> file is setup, you can go ahead and
d2269 1
a2269 3
<P>

<ul><pre>
d2271 1
a2271 1
</pre></ul>
a2277 1
<p>
d2279 1
a2279 1
<ul><pre>
d2282 1
a2282 1
</pre></ul>
d2284 1
a2284 1
<P>
d2288 1
a2288 1
<UL><PRE>
d2290 1
a2290 3
</pre></ul>

<P>
d2292 1
a2297 1
<p>
d2299 1
a2299 1
<ul><pre>
d2312 1
a2312 1
</pre></ul>
d2314 3
a2316 2
<p> During normal usage, there are a few other utilities that allow you to
see what is happening with NFS. One is <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=showmount&sektion=8">showmount(8)</a>
d2322 1
a2322 3
<P>

<ul><pre>
d2326 1
a2326 1
</pre></ul>
d2328 1
d2333 1
a2333 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_nfs&sektion=8">mount_nfs(8)</a>.
a2336 1
<p>
d2338 1
a2338 1
<ul><pre>
d2340 1
a2340 1
</pre></ul>
a2344 1
<p>
d2346 1
a2346 1
<ul><pre>
d2348 1
a2348 1
</pre></ul>
a2354 1
<p>
d2356 1
a2356 1
<ul><pre>
d2358 1
a2358 1
</pre></ul>
d2367 1
a2367 1
<a name= "DNS"></a>
a2369 1
</p>
d2371 1
d2375 1
a2375 1
Domain Name Service is a network facility allowing IP network domains to provide name-to-IP address resolution and IP address-to-name resolution in response to a query. Your OpenBSD installation is configured by default as a DNS client but not as a DNS server. That is, your OpenBSD installation can perform a DNS query against a domain name server for the address of a machine, but it cannot answer such DNS queries itself unless you specifically configure it to do so.</p>
d2378 1
a2378 2
My OpenBSD machine is currently connected to the Internet via my ISP, so I can use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&sektion=8">nslookup(8)</a> utility to execute the DNS query:
</p>
d2380 1
a2380 1
<ul><pre>
d2388 1
a2388 1
</pre></ul>
d2391 1
a2391 2
<b>165.87.201.244</b> is the name server which answered, because it is the nameserver that my ISP told me to use with my account and whose number is entered in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5">/etc/resolv.conf</a>. But the answer was not authoritative. For an authoritative answer, let's find which is the authoritative DNS server for the <i>openbsd.org</i> domain and ask it for the address of <i>www.openbsd.org</i>:
</p>
d2393 1
a2393 1
<ul><pre>
d2422 1
a2422 1
</pre></ul>
a2425 1
</p>
d2427 1
d2433 3
a2435 3
<li>See RFCs <a href="http://www.faqs.org/rfcs/rfc1033.html">1033</a>, <a href="http://www.faqs.org/rfcs/rfc1034.html">1034</a>, and <a href="http://www.faqs.org/rfcs/rfc1035.html">1035</a> for more information on the Internet name-domain system.</li>
<li>Read the O'Reilly Associates book <i><a href="../books.html#6">DNS and BIND</a> </i>.</li>
<li>Read the <a href="http://www.openbsd.org/cgi-bin/man.cgi">OpenBSD Manual</a> especially the pages for</li>
d2437 6
a2442 6
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1">dig(1)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&sektion=8">nslookup(8)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gethostbyname&sektion=3">gethostbyname(3)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=named&sektion=8">named(8)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&sektion=3">resolver(3)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&sektion=5">resolver(5)</a>
d2447 1
a2447 2
The <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1">dig(1)</a> command is especially useful, because it can query a domain and return information in much the same record format as required in BIND configuration files. You can use <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1">dig(1)</a> to examine name servers you know to be operating properly as a way of comparing your setup to theirs.
</p>
d2449 1
d2453 1
a2453 2
If you aren't sure that you need your machine to perform the role of DNS server, don't configure it as one. The OpenBSD installation does not, by default, activate your machine as a domain name server, though all necessary files are installed. For most workstations, just the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&sektion=5">/etc/hosts</a> file naming local machines' IP addresses and the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5">/etc/resolv.conf</a> file for indicating which DNS servers serve you out on the intranet or internet is sufficient.
</p>
d2457 1
d2459 1
a2459 1
<li>If you have an IP LAN on which you do not wish to replicate "hosts" files of local addresses machine by machine. In such a case, you may configure your OpenBSD machine as a DNS server and serve queries from the other machines on your LAN.</li>
d2461 1
a2461 1
<li><b>Note:</b> There is no practical restriction on the number of DNS servers on a LAN. Any or all machines on the LAN may offer DNS service if they are so configured. Whether any such server is considered authoritative from outside your LAN (or is even known from outside your LAN) is a configuration factor that typically is controlled at the next level up from your LAN in the domain hierarchy.</li>
d2463 2
a2464 2
<li>If you have an IP LAN on which reside machines you will wish to be findable via DNS query by machines on another IP LAN or WAN.</li>
<li>If you experience difficulties resolving the local hostname to an IP address, or resolving other local names to IP addresses even though you have correct <i>/etc/hosts</i> and <i>/etc/resolv.conf</i> (E.g., Netscape on OpenBSD sometimes exhibits this behavior because it implements its own resolver instead of just using <i>gethostbyname(3)</i> to look up addresses.)</li>
a2468 1
</p>
d2470 1
d2474 2
a2475 2
<li>named <i>("name daemon")</i></li>
<li>Configuration files in the directory hierarchy under <i>/var/named/</i></li>
d2478 1
a2482 1
</p>
d2486 1
d2488 3
a2490 3
<li>BIND 4</li>
<li>BIND 8</li>
<li>BIND 9</li>
d2496 1
d2503 1
a2507 1
</p>
d2509 1
a2513 1
</p>
d2515 1
a2519 1
</p>
a2522 1
</p>
d2524 1
d2527 1
d2530 1
a2530 1
<ul><pre>
d2541 1
a2541 1
</pre></ul>
d2546 1
d2549 1
a2549 1
<ul><pre>
d2559 1
a2559 1
</pre></ul>
d2561 1
d2564 1
a2564 1
<ul><pre>
d2579 1
a2579 1
</pre></ul>
d2581 1
d2584 1
a2584 1
<ul><pre>
d2598 1
a2598 1
</pre></ul>
d2600 1
d2603 1
d2605 1
a2607 1
</p>
d2609 1
a2609 1
<ul><pre>
d2612 1
a2612 1
</pre></ul>
d2614 1
a2618 1
</p>
d2620 1
a2620 1
<ul><pre>
d2624 1
a2624 1
</pre></ul>
d2627 1
a2627 2
So that <b>named</b> isn't bypassed in favor of (possibly outdated) addresses in the <i>/etc/hosts</i> file. <u>Make sure you have at least the default <i>localhost</i> entry</u> or your network won't start properly! Note also <i>nemo</i> must appear in its own hosts file or you will see a (mostly harmless) error message at bootup when <i>/etc/netstart</i> invokes <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&sektion=8">route(8)</a> in order to add <i>nemo</i> (whose name appears in <i>/etc/myname</i>).
</p>
d2629 2
a2630 1
<h4>6.8.5.3 Using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1">dig(1)</a> to examine the results.</h4>
d2632 1
a2632 1
<ul><pre>
d2660 1
a2660 1
</pre></ul>
d2662 1
d2665 1
d2669 1
a2669 2
The name daemon <b>named</b> is launched during system startup from <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&sektion=8">/etc/rc</a> if the line installed by default in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&sektion=8">/etc/rc.conf</a>.
</p>
d2671 1
a2671 1
<ul><pre>
d2673 1
a2673 1
</pre></ul>
a2676 1
</p>
d2678 1
a2678 1
<ul><pre>
d2680 1
a2680 1
</pre></ul>
a2683 1
</p>
d2685 1
a2685 1
<ul><pre>
d2688 1
a2688 1
</pre></ul>
a2691 1
</p>
d2694 1
a2694 2
To start <b>named</b> by hand, use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&sektion=8">ndc(8)</a> command. For example:
</p>
d2696 1
a2696 1
<ul><pre>
d2700 1
a2700 1
</pre></ul>
d2702 1
d2706 1
a2706 2
The best way to stop the name daemon is to use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&sektion=8">ndc(8)</a> command. For example:
</p>
d2708 1
a2708 1
<ul><pre>
d2710 1
a2710 1
</pre></ul>
d2713 1
a2713 2
If this fails to work, find the process id of named and use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kill&sektion=1">kill(1)</a> command to end that process. The PID for <b>named</b> while it is running is found as the first line in the file <i>/var/named/named.pid</i>
</p>
d2715 1
a2715 1
<ul><pre>
d2720 1
a2720 1
</pre></ul>
d2722 1
a2726 1
</p>
d2728 1
a2728 1
<ul><pre>
d2730 1
a2730 1
</pre></ul>
d2733 1
a2733 2
or by using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&sektion=8">ndc(8)</a> command. For example:
</p>
d2735 1
a2735 1
<ul><pre>
d2737 1
a2737 1
</pre></ul>
d2739 1
d2741 1
d2744 2
a2745 1
<ul><pre>
d2755 2
a2756 1
</pre></ul>
d2763 2
a2764 1
<ul><pre>
d2774 3
a2776 1
</pre></ul>
d2778 2
a2779 1
<ul><pre>
d2783 3
a2785 1
</pre></ul>
d2787 3
a2789 2
If you are using Bind 4 (default in OpenBSD) you can edit /var/named/named.boot and use the 'xfrnets' option.<br>
<ul><pre>
d2794 3
a2796 1
</pre></ul><br>
d2801 3
a2803 2
(Thanks to <a href=mailto:ntang@@nachtwache.org>Nicholas Tang</a> for that tip)
</p>
d2805 1
d2808 1
a2808 1
</p>
d2811 1
a2811 1
<a name= "PPTP"></a>
a2813 1
</p>
a2816 1
</p>
a2821 1
</p>
d2824 1
a2824 2
Because of a conflict between the In-Kernel <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&sektion=4">gre(4)</a> support and pptp, you will need to re-compile your kernel, removing support for gre(4).
</p>
d2826 1
a2826 1
<ul>Patch to remove GRE(4) support.
d2844 1
a2844 1
</pre></ul>
a2850 1
</p>
d2854 1
a2854 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=8">ppp(8)</a>, so if you are familiar with ppp(8), much of the setup is the same. Also, refer to <a href="#PPP">FAQ 6, PPP</a>.
</p>
a2863 1
</p>
d2865 1
a2865 1
<ul><pre>
d2872 1
a2872 1
</pre></ul>
a2875 1
</p>
d2880 1
a2880 1
<ul><pre>
d2883 1
a2883 1
</pre></ul>
a2886 1
</p>
d2888 1
a2892 1
</p>
d2897 1
a2897 1
<ul><pre>
d2899 1
a2899 1
</pre></ul>
a2902 1
</p>
d2904 1
a2904 1
<ul><pre>
d2907 1
a2907 1
</pre></ul>
d2909 1
d2912 1
a2912 1
<ul>
d2915 1
a2915 2
</pre></ul>
</p>
a2918 1
</p>
d2921 1
a2921 1
<a name= "Bridge"></a>
d2924 2
a2925 1
A <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&sektion=4">bridge</a>
d2942 1
d2944 2
d2955 1
a2955 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=fxp&sektion=4"><tt>fxp0</tt></a>)
d2957 1
a2957 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&sektion=4"><tt>ep0</tt></a>)
d2976 1
d2981 1
d2989 1
d2991 1
a2991 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8">ifconfig(8)</a>
d2995 1
a2995 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&sektion=4">man
page</a>.
d3000 1
a3000 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridgename.if&sektion=5"><tt>bridgename.bridge0</tt></a>. 
d3012 1
d3021 1
d3043 1
d3064 1
d3072 1
a3072 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=brconfig&sektion=8">brconfig(8)</a>
d3075 1
d3077 1
d3084 1
a3084 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=brconfig&sektion=8">brconfig(8)</a>
d3086 1
a3086 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridgename.if&sektion=5">bridgename.bridge0</a>,
d3096 1
a3096 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tl&sektion=4">tl(4)</a>)
d3101 6
a3106 4
<font color= "#0000e0"> <a href= "index.html">[Back to Main Index]</a>
<a href= "faq5.html">[To Section 5.0 - Kernel configuration and Disk
Setup]</a> <a href= "faq7.html">[To Section 7.0 - Keyboard controls]</a>
</font> </p>
d3110 2
a3111 2
<a href= "index.html"><img height= "24" width= "24" src= "../images/back.gif" border= "0" alt= "[back]"></a>
<a href= "mailto:www@@openbsd.org">www@@openbsd.org</a>
d3113 2
a3114 2
<small>$OpenBSD: faq6.html,v 1.147 2002/10/25 14:18:48 dhartmei Exp $</small>
</p>
@


1.147
log
@Explain how to reflect connections using rdr and nat (yes, it works), and
how the alternatives are still more sane.
With help from camield@@.
@
text
@d2991 4
a2994 4
pass in  on ep0  any
pass out on ep0  any
pass in  on fxp0 any
pass out on fxp0 any
d3062 1
a3062 1
<small>$OpenBSD: faq6.html,v 1.146 2002/10/04 14:15:26 nick Exp $</small>
@


1.146
log
@
ftp-proxy's recommended port is no longer 8081, but 8021.  Diff from
henning@@.
@
text
@d1724 119
d3062 1
a3062 1
<small>$OpenBSD: faq6.html,v 1.145 2002/10/04 13:48:36 nick Exp $</small>
@


1.145
log
@
section on dumping pflog to a plain text file, written by
Daniel Polak <DANIEL@@sys.nl>.  ok dhartmei@@
@
text
@d1576 1
a1576 1
rdr on tl0 from any to any port 21 -&gt; 127.0.0.1 port 8081
d1580 1
a1580 1
port 8081".
d1587 1
a1587 1
127.0.0.1:8081 stream tcp nowait root /usr/libexec/ftp-proxy ftp-proxy
d1595 3
a1597 3
You will note that ftp-proxy is listening on port 8081, the same port the above 
rdr statement was sending FTP traffic to.  The choice of port 8081 is arbitrary,
though 8081 is a good choice, as it is not defined for any other application.
d1692 1
a1692 1
rdr on tl0 from any to ! 64.12.163.199 port 21 -&gt; 127.0.0.1 port 8081
d1696 1
a1696 1
with) to localhost port 8081 (where
d2943 1
a2943 1
<small>$OpenBSD: faq6.html,v 1.144 2002/07/25 22:06:57 nick Exp $</small>
@


1.144
log
@
New section: 6.10 - Setting up a bridge with OpenBSD.  ok Jason@@
@
text
@d751 110
d2943 1
a2943 1
<small>$OpenBSD: faq6.html,v 1.143 2002/07/25 15:15:21 henning Exp $</small>
@


1.143
log
@two typos in my previous commit.
two typos in the same sentence.
not bad.

found one myself, one from Josh Archambault <josh@@snowplow.org>
@
text
@d31 1
d2654 91
d2746 81
a2826 6
<font color= "#0000e0">
<a href= "index.html">[Back to Main Index]</a>
<a href= "faq5.html">[To Section 5.0 - Kernel configuration and Disk Setup]</a>
<a href= "faq7.html">[To Section 7.0 - Keyboard controls]</a>
</font>
</p>
d2833 1
a2833 1
<small>$OpenBSD: faq6.html,v 1.142 2002/07/25 12:36:29 henning Exp $</small>
@


1.142
log
@with this misleading scrub description I'm no longer surprised that our
users are confused.
correct it. scrub is good. almost always, not just in special cases.

ok dhartmei@@, nick@@
@
text
@d787 2
a788 2
memory to cache the packet fragments. The adavantages of packet normalization
almost always outweight this cost.
d2666 1
a2666 1
<small>$OpenBSD: faq6.html,v 1.141 2002/07/12 02:51:35 nick Exp $</small>
@


1.141
log
@
Typos, grammar, wording fixes.
From David Krause <openbsd@@davidkrause.com>, thanks!
@
text
@d775 6
a780 2
As some OSs and applications have trouble with abnormal or 
fragmented packets, it is sometimes beneficial to normalize the 
d786 3
a788 3
As this does put additional load on the system, there is no reason
to use this command unless this system is protecting a device
with a poor TCP/IP implementation
d2666 1
a2666 1
<small>$OpenBSD: faq6.html,v 1.140 2002/07/02 01:17:58 nick Exp $</small>
@


1.140
log
@
recommended by EricJ@@ some time ago, done by Sam Smith <S@@mSmith.net>,
standarizing the displayed shell prompts to be either '#' or '$', as
appropriate.  If anyone cares, Sam was even kind enough to list the
sections where changes were made:
   2.2  2.3  4.5  6.6.3  6.9.1  8.3  8.5  8.10  10.12  10.13  13.7
   13.11  14.3  14.4  14.9
Thanks!
@
text
@d85 1
a85 1
For example, Here is the output of dmesg for a Intel Fast Ethernet network
d1430 1
a1430 1
port number that the the FTP server will make a connection to on the
d1727 1
a1727 1
information about your isp. Here is a list of helpful information that you will need.
d1843 1
a1843 1
<li><b>ppp -auto myisp</b> - This will run ppp, configure your interfaces and connect to your isp and then go
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.139 2002/07/02 00:30:16 nick Exp $</small>
@


1.139
log
@
& -> &amp; (and occassionally, "and")  > -> &gt;   < -> &lt;
work submitted by Sam Smith <S@@mSmith.net>, many thanks!
@
text
@d1908 1
a1908 1
   sysctl -w net.inet.tcp.baddynamic=749,750,751,760,761,871
d1912 2
a1913 2
   sysctl -w net.inet.tcp.baddynamic=+748
   sysctl -w net.inet.tcp.baddynamic=-871
d2634 1
a2634 1
% <strong>kill -9 [pid of pptp]</strong>
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.138 2002/06/24 12:09:54 espie Exp $</small>
@


1.138
log
@effect/affect spelling confusion, Hannah Schroeter.
@
text
@d2625 1
a2625 1
# <strong>/usr/local/sbin/pptp 10.0.0.138 &</strong>
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.137 2002/06/24 09:47:46 dhartmei Exp $</small>
@


1.137
log
@Fix syntax errors in example rules, now all of them parse.
@
text
@d1013 1
a1013 1
forget to <b>pfctl -R /etc/pf.conf</b> for the changes to take affect! 
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.136 2002/06/17 22:41:59 horacio Exp $</small>
@


1.136
log
@typo
@
text
@d662 1
a662 1
block out quick on fxp0 inet from any to { 127.0.0.0/8, 192.168.0.0/16, \ 
d798 1
a798 1
pass in quick on fxp0 allow-opts
d1005 1
a1005 1
pass in log quick on fxp0 from 1.1.1.0/24 to any port 22
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.135 2002/06/14 23:51:16 nick Exp $</small>
@


1.135
log
@
PF is changing, the FAQ follows RELEASE, default man page search is
-Current.  Links to pfctl(8), pf.conf(5), nat.conf(5), tcpdump(8)
pflogd(8) and ftp-proxy(8) changed to point at the 3.1 man pages,
not -current.
@
text
@d1007 1
a1007 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&sektion=8&manpath=OpenBSD+3.1">pflogd(8)</a> will write to ip log entries to <i>/var/log/pflog</i>.
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.134 2002/05/30 17:22:05 nick Exp $</small>
@


1.134
log
@
Improvement in example BIND config, closes PR#2681, ok ericj@@.
from From: Hans-Joerg Hoexer <hshoexer@@yerbouti.franken.de>, Thanks!
@
text
@d156 1
a156 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflog&sektion=4">pflog</a> - Packet Filter Logging Interface
d421 1
a421 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">/etc/pf.conf(5)</a></i> 
d423 1
a423 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">/etc/nat.conf(5)</a></i>.
d448 1
a448 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&sektion=8">pfctl(8)</a> command.
d477 2
a478 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">pf.conf(5)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">nat.conf(5)</a> 
d496 1
a496 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">pf.conf(5)</a>. 
d707 1
a707 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&sektion=8">pflogd(8)</a>,
d709 1
a709 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&sektion=8">tcpdump(8)</a>
d1007 1
a1007 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&sektion=8">pflogd(8)</a> will write to ip log entries to <i>/var/log/pflog</i>.
d1009 1
a1009 1
read by <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&sektion=8">tcpdump(8)</a>, NOT directly by humans.
d1034 1
a1034 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcpdump&sektion=8">tcpdump(8)</a>.</li>
d1272 1
a1272 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">/etc/pf.conf</a></i>).
d1289 1
a1289 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">/etc/nat.conf</a></i>)
d1458 1
a1458 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&sektion=8">ftp-proxy(8)</a>.
d1624 2
a1625 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">nat.conf man page</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&sektion=8">pfctl man page</a>
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.133 2002/05/23 13:10:11 dhartmei Exp $</small>
@


1.133
log
@Fix example rules, s/block in on fxp0 from all/block in on fxp0 all
@
text
@d2283 1
a2283 2
@@       IN      SOA     nemo.yewtopia.com.
your_id.nemo.yewtopia.com.  (
d2297 1
a2297 2
yewtopia.com.        IN      SOA     nemo.yewtopia.com.
your_id.nemo.yewtopia.com.  (
d2316 1
a2316 2
1.168.192.in-addr.arpa. IN      SOA     nemo.yewtopia.com.
your_id.nemo.yewtopia.com.  (
d2361 1
a2361 1
$ <strong>dig @@nemo.yewtopia yewtopia any any</strong>
d2370 1
a2370 1
;;      yewtopia, type = ANY, class = ANY
d2373 1
a2373 2
yewtopia.        3600   SOA     nemo.yewtopia.
your_id.nemo.yewtopia. (
d2379 1
a2379 1
yewtopia.        3600   NS      nemo.yewtopia.
d2382 1
a2382 1
nemo.yewtopia.   3600   A       192.168.1.9
d2385 1
a2385 1
;; FROM: nemo to SERVER: nemo.yewtopia.  192.168.1.9
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.132 2002/05/20 01:03:28 nick Exp $</small>
@


1.132
log
@
Updates for OpenBSD 3.1.  ok Miod@@
@
text
@d616 1
a616 1
block in on fxp0 from all
d620 1
a620 1
pass out on fxp0 from all
d632 1
a632 1
block in on fxp0 from all
d636 1
a636 1
pass out on fxp0 from all
d2666 1
a2666 1
<small>$OpenBSD: faq6.html,v 1.131 2002/04/30 13:02:47 nick Exp $</small>
@


1.131
log
@
Couple of typos spotted by Saad Kadhi <bsdguy@@docisland.org>, thanks!
@
text
@a101 10
<P>
Notice for upgrading from an older release of OpenBSD: Old ethernet drivers
are sometimes replaced with newer ones, and when this
happens, the interface name might change. For instance, after OpenBSD 2.6,
the mx, al, ax, and pn drivers were all replaced by the dc driver.
Any references in <i>/etc/dhcpd.interfaces</i>, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">/etc/pf.conf(5)</a>, or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">/etc/nat.conf(5)</a>
must be changed to the new interface name.
Of course, any <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5">/etc/hostname.xxx</a> files must be renamed. (Where xxx represents the old interface name and number)
</p>

d345 1
a345 1
<strong>Starting with OpenBSD 2.8, <i>/etc/ifaliases</i> is no longer used!</strong>
a346 1
<p>
a898 4
# only allow our machines to connect via ssh
pass in on fxp0 inet proto tcp from 1.1.1.0/24 to any port 22 \
	flags S/SA keep state

a986 4
# only allow our machines to connect via ssh
pass  in on $ExtIF inet proto tcp from $IntNet to any port 22 \
	flags S/SA keep state

a1774 4
<b>NOTICE</b> - On OpenBSD 2.6, the system shipped with a <i>/etc/ppp/ppp.conf.example</i> that had an incorrect setting for device. The device was <i>"set device /dev/cuaa0"</i>. This should be <i>/dev/cua00</i> which would correspond to serial device 1. (COM1). Your device might not be on COM1, however the naming scheme was wrong.
</p>

<p>
d2543 3
a2545 1
To start off, you need to install pptp. A port was added to the OpenBSD ports tree AFTER the release of OpenBSD 2.8 and works fine with with the OpenBSD 2.8 ports tree. The port is located at <i>/usr/ports/net/pptp</i>. Read <a href="faq8.html#Ports">FAQ 8, Ports</a> for more information on the OpenBSD ports tree.
d2554 1
a2554 1
Index: sys/conf/GENERIC
d2557 13
a2569 12
retrieving revision 1.66
diff -u -r1.66 GENERIC
--- sys/conf/GENERIC    2000/10/13 04:21:14     1.66
+++ sys/conf/GENERIC    2000/12/26 19:55:31
@@@@ -97,6 +97,6 @@@@
 pseudo-device  ksyms   1	# kernel symbols device
 pseudo-device  bridge  2	# network bridging support
 #pseudo-device vlan    2	# IEEE 802.1Q VLAN
-pseudo-device  gre     1	# GRE encapsulation interface
+#pseudo-device gre     1	# GRE encapsulation interface

 option		BOOT_CONFIG     # add support for boot -c
d2573 4
a2576 1
To recompile your kernel, check out OpenBSD 2.8-stable via cvs (refer to <a href="../stable.html">OpenBSD Stable</a> web page for more information), apply the following patch, and rebuild your kernel as per <a href="faq5.html#Building">FAQ 5, Building a kernel</a>.
d2666 1
a2666 1
<small>$OpenBSD: faq6.html,v 1.130 2002/04/15 19:24:34 jufi Exp $</small>
@


1.130
log
@
broken link
@
text
@d1676 1
a1676 1
server's idea of DNS by first uncommenting the 'require' lines in it (they are
d2683 1
a2683 1
<small>$OpenBSD: faq6.html,v 1.129 2002/03/27 08:54:17 mpech Exp $</small>
@


1.129
log
@We need ftp-proxy only on loopback. From lazy form@@.

todd@@, beck@@ ok
@
text
@d96 1
a96 1
<A HREF="/plat.html">supported hardware list</a> for your platform.  You
d2683 1
a2683 1
<small>$OpenBSD: faq6.html,v 1.128 2002/03/20 03:54:33 nick Exp $</small>
@


1.128
log
@
Typos, grammar improvements, submitted by David Krause
<openbsd@@davidkrause.com>, including correction of loopback subnet from
rootix@@yahoo.fr.  Some fixes had also been submitted by Saad
Kadhi <bsdguy@@docisland.org>.
@
text
@d1491 1
a1491 1
8081 stream tcp nowait root /usr/libexec/ftp-proxy ftp-proxy
d2683 1
a2683 1
<small>$OpenBSD: faq6.html,v 1.127 2002/03/01 18:53:51 dhartmei Exp $</small>
@


1.127
log
@Change examples to create state on SYN packets, change 'port = x' syntax
to 'port x'.
@
text
@d673 1
a673 1
block out quick on fxp0 inet from any to { 127.0.0.1/8, 192.168.0.0/16, \ 
d684 1
a684 1
block out quick on fxp0 inet from any to { 127.0.0.1/8, 192.168.0.0/16, \
d850 1
a850 1
out&quot; rule, we can automagically allow incoming 
d903 1
a903 1
block out quick on fxp0 inet from any to { 127.0.0.1/8, 192.168.0.0/16, \
d956 1
a956 1
block out quick on fxp0 inet from any to { 127.0.0.1/8, 192.168.0.0/16, \
d971 1
a971 1
NoRouteIPs="{ 127.0.0.1/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"
d988 1
a988 1
NoRouteIPs="{ 127.0.0.1/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"
d1308 1
a1308 1
(<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">/etc/nat.conf</a></i>).
d1695 1
a1695 1
The options are pretty self explanatory.
d1718 1
a1718 1
The -q flag makes dhcpd quiet, otherwise it is very noisy.
d1764 1
a1764 1
Also, make sure, that if your not using a GENERIC kernel, that you have this line in your configuration file:
d2220 1
a2220 1
<li><b>Note:</b> There is no practical restriction on the number of DNS servers on a LAN. Any or all machines on the LAN may offer DNS service if they are so configured. Whether any such server is considered authoritative from outside your LAN (or is even known from outside your LAN) is a configuration factor which typically is controlled at the next level up from your LAN in the domain hierarchy.</li>
d2683 1
a2683 1
<small>$OpenBSD: faq6.html,v 1.126 2002/01/27 22:51:50 nick Exp $</small>
@


1.126
log
@
Added additional link to 3Com's "Understanding IP Addressing" document,
as I had repeated intermittent problems with the first link.  ok ericj@@
@
text
@d562 1
a562 1
block in on fxp0 inet proto tcp from any to any port = 3306
d577 1
a577 1
in port = 3306&quot; rule. If you reversed the order of our 
d582 1
a582 1
block in on fxp0 inet proto tcp from any to any port = 3306
d600 1
a600 1
block in quick on fxp0 inet proto tcp from any to any port = 3306
d627 5
a631 5
pass in quick on fxp0 inet proto tcp from any to any port = 22
pass in quick on fxp0 inet proto tcp from any to any port = 80
pass in quick on fxp0 inet proto tcp from any to any port = 443
block in quick on fxp0 from any to any
pass out on fxp0 from any to any
d643 5
a647 5
pass in quick on fxp0 inet proto tcp from 1.1.1.0/24 to any port = 22
pass in quick on fxp0 inet proto tcp from any to any port = 80
pass in quick on fxp0 inet proto tcp from any to any port = 443
block in quick on fxp0 from any to any
pass out on fxp0 from any to any
d655 1
a655 1
pass in quick on fxp0 inet proto tcp from 1.1.1.0/24 to any port = 22
d659 1
a659 1
pass in quick on fxp0 inet proto tcp from 1.1.1.1/32 to any port = 22
d688 1
a688 1
pass in quick on fxp0 inet proto tcp from 1.1.1.1/32 to any port = 22
d691 2
a692 2
pass in quick on fxp0 inet proto tcp from any to any port = 80
pass in quick on fxp0 inet proto tcp from any to any port = 443
d708 2
a709 2
pass in quick on fxp0 inet proto tcp from 1.1.1.1/32 to any port = 22
block in log quick on fxp0 inet proto tcp from any to any port = 22
d771 1
a771 1
pass in quick on fxp0 inet proto { tcp, udp } from any to any port = 53
d776 2
a777 2
pass in quick on fxp0 inet proto tcp from any to any port = 53
pass in quick on fxp0 inet proto udp from any to any port = 53
d851 1
a851 1
connections in response to connections we initiate, such as 
d856 5
a860 5
pass in quick on fxp0 inet proto tcp from 1.1.1.0/24 to any port = 22
pass in quick on fxp0 from any to any port = 80
pass in quick on fxp0 from any to any port = 443
block in quick on fxp0 from any to any
pass out on fxp0 inet proto tcp from any to any keep state
d876 9
a884 5
pass in quick on fxp0 inet proto tcp from 1.1.1.0/24 to any port = 22
pass in quick on fxp0 inet proto tcp from any to any port = 80 flags S/SA
pass in quick on fxp0 inet proto tcp from any to any port = 443 flags S/SA
block in quick on fxp0 from any to any
pass out on fxp0 proto tcp from any to any keep state
d906 4
d911 2
a912 1
pass in quick on fxp0 inet proto tcp from 1.1.1.0/24 to any port = 22
d915 4
a918 5
pass in quick on fxp0 inet proto tcp from any to any port = 80 flags S/SA
pass in quick on fxp0 inet proto tcp from any to any port = 443 flags S/SA

# finally lock the rest down with a default deny
block in quick on fxp0 from any to any
d921 6
a926 1
pass out on fxp0 from any to any keep state
d944 1
a944 1
pass in quick on fxp0 inet proto { tcp, udp } from any to any port = 53
d995 1
a995 1
block in quick on $ExtIF from $NoRouteIPs to any
d998 4
d1003 2
a1004 1
pass in quick on $ExtIF inet proto tcp from $IntNet to any port = 22
d1007 2
a1008 4
pass in quick on $ExtIF inet proto tcp from any to any port $Services flags S/SA

# finally lock the rest down with a default deny
block in quick on $ExtIF from any to any
d1011 6
a1016 1
pass out on $ExtIF from any to any keep state
d1024 1
a1024 1
pass in log quick on fxp0 from 1.1.1.0/24 to any port = 22
d2683 1
a2683 1
<small>$OpenBSD: faq6.html,v 1.125 2002/01/26 00:17:54 horacio Exp $</small>
@


1.125
log
@missing trailing "
@
text
@d52 2
a53 1
<a href="http://www.3com.com/corpinfo/en_US/technology/tech_paper.jsp?DOC_ID=135">Understanding IP addressing</a>.
d2662 1
a2662 1
<small>$OpenBSD: faq6.html,v 1.124 2002/01/25 23:25:33 horacio Exp $</small>
@


1.124
log
@missing semicolon on &quot;
@
text
@d2190 1
a2190 1
If you aren't sure that you need your machine to perform the role of DNS server, don't configure it as one. The OpenBSD installation does not, by default, activate your machine as a domain name server, though all necessary files are installed. For most workstations, just the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&sektion=5>/etc/hosts</a> file naming local machines' IP addresses and the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5">/etc/resolv.conf</a> file for indicating which DNS servers serve you out on the intranet or internet is sufficient.
d2661 1
a2661 1
<small>$OpenBSD: faq6.html,v 1.123 2002/01/25 20:15:35 chris Exp $</small>
@


1.123
log
@The more things change, the more they stay the same!
@
text
@d155 1
a155 1
0xffffff00 broadcast 10.0.0.255&quot.  Also, the <strong>UP</strong> and <strong>RUNNING</strong> flags are set.
d2661 1
a2661 1
<small>$OpenBSD: faq6.html,v 1.122 2002/01/25 03:44:02 nick Exp $</small>
@


1.122
log
@
Link Cleanup:  Retargeting links, test all links,
man page references, update and repair as needed.
ok ericj@@
@
text
@d44 1
a44 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&apropos=0&sektion=8&format=html">
d46 1
a46 1
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&apropos=0&sektion=1&format=html">
d84 2
a85 3
For example, Here is the output of dmesg for a ne2k network
card, which uses the device name
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ne&sektion=4">ne(4)</a>.
d89 2
a90 2
ne3 at pcmcia1 function 0 "Linksys, EtherFast 10/100 PC Card (PCMPC100), " port 0x340/16 irq 9
ne3: address 00:e0:98:04:95:ba
d94 5
a98 1
If you don't know what your device name is, here is a list of common cards and their device names.
a100 22
<ul>
<li>ne2000 Network Cards - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ne&sektion=4">ne</a>
<li>3Com EtherLink III and Fast EtherLink III Ethernet - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&sektion=4">ep</a>
<li>3Com EtherLink XL and Fast EtherLink XL Ethernet (3C9xx) - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=xl&sektion=4">xl</a>
<li>Intel 82586 chip Ethernet device driver - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ie&sektion=4&arch=i386">ie</a>
<ul>Which Includes Cards Such As:
	<li>3Com 3C507
	<li>AT&amp;T StarLAN 10
	<li>AT&amp;T EN100
	<li>AT&amp;T StarLan Fiber
	<li>Intel EtherExpress 16
</ul>
<li>DEC/Intel 21142/3 and clone 10/100 Ethernet driver - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dc&sektion=4">dc</a>
<ul><font size="-1"> <b>Note:</b> Some drivers which were in OpenBSD 2.6, such as <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mx&sektion=4&manpath=OpenBSD+2.6">mx</a>, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ax&sektion=4&manpath=OpenBSD+2.6">ax</a>, al and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pn&sektion=4&manpath=OpenBSD+2.6">pn</a> have been replaced by this driver.</font><br>
Which Includes Cards Such As:
	<li>Intel 21142/21143 (formerly manufactured by DEC)
	<li>Macronix 98713, 98713A, 98715, 98715A and 98725
	<li>Davicom DM9100 and DM9102
	<li>ASIX Electronics AX88140A and AX88141
	<li>ADMtek AL981 Comet and AN985 Centaur
	<li>Lite-On 82c168 and 82c169 PNIC
	<li>Lite-On/Macronix 82c115 PNIC II
d102 8
a109 9
If you are upgrading to OpenBSD 3.0 from 2.6 or an older release of OpenBSD,
you need to pay attention here.
Any references in <em>/etc/ifaliases</em>, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">/etc/pf.conf(5)</a>, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">/etc/nat.conf(5)</a>
to the old interface names mx, al, ax, or pn must be replaced with dc.  Also, any <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5">hostname.xxx</a>
files with the old interface names must be renamed to <em>hostname.dcX</em> to be recognized.  Replace the X with the interface number.
</ul>
<li>Lucent Technologies WaveLAN/IEEE 802.11DS - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=wi&sektion=4">wi</a>
<li>Aironet Communications 4500/4800 IEEE 802.11DS - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=an&sektion=4">an</a>
</ul>
d112 4
a115 2
Again, you can check to see what interfaces have been identified by using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8&format=html">ifconfig(8)</a>
utility. Here is output which will show an ne2k device.
d120 8
a127 5
lo0: flags=8009&lt;UP,LOOPBACK,MULTICAST&gt;
        inet 127.0.0.1 netmask 0xff000000
lo1: flags=8008&lt;LOOPBACK,MULTICAST&gt;
ne3: flags=8863&lt;UP,BROADCAST,NOTRAILERS,RUNNING,SIMPLEX,MULTICAST&gt;
        media: Ethernet manual
d129 18
a146 9
sl0: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt;
sl1: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt;
ppp0: flags=8010&lt;POINTOPOINT,MULTICAST&gt;
ppp1: flags=8010&lt;POINTOPOINT,MULTICAST&gt;
tun0: flags=10&lt;POINTOPOINT&gt;
tun1: flags=10&lt;POINTOPOINT&gt;
enc0: flags=0&lt;&gt;
bridge0: flags=0&lt;&gt;
bridge1: flags=0&lt;&gt;
d151 10
a160 7
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8&format=html">ifconfig(8)</a> 
gives us a lot more information than we are needing at this
point. But it still allows us to see our interface. In the above example, the interface card is already
configured. You can tell this by seeing that values are already set in &quot;inet 10.0.0.38 netmask
0xffffff00 broadcast 10.0.0.255&quot;, and that the <strong>UP</strong> and <strong>RUNNING</strong> flags
are turned on. Also, you will notice many other interfaces. Here is a list of interfaces that will be
expected to be there.
d164 10
a173 6
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&sektion-4&format=html">lo</a> - Loopback Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sl&sektion=4&format=html">sl</a> - SLIP Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=8">ppp</a> - Point to Point Protocol
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun&sektion=4&format=html">tun</a> - Tunnel Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&sektion=4&format=html">enc</a> - Encapsulating Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&sektion=4&format=html">bridge</a> - Ethernet bridge interface
d177 3
a179 5
If you don't have your interface configured, the first step is to create the <strong>/etc/hostname.${IF}</strong>
file. Where the name of your interface will take the place of ${IF}. From the information in the examples
above, the name would be <strong>/etc/hostname.ne3</strong>. The layout of this file is like so:<br>
(To read more about the format of this file, reference the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html">hostname.if(5)</a> man page.)
d183 1
a183 1
[address_family] [your_ip] [your_netmask] [media options]
d186 3
d190 2
a191 1
So, for the above example, a proper file would look like this:
d195 1
a195 1
$ <strong>cat /etc/hostname.ne3</strong>
d200 25
a224 1
Next step from here is to setup your gateway. To do this, simply put the IP of your gateway in the file
d255 4
a258 3
Notice that a few errors were produced, but they are concerned
with the loopback interface, so they can be ignored. From here
your system should be up and running. Again, you can check to
d271 1
a271 1
default            10.0.0.1           UGS         0       86      -  ne3
d274 2
a275 2
10.0.0/24          link#1             UC          0        0      -  ne3
10.0.0.1           aa:0:4:0:81:d      UHL         1        0      -  ne3
d342 1
a342 1
such as <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=routed&apropos=0&sektion=8&format=html">routed(8)</a>,
d359 1
a359 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html"><i>/etc/hostname.&lt;if&gt;</i></a>.
d390 2
a391 2
inet alias 192.168.0.3 255.255.255.255 NONE
inet alias 192.168.0.4 255.255.255.255 NONE
d395 1
a395 1
Once you've made this file, it just takes a reboot for it to take effect. You can, however, bring up the aliases by hand using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8&format=html">ifconfig(8)</a> utility. To bring up the first alias you would use the command:
d670 4
a673 8
block in quick on fxp0 inet from 127.0.0.0/8 to any
block in quick on fxp0 inet from 192.168.0.0/16 to any
block in quick on fxp0 inet from 172.16.0.0/12 to any
block in quick on fxp0 inet from 10.0.0.0/8 to any
block out quick on fxp0 inet from any to 127.0.0.1/8
block out quick on fxp0 inet from any to 192.168.0.0/16
block out quick on fxp0 inet from any to 172.16.0.0/12
block out quick on fxp0 inet from any to 10.0.0.0/8
d681 4
a684 8
block in quick on fxp0 inet from 127.0.0.0/8 to any
block in quick on fxp0 inet from 192.168.0.0/16 to any
block in quick on fxp0 inet from 172.16.0.0/12 to any
block in quick on fxp0 inet from 10.0.0.0/8 to any
block out quick on fxp0 inet from any to 127.0.0.1/8
block out quick on fxp0 inet from any to 192.168.0.0/16
block out quick on fxp0 inet from any to 172.16.0.0/12
block out quick on fxp0 inet from any to 10.0.0.0/8
d793 1
a793 1
to use this command unless this system is protecting a computer 
d896 4
a899 8
block in quick on fxp0 inet from 127.0.0.0/8 to any
block in quick on fxp0 inet from 192.168.0.0/16 to any
block in quick on fxp0 inet from 172.16.0.0/12 to any
block in quick on fxp0 inet from 10.0.0.0/8 to any
block out quick on fxp0 inet from any to 127.0.0.1/8
block out quick on fxp0 inet from any to 192.168.0.0/16
block out quick on fxp0 inet from any to 172.16.0.0/12
block out quick on fxp0 inet from any to 10.0.0.0/8
a928 6
Normally, you would have to do something like this:
<ul><pre>
pass in quick on fxp0 inet proto tcp from any to any port = 53
pass in quick on fxp0 inet proto udp from any to any port = 53
</pre></ul>
but instead, you could use PF's set notation to simplify this:
d940 1
a940 13
block in quick on fxp0 inet from 127.0.0.0/8 to any
block in quick on fxp0 inet from 192.168.0.0/16 to any
block in quick on fxp0 inet from 172.16.0.0/12 to any
block in quick on fxp0 inet from 10.0.0.0/8 to any
block out quick on fxp0 inet from any to 127.0.0.1/8
block out quick on fxp0 inet from any to 192.168.0.0/16
block out quick on fxp0 inet from any to 172.16.0.0/12
block out quick on fxp0 inet from any to 10.0.0.0/8
</pre></ul>

they could be consolidated into two lines:
<ul><pre>
block in quick on fxp0 inet from { 127.0.0.1/8, 192.168.0.0/16, \
d1018 2
a1019 3
<i>ipf.rules</i> file.  However, PF is not, nor was it intended to be,
a drop-in replacement for IPF.  This section details some of the
differences between these systems.
a1090 2
<b>Computer Operating System: </b>OpenBSD v3.0 i386<br>
<br>
d1636 1
a1636 1
<p>To use the DHCP client <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient&apropos=0&sektion=8&format=html">dhclient(8)</a>
d1666 1
a1666 1
If you want to use OpenBSD as a DHCP server <A href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcpd&apropos=0&sektion=8&format=html">dhcpd(8)</a>,
d1705 1
a1705 1
See <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcp-options&apropos=0&sektion=5&format=html">dhcp-options(5)</a> for more options that your DHCP
d1716 1
a1716 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppd&sektion=8&format=html">pppd(8)</a> - Which is
d1718 1
a1718 1
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=8&format=html">ppp(8)</a> - Which is
d1778 1
a1778 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&sektion=8&format=html">ppp(8)</a> for more info on
d1902 1
a1902 1
There is a sysctl for this also.  From <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&apropos=0&sektion=8&format=html">sysctl(8)</a>:
d1930 3
a1932 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nfsd&sektion=8&format=html">nfsd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mountd&sektion=8&format=html">mountd(8)</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&sektion=5&format=html">exports(5)</a>
d1961 1
a1961 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=exports&sektion=5&format=html">exports(5)</a>
d2005 2
a2006 1
NFS. To start mountd(8), simply type:
d2010 1
d2047 1
a2047 1
see what is happening with NFS. One is <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=showmount&sektion=8&format=html">showmount(8)</a>
d2065 1
a2065 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mount_nfs&sektion=8&format=html">mount_nfs(8)</a>.
d2113 1
a2113 1
My OpenBSD machine is currently connected to the Internet via my ISP, so I can use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&sektion=8&format=html">nslookup(8)</a> utility to execute the DNS query:
d2127 1
a2127 1
<b>165.87.201.244</b> is the name server which answered, because it is the nameserver that my ISP told me to use with my account and whose number is entered in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5&format=html">/etc/resolv.conf</a>. But the answer was not authoritative. For an authoritative answer, let's find which is the authoritative DNS server for the <i>openbsd.org</i> domain and ask it for the address of <i>www.openbsd.org</i>:
d2174 6
a2179 6
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1&format=html">dig(1)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nslookup&sektion=8&format=html">nslookup(8)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gethostbyname&sektion=3&format=html">gethostbyname(3)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=named&sektion=8&format=html">named(8)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&sektion=3&format=html">resolver(3)</a>
	<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolver&sektion=5&format=html">resolver(5)</a>
d2184 1
a2184 1
The <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1&format=html">dig(1)</a> command is especially useful, because it can query a domain and return information in much the same record format as required in BIND configuration files. You can use <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1&format=html">dig(1)</a> to examine name servers you know to be operating properly as a way of comparing your setup to theirs.
d2190 1
a2190 1
If you aren't sure that you need your machine to perform the role of DNS server, don't configure it as one. The OpenBSD installation does not, by default, activate your machine as a domain name server, though all necessary files are installed. For most workstations, just the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hosts&sektion=5&format=html">/etc/hosts</a> file naming local machines' IP addresses and the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5&format=html">/etc/resolv.conf</a> file for indicating which DNS servers serve you out on the intranet or internet is sufficient.
d2359 1
a2359 1
So that <b>named</b> isn't bypassed in favor of (possibly outdated) addresses in the <i>/etc/hosts</i> file. <u>Make sure you have at least the default <i>localhost</i> entry</u> or your network won't start properly! Note also <i>nemo</i> must appear in its own hosts file or you will see a (mostly harmless) error message at bootup when <i>/etc/netstart</i> invokes <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=route&sektion=8&format=html">route(8)</a> in order to add <i>nemo</i> (whose name appears in <i>/etc/myname</i>).
d2362 1
a2362 1
<h4>6.8.5.3 Using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dig&sektion=1&format=html">dig(1)</a> to examine the results.</h4>
d2400 1
a2400 1
The name daemon <b>named</b> is launched during system startup from <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc&sektion=8&format=html">/etc/rc</a> if the line installed by default in <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&sektion=8&format=html">/etc/rc.conf</a>.
d2429 1
a2429 1
To start <b>named</b> by hand, use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&sektion=8&format=html">ndc(8)</a> command. For example:
d2441 1
a2441 1
The best way to stop the name daemon is to use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&sektion=8&format=html">ndc(8)</a> command. For example:
d2449 1
a2449 1
If this fails to work, find the process id of named and use the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=kill&sektion=1&format=html">kill(1)</a> command to end that process. The PID for <b>named</b> while it is running is found as the first line in the file <i>/var/named/named.pid</i>
d2470 1
a2470 1
or by using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ndc&sektion=8&format=html">ndc(8)</a> command. For example:
d2548 1
a2548 1
Because of a conflict between the In-Kernel <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=gre&apropos=0&sektion=0&manpath=OpenBSD+Current&arch=i386&format=html">gre(4)</a> support and pptp, you will need to re-compile your kernel, removing support for gre(4).
d2576 1
a2576 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&apropos=0&sektion=0&manpath=OpenBSD+Current&arch=i386&format=html">ppp(8)</a>, so if you are familiar with ppp(8), much of the setup is the same. Also, refer to <a href="#PPP">FAQ 6, PPP</a>.
d2661 1
a2661 1
<small>$OpenBSD: faq6.html,v 1.121 2002/01/21 20:28:25 nick Exp $</small>
@


1.121
log
@
Update copyright notice to 2002.  ok ericj@@
@
text
@d316 1
a316 1
OpenBSD has support in the ports collection for both gated and mrtd.
d334 1
a334 1
which is part of the <a href="faq10.html#10.3">rc startup
d1286 1
a1286 1
Again, for more information you can read <a href="#6.2">FAQ 6.2</a>
d1641 1
a1641 1
<p>To use the DHCP client <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=dhclient&apropos=0&sektion=8&format=html">dhclient(8)</a>
d1710 1
a1710 1
See <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=dhcp-options&apropos=0&sektion=5&format=html">dhcp-options(5)</a> for more options that your DHCP
d1875 1
a1875 1
Extended information can be found at <a href="http://www.freebsd.org/handbook/userppp.html">http://www.freebsd.org/handbook/userppp.html</a> or <a href="http://www.freebsd.org/faq/userppp.html">http://www.freebsd.org/faq/userppp.html</a>.
d1904 1
a1904 1
turns this on.  Read about <A HREF="http://www.netscan.org">smurf attacks</a>
d1907 1
a1907 1
There is a sysctl for this also.  From <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&apropos=0&sektion=8&format=html">sysctl(8)</a>:
d2168 1
d2174 1
a2174 1
<li>Read the O'Reilly Associates book <i><a href="../books.html#dns&bind">DNS and BIND</a> </i>.</li>
d2533 1
a2533 1
There's a lot we didn't tell you, for example, how to set up DNS so that queries for intranet domains that aren't visible from the root of the domain hierarchy get relayed to servers within your enterprise. Read the <a href="#6.8.1.1">documents we recommended</a> for more information on DNS. 
d2547 1
a2547 1
To start off, you need to install pptp. A port was added to the OpenBSD ports tree AFTER the release of OpenBSD 2.8 and works fine with with the OpenBSD 2.8 ports tree. The port is located at <i>/usr/ports/net/pptp</i>. Read <a href="faq8.html#8.6">FAQ 8.6</a> for more information on the OpenBSD ports tree.
d2574 1
a2574 1
To recompile your kernel, check out OpenBSD 2.8-stable via cvs (refer to <a href="../stable.html">OpenBSD Stable</a> web page for more information), apply the following patch, and rebuild your kernel as per <a href="faq5.html#5.3">FAQ 5.3</a>.
d2579 1
a2579 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&apropos=0&sektion=0&manpath=OpenBSD+Current&arch=i386&format=html">ppp(8)</a>, so if you are familiar with ppp(8), much of the setup is the same. Also, refer to <a href="#6.5">FAQ 6.5</a>.
d2620 1
a2620 1
In the above example, our modem came with a preconfigured interface of 10.0.0.138. We now need to assign an address to OUR interface, It's best to pick an IP close to the one given by your MODEM, or use the static IP assigned to you. Read more about setting up interfaces in <a href="#6.1">FAQ 6.1</a>.
d2664 1
a2664 1
<small>$OpenBSD: faq6.html,v 1.120 2002/01/20 06:04:50 kjell Exp $</small>
@


1.120
log
@Fix description of S/SA. From Henning Brauer
@
text
@d9 1
a9 1
<meta name= "copyright"     content= "This document copyright 1998-2001 by OpenBSD.">
d2663 1
a2663 1
<small>$OpenBSD: faq6.html,v 1.119 2002/01/13 00:00:32 ericj Exp $</small>
@


1.119
log
@
change followed link color, so it is more visible in all netscape,
IE, konqueror

from Nick Holland <nick@@holland-consulting.net>
@
text
@d849 5
a853 3
allow packets with the SYN and SYNACK flags set. By passing only packets
with SYN and SYNACK set, we can prevent many forms of portscanning such
as FIN scanning. The rules now look like this:
d2663 1
a2663 1
<small>$OpenBSD: faq6.html,v 1.118 2002/01/12 01:39:30 ericj Exp $</small>
@


1.118
log
@
re-target the faq.
Change internal links from #10.XX -> #somethingmeaningfull
This will probobly break some external links to us, but will allow
us greater mobility in moving internal things around without breaking
links in the future.

work by Nick Holland <nick@@holland-consulting.net>
@
text
@d12 1
a12 1
<body bgcolor= "#ffffff" text= "#000000" link= "#23238E">
d2661 1
a2661 1
<small>$OpenBSD: faq6.html,v 1.117 2001/12/30 11:37:25 jufi Exp $</small>
@


1.117
log
@
trying to let the FAQ be more 3.0-compliant.
much more work is left to be done.
@
text
@d21 10
a30 10
<li><A href= "#6.0.1">6.0.1 - Before we go any further</a>
<li><a href= "#6.1">6.1 - Initial network setup</a>
<li><a href= "#6.2">6.2 - Packet Filter (PF)</a>
<li><a href= "#6.3">6.3 - Network Address Translation</a>
<li><a href= "#6.4">6.4 - Dynamic Host Configuration Protocol</a>
<li><a href= "#6.5">6.5 - Point to Point Protocol</a>
<li><A href= "#6.6">6.6 - Tuning networking parameters</a>
<li><a href= "#6.7">6.7 - Using NFS</a>
<li><a href= "#6.8">6.8 - Domain Name Service  - DNS, BIND, and named</a>
<li><a href= "#6.9">6.9 - Setting up a PPTP connection in OpenBSD</a>
d37 1
d66 1
d71 1
d269 1
d321 1
d390 1
a390 1
<a name= "PacketFilter"></a>
d1633 4
a1636 1
<a name= "6.4"></a> <h2>6.4 - DHCP</h2> </p>
d1711 1
d1877 1
d1920 2
d1924 1
d2102 2
d2106 1
d2533 2
d2537 1
d2661 1
a2661 1
<small>$OpenBSD: faq6.html,v 1.116 2001/12/23 03:09:52 miod Exp $</small>
@


1.116
log
@IPsec is spelled IPsec, not IPSec.
@
text
@d118 1
a118 1
If you are upgrading to OpenBSD 2.7 from an older release of OpenBSD,
d2206 1
a2206 1
There are two distinct BIND specifications:
d2210 1
d2525 1
a2525 1
To start off, you need to install pptp. A port was added to the OpenBSD ports tree AFTER the release of OpenBSD 2.8 and works fine with with the OpenBSD 2.8 ports tree. The port is located at <i>/ports/net/pptp</i>. Read <a href="faq8.html#8.6">FAQ 8.6</a> for more information on the OpenBSD ports tree.
d2642 1
a2642 1
<small>$OpenBSD: faq6.html,v 1.115 2001/12/10 23:06:26 ian Exp $</small>
@


1.115
log
@typo
@
text
@d1932 1
a1932 1
<a href="faq13.html">IPSec</a>.  Otherwise, people can potentially see your NFS
d1935 1
a1935 1
When properly configured, IPSec protects against these types of attacks.
d2641 1
a2641 1
<small>$OpenBSD: faq6.html,v 1.114 2001/12/10 09:06:58 dhartmei Exp $</small>
@


1.114
log
@"to any port = $Services" -> "to any port $Services", since Services is
a {} list. Reported by Alan Evetts.
@
text
@d2620 1
a2620 1
# <strong>tail -f /var/log/message</strong>
d2641 1
a2641 1
<small>$OpenBSD: faq6.html,v 1.113 2001/12/06 03:20:46 ericj Exp $</small>
@


1.113
log
@
fix grammer in sample configuration.

pointed out by Phil Davis <pmd@@hazy.org.uk>
@
text
@d983 1
a983 1
pass in quick on $ExtIF inet proto tcp from any to any port = $Services flags S/SA
d2641 1
a2641 1
<small>$OpenBSD: faq6.html,v 1.112 2001/12/01 07:03:59 jcs Exp $</small>
@


1.112
log
@"nat.conf", not "net.conf"
@
text
@d989 1
a989 1
pass out on $ExtIf from any to any keep state
d2641 1
a2641 1
<small>$OpenBSD: faq6.html,v 1.111 2001/11/23 00:38:48 horacio Exp $</small>
@


1.111
log
@typos, grammar, man pages, and friends.
ok dhartmei@@
@
text
@d1344 1
a1344 1
# <b>pfctl -N /etc/net.conf</b>
d2641 1
a2641 1
<small>$OpenBSD: faq6.html,v 1.110 2001/11/20 12:59:01 horacio Exp $</small>
@


1.110
log
@typo
missing &quot;
@
text
@d41 1
a41 1
at least partially understand the <A href="faq5.html">Kernel
d54 2
a55 2
especially when you deal with or are responsible for more then one network.
<P>
d57 1
a57 1
mail servers, you may benefit greatly by <A HREF="http://the.rfceditor.org/rfc.html">reading the RFCs</a>.
d62 2
a63 2
The RFCs define many (thousands) of standards for protocols on the
internet and how they are supposed to work.
d74 10
a83 5
To start off, you must first identify your network interface. In OpenBSD, interfaces are named for the type
of card, not for the type of connection. You can see your network card get initialized during boot, or after
boot using the <strong>dmesg(8)</strong> command. You also have the ability of seeing your network interface
using the <strong>ifconfig(8)</strong> command. For example, Here is the output in dmesg for a ne2k network
card, which uses the device name ne.
d96 4
a99 4
<li>ne2000 Network Cards - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ne&sektion=4&format=html">ne</a>
<li>3Com EtherLink III and Fast EtherLink III Ethernet - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&sektion=4&format=html">ep</a>
<li>3Com EtherLink XL and Fast EtherLink XL Ethernet (3C9xx) - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=xl&sektion=4&format=html">xl</a>
<li>Intel 82586 chip Ethernet device driver - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ie&sektion=4&format=html">ie</a>
d102 3
a104 3
	<li>AT&T StarLAN 10
	<li>AT&T EN100
	<li>AT&T StarLan Fiber
d107 2
a108 2
<li>DEC/Intel 21142/3 and clone 10/100 Ethernet driver - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dc&sektion=4&format=html">dc</a>
<ul><FONT SIZE="-1"> <b>Note:</b> Some drivers which were in OpenBSD 2.6, such as mx , ax , al and pn have been replaced by this driver.</font><BR>
d120 3
a122 4
Any references in /etc/ifaliases, /etc/pf.conf, /etc/nat.conf
to the old interface names mx, al, ax, or pn must be replaced with dc.  Also, any hostname.xxx
files with the old interface names must be renamed to hostname.dcX to
be recognized.  Replace the X with the interface number.
d166 1
a166 1
<li>ppp - Point to Point Protocol
d173 1
a173 1
If you don't have your interface configured the first step is to create the <strong>/etc/hostname.${IF}</strong>
d175 3
a177 4
above, the name would be <strong>/etc/hostname.ne3</strong>. The layout of this file is like so:
To read more about the format of this file, reference the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html">hostname.if(5)</a>
man page.
d185 1
a185 1
So for the above example, a proper file would look like this:
d196 3
a198 3
setup your nameservers, and your <strong>/etc/hosts</strong> file. To setup your nameservers, you will
create a file called <strong>/etc/resolv.conf</strong>. You can read more about the format of this file in
the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5&format=html">resolv.conf(5)</a>
d213 1
a213 1
Typing (as root):
d217 1
a217 1
$ <strong>sh /etc/netstart</strong>
d225 7
a231 5
Notice that a few errors were produced, but this is in regards to the loopback interface. So this can be
ignored. From here your system should be up and running. Again you can check to make sure that your
interface was setup correctly with <strong>ifconfig(8)</strong>. You can also check your routes via
<strong>netstat(1)</strong> or <strong>route(8)</strong>. Here is an example of viewing your routing tables
using both.
d250 1
d271 9
a279 5
This is the basic information you need to set up your OpenBSD box as a gateway (also called a router). If
you are using OpenBSD as a router on the Internet, we suggest that you also read the Packet Filter setup
instructions below to block potentially malicious traffic. Also, due to the low availability of IPv4
addresses from network service providers and regional registries, you may want to look at Network Address
Translation for information on conserving your IP address space. 
d283 7
a289 4
The GENERIC kernel already has the ability to allow IP Forwarding, but needs to be turned on. You should
do this using the <strong>sysctl(8)</strong> utility. To change this permanently you should edit the file 
<strong>/etc/sysctl.conf</strong> to allow for IP Forwarding. To do so add this line in that configuration
file.
d297 4
a300 2
To make this change without rebooting you would use the <strong>sysctl(8)</strong> utility
directly. Remember though that this change will not still exist after a reboot, and needs to be run as root.
d310 2
a311 2
such as <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=routed&apropos=0&sektion=8&format=html">routed(8)</a>,
<A HREF="http://www.gated.org">gated</a>, <a href="http://www.mrtd.net">mrtd</a>, and <A href="http://www.zebra.org">zebra</a>.
d324 9
a332 1
OpenBSD has a simple mechanism for setting up ip aliases on an interface. To do this simply edit the file <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html"><i>/etc/hostname.&lt;if&gt;</i></a>. This file is read upon boot by the <i>/etc/rc</i> script, which is part of the <a href="faq10.html#10.3">rc startup hierarchy</a>. For the example, we assume that the user has an interface <b>dc0</b> and is on the network 192.168.0.0. Other important information:
d341 1
a341 1
A few notes about aliases, in OpenBSD you use the interface name only. There is no differences between the first alias and the second alias. Unlike some other operating systems, OpenBSD doesn't refer to them as dc0:0, dc0:1.  If you
d346 1
a346 1
<P>
d349 2
a350 2
They do need to not follow the netmask of the first IP bound to the interface.
In this example <i>/etc/hostname.dc0</i>, two aliases are added to the device dc0,
d362 1
a362 1
Once you've made this file, it does take a reboot for it to take effect. You can, however, bring up the aliases by hand using the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&sektion=8&format=html">ifconfig(8)</a> utility. To bring up the first alias you would use the command:
d398 1
a398 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&sektion=5">/etc/pf.conf</a></i> 
d400 1
a400 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nat.conf&sektion=5">/etc/nat.conf</a></i>.
d404 1
a404 1
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.conf&sektion=8">/etc/rc.conf</a></i>
d413 5
a417 4
If you are using NAT, you will most 
likely also need to set the sysctl value <tt>net.inet.ip.forwarding</tt> 
to 1. You can do this by uncommenting the relevant lines in 
<i><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl.conf&sektion=5">/etc/sysctl.conf</a></i>
d420 7
a426 6
<P>
If you have Packet Filter compiled into your kernel, but you don't have 
it turned on in your <i>/etc/rc.conf</i> file, you can still activate it
with the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&sektion=8">pfctl</a>
command.
d433 1
a433 1
<P>
d447 1
a450 1
</p>
d459 1
a459 1
at the <A HREF="http://www.benzedrine.cx/pf.html">Packet Filter web site</a> 
d461 1
a461 1
<A HREF="http://www.inebriated.demon.nl/pf-howto/">Packet Filter HOWTO</a>. 
d502 1
a502 1
which can be read as &quot;Pass incoming packets from any source to 
d505 1
a505 1
address family, inet (v4) or inet6 (v6)&quot;.
d511 7
a517 3
you wish to filter.  Any of the protocols listed in <i>/etc/protocols</i>
can be specified, by either name or number, but we will concern 
ourselves with TCP, UDP and ICMP.
d521 1
a521 1
Now lets say we don't want to allow any incoming IPv4 connections to 
d537 1
a537 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&sektion=5">/etc/services</a>
d555 1
a555 1
<b> The last matching rule wins</b>.
d584 1
d591 1
a606 1
</p>
d628 1
d633 1
a633 1
will set up simple address spoofing protection.  These addresses
d647 1
a647 1
Our ruleset is starting to look pretty good, when we put 
d695 4
a698 2
binary format.  pflogd(8) is started by default by <i>/etc/rc</i> if pf is 
enabled in <i>/etc/rc.conf/</i>.
d720 1
a720 1
When one is examining their logs, they should be especially careful
d726 2
a727 1
</p><p>
d730 3
a732 2
could provide partial access to sensitive packet payloads (like telnet
or FTP logins)
d734 1
d747 1
a747 1
Note the spaces on both sides of the '{ }' characters.  This is 
d754 2
d758 1
d771 1
d785 1
d787 1
d789 1
d804 1
a804 1
Packet Filter's next cool trick is it's ability to maintain state. 
d806 1
a806 1
spoken to&quot;, in other words, once a connection is established, 
d816 4
a819 2
are blocking all other traffic. But what if I want to ssh out 
of the webserver? What if I need to use lynx to look up 
d821 1
a821 1
incoming connections other than on the specified ports. While 
d841 1
a841 1
to allow the initial handshake to occur, once that occurs, we can block
d863 1
a863 1
webserver. Here's what /etc/pf.conf could look like:
d894 1
a894 1
will let you do to make your pf.conf file look neater and easier
d897 1
d902 1
a902 1
Sets are a useful "shortcut" for writing simple and clear 
d941 1
d958 1
d999 1
a999 1
pflogd(8) will write to ip log entries to <i>/var/log/pflog</i>.
d1001 1
a1001 1
read by tcpdump(8), NOT directly by humans.
d1007 1
d1024 1
a1024 1
keyword, as logging is not performed by syslogd(8), but by a separate 
d1027 1
a1027 1
tcpdump(8)</li>
d1029 1
a1029 1
the <a href="#normalization">scrub</a> option performs.
d1032 1
a1032 1
view the rule numbers PF has assigned, use the command <tt>pfctl -sr</tt>
d1034 1
d1052 1
a1052 1
<a HREF="http://www.geektools.com/rfc/rfc1631.txt">RFC 1631</a>, 
d1058 1
a1058 1
<A HREF="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>), 
d1060 1
a1060 1
<P>
d1062 1
d1066 1
a1067 1
</p>
d1161 1
a1161 1
to be located &quot;behind&quot; one (or a small number) of IP addresses.  Each 
d1378 3
a1380 3
TCP  192.168.1.35:2132 -> 24.5.0.5:53136 -> 65.42.33.245:22       TIME_WAIT:TIME_WAIT
TCP  192.168.1.35:2492 -> 24.5.0.5:55011 -> 65.42.33.245:22       ESTABLISHED:ESTABLISHED
UDP  192.168.1.35:2491 -> 24.5.0.5:60527 -> 24.2.68.33:53       2:1
d1454 3
a1456 3
To activate it, put something like this in your <i>/etc/nat.rules</i> file:
<ul><PRE>
rdr on tl0 from any to any port 21 -> 127.0.0.1 port 8081
d1469 3
a1471 2
and either rebooting the system or sending a 'HUP' signal to inetd.  One
way to send the 'HUP' signal is with the command:
d1498 1
a1498 1
Add a line similar to the following one to your <i>/etc/nat.rules</i>:
d1548 1
a1548 1
rdr on fxp0 from any to any port 8080 -> 192.168.1.35 port 80
d1572 1
a1572 1
rdr on tl0 from any to ! 64.12.163.199 port 21 -> 127.0.0.1 port 8081
d1932 1
a1932 1
<A HREF="faq13.html">IPSec</a>.  Otherwise, people can potentially see your NFS
d1976 1
a1976 1
& NFSCLIENT are in your kernel configuration. (GENERIC kernel has these
d2063 1
a2063 1
<P>
d2066 1
a2066 1
<P>
d2068 1
a2068 1
<UL><PRE>
d2072 1
a2072 1
<P>
d2077 1
a2077 1
<P>
d2079 1
a2079 1
<UL><PRE>
d2083 1
a2083 1
<P>
d2641 1
a2641 1
<small>$OpenBSD: faq6.html,v 1.109 2001/11/20 00:39:41 dhartmei Exp $</small>
@


1.109
log
@Update 6.2 and 6.3 for pf, from Nick Holland <nick@@holland-consulting.net>,
thank you. ok deraadt@@
@
text
@d459 1
a459 1
rule before it reaches it's destination.
d512 1
a512 1
<tt>fxp0</tt> will pass the first &quot;pass in rule and then 
d2589 1
a2589 1
<small>$OpenBSD: faq6.html,v 1.108 2001/11/19 20:59:00 horacio Exp $</small>
@


1.108
log
@change dead link
@
text
@d23 1
a23 1
<li><a href= "#6.2">6.2 - IP Filter</a>
d115 1
a115 1
Any references in /etc/ifaliases, /etc/ipf.rules, /etc/ipnat.rules
d266 1
a266 1
you are using OpenBSD as a router on the Internet, we suggest that you also read the IP Filter setup
d362 7
a368 1
<h2>6.2 - IP Filter</h2>
a369 1

d371 7
a377 4
The IPFilter package was created to handle two tasks, dealing with packet level forwarding permissions 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&sektion=8&manpath=OpenBSD+2.7">ipf(8)</a> and mapping hosts/subnets 
to a range of external addresses <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8&manpath=OpenBSD+2.7">ipnat(8)</a>. 
The configuration files for these two services are <i>/etc/ipf.rules</i> and <i>/etc/ipnat.rules</i>.
a378 1

d380 3
a382 1
To start these services with your system, you need to edit <i>/etc/rc.conf</i> and set the lines to:
d386 1
a386 2
ipfilter=YES
ipnat=YES
d390 5
a394 8
<b>NOTE:</b> You do not need both options activated always, unless you are using both. However, if you are using 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8&manpath=OpenBSD+2.7">ipnat(8)</a>, ipfilter must also be activated.
</p>

<p>
If you are using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8&manpath=OpenBSD+2.7">ipnat(8)</a>, you will most 
likely also need to set the sysctl value &quot;net.inet.ip.forwarding&quot; to 1. You can do this by uncommenting 
the pertaining lines in <i>/etc/sysctl.conf</i>.
a395 1

d397 5
a401 3
If you have IP Filter compiled into your kernel, but you don't have 
it turned on in your <i>/etc/rc.conf</i> file, you can still activate it easily. 

d403 3
a405 2
# <strong>ipf -Fa -f /etc/ipf.rules -E</strong>
# <strong>ipnat -CF -f /etc/ipnat.rules</strong>
d409 9
a417 2
The <tt>-E</tt> flag on ipf 'enables' IP Filter.  <Tt>-Fa</tt> clears out any rules that you may have in there.  <tt>-f /etc/ipf.rules</tt> loads the rules from
<i>/etc/ipf.rules</i>.
d419 3
a421 2
If you make changes to <i>/etc/ipf.rules</i> after ipf is loaded, you can reload your rules pretty easily!

d423 1
a423 1
# <strong>ipf -Fa -f /etc/ipf.rules</strong>
d425 1
a425 1
Same for ipnat...
a426 7
<ul><pre>
# <strong>ipnat -CF -f /etc/ipnat.rules</strong>
</pre></ul>
You will also want to enable <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipmon&sektion=8&manpath=OpenBSD+2.7">ipmon(8)</a> for debugging.
<ul><pre>
# <strong>ipmon -Ds</strong>
</pre></ul>
d428 9
a436 6
This document will cover some basic <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&sektion=8&manpath=OpenBSD+2.7">ipf(8)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8&manpath=OpenBSD+2.7">ipnat(8)</a> configurations below.
There are a lot of nice examples in <i>/usr/share/ipf/</i> for ipnat and ipf. We recommend
you choose the one closest to what you want, and modify it to fit your needs.  You can find other IP Filter information
at the IP Filter <A HREF="http://false.net/ipfilter/">mailing list archive</a>, the <A HREF="http://coombs.anu.edu.au/~avalon/">IP Filter web site</a>, and finally the <A
HREF="http://www.obfuscation.org/ipf/">IP Filter HOWTO</a>. 
d440 1
a440 1
<h3>IPF</h3>
d444 10
a453 4
In order to enable ipf at boot, you will need to modify /etc/rc.conf so it reads IPFILTER=YES.
IP Filter (ipf) is controlled by /etc/ipf.rules, which is read at boot. For a more detailed explanation, see <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&sektion=5&manpath=OpenBSD+2.7">ipf(5)</a>. In the examples that follow, 
fxp0 will represent the external interface to the internet. It will be different for you, based on the
ethernet adaptor present in your computer. These rules will assume full-time internet connectivity, such as you would see on a webserver.
d457 3
a459 1
IP Filter rules are processed sequentially from top to bottom, it helps to visualize each packet having to traverse every rule before it reaches it's destination.
d463 7
a469 1
For example, the default ruleset provided allows all packets to travel in, and all packets to travel out:
d471 1
a472 1
pass out from any to any 
d474 1
d477 18
a494 1
Now lets say we don't want to allow any incoming connections to port 3306 (mysql) because the database should only be connected to from localhost. Our ruleset would look like this:
d497 3
a499 3
pass out from any to any
pass in from any to any
block in on fxp0 from any to any port = 3306
d502 14
a515 2
This says &quot;block in all incoming packets, from anywhere to anywhere whose destination is 3306.&quot;
Essentially a packet destined for port 3306 on interface fxp0 will pass the first &quot;pass in&quot; rule and then be dropped by the &quot;block in port = 3306&quot; rule. If you reversed the order of our incoming rules (remember, order is important):
d518 3
a520 3
pass out from any to any
block in on fxp0 from any to any port = 3306
pass in from any to any
d523 4
a526 2
Packets destined for port 3306 would pass because the last rule in the set allows all packets to pass. It is important to keep this in mind when writing packet filter rules:
 <b> The last matching rule wins</b>.
d530 4
a533 1
Of course, there are exceptions to every rule. the <em>quick</em> option drops the packet at the first rule that matches. Let's look at our above flawed example, if we add <em>quick</em> to the &quot;block in&quot; rule:
d536 3
a538 3
pass out from any to any
block in quick on fxp0 from any to any port = 3306
pass in from any to any
d542 5
a546 1
A packet destined for our host on port 3306 will hit the &quot;block in quick&quot; rule and be dropped immediately. All packets destined for other ports wont find a rule match until they reach our &quot;pass in&quot; rule that allows all packets to pass.
d550 15
a564 7
<p> The safest packet filtering policy is a default deny policy. All traffic not explicitly allowed is denied. This policy is far safer than explicitly denying each protected service, allows for smaller rulesets, and can protect from an accidentally misconfigured service that has been left exposed.
<p>
Let's now look at another real world example ruleset and explain things line by line. Here's an example for a webserver with a default deny policy that only allows ssh connections (for administration) and connections to http (port 80) and https (port 443).
<ul><pre>
pass in quick on fxp0 from any to any port = 22
pass in quick on fxp0 from any to any port = 80
pass in quick on fxp0 from any to any port = 443
d570 6
a575 2
This will allow incoming connections from anywhere to ports 22(ssh), 80(http), and 443(https). It will drop all other connection attempts, and allow all outgoing connections. This is a pretty tight ruleset.
But what if you only wanted to allow internal hosts on your 1.1.1.0 address block to connect to ssh, but allow outside connections to http and https?
d579 3
a581 3
pass in quick on fxp0 from 1.1.1.0/24 to any port = 22
pass in quick on fxp0 from any to any port = 80
pass in quick on fxp0 from any to any port = 443
d586 2
a587 1
Pretty good, but what if we only want to allow one machine (1.1.1.1) to administer the web server remotely?
d591 1
a591 1
pass in quick on fxp0 from 1.1.1.0/24 to any port = 22
d595 1
a595 1
pass in quick on fxp0 from 1.1.1.1/32 to any port = 22
a596 5
IP Filter supports both CIDR and dotted decimal forms of netmask address. You could also write the above as:
<ul><pre>
pass in quick on fxp0 from 1.1.1.1/255.255.255.255 to any port = 22
</pre></ul>
but why would you?
d600 19
a618 1
Here are some good rules for everyone to use (assuming that fxp0 is the external internet-connected interface). First we will set up simple address spoofing protection.
a619 20
block in quick on fxp0 from 127.0.0.0/8 to any
block in quick on fxp0 from 192.168.0.0/16 to any
block in quick on fxp0 from 172.16.0.0/12 to any
block in quick on fxp0 from 10.0.0.0/8 to any
block out quick on fxp0 from any to 127.0.0.1/8
block out quick on fxp0 from any to 192.168.0.0/16
block out quick on fxp0 from any to 172.16.0.0/12
block out quick on fxp0 from any to 10.0.0.0/8
</pre></ul>
It's also a good idea to separate your loopback interface from your other rules. 
<ul><pre>
pass out quick on lo0
pass in quick on lo0
</pre></ul>
Our ruleset is starting to look pretty good, when we put it together, here's what it looks like:
<ul><pre>
# Loopback Rules
pass out quick on lo0
pass in quick on lo0

d621 8
a628 9

block in quick on fxp0 from 127.0.0.0/8 to any
block in quick on fxp0 from 192.168.0.0/16 to any
block in quick on fxp0 from 172.16.0.0/12 to any
block in quick on fxp0 from 10.0.0.0/8 to any
block out quick on fxp0 from any to 127.0.0.1/8
block out quick on fxp0 from any to 192.168.0.0/16
block out quick on fxp0 from any to 172.16.0.0/12
block out quick on fxp0 from any to 10.0.0.0/8
d631 1
a631 2

pass in quick on fxp0 from 1.1.1.1/32 to any port = 22
d634 2
a635 3

pass in quick on fxp0 from any to any port = 80
pass in quick on fxp0 from any to any port = 443
a637 1

a640 1

d645 1
a645 1
<b>Packet logging</b>
d647 3
a649 1
Now that's pretty good, but it could be better. What if we want to log any connection attempts to port 22(ssh) that get blocked by our firewall? Easy, IP Filter can handle this with the <em>log</em> keyword:
d651 2
a652 2
pass in quick on fxp0 from 1.1.1.1/32 to any port = 22
block in log quick on fxp0 from any to any port = 22
d654 3
a656 1
This rule will allow our remote administration machine to connect to port 22, but deny and log all other attempts to connect to port 22.
a657 1
<b> Protocol based packet filtering</b>
d659 12
a670 3
IP Filter can filter any IP protocol based on its number or name from <a href=file://localhost/etc/protocols>/etc/protocols</a>. For the sake of clarity, we will only concern ourselves with tcp, udp, and icmp.  These are the
most commonly used protocols.  All basic internet applications
rely on the availability and correct operation of these protocols.</p>
d672 3
a674 1
In order for ipf to filter based on protocol, the keyword <em>proto</em> must be used. To examine our earlier ssh example rule, since ssh runs over tcp, we should only allow tcp packets to connect. by using the <em>proto</em> keyword to allow only tcp, we get a rule that looks like this:
d676 1
a676 1
pass in quick on fxp0 proto tcp from 1.1.1.1/32 to any port = 22
d678 2
a679 1
But what if we need to allow connections to a service running over both tcp and udp like bind? Well, in the case of tcp/udp, IP Filter allows you to group both protocols together. Note: this only applies to tcp/udp. Using the bind example, a rule allowing tcp and udp connections in a default deny environment would look like:
d681 1
a681 1
pass in quick on fxp0 proto tcp/udp from any to any port = 53
d683 18
d702 11
a712 3
<b> Packet Filtering</b>
<p> 
In addition to filtering based on protocol, IP Filter is also capable of managing fragmented IP packets (a common method of defeating packet filters). There are two possible keywords that can be used when dealing with fragmented ip packets, <em>frag</em> for commonly fragmented IP packets, or <em>short</em> for IP packets with headers too small for comparison. Since fragmented packets can occur normally, depending on link conditions, it is best to only filter packets with headers too small for valid comparison. This can be accomplished with the following rule:
d714 2
a715 1
block in quick proto tcp all with short
d717 8
a724 1
What about IP Options? IP Filter can handle those packets too. Packets can either be dropped if they have IP options set, or they can be dropped based on the specific IP options that are set. For example, the following rule will drop and log all packets with ip options set.
d726 1
a726 1
block in log quick on fxp0 all with ipopts
d728 14
a741 1
This may however break some things such as <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=traceroute&sektion=8&format=html">traceroute(8)</a>. You can also specify which options not to allow. For instance a good rule is to block all packets with source routing options. This is accomplished with this rule:
d743 1
a743 2
block in quick on fxp0 all with opt lsrr
block in quick on fxp0 all with opt ssrr
d745 1
d748 7
a754 1
Now the filtering begins in earnest. IP Filter's greatest strengths are it's ability to filter packets based on TCP flags and to maintain established connections and connection state. It is recommend that all users who wish to filter packets based on TCP flags understand what role each flag plays. For instance, if you wanted to deny all packets with the FIN, URG, and PSH flags set (like for instance an nmap OS fingerprinting attempt) you could use a rule like this:
d756 1
a756 1
block in quick on fxp0 proto tcp from any to any flags FUP
d761 23
a783 3
IP Filter's next cool trick is it's ability to maintain state. Maintaining state has been described as &quot;not speaking until spoken to&quot;, in other words, once a connection is established, packets no longer have to traverse rulesets. This is a very powerful feature allowing much simpler and more secure rule writing.</p>
<p>
For example, let's see how we can apply state to our previous example ruleset (confused yet?). To review, we are allowing management access from our Class C to port 22(ssh) and allowing all incoming web traffic on ports 80(http) and 443(https). We are blocking all other traffic. But what if I want to ssh out of the webserver? What if I need to use lynx to look up something in the FAQ? Well, I can't because I have blocked all incoming connections other than on the specified ports. While this is the safest route, it can be quite inconvenient. By adding the <em>keep state</em> keywords to our &quot;pass out&quot; rule, we can automagically allow incoming connections in response to connections we initiate, such as when web browsing.  Remember, we do need to specify what protocol we are keeping state for.
d785 1
a785 1
pass in quick on fxp0 from 1.1.1.0/24 to any port = 22
d789 1
a789 1
pass out on fxp0 proto tcp from any to any keep state
a790 1
</p>
d792 14
a805 5
This little change will dramatically increase the flexibility and security of our ruleset because IP Filter is extremely flexible. For instance, in the above ruleset, we are allowing all tcp traffic into ports 80 &amp; 443. We can tighten this up even more. In order for a tcp connection to be established, we only need to allow the initial handshake to occur, once that occurs, we can block traffic to that port and allow our &quot;keep state&quot; rule to manage the connection. To allow the initial handshake to complete, we need only allow packets with the SYN and SYNACK flags set. By passing only packets with SYN and SYNACK set, we can prevent many forms of portscanning such as FIN scanning. The rules now look like this:
<ul><pre>
pass in quick on fxp0 from 1.1.1.0/24 to any port = 22
pass in quick on fxp0 from any to any port = 80 flags S/SA
pass in quick on fxp0 from any to any port = 443 flags S/SA
d811 8
a818 1
Let's wrap this up by putting all of the rules we have so far into a ruleset. This ruleset will have a default deny policy, allow management connections from an internal network only (via ssh) and allow incoming traffic on ports 80(http) and 443(https). It will also protect against spoofed non-routeable ip addresses, and drop all packets that are too fragmented to inspect. A pretty comprehensive setup for a public webserver. Here's what /etc/ipf.rules should look like:
d820 2
a821 10
# loopback rules
pass out quick on lo0
pass in quick on lo0

# drop itsy bitsy frags
block in quick proto tcp all with short

# drop source routed packets
block in quick on fxp0 all with opt lsrr
block in quick on fxp0 all with opt ssrr
d824 8
a831 8
block in quick on fxp0 from 127.0.0.0/8 to any
block in quick on fxp0 from 192.168.0.0/16 to any
block in quick on fxp0 from 172.16.0.0/12 to any
block in quick on fxp0 from 10.0.0.0/8 to any
block out quick on fxp0 from any to 127.0.0.1/8
block out quick on fxp0 from any to 192.168.0.0/16
block out quick on fxp0 from any to 172.16.0.0/12
block out quick on fxp0 from any to 10.0.0.0/8
d834 1
a834 1
pass in quick on fxp0 from 1.1.1.0/24 to any port = 22
d837 2
a838 2
pass in quick on fxp0 from any to any port = 80 flags S/SA
pass in quick on fxp0 from any to any port = 443 flags S/SA
d844 42
a885 5
# -- The flags S on the keep state is to ensure that state tracking starts
#    only on the first outbound packet in a tcp session. 
#    unnecessary consumption of state table entries.
# -- The flag s only works on the tcp protocol, so three entries are required to 
#    to cover all three protocols (tcp, udp, icmp).
d887 6
a892 3
pass out	quick on fxp0 proto tcp  from any to any flags S keep state
pass out 	quick on fxp0 proto udp  from any to any         keep state
pass out 	quick on fxp0 proto icmp from any to any         keep state
d896 1
a896 5
If you experience problems, you may want to enable logging on individual rules to effectively troubleshoot. ie: pass in log quick on fxp0 from 1.1.1.0/24 to any port = 22<br> 
When you modify the configuration file to log packets, don't forget to ipf -Fa -f /etc/ipf.rules for the changes to take affect! 
<br>ipmon will write to ip log entries to /var/log/ipflog.<br>

For further information on ipf, the <a href=http://www.obfuscation.org/ipf/ipf-howto.txt>IPF how-to</a> is an excellent source, as are the resources available at the <a href=http://coombs.anu.edu.au/~avalon/ip-filter.html>IP Filter</a> homepage.
a897 1

d899 11
a909 2
<a name="6.3"></a>
<h2>6.3 - IPNAT</h2>
a910 1

d912 2
a913 1
Initial work done by Wayne Fergerstrom &lt;wayne@@methadonia.net&gt;
d915 8
d924 2
a925 2
<a name="nat1.0"></a>
<h3><u>6.3.1 NAT Introduction</u></h3>
d927 3
a929 6
<a name="nat1.1"></a>
<b>Section Introduction</b>
<p>
This section attempts to aid for those
installing and configuring Network Address Translation ("NAT")
on an OpenBSD machine. 
d931 2
a932 7
The user is assumed to have already set up
and configured an OpenBSD machine with two network cards (one
connected to the Internet and the other to the local network).
IP Network Address Translation will work on machines with only one NIC,
however since packets will be going in and out of the same interface,
ethernet collisions will slow down performance considerably.  
</p>
d934 2
a935 7
<p>
Based on <a HREF="http://www.geektools.com/rfc/rfc1631.txt">RFC 1631</a>, ipnat provides an easy way to
map internal networks to a single routeable ("real") internet address. This is very useful if you don't have
officially assigned addresses for every host on your internal network. When
you set up private/internal networks, you can take advantage of reserved
address blocks (assigned in <A HREF="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>), such as:
<P>
d937 2
a938 3
10.0.0.0/8 (10.0.0.0 - 10.255.255.255)<br>
172.16.0.0/12 (172.16.0.0 - 172.31.255.255)<br>
192.168.0.0/16 (192.168.0.0 - 192.168.255.255)<br>
d940 3
a944 3
<a name="nat1.2"></a>
<b>Terminology</b>

d946 21
a966 3
The conventions used in this document are fairly straightforward.
For documentation purposes I will review some of the terms and format
for which this document adheres to.
a967 1

d969 21
a989 1
<strong>"NAT"</strong>
d991 3
a993 2
This describes the function of "Network Address Translation."
The process of NAT is described later in this document.
d995 2
a996 1
</ul>
d998 1
a998 2
<ul>
<strong>"ipnat"</strong>
d1001 10
a1010 6
This is short for "IP Network Address Translation." In-and-of
itself, it can be used interchangeably with NAT. However, in
this document the term "ipnat" will be used solely for
command-line only use.
</p>
</ul>
d1012 3
a1014 2
<ul>
<strong>"IPF"</strong>
d1016 1
d1018 3
a1020 6
This is short for "IP Filter." IP Filter is a portable packet filtering
software that is included as part of OpenBSD.   IP Filter must be enabled
before you can turn on ipnat.  This is easy, just edit /etc/rc.conf
and change ipfilter=NO to ipfilter=YES.  That only changes it for the boot up sequence,
you also need to do 'ipf -E' to turn on ipf while you are booted.  Of course,
this is described further, below.
d1022 1
a1022 1
</ul>
d1029 4
a1032 2
This is how the computers are setup concerning this document. Your setup will vary from this, but 
the purpose of the document is to give you an overview so you can conform this information to your setup.
d1036 1
a1036 1
<b>Computer Operating System: </b>OpenBSD v2.7 i386<br>
d1040 9
a1048 9
	NetGear 10/100MB <b>dc0</b><br>
	Connected to the EXTERNAL LAN (or WAN)<br>
	<b>IP Address: </b>24.5.0.5<br>
	<b>Netmask: </b>255.255.255.0<br>
	<br>
	NetGear 10/100MB <b>dc1</b><br>
	Connected to the INTERNAL LAN<br>
	<b>IP Address: </b>192.168.1.1<br>
	<b>Netmask: </b>255.255.255.0<br>	
d1053 3
a1055 3
	<b>IP Address: </b>24.5.0.5<br>
	<b>Netmask: </b>255.255.255.0<br>
	<b>Gateway: </b>24.5.0.1<br>
d1060 7
a1066 7
In this example,
machines on the LAN use the IP addressing scheme 192.168.1.xxx
(where xxx is a unique number). There are a variety of different
operating systems on the internal LAN including Windows 98,
Windows NT, OpenBSD and Linux. Each machine is connected to a hub
that is designated for internal use. For this document and its
examples the client on the LAN will assume IP address 192.168.1.40
d1071 14
a1084 14
+-----+              +---------+         +----------+
| Hub |--------- dc1 |   NAT   | dc0 ----| Internet |
+-----+              +---------+         +----------+
  | |
  | +-- Client A
  +---- More clients 

                              +-------------------------+
                              |          LEGEND         |
                              +-------------------------+
                              |  NIC dc0 - 24.5.0.5     |
                              |  NIC dc1 - 192.168.1.1  |
                              | Client A - 192.168.1.40 |
                              +-------------------------+
d1098 16
a1113 15
As more and more businesses and users get on the Internet, each one
must have an IP address. Public IP addresses are becoming harder and
harder to get. The solution for a lot of people has been Network
Address Translation (or "NAT"). NAT is a very simple, yet powerful way
to get your LAN connected to the Internet without having to purchase
or lease IP addresses for each machine. NAT is also known as "IP
Masquerading" if you're a Linux user.
</p>

<p>
When NAT is up and running correctly, it allows users on the internal
LAN to access the Internet through a different IP address (the one you
set up with your provider). Each machine on the LAN uses the one IP
address (transparently) of the one machine that is set up to use the
ISP assigned IP address.
a1114 1

d1116 1
a1116 1
The way NAT works is amazingly simple. When a client on the LAN
d1119 2
a1120 2
client's IP address (i.e. 192.168.1.40) and the requested host's IP
address (i.e. 123.45.67.89). The machine running NAT intercepts this
d1122 1
a1122 1
the IP address of the Internet-connected machine (i.e. 24.5.0.5). This
d1128 3
a1130 2
sends the packet to the client. The client didn't have any idea of
what happened and spoofed Internet connectivity is totally transparent.
d1138 2
a1139 2
Client ----------------- dc1 [ NAT ] dc0 ---------- Internet Host
192.168.1.40 --- 192.168.1.1 [ NAT ] 24.5.0.5 --- 123.45.67.89
d1142 1
a1142 1
From: 192.168.1.40  &gt;&gt;=== NAT ===&gt;&gt;     From: 24.5.0.5
d1152 1
a1152 1
<b>Why to use NAT</b>
d1156 1
a1156 1
presented with another minor problem. How to get Internet access to
d1158 1
a1158 1
few options I could implement ranging from obtaining extra IP
d1160 1
a1160 1
(Don't let the cable modem example fool you.  NAT is powerful enough
d1166 6
a1171 5
reason is for saving money. There
are two roommates in my house (each with their own PC) and myself with
3 computers. My ISP only allows for three IP addresses per household.
This means that there weren't enough IPs to allow every machine
internet access.
d1175 1
a1175 1
By using NAT each machine will have a unique (internal) IP address
d1180 1
a1180 1
<a name="nat2.3"></a>
d1185 1
a1185 1
IPF and NAT. This is easily accomplished by editing the files listed
d1193 3
a1195 4
<ul>
	ipfilter=YES<br>
	ipnat=YES
</ul>
d1201 3
a1203 3
<ul>
	net.inet.ip.forwarding=1
</ul>
d1206 1
a1206 1
After these changes are made, the machine is now ready to for the
d1211 1
a1211 1
<a name="nat2.4"></a>
d1215 2
a1216 1
The first step is to configure the IPF rules file (<i>/etc/ipf.rules</i>).
d1218 1
a1218 1
through this firewall option without any interference. The file
d1223 2
a1224 2
pass in from any to any
pass out from any to any
d1228 1
a1228 1
Again for more information you can read <a href="#6.2">FAQ 6.2</a>
d1232 3
a1234 1
The NAT configuration file (<i>/etc/ipnat.rules</i>) has a very simple syntax.
d1240 1
a1240 2
map dc0 192.168.1.0/24 -&gt; 24.5.0.5/32 portmap tcp/udp 10000:60000
map dc0 192.168.1.0/24 -&gt; 24.5.0.5/32
d1248 1
a1248 1
<strong>"map"</strong>
d1250 1
a1250 3
This is the command you are giving ipnat. It is telling ipnat
that this entry is an entry to change IP addresses between the LAN
and the Internet.
d1255 1
a1255 1
<strong>"dc0"</strong>
d1266 1
a1266 16
192.168.1.1 through 192.168.1.254" should be mapped. If you would
prefer not to use CIDR notation you can substitute "/24" for
"/255.255.255.0".
</p>
</ul>

<ul>
<b>"24.5.0.5/32"</b>
<p>
This IP address and netmask state the IP address
that the LAN IP addresses will be mapped to.  /32 means one single
IP address.  You can also map to a /24, or 256 IP addresses (or a /27,
or whatever number of bits you'd like)!! This is
useful if you have several thousand client machines behind your NAT....
(Of course, this is only useful if that /24 is being routed to your OpenBSD
box!)
d1271 1
a1271 1
<b>"portmap tcp/udp 10000:60000"</b>
d1273 1
a1273 2
This maps all tcp/udp packets
to ports in the range of 10000 to 60000.
a1276 27
<p>
The second line has almost the same entry except for the last portion.
This tells ipnat to map anything else (not tcp/udp, those packets are already
matched by the first line) to whatever port
it requests (used for ICMP, and other protocols). Once this
is in the file, all that's needed is to run the IPF daemon.
</p>

<br>

<a name="nat2.5"></a>
<b>Selective NAT</b>

<p>
You might want to prevent NAT to some range of addresses on the outside.
Continuing the example above, suppose that there are hosts on the 24.5.0.0/28
network for which you would like your NAT gateway to act as a simple router,
without address translation.
You can suppress address translation for traffic going from dc0 to this subnet
with the following:
</p>

<ul><pre>
map dc0 from 192.168.1.0/24 ! to 24.5.0.0/28 -&gt; 24.5.0.5/32 portmap tcp/udp 10000:60000
map dc0 from 192.168.1.0/24 ! to 24.5.0.0/28 -&gt; 24.5.0.5/32
</pre></ul>

d1281 1
a1281 1
Executing NAT is a very simple process also. Once the configuration is
d1283 2
a1284 2
possible-to test the setup stage) is to reboot your OpenBSD machine.
This is accomplished with the command "<i>reboot</i>"
d1288 1
a1288 1
If you would like to run ipnat from the command line, use the following
d1293 2
a1294 2
# ipf -Fa -f /etc/ipf.rules -E
# ipnat -CF -f /etc/ipnat.rules
d1298 4
a1301 13
The first line is to enable IPF (remember that NAT piggy-backs on IPF
therefore IPF must be initialized and running before NAT can be loaded).
The options on the command line "-Fa" clear out any existing entries
already in effect. "-f /etc/ipf.rules" tells ipf where the rules file
can be found. "-E" is the switch to enable the IPF daemon.
</p>

<p>
The second command line is to enable NAT. "-CF" clears and flushes all

existing entries in the NAT table. "-f /etc/ipnat.rules" tells NAT where

the NAT rules file is at. NAT is now running. It's as simple as that.
d1307 1
a1307 1
but don't want to reboot) just execute the 2nd command over again. The
d1321 2
a1322 2
effect, you use the "-l" option. This option will list all the
settings and current sessions that ipnat is running:
d1326 4
a1329 6
# <b>ipnat -l</b>
map dc0 192.168.1.0/24 -&gt; 24.5.0.5/32 portmap tcp/udp 10000:60000
map dc0 192.168.1.0/24 -&gt; 24.5.0.5/32

List of active sessions:
MAP 192.168.1.40  2473  &lt;- -&gt; 24.5.0.5  13463 [129.128.5.191 80]
d1333 1
a1333 3
The purpose of the first two lines is to confirm the settings that
were entered in /etc/ipnat.rules earlier. The line(s) below will show
you a list of the current NAT controlled connections.
a1334 1

d1336 1
a1336 1
<b>"MAP 192.168.1.40  2473"</b>
d1339 2
a1340 2
machine on the LAN that is using NAT. The port number used to make
the connection is displayed afterwards.
a1342 1

d1344 1
a1344 1
<b>"&lt;- -&gt;"</b>
d1346 2
a1347 2
This shows that NAT is handling the flow of traffic
in both directions.
a1349 1

d1351 1
a1351 1
<b>"24.5.0.5  13463"</b>
d1353 1
a1353 2
This denotes that the connection is going
to the Internet via IP address 24.5.0.5 and using port 13463.
a1355 1

d1357 1
a1357 1
<b>"129.128.5.191 80"</b>
d1359 1
a1359 2
The IP address and the port being connected
to are listed last.
d1364 1
a1364 1
<b> Limitations of NAT (in FTP)</b>
d1367 27
a1393 21
There are a few limitations of NAT. One is with FTP. When a user connects
to a remote FTP server and requests information or file, the FTP server
will make a connection to the client and transfer the info. This is done
on a random free port. This is a problem for users attempting to gain
access to FTP servers from within the LAN. When the FTP server sends its
information it sends it to the external NIC at a random port. The NAT
machine will receive this, but because it has no mappings for the unknown
packet and doesn't have any mappings for that port, it will drop the
packet and won't deliver it.

<p>
The solution to this is to place yourself in "passive mode" in your
FTP client. This will tell the server that you want to connect to the
server, and not what you just read. Then when you make that connection out
NAT will correctly handle your connection.
<P>
IP Filter provides another solution for this situation,
that is, an ftp proxy which is built-in to the NAT code.
To activate it, put something like this before your other NAT mappings.
<PRE>
map dc0 192.168.1.0/24 -&gt; 24.5.0.5/32 proxy port ftp ftp/tcp
d1395 3
a1397 7
With this in place, the kernel will watch your FTP connections
for the "PORT" command coming from the ftp client, and it will
replace the IP address and port with it's own outside IP address, and a port
of its own choosing.  Then it will open up that port and tunnel the
data to the port your ftp client asked for.  Obviously, this is slightly
more resource intensive.  But, unless your NAT/IP Filter box is reaching
critical mass, you should be fine.
d1399 28
a1426 2


d1432 9
a1440 7
        At times you may need to redirect incoming or outgoing traffic for
        a certain protocol or port. A good example of this is if there were a
        server residing inside the LAN running a web server. Incoming connections
        to your valid Internet IP will find that unless your NAT box is running
        a web server, no connection can be made. For this purpose we use the
        NAT 'rdr' directive in the rules file to instruct where to redirect
        (or route) a particular connection to.
d1444 3
a1446 4

        For our example, lets say a web server resides on the LAN with IP address
        of 192.168.1.80. The NAT rules file needs a new directive to handle this.
        Add a line similar to the following one to your ipnat.rules:
d1450 1
a1450 1
rdr dc0 24.5.0.5/32 port 80 -&gt; 192.168.1.80 port 80
d1454 1
a1454 1
The reason for each line is this:
a1455 1

d1459 1
a1459 1
This is the command you are giving ipnat. It is telling ipnat
a1463 1

d1465 1
a1465 1
<b>"dc0"</b>
d1472 1
a1472 1
<b>"24.5.0.5/32"</b>
d1474 2
a1475 1
This means an incoming connection to this IP address (only on dc0, as above)
d1482 1
a1482 1
This is the port (80) that should be redirected. The number
d1486 1
a1486 1
file /etc/services.
a1488 1

d1490 1
a1490 1
<b>"192.168.1.80"</b>
d1492 8
a1499 4
The IP address and netmask of the LAN machine
which the packets are redirected to. The netmask is always "/32"
(and therefore not needed to be specified) so
the packets can be redirected to a particular machine.
a1501 1

d1506 24
d1553 1
a1553 1
<b>6.3.4 Links and X-References</b>
d1558 2
a1559 2
<li>/etc/ipnat.rules - NAT rules file
<li>/etc/rc.conf - need to edit to start up ipnat and ipf at boot time
a1560 1
<li>/usr/share/ipf/nat.1 - samples of ipnat.rules
d1567 2
a1568 3
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8&manpath=OpenBSD+2.7">http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=5&manpath=OpenBSD+2.7">Man page showing correct ipnat.rules syntax</a>
<li><a href="http://coombs.anu.edu.au/~avalon/">http://coombs.anu.edu.au/~avalon/</a>
d2589 1
a2589 1
<small>$OpenBSD: faq6.html,v 1.107 2001/10/16 02:00:43 nick Exp $</small>
@


1.107
log
@Changed 'ipf' to 'ipfilter'.  ericj@@ ok
@
text
@d51 1
a51 1
<A HREF="http://www.3com.com/solutions/en_US/ncs/501302.html">Understanding IP addressing</a>.
d2357 1
a2357 1
<small>$OpenBSD: faq6.html,v 1.106 2001/08/25 09:31:33 jufi Exp $</small>
@


1.106
log
@
copyright extended to 2001
@
text
@d779 1
a779 1
and change ipf=NO to ipf=YES.  That only changes it for the boot up sequence,
d2357 1
a2357 1
<small>$OpenBSD: faq6.html,v 1.105 2001/08/23 22:01:27 heko Exp $</small>
@


1.105
log
@ o ports includes bind9, and bind8 is marked as RESTRICTED, so suggest
   using bind9 instead if bind4 is not an option.
   ok jakob@@
 o zap dents reference, dents is dead; from jakob@@
@
text
@d9 1
a9 1
<meta name= "copyright"     content= "This document copyright 1998-1999 by OpenBSD.">
d2357 1
a2357 1
<small>$OpenBSD: faq6.html,v 1.102 2001/08/08 21:06:32 jsyn Exp $</small>
@


1.104
log
@Ports tree no longer includes djbware, nor does OpenBSD support any.
Remove reference to dnscache/djbdns from the FAQ.
ok deraadt@@
@
text
@d1934 1
a1934 4
<li>The BIND 8.x implementation in <i>/usr/ports/net/bind8</i>.(See <a href="../ports.html">ports</a>)
<LI>Some people who were particularly unhappy with BIND decided to write Dents
their own DNS server from scratch, <A HREF="http://www.dents.org">Dents</a>.
It contains some interesting features.
@


1.103
log
@
Fix named.boot syntax
From: Brian Bucher <babucher@@alum.mit.edu>
@
text
@a1934 5
<li>D. J. Bernstein's <a href="http://cr.yp.to/dnscache.html">DNSCache</a>. DNSCache is also available in the ports tree at <i>/usr/ports/net/dnscache/</i>.
This program includes a minimalist DNS server which is perfect for sites who
do not have a large existing database of DNS entries.  DNSCache could easily
be script driven.  Its setup does not resemble anything below, but is well
documented at its web page.
@


1.102
log
@giant spelling/grammar clean-up; ok millert@@
@
text
@d1975 2
a1976 4
; type    domain                source host/file
backup file
cache
root.cache
d2365 1
a2365 1
<small>$OpenBSD: faq6.html,v 1.101 2001/07/06 07:41:29 horacio Exp $</small>
@


1.101
log
@more ipf, ipmon, ipnat -> manpath=OpenBSD+2.7
@
text
@d1565 1
a1565 1
<h3>ppp(8) extra's</h3>
d1870 1
a1870 1
<li>See RFC's <a href="http://www.faqs.org/rfcs/rfc1033.html">1033</a>, <a href="http://www.faqs.org/rfcs/rfc1034.html">1034</a>, and <a href="http://www.faqs.org/rfcs/rfc1035.html">1035</a> for more information on the Internet name-domain system.</li>
d2201 1
a2201 1
This information is useful for debugging DNS, but in some instances you may not want this output publically offered.
d2367 1
a2367 1
<small>$OpenBSD: faq6.html,v 1.100 2001/06/14 22:57:01 fgsch Exp $</small>
@


1.100
log
@ipnat.conf -> ipnat.rules; spotted by bignose at irc.
@
text
@d290 1
a290 1
net.inet.ip.forwarding: 0 -> 1
d367 2
a368 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&sektion=8">ipf(8)</a> and mapping hosts/subnets 
to a range of external addresses <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a>. 
d383 1
a383 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a>, ipfilter must also be activated.
d387 1
a387 1
If you are using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a>, you will most 
d415 1
a415 1
You will also want to enable ipmon for debugging.
d420 2
a421 2
This document will cover some basic <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&sektion=8">ipf(8)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a> configurations below.
d434 1
a434 1
IP Filter (ipf) is controlled by /etc/ipf.rules, which is read at boot. For a more detailed explanation, see <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&apropos=0&sektion=5&format=html">ipf(5)</a>. In the examples that follow, 
d900 1
a900 1
From: 192.168.1.40  >>=== NAT ===>>     From: 24.5.0.5
d905 1
a905 1
To:   192.168.1.40  <<=== NAT ===<<     To: 24.5.0.5
d995 2
a996 2
map dc0 192.168.1.0/24 -> 24.5.0.5/32 portmap tcp/udp 10000:60000
map dc0 192.168.1.0/24 -> 24.5.0.5/32
d1074 2
a1075 2
map dc0 from 192.168.1.0/24 ! to 24.5.0.0/28 -> 24.5.0.5/32 portmap tcp/udp 10000:60000
map dc0 from 192.168.1.0/24 ! to 24.5.0.0/28 -> 24.5.0.5/32
d1137 2
a1138 2
map dc0 192.168.1.0/24 -> 24.5.0.5/32 portmap tcp/udp 10000:60000
map dc0 192.168.1.0/24 -> 24.5.0.5/32
d1141 1
a1141 1
MAP 192.168.1.40  2473  <- -> 24.5.0.5  13463 [129.128.5.191 80]
d1207 1
a1207 1
map dc0 192.168.1.0/24 -> 24.5.0.5/32 proxy port ftp ftp/tcp
d1241 1
a1241 1
rdr dc0 24.5.0.5/32 port 80 -> 192.168.1.80 port 80
d1334 2
a1335 2
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8</a>
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=5&format=html">Man page showing correct ipnat.rules syntax</a>
d1352 1
a1352 1
# <strong>echo dhcp >/etc/hostname.xl0</strong>
d1381 1
a1381 1
# <strong>echo xl1 xl2 xl3 >/etc/dhcpd.interfaces</strong>
d2076 1
a2076 1
; <<>> DiG 2.2 <<>> @@nemo.yewtopia yewtopia any any
d2080 1
a2080 1
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 59904
d2367 1
a2367 1
<small>$OpenBSD: faq6.html,v 1.99 2001/05/06 16:33:15 jufi Exp $</small>
@


1.99
log
@
Links to man pages.
@
text
@d1237 1
a1237 1
        Add a line similar to the following one to your ipnat.conf:
d2367 1
a2367 1
<small>$OpenBSD: faq6.html,v 1.98 2001/05/06 16:00:18 jufi Exp $</small>
@


1.98
log
@
Shorter lines and correction.
@
text
@d420 2
a421 1
This document will cover some basic ipf(8) and(8) ipnat configurations below.
d2367 1
a2367 1
<small>$OpenBSD: faq6.html,v 1.97 2001/05/05 04:34:09 ericj Exp $</small>
@


1.97
log
@
add section on "selective NAT". from Hal Snyder <hal@@vailsys.com>
@
text
@d366 4
a369 1
The IPFilter package was created to handle two tasks, dealing with packet level forwarding permissions <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&sektion=8">ipf(8)</a> and mapping hosts/subnets to a range of external addresses <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a>. The configurationf iles for these two services are <i>/etc/ipf.rules</i> and <i>/etc/ipnat.rules</i>.
d382 2
a383 1
<b>NOTE:</b> You do not need both options activated always, unless you are using both. However, if you are using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a>, ipfilter must also be activated.
d387 3
a389 1
If you are using <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&sektion=8">ipnat(8)</a>, you will most likely also need to set the sysctl value &quot;net.inet.ip.forwarding&quot; to 1. You can do this by uncommenting the pertaining lines in <i>/etc/sysctl.conf</i>.
d2366 1
a2366 1
<small>$OpenBSD: faq6.html,v 1.96 2001/05/05 03:17:28 ericj Exp $</small>
@


1.96
log
@cleanup ipf section a bit.. still needs more work
@
text
@d1055 17
d2360 1
a2360 1
<small>$OpenBSD: faq6.html,v 1.95 2001/05/05 02:50:04 ericj Exp $</small>
@


1.95
log
@add wireless nic's to list
@
text
@d366 1
a366 4
The IP Filter package was created to handle two tasks, dealing with
packet level forwarding permissions <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&apropos=0&sektion=8&format=html">ipf(8)</a> and mapping hosts/subnets to a range of
external addresses <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipnat&apropos=0&sektion=8&format=html">ipnat(8)</a>. The configuration files for these two services are /etc/ipf.rules and
/etc/ipnat.rules.
d370 14
a383 4
You need to edit /etc/rc.conf to activate them at boot time. You also need to have 
net.inet.ip.forwarding=1 in your /etc/sysctl.conf (or your kernel needs to have IPFORWARDING
or GATEWAY options turned on.) You also need a kernel compiled with option
IPFILTER and IPFILTER_LOG (the GENERIC kernels do have these options).
d388 1
a388 1
it turned on in your /etc/rc.conf file, you can still activate it easily. 
d391 2
a392 2
# ipf -Fa -f /etc/ipf.rules -E
# ipnat -CF -f /etc/ipnat.rules
d397 1
a397 1
/etc/ipf.rules.  
d399 1
a399 1
If you make changes to /etc/ipf.rules after ipf is loaded, you can reload your rules pretty easily!
d402 1
a402 1
# ipf -Fa -f /etc/ipf.rules
d407 1
a407 1
# ipnat -CF -f /etc/ipnat.rules
d411 1
a411 1
# ipmon -Ds
d414 2
a415 2
This document will cover some basic ipf and ipnat configurations below.
There are a lot of nice examples in /usr/share/ipf/ for ipnat and ipf. We recommend
a482 3
#############################
# begin ruleset
#############################
a487 3
##############################
# end ruleset
##############################
a495 3
#############################
# begin ruleset
#############################
a500 3
##############################
# end ruleset
##############################
d539 1
a539 5
###########################
# begin ruleset
###########################
# loopback rules

a569 4

#############################
# end ruleset
#############################
a624 3
#############################
# begin ruleset
#############################
a629 3
##############################
# end ruleset
##############################
a634 3
#############################
# begin ruleset
#############################
a639 3
##############################
# end ruleset
##############################
a644 3
###########################
# begin ruleset
###########################
a685 4

#############################
# end ruleset
#############################
d2343 1
a2343 1
<small>$OpenBSD: faq6.html,v 1.94 2001/05/05 01:58:28 ericj Exp $</small>
@


1.94
log
@named confs are in var, not etc
@
text
@d120 2
d2375 1
a2375 1
<small>$OpenBSD: faq6.html,v 1.93 2001/04/18 17:59:57 ericj Exp $</small>
@


1.93
log
@correct broken link;  Paul D. Ouderkirk <pdo@@zenspider.ca>
@
text
@d1973 1
a1973 1
<h4>6.8.5.1 Configuration in <i>/etc/named</i></h4>
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.92 2001/03/30 18:57:15 ericj Exp $</small>
@


1.92
log
@ndc reload sends the HUP, not restart; Mike Pechkin <mpech@@prosoft.org.lv>
@
text
@d51 1
a51 1
<A HREF="http://www.3com.com/nsc/501302s.html">Understanding IP addressing</a>.
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.91 2001/03/27 17:40:26 jufi Exp $</small>
@


1.91
log
@
Typo.
@
text
@d2189 1
a2189 1
# <strong>ndc restart</strong>
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.90 2001/03/26 17:14:10 todd Exp $</small>
@


1.90
log
@spelling
@
text
@d2135 1
a2135 1
named_user=named                # Named should not run as root unless Nenecessary
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.89 2001/03/17 20:59:33 austin Exp $</small>
@


1.89
log
@Spelling: gleamed s.b. gleaned
@
text
@d151 1
a151 1
configured. You can tell this by seeing that vaulues are already set in &quot;inet 10.0.0.38 netmask
d1078 1
a1078 1
it requests (used for ICMP, and other protcols). Once this
d1471 1
a1471 1
create your own <b>ppp.conf</b> file. Here I will start with the simplist setup and probobly most used setup.
d1488 1
a1488 1
<b>NOTICE</b> - On OpenBSD 2.6, the system shipped with a <i>/etc/ppp/ppp.conf.example</i> that had an incorrect setting for device. The device was <i>"set device /dev/cuaa0"</i>. This should be <i>/dev/cua00</i> which would correspond to serial device 1. (COM1). Your device might not be on COM1, however the nameing scheme was wrong.
d1504 1
a1504 1
Here I will use <b>myisp:</b> as our tag refering to our ISP. Here is a simple setup incorporating all we need
d1670 1
a1670 1
which filesystems you wish to have accessable via NFS and defines who is
d1904 1
a1904 1
<li><b>Note:</b> There is no practical restriction on the number of DNS servers on a LAN. Any or all machines on the LAN may offer DNS service if they are so configured. Whether any such server is considered authoritative from outside your LAN (or is even known from outside your LAN) is a configuration factor which typically is controlled at the next level up from your LAN in the domain hiearchy.</li>
d2135 1
a2135 1
named_user=named                # Named should not run as root unless neccesary
d2223 1
a2223 1
You can also block transfers for all domains by editting /var/named.conf and add the 'allow-transfer' parameter to the 'options' section of the configuration file:
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.88 2001/01/27 22:19:47 ericj Exp $</small>
@


1.88
log
@
some html cleanup; from mpech@@prosoft.org.lv
@
text
@d2252 1
a2252 1
<strong>NOTE:</strong> This does not apply to <strong>ALL</strong> ADSL providers, but much information can be gleamed from the setup here. This is known to work for <a href="http://www.inode.at">Inode</a>, an ADSL provider in Austria.
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.87 2001/01/13 20:15:52 ericj Exp $</small>
@


1.87
log
@minor fixes from Shell Hung <shell@@shellhung.org>
@
text
@d84 1
a84 1
</ul></pre>
d144 1
a144 1
</ul></pre>
d177 1
a177 1
</ul></pre>
d186 1
a186 1
</ul></pre>
d204 1
a204 1
</ul></pre>
d217 1
a217 1
</ul></pre>
d255 1
a255 1
</ul></pre>
d279 1
a279 1
</ul></pre>
d289 1
a289 1
</ul></pre>
d334 1
a334 1
</ul></pre>
d342 1
a342 1
</ul></pre>
d354 1
a354 1
</ul></pre>
a764 1
</pre>
d1463 1
a1463 1
</pre></ul></strong>
d2128 1
a2128 1
</ul></pre>
d2137 1
a2137 1
</ul></pre>
d2172 1
a2172 1
</ul></pre>
d2212 1
a2212 1
<pre><ul>
d2224 1
a2224 1
<pre><ul>
d2230 2
a2231 1
If you are using Bind 4 (default in OpenBSD) you can edit /var/named/named.boot and use the 'xfrnets' option.<br><pre><ul>
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.86 2000/12/26 20:07:04 ericj Exp $</small>
@


1.86
log
@
PPTP setup faq. from Michael 'fr0sty' Kummer <frost@@f00bar.net>
cleaned up greatly by me.
@
text
@d1372 1
a1372 1
server's idea of DNS by first uncommenting the 'requre' lines in it (they are
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.85 2000/12/26 17:06:36 ericj Exp $</small>
@


1.85
log
@
set timeout XX, set's ppp's IDLE timeout.. pointed out by
Joel Sing <jsing@@origin.net.au>
@
text
@d30 1
d2248 112
d2373 1
a2373 1
<small>$OpenBSD: faq6.html,v 1.84 2000/12/26 16:57:55 ericj Exp $</small>
a2376 2


@


1.84
log
@
cleanup section of /etc/ifaliases. requested by Jason Nash <jason@@the-nashes.net>
@
text
@d1525 2
a1526 2
Password = ppp. These values will need to be changed. The line &quot;set timeout&quot; sets the timeout for
the entire login process to 120 seconds. The &quot;set ifaddr&quot; line is a little tricky. Here is a more
d2260 1
a2260 1
<small>$OpenBSD: faq6.html,v 1.83 2000/11/30 04:58:09 ericj Exp $</small>
@


1.83
log
@fix rule mistake pointed out by scott@@websetnet.com
@
text
@d303 2
d306 1
a306 1
OpenBSD has a simple mechanism for setting up ip aliases on an interface. To do this simply edit the file <i>/etc/ifaliases</i>. This file is read upon boot by the <i>/etc/rc</i> script, which is part of the <a href="faq10.html#10.3">rc startup hierarchy</a>. For the example, we assume that the user has an interface <b>dc0</b> and is on the network 192.168.0.0. Other important information:
a314 8
The format of the <i>/etc/ifaliases</i> file is:
</p>

<ul><pre>
[interface] [ip address] [netmask]
</ul></pre>

<p>
d324 1
a324 1
In this example <i>/etc/ifaliases</i>, two aliases are added to the device dc0,
d329 1
a329 17
$ <b>cat /etc/ifaliases</b>
dc0	192.168.0.3	255.255.255.255
dc0	192.168.0.4	255.255.255.255
</ul></pre>
<P>
An all ones netmask is used here so that a duplicate routing table entry for
the same network is not created again.


<p>
<b>NOTE</b>: <br>

Starting in OpenBSD 2.7, you can set aliases in the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html"><i>/etc/hostname.*</i></a> file. To do the same setup as above, you would have an <i>/etc/hostname.dc0</i> file that is structured like this:
</p>


<ul><pre>
a334 1

d2260 1
a2260 1
<small>$OpenBSD: faq6.html,v 1.82 2000/11/24 05:36:07 jeremy Exp $</small>
@


1.82
log
@updated keep state info per faq@@ complaints.  groovy'ed by chris@@
@
text
@d731 3
a733 3
pass in      quick on fxp0 proto tcp  from any to any flags S keep state
pass in      quick on fxp0 proto udp  from any to any         keep state
pass in      quick on fxp0 proto icmp from any to any         keep state
d2283 1
a2283 1
<small>$OpenBSD: faq6.html,v 1.81 2000/11/15 22:06:06 chris Exp $</small>
@


1.81
log
@Fix RFC link
@
text
@d725 9
a733 1
pass out on fxp0 proto tcp from any to any keep state
d2283 1
a2283 1
<small>$OpenBSD: faq6.html,v 1.80 2000/11/10 14:03:33 art Exp $</small>
@


1.80
log
@Remove unnecessary "is".
From Keith Reynolds <shomas@@digitalwebs.net>
@
text
@d52 2
a53 1
fundamental knowledge to build upon when working with IP networks!
d56 4
a59 4
mail servers, you may benefit greatly by <A HREF="http://www.nexor.com/info/rfc/index/rfc.htm?index/rfc.html">reading the RFCs</a>.
Of course, you can't read all of them.  
Rather, pick some topics that you are interested in, or that you use in
your work environment.  Look them up, find out how they are intended to
d2275 1
a2275 1
<small>$OpenBSD: faq6.html,v 1.79 2000/09/17 16:13:49 jeremy Exp $</small>
@


1.79
log
@howto stop AXFR queries in the DNS section
@
text
@d269 1
a269 1
The GENERIC kernel is already has the ability to allow IP Forwarding, but needs to be turned on. You should
d2274 1
a2274 1
<small>$OpenBSD: faq6.html,v 1.77 2000/09/14 19:09:10 ericj Exp $</small>
@


1.78
log
@proto comes before src/dest when keeping state. faq example was generating errors
@
text
@d2206 51
a2256 2
<h3>6.8.7 What didn't you tell me about setting up DNS?</h3>

@


1.77
log
@fix flag names; from Alexander Ivantchev <aivantchev@@bivwood.com>
@
text
@d664 1
a664 1
pass out on fxp0 from any to any proto tcp keep state
d680 1
a680 1
pass out on fxp0 from any to any proto tcp keep state
d724 1
a724 1
pass out on fxp0 from any to any proto tcp keep state
d2225 1
a2225 1
<small>$OpenBSD: faq6.html,v 1.76 2000/09/09 21:31:03 jeremy Exp $</small>
@


1.76
log
@start ipmon when manually starting ipf, proto has to be specified when keeping state - double checked by chris@@
@
text
@d671 1
a671 1
This little change will dramatically increase the flexibility and security of our ruleset because IP Filter is extremely flexible. For instance, in the above ruleset, we are allowing all tcp traffic into ports 80 &amp; 443. We can tighten this up even more. In order for a tcp connection to be established, we only need to allow the initial handshake to occur, once that occurs, we can block traffic to that port and allow our &quot;keep state&quot; rule to manage the connection. To allow the initial handshake to complete, we need only allow packets with the SIN and SIN/ACK flags set. By passing only packets with SIN and SIN/ACK set, we can prevent many forms of portscanning such as FIN scanning. The rules now look like this:
d2225 1
a2225 1
<small>$OpenBSD: faq6.html,v 1.75 2000/08/21 16:48:58 jufi Exp $</small>
@


1.75
log
@
Bad grammar
@
text
@d421 4
a424 1

d655 1
a655 1
For example, let's see how we can apply state to our previous example ruleset (confused yet?). To review, we are allowing management access from our Class C to port 22(ssh) and allowing all incoming web traffic on ports 80(http) and 443(https). We are blocking all other traffic. But what if I want to ssh out of the webserver? What if I need to use lynx to look up something in the FAQ? Well, I can't because I have blocked all incoming connections other than on the specified ports. While this is the safest route, it can be quite inconvenient. By adding the <em>keep state</em> keywords to our &quot;pass out&quot; rule, we can automagically allow incoming connections in response to connections we initiate, such as when web browsing.
d664 1
a664 1
pass out on fxp0 from any to any keep state
d680 1
a680 1
pass out on fxp0 from any to any keep state
d724 1
a724 1
pass out on fxp0 from any to any keep state
d732 4
d2225 1
a2225 1
<small>$OpenBSD: faq6.html,v 1.74 2000/07/18 09:02:47 reinhard Exp $</small>
@


1.74
log
@zues.theos.com->zeus.theos.com
@
text
@d1623 1
a1623 1
<H3>6.6.3 - I don't want to the kernel to dynamically allocate a certain port</h3>
d2218 1
a2218 1
<small>$OpenBSD: faq6.html,v 1.73 2000/05/26 19:43:44 reinhard Exp $</small>
@


1.73
log
@typos
note that chris@@ dislikes </li>
@
text
@d1876 1
a1876 1
<i>zues.theos.com</i> is, one would suppose, running OpenBSD and is properly configured to be a DNS server for the <i>openbsd.org</i> domain.
d2218 1
a2218 1
<small>$OpenBSD: faq6.html,v 1.72 2000/05/26 07:10:33 chris Exp $</small>
@


1.72
log
@Misc cleanup
@
text
@d330 1
a330 1
which, by the way, was configured as 192.168.0.2 netmask 255.255.0.0.
d1947 1
a1947 1
<li>The BIND 8.x implementation in <i>/usr/ports/net/bind8</i>.(See <a href="../ports.html">ports</a>)</li>
d2218 1
a2218 1
<small>$OpenBSD: faq6.html,v 1.71 2000/05/16 20:42:16 ericj Exp $</small>
@


1.71
log
@minor fixes Reinhard J Sammer <reinhard@@sammer.net>
@
text
@a65 6
<ul>Table Of Contents
	<li><a href="#6.1.1">6.1.1 - Identifying and Setting Up Your Network Interfaces</a></li>
	<li><a href="#6.1.2">6.1.2 - Setting up your OpenBSD box as a Gateway</a>
	<li><a href="#6.1.3">6.1.3 - Setting up aliases on an interface</a>
</ul>

d101 2
a102 1
<ul>Which Includes Cards Such As: <b>Note:</b> Some drivers which were in OpenBSD 2.6, such as mx , ax , al and pn have been replaced by this driver. Take note.
d111 2
d147 1
a147 1
gives us alot more information than we are needing at this
d156 6
a161 6
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&sektion-4&format=html">lo*</a> - Loopback Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sl&sektion=4&format=html">sl*</a> - Slip Network Interface
<li>ppp* - Point to Point Protocol
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tun&sektion=4&format=html">tun*</a> - Tunnel Network Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&sektion=4&format=html">enc*</a> - Encapsulating Interface
<li><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&sektion=4&format=html">bridge*</a> - Ethernet bridge interface
d320 11
a330 1
A few notes about aliases, in OpenBSD you use the interface name only. There is no differences between the first alias and the second alias. Hence, like in some other os's you don't refer to them as dc0:0, dc0:1. Also, make sure that your netmask for the alias is <b>NOT</b> the same as for the actual ip of the interface. In this example <i>/etc/ifaliases</i>, we are adding 2 aliases to the device <b>dc0</b>. 
d338 3
d1392 1
a1392 1
Put the interfaces that you want dhcpd to *listen* on in /etc/dhcpd.interfaces.
d1948 8
a1955 1
<li>D. J. Bernstein's <a href="http://cr.yp.to/dnscache.html">DNSCache</a>. DNSCAche is also available in the ports tree at <i>/usr/ports/net/dnscache/</i>.</li>
d2218 1
a2218 1
<small>$OpenBSD: faq6.html,v 1.70 2000/05/15 21:29:18 ericj Exp $</small>
@


1.70
log
@fix ipf line; Reinhard J Sammer <reinhard@@sammer.net>
@
text
@d815 1
a815 1
<b>Computer Operating System: </b>OpenBSD v2.5 i386<br>
d830 1
a830 1
<b>External, Internet-routeable IP (provided by ISP, in this example, a cable modem prodiver)<br></b>
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.69 2000/05/15 01:27:42 ericj Exp $</small>
@


1.69
log
@link dns & bind book to books.html; from Horacio MG
@
text
@d635 1
a635 1
block in quick proto tcp on fxp0 from any to any flags FUP
d744 1
a744 1
IP Network Address Translation will work on machiens with only one NIC,
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.68 2000/05/13 21:46:44 ericj Exp $</small>
@


1.68
log
@DNSCache is also available in ports
@
text
@d1817 1
a1817 1
My OpenBSD machine is currently connected to the Internet via my ISP, so I can use the <a href="http://www.openbsd.org/man.cgi?query=nslookup&sektion=8&format=html">nslookup(8)</a> utility to execute the DNS query:
d1874 1
a1874 1
<li>Read the O'Reilly Associates book <i><a href="http://www.oreilly.com/catalog/dns3/">DNS and BIND</a> </i>.</li>
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.67 2000/05/13 06:27:04 ericj Exp $</small>
@


1.67
log
@ifaliases is still used
@
text
@d1938 1
a1938 1
<li>D. J. Bernstein's <a href="http://cr.yp.to/dnscache.html">DNSCache</a>.</li>
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.66 2000/05/12 19:39:56 ericj Exp $</small>
@


1.66
log
@signify when certain commands need to be run as root
@
text
@d336 1
a336 1
After 2.6 was released, the <i>/etc/ifaliases</i> file was depreciated. Starting in OpenBSD 2.7, aliases will be set in the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html"><i>/etc/hostname.*</i></a> file. To do the same setup as above, you would have an <i>/etc/hostname.dc0</i> file that is structured like this:
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.65 2000/05/12 19:12:57 ericj Exp $</small>
@


1.65
log
@Fix a few minor layouts, expand adding users faq to include user(8)
@
text
@d2138 1
a2138 1
$ <strong>ndc start</strong>
d2140 1
a2140 1
$ <strong>ndc restart</strong>
d2150 1
a2150 1
$ <strong>ndc stop</strong>
d2179 1
a2179 1
$ <strong>ndc restart</strong>
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.64 2000/05/12 17:15:26 chris Exp $</small>
@


1.64
log
@Clean up....
@
text
@d1937 1
a1937 1
<li>The BIND 8.x implementation in <i>/usr/ports/net/bind8</i>.(See <a href="../ports.html">ports</a></li>
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.63 2000/05/12 15:31:12 ericj Exp $</small>
@


1.63
log
@few more replacements
@
text
@d82 1
a82 1
card, which uses the device name ne*.
d95 4
a98 4
<li>ne2000 Network Cards - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ne&sektion=4&format=html">ne*</a> 
<li>3Com EtherLink III and Fast EtherLink III Ethernet - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ep&sektion=4&format=html">ep*</a>
<li>3Com EtherLink XL and Fast EtherLink XL Ethernet (3C9xx) - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=xl&sektion=4&format=html">xl*</a>
<li>Intel 82586 chip Ethernet device driver - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ie&sektion=4&format=html">ie*</a>
d106 3
a108 3
<li>DEC/Intel 21143 and clone 10/100 Ethernet driver - <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=dc&sektion=4&format=html">dc*</a>
<ul>Which Includes Cards Such As: <b>Note:</b> Some drivers which were in OpenBSD 2.6, such as mx* , ax* , al* and pn* have been replaced by this driver. Take note.
	<li>DEC/Intel 21143
d112 1
a112 1
	<li>ADMtek AL981 Comet and AN985 Centau
d115 5
d306 1
a306 1
OpenBSD has a simple mechanism for setting up ip aliases on an interface. To do this simply edit the file <i>/etc/ifaliases</i>. This file is read upon boot by the <i>/etc/rc</i> script, which is part of the <a href="faq10.html#10.3">rc startup hierarchy</a>. For the example, we assume that the user has an interface <b>pn0</b> and is on the network 192.168.0.0. Other important information:
d310 1
a310 1
<li>IP for pn0 is 192.168.0.2
d323 1
a323 1
A few notes about aliases, in OpenBSD you use the interface name only. There is no differences between the first alias and the second alias. Hence, like in some other os's you don't refer to them as pn0:0, pn0:1. Also, make sure that your netmask for the alias is <b>NOT</b> the same as for the actual ip of the interface. In this example <i>/etc/ifaliases</i>, we are adding 2 aliases to the device <b>pn0</b>. 
d328 2
a329 2
pn0	192.168.0.3	255.255.255.255
pn0	192.168.0.4	255.255.255.255
d336 1
a336 1
After 2.6 was released, the <i>/etc/ifaliases</i> file was depreciated. Starting in OpenBSD 2.7, aliases will be set in the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=hostname.if&sektion=5&format=html"><i>/etc/hostname.*</i></a> file. To do the same setup as above, you would have an <i>/etc/hostname.pn0</i> file that is structured like this:
d352 1
a352 1
# <b>ifconfig pn0 inet alias 192.168.0.3 netmask 255.255.255.255</b>
d361 1
a361 1
pn0: flags=8863&lt;UP,BROADCAST,NOTRAILERS,RUNNING,SIMPLEX,MULTICAST&gt;
d603 3
a605 1
IP Filter can also filter based on the protocol it is filtering, in fact, IP Filter can filter any protocol listed in <a href=file://localhost/etc/protocols>/etc/protocols</a>. For the sake of clarity, we will only concern ourselves with tcp, udp, and icmp.</p>
d616 1
a616 1
<b> Packet Filtering Voodoo</b>
d633 1
a633 1
Now the IP Filter voodoo begins in earnest. IP Filter's greatest strengths are it's ability to filter packets based on TCP flags and to maintain established connections and connection state. It is recommend that all users who wish to filter packets based on TCP flags understand what role each flag plays. For instance, if you wanted to deny all packets with the FIN, URG, and PSH flags set (like for instance an nmap OS fingerprinting attempt) you could use a rule like this:
d658 1
a658 1
This little change will dramatically increase the flexibility and security of our ruleset because it allows us to do some funky voodoo. For instance, in the above ruleset, we are allowing all tcp traffic into ports 80 &amp; 443. We can tighten this up even more. In order for a tcp connection to be established, we only need to allow the initial handshake to occur, once that occurs, we can block traffic to that port and allow our &quot;keep state&quot; rule to manage the connection. To allow the initial handshake to complete, we need only allow packets with the SIN and SIN/ACK flags set. By passing only packets with SIN and SIN/ACK set, we can prevent many forms of portscanning such as FIN scanning. The rules now look like this:
a730 27
<ul>
<li><a href="#nat1.0">6.3.1 Introduction</a>
	<ul>
	<li><a href="#nat1.1">6.3.1.1 Purpose</a>
	<li><a href="#nat1.2">6.3.1.2 Terminology</a>
	<li><a href="#nat1.3">6.3.1.3 Configuration</a>
	</ul>
<li><a href="#nat2.0">6.3.2 Network Address Translation</a>
	<ul>
	<li><a href="#nat2.1">6.3.2.1 Introduction to Network Address Translation</a>
	<li><a href="#nat2.2">6.3.2.2 Why to use Network Address Translation</a>
	<li><a href="#nat2.3">6.3.2.3 Setup</a>
	<li><a href="#nat2.4">6.3.2.4 Configuration</a>
	<li><a href="#nat2.5">6.3.2.5 Running</a>
	</ul>
<li><a href="#nat3.0">6.3.3 Network Address Translation Knowledge Base</a>
	<ul>
	<li><a href="#nat3.1">6.3.3.1 Checking NAT status</a>
	<li><a href="#nat3.2">6.3.3.2 Limitations of NAT (in FTP)</a>
	<li><a href="#nat3.3">6.3.3.3 Redirecting Traffic</a>
	<li><a href="#nat3.4">6.3.3.4 Network Address Translation versus Proxy</a>
	</ul>
<li><a href="#nat4.0">6.3.4 Links and X-References</a>
</ul>

<hr>

d732 1
a732 1
<h3><u>6.3.1 Introduction</u></h3>
d735 1
a735 1
<b>Purpose</b>
d737 5
a741 5
The purpose of this document is to explain and give and overview
of installing and configuring Network Address Translation ("NAT")
on an OpenBSD machine. This document is meant for users with a
beginning to intermediate level of knowledge in UNIX, TCP/IP, and
networking technologies. The user is assumed to have already set up
d744 3
d819 1
a819 1
	NetGear 10/100MB <b>pn0</b><br>
d824 1
a824 1
	NetGear 10/100MB <b>pn1</b><br>
d851 1
a851 1
| Hub |--------- pn1 |   NAT   | pn0 ----| Internet |
d860 2
a861 2
                              |  NIC pn0 - 24.5.0.5     |
                              |  NIC pn1 - 192.168.1.1  |
d916 1
a916 1
Client ----------------- pn1 [ NAT ] pn0 ---------- Internet Host
d1015 2
a1016 2
map pn0 192.168.1.0/24 -> 24.5.0.5/32 portmap tcp/udp 10000:60000
map pn0 192.168.1.0/24 -> 24.5.0.5/32
d1033 1
a1033 1
<strong>"pn0"</strong>
d1140 2
a1141 2
map pn0 192.168.1.0/24 -> 24.5.0.5/32 portmap tcp/udp 10000:60000
map pn0 192.168.1.0/24 -> 24.5.0.5/32
d1210 1
a1210 1
map pn0 192.168.1.0/24 -> 24.5.0.5/32 proxy port ftp ftp/tcp
d1244 1
a1244 1
rdr pn0 24.5.0.5/32 port 80 -> 192.168.1.80 port 80
d1261 1
a1261 1
<b>"pn0"</b>
d1270 1
a1270 1
This means an incoming connection to this IP address (only on pn0, as above)
d2201 1
a2201 1
<small>$OpenBSD: faq6.html,v 1.62 2000/05/12 15:29:41 ericj Exp $</small>
@


1.62
log
@Mention dc driver, and drivers it replaces.
@
text
@d107 1
a107 1
<ul>Which Includes Cards Such As: <b>Note:</b> Some drivers which were in OpenBSD 2.6, such as mx* and pn* have been replaced by this driver. Take note.
d2218 1
a2218 1
<small>$OpenBSD: faq6.html,v 1.61 2000/05/12 15:12:11 ericj Exp $</small>
@


1.61
log
@few nits
@
text
@d106 10
d2218 1
a2218 1
<small>$OpenBSD: faq6.html,v 1.60 2000/05/12 15:10:18 ericj Exp $</small>
@


1.60
log
@OpenBSD DNS overview. Written by Jack J. Woehr <jwoehr@@ibm.net>, additions and review by me
@
text
@d1838 1
a1838 1
<b>165.87.201.244</b> is the name server which answered, because it is the nameserver that my ISP told me to use with my account and whose number is entered in ><a href="http://www.openbsd.org/cgi-bin/man.cgi?query=resolv.conf&sektion=5&format=html">/etc/resolv.conf</a>. But the answer was not authoritative. For an authoritative answer, let's find which is the authoritative DNS server for the <i>openbsd.org</i> domain and ask it for the address of <i>www.openbsd.org</i>:
d2208 1
a2208 1
<small>$OpenBSD: faq6.html,v 1.59 2000/04/05 21:49:26 ericj Exp $</small>
@


1.59
log
@add some links and fix restore(8) usage
@
text
@d29 1
d1815 379
a2194 1
<P>
d2208 1
a2208 1
<small>$OpenBSD: faq6.html,v 1.58 2000/03/25 00:05:05 wvdputte Exp $</small>
@


1.58
log
@A lot of typo's and grammar errors, spotted by Horacio and me
@
text
@d108 1
a108 1
Again, you can check to see what interfaces have been identified by using the <strong>ifconfig(8)</strong>
d132 3
a134 1
As you can see here, <strong>ifconfig(8)</strong> gives us alot more information than we are needing at this
d1829 1
a1829 1
<small>$OpenBSD: faq6.html,v 1.57 2000/03/06 23:16:17 ericj Exp $</small>
@


1.57
log
@mention depreciation of /etc/ifaliases. suggested by fries@@
@
text
@d1024 1
a1024 1
Here is an explaination for the above lines.
d1528 1
a1528 1
extensive explaination.
d1649 1
a1649 1
This section will go thru the steps for a simple setup of NFS. This example
d1827 1
a1827 1
<small>$OpenBSD: faq6.html,v 1.56 2000/03/05 01:20:37 ericj Exp $</small>
@


1.56
log
@mention /etc/ifaliases and how to set them up
@
text
@a195 1
$ sudo sh /etc/netstart
d288 1
a288 1
OpenBSD has a simple mechanism for setting up ip aliases on an interface. To do this simply edit the file <i>/etc/ifaliases</i>. This file is read upon boot by the <i>/etc/netstart</i> script, which is part of the <a href="faq10.html#10.3">rc startup hierarchy</a>. For the example, we assume that the user has an interface <b>pn0</b> and is on the network 192.168.0.0. Other important information:
d314 15
d349 2
d1827 1
a1827 1
<small>$OpenBSD: faq6.html,v 1.55 2000/02/20 12:44:43 wvdputte Exp $</small>
@


1.55
log
@Fixed <ul><pre> tags (don't use <pre><ul>).
Mentioned by Rickie Kerndt <kerndtr@@purser.kerndt.com>
@
text
@d62 1
a62 1

d68 1
d284 52
d1811 1
a1811 1
<small>$OpenBSD: faq6.html,v 1.54 2000/02/12 21:35:42 aaron Exp $</small>
@


1.54
log
@permenant -> permanent
@
text
@d305 1
a305 1
<Pre><ul>
d316 1
a316 1
<pre><ul>
d321 1
a321 1
<pre><ul>
d351 1
a351 1
<pre><ul>
d358 1
a358 1
<pre><ul>
d367 1
a367 1
<pre><ul>
d380 1
a380 1
<pre><ul>
d394 1
a394 1
<pre><ul>
d413 1
a413 1
<pre><ul>
d430 1
a430 1
<pre><ul>
d434 1
a434 1
<pre><ul>
d438 1
a438 1
<pre><ul>
d446 1
a446 1
<pre><ul>
d457 1
a457 1
<pre><ul>
d462 1
a462 1
<pre><ul>
d508 1
a508 1
<pre><ul>
d519 1
a519 1
<pre><ul>
d523 1
a523 1
<pre><ul>
d530 1
a530 1
<pre><ul>
d534 1
a534 1
<pre><ul>
d538 1
a538 1
<pre><ul>
d545 1
a545 1
<pre><ul>
d554 1
a554 1
<pre><ul>
d570 1
a570 1
<pre><ul>
d586 1
a586 1
<pre><ul>
d800 1
a800 1
</ul></pre>
d861 1
a861 1
</ul></pre>
d937 1
a937 1
</ul></pre>
d952 1
a952 1
</ul></pre>
d1034 1
a1034 1
</ul></pre>
d1080 1
a1080 1
</ul></pre>
d1180 1
a1180 1
</ul></pre>
d1464 1
a1464 1
</ul></pre>
d1644 1
a1644 1
</ul></pre>
d1654 1
a1654 1
</ul></pre>
d1662 1
a1662 1
</ul></pre>
d1686 1
a1686 1
</ul></pre>
d1701 1
a1701 1
</ul></pre>
d1715 1
a1715 1
</ul></pre>
d1724 1
a1724 1
</UL></PRE>
d1735 1
a1735 1
</UL></pre>
d1758 1
a1758 1
<small>$OpenBSD: faq6.html,v 1.53 2000/02/09 22:11:37 ericj Exp $</small>
@


1.53
log
@8meg installs, Mention how to get Netscape, and a few more fixes.
@
text
@d255 1
a255 1
do this using the <strong>sysctl(8)</strong> utility. To change this permenantly you should edit the file 
d1758 1
a1758 1
<small>$OpenBSD: faq6.html,v 1.52 2000/01/20 23:08:34 ericj Exp $</small>
@


1.52
log
@link some other good ppp references
@
text
@d1420 4
d1758 1
a1758 1
<small>$OpenBSD: faq6.html,v 1.51 2000/01/11 21:12:06 ericj Exp $</small>
@


1.51
log
@fixups <jphillips@@alphalincoln.com>
@
text
@d1514 4
d1754 1
a1754 1
<small>$OpenBSD: faq6.html,v 1.50 2000/01/09 08:19:56 ericj Exp $</small>
@


1.50
log
@fixup formating and link online manpages
@
text
@d449 1
a449 1
block in quick on fxp0 from 172.168.0.0/12 to any
d453 1
a453 1
block out quick on fxp0 from any to 172.168.0.0/12
d475 1
a475 1
block in quick on fxp0 from 172.168.0.0/12 to any
d479 1
a479 1
block out quick on fxp0 from any to 172.168.0.0/12
d604 1
a604 1
block in quick on fxp0 from 172.168.0.0/12 to any
d608 1
a608 1
block out quick on fxp0 from any to 172.168.0.0/12
d1750 1
a1750 1
<small>$OpenBSD: faq6.html,v 1.49 2000/01/09 07:58:20 ericj Exp $</small>
@


1.49
log
@new ipf section thanks to James Phillips <jphillips@@alphalincoln.com>
@
text
@d286 1
d300 1
d304 2
a305 1
<Pre>
d308 2
a309 1
</pre>
d315 2
a316 1
<pre>
d318 1
a318 1
</pre>
d320 2
a321 1
<pre>
d323 3
a325 1
</pre>
d330 2
a331 1
HREF="http://www.obfuscation.org/ipf/">IP Filter HOWTO</a>. </p>
d336 1
d343 1
d347 1
d350 2
a351 1
<pre>
d354 2
a355 1
</pre>
d357 2
a358 1
<pre>
d362 2
a363 1
</pre>
d366 2
a367 1
<pre>
d371 2
a372 1
</pre>
d376 1
d379 2
a380 1
<pre>
d384 3
a386 1
</pre>
d389 1
d394 1
a394 1
<pre>
d406 3
a408 1
</pre>
d410 1
d412 2
a413 3
<p>
But what if you only wanted to allow internal hosts on your 1.1.1.0 address block to connect to ssh, but allow outside connections to http and https?
<pre>
d425 2
a426 1
</pre>
d429 2
a430 1
<pre>
d432 1
a432 1
</pre>
d434 1
a434 1
<pre>
d436 1
a436 1
</pre>
d438 1
a438 1
<pre>
d440 1
a440 1
</pre>
d446 1
a446 1
<pre>
d455 1
a455 1
</pre>
d457 1
a457 1
<pre>
d460 1
a460 1
</pre>
d462 1
a462 1
<pre>
d502 1
a502 1
</pre>
d504 1
d508 1
a508 1
<pre>
d511 1
a511 1
</pre>
d519 1
a519 1
<pre>
d521 1
a521 1
</pre>
d523 1
a523 1
<pre>
d525 1
a525 1
</pre>
d530 1
a530 1
<pre>
d532 1
a532 1
</pre>
d534 1
a534 1
<pre>
d536 3
a538 3
</pre>
This may however break some things such as <em>traceroute</em>. You can also specify which options not to allow. For instance a good rule is to block all packets with source routing options. This is accomplished with this rule:
<pre>
d541 1
a541 1
</pre>
d545 1
a545 1
<pre>
d547 1
a547 1
</pre>
d554 1
a554 1
<pre>
d566 1
a566 1
</pre>
d570 1
a570 1
<pre>
d582 1
a582 1
</pre>
d586 1
a586 1
<pre>
d627 1
a627 1
</pre>
d1750 1
a1750 1
<small>$OpenBSD: faq6.html,v 1.48 1999/12/21 18:21:16 ericj Exp $</small>
@


1.48
log
@oops. correction.
@
text
@a326 1

d328 4
a331 5
Modify rc.conf so it has IPFILTER=YES. The file /etc/ipf.rules has a
simple yet powerful syntax. Here we deal with the most common ways of usage,
for a more strict definition see <A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipf&apropos=0&sektion=5&format=html">ipf(5)</a>. Here is assumed xl0 as the
external interface to internet, on this one uses to have more rules than
internal interfaces.
a332 1

d334 23
a356 2
Configurations usually start letting everything come and go, and then
apply the necessary rules to block offending packets. So this is first:
a357 1

d359 1
d362 2
a363 1
pass in from any to any 
d365 20
a385 1

d387 28
a414 2
Now let's block any incoming connection to port 82 tcp (eg. there's an
internal network report agent using http running on several hosts):
d416 27
d444 34
d479 1
d481 2
a482 1
block in on xl0 proto tcp from any to any port = 82
d484 1
d486 3
a488 1

d490 8
a497 1
This rule means:
d499 16
a514 1

d516 5
a520 2
"Block all incoming packets on xl0 interface whose protocol is TCP no
matter destination/origin using port 82"
d523 16
a538 3
If you want to log all rejected packets add "log" after "block in", or
"log quick" if you don't want it to send a message to every console root is
logged in.
a539 1

d541 14
a554 1
Also, a typical rule is to block rpc portmap:
a555 1

d557 1
d559 40
a598 1
block in log on xl0 proto udp from any to any port = sunrpc
d601 3
d1722 1
a1722 1
<small>$OpenBSD: faq6.html,v 1.47 1999/12/20 21:43:42 ericj Exp $</small>
@


1.47
log
@correct ip's. <wayne@@detox.methadonia.net>
@
text
@d602 1
a602 1
192.168.1.40 --- 192.168.1.1 [ NAT ] 24.12.34.56 --- 123.45.67.89
d1500 1
a1500 1
<small>$OpenBSD: faq6.html,v 1.46 1999/12/11 15:51:28 ericj Exp $</small>
@


1.46
log
@remove tag on exports file as not to confuse anyone
@
text
@d605 1
a605 1
From: 192.168.1.40  >>=== NAT ===>>     From: 24.12.34.56
d609 2
a610 2
From: 123.45.67.89  <<=== NAT ===<<     From: 123.45.67.89
To:   192.168.1.40                      To: 24.12.34.56
d1500 1
a1500 1
<small>$OpenBSD: faq6.html,v 1.45 1999/12/11 08:50:54 chris Exp $</small>
@


1.45
log
@fix my jumble
@
text
@a1352 1
#	$OpenBSD: faq6.html,v 1.44 1999/12/11 05:45:56 ericj Exp $
d1500 1
a1500 1
<small>$OpenBSD: faq6.html,v 1.44 1999/12/11 05:45:56 ericj Exp $</small>
@


1.44
log
@nfs section
@
text
@d1353 1
a1353 1
#	$OpenBSD: exports,v 1.1 1996/09/06 11:57:20 deraadt Exp $
d1379 3
a1381 2
nfsd(8) which serves on both TCP and UDP using 4 daemons.  You should have
at least one NFS server daemon per client. 
d1501 1
a1501 1
<small>$OpenBSD: faq6.html,v 1.43 1999/12/06 01:27:18 ericj Exp $</small>
@


1.43
log
@few corrections. brad@@
@
text
@d28 1
d1306 180
d1500 1
a1500 1
<small>$OpenBSD: faq6.html,v 1.42 1999/11/11 07:23:16 ericj Exp $</small>
d1504 1
@


1.42
log
@link some more man pages
@
text
@d54 1
a54 2
Of course, you can't all of them.  That's not easy to do (although
the IETF did it to evaluate the RFCs for year 2000 issues!)
d56 2
a57 1
your work.  Look them up, find out how they are intended to work.
d1319 1
a1319 1
<small>$OpenBSD: faq6.html,v 1.41 1999/11/11 00:29:40 ericj Exp $</small>
@


1.41
log
@much more readable networking faq. IPF still needs work.
@
text
@d139 2
a140 2
<li>lo* - Loopback Interface
<li>sl* - Slip Network Interface
d142 3
a144 3
<li>tun* - Tunnel Network Interface
<li>enc* - Encapsulating Interface
<li>bridge* - Ethernet bridge interface
d151 3
d189 1
a189 1
typing (as root):
d1319 1
a1319 1
<small>$OpenBSD: faq6.html,v 1.40 1999/11/01 06:15:36 ericj Exp $</small>
@


1.40
log
@link ipnat(5) page as well as ipnat(8) man page
@
text
@d62 7
d70 2
a71 2
<a name= "6.1"></a>
<h2>6.1 - Initial Network Setup</h2>
d75 5
a79 1
<h3>Interfaces</h3>
d82 4
a85 3
<p>
Here we assume you have all your network interfaces working, and a basic
TCP/IP knowledge. 
d88 2
a89 1
All your interfaces should be listed with:
d92 17
a108 2
<pre>
# <strong>ifconfig -a</strong>
d110 2
d115 3
a117 5
xl0: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt;
        media: Ethernet 100baseTX half-duplex
        inet 10.1.1.1 netmask 0xffffff00 broadcast 10.1.1.255
sl0: flags=c010&lt;POINTOPOINT,LINK2,MULTICAST&gt;
        inet 10.1.1.1 netmask 0xffffff00 broadcast 10.1.1.255
d124 4
a127 19
enc0: flags=8&lt;LOOPBACK&gt;
</pre>
</ul>

<p>
First there is lo0 the loopback interface. It normally should be assigned address
of 127.0.0.1 no matter what the rest of your network looks like. The next important one is
xl0 in this example (could be ne<i>X</i>, ep<i>X</i>, or one of many other names,
depending on the chipset that your network card uses), which is
a board itself.
<P>In this example, xl0 it has UP and RUNNING flags on, along with le0.
That means that they are working (for the most part, anyways.) Your interface
could be down if you never configured it, and then it would look like the other interfaces.
Or, your interface could be up but incorrectly configured (wrong IP address
or wrong netmask) and thus won't work properly.
The other interfaces in this example are not part of this section, as sl and ppp are for serial line
comunication, tun is a pseudo-device for tunneling and enc a pseudo-device for
encryption.  They are covered later in this document.
</p>
d130 6
a135 2
If xl0 was uninitialized, you can assign it an address by creating an ascii
file, /etc/hostname.xl0, containing a string like this:
d139 6
a144 3
<pre>
inet 10.1.1.1 255.255.255.0 NONE
</pre>
d148 3
a150 3
In the above example we show <i>inet 10.1.1.1</i>, where the second
argument is our IP address. <i>255.255.255.0</i> is our netmask and
<i>NONE</i> shows no media tags. (full-duplex, etc).
a152 3
<P>
In /etc/hosts we then put a hostname for ip address <i>10.1.1.1</i>:

d154 2
a155 2
10.1.1.1        mona    mona.openbsd.org.ar
</pre></ul>
d158 1
a158 3
Now check that you have a file /etc/myname and a file /etc/mygate. If you
don't have them, you need to create them. If your gateway is a machine
named "wintermute" which is also in the /etc/hosts, use these commands:
d161 4
a164 6
<ul>
<pre>
# echo "mona" > /etc/myname
# echo "wintermute" > /etc/mygate
</pre>
</ul>
d167 7
a173 2
Ok, you are done for a standalone system, but to activate your
configuration now (without rebooting) do:
d176 7
a182 5
<ul>
<pre>
# sh /etc/netstart
</pre>
</ul>
d185 2
a186 2
This will give you a few errors, but don't worry as all them are
concerning 127.0.0.x (loopback)
d189 8
a196 4
<p>
Note: if you want to use the system as a gateway, later there's a
"Firewall Setup" section, but you need to read all this first.
</p>
d199 5
a203 2
Now check your routes are ok (here we use -n to make it simpler to
look at):
d206 2
a207 3
<ul>
<pre>
# <strong>netstat -rn</strong>
d211 2
a212 6
Destination        Gateway            Flags     Refs     Use    Mtu
Interface
default            10.1.1.254         UGS         0        0      -  xl0
10.1.1/24          link#1             UC          0        0      -  xl0
10.1.1.1           127.0.0.1          UGHS        0        0      -  lo0
10.1.1.254         link#1             UHL         1        0      -  xl0
d214 5
a218 2
127.0.0.1          127.0.0.1          UH          3       24      -  lo0
224/8              link#1             UCS         0        0      -  xl0
d221 3
a223 3
Source address/netmask          Port  Destination address/netmask     Port Proto SA(Address/SPI/Proto)
</pre>
</ul>
d225 10
a234 3
<p>
(The <tt>default</tt> gateway here is 10.1.1.254)
</p>
d237 2
a238 1
<h3>IP Aliasing</h3>
d242 5
a246 4
If you want to map more than one IP address on a single network interface,
you need to assign an "alias" to it. The way to do it on OpenBSD is
simply assigning the interface another IP with the "alias" option like
this:
d250 4
a253 3
<pre>
# ifconfig xl0 alias 10.1.1.2 netmask 255.255.255.255
</pre>
d256 1
a256 68
<p>
Here xl0 is assigned another IP number (remember it already has 10.1.1.1).
Note the netmask used! Don't use 255.255.255.0 in this kind of case (both
numbers are on the same subnet), only ONE address should handle the subnet.
If you do such kind of misconfiguration, the following error appears:
</p>

<p>
<pre>
ifconfig:SIOCAIFADDR: File exists
</pre>
</p>

<p>
Now let's change the configuration file for this, /etc/ifaliases. Add to
it this line:
</p>

<p>
<pre>
xl0   10.1.1.2 255.255.255.255
</pre>
This means, simply, interface <tt>xl0</tt> should have an alias <tt>10.1.1.2</tt> with the netmask <tt>255.255.255.255</tt>.
</p>


<p>
<h3>DNS Client Setup</h3>
</p>

<p>
Let's assume your DNS servers are 125.2.3.4 and 125.2.3.5, and your
machine name belongs to the domain yourdomain.com.  You should have the following
lines to your /etc/resolv.conf file:
</p>

<ul>
<pre>
domain yourdomain.com
nameserver 125.2.3.4
nameserver 125.2.3.5
lookup file bind
</pre>
</ul>

<p>
<h3>Gateway Setup</h3>
</p>

<p>
This is the basic information you need to set up your OpenBSD box as a gateway (also called a router.)  If you are using OpenBSD as a router on the Internet, we suggest that you also read the IP Filter setup instructions below
to block potentially malicious traffic.  Also, due to the low availability of IPv4 addresses from network service providers
and regional registries, you may want to look at Network Address Translation (next section of this document)
for information on conserving your IP address space.
</p>

<p>
If you want your OpenBSD machine to act as a dedicated router, and you
are building a custom kernel configuration for it, you can either compile
your kernel with options IPFORWARDING or GATEWAY.  (See <A HREF="faq11.html">section 11</a>
for further information on tuning NMBCLUSTERS if you are doing this.)  For the rest of us,
OpenBSD now has a sysctl mechanism to turn on and off IP Forwarding at boot.
If you want it to "forward" any packets between your interfaces, modify the /etc/sysctl.conf line that toggles
the forwarding variable on bootup:
</p>

<ul>
<pre>
d258 1
a258 2
</pre>
</ul>
d261 2
a262 1
To make the changes without booting:
d265 1
a265 2
<ul>
<pre>
d268 1
a268 2
</pre>
</ul>
d1316 1
a1316 1
<small>$OpenBSD: faq6.html,v 1.39 1999/10/15 16:04:22 ericj Exp $</small>
d1320 1
@


1.39
log
@ ne2 -> xl0 <rahm@@umich.edu>
@
text
@d1053 1
d1350 1
a1350 1
<small>$OpenBSD: faq6.html,v 1.38 1999/10/11 22:46:04 ericj Exp $</small>
@


1.38
log
@fix ipfilter link
@
text
@d222 1
a222 1
Here ne2 is assigned another IP number (remember it already has 10.1.1.1).
d1349 1
a1349 1
<small>$OpenBSD: faq6.html,v 1.37 1999/10/07 19:14:08 chris Exp $</small>
@


1.37
log
@Documentation can ALWAYS be made better........
@
text
@d351 2
a352 2
at the IP Filter <A HREF="http://false.net/ipfilter/">mailing list archive</a>, the <A HREF="http://cheops.anu.edu.au/~avalon/ip-filter.html">IP Filter web site</a>, and finally the <A HREF="http://www.obfuscation.org/ipf/">IP Filter HOWTO</a>.
</p>
d1053 1
a1053 1
<li><a href="http://coombs.anu.edu.au/ipfilter/">http://coombs.anu.edu.au/ipfilter/</a>
d1349 1
a1349 1
<small>$OpenBSD: faq6.html,v 1.36 1999/10/07 19:05:49 chris Exp $</small>
@


1.36
log
@fix up dhcp more
@
text
@d1063 1
a1063 1
<h3>DHCP Client</h3>
d1069 1
a1069 1
# echo dhcp >/etc/hostname.xl0
d1077 1
a1077 1
# dhclient fxp0
d1079 1
a1079 1
Where fxp0 is an interface that you want to receive dhcp on.
d1081 4
a1084 2
the /etc/dhclient.conf file to not update your DNS according to the dhcp
server's idea of DNS by uncommenting the 'requre' lines in it
d1089 1
a1089 1
and then remove domain-name-servers.  Of course, you may want to remove
d1092 1
a1092 1
<h3>DHCP Server</h3>
d1121 1
a1121 1
# dhcpd -q fxp0
d1128 1
a1128 1
To make this happen, just add to /etc/dhcpd.conf:
d1130 1
a1130 1
option	netbios-name-servers	192.168.92.55
d1349 1
a1349 1
<small>$OpenBSD: faq6.html,v 1.35 1999/10/07 16:39:41 chris Exp $</small>
@


1.35
log
@clean up a few things, reorganize 6.0.1,
fix up NAT section for accuracy and numbering,
fix up a few other things
@
text
@d1063 1
a1063 1

d1074 18
d1122 1
a1122 1
The -q flag makes dhcp quiet, otherwise it is very noisy.
d1124 3
a1126 18
If you want to start a dhcp client from the command line, make sure
/etc/dhclient.conf exists, then try:
<PRE>
# dhclient fxp0
</pre>
Where fxp0 is an interface that you want to receive dhcp on.  You can edit
the /etc/dhclient.conf file to not update your DNS according to the dhcp
server's idea of DNS by uncommenting the 'requre' lines in it
<pre>
request subnet-mask, broadcast-address, time-offset, routers,
      domain-name, domain-name-servers, host-name, lpr-servers, ntp-servers;
</pre>
and then remove domain-name-servers.  Of course, you may want to remove
hostname, or other settings too.
<P>
The DHCP client can be turned on at boot time by editing /etc/hostname.fxp0
(again, where fxp0 is the interface you want dhcp to listen on) and make
it say 'dhcp' (with nothing else!!)
d1128 1
a1128 1
# echo dhcp >/etc/hostname.fxp0
d1130 3
a1132 2
<br>

d1347 1
a1347 1
<small>$OpenBSD: faq6.html,v 1.34 1999/10/07 05:56:04 chris Exp $</small>
@


1.34
log
@Fix it up in some places, and
Add section for basic knowledge one should
have when entering the realm of IP networking
@
text
@a36 7
If you are a network administrator, and you are setting up routing
protocols, if you are using your OpenBSD box as a router, if you need to
go in depth into IP networking, you really need to read
<A HREF="http://www.3com.com/nsc/501302s.html">Understanding IP addressing</a>.
This is an excellent document.  Understanding IP addressing contains
fundamental knowledge to build upon when working with IP networks!
<P>
d45 7
d423 1
a423 1
<li><a href="#nat1.0">1.0 Introduction</a>
d425 3
a427 3
	<li><a href="#nat1.1">1.1 Purpose</a>
	<li><a href="#nat1.2">1.2 Terminology</a>
	<li><a href="#nat1.3">1.3 Configuration</a>
d429 1
a429 1
<li><a href="#nat2.0">2.0 Network Address Translation</a>
d431 5
a435 5
	<li><a href="#nat2.1">2.1 Introduction to Network Address Translation</a>
	<li><a href="#nat2.2">2.2 Why to use Network Address Translation</a>
	<li><a href="#nat2.3">2.3 Setup</a>
	<li><a href="#nat2.4">2.4 Configuration</a>
	<li><a href="#nat2.5">2.5 Running</a>
d437 1
a437 1
<li><a href="#nat3.0">3.0 Network Address Translation Knowledge Base</a>
d439 4
a442 4
	<li><a href="#nat3.1">3.1 Checking NAT status</a>
	<li><a href="#nat3.2">3.2 Limitations of NAT (in FTP)</a>
	<li><a href="#nat3.3">3.3 Redirecting Traffic</a>
	<li><a href="#nat3.4">3.4 Network Address Translation versus Proxy</a>
d444 1
a444 1
<li><a href="#nat4.0">4.0 Links and X-References</a>
d450 1
a450 1
<h3><u>1.0 Introduction</u></h3>
d511 6
a516 5
This is short for "IP Filter." IP Filter is the daemon which
ipnat piggy-backs on. You can set up IP Filtering on your
machine to also act as a network firewall, however that is
beyond the scope of this document. However, you can see more information on IPF
at <a href="#6.2">FAQ 6.2</a>.
d534 1
a534 1
	NetGear 10/100MB ("/dev/pn0")<br>
d539 1
a539 1
	NetGear 10/100MB ("/dev/pn1")<br>
d545 1
a545 1
<b>Cable Modem IP (provided by ISP)<br></b>
d554 7
a560 6
                Machines on the LAN use the IP addressing scheme 192.168.1.xxx
                (where xxx is a unique number). There are a variety of different
                operating systems on the internal LAN including Windows 98,
                Windows NT, OpenBSD and Linux. Each machine is connected to a hub
                that is designated for internal use. For this document and its
                examples the client on the LAN will assume IP address 192.168.1.40
d585 1
a585 1
<h3><u>2.0 Network Address Translation</u></h3>
d653 2
d659 1
a659 2
reason is for saving money. My ISP charges (at the date above) $7 per
month more per IP address you want bound to your cable modem. There
d730 1
a730 1
map pn0 192.168.1.0/24 -> 24.5.0.5/32 portmap tcp/udp 10000:20000
d769 6
a774 1
that the LAN IP addresses will be mapped to.
d779 1
a779 1
<b>"portmap tcp/udp 10000:20000"</b>
d782 1
a782 1
to ports in the range of 10000 to 20000.
d788 3
a790 2
This tells ipnat to map anything else (not tcp/udp) to whatever port
it requests (used for unknown protocols and bypassing ipnat). Once this
d841 1
a841 1
<h3><u>Nat Knowledge Base</u></h3>
d855 1
a855 1
map pn0 192.168.1.0/24 -> 24.5.0.5/32 portmap tcp/udp 10000:20000
a913 1
</p>
a919 1
</p>
d955 1
a955 1
        Add the following line to the file:
d959 1
a959 1
rdr pn0 0.0.0.0/0 port 80 -> 192.168.1.80 port 80
d983 1
a983 1
<b>"0.0.0.0/0"</b>
d985 1
a985 2
This IP address and netmask state 'any packet crossing
the device pn0'
d1020 2
a1021 2
The difference between NAT and proxy is that proxy acts and declares
itself as a "middle-man" between the Internet and the machines connected
d1025 9
a1033 4
able to do this (especially games). NAT does the middle-man tasks
transparently to the end-user and the user's applications. In most
cases this is preferred, but in some cases this can be a problem. The
main problem is within FTP (see <A HREF="#3.2">"NAT Limitations"</a> in the Knowledge Base).
d1037 1
a1037 1
<b>Links and X-References</b>
d1097 30
a1126 2
</p>

d1343 1
a1343 1
<small>$OpenBSD: faq6.html,v 1.33 1999/10/07 04:57:24 chris Exp $</small>
@


1.33
log
@Add tuning networking parameters section 6.6
@
text
@d21 1
d33 28
d63 1
a63 1
<a name= "6.1"</a>
d73 1
a73 8
TCP/IP knowledge. If not, go to the <a href= "./faq5.html">Kernel Configuration
and Setup</a> section, and/or read a good introduction to TCP/IP. Other recommended
reading is the 
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&apropos=0&sektion=8&format=html">
ifconfig(8)</a> and 
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&apropos=0&sektion=1&format=html">
netstat(1)</a> man pages.
</p>
a76 1
</p>
d101 11
a111 7
First there is lo0 the loopback interface. It MUST have the assigned address
of 127.0.0.1 no matter what network setup you use. The next important one is
xl0 in this example (could be neX or epX depending on the brand), which is
a board itself. Look it has UP and RUNNING flags on, as lo0 but no other
interface has them. That means obviously they are working. Your interface
could be down if you never configured it, and look like the other interfaces.
The others are not part of this section, as sl and ppp are for serial line
d113 1
a113 1
encryption. 
d583 1
a583 1
<h3><u>2.0 NETWORK ADDRESS TRANSLATION</u></h3>
d832 1
a832 1
<h3><u>NAT KNOWLEDGE BASE</u></h3>
d913 16
d1022 1
a1022 1
main problem is within FTP (see "NAT Limitations" in the Knowledge Base).
d1304 1
a1304 1
<small>$OpenBSD: faq6.html,v 1.32 1999/10/06 07:02:01 beck Exp $</small>
@


1.32
log
@remnants of old hostname in /etc/hostname.XXX stuff made this nonsensical.
this fixes.
@
text
@d21 2
a22 2
<li><a href= "#6.1">6.1 - Initial network setup</a></li>
<li><a href= "#6.2">6.2 - IP Filter</a></li>
d24 3
a26 2
<li><a href= "#6.4">6.4 - Dynamic Host Configuration Protocol</a></li>
<li><a href= "#6.5">6.5 - Point to Point Protocol</a></li>
d1207 44
d1263 1
a1263 1
<small>$OpenBSD: faq6.html,v 1.31 1999/10/04 15:08:13 chris Exp $</small>
@


1.31
log
@change ipf howto url
@
text
@d104 1
a104 2
<i>NONE</i> shows no media tags. (full-duplex, etc). This hostname 'mona'
needs to have record in /etc/hosts: 
d107 3
a114 8
What actually happens when you boot is that it looks up 'mona' in /etc/hosts, and then configures the interface to 10.1.1.1.
If you have multiple ethernet interfaces, this is probably a painful way to do things, and so you can also put the
number right in /etc/hostname.xl0:
<pre>
inet 10.1.1.1 255.255.255.0 NONE
</pre>

<p>
d1218 1
a1218 1
<small>$OpenBSD: faq6.html,v 1.30 1999/09/28 20:01:59 ericj Exp $</small>
@


1.30
log
@get rid of /32 on rdr lines <kamee@@detox.methadonia.net>
@
text
@d331 1
a331 1
at the IP Filter <A HREF="http://false.net/ipfilter/">mailing list archive</a>, the <A HREF="http://cheops.anu.edu.au/~avalon/ip-filter.html">IP Filter web site</a>, and finally the <A HREF="http://www.swcp.com/~synk/ipf-howto.txt">IP Filter HOWTO</a>.
d1224 1
a1224 1
<small>$OpenBSD: faq6.html,v 1.29 1999/09/24 20:03:44 ericj Exp $</small>
@


1.29
log
@New Improved NAT Section. Thanks to Wayne Fergerstrom <wayne@@methadonia.net>
@
text
@d916 1
a916 1
rdr pn0 0.0.0.0/0 port 80 -> 192.168.1.80/32 port 80
d959 1
a959 1
<b>"192.168.1.80/32"</b>
d962 2
a963 1
which the packets are redirected to. The netmask is always "/32" so
d1224 1
a1224 1
<small>$OpenBSD: faq6.html,v 1.28 1999/09/24 17:59:35 ericj Exp $</small>
@


1.28
log
@NAT gets its own section.
@
text
@d399 46
d458 312
d771 61
a831 7
To use ipnat, ipf must be activated.
As outlined above, for changes to stay effective
through reboots, you should make changes to /etc/rc.conf (where it has IPNAT and IPFILTER.)
You can manually activate ipf with the command below.
<pre>
# ipf -E
</pre>
d834 3
a836 2
Example: You have an internal network using 192.168.5.0, with a netmask of 255.255.255 0, and you want to give
it access to internet using OpenBSD (of course!), and a ppp connection using address 200.1.2.3, use this rule:
d839 2
d842 3
a844 3
<pre>
map tun0 192.168.5.0/24 -> 200.1.2.3/32
</pre>
d846 1
d848 2
d851 2
a852 1
This rule means:
d854 1
d856 2
d859 2
a860 3
"Any IP connections going out tun0 from an address matching the first
24 bits of 192.168.5.0 should be mapped to the address 200.1.2.3 (only one
address since /32 means every bit)"
d862 1
a862 7
<P>
If you don't like using CIDR notation, IP Filter also allows you to use netmasks.  A functional 
equivalent to the example above, using netmasks looks like this:
<P>
<PRE>
map tun0 192.168.5.0/255.255.255.0 -> 200.1.2.3/255.255.255.255
</pre>
d864 2
d867 2
a868 8
But here arises a problem. You are assigning a lot of addresses to only
one address. But the port numbers aren't changing, and it is very likely that
your workstations on 192.168.5.0/24 will use the same port numbers to initiate connections
from.  (If this doesn't make sense, don't worry, but keep reading.)  The way to go around it is to map TCP and UDP ports to
a certain range with the option "portmap". Since ICMP doesn't even use ports, it is not covered by the
"portmap" rule.  (ICMP uses an ID field
usually based on a process number)
In our example, there are now two map rules to cover all of these protocols.  The end result looks like this:
d870 4
d876 9
a884 4
<pre>
map tun0 192.168.5.0/24 -> 200.1.2.3/32 portmap tcp/udp 10000:65000
map tun0 192.168.5.0/24 -> 200.1.2.3/32
</pre>
d888 4
a891 3
If you have a dynamic address assignment (as in, you do not know what address they will give you when you connect), you can put
the interface name in place of the IP address.  Note that if you do this, you will have to run <tt>ipnat -CF -f /etc/ipnat.rules</tt> every time
your IP address changes (or, every time you dial up.)
d894 4
d899 8
a906 4
<pre>
map tun0 192.168.5.0/24 -> tun0/32 portmap tcp/udp 10000:65000
map tun0 192.168.5.0/24 -> tun0/32<br>
</pre>
d909 10
a918 11
NAT is also able to help you in renumbering.  Say you were assigned a net block 35.8.9.0/22, and your internet provider can no longer
route these addresses to you, or say you are switching providers.  Your new address block is 192.9.4.0/22, but to switch all 500 devices
you have on this block would be very time consuming! ipnat provides a feature called bimap:
<P>
<PRE>
bimap xl0 35.8.9.0/22 -> 192.9.4.0/22
</pre>
<P>
This will literally map every computer in 35.8.9.0 to a new address in 192.9.4.0.  The drawback of this feature is that the translation is not
consistent.  A computer that initiates a connection from 35.8.9.0 will get a random IP address from 192.9.4.0.  A future version of IP Filter
will allow for one-to-one translation (where 35.8.9.99 will always get mapped to 192.9.4.99).
d920 2
a921 1
And of course, there are other potential uses of NAT that are probably beyond the scope of this document.  
d923 2
d926 2
a927 1
<h3>Redirecting ports</h3>
d929 2
d932 2
d935 1
a935 6
This is another very handy feature of IPNAT. If you have a host on the
internal network (using private addresses), and you want to let incoming
connections to it, you just need a simple redirect rule. For example, if you
have a web server on internal network at 10.2.2.7 listening on port 80, and 
want it to be accessible from the outside simply redirecting external IP 
120.2.3.4 on xl0, just add this rule to <kbd>/etc/ipnat.rules:</kbd>
d937 1
d939 2
d942 2
a943 3
<pre>
rdr xl0 120.2.3.4 port 80 -> 10.2.2.7 port 80
</pre>
d945 1
d947 2
d950 5
a954 1
When you write rules, it may help to visualize the packet flow.
d956 1
d958 2
d961 3
a963 3
<pre>
Internet <--> (xl0 120.2.3.4) OpenBSD (xl1 10.2.2.1) <--> LAN <--> (10.2.2.7 XYZ Web server)
</pre>
d965 1
d968 2
a969 4
One last reminder that you must have net.inet.ip.forwarding=1 or option IPFORWARDING to use
IP Filter (ipf, ipnat). Also, redirect only
works for packets that are being routed through the OpenBSD box.  If a web browser from inside the NAT
(say, from 10.2.2.5 from the example above) tries to connect to port 80 on 120.2.3.4, nothing will happen.
d973 2
d977 9
a985 2
<a name= "6.4"></a>
<h2>6.4 - DHCP</h2>
d988 28
d1223 1
a1223 1
<small>$OpenBSD: faq6.html,v 1.27 1999/09/24 01:46:14 ericj Exp $</small>
@


1.27
log
@re-organization of the faq, based greatly on the recent changes to the main web page. This way will hopefully allow for greater expansion and readability. Some of the numbers have changed. sorry.
@
text
@d21 5
a25 4
<li><a href= "faq6.html#6.1">6.1 - Initial network setup</a></li>
<li><a href= "faq6.html#6.2">6.2 - IP Filter and Network Address Translation</a></li>
<li><a href= "faq6.html#6.3">6.3 - Dynamic Host Configuration Protocol</a></li>
<li><a href= "faq6.html#6.4">6.4 - Point to Point Protocol</a></li>
d294 1
a294 1
<h2>6.2 - IP Filter - ipf and ipnat setup</h2>
d394 2
a395 1
<h3>IPNAT</h3>
d533 2
a534 2
<a name= "6.3"></a>
<h2>6.3 - DHCP</h2>
d575 2
a576 2
<a name= "6.4"></a>
<h2>6.4 - PPP </h2>
d744 1
a744 1
<small>$OpenBSD: faq6.html,v 1.26 1999/09/15 13:44:59 ericj Exp $</small>
@


1.26
log
@move existing ipsec info to faq14.html
@
text
@d14 1
d16 1
a16 5
<font color= "#0000e0">
<a href= "index.html">[Back to Main Index]</a>
<a href= "faq5.html">[To Section 5.0 - Kernel configuration and Disk Setup]</a>
<a href= "faq7.html">[To Section 7.0 - Keyboard controls]</a>
</font>
d20 7
a26 1
<h1>6.0 - Networking</h1>
a27 1
</p>
d259 2
a260 2
your kernel with options IPFORWARDING or GATEWAY.  (See <A HREF="faq12.html">section 12</a> for
further information on tuning NMBCLUSTERS if you are doing this.)  For the rest of us,
d742 1
a742 1
<small>$OpenBSD: faq6.html,v 1.25 1999/09/15 02:39:47 ericj Exp $</small>
@


1.25
log
@mention ppp.linkup, ppp.linkdown
@
text
@d530 1
a530 26
<h2>6.3 - IPSec</h2>
</p>

<p>
IPSec is partially documented in the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vpn&apropos=0&sektion=0&format=html">vpn(8)</a>
man page.  There are various files in <A HREF="http://www.openbsd.org/cgi-bin/cvsweb/src/share/ipsec/">/usr/share/ipsec/</a>
directory which can also assist you.  The manual pages for
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipsec&apropos=0&sektion=4&format=html">ipsec(4)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=ipsecadm&apropos=0&sektion=8&format=html">ipsecadm(8)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=photurisd&apropos=0&sektion=8&format=html">photurisd(8)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=startkey&apropos=0&sektion=1&format=html">startkey(1)</a>,
<A HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=isakmpd&apropos=0&sektion=8&format=html">isakmpd(8)</a> and
<a HREF="http://www.openbsd.org/cgi-bin/man.cgi?query=isakmpd.conf&apropos=0&sektion=5&format=html">isakmpd.conf(5)</a>
are also available!
</p>
<p> 
You should also check <a href="http://www.codetalker.com/greenbox/docs/vpn-24-minifaq.html">Codetalker</a> which has an FAQ
for setting up an IPSec VPN with OpenBSD.  It explains some basic IPSec concepts and how to apply them to a VPN setup.
</p>

<br>

<p>
<a name= "6.4"></a>
<h2>6.4 - DHCP</h2>
d571 2
a572 2
<a name= "6.5"></a>
<h2>6.5 - PPP </h2>
d740 1
a740 1
<small>$OpenBSD: faq6.html,v 1.24 1999/09/07 18:30:16 ericj Exp $</small>
@


1.24
log
@cleanup & repair
@
text
@d738 14
d765 1
a765 1
<small>$OpenBSD: faq6.html,v 1.23 1999/09/07 18:05:24 ericj Exp $</small>
@


1.23
log
@new ppp section. actually readable and helpful
@
text
@d576 1
a576 1
<pre><strong>
d585 1
a585 1
</pre></strong>
d649 1
a649 1
<pre><strong>
d655 1
a655 1
</strong></pre>
d676 1
a676 1
<pre><strong>
d684 1
a684 1
</strong></pre>
d697 1
a697 1
<ul><strong><pre>
d699 1
a699 1
</ul></strong></pre>
d751 1
a751 1
<small>$OpenBSD: faq6.html,v 1.22 1999/07/26 17:38:46 ericj Exp $</small>
@


1.22
log
@more minor fix's
@
text
@d572 1
a572 1
# echo xl1 xl2 xl3 >/etc/dhcpd.interfaces
d576 1
a576 1
<pre>
d585 1
a585 1
</pre>
d600 8
a607 9
<p>
PPP is generally an easy thing to set up.  What follows is a basic introduction based
on the information provided in <kbd>/etc/ppp</kbd> and the
<a href= "http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&apropos=0&sektion=8&format=html">
ppp(8)</a> manual pages. These are highly suggested reading before attempting
to setup PPP or even reading this FAQ entry.  If you have read these the 
following should look familiar because it is that information with a little bit of
elaboration.
</p>
d610 2
a611 4
First you will need to find out a little bit about how your ISP sets up its
PPP connections. Does it use scripted login, PAP, CHAP, do you have a dynamic
or static IP etc. This along with some basic info about your modem will allow
us to easily create a PPP dial in script for your ISP.
d614 6
a619 9
<p>
First we will create a PPP conf using what is already in 
<kbd>/etc/ppp/ppp.conf.sample</kbd> as a guide. The first section we come
to is the section labeled default. This is the best place to specify logging
options, your modem device and dial options. It will always be executed when
ppp is run. The following is the default section that comes standard with
<kbd>/etc/ppp/ppp.conf.sample</kbd> and an explanation of what each
parameter does:
</p>
d622 4
a625 4
<strong>
&lt;Default Section&gt; <br>
default:
</strong>
d629 1
a629 1
This parameter tells PPP to log output which pertains to the arguments you give the parameter.
d632 3
a634 5
<ul>
<pre><strong>
set log Phase Chat LCP IPCP CCP tun command     
</pre></strong>
</ul>						
a635 1
This will set the default modem device on the system which here is com 2
d637 1
a637 5
<ul>
<pre><strong>
set device /dev/cua01				
</pre></strong>
</ul>
d639 8
a646 11
This parameter sets the speed of the serial device.
					
<ul>
<pre><strong>
set speed 115200				
</pre></strong>
</ul>

This will set the commands to follow when certain actions take place while dialing.  Abort the call if the number is busy, abort the
call if there is no carrier.  Wait 5 seconds for carrier. Issue AT and wait for response. If AT is ok then dial the number and
timeout if not connected in 40 seconds. Once dialed in wait for the CONNECT message to tell us we are connected.
d650 4
d656 1
a656 1
</ul>						 
d659 7
a665 3
Now that the default modem options are set we will need to create a section
in the ppp.conf for our ISP.  Below are a few examples of what could be in
there and what type of isp they are tailored for.
d669 5
a673 16
<strong>
&lt;MyISP Section&gt;  <br>
myisp:
</strong>
</p>

This of course sets the number to dial for your isp.

<ul>
<pre><strong>
set phone 1234567			 
</strong></pre>
</ul>

This sets the login options.  It will abort login if there is no carrier with a timeout of 5 seconds.  It will then wait for the
login: prompt and send your login name, and then it will wait for the password prompt and send your password.
d677 2
d680 4
d687 9
a695 1
This sets the timeout for the entire login process.
d697 1
a697 11
<ul>
<pre><strong>
set timeout 120				
</strong></pre>
</ul>

This will set the ip address you expect for your side and for the remote side of the connection. The /0 bit tells the connection
that no bits of this ip address need to match and the whole thing can be replaced. This also sets your default netmask and gateway.

<ul>
<pre><strong>
d699 1
a699 20
</strong></pre>
</ul>

This will make the default gateway the remote end of the ppp connection.

<ul>
<pre><strong>
add default HISADDR		
</strong></pre>
</ul>

This tells ppp to ask the peer for the nameserver addresses that should be used. This isn't always supported, but if it is
/etc/resolv.conf will automatically be updated.

<ul>
<pre><strong>
enable dns		
</strong></pre>
</ul>

d702 8
a709 5
<strong>
&lt;Pap/Chap Section&gt; <br>
</strong>
What if your ISP uses PAP or CHAP? Here is a configuration that will work
with both PAP or CHAP, PPP will decide which it needs to use.
a711 44
<strong>
myispPAPCHAP:  <br>
</strong>

This line sets the phone number.

<ul>
<pre><strong>
set PHONE 1234567			 
</strong></pre>
</ul>

PPP will be waiting for the peer to suggest the use of either PAP or CHAP.

<ul>
<pre><strong>
set LOGIN				 
</strong></pre>
</ul>

This is where you specify your username.				

<ul>
<pre><strong>
set authname MyName			 
</strong></pre>
</ul>

This is where you specify your password.

<ul>
<pre><strong>
set authkey MyKey			
</strong></pre>
</ul>

This sets the login timeout to 120 seconds.

<ul>
<pre><strong>
set timeout 120				
</strong></pre>
</ul>

d713 4
a716 1
And then procede with the standard commands from above.
d719 1
a719 4
<strong>&lt;Static Ip Section&gt;</strong>
<p>
All you need to do is change the ifaddr parameter like so:
<p>
d722 2
a723 3
<pre>
set ifaddr 209.115.93.18 209.115.93.20
</pre>
d726 7
d734 2
a735 2
In this example, your IP is 209.115.93.18, and the peer side IP is
209.115.93.20.
d751 1
a751 1
<small>$OpenBSD: faq6.html,v 1.21 1999/07/07 23:23:42 ericj Exp $</small>
@


1.21
log
@fixups
@
text
@d41 2
a42 2
and Setup</a> section, and/or read a nice intro to TCP/IP. Other recommended
reading are the 
d80 1
a80 1
interface have them. That means oviously they are working. Your interface
d88 2
a89 2
If xl0 was uninitialized, you can assign it an address creating a ascii
file /etc/hostname.xl0 having a string like this:
d120 1
a120 1
named "wintermute" wich is also in the /etc/hosts, use this commands:
d200 1
a200 1
Note the netmask used! Don't use 255.255.255.0 in this kind of cases (both
d294 1
a294 1
The IP Filter package was created to handle with two tasks, dealing with
d307 1
a307 1
If you have IP Filter compiled in to your kernel, but you don't have 
d327 2
a328 2
you to choose the one closer to what you want, and modify it to fit your needs.  You can find other IP Filter information
at the IP Filter <A HREF="http://false.net/ipfilter/">mailing list archive</a>, the <A HREF="http://cheops.anu.edu.au/~avalon/ip-filter.html">IP Filter web site</a>, and finally the <A HREF="http://www.swcp.com/~synk/ipf-howto.txt">the IP Filter HOWTO</a>.
d345 1
a345 1
apply the necesary rules to block offending packets. So this is first:
d356 1
a356 1
Now lets block any incoming connection to port 82 tcp (eg. there's an
d397 1
a397 1
officially asigned addresses for every host on your internal network. When
d449 1
a449 1
from.  (If this doesn't make sense, don't worry, but keep reading.)  The way to go arount it is to map TCP and UDP ports to
d499 1
a499 1
want it to be accesible from the outside simply redirecting external IP 
d565 1
a565 1
This will cause OpenBSD to automatically start the DHCP client on boot.  OpenBSD will gather its' IP address,
d601 1
a601 1
PPP is generally an easy thing to set up.  What follows is a basic intro based
d606 1
a606 1
following should look familiar because it is that info with a little bit of
d708 1
a708 1
This will set the ip address you expect your your side and for the remote side of the connection. The /0 bit tells the connection
d820 1
a820 1
<small>$OpenBSD: faq6.html,v 1.20 1999/07/05 01:22:42 ericj Exp $</small>
@


1.20
log
@spelling
@
text
@d94 1
a94 1
inet mona 255.255.255.0 NONE
d98 5
a102 2
<p>        
This hostname 'mona' needs to have record in /etc/hosts:
d239 1
d820 1
a820 1
<small>$OpenBSD: faq6.html,v 1.19 1999/07/03 05:51:35 ericj Exp $</small>
@


1.19
log
@style fixes
@
text
@d473 1
a473 1
route thse addresses to you, or say you are switching providers.  Your new address block is 192.9.4.0/22, but to switch all 500 devices
d816 1
a816 1
<small>$OpenBSD: faq6.html,v 1.18 1999/06/30 16:01:27 ericj Exp $</small>
@


1.18
log
@spelling fix's <ccsdhd@@bath.ac.uk>
@
text
@d53 1
a53 1
<p>
d55 1
a55 1
# ifconfig -a
d73 1
a73 1
</p>
d92 1
a92 1
<p>
d96 1
a96 1
</p>
d102 1
a102 2
<p>
<pre>
d104 2
a105 1
</pre>
d120 1
a120 1
<p>
d125 1
a125 1
</p>
d132 1
a132 1
<p>
d136 1
a136 1
</p>
d153 1
a153 1
<p>
d155 1
a155 1
# netstat -rn
d172 1
a172 1
</p>
d231 1
a231 1
<p>
d237 1
a237 1
</p>
d260 1
a260 1
<p>
d264 1
a264 1
</p>
d270 1
a270 1
<p>
d272 1
a272 1
# sysctl -w net.inet.ip.forwarding=1
d275 1
a275 1
</p>
d816 1
a816 1
<small>$OpenBSD: faq6.html,v 1.17 1999/06/28 18:55:20 ericj Exp $</small>
@


1.17
log
@formatting
@
text
@d602 1
a602 1
following should look farmiliar because it is that info with a little bit of
d656 1
a656 1
This will set the commands to follow when certian actions take place while dialing.  Abort the call if the number is busy, abort the
d721 1
a721 1
This tells ppp to ask the peer for the nameserver addresses that should be used. This isnt always supported, but if it is
d816 1
a816 1
<small>$OpenBSD: faq6.html,v 1.16 1999/06/27 21:32:23 ericj Exp $</small>
@


1.16
log
@minor fix's & spelling
@
text
@d635 1
a635 2
<pre>
<strong>
d637 1
a637 2
</pre>
</strong>
d643 1
a643 2
<pre>
<strong>
d645 1
a645 2
</pre>
</strong>
d651 1
a651 2
<pre>
<strong>
d653 1
a653 2
</pre>
</strong>
d661 1
a661 2
<pre>
<strong>
d663 1
a663 2
</strong>						 
</pre>
d682 1
a682 2
<pre>
<strong>
d684 1
a684 2
</strong>
</pre>
d691 1
a691 2
<pre>
<strong>
d693 1
a693 2
</strong>
</pre>
d699 1
a699 2
<pre>
<strong>
d701 1
a701 2
</strong>
</pre>
d708 1
a708 2
<pre>
<strong>
d710 1
a710 2
</strong>
</pre>
d716 1
a716 2
<pre>
<strong>
d718 1
a718 2
</strong>
</pre>
d725 1
a725 2
<pre>
<strong>
d727 1
a727 2
</strong>
</pre>
d746 1
a746 2
<pre>
<strong>
d748 1
a748 2
</strong>
</pre>
d754 1
a754 2
<pre>
<strong>
d756 1
a756 2
</strong>
</pre>
d762 1
a762 2
<pre>
<strong>
d764 1
a764 2
</strong>
</pre>
d770 1
a770 2
<pre>
<strong>
d772 1
a772 2
</strong>
</pre>
d778 1
a778 2
<pre>
<strong>
d780 1
a780 2
</strong>
</pre>
d816 1
a816 1
<small>$OpenBSD: faq6.html,v 1.15 1999/06/25 20:32:53 ericj Exp $</small>
@


1.15
log
@try and make ppp section more readable.. still needs work though
@
text
@d63 1
a63 1
sl0: flags=c010&ltPOINTOPOINT,LINK2,MULTICAST&gt;
a369 1

d394 1
a394 1
you set up private/internal networks you can take advantage of reserved
d430 1
a430 1
24 bits of 192.168.0.0 should be mapped to the address 200.1.2.3 (only one
d846 1
a846 1
<small>$OpenBSD: faq6.html,v 1.14 1999/06/24 21:54:51 ericj Exp $</small>
@


1.14
log
@fixups to networking faq sections. <chris@@dqc.org>
@
text
@d624 12
a635 1
<strong>&lt;Default Section&gt;</strong>
d637 5
a641 3
default:
set log Phase Chat LCP IPCP CCP tun command      #This parameter tells PPP to log output which pertains 
						 #to the arguments you give the parameter.
d643 1
a643 2
set device /dev/cua01				 #This will set the default modem device on the system 
						 #which here is comm 2.
d645 7
a651 1
set speed 115200				 #This parameter sets the speed of the serial device.
d653 6
a658 7
set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK ATE1Q0 OK \\dATDT\\T TIMEOUT 40 CONNECT"
						 #This will set the commands to follow when certian actions 
						 #take place while dialing.  Abort the call if the number is 
						 #busy, abort the call if there is no carrier.  Wait 5 seconds for 
						 #carrier. Issue AT and wait for response. If AT is ok then dial the 
						 #number and timeout if not connected in 40 seconds. Once dialed
						 #in wait for the CONNECT message to tell us we are connected.
d660 14
d681 8
a688 1
<strong>&lt;MyISP Section&gt;</strong>
d690 1
d692 8
a699 2
myisp:
set phone 1234567			 #This of course sets the number to dial for your isp.
d701 3
d705 3
a707 5
					 #This sets the login options.  It will abort login if
					 #there is no carrier with a timeout of 5 seconds.  It 
					 #will then wait for the login: prompt and send
					 #your login name, and then it will wait for the password 
					 #prompt and send your password.
d709 1
a709 1
set timeout 120				 #This sets the timeout for the entire login process.
d711 14
d726 3
a728 5
					 #This will set the ip address you expect your your side 
					 #and for the remote side of the connection. The /0 bit 
					 #tells the connection that no bits of this ip address 
					 #need to match and the whole thing can be replaced. 
					 #This also sets your default netmask and gateway.
d730 1
a730 2
add default HISADDR			 #This will make the default gateway the remote end of 
					 #the ppp connection.
d732 5
a736 3
enable dns				 #This tells ppp to ask the peer for the nameserver 
					 #addresses that should be used. This isnt always supported, 
					 #but if it is /etc/resolv.conf will automatically be updated.
d738 13
a751 1
<strong>&lt;Pap/Chap Section&gt;</strong>
d753 3
d760 5
d766 1
d768 17
a784 2
myispPAPCHAP:
set PHONE 1234567			 #This line sets the phone number.
d786 9
a794 2
set LOGIN				 #PPP will be waiting for the peer to suggest the use of 
					 #either PAP or CHAP.
d796 7
a802 1
set authname MyName			 #This is where you specify your username.
d804 1
a804 1
set authkey MyKey			 #This is where you specify your password.
d806 5
a810 1
set timeout 120				 #This sets the login timeout to 120 seconds.
d812 1
d847 1
a847 1
<small>$OpenBSD: faq6.html,v 1.13 1999/06/09 00:04:28 wvdputte Exp $</small>
@


1.13
log
@Fixed typo (namme -> name) Zbynek.Chmela@@vscht.cz
@
text
@d99 1
a99 1
Here "mona" is a name that exists as a record in /etc/hosts:
d106 7
a112 1
</p>
d122 2
a123 1
# echo "mona" >> /etc/myname; echo "wintermute" >> /etc/mygate
d149 1
a149 1
Now check your routes are ok (here we use -n aso to make it simpler to
d175 1
a175 1
(The gateway here is shown as 10.1.1.254)
d198 2
a199 2
numbers are on the same subnet), only ONE address shoud handle the subnet.
If you do such kind of misconfiguration the following error appears:
d217 1
d227 1
a227 1
machine name belongs to the domain yourdomain.com. Add the following
d244 4
a247 2
This is a minimal explanation, only for internal/secure networks! Read
Firewall Setup if you plan to put a gateway to internet.  
d251 6
a256 2
If you want to put a host that connects two subnets, and you want it to
"forward" any packet from them modify /etc/sysctl.conf line that toggles
d262 1
a262 1
net.inet.forwarding=1
d278 5
a282 1
Now modify the routes on the other hosts on both sides.
d287 1
a287 1
<h2>6.2 - IPF/NAT Setup</h2>
a288 1

d290 4
a293 1
<h3>IPF and IPNAT Setup</h3>
d297 4
a300 4
The IPFilter package was created to handle with two tasks, dealing with
packet level forwarding permissions and mapping hosts/subnets to a range of
external addresses. The configuration files are /etc/ipf.rules and
/etc/ipnat.rules, and also part of /etc/
d302 10
a311 1

d313 12
a324 9
rc.conf to activate them at boot time. You also need to have 
net.inet.ip.forwarding=1! You also need a kernel compiled with option
IPFILTER and IPFILTER_LOG (the GENERIC one present in the installation have
them).
</p>

<p>
There are a lot of nice examples on /usr/share/ipf/ for both. We recommend
you to choose the one closer to what you want, and modify it to fit your needs.
d334 1
a334 1
for a more strict definition see man 5 ipf. Here is assumed xl0 as the
d378 1
a378 1
Also a typical rule is to block rpc portmap:
d392 2
a393 2
Based on RFC 1631, ipnat provides an easy way to map internal networks on
a range of external addresses. This is very useful if you don't have
d396 8
a403 1
address blocks like:
a404 1

d406 4
d411 1
a411 1
10.0.0.0, 192.168.0.0, and 172.16.0.0
a412 1
</p>
d415 2
a416 3
If you have an internal network using 192.168.0.0 and you want to give
them access to internet using OpenBSD (of course!) and a ppp connection using
address 200.1.2.3, use this rule:
d421 1
a421 1
map ppp0 192.168.0.0/16 -> 200.1.2.3/32
d426 1
a426 1
Note the /16 and /32, this means:
d430 2
a431 2
"Any outgoing connection whose comming from an address matching the first
16 bits of 192.168.0.0 should be mapped on local address 200.1.2.3 (only one
d434 7
d444 7
a450 4
ona (or a few) address. The way to go arount it is to map TCP and UDP ports to
a certain range with the option "portmap". But remember ICMP doesnt work this
way, it only has an ID field (usually based on process number). So now its
like this:
d455 2
a456 2
map ppp0 192.168.0.0/16 -> 200.1.2.3/32 portmap tcp/udp 1024:65000
map ppp0 192.168.0.0/16 -> 200.1.2.3/32
d461 3
a463 2
This way things work better. If you have a dynamic address assignment
(like regular dialup modem account), you can do this:
d468 2
a469 2
map ppp0 192.168.0.0/16 -> ppp0/32 portmap tcp/udp 1024:65000
map ppp0 192.168.0.0/16 -> ppp0/32<br>
d471 15
a485 1
</p>
d507 1
a507 1
This is a little graph:
d512 1
a512 2
Internet <--> (xl0) OpenBSD (xl1) <--> LAN <--> 10.2.2.7
            128.2.3.4      whatever  10.2.2.0   Web server
d517 4
a520 3
Remember to activate kernel must have option IP FORWARDING. Also remember that
EVERY packet MUST pass through the OpenBSD box, i.e. you can't redirect ports
to hosts on the same network and address external to the OpenBSD box.
d527 1
a527 1
<h2>6.3 - IPSEC</h2>
d531 11
a541 3
Be sure to check
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vpn&apropos=0&sektion=0&format=html">vpn</a>
man page.
d544 2
a545 1
You can also check <a href="http://www.codetalker.com/greenbox/docs/vpn-24-minifaq.html">Codetalker</a>
d555 28
d584 4
a587 1
This section is not yet completed. Please Check back soon.
d717 1
a717 1
In this example, your ip is 209.115.93.18, and the peer side ip is
d734 1
a734 1
<small>$OpenBSD: faq6.html,v 1.12 1999/05/21 03:47:25 ericj Exp $</small>
@


1.12
log
@Format PPP section so it is actually readable
@
text
@d219 1
a219 1
machine namme belongs to the domain yourdomain.com. Add the following
d629 1
a629 1
<small>$OpenBSD: faq6.html,v 1.11 1999/05/21 02:44:00 ericj Exp $</small>
@


1.11
log
@Grammer fix's.. kjell@@ start some clean up also
@
text
@d519 2
a520 1
<p>
d522 2
a523 1
</p>
d525 2
a526 15
<p>
<pre>
set log Phase Chat LCP IPCP CCP tun command
</pre>
This parameter tells PPP to log output which pertains to the arguments you
give the parameter.
</p>

<p>
<pre>
set device /dev/cua01
</pre>
This will set the default modem device on the system which here is comm
2.
</p>
d528 1
a528 6
<p>
<pre>
set speed 115200
</pre>
This parameter sets the speed of the serial device.
</p>
a529 2
<p>
<pre>
d531 6
a537 6
This will set the commands to follow when certian actions take place while
dialing.  Abort the call if the number is busy, abort the call if there is no
carrier.  Wait 5 seconds for carrier. Issue AT and wait for response. If AT is
ok then dial the number and timeout if not connected in 40 seconds. Once dialed
in wait for the CONNECT message to tell us we are connected.
</p>
d545 1
a545 3
<p>
myisp:
</p>
a546 1
<p>
d548 2
a549 4
set phone 1234567
</pre>
This of course sets the number to dial for your isp.
</p>
a550 2
<p>
<pre>
d552 5
a556 6
</pre>
This sets the login options.  It will abort login if there is no carrier
with a timeout of 5 seconds.  It will then wait for the login: prompt and send
your login name, and then it will wait for the password prompt and send your
password.
</p>
d558 1
a558 6
<p>
<pre>
set timeout 120
</pre>
This sets the timeout for the entire login process.
</p>
a559 2
<p>
<pre>
d561 5
a565 6
</pre>
This will set the ip address you expect your your side and for the remote side
of the connection. The /0 bit tells the connection that no bits of this ip
address need to match and the whole thing can be replaced. This also sets your
default netmask and gateway.
</p>
d567 2
a568 6
<p>
<pre>
add default HISADDR
</pre>
This will make the default gateway the remote end of the ppp connection.
</p>
d570 3
a572 3
<p>
<pre>
enable dns
a573 4
This tells ppp to ask the peer for the nameserver addresses that should be
used. This isnt always supported, but if it is /etc/resolv.conf will
automatically be updated.
</p>
d575 1
a580 3
<p>
myispPAPCHAP:
</p>
a581 1
<p>
d583 2
a584 4
set PHONE 1234567
</pre>
this of course sets the phone number.
</p>
d586 2
a587 7
<p>
<pre>
set LOGIN
</pre>
PPP will be waiting for the peer to suggest the use of either PAP or
CHAP.
</p>
d589 1
a589 6
<p>
<pre>
set authname MyName
</pre>
This is where you specify your username.
</p>
d591 1
a591 6
<p>
<pre>
set authkey MyKey
</pre>
This is where you specify your password.
</p>
d593 1
a593 3
<p>
<pre>
set timeout 120
a594 2
This sets the login timeout to 120 seconds.
</p>
d600 1
a600 4
<p>
If you have a static ip:
</p>

d629 1
a629 1
<small>$OpenBSD: faq6.html,v 1.10 1999/04/19 20:13:54 ericj Exp $</small>
@


1.10
log
@point to the vpn man page
@
text
@d341 1
a341 1
"log quick" if you dont want it to send a message to every console root is
d454 1
a454 1
EVERY packet MUST pass through the OpenBSD box, i.e. you cant redirect ports
d698 1
a698 1
<small>$OpenBSD: faq6.html,v 1.9 1999/04/08 22:54:43 ericj Exp $</small>
@


1.9
log
@link the vpn-mini-faq at codetalker.com
@
text
@d467 1
a467 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=vpm&apropos=0&sektion=0&format=html">vpn</a>
d698 1
a698 1
<small>$OpenBSD: faq6.html,v 1.8 1999/03/14 19:19:20 ericj Exp $</small>
@


1.8
log
@add boot time configuration - ALL entry's indexed from index.html MUST have a legit link referenced even if that documentation isnt there yet
@
text
@d466 6
a471 1
This section is not yet completed. Please Check back soon.
d698 1
a698 1
<small>$OpenBSD: faq6.html,v 1.7 1999/02/28 04:59:21 ericj Exp $</small>
@


1.7
log
@Few characters werent showing up just right. added &lt; and &gt;
@
text
@d42 1
a42 1
reading is the 
d76 2
a77 2
First there is lo0 the loopback interface. It MUST have assigned address
127.0.0.1 no matter what network setup you use. The next important one is
d693 1
a693 1
<small>$OpenBSD: faq6.html,v 1.6 1999/02/21 21:44:05 wvdputte Exp $</small>
@


1.6
log
@Changed layout and added links
@
text
@d57 1
a57 1
lo0: flags=8009<UP,LOOPBACK,MULTICAST>
d59 2
a60 2
lo1: flags=8008<LOOPBACK,MULTICAST>
xl0: flags=8843<UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST>
d63 1
a63 1
sl0: flags=c010<POINTOPOINT,LINK2,MULTICAST>
d65 7
a71 7
sl0: flags=c010<POINTOPOINT,LINK2,MULTICAST>
sl1: flags=c010<POINTOPOINT,LINK2,MULTICAST>
ppp0: flags=8010<POINTOPOINT,MULTICAST>
ppp1: flags=8010<POINTOPOINT,MULTICAST>
tun0: flags=10<POINTOPOINT>
tun1: flags=10<POINTOPOINT>
enc0: flags=8<LOOPBACK>
d693 1
a693 1
<small>$OpenBSD: faq6.html,v 1.5 1999/02/11 18:10:11 ericj Exp $</small>
@


1.5
log
@Networking added
@
text
@d3 25
a27 7
<title> 6.0 - Networking</title>
<link rev=made href=mailto:www@@openbsd.org>
<meta name="resource-type" content="document">
<meta name="description" content="the main OpenBSD page">
<meta name="keywords" content="openbsd,main">
<meta name="distribution" content="global">
<meta name="copyright" content="This document copyright 1998 by OpenBSD.">
d29 4
a32 2
</head>
<body bgcolor="#ffffff" text="#000000" link="#23238E">
a33 2
<a name="6.1"</a>
<h2> 6.1 - Initial Network Setup </h2>
d35 3
a37 4
<strong>
Interfaces<br>
----------
</strong>
d40 10
a49 7
TCP/IP knowledge. If not, go to the <a href="./faq5.html">Kernel
Configuration and Setup</a> section, and/or read a nice intro to TCP/IP.
Other recommended reading is the 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&apropos=0&sektion=8&format=html">ifconfig(8)</a>
and 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=netstat&apropos=0&sektion=1&format=html">netstat(1)</a> 
man pages.<p>
d51 4
a54 1
<pre><strong>
d72 2
a73 1
</strong></pre>
d75 1
d78 9
a86 7
xl0 in this example (could be neX or epX depending on the brand),  wich is
a board itself. Look it has UP and
 RUNNING flags on, as lo0 but no other interface have them. That means
oviously  they are working. Your interface could be down if you never
configured it, and look like the othe interfaces. The others are not part
of this section, as sl and ppp are for serial line comunication, tun is a pseudo-device for tunneling and enc a
pseudo-device for encryption. 
d90 4
a93 1
<p><strong>
d95 7
a101 2
</strong><p>        
Here "mona" is a name that exists as a record in /etc/hosts:<br><strong> 
d104 1
a104 1
10.1.1.1        mona    mona.openbsd.org.ar </strong>
d106 2
d112 2
d115 1
a115 1
<strong>
d117 3
a119 1
</strong>
d122 9
a130 4
configuration now (without rebooting) do:<p>
<strong>
# sh /etc/netstart<br>
</strong>
d134 2
d139 2
d144 2
d147 1
a147 1
<pre><strong>
d164 2
a166 1
</pre></strong>
d169 2
d172 3
a174 4
<strong>
IP Aliasing<br>   
-----------<br>
</strong>
d177 1
a177 1
you  need to assign an "alias" to it. The way to do it on openbsd is
d179 5
a183 2
this:<p>
<strong>
d185 3
a187 1
</strong>
d193 2
d196 1
a196 1
<strong>
d198 3
a200 1
</strong>
d204 2
d207 1
a207 1
<strong>
d209 4
a212 1
</strong>
d214 3
a216 4
<strong>
DNS Client Setup<br>
----------------<br>
</strong>
d220 7
a226 4
lines to your /etc/resolv.conf file:<p>
<strong>
domain yourdomain.com<br>
nameserver 125.2.3.4<br>
d228 3
d232 3
a234 3
Gateway Setup<br>
-------------<br>
</strong>
d237 2
a238 1
Firewall Setup if you plan to put a gateway to internet.
d240 1
d244 2
d247 1
d249 3
d254 2
d257 2
a258 2
<strong>
# sysctl -w net.inet.ip.forwarding=1<br>
d260 3
a262 1
</strong>
d265 11
a276 6
<a name="6.2"></a>
<h2> 6.2 - IPF/NAT Setup </h2>
<p><strong>
IPF and IPNAT Setup<br>
-------------------
<p></strong>
d278 12
a289 9
packet level forwarding 
permissions and mapping hosts/subnets to a range of external addresses.
The configuration files are /etc/ipf.rules and /etc/ipnat.rules, and also
part of /etc/
<p>
rc.conf to activate them at boot time. You also need to have
net.inet.ip.forwarding=1! You also need a kernel compiled with 
 option IPFILTER and IPFILTER_LOG (the GENERIC one present in the
installation have them).
d292 8
a299 6
you to choose the one closer 
to what you want, and modify it to fit your needs.
<strong><p>
IPF<br>
---
<p></strong>
d301 6
a306 5
simple yet powerful syntax.
Here we deal with the most common ways of usage, for a more strict
definition see man 5 ipf.
Here is assumed xl0 as the external interface to internet, on this one
uses to have more rules than internal interfaces.
d310 4
a313 1
<strong><p>
d316 4
a319 1
<p></strong>
d322 4
a325 1
<strong><p>
d327 8
a334 2
<p></strong>
This rule means:<br>
d337 2
d341 4
a344 2
"log quick" if you dont want
it to send a message to every console root is logged in.
d347 4
a350 1
<p><strong>
d352 7
a359 3
IPNAT<br>
-----
<p></strong>
d361 8
a368 5
a range of external addresses.
This is very useful if you don't have officially asigned addresses for
every host on your internal network. When  you set up private/internal
networks you can take advantage of reserved address blocks like:
<p><strong>
d370 4
a373 1
<p></strong>
d375 6
a380 4
them access to internet using
OpenBSD (of course!) and a ppp connection using address 200.1.2.3, use
this rule:
<strong><p>
d382 8
a389 2
<p></strong>
Note the /16 and /32, this means:<br>
d391 15
a405 12
16 bits of 192.168.0.0 should 
be mapped on local address 200.1.2.3 (only one address since /32 means
every bit)"
<p>
But here arises a pproblem. You are assigning a lot of addresses to only
ona (or a few) address. 
The way to go arount it is to map TCP and UDP ports to a certain range
with the option "portmap".
But remember ICMP doesnt work this way, it only has an ID field (usually
based on process number). So now its like this:<p>
<strong>
map ppp0 192.168.0.0/16 -> 200.1.2.3/32 portmap tcp/udp 1024:65000<br>
d407 3
a409 1
</strong>
d412 6
a417 3
(like regular dialup modem account), you can do this:<p>
<strong>
map ppp0 192.168.0.0/16 -> ppp0/32 portmap tcp/udp 1024:65000<br>
d419 7
a426 3
Redirecting ports<br>
-----------------<p>
</strong>
d429 18
a446 9
connections to it, you just need a simple redirect rule. For example, if you have a web
server on internal network at 10.2.2.7 listening on port 80, and want it to be
accesible from the outside simply redirecting external IP 120.2.3.4 on xl0, just
add this rule to <strong>/etc/ipnat.rules:<p>

rdr xl0 120.2.3.4 port 80 -> 10.2.2.7 port 80<p>
</strong>
Thiis is a little graph:<p>
<pre><strong>
d449 2
a450 1
</strong></pre><p>
d452 7
a458 3
Remember to activate kernel must have option IP FORWARDING. Also remember that EVERY packet
MUST pass through the OpenBSD box, i.e. you cant redirect ports to hosts on the
same network and address external to the OpenBSD box.
d461 4
a464 2
<a name="6.3"></a>
<h2> 6.3 - IPSEC</h2>
d467 4
d472 4
a475 2
<a name="6.4"></a>
<h2> 6.4 - DHCP </h2>
d478 4
d483 4
a486 2
<a name="6.5"></a>
<h2> 6.5 - PPP </h2>
d488 8
a495 24
 PPP is generally an easy thing to set up.  What follows is a basic
intro based on the information provided in<strong> /etc/ppp </strong>and
the <a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&apropos=0&sektion=8&format=html">ppp(8)</a>
manual
pages.  These are highly suggested reading before attempting to setup PPP
or even reading this FAQ entry.  If you have read these the following
should look farmiliar because it is that info with a little bit of
elaboration.<p>

First you will need to find out a little bit about how your ISP 
sets up its PPP connections.  Does it use scripted login, PAP, CHAP, do
you have a dynamic or static IP etc.  This along with some basic info
about your modem will allow us to easily create a PPP dial in script for
your ISP.<p>

First we will create a PPP conf using what is already in
<strong>/etc/ppp/ppp.conf.sample</strong> as a guide.  The first section
we come to is the
section labeled default.  This is the best place to specify logging
options, your modem device and dial options.  It will always be executed 
when ppp is run.  The following is the default section that comes standard
with <strong>/etc/ppp/ppp.conf.sample</strong> and an explanation of what
each parameter does: <p>
d497 6
a502 2
default:<br>
<strong> set log Phase Chat LCP IPCP CCP tun command</strong><br>
d504 18
d523 2
a524 3
give the parameter.<p>

<strong>set device /dev/cua01</strong><br>
d526 4
d531 2
a532 1
2.<p>
d534 6
a539 2
<strong> set speed 115200</strong><br>
This parameter sets the speed of the serial device.<p>
d541 4
a544 3
<strong>set dial "ABORT BUSY ABORT NO\\sCARRIER TIMEOUT 5 \"\" AT OK-AT-OK
ATE1Q0
OK \\dATDT\\T TIMEOUT 40 CONNECT"</strong><br>
d546 22
a567 14
dialing.  Abort the call if the number is busy,
abort the call if there is no carrier.  Wait 5 seconds for carrier. Issue
AT and wait for response. If at is ok then dial the
number and timeout if not connected in 40 seconds.  Once dialed in wait
for the CONNECT message to tell us we are connected.
<p>

Now that the default modem options are set we will need to create
a section in the ppp.conf for our ISP.  Below are
a few examples of what could be in there and what type of isp they are
tailored for.<p>
myisp:<br>
<strong> set phone 1234567</strong><br>
This of course sets the number to dial for your isp.<p>
d569 4
a572 2
<strong>set login "ABORT NO\\sCARRIER TIMEOUT 5 ogin:--ogin: ppp word:
ppp"</strong><br>
d574 33
a606 18
with a timeout of 5 seconds.  It will then wait for the
login: prompt and send your login name, and then it will wait for the
password prompt and send your password.
<p>
<strong>set timeout 120</strong><br>
This sets the timeout for the entire login process.<p>

<strong>set ifaddr 10.0.0.1/0 10.0.0.2/0 255.255.255.0
0.0.0.0</strong><br>
This will set the ip address you expect your your side and for the remote
side of the connection.  The /0 bit tells the connection
that no bits of this ip address need to match and the whole thing can be
replaced.  This also sets your default netmask and gateway.<p>

<strong>add default HISADDR</strong><br>
This will make the default gateway the remote end of the ppp
connection.<p>
<strong>enable dns</strong><br>
d608 3
a610 2
used. This isnt always supported, but if it is
/etc/resolv.conf will automatically be updated.<p>
d612 1
d614 2
a615 1
with both PAP or CHAP, PPP will decide which it needs to use.<p>
d617 8
a624 2
myispPAPCHAP:<br>
<strong>set PHONE 1234567</strong><br>
d626 2
d629 3
a631 1
<strong>set LOGIN</strong><br>
d633 27
a659 1
CHAP.<p>
d661 15
a675 11
<strong>set authname MyName</strong><br>
This is where you specify your username.<p>
<strong>set authkey MyKey</strong><br>
This is where you specify your password.<p>
<strong>set timeout 120</strong><br>
This sets the login timeout to 120 seconds.<p>
<p>
And then procede with the standard commands from above.<p>
If you have a static ip:<br>
All you need to do is change the ifaddr parameter like so:<br>
<strong>set ifaddr 209.115.93.18 209.115.93.20<br></strong>
d678 1
d680 9
d690 5
a694 4
<a href=index.html><img height=24 width=24 src=../back.gif border=0
alt=OpenBSD$
<a href=mailto:www@@openbsd.org>www@@openbsd.org</a>
<br><small>$OpenBSD: faq6.html,v 1.4 1999/01/05 02:52:18 ericj Exp $</small>
a696 1

@


1.4
log
@pap/chap and correct broken links
@
text
@d17 163
a179 1
This section is not yet completed. Please Check back soon.
d183 115
a297 2
<p>
This section is not yet completed. Please Check back soon.
d424 1
a424 1
<br><small>$OpenBSD: faq6.html,v 1.3 1999/01/04 22:28:19 ericj Exp $</small>
@


1.3
log
@manpath not specified for man.cgi. defaults to -current
@
text
@d13 21
a118 1
<strong>SOON TO COME -- PAP/CHAP and static ip's</strong>
d120 24
d149 1
a149 1
<br><small>$OpenBSD: faq6.html,v 1.2 1999/01/02 20:00:36 ericj Exp $</small>
@


1.2
log
@ppp section
@
text
@d19 1
a19 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ppp&apropos=0&sektion=8&manpath=OpenBSD+2.4&format=html">ppp(8)</a>
d105 1
a105 1
<br><small>$OpenBSD$</small>
@


1.1
log
@no extra directories
@
text
@d1 108
a108 1
not yet completed
@

