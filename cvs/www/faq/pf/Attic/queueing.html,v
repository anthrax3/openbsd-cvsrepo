head	1.63;
access;
symbols;
locks; strict;
comment	@# @;


1.63
date	2016.04.18.22.54.39;	author tj;	state dead;
branches;
next	1.62;
commitid	AOFdXZiMdYQYimXL;

1.62
date	2016.04.18.19.07.50;	author tj;	state Exp;
branches;
next	1.61;
commitid	g0cUF3jNn5Tz4oaZ;

1.61
date	2016.04.16.00.30.41;	author tj;	state Exp;
branches;
next	1.60;
commitid	rTxoenHHaeutOff1;

1.60
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.59;
commitid	jwteSMEb4rFzI8UA;

1.59
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.58;
commitid	4Y8oU6GBrSY1UOfW;

1.58
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.57;
commitid	hi2ObFv9LGB98JY5;

1.57
date	2016.03.22.10.56.56;	author sthen;	state Exp;
branches;
next	1.56;
commitid	G2izHhNJ7aqR0Y6j;

1.56
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.55;
commitid	zEx6zFkNSFFExu0v;

1.55
date	2015.10.18.19.48.19;	author nick;	state Exp;
branches;
next	1.54;
commitid	gkrFWKimwWNVivXe;

1.54
date	2015.07.02.05.49.05;	author bentley;	state Exp;
branches;
next	1.53;
commitid	AP3UllesavMDEUhQ;

1.53
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.52;
commitid	wRrXxcro6dFYiwF8;

1.52
date	2015.04.30.23.48.01;	author nick;	state Exp;
branches;
next	1.51;
commitid	uFWv68UTtTmjkqVF;

1.51
date	2014.12.02.03.17.26;	author nick;	state Exp;
branches;
next	1.50;
commitid	RQ0cKiFD5x45dGyo;

1.50
date	2014.12.01.10.01.07;	author bentley;	state Exp;
branches;
next	1.49;
commitid	DtrOVs7q8kqgEsjm;

1.49
date	2014.05.15.16.06.49;	author sthen;	state Exp;
branches;
next	1.48;

1.48
date	2014.05.01.15.03.50;	author nick;	state Exp;
branches;
next	1.47;

1.47
date	2014.03.31.02.33.07;	author nick;	state Exp;
branches;
next	1.46;

1.46
date	2013.11.01.14.07.06;	author nick;	state Exp;
branches;
next	1.45;

1.45
date	2013.05.01.13.21.45;	author nick;	state Exp;
branches;
next	1.44;

1.44
date	2012.11.01.15.06.36;	author nick;	state Exp;
branches;
next	1.43;

1.43
date	2012.05.11.11.20.04;	author nick;	state Exp;
branches;
next	1.42;

1.42
date	2011.11.02.01.01.47;	author nick;	state Exp;
branches;
next	1.41;

1.41
date	2011.05.01.12.57.11;	author nick;	state Exp;
branches;
next	1.40;

1.40
date	2010.11.01.09.53.51;	author nick;	state Exp;
branches;
next	1.39;

1.39
date	2010.05.19.13.25.16;	author sthen;	state Exp;
branches;
next	1.38;

1.38
date	2009.10.16.19.12.42;	author nick;	state Exp;
branches;
next	1.37;

1.37
date	2009.04.30.17.27.31;	author nick;	state Exp;
branches;
next	1.36;

1.36
date	2009.01.25.18.09.49;	author jasper;	state Exp;
branches;
next	1.35;

1.35
date	2008.10.31.16.49.34;	author nick;	state Exp;
branches;
next	1.34;

1.34
date	2008.07.27.17.13.47;	author nick;	state Exp;
branches;
next	1.33;

1.33
date	2007.11.01.02.57.56;	author joel;	state Exp;
branches;
next	1.32;

1.32
date	2007.05.07.01.13.53;	author joel;	state Exp;
branches;
next	1.31;

1.31
date	2007.05.06.18.59.54;	author nick;	state Exp;
branches;
next	1.30;

1.30
date	2006.11.01.01.56.01;	author joel;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.01.00.54.29;	author nick;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.01.11.35.18;	author nick;	state Exp;
branches;
next	1.27;

1.27
date	2005.05.20.00.12.02;	author joel;	state Exp;
branches;
next	1.26;

1.26
date	2005.02.25.04.12.30;	author joel;	state Exp;
branches;
next	1.25;

1.25
date	2005.02.07.05.56.39;	author joel;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.22.04.28.16;	author david;	state Exp;
branches;
next	1.23;

1.23
date	2004.10.29.17.22.57;	author nick;	state Exp;
branches;
next	1.22;

1.22
date	2004.06.21.17.48.32;	author saad;	state Exp;
branches;
next	1.21;

1.21
date	2004.06.11.20.26.53;	author saad;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.07.01.55.24;	author nick;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.30.18.00.25;	author nick;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.19.00.21.29;	author nick;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.01.04.16.17;	author nick;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.12.04.21.14;	author nick;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.11.14.35.47;	author nick;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.27.15.08.25;	author nick;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.09.23.29.02;	author nick;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.22.02.29.03;	author nick;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.16.01.23.49;	author nick;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.13.02.54.08;	author nick;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.12.03.30.24;	author nick;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.22.17.23.49;	author nick;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.15.03.03.54;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.09.02.37.15;	author nick;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.07.02.03.55;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.02.11.14.00;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.14.20.37;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.01.13.14.12;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.01.01.46.06;	author nick;	state Exp;
branches;
next	;


desc
@@


1.63
log
@remove outdated pf queueing page until someone rewrites it.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>OpenBSD PF: Packet Queueing and Prioritization</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="description"   content="the OpenBSD FAQ page">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="http://www.openbsd.org/faq/pf/queueing.html">
</head>

<!--
Copyright (c) 2003-2005 Joel Knight <enabled@@myrealbox.com>

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<body bgcolor="#ffffff" text="#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">PF - Packet Queueing and Prioritization</font>
<small>
<a href="index.html" style="font-weight:normal; float:right">[Contents]</a>
</small>
</h2>
<hr>

<ul>
<li><a href="#queueing"    >Queueing</a>
<li><a href="#sched"       >Schedulers</a>
	<ul>
	<li><a href="#cbq" >Class Based Queueing</a>
	<li><a href="#priq">Priority Queueing</a>
	<li><a href="#red" >Random Early Detection</a>
	<li><a href="#ecn" >Explicit Congestion Notification</a>
	</ul>
<li><a href="#altq"        >Configuring Queueing</a>
<li><a href="#assign"      >Assigning Traffic to a Queue</a>
<li><a href="#example1"    >Example #1: Small, Home Network</a>
<li><a href="#example2"    >Example #2: Company Network</a>
</ul>

<hr>

<b>WARNING: This document is currently out-of-date and refers to a
queueing method that will be removed in OpenBSD 5.6.</b>
Assignment of traffic to queues in "pass" / "match" rules will
remain unchanged, but actual queue configuration ("altq ..." and
"oldqueue ... bandwidth" lines) will be replaced.
Until this page can be updated, please see
<a href="http://man.openbsd.org/pf.conf.5">pf.conf(5)</a>
for current information.<p>

<h2 id="queueing">Queueing</h2>
<p>
To queue something is to store it, in order, while it awaits
processing. In a computer network, when data packets are sent out from a
host, they enter a queue where they await processing by the operating
system.  The operating system then decides which queue and which
packet(s) from that queue should be processed. The order in which the
operating system selects the packets to process can affect network
performance. For example, imagine a user running two network
applications: SSH and FTP. Ideally, the SSH packets should be
processed before the FTP packets because of the time-sensitive nature
of SSH; when a key is typed in the SSH client, an immediate response 
is expected, but an FTP transfer being delayed by a few extra
seconds hardly bears any notice.  But what happens if the router
handling these connections processes a large chunk of packets from the
FTP connection before processing the SSH connection? Packets from the
SSH connection will remain in the queue (or possibly be dropped by the
router if the queue isn't big enough to hold all of the packets)
and the SSH session may appear to lag or slow down.  By modifying the
queueing strategy being used, network bandwidth can be shared fairly
between different applications, users, and computers.

<p>
Note that queueing is only useful for packets in the <i>outbound</i>
direction. Once a packet arrives on an interface in the inbound
direction it's already too late to queue it -- it's already consumed
network bandwidth to get to the interface that just received it. The
only solution is to enable queueing on the adjacent router or, if the
host that received the packet is acting as a router, to enable queueing
on the internal interface where packets exit the router.

<h2 id="sched">Schedulers</h2>
The scheduler is what decides which queues to process and in what order.
By default, OpenBSD uses a First In First Out (FIFO) scheduler. A FIFO
queue works like the line-up at a supermarket's checkout -- the first
item into the queue is the first processed. As new packets arrive they
are added to the end of the queue. If the queue becomes full, and here
the analogy with the supermarket stops, newly arriving packets are dropped.
This is known as tail-drop.

<p>
OpenBSD supports two additional schedulers:
<ul>
<li>Class Based Queueing
<li>Priority Queueing
</ul>

<h3 id="cbq">Class Based Queueing</h3>
Class Based Queueing (CBQ) is a queueing algorithm that divides a
network connection's bandwidth among multiple queues or classes.  Each
queue then has traffic assigned to it based on source or destination
address, port number, protocol, etc.  A queue may optionally be
configured to borrow bandwidth from its parent queue if the parent is
being under-utilized.  Queues are also given a priority such that those
containing interactive traffic, such as SSH, can have their packets
processed ahead of queues containing bulk traffic, such as FTP.

<p>
CBQ queues are arranged in an hierarchical manner.  At the top of the
hierarchy is the root queue which defines the total amount of bandwidth
available.  Child queues are created under the root queue, each of
which can be assigned some portion of the root queue's bandwidth.  For
example, queues might be defined as follows:
<dl>
<dd>Root Queue (2Mbps)
	<dl>
	<dd>Queue A (1Mbps)
	<dd>Queue B (500Kbps)
	<dd>Queue C (500Kbps)
	</dl>
</dl>

<p>
In this case, the total available bandwidth is set to 2 megabits per
second (Mbps). This bandwidth is then split among three child queues.

<p>
The hierarchy can further be expanded by defining queues within queues.
To split bandwidth equally among different users and also classify their
traffic so that certain protocols don't starve others for bandwidth, a
queueing structure like this might be defined:
<dl>
<dd>Root Queue (2Mbps)
	<dl>
	<dd>UserA (1Mbps)
		<dl>
		<dd>ssh (50Kbps)
		<dd>bulk (950Kbps)
		</dl>
	<dd>UserB (1Mbps)
		<dl>
		<dd>audio (250Kbps)
		<dd>bulk (750Kbps)
			<dl>
			<dd>http (100Kbps)
			<dd>other (650Kbps)
			</dl>
		</dl>
	</dl>
</dl>

<p>
Note that at each level the sum of the bandwidth assigned to each of the
queues is not more than the bandwidth assigned to the parent queue.

<p>
A queue can be configured to borrow bandwidth from its parent if the
parent has excess bandwidth available due to it not being used by
the other child queues.  Consider a queueing setup like this:
<dl>
<dd>Root Queue (2Mbps)
	<dl>
	<dd>UserA (1Mbps)
		<dl>
		<dd>ssh (100Kbps)
		<dd>ftp (900Kbps, borrow)
		</dl>
	<dd>UserB (1Mbps)
	</dl>
</dl>

<p>
If traffic in the <tt>ftp</tt> queue exceeds 900Kbps and traffic in the
<tt>UserA</tt> queue is less than 1Mbps (because the <tt>ssh</tt> queue is using
less than its assigned 100Kbps), the <tt>ftp</tt> queue will borrow the
excess bandwidth from <tt>UserA</tt>.  In this way the <tt>ftp</tt>
queue is able to use more than its assigned bandwidth when it faces
overload.  When the <tt>ssh</tt> queue increases its load, the borrowed
bandwidth will be returned.

<p>
CBQ assigns each queue a priority level. Queues with a higher priority
are preferred during congestion over queues with a lower priority as
long as both queues share the same parent (in other words, as long as
both queues are on the same branch in the hierarchy).  Queues with the
same priority are processed in a round-robin fashion.  For example:
<dl>
<dd>Root Queue (2Mbps)
	<dl>
	<dd>UserA (1Mbps, priority 1)
		<dl>
		<dd>ssh (100Kbps, priority 5)
		<dd>ftp (900Kbps, priority 3)
		</dl>
	<dd>UserB (1Mbps, priority 1)
	</dl>
</dl>

<p>
CBQ will process the <tt>UserA</tt> and <tt>UserB</tt> queues in a
round-robin fashion -- neither queue will be preferred over the other.
During the time when the <tt>UserA</tt> queue is being processed, CBQ
will also process its child queues.  In this case, the <tt>ssh</tt>
queue has a higher priority and will be given preferential treatment
over the <tt>ftp</tt> queue if the network is congested.  Note how the
<tt>ssh</tt> and <tt>ftp</tt> queues do not have their priorities
compared to the <tt>UserA</tt> and <tt>UserB</tt> queues because they
are not all on the same branch in the hierarchy.

<p>
For a more detailed look at the theory behind CBQ, please see
<a href="http://www.icir.org/floyd/cbq.html">References on CBQ</a>.

<h3 id="priq">Priority Queueing</h3>
Priority Queueing (PRIQ) assigns multiple queues to a network
interface with each queue being given a priority level. A queue
with a higher priority is <i>always</i> processed ahead of a queue with
a lower priority. 
If two or more queues are assigned the same priority then those queues
are processed in a round-robin fashion.

<p>
The queueing structure in PRIQ is flat -- you cannot define queues
within queues. The root queue is defined, which sets the total amount of
bandwidth that is available, and then sub queues are defined under the
root. Consider the following example:
<dl>
<dd>Root Queue (2Mbps)
	<dl>
	<dd>Queue A (priority 1)
	<dd>Queue B (priority 2)
	<dd>Queue C (priority 3)
	</dl>
</dl>

<p>
The root queue is defined as having 2Mbps of bandwidth available to it
and three subqueues are defined. The queue with the highest priority
(the highest priority number) is served first. Once all the packets
in that queue are processed, or if the queue is found to be empty, PRIQ
moves onto the queue with the next highest priority.  Within a given
queue, packets are processed in a First In First Out (FIFO) manner.

<p>
It is important to note that when using PRIQ you must plan your queues
very carefully.  Because PRIQ <i>always</i> processes a higher priority
queue before a lower priority one, it's possible for a high priority
queue to cause packets in a lower priority queue to be delayed or
dropped if the high priority queue is receiving a constant stream of
packets.

<h3 id="red">Random Early Detection</h3>
Random Early Detection (RED) is a congestion avoidance algorithm. Its
job is to avoid network congestion by making sure that the queue doesn't
become full. It does this by continually calculating the average length
(size) of the queue and comparing it to two thresholds, a minimum
threshold and a maximum threshold. If the average queue size is below
the minimum threshold then no packets will be dropped. If the average is
above the maximum threshold then <i>all</i> newly arriving packets will
be dropped. If the average is between the threshold values then packets
are dropped based on a probability calculated from the average queue
size. In other words, as the average queue size approaches the maximum
threshold, more and more packets are dropped. When dropping packets,
RED randomly chooses which connections to drop packets from.
Connections using larger amounts of bandwidth have a higher probability
of having their packets dropped.

<p>
RED is useful because it avoids a situation known as global
synchronization and it is able to accommodate bursts of traffic.  Global
synchronization refers to a loss of total throughput due to packets
being dropped from several connections at the same time. For example, if
congestion occurs at a router carrying traffic for 10 FTP connections
and packets from all (or most) of these connections are dropped (as is
the case with FIFO queueing), overall throughput will drop sharply. This
isn't an ideal situation because it causes all of the FTP connections to
reduce their throughput and also means that the network is no longer
being used to its maximum potential.  RED avoids this by randomly
choosing which connections to drop packets from instead of choosing all
of them. Connections using large amounts of bandwidth have a higher
chance of their packets being dropped. In this way, high bandwidth
connections will be throttled back, congestion will be avoided, and
sharp losses of overall throughput will not occur. In addition, RED is
able to handle bursts of traffic because it starts to drop packets
<i>before</i> the queue becomes full. When a burst of traffic comes
through there will be enough space in the queue to hold the new packets.

<p>
RED should only be used when the transport protocol is capable of
responding to congestion indicators from the network. In most cases
this means RED should be used to queue TCP traffic and not UDP or ICMP
traffic.

<p>
For a more detailed look at the theory behind RED, please see
<a href="http://www.icir.org/floyd/red.html">References on RED</a>.

<h3 id="ecn">Explicit Congestion Notification</h3>
Explicit Congestion Notification (ECN) works in conjunction with RED to
notify two hosts communicating over the network of any congestion along
the communication path. It does this by enabling RED to set a flag in
the packet header instead of dropping the packet. Assuming the sending
host has support for ECN, it can then read this flag and throttle back
its network traffic accordingly.

<p>
For more information on ECN, please refer to 
<a href="http://www.rfc-editor.org/rfc/rfc3168.txt">RFC 3168</a>.

<h2 id="altq">Configuring Queueing</h2>
Since OpenBSD 3.0 the 
<a href="http://www.csl.sony.co.jp/person/kjc/kjc/software.html#ALTQ"
>Alternate Queueing (ALTQ)</a> queueing implementation has been a part of
the base system. Starting with OpenBSD 3.3 ALTQ has been integrated into
PF.  OpenBSD's ALTQ implementation supports the Class Based Queueing
(CBQ) and Priority Queueing (PRIQ) schedulers. It also supports Random
Early Detection (RED) and Explicit Congestion Notification (ECN).

<p>
Because ALTQ has been merged with PF, PF must be enabled for queueing to
work. Instructions on how to enable PF can be found in
<a href="config.html#activate">Getting Started</a>.

<p>
Queueing is configured in <tt>
<a href="http://man.openbsd.org/pf.conf.5"
>pf.conf</a></tt>. There are two types of directives that are used
to configure queueing:
<ul>
<li><tt>altq on</tt> - enables queueing on an interface, defines which
scheduler to use, and creates the root queue
<li><tt>oldqueue</tt> - defines the properties of a child queue
</ul>

<p>
The syntax for the <tt>altq on</tt> directive is:
<blockquote>
<tt>
altq on <i>interface scheduler</i> bandwidth <i>bw</i> qlimit 
<i>qlim</i> \<br>
&nbsp;&nbsp;&nbsp;tbrsize <i>size</i> queue { <i>queue_list</i> }
</tt>
</blockquote>

<ul>
<li><tt><i>interface</i></tt> - the network interface to activate queueing on.
<li><tt><i>scheduler</i></tt> - the queueing scheduler to use. Possible values are 
<tt>cbq</tt> and <tt>priq</tt>. Only one scheduler may be active on an
interface at a time.
<li><tt><i>bw</i></tt> - the total amount of bandwidth available to the scheduler.
This may be specified as an absolute value using the suffixes <tt>b</tt>,
<tt>Kb</tt>, <tt>Mb</tt>, and <tt>Gb</tt> to represent bits, kilobits,
megabits, and gigabits per second, respectively or as a percentage of the
<tt><i>interface</i></tt> bandwidth.
<li><tt><i>qlim</i></tt> - the maximum number of packets to hold in the queue. 
This parameter is optional. The default is 50.
<li><tt><i>size</i></tt> - the size of the token bucket regulator in bytes. If not
specified, the size is set based on the <tt><i>interface</i></tt> bandwidth.
<li><tt><i>queue_list</i></tt> - a list of child queues to create under the root
queue.
</ul>

<p>
For example:
<blockquote>
<tt>
altq on fxp0 cbq bandwidth 2Mb queue { std, ssh, ftp }
</tt>
</blockquote>
This enables CBQ on the <tt>fxp0</tt> interface. The total bandwidth available is
set to 2Mbps. Three child queues are defined: <tt>std</tt>,
<tt>ssh</tt>, and <tt>ftp</tt>.

<p>
The syntax for the <tt>oldqueue</tt> directive is:
<blockquote>
<tt>
oldqueue <i>name</i> [on <i>interface</i>] bandwidth <i>bw</i> [priority 
<i>pri</i>] [qlimit <i>qlim</i>] \<br>
&nbsp;&nbsp;&nbsp;<i>scheduler</i> ( <i>sched_options</i> )
{ <i>queue_list</i> }
</tt>
</blockquote>

<ul>
<li><tt><i>name</i></tt> - the name of the queue. This must match the
name of one of the queues defined in the <tt>altq on</tt> directive's
<tt><i>queue_list</i></tt>. For <tt>cbq</tt> it can also match the name
of a queue in a previous <tt>queue</tt> directive's
<tt><i>queue_list</i></tt>. Queue names must be no longer than 15 characters.
<li><tt><i>interface</i></tt> - the network interface that the queue is
valid on. This value is optional, and when not specified, will make
the queue valid on all interfaces.
<li><tt><i>bw</i></tt> - the total amount of bandwidth available to the
queue.
This may be specified as an absolute value using the suffixes <tt>b</tt>,
<tt>Kb</tt>, <tt>Mb</tt>, and <tt>Gb</tt> to represent bits, kilobits,
megabits, and gigabits per second, respectively or as a percentage of the
parent queue's bandwidth.
This parameter is only applicable when using the <tt>cbq</tt> scheduler.
If not specified, the default is 100% of the parent queue's bandwidth.
<li><tt><i>pri</i></tt> - the priority of the queue. For <tt>cbq</tt> the
priority range is 0 to 7 and for <tt>priq</tt> the range is 0 to 15.
Priority 0 is the lowest priority. When not specified, a default of 1 is
used.
<li><tt><i>qlim</i></tt> - the maximum number of packets to hold in the queue. 
When not specified, a default of 50 is used.
<li><tt><i>scheduler</i></tt> - the scheduler being used, either <tt>cbq</tt>
or <tt>priq</tt>. Must be the same as the root queue.
<li><tt><i>sched_options</i></tt> - further options may be passed to the scheduler
to control its behavior:
	<ul>
	<li><tt>default</tt> - defines a default queue where all packets not
	matching any other queue will be queued. Exactly one default queue
	is required.
	<li><tt>red</tt> - enables Random Early Detection (RED) on this queue.
	<li><tt>rio</tt> - enables RED with IN/OUT. In this mode, RED will
	maintain multiple average queue lengths and multiple threshold
	values, one for each IP Quality of Service level.
	<li><tt>ecn</tt> - enables Explicit Congestion Notification (ECN) on
	this queue. <tt>Ecn</tt> implies <tt>red</tt>.
	<li><tt>borrow</tt> - the queue can borrow bandwidth from its parent. This can
	only be specified when using the <tt>cbq</tt> scheduler.
	</ul>
<li><tt><i>queue_list</i></tt> - a list of child queues to create under this
queue. A <tt><i>queue_list</i></tt> may only be defined when using the
<tt>cbq</tt> scheduler.
</ul>

<p>
Continuing with the example above:
<blockquote>
<tt>
oldqueue std bandwidth 50% cbq(default)<br>
oldqueue ssh bandwidth 25% { ssh_login, ssh_bulk }<br>
&nbsp;&nbsp;oldqueue ssh_login bandwidth 25% priority 4 cbq(ecn)<br>
&nbsp;&nbsp;oldqueue ssh_bulk  bandwidth 75% cbq(ecn)<br>
oldqueue ftp bandwidth 500Kb priority 3 cbq(borrow red)<br>
</tt>
</blockquote>

<p>
Here the parameters of the previously defined child queues are set. The
<tt>std</tt> queue is assigned a bandwidth of 50% of the root queue's
bandwidth (or 1Mbps) and is set as the default queue. The <tt>ssh</tt>
queue is assigned 25% of the root queue's bandwidth (500kb) and also
contains two child queues, <tt>ssh_login</tt> and
<tt>ssh_bulk</tt>. The <tt>ssh_login</tt> queue is given a higher
priority than <tt>ssh_bulk</tt> and both have ECN enabled.  The
<tt>ftp</tt> queue is assigned a bandwidth of 500Kbps and given a
priority of 3. It can also borrow bandwidth when extra is available and
has RED enabled. 

<p>
<b>NOTE:</b> Each child queue definition has its bandwidth specified.
Without specifying the bandwidth, PF will give the queue 100% of the
parent queue's bandwidth.
In this situation, that would cause an error when the rules are loaded
since if there's a queue with 100% of the bandwidth, no other queue can
be defined at that level since there is no free bandwidth to allocate to
it.

<h3 id="assign">Assigning Traffic to a Queue</h3>
<p>
To assign traffic to a queue, the <tt>queue</tt> keyword is used in
conjunction with PF's <a href="filter.html">filter rules</a>. For example,
consider a set of filtering rules containing a line such as:
<blockquote>
<tt>pass out on fxp0 proto tcp to port 22</tt>
</blockquote>

<p>
Packets matching that rule can be assigned to a specific queue by using
the <tt>queue</tt> keyword:
<blockquote>
<tt>pass out on fxp0 proto tcp to port 22 queue ssh</tt>
</blockquote>

<p>
When a state table entry is created by this rule, PF will record
the queue in the state table entry; this will be used for other packets
permitted by the entry:
<blockquote>
<tt>pass in on fxp0 proto tcp to port 80 queue http</tt>
</blockquote>
With this rule, packets traveling back out <tt>fxp0</tt> that match
the stateful connection will end up in the <tt>http</tt> queue.
Note that even though the <tt>queue</tt> keyword is being used
on a rule filtering incoming traffic, the goal is to specify a queue
for the corresponding outgoing traffic; the above rule does not queue
incoming packets.

<p>
When using the <tt>queue</tt> keyword with <tt>block</tt> directives, any
resulting TCP RST or ICMP Unreachable packets are assigned to the specified
queue.

<p>
Note that queue designation can happen on an interface other than the one
defined in the <tt>altq on</tt> directive:
<blockquote>
<tt> 
altq on fxp0 cbq bandwidth 2Mb queue { std, ftp }<br>
oldqueue std bandwidth 500Kb cbq(default)<br>
oldqueue ftp bandwidth 1.5Mb<br>
<br>
pass in on dc0 proto tcp to port 21 queue ftp<br>
</tt>
</blockquote>

<p>
Queueing is enabled on <tt>fxp0</tt> but the designation takes place
on <tt>dc0</tt>. 
If packets matching the <tt>pass</tt> rule (or the state created by
this rule) exit from interface <tt>fxp0</tt>, they will be queued in
the <tt>ftp</tt> queue. 
This type of queueing can be very useful on routers.

<p>
Normally only one queue name is given with the <tt>queue</tt> keyword,
but if a second name is specified that queue will be used for packets
with a <a href="http://www.rfc-editor.org/rfc/rfc791.txt">Type of
Service (ToS)</a> of low-delay and for TCP ACK packets with no data payload.
A good example of this is found when using SSH. SSH login sessions will
set the ToS to low-delay while SCP and SFTP sessions will not. PF can
use this information to queue packets belonging to a login connection in a
different queue than non-login connections. This can be useful to prioritize
login connection packets over file transfer packets.
<blockquote>
<tt>pass out on fxp0 from any to any port 22 queue(ssh_bulk, ssh_login)</tt>
</blockquote>

<p>
This assigns packets belonging to SSH login connections to the
<tt>ssh_login</tt> queue and packets belonging to SCP and SFTP
connections to the <tt>ssh_bulk</tt> queue. SSH login connections will
then have their packets processed ahead of SCP and SFTP connections
because the <tt>ssh_login</tt> queue has a higher priority.

<p>
Assigning TCP ACK packets to a higher priority queue is useful on
asymmetric connections, that is, connections that have different upload
and download bandwidths such as ADSL lines. With an ADSL line, if the
upload channel is being maxed out and a download is started, the
download will suffer because the TCP ACK packets it needs to
send will run into congestion when they try to pass through the upload
channel. Testing has shown that to achieve the best results, the
bandwidth on the upload queue should be set to a value less than what
the connection is capable of. For instance, if an ADSL line has a max
upload of 640Kbps, setting the root queue's <tt>bandwidth</tt> to a value
such as 600Kb should result in better performance. Trial and error will
yield the best <tt>bandwidth</tt> setting.

<h2 id="example1">Example #1: Small, Home Network</h2>
<pre>
  
    [ Alice ]    [ Charlie ]
        |             |                              ADSL
     ---+-----+-------+------ dc0 [ OpenBSD ] fxp0 -------- ( Internet )
              |
           [ Bob ]

</pre>

<p>
In this example, OpenBSD is being used on an Internet gateway for a small
home network with three workstations. The gateway is performing packet
filtering and NAT duties. The Internet connection is via an ADSL line
running at 2Mbps down and 640Kbps up.

<p>
The queueing policy for this network:
<ul>
<li>Reserve 80Kbps of download bandwidth for Bob so he can play his
online games without being lagged by Alice or Charlie's downloads. Allow
Bob to use more than 80Kbps when it's available.
<li>Interactive SSH and instant message traffic will have a higher
priority than regular traffic.
<li>DNS queries and replies will have the second highest priority.
<li>Outgoing TCP ACK packets will have a higher priority than all other
outgoing traffic.
</ul>

<p>
Below is the ruleset that meets this network policy. Note that only the
<tt>pf.conf</tt> directives that apply directly to the above policy are
present.

<p>
<table border=0 width="650">
<tr><td nowrap bgcolor="#EEEEEE">
<pre>
# enable queueing on the external interface to control traffic going to
# the Internet. use the priq scheduler to control only priorities. set
# the bandwidth to 610Kbps to get the best performance out of the TCP
# ACK queue.

altq on fxp0 priq bandwidth 610Kb queue { std_out, ssh_im_out, dns_out, \
	tcp_ack_out }

# define the parameters for the child queues.
# std_out      - the standard queue. any filter rule below that does not
#                explicitly specify a queue will have its traffic added
#                to this queue.
# ssh_im_out   - interactive SSH and various instant message traffic.
# dns_out      - DNS queries.
# tcp_ack_out  - TCP ACK packets with no data payload.

oldqueue std_out     priq(default)
oldqueue ssh_im_out  priority 4 priq(red)
oldqueue dns_out     priority 5
oldqueue tcp_ack_out priority 6

# enable queueing on the internal interface to control traffic coming in
# from the Internet. use the cbq scheduler to control bandwidth. max
# bandwidth is 2Mbps.

altq on dc0 cbq bandwidth 2Mb queue { std_in, ssh_im_in, dns_in, bob_in }

# define the parameters for the child queues.
# std_in      - the standard queue. any filter rule below that does not
#               explicitly specify a queue will have its traffic added
#               to this queue.
# ssh_im_in   - interactive SSH and various instant message traffic.
# dns_in      - DNS replies.
# bob_in      - bandwidth reserved for Bob's workstation. allow him to
#               borrow.

oldqueue std_in    bandwidth 1.6Mb cbq(default)
oldqueue ssh_im_in bandwidth 200Kb priority 4
oldqueue dns_in    bandwidth 120Kb priority 5
oldqueue bob_in    bandwidth 80Kb cbq(borrow)


# ... in the filtering section of pf.conf ...

alice         = "192.168.0.2"
bob           = "192.168.0.3"
charlie       = "192.168.0.4"
local_net     = "192.168.0.0/24"
ssh_ports     = "{ 22 2022 }"
im_ports      = "{ 1863 5190 5222 }"

# filter rules for fxp0 inbound
block in on fxp0 all

# filter rules for fxp0 outbound
block out on fxp0 all
pass  out on fxp0 inet proto tcp from (fxp0) queue(std_out, tcp_ack_out)
pass  out on fxp0 inet proto { udp icmp } from (fxp0)
pass  out on fxp0 inet proto { tcp udp } from (fxp0) to port domain \
	queue dns_out
pass  out on fxp0 inet proto tcp from (fxp0) to port $ssh_ports \
	queue(std_out, ssh_im_out)
pass  out on fxp0 inet proto tcp from (fxp0) to port $im_ports \
	queue(ssh_im_out, tcp_ack_out)

# filter rules for dc0 inbound
block in on dc0 all
pass  in on dc0 from $local_net

# filter rules for dc0 outbound
block out on dc0 all
pass  out on dc0 to $local_net
pass  out on dc0 proto { tcp udp } from port domain to $local_net \
	queue dns_in
pass  out on dc0 proto tcp from port $ssh_ports to $local_net \
	queue(std_in, ssh_im_in)
pass  out on dc0 proto tcp from port $im_ports to $local_net \
	queue ssh_im_in
pass  out on dc0 to $bob queue bob_in
</pre>
</td></tr>
</table>

<h2 id="example2">Example #2: Company Network</h2>
<pre>

  ( IT Dept )  [ Boss's PC ]
       |          |                                   T1
     --+----+-----+---------- dc0 [ OpenBSD ] fxp0 -------- ( Internet )
            |                         fxp1
         [ COMP1 ]    [ WWW ]         /
                         |           / 
                       --+----------' 

</pre>

<p>
In this example, the OpenBSD host is acting as a firewall for a company
network. The company runs a WWW server in the DMZ portion of their
network where customers upload their websites via FTP. The IT department
has their own subnet connected to the main network, and the boss has a PC
on his desk that's used for email and surfing the web. The connection to
the Internet is via a T1 line running at 1.5Mbps in both directions. All
other network segments are using Fast Ethernet (100Mbps).

<p>
The network administrator has decided on the following policy:
<ul>
<li>Limit all traffic between the WWW server and the Internet to 500Kbps in
each direction.
	<ul>
	<li>Allot 250Kbps to HTTP traffic.
	<li>Allot 250Kbps to "other" traffic (i.e., non-HTTP traffic)
	<li>Allow either queue to borrow up to the full 500Kbps.
	<li>Give HTTP traffic between the WWW server and the Internet a
	higher priority than other traffic between the WWW server and the
	Internet (such as FTP uploads).
	</ul>
<li>Traffic between the WWW server and the internal network can use up
to the full 100Mbps that the network offers.
<li>Reserve 500Kbps for the IT Dept network so they can download the
latest software updates in a timely manner. They should be able to use
more than 500Kbps when extra bandwidth is available.
<li>Give traffic between the boss's PC and the Internet a higher
priority than other traffic to/from the Internet.
</ul>

<p>
Below is the ruleset that meets this network policy. Note that only the
<tt>pf.conf</tt> directives that apply directly to the above policy are
present; <a href="nat.html"><tt>nat</tt></a>,
<a href="rdr.html"><tt>rdr</tt></a>, <a href="options.html">options</a>,
etc., are not shown.

<p>
<table border=0 width="650">
<tr><td nowrap bgcolor="#EEEEEE">
<pre>
# enable queueing on the external interface to queue packets going out
# to the Internet. use the cbq scheduler so that the bandwidth use of
# each queue can be controlled. the max outgoing bandwidth is 1.5Mbps.

altq on fxp0 cbq bandwidth 1.5Mb queue { std_ext, www_ext, boss_ext }

# define the parameters for the child queues.
# std_ext        - the standard queue. also the default queue for
#                  outgoing traffic on fxp0.
# www_ext        - container queue for WWW server queues. limit to
#                  500Kbps.
#   www_ext_http - http traffic from the WWW server; higher priority.
#   www_ext_misc - all non-http traffic from the WWW server.
# boss_ext       - traffic coming from the boss's computer.

oldqueue std_ext        bandwidth 500Kb cbq(default borrow)
oldqueue www_ext        bandwidth 500Kb { www_ext_http, www_ext_misc }
  oldqueue www_ext_http bandwidth 50% priority 3 cbq(red borrow)
  oldqueue www_ext_misc bandwidth 50% priority 1 cbq(borrow)
oldqueue boss_ext       bandwidth 500Kb priority 3 cbq(borrow)

# enable queueing on the internal interface to control traffic coming
# from the Internet or the DMZ. use the cbq scheduler to control the
# bandwidth of each queue. bandwidth on this interface is set to the
# maximum. traffic coming from the DMZ will be able to use all of this
# bandwidth while traffic coming from the Internet will be limited to
# 1.0Mbps (because 0.5Mbps (500Kbps) is being allocated to fxp1).

altq on dc0 cbq bandwidth 100% queue { net_int, www_int }

# define the parameters for the child queues.
# net_int    - container queue for traffic from the Internet. bandwidth
#              is 1.0Mbps.
#   std_int  - the standard queue. also the default queue for outgoing
#              traffic on dc0.
#   it_int   - traffic to the IT Dept network; reserve them 500Kbps.
#   boss_int - traffic to the boss's PC; assign a higher priority.
# www_int    - traffic from the WWW server in the DMZ; full speed.

oldqueue net_int    bandwidth 1.0Mb { std_int, it_int, boss_int }
  oldqueue std_int  bandwidth 250Kb cbq(default borrow)
  oldqueue it_int   bandwidth 500Kb cbq(borrow)
  oldqueue boss_int bandwidth 250Kb priority 3 cbq(borrow)
oldqueue www_int    bandwidth 99Mb cbq(red borrow)

# enable queueing on the DMZ interface to control traffic destined for
# the WWW server. cbq will be used on this interface since detailed
# control of bandwidth is necessary. bandwidth on this interface is set
# to the maximum. traffic from the internal network will be able to use
# all of this bandwidth while traffic from the Internet will be limited
# to 500Kbps.

altq on fxp1 cbq bandwidth 100% queue { internal_dmz, net_dmz }

# define the parameters for the child queues.
# internal_dmz   - traffic from the internal network.
# net_dmz        - container queue for traffic from the Internet.
#   net_dmz_http - http traffic; higher priority.
#   net_dmz_misc - all non-http traffic. this is also the default queue.

oldqueue internal_dmz   bandwidth 99Mb cbq(borrow)
oldqueue net_dmz        bandwidth 500Kb { net_dmz_http, net_dmz_misc }
  oldqueue net_dmz_http bandwidth 50% priority 3 cbq(red borrow)
  oldqueue net_dmz_misc bandwidth 50% priority 1 cbq(default borrow)


# ... in the filtering section of pf.conf ...

main_net  = "192.168.0.0/24"
it_net    = "192.168.1.0/24"
int_nets  = "{ 192.168.0.0/24, 192.168.1.0/24 }"
dmz_net   = "10.0.0.0/24"

boss      = "192.168.0.200"
wwwserv   = "10.0.0.100"

# default deny
block on { fxp0, fxp1, dc0 } all

# filter rules for fxp0 inbound
pass in on fxp0 proto tcp from any to $wwwserv port { 21, \
	&gt; 49151 } queue www_ext_misc
pass in on fxp0 proto tcp from any to $wwwserv port 80 queue www_ext_http

# filter rules for fxp0 outbound
pass out on fxp0 from $int_nets
pass out on fxp0 from $boss queue boss_ext

# filter rules for dc0 inbound
pass in on dc0 from $int_nets
pass in on dc0 from $it_net queue it_int
pass in on dc0 from $boss queue boss_int
pass in on dc0 proto tcp from $int_nets to $wwwserv port { 21, 80, \
	&gt; 49151 } queue www_int

# filter rules for dc0 outbound
pass out on dc0 from dc0 to $int_nets

# filter rules for fxp1 inbound
pass in on fxp1 proto { tcp, udp } from $wwwserv to port 53

# filter rules for fxp1 outbound
pass out on fxp1 proto tcp to $wwwserv port { 21, \
	&gt; 49151 } queue net_dmz_misc
pass out on fxp1 proto tcp to $wwwserv port 80 queue net_dmz_http
pass out on fxp1 proto tcp from $int_nets to $wwwserv port { 80, \
	21, &gt; 49151 } queue internal_dmz
</pre>
</td></tr>
</table>

<p>
</body>
</html> 
@


1.62
log
@page titles and <title> should be the same.
@
text
@@


1.61
log
@tweak [faq index] button and sync the pf user's guide with that style.
@
text
@d4 1
a4 1
<title>PF - Packet Queueing and Prioritization</title>
@


1.60
log
@use short form man links in the faq and fix a few broken links
@
text
@a29 2
<!-- Passes validator.w3.org, please keep it this way;
please, use a max of 72 chars per line -->
d35 3
a39 5
<p>
[<a href="index.html">Contents</a>]
[<a href="anchors.html">Previous: Anchors</a>]
[<a href="pools.html">Next: Address Pools and Load Balancing</a>]
<p>
a40 1
<h3>Table of Contents</h3>
d42 2
a43 2
<li><a href="#queueing">Queueing</a>
<li><a href="#sched">Schedulers</a>
d45 1
a45 1
	<li><a href="#cbq">Class Based Queueing</a>
d47 2
a48 2
	<li><a href="#red">Random Early Detection</a>
	<li><a href="#ecn">Explicit Congestion Notification</a>
d50 4
a53 4
<li><a href="#altq">Configuring Queueing</a>
<li><a href="#assign">Assigning Traffic to a Queue</a>
<li><a href="#example1">Example #1: Small, Home Network</a>
<li><a href="#example2">Example #2: Company Network</a>
a856 5

<p>
[<a href="anchors.html">Previous: Anchors</a>]
[<a href="index.html">Contents</a>]
[<a href="pools.html">Next: Address Pools and Load Balancing</a>]
@


1.59
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d69 1
a69 1
<a href="http://man.openbsd.org/?query=pf.conf&amp;sektion=5">pf.conf(5)</a>
d347 1
a347 1
<a href="http://man.openbsd.org/?query=pf.conf&amp;sektion=5"
@


1.58
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d4 1
a4 1
<title>PF: Packet Queueing and Prioritization</title>
d33 1
d35 4
a38 2
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif" border="0">
</a>
d40 1
a41 1
[<a href="index.html">Contents</a>]
a42 1

a43 4
<h1><font color="#e00000">PF: Packet Queueing and Prioritization</font></h1>


<hr>
@


1.57
log
@fix URIs, the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@d7 2
@


1.56
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d69 1
a69 1
<a href="http://man.openbsd.org?query=pf.conf&amp;sektion=5">pf.conf(5)</a>
d347 1
a347 1
<a href="http://man.openbsd.org?query=pf.conf&amp;sektion=5"
@


1.55
log
@
rev for 5.8, mostly removing manpath part of man page urls
@
text
@d69 1
a69 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5">pf.conf(5)</a>
d347 1
a347 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5"
@


1.54
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d69 1
a69 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.7">pf.conf(5)</a>
d347 1
a347 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.7"
@


1.53
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@a5 1
<meta name="resource-type" content="document">
a6 2
<meta name="keywords"      content="openbsd,faq,pf">
<meta name="distribution"  content="global">
@


1.52
log
@
updates for 5.7
@
text
@d10 1
@


1.51
log
@
5.5->5.6 which I forgot and Jonathan Thornburg (jthorn at astro dot
indiana dot edu) reminded me of, but also sent a diff for, thanks!
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.6">pf.conf(5)</a>
d349 1
a349 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.6"
@


1.50
log
@Convert the pf faq to use id="" instead of "a name=""></a>.
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.5">pf.conf(5)</a>
d349 1
a349 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.5"
@


1.49
log
@s/queue/oldqueue/ in rules so the examples here at least apply in 5.5,
and add a "WARNING: This document is currently out-of-date" section.
@
text
@d74 1
a74 2
<a name="queueing"></a>
<h2>Queueing</h2>
d105 1
a105 2
<a name="sched"></a>
<h2>Schedulers</h2>
d121 1
a121 2
<a name="cbq"></a>
<h3>Class Based Queueing</h3>
d237 1
a237 2
<a name="priq"></a>
<h3>Priority Queueing</h3>
d275 1
a275 2
<a name="red"></a>
<h3>Random Early Detection</h3>
d321 1
a321 2
<a name="ecn"></a>
<h3>Explicit Congestion Notification</h3>
d333 1
a333 2
<a name="altq"></a>
<h2>Configuring Queueing</h2>
d486 1
a486 2
<a name="assign"></a>
<h3>Assigning Traffic to a Queue</h3>
d577 1
a577 2
<a name="example1"></a>
<h2>Example #1: Small, Home Network</h2>
d699 1
a699 2
<a name="example2"></a>
<h2>Example #2: Company Network</h2>
@


1.48
log
@
update for 5.5
@
text
@d65 9
d362 1
a362 1
<li><tt>queue</tt> - defines the properties of a child queue
d405 1
a405 1
The syntax for the <tt>queue</tt> directive is:
d408 1
a408 1
queue <i>name</i> [on <i>interface</i>] bandwidth <i>bw</i> [priority 
d464 5
a468 5
queue std bandwidth 50% cbq(default)<br>
queue ssh bandwidth 25% { ssh_login, ssh_bulk }<br>
&nbsp;&nbsp;queue ssh_login bandwidth 25% priority 4 cbq(ecn)<br>
&nbsp;&nbsp;queue ssh_bulk  bandwidth 75% cbq(ecn)<br>
queue ftp bandwidth 500Kb priority 3 cbq(borrow red)<br>
d535 2
a536 2
queue std bandwidth 500Kb cbq(default)<br>
queue ftp bandwidth 1.5Mb<br>
d641 4
a644 4
queue std_out     priq(default)
queue ssh_im_out  priority 4 priq(red)
queue dns_out     priority 5
queue tcp_ack_out priority 6
d661 4
a664 4
queue std_in    bandwidth 1.6Mb cbq(default)
queue ssh_im_in bandwidth 200Kb priority 4
queue dns_in    bandwidth 120Kb priority 5
queue bob_in    bandwidth 80Kb cbq(borrow)
d779 5
a783 5
queue std_ext        bandwidth 500Kb cbq(default borrow)
queue www_ext        bandwidth 500Kb { www_ext_http, www_ext_misc }
  queue www_ext_http bandwidth 50% priority 3 cbq(red borrow)
  queue www_ext_misc bandwidth 50% priority 1 cbq(borrow)
queue boss_ext       bandwidth 500Kb priority 3 cbq(borrow)
d803 5
a807 5
queue net_int    bandwidth 1.0Mb { std_int, it_int, boss_int }
  queue std_int  bandwidth 250Kb cbq(default borrow)
  queue it_int   bandwidth 500Kb cbq(borrow)
  queue boss_int bandwidth 250Kb priority 3 cbq(borrow)
queue www_int    bandwidth 99Mb cbq(red borrow)
d824 4
a827 4
queue internal_dmz   bandwidth 99Mb cbq(borrow)
queue net_dmz        bandwidth 500Kb { net_dmz_http, net_dmz_misc }
  queue net_dmz_http bandwidth 50% priority 3 cbq(red borrow)
  queue net_dmz_misc bandwidth 50% priority 1 cbq(default borrow)
@


1.47
log
@
www@@ removal, normalize footers.
@
text
@d347 1
a347 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.4"
@


1.46
log
@
update for 5.4
@
text
@a4 1
<link rev="made" href="mailto:www@@openbsd.org">
a871 6
<hr>
<a href="index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a> 
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>$OpenBSD: queueing.html,v 1.45 2013/05/01 13:21:45 nick Exp $</small>

@


1.45
log
@
updates for 5.3
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.3"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.44 2012/11/01 15:06:36 nick Exp $</small>
@


1.44
log
@
enter 5.2
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.2"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.43 2012/05/11 11:20:04 nick Exp $</small>
@


1.43
log
@
forgot to actually COMMIT these 5.1 changes.  *sigh*
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.1"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.42 2011/11/02 01:01:47 nick Exp $</small>
@


1.42
log
@
rev man page references to 5.0
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+5.0"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.41 2011/05/01 12:57:11 nick Exp $</small>
@


1.41
log
@
updates for 4.9
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.9"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.40 2010/11/01 09:53:51 nick Exp $</small>
@


1.40
log
@
update to 4.8
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.8"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.39 2010/05/19 13:25:16 sthen Exp $</small>
@


1.39
log
@Update the PF faq for 4.7 changes.
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.7"
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.38 2009/10/16 19:12:42 nick Exp $</small>
@


1.38
log
@
quick update for 4.6.  much more is needed, at least scrub.html is
currently dead wrong, so I've unlinked it from the rest for now.
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.6"
d492 1
a492 1
<tt>pass out on fxp0 from any to any port 22</tt>
d499 1
a499 1
<tt>pass out on fxp0 from any to any port 22 queue ssh</tt>
d503 14
d530 1
a530 1
pass in on dc0 from any to any port 21 queue ftp<br>
d537 3
a539 2
If packets matching the <tt>pass</tt> rule exit from interface 
<tt>fxp0</tt>, they will be queued in the <tt>ftp</tt> queue. 
a576 18
<p>
When using the <tt>queue</tt> keyword with rules that <tt>keep
state</tt> such as:
<blockquote>
<tt>
pass in on fxp0 proto tcp from any to any port 22 flags S/SA \<br>
&nbsp;&nbsp;&nbsp;keep state queue ssh
</tt>
</blockquote>

<p>
PF will record the queue in the state table entry so that packets
traveling back out <tt>fxp0</tt> that match the stateful connection will
end up in the <tt>ssh</tt> queue. Note that even though the <tt>queue</tt>
keyword is being used on a rule filtering incoming traffic, the goal is
to specify a queue for the corresponding outgoing traffic; the above
rule does not queue incoming packets.

d611 1
a611 3
present; <a href="nat.html"><tt>nat</tt></a>,
<a href="rdr.html"><tt>rdr</tt></a>, <a href="options.html">options</a>,
etc., are not shown.
d673 8
a680 9
pass  out on fxp0 inet proto tcp from (fxp0) to any flags S/SA \
	keep state queue(std_out, tcp_ack_out)
pass  out on fxp0 inet proto { udp icmp } from (fxp0) to any keep state
pass  out on fxp0 inet proto { tcp udp } from (fxp0) to any port domain \
	keep state queue dns_out
pass  out on fxp0 inet proto tcp from (fxp0) to any port $ssh_ports \
	flags S/SA keep state queue(std_out, ssh_im_out)
pass  out on fxp0 inet proto tcp from (fxp0) to any port $im_ports \
	flags S/SA keep state queue(ssh_im_out, tcp_ack_out)
d688 2
a689 2
pass  out on dc0 from any to $local_net
pass  out on dc0 proto { tcp udp } from any port domain to $local_net \
d691 1
a691 1
pass  out on dc0 proto tcp from any port $ssh_ports to $local_net \
d693 1
a693 1
pass  out on dc0 proto tcp from any port $im_ports to $local_net \
d695 1
a695 1
pass  out on dc0 from any to $bob queue bob_in
d837 2
a838 3
	&gt; 49151 } flags S/SA keep state queue www_ext_misc
pass in on fxp0 proto tcp from any to $wwwserv port 80 \
	flags S/SA keep state queue www_ext_http
d841 2
a842 2
pass out on fxp0 from $int_nets to any keep state
pass out on fxp0 from $boss to any keep state queue boss_ext
d845 3
a847 3
pass in on dc0 from $int_nets to any keep state
pass in on dc0 from $it_net to any queue it_int
pass in on dc0 from $boss to any queue boss_int
d849 1
a849 1
	&gt; 49151 } flags S/SA keep state queue www_int
d855 1
a855 2
pass in on fxp1 proto { tcp, udp } from $wwwserv to any port 53 \
	keep state
d858 3
a860 4
pass out on fxp1 proto tcp from any to $wwwserv port { 21, \
	&gt; 49151 } flags S/SA keep state queue net_dmz_misc
pass out on fxp1 proto tcp from any to $wwwserv port 80 \
	flags S/SA keep state queue net_dmz_http
d862 1
a862 1
	21, &gt; 49151 } flags S/SA keep state queue internal_dmz
d877 1
a877 1
<small>$OpenBSD: queueing.html,v 1.37 2009/04/30 17:27:31 nick Exp $</small>
@


1.37
log
@
updates for 4.5
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.5"
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.36 2009/01/25 18:09:49 jasper Exp $</small>
@


1.36
log
@- fix a bunch of tyop's

from Tom Van Looy, thanks!
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.4"
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.35 2008/10/31 16:49:34 nick Exp $</small>
@


1.35
log
@
update numbers for 4.4
@
text
@d423 1
a423 1
If not specified, the default is 100% of the parent queue's bandwith.
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.34 2008/07/27 17:13:47 nick Exp $</small>
@


1.34
log
@
PF updates for 4.3..which got missed a few times.
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.3"
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.33 2007/11/01 02:57:56 joel Exp $</small>
@


1.33
log
@Updates for OpenBSD 4.2
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.2"
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.32 2007/05/07 01:13:53 joel Exp $</small>
@


1.32
log
@Updates for OpenBSD 4.1
@
text
@d348 1
a348 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.1"
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.31 2007/05/06 18:59:54 nick Exp $</small>
@


1.31
log
@
manpath changes to:
  4.1 for PF related items
  removed for non-PF-related items, which will probably either not
    change much, or benefit from the newest, best man pages.
@
text
@d235 1
a235 1
interface with each queue being given a unique priority level. A queue
d238 2
d886 1
a886 1
<small>$OpenBSD: queueing.html,v 1.30 2006/11/01 01:56:01 joel Exp $</small>
@


1.30
log
@Updates for OpenBSD 4.0. uRPF, tftp-proxy, more ftp-proxy, etc.
Thanks to mcbride for the bits about interface groups
@
text
@d346 1
a346 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d884 1
a884 1
<small>$OpenBSD: queueing.html,v 1.29 2006/05/01 00:54:29 nick Exp $</small>
@


1.29
log
@
3.9 updates, mostly rev'ing man page links
@
text
@d346 1
a346 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d884 1
a884 1
<small>$OpenBSD: queueing.html,v 1.28 2005/11/01 11:35:18 nick Exp $</small>
@


1.28
log
@
bump manpath= tag for 3.8
@
text
@d346 1
a346 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d884 1
a884 1
<small>$OpenBSD: queueing.html,v 1.27 2005/05/20 00:12:02 joel Exp $</small>
@


1.27
log
@Updates for OpenBSD 3.7.
@
text
@d346 1
a346 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d884 1
a884 1
<small>$OpenBSD: queueing.html,v 1.26 2005/02/25 04:12:30 joel Exp $</small>
@


1.26
log
@Make it clear that queue definitions must include 'bandwidth' or else
the queue will default to 100% bandwidth. Explain how this can cause an
error if multiple queues are defined and one or more doesn't have
'bandwidth' set. Fix all example rules to comply with this behavior.
While here, tidy up the examples a bit.

Pointed out by jmc@@
@
text
@d346 1
a346 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.6"
d884 1
a884 1
<small>$OpenBSD: queueing.html,v 1.25 2005/02/07 05:56:39 joel Exp $</small>
@


1.25
log
@Sync next/previous navigation links with changes to anchors.html. Adjust
copyright date while here.

ok nick@@
@
text
@d421 1
d455 3
a457 3
queue ssh { ssh_login, ssh_bulk }<br>
&nbsp;&nbsp;queue ssh_login  priority 4 cbq(ecn)<br>
&nbsp;&nbsp;queue ssh_bulk   cbq(ecn)<br>
d466 2
a467 1
queue defines two child queues, <tt>ssh_login</tt> and
d474 9
d511 1
a511 1
queue std cbq(default)<br>
d656 3
a658 3
queue std_in    cbq(default)
queue ssh_im_in priority 4
queue dns_in    priority 5
d730 1
a730 1
<li>Limit traffic between the WWW server and the Internet to 500Kbps in
d732 10
a741 5
<li>No bandwidth limit on traffic between the WWW server and the
internal network.
<li>Give HTTP traffic between the WWW server and the Internet a higher
priority than other traffic between the WWW server and the Internet
(such as FTP uploads).
d771 3
a773 3
#   www_ext_http - http traffic from the WWW server
#   www_ext_misc - all non-http traffic from the WWW server
# boss_ext       - traffic coming from the boss's computer
d775 1
a775 1
queue std_ext        cbq(default)
d777 3
a779 3
  queue www_ext_http priority 3 cbq(red)
  queue www_ext_misc priority 1
queue boss_ext       priority 3
d795 3
a797 3
#   it_int   - traffic to the IT Dept network.
#   boss_int - traffic to the boss's PC.
# www_int    - traffic from the WWW server in the DMZ.
d800 1
a800 1
  queue std_int  cbq(default)
d802 2
a803 2
  queue boss_int priority 3
queue www_int    cbq(red)
d817 1
a817 1
#   net_dmz_http - http traffic.
d820 1
a820 1
queue internal_dmz      # no special settings needed
d822 2
a823 2
  queue net_dmz_http priority 3 cbq(red)
  queue net_dmz_misc priority 1 cbq(default)
d884 1
a884 1
<small>$OpenBSD: queueing.html,v 1.24 2004/12/22 04:28:16 david Exp $</small>
@


1.24
log
@make small title logo a link back to main page; ok nick@@
@
text
@d14 1
a14 1
Copyright (c) 2003, 2004 Joel Knight <enabled@@myrealbox.com>
d38 1
a38 1
[<a href="anchors.html">Previous: Anchors and Named (Sub) Rulesets</a>]
d859 1
a859 1
[<a href="anchors.html">Previous: Anchors and Named (Sub) Rulesets</a>]
d868 1
a868 1
<small>$OpenBSD: queueing.html,v 1.23 2004/10/29 17:22:57 nick Exp $</small>
@


1.23
log
@
Update for 3.6
@
text
@d34 3
a36 1
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif">
d868 1
a868 1
<small>$OpenBSD: queueing.html,v 1.22 2004/06/21 17:48:32 saad Exp $</small>
@


1.22
log
@better wording, piped through Joel Knight, and ok nick@@
@
text
@d344 1
a344 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.5"
d866 1
a866 1
<small>$OpenBSD: queueing.html,v 1.21 2004/06/11 20:26:53 saad Exp $</small>
@


1.21
log
@formatting typo. ok nick@@
@
text
@d100 1
a100 1
queue works like the line-up at a supermarket or a bank -- the first
d102 3
a104 2
are added to the end of the queue. If the queue becomes full, newly
arriving packets are dropped.  This is known as tail-drop.
d866 1
a866 1
<small>$OpenBSD: queueing.html,v 1.20 2004/05/07 01:55:24 nick Exp $</small>
@


1.20
log
@
Add an OpenBSD license to the PF User's Guide.
Concept and breakdown of copyrights agreed to by Joel Knight and myself,
license assistance millert@@, ok deraadt@@.
@
text
@d189 1
a189 1
<tt>UserA</tt> queue is less than 1Mbps (because the ssh queue is using
d865 1
a865 1
<small>$OpenBSD: queueing.html,v 1.19 2004/04/30 18:00:25 nick Exp $</small>
@


1.19
log
@
PF User's Guide updates for OpenBSD 3.5.
Work done by Joel Knight (enabled et myrealbox.dit com), many, many thanks
to him for providing and maintaining some darned good docs.
@
text
@a10 1
<meta name="copyright"     content="This document copyright 2003-2004 by OpenBSD.">
d13 17
d865 1
a865 1
<small>$OpenBSD: queueing.html,v 1.18 2004/01/19 00:21:29 nick Exp $</small>
@


1.18
log
@
Missing space.  Spotted by Andreas Semborg (dostro at ondska dot com), thanks!
@
text
@d327 1
a327 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.4"
d849 1
a849 1
<small>$OpenBSD: queueing.html,v 1.17 2004/01/01 04:16:17 nick Exp $</small>
@


1.17
log
@
Bump copyright to 2004
@
text
@d490 1
a490 1
on<tt>dc0</tt>. 
d849 1
a849 1
<small>$OpenBSD: queueing.html,v 1.16 2003/12/12 04:21:14 nick Exp $</small>
@


1.16
log
@
wording error, fixed by Joel Knight, pointed out by Peter Gilman
(pgilman at p3t3 dot net), in one probably the nicest "you made an error"
notes I've ever received.  Thanks! 8)
@
text
@d11 1
a11 1
<meta name="copyright"     content="This document copyright 2003 by OpenBSD.">
d849 1
a849 1
<small>$OpenBSD: queueing.html,v 1.15 2003/12/11 14:35:47 nick Exp $</small>
@


1.15
log
@
Cosmetic change, from Joel Knight.
@
text
@d395 2
a396 1
<li><tt><i>bw</i></tt> - the total amount of bandwidth available to the scheduler.
d400 1
a400 1
<tt><i>interface</i></tt> bandwidth.
d849 1
a849 1
<small>$OpenBSD: queueing.html,v 1.14 2003/11/27 15:08:25 nick Exp $</small>
@


1.14
log
@
Major update to the PF FAQ from "Mr. PF FAQ", Joel Knight.  THANKS!
@
text
@d367 1
d369 1
d848 1
a848 1
<small>$OpenBSD: queueing.html,v 1.13 2003/11/09 23:29:02 nick Exp $</small>
@


1.13
log
@
Update of PF User's Guide to 3.4.  Ok, really just pointing the man page
links at the 3.4-release man pages rather than the 3.3-release man pages.
Work by Joel Knight.
@
text
@d4 1
a4 1
<title>PF: Queueing</title>
d20 1
a20 1
[<a href="scrub.html">Previous: Scrub</a>]
d22 1
a22 1
[<a href="nat.html">Next: Network Address Translation</a>]
d25 1
a25 1
<h1><font color="#e00000">PF: Queueing</font></h1>
d210 2
a211 2
For a more detailed look at the theory behind CBQ, please visit
<a href="http://www.icir.org/floyd/cbq.html">this website</a>.
d294 2
a295 2
For a more detailed look at the theory behind RED, please visit
<a href="http://www.icir.org/floyd/red.html">this website</a>.
d322 2
a323 2
work. Instructions on how to enable PF can be found in the 
<a href="config.html#activate">configuration section</a>.
d328 1
a328 1
>/etc/pf.conf</a></tt>. There are two types of directives that are used
d369 1
a369 1
This enables CBQ on the fxp0 interface. The total bandwidth available is
d377 2
a378 2
queue <i>name</i> bandwidth <i>bw</i> priority <i>pri</i> qlimit
<i>qlim</i> \<br>
d390 3
d398 1
d473 1
a473 1
Note that queue tagging can happen on an interface other than the one
d486 5
a490 4
Queueing is enabled on fxp0 but the tagging takes place on dc0. If 
packets matching the <tt>pass</tt> rule exit from interface fxp0, they
will be queued in the <tt>ftp</tt> queue. This type of queueing can be
very useful on routers.
d539 1
a539 1
traveling back out fxp0 that match the stateful connection will
d837 1
a837 1
[<a href="scrub.html">Previous: Scrub</a>]
d839 1
a839 1
[<a href="nat.html">Next: Network Address Translation</a>]
d846 1
a846 1
<small>$OpenBSD: queueing.html,v 1.12 2003/09/22 02:29:03 nick Exp $</small>
@


1.12
log
@
From Joel Knight: changes formatting so that all keywords are
in <i>, all literals are in <tt>, etc.  Excess man page links removed.
No words were changed.
@
text
@d327 1
a327 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3"
d841 1
a841 1
<small>$OpenBSD: queueing.html,v 1.11 2003/09/16 01:23:49 nick Exp $</small>
@


1.11
log
@
Grammar and punctuation clean up, from Joel Knight.
Only a very few words changed.
@
text
@d121 2
d150 2
d170 9
a178 6
If traffic in the ftp queue exceeds 900Kbps and traffic in the UserA
queue is less than 1Mbps (because the ssh queue is using less than its
assigned 100Kbps), the ftp queue will borrow the excess bandwidth from
UserA.  In this way the ftp queue is able to use more than its assigned
bandwidth when it faces overload.  When the ssh queue increases its
load, the borrowed bandwidth will be returned.
d197 11
a207 8
CBQ will process the UserA and UserB queues in a round-robin fashion --
neither queue will be preferred over the other. During the time when the
UserA queue is being processed, CBQ will also process its child queues.
In this case, the ssh queue has a higher priority and will be given
preferential treatment over the ftp queue if the network is congested.
Note how the ssh and ftp queues do not have their priorities compared to
the UserA and UserB queues because they are not all on the same branch
in the hierarchy.
d233 2
d352 4
a355 3
This may be specified as an absolute value using the suffixes b, Kb, Mb,
and Gb to represent bits, kilobits, megabits, and gigabits per second,
respectively or as a percentage of the <tt><i>interface</i></tt> bandwidth.
d364 1
d370 2
a371 1
set to 2Mbps. Three child queues are defined: std, ssh, and ftp.
d391 4
a394 3
This may be specified as an absolute value using the suffixes b, Kb, Mb,
and Gb to represent bits, kilobits, megabits, and gigabits per second,
respectively or as a percentage of the <tt><i>interface</i></tt> bandwidth.
d423 1
d427 2
a428 2
queue std          bandwidth 50% cbq(default)<br>
queue ssh          { ssh_login, ssh_bulk }<br>
d431 1
a431 1
queue ftp          bandwidth 500Kb priority 3 cbq(borrow red)<br>
d437 8
a444 6
std queue is assigned a bandwidth of 50% of the root queue's bandwidth
(or 1Mbps) and is set as the default queue. The ssh queue defines two
child queues, ssh_login and ssh_bulk. Ssh_login is given a higher
priority than ssh_bulk and both have ECN enabled.  The FTP queue is
assigned a bandwidth of 500Kbps and given a priority of 3. It can also
borrow bandwidth when extra is available and has RED enabled. 
d502 5
a506 5
This assigns packets belonging to SSH login connections to the ssh_login
queue and packets belonging to SCP and SFTP connections to the ssh_bulk
queue. SSH login connections will then have their packets processed
ahead of SCP and SFTP connections because the ssh_login queue has a
higher priority.
d535 1
a535 1
end up in the ssh queue. Note that even though the <tt>queue</tt>
d574 3
a576 2
present; <a href="nat.html">NAT</a>, <a href="rdr.html">RDR</a>,
<a href="options.html">options</a>, etc., are not shown.
d709 3
a711 2
present; <a href="nat.html">NAT</a>, <a href="rdr.html">RDR</a>,
<a href="options.html">options</a>, etc., are not shown.
d841 1
a841 1
<small>$OpenBSD: queueing.html,v 1.10 2003/06/13 02:54:08 nick Exp $</small>
@


1.10
log
@
Improved wrapping of man page links, renders better on some browsers.
No words altered.  From Joel Knight.
@
text
@d53 1
a53 1
host they enter a queue where they await processing by the operating
d59 1
a59 1
processed before the FTP packets because of the time sensitive nature
d61 1
a61 1
is expected but an FTP transfer being delayed by a few extra
d83 1
a83 1
By default OpenBSD uses a First In First Out (FIFO) scheduler. A FIFO
d168 1
a168 1
assigned 100Kbps) the ftp queue will borrow the excess bandwidth from
d200 1
a200 1
For a more detailed look at the theory behind CBQ please visit
d282 1
a282 1
For a more detailed look at the theory behind RED please visit
d295 1
a295 1
For more information on ECN please refer to 
d381 1
a381 1
Priority 0 is the lowest priority. When not specified a default of 1 is
d384 1
a384 1
When not specified a default of 50 is used.
d398 1
a398 1
	this queue. <tt>ecn</tt> implies <tt>red</tt>.
d430 1
a430 1
To assign traffic to a queue the <tt>queue</tt> keyword is used in
d446 1
a446 1
resulting TCP RST or ICMP unreachable packets are assigned to the specified
d469 1
a469 1
Normally only one queue name is given with the <tt>queue</tt> keyword
d555 2
a556 2
present -- <a href="nat.html">NAT</a>, <a href="rdr.html">RDR</a>,
<a href="options.html">options</a>, etc are not shown.
d689 2
a690 2
present -- <a href="nat.html">NAT</a>, <a href="rdr.html">RDR</a>,
<a href="options.html">options</a>, etc are not shown.
d820 1
a820 1
<small>$OpenBSD: queueing.html,v 1.9 2003/06/12 03:30:24 nick Exp $</small>
@


1.9
log
@
From maintainer, Joel Knight:
- point out that RED should only be used to queue TCP and not UDP/ICMP
- fix examples to follow this behavior.
This was pointed out by Mike Pennington (mikepenn11 at hotmail dot com)
@
text
@d301 2
a302 2
<a href="http://www.csl.sony.co.jp/person/kjc/kjc/software.html#ALTQ">
Alternate Queueing (ALTQ)</a> queueing implementation has been a part of
d315 2
a316 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.conf&amp;sektion=5&amp;manpath=OpenBSD+3.3">
/etc/pf.conf</a></tt>. There are two types of directives that are used
d820 1
a820 1
<small>$OpenBSD: queueing.html,v 1.8 2003/05/22 17:23:49 nick Exp $</small>
@


1.8
log
@
Revisions, from Joel Knight.
@
text
@d276 6
d578 1
a578 1
queue std_out     priq(red default)
d580 2
a581 2
queue dns_out     priority 5 priq(red)
queue tcp_ack_out priority 6 priq(red)
d756 1
a756 1
queue internal_dmz   cbq(red)
d820 1
a820 1
<small>$OpenBSD: queueing.html,v 1.7 2003/05/15 03:03:54 nick Exp $</small>
@


1.7
log
@
Table of Contents now on each page.  Work by Joel Knight (yay! Joel! 8-).
@
text
@d644 1
a644 1
  ( IT Dept )  [ WWW ]
d646 5
a650 3
     --+---+------+----+----- dc0 [ OpenBSD ] fxp0 -------- ( Internet )
           |           |  
     ( Sales Dept )  [ Boss's PC ]
d653 9
a661 8
In this network the OpenBSD host is the gateway to the Internet for a
company network. The gateway is performing packet filtering duties.
The company runs a WWW server on their network where
their customers upload their websites via FTP.  The company has also
segregated their IT and Sales departments into their own sub networks.
The boss has a PC on his desk connected to the network so he can surf
the web. The connection to the Internet is via a T1 line running at
1.5Mbps in both directions.
d666 7
a672 11
<li>Limit total traffic to and from the WWW server to a maximum of
500Kbps in each direction.
	<ul>
	<li>Limit FTP traffic going to the WWW server to 250Kbps. FTP
	traffic should be able to borrow bandwidth when it's available.
	<li>Limit all other traffic going to the WWW server to 250Kbps. It
	should also be able to borrow bandwidth and have a higher priority
	than the FTP traffic.
	</ul>
<li>Limit traffic destined for the Sales Dept network to a maximum of
200Kbps as they are known to be bandwidth hogs.
d676 2
a677 2
<li>Give traffic to and from the boss's PC a higher priority than
regular traffic.
d694 25
a718 1
altq on fxp0 cbq bandwidth 1.5Mb queue { std_out, wwwserv_out, boss_out }
d721 20
a740 13
# std_out      - the standard queue. any filter rule below that does not
#                explicitly specify a queue will have its traffic added
#                to this queue.
# wwwserv_out  - outgoing traffic from the WWW server
# boss_out     - traffic coming from the boss's computer

queue std_out      cbq(default)
queue wwwserv_out  bandwidth 500Kb
queue boss_out     priority 3

# enable queueing on the internal interface to control traffic coming in
# from the Internet. again we'll use the cbq scheduler so we can control
# the bandwidth of each queue. maximum incoming bandwidth is 1.5Mbps.
d742 1
a742 2
altq on dc0 cbq bandwidth 1.5Mb queue { std_in, wwwserv_in, sales_in, \
	it_in, boss_in }
d745 9
a753 21
# std_in            - the standard queue. any filter rule below that does not
#                     explicitly specify a queue will have its traffic added
#                     to this queue.
# wwwserv_in        - container queue for WWW server traffic.
#   wwwserv_ftp_in  - FTP traffic destined for the WWW server. use RED
#                     to help avoid congestion.
#   wwwserv_misc_in - all other traffic destined for the WWW server. use
#                     RED to help avoid congestion.
# sales_in          - traffic to the Sales Dept network. use RED to help 
#                     avoid congestion.
# it_in             - traffic to the IT Dept network. use RED to help avoid
#                     congestion.
# boss_in           - traffic to the boss's PC.

queue std_in            cbq(default)
queue wwwserv_in        bandwidth 500Kb { wwwserv_misc_in, wwwserv_ftp_in }
  queue wwwserv_misc_in bandwidth 250Kb priority 4 cbq(red borrow)
  queue wwwserv_ftp_in  bandwidth 250Kb cbq(red borrow)
queue sales_in          bandwidth 200Kb cbq(red)
queue it_in             bandwidth 500Kb cbq(red borrow)
queue boss_in           priority 3
d759 4
a762 3
sales_net = "192.168.1.0/24"
it_net    = "192.168.2.0/24"
wwwserv   = "192.168.0.100"
d764 4
a767 1
all_nets  = "{ 192.168.0.0/24, 192.168.1.0/24, 192.168.2.0/24 }"
d770 4
a773 3
block in on fxp0 all
pass  in on fxp0 proto tcp from any to $wwwserv port { http ftp } \
	flags S/SA keep state queue wwwserv_out
d776 2
a777 4
block out on fxp0 all
pass  out on fxp0 proto tcp from $all_nets to any flags S/SA keep state
pass  out on fxp0 proto { udp icmp } from $all_nets to any keep state
pass  out on fxp0 from $boss to any keep state queue boss_out
d780 5
a784 2
block in on dc0 all
pass  in on dc0 from $all_nets
d787 13
a799 7
block out on dc0 all
pass  out on dc0 from any to $all_nets 
pass  out on dc0 from any to $wwwserv queue wwwserv_misc_in
pass  out on dc0 proto tcp from any to $wwwserv port ftp queue wwwserv_ftp_in
pass  out on dc0 from any to $it_net queue it_in
pass  out on dc0 from any to $sales_net queue sales_in
pass  out on dc0 from any to $boss queue boss_in
d814 1
a814 1
<small>$OpenBSD: queueing.html,v 1.6 2003/05/09 02:37:15 nick Exp $</small>
@


1.6
log
@
were -&gt; where, spotted by cloder@@
@
text
@d30 19
d422 1
a422 1
<h3>Assigning Traffic To a Queue</h3>
d515 2
a516 2
<a name="ex1"></a>
<h2>Example #1</h2>
d640 2
a641 2
<a name="ex2"></a>
<h2>Example #2</h2>
d785 1
a785 1
<small>$OpenBSD: queueing.html,v 1.5 2003/05/07 02:03:55 nick Exp $</small>
@


1.5
log
@
Bad link, fixed by Joel Knight (enabled at myrealbox dot com)
@
text
@d34 1
a34 1
host they enter a queue were they await processing by the operating
d766 1
a766 1
<small>$OpenBSD: queueing.html,v 1.4 2003/05/02 11:14:00 henning Exp $</small>
@


1.4
log
@typo; Steve Ewing on misc@@
@
text
@d286 1
a286 1
<a href="intro.html">Introduction</a>.
d766 1
a766 1
<small>$OpenBSD: queueing.html,v 1.3 2003/05/01 14:20:37 nick Exp $</small>
@


1.3
log
@
ARGH!  no, it is "ruleset", not "rule set".  Pointed out by Margarida@@
@
text
@d43 1
a43 1
seconds hardly bares any notice.  But what happens if the router
d766 1
a766 1
<small>$OpenBSD: queueing.html,v 1.2 2003/05/01 13:14:12 nick Exp $</small>
@


1.2
log
@
spelling and typos, plus "ruleset" -> "rule set"
@
text
@d528 1
a528 1
Below is the rule set that meets this network policy. Note that only the
d663 1
a663 1
Below is the rule set that meets this network policy. Note that only the
d766 1
a766 1
<small>$OpenBSD: queueing.html,v 1.1 2003/05/01 01:46:06 nick Exp $</small>
@


1.1
log
@
The long awaited, new PF FAQ!
Most of it written by Joel Knight >enabled at myrealbox dot com<,
some parts by me, a few parts yanked out of the old PF FAQ.
GREAT work, Joel!
@
text
@d528 1
a528 1
Below is the ruleset that meets this network policy. Note that only the
d663 1
a663 1
Below is the ruleset that meets this network policy. Note that only the
d766 1
a766 1
<small>$OpenBSD$</small>
@

