head	1.36;
access;
symbols;
locks; strict;
comment	@# @;


1.36
date	2014.04.01.17.18.45;	author nick;	state dead;
branches;
next	1.35;

1.35
date	2013.11.01.18.04.05;	author ajacoutot;	state Exp;
branches;
next	1.34;

1.34
date	2013.05.01.17.39.07;	author ajacoutot;	state Exp;
branches;
next	1.33;

1.33
date	2013.05.01.14.42.14;	author ajacoutot;	state Exp;
branches;
next	1.32;

1.32
date	2012.11.02.07.24.05;	author ajacoutot;	state Exp;
branches;
next	1.31;

1.31
date	2012.10.05.15.42.58;	author ajacoutot;	state Exp;
branches;
next	1.30;

1.30
date	2012.08.21.19.23.27;	author ajacoutot;	state Exp;
branches;
next	1.29;

1.29
date	2012.05.13.16.30.18;	author ajacoutot;	state Exp;
branches;
next	1.28;

1.28
date	2012.01.21.19.34.39;	author ajacoutot;	state Exp;
branches;
next	1.27;

1.27
date	2009.11.07.07.32.54;	author ajacoutot;	state Exp;
branches;
next	1.26;

1.26
date	2009.05.04.19.07.52;	author tobias;	state Exp;
branches;
next	1.25;

1.25
date	2009.02.22.20.35.21;	author tobias;	state Exp;
branches;
next	1.24;

1.24
date	2008.11.01.11.02.22;	author tobias;	state Exp;
branches;
next	1.23;

1.23
date	2008.08.10.16.14.28;	author tobias;	state Exp;
branches;
next	1.22;

1.22
date	2008.01.06.13.57.19;	author tobias;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.12.20.29.59;	author saad;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.10.12.43.45;	author saad;	state Exp;
branches;
next	1.19;

1.19
date	2007.05.09.05.49.52;	author jufi;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.26.03.08.05;	author jufi;	state Exp;
branches;
next	1.17;

1.17
date	2007.02.10.05.22.16;	author saad;	state Exp;
branches;
next	1.16;

1.16
date	2006.11.01.11.30.45;	author jufi;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.29.10.58.52;	author jufi;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.08.07.14.20;	author saad;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.06.15.41.58;	author saad;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.25.08.25.49;	author saad;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.06.12.42.41;	author jufi;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.04.20.24.23;	author jufi;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.20.07.30.02;	author saad;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.27.10.30.04;	author saad;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.22.17.38.07;	author saad;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.20.17.13.26;	author jufi;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.18.17.18.10;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.22.20.00.48;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.08.05.22.43;	author saad;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.25.10.05.28;	author jufi;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.27.19.39.09;	author horacio;	state Exp;
branches;
next	;


desc
@@


1.36
log
@
missed another one...
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>PF: Beispiel: Firewall für zuhause oder ein kleines Büro</title>
<link rev="made" href="mailto:www@@openbsd.org">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="resource-type" content="document">
<meta name="description"   content="the OpenBSD FAQ page">
<meta name="keywords"      content="openbsd,faq,pf">
<meta name="distribution"  content="global">
</head>

<!--
Copyright (c) 2003, 2004 Joel Knight <enabled@@myrealbox.com>

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<body bgcolor="#ffffff" text="#000000">
<!-- Passes validator.w3.org, please keep it this way;
please, use a max of 72 chars per line -->

<a href="../../../de/index.html">
<img alt="[OpenBSD]" height=30 width=141 src="../../../images/smalltitle.gif" border="0">
</a>
<p>
[<a href="carp.html">Zurück: Firewall-Redundanz mit CARP und pfsync</a>]
[<a href="index.html">Inhalt</a>]

<p>
<h1><font color="#e00000">PF: Beispiel: Firewall für zuhause oder ein kleines Büro</font></h1>
<hr>

<h3>Inhaltsverzeichnis</h3>
<ul>
<li><a href="#scenario">Das Szenario</a>
	<ul>
	<li><a href="#network">Das Netzwerk</a>
	<li><a href="#objective">Das Ziel</a>
	<li><a href="#prep">Vorbereitung</a>
	</ul>
<li><a href="#ruleset">Der Regelsatz</a>
	<ul>
	<li><a href="#macros">Makros</a>
	<li><a href="#options">Optionen</a>
	<li><a href="#rules">Firewall-Regeln</a>
	</ul>
<li><a href="#allrules">Der komplette Regelsatz</a>
</ul>

<hr>

<a name="scenario"></a>
<h2>Das Szenario</h2>
In diesem Beispiel läuft PF auf einer OpenBSD-Maschine, deren Aufgabe
es ist, als Firewall und NAT-Gateway für ein kleines Netzwerk zuhause
oder in einem Büro zu agieren. Das Gesamtziel ist, dem Netzwerk
Internetzugriff und begrenzten Zugriff zur Firewallmaschine
vom Internet aus zu gewähren. Des Weiteren soll ein interner Webserver
vom Internet aus erreichbar gemacht werden. Dieses Dokument wird einen
kompletten Regelsatz durchgehen, der genau das macht.

<a name="network"></a>
<h3>Das Netzwerk</h3>
Das Netzwerk ist wie folgt aufgebaut:

<pre>

  [ COMP1 ]    [ COMP3 ]
      |            |
   ---+------+-----+------- xl0 [ OpenBSD ] fxp0 -------- ( Internet )
             |
         [ COMP2 ]

</pre>

<p>
In diesem internen Netzwerk befinden sich einige Computer. Das Diagramm
zeigt drei, aber die tatsächliche Anzahl ist unbedeutend. Diese Computer
sind reguläre Arbeitsplätze, die fürs Websurfen, E-Mail, Chatten etc.
verwendet werden. COMP3 ist eine Ausnahme, da er als kleiner Webserver
läuft. Das interne Netzwerk verwendet den Netzwerkblock
192.168.0.0/255.255.255.0.

<p>
Die OpenBSD-Firewall ist ein Celeron 300 mit zwei Netzwerkkarten: eine
3com 3c509B (<tt>xl0</tt>) und eine Intel EtherExpress Pro/100
(<tt>fxp0</tt>). Die Firewall hat eine Kabelverbindung zum Internet und
verwendet NAT, um diese Verbindung mit dem internen Netzwerk zu teilen.
Die IP-Adresse des externen Interfaces wird vom Internetprovider
dynamisch zugewiesen.

<a name="objective"></a>
<h3>Das Ziel</h3>
Die Ziele sind:
<ul>
<li>Biete jedem internen Computer unbegrenzten Internetzugriff an.
<li>Verwende einen »standardmäßig blocken«-Filterregelsatz.
<li>Lasse folgenden eingehenden Verkehr für die Firewall vom Internet
aus zu:
	<ul>
	<li>SSH (TCP-Port 22): wird für externe Wartung der
	Firewallmaschine benötigt.
	<li>Auth/Ident (TCP-Port 113): wird von einigen Diensten wie
	zum Beispiel SMTP und IRC verwendet.
	<li>ICMP-Echo-Anfragen: der ICMP-Pakettyp, der von
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8"
>ping(8)</a>
	verwendet wird.
	</ul>
<li>Leite TCP-Port-80-Verbindungsanfragen (die versuchen, auf den
Webserver zuzugreifen) zum Computer COMP3 weiter.
Lasse ebenfalls TCP-Port-80-Verkehr durch die Firewall zu, der für
COMP3 bestimmt ist.
<li>Zeichne Filterstatistiken auf dem externen Interface auf.
<li>Antworte standardmäßig mit TCP RST oder ICMP Unreachable auf
geblockte Pakete.
<li>Mache die Regelsätze so simpel und einfach zu verwaltend wie
möglich.
</ul>

<a name="prep"></a>
<h3>Vorbereitung</h3>
Dieses Dokument nimmt an, dass der OpenBSD-Host ordentlich
konfiguriert wurde, sodass er als Router funktioniert - einschließlich
der Überprüfung der IP-Netzwerkeinstellungen, Internetverbindung
und dass die
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3"
>sysctl(3)</a>-Variablen <tt>net.inet.ip.forwarding</tt> und/oder
<tt>net.inet6.ip6.forwarding</tt> auf »<tt>1</tt>« eingestellt
wurde. Du musst ebenfalls PF mittels
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+5.4"
>pfctl(8)</a> starten oder die entsprechende Variable in
<tt>/etc/rc.conf.local</tt> aktivieren.
PF ist seit dem Release OpenBSD 4.6 standarmäßig aktiviert.

<a name="ruleset"></a>
<h2>Der Regelsatz</h2>
Das nächste Kapitel wird Schritt für Schritt durch einen Regelsatz
gehen, der die zuvor genannten Ziele realisiert.

<a name="macros"></a>
<h3>Makros</h3>
Die folgenden Makros wurden definiert, um die Wartung und das Lesen
des Regelsatzes einfacher zu machen:
<blockquote><pre>
int_if="xl0"

tcp_services="{ 22, 113 }"
icmp_types="echoreq"

comp3="192.168.0.3"
</pre></blockquote>

<p>
Die erste Zeile definiert eine interne Netzwerkschnittstelle, auf der das
Filtern stattfinden wird.
Da wir sie hier definieren, können wir den Regelsatz bei
einer Hardwareumstellung so belassen wie er ist und müssen lediglich
diese eine Zeile ändern.
(Für dieses Beispiel wird die externe Schnittstelle von der <tt>egress</tt>
Schnittstellengruppe gehandhabt.
In dieser finden sich alle Schnittstellen, für die eine Standard-Route gesetzt
ist, in diesem Fall fxp0.)
Die zweite und dritte Zeile listen die TCP-Portnummern der Dienste auf, die dem
Internet gegenüber offengelegt
werden (SSH und ident/auth) und den ICMP-Pakettyp, dem erlaubt wird,
die Firewallmaschine zu erreichen. Zum Schluss definiert die letzte
Zeile die IP-Adresse von COMP3.

<p>
<b>Hinweis</b>: Wenn die Internetverbindung
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=4"
>PPPoE</a> benötigt, werden Filter und NAT auf der Schnittstelle
<tt>pppoe0</tt> stattfinden und <i>nicht</i> auf der egress-Schnittstelle
(<tt>fxp0</tt>).

<a name="options"></a>
<h3>Optionen</h3>
Die folgenden beiden Optionen werden die standardmäßige Antwort für
<tt>block</tt>-Filterregeln setzen und Statistikaufzeichnungen für
das externe Interface anstellen:
<blockquote><pre>
set block-policy return
set loginterface egress
</pre></blockquote>

<p>
Jedes Unix-System hat ein sogenanntes Loopbackinterface. Hierbei
handelt es sich um ein virtuelles Netzwerkinterface, das von
Applikationen genutzt wird, um mit anderen auf dem gleichen System zu
kommunizieren. Unter OpenBSD ist das Loopbackinterface
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4"
>lo(4)</a>.
Es ist allgemein gute Praxis, jegliches Filtern auf den
Loopbackinterfaces zu unterbinden. Die Verwendung von
<a href="options.html#skip">set skip</a> bewerkstelligt dies.
<blockquote><pre>
set skip on lo
</pre></blockquote>
<!-- XXX this should be interface groups, but PF (at least up to
4.8) just does a substring match on the interface name -->
Beachte, dass wir alle <tt>lo</tt>-Schnittstellen überspringen.
Auf diese Weise können wir später noch Loopbackinterfaces hinzufügen,
ohne dass wir uns Gedanken darüber machen müssten, diesen Teil unseres
Regelsatzes anzupassen.

<a name="rules"></a>
<h3>Firewall-Regeln</h3>

Wir starten mit Regeln zur Unterstützung des
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.4"
>ftp-proxy(8)</a>, sodass sich FTP-Clients des lokalen Netzwerks mit
FTP-Servern im Internet verbinden können.
Dies funktioniert durch dynamisches Einfügen von Regeln, wenn eine
FTP-Verbindung aufgebaut wird.
Dies wird mit Hilfe von <a href="anchors.html">Ankern</a> bewerkstelligt:
<blockquote><pre>
anchor "ftp-proxy/*"
</pre></blockquote>

<p>
Nun fügen wir die Regel hinzu, die benötigt wird, um FTP-Verbindungen
dergestalt umzuleiten, dass sie vin ftp-proxy(8) gesehen werden:
<blockquote><pre>
pass in quick on $int_if inet proto tcp to any port ftp \
    divert-to 127.0.0.1 port 8021
</pre></blockquote>

<p>
Diese Regel fängt jegliche FTP-Verbindung zu Port 21 ab, leitet sie zu der
ftp-proxy(8)-Instanz auf Port 8021 um, und vermeidet, durch Nutzung des
Schlüsselworts <tt>quick</tt>, eine Abarbeitung von entsprechenden Paketen
durch den Rest des Regelsatzes.
Verbinden sich Benutzer regulär auf anderen Ports mit FTP-Servern, so sollte
eine Liste mit Zielports spezifiziert werden, zum Beispiel:
<tt>to any port { 21, 2121 }</tt>.

<p>
Beachte, dass sich sowohl der <a href="anchors.html">Anker</a>, als auch die
<a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.4"
>ftp-proxy(8)</a> Umleitungsregel vor jeglicher <tt>match</tt>-Regel für NAT
befinden müssen, oder andernfalls wird der ftp-proxy(8) nicht wie erwartet
funktionieren.

<p>
Machen wir weiter mit einigen <tt>match</tt>-Regeln.
Für sich selbst kann eine <tt>match</tt>-Regel nicht festzustellen, ob es einem
Paket erlaubt ist, zu passieren.
Stattdessen werden die Parameter der Regel erinnert, denen ein Paket entsprach;
diese werden dann für jegliche, die Pakete weiterverarbeitenden
<tt>pass</tt>-Regeln benutzt.

<p>
Dies ist leistungsfähig: Parameter wie <a href="nat.html">NAT</a> oder
<a href="queueing.html">Warteschlangen</a> können auf bestimmte Klassen von
Paketen angewendet werden, und so können Zugriffsrechte separat definiert
werden.

<p>
Um NAT für das gesamtes internes Netzwerk auszuführen, wird die folgende
<tt>match</tt>-Regel genutzt:
<blockquote><pre>
match out on egress inet from !(egress:network) to any nat-to (egress:0)
</pre></blockquote>

<p>
In diesem Fall könnte das »<tt>!(egress:network)</tt>« einfach durch ein
»<tt>$int_if:network</tt>« ersetzt werden, aber wenn du mehrere interne
Schnittstellen hinzufügen würdest, so müsstest du zusätzliche NAT-Regeln
hinzufügen, währenddessen mit dieser Struktur NAT auf allen geschützten
Schnittstellen ausgeführt wird.

<p>
Da die IP-Adressen der externen Schnittstelle dynamisch zugewiesen werden,
werden Klammern um die Übersetzungsschnittstelle gesetzt, sodass PF bemerkt,
wenn sich eine Adresse ändert.
Die Nachsilbe :0 wird benutzt so dass, falls die externe Schnittstelle mehrere
Adressen besitzt, nur die erste Adresse für die Übersetzung benutzt wird.

<p>
Zuletzt wird die Protokollfamilie <tt>inet</tt> (IPv4) spezifiziert.
Dies verhindert die Übersetzung aller <tt>inet6</tt> (IPv6)-Pakete, welche
eventuell empfangen werden.

<p>
Nun die Regeln zur Kontrolle von Zugriffsrechten.
Beginne mit der standardmäßigen Verweigerung.
<blockquote><pre>
block in log
</pre></blockquote>

<p>
An diesem Punkt wird jeglicher Datenverkehr, der versucht, in eine
Schnittstelle zu gelangen, blockiert, selbst solcher aus dem internen Netzwerk.
Alle diese Pakete werden protokolliert.
Spätere Regeln werden die Firewall für obige Objektiven öffnen, und ebenfalls
alle notwendigen virtuellen Schnittstellen öffnen.

<p>
Denke daran, PF kann sowohl in eine Schnittstelle eingehenden, als auch aus
einer Schnittstelle ausgehenden Verkehr blocken.
Es kann dein Leben vereinfachen, wenn du dich dafür entscheidest, den Verkehr
einer Richtung zu filtern, anstatt zu versuchen die Dinge einfach zu halten,
wenn man einige Sachen in der einen, und andere in der anderen Richtung
filtert.
In unserem Fall entscheiden wir uns dafür, den eingehenden Verkehr zu filtern,
aber sobald der Datenverkehr einmal für die Schnittstelle zugelassen ist,
werden wir nicht mehr versuchen, sie am Verlassen zu hindern,
sodass wir bei folgendem Konstrukt enden:

<blockquote><pre>
pass out quick
</pre></blockquote>

Durch Nutzung von <tt>quick</tt> wird die Überprüfung ausgehender Pakete durch
folgende Regeln vermieden, was die Leistung erhöht.

<p>
Die <a href="filter.html#antispoof">Blockade gefälschter Adressen</a> ist gut:
<blockquote><pre>
antispoof quick for { lo $int_if }
</pre></blockquote>

<p>
Nun öffne die Ports, die von den Netzwerkdiensten genutzt werden, die über das
Internet erreichbar sein sollen.
Zuerst, der Verkehr, der für die Firewall selbst bestimmt ist:

<blockquote><pre>
pass in on egress inet proto tcp from any to (egress) \
    port $tcp_services
</pre></blockquote>

<p>
Die Spezifikation der Netwerk-Ports durch das Makro <tt>$tcp_services</tt>
macht das Öffnen weiterer Dienste für das Internet einfach, da einzig das Makro
geändert, und der Regelsatz neu geladen werden muss.
UDP-Dienste können ebenfalls, durch die Erzeugung eines Makros
<tt>$udp_services</tt> und dem Hinzufügen einer Filterregel ähnlich der obigen,
die jedoch <tt>proto udp</tt> spezifizieren muss, geöffnet werden.

<p>
Die nächste Regel fängt alle Versuche ab, aus dem Internet zu dem TCP-Port 80
der Firewall eine Verbindung aufzubauen.
Legitime Versuche, auf diesen Port zuzugreifen, kommen von Benutzern, die auf
den Webserver des Netzwerks zugreifen möchten.
Diese Verbindungsversuche müssen zu COMP3 umgeleitet werden:

<blockquote><pre>
pass in on egress inet proto tcp to (egress) port 80 rdr-to $comp3
</pre></blockquote>

<p>
ICMP-Datenverkehr muss durchgelassen werden:
<blockquote><pre>
pass in inet proto icmp all icmp-type $icmp_types
</pre></blockquote>

<p>
Ähnlich dem Makro <tt>$tcp_services</tt> kann ein Makro <tt>$icmp_types</tt>
einfach editiert werden, um die Arten von ICMP-Paketen, denen es erlaubt
werden soll, die Firewall zu erreichen, zu ändern.
Beachte, dass diese Regel für alle Netzwerkschnittstellen gilt.

<p>
Nun muss der Datenverkehr zu und von dem internen Netzwerk durchgelassen
werden.
Wir nehmen an, dass die Benutzer des internen Netzwerks wissen was sie tun, und
keinerlei Ärger verursachen.
Dies ist nicht notwendigerweise eine richtige Annahme; ein viel restriktiverer
Regelsatz wäre in vielen Umgebungen angemessen.
<blockquote><pre>
pass in on $int_if
</pre></blockquote>

<p>
TCP-, UDP- und ICMP-Datenverkehr ist es durch die frühere Zeile
»<tt>pass out</tt>« erlaubt, die Firewall in Richtung Internet zu verlassen.
Zustandsinformationen werden aufbewahrt, sodass zurückkommende Pakete ihren
Weg zurück durch die Firewall nehmen können.

<a name="allrules"></a>
<h2>Der komplette Regelsatz</h2>
<table border=0 width="650">
<tr><td nowrap bgcolor="#EEEEEE">
<pre>
# macros

int_if="xl0"

tcp_services="{ 22, 113 }"
icmp_types="echoreq"

comp3="192.168.0.3"

# options

set block-policy return
set loginterface egress
set skip on lo

# FTP Proxy rules

anchor "ftp-proxy/*"

pass in quick on $int_if inet proto tcp to any port ftp \
    divert-to 127.0.0.1 port 8021

# match rules

match out on egress inet from !(egress:network) to any nat-to (egress:0)

# filter rules

block in log
pass out quick

antispoof quick for { lo $int_if }

pass in on egress inet proto tcp from any to (egress) \
    port $tcp_services

pass in on egress inet proto tcp to (egress) port 80 rdr-to $comp3

pass in inet proto icmp all icmp-type $icmp_types

pass in on $int_if
</pre>
</td></tr>
</table>

<p>
[<a href="carp.html">Zurück: Firewall-Redundanz mit CARP und pfsync</a>]
[<a href="index.html">Inhalt</a>]

<p>
<hr>
<a href="index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[zurück]"></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>
<!--
Originally [OpenBSD: example1.html,v 1.54 ]<br>
$Translation: example1.html,v 1.37 2013/11/01 16:59:45 steffen Exp $<br>
-->
$OpenBSD: example1.html,v 1.35 2013/11/01 18:04:05 ajacoutot Exp $
</small>

</body>
</html>
@


1.35
log
@Sync with Steelix CVS
@
text
@d459 1
a459 1
$OpenBSD$
@


1.34
log
@Sync with Steelix CVS
@
text
@d143 1
a143 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d223 1
a223 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d253 1
a253 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d456 2
a457 2
Originally [OpenBSD: example1.html,v 1.53 ]<br>
$Translation: example1.html,v 1.36 2013/05/01 16:34:16 steffen Exp $<br>
@


1.33
log
@Sync with Steelix CVS
@
text
@d456 2
a457 2
Originally [OpenBSD: example1.html,v 1.52 ]<br>
$Translation: example1.html,v 1.35 2013/05/01 13:35:26 steffen Exp $<br>
@


1.32
log
@Sync with Steelix CVS
@
text
@d143 1
a143 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d223 1
a223 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d253 1
a253 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d457 1
a457 1
$Translation: example1.html,v 1.34 2012/11/01 20:43:18 steffen Exp $<br>
@


1.31
log
@Sync with Steelix CVS
@
text
@d143 1
a143 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d223 1
a223 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d253 1
a253 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d456 2
a457 2
Originally [OpenBSD: example1.html,v 1.51 ]<br>
$Translation: example1.html,v 1.33 2012/10/03 10:12:54 steffen Exp $<br>
@


1.30
log
@Sync with Steelix CVS
@
text
@d363 1
a363 2
pass in on egress inet proto tcp to (egress) port 80 \
    rdr-to $comp3 synproxy state
a366 5
Für ein bisschen Mehr an Sicherheit nutzen wir den
<a href="filter.html#synproxy">TCP SYN Proxy</a>,
zum weiteren Schutz des Webservers.

<p>
d436 1
a436 2
pass in on egress inet proto tcp to (egress) port 80 \
    rdr-to $comp3 synproxy state
d456 2
a457 2
Originally [OpenBSD: example1.html,v 1.50 ]<br>
$Translation: example1.html,v 1.32 2012/08/18 11:44:14 steffen Exp $<br>
@


1.29
log
@Sync with Steelix CVS
@
text
@d171 1
a171 1
diese zwei Zeilen abändern.
d186 2
a187 1
<tt>pppoe0</tt> stattfinden und <i>nicht</i> auf <tt>fxp0</tt>.
d196 1
a196 1
set loginterface fxp0
d418 1
a418 1
set loginterface fxp0
d430 1
a430 1
match out on egress inet from !(egress) to any nat-to (egress:0)
d463 2
a464 2
Originally [OpenBSD: example1.html,v 1.49 ]<br>
$Translation: example1.html,v 1.31 2012/05/11 17:06:29 steffen Exp $<br>
@


1.28
log
@Sync with Steelix CVS
@
text
@d143 1
a143 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d222 1
a222 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d251 2
a252 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d462 2
a463 2
Originally [OpenBSD: example1.html,v 1.48 ]<br>
$Translation: example1.html,v 1.30 2012/01/20 20:21:49 steffen Exp $<br>
@


1.27
log
@Sync with Steelix CVS
@
text
@d38 1
a38 1
[<a href="carp.html">Zurück: Firewal-Redundanz mit CARP und pfsync</a>]
d57 1
a57 4
	<li><a href="#scrub">Scrub</a>
	<li><a href="#nat">Network Address Translation</a>
	<li><a href="#rdr">Redirection</a>
	<li><a href="#filter">Filter-Regeln</a>
d143 1
a143 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.6"
d146 1
d157 6
a162 8
<blockquote>
<tt>
ext_if="fxp0"<br>
int_if="xl0"<br>
<br>
tcp_services="{ 22, 113 }"<br>
icmp_types="echoreq"<br>
<br>
d164 1
a164 2
</tt>
</blockquote>
d167 3
a169 2
Die ersten beiden Zeilen definieren die Netzwerkinterfaces, auf denen
gefiltert wird. Da wir sie hier definieren, können wir den Regelsatz bei
d171 7
a177 2
diese zwei Zeilen abändern. Die dritte und vierte Zeile listen die
TCP-Portnummern der Dienste auf, die dem Internet gegenüber offengelegt
d184 3
a186 3
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8"
>PPPoE</a> benötigt, werden Filter und NAT auf dem
<tt>tun0</tt>-Interface stattfinden und <i>nicht</i> auf <tt>fxp0</tt>.
d193 4
a196 6
<blockquote>
<tt>
set block-policy return<br>
set loginterface $ext_if
</tt>
</blockquote>
d208 1
a208 2
<blockquote>
<tt>
d210 4
a213 3
</tt>
</blockquote>
Beachte, dass wir die gesamte Interfacegruppe <tt>lo</tt> überspringen.
d218 11
a228 114
<a name="scrub"></a>
<h3>Scrub</h3>
Es gibt keinen Grund, das empfohlene Scrubbing, das auf den gesamten
eingehenden Verkehr angewandt wird, nicht zu verwenden. Somit handelt es
sich hierbei um einen einfachen Einzeiler:
<blockquote>
<tt>
match in all scrub (no-df)
</tt>
</blockquote>

<a name="nat"></a>
<h3>Network Address Translation</h3>
Um NAT auf das gesamte interne Netzwerk durchzuführen, wird folgende
<tt>nat</tt>-Regel verwendet:
<blockquote>
<tt>
nat on $ext_if from !($ext_if) to any -&gt; ($ext_if)
</tt>
</blockquote>

<p>
»<tt>!($ext_if)</tt>« könnte in diesem Fall ganz einfach gegen
»<tt>$int_if</tt>« ausgetauscht werden, doch wenn du weitere
interne Interfaces hinzufügst, müsstest du ebenfalls zusätzliche
NAT-Regeln einfügen, wobei mit dieser Struktur NAT sofort auf allen
geschützten Interfaces funktioniert.

<p>
Da die IP-Adresse des externen Interfaces dynamisch zugewiesen wird,
werden Klammern um das Übersetzungsinterface herum gesetzt. Auf diese
Weise wird PF bemerken, wenn sich die Adresse ändert.

<p>
Wir wollen ebenfalls, dass der FTP-Proxy funktioniert. Das erreichen
wir dadurch, indem wir ebenfalls den
NAT-<a href="anchors.html">Anker></a> einbinden:

<blockquote>
<tt>
nat-anchor "ftp-proxy/*"
</tt>
</blockquote>



<a name="rdr"></a>
<h3>Umleitung</h3>
Die ersten benötigten Umleitungsregeln sind für
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.6"
>ftp-proxy(8)</a>, sodass sich FTP-Clients vom lokalen Netzwerk aus
mit FTP-Servern im Internet verbinden können.
<blockquote>
<tt>
rdr-anchor "ftp-proxy/*"<br>
rdr on $int_if proto tcp from any to any port 21 -&gt; 127.0.0.1 port 8021
</tt>
</blockquote>

<p>
Bedenke, dass diese Regel nur FTP-Verbindungen auf Port 21 erfassen
wird. Wenn sich Benutzer auf regulärer Basis mit FTP-Servern auf anderen
Ports verbinden, sollte eine Liste verwendet werden, die die Zielports
angibt - zum Beispiel: <tt>from any to any port { 21, 2121 }</tt>.

<p>
Die letzte Umleitungsregel erfasst alle Versuche von Personen im
Internet, die auf den TCP-Port 80 der Firewall verbinden wollen.
Berechtigte Versuche, diesen Port zu erreichen, werden von Benutzern
sein, die versuchen, den Webserver vom Netzwerk zu erreichen.
Dieser Verbindungsversuch muss auf COMP3 weitergeleitet werden:

<blockquote>
<tt>
rdr on $ext_if proto tcp from any to any port 80 -&gt; $comp3
</tt>
</blockquote>

<a name="filter"></a>
<h3>Filter-Regeln</h3>
Nun die Filterregeln. Fange mit standardmäßigem Blocken an:
<blockquote>
<tt>
block in<br>
</tt>
</blockquote>

<p>
Zu diesem Zeitpunkt wird der gesamte Verkehr, der in ein Interface
gelangen will, abgeblockt - sogar vom internen Netzwerk.
Die nächsten Regeln werden die Firewall den oben genannten Zielen
entsprechend öffnen, so wie alle benötigten virtuellen Interfaces.

<p>
Bedenke, dass PF sowohl den eingehenden als auch den ausgehenden
Netzwerkverkehr eines Interfaces blocken kann. Du kannst dir die
Konfiguration vereinfachen, indem du den Verkehr nur in eine Richtung
filterst, statt sowohl eingehenden als auch ausgehenden. In unserem
Fall haben wir uns entschieden, den eingehenden Verkehr zu filtern.
Doch sobald der Netzwerkverkehr in ein Interface hineingelassen wurde,
werden wir nicht versuchen, ihn am Verlassen zu hintern. Das ganze
sieht dann wie folgt aus:

<blockquote>
<tt>
pass out keep state
</tt>
</blockquote>

<p>
Des Weiteren benötigen wir einen <a href="anchors.html">Anker</a>
für ftp-proxy(8):
<blockquote>
<tt>
d230 72
a301 2
</tt>
</blockquote>
d303 29
a331 4
Sinnvoll ist auch der Einsatz eines
<a href="filter.html#antispoof">Schutzes gegen gefälschte Adressen</a>:
<blockquote>
<tt>
d333 1
a333 2
</tt>
</blockquote>
d335 17
d354 44
a397 66
Nun öffne die Ports, die von den Netzwerkdiensten genutzt werden, die
für das Internet verfügbar sein sollen. Zuerst der Verkehr, der
für die Firewall selbst bestimmt ist:
<blockquote>
<tt>
pass in on $ext_if inet proto tcp from any to ($ext_if) \<br>
&nbsp;&nbsp;&nbsp;port $tcp_services flags S/SA keep state
</tt>
</blockquote>

<p>
Die Netzwerkports in dem Makro <tt>$tcp_services</tt> anzugeben macht
es simpel, zusätzliche Dienste dem Internet anzubieten. Neue Ports
müssen nur in das Makro eingetragen und der Regelsatz neugeladen werden.
UDP-Dienste können ebenfalls geöffnet werden, indem ein
<tt>$udp_services</tt>-Makro erstellt wird und eine Filterregel so wie
oben angegeben hinzugefügt wird (mit <tt>proto udp</tt>).

<p>
Zusätzlich zur <tt>rdr</tt>-Regel, die den Webserververkehr zu COMP3
weiterleitet, MÜSSEN wir ebenfalls diesen Verkehr durch die Firewall
leiten:
<blockquote>
<tt>
pass in on $ext_if inet proto tcp from any to $comp3 port 80 \<br>
&nbsp;&nbsp;&nbsp;&nbsp;flags S/SA synproxy state
</tt>
</blockquote>

<p>
Für ein bisschen mehr Sicherheit werden wir den
<a href="filter.html#synproxy">TCP-SYN-Proxy</a> verwenden, um den
Webserver noch besser zu beschützen.

<p>
ICMP-Verkehr muss durchgelassen werden:
<blockquote>
<tt>
pass in inet proto icmp all icmp-type $icmp_types keep state
</tt>
</blockquote>

<p>
Dem <tt>$tcp_services</tt>-Makro ähnelnd kann das
<tt>$icmp_types</tt>-Makro einfach editiert werden, um die Typen der
ICMP-Pakete zu ändern, denen erlaubt wird, die Firewall zu erreichen.
Bedenke, dass diese Regel für alle Netzwerkinterfaces gilt.

<p>
Nun muss der Verkehr zu und vom internen Netzwerk zugelassen werden.
Wir nehmen an, dass die Benutzer im internen Netzwerk wissen, was
sie tun und keinen Ärger verursachen werden. Dies ist
nicht notwendigerweise eine gültige Annahme; ein sehr viel
restriktiverer Regelsatz wäre für viele Umgebungen angebrachter.
<blockquote>
<tt>
pass in quick on $int_if
</tt>
</blockquote>

<p>
TCP-, UDP- und ICMP-Verkehr darf die Firewall in Richtung Internet
verlassen. Das ist auf Grund der vorher genannten Zeile
»<tt>pass out keep state</tt>« notwendig. Zustandsinformationen werden
aufbewahrt, sodass die wiederkommenden Pakete durch die Firewall
gelassen werden.
d404 2
a405 2
# makros
ext_if="fxp0"
d413 2
a414 1
# optionen
d416 4
a419 1
set loginterface $ext_if
d421 1
a421 1
set skip on lo
d423 2
a424 2
# scrub
match in all scrub (no-df)
d426 1
a426 4
# nat/rdr
nat on $ext_if from !($ext_if) -> ($ext_if:0)
nat-anchor "ftp-proxy/*"
rdr-anchor "ftp-proxy/*"
d428 1
a428 2
rdr pass on $int_if proto tcp to port ftp -> 127.0.0.1 port 8021
rdr on $ext_if proto tcp from any to any port 80 -> $comp3
d430 1
a430 2
# filterregeln
block in
d432 2
a433 1
pass out keep state
a434 1
anchor "ftp-proxy/*"
d437 2
a438 2
pass in on $ext_if inet proto tcp from any to ($ext_if) \
   port $tcp_services flags S/SA keep state
d440 2
a441 2
pass in on $ext_if inet proto tcp from any to $comp3 port 80 \
    flags S/SA synproxy state
d443 1
a443 1
pass in inet proto icmp all icmp-type $icmp_types keep state
d445 1
a445 1
pass in quick on $int_if
d451 1
a451 1
[<a href="carp.html">Zurück: Firewal-Redundanz mit CARP und pfsync</a>]
d461 2
a462 2
Originally [OpenBSD: example1.html,v 1.39 ]<br>
$Translation: example1.html,v 1.29 2009/11/05 12:55:49 tobias Exp $<br>
@


1.26
log
@Sync with Steelix CVS
@
text
@d146 1
a146 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.5"
d226 1
a226 1
scrub in
d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.5"
d435 1
a435 1
scrub in
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.38 ]<br>
$Translation: example1.html,v 1.28 2009/05/03 12:44:31 tobias Exp $<br>
@


1.25
log
@Sync with Steelix CVS
@
text
@d146 1
a146 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.4"
d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.4"
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.37 ]<br>
$Translation: example1.html,v 1.27 2009/02/22 09:17:45 paldium Exp $<br>
@


1.24
log
@Sync with Steelix CVS
@
text
@d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.36 ]<br>
$Translation: example1.html,v 1.26 2008/11/01 09:15:06 paldium Exp $<br>
@


1.23
log
@Sync with Steelix CVS
@
text
@d146 1
a146 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.3"
d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.3"
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.35 ]<br>
$Translation: example1.html,v 1.25 2008/08/04 14:41:04 paldium Exp $<br>
@


1.22
log
@Sync with Steelix CVS
@
text
@d146 1
a146 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.2"
d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.2"
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.34 ]<br>
$Translation: example1.html,v 1.24 2008/01/02 15:51:48 paldium Exp $<br>
@


1.21
log
@Sync with Steelix CVS
@
text
@d461 1
a461 1
pass quick on $int_if
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.33 ]<br>
$Translation: example1.html,v 1.23 2007/11/03 10:45:42 paldium Exp $<br>
@


1.20
log
@Sync with Steelix CVS
@
text
@d139 1
a139 1
konfiguriert wurde, so dass er als Router funktioniert - einschließlich
d146 1
a146 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.1"
d268 2
a269 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.1"
>ftp-proxy(8)</a>, so dass sich FTP-Clients vom lokalen Netzwerk aus
d411 1
a411 1
aufbewahrt, so dass die wiederkommenden Pakete durch die Firewall
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.32 ]<br>
$Translation: example1.html,v 1.22 2007/05/09 19:31:27 paldium Exp $<br>
@


1.19
log
@Sync with steelix translation CVS
@
text
@d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8"
d478 1
a478 1
$Translation: example1.html,v 1.21 2007/05/08 21:19:11 simon Exp $<br>
@


1.18
log
@Sync with steelix translation CVS
@
text
@d121 1
a121 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d142 1
a142 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3&amp;manpath=OpenBSD+4.0"
d146 1
a146 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pfctl&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d183 1
a183 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d204 1
a204 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.31 ]<br>
$Translation: example1.html,v 1.20 2007/04/25 15:41:14 paldium Exp $<br>
@


1.17
log
@sync with Steelix CVS
@
text
@d82 1
a82 1
    
d84 1
a84 1
      |            |                               
d182 1
a182 1
<b>Hinweis</b>: Wenn die Internetverbindung 
d478 1
a478 1
$Translation: example1.html,v 1.19 2007/02/09 18:13:48 paldium Exp $<br>
d484 1
a484 1
</html> 
@


1.16
log
@sync with steelix translation CVS
@
text
@d94 1
a94 1
sind reguläre Arbeitsplätze, die fürs Websurfen, E-Mail, Chatten, etc.
d478 1
a478 1
$Translation: example1.html,v 1.18 2006/11/01 10:48:51 paldium Exp $<br>
@


1.15
log
@sync with steelix translation CVS
@
text
@d121 1
a121 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d142 2
a143 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sysctl&amp;sektion=3&amp;manpath=OpenBSD+3.9"
>sysctl(3)</a>-Variablen <tt>net.inet.ip.forwarding</tt> und
d145 4
a148 2
wurde. Es ist sehr wahrscheinlich, dass du ebenfalls PF in
<tt>/etc/rc.conf.local</tt> aktivieren möchtest.
d183 1
a183 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d204 1
a204 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d268 1
a268 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d477 2
a478 2
Originally [OpenBSD: example1.html,v 1.29 ]<br>
$Translation: example1.html,v 1.17 2006/10/29 09:44:47 paldium Exp $<br>
@


1.14
log
@sync with Steelix CVS
@
text
@d141 4
a144 1
und dass <tt>net.inet.ip.forwarding</tt> auf <tt>1</tt> eingestellt
d475 2
a476 2
Originally [OpenBSD: example1.html,v 1.28 ]<br>
$Translation: example1.html,v 1.16 2006/08/06 14:06:56 paldium Exp $<br>
@


1.13
log
@sync with Steelix CVS
@
text
@d69 1
a69 1
In diesem Beispiel läuft PF auf einer OpenBSD-Maschine, derren Aufgabe
d71 2
a72 2
oder in einem Büro zu agieren. Das gesamte Ziel ist, dem Netzwerk
Internetzugriff und begrenzten Zugriff zur Firewall-Maschine
d92 1
a92 1
In diesem internen Netzwerk befinden sich einige Computer; das Diagramm
d94 4
a97 3
sind reguläre Arbeitsplätze, die für Web-Surfen, E-Mail, Chatten, etc.
verwendet werden, außer COMP3, welcher als kleiner Webserver läuft.
Das interne Netzwerk verwendet den 192.168.0.0 / 255.255.255.0-Netzwerkblock.
d102 4
a105 5
(<tt>fxp0</tt>).
Die Firewall hat eine Kabelverbindung zum Internet und verwendet NAT, um
diese Verbindung mit dem internen Netzwerk zu teilen. Die IP-Adresse
des externen Interfaces wird vom Internet-Provider dynamisch
zugewiesen.
d112 1
a112 1
<li>Verwende einen ,standardmäßiges Blocken'-Filter-Regelsatz.
d116 2
a117 2
	<li>SSH (TCP-Port 22): Dies wird für externe Wartung der
	Firewall-Maschine benötigt.
d126 1
a126 1
Webserver zuzugreifen) auf Computer COMP3 weiter.
d129 1
a129 1
<li>Zeichne Filter-Statistiken auf dem externen Interface auf.
d139 3
a141 3
konfiguriert wurde, so dass er als Router funktioniert, einschließlich
der Überprüfung der IP-Netzwerk-Einstellungen, Internetverbindung
und dass <tt>net.inet.ip.forwarding</tt> auf ,<tt>1</tt>' eingestellt
d148 1
a148 1
gehen, der die zuvor genannten Ziele erreichen wird.
d168 7
a174 7
das Filtern stattfinden wird. Dadurch, dass wir sie hier definieren,
können wir den Regelsatz bei einer Hardwareumstellung so belassen wie
er ist und müssen lediglich diese zwei Zeilen abändern. Die dritte und
vierte Zeile listen die TCP-Portnummern der Dienste auf, die dem
Internet gegenüber offengelegt werden (SSH und ident/auth) und den
ICMP-Pakettyp, dem erlaubt wird, die Firewall-Maschine zu erreichen.
Und zum Schluss definiert die letzte Zeile die IP-Adresse von COMP3.
d179 1
a179 1
>PPPoE</a> benötigt, dann werden Filter und NAT auf dem
d185 1
a185 1
<tt>block</tt>-Filterregeln setzen und Statistik-Aufzeichnungen für
d210 1
a210 1
Auf diese Weise können wir später noch Loopbackinterfaces hinzufüngen,
d216 3
a218 3
Es gibt keinen Grund, das empfohlene ,scrubbing', das auf den gesamten
eingehenden Verkehr angewandt wird, nicht zu verwenden, so dass dies ein
einfacher Einzeiler ist:
d244 2
a245 2
werden Klammern um das Übersetzungs-Interface herum gesetzt, so dass PF
bemerken wird, wenn die Adresse sich ändert.
d274 4
a277 4
Bedenke, dass diese Regel nur FTP-Verbindungen auf Port 21 erfasst wird. Wenn
sich Benutzer auf regulärer Basis auf FTP-Server auf anderen Ports verbinden,
sollte eine Liste verwendet werden, die die Ziel-Ports angibt, zum
Beispiel: <tt>from any to any port { 21, 2121 }</tt>.
d280 1
a280 1
Die letzte Umleitungs-Regel erfasst alle Versuche von Personen im
d304 2
a305 2
Die nächsten Regeln werden die Firewall - den oben genannten Zielen
entsprechend - öffnen, so wie alle benötigten virtuellen Interfaces.
d311 5
a315 5
filters, statt ganz genau zu sein wenn du Dinge filterst, die rein
oder raus gehen. In unserem Fall haben wir uns entschieden, den
eingehenden Verkehr zu filtern. Doch sobald der Netzwerkverkehr
in ein Interface hineingelassen wurde, werden wir nicht versuchen,
ihn am Verlassen zu hintern. Das ganze sieht dann wie folgt aus:
d353 3
a355 3
Die Netzwerk-Ports in dem Makro <tt>$tcp_services</tt> anzugeben, macht
es simpel, zusätzliche Dienste dem Internet anzubieten, indem diese
in dem Makro eingetragen werden und der Regelsatz neugeladen wird.
d358 1
a358 1
oben angegeben hinzugefügt wird, die <tt>proto udp</tt> angibt.
d361 1
a361 1
Zusätzlich zur <tt>rdr</tt>-Regel, die den Webserver-Verkehr zu COMP3
d385 4
a388 4
Dem <tt>$tcp_services</tt>-Makro ähnlich, kann der <tt>$icmp_types</tt>-Makro
einfach editiert werden, um die Typen der ICMP-Pakete zu
ändern, denen erlaubt wird, die Firewall zu erreichen. Bedenke, dass
diese Regel auf alle Netzwerk-Interfaces zutrifft.
d405 1
a405 1
»<tt>pass out keep state</tt>« notwendig. ,State'-Informationen werden
d473 1
a473 1
$Translation: example1.html,v 1.15 2006/07/03 15:54:57 paldium Exp $<br>
@


1.12
log
@sync with Steelix CVS
@
text
@d73 3
a75 2
vom Internet aus zu gewähren. Dieses Dokument wird einen kompletten
Regelsatz durchgehen, der genau das macht.
d84 2
a85 2
      |            |                               ADSL
   ---+------+-----+------- fxp0 [ OpenBSD ] ep0 -------- ( Internet )
d99 2
a100 2
Der OpenBSD-Router ist ein Pentium 100 mit zwei Netzwerkkarten: eine
3com 3c509B (<tt>ep0</tt>) und eine Intel EtherExpress Pro/100
d102 1
a102 1
Der Router hat eine ADSL-Verbindung zum Internet und verwendet NAT, um
d121 1
a121 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d142 2
a143 1
wurde.
d156 2
a157 2
int_if = "fxp0"<br>
ext_if = "ep0"<br>
d159 2
a160 2
tcp_services = "{ 22, 113 }"<br>
icmp_types = "echoreq"<br>
d162 1
a162 4
priv_nets = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"
<br>
<br>
comp3 = "192.168.0.3"
d167 7
a173 7
Die ersten beiden Zeilen definieren das Netzwerk-Interface, auf dem
das Filtern stattfinden wird. Die dritte und vierte Zeile listen die
TCP-Portnummern der Dienste auf, die dem Internet gegenüber offengelegt
werden (SSH und ident/auth) und den ICMP-Pakettyp, dem erlaubt wird,
die Firewall-Maschine zu erreichen.
Die fünfte Zeile definiert das Loopback und die
<a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>-Adressblöcke.
d177 2
a178 2
<b>Hinweis</b>: Wenn die ADSL-Internetverbindung 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d180 1
a180 1
<tt>tun0</tt>-Interface stattfinden und <i>nicht</i> auf <tt>ep0</tt>.
d199 1
a199 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d206 1
a206 1
set skip on lo0
d209 4
d221 1
a221 1
scrub in all
d231 1
a231 1
nat on $ext_if from $int_if:network to any -&gt; ($ext_if)
d236 7
d247 13
d262 2
a263 2
Die erste benötigte Umleitungs-Regel ist für
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d265 1
a265 1
auf FTP-Server im Internet verbinden können.
d268 1
d280 1
a280 1
Die zweite Umleitungs-Regel erfasst alle Versuche von Personen im
d297 1
a297 1
block all<br>
d302 4
a305 4
Zu diesem Zeitpunkt wird nichts durch die Firewall gelassen, nicht
einmal vom internen Netzwerk. Die folgenden Regeln werden die Firewall,
den oben genannten Zielen entsprechend, öffnen, so wie alle benötigten
virtuellen Interfaces.
d308 9
a316 8
Als nächstes werden die
<a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>-Adressen
geblockt, wenn sie vom externen Interface herkommen. Diese
Adressen sollten niemals im öffentlichen Internet auftauchen, und
das Herausfiltern stellt sicher, dass der Router diese nicht aus
dem internen Netzwerk aus "auslaufen" (,leak') lässt und blockt ebenfalls
jegliche eingehenden Pakete mit einer Quell-Adresse, die aus einem dieser
Netzwerke kommt.
d319 1
a319 2
block drop in &nbsp;quick on $ext_if from $priv_nets to any<br>
block drop out quick on $ext_if from any to $priv_nets
d324 16
a339 8
Bedenke, dass <tt>blockdrop</tt> verwendet wird, um PF zu sagen, dass
nicht mit einem TCP-RST- oder ICMP-Unreachable-Paket geantwortet soll.
Da die RFC-1918-Adressen im Internet nicht existieren, werden jegliche
Pakete, die dorthin gesendet werden, niemals ankommen. Die
<tt>quick</tt>-Option wird benutzt, um PF zu sagen, dass der Rest der
Filterregeln nicht berücksichtigt werden soll, wenn eine der
vorherigen Regeln zutrifft; Pakete zu oder von den
<tt>$priv_nets</tt>-Netzwerken unverzüglich fallen lassen.
d343 2
a344 1
für das Internet verfügbar sein sollen:
d366 1
a366 1
pass in on $ext_if proto tcp from any to $comp3 port 80 \<br>
d377 1
a377 16
Damit wir in der Lage sind, aktive FTP-Verbindungen vom LAN aus
nutzen zu können, muss folgende Regel vorhanden sein, die die
ftp-data-Verbindung, die vom FTP Server eingeleitet wurde, zurück
zum Client lässt.
Da FTP-Verbindungen wegen ftp-proxy durch einen Proxy laufen, wird
die ftp-data-Verbindung tatsächlich angenommen, so dass die Daten zum
Client im LAN weitergeleitet werden.
<blockquote>
<tt>
pass in on $ext_if inet proto tcp from port 20 to ($ext_if) \<br>
&nbsp;&nbsp;&nbsp;&nbsp;user proxy flags S/SA keep state
</tt>
</blockquote>

<p>
ICMP-Verkehr muss nun durchgelassen werden:
d395 1
a395 1
restriktiverer Regelsatz wäre für bestimmte Umgebungen angebrachter.
d398 1
a398 50
pass in on $int_if from $int_if:network to any keep state
</tt>
</blockquote>

<p>
Die gerade genannte Regel wird jeglichen internen Maschinen erlauben,
Pakete durch die Firewall zu senden; jedoch wird sie der Firewall
<i>nicht</i> erlauben, eine Verbindung zu internen Maschinen
aufzubauen. Ist das eine gute Idee? Das kommt auf die genaueren
Details des Netzwerkaufbaus an. Wenn die Firewall ebenfalls ein
DHCP-Server ist, muss sie eventuell erst eine Adresse ,anpingen', um
ihre Verfügbarkeit sicherzustellen, bevor sie zugewiesen wird. Der
Firewall zu erlauben, eine Verbindung in das interne Netzwerk aufbauen
zu können, ermöglicht es jemanden, der mit ssh auf die Firewall vom
Internet aus zugegriffen hat, auf Maschinen im internen Netzwerk
zuzugreifen. 
Behalte aber im Hinterkopf, dass es kein großer Sicherheitsvorteil ist,
wenn man der Firewall <i>nicht</i> die Möglichkeit gibt, direkt mit dem
Netzwerk zu kommunizieren; wenn jemand Zugriff auf die Firewall erhält,
könnte es eventuell sein, dass dieser die Filterregeln sowieso ändert.
Durch das Hinzufügen dieser Regel wird die Firewall in der Lage sein,
Verbindungen ins interne Netzwerk aufzubauen:
<blockquote>
<tt>
pass out on $int_if from any to $int_if:network keep state
</tt>
</blockquote>

<p>
Bedenke, dass, wenn beide Zeilen vorhanden sind, die
<tt>keep state</tt>-Option nicht benötigt wird; alle Pakete werden in
der Lage sein, das interne Interface zu passieren, da hier eine Regel
ist, die Pakete in beide Richtungen durchlässt. Trotz allem, wenn die
<tt>pass out</tt>-Zeile <i>nicht</i> mit eingebunden ist, <i>muss</i>
die <tt>pass in</tt>-Zeile <tt>keep state</tt> mit einbinden. Es gibt
sogar einen Leistungsbonus, wenn man ,keep state' verwendet:
,State'-Tabellen werden verarbeitet, bevor die Regeln überprüft werden,
und wenn eine ,state'-Übereintreffung gefunden wird, wird das Paket
durch die Firewall gelassen, ohne dass die Regelsatzüberprüfung
durchlaufen werden muss, obwohl solch ein einfaches System wahrscheinlich
nicht genug Last aufbringen wird, als dass es einen Unterschied machen
könnte.

<p>
Schlussendlich muss der Verkehr aus dem externen Interface gelassen
werden:
<blockquote>
<tt>
pass out on $ext_if proto tcp all modulate state flags S/SA<br>
pass out on $ext_if proto { udp, icmp } all keep state
d404 4
a407 2
verlassen. ,State'-Informationen werden aufbewahrt, so dass die
wiederkommenden Pakete durch die Firewall gelassen werden.
d415 2
a416 2
int_if = "fxp0"
ext_if = "ep0"
d418 2
a419 2
tcp_services = "{ 22, 113 }"
icmp_types = "echoreq"
d421 1
a421 3
priv_nets = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8 }"
	  
comp3 = "192.168.0.3"
d426 2
a427 1
set skip on lo0
d430 1
a430 1
scrub in all
d433 6
a438 4
nat on $ext_if from $int_if:network to any -&gt; ($ext_if)
rdr on $int_if proto tcp from any to any port 21 -&gt; 127.0.0.1 \
   port 8021
rdr on $ext_if proto tcp from any to any port 80 -&gt; $comp3
d441 1
a441 1
block all
d443 4
a446 2
block drop in  quick on $ext_if from $priv_nets to any
block drop out quick on $ext_if from any to $priv_nets
d451 2
a452 5
pass in on $ext_if proto tcp from any to $comp3 port 80 \
   flags S/SA synproxy state

pass in on $ext_if inet proto tcp from port 20 to ($ext_if) \
   user proxy flags S/SA keep state
d456 1
a456 5
pass in  on $int_if from $int_if:network to any keep state
pass out on $int_if from any to $int_if:network keep state

pass out on $ext_if proto tcp all modulate state flags S/SA
pass out on $ext_if proto { udp, icmp } all keep state
d472 2
a473 2
Originally [OpenBSD: example1.html,v 1.22 ]<br>
$Translation: example1.html,v 1.13 2006/04/24 17:44:30 paldium Exp $<br>
@


1.11
log
@sync with steelix translation CVS
@
text
@a5 1
<meta http-equiv="Content-Language" content="de">
d8 1
a8 1
<meta name="description"   content="Die OpenBSD-FAQ-Seite">
d505 2
a506 2
Originally [OpenBSD: example1.html,v 1.22 ]
$Translation: example1.html,v 1.12 2006/01/04 11:32:23 paldium Exp $
@


1.10
log
@sync with steelix translation CVS
@
text
@d196 16
a284 14
Jedes Unix-System hat ein ,loopback'-Interface. Es ist ein virtuelles
Netzwerk-Interface, das von Applikationen verwendet wird, um auf dem
gleichen System untereinander zu kommunizieren. Generell gilt, dass
der gesamte Verkehr auf dem Loopback-Interface durchgelassen werden
sollte. Unter OpenBSD ist 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+3.8"
>lo(4)</a> das Loopback-Interface.
<blockquote>
<tt>
pass quick on lo0 all
</tt>
</blockquote>

<p>
d458 1
a471 2
pass quick on lo0 all

d506 2
a507 2
Originally [OpenBSD: example1.html,v 1.21 ]
$Translation: example1.html,v 1.11 2005/11/04 11:01:45 paldium Exp $
@


1.9
log
@sync with Steelix CVS
@
text
@d121 1
a121 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d180 1
a180 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d225 1
a225 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d274 1
a274 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d505 2
a506 2
Originally [OpenBSD: example1.html,v 1.20 ]
$Translation: example1.html,v 1.10 2005/09/14 16:16:38 paldium Exp $
@


1.8
log
@sync with Steelix CVS
@
text
@d6 1
a8 1
<meta http-equiv="Content-Language" content="de">
d506 1
a506 1
$Translation: example1.html,v 1.9 2005/07/26 10:44:24 paldium Exp $
@


1.7
log
@sync with Steelix CVS
@
text
@d39 1
a39 1
[<a href="../carp.html">Zurück: Firewal-Redundanz mit CARP und pfsync</a>]
d495 1
a495 1
[<a href="../carp.html">Zurück: Firewal-Redundanz mit CARP und pfsync</a>]
d506 1
a506 1
$Translation: example1.html,v 1.8 2005/05/21 23:32:02 paldium Exp $
@


1.6
log
@sync with steelix translation CVS
@
text
@d39 1
a39 2
[<a href="authpf.html">Zurück: Authpf: Benutzer-Shell für authentifizierende
Gateways</a>]
d495 1
a495 2
[<a href="authpf.html">Zurück: Authpf: Benutzer-Shell für authentifizierende
Gateways</a>]
d505 2
a506 2
Originally [OpenBSD: example1.html,v 1.19 ]
$Translation: example1.html,v 1.6 2005/05/20 16:33:52 paldium Exp $
@


1.5
log
@Sync with Steelix CVS
@
text
@d122 1
a122 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d181 1
a181 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d226 1
a226 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d275 1
a275 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d507 2
a508 2
Originally [OpenBSD: example1.html,v 1.18 ]
$Translation: example1.html,v 1.5 2005/01/18 14:33:46 paldium Exp $
@


1.4
log
@Sync with Steelix CVS
@
text
@d9 1
a9 1
<meta name="description"   content="die OpenBSD-FAQ-Seite">
d506 5
a510 3
Originally [OpenBSD: example1.html,v 1.18 ]<br>
$Translation: example1.html,v 1.4 2004/12/22 12:29:53 paldium Exp $<br>
$OpenBSD: example1.html,v 1.18 2004/12/22 04:28:16 david Exp $
@


1.3
log
@sync with Steelix CVS
@
text
@d35 3
a37 1
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif">
d506 3
a508 3
Originally [OpenBSD: example1.html,v 1.17 ]<br>
$Translation: example1.html,v 1.3 2004/12/07 16:56:32 paldium Exp $<br>
$OpenBSD: example1.html,v 1.17 2004/11/01 21:41:07 nick Exp $
@


1.2
log
@Sync with Steelix CVS
@
text
@d8 2
a9 1
<meta name="description"   content="Die OpenBSD FAQ Seite">
d69 2
a70 2
In diesem Beispiel läuft PF auf einer OpenBSD Maschine, derren Aufgabe
es ist, als Firewall und NAT Gateway für ein kleines Netzwerk zuhause
d93 1
a93 1
sind reguläre Arbeitsplätze, die für Web Surfen, E-Mail, Chatten, etc.
d95 1
a95 2
Das interne Netzwerk verwendet den 192.168.0.0 / 255.255.255.0
Netzwerkblock.
d98 1
a98 1
Der OpenBSD Router ist ein Pentium 100 mit zwei Netzwerkkarten: eine
d101 2
a102 2
Der Router hat eine ADSL Verbindung zum Internet und verwendet NAT, um
diese Verbindung mit dem internen Netzwerk zu teilen. Die IP Adresse
d111 1
a111 1
<li>Verwende einen "standardmäßiges Blocken" Filter-Regelsatz.
d115 3
a117 3
	<li>SSH (TCP Port 22): Dies wird für externe Wartung der Firewall
	Maschine benötigt.
	<li>Auth/Ident (TCP Port 113): wird von einigen Diensten wie
d119 1
a119 1
	<li>ICMP Echo Anfragen: der ICMP Pakettyp, der von
d124 1
a124 1
<li>Leite TCP Port 80 Verbindungsanfragen (die versuchen, auf den
d126 2
a127 2
Lasse ebenfalls TCP Port 80 Verkehr durch die Firewall zu, der für
COMP3 bestimmt war.
d137 1
a137 1
Dieses Dokument nimmt an, dass der OpenBSD Host ordentlich
d139 2
a140 2
der Überprüfung der IP Netzwerk-Einstellungen, Internet Verbindung
und dass <tt>net.inet.ip.forwarding</tt> auf "<tt>1</tt>" eingestellt
d168 1
a168 1
Die ersten beiden Linien definieren das Netzwerk-Interface, auf dem
d170 2
a171 2
TCP Portnummern der Dienste auf, die dem Internet gegenüber offengelegt
werden (SSH und ident/auth) und den ICMP Pakettyp, dem erlaubt wird,
d174 2
a175 3
<a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>
Adressblöcke.
Und zum Schluss definiert die letzte Zeile die IP Adresse von COMP3.
d178 1
a178 1
<b>Hinweis</b>: Wenn die ADSL Internetverbindung 
d180 2
a181 2
>PPPoE</a> benötigt, dann werden Filter und NAT auf dem <tt>tun0</tt>
Interface stattfinden und <i>nicht</i> auf <tt>ep0</tt>.
d185 2
a186 2
Die folgenden zwei Optionen werden die standardmäßige Antwort für
<tt>block</tt> Filter-Regeln setzen und Statistik-Aufzeichnungen für
d217 2
a218 2
Da die IP Adresse des externen Interfaces dynamisch zugewiesen wird,
werden Klammern um das Translation-Interface herum gesetzt, so dass PF
d222 2
a223 2
<h3>Redirection</h3>
Die erste benötigte ,redirection' Regel ist für
d225 2
a226 2
>ftp-proxy(8)</a>, so dass sich FTP Clients vom lokalen Netzwerk aus
auf FTP Server im Internet verbinden können.
d234 2
a235 2
Bedenke, dass diese Regel nur FTP Verbindungen auf Port 21 erfasst. Wenn
Benutzer auf regulärer Basis auf FTP Server auf anderen Ports verbinden,
d240 3
a242 3
Die zweite ,redirection' Regel erfasst alle Versuche von Personen im
Internet, die auf den TCP Port 80 der Firewall verbinden wollen.
Berechtige Versuche, diesen Port zu errechen, werden von Benutzern
d254 1
a254 1
Nun die Filter-Regeln. Fange mit standardmäßigem Blocken an:
d262 1
a262 1
Zu diesem Zeitpunkt wird nichts durch die Firewall geladen, nicht
d268 2
a269 2
Jedes Unix System hat ein "loopback" Interface. Es ist ein virtuelles
Netzwerk Interface, das von Applikationen verwendet wird, um auf dem
d271 1
a271 1
der gesamte Verkehr auf dem Loopback Interface durchgelassen werden
d274 1
a274 1
>lo(4)</a> das Loopback Interface.
d283 2
a284 2
<a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a>
Adressen geblockt, wenn sie vom externen Interface herkommen. Diese
d288 1
a288 1
jegliche eingehende Pakete mit einer Quelladresse, die aus einem dieser
d299 2
a300 2
nicht mit einem TCP RST oder ICMP Unreachable Paket geantwortet soll.
Da die RFC 1918 Adressen im Internet nicht existieren, werden jegliche
d302 4
a305 4
<tt>quick</tt> Option wird benutzt, um PF zu sagen, dass der Rest der
Filter-Regeln nicht berücksichtigt werden sollen, wenn eine der
vorherigen Regeln zutrifft; Pakete zu oder von den <tt>$priv_nets</tt>
Netzwerken unverzüglich fallen lassen.
d320 4
a323 4
in dem Makro eingetragen werden und der Regelsatz neugeladen wird. UDP
Dienste können ebenfalls geöffnet werden, indem ein <tt>$udp_services</tt>
Makro erstellt wird und eine Filter-Regel so wie oben angegeben hinzugefügt
wird, die <tt>proto udp</tt> angibt.
d326 1
a326 1
Zusätzlich zur <tt>rdr</tt> Regel, die den Webserver-Verkehr zu COMP3
d337 2
a338 2
Für ein bisschen mehr Sicherheit, werden wir den
<a href="filter.html#synproxy">TCP SYN Proxy</a> verwenden, um den
d342 6
a347 6
Damit wir in der Lage sind, aktive FTP Verbindungen vom LAN aus
nutzen zu können, muss folgende Regel vorhanden sein, die die ftp-data
Verbindung, die vom FTP Server eingeleitet wurde, zurück zum Client
lässt.
Da FTP Verbindungen wegen ftp-proxy durch einen Proxy laufen, wird
die ftp-data Verbindung tatsächlich angenommen, so dass die Daten zum
d357 1
a357 1
ICMP Verkehr muss nun durchgelassen werden:
d365 2
a366 2
Dem <tt>$tcp_services</tt> Makro ähnlich, kann der <tt>$icmp_types</tt>
Makro einfach editiert werden, um die Typen der ICMP Pakete zu
d388 1
a388 1
DHCP Server ist, muss sie eventuell erst eine Adresse "anpingen", um
d397 1
a397 1
könnte es eventuell sein, dass dieser die Filter-Regeln sowieso ändert.
d407 9
a415 9
Bedenke, dass, wenn beide Zeilen vorhanden sind, die <tt>keep state</tt>
Option nicht benötigt wird; alle Pakete werden in der Lage sein, das
interne Interface zu passieren, da hier eine Regel ist, die Pakete
in beide Richtungen durchlässt. Trotz allem, wenn die <tt>pass out</tt>
Zeile <i>nicht</i> mit eingebunden ist, <i>muss</i> die <tt>pass in</tt>
Zeile <tt>keep state</tt> mit einbinden. Es gibt sogar einen
Leistungsbonus, wenn man ,keep state' verwendet:
,State' Tabellen werden verarbeitet, bevor die Regeln überprüft werden,
und wenn eine ,state' Übereintreffung gefunden wird, wird das Paket
d432 2
a433 2
TCP, UDP und ICMP Verkehr darf die Firewall in Richtung Internet
verlassen. ,State' Informationen werden aufbewahrt, so dass die
d441 1
a441 1
# macros
d452 1
a452 1
# options
d465 1
a465 1
# filter rules
d500 1
a500 1
<a href="index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a> 
d504 4
a507 5
Originally [OpenBSD: example1.html,v 1.17 ]
<br>
$Translation: example1.html,v 1.2 2004/11/24 21:11:39 paldium Exp $
<br></small>
<small>$OpenBSD: example1.html,v 1.17 2004/11/01 21:41:07 nick Exp $</small>
@


1.1
log
@Sync with Steelix CVS
@
text
@d4 1
a4 1
<title>PF: Example #1: Firewall for Home or Small Office</title>
d8 1
a8 1
<meta name="description"   content="the OpenBSD FAQ page">
a10 1
<meta name="copyright"     content="This document copyright 2003 by OpenBSD.">
d13 17
d34 1
a34 1
<img alt="[OpenBSD]" height=30 width=141 src="../../../images/smalltitle.gif">
d36 1
a36 1
[<a href="authpf.html">Previous: Authpf: User Shell for Authenticating
d38 1
a38 1
[<a href="index.html">Contents</a>]
d41 1
a41 1
<h1><font color="#e00000">PF: Example #1: Firewall for Home or Small Office</font></h1>
d44 1
a44 1
<h3>Table of Contents</h3>
d46 1
a46 1
<li><a href="#scenario">The Scenario</a>
d48 3
a50 3
	<li><a href="#network">The Network</a>
	<li><a href="#objective">The Objective</a>
	<li><a href="#prep">Preparation</a>
d52 1
a52 1
<li><a href="#ruleset">The Ruleset</a>
d54 2
a55 2
	<li><a href="#macros">Macros</a>
	<li><a href="#options">Options</a>
d59 1
a59 1
	<li><a href="#filter">Filter Rules</a>
d61 1
a61 1
<li><a href="#allrules">The Complete Ruleset</a>
d67 7
a73 6
<h2>The Scenario</h2>
In this example, PF is running on an OpenBSD machine acting as a
firewall and NAT gateway for a small network in a home or office. The
overall objective is to provide Internet access to the network and to
allow limited access to the firewall machine from the Internet. This
document will go through a complete ruleset that does just that.
d76 2
a77 2
<h3>The Network</h3>
The network is setup like this:
d90 6
a95 4
There are a number of computers on the internal network; the diagram
shows three but the actual number is irrelevant.  These computers are
regular workstations used for web surfing, email, chatting, etc. The
internal network is using the 192.168.0.0 / 255.255.255.0 network block.
d98 7
a104 5
The OpenBSD router is a Pentium 100 with two network cards: a 3com
3c509B (ep0) and an Intel EtherExpress Pro/100 (fxp0).  The router has
an ADSL connection to the Internet and is using NAT to share this
connection with the internal network. The IP address on the external
interface is dynamically assigned by the Internet Service Provider.
d107 2
a108 2
<h3>The Objective</h3>
The objectives are:
d110 4
a113 4
<li>Provide unrestricted Internet access to each internal computer.
<li>Use a "default deny" filter ruleset.
<li>Allow the following incoming traffic to the firewall from the
Internet:
d115 8
a122 7
	<li>SSH (TCP port 22): this will be used for external maintenance of
	the firewall machine.
	<li>Auth/Ident (TCP port 113): used by some services such as SMTP
	and IRC.
	<li>ICMP Echo Requests: the ICMP packet type used by
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ping&amp;sektion=8&amp;manpath=OpenBSD+3.4"
>ping(8)</a>.
d124 9
a132 4
<li>Log filter statistics on the external interface.
<li>By default, reply with a TCP RST or ICMP Unreachable for blocked
packets.
<li>Make the ruleset as simple and easy to maintain as possible.
d136 6
a141 4
<h3>Preparation</h3>
This document assumes that the OpenBSD host has been properly configured
to act as a router, including verifying IP networking setup, Internet
connectivity, and setting <tt>net.inet.ip.forwarding</tt> to "<tt>1</tt>".
d144 3
a146 3
<h2>The Ruleset</h2>
The following will step through a ruleset that will accomplish the above
goals.
d149 3
a151 3
<h3>Macros</h3>
The following macros are defined to make maintenance and reading of
the ruleset easier:
d161 3
d168 9
a176 7
The first two lines define the network interfaces that filtering will
happen on. The third and fourth lines list the TCP port numbers of the services
that will be opened up to the Internet (SSH and ident/auth) and the ICMP
packet types that will be permitted to reach the firewall machine. The last
line defines the loopback and
<a href="http://www.geektools.com/rfc/rfc1918.txt">RFC 1918</a> address
blocks.
d179 4
a182 4
<b>Note</b>: If the ADSL Internet connection required
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pppoe&amp;sektion=8&amp;manpath=OpenBSD+3.4"
>PPPoE</a>, then filtering and NAT would have to take place on the
<tt>tun0</tt> interface and <i>not</i> on <tt>ep0</tt>.
d185 4
a188 4
<h3>Options</h3>
The following two options will set the default response for
<tt>block</tt> filter rules and turn statistics logging "on" for the
external interface:
d198 3
a200 2
There is no reason not to use the recommended scrubbing of all incoming
traffic, so this is a simple one-liner:
d209 2
a210 2
To perform NAT for the entire internal network the following
<tt>nat</tt> rule is used:
d218 3
a220 3
Since the IP address on the external interface is assigned dynamically,
parenthesis are placed around the translation interface so that PF
will notice when the address changes.
d224 4
a227 4
The only redirection needed is for 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ftp-proxy&amp;sektion=8&amp;manpath=OpenBSD+3.4"
>ftp-proxy(8)</a> so that FTP clients on the local network can connect
to FTP servers on the Internet.
d235 17
a251 4
Note that this rule will only catch FTP connections to port 21. If users
regularly connect to FTP servers on other ports, then a list should be
used to specify the destination port, for example: <tt>from any to any
port { 21, 2121 }</tt>.
d254 2
a255 2
<h3>Filter Rules</h3>
Now the filter rules. Start with the default deny:
d263 4
a266 4
At this point nothing will go through the firewall, not even from the
internal network. The following rules will open up the firewall as per
the objectives above as well as open up any necessary virtual
interfaces.
d269 7
a275 6
Every Unix system has a "loopback" interface. It's a virtual network interface that
is used by applications to talk to each other inside the system. In general,
all traffic should be passed on the loopback interface. On OpenBSD, the
loopback interface is 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+3.4"
>lo(4)</a>.
d283 1
a283 1
Next, the
d285 6
a290 5
addresses will be blocked from entering or exiting the external
interface. These addresses should never appear on the public Internet,
and filtering them will ensure that the router does not "leak" these
addresses out from the internal network and also block any incoming
packets with a source address in one of those networks.
d299 8
a306 7
Note that <tt>block drop</tt> is used to tell PF not to respond with a
TCP RST or ICMP Unreachable packet. Since the RFC 1918 addresses don't
exist on the Internet, any packets sent to those addresses will never
make it there anyways. The <tt>quick</tt> option is used to tell PF not
to bother evaluating the rest of the filter rules if one of the above
rules matches; packets to or from the <tt>$priv_nets</tt> networks will
be immediately dropped.
d309 2
a310 2
Now open the ports used by those network services that will be available
to the Internet:
d319 22
a340 5
Specifying the network ports in the macro <tt>$tcp_services</tt> makes
it simple to open additional services to the Internet by simply editing
the macro and reloading the ruleset. UDP services can also be opened up
by creating a <tt>$udp_services</tt> macro and adding a filter rule,
similar to the one above, that specifies <tt>proto udp</tt>.
d343 16
a358 1
ICMP traffic must now be passed:
d366 4
a369 4
Similar to the <tt>$tcp_services</tt> macro, the <tt>$icmp_types</tt>
macro can easily be edited to change the types of ICMP packets that will
be allowed to reach the firewall. Note that this rule applies to all
network interfaces.
d372 5
a376 5
Now traffic must be passed to and from the internal network.
We'll assume that the users on the internal network know what
they are doing and aren't going to be causing trouble.  This is not
necessarily a valid assumption; a much more restrictive ruleset would
be appropriate for some environments.
d384 17
a400 13
The above rule will permit any internal machine to send packets through
the firewall; however, it will <i>not</i> permit the firewall to
initiate a connection to an internal machine. Is this a good idea? That
depends on some of the finer details of the network setup. If the
firewall is also a DHCP server, it may need to "ping" an address to
verify its availability before assigning it. Permitting the firewall to
connect to the internal network also allows someone who has ssh'ed into
the firewall from the Internet to then access machines on the network.
Keep in mind that <i>not</i> allowing the firewall to communicate
directly to the network is not a large security benefit; if someone gets
access to the firewall they can probably alter the filter rules anyways.
By adding the following rule, the firewall will be able to initiate
connections to the internal network:
d408 13
a420 11
Note that if both of these lines are in place, the <tt>keep state</tt>
option is not needed; all packets will be able to pass through the
internal interface because there is a rule to pass packets in both
directions.  However, if the <tt>pass out</tt> line is <i>not</i>
included, the <tt>pass in</tt> line <i>must</i> include <tt>keep
state</tt>.  There is also some performance benefit to keeping state:
State tables are checked before rules are evaluated, and if a state
match is found, the packet is passed through the firewall without going
through ruleset evaluation. This can offer a performance benefit on a
heavily loaded firewall, though in a system this simple it is unlikely
to generate enough load to matter.
d423 2
a424 1
Finally, pass traffic out on the external interface:
d433 3
a435 3
TCP, UDP, and ICMP traffic is permitted to exit the firewall towards the
Internet. State information is kept so that the returning packets will
be passed in through the firewall.
d438 1
a438 1
<h2>The Complete Ruleset</h2>
d451 2
d464 1
d477 6
d495 1
a495 1
[<a href="authpf.html">Previous: Authpf: User Shell for Authenticating
d497 1
a497 1
[<a href="index.html">Contents</a>]
d501 1
a501 1
<a href="../../de/index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[back]"></a> 
d505 5
a509 4
Originally [OpenBSD: example1.html,v 1.10 ]<br>
$Translation: example1.html,v 1.1 2003/11/27 17:34:57 sl Exp $<br>
$OpenBSD$
</small>
@

