head	1.47;
access;
symbols;
locks; strict;
comment	@# @;


1.47
date	2014.04.01.17.18.45;	author nick;	state dead;
branches;
next	1.46;

1.46
date	2013.11.01.18.04.05;	author ajacoutot;	state Exp;
branches;
next	1.45;

1.45
date	2013.05.01.17.39.07;	author ajacoutot;	state Exp;
branches;
next	1.44;

1.44
date	2013.05.01.14.42.14;	author ajacoutot;	state Exp;
branches;
next	1.43;

1.43
date	2012.11.02.07.24.05;	author ajacoutot;	state Exp;
branches;
next	1.42;

1.42
date	2012.10.11.14.26.22;	author ajacoutot;	state Exp;
branches;
next	1.41;

1.41
date	2012.08.21.19.23.27;	author ajacoutot;	state Exp;
branches;
next	1.40;

1.40
date	2012.05.13.16.30.18;	author ajacoutot;	state Exp;
branches;
next	1.39;

1.39
date	2012.03.15.07.26.49;	author ajacoutot;	state Exp;
branches;
next	1.38;

1.38
date	2012.01.21.19.34.39;	author ajacoutot;	state Exp;
branches;
next	1.37;

1.37
date	2009.12.22.17.49.10;	author ajacoutot;	state Exp;
branches;
next	1.36;

1.36
date	2009.11.07.07.32.54;	author ajacoutot;	state Exp;
branches;
next	1.35;

1.35
date	2009.05.04.19.07.52;	author tobias;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.22.20.35.21;	author tobias;	state Exp;
branches;
next	1.33;

1.33
date	2008.11.01.11.02.22;	author tobias;	state Exp;
branches;
next	1.32;

1.32
date	2008.08.10.16.14.28;	author tobias;	state Exp;
branches;
next	1.31;

1.31
date	2008.03.09.13.37.13;	author tobias;	state Exp;
branches;
next	1.30;

1.30
date	2008.01.13.13.43.34;	author tobias;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.12.20.29.59;	author saad;	state Exp;
branches;
next	1.28;

1.28
date	2007.05.10.12.43.45;	author saad;	state Exp;
branches;
next	1.27;

1.27
date	2007.04.26.03.08.05;	author jufi;	state Exp;
branches;
next	1.26;

1.26
date	2007.02.10.05.22.16;	author saad;	state Exp;
branches;
next	1.25;

1.25
date	2006.11.23.08.52.58;	author jufi;	state Exp;
branches;
next	1.24;

1.24
date	2006.11.01.11.30.45;	author jufi;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.29.10.58.52;	author jufi;	state Exp;
branches;
next	1.22;

1.22
date	2006.08.12.15.36.37;	author jufi;	state Exp;
branches;
next	1.21;

1.21
date	2006.08.08.07.14.20;	author saad;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.01.12.19.17;	author jufi;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.25.08.25.49;	author saad;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.12.20.34.43;	author jufi;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.14.11.36.00;	author jufi;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.06.12.42.41;	author jufi;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.04.20.24.23;	author jufi;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.16.10.14.28;	author saad;	state Exp;
branches;
next	1.13;

1.13
date	2005.09.20.07.30.02;	author saad;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.13.07.55.57;	author saad;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.22.17.38.07;	author saad;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.20.17.13.26;	author jufi;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.19.18.23.06;	author jufi;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.04.17.52.25;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.28.20.30.24;	author saad;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.31.10.57.42;	author saad;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.18.17.18.10;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.22.20.00.48;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.08.05.22.43;	author saad;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.01.19.35.52;	author jufi;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.27.19.39.09;	author horacio;	state Exp;
branches;
next	;


desc
@@


1.47
log
@
missed another one...
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>PF: Pakete filtern</title>
<link rev="made" href="mailto:www@@openbsd.org">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="resource-type" content="document">
<meta name="description"   content="the OpenBSD FAQ page">
<meta name="keywords"      content="openbsd,faq,pf">
<meta name="distribution"  content="global">
</head>

<!--
Copyright (c) 2003-2007 Joel Knight <enabled@@myrealbox.com>

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<body bgcolor="#ffffff" text="#000000">
<!-- Passes validator.w3.org, please keep it this way;
please, use a max of 72 chars per line -->

<a href="../../../de/index.html">
<img alt="[OpenBSD]" height=30 width=141 src="../../../images/smalltitle.gif" border="0">
</a>
<p>
[<a href="tables.html">Zurück: Tabellen</a>]
[<a href="index.html">Inhalt</a>]
[<a href="nat.html">Weiter: Network Address Translation</a>]

<h1><font color="#e00000">PF: Pakete filtern</font></h1>

<hr>

<h3>Inhaltsverzeichnis</h3>
<ul>
<li><a href="#intro">Einführung</a>
<li><a href="#syntax">Regelsyntax</a>
<li><a href="#defdeny">Standardmäßiges Blocken</a>
<li><a href="#pass">Verkehr durchlassen</a>
<li><a href="#quick">Das <tt>quick</tt>-Schlüsselwort</a>
<li><a href="#state">Status halten</a>
<li><a href="#udpstate">Status für UDP halten</a>
<li><a href="#stateopts">Optionen für zustandsabhängiges Tracking</a>
<li><a href="#tcpflags">TCP-Flags</a>
<li><a href="#synproxy">TCP-SYN-Proxy</a>
<li><a href="#antispoof">Blockade gefälschter Pakete</a>
<li><a href="#urpf">Unicast Reverse Path Forwarding</a>
<li><a href="#osfp">Passives Betriebssystemfingerprinting</a>
<li><a href="#ipopts">IP-Optionen</a>
<li><a href="#example">Beispiel-Filterregelsatz</a>
</ul>

<hr>

<a name="intro"></a>
<h2>Einführung</h2>
Mit dem Filtern von Paketen ist das selekte Durchlassen oder Blocken
von Datenpaketen gemeint, sobald sie durch das Netzwerkinterface
gehen. Die Kriterien, die
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.4"
>pf(4)</a> verwendet, wenn Pakete untersucht werden, basieren auf den
Layer-3-
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4"
>IPv4</a> und
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4"
>IPv6</a>) und Layer-4-
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4"
>TCP</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4"
>UDP</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4"
>ICMP</a> und
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4"
>ICMPv6</a>) Headern. Die meistgenutzten Kriterien sind Quell- und
Zieladressen sowie Zielport und das Protokoll.

<p>
Filterregeln geben sowohl die Kriterien an, auf die ein Paket zutreffen
muss, als auch die resultierende Handlung (blocken oder durchlassen), die
durchgeführt wird, wenn eine Übereintreffung gefunden wird. Filterregeln
werden in sequenzieller Reihenfolge verarbeitet: von der ersten bis zur
letzten. Solange das Paket nicht auf eine Regel trifft, die das
<tt>quick</tt>-Schlüsselwort beinhaltet, werden <i>alle</i> Filterregeln
überprüft, bevor die schlussendliche Aktion durchgeführt wird. Die letzte
Regel, die zutrifft, ist der Gewinner und wird die Aktion angeben, die
auf das Paket angewandt wird. Es gibt ein impliziertes <tt>pass all</tt>
am Anfang des Filterregelsatzes, das bedeutet, dass falls ein Paket auf
keine Filterregel zutrifft, die resultierende Aktion <tt>pass</tt> sein
wird.

<a name="syntax"></a>
<h2>Regelsyntax</h2>
Die generelle <i>höchstgradig vereinfachte</i> Syntax für Filterregeln
ist:
<blockquote>
<tt>
<i>action</i> [<i>direction</i>] [log] [quick] [on <i>interface</i>]
[<i>af</i>] [proto <i>protocol</i>] \<br>
&nbsp;&nbsp;&nbsp;[from <i>src_addr</i> [port <i>src_port</i>]] [to
<i>dst_addr</i> [port <i>dst_port</i>]] \<br>
&nbsp;&nbsp;&nbsp;[flags <i>tcp_flags</i>] [<i>state</i>]
</tt>
</blockquote>

<dl>
<dt><tt><i>action</i></tt>
<dd>Die Aktion, die für zutreffende Pakete angewandt werden soll:
<tt>pass</tt> oder <tt>block</tt>. Die <tt>pass</tt>-Aktion wird das
Paket zurück zum Kernel für weitere Verarbeitung lassen, während die
<tt>block</tt>-Aktion je nach der
<a href="options.html#block-policy"><tt>block-policy</tt></a>-Option
anders reagieren wird. Die standardmäßige Reaktion kann entweder durch
Angabe von <tt>block drop</tt> oder <tt>block return</tt>
verändert werden.

<dt><tt><i>direction</i></tt>
<dd>Die Richtung, in die das Paket sich bewegt: rein (<tt>in</tt>)
oder raus (<tt>out</tt>).

<dt><tt>log</tt>
<dd>Gibt an, dass das Paket per
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.4"
>pflogd(8)</a> aufgezeichnet werden soll. Wenn die Regel zustandsbezogen
ist, dann wird nur das Paket aufgezeichnet, das den Status aufgebaut hat.
Um alle Pakete unabhängig davon aufzuzeichnen, verwende
<tt>log (all)</tt>.

<dt><tt>quick</tt>
<dd>Wenn ein Paket auf eine Regel zutrifft, die <tt>quick</tt> angibt,
dann wird die Regel als letzte zutreffende Regel angesehen, wodurch
sie die Aktion (<tt><i>action</i></tt>) angibt, die durchgeführt werden
soll.

<dt><tt><i>interface</i></tt>
<dd>Der Name eines Netzwerkinterfaces (bzw. die Gruppe von
Netzwerkinterfaces) durch das sich das Paket bewegt.
Interfaces können mit dem
<a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8"
>ifconfig(8)</a>-Kommando zu beliebigen Gruppen hinzugefügt werden.
Einige Gruppen werden automatisch vom Kernel erstellt:
<ul>
<li>Die <tt>egress</tt>-Gruppe, die Interfaces enthält, die die
Standardroute(n) enthalten.
<li>Interfacefamiliengruppe für geklonte Interfaces.
Zum Beispiel <tt>ppp</tt> oder <tt>carp</tt>.
</ul>
Dies wird dazu führen, dass die Regel für jedes Paket zutrifft, das
das <tt>ppp</tt>- oder <tt>carp</tt>-Interface durchläuft - je nachdem.

<dt><tt><i>af</i></tt>
<dd>Die Adressfamilie des Pakets: <tt>inet</tt> für IPv4 oder
<tt>inet6</tt> für IPv6. PF ist normalerweise in der Lage, anhand der
Parameter für die Quell- und/oder Zieladresse(n) das selbst zu
erkennen.

<dt><tt><i>protocol</i></tt>
<dd>Die Layer-4-Protokolle des Pakets:
<ul>
<li><tt>tcp</tt>
<li><tt>udp</tt>
<li><tt>icmp</tt>
<li><tt>icmp6</tt>
<li>Ein gültiger Protokollname aus
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5"
><tt>/etc/protocols</tt></a>
<li>Eine Protokollnummer zwischen 0 und 255
<li>Ein Satz an Protokollen unter Verwendung einer
    <a href="macros.html#lists">Liste</a>.
</ul>

<dt><tt><i>src_addr</i></tt>, <tt><i>dst_addr</i></tt>
<dd>Die Quell/Zieladresse im IP-Header. Adressen können wie folgt
angegeben werden:
<ul>
<li>Eine einzelne IPv4- oder IPv6-Adresse.
<li>Ein
<a href="http://public.swbell.net/dedicated/cidr.html">CIDR</a>-Netzwerkblock
<li>Ein »fully qualified domain name«, der per DNS aufgelöst wird, wenn
der Regelsatz geladen wird. Alle resultierenden IP-Adressen werden in
die Regel eingesetzt.
<li>Der Name des Netzwerkinterfaces. Jegliche IP-Adressen, die dem
Interface zugewiesen worden sind, werden in die Regel eingesetzt.
<li>Der Name des Netzwerkinterfaces gefolgt von
<tt>/<i>netmask</i></tt> (z.&nbsp;B. <tt>/24</tt>). Jede IP-Adresse auf
dem Interface wird mit der Netzmaske kombiniert, um einen
CIDR-Netzwerkblock zu formen, welcher in die Regel eingesetzt wird.
<li>Der Name des Netzwerkinterfaces oder der Gruppe in Klammern
<tt>( )</tt>. Die Klammern teilen PF mit, dass die Regel sich
aktualisieren soll, wenn sich die IP-Adresse(n) des genannten
Interfaces ändert/ändern. Dies ist insbesondere dann sinnvoll, wenn die
IP-Adresse per DHCP oder dial-up erhalten wird, da der Regelsatz so
nicht jedes Mal neugeladen werden muss, wenn sich die Adresse ändert.
<li>Der Name eines Netzwerkinterfaces gefolgt von einem dieser
Modifizierer:
  <ul>
  <li><tt>:network</tt> - fügt den CIDR-Netzwerkblock ein (z.&nbsp;B.
  192.168.0.0/24)
  <li><tt>:broadcast</tt> - fügt die Netzwerk-Broadcastadresse ein
  (z.&nbsp;B. 192.168.0.255)
  <li><tt>:peer</tt> - fügt die IP-Adresse des Peers auf einem
  Point-to-Point-Link ein
  </ul>
  <dl>
  <dd>Zusätzlich kann der <tt>:0</tt>-Modifizierer einem Interfacenamen
  oder einem der vorherigen Modifizierer angehängt werden, um darauf
  hinzuweisen, dass PF keine IP-Adressaliase in die Einfügung mit
  übernehmen soll. Diese Modifizierer können ebenfalls verwendet werden,
  wenn sich das Interface in Klammern befindet.
  Beispiel: <tt>fxp0:network:0</tt>
  </dl>
<li>Eine <a href="tables.html">Tabelle</a>.
<li>Das Schlüsselwort <tt>urpf-failed</tt> kann für die Quelladresse
verwendet werden, um anzugeben, dass diese durch den
<a href="#urpf">uRPF-Check</a> geschickt werden soll.
<li>Irgendeine der oben genannten, unter Verwendung der <tt>!</tt>-
("nicht") Modifikation.
<li>Ein Satz an Adressen unter Verwendung einer
<a href="macros.html#lists">Liste</a>.
<li>Das Schlüsselwort <tt>any</tt>, das bedeutet für alle Adressen
  steht.
<li>Das Schlüsselwort <tt>all</tt>, das eine Kurzschreibweise für
<tt>from any to any</tt> ist.
</ul>

<dt><tt><i>src_port</i></tt>, <tt><i>dst_port</i></tt>
<dd>Der Quell/Ziel-Port in dem Layer-4-Paket-Header. Ports können
wie folgt angegeben werden:
<ul>
<li>Eine Nummer zwischen 1 und 65535
<li>Ein gültiger Servicename aus
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5"
><tt>/etc/services</tt></a>
<li>Ein Satz an Ports unter Verwendung einer
<a href="macros.html#lists">Liste</a>
<li>Ein Bereich:
	<ul>
	<li><tt>!=</tt> (ungleich)
	<li><tt>&lt;</tt> (kleiner als)
	<li><tt>&gt;</tt> (größer als)
	<li><tt>&lt;=</tt> (kleiner oder gleich)
	<li><tt>&gt;=</tt> (größer oder gleich)
	<li><tt>&gt;&lt;</tt> (Bereich)
	<li><tt>&lt;&gt;</tt> (invertierter Bereich)
	<dl>
	<dd>Die letzten beiden sind Binäroperatoren (sie benötigen zwei
	Argumente) und fügen die Argumente nicht in den Bereich ein.
	</dl>
	<li><tt>:</tt> (inklusiver Bereich)
	<dl>
	<dd>Der Operator für den inklusiven Bereich ist ebenfalls ein
	Binäroperator und fügt die Argumente mit in den Bereich ein.
	</dl>
	</ul>
</ul>

<dt><tt><i>tcp_flags</i></tt>
<dd>Gibt die Flags an, die in dem TCP-Header gesetzt sein müssen, wenn
<tt>proto tcp</tt> verwendet wird. Flags werden als
<tt>flags <i>check</i>/<i>mask</i></tt> angegeben.
<tt>flags S/SA</tt> - dies instruiert PF nur auf die S- und A-Schalter (SYN und
ACK) zu achten, und eine Entsprechung nur dann zu erkennen, wenn einzig der
SYN-Schalter aktiviert ist (dies wird standardmäßig auf alle TCP-Regeln
angewandt).
<tt>flags any</tt> instruiert PF, keinerlei Schalter zu überprüfen.

<dt><tt><i>state</i></tt>
<dd>Gibt an, ob die Statusinformation für das Paket gehalten werden
soll, das auf diese Regel zutrifft.
<ul>
<li><tt>no state</tt> - funktioniert mit TCP, UDP und ICMP.
PF wird keinen Zustand für diese Verbindung zurückverfolgen.
Für TCP-Verbindungen wird normalerweise <tt>flags any</tt> zusätzlich benötigt.
<li><tt>keep state</tt> - funktioniert mit TCP, UDP und ICMP.
Diese Option ist Standard für alle Filterregeln.
<li><tt>modulate state</tt> - funktioniert nur mit TCP. PF wird
starke »Initial Sequence Numbers« (ISNs) für Pakete erstellen, die auf
diese Regel zutreffen.
<li><tt>synproxy state</tt> - eingehende TCP-Verbindungen werden durch
den Proxy geschickt, um beim Beschützen der Server vor Floods von
gefälschten TCP-SYNs zu helfen. Diese Option beinhaltet die
Funktionalität von <tt>keep state</tt> und <tt>modulate state</tt>.
</ul>
</dl>

<a name="defdeny"></a>
<h2>Standardmäßiges Blocken</h2>
Die empfohlene Praxis, wenn eine Firewall aufgesetzt wird ist, einen
»standardmäßig block«-Weg einzuschlagen. Dies bedeutet, dass
<i>alles</i> geblockt und dann selektiv bestimmter Verkehr durch
die Firewall gelassen wird. Dieser Weg ist empfohlen, da man trotz
entstehender Fehler auf der sicheren Seite ist und das Schreiben eines
Regelsatzes einfacher wird.

<p>
Um eine »standardmäßig block«-Richtlinie zu erstellen, sollten die
ersten beiden Filterregeln wie folgt sein:
<blockquote>
<tt>
block in &nbsp;all<br>
block out all
</tt>
</blockquote>

<p>
Dies wird den gesamten Verkehr auf allen Interfaces blocken - egal in
welche Richtung und von wo nach wo.

<a name="pass"></a>
<h2>Verkehr durchlassen</h2>
Verkehr muss nun explizit durch die Firewall gelassen werden oder er
wird wegen der »standardmäßig blocken«-Richtlinie fallen gelassen.
Nun kommen Paketkriterien wie Quell/Zielports, Quell/Zieladressen
und das Protokoll ins Spiel. Wann auch immer Verkehr durch die
Firewall gelassen wird, sollte(n) die Regel(n) so restriktiv wie möglich
geschrieben werden. Dies stellt sicher, dass der beabsichtigte Verkehr -
und zwar nur der beabsichtigte Verkehr - durchgelassen wird.

<p>
Einige Beispiele:
<blockquote>
<tt>
# Lasse den Verkehr auf dc0 vom lokalen Netzwerk 192.168.0.0/24<br>
# zur OpenBSD-Maschine mit der IP-Adresse 192.168.0.1 herein. Lasse<br>
# ebenfalls den Antwort-Verkehr durch dc0 wieder raus.<br>
pass in &nbsp;on dc0 from 192.168.0.0/24 to 192.168.0.1<br>
pass out on dc0 from 192.168.0.1 to 192.168.0.0/24<br>
<br>
<br>
# Lasse TCP-Verkehr auf fxp0 vom Webserver herein, der auf der<br>
# OpenBSD-Maschine läuft. Der Interfacename fxp0 wird als Zieladresse<br>
# verwendet, sodass Pakete mit dieser Regel nur übereinstimmen, wenn<br>
# sie für die OpenBSD-Maschine gedacht sind.<br>
pass in on fxp0 proto tcp from any to fxp0 port www
</tt>
</blockquote>

<a name="quick"></a>
<h2>Das <tt>quick</tt>-Schlüsselwort</h2>
Wie zuvor angedeutet wurde, wird jedes Paket mit dem gesamten
Filterregelsatz von oben nach unten überprüft. Standardmäßig wird das
Paket als durchgelassen markiert, was aber von jeglicher Regel geändert
werden kann. Das wiederum kann mehrmals wechseln, bevor das Ende
der Filterregeln erreicht ist. <b>Die letzte zutreffende Regel
gewinnt.</b> Es gibt eine Ausnahme dafür: Die <tt>quick</tt>-Option
einer Filterregel hat zur Folge, dass jegliche Verarbeitung der weiteren
Regeln abgebrochen und die angegebene Aktion durchgeführt wird.
Lass uns nun einige Beispiele dafür ansehen:

<p>
Falsch:
<blockquote>
<tt>
block in on fxp0 proto tcp to port ssh<br>
pass &nbsp;in all
</tt>
</blockquote>

<p>
In diesem Fall wird die <tt>block</tt>-Zeile zwar verarbeitet, aber
keinen Effekt haben, da sie von einer Zeile gefolgt wird, die alles
durchlässt.

<p>
Besser:
<blockquote>
<tt>
block in quick on fxp0 proto tcp to port ssh<br>
pass &nbsp;in all
</tt>
</blockquote>

<p>
Diese Regeln werden auf eine etwas unterschiedliche Weise verarbeitet. Wenn
die <tt>block</tt>-Zeile zutrifft, wird das Paket geblockt und wegen
der <tt>quick</tt>-Option wird der Rest des Regelsatzes ignoriert.

<a name="state"></a>
<h2>Status halten</h2>
Eine der wichtigen Fähigkeiten von Packet Filter ist »keeping state«
(bzw. »stateful inspection«. »Stateful inspection« verweist auf PFs
Fähigkeit, den Status (oder Fortschritt) auf der Netzwerkverbindung
nachweisen zu können. Durch die Aufbewahrung der Informationen über
jede Verbindung in einer Statustabelle ist PF in der Lage, schnell
herauszufinden, ob ein Paket, das durch die Firewall gelassen wird,
zu einer bereits erstellten Verbindung gehört. Wenn es das tut, wird
es durch die Firewall gelassen, ohne durch die Regelsätze geschickt
zu werden.

<p>
Den Status zu halten hat viele Vorteilen, einschließlich einfacherer
Regelsätze und besserer Leistung beim Paketfiltern. PF ist in der
Lage, Pakete mit den Einträgen in der Statustabelle zu überprüfen,
<i>egal</i> in welche Richtung sich das Paket bewegt. Das bedeutet, dass
Filterregeln, die den Antwortverkehr hereinlassen, nicht geschrieben
werden müssen. Und da Pakete, die mit zustandsabhängigen Verbindungen
übereinstimmen, nicht durch die Regelsatzüberprüfung gehen, kann
die Zeit, die PF zur Verarbeitung der Pakete benötigt, drastisch
verringert werden.

<p>
Wenn eine Regel einen Status erstellt, dann wird das erste zutreffende
Paket diesen Status zwischen Sender und Empfänger erstellen.
Nun werden nicht nur die Pakete ohne Überprüfung durchgelassen,
die vom Sender zum Empfänger gehen, sondern auch die Antwortpakete
vom Empfänger zum Sender.

<p>
Alle <i>pass</i>-Regeln erzeugen automatisch Statuseinträge wenn ein Paket der
Regel entspricht.
Dies kann durch Benutzung der Option <tt>no state</tt> explizit deaktiviert
werden.

<blockquote>
<tt>
pass out on fxp0 proto tcp from any to any
</tt>
</blockquote>

<p>
Diese Regel erlaubt jeglichen ausgehenden TCP-Verkehr auf dem
<tt>fxp0</tt>-Interface und lassen ebenfalls Antwortverkehr zu, der
zurück durch die Firewall geht.
Die Vorhaltung von Zuständen steigert die Performance deiner Firewall
signifikant, da Zustandszugriffe um ein Vielfaches schneller sind als das
Anwenden der Filterregeln auf ein Paket.

<p>
Die <tt>modulate state</tt>-Option funktioniert genauso wie
<tt>keep state</tt> - mit der Ausnahme, dass es nur auf TCP-Pakete
zutrifft. Mit <tt>modulate state</tt> wird die »Initial Sequence
Number« (ISN) des ausgehenden Verkehrs zufällig gewählt. Dies ist
sinnvoll, um Verbindungen zu schützen, die von bestimmten
Betriebssystemen erstellt worden sind, die eine schlechte Leistung
beim Wählen von ISNs an den Tag legen.
Um einfachere Regelsätze zu ermöglichen, kann die Option
<tt>modulate state</tt> in Regeln benutzt werden, die sich nicht auf das
TCP-Protokoll beziehen; in diesen Fällen wird es als <tt>keep state</tt>
behandelt.

<p>
Den Zustand von ausgehenden TCP-, UDP-, und ICMP-Paketen und
,modulate'-TCP-ISNs halten:
<blockquote>
<tt>
pass out on fxp0 proto { tcp, udp, icmp } from any \<br>
&nbsp;&nbsp;&nbsp;&nbsp;to any modulate state<br>
</tt>
</blockquote>

<p>
Ein anderer Vorteil beim Halten von Zuständen ist, dass der
dazugehörige ICMP-Verkehr durch die Firewall gelassen wird. Wenn zum
Beispiel eine TCP-Verbindung - deren Status überwacht wird - durch die
Firewall gelassen wird und eine ICMP-Source-Quench-Nachricht für diese
TCP-Verbindung ankommt, wird sie mit dem dazugehörigem Status
übereinstimmen und durch die Firewall gelassen.

<p>
Der Bereich des Statuseintrags wird systemweit durch die
<a href="options.html#state-policy"
><tt>state-policy</tt></a>-Laufzeitoption auf einer regelspezifischen
Basis durch die <tt>if-bound</tt>- und
<tt>floating</tt>-state-Optionsschlüsselwörter kontrolliert. Diese
regelspezifischen Schlüsselwörter haben die gleiche Bedeutung als wenn
sie mit der <tt>state-policy</tt>-Option verwendet werden. Beispiel:

<blockquote>
<tt>
pass out on fxp0 proto { tcp, udp, icmp } from any \<br>
&nbsp;&nbsp;&nbsp;&nbsp;to any modulate state (if-bound)<br>
</tt>
</blockquote>

<p>
Diese Regel bestimmt, dass nur Pakete, die durch das Interface
<tt>fx0</tt> gelangen, mit dem Statuseintrag übereinstimmen können.

<a name="udpstate"></a>
<h2>Den Zustand für UDP vorhalten</h2>
Man wird ab und zu hören, dass jemand sagt: »Man kann keinen Zustand
mit UDP erstellen, da UDP ein zustandsloses Protokoll ist!« Obwohl es
stimmt, dass UDP-Verbindungssitzungen kein Konzept eines Zustands
haben (einen expliziten Anfang und ein explizites Ende), hat dies keine
Wirkung auf PFs Fähigkeit, einen Status für eine UDP-Sitzung zu
erstellen. In dem Fall von Protokollen ohne Start- und Endpakete,
merkt sich PF einfach, wie lange es her ist, dass ein zutreffendes
Paket durchgelassen wurde. Wenn der Timeout erreicht wurde, wird
der Status gelöscht. Der Timeout-Wert kann in der
<a href="options.html">options</a>-Sektion in der Datei
<tt>pf.conf</tt> gesetzt werden.

<a name="stateopts"></a>
<h2>Optionen für zustandsabhängiges Tracking</h2>
Filterregeln, die einen Statuseintrag erstellen, können mehrere
Optionen angeben, um das Verhalten des resultierenden Statuseintrags
zu kontrollieren. Die folgenden Optionen sind verfügbar:

<dl>
<dt><tt>max <i>anzahl</i></tt>
<dd>Begrenzt die maximale Anzahl Statuseinträge, die die Regel
erstellen kann, auf <i>anzahl</i>.
Wenn das Maximum erreicht wurde, werden Pakete, die normalerweise
einen Status erstellen würden, nicht auf diese Regel zutreffen, bis
die Anzahl vorhandener Zustände wieder unterhalb der Obergrenze liegt.

<dt><tt>no state</tt>
<dd>Die Regel wird davon abgehalten, automatisch einen Statuseintrag
anzulegen.

<dt><tt>source-track</tt>
<dd>Diese Option aktiviert das Tracking der Anzahl der Zustände, die
für jede einzelne IP-Adresse erstellt wurden.
Diese Option hat zwei Formate:
	<ul>
	<li><tt>source-track rule</tt> - Die maximale Anzahl der
	Zustände, die durch diese Regel erstellt werden können, wird
	durch die <tt>max-src-nodes</tt>- und
	<tt>max-src-states</tt>-Optionen dieser Regel begrenzt. Nur
	Statuseinträge, die durch diese bestimmte Regel erstellt
	wurden, werden gezählt und mit der Grenze dieser Regel
	überprüft.
	<li><tt>source-track global</tt> - Die Anzahl der Zustände
	aller Regeln, die diese Option nutzen, werden begrenzt. Jede
	Regel kann unterschiedliche <tt>max-src-nodes</tt>- und
	<tt>max-src-states</tt>-Optionen angeben, jedoch werden
	Statuseinträge, die durch eine der teilnehmenden Regeln
	erstellt wurden, mit der individuellen Begrenzung der Regel
	überprüft.
	</ul>
Die gesamte Anzahl der Quell-IP-Adressen, die verfolgt werden, kann
systemweit durch die Verwendung der
<a href="options.html#limit"><tt>src-nodes</tt>-Laufzeitoption</a>
kontrolliert werden.

<dt><tt>max-src-nodes <i>anzahl</i></tt>
<dd>Wenn die <tt>source-track</tt>-Option genutzt wird, wird
<tt>max-src-nodes</tt> die Anzahl der Quell-IP-Adressen begrenzen, die
gleichzeitig einen Status anlegen können. Diese Option kann nur zusammen
mit <tt>source-track rule</tt> genutzt werden.

<dt><tt>max-src-states <i>anzahl</i></tt>
<dd>Wenn die <tt>source-track</tt>-Option verwendet wird,
wird <tt>max-src-states</tt> die Anzahl gleichzeitig erstellter
Statuseinträge begrenzen, die pro Quell-IP-Adresse angelegt werden
können.
Der Bereich dieser Begrenzung (z.&nbsp;B. Zustände, die nur durch
diese Regel erstellt wurden, oder  die durch alle Regeln unter
Verwendung von <tt>source-track</tt> erstellt wurden) ist abhängig von
der angegebenen <tt>source-track</tt>-Option.
</dl>

<p>
Optionen werden in Klammern und direkt nach einem der
Statusschlüsselwörter (<tt>keep state</tt>, <tt>modulate state</tt> oder
<tt>synproxy state</tt>) angegeben. Mehrere Optionen werden mit Kommas
getrennt. In OpenBSD 4.1 und späteren Versionen ist die Option
<tt>keep state</tt> implizierter Standard für alle Filterregeln.
Trotzdem muss bei der Angabe von Statusoptionen eines dieser
Statusschlüsselwörter vor der Option stehen.


<p>
Eine Beispielregel:

<blockquote>
<tt>
pass in on $ext_if proto tcp to $web_server \<br>
&nbsp;&nbsp;&nbsp;&nbsp;port www keep state \<br>
&nbsp;&nbsp;&nbsp;&nbsp;(max 200, source-track rule, max-src-nodes 100,
max-src-states 3)
</tt>
</blockquote>

<p>
Die oben angegebene Regel sorgt für folgendes Verhalten:

<ul>
<li>Begrenze die maximale Anzahl der Zustände, die diese Regel
erstellen kann, auf 200
<li>Aktiviere Sourcetracking; begrenze die Anzahl möglicher
Statuserstellungen nur für diese Regel
<li>Begrenze die maximale Anzahl der Nodes, die gleichzeitig Zustände
erstellen, auf 100
<li>Begrenze die maximale Anzahl gleichzeitiger Zustände pro
Quell-IP auf 3
</ul>

<p>
Ein separater Satz von Begrenzungen kann auf zustandsabhängigen
TCP-Verbindungen gesetzt werden, die den dreifachen Handschlag vollzogen
haben.

<dl>
<dt><tt>max-src-conn <i>Nummer</i></tt>
<dd>Begrenzt die maximale Anzahl gleichzeitiger TCP-Verbindungen,
die den dreifachen Handschlag vollzogen haben, die ein einzelner Host
erstellen kann.
<dt><tt>max-src-conn-rate <i>Nummer</i> / <i>Intervall</i></tt>
<dd>Begrenzt die Rate der neuen Verbindungen, die zu einem bestimmten
Zeitintervall aufgebaut werden können.
</dl>

<p>
Beide Optionen beziehen automatisch die <tt>source-track
rule</tt>-Option mit ein und sind inkompatibel zu <tt>source-track
global</tt>.

<p>
Da diese Begrenzungen nur für TCP-Verbindungen gültig sind, die den
dreifachen Handschlag vollzogen haben, können aggressivere Aktionen
gegen die offensiven IP-Adressen durchgeführt werden.

<dl>
<dt><tt>overload &lt;<i>Tabelle</i>&gt;</tt>
<dd>Schreibt den IP-Adresse des offensiven Hosts in die benannte
Tabelle.
<dt><tt>flush [global]</tt>
<dd>Zerstöre alle anderen ,states', die auf diese Regel zutreffen und
die von dieser Quell-IP stammen.
Wenn <tt>global</tt> angegeben wird, zerstöre alle ,states', die auf
diese Quell-IP zutreffen, unabhängig davon, welche Regel diesen ,state'
erzeugt hat.
</dl>

<p>
Ein Beispiel:

<blockquote>
<tt>
table &lt;abusive_hosts&gt; persist<br>
block in quick from &lt;abusive_hosts&gt;<br>
<br>
pass in on $ext_if proto tcp to $web_server \<br>
&nbsp;&nbsp;&nbsp;&nbsp;port www flags S/SA keep state \<br>
&nbsp;&nbsp;&nbsp;&nbsp;(max-src-conn 100, max-src-conn-rate 15/5,
overload &lt;abusive_hosts&gt; flush)
</tt>
</blockquote>

<p>
Dies macht Folgendes:

<ul>
<li>Begrenzt die maximale Anzahl der Verbindungen pro Quelle auf 100
<li>Begrenzt die Rate der Anzahl der Verbindungen auf 15 pro
5-sekündiger Zeitspanne
<li>Schreibt die IP-Adresse jeglichen Hosts, der diese Begrenzungen
bricht, in die Tabelle <tt>&lt;abusive_hosts&gt;</tt>
<li>Für jegliche offensive IP-Adresse gilt, dass alle ,states', die
von dieser Regel erzeugt wurden, gelöscht werden.
</ul>

<a name="tcpflags"></a>
<h2>TCP-Flags</h2>
TCP-Pakete anhand ihrer Flags zu überprüfen wird meistens verwendet, um
TCP-Pakete zu filtern, die versuchen, eine neue Verbindung zu eröffnen.
Die TCP-Flags und ihre Bedeutungen sind hier aufgeführt:
<ul>
<li><b>F</b> : FIN  - Finish; Ende der Sitzung
<li><b>S</b> : SYN  - Synchronize; Weist auf eine Anfrage hin, eine Sitzung zu beginnen
<li><b>R</b> : RST  - Reset; Lasse eine Verbindung fallen
<li><b>P</b> : PUSH - Push; Paket wird umgehend gesendet
<li><b>A</b> : ACK  - Acknowledgement; Erhalten
<li><b>U</b> : URG  - Urgent; Dringend
<li><b>E</b> : ECE  - Explicit Congestion Notification Echo
<li><b>W</b> : CWR  - Congestion Window Reduced
</ul>

<p>
Damit PF die TCP-Flags während der Überprüfung einer Regel inspiziert,
muss das <tt>flags</tt>-Schlüsselwort mit folgender Syntax verwendet
werden:
<blockquote>
<tt>
flags <i>check</i>/<i>mask</i><br>
flags any
</tt>
</blockquote>

<p>
Der <tt><i>mask</i></tt>-Teil teilt PF mit, nur die angegebenen Flags
zu inspizieren und der <tt><i>check</i></tt>-Teil gibt an, welche(r)
Flag(s) im Header aktiviert sein müssen, damit eine Übereinstimmung
stattfinden kann. Das Schlüsselwort <tt>any</tt> ermöglicht jede
erdenkliche Kombination der zu setzenden Optionen im Header.
<blockquote>
<tt>
pass in on fxp0 proto tcp from any to any port ssh flags S/SA<br>
pass in on fxp0 proto tcp from any to any port ssh
</tt>
</blockquote>

<p>
Da <tt>flags S/SA</tt> standardmäßig gesetzt ist, sind obige Regeln äquivalent.
Jede dieser Regeln lässt TCP-Datenverkehr mit gesetztem SYN-Schalter passieren,
und betrachtet dabei nur die SYN- und ACK-Schalter.
Ein Paket mit gesetzten SYN- und ECE-Schaltern würde obigen Regeln entsprechen,
nicht jedoch ein Paket mit gesetzten SYN und ACK oder nur ACK.

<p>
Die Standardschalter können mit Hilfe der Option <tt>flags</tt> wie oben
erläutert überschrieben werden.

<p>
Man sollte vorsichtig bei der Verwendung mit Flags sein - zu verstehen,
was du warum tust, und vorsichtig mit den Ratschlägen von Leuten zu
sein, die häufig schlechte geben. Einige Leute empfehlen das Erstellen
von ,states', "nur, wenn das SYN-Flag gesetzt ist und kein anderes".
Solch eine Regel würde wie folgt enden:
<pre>
     . . . flags S/FSRPAUEW  <i>bad idea!!</i>
</pre>

<p>
Die Theorie dahinter ist, dass nur am Anfang der TCP-Sitzung ein ,state'
erzeugt wird und die Sitzung nur mit einem SYN-Flag starten sollte, keinem
anderen. Das Problem ist, dass einige Seiten anfangen, das ECN-Flag zu
verwenden und jegliche Seite, die ECN verwendet und versucht,
sich zu dir zu verbinden, bei einer solchen Regel abgeblockt werden würde.
Eine bessere Möglichkeit ist es, überhaupt keine Flags anzugeben und
PF die Standardflags für deine Regeln übernehmen lassen. Wenn du
wirklich unbedingt selbst Flags angeben musst, dann sollte diese
Option sicher sein:
<blockquote>
<tt>
. . . flags S/SAFR
</tt>
</blockquote>

<p>
<!--XXX scrub changes may have invalidated this-->
Während dies praktisch und sicher ist, ist das Überprüfen der FIN- und
RST-Schalter unnötig, wenn der Datenverkehr ebenfalls gereinigt wird.
Der Reinigungsprozeß veranlasst PF, sowohl eingehende Pakete mit unzulässigen
TCP-Schalterkombinationen (wie SYN und RST) zu verwerfen, als auch potenziell
zweifelhafte Kombinationen (wie SYN und FIN) zu normalisieren.

<a name="synproxy"></a>
<h2>TCP-SYN-Proxy</h2>
<p>
Wenn ein Client normalerweise eine TCP-Verbindung zu einem Server
aufbaut, wird PF die <a
href="http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml"
>Handschlag</a>-Pakete zwischen den beiden Endpunkten durchlassen, sobald
sie ankommen.
PF besitzt jedoch die Fähigkeit, als Proxy für den Handschlag zu fungieren.
Im Falle einer »TCP SYN flood«-Attacke beendet der Angreifer niemals den
Dreiwegehandschlag, sodass die Packete des Angreifers niemals den geschützten
Server erreichen, zulässige Clients jedoch den Handschlag komplettieren und
durchgelassen werden.
Die Handhabung angetäuschter »TCP SYN«-Fluten in PF minimiert deren Einfluss
auf den geschützten Service.
Die routinemäßige Anwendung dieser Option ist jedoch nicht empfehlenswert, da
mit ihr das TCP-Protokoll nicht dem erwarteten Verhalten entspricht, und zwar
sowohl wenn der Server eine Anforderung nicht bearbeiten kann, als auch wenn
Belastungsausgleicher (»Load Balancer«) involviert sind.

<p>
Der TCP-SYN-Proxy wird durch die Verwendung der
<tt>synproxy state</tt>-Schlüsselworte in den Filterregeln aktiviert.
Beispiel:

<blockquote>
<tt>
pass in on $ext_if proto tcp to $web_server port www synproxy state
</tt>
</blockquote>

<p>
Hier werden die Verbindungen zum Webserver durch den TCP-Proxy von
PF gesendet.

<p>
Wegen der Funktionsweise von <tt>synproxy state</tt> beinhaltet es
die gleiche Funktionalität wie <tt>keep state</tt> und <tt>modulate
state</tt>.

<p>
Der SYN-Proxy wird nicht mit PF funktionieren, wenn dieser auf einer
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4"
>bridge(4)</a> läuft.

<a name="antispoof"></a>
<h2>Blockade gefälschter Pakete</h2>
Adress-»fälschung« liegt vor, wenn ein böswilliger Benutzer die
Quell-IP-Adresse in den Paketen ändert, die versendet werden, um entweder
seine tatsächliche Adresse zu verbergen oder um so zu wirken, als würde
er ein anderes Gerät im Netzwerk bedienen. Sobald ein Benutzer eine
,spoofed' Adresse hat, kann er Netzwerkattacken durchführen, ohne seine
wahre Herkunft offenzulegen, oder erreicht Zugriff auf Netzwerkdienste,
die nur bestimmten IP-Adressen ermöglicht werden sollen.

<p>
PF bietet einen gewissen Schutz gegen Adress-,spoofing' durch das
<tt>antispoof</tt>-Schlüsselwort:

<blockquote>
<tt>
antispoof [log] [quick] for <i>interface</i> [<i>af</i>]
</tt>
</blockquote>

<dl>
<dt><tt>log</tt>
<dd>Gibt ab, ob das zutreffende Paket via
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.4"
>pflogd(8)</a> aufgezeichnet werden soll.

<dt><tt>quick</tt>
<dd>Wenn ein Paket auf diese Zeile zutrifft, wird es als ,Gewinner'-Regel
angesehen und die Verarbeitung des Regelsatzes angehalten.

<dt><tt><i>interface</i></tt>
<dd>Das Netzwerk-Interface, auf dem ,spoofing'-Schutz aktiviert werden
soll. Dies kann ebenfalls eine <a href="macros.html#lists">Liste</a>
von Interfaces sein.

<dt><tt><i>af</i></tt>
<dd>Die Adress-Familie, für die der ,spoofing'-Schutz aktiviert werden
soll, entweder <tt>inet</tt> für IPv4 oder <tt>inet6</tt> für IPv6.
</dl>

<p>
Beispiel:
<blockquote>
<tt>
antispoof for fxp0 inet
</tt>
</blockquote>

<p>
Wenn ein Regelsatz geladen wird, wird jedes Vorkommen des
<tt>antispoof</tt>-Schlüsselwortes in zwei Filterregeln eingesetzt.
Angenommen, dass das Interface <tt>fxp0</tt> die IP-Adresse 10.0.0.1 und eine
Subnetz-Maske von 255.255.255.0 hat (z.&nbsp;B. /24), dann würde die
oben angegebene <tt>antispoof</tt>-Regel wie folgt entwickelt werden:

<blockquote>
<tt>
block in on ! fxp0 inet from 10.0.0.0/24 to any<br>
block in inet from 10.0.0.1 to any
</tt>
</blockquote>

<p>
Diese Regeln erreichen zwei Dinge:
<ul>
<li>Blockt den gesamten Verkehr, der vom 10.0.0.0/24-Netzwerk kommt, der
<i>nicht</i> durch <tt>fxp0</tt> hereinkommt. Da das 10.0.0.0/24-Netzwerk
auf dem <tt>fxp0</tt>-Interface liegt, dürften Pakete mit Quell-Adressen aus
diesem Netzwerkblock niemals auf anderen Interfaces gesehen werden können.
<li>Blockt den gesamten Verkehr von 10.0.0.1, der IP-Adresse von
<tt>fxp0</tt>.
Die Host-Maschine dürfte niemals Pakete zu sich selbst durch ein externes
Interface senden, sodass alle eingehenden Pakete mit der Source-Adresse,
die an dieser Maschine ankommen, als böswillig angesehen werden können.
</ul>

<p>
<b>HINWEIS</b>. Die Filterregeln, die aus der <tt>antispoof</tt>-Regel
hervorgehen, blocken ebenfalls Pakete, die über das Loopback-Interface
zur lokalen Adresse gesendet werden. Es ist sowieso ein guter Stil, wenn
man auf Loopbackinterfaces nicht filtert - doch bei der Verwendung von
antispoof-Regeln ist das eine Notwendigkeit:
<blockquote>
<tt>
set skip on lo0 all<br>
<br>
antispoof for fxp0 inet
</tt>
</blockquote>

<p>
Die Verwendung von <tt>antispoof</tt> sollte auf Interfaces beschränkt
werden, denen eine IP-Adresse zugewiesen wurde. Wenn <tt>antispoof</tt>
auf ein Interface angewandt wird, das keine IP-Adresse hat, wird das in
Filterregeln enden, die so ähnlich wie folgende aussehen werden:
<blockquote>
<tt>
block drop in on ! fxp0 inet all<br>
block drop in inet all
</tt>
</blockquote>

<p>
Mit diesen Regeln besteht die Gefahr, dass der <i>gesamte</i> eingehende
Verkehr auf <i>allen</i> Interfaces geblockt wird.

<a name="urpf"></a>
<h2>Unicast Reverse Path Forwarding</h2>

<p>
PF bietet »Unicast Reverse Path Forwarding« (uRPF).
Wenn ein Paket durch
eine uRPF-Routine überprüft wird, so wird die Quell-IP-Adresse des
Pakets in der Routingtabelle nachgesehen. Wenn das weiterführende
Interface das gleiche ist, über das das Paket hereingekommen ist, so
wird die uRPF-Überprüfung das Paket durchlassen. Sollten sich die
Interfaces unterscheiden, so kann es sich um eine gefälschte
Quelladresse handeln.

<p>
Die uRPF-Überprüfung für Pakete kann mit dem
<tt>urpf-failed</tt>-Schlüsselwort in den Filterregelsätzen aktiviert
werden:

<blockquote>
<tt>
block in quick from urpf-failed label uRPF
</tt>
</blockquote>

<p>
Denk daran, dass die uRPF-Überprüfung nur in Umgebungen Sinn macht,
in denen das Routing symmetrisch abläuft.

<p>
uRPF bietet die gleiche Funktionalität wie
<a href="#antispoof">Antispoof</a>-Regeln.


<a name="osfp"></a>
<h2>Passives Betriebssystem-,Fingerprinting'</h2>

<p>
Passives OS-,Fingerprinting' (OSFP) ist eine Methode zum passiven
Ermitteln des Betriebssystems auf dem gegenüberliegendem Host, basierend
auf bestimmten Kriterien in den TCP-SYN-Paketen des Hosts. Diese
Information kann dann als Kriterium in Filterregeln verwendet werden.

<p>
PF ermittelt das entfernte Betriebssystem, indem die Charakteristiken
des TCP-SYN-Pakets mit denen in der
<a href="options.html#fingerprints">,fingerprints'-Datei</a> verglichen
werden, welche standardmäßig
<a
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.4"
><tt>/etc/pf.os</tt></a> ist.
Sobald PF aktiviert wurde, kann die aktuelle ,fingerprint'-Liste mit diesem
Kommando angesehen werden:

<blockquote>
<tt>
# pfctl -s osfp
</tt>
</blockquote>

<p>
Innerhalb der Filterregel kann ein ,fingerprint' anhand der OS-Klasse,
-Version oder -Untertyp/-Patchlevel angegeben werden.
Jedes dieser Objekte wird in der Ausgabe des angegebenen
<tt>pfctl</tt>-Kommandos aufgelistet. Um einen ,fingerprint' in einer
Filterregel anzugeben, wird das <tt>os</tt>-Schlüsselwort verwendet:

<blockquote>
<tt>
pass &nbsp;in on $ext_if proto tcp from any os OpenBSD keep state<br>
block in on $ext_if proto tcp from any os "Windows 2000"<br>
block in on $ext_if proto tcp from any os "Linux 2.4 ts"<br>
block in on $ext_if proto tcp from any os unknown
</tt>
</blockquote>

<p>
Die spezielle Betriebssystem-Klasse <tt>unknown</tt> erlaubt es, dass
alle Pakete zutreffen, wenn der ,fingerprint' des OS unbekannt ist.

<p>
Folgendes sollte <font color="#ff0000">ZUR KENNTNIS GENOMMEN WERDEN</font>:
<ul>
  <li>Betriebssystem-,fingerprints' sind ab und zu falsch, da ,spoofed'
  oder erstellte Pakete so gemacht worden sind, dass sie so aussehen,
  als wenn sie von einem spezifischen Betriebssystem kommen würden.
  <li>Bestimmte Revisionen oder Patchlevel eines Betriebssystems können
  das Verhalten vom ,stack' ändern und daher dazu führen, dass der
  ,fingerprint' nicht mehr übereinstimmt oder wie ein anderer Eintrag
  wirkt.
  <li>OSFP funktioniert nur mit TCP-SYN-Paketen; es wird nicht mit anderen
  Protokollen oder bereits aufgebauten Verbindungen funktionieren.
</ul>

<a name="ipopts"></a>
<h2>IP-Optionen</h2>
Standardmäßig blockt PF alle Pakete, die IP-Optionen haben. Dies kann
die Arbeit für ,OS fingerprinting'-Anwendungen wie nmap erschweren.
Wenn du eine Applikation hast, die das Durchlassen dieser Pakete
erfordert, wie zum Beispiel Multicast oder IGMP, kannst du die
<tt>allow-opts</tt>-Direktive verwenden:
<blockquote>
<tt>
pass in quick on fxp0 all allow-opts
</tt>
</blockquote>

<a name="example"></a>
<h2>Beispiel-Filterregelsatz</h2>
Weiter unten ist ein Beispiel für einen Filterregelsatz. Auf der
Maschine läuft PF, die als Firewall zwischen einem kleinen, internen
Netzwerk und dem Internet fungiert. Nur die Filterregeln werden
angezeigt;
<a href="queueing.html"><tt>queueing</tt></a>,
<a href="nat.html"><tt>nat</tt></a>,
<a href="rdr.html"><tt>rdr</tt></a>
etc. wurden aus diesem Beispiel herausgelassen.
<br>
<br>
<table border=0 width="650">
<tr><td nowrap bgcolor="#EEEEEE">
<pre>
ext_if  = "fxp0"
int_if  = "dc0"
lan_net = "192.168.0.0/24"

# table containing all IP addresses assigned to the firewall
table &lt;firewall&gt; const { self }

# don't filter on the loopback interface
set skip on lo0

# scrub incoming packets
match in all scrub (no-df)

# setup a default deny policy
block all

# activate spoofing protection for all interfaces
block in quick from urpf-failed

# only allow ssh connections from the local network if it's from the
# trusted computer, 192.168.0.15. use "block return" so that a TCP RST is
# sent to close blocked connections right away. use "quick" so that this
# rule is not overridden by the "pass" rules below.
block return in quick on $int_if proto tcp from ! 192.168.0.15 \
   to $int_if port ssh

# pass all traffic to and from the local network.
# these rules will create state entries due to the default
# "keep state" option which will automatically be applied.
pass in  on $int_if from $lan_net
pass out on $int_if to $lan_net

# pass tcp, udp, and icmp out on the external (Internet) interface. 
# tcp connections will be modulated, udp/icmp will be tracked
# statefully.
pass out on $ext_if proto { tcp udp icmp } all modulate state

# allow ssh connections in on the external interface as long as they're
# NOT destined for the firewall (i.e., they're destined for a machine on
# the local network). log the initial packet so that we can later tell
# who is trying to connect. 
# Uncomment last part to use the tcp syn proxy to proxy the connection.
pass in log on $ext_if proto tcp to ! &lt;firewall&gt; \
   port ssh # synproxy state
</pre>
</td></tr>
</table>

<p>
[<a href="tables.html">Zurück: Tabellen</a>]
[<a href="index.html">Inhalt</a>]
[<a href="nat.html">Weiter: Network Address Translation</a>]

<p>
<hr>
<a href="index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[zurück]"></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>
<!--
Originally [OpenBSD: filter.html,v 1.68 ]<br>
$Translation: filter.html,v 1.50 2013/11/01 16:59:45 steffen Exp $<br>
-->
$OpenBSD: filter.html,v 1.46 2013/11/01 18:04:05 ajacoutot Exp $
</small>

</body>
</html>
@


1.46
log
@Sync with Steelix CVS
@
text
@d1086 1
a1086 1
$OpenBSD$
@


1.45
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.3"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d819 1
a819 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d950 1
a950 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.3"
d1083 2
a1084 2
Originally [OpenBSD: filter.html,v 1.67 ]<br>
$Translation: filter.html,v 1.49 2013/05/01 16:34:16 steffen Exp $<br>
@


1.44
log
@Sync with Steelix CVS
@
text
@d1083 2
a1084 2
Originally [OpenBSD: filter.html,v 1.66 ]<br>
$Translation: filter.html,v 1.48 2013/05/01 13:35:26 steffen Exp $<br>
@


1.43
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.2"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d819 1
a819 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d950 1
a950 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.2"
d1084 1
a1084 1
$Translation: filter.html,v 1.47 2012/11/01 20:43:18 steffen Exp $<br>
@


1.42
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.1"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d819 1
a819 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d950 1
a950 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.1"
d1083 2
a1084 2
Originally [OpenBSD: filter.html,v 1.65 ]<br>
$Translation: filter.html,v 1.46 2012/10/05 21:14:44 steffen Exp $<br>
@


1.41
log
@Sync with Steelix CVS
@
text
@d758 12
a769 10
sie ankommen. PF hat jedoch die Fähigkeit, den Handschlag durch einen
Proxy zu senden.
Mit einem Handschlag, der durch einen Proxy gesendet wurde, wird PF selbst
den Handschlag mit dem Client absolvieren, einen Handschlag mit dem
Server beginnen und dann die Pakete zwischen den beiden durchlassen.
Der Vorteil von diesem Prozess ist, dass keine Pakete zum Server gesendet
werden, bevor der Client den Handschlag abgeschlossen hat.
Dies eliminiert die Gefahr eines ,spoofed' TCP-SYN-Floods, die den
Server beeinträchtigen könnten, weil die ,spoofed' Client-Verbindung
nicht in der Lage ist, den Handschlag zu vollenden.
d1063 2
a1064 3
# who is trying to connect. use the tcp syn proxy to proxy the connection.
# the default flags "S/SA" will automatically be applied to the rule by
# PF.
d1066 1
a1066 1
   port ssh synproxy state
d1083 2
a1084 2
Originally [OpenBSD: filter.html,v 1.64 ]<br>
$Translation: filter.html,v 1.45 2012/08/19 19:10:17 steffen Exp $<br>
@


1.40
log
@Sync with Steelix CVS
@
text
@d1012 1
a1012 1
<a href="queueing.html">queueing</a>,
d1082 2
a1083 2
Originally [OpenBSD: filter.html,v 1.62 ]<br>
$Translation: filter.html,v 1.43 2012/05/11 17:06:29 steffen Exp $<br>
@


1.39
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.0"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d817 1
a817 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d948 1
a948 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.0"
d1082 2
a1083 2
Originally [OpenBSD: filter.html,v 1.61 ]<br>
$Translation: filter.html,v 1.42 2012/03/14 14:07:43 steffen Exp $<br>
@


1.38
log
@Sync with Steelix CVS
@
text
@d968 4
a971 4
pass &nbsp;in on $ext_if from any os OpenBSD keep state<br>
block in on $ext_if from any os "Windows 2000"<br>
block in on $ext_if from any os "Linux 2.4 ts"<br>
block in on $ext_if from any os unknown
d1082 2
a1083 2
Originally [OpenBSD: filter.html,v 1.60 ]<br>
$Translation: filter.html,v 1.41 2012/01/20 20:21:49 steffen Exp $<br>
@


1.37
log
@Sync with Steelix CVS
@
text
@d58 1
a58 1
<li><a href="#antispoof">gefälschte Pakete blocken</a>
d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.6"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.6"
d190 1
a190 2
<a href="http://public.pacbell.net/dedicated/cidr.html"
>CIDR</a>-Netzwerkblock
d272 6
a277 6
<tt>flags <i>check</i>/<i>mask</i></tt> angegeben. <tt>flags
S/SA</tt> zum Beispiel dies sagt PF, dass nur auf die S- und A- (SYN und
ACK) Flags geachtet werden und zutreffen soll, wenn nur das SYN-Flag
aktiviert ist.
In OpenBSD 4.1 und späteren Versionen werden die Standardflags
<tt>S/SA</tt> an alle TCP-Filterregeln übergeben.
d283 3
d287 1
a287 2
In OpenBSD 4.1 und späteren Versionen ist diese Option Standard für
alle Filterregeln.
d366 1
a366 1
block in on fxp0 proto tcp from any to any port ssh<br>
d380 1
a380 1
block in quick on fxp0 proto tcp from any to any port ssh<br>
d421 4
a424 4
Beginnend mit OpenBSD 4.1 erstellen alle Filterregeln automatisch einen
Statuseintrag, wenn ein Paket auf eine Regel zutrifft. In früheren
OpenBSD-Versionen musste man für die Filterregel explizit die Option
<tt>keep state</tt> angeben.
a425 2
<p>
Beispiel für OpenBSD 4.1 und späteren Versionen:
d433 1
a433 9
Beispiel für OpenBSD 4.0 und ältere Versionen:
<blockquote>
<tt>
pass out on fxp0 proto tcp from any to any keep state
</tt>
</blockquote>

<p>
Diese Regeln erlauben jeglichen ausgehenden TCP-Verkehr auf dem
d436 3
a438 4
Während das Halten von Zuständen eine schöne Funktionalität ist, kann
es die Leistung deiner Firewall signifikant erhöhen, da
Zustandsüberprüfungen um ein vielfaches schneller sind als das Paket
durch die Filterregeln zu schicken.
d448 4
a451 2
Beginnend mit OpenBSD 3.5 kann die <tt>modulate state</tt>-Option
in Regeln genutzt werden, die andere Protokolle als TCP angeben.
a490 8

<p>
Bedenke, dass <a href="nat.html"><tt>nat-</tt></a>,
<a href="nat.html#binat"><tt>binat-</tt></a> und
<a href="rdr.html"><tt>rdr-</tt></a>Regeln implizit einen Status
für zutreffende Verbindungen erstellen, solange die Verbindung
durch den Filterregelsatz gelassen wird.

d492 1
a492 1
<h2>,state' für UDP halten</h2>
d701 2
a702 1
pass in on fxp0 proto tcp from any to any port ssh flags S/SA
d707 5
a711 5
Die hier angegebene Regel lässt TCP-Verkehr mit gesetztem SYN-Flag
durch, während nur die SYN- und ACK-Flags überprüft werden. Ein
Paket mit den SYN- und ECE-Flags würde der oben genannten Regel
entsprechen, während ein Paket mit SYN und ACK oder nur ACK keine
Übereinstimmung hätte.
d714 2
a715 27
In OpenBSD 4.1 und späteren Versionen wird standardmäßig
<tt>flags S/SA</tt> für TCP-Regeln verwendet. Zusammen mit dem
OpenBSD-4.1-Standard <tt>keep state</tt> für Filterregeln sind diese
beiden Regeln gleichwertig:
<blockquote>
<tt>
pass out on fxp0 proto tcp all flags S/SA keep state<br>
pass out on fxp0 proto tcp all
</tt>
</blockquote>

<p>
Jede Regel wird auf TCP-Pakete reagieren, deren SYN-Flag gesetzt und
ACK-Flag nicht gesetzt ist, und einen Statuseintrag für die
zutreffenden Pakete anlegen. Die Standardflags können mit der Option
<tt>flags</tt> wie oben erläutert überschrieben werden.

<p>
In OpenBSD 4.0 und älteren Versionen wurden keine Standardflags
für Filterregeln angegeben. Jede Regel musste daher zu überprüfende
Flag(s) übergeben bekommen und explizit die Option <tt>keep state</tt>
gesetzt haben.
<blockquote>
<tt>
pass out on fxp0 proto tcp all flags S/SA keep state
</tt>
</blockquote>
d744 6
a749 9
Während dies praktisch und sicher ist, ist das Überprüfen für die
FIN- und RST-Flags unnötig, wenn der Verkehr ebenfalls
<!--XXX scrub-->
,gescrubbed' wird. Der ,scrubbing'-Prozess
wird PF veranlassen, jegliche eingehenden Pakete mit ungültigen
TCP-Flag-Kombinationen (wie zum Beispiel SYN und RST) fallen zu
lassen und potenziell unklare Kombinationen (z.&nbsp;B. SYN und
FIN) zu normalisieren.

d776 1
a776 2
pass in on $ext_if proto tcp from any to $web_server port www \<br>
&nbsp;&nbsp;&nbsp;flags S/SA synproxy state
d795 2
a796 2
<h2>,spoofed' Pakete blocken</h2>
Adress-,spoofing' liegt vor, wenn ein böswilliger Benutzer die
d817 1
a817 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.6"
d904 2
a905 2
Beginnend mit <a href="../../../de/40.html">OpenBSD 4.0</a> bietet
PF »Unicast Reverse Path Forwarding« (uRPF) an. Wenn ein Paket durch
d948 1
a948 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.6"
d1025 1
a1025 2
# tabelle, die alle IP-Adressen beinhaltet, die der firewall zugewiesen
# worden sind
d1028 1
a1028 1
# filtere nicht das loopback-interface
d1031 1
a1031 1
# ,scrub' auf alle eingehenden pakete anwenden
d1034 1
a1034 1
# eine richtlinie zum standardmäßigen blocken errichten
d1037 1
a1037 1
# ,spoofing'-schutz für alle interfaces.
d1040 4
a1043 5
# nur ssh-verbindungen vom lokalen netzwerk erlauben, wenn es von dem
# computer 192.168.0.15 kommt, dem man vertrauen kann. verwende
# ,block return', sodass ein TCP-RST gesendet wird, um blockierte
# Verbindungen sofort zu schließen. verwende ,quick', sodass diese
# regel nicht von der ,pass'-regel weiter unten überschrieben wird.
d1047 9
a1055 9
# den gesamten verkehr von und zum lokalen netzwerk durchlassen.
# diese regeln werden statuseinträge erstellen, da die standardoption
# "keep state" automatisch übernommen wird.
pass in  on $int_if from $lan_net to any
pass out on $int_if from any to $lan_net

# tcp, udp und icmp durch das externe (internet-)interface rauslassen.
# tcp-verbindungen werden reguliert, udp/icmp-verbindungen werden
# statusüberwacht.
d1058 7
a1064 8
# erlaube eingehende ssh-verbindungen auf dem externen interface, so
# lange sie NICHT für die firewall bestimmt sind (z.&nbsp;B. wenn sie an
# eine maschine im lokalen netzwerk gerichtet sind). zeichne das erste
# paket auf, sodass wir später sagen können, wer versucht, zu verbinden.
# verwende den tcp-syn-proxy um einen proxy für diese verbindung
# aufzubauen. die standardflags "S/SA" werden dieser regel automatisch
# von PF übergeben.
pass in log on $ext_if proto tcp from any to ! &lt;firewall&gt; \
d1082 2
a1083 2
Originally [OpenBSD: filter.html,v 1.53 ]<br>
$Translation: filter.html,v 1.40 2009/12/20 13:19:16 tobias Exp $<br>
@


1.36
log
@Sync with Steelix CVS
@
text
@d483 1
a483 1
Basis durch die <tt>if-bound</tt>-, <tt>group-bound</tt>- und
d1129 2
a1130 2
Originally [OpenBSD: filter.html,v 1.52 ]<br>
$Translation: filter.html,v 1.39 2009/11/05 12:55:49 tobias Exp $<br>
@


1.35
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.5"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.5"
d786 2
a787 1
ge<a href="scrub.html">,scrubbed'</a> wird. Der ,scrubbing'-Prozess
d861 1
a861 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.5"
d992 1
a992 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.5"
d1077 1
a1077 1
scrub in all
d1129 2
a1130 2
Originally [OpenBSD: filter.html,v 1.51 ]<br>
$Translation: filter.html,v 1.38 2009/05/03 12:44:31 tobias Exp $<br>
@


1.34
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.4"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.4"
d860 1
a860 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.4"
d991 1
a991 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.4"
d1128 2
a1129 2
Originally [OpenBSD: filter.html,v 1.50 ]<br>
$Translation: filter.html,v 1.37 2009/02/22 09:17:45 paldium Exp $<br>
@


1.33
log
@Sync with Steelix CVS
@
text
@d1128 2
a1129 2
Originally [OpenBSD: filter.html,v 1.49 ]<br>
$Translation: filter.html,v 1.36 2008/11/01 09:15:06 paldium Exp $<br>
@


1.32
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.3"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.3"
d860 1
a860 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.3"
d991 1
a991 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.3"
d1128 2
a1129 2
Originally [OpenBSD: filter.html,v 1.48 ]<br>
$Translation: filter.html,v 1.35 2008/08/04 14:41:04 paldium Exp $<br>
@


1.31
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.2"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.2"
d860 1
a860 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.2"
d991 1
a991 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.2"
d1128 2
a1129 2
Originally [OpenBSD: filter.html,v 1.47 ]<br>
$Translation: filter.html,v 1.34 2008/03/04 23:03:17 paldium Exp $<br>
@


1.30
log
@Sync with Steelix CVS
@
text
@d291 1
a291 1
den Proxy geschickt, um bei der Beschützung der Server vor Floods von
d371 1
a371 1
In diesem Fall wird die <tt>block</tt>-Zeile zwar verarbeit, aber
d1023 1
a1023 1
Folendes sollte <font color="#ff0000">ZUR KENNTNIS GENOMMEN WERDEN</font>:
d1025 1
a1025 1
  <li>Betriebssytem-,fingerprints' sind ab und zu falsch, da ,spoofed'
d1129 1
a1129 1
$Translation: filter.html,v 1.33 2008/01/13 12:27:52 paldium Exp $<br>
@


1.29
log
@Sync with Steelix CVS
@
text
@d749 1
a749 1
Flag(s) übergeben bekommen und explizit die Option <tt>keep state</tt> 
d1129 1
a1129 1
$Translation: filter.html,v 1.32 2007/11/10 10:19:57 paldium Exp $<br>
@


1.28
log
@Sync with Steelix CVS
@
text
@d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.1"
d93 1
a93 1
werden in sequentieller Reihenfolge verarbeitet: von der ersten bis zur
d134 3
a136 5
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.1"
>pflogd(8)</a> aufgezeichnet werden soll. Wenn die Regel die
<tt>keep state</tt>-, <tt>modulate state</tt>- oder
<tt>synproxy state</tt>-Option angibt, dann wird nur das Paket
aufgezeichnet, das den Status aufgebaut hat.
d343 1
a343 1
# verwendet, so dass Pakete mit dieser Regel nur übereinstimmen, wenn<br>
d529 1
a529 1
<dd>Begrenzt die maximale Anzahl von Statuseinträgen, die die Regel
d532 2
a533 2
einen Status erstellen würden, fallen gelassen, bis die Anzahl der
existierenden Zustände wieder sinkt.
d540 1
a540 1
<dd>Diese Option aktiviert das Tracking der Anzahl von Zuständen, die
d544 2
a545 2
	<li><tt>source-track rule</tt> - Die maximale Anzahl von
	Zuständen, die durch diese Regel erstellt werden können, wird
d551 1
a551 1
	<li><tt>source-track global</tt> - Die Anzahl von Zuständen
d559 1
a559 1
Die gesamte Anzahl von Quell-IP-Adressen, die verfolgt werden, kann
d566 1
a566 1
<tt>max-src-nodes</tt> die Anzahl von Quell-IP-Adressen begrenzen, die
d572 1
a572 1
wird <tt>max-src-states</tt> die Anzahl von gleichzeitig erstellten
d607 1
a607 1
<li>Begrenze die maximale Anzahl von Zuständen, die diese Regel
d609 3
a611 3
<li>Aktiviere Sourcetracking; begrenze die Anzahl der
Statuserstellung nur für diese Regel
<li>Begrenze die maximale Anzahl von Nodes, die gleichzeitig Zustände
d613 1
a613 1
<li>Begrenze die maximale Anzahl von gleichzeitigen Zuständen pro
d624 1
a624 1
<dd>Begrenzt die maximale Anzahl an gleichzeitigen TCP-Verbindungen,
d673 2
a674 2
<li>Begrenzt die maximale Anzahl von Verbindungen pro Quelle auf 100
<li>Begrenzt die Rate der Anzahl von Verbindungen auf 15 pro
d789 1
a789 1
lassen und potentiell unklare Kombinationen (z.&nbsp;B. SYN und
d797 2
a798 2
aufbaut, wird PF die
<a href="http://www.inetdaemon.com/tutorials/internet/tcp/connections.html"
d860 1
a860 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.1"
d909 1
a909 1
Interface senden, so dass alle eingehenden Pakete mit der Source-Adresse,
d991 1
a991 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.1"
d1086 1
a1086 1
# ,block return', so dass ein TCP-RST gesendet wird, um blockierte
d1106 1
a1106 1
# paket auf, so dass wir später sagen können, wer versucht, zu verbinden.
d1128 2
a1129 2
Originally [OpenBSD: filter.html,v 1.44 ]<br>
$Translation: filter.html,v 1.29 2007/05/09 19:31:27 paldium Exp $<br>
@


1.27
log
@Sync with steelix translation CVS
@
text
@d14 1
a14 1
Copyright (c) 2003-2005 Joel Knight <enabled@@myrealbox.com>
d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d75 1
a75 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d77 1
a77 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d79 1
a79 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d81 1
a81 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d83 1
a83 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d85 1
a85 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d153 1
a153 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d179 1
a179 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d228 3
d247 1
a247 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d279 2
d287 2
d415 2
a416 2
Wenn eine Regel die <tt>keep state</tt>-Option besitzt, erstellt das
erste zutreffende Paket einen Status zwischen Sender und Empfänger.
d419 18
a436 1
vom Empfänger zum Sender. Zum Beispiel:
d444 2
a445 2
Dies erlaubt jeglichen ausgehenden TCP-Verkehr auf dem
<tt>fxp0</tt>-Interface und lässt ebenfalls Antwortverkehr zu, der
d476 4
a479 4
Beispiel <tt>keep state</tt> für eine TCP-Verbindung angegeben wurde
und eine ICMP-Source-Quench-Nachricht für diese TCP-Verbindung
ankommt, wird sie mit dem dazugehörigem Status übereinstimmen und
durch die Firewall gelassen.
d525 3
a527 5
Wenn eine Filterregel einen Statustabelleneintrag mit irgendeinem
<tt>keep state</tt>-, <tt>modulate state</tt>- oder <tt>synproxy
state</tt>-Schlüsselwort anlegt, können bestimmte Optionen
angegeben werden, die das Verhalten der Statuserstellung beeinflussen.
Die folgenden Optionen sind verfügbar:
d537 4
d584 10
d599 1
a599 1
&nbsp;&nbsp;&nbsp;&nbsp;port www flags S/SA keep state \<br>
d706 2
a707 1
flags <i>check</i>/<i>mask</i>
d715 2
a716 1
stattfinden kann.
d731 4
a734 2
Hinweis: in früheren Versionen von OpenBSD wurde die folgende Syntax
unterstützt:
d737 2
a738 1
. . . flags S
d743 4
a746 2
Dies gilt heute nicht mehr. Eine Maske muss nun <i>immer</i> angegeben
werden.
d749 4
a752 3
Flags werden oft in Verbindung mit <tt>keep state</tt>-Regeln verwendet,
um zu helfen, die Erstellung von ,state'-Einträgen besser kontrollieren
zu können:
a759 5
Dies würde das Erstellen eines ,states' für alle ausgehenden TCP-Pakete
mit gesetztem SYN-Flag erlauben, unter der Überprüfung von SYN- und
ACK-Flags.

<p>
d775 4
a778 1
Eine bessere Möglichkeit ist:
d792 2
a793 12
FIN) zu normalisieren. Es wird dringend empfohlen, den eingehenden
Verkehr immer einem <tt>scrub</tt> zu unterziehen:
<blockquote>
<tt>
scrub in on fxp0<br>
.<br>
.<br>
.<br>
pass in on fxp0 proto tcp from any to any port ssh flags S/SA \<br>
&nbsp;&nbsp;&nbsp;keep state
</tt>
</blockquote>
d836 1
a836 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d862 1
a862 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.0"
a976 14
<p>
Hosts, die als IPsec-Endpunkte arbeiten, sollten auf den
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&amp;sektion=4&amp;manpath=OpenBSD+4.0"><tt>enc0</tt></a>-Interfaces
kein uRPF aktivieren. uRPF wird auf <tt>enc0</tt> immer fehlschlagen
und alle Pakete abblocken. Wenn kein Bedarf besteht, IPsec-Verkehr zu
filtern, wird <tt>set skip on enc0</tt> empfohlen. Ansonsten muss
uRPF auf dem Interface unterbunden werden.

<blockquote>
<tt>
block in quick on ! enc0 from urpf-failed label uRPF
</tt>
</blockquote>

d993 1
a993 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d1083 2
a1084 2
# ,spoofing'-schutz für das interne interface aktivieren.
antispoof quick for $int_if inet
d1092 1
a1092 1
   to $int_if port ssh flags S/SA
d1094 3
a1096 1
# den gesamten verkehr von und zum lokalen netzwerk durchlassen
d1101 3
a1103 3
# halte den ,state' für udp und icmp und ,modulate state' für tcp.
pass out on $ext_if proto tcp all modulate state flags S/SA
pass out on $ext_if proto { udp, icmp } all keep state
d1110 2
a1111 1
# aufzubauen.
d1113 1
a1113 2
   port ssh flags S/SA synproxy state

d1130 2
a1131 2
Originally [OpenBSD: filter.html,v 1.40 ]<br>
$Translation: filter.html,v 1.27 2007/04/25 15:41:14 paldium Exp $<br>
@


1.26
log
@sync with Steelix CVS
@
text
@d76 1
a76 1
>IPv4</a> und 
d109 1
a109 1
<i>action</i> [<i>direction</i>] [log] [quick] [on <i>interface</i>] 
d111 1
a111 1
&nbsp;&nbsp;&nbsp;[from <i>src_addr</i> [port <i>src_port</i>]] [to 
d133 1
a133 1
<dd>Gibt an, dass das Paket per 
d186 1
a186 1
<dt><tt><i>src_addr</i></tt>, <tt><i>dst_addr</i></tt> 
d479 1
a479 1
Bedenke, dass <a href="nat.html"><tt>nat-</tt></a>, 
d721 1
a721 1
Man sollte vorsichtig bei der Verwendung mit Flags sein -- zu verstehen,
d1086 2
a1087 2
# lange sie NICHT für die firewall bestimmt sind (z.B. wenn sie an eine
# maschine im lokalen netzwerk gerichtet sind). zeichne das erste
d1111 1
a1111 1
$Translation: filter.html,v 1.26 2007/02/09 18:13:48 paldium Exp $<br>
d1117 1
a1117 1
</html> 
@


1.25
log
@sync with steelix translation CVS
@
text
@d1039 3
a1041 3
<a href="queueing.html">queueing</a>, 
<a href="nat.html"><tt>nat</tt></a>, 
<a href="rdr.html"><tt>rdr</tt></a>, 
d1111 1
a1111 1
$Translation: filter.html,v 1.25 2006/11/22 16:25:35 paldium Exp $<br>
@


1.24
log
@sync with steelix translation CVS
@
text
@d945 15
d1110 2
a1111 2
Originally [OpenBSD: filter.html,v 1.38 ]<br>
$Translation: filter.html,v 1.24 2006/11/01 10:48:51 paldium Exp $<br>
@


1.23
log
@sync with steelix translation CVS
@
text
@d59 1
d72 1
a72 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d75 1
a75 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d77 1
a77 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d79 1
a79 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d81 1
a81 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d83 1
a83 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d85 1
a85 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d134 1
a134 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d151 11
a161 3
Eine Interfacegruppe wird mit dem Namen des Interfaces angegeben, jedoch
ohne der angehängten Zahl am Ende.
Zum Beispiel <tt>ppp</tt> oder <tt>fxp</tt>.
d163 1
a163 1
das <tt>ppp</tt>- oder <tt>fxp</tt>-Interface durchläuft - je nachdem.
d179 1
a179 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d203 6
a208 6
<li>Der Name des Netzwerkinterfaces in Klammern <tt>( )</tt>. Die
Klammern teilen PF mit, dass die Regel sich aktualisieren soll, wenn
sich die IP-Adresse(n) des genannten Interfaces ändert/ändern. Dies ist
insbesondere dann sinnvoll, wenn die IP-Adresse per DHCP oder dial-up
erhalten wird, da der Regelsatz so nicht jedes Mal neugeladen werden
muss, wenn sich die Adresse ändert.
d244 1
a244 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d804 1
a804 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d830 1
a830 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d913 32
d960 1
a960 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d1095 2
a1096 2
Originally [OpenBSD: filter.html,v 1.37 ]<br>
$Translation: filter.html,v 1.23 2006/10/29 09:44:48 paldium Exp $<br>
@


1.22
log
@sync with steelix translation CVS
@
text
@d1054 2
a1055 2
Originally [OpenBSD: filter.html,v 1.36 ]<br>
$Translation: filter.html,v 1.22 2006/08/11 09:15:47 paldium Exp $<br>
@


1.21
log
@sync with Steelix CVS
@
text
@d450 1
a450 1
<ahref="options.html#state-policy"
d1055 1
a1055 1
$Translation: filter.html,v 1.21 2006/08/06 14:06:56 paldium Exp $<br>
@


1.20
log
@3.9 release time.
@
text
@d53 3
a55 3
<li><a href="#state">,state' halten</a>
<li><a href="#udpstate">,state' für UDP halten</a>
<li><a href="#stateopts">Optionen für ,Stateful' Tracking</a>
d58 2
a59 2
<li><a href="#antispoof">,spoofed' Pakete blocken</a>
<li><a href="#osfp">Passives Betriebssystem-,Fingerprinting'</a>
d68 3
a70 2
Paket-Filtern ist das selektive Durchlassen oder Blocken von Datenpaketen,
sobald sie durch das Netzwerk-Interface gehen. Die Kriterien, die
d86 1
a86 1
Ziel-Adressen sowie Ziel-Port und das Protokoll.
d89 2
a90 2
Filterregeln geben die Kriterien an, auf die ein Paket zutreffen muss, und
die resultierende Handlung, entweder Blocken oder Durchlassen, die
d92 1
a92 1
werden in sequentieller Reihenfolge verarbeitet, von der ersten bis zur
d96 1
a96 1
Regel, die zutrifft, ist der ,Gewinner' und wird die Aktion angeben, die
d98 1
a98 1
am Anfang des Filterregelsatzes, das bedeutet, dass, falls ein Paket auf
d104 1
a104 1
Die generelle, <i>höchstgradig vereinfachte</i> Syntax für Filterregeln
d118 1
a118 1
<dd>Die Aktion, die für zutreffende Pakete angewandt werden soll, entweder
d124 1
a124 1
das Angeben von <tt>block drop</tt> oder <tt>block return</tt>
d128 1
a128 1
<dd>Die Richtung, in die das Paket sich bewegt, entweder rein (<tt>in</tt>)
d137 1
a137 1
aufgezeichnet, das den ,state' aufgebaut hat.
d144 2
a145 1
sie die Aktion (<tt><i>action</i></tt>) angibt, die durchgeführt werden soll.
d148 3
a150 3
<dd>Der Name eines Netzwerk-Interfaces, bzw. die Gruppe von Netzwerk-Interfaces,
durch das sich das Paket bewegt.
Eine Interface-Gruppe wird mit dem Namen des Interfaces angegeben, jedoch
d152 1
a152 1
Zum Beispiel: <tt>ppp</tt> oder <tt>fxp</tt>.
d154 1
a154 1
das <tt>ppp</tt>- oder <tt>fxp</tt>-Interface durchläuft, je nachdem.
d157 1
a157 1
<dd>Die Adress-Familie des Pakets, entweder <tt>inet</tt> für IPv4 oder
d159 1
a159 1
Parameter für die Quell- und/oder Ziel-Adresse(n) das selbst zu
d178 1
a178 1
<dd>Die Quell-/Ziel-Adresse im IP-Header. Adressen können wie folgt
d182 4
a185 2
<li>Ein <a href="http://public.pacbell.net/dedicated/cidr.html">CIDR</a>-Netzwerkblock
<li>Ein ,fully qualified domain name', der per DNS aufgelöst wird, wenn
d188 1
a188 1
<li>Der Name des Netzwerk-Interfaces. Jegliche IP-Adressen, die dem
d190 2
a191 2
<li>Der Name des Netzwerk-Interfaces gefolgt von
<tt>/<i>netmask</i></tt> (z.B. <tt>/24</tt>). Jede IP-Adresse auf
d194 7
a200 7
<li>Der Name des Netzwerk-Interfaces in Klammern <tt>( )</tt>. Diese
teilen PF mit, dass die Regel sich aktualisieren soll, wenn sich die
IP-Adresse(n) des genannten Interfaces ändert/ändern. Dies ist insbesondere
dann sinnvoll, wenn die IP-Adresse per DHCP oder dial-up erhalten wird,
da der Regelsatz so nicht jedes Mal neugeladen werden muss, wenn sich
die Adresse ändert.
<li>Der Name eines Netzwerk-Interfaces gefolgt von einem dieser
d203 1
a203 1
  <li><tt>:network</tt> - fügt den CIDR-Netzwerkblock ein (z.B.
d205 2
a206 2
  <li><tt>:broadcast</tt> - fügt die Netzwerk-Broadcast-Adresse ein
  (z.B. 192.168.0.255)
d211 1
a211 1
  <dd>Zusätzlich kann der <tt>:0</tt>-Modifizierer einem Interface-Namen
d213 3
a215 4
  hinzuweisen, dass PF keine IP-Adress-Aliase in die Einfügung mit
  übernehmen soll.
  Diese Modifizierer können ebenfalls verwendet werden, wenn sich das
  Interface in Klammern befindet.
d223 3
a225 2
<li>Das Schlüsselwort <tt>any</tt>, das bedeutet: alle Adressen
<li>Das Schlüsselwort <tt>all</tt>, welches eine Kurzschreibweise für
d230 1
a230 1
<dd>Der Quell-/Ziel-Port in dem Layer-4-Paket-Header. Ports können
d247 1
a247 1
	<li><tt>&lt;&gt;</tt> (umgekehrter Bereich)
d249 1
a249 1
	<dd>Die letzten beiden sind Binär-Operatoren (sie benötigen zwei
d255 1
a255 1
	Binär-Operator und fügt die Argumente mit in den Bereich ein.
d263 4
a266 3
<tt>flags <i>check</i>/<i>mask</i></tt> angegeben. Zum Beispiel: <tt>flags
S/SA</tt> - dies sagt PF, dass nur auf die S- und A- (SYN und ACK) Flags
geachtet werden und zutreffen soll, wenn nur das SYN-Flag ,an' ist.
d269 1
a269 1
<dd>Gibt an, ob die ,state'-Information für das Paket gehalten werden
d274 1
a274 1
starke ,Initial Sequence Numbers' (ISNs) für Pakete erstellen, die auf
d277 3
a279 4
den Proxy geschickt, um bei der Beschützung der Server vor ,spoofed'
TCP-SYN-Floods zu helfen.
Diese Option beinhaltet die Funktionalität von <tt>keep state</tt> und
<tt>modulate state</tt>.
d285 2
a286 2
Die empfohlene Praxis, wenn eine Firewall aufgesetzt wird, ist, einen
,standardmäßiges Blocken'-Weg einzuschlagen. Dies bedeutet, dass
d289 2
a290 2
entstehender Fehler auf der sicheren Seite ist und er das Schreiben eines
Regelsatzes einfacher macht.
d293 1
a293 1
Um eine ,standardmäßiges Blocken'-Richtlinie zu erstellen, sollten die
d303 1
a303 1
Dies wird den gesamten Verkehr auf allen Interfaces blocken, egal in
d309 3
a311 3
wird wegen der ,standardmäßiges Blocken'-Richtlinie fallen gelassen.
Dies ist, wo Paket-Kriterien wie Quell-/Ziel-Ports, Quell-/Ziel-Adressen
und das Protokoll ins Spiel kommen. Wann auch immer Verkehr durch die
d313 2
a314 2
geschrieben werden. Dies stellt sicher, dass der beabsichtigte Verkehr,
und zwar nur der beabsichtigte Verkehr, durchgelassen wird.
d327 2
a328 2
# Lasse TCP-Verkehr auf fxp0 vom Web-Server herein, der auf der<br>
# OpenBSD-Maschine läuft. Der Interface-Name fxp0 wird als Ziel-Adresse<br>
d340 1
a340 1
werden kann, und das wiederum mehrmals wechseln kann, bevor das Ende
d342 1
a342 1
,gewinnt'.</b> Es gibt eine Ausnahme dafür: Die <tt>quick</tt>-Option
d358 2
a359 2
wird keinen Effekt haben, da sie von einer Zeile gefolgt wird, die alles
durchlassen wird.
d376 6
a381 6
<h2>,state' halten</h2>
Eine der wichtigen Fähigkeiten von Packet Filter ist ,keeping state',
bzw. ,stateful inspection'. ,Stateful inspection' verweist auf PFs
Fähigkeit, den ,state', oder Fortschritt, auf der Netzwerkverbindung
nachweisen zu können. Durch das Aufbewahren der Informationen über
jede Verbindung in einer ,state'-Tabelle ist PF in der Lage, schnell
d388 8
a395 8
Den ,state' zu halten hat viele Vorteilen, einschließlich einfacherer
Regelsätze und besserer Leistung beim Paket-Filtern. PF ist in der
Lage, Pakete mit den Einträgen in der ,state'-Tabelle zu überprüfen,
<i>egal</i>, in welche Richtung sich das Paket bewegt, was bedeutet, dass
Filterregeln, die den Antwort-Verkehr hereinlassen, nicht geschrieben
werden müssen. Und da Pakete, die mit ,stateful'-Verbindungen
übereinstimmen, nicht durch die Regelsatz-Überprüfung gehen, kann
die Zeit, die PF zum Verarbeiten der Pakete benötigt, drastisch
d400 1
a400 1
erste zutreffende Paket einen ,state' zwischen Sender und Empfänger.
d402 1
a402 1
die vom Sender zum Empfänger gehen, sondern auch die Antwort-Pakete
d412 1
a412 1
<tt>fxp0</tt>-Interface und lässt ebenfalls Antwort-Verkehr zu, der
d414 1
a414 1
Während das Halten von ,states' eine schöne Funktionalität ist, kann
d416 2
a417 2
,state'-Überprüfungen um ein vielfaches schneller sind als das Paket durch
die Filterregeln zu schicken.
d421 3
a423 3
<tt>keep state</tt> mit der Ausnahme, dass es nur auf TCP-Pakete
zutrifft. Mit <tt>modulate state</tt> wird die ,Initial Sequence
Number' (ISN) des ausgehenden Verkehrs zufällig gewählt. Dies ist
d427 1
a427 1
Beginnend mit OpenBSD 3.5, kann die <tt>modulate state</tt>-Option
d431 1
a431 1
Den ,state' von ausgehenden TCP-, UDP-, und ICMP-Paketen und
d441 1
a441 1
Ein anderer Vorteil beim Halten von ,states' ist, dass der
d444 2
a445 2
und eine ICMP-,source-quench'-Nachricht für diese TCP-Verbindung
ankommt, wird sie mit dem dazugehörigem ,state' übereinstimmen und
d449 7
a455 7
Der Bereich des ,state'-Eintrags wird systemweit durch die
<a href="options.html#state-policy"><tt>state-policy</tt></a>-Laufzeit-Option
auf einer Regel-spezifischen Basis durch die <tt>if-bound</tt>-,
<tt>group-bound</tt>- und <tt>floating</tt>-state-Option-Schlüsselwörter
kontrolliert. Diese Regel-spezifischen Schlüsselwörter haben die gleiche
Bedeutung, als wenn sie mit der <tt>state-policy</tt>-Option verwendet
werden. Beispiel:
d465 2
a466 3
Diese Regel bestimmt, dass, damit Pakete mit dem ,state'-Eintrag
übereinstimmen können, diese durch das <tt>fxp0</tt>-Interface gelangen
müssen.
d472 1
a472 1
<a href="rdr.html"><tt>rdr-</tt></a>Regeln implizit einen ,state'
d478 3
a480 3
Man wird ab und zu hören, dass jemand sagt: "Man kann keinen ,state'
mit UDP erstellen, da UDP ein ,stateless' Protokoll ist!" Obwohl es
wahr ist, dass UDP-Verbindungssitzungen kein Konzept eines ,states'
d482 2
a483 2
Wirkung auf PFs Fähigkeit, einen ,state' für eine UDP-Sitzung zu
erstellen. In dem Fall von Protokollen ohne ,Start'- und ,Ende'-Paketen,
d486 1
a486 1
der ,state' gelöscht. Der Timeout-Wert kann in der
d491 5
a495 5
<h2>Optionen für ,Stateful' Tracking</h2>
Wenn eine Filterregel einen ,state'-Tabelleneintrag durch das Verwenden
irgendeines <tt>keep state</tt>-, <tt>modulate state</tt>- oder
<tt>synproxy state</tt>-Schlüsselwort anlegt, können bestimmte Optionen
angegeben werden, die das Verhalten der ,state'-Erstellung beeinflussen.
d500 1
a500 1
<dd>Begrenzt die maximale Anzahl von ,state'-Einträgen, die die Regel
d503 2
a504 2
,state' erstellen würden, fallen gelassen, bis die Anzahl der
existierenden ,states' wieder sinkt.
d507 2
a508 2
<dd>Diese Option aktiviert das Tracking der Anzahl von States, die für
jede einzelne IP-Adresse erstellt wurden.
d512 1
a512 1
	,states', die durch diese Regel erstellt werden können, wird
d515 1
a515 1
	,state'-Einträge, die durch diese bestimmte Regel erstellt
d518 1
a518 1
	<li><tt>source-track global</tt> - Die Anzahl von ,states'
d522 1
a522 1
	,state'-Einträge, die durch eine der teilnehmenden Regeln
d528 1
a528 1
<a href="options.html#limit"><tt>src-nodes</tt>-Laufzeit-Option</a>
d534 2
a535 3
gleichzeitig einen ,state' anlegen können.
Diese Option kann nur zusammen mit <tt>source-track rule</tt> genutzt
werden.
d540 1
a540 1
,state'-Einträge begrenzen, die pro Quell-IP-Adresse angelegt werden
d542 4
a545 4
Der Bereich dieser Begrenzung (z.B. ,states', die nur durch diese Regel
erstellt wurden, oder ,states', die durch alle Regeln unter Verwendung
von <tt>source-track</tt> erstellt wurden) ist abhängig von der
angegebenen <tt>source-track</tt>-Option.
d564 7
a570 7
<li>Begrenze die maximale Anzahl von ,states', die diese Regel erstellen
kann, auf 200
<li>Aktiviere ,source tracking'; begrenze die Anzahl der
,state'-Erstellung nur für diese Regel
<li>Begrenze die maximale Anzahl von ,nodes', die gleichzeitig ,states'
Erstellen, auf 100
<li>Begrenze die maximale Anzahl von gleichzeitigen ,states' pro
d575 3
a577 2
Ein separater Satz von Begrenzungen kann auf ,stateful' TCP-Verbindungen
gesetzt werden, die den dreifachen Handschlag vollzogen haben.
d684 1
a684 1
Hinweis: in früheren Versionen von OpenSBD wurde die folgende Syntax
d850 1
a850 1
Subnetz-Maske von 255.255.255.0 hat (z.B. /24), dann würde die
d1055 1
a1055 1
$Translation: filter.html,v 1.19 2006/05/01 11:17:11 paldium Exp $<br>
@


1.19
log
@sync with Steelix CVS
@
text
@d70 1
a70 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d73 1
a73 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d75 1
a75 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d77 1
a77 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d79 1
a79 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d81 1
a81 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d83 1
a83 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d132 1
a132 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d168 1
a168 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d231 1
a231 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d792 1
a792 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d818 1
a818 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d916 1
a916 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d1051 2
a1052 2
Originally [OpenBSD: filter.html,v 1.35 ]<br>
$Translation: filter.html,v 1.18 2006/04/24 17:44:30 paldium Exp $<br>
@


1.18
log
@sync with steelix translation CVS
@
text
@a5 1
<meta http-equiv="Content-Language" content="de">
d8 1
a8 1
<meta name="description"   content="Die OpenBSD-FAQ-Seite">
d1051 2
a1052 2
Originally [OpenBSD: filter.html,v 1.35 ]
$Translation: filter.html,v 1.17 2006/02/12 20:23:54 jufi Exp $
@


1.17
log
@sync with steelix translation CVS
@
text
@d876 1
a876 1
mann auf Loopbackinterfaces nicht filtert - doch bei der Verwendung von
d1053 1
a1053 1
$Translation: filter.html,v 1.16 2006/01/10 12:18:04 paldium Exp $
@


1.16
log
@sync with steelix translation CVS
@
text
@d625 1
a625 1
Dies macht folgendes:
d1053 1
a1053 1
$Translation: filter.html,v 1.15 2006/01/03 12:35:11 paldium Exp $
@


1.15
log
@sync with steelix translation CVS
@
text
@d139 1
a139 1
<tt>log-all</tt>.
d875 3
a877 2
zur lokalen Adresse gesendet werden. Diese Adressen sollten ebenfalls
explizit durchgelassen werden. Beispiel:
d880 1
a880 1
pass quick on lo0 all<br>
d998 3
d1005 1
a1005 5
block in  all
block out all

# den verkehr auf dem loopback-interface in jede richtung durchlassen
pass quick on lo0 all
d1052 2
a1053 2
Originally [OpenBSD: filter.html,v 1.33 ]
$Translation: filter.html,v 1.14 2005/11/04 11:01:45 paldium Exp $
@


1.14
log
@sync with Steelix CVS
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d74 1
a74 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d76 1
a76 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d78 1
a78 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d80 1
a80 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d82 1
a82 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d84 1
a84 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d133 1
a133 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d169 1
a169 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d232 1
a232 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d793 1
a793 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d819 1
a819 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d916 1
a916 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d1052 2
a1053 2
Originally [OpenBSD: filter.html,v 1.32 ]
$Translation: filter.html,v 1.13 2005/10/16 08:17:50 paldium Exp $
@


1.13
log
@sync with Steelix CVS
@
text
@d737 4
a740 3
TCP-Flag-Kombinationen (wie zum Beispiel SYN und FIN oder SYN und
RST) fallenzulassen. Es wird dringend empfohlen, immer <tt>scrub</tt>
auf eingehenden Verkehr anzuwenden:
d1052 2
a1053 2
Originally [OpenBSD: filter.html,v 1.31 ]
$Translation: filter.html,v 1.12 2005/09/14 16:16:39 paldium Exp $
@


1.12
log
@sync with Steelix CVS
@
text
@d6 1
a8 1
<meta http-equiv="Content-Language" content="de">
d1046 1
a1046 1
<a href="../../de/index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[zurück]"></a>
d1052 1
a1052 1
$Translation: filter.html,v 1.11 2005/08/09 20:49:18 paldium Exp $
@


1.11
log
@sync with Steelix CVS
@
text
@d915 1
a915 2
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manp
ath=OpenBSD+3.7"
d1052 1
a1052 1
$Translation: filter.html,v 1.10 2005/05/20 18:05:19 paldium Exp $
@


1.10
log
@sync with steelix translation CVS
@
text
@d169 1
a169 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.6"
a382 2
Beginnend mit OpenBSD 3.5 kann die <tt>modulate state</tt>-Option
in Regeln verwendet werden, die ein anderes Protokoll als TCP verwenden.
d388 1
a388 1
egal, in welche Richtung sich das Paket bewegt, was bedeutet, dass
d424 2
d792 1
a792 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;
manpath=OpenBSD+3.7"
d1053 1
a1053 1
$Translation: filter.html,v 1.9 2005/05/20 16:33:52 paldium Exp $
@


1.9
log
@sync with steelxi translation CVS
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d74 1
a74 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d76 1
a76 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d78 1
a78 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d80 1
a80 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d82 1
a82 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d84 1
a84 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d133 1
a133 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d232 1
a232 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.6"
d533 2
a534 4
Der Bereich dieser Begrenzung (z.B. ,states', die nur durch diese Regel
erstellt wurden, oder ,states', die durch alle Regeln unter Verwendung
von <tt>source-track</tt> erstellt wurden) ist abhängig von der
angegebenen <tt>source-track</tt>-Option.
d573 64
d793 1
a793 1
manpath=OpenBSD+3.6"
d819 1
a819 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d917 1
a917 1
ath=OpenBSD+3.6"
d1053 2
a1054 2
Originally [OpenBSD: filter.html,v 1.30 ]
$Translation: filter.html,v 1.8 2005/04/25 18:16:47 paldium Exp $
@


1.8
log
@huge sync from the translators
@
text
@@


1.7
log
@sync with Steelix CVS
@
text
@d498 1
a498 1
<dd>Begrenzt die maximale Anzahl an ,state'-Einträgen, die die Regel
d505 1
a505 1
<dd>Diese Option aktiviert das Tracking der Anzahl an States, die für
d509 8
a516 7
	<li><tt>source-track rule</tt> - Die maximale Anzahl an ,states',
	die durch diese Regel erstellt werden können, wird durch
	die <tt>max-src-nodes</tt>- und <tt>max-src-states</tt>-Optionen
	dieser Regel begrenzt. Nur ,state'-Einträge, die durch diese
	bestimmte Regel erstellt wurden, werden gezählt und mit der
	Grenze dieser Regel überprüft.
	<li><tt>source-track global</tt> - Die Anzahl an ,states'
d520 3
a522 2
	,state'-Einträge, die durch eine der teilnehmenden Regeln erstellt
	wurden, mit der individuellen Begrenzung der Regel überprüft.
d524 1
a524 1
Die gesamte Anzahl an Quell-IP-Adressen, die verfolgt werden, kann
d531 1
a531 1
<tt>max-src-nodes</tt> die Anzahl an Quell-IP-Adressen begrenzen, die
d540 1
a540 1
wird <tt>max-src-states</tt> die Anzahl an gleichzeitig erstellten
d565 1
a565 1
<li>Begrenze die maximale Anzahl an ,states', die diese Regel erstellen
d569 1
a569 1
<li>Begrenze die maximale Anzahl an ,nodes', die gleichzeitig ,states'
d571 2
a572 2
<li>Begrenze die maximale Anzahl an gleichzeitigen ,states' pro Quell-IP
auf 3
d992 1
a992 1
$Translation: filter.html,v 1.7 2005/02/27 11:58:48 paldium Exp $
@


1.6
log
@sync with Steelix CVS
@
text
@d15 1
a15 1
Copyright (c) 2003, 2004 Joel Knight <enabled@@myrealbox.com>
d56 1
d488 85
d873 4
a876 4
pass &nbsp;in on $ext_if any os OpenBSD keep state<br>
block in on $ext_if any os "Windows 2000"<br>
block in on $ext_if any os "Linux 2.4 ts"<br>
block in on $ext_if any os unknown
d989 2
a990 2
Originally [OpenBSD: filter.html,v 1.27 ]
$Translation: filter.html,v 1.6 2005/01/30 10:46:52 paldium Exp $
@


1.5
log
@Sync with Steelix CVS
@
text
@d107 4
a110 4
<i>action</i> <i>direction</i> [log] [quick] on <i>interface</i> [<i>af</i>] 
[proto <i>protocol</i>] \<br>
&nbsp;&nbsp;&nbsp;from <i>src_addr</i> [port <i>src_port</i>] to 
<i>dst_addr</i> [port <i>dst_port</i>] \<br>
d903 2
a904 2
Originally [OpenBSD: filter.html,v 1.26 ]
$Translation: filter.html,v 1.5 2005/01/18 14:33:46 paldium Exp $
@


1.4
log
@Sync with Steelix CVS
@
text
@d9 1
a9 1
<meta name="description"   content="die OpenBSD-FAQ-Seite">
d902 5
a906 3
Originally [OpenBSD: filter.html,v 1.26 ]<br>
$Translation: filter.html,v 1.4 2004/12/22 12:29:53 paldium Exp $<br>
$OpenBSD: filter.html,v 1.26 2004/12/22 04:28:16 david Exp $
@


1.3
log
@sync with Steelix CVS
@
text
@d35 3
a37 1
<img alt="[OpenBSD]" height=30 width=141 src="../../../images/smalltitle.gif">
d902 3
a904 3
Originally [OpenBSD: filter.html,v 1.25 ]<br>
$Translation: filter.html,v 1.3 2004/12/07 16:56:32 paldium Exp $<br>
$OpenBSD: filter.html,v 1.25 2004/11/01 21:41:07 nick Exp $
@


1.2
log
@Sync with Steelix CVS
@
text
@d9 1
a9 1
<meta name="description"   content="Die OpenBSD-FAQ-Seite">
d82 1
a82 1
>ICMPv6</a>) Headern. Die meistgenutzten Kriterien sind Source- und
d125 2
a126 2
<dd>Die Richtung, in die das Paket sich bewegt, entweder <tt>in</tt>
(rein) oder <tt>out</tt> (raus).
d141 1
a141 1
sie die <tt><i>action</i></tt> (Aktion) angibt, die durchgeführt werden soll.
d144 1
a144 1
<dd>Der Name eines Netzwerk-Interfaces, bzw. die Gruppe an Netzwerk-Interfaces,
d155 1
a155 1
Parameter für die Source- und/oder Ziel-Adresse(n) das selbst zu
d174 1
a174 1
<dd>Die Source-/Ziel-Adresse im IP-Header. Adressen können wiefolgt
d184 1
a184 1
<li>Der Name des Netzwerk-Interfaces, gefolgt von
d190 1
a190 1
IP-Adresse(n) des genannten Interface ändert/ändern. Dies ist insbesondere
d194 1
a194 1
<li>Der Name eines Netzwerk-Interfaces, gefolgt von einem dieser
d219 1
a219 1
<li>Das Schlüsselwort <tt>all</tt>, welches eine Kurzschreibweise von
d224 2
a225 2
<dd>Der Source-/Ziel-Port in dem Layer-4-Paket-Header. Ports können
wiefolgt angegeben werden:
d244 1
a244 1
	Argumente) und fügen die Argumente in dem Bereich nicht ein.
d259 1
a259 1
geachtet werden soll und zutreffen soll, wenn nur das SYN Flag ,an' ist.
d267 1
a267 1
,strong Initial Sequence Numbers' (ISNs) für Pakete erstellen, die auf
d283 1
a283 1
enstehender Fehler auf der sicheren Seite ist und er das Schreiben eines
d288 1
a288 1
ersten beiden Filterregeln wiefolgt sein:
d304 1
a304 1
Dies ist, wo Paket-Kriterien wie Source-/Ziel-Ports, Source-/Ziel-Adressen
d314 3
a316 3
# Lasse den Verkehr auf dc0 vom lokalen Netzwerk herein, 192.168.0.0/24,<br>
# zur OpenBSD-Maschine mit der IP-Adresse 192.168.0.1. Lasse ebenfalls den<br>
# Antwort-Verkehr durch dc0 wieder raus.<br>
d334 1
a334 1
werden kann, und das wiederum mehrmals wechsel kann, bevor das Ende
d351 1
a351 1
In diesem Fall wird die <tt>block</tt>-Linie zwar verarbeit, aber
d366 1
a366 1
die <tt>block</tt>-Linie zutrifft, wird das Paket geblockt und wegen
d375 1
a375 1
jede Verbindung in einer ,state'-Tabelle, ist PF in der Lage, schnell
d381 1
a381 1
in Regeln verwendet werden, die ein anderes Protokoll als TCP verweden.
d389 2
a390 2
werden müssen. Und da Pakete, die mit ,stateful' Verbindungen
übereinstimmten, nicht durch die Regelsatz-Überprüfung gehen, kann
d410 1
a410 1
Während das halten von ,states' eine schöne Funktionalität ist, kann
d425 2
a426 2
Den ,state' von ausgehenden TCP-, UDP-, und ICMP-Paketen halten und
,modulate'-TCP-ISNs:
d439 1
a439 1
ankommt, wird es mit dem dazugehörigem ,state' übereinstimmen und
d446 1
a446 1
<tt>group-bound</tt>- und <tt>floating</tt>-,state'-Option-Schlüsselwörter
d460 1
a460 1
übereinstimmen können, diese durch das <tt>fxp0</tt>-Interface wandern
d476 1
a476 1
haben (einen expliziten Anfang und explizites Ende), hat dies keine
d562 1
a562 1
Solche eine Regel würde wiefolgt enden:
d568 3
a570 3
Die Theorie ist, erstelle nur am Anfang der TCP-Sitzung einen ,state'
und die Sitzung sollte nur mit einem SYN-Flag starten, keinem anderen.
Das Problem ist, dass einige Seiten anfangen, das ECN-Flag zu
d572 1
a572 1
zu dir zu connecten, bei einer solchen Regel abgeblockt werden würde.
d618 1
a618 1
Der TCP-SYN-Proxy wurd durch die Verwendung der
d647 1
a647 1
Source-IP-Adresse in den Paketen ändert, die versendet werden, um entweder
d696 2
a697 2
Subnet-Maske von 255.255.255.0 hat (z.B. /24), dann würde die
oben angegebene <tt>antispoof</tt>-Regel wiefolgt entwickelt werden:
d711 1
a711 1
auf dem <tt>fxp0</tt>-Interface liegt, dürften Pakete mit Source-Adressen aus
d716 1
a716 1
Interface senden, sodass alle eingehenden Pakete mit der Source-Adresse,
d832 1
a832 1
etc. wurde aus diesem Beispiel herausgelassen.
d842 1
a842 1
# Tabelle, die alle IP-Adressen beinhaltet, die der Firewall zugewiesen
d846 1
a846 1
# ,scrub' auf alle eingehenden Pakete anwenden
d849 1
a849 1
# eine Richtlinie zum standardmäßigen Blocken errichten
d853 1
a853 1
# Den Verkehr auf dem Loopback-Interface in jede Richtung durchlassen
d856 1
a856 1
# ,spoofing'-Schutz für das interne Interface aktivieren.
d859 3
a861 3
# nur ssh-Verbindungen vom lokalen Netzwerk erlauben, wenn es von dem
# Computer 192.168.0.15 kommt, dem man vertrauen kann. verwende
# ,block return', sodass ein TCP-RST gesendet wird, um blockierte
d863 1
a863 1
# Regel nicht von der ,pass'-Regel weiter unten überschrieben wird.
d867 1
a867 1
# den gesamten Verkehr von und zum lokalen Netzwerk durchlassen
d871 1
a871 1
# tcp, udp und icmp durch das externe (Internet-)Interface rauslassen.
d876 5
a880 5
# erlaube eingehende ssh-Verbindungen auf dem externen Interface, so
# lange sie NICHT für die Firewall bestimmt sind (z.B. wenn sie an eine
# Maschine im lokalen Netzwerk gerichtet sind). zeichne das erste
# Paket auf, sodass wir später sagen können, wer versucht, zu verbinden.
# verwende den tcp-syn-proxy um einen Proxy für diese Verbindung
d896 1
a896 1
<a href="../../de/index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[back]"></a> 
d900 2
a901 4
Originally [OpenBSD: filter.html,v 1.25 ]
<br>
$Translation: filter.html,v 1.2 2004/12/01 14:54:18 paldium Exp $
<br>
@


1.1
log
@Sync with Steelix CVS
@
text
@d4 1
a4 1
<title>PF: Packet Filtering</title>
d8 2
a9 1
<meta name="description"   content="the OpenBSD FAQ page">
a11 1
<meta name="copyright"     content="This document copyright 2002-2003 by OpenBSD.">
d14 17
d37 3
a39 3
[<a href="rdr.html">Previous: Traffic Redirection</a>]
[<a href="index.html">Contents</a>]
[<a href="logging.html">Next: Logging</a>]
d41 1
a41 1
<h1><font color="#e00000">PF: Packet Filtering</font></h1>
d45 1
a45 1
<h3>Table of Contents</h3>
d47 13
a59 11
<li><a href="#intro">Introduction</a>
<li><a href="#syntax">Rule Syntax</a>
<li><a href="#defdeny">Default Deny</a>
<li><a href="#pass">Passing Traffic</a>
<li><a href="#state">Keeping State</a>
<li><a href="#udpstate">Keeping State for UDP</a>
<li><a href="#tcpflags">TCP Flags</a>
<li><a href="#quick">The <tt>quick</tt> Keyword</a>
<li><a href="#antispoof">Blocking Spoofed Packets</a>
<li><a href="#ipopts">IP Options</a>
<li><a href="#example">Filtering Ruleset Example</a>
d65 11
a75 10
<h2>Introduction</h2>
Packet filtering is the selective passing or blocking of data
packets as they pass through a network interface. The criteria that 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.4"
>pf(4)</a> uses when inspecting packets is based on the Layer 3 
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.4"
>IPv4</a> and 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.4"
>IPv6</a>) and Layer 4
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d77 1
a77 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d79 19
a97 17
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.4"
>ICMP</a>, and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.4"
>ICMPv6</a>) headers. The most often used criteria are source and
destination address, source and destination port, and protocol.

<p>
Filter rules specify the criteria that a packet must match and the
resulting action, either block or pass, that is taken when a match is
found. Filter rules are evaluated in sequential order, first to last.
Unless the packet matches a rule containing the <tt>quick</tt> keyword,
the packet will be evaluated against <i>all</i> filter rules before the
final action is taken. The last rule to match is the "winner" and will
dictate what action to take on the packet. There is an implicit
<tt>pass all</tt> at the end of a filtering ruleset meaning that if a
packet does not match any filter rule the resulting action will be
<tt>pass</tt>.
d100 3
a102 2
<h2>Rule Syntax</h2>
The general, <i>highly simplified</i> syntax for filter rules is:
d105 1
a105 1
<i>action</i> <i>direction</i> [log] [quick] on <i>int</i> [<i>af</i>] 
d109 1
a109 1
&nbsp;&nbsp;&nbsp;[<i>tcp_flags</i>] [<i>state</i>]
d115 8
a122 7
<dd>The action to be taken for matching packets, either <tt>pass</tt> or
<tt>block</tt>. The <tt>pass</tt> action will pass the packet back to
the kernel for further processing while the <tt>block</tt> action will
react based on the setting of the
<a href="options.html#block-policy"><tt>block-policy</tt></a> option. 
The default reaction may be overridden by specifying either <tt>block
drop</tt> or <tt>block return</tt>.
d125 2
a126 2
<dd>The direction the packet is moving on an interface, either
<tt>in</tt> or <tt>out</tt>.
d129 7
a135 5
<dd>Specifies that the packet should be logged via
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.4"
>pflogd(8)</a>. If the rule specifies the <tt>keep state</tt> or
<tt>modulate state</tt> option then only the packet which establishes
the state is logged. To log all packets regardless, use
d139 3
a141 2
<dd>If a packet matches a rule specifying <tt>quick</tt> then that rule
is considered the last matching rule and the specified action is taken.
d143 8
a150 2
<dt><tt><i>int</i></tt>
<dd>The name of the network interface that the packet is moving through.
d153 4
a156 3
<dd>The address family of the packet, either <tt>inet</tt> for IPv4 or
<tt>inet6</tt> for IPv6. PF is usually able to determine this parameter
based on the source and/or destination address(es).
d159 1
a159 1
<dd>The Layer 4 protocol of the packet:
d165 2
a166 2
<li>A valid protocol name from 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.4"
d168 3
a170 2
<li>A protocol number between 0 and 255
<li>A set of protocols using a <a href="macros.html#lists">list</a>.
d174 2
a175 2
<dd>The source/destination address in the IP header. Addresses can be
specified as:
d177 44
a220 27
<li>A single IPv4 or IPv6 address.
<li>A <a href="http://public.pacbell.net/dedicated/cidr.html">CIDR</a> 
network block.
<li>A fully qualified domain name that will be resolved via DNS when the
ruleset is loaded. All resulting IP addresses will be substituted into
the rule.
<li>The name of a network interface. Any IP addresses assigned to the
interface will be substituted into the rule.
<li>The name of a network interface followed by
<tt>/<i>netmask</tt></i> (i.e., <tt>/24</tt>). Each IP address on the
interface is combined with the netmask to form a CIDR network block
which is substituted into the rule.
<li>The name of a network interface in parentheses <tt>( )</tt>. This
tells PF to update the rule if the IP address(es) on the named interface
change. This is useful on an interface that gets its IP address via DHCP
or dial-up as the ruleset doesn't have to be reloaded each time the
address changes.
<li>The name of a network interface followed by the <tt>:network</tt> or
<tt>:broadcast</tt> keywords. The resulting CIDR network (i.e.,
192.168.0.0/24) or broadcast address (i.e., 192.168.0.255) will be
substituted into the rule when the ruleset is loaded.
<li>A <a href="tables.html">table</a>.
<li>Any of the above but negated using the <tt>!</tt> ("not") modifier.
<li>A set of addresses using a <a href="macros.html#lists">list</a>.
<li>The keyword <tt>any</tt> meaning all addresses
<li>The keyword <tt>all</tt> which is short for <tt>from any to
any</tt>.
d224 2
a225 2
<dd>The source/destination port in the Layer 4 packet header. Ports can
be specified as:
d227 3
a229 3
<li>A number between 1 and 65535
<li>A valid service name from
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.4"
d231 3
a233 2
<li>A set of ports using a <a href="macros.html#lists">list</a>
<li>A range:
d235 12
a246 8
	<li><tt>!=</tt> (not equal)
	<li><tt>&lt;</tt> (less than)
	<li><tt>&gt;</tt> (greater than)
	<li><tt>&lt;=</tt> (less than or equal)
	<li><tt>&gt;=</tt> (greater than or equal)
	<li><tt>&gt;&lt;</tt> (range)
	<li><tt>&lt;&gt;</tt> (inverse range)
	</ul>
d248 2
a249 2
	<dd>The last two are binary operators (they take two arguments) and
	do not include the arguments in the range.
d251 1
d255 5
a259 5
<dd>Specifies the flags that must be set in the TCP header when using
<tt>proto tcp</tt>. Flags are specified as 
<tt>flags <i>check</i>/<i>mask</i></tt>. For example: <tt>flags
S/SA</tt> - this instructs PF to only look at the S and A (SYN and ACK)
flags and to match if the SYN flag is "on".
d262 2
a263 2
<dd>Specifies whether state information is kept on packets matching this
rule.
d265 9
a273 3
<li><tt>keep state</tt> - works with TCP, UDP, and ICMP.
<li><tt>modulate state</tt> - works only with TCP. PF will generate
strong Initial Sequence Numbers (ISNs) for packets matching this rule.
d278 7
a284 6
<h2>Default Deny</h2>
The recommended practice when setting up a firewall is to take a
"default deny" approach. That is, to deny <i>everything</i> and then
selectively allow certain traffic through the firewall. This approach is
recommended because it errs on the side of caution and also makes
writing a ruleset easier.
d287 2
a288 2
To create a default deny filter policy, the first two filter rules should
be:
d297 2
a298 2
This will block all traffic on all interfaces in either direction from
anywhere to anywhere.
d301 16
a316 16
<h2>Passing Traffic</h2>
Traffic must now be explicitly passed through the firewall or it will be
dropped by the default deny policy. This is where packet criteria such
as source/destination port, source/destination address, and protocol
come into play. Whenever traffic is permitted to pass through the
firewall the rule(s) should be written to be as restrictive as 
possible. This is to ensure that the intended traffic, and only the
intended traffic, is permitted to pass.

<p>
Some examples:
<blockquote>
<tt>
# Pass traffic in on dc0 from the local network, 192.168.0.0/24,<br>
# to the OpenBSD machine's IP address 192.168.0.1. Also, pass the<br>
# return traffic out on dc0.<br>
d321 4
a324 4
# Pass TCP traffic in on fxp0 to the web server running on the<br>
# OpenBSD machine. The interface name, fxp0, is used as the<br>
# destination address so that packets will only match this rule if<br>
# they're destined for the OpenBSD machine.<br>
d329 40
d370 30
a399 24
<h2>Keeping State</h2>
One of Packet Filter's important abilities is "keeping state" or
"stateful inspection". Stateful inspection refers to PF's ability to
track the state, or progress, of a network connection. By storing
information about each connection in a state table, PF is able to
quickly determine if a packet passing through the firewall belongs to an
already established connection. If it does, it is passed through
the firewall without going through ruleset evaluation.

<p>
Keeping state has many advantages including simpler rulesets and better
packet filtering performance. PF is able to match packets moving in
<i>either</i> direction to state table entries meaning that filter rules
which pass returning traffic don't need to be written. And, since
packets matching stateful connections don't go through ruleset
evaluation, the time PF spends processing those packets can be greatly
lessened.

<p>
When a rule has the <tt>keep state</tt> option, the first packet
matching the rule creates a "state" between the sender and receiver.  
Now, not only do packets going from the sender to receiver match the
state entry and bypass ruleset evaluation, but so do the reply packets
from receiver to sender. For example:
d407 7
a413 5
This allows any outbound TCP traffic on the <tt>fxp0</tt> interface 
and also permits the reply traffic to pass back through the firewall.
While keeping state is a nice feature, its use significantly improves
the performance of your firewall as state lookups are dramatically
faster than running a packet through the filter rules.
d416 7
a422 6
The <tt>modulate state</tt> option works just like <tt>keep state</tt>
except that it only applies to TCP packets. With 
<tt>modulate state</tt>, the Initial Sequence Number (ISN) of outgoing
connections is randomized. This is useful for protecting connections
initiated by certain operating systems that do a poor job of choosing
ISNs.
d425 2
a426 1
Keep state on outgoing TCP, UDP, and ICMP packets and modulate TCP ISNs:
d429 2
a430 2
pass out on fxp0 proto tcp from any to any modulate state<br>
pass out on fxp0 proto { udp, icmp } from any to any keep state
d435 6
a440 5
Another advantage of keeping state is that corresponding ICMP traffic
will be passed through the firewall. For example, if <tt>keep state</tt>
is specified for a TCP connection and an ICMP source-quench message
referring to this TCP connection arrives, it will be matched to the
appropriate state entry and passed through the firewall.
d443 14
a456 6
It's important to note that stateful connections are limited to the
interface they were created on. This is particularly important on
routers and firewalls running PF, especially when a "default deny"
policy is implemented as outlined above. If a firewall is keeping state
on all outgoing connections on the external interface, those packets must
still be explicitly passed through the internal interface.
d459 11
a469 5
Note that <a href="nat.html"><tt>nat</tt></a>, 
<a href="nat.html#binat"><tt>binat</tt></a>, and
<a href="rdr.html"><tt>rdr</tt></a> rules implicitly create state for
matching connections as long as the connection is passed by the
filter ruleset.
d472 12
a483 11
<h2>Keeping State for UDP</h2>
One will sometimes hear it said that, "One can not create state with
UDP as UDP is a stateless protocol!"  While it is true that a UDP
communication session does not have any concept of state (an explicit
start and stop of communications), this does not have any impact on PF's
ability to create state for a UDP session.  In the case of protocols
without "start" and "end" packets, PF simply keeps track of how long it
has been since a matching packet has gone through.  If the timeout is
reached, the state is cleared.  The timeout values can be set in the 
<a href="options.html">options</a> section of the <tt>/etc/pf.conf</tt>
file.
d486 4
a489 4
<h2>TCP Flags</h2>
Matching TCP packets based on flags is most often used to filter TCP
packets that are attempting to open a new connection. The TCP flags and
their meanings are listed here:
d491 6
a496 6
<li><b>F</b> : FIN  - Finish; end of session
<li><b>S</b> : SYN  - Synchronize; indicates request to start session
<li><b>R</b> : RST  - Reset; drop a connection
<li><b>P</b> : PUSH - Push; packet is sent immediately
<li><b>A</b> : ACK  - Acknowledgement
<li><b>U</b> : URG  - Urgent
d502 3
a504 2
To have PF inspect the TCP flags during evaluation of a rule, the
<tt>flags</tt> keyword is used with the following syntax:
d512 4
a515 3
The <tt><i>mask</i></tt> part tells PF to only inspect the specified flags
and the <tt><i>check</i></tt> part specifies which flag(s) must be
"on" in the header for a match to occur.
d523 5
a527 4
The above rule passes TCP traffic with the SYN flag set while only
looking at the SYN and ACK flags. A packet with the SYN and ECE flags
would match the above rule while a packet with SYN and ACK or just ACK
would not.
d530 2
a531 2
Note: in previous versions of OpenBSD, the following syntax was
supported:
d539 2
a540 1
This is no longer true. A mask must now <i>always</i> be specified.
d543 3
a545 2
Flags are often used in conjunction with <tt>keep state</tt> rules to 
help control the creation of state entries:
d553 3
a555 2
This would permit the creation of state on any outgoing TCP packet
with the SYN flag set out of the SYN and ACK flags.
d558 5
a562 4
One should be careful with using flags -- understand what you are
doing and why, and be careful with the advice people give as a lot of 
it is bad.  Some people have suggested creating state "only if the SYN flag
is set and no others". Such a rule would end with: 
d568 6
a573 5
The theory is, create state only on the start of the TCP session, and
the session should start with a SYN flag, and no others.  The problem
is some sites are starting to use the ECN flag and any site using ECN
that tries to connect to you would be rejected by such a rule.  A
much better guideline is:
d581 7
a587 6
While this is practical and safe, it is also unnecessary to check the
FIN and RST flags if traffic is also being
<a href="scrub.html">scrubbed</a>. The scrubbing process will cause PF
to drop any incoming packets with illegal TCP flag combinations (such as
SYN and FIN or SYN and RST). It's highly recommended to always 
<tt>scrub</tt> incoming traffic:
d599 17
a615 10
<a name="quick"></a>
<h2>The <tt>quick</tt> Keyword</h2>
As indicated earlier, each packet is evaluated against the filter ruleset
from top to bottom.  By default, the packet is marked for passage, which
can be changed by any rule, and could be changed back and forth several
times before the end of the filter rules. <b>The last matching rule
"wins".</b>  There is an exception to this: The <tt>quick</tt> option
on a filtering rule has the effect of canceling any further rule
processing and causes the specified action to be taken. Let's look at a
couple examples:
d618 4
a621 1
Wrong:
d624 2
a625 2
block in on fxp0 proto tcp from any to any port ssh<br>
pass &nbsp;in all
d630 2
a631 3
In this case, the <tt>block</tt> line may be evaluated, but will never
have any effect, as it is then followed by a line which will pass
everything.
d634 3
a636 7
Better:
<blockquote>
<tt>
block in quick on fxp0 proto tcp from any to any port ssh<br>
pass &nbsp;in all
</tt>
</blockquote>
d639 4
a642 3
These rules are evaluated a little differently.  If the <tt>block</tt>
line is matched, due to the <tt>quick</tt> option, the packet will be
blocked, and the rest of the ruleset will be ignored.
d645 8
a652 7
<h2>Blocking Spoofed Packets</h2>
Address "spoofing" is when an malicious user fakes the source IP address
in packets they transmit in order to either hide their real address or
to impersonate another node on the network. Once the user has spoofed
their address they can launch a network attack without revealing the
true source of the attack or attempt to gain access to network services
that are restricted to certain IP addresses.
d655 2
a656 2
PF offers some protection against address spoofing through the
<tt>antispoof</tt> keyword:
d666 3
a668 3
<dd>Specifies that matching packets should be logged via
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.4"
>pflogd(8)</a>.
d671 2
a672 2
<dd>If a packet matches this rule then it will be considered the
"winning" rule and ruleset evaluation will stop.
d675 3
a677 2
<dd>The network interface to activate spoofing protection on. This can
also be a <a href="macros.html#lists">list</a> of interfaces.
d680 2
a681 2
<dd>The address family to activate spoofing protection for, either
<tt>inet</tt> for IPv4 or <tt>inet6</tt> for IPv6.
d685 1
a685 1
Example:
d693 5
a697 4
When a ruleset is loaded, any occurrences of the <tt>antispoof</tt>
keyword are expanded into two filter rules. Assuming that interface fxp0
has IP address 10.0.0.1 and a subnet mask of 255.255.255.0 (i.e., a
/24), the above <tt>antispoof</tt> rule would expand to:
d707 1
a707 1
These rules accomplish two things:
d709 9
a717 8
<li>Blocks all traffic coming from the 10.0.0.0/24 network that does
<i>not</i> pass in through fxp0. Since the 10.0.0.0/24 network is on the
fxp0 interface, packets with a source address in that network block
should never be seen coming in on any other interface.
<li>Blocks all incoming traffic from 10.0.0.1, the IP address on fxp0.
The host machine should never send packets to itself through an external
interface, so any incoming packets with a source address belonging to
the machine can be considered malicious.
d721 4
a724 3
<b>NOTE</b>: The filter rules that the <tt>antispoof</tt> rule
expands to will also block packets sent over the loopback interface to
local addresses. These addresses should be passed explicitly. Example:
d727 1
a727 1
pass in quick on lo0 all<br>
d734 4
a737 3
Usage of <tt>antispoof</tt> should be restricted to interfaces that have
been assigned an IP address. Using <tt>antispoof</tt> on an interface
without an IP address will result in filter rules such as:
d746 63
a808 2
With these rules there is a risk of blocking <i>all</i> inbound traffic
on <i>all</i> interfaces.
d811 6
a816 5
<h2>IP Options</h2>
By default, PF blocks packets with IP options set. This can make the job
more difficult for "OS fingerprinting" utilities like nmap. If you have
an application that requires the passing of these packets, such as
multicast or IGMP, you can use the <tt>allow-opts</tt> directive:
d824 5
a828 4
<h2>Filtering Ruleset Example</h2>
Below is an example of a filtering ruleset. The machine running PF is
acting as a firewall between a small, internal network and the Internet.
Only the filter rules are shown; 
d832 1
a832 1
etc., have been left out of this example.
d842 5
a846 1
# scrub incoming packets
d849 1
a849 1
# setup a default deny policy
d853 1
a853 1
# pass traffic on the loopback interface in either direction
d856 1
a856 1
# activate spoofing protection for the internal interface.
d859 5
a863 4
# only allow ssh connections from the local network if it's from the
# trusted computer, 192.168.0.15. use "block return" so that a TCP RST is
# sent to close blocked connections right away. use "quick" so that this
# rule is not overridden by the "pass" rules below.
d867 1
a867 1
# pass all traffic to and from the local network
d871 2
a872 2
# pass tcp, udp, and icmp out on the external (Internet) interface. 
# keep state on udp and icmp and modulate state on tcp.
d876 9
a884 6
# allow ssh connections in on the external interface as long as they're
# NOT destined for the firewall (ie, they're destined for a machine on
# the local network). log the initial packet so that we can later tell
# who is trying to connect.
pass in log on $ext_if proto tcp from any to { !$ext_if, !$int_if } \
   port ssh flags S/SA keep state
d890 3
a892 3
[<a href="rdr.html">Previous: Traffic Redirection</a>]
[<a href="index.html">Contents</a>]
[<a href="logging.html">Next: Logging</a>]
d900 5
a904 3
Originally [OpenBSD: filter.html,v 1.14 ]<br>
$Translation: filter.html,v 1.1 2003/11/27 17:34:57 sl Exp $<br>
$OpenBSD$
@

