head	1.19;
access;
symbols;
locks; strict;
comment	@# @;


1.19
date	2014.04.01.17.18.45;	author nick;	state dead;
branches;
next	1.18;

1.18
date	2012.01.21.19.34.39;	author ajacoutot;	state Exp;
branches;
next	1.17;

1.17
date	2009.08.01.21.41.39;	author tobias;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.09.13.37.13;	author tobias;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.12.20.29.59;	author saad;	state Exp;
branches;
next	1.14;

1.14
date	2007.05.09.05.49.53;	author jufi;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.26.03.08.07;	author jufi;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.10.05.22.16;	author saad;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.01.11.30.45;	author jufi;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.01.12.19.18;	author jufi;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.25.08.25.49;	author saad;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.04.20.24.24;	author jufi;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.20.07.30.02;	author saad;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.25.23.47.44;	author saad;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.20.17.13.26;	author jufi;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.18.17.18.10;	author jufi;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.22.20.00.48;	author jufi;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.08.05.22.44;	author saad;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.27.19.39.09;	author horacio;	state Exp;
branches;
next	;


desc
@@


1.19
log
@
missed another one...
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>PF: Verkehr-Umleitung (Port-Weiterleitung)</title>
<link rev="made" href="mailto:www@@openbsd.org">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="resource-type" content="document">
<meta name="description"   content="the OpenBSD FAQ page">
<meta name="keywords"      content="openbsd,faq,pf">
<meta name="distribution"  content="global">
</head>

<!--
Copyright (c) 2003, Nick Holland <nick@@openbsd.org>
Copyright (c) 2003-2005, Joel Knight <enabled@@myrealbox.com>

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<body bgcolor="#ffffff" text="#000000">
<!-- Passes validator.w3.org, please keep it this way;
please, use a max of 72 chars per line -->

<a href="../../../de/index.html">
<img alt="[OpenBSD]" height=30 width=141 src="../../../images/smalltitle.gif" border="0">
</a>
<p>
[<a href="nat.html">Zurück: Network Address Translation</a>]
[<a href="index.html">Inhalt</a>]
[<a href="shortcuts.html">Weiter: Abkürzungen zum Erzeugen von Regelsätzen</a>]

<h1><font color="#e00000">PF: Umleitung (Port-Weiterleitung)</font></h1>

<hr>

<h3>Inhaltsverzeichnis</h3>
<ul>
<li><a href="#intro">Einführung</a>
<li><a href="#filter">Umleitung und Paket-Filterung</a>
<li><a href="#security">Auswirkungen auf die Sicherheit</a>
<li><a href="#reflect">Umleitung und Reflektion</a>
	<ul>
	<li><a href="#splitdns">Split-Horizon DNS</a>
	<li><a href="#sepnet">Den Server in ein separates lokales
	Netzwerk verschieben</a>
	<li><a href="#tcpproxy">TCP-Proxying</a>
	<li><a href="#rdrnat">Kombination von RDR-TO und NAT-TO</a>
	</ul>
</ul>

<hr>

<a name="intro"></a>
<a name="filter"></a>
<h2>Einführung</h2>
Wenn du NAT in deinem Büro einsetzt, steht dir das gesamte Internet für
alle Maschinen zur Verfügung. Was aber, wenn du eine Maschine hinter
einem NAT-Gateway hast, das von außen zugreifbar sein muss? Das ist der
Punkt, an dem die Weiterleitung ins Spiel kommt. Weiterleitung erlaubt
es eingehendem Verkehr, zu einer Maschine gesendet zu werden, die hinter
dem NAT-Gateway ist.

<p>
Lass uns ein Beispiel betrachten:
<blockquote>
<tt>
pass in on tl0 proto tcp from any to any port 80 rdr-to 192.168.1.20
</tt>
</blockquote>

<p>
Diese Zeile leitet TCP-Port-80- (Webserver) Verkehr zu einer Maschine
im Netzwerk mit der IP 192.168.1.20 um. Obwohl sich 192.168.1.20 hinter
deinem Gateway und in deinem Netzwerk befindet, kann die Außenwelt
darauf zugreifen.

<p>
Der <tt>from any to any</tt>-Teil der oben angegebenen <tt>rdr</tt>-Zeile
kann recht nützlich sein. Wenn du weißt, welche Adresse oder Subnetze
berechtigt sind, Zugriff auf den Webserver auf dem Port 80 zu haben,
kannst du sie hier einschränken:
<blockquote>
<tt>
pass in on tl0 proto tcp from 27.146.49.0/24 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20
</tt>
</blockquote>

<p>
Dies wird nur die angegebenen Subnetze umleiten. Bedenke, dass dies
beinhaltet, dass du verschiedene Hosts, die Anfragen senden, zu
verschiedenen Maschinen hinter deinem Gateway umleiten kannst. Du könntest
zum Beispiel Benutzer an einer entfernten Stelle haben und ihnen Zugriff
auf ihre eigenen Desktop-Computer unter Verwendung des gleichen Ports und
der gleichen IP-Adresse auf dem Gateway ermöglichen, so lange du die
IP-Adresse kennst, von der aus sie sich verbinden werden:
<blockquote>
<tt>
pass in on tl0 proto tcp from 27.146.49.14 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20<br>
pass in on tl0 proto tcp from 16.114.4.89 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.22<br>
pass in on tl0 proto tcp from 24.2.74.178 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.23
</tt>
</blockquote>

<p>
Ein Portbereich kann ebenfalls mit ein- und derselben Regel
umgeleitet werden:
<blockquote>
<tt>
pass in on tl0 proto tcp from any to any port 5000:5500 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20<br>
pass in on tl0 proto tcp from any to any port 5000:5500 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20 port 6000<br>
pass in on tl0 proto tcp from any to any port 5000:5500 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20 port 7000:*<br>
</tt>
</blockquote>

<p>
Diese Beispiele zeigen, dass die Ports 5000 bis einschließlich 5500
zu 192.168.1.20 umgeleitet werden.
In Regel #1 wird der Port 5000 auf 5000 umgeleitet, 5001 auf 5001 etc.
In Regel #2 wird der gesamte Portbereich auf den Port 6000 geleitet.
Und in Regel #3 wird der Port 5000 auf 7000 umgeleitet, 5001 auf 7001
etc.

<a name="security"></a>
<h2>Auswirkungen auf die Sicherheit</h2>
Die Umleitung hat Auswirkungen auf die Sicherheit. Ein Loch in die
Firewall schlagen, um Verkehr in das interne, beschützte Netzwerk zu
lassen, eröffnet den internen Maschinen potenziell die Möglichkeit,
kompromittiert zu werden. Wenn der Verkehr zum Beispiel zum
Webserver-Daemon weitergeleitet wird, und eine Sicherheitslücke im
Webserver-Daemon oder in einem CGI-Skript gefunden wird, die auf
dem Webserver laufen, kann die Maschine von einem Eindringling aus
dem Internet kompromittiert werden. Von da an wird der Eindringling
eine Hintertür zum internen Netzwerk haben, eine, die es ihm
ermöglicht, direkt hinter die Firewall zu gelangen.

<p>
Diese Gefahren können minimiert werden, indem das extern zugreifbare
System strikt in ein separates Netzwerk eingegrenzt wird. Dieses
Netzwerk wird of auch als demilitarisierte Zone (DMZ) oder als
,Private Service Network' (PSN) bezeichnet. Wenn auf diesem Weg
ein Webserver kompromittiert wird, kann der Effekt auf das
DMZ/PSN-Netzwerk begrenzt werden, unter sorgfältigem Filtern des
Verkehrs, der zum und vom DMZ/PSN gelassen wird.

<a name="reflect"></a>
<h2>Umleitung und Reflektion</h2>
Oftmals werden Umleitungsregeln verwendet, um eingehende Verbindungen
vom Internet zu einem lokalen Server mit einer privaten Adresse in
dem internen Netzwerk oder LAN weiterzuleiten, wie es hier getan wird:
<blockquote>
<tt>
server = 192.168.1.40<br>
<br>
pass in on $ext_if proto tcp from any to $ext_if port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to $server port 80
</tt>
</blockquote>

<p>
Aber wenn die Umleitungsregel von einem Client im LAN getestet wird,
funktioniert es nicht. Der Grund ist, dass Umleitungsregeln nur für
Pakete gelten, die durch das angegebene Interface (in diesem Beispiel
<tt>$ext_if</tt>, das externe Interface) geschickt werden.
Sich auf die externe Adresse der Firewall von einem Host im LAN aus
zu verbinden, heißt nicht, dass die Pakete auch tatsächlich durch
das externe Interface gehen werden. Der TCP-IP-,stack' der Firewall
vergleicht die Ziel-Adresse der eingehenden Pakete mit seinen
eigenen Adressen und Aliasen und entdeckt Verbindungen, die an ihn
selbst gerichtet sind, sobald sie das interne Interface passieren.
Solche Pakete werden nicht physikalisch durch das externe Interface
geleitet und der ,stack' simuliert auch kein derartiges Durchsenden.
Daher sieht PF niemals diese Pakete auf dem externen Interface und
die Umleitungsregel, die das externe Interface angibt, wird nicht
zutreffen.

<p>
Eine zweite Umleitungsregel für das interne Interface anzulegen, wird
auch nicht den gewünschten Effekt haben. Wenn der lokale Client sich
auf die externe Adresse der Firewall verbindet, erreicht das erste
Paket des TCP-Handschlags die Firewall durch das interne Interface.
Die Umleitungsregel trifft zu und die Ziel-Adresse wird mit der
Adresse des internen Servers ausgewechselt. Das Paket wird zurück
durch das interne Interface weitergeleitet und erreicht den internen
Server. Aber die Quell-Adresse wurde nicht übersetzt und enthält
weiterhin die Adresse vom lokalen Client, sodass der Server seine
Antworten direkt zum Client sendet. Die Firewall wird niemals die
Antwort sehen und hat keine Möglichkeit, die Übersetzung erfolgreich
umzukehren. Der Client erhält eine Antwort von einer Quelle, die er
nicht erwartet hat, und lässt sie somit fallen. Der TCP-Handschlag
schlägt fehl und keine Verbindung kann aufgebaut werden.

<p>
Es ist aber oftmals durchaus für Clients im LAN erwünscht, auf den
gleichen internen Server wie externe Clients zuzugreifen, und das auch
transparent.
Es gibt einige Lösungen für diese Problem:

<a name="splitdns"></a>
<h3>Split-Horizon DNS</h3>

<p>
Es ist möglich, DNS-Server so zu konfigurieren, dass Anfragen von
lokalen Hosts anders beantwortet werden als externe Anfragen, sodass
Clients die interne Server-Adresse während der Namensauflösung
erhalten. Sie werden dann direkt auf den lokalen Server zugreifen und die
Firewall wird überhaupt nicht miteinbezogen. Dies reduziert den lokalen
Verkehr, da Pakete nicht durch die Firewall gesendet werden müssen.

<a name="sepnet"></a>
<h3>Den Server in ein separates lokales	Netzwerk verschieben</h3>

<p>
Das Hinzufügen eines zusätzlichen Netzwerk-Interfaces zur Firewall
und das Verschieben des lokalen Servers vom Client-Netzwerk in ein
dafür gewidmetes Netzwerk (DMZ) erlaubt das Umleiten der
Verbindungen von lokalen Clients auf die gleiche Art und Weise wie
das Umleiten von externen Verbindungen. Das Verwenden von separaten
Netzwerken hat einige Vorteile, einschließlich der Erhöhung der
Sicherheit, indem die Server von den übrigen lokalen Hosts getrennt
werden. Sollte der Server (welcher in unserem Fall vom Internet aus
erreichbar ist) jemals kompromittiert werden, kann er nicht direkt
auf andere Hosts zugreifen, da alle Verbindungen durch die Firewall
gelassen werden müssen.

<a name="tcpproxy"></a>
<h3>TCP-Proxying</h3>

<p>
Ein genereller TCP-Proxy kann auf der Firewall eingerichtet werden,
entweder so, dass er auf dem Port lauscht, der weitergeleitet werden
soll, oder so, dass Verbindungen vom internen Interface zum Port
weitergeleitet werden, auf dem er lauscht. Wenn ein lokaler Client
sich zur Firewall verbindet, akzeptiert der Proxy die Verbindung,
erstellt eine zweite Verbindung zum internen Server und leitet Daten
zwischen diesen beiden Verbindungen weiter.

<p>
Einfache Proxys können unter der Verwendung von
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8"
>inetd(8)</a> und
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1"
>nc(1)</a> errichtet werden. Der folgende <tt>/etc/inetd.conf</tt>-Eintrag
erstellt ein lauschendes Socket, das auf die Loopback-Adresse (127.0.0.1)
und den Port 5000 gebunden ist. Verbindungen werden zum Port 80 auf dem
Server 192.168.1.10 weitergeleitet. Die Weiterleitung wird vom Benutzer
»proxy« durchgeführt.
<blockquote>
<tt>
127.0.0.1:5000 stream tcp nowait proxy /usr/bin/nc nc -w \<br>
&nbsp;&nbsp;&nbsp;20 192.168.1.10 80
</tt>
</blockquote>

<p>
Die folgende Umleitungsregel leitet den Port 80 vom
internen Interface zum Proxy:
<blockquote>
<tt>
pass in on $int_if proto tcp from $int_net to $ext_if port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 127.0.0.1 port 5000
</tt>
</blockquote>

Hoch-performante-Proxyserver können ebenfalls mit dem
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=relayd&amp;sektion=8"
>relayd(8)</a> erzeugt werden.


<a name="rdrnat"></a>
<h3>Kombination von RDR-TO und NAT-TO</h3>

<p>
Mit einer zusätzlichen NAT-Regel auf dem internen Interface kann
die fehlende Adress-Übersetzung erzielt werden, die oben
beschrieben wurde.
<blockquote>
<tt>
pass in on $int_if proto tcp from $int_net to $ext_if port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to $server<br>
pass out on $int_if proto tcp to $server port 80 \<br>
&nbsp;&nbsp;&nbsp;received-on $int_if nat-to $int_if
</tt>
</blockquote>

<p>
Dies wird veranlassen, dass das erste Paket vom Client wieder übersetzt
wird, wenn es wieder durch das interne Interface zurückgeleitet wird
und damit die Quell-Adresse vom Client mit der internen Adresse
der Firewall ausgetauscht wird. Der interne Server wird der Firewall antworten,
welche die beiden NAT- und RDR-Übersetzungen rückgängig machen kann, wenn
sie zum lokalen Client weiterleitet. Diese Konstrukt ist recht komplex,
da es zwei separate ,states' für jede reflektierende Verbindung erzeugt.
Es muss darauf geachtet werden, die NAT-Regel davon abzuhalten, auch
für anderen Verkehr zuzutreffen, zum Beispiel für Verbindungen
von externen Hosts (durch andere Umleitungen) oder der Firewall selbst.
Bedenke, dass die oben angegebene <tt>rdr-to</tt>-Regel den TCP/IP-,stack'
veranlasst, ankommende Pakete auf dem internen Interface mit einer
Ziel-Adresse innerhalb des internen Netzwerks zu sehen.

<p>
[<a href="nat.html">Zurück: Network Address Translation</a>]
[<a href="index.html">Inhalt</a>]
[<a href="shortcuts.html">Weiter: Abkürzungen zum Erzeugen von Regelsätzen</a>]

<p>
<hr>
<a href="index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[zurück]"></a>
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>
<!--
Originally [OpenBSD: rdr.html,v 1.31 ]<br>
$Translation: rdr.html,v 1.20 2012/01/20 20:21:49 steffen Exp $<br>
-->
$OpenBSD: rdr.html,v 1.18 2012/01/21 19:34:39 ajacoutot Exp $
</small>

</body>
</html>
@


1.18
log
@Sync with Steelix CVS
@
text
@d333 1
a333 1
$OpenBSD$
@


1.17
log
@Sync with Steelix CVS
@
text
@d58 1
a58 1
	<li><a href="#rdrnat">RDR- und NAT-Kombination</a>
d65 1
d78 1
a78 1
rdr on tl0 proto tcp from any to any port 80 -&gt; 192.168.1.20
d95 2
a96 2
rdr on tl0 proto tcp from 27.146.49.0/24 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20
d110 6
a115 6
rdr on tl0 proto tcp from 27.146.49.14 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20<br>
rdr on tl0 proto tcp from 16.114.4.89 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.22<br>
rdr on tl0 proto tcp from 24.2.74.178 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.23
d124 6
a129 6
rdr on tl0 proto tcp from any to any port 5000:5500 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20<br>
rdr on tl0 proto tcp from any to any port 5000:5500 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20 port 6000<br>
rdr on tl0 proto tcp from any to any port 5000:5500 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20 port 7000:*<br>
a140 67
<a name="filter"></a>
<h2>Umleitung und Paket-Filterung</h2>
<font color="#ff0000">HINWEIS:</font> Übersetzte Pakete müssen weiterhin
durch die Filter-Engine gelassen werden und werden geblockt oder
durchgelassen, jenachdem, wie du die Filterregeln definiert hast.

<p>
Die <i>einzige</i> Ausnahme zu dieser Regel ist, wenn das
<tt>pass</tt>-Schlüsselwort innerhalb der <tt>rdr</tt>-Regel eingesetzt
wird. In diesem Fall werden die umgeleiteten Pakete direkt ,statefully'
durch die Filter-Engine gelassen: die Filterregeln werden für diese
Pakete nicht überprüft.
Dies ist eine praktische Abkürzung, um das Hinzufügen von
<tt>pass</tt>-Filterregeln für jede Umleitungsregel zu verhindern.
Stell sie dir wie eine normale <tt>rdr</tt>-Regel vor (mit keinem
<tt>pass</tt>-Schlüsselwort), in Verbindung gebracht mit einer
<tt>pass</tt>-Filterregel mit dem <tt>keep state</tt>-Schlüsselwort.
Wenn du jedoch spezifischere Filter-Optionen wie zum Beispiel
<tt>synproxy</tt>, <tt>modulate state</tt> etc. aktivieren möchtest,
musst du weiterhin eine dafür gewidmete <tt>pass</tt>-Regel verwenden,
da diese Optionen nicht in Umleitungsregeln eingesetzt werden können.

<p>
Sei dir ebenfalls bewusst, dass, da die Übersetzung <i>vor</i> dem
Filtern stattfindet, die Filter-Engine die <i>übersetzten</i> Pakete
sehen wird, so wie sie nach der Änderung der Ziel-IP-Adresse und/oder
des Ziel-Ports aussehen, um eine Übereinstimmung mit der angegeben
umgeleiteten Adresse (und dem Port) in der <tt>rdr</tt>-Regel zu finden.
Betrachte dieses Szenario:

<ul>
<li>192.0.2.1 - Host im Internet
<li>24.65.1.13 - externe Adresse des OpenBSD-Routers
<li>192.168.1.5 - interne IP-Adresse des Webservers
</ul>

<p>
Umleitungsregel:
<blockquote>
<tt>
rdr on tl0 proto tcp from 192.0.2.1 to 24.65.1.13 port 80 \<br>
&nbsp;&nbsp;&nbsp;-&gt; 192.168.1.5 port 8000
</tt>
</blockquote>

<p>
Pakete, bevor die <tt>rdr</tt>-Regel verarbeitet wurde:
<ul>
<li>Quell-Adresse: 192.0.2.1
<li>Quell-Port: 4028 (willkürlich vom Betriebssystem gewählt)
<li>Ziel-Adresse: 24.65.1.13
<li>Ziel-Port: 80
</ul>

<p>
Pakete, nachdem die <tt>rdr</tt>-Regel verarbeitet wurde:
<ul>
<li>Quell-Adresse: 192.0.2.1
<li>Quell-Port: 4028
<li>Ziel-Adresse: 192.168.1.5
<li>Ziel-Port: 8000
</ul>

<p>
Die Filter-Engine wird die IP-Pakete so sehen, wie sie nach der
Übersetzung aussehen.

d172 2
a173 2
rdr on $ext_if proto tcp from any to $ext_if port 80 -&gt; $server \<br>
&nbsp;&nbsp;&nbsp;port 80
d277 2
a278 2
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;127.0.0.1 port 5000
d282 5
d288 1
a288 1
<h3>RDR- und NAT-Kombination</h3>
d296 4
a299 6
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;$server
<br>
no nat on $int_if proto tcp from $int_if to $int_net<br>
nat on $int_if proto tcp from $int_net to $server port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;$int_if
d314 1
a314 1
Bedenke, dass die oben angegebene <tt>rdr</tt>-Regel den TCP/IP-,stack'
a318 4
Im Allgemeinen sollten die zuvor angegebenen Lösungen stattdessen
verwendet werden.

<p>
d330 2
a331 2
Originally [OpenBSD: rdr.html,v 1.28 ]<br>
$Translation: rdr.html,v 1.19 2009/08/01 21:35:46 tobias Exp $<br>
@


1.16
log
@Sync with Steelix CVS
@
text
@d329 2
a330 1
Server 192.168.1.10 weitergeleitet.
d333 1
a333 1
127.0.0.1:5000 stream tcp nowait nobody /usr/bin/nc nc -w \<br>
d397 2
a398 2
Originally [OpenBSD: rdr.html,v 1.27 ]<br>
$Translation: rdr.html,v 1.18 2008/03/04 23:03:19 paldium Exp $<br>
@


1.15
log
@Sync with Steelix CVS
@
text
@d322 1
a322 1
Einfache Proxies können unter der Verwendung von
d397 1
a397 1
$Translation: rdr.html,v 1.17 2007/11/03 10:45:44 paldium Exp $<br>
@


1.14
log
@Sync with steelix translation CVS
@
text
@d157 1
a157 1
Wenn du jedoch spezifischerere Filter-Optionen wie zum Beispiel
d211 1
a211 1
lassen, eröffnet den internen Maschinen potentiell die Möglichkeit,
d269 1
a269 1
weiterhin die Adresse vom lokalen Client, so dass der Server seine
d287 1
a287 1
lokalen Hosts anders beantwortet werden als externe Anfragen, so dass
d397 1
a397 1
$Translation: rdr.html,v 1.15 2007/05/08 22:02:01 simon Exp $<br>
@


1.13
log
@Sync with steelix translation CVS
@
text
@d323 1
a323 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d325 1
a325 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+4.0"
d396 2
a397 2
Originally [OpenBSD: rdr.html,v 1.26 ]<br>
$Translation: rdr.html,v 1.14 2007/04/25 15:41:14 paldium Exp $<br>
@


1.12
log
@sync with Steelix CVS
@
text
@d397 1
a397 1
$Translation: rdr.html,v 1.13 2007/02/09 18:13:49 paldium Exp $<br>
d403 1
a403 1
</html> 
@


1.11
log
@sync with steelix translation CVS
@
text
@d135 1
a135 1
In Regel #1 wird der Port 5000 auf 5000 umgeleitet, 5001 auf 5001, etc.
d137 1
a137 1
Und in Regel #3 wird der Port 5000 auf 7000 umgeleitet, 5001 auf 7001,
d158 1
a158 1
<tt>synproxy</tt>, <tt>modulate state</tt>, etc. aktivieren möchtest,
d397 1
a397 1
$Translation: rdr.html,v 1.12 2006/11/01 10:48:51 paldium Exp $<br>
@


1.10
log
@3.9 release time.
@
text
@d323 1
a323 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d325 1
a325 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.9"
d396 2
a397 2
Originally [OpenBSD: rdr.html,v 1.25 ]<br>
$Translation: rdr.html,v 1.11 2006/05/01 11:17:12 paldium Exp $<br>
@


1.9
log
@sync with Steelix CVS
@
text
@d323 1
a323 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d325 1
a325 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.8"
d396 2
a397 2
Originally [OpenBSD: rdr.html,v 1.24 ]<br>
$Translation: rdr.html,v 1.10 2006/04/24 17:44:30 paldium Exp $<br>
@


1.8
log
@sync with steelix translation CVS
@
text
@a5 1
<meta http-equiv="Content-Language" content="de">
d8 1
a8 1
<meta name="description"   content="Die OpenBSD-FAQ-Seite">
d396 2
a397 2
Originally [OpenBSD: rdr.html,v 1.24 ]
$Translation: rdr.html,v 1.9 2005/11/04 11:01:45 paldium Exp $
@


1.7
log
@sync with Steelix CVS
@
text
@d324 1
a324 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d326 1
a326 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.7"
d397 2
a398 2
Originally [OpenBSD: rdr.html,v 1.23 ]
$Translation: rdr.html,v 1.8 2005/09/14 16:16:39 paldium Exp $
@


1.6
log
@sync with Steelix CVS
@
text
@d6 1
a8 1
<meta http-equiv="Content-Language" content="de">
d398 1
a398 1
$Translation: rdr.html,v 1.7 2005/06/23 12:45:54 paldium Exp $
@


1.5
log
@sync with steelix translation CVS
@
text
@d16 1
a16 1
Copyright (c) 2003, 2004, Joel Knight <enabled@@myrealbox.com>
d119 22
d397 2
a398 2
Originally [OpenBSD: rdr.html,v 1.22 ]
$Translation: rdr.html,v 1.6 2005/05/20 16:33:52 paldium Exp $
@


1.4
log
@Sync with Steelix CVS
@
text
@d302 1
a302 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d304 1
a304 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.6"
d375 2
a376 2
Originally [OpenBSD: rdr.html,v 1.21 ]
$Translation: rdr.html,v 1.5 2005/01/18 14:33:46 paldium Exp $
@


1.3
log
@Sync with Steelix CVS
@
text
@d9 1
a9 1
<meta name="description"   content="die OpenBSD-FAQ-Seite">
d374 5
a378 3
Originally [OpenBSD: rdr.html,v 1.21 ]<br>
$Translation: rdr.html,v 1.4 2004/12/22 12:29:54 paldium Exp $<br>
$OpenBSD: rdr.html,v 1.21 2004/12/22 04:28:16 david Exp $
@


1.2
log
@sync with Steelix CVS
@
text
@d36 3
a38 1
<img alt="[OpenBSD]" height=30 width=141 src="../../../images/smalltitle.gif">
d374 3
a376 3
Originally [OpenBSD: rdr.html,v 1.20 ]<br>
$Translation: rdr.html,v 1.3 2004/12/07 16:56:32 paldium Exp $<br>
$OpenBSD: rdr.html,v 1.20 2004/12/01 09:50:20 saad Exp $
@


1.1
log
@Sync with Steelix CVS
@
text
@d4 1
a4 1
<title>PF: Traffic Redirection</title>
d8 2
a9 1
<meta name="description"   content="the OpenBSD FAQ page">
a11 1
<meta name="copyright"     content="This document copyright 2002-2003 by OpenBSD.">
d14 18
d38 3
a40 3
[<a href="nat.html">Previous: Network Address Translation</a>]
[<a href="index.html">Contents</a>]
[<a href="filter.html">Next: Packet Filtering</a>]
d42 1
a42 1
<h1><font color="#e00000">PF: Redirection (<tt>rdr</tt>)</font></h1>
d46 1
a46 1
<h3>Table of Contents</h3>
d48 4
a51 4
<li><a href="#intro">Introduction</a>
<li><a href="#filter">Redirection and Packet Filtering</a>
<li><a href="#security">Security Implications</a>
<li><a href="#reflect">Redirection and Reflection</a>
d54 4
a57 4
	<li><a href="#sepnet">Moving the Server Into a Separate Local
	Network</a>
	<li><a href="#tcpproxy">TCP Proxying</a>
	<li><a href="#rdrnat">RDR and NAT Combination</a>
d64 7
a70 6
<h2>Introduction</h2>
When you have NAT running in your office you have the entire Internet
available to all your machines.  What if you have a machine behind the
NAT gateway that needs to be accessed from outside?  This is where
redirection comes in.  Redirection allows incoming traffic to be sent to
a machine behind the NAT gateway.
d73 1
a73 1
Let's look at an example:
d81 4
a84 3
This line redirects TCP port 80 (web server) traffic to a machine inside
the network at 192.168.1.20.  So, even though 192.168.1.20 is behind
your gateway and inside your network, the outside world can access it.
d87 4
a90 4
The <tt>from any to any</tt> part of the above <tt>rdr</tt> line can
be quite useful. If you know what addresses or subnets are supposed
to have access to the web server at port 80, you can restrict them
here:
d99 7
a105 6
This will redirect only the specified subnet.  Note this implies you can
redirect different incoming hosts to different machines behind the
gateway. This can be quite useful. For example, you could have users
at remote sites access their own desktop computers using the same
port and IP address on the gateway as long as you know the IP address
they will be connecting from:
d118 29
a146 7
<h2>Redirection and Packet Filtering</h2>
Be aware that packets matching an <tt>rdr</tt> rule still must pass
through the filtering engine and will be blocked or passed based on the
filter rules that have been defined. Also be aware that packets matching
an <tt>rdr</tt> rule will have their destination IP address and/or
destination port changed to match the redirection address/port specified
in the <tt>rdr</tt> rule.  Consider this scenario:
d148 3
a150 3
<li>192.0.2.1 - host on the Internet
<li>24.65.1.13 - external address of OpenBSD router
<li>192.168.1.5 - internal IP address of web server
d154 1
a154 1
Redirection rule:
d158 1
a158 1
&nbsp;&nbsp;&nbsp;-&gt; 192.168.1.5 8000
d163 1
a163 1
Packet before the <tt>rdr</tt> rule is processed:
d165 4
a168 4
<li>Source address: 192.0.2.1
<li>Source port: 4028 (arbitrarily chosen by the operating system)
<li>Destination address: 24.65.1.13
<li>Destination port: 80
d172 1
a172 1
Packet after the <tt>rdr</tt> rule is processed:
d174 4
a177 4
<li>Source address: 192.0.2.1
<li>Source port: 4028
<li>Destination address: 192.168.1.5
<li>Destination port: 8000
d181 2
a182 2
The filtering engine will see the IP packet as it looks after
<tt>rdr</tt> rules have been processed.
d185 20
a204 17
<h2>Security Implications</h2>
Redirection does have security implications. Punching a hole in the
firewall to allow traffic into the internal, protected network
potentially opens up the internal machine to compromise. If traffic is
forwarded to an internal web server for example, and a vulnerability is
discovered in the web server daemon or in a CGI script run on the web
server, then that machine can be compromised from an intruder on the
Internet. From there, the intruder has a doorway to the internal
network, one that is permitted to pass right through the firewall.

<p>
These risks can be minimized by keeping the externally accessed system
tightly confined on a separate network. This network is often referred to
as a Demilitarized Zone (DMZ) or a Private Service Network (PSN). This
way, if the web server is compromised, the effects can be limited to
the DMZ/PSN network by careful filtering of the traffic permitted to and
from the DMZ/PSN.
d207 4
a210 4
<h2>Redirection and Reflection</h2>
Often, redirection rules are used to forward incoming connections from
the Internet to a local server with a private address in the internal
network or LAN, as in:
d221 37
a257 33
But when the redirection rule is tested from a client on the LAN, it
doesn't work. The reason is that redirection rules apply only to
packets that pass through the specified interface ($ext_if, the external
interface, in the example). Connecting to the external address of the
firewall from a host on the LAN, however, does not mean the packets will
actually pass through its external interface. The TCP/IP stack on the
firewall compares the destination address of incoming packets with its
own addresses and aliases and detects connections to itself as soon as
they have passed the internal interface. Such packets do not physically
pass through the external interface, and the stack does not simulate
such a passage in any way. Thus, PF never sees these packets on the
external interface, and the redirection rule, specifying the external
interface, does not apply.

<p>
Adding a second redirection rule for the internal interface does not
have the desired effect either. When the local client connects to the
external address of the firewall, the initial packet of the TCP
handshake reaches the firewall through the internal interface. The
redirection rule does apply and the destination address gets replaced
with that of the internal server. The packet gets forwarded back through
the internal interface and reaches the internal server. But the source
address has not been translated, and still contains the local client's
address, so the server sends its replies directly to the client. The
firewall never sees the reply and has no chance to properly reverse the
translation. The client receives a reply from a source it never
expected and drops it. The TCP handshake then fails and no connection
can be established.

<p>
Still, it's often desirable for clients on the LAN to connect to the
same internal server as external clients and to do so transparently.
There are several solutions for this problem: 
d263 6
a268 6
It's possible to configure DNS servers to answer queries from local
hosts differently than external queries so that local clients will
receive the internal server's address during name resolution. They will
then connect directly to the local server, and the firewall isn't
involved at all. This reduces local traffic since packets don't have to
be sent through the firewall.
d271 1
a271 1
<h3>Moving the Server Into a Separate Local Network</h3>
d274 11
a284 9
Adding an additional network interface to the firewall and moving the
local server from the client's network into a dedicated network (DMZ)
allows redirecting of connections from local clients in the same way as
the redirection of external connections. Use of separate networks has
several advantages, including improving security by isolating the server
from the remaining local hosts. Should the server (which in our case is
reachable from the Internet) ever become compromised, it can't access
other local hosts directly as all connections have to pass through the
firewall.
d287 1
a287 1
<h3>TCP Proxying</h3>
d290 17
a306 15
A generic TCP proxy can be setup on the firewall, either listening on
the port to be forwarded or getting connections on the internal
interface redirected to the port it's listening on. When a local client
connects to the firewall, the proxy accepts the connection, establishes
a second connection to the internal server, and forwards data between
those two connections.

<p>
Simple proxies can be created using 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.4"
>inetd(8)</a> and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.4"
>nc(1)</a>. The following <tt>/etc/inetd.conf</tt> entry creates a listening
socket bound to the loopback address (127.0.0.1) and port 5000.
Connections are forwarded to port 80 on server 192.168.1.10.
d315 2
a316 2
The following redirection rule forwards port 80 on the internal
interface to the proxy:
d325 1
a325 1
<h3>RDR and NAT Combination</h3>
d328 3
a330 2
With an additional NAT rule on the internal interface, the lacking
source address translation described above can be achieved.
d343 22
a364 29
This will cause the initial packet from the client to be translated
again when it's forwarded back through the internal interface, replacing
the client's source address with the firewall's internal address. The
internal server will reply back to the firewall, which can reverse both
NAT and RDR translations when forwarding to the local client. This
construct is rather complex as it creates two separate states for each
reflected connection. Care must be taken to prevent the NAT rule from
applying to other traffic, for instance connections originating from
external hosts (through other redirections) or the firewall itself. Note
that the <tt>rdr</tt> rule above will cause the TCP/IP stack to see
packets arriving on the internal interface with a destination address
inside the internal network. To prevent the stack from issuing ICMP
redirect messages (telling the client that its destination is reachable
directly, breaking the reflection), disable redirects on the gateway,
using
<blockquote>
<tt>
# sysctl -w net.inet.ip.redirect=0<br>
# sysctl -w net.inet6.ip6.redirect=0 <i>(if using IPv6)</i>
</tt>
</blockquote>

<p>
In general, the previously mentioned solutions should be used instead.

<p>
[<a href="nat.html">Previous: Network Address Translation</a>]
[<a href="index.html">Contents</a>]
[<a href="filter.html">Next: Packet Filtering</a>]
d368 1
a368 1
<a href="../../de/index.html"><img height="24" width="24" src="../../../images/back.gif" border="0" alt="[back]"></a> 
d372 3
a374 3
Originally [OpenBSD: rdr.html,v 1.10 ]<br>
$Translation: rdr.html,v 1.1 2003/11/27 17:34:57 sl Exp $<br>
$OpenBSD$
@

