head	1.90;
access;
symbols;
locks; strict;
comment	@# @;


1.90
date	2017.06.26.17.18.58;	author tb;	state Exp;
branches;
next	1.89;
commitid	jKVBuSx5No9bUpg1;

1.89
date	2016.09.20.00.14.33;	author tj;	state Exp;
branches;
next	1.88;
commitid	Sq9b3IMnITZGQyLg;

1.88
date	2016.09.19.23.57.52;	author tj;	state Exp;
branches;
next	1.87;
commitid	GNVOkJslrAyDPluC;

1.87
date	2016.09.19.23.44.47;	author tj;	state Exp;
branches;
next	1.86;
commitid	P53AgOpLKrOmgs5r;

1.86
date	2016.08.15.02.22.14;	author tb;	state Exp;
branches;
next	1.85;
commitid	3DeixV5YkPOb78RN;

1.85
date	2016.06.13.17.58.24;	author tj;	state Exp;
branches;
next	1.84;
commitid	Grx2UyJPWzJbbhkP;

1.84
date	2016.04.18.19.07.50;	author tj;	state Exp;
branches;
next	1.83;
commitid	g0cUF3jNn5Tz4oaZ;

1.83
date	2016.04.16.00.30.41;	author tj;	state Exp;
branches;
next	1.82;
commitid	rTxoenHHaeutOff1;

1.82
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.81;
commitid	jwteSMEb4rFzI8UA;

1.81
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.80;
commitid	4Y8oU6GBrSY1UOfW;

1.80
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.79;
commitid	hi2ObFv9LGB98JY5;

1.79
date	2016.03.22.10.56.56;	author sthen;	state Exp;
branches;
next	1.78;
commitid	G2izHhNJ7aqR0Y6j;

1.78
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.77;
commitid	zEx6zFkNSFFExu0v;

1.77
date	2016.01.24.21.40.35;	author tj;	state Exp;
branches;
next	1.76;
commitid	bFaFSpgHCeTHjIC5;

1.76
date	2015.10.18.19.48.19;	author nick;	state Exp;
branches;
next	1.75;
commitid	gkrFWKimwWNVivXe;

1.75
date	2015.07.02.05.49.05;	author bentley;	state Exp;
branches;
next	1.74;
commitid	AP3UllesavMDEUhQ;

1.74
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.73;
commitid	wRrXxcro6dFYiwF8;

1.73
date	2015.04.30.23.48.01;	author nick;	state Exp;
branches;
next	1.72;
commitid	uFWv68UTtTmjkqVF;

1.72
date	2014.12.02.03.17.26;	author nick;	state Exp;
branches;
next	1.71;
commitid	RQ0cKiFD5x45dGyo;

1.71
date	2014.12.01.10.01.07;	author bentley;	state Exp;
branches;
next	1.70;
commitid	DtrOVs7q8kqgEsjm;

1.70
date	2014.05.01.15.03.50;	author nick;	state Exp;
branches;
next	1.69;

1.69
date	2014.03.31.02.33.07;	author nick;	state Exp;
branches;
next	1.68;

1.68
date	2013.11.01.14.07.05;	author nick;	state Exp;
branches;
next	1.67;

1.67
date	2013.05.01.13.21.45;	author nick;	state Exp;
branches;
next	1.66;

1.66
date	2012.11.01.15.06.36;	author nick;	state Exp;
branches;
next	1.65;

1.65
date	2012.10.04.10.55.39;	author nick;	state Exp;
branches;
next	1.64;

1.64
date	2012.08.18.14.27.43;	author nick;	state Exp;
branches;
next	1.63;

1.63
date	2012.08.17.00.37.18;	author nick;	state Exp;
branches;
next	1.62;

1.62
date	2012.05.11.11.20.04;	author nick;	state Exp;
branches;
next	1.61;

1.61
date	2012.03.14.10.49.18;	author giovanni;	state Exp;
branches;
next	1.60;

1.60
date	2011.11.02.01.01.47;	author nick;	state Exp;
branches;
next	1.59;

1.59
date	2011.06.28.08.33.49;	author jj;	state Exp;
branches;
next	1.58;

1.58
date	2011.05.01.12.57.11;	author nick;	state Exp;
branches;
next	1.57;

1.57
date	2011.03.28.07.31.43;	author ajacoutot;	state Exp;
branches;
next	1.56;

1.56
date	2011.03.26.13.54.56;	author ian;	state Exp;
branches;
next	1.55;

1.55
date	2010.11.01.09.53.51;	author nick;	state Exp;
branches;
next	1.54;

1.54
date	2010.05.19.13.25.16;	author sthen;	state Exp;
branches;
next	1.53;

1.53
date	2009.11.30.03.15.25;	author nick;	state Exp;
branches;
next	1.52;

1.52
date	2009.10.16.19.12.42;	author nick;	state Exp;
branches;
next	1.51;

1.51
date	2009.04.30.17.27.31;	author nick;	state Exp;
branches;
next	1.50;

1.50
date	2009.01.25.18.09.49;	author jasper;	state Exp;
branches;
next	1.49;

1.49
date	2008.10.31.16.49.34;	author nick;	state Exp;
branches;
next	1.48;

1.48
date	2008.07.27.17.13.47;	author nick;	state Exp;
branches;
next	1.47;

1.47
date	2007.11.09.15.54.11;	author jmc;	state Exp;
branches;
next	1.46;

1.46
date	2007.11.01.02.57.56;	author joel;	state Exp;
branches;
next	1.45;

1.45
date	2007.08.14.20.04.41;	author steven;	state Exp;
branches;
next	1.44;

1.44
date	2007.05.07.01.40.29;	author joel;	state Exp;
branches;
next	1.43;

1.43
date	2007.05.07.01.21.36;	author joel;	state Exp;
branches;
next	1.42;

1.42
date	2007.05.07.01.13.53;	author joel;	state Exp;
branches;
next	1.41;

1.41
date	2007.05.06.18.59.54;	author nick;	state Exp;
branches;
next	1.40;

1.40
date	2006.11.19.21.00.06;	author joel;	state Exp;
branches;
next	1.39;

1.39
date	2006.11.19.19.36.54;	author joel;	state Exp;
branches;
next	1.38;

1.38
date	2006.11.01.01.56.01;	author joel;	state Exp;
branches;
next	1.37;

1.37
date	2006.10.27.19.26.13;	author nick;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.01.00.54.29;	author nick;	state Exp;
branches;
next	1.35;

1.35
date	2006.01.01.03.49.54;	author joel;	state Exp;
branches;
next	1.34;

1.34
date	2005.12.28.17.11.25;	author joel;	state Exp;
branches;
next	1.33;

1.33
date	2005.11.01.11.35.18;	author nick;	state Exp;
branches;
next	1.32;

1.32
date	2005.10.15.20.41.35;	author joel;	state Exp;
branches;
next	1.31;

1.31
date	2005.05.20.00.12.02;	author joel;	state Exp;
branches;
next	1.30;

1.30
date	2005.02.26.04.56.40;	author joel;	state Exp;
branches;
next	1.29;

1.29
date	2005.02.24.14.29.52;	author joel;	state Exp;
branches;
next	1.28;

1.28
date	2005.02.21.20.45.39;	author jaredy;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.28.17.44.21;	author dhartmei;	state Exp;
branches;
next	1.26;

1.26
date	2004.12.22.04.28.16;	author david;	state Exp;
branches;
next	1.25;

1.25
date	2004.11.01.21.41.07;	author nick;	state Exp;
branches;
next	1.24;

1.24
date	2004.10.31.16.14.41;	author nick;	state Exp;
branches;
next	1.23;

1.23
date	2004.10.29.17.22.57;	author nick;	state Exp;
branches;
next	1.22;

1.22
date	2004.10.11.22.04.37;	author saad;	state Exp;
branches;
next	1.21;

1.21
date	2004.07.06.01.31.32;	author nick;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.07.01.55.23;	author nick;	state Exp;
branches;
next	1.19;

1.19
date	2004.04.30.18.00.25;	author nick;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.27.17.56.57;	author henning;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.31.21.10.50;	author nick;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.01.04.16.17;	author nick;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.27.15.08.25;	author nick;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.09.23.29.02;	author nick;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.22.02.29.03;	author nick;	state Exp;
branches;
next	1.12;

1.12
date	2003.09.16.01.23.49;	author nick;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.08.22.12.50;	author nick;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.15.16.40.06;	author nick;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.14.03.24.32;	author nick;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.13.02.54.08;	author nick;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.07.01.18.11;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.25.01.35.07;	author nick;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.15.03.03.54;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.02.08.18.21;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.01.14.20.37;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.01.13.14.12;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.01.01.46.06;	author nick;	state Exp;
branches;
next	;


desc
@@


1.90
log
@move man.openbsd.org links from http:// to https://
reduces the number of http:// links in www/ from >33k to <7k

thanks to schwarze for doing the work
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD PF: Packet Filtering</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/pf/filter.html">
</head>

<!--
Copyright (c) 2003-2007 Joel Knight <enabled@@myrealbox.com>

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<body bgcolor="#ffffff" text="#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">PF - Packet Filtering</font>
<small>
<a href="index.html" style="font-weight:normal; float:right">[Contents]</a>
</small>
</h2>
<hr>

<ul>
  <li><a href="#intro"     >Introduction</a>
  <li><a href="#syntax"    >Rule syntax</a>
  <li><a href="#defdeny"   >Default deny</a>
  <li><a href="#pass"      >Passing traffic</a>
  <li><a href="#quick"     >The <tt>quick</tt> keyword</a>
  <li><a href="#state"     >Keeping state</a>
  <li><a href="#udpstate"  >Keeping state for UDP</a>
  <li><a href="#stateopts" >Stateful tracking options</a>
  <li><a href="#tcpflags"  >TCP flags</a>
  <li><a href="#synproxy"  >TCP SYN proxy</a>
  <li><a href="#antispoof" >Blocking spoofed packets</a>
  <li><a href="#urpf"      >Unicast Reverse Path Forwarding</a>
  <li><a href="#osfp"      >Passive operating system fingerprinting</a>
  <li><a href="#ipopts"    >IP options</a>
  <li><a href="#example"   >Filtering ruleset example</a>
</ul>

<hr>

<h2 id="intro">Introduction</h2>

Packet filtering is the selective passing or blocking of data packets as they
pass through a network interface.
The criteria that <a href="https://man.openbsd.org/pf">pf(4)</a> uses when
inspecting packets are based on the Layer 3
(<a href="https://man.openbsd.org/ip">IPv4</a> and
<a href="https://man.openbsd.org/ip6">IPv6</a>) and Layer 4
(<a href="https://man.openbsd.org/tcp">TCP</a>,
<a href="https://man.openbsd.org/udp">UDP</a>,
<a href="https://man.openbsd.org/icmp">ICMP</a>, and
<a href="https://man.openbsd.org/icmp6">ICMPv6</a>) headers.
The most often used criteria are source and destination address, source and
destination port, and protocol.

<p>
Filter rules specify the criteria that a packet must match and the resulting
action, either block or pass, that is taken when a match is found.
Filter rules are evaluated in sequential order, first to last.
Unless the packet matches a rule containing the <tt>quick</tt> keyword, the
packet will be evaluated against <i>all</i> filter rules before the final
action is taken.
The last rule to match is the "winner" and will dictate what action to take on
the packet.
There is an implicit <tt>pass all</tt> at the beginning of a filtering ruleset,
meaning that if a packet does not match any filter rule the resulting action will be <tt>pass</tt>.

<h2 id="syntax">Rule syntax</h2>

The general, <i>highly simplified</i> syntax for filter rules is:

<blockquote><pre>
action [direction] [log] [quick] [on interface] [af] [proto protocol]
       [from src_addr [port src_port]] [to dst_addr [port dst_port]]
       [flags tcp_flags] [state]
</pre></blockquote>

<dl>
<dt><tt><i>action</i></tt>
<dd>The action to be taken for matching packets, either <tt>pass</tt> or
    <tt>block</tt>.
    The <tt>pass</tt> action will pass the packet back to the kernel for
    further processing while the <tt>block</tt> action will react based on
    the setting of the
    <a href="options.html#block-policy"><tt>block-policy</tt></a> option.
    The default reaction may be overridden by specifying either
    <tt>block drop</tt> or <tt>block return</tt>.

<dt><tt><i>direction</i></tt>
<dd>The direction the packet is moving on an interface, either
    <tt>in</tt> or <tt>out</tt>.

<dt><tt>log</tt>
<dd>Specifies that the packet should be logged via
    <a href="https://man.openbsd.org/pflogd">pflogd(8)</a>.
    If the rule creates state then only the packet which establishes the state
    is logged.
    To log all packets regardless, use <tt>log (all)</tt>.

<dt><tt>quick</tt>
<dd>If a packet matches a rule specifying <tt>quick</tt>, then that rule
    is considered the last matching rule and the specified
    <tt><i>action</i></tt> is taken.

<dt><tt><i>interface</i></tt>
<dd>The name or group of the network interface the packet is moving through.
    Interfaces can be added to arbitrary groups using the
    <a href="https://man.openbsd.org/ifconfig">ifconfig(8)</a> command.
    Several groups are also automatically created by the kernel:

<ul>
  <li>The <tt>egress</tt> group, which contains the interface(s) that holds
      the default route(s).
  <li>Interface family group for cloned interfaces.
      For example: <tt>ppp</tt> or <tt>carp</tt>.
</ul>

This would cause the rule to match for any packet traversing any
<tt>ppp</tt> or <tt>carp</tt> interface, respectively.

<dt><tt><i>af</i></tt>
<dd>The address family of the packet, either <tt>inet</tt> for IPv4 or
    <tt>inet6</tt> for IPv6.
    PF is usually able to determine this parameter based on the source and/or
    destination address(es).

<dt><tt><i>protocol</i></tt>
<dd>The Layer 4 protocol of the packet:

<ul>
  <li><tt>tcp</tt>
  <li><tt>udp</tt>
  <li><tt>icmp</tt>
  <li><tt>icmp6</tt>
  <li>A valid protocol name from
  <a href="https://man.openbsd.org/protocols"><tt>/etc/protocols</tt></a>
  <li>A protocol number between 0 and 255
  <li>A set of protocols using a <a href="macros.html#lists">list</a>.
</ul>

<dt><tt><i>src_addr</i></tt>, <tt><i>dst_addr</i></tt>
<dd>The source/destination address in the IP header.
    Addresses can be specified as:

<ul>
  <li>A single IPv4 or IPv6 address.
  <li>A <a href="https://web.archive.org/web/20150213012421/http://public.swbell.net/dedicated/cidr.html">CIDR</a>
      network block.
  <li>A fully qualified domain name that will be resolved via DNS when the
      ruleset is loaded.
      All resulting IP addresses will be substituted into the rule.
  <li>The name of a network interface or group.
      Any IP addresses assigned to the interface will be substituted into
      the rule.
  <li>The name of a network interface followed by <tt>/<i>netmask</i></tt>
      (i.e., <tt>/24</tt>).
      Each IP address on the interface is combined with the netmask to form
      a CIDR network block which is substituted into the rule.
  <li>The name of a network interface or group in parentheses <tt>( )</tt>.
      This tells PF to update the rule if the IP address(es) on the named
      interface change.
      This is useful on an interface that gets its IP address via DHCP or
      dial-up as the ruleset doesn't have to be reloaded each time the
      address changes.
  <li>The name of a network interface followed by any one of these modifiers:
    <ul>
      <li><tt>:network</tt> - substitutes the CIDR network block
          (e.g., 192.168.0.0/24)
      <li><tt>:broadcast</tt> - substitutes the network broadcast address
          (e.g., 192.168.0.255)
      <li><tt>:peer</tt> - substitutes the peer's IP address on a
          point-to-point link
    </ul>
  <dl>
  <dd>In addition, the <tt>:0</tt> modifier can be appended to either an
  interface name or to any of the above modifiers to indicate that PF
  should not include aliased IP addresses in the substitution.
  These modifiers can also be used when the interface is contained in
  parentheses.
  Example: <tt>fxp0:network:0</tt>
  </dl>
  <li>A <a href="tables.html">table</a>.
  <li>The keyword <tt>urpf-failed</tt> can be used for the source address
      to indicate that it should be run through the
      <a href="#urpf">uRPF check</a>.
  <li>Any of the above but negated using the <tt>!</tt> ("not") modifier.
  <li>A set of addresses using a <a href="macros.html#lists">list</a>.
  <li>The keyword <tt>any</tt> meaning all addresses
  <li>The keyword <tt>all</tt> which is short for <tt>from any to any</tt>.
</ul>

<dt><tt><i>src_port</i></tt>, <tt><i>dst_port</i></tt>
<dd>The source/destination port in the Layer 4 packet header.
    Ports can be specified as:

<ul>
  <li>A number between 1 and 65535
  <li>A valid service name from
      <a href="https://man.openbsd.org/services"><tt>/etc/services</tt></a>
  <li>A set of ports using a <a href="macros.html#lists">list</a>
  <li>A range:
	<ul>
          <li><tt>!=</tt> (not equal)
          <li><tt>&lt;</tt> (less than)
          <li><tt>&gt;</tt> (greater than)
          <li><tt>&lt;=</tt> (less than or equal)
          <li><tt>&gt;=</tt> (greater than or equal)
          <li><tt>&gt;&lt;</tt> (range)
          <li><tt>&lt;&gt;</tt> (inverse range)
          <dl>
          <dd>The last two are binary operators (they take two arguments) and
              do not include the arguments in the range.
          </dl>
          <li><tt>:</tt> (inclusive range)
          <dl>
          <dd>The inclusive range operator is also a binary operator and does
          include the arguments in the range.
          </dl>
        </ul>
</ul>

<dt><tt><i>tcp_flags</i></tt>
<dd>Specifies the flags that must be set in the TCP header when using
    <tt>proto tcp</tt>.
    Flags are specified as <tt>flags <i>check</i>/<i>mask</i></tt>.
    For example: <tt>flags S/SA</tt> - this instructs PF to only look at the
    S and A (SYN and ACK) flags and to match if only the SYN flag is "on"
    (and is applied to all TCP rules by default).
    <tt>flags any</tt> instructs PF not to check flags.

<dt><tt><i>state</i></tt>
<dd>Specifies whether state information is kept on packets matching this rule.

<ul>
  <li><tt>no state</tt> - works with TCP, UDP, and ICMP.
      PF will not track this connection statefully.
      For TCP connections, <tt>flags any</tt> is usually also required.
  <li><tt>keep state</tt> - works with TCP, UDP, and ICMP.
      This option is the default for all filter rules.
  <li><tt>modulate state</tt> - works only with TCP.
      PF will generate strong Initial Sequence Numbers (ISNs) for packets
      matching this rule.
  <li><tt>synproxy state</tt> - proxies incoming TCP connections to help
      protect servers from spoofed TCP SYN floods.
      This option includes the functionality of <tt>keep state</tt> and
      <tt>modulate state</tt>.
</ul>
</dl>

<h2 id="defdeny">Default deny</h2>

The recommended practice when setting up a firewall is to take a "default deny"
approach.
That is to deny <i>everything</i>, and then selectively allow certain traffic
through the firewall.
This approach is recommended because it errs on the side of caution and also
makes writing a ruleset easier.

<p>
To create a default deny filter policy, the first filter rule should be:

<blockquote><pre>
block all
</pre></blockquote>

This will block all traffic on all interfaces in either direction from
anywhere to anywhere.

<h2 id="pass">Passing traffic</h2>

Traffic must now be explicitly passed through the firewall or it will be
dropped by the default deny policy.
This is where packet criteria such as source/destination port,
source/destination address and protocol come into play.
Whenever traffic is permitted to pass through the firewall, the rule(s)
should be written to be as restrictive as possible.
This is to ensure that the intended traffic, and only the intended traffic,
is permitted to pass.

<p>
Some examples:

<blockquote><pre>
# Pass traffic in on dc0 from the local network, 192.168.0.0/24, to the OpenBSD
# machine's IP address 192.168.0.1. Also, pass the return traffic out on dc0.
pass in  on dc0 from 192.168.0.0/24 to 192.168.0.1
pass out on dc0 from 192.168.0.1    to 192.168.0.0/24

# Pass TCP traffic in to the web server running on the OpenBSD machine.
pass in on egress proto tcp from any to egress port www
</pre></blockquote>

<h2 id="quick">The <tt>quick</tt> keyword</h2>

As indicated earlier, each packet is evaluated against the filter ruleset
from top to bottom.
By default, the packet is marked for passage, which can be changed by any
rule, and could be changed back and forth several times before the end of
the filter rules.
<b>The last matching rule wins.</b>
There is an exception to this: The <tt>quick</tt> option on a filtering rule
has the effect of canceling any further rule processing and causes the
specified action to be taken.
Let's look at a couple examples:

<p>
Wrong:

<blockquote><pre>
block in on egress proto tcp to port ssh
pass  in all
</pre></blockquote>

In this case, the <tt>block</tt> line may be evaluated, but will never have
any effect, as it is then followed by a line which will pass everything.

<p>
Better:

<blockquote><pre>
block in quick on egress proto tcp to port ssh
pass  in all
</pre></blockquote>

These rules are evaluated a little differently.
If the <tt>block</tt> line is matched, due to the <tt>quick</tt> option,
the packet will be blocked, and the rest of the ruleset will be ignored.

<h2 id="state">Keeping state</h2>

One of PF's important abilities is "keeping state" or "stateful inspection."
Stateful inspection refers to PF's ability to track the state, or progress,
of a network connection.
By storing information about each connection in a state table, PF is able
to quickly determine if a packet passing through the firewall belongs to an
already-established connection.
If it does, it is passed through the firewall without going through ruleset
evaluation.

<p>
Keeping state has many advantages, including simpler rulesets and better
packet filtering performance.
PF is able to match packets moving in <i>either</i> direction to state table
entries, meaning that filter rules which pass returning traffic don't need to
be written.
Since packets matching stateful connections don't go through ruleset
evaluation, the time PF spends processing those packets can be greatly lessened.

<p>
When a rule creates state, the first packet matching the rule creates a "state"
between the sender and receiver.
Now, not only do packets going from the sender to receiver match the state
entry and bypass ruleset evaluation, but so do the reply packets from receiver
to sender.

<p>
All <i>pass</i> rules automatically create a state entry when a packet matches
the rule.
This can be explicitly disabled by using the <tt>no state</tt> option.

<blockquote><pre>
pass out on egress proto tcp from any to any
</pre></blockquote>

This rule allows any outbound TCP traffic on the egress interface
and also permits the reply traffic to pass back through the firewall.
Keeping state significantly improves the performance of your firewall
as state lookups are dramatically faster than running a packet through
the filter rules.

<p>
The <tt>modulate state</tt> option works just like <tt>keep state</tt>,
except that it only applies to TCP packets.
With <tt>modulate state</tt>, the Initial Sequence Number (ISN) of outgoing
connections is randomized.
This is useful for protecting connections initiated by certain operating
systems that do a poor job of choosing ISNs.
To allow simpler rulesets, the <tt>modulate state</tt> option can be
used in rules that specify protocols other than TCP.
In those cases, it is treated as <tt>keep state</tt>.

<p>
Keep state on outgoing TCP, UDP and ICMP packets and modulate TCP ISNs:

<blockquote><pre>
pass out on egress proto { tcp, udp, icmp } from any to any modulate state
</pre></blockquote>

Another advantage of keeping state is that corresponding ICMP traffic
will be passed through the firewall.
For example, if a TCP connection passing through the firewall is being
tracked statefully and an ICMP source-quench message referring to this TCP
connection arrives, it will be matched to the appropriate state entry and
passed through the firewall.

<p>
The scope of a state entry is controlled globally by the
<a href="options.html#state-policy">state-policy</a> runtime option, and on
a per-rule basis by the <tt>if-bound</tt> and <tt>floating</tt> state option
keywords.
These per-rule keywords have the same meaning as when used with the
<tt>state-policy</tt> option.
For example:

<blockquote><pre>
pass out on egress proto { tcp, udp, icmp } from any to any modulate state (if-bound)
</pre></blockquote>

This rule would dictate that in order for packets to match the state
entry, they must be transiting the egress interface.

<h2 id="udpstate">Keeping state for UDP</h2>

One will sometimes hear it said that "one cannot create state with UDP, as
UDP is a stateless protocol!"
While it is true that a UDP communication session does not have any concept
of state (an explicit start and stop of communications), this does not have
any impact on PF's ability to create state for a UDP session.
In the case of protocols without "start" and "end" packets, PF simply keeps
track of how long it has been since a matching packet has gone through.
If the timeout is reached, the state is cleared.
The timeout values can be set in the <a href="options.html">options</a>
section of the <tt>pf.conf</tt> file.

<h2 id="stateopts">Stateful tracking options</h2>

Filter rules that create state entries can specify various options to
control the behavior of the resulting state entry.
The following options are available:

<dl>
<dt><tt>max <i>number</i></tt>
<dd>Limit the maximum number of state entries the rule can create to
    <i>number</i>.
    If the maximum is reached, packets that would normally create state
    fail to match this rule until the number of existing states decreases
    below the limit.

<dt><tt>no state</tt>
<dd>Prevents the rule from automatically creating a state entry.

<dt><tt>source-track</tt>
<dd>This option enables the tracking of number of states created per source
    IP address.
    This option has two formats:
    <ul>
      <li><tt>source-track rule</tt> - The maximum number of states
          created by this rule is limited by the rule's
          <tt>max-src-nodes</tt> and <tt>max-src-states</tt> options.
          Only state entries created by this particular rule count toward
          the rule's limits.
      <li><tt>source-track global</tt> - The number of states created by
          all rules that use this option is limited.
          Each rule can specify different <tt>max-src-nodes</tt> and
          <tt>max-src-states</tt> options, however state entries created by
          any participating rule count towards each individual rule's limits.
    </ul>
    The total number of source IP addresses tracked globally can be
    controlled via the
    <a href="options.html#limit"><tt>src-nodes</tt> runtime option</a>.

<dt><tt>max-src-nodes <i>number</i></tt>
<dd>When the <tt>source-track</tt> option is used, <tt>max-src-nodes</tt>
    will limit the number of source IP addresses that can simultaneously
    create state.
    This option can only be used with <tt>source-track rule</tt>.

<dt><tt>max-src-states <i>number</i></tt>
<dd>When the <tt>source-track</tt> option is used, <tt>max-src-states</tt>
    will limit the number of simultaneous state entries that can be created
    per source IP address.
    The scope of this limit (i.e., states created by this rule only or
    states created by all rules that use <tt>source-track</tt>) is dependent
    on the <tt>source-track</tt> option specified.
</dl>

Options are specified inside parenthesis and immediately after one of the
state keywords (<tt>keep state</tt>, <tt>modulate state</tt>, or
<tt>synproxy state</tt>).
Multiple options are separated by commas.
The <tt>keep state</tt> option is the implicit default for all filter rules.
Despite this, when specifying stateful options, one of the state keywords
must still be used in front of the options.

<p>
An example rule:

<blockquote><pre>
pass in on egress proto tcp to $web_server port www keep state   \
                  (max 200, source-track rule, max-src-nodes 100, \
                   max-src-states 3)
</pre></blockquote>

The rule above defines the following behavior:

<ul>
  <li>Limit the absolute maximum number of states that this rule can create
      to 200.
  <li>Enable source tracking: limit state creation based on states created
      by this rule only.
  <li>Limit the maximum number of nodes that can simultaneously create
      state to 100.
  <li>Limit the maximum number of simultaneous states per source IP to 3.
</ul>

A separate set of restrictions can be placed on stateful TCP connections
that have completed the 3-way handshake.

<dl>
<dt><tt>max-src-conn <i>number</i></tt>
<dd>Limit the maximum number of simultaneous TCP connections which have
    completed the 3-way handshake that a single host can make.

<dt><tt>max-src-conn-rate <i>number</i> / <i>interval</i></tt>
<dd>Limit the rate of new connections to a certain amount per time interval.
</dl>

<p>
Both of these options automatically invoke the <tt>source-track rule</tt>
option and are incompatible with <tt>source-track global</tt>.

<p>
Since these limits are only being placed on TCP connections that have
completed the 3-way handshake, more aggressive actions can be taken on
offending IP addresses.

<dl>
<dt><tt>overload &lt;<i>table</i>&gt;</tt>
<dd>Put an offending host's IP address into the named table.

<dt><tt>flush [global]</tt>
<dd>Kill any other states that match this rule and that were created by
    this source IP.
    When <tt>global</tt> is specified, kill all states matching this source
    IP, regardless of which rule created the state.
</dl>

An example:

<blockquote><pre>
table &lt;abusive_hosts&gt; persist
block in quick from &lt;abusive_hosts&gt;

pass in on egress proto tcp to $web_server port www flags S/SA keep state \
                                (max-src-conn 100, max-src-conn-rate 15/5, \
                                 overload &lt;abusive_hosts&gt; flush)
</pre></blockquote>

This does the following:

<ul>
  <li>Limits the maximum number of connections per source to 100.
  <li>Rate limits the number of connections to 15 in a 5 second span.
  <li>Puts the IP address of any host that breaks these limits into the
      <tt>&lt;abusive_hosts&gt;</tt> table.
  <li>For any offending IP addresses, flush any states created by this rule.
</ul>

<h2 id="tcpflags">TCP flags</h2>

Matching TCP packets based on flags is most often used to filter TCP
packets that are attempting to open a new connection.
The TCP flags and their meanings are listed here:

<ul>
  <li><b>F</b> : FIN  - Finish; end of session
  <li><b>S</b> : SYN  - Synchronize; indicates request to start session
  <li><b>R</b> : RST  - Reset; drop a connection
  <li><b>P</b> : PUSH - Push; packet is sent immediately
  <li><b>A</b> : ACK  - Acknowledgement
  <li><b>U</b> : URG  - Urgent
  <li><b>E</b> : ECE  - Explicit Congestion Notification Echo
  <li><b>W</b> : CWR  - Congestion Window Reduced
</ul>

To have PF inspect the TCP flags during evaluation of a rule, the
<tt>flags</tt> keyword is used with the following syntax:

<blockquote><pre>
flags <i>check</i>/<i>mask</i>
flags any
</pre></blockquote>

The <tt><i>mask</i></tt> part tells PF to only inspect the specified flags
and the <tt><i>check</i></tt> part specifies which flag(s) must be "on" in
the header for a match to occur.
Using the <tt>any</tt> keyword allows any combination of flags to be set
in the header.

<blockquote><pre>
pass in on egress proto tcp from any to any port ssh flags S/SA
pass in on egress proto tcp from any to any port ssh
</pre></blockquote>

As <tt>flags S/SA</tt> is set by default, the above rules are equivalent,
Each of these rules passes TCP traffic with the SYN flag set while only
looking at the SYN and ACK flags.
A packet with the SYN and ECE flags would match the above rules, while
a packet with SYN and ACK or just ACK would not.

<p>
The default flags can be overridden by using the <tt>flags</tt> option
as outlined above.

<p>
One should be careful with using flags -- understand what you are
doing and why, and be careful with the advice people give as a lot of
it is bad.
Some people have suggested creating state "only if the SYN flag is set and
no others."
Such a rule would end with:

<blockquote><pre>
[...] flags S/FSRPAUEW  <i>bad idea!!</i>
</pre></blockquote>

The theory is to create state only on the start of the TCP session, and
the session should start with a SYN flag, and no others.
The problem is some sites are starting to use the ECN flag and any site
using ECN that tries to connect to you would be rejected by such a rule.
A much better guideline is to not specify any flags at all and let PF
apply the default flags to your rules.
If you truly need to specify flags yourself, then this combination should
be safe:

<blockquote><pre>
[...] flags S/SAFR
</pre></blockquote>

<!-- XXX scrub changes may have invalidated this-->
While this is practical and safe, it is also unnecessary to check the
FIN and RST flags if traffic is also being scrubbed.
The scrubbing process will cause PF to drop any incoming packets
with illegal TCP flag combinations (such as SYN and RST) and to
normalize potentially ambiguous combinations (such as SYN and FIN).

<h2 id="synproxy">TCP SYN proxy</h2>

Normally when a client initiates a TCP connection to a server, PF will
pass the
<a href="http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml"
>handshake</a>
packets between the two endpoints as they arrive.
PF has the ability, however, to proxy the handshake.
With the handshake proxied, PF itself will complete the handshake with
the client, initiate a handshake with the server, and then pass packets
between the two.
In the case of a TCP SYN flood attack, the attacker never completes the
three-way handshake, so the attacker's packets never reach the protected
server, but legitimate clients will complete the handshake and get passed.
This minimizes the impact of spoofed TCP SYN floods on the protected
service, handling it in PF instead.
Routine use of this option is not recommended, however, as it breaks
expected TCP protocol behavior when the server can't process the request
and when load balancers are involved.

<p>
The TCP SYN proxy is enabled using the <tt>synproxy state</tt> keywords
in filter rules.
For example:

<blockquote><pre>
pass in on egress proto tcp to $web_server port www synproxy state
</pre></blockquote>

Here, connections to the web server will be TCP proxied by PF.

<p>
Because of the way <tt>synproxy state</tt> works, it also includes the
same functionality as <tt>keep state</tt> and <tt>modulate state</tt>.

<p>
The SYN proxy will not work if PF is running on a
<a href="https://man.openbsd.org/bridge">bridge(4)</a>.

<h2 id="antispoof">Blocking spoofed packets</h2>

Address "spoofing" is when a malicious user fakes the source IP address
in packets they transmit in order to either hide their real address or
to impersonate another node on the network.
Once the user has spoofed their address, they can launch a network attack
without revealing the true source of the attack or attempt to gain access
to network services that are restricted to certain IP addresses.

<p>
PF offers some protection against address spoofing through the
<tt>antispoof</tt> keyword:

<blockquote><pre>
antispoof [log] [quick] for <i>interface</i> [<i>af</i>]
</pre></blockquote>

<dl>
<dt><tt>log</tt>
<dd>Specifies that matching packets should be logged via
    <a href="https://man.openbsd.org/pflogd">pflogd(8)</a>.

<dt><tt>quick</tt>
<dd>If a packet matches this rule then it will be considered the "winning"
    rule and ruleset evaluation will stop.

<dt><tt><i>interface</i></tt>
<dd>The network interface to activate spoofing protection on.
    This can also be a <a href="macros.html#lists">list</a> of interfaces.

<dt><tt><i>af</i></tt>
<dd>The address family to activate spoofing protection for, either
    <tt>inet</tt> for IPv4 or <tt>inet6</tt> for IPv6.
</dl>

<p>
Example:

<blockquote><pre>
antispoof for fxp0 inet
</pre></blockquote>

When a ruleset is loaded, any occurrences of the <tt>antispoof</tt> keyword
are expanded into two filter rules.
Assuming that the egress interface has IP address 10.0.0.1 and a subnet
mask of 255.255.255.0 (i.e., a /24), the above <tt>antispoof</tt> rule would
expand to:

<blockquote><pre>
block in on ! fxp0 inet from 10.0.0.0/24 to any
block in inet from 10.0.0.1 to any
</pre></blockquote>

These rules accomplish two things:

<ul>
  <li>Blocks all traffic coming from the 10.0.0.0/24 network that does
      <i>not</i> pass in through the <tt>fxp0</tt> interface.
      Since the 10.0.0.0/24 network is on the <tt>fxp0</tt> interface, packets
      with a source address in that network block should never be seen coming
      in on any other interface.
  <li>Blocks all incoming traffic from 10.0.0.1, the IP address on
      <tt>fxp0</tt>.
      The host machine should never send packets to itself through an external
      interface, so any incoming packets with a source address belonging to
      the machine can be considered malicious.
</ul>

<b>NOTE</b>: The filter rules that the <tt>antispoof</tt> rule expands to will
also block packets sent over the loopback interface to local addresses.
It's best practice to skip filtering on loopback interfaces anyways, but
this becomes a necessity when using antispoof rules:

<blockquote><pre>
set skip on lo0
antispoof for fxp0 inet
</pre></blockquote>

Usage of <tt>antispoof</tt> should be restricted to interfaces that have
been assigned an IP address.
Using <tt>antispoof</tt> on an interface without an IP address will result
in filter rules such as:

<blockquote><pre>
block drop in on ! fxp0 inet all
block drop in inet all
</pre></blockquote>

With these rules, there is a risk of blocking <i>all</i> inbound traffic
on <i>all</i> interfaces.

<h2 id="urpf">Unicast Reverse Path Forwarding</h2>

PF offers a Unicast Reverse Path Forwarding (uRPF) feature.
When a packet is run through the uRPF check, the source IP address of
the packet is looked up in the routing table.
If the outbound interface found in the routing table entry is the same as
the interface that the packet just came in on, then the uRPF check passes.
If the interfaces don't match, then it's possible the packet has had its
source address spoofed.

<p>
The uRPF check can be performed on packets by using the
<tt>urpf-failed</tt> keyword in filter rules:

<blockquote><pre>
block in quick from urpf-failed label uRPF
</pre></blockquote>

Note that the uRPF check only makes sense in an environment where routing
is symmetric.

<p>
uRPF provides the same functionality as <a href="#antispoof">antispoof</a>
rules.

<h2 id="osfp">Passive operating system fingerprinting</h2>

Passive OS fingerprinting (OSFP) is a method for passively detecting the
operating system of a remote host based on certain characteristics
within that host's TCP SYN packets.
This information can then be used as criteria within filter rules.

<p>
PF determines the remote operating system by comparing characteristics
of a TCP SYN packet against the
<a href="options.html#fingerprints">fingerprints file</a>, which by default
is <a href="https://man.openbsd.org/pf.os">pf.os(5)</a>.
Once PF is enabled, the current fingerprint list can be viewed with this
command:

<blockquote><pre>
# <b>pfctl -s osfp</b>
</pre></blockquote>

Within a filter rule, a fingerprint may be specified by OS class, version,
or subtype/patch level.
Each of these items is listed in the output of the <tt>pfctl</tt> command
shown above.
To specify a fingerprint in a filter rule, the <tt>os</tt> keyword is used:

<blockquote><pre>
pass  in on egress proto tcp from any os OpenBSD
block in on egress proto tcp from any os "Windows 2000"
block in on egress proto tcp from any os "Linux 2.4 ts"
block in on egress proto tcp from any os unknown
</pre></blockquote>

The special operating system class <tt>unknown</tt> allows for matching
packets when the OS fingerprint is not known.

<p>
<b>TAKE NOTE</b> of the following:

<ul>
  <li>Operating system fingerprints are occasionally wrong due to
      spoofed and/or crafted packets that are made to look like they
      originated from a specific operating system.
  <li>Certain revisions or patchlevels of an operating system may change
      the stack's behavior and cause it to either not match what's in the
      fingerprints file or to match another entry altogether.
  <li>OSFP only works on the TCP SYN packet; it will not work on other
      protocols or on already established connections.
</ul>

<h2 id="ipopts">IP options</h2>

By default, PF blocks packets with IP options set.
This can make the job more difficult for OS fingerprinting utilities like nmap.
If you have an application that requires the passing of these packets, such
as multicast or IGMP, you can use the <tt>allow-opts</tt> directive:

<blockquote><pre>
pass in quick on fxp0 all allow-opts
</pre></blockquote>

<h2 id="example">Filtering ruleset example</h2>

Below is an example of a filtering ruleset.
The machine running PF is acting as a firewall between a small, internal
network and the Internet.
Only the filter rules are shown; <tt>queueing</tt>,
<a href="nat.html"><tt>nat</tt></a>, <a href="rdr.html"><tt>rdr</tt></a>,
etc, have been left out of this example.

<blockquote><pre>
int_if  = "dc0"
lan_net = "192.168.0.0/24"

# table containing all IP addresses assigned to the firewall
table &lt;firewall&gt; const { self }

# don't filter on the loopback interface
set skip on lo0

# scrub incoming packets
match in all scrub (no-df)

# set up a default deny policy
block all

# activate spoofing protection for all interfaces
block in quick from urpf-failed

# only allow ssh connections from the local network if it's from the
# trusted computer, 192.168.0.15. use "block return" so that a TCP RST is
# sent to close blocked connections right away. use "quick" so that this
# rule is not overridden by the "pass" rules below.
block return in quick on $int_if proto tcp from ! 192.168.0.15 to $int_if port ssh

# pass all traffic to and from the local network.
# these rules will create state entries due to the default
# "keep state" option which will automatically be applied.
pass in  on $int_if from $lan_net
pass out on $int_if to   $lan_net

# pass tcp, udp, and icmp out on the external (Internet) interface.
# tcp connections will be modulated, udp/icmp will be tracked statefully.
pass out on egress proto { tcp udp icmp } all modulate state

# allow ssh connections in on the external interface as long as they're
# NOT destined for the firewall (i.e., they're destined for a machine on
# the local network). log the initial packet so that we can later tell
# who is trying to connect.
# Uncomment last part to use the tcp syn proxy to proxy the connection.
pass in log on egress proto tcp to ! &lt;firewall&gt; port ssh # synproxy state
</pre></blockquote>

<p>
</body>
</html>
@


1.89
log
@i think we can stop talking about openbsd 4.1 now.
@
text
@d69 1
a69 1
The criteria that <a href="http://man.openbsd.org/pf">pf(4)</a> uses when
d71 6
a76 6
(<a href="http://man.openbsd.org/ip">IPv4</a> and
<a href="http://man.openbsd.org/ip6">IPv6</a>) and Layer 4
(<a href="http://man.openbsd.org/tcp">TCP</a>,
<a href="http://man.openbsd.org/udp">UDP</a>,
<a href="http://man.openbsd.org/icmp">ICMP</a>, and
<a href="http://man.openbsd.org/icmp6">ICMPv6</a>) headers.
d119 1
a119 1
    <a href="http://man.openbsd.org/pflogd">pflogd(8)</a>.
d132 1
a132 1
    <a href="http://man.openbsd.org/ifconfig">ifconfig(8)</a> command.
d160 1
a160 1
  <a href="http://man.openbsd.org/protocols"><tt>/etc/protocols</tt></a>
d223 1
a223 1
      <a href="http://man.openbsd.org/services"><tt>/etc/services</tt></a>
d698 1
a698 1
<a href="http://man.openbsd.org/bridge">bridge(4)</a>.
d720 1
a720 1
    <a href="http://man.openbsd.org/pflogd">pflogd(8)</a>.
d827 1
a827 1
is <a href="http://man.openbsd.org/pf.os">pf.os(5)</a>.
@


1.88
log
@"keep state" is the default so we don't need to specify it so many times.
@
text
@d505 1
a505 2
In OpenBSD 4.1 and later, the <tt>keep state</tt> option became the
implicit default for all filter rules.
@


1.87
log
@less "$ext_if" and more egress to simplify example rulesets.
zap some stray <p> tags while here.
@
text
@d843 1
a843 1
pass  in on egress proto tcp from any os OpenBSD keep state
@


1.86
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@a58 1
                       <!-- XXX i think the ospf section should be removed -->
d313 2
a314 4
# Pass TCP traffic in on fxp0 to the web server running on the OpenBSD machine.
# The interface name, fxp0, is used as the destination address so that packets
# will only match this rule if they're destined for the OpenBSD machine.
pass in on fxp0 proto tcp from any to fxp0 port www
d324 1
a324 1
<b>The last matching rule "wins".</b>
d334 1
a334 1
block in on fxp0 proto tcp to port ssh
d345 1
a345 1
block in quick on fxp0 proto tcp to port ssh
d386 1
a386 1
pass out on fxp0 proto tcp from any to any
d389 1
a389 1
This rule allows any outbound TCP traffic on the <tt>fxp0</tt> interface
d410 1
a410 1
pass out on fxp0 proto { tcp, udp, icmp } from any to any modulate state
d430 1
a430 1
pass out on fxp0 proto { tcp, udp, icmp } from any to any modulate state (if-bound)
d434 1
a434 1
entry, they must be transiting the <tt>fxp0</tt> interface.
d514 1
a514 1
pass in on $ext_if proto tcp to $web_server port www keep state   \
d569 1
a569 1
pass in on $ext_if proto tcp to $web_server port www flags S/SA keep state \
d616 2
a617 2
pass in on fxp0 proto tcp from any to any port ssh flags S/SA
pass in on fxp0 proto tcp from any to any port ssh
d688 1
a688 1
pass in on $ext_if proto tcp to $web_server port www synproxy state
d745 1
a745 1
Assuming that interface <tt>fxp0</tt> has IP address 10.0.0.1 and a subnet
d758 1
a758 1
      <i>not</i> pass in through <tt>fxp0</tt>.
a817 1
<!-- XXX this is mostly old and unmaintained, we can remove it -->
d843 4
a846 4
pass  in on $ext_if proto tcp from any os OpenBSD keep state
block in on $ext_if proto tcp from any os "Windows 2000"
block in on $ext_if proto tcp from any os "Linux 2.4 ts"
block in on $ext_if proto tcp from any os unknown
a886 1
ext_if  = "fxp0"
d919 1
a919 1
pass out on $ext_if proto { tcp udp icmp } all modulate state
d926 1
a926 1
pass in log on $ext_if proto tcp to ! &lt;firewall&gt; port ssh # synproxy state
@


1.85
log
@sync pf guide formatting with the main faq's style, fixing a few grammar
knits and broken links along the way.

input and ok tb
@
text
@d13 1
a13 1
<link rel="canonical" href="http://www.openbsd.org/faq/pf/filter.html">
@


1.84
log
@page titles and <title> should be the same.
@
text
@d4 5
a10 1
<meta name="description"   content="the OpenBSD FAQ page">
d46 16
a61 15
<li><a href="#intro"    >Introduction</a>
<li><a href="#syntax"   >Rule Syntax</a>
<li><a href="#defdeny"  >Default Deny</a>
<li><a href="#pass"     >Passing Traffic</a>
<li><a href="#quick"    >The <tt>quick</tt> Keyword</a>
<li><a href="#state"    >Keeping State</a>
<li><a href="#udpstate" >Keeping State for UDP</a>
<li><a href="#stateopts">Stateful Tracking Options</a>
<li><a href="#tcpflags" >TCP Flags</a>
<li><a href="#synproxy" >TCP SYN Proxy</a>
<li><a href="#antispoof">Blocking Spoofed Packets</a>
<li><a href="#urpf"     >Unicast Reverse Path Forwarding</a>
<li><a href="#osfp"     >Passive Operating System Fingerprinting</a>
<li><a href="#ipopts"   >IP Options</a>
<li><a href="#example"  >Filtering Ruleset Example</a>
a66 29
Packet filtering is the selective passing or blocking of data
packets as they pass through a network interface. The criteria that 
<a href="http://man.openbsd.org/pf.4"
>pf(4)</a> uses when inspecting packets are based on the Layer 3 
(<a href="http://man.openbsd.org/ip.4"
>IPv4</a> and 
<a href="http://man.openbsd.org/ip6.4"
>IPv6</a>) and Layer 4
(<a href="http://man.openbsd.org/tcp.4"
>TCP</a>,
<a href="http://man.openbsd.org/udp.4"
>UDP</a>,
<a href="http://man.openbsd.org/icmp.4"
>ICMP</a>, and
<a href="http://man.openbsd.org/icmp6.4"
>ICMPv6</a>) headers. The most often used criteria are source and
destination address, source and destination port, and protocol.

<p>
Filter rules specify the criteria that a packet must match and the
resulting action, either block or pass, that is taken when a match is
found. Filter rules are evaluated in sequential order, first to last.
Unless the packet matches a rule containing the <tt>quick</tt> keyword,
the packet will be evaluated against <i>all</i> filter rules before the
final action is taken. The last rule to match is the "winner" and will
dictate what action to take on the packet. There is an implicit
<tt>pass all</tt> at the beginning of a filtering ruleset meaning that if a
packet does not match any filter rule the resulting action will be
<tt>pass</tt>.
d68 27
a94 1
<h2 id="syntax">Rule Syntax</h2>
d96 6
a101 9
<blockquote>
<tt>
<i>action</i> [<i>direction</i>] [log] [quick] [on <i>interface</i>] 
[<i>af</i>] [proto <i>protocol</i>] \<br>
&nbsp;&nbsp;&nbsp;[from <i>src_addr</i> [port <i>src_port</i>]] [to 
<i>dst_addr</i> [port <i>dst_port</i>]] \<br>
&nbsp;&nbsp;&nbsp;[flags <i>tcp_flags</i>] [<i>state</i>]
</tt>
</blockquote>
d106 7
a112 6
<tt>block</tt>. The <tt>pass</tt> action will pass the packet back to
the kernel for further processing while the <tt>block</tt> action will
react based on the setting of the
<a href="options.html#block-policy"><tt>block-policy</tt></a> option. 
The default reaction may be overridden by specifying either <tt>block
drop</tt> or <tt>block return</tt>.
d116 1
a116 1
<tt>in</tt> or <tt>out</tt>.
d120 4
a123 4
<a href="http://man.openbsd.org/pflogd.8"
>pflogd(8)</a>. If the rule creates state then only the
packet which establishes the state is logged. 
To log all packets regardless, use <tt>log (all)</tt>.
d127 2
a128 2
is considered the last matching rule and the specified 
<tt><i>action</i></tt> is taken.
d131 10
a140 12
<dd>The name or group of the network interface that the packet is moving
through.
Interfaces can be added to arbitrary groups using the
<a
href="http://man.openbsd.org/ifconfig.8"
>ifconfig(8)</a> command.
Several groups are also automatically created by the kernel:
<ul>
<li>The <tt>egress</tt> group, which contains the interface(s) that
holds the default route(s).
<li>Interface family group for cloned interfaces.
For example: <tt>ppp</tt> or <tt>carp</tt>.
d142 1
d148 3
a150 2
<tt>inet6</tt> for IPv6. PF is usually able to determine this parameter
based on the source and/or destination address(es).
d154 1
d156 43
a198 44
<li><tt>tcp</tt>
<li><tt>udp</tt>
<li><tt>icmp</tt>
<li><tt>icmp6</tt>
<li>A valid protocol name from 
<a href="http://man.openbsd.org/protocols.5"
><tt>/etc/protocols</tt></a>
<li>A protocol number between 0 and 255
<li>A set of protocols using a <a href="macros.html#lists">list</a>.
</ul>

<dt><tt><i>src_addr</i></tt>, <tt><i>dst_addr</i></tt> 
<dd>The source/destination address in the IP header. Addresses can be
specified as:
<ul>
<li>A single IPv4 or IPv6 address.
<li>A <a href="http://public.swbell.net/dedicated/cidr.html">CIDR</a> 
network block.
<li>A fully qualified domain name that will be resolved via DNS when the
ruleset is loaded. All resulting IP addresses will be substituted into
the rule.
<li>The name of a network interface or group.
Any IP addresses assigned to the
interface will be substituted into the rule.
<li>The name of a network interface followed by
<tt>/<i>netmask</i></tt> (i.e., <tt>/24</tt>). Each IP address on the
interface is combined with the netmask to form a CIDR network block
which is substituted into the rule.
<li>The name of a network interface or group in parentheses <tt>( )</tt>.
This tells PF to update the rule if the IP address(es) on the named interface
change.
This is useful on an interface that gets its IP address via DHCP
or dial-up as the ruleset doesn't have to be reloaded each time the
address changes.
<li>The name of a network interface followed by any one of these
modifiers: 
  <ul>
  <li><tt>:network</tt> - substitutes the CIDR network block (e.g.,
  192.168.0.0/24)
  <li><tt>:broadcast</tt> - substitutes the network broadcast address
  (e.g., 192.168.0.255)
  <li><tt>:peer</tt> - substitutes the peer's IP address on a
  point-to-point link
  </ul>
d202 1
a202 1
  should not include aliased IP addresses in the substitution. 
d207 8
a214 9
<li>A <a href="tables.html">table</a>.
<li>The keyword <tt>urpf-failed</tt> can be used for the source address
to indicate that it should be run through the
<a href="#urpf">uRPF check</a>.
<li>Any of the above but negated using the <tt>!</tt> ("not") modifier.
<li>A set of addresses using a <a href="macros.html#lists">list</a>.
<li>The keyword <tt>any</tt> meaning all addresses
<li>The keyword <tt>all</tt> which is short for <tt>from any to
any</tt>.
d218 3
a220 2
<dd>The source/destination port in the Layer 4 packet header. Ports can
be specified as:
d222 5
a226 6
<li>A number between 1 and 65535
<li>A valid service name from
<a href="http://man.openbsd.org/services.5"
><tt>/etc/services</tt></a>
<li>A set of ports using a <a href="macros.html#lists">list</a>
<li>A range:
d228 17
a244 17
	<li><tt>!=</tt> (not equal)
	<li><tt>&lt;</tt> (less than)
	<li><tt>&gt;</tt> (greater than)
	<li><tt>&lt;=</tt> (less than or equal)
	<li><tt>&gt;=</tt> (greater than or equal)
	<li><tt>&gt;&lt;</tt> (range)
	<li><tt>&lt;&gt;</tt> (inverse range)
	<dl>
	<dd>The last two are binary operators (they take two arguments) and
	do not include the arguments in the range.
	</dl>
	<li><tt>:</tt> (inclusive range)
	<dl>
	<dd>The inclusive range operator is also a binary operator and does
	include the arguments in the range.
	</dl>
	</ul>
d249 6
a254 6
<tt>proto tcp</tt>. Flags are specified as 
<tt>flags <i>check</i>/<i>mask</i></tt>. For example: <tt>flags
S/SA</tt> - this instructs PF to only look at the S and A (SYN and ACK)
flags and to match if only the SYN flag is "on" (and is applied to all
TCP rules by default).
<tt>flags any</tt> instructs PF not to check flags.
d257 2
a258 2
<dd>Specifies whether state information is kept on packets matching this
rule.
d260 12
a271 11
<li><tt>no state</tt> - works with TCP, UDP, and ICMP.
PF will not track this connection statefully.
For TCP connections, <tt>flags any</tt> is usually also required.
<li><tt>keep state</tt> - works with TCP, UDP, and ICMP.
This option is the default for all filter rules.
<li><tt>modulate state</tt> - works only with TCP. PF will generate
strong Initial Sequence Numbers (ISNs) for packets matching this rule.
<li><tt>synproxy state</tt> - proxies incoming TCP connections to help
protect servers from spoofed TCP SYN floods. 
This option includes the functionality of <tt>keep state</tt> and
<tt>modulate state</tt>.
d275 8
a282 16
<h2 id="defdeny">Default Deny</h2>
The recommended practice when setting up a firewall is to take a
"default deny" approach. That is, to deny <i>everything</i> and then
selectively allow certain traffic through the firewall. This approach is
recommended because it errs on the side of caution and also makes
writing a ruleset easier.

<p>
To create a default deny filter policy, the first two filter rules should
be:
<blockquote>
<tt>
block in &nbsp;all<br>
block out all
</tt>
</blockquote>
d285 6
d294 2
a295 1
<h2 id="pass">Passing Traffic</h2>
d297 7
a303 6
dropped by the default deny policy. This is where packet criteria such
as source/destination port, source/destination address, and protocol
come into play. Whenever traffic is permitted to pass through the
firewall the rule(s) should be written to be as restrictive as 
possible. This is to ensure that the intended traffic, and only the
intended traffic, is permitted to pass.
d307 10
a316 13
<blockquote>
<tt>
# Pass traffic in on dc0 from the local network, 192.168.0.0/24,<br>
# to the OpenBSD machine's IP address 192.168.0.1. Also, pass the<br>
# return traffic out on dc0.<br>
pass in &nbsp;on dc0 from 192.168.0.0/24 to 192.168.0.1<br>
pass out on dc0 from 192.168.0.1 to 192.168.0.0/24<br>
<br>
<br>
# Pass TCP traffic in on fxp0 to the web server running on the<br>
# OpenBSD machine. The interface name, fxp0, is used as the<br>
# destination address so that packets will only match this rule if<br>
# they're destined for the OpenBSD machine.<br>
d318 3
a320 2
</tt>
</blockquote>
a321 1
<h2 id="quick">The <tt>quick</tt> Keyword</h2>
d323 9
a331 7
from top to bottom.  By default, the packet is marked for passage, which
can be changed by any rule, and could be changed back and forth several
times before the end of the filter rules. <b>The last matching rule
"wins".</b>  There is an exception to this: The <tt>quick</tt> option
on a filtering rule has the effect of canceling any further rule
processing and causes the specified action to be taken. Let's look at a
couple examples:
a334 6
<blockquote>
<tt>
block in on fxp0 proto tcp to port ssh<br>
pass &nbsp;in all
</tt>
</blockquote>
d336 7
a342 4
<p>
In this case, the <tt>block</tt> line may be evaluated, but will never
have any effect, as it is then followed by a line which will pass
everything.
d346 36
a381 36
<blockquote>
<tt>
block in quick on fxp0 proto tcp to port ssh<br>
pass &nbsp;in all
</tt>
</blockquote>

<p>
These rules are evaluated a little differently.  If the <tt>block</tt>
line is matched, due to the <tt>quick</tt> option, the packet will be
blocked, and the rest of the ruleset will be ignored.

<h2 id="state">Keeping State</h2>
One of Packet Filter's important abilities is "keeping state" or
"stateful inspection". Stateful inspection refers to PF's ability to
track the state, or progress, of a network connection. By storing
information about each connection in a state table, PF is able to
quickly determine if a packet passing through the firewall belongs to an
already established connection. If it does, it is passed through
the firewall without going through ruleset evaluation.

<p>
Keeping state has many advantages including simpler rulesets and better
packet filtering performance. PF is able to match packets moving in
<i>either</i> direction to state table entries meaning that filter rules
which pass returning traffic don't need to be written. And, since
packets matching stateful connections don't go through ruleset
evaluation, the time PF spends processing those packets can be greatly
lessened.

<p>
When a rule creates state, the first packet
matching the rule creates a "state" between the sender and receiver.  
Now, not only do packets going from the sender to receiver match the
state entry and bypass ruleset evaluation, but so do the reply packets
from receiver to sender.
d384 2
a385 2
All <i>pass</i> rules automatically create a state entry when a packet
matches the rule.
d388 1
a388 2
<blockquote>
<tt>
d390 1
a390 2
</tt>
</blockquote>
d392 1
a392 2
<p>
This rule allows any outbound TCP traffic on the <tt>fxp0</tt> interface 
d399 6
a404 6
The <tt>modulate state</tt> option works just like <tt>keep state</tt>
except that it only applies to TCP packets. With 
<tt>modulate state</tt>, the Initial Sequence Number (ISN) of outgoing
connections is randomized. This is useful for protecting connections
initiated by certain operating systems that do a poor job of choosing
ISNs.
d406 2
a407 2
used in rules that specify protocols other than TCP; in those cases,
it is treated as <tt>keep state</tt>. 
d410 5
a414 7
Keep state on outgoing TCP, UDP, and ICMP packets and modulate TCP ISNs:
<blockquote>
<tt>
pass out on fxp0 proto { tcp, udp, icmp } from any \<br>
&nbsp;&nbsp;&nbsp;&nbsp;to any modulate state<br>
</tt>
</blockquote>
a415 1
<p>
d419 3
a421 18
tracked statefully and an ICMP source-quench message
referring to this TCP connection arrives, it will be matched to the
appropriate state entry and passed through the firewall.

<p>
The scope of a state entry is controlled globally by the 
<a href="options.html#state-policy"><tt>state-policy</tt></a>
runtime option and on a per rule basis by the <tt>if-bound</tt>
and <tt>floating</tt> state option keywords.
These per rule keywords have the same meaning as when used with the
<tt>state-policy</tt> option. Example:

<blockquote>
<tt>
pass out on fxp0 proto { tcp, udp, icmp } from any \<br>
&nbsp;&nbsp;&nbsp;&nbsp;to any modulate state (if-bound)<br>
</tt>
</blockquote>
d424 12
d439 14
a452 11
<h2 id="udpstate">Keeping State for UDP</h2>
One will sometimes hear it said that, "One can not create state with
UDP as UDP is a stateless protocol!"  While it is true that a UDP
communication session does not have any concept of state (an explicit
start and stop of communications), this does not have any impact on PF's
ability to create state for a UDP session.  In the case of protocols
without "start" and "end" packets, PF simply keeps track of how long it
has been since a matching packet has gone through.  If the timeout is
reached, the state is cleared.  The timeout values can be set in the 
<a href="options.html">options</a> section of the <tt>pf.conf</tt>
file.
a453 1
<h2 id="stateopts">Stateful Tracking Options</h2>
d461 4
a464 4
<i>number</i>.
If the maximum is reached, packets that would normally create state
fail to match this rule until the number of existing states decreases
below the limit.
d470 18
a487 17
<dd>This option enables the tracking of number of states created per
source IP address.
This option has two formats:
	<ul>
	<li><tt>source-track rule</tt> - The maximum number of states
	created by this rule is limited by the rule's <tt>max-src-nodes</tt>
	and <tt>max-src-states</tt> options. Only state entries created by
	this particular rule count toward the rule's limits.
	<li><tt>source-track global</tt> - The number of states created by
	all rules that use this option is limited. Each rule can specify
	different <tt>max-src-nodes</tt> and <tt>max-src-states</tt>
	options, however state entries created by any participating rule
	count towards each individual rule's limits.
	</ul>
The total number of source IP addresses tracked globally can be
controlled via the 
<a href="options.html#limit"><tt>src-nodes</tt> runtime option</a>.
d490 4
a493 4
<dd>When the <tt>source-track</tt> option is used,
<tt>max-src-nodes</tt> will limit the number of source IP addresses that
can simultaneously create state.
This option can only be used with <tt>source-track rule</tt>.
d496 6
a501 6
<dd>When the <tt>source-track</tt> option is used,
<tt>max-src-states</tt> will limit the number of simultaneous state
entries that can be created per source IP address.
The scope of this limit (i.e., states created by this rule only or
states created by all rules that use <tt>source-track</tt>) is dependent
on the <tt>source-track</tt> option specified.
d504 3
a506 4
<p>
Options are specified inside parenthesis and immediately after one of
the state keywords (<tt>keep state</tt>,
<tt>modulate state</tt>, or <tt>synproxy state</tt>).
a512 1

d516 5
a520 8
<blockquote>
<tt>
pass in on $ext_if proto tcp to $web_server \<br>
&nbsp;&nbsp;&nbsp;&nbsp;port www keep state \<br>
&nbsp;&nbsp;&nbsp;&nbsp;(max 200, source-track rule, max-src-nodes 100,
max-src-states 3)
</tt>
</blockquote>
a521 1
<p>
d525 7
a531 7
<li>Limit the absolute maximum number of states that this rule can
create to 200 
<li>Enable source tracking; limit state creation based on states created
by this rule only
<li>Limit the maximum number of nodes that can simultaneously create
state to 100
<li>Limit the maximum number of simultaneous states per source IP to 3
a533 1
<p>
d539 3
a541 2
<dd>Limit the maximum number of simultaneous TCP connections
which have completed the 3-way handshake that a single host can make.
d543 1
a543 2
<dd>Limit the rate of new connections to a certain amount per time
interval.
d558 1
d561 3
a563 3
this source IP.
When <tt>global</tt> is specified, kill all states matching this source
IP, regardless of which rule created the state.
a565 1
<p>
d568 8
a575 11
<blockquote>
<tt>
table &lt;abusive_hosts&gt; persist<br>
block in quick from &lt;abusive_hosts&gt;<br>
<br>
pass in on $ext_if proto tcp to $web_server \<br>
&nbsp;&nbsp;&nbsp;&nbsp;port www flags S/SA keep state \<br>
&nbsp;&nbsp;&nbsp;&nbsp;(max-src-conn 100, max-src-conn-rate 15/5,
overload &lt;abusive_hosts&gt; flush)
</tt>
</blockquote>
a576 1
<p>
d580 5
a584 6
<li>Limits the maximum number of connections per source to 100
<li>Rate limits the number of connections to 15 in a 5 second span
<li>Puts the IP address of any host that breaks these limits into the
<tt>&lt;abusive_hosts&gt;</tt> table
<li>For any offending IP addresses, flush any states created by this
rule.
d587 2
a588 1
<h2 id="tcpflags">TCP Flags</h2>
d590 3
a592 2
packets that are attempting to open a new connection. The TCP flags and
their meanings are listed here:
d594 8
a601 8
<li><b>F</b> : FIN  - Finish; end of session
<li><b>S</b> : SYN  - Synchronize; indicates request to start session
<li><b>R</b> : RST  - Reset; drop a connection
<li><b>P</b> : PUSH - Push; packet is sent immediately
<li><b>A</b> : ACK  - Acknowledgement
<li><b>U</b> : URG  - Urgent
<li><b>E</b> : ECE  - Explicit Congestion Notification Echo
<li><b>W</b> : CWR  - Congestion Window Reduced
a603 1
<p>
d606 3
a608 3
<blockquote>
<tt>
flags <i>check</i>/<i>mask</i><br>
d610 1
a610 2
</tt>
</blockquote>
a611 1
<p>
d613 2
a614 2
and the <tt><i>check</i></tt> part specifies which flag(s) must be
"on" in the header for a match to occur.
d617 3
a619 3
<blockquote>
<tt>
pass in on fxp0 proto tcp from any to any port ssh flags S/SA<br>
d621 1
a621 2
</tt>
</blockquote>
a622 1
<p>
d635 9
a643 6
doing and why, and be careful with the advice people give as a lot of 
it is bad.  Some people have suggested creating state "only if the SYN flag
is set and no others". Such a rule would end with: 
<pre>
     . . . flags S/FSRPAUEW  <i>bad idea!!</i>
</pre>
d645 4
a648 5
<p>
The theory is, create state only on the start of the TCP session, and
the session should start with a SYN flag, and no others.  The problem
is some sites are starting to use the ECN flag and any site using ECN
that tries to connect to you would be rejected by such a rule.
d651 1
a651 1
If you truly need to specify flags yourself then this combination should
a652 5
<blockquote>
<tt>
. . . flags S/SAFR
</tt>
</blockquote>
d654 5
a658 2
<p>
<!--XXX scrub changes may have invalidated this-->
d665 2
a666 2
<h2 id="synproxy">TCP SYN Proxy</h2>
<p>
d668 1
a668 1
pass the 
d670 3
a672 2
>handshake</a> packets between the two endpoints as they arrive. 
PF has the ability, however, to proxy the handshake. 
d675 1
a675 1
between the two. 
d678 1
a678 2
server, but legitimate clients will complete the handshake and get
passed.
d687 2
a688 1
in filter rules. Example:
d690 1
a690 2
<blockquote>
<tt>
d692 1
a692 2
</tt>
</blockquote>
a693 1
<p>
d701 4
a704 3
The SYN proxy will not work if PF is running on a 
<a href="http://man.openbsd.org/bridge.4"
>bridge(4)</a>.
a705 1
<h2 id="antispoof">Blocking Spoofed Packets</h2>
d708 4
a711 4
to impersonate another node on the network. Once the user has spoofed
their address they can launch a network attack without revealing the
true source of the attack or attempt to gain access to network services
that are restricted to certain IP addresses.
d717 1
a717 2
<blockquote>
<tt>
d719 1
a719 2
</tt>
</blockquote>
d724 1
a724 2
<a href="http://man.openbsd.org/pflogd.8"
>pflogd(8)</a>.
d727 2
a728 2
<dd>If a packet matches this rule then it will be considered the
"winning" rule and ruleset evaluation will stop.
d731 2
a732 2
<dd>The network interface to activate spoofing protection on. This can
also be a <a href="macros.html#lists">list</a> of interfaces.
d736 1
a736 1
<tt>inet</tt> for IPv4 or <tt>inet6</tt> for IPv6.
d741 2
a742 2
<blockquote>
<tt>
d744 7
a750 2
</tt>
</blockquote>
d752 2
a753 9
<p>
When a ruleset is loaded, any occurrences of the <tt>antispoof</tt>
keyword are expanded into two filter rules. Assuming that interface
<tt>fxp0</tt> has IP address 10.0.0.1 and a subnet mask of 255.255.255.0
(i.e., a /24), the above <tt>antispoof</tt> rule would expand to:

<blockquote>
<tt>
block in on ! fxp0 inet from 10.0.0.0/24 to any<br>
d755 1
a755 2
</tt>
</blockquote>
a756 1
<p>
d758 1
d760 10
a769 9
<li>Blocks all traffic coming from the 10.0.0.0/24 network that does
<i>not</i> pass in through <tt>fxp0</tt>. Since the 10.0.0.0/24 network is on the
<tt>fxp0</tt> interface, packets with a source address in that network block
should never be seen coming in on any other interface.
<li>Blocks all incoming traffic from 10.0.0.1, the IP address on
<tt>fxp0</tt>.
The host machine should never send packets to itself through an external
interface, so any incoming packets with a source address belonging to
the machine can be considered malicious.
d772 2
a773 4
<p>
<b>NOTE</b>: The filter rules that the <tt>antispoof</tt> rule
expands to will also block packets sent over the loopback interface to
local addresses.
d776 3
a778 4
<blockquote>
<tt>
set skip on lo0<br>
<br>
d780 1
a780 2
</tt>
</blockquote>
a781 1
<p>
d783 6
a788 5
been assigned an IP address. Using <tt>antispoof</tt> on an interface
without an IP address will result in filter rules such as:
<blockquote>
<tt>
block drop in on ! fxp0 inet all<br>
d790 1
a790 2
</tt>
</blockquote>
d792 1
a792 2
<p>
With these rules there is a risk of blocking <i>all</i> inbound traffic
a796 1
<p>
d801 1
a801 2
the interface that the packet just came in on, then the uRPF check
passes.
d809 1
a809 2
<blockquote>
<tt>
d811 1
a811 2
</tt>
</blockquote>
d813 2
a814 3
<p>
Note that the uRPF check only makes sense in an environment where
routing is symmetric.
d817 2
a818 2
uRPF provides the same functionality as
<a href="#antispoof">antispoof</a> rules.
d820 2
a821 1
<h2 id="osfp">Passive Operating System Fingerprinting</h2>
d823 1
a823 2
<p>
Passive OS Fingerprinting (OSFP) is a method for passively detecting the
d825 1
a825 1
within that host's TCP SYN packets. 
d830 3
a832 6
of a TCP SYN packet against the 
<a href="options.html#fingerprints">fingerprints file</a>, which by
default is 
<a
href="http://man.openbsd.org/pf.os.5"
><tt>/etc/pf.os</tt></a>. 
d836 14
a849 18
<blockquote>
<tt>
# pfctl -s osfp
</tt>
</blockquote>

<p>
Within a filter rule, a fingerprint may be specified by OS class,
version, or subtype/patch level. 
Each of these items is listed in the output of the <tt>pfctl</tt>
command shown above. To specify a fingerprint in a filter rule, the
<tt>os</tt> keyword is used:

<blockquote>
<tt>
pass &nbsp;in on $ext_if proto tcp from any os OpenBSD keep state<br>
block in on $ext_if proto tcp from any os "Windows 2000"<br>
block in on $ext_if proto tcp from any os "Linux 2.4 ts"<br>
d851 1
a851 2
</tt>
</blockquote>
a852 1
<p>
d857 2
a858 1
<font color="#ff0000">TAKE NOTE</font> of the following:
d861 2
a862 2
  spoofed and/or crafted packets that are made to look like they
  originated from a specific operating system.
d864 2
a865 2
  the stack's behavior and cause it to either not match what's in the
  fingerprints file or to match another entry altogether.
d867 1
a867 1
  protocols or on already established connections.
d870 8
a877 7
<h2 id="ipopts">IP Options</h2>
By default, PF blocks packets with IP options set. This can make the job
more difficult for "OS fingerprinting" utilities like nmap. If you have
an application that requires the passing of these packets, such as
multicast or IGMP, you can use the <tt>allow-opts</tt> directive:
<blockquote>
<tt>
d879 3
a881 2
</tt>
</blockquote>
d883 6
a888 8
<h2 id="example">Filtering Ruleset Example</h2>
Below is an example of a filtering ruleset. The machine running PF is
acting as a firewall between a small, internal network and the Internet.
Only the filter rules are shown; 
<tt>queueing</tt>,
<a href="nat.html"><tt>nat</tt></a>, 
<a href="rdr.html"><tt>rdr</tt></a>, 
etc., have been left out of this example.
d904 1
a904 1
# setup a default deny policy
d914 1
a914 2
block return in quick on $int_if proto tcp from ! 192.168.0.15 \
   to $int_if port ssh
d920 1
a920 1
pass out on $int_if to $lan_net
d922 2
a923 3
# pass tcp, udp, and icmp out on the external (Internet) interface. 
# tcp connections will be modulated, udp/icmp will be tracked
# statefully.
d929 1
a929 1
# who is trying to connect. 
d931 1
a931 2
pass in log on $ext_if proto tcp to ! &lt;firewall&gt; \
   port ssh # synproxy state
d936 1
a936 1
</html> 
@


1.83
log
@tweak [faq index] button and sync the pf user's guide with that style.
@
text
@d4 1
a4 1
<title>PF - Packet Filtering</title>
@


1.82
log
@use short form man links in the faq and fix a few broken links
@
text
@a29 2
<!-- Passes validator.w3.org, please keep it this way;
please, use a max of 72 chars per line -->
d35 3
a39 5
<p>
[<a href="index.html">Contents</a>]
[<a href="tables.html">Previous: Tables</a>]
[<a href="nat.html">Next: Network Address Translation</a>]
<p>
d41 8
a48 9
<h3>Table of Contents</h3>
<ul>
<li><a href="#intro">Introduction</a>
<li><a href="#syntax">Rule Syntax</a>
<li><a href="#defdeny">Default Deny</a>
<li><a href="#pass">Passing Traffic</a>
<li><a href="#quick">The <tt>quick</tt> Keyword</a>
<li><a href="#state">Keeping State</a>
<li><a href="#udpstate">Keeping State for UDP</a>
d50 2
a51 2
<li><a href="#tcpflags">TCP Flags</a>
<li><a href="#synproxy">TCP SYN Proxy</a>
d53 4
a56 4
<li><a href="#urpf">Unicast Reverse Path Forwarding</a>
<li><a href="#osfp">Passive Operating System Fingerprinting</a>
<li><a href="#ipopts">IP Options</a>
<li><a href="#example">Filtering Ruleset Example</a>
a986 5

<p>
[<a href="tables.html">Previous: Tables</a>]
[<a href="index.html">Contents</a>]
[<a href="nat.html">Next: Network Address Translation</a>]
@


1.81
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d69 1
a69 1
<a href="http://man.openbsd.org/?query=pf&amp;sektion=4"
d71 1
a71 1
(<a href="http://man.openbsd.org/?query=ip&amp;sektion=4"
d73 1
a73 1
<a href="http://man.openbsd.org/?query=ip6&amp;sektion=4"
d75 1
a75 1
(<a href="http://man.openbsd.org/?query=tcp&amp;sektion=4"
d77 1
a77 1
<a href="http://man.openbsd.org/?query=udp&amp;sektion=4"
d79 1
a79 1
<a href="http://man.openbsd.org/?query=icmp&amp;sektion=4"
d81 1
a81 1
<a href="http://man.openbsd.org/?query=icmp6&amp;sektion=4"
d125 1
a125 1
<a href="http://man.openbsd.org/?query=pflogd&amp;sektion=8"
d140 1
a140 1
href="http://man.openbsd.org/?query=ifconfig&amp;sektion=8"
d165 1
a165 1
<a href="http://man.openbsd.org/?query=protocols&amp;sektion=5"
d229 1
a229 1
<a href="http://man.openbsd.org/?query=services&amp;sektion=5"
d734 1
a734 1
<a href="http://man.openbsd.org/?query=bridge&amp;sektion=4"
d758 1
a758 1
<a href="http://man.openbsd.org/?query=pflogd&amp;sektion=8"
d882 1
a882 1
href="http://man.openbsd.org/?query=pf.os&amp;sektion=5"
@


1.80
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d4 1
a4 1
<title>PF: Packet Filtering</title>
d33 1
d35 4
a38 2
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif" border="0">
</a>
d40 1
a41 1
[<a href="index.html">Contents</a>]
d43 1
a43 4

<h1><font color="#e00000">PF: Packet Filtering</font></h1>

<hr>
@


1.79
log
@fix URIs, the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@d7 2
@


1.78
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d67 1
a67 1
<a href="http://man.openbsd.org?query=pf&amp;sektion=4"
d69 1
a69 1
(<a href="http://man.openbsd.org?query=ip&amp;sektion=4"
d71 1
a71 1
<a href="http://man.openbsd.org?query=ip6&amp;sektion=4"
d73 1
a73 1
(<a href="http://man.openbsd.org?query=tcp&amp;sektion=4"
d75 1
a75 1
<a href="http://man.openbsd.org?query=udp&amp;sektion=4"
d77 1
a77 1
<a href="http://man.openbsd.org?query=icmp&amp;sektion=4"
d79 1
a79 1
<a href="http://man.openbsd.org?query=icmp6&amp;sektion=4"
d123 1
a123 1
<a href="http://man.openbsd.org?query=pflogd&amp;sektion=8"
d138 1
a138 1
href="http://man.openbsd.org?query=ifconfig&amp;sektion=8"
d163 1
a163 1
<a href="http://man.openbsd.org?query=protocols&amp;sektion=5"
d227 1
a227 1
<a href="http://man.openbsd.org?query=services&amp;sektion=5"
d732 1
a732 1
<a href="http://man.openbsd.org?query=bridge&amp;sektion=4"
d756 1
a756 1
<a href="http://man.openbsd.org?query=pflogd&amp;sektion=8"
d880 1
a880 1
href="http://man.openbsd.org?query=pf.os&amp;sektion=5"
@


1.77
log
@replace a disorganized assortment of tables and hand-rolled command output
with more standard formatting. while here, run a few less of those commands
as root where it's not needed. the cvs checkout examples were adopted to
use the wsrc group as is done in the ports faq.

input/ok tb
@
text
@d67 1
a67 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4"
d69 1
a69 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4"
d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4"
d73 1
a73 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4"
d75 1
a75 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4"
d77 1
a77 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4"
d79 1
a79 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4"
d123 1
a123 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8"
d138 1
a138 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8"
d163 1
a163 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5"
d227 1
a227 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5"
d732 1
a732 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4"
d756 1
a756 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8"
d880 1
a880 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5"
@


1.76
log
@
rev for 5.8, mostly removing manpath part of man page urls
@
text
@d943 2
a944 5
<br>
<br>
<table border=0 width="650">
<tr><td nowrap bgcolor="#EEEEEE">
<pre>
d989 1
a989 3
</pre>
</td></tr>
</table>
@


1.75
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d67 1
a67 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.7"
d123 1
a123 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.7"
d756 1
a756 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.7"
d880 1
a880 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.7"
@


1.74
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@a5 1
<meta name="resource-type" content="document">
a6 2
<meta name="keywords"      content="openbsd,faq,pf">
<meta name="distribution"  content="global">
@


1.73
log
@
updates for 5.7
@
text
@d10 1
@


1.72
log
@
5.5->5.6 which I forgot and Jonathan Thornburg (jthorn at astro dot
indiana dot edu) reminded me of, but also sent a diff for, thanks!
@
text
@d69 1
a69 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.6"
d125 1
a125 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.6"
d758 1
a758 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.6"
d882 1
a882 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.6"
@


1.71
log
@Convert the pf faq to use id="" instead of "a name=""></a>.
@
text
@d69 1
a69 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.5"
d125 1
a125 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.5"
d758 1
a758 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.5"
d882 1
a882 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.5"
@


1.70
log
@
update for 5.5
@
text
@d66 1
a66 2
<a name="intro"></a>
<h2>Introduction</h2>
d97 1
a97 2
<a name="syntax"></a>
<h2>Rule Syntax</h2>
d280 1
a280 2
<a name="defdeny"></a>
<h2>Default Deny</h2>
d301 1
a301 2
<a name="pass"></a>
<h2>Passing Traffic</h2>
d329 1
a329 2
<a name="quick"></a>
<h2>The <tt>quick</tt> Keyword</h2>
d367 1
a367 2
<a name="state"></a>
<h2>Keeping State</h2>
d457 1
a457 3

<a name="udpstate"></a>
<h2>Keeping State for UDP</h2>
d469 1
a469 2
<a name="stateopts"></a>
<h2>Stateful Tracking Options</h2>
d614 1
a614 2
<a name="tcpflags"></a>
<h2>TCP Flags</h2>
d695 1
a695 3

<a name="synproxy"></a>
<h2>TCP SYN Proxy</h2>
d737 1
a737 2
<a name="antispoof"></a>
<h2>Blocking Spoofed Packets</h2>
d838 1
a838 2
<a name="urpf"></a>
<h2>Unicast Reverse Path Forwarding</h2>
d868 1
a868 3

<a name="osfp"></a>
<h2>Passive Operating System Fingerprinting</h2>
d926 1
a926 2
<a name="ipopts"></a>
<h2>IP Options</h2>
d937 1
a937 2
<a name="example"></a>
<h2>Filtering Ruleset Example</h2>
@


1.69
log
@
www@@ removal, normalize footers.
@
text
@d70 1
a70 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.4"
d127 1
a127 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.4"
d771 1
a771 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.4"
d898 1
a898 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.4"
d959 1
a959 1
<a href="queueing.html"><tt>queueing</tt></a>, 
@


1.68
log
@
update for 5.4
@
text
@a4 1
<link rev="made" href="mailto:www@@openbsd.org">
a1021 6
<hr>
<a href="index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a> 
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>$OpenBSD: filter.html,v 1.67 2013/05/01 13:21:45 nick Exp $</small>

@


1.67
log
@
updates for 5.3
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.3"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d772 1
a772 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.3"
d899 1
a899 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.3"
d1027 1
a1027 1
<small>$OpenBSD: filter.html,v 1.66 2012/11/01 15:06:36 nick Exp $</small>
@


1.66
log
@
enter 5.2
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.2"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d772 1
a772 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.2"
d899 1
a899 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.2"
d1027 1
a1027 1
<small>$OpenBSD: filter.html,v 1.65 2012/10/04 10:55:39 nick Exp $</small>
@


1.65
log
@
synproxy is not a no brainer, always-do-it kinda thing, so don't treat
it that way here.  Requested by, reworked with and ok henning@@
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.1"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d772 1
a772 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.1"
d899 1
a899 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.1"
d1027 1
a1027 1
<small>$OpenBSD: filter.html,v 1.64 2012/08/18 14:27:43 nick Exp $</small>
@


1.64
log
@
closing </tt> tag fix.  From Maurice Janssen, thanks!
@
text
@d718 9
a726 5
The benefit of this process is that no packets are sent to the server
before the client completes the handshake. 
This eliminates the threat of spoofed TCP SYN floods affecting the
server because a spoofed client connection will be unable to complete
the handshake.
d1009 2
a1010 3
# who is trying to connect. use the tcp syn proxy to proxy the connection.
# the default flags "S/SA" will automatically be applied to the rule by
# PF.
d1012 1
a1012 1
   port ssh synproxy state
d1027 1
a1027 1
<small>$OpenBSD: filter.html,v 1.63 2012/08/17 00:37:18 nick Exp $</small>
@


1.63
log
@
missing <tt> tags, from Robert.
@
text
@d956 1
a956 1
<a href="queueing.html"><tt>queueing<tt></a>, 
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.62 2012/05/11 11:20:04 nick Exp $</small>
@


1.62
log
@
forgot to actually COMMIT these 5.1 changes.  *sigh*
@
text
@d956 1
a956 1
<a href="queueing.html">queueing</a>, 
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.61 2012/03/14 10:49:18 giovanni Exp $</small>
@


1.61
log
@
Passive Os Fingerprinting needs "proto tcp"
spotted by Fabio Carletti, thanks
ok nick@@
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+5.0"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+5.0"
d895 1
a895 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+5.0"
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.60 2011/11/02 01:01:47 nick Exp $</small>
@


1.60
log
@
rev man page references to 5.0
@
text
@d915 4
a918 4
pass &nbsp;in on $ext_if from any os OpenBSD keep state<br>
block in on $ext_if from any os "Windows 2000"<br>
block in on $ext_if from any os "Linux 2.4 ts"<br>
block in on $ext_if from any os unknown
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.59 2011/06/28 08:33:49 jj Exp $</small>
@


1.59
log
@Fixes from Michal Mazurek
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.9"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.9"
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.9"
d895 1
a895 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.9"
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.58 2011/05/01 12:57:11 nick Exp $</small>
@


1.58
log
@
updates for 4.9
@
text
@d748 1
a748 1
Address "spoofing" is when an malicious user fakes the source IP address
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.57 2011/03/28 07:31:43 ajacoutot Exp $</small>
@


1.57
log
@Fix a couple of wrong links as reported by Ingo Feinerer.
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.8"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.8"
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.8"
d895 1
a895 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.8"
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.56 2011/03/26 13:54:56 ian Exp $</small>
@


1.56
log
@Trivial fix: missing br tag.
@
text
@d179 1
a179 1
<li>A <a href="http://public.pacbell.net/dedicated/cidr.html">CIDR</a> 
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.55 2010/11/01 09:53:51 nick Exp $</small>
@


1.55
log
@
update to 4.8
@
text
@d658 1
a658 1
pass in on fxp0 proto tcp from any to any port ssh flags S/SA
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.54 2010/05/19 13:25:16 sthen Exp $</small>
@


1.54
log
@Update the PF faq for 4.7 changes.
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.7"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.7"
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.7"
d895 1
a895 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.7"
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.53 2009/11/30 03:15:25 nick Exp $</small>
@


1.53
log
@
no more "group-bound".  From Alan Bueno.
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.6"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.6"
d261 3
a263 3
flags and to match if only the SYN flag is "on".
In OpenBSD 4.1 and later, the default flags <tt>S/SA</tt> are applied to all
TCP filter rules.
d269 3
d273 1
a273 1
In OpenBSD 4.1 and later, this option is the default for all filter rules.
d349 1
a349 1
block in on fxp0 proto tcp from any to any port ssh<br>
d363 1
a363 1
block in quick on fxp0 proto tcp from any to any port ssh<br>
d400 3
a402 4
Starting in OpenBSD 4.1, all filter rules automatically create a state
entry when a packet matches the rule.
In earlier versions of OpenBSD the filter rule had to explicitly use the
<tt>keep state</tt> option.
a403 2
<p>
Example using OpenBSD 4.1 and later:
d411 1
a411 9
Example using OpenBSD 4.0 and earlier:
<blockquote>
<tt>
pass out on fxp0 proto tcp from any to any keep state
</tt>
</blockquote>

<p>
These rules allow any outbound TCP traffic on the <tt>fxp0</tt> interface 
d413 3
a415 3
While keeping state is a nice feature, its use significantly improves
the performance of your firewall as state lookups are dramatically
faster than running a packet through the filter rules.
d424 3
a426 2
Starting with OpenBSD 3.5, the <tt>modulate state</tt> option can be
used in rules that specify protocols other than TCP. 
a464 7
<p>
Note that <a href="nat.html"><tt>nat</tt></a>, 
<a href="nat.html#binat"><tt>binat</tt></a>, and
<a href="rdr.html"><tt>rdr</tt></a> rules implicitly create state for
matching connections as long as the connection is passed by the
filter ruleset.

d659 1
d664 5
a668 4
The above rule passes TCP traffic with the SYN flag set while only
looking at the SYN and ACK flags. A packet with the SYN and ECE flags
would match the above rule while a packet with SYN and ACK or just ACK
would not.
a670 14
In OpenBSD 4.1 and later, the default flags applied to TCP rules is
<tt>flags S/SA</tt>.
Combined with the OpenBSD 4.1 default of <tt>keep state</tt> on filter
rules, these two rules become equivalent:
<blockquote>
<tt>
pass out on fxp0 proto tcp all flags S/SA keep state<br>
pass out on fxp0 proto tcp all
</tt>
</blockquote>

<p>
Each rule will match TCP packets with the SYN flag set and ACK flag
clear and each will create a state entry for matching packets.
a674 11
In OpenBSD 4.0 and earlier there were no default flags applied to any
filter rules.
Each rule had to specify which flag(s) to match on and also had to
explicitly use the <tt>keep state</tt> option.
<blockquote>
<tt>
pass out on fxp0 proto tcp all flags S/SA keep state
</tt>
</blockquote>

<p>
d699 1
d701 4
a704 6
FIN and RST flags if traffic is also being
<!--XXX scrub-->
scrubbed. The scrubbing process will cause PF
to drop any incoming packets with illegal TCP flag combinations (such as
SYN and RST) and to normalize potentially ambiguous combinations (such
as SYN and FIN).
d730 1
a730 2
pass in on $ext_if proto tcp from any to $web_server port www \<br>
&nbsp;&nbsp;&nbsp;flags S/SA synproxy state
d768 1
a768 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.6"
d852 1
a852 2
Starting in <a href="../../40.html">OpenBSD 4.0</a>, PF offers a Unicast
Reverse Path Forwarding (uRPF) feature.
d895 1
a895 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.6"
d994 2
a995 2
pass in  on $int_if from $lan_net to any
pass out on $int_if from any to $lan_net
d1008 1
a1008 1
pass in log on $ext_if proto tcp from any to ! &lt;firewall&gt; \
d1024 1
a1024 1
<small>$OpenBSD: filter.html,v 1.52 2009/10/16 19:12:42 nick Exp $</small>
@


1.52
log
@
quick update for 4.6.  much more is needed, at least scrub.html is
currently dead wrong, so I've unlinked it from the rest for now.
@
text
@d455 2
a456 2
runtime option and on a per rule basis by the <tt>if-bound</tt>,
<tt>group-bound</tt>, and <tt>floating</tt> state option keywords.
d1064 1
a1064 1
<small>$OpenBSD: filter.html,v 1.51 2009/04/30 17:27:31 nick Exp $</small>
@


1.51
log
@
updates for 4.5
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.5"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.5"
d738 2
a739 1
<a href="scrub.html">scrubbed</a>. The scrubbing process will cause PF
d807 1
a807 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.5"
d935 1
a935 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.5"
d1016 1
a1016 1
scrub in all
d1064 1
a1064 1
<small>$OpenBSD: filter.html,v 1.50 2009/01/25 18:09:49 jasper Exp $</small>
@


1.50
log
@- fix a bunch of tyop's

from Tom Van Looy, thanks!
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.4"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.4"
d806 1
a806 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.4"
d934 1
a934 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.4"
d1063 1
a1063 1
<small>$OpenBSD: filter.html,v 1.49 2008/10/31 16:49:34 nick Exp $</small>
@


1.49
log
@
update numbers for 4.4
@
text
@d704 1
a704 1
explicity use the <tt>keep state</tt> option.
d1063 1
a1063 1
<small>$OpenBSD: filter.html,v 1.48 2008/07/27 17:13:47 nick Exp $</small>
@


1.48
log
@
PF updates for 4.3..which got missed a few times.
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.3"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.3"
d806 1
a806 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.3"
d934 1
a934 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.3"
d1063 1
a1063 1
<small>$OpenBSD: filter.html,v 1.47 2007/11/09 15:54:11 jmc Exp $</small>
@


1.47
log
@when "max <number>" is exceeded, packets are not dropped - rather they
fail to match;

from Doichin Dokov
diff from henning and myself
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.2"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.2"
d806 1
a806 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.2"
d934 1
a934 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.2"
d1063 1
a1063 1
<small>$OpenBSD: filter.html,v 1.46 2007/11/01 02:57:56 joel Exp $</small>
@


1.46
log
@Updates for OpenBSD 4.2
@
text
@d502 3
a504 2
If the maximum is reached, packets that would normally create state are
dropped until the number of existing states decreases.
d1063 1
a1063 1
<small>$OpenBSD: filter.html,v 1.45 2007/08/14 20:04:41 steven Exp $</small>
@


1.45
log
@fix broken link.  reported by alan.bsd@@gmail
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.1"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.1"
d805 1
a805 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.1"
d933 1
a933 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.1"
d1062 1
a1062 1
<small>$OpenBSD: filter.html,v 1.44 2007/05/07 01:40:29 joel Exp $</small>
@


1.44
log
@Explicity mention how stateful options are specified in a rule instead
of having readers rely soley on the example shown.
@
text
@d748 1
a748 1
<a href="http://www.inetdaemon.com/tutorials/internet/tcp/connections.html"
d1062 1
a1062 1
<small>$OpenBSD: filter.html,v 1.43 2007/05/07 01:21:36 joel Exp $</small>
@


1.43
log
@- add urpf-failed to syntax description
- replace antispoof with urpf-failed in the example
@
text
@d14 1
a14 1
Copyright (c) 2003-2005 Joel Knight <enabled@@myrealbox.com>
d543 11
a578 6
In OpenBSD 4.1 and later, the <tt>keep state</tt> option became the
implicit default for all filter rules.
Despite this, when specifying stateful options <tt>keep state</tt> must
still be used in front of the options.

<p>
d1062 1
a1062 1
<small>$OpenBSD: filter.html,v 1.42 2007/05/07 01:13:53 joel Exp $</small>
@


1.42
log
@Updates for OpenBSD 4.1
@
text
@d216 3
d1014 2
a1015 2
# activate spoofing protection for the internal interface.
antispoof quick for $int_if inet
d1057 1
a1057 1
<small>$OpenBSD: filter.html,v 1.41 2007/05/06 18:59:54 nick Exp $</small>
@


1.41
log
@
manpath changes to:
  4.1 for PF related items
  removed for non-PF-related items, which will probably either not
    change much, or benefit from the newest, best man pages.
@
text
@d129 1
a129 2
>pflogd(8)</a>. If the rule specifies the <tt>keep state</tt>,
<tt>modulate state</tt>, or <tt>synproxy state</tt> option, then only the
d259 2
d267 1
d387 1
a387 1
When a rule has the <tt>keep state</tt> option, the first packet
d391 18
a408 1
from receiver to sender. For example:
d416 1
a416 1
This allows any outbound TCP traffic on the <tt>fxp0</tt> interface 
d443 3
a445 2
will be passed through the firewall. For example, if <tt>keep state</tt>
is specified for a TCP connection and an ICMP source-quench message
d491 2
a492 4
When a filter rule creates a state table entry through the use of any of
the <tt>keep state</tt>, <tt>modulate state</tt>, or <tt>synproxy state</tt>
keywords, certain options can be specified that control the behavior of
state creation.
d502 3
d545 1
a545 1
&nbsp;&nbsp;&nbsp;&nbsp;port www flags S/SA keep state \<br>
d565 6
d650 2
a651 1
flags <i>check</i>/<i>mask</i>
d659 2
d674 4
a677 2
Note: in previous versions of OpenBSD, the following syntax was
supported:
d680 2
a681 1
. . . flags S
d686 4
a689 1
This is no longer true. A mask must now <i>always</i> be specified.
d692 4
a695 2
Flags are often used in conjunction with <tt>keep state</tt> rules to 
help control the creation of state entries:
a702 4
This would permit the creation of state on any outgoing TCP packet
with the SYN flag set out of the SYN and ACK flags.

<p>
d715 5
a719 2
that tries to connect to you would be rejected by such a rule.  A
much better guideline is:
d733 1
a733 11
It's highly recommended to always <tt>scrub</tt> incoming traffic:
<blockquote>
<tt>
scrub in on fxp0<br>
.<br>
.<br>
.<br>
pass in on fxp0 proto tcp from any to any port ssh flags S/SA \<br>
&nbsp;&nbsp;&nbsp;keep state
</tt>
</blockquote>
a908 15
<p>
Hosts acting as IPsec endpoints should not enable uRPF on the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&amp;sektion=4"
><tt>enc0</tt></a> interface.
uRPF will always fail on <tt>enc0</tt> and will block all packets.
If you do not need to filter the encapsulated IPsec traffic, then
<tt>set skip on enc0</tt> is recommended.
Otherwise, avoid uRPF checks on that interface.

<blockquote>
<tt>
block in quick on ! enc0 from urpf-failed label uRPF
</tt>
</blockquote>

d1019 1
a1019 1
   to $int_if port ssh flags S/SA
d1021 3
a1023 1
# pass all traffic to and from the local network
d1028 3
a1030 3
# keep state on udp and icmp and modulate state on tcp.
pass out on $ext_if proto tcp all modulate state flags S/SA
pass out on $ext_if proto { udp, icmp } all keep state
d1036 2
d1039 1
a1039 1
   port ssh flags S/SA synproxy state
d1054 1
a1054 1
<small>$OpenBSD: filter.html,v 1.40 2006/11/19 21:00:06 joel Exp $</small>
@


1.40
log
@Overzealous; urpf on lo0 is a-ok
@
text
@d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d73 1
a73 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d75 1
a75 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d77 1
a77 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d79 1
a79 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d81 1
a81 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d83 1
a83 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d144 1
a144 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=ifconfig&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d169 1
a169 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d230 1
a230 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d745 1
a745 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d770 1
a770 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d884 1
a884 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=enc&amp;sektion=4&amp;manpath=OpenBSD+4.0"
d913 1
a913 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+4.0"
d1038 1
a1038 1
<small>$OpenBSD: filter.html,v 1.39 2006/11/19 19:36:54 joel Exp $</small>
@


1.39
log
@Warn about urpf on enc0 and lo0
@
text
@a896 9
<p>
Enabling uRPF on 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=lo&amp;sektion=4&amp;manpath=OpenBSD+4.0"
><tt>lo0</tt></a> will block packets sent over the loopback interface to
local addresses.
As is the case when using antispoof rules, it's recommended to avoid any
PF processing on loopback interfaces using the
"<a href="options.html#skip">set skip</a>" option.

d1038 1
a1038 1
<small>$OpenBSD: filter.html,v 1.38 2006/11/01 01:56:01 joel Exp $</small>
@


1.38
log
@Updates for OpenBSD 4.0. uRPF, tftp-proxy, more ftp-proxy, etc.
Thanks to mcbride for the bits about interface groups
@
text
@d882 25
d1047 1
a1047 1
<small>$OpenBSD: filter.html,v 1.37 2006/10/27 19:26:13 nick Exp $</small>
@


1.37
log
@
"tweaks and fixes" from Jeremy Reed, via Joel@@.  Committed at request
of joel@@
@
text
@d59 1
d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d73 1
a73 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d75 1
a75 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d77 1
a77 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d79 1
a79 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d81 1
a81 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d83 1
a83 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d128 1
a128 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d142 11
a152 3
An interface group is specified as the name of the interface but without
the integer appended.
For example: <tt>ppp</tt> or <tt>fxp</tt>.
d154 1
a154 1
<tt>ppp</tt> or <tt>fxp</tt> interface, respectively.
d169 1
a169 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d185 2
a186 1
<li>The name of a network interface. Any IP addresses assigned to the
d192 4
a195 3
<li>The name of a network interface in parentheses <tt>( )</tt>. This
tells PF to update the rule if the IP address(es) on the named interface
change. This is useful on an interface that gets its IP address via DHCP
d230 1
a230 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d745 1
a745 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.9"
d770 1
a770 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d850 32
d897 1
a897 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.9"
d1022 1
a1022 1
<small>$OpenBSD: filter.html,v 1.36 2006/05/01 00:54:29 nick Exp $</small>
@


1.36
log
@
3.9 updates, mostly rev'ing man page links
@
text
@d190 1
a190 1
  <li><tt>:network</tt> - substitues the CIDR network block (e.g.,
d194 1
a194 1
  <li><tt>:peer</tt> - substitues the peer's IP address on a
d200 1
a200 1
  should not include aliased IP addresses in the substituion. 
d435 1
a435 1
entry, they must be transitting the <tt>fxp0</tt> interface.
d551 1
a551 1
completed the 3-way handshake, more aggresive actions can be taken on
d683 1
a683 1
SYN and RST) and to normalize potentially ambigious combinations (such
d700 1
a700 1
Normally when a client initiates a TCP connection to a server PF will
d979 1
a979 1
<small>$OpenBSD: filter.html,v 1.35 2006/01/01 03:49:54 joel Exp $</small>
@


1.35
log
@- Use "set skip on lo0" instead of "pass quick on lo0" when using synproxy
(as per thread on the pf list)
- Encourage use of "set skip on lo0" in general
@
text
@d70 1
a70 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d72 1
a72 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d74 1
a74 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d76 1
a76 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d78 1
a78 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d80 1
a80 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d82 1
a82 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d127 1
a127 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d160 1
a160 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d219 1
a219 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d734 1
a734 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.8"
d759 1
a759 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d854 1
a854 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.8"
d979 1
a979 1
<small>$OpenBSD: filter.html,v 1.34 2005/12/28 17:11:25 joel Exp $</small>
@


1.34
log
@Clarify how the "log" keyword works in 3.8 and onwards.
@
text
@d813 3
a815 1
local addresses. These addresses should be passed explicitly. Example:
d818 1
a818 1
pass quick on lo0 all<br>
d931 3
d938 1
a938 5
block in  all
block out all

# pass traffic on the loopback interface in either direction
pass quick on lo0 all
d979 1
a979 1
<small>$OpenBSD: filter.html,v 1.33 2005/11/01 11:35:18 nick Exp $</small>
@


1.33
log
@
bump manpath= tag for 3.8
@
text
@d131 1
a131 1
To log all packets regardless, use <tt>log-all</tt>.
d978 1
a978 1
<small>$OpenBSD: filter.html,v 1.32 2005/10/15 20:41:35 joel Exp $</small>
@


1.32
log
@scrub does not drop SYN+FIN packets.

pointed out by Nikos Ntarmos ntarmos..ceid.upatras.gr via jmc@@ thank
you!
@
text
@d70 1
a70 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d72 1
a72 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d74 1
a74 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d76 1
a76 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d78 1
a78 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d80 1
a80 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d82 1
a82 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d127 1
a127 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d160 1
a160 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d219 1
a219 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d734 1
a734 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.7"
d759 1
a759 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d852 1
a852 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.7"
d978 1
a978 1
<small>$OpenBSD: filter.html,v 1.31 2005/05/20 00:12:02 joel Exp $</small>
@


1.31
log
@Updates for OpenBSD 3.7.
@
text
@d683 3
a685 2
SYN and FIN or SYN and RST). It's highly recommended to always 
<tt>scrub</tt> incoming traffic:
d978 1
a978 1
<small>$OpenBSD: filter.html,v 1.30 2005/02/26 04:56:40 joel Exp $</small>
@


1.30
log
@Document stateful tracking options: max number of states per rule, max
sources that can create state, and max states per source.

Reviewed by dhartmei@@
@
text
@d70 1
a70 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d72 1
a72 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d74 1
a74 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d76 1
a76 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d78 1
a78 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d80 1
a80 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d82 1
a82 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d127 1
a127 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d160 1
a160 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.6"
d219 1
a219 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.6"
d496 1
a496 3
The scope of this limit (i.e., states created by this rule only or
states created by all rules that use <tt>source-track</tt>) is dependent
on the <tt>source-track</tt> option specified.
d532 59
d733 1
a733 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.6"
d758 1
a758 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d851 1
a851 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.6"
d977 1
a977 1
<small>$OpenBSD: filter.html,v 1.29 2005/02/24 14:29:52 joel Exp $</small>
@


1.29
log
@Add missing keyword in OSFP example. Pointed out by Steven Schubiger
<steven at accognoscere dot org> via nick@@. Thank you!
@
text
@d14 1
a14 1
Copyright (c) 2003, 2004 Joel Knight <enabled@@myrealbox.com>
d55 1
d458 76
d920 1
a920 1
<small>$OpenBSD: filter.html,v 1.28 2005/02/21 20:45:39 jaredy Exp $</small>
@


1.28
log
@criterion is plural, from Jens Ropers <ropers@@gmail.com>
@
text
@d737 4
a740 4
pass &nbsp;in on $ext_if any os OpenBSD keep state<br>
block in on $ext_if any os "Windows 2000"<br>
block in on $ext_if any os "Linux 2.4 ts"<br>
block in on $ext_if any os unknown
d843 1
a843 1
<small>$OpenBSD: filter.html,v 1.27 2005/01/28 17:44:21 dhartmei Exp $</small>
@


1.27
log
@add [] around more optional filter rule parts in the "simplified" syntax
found by Peter Fraser, ok nick@@ and Joel Knight
@
text
@d70 1
a70 1
>pf(4)</a> uses when inspecting packets is based on the Layer 3 
d843 1
a843 1
<small>$OpenBSD: filter.html,v 1.26 2004/12/22 04:28:16 david Exp $</small>
@


1.26
log
@make small title logo a link back to main page; ok nick@@
@
text
@d102 4
a105 4
<i>action</i> <i>direction</i> [log] [quick] on <i>interface</i> [<i>af</i>] 
[proto <i>protocol</i>] \<br>
&nbsp;&nbsp;&nbsp;from <i>src_addr</i> [port <i>src_port</i>] to 
<i>dst_addr</i> [port <i>dst_port</i>] \<br>
d843 1
a843 1
<small>$OpenBSD: filter.html,v 1.25 2004/11/01 21:41:07 nick Exp $</small>
@


1.25
log
@
3.6 content upgrades.  Directly from Joel Knight, jaredy@@ did the
anchors and nested anchors work, rest is by Joel.
@
text
@d34 3
a36 1
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif">
d843 1
a843 1
<small>$OpenBSD: filter.html,v 1.24 2004/10/31 16:14:41 nick Exp $</small>
@


1.24
log
@
Ooops!  Got carried away with rev'ing 3.5 to 3.6...  Spotted by Tomasz Bak,
thanks!
@
text
@d104 1
a104 1
&nbsp;&nbsp;&nbsp;[<i>tcp_flags</i>] [<i>state</i>]
d841 1
a841 1
<small>$OpenBSD: filter.html,v 1.23 2004/10/29 17:22:57 nick Exp $</small>
@


1.23
log
@
Update for 3.6
@
text
@d396 1
a396 1
Starting with OpenBSD 3.6, the <tt>modulate state</tt> option can be
d841 1
a841 1
<small>$OpenBSD: filter.html,v 1.22 2004/10/11 22:04:37 saad Exp $</small>
@


1.22
log
@- better wording. ok nick@@
@
text
@d67 1
a67 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d69 1
a69 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d71 1
a71 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d73 1
a73 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d75 1
a75 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d77 1
a77 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d79 1
a79 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d124 1
a124 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.5"
d157 1
a157 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.5"
d216 1
a216 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.5"
d396 1
a396 1
Starting with OpenBSD 3.5, the <tt>modulate state</tt> option can be
d597 1
a597 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.5"
d622 1
a622 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.5"
d715 1
a715 1
href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf.os&amp;sektion=5&amp;manpath=OpenBSD+3.5"
d841 1
a841 1
<small>$OpenBSD: filter.html,v 1.21 2004/07/06 01:31:32 nick Exp $</small>
@


1.21
log
@
From Joel Knight:
Fix a logic error in the example ruleset. In practice, it wasn't doing
what the comment said it would.
Pointed out by Stavros Filargiropoulos <sf at alphanet dot gr>
@
text
@d245 1
a245 1
flags and to match if the SYN flag is "on".
d841 1
a841 1
<small>$OpenBSD: filter.html,v 1.20 2004/05/07 01:55:23 nick Exp $</small>
@


1.20
log
@
Add an OpenBSD license to the PF User's Guide.
Concept and breakdown of copyrights agreed to by Joel Knight and myself,
license assistance millert@@, ok deraadt@@.
@
text
@d789 3
d825 1
a825 1
pass in log on $ext_if proto tcp from any to { !$ext_if, !$int_if } \
d841 1
a841 1
<small>$OpenBSD: filter.html,v 1.19 2004/04/30 18:00:25 nick Exp $</small>
@


1.19
log
@
PF User's Guide updates for OpenBSD 3.5.
Work done by Joel Knight (enabled et myrealbox.dit com), many, many thanks
to him for providing and maintaining some darned good docs.
@
text
@a10 1
<meta name="copyright"     content="This document copyright 2002-2004 by OpenBSD.">
d13 17
d838 1
a838 1
<small>$OpenBSD: filter.html,v 1.18 2004/04/27 17:56:57 henning Exp $</small>
@


1.18
log
@pass quick on lo0 all, not only pass in quick ...
From: Calyth <calyth2004@@shaw.ca>
@
text
@d40 1
d51 1
a51 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d53 1
a53 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d55 1
a55 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d57 1
a57 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d59 1
a59 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d61 1
a61 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d63 1
a63 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d108 1
a108 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.4"
d120 7
a126 1
<dd>The name of the network interface that the packet is moving through.
d141 1
a141 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.4"
d168 18
a185 4
<li>The name of a network interface followed by the <tt>:network</tt> or
<tt>:broadcast</tt> keywords. The resulting CIDR network (i.e.,
192.168.0.0/24) or broadcast address (i.e., 192.168.0.255) will be
substituted into the rule when the ruleset is loaded.
d200 1
a200 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.4"
a211 1
	</ul>
d216 6
d380 2
d387 2
a388 2
pass out on fxp0 proto tcp from any to any modulate state<br>
pass out on fxp0 proto { udp, icmp } from any to any keep state
d400 18
a417 6
It's important to note that stateful connections are limited to the
interface they were created on. This is particularly important on
routers and firewalls running PF, especially when a "default deny"
policy is implemented as outlined above. If a firewall is keeping state
on all outgoing connections on the external interface, those packets must
still be explicitly passed through the internal interface.
d581 1
a581 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bridge&amp;sektion=4&amp;manpath=OpenBSD+3.4"
d606 1
a606 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.4"
d684 59
d822 1
a822 1
<small>$OpenBSD: filter.html,v 1.17 2004/01/31 21:10:50 nick Exp $</small>
@


1.17
log
@
implicit pass all at beginning, not end.  spotted by Tom Ryan (tom.ryan at
whitehorsestrategic dot com), ok Henning@@
@
text
@d623 1
a623 1
pass in quick on lo0 all<br>
d723 1
a723 1
<small>$OpenBSD: filter.html,v 1.16 2004/01/01 04:16:17 nick Exp $</small>
@


1.16
log
@
Bump copyright to 2004
@
text
@d74 1
a74 1
<tt>pass all</tt> at the end of a filtering ruleset meaning that if a
d723 1
a723 1
<small>$OpenBSD: filter.html,v 1.15 2003/11/27 15:08:25 nick Exp $</small>
@


1.15
log
@
Major update to the PF FAQ from "Mr. PF FAQ", Joel Knight.  THANKS!
@
text
@d11 1
a11 1
<meta name="copyright"     content="This document copyright 2002-2003 by OpenBSD.">
d723 1
a723 1
<small>$OpenBSD: filter.html,v 1.14 2003/11/09 23:29:02 nick Exp $</small>
@


1.14
log
@
Update of PF User's Guide to 3.4.  Ok, really just pointing the man page
links at the 3.4-release man pages rather than the 3.3-release man pages.
Work by Joel Knight.
@
text
@d20 1
a20 1
[<a href="rdr.html">Previous: Traffic Redirection</a>]
d22 1
a22 1
[<a href="logging.html">Next: Logging</a>]
d34 1
d38 1
a38 1
<li><a href="#quick">The <tt>quick</tt> Keyword</a>
d83 1
a83 1
<i>action</i> <i>direction</i> [log] [quick] on <i>int</i> [<i>af</i>] 
d108 4
a111 4
>pflogd(8)</a>. If the rule specifies the <tt>keep state</tt> or
<tt>modulate state</tt> option then only the packet which establishes
the state is logged. To log all packets regardless, use
<tt>log-all</tt>.
d114 3
a116 2
<dd>If a packet matches a rule specifying <tt>quick</tt> then that rule
is considered the last matching rule and the specified action is taken.
d118 1
a118 1
<dt><tt><i>int</i></tt>
d153 1
a153 1
<tt>/<i>netmask</tt></i> (i.e., <tt>/24</tt>). Each IP address on the
d212 4
d270 39
d396 1
a396 1
<a href="options.html">options</a> section of the <tt>/etc/pf.conf</tt>
d504 16
a519 10
<a name="quick"></a>
<h2>The <tt>quick</tt> Keyword</h2>
As indicated earlier, each packet is evaluated against the filter ruleset
from top to bottom.  By default, the packet is marked for passage, which
can be changed by any rule, and could be changed back and forth several
times before the end of the filter rules. <b>The last matching rule
"wins".</b>  There is an exception to this: The <tt>quick</tt> option
on a filtering rule has the effect of canceling any further rule
processing and causes the specified action to be taken. Let's look at a
couple examples:
d522 3
a524 1
Wrong:
d527 2
a528 2
block in on fxp0 proto tcp from any to any port ssh<br>
pass &nbsp;in all
d533 1
a533 3
In this case, the <tt>block</tt> line may be evaluated, but will never
have any effect, as it is then followed by a line which will pass
everything.
d536 2
a537 7
Better:
<blockquote>
<tt>
block in quick on fxp0 proto tcp from any to any port ssh<br>
pass &nbsp;in all
</tt>
</blockquote>
d540 3
a542 3
These rules are evaluated a little differently.  If the <tt>block</tt>
line is matched, due to the <tt>quick</tt> option, the packet will be
blocked, and the rest of the ruleset will be ignored.
d592 3
a594 3
keyword are expanded into two filter rules. Assuming that interface fxp0
has IP address 10.0.0.1 and a subnet mask of 255.255.255.0 (i.e., a
/24), the above <tt>antispoof</tt> rule would expand to:
d607 2
a608 2
<i>not</i> pass in through fxp0. Since the 10.0.0.0/24 network is on the
fxp0 interface, packets with a source address in that network block
d610 2
a611 1
<li>Blocks all incoming traffic from 10.0.0.1, the IP address on fxp0.
d704 1
a704 1
# NOT destined for the firewall (ie, they're destined for a machine on
d706 1
a706 1
# who is trying to connect.
d708 1
a708 1
   port ssh flags S/SA keep state
d714 1
a714 1
[<a href="rdr.html">Previous: Traffic Redirection</a>]
d716 1
a716 1
[<a href="logging.html">Next: Logging</a>]
d723 1
a723 1
<small>$OpenBSD: filter.html,v 1.13 2003/09/22 02:29:03 nick Exp $</small>
@


1.13
log
@
From Joel Knight: changes formatting so that all keywords are
in <i>, all literals are in <tt>, etc.  Excess man page links removed.
No words were changed.
@
text
@d49 1
a49 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d51 1
a51 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d53 1
a53 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d55 1
a55 1
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d57 1
a57 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d59 1
a59 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d61 1
a61 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.3"
d106 1
a106 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.3"
d132 1
a132 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.3"
d177 1
a177 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.3"
d520 1
a520 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.3"
d676 1
a676 1
<small>$OpenBSD: filter.html,v 1.12 2003/09/16 01:23:49 nick Exp $</small>
@


1.12
log
@
Grammar and punctuation clean up, from Joel Knight.
Only a very few words changed.
@
text
@d151 1
a151 1
<i><tt>/netmask</tt></i> (i.e., <tt>/24</tt>). Each IP address on the
d226 1
a226 1
block in  all<br>
d615 2
a616 2
<a href="nat.html">NAT</a>, 
<a href="rdr.html">rdr</a>, 
d676 1
a676 1
<small>$OpenBSD: filter.html,v 1.11 2003/08/08 22:12:50 nick Exp $</small>
@


1.11
log
@
Patch from Joel Knight, issue pointed out by J. Sabino (justin at
escapek dot com) on the pf list.  BTW: Joel had the patch to me before I
even read the issue on the pf list!  Good work.
@
text
@d151 1
a151 1
<i><tt>/netmask</tt></i> (i.e. <tt>/24</tt>). Each IP address on the
d160 2
a161 2
<tt>:broadcast</tt> keywords. The resulting CIDR network (i.e.
192.168.0.0/24) or broadcast address (i.e. 192.168.0.255) will be
d222 1
a222 1
To create a default deny filter policy the first two filter rules should
d299 1
a299 1
the performance of your firewall, as state lookups are dramatically
d331 1
a331 1
on all outgoing connections on the external interface those packets must
d343 2
a344 2
One will sometimes hear it said, that "one can not create state with
UDP, as UDP is a stateless protocol!"  While it is true that a UDP
d371 1
a371 1
To have PF inspect the TCP flags during evaluation of a rule the
d424 1
a424 1
is set, and no others". Such a rule would end with: 
d465 1
a465 1
"wins".</b>  There is an exception to this: the <tt>quick</tt> option
d617 1
a617 1
etc have been left out of this example.
d676 1
a676 1
<small>$OpenBSD: filter.html,v 1.9 2003/06/14 03:24:32 nick Exp $</small>
@


1.10
log
@
Scrub also filters out packets with invalid flags, so document this and
change the examples appropriately.  Work from Joel Knight, inspired by
Trevor Talbot (quension at mac dot com).
@
text
@d647 3
a649 4
# pass all traffic to and from the local network destined for the 
# firewall machine
pass in  on $int_if from $lan_net to $int_if 
pass out on $int_if from $int_if to $lan_net
@


1.9
log
@
"block drop" -> "block return".  From Joel Knight.
Spotted by Zoran Ivanic (zoc at zajebancija dot net), thanks!
@
text
@d391 1
a391 1
looking at the SYN and ACK flags. A packet with the SYN and URG flags
d412 1
a412 1
pass out on fxp0 proto tcp all flags S/SAFR keep state
d418 1
a418 1
with the SYN flag set out of the SYN, ACK, FIN, and RST flags.
d442 16
a457 2
This means match this packet <i>only if</i> SYN is set, and ACK, FIN and
RST are not.
d627 3
d677 1
a677 1
<small>$OpenBSD: filter.html,v 1.8 2003/06/13 02:54:08 nick Exp $</small>
@


1.8
log
@
Improved wrapping of man page links, renders better on some browsers.
No words altered.  From Joel Knight.
@
text
@d624 1
a624 1
# trusted computer, 192.168.0.15. use "block drop" so that a TCP RST is
d627 1
a627 1
block drop in quick on $int_if proto tcp from ! 192.168.0.15 \
d660 1
a660 1
<small>$OpenBSD: filter.html,v 1.7 2003/06/07 01:18:11 nick Exp $</small>
@


1.7
log
@
Add Antispoof docs.  Work done by Joek Knight (enabled at myrealbox dot com)
@
text
@d49 14
a62 13
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pf&amp;sektion=4&amp;manpath=OpenBSD+3.3">
pf(4)</a> uses when inspecting packets is based on the Layer 3 
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip&amp;sektion=4&amp;manpath=OpenBSD+3.3">IPv4</a> 
and 
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=ip6&amp;sektion=4&amp;manpath=OpenBSD+3.3">
IPv6</a>) and Layer 4
(<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tcp&amp;sektion=4&amp;manpath=OpenBSD+3.3">TCP</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=udp&amp;sektion=4&amp;manpath=OpenBSD+3.3">
UDP</a>,
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp&amp;sektion=4&amp;manpath=OpenBSD+3.3">
ICMP</a>, and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=icmp6&amp;sektion=4&amp;manpath=OpenBSD+3.3">
ICMPv6</a>) headers. The most often used criteria are source and
d106 2
a107 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pflogd&amp;sektion=8&amp;manpath=OpenBSD+3.3">
pflogd(8)</a>. If the rule specifies the <tt>keep state</tt> or
d132 2
a133 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=protocols&amp;sektion=5&amp;manpath=OpenBSD+3.3">
<tt>/etc/protocols</tt></a>
d177 2
a178 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=services&amp;sektion=5&amp;manpath=OpenBSD+3.3">
<tt>/etc/services</tt></a>
d660 1
a660 1
<small>$OpenBSD: filter.html,v 1.6 2003/05/25 01:35:07 nick Exp $</small>
@


1.6
log
@
Various wording and punctuation improvements, by Joel Knight.
@
text
@d38 1
d483 99
d608 3
a610 3
ext_if  = fxp0
int_if  = dc0
lan_net = 192.168.0.0/24
d616 6
d659 1
a659 1
<small>$OpenBSD: filter.html,v 1.5 2003/05/15 03:03:54 nick Exp $</small>
@


1.5
log
@
Table of Contents now on each page.  Work by Joel Knight (yay! Joel! 8-).
@
text
@d144 2
a145 1
ruleset is loaded.
d148 4
a151 2
<li>The name of a network interface followed by a netmask. The resulting
CIDR network block will be substituted into the rule at load time.
d158 1
a158 1
<tt>:broadcast</tt> keywords. The resulting CIDR network (ie
d161 1
d553 1
a553 1
<small>$OpenBSD: filter.html,v 1.4 2003/05/02 08:18:21 henning Exp $</small>
@


1.4
log
@ie -> i.e.; Marco Peerebom
@
text
@d28 18
a45 1
<p>
d549 1
a549 1
<small>$OpenBSD: filter.html,v 1.3 2003/05/01 14:20:37 nick Exp $</small>
@


1.3
log
@
ARGH!  no, it is "ruleset", not "rule set".  Pointed out by Margarida@@
@
text
@d139 1
a139 1
192.168.0.0/24) or broadcast address (ie 192.168.0.255) will be
d532 1
a532 1
<small>$OpenBSD: filter.html,v 1.2 2003/05/01 13:14:12 nick Exp $</small>
@


1.2
log
@
spelling and typos, plus "ruleset" -> "rule set"
@
text
@d54 1
a54 1
<tt>pass all</tt> at the end of a filtering rule set meaning that if a
d127 1
a127 1
rule set is loaded.
d135 1
a135 1
or dial-up as the rule set doesn't have to be reloaded each time the
d140 1
a140 1
substituted into the rule when the rule set is loaded.
d196 1
a196 1
writing a rule set easier.
d249 1
a249 1
the firewall without going through rule set evaluation.
d252 1
a252 1
Keeping state has many advantages including simpler rule sets and better
d256 1
a256 1
packets matching stateful connections don't go through rule set
d264 1
a264 1
state entry and bypass rule set evaluation, but so do the reply packets
d316 1
a316 1
filter rule set.
d424 2
a425 2
As indicated earlier, each packet is evaluated against the filter rule
set from top to bottom.  By default, the packet is marked for passage, which
d459 1
a459 1
blocked, and the rest of the rule set will be ignored.
d474 2
a475 2
<h2>Filtering Rule Set Example</h2>
Below is an example of a filtering rule set. The machine running PF is
d532 1
a532 1
<small>$OpenBSD: filter.html,v 1.1 2003/05/01 01:46:06 nick Exp $</small>
@


1.1
log
@
The long awaited, new PF FAQ!
Most of it written by Joel Knight >enabled at myrealbox dot com<,
some parts by me, a few parts yanked out of the old PF FAQ.
GREAT work, Joel!
@
text
@d459 1
a459 1
blocked, and the rest of the ruleset will be ignored.
d532 1
a532 1
<small>$OpenBSD$</small>
@

