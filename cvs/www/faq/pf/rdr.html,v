head	1.49;
access;
symbols;
locks; strict;
comment	@# @;


1.49
date	2016.09.19.23.44.47;	author tj;	state Exp;
branches;
next	1.48;
commitid	P53AgOpLKrOmgs5r;

1.48
date	2016.08.15.02.22.14;	author tb;	state Exp;
branches;
next	1.47;
commitid	3DeixV5YkPOb78RN;

1.47
date	2016.08.14.15.21.18;	author tb;	state Exp;
branches;
next	1.46;
commitid	p45GRXRN7v62aGwm;

1.46
date	2016.06.16.14.43.13;	author tj;	state Exp;
branches;
next	1.45;
commitid	pMV5DWzWKqxeLhRD;

1.45
date	2016.06.13.17.58.25;	author tj;	state Exp;
branches;
next	1.44;
commitid	Grx2UyJPWzJbbhkP;

1.44
date	2016.04.18.19.07.50;	author tj;	state Exp;
branches;
next	1.43;
commitid	g0cUF3jNn5Tz4oaZ;

1.43
date	2016.04.16.00.30.41;	author tj;	state Exp;
branches;
next	1.42;
commitid	rTxoenHHaeutOff1;

1.42
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.41;
commitid	jwteSMEb4rFzI8UA;

1.41
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.40;
commitid	4Y8oU6GBrSY1UOfW;

1.40
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.39;
commitid	hi2ObFv9LGB98JY5;

1.39
date	2016.03.22.10.56.56;	author sthen;	state Exp;
branches;
next	1.38;
commitid	G2izHhNJ7aqR0Y6j;

1.38
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.37;
commitid	zEx6zFkNSFFExu0v;

1.37
date	2015.07.02.05.49.05;	author bentley;	state Exp;
branches;
next	1.36;
commitid	AP3UllesavMDEUhQ;

1.36
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.35;
commitid	wRrXxcro6dFYiwF8;

1.35
date	2014.12.01.10.01.07;	author bentley;	state Exp;
branches;
next	1.34;
commitid	DtrOVs7q8kqgEsjm;

1.34
date	2014.07.30.21.57.19;	author sthen;	state Exp;
branches;
next	1.33;
commitid	632wqensvvuAHAOA;

1.33
date	2014.06.24.13.42.23;	author sthen;	state Exp;
branches;
next	1.32;
commitid	lNk1kOIOTb9J7iWf;

1.32
date	2014.03.31.02.33.07;	author nick;	state Exp;
branches;
next	1.31;

1.31
date	2011.05.09.17.04.58;	author sthen;	state Exp;
branches;
next	1.30;

1.30
date	2010.05.24.12.13.15;	author sthen;	state Exp;
branches;
next	1.29;

1.29
date	2010.05.19.13.25.16;	author sthen;	state Exp;
branches;
next	1.28;

1.28
date	2009.06.22.10.40.04;	author sthen;	state Exp;
branches;
next	1.27;

1.27
date	2007.05.06.18.59.54;	author nick;	state Exp;
branches;
next	1.26;

1.26
date	2006.11.01.01.56.01;	author joel;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.01.00.54.29;	author nick;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.01.11.35.18;	author nick;	state Exp;
branches;
next	1.23;

1.23
date	2005.06.12.18.14.50;	author joel;	state Exp;
branches;
next	1.22;

1.22
date	2005.05.20.00.12.02;	author joel;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.22.04.28.16;	author david;	state Exp;
branches;
next	1.20;

1.20
date	2004.12.01.09.50.20;	author saad;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.01.05.49.26;	author saad;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.01.05.47.33;	author saad;	state Exp;
branches;
next	1.17;

1.17
date	2004.10.29.17.22.57;	author nick;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.07.01.55.24;	author nick;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.30.18.00.25;	author nick;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.22.16.10.55;	author nick;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.12.04.13.06;	author nick;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.01.04.16.17;	author nick;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.27.15.08.25;	author nick;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.09.23.29.02;	author nick;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.22.02.29.03;	author nick;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.16.01.23.49;	author nick;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.26.23.41.26;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.09.16.42.35;	author nick;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.13.02.54.08;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.15.03.03.54;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.13.17.37.08;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.05.22.29.34;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.01.01.46.06;	author nick;	state Exp;
branches;
next	;


desc
@@


1.49
log
@less "$ext_if" and more egress to simplify example rulesets.
zap some stray <p> tags while here.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD PF: Traffic Redirection (Port Forwarding)</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/pf/rdr.html">
</head>

<!--
Copyright (c) 2003, Nick Holland <nick@@openbsd.org>
Copyright (c) 2003-2005, Joel Knight <enabled@@myrealbox.com>

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<body bgcolor="#ffffff" text="#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">PF - Traffic Redirection (Port Forwarding)</font>
<small>
<a href="index.html" style="font-weight:normal; float:right">[Contents]</a>
</small>
</h2>
<hr>

<ul>
  <li><a href="#intro"        >Introduction</a>
  <li><a href="#filter"       >Redirection and packet filtering</a>
  <li><a href="#security"     >Security implications</a>
  <li><a href="#reflect"      >Redirection and reflection</a>
    <ul>
      <li><a href="#splitdns" >Split-horizon DNS</a>
      <li><a href="#sepnet"   >Moving the server into a separate local
                               network</a>
      <li><a href="#tcpproxy" >TCP proxying</a>
      <li><a href="#rdrnat"   >RDR-TO and NAT-TO combination</a>
    </ul>
</ul>

<hr>

<a name="filter"></a><h2 id="intro">Introduction</h2>

When you have NAT running in your office, you have the entire internet
available to all your machines.
What if you have a machine behind the NAT gateway that needs to be accessed
from outside?
This is where redirection comes in.
Redirection allows incoming traffic to be sent to a machine behind the NAT
gateway.

<p>
Let's look at an example:

<blockquote><pre>
pass in on egress proto tcp from any to any port 80 rdr-to 192.168.1.20
</pre></blockquote>

This line redirects TCP port 80 (web server) traffic to a machine inside
the network at 192.168.1.20.
So, even though 192.168.1.20 is behind your gateway and inside your network,
the outside world can access it.

<p>
The <tt>from any to any</tt> part of the above <tt>rdr</tt> line can be quite
useful.
If you know what addresses or subnets are supposed to have access to the web
server at port 80, you can restrict them here:

<blockquote><pre>
pass in on egress proto tcp from 203.0.113.0/24 to any port 80 rdr-to 192.168.1.20
</pre></blockquote>

This will redirect only the specified subnet.
Note this implies you can redirect different incoming hosts to different
machines behind the gateway.
This can be quite useful as well.
For example, you could have users at remote sites access their own desktop
computers using the same port and IP address on the gateway as long as you
know the IP address they will be connecting from.

<blockquote><pre>
pass in on egress proto tcp from 203.0.113.14 to any port 80 rdr-to 192.168.1.20
pass in on egress proto tcp from 198.51.100.89 to any port 80 rdr-to 192.168.1.22
pass in on egress proto tcp from 198.51.100.178 to any port 80 rdr-to 192.168.1.23
</pre></blockquote>

A range of ports can also be redirected within the same rule:

<blockquote><pre>
pass in on egress proto tcp from any to any port 5000:5500 \
   rdr-to 192.168.1.20
pass in on egress proto tcp from any to any port 5000:5500 \
   rdr-to 192.168.1.20 port 6000
pass in on egress proto tcp from any to any port 5000:5500 \
   rdr-to 192.168.1.20 port 7000:*
</pre></blockquote>

These examples show ports 5000 to 5500 inclusive being redirected to
192.168.1.20.
In rule #1, port 5000 is redirected to 5000, 5001 to 5001, etc.
In rule #2, the entire port range is redirected to port 6000.
And in rule #3, port 5000 is redirected to 7000, 5001 to 7001, etc.

<h2 id="security">Security implications</h2>

Redirection does have security implications.
Punching a hole in the firewall to allow traffic into the internal, protected
network potentially opens up the internal machine to compromise.
If traffic is forwarded to an internal web server and a vulnerability is
discovered in the web server daemon, that machine can be compromised from
an intruder on the internet.
From there, the intruder has a doorway to the internal network, one that is
permitted to pass right through the firewall.

<p>
These risks can be minimized by keeping the externally accessed system
tightly confined on a separate network.
This network is often referred to as a Demilitarized Zone (DMZ) or a Private
Service Network (PSN).
This way, if the web server is compromised, the effects can be limited to
the DMZ/PSN network by careful filtering of the traffic permitted to and
from the DMZ/PSN.

<h2 id="reflect">Redirection and reflection</h2>

Often, redirection rules are used to forward incoming connections from
the internet to a local server with a private address in the internal
network or LAN, as in:

<blockquote><pre>
server = 192.168.1.40
pass in on egress proto tcp from any to egress port 80 rdr-to $server port 80
</pre></blockquote>

But when the redirection rule is tested from a client on the LAN, it doesn't
work.
The reason is that redirection rules apply only to packets that pass through
the specified interface (egress, the external interface, in the example).
Connecting to the external address of the firewall from a host on the LAN,
however, does not mean the packets will actually pass through its external
interface.
The TCP/IP stack on the firewall compares the destination address of incoming
packets with its own addresses and aliases and detects connections to itself
as soon as they have passed the internal interface.
Such packets do not physically pass through the external interface, and the
stack does not simulate such a passage in any way.
Thus, PF never sees these packets on the external interface, and the
redirection rule, specifying the external interface, does not apply.

<p>
Adding a second redirection rule for the internal interface does not have
the desired effect either.
When the local client connects to the external address of the firewall,
the initial packet of the TCP handshake reaches the firewall through the
internal interface.
The redirection rule does apply and the destination address gets replaced
with that of the internal server.
The packet gets forwarded back through the internal interface and reaches
the internal server.
But the source address has not been translated, and still contains the local
client's address, so the server sends its replies directly to the client.
The firewall never sees the reply and has no chance to properly reverse the
translation.
The client receives a reply from a source it never expected and drops it.
The TCP handshake then fails and no connection can be established.

<p>
Still, it's often desirable for clients on the LAN to connect to the
same internal server as external clients and to do so transparently.
There are several solutions for this problem:

<h3 id="splitdns">Split-horizon DNS</h3>

It's possible to configure DNS servers to answer queries from local
hosts differently than external queries so that local clients will
receive the internal server's address during name resolution.
They will then connect directly to the local server, and the firewall
isn't involved at all.
This reduces local traffic since packets don't have to be sent through
the firewall.

<h3 id="sepnet">Moving the server into a separate local network</h3>

Adding an additional network interface to the firewall and moving the
local server from the client's network into a dedicated network (DMZ)
allows redirecting of connections from local clients in the same way as
the redirection of external connections.
Use of separate networks has several advantages, including improving security
by isolating the server from the remaining local hosts.
Should the server (which in our case is reachable from the Internet) ever
become compromised, it can't access other local hosts directly as all
connections have to pass through the firewall.

<h3 id="tcpproxy">TCP proxying</h3>

A generic TCP proxy can be setup on the firewall, either listening on
the port to be forwarded or getting connections on the internal interface
redirected to the port it's listening on.
When a local client connects to the firewall, the proxy accepts the connection,
establishes a second connection to the internal server, and forwards data
between those two connections.

<h3 id="rdrnat">RDR-TO and NAT-TO combination</h3>

With an additional NAT rule on the internal interface, the lacking
source address translation described above can be achieved.

<blockquote><pre>
pass in on $int_if proto tcp from $int_net to egress port 80 rdr-to $server
pass out on $int_if proto tcp to $server port 80 received-on $int_if nat-to $int_if
</pre></blockquote>

This will cause the initial packet from the client to be translated
again when it's forwarded back through the internal interface, replacing
the client's source address with the firewall's internal address.
The internal server will reply back to the firewall, which can reverse both
NAT and RDR translations when forwarding to the local client.
This construct is rather complex as it creates two separate states for each
reflected connection.
Care must be taken to prevent the NAT rule from applying to other traffic,
for instance connections originating from external hosts (through other
redirections) or the firewall itself.
Note that the <tt>rdr-to</tt> rule above will cause the TCP/IP stack to see
packets arriving on the internal interface with a destination address
inside the internal network.

<p>
</body>
</html>
@


1.48
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@d76 1
a76 1
pass in on tl0 proto tcp from any to any port 80 rdr-to 192.168.1.20
d91 1
a91 1
pass in on tl0 proto tcp from 203.0.113.0/24 to any port 80 rdr-to 192.168.1.20
d103 3
a105 3
pass in on tl0 proto tcp from 203.0.113.14 to any port 80 rdr-to 192.168.1.20
pass in on tl0 proto tcp from 198.51.100.89 to any port 80 rdr-to 192.168.1.22
pass in on tl0 proto tcp from 198.51.100.178 to any port 80 rdr-to 192.168.1.23
d111 1
a111 1
pass in on tl0 proto tcp from any to any port 5000:5500 \
d113 1
a113 1
pass in on tl0 proto tcp from any to any port 5000:5500 \
d115 1
a115 1
pass in on tl0 proto tcp from any to any port 5000:5500 \
d153 1
a153 1
pass in on $ext_if proto tcp from any to $ext_if port 80 rdr-to $server port 80
d159 1
a159 2
the specified interface (<tt>$ext_if</tt>, the external interface, in the
example).
d230 1
a230 1
pass in on $int_if proto tcp from $int_net to $ext_if port 80 rdr-to $server
@


1.47
log
@use <blockquote><pre> instead of just <blockquote>

patch from Vinicius Zavam, thanks!
@
text
@d13 1
a13 1
<link rel="canonical" href="http://www.openbsd.org/faq/pf/rdr.html">
@


1.46
log
@remove some mentions of inetd and ftpd, replacing them with more modern
alternatives where applicable.

discussed with sthen tb
@
text
@d110 1
a110 1
<blockquote>
d117 1
a117 1
</blockquote>
d151 1
a151 1
<blockquote>
d154 1
a154 1
</blockquote>
@


1.45
log
@sync pf guide formatting with the main faq's style, fixing a few grammar
knits and broken links along the way.

input and ok tb
@
text
@a224 23
<p>
Simple proxies can be created using
<a href="http://man.openbsd.org/inetd">inetd(8)</a>
and <a href="http://man.openbsd.org/nc">nc(1)</a>.
The following <tt>/etc/inetd.conf</tt> entry creates a listening
socket bound to the loopback address (127.0.0.1) and port 5000.
Connections are forwarded to port 80 on server 192.168.1.10.
The forwarding is done by user "proxy."

<blockquote><pre>
127.0.0.1:5000 stream tcp nowait proxy /usr/bin/nc nc -w 20 192.168.1.10 80
</pre></blockquote>

The following redirection rule forwards port 80 on the internal
interface to the proxy:

<blockquote><pre>
pass in on $int_if proto tcp from $int_net to $ext_if port 80 rdr-to 127.0.0.1 port 5000
</pre></blockquote>

High-performance proxies may also be created with
<a href="http://man.openbsd.org/relayd">relayd(8)</a>.

@


1.44
log
@page titles and <title> should be the same.
@
text
@d4 5
a10 1
<meta name="description"   content="the OpenBSD FAQ page">
d47 11
a57 11
<li><a href="#intro"           >Introduction</a>
<li><a href="#filter"          >Redirection and Packet Filtering</a>
<li><a href="#security"        >Security Implications</a>
<li><a href="#reflect"         >Redirection and Reflection</a>
	<ul>
	<li><a href="#splitdns">Split-Horizon DNS</a>
	<li><a href="#sepnet"  >Moving the Server Into a Separate Local
	                        Network</a>
	<li><a href="#tcpproxy">TCP Proxying</a>
	<li><a href="#rdrnat"  >RDR-TO and NAT-TO Combination</a>
	</ul>
d62 9
a70 7
<a name="filter"></a>
<h2 id="intro">Introduction</h2>
When you have NAT running in your office you have the entire Internet
available to all your machines.  What if you have a machine behind the
NAT gateway that needs to be accessed from outside?  This is where
redirection comes in.  Redirection allows incoming traffic to be sent to
a machine behind the NAT gateway.
d74 2
a75 2
<blockquote>
<tt>
d77 1
a77 2
</tt>
</blockquote>
a78 1
<p>
d80 27
a106 2
the network at 192.168.1.20.  So, even though 192.168.1.20 is behind
your gateway and inside your network, the outside world can access it.
d108 1
a108 29
<p>
The <tt>from any to any</tt> part of the above <tt>rdr</tt> line can
be quite useful. If you know what addresses or subnets are supposed
to have access to the web server at port 80, you can restrict them
here:
<blockquote>
<tt>
pass in on tl0 proto tcp from 203.0.113.0/24 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20
</tt>
</blockquote>

<p>
This will redirect only the specified subnet.  Note this implies you can
redirect different incoming hosts to different machines behind the
gateway. This can be quite useful. For example, you could have users
at remote sites access their own desktop computers using the same
port and IP address on the gateway as long as you know the IP address
they will be connecting from:
<blockquote>
<tt>
pass in on tl0 proto tcp from 203.0.113.14 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20<br>
pass in on tl0 proto tcp from 198.51.100.89 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.22<br>
pass in on tl0 proto tcp from 198.51.100.178 to any port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.23
</tt>
</blockquote>
a109 2
<p>
A range of ports can also be redirected within the same rule:
d111 6
a116 8
<tt>
pass in on tl0 proto tcp from any to any port 5000:5500 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20<br>
pass in on tl0 proto tcp from any to any port 5000:5500 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20 port 6000<br>
pass in on tl0 proto tcp from any to any port 5000:5500 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 192.168.1.20 port 7000:*<br>
</tt>
a118 1
<p>
d125 10
a134 9
<h2 id="security">Security Implications</h2>
Redirection does have security implications. Punching a hole in the
firewall to allow traffic into the internal, protected network
potentially opens up the internal machine to compromise. If traffic is
forwarded to an internal web server for example, and a vulnerability is
discovered in the web server daemon or in a CGI script run on the web
server, then that machine can be compromised from an intruder on the
Internet. From there, the intruder has a doorway to the internal
network, one that is permitted to pass right through the firewall.
d138 4
a141 3
tightly confined on a separate network. This network is often referred to
as a Demilitarized Zone (DMZ) or a Private Service Network (PSN). This
way, if the web server is compromised, the effects can be limited to
d145 2
a146 1
<h2 id="reflect">Redirection and Reflection</h2>
d148 1
a148 1
the Internet to a local server with a private address in the internal
d150 1
d152 2
a153 6
<tt>
server = 192.168.1.40<br>
<br>
pass in on $ext_if proto tcp from any to $ext_if port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to $server port 80
</tt>
d156 32
a187 30
<p>
But when the redirection rule is tested from a client on the LAN, it
doesn't work. The reason is that redirection rules apply only to
packets that pass through the specified interface (<tt>$ext_if</tt>,
the external interface, in the example).
Connecting to the external address of the
firewall from a host on the LAN, however, does not mean the packets will
actually pass through its external interface. The TCP/IP stack on the
firewall compares the destination address of incoming packets with its
own addresses and aliases and detects connections to itself as soon as
they have passed the internal interface. Such packets do not physically
pass through the external interface, and the stack does not simulate
such a passage in any way. Thus, PF never sees these packets on the
external interface, and the redirection rule, specifying the external
interface, does not apply.

<p>
Adding a second redirection rule for the internal interface does not
have the desired effect either. When the local client connects to the
external address of the firewall, the initial packet of the TCP
handshake reaches the firewall through the internal interface. The
redirection rule does apply and the destination address gets replaced
with that of the internal server. The packet gets forwarded back through
the internal interface and reaches the internal server. But the source
address has not been translated, and still contains the local client's
address, so the server sends its replies directly to the client. The
firewall never sees the reply and has no chance to properly reverse the
translation. The client receives a reply from a source it never
expected and drops it. The TCP handshake then fails and no connection
can be established.
d194 1
a194 1
<h3 id="splitdns">Split-Horizon DNS</h3>
a195 1
<p>
d198 5
a202 4
receive the internal server's address during name resolution. They will
then connect directly to the local server, and the firewall isn't
involved at all. This reduces local traffic since packets don't have to
be sent through the firewall.
d204 1
a204 1
<h3 id="sepnet">Moving the Server Into a Separate Local Network</h3>
a205 1
<p>
d209 6
a214 6
the redirection of external connections. Use of separate networks has
several advantages, including improving security by isolating the server
from the remaining local hosts. Should the server (which in our case is
reachable from the Internet) ever become compromised, it can't access
other local hosts directly as all connections have to pass through the
firewall.
d216 1
a216 1
<h3 id="tcpproxy">TCP Proxying</h3>
a217 1
<p>
d219 5
a223 5
the port to be forwarded or getting connections on the internal
interface redirected to the port it's listening on. When a local client
connects to the firewall, the proxy accepts the connection, establishes
a second connection to the internal server, and forwards data between
those two connections.
d227 3
a229 4
<a href="http://man.openbsd.org/inetd.8"
>inetd(8)</a> and
<a href="http://man.openbsd.org/nc.1"
>nc(1)</a>. The following <tt>/etc/inetd.conf</tt> entry creates a listening
d232 5
a236 7
The forwarding is done by user "proxy".
<blockquote>
<tt>
127.0.0.1:5000 stream tcp nowait proxy /usr/bin/nc nc -w \<br>
&nbsp;&nbsp;&nbsp;20 192.168.1.10 80
</tt>
</blockquote>
a237 1
<p>
d240 4
a243 6
<blockquote>
<tt>
pass in on $int_if proto tcp from $int_net to $ext_if port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to 127.0.0.1 port 5000
</tt>
</blockquote>
d246 1
a246 2
<a href="http://man.openbsd.org/relayd.8"
>relayd(8)</a>.
d248 1
a248 1
<h3 id="rdrnat">RDR-TO and NAT-TO Combination</h3>
a249 1
<p>
a251 8
<blockquote>
<tt>
pass in on $int_if proto tcp from $int_net to $ext_if port 80 \<br>
&nbsp;&nbsp;&nbsp;rdr-to $server<br>
pass out on $int_if proto tcp to $server port 80 \<br>
&nbsp;&nbsp;&nbsp;received-on $int_if nat-to $int_if
</tt>
</blockquote>
d253 5
a257 1
<p>
d260 9
a268 8
the client's source address with the firewall's internal address. The
internal server will reply back to the firewall, which can reverse both
NAT and RDR translations when forwarding to the local client. This
construct is rather complex as it creates two separate states for each
reflected connection. Care must be taken to prevent the NAT rule from
applying to other traffic, for instance connections originating from
external hosts (through other redirections) or the firewall itself. Note
that the <tt>rdr-to</tt> rule above will cause the TCP/IP stack to see
@


1.43
log
@tweak [faq index] button and sync the pf user's guide with that style.
@
text
@d4 1
a4 1
<title>PF - Traffic Redirection (Port Forwarding)</title>
@


1.42
log
@use short form man links in the faq and fix a few broken links
@
text
@a30 2
<!-- Passes validator.w3.org, please keep it this way;
please, use a max of 72 chars per line -->
d36 3
a40 5
<p>
[<a href="index.html">Contents</a>]
[<a href="nat.html">Previous: Network Address Translation</a>]
[<a href="shortcuts.html">Next: Shortcuts For Creating Rulesets</a>]
<p>
a41 1
<h3>Table of Contents</h3>
d43 4
a46 4
<li><a href="#intro">Introduction</a>
<li><a href="#filter">Redirection and Packet Filtering</a>
<li><a href="#security">Security Implications</a>
<li><a href="#reflect">Redirection and Reflection</a>
d49 2
a50 2
	<li><a href="#sepnet">Moving the Server Into a Separate Local
	Network</a>
d52 1
a52 1
	<li><a href="#rdrnat">RDR-TO and NAT-TO Combination</a>
a285 5

<p>
[<a href="nat.html">Previous: Network Address Translation</a>]
[<a href="index.html">Contents</a>]
[<a href="shortcuts.html">Next: Shortcuts For Creating Rulesets</a>]
@


1.41
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d236 1
a236 1
<a href="http://man.openbsd.org/?query=inetd&amp;sektion=8"
d238 1
a238 1
<a href="http://man.openbsd.org/?query=nc&amp;sektion=1"
d261 1
a261 1
<a href="http://man.openbsd.org/?query=relayd&amp;sektion=8"
@


1.40
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d4 1
a4 1
<title>PF: Traffic Redirection (Port Forwarding)</title>
d34 1
d36 4
a39 2
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif" border="0">
</a>
d41 1
a42 1
[<a href="index.html">Contents</a>]
d44 1
a44 4

<h1><font color="#e00000">PF: Redirection (Port Forwarding)</font></h1>

<hr>
@


1.39
log
@fix URIs, the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@d7 2
@


1.38
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d234 1
a234 1
<a href="http://man.openbsd.org?query=inetd&amp;sektion=8"
d236 1
a236 1
<a href="http://man.openbsd.org?query=nc&amp;sektion=1"
d259 1
a259 1
<a href="http://man.openbsd.org?query=relayd&amp;sektion=8"
@


1.37
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d234 1
a234 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8"
d236 1
a236 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1"
d259 1
a259 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=relayd&amp;sektion=8"
@


1.36
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@a5 1
<meta name="resource-type" content="document">
a6 2
<meta name="keywords"      content="openbsd,faq,pf">
<meta name="distribution"  content="global">
@


1.35
log
@Convert the pf faq to use id="" instead of "a name=""></a>.
@
text
@d10 1
@


1.34
log
@Switch example addresses to the prefixes reserved for documentation in rfc5737.
From Sevan Janiyan, nick@@ ok
@
text
@a62 1
<a name="intro"></a>
d64 1
a64 1
<h2>Introduction</h2>
d134 1
a134 2
<a name="security"></a>
<h2>Security Implications</h2>
d152 1
a152 2
<a name="reflect"></a>
<h2>Redirection and Reflection</h2>
d201 1
a201 2
<a name="splitdns"></a>
<h3>Split-Horizon DNS</h3>
d211 1
a211 2
<a name="sepnet"></a>
<h3>Moving the Server Into a Separate Local Network</h3>
d224 1
a224 2
<a name="tcpproxy"></a>
<h3>TCP Proxying</h3>
d264 1
a264 2
<a name="rdrnat"></a>
<h3>RDR-TO and NAT-TO Combination</h3>
@


1.33
log
@explicitly specify "inet" in various nat-to rules where it's ambiguous
(plus minor whitespace cleanup)
@
text
@d92 1
a92 1
pass in on tl0 proto tcp from 27.146.49.0/24 to any port 80 \<br>
d106 1
a106 1
pass in on tl0 proto tcp from 27.146.49.14 to any port 80 \<br>
d108 1
a108 1
pass in on tl0 proto tcp from 16.114.4.89 to any port 80 \<br>
d110 1
a110 1
pass in on tl0 proto tcp from 24.2.74.178 to any port 80 \<br>
@


1.32
log
@
www@@ removal, normalize footers.
@
text
@d171 2
a172 2
packets that pass through the specified interface (<tt>$ext_if</tt>, 
the external interface, in the example). 
d202 1
a202 1
There are several solutions for this problem: 
d241 1
a241 1
Simple proxies can be created using 
d306 1
a306 1
</html> 
@


1.31
log
@Remove "In general, the previously mentioned solutions should be
used instead" advice about rdr-to & nat-to combination, this works
very well in practice.

(This page needs more work - TCP proxying via inetd and netcat is
not exactly webscale - but this is a start).
@
text
@a4 1
<link rev="made" href="mailto:www@@openbsd.org">
a304 6
<hr>
<a href="index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a> 
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
<br>
<small>$OpenBSD: rdr.html,v 1.30 2010/05/24 12:13:15 sthen Exp $</small>

@


1.30
log
@{rdr,nat} -> {rdr,nat}-to in section title
@
text
@a300 3
In general, the previously mentioned solutions should be used instead.

<p>
d310 1
a310 1
<small>$OpenBSD: rdr.html,v 1.29 2010/05/19 13:25:16 sthen Exp $</small>
@


1.29
log
@Update the PF faq for 4.7 changes.
@
text
@d58 1
a58 1
	<li><a href="#rdrnat">RDR and NAT Combination</a>
d272 1
a272 1
<h3>RDR and NAT Combination</h3>
d313 1
a313 1
<small>$OpenBSD: rdr.html,v 1.28 2009/06/22 10:40:04 sthen Exp $</small>
@


1.28
log
@"nobody" is reserved for NFS. Show people to use "proxy" instead for
the example where nc is run from inetd.conf. thib looked at this and
like me couldn't find a better uid in the default installation for
this purpose.  ok johan@@
@
text
@d65 1
d77 1
a77 1
rdr on tl0 proto tcp from any to any port 80 -&gt; 192.168.1.20
d93 2
a94 2
rdr on tl0 proto tcp from 27.146.49.0/24 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20
d107 6
a112 6
rdr on tl0 proto tcp from 27.146.49.14 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20<br>
rdr on tl0 proto tcp from 16.114.4.89 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.22<br>
rdr on tl0 proto tcp from 24.2.74.178 to any port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.23
d120 6
a125 6
rdr on tl0 proto tcp from any to any port 5000:5500 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20<br>
rdr on tl0 proto tcp from any to any port 5000:5500 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20 port 6000<br>
rdr on tl0 proto tcp from any to any port 5000:5500 -&gt; \<br>
&nbsp;&nbsp;&nbsp;192.168.1.20 port 7000:*<br>
a135 65
<a name="filter"></a>
<h2>Redirection and Packet Filtering</h2>
<font color="#ff0000">NOTE:</font> Translated packets must still pass
through the filter engine and will be blocked or passed based on the
filter rules that have been defined.

<p>
The <i>only</i> exception to this rule is when the <tt>pass</tt> keyword
is used within the <tt>rdr</tt> rule. In this case, the redirected
packets will pass statefully right through the filtering engine: the
filter rules won't be evaluated against these packets.
This is a handy shortcut to avoid adding <tt>pass</tt> filter rules for
each redirection rule.
Think of it as a normal <tt>rdr</tt> rule (with no <tt>pass</tt> keyword)
associated to a <tt>pass</tt> filter rule with the <tt>keep state</tt>
keyword.
However, if you want to enable more specific filtering options such as
<tt>synproxy</tt>, <tt>modulate state</tt>, etc. you'll still have to
use a dedicate <tt>pass</tt> rule as these options don't fit into
redirection rules.

<p>
Also be aware that since translation occurs <i>before</i> filtering, the
filter engine will see the <i>translated</i> packet as it looks after
it's had its destination IP address and/or destination port changed to
match the redirection address/port specified in the <tt>rdr</tt> rule.
Consider this scenario:

<ul>
<li>192.0.2.1 - host on the Internet
<li>24.65.1.13 - external address of OpenBSD router
<li>192.168.1.5 - internal IP address of web server
</ul>

<p>
Redirection rule:
<blockquote>
<tt>
rdr on tl0 proto tcp from 192.0.2.1 to 24.65.1.13 port 80 \<br>
&nbsp;&nbsp;&nbsp;-&gt; 192.168.1.5 port 8000
</tt>
</blockquote>

<p>
Packet before the <tt>rdr</tt> rule is processed:
<ul>
<li>Source address: 192.0.2.1
<li>Source port: 4028 (arbitrarily chosen by the operating system)
<li>Destination address: 24.65.1.13
<li>Destination port: 80
</ul>

<p>
Packet after the <tt>rdr</tt> rule is processed:
<ul>
<li>Source address: 192.0.2.1
<li>Source port: 4028
<li>Destination address: 192.168.1.5
<li>Destination port: 8000
</ul>

<p>
The filter engine will see the IP packet as it looks after translation
has taken place.

d164 2
a165 2
rdr on $ext_if proto tcp from any to $ext_if port 80 -&gt; $server \<br>
&nbsp;&nbsp;&nbsp;port 80
d262 2
a263 2
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;127.0.0.1 port 5000
d267 4
d279 4
a282 6
rdr on $int_if proto tcp from $int_net to $ext_if port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;$server
<br>
no nat on $int_if proto tcp from $int_if to $int_net<br>
nat on $int_if proto tcp from $int_net to $server port 80 -&gt; \<br>
&nbsp;&nbsp;&nbsp;$int_if
d296 1
a296 1
that the <tt>rdr</tt> rule above will cause the TCP/IP stack to see
d313 1
a313 1
<small>$OpenBSD: rdr.html,v 1.27 2007/05/06 18:59:54 nick Exp $</small>
@


1.27
log
@
manpath changes to:
  4.1 for PF related items
  removed for non-PF-related items, which will probably either not
    change much, or benefit from the newest, best man pages.
@
text
@d313 1
d316 1
a316 1
127.0.0.1:5000 stream tcp nowait nobody /usr/bin/nc nc -w \<br>
d375 1
a375 1
<small>$OpenBSD: rdr.html,v 1.26 2006/11/01 01:56:01 joel Exp $</small>
@


1.26
log
@Updates for OpenBSD 4.0. uRPF, tftp-proxy, more ftp-proxy, etc.
Thanks to mcbride for the bits about interface groups
@
text
@d307 1
a307 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+4.0"
d309 1
a309 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+4.0"
d374 1
a374 1
<small>$OpenBSD: rdr.html,v 1.25 2006/05/01 00:54:29 nick Exp $</small>
@


1.25
log
@
3.9 updates, mostly rev'ing man page links
@
text
@d307 1
a307 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.9"
d309 1
a309 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.9"
d374 1
a374 1
<small>$OpenBSD: rdr.html,v 1.24 2005/11/01 11:35:18 nick Exp $</small>
@


1.24
log
@
bump manpath= tag for 3.8
@
text
@d307 1
a307 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.8"
d309 1
a309 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.8"
d374 1
a374 1
<small>$OpenBSD: rdr.html,v 1.23 2005/06/12 18:14:50 joel Exp $</small>
@


1.23
log
@Mention how redirection of port ranges works
@
text
@d307 1
a307 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.7"
d309 1
a309 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.7"
d374 1
a374 1
<small>$OpenBSD: rdr.html,v 1.22 2005/05/20 00:12:02 joel Exp $</small>
@


1.22
log
@Updates for OpenBSD 3.7.
@
text
@d15 1
a15 1
Copyright (c) 2003, 2004, Joel Knight <enabled@@myrealbox.com>
d115 20
d374 1
a374 1
<small>$OpenBSD: rdr.html,v 1.21 2004/12/22 04:28:16 david Exp $</small>
@


1.21
log
@make small title logo a link back to main page; ok nick@@
@
text
@d287 1
a287 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.6"
d289 1
a289 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.6"
d354 1
a354 1
<small>$OpenBSD: rdr.html,v 1.20 2004/12/01 09:50:20 saad Exp $</small>
@


1.20
log
@bad me, forgot to close correctly some <tt> tags ...
@
text
@d35 3
a37 1
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif">
d354 1
a354 1
<small>$OpenBSD: rdr.html,v 1.19 2004/12/01 05:49:26 saad Exp $</small>
@


1.19
log
@consistency tweaks
@
text
@d124 1
a124 1
This is a handy shortcut to avoid adding <tt>pass<tt> filter rules for
d126 1
a126 1
Think of it as a normal <tt>rdr<tt> rule (with no <tt>pass</tt> keyword)
d352 1
a352 1
<small>$OpenBSD: rdr.html,v 1.18 2004/12/01 05:47:33 saad Exp $</small>
@


1.18
log
@clarify the meaning of an rdr rule with the pass keyword. most of it
from an excellent explanation given by dhartmei@@. ok joel and nick@@
@
text
@d124 2
a125 2
This is a handy shortcut to avoid adding pass rules for each redirection
rule.
d352 1
a352 1
<small>$OpenBSD: rdr.html,v 1.17 2004/10/29 17:22:57 nick Exp $</small>
@


1.17
log
@
Update for 3.6
@
text
@d118 2
d121 12
a132 2
is used within the <tt>rdr</tt> rule; this will cause the redirected
packets to pass right through the filtering engine. 
d352 1
a352 1
<small>$OpenBSD: rdr.html,v 1.16 2004/05/07 01:55:24 nick Exp $</small>
@


1.16
log
@
Add an OpenBSD license to the PF User's Guide.
Concept and breakdown of copyrights agreed to by Joel Knight and myself,
license assistance millert@@, ok deraadt@@.
@
text
@d273 1
a273 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.5"
d275 1
a275 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.5"
d340 1
a340 1
<small>$OpenBSD: rdr.html,v 1.15 2004/04/30 18:00:25 nick Exp $</small>
@


1.15
log
@
PF User's Guide updates for OpenBSD 3.5.
Work done by Joel Knight (enabled et myrealbox.dit com), many, many thanks
to him for providing and maintaining some darned good docs.
@
text
@a10 1
<meta name="copyright"     content="This document copyright 2002-2004 by OpenBSD.">
d13 18
d340 1
a340 1
<small>$OpenBSD: rdr.html,v 1.14 2004/03/22 16:10:55 nick Exp $</small>
@


1.14
log
@
Disabling redirects is obsolete since ..uh.. 3.3.  kick and ok cedric@@
@
text
@d256 1
a256 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.4"
d258 1
a258 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.4"
d323 1
a323 1
<small>$OpenBSD: rdr.html,v 1.13 2004/03/12 04:13:06 nick Exp $</small>
@


1.13
log
@
"port" missing, closes PR3708, from michelfc at creditmutuel3d dit com.
@
text
@d308 1
a308 10
inside the internal network. To prevent the stack from issuing ICMP
redirect messages (telling the client that its destination is reachable
directly, breaking the reflection), disable redirects on the gateway,
using
<blockquote>
<tt>
# sysctl -w net.inet.ip.redirect=0<br>
# sysctl -w net.inet6.ip6.redirect=0 <i>(if using IPv6)</i>
</tt>
</blockquote>
d323 1
a323 1
<small>$OpenBSD: rdr.html,v 1.12 2004/01/01 04:16:17 nick Exp $</small>
@


1.12
log
@
Bump copyright to 2004
@
text
@d123 1
a123 1
&nbsp;&nbsp;&nbsp;-&gt; 192.168.1.5 8000
d332 1
a332 1
<small>$OpenBSD: rdr.html,v 1.11 2003/11/27 15:08:25 nick Exp $</small>
@


1.11
log
@
Major update to the PF FAQ from "Mr. PF FAQ", Joel Knight.  THANKS!
@
text
@d11 1
a11 1
<meta name="copyright"     content="This document copyright 2002-2003 by OpenBSD.">
d332 1
a332 1
<small>$OpenBSD: rdr.html,v 1.10 2003/11/09 23:29:02 nick Exp $</small>
@


1.10
log
@
Update of PF User's Guide to 3.4.  Ok, really just pointing the man page
links at the 3.4-release man pages rather than the 3.3-release man pages.
Work by Joel Knight.
@
text
@d4 1
a4 1
<title>PF: Traffic Redirection</title>
d22 1
a22 1
[<a href="filter.html">Next: Packet Filtering</a>]
d24 1
a24 1
<h1><font color="#e00000">PF: Redirection (<tt>rdr</tt>)</font></h1>
d98 14
a111 6
Be aware that packets matching an <tt>rdr</tt> rule still must pass
through the filtering engine and will be blocked or passed based on the
filter rules that have been defined. Also be aware that packets matching
an <tt>rdr</tt> rule will have their destination IP address and/or
destination port changed to match the redirection address/port specified
in the <tt>rdr</tt> rule.  Consider this scenario:
d146 2
a147 2
The filtering engine will see the IP packet as it looks after
<tt>rdr</tt> rules have been processed.
d185 3
a187 2
packets that pass through the specified interface ($ext_if, the external
interface, in the example). Connecting to the external address of the
d325 1
a325 1
[<a href="filter.html">Next: Packet Filtering</a>]
d332 1
a332 1
<small>$OpenBSD: rdr.html,v 1.9 2003/09/22 02:29:03 nick Exp $</small>
@


1.9
log
@
From Joel Knight: changes formatting so that all keywords are
in <i>, all literals are in <tt>, etc.  Excess man page links removed.
No words were changed.
@
text
@d247 1
a247 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.3"
d249 1
a249 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.3"
d323 1
a323 1
<small>$OpenBSD: rdr.html,v 1.8 2003/09/16 01:23:49 nick Exp $</small>
@


1.8
log
@
Grammar and punctuation clean up, from Joel Knight.
Only a very few words changed.
@
text
@d15 2
d323 1
a323 1
<small>$OpenBSD: rdr.html,v 1.7 2003/07/26 23:41:26 nick Exp $</small>
@


1.7
log
@
From Joel Knight: illustrate how the destination port is also changed.
@
text
@d33 1
a33 1
	<li><a href="#splitdns">Split-horizon DNS</a>
d45 1
a45 1
When you have NAT running in your office, you have the entire Internet
d66 1
a66 1
be quite useful -- if you know what addresses or subnets are supposed
d142 1
a142 1
firewall to allow traffic into the internal, protected network,
d180 1
a180 1
own addresses and aliases, and detects connections to itself as soon as
d199 1
a199 1
expected, and drops it. The TCP handshake then fails and no connection
d208 1
a208 1
<h3>Split-horizon DNS</h3>
d215 1
a215 1
involved at all. This reduces local traffic, since packets don't have to
d229 1
a229 1
other local hosts directly, as all connections have to pass through the
d291 1
a291 1
construct is rather complex, as it creates two separate states for each
d321 1
a321 1
<small>$OpenBSD: rdr.html,v 1.6 2003/07/09 16:42:35 nick Exp $</small>
@


1.6
log
@
Missing word.  From Joel Knight.
@
text
@d99 3
a101 3
an <tt>rdr</tt> rule will have their destination IP address changed to
match the redirection address specified in the <tt>rdr</tt> rule.
Consider this scenario:
d112 2
a113 1
rdr on tl0 proto tcp from 192.0.2.1 to any port 80 -&gt; 192.168.1.5
d121 1
d123 1
d130 1
d132 1
d321 1
a321 1
<small>$OpenBSD: rdr.html,v 1.4 2003/05/15 03:03:54 nick Exp $</small>
@


1.5
log
@
Improved wrapping of man page links, renders better on some browsers.
No words altered.  From Joel Knight.
@
text
@d287 1
a287 1
reflected connection. Care must taken to prevent the NAT rule from
@


1.4
log
@
Table of Contents now on each page.  Work by Joel Knight (yay! Joel! 8-).
@
text
@d240 4
a243 4
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=inetd&amp;sektion=8&amp;manpath=OpenBSD+3.3">
inetd(8)</a> and
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=nc&amp;sektion=1&amp;manpath=OpenBSD+3.3">
nc(1)</a>. The following <tt>/etc/inetd.conf</tt> entry creates a listening
d316 1
a316 1
<small>$OpenBSD: rdr.html,v 1.3 2003/05/13 17:37:08 nick Exp $</small>
@


1.3
log
@
Wording improvements and corrections from Joel Knight
@
text
@d23 18
d43 2
a44 1
<p>
d94 2
a95 1
<p>
d202 2
a203 2
<p>
<b>Split horizon DNS</b>
d213 2
a214 2
<p>
<b>Moving the server into a separate local network</b>
d227 2
a228 2
<p>
<b>TCP proxying</b>
d263 2
a264 2
<p>
<b>RDR and NAT combination</b>
d316 1
a316 1
<small>$OpenBSD: rdr.html,v 1.2 2003/05/05 22:29:34 nick Exp $</small>
@


1.2
log
@
change "wait" to "nowait", problem spotted by Otto Moerbeek
)otto at drijf dot net(.  Verified by dhartmie@@.
@
text
@d79 3
a81 3
an <tt>rdr</tt> rule will have their source IP address changed to match
the redirection address specified in the <tt>rdr</tt> rule.  Consider
this scenario:
d97 1
a97 1
Before the <tt>rdr</tt> rule is processed:
d99 2
a100 2
<li>Source IP: 192.0.2.1
<li>Destination IP: 24.65.1.13
d104 1
a104 1
After the <tt>rdr</tt> rule is processed:
d106 2
a107 2
<li>Source IP: 192.0.2.1
<li>Destination IP: 192.168.1.5
d296 1
a296 1
<small>$OpenBSD: rdr.html,v 1.1 2003/05/01 01:46:06 nick Exp $</small>
@


1.1
log
@
The long awaited, new PF FAQ!
Most of it written by Joel Knight >enabled at myrealbox dot com<,
some parts by me, a few parts yanked out of the old PF FAQ.
GREAT work, Joel!
@
text
@d228 1
a228 1
127.0.0.1:5000 stream tcp wait nobody /usr/bin/nc nc -w \<br>
d296 1
a296 1
<small>$OpenBSD$</small>
@

