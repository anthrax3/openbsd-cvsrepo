head	1.69;
access;
symbols
	sthen_20090618:1.1.1.1 sthen:1.1.1;
locks; strict;
comment	@# @;


1.69
date	2017.07.05.16.11.03;	author tb;	state Exp;
branches;
next	1.68;
commitid	vtoXncMk9pqtOchG;

1.68
date	2017.06.26.17.18.58;	author tb;	state Exp;
branches;
next	1.67;
commitid	jKVBuSx5No9bUpg1;

1.67
date	2017.06.02.13.59.15;	author schwarze;	state Exp;
branches;
next	1.66;
commitid	lCz2kLjgLNF7OdHC;

1.66
date	2017.06.01.19.38.43;	author schwarze;	state Exp;
branches;
next	1.65;
commitid	NJ7xFBulLUCajpGh;

1.65
date	2017.06.01.17.20.54;	author tb;	state Exp;
branches;
next	1.64;
commitid	ryRhLutMOpxuOcj3;

1.64
date	2017.06.01.17.15.00;	author tb;	state Exp;
branches;
next	1.63;
commitid	NzJkbvtDjUTnUzKj;

1.63
date	2017.06.01.14.12.23;	author tb;	state Exp;
branches;
next	1.62;
commitid	W6aBH0k52faRoxkg;

1.62
date	2017.06.01.14.00.55;	author schwarze;	state Exp;
branches;
next	1.61;
commitid	45eXA0jfr0ta8HwO;

1.61
date	2017.04.13.18.29.43;	author tb;	state Exp;
branches;
next	1.60;
commitid	22mgFiW6uEuy92NC;

1.60
date	2017.04.12.20.24.17;	author schwarze;	state Exp;
branches;
next	1.59;
commitid	5W4TihzotARPLLuz;

1.59
date	2017.04.12.20.18.24;	author schwarze;	state Exp;
branches;
next	1.58;
commitid	ZoBvbbKJzLgY16cm;

1.58
date	2017.04.09.21.46.10;	author schwarze;	state Exp;
branches;
next	1.57;
commitid	YqYRQEIhCVwRMPJz;

1.57
date	2017.03.25.18.03.37;	author tb;	state Exp;
branches;
next	1.56;
commitid	rL4ajudaGg7ru4hH;

1.56
date	2016.08.15.02.22.15;	author tb;	state Exp;
branches;
next	1.55;
commitid	3DeixV5YkPOb78RN;

1.55
date	2016.08.03.11.33.11;	author schwarze;	state Exp;
branches;
next	1.54;
commitid	WYRORvCUCge8tkiz;

1.54
date	2016.07.09.20.21.43;	author tb;	state Exp;
branches;
next	1.53;
commitid	lqAQpqNehmsSOA2U;

1.53
date	2016.06.16.18.26.12;	author tj;	state Exp;
branches;
next	1.52;
commitid	YxulLlh2ODeRIZ8i;

1.52
date	2016.04.17.21.31.53;	author tj;	state Exp;
branches;
next	1.51;
commitid	iIlpeQWLXUolwtTP;

1.51
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.50;
commitid	jwteSMEb4rFzI8UA;

1.50
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.49;
commitid	4Y8oU6GBrSY1UOfW;

1.49
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.48;
commitid	hi2ObFv9LGB98JY5;

1.48
date	2016.03.22.20.15.24;	author jca;	state Exp;
branches;
next	1.47;
commitid	Sp5FPEHv19xhHMVe;

1.47
date	2016.03.22.10.56.56;	author sthen;	state Exp;
branches;
next	1.46;
commitid	G2izHhNJ7aqR0Y6j;

1.46
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.45;
commitid	zEx6zFkNSFFExu0v;

1.45
date	2016.01.08.13.06.28;	author schwarze;	state Exp;
branches;
next	1.44;
commitid	BEzBLERgdROmlObX;

1.44
date	2015.07.02.05.49.05;	author bentley;	state Exp;
branches;
next	1.43;
commitid	AP3UllesavMDEUhQ;

1.43
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.42;
commitid	wRrXxcro6dFYiwF8;

1.42
date	2014.12.01.09.59.33;	author bentley;	state Exp;
branches;
next	1.41;
commitid	KHeihOuepLNuLssG;

1.41
date	2014.11.10.09.29.52;	author sthen;	state Exp;
branches;
next	1.40;
commitid	5SVRX5sqq7WlHWXj;

1.40
date	2014.08.13.18.15.49;	author nick;	state Exp;
branches;
next	1.39;
commitid	3zkpG8zUmg7iTv9R;

1.39
date	2014.06.28.23.41.47;	author sthen;	state Exp;
branches;
next	1.38;
commitid	e2gheUgUHl0kCbLh;

1.38
date	2014.04.18.11.07.21;	author sthen;	state Exp;
branches;
next	1.37;

1.37
date	2014.04.05.21.41.06;	author sthen;	state Exp;
branches;
next	1.36;

1.36
date	2014.04.05.21.10.32;	author sthen;	state Exp;
branches;
next	1.35;

1.35
date	2014.01.24.09.48.59;	author schwarze;	state Exp;
branches;
next	1.34;

1.34
date	2014.01.15.10.22.25;	author jca;	state Exp;
branches;
next	1.33;

1.33
date	2014.01.14.08.53.07;	author zhuk;	state Exp;
branches;
next	1.32;

1.32
date	2013.11.12.11.13.31;	author sthen;	state Exp;
branches;
next	1.31;

1.31
date	2013.06.22.09.58.46;	author schwarze;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.03.21.49.17;	author jca;	state Exp;
branches;
next	1.29;

1.29
date	2012.10.10.08.50.07;	author rpe;	state Exp;
branches;
next	1.28;

1.28
date	2012.10.09.21.04.42;	author rpe;	state Exp;
branches;
next	1.27;

1.27
date	2012.10.09.20.36.20;	author rpe;	state Exp;
branches;
next	1.26;

1.26
date	2012.10.09.20.32.33;	author rpe;	state Exp;
branches;
next	1.25;

1.25
date	2012.09.20.06.08.41;	author rpe;	state Exp;
branches;
next	1.24;

1.24
date	2012.09.14.17.08.03;	author rpe;	state Exp;
branches;
next	1.23;

1.23
date	2012.09.14.15.44.03;	author ratchov;	state Exp;
branches;
next	1.22;

1.22
date	2012.09.12.20.03.00;	author rpe;	state Exp;
branches;
next	1.21;

1.21
date	2012.09.12.19.24.52;	author rpe;	state Exp;
branches;
next	1.20;

1.20
date	2012.01.26.08.16.15;	author ajacoutot;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.17.20.38.35;	author sthen;	state Exp;
branches;
next	1.18;

1.18
date	2011.05.22.13.03.21;	author schwarze;	state Exp;
branches;
next	1.17;

1.17
date	2011.05.21.21.05.05;	author schwarze;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.29.21.51.54;	author schwarze;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.21.21.37.38;	author ajacoutot;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.12.22.52.55;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.24.08.32.32;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2010.12.26.20.06.42;	author schwarze;	state Exp;
branches;
next	1.11;

1.11
date	2010.11.21.10.26.03;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.27.15.49.06;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.19.13.35.40;	author jim;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.23.21.44.48;	author steven;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.29.05.37.30;	author steven;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.29.05.35.38;	author steven;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.29.05.29.30;	author steven;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.24.09.28.47;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.18.21.40.26;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.18.21.33.28;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.18.16.20.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.06.18.16.20.42;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.69
log
@add a reminder to remove 'make depend' when we roll the faq to 6.2
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD Ports: Special Porting Topics</title>
<meta name= "description"   content= "OpenBSD Porting Guide">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/ports/specialtopics.html">
</head>

<body bgcolor= "#ffffff" text= "#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">Ports - Special Porting Topics</font>
<small>
<a href="index.html" style="font-weight:normal;float:right">[Handbook Index]</a>
</small>
</h2>
<hr>
<p>

<ul>
  <li><a href="#SharedLibs">Shared libraries</a>
  <li><a href="#Autoconf"  >GNU autoconf</a>
  <li><a href="#Config"    >Configuration files</a>
  <li><a href="#Audio"     >Audio applications</a>
  <li><a href="#Mandoc"    >Manual pages</a>
  <li><a href="#RcScripts" >rc.d(8) scripts</a>
</ul>

<hr>

<h2 id="SharedLibs">Shared libraries</h2>

<h3>Understanding shared libraries number rules</h3>
Shared libraries are a bit tricky for a variety of reasons.
You must understand the library naming scheme:
<tt>libfoo.so.major.minor</tt>.

<p>
When you link a program, the linker ld embeds that information in the created
binary.
You can see it with <a href="https://man.openbsd.org/ldd">ldd(1)</a>.
Later, when you run that program, the dynamic linker
<a href="https://man.openbsd.org/ld.so">ld.so(1)</a> uses that information to
find the right dynamic library:

<ul><li>
A library with the same exact major number is required.

<li>
A library with an equal or higher minor number is required.
</ul>

So, this means that <b>all</b> libraries with the same major number and an
equal or higher minor number <b>must satisfy the binary API that the program
expects</b>.
If they do not, then your port is broken.
Specifically, it will break when users try to update their system.

<p>
The rules for shared libraries are quite simple.

<ul><li>
If functions were added to the library, you must bump the library minor
number: a program that needs those functions has no way to require it except
by asking explicitly for at least this version.

<li>
If the existing API changes, that is, if any function signature is altered,
or if valid calling sequences are no longer valid, if a type changes in an
incompatible way, the library major number <b>must be bumped</b>.

<li>
This includes removing old functions.
Any function removal should trigger a major number bump.

<li>A good hint is to compare the output of

<blockquote><pre>
$ <b>nm -g oldlib.so.X.Y | cut -c10- | grep -e^T</b>
</pre></blockquote>

and

<blockquote><pre>
$ <b>nm -g newlib.so.X.Y | cut -c10- | grep -e^T</b>
</pre></blockquote>

This won't show if functions arguments type changed, but at least you'll see
quickly if some functions were added and/or removed.
</ul>

<p>
Sometimes, it happens that a library is written as several files, and that
internal functions happen to be visible to communicate between those files.
Those function names traditionally begin with an underscore, and are not
part of the API proper.

<h3>Tweaking ports builds to achieve the right names</h3>

Quite a few ports need tweaks to build shared libraries correctly anyways.
Remember that building shared libraries should be done with

<blockquote><pre>
$ <b>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</b>
</pre></blockquote>

Trying to rename the library after the fact to adjust the version number
does not work: ELF libraries use some extra magic to set the library
internal name, so you must link it with the correct version the first time.

<p>
On the other hand, remember that you can override <tt>Makefile</tt> variables
from the command line, by using <tt>MAKE_FLAGS</tt> in the port's
<tt>Makefile</tt>.
In some cases, the program you're porting will have a simple variable which
you can override by setting the library version in MAKE_FLAGS, for example
<tt>MAKE_FLAGS= SO_VERSION=${LIBfoo_VERSION}</tt>.
In others, the port will need to be patched to make use of such a variable.

<p>
The ports infrastructure already handles these details in libtool-based
and CMake-based ports.
For libtool, by default the version from the base OS is used, but in some
cases this is insufficient and <tt>USE_LIBTOOL=gnu</tt> can be set.
CMake is handled by using the <tt>cmake.port.mk</tt> module:
<tt>MODULES += devel/cmake</tt>.
In these cases, most details are handled automatically:

<ul><li>
<tt>SHARED_LIBS</tt> is examined and version numbers are automatically replaced.

<li>
Shared library building is logged in <tt>${WRKBUILD}/shared_libs.log</tt>,
which can be directly included in the port's <tt>Makefile</tt>.
</ul>

<h3>Avoid DT_SONAME hardcoding</h3>

Some ports use the <tt>-soname</tt> flag of
<a href="https://man.openbsd.org/ld">ld(1)</a> to override the library
specification in the DT_SONAME field.
Setting DT_SONAME is not a bug itself but is usually not desirable on
OpenBSD where <a href="https://man.openbsd.org/ld.so">ld.so(1)</a> is smart and
the ports tree takes care of library versioning.
Moreover, a wrong soname can result in unusable binaries that depend on this
library; either always or after some updates to the port containing the library.
To check if the DT_SONAME field is set, run the following command:

<blockquote><pre>
$ <b>objdump -x /path/to/libfoo.so.0.0 | fgrep SONAME</b>
  SONAME      libfoo.so.0.0
</pre></blockquote>

As a general rule, <em>setting soname explicitly should be patched out</em>.
The only exception is a situation when the right soname is recorded
<em>and</em> it's hard to patch soname-related code out <em>and</em>
upstream won't accept such a patch.
In that case the soname should fully match the file name (see the example
above).

<h3>Try putting all user visible libraries into /usr/local/lib</h3>

As a rule, requesting the user to add directories to their
<a href="https://man.openbsd.org/ldconfig">ldconfig(8)</a> path is a
very bad idea: all shared libraries that are linked directly to programs
should appear in <tt>/usr/local/lib</tt>.
However, it is quite possible to use a symbolic link to the actual library.
You should understand the library lookup rules:

<ul><li>
At build time, <a href="https://man.openbsd.org/ld">ld(1)</a> uses <tt>-L</tt>
flags to set up paths to look for libraries.
It stops looking as soon as it finds a library that matches its requirements.

<li>
At run time, <a href="https://man.openbsd.org/ld.so">ld.so(1)</a> uses the
information cached through
<a href="https://man.openbsd.org/ldconfig">ldconfig(8)</a> to find the required
library.
</ul>

So, let us assume you have two ports that provide two major versions of a
given library, say <tt>qt.1.45</tt> and <tt>qt.2.31</tt>.
Since both ports can be installed simultaneously, to make sure a given program
will link against <tt>qt.1</tt>, that library is provided as
<tt>/usr/local/lib/qt/libqt.so.1.45</tt>, and programs will be linked using

<blockquote><pre>
$ <b>ld -o program program.o -L/usr/local/lib/qt -lqt</b>
</pre></blockquote>

Similarly, a program that links with <tt>qt.2</tt> will use the
<tt>/usr/local/lib/qt2/libqt.so.2.31</tt> file with

<blockquote><pre>
$ <b>ld -o program program.o -L/usr/local/lib/qt2 -lqt</b>
</pre></blockquote>

To solve those libraries at run-time, a link called
<tt>/usr/local/lib/libqt.so.1.45</tt> and a link called
<tt>/usr/local/lib/libqt.so.2.31</tt> have been provided.
This is enough to satisfy <a href="https://man.openbsd.org/ld.so">ld.so(1)</a>.

<p>
It is an error to link a program using <tt>qt1</tt> with

<blockquote><pre>
$ <b>ld -o program program.o -L/usr/local/lib -lqt</b>
</pre></blockquote>

This code assumes that <tt>qt.2.31</tt> is not installed, which is
a wrong assumption.

<p>
Such tricks are only necessary in the rare cases of very pervasive
libraries where a transition period between major versions must be
provided.
In general, it is enough to make sure the library appears in
<tt>/usr/local/lib</tt>.

<h3>Writing library dependencies correctly</h3>

The new dependency code does need complete library dependencies.
You must use <tt>make lib-depends-check</tt> or
<tt>make port-lib-depends-check</tt> to verify a port does mention all
libraries it requires.
You just write them in <tt>LIB_DEPENDS</tt>/<tt>WANTLIB</tt> like this:

<blockquote><pre>
LIB_DEPENDS += x11/gtk+
WANTLIB += gtk&gt;=1.2 gdk&gt;=1.2
</pre></blockquote>

It is not an error to specify static libraries on a <tt>WANTLIB</tt> line as
well.
<tt>WANTLIB</tt>s are fully evaluated at package build time: the resulting
package will have library dependency information embedded as lines for ld.so
that hold the actual major.minor number that was used for building, and
nothing for static libraries.

<p>
In fact, providing <tt>LIB_DEPENDS</tt> lines even for static libraries is a
good idea.
This will simplify port update if a given dependency goes from a static library
to a shared library.

<p>
<tt>WANTLIB</tt> lines must specify the same paths that are used for ld.
With the same example as above, a standard <tt>qt2</tt> depends fragment would
say <tt>WANTLIB += lib/qt2/qt.=2</tt>.
This allows the dependency checking code to do the right thing when multiple
versions of the same library are encountered.

<h3>Updating ports correctly</h3>

So, when you update or add a port that involves shared libraries, a few details
must be done right.

<ul><li>
Make sure the shared libraries major.minor numbers are correct.

<li>
Verify all ports that depend on your port. Verify that they build correctly
with your changes.
Notify corresponding maintainers of the update, so that they can verify their
ports still run correctly.

<li>
You may have to adjust dependent ports <tt>WANTLIB</tt> and
<tt>LIB_DEPENDS</tt>.
If you introduce new shared libraries, watch out for <tt>BUILD_DEPENDS</tt>
that need to be turned into <tt>LIB_DEPENDS</tt>.

<li>
Whenever you introduce a new port, you should verify that you are not creating
a library that conflicts with an existing library: libraries from two ports
with the same name are deadly, because their version numbering schemes have
no chance to match.
You should try to solve the situation with the software author (for instance,
a library that is called libnet is definitely badly named).
<li>
Check <a href="guide.html#PortsUpdate">the ports update guidelines</a> for a
more extensive discussion.
</ul>

<h2 id="Autoconf">GNU autoconf</h2>

Autoconf is a GNU tool that is supposed to help in writing portable programs.
It is often used together with automake (portable makefiles) and libtool
(portable shared libraries).

<p>
Those tools do not work all that well, and often create specific challenges
in porting software to OpenBSD.

<h3>Detecting the use of autoconf in a piece of software</h3>

Quite a few software projects have configure scripts, and in most cases,
those scripts were generated by autoconf.
Such scripts have a line near the top that says:

<blockquote><pre>
# Generated automatically using autoconf version 2.13
</pre></blockquote>

or something similar.
The generation procedure is covered in a following section.
Most often, autoconf ports come with the generated scripts, and with the
source scripts that generated these.
The next section covers the simple case where you simply want to run the
generated script, and not modify it.
Make sure you read the section about trojan horses as well.

<h3>Running an autoconf configure script</h3>

This script is normally run during the configure stage of ports building.
To invoke the configure script, one only has to set
<tt>CONFIGURE_STYLE=	gnu</tt>
which will automatically invoke <tt>${WRKSRC}/configure</tt>.

<p>
If your configure script lies elsewhere, just set <tt>CONFIGURE_SCRIPT</tt> to
the right value.

<p>
Configure scripts often take a lot of arguments.
The default processing of the ports tree will only pass <tt>--prefix</tt> and
<tt>--sysconfdir</tt> to these.
Very old configure scripts don't understand <tt>--sysconfdir</tt>; you
can set <tt>CONFIGURE_STYLE=gnu old</tt> in such cases.

<p>
Similarly, some ports are not aware of <tt>DESTDIR</tt>.
Those ports will often accept setting <tt>prefix=${DESTDIR}/usr/local</tt>
without any issue, which can be done with <tt>CONFIGURE_STYLE=gnu dest</tt>.

<p>
Ports using autoconf and automake will have <tt>Makefile</tt>s with a specific
format that begins with a few standard locations:

<ul><li>
<tt>bindir</tt>: location for binaries
<li>
<tt>sysconfdir</tt>: location for configuration
<li>
<tt>includedir</tt>: location for include dirs
</ul>

If the configure script does not allow you to override these, you may
still be able to do it later on during the build or <tt>fake</tt> stage.
This does assume, of course, that the only reference to such a directory is with
in the generated <tt>Makefile</tt>.

<p>
For instance, a neat trick involves switching <tt>sysconfdir</tt> to
<tt>${PREFIX}/share/example/pkgname</tt> during the <tt>fake</tt> stage to get
default config files to package (since packages don't normally store files
under <tt>/etc</tt>).

<p>
Ports fully using autoconf and automake  may support building under a different
directory: try setting <tt>SEPARATE_BUILD=flavored</tt> and see if that works.
This would allow you to wipe the build tree without wiping the source tree, by
giving you separate <tt>${WRKSRC}</tt> and <tt>${WRKBUILD}</tt> locations.
In a few cases, separate builds may need to use gmake, where the rest of the
port is happy with bsd-make, in which case this is not worth it.

<p>
Automake will generate a few rules to rebuild all the generated scripts if
anything changes.
These often get in the way of OpenBSD specific patches.
For that reason, as soon as <tt>CONFIGURE_STYLE</tt> corresponds to autoconf
use, <tt>post-patch</tt> will touch various files in a specific order, so that
no automake dependencies get triggered later.
The list of dependencies is given in
<a href="https://man.openbsd.org/tsort">tsort(1)</a> order in a file mentioned in
<tt>REORDER_DEPENDENCIES</tt> (the default is
<tt>${PORTSDIR}/infrastructure/mk/automake.dep</tt>).

<h3>The mechanics of configure checks</h3>

The configure script first runs a fixed script called <tt>config.guess</tt>,
that will determine which system configure is running on.
<tt>config.guess</tt> does not vary from port to port and is a fixed script, so
the OpenBSD ports tree replaces it with a fixed version that knows about some
specific OpenBSD architectures.
Since most software packages come with bundled <tt>config.guess</tt>, and since
some of them are quite old, this is a necessary step.
If a software package contains more than one <tt>config.guess</tt>, you can
overwrite them all by setting <tt>MODGNU_CONFIG_GUESS_DIRS</tt> to the full list
of directories to process.

<p>
The configure script generated by autoconf then simply checks all functionality
on the existing system, by looking for a compiler, and running simple test
programs through it.
Since some of these tests are quite lengthy, the ports tree primes configure
with a <tt>CONFIG_SITE=config.site</tt> file.
Configure will look at the contents of that file first before running the tests.
A few configure scripts may have bugs that will prevent them from running
correctly in the presence of <tt>config.site</tt>.
Setting <tt>CONFIG_SITE</tt> to empty will weed out these kind of problems.

<p>
Most configure will auto-detect quite a few conditions.
It is very important to look at configure's options, at configure's output,
and at the generated <tt>config.log</tt> file: these will tell you what options
were found, and what options were not found.
This will allow you to find out when configure did not find a package that was
installed.

<p>
This will also tell you which optional packages configure would find.
In the ports tree, those are called hidden dependencies.
This is a bad thing: a hidden dependency is some extra package configure will
pick up if it's installed.
Then it will proceed in building a mutant package.
In some cases, the build will fail because of OpenBSD peculiarities.
In some cases, the package creation will fail, as some files will have different
names.
In some cases, the resulting package will be incorrect, as it will fail to
record any dependency on the optional package.
So looking at configure's output is one of the most important duty of
ports' maintainers.
Watch out for cascading tests: detecting a given feature may lead a configure
script to try out and find some dependent feature, so you will not see the
second feature in the configure output unless the first feature is triggered.

<p>
In case some hidden dependencies are found, some action should be taken.
The most simple action is to install the optional package, and see what
configure will do.
If it detects the package, one can either disable the detection (by using
configure options, or environment variables, or patching the configure script),
or verify that the build goes well and add the dependency to the list of
dependent packages.
A better choice is to figure out a reasonable set of default dependencies, and
then add some flavors to cover other common features.

<h3>Re-generating configure scripts</h3>

Configure scripts are normally generated from a <tt>configure.in</tt> file
(recent versions of autoconf use a <tt>configure.ac</tt> file instead).
A standard library of definitions is often available in an <tt>aclocal.m4</tt>.

<p>
In most cases, patching configure directly is a bad idea.
It is better to patch the <tt>configure.in</tt> file and get the ports tree to
call autoconf.
Good porters will endeavor to write <tt>configure.in</tt> changes that they can
feed to software authors.

<p>
Different versions of autoconf will produce distinct configure scripts.
<tt>autoconf-2.13</tt> is special: it was used over a fairly long period, and
there has been mutant versions of <tt>autoconf-2.13</tt> (actually, betas of a
newer autoconf) in wide use.
Hence, using <tt>autoconf-2.13</tt> will often not produce the exact same
configure script.

<p>
Since having several autoconf versions around at the same time is useful,
the autoconf script actually available in the ports tree is part of a port
called metaauto.
Which autoconf script actually gets called is controlled through the
environment variable <tt>AUTOCONF_VERSION</tt>.
Calling autoconf happens if you set <tt>CONFIGURE_STYLE=autoconf</tt>,
together with setting <tt>AUTOCONF_VERSION</tt>.
In most cases, identify the version of autoconf that was used to generate
the distributed configure script (usually obvious when reading the script)
and use this same version yourself.

<p>
Autoconf relies on the standard unix preprocessor
<a href="https://man.openbsd.org/m4">m4(1)</a>.
Normally, autoconf relies on some features on the GNU version of m4, gm4.
Fortunately, OpenBSD's m4 has enough features to run autoconf as well, it
just needs to be invoked with <tt>-g</tt> to handle autoconf.
Very seldom, autoconf run with OpenBSD's m4 will produce bogus configure
scripts.
The OpenBSD developers will fix such an issue.

<h3>Trojan horses</h3>

Configure scripts are big generated files.
They are an ideal hiding place for trojan horses, and this has indeed already
happened in the past.
This is the main reason for having most versions of autoconf in the tree:
a good porter is expected to check that a generated configure script matches
what the ports tree autoconf builds.

<h3>Interaction with other programs</h3>

Autoheader is another program related to autoconf that is normally run to
create a <tt>config.h.in</tt> file.
Setting <tt>CONFIGURE_STYLE=autoconf</tt> will also run autoheader.
A few ports don't use autoheader.
Setting <tt>CONFIGURE_STYLE=autoconf no-autoheader</tt> will fix that issue.

<p>
libtool has a few specific hooks in <tt>configure.in</tt>.
There is often a <tt>libtool.m4</tt> script that goes with it.
Getting libtool to do the right thing goes beyond the scope of this
documentation.

<p>
KDE uses an extra layer on top of autoconf.
This extra layer assembles a <tt>configure.in</tt> file from a set of
<tt>configure.in.in</tt> files, and is also able to tweak both
<tt>configure.in</tt> for snappier results, and <tt>Makefile.in</tt> to allow
for some supplementary options in building, and to automatically insert
<tt>DESTDIR</tt> in the right places.
The <tt>AUTOCONF</tt> variable can be used to tweak the actual autoconf
script that gets run, and KDE expects <tt>/bin/sh ${WRKDIST}/admin/cvs.sh</tt>
to work correctly.

<h2 id="Config">Configuration Files</h2>

Packages should only install files under <tt>${PREFIX}</tt>, which is
<tt>/usr/local</tt> by default.
On the other hand, the OpenBSD policy is to install most configuration files
under <tt>${SYSCONFDIR}</tt>, which is <tt>/etc</tt> by default.

<p>
<i>Note that it is perfectly acceptable for a binary package to have both
<tt>${PREFIX}</tt> and <tt>${SYSCONFDIR}</tt> hardcoded: <tt>PREFIX</tt> and
<tt>SYSCONFDIR</tt> are mostly user settings that influence the build of the
package.</i>

<h3><tt>@@sample</tt> explained</h3>

Packing-lists contain a specific <tt>@@sample</tt> mechanism to deal with
configuration files:

<ul><li>
During fake installation, the port should install a sample configuration
file, for instance as <tt>${PREFIX}/share/examples/PKGNAME/foo.rc</tt>.

<li>
The packing-list should contain a <tt>@@sample ${SYSCONFDIR}/foo.rc</tt>
right under the sample configuration file.

<li>
During installation, the default example configuration file will be copied
into the actual location where the configuration file should live.

<li>
During updates and deinstallation, an existing configuration file will be
compared with the default example file.
If they differ, the package tools will inform the user and let him perform
the update/removal himself.
If they are identical, the package tools know they can proceed and
update/remove the configuration files without any further precautions.
</ul>

<h3>more <tt>@@sample</tt> specificities</h3>

Contrary to other files in a packing-list, <tt>@@sample</tt> entries can
have an absolute path name.

<p>
Some big packages will also need their own configuration directory,
<tt>@@sample ${SYSCONFDIR}/directory/</tt> will deal with that.

<p>
Using <tt>@@sample directory/</tt> to create port specific directories
that do not hold any configuration files is perfectly good style.
<tt>@@sample</tt> correctly interprets correct <tt>@@mode</tt>,
<tt>@@owner</tt>, <tt>@@group</tt> annotations.
This can be a bit cumbersome, because you will often need to switch back
and forth between a default mode and a configuration file specific mode.

<h3>Special tricks</h3>

<tt>make update-plist</tt> knows how to copy <tt>@@sample</tt> annotations over,
but it does not know how to create them, so they have to be written in the
first place.

<p>
Note the distinction between configuration files and example configuration
files: the port must be configured to find its files under
<tt>${SYSCONFDIR}</tt>.
It is only the fake installation stage that must put stuff under
<tt>${PREFIX}/share/examples</tt>.
One simple way to handle that is to copy the files over in a
<tt>post-install</tt>.

<p>
A neat trick which often works is to look at a program's <tt>Makefile</tt>, and
override the configuration directory in the fake installation stage by using
specific <tt>FAKE_FLAGS</tt>, for instance:

<blockquote><pre>
FAKE_FLAGS=	DESTDIR=${WRKINST} \
		sysconfdir=${WRKINST}${TRUEPREFIX}/share/examples/PKGNAME
</pre></blockquote>

You just need to watch out for programs that write the configuration directory
down in specific files during their install stage.

<h3>Examples</h3>

<ul><li>
The <tt>security/integrit</tt> port uses a configuration directory with a
few files.
Its packing-list looks like this:

<blockquote><pre>
@@comment &#36;OpenBSD&#36;
@@bin bin/i-ls
@@info info/integrit.info
@@man man/man1/i-ls.1
@@man man/man1/i-viewdb.1
@@man man/man1/integrit.1
@@bin sbin/i-viewdb
@@bin sbin/integrit
share/doc/integrit/
share/doc/integrit/README
share/doc/integrit/crontab
share/doc/integrit/install_db
share/doc/integrit/integrit_check
share/doc/integrit/viewreport
share/examples/integrit/
@@sample ${SYSCONFDIR}/integrit/
share/examples/integrit/root.conf
@@sample ${SYSCONFDIR}/integrit/root.conf
share/examples/integrit/src.conf
@@sample ${SYSCONFDIR}/integrit/src.conf
share/examples/integrit/usr.conf
@@sample ${SYSCONFDIR}/integrit/usr.conf
</pre></blockquote>

<li>
The <tt>security/nessus</tt> port uses <tt>@@sample dir/</tt> to create
private directories.

<blockquote><pre>
...
sbin/uninstall-nessus
@@sample ${SYSCONFDIR}/nessus/
@@mode 0700
@@sample /var/nessus/
@@sample /var/nessus/jobs/
@@sample /var/nessus/logs/
@@sample /var/nessus/users/
@@extraunexec rm -fr %D/lib/nessus/plugins/*
@@extraunexec rm -fr %D/nessus
@@extraunexec rm -fr /var/nessus
</pre></blockquote>

<li>
The <tt>sysutils/nut</tt> port uses a specific owner for its configuration
files.

<blockquote><pre>
@@comment &#36;OpenBSD&#36;
@@conflict upsd-*
@@newuser ${NUT_USER}:${NUT_ID}:daemon:UPS User:/var/empty:/sbin/nologin
...
share/examples/nut/
@@sample ${SYSCONFDIR}/nut/
@@owner ${NUT_USER}
share/examples/nut/ups.conf
@@sample ${SYSCONFDIR}/nut/ups.conf
share/examples/nut/upsd.conf
@@mode 600
@@sample ${SYSCONFDIR}/nut/upsd.conf
@@mode
share/examples/nut/upsd.users
@@mode 600
@@sample ${SYSCONFDIR}/nut/upsd.users
@@mode
share/examples/nut/upsmon.conf
@@mode 600
@@sample ${SYSCONFDIR}/nut/upsmon.conf
@@mode
share/examples/nut/upssched.conf
@@sample ${SYSCONFDIR}/nut/upssched.conf
@@mode 700
@@sample /var/db/nut/
@@mode
@@owner
share/ups/
share/ups/cmdvartab
share/ups/driver.list
</pre></blockquote>

</ul>

<h2 id="Audio">Audio applications</h2>

This document currently deals with sampled sounds issues only.
Contributions dealing with synthesizers and waveform tables are welcome.

<p>
Audio applications tend to be hard to port, as this is a domain where
interfaces are not standardized at all, though approaches don't vary
much between operating systems.

<h3>Using <tt>ossaudio</tt></h3>

The <tt>ossaudio</tt> emulation is possibly the simplest way, but it won't
always work, and it is not such a great idea usually.

<ul><li>
It redefines <tt>ioctl</tt>.
If the code to port uses <tt>ioctl</tt> for more than audio, you will have to
<tt>#undef ioctl</tt> and use the bare form with <tt>_ossioctl</tt>.

<li>
Some features of linux sound are not emulated.

<li>
Applications with correct linux sound support that is not Intel-specific tend
to use these features.
</ul>

<h3>Using existing NetBSD or FreeBSD code</h3>

Since we share part of the audio interface with NetBSD and FreeBSD, starting
from a NetBSD port is reasonable. Be aware that some files changed places,
and that some entries in <tt>sys/audioio.h</tt> are obsolete.
Also, many ports tend to be incorrectly coded and to work on only one type
of machine.
Some changes are bound to be necessary, though.
Read through the next part.

<h3>Writing OpenBSD code</h3>

<h3><font color="#0000e0">libsndio</font></h3>

<p>
OpenBSD has its own audio layer provided by the sndio library, documented in
<a href="https://man.openbsd.org/sio_open">sio_open(3)</a>.
Until it's merged into this page, you can find further information about
programming for this API in the guide,
<a href="http://www.sndio.org/tips.html">hints on writing and porting audio
code</a>.
sndio allows user processes to access
<a href="https://man.openbsd.org/audio.4">audio(4)</a> hardware and the
<a href="https://man.openbsd.org/sndiod">sndiod(8)</a> audio server in
a uniform way.
It supports full-duplex operation, and when used with the
<a href="https://man.openbsd.org/sndiod">sndiod(8)</a> server it supports
resampling and format conversions on the fly.

<h3><font color="#0000e0">Hardware independence</font></h3>

<p>
<b>YOU SHOULDN'T ASSUME ANYTHING ABOUT THE AUDIO HARDWARE USED.</b>
<br>
Wrong code is code that only checks the <tt>a_info.play.precision</tt>
field against 8 or 16 bits, and assumes unsigned or signed samples based
on soundblaster behavior.
You should check the sample type explicitly, and code according to that.
Simple example:

<blockquote><pre>
AUDIO_INIT_INFO(&amp;a_info);
a_info.play.encoding = AUDIO_ENCODING_SLINEAR;
a_info.play.precision = 16;
a_info.play.sample_rate = 22050;
error = ioctl(audio, AUDIO_SETINFO, &amp;a_info);
if (error)
    /* deal with it */
error = ioctl(audio, AUDIO_GETINFO, &amp;a_info);
switch(a_info.play.encoding)
    {
case AUDIO_ENCODING_ULINEAR_LE:
case AUDIO_ENCODING_ULINEAR_BE:
    if (a_info.play.precision == 8)
        /* ... */
    else
        /* ... */
    break;
case ...

default:
    /* don't forget to deal with what you don't know !!! For instance, */
    fprintf(stderr,
        "Unsupported audio format (%d), ask ports@@ about that\n",
            a_info.play.encoding);

    }
    /* now don't forget to check what sampling frequency you actually got */
</pre></blockquote>

This is about the smallest code fragment that will deal with most issues.

<h3><font color="#0000e0">16 bit formats and endianness</font></h3>

In normal usage, you just ask for an encoding type (e.g.,
<tt>AUDIO_ENCODING_SLINEAR</tt>), and you retrieve an encoding with endianness
(e.g., <tt>AUDIO_ENCODING_SLINEAR_LE</tt>).
Considering that a soundcard does not have to use the same endianness as your
platform, you should be prepared to deal with that.
The easiest way is probably to prepare a full audio buffer,
and to use <a href="https://man.openbsd.org/swab">swab(3)</a> if an endianness
change is required.
Dealing with external samples usually amounts to:

<ol>
<li>Parsing the sample format
<li>Getting the sample in
<li>Swapping endianness if it is not your native format
<li>Computing what you want to output into a buffer
<li>Swapping endianness if the sound card is not in your native format
<li>Playing the buffer
</ol>

Obviously, you may be able to remove steps 3 and 5 if you are simply playing
a sound sample which happens to be in your sound card native format.

<h3><font color="#0000e0">Audio quality</font></h3>

Hardware may have some weird limitations, such as being unable to get over
22050 Hz in stereo, but up to 44100 in mono.
In such cases, you should give the user a chance to state his preferences,
then try your best to give the best performance possible.
For instance, it is stupid to limit the frequency to 22050 Hz because you
are outputting stereo.
What if the user does not have a stereo sound system connected to his audio
card output?

<p>
It is also stupid to hardcode soundblaster-like limitations into your program.
You should be aware of these, but do try to get over the 22050&nbsp;Hz/stereo
barrier and check the results.

<h4>Sampling frequency</h4>

You should definitely check the sampling frequency your card gives you back.
A 5% discrepancy already amounts to a half-tone, and some people have much
more accurate hearing than that, though most of us won't notice a thing.
Your application should be able to perform resampling on the fly, possibly
naively, or through devious applications of Shannon's resampling formula
if you can.

<h4>Dynamic range</h4>

Samples don't always use the full range of values they could.
First, samples recorded with a low gain will not sound very loud on the
machine, forcing the user to turn the volume up.
Second, on machines with badly isolated audio, low sound output means
you mostly hear your machine heart-beat, and not the sound you expected.
Finally, dumb conversion from 16 bits to 8 bits may leave you with only
4 bits of usable audio, which makes for an awfully bad quality.

<p>
If possible, the best solution is probably to scan the whole stream you are
going to play ahead of time, and to scale it so that it fits the full dynamic
range.
If you can't afford that, but you can manage to get a bit of look-ahead on
what you're going to play, you can adjust the volume boost on the fly, you
just have to make sure that the boost factor stays at a low frequency compared
to the sound you want to play, and that you get absolutely
<i>no overflows</i> -- those will always sound much worse than the improvement
you're trying to achieve.
<br>
As sound volume perception is logarithmic, using arithmetic shifts is usually
enough.
If your data is signed, you should explicitly code the shift as a division,
as C <tt>&gt;&gt;</tt> operator is not portable on signed data.

<p>
If all else fails, you should at least try to provide the user with a volume
scaling option.

<h3><font color="#0000e0">Audio performance</font></h3>

Low-end applications usually don't have much to worry about.
Keep in mind that some of us do use OpenBSD on low-end 68030, and that if a
sound application can run on that, it should.

<p>
Don't forget to run benches.
Theoretical optimizations are just that: theoretical.
Some hard figures should be collected to check what's a sizeable improvement
and what's not.

<p>
For high performance audio applications, such as mpegI-layer3, some points
should be taken into account:

<ul><li>
The audio interface does provide you with the natural hardware blocksize.
Using multiples of that for your output buffer is essential.
Keep in mind that <tt>write</tt>, as a system call, incurs a high cost compared
to internal audio processing.

<li>
Bandwidth is a very important factor when dealing with audio.
A useful way to optimize an audio player is to see it as a decompressor.
The longer you can keep with the compressed data, the better usually.
Very short loops that do very little processing are usually a bad idea.
It is generally much better to combine all processing into one loop.

<li>
Some formats do incur more overhead than others.
The <tt>AUDIO_GETENC</tt> <tt>ioctl</tt> should be used to retrieve all
formats that the audio device provides.
Be especially aware of the <tt>AUDIO_ENCODINGFLAG_EMULATED</tt> flag.
If your application is already able to output all kinds of weird formats,
and reasonably optimized for that, try to use a native format at all costs.
On the other hand, the emulation code present in the audio device can be
assumed to be reasonably optimal, so don't replace it with quickly hacked
up code.
</ul>

<p>
A model you may have to follow to get optimal results is to first compile
a small test program that enquires about the specific audio hardware available,
then proceed to configure your program so that it deals optimally with this
hardware.
You may reasonably expect people who want good audio performance to recompile
your port when they change hardware, provided it makes a difference.

<h3><font color="#0000e0">Real time or synchronized</font></h3>

Considering that OpenBSD is not real time, you may still wish to write audio
applications that are mostly real time, for instance games.
In such a case, you will have to lower the blocksize so that the sound effects
don't get out of synch with the current game.
The problem with this if that the audio device may get starved, which yields
horrible results.

<p>
In case you simply want audio to be synchronized with some graphics output,
but the behavior of your program is predictable, synchronization is easier
to achieve.
You just play your audio samples, and ask the audio device what you are
currently playing with <tt>AUDIO_GETOOFFS</tt>, then use that information
to post-synchronize graphics.
Provided you ask sufficiently often (say, every tenth of a second), and as
long as you have enough horse-power to run your application, you can get very
good synchronization that way.
You might have to tweak the figures by a constant offset, as there is some lag
between what the audio reports, what's currently playing, and the time it takes
for XWindow to display something.

<h3>Contributing code back</h3>

In the case of audio applications, working with the original program's author
is very important.
If their code only works with soundblaster cards, for instance, there is a good
chance they will have to cope with other technology soon.

<p>
<b>If you don't send your comments to the author, your work will have been
useless</b>.

<p>
It may also be that the author has already noticed whatever problems
you are currently dealing with, and is addressing them in his current
development tree.
If the patches you are writing amount to more than a handful of lines,
cooperation is almost certainly a very good idea.

<h2 id="Mandoc">Manual pages</h2>

This section provides guidelines on how to deal with groff versus
<a href="https://man.openbsd.org/mandoc">mandoc(1)</a> issues in ports,
and what to do with non-English manual pages.

<h3>Should I check anything?</h3>

When creating a new port or updating an existing port, please
check whether the port can use mandoc to format its manuals.
Both the automatic and the manual checks described below are required.
This may make the manuals more useable for the port's users, and it will
reduce the port's build time.

<p>
If a new port or an existing port not marked with <tt>USE_GROFF</tt>
does not work with mandoc, please report that to schwarze@@, who
will probably fix mandoc.

<h3>Which tools do I need?</h3>

No tools are required except the
<a href="https://man.openbsd.org/mandoc.1">mandoc(1)</a>
utility included in the base system.
In the very unusual case that you suspect recent changes to mandoc are
important for the port, you can easily update mandoc, even without
updating the rest of the system:

<!-- XXXrelease: remove 'make depend' below for 6.2 -->
<blockquote><pre>
$ <b>cd /usr/src/usr.bin/mandoc/</b>
$ <b>cvs -q up -Pd</b>
$ <b>make cleandir</b>
$ <b>make obj</b>
$ <b>make depend</b>
$ <b>make</b>
$ <b>doas make install</b>
</pre></blockquote>

Optionally, you may also get a copy of the
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/gmdiff?cvsroot=mdocml">gmdiff</a>
utility script that helps to compare groff and mandoc output.
The gmdiff script is not strictly required, doing the necessary checks by hand
is perfectly acceptable.

<h3>How do I report the results?</h3>

The following paragraphs ask for sending in reports to the mandoc maintainers
in some particular situations.
Before sending such reports, please always tick off the following checklist:

<ol><li>
Attach the <a href="https://man.openbsd.org/mdoc.7">mdoc(7)</a> or
<a href="https://man.openbsd.org/man.7">man(7)</a> source file in question
to the mail.
This may either be a file contained in the distribution tarball or a file
generated during the build process.
In case several files exhibit the problems, choose one that shows all problems.
In case different files exhibit different problems you wish to report, attach
as many files as necessary.
The point is to save the mandoc maintainers the work of downloading
distribution tarballs, searching them for source files, sometimes even
installing software before being able to start a build, while you have that
information readily at hand, anyway.

<li>
Briefly describe all the problems you want to report, and where they can be
seen in which file.
We have spent time wondering what exactly the reporter's point was more than
once in the past.

<li>
In case your report is related to errors or warnings printed by the mandoc
utility, copy the output of <tt>mandoc -Tlint</tt> (or
<tt>mandoc -Tlint -Werror</tt> when warnings are irrelevant) into the body of
your mail.
Usually, this is easy to reproduce, but it did happen that it was not, causing
unnecessary confusion.

<li>
In case the version of the port you are talking about is not yet committed,
please attach what is needed to build the uncommitted port: A diff against
-current when it is an update, or a tarball of the port directory when it is
a completely new port.
Very often, the source files will be sufficient to identify the problem;
however, in those cases where they are not, mailing back and forth or searching
mailing list archives just to get the needed additional information is a waste
of time.

<li>
Send mail to schwarze@@.
Unless you are the maintainer of the port, Cc: him or her.
Unless you are an OpenBSD developer, in case you regularly work with a
developer who is committing your ports and who you know is interested in
this port, Cc:ing him or her may be useful as well.
</ol>

<h3>How do I do automatic checking?</h3>

To do the automatic part of the check, please run the following command over
all <a href="https://man.openbsd.org/mdoc.7">mdoc(7)</a> and
<a href="https://man.openbsd.org/man.7">man(7)</a> manual source files contained
in the port:

<blockquote><pre>
$ <b>mandoc -Tlint -Werror *</b>
</pre></blockquote>

If you get any <tt>UNSUPPORTED</tt> messages, the respective
places of the manual page require careful scrutiny.
It is likely that the page will be misformatted with mandoc and the
port requires <tt>USE_GROFF</tt>.
If you are sure that all misformattings related to the unsupported
features are minor and don't hinder the reader, you may remove
<tt>USE_GROFF</tt>; but in case of doubt, leave <tt>USE_GROFF</tt>
in place when there are <tt>UNSUPPORTED</tt> messages.

<p>
If there are any <tt>ERROR</tt> messages, they should also be briefly
looked at.
In the unusual case that they are related to misformatting with
mandoc that doesn't happen with groff, that should be reported; the
mandoc maintainer might choose to let mandoc issue <tt>UNSUPPORTED</tt>
messages in additional cases or to fix the formatting.

<p>
If manual pages look good with groff, never patch them to get rid of mandoc
errors.
That would merely be a make-work project not helping anyone: It will neither
help to improve upstream manuals nor mandoc.

<h3>How do I do manual checking?</h3>

If there are no errors or the errors are not related to serious
misformatting with mandoc, proceed to the manual part of the check.
Look at the manuals as formatted by mandoc.
Do they look fine?
If yes, you do not need <tt>USE_GROFF</tt>, and there is no need to report
anything.

<p>
If there are no errors, but mandoc output has serious issues, that is,
relevant information is missing or part of the output is garbled,
please always report your findings, even if you happen to know it's due to
a known issue with mandoc.
We do want to know which issues cause serious problems in practice, such that
we can address the most pressing issues first.

<p>
If mandoc output has serious issues and groff output looks bad as well, then
the manuals are probably just broken upstream.
In that case, you have the usual options when porting broken software:
Abandon the port, ignore the problem, report upstream, and/or patch the bugs
away.
In case you need help with the latter, talk to schwarze@@.

<p>
If there are no errors, but mandoc output has minor issues that don't really
hinder the user when reading the manual, you are welcome to report these
issues as well.
In that case, you are even more welcome to first check the mandoc
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/TODO?cvsroot=mdocml">TODO</a>
list, to avoid having the same minor issues reported again and again -
but in case of doubt, it is always better to report dupes than to let
problems go unnoticed.

<p>
If there are only very few errors, in particular if you get the
impression that mandoc output is just fine all the same, you don't
usually need <tt>USE_GROFF=Yes</tt>.
In case of doubt, ask for advice.
Such questions often help to improve mandoc error reporting, in
particular to identify and remove bogus mandoc errors messages.

<p>
To speed up the manual checks, in particular if you are often doing mandoc
checks on OpenBSD ports, and to reduce the risk of overlooking problems,
consider using the 
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/gmdiff?cvsroot=mdocml">gmdiff</a>
utility script.
It takes the file names of an arbitrary number of manual source files as
arguments, runs both groff and mandoc on all the files in turn, and compares
the output of both programs.
However, bear in mind that you are still doing manual checks with the ultimate
goal to judge the quality of mandoc output: all the above points still apply
even when you are using the gmdiff script to help your work.
Also note that gmdiff will usually find minor formatting differences between
both programs, in particular with respect to whitespace.
If mandoc output looks good, even if it's slightly different from groff output,
<tt>USE_GROFF</tt> is not needed.

<p>
For ease of use, it's possible to call gmdiff from a custom target in mk.conf:

<blockquote><pre>
gmdiff:
	@@make fake; cd ${WRKINST}${TRUEPREFIX}; find man -type f -path 'man/man*' -print0 | xargs -0r gmdiff | less
</pre></blockquote>

<h3>What about warnings?</h3>

You might wonder about mandoc warnings, as opposed to mandoc errors.
In a nutshell, the distinction is that errors may seriously impact the
usefulness of the output, while warnings might at the worst cause minor
formatting glitches, if at all.
If a mandoc warning appears to be related to seriously garbled output,
that's probably a bug in mandoc and should always be reported.

<p>
That said, it is obvious that warnings are irrelevant for the decision
whether to use or not to use mandoc for a given port.
They are for manual authors, to help improve manual quality, not for porters.

<h3>How can I help upstream?</h3>

In case you are one of the port's upstream developers, or know they care
about good quality of their manuals and gladly accept patches, it may make
sense to use <tt>mandoc -Tlint</tt> to identify potential formatting issues
and to produce patches to be submitted upstream.
Usually, there is no need to put such patches into the ports tree.

<p>
As with any kind of linting, before changing your
<a href="https://man.openbsd.org/mdoc.7">mdoc(7)</a> or
<a href="https://man.openbsd.org/man.7">man(7)</a> source code or sending out
patches, first make sure you are chasing real problems in the manuals.
The mandoc utility is not perfect.
It may produce bogus warnings.
We are trying to fix that, but there will always be room for improvement.
In case of doubt, report the issue and ask for advice.

<h3>Non-English manual pages</h3>

The following are rules of thumb, not laws set in stone.
If you find that you port has special needs, you can set them
aside; the goal is to make the port useful for users.
Consider telling schwarze@@ about it if you do, maybe we can learn
something from your port.

<ol>
<li>If upstream provides non-English manual pages, install them if
that is possible without jumping through hoops, and unless there
are specific reasons not to.
"They are outdated" is not a good reason to exclude them.

<li>Never install any encoding except UTF-8.
If upstream provides UTF-8, great.
Otherwise, set <tt>BUILD_DEPENDS = converters/libiconv</tt>
and use iconv(1) in the <tt>post-build</tt> target.

<li>If mandoc copes, which you can check in exactly the same
way as with English manuals, simply install the UTF-8 source
code to <tt>man/language/manN/*.N</tt> and do not <tt>USE_GROFF</tt>.

<li>If mandoc does not cope, the proper order of
operations is iconv(1) -t UTF-8, then preconv(1), then nroff(1),
never some other way round.

<li>If possible, install to <tt>man/language/manN</tt>,
without any "_" or "@@" characters.
Never include the encoding in the path name, and make sure
the <tt>/language/</tt> part never contains "." (a dot).

<li>As an exception, use <tt>zh_CN</tt> and <tt>zh_TW</tt> rather
than just <tt>zh</tt>.
Also, keep <tt>pt</tt> and <tt>pt_BR</tt> as they are upstream,
and install both if available. 
</ol>

<p>If the above is followed, people can do the following with no
changes to any part of the default configuration:

<blockquote><pre>
$ <b>doas pkg_add mc</b>
$ <b>export LC_CTYPE=en_US.UTF-8</b>
$ <b>alias ruman="man -m /usr/local/man/ru"</b>
$ <b>ruman mc</b>
</pre></blockquote>

<h2 id="RcScripts">rc.d(8) scripts</h2>

This section is intended to provide some information on writing and installing
<a href="https://man.openbsd.org/rc.d">rc.d(8)</a> scripts.

<p>
Ports that install a daemon benefit greatly from having
<a href="https://man.openbsd.org/rc.d">rc.d(8)</a> scripts.
It allows the user to easily check if the daemon is running, as well as
providing an easy and consistent way to start and stop it.

<h3>Writing rc.d(8) scripts</h3>

Writing an <a href="https://man.openbsd.org/rc.d">rc.d(8)</a> script is
straightforward and simple due to the clean and simple design of the
<a href="https://man.openbsd.org/rc.subr">rc.subr(8)</a> system.
Though there are several things to take into account.

<ol><li>
The script has to be placed into <tt>${PKGDIR}</tt> with a <tt>.rc</tt>
extension, like <tt>mpd.rc</tt>.
This will allow the package tools to pick it up.
<!-- and it to the PLIST. -->

<li>
Be sure to test all the functions of the script, especially the <i>reload</i>
function.

<li>Use <tt>${TRUEPREFIX}</tt> when writing the path to the daemon.
</ol>


<h3>Example script</h3>

Below is an example of a typical script.

<blockquote><pre>
#!/bin/sh
#
# &#36;OpenBSD: munin_node.rc,v 1.6 2013/01/08 11:14:02 kirby Exp $

daemon="${TRUEPREFIX}/sbin/munin-node"

. /etc/rc.d/rc.subr

pexp="/usr/bin/perl -wT $daemon"

rc_pre() {
	install -d -o _munin /var/run/munin
}

rc_cmd $1
</pre></blockquote>

A <a href="https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/infrastructure/templates/rc.template">
template script</a> can also be found in the templates directory of your
ports tree.

<p>
</body>
</html>

@


1.68
log
@move man.openbsd.org links from http:// to https://
reduces the number of http:// links in www/ from >33k to <7k

thanks to schwarze for doing the work
@
text
@d997 1
@


1.67
log
@Delete the paragraph about USE_GROFF in imake ports.
What was there was obviously wrong, as noticed by tb@@.
Looking at a number of modern imake ports,
it appears that nothing special is needed nowadays.
@
text
@d51 1
a51 1
You can see it with <a href="http://man.openbsd.org/ldd">ldd(1)</a>.
d53 1
a53 1
<a href="http://man.openbsd.org/ld.so">ld.so(1)</a> uses that information to
d150 1
a150 1
<a href="http://man.openbsd.org/ld">ld(1)</a> to override the library
d153 1
a153 1
OpenBSD where <a href="http://man.openbsd.org/ld.so">ld.so(1)</a> is smart and
d174 1
a174 1
<a href="http://man.openbsd.org/ldconfig">ldconfig(8)</a> path is a
d181 1
a181 1
At build time, <a href="http://man.openbsd.org/ld">ld(1)</a> uses <tt>-L</tt>
d186 1
a186 1
At run time, <a href="http://man.openbsd.org/ld.so">ld.so(1)</a> uses the
d188 1
a188 1
<a href="http://man.openbsd.org/ldconfig">ldconfig(8)</a> to find the required
d212 1
a212 1
This is enough to satisfy <a href="http://man.openbsd.org/ld.so">ld.so(1)</a>.
d386 1
a386 1
<a href="http://man.openbsd.org/tsort">tsort(1)</a> order in a file mentioned in
d485 1
a485 1
<a href="http://man.openbsd.org/m4">m4(1)</a>.
d744 1
a744 1
<a href="http://man.openbsd.org/sio_open">sio_open(3)</a>.
d750 2
a751 2
<a href="http://man.openbsd.org/audio.4">audio(4)</a> hardware and the
<a href="http://man.openbsd.org/sndiod">sndiod(8)</a> audio server in
d754 1
a754 1
<a href="http://man.openbsd.org/sndiod">sndiod(8)</a> server it supports
d808 1
a808 1
and to use <a href="http://man.openbsd.org/swab">swab(3)</a> if an endianness
d972 1
a972 1
<a href="http://man.openbsd.org/mandoc">mandoc(1)</a> issues in ports,
d991 1
a991 1
<a href="http://man.openbsd.org/mandoc.1">mandoc(1)</a>
d1020 2
a1021 2
Attach the <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
<a href="http://man.openbsd.org/man.7">man(7)</a> source file in question
d1068 2
a1069 2
all <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> and
<a href="http://man.openbsd.org/man.7">man(7)</a> manual source files contained
d1191 2
a1192 2
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
<a href="http://man.openbsd.org/man.7">man(7)</a> source code or sending out
d1250 1
a1250 1
<a href="http://man.openbsd.org/rc.d">rc.d(8)</a> scripts.
d1254 1
a1254 1
<a href="http://man.openbsd.org/rc.d">rc.d(8)</a> scripts.
d1260 1
a1260 1
Writing an <a href="http://man.openbsd.org/rc.d">rc.d(8)</a> script is
d1262 1
a1262 1
<a href="http://man.openbsd.org/rc.subr">rc.subr(8)</a> system.
@


1.66
log
@Remove rants about DocBook.  It hasn't got better and isn't likely to
any time soon, but i'm seriously working on getting mandoc to cope
with what it spews, and to free porters from having to bother about it.
@
text
@a987 10
<p>
If a port is using <tt>CONFIGURE_STYLE = imake</tt>, merely removing
<tt>USE_GROFF</tt> is insufficient, because
<tt>/usr/X11R6/lib/X11/config/OpenBSD.cf</tt> will still attempt to call groff.
Typically, you need to convince Imake to not format the manual(s),
for example by changing <tt>ComplexProgramTarget</tt> to
<tt>ComplexProgramTargetNoMan</tt> and install the manual(s) by hand, typically
using a <tt>post-install</tt> target in the port <tt>Makefile</tt>.
See <tt>sysutils/xbattbar</tt> for a simple example.

@


1.65
log
@missed some markup for displayed commands
@
text
@d984 3
a986 18
In the following two cases, mandoc will almost certainly work.
If you encounter a case where it doesn't, please report that to
schwarze@@, who will probably fix mandoc.

<ul><li>
The documentation is written using the
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> language rather than the
<a href="http://man.openbsd.org/man.7">man(7)</a> language.
To distinguish the two, look at the beginning of the manual source code:
.Dd is mdoc(7), .TH is man(7).

<li>
The documentation is man(7), but generated by
<a href="http://man.openbsd.org/pod2man">pod2man(1)</a>.
For such pages, the first line of the manual source code reads
<br>
<tt>.\" Automatically generated by Pod::Man...</tt>
</ul>
a988 8
Of course, most ports not matching these criteria work as well.
However,

<ul><li>
If a port is using DocBook, there is a high probability that
<tt>USE_GROFF</tt> is still required.

<li>
a996 1
</ul>
a1029 11
For the time being, do not report problems related to DocBook.
We know source code generated by DocBook is extremely crappy even
when DocBook works as intended, and on top of that, DocBook tends
to be more buggy than average software.
We also know that mandoc usually parses and renders DocBook output badly,
and we know what to do to improve mandoc in this respect.
This may change in the future, but right now, more than half of all reports
that fail to reveal new, useful information are related to DocBook, and the
signal-to-noise ratio in DocBook reports is too low to be worthwhile.

<li>
a1101 22

<p>
Besides, sending a report to the mandoc developers is useful if:

<ul><li>
The manual pages in question are in
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> format.

<li>
The manual pages in question are generated by
<a href="http://man.openbsd.org/pod2man">pod2man(1)</a>.

<li>
You find one or more messages "ERROR: skipping unknown macro", and the fact
that the manual pages you are looking at use these macros is not yet reported
in the mandoc
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/TODO?cvsroot=mdocml">TODO</a>
list.
Even if we already know that a certain roff request is still unsupported,
learning which manuals actually use it is useful to get our priorities right
when implementing new features.
</ul>
@


1.64
log
@tweak previous; misc spelling, grammar, wording and formatting fixes
@
text
@d1308 4
a1311 4
$ doas pkg_add mc
$ export LC_CTYPE=en_US.UTF-8
$ alias ruman="man -m /usr/local/man/ru"
$ ruman mc
@


1.63
log
@<me> -> <em>
@
text
@d1277 2
a1278 5
are specific reasons not too.  "They are outdated" is not a good
reason to not install them, as long as upstream still includes them
in the official distribution.  We don't try to judge the quality
of third-party English documentation either, and besides, knowing
<em>something</em> is available may motivate users to improve it.
d1289 1
a1289 3
<li>If mandoc does not cope - which should be very rare by now,
we have less than 130 ports left in the whole tree that still
<tt>USE_GROFF</tt>, even for English manuals - the proper order of
d1294 1
a1294 1
without any "_" or "@@": KISS.
d1301 1
a1301 5
and install both if available.  The Brazilian version is often
better maintained, and it's not our job to try and merge the two
into a common directory.
Delete ridiculous stuff like <tt>en_*</tt> and <tt>fr_CA</tt> rather
than installing it.
@


1.62
log
@Add a handful of recommendations for non-English manual pages.
When these were shown on the ports@@ mailing list, no objections
came up, but a small amount of support was voiced.
Can be improved in tree if needed.
@
text
@d1281 1
a1281 1
<me>something</em> is available may motivate users to improve it.
@


1.61
log
@add some man-links and do some minimal cleanup.

initial diff by anton lindqvist plus some tweaks by me
@
text
@d972 2
a973 1
<a href="http://man.openbsd.org/mandoc">mandoc(1)</a> issues in ports.
d1155 1
a1155 1
Even if we already now that a certain roff request is still unsupported,
d1265 57
@


1.60
log
@Try again what i intended to do in rev. 1.58:
Jan Stary noticed that calling mandoc "quite stable by now" might
cause fear, uncertainty, and doubt, so delete the useless sentence.
@
text
@d51 4
a54 2
You can see it with ldd. Later, when you run that program, the dynamic linker
ld.so uses that information to find the right dynamic library:
d149 2
a150 1
Some ports use ld(1)'s <tt>-soname</tt> flag to override the library
d153 2
a154 2
OpenBSD where ld.so(1) is smart and the ports tree takes care of library
versioning.
d173 2
a174 1
As a rule, requesting the user to add directories to their ldconfig path is a
d181 2
a182 1
At build time, ld uses <tt>-L</tt> flags to set up paths to look for libraries.
d186 4
a189 2
At run time, ld.so uses the information cached through ldconfig to find the
required library.
d212 1
a212 1
This is enough to satisfy ld.so.
d385 2
a386 1
The list of dependencies is given in tsort(1) order in a file mentioned in
d484 2
a485 1
Autoconf relies on the standard unix preprocessor m4(1).
d807 3
a809 2
The easiest way is probably to prepare a full audio buffer, and to use swab(3)
if an endianness change is required.
d1268 1
a1268 1
<i>rc.d(8) scripts</i>.
d1271 2
a1272 1
Ports that install a daemon benefit greatly from having rc.d(8) scripts.
d1278 2
a1279 2
Writing an rc.d(8) script is straightforward and simple due to the clean
and simple design of the
d1293 1
a1293 2
<li
>Use <tt>${TRUEPREFIX}</tt> when writing the path to the daemon.
@


1.59
log
@Revert previous to rev. 1.57.
I have no idea what happened here and am quite sorry for the disruption.
Havoc reported by Anton dot Lindqvist at gmail dot com, thanks.
@
text
@d1013 3
a1015 5
The <a href="http://man.openbsd.org/mandoc.1">mandoc(1)</a> utility
is included in the base system and quite stable by now, so you don't need
to do anything special about it.

<p>
@


1.58
log
@Jan Stary noticed that calling mandoc "quite stable by now" might
cause fear, uncertainty, and doubt, so delete the useless sentence.
@
text
@d1 1318
a1318 1326
Index: specialtopics.html
===================================================================
RCS file: /cvs/www/faq/ports/specialtopics.html,v
retrieving revision 1.57
diff -u -r1.57 specialtopics.html
--- specialtopics.html	25 Mar 2017 18:03:37 -0000	1.57
+++ specialtopics.html	9 Apr 2017 21:42:59 -0000
@@@@ -1,1318 +0,0 @@@@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
-<html>
-<head>
-
-<!-- If you make edits to any FAQ documents, please start each sentence
-     on a new line, and try to keep the general formatting consistent
-     with the rest of the pages -->
-
-<title>OpenBSD Ports: Special Porting Topics</title>
-<meta name= "description"   content= "OpenBSD Porting Guide">
-<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
-<meta name="viewport" content="width=device-width, initial-scale=1">
-<link rel="stylesheet" type="text/css" href="../../openbsd.css">
-<link rel="canonical" href="https://www.openbsd.org/faq/ports/specialtopics.html">
-</head>
-
-<body bgcolor= "#ffffff" text= "#000000">
-
-<h2>
-<a href="../../index.html">
-<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
-<font color="#e00000">Ports - Special Porting Topics</font>
-<small>
-<a href="index.html" style="font-weight:normal;float:right">[Handbook Index]</a>
-</small>
-</h2>
-<hr>
-<p>
-
-<ul>
-  <li><a href="#SharedLibs">Shared libraries</a>
-  <li><a href="#Autoconf"  >GNU autoconf</a>
-  <li><a href="#Config"    >Configuration files</a>
-  <li><a href="#Audio"     >Audio applications</a>
-  <li><a href="#Mandoc"    >Manual pages</a>
-  <li><a href="#RcScripts" >rc.d(8) scripts</a>
-</ul>
-
-<hr>
-
-<h2 id="SharedLibs">Shared libraries</h2>
-
-<h3>Understanding shared libraries number rules</h3>
-Shared libraries are a bit tricky for a variety of reasons.
-You must understand the library naming scheme:
-<tt>libfoo.so.major.minor</tt>.
-
-<p>
-When you link a program, the linker ld embeds that information in the created
-binary.
-You can see it with ldd. Later, when you run that program, the dynamic linker
-ld.so uses that information to find the right dynamic library:
-
-<ul><li>
-A library with the same exact major number is required.
-
-<li>
-A library with an equal or higher minor number is required.
-</ul>
-
-So, this means that <b>all</b> libraries with the same major number and an
-equal or higher minor number <b>must satisfy the binary API that the program
-expects</b>.
-If they do not, then your port is broken.
-Specifically, it will break when users try to update their system.
-
-<p>
-The rules for shared libraries are quite simple.
-
-<ul><li>
-If functions were added to the library, you must bump the library minor
-number: a program that needs those functions has no way to require it except
-by asking explicitly for at least this version.
-
-<li>
-If the existing API changes, that is, if any function signature is altered,
-or if valid calling sequences are no longer valid, if a type changes in an
-incompatible way, the library major number <b>must be bumped</b>.
-
-<li>
-This includes removing old functions.
-Any function removal should trigger a major number bump.
-
-<li>A good hint is to compare the output of
-
-<blockquote><pre>
-$ <b>nm -g oldlib.so.X.Y | cut -c10- | grep -e^T</b>
-</pre></blockquote>
-
-and
-
-<blockquote><pre>
-$ <b>nm -g newlib.so.X.Y | cut -c10- | grep -e^T</b>
-</pre></blockquote>
-
-This won't show if functions arguments type changed, but at least you'll see
-quickly if some functions were added and/or removed.
-</ul>
-
-<p>
-Sometimes, it happens that a library is written as several files, and that
-internal functions happen to be visible to communicate between those files.
-Those function names traditionally begin with an underscore, and are not
-part of the API proper.
-
-<h3>Tweaking ports builds to achieve the right names</h3>
-
-Quite a few ports need tweaks to build shared libraries correctly anyways.
-Remember that building shared libraries should be done with
-
-<blockquote><pre>
-$ <b>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</b>
-</pre></blockquote>
-
-Trying to rename the library after the fact to adjust the version number
-does not work: ELF libraries use some extra magic to set the library
-internal name, so you must link it with the correct version the first time.
-
-<p>
-On the other hand, remember that you can override <tt>Makefile</tt> variables
-from the command line, by using <tt>MAKE_FLAGS</tt> in the port's
-<tt>Makefile</tt>.
-In some cases, the program you're porting will have a simple variable which
-you can override by setting the library version in MAKE_FLAGS, for example
-<tt>MAKE_FLAGS= SO_VERSION=${LIBfoo_VERSION}</tt>.
-In others, the port will need to be patched to make use of such a variable.
-
-<p>
-The ports infrastructure already handles these details in libtool-based
-and CMake-based ports.
-For libtool, by default the version from the base OS is used, but in some
-cases this is insufficient and <tt>USE_LIBTOOL=gnu</tt> can be set.
-CMake is handled by using the <tt>cmake.port.mk</tt> module:
-<tt>MODULES += devel/cmake</tt>.
-In these cases, most details are handled automatically:
-
-<ul><li>
-<tt>SHARED_LIBS</tt> is examined and version numbers are automatically replaced.
-
-<li>
-Shared library building is logged in <tt>${WRKBUILD}/shared_libs.log</tt>,
-which can be directly included in the port's <tt>Makefile</tt>.
-</ul>
-
-<h3>Avoid DT_SONAME hardcoding</h3>
-
-Some ports use ld(1)'s <tt>-soname</tt> flag to override the library
-specification in the DT_SONAME field.
-Setting DT_SONAME is not a bug itself but is usually not desirable on
-OpenBSD where ld.so(1) is smart and the ports tree takes care of library
-versioning.
-Moreover, a wrong soname can result in unusable binaries that depend on this
-library; either always or after some updates to the port containing the library.
-To check if the DT_SONAME field is set, run the following command:
-
-<blockquote><pre>
-$ <b>objdump -x /path/to/libfoo.so.0.0 | fgrep SONAME</b>
-  SONAME      libfoo.so.0.0
-</pre></blockquote>
-
-As a general rule, <em>setting soname explicitly should be patched out</em>.
-The only exception is a situation when the right soname is recorded
-<em>and</em> it's hard to patch soname-related code out <em>and</em>
-upstream won't accept such a patch.
-In that case the soname should fully match the file name (see the example
-above).
-
-<h3>Try putting all user visible libraries into /usr/local/lib</h3>
-
-As a rule, requesting the user to add directories to their ldconfig path is a
-very bad idea: all shared libraries that are linked directly to programs
-should appear in <tt>/usr/local/lib</tt>.
-However, it is quite possible to use a symbolic link to the actual library.
-You should understand the library lookup rules:
-
-<ul><li>
-At build time, ld uses <tt>-L</tt> flags to set up paths to look for libraries.
-It stops looking as soon as it finds a library that matches its requirements.
-
-<li>
-At run time, ld.so uses the information cached through ldconfig to find the
-required library.
-</ul>
-
-So, let us assume you have two ports that provide two major versions of a
-given library, say <tt>qt.1.45</tt> and <tt>qt.2.31</tt>.
-Since both ports can be installed simultaneously, to make sure a given program
-will link against <tt>qt.1</tt>, that library is provided as
-<tt>/usr/local/lib/qt/libqt.so.1.45</tt>, and programs will be linked using
-
-<blockquote><pre>
-$ <b>ld -o program program.o -L/usr/local/lib/qt -lqt</b>
-</pre></blockquote>
-
-Similarly, a program that links with <tt>qt.2</tt> will use the
-<tt>/usr/local/lib/qt2/libqt.so.2.31</tt> file with
-
-<blockquote><pre>
-$ <b>ld -o program program.o -L/usr/local/lib/qt2 -lqt</b>
-</pre></blockquote>
-
-To solve those libraries at run-time, a link called
-<tt>/usr/local/lib/libqt.so.1.45</tt> and a link called
-<tt>/usr/local/lib/libqt.so.2.31</tt> have been provided.
-This is enough to satisfy ld.so.
-
-<p>
-It is an error to link a program using <tt>qt1</tt> with
-
-<blockquote><pre>
-$ <b>ld -o program program.o -L/usr/local/lib -lqt</b>
-</pre></blockquote>
-
-This code assumes that <tt>qt.2.31</tt> is not installed, which is
-a wrong assumption.
-
-<p>
-Such tricks are only necessary in the rare cases of very pervasive
-libraries where a transition period between major versions must be
-provided.
-In general, it is enough to make sure the library appears in
-<tt>/usr/local/lib</tt>.
-
-<h3>Writing library dependencies correctly</h3>
-
-The new dependency code does need complete library dependencies.
-You must use <tt>make lib-depends-check</tt> or
-<tt>make port-lib-depends-check</tt> to verify a port does mention all
-libraries it requires.
-You just write them in <tt>LIB_DEPENDS</tt>/<tt>WANTLIB</tt> like this:
-
-<blockquote><pre>
-LIB_DEPENDS += x11/gtk+
-WANTLIB += gtk&gt;=1.2 gdk&gt;=1.2
-</pre></blockquote>
-
-It is not an error to specify static libraries on a <tt>WANTLIB</tt> line as
-well.
-<tt>WANTLIB</tt>s are fully evaluated at package build time: the resulting
-package will have library dependency information embedded as lines for ld.so
-that hold the actual major.minor number that was used for building, and
-nothing for static libraries.
-
-<p>
-In fact, providing <tt>LIB_DEPENDS</tt> lines even for static libraries is a
-good idea.
-This will simplify port update if a given dependency goes from a static library
-to a shared library.
-
-<p>
-<tt>WANTLIB</tt> lines must specify the same paths that are used for ld.
-With the same example as above, a standard <tt>qt2</tt> depends fragment would
-say <tt>WANTLIB += lib/qt2/qt.=2</tt>.
-This allows the dependency checking code to do the right thing when multiple
-versions of the same library are encountered.
-
-<h3>Updating ports correctly</h3>
-
-So, when you update or add a port that involves shared libraries, a few details
-must be done right.
-
-<ul><li>
-Make sure the shared libraries major.minor numbers are correct.
-
-<li>
-Verify all ports that depend on your port. Verify that they build correctly
-with your changes.
-Notify corresponding maintainers of the update, so that they can verify their
-ports still run correctly.
-
-<li>
-You may have to adjust dependent ports <tt>WANTLIB</tt> and
-<tt>LIB_DEPENDS</tt>.
-If you introduce new shared libraries, watch out for <tt>BUILD_DEPENDS</tt>
-that need to be turned into <tt>LIB_DEPENDS</tt>.
-
-<li>
-Whenever you introduce a new port, you should verify that you are not creating
-a library that conflicts with an existing library: libraries from two ports
-with the same name are deadly, because their version numbering schemes have
-no chance to match.
-You should try to solve the situation with the software author (for instance,
-a library that is called libnet is definitely badly named).
-<li>
-Check <a href="guide.html#PortsUpdate">the ports update guidelines</a> for a
-more extensive discussion.
-</ul>
-
-<h2 id="Autoconf">GNU autoconf</h2>
-
-Autoconf is a GNU tool that is supposed to help in writing portable programs.
-It is often used together with automake (portable makefiles) and libtool
-(portable shared libraries).
-
-<p>
-Those tools do not work all that well, and often create specific challenges
-in porting software to OpenBSD.
-
-<h3>Detecting the use of autoconf in a piece of software</h3>
-
-Quite a few software projects have configure scripts, and in most cases,
-those scripts were generated by autoconf.
-Such scripts have a line near the top that says:
-
-<blockquote><pre>
-# Generated automatically using autoconf version 2.13
-</pre></blockquote>
-
-or something similar.
-The generation procedure is covered in a following section.
-Most often, autoconf ports come with the generated scripts, and with the
-source scripts that generated these.
-The next section covers the simple case where you simply want to run the
-generated script, and not modify it.
-Make sure you read the section about trojan horses as well.
-
-<h3>Running an autoconf configure script</h3>
-
-This script is normally run during the configure stage of ports building.
-To invoke the configure script, one only has to set
-<tt>CONFIGURE_STYLE=	gnu</tt>
-which will automatically invoke <tt>${WRKSRC}/configure</tt>.
-
-<p>
-If your configure script lies elsewhere, just set <tt>CONFIGURE_SCRIPT</tt> to
-the right value.
-
-<p>
-Configure scripts often take a lot of arguments.
-The default processing of the ports tree will only pass <tt>--prefix</tt> and
-<tt>--sysconfdir</tt> to these.
-Very old configure scripts don't understand <tt>--sysconfdir</tt>; you
-can set <tt>CONFIGURE_STYLE=gnu old</tt> in such cases.
-
-<p>
-Similarly, some ports are not aware of <tt>DESTDIR</tt>.
-Those ports will often accept setting <tt>prefix=${DESTDIR}/usr/local</tt>
-without any issue, which can be done with <tt>CONFIGURE_STYLE=gnu dest</tt>.
-
-<p>
-Ports using autoconf and automake will have <tt>Makefile</tt>s with a specific
-format that begins with a few standard locations:
-
-<ul><li>
-<tt>bindir</tt>: location for binaries
-<li>
-<tt>sysconfdir</tt>: location for configuration
-<li>
-<tt>includedir</tt>: location for include dirs
-</ul>
-
-If the configure script does not allow you to override these, you may
-still be able to do it later on during the build or <tt>fake</tt> stage.
-This does assume, of course, that the only reference to such a directory is with
-in the generated <tt>Makefile</tt>.
-
-<p>
-For instance, a neat trick involves switching <tt>sysconfdir</tt> to
-<tt>${PREFIX}/share/example/pkgname</tt> during the <tt>fake</tt> stage to get
-default config files to package (since packages don't normally store files
-under <tt>/etc</tt>).
-
-<p>
-Ports fully using autoconf and automake  may support building under a different
-directory: try setting <tt>SEPARATE_BUILD=flavored</tt> and see if that works.
-This would allow you to wipe the build tree without wiping the source tree, by
-giving you separate <tt>${WRKSRC}</tt> and <tt>${WRKBUILD}</tt> locations.
-In a few cases, separate builds may need to use gmake, where the rest of the
-port is happy with bsd-make, in which case this is not worth it.
-
-<p>
-Automake will generate a few rules to rebuild all the generated scripts if
-anything changes.
-These often get in the way of OpenBSD specific patches.
-For that reason, as soon as <tt>CONFIGURE_STYLE</tt> corresponds to autoconf
-use, <tt>post-patch</tt> will touch various files in a specific order, so that
-no automake dependencies get triggered later.
-The list of dependencies is given in tsort(1) order in a file mentioned in
-<tt>REORDER_DEPENDENCIES</tt> (the default is
-<tt>${PORTSDIR}/infrastructure/mk/automake.dep</tt>).
-
-<h3>The mechanics of configure checks</h3>
-
-The configure script first runs a fixed script called <tt>config.guess</tt>,
-that will determine which system configure is running on.
-<tt>config.guess</tt> does not vary from port to port and is a fixed script, so
-the OpenBSD ports tree replaces it with a fixed version that knows about some
-specific OpenBSD architectures.
-Since most software packages come with bundled <tt>config.guess</tt>, and since
-some of them are quite old, this is a necessary step.
-If a software package contains more than one <tt>config.guess</tt>, you can
-overwrite them all by setting <tt>MODGNU_CONFIG_GUESS_DIRS</tt> to the full list
-of directories to process.
-
-<p>
-The configure script generated by autoconf then simply checks all functionality
-on the existing system, by looking for a compiler, and running simple test
-programs through it.
-Since some of these tests are quite lengthy, the ports tree primes configure
-with a <tt>CONFIG_SITE=config.site</tt> file.
-Configure will look at the contents of that file first before running the tests.
-A few configure scripts may have bugs that will prevent them from running
-correctly in the presence of <tt>config.site</tt>.
-Setting <tt>CONFIG_SITE</tt> to empty will weed out these kind of problems.
-
-<p>
-Most configure will auto-detect quite a few conditions.
-It is very important to look at configure's options, at configure's output,
-and at the generated <tt>config.log</tt> file: these will tell you what options
-were found, and what options were not found.
-This will allow you to find out when configure did not find a package that was
-installed.
-
-<p>
-This will also tell you which optional packages configure would find.
-In the ports tree, those are called hidden dependencies.
-This is a bad thing: a hidden dependency is some extra package configure will
-pick up if it's installed.
-Then it will proceed in building a mutant package.
-In some cases, the build will fail because of OpenBSD peculiarities.
-In some cases, the package creation will fail, as some files will have different
-names.
-In some cases, the resulting package will be incorrect, as it will fail to
-record any dependency on the optional package.
-So looking at configure's output is one of the most important duty of
-ports' maintainers.
-Watch out for cascading tests: detecting a given feature may lead a configure
-script to try out and find some dependent feature, so you will not see the
-second feature in the configure output unless the first feature is triggered.
-
-<p>
-In case some hidden dependencies are found, some action should be taken.
-The most simple action is to install the optional package, and see what
-configure will do.
-If it detects the package, one can either disable the detection (by using
-configure options, or environment variables, or patching the configure script),
-or verify that the build goes well and add the dependency to the list of
-dependent packages.
-A better choice is to figure out a reasonable set of default dependencies, and
-then add some flavors to cover other common features.
-
-<h3>Re-generating configure scripts</h3>
-
-Configure scripts are normally generated from a <tt>configure.in</tt> file
-(recent versions of autoconf use a <tt>configure.ac</tt> file instead).
-A standard library of definitions is often available in an <tt>aclocal.m4</tt>.
-
-<p>
-In most cases, patching configure directly is a bad idea.
-It is better to patch the <tt>configure.in</tt> file and get the ports tree to
-call autoconf.
-Good porters will endeavor to write <tt>configure.in</tt> changes that they can
-feed to software authors.
-
-<p>
-Different versions of autoconf will produce distinct configure scripts.
-<tt>autoconf-2.13</tt> is special: it was used over a fairly long period, and
-there has been mutant versions of <tt>autoconf-2.13</tt> (actually, betas of a
-newer autoconf) in wide use.
-Hence, using <tt>autoconf-2.13</tt> will often not produce the exact same
-configure script.
-
-<p>
-Since having several autoconf versions around at the same time is useful,
-the autoconf script actually available in the ports tree is part of a port
-called metaauto.
-Which autoconf script actually gets called is controlled through the
-environment variable <tt>AUTOCONF_VERSION</tt>.
-Calling autoconf happens if you set <tt>CONFIGURE_STYLE=autoconf</tt>,
-together with setting <tt>AUTOCONF_VERSION</tt>.
-In most cases, identify the version of autoconf that was used to generate
-the distributed configure script (usually obvious when reading the script)
-and use this same version yourself.
-
-<p>
-Autoconf relies on the standard unix preprocessor m4(1).
-Normally, autoconf relies on some features on the GNU version of m4, gm4.
-Fortunately, OpenBSD's m4 has enough features to run autoconf as well, it
-just needs to be invoked with <tt>-g</tt> to handle autoconf.
-Very seldom, autoconf run with OpenBSD's m4 will produce bogus configure
-scripts.
-The OpenBSD developers will fix such an issue.
-
-<h3>Trojan horses</h3>
-
-Configure scripts are big generated files.
-They are an ideal hiding place for trojan horses, and this has indeed already
-happened in the past.
-This is the main reason for having most versions of autoconf in the tree:
-a good porter is expected to check that a generated configure script matches
-what the ports tree autoconf builds.
-
-<h3>Interaction with other programs</h3>
-
-Autoheader is another program related to autoconf that is normally run to
-create a <tt>config.h.in</tt> file.
-Setting <tt>CONFIGURE_STYLE=autoconf</tt> will also run autoheader.
-A few ports don't use autoheader.
-Setting <tt>CONFIGURE_STYLE=autoconf no-autoheader</tt> will fix that issue.
-
-<p>
-libtool has a few specific hooks in <tt>configure.in</tt>.
-There is often a <tt>libtool.m4</tt> script that goes with it.
-Getting libtool to do the right thing goes beyond the scope of this
-documentation.
-
-<p>
-KDE uses an extra layer on top of autoconf.
-This extra layer assembles a <tt>configure.in</tt> file from a set of
-<tt>configure.in.in</tt> files, and is also able to tweak both
-<tt>configure.in</tt> for snappier results, and <tt>Makefile.in</tt> to allow
-for some supplementary options in building, and to automatically insert
-<tt>DESTDIR</tt> in the right places.
-The <tt>AUTOCONF</tt> variable can be used to tweak the actual autoconf
-script that gets run, and KDE expects <tt>/bin/sh ${WRKDIST}/admin/cvs.sh</tt>
-to work correctly.
-
-<h2 id="Config">Configuration Files</h2>
-
-Packages should only install files under <tt>${PREFIX}</tt>, which is
-<tt>/usr/local</tt> by default.
-On the other hand, the OpenBSD policy is to install most configuration files
-under <tt>${SYSCONFDIR}</tt>, which is <tt>/etc</tt> by default.
-
-<p>
-<i>Note that it is perfectly acceptable for a binary package to have both
-<tt>${PREFIX}</tt> and <tt>${SYSCONFDIR}</tt> hardcoded: <tt>PREFIX</tt> and
-<tt>SYSCONFDIR</tt> are mostly user settings that influence the build of the
-package.</i>
-
-<h3><tt>@@sample</tt> explained</h3>
-
-Packing-lists contain a specific <tt>@@sample</tt> mechanism to deal with
-configuration files:
-
-<ul><li>
-During fake installation, the port should install a sample configuration
-file, for instance as <tt>${PREFIX}/share/examples/PKGNAME/foo.rc</tt>.
-
-<li>
-The packing-list should contain a <tt>@@sample ${SYSCONFDIR}/foo.rc</tt>
-right under the sample configuration file.
-
-<li>
-During installation, the default example configuration file will be copied
-into the actual location where the configuration file should live.
-
-<li>
-During updates and deinstallation, an existing configuration file will be
-compared with the default example file.
-If they differ, the package tools will inform the user and let him perform
-the update/removal himself.
-If they are identical, the package tools know they can proceed and
-update/remove the configuration files without any further precautions.
-</ul>
-
-<h3>more <tt>@@sample</tt> specificities</h3>
-
-Contrary to other files in a packing-list, <tt>@@sample</tt> entries can
-have an absolute path name.
-
-<p>
-Some big packages will also need their own configuration directory,
-<tt>@@sample ${SYSCONFDIR}/directory/</tt> will deal with that.
-
-<p>
-Using <tt>@@sample directory/</tt> to create port specific directories
-that do not hold any configuration files is perfectly good style.
-<tt>@@sample</tt> correctly interprets correct <tt>@@mode</tt>,
-<tt>@@owner</tt>, <tt>@@group</tt> annotations.
-This can be a bit cumbersome, because you will often need to switch back
-and forth between a default mode and a configuration file specific mode.
-
-<h3>Special tricks</h3>
-
-<tt>make update-plist</tt> knows how to copy <tt>@@sample</tt> annotations over,
-but it does not know how to create them, so they have to be written in the
-first place.
-
-<p>
-Note the distinction between configuration files and example configuration
-files: the port must be configured to find its files under
-<tt>${SYSCONFDIR}</tt>.
-It is only the fake installation stage that must put stuff under
-<tt>${PREFIX}/share/examples</tt>.
-One simple way to handle that is to copy the files over in a
-<tt>post-install</tt>.
-
-<p>
-A neat trick which often works is to look at a program's <tt>Makefile</tt>, and
-override the configuration directory in the fake installation stage by using
-specific <tt>FAKE_FLAGS</tt>, for instance:
-
-<blockquote><pre>
-FAKE_FLAGS=	DESTDIR=${WRKINST} \
-		sysconfdir=${WRKINST}${TRUEPREFIX}/share/examples/PKGNAME
-</pre></blockquote>
-
-You just need to watch out for programs that write the configuration directory
-down in specific files during their install stage.
-
-<h3>Examples</h3>
-
-<ul><li>
-The <tt>security/integrit</tt> port uses a configuration directory with a
-few files.
-Its packing-list looks like this:
-
-<blockquote><pre>
-@@comment &#36;OpenBSD&#36;
-@@bin bin/i-ls
-@@info info/integrit.info
-@@man man/man1/i-ls.1
-@@man man/man1/i-viewdb.1
-@@man man/man1/integrit.1
-@@bin sbin/i-viewdb
-@@bin sbin/integrit
-share/doc/integrit/
-share/doc/integrit/README
-share/doc/integrit/crontab
-share/doc/integrit/install_db
-share/doc/integrit/integrit_check
-share/doc/integrit/viewreport
-share/examples/integrit/
-@@sample ${SYSCONFDIR}/integrit/
-share/examples/integrit/root.conf
-@@sample ${SYSCONFDIR}/integrit/root.conf
-share/examples/integrit/src.conf
-@@sample ${SYSCONFDIR}/integrit/src.conf
-share/examples/integrit/usr.conf
-@@sample ${SYSCONFDIR}/integrit/usr.conf
-</pre></blockquote>
-
-<li>
-The <tt>security/nessus</tt> port uses <tt>@@sample dir/</tt> to create
-private directories.
-
-<blockquote><pre>
-...
-sbin/uninstall-nessus
-@@sample ${SYSCONFDIR}/nessus/
-@@mode 0700
-@@sample /var/nessus/
-@@sample /var/nessus/jobs/
-@@sample /var/nessus/logs/
-@@sample /var/nessus/users/
-@@extraunexec rm -fr %D/lib/nessus/plugins/*
-@@extraunexec rm -fr %D/nessus
-@@extraunexec rm -fr /var/nessus
-</pre></blockquote>
-
-<li>
-The <tt>sysutils/nut</tt> port uses a specific owner for its configuration
-files.
-
-<blockquote><pre>
-@@comment &#36;OpenBSD&#36;
-@@conflict upsd-*
-@@newuser ${NUT_USER}:${NUT_ID}:daemon:UPS User:/var/empty:/sbin/nologin
-...
-share/examples/nut/
-@@sample ${SYSCONFDIR}/nut/
-@@owner ${NUT_USER}
-share/examples/nut/ups.conf
-@@sample ${SYSCONFDIR}/nut/ups.conf
-share/examples/nut/upsd.conf
-@@mode 600
-@@sample ${SYSCONFDIR}/nut/upsd.conf
-@@mode
-share/examples/nut/upsd.users
-@@mode 600
-@@sample ${SYSCONFDIR}/nut/upsd.users
-@@mode
-share/examples/nut/upsmon.conf
-@@mode 600
-@@sample ${SYSCONFDIR}/nut/upsmon.conf
-@@mode
-share/examples/nut/upssched.conf
-@@sample ${SYSCONFDIR}/nut/upssched.conf
-@@mode 700
-@@sample /var/db/nut/
-@@mode
-@@owner
-share/ups/
-share/ups/cmdvartab
-share/ups/driver.list
-</pre></blockquote>
-
-</ul>
-
-<h2 id="Audio">Audio applications</h2>
-
-This document currently deals with sampled sounds issues only.
-Contributions dealing with synthesizers and waveform tables are welcome.
-
-<p>
-Audio applications tend to be hard to port, as this is a domain where
-interfaces are not standardized at all, though approaches don't vary
-much between operating systems.
-
-<h3>Using <tt>ossaudio</tt></h3>
-
-The <tt>ossaudio</tt> emulation is possibly the simplest way, but it won't
-always work, and it is not such a great idea usually.
-
-<ul><li>
-It redefines <tt>ioctl</tt>.
-If the code to port uses <tt>ioctl</tt> for more than audio, you will have to
-<tt>#undef ioctl</tt> and use the bare form with <tt>_ossioctl</tt>.
-
-<li>
-Some features of linux sound are not emulated.
-
-<li>
-Applications with correct linux sound support that is not Intel-specific tend
-to use these features.
-</ul>
-
-<h3>Using existing NetBSD or FreeBSD code</h3>
-
-Since we share part of the audio interface with NetBSD and FreeBSD, starting
-from a NetBSD port is reasonable. Be aware that some files changed places,
-and that some entries in <tt>sys/audioio.h</tt> are obsolete.
-Also, many ports tend to be incorrectly coded and to work on only one type
-of machine.
-Some changes are bound to be necessary, though.
-Read through the next part.
-
-<h3>Writing OpenBSD code</h3>
-
-<h3><font color="#0000e0">libsndio</font></h3>
-
-<p>
-OpenBSD has its own audio layer provided by the sndio library, documented in
-<a href="http://man.openbsd.org/sio_open">sio_open(3)</a>.
-Until it's merged into this page, you can find further information about
-programming for this API in the guide,
-<a href="http://www.sndio.org/tips.html">hints on writing and porting audio
-code</a>.
-sndio allows user processes to access
-<a href="http://man.openbsd.org/audio.4">audio(4)</a> hardware and the
-<a href="http://man.openbsd.org/sndiod">sndiod(8)</a> audio server in
-a uniform way.
-It supports full-duplex operation, and when used with the
-<a href="http://man.openbsd.org/sndiod">sndiod(8)</a> server it supports
-resampling and format conversions on the fly.
-
-<h3><font color="#0000e0">Hardware independence</font></h3>
-
-<p>
-<b>YOU SHOULDN'T ASSUME ANYTHING ABOUT THE AUDIO HARDWARE USED.</b>
-<br>
-Wrong code is code that only checks the <tt>a_info.play.precision</tt>
-field against 8 or 16 bits, and assumes unsigned or signed samples based
-on soundblaster behavior.
-You should check the sample type explicitly, and code according to that.
-Simple example:
-
-<blockquote><pre>
-AUDIO_INIT_INFO(&amp;a_info);
-a_info.play.encoding = AUDIO_ENCODING_SLINEAR;
-a_info.play.precision = 16;
-a_info.play.sample_rate = 22050;
-error = ioctl(audio, AUDIO_SETINFO, &amp;a_info);
-if (error)
-    /* deal with it */
-error = ioctl(audio, AUDIO_GETINFO, &amp;a_info);
-switch(a_info.play.encoding)
-    {
-case AUDIO_ENCODING_ULINEAR_LE:
-case AUDIO_ENCODING_ULINEAR_BE:
-    if (a_info.play.precision == 8)
-        /* ... */
-    else
-        /* ... */
-    break;
-case ...
-
-default:
-    /* don't forget to deal with what you don't know !!! For instance, */
-    fprintf(stderr,
-        "Unsupported audio format (%d), ask ports@@ about that\n",
-            a_info.play.encoding);
-
-    }
-    /* now don't forget to check what sampling frequency you actually got */
-</pre></blockquote>
-
-This is about the smallest code fragment that will deal with most issues.
-
-<h3><font color="#0000e0">16 bit formats and endianness</font></h3>
-
-In normal usage, you just ask for an encoding type (e.g.,
-<tt>AUDIO_ENCODING_SLINEAR</tt>), and you retrieve an encoding with endianness
-(e.g., <tt>AUDIO_ENCODING_SLINEAR_LE</tt>).
-Considering that a soundcard does not have to use the same endianness as your
-platform, you should be prepared to deal with that.
-The easiest way is probably to prepare a full audio buffer, and to use swab(3)
-if an endianness change is required.
-Dealing with external samples usually amounts to:
-
-<ol>
-<li>Parsing the sample format
-<li>Getting the sample in
-<li>Swapping endianness if it is not your native format
-<li>Computing what you want to output into a buffer
-<li>Swapping endianness if the sound card is not in your native format
-<li>Playing the buffer
-</ol>
-
-Obviously, you may be able to remove steps 3 and 5 if you are simply playing
-a sound sample which happens to be in your sound card native format.
-
-<h3><font color="#0000e0">Audio quality</font></h3>
-
-Hardware may have some weird limitations, such as being unable to get over
-22050 Hz in stereo, but up to 44100 in mono.
-In such cases, you should give the user a chance to state his preferences,
-then try your best to give the best performance possible.
-For instance, it is stupid to limit the frequency to 22050 Hz because you
-are outputting stereo.
-What if the user does not have a stereo sound system connected to his audio
-card output?
-
-<p>
-It is also stupid to hardcode soundblaster-like limitations into your program.
-You should be aware of these, but do try to get over the 22050&nbsp;Hz/stereo
-barrier and check the results.
-
-<h4>Sampling frequency</h4>
-
-You should definitely check the sampling frequency your card gives you back.
-A 5% discrepancy already amounts to a half-tone, and some people have much
-more accurate hearing than that, though most of us won't notice a thing.
-Your application should be able to perform resampling on the fly, possibly
-naively, or through devious applications of Shannon's resampling formula
-if you can.
-
-<h4>Dynamic range</h4>
-
-Samples don't always use the full range of values they could.
-First, samples recorded with a low gain will not sound very loud on the
-machine, forcing the user to turn the volume up.
-Second, on machines with badly isolated audio, low sound output means
-you mostly hear your machine heart-beat, and not the sound you expected.
-Finally, dumb conversion from 16 bits to 8 bits may leave you with only
-4 bits of usable audio, which makes for an awfully bad quality.
-
-<p>
-If possible, the best solution is probably to scan the whole stream you are
-going to play ahead of time, and to scale it so that it fits the full dynamic
-range.
-If you can't afford that, but you can manage to get a bit of look-ahead on
-what you're going to play, you can adjust the volume boost on the fly, you
-just have to make sure that the boost factor stays at a low frequency compared
-to the sound you want to play, and that you get absolutely
-<i>no overflows</i> -- those will always sound much worse than the improvement
-you're trying to achieve.
-<br>
-As sound volume perception is logarithmic, using arithmetic shifts is usually
-enough.
-If your data is signed, you should explicitly code the shift as a division,
-as C <tt>&gt;&gt;</tt> operator is not portable on signed data.
-
-<p>
-If all else fails, you should at least try to provide the user with a volume
-scaling option.
-
-<h3><font color="#0000e0">Audio performance</font></h3>
-
-Low-end applications usually don't have much to worry about.
-Keep in mind that some of us do use OpenBSD on low-end 68030, and that if a
-sound application can run on that, it should.
-
-<p>
-Don't forget to run benches.
-Theoretical optimizations are just that: theoretical.
-Some hard figures should be collected to check what's a sizeable improvement
-and what's not.
-
-<p>
-For high performance audio applications, such as mpegI-layer3, some points
-should be taken into account:
-
-<ul><li>
-The audio interface does provide you with the natural hardware blocksize.
-Using multiples of that for your output buffer is essential.
-Keep in mind that <tt>write</tt>, as a system call, incurs a high cost compared
-to internal audio processing.
-
-<li>
-Bandwidth is a very important factor when dealing with audio.
-A useful way to optimize an audio player is to see it as a decompressor.
-The longer you can keep with the compressed data, the better usually.
-Very short loops that do very little processing are usually a bad idea.
-It is generally much better to combine all processing into one loop.
-
-<li>
-Some formats do incur more overhead than others.
-The <tt>AUDIO_GETENC</tt> <tt>ioctl</tt> should be used to retrieve all
-formats that the audio device provides.
-Be especially aware of the <tt>AUDIO_ENCODINGFLAG_EMULATED</tt> flag.
-If your application is already able to output all kinds of weird formats,
-and reasonably optimized for that, try to use a native format at all costs.
-On the other hand, the emulation code present in the audio device can be
-assumed to be reasonably optimal, so don't replace it with quickly hacked
-up code.
-</ul>
-
-<p>
-A model you may have to follow to get optimal results is to first compile
-a small test program that enquires about the specific audio hardware available,
-then proceed to configure your program so that it deals optimally with this
-hardware.
-You may reasonably expect people who want good audio performance to recompile
-your port when they change hardware, provided it makes a difference.
-
-<h3><font color="#0000e0">Real time or synchronized</font></h3>
-
-Considering that OpenBSD is not real time, you may still wish to write audio
-applications that are mostly real time, for instance games.
-In such a case, you will have to lower the blocksize so that the sound effects
-don't get out of synch with the current game.
-The problem with this if that the audio device may get starved, which yields
-horrible results.
-
-<p>
-In case you simply want audio to be synchronized with some graphics output,
-but the behavior of your program is predictable, synchronization is easier
-to achieve.
-You just play your audio samples, and ask the audio device what you are
-currently playing with <tt>AUDIO_GETOOFFS</tt>, then use that information
-to post-synchronize graphics.
-Provided you ask sufficiently often (say, every tenth of a second), and as
-long as you have enough horse-power to run your application, you can get very
-good synchronization that way.
-You might have to tweak the figures by a constant offset, as there is some lag
-between what the audio reports, what's currently playing, and the time it takes
-for XWindow to display something.
-
-<h3>Contributing code back</h3>
-
-In the case of audio applications, working with the original program's author
-is very important.
-If their code only works with soundblaster cards, for instance, there is a good
-chance they will have to cope with other technology soon.
-
-<p>
-<b>If you don't send your comments to the author, your work will have been
-useless</b>.
-
-<p>
-It may also be that the author has already noticed whatever problems
-you are currently dealing with, and is addressing them in his current
-development tree.
-If the patches you are writing amount to more than a handful of lines,
-cooperation is almost certainly a very good idea.
-
-<h2 id="Mandoc">Manual pages</h2>
-
-This section provides guidelines on how to deal with groff versus
-<a href="http://man.openbsd.org/mandoc">mandoc(1)</a> issues in ports.
-
-<h3>Should I check anything?</h3>
-
-When creating a new port or updating an existing port, please
-check whether the port can use mandoc to format its manuals.
-Both the automatic and the manual checks described below are required.
-This may make the manuals more useable for the port's users, and it will
-reduce the port's build time.
-
-<p>
-In the following two cases, mandoc will almost certainly work.
-If you encounter a case where it doesn't, please report that to
-schwarze@@, who will probably fix mandoc.
-
-<ul><li>
-The documentation is written using the
-<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> language rather than the
-<a href="http://man.openbsd.org/man.7">man(7)</a> language.
-To distinguish the two, look at the beginning of the manual source code:
-.Dd is mdoc(7), .TH is man(7).
-
-<li>
-The documentation is man(7), but generated by
-<a href="http://man.openbsd.org/pod2man">pod2man(1)</a>.
-For such pages, the first line of the manual source code reads
-<br>
-<tt>.\" Automatically generated by Pod::Man...</tt>
-</ul>
-
-<p>
-Of course, most ports not matching these criteria work as well.
-However,
-
-<ul><li>
-If a port is using DocBook, there is a high probability that
-<tt>USE_GROFF</tt> is still required.
-
-<li>
-If a port is using <tt>CONFIGURE_STYLE = imake</tt>, merely removing
-<tt>USE_GROFF</tt> is insufficient, because
-<tt>/usr/X11R6/lib/X11/config/OpenBSD.cf</tt> will still attempt to call groff.
-Typically, you need to convince Imake to not format the manual(s),
-for example by changing <tt>ComplexProgramTarget</tt> to
-<tt>ComplexProgramTargetNoMan</tt> and install the manual(s) by hand, typically
-using a <tt>post-install</tt> target in the port <tt>Makefile</tt>.
-See <tt>sysutils/xbattbar</tt> for a simple example.
-</ul>
-
-<h3>Which tools do I need?</h3>
-
-The <a href="http://man.openbsd.org/mandoc.1">mandoc(1)</a> utility
-is included in the base system and quite stable by now, so you don't need
-to do anything special about it.
-
-<p>
-In the very unusual case that you suspect recent changes to mandoc are
-important for the port, you can easily update mandoc, even without
-updating the rest of the system:
-
-<blockquote><pre>
-$ <b>cd /usr/src/usr.bin/mandoc/</b>
-$ <b>cvs -q up -Pd</b>
-$ <b>make cleandir</b>
-$ <b>make obj</b>
-$ <b>make depend</b>
-$ <b>make</b>
-$ <b>doas make install</b>
-</pre></blockquote>
-
-Optionally, you may also get a copy of the
-<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/gmdiff?cvsroot=mdocml">gmdiff</a>
-utility script that helps to compare groff and mandoc output.
-The gmdiff script is not strictly required, doing the necessary checks by hand
-is perfectly acceptable.
-
-<h3>How do I report the results?</h3>
-
-The following paragraphs ask for sending in reports to the mandoc maintainers
-in some particular situations.
-Before sending such reports, please always tick off the following checklist:
-
-<ol><li>
-For the time being, do not report problems related to DocBook.
-We know source code generated by DocBook is extremely crappy even
-when DocBook works as intended, and on top of that, DocBook tends
-to be more buggy than average software.
-We also know that mandoc usually parses and renders DocBook output badly,
-and we know what to do to improve mandoc in this respect.
-This may change in the future, but right now, more than half of all reports
-that fail to reveal new, useful information are related to DocBook, and the
-signal-to-noise ratio in DocBook reports is too low to be worthwhile.
-
-<li>
-Attach the <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
-<a href="http://man.openbsd.org/man.7">man(7)</a> source file in question
-to the mail.
-This may either be a file contained in the distribution tarball or a file
-generated during the build process.
-In case several files exhibit the problems, choose one that shows all problems.
-In case different files exhibit different problems you wish to report, attach
-as many files as necessary.
-The point is to save the mandoc maintainers the work of downloading
-distribution tarballs, searching them for source files, sometimes even
-installing software before being able to start a build, while you have that
-information readily at hand, anyway.
-
-<li>
-Briefly describe all the problems you want to report, and where they can be
-seen in which file.
-We have spent time wondering what exactly the reporter's point was more than
-once in the past.
-
-<li>
-In case your report is related to errors or warnings printed by the mandoc
-utility, copy the output of <tt>mandoc -Tlint</tt> (or
-<tt>mandoc -Tlint -Werror</tt> when warnings are irrelevant) into the body of
-your mail.
-Usually, this is easy to reproduce, but it did happen that it was not, causing
-unnecessary confusion.
-
-<li>
-In case the version of the port you are talking about is not yet committed,
-please attach what is needed to build the uncommitted port: A diff against
--current when it is an update, or a tarball of the port directory when it is
-a completely new port.
-Very often, the source files will be sufficient to identify the problem;
-however, in those cases where they are not, mailing back and forth or searching
-mailing list archives just to get the needed additional information is a waste
-of time.
-
-<li>
-Send mail to schwarze@@.
-Unless you are the maintainer of the port, Cc: him or her.
-Unless you are an OpenBSD developer, in case you regularly work with a
-developer who is committing your ports and who you know is interested in
-this port, Cc:ing him or her may be useful as well.
-</ol>
-
-<h3>How do I do automatic checking?</h3>
-
-To do the automatic part of the check, please run the following command over
-all <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> and
-<a href="http://man.openbsd.org/man.7">man(7)</a> manual source files contained
-in the port:
-
-<blockquote><pre>
-$ <b>mandoc -Tlint -Werror *</b>
-</pre></blockquote>
-
-If you get any <tt>UNSUPPORTED</tt> messages, the respective
-places of the manual page require careful scrutiny.
-It is likely that the page will be misformatted with mandoc and the
-port requires <tt>USE_GROFF</tt>.
-If you are sure that all misformattings related to the unsupported
-features are minor and don't hinder the reader, you may remove
-<tt>USE_GROFF</tt>; but in case of doubt, leave <tt>USE_GROFF</tt>
-in place when there are <tt>UNSUPPORTED</tt> messages.
-
-<p>
-If there are any <tt>ERROR</tt> messages, they should also be briefly
-looked at.
-In the unusual case that they are related to misformatting with
-mandoc that doesn't happen with groff, that should be reported; the
-mandoc maintainer might choose to let mandoc issue <tt>UNSUPPORTED</tt>
-messages in additional cases or to fix the formatting.
-
-<p>
-Besides, sending a report to the mandoc developers is useful if:
-
-<ul><li>
-The manual pages in question are in
-<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> format.
-
-<li>
-The manual pages in question are generated by
-<a href="http://man.openbsd.org/pod2man">pod2man(1)</a>.
-
-<li>
-You find one or more messages "ERROR: skipping unknown macro", and the fact
-that the manual pages you are looking at use these macros is not yet reported
-in the mandoc
-<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/TODO?cvsroot=mdocml">TODO</a>
-list.
-Even if we already now that a certain roff request is still unsupported,
-learning which manuals actually use it is useful to get our priorities right
-when implementing new features.
-</ul>
-
-<p>
-If manual pages look good with groff, never patch them to get rid of mandoc
-errors.
-That would merely be a make-work project not helping anyone: It will neither
-help to improve upstream manuals nor mandoc.
-
-<h3>How do I do manual checking?</h3>
-
-If there are no errors or the errors are not related to serious
-misformatting with mandoc, proceed to the manual part of the check.
-Look at the manuals as formatted by mandoc.
-Do they look fine?
-If yes, you do not need <tt>USE_GROFF</tt>, and there is no need to report
-anything.
-
-<p>
-If there are no errors, but mandoc output has serious issues, that is,
-relevant information is missing or part of the output is garbled,
-please always report your findings, even if you happen to know it's due to
-a known issue with mandoc.
-We do want to know which issues cause serious problems in practice, such that
-we can address the most pressing issues first.
-
-<p>
-If mandoc output has serious issues and groff output looks bad as well, then
-the manuals are probably just broken upstream.
-In that case, you have the usual options when porting broken software:
-Abandon the port, ignore the problem, report upstream, and/or patch the bugs
-away.
-In case you need help with the latter, talk to schwarze@@.
-
-<p>
-If there are no errors, but mandoc output has minor issues that don't really
-hinder the user when reading the manual, you are welcome to report these
-issues as well.
-In that case, you are even more welcome to first check the mandoc
-<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/TODO?cvsroot=mdocml">TODO</a>
-list, to avoid having the same minor issues reported again and again -
-but in case of doubt, it is always better to report dupes than to let
-problems go unnoticed.
-
-<p>
-If there are only very few errors, in particular if you get the
-impression that mandoc output is just fine all the same, you don't
-usually need <tt>USE_GROFF=Yes</tt>.
-In case of doubt, ask for advice.
-Such questions often help to improve mandoc error reporting, in
-particular to identify and remove bogus mandoc errors messages.
-
-<p>
-To speed up the manual checks, in particular if you are often doing mandoc
-checks on OpenBSD ports, and to reduce the risk of overlooking problems,
-consider using the 
-<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/gmdiff?cvsroot=mdocml">gmdiff</a>
-utility script.
-It takes the file names of an arbitrary number of manual source files as
-arguments, runs both groff and mandoc on all the files in turn, and compares
-the output of both programs.
-However, bear in mind that you are still doing manual checks with the ultimate
-goal to judge the quality of mandoc output: all the above points still apply
-even when you are using the gmdiff script to help your work.
-Also note that gmdiff will usually find minor formatting differences between
-both programs, in particular with respect to whitespace.
-If mandoc output looks good, even if it's slightly different from groff output,
-<tt>USE_GROFF</tt> is not needed.
-
-<p>
-For ease of use, it's possible to call gmdiff from a custom target in mk.conf:
-
-<blockquote><pre>
-gmdiff:
-	@@make fake; cd ${WRKINST}${TRUEPREFIX}; find man -type f -path 'man/man*' -print0 | xargs -0r gmdiff | less
-</pre></blockquote>
-
-<h3>What about warnings?</h3>
-
-You might wonder about mandoc warnings, as opposed to mandoc errors.
-In a nutshell, the distinction is that errors may seriously impact the
-usefulness of the output, while warnings might at the worst cause minor
-formatting glitches, if at all.
-If a mandoc warning appears to be related to seriously garbled output,
-that's probably a bug in mandoc and should always be reported.
-
-<p>
-That said, it is obvious that warnings are irrelevant for the decision
-whether to use or not to use mandoc for a given port.
-They are for manual authors, to help improve manual quality, not for porters.
-
-<h3>How can I help upstream?</h3>
-
-In case you are one of the port's upstream developers, or know they care
-about good quality of their manuals and gladly accept patches, it may make
-sense to use <tt>mandoc -Tlint</tt> to identify potential formatting issues
-and to produce patches to be submitted upstream.
-Usually, there is no need to put such patches into the ports tree.
-
-<p>
-As with any kind of linting, before changing your
-<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
-<a href="http://man.openbsd.org/man.7">man(7)</a> source code or sending out
-patches, first make sure you are chasing real problems in the manuals.
-The mandoc utility is not perfect.
-It may produce bogus warnings.
-We are trying to fix that, but there will always be room for improvement.
-In case of doubt, report the issue and ask for advice.
-
-<h2 id="RcScripts">rc.d(8) scripts</h2>
-
-This section is intended to provide some information on writing and installing
-<i>rc.d(8) scripts</i>.
-
-<p>
-Ports that install a daemon benefit greatly from having rc.d(8) scripts.
-It allows the user to easily check if the daemon is running, as well as
-providing an easy and consistent way to start and stop it.
-
-<h3>Writing rc.d(8) scripts</h3>
-
-Writing an rc.d(8) script is straightforward and simple due to the clean
-and simple design of the
-<a href="http://man.openbsd.org/rc.subr">rc.subr(8)</a> system.
-Though there are several things to take into account.
-
-<ol><li>
-The script has to be placed into <tt>${PKGDIR}</tt> with a <tt>.rc</tt>
-extension, like <tt>mpd.rc</tt>.
-This will allow the package tools to pick it up.
-<!-- and it to the PLIST. -->
-
-<li>
-Be sure to test all the functions of the script, especially the <i>reload</i>
-function.
-
-<li
->Use <tt>${TRUEPREFIX}</tt> when writing the path to the daemon.
-</ol>
-
-
-<h3>Example script</h3>
-
-Below is an example of a typical script.
-
-<blockquote><pre>
-#!/bin/sh
-#
-# &#36;OpenBSD: munin_node.rc,v 1.6 2013/01/08 11:14:02 kirby Exp $
-
-daemon="${TRUEPREFIX}/sbin/munin-node"
-
-. /etc/rc.d/rc.subr
-
-pexp="/usr/bin/perl -wT $daemon"
-
-rc_pre() {
-	install -d -o _munin /var/run/munin
-}
-
-rc_cmd $1
-</pre></blockquote>
-
-A <a href="https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/infrastructure/templates/rc.template">
-template script</a> can also be found in the templates directory of your
-ports tree.
-
-<p>
-</body>
-</html>
-
@


1.57
log
@switch cvsweb and a couple of other links to https. thanks nick and tj!
@
text
@d1 1326
a1326 1318
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD Ports: Special Porting Topics</title>
<meta name= "description"   content= "OpenBSD Porting Guide">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/ports/specialtopics.html">
</head>

<body bgcolor= "#ffffff" text= "#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">Ports - Special Porting Topics</font>
<small>
<a href="index.html" style="font-weight:normal;float:right">[Handbook Index]</a>
</small>
</h2>
<hr>
<p>

<ul>
  <li><a href="#SharedLibs">Shared libraries</a>
  <li><a href="#Autoconf"  >GNU autoconf</a>
  <li><a href="#Config"    >Configuration files</a>
  <li><a href="#Audio"     >Audio applications</a>
  <li><a href="#Mandoc"    >Manual pages</a>
  <li><a href="#RcScripts" >rc.d(8) scripts</a>
</ul>

<hr>

<h2 id="SharedLibs">Shared libraries</h2>

<h3>Understanding shared libraries number rules</h3>
Shared libraries are a bit tricky for a variety of reasons.
You must understand the library naming scheme:
<tt>libfoo.so.major.minor</tt>.

<p>
When you link a program, the linker ld embeds that information in the created
binary.
You can see it with ldd. Later, when you run that program, the dynamic linker
ld.so uses that information to find the right dynamic library:

<ul><li>
A library with the same exact major number is required.

<li>
A library with an equal or higher minor number is required.
</ul>

So, this means that <b>all</b> libraries with the same major number and an
equal or higher minor number <b>must satisfy the binary API that the program
expects</b>.
If they do not, then your port is broken.
Specifically, it will break when users try to update their system.

<p>
The rules for shared libraries are quite simple.

<ul><li>
If functions were added to the library, you must bump the library minor
number: a program that needs those functions has no way to require it except
by asking explicitly for at least this version.

<li>
If the existing API changes, that is, if any function signature is altered,
or if valid calling sequences are no longer valid, if a type changes in an
incompatible way, the library major number <b>must be bumped</b>.

<li>
This includes removing old functions.
Any function removal should trigger a major number bump.

<li>A good hint is to compare the output of

<blockquote><pre>
$ <b>nm -g oldlib.so.X.Y | cut -c10- | grep -e^T</b>
</pre></blockquote>

and

<blockquote><pre>
$ <b>nm -g newlib.so.X.Y | cut -c10- | grep -e^T</b>
</pre></blockquote>

This won't show if functions arguments type changed, but at least you'll see
quickly if some functions were added and/or removed.
</ul>

<p>
Sometimes, it happens that a library is written as several files, and that
internal functions happen to be visible to communicate between those files.
Those function names traditionally begin with an underscore, and are not
part of the API proper.

<h3>Tweaking ports builds to achieve the right names</h3>

Quite a few ports need tweaks to build shared libraries correctly anyways.
Remember that building shared libraries should be done with

<blockquote><pre>
$ <b>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</b>
</pre></blockquote>

Trying to rename the library after the fact to adjust the version number
does not work: ELF libraries use some extra magic to set the library
internal name, so you must link it with the correct version the first time.

<p>
On the other hand, remember that you can override <tt>Makefile</tt> variables
from the command line, by using <tt>MAKE_FLAGS</tt> in the port's
<tt>Makefile</tt>.
In some cases, the program you're porting will have a simple variable which
you can override by setting the library version in MAKE_FLAGS, for example
<tt>MAKE_FLAGS= SO_VERSION=${LIBfoo_VERSION}</tt>.
In others, the port will need to be patched to make use of such a variable.

<p>
The ports infrastructure already handles these details in libtool-based
and CMake-based ports.
For libtool, by default the version from the base OS is used, but in some
cases this is insufficient and <tt>USE_LIBTOOL=gnu</tt> can be set.
CMake is handled by using the <tt>cmake.port.mk</tt> module:
<tt>MODULES += devel/cmake</tt>.
In these cases, most details are handled automatically:

<ul><li>
<tt>SHARED_LIBS</tt> is examined and version numbers are automatically replaced.

<li>
Shared library building is logged in <tt>${WRKBUILD}/shared_libs.log</tt>,
which can be directly included in the port's <tt>Makefile</tt>.
</ul>

<h3>Avoid DT_SONAME hardcoding</h3>

Some ports use ld(1)'s <tt>-soname</tt> flag to override the library
specification in the DT_SONAME field.
Setting DT_SONAME is not a bug itself but is usually not desirable on
OpenBSD where ld.so(1) is smart and the ports tree takes care of library
versioning.
Moreover, a wrong soname can result in unusable binaries that depend on this
library; either always or after some updates to the port containing the library.
To check if the DT_SONAME field is set, run the following command:

<blockquote><pre>
$ <b>objdump -x /path/to/libfoo.so.0.0 | fgrep SONAME</b>
  SONAME      libfoo.so.0.0
</pre></blockquote>

As a general rule, <em>setting soname explicitly should be patched out</em>.
The only exception is a situation when the right soname is recorded
<em>and</em> it's hard to patch soname-related code out <em>and</em>
upstream won't accept such a patch.
In that case the soname should fully match the file name (see the example
above).

<h3>Try putting all user visible libraries into /usr/local/lib</h3>

As a rule, requesting the user to add directories to their ldconfig path is a
very bad idea: all shared libraries that are linked directly to programs
should appear in <tt>/usr/local/lib</tt>.
However, it is quite possible to use a symbolic link to the actual library.
You should understand the library lookup rules:

<ul><li>
At build time, ld uses <tt>-L</tt> flags to set up paths to look for libraries.
It stops looking as soon as it finds a library that matches its requirements.

<li>
At run time, ld.so uses the information cached through ldconfig to find the
required library.
</ul>

So, let us assume you have two ports that provide two major versions of a
given library, say <tt>qt.1.45</tt> and <tt>qt.2.31</tt>.
Since both ports can be installed simultaneously, to make sure a given program
will link against <tt>qt.1</tt>, that library is provided as
<tt>/usr/local/lib/qt/libqt.so.1.45</tt>, and programs will be linked using

<blockquote><pre>
$ <b>ld -o program program.o -L/usr/local/lib/qt -lqt</b>
</pre></blockquote>

Similarly, a program that links with <tt>qt.2</tt> will use the
<tt>/usr/local/lib/qt2/libqt.so.2.31</tt> file with

<blockquote><pre>
$ <b>ld -o program program.o -L/usr/local/lib/qt2 -lqt</b>
</pre></blockquote>

To solve those libraries at run-time, a link called
<tt>/usr/local/lib/libqt.so.1.45</tt> and a link called
<tt>/usr/local/lib/libqt.so.2.31</tt> have been provided.
This is enough to satisfy ld.so.

<p>
It is an error to link a program using <tt>qt1</tt> with

<blockquote><pre>
$ <b>ld -o program program.o -L/usr/local/lib -lqt</b>
</pre></blockquote>

This code assumes that <tt>qt.2.31</tt> is not installed, which is
a wrong assumption.

<p>
Such tricks are only necessary in the rare cases of very pervasive
libraries where a transition period between major versions must be
provided.
In general, it is enough to make sure the library appears in
<tt>/usr/local/lib</tt>.

<h3>Writing library dependencies correctly</h3>

The new dependency code does need complete library dependencies.
You must use <tt>make lib-depends-check</tt> or
<tt>make port-lib-depends-check</tt> to verify a port does mention all
libraries it requires.
You just write them in <tt>LIB_DEPENDS</tt>/<tt>WANTLIB</tt> like this:

<blockquote><pre>
LIB_DEPENDS += x11/gtk+
WANTLIB += gtk&gt;=1.2 gdk&gt;=1.2
</pre></blockquote>

It is not an error to specify static libraries on a <tt>WANTLIB</tt> line as
well.
<tt>WANTLIB</tt>s are fully evaluated at package build time: the resulting
package will have library dependency information embedded as lines for ld.so
that hold the actual major.minor number that was used for building, and
nothing for static libraries.

<p>
In fact, providing <tt>LIB_DEPENDS</tt> lines even for static libraries is a
good idea.
This will simplify port update if a given dependency goes from a static library
to a shared library.

<p>
<tt>WANTLIB</tt> lines must specify the same paths that are used for ld.
With the same example as above, a standard <tt>qt2</tt> depends fragment would
say <tt>WANTLIB += lib/qt2/qt.=2</tt>.
This allows the dependency checking code to do the right thing when multiple
versions of the same library are encountered.

<h3>Updating ports correctly</h3>

So, when you update or add a port that involves shared libraries, a few details
must be done right.

<ul><li>
Make sure the shared libraries major.minor numbers are correct.

<li>
Verify all ports that depend on your port. Verify that they build correctly
with your changes.
Notify corresponding maintainers of the update, so that they can verify their
ports still run correctly.

<li>
You may have to adjust dependent ports <tt>WANTLIB</tt> and
<tt>LIB_DEPENDS</tt>.
If you introduce new shared libraries, watch out for <tt>BUILD_DEPENDS</tt>
that need to be turned into <tt>LIB_DEPENDS</tt>.

<li>
Whenever you introduce a new port, you should verify that you are not creating
a library that conflicts with an existing library: libraries from two ports
with the same name are deadly, because their version numbering schemes have
no chance to match.
You should try to solve the situation with the software author (for instance,
a library that is called libnet is definitely badly named).
<li>
Check <a href="guide.html#PortsUpdate">the ports update guidelines</a> for a
more extensive discussion.
</ul>

<h2 id="Autoconf">GNU autoconf</h2>

Autoconf is a GNU tool that is supposed to help in writing portable programs.
It is often used together with automake (portable makefiles) and libtool
(portable shared libraries).

<p>
Those tools do not work all that well, and often create specific challenges
in porting software to OpenBSD.

<h3>Detecting the use of autoconf in a piece of software</h3>

Quite a few software projects have configure scripts, and in most cases,
those scripts were generated by autoconf.
Such scripts have a line near the top that says:

<blockquote><pre>
# Generated automatically using autoconf version 2.13
</pre></blockquote>

or something similar.
The generation procedure is covered in a following section.
Most often, autoconf ports come with the generated scripts, and with the
source scripts that generated these.
The next section covers the simple case where you simply want to run the
generated script, and not modify it.
Make sure you read the section about trojan horses as well.

<h3>Running an autoconf configure script</h3>

This script is normally run during the configure stage of ports building.
To invoke the configure script, one only has to set
<tt>CONFIGURE_STYLE=	gnu</tt>
which will automatically invoke <tt>${WRKSRC}/configure</tt>.

<p>
If your configure script lies elsewhere, just set <tt>CONFIGURE_SCRIPT</tt> to
the right value.

<p>
Configure scripts often take a lot of arguments.
The default processing of the ports tree will only pass <tt>--prefix</tt> and
<tt>--sysconfdir</tt> to these.
Very old configure scripts don't understand <tt>--sysconfdir</tt>; you
can set <tt>CONFIGURE_STYLE=gnu old</tt> in such cases.

<p>
Similarly, some ports are not aware of <tt>DESTDIR</tt>.
Those ports will often accept setting <tt>prefix=${DESTDIR}/usr/local</tt>
without any issue, which can be done with <tt>CONFIGURE_STYLE=gnu dest</tt>.

<p>
Ports using autoconf and automake will have <tt>Makefile</tt>s with a specific
format that begins with a few standard locations:

<ul><li>
<tt>bindir</tt>: location for binaries
<li>
<tt>sysconfdir</tt>: location for configuration
<li>
<tt>includedir</tt>: location for include dirs
</ul>

If the configure script does not allow you to override these, you may
still be able to do it later on during the build or <tt>fake</tt> stage.
This does assume, of course, that the only reference to such a directory is with
in the generated <tt>Makefile</tt>.

<p>
For instance, a neat trick involves switching <tt>sysconfdir</tt> to
<tt>${PREFIX}/share/example/pkgname</tt> during the <tt>fake</tt> stage to get
default config files to package (since packages don't normally store files
under <tt>/etc</tt>).

<p>
Ports fully using autoconf and automake  may support building under a different
directory: try setting <tt>SEPARATE_BUILD=flavored</tt> and see if that works.
This would allow you to wipe the build tree without wiping the source tree, by
giving you separate <tt>${WRKSRC}</tt> and <tt>${WRKBUILD}</tt> locations.
In a few cases, separate builds may need to use gmake, where the rest of the
port is happy with bsd-make, in which case this is not worth it.

<p>
Automake will generate a few rules to rebuild all the generated scripts if
anything changes.
These often get in the way of OpenBSD specific patches.
For that reason, as soon as <tt>CONFIGURE_STYLE</tt> corresponds to autoconf
use, <tt>post-patch</tt> will touch various files in a specific order, so that
no automake dependencies get triggered later.
The list of dependencies is given in tsort(1) order in a file mentioned in
<tt>REORDER_DEPENDENCIES</tt> (the default is
<tt>${PORTSDIR}/infrastructure/mk/automake.dep</tt>).

<h3>The mechanics of configure checks</h3>

The configure script first runs a fixed script called <tt>config.guess</tt>,
that will determine which system configure is running on.
<tt>config.guess</tt> does not vary from port to port and is a fixed script, so
the OpenBSD ports tree replaces it with a fixed version that knows about some
specific OpenBSD architectures.
Since most software packages come with bundled <tt>config.guess</tt>, and since
some of them are quite old, this is a necessary step.
If a software package contains more than one <tt>config.guess</tt>, you can
overwrite them all by setting <tt>MODGNU_CONFIG_GUESS_DIRS</tt> to the full list
of directories to process.

<p>
The configure script generated by autoconf then simply checks all functionality
on the existing system, by looking for a compiler, and running simple test
programs through it.
Since some of these tests are quite lengthy, the ports tree primes configure
with a <tt>CONFIG_SITE=config.site</tt> file.
Configure will look at the contents of that file first before running the tests.
A few configure scripts may have bugs that will prevent them from running
correctly in the presence of <tt>config.site</tt>.
Setting <tt>CONFIG_SITE</tt> to empty will weed out these kind of problems.

<p>
Most configure will auto-detect quite a few conditions.
It is very important to look at configure's options, at configure's output,
and at the generated <tt>config.log</tt> file: these will tell you what options
were found, and what options were not found.
This will allow you to find out when configure did not find a package that was
installed.

<p>
This will also tell you which optional packages configure would find.
In the ports tree, those are called hidden dependencies.
This is a bad thing: a hidden dependency is some extra package configure will
pick up if it's installed.
Then it will proceed in building a mutant package.
In some cases, the build will fail because of OpenBSD peculiarities.
In some cases, the package creation will fail, as some files will have different
names.
In some cases, the resulting package will be incorrect, as it will fail to
record any dependency on the optional package.
So looking at configure's output is one of the most important duty of
ports' maintainers.
Watch out for cascading tests: detecting a given feature may lead a configure
script to try out and find some dependent feature, so you will not see the
second feature in the configure output unless the first feature is triggered.

<p>
In case some hidden dependencies are found, some action should be taken.
The most simple action is to install the optional package, and see what
configure will do.
If it detects the package, one can either disable the detection (by using
configure options, or environment variables, or patching the configure script),
or verify that the build goes well and add the dependency to the list of
dependent packages.
A better choice is to figure out a reasonable set of default dependencies, and
then add some flavors to cover other common features.

<h3>Re-generating configure scripts</h3>

Configure scripts are normally generated from a <tt>configure.in</tt> file
(recent versions of autoconf use a <tt>configure.ac</tt> file instead).
A standard library of definitions is often available in an <tt>aclocal.m4</tt>.

<p>
In most cases, patching configure directly is a bad idea.
It is better to patch the <tt>configure.in</tt> file and get the ports tree to
call autoconf.
Good porters will endeavor to write <tt>configure.in</tt> changes that they can
feed to software authors.

<p>
Different versions of autoconf will produce distinct configure scripts.
<tt>autoconf-2.13</tt> is special: it was used over a fairly long period, and
there has been mutant versions of <tt>autoconf-2.13</tt> (actually, betas of a
newer autoconf) in wide use.
Hence, using <tt>autoconf-2.13</tt> will often not produce the exact same
configure script.

<p>
Since having several autoconf versions around at the same time is useful,
the autoconf script actually available in the ports tree is part of a port
called metaauto.
Which autoconf script actually gets called is controlled through the
environment variable <tt>AUTOCONF_VERSION</tt>.
Calling autoconf happens if you set <tt>CONFIGURE_STYLE=autoconf</tt>,
together with setting <tt>AUTOCONF_VERSION</tt>.
In most cases, identify the version of autoconf that was used to generate
the distributed configure script (usually obvious when reading the script)
and use this same version yourself.

<p>
Autoconf relies on the standard unix preprocessor m4(1).
Normally, autoconf relies on some features on the GNU version of m4, gm4.
Fortunately, OpenBSD's m4 has enough features to run autoconf as well, it
just needs to be invoked with <tt>-g</tt> to handle autoconf.
Very seldom, autoconf run with OpenBSD's m4 will produce bogus configure
scripts.
The OpenBSD developers will fix such an issue.

<h3>Trojan horses</h3>

Configure scripts are big generated files.
They are an ideal hiding place for trojan horses, and this has indeed already
happened in the past.
This is the main reason for having most versions of autoconf in the tree:
a good porter is expected to check that a generated configure script matches
what the ports tree autoconf builds.

<h3>Interaction with other programs</h3>

Autoheader is another program related to autoconf that is normally run to
create a <tt>config.h.in</tt> file.
Setting <tt>CONFIGURE_STYLE=autoconf</tt> will also run autoheader.
A few ports don't use autoheader.
Setting <tt>CONFIGURE_STYLE=autoconf no-autoheader</tt> will fix that issue.

<p>
libtool has a few specific hooks in <tt>configure.in</tt>.
There is often a <tt>libtool.m4</tt> script that goes with it.
Getting libtool to do the right thing goes beyond the scope of this
documentation.

<p>
KDE uses an extra layer on top of autoconf.
This extra layer assembles a <tt>configure.in</tt> file from a set of
<tt>configure.in.in</tt> files, and is also able to tweak both
<tt>configure.in</tt> for snappier results, and <tt>Makefile.in</tt> to allow
for some supplementary options in building, and to automatically insert
<tt>DESTDIR</tt> in the right places.
The <tt>AUTOCONF</tt> variable can be used to tweak the actual autoconf
script that gets run, and KDE expects <tt>/bin/sh ${WRKDIST}/admin/cvs.sh</tt>
to work correctly.

<h2 id="Config">Configuration Files</h2>

Packages should only install files under <tt>${PREFIX}</tt>, which is
<tt>/usr/local</tt> by default.
On the other hand, the OpenBSD policy is to install most configuration files
under <tt>${SYSCONFDIR}</tt>, which is <tt>/etc</tt> by default.

<p>
<i>Note that it is perfectly acceptable for a binary package to have both
<tt>${PREFIX}</tt> and <tt>${SYSCONFDIR}</tt> hardcoded: <tt>PREFIX</tt> and
<tt>SYSCONFDIR</tt> are mostly user settings that influence the build of the
package.</i>

<h3><tt>@@sample</tt> explained</h3>

Packing-lists contain a specific <tt>@@sample</tt> mechanism to deal with
configuration files:

<ul><li>
During fake installation, the port should install a sample configuration
file, for instance as <tt>${PREFIX}/share/examples/PKGNAME/foo.rc</tt>.

<li>
The packing-list should contain a <tt>@@sample ${SYSCONFDIR}/foo.rc</tt>
right under the sample configuration file.

<li>
During installation, the default example configuration file will be copied
into the actual location where the configuration file should live.

<li>
During updates and deinstallation, an existing configuration file will be
compared with the default example file.
If they differ, the package tools will inform the user and let him perform
the update/removal himself.
If they are identical, the package tools know they can proceed and
update/remove the configuration files without any further precautions.
</ul>

<h3>more <tt>@@sample</tt> specificities</h3>

Contrary to other files in a packing-list, <tt>@@sample</tt> entries can
have an absolute path name.

<p>
Some big packages will also need their own configuration directory,
<tt>@@sample ${SYSCONFDIR}/directory/</tt> will deal with that.

<p>
Using <tt>@@sample directory/</tt> to create port specific directories
that do not hold any configuration files is perfectly good style.
<tt>@@sample</tt> correctly interprets correct <tt>@@mode</tt>,
<tt>@@owner</tt>, <tt>@@group</tt> annotations.
This can be a bit cumbersome, because you will often need to switch back
and forth between a default mode and a configuration file specific mode.

<h3>Special tricks</h3>

<tt>make update-plist</tt> knows how to copy <tt>@@sample</tt> annotations over,
but it does not know how to create them, so they have to be written in the
first place.

<p>
Note the distinction between configuration files and example configuration
files: the port must be configured to find its files under
<tt>${SYSCONFDIR}</tt>.
It is only the fake installation stage that must put stuff under
<tt>${PREFIX}/share/examples</tt>.
One simple way to handle that is to copy the files over in a
<tt>post-install</tt>.

<p>
A neat trick which often works is to look at a program's <tt>Makefile</tt>, and
override the configuration directory in the fake installation stage by using
specific <tt>FAKE_FLAGS</tt>, for instance:

<blockquote><pre>
FAKE_FLAGS=	DESTDIR=${WRKINST} \
		sysconfdir=${WRKINST}${TRUEPREFIX}/share/examples/PKGNAME
</pre></blockquote>

You just need to watch out for programs that write the configuration directory
down in specific files during their install stage.

<h3>Examples</h3>

<ul><li>
The <tt>security/integrit</tt> port uses a configuration directory with a
few files.
Its packing-list looks like this:

<blockquote><pre>
@@comment &#36;OpenBSD&#36;
@@bin bin/i-ls
@@info info/integrit.info
@@man man/man1/i-ls.1
@@man man/man1/i-viewdb.1
@@man man/man1/integrit.1
@@bin sbin/i-viewdb
@@bin sbin/integrit
share/doc/integrit/
share/doc/integrit/README
share/doc/integrit/crontab
share/doc/integrit/install_db
share/doc/integrit/integrit_check
share/doc/integrit/viewreport
share/examples/integrit/
@@sample ${SYSCONFDIR}/integrit/
share/examples/integrit/root.conf
@@sample ${SYSCONFDIR}/integrit/root.conf
share/examples/integrit/src.conf
@@sample ${SYSCONFDIR}/integrit/src.conf
share/examples/integrit/usr.conf
@@sample ${SYSCONFDIR}/integrit/usr.conf
</pre></blockquote>

<li>
The <tt>security/nessus</tt> port uses <tt>@@sample dir/</tt> to create
private directories.

<blockquote><pre>
...
sbin/uninstall-nessus
@@sample ${SYSCONFDIR}/nessus/
@@mode 0700
@@sample /var/nessus/
@@sample /var/nessus/jobs/
@@sample /var/nessus/logs/
@@sample /var/nessus/users/
@@extraunexec rm -fr %D/lib/nessus/plugins/*
@@extraunexec rm -fr %D/nessus
@@extraunexec rm -fr /var/nessus
</pre></blockquote>

<li>
The <tt>sysutils/nut</tt> port uses a specific owner for its configuration
files.

<blockquote><pre>
@@comment &#36;OpenBSD&#36;
@@conflict upsd-*
@@newuser ${NUT_USER}:${NUT_ID}:daemon:UPS User:/var/empty:/sbin/nologin
...
share/examples/nut/
@@sample ${SYSCONFDIR}/nut/
@@owner ${NUT_USER}
share/examples/nut/ups.conf
@@sample ${SYSCONFDIR}/nut/ups.conf
share/examples/nut/upsd.conf
@@mode 600
@@sample ${SYSCONFDIR}/nut/upsd.conf
@@mode
share/examples/nut/upsd.users
@@mode 600
@@sample ${SYSCONFDIR}/nut/upsd.users
@@mode
share/examples/nut/upsmon.conf
@@mode 600
@@sample ${SYSCONFDIR}/nut/upsmon.conf
@@mode
share/examples/nut/upssched.conf
@@sample ${SYSCONFDIR}/nut/upssched.conf
@@mode 700
@@sample /var/db/nut/
@@mode
@@owner
share/ups/
share/ups/cmdvartab
share/ups/driver.list
</pre></blockquote>

</ul>

<h2 id="Audio">Audio applications</h2>

This document currently deals with sampled sounds issues only.
Contributions dealing with synthesizers and waveform tables are welcome.

<p>
Audio applications tend to be hard to port, as this is a domain where
interfaces are not standardized at all, though approaches don't vary
much between operating systems.

<h3>Using <tt>ossaudio</tt></h3>

The <tt>ossaudio</tt> emulation is possibly the simplest way, but it won't
always work, and it is not such a great idea usually.

<ul><li>
It redefines <tt>ioctl</tt>.
If the code to port uses <tt>ioctl</tt> for more than audio, you will have to
<tt>#undef ioctl</tt> and use the bare form with <tt>_ossioctl</tt>.

<li>
Some features of linux sound are not emulated.

<li>
Applications with correct linux sound support that is not Intel-specific tend
to use these features.
</ul>

<h3>Using existing NetBSD or FreeBSD code</h3>

Since we share part of the audio interface with NetBSD and FreeBSD, starting
from a NetBSD port is reasonable. Be aware that some files changed places,
and that some entries in <tt>sys/audioio.h</tt> are obsolete.
Also, many ports tend to be incorrectly coded and to work on only one type
of machine.
Some changes are bound to be necessary, though.
Read through the next part.

<h3>Writing OpenBSD code</h3>

<h3><font color="#0000e0">libsndio</font></h3>

<p>
OpenBSD has its own audio layer provided by the sndio library, documented in
<a href="http://man.openbsd.org/sio_open">sio_open(3)</a>.
Until it's merged into this page, you can find further information about
programming for this API in the guide,
<a href="http://www.sndio.org/tips.html">hints on writing and porting audio
code</a>.
sndio allows user processes to access
<a href="http://man.openbsd.org/audio.4">audio(4)</a> hardware and the
<a href="http://man.openbsd.org/sndiod">sndiod(8)</a> audio server in
a uniform way.
It supports full-duplex operation, and when used with the
<a href="http://man.openbsd.org/sndiod">sndiod(8)</a> server it supports
resampling and format conversions on the fly.

<h3><font color="#0000e0">Hardware independence</font></h3>

<p>
<b>YOU SHOULDN'T ASSUME ANYTHING ABOUT THE AUDIO HARDWARE USED.</b>
<br>
Wrong code is code that only checks the <tt>a_info.play.precision</tt>
field against 8 or 16 bits, and assumes unsigned or signed samples based
on soundblaster behavior.
You should check the sample type explicitly, and code according to that.
Simple example:

<blockquote><pre>
AUDIO_INIT_INFO(&amp;a_info);
a_info.play.encoding = AUDIO_ENCODING_SLINEAR;
a_info.play.precision = 16;
a_info.play.sample_rate = 22050;
error = ioctl(audio, AUDIO_SETINFO, &amp;a_info);
if (error)
    /* deal with it */
error = ioctl(audio, AUDIO_GETINFO, &amp;a_info);
switch(a_info.play.encoding)
    {
case AUDIO_ENCODING_ULINEAR_LE:
case AUDIO_ENCODING_ULINEAR_BE:
    if (a_info.play.precision == 8)
        /* ... */
    else
        /* ... */
    break;
case ...

default:
    /* don't forget to deal with what you don't know !!! For instance, */
    fprintf(stderr,
        "Unsupported audio format (%d), ask ports@@ about that\n",
            a_info.play.encoding);

    }
    /* now don't forget to check what sampling frequency you actually got */
</pre></blockquote>

This is about the smallest code fragment that will deal with most issues.

<h3><font color="#0000e0">16 bit formats and endianness</font></h3>

In normal usage, you just ask for an encoding type (e.g.,
<tt>AUDIO_ENCODING_SLINEAR</tt>), and you retrieve an encoding with endianness
(e.g., <tt>AUDIO_ENCODING_SLINEAR_LE</tt>).
Considering that a soundcard does not have to use the same endianness as your
platform, you should be prepared to deal with that.
The easiest way is probably to prepare a full audio buffer, and to use swab(3)
if an endianness change is required.
Dealing with external samples usually amounts to:

<ol>
<li>Parsing the sample format
<li>Getting the sample in
<li>Swapping endianness if it is not your native format
<li>Computing what you want to output into a buffer
<li>Swapping endianness if the sound card is not in your native format
<li>Playing the buffer
</ol>

Obviously, you may be able to remove steps 3 and 5 if you are simply playing
a sound sample which happens to be in your sound card native format.

<h3><font color="#0000e0">Audio quality</font></h3>

Hardware may have some weird limitations, such as being unable to get over
22050 Hz in stereo, but up to 44100 in mono.
In such cases, you should give the user a chance to state his preferences,
then try your best to give the best performance possible.
For instance, it is stupid to limit the frequency to 22050 Hz because you
are outputting stereo.
What if the user does not have a stereo sound system connected to his audio
card output?

<p>
It is also stupid to hardcode soundblaster-like limitations into your program.
You should be aware of these, but do try to get over the 22050&nbsp;Hz/stereo
barrier and check the results.

<h4>Sampling frequency</h4>

You should definitely check the sampling frequency your card gives you back.
A 5% discrepancy already amounts to a half-tone, and some people have much
more accurate hearing than that, though most of us won't notice a thing.
Your application should be able to perform resampling on the fly, possibly
naively, or through devious applications of Shannon's resampling formula
if you can.

<h4>Dynamic range</h4>

Samples don't always use the full range of values they could.
First, samples recorded with a low gain will not sound very loud on the
machine, forcing the user to turn the volume up.
Second, on machines with badly isolated audio, low sound output means
you mostly hear your machine heart-beat, and not the sound you expected.
Finally, dumb conversion from 16 bits to 8 bits may leave you with only
4 bits of usable audio, which makes for an awfully bad quality.

<p>
If possible, the best solution is probably to scan the whole stream you are
going to play ahead of time, and to scale it so that it fits the full dynamic
range.
If you can't afford that, but you can manage to get a bit of look-ahead on
what you're going to play, you can adjust the volume boost on the fly, you
just have to make sure that the boost factor stays at a low frequency compared
to the sound you want to play, and that you get absolutely
<i>no overflows</i> -- those will always sound much worse than the improvement
you're trying to achieve.
<br>
As sound volume perception is logarithmic, using arithmetic shifts is usually
enough.
If your data is signed, you should explicitly code the shift as a division,
as C <tt>&gt;&gt;</tt> operator is not portable on signed data.

<p>
If all else fails, you should at least try to provide the user with a volume
scaling option.

<h3><font color="#0000e0">Audio performance</font></h3>

Low-end applications usually don't have much to worry about.
Keep in mind that some of us do use OpenBSD on low-end 68030, and that if a
sound application can run on that, it should.

<p>
Don't forget to run benches.
Theoretical optimizations are just that: theoretical.
Some hard figures should be collected to check what's a sizeable improvement
and what's not.

<p>
For high performance audio applications, such as mpegI-layer3, some points
should be taken into account:

<ul><li>
The audio interface does provide you with the natural hardware blocksize.
Using multiples of that for your output buffer is essential.
Keep in mind that <tt>write</tt>, as a system call, incurs a high cost compared
to internal audio processing.

<li>
Bandwidth is a very important factor when dealing with audio.
A useful way to optimize an audio player is to see it as a decompressor.
The longer you can keep with the compressed data, the better usually.
Very short loops that do very little processing are usually a bad idea.
It is generally much better to combine all processing into one loop.

<li>
Some formats do incur more overhead than others.
The <tt>AUDIO_GETENC</tt> <tt>ioctl</tt> should be used to retrieve all
formats that the audio device provides.
Be especially aware of the <tt>AUDIO_ENCODINGFLAG_EMULATED</tt> flag.
If your application is already able to output all kinds of weird formats,
and reasonably optimized for that, try to use a native format at all costs.
On the other hand, the emulation code present in the audio device can be
assumed to be reasonably optimal, so don't replace it with quickly hacked
up code.
</ul>

<p>
A model you may have to follow to get optimal results is to first compile
a small test program that enquires about the specific audio hardware available,
then proceed to configure your program so that it deals optimally with this
hardware.
You may reasonably expect people who want good audio performance to recompile
your port when they change hardware, provided it makes a difference.

<h3><font color="#0000e0">Real time or synchronized</font></h3>

Considering that OpenBSD is not real time, you may still wish to write audio
applications that are mostly real time, for instance games.
In such a case, you will have to lower the blocksize so that the sound effects
don't get out of synch with the current game.
The problem with this if that the audio device may get starved, which yields
horrible results.

<p>
In case you simply want audio to be synchronized with some graphics output,
but the behavior of your program is predictable, synchronization is easier
to achieve.
You just play your audio samples, and ask the audio device what you are
currently playing with <tt>AUDIO_GETOOFFS</tt>, then use that information
to post-synchronize graphics.
Provided you ask sufficiently often (say, every tenth of a second), and as
long as you have enough horse-power to run your application, you can get very
good synchronization that way.
You might have to tweak the figures by a constant offset, as there is some lag
between what the audio reports, what's currently playing, and the time it takes
for XWindow to display something.

<h3>Contributing code back</h3>

In the case of audio applications, working with the original program's author
is very important.
If their code only works with soundblaster cards, for instance, there is a good
chance they will have to cope with other technology soon.

<p>
<b>If you don't send your comments to the author, your work will have been
useless</b>.

<p>
It may also be that the author has already noticed whatever problems
you are currently dealing with, and is addressing them in his current
development tree.
If the patches you are writing amount to more than a handful of lines,
cooperation is almost certainly a very good idea.

<h2 id="Mandoc">Manual pages</h2>

This section provides guidelines on how to deal with groff versus
<a href="http://man.openbsd.org/mandoc">mandoc(1)</a> issues in ports.

<h3>Should I check anything?</h3>

When creating a new port or updating an existing port, please
check whether the port can use mandoc to format its manuals.
Both the automatic and the manual checks described below are required.
This may make the manuals more useable for the port's users, and it will
reduce the port's build time.

<p>
In the following two cases, mandoc will almost certainly work.
If you encounter a case where it doesn't, please report that to
schwarze@@, who will probably fix mandoc.

<ul><li>
The documentation is written using the
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> language rather than the
<a href="http://man.openbsd.org/man.7">man(7)</a> language.
To distinguish the two, look at the beginning of the manual source code:
.Dd is mdoc(7), .TH is man(7).

<li>
The documentation is man(7), but generated by
<a href="http://man.openbsd.org/pod2man">pod2man(1)</a>.
For such pages, the first line of the manual source code reads
<br>
<tt>.\" Automatically generated by Pod::Man...</tt>
</ul>

<p>
Of course, most ports not matching these criteria work as well.
However,

<ul><li>
If a port is using DocBook, there is a high probability that
<tt>USE_GROFF</tt> is still required.

<li>
If a port is using <tt>CONFIGURE_STYLE = imake</tt>, merely removing
<tt>USE_GROFF</tt> is insufficient, because
<tt>/usr/X11R6/lib/X11/config/OpenBSD.cf</tt> will still attempt to call groff.
Typically, you need to convince Imake to not format the manual(s),
for example by changing <tt>ComplexProgramTarget</tt> to
<tt>ComplexProgramTargetNoMan</tt> and install the manual(s) by hand, typically
using a <tt>post-install</tt> target in the port <tt>Makefile</tt>.
See <tt>sysutils/xbattbar</tt> for a simple example.
</ul>

<h3>Which tools do I need?</h3>

The <a href="http://man.openbsd.org/mandoc.1">mandoc(1)</a> utility
is included in the base system and quite stable by now, so you don't need
to do anything special about it.

<p>
In the very unusual case that you suspect recent changes to mandoc are
important for the port, you can easily update mandoc, even without
updating the rest of the system:

<blockquote><pre>
$ <b>cd /usr/src/usr.bin/mandoc/</b>
$ <b>cvs -q up -Pd</b>
$ <b>make cleandir</b>
$ <b>make obj</b>
$ <b>make depend</b>
$ <b>make</b>
$ <b>doas make install</b>
</pre></blockquote>

Optionally, you may also get a copy of the
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/gmdiff?cvsroot=mdocml">gmdiff</a>
utility script that helps to compare groff and mandoc output.
The gmdiff script is not strictly required, doing the necessary checks by hand
is perfectly acceptable.

<h3>How do I report the results?</h3>

The following paragraphs ask for sending in reports to the mandoc maintainers
in some particular situations.
Before sending such reports, please always tick off the following checklist:

<ol><li>
For the time being, do not report problems related to DocBook.
We know source code generated by DocBook is extremely crappy even
when DocBook works as intended, and on top of that, DocBook tends
to be more buggy than average software.
We also know that mandoc usually parses and renders DocBook output badly,
and we know what to do to improve mandoc in this respect.
This may change in the future, but right now, more than half of all reports
that fail to reveal new, useful information are related to DocBook, and the
signal-to-noise ratio in DocBook reports is too low to be worthwhile.

<li>
Attach the <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
<a href="http://man.openbsd.org/man.7">man(7)</a> source file in question
to the mail.
This may either be a file contained in the distribution tarball or a file
generated during the build process.
In case several files exhibit the problems, choose one that shows all problems.
In case different files exhibit different problems you wish to report, attach
as many files as necessary.
The point is to save the mandoc maintainers the work of downloading
distribution tarballs, searching them for source files, sometimes even
installing software before being able to start a build, while you have that
information readily at hand, anyway.

<li>
Briefly describe all the problems you want to report, and where they can be
seen in which file.
We have spent time wondering what exactly the reporter's point was more than
once in the past.

<li>
In case your report is related to errors or warnings printed by the mandoc
utility, copy the output of <tt>mandoc -Tlint</tt> (or
<tt>mandoc -Tlint -Werror</tt> when warnings are irrelevant) into the body of
your mail.
Usually, this is easy to reproduce, but it did happen that it was not, causing
unnecessary confusion.

<li>
In case the version of the port you are talking about is not yet committed,
please attach what is needed to build the uncommitted port: A diff against
-current when it is an update, or a tarball of the port directory when it is
a completely new port.
Very often, the source files will be sufficient to identify the problem;
however, in those cases where they are not, mailing back and forth or searching
mailing list archives just to get the needed additional information is a waste
of time.

<li>
Send mail to schwarze@@.
Unless you are the maintainer of the port, Cc: him or her.
Unless you are an OpenBSD developer, in case you regularly work with a
developer who is committing your ports and who you know is interested in
this port, Cc:ing him or her may be useful as well.
</ol>

<h3>How do I do automatic checking?</h3>

To do the automatic part of the check, please run the following command over
all <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> and
<a href="http://man.openbsd.org/man.7">man(7)</a> manual source files contained
in the port:

<blockquote><pre>
$ <b>mandoc -Tlint -Werror *</b>
</pre></blockquote>

If you get any <tt>UNSUPPORTED</tt> messages, the respective
places of the manual page require careful scrutiny.
It is likely that the page will be misformatted with mandoc and the
port requires <tt>USE_GROFF</tt>.
If you are sure that all misformattings related to the unsupported
features are minor and don't hinder the reader, you may remove
<tt>USE_GROFF</tt>; but in case of doubt, leave <tt>USE_GROFF</tt>
in place when there are <tt>UNSUPPORTED</tt> messages.

<p>
If there are any <tt>ERROR</tt> messages, they should also be briefly
looked at.
In the unusual case that they are related to misformatting with
mandoc that doesn't happen with groff, that should be reported; the
mandoc maintainer might choose to let mandoc issue <tt>UNSUPPORTED</tt>
messages in additional cases or to fix the formatting.

<p>
Besides, sending a report to the mandoc developers is useful if:

<ul><li>
The manual pages in question are in
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> format.

<li>
The manual pages in question are generated by
<a href="http://man.openbsd.org/pod2man">pod2man(1)</a>.

<li>
You find one or more messages "ERROR: skipping unknown macro", and the fact
that the manual pages you are looking at use these macros is not yet reported
in the mandoc
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/TODO?cvsroot=mdocml">TODO</a>
list.
Even if we already now that a certain roff request is still unsupported,
learning which manuals actually use it is useful to get our priorities right
when implementing new features.
</ul>

<p>
If manual pages look good with groff, never patch them to get rid of mandoc
errors.
That would merely be a make-work project not helping anyone: It will neither
help to improve upstream manuals nor mandoc.

<h3>How do I do manual checking?</h3>

If there are no errors or the errors are not related to serious
misformatting with mandoc, proceed to the manual part of the check.
Look at the manuals as formatted by mandoc.
Do they look fine?
If yes, you do not need <tt>USE_GROFF</tt>, and there is no need to report
anything.

<p>
If there are no errors, but mandoc output has serious issues, that is,
relevant information is missing or part of the output is garbled,
please always report your findings, even if you happen to know it's due to
a known issue with mandoc.
We do want to know which issues cause serious problems in practice, such that
we can address the most pressing issues first.

<p>
If mandoc output has serious issues and groff output looks bad as well, then
the manuals are probably just broken upstream.
In that case, you have the usual options when porting broken software:
Abandon the port, ignore the problem, report upstream, and/or patch the bugs
away.
In case you need help with the latter, talk to schwarze@@.

<p>
If there are no errors, but mandoc output has minor issues that don't really
hinder the user when reading the manual, you are welcome to report these
issues as well.
In that case, you are even more welcome to first check the mandoc
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/TODO?cvsroot=mdocml">TODO</a>
list, to avoid having the same minor issues reported again and again -
but in case of doubt, it is always better to report dupes than to let
problems go unnoticed.

<p>
If there are only very few errors, in particular if you get the
impression that mandoc output is just fine all the same, you don't
usually need <tt>USE_GROFF=Yes</tt>.
In case of doubt, ask for advice.
Such questions often help to improve mandoc error reporting, in
particular to identify and remove bogus mandoc errors messages.

<p>
To speed up the manual checks, in particular if you are often doing mandoc
checks on OpenBSD ports, and to reduce the risk of overlooking problems,
consider using the 
<a href="http://mdocml.bsd.lv/cgi-bin/cvsweb/gmdiff?cvsroot=mdocml">gmdiff</a>
utility script.
It takes the file names of an arbitrary number of manual source files as
arguments, runs both groff and mandoc on all the files in turn, and compares
the output of both programs.
However, bear in mind that you are still doing manual checks with the ultimate
goal to judge the quality of mandoc output: all the above points still apply
even when you are using the gmdiff script to help your work.
Also note that gmdiff will usually find minor formatting differences between
both programs, in particular with respect to whitespace.
If mandoc output looks good, even if it's slightly different from groff output,
<tt>USE_GROFF</tt> is not needed.

<p>
For ease of use, it's possible to call gmdiff from a custom target in mk.conf:

<blockquote><pre>
gmdiff:
	@@make fake; cd ${WRKINST}${TRUEPREFIX}; find man -type f -path 'man/man*' -print0 | xargs -0r gmdiff | less
</pre></blockquote>

<h3>What about warnings?</h3>

You might wonder about mandoc warnings, as opposed to mandoc errors.
In a nutshell, the distinction is that errors may seriously impact the
usefulness of the output, while warnings might at the worst cause minor
formatting glitches, if at all.
If a mandoc warning appears to be related to seriously garbled output,
that's probably a bug in mandoc and should always be reported.

<p>
That said, it is obvious that warnings are irrelevant for the decision
whether to use or not to use mandoc for a given port.
They are for manual authors, to help improve manual quality, not for porters.

<h3>How can I help upstream?</h3>

In case you are one of the port's upstream developers, or know they care
about good quality of their manuals and gladly accept patches, it may make
sense to use <tt>mandoc -Tlint</tt> to identify potential formatting issues
and to produce patches to be submitted upstream.
Usually, there is no need to put such patches into the ports tree.

<p>
As with any kind of linting, before changing your
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
<a href="http://man.openbsd.org/man.7">man(7)</a> source code or sending out
patches, first make sure you are chasing real problems in the manuals.
The mandoc utility is not perfect.
It may produce bogus warnings.
We are trying to fix that, but there will always be room for improvement.
In case of doubt, report the issue and ask for advice.

<h2 id="RcScripts">rc.d(8) scripts</h2>

This section is intended to provide some information on writing and installing
<i>rc.d(8) scripts</i>.

<p>
Ports that install a daemon benefit greatly from having rc.d(8) scripts.
It allows the user to easily check if the daemon is running, as well as
providing an easy and consistent way to start and stop it.

<h3>Writing rc.d(8) scripts</h3>

Writing an rc.d(8) script is straightforward and simple due to the clean
and simple design of the
<a href="http://man.openbsd.org/rc.subr">rc.subr(8)</a> system.
Though there are several things to take into account.

<ol><li>
The script has to be placed into <tt>${PKGDIR}</tt> with a <tt>.rc</tt>
extension, like <tt>mpd.rc</tt>.
This will allow the package tools to pick it up.
<!-- and it to the PLIST. -->

<li>
Be sure to test all the functions of the script, especially the <i>reload</i>
function.

<li
>Use <tt>${TRUEPREFIX}</tt> when writing the path to the daemon.
</ol>


<h3>Example script</h3>

Below is an example of a typical script.

<blockquote><pre>
#!/bin/sh
#
# &#36;OpenBSD: munin_node.rc,v 1.6 2013/01/08 11:14:02 kirby Exp $

daemon="${TRUEPREFIX}/sbin/munin-node"

. /etc/rc.d/rc.subr

pexp="/usr/bin/perl -wT $daemon"

rc_pre() {
	install -d -o _munin /var/run/munin
}

rc_cmd $1
</pre></blockquote>

A <a href="https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/infrastructure/templates/rc.template">
template script</a> can also be found in the templates directory of your
ports tree.

<p>
</body>
</html>

@


1.56
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@d1311 1
a1311 1
A <a href="http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/infrastructure/templates/rc.template">
@


1.55
log
@Schwarze@@ is such a slacker, the #Mandoc section was outdated to the
point of absurdity.  Groff/mandoc checks have no longer been optional
for a long time, and stale advice of other kinds lingered here, too.
@
text
@d14 1
a14 1
<link rel="canonical" href="http://www.openbsd.org/faq/ports/specialtopics.html">
@


1.54
log
@remove unneded section annotation in short man links
@
text
@d966 1
a966 1
When creating a new port or updating an existing port, you are welcome to
d968 1
d970 1
a970 4
reduce the port's build time.  Note that these checks are recommended,
but not strictly required to create a new port.
It is also acceptable to just put <tt>USE_GROFF=Yes</tt> into the
<tt>Makefile</tt> and be done with it.
d973 3
a975 3
Ports matching one or more of the following criteria are good candidates
for doing the checks described below, so in these cases, a bit of your time
is likely well spent:
a977 4
You know the upstream authors, you know they care about good and portable
documentation, and they gladly accept documentation patches.

<li>
d979 1
a979 1
<a href="http://man.openbsd.org/mdoc">mdoc(7)</a> language rather than the
d993 1
a993 2
Of course, ports not matching these criteria might work as well, so there is
nothing wrong with checking if you like to.
d997 2
a998 2
If a port is using DocBook, checking mandoc compatibility will likely turn out
to be a waste of time.
d1011 5
a1015 6
<p>
When you choose to do any checks, note that both automatic and manual
checks are required.
In case you are not willing to do a manual check at the end, looking over the
manuals as formatted with mandoc, do not bother with the automatic part of the
checks, just put <tt>USE_GROFF=Yes</tt>.
d1018 3
a1020 14
Only remove <tt>USE_GROFF</tt> if you plan to actively maintain the port.
Removing <tt>USE_GROFF</tt> from a port nobody is going to maintain will force
the poor soul doing the next update to redo the check.
If that person fails to check and the upstream author has added any features
to the manuals mandoc does not support, we will end up with unusable manuals.

<h3>Which tools do I need?</h3>

Before you start checking anything, make sure you have -current mandoc
installed.
For now, it should not be older than one or two months: being told about
issues that have been fixed long ago will not help mandoc developers.
In case of doubt, just update your mandoc utility, it is really quick
and easy, and does not require to have your whole system up to date:
d1056 1
a1056 4
Make sure your mandoc binary is up to date - see above.

<li>
Attach the <a href="http://man.openbsd.org/mdoc">mdoc(7)</a> or
d1094 1
a1094 2
As a rule, please mail to both schwarze@@ and kristaps@@ to minimize the risk
that real problems get lost.
d1104 1
a1104 1
all <a href="http://man.openbsd.org/mdoc">mdoc(7)</a> and
d1112 19
a1130 4
If this produces a considerable number of error messages, for now, the port
needs <tt>USE_GROFF</tt>.
Don't even consider using mandoc for anything here; it's not up to the job yet.
Sending a report to the mandoc developers is useful if:
d1133 4
a1140 4
The manual pages in question are in
<a href="http://man.openbsd.org/mdoc">mdoc(7)</a> format.

<li>
d1159 2
a1160 1
If there are no errors, proceed to the manual part of the check.
d1168 1
a1168 1
relevant information is missing or part of the output is seriously garbled,
d1193 6
a1198 6
If there are only very few errors, in particular if you get the impression
that mandoc output is just fine all the same, it's your call to either set
<tt>USE_GROFF=Yes</tt> (that's the quicker way out) or to report it and ask
whether it's acceptable to remove <tt>USE_GROFF</tt> in that particular case.
Reporting it is often a great help in order to improve mandoc error reporting,
in particular to identify and remove bogus mandoc errors messages.
d1249 1
a1249 1
<a href="http://man.openbsd.org/mdoc">mdoc(7)</a> or
@


1.53
log
@silence w3 validator warnings.
@
text
@d735 1
a735 1
<a href="http://man.openbsd.org/sio_open.3">sio_open(3)</a>.
d742 1
a742 1
<a href="http://man.openbsd.org/sndiod.8">sndiod(8)</a> audio server in
d745 1
a745 1
<a href="http://man.openbsd.org/sndiod.8">sndiod(8)</a> server it supports
d962 1
a962 1
<a href="http://man.openbsd.org/mandoc.1">mandoc(1)</a> issues in ports.
d985 1
a985 1
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> language rather than the
d1078 1
a1078 1
Attach the <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
d1127 1
a1127 1
all <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> and
d1146 1
a1146 1
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> format.
d1256 1
a1256 1
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a> or
d1278 1
a1278 1
<a href="http://man.openbsd.org/rc.subr.8">rc.subr(8)</a> system.
@


1.52
log
@sync porter's handbook formatting with the main faq style.
@
text
@d1229 1
a1229 1
	@@make fake; cd ${WRKINST}${TRUEPREFIX}; find man -type f -path 'man/man*' -print0 | xargs -0r gmdiff | less</pre>
@


1.51
log
@use short form man links in the faq and fix a few broken links
@
text
@d4 6
a9 1
<title>3 - Special Porting Topics</title>
a16 19
<!--
Copyright (c) 2005-2010 XXX

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<!-- Passes validator.w3.org.  Please keep it this way -->

d22 4
a25 1
<font color="#e00000">3 - Special Porting Topics</font>
a28 6
<font color= "#0000e0">
<a href="index.html">[Handbook Index]</a>
<a href="guide.html">[To Section 2 - OpenBSD Porting Guide]</a>
<a href="testing.html">[To Section 4 - Port Testing Guide]</a>
</font>

a29 1
<h3>Table of Contents</h3>
d31 6
a36 6
  <li><a href="#SharedLibs" >3.1 - Shared Libraries</a>
  <li><a href="#Autoconf"   >3.2 - GNU autoconf</a>
  <li><a href="#Config"     >3.3 - Configuration Files</a>
  <li><a href="#Audio"      >3.4 - Audio Applications</a>
  <li><a href="#Mandoc"     >3.5 - Manual pages</a>
  <li><a href="#RcScripts"  >3.6 - rc.d(8) scripts</a>
d41 1
a41 1
<h2 id="SharedLibs">3.1 - Shared Libraries</h2>
d47 1
a52 1
<ul>
d54 5
a58 2
	<li>A library with the same exact major number is required.
	<li>A library with an equal or higher minor number is required.
d60 7
a66 5
So, this means that <b>all</b> libraries with the same major
number and an equal or higher minor number <b>must satisfy the
binary API that the program expects</b>.  If they do not, then your
port is broken. Specifically, it will break when users try to update their
system.
d69 16
a84 11
<ul>
	<li>If functions were added to the library, you must bump the
library minor number: a program that needs those functions has no way to
require it except by asking explicitly for at least this version.
	<li>If the existing API changes, that is, if any function signature
is altered, or if valid calling sequences are no longer valid, if a
type changes in an incompatible way, the library major number <b>must
be bumped</b>.
	<li>This includes removing old functions. Any function removal
should trigger a major number bump.
	<li>A good hint is to compare the output of
d99 1
d107 1
a114 1
<p>
d120 3
a122 2
On the other hand, remember that you can override <tt>Makefile</tt> variables from
the command line, by using <tt>MAKE_FLAGS</tt> in the port's <tt>Makefile</tt>.
d136 7
a142 6
<ul>
	<li><tt>SHARED_LIBS</tt> is examined and version numbers are
	automatically replaced.
	<li>shared library building is logged in
	<tt>${WRKBUILD}/shared_libs.log</tt> which can be directly
	included in the port's <tt>Makefile</tt>.
a146 1
<p>
d152 2
a153 3
Moreover a wrong soname can result in unusable binaries that depend on this
library; either always or after some updates to the port containing the
library.
d155 1
d160 2
a161 2
As a general rule, <em>setting soname explicitly should be patched
out</em>.
d164 3
a166 2
upstream won't accept such a patch.  In that case the soname should
fully match the file name (see the example above).
a174 7
<ul>
	<li>At build time, ld uses <tt>-L</tt> flags to set up paths to look
        for libraries.
        It stops looking as soon as it finds a library that matches its
        requirements.
	<li>At run time, ld.so uses the information cached through ldconfig
        to find the required library.
d176 7
a201 1
<p>
d204 3
a206 2
<tt>/usr/local/lib/libqt.so.2.31</tt> have been provided. This is
enough to satisfy ld.so.
d220 2
a221 1
provided. In general, it is enough to make sure the library appears in
d226 3
a228 4
The new dependency code does need complete library dependencies. You must
use <tt><b>make lib-depends-check</b></tt> or
<tt><b>make port-lib-depends-check</b></tt>
to verify a port does mention all
a236 1
<p>
d239 1
a239 1
<tt>WANTLIB</tt> are fully evaluated at package build time: the resulting
d246 2
a247 2
good idea:
this will simplify port update if a given dependency goes from a static library
d249 1
d254 2
a255 2
This allows the dependency checking code to do the right thing when
multiple versions of the same library are encountered.
d261 12
a272 6
<ul>
	<li>Make sure the shared libraries major.minor numbers are correct.
	<li>Verify all ports that depend on your port. Verify that they
build correctly with your changes. Notify corresponding maintainers of the
update, so that they can verify their ports still run correctly.
	<li>You may have to adjust dependent ports <tt>WANTLIB</tt> and
a275 7
	<li>Whenever you introduce a new port, you should verify that you
are not creating a library that conflicts with an existing library:
libraries from two ports with the same name are deadly, because their
version numbering schemes have no chance to match.  You should try to solve
the situation with the software author (for instance, a library that is
called libnet is definitely badly named).
	<li>Check <a href="guide.html#PortsUpdate">the ports update guidelines</a>
d277 10
a286 1
for a more extensive discussion.
d289 1
a289 1
<h2 id="Autoconf">3.2 - GNU autoconf</h2>
d291 3
a293 4
autoconf is a gnu tool that is supposed to help in writing portable
programs.
It is often used together with automake (portable makefiles) and
libtool (portable shared libraries).
d301 2
a302 2
Quite a few software projects have configure scripts, and in most
cases, those scripts were generated by autoconf.
d310 3
a312 3
The generation procedure is covered in a following section. Most often,
autoconf ports come with the generated scripts, and with the source
scripts that generated these.
d315 1
a315 1
Make sure you read the section about Trojan horses as well.
d329 1
a329 1
configure scripts often take a lot of arguments.
d341 2
a342 3
Ports using autoconf and automake will have <tt>Makefile</tt>s
with a specific format, that begins with a few standard locations:
<ul>
d344 6
a349 3
<li><tt>bindir</tt>: location for binaries
<li><tt>sysconfdir</tt>: location for configuration
<li><tt>includedir</tt>: location for include dirs
d351 1
d359 1
a359 1
<tt>${PREFIX}/share/example/pkgname</tt> during the <tt>fake</tt> stage, to get
d364 2
a365 3
Ports fully using autoconf and automake  may support building
under a different directory: try setting <tt>SEPARATE_BUILD=flavored</tt> and
see if that works.
d368 2
a369 2
In a few cases, separate builds may need to use gmake, where the rest
of the port is happy with bsd-make, in which case this is not worth it.
d372 2
a373 2
automake will generate a few rules to rebuild all the generated scripts
if anything changes.
d375 3
a377 3
For that reason, as soon as <tt>CONFIGURE_STYLE</tt> corresponds to
autoconf use, <tt>post-patch</tt> will touch various files in a
specific order, so that no automake dependencies get triggered later.
d384 2
a385 3
The configure script first runs a fixed script called
<tt>config.guess</tt>, that will determine which system configure is
running on.
d396 8
a403 9
The configure script generated by autoconf then simply checks
all functionality on the existing system, by looking for a compiler, and running
simple test programs through it.
Since some of these tests are quite lengthy, the ports tree primes
configure with a <tt>CONFIG_SITE=config.site</tt> file.
configure will look at the contents of that file first before running
the tests.
A few configure scripts may have bugs that will prevent them from
running correctly in the presence of <tt>config.site</tt>.
d405 1
d408 6
a413 5
It is very important to look at configure's options,
at configure's output, and at the generated <tt>config.log</tt> file:
these will tell you what options were found, and what options were not found.
This will allow you to find out when configure did not find a package
that was installed.
d417 2
a418 2
This is a bad thing: a hidden dependency is some extra package
configure will pick up if it's installed.
d427 4
a430 4
Watch out for cascading tests: detecting a given feature may lead a
configure script to try out and find some dependent feature, so you
will not see the second feature in the configure output unless the
first feature is triggered.
d436 3
a438 3
configure options, or environment variables, or patching the
configure script), or verify that the build goes well and add the
dependency to the list of dependent packages.
d444 2
a445 3
configure scripts are normally generated from a <tt>configure.in</tt>
file (recent versions of autoconf use a <tt>configure.ac</tt> file
instead).
d447 1
d454 1
d456 1
a456 2
Different versions of autoconf will produce distinct configure
scripts.
d462 1
d464 3
a466 3
Since having several autoconf versions around at the same time is
useful, the autoconf script actually available in the ports tree is
part of a port called metaauto.
d476 1
a476 1
autoconf relies on the standard unix preprocessor m4(1).
d478 4
a481 5
Fortunately, OpenBSD's m4 has enough features to run autoconf
as well, it just needs to be invoked with <tt>-g</tt> to handle
autoconf.
Very seldom, autoconf run with OpenBSD's m4 will produce
bogus configure scripts.
d486 3
a488 2
Configure scripts are big generated files.  They are an ideal hiding place
for Trojan horses, and this has indeed already happened in the past.
d495 1
a495 1
autoheader is another program related to autoconf that is normally run to
d500 1
d506 1
d518 1
a518 1
<h2 id="Config">3.3 - Configuration Files</h2>
d524 1
a529 1
<p>
d535 3
a537 2
<ul>
<li>During fake installation, the port should install a sample configuration
d539 3
a541 1
<li>The packing-list should contain a <tt>@@sample ${SYSCONFDIR}/foo.rc</tt>
d543 3
a545 1
<li>During installation, the default example configuration file will be copied
d547 8
a554 5
<li>During updates and deinstallation, an existing configuration file will be
compared with the default example file. If they differ, the package tools will
inform the user and let him perform the update/removal himself. If they are
identical, the package tools know they can proceed and update/remove the
configuration files without any further precautions.
d565 1
d570 3
a572 3
<tt>@@owner</tt>, <tt>@@group</tt> annotations.   This can be a
bit cumbersome, because you will often need to switch back and forth
between a default mode and a configuration file specific mode.
d576 4
a579 3
<tt><b>make update-plist</b></tt> knows how to copy <tt>@@sample</tt>
annotations over, but it does not know how to create them, so they have
to be written in the first place.
d583 5
a587 3
<tt>${SYSCONFDIR}</tt>, it is only the fake installation stage that must
put stuff under <tt>${PREFIX}/share/examples</tt>.
One simple way to handle that is to copy the files over in a <tt>post-install</tt>.
d604 2
a605 2
<ul>
<li>The <tt>security/integrit</tt> port uses a configuration directory with a
d634 2
a635 1
<li>The <tt>security/nessus</tt> port uses <tt>@@sample dir/</tt> to create
d652 2
a653 1
<li>The <tt>sysutils/nut</tt> port uses a specific owner for its configuration
d691 4
a694 1
<h2 id="Audio">3.4 - Audio Applications</h2>
d697 3
a699 2
  This document currently deals with sampled sounds issues only. Contributions
  dealing with synthesizers and waveform tables are welcome.
d701 4
d706 12
a717 1
<p>
d719 1
a719 3
	Audio applications tend to be hard to port, as this is a domain where
	interfaces are not standardized at all, though approaches don't vary
	much between operating systems.
d721 26
d748 1
a748 1
<h3>Using <tt>ossaudio</tt></h3>
d750 8
a757 53
  The <tt>ossaudio</tt> emulation is possibly the simplest way, but
  it won't always work, and it is not such a great idea usually.
  <ul>
  	<li>It redefines <tt>ioctl</tt>. If the code to port uses
	<tt>ioctl</tt> for more than audio, you will have to
	<tt>#undef ioctl</tt> and use the bare form with
	<tt>_ossioctl</tt>.

	<li>Some features of linux sound are not emulated.

	<li>Applications with correct linux sound support that is not
	Intel-specific tend to use these features.

  </ul>

  <h3>Using existing NetBSD or FreeBSD code</h3>
  Since we share part of the audio interface with NetBSD and FreeBSD,
  starting from a NetBSD port is reasonable. Be aware that some files
  changed places, and that some entries in <tt>sys/audioio.h</tt>
  are obsolete.  Also, many ports tend to be incorrectly coded and to
  work on only one type of machine. Some changes are bound to be
  necessary, though.  Read through the next part.

  <h3>Writing OpenBSD code</h3>

	  <h3><font color="#0000e0">libsndio</font></h3>
   <p>

	OpenBSD has its own audio layer provided by the sndio library,
	documented in
	<a href="http://man.openbsd.org/sio_open.3">sio_open(3)</a>.
	Until it's merged into this page, you can find further information
	about programming for this API in the guide,
	<a href="http://www.sndio.org/tips.html">hints on
	writing and porting audio code</a>.
	sndio allows user processes to access
<a href="http://man.openbsd.org/audio.4">audio(4)</a>
	hardware and the
<a href="http://man.openbsd.org/sndiod.8">sndiod(8)</a>
	audio server in a uniform way.
	It supports full-duplex operation, and when used with the
<a href="http://man.openbsd.org/sndiod.8">sndiod(8)</a>
	server it supports resampling and format conversions on the fly.

	  <h3><font color="#0000e0">Hardware independence</font></h3>

   <p>
	<b>YOU SHOULDN'T ASSUME ANYTHING ABOUT THE AUDIO HARDWARE USED.
	</b><br>
	Wrong code is code that only checks the <tt>a_info.play.precision</tt>
	field against 8 or 16 bits, and assumes unsigned or signed samples based
	on soundblaster behavior. You should check the sample type explicitly,
	and code according to that. Simple example:
d789 1
a789 2
  <p>
  This is about the smallest code fragment that will deal with most issues.
d791 172
a962 165
  	<h3><font color="#0000e0">16 bit formats and endianness</font></h3>
	In normal usage, you just ask for an encoding type (e.g.,
	<tt>AUDIO_ENCODING_SLINEAR</tt>), and you retrieve
	an encoding with endianness (e.g., <tt>AUDIO_ENCODING_SLINEAR_LE</tt>).
	Considering that a soundcard does not have to use the same endianness
	as your platform, you should be prepared to deal with that.
	The easiest way is probably to prepare a full audio buffer, and to use
	swab(3) if an endianness change is required.
	Dealing with external samples usually amounts to:
	<ol>

		<li>Parsing the sample format,
		<li>Getting the sample in,
		<li>Swapping endianness if it is not your native format,
		<li>Computing what you want to output into a buffer,
		<li>Swapping endianness if the sound card is not in your native format,
		<li>Playing the buffer.
	</ol>
	Obviously, you may be able to remove steps 3 and 5 if you are simply
	playing a sound sample which happens to be in your sound card native
	format.

	<h3><font color="#0000e0">Audio quality</font></h3>
	<p>
	Hardware may have some weird limitations, such as being unable to get
	over 22050 Hz in stereo, but up to 44100 in mono.  In such cases, you
	should give the user a chance to state his preferences, then try your
	best to give the best performance possible. For instance, it is stupid
	to limit the frequency to 22050 Hz because you are outputting stereo.
	What if the user does not have a stereo sound system connected to his
	audio card output ?

	<p>
	It is also stupid to hardcode soundblaster-like limitations into your
	program. You should be aware of these, but do try to get over the
	22050&nbsp;Hz/stereo barrier and check the results.

	<h4>Sampling frequency</h4>
	You should definitely check the sampling frequency your card gives you
	back. A 5% discrepancy already amounts to a half-tone, and some people
	have much more accurate hearing than that, though most of us won't
	notice a thing.  Your application should be able to perform
	resampling on the fly, possibly naively, or through devious
	applications of Shannon's resampling formula if you can.

	<h4>Dynamic range</h4>
	<p>

	Samples don't always use the full range of values they could.  First,
        samples recorded with a low gain will not sound very loud on the
	machine, forcing the user to turn the volume up.
	Second, on machines with badly isolated audio, low sound output means
	you mostly hear your machine heart-beat, and not the sound you expected.
	Finally, dumb conversion from 16 bits to 8 bits may leave you with only
	4 bits of usable audio, which makes for an awfully bad quality.

	<p>
	If possible, the best solution is probably to scan the whole stream
	you are going to play ahead of time, and to scale it so that it fits
	the full dynamic range.  If you can't afford that, but you can manage
	to get a bit of look-ahead on what you're going to play, you can
	adjust the volume boost on the fly, you just have to make sure
	that the boost factor stays at a low frequency compared to the
	sound you want to play, and that you get absolutely <i>no
	overflows</i> -- those will always sound much worse than the
	improvement you're trying to achieve.<br>
	As sound volume perception is logarithmic, using arithmetic shifts is usually
	enough. If your data is signed, you should explicitly code the shift as
	a division, as C <tt>&gt;&gt;</tt> operator is not portable on
	signed data.

	<p>

	If all else fails, you should at least try to provide the user with
	a volume scaling option.

	<h3><font color="#0000e0">Audio performance</font></h3>
	<p>
	Low-end applications usually don't have much to worry about.  Keep in
	mind that some of us do use OpenBSD on low-end 68030, and that if a
	sound application can run on that, it should.

	<p>
	Don't forget to run benches.  Theoretical optimizations are just that:
	theoretical. Some hard figures should be collected to check what's a
	sizeable improvement, and what's not.

	<p>
	For high performance audio applications, such as mpegI-layer3, some
	points should be taken into account:

	<ul>
	    <li>The audio interface does provide you with the natural hardware
	    blocksize. Using multiples of that for your output buffer is
	    essential.  Keep in mind that <tt>write</tt>, as a system call,
	    incurs a high cost compared to internal audio processing.

	    <li>Bandwidth is a very important factor when dealing with audio.
	    A useful way to optimize an audio player is to see it as a
	    decompressor. The longer you can keep with the compressed data, the
	    better usually. Very short loops that do very little processing are
	    usually a bad idea. It is generally much better to combine all
	    processing into one loop.

	    <li>Some formats do incur more overhead than others. The
	    <tt>AUDIO_GETENC</tt> <tt>ioctl</tt> should be used
	    to retrieve all formats that the audio device provides.
	    Be especially aware of the
	    <tt>AUDIO_ENCODINGFLAG_EMULATED</tt> flag. If your
	    application is already able to output all kinds of weird formats,
	    and reasonably optimized for that, try to use a native format at
	    all costs. On the other hand, the emulation code present in the
	    audio device can be assumed to be reasonably optimal, so don't
	    replace it with quickly hacked up code.
	</ul>

	<p>A model you may have to follow to get optimal results is to first
	compile a small test program that enquires about the specific audio
	hardware available, then proceed to configure your program so that it
	deals optimally with this hardware. You may reasonably expect people
	who want good audio performance to recompile your port when they change
	hardware, provided it makes a difference.

	<h3><font color="#0000e0">Real time or synchronized</font></h3>
	<p>
	Considering that OpenBSD is not real time, you may still wish to write
	audio applications that are mostly real time, for instance games. In
	such a case, you will have to lower the blocksize so that the sound
	effects don't get out of synch with the current game.  The problem
	with this if that the audio device may get starved, which yields
	horrible results.

	<p>
	In case you simply want audio to be synchronized with some graphics
	output, but the behavior of your program is predictable, synchronization
	is easier to achieve. You just play your audio samples, and ask the
	audio device what you are currently playing with
	<tt>AUDIO_GETOOFFS</tt>, then use  that information to
	post-synchronize graphics.  Provided you ask sufficiently often (say,
	every tenth of a second), and as long as you have enough horse-power to
	run your application, you can get very good synchronization that way.
	You might have to tweak the figures by a constant offset, as there is
	some lag between what the audio reports, what's currently playing, and
	the time it takes for XWindow to display something.

  <h3>Contributing code back</h3>
   <p>In the case of audio applications, working with the original program's
	author is very important. If their code only works with soundblaster
	cards, for instance, there is a good chance they will have to cope with
	other technology soon.

	<p>
	<b>If you don't send your comments to the author, your work will
	have been useless</b>.
	<p>
	It may also be that the author has already noticed whatever problems
	you are currently dealing with, and is addressing them in his current
	development tree.  If the patches you are writing amount to more than
	a handful of lines, cooperation is almost certainly a very good idea.

<h2 id="Mandoc">3.5 - Manual pages</h2>

<p>This section provides guidelines on how to deal with
groff versus <a href="http://man.openbsd.org/mandoc.1">mandoc(1)</a>
issues in ports.
d966 2
a967 2
<p>When creating a new port or updating an existing port, you are welcome
to check whether the port can use mandoc to format its manuals.
d970 3
a972 3
but not strictly required to create a new port.  It is also acceptable to
just put <tt>USE_GROFF=Yes</tt> into the <tt>Makefile</tt> and be done with it.
Marc has done that more than 3.000 times, and we didn't kill him.
d974 2
a975 1
<p>Ports matching one or more of the following criteria are good candidates
d979 16
a994 12
<ul>
<li>You know the upstream authors, you know they care about good and
portable documentation, and they gladly accept documentation patches.
<li>The documentation is written using the
<a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a>
language rather than the
<a href="http://man.openbsd.org/man.7">man(7)</a>
language.  To distinguish the two, look at the beginning of the manual
source code:  .Dd is mdoc(7), .TH is man(7).
<li>The documentation is man(7), but generated by
<a href="http://man.openbsd.org/pod2man.1">pod2man(1)</a>.
For such pages, the first line of the manual source code reads<br>
d998 3
a1000 2
<p>Of course, ports not matching these criteria might work as well,
so there is nothing wrong with checking if you like to.
d1002 9
a1010 7
<ul>
<li>if a port is using DocBook, checking mandoc compatibility will likely
turn out to be a waste of time.
<li>if a port is using <tt>CONFIGURE_STYLE = imake</tt>,
merely removing <tt>USE_GROFF</tt> is insufficient,
because <tt>/usr/X11R6/lib/X11/config/OpenBSD.cf</tt>
will still attempt to call groff.
d1013 2
a1014 2
<tt>ComplexProgramTargetNoMan</tt> and install the manual(s) by hand,
typically using a <tt>post-install</tt> target in the port <tt>Makefile</tt>.
d1018 13
a1030 12
<p>When you choose to do any checks, note that both automatic and manual
checks are required.  In case you are not willing to do a manual check at
the end, looking over the manuals as formatted with mandoc, do not bother
with the automatic part of the checks, just put <tt>USE_GROFF=Yes</tt>.

<p>Only remove <tt>USE_GROFF</tt> if you plan to actively maintain
the port.
Removing <tt>USE_GROFF</tt> from a port nobody is going to maintain
will force the poor soul doing the next update to redo the check.
If that person fails to check and the upstream author has added
any features to the manuals mandoc does not support, we will end up with
unusable manuals.
d1034 4
a1037 4
<p>Before you start checking anything, make sure you have -current mandoc
installed.  For now, it should not be older than one or two months:
being told about issues
that have been fixed long ago will not help mandoc developers.
d1043 1
a1043 1
$ <b>cvs up -dP</b>
d1048 1
a1048 1
$ <b>sudo make install</b>
d1054 2
a1055 2
The gmdiff script is not strictly required, doing the necessary checks
by hand is perfectly acceptable.
d1059 3
a1061 3
<p>The following paragraphs ask for sending in reports to the mandoc
maintainers in some particular situations.  Before sending such reports,
please always tick off the following checklist:
d1063 2
a1064 2
<ol>
<li>For the time being, do not report problems related to DocBook.
d1067 54
a1120 38
to be more buggy than average software.  We also know that mandoc
usually parses and renders DocBook output badly, and we know what to
do to improve mandoc in this respect.  This may change in the future,
but right now, more than half of all reports that fail to reveal new,
useful information are related to DocBook, and the signal-to-noise
ratio in DocBook reports is too low to be worthwhile.
<li>Make sure your mandoc binary is up to date - see above.
<li>Attach the <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a>
or <a href="http://man.openbsd.org/man.7">man(7)</a>
source file in question to the mail.  This may either be a file contained
in the distribution tarball or a file generated during the build process.
In case several files exhibit the problems, choose one that shows all
problems.  In case different files exhibit different problems you wish
to report, attach as many files as necessary.  The point is to save the
mandoc maintainers the work of downloading distribution tarballs, searching
them for source files, sometimes even installing software before being able
to start a build, while you have that information readily at hand, anyway.
<li>Briefly describe all the problems you want to report, and
where they can be seen in which file.  I have spent time wondering
what exactly the reporter's point was more than once in the past.
<li>In case your report is related to errors or warnings printed
by the mandoc utility, copy the output of <tt><b>mandoc -Tlint</b></tt>
(or <tt><b>mandoc -Tlint -Werror</b></tt> when warnings are irrelevant)
into the body of your mail.  Usually, this is easy to reproduce,
but it did happen that it was not, causing unnecessary confusion.
<li>In case the version of the port you are talking about is not yet
committed, please attach what is needed to build the uncommitted
port: A diff against -current when it is an update, or a tarball
of the port directory when it is a completely new port.  Very often,
the source files will be sufficient to identify the problem; however,
in those cases where they are not, mailing back and forth or searching
mailing list archives just to get the needed additional information is
a waste of time.
<li>As a rule, please mail to both schwarze@@ and kristaps@@ to
minimize the risk that real problems get lost.  Unless you are
the maintainer of the port, Cc: him or her.  Unless you are an
OpenBSD developer, in case you regularly work with a developer
who is committing your ports and who you know is interested in
d1126 4
a1129 4
<p>To do the automatic part of the check, please run the following command
over all <a href="http://man.openbsd.org/mdoc.7">mdoc(7)</a>
and <a href="http://man.openbsd.org/man.7">man(7)</a>
manual source files contained in the port:
d1135 8
a1142 4
<p>If this produces a considerable number of error messages, for now,
the port needs <tt>USE_GROFF</tt>.  Don't even consider using mandoc
for anything here, it's not up to the job yet.  Sending a report to
the mandoc developers is useful if:
d1144 2
a1145 4
<ul>
<li>The manual pages in question are generated by
<a href="http://man.openbsd.org/pod2man.1">pod2man(1)</a>.
<li>The manual pages in question are in
d1147 5
a1151 3
<li>You find one or more messages "ERROR: skipping unknown macro",
and the fact that the manual pages you are looking at use these macros
is not yet reported in the mandoc
d1153 4
a1156 3
list.  Even if we already now that a certain roff request is still
unsupported, learning which manuals actually use it is useful to get
our priorities right when implementing new features.
d1159 5
a1163 3
<p>If manual pages look good with groff, never patch them to get rid of
mandoc errors.  That would merely be a make-work project not helping
anyone: It will neither help to improve upstream manuals nor mandoc.
d1167 20
a1186 17
<p>If there are no errors, proceed to the manual part of the check.
Look at the manuals as formatted by mandoc.  Do they look fine?
If yes, you do not need <tt>USE_GROFF</tt>, and there is no need
to report anything.

<p>If there are no errors, but mandoc output has serious issues, that
is, relevant information is missing or part of the output is seriously
garbled, please always report your findings, even if you
happen to know it's due to a known issue with mandoc.  We do want to know
which issues cause serious problems in practice, such that we can address
the most pressing issues first.

<p>If mandoc output has serious issues and groff output looks bad
as well, then the manuals are probably just broken upstream.
In that case, you have
the usual options when porting broken software:  Abandon the port,
ignore the problem, report upstream, and/or patch the bugs away.
d1189 5
a1193 4
<p>If there are no errors, but mandoc output has minor issues that
don't really hinder the user when reading the manual, you are welcome
to report these issues as well.  In that case, you are even more
welcome to first check the mandoc
d1199 6
a1204 6
<p>If there are only very few errors, in particular if you get the
impression that mandoc output is just fine all the same, it's your
call to either set <tt>USE_GROFF=Yes</tt> (that's the quicker way out)
or to report it and ask whether it's acceptable to remove
<tt>USE_GROFF</tt> in that particular case.  Reporting it is
often a great help in order to improve mandoc error reporting,
d1207 4
a1210 3
<p>To speed up the manual checks, in particular if you are often doing
mandoc checks on OpenBSD ports, and to reduce the risk of overlooking
problems, consider using the 
d1212 11
a1222 10
utility script.  It takes the file names of an arbitrary number of manual
source files as arguments, runs both groff and mandoc on all the files
in turn, and compares the output of both programs.  However, bear in mind
that you are still doing manual checks with the ultimate goal to judge
the quality of mandoc output:  All the above points still apply even when
you are using the gmdiff script to help your work.
Also note that gmdiff will usually find minor formatting differences
between both programs, in particular with respect to whitespace.
If mandoc output looks good, even if it's slightly different from
groff output, <tt>USE_GROFF</tt> is not needed.<p>
d1224 1
d1227 2
a1228 1
<pre>gmdiff:
d1230 1
d1234 1
a1234 1
<p>You might wonder about mandoc warnings, as opposed to mandoc errors.
d1237 8
a1244 7
formatting glitches, if at all.  If a mandoc warning appears to be
related to seriously garbled output, that's probably a bug in mandoc
and should always be reported.

<p>That said, it is obvious that warnings are irrelevant for the decision
whether to use or not to use mandoc for a given port.  They are for
manual authors, to help improve manual quality, not for porters.
d1248 5
a1252 6
<p>In case you are one of the port's upstream developers, or know they care
about good quality of their manuals and gladly accept patches, it may
make sense to use <tt><b>mandoc -Tlint</b></tt>
to identify potential formatting issues and to produce patches to be
submitted upstream.  Usually, there is no need to put such patches into
the ports tree.
d1254 2
a1255 1
<p>As with any kind of linting, before changing your
d1257 6
a1262 6
<a href="http://man.openbsd.org/man.7">man(7)</a>
source code or sending out patches, first make sure you are chasing
real problems in the manuals.  The mandoc utility is not perfect.
It may produce bogus warnings.  We are trying to fix that, but there
will always be room for improvement.  In case of doubt, report
the issue and ask for advice.
d1264 1
a1264 5
<h2 id="RcScripts">3.6 - rc.d(8) scripts</h2>

<p>
This section is intended to provide some information on writing and
installing <i>rc.d(8) scripts</i>.
d1266 2
d1274 1
a1275 2
<h3>Writing rc.d(8) scripts</h3>
<p>
d1278 15
a1292 10
<a href="http://man.openbsd.org/rc.subr.8">rc.subr(8)</a>
system. Though there are several things to take into account.
<ol>
	<li>The script has to be placed into <tt>${PKGDIR}</tt> with
	a <tt>.rc</tt> extension, like <tt>mpd.rc</tt>.
	This will allow the package tools to pick it up.
	<!-- and it to the PLIST. -->
	<li>Be sure to test all the functions of the script,
	especially the <i>reload</i> function.
	<li>Use <tt>${TRUEPREFIX}</tt> when writing the path to the daemon.
d1297 1
a1297 1
<p>
d1318 3
a1320 4
A
<a href="http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/infrastructure/templates/rc.template">template
script</a> can also be found in the templates directory of your ports tree.

a1322 14

<font color= "#0000e0">
<a href="index.html">[Handbook Index]</a>
<a href="guide.html">[To Section 2 - OpenBSD Porting Guide]</a>
<a href="testing.html">[To Section 4 - Port Testing Guide]</a>
</font>
<p>

<hr>

<a href="../index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a>
<br>
<small>$OpenBSD: specialtopics.html,v 1.50 2016/03/29 01:27:39 tb Exp $</small>

@


1.50
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d716 1
a716 1
	<a href="http://man.openbsd.org/?query=sio_open&amp;sektion=3">sio_open(3)</a>.
d722 1
a722 1
<a href="http://man.openbsd.org/?query=audio&amp;sektion=4">audio(4)</a>
d724 1
a724 1
<a href="http://man.openbsd.org/?query=sndiod&amp;sektion=8">sndiod(8)</a>
d727 1
a727 1
<a href="http://man.openbsd.org/?query=sndiod&amp;sektion=8">sndiod(8)</a>
d936 1
a936 1
groff versus <a href="http://man.openbsd.org/?query=mandoc&amp;sektion=1">mandoc(1)</a>
d957 1
a957 1
<a href="http://man.openbsd.org/?query=mdoc&amp;sektion=7">mdoc(7)</a>
d959 1
a959 1
<a href="http://man.openbsd.org/?query=man&amp;sektion=7">man(7)</a>
d963 1
a963 1
<a href="http://man.openbsd.org/?query=pod2man&amp;sektion=1">pod2man(1)</a>.
d1040 2
a1041 2
<li>Attach the <a href="http://man.openbsd.org/?query=mdoc&amp;sektion=7">mdoc(7)</a>
or <a href="http://man.openbsd.org/?query=man&amp;sektion=7">man(7)</a>
d1077 2
a1078 2
over all <a href="http://man.openbsd.org/?query=mdoc&amp;sektion=7">mdoc(7)</a>
and <a href="http://man.openbsd.org/?query=man&amp;sektion=7">man(7)</a>
d1092 1
a1092 1
<a href="http://man.openbsd.org/?query=pod2man&amp;sektion=1">pod2man(1)</a>.
d1094 1
a1094 1
<a href="http://man.openbsd.org/?query=mdoc&amp;sektion=7">mdoc(7)</a> format.
d1189 2
a1190 2
<a href="http://man.openbsd.org/?query=mdoc&amp;sektion=7">mdoc(7)</a> or
<a href="http://man.openbsd.org/?query=man&amp;sektion=7">man(7)</a>
d1214 1
a1214 1
<a href="http://man.openbsd.org/?query=rc.subr&amp;sektion=8">rc.subr(8)</a>
d1267 1
a1267 1
<small>$OpenBSD: specialtopics.html,v 1.49 2016/03/27 19:52:09 sthen Exp $</small>
@


1.49
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d33 1
d35 4
a38 2
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif" border="0">
</a>
a45 1
<h1><font color="#e00000">3 - Special Porting Topics</font></h1><hr>
d1267 1
a1267 1
<small>$OpenBSD: specialtopics.html,v 1.48 2016/03/22 20:15:24 jca Exp $</small>
@


1.48
log
@Drop paragraph that only made sense when we had static archs.
@
text
@d7 2
d1265 1
a1265 1
<small>$OpenBSD: specialtopics.html,v 1.47 2016/03/22 10:56:56 sthen Exp $</small>
@


1.47
log
@fix URIs, the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@a246 5
You must provide <tt>RUN_DEPENDS</tt> as well if a port requires anything beyond
a library proper.
This will allow the port to build correctly on architectures that do not support
shared libraries.
<p>
d1263 1
a1263 1
<small>$OpenBSD: specialtopics.html,v 1.46 2016/03/21 05:46:21 beck Exp $</small>
@


1.46
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d717 1
a717 1
	<a href="http://man.openbsd.org?query=sio_open&amp;sektion=3">sio_open(3)</a>.
d723 1
a723 1
<a href="http://man.openbsd.org?query=audio&amp;sektion=4">audio(4)</a>
d725 1
a725 1
<a href="http://man.openbsd.org?query=sndiod&amp;sektion=8">sndiod(8)</a>
d728 1
a728 1
<a href="http://man.openbsd.org?query=sndiod&amp;sektion=8">sndiod(8)</a>
d937 1
a937 1
groff versus <a href="http://man.openbsd.org?query=mandoc&amp;sektion=1">mandoc(1)</a>
d958 1
a958 1
<a href="http://man.openbsd.org?query=mdoc&amp;sektion=7">mdoc(7)</a>
d960 1
a960 1
<a href="http://man.openbsd.org?query=man&amp;sektion=7">man(7)</a>
d964 1
a964 1
<a href="http://man.openbsd.org?query=pod2man&amp;sektion=1">pod2man(1)</a>.
d1041 2
a1042 2
<li>Attach the <a href="http://man.openbsd.org?query=mdoc&amp;sektion=7">mdoc(7)</a>
or <a href="http://man.openbsd.org?query=man&amp;sektion=7">man(7)</a>
d1078 2
a1079 2
over all <a href="http://man.openbsd.org?query=mdoc&amp;sektion=7">mdoc(7)</a>
and <a href="http://man.openbsd.org?query=man&amp;sektion=7">man(7)</a>
d1093 1
a1093 1
<a href="http://man.openbsd.org?query=pod2man&amp;sektion=1">pod2man(1)</a>.
d1095 1
a1095 1
<a href="http://man.openbsd.org?query=mdoc&amp;sektion=7">mdoc(7)</a> format.
d1190 2
a1191 2
<a href="http://man.openbsd.org?query=mdoc&amp;sektion=7">mdoc(7)</a> or
<a href="http://man.openbsd.org?query=man&amp;sektion=7">man(7)</a>
d1215 1
a1215 1
<a href="http://man.openbsd.org?query=rc.subr&amp;sektion=8">rc.subr(8)</a>
d1268 1
a1268 1
<small>$OpenBSD: specialtopics.html,v 1.45 2016/01/08 13:06:28 schwarze Exp $</small>
@


1.45
log
@fix man page links after renaming sndiod(1) to sndiod(8)
@
text
@d717 1
a717 1
	<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sio_open&amp;sektion=3">sio_open(3)</a>.
d723 1
a723 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=audio&amp;sektion=4">audio(4)</a>
d725 1
a725 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sndiod&amp;sektion=8">sndiod(8)</a>
d728 1
a728 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sndiod&amp;sektion=8">sndiod(8)</a>
d937 1
a937 1
groff versus <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mandoc&amp;sektion=1">mandoc(1)</a>
d958 1
a958 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mdoc&amp;sektion=7">mdoc(7)</a>
d960 1
a960 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=man&amp;sektion=7">man(7)</a>
d964 1
a964 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pod2man&amp;sektion=1">pod2man(1)</a>.
d1041 2
a1042 2
<li>Attach the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mdoc&amp;sektion=7">mdoc(7)</a>
or <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=man&amp;sektion=7">man(7)</a>
d1078 2
a1079 2
over all <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mdoc&amp;sektion=7">mdoc(7)</a>
and <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=man&amp;sektion=7">man(7)</a>
d1093 1
a1093 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pod2man&amp;sektion=1">pod2man(1)</a>.
d1095 1
a1095 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mdoc&amp;sektion=7">mdoc(7)</a> format.
d1190 2
a1191 2
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=mdoc&amp;sektion=7">mdoc(7)</a> or
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=man&amp;sektion=7">man(7)</a>
d1215 1
a1215 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=rc.subr&amp;sektion=8">rc.subr(8)</a>
d1268 1
a1268 1
<small>$OpenBSD: specialtopics.html,v 1.44 2015/07/02 05:49:05 bentley Exp $</small>
@


1.44
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d725 1
a725 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sndiod&amp;sektion=1">sndiod(1)</a>
d728 1
a728 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sndiod&amp;sektion=1">sndiod(1)</a>
d1268 1
a1268 1
<small>$OpenBSD: specialtopics.html,v 1.43 2015/05/11 11:18:30 sthen Exp $</small>
@


1.43
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@a4 1
<meta name= "resource-type" content= "document">
a5 2
<meta name= "keywords"      content= "openbsd,ports">
<meta name= "distribution"  content= "global">
d1268 1
a1268 1
<small>$OpenBSD: specialtopics.html,v 1.42 2014/12/01 09:59:33 bentley Exp $</small>
@


1.42
log
@Convert the ports faq to use id="" instead of "a name=""></a>.
@
text
@d10 1
d1271 1
a1271 1
<small>$OpenBSD: specialtopics.html,v 1.41 2014/11/10 09:29:52 sthen Exp $</small>
@


1.41
log
@remove some more of the www@@ mentions, Job Snijders pointed out the
one on upgrade56.html
@
text
@d57 1
a57 2
<a name="SharedLibs"></a>
<h2>3.1 - Shared Libraries</h2>
d289 1
a289 3

<a name="Autoconf"></a>
<h2>3.2 - GNU autoconf</h2>
d514 1
a514 3

<a name="Config"></a>
<h2>3.3 - Configuration Files</h2>
d673 1
a673 2
<a name="Audio"></a>
<h2>3.4 - Audio Applications</h2>
d936 1
a936 2
<a name="Mandoc"></a>
<h2>3.5 - Manual pages</h2>
d1200 1
a1200 2
<a name="RcScripts"></a>
<h2>3.6 - rc.d(8) scripts</h2>
d1270 1
a1270 1
<small>$OpenBSD: specialtopics.html,v 1.40 2014/08/13 18:15:49 nick Exp $</small>
@


1.40
log
@
move to cvsweb.openbsd.org
@
text
@a4 1
<link rev= "made" href="mailto:www@@openbsd.org">
a1276 1
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
d1278 1
a1278 1
<small>$OpenBSD: specialtopics.html,v 1.39 2014/06/28 23:41:47 sthen Exp $</small>
@


1.39
log
@aucat -> sndiod, from Jan Stary, plus some whitespace cleanup
@
text
@d1262 1
a1262 1
<a href="http://www.openbsd.org/cgi-bin/cvsweb/~checkout~/ports/infrastructure/templates/rc.template">template
d1280 1
a1280 1
<small>$OpenBSD: specialtopics.html,v 1.38 2014/04/18 11:07:21 sthen Exp $</small>
@


1.38
log
@synbc rc-script example with the port and fix $OpenBSD$ marker, tweaked from
a diff from Mikolaj Kucharski
@
text
@d734 1
a734 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=aucat&amp;sektion=1">aucat(1)</a>
d737 1
a737 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=aucat&amp;sektion=1">aucat(1)</a>
a738 1
   
a748 1
    
d809 1
a809 1
	should give the user a change to state his preferences, then try your
a813 1
	
a818 1
	
d838 1
a838 1
	
d853 1
a853 1
	
a857 1
	
a863 1
	
a868 1
	
d873 1
a873 1
	
a904 1
	
d914 1
a914 1
	
a926 1
	
a932 1
	
a941 1
	
d1280 1
a1280 1
<small>$OpenBSD: specialtopics.html,v 1.37 2014/04/05 21:41:06 sthen Exp $</small>
@


1.37
log
@tweak makefile fragment; cleaner output
@
text
@d1257 1
a1257 1
# $OpenBSD: specialtopics.html,v 1.36 2014/04/05 21:10:32 sthen Exp $
d1263 1
a1263 1
pexp="perl: ${daemon}"
d1291 1
a1291 1
<small>$OpenBSD: specialtopics.html,v 1.36 2014/04/05 21:10:32 sthen Exp $</small>
@


1.36
log
@suggest a custom target in mk.conf for ease of calling gmdiff
@
text
@d1186 1
a1186 1
	@@make fake; find ${WRKINST}${TRUEPREFIX}/man -type f -path '*/man/man*' -print0 | xargs -0r gmdiff | less</pre>
d1257 1
a1257 1
# $OpenBSD: specialtopics.html,v 1.35 2014/01/24 09:48:59 schwarze Exp $
d1291 1
a1291 1
<small>$OpenBSD: specialtopics.html,v 1.35 2014/01/24 09:48:59 schwarze Exp $</small>
@


1.35
log
@fix typo; from Jan Stary <hans at stare dot cz>
@
text
@d1181 6
a1186 1
groff output, <tt>USE_GROFF</tt> is not needed.
d1257 1
a1257 1
# $OpenBSD: specialtopics.html,v 1.34 2014/01/15 10:22:25 jca Exp $
d1291 1
a1291 1
<small>$OpenBSD: specialtopics.html,v 1.34 2014/01/15 10:22:25 jca Exp $</small>
@


1.34
log
@Improve the section discussing soname.  Explain a bit more why it is
considered undesirable, and don't bother showing examples of wrong
soname usage; instead, say how it should be used *only* if killing it is
not easily feasible.  Discussed with and ok sthen@@
@
text
@d1042 1
a1042 1
The gmdiff script is not scriptly required, doing the necessary checks
d1252 1
a1252 1
# $OpenBSD: specialtopics.html,v 1.33 2014/01/14 08:53:07 zhuk Exp $
d1286 1
a1286 1
<small>$OpenBSD: specialtopics.html,v 1.33 2014/01/14 08:53:07 zhuk Exp $</small>
@


1.33
log
@Add a note about ports which set SONAME explicitly. Any corrections could
be done in tree.

Input from sthen@@, okay ajacoutot@@.
@
text
@d155 4
a158 3
Setting DT_SONAME is not a bug itself, but those ports often record the
wrong library version there.
A wrong soname will result in non-usable binaries that depend on this
d161 1
a161 1
To check if the DT_SONAME is set, run the following command:
a165 12

<p>
For example, instead of the (proper) <tt>libfoo.so.0.0</tt>, DT_SONAME
may be set to:
<ul>
<li><tt>libfoo.so.0</tt> (only major version part)
<li><tt>libfoo.so.4</tt> (totally wrong version)
<li><tt>libfoo.so.0.0.3</tt> (extra version part)
<li><tt>foo.so.0.0</tt> (no &quot;lib&quot; prefix)
</ul>

<p>
d168 1
a168 1
The only exception is a situatuon when the right soname is recorded
d170 2
a171 1
upstream doesn't want to take in such patch.
d1252 1
a1252 1
# $OpenBSD: specialtopics.html,v 1.32 2013/11/12 11:13:31 sthen Exp $
d1286 1
a1286 1
<small>$OpenBSD: specialtopics.html,v 1.32 2013/11/12 11:13:31 sthen Exp $</small>
@


1.32
log
@- remove some a.out mentions
- adjust USE_LIBTOOL now that this is the default and talk about
CMake as well since this works in a similar way
- remove the outdated list of autoconf versions in the ports tree
and suggest that people use the version originally used in the distfile

ok zhuk dcoppa
@
text
@d125 1
d150 33
d1262 1
a1262 1
# $OpenBSD: specialtopics.html,v 1.31 2013/06/22 09:58:46 schwarze Exp $
d1296 1
a1296 1
<small>$OpenBSD: specialtopics.html,v 1.31 2013/06/22 09:58:46 schwarze Exp $</small>
@


1.31
log
@Late spring cleaning of the mandoc section:
* This is no longer a new topic, remove respective remarks.
* Gently encourage porters a bit more to do these checks.
* Relax the recommendation regarding the age of the mandoc(1)
  binary, error reporting has stabilized quite a bit by now.
* Mention the gmdiff script, it's really handy.
* Ask for reports regarding unimplemented roff(7) requests, time is
  ripe to implement some more of those needed by real-world manuals.
@
text
@a111 3
<p>
Note that the library naming scheme is ubiquitous on OpenBSD platforms,
whether they be ELF or a.out.
d128 4
a131 2
This is quite valuable in, for instance, libtool-based ports, which provide
one such version variable for each library they create.
d134 7
a140 4
The best way to handle libtool-based ports is to set
<tt>USE_LIBTOOL=Yes</tt>.
This activates the version of libtool in base, which handles most details
automatically:
d142 3
a144 3
	<li>libtool looks at <tt>SHARED_LIBS</tt> and automatically
	replaces version numbers.
	<li>libtool produces a log of shared library building in
d449 3
a451 3
Versions currently available are 2.13, 2.52, 2.54, 2.56, 2.57, 2.58,
2.59, 2.60, 2.61, 2.62, 2.63, 2.64, 2.65, 2.67 and 2.68.
These cover 99% of all configure scripts out there.
d1228 1
a1228 1
# $OpenBSD: specialtopics.html,v 1.30 2013/06/03 21:49:17 jca Exp $
d1262 1
a1262 1
<small>$OpenBSD: specialtopics.html,v 1.30 2013/06/03 21:49:17 jca Exp $</small>
@


1.30
log
@Indent "Special tricks" example, making it nicer to read.
@
text
@d933 1
a933 2
issues in ports.  Note that this topic is under development,
so the information provided here is subject to change.
d940 2
a941 2
reduce the port's build time.  Note that these checks are not considered
a required step to create a good port.  It is completely acceptable to
d994 1
a994 1
<h3>Which tool do I need?</h3>
d997 2
a998 2
installed.  For now, it should not be older than two or three weeks, because
error detection is actively developed, and being told about issues
d1013 6
d1083 2
a1084 3
for anything here, it's not up to the job yet.  You can stop reading right
here.  Usually, there is no need to report anything, except in two cases
that we are interested in learning about:
d1091 7
d1142 15
d1184 2
a1185 2
It may produce bogus warnings.  We are trying to fix that, but that
will still need lots of time to mature.  In case of doubt, report
d1226 1
a1226 1
# $OpenBSD: specialtopics.html,v 1.29 2012/10/10 08:50:07 rpe Exp $
d1260 1
a1260 1
<small>$OpenBSD: specialtopics.html,v 1.29 2012/10/10 08:50:07 rpe Exp $</small>
@


1.29
log
@use <blockquote><pre></pre></blockquote> for examples
let some more complex command examples stand out on its own
@
text
@d559 2
a560 2
FAKE_FLAGS=DESTDIR=${WRKINST}
sysconfdir=${WRKINST}${TRUEPREFIX}/share/examples/PKGNAME
d1200 1
a1200 1
# $OpenBSD: specialtopics.html,v 1.28 2012/10/09 21:04:42 rpe Exp $
d1234 1
a1234 1
<small>$OpenBSD: specialtopics.html,v 1.28 2012/10/09 21:04:42 rpe Exp $</small>
@


1.28
log
@remove <tt></tt> around simple command names
@
text
@d92 12
a103 2
	<li>A good hint is to compare the output of <tt><b>nm -g
oldlib.so.X.Y | cut -c10- | grep -e^T</b></tt> and <tt><b>nm -g newlib.so.X.Y | cut -c10- | grep -e^T</b></tt>.
d119 5
a123 1
<tt><b>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</b></tt>
d169 5
a173 1
<tt><b>ld -o program program.o -L/usr/local/lib/qt -lqt</b></tt>.
d176 4
a179 1
<tt><b>ld -o program program.o -L/usr/local/lib/qt2 -lqt</b></tt>.
d188 5
a192 1
<tt><b>ld -o program program.o -L/usr/local/lib -lqt</b></tt>.
d210 6
a215 4
<pre>
	LIB_DEPENDS += x11/gtk+
	WANTLIB += gtk&gt;=1.2 gdk&gt;=1.2
</pre>
d283 2
a284 1
<pre>
d286 2
a287 1
</pre>
d557 6
a562 3
<pre>
FAKE_FLAGS=DESTDIR=${WRKINST} sysconfdir=${WRKINST}${TRUEPREFIX}/share/examples/PKGNAME
</pre>
d572 2
a573 1
<pre>
d596 2
a597 1
</pre>
d601 1
a601 1
<pre>
d613 2
a614 1
</pre>
d617 2
a618 1
<pre>
d649 2
a650 1
</pre>
d726 25
a750 25
	<pre>
    AUDIO_INIT_INFO(&amp;a_info);
    a_info.play.encoding = AUDIO_ENCODING_SLINEAR;
    a_info.play.precision = 16;
    a_info.play.sample_rate = 22050;
    error = ioctl(audio, AUDIO_SETINFO, &amp;a_info);
    if (error)
	/* deal with it */
    error = ioctl(audio, AUDIO_GETINFO, &amp;a_info);
    switch(a_info.play.encoding)
	{
    case AUDIO_ENCODING_ULINEAR_LE:
    case AUDIO_ENCODING_ULINEAR_BE:
	if (a_info.play.precision == 8)
	    /* ... */
	else
	    /* ... */
	break;
    case ...

    default:
	/* don't forget to deal with what you don't know !!! For instance, */
	fprintf(stderr,
		"Unsupported audio format (%d), ask ports@@ about that\n",
		a_info.play.encoding);
d752 1
a752 1
	}
d754 1
a754 1
	</pre>
d1004 1
a1004 1
<pre>
d1012 1
a1012 1
</pre>
d1072 1
a1072 1
<pre>
d1074 1
a1074 1
</pre>
d1197 1
a1197 1
<pre>
d1200 1
a1200 1
# $OpenBSD: specialtopics.html,v 1.27 2012/10/09 20:36:20 rpe Exp $
d1213 1
a1213 1
</pre>
d1234 1
a1234 1
<small>$OpenBSD: specialtopics.html,v 1.27 2012/10/09 20:36:20 rpe Exp $</small>
@


1.27
log
@USE_LIBTOOL=Yes now activates the libtool in base
@
text
@d66 4
a69 4
When you link a program, the linker <tt>ld</tt> embeds that information
in the created binary. You can see it with <tt>ldd</tt>.
Later, when you run that program, the dynamic linker
<tt>ld.so</tt> uses that information to find the right dynamic library:
d135 3
a137 3
As a rule, requesting the user to add directories to their <tt>ldconfig</tt>
path is a very bad idea: all shared libraries that are linked directly to
programs should appear in <tt>/usr/local/lib</tt>.
d141 6
a146 5
	<li>At build time, <tt>ld</tt> uses <tt>-L</tt> flags
to set up paths to look for libraries. It stops looking as soon as
it finds a library that matches its requirements.
	<li>At run time, <tt>ld.so</tt> uses the information cached
through <tt>ldconfig</tt> to find the required library.
d164 1
a164 1
enough to satisfy <tt>ld.so</tt>.
d193 3
a195 3
package will have library dependency information embedded as lines for
<tt>ld.so</tt> that hold the actual major.minor number that was used
for building, and nothing for static libraries.
d208 1
a208 2
<tt>WANTLIB</tt> lines must specify the same paths that are used for
<tt>ld</tt>.
d1163 1
a1163 1
# $OpenBSD: specialtopics.html,v 1.26 2012/10/09 20:32:33 rpe Exp $
d1197 1
a1197 1
<small>$OpenBSD: specialtopics.html,v 1.26 2012/10/09 20:32:33 rpe Exp $</small>
@


1.26
log
@correct <tt< -> <tt>
@
text
@d123 2
a124 2
This activates the ports tree version of libtool,
which handles most details automatically:
d1163 1
a1163 1
# $OpenBSD: specialtopics.html,v 1.25 2012/09/20 06:08:41 rpe Exp $
d1197 1
a1197 1
<small>$OpenBSD: specialtopics.html,v 1.25 2012/09/20 06:08:41 rpe Exp $</small>
@


1.25
log
@add <tt></tt> to:
- variable names
- make targes
- flags and options
- filnames
- /path/to/files

in changed paragraphs:
- start sentences on a new line
- split long lines around 72-80 colums
- fix a typo (spotted by Adam Jeanguenat)

ok sthen@@ nick@@
@
text
@d456 1
a456 1
<tt<configure.in</tt> for snappier results, and <tt>Makefile.in</tt> to allow
d1152 1
a1152 1
	<li>Use <tt<${TRUEPREFIX}</tt> when writing the path to the daemon.
d1163 1
a1163 1
# $OpenBSD: specialtopics.html,v 1.24 2012/09/14 17:08:03 rpe Exp $
d1197 1
a1197 1
<small>$OpenBSD: specialtopics.html,v 1.24 2012/09/14 17:08:03 rpe Exp $</small>
@


1.24
log
@FNF
- enclose in-text commands with <tt><b></b></tt>
  and remove '' and `' around commands
- enclose commands in <pre> blocks with <b></b>
- start modified sentences on a new line
- remove <tt></tt> from man page links
- consistently use ksh prompts
@
text
@d115 2
a116 2
On the other hand, remember that you can override Makefile variables from
the command line, by using <tt>MAKE_FLAGS</tt> in the port's Makefile.
d122 2
a123 1
<tt>USE_LIBTOOL=Yes</tt>. This activates the ports tree version of libtool,
d130 1
a130 1
	included in the port's Makefile.
d135 5
a139 5
As a rule, requesting the user to add directories to their ldconfig path
is a very bad idea: all shared libraries that are linked directly to
programs should appear in /usr/local/lib.  However, it is quite possible
to use a symbolic link to the actual library. You should understand the
library lookup rules:
d151 5
a155 5
Since both ports can be installed simultaneously, to make sure a given
program will link against qt.1, that library is provided as
<tt>/usr/local/lib/qt/libqt.so.1.45</tt>, and programs will be linked
using <tt><b>ld -o program program.o -L/usr/local/lib/qt -lqt</b></tt>.
Similarly, a program that links with qt.2 will use the
d165 1
a165 1
It is an error to link a program using qt1 with
d183 1
a183 1
You just write them in LIB_DEPENDS/WANTLIB like this:
d189 3
a191 2
It is not an error to specify static libraries on a WANTLIB line as
well. WANTLIB are fully evaluated at package build time: the resulting
d197 14
a210 12
You must provide RUN_DEPENDS as well if a port requires anything beyond
a library proper. This will allow the port to build correctly on
architectures that do not support shared libraries.
<p>
In fact, providing LIB_DEPENDS lines even for static libraries is a good idea:
this will simplify port update if a given dependency goes from a static
library to a shared library.
<p>
WANTLIB lines must specify the same paths that are used for
<tt>ld</tt>. With the same example as above, a standard qt2 depends
fragment would say
<tt>WANTLIB += lib/qt2/qt.=2</tt>.
d223 4
a226 3
	<li>You may have to adjust dependent ports WANTLIB and LIB_DEPENDS.
If you introduce new shared libraries, watch out for BUILD_DEPENDS
that need to be turned into LIB_DEPENDS.
d242 4
a245 3
Autoconf is a gnu tool that is supposed to help in writing portable programs.
It is often used together with automake (portable makefiles) and libtool
(portable shared libraries).
d253 3
a255 3
Quite a few software projects have configure scripts, and in most cases,
those scripts were generated by autoconf.  Such scripts have a line near
the top that says:
d261 4
a264 3
autoconf ports come with the generated scripts, and with the source scripts
that generated these.  The next section covers the simple case where you simply
want to run the generated script, and not modify it.
d272 1
a272 1
which will automatically invoke ${WRKSRC}/configure.
d275 2
a276 2
If your configure script lies elsewhere, just set CONFIGURE_SCRIPT to the
right value.
d279 5
a283 4
Configure scripts often take a lot of arguments. The default processing of
the ports tree will only pass --prefix and --sysconfdir to these.
Very old configure scripts don't understand --sysconfdir; you can set
<tt>CONFIGURE_STYLE=gnu old</tt> in such cases.
d286 3
a288 5
Similarly, some ports are not aware of DESTDIR.  Those ports will often
accept setting
<tt>prefix=${DESTDIR}/usr/local</tt>
without any issue, which can be
done with <tt>CONFIGURE_STYLE=gnu dest</tt>.
d291 2
a292 2
Ports using autoconf and automake will have Makefiles with a specific format,
that begins with a few standard locations:
d295 3
a297 3
<li>bindir: location for binaries
<li>sysconfdir: location for configuration
<li>includedir: location for include dirs
d299 27
a325 18
If the configure script does not allow you to override these, you may still be able to do it later on during the build or fake stage.  This does assume, of course, that the only reference to such a directory is within the generated Makefile.

<p>
For instance, a neat trick involves switching sysconfdir to ${PREFIX}/share/example/pkgname during the fake stage, to get default config files to package
(since packages don't normally store files under /etc).

<p>
Ports fully using autoconf and automake   may support building under
a different directory: try setting
<tt>SEPARATE_BUILD=flavored</tt>
and see if that works.  This would allow you to wipe the build tree without
wiping the source tree, by giving you separate ${WRKSRC} and
${WRKBUILD} locations.  In a few cases, separate builds may need to
use gmake, where the rest of the port is happy with bsd-make,
in which case this is not worth it.

<p>
automake will generate a few rules to rebuild all the generated scripts if anything changes. These often get in the way of OpenBSD specific patches. For that reason, as soon as CONFIGURE_STYLE corresponds to autoconf use, post-patch will touch various files in a specific order, so that no automake dependencies get triggered later.
d327 2
a328 2
REORDER_DEPENDENCIES (the default is
${PORTSDIR}/infrastructure/mk/automake.dep).
d332 4
a335 3
The configure script first runs a fixed script called config.guess,
that will determine which system configure is running on.  config.guess
does not vary from port to port and is a fixed script, so
d337 52
a388 21
specific OpenBSD architectures.  Since most software packages come with bundled
config.guess, and since some of them are quite old, this is a necessary step.
If a software package contains more than one config.guess, you can overwrite
them all by setting MODGNU_CONFIG_GUESS_DIRS to the full list of directories
to process.

<p>
The configure script generated by autoconf then  simply checks all functionality
on the existing system, by looking for a compiler, and running simple test
programs through it.  Since some of these tests are quite lengthy, the ports
tree primes configure with a CONFIG_SITE=config.site file.
configure will look at the contents of that file first before running the tests.
A few configure scripts may have bugs that will prevent them from running correctly in the presence of config.site. Setting CONFIG_SITE to empty will weed out
these kind of problems.
<p>
Most configure will auto-detect quite a few conditions. It is very important to look at configure's options, at configure's output, and at the generated config.log file: these will tell you what options were found, and what options were not found.  This will allow you to find out when configure did not find a package that was installed.
<p>
This will also tell you which optional packages configure would find. In the ports tree, those are called hidden dependencies.  This is a bad thing: a hidden dependency is some extra package configure will pick up if it's installed. Then it will proceed in building a mutant package. In some cases, the build will fail because of OpenBSD peculiarities. In some cases, the package creation will fail, as some files will have different names. In some cases, the resulting package will be incorrect, as it will fail to record any dependency on the optional package.   So looking at configure's output is one of the most important duty of ports' maintainers.   Watch out for cascading tests: detecting a given feature may lead a configure script to try out and find some dependent feature, so you will not see the second feature in the configure output unless the first feature is triggered.
<p>
In case some hidden dependencies are found, some action should be taken. The most simple action is to install the optional package, and see what configure will do. If it detects the package, one can either disable the detection (by using configure options, or environment variables, or patching the configure script),
or verify that the build goes well and add the dependency to the list of dependent packages.  A better choice is to figure out a reasonable set of default dependencies, and then add some flavors to cover other common features.
d392 28
a419 11
Configure scripts are normally generated from a configure.in file (recent versions of autoconf use a configure.ac file instead). A standard library of definitions is often available in an aclocal.m4.
<p>
In most cases, patching configure directly is a bad idea.  It is better to patch the configure.in file and get the ports tree to call autoconf.   Good porters will endeavor to write configure.in changes that they can feed to software authors.
<p>
Different versions of autoconf will produce distinct configure scripts.
autoconf-2.13 is special: it was used over a fairly long period, and there has been mutant versions of autoconf-2.13 (actually, betas of a newer autoconf) in wide use.  Hence, using autoconf-2.13 will often not produce the exact same configure script.
<p>
Since having several autoconf versions around at the same time is useful, the autoconf script actually available in the ports tree is part of a port called metaauto.  Which autoconf script actually gets called is controlled through the environment variable AUTOCONF_VERSION.
Calling autoconf happens if you set CONFIGURE_STYLE=autoconf, together with
setting AUTOCONF_VERSION.  Versions currently available are 2.13, 2.52, 2.54,
2.56, 2.57, 2.58, 2.59, 2.60, 2.61, 2.62, 2.63, 2.64, 2.65, 2.67 and 2.68.
d423 8
a430 2
autoconf relies on the standard unix preprocessor m4(1).  Normally, autoconf relies on some features on the GNU version of m4, gm4.  Fortunately, OpenBSD's m4
has enough features to run autoconf as well, it just needs to be invoked with -g to handle autoconf.   Very seldom, autoconf run with OpenBSD's m4 will produce bogus configure scripts.   The OpenBSD developers will fix such an issue.
d443 19
a461 15
create a config.h.in file.  Setting CONFIGURE_STYLE=autoconf will also run
autoheader. A few ports don't use autoheader. Setting CONFIGURE_STYLE=autoconf no-autoheader will fix that issue.
<p>
libtool has a few specific hooks in configure.in.  There is often a
libtool.m4 script that goes with it.   Getting libtool to do the right thing
goes beyond the scope of this documentation.
<p>
KDE uses an extra layer on top of autoconf. This extra layer assembles a
configure.in file from a set of configure.in.in files, and is also able to
tweak both configure.in for snappier results, and Makefile.in to allow for
some supplementary options in building, and to automatically insert DESTDIR
in the right places.
The AUTOCONF variable can be used to tweak the actual autoconf script
that gets run, and KDE expects /bin/sh ${WRKDIST}/admin/cvs.sh to work
correctly.
d472 4
a475 3
<i>Note that it is perfectly acceptable for a binary package to have both ${PREFIX} and
${SYSCONFDIR} hardcoded: PREFIX and SYSCONFDIR are mostly user settings
that influence the build of the package.</i>
d478 1
a478 1
<h3>@@sample explained</h3>
d484 1
a484 1
file, for instance as ${PREFIX}/share/examples/PKGNAME/foo.rc.
d496 1
a496 1
<h3>more @@sample specificities</h3>
d525 5
a529 4
A neat trick which often works is to look at a program's makefile, and override
the configuration directory  in the fake installation stage by using specific
<tt>FAKE_FLAGS</tt>, for instance:
<pre>FAKE_FLAGS=DESTDIR=${WRKINST} sysconfdir=${WRKINST}${TRUEPREFIX}/share/examples/PKGNAME
d537 2
a538 1
<li>The security/integrit port uses a configuration directory with a few files.
d564 2
a565 1
<li>The security/nessus port uses <tt>@@sample dir/</tt> to create private directories.
d580 2
a581 1
<li>The sysutils/nut port uses a specific owner for its configuration files.
d729 1
a729 1
	<tt>swab(3)</tt> if an endianness change is required.
d906 1
a906 1
just put <tt>USE_GROFF=Yes</tt> into the Makefile and be done with it.
d941 1
a941 1
typically using a <tt>post-install</tt> target in the port Makefile.
d1087 2
a1088 2
impression that mandoc output is just fine all the same, it's your call
to either set <tt>USE_GROFF=Yes</tt> (that's the quicker way out)
d1146 2
a1147 2
	<li>The script has to be placed into ${PKGDIR} with
	a <i>.rc</i> extension, like <i>mpd.rc</i>.
d1152 1
a1152 1
	<li>Use ${TRUEPREFIX} when writing the path to the daemon.
d1163 1
a1163 1
# $OpenBSD: specialtopics.html,v 1.23 2012/09/14 15:44:03 ratchov Exp $
d1197 1
a1197 1
<small>$OpenBSD: specialtopics.html,v 1.23 2012/09/14 15:44:03 ratchov Exp $</small>
@


1.23
log
@update link to sndio tips page, from Remco <remco@@d-compu.dyndns.org>
thanks!
@
text
@d92 4
a95 4
	<li>A good hint is to compare the output of <b>nm -g
oldlib.so.X.Y | cut -c10- | grep -e^T</b> and <b>nm -g newlib.so.X.Y | cut
-c10- | grep -e^T</b>. This won't show if functions arguments type changed,
but at least you'll see quickly if some functions were added and/or removed.
d109 1
a109 1
<tt>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</tt>
d153 1
a153 1
using <tt>ld -o program program.o -L/usr/local/lib/qt -lqt</tt>.
d156 1
a156 1
<tt>ld -o program program.o -L/usr/local/lib/qt2 -lqt</tt>.
d165 1
a165 1
<tt>ld -o program program.o -L/usr/local/lib -lqt</tt>.
d178 2
a179 2
use <tt>make lib-depends-check</tt> or
<tt>make port-lib-depends-check</tt>
d439 1
a439 1
<tt>make update-plist</tt> knows how to copy <tt>@@sample</tt>
d889 7
a895 7
$ cd /usr/src/usr.bin/mandoc/
$ cvs up -dP
$ make cleandir
$ make obj
$ make depend
$ make
$ sudo make install
d929 2
a930 2
by the mandoc utility, copy the output of <tt>mandoc -Tlint</tt>
(or <tt>mandoc -Tlint -Werror</tt> when warnings are irrelevant)
d957 1
a957 1
$ mandoc -Tlint -Werror *
d1032 1
a1032 1
make sense to use <tt>mandoc -Tlint</tt>
d1084 1
a1084 1
# $OpenBSD: specialtopics.html,v 1.22 2012/09/12 20:03:00 rpe Exp $
d1118 1
a1118 1
<small>$OpenBSD: specialtopics.html,v 1.22 2012/09/12 20:03:00 rpe Exp $</small>
@


1.22
log
@FNF
- small tweaks to pass validator.w3.org
- mention, that the pages passed the validation
- add missing license block to index.html
@
text
@d587 1
a587 1
	<a href="http://caoua.org/alex/obsd/libsndio.html">hints on
d1084 1
a1084 1
# $OpenBSD: specialtopics.html,v 1.21 2012/09/12 19:24:52 rpe Exp $
d1118 1
a1118 1
<small>$OpenBSD: specialtopics.html,v 1.21 2012/09/12 19:24:52 rpe Exp $</small>
@


1.21
log
@FNF for www/faq/ports/

perl -pi -e 's#<code>#<tt>#g;s#</code>#</tt>#g' *.html
perl -pi -e 's#<strong>#<b>#g;s#</strong>#</b>#g' *.html
perl -pi -e 's#<em>#<i>#g;s#</em>#</i>#g' *.html
perl -pi -e 's#</p>##;s#</li>##' *.html

discussed with ajacoutot@@ and nick@@
@
text
@d30 2
d1084 1
a1084 1
# $OpenBSD: specialtopics.html,v 1.20 2012/01/26 08:16:15 ajacoutot Exp $
d1118 1
a1118 1
<small>$OpenBSD: specialtopics.html,v 1.20 2012/01/26 08:16:15 ajacoutot Exp $</small>
@


1.20
log
@tweak @@newuser sample.
@
text
@d62 1
a62 1
<code>libfoo.so.major.minor</code>.
d64 2
a65 2
When you link a program, the linker <code>ld</code> embeds that information
in the created binary. You can see it with <code>ldd</code>.
d67 1
a67 1
<code>ld.so</code> uses that information to find the right dynamic library:
d73 3
a75 3
So, this means that <strong>all</strong> libraries with the same major
number and an equal or higher minor number <strong>must satisfy the
binary API that the program expects</strong>.  If they do not, then your
d86 2
a87 2
type changes in an incompatible way, the library major number <strong>must
be bumped</strong>.
d107 1
a107 1
<code>gcc -shared -fpic|-fPIC -o libfoo.so.4.5 obj1 obj2</code>
d114 1
a114 1
the command line, by using <code>MAKE_FLAGS</code> in the port's Makefile.
d120 1
a120 1
<code>USE_LIBTOOL=Yes</code>. This activates the ports tree version of libtool,
d123 1
a123 1
	<li>libtool looks at <code>SHARED_LIBS</code> and automatically
d126 1
a126 1
	<code>${WRKBUILD}/shared_libs.log</code> which can be directly
d138 1
a138 1
	<li>At build time, <code>ld</code> uses <code>-L</code> flags
d141 2
a142 2
	<li>At run time, <code>ld.so</code> uses the information cached
through <code>ldconfig</code> to find the required library.
d147 1
a147 1
given library, say <code>qt.1.45</code> and <code>qt.2.31</code>.
d150 2
a151 2
<code>/usr/local/lib/qt/libqt.so.1.45</code>, and programs will be linked
using <code>ld -o program program.o -L/usr/local/lib/qt -lqt</code>.
d153 2
a154 2
<code>/usr/local/lib/qt2/libqt.so.2.31</code> file with
<code>ld -o program program.o -L/usr/local/lib/qt2 -lqt</code>.
d158 3
a160 3
<code>/usr/local/lib/libqt.so.1.45</code> and a link called
<code>/usr/local/lib/libqt.so.2.31</code> have been provided. This is
enough to satisfy <code>ld.so</code>.
d163 2
a164 2
<code>ld -o program program.o -L/usr/local/lib -lqt</code>.
This code assumes that <code>qt.2.31</code> is not installed, which is
d171 1
a171 1
<code>/usr/local/lib</code>.
d176 2
a177 2
use <code>make lib-depends-check</code> or
<code>make port-lib-depends-check</code>
d189 1
a189 1
<code>ld.so</code> that hold the actual major.minor number that was used
d202 1
a202 1
<code>ld</code>. With the same example as above, a standard qt2 depends
d204 1
a204 1
<code>WANTLIB += lib/qt2/qt.=2</code>.
d262 1
a262 1
<code>CONFIGURE_STYLE=	gnu</code>
d273 1
a273 1
<code>CONFIGURE_STYLE=gnu old</code> in such cases.
d278 1
a278 1
<code>prefix=${DESTDIR}/usr/local</code>
d280 1
a280 1
done with <code>CONFIGURE_STYLE=gnu dest</code>.
d300 1
a300 1
<code>SEPARATE_BUILD=flavored</code>
d391 2
a392 2
Packages should only install files under <code>${PREFIX}</code>, which is
<code>/usr/local</code> by default.
d394 1
a394 1
under <code>${SYSCONFDIR}</code>, which is <code>/etc</code> by default.
d403 1
a403 1
Packing-lists contain a specific <code>@@sample</code> mechanism to deal with
d408 1
a408 1
<li>The packing-list should contain a <code>@@sample ${SYSCONFDIR}/foo.rc</code>
d421 1
a421 1
Contrary to other files in a packing-list, <code>@@sample</code> entries can
d426 1
a426 1
<code>@@sample ${SYSCONFDIR}/directory/</code> will deal with that.
d428 1
a428 1
Using <code>@@sample directory/</code> to create port specific directories
d430 2
a431 2
<code>@@sample</code> correctly interprets correct <code>@@mode</code>,
<code>@@owner</code>, <code>@@group</code> annotations.   This can be a
d437 1
a437 1
<code>make update-plist</code> knows how to copy <code>@@sample</code>
d443 3
a445 3
<code>${SYSCONFDIR}</code>, it is only the fake installation stage that must
put stuff under <code>${PREFIX}/share/examples</code>.
One simple way to handle that is to copy the files over in a <code>post-install</code>.
d450 1
a450 1
<code>FAKE_FLAGS</code>, for instance:
d485 1
a485 1
<li>The security/nessus port uses <code>@@sample dir/</code> to create private directories.
d542 1
a542 1
</p>
a547 1
</p>
a548 1
<h3>Using <code>ossaudio</code></h3>
d550 3
a552 1
  The <code>ossaudio</code> emulation is possibly the simplest way, but
d555 4
a558 4
  	<li>It redefines <code>ioctl</code>. If the code to port uses
	<code>ioctl</code> for more than audio, you will have to
	<code>#undef ioctl</code> and use the bare form with
	<code>_ossioctl</code>.
d570 1
a570 1
  changed places, and that some entries in <code>sys/audioio.h</code>
d595 1
a595 1
   </p>
d600 3
a602 3
	<strong>YOU SHOULDN'T ASSUME ANYTHING ABOUT THE AUDIO HARDWARE USED.
	</strong><br>
	Wrong code is code that only checks the <code>a_info.play.precision</code>
d606 1
a606 1
    </p>
d643 2
a644 2
	<code>AUDIO_ENCODING_SLINEAR</code>), and you retrieve
	an encoding with endianness (e.g., <code>AUDIO_ENCODING_SLINEAR_LE</code>).
d648 1
a648 1
	<code>swab(3)</code> if an endianness change is required.
d672 1
a672 1
	</p>
d678 1
a678 1
	</p>
d698 1
a698 1
	</p>
d706 2
a707 2
	sound you want to play, and that you get absolutely <em>no
	overflows</em> -- those will always sound much worse than the
d711 1
a711 1
	a division, as C <code>&gt;&gt;</code> operator is not portable on
d713 1
a713 1
	</p>
d718 1
a718 1
	</p>
d725 1
a725 1
	</p>
d731 1
a731 1
	</p>
d736 1
a736 1
	</p>
d740 1
a740 1
	    essential.  Keep in mind that <code>write</code>, as a system call,
d751 1
a751 1
	    <code>AUDIO_GETENC</code> <code>ioctl</code> should be used
d754 1
a754 1
	    <code>AUDIO_ENCODINGFLAG_EMULATED</code> flag. If your
d768 1
a768 1
	</p>
d778 1
a778 1
	</p>
d784 1
a784 1
	<code>AUDIO_GETOOFFS</code>, then use  that information to
d791 1
a791 1
	</p>
d798 1
a798 1
	</p>
d801 2
a802 2
	<strong>If you don't send your comments to the author, your work will
	have been useless</strong>.</p>
d808 1
a808 1
	</p>
d825 1
a825 1
just put <code>USE_GROFF=Yes</code> into the Makefile and be done with it.
d844 1
a844 1
<code>.\" Automatically generated by Pod::Man...</code>
d867 1
a867 1
with the automatic part of the checks, just put <code>USE_GROFF=Yes</code>.
d869 1
a869 1
<p>Only remove <code>USE_GROFF</code> if you plan to actively maintain
d871 1
a871 1
Removing <code>USE_GROFF</code> from a port nobody is going to maintain
d900 1
a900 1
please always tick off the following checklist:</p>
d959 1
a959 1
the port needs <code>USE_GROFF</code>.  Don't even consider using mandoc
d979 1
a979 1
If yes, you do not need <code>USE_GROFF</code>, and there is no need
d1007 1
a1007 1
to either set <code>USE_GROFF=Yes</code> (that's the quicker way out)
d1009 1
a1009 1
<code>USE_GROFF</code> in that particular case.  Reporting it is
d1030 1
a1030 1
make sense to use <code>mandoc -Tlint</code>
d1050 1
a1050 1
</p>
d1056 1
a1056 1
</p>
d1073 1
a1073 1
</p>
d1082 1
a1082 1
# $OpenBSD: specialtopics.html,v 1.19 2011/06/17 20:38:35 sthen Exp $
d1100 1
a1100 1
</p>
d1116 1
a1116 1
<small>$OpenBSD: specialtopics.html,v 1.19 2011/06/17 20:38:35 sthen Exp $</small>
@


1.19
log
@update autoconf versions list, from Brad
@
text
@d504 1
a504 1
@@newuser ${NUT_USER}:${NUT_ID}:::UPS User:/var/empty:/sbin/nologin
d1082 1
a1082 1
# $OpenBSD: specialtopics.html,v 1.18 2011/05/22 13:03:21 schwarze Exp $
d1116 1
a1116 1
<small>$OpenBSD: specialtopics.html,v 1.18 2011/05/22 13:03:21 schwarze Exp $</small>
@


1.18
log
@Brynet came up with a viable solution to the Imake/USE_GROFF issue
within less than a day, making me look slightly silly.  =:-/
Thanks!
@
text
@d353 1
a353 1
2.56, 2.57, 2.58, 2.59, 2.60, 2.61, 2.62, 2.63, 2.64 and 2.65.
d1082 1
a1082 1
# $OpenBSD: specialtopics.html,v 1.17 2011/05/21 21:05:05 schwarze Exp $
d1116 1
a1116 1
<small>$OpenBSD: specialtopics.html,v 1.17 2011/05/21 21:05:05 schwarze Exp $</small>
@


1.17
log
@mention that CONFIGURE_STYLE=imake ports must USE_GROFF
@
text
@a850 6
<li>if a port is using <tt>CONFIGURE_STYLE = imake</tt>, <tt>USE_GROFF</tt>
is required for now, even if the manuals would work fine with mandoc:
The Imake build system is exceedingly complicated and nobody has figured
out yet how to tell it to install unformatted manual pages.
If you do find out how to do that without breaking the Xenocara build
and without breaking any other ports using Imake, please tell us!
d853 9
d1082 1
a1082 1
# $OpenBSD: specialtopics.html,v 1.16 2011/04/29 21:51:54 schwarze Exp $
d1116 1
a1116 1
<small>$OpenBSD: specialtopics.html,v 1.16 2011/04/29 21:51:54 schwarze Exp $</small>
@


1.16
log
@Better instructions for reporting mandoc problems.
These are quite frequent, and better signal for less effort would help.
While here, stop talking about groff-1.15.
@
text
@d849 11
a859 2
However, if a port is using DocBook, checking mandoc
compatibility will likely turn out to be a waste of time.
d1079 1
a1079 1
# $OpenBSD: specialtopics.html,v 1.15 2011/03/21 21:37:38 ajacoutot Exp $
d1113 1
a1113 1
<small>$OpenBSD: specialtopics.html,v 1.15 2011/03/21 21:37:38 ajacoutot Exp $</small>
@


1.15
log
@s/LOCALBASE/PREFIX
@
text
@d884 51
d949 9
a957 1
here.
d967 2
a968 1
If yes, you do not need <code>USE_GROFF</code>.
d972 1
a972 1
garbled, please always report to schwarze@@ and kristaps@@, even if you
d978 2
a979 4
as well, there are two possibilities:  Either the page is depending
on newer groff features not yet supported by our old groff-1.15.
In that case, we need to update our groff port; talk to schwarze@@.
Or the manuals are just broken upstream.  In that case, you have
d996 4
a999 4
or to discuss the matter with schwarze@@.  In the latter case, make sure
you send in copies of all the unformatted manual pages causing errors,
the output of "mandoc -Tlint" run on them, and to include a tarball
or patch of your draft port as well.
d1007 2
a1008 1
related to seriously garbled output, that's probably a bug in mandoc.
d1029 2
a1030 2
will still need lots of time to mature.  In case of doubt, ask
schwarze@@ for advice.
d1070 1
a1070 1
# $OpenBSD: specialtopics.html,v 1.14 2011/03/12 22:52:55 schwarze Exp $
d1104 1
a1104 1
<small>$OpenBSD: specialtopics.html,v 1.14 2011/03/12 22:52:55 schwarze Exp $</small>
@


1.14
log
@After collecting some practical experience using mandoc for ports,
add the first bits of specific advice in which cases checking mandoc
compatibility is particularly useful.
While here, fix two typos.
Reminded by a question from, using feedback from, and ok sthen@@, thanks!
@
text
@d294 2
a295 2
For instance, a neat trick involves switching sysconfdir to ${LOCALBASE}/share/example/pkgname during the fake stage, to get default config files to package
(since packages don't normally store stuff under /etc).
d1011 1
a1011 1
# $OpenBSD: specialtopics.html,v 1.13 2011/01/24 08:32:32 ajacoutot Exp $
d1045 1
a1045 1
<small>$OpenBSD: specialtopics.html,v 1.13 2011/01/24 08:32:32 ajacoutot Exp $</small>
@


1.13
log
@Add some rc.d(8) documentation to the porting FAQ.

from jasper@@ with some tweaks.
@
text
@d828 24
d861 1
a861 1
If that persons fails to do the check and the upstream author has added
d968 1
a968 1
real problems in the manuals.  The manual utility is not perfect.
d1011 1
a1011 1
# $OpenBSD$
d1045 1
a1045 1
<small>$OpenBSD: specialtopics.html,v 1.12 2010/12/26 20:06:42 schwarze Exp $</small>
@


1.12
log
@Slightly adjust wording to better match reality.
The advice regarding groff vs. mandoc has been completely stable so far,
so there is no need to sound like the rules would change every week.
@
text
@d51 1
d940 1
a940 1
<p>As with any kind of linting, before changing your 
d949 58
d1021 1
a1021 1
<small>$OpenBSD: specialtopics.html,v 1.11 2010/11/21 10:26:03 espie Exp $</small>
@


1.11
log
@synch with reality, somewhat:
- infrastructure scripts have moved, and resolve-lib has never been part
of lib-depends-check.
- LIB_DEPENDS is less likely than RUN_DEPENDS to affect directory removal
in update-plist (it will only do so for SHARED_ONLY ports)
- inter-subpackages dependencies are totally handled, and there's no way
to put libraries in front of LIB_DEPENDS anymore.
- document the new dir/foo>=version

- remind people that version numbers must go forward.

- why do people insist on using make search ?
make key=value is so much better.
- fix LIB_DEPENDS example, which never worked anyways
@
text
@d812 1
a812 1
<p>This section provides preliminary guidelines on how to deal with
d814 2
a815 3
issues in ports.  Note that this topic is actively under development,
so the information provided here is likely to be updated frequently
and may even change completely.
d842 3
a844 3
<p>Before you start checking anything, make sure you have really -current
mandoc installed.  For now, it should not be older than one week, because
error detection is very actively developed, and being told about issues
d962 1
a962 1
<small>$OpenBSD: specialtopics.html,v 1.10 2010/10/27 15:49:06 schwarze Exp $</small>
@


1.10
log
@new section: 3.5 - Manual pages
preliminary guidelines on how to deal with groff versus mandoc(1) issues
feedback and ok sthen@@
@
text
@d181 2
a182 2
	LIB_DEPENDS += ::x11/gtk+
	WANTLIB += gtk.&gt;=1.2,gdk.&gt;=1.2
d963 1
a963 1
<small>$OpenBSD: specialtopics.html,v 1.9 2010/09/19 13:35:40 jim Exp $</small>
@


1.9
log
@Align handbook navigation with the standard FAQ.
Massive trailing white space clean up.

ok sthen@@
@
text
@d50 1
d809 139
d963 1
a963 1
<small>$OpenBSD: specialtopics.html,v 1.8 2010/08/23 21:44:48 steven Exp $</small>
@


1.8
log
@more autoconf versions; from Markus Bergkvist
@
text
@d29 1
a29 1
   
d37 1
d53 1
a53 1
 
d72 1
a72 1
number and an equal or higher minor number <strong>must satisfy the 
d107 2
a108 2
Trying to rename the library after the fact to adjust the version number 
does not work: ELF libraries use some extra magic to set the library 
d117 1
a117 1
The best way to handle libtool-based ports is to set 
d121 1
a121 1
	<li>libtool looks at <code>SHARED_LIBS</code> and automatically 
d150 1
a150 1
Similarly, a program that links with qt.2 will use the 
d247 1
a247 1
# Generated automatically using autoconf version 2.13 
d268 1
a268 1
Configure scripts often take a lot of arguments. The default processing of 
d275 1
a275 1
accept setting 
d313 2
a314 2
The configure script first runs a fixed script called config.guess, 
that will determine which system configure is running on.  config.guess 
d332 1
a332 1
Most configure will auto-detect quite a few conditions. It is very important to look at configure's options, at configure's output, and at the generated config.log file: these will tell you what options were found, and what options were not found.  This will allow you to find out when configure did not find a package that was installed.  
d345 1
a345 1
Different versions of autoconf will produce distinct configure scripts. 
d372 1
a372 1
libtool has a few specific hooks in configure.in.  There is often a 
d404 1
a404 1
<li>During fake installation, the port should install a sample configuration 
d408 1
a408 1
<li>During installation, the default example configuration file will be copied 
d428 1
a428 1
<code>@@sample</code> correctly interprets correct <code>@@mode</code>, 
d440 1
a440 1
files: the port must be configured to find its files under 
d442 1
a442 1
put stuff under <code>${PREFIX}/share/examples</code>. 
d448 1
a448 1
<code>FAKE_FLAGS</code>, for instance: 
d545 1
a545 1
	much between operating systems. 
d567 1
a567 1
  starting from a NetBSD port is reasonable. Be aware that some files 
d570 1
a570 1
  work on only one type of machine. Some changes are bound to be 
d621 1
a621 1
	else 
d628 1
a628 1
	fprintf(stderr, 
d635 1
a635 1
  
d644 1
a644 1
	as your platform, you should be prepared to deal with that. 
d646 1
a646 1
	<code>swab(3)</code> if an endianness change is required. 
d682 2
a683 2
	notice a thing.  Your application should be able to perform 
	resampling on the fly, possibly naively, or through devious 
d690 1
a690 1
        samples recorded with a low gain will not sound very loud on the 
d700 4
a703 4
	the full dynamic range.  If you can't afford that, but you can manage 
	to get a bit of look-ahead on what you're going to play, you can 
	adjust the volume boost on the fly, you just have to make sure 
	that the boost factor stays at a low frequency compared to the 
d705 1
a705 1
	overflows</em> -- those will always sound much worse than the 
d709 1
a709 1
	a division, as C <code>&gt;&gt;</code> operator is not portable on 
d714 1
a714 1
	If all else fails, you should at least try to provide the user with 
d727 1
a727 1
	theoretical. Some hard figures should be collected to check what's a 
d732 1
a732 1
	For high performance audio applications, such as mpegI-layer3, some 
d745 1
a745 1
	    usually a bad idea. It is generally much better to combine all 
d749 3
a751 3
	    <code>AUDIO_GETENC</code> <code>ioctl</code> should be used 
	    to retrieve all formats that the audio device provides. 
	    Be especially aware of the 
d810 1
a810 1
  
d812 1
d823 1
a823 1
<small>$OpenBSD: specialtopics.html,v 1.7 2010/07/29 05:37:30 steven Exp $</small>
@


1.7
log
@replace $ again
@
text
@d350 2
a351 2
2.56, 2.57, 2.58, 2.59, 2.60, 2.61 and 2.62. These cover 99% of all
configure scripts out there.
d821 1
a821 1
<small>$OpenBSD: specialtopics.html,v 1.6 2010/07/29 05:35:38 steven Exp $</small>
@


1.6
log
@use html code for $ so $OpenBSD$ does not get expanded within the example
@
text
@d499 1
a499 1
@@comment $OpenBSD: specialtopics.html,v 1.5 2010/07/29 05:29:30 steven Exp $
d821 1
a821 1
<small>$OpenBSD: specialtopics.html,v 1.5 2010/07/29 05:29:30 steven Exp $</small>
@


1.5
log
@sync shared libs doc, example plist, plus some tweaks and typos
bump copyright year as well

from Daniel Dickman
@
text
@d459 1
a459 1
@@comment $OpenBSD: specialtopics.html,v 1.3 2009/06/18 21:40:26 landry Exp $
d499 1
a499 1
@@comment $OpenBSD: specialtopics.html,v 1.3 2009/06/18 21:40:26 landry Exp $
d821 1
a821 1
<small>$OpenBSD: specialtopics.html,v 1.3 2009/06/18 21:40:26 landry Exp $</small>
@


1.4
log
@Typo, from Charles Smith thanks!
@
text
@d14 1
a14 1
Copyright (c) 2005-2009 XXX
d161 1
a161 1
This code assumes the <code>qt.2.31</code> is not installed, which is
d173 9
a181 4
use <code>make lib-depends-check</code> to verify a port does mention all
libraries it requires. You just separate library specs with commas like
this:
<code>LIB_DEPENDS=gtk.1.2,gdk.1.2::x11/gtk+</code>.
d183 2
a184 2
It is not an error to specify static libraries on a LIB_DEPENDS line as
well. LIB_DEPENDS are fully evaluated at package build time: the resulting
d194 1
a194 1
In fact, providing LIB_DEPENDS lines for static libraries is a good idea:
d198 6
a203 6
LIB_DEPENDS lines must specify the same paths that are used for 
<code>ld</code>. For instance, the standard qt2 depends fragment says: 
<code>LIB_DEPENDS+=lib/qt2/qt.2::x11/qt2</code>, so that the lib 
depends line will be solved correctly. This allows the dependency checking
code to do the right thing when multiple versions of the same library
are encountered.
d214 3
a216 3
	<li>You may have to adjust dependent ports LIB_DEPENDS. If you 
introduce new shared libraries, watch out for BUILD_DEPENDS that need to 
be turned into LIB_DEPENDS.
d460 1
a460 1
bin/i-ls
d465 2
a466 2
sbin/i-viewdb
sbin/integrit
d579 1
a579 1
	<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=sio_open&amp;sektion=4">sio_open(4)</a>.
@


1.3
log
@Wording : the porter is generally not the upstream author.
@
text
@d89 1
a89 1
-c10- | grep -e^T</b>. This won't show if fonctions arguments type changed,
d454 1
a454 1
@@comment $OpenBSD: specialtopics.html,v 1.2 2009/06/18 21:33:28 landry Exp $
d494 1
a494 1
@@comment $OpenBSD: specialtopics.html,v 1.2 2009/06/18 21:33:28 landry Exp $
d816 1
a816 1
<small>$OpenBSD: specialtopics.html,v 1.2 2009/06/18 21:33:28 landry Exp $</small>
@


1.2
log
@Mention the nm -g trick to verify if fonctions were added/removed for
SHARED_LIBS bump.
@
text
@d78 1
a78 1
	<li>If you add functions to the library, you must bump the
d454 1
a454 1
@@comment $OpenBSD: specialtopics.html,v 1.1.1.1 2009/06/18 16:20:42 sthen Exp $
d494 1
a494 1
@@comment $OpenBSD: specialtopics.html,v 1.1.1.1 2009/06/18 16:20:42 sthen Exp $
d816 1
a816 1
<small>$OpenBSD: specialtopics.html,v 1.1.1.1 2009/06/18 16:20:42 sthen Exp $</small>
@


1.1
log
@Initial revision
@
text
@d87 4
a90 1

d454 1
a454 1
@@comment $OpenBSD: config.html,v 1.2 2008/03/15 10:36:25 sthen Exp $
d494 1
a494 1
@@comment $OpenBSD: config.html,v 1.2 2008/03/15 10:36:25 sthen Exp $
d816 1
a816 1
<small>$OpenBSD$</small>
@


1.1.1.1
log
@Import a Porter's Handbook to the faq; based on and in future to replace
the various scattered porting documentation on the website.

This is still a work in progress and being imported but not yet linked
to allow simpler collaborative work.

Slight reworking of a submission from Daniel Dickman; big thanks :)
Discussed with many. Nick agrees with this going into the faq providing
people help maintain it.
@
text
@@
