head	1.25;
access;
symbols
	sthen_20090618:1.1.1.1 sthen:1.1.1;
locks; strict;
comment	@# @;


1.25
date	2016.09.01.16.09.01;	author tj;	state Exp;
branches;
next	1.24;
commitid	szuG3RUW7Xig3iZV;

1.24
date	2016.08.15.02.22.15;	author tb;	state Exp;
branches;
next	1.23;
commitid	3DeixV5YkPOb78RN;

1.23
date	2016.04.17.21.31.53;	author tj;	state Exp;
branches;
next	1.22;
commitid	iIlpeQWLXUolwtTP;

1.22
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.21;
commitid	jwteSMEb4rFzI8UA;

1.21
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.20;
commitid	4Y8oU6GBrSY1UOfW;

1.20
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.19;
commitid	hi2ObFv9LGB98JY5;

1.19
date	2016.03.22.20.09.26;	author jca;	state Exp;
branches;
next	1.18;
commitid	cDFy4TtvRC3M1B4W;

1.18
date	2016.03.22.10.56.56;	author sthen;	state Exp;
branches;
next	1.17;
commitid	G2izHhNJ7aqR0Y6j;

1.17
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.16;
commitid	zEx6zFkNSFFExu0v;

1.16
date	2015.07.02.05.49.05;	author bentley;	state Exp;
branches;
next	1.15;
commitid	AP3UllesavMDEUhQ;

1.15
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.14;
commitid	wRrXxcro6dFYiwF8;

1.14
date	2014.12.01.09.59.33;	author bentley;	state Exp;
branches;
next	1.13;
commitid	KHeihOuepLNuLssG;

1.13
date	2014.11.10.09.29.52;	author sthen;	state Exp;
branches;
next	1.12;
commitid	5SVRX5sqq7WlHWXj;

1.12
date	2012.10.10.08.50.07;	author rpe;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.09.17.44.12;	author rpe;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.20.06.08.40;	author rpe;	state Exp;
branches;
next	1.9;

1.9
date	2012.09.14.17.08.03;	author rpe;	state Exp;
branches;
next	1.8;

1.8
date	2012.09.12.20.03.00;	author rpe;	state Exp;
branches;
next	1.7;

1.7
date	2012.09.12.19.24.52;	author rpe;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.21.10.26.03;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.19.17.36.43;	author jim;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.19.13.35.40;	author jim;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.29.05.29.30;	author steven;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.18.16.40.14;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.18.16.20.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.06.18.16.20.42;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.25
log
@remove more sparc mentions and use "sparc64" to refer to ultrasparc.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD Ports: Differences from Other BSD Projects</title>
<meta name="copyright" content="This document copyright 2000-2016 by OpenBSD.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/ports/differences.html">
</head>

<body bgcolor= "#ffffff" text= "#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">Ports - Differences from Other BSD Projects</font>
<small>
<a href="index.html" style="font-weight:normal;float:right">[Handbook Index]</a>
</small>
</h2>
<hr>

<ul>
  <li><a href="#Extra"          >Extra support</a>
  <li><a href="#Generic"        >Generic infrastructure issues</a>
  <li><a href="#Make"           >Using make properly</a>
  <li><a href="#Fetch"          >Fetching sources</a>
  <li><a href="#wrkdir"         >The <tt>WRKDIR</tt> infrastructure</a>
  <li><a href="#Fake"           >Faking ports</a>
    <ul>
     <li><a href="#Introduction">Introduction</a>
     <li><a href="#Advantages"  >Advantages</a>
     <li><a href="#How"         >How to do it</a>
     <li><a href="#Pitfalls"    >Pitfalls</a>
    </ul>
  <li><a href="#Tools"          >Packaging tools</a>
  <li><a href="#Flavors"        >Flavors</a>
</ul>

<hr>

<h2 id="Extra">Extra support</h2>

The porting infrastructure includes several scripts under
<tt>infrastructure/bin</tt> that facilitate the creation of new ports:

<dl>
<dt>check-lib-depends
    <dd>invoked through <tt>make lib-depends-check</tt>, to verify shared
    libraries dependencies.
<dt>update-patches
    <dd>invoked through <tt>make update-patches</tt>, which should
    <b>always</b> be used to regenerate patches.
<dt>make-plist
    <dd>invoked through <tt>make update-plist</tt>.
    This takes care of most of the finest points of crafting accurate
    packing-lists.
    OpenBSD packing-lists are significantly different from those of other
    BSD projects, in part because the package tools have been completely
    rewritten.
</dl>

Check the <tt>infrastructure/bin</tt> directory for more useful scripts.
Most of them are documented under <tt>infrastructure/man</tt>.

<h2 id="Generic">Generic infrastructure issues</h2>

OpenBSD's <a href="http://man.openbsd.org/make">make(1)</a> supports
<tt>${VAR:U}</tt> and <tt>${VAR:L}</tt> to transform a variable's value
into uppercase or lowercase. Accordingly, make tests should be coded in
a case-independent way.
For example:

<blockquote><pre>
.if ${NEED_XXX:L} == "yes"
do stuff if yes
.else
do other stuff
.endif
</pre></blockquote>

In theory, all boolean variables recognized by <tt>bsd.port.mk</tt> should
always be defined, so that code like <tt>defined(USE_FOO)</tt> should not
be necessary, and <tt>${USE_FOO:L} != "no"</tt> ought to work.

<p>
The main <tt>bsd.port.mk</tt> file has been heavily streamlined and fixed.
In particular, it is parallel-make ready.
The <tt>scripts/{pre,do,post}-*</tt> feature has been lost in the process.
To replace that feature, invoke the script manually from the <tt>Makefile</tt>.

<h2 id="Make">Using make properly</h2>

Note that if you invoke make as <tt><b>make VAR=value</b></tt>, the assignment
will override whatever value <tt>VAR</tt> may get from the <tt>Makefile</tt>.
This means that many <tt>Makefile</tt> patches are not necessary.
It is much better to set <tt>MAKE_FLAGS</tt> correctly, which decreases the
maintenance burden.

<h2 id="Fetch">Fetching sources</h2>

There are two kinds of source archives: <tt>DISTFILES</tt> and
<tt>PATCHFILES</tt>.
OpenBSD processes them in a uniform way and retrieves everything from
<tt>MASTER_SITES</tt> by default.
There are <b>no</b> <tt>PATCH_SITES</tt> nor <tt>PATCH_SITES_SUBDIR</tt>.

<p>
If all files to fetch don't come from the same set of sites, OpenBSD allows
the extension <tt>filename:0</tt> to <tt>filename:9</tt>, in which case it
will use <tt>MASTER_SITES0</tt> to <tt>MASTER_SITES9</tt> to retrieve the file.

<p>
Some architectures may need specific distfiles.
In the past, this has caused trouble where mirroring distfiles was concerned.
OpenBSD supports a third set of files: <tt>SUPDISTFILES</tt>.
Those will be considered only for creating checksums and mirroring purposes.
Note that <tt>SUPDISTFILES</tt> may have an overlap with <tt>DISTFILES</tt> or
<tt>PATCHFILES</tt>.
For instance:

<blockquote><pre>
DISTFILES=foo-1.0.tgz
.if ${ARCH} == "i386"
DISTFILES+=foo-i386.tgz
.elif ${ARCHI} == "amd64"
DISTFILES+=foo-amd64.tgz
.endif
SUPDISTFILES=foo-i386.tgz foo-amd64.tgz
</pre></blockquote>

<h2 id="wrkdir">The <tt>WRKDIR</tt> infrastructure</h2>

We don't want ports that use <tt>NO_WRKDIR</tt>.
All OpenBSD ports must have a work directory.
Naming details of those work directories should not be a porter's concerns.
If you need to find out about such a name, ask the <tt>Makefile</tt>:

<blockquote><pre>
$ <b>cd that_ports_dir &amp;&amp; make show=WRKDIR</b>
</pre></blockquote>

This will yield that port's idea of <tt>WRKDIR</tt>.

<p>
The main reason behind this prohibition is that OpenBSD's <tt>bsd.port.mk</tt>
acts like a real <tt>Makefile</tt>, with dependencies.
The <tt>fetch</tt> stage depends upon the distfiles and patchfiles, and all
other stages depend on real files living in the working directory (cookies),
so they can't exist without a working directory.

<p>
If the <tt>DISTFILES</tt> extraction is special, set

<blockquote><pre>
EXTRACT_ONLY=
</pre></blockquote>

and do the extraction in <tt>post-extract.</tt>

<p>
<dl>
<dt><tt>WRKDIR</tt></dt>

<dd>The port working directory, where it puts its own cookies.</dd>

<dt><tt>WRKDIST</tt></dt>

<dd>Subdirectory of <tt>WRKDIR</tt> where the port actually unpacks.
It is also the base directory for patch.
Other BSDs currently don't have the <tt>WRKDIST/WRKSRC</tt> distinction and
have only <tt>WRKSRC</tt>.</dd>

<dt><tt>WRKSRC</tt></dt>

<dd>Subdirectory of <tt>WRKDIST</tt> where the actual source lives.</dd>

<dt><tt>WRKBUILD</tt></dt>

<dd>Subdirectory of <tt>WRKDIR</tt> where the port configure and build will
occur.
Other BSDs don't have the <tt>WRKBUILD/WRKSRC</tt> distinction.
Programs based on autoconf (mostly) can usually set <tt>SEPARATE_BUILD</tt>
to let the port build happen in a <tt>WRKBUILD</tt> distinct from
<tt>WRKSRC</tt>.</dd>

<dt><tt>WRKCONF</tt></dt>

<dd>Subdirectory of <tt>WRKDIR</tt> where configure scripts should be run.
Defaults to <tt>WRKBUILD</tt>, which is correct 99% of the time.</dd>

<dt><tt>WRKINST</tt></dt>

<dd>Directory where the port will be installed before being packaged (see
"faking ports" below).</dd>
</dl>

<p>
<i>Note that <tt>NO_WRKSUBDIR</tt> has been removed: its functionality can be
achieved by setting <tt>WRKDIST=$(WRKDIR)</tt> instead. </i>

<h2 id="Fake">Fake port installation</h2>

<h3 id="Introduction">Introduction</h3>

After a build is complete, other BSDs proceed to install a port, then build
a package from the installed port.
OpenBSD uses faked installation instead.

<ul>
<li>An OpenBSD port is configured and built normally (e.g., to install under
<tt>PREFIX</tt>, usually <tt>/usr/local</tt>).

<li>But it's told to install elsewhere, namely under <tt>WRKINST</tt>, which
is usually a subdirectory of <tt>WRKDIR</tt>.

<li>Then the false installation is packaged, using the <tt>-B</tt> option of
pkg_create.

<li>Finally, the resulting package can be installed, using pkg_add.
</ul>

<h3 id="Advantages">Advantages</h3>

<ul>
<li>For a package builder, it means that most ports don't have to actually be
installed, which removes a large number of potential compromises and general
nastiness from badly-installed ports.
It also allows building several conflicting packages on the same machine.
Finally, it allows building a new set of untested packages without hosing
a correct installation.

<li>For a port writer, it greatly simplifies the task of finding problems in
packing lists, since the fake area of installation is empty before the port
gets installed.
Also, if a port installs too many files, it is no longer necessary to tweak
the port installation: it is enough not to record the extraneous files in
the packing list.

<li>For the end user, it improves the quality of packages: since the final
port is installed using pkg_add, the end user gets <i>exactly</i> the same
software that was prepared on the porter's machine.
</ul>

<h3 id="How">How to do it</h3>

The targets invoked for <tt><b>make fake</b></tt> are the usual install
targets, except for a few differences:

<ul>
<li><tt>FAKE_FLAGS</tt> is used instead of <tt>MAKE_FLAGS</tt>.
By default, <tt>FAKE_FLAGS</tt> sets <tt>DESTDIR=${WRKINST}</tt>.

<li><tt>FAKE_TARGET</tt> is used instead of <tt>INSTALL_TARGET</tt>.

<li>The <tt>{pre,do,post}-install</tt> fragments are invoked with
<tt>TRUEPREFIX</tt> set to <tt>$(PREFIX)</tt>, <tt>PREFIX</tt> set to
<tt>$(WRKINST)$(PREFIX)</tt>, and <tt>DESTDIR</tt> set to <tt>$(WRKINST)</tt>.
</ul>

<p>
Ports using imake should work as is, since the imake fragments are configured
to use <tt>DESTDIR</tt>.
Similarly, recent GNU configure ports should need no change.

<p>
Another good technique is a "late binding" trick: configure the ports to use
a prefix of <tt>$(DESTDIR)/usr/local</tt>, so that the resulting
<tt>Makefile</tt> has the following set:

<blockquote><pre>
prefix=$(DESTDIR)/usr/local
</pre></blockquote>

When the port gets built, since <tt>DESTDIR</tt> is set to nothing,
<tt>/usr/local</tt> is used.
The fake install will put everything into <tt>${WRKINST}/usr/local</tt>
(e.g., for GNU configure, use <tt>CONFIGURE_STYLE= gnu dest</tt>).

<h3 id="Pitfalls">Pitfalls</h3>

<ul>
<li>Some ports are inconsistent in their <tt>DESTDIR</tt> processing: most
of the port is happy with <tt>DESTDIR</tt> set, except for one or two
offenders.
Patch the problem away.

<li>Be careful to distinguish between the actual location where the port is
installed, and the location recorded in the configuration files of the package.
This is very easy to overlook, but easy to fix using <tt>TRUEPREFIX</tt>.

<li>Absolute symlinks always need to be tweaked.
Luckily, <tt>bsd.port.mk</tt> will notice problems in that area.

<li>A few ports don't want to leave <tt>$(DESTDIR)</tt> alone at the configure
stage.
A <tt>post-configure</tt> fragment that tweaks all Makefiles to add the
<tt>DESTDIR</tt> is needed.

<li>Very seldom, a port will resist all reasonable attempts to use FAKE.
A brute force approach should work: use <tt>pre-fake</tt> to link or copy
everything the port wants to find in the <tt>WRKINST</tt> area, then perform
the install under chroot.
</ul>

<h2 id="Tools">Packaging tools</h2>

The package tools know about quite a few file types and can do a lot of things
automatically: in most cases <tt>@@exec</tt> commands or <tt>INSTALL</tt>
scripts are unneeded.

<p>
Note that all unneeded scripts should be banned, as they have scalability
issues.
It is much easier to debug one single package infrastructure than to modify
hundreds of scripts to handle new problems.
For instance:

<ul>
<li><tt>@@exec ldconfig</tt> is not needed, as shared libraries are
annotated with <tt>@@lib libfoo.so.1.0</tt> and <tt>ldconfig</tt>
runs only when needed, and handles chroot gracefully.
<li><tt>@@exec install-info</tt> is not needed, as info documentation
files are annotated with <tt>@@info file.info</tt>.
This also takes care of multiple info files, and removes the need for
<tt><b>makeinfo --no-split</b></tt>.
<li>fonts get integrated automatically thanks to <tt>@@font</tt> and
<tt>@@fontdir</tt>.
<li>New users and groups get handled with <tt>@@newuser</tt> and
<tt>@@newgroup</tt> instead of installation scripts.
They also get created early enough so that further package extraction can
use them.
<li>Configuration files are handled through <tt>@@sample</tt> instead
of installation scripts.
</ul>

<p>
Refer to <a href="http://man.openbsd.org/pkg_create">pkg_create(1)</a> for
more details.
In most cases, <tt><b>make update-plist</b></tt> will write a very good
approximation of a complete packing-list, and will carry hand-made tweaks
from one version to the next.

<h2 id="Flavors">Flavors</h2>

Options have been rationalized as flavors, so that package building can be
consistent.
A port with options should set <tt>FLAVORS</tt> to the list of all options that
make sense for that port (e.g., <tt>FLAVORS=foo bar zoinx</tt>), then use
<tt>FLAVOR</tt> to test what options have actually been selected (e.g.,
<tt>FLAVOR=zoinx foo</tt>).
<tt>bsd.port.mk</tt> provides some support:

<ul>
<li>The <tt>PKGNAME</tt> is tweaked to include dash separated options (e.g.,
<tt>package-foo-zoinx</tt>).

<li>The <tt>WRKDIR</tt> is tweaked so that distinct flavors can be built
concurrently without colliding.

<li>Constructs of the form <tt>%%flavor%%</tt> will trigger the inclusion of
<tt>PFRAG.flavor</tt>.

<li><tt>bsd.port.subdir.mk</tt> understands the extension
<tt>SUBDIR=directory,opt1,opt2</tt> to say "build port in <tt>directory</tt>
with <tt>FLAVOR=opt1 opt2</tt>."
</ul>

<p>
Checking that a given flavor has been selected is as simple as:

<blockquote><pre>
.if ${FLAVOR:L:Mzoinx}
</pre></blockquote>

There is an extra extension, known as <tt>MULTI_PACKAGES</tt>.
Generally speaking, <tt>MULTI_PACKAGES</tt> and <tt>FLAVORS</tt> are orthogonal
mechanisms.
Together, they account for OpenBSD ports tree being somewhat smaller than the
other BSDs, as they allow one single port directory to build lots of distinct
packages.
<a href="http://man.openbsd.org/bsd.port.mk">bsd.port.mk(5)</a> has a full
section devoted to FLAVORS AND MULTI_PACKAGES.

<p>
</body>
</html>
@


1.24
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@d132 2
a133 2
.elif ${ARCHI} == "sparc"
DISTFILES+=foo-sparc.tgz
d135 1
a135 1
SUPDISTFILES=foo-i386.tgz foo-sparc.tgz
@


1.23
log
@sync porter's handbook formatting with the main faq style.
@
text
@d14 1
a14 1
<link rel="canonical" href="http://www.openbsd.org/faq/ports/differences.html">
@


1.22
log
@use short form man links in the faq and fix a few broken links
@
text
@d4 7
a10 3
<title>5 - Differences from Other BSD Projects</title>
<meta name= "description"   content= "Differences with Other BSD porting systems.">
<meta name="copyright" content="This document copyright 2000-2010 by OpenBSD.">
a16 19
<!--
Copyright (c) 2005-2010 XXX

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<!-- Passes validator.w3.org.  Please keep it this way -->

a18 1

d22 4
a25 1
<font color="#e00000">5 - Differences from Other BSD Projects</font>
a27 7
<p>
<font color= "#0000e0">
<a href="index.html">[Handbook Index]</a>
<a href="testing.html">[To Section 4 - Port Testing Guide]</a>
</font>

<p>
a28 1
<h3>Table of Contents</h3>
d30 14
a43 15
  <li><a href="#Differences"   >5.1 - Important differences from other BSD Projects</a>
  <li><a href="#Extra"         >5.2 - Extra Support</a>
  <li><a href="#Generic"       >5.3 - Generic infrastructure issues</a>
  <li><a href="#Make"          >5.4 - Using make properly</a>
  <li><a href="#Fetch"         >5.5 - Fetching sources</a>
  <li><a href="#wrkdir"        >5.6 - The <tt>WRKDIR</tt> infrastructure</a>
  <li><a href="#Fake"          >5.7 - Faking ports</a>
  <ul>
  <li><a href="#Introduction"  >5.7.1 - Introduction</a>
  <li><a href="#Advantages"    >5.7.2 - Advantages</a>
  <li><a href="#How"           >5.7.3 - How to do it</a>
  <li><a href="#Pitfalls"      >5.7.4 - Pitfalls</a>
  </ul>
  <li><a href="#Tools"         >5.8 - Packaging tools</a>
  <li><a href="#Flavors"       >5.9 - Flavors</a>
d48 1
a48 5
<h2 id="Differences">5.1 - Important differences from other BSD projects</h2>

<p>
NetBSD uses the term <i>ports</i> for architecture-dependent
issues. Their ports structure is called <i>pkgsrc</i> instead.
d50 2
a51 1
<h2 id="Extra">5.2 - Extra support</h2>
a52 3
The porting infrastructure includes several scripts under 
<tt>infrastructure/bin</tt>
that facilitate the creation of new ports:
d55 2
a56 2
    <dd>invoked through <tt><b>make lib-depends-check</b></tt>, to verify
    shared libraries dependencies.
d58 2
a59 2
    <dd>invoked through <tt><b>make update-patches</b></tt>, which should
    <b>always be used to regenerate patches.</b>
d61 3
a63 2
    <dd>invoked through <tt><b>make update-plist</b></tt>. This takes care
    of most of the finest points of crafting accurate packing-lists.
d69 2
a70 2
and other stuff as well. Most of these scripts are documented, the manpages
are under <tt>infrastructure/man</tt>.
d72 1
a72 1
<h2 id="Generic">5.3 - Generic infrastructure issues</h2>
d74 5
a78 5
<p>
OpenBSD's <a href="http://man.openbsd.org/make">make(1)</a>
supports <tt>${VAR:U}</tt> and <tt>${VAR:L}</tt> to transform a
variable's value into uppercase or lowercase. Accordingly, make tests
should be coded in a case-independent way, e.g.,
d88 3
a90 6
<p>
In theory, all boolean variables recognized by
<tt>bsd.port.mk</tt> should always be defined, so that code like
<tt>defined(USE_FOO)</tt> should not be necessary, and
<tt>${USE_FOO:L} != "no"</tt> ought to work.

d93 4
a96 6
The main <tt>bsd.port.mk</tt> file has been heavily
streamlined and fixed. In particular, it is parallel-make ready.
The <tt>scripts/{pre,do,post}-*</tt> feature has been lost in
the process.
To replace that feature, invoke the script manually from the
<tt>Makefile</tt>.
d98 1
a98 1
<h2 id="Make">5.4 - Using make properly</h2>
d100 5
a104 6
<p>
Note that, if you invoke make as <tt><b>make VAR=value</b></tt>, the
assignment will <i>override</i> whatever value <tt>VAR</tt> may get from the
<tt>Makefile</tt>.
So, many <tt>Makefile</tt> patches are not necessary, it is much better to set
<tt>MAKE_FLAGS</tt> correctly, to decrease the maintenance burden.
d106 1
a106 1
<h2 id="Fetch">5.5 - Fetching sources</h2>
a107 1
<p>
d110 1
a110 1
OpenBSD processes them in a uniform way, and retrieves everything from
a113 1

d115 3
a117 5
If all files to fetch don't come from the same set of sites,
OpenBSD allows the extension <tt>filename:0</tt> to <tt>filename:9</tt>, in
which case it will use <tt>MASTER_SITES0</tt> to <tt>MASTER_SITES9</tt> to
retrieve the file.

d120 3
a122 3
Some architectures may need specific distfiles. In the past, this
has caused trouble where mirroring distfiles was concerned. OpenBSD
supports a third set of files: <tt>SUPDISTFILES</tt>.
d126 1
a126 1
For instance,
d138 1
a138 1
<h2 id="wrkdir">5.6 - The <tt>WRKDIR</tt> infrastructure</h2>
d140 3
a142 4
<p>
We don't want ports that use <tt>NO_WRKDIR</tt>. All OpenBSD
ports must have a work directory. Naming details of those work
directories should not be a porter's concerns.
d149 1
a149 2
will yield that port's idea of <tt>WRKDIR</tt>.

d152 5
a156 6
The main reason behind that prohibition is that OpenBSD's
<tt>bsd.port.mk</tt> acts like a real <tt>Makefile</tt>, with dependencies.
The <tt>fetch</tt> stage depends upon the distfiles and
patchfiles, all other stages depend on real files living in the
working directory (cookies), so they can't exist without a working
directory.
a160 1
<p>
a164 1
<p>
d171 1
a171 2
<dd>The port working directory, where it puts its own
cookies.</dd>
d182 1
a182 2
<dd>Subdirectory of <tt>WRKDIST</tt> where the actual source
lives.</dd>
d195 1
a195 2
<dd>Subdirectory of <tt>WRKDIR</tt> where configure scripts should be
run.
d200 2
a201 2
<dd>Directory where the port will be installed before being
packaged (see Faking ports below).</dd>
d208 1
a208 1
<h2 id="Fake">5.7 - Fake port installation</h2>
d210 1
a210 1
<h3 id="Introduction">5.7.1 - Introduction</h3>
d212 2
a213 3
<p>
After a build is complete, other BSDs proceed to install a
port, then build a package from the installed port.
a215 1

d217 2
a218 3
<li>An OpenBSD port is configured and built normally (e.g., to
install under <tt>PREFIX</tt>, usually
<tt>/usr/local</tt>).
d229 1
a229 1
<h3 id="Advantages">5.7.2 - Advantages</h3>
d232 12
a243 12
<li>For a package builder, it means that most ports don't have to
actually be installed, which removes a large number of potential
compromises and general nastiness from badly installed ports. It
also allows building several conflicting packages on the same
machine. Finally, it allows building a new set of untested packages
without hosing a correct installation.

<li>For a port writer, it greatly simplifies the task of finding
problems in packing lists, since the fake area of installation is
empty before the port gets installed. Also, if a port installs too
many files, it is no longer necessary to tweak the port
installation: it is enough not to record the extraneous files in
d246 3
a248 4
<li>For the end user, it improves the quality of packages: since
the final port is installed using pkg_add, the end user gets <i>
exactly</i> the same software that was prepared on the porter's
machine.
d251 1
a251 5
<h3 id="How">5.7.3 - How to do it</h3>

<p>
The targets invoked for <tt><b>make fake</b></tt> are the usual
install targets, except for a few differences:
d253 2
d268 2
a269 2
Ports using imake should work as is, since the imake fragments
are configured to use <tt>DESTDIR</tt>.
a271 1

d273 3
a275 4
Another good technique is a `late binding' trick: configure the
ports to use a prefix of <tt>$(DESTDIR)/usr/local</tt>, so that the
resulting <tt>Makefile</tt> has

d281 4
a284 5
<p>
set. When the port gets built, since <tt>DESTDIR</tt> is set to nothing,
<tt>/usr/local</tt> is used. And the fake install will put everything into
<tt>${WRKINST}/usr/local</tt> (e.g., for GNU configure, use
<tt>CONFIGURE_STYLE= gnu dest</tt>).
d286 1
a286 1
<h3 id="Pitfalls">5.7.4 - Pitfalls</h3>
d291 2
a292 1
offenders. Patch the problem away.
d294 11
a304 11
<li>Be careful to distinguish between the actual location where the
port is installed, and the location recorded in the configuration
files of the package. This is very easy to overlook, but easy to
fix using <tt>TRUEPREFIX</tt>.

<li>Absolute symlinks always need to be tweaked. Luckily,
<tt>bsd.port.mk</tt> will notice problems in that area.

<li>A few ports don't want to leave <tt>$(DESTDIR)</tt> alone at the
configure stage. A <tt>post-configure</tt> fragment that tweaks all
Makefiles to add the <tt>DESTDIR</tt> is needed.
d308 2
a309 2
everything the port wants to find in the <tt>WRKINST</tt> area, then perform the
install under chroot.
d312 1
a312 6
<h2 id="Tools">5.8 - Packaging tools</h2>

<p>
The package tools know about quite a few file types, and can do a lot
of things automatically: in most cases <tt>@@exec</tt> commands or
<tt>INSTALL</tt> scripts are unneeded.
d314 3
a316 5
<p>
<i>Note that all unneeded scripts should be banned, as they have
scalability issues. It is much easier to debug one single package 
infrastructure than to modify hundreds of scripts to handle new problems.
</i>
d319 4
d336 3
a338 2
<tt>@@newgroup</tt> instead of installation scripts. They also get
created early enough so that further package extraction can use them.
d344 2
a345 3
Refer to
<a href="http://man.openbsd.org/pkg_create">pkg_create(1)</a>
for more details.
d350 1
a350 1
<h2 id="Flavors">5.9 - Flavors</h2>
d352 2
a353 3
<p>
Options have been rationalized as flavors, so that package building
can be consistent.
a359 1

d371 2
a372 2
<tt>SUBDIR=directory,opt1,opt2</tt> to say `build port in <tt>directory</tt>
with <tt>FLAVOR=opt1 opt2</tt>.'
a377 1

d388 2
a389 2
<a href="http://man.openbsd.org/bsd.port.mk">bsd.port.mk(5)</a>
has a full section devoted to FLAVORS AND MULTI_PACKAGES.
a391 12

<font color= "#0000e0">
<a href="index.html">[Handbook Index]</a>
<a href="testing.html">[To Section 4 - Port Testing Guide]</a>
</font>

<p>
<hr>
<a href="../index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a>
<br>
<small>$OpenBSD: differences.html,v 1.21 2016/03/29 01:27:39 tb Exp $</small>

@


1.21
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d102 1
a102 1
OpenBSD's <a href="http://man.openbsd.org/?query=make&amp;sektion=1&amp;">make(1)</a>
d400 1
a400 1
<a href="http://man.openbsd.org/?query=pkg_create&amp;sektion=1&amp;format=html">pkg_create(1)</a>
d447 1
a447 1
<a href="http://man.openbsd.org/?query=bsd.port.mk&amp;sektion=5&amp;format=html">bsd.port.mk(5)</a>
d461 1
a461 1
<small>$OpenBSD: differences.html,v 1.20 2016/03/27 19:52:09 sthen Exp $</small>
@


1.20
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d4 2
a5 2
<title>5 - Differences from other BSD Projects</title>
<meta name= "description"   content= "Differences with other BSD porting systems.">
d34 2
d37 4
a40 3
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif" border="0">
</a>

d47 1
a47 1
<h1><font color="#e00000">5 - Differences from other BSD Projects</font></h1><hr>
d461 1
a461 1
<small>$OpenBSD: differences.html,v 1.19 2016/03/22 20:09:26 jca Exp $</small>
@


1.19
log
@Kill PFRAG.shared bits; from Daniel Jakots
@
text
@d8 2
d458 1
a458 1
<small>$OpenBSD: differences.html,v 1.18 2016/03/22 10:56:56 sthen Exp $</small>
@


1.18
log
@fix URIs, the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@d421 1
a421 2
<tt>PFRAG.flavor</tt>. The <tt>%%SHARED%%</tt> construct triggers the inclusion
of <tt>PFRAG.shared</tt>.
d456 1
a456 1
<small>$OpenBSD: differences.html,v 1.17 2016/03/21 05:46:21 beck Exp $</small>
@


1.17
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d97 1
a97 1
OpenBSD's <a href="http://man.openbsd.org?query=make&amp;sektion=1&amp;">make(1)</a>
d395 1
a395 1
<a href="http://man.openbsd.org?query=pkg_create&amp;sektion=1&amp;format=html">pkg_create(1)</a>
d443 1
a443 1
<a href="http://man.openbsd.org?query=bsd.port.mk&amp;sektion=5&amp;format=html">bsd.port.mk(5)</a>
d457 1
a457 1
<small>$OpenBSD: differences.html,v 1.16 2015/07/02 05:49:05 bentley Exp $</small>
@


1.16
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d97 1
a97 1
OpenBSD's <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=make&amp;sektion=1&amp;">make(1)</a>
d395 1
a395 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=pkg_create&amp;sektion=1&amp;format=html">pkg_create(1)</a>
d443 1
a443 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&amp;sektion=5&amp;format=html">bsd.port.mk(5)</a>
d457 1
a457 1
<small>$OpenBSD: differences.html,v 1.15 2015/05/11 11:18:30 sthen Exp $</small>
@


1.15
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@a4 1
<meta name= "resource-type" content= "document">
a5 2
<meta name= "keywords"      content= "openbsd,ports">
<meta name= "distribution"  content= "global">
d457 1
a457 1
<small>$OpenBSD: differences.html,v 1.14 2014/12/01 09:59:33 bentley Exp $</small>
@


1.14
log
@Convert the ports faq to use id="" instead of "a name=""></a>.
@
text
@d11 1
d460 1
a460 1
<small>$OpenBSD: differences.html,v 1.13 2014/11/10 09:29:52 sthen Exp $</small>
@


1.13
log
@remove some more of the www@@ mentions, Job Snijders pointed out the
one on upgrade56.html
@
text
@d67 1
a67 2
<a name="Differences"></a>
<h2>5.1 - Important differences from other BSD projects</h2>
d73 1
a73 3

<a name="Extra"></a>
<h2>5.2 - Extra support</h2>
d96 1
a96 2
<a name="Generic"></a>
<h2>5.3 - Generic infrastructure issues</h2>
d127 1
a127 3

<a name="Make"></a>
<h2>5.4 - Using make properly</h2>
d136 1
a136 3

<a name="Fetch"></a>
<h2>5.5 - Fetching sources</h2>
d172 1
a172 2
<a name="wrkdir"></a>
<h2>5.6 - The <tt>WRKDIR</tt> infrastructure</h2>
d250 1
d252 1
a252 5
<a name="Fake"></a>
<h2>5.7 - Fake port installation</h2>

<a name="Introduction"></a>
<h3>5.7.1 - Introduction</h3>
d274 1
a274 2
<a name="Advantages"></a>
<h3>5.7.2 - Advantages</h3>
d297 1
a297 2
<a name="How"></a>
<h3>5.7.3 - How to do it</h3>
d337 1
a337 3

<a name="Pitfalls"></a>
<h3>5.7.4 - Pitfalls</h3>
d362 1
a362 2
<a name="Tools"></a>
<h2>5.8 - Packaging tools</h2>
d403 1
a403 3

<a name="Flavors"></a>
<h2>5.9 - Flavors</h2>
d459 1
a459 1
<small>$OpenBSD: differences.html,v 1.12 2012/10/10 08:50:07 rpe Exp $</small>
@


1.12
log
@use <blockquote><pre></pre></blockquote> for examples
let some more complex command examples stand out on its own
@
text
@a4 1
<link rev= "made" href="mailto:www@@openbsd.org">
a476 1
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
d478 1
a478 1
<small>$OpenBSD: differences.html,v 1.11 2012/10/09 17:44:12 rpe Exp $</small>
@


1.11
log
@<blockquote><pre></pre></blockquote> for examples
<tt></tt> around filenames
no <tt></tt> around command names
plural form of BSD -> BSDs
use ${} where the value of a variable is referenced
some other FNF style nits
@
text
@d109 7
a115 8

<pre>
	.if ${NEED_XXX:L} == "yes"
	do stuff if yes
	.else
	do other stuff
	.endif
</pre>
d171 9
a179 10

<pre>
	DISTFILES=foo-1.0.tgz
	.if ${ARCH} == "i386"
	DISTFILES+=foo-i386.tgz
	.elif ${ARCHI} == "sparc"
	DISTFILES+=foo-sparc.tgz
	.endif
	SUPDISTFILES=foo-i386.tgz foo-sparc.tgz
</pre>
d480 1
a480 1
<small>$OpenBSD: differences.html,v 1.10 2012/09/20 06:08:40 rpe Exp $</small>
@


1.10
log
@add <tt></tt> to:
- variable names
- make targes
- flags and options
- filnames
- /path/to/files

in changed paragraphs:
- start sentences on a new line
- split long lines around 72-80 colums
- fix a typo (spotted by Adam Jeanguenat)

ok sthen@@ nick@@
@
text
@d129 3
a131 2
the process. To replace that feature, invoke the script manually
from the Makefile.
d140 3
a142 3
Makefile. So, many <tt>Makefile</tt> patches are not necessary, it is
much better to set <tt>MAKE_FLAGS</tt> correctly, to decrease the
maintenance burden.
d191 5
a195 1
<tt><b>cd that_ports_dir &amp;&amp; make show=WRKDIR</b></tt>
d211 1
a211 1
<pre>
d213 1
a213 1
</pre>
d228 3
a230 3
It is also the base directory for patch. Other BSD currently don't
have the <tt>WRKDIST/WRKSRC</tt> distinction and have only
<tt>WRKSRC</tt>.</dd>
d241 1
a241 1
Other BSD don't have the <tt>WRKBUILD/WRKSRC</tt> distinction.
d284 1
a284 1
<tt>pkg_create</tt>.
d286 1
a286 2
<li>Finally, the resulting package can be installed, using
<tt>pkg_add</tt>.
d344 1
a344 1
<pre>
d346 1
a346 1
</pre>
d351 1
a351 1
<tt>WRKINST/usr/local</tt> (e.g., for GNU configure, use
d387 3
a389 1
<tt>INSTALL</tt> scripts are unneeded.<br>
d393 3
a395 1
</i><br>
a397 1

d449 2
a450 2
<tt>SUBDIR=directory,opt1,opt2</tt> to say `build port in directory with
<tt>FLAVOR=opt1 opt2</tt>.'
d457 1
a457 1
<pre>
d459 1
a459 1
</pre>
d482 1
a482 1
<small>$OpenBSD: differences.html,v 1.9 2012/09/14 17:08:03 rpe Exp $</small>
@


1.9
log
@FNF
- enclose in-text commands with <tt><b></b></tt>
  and remove '' and `' around commands
- enclose commands in <pre> blocks with <b></b>
- start modified sentences on a new line
- remove <tt></tt> from man page links
- consistently use ksh prompts
@
text
@d138 3
a140 3
assignment will <i>override</i> whatever value VAR may get from the
Makefile. So, many Makefile patches are not necessary, it is
much better to set MAKE_FLAGS correctly, to decrease the
d148 5
a152 4
There are two kinds of source archives: DISTFILES and PATCHFILES.
OpenBSD processes them in a uniform way, and retrieves everything
from MASTER_SITES by default. There are <b>no</b>
PATCH_SITES nor PATCH_SITES_SUBDIR.
d157 3
a159 3
OpenBSD allows the extension filename:0 to filename:9, in which
case it will use MASTER_SITES0 to MASTER_SITES9 to retrieve the
file.
d165 4
a168 3
supports a third set of files: SUPDISTFILES. Those will be
considered only for creating checksums and mirroring purposes. Note
that SUPDISTFILES may have an overlap with DISTFILES or PATCHFILES.
d189 1
a189 1
If you need to find out about such a name, ask the Makefile:
d196 1
a196 1
<tt>bsd.port.mk</tt> acts like a real Makefile, with dependencies.
d203 1
a203 1
If the DISTFILES extraction is special, set
d215 1
a215 1
<dt>WRKDIR</dt>
d220 1
a220 1
<dt>WRKDIST</dt>
d222 1
a222 1
<dd>Subdirectory of WRKDIR where the port actually unpacks.
d224 2
a225 2
have the WRKDIST/WRKSRC distinction and have only
WRKSRC.</dd>
d227 1
a227 1
<dt>WRKSRC</dt>
d229 1
a229 1
<dd>Subdirectory of WRKDIST where the actual source
d232 1
a232 1
<dt>WRKBUILD</dt>
d234 12
a245 5
<dd>Subdirectory of WRKDIR where the port configure and build
will occur. Other BSD don't have the WRKBUILD/WRKSRC distinction.
Programs based on autoconf (mostly) can usually set SEPARATE_BUILD
to let the port build happen in a WRKBUILD distinct from
WRKSRC.</dd>
d247 1
a247 6
<dt>WRKCONF</dt>

<dd>Subdirectory of WRKDIR where configure scripts should be run.
Defaults to WRKBUILD, which is correct 99% of the time.</dd>

<dt>WRKINST</dt>
d254 2
a255 2
<i>Note that NO_WRKSUBDIR has been removed: its functionality can be
achieved by setting WRKDIST=$(WRKDIR) instead. </i>
d275 2
a276 2
<li>But it's told to install elsewhere, namely under WRKINST, which
is usually a subdirectory of WRKDIR.
d278 2
a279 2
<li>Then the false installation is packaged, using the -B option of
pkg_create.
d282 1
a282 1
pkg_add.
d318 2
a319 2
<li>FAKE_FLAGS is used instead of MAKE_FLAGS. By default,
FAKE_FLAGS sets DESTDIR=${WRKINST}.
d321 1
a321 1
<li>FAKE_TARGET is used instead of INSTALL_TARGET.
d323 3
a325 3
<li>The {pre,do,post}-install fragments are invoked with TRUEPREFIX
set to $(PREFIX), PREFIX set to $(WRKINST)$(PREFIX), and DESTDIR
set to $(WRKINST).
d329 3
a331 3
Ports using imake should work as is, since the imake fragments are
configured to use DESTDIR. Similarly, recent GNU configure ports
should need no change.
d336 2
a337 2
ports to use a prefix of $(DESTDIR)/usr/local, so that the
resulting Makefile has
d345 3
a347 3
set. When the port gets built, since DESTDIR is set to nothing,
/usr/local is used. And the fake install will put everything into
WRKINST/usr/local (e.g., for GNU configure, use
d355 2
a356 2
<li>Some ports are inconsistent in their DESTDIR processing: most
of the port is happy with DESTDIR set, except for one or two
d362 1
a362 1
fix using TRUEPREFIX.
d367 8
a374 8
<li>A few ports don't want to leave $(DESTDIR) alone at the
configure stage. A post-configure fragment that tweaks all
Makefiles to add the DESTDIR is needed.

<li>Very seldom, a port will resist all reasonable attempts to use
FAKE. A brute force approach should work: use pre-fake to link or
copy everything the port wants to find in the WRKINST area, then
perform the install under chroot.
d422 5
a426 4
can be consistent. A port with options should set FLAVORS to the
list of all options that make sense for that port (e.g.,
FLAVORS=foo bar zoinx), then use FLAVOR to test what options have
actually been selected (e.g., FLAVOR=zoinx foo).
d431 2
a432 2
<li>The PKGNAME is tweaked to include dash separated options (e.g.,
package-foo-zoinx).
d434 1
a434 1
<li>The WRKDIR is tweaked so that distinct flavors can be built
d437 7
a443 7
<li>Constructs of the form %%flavor%% will trigger the inclusion of
PFRAG.flavor. The %%SHARED%% construct triggers the inclusion of
PFRAG.shared.

<li>bsd.port.subdir.mk understands the extension
SUBDIR=directory,opt1,opt2 to say `build port in directory with
FLAVOR=opt1 opt2.'
d454 6
a459 5
There is an extra extension, known as MULTI_PACKAGES.
Generally speaking, MULTI_PACKAGES and FLAVORS are orthogonal
mechanisms. Together, they account for OpenBSD ports tree being
somewhat smaller than the other BSD, as they allow one single
port directory to build lots of distinct packages.
d475 1
a475 1
<small>$OpenBSD: differences.html,v 1.8 2012/09/12 20:03:00 rpe Exp $</small>
@


1.8
log
@FNF
- small tweaks to pass validator.w3.org
- mention, that the pages passed the validation
- add missing license block to index.html
@
text
@d84 1
a84 1
    <dd>invoked through <tt>make lib-depends-check</tt>, to verify
d87 1
a87 1
    <dd>invoked through <tt>make update-patches</tt>, which should
d90 1
a90 1
    <dd>invoked through <tt>make update-plist</tt>. This takes care
d137 1
a137 1
Note that, if you invoke make as <tt>make VAR=value</tt>, the
d186 4
a189 4
directories should not be a porter's concerns. If you need to find
out about such a name, ask the Makefile: <tt>cd that_ports_dir
&amp;&amp; make show=WRKDIR</tt> will yield that port's
idea of <tt>WRKDIR</tt>.
d309 1
a309 1
The targets invoked for <tt>make fake</tt> are the usual
d392 3
a394 3
files are annotated with <tt>@@info file.info</tt>. This also takes
care of multiple info files, and removes the need for
<tt>makeinfo --no-split</tt>.
d407 4
a410 4
for more details.  In most cases,
<tt>make update-plist</tt> will write a very good approximation of
a complete packing-list, and will carry hand-made tweaks from one version
to the next.
d469 1
a469 1
<small>$OpenBSD: differences.html,v 1.7 2012/09/12 19:24:52 rpe Exp $</small>
@


1.7
log
@FNF for www/faq/ports/

perl -pi -e 's#<code>#<tt>#g;s#</code>#</tt>#g' *.html
perl -pi -e 's#<strong>#<b>#g;s#</strong>#</b>#g' *.html
perl -pi -e 's#<em>#<i>#g;s#</em>#</i>#g' *.html
perl -pi -e 's#</p>##;s#</li>##' *.html

discussed with ajacoutot@@ and nick@@
@
text
@d31 2
d469 1
a469 1
<small>$OpenBSD: differences.html,v 1.6 2010/11/21 10:26:03 espie Exp $</small>
@


1.6
log
@synch with reality, somewhat:
- infrastructure scripts have moved, and resolve-lib has never been part
of lib-depends-check.
- LIB_DEPENDS is less likely than RUN_DEPENDS to affect directory removal
in update-plist (it will only do so for SHARED_ONLY ports)
- inter-subpackages dependencies are totally handled, and there's no way
to put libraries in front of LIB_DEPENDS anymore.
- document the new dir/foo>=version

- remind people that version numbers must go forward.

- why do people insist on using make search ?
make key=value is so much better.
- fix LIB_DEPENDS example, which never worked anyways
@
text
@d52 1
a52 1
  <li><a href="#wrkdir"        >5.6 - The <code>WRKDIR</code> infrastructure</a>
d70 3
a72 3
NetBSD uses the term <em>ports</em> for architecture-dependent
issues. Their ports structure is called <em>pkgsrc</em> instead.
</p>
d78 1
a78 1
<code>infrastructure/bin</code>
d82 1
a82 1
    <dd>invoked through <code>make lib-depends-check</code>, to verify
d85 2
a86 2
    <dd>invoked through <code>make update-patches</code>, which should
    <strong>always be used to regenerate patches.</strong>
d88 1
a88 1
    <dd>invoked through <code>make update-plist</code>. This takes care
d96 1
a96 1
are under <code>infrastructure/man</code>.
d103 1
a103 1
supports <code>${VAR:U}</code> and <code>${VAR:L}</code> to transform a
d106 1
a106 1
</p>
d118 4
a121 4
<code>bsd.port.mk</code> should always be defined, so that code like
<code>defined(USE_FOO)</code> should not be necessary, and
<code>${USE_FOO:L} != "no"</code> ought to work.
</p>
d124 1
a124 1
The main <code>bsd.port.mk</code> file has been heavily
d126 1
a126 1
The <code>scripts/{pre,do,post}-*</code> feature has been lost in
d129 1
a129 1
</p>
d135 2
a136 2
Note that, if you invoke make as <code>make VAR=value</code>, the
assignment will <em>override</em> whatever value VAR may get from the
d140 1
a140 1
</p>
d148 1
a148 1
from MASTER_SITES by default. There are <strong>no</strong>
d150 1
a150 1
</p>
d157 1
a157 1
</p>
d166 1
a166 1
</p>
d179 1
a179 1
<h2>5.6 - The <code>WRKDIR</code> infrastructure</h2>
d182 1
a182 1
We don't want ports that use <code>NO_WRKDIR</code>. All OpenBSD
d185 4
a188 4
out about such a name, ask the Makefile: <code>cd that_ports_dir
&amp;&amp; make show=WRKDIR</code> will yield that port's
idea of <code>WRKDIR</code>.
</p>
d192 2
a193 2
<code>bsd.port.mk</code> acts like a real Makefile, with dependencies.
The <code>fetch</code> stage depends upon the distfiles and
d207 1
a207 1
and do the extraction in <code>post-extract.</code>
d248 3
a250 3
<em>Note that NO_WRKSUBDIR has been removed: its functionality can be
achieved by setting WRKDIST=$(WRKDIR) instead. </em>
</p>
d262 1
a262 1
</p>
d266 2
a267 2
install under <code>PREFIX</code>, usually
<code>/usr/local</code>).</li>
d270 1
a270 1
is usually a subdirectory of WRKDIR.</li>
d273 1
a273 1
pkg_create.</li>
d276 1
a276 1
pkg_add.</li>
d288 1
a288 1
without hosing a correct installation.</li>
d295 1
a295 1
the packing list.</li>
d298 3
a300 3
the final port is installed using pkg_add, the end user gets <em>
exactly</em> the same software that was prepared on the porter's
machine.</li>
d307 1
a307 1
The targets invoked for <code>make fake</code> are the usual
d309 1
a309 1
</p>
d313 1
a313 1
FAKE_FLAGS sets DESTDIR=${WRKINST}.</li>
d315 1
a315 1
<li>FAKE_TARGET is used instead of INSTALL_TARGET.</li>
d319 1
a319 1
set to $(WRKINST).</li>
d326 1
a326 1
</p>
d332 1
a332 1
</p>
d342 2
a343 2
<code>CONFIGURE_STYLE= gnu dest</code>).
</p>
d351 1
a351 1
offenders. Patch the problem away.</li>
d356 1
a356 1
fix using TRUEPREFIX.</li>
d359 1
a359 1
<code>bsd.port.mk</code> will notice problems in that area.</li>
d363 1
a363 1
Makefiles to add the DESTDIR is needed.</li>
d368 1
a368 1
perform the install under chroot.</li>
d376 3
a378 3
of things automatically: in most cases <code>@@exec</code> commands or
<code>INSTALL</code> scripts are unneeded.<br>
<em>Note that all unneeded scripts should be banned, as they have
d381 1
a381 1
</em><br>
d383 1
a383 1
</p>
d386 5
a390 5
<li><code>@@exec ldconfig</code> is not needed, as shared libraries are
annotated with <code>@@lib libfoo.so.1.0</code> and <code>ldconfig</code>
runs only when needed, and handles chroot gracefully.</li>
<li><code>@@exec install-info</code> is not needed, as info documentation
files are annotated with <code>@@info file.info</code>. This also takes
d392 8
a399 8
<code>makeinfo --no-split</code>.</li>
<li>fonts get integrated automatically thanks to <code>@@font</code> and
<code>@@fontdir</code>.</li>
<li>New users and groups get handled with <code>@@newuser</code> and
<code>@@newgroup</code> instead of installation scripts. They also get
created early enough so that further package extraction can use them.</li>
<li>Configuration files are handled through <code>@@sample</code> instead
of installation scripts.</li>
d406 1
a406 1
<code>make update-plist</code> will write a very good approximation of
d409 1
a409 1
</p>
d420 2
a421 2
<code>bsd.port.mk</code> provides some support:
</p>
d425 1
a425 1
package-foo-zoinx).</li>
d428 1
a428 1
concurrently without colliding.</li>
d432 1
a432 1
PFRAG.shared.</li>
d436 1
a436 1
FLAVOR=opt1 opt2.'</li>
d441 1
a441 1
</p>
d467 1
a467 1
<small>$OpenBSD: differences.html,v 1.5 2010/09/19 17:36:43 jim Exp $</small>
@


1.5
log
@match footer with related pages

ok sthen@@
@
text
@d77 3
a79 2
The porting infrastructure includes several scripts that facilitate
the creation of new ports:
d81 1
a81 1
<dt>build/resolve-lib
d84 1
a84 1
<dt>build/update-patches
d87 1
a87 1
<dt>install/make-plist
d95 3
d467 1
a467 1
<small>$OpenBSD: differences.html,v 1.4 2010/09/19 13:35:40 jim Exp $</small>
@


1.4
log
@Align handbook navigation with the standard FAQ.
Massive trailing white space clean up.

ok sthen@@
@
text
@a453 1
<a href="../index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a>
d458 1
d460 4
a463 2

<small>$OpenBSD: differences.html,v 1.3 2010/07/29 05:29:30 steven Exp $</small>
@


1.3
log
@sync shared libs doc, example plist, plus some tweaks and typos
bump copyright year as well

from Daniel Dickman
@
text
@d39 1
d71 1
a71 1
issues. Their ports structure is called <em>pkgsrc</em> instead. 
d101 1
a101 1
should be coded in a case-independent way, e.g., 
d124 1
a124 1
from the Makefile. 
d135 1
a135 1
maintenance burden. 
d144 1
a144 1
from MASTER_SITES by default. There are <strong>no</strong> 
d161 1
a161 1
For instance, 
d195 1
a195 1
If the DISTFILES extraction is special, set 
d200 1
a200 1
</pre> 
d257 1
a257 1
OpenBSD uses faked installation instead. 
d304 1
a304 1
install targets, except for a few differences: 
d327 1
a327 1
resulting Makefile has 
d337 1
a337 1
WRKINST/usr/local (e.g., for GNU configure, use 
d354 1
a354 1
<li>Absolute symlinks always need to be tweaked. Luckily, 
d387 1
a387 1
care of multiple info files, and removes the need for 
d389 1
a389 1
<li>fonts get integrated automatically thanks to <code>@@font</code> and 
d399 1
a399 1
Refer to 
d403 1
a403 1
a complete packing-list, and will carry hand-made tweaks from one version 
d416 1
a416 1
<code>bsd.port.mk</code> provides some support: 
d447 1
a447 1
port directory to build lots of distinct packages. 
d452 1
a452 1
  
d455 1
d461 1
a461 1
<small>$OpenBSD: differences.html,v 1.1.1.1 2009/06/18 16:20:42 sthen Exp $</small>
@


1.2
log
@- reword title of 5.7
@
text
@d10 1
a10 1
<meta name="copyright" content="This document copyright 2000 by OpenBSD.">
d15 1
a15 1
Copyright (c) 2005-2009 XXX
@


1.1
log
@Initial revision
@
text
@d248 1
a248 1
<h2>5.7 - Faking ports</h2>
d459 1
a459 1
<small>$OpenBSD$</small>
@


1.1.1.1
log
@Import a Porter's Handbook to the faq; based on and in future to replace
the various scattered porting documentation on the website.

This is still a work in progress and being imported but not yet linked
to allow simpler collaborative work.

Slight reworking of a submission from Daniel Dickman; big thanks :)
Discussed with many. Nick agrees with this going into the faq providing
people help maintain it.
@
text
@@
