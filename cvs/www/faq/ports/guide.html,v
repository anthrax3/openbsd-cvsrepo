head	1.70;
access;
symbols
	sthen_20090618:1.1.1.1 sthen:1.1.1;
locks; strict;
comment	@# @;


1.70
date	2017.06.01.23.39.47;	author tb;	state Exp;
branches;
next	1.69;
commitid	Vwkba3ZNTK1wHW4x;

1.69
date	2017.06.01.13.05.23;	author schwarze;	state Exp;
branches;
next	1.68;
commitid	PqkwnshYVtMsrdNk;

1.68
date	2017.04.02.18.30.27;	author tj;	state Exp;
branches;
next	1.67;
commitid	ZPjvqBkGowLADuj6;

1.67
date	2017.03.25.19.07.05;	author tb;	state Exp;
branches;
next	1.66;
commitid	HspC9U4j3u1PNnAZ;

1.66
date	2017.02.08.17.31.45;	author danj;	state Exp;
branches;
next	1.65;
commitid	Mx0cM0uTsZZARD4B;

1.65
date	2016.12.31.21.51.45;	author tj;	state Exp;
branches;
next	1.64;
commitid	jBXLOIa2Xosit035;

1.64
date	2016.10.16.19.11.30;	author tb;	state Exp;
branches;
next	1.63;
commitid	XJczuXy5Z9mhvZdx;

1.63
date	2016.09.01.16.21.17;	author tb;	state Exp;
branches;
next	1.62;
commitid	Cm9MvbS9JVcBtEL2;

1.62
date	2016.09.01.16.09.27;	author edd;	state Exp;
branches;
next	1.61;
commitid	hsojBHLFsp4LVO05;

1.61
date	2016.08.15.02.22.15;	author tb;	state Exp;
branches;
next	1.60;
commitid	3DeixV5YkPOb78RN;

1.60
date	2016.07.09.20.21.43;	author tb;	state Exp;
branches;
next	1.59;
commitid	lqAQpqNehmsSOA2U;

1.59
date	2016.06.22.22.00.25;	author sthen;	state Exp;
branches;
next	1.58;
commitid	hfITequjIiWvUpRe;

1.58
date	2016.06.16.18.26.12;	author tj;	state Exp;
branches;
next	1.57;
commitid	YxulLlh2ODeRIZ8i;

1.57
date	2016.06.16.14.43.13;	author tj;	state Exp;
branches;
next	1.56;
commitid	pMV5DWzWKqxeLhRD;

1.56
date	2016.04.25.19.07.38;	author tj;	state Exp;
branches;
next	1.55;
commitid	p6Iu8CX0SolSSZvw;

1.55
date	2016.04.17.21.31.53;	author tj;	state Exp;
branches;
next	1.54;
commitid	iIlpeQWLXUolwtTP;

1.54
date	2016.04.15.20.39.49;	author tb;	state Exp;
branches;
next	1.53;
commitid	jwteSMEb4rFzI8UA;

1.53
date	2016.03.29.01.27.39;	author tb;	state Exp;
branches;
next	1.52;
commitid	4Y8oU6GBrSY1UOfW;

1.52
date	2016.03.27.19.52.09;	author sthen;	state Exp;
branches;
next	1.51;
commitid	hi2ObFv9LGB98JY5;

1.51
date	2016.03.22.20.14.03;	author jca;	state Exp;
branches;
next	1.50;
commitid	Ot2UKfdMS2FZQHnR;

1.50
date	2016.03.22.20.09.26;	author jca;	state Exp;
branches;
next	1.49;
commitid	cDFy4TtvRC3M1B4W;

1.49
date	2016.03.22.11.01.15;	author sthen;	state Exp;
branches;
next	1.48;
commitid	kH3PKunUGExMsH3N;

1.48
date	2016.03.22.10.56.56;	author sthen;	state Exp;
branches;
next	1.47;
commitid	G2izHhNJ7aqR0Y6j;

1.47
date	2016.03.21.05.46.21;	author beck;	state Exp;
branches;
next	1.46;
commitid	zEx6zFkNSFFExu0v;

1.46
date	2015.12.21.16.35.48;	author brynet;	state Exp;
branches;
next	1.45;
commitid	ZSwjsvGsvX38bGh6;

1.45
date	2015.12.21.16.31.28;	author brynet;	state Exp;
branches;
next	1.44;
commitid	gnfx9FbhgJMBpDec;

1.44
date	2015.11.25.11.15.35;	author sthen;	state Exp;
branches;
next	1.43;
commitid	Ycvue0fXpDVpeYuv;

1.43
date	2015.11.25.11.09.20;	author sthen;	state Exp;
branches;
next	1.42;
commitid	zwMbAcik4vohm4nJ;

1.42
date	2015.11.23.08.49.06;	author sthen;	state Exp;
branches;
next	1.41;
commitid	9zt3ZCXYfjH1hQ6P;

1.41
date	2015.11.23.08.32.33;	author sthen;	state Exp;
branches;
next	1.40;
commitid	07SFBm1x68HPfk1v;

1.40
date	2015.11.23.03.15.50;	author deraadt;	state Exp;
branches;
next	1.39;
commitid	Wtea3jEE87XPmavu;

1.39
date	2015.11.10.20.32.58;	author sthen;	state Exp;
branches;
next	1.38;
commitid	s8z6XKZTixBGnQWI;

1.38
date	2015.07.30.10.56.41;	author gsoares;	state Exp;
branches;
next	1.37;
commitid	oz4IKBvPHcv799d4;

1.37
date	2015.07.02.05.49.05;	author bentley;	state Exp;
branches;
next	1.36;
commitid	AP3UllesavMDEUhQ;

1.36
date	2015.05.11.11.18.30;	author sthen;	state Exp;
branches;
next	1.35;
commitid	wRrXxcro6dFYiwF8;

1.35
date	2015.03.20.17.53.22;	author kspillner;	state Exp;
branches;
next	1.34;
commitid	5etqk6wO2YNOaHdu;

1.34
date	2014.12.03.11.54.42;	author bentley;	state Exp;
branches;
next	1.33;
commitid	DyccXAL5zhh3mctq;

1.33
date	2014.12.01.09.59.33;	author bentley;	state Exp;
branches;
next	1.32;
commitid	KHeihOuepLNuLssG;

1.32
date	2014.11.10.09.29.52;	author sthen;	state Exp;
branches;
next	1.31;
commitid	5SVRX5sqq7WlHWXj;

1.31
date	2014.07.27.11.40.41;	author schwarze;	state Exp;
branches;
next	1.30;
commitid	Ak5wdAzkmMHqblg3;

1.30
date	2014.07.27.11.19.30;	author schwarze;	state Exp;
branches;
next	1.29;
commitid	n8qpIqxNvbqgqqzr;

1.29
date	2014.06.21.12.17.47;	author zhuk;	state Exp;
branches;
next	1.28;
commitid	BQ2WLRuwl9iuZOZn;

1.28
date	2014.06.21.10.20.00;	author zhuk;	state Exp;
branches;
next	1.27;
commitid	4wmWDzIOCPsfxMvC;

1.27
date	2013.12.11.12.06.51;	author sthen;	state Exp;
branches;
next	1.26;

1.26
date	2013.09.23.13.12.31;	author espie;	state Exp;
branches;
next	1.25;

1.25
date	2013.03.11.13.20.43;	author espie;	state Exp;
branches;
next	1.24;

1.24
date	2012.11.04.07.35.59;	author rpe;	state Exp;
branches;
next	1.23;

1.23
date	2012.11.02.11.56.13;	author sthen;	state Exp;
branches;
next	1.22;

1.22
date	2012.11.02.11.53.55;	author sthen;	state Exp;
branches;
next	1.21;

1.21
date	2012.10.10.08.50.07;	author rpe;	state Exp;
branches;
next	1.20;

1.20
date	2012.09.20.15.06.08;	author sthen;	state Exp;
branches;
next	1.19;

1.19
date	2012.09.20.06.08.41;	author rpe;	state Exp;
branches;
next	1.18;

1.18
date	2012.09.14.17.08.03;	author rpe;	state Exp;
branches;
next	1.17;

1.17
date	2012.09.12.20.03.00;	author rpe;	state Exp;
branches;
next	1.16;

1.16
date	2012.09.12.19.24.52;	author rpe;	state Exp;
branches;
next	1.15;

1.15
date	2011.12.01.22.09.06;	author kili;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.03.21.30.33;	author schwarze;	state Exp;
branches;
next	1.13;

1.13
date	2010.11.21.10.26.03;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.19.13.35.40;	author jim;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.29.05.29.30;	author steven;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.24.23.34.08;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.24.16.39.16;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.24.06.55.04;	author schwarze;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.23.15.00.43;	author schwarze;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.13.14.43.30;	author landry;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.13.10.19.51;	author steven;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.11.20.59.43;	author steven;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.23.16.30.03;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.18.21.15.28;	author landry;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.18.16.20.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.06.18.16.20.42;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.70
log
@the obsolescence of NEED_VERSION has been pointed out for nearly 15 years.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

<!-- If you make edits to any FAQ documents, please start each sentence
     on a new line, and try to keep the general formatting consistent
     with the rest of the pages -->

<title>OpenBSD Ports: Porting Guide</title>
<meta name= "description"   content= "OpenBSD Porting Guide">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="../../openbsd.css">
<link rel="canonical" href="https://www.openbsd.org/faq/ports/guide.html">
</head>

<body bgcolor= "#ffffff" text= "#000000">

<h2>
<a href="../../index.html">
<font color="#0000ff"><i>Open</i></font><font color="#000084">BSD</font></a>
<font color="#e00000">Ports - Porting Guide</font>
<small>
<a href="index.html" style="font-weight:normal;float:right">[Handbook Index]</a>
</small>
</h2>
<hr>
<p>

<ul>
  <li><a href="#Overview"         >Overview</a>
  <li><a href="#PortsChecklist"   >Porting checklist</a>
  <li><a href="#PortsComplex"     >Handling complex situations</a>
  <ul>
    <li><a href="#Know"           >Know the software</a>
    <li><a href="#Figure"         >Figure out important options</a>
    <li><a href="#Ideal"          >The ideal case: MULTI_PACKAGES and
                                   PSEUDO_FLAVORS</a>
    <li><a href="#Inter"          >Interdependencies between subpackages</a>
    <li><a href="#True"           >True FLAVORS and PKGNAMES</a>
  </ul>
  <li><a href="#PortsUpdate"      >Updating ports</a>
  <ul>
    <li><a href="#UpdateChecklist">Update checklist</a>
    <li><a href="#CommitUpdates  ">Committing port updates</a>
  </ul>
  <li><a href="#PortsPolicy"      >OpenBSD porting policy</a>
  <li><a href="#PortsSecurity"    >Security recommendations</a>
  <li><a href="#PortsGeneric"     >Generic porting hints</a>
  <li><a href="#PortsOther"       >Other helpful hints</a>
  <li><a href="#PortsAvail"       >Additional information</a>
</ul>

<hr>

<h2 id="Overview">Overview</h2>

So you've just compiled your favorite software package on your OpenBSD machine
and you want to share your effort by turning it into a standard port.
What to do?

<p>
The most important thing to do is to <b>communicate</b>.
Ask people on <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> if they
are working on the same port.
<i>Tell the original software authors about it</i>, including problems you may
find.
If licensing information appears incorrect, tell them.
If you had to jump through hoops to make the port build, tell them what can be
fixed.
If they are only developing on Linux and feel like ignoring the rest of the
Unix world, try to make them change their view.

<p>
Communication makes the difference between a successful port and a port that
will slowly be abandoned by everyone.

<p>
First, look at the porting information on this page.
Test, then re-test, and finally test again!

<p>
OpenBSD fully supports updates.
This means that <a href="#PortsUpdate">some issues</a> must be taken into
account.

<p>
Submit the port.
Create a gzipped tarball of the port directory.
You can then either place it on a public HTTP server, sending its URL to
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>, or send the port
MIME encoded to the same address.

<p>
Porting some new software takes time.
Maintaining it over time is harder.
It is quite okay to port software and let other people handle it afterwards.
It is also okay to help other people update and maintain other ports, as long
as you communicate to avoid doing the same things twice.

<p>
In OpenBSD culture, <tt>MAINTAINER</tt>ship is not a status item, but a
responsibility.
We have CVS and comments to give credit to the person who did the work.
A port <tt>MAINTAINER</tt> is something else: a person who assumes
responsibility for the working of the port, and is willing to spend some
time ensuring it works as best as can be.

<h2 id="PortsChecklist">Porting Checklist</h2>

The list below is a useful reminder of things to do.
This is neither totally accurate nor perfect.
Direct comments and questions to
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>.

<ol>

<li>
If you want to be a maintainer, subscribe to
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>.

<ul><li>
This is where all ports discussions take place.

<li>
Reading this list is important since many announcements are made there.

<li>
You will find a lot of porting-savvy people there.
They can often give you good advice or test ports for you.
</ul>

<br><li>
Being a maintainer means <b>more</b> than just submitting ports.
It also means trying to keep them up to date, and answering questions
about them.

<br><br><li>
Check out a copy of the ports tree from CVS.
You can find instructions on how to do this at the
<a href="../../anoncvs.html">AnonCVS page</a>.
As a porter, you should keep your base OS, ports tree, and installed
packages up to date.

<br><br><li>
From the names of the first level subdirectories of <tt>/usr/ports/</tt>,
pick a primary category for your port.
Create a new directory below <tt>/usr/ports/&lt;category&gt;/</tt>
or <tt>/usr/ports/mystuff/&lt;category&gt;/</tt> and create the basic
infrastructure there.
Copy the template <tt>Makefile</tt> from
<tt>/usr/ports/infrastructure/templates/Makefile.template</tt>.
Fill in <tt>CATEGORIES</tt> with the primary category you have chosen.

<br><br><li>
Add the fetch portions of the Makefile.

<ul><li>
Fill in <tt>EXTRACT_SUFX</tt> if it's anything besides .tar.gz.
Other examples are .tar.Z, or .tgz.

<li>
Fill in <tt>DISTNAME</tt> with the name of the file minus the extract suffix.
If you have <tt>foo-1.0.tar.gz</tt>, <tt>DISTNAME</tt> is <tt>foo-1.0</tt>.

<li>
Fill in <tt>MASTER_SITES</tt> with a list of URLs to the locations where
the distfile is kept, https://ftp.openbsd.org/pub/OpenBSD/distfiles/ for
example.
<b>Don't forget the trailing slash.</b>
Try to have at least three distinct sites as well.
Place the most easily accessible first as they are traversed in order.

<li>
Keep in mind that fetch references the file as
<tt>${MASTER_SITES}${DISTNAME}${EXTRACT_SUFX}</tt>.
All three are used.
Don't set <tt>DISTNAME</tt> to point to the file directly.

<li>
You can check to see if you have filled these values in correctly by typing
<tt>make makesum</tt>.
</ul>

<p>
For more complex ports, you have more options and tools available to you:

<ul><li>
You also have the variable <tt>PATCHFILES</tt> available.
This is a list of vendor (not OpenBSD) patches to the port.
Common uses are things like security or reliability fixes.

<li>
If your ports are available over large public mirrors such as GNU,
Sourceforge, or CPAN, we have already provided a list of sites for
your use in
<tt>/usr/ports/infrastructure/templates/network.conf.template</tt>.
Set <tt>MASTER_SITES</tt> to <tt>${MASTER_SITE_GNU}</tt>, or
<tt>${MASTER_SITE_SOURCEFORGE}</tt>, etc.
To simplify this process, use the construct <tt>${MASTER_SITE_FOO:=subdir/}</tt>
to append the distribution subdirectory.

<li>
For ports with source distributed from GitHub there are several possibilities.

<ul><li>
In some cases, for example icinga or darktable, a distribution tar file has
been prepared and is available in a /releases/ directory.
Where available, use these in preference to other options as they usually
include the proper build infrastructure (configure scripts, etc) which are
often missing from "tagged" releases.
Specify as normal, using something like
<tt>MASTER_SITES=https://github.com/acct/project/releases/download/relname/</tt>

<li>In other cases, files have been tagged but they rely on github's
on-the-fly archive creation.
These can be specified using the following
<a href="http://man.openbsd.org/bsd.port.mk">bsd.port.mk(5)</a> variables:
<tt>GH_ACCOUNT</tt>, <tt>GH_PROJECT</tt>, <tt>GH_TAGNAME</tt>.
The provided filename is rarely suitable for direct use as a
<tt>DISTNAME</tt>, frequently only including the version number;
these can be renamed at download time using the "{}" notation in
<tt>DISTFILES</tt>.

<li>Occasionally there is no alternative but to have a port reference only a
commit id.
In this case, <tt>GH_COMMIT</tt> should be used instead of <tt>GH_TAGNAME</tt>.
</ul>

<li>
Ports normally correspond to given versions of software.
Once they are retrieved, files are checksummed and compared to the recorded
checksum(s) in distinfo.
So, to avoid confusion, <tt>DISTFILES</tt> and <tt>PATCHFILES</tt> should have
clearly visible version numbers:
don't retrieve <tt>foo-latest.tar.gz</tt> if it is a link to
<tt>foo-1.0.5.tar.gz</tt>.
If something is only available in an unversioned file, gently ask the
original program author to make such distinctions clear.
In the meantime, if you must use a file like this, set <tt>DIST_SUBDIR</tt> to
what a reasonable <tt>DISTNAME</tt> would be, like <tt>foo-1.0.5</tt>, such that
different, identically named, versions of the distfile do not clash on the
distribution file mirrors.

<li>
If a given port needs more than about five <tt>DISTFILES</tt> and
<tt>PATCHFILES</tt> to work, use <tt>DIST_SUBDIR</tt> to avoid cluttering
<tt>DISTDIR</tt> (<tt>/usr/ports/distfiles</tt> by default) too much.
In this case, <tt>DIST_SUBDIR</tt> must not include version numbers.
When the port is updated to a later version, some distfiles may not
change, but will be refetched if <tt>DIST_SUBDIR</tt> is changed.
Even if all distfiles change, it is easier for the user to track cruft.

<li>
All <tt>DISTFILES</tt> and <tt>PATCHFILES</tt> don't necessarily come from the
same set of <tt>MASTER_SITES</tt>.
Supplementary sites can be defined using the variables <tt>MASTER_SITES0</tt> to
<tt>MASTER_SITES9</tt>. Just write <tt>DISTFILES=foo-1.0.5.tar.gz:5</tt> to
retrieve <tt>foo-1.0.5.tar.gz</tt> from <tt>MASTER_SITES5</tt>.

<li>
Some ports don't always need to retrieve all files in all circumstances.
For instance, some ports may have some compilation options, and associated
files which are only required in such a case.
Or they may need some files for some architectures only.
In such a case, those supplementary optional files must be mentioned in the
<tt>SUPDISTFILES</tt> variable.
Targets such as <tt>makesum</tt> or <tt>mirror-distfiles</tt> will fetch those
supplementary files that the casual user doesn't need.
</ul>

<br><li>
Create a checksum in <tt>distinfo</tt> by typing <tt>make makesum</tt>.
Then verify the checksum is correct by typing <tt>make checksum</tt>.

<ul><li>
In some rare cases, files checksums can't be verified reliably.
By all means, porters should try to find sites that are reliable.
Communicating with the software author and the archive site maintainer at this
stage is highly desirable.
In the worst case, non-checksummable files can be mentioned in the
<tt>IGNOREFILES</tt> variable.

<li>
All files in <tt>DISTFILES</tt> are usually processed during
<tt>make extract</tt>.
<tt>EXTRACT_ONLY</tt> may be used to limit extraction to a subset of files
(possibly empty).
The customary use of this variable is to customize extraction: for instance,
if some <tt>DISTFILES</tt> need some special treatment, they will be removed
from <tt>EXTRACT_ONLY</tt> and handled manually at <tt>post-extract</tt> stage.
For historic reasons, <tt>make extract</tt> does set up the working directory
first along with extracting files.
Thus, providing a <tt>pre-extract</tt> or <tt>do-extract</tt> target is highly
unusual (and fairly suspicious behavior, indicative of a high degree of
obfuscation in the port).

<li>
Patches that need specific treatment should be mentioned in <tt>DISTFILES</tt>,
and removed from <tt>EXTRACT_ONLY</tt>, for historic reasons.
</ul>

<br><li>
Extract the port with <tt>make extract</tt>.
Pay attention to where the base of the sources are.
Usually, it's <tt>/usr/ports/pobj/${PKGNAME}${FLAVOR_EXT}/${DISTNAME}</tt>.
You may need to modify the <tt>Makefile</tt>'s <tt>WRKDIST</tt> variable if it
is different.

<br><br><li>
Read the installation documentation and note what you have to do to build
the port and any special options that might be needed.

<br><br><li>
Now is also a good time to figure out what kind of licensing restrictions
apply to your port.
Many are freely redistributable, but quite a few are not.
We need three questions answered to distribute ports properly.
These are the <tt>PERMIT_*</tt> values in the <tt>Makefile</tt>.

<ul><li>
<tt>PERMIT_PACKAGE_CDROM</tt> tells us if we can put the package on the cdrom.
<li>
<tt>PERMIT_PACKAGE_FTP</tt> tells us if we can put the package on the ftp sites.
<li>
<tt>PERMIT_DISTFILES_FTP</tt> tells us if we can mirror the distfiles on the ftp
sites.
</ul>

<p>
If all three are permitted, simply set <tt>PERMIT_PACKAGE_CDROM=Yes</tt>.
Otherwise include all three variables, set to either <tt>Yes</tt>, or a
comment string indicating that certain distribution is not allowed. 
Pay attention to any special conditions you may need to fulfill later on.
For example, some ports require installing a copy of the license.
We recommend you place the license in
<tt>/usr/local/share/doc/&lt;name&gt;/</tt>.

<p>
In addition to the <tt>PERMIT_*</tt> values, put a license marker like
<tt># License</tt> above them as a comment, this way we know why the
<tt>PERMIT_*</tt> values are set the way they are.
For GPL, specify which version is applicable e.g. "GPLv2 only",
"GPLv2+" (meaning "v2 or newer"), "GPLv3 only", etc.

<br><br><li>
Add configuration options to <tt>Makefile</tt> and/or create the configuration
script.

<ul><li>
If GNU configure is used, run <tt>./configure --help</tt> to see what
options are available.
In particular, look for optional dependencies which may not be present
on your system, but might be picked up on another system or in a bulk
build.

<li>
Anything that you may want to override can be changed by adding the
<tt>--option</tt> flags to the <tt>CONFIGURE_ARGS</tt> parameter in the
<tt>Makefile</tt>.

<li>
Use <tt>CONFIGURE_ARGS+=</tt> to append to the variable.
<tt>CONFIGURE_ARGS=</tt> will overwrite it.
</ul>

<br><li>
Try building the port with <tt>make build</tt>.

<ul><li>
If you're lucky, the port will go all the way through without errors.

<li>
If it exits with an error, you will need to generate patches for your port.
Figure out what needs to be changed and make a patch for it.

<li>
the sequence to make a patch for a file is usually:

<ul><li>
<tt>cd `make show=WRKSRC` ; cp foo/bar.c{,.orig}</tt>

<li>
edit <tt>foo/bar.c</tt> to fix the error.

<li>
<tt>cd - ; make update-patches</tt>

<li>
this will create <tt>patches/patch-foo_bar_c</tt> with your modifications.
</ul>

<li>
The easiest way to reset the port and test your patches is
<tt>make clean patch</tt>.
This will delete the work directory, re-extract, and patch your port.
</ul>

<br><li>
Begin a cycle of <tt>make build</tt>, generate a patch using
<tt>make update-patches</tt> and <tt>make clean patch</tt>.

<ul><li>
Patches go in the directory <tt>patches/</tt> and should be named patch-* with
* being something meaningful.
The preferred naming is <tt>patch-FILENAME</tt>, where <tt>FILENAME</tt> is
the name of the file it is patching.
(<tt>make update-patches</tt> does this automatically for you.)

<li>
Applying <tt>PATCHFILES</tt> is the first half of the <tt>make patch</tt>
stage.
It can be invoked separately as <tt>make distpatch</tt>, which is a convenient
target for porters.
Ignore this if you haven't set it.

<li>
Only patch one source file per patch file, please.

<li>
Use <tt>make update-patches</tt> to generate patches.

<li>
All patches MUST be relative to <tt>${WRKDIST}</tt>.

<li>
Check that patches <b>DON'T</b> contain tags that cvs will replace.
If they do, your patches won't apply after you check them in.
You can check in your changes with <tt>-kk</tt> to avoid this.

<li>
Write a small explanation at the beginning of the patch file about its purpose
(not mandatory, but for example often done for security patches).

<li>
<b>Please</b> feed your patches back to the author of that software.
</ul>

<br><li>
Try setting <tt>SEPARATE_BUILD</tt>.

<ul><li>
If the port can build with object files outside its source tree,
this is cleaner (many programs using <tt>CONFIGURE_STYLE=gnu</tt> can),
and may help people who mount their ports tree on several arches.

<li>
This can also spare you some effort, as you will possibly be able to
restart the cycle at configure most of the time.
</ul>

<br><li>
Peruse the output (if any) and tweak any options in the <tt>Makefile</tt>.
To repeat issue the command <tt>make clean configure</tt>.

<p>
Note: make sure host-dependent files go in <tt>/etc</tt> or
<tt>/etc/&lt;name&gt;</tt>, but <b>NEVER REPLACE OR MODIFY</b>
existing files in <tt>/etc</tt>.
Best to have install place them in <tt>/usr/local/share/&lt;name&gt;</tt> and
then copy to <tt>/etc</tt> or <tt>/etc/&lt;name&gt;</tt> only if the files do
not exist.
If the files exist, display a message that says such-and-such files need to be
modified.
This also guarantees that the files will be included in the package since
everything under <tt>/usr/local</tt> is included in the <tt>PLIST</tt>.
To handle the copying carefully, the <tt>@@sample</tt> keyword is preferably used
within the <tt>PLIST</tt>.
After a package has been installed the contents of <tt>pkg/MESSAGE</tt> will be
displayed if it exists.

<p>
The OpenBSD file locations are:

<blockquote><pre>
user executables:			/usr/local/bin
system admin executables:		/usr/local/sbin
program executables:			/usr/local/libexec
libraries:				/usr/local/lib
architecture dependent data:		/usr/local/lib/&lt;name&gt;
installed include files:		/usr/local/include or
					/usr/local/include/&lt;name&gt;
single-machine data:			/etc or /etc/&lt;name&gt;
local state:				/var/run
games score files:			/var/games
GNU info files:				/usr/local/info
man pages:				/usr/local/man/...
read-only architecture-independent:	/usr/local/share/&lt;name&gt;
misc documentation:			/usr/local/share/doc/&lt;name&gt;
examples files:				/usr/local/share/examples/&lt;name&gt;
</pre></blockquote>

<li>
Begin a cycle of makes until the port is ready.
Patch (see above) clean, and make until the port is generated.
Get rid of all warnings if possible, especially security-related warnings.

<br><br><li>
Control <tt>SEPARATE_BUILD</tt> semantics.
You have to do this only if the port builds with <tt>SEPARATE_BUILD</tt> defined.
Ideally, the port should not modify any file in <tt>${WRKSRC}</tt> after
<tt>make patch</tt>.
You can check this by making sure you don't have any write access to
<tt>${WRKSRC}</tt>.
Then you can set <tt>SEPARATE_BUILD=concurrent</tt>.
Someone can use the same source tree to build on distinct arches simultaneously.
Otherwise, set <tt>SEPARATE_BUILD=simple</tt>.
Building on distinct arches simultaneously may be met with problems, as some
source files may be regenerated at awkward moments.

<br><br><li>
Add <tt>COMMENT</tt> in <tt>Makefile</tt>.
<tt>COMMENT</tt> is a <b>SHORT</b> one-line description of the port (max. 60
characters).
Do <b>NOT</b> include the package name (or version number of the software) in
the comment.
Do <b>NOT</b> start with an uppercase letter unless semantically significant,
and do <b>NOT</b> end with a period.
<b>DON'T EVER START WITH AN INDEFINITE ARTICLE SUCH AS "a" or "an" - remove
the article altogether.</b>

<br><br><li>
Put a longer description of the port into <tt>pkg/DESCR</tt>.
One to a few paragraphs concisely explaining what the port does is sufficient.
Lines should be no longer than 80 characters.
This can be done by first editing the <tt>DESCR</tt> file and then running it
through <tt>fmt -w 80</tt>.

<br><br><li>
If the application needs to create a user or a group, choose the lowest free
id from <tt>/usr/ports/infrastructure/db/user.list</tt> for your port to
use and make sure your port gets added to this file at commit time.

<br><br><li>
Install the application with <tt>make fake</tt>.
Libraries should never be stripped.
Executables are stripped by default; this is governed by
<tt>${INSTALL_STRIP}</tt>.
<tt>${INSTALL_PROGRAM}</tt> honors this automatically and is preferable to
unconditional stripping (e.g., by an <tt>install-strip</tt> target or by
running <tt>strip</tt> from the <tt>Makefile</tt>).
You can use <tt>objdump --syms</tt> to determine if a binary is stripped or not.
Stripped files have no symbols in the <tt>SYMBOL TABLE</tt>.

<br><br><li>
<b>Check port for security holes again</b>.
This is especially important for network-facing programs.
See <a href="#PortsSecurity">our security recommendations</a> for that.

<br><br><li>
Make sure your <tt>/etc/mtree</tt> directory is up to date.
(The next step uses the mtree lists to remove existing directories from
generated packing-lists). Remember that the OpenBSD
<tt>(U)pdate</tt> does not touch <tt>/etc</tt>...
For automatic updating of <tt>/etc</tt>, sysmerge(8) may help.

<br><br><li>
Create <tt>pkg/PLIST</tt>.
After the installation with <tt>make fake</tt> is complete, use the
developer's command <tt>make plist</tt>, which creates or updates
the file <tt>PLIST</tt> in the <tt>pkg</tt> directory.
This file is a candidate packing list.

<p>
Peruse <tt>PLIST</tt> and verify that everything was installed and that it was
installed in the proper locations.
Anything not installed can be added to a port <tt>Makefile</tt>
<tt>post-install</tt> rule.
Note that <tt>PLIST</tt> annotations are documented in the
<a href="http://man.openbsd.org/pkg_create">pkg_create(1)</a> manual.

<br><br><li>
It is possible some directories do not need to be in the <tt>PLIST</tt>
as they've been installed by a dependency; if you added to <tt>LIB_DEPENDS</tt>
or <tt>RUN_DEPENDS</tt>, re-run <tt>make plist</tt> to remove these.

<br><br><li>
Test the packaging with <tt>make package</tt>, test installation of the
resulting package with <tt>make install</tt>, and test its removal with
<tt>make uninstall</tt>.
When dealing with multi-packages, it may instead be convenient to use
<a href="http://man.openbsd.org/pkg_add">pkg_add(1)</a> and
<a href="http://man.openbsd.org/pkg_delete">pkg_delete(1)</a> directly,
setting <tt>PKG_PATH</tt> to <tt>/usr/ports/packages/`arch -s`/all/</tt> in the
environment.

<br><br><li>
Verify dependencies.
Peruse your logs to verify the port did detect what is mentioned in
<tt>DEPENDS</tt>, and nothing more.
Check names, particularly in the <tt>make configure</tt> stage, for hidden
dependencies (stuff that exists elsewhere in the ports tree and might be
detected if the user installs some other ports first).

<br><br><li>
Verify shared library dependencies.
Run <tt>make port-lib-depends-check</tt> and add every <tt>LIB_DEPENDS</tt>
or <tt>WANTLIB</tt> annotation that is needed until it runs cleanly.
You may want to read <a href="#PortsUpdate">the update guidelines</a> to
understand why this is so important.

<br><br><li>
Check for regression tests, and whether they run cleanly.
Set <tt>NO_TEST=Yes</tt> if a port has no test infrastructure.
If dependencies are required to run the tests, but not to build the port,
list them in <tt>TEST_DEPENDS</tt>.
Please note: do not set <tt>NO_TEST</tt> if a port has an empty regression
test infrastructure.

<br><br><li>
Test that <tt>make clean</tt> succeeds.
Sometimes the <tt>make fake</tt> stage creates files in the build directory
which will cause this to fail.

<br><br><li>
Run the <code>/usr/ports/infrastructure/bin/portcheck</code> utility
in your port directory and take care of problems it finds, if any.

<br><br><li>
Mail <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> with a
description, the homepage (if any), and a short note asking for comments
and testing.
Make sure to attach the port/patch to this email, or mention an URL where
it can be found, and send it out (mailinglist archives just contain the
mails itself).

<p>
Try to get others to test it on a variety of platforms for you.

<ul><li>
The AMD64 systems are good because they are fast, and because
<tt>sizeof(int) != sizeof(long)</tt> on this platform.

<li>
sparc64 systems are good because they are fairly common, can be quite fast, and
their byte order is the opposite of i386; if you developed on sparc64, of
course, you'd want it tested on i386.
</ul>

<br><li>
Incorporate any feedback you get. Test it again on your platform.
Get those who gave you feedback to test it again from your new port.

<br><br><li>
Get the port committed to CVS.

<p>
If you are not a developer with CVS access, then you will have to find
an OpenBSD developer to do the following steps for you (ask on
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>).

<p>
Before you import anything, get at least one "OK" from another ports
developer (the more the better).

<p>
If using <tt>@@newuser</tt> or <tt>@@newgroup</tt> in the PLIST files, check that
no users were added to <tt>/usr/ports/infrastructure/db/user.list</tt> since
the port was created.

<p>
For new ports we use <tt>cvs import</tt>, rather than adding new files
individually.
For example, to import a new <tt>lang/kaffe1</tt> port, first do a dry-run
import:

<blockquote><pre>
$ <b>cd /usr/ports/lang/kaffe1</b>
$ <b>cvs -ndcvs.openbsd.org:/cvs import ports/lang/kaffe1 username username_yyyymmdd</b>
</pre></blockquote>

Where <tt>username</tt> is your account username, and <tt>yyyymmdd</tt> is the
current date.
If this succeeds, then you can remove <tt>-n</tt> to import for real.
Your editor will be invoked so that you can enter a commit message.
In the commit message, at least state what you are importing and which
developers provided OKs.
Make sure the import path is correct; it always starts with <tt>ports/</tt>.

<p>
Alternatively, you can use <tt>ports/infrastructure/bin/portimport</tt> to
import new ports (read the manual for usage instructions).

<br><br><li>
Last but not least, add a one-line entry for the new port in its parent
directory's <tt>Makefile</tt>, e.g., for <tt>ports/lang/kaffe1</tt>,
add it to <tt>ports/lang/Makefile</tt>.
Don't forget to commit any changes made to
<tt>/usr/ports/infrastructure/db/user.list</tt>.

<br><br><li>
Maintain the port!
As time goes by, problems may arise, or new versions of the software may be
released.
You should strive to keep your port up to date.
In other words - iterate, test, test, iterate...

<br><br><li>
When updating a port, remember to handle dependencies!
You shouldn't break any port that depends on yours.
In case of problems, communicate with the maintainers of such ports.
Likewise, be alert for dependency updates, and check that the maintainer
did their job.
</ol>

<h2 id="PortsComplex">Handling Complex Situations</h2>

Assume you've managed to build the software, provide required patches,
and you want to finish the port.

<h3 id="Know">Know the software</h3>

<dl>
<dt>
Identify options
<dd>
The first step is usually to identify build options.
You will often have to read the configuration log, see what stuff your port
auto-detects.
Read the configure script options.
Read the port documentation for extra stuff.
<dt>Make options work
<dd>
Recompile your port with various options.
Install extra dependencies.
Make sure your port detects them correctly.
Add supplementary patches to ensure compilation.
Test the result, and verify extra stuff does work.
<dt>Identify missing software
<dd>Some dependencies won't be fulfilled because the missing software
has not yet been ported.
It is highly recommended to explicitly disable those options.
Failure to do that breaks bulk builds all the time: people port new software
and import it, and soon after, old ports stop building because they detect
the dependency, try to use it, and fail to build or package.
<dt>Check run-time dependencies versus build-dependencies
<dd>
Update your packing-list with make plist.
Use <tt>make port-lib-depends-check</tt> to see what libraries your
software needs (that will end up in <tt>LIB_DEPENDS</tt> or <tt>WANTLIB</tt>,
usually).
Identify various files and binaries in the dependencies that have to be present
for the port to work.
</dl>

<p>
By this point, you should have a fair understanding of your port's working.

<h3 id="Figure">Figure out important options</h3>

You won't care about some options.
It makes no sense to disable some stuff if it always works, and if the
dependencies are quite small.
Take special notes of licences on dependencies, especially the <tt>PERMIT*</tt>
stuff.
As a rule, even if a dependency is very small, if it affects the licensing of
the resulting package, you will have to explicitly take care of it.

<p>
Considering all possible options, you should be left with a much smaller set
of options for your port, mostly depending on what packages are needed to run
the software.
For now, do not worry about build dependencies.
Remember that the OpenBSD ports system is focused on the end user, and the end
user will want to install binary packages, so it doesn't matter if you need a
huge piece of software to build your port if it doesn't show up as a library
or runtime dependency.

<h3 id="Ideal">The ideal case: <tt>MULTI_PACKAGES</tt> and
<tt>PSEUDO_FLAVORS</tt></h3>

By now, you should have a fairly good idea of:

<ul>
<li>which new files show up when you activate each option
<li>which libraries/runtime files are needed when you activate each option
</ul>

In the ideal case, build options will simply create new files, with new
dependencies, and not affect other stuff.
This is a fairly common scenario for plugin frameworks: you add one library,
you end up with a new plugin.
This also happens fairly often for core applications with a graphics front-end:
the console application is built every time, and the x11 interface shows up
as a separate binary.

<p>
In this case, try setting the <tt>MULTI_PACKAGES</tt> variable to a list of
-sub packages, add corresponding <tt>COMMENTS</tt>, and look at your packaging.
Basically, <tt>MULTI_PACKAGES</tt> only affects the packaging: if you have
<tt>MULTI_PACKAGES=-s1 -s2</tt> all stuff relevant to the package will exist
intwo variants:

<tt>COMMENT-s1</tt> for the first package,
<tt>COMMENT-s2</tt> for the second package,
<tt>PLIST-s1</tt>, <tt>PLIST-s2</tt>, <tt>DESCR-s1</tt>, <tt>DESCR-s2</tt>.
You need to write those <tt>COMMENT-s1</tt> and <tt>COMMENT-s2</tt> in the
<tt>Makefile</tt>, and to split your <tt>PLIST</tt> into two parts, and to
create <tt>DESCR-s1/DESCR-s2</tt>.
You will also need to specify separate <tt>PKGNAME</tt>s for all subpackages.

<p>
It is a good idea to start with the minimal framework work required:
just copy the existing description and comments, because you will have
to fiddle with <tt>MULTI_PACKAGES</tt> and stuff before you polish this.

<p>
Once you've separated the files properly, you will need to check dependencies:
<tt>LIB_DEPENDS</tt>, <tt>WANTLIB</tt>, and <tt>RUN_DEPENDS</tt> will be split
for each subpackage.
It is usually time to check that your multi-packaging "works," and that
those nasty dependencies you don't want to force on the user are indeed
relegated to a specific subpackage.

<p>
Assuming everything works, you're mostly done.
Just pick reasonable names for the various packages, and fill in the comments
and descriptions.
The end-user will be able to just install the package(s) they want.

<p>
But wait.
What about the build, you say?
Well, having a lot of dependencies during build is not a problem.
Most packages are built by the OpenBSD team using special build runs (known
as bulk builds) where a developer just builds all possible packages on a
dedicated machine (or several, for slow architectures).
Since everything will get built, having big dependencies is not an issue.
Building the same thing several times, is an issue, though, which is why
<tt>MULTI_PACKAGES</tt> are the best way to handle options (when possible):
one build, one set of packages to test, better quality overall...

<p>
If you also want to help people who build packages themselves, you may consider
adding <tt>PSEUDO_FLAVORS</tt>.
A pseudo-flavor is a way to tweak an option (say, disable the graphical
interface) that's very similar to actual flavors.
In fact, the biggest difference is a functional difference: a pseudo flavor
should only affect the set of packages that get built, but it is never
allowed to modify the actual package contents.

<p>
For instance, assuming you separated the graphical interface into a separate
subpackage (<tt>MULTI_PACKAGES=-core -x11</tt>), you could create a pseudo
flavor <tt>no_x11</tt> that avoids building the -x11 subpackage.
The crucial point is that this flavor should NOT affect the -core package
in any way.

<p>
You would end up with a <tt>Makefile</tt> that looks something like this:

<blockquote><pre>
CATEGORIES = app
COMMENT-core = foo core application
COMMENT-x11 = foo graphical interface
V = 1.0
DISTNAME = foo-1.0
PKGNAME-core = foo-core-$V
PKGNAME-x11 = foo-x11-$V
PSEUDO_FLAVORS = no_x11
FLAVOR ?=
CONFIGURE_STYLE = gnu

MULTI_PACKAGES = -core
WANTLIB = c m crypto ssl
WANTLIB-x11 = ${WANTLIB} X11 Xt
RUN_DEPENDS-x11 = ::${BASE_PKGPATH},-core

.if ${FLAVOR:L:Mno_x11}
CONFIGURE_ARGS += --disable-x11
.else
MULTI_PACKAGES += -x11
.endif

.include &lt;bsd.port.mk&gt;
</pre></blockquote>

Notice that you only have to write a very small conditional section in the
<tt>Makefile</tt>: the system doesn't care at all that you define extra variables.

<h3 id="Inter">Interdependencies between subpackages</h3>

<tt>MULTI_PACKAGES</tt> setups used to be asymmetric, with a -main subpackage
and other subpackages, with the -main subpackage always built, and other
subpackages possibly depending upon it.
The current situation is totally symmetric: any subpackage can depend on any
other.
The infrastructure has specific provisions to avoid looping indefinitely.

<p>
The infrastructure takes special care of library inter-dependencies: it can
detect which <tt>WANTLIB</tt> come from external dependencies, and which come
from inter-dependencies.
While external <tt>LIB_DEPENDS</tt> and <tt>WANTLIB</tt> are checked at the
start of build, <tt>LIB_DEPENDS</tt> and <tt>WANTLIB</tt> that refer to one of
the subpackages currently being built, will only be checked at packaging time
(and thus packages may be created in a specific order to satisfy
interdependencies).

<p>
The infrastructure provides specific variables to help in writing
inter-dependencies: <tt>BUILD_PKGPATH</tt> contains the <tt>PKGPATH</tt> used
during building the current packages, taking flavors and pseudo-flavors into
account.
It is highly recommended to use this variable instead of rolling your own:
failure to do so will often trigger rebuilds in interesting flavors situations.
For instance:

<blockquote><pre>
...
FLAVORS = a b
FLAVOR ?=
MULTI_PACKAGES = -p1 -p2
WANTLIB-p1 = foo
LIB_DEPENDS-p1 = some/pkgpath,-p2
...
</pre></blockquote>

If you go on and build in some/pkgpath with <tt>FLAVOR=a</tt>, then creating the
subpackage for <tt>-p1</tt> will trigger a rebuild with <tt>FLAVOR=''</tt>.
You would instead write:

<blockquote><pre>
LIB_DEPENDS-p1 = ${BUILD_PKGPATH},-p2
</pre></blockquote>

There is also a <tt>BASE_PKGPATH</tt> variable, which does not take
pseudo-flavors into account.
This variable has limited applicability: it corresponds to a transition between
old <tt>MULTI_PACKAGES</tt> and newer ones, where the old <tt>main</tt>
subpackage did not have any marker in its pkgpath, and thus the corresponding
package needs a <tt>@@pkgpath ${BASE_PKGPATH}</tt> in its packing-list.
(In general, pseudo-flavors are build information, and should not make their
way into packages and packing-lists).

<h3 id="True">True <tt>FLAVORS</tt> and <tt>PKGNAMES</tt></h3>

There are some cases where configuration options are too invasive, and you
will have to add true flavors to the <tt>Makefile</tt>: those flavors will
command some configuration options, and usually additions to various dependencies.
Note that package naming is mostly automatic: the <tt>PKGNAME</tt> will have
an extension built by appending the specified flavors to its name.
So, if

<blockquote><pre>
PKGNAME = foo-1.0
FLAVORS = f1 f2 f3
</pre></blockquote>

and you build the port with <tt>FLAVOR='f3 f1'</tt>, then 
<tt>FULLPKGNAME=foo-1.0-f1-f3</tt> (<tt>FLAVORS</tt> is used to reorder
specified flavors in a canonical way).

<p>
There are sometimes mixed situations, where some packages do depend on the
<tt>FLAVOR</tt>, and some don't.
For instance, some ports include a large set of documentation that does not
depend on the <tt>FLAVOR</tt>, and some actual programs that depend on the
<tt>FLAVOR</tt>.
In such cases, you can specify the <tt>FULLPKGNAME</tt> for the documentation
subpackage explicitly.
Something like this:

<blockquote><pre>
CATEGORIES = app
COMMENT-core = foo application
COMMENT-doc = foo documentation
V = 1.0
DISTNAME = foo-1.0
PKGNAME-core = foo-$V
FULLPKGNAME-doc = foo-doc-$V
FLAVORS = crypto

MULTI_PACKAGES = -core -doc
WANTLIB-core = c m

.if ${FLAVOR:L:Mcrypto}
WANTLIB-core += ssl crypto
CONFIGURE_ARGS += --enable-crypto
.endif
</pre></blockquote>

As mentioned in the documentation, all package names have the same structure:
<tt>stem-version-flavor_extension</tt>.

<p>
By default, packages with the same stem do conflict, and update paths will
look at candidates with the same stem.
The right package will be the one coming from the exact same <tt>PKGPATH</tt>,
or matching <tt>@@pkgpath</tt> annotation in the packing-list.

<p>
Usually, <tt>MULTI_PACKAGES</tt> should not conflict, so they must have
different names (and the infrastructure has no way to build those names).
On the other hand, flavors should conflict, and thus have the same name.
The flavor information should end at the end of the package name, except for
pseudo-flavors, which do not change the way a package is built.

<p>
As far as dependencies go, by default, specifying a <tt>PKGPATH</tt> will just
create a <tt>stem-*</tt> dependency, meaning any package with the right stem
will match the dependency.
By default, any flavor will match.
If only specific flavors are desired, you must include them in your
specification, e.g., <tt>stem-*-flavor</tt>.
If some flavors are unwanted, you can remove them from matching packages,
e.g., <tt>stem-*-!flavor</tt>.

<p>
Since OpenBSD 4.9, asking for at least some version of a dependency can be
directly tacked to the <tt>PKGPATH</tt>, e.g., <tt>dir/foo&gt;=2.0</tt>.

<h2 id="PortsUpdate">Updating ports</h2>

The package tools can do updates, so maintainers have to be aware of one
simple fact: update is not instantaneous.
Even if a user just goes from release to release, each time they run
<tt>pkg_add -u</tt>, the system will replace each package with a new version,
one package at a time.
So the user will run a mixed system, even if it is for just a few minutes.

<p>
There are basically two update models of which maintainers must be
aware.

<p>
<ul><li>
Some users follow current on a loose basis.
They update their packages every few days/every few weeks.
Either all packages, or only some selected packages.
The update mechanism should work for them: it can force them to update some
specific packages, or to install some new stuff, but it should not fail
silently.
Micro-updates must be tested.
These users will most often be able to cope with small changes, like program
name changes, or configuration adjustments.

<li>
Some users update every six months with a new release.
They also will download stable updates (security and critical updates).
During six months, a large part of the ports tree changes.
These users do not care about individual software changes.
They just want a system that works.
Changing binary names is completely unfriendly to these users.
Tweaking hundreds of configuration files will be a major pain for them.
Maintainers can help by providing smooth update paths, and major hints
whenever something important changes.
</ul>

<p><!-- XXXrelease - still true? -->
You should note that part of the update process, especially the macroscopic
changes for users who update every six months, is not yet automated.
The global update mechanism is still a work in progress, and pkg_add will be
able to cope with more issues in the future.
As of now, you should focus on making sure the system updates correctly, one
port at a time, and that one port's update takes other ports into account,
as far as conflicts and other issues are concerned.
<!--
<h2>Naming packages and the update process</h2>
<h2>Conflicts, planning for the future</h2>
<h2>The icky business of renames and branches</h2>
<h2>Configuration files and update issues</h2>
<h2>Shared libraries issues</h2>
-->

<h3 id="UpdateChecklist">Update checklist</h3>

Part of the work is to be done when making the port itself.

<ul><li>
Make sure the software authors are aware of your tweaks to make it run on
OpenBSD.
You must endeavor to get OpenBSD patches into the next release of the software.
Otherwise, you can be prepared to rewrite most of your patches from scratch
every release.

<li>
Make sure the software authors understand version numbering.
If the distfiles do not contain any version numbers, or if they reference
current stuff, communicate with the authors so that you can get some
permanent URLs.

<li>
Document work-arounds.
This will help you remember to check whether they are still necessary when
you try to update a port.

<li>
Document dependencies, especially the stuff you don't use.
Some ports can use external software that may not be available at the time
of porting.
Make sure you do not pick it up, and document it, so that you can update
your port when this software becomes available later.

<li>
If the port uses libtool, copy its log from the file
<tt>${WRKBUILD}/shared_libs.log</tt> verbatim as a basis for your
<tt>SHARED_LIBS</tt> setup.
This will help during updates.

<li>
Use <tt>PLIST_DB</tt> and build a database of packing-lists.
This is useful to find out about forgotten package name bumps, and also
to check for conflicts with older packages.

<li>
Make sure dependencies stay as loose as they can be.
By default, <tt>RUN_</tt> and <tt>LIB_DEPENDS</tt> will be satisfied by any
version of a package.
Do not insist on a given version unless you have to. Use minimal versions
whenever possible.

</ul>

Ports often need minor updates without a new version upstream.

<ul><li>
Each port update needs a package name bump.
Otherwise, the update mechanism for binary packages won't work.
Anything that affects the binary package implies a bump.
This includes <tt>HOMEPAGE</tt>, <tt>MAINTAINER</tt> or description changes.

<li>
Version numbers always go forward.
If something unexpected happens,and you have to go back, or if the numbering
changes completely so that the version number appears to go backwards, you
must use <tt>EPOCH</tt> to make sure pkg_add(1) sees the package as a newer
package.

<li>
If the package does not build, no bump is needed: changes to restore a port
to working order after it got broken do not warrant bumps.

<li>
Changes to make sure a port does not pick/does pick an external dependency
warrant a bump.

<li>
Changes in dependencies generally do not affect a port version number.
The package system uses a signature mechanism such that a binary package
is fully identified by its package names, plus the dependencies against
which it was built, plus the version numbers of all shared libraries it
contains.
</ul>

Part of the work will happen before the update itself.

<ul><li>
run <tt>make patch</tt> to have an initial copy of the port before the update.
</ul>

And then the update.

<ul><li>
Edit the port's <tt>Makefile</tt> to grab the new version, run
<tt>make makesum</tt> and <tt>make patch</tt> as a starting basis.

<li>
Once you've fixed patches that failed, run a full diff between the old and
the new version to figure out exactly what changed.
Take notes, be prepared to revisit things later.

<li>
Do whatever porting work is necessary to get the new version to run under
OpenBSD: adjust dependencies, change package contents, etc.

<li>
Double check shared library versions.
For libtool-based ports, you have the <tt>shared_libs.log</tt> to check whether
the software authors did significant changes.
<i>Note well that this is not enough.</i>
Most software authors do not really understand shared library issues.
You have to read the full diff between the old and the new version, and bump
library versions accordingly.
When in doubt, bump the major version.

<li>
Be aware of conflicts with already-built packages.
For simple updates, nothing needs to be done.
If you split a package into several subpackages, make sure the subpackages
have proper conflict annotations: they should usually conflict with the "old"
single package.

<li>
Help the user.
If some specific steps must be taken beyond <tt>pkg_add -u</tt>, make sure
they are visible in the package.
When your packaging policy changes, document it in the package description.
For instance, if you move the documentation into a separate package for
space constraints, the main package description should mention that the
documentation is now available as a separate package.

</ul>

<h3 id="CommitUpdates">Committing Port Updates</h3>

When a port update is ready, get it in CVS.
If you do not have a CVS account, then you will need to find a developer to do
the following for you (ask on
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>).

<ol>
<li>Get at least one "OK" from another ports developer.
<br><br><li>Use <tt>cvs add</tt> to add any new files.
<br><br><li>Use <tt>cvs rm</tt> to remove files that are no longer needed (e.g.
upstreamed patches).
<br><br><li>Check the output of <tt>cvs -n up -d</tt>.
New files should be marked <tt>A</tt>, deleted files should be marked
<tt>D</tt> and changed files should be maked <tt>M</tt>.
Look for files marked <tt>?</tt> - did you mean to <tt>cvs add</tt> them?
<br><br><li>If all is well, commit the new/deleted/changed files using <tt>cvs
commit</tt>.
When invoking <tt>cvs commit</tt>, you can either list the files individually,
or if you provide no filenames, CVS will recursively commit (be careful with
this feature).
You will be asked to enter a commit message, in which you should state which
port is being updated, and who provided an OK.
</ol>


<h2 id="PortsPolicy">OpenBSD Porting Policy</h2>

<ul><li>
OpenBSD does NOT use <tt>/usr/local/etc/rc.d</tt>.
<tt>/usr/local</tt> is often shared between several machines, thanks to NFS.
For this reason, configuration files that are specific to a given machine
can't be stored under <tt>/usr/local</tt>.
<tt>/etc</tt> is the central repository for per machine configuration files.
Moreover, OpenBSD policy is to never update files under <tt>/etc</tt>
automatically.
Ports that need some specific boot setup should advise the administrator
about what to do instead of blindly installing files.

<li>
OpenBSD does NOT compress man pages.

<li>
OpenBSD does NOT require <tt>-lcrypt</tt>, <tt>-ldl</tt>, or <tt>-lrt</tt>.
The functions provided by these libraries are part of <tt>libc</tt>.
The <tt>crypt()</tt> function does not support DES, only bcrypt.

<li>
OpenBSD has a separate namespace for users and groups created by ports.
See <tt>/usr/ports/infrastructure/db/user.list</tt> for details.

<li>
OpenBSD is strongly security-oriented.
You should read and understand this page's
<a href="#PortsSecurity">security section</a>.

<li>
Be sure to add the <tt>&#36;OpenBSD&#36;</tt> CVS tag to the Makefile.
The account name, version number, etc., will be filled in automatically
by CVS during commit.

<li>
The goal is to get all ported applications to support OpenBSD.
To achieve this goal you <b>must</b> feed any OpenBSD patches back to the
application maintainer.
</ul>

<h2 id="PortsSecurity">Security Recommendations</h2>

There are many security problems to worry about.
If you are not absolutely sure of what you are doing please request help from
the <a href="mailto:ports@@openbsd.org">ports</a> mailing list.

<ul><li>
Do <i>not</i> use alpha or beta code when preparing a port.
Use the latest regular or patch release.

<li>
Any software to be installed as a server should be scanned for buffer
overflows, especially unsafe use of <tt>strcat/strcpy/strcmp/sprintf</tt>.
In general, <tt>sprintf</tt> should be replaced with <tt>snprintf</tt>.

<li>
Never use filenames instead of true security.
There are numerous race conditions where you don't have proper control.
For instance, an attacker who already has user privileges on your machines
may replace files in <tt>/tmp</tt> with symbolic links to more strategic
files, such as <tt>/etc/master.passwd</tt>.

<li>
For instance, both <tt>fopen</tt> and <tt>freopen</tt> <b>create a new file
or open an existing file</b> for writing.
An attacker may create a symbolic link from <tt>/etc/master.passwd</tt> to
<tt>/tmp/addrpool_dump</tt>.
The instant you open it, your password file is hosed.
Yes, even with an <tt>unlink</tt> right before.
You only narrow the window of opportunity.
Use <tt>open</tt> with <tt>O_CREAT|O_EXCL</tt> and <tt>fdopen</tt> instead.

<li>
Another very common problem is the <tt>mktemp</tt> function.
Heed the warnings of the bsd linker about its uses.
<b>These must be fixed</b>.
This is not quite as simple as <tt>s/mktemp/mkstemp/g</tt>.
Refer to <a href="http://man.openbsd.org/mktemp">mktemp(3)</a> for more
information.
Correct code using <tt>mkstemp</tt> includes the source to <tt>ed</tt> or
<tt>mail</tt>.
A rare instance of code that uses <tt>mktemp</tt> correctly can be found in
the <tt>rsync</tt> port.

<li>
Just because you can read it doesn't mean you should.
A well-known hole of this nature was the <tt><b>startx</b></tt> problem.
As a setuid program, you could launch startx with any file as a script.
If the file was not a valid shell script, a syntax error message would
follow, along with the first line of the offending file, without any
further permission check.
Pretty handy to grab the first line of a shadow passwd file, considering
these often start with root entry.
Do not open your file, and then do an <tt>fstat</tt> on the open descriptor
to check if you should have been able to open it (or the attacker will play
with <tt>/dev/rst0</tt> and rewind your tape) -- open it with the correct
uid/gid/grouplist set.

<li>
Don't use anything that forks a shell in setuid programs before dropping
your privileges.
This includes <tt>popen</tt> and <tt>system</tt>.
Use <tt>fork</tt>, <tt>pipe</tt> and <tt>execve</tt> instead.

<li>
Pass open descriptors instead of filenames to other programs to avoid race
conditions.
Even if a program does not accept file descriptors, you can still use
<tt>/dev/fd/0</tt>.

<li>
Access rights are attached to file descriptors.
If you need setuid rights to open a file, open that file, then drop your
privileges.
You can still access the open descriptor, but you have less to worry about.
This is double-edged: even after dropping privileges, you should still watch
out for those descriptors.

<li>
Avoid root setuid as much as you can.
Basically, root can do anything, but root rights are very rarely needed,
except maybe to create socket ports with a number under 1024.
You must know the appropriate magic for writing daemons to achieve that.
It could be argued that you have no business writing setuid programs if you
don't know how to do that.

<li>
Use setgid instead of setuid.
Apart from those specific files needed by setgid programs, most files are not
group-writable.
Hence, a security problem in a setgid program won't compromise your system as
much: with only group rights, the worst an intruder will be able to do is hack
a games score table or some such.
See the <tt>xkobo</tt> port for an instance of such a change.

<li>
Don't trust group-writable files.
Even though they are audited, setgid programs are not perceived as important
potential security holes.
Hence stuff they can tamper with shouldn't be considered sensitive information.

<li>
Don't trust your environment!
This involves simple things such as your <tt>PATH</tt> (never use
<tt>system</tt> with an unqualified name, avoid <tt>execvp</tt>), but also
more subtle items such as your locale, timezone, termcap, and so on.
Be aware of transitivity: even though you're taking full precautions,
programs you call directly won't necessarily.
<b>Never</b> use <tt>system</tt> in privileged programs, build your command
line, a controlled environment, and call <tt>execve</tt> directly.
The <tt>perlsec</tt> man page is a good tutorial on such problems.

<li>
Never use setuid shell-scripts.
These are inherently insecure.
Wrap them into some C code that ensures a proper environment.
On the other hand, OpenBSD features secure perl scripts.

<li>
Beware the dynamic loader.
If you are running setuid, it will only use trusted libraries that were
scanned with ldconfig.
Setgid is not enough.

<li>
Dynamic libraries are tricky.
C++ code sets a similar problem.
Basically, libraries may take some action based upon your environment before
your main program even gets to check its setuid status.
OpenBSD <tt>issetugid</tt> addresses this problem, from the library writer
point of view.
Don't try to port libraries unless you understand this issue thoroughly.

<li>
On OpenBSD, <a href="http://man.openbsd.org/rand">rand(3)</a>, 
<a href="http://man.openbsd.org/random.3">random(3)</a>, and the 
<a href="http://man.openbsd.org/drand48">drand48(3)</a> family return
non-deterministic random numbers by default.
Any specified seed value is ignored by the associated seed function, and
<tt>arc4random</tt> is used instead.
If the determinstic (i.e: repeatable) behavior must be preserved, use the
OpenBSD extensions:
<tt>srand_deterministic</tt>, <tt>srandom_deterministic</tt>,
<tt>srand48_deterministic</tt>, <tt>seed48_deterministic</tt>
and <tt>lcong48_deterministic</tt>.
</ul>

<h2 id="PortsGeneric">Generic Porting Hints</h2>

<ul><li>
<tt>__OpenBSD__</tt> should be used sparingly, if at all.
Constructs that look like

<blockquote><pre>
#if defined(__NetBSD__) || defined(__FreeBSD__)
</pre></blockquote>

are often inappropriate.
Don't add blindly <tt>__OpenBSD__</tt> to it.
Instead, try to figure out what's going on, and what actual feature is needed.
Manual pages are often useful, as they include historic comments, stating when
a particular feature was incorporated into BSD.
Checking the numeric value of <tt>BSD</tt> against known releases is often the
right way.
See the
<a href="https://www.netbsd.org/Documentation/pkgsrc/">NetBSD pkgsrc guide</a>
for more information.

<li>
Defining <tt>BSD</tt> is a bad idea.
Try to include <tt>sys/param.h</tt>.
This not only defines <tt>BSD</tt>, it also gives it a proper value.
The right code fragment should look like:

<blockquote><pre>
#if (defined(__unix__) || defined(unix)) &amp;&amp; !defined(USG)
#include &lt;sys/param.h&gt;
#endif
</pre></blockquote>

<li>
Test for features, not for specific OSes.
In the long run, it is much better to test whether <tt>tcgetattr</tt> works
than whether you're running under BSD 4.3 or later, or SystemVR4.
These kind of tests just confuse the issue.
The way to go about it is, for instance, to test for one particular system,
set up a slew of <tt>HAVE_TCGETATTR</tt> defines, then proceed to the next
system.
This technique separates features tests from specific OSes.
In a hurry, another porter can just add the whole set of <tt>-DHAVE_XXX</tt>
defines to the Makefile.
One may also write or add to a configure script to check for that feature and
add it automatically.
As an example not to follow, check nethack 3.2.2 source: it assumes loads of
things based on the system type.
Most of these assumptions are obsolete and no longer reflect reality: POSIX
functions are more useful than older BSD versus SystemV differences, to the
point that some traditional bsd functions are now only supported through
compatibility libraries.

<li>
Avoid include files that include other includes that...
First, because this is inefficient.
Your project will end up including a file that includes everything.
Also, because it makes some problems difficult to fix.
It becomes harder to <i>not</i> include one particular file at a given point.

<li>
Avoid bizarre macro tricks.
Undefining a macro that was defined by a header file is a bad idea.
Defining macros to get some specific behavior from an include file is also
a bad idea: compilation modes should be global.
If you want POSIX behavior, say so, and <tt>#define POSIX_C_SOURCE</tt>
throughout the whole project, not when you feel like it.

<li>
Don't ever write system function prototypes.
All modern systems, OpenBSD included, have a standard location for these
prototypes.
Likely places include <tt>unistd.h</tt>, <tt>fcntl.h</tt> or <tt>termios.h</tt>.
The man page frequently states where the prototype can be found.
You might need another slew of <tt>HAVE_XXX</tt> macros to procure the right
file.
Don't worry about including the same file twice; include files have guards
that prevent all kinds of nastiness.
If some broken system needs you to write the prototype, don't impose on all
other systems.
Roll-your-own prototypes will break because they may use types that are
equivalent on your system, but are not portable to other systems (<tt>unsigned
long</tt> instead of <tt>size_t</tt>), or get some <tt>const</tt> status wrong.
Also, some compilers, such as OpenBSD's own gcc, are able to do a better job
with some very frequent functions such as <tt>strlen</tt> if you include the
right header file.

<li>
Carefully check the build log for any compiler warnings.

<ul><li>
<tt>implicit declaration of function foo()</tt> indicates that a function
prototype is missing.
This means that the compiler will assume the return type to be an integer.
Where the function actually returns a pointer, on 64-bit platforms it will
be truncated, usually causing a segmentation fault.
</ul>

<li>
Don't use the name of a standard system function for anything else.
If you want to write your own function, give it its own name, and call that
function everywhere.
If you wish to revert to the default system function, you just need to comment
your code out, and define your own name to the system function.
Don't do it the other way around.
Code should look like this:

<blockquote><pre>
/* prototype part */
#ifdef USE_OWN_GCVT
char *foo_gcvt(double number, size_t ndigit, char *buf);
#else
/* include correct file */
#include &lt;stdlib.h&gt;
/* use system function */
#define foo_gcvt  gcvt
#endif

/* definition part */
#ifdef USE_OWN_GCVT
char *foo_gcvt(double number, size_t ndigit, char *buf)
   {
   /* proper definition */
   }

/* typical use */
s = foo_gcvt(n, 15, b);
</pre></blockquote>

  </ul>

<h2 id="PortsOther">Other Helpful Hints</h2>

<ul><li>
Recent versions of <tt>bsd.port.mk</tt> set the installer's path.
Specifically, they set <tt>/usr/bin</tt> and <tt>/bin</tt> to be searched
<i>before</i> <tt>/usr/local/bin</tt> and <tt>/usr/X11R6/bin</tt>.

<li>
It is OK to rely on a feature that appeared in a recent version of
<tt>bsd.port.mk</tt>, as people are supposed to update their whole ports tree,
including <tt>bsd.port.mk</tt>.

<li>
Prefer using <tt>update-plist</tt> to generate and update packing-lists
instead of doing things manually.
You can comment unwanted lines out.
<tt>update-plist</tt> can detect most file types and copy most extra
annotations correctly.

<li>
In OpenBSD, <tt>curses.h/libcurses/libtermlib</tt> is the "new curses."
Change:
<br>
<tt>ncurses.h ==&gt; curses.h</tt>
<br>
``old (BSD) curses'' is available by defining <tt>_USE_OLD_CURSES_</tt> before
including <tt>curses.h</tt> (usually in a Makefile) and linking with
<tt>-locurses</tt>.

<li>
In OpenBSD, terminal discipline has been upgraded from the older BSD
<tt>sgtty</tt> to the newer POSIX <tt>tcgetattr</tt> family.
Avoid the older style in new code.
Some code may define <tt>tcgetattr</tt> to be a synonym for the older
<tt>sgtty</tt>, but this is at best a stopgap measure on OpenBSD.
The <tt>xterm</tt> source code is a very good example of what not to do.
Try to get your system functionality right: you want a type that remembers
the state of your terminal (possible typedef), you want a function that
extracts the current state, and a function that sets the new state.
Functions that modify this state are more difficult, as they tend to vary
depending upon the system.
Also, don't forget that you will have to handle cases where you are not
connected to a terminal, and that you need to handle signals: not only
termination, but also background (<tt>SIGTSTP</tt>).
You should always leave the terminal in a sane state.
Do your tests under an older shell, such as sh, which does not reset the
terminal in any way at program's termination.

<li>
The newer termcap/terminfo and curses, as included with OpenBSD, include
standard sequences for controlling color terminals.
You should use these if possible, reverting to standard ANSI color sequences
on other systems.
However, some terminal descriptions have not been updated yet, and you may
need to be able to specify these sequences manually.
This is the way vim handles it.
This is not strictly necessary.
Except for privileged programs, it is generally possible to override a termcap
definition through the <tt>TERMCAP</tt> variable and get it to work properly.

<li>
Signal semantics are tricky, and vary from one system to another.
Use <tt>sigaction</tt> to ensure a specific semantics, along with other system
calls referenced in the correspondin  man page.
</ul>

<h2 id="PortsAvail">Additional Information</h2>

<ul><li>
The man page <a href="http://man.openbsd.org/bsd.port.mk">bsd.port.mk(5)</a>.
This documents the ports infrastructure makefile that is included at the end
of each individual port makefile.
There are still a few comments at the start of the file itself, but most of
the useful information is now documented.

<li>
The man pages
<a href="http://man.openbsd.org/packages-specs">packages-specs(7)</a> and
<a href="http://man.openbsd.org/library-specs">library-specs(7)</a>.
These explain the exact syntax of package and library dependencies,
respectively.

<li>
The man page
<a href="http://man.openbsd.org/port-modules">port-modules(5)</a>.
This documents the different port modules which are used throughout
the ports infrastructure, e.g. cpan, java, python, and so on.
</ul>

<p>
</body>
</html>
@


1.69
log
@Without distinfo, "make fetch-all" is no longer willing to fetch anything,
but without the distfile, you cannot compute distinfo.
So tell people to use "make makesum", which will also fetch what's needed.
@
text
@d1543 1
a1543 1
Recent versions of <tt>bsd.port.mk</tt> set the installers path.
a1550 1
NEED_VERSION is now obsolete.
@


1.68
log
@consistent formatting in the make commands; from anton lindqvist
@
text
@d182 1
a182 1
<tt>make fetch-all</tt>.
@


1.67
log
@a few more links can switch to https.
@
text
@d182 1
a182 1
<tt><b>make fetch-all</b></tt>.
d273 2
a274 2
Create a checksum in <tt>distinfo</tt> by typing <tt><b>make makesum</b></tt>.
Then verify the checksum is correct by typing <tt><b>make checksum</b></tt>.
d739 1
a739 1
Use <tt><b>make port-lib-depends-check</b></tt> to see what libraries your
@


1.66
log
@pkg/SECURITY files don't exist since 2013

ok tb@@ tj@@ jca@@
@
text
@d1427 1
a1427 1
<a href="http://www.netbsd.org/Documentation/pkgsrc/">NetBSD pkgsrc guide</a>
@


1.65
log
@fix some misuse of "up-to-date" / "up to date"

(use hyphens if the compound adjective is before the noun. use spaces if
it's after the noun.)
@
text
@a548 13
Log interesting stuff and fixes in the <tt>pkg/SECURITY</tt> file.
This file should list audited potential problems, along with relevant patches,
so that another person can see at first glance what has been done.
Example:

<blockquote><pre>
&#36;OpenBSD&#36;

${WRKDIR}/receiver.c
   call to mktemp (wrapper function do_mktemp) does seem to be correct.

The server makes extensive use of strlcpy/strlcat/snprintf.
</pre></blockquote>
@


1.64
log
@Switch a few links to ftp.openbsd.org, www.libressl.org and www.openssh.org
to https now that the certificates are fully supported. Only fully
qualified links are modified and none that are generated from build/. While
there, fix a few broken links that were found during the conversion.

requested by tj, "yes, but carefully" beck
@
text
@d135 1
a135 1
It also means trying to keep them up-to-date, and answering questions
d564 1
a564 1
Make sure your <tt>/etc/mtree</tt> directory is up-to-date.
@


1.63
log
@unify spelling of SPARC64 and sparc64
@
text
@d168 1
a168 1
the distfile is kept, http://ftp.openbsd.org/pub/OpenBSD/distfiles/ for
@


1.62
log
@guide.html: Update porting guide with more accurate and concise prose.

To be more specific:

OK tj@@, sthen@@, tb@@, thanks.
@
text
@d648 2
a649 2
SPARC64 systems are good because they are fairly common, can be quite fast, and
their byte order is the opposite of i386; if you developed on SPARC64, of
@


1.61
log
@tls on openbsd.org is now real:
- link to https://www.openbsd.org from the sub-projects' pages
- make internal links relative
- switch link rel=canonical to https to please some search engines
"go ahead" from beck, "do it!!!!" tj
@
text
@d45 1
d648 3
a650 3
Sun SPARC and UltraSPARC are good because they are very common and because
their byte order is the opposite of i386; if you developed on SPARC, of course,
you'd want it tested on i386.
d658 1
a658 22
Finally, include it in the "ports" tree.
If you do not have CVS access, ask someone on
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> to commit it.

<br><br><li>
If you are a developer with CVS access, check it in.
(Note that addition of new ports requires an explicit OK).
Before commit, if using <tt>@@newuser</tt> or <tt>@@newgroup</tt> in the
PLIST files, check that no users were added to
<tt>/usr/ports/infrastructure/db/user.list</tt> since the port was created.
We normally use <tt>cvs import</tt> for a new port, rather than adding a
zillion (or a dozen) files individually.
Import uses "vendor branch" version numbers like 1.1.1.1, but don't worry
about that!
If you make changes to a specific file (edit, then <tt>cvs commit</tt>),
it will be 1.2, and that will be used.

<p>
In short, <tt>import</tt> is typically used when a port is created.
From that point on, <tt>cvs add</tt> and <tt>cvs rm</tt> are typically used
to add or remove files, and the normal edit-&gt;commit cycle for changes.
You might use something like this:
d660 4
a663 6
<blockquote><pre>
$ <b>cd /usr/ports/mystuff/lang/kaffe1</b>
$ <b>make clean	# you really don't want to check in all of work!</b>
$ <b>cvs -d cvs.openbsd.org:/cvs -n import ports/lang/kaffe1 \</b>
	<b><i>YourName</i> <i>YourName_YYYY-MMM-DD</i></b>
</pre></blockquote>
d665 3
a667 2
<ul><li>
<tt>-d cvs.openbsd.org:/cvs</tt> says where cvs lives.
d669 4
a672 3
<li>
<tt>-n</tt> says to do a 'dry run'; check the output of this, and if things
are OK re-run the command without <tt>-n</tt>.
d674 5
a678 18
<li>
<tt>ports/lang/kaffe1</tt> is the path relative to <tt>/cvs</tt> where the port
lives.
Don't forget to start it with ports/.

<li>
<tt><i>YourName</i></tt> (replaced with your login name) is the 'vendor tag'.
You imported it so you are the vendor.

<li>
<tt><i>YourName_YYYY-MMM-DD</i></tt> (e.g., <tt>ian_2000-Jan-01</tt>) is the
vendor release tag.
This is as good as any.
</ul>

<br>
As a real example, here is the output of checking in the <tt>kaffe1</tt> port,
which one of us did on September 8, 1998:
d681 3
a683 10
$ <b>cd kaffe1</b>
$ <b>make clean >/dev/null</b>
$ <b>cvs import -m 'kaffe1.0(==JDK1.1) port' ports/lang/kaffe1 ian ian_1998-Sep-08</b>
N ports/lang/kaffe1/Makefile
cvs server: Importing /cvs/ports/lang/kaffe1/files
N ports/lang/kaffe1/files/md5
cvs server: Importing /cvs/ports/lang/kaffe1/pkg
N ports/lang/kaffe1/pkg/COMMENT
N ports/lang/kaffe1/pkg/DESCR
N ports/lang/kaffe1/pkg/PLIST
d685 7
a691 2
No conflicts created by this import
</pre></blockquote>
d693 3
a695 5
In this case, <tt>-m</tt> was used to specify the commit log message
directly on the command line; normally when you import a port, you would
do this in the interactive editor rather than specifying it on the command
line - include a copy of pkg/DESCR and any other (short) relevant
information, such as who has given an OK.
d1207 26
@


1.60
log
@remove unneded section annotation in short man links
@
text
@d14 1
a14 1
<link rel="canonical" href="http://www.openbsd.org/faq/ports/guide.html">
@


1.59
log
@scripts/configure support in ports went away long ago, noted by Taylor Stearns.
While there clean up some PERMIT_* parts and add a request to check output
of "configure --help" to look for hidden dependencies.
@
text
@d1420 1
a1420 1
On OpenBSD, <a href="http://man.openbsd.org/rand.3">rand(3)</a>, 
@


1.58
log
@silence w3 validator warnings.
@
text
@d330 3
a332 2
Set these values to <tt>Yes</tt> if it is permitted or to a comment string
stating why it is not.
d342 2
d350 5
a354 8
You can add a port configuration script named configure to a directory named
<tt>scripts/</tt>.
This will be run before any configuration specified by <tt>CONFIGURE_STYLE</tt>
is run.

<li>
If GNU configure is used, you may want to run <tt>./configure --help</tt>
to see what options are available.
@


1.57
log
@remove some mentions of inetd and ftpd, replacing them with more modern
alternatives where applicable.

discussed with sthen tb
@
text
@d1652 1
@


1.56
log
@remove mentions of systrace.
@
text
@a1367 2
It is arguably better to keep that under <tt>inetd</tt> control and just add
the relevant entries to <tt>inetd.conf</tt>.
@


1.55
log
@sync porter's handbook formatting with the main faq style.
@
text
@a1586 4
Add <tt>USE_SYSTRACE=Yes</tt> to <tt>/etc/mk.conf</tt> to detect misbehaving
scripts, makefiles, etc.

<li>
@


1.54
log
@use short form man links in the faq and fix a few broken links
@
text
@d4 6
a9 1
<title>2 - OpenBSD Porting Guide</title>
a16 19
<!--
Copyright (c) 2005-2010 XXX

Permission to use, copy, modify, and distribute this documentation for
any purpose with or without fee is hereby granted, provided that the
above copyright notice and this permission notice appear in all copies.

THE DOCUMENTATION IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS DOCUMENTATION
-->

<!-- Passes validator.w3.org.  Please keep it this way -->

d22 4
a25 1
<font color="#e00000">2 - OpenBSD Porting Guide</font>
a28 5
<font color= "#0000e0">
<a href="index.html">[Handbook Index]</a>
<a href="../faq15.html">[To Section 1 - The OpenBSD Ports System]</a>
<a href="specialtopics.html">[To Section 3 - Special Porting Topics]</a>
</font>
a29 3
<p>

<h3>Table of Contents</h3>
d31 3
a33 3
  <li><a href="#Overview"         >2.1 - Overview</a>
  <li><a href="#PortsChecklist"   >2.2 - Porting Checklist</a>
  <li><a href="#PortsComplex"     >2.3 - Handling Complex Situations</a>
d35 6
a40 5
    <li><a href="#Know"           >2.3.1 - Know the software</a>
    <li><a href="#Figure"         >2.3.2 - Figure out important options</a>
    <li><a href="#Ideal"          >2.3.3 - The ideal case: MULTI_PACKAGES and PSEUDO_FLAVORS</a>
    <li><a href="#Inter"          >2.3.4 - Interdependencies between subpackages</a>
    <li><a href="#True"           >2.3.5 - True FLAVORS, and PKGNAMES</a>
d42 1
a42 1
  <li><a href="#PortsUpdate"      >2.4 - Updating Ports</a>
d44 1
a44 1
    <li><a href="#UpdateChecklist">2.4.1 - Update checklist</a>
d46 5
a50 5
  <li><a href="#PortsPolicy"      >2.5 - OpenBSD Porting Policy</a>
  <li><a href="#PortsSecurity"    >2.6 - Security Recommendations</a>
  <li><a href="#PortsGeneric"     >2.7 - Generic Porting Hints</a>
  <li><a href="#PortsOther"       >2.8 - Other Helpful Hints</a>
  <li><a href="#PortsAvail"       >2.9 - Additional Information</a>
d55 1
a55 1
<h2 id="Overview">2.1 - Overview</h2>
d57 57
a113 47
  So you've just compiled your favorite software package on your
   OpenBSD machine and you want to share your effort by turning
   it into a standard port.  What to do?
  <p>
   The most important thing to do is to <b>communicate</b>.
   Ask people on <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>
   if they are working on the same port. <i>Tell the original software 
   authors about it</i>, including problems you may find. If licensing
   information appears incorrect, tell them.  If you had to jump through
   hoops to make the port build, tell them what can be fixed.  If they are
   only developing on Linux and feel like ignoring the rest of the Unix
   world, try to make them change their view.
  <p>
   <b>COMMUNICATION</b> makes the difference between a successful
   port and a port that will slowly be abandoned by everyone.
  <p>
   First, look at the porting information on this page.
   Test, then re-test, and finally test again!
  <p>
   OpenBSD now fully supports updates. This means that
   <a href="#PortsUpdate">some issues</a>
   must be taken into account.
  <p>
   Submit the port.  Create a gzipped tarball of the port directory.
   You can then either place it on a public FTP or HTTP server, sending
   its URL to <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>,
   or send the port MIME encoded to the same address.  Pick whichever
   method works best for you.
 <p>
   Porting some new software takes time. Maintaining it over time is harder.
   It is quite okay to port software and let other people handle it
   afterwards. It is also okay to help other people update and maintain
   other ports, as long as you communicate to avoid doing the same things
   twice.
  <p>
   In the OpenBSD culture, <tt>MAINTAINER</tt>ship is not a status item,
   but a responsibility.  We have CVS and comments to give credit to the
   person who did the work.  A port <tt>MAINTAINER</tt> is something else:
   a person who assumes responsibility for the working of the port, and is
   willing to spend some time ensuring it works as best as can be.

<h2 id="PortsChecklist">2.2 - Porting Checklist</h2>

The list below is a useful reminder of things to do. This is neither
totally accurate nor perfect.
Direct comments and questions to <a href="mailto:ports@@openbsd.org">
ports@@openbsd.org</a>.
d120 1
d123 1
d125 2
a126 1
Reading this list is important since many announcements go over this list.
d128 2
a129 2
You will find a lot of porting-savvy people there.  They can often give you
good advice or test ports for you.
d134 2
a135 2
It also means trying to keep them up-to-date, and to answer questions about
them.
d145 2
a146 2
From the names of the first level subdirectories of
<tt>/usr/ports/</tt>, pick a primary category for your port.
d149 2
a150 1
infrastructure there.  Copy the template <tt>Makefile</tt> from
d156 1
d160 1
d164 1
d172 1
d178 1
d183 1
d186 1
d191 1
d201 1
d203 5
a207 4
For ports with source distributed from GitHub there are several
possibilities.
<ul><li>In some cases (for example icinga, darktable) a distribution tar
file has been prepared and is available in a /releases/ directory.
d211 3
a213 2
Specify as normal using something like
<tt>MASTER_SITES=https://github.com/acct/project/releases/download/relname/</tt>.
d217 2
a218 2
<a href="http://man.openbsd.org/bsd.port.mk.5">bsd.port.mk(5)</a>
variables: <tt>GH_ACCOUNT</tt>, <tt>GH_PROJECT</tt>, <tt>GH_TAGNAME</tt>.
d223 1
d228 1
d243 1
d245 3
a247 3
If a given port needs more than about five <tt>DISTFILES</tt> + <tt>PATCHFILES</tt>
to work, use <tt>DIST_SUBDIR</tt> to avoid cluttering <tt>DISTDIR</tt>
(<tt>/usr/ports/distfiles</tt> by default) too much.
d252 1
d259 1
d262 2
a263 2
For instance, some ports may have some compilation options, and associated files
which are only required in such a case.
d274 1
d282 1
d285 1
a285 1
<tt><b>make extract</b></tt>.
d288 6
a293 6
The customary use of this variable is to customize extraction: for instance, if
some <tt>DISTFILES</tt> need some special treatment, they will be removed from
<tt>EXTRACT_ONLY</tt> and handled manually at <tt>post-extract</tt> stage.
For historic reasons, <tt><b>make extract</b></tt> does set up the working
directory first along with extracting files.
Thus, providing a <tt>pre-extract</tt> or a <tt>do-extract</tt> target is highly
d296 1
d303 1
a303 1
Extract the port with <tt><b>make extract</b></tt>.
d315 5
a319 3
apply to your port.  Many are freely redistributable but then again, quite
a few are not.  We need three questions answered to distribute ports
properly.  These are the <tt>PERMIT_*</tt> values in the <tt>Makefile</tt>.
d328 1
d330 5
a334 4
Set these values to Yes if it is permitted or to a comment string stating why
it is not.  Pay attention to any special conditions you may need to fulfill
later on.  E.g., some ports require to install a copy of the license.  We
recommend you place the license in
d336 1
d345 1
d347 5
a351 3
You can add a port configuration script named configure to a directory
named <tt>scripts/</tt>. This will be run before any configuration specified by
<tt>CONFIGURE_STYLE</tt> is run.
d353 1
a353 1
If GNU configure is used you may want to run <tt><b>./configure --help</b></tt>
d355 1
d360 1
d367 2
a368 1
Try building the port with <tt><b>make build</b></tt>.
d371 1
d375 1
d378 1
d380 2
a381 1
<tt><b>cd `make show=WRKSRC` ; cp foo/bar.c{,.orig} </b></tt>
d384 1
d386 2
a387 1
<tt><b>cd - ; make update-patches</b></tt>
d391 4
a394 2
<li>The easiest way to reset the port and test your patches is
<tt><b>make clean patch</b></tt>.
d399 3
a401 3
Begin a cycle of <tt><b>make build</b></tt>, generate a patch using
<tt><b>make update-patches</b></tt>, and
<tt><b>make clean patch</b></tt>.
d405 4
a408 3
The preferred naming is <tt>patch-FILENAME</tt> where <tt>FILENAME</tt> is the
name of the file it is patching.
(<tt><b>make update-patches</b></tt> does this automatically for you.)
d410 1
a410 1
Applying <tt>PATCHFILES</tt> is the first half of the <tt><b>make patch</b></tt>
d412 2
a413 2
It can be invoked separately as <tt><b>make distpatch</b></tt>, which is a
convenient target for porters.
d415 1
d418 1
d420 2
a421 1
Use <tt><b>make update-patches</b></tt> to generate patches.
d424 1
d429 1
d433 1
d435 1
a435 1
<b>Please</b> feed your patches back to the author of that piece of software.
d440 1
d445 1
d453 2
a454 1
To repeat issue the command <tt><b>make clean configure</b></tt>.
d493 3
a495 3
Begin a cycle of makes until the port is ready.  Patch (see above)
clean, and make until the port is generated.  Get rid of all warnings
if possible, especially security related warnings.
d501 1
a501 1
<tt><b>make patch</b></tt>.
d518 2
a519 2
<b>DON'T EVER START WITH AN INDEFINITE ARTICLE SUCH AS `a' or `an'; remove the
article altogether.</b>
d526 1
a526 1
through <tt><b>fmt -w 80</b></tt>.
d534 4
a537 3
Install the application with <tt><b>make fake</b></tt>.
Libraries should never be stripped. Executables are stripped by default;
this is governed by <tt>${INSTALL_STRIP}</tt>.
d541 1
a541 1
You can use objdump(1) --syms to determine if a binary is stripped or not.
d545 5
a549 6
<b>Check port for security holes again</b>. This is
especially important for network and setuid programs. See
<a href="#PortsSecurity">our security recommendations</a>
for that. Log interesting stuff and fixes in the
<tt>pkg/SECURITY</tt> file.  This file
should list audited potential problems, along with relevant patches,
d568 1
d571 3
a573 4
After the installation with <tt><b>make fake</b></tt> is complete,
use the developer's command <tt><b>make plist</b></tt>,
which creates or updates the file <tt>PLIST</tt> in the
<tt>pkg</tt> directory.
d575 1
d586 7
a592 8
as they've been installed by a dependency; if you added to
<tt>LIB_DEPENDS</tt> or <tt>RUN_DEPENDS</tt>, re-run
<tt><b>make plist</b></tt> to remove these.
<br><br><li>
Test the packaging with <tt><b>make package</b></tt>,
test installation of the resulting package with <tt><b>make install</b></tt>,
and test its removal with
<tt><b>make uninstall</b></tt>.
d600 7
a606 5
Verify dependencies. Peruse your logs to verify the port did detect what is
mentioned in <tt>DEPENDS</tt>, and nothing more.
Check names, particularly in the <tt><b>make configure</b></tt> stage,
for hidden dependencies (stuff that exists elsewhere in the ports tree and might
be detected if the user installs some other ports first).
d609 18
a626 17
Run <tt><b>make port-lib-depends-check</b></tt>
and add every <tt>LIB_DEPENDS</tt> or <tt>WANTLIB</tt> annotation
that is needed until it runs cleanly.
You may want to read
<a href="#PortsUpdate">the update guidelines</a>
to understand why this is so important.
<br><br><li>
Check for regression tests, and whether they run cleanly. Set
<tt>NO_TEST=Yes</tt> if a port has no test infrastructure.
If dependencies are required to run the tests, but not to build the
port, list them in <tt>TEST_DEPENDS</tt>.
Please note: do not set <tt>NO_TEST</tt> if a port has an empty
regression test infrastructure.
<br><br><li>
Test that <tt><b>make clean</b></tt> succeeds.
Sometimes the <tt><b>make fake</b></tt> stage creates files in the build
directory which will cause this to fail.
d630 1
d633 6
a638 4
description, the homepage (if any), and a short
note asking for comments and testing.  Make sure to attach the port/patch to
this email, or mention an URL where it can be found,
and send it out (mailinglist archives just contain the mails itself).
d641 1
d645 1
d666 3
a668 4
<tt>/usr/ports/infrastructure/db/user.list</tt>
since the port was created.
We normally use <tt><b>cvs import</b></tt> for a new port,
rather than adding a zillion (or a dozen) files individually.
d670 4
a673 2
about that! :-) If you make changes to a specific file (edit, then
<tt><b>cvs commit</b></tt>), it will be 1.2, and that will be used.
d676 2
a677 3
From that point on <tt><b>cvs add</b></tt> and <tt><b>cvs rm</b></tt> are
typically used to add or remove files, and the normal edit-&gt;commit cycle for
changes.
d689 1
d693 1
d698 1
d702 1
d705 1
a705 1
'vendor release tag'.
d708 1
a716 1
ian@@cvs.openbsd.org's password: <tt><b>(not shown, obviously)</b></tt>
a725 1
$
d727 1
a727 1
<br>
d742 5
a746 3
Maintain the port!  As time goes by, problems may arise, or new versions
of the software may be released. You should strive to keep your port up
to date.  In other words - iterate, test, test, iterate...
d749 5
a753 4
When updating a port, remember to handle dependencies! You shouldn't break any
port that depends on yours. In case of problems, communicate with the
maintainers of such ports. Likewise, be alert for dependency updates, and
check that the maintainer did their job.
d756 1
a756 3
Thank you for supporting the OpenBSD "ports" process!

<h2 id="PortsComplex">2.3 - Handling Complex Situations</h2>
d761 1
a761 1
<h3 id="Know">2.3.1 - Know the software</h3>
d774 5
a778 3
Recompile your port with various options.  Install extra dependencies. Make
sure your port detects them correctly. Add supplementary patches to ensure
compilation. Test the result, and verify extra stuff does work.
d781 5
a785 5
has not yet been ported. It is highly recommended to explicitly disable
those options.  Failure to do that breaks bulk builds all the time: people
port new software and import it, and soon after, old ports stop building
because they detect the dependency, try to use it, and fail to build or
package.
d795 1
d799 1
a799 1
<h3 id="Figure">2.3.2 - Figure out important options</h3>
d801 3
a803 2
You won't care about some options.  It makes no sense to disable some stuff if
it always works, and if the dependencies are quite small.
d810 8
a817 7
Considering all possible options, you should be left with a
much smaller set of options for your port, mostly depending on what packages
are needed to run the software.  For now, do not worry about build
dependencies.  Remember that the OpenBSD ports system is focused on the end
user, and the end user will want to install binary packages, so it doesn't
matter if you need a huge piece of software to build your port if it doesn't
show up as a library or runtime dependency.
d819 2
a820 1
<h3 id="Ideal">2.3.3 - The ideal case: <tt>MULTI_PACKAGES</tt> and <tt>PSEUDO_FLAVORS</tt></h3>
d823 1
a825 1

d828 1
d830 3
a832 2
dependencies, and not affect other stuff. This is a fairly common scenario
for plugin frameworks: you add one library, you end up with a new plugin.
d836 1
d841 3
a843 2
<tt>MULTI_PACKAGES=-s1 -s2</tt> all stuff relevant to the package will exist in
two variants:
d851 1
d856 1
d861 1
a861 1
It is usually time to check that your multi-packaging "works", and that
d864 1
d866 3
a868 2
Assuming everything works, you're mostly done. Just pick reasonable names for
the various packages, and fill in the comments and descriptions.
d870 1
d872 2
a873 1
But wait. What about the build, you say?
d875 3
a877 3
Most packages are built by the OpenBSD team using special build
runs (known as bulk builds) where a developer just builds all possible
packages on a dedicated machine (or several, for slow architectures).
d882 1
d888 4
a891 3
In fact, the biggest difference is a functional difference:
a pseudo flavor should only affect the set of packages that get built, but
it is never allowed to modify the actual package contents.
d931 1
a931 1
<h3 id="Inter">2.3.4 - Interdependencies between subpackages</h3>
d939 1
a940 1

d949 1
a956 1

d971 1
a971 1
You would write
a976 2
instead.
<p>
d986 1
a986 1
<h3 id="True">2.3.5 - True <tt>FLAVORS</tt> and <tt>PKGNAMES</tt></h3>
d991 2
a992 2
Note that package naming is mostly automatic: the <tt>PKGNAME</tt> will have an
extension built by appending the specified flavors to its name.
a1003 1

a1009 1

d1011 2
a1012 1
subpackage explicitly. E.g., something like this:
d1041 1
d1048 1
d1053 6
a1058 4
By default, any flavor will match. If only specific flavors are desired, you
must include them in your specification, e.g., <tt>stem-*-flavor</tt>.
If some flavors are unwanted, you can remove them from matching packages, e.g.,
<tt>stem-*-!flavor</tt>.
d1063 1
a1063 1
<h2 id="PortsUpdate">2.4 - Updating ports</h2>
d1065 2
a1066 2
<p>Since OpenBSD 3.8, pkg_add(1) can update packages. So maintainers have to
be aware of one simple fact: update is not instantaneous.
d1068 2
a1069 2
<tt><b>pkg_add -u</b></tt>, the system will replace each package with a new
version, one package at a time.
d1071 1
d1073 2
a1075 2
<p>There are basically two update models of which maintainers must be
aware.
d1077 19
a1095 14
<ul>
<li>Some users follow current on a loose basis. They update their packages
every few days/every few weeks. Either all packages, or only some selected
packages. The update mechanism should work for them: it can force them to
update some specific packages, or to install some new stuff, but it should
not fail silently.  Micro-updates must be tested.  These users will most
often be able to cope with small changes, like program name changes, or
configuration adjustments.
<li>Some users update every six months with a new release. They also will
download stable updates (security and critical updates). During six months,
a large part of the ports tree changes.   These users do not care about
individual software changes. They just want a system that works.  Changing
binary names is completely unfriendly to these users.  Tweaking hundreds
of configuration files will be a major pain for them.
d1100 8
a1107 8
<p>You should note that part of the update process, especially the
macroscopic changes for users who update every six months, is not yet
automated.  The global update mechanism is still a work in progress, and
pkg_add will be able to cope with more issues in the future.
As of now, you should focus on making sure the system updates
correctly, one port at a time, and that one port's update takes other ports
into account, as far as conflicts and other issues are concerned.

d1116 2
a1117 1
<h3 id="UpdateChecklist">2.4.1 - Update checklist</h3>
d1119 43
a1161 27
<ul>
  <li>Make sure the software authors are aware of your tweaks to make it
  run on OpenBSD. You must endeavor to get OpenBSD patches into the next
  release of the software. Otherwise, you can be prepared to rewrite most
  of your patches from scratch every release.
  <li>Make sure the software authors understand version numbering. If the
  distfiles do not contain any version numbers, or if they reference
  current stuff, communicate with the authors so that you can get some
  permanent urls.
  <li>Document work-arounds. This will help you remember to check whether
  they are still necessary when you try to update a port.
  <li>Document dependencies. Especially the stuff you don't use. Some ports
  can use external software that may not be available at the time of porting.
  Make sure you do not pick it up, and document it, so that you can update
  your port when this software becomes available later.
  <li>If the port uses libtool, copy its log from the file
  <tt>${WRKBUILD}/shared_libs.log</tt> verbatim as a basis for your
  <tt>SHARED_LIBS</tt> setup.
  This will help during updates.
  <li>Use <tt>PLIST_DB</tt> and build a database of packing-lists.
  This is useful to find out about forgotten package name bumps, and also
  to check for conflicts with older packages.
  <li>Make sure dependencies stay as loose as they can be.
  By default, <tt>RUN_</tt> and <tt>LIB_DEPENDS</tt> will be satisfied by any
  version of a package.
  Do not insist on a given version unless you have to. Use minimal versions
  whenever possible.
d1164 1
d1166 28
a1193 18
<ul>
  <li>Each port update needs a package name bump. Otherwise, the update
  mechanism for binary packages won't work. Anything that affects the binary
  package implies a bump. This includes <tt>HOMEPAGE</tt>,
  <tt>MAINTAINER</tt> or description changes.
  <li>Version numbers always go forward. If something unexpected happens,
  and you have to go back, or if the numbering changes completely, so that
  the version number appears to go backwards, you must use <tt>EPOCH</tt> 
  to make sure pkg_add(1) sees the package as a newer package.
  <li>If the package does not build, no bump is needed: changes to restore
  a port to working order after it got broken do not warrant bumps.
  <li>Changes to make sure a port does not pick/does pick an external
  dependency warrant a bump.
  <li>Changes in dependencies generally do not affect a port version number.
  The package system uses a signature mechanism such that a binary package
  is fully identified by its package names, plus the dependencies against
  which it was built, plus the version numbers of all shared libraries it
  contains.
a1196 1
<ul>
d1198 2
a1199 2
  <li>run <tt><b>make patch</b></tt> to have an initial copy of the port before
  the update.
d1201 1
d1203 39
a1241 27
<ul>
  <li>Edit the port's <tt>Makefile</tt> to grab the new version, run
  <tt><b>make makesum</b></tt> and <tt><b>make patch</b></tt> as a starting
  basis.
  <li>Once you've fixed patches that failed, run a full diff between the old
  and the new version to figure out exactly what changed.  Take notes, be
  prepared to revisit things later.
  <li>Do whatever porting work is necessary to get the new version to run
  under OpenBSD, adjust dependencies, change package contents, etc.
  <li>Double check shared library versions. For libtool-based ports, you have
  the <tt>shared_libs.log</tt> to check whether the software authors did
  significant changes.
  <i>Note well that this is not enough.</i> Most software authors
  do not really understand shared library issues. You have to read the full
  diff between the old and the new version, and bump library versions
  accordingly.  When in doubt, bump the major version.
  <li>Be aware of conflicts with already built packages. For simple
  updates, nothing needs to be done. If you split a package into several
  subpackages, make sure the subpackages have proper conflict annotations:
  they should usually conflict with the `old' single package.
  <li>Help the user.
  If some specific steps must be taken beyond <tt><b>pkg_add -u</b></tt>, make
  sure they are visible in the package.
  When your packaging policy changes, document it in the package description.
  For instance, if you move the documentation into a separate package for
  space constraints, the main package description should mention that the
  documentation is now available as a separate package.
d1245 24
a1268 1
<h2 id="PortsPolicy">2.5 - OpenBSD Porting Policy</h2>
d1270 15
a1284 25
  <ul>
   <li>OpenBSD does NOT use <tt>/usr/local/etc/rc.d</tt>.<br>
       <tt>/usr/local</tt> is often shared between several machines
         thanks to NFS.  For this reason, configuration files that are specific
         to a given machine can't be stored under <tt>/usr/local</tt>,
         <tt>/etc</tt> is the central repository for per machine
         configuration files.  Moreover, OpenBSD policy is to never update
         files under <tt>/etc</tt> automatically.  Ports that need some
         specific boot setup should advise the administrator about what to do
         instead of blindly installing files.
   <li>OpenBSD does NOT compress man pages.
   <li>OpenBSD does NOT require <tt>-lcrypt</tt>, <tt>-ldl</tt>, or <tt>-lrt</tt>.<br>
       The functions provided by these libraries are part of <tt>libc</tt>.
       The <tt>crypt()</tt> function does not support DES, only bcrypt.
   <li>OpenBSD has a separate namespace for users and groups created by ports.
       See <tt>/usr/ports/infrastructure/db/user.list</tt> for details.
   <li>OpenBSD is strongly security-oriented. You should read and understand
       this page's <a href="#PortsSecurity">security section</a>.
   <li>Be sure to add the <tt>&#36;OpenBSD&#36;</tt> CVS tag to
       the Makefile. The account name, version number, etc., will
       be filled in automatically by CVS during commit.
   <li>The goal is to get all ported applications to support OpenBSD.  To
       achieve this goal you <b>must</b> feed any OpenBSD patches
       back to the application maintainer.
  </ul>
d1286 1
a1286 1
<h2 id="PortsSecurity">2.6 - Security Recommendations</h2>
d1288 3
a1290 4
  There are many security problems to worry about. If
       you are not absolutely sure of what you are doing please request
       help from the <a href="mailto:ports@@openbsd.org">ports</a> mailing
       list.
d1292 3
a1294 3
  <ul>
   <li>Do <i>not</i> use alpha or beta code when preparing a port.  Use the
       latest regular or patch release.
d1296 138
a1433 117
   <li>Any software to be installed as a server should be scanned
       for buffer overflows, especially unsafe use of
       <tt>strcat/strcpy/strcmp/sprintf</tt>.  In general,
       <tt>sprintf</tt> should be replaced with <tt>snprintf</tt>.

   <li>Never use filenames instead of true security. There are numerous race
       conditions where you don't have proper control. For instance, an attacker
       who already has user privileges on your machines may replace files in
       <tt>/tmp</tt> with symbolic links to more strategic files, such as
       <tt>/etc/master.passwd</tt>.

   <li>For instance, both <tt>fopen</tt> and <tt>freopen</tt>
       <b>create a new file or open an existing file</b> for
       writing. An attacker may create a symbolic link from
       <tt>/etc/master.passwd</tt> to <tt>/tmp/addrpool_dump</tt>. The
       instant you open it, your password file is hosed. Yes, even with
       an <tt>unlink</tt> right before. You only narrow the window
       of opportunity.  Use <tt>open</tt> with
       <tt>O_CREAT|O_EXCL</tt> and <tt>fdopen</tt> instead.

   <li>Another very common problem is the <tt>mktemp</tt>
       function. Heed the warnings of the bsd linker about its uses.
       <b>These must be fixed</b>.
       This is not quite as simple as <tt>s/mktemp/mkstemp/g</tt>.  <br>
       Refer to
       <a href="http://man.openbsd.org/mktemp.3">mktemp(3)</a> for more information.
       Correct code using <tt>mkstemp</tt> includes the source to
       <tt><b>ed</b></tt> or <tt><b>mail</b></tt>.
       A rare instance of code that uses <tt>mktemp</tt> correctly
       can be found in the <tt>rsync</tt> port.

   <li>Just because you can read it doesn't mean you should.
       A well-known hole of this nature was the <tt><b>startx</b></tt> problem.
       As a setuid program, you could launch startx with any file as a script.
       If the file was not a valid shell script, a syntax error message would
       follow, along with the first line of the offending file, without any
       further permission check.
       Pretty handy to grab the first line of a shadow passwd file, considering
       these often start with root entry.   Do not open your file, and then do
       an <tt>fstat</tt> on the open descriptor to check if you should have
       been able to open it (or the attacker will play with /dev/rst0 and rewind
       your tape) -- open it with the correct uid/gid/grouplist set.

   <li>Don't use anything that forks a shell in setuid programs before dropping
       your privileges. This includes <tt>popen</tt> and
       <tt>system</tt>.
       Use <tt>fork</tt>, <tt>pipe</tt> and <tt>execve</tt> instead.

   <li>Pass open descriptors instead of filenames to other programs to
       avoid race conditions.  Even if a program does not accept file
       descriptors, you can still use <tt>/dev/fd/0</tt>.

   <li>Access rights are attached to file descriptors. If you need setuid rights
       to open a file, open that file, then drop your privileges. You can still
       access the open descriptor, but you have less to worry about. This is
       double-edged: even after dropping privileges, you should still watch out
       for those descriptors.

   <li>Avoid root setuid as much as you can. Basically, root can do anything,
       but root rights are very rarely needed, except maybe to create
       socket ports with a number under 1024.  It is arguably better to
       keep that under <tt>inetd</tt>
       control and just add the relevant entries to <tt>inetd.conf</tt>.
       You must know the appropriate magic for writing daemons to achieve that.
       It could be argued that you have no business writing setuid programs
       if you don't know how to do that.

   <li>Use setgid instead of setuid.  Apart from those specific files needed
       by setgid programs, most files are not group-writable. Hence, a
       security problem in a setgid program won't compromise your system as
       much: with only group rights, the worst an intruder will be able to
       do is hack a games score table or some such.
       See the <tt>xkobo</tt> port for an instance of such a change.

   <li>Don't trust group-writable files.  Even though they are audited,
       setgid programs are not perceived as important potential security
       holes. Hence stuff they can tamper with shouldn't be considered
       sensitive information.

   <li>Don't trust your environment ! This involves simple things such as
       your <tt>PATH</tt> (never use <tt>system</tt> with an
       unqualified name, avoid <tt>execvp</tt>), but also more subtle
       items such as your locale, timezone, termcap, and so on.
       Be aware of transitivity: even though you're taking full precautions,
       programs you call directly won't necessarily. <b>Never</b>
       use <tt>system</tt> in privileged programs, build your command
       line, a controlled environment, and call <tt>execve</tt> directly.
       The <tt>perlsec</tt> man page is a good tutorial on such problems.

   <li>Never use setuid shell-scripts.  These are inherently insecure.
       Wrap them into some C code that ensures a proper environment.
       On the other hand, OpenBSD features secure perl scripts.

   <li>Beware the dynamic loader. If you are running setuid, it will only
       use trusted libraries that were scanned with ldconfig.
       Setgid is not enough.

   <li>Dynamic libraries are tricky. C++ code sets a similar problem.
       Basically, libraries may take some action based upon your environment
       before your main program even gets to check its setuid status.
       OpenBSD <tt>issetugid</tt> addresses this problem, from the
       library writer point of view.  Don't try to port libraries unless you
       understand this issue thoroughly.
   <li>On OpenBSD,
       <a href="http://man.openbsd.org/rand.3">rand(3)</a>, 
       <a href="http://man.openbsd.org/random.3">random(3)</a>, and the 
       <a href="http://man.openbsd.org/drand48">drand48(3)</a>
       family return non-deterministic random numbers by default, any
       specified seed value is ignored by the associated seed function,
       and <tt>arc4random</tt> is used instead.

       If the determinstic (i.e: repeatable) behaviour must be preserved
       use the OpenBSD extensions:
       <tt>srand_deterministic</tt>, <tt>srandom_deterministic</tt>,
       <tt>srand48_deterministic</tt>, <tt>seed48_deterministic</tt>,
       and <tt>lcong48_deterministic</tt>.
  </ul>
d1435 1
a1435 1
<h2 id="PortsGeneric">2.7 - Generic Porting Hints</h2>
d1437 3
a1439 3
  <ul>
   <li><tt>__OpenBSD__</tt> should be used sparingly, if at all.
       Constructs that look like
d1445 16
a1460 11
       are often inappropriate. Don't add blindly <tt>__OpenBSD__</tt>
       to it. Instead, try to figure out what's going on, and what actual
       feature is needed.   Manual pages are often useful, as they include
       historic comments, stating when a particular feature was incorporated
       into BSD.  Checking the numeric value of <tt>BSD</tt> against known
       releases is often the right way. See
       <a href="http://www.netbsd.org/Documentation/pkgsrc/">The NetBSD pkgsrc guide</a>
       for more information.
   <li>Defining <tt>BSD</tt> is a bad idea. Try to include <tt>sys/param.h</tt>.
       This not only defines <tt>BSD</tt>, it also gives it a proper value.
       The right code fragment should look like:
d1468 73
a1540 64
   <li>Test for features, not for specific OSes. In the long run, it is much
       better to test whether <tt>tcgetattr</tt> works than whether
       you're running under BSD 4.3 or later, or SystemVR4.  These kind of
       tests just confuse the issue. The way to go about it is, for instance,
       to test for one particular system, set up a slew of
       <tt>HAVE_TCGETATTR</tt> defines, then proceed to the next system.
       This technique separates features tests from specific OSes.
       In a hurry, another porter can just add the whole set of
       <tt>-DHAVE_XXX</tt> defines to the Makefile.  One may also write
       or add to a configure script to check for that feature and add it
       automatically.  As an example not to follow, check nethack 3.2.2
       source: it assumes loads of things based on the system type.  Most
       of these assumptions are obsolete and no longer reflect reality:
      POSIX functions are more useful than older BSD versus SystemV
       differences, to the point that some traditional bsd functions are
       now only supported through compatibility libraries.

   <li>Avoid include files that include other includes that... First, because
       this is inefficient. Your project will end up including a file that
       includes everything.  Also, because it makes some problems difficult
       to fix. It becomes harder to <i>not</i> include one particular file
       at a given point.

   <li>Avoid bizarre macro tricks.  Undefining a macro that was defined by a
       header file is a bad idea.  Defining macros to get some specific behavior
       from an include file is also a bad idea: compilation modes should be
       global.  If you want POSIX behavior, say so, and
       <tt>#define POSIX_C_SOURCE</tt>
       throughout the whole project, not when you feel like it.

   <li>Don't ever write system function prototypes.  All modern systems,
       OpenBSD included, have a standard location for these prototypes. Likely
       places include <tt>unistd.h</tt>, <tt>fcntl.h</tt> or
       <tt>termios.h</tt>.
       The man page frequently states where the prototype can be found.
       You might need another slew of <tt>HAVE_XXX</tt> macros to
       procure the right file.  Don't worry about including the same file
       twice, include files have guards that prevent all kinds of nastiness.<br>
       If some broken system needs you to write the prototype, don't impose
       on all other systems. Roll-your-own prototypes will break because they
       may use types that are equivalent on your system, but are not portable
       to other systems (<tt>unsigned long</tt> instead of
       <tt>size_t</tt>), or get some <tt>const</tt> status wrong.
       Also, some compilers, such as OpenBSD's own gcc,
       are able to do a better job with some very frequent functions such as
       <tt>strlen</tt> if you include the right header file.

   <li>Carefully check the build log for any compiler warnings.
       <ul><li>
           <tt>implicit declaration of function foo()</tt>
           indicates that a function prototype is missing.
           This means that the compiler will assume the return type
           to be an integer.
           Where the function actually returns a pointer, on 64-bit
           platforms it will be truncated, usually causing a segmentation
           fault.
       </ul>

   <li>Don't use the name of a standard system function for anything else.
       If you want to write your own function, give it its own name, and
       call that function everywhere.  If you wish to revert to the
       default system function, you just need to comment your code out,
       and define your own name to the system function. Don't do it the
       other way round. Code should look like this
d1566 1
a1566 1
<h2 id="PortsOther">2.8 - Other Helpful Hints</h2>
d1568 17
a1584 54
  <ul>
   <li>Recent versions of <tt>bsd.port.mk</tt> set the installers
       path. Specifically, they set <tt>/usr/bin</tt> and
       <tt>/bin</tt> to be searched <i>before</i>
       <tt>/usr/local/bin</tt> and <tt>/usr/X11R6/bin</tt>.
   <li>It is OK to rely on a feature that appeared in a recent version of
       <tt>bsd.port.mk</tt>, as people are supposed to update their
       whole ports tree, including <tt>bsd.port.mk</tt>.
       NEED_VERSION is now obsolete.
   <li>Prefer using <tt>update-plist</tt> to generate and update
       packing-lists instead of doing things manually.
       You can comment unwanted lines out.
       <tt>update-plist</tt> can detect most file types and copy most
       extra annotations correctly.
   <li>Add <tt>USE_SYSTRACE=Yes</tt> to <tt>/etc/mk.conf</tt> to
       detect misbehaving scripts, makefiles, etc.
   <li>In OpenBSD <tt>curses.h/libcurses/libtermlib</tt> are the
       ``new curses''.  Change:<br>
       <tt>ncurses.h ==&gt; curses.h</tt><br>
       ``old (BSD) curses'' is available by defining
       <tt>_USE_OLD_CURSES_</tt>
       before including <tt>curses.h</tt> (usually in a Makefile) and
       linking with <tt>-locurses</tt>.
   <li>In OpenBSD, terminal discipline has been upgraded from the older BSD
       <tt>sgtty</tt> to the newer POSIX <tt>tcgetattr</tt> family.
       Avoid the older style in new code.  Some code may define
       <tt>tcgetattr</tt> to be a synonym for the older
       <tt>sgtty</tt>, but this is at best a stopgap measure on OpenBSD.
       The <tt>xterm</tt> source code is a very good example of
       what not to do.  Try to get your system functionality right: you
       want a type that remembers the state of your terminal
       (possible typedef), you want a function that extracts the current
       state, and a function that sets the new state.
       Functions that modify this state are more difficult, as they tend
       to vary depending upon the system.  Also, don't forget that you will
       have to handle cases where you are not connected to a terminal,
       and that you need to handle signals: not only termination, but
       also background (<tt>SIGTSTP</tt>). You should always leave
       the terminal in a sane state.  Do your tests under an older shell,
       such as sh, which does not reset the terminal in any way at
       program's termination.
   <li>The newer termcap/terminfo and curses, as included with OpenBSD,
       include standard sequences for controlling color terminals.  You
       should use these if possible, reverting to standard ANSI color
       sequences on other systems.  However, some terminal descriptions
       have not been updated yet, and you may need to be able to specify
       these sequences manually.  This is the way vim handles it.  This is
       not strictly necessary. Except for privileged programs, it is
       generally possible to override a termcap definition through the
       <tt>TERMCAP</tt> variable and get it to work properly.
   <li>Signal semantics are tricky, and vary from one system to another.
       Use <tt>sigaction</tt> to ensure a specific semantics, along
       with other system calls referenced in the corresponding  manpage.
  </ul>
d1586 3
a1588 1
<h2 id="PortsAvail">2.9 - Additional Information</h2>
d1590 46
a1635 26
  <ul>
   <li>The man page
   <a href="http://man.openbsd.org/bsd.port.mk.5">bsd.port.mk(5)</a>.
       This documents the ports infrastructure makefile that is
       included at the end of each individual port makefile.
       There are still a few comments at the start of
       the file itself, but most of the useful information is now
       documented.
   <li>The man pages
   <a href="http://man.openbsd.org/packages-specs">packages-specs(7)</a>
       and
   <a href="http://man.openbsd.org/library-specs">library-specs(7)</a>.
       These explain the exact syntax of package and library dependencies,
       respectively.
   <li>The man page
   <a href="http://man.openbsd.org/port-modules">port-modules(5)</a>.
       This documents the different port modules which are used throughout
       the ports infrastructure, e.g. cpan, java, python, and so on.
   <li>The
       <a href="http://www.netbsd.org/Documentation/software/packages.html">
       NetBSD Package System</a> documentation.  This document describes
       NetBSD's version of the FreeBSD ports system and is quite helpful.
   <li>The
       <a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/porters-handbook/index.html">FreeBSD
       Porter's Handbook</a>.  This is the FreeBSD porting bible.
  </ul>
d1637 1
a1637 1
<p>
d1639 19
a1657 5
<font color= "#0000e0">
<a href="index.html">[Handbook Index]</a>
<a href="../faq15.html">[To Section 1 - The OpenBSD Ports System]</a>
<a href="specialtopics.html">[To Section 3 - Special Porting Topics]</a>
</font>
a1659 5
<hr>
<a href="../index.html"><img height="24" width="24" src="../../images/back.gif" border="0" alt="[back]"></a>
<br>
<small>$OpenBSD: guide.html,v 1.53 2016/03/29 01:27:39 tb Exp $</small>

@


1.53
log
@new openbsd faq style. joint with tj and validator.w3.org
@
text
@d210 1
a210 1
<a href="http://man.openbsd.org/?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>
d537 1
a537 2
<a href="http://man.openbsd.org/?sektion=1&amp;query=pkg_create"
>pkg_create(1)</a> manual.
d550 2
a551 4
<a href="http://man.openbsd.org/?sektion=1&amp;query=pkg_add"
>pkg_add(1)</a> and
<a href="http://man.openbsd.org/?sektion=1&amp;query=pkg_delete"
>pkg_delete(1)</a> directly,
d1188 1
a1188 2
       <a href="http://man.openbsd.org/?sektion=3&amp;query=mktemp">
       mktemp(3)</a> for more information.
d1267 3
a1269 6
       <a href="http://man.openbsd.org/?sektion=3&amp;query=rand">
       rand(3)</a>, 
       <a href="http://man.openbsd.org/?sektion=3&amp;query=random">
       random(3)</a>, and the 
       <a href="http://man.openbsd.org/?sektion=3&amp;query=drand48">
       drand48(3)</a>
d1459 1
a1459 1
   <a href="http://man.openbsd.org/?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>.
d1466 1
a1466 1
   <a href="http://man.openbsd.org/?query=packages-specs&amp;sektion=7">packages-specs(7)</a>
d1468 1
a1468 1
   <a href="http://man.openbsd.org/?query=library-specs&amp;sektion=7">library-specs(7)</a>.
d1472 1
a1472 1
   <a href="http://man.openbsd.org/?query=port-modules&amp;sektion=5">port-modules(5)</a>.
d1496 1
a1496 1
<small>$OpenBSD: guide.html,v 1.52 2016/03/27 19:52:09 sthen Exp $</small>
@


1.52
log
@add a small sprinkling of css to improve readability in the faq, ok tj@@ tb@@
@
text
@d33 1
d35 4
a38 2
<img alt="[OpenBSD]" height=30 width=141 src="../../images/smalltitle.gif" border="0">
</a>
d46 1
a46 1
<h1><font color="#e00000">2 - OpenBSD Porting Guide</font></h1><hr>
d1503 1
a1503 1
<small>$OpenBSD: guide.html,v 1.51 2016/03/22 20:14:03 jca Exp $</small>
@


1.51
log
@Drop paragraph about NO_SHARED_LIBS and CONFIGURE_SHARED.
@
text
@d7 2
d1500 1
a1500 1
<small>$OpenBSD: guide.html,v 1.50 2016/03/22 20:09:26 jca Exp $</small>
@


1.50
log
@Kill PFRAG.shared bits; from Daniel Jakots
@
text
@a1406 5
   <li>Do <i>NOT</i> generate shared libraries if
       <tt>${NO_SHARED_LIBS}</tt> is set to yes (beware, it can be defined
       only after inclusion of <tt>bsd.port.mk</tt>). If your port has
       a GNU configure simply add the line
       <tt>CONFIGURE_ARGS += ${CONFIGURE_SHARED}</tt> to the Makefile.
d1498 1
a1498 1
<small>$OpenBSD: guide.html,v 1.49 2016/03/22 11:01:15 sthen Exp $</small>
@


1.49
log
@fix URIs (a couple of stragglers), the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@a533 16
<p>
Ports that install shared libraries may have another file called
<tt>PFRAG.shared</tt>.
<ul><li>
<tt>PLIST</tt> describes the files being independent of whether the architecture
supports shared libraries or not.
<li>
<tt>PFRAG.shared</tt> describes only the files being additionally installed on
those architectures that support shared libraries.
<li>
<tt>PFRAG.noshared</tt> describes only the files being additionally installed on
architectures that do not support shared libraries.
</ul>
If a port will <b>only</b> work on an architecture supporting shared
libraries, for example if it relies on loading modules at runtime with
dlopen(), set <tt>SHARED_ONLY=yes</tt>.
d1503 1
a1503 1
<small>$OpenBSD: guide.html,v 1.48 2016/03/22 10:56:56 sthen Exp $</small>
@


1.48
log
@fix URIs, the / before querystring is not optional,
if not fixed up by browsers the server returns 400 Bad Request.
@
text
@d532 1
a532 1
<a href="http://man.openbsd.org?sektion=1&amp;query=pkg_create"
d562 1
a562 1
<a href="http://man.openbsd.org?sektion=1&amp;query=pkg_add"
d564 1
a564 1
<a href="http://man.openbsd.org?sektion=1&amp;query=pkg_delete"
d1202 1
a1202 1
       <a href="http://man.openbsd.org?sektion=3&amp;query=mktemp">
d1282 1
a1282 1
       <a href="http://man.openbsd.org?sektion=3&amp;query=rand">
d1284 1
a1284 1
       <a href="http://man.openbsd.org?sektion=3&amp;query=random">
d1286 1
a1286 1
       <a href="http://man.openbsd.org?sektion=3&amp;query=drand48">
d1519 1
a1519 1
<small>$OpenBSD: guide.html,v 1.47 2016/03/21 05:46:21 beck Exp $</small>
@


1.47
log
@change http://www.openbsd.org/cgi-bin/man.cgi to be http://man.openbsd.org
this points stuff to the new place and gets us ready to deprecate the old
place we did this.
@
text
@d205 1
a205 1
<a href="http://man.openbsd.org?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>
d1482 1
a1482 1
   <a href="http://man.openbsd.org?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>.
d1489 1
a1489 1
   <a href="http://man.openbsd.org?query=packages-specs&amp;sektion=7">packages-specs(7)</a>
d1491 1
a1491 1
   <a href="http://man.openbsd.org?query=library-specs&amp;sektion=7">library-specs(7)</a>.
d1495 1
a1495 1
   <a href="http://man.openbsd.org?query=port-modules&amp;sektion=5">port-modules(5)</a>.
d1519 1
a1519 1
<small>$OpenBSD: guide.html,v 1.46 2015/12/21 16:35:48 brynet Exp $</small>
@


1.46
log
@forgot the section numbers for man page links.
@
text
@d205 1
a205 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>
d532 1
a532 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=1&amp;query=pkg_create"
d562 1
a562 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=1&amp;query=pkg_add"
d564 1
a564 1
<a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=1&amp;query=pkg_delete"
d1202 1
a1202 1
       <a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=3&amp;query=mktemp">
d1282 1
a1282 1
       <a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=3&amp;query=rand">
d1284 1
a1284 1
       <a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=3&amp;query=random">
d1286 1
a1286 1
       <a href="http://www.openbsd.org/cgi-bin/man.cgi?sektion=3&amp;query=drand48">
d1482 1
a1482 1
   <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=bsd.port.mk&amp;sektion=5">bsd.port.mk(5)</a>.
d1489 1
a1489 1
   <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=packages-specs&amp;sektion=7">packages-specs(7)</a>
d1491 1
a1491 1
   <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=library-specs&amp;sektion=7">library-specs(7)</a>.
d1495 1
a1495 1
   <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=port-modules&amp;sektion=5">port-modules(5)</a>.
d1519 1
a1519 1
<small>$OpenBSD: guide.html,v 1.45 2015/12/21 16:31:28 brynet Exp $</small>
@


1.45
log
@Mention our non-deterministic rand(3)/random(3)/drand48(3) in the
porters guide.

ok bentley@@, deraadt@@
@
text
@d1283 1
a1283 1
       rand</a>, 
d1285 1
a1285 1
       random</a>, and the 
d1287 1
a1287 1
       drand48</a>
d1519 1
a1519 1
<small>$OpenBSD: guide.html,v 1.44 2015/11/25 11:15:35 sthen Exp $</small>
@


1.44
log
@As noticed by Jan Stary, the porter's guide said that OpenBSD doesn't have
-lcrypt because DES crypt is in libc.

I think this is just meant to tell people that if some s/w is trying to
use -lcrypt it can just be removed from linker flags. Same applies to
librt / libdl so adjust the text to say "the functions provided by.."
and mention those libs too.

Retain some mention of DES in that "The <tt>crypt()</tt> function does
not support DES, only bcrypt."
@
text
@d1281 16
d1519 1
a1519 1
<small>$OpenBSD: guide.html,v 1.42 2015/11/23 08:49:06 sthen Exp $</small>
@


1.43
log
@No need to leave a Makefile cvs tag when importing a port from another
system - this doesn't happen much anyway, and isn't particularly useful
to have cluttering Makefile, just mention it in commit log.

Mention that people don't need to fill in the account name etc in the
rcs tag.
@
text
@d1151 3
a1153 2
   <li>OpenBSD does NOT require <tt>-lcrypt</tt>.<br>
       DES encryption is part of the standard <tt>libc</tt>.
@


1.42
log
@- not all ports that install shared libraries will have PFRAG.shared;
s/will/may/.

- mention SHARED_ONLY

- tweak wording about re-running 'make plist' to remove common dirs that
come from a dependency

- mention the need for an explicit OK for ports imports
@
text
@d1158 2
a1159 2
       the Makefile.  If importing a port from another system be sure to
       leave their tag in the Makefile, too.
d1502 1
a1502 1
<small>$OpenBSD: guide.html,v 1.41 2015/11/23 08:32:33 sthen Exp $</small>
@


1.41
log
@Replace github MASTER_SITES example with sourceforge (including the
${MASTER_SITE_SUNSITE} change that was missed in previous commit).

github ports are a special case, add a few lines explaining them.
@
text
@d535 1
a535 1
Ports that install shared libraries will have another file called
d547 3
d552 4
a555 4
If you added to <tt>LIB_DEPENDS</tt> or <tt>RUN_DEPENDS</tt>,
Re-run <tt><b>make plist</b></tt>.
It is possible some directories do not need to be in the <tt>PLIST</tt>, as
they've been installed by a dependency.
d625 1
d1502 1
a1502 1
<small>$OpenBSD: guide.html,v 1.40 2015/11/23 03:15:50 deraadt Exp $</small>
@


1.40
log
@get rid of some duplicate content; from TJ
@
text
@d184 3
a186 2
If your ports are available over large public mirrors such as GNU, GitHub, or
CPAN, we have already provided a list of sites for your use in
d189 1
a189 1
<tt>${MASTER_SITE_SUNSITE}</tt>, etc.
d193 23
d1498 1
a1498 1
<small>$OpenBSD: guide.html,v 1.39 2015/11/10 20:32:58 sthen Exp $</small>
@


1.39
log
@Since file(1) no longer tells you if an object has been stripped, switch
the ports FAQ text to use "objdump --syms" instead. From Adam Wolk.
@
text
@d37 1
a37 1
<a href="ports.html">[To Section 1 - The OpenBSD Ports System]</a>
d55 1
a55 1
  <li><a href="#PortsUpdate"      >2.4 - Updating ports</a>
d78 1
a78 1
   information appears incorrect tell them.  If you had to jump through
d86 1
a86 1
   First look at the porting information on this page.
d95 1
a95 1
   its URL to <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>
d100 1
a100 1
   It is quite okay to port software, and let other people handle it
d122 1
a122 1
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org.</a>
d138 1
a138 1
Check out a copy of the ports tree from cvs.
d140 1
a140 1
<a href="../../anoncvs.html">anonymous cvs page</a>.
d159 2
a160 2
Fill in <tt>DISTNAME</tt> which is the name of the file minus the extract suffix.
E.g., if you have <tt>foo-1.0.tar.gz</tt>, <tt>DISTNAME</tt> is <tt>foo-1.0</tt>.
d162 3
a164 3
Fill in <tt>MASTER_SITES</tt> which is a list of URLs to the locations where the
distfile is kept.
E.g., ftp://ftp.openbsd.org/pub/OpenBSD/distfiles/.
d184 1
a184 1
If your ports are available over large public mirrors such as GNU, SunSite, or
d206 1
a206 1
If a given port needs more than about 5 <tt>DISTFILES</tt> + <tt>PATCHFILES</tt>
d1466 1
a1466 1
<a href="ports.html">[To Section 1 - The OpenBSD Ports System]</a>
d1474 1
a1474 1
<small>$OpenBSD: guide.html,v 1.38 2015/07/30 10:56:41 gsoares Exp $</small>
@


1.38
log
@fix typo; from Clemens Goessnitzer
@
text
@d467 2
a468 1
You can use file(1) to determine if a binary is stripped or not.
d1474 1
a1474 1
<small>$OpenBSD: guide.html,v 1.37 2015/07/02 05:49:05 bentley Exp $</small>
@


1.37
log
@Clean up meta tags.

name=distribution, name=keywords, and name=resource-type have no effect
in modern search engines and just clutter up the page source.

From Pavel Plamenov.
@
text
@d903 1
a903 1
command some configuration options, and usually additions to variousdependencies.
d1473 1
a1473 1
<small>$OpenBSD: guide.html,v 1.36 2015/05/11 11:18:30 sthen Exp $</small>
@


1.36
log
@Add 'link rel="canonical"' to pages, acting as a hint to search engines
to list the copies on www.openbsd.org rather than mirrors.

From Carlin Bingham, ok millert@@ nick@@
@
text
@a4 1
<meta name= "resource-type" content= "document">
a5 2
<meta name= "keywords"      content= "openbsd,ports">
<meta name= "distribution"  content= "global">
d1473 1
a1473 1
<small>$OpenBSD: guide.html,v 1.35 2015/03/20 17:53:22 kspillner Exp $</small>
@


1.35
log
@DESCR files lines should be no longer than 80 characters.

ok zhuk@@, ok & better wording sthen@@
@
text
@d10 1
d1476 1
a1476 1
<small>$OpenBSD: guide.html,v 1.34 2014/12/03 11:54:42 bentley Exp $</small>
@


1.34
log
@Nest tags correctly.
@
text
@d453 1
a453 1
It is also advised to wrap your lines at 72 characters.
d455 1
a455 1
through <tt><b>fmt -w 72</b></tt>.
d1475 1
a1475 1
<small>$OpenBSD: guide.html,v 1.33 2014/12/01 09:59:33 bentley Exp $</small>
@


1.33
log
@Convert the ports faq to use id="" instead of "a name=""></a>.
@
text
@d177 1
a177 1
<tt><b>make fetch-all</tt></b>.
d233 2
a234 2
Create a checksum in <tt>distinfo</tt> by typing <tt><b>make makesum</tt></b>.
Then verify the checksum is correct by typing <tt><b>make checksum</tt></b>.
d303 1
a303 1
If GNU configure is used you may want to run <tt><b>./configure --help</tt></b>
d1475 1
a1475 1
<small>$OpenBSD: guide.html,v 1.32 2014/11/10 09:29:52 sthen Exp $</small>
@


1.32
log
@remove some more of the www@@ mentions, Job Snijders pointed out the
one on upgrade56.html
@
text
@d70 1
a70 2
<a name="Overview"></a>
<h2>2.1 - Overview</h2>
d113 1
a113 2
<a name="PortsChecklist"></a>
<h2>2.2 - Porting Checklist</h2>
d687 1
a687 2
<a name="PortsComplex"></a>
<h2>2.3 - Handling Complex Situations</h2>
d692 1
a692 2
<a name="Know"></a>
<h3>2.3.1 - Know the software</h3>
d727 1
a727 2
<a name="Figure"></a>
<h3>2.3.2 - Figure out important options</h3>
d745 1
a745 3

<a name="Ideal"></a>
<h3>2.3.3 - The ideal case: <tt>MULTI_PACKAGES</tt> and <tt>PSEUDO_FLAVORS</tt></h3>
d844 1
a844 3

<a name="Inter"></a>
<h3>2.3.4 - Interdependencies between subpackages</h3>
d901 1
a901 3

<a name="True"></a>
<h3>2.3.5 - True <tt>FLAVORS</tt> and <tt>PKGNAMES</tt></h3>
d975 1
a975 3

<a name="PortsUpdate"></a>
<h2>2.4 - Updating ports</h2>
d1022 1
a1022 2
<a name="UpdateChecklist"></a>
<h3>2.4.1 - Update checklist</h3>
d1111 1
a1111 4


<a name="PortsPolicy"></a>
<h2>2.5 - OpenBSD Porting Policy</h2>
d1138 1
a1138 2
<a name="PortsSecurity"></a>
<h2>2.6 - Security Recommendations</h2>
d1255 1
a1255 2
<a name="PortsGeneric"></a>
<h2>2.7 - Generic Porting Hints</h2>
d1372 1
a1372 3

<a name="PortsOther"></a>
<h2>2.8 - Other Helpful Hints</h2>
d1434 1
a1434 2
<a name="PortsAvail"></a>
<h2>2.9 - Additional Information</h2>
d1475 1
a1475 1
<small>$OpenBSD: guide.html,v 1.31 2014/07/27 11:40:41 schwarze Exp $</small>
@


1.31
log
@When discussing the PLIST, mention that pkg_create(1) explains packing
list annotations; from edward at rdtan dot net, tweaked by me
@
text
@a4 1
<link rev= "made" href="mailto:www@@openbsd.org">
a1495 1
<a href="mailto:www@@openbsd.org">www@@openbsd.org</a>
d1497 1
a1497 1
<small>$OpenBSD: guide.html,v 1.30 2014/07/27 11:19:30 schwarze Exp $</small>
@


1.30
log
@minor wording improvements for "make plist"
from edward at rdtan dot net, tweaked by me
@
text
@d511 3
d1499 1
a1499 1
<small>$OpenBSD: guide.html,v 1.29 2014/06/21 12:17:47 zhuk Exp $</small>
@


1.29
log
@Four license questions were as like as four peas
An espie@@ swallowed one and then there were three
@
text
@d501 3
a503 2
After the install is complete use the developer's command,
<tt><b>make plist</b></tt> which makes the file <tt>PLIST</tt> in the
d1496 1
a1496 1
<small>$OpenBSD: guide.html,v 1.28 2014/06/21 10:20:00 zhuk Exp $</small>
@


1.28
log
@Kill the PERMIT_DISTFILES_CDROM zombie in porting FAQ.
@
text
@d277 1
a277 1
a few are not.  We need four questions answered to distribute ports
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.27 2013/12/11 12:06:51 sthen Exp $</small>
@


1.27
log
@mention portcheck, from Daniel Dickman
@
text
@a283 3
<tt>PERMIT_DISTFILES_CDROM</tt> tells us if we can mirror the distfiles on the
cdrom.
<li>
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.26 2013/09/23 13:12:31 espie Exp $</small>
@


1.26
log
@bye bye -ui
@
text
@d571 3
d1498 1
a1498 1
<small>$OpenBSD: guide.html,v 1.25 2013/03/11 13:20:43 espie Exp $</small>
@


1.25
log
@REGRESS -> TEST
@
text
@d990 1
a990 1
<tt><b>pkg_add -ui</b></tt>, the system will replace each package with a new
d1113 1
a1113 1
  If some specific steps must be taken beyond <tt><b>pkg_add -ui</b></tt>, make
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.24 2012/11/04 07:35:59 rpe Exp $</small>
@


1.24
log
@add missing <br>'s
@
text
@d561 1
a561 1
<tt>NO_REGRESS=Yes</tt> if a port has no test infrastructure.
d563 3
a565 3
port, list them in <tt>REGRESS_DEPENDS</tt>.
Please note: do not set <tt>NO_REGRESS</tt> if a port has an empty
regression infrastructure.
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.23 2012/11/02 11:56:13 sthen Exp $</small>
@


1.23
log
@use a full path when changing directory before import
@
text
@d158 1
a158 1
<br><li>
d665 1
a665 1
<li>
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.22 2012/11/02 11:53:55 sthen Exp $</small>
@


1.22
log
@tweak the section about importing ports; recommend -n, don't recommend
relying on CVSROOT. ok aja@@
@
text
@d615 1
a615 1
$ <b>cd kaffe1</b>
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.21 2012/10/10 08:50:07 rpe Exp $</small>
@


1.21
log
@use <blockquote><pre></pre></blockquote> for examples
let some more complex command examples stand out on its own
@
text
@d598 2
a599 1
Before commit, check that no users were added to
d617 1
a617 1
$ <b>cvs -d cvs.openbsd.org:/cvs import -m 'kaffe port' ports/lang/kaffe1 \</b>
a622 1
This can be omitted if you have a <tt>CVSROOT</tt> environment variable defined.
d624 2
a625 2
<tt>-m 'kaffe port'</tt> is your login message.
Change it to whatever you like.
d628 2
a629 1
lives
d658 6
d1495 1
a1495 1
<small>$OpenBSD: guide.html,v 1.20 2012/09/20 15:06:08 sthen Exp $</small>
@


1.20
log
@fix old-style LIB_DEPENDS format
@
text
@d408 8
a415 7
<pre>
   user executables:			/usr/local/bin
   system admin executables:		/usr/local/sbin
   program executables:			/usr/local/libexec
   libraries:				/usr/local/lib
   architecture dependent data:		/usr/local/lib/&lt;name&gt;
   installed include files:		/usr/local/include or
d417 9
a425 9
   single-machine data:			/etc or /etc/&lt;name&gt;
   local state:				/var/run
   games score files:			/var/games
   GNU info files:			/usr/local/info
   man pages:				/usr/local/man/...
   read-only architecture-independent:	/usr/local/share/&lt;name&gt;
   misc documentation:			/usr/local/share/doc/&lt;name&gt;
   examples files:			/usr/local/share/examples/&lt;name&gt;
</pre>
a485 2
<pre>
      &#36;OpenBSD&#36;
d487 5
a491 2
      ${WRKDIR}/receiver.c
         call to mktemp (wrapper function do_mktemp) does seem to be correct.
d493 2
a494 2
      The server makes extensive use of strlcpy/strlcat/snprintf.
</pre>
d612 2
a613 1
<pre>
d618 2
a619 1
</pre>
d640 2
a641 1
<pre>
d656 1
a656 1
</pre>
d811 2
a812 1
<pre>
d836 1
a836 1
</pre>
d871 1
a871 1
<pre>
d879 2
a880 1
</pre>
d884 2
a885 1
<pre>
d887 2
a888 1
</pre>
d910 2
a911 1
<pre>
d914 2
a915 1
</pre>
d930 2
a931 1
<pre>
d948 1
a948 1
</pre>
d1269 5
a1273 3
       <pre>
            #if defined(__NetBSD__) || defined(__FreeBSD__)
       </pre>
d1285 7
a1291 5
       <pre>
           #if (defined(__unix__) || defined(unix)) &amp;&amp; !defined(USG)
           #include &lt;sys/param.h&gt;
           #endif
       </pre>
d1356 23
a1378 21
<pre>
       /* prototype part */
       #ifdef USE_OWN_GCVT
       char *foo_gcvt(double number, size_t ndigit, char *buf);
       #else
       /* include correct file */
       #include &lt;stdlib.h&gt;
       /* use system function */
       #define foo_gcvt  gcvt
       #endif

       /* definition part */
       #ifdef USE_OWN_GCVT
       char *foo_gcvt(double number, size_t ndigit, char *buf)
          {
          /* proper definition */
          }

       /* typical use */
       s = foo_gcvt(n, 15, b);
       </pre>
d1488 1
a1488 1
<small>$OpenBSD: guide.html,v 1.19 2012/09/20 06:08:41 rpe Exp $</small>
@


1.19
log
@add <tt></tt> to:
- variable names
- make targes
- flags and options
- filnames
- /path/to/files

in changed paragraphs:
- start sentences on a new line
- split long lines around 72-80 colums
- fix a typo (spotted by Adam Jeanguenat)

ok sthen@@ nick@@
@
text
@d870 2
a871 1
LIB_DEPENDS-p1 = foo::some/pkgpath,-p2
d878 1
a878 1
LIB_DEPENDS-p1 = foo:${BUILD_PKGPATH},-p2
d1470 1
a1470 1
<small>$OpenBSD: guide.html,v 1.18 2012/09/14 17:08:03 rpe Exp $</small>
@


1.18
log
@FNF
- enclose in-text commands with <tt><b></b></tt>
  and remove '' and `' around commands
- enclose commands in <pre> blocks with <b></b>
- start modified sentences on a new line
- remove <tt></tt> from man page links
- consistently use ksh prompts
@
text
@d154 1
a154 1
infrastructure there.  Copy the template Makefile from
d156 1
a156 1
Fill in CATEGORIES with the primary category you have chosen.
d161 2
a162 2
Fill in EXTRACT_SUFX if it's anything besides .tar.gz.  Other examples are
.tar.Z, or .tgz.
d164 2
a165 2
Fill in DISTNAME which is the name of the file minus the extract suffix.
E.g., if you have foo-1.0.tar.gz, DISTNAME is foo-1.0.
d167 3
a169 2
Fill in MASTER_SITES which is a list of URLs to the locations where the distfile
is kept.  E.g., ftp://ftp.openbsd.org/pub/OpenBSD/distfiles/.
d175 3
a177 2
${MASTER_SITES}${DISTNAME}${EXTRACT_SUFX}.  All three are used.  Don't
set DISTNAME to point to the file directly.
d185 3
a187 3
You also have the variable PATCHFILES available.  This is a list of vendor
(not OpenBSD) patches to the port.  Common uses are things like security
or reliability fixes.
d191 13
a203 8
/usr/ports/infrastructure/templates/network.conf.template.
Set MASTER_SITES to ${MASTER_SITE_GNU}, or ${MASTER_SITE_SUNSITE}, etc.
To simplify this process, use the construct ${MASTER_SITE_FOO:=subdir/} to
append the distribution subdirectory.
<li>
Ports normally correspond to given versions of software. Once they are retrieved, files are checksummed and compared to the recorded
checksum(s) in distinfo. So, to avoid confusion, DISTFILES and PATCHFILES should have clearly visible version numbers:
don't retrieve foo-latest.tar.gz if it is a link to foo-1.0.5.tar.gz.
d206 9
a214 8
In the meantime, if you must use a file like this, set DIST_SUBDIR to
what a reasonable DISTNAME would be, like foo-1.0.5, such that
different, identically named, versions of the distfile do not
clash on the distribution file mirrors.
<li>
If a given port needs more than about 5 DISTFILES + PATCHFILES to work, use DIST_SUBDIR to avoid cluttering
DISTDIR (/usr/ports/distfiles by default) too much.
In this case, DIST_SUBDIR must not include version numbers.
d216 1
a216 1
change, but will be refetched if DIST_SUBDIR is changed.
d219 14
a232 8
All DISTFILES and PATCHFILES don't necessarily come from the same set of MASTER_SITES. Supplementary sites can be
defined using the variables MASTER_SITES0 to MASTER_SITES9. Just write DISTFILES=foo-1.0.5.tar.gz:5 to
retrieve foo-1.0.5.tar.gz from MASTER_SITES5.
<li>
Some ports don't always need to retrieve all files in all circumstances. For instance, some ports may have some compilation options, and
associated files which are only required in such a case. Or they may need some files for some architectures only. In such a case, those
supplementary optional files must be mentioned in the SUPDISTFILES variable. Targets such as makesum or
mirror-distfiles will fetch those supplementary files that the casual user doesn't need.
d236 1
a236 1
Create a checksum in <i>distinfo</i> by typing <tt><b>make makesum</tt></b>.
d239 19
a257 11
In some rare cases, files checksums can't be verified reliably. By all means, porters should try to find sites that are reliable. Communicating
with the software author and the archive site maintainer at this stage is highly desirable. In the worst case, non-checksummable files can be
mentioned in the IGNOREFILES variable.
<li>
All files in DISTFILES are usually processed during make extract.
EXTRACT_ONLY may be used to limit extraction to a
subset of files (possibly empty). The customary use of this variable is to customize extraction: for instance, if some DISTFILES need
some special treatment, they will be removed from EXTRACT_ONLY and handled manually at post-extract stage.
For historic reasons, make extract does set up the working directory first along with extracting files. Thus, providing a
pre-extract or a do-extract target is highly unusual (and fairly suspicious behavior, indicative of a high degree of obfuscation
in the port).
d259 2
a260 1
Patches that need specific treatment should be mentioned in DISTFILES, and removed from EXTRACT_ONLY, for historic reasons.
d266 3
a268 2
Usually, it's <i>/usr/ports/pobj/${PKGNAME}${FLAVOR_EXT}/${DISTNAME}</i>.
You may need to modify the Makefile's WRKDIST variable if it is different.
d278 1
a278 1
properly.  These are the PERMIT_* values in the Makefile.
d280 1
a280 1
PERMIT_PACKAGE_CDROM tells us if we can put the package on the cdrom.
d282 1
a282 1
PERMIT_PACKAGE_FTP tells us if we can put the package on the ftp sites.
d284 2
a285 1
PERMIT_DISTFILES_CDROM tells us if we can mirror the distfiles on the cdrom.
d287 2
a288 1
PERMIT_DISTFILES_FTP tells us if we can mirror the distfiles on the ftp sites.
d297 3
a299 3
In addition to the PERMIT_* values, put a license marker like
<tt># License</tt> above them as a comment, this way we know why
the PERMIT_* values are set the way they are.
d302 2
a303 1
Add configuration options to Makefile and/or create the configuration script.
d305 3
a307 3
You can add a port configuration script named `configure' to a directory
named <tt>scripts/</tt>. This will be run before any configuration
specified by CONFIGURE_STYLE is run.
d313 2
a314 1
--option flags to the CONFIGURE_ARGS parameter in the Makefile.
d316 2
a317 2
Use CONFIGURE_ARGS+= to append to the variable.  CONFIGURE_ARGS= will
overwrite it.
d332 1
a332 1
edit foo/bar.c to fix the error.
d336 1
a336 1
this will create patches/patch-foo_bar_c with your modifications.
d348 4
a351 3
Patches go in the directory <i>patches/</i> and should be named patch-* with
* being something meaningful. The preferred naming is
patch-FILENAME where FILENAME is the name of the file it is patching.
d354 5
a358 3
Applying PATCHFILES is the first half of the make patch stage. It can be
invoked separately as make distpatch, which is a convenient target for
porters. Ignore this if you haven't set it.
d364 1
a364 1
All patches MUST be relative to ${WRKDIST}.
d366 3
a368 4
Check that patches <b>DON'T</b> contain tags that cvs
will replace.  If they do, your patches won't apply after you check
them in.
You can check in your changes with -kk to avoid this.
d384 1
a384 1
restart the cycle at <tt>configure</tt> most of the time.
d388 1
a388 1
Peruse the output (if any) and tweak any options in the Makefile.
d391 14
a404 13
Note: make sure host-dependent files go in <i>/etc</i> or
<i>/etc/&lt;name&gt;</i>, but <b>NEVER REPLACE OR MODIFY</b>
existing files in <i>/etc</i>.  Best to have install place them
in <i>/usr/local/share/&lt;name&gt;</i> and then copy to
<i>/etc</i> or <i>/etc/&lt;name&gt;</i> only if the files do not exist.
If the files exist, display a message that says such-and-such files need
to be modified.
This also guarantees that the files will be included in
the package since everything under <i>/usr/local</i> is included in the PLIST.
To handle the copying carefully,
the @@sample keyword is preferably used within the PLIST.
After a package has been installed the contents of <tt>pkg/MESSAGE</tt>
will be displayed if it exists.
d432 10
a441 11
Control SEPARATE_BUILD semantics.
You have to do this only if the port builds with
SEPARATE_BUILD defined.
Ideally, the port should not modify any file in
${WRKSRC} after <tt><b>make patch</b></tt>.
You can check this by making sure you don't have any write access
to ${WRKSRC}. Then you can set
<tt>SEPARATE_BUILD=concurrent</tt> -- someone can use the same
source tree to build on distinct arches simultaneously.
Otherwise, set <tt>SEPARATE_BUILD=simple</tt> -- building on
distinct arches simultaneously may be met with problems, as some
d445 16
a460 16
Add <i>COMMENT</i> in Makefile.
COMMENT is a <b>SHORT</b> one-line description of the port
(max. 60 characters). Do <b>NOT</b> include the package
name (or version number of the software) in the comment.
Do <b>NOT</b> start with an uppercase letter
unless semantically significant, and
do <b>NOT</b> end with a period.
<b>DON'T EVER START WITH AN INDEFINITE ARTICLE SUCH AS `a' or `an';
remove the article altogether.</b>

<br><br><li>
Put a longer description of the port into <i>pkg/DESCR</i>.
One to a few paragraphs
concisely explaining what the port does is sufficient. It is also advised to
wrap your lines at 72 characters. This can be done by first editing the DESCR
file and then running it through <tt><b>fmt -w 72</b></tt>.
d471 4
a474 4
<tt>${INSTALL_PROGRAM}</tt> honors this automatically and is
preferable to unconditional stripping (e.g., by an "install-strip"
target or by running "strip" from the Makefile). You can use
file(1) to determine if a binary is stripped or not.
d501 1
a501 1
Create pkg/PLIST.
d503 2
a504 2
<tt><b>make plist</b></tt> which makes the file PLIST in the <i>pkg</i>
directory.
d507 4
a510 3
Peruse `PLIST' and verify that everything was installed and
that it was installed in the proper locations.  Anything not installed
can be added to a port Makefile `post-install' rule.
d512 2
a513 1
Ports that install shared libraries will have another file called PFRAG.shared.
d515 2
a516 1
PLIST describes the files being independent of whether the architecture supports shared libraries or not.
d518 2
a519 2
PFRAG.shared describes only the files being additionally installed on those architectures that support
shared libraries.
d521 2
a522 2
PFRAG.noshared describes only the files being additionally installed on architectures that do not
support shared libraries.
d528 2
a529 2
It is possible some directories do not need to be in the PLIST, as they've
been installed by a dependency.
d533 2
a534 1
and test its removal with <tt><b>make uninstall</b></tt>.
d539 3
a541 3
>pkg_delete(1)</a> directly, setting PKG_PATH
to <tt>/usr/ports/packages/`arch -s`/all/</tt>
in the environment.
d545 4
a548 4
mentioned in DEPENDS, and nothing more. Check names, particularly in the
<tt><b>make configure</b></tt> stage, for hidden dependencies (stuff that
exists elsewhere in the ports tree and might be detected if the user installs
some other ports first).
d599 1
a599 1
We normally use "import" for a new port,
d603 1
a603 1
cvs commit), it will be 1.2, and that will be used.
d605 4
a608 3
In short, import is typically used when a port is created.
From that point on cvs add and cvs rm are typically used to add or remove
files, and the normal edit-&gt;commit cycle for changes.
d617 2
a618 2
-d cvs.openbsd.org:/cvs says where cvs lives. This can be omitted if you
have a CVSROOT environment variable defined.
d620 2
a621 1
-m 'kaffe port' is your login message.  Change it to whatever you like
d623 2
a624 1
ports/lang/kaffe1 is the path relative to /cvs where the port lives
d626 1
a626 1
<i>YourName</i> (replaced with your login name) is the 'vendor tag'.
d629 3
a631 2
<i>YourName_YYYY-MMM-DD</i> (e.g., ian_2000-Jan-01)
is the 'vendor release tag'.  This is as good as any.
d634 1
a634 1
As a real example, here is the output of checking in the Kaffe1 port,
d654 3
a656 3
Last but not least, add a one-line entry for the new port
in its parent directory's Makefile, e.g., for ports/lang/kaffe1,
add it to ports/lang/Makefile.
d689 3
a691 2
auto-detects. Read the configure script options. Read the port documentation
for extra stuff.
d707 4
a710 3
Use <tt>port-lib-depends-check</tt> to see what libraries your software
needs (that will end up in LIB_DEPENDS or WANTLIB, usually). Identify
various files and binaries in the dependencies that have to be present
d719 6
a724 5
You won't care about some options.  It makes no sense to disable some stuff
if it always works, and if the dependencies are quite small.   Take special
notes of licences on dependencies, especially the PERMIT* stuff.  As a rule,
even if a dependency is very small, if it affects the licensing of the
resulting package, you will have to explicitly take care of it.
d737 1
a737 1
<h3>2.3.3 - The ideal case: MULTI_PACKAGES and PSEUDO_FLAVORS</h3>
d752 12
a763 10
In this case, try setting the MULTI_PACKAGES variable to
a list of -sub packages, add corresponding COMMENTS, and look at your packaging.
Basically, MULTI_PACKAGES only affects the packaging: if you have
MULTI_PACKAGES=-s1 -s2
all stuff relevant to the package will exist in two variants:
COMMENT-s1 for the first package, COMMENT-s2 for the second package,
PLIST-s1, PLIST-s2, DESCR-s1, DESCR-s2.
You need to write those COMMENT-s1 and COMMENT-s2 in the Makefile, and to
split your PLIST into two parts, and to create DESCR-s1/DESCR-s2.
You will also need to specify separate PKGNAMEs for all subpackages.
d767 1
a767 1
to fiddle with MULTI_PACKAGES and stuff before you polish this.
d770 2
a771 1
LIB_DEPENDS, WANTLIB, and RUN_DEPENDS will be split for each subpackage.
d787 2
a788 2
MULTI_PACKAGES are the best way to handle options (when possible): one
build, one set of packages to test, better quality overall...
d790 5
a794 4
If you also want to help people who build packages themselves, you may
consider adding PSEUDO_FLAVORS.  A pseudo-flavor is a way to tweak an
option (say, disable the graphical interface) that's very similar to
actual flavors.  In fact, the biggest difference is a functional difference:
d798 3
a800 3
For instance, assuming you separated the graphical interface into a
separate subpackage (MULTI_PACKAGES=-core -x11), you could create a
pseudo flavor no_x11 that avoids building the -x11 subpackage.
d805 1
a805 1
You would end up with a Makefile that looks something like this:
d833 1
a833 1
Makefile: the system doesn't care at all that you define extra variables.
d839 6
a844 5
MULTI_PACKAGES setups used to be asymmetric, with a -main subpackage and other
subpackages, with the -main subpackage always built, and other subpackages
possibly depending upon it. The current situation is totally symmetric: any
subpackage can depend on any other. The infrastructure has specific provisions
to avoid looping indefinitely.
d848 7
a854 6
detect which WANTLIB come from external dependencies, and which come from
inter-dependencies. While external LIB_DEPENDS and WANTLIB are checked at 
the start of build, LIB_DEPENDS and WANTLIB that refer to one of the 
subpackages currently being built, will only be checked
at packaging time (and thus packages may be created in a specific order to
satisfy interdependencies).
d857 3
a859 2
inter-dependencies: BUILD_PKGPATH contains the PKGPATH used during building
the current packages, taking flavors and pseudo-flavors into account.
d873 2
a874 2
If you go on and build in some/pkgpath with FLAVOR=a, then creating the
subpackage for -p1 will trigger a rebuild with FLAVOR=''.
d881 6
a886 5
There is also a BASE_PKGPATH variable, which does not take pseudo-flavors
into account. This variable has limited applicability: it corresponds to
a transition between old MULTI_PACKAGES and newer ones, where the old
"main" subpackage did not have any marker in its pkgpath, and thus the
corresponding package needs a @@pkgpath ${BASE_PKGPATH} in its packing-list.
d892 1
a892 1
<h3>2.3.5 - True FLAVORS and PKGNAMES</h3>
d895 5
a899 4
will have to add true flavors to the Makefile: those flavors will command
some configuration options, and usually additions to various dependencies.
Note that package naming is mostly automatic: the PKGNAME will have an
extension built by appending the specified flavors to its name. So, if
d904 3
a906 2
and you build the port with FLAVOR='f3 f1', then FULLPKGNAME=foo-1.0-f1-f3
(FLAVORS is used to reorder specified FLAVORS in a canonical way).
d911 1
a911 1
FLAVOR, and some don't.
d913 2
a914 1
depend on the FLAVOR, and some actual programs that depend on the FLAVOR.
d916 2
a917 2
In such cases, you can specify the FULLPKGNAME for the documentation subpackage
explicitly. E.g., something like this:
d938 1
a938 1
stem-version-flavor_extension.
d942 8
a949 8
look at candidates with the same stem.  The right package will be the one
coming from the exact same PKGPATH, or matching @@pkgpath annotation in
the packing-list.
<p>
Usually, MULTI_PACKAGES should not conflict, so they must have different
names (and the infrastructure has no way to build those names). On the other
hand, flavors should conflict, and thus have the same name. The flavor
information should end at the end of the package name, except for
d952 7
a958 6
As far as dependencies go, by default, specifying a PKGPATH will just
create a stem-* dependency, meaning any package with the right stem will
match the dependency. By default, any flavor will match. If only specific
flavors are desired, you must include them in your specification, e.g.,
stem-*-flavor.  If some flavors are unwanted, you can remove them from
matching packages, e.g., stem-*-!flavor.
d961 1
a961 1
directly tacked to the PKGPATH, e.g., <tt>dir/foo&gt;=2.0</tt>.
d1031 3
a1033 2
  ${WRKBUILD}/shared_libs.log verbatim as a basis for your
  <tt>SHARED_LIBS</tt> setup. This will help during updates.
d1037 3
a1039 2
  <li>Make sure dependencies stay as loose as they can be. By default,
  RUN_ and LIB_DEPENDS will be satisfied by any version of a package.
d1053 1
a1053 1
  to make sure pkg_add sees the package as a newer package.
d1073 1
a1073 1
  <li>Edit the port's Makefile to grab the new version, run
d1082 3
a1084 2
  the shared_libs.log to check whether the software authors did significant
  changes. <i>Note well that this is not enough.</i> Most software authors
d1469 1
a1469 1
<small>$OpenBSD: guide.html,v 1.17 2012/09/12 20:03:00 rpe Exp $</small>
@


1.17
log
@FNF
- small tweaks to pass validator.w3.org
- mention, that the pages passed the validation
- add missing license block to index.html
@
text
@d178 1
a178 1
<b>make fetch-all</b>.
d222 2
a223 2
Create a checksum in <i>distinfo</i> by typing <b>make makesum</b>.
Then verify the checksum is correct by typing <b>make checksum</b>.
d241 4
a244 3
Extract the port with <b>make extract</b>.  Pay attention to where the base
of the sources are.  Usually, it's <i>/usr/ports/pobj/${PKGNAME}${FLAVOR_EXT}/${DISTNAME}</i>. You may need to
modify the Makefile's WRKDIST variable if it is different.
d282 1
a282 1
If GNU configure is used you may want to run ./configure --help
d293 1
a293 1
Try building the port with <b>make build</b>.
d302 1
a302 1
<b>cd `make show=WRKSRC` ; cp foo/bar.c{,.orig} </b>
d306 1
a306 1
<b>cd - ; make update-patches</b>
d311 2
a312 2
<b>make clean patch</b>. This will delete the work directory, re-extract,
and patch your port.
d316 3
a318 3
Begin a cycle of <b>make build</b>, generate a patch using <b>make
update-patches</b>, and
<b>make clean patch</b>.
d323 1
a323 1
(<tt>make update-patches</tt> does this automatically for you.)
d331 1
a331 1
Use <b>make update-patches</b> to generate patches.
d337 2
a338 1
them in.  You can check in your changes with -kk to avoid this.
d359 1
a359 1
To repeat issue the command `<b>make clean configure</b>'.
d405 1
a405 1
${WRKSRC} after <b>make patch</b>.
d430 1
a430 1
file and then running it through 'fmt -w 72'.
d438 1
a438 1
Install the application with <b>make fake</b>.
d471 4
a474 2
Create pkg/PLIST.  After the install is complete use the developer's command,
<b>make plist</b> which makes the file PLIST in the <i>pkg</i> directory.
d494 2
a495 2
Re-run <b>make plist</b>. It
is possible some directories do not need to be in the PLIST, as they've
d498 3
a500 3
Test the packaging with <b>make package</b>,
test installation of the resulting package with <b>make install</b>,
and test its removal with <b>make uninstall</b>.
d512 2
a513 2
`<b>make configure</b>' stage, for hidden dependencies (stuff that exists
elsewhere in the ports tree and might be detected if the user installs
d516 2
a517 1
Verify shared library dependencies. Run <tt>make port-lib-depends-check</tt>
d531 2
a532 2
Test that <b>make clean</b> succeeds.
Sometimes the <b>make fake</b> stage creates files in the build
d576 4
a579 4
$ cd kaffe1
$ make clean	# you really don't want to check in all of work!
$ cvs -d cvs.openbsd.org:/cvs import -m 'kaffe port' ports/lang/kaffe1 \
	<i>YourName</i> <i>YourName_YYYY-MMM-DD</i>
d599 4
a602 4
$ cd kaffe1
$ make clean >/dev/null
$ cvs import -m 'kaffe1.0(==JDK1.1) port' ports/lang/kaffe1 ian ian_1998-Sep-08
ian@@cvs.openbsd.org's password: (not shown, obviously)
d915 4
a918 3
be aware of one simple fact: update is not instantaneous. Even if a user
just goes from release to release, each time they run pkg_add -ui, the
system will replace each package with a new version, one package at a time.
d1013 1
a1013 1
  <li>run <tt>make patch</tt> to have an initial copy of the port before
d1018 3
a1020 1
  <li>Edit the port's Makefile to grab the new version, run <tt>make makesum</tt> and <tt>make patch</tt> as a starting basis.
d1036 3
a1038 2
  <li>Help the user. If some specific steps must be taken beyond
  <tt>pkg_add -ui</tt>, make sure they are visible in the package.
d1114 1
a1114 1
       <tt>mktemp(3)</tt></a> for more information.
d1116 1
a1116 1
       <tt>ed</tt> or <tt>mail</tt>.
d1120 6
a1125 5
   <li>Just because you can read it doesn't mean you should. A well-known hole
       of this nature was the <tt>startx</tt> problem.  As a setuid program,
       you could launch startx with any file as a script. If the file was not
       a valid shell script, a syntax error message would follow, along with the
       first line of the offending file, without any further permission check.
d1413 1
a1413 1
<small>$OpenBSD: guide.html,v 1.16 2012/09/12 19:24:52 rpe Exp $</small>
@


1.16
log
@FNF for www/faq/ports/

perl -pi -e 's#<code>#<tt>#g;s#</code>#</tt>#g' *.html
perl -pi -e 's#<strong>#<b>#g;s#</strong>#</b>#g' *.html
perl -pi -e 's#<em>#<i>#g;s#</em>#</i>#g' *.html
perl -pi -e 's#</p>##;s#</li>##' *.html

discussed with ajacoutot@@ and nick@@
@
text
@d30 2
a156 1
</ul>
a428 1
</ul>
d1403 1
a1403 1
<small>$OpenBSD: guide.html,v 1.15 2011/12/01 22:09:06 kili Exp $</small>
@


1.15
log
@Remind people to add description and homepage to new ports submissions.

makes sense to jasper@@ and sthen@@
@
text
@d76 1
a76 1
   The most important thing to do is to <strong>communicate</strong>.
d78 2
a79 2
   if they are working on the same port. <em>Tell the original software 
   authors about it</em>, including problems you may find. If licensing
d85 1
a85 1
   <strong>COMMUNICATION</strong> makes the difference between a successful
d107 1
a107 1
   In the OpenBSD culture, <code>MAINTAINER</code>ship is not a status item,
d109 1
a109 1
   person who did the work.  A port <code>MAINTAINER</code> is something else:
d136 1
a136 1
Being a maintainer means <strong>more</strong> than just submitting ports.
d149 3
a151 3
<code>/usr/ports/</code>, pick a primary category for your port.
Create a new directory below <code>/usr/ports/&lt;category&gt;/</code>
or <code>/usr/ports/mystuff/&lt;category&gt;/</code> and create the basic
d153 1
a153 1
<code>/usr/ports/infrastructure/templates/Makefile.template</code>.
d168 1
a168 1
<strong>Don't forget the trailing slash.</strong>
d267 1
a267 1
<code>/usr/local/share/doc/&lt;name&gt;/</code>.
d270 1
a270 1
<code># License</code> above them as a comment, this way we know why
d277 1
a277 1
named <code>scripts/</code>. This will be run before any configuration
d333 1
a333 1
Check that patches <strong>DON'T</strong> contain tags that cvs
d344 1
a344 1
Try setting <code>SEPARATE_BUILD</code>.
d347 1
a347 1
this is cleaner (many programs using <code>CONFIGURE_STYLE=gnu</code> can),
d351 1
a351 1
restart the cycle at <code>configure</code> most of the time.
d359 1
a359 1
<i>/etc/&lt;name&gt;</i>, but <strong>NEVER REPLACE OR MODIFY</strong>
d369 1
a369 1
After a package has been installed the contents of <code>pkg/MESSAGE</code>
d405 1
a405 1
<code>SEPARATE_BUILD=concurrent</code> -- someone can use the same
d407 1
a407 1
Otherwise, set <code>SEPARATE_BUILD=simple</code> -- building on
d413 2
a414 2
COMMENT is a <strong>SHORT</strong> one-line description of the port
(max. 60 characters). Do <strong>NOT</strong> include the package
d416 1
a416 1
Do <strong>NOT</strong> start with an uppercase letter
d418 3
a420 3
do <strong>NOT</strong> end with a period.
<strong>DON'T EVER START WITH AN INDEFINITE ARTICLE SUCH AS `a' or `an';
remove the article altogether.</strong>
d432 1
a432 1
id from <code>/usr/ports/infrastructure/db/user.list</code> for your port to
d438 2
a439 2
this is governed by <code>${INSTALL_STRIP}</code>.
<code>${INSTALL_PROGRAM}</code> honors this automatically and is
d445 1
a445 1
<strong>Check port for security holes again</strong>. This is
d449 1
a449 1
<code>pkg/SECURITY</code> file.  This file
d463 1
a463 1
Make sure your <code>/etc/mtree</code> directory is up-to-date.
d466 2
a467 2
<code>(U)pdate</code> does not touch <code>/etc</code>...
For automatic updating of <code>/etc</code>, sysmerge(8) may help.
d489 1
a489 1
If you added to <code>LIB_DEPENDS</code> or <code>RUN_DEPENDS</code>,
d502 1
a502 1
to <code>/usr/ports/packages/`arch -s`/all/</code>
d512 2
a513 2
Verify shared library dependencies. Run <code>make port-lib-depends-check</code>
and add every <code>LIB_DEPENDS</code> or <code>WANTLIB</code> annotation
d520 1
a520 1
<code>NO_REGRESS=Yes</code> if a port has no test infrastructure.
d522 2
a523 2
port, list them in <code>REGRESS_DEPENDS</code>.
Please note: do not set <code>NO_REGRESS</code> if a port has an empty
d539 1
a539 1
<code>sizeof(int) != sizeof(long)</code> on this platform.
d558 1
a558 1
<code>/usr/ports/infrastructure/db/user.list</code>
d615 1
a615 1
<code>/usr/ports/infrastructure/db/user.list</code>.
d663 1
a663 1
Use <code>port-lib-depends-check</code> to see what libraries your software
d903 1
a903 1
directly tacked to the PKGPATH, e.g., <code>dir/foo&gt;=2.0</code>.
d973 2
a974 2
  <code>SHARED_LIBS</code> setup. This will help during updates.
  <li>Use <code>PLIST_DB</code> and build a database of packing-lists.
d987 2
a988 2
  package implies a bump. This includes <code>HOMEPAGE</code>,
  <code>MAINTAINER</code> or description changes.
d991 1
a991 1
  the version number appears to go backwards, you must use <code>EPOCH</code> 
d1007 1
a1007 1
  <li>run <code>make patch</code> to have an initial copy of the port before
d1012 1
a1012 1
  <li>Edit the port's Makefile to grab the new version, run <code>make makesum</code> and <code>make patch</code> as a starting basis.
d1020 1
a1020 1
  changes. <em>Note well that this is not enough.</em> Most software authors
d1029 1
a1029 1
  <code>pkg_add -ui</code>, make sure they are visible in the package.
d1043 2
a1044 2
   <li>OpenBSD does NOT use <code>/usr/local/etc/rc.d</code>.<br>
       <code>/usr/local</code> is often shared between several machines
d1046 2
a1047 2
         to a given machine can't be stored under <code>/usr/local</code>,
         <code>/etc</code> is the central repository for per machine
d1049 1
a1049 1
         files under <code>/etc</code> automatically.  Ports that need some
d1053 2
a1054 2
   <li>OpenBSD does NOT require <code>-lcrypt</code>.<br>
       DES encryption is part of the standard <code>libc</code>.
d1056 1
a1056 1
       See <code>/usr/ports/infrastructure/db/user.list</code> for details.
d1059 1
a1059 1
   <li>Be sure to add the <code>&#36;OpenBSD&#36;</code> CVS tag to
d1063 1
a1063 1
       achieve this goal you <strong>must</strong> feed any OpenBSD patches
d1076 1
a1076 1
   <li>Do <em>not</em> use alpha or beta code when preparing a port.  Use the
d1081 2
a1082 2
       <code>strcat/strcpy/strcmp/sprintf</code>.  In general,
       <code>sprintf</code> should be replaced with <code>snprintf</code>.
d1087 2
a1088 2
       <code>/tmp</code> with symbolic links to more strategic files, such as
       <code>/etc/master.passwd</code>.
d1090 2
a1091 2
   <li>For instance, both <code>fopen</code> and <code>freopen</code>
       <strong>create a new file or open an existing file</strong> for
d1093 1
a1093 1
       <code>/etc/master.passwd</code> to <code>/tmp/addrpool_dump</code>. The
d1095 3
a1097 3
       an <code>unlink</code> right before. You only narrow the window
       of opportunity.  Use <code>open</code> with
       <code>O_CREAT|O_EXCL</code> and <code>fdopen</code> instead.
d1099 1
a1099 1
   <li>Another very common problem is the <code>mktemp</code>
d1101 2
a1102 2
       <strong>These must be fixed</strong>.
       This is not quite as simple as <code>s/mktemp/mkstemp/g</code>.  <br>
d1105 5
a1109 5
       <code>mktemp(3)</code></a> for more information.
       Correct code using <code>mkstemp</code> includes the source to
       <code>ed</code> or <code>mail</code>.
       A rare instance of code that uses <code>mktemp</code> correctly
       can be found in the <code>rsync</code> port.
d1112 1
a1112 1
       of this nature was the <code>startx</code> problem.  As a setuid program,
d1118 1
a1118 1
       an <code>fstat</code> on the open descriptor to check if you should have
d1123 3
a1125 3
       your privileges. This includes <code>popen</code> and
       <code>system</code>.
       Use <code>fork</code>, <code>pipe</code> and <code>execve</code> instead.
d1129 1
a1129 1
       descriptors, you can still use <code>/dev/fd/0</code>.
d1140 2
a1141 2
       keep that under <code>inetd</code>
       control and just add the relevant entries to <code>inetd.conf</code>.
d1151 1
a1151 1
       See the <code>xkobo</code> port for an instance of such a change.
d1159 2
a1160 2
       your <code>PATH</code> (never use <code>system</code> with an
       unqualified name, avoid <code>execvp</code>), but also more subtle
d1163 4
a1166 4
       programs you call directly won't necessarily. <strong>Never</strong>
       use <code>system</code> in privileged programs, build your command
       line, a controlled environment, and call <code>execve</code> directly.
       The <code>perlsec</code> man page is a good tutorial on such problems.
d1179 1
a1179 1
       OpenBSD <code>issetugid</code> addresses this problem, from the
d1188 1
a1188 1
   <li><code>__OpenBSD__</code> should be used sparingly, if at all.
d1193 1
a1193 1
       are often inappropriate. Don't add blindly <code>__OpenBSD__</code>
d1197 1
a1197 1
       into BSD.  Checking the numeric value of <code>BSD</code> against known
d1201 2
a1202 2
   <li>Defining <code>BSD</code> is a bad idea. Try to include <code>sys/param.h</code>.
       This not only defines <code>BSD</code>, it also gives it a proper value.
d1210 1
a1210 1
       better to test whether <code>tcgetattr</code> works than whether
d1214 1
a1214 1
       <code>HAVE_TCGETATTR</code> defines, then proceed to the next system.
d1217 1
a1217 1
       <code>-DHAVE_XXX</code> defines to the Makefile.  One may also write
d1229 1
a1229 1
       to fix. It becomes harder to <em>not</em> include one particular file
d1236 1
a1236 1
       <code>#define POSIX_C_SOURCE</code>
d1241 2
a1242 2
       places include <code>unistd.h</code>, <code>fcntl.h</code> or
       <code>termios.h</code>.
d1244 1
a1244 1
       You might need another slew of <code>HAVE_XXX</code> macros to
d1250 2
a1251 2
       to other systems (<code>unsigned long</code> instead of
       <code>size_t</code>), or get some <code>const</code> status wrong.
d1254 1
a1254 1
       <code>strlen</code> if you include the right header file.
d1258 1
a1258 1
           <code>implicit declaration of function foo()</code>
d1301 7
a1307 7
   <li>Recent versions of <code>bsd.port.mk</code> set the installers
       path. Specifically, they set <code>/usr/bin</code> and
       <code>/bin</code> to be searched <em>before</em>
       <code>/usr/local/bin</code> and <code>/usr/X11R6/bin</code>.
   <li>Do <em>NOT</em> generate shared libraries if
       <code>${NO_SHARED_LIBS}</code> is set to yes (beware, it can be defined
       only after inclusion of <code>bsd.port.mk</code>). If your port has
d1309 1
a1309 1
       <code>CONFIGURE_ARGS += ${CONFIGURE_SHARED}</code> to the Makefile.
d1311 2
a1312 2
       <code>bsd.port.mk</code>, as people are supposed to update their
       whole ports tree, including <code>bsd.port.mk</code>.
d1314 1
a1314 1
   <li>Prefer using <code>update-plist</code> to generate and update
d1317 1
a1317 1
       <code>update-plist</code> can detect most file types and copy most
d1319 1
a1319 1
   <li>Add <code>USE_SYSTRACE=Yes</code> to <code>/etc/mk.conf</code> to
d1321 1
a1321 1
   <li>In OpenBSD <code>curses.h/libcurses/libtermlib</code> are the
d1323 1
a1323 1
       <code>ncurses.h ==&gt; curses.h</code><br>
d1325 3
a1327 3
       <code>_USE_OLD_CURSES_</code>
       before including <code>curses.h</code> (usually in a Makefile) and
       linking with <code>-locurses</code>.
d1329 1
a1329 1
       <code>sgtty</code> to the newer POSIX <code>tcgetattr</code> family.
d1331 3
a1333 3
       <code>tcgetattr</code> to be a synonym for the older
       <code>sgtty</code>, but this is at best a stopgap measure on OpenBSD.
       The <code>xterm</code> source code is a very good example of
d1342 1
a1342 1
       also background (<code>SIGTSTP</code>). You should always leave
d1354 1
a1354 1
       <code>TERMCAP</code> variable and get it to work properly.
d1356 1
a1356 1
       Use <code>sigaction</code> to ensure a specific semantics, along
d1403 1
a1403 1
<small>$OpenBSD: guide.html,v 1.14 2011/11/03 21:30:33 schwarze Exp $</small>
@


1.14
log
@More details about the two quite different use cases of DIST_SUBDIR.
Wording improved by and OK sthen@@.
@
text
@d530 2
a531 1
Mail <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> with a short
d1403 1
a1403 1
<small>$OpenBSD: guide.html,v 1.13 2010/11/21 10:26:03 espie Exp $</small>
@


1.13
log
@synch with reality, somewhat:
- infrastructure scripts have moved, and resolve-lib has never been part
of lib-depends-check.
- LIB_DEPENDS is less likely than RUN_DEPENDS to affect directory removal
in update-plist (it will only do so for SHARED_ONLY ports)
- inter-subpackages dependencies are totally handled, and there's no way
to put libraries in front of LIB_DEPENDS anymore.
- document the new dir/foo>=version

- remind people that version numbers must go forward.

- why do people insist on using make search ?
make key=value is so much better.
- fix LIB_DEPENDS example, which never worked anyways
@
text
@d196 6
a201 2
If necessary, gently ask the original program author to make such
distinctions clear.
d205 4
a208 3
<li>
DIST_SUBDIR must not include version numbers. When the port is updated to a later version, some distfiles may not change, but will be
refetched if DIST_SUBDIR is changed. Even if all distfiles change, it is easier for the user to track cruft.
d1402 1
a1402 1
<small>$OpenBSD: guide.html,v 1.12 2010/09/19 13:35:40 jim Exp $</small>
@


1.12
log
@Align handbook navigation with the standard FAQ.
Massive trailing white space clean up.

ok sthen@@
@
text
@d484 2
a485 1
If you added to <code>LIB_DEPENDS</code>, Re-run <b>make plist</b>. It
d783 1
a783 1
MULTI_PACKAGE setups used to be asymmetric, with a -main subpackage and other
d790 5
a794 6
Specific attention must be provided to library inter-dependencies: they cannot
be specified as WANTLIB, since WANTLIB do not contain any marker that says
which package they come from. Rather, they must be specified as LIB_DEPENDS.
Normal LIB_DEPENDS are checked at the start of build, and during packaging.
If a LIB_DEPENDS specifies one of the subpackages currently being built,
then the infrastructure will detect this and only check the dependency
d895 3
d983 4
d1397 1
a1397 1
<small>$OpenBSD: guide.html,v 1.11 2010/07/29 05:29:30 steven Exp $</small>
@


1.11
log
@sync shared libs doc, example plist, plus some tweaks and typos
bump copyright year as well

from Daniel Dickman
@
text
@d29 1
a29 1
   
d37 1
d68 1
a68 1
 
d88 1
a88 1
   First look at the porting information on this page. 
d123 5
a127 5
<li> 
If you want to be a maintainer, subscribe to 
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org.</a> 
<ul><li> 
This is where all ports discussions take place.  
d141 1
a141 1
Check out a copy of the ports tree from cvs. 
d147 1
a147 1
<br><br><li> 
d151 1
a151 1
or <code>/usr/ports/mystuff/&lt;category&gt;/</code> and create the basic 
d153 1
a153 1
<code>/usr/ports/infrastructure/templates/Makefile.template</code>.  
d157 2
a158 2
<br><li> 
Add the fetch portions of the Makefile.  
d167 3
a169 3
is kept.  E.g., ftp://ftp.openbsd.org/pub/OpenBSD/distfiles/. 
<strong>Don't forget the trailing slash.</strong> 
Try to have at least three distinct sites as well. 
d177 1
a177 1
<b>make fetch-all</b>. 
d182 1
a182 1
You also have the variable PATCHFILES available.  This is a list of vendor 
d186 2
a187 2
If your ports are available over large public mirrors such as GNU, SunSite, or 
CPAN, we have already provided a list of sites for your use in 
d197 1
a197 1
distinctions clear. 
d200 1
a200 1
DISTDIR (/usr/ports/distfiles by default) too much. 
d203 1
a203 1
refetched if DIST_SUBDIR is changed. Even if all distfiles change, it is easier for the user to track cruft. 
d207 1
a207 1
retrieve foo-1.0.5.tar.gz from MASTER_SITES5. 
d212 1
a212 1
mirror-distfiles will fetch those supplementary files that the casual user doesn't need. 
d221 1
a221 1
mentioned in the IGNOREFILES variable. 
d226 1
a226 1
some special treatment, they will be removed from EXTRACT_ONLY and handled manually at post-extract stage. 
d229 1
a229 1
in the port). 
d231 1
a231 1
Patches that need specific treatment should be mentioned in DISTFILES, and removed from EXTRACT_ONLY, for historic reasons. 
d235 1
a235 1
Extract the port with <b>make extract</b>.  Pay attention to where the base 
d241 1
a241 1
the port and any special options that might be needed. 
d246 1
a246 1
a few are not.  We need four questions answered to distribute ports 
d260 2
a261 2
later on.  E.g., some ports require to install a copy of the license.  We 
recommend you place the license in 
d264 1
a264 1
In addition to the PERMIT_* values, put a license marker like 
d266 1
a266 1
the PERMIT_* values are set the way they are. 
d271 3
a273 3
You can add a port configuration script named `configure' to a directory 
named <code>scripts/</code>. This will be run before any configuration 
specified by CONFIGURE_STYLE is run. 
d276 1
a276 1
to see what options are available.  
d278 2
a279 2
Anything that you may want to override can be changed by adding the 
--option flags to the CONFIGURE_ARGS parameter in the Makefile.  
d281 1
a281 1
Use CONFIGURE_ARGS+= to append to the variable.  CONFIGURE_ARGS= will 
d286 1
a286 1
Try building the port with <b>make build</b>.  
d288 1
a288 1
If you're lucky, the port will go all the way through without errors.  
d303 2
a304 2
<li>The easiest way to reset the port and test your patches is 
<b>make clean patch</b>. This will delete the work directory, re-extract, 
d309 3
a311 3
Begin a cycle of <b>make build</b>, generate a patch using <b>make 
update-patches</b>, and 
<b>make clean patch</b>. 
d315 1
a315 1
patch-FILENAME where FILENAME is the name of the file it is patching. 
d318 2
a319 2
Applying PATCHFILES is the first half of the make patch stage. It can be 
invoked separately as make distpatch, which is a convenient target for 
d329 1
a329 1
will replace.  If they do, your patches won't apply after you check 
d403 1
a403 1
distinct arches simultaneously may be met with problems, as some 
d409 2
a410 2
(max. 60 characters). Do <strong>NOT</strong> include the package 
name (or version number of the software) in the comment. 
d444 1
a444 1
<code>pkg/SECURITY</code> file.  This file 
d448 1
a448 1
<pre> 
d465 2
a466 2
<b>make plist</b> which makes the file PLIST in the <i>pkg</i> directory. 
This file is a candidate packing list.  
d476 1
a476 1
PFRAG.shared describes only the files being additionally installed on those architectures that support 
d479 1
a479 1
PFRAG.noshared describes only the files being additionally installed on architectures that do not 
d491 1
a491 1
When dealing with multi-packages, it may instead be convenient to use 
d509 1
a509 1
You may want to read 
d513 1
a513 1
Check for regression tests, and whether they run cleanly. Set 
d545 2
a546 2
If you do not have CVS access, ask someone on 
<a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a> to commit it.  
d556 1
a556 1
about that! :-) If you make changes to a specific file (edit, then 
d600 1
a600 1
$ 
d611 2
a612 2
Maintain the port!  As time goes by, problems may arise, or new versions 
of the software may be released. You should strive to keep your port up 
d617 1
a617 1
port that depends on yours. In case of problems, communicate with the 
d621 1
a621 1
 
d721 2
a722 2
the various packages, and fill in the comments and descriptions. 
The end-user will be able to just install the package(s) they want.  
d742 2
a743 2
separate subpackage (MULTI_PACKAGES=-core -x11), you could create a 
pseudo flavor no_x11 that avoids building the -x11 subpackage.  
d758 1
a758 1
FLAVOR ?= 
d798 1
a798 1
The infrastructure provides specific variables to help in writing 
d809 1
a809 1
FLAVOR ?= 
d849 2
a850 2
FLAVOR, and some don't. 
For instance, some ports include a large set of documentation that does not 
d866 1
a866 1
WANTLIB-core = c m 
d886 1
a886 1
information should end at the end of the package name, except for 
d916 1
a916 1
often be able to cope with small changes, like program name changes, or 
d928 1
a928 1
<p>You should note that part of the update process, especially the 
d949 1
a949 1
  run on OpenBSD. You must endeavor to get OpenBSD patches into the next 
d978 1
a978 1
  package implies a bump. This includes <code>HOMEPAGE</code>, 
d982 1
a982 1
  <li>Changes to make sure a port does not pick/does pick an external 
d994 1
a994 1
  <li>run <code>make patch</code> to have an initial copy of the port before 
d1009 1
a1009 1
  diff between the old and the new version, and bump library versions 
d1011 1
a1011 1
  <li>Be aware of conflicts with already built packages. For simple 
d1015 1
a1015 1
  <li>Help the user. If some specific steps must be taken beyond 
d1378 1
a1378 1
   
d1380 1
d1390 1
a1390 1
<small>$OpenBSD: guide.html,v 1.9 2010/02/24 16:39:16 sthen Exp $</small>
@


1.10
log
@recommend using $PKG_PATH when working with pkg_add(1);
suggested by sthen@@
@
text
@d14 1
a14 1
Copyright (c) 2005-2009 XXX
d424 1
a424 1
<br><li>
@


1.9
log
@- suggest that people take particular care of configure output
for hidden deps
- instead of make lib-depends-check && make clean=package, suggest
that people use port-lib-depends-check
- mention REGRESS_DEPENDS
- ask people to test 'make clean'

reads well to schwarze@@
@
text
@d494 3
a496 1
>pkg_delete(1)</a> directly.
d1388 1
a1388 1
<small>$OpenBSD: guide.html,v 1.8 2010/02/24 06:55:04 schwarze Exp $</small>
@


1.8
log
@improve the instructions at multiple points:
 * move the sentence about keeping the ports tree up to date
   to the paragraph about the ports tree, and make it more explicit
   that the base OS and installed ports also need to be up to date
 * explain where to pick a category, where to put it in the Makefile,
   and where to put the new port
 * avoid possible confusion about how to test the packaging
 * mention "make [un]install"
 * link the pkg_add(1) and pkg_delete(1) manuals

using help and suggestions from landry@@, steven@@ and sthen@@
ok sthen@@; ok on slightly earlier versions landry@@, steven@@
@
text
@d498 4
a501 3
mentioned in DEPENDS, and nothing more. Check names for hidden dependencies
(stuff that exists elsewhere in the ports tree and might be detected if the
user installs some other ports first).
d503 1
a503 1
Verify shared library dependencies. Run <code>make lib-depends-check</code>
d505 1
a505 2
that is needed until it runs cleanly (run <code>make clean=package</code>
to remove the old package after updating the port's Makefile).
d512 2
d517 4
d1386 1
a1386 1
<small>$OpenBSD: guide.html,v 1.7 2010/02/23 15:00:43 schwarze Exp $</small>
@


1.7
log
@simplify explanation, content is effectively unchanged;
ok landry@@ steven@@ sthen@@
@
text
@d143 2
d147 5
a151 2
Pick a place to put your port and create the basic 
infrastructure there.  Use the template Makefile at 
d153 1
a153 6
As you are a port developer, you are supposed to update
your ports tree, including bsd.port.mk.
<ul><li>
Create the directory <code>pkg</code>. 
<li>
Create the empty files <code>pkg/DESCR, pkg/PLIST</code>.
d487 9
a495 5
Test the packaging.
After the port installs correctly issue the command
<code>make package</code> to create a package.  To test the
package first do a <code>pkg_add</code> and then do a
<code>pkg_delete</code>   
d1380 1
a1380 1
<small>$OpenBSD: guide.html,v 1.6 2009/10/13 14:43:30 landry Exp $</small>
@


1.6
log
@WRKOBJDIR defaults changed (obj -> pobj)
@
text
@d417 2
a418 3
Edit <i>pkg/DESCR</i>, <i>pkg/PLIST</i>.
<ul><li>
DESCR is a longer description of the port. One to a few paragraphs
a421 2
<li>
PLIST is kept empty at this point.
d1376 1
a1376 1
<small>$OpenBSD: guide.html,v 1.5 2009/10/13 10:19:51 steven Exp $</small>
@


1.5
log
@some tweaks and additions

reads fine to landry@@ and naddy@@
@
text
@d235 1
a235 1
of the sources are.  Usually, it's <i>/usr/ports/obj/${PKGNAME}${FLAVOR_EXT}/${DISTNAME}</i>. You may need to
d1379 1
a1379 1
<small>$OpenBSD: guide.html,v 1.4 2009/10/11 20:59:43 steven Exp $</small>
@


1.4
log
@fix href
@
text
@d78 3
a80 3
   author about it</em>, including problems you may find. If licensing
   information appears incorrect tell him.  If you had to jump through
   hoops to make the port build, tell him what he can fix.  If they are
d96 2
a97 2
   its address to <a href="mailto:ports@@openbsd.org">ports@@openbsd.org</a>
   or send the port mime encoded to the same address.  Pick whichever
a147 1
NEED_VERSION is obsolete and should not be used in new ports.
d165 1
a165 1
Fill in MASTER_SITES which is a URL to the directory where the distfile
d194 3
a196 2
don't retrieve foo-latest.tar.gz if it is a link to foo-1.0.5.tar.gz. If necessary, gently ask the original program author
to make such distinctions clear. 
d199 1
a199 1
/usr/ports/distfiles too much. 
d222 2
a223 1
All files in DISTFILES are usually processed during make extract. EXTRACT_ONLY may be used to limit extraction to a
d235 1
a235 1
of the sources are.  Usually, it's <i>w-${PKGNAME}${FLAVOR_EXT}/${DISTNAME}</i>. You may need to
d289 2
a290 2
If it exits with an error, you will need to generate patches for your port.  
Figure out what needs to be changed and make a patch for it.  
d294 1
a294 1
<b>cd `make show=${WRKSRC}` ; cp foo/bar.c{,.orig} </b>
d302 1
a302 1
<li> The easiest way to reset the port and test your patches is 
d308 2
a309 2
Begin a cycle of <b>make build</b>, generate a patch (or use <b>make 
update-patches</b>), and 
d313 1
a313 1
* being something meaningful.  We recommend you name your patches 
d321 1
a321 1
Only patch one source file per patchfile, please.
d331 2
a332 2
Write a small explanation at the beginning of the patchfile about its purpose
(not mandatory).
d358 2
a359 1
to be modified.  This also guarantees that the files will be included in
d361 2
d439 1
a439 1
<code>file</code> to determine if a binary is stripped or not.
d462 3
a464 2
generated packing-lists). Remember that <code>(U)pdate</code> does not
touch <code>/etc</code>...
a485 7
Verify shared library dependencies. Run <code>make port-lib-depends-check</code>
and add every <code>LIB_DEPENDS</code> or <code>WANTLIB</code> annotation
that is needed until it runs cleanly.
You may want to read 
<a href="#PortsUpdate">the update guidelines</a>
to understand why this is so important.
<br><br><li>
d516 2
a517 1
this email and send it out (mailinglist archives just contain the mails itself).
d521 1
a521 1
The AMD64 Opteron systems are good because they are fast, and because
a580 3
I ports/lang/kaffe1/CVS
I ports/lang/kaffe1/files/CVS
I ports/lang/kaffe1/pkg/CVS
d652 1
a652 1
By this point, you should have a fair understanding of your ports' working.
d689 2
a690 2
In this case, try a MULTI_PACKAGES: set the MULTI_PACKAGES variable to
a list of -sub packages, add COMMENTS, and look at your packaging.
d698 1
a698 1
You will also need to specify separate PKGNAMES for all subpackages.
d706 1
a706 1
It is usually time to check that your multi packaging "works", and that
d714 4
a717 4
But wait. What about the build, you say ?  Well, having a lot of dependencies 
during build is not a 
problem. Most packages are built by the OpenBSD team using special build
runs (known as bulk-builds) where a developer just builds all possible
d791 1
a791 1
It is highly recommanded to use this variable instead of rolling your own:
d822 1
a822 1
<h3>2.3.5 - True FLAVORS, and PKGNAMES</h3>
d826 1
a826 1
some configuration options, and usually additions to various depends.
d890 1
a890 1
<p>Since OpenBSD 3.8, pkg_add can update packages. So maintainers have to
d952 2
a953 1
  <li>If the port uses libtool, copy its log verbatim as a basis for your
d1348 10
d1379 1
a1379 1
<small>$OpenBSD: guide.html,v 1.2 2009/06/18 21:15:28 landry Exp $</small>
@


1.3
log
@Typos, from Rogier Krieger on www@@, thanks!
@
text
@d1038 1
a1038 1
       this page's <a href="#Security">security section</a>.
@


1.2
log
@Add a little blurb explaining how to patch a file and use make
update-patches.
@
text
@d662 1
a662 1
if it always work, and if the dependencies are quite small.   Take special
d668 1
a668 1
Considering all possibly options, you should be left with a
d1372 1
a1372 1
<small>$OpenBSD: guide.html,v 1.1.1.1 2009/06/18 16:20:42 sthen Exp $</small>
@


1.1
log
@Initial revision
@
text
@d291 10
a300 1
Patches must be relative to ${WRKDIST}.  
d1372 1
a1372 1
<small>$OpenBSD$</small>
@


1.1.1.1
log
@Import a Porter's Handbook to the faq; based on and in future to replace
the various scattered porting documentation on the website.

This is still a work in progress and being imported but not yet linked
to allow simpler collaborative work.

Slight reworking of a submission from Daniel Dickman; big thanks :)
Discussed with many. Nick agrees with this going into the faq providing
people help maintain it.
@
text
@@
