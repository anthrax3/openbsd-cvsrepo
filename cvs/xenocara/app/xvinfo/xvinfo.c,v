head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_0_2:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.05.10.10.23.16;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	nt0NbYf9xcTy8jKn;

1.4
date	2013.03.09.15.28.07;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.06.21.00.44;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.24.15.27.08;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.10.47.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.10.47.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.16.17.26.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xvinfo 1.1.3
@
text
@#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/extensions/Xvlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

static char *progname;

static void _X_NORETURN _X_COLD
PrintUsage(void)
{
    fprintf(stderr, "Usage: %s [-display host:dpy] [-short] [-version]\n",
            progname);
    exit(0);
}

int
main(int argc, char *argv[])
{
    Display *dpy;
    unsigned int ver, rev, eventB, reqB, errorB;
    int i, j, k, n;
    unsigned int nencode, nadaptors;
    int nscreens, nattr, numImages;
    XvAdaptorInfo *ainfo;
    XvAttribute *attributes;
    XvEncodingInfo *encodings;
    XvFormat *format;
    XvImageFormatValues *formats;
    char *disname = NULL;
    char shortmode = 0;

    progname = argv[0];

    if ((argc > 4))
        PrintUsage();

    if (argc != 1) {
        for (i = 1; i < argc; i++) {
            if (!strcmp(argv[i], "-display")) {
                if (++i >= argc) {
                    fprintf (stderr, "%s: missing argument to -display\n",
                             progname);
                    PrintUsage();
                }
                disname = argv[i];
            }
            else if (!strcmp(argv[i], "-short"))
                shortmode = 1;
            else if (!strcmp(argv[i], "-version")) {
                printf("%s\n", PACKAGE_STRING);
                exit(0);
            }
            else {
                fprintf (stderr, "%s: unrecognized argument '%s'\n",
                         progname, argv[i]);
                PrintUsage();
            }
        }
    }

    if (!(dpy = XOpenDisplay(disname))) {
        fprintf(stderr, "%s:  Unable to open display %s\n", progname,
                (disname != NULL) ? disname : XDisplayName(NULL));
        exit(-1);
    }

    if ((Success != XvQueryExtension(dpy, &ver, &rev, &reqB, &eventB, &errorB))) {
        fprintf(stderr, "%s: No X-Video Extension on %s\n", progname,
                (disname != NULL) ? disname : XDisplayName(NULL));
        exit(0);
    }
    else {
        fprintf(stdout, "X-Video Extension version %i.%i\n", ver, rev);
    }

    nscreens = ScreenCount(dpy);

    for (i = 0; i < nscreens; i++) {
        fprintf(stdout, "screen #%i\n", i);
        XvQueryAdaptors(dpy, RootWindow(dpy, i), &nadaptors, &ainfo);

        if (!nadaptors) {
            fprintf(stdout, " no adaptors present\n");
            continue;
        }

        for (j = 0; j < nadaptors; j++) {
            fprintf(stdout, "  Adaptor #%i: \"%s\"\n", j, ainfo[j].name);
            fprintf(stdout, "    number of ports: %li\n", ainfo[j].num_ports);
            fprintf(stdout, "    port base: %li\n", ainfo[j].base_id);
            fprintf(stdout, "    operations supported: ");
            switch (ainfo[j].type & (XvInputMask | XvOutputMask)) {
            case XvInputMask:
                if (ainfo[j].type & XvVideoMask)
                    fprintf(stdout, "PutVideo ");
                if (ainfo[j].type & XvStillMask)
                    fprintf(stdout, "PutStill ");
                if (ainfo[j].type & XvImageMask)
                    fprintf(stdout, "PutImage ");
                break;
            case XvOutputMask:
                if (ainfo[j].type & XvVideoMask)
                    fprintf(stdout, "GetVideo ");
                if (ainfo[j].type & XvStillMask)
                    fprintf(stdout, "GetStill ");
                break;
            default:
                fprintf(stdout, "none ");
                break;
            }
            fprintf(stdout, "\n");

            format = ainfo[j].formats;

            if (!shortmode) {
                fprintf(stdout, "    supported visuals:\n");
                for (k = 0; k < ainfo[j].num_formats; k++, format++) {
                    fprintf(stdout, "      depth %i, visualID 0x%2lx\n",
                            format->depth, format->visual_id);
                }
            }

            attributes = XvQueryPortAttributes(dpy, ainfo[j].base_id, &nattr);

            if (attributes && nattr) {
                fprintf(stdout, "    number of attributes: %i\n", nattr);

                for (k = 0; k < nattr; k++) {
                    fprintf(stdout, "      \"%s\" (range %i to %i)\n",
                            attributes[k].name,
                            attributes[k].min_value, attributes[k].max_value);

                    if (attributes[k].flags & XvSettable) {
                        if (!shortmode)
                            fprintf(stdout,
                                    "              client settable attribute\n");
                        else
                            fprintf(stdout, "              settable");
                    }

                    if (attributes[k].flags & XvGettable) {
                        Atom the_atom;

                        int value;

                        if (!shortmode)
                            fprintf(stdout,
                                    "              client gettable attribute");
                        else
                            fprintf(stdout, ", gettable");

                        the_atom = XInternAtom(dpy, attributes[k].name, True);

                        if (the_atom != None) {
                            if ((Success == XvGetPortAttribute(dpy,
                                                               ainfo[j].base_id,
                                                               the_atom,
                                                               &value)))
                                fprintf(stdout, " (current value is %i)",
                                        value);
                        }
                        fprintf(stdout, "\n");
                    }
                    else if (shortmode)
                        fprintf(stdout, "\n");

                }
                XFree(attributes);
            }
            else {
                fprintf(stdout, "    no port attributes defined\n");
            }

            XvQueryEncodings(dpy, ainfo[j].base_id, &nencode, &encodings);

            if (encodings && nencode) {
                unsigned int ImageEncodings = 0;

                for (n = 0; n < nencode; n++) {
                    if (!strcmp(encodings[n].name, "XV_IMAGE"))
                        ImageEncodings++;
                }

                if (nencode - ImageEncodings) {
                    fprintf(stdout, "    number of encodings: %i\n",
                            nencode - ImageEncodings);

                    for (n = 0; n < nencode; n++) {
                        if (strcmp(encodings[n].name, "XV_IMAGE")) {
                            fprintf(stdout, "      encoding ID #%li: \"%s\"\n",
                                    encodings[n].encoding_id,
                                    encodings[n].name);
                            fprintf(stdout, "        size: %li x %li\n",
                                    encodings[n].width, encodings[n].height);
                            fprintf(stdout, "        rate: %f\n",
                                    (float) encodings[n].rate.numerator /
                                    (float) encodings[n].rate.denominator);
                        }
                    }
                }

                if (ImageEncodings && (ainfo[j].type & XvImageMask)) {
                    for (n = 0; n < nencode; n++) {
                        if (!strcmp(encodings[n].name, "XV_IMAGE")) {
                            fprintf(stdout,
                                    "    maximum XvImage size: %li x %li\n",
                                    encodings[n].width, encodings[n].height);
                            break;
                        }
                    }

                    formats =
                        XvListImageFormats(dpy, ainfo[j].base_id, &numImages);

                    fprintf(stdout, "    Number of image formats: %i\n",
                            numImages);

                    for (n = 0; n < numImages; n++) {
                        char imageName[5];

                        snprintf(imageName, sizeof(imageName), "%c%c%c%c",
                                 formats[n].id & 0xff,
                                (formats[n].id >> 8) & 0xff,
                                (formats[n].id >> 16) & 0xff,
                                (formats[n].id >> 24) & 0xff);
                        fprintf(stdout, "      id: 0x%x", formats[n].id);
                        if (isprint(imageName[0]) && isprint(imageName[1]) &&
                            isprint(imageName[2]) && isprint(imageName[3])) {
                            fprintf(stdout, " (%s)\n", imageName);
                        }
                        else {
                            fprintf(stdout, "\n");
                        }
                        if (!shortmode) {
                            fprintf(stdout, "        guid: ");
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[0]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[1]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[2]);
                            fprintf(stdout, "%02x-", (unsigned char)
                                    formats[n].guid[3]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[4]);
                            fprintf(stdout, "%02x-", (unsigned char)
                                    formats[n].guid[5]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[6]);
                            fprintf(stdout, "%02x-", (unsigned char)
                                    formats[n].guid[7]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[8]);
                            fprintf(stdout, "%02x-", (unsigned char)
                                    formats[n].guid[9]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[10]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[11]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[12]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[13]);
                            fprintf(stdout, "%02x", (unsigned char)
                                    formats[n].guid[14]);
                            fprintf(stdout, "%02x\n", (unsigned char)
                                    formats[n].guid[15]);

                            fprintf(stdout, "        bits per pixel: %i\n",
                                    formats[n].bits_per_pixel);
                            fprintf(stdout, "        number of planes: %i\n",
                                    formats[n].num_planes);
                            fprintf(stdout, "        type: %s (%s)\n",
                                    (formats[n].type == XvRGB) ? "RGB" : "YUV",
                                    (formats[n].format ==
                                     XvPacked) ? "packed" : "planar");

                            if (formats[n].type == XvRGB) {
                                fprintf(stdout, "        depth: %i\n",
                                        formats[n].depth);

                                fprintf(stdout,
                                        "        red, green, blue masks: "
                                        "0x%x, 0x%x, 0x%x\n",
                                        formats[n].red_mask,
                                        formats[n].green_mask,
                                        formats[n].blue_mask);
                            }
                            else {

                            }
                        }

                    }
                    if (formats)
                        XFree(formats);
                }

                XvFreeEncodingInfo(encodings);
            }

        }

        XvFreeAdaptorInfo(ainfo);
    }
    return 1;
}
@


1.4
log
@Update to xvinfo 1.1.2
@
text
@d13 3
a15 1
static void _X_NORETURN
d18 2
a19 1
    fprintf(stderr, "Usage:  xvinfo [-display host:dpy] [-short] [-version]\n");
d39 2
d47 6
a52 2
                disname = argv[i + 1];
                i++;
d61 2
d69 1
a69 1
        fprintf(stderr, "xvinfo:  Unable to open display %s\n",
d75 1
a75 1
        fprintf(stderr, "xvinfo: No X-Video Extension on %s\n",
d184 1
a184 1
                int ImageEncodings = 0;
a209 2
                    char imageName[5];

d226 4
a229 1
                        sprintf(imageName, "%c%c%c%c", formats[n].id & 0xff,
@


1.3
log
@Update to xvinfo 1.1.1. No functional change.
@
text
@d1 4
d13 1
a13 1
static void
d16 2
a17 2
   fprintf(stderr, "Usage:  xvinfo [-display host:dpy] [-short]\n");
   exit(0);
d20 2
a21 1
int main(int argc, char *argv[])
d24 2
a25 2
    unsigned int ver, rev, eventB, reqB, errorB; 
    int i, j, k, n; 
d33 1
a33 1
    char * disname = NULL;
d36 2
a37 2
    if((argc > 4))
       PrintUsage();
d39 16
a54 11
    if(argc != 1) {
       for ( i = 1; i < argc; i ++ ) {
           if(! strcmp(argv[i], "-display")) {
	       disname = argv[i + 1];
	       i ++;
	   } else if(! strcmp(argv[i], "-short") )
	       shortmode = 1;
	     else {
	       PrintUsage();
	     }
       }
d57 5
d63 4
a66 5
    if(!(dpy = XOpenDisplay(disname))) 
    {
	fprintf(stderr, "xvinfo:  Unable to open display %s\n",
                       (disname != NULL) ? disname : XDisplayName(NULL));
	exit(-1);
d68 2
a69 10

    if((Success != XvQueryExtension(dpy, &ver, &rev, &reqB, &eventB, &errorB))) 
    {
	fprintf(stderr, "xvinfo: No X-Video Extension on %s\n",
                        (disname != NULL) ? disname : XDisplayName(NULL));
	exit(0);
    } 
    else
    {
	fprintf(stdout, "X-Video Extension version %i.%i\n", ver, rev);
d74 198
a271 190
    for(i = 0; i < nscreens; i++) {
  	fprintf(stdout, "screen #%i\n", i);
	XvQueryAdaptors(dpy, RootWindow(dpy, i), &nadaptors, &ainfo);

	if(!nadaptors) {
	    fprintf(stdout, " no adaptors present\n");
	    continue;
	} 

	for(j = 0; j < nadaptors; j++) {
	    fprintf(stdout, "  Adaptor #%i: \"%s\"\n", j, ainfo[j].name);
	    fprintf(stdout, "    number of ports: %li\n", ainfo[j].num_ports);
	    fprintf(stdout, "    port base: %li\n", ainfo[j].base_id);
	    fprintf(stdout, "    operations supported: ");
	    switch(ainfo[j].type & (XvInputMask | XvOutputMask)) {
	    case XvInputMask:
	     if(ainfo[j].type & XvVideoMask) 
		fprintf(stdout, "PutVideo ");
	     if(ainfo[j].type & XvStillMask) 
		fprintf(stdout, "PutStill ");
	     if(ainfo[j].type & XvImageMask) 
		fprintf(stdout, "PutImage ");
	     break;
	    case XvOutputMask:
	     if(ainfo[j].type & XvVideoMask) 
		fprintf(stdout, "GetVideo ");
	     if(ainfo[j].type & XvStillMask) 
		fprintf(stdout, "GetStill ");
	     break;
	    default:
		fprintf(stdout, "none ");
		break;
	    }
	    fprintf(stdout, "\n");

	    format = ainfo[j].formats;

	    if ( ! shortmode ) {
		    fprintf(stdout, "    supported visuals:\n");
		    for(k = 0; k < ainfo[j].num_formats; k++, format++) {
		         fprintf(stdout, "      depth %i, visualID 0x%2lx\n",
				 format->depth, format->visual_id);
		    }
	    }

	    attributes = XvQueryPortAttributes(dpy, ainfo[j].base_id, &nattr);

	    if(attributes && nattr) {
		fprintf(stdout, "    number of attributes: %i\n", nattr);
		
		for(k = 0; k < nattr; k++) {
		    fprintf(stdout, "      \"%s\" (range %i to %i)\n",
					attributes[k].name, 
					attributes[k].min_value,
					attributes[k].max_value);

		    if(attributes[k].flags & XvSettable)
			if ( ! shortmode )
		    	  fprintf(stdout, "              client settable attribute\n");
		        else fprintf(stdout, "              settable");

		    if(attributes[k].flags & XvGettable) {
			Atom the_atom;
			int value;
			
			if ( ! shortmode )
		    	  fprintf(stdout, "              client gettable attribute");
			else fprintf(stdout, ", gettable");

			the_atom = XInternAtom(dpy, attributes[k].name, True);

			if(the_atom != None){
			   if((Success == XvGetPortAttribute(dpy, 
					ainfo[j].base_id, the_atom, &value)))
		    	       fprintf(stdout, " (current value is %i)", value);
			}
			fprintf(stdout, "\n");
		    }
		    else if (shortmode) 
			fprintf(stdout, "\n");

		}
		XFree(attributes);
	    } else {
		fprintf(stdout, "    no port attributes defined\n");
	    }

	    XvQueryEncodings(dpy, ainfo[j].base_id,
						&nencode, &encodings);

	    if(encodings && nencode) {
		int ImageEncodings = 0;

		for(n = 0; n < nencode; n++) {
		    if(!strcmp(encodings[n].name, "XV_IMAGE"))
			ImageEncodings++;
		}

		if(nencode - ImageEncodings) {
		    fprintf(stdout, "    number of encodings: %i\n", 
						nencode - ImageEncodings);

		    for(n = 0; n < nencode; n++) {
		    	if(strcmp(encodings[n].name, "XV_IMAGE")) {
			    fprintf(stdout, "      encoding ID #%li: \"%s\"\n",
					encodings[n].encoding_id,
					encodings[n].name);
			    fprintf(stdout, "        size: %li x %li\n",
					encodings[n].width,
					encodings[n].height);
			    fprintf(stdout, "        rate: %f\n",
					(float)encodings[n].rate.numerator/
					(float)encodings[n].rate.denominator);
			}
		    }
		}

		if(ImageEncodings && (ainfo[j].type & XvImageMask)) {
		   char imageName[5];

		   for(n = 0; n < nencode; n++) {
		      if(!strcmp(encodings[n].name, "XV_IMAGE")) {
			fprintf(stdout, 
				"    maximum XvImage size: %li x %li\n",	
				encodings[n].width, encodings[n].height);
			break;
		      }
		   }

                   formats = XvListImageFormats(
				dpy, ainfo[j].base_id, &numImages);

		   fprintf(stdout, "    Number of image formats: %i\n",
						numImages);

		   for(n = 0; n < numImages; n++) {
			sprintf(imageName, "%c%c%c%c", formats[n].id & 0xff,
				(formats[n].id >> 8) & 0xff,
				(formats[n].id >> 16) & 0xff,
				(formats[n].id >> 24) & 0xff);
			fprintf(stdout, "      id: 0x%x", formats[n].id);
			if(isprint(imageName[0]) && isprint(imageName[1]) &&
			  isprint(imageName[2]) && isprint(imageName[3])) 
			{
			  fprintf(stdout, " (%s)\n", imageName);
			} else {
			  fprintf(stdout, "\n");
			}
			if ( ! shortmode ) {
			    fprintf(stdout, "        guid: ");
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[0]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[1]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[2]);
			    fprintf(stdout, "%02x-", (unsigned char) 
						formats[n].guid[3]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[4]);
			    fprintf(stdout, "%02x-", (unsigned char) 
						formats[n].guid[5]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[6]);
			    fprintf(stdout, "%02x-", (unsigned char) 
						formats[n].guid[7]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[8]);
			    fprintf(stdout, "%02x-", (unsigned char) 
						formats[n].guid[9]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[10]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[11]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[12]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[13]);
			    fprintf(stdout, "%02x", (unsigned char) 
						formats[n].guid[14]);
			    fprintf(stdout, "%02x\n", (unsigned char) 
						formats[n].guid[15]);

			    fprintf(stdout, "        bits per pixel: %i\n",
					formats[n].bits_per_pixel);
			    fprintf(stdout, "        number of planes: %i\n",
					formats[n].num_planes);
			    fprintf(stdout, "        type: %s (%s)\n", 
			      (formats[n].type == XvRGB) ? "RGB" : "YUV",
			      (formats[n].format == XvPacked) ? "packed" : "planar");
d273 2
a274 2
			    if(formats[n].type == XvRGB) {
			        fprintf(stdout, "        depth: %i\n", 
d277 21
a297 19
			        fprintf(stdout, "        red, green, blue masks: " 
					"0x%x, 0x%x, 0x%x\n", 
					formats[n].red_mask,
					formats[n].green_mask,
					formats[n].blue_mask);
			    } else {

			    } 
			}
			
	
		   }
		   if(formats) XFree(formats);
		}

		XvFreeEncodingInfo(encodings);
	    }
	    
	}
d299 1
a299 1
	XvFreeAdaptorInfo(ainfo);
@


1.2
log
@Update to xvinfo 1.1.0
@
text
@a0 2
/* $XFree86: xc/programs/xvinfo/xvinfo.c,v 1.7 2001/10/28 03:34:43 tsi Exp $ */

@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
   fprintf(stderr, "Usage:  xvinfo [-display host:dpy]\n");
d31 1
d33 1
a33 1
    if((argc != 1) && (argc != 3))
d37 10
a46 3
       if(strcmp(argv[1], "-display"))
	  PrintUsage();
	disname = argv[2];
d107 4
a110 3
	    fprintf(stdout, "    supported visuals:\n");
	    for(k = 0; k < ainfo[j].num_formats; k++, format++) {
	         fprintf(stdout, "      depth %i, visualID 0x%2lx\n",
d112 1
d127 3
a129 1
		    	fprintf(stdout, "              client settable attribute\n");
d134 4
a138 1
		    	fprintf(stdout, "              client gettable attribute");
d146 1
a146 1
		        fprintf(stdout, "\n");
d148 2
d188 1
a188 1
		   char imageName[5] = {0, 0, 0, 0, 0};
d206 4
a209 1
			memcpy(imageName, &(formats[n].id), 4);
d218 3
a220 2
			fprintf(stdout, "        guid: ");
			fprintf(stdout, "%02x", (unsigned char) 
d222 1
a222 1
			fprintf(stdout, "%02x", (unsigned char) 
d224 1
a224 1
			fprintf(stdout, "%02x", (unsigned char) 
d226 1
a226 1
			fprintf(stdout, "%02x-", (unsigned char) 
d228 1
a228 1
			fprintf(stdout, "%02x", (unsigned char) 
d230 1
a230 1
			fprintf(stdout, "%02x-", (unsigned char) 
d232 1
a232 1
			fprintf(stdout, "%02x", (unsigned char) 
d234 1
a234 1
			fprintf(stdout, "%02x-", (unsigned char) 
d236 1
a236 1
			fprintf(stdout, "%02x", (unsigned char) 
d238 1
a238 1
			fprintf(stdout, "%02x-", (unsigned char) 
d240 1
a240 1
			fprintf(stdout, "%02x", (unsigned char) 
d242 1
a242 1
			fprintf(stdout, "%02x", (unsigned char) 
d244 1
a244 1
			fprintf(stdout, "%02x", (unsigned char) 
d246 1
a246 1
			fprintf(stdout, "%02x", (unsigned char) 
d248 1
a248 1
			fprintf(stdout, "%02x", (unsigned char) 
d250 1
a250 1
			fprintf(stdout, "%02x\n", (unsigned char) 
d253 1
a253 1
			fprintf(stdout, "        bits per pixel: %i\n",
d255 1
a255 1
			fprintf(stdout, "        number of planes: %i\n",
d257 3
a259 3
			fprintf(stdout, "        type: %s (%s)\n", 
			 (formats[n].type == XvRGB) ? "RGB" : "YUV",
			 (formats[n].format == XvPacked) ? "packed" : "planar");
d261 2
a262 2
			if(formats[n].type == XvRGB) {
			    fprintf(stdout, "        depth: %i\n", 
d265 1
a265 1
			    fprintf(stdout, "        red, green, blue masks: " 
d270 1
a270 1
			} else {
d272 1
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xvinfo 1.0.2
@
text
@d171 1
a171 1
		   char imageName[5];
d189 1
a189 4
			sprintf(imageName, "%c%c%c%c", formats[n].id & 0xff,
				(formats[n].id >> 8) & 0xff,
				(formats[n].id >> 16) & 0xff,
				(formats[n].id >> 24) & 0xff);
@

