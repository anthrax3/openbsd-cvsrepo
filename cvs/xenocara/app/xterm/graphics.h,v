head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.08.07.21.27.36;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	psxxjI5z4Vpv2LL4;

1.5
date	2015.09.05.14.11.46;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	YVUODLQ4QcYTuGkb;

1.4
date	2014.12.18.20.16.55;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	pCMhkpVdt9Oe52hU;

1.3
date	2014.07.14.08.30.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	EnwNNUjlkdrocnMa;

1.2
date	2014.05.09.19.56.40;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.26.20.06.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xterm-325. Testing by krw@@, shadchin@@ and naddy@@. Thanks
@
text
@/* $XTermId: graphics.h,v 1.23 2016/05/29 16:11:41 tom Exp $ */

/*
 * Copyright 2013-2015,2016 by Ross Combs
 * Copyright 2013-2015,2016 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 */

#ifndef included_graphics_h
#define included_graphics_h
/* *INDENT-OFF* */

#include <ptyx.h>

#if OPT_GRAPHICS

#define CHANNEL_MAX 100

typedef struct {
    short r, g, b;
} ColorRegister;

typedef unsigned short RegisterNum;

#define MAX_COLOR_REGISTERS 1024U
#define COLOR_HOLE ((RegisterNum)MAX_COLOR_REGISTERS)

#define MAX_GRAPHICS 16U

typedef struct {
    RegisterNum *pixels;
    ColorRegister *private_color_registers;
    ColorRegister *color_registers;
    char color_registers_used[MAX_COLOR_REGISTERS];
    XtermWidget xw;
    int max_width;              /* largest image which can be stored */
    int max_height;             /* largest image which can be stored */
    unsigned valid_registers;   /* for wrap-around behavior */
    int actual_width;           /* size of image before scaling */
    int actual_height;          /* size of image before scaling */
    int private_colors;         /* if not using the shared color registers */
    int charrow;                /* upper left starting point in characters */
    int charcol;                /* upper left starting point in characters */
    int pixw;                   /* width of graphic pixels in screen pixels */
    int pixh;                   /* height of graphic pixels in screen pixels */
    int bufferid;               /* which screen buffer the graphic is associated with */
    unsigned type;              /* type of graphic 0==sixel, 1...NUM_REGIS_PAGES==ReGIS page */
    unsigned id;                /* sequential id used for preserving layering */
    int valid;                  /* if the graphic has been initialized */
    int dirty;                  /* if the graphic needs to be redrawn */
    int hidden;                 /* if the graphic should not be displayed */
} Graphic;

extern Graphic *get_new_graphic(XtermWidget /* xw */, int /* charrow */, int /* charcol */, unsigned /* type */);
extern Graphic *get_new_or_matching_graphic(XtermWidget /* xw */, int /* charrow */, int /* charcol */, int /* actual_width */, int /* actual_height */, unsigned /* type */);
extern RegisterNum read_pixel(Graphic */* graphic */, int /* x */, int /* y */);
extern void draw_solid_pixel(Graphic */* graphic */, int /* x */, int /* y */, unsigned /* color */);
extern void draw_solid_rectangle(Graphic */* graphic */, int /* x1 */, int /* y1 */, int /* x2 */, int /* y2 */, unsigned /* color */);
extern void draw_solid_line(Graphic */* graphic */, int /* x1 */, int /* y1 */, int /* x2 */, int /* y2 */, unsigned /* color */);
extern void copy_overlapping_area(Graphic */* graphic */, int /* src_x */, int /* src_y */, int /* dst_x */, int /* dst_y */, unsigned /* w */, unsigned /* h */, unsigned /* default_color */);
extern void hls2rgb(int /* h */, int /* l */, int /* s */, short */* r */, short */* g */, short */* b */);
extern void dump_graphic(Graphic const */* graphic */);
extern unsigned get_color_register_count(TScreen const */* screen */);
extern void update_color_register(Graphic */* graphic */, unsigned /* color */, int /* r */, int /* g */, int /* b */);
extern RegisterNum find_color_register(ColorRegister const */* color_registers */, int /* r */, int /* g */, int /* b */);
extern void chararea_clear_displayed_graphics(TScreen const */* screen */, int /* leftcol */, int /* toprow */, int /* ncols */, int /* nrows */);
extern void pixelarea_clear_displayed_graphics(TScreen const */* screen */, int /* winx */, int /* winy */, int /* w */, int /* h */);
extern void refresh_displayed_graphics(XtermWidget /* xw */, int /* leftcol */, int /* toprow */, int /* ncols */, int /* nrows */);
extern void refresh_modified_displayed_graphics(XtermWidget /* xw */);
extern void reset_displayed_graphics(TScreen const */* screen */);
extern void scroll_displayed_graphics(XtermWidget /* xw */, int /* rows */);

#ifdef NO_LEAKS
extern void noleaks_graphics(void);
#endif

#else

#define get_new_graphic(xw, charrow, charcol, type) /* nothing */
#define get_new_or_matching_graphic(xw, charrow, charcol, actual_width, actual_height, type) /* nothing */
#define read_pixel(graphic, x, y) /* nothing */
#define draw_solid_pixel(graphic, x, y, color) /* nothing */
#define draw_solid_rectangle(graphic, x1, y1, x2, y2, color) /* nothing */
#define draw_solid_line(graphic, x1, y1, x2, y2, color) /* nothing */
#define copy_overlapping_area(graphic, src_x, src_y, dst_x, dst_y, w, h, default_color) /* nothing */
#define hls2rgb(h, l, s, r, g, b) /* nothing */
#define dump_graphic(graphic) /* nothing */
#define get_color_register_count(screen) /* nothing */
#define update_color_register(graphic, color, r, g, b) /* nothing */
#define find_color_register(color_registers, r, g, b) /* nothing */
#define chararea_clear_displayed_graphics(screen, leftcol, toprow, ncols, nrows) /* nothing */
#define pixelarea_clear_displayed_graphics(screen, winx, winy, w, h) /* nothing */
#define refresh_displayed_graphics(xw, leftcol, toprow, ncols, nrows) /* nothing */
#define refresh_modified_displayed_graphics(xw) /* nothing */
#define reset_displayed_graphics(screen) /* nothing */
#define scroll_displayed_graphics(xw, rows) /* nothing */

#endif

/* *INDENT-ON* */

#endif /* included_graphics_h */
@


1.5
log
@Update to xterm 320. Tested by jsg@@ Thanks.
@
text
@d1 1
a1 1
/* $XTermId: graphics.h,v 1.22 2015/04/23 00:47:24 tom Exp $ */
d4 2
a5 2
 * Copyright 2013-2014,2015 by Ross Combs
 * Copyright 2013-2014,2015 by Thomas E. Dickey
d79 18
a96 18
extern Graphic *get_new_graphic(XtermWidget xw, int charrow, int charcol, unsigned type);
extern Graphic *get_new_or_matching_graphic(XtermWidget xw, int charrow, int charcol, int actual_width, int actual_height, unsigned type);
extern RegisterNum read_pixel(Graphic *graphic, int x, int y);
extern void draw_solid_pixel(Graphic *graphic, int x, int y, unsigned color);
extern void draw_solid_rectangle(Graphic *graphic, int x1, int y1, int x2, int y2, unsigned color);
extern void draw_solid_line(Graphic *graphic, int x1, int y1, int x2, int y2, unsigned color);
extern void copy_overlapping_area(Graphic *graphic, int src_x, int src_y, int dst_x, int dst_y, unsigned w, unsigned h, unsigned default_color);
extern void hls2rgb(int h, int l, int s, short *r, short *g, short *b);
extern void dump_graphic(Graphic const *graphic);
extern unsigned get_color_register_count(TScreen const *screen);
extern void update_color_register(Graphic *graphic, unsigned color, int r, int g, int b);
extern RegisterNum find_color_register(ColorRegister const *color_registers, int r, int g, int b);
extern void chararea_clear_displayed_graphics(TScreen const *screen, int leftcol, int toprow, int ncols, int nrows);
extern void pixelarea_clear_displayed_graphics(TScreen const *screen, int winx, int winy, int w, int h);
extern void refresh_displayed_graphics(XtermWidget xw, int leftcol, int toprow, int ncols, int nrows);
extern void refresh_modified_displayed_graphics(XtermWidget xw);
extern void reset_displayed_graphics(TScreen const *screen);
extern void scroll_displayed_graphics(XtermWidget xw, int rows);
@


1.4
log
@Update to xterm 313. Tested by shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: graphics.h,v 1.20 2014/11/28 19:48:36 tom Exp $ */
d4 2
a5 2
 * Copyright 2013,2014 by Ross Combs
 * Copyright 2013,2014 by Thomas E. Dickey
d76 1
@


1.3
log
@Update to xterm-309. Version 308 tested by several people including
naddy@@ who found a small regression, fixed in 309.
@
text
@d1 1
a1 1
/* $XTermId: graphics.h,v 1.17 2014/07/13 00:56:45 Ross.Combs Exp $ */
d42 2
a44 1
    Pixel pix;
a45 1
    short allocated;
d50 1
a50 1
#define MAX_COLOR_REGISTERS 256U
a54 4
#define BUFFER_WIDTH 1000
#define BUFFER_HEIGHT 800
#define MAX_PIXELS (BUFFER_HEIGHT * BUFFER_WIDTH)

d92 2
a93 2
extern void refresh_displayed_graphics(TScreen const *screen, int leftcol, int toprow, int ncols, int nrows);
extern void refresh_modified_displayed_graphics(TScreen const *screen);
d95 1
a95 1
extern void scroll_displayed_graphics(int rows);
d117 2
a118 2
#define refresh_displayed_graphics(screen, leftcol, toprow, ncols, nrows) /* nothing */
#define refresh_modified_displayed_graphics(screen) /* nothing */
d120 1
a120 1
#define scroll_displayed_graphics(rows) /* nothing */
@


1.2
log
@Update to xterm 304. With help of shadchin@@

tested by ajacoutot@@ and shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: graphics.h,v 1.16 2014/04/25 21:30:23 Ross.Combs Exp $ */
d88 1
d113 1
@


1.1
log
@Update to xterm 296. Sixel graphics disabled for now.
@
text
@d1 1
a1 1
/* $XTermId: graphics.h,v 1.6 2013/07/10 08:28:55 Ross.Combs Exp $ */
d4 2
a5 2
 * Copyright 2013 by Ross Combs
 * Copyright 2013 by Thomas E. Dickey
d40 7
a46 1
#if OPT_SIXEL_GRAPHICS
d50 43
a93 2
extern void parse_regis(XtermWidget xw, ANSI *params, char const *string);
extern void parse_sixel(XtermWidget xw, ANSI *params, char const *string);
d99 4
a102 1
extern void update_displayed_graphics_color_registers(TScreen const *screen, RegisterNum color, short r, short g, short b);
d106 11
a117 2
#define parse_regis(xw, params, string) /* nothing */
#define parse_sixel(xw, params, string) /* nothing */
a122 1
#define update_displayed_graphics_color_registers(screen, color, r, g, b) /* nothing */
@

