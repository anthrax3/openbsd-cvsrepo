head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.16
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.14
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.12
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.10
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v232:1.1.1.2
	v229:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v225:1.1.1.1
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2013.01.04.16.40.18;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.07.20.20.23;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.17.11.51.57;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.08.12.20.46;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.25.22.03.51;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.05.15.58.09;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.06.20.10.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.19.21.15.46;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.02.16.09.35.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xterm 287. tested by mpi@@ and krw@@.
@
text
@/* $XTermId: tabs.c,v 1.43 2012/06/10 16:53:59 tom Exp $ */

/*
 * Copyright 2000-2011,2012 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 *
 *
 * Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
 *
 *                         All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in
 * supporting documentation, and that the name of Digital Equipment
 * Corporation not be used in advertising or publicity pertaining to
 * distribution of the software without specific, written prior permission.
 *
 *
 * DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
 * DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
 * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

/* tabs.c */

#include <xterm.h>
#include <data.h>

#define TAB_INDEX(n) ((n) >> TAB_BITS_SHIFT)
#define TAB_MASK(n)  (1 << ((n) & (TAB_BITS_WIDTH-1)))

#define SET_TAB(tabs,n) UIntSet(tabs[TAB_INDEX(n)], TAB_MASK(n))
#define CLR_TAB(tabs,n) UIntClr(tabs[TAB_INDEX(n)], TAB_MASK(n))
#define TST_TAB(tabs,n) (tabs[TAB_INDEX(n)] & (unsigned) TAB_MASK(n))

/*
 * places tabstops at only every 8 columns
 */
void
TabReset(Tabs tabs)
{
    int i;

    TabZonk(tabs);

    for (i = 0; i < MAX_TABS; i += 8)
	TabSet(tabs, i);
}

/*
 * places a tabstop at col
 */
void
TabSet(Tabs tabs, int col)
{
    if (col >= 0 && col < MAX_TABS) {
	SET_TAB(tabs, col);
    }
}

/*
 * clears a tabstop at col
 */
void
TabClear(Tabs tabs, int col)
{
    if (col >= 0 && col < MAX_TABS) {
	CLR_TAB(tabs, col);
    }
}

/*
 * returns the column of the next tabstop
 * (or MAX_TABS - 1 if there are no more).
 * A tabstop at col is ignored.
 */
static int
TabNext(XtermWidget xw, Tabs tabs, int col)
{
    TScreen *screen = TScreenOf(xw);

    if (screen->curses && screen->do_wrap && (xw->flags & WRAPAROUND)) {
	xtermIndex(xw, 1);
	set_cur_col(screen, 0);
	col = 0;
	ResetWrap(screen);
    }
    for (++col; col < MAX_TABS; ++col)
	if (TST_TAB(tabs, col))
	    return (col);

    return (MAX_TABS - 1);
}

/*
 * returns the column of the previous tabstop
 * (or 0 if there are no more).
 * A tabstop at col is ignored.
 */
static int
TabPrev(Tabs tabs, int col)
{
    for (--col; col >= 0; --col)
	if ((col < MAX_TABS) && TST_TAB(tabs, col))
	    return (col);

    return (0);
}

/*
 * Tab to the next stop, returning true if the cursor moved
 */
Bool
TabToNextStop(XtermWidget xw)
{
    TScreen *screen = TScreenOf(xw);
    int saved_column = screen->cur_col;
    int next = TabNext(xw, xw->tabs, screen->cur_col);
    int max = LineMaxCol(screen, getLineData(screen, screen->cur_row));

    if (IsLeftRightMode(xw))
	max = TScreenOf(xw)->rgt_marg;
    if (next > max)
	next = max;
    set_cur_col(screen, next);

    return (screen->cur_col > saved_column);
}

/*
 * Tab to the previous stop, returning true if the cursor moved
 */
Bool
TabToPrevStop(XtermWidget xw)
{
    TScreen *screen = TScreenOf(xw);
    int saved_column = screen->cur_col;
    int next_column = TabPrev(xw->tabs, screen->cur_col);

    if (xw->flags & ORIGIN) {
	int left = ScrnLeftMargin(xw);
	if (next_column < left)
	    next_column = left;
    }

    set_cur_col(screen, next_column);

    return (screen->cur_col < saved_column);
}

/*
 * clears all tabs
 */
void
TabZonk(Tabs tabs)
{
    memset(tabs, 0, sizeof(*tabs) * TAB_ARRAY_SIZE);
}
@


1.8
log
@Update to xterm 279. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.41 2012/05/02 14:14:36 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2010,2011 by Thomas E. Dickey
d117 1
a117 1
	screen->do_wrap = False;
@


1.7
log
@Update to xterm-275. Tested by jasper@@.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.39 2011/09/11 15:00:38 tom Exp $ */
d152 2
d169 1
d171 7
a177 1
    set_cur_col(screen, TabPrev(xw->tabs, screen->cur_col));
@


1.6
log
@Update to xterm 258. lightly tested by krw@@, thanks.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.38 2010/04/17 17:11:43 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2009,2010 by Thomas E. Dickey
d31 1
@


1.5
log
@Update to xterm-255. Tested by stsp@@, oga@@.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.37 2009/11/28 14:11:06 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2008,2009 by Thomas E. Dickey
d62 3
a64 3
#define SET_TAB(tabs,n) tabs[TAB_INDEX(n)] |=  TAB_MASK(n)
#define CLR_TAB(tabs,n) tabs[TAB_INDEX(n)] &= ~TAB_MASK(n)
#define TST_TAB(tabs,n) tabs[TAB_INDEX(n)] &   TAB_MASK(n)
@


1.4
log
@update to xterm 246. Has been in snapshots for some time.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.36 2009/06/21 14:34:17 tom Exp $ */
d110 1
a110 1
    TScreen *screen = &(xw->screen);
d146 1
a146 1
    TScreen *screen = &(xw->screen);
d164 1
a164 1
    TScreen *screen = &(xw->screen);
@


1.3
log
@xterm 238. includes fix for CVE-2008-2383.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.33 2008/12/30 10:18:14 tom Exp $ */
d4 1
a4 5
 *	$XFree86: xc/programs/xterm/tabs.c,v 3.14 2006/02/13 01:14:59 dickey Exp $
 */

/*
 * Copyright 2000-2006,2008 by Thomas E. Dickey
d149 1
a149 1
    int max = CurMaxCol(screen, screen->cur_row);
@


1.2
log
@update to xterm 234. tested by merdely@@, 'looks ok' deraadt@@.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.31 2008/02/24 17:35:03 Nemeth Exp $ */
d119 2
a120 1
	col = screen->do_wrap = 0;
d138 1
a138 1
	if (TST_TAB(tabs, col))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.27 2006/07/23 20:27:31 tom Exp $ */
d8 1
a8 1
 * Copyright 2000-2005,2006 by Thomas E. Dickey
d63 1
a63 5
/*
 * This file presumes 32bits/word.  This is somewhat of a crock, and should
 * be fixed sometime.
 */
#define TAB_INDEX(n) ((n) >> 5)
d78 1
a78 2
    for (i = 0; i < TAB_ARRAY_SIZE; ++i)
	tabs[i] = 0;
d90 3
a92 1
    SET_TAB(tabs, col);
d101 3
a103 1
    CLR_TAB(tabs, col);
d181 1
a181 4
    int i;

    for (i = 0; i < TAB_ARRAY_SIZE; ++i)
	tabs[i] = 0;
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@Import xterm version 232. tested by many.
@
text
@d1 1
a1 1
/* $XTermId: tabs.c,v 1.30 2008/01/13 20:14:33 tom Exp $ */
d8 1
a8 1
 * Copyright 2000-2006,2008 by Thomas E. Dickey
d63 5
a67 1
#define TAB_INDEX(n) ((n) >> TAB_BITS_SHIFT)
d95 1
a95 3
    if (col >= 0 && col < MAX_TABS) {
	SET_TAB(tabs, col);
    }
d104 1
a104 3
    if (col >= 0 && col < MAX_TABS) {
	CLR_TAB(tabs, col);
    }
@

