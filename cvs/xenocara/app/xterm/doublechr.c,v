head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.3.0.6
	OPENBSD_4_5_BASE:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v232:1.1.1.3
	v229:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v225:1.1.1.2
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.08.07.21.27.36;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	psxxjI5z4Vpv2LL4;

1.11
date	2014.07.14.08.30.11;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	EnwNNUjlkdrocnMa;

1.10
date	2014.05.09.19.56.40;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2014.01.02.15.14.50;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.07.20.20.23;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.17.11.51.57;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.22.13.38.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.08.12.20.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.25.22.03.51;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.05.15.58.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.09.22.13.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.06.15.19.30.20;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.02.16.09.34.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xterm-325. Testing by krw@@, shadchin@@ and naddy@@. Thanks
@
text
@/* $XTermId: doublechr.c,v 1.86 2016/05/17 08:33:58 tom Exp $ */

/*
 * Copyright 1997-2014,2016 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 */

#include <xterm.h>
#include <data.h>
#include <fontutils.h>

#include <assert.h>

#define WhichCgsId(flag) (((flag) & BOLD) ? gcCBold : gcCNorm)

/*
 * The first column is all that matters for double-size characters (since the
 * controls apply to a whole line).  However, it's easier to maintain the
 * information for special fonts by writing to all cells.
 */
#if OPT_DEC_CHRSET

static void
repaint_line(XtermWidget xw, unsigned newChrSet)
{
    TScreen *screen = TScreenOf(xw);
    LineData *ld;
    int curcol = screen->cur_col;
    int currow = screen->cur_row;
    int width = MaxCols(screen);
    unsigned len = (unsigned) width;

    assert(width > 0);

    /*
     * Ignore repetition.
     */
    if (!IsLeftRightMode(xw)
	&& (ld = getLineData(screen, currow)) != 0) {
	unsigned oldChrSet = GetLineDblCS(ld);

	if (oldChrSet != newChrSet) {
	    TRACE(("repaint_line(%2d,%2d) (%s -> %s)\n", currow, screen->cur_col,
		   visibleDblChrset(oldChrSet),
		   visibleDblChrset(newChrSet)));
	    HideCursor();

	    /* If switching from single-width, keep the cursor in the visible part
	     * of the line.
	     */
	    if (CSET_DOUBLE(newChrSet)) {
		width /= 2;
		if (curcol > width)
		    curcol = width;
	    }

	    /*
	     * ScrnRefresh won't paint blanks for us if we're switching between a
	     * single-size and double-size font.  So we paint our own.
	     */
	    ClearCurBackground(xw,
			       currow,
			       0,
			       1,
			       len,
			       (unsigned) LineFontWidth(screen, ld));

	    SetLineDblCS(ld, newChrSet);

	    set_cur_col(screen, 0);
	    ScrnUpdate(xw, currow, 0, 1, (int) len, True);
	    set_cur_col(screen, curcol);
	}
    }
}
#endif

/*
 * Set the line to double-height characters.  The 'top' flag denotes whether
 * we'll be using it for the top (true) or bottom (false) of the line.
 */
void
xterm_DECDHL(XtermWidget xw GCC_UNUSED, Bool top)
{
#if OPT_DEC_CHRSET
    repaint_line(xw, (unsigned) (top ? CSET_DHL_TOP : CSET_DHL_BOT));
#else
    (void) top;
#endif
}

/*
 * Set the line to single-width characters (the normal state).
 */
void
xterm_DECSWL(XtermWidget xw GCC_UNUSED)
{
#if OPT_DEC_CHRSET
    repaint_line(xw, CSET_SWL);
#endif
}

/*
 * Set the line to double-width characters
 */
void
xterm_DECDWL(XtermWidget xw GCC_UNUSED)
{
#if OPT_DEC_CHRSET
    repaint_line(xw, CSET_DWL);
#endif
}

/*
 * Reset all lines on the screen to single-width/single-height.
 */
void
xterm_ResetDouble(XtermWidget xw)
{
#if OPT_DEC_CHRSET
    TScreen *screen = TScreenOf(xw);
    Boolean changed = False;
    unsigned code;
    int row;

    for (row = 0; row < screen->max_row; ++row) {
	LineData *ld;

	if ((ld = getLineData(screen, ROW2INX(screen, row))) != 0) {
	    code = GetLineDblCS(ld);
	    if (code != CSET_SWL) {
		SetLineDblCS(ld, CSET_SWL);
		changed = True;
	    }
	}
    }
    if (changed) {
	xtermRepaint(xw);
    }
#else
    (void) xw;
#endif
}

#if OPT_DEC_CHRSET
static void
discard_font(XtermWidget xw, int n)
{
    TScreen *screen = TScreenOf(xw);
    XTermFonts *data = &(screen->double_fonts[n]);

    TRACE(("discard_font chrset=%d %s\n", data->chrset,
	   (data->fn != 0) ? data->fn : "<no-name>"));

    data->chrset = 0;
    data->flags = 0;
    if (data->fn != 0) {
	free(data->fn);
	data->fn = 0;
    }
    (void) xtermCloseFont(xw, data);

    screen->fonts_used -= 1;
    while (n < screen->fonts_used) {
	screen->double_fonts[n] = screen->double_fonts[n + 1];
	++n;
    }
}

/* push back existing fonts and create a new entry */
static XTermFonts *
pushback_font(XtermWidget xw, XTermFonts * source)
{
    TScreen *screen = TScreenOf(xw);
    XTermFonts *data = screen->double_fonts;
    int n;

    if (screen->fonts_used >= screen->cache_doublesize) {
	TRACE(("pushback_font: discard oldest\n"));
	discard_font(xw, screen->fonts_used - 1);
    } else {
	screen->fonts_used += 1;
    }

    for (n = screen->fonts_used; n > 0; n--)
	data[n] = data[n - 1];
    data[0] = *source;

    TRACE(("pushback_font -> (NEW:%d)\n", screen->fonts_used));

    return data;
}

int
xterm_Double_index(XtermWidget xw, unsigned chrset, unsigned flags)
{
    int n;
    int result = -1;
    TScreen *screen = TScreenOf(xw);
    XTermFonts *data = screen->double_fonts;

    flags &= BOLD;
    TRACE(("xterm_Double_index chrset=%#x, flags=%#x\n", chrset, flags));

    for (n = 0; n < screen->fonts_used; n++) {
	if (data[n].chrset == chrset
	    && data[n].flags == flags) {
	    if (n != 0) {
		XTermFonts save;
		TRACE(("...xterm_Double_index -> %d (OLD:%d)\n", n, screen->fonts_used));
		save = data[n];
		while (n > 0) {
		    data[n] = data[n - 1];
		    n--;
		}
		data[n] = save;
	    }
	    result = n;
	    break;
	}
    }

    return result;
}

/*
 * Lookup/cache a GC for the double-size character display.  We save up to
 * NUM_CHRSET values.
 */
GC
xterm_DoubleGC(XtermWidget xw,
	       unsigned chrset,
	       unsigned attr_flags,
	       unsigned draw_flags,
	       GC old_gc,
	       int *inxp)
{
    TScreen *screen = TScreenOf(xw);
    VTwin *cgsWin = WhichVWin(screen);
    char *name;
    GC result = 0;

    if ((name = xtermSpecialFont(screen, attr_flags, draw_flags, chrset)) != 0) {
	CgsEnum cgsId = WhichCgsId(attr_flags);
	Boolean found = False;
	XTermFonts *data = 0;
	int n;

	if ((n = xterm_Double_index(xw, chrset, attr_flags)) >= 0) {
	    data = &(screen->double_fonts[n]);
	    if (data->fn != 0) {
		if (!strcmp(data->fn, name)
		    && data->fs != 0) {
		    found = True;
		    free(name);
		} else {
		    discard_font(xw, n);
		}
	    }
	}

	if (!found) {
	    XTermFonts temp;

	    TRACE(("xterm_DoubleGC %s %d: %s\n",
		   (attr_flags & BOLD) ? "BOLD" : "NORM", n, name));

	    memset(&temp, 0, sizeof(temp));
	    temp.fn = name;
	    temp.chrset = chrset;
	    temp.flags = (attr_flags & BOLD);

	    if (!xtermOpenFont(xw, name, &temp, fwAlways, False)) {
		/* Retry with * in resolutions */
		char *nname = xtermSpecialFont(screen,
					       attr_flags,
					       draw_flags | NORESOLUTION,
					       chrset);

		if (nname != 0) {
		    found = (Boolean) xtermOpenFont(xw, nname, &temp,
						    fwAlways, False);
		    free(nname);
		}
	    } else {
		found = True;
	    }
	    free(name);

	    if (found) {
		n = 0;
		data = pushback_font(xw, &temp);
	    }

	    TRACE(("-> %s\n", found ? "OK" : "FAIL"));
	}

	if (found) {
	    setCgsCSet(xw, cgsWin, cgsId, chrset);
	    setCgsFont(xw, cgsWin, cgsId, data);
	    setCgsFore(xw, cgsWin, cgsId, getCgsFore(xw, cgsWin, old_gc));
	    setCgsBack(xw, cgsWin, cgsId, getCgsBack(xw, cgsWin, old_gc));
	    result = getCgsGC(xw, cgsWin, cgsId);
	    *inxp = n;
	} else if (attr_flags & BOLD) {
	    UIntClr(attr_flags, BOLD);
	    result = xterm_DoubleGC(xw, chrset,
				    attr_flags,
				    draw_flags,
				    old_gc, inxp);
	}
    }

    return result;
}
#endif
@


1.11
log
@Update to xterm-309. Version 308 tested by several people including
naddy@@ who found a small regression, fixed in 309.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.85 2014/05/08 01:08:39 tom Exp $ */
d4 1
a4 1
 * Copyright 1997-2013,2014 by Thomas E. Dickey
a147 1
    LineData *ld;
d152 2
a264 1
    int n;
a265 1
    XTermFonts *data = 0;
d271 2
d291 1
a291 1
		   attr_flags & BOLD ? "BOLD" : "NORM", n, name));
@


1.10
log
@Update to xterm 304. With help of shadchin@@

tested by ajacoutot@@ and shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.84 2014/04/25 23:41:42 tom Exp $ */
d257 2
a258 1
	       unsigned flags,
d269 2
a270 2
    if ((name = xtermSpecialFont(screen, flags, chrset)) != 0) {
	CgsEnum cgsId = WhichCgsId(flags);
d273 1
a273 1
	if ((n = xterm_Double_index(xw, chrset, flags)) >= 0) {
d290 1
a290 1
		   flags & BOLD ? "BOLD" : "NORM", n, name));
d295 1
a295 1
	    temp.flags = (flags & BOLD);
d299 4
a302 1
		char *nname = xtermSpecialFont(screen, flags | NORESOLUTION, chrset);
d329 6
a334 3
	} else if (flags & BOLD) {
	    UIntClr(flags, BOLD);
	    result = xterm_DoubleGC(xw, chrset, flags, old_gc, inxp);
@


1.9
log
@Update to xterm-300. Tested  by ajacoutot@@ and shadchin@@.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.83 2013/08/30 21:35:13 tom Exp $ */
d4 1
a4 1
 * Copyright 1997-2012,2013 by Thomas E. Dickey
d164 2
@


1.8
log
@Update to xterm 279. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.81 2012/04/15 23:39:53 tom Exp $ */
d4 1
a4 1
 * Copyright 1997-2011,2012 by Thomas E. Dickey
d69 2
a70 2
		   visibleChrsetName(oldChrSet),
		   visibleChrsetName(newChrSet)));
@


1.7
log
@Update to xterm-275. Tested by jasper@@.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.76 2011/09/11 14:59:40 tom Exp $ */
d4 1
a4 1
 * Copyright 1997-2010,2011 by Thomas E. Dickey
d63 2
a64 1
    if ((ld = getLineData(screen, currow)) != 0) {
d87 5
a91 4
			       CursorY(screen, currow),
			       LineCursorX(screen, ld, 0),
			       (unsigned) FontHeight(screen),
			       len * (unsigned) LineFontWidth(screen, ld));
d136 28
@


1.6
log
@Update to xterm 261. Tested by krw@@, jcs@@.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.75 2010/06/15 10:58:13 tom Exp $ */
d3 29
a31 31
/************************************************************

Copyright 1997-2009,2010 by Thomas E. Dickey

                        All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name(s) of the above copyright
holders shall not be used in advertising or otherwise to promote the
sale, use or other dealings in this Software without prior written
authorization.

********************************************************/
@


1.5
log
@Update to xterm 258. lightly tested by krw@@, thanks.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.74 2010/04/16 08:45:59 tom Exp $ */
d5 1
a5 1
Copyright 1997-2008,2009 by Thomas E. Dickey
@


1.4
log
@Update to xterm-255. Tested by stsp@@, oga@@.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.73 2009/11/28 13:28:03 tom Exp $ */
d296 1
a296 1
	    flags &= ~BOLD;
@


1.3
log
@update to xterm 246. Has been in snapshots for some time.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.72 2009/08/07 00:25:02 tom Exp $ */
d53 1
a53 1
    TScreen *screen = &xw->screen;
d143 1
a143 1
    TScreen *screen = &xw->screen;
d168 1
a168 1
    TScreen *screen = &xw->screen;
d193 1
a193 1
    TScreen *screen = &xw->screen;
d231 1
a231 1
    TScreen *screen = &(xw->screen);
@


1.2
log
@Update to xterm 242. Tested by jsg@@.
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.64 2009/02/12 01:23:54 tom Exp $ */
a47 2
#define curChrSet SCRN_BUF_CSETS(screen, screen->cur_row)[0]

d53 2
a54 1
    register TScreen *screen = &xw->screen;
a58 1
    unsigned oldChrSet = SCRN_BUF_CSETS(screen, currow)[0];
d65 2
a66 7
    if (oldChrSet == newChrSet)
	return;

    TRACE(("repaint_line(%2d,%2d) (%s -> %s)\n", currow, screen->cur_col,
	   visibleChrsetName(oldChrSet),
	   visibleChrsetName(newChrSet)));
    HideCursor();
d68 31
a98 7
    /* If switching from single-width, keep the cursor in the visible part
     * of the line.
     */
    if (CSET_DOUBLE(newChrSet)) {
	width /= 2;
	if (curcol > width)
	    curcol = width;
a99 17

    /*
     * ScrnRefresh won't paint blanks for us if we're switching between a
     * single-size and double-size font.  So we paint our own.
     */
    ClearCurBackground(xw,
		       CursorY(screen, currow),
		       CurCursorX(screen, currow, 0),
		       (unsigned) FontHeight(screen),
		       len * (unsigned) CurFontWidth(screen, currow));

    /* FIXME: do VT220 softchars allow double-sizes? */
    memset(SCRN_BUF_CSETS(screen, currow), (Char) newChrSet, len);

    set_cur_col(screen, 0);
    ScrnUpdate(xw, currow, 0, 1, (int) len, True);
    set_cur_col(screen, curcol);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 5
/* $XTermId: doublechr.c,v 1.48 2006/07/23 22:06:23 tom Exp $ */

/*
 * $XFree86: xc/programs/xterm/doublechr.c,v 3.18 2006/02/13 01:14:58 dickey Exp $
 */
d5 1
a5 1
Copyright 1997-2005,2006 by Thomas E. Dickey
d41 2
d51 1
d53 1
a53 1
repaint_line(unsigned newChrSet)
d55 1
a55 1
    register TScreen *screen = &term->screen;
d58 2
a59 2
    unsigned len = MaxCols(screen);
    int width = len;
d70 3
a72 1
    TRACE(("repaint_line(%2d,%2d) (%d)\n", currow, screen->cur_col, newChrSet));
d88 5
a92 7
    if (CSET_DOUBLE(oldChrSet) != CSET_DOUBLE(newChrSet)) {
	ClearCurBackground(term,
			   CursorY(screen, currow),
			   CurCursorX(screen, currow, 0),
			   (unsigned) FontHeight(screen),
			   len * CurFontWidth(screen, currow));
    }
d98 1
a98 1
    ScrnUpdate(term, currow, 0, 1, (int) len, True);
d108 1
a108 1
xterm_DECDHL(Bool top)
d111 1
a111 1
    repaint_line((unsigned) (top ? CSET_DHL_TOP : CSET_DHL_BOT));
d121 1
a121 1
xterm_DECSWL(void)
d124 1
a124 1
    repaint_line(CSET_SWL);
d132 1
a132 1
xterm_DECDWL(void)
d135 1
a135 1
    repaint_line(CSET_DWL);
d141 1
a141 1
discard_font(TScreen * screen, XTermFonts * data)
d143 3
a150 4
    if (data->gc != 0) {
	XFreeGC(screen->display, data->gc);
	data->gc = 0;
    }
d155 31
a185 1
    data->fs = xtermCloseFont(screen, data->fs);
d189 1
a189 1
xterm_Double_index(unsigned chrset, unsigned flags)
d192 2
a193 1
    TScreen *screen = &term->screen;
d212 2
a213 1
	    return n;
d217 1
a217 18
    /* Not, found, push back existing fonts and create a new entry */
    if (screen->fonts_used >= screen->cache_doublesize) {
	TRACE(("...xterm_Double_index: discard oldest\n"));
	discard_font(screen, &(data[screen->fonts_used - 1]));
    } else {
	screen->fonts_used += 1;
    }
    for (n = screen->fonts_used; n > 0; n--)
	data[n] = data[n - 1];

    TRACE(("...xterm_Double_index -> (NEW:%d)\n", screen->fonts_used));

    data[0].chrset = chrset;
    data[0].flags = flags;
    data[0].fn = 0;
    data[0].fs = 0;
    data[0].gc = 0;
    return 0;
d225 5
a229 1
xterm_DoubleGC(unsigned chrset, unsigned flags, GC old_gc)
d231 2
a232 3
    XGCValues gcv;
    register TScreen *screen = &term->screen;
    unsigned long mask = (GCForeground | GCBackground | GCFont);
d235 2
a236 1
    XTermFonts *data;
d238 41
a278 2
    if ((name = xtermSpecialFont(screen, flags, chrset)) == 0)
	return 0;
d280 3
a282 7
    n = xterm_Double_index(chrset, flags);
    data = &(screen->double_fonts[n]);
    if (data->fn != 0) {
	if (!strcmp(data->fn, name)) {
	    if (data->fs != 0) {
		XCopyGC(screen->display, old_gc, (unsigned long) (~GCFont), data->gc);
		return data->gc;
d284 2
a286 5
	discard_font(screen, data);
	data->chrset = chrset;
	data->flags = flags & BOLD;
    }
    data->fn = name;
d288 10
a297 11
    TRACE(("xterm_DoubleGC %s %d: %s\n", flags & BOLD ? "BOLD" : "NORM", n, name));

    if ((data->fs = xtermOpenFont(screen, name)) == 0) {
	/* Retry with * in resolutions */
	char *nname = xtermSpecialFont(screen, flags | NORESOLUTION, chrset);

	if (!nname)
	    return 0;
	if ((data->fs = xtermOpenFont(screen, nname)) == 0) {
	    XtFree(nname);
	    return 0;
a298 2
	XtFree(name);
	data->fn = nname;
d301 1
a301 10
    TRACE(("-> OK\n"));

    gcv.graphics_exposures = TRUE;	/* default */
    gcv.font = data->fs->fid;
    gcv.foreground = T_COLOR(screen, TEXT_FG);
    gcv.background = T_COLOR(screen, TEXT_BG);

    data->gc = XCreateGC(screen->display, VWindow(screen), mask, &gcv);
    XCopyGC(screen->display, old_gc, (unsigned long) (~GCFont), data->gc);
    return data->gc;
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@import xterm 225
@
text
@d1 1
a1 1
/* $XTermId: doublechr.c,v 1.54 2007/03/12 23:44:08 tom Exp $ */
d9 1
a9 1
Copyright 1997-2006,2007 by Thomas E. Dickey
a44 2
#define WhichCgsId(flag) (flag & BOLD ? gcCBold : gcCNorm)

d54 1
a54 1
repaint_line(XtermWidget xw, unsigned newChrSet)
d56 1
a56 1
    register TScreen *screen = &xw->screen;
d88 1
a88 1
	ClearCurBackground(xw,
d99 1
a99 1
    ScrnUpdate(xw, currow, 0, 1, (int) len, True);
d109 1
a109 1
xterm_DECDHL(XtermWidget xw GCC_UNUSED, Bool top)
d112 1
a112 1
    repaint_line(xw, (unsigned) (top ? CSET_DHL_TOP : CSET_DHL_BOT));
d122 1
a122 1
xterm_DECSWL(XtermWidget xw GCC_UNUSED)
d125 1
a125 1
    repaint_line(xw, CSET_SWL);
d133 1
a133 1
xterm_DECDWL(XtermWidget xw GCC_UNUSED)
d136 1
a136 1
    repaint_line(xw, CSET_DWL);
d142 1
a142 1
discard_font(XtermWidget xw, XTermFonts * data)
d149 4
d157 1
a157 1
    data->fs = xtermCloseFont(xw, data->fs);
d161 1
a161 1
xterm_Double_index(XtermWidget xw, unsigned chrset, unsigned flags)
d164 1
a164 1
    TScreen *screen = &xw->screen;
d190 1
a190 1
	discard_font(xw, &(data[screen->fonts_used - 1]));
d203 1
d212 1
a212 1
xterm_DoubleGC(XtermWidget xw, unsigned chrset, unsigned flags, GC old_gc)
d214 3
a216 2
    TScreen *screen = &(xw->screen);
    VTwin *cgsWin = WhichVWin(screen);
a219 1
    GC result = 0;
d221 10
a230 15
    if ((name = xtermSpecialFont(screen, flags, chrset)) != 0) {
	CgsEnum cgsId = WhichCgsId(flags);
	Boolean found = False;

	n = xterm_Double_index(xw, chrset, flags);
	data = &(screen->double_fonts[n]);
	if (data->fn != 0) {
	    if (!strcmp(data->fn, name)
		&& data->fs != 0) {
		found = True;
	    } else {
		discard_font(xw, data);
		data->chrset = chrset;
		data->flags = flags & BOLD;
		data->fn = name;
a231 2
	} else {
	    data->fn = name;
d233 5
d239 1
a239 20
	if (!found) {
	    TRACE(("xterm_DoubleGC %s %d: %s\n",
		   flags & BOLD ? "BOLD" : "NORM", n, name));

	    if ((data->fs = xtermOpenFont(xw, name)) == 0) {
		/* Retry with * in resolutions */
		char *nname = xtermSpecialFont(screen, flags | NORESOLUTION, chrset);

		if (nname != 0) {
		    if ((data->fs = xtermOpenFont(xw, nname)) == 0) {
			XtFree(nname);
		    } else {
			XtFree(name);
			data->fn = nname;
			found = True;
		    }
		}
	    } else {
		found = True;
	    }
d241 9
a249 1
	    TRACE(("-> %s\n", found ? "OK" : "FAIL"));
d251 5
d257 8
a264 9
	if (found) {
	    setCgsCSet(xw, cgsWin, cgsId, chrset);
	    setCgsFont(xw, cgsWin, cgsId, data->fs);
	    setCgsFore(xw, cgsWin, cgsId, getCgsFore(xw, cgsWin, old_gc));
	    setCgsBack(xw, cgsWin, cgsId, getCgsBack(xw, cgsWin, old_gc));
	    result = getCgsGC(xw, cgsWin, cgsId);
	}
    }
    return result;
@


1.1.1.3
log
@Import xterm version 232. tested by many.
@
text
@d1 5
a5 1
/* $XTermId: doublechr.c,v 1.60 2008/01/27 15:07:16 tom Exp $ */
d9 1
a9 1
Copyright 1997-2007,2008 by Thomas E. Dickey
d45 1
a45 1
#define WhichCgsId(flag) (((flag) & BOLD) ? gcCBold : gcCNorm)
a54 1

d73 1
a73 3
    TRACE(("repaint_line(%2d,%2d) (%s -> %s)\n", currow, screen->cur_col,
	   visibleChrsetName(oldChrSet),
	   visibleChrsetName(newChrSet)));
d89 7
a95 5
    ClearCurBackground(xw,
		       CursorY(screen, currow),
		       CurCursorX(screen, currow, 0),
		       (unsigned) FontHeight(screen),
		       len * CurFontWidth(screen, currow));
d144 1
a144 1
discard_font(XtermWidget xw, int n)
a145 3
    TScreen *screen = &xw->screen;
    XTermFonts *data = &(screen->double_fonts[n]);

d155 1
a155 31
    (void) xtermCloseFont(xw, data);

    screen->fonts_used -= 1;
    while (n < screen->fonts_used) {
	screen->double_fonts[n] = screen->double_fonts[n + 1];
	++n;
    }
}

/* push back existing fonts and create a new entry */
static XTermFonts *
pushback_font(XtermWidget xw, XTermFonts * source)
{
    TScreen *screen = &xw->screen;
    XTermFonts *data = screen->double_fonts;
    int n;

    if (screen->fonts_used >= screen->cache_doublesize) {
	TRACE(("pushback_font: discard oldest\n"));
	discard_font(xw, screen->fonts_used - 1);
    } else {
	screen->fonts_used += 1;
    }

    for (n = screen->fonts_used; n > 0; n--)
	data[n] = data[n - 1];
    data[0] = *source;

    TRACE(("pushback_font -> (NEW:%d)\n", screen->fonts_used));

    return data;
a161 1
    int result = -1;
d181 1
a181 2
	    result = n;
	    break;
d185 17
a201 1
    return result;
d209 1
a209 5
xterm_DoubleGC(XtermWidget xw,
	       unsigned chrset,
	       unsigned flags,
	       GC old_gc,
	       int *inxp)
d215 1
a215 1
    XTermFonts *data = 0;
d222 11
a232 10
	if ((n = xterm_Double_index(xw, chrset, flags)) >= 0) {
	    data = &(screen->double_fonts[n]);
	    if (data->fn != 0) {
		if (!strcmp(data->fn, name)
		    && data->fs != 0) {
		    found = True;
		    free(name);
		} else {
		    discard_font(xw, n);
		}
d234 2
a238 2
	    XTermFonts temp;

d242 1
a242 6
	    memset(&temp, 0, sizeof(temp));
	    temp.fn = name;
	    temp.chrset = chrset;
	    temp.flags = (flags & BOLD);

	    if (!xtermOpenFont(xw, name, &temp)) {
d247 7
a253 2
		    found = xtermOpenFont(xw, nname, &temp);
		    free(nname);
a257 6
	    free(name);

	    if (found) {
		n = 0;
		data = pushback_font(xw, &temp);
	    }
d264 1
a264 1
	    setCgsFont(xw, cgsWin, cgsId, data);
a267 4
	    *inxp = n;
	} else if (flags & BOLD) {
	    flags &= ~BOLD;
	    result = xterm_DoubleGC(xw, chrset, flags, old_gc, inxp);
a269 1

@


