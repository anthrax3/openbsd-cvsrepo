head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.2
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.13.0.2
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.4
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v232:1.1.1.2
	v229:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v225:1.1.1.1
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2017.07.15.19.20.51;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	b9xPQ49d1NNt4zlu;

1.13
date	2016.08.07.21.27.36;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	psxxjI5z4Vpv2LL4;

1.12
date	2015.09.05.14.11.46;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	YVUODLQ4QcYTuGkb;

1.11
date	2014.05.09.19.56.41;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2014.01.02.15.14.50;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.09.14.45.38;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.07.20.20.24;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.17.11.51.57;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.28.17.40.55;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.08.12.20.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.25.22.03.51;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.31.14.11.57;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.06.20.10.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.08.25.18.54.11;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to xterm 330
@
text
@/* $XTermId: xstrings.c,v 1.70 2017/06/11 21:20:37 tom Exp $ */

/*
 * Copyright 2000-2016,2017 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 */

#include <xterm.h>

#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <xstrings.h>

static void
alloc_pw(struct passwd *target, struct passwd *source)
{
    *target = *source;
    /* we care only about these strings */
    target->pw_dir = x_strdup(source->pw_dir);
    target->pw_name = x_strdup(source->pw_name);
    target->pw_shell = x_strdup(source->pw_shell);
}

static void
free_pw(struct passwd *source)
{
    free(source->pw_dir);
    free(source->pw_name);
    free(source->pw_shell);
}

void
x_appendargv(char **target, char **source)
{
    if (target && source) {
	target += x_countargv(target);
	while ((*target++ = *source++) != 0) ;
    }
}

char *
x_basename(char *name)
{
    char *cp;

    cp = strrchr(name, '/');
    return (cp ? cp + 1 : name);
}

unsigned
x_countargv(char **argv)
{
    unsigned result = 0;
    if (argv) {
	while (*argv++) {
	    ++result;
	}
    }
    return result;
}

/*
 * Decode a hexadecimal string, returning the decoded string.
 * On return, 'next' points to the first character not part of the input.
 * The caller must free the result.
 */
char *
x_decode_hex(const char *source, const char **next)
{
    char *result = 0;
    int pass;
    size_t j, k;

    for (pass = 0; pass < 2; ++pass) {
	for (j = k = 0; isxdigit(CharOf(source[j])); ++j) {
	    if ((pass != 0) && (j & 1) != 0) {
		result[k++] = (char) ((x_hex2int(source[j - 1]) << 4)
				      | x_hex2int(source[j]));
	    }
	}
	*next = (source + j);
	if ((j & 1) == 0) {
	    if (pass) {
		result[k] = '\0';
	    } else {
		result = malloc(++j);
		if (result == 0)
		    break;	/* not enough memory */
	    }
	} else {
	    break;		/* must have an even number of digits */
	}
    }
    return result;
}

/*
 * Encode a string into hexadecimal, returning the encoded string.
 * The caller must free the result.
 */
char *
x_encode_hex(const char *source)
{
    size_t need = (strlen(source) * 2) + 1;
    char *result = malloc(need);

    if (result != 0) {
	unsigned j, k;
	for (j = k = 0; source[j] != '\0'; ++j) {
	    sprintf(result + k, "%02X", CharOf(source[j]));
	    k += 2;
	}
    }
    return result;
}

char *
x_getenv(const char *name)
{
    char *result;
    result = x_strdup(x_nonempty(getenv(name)));
    TRACE2(("getenv(%s) %s\n", name, result));
    return result;
}

static char *
login_alias(char *login_name, uid_t uid, struct passwd *in_out)
{
    /*
     * If the logon-name differs from the value we get by looking in the
     * password file, check if it does correspond to the same uid.  If so,
     * allow that as an alias for the uid.
     */
    if (!IsEmpty(login_name)
	&& strcmp(login_name, in_out->pw_name)) {
	struct passwd pw2;
	Boolean ok2;

	if ((ok2 = x_getpwnam(login_name, &pw2))) {
	    uid_t uid2 = pw2.pw_uid;
	    struct passwd pw3;
	    Boolean ok3;

	    if ((ok3 = x_getpwuid(uid, &pw3))
		&& ((uid_t) pw3.pw_uid == uid2)) {
		/* use the other passwd-data including shell */
		alloc_pw(in_out, &pw2);
	    } else {
		free(login_name);
		login_name = NULL;
	    }
	    if (ok2)
		free_pw(&pw2);
	    if (ok3)
		free_pw(&pw3);
	}
    }
    return login_name;
}

/*
 * Call this with in_out pointing to data filled in by x_getpwnam() or by
 * x_getpwnam().  It finds the user's logon name, if possible.  As a side
 * effect, it updates in_out to fill in possibly more-relevant data, i.e.,
 * in case there is more than one alias for the same uid.
 */
char *
x_getlogin(uid_t uid, struct passwd *in_out)
{
    char *login_name = NULL;

    login_name = login_alias(x_getenv("LOGNAME"), uid, in_out);
    if (IsEmpty(login_name)) {
	free(login_name);
	login_name = login_alias(x_getenv("USER"), uid, in_out);
    }
#ifdef HAVE_GETLOGIN
    /*
     * Of course getlogin() will fail if we're started from a window-manager,
     * since there's no controlling terminal to fuss with.  For that reason, we
     * tried first to get something useful from the user's $LOGNAME or $USER
     * environment variables.
     */
    if (IsEmpty(login_name)) {
	TRACE2(("...try getlogin\n"));
	free(login_name);
	login_name = login_alias(x_strdup(getlogin()), uid, in_out);
    }
#endif

    if (IsEmpty(login_name)) {
	free(login_name);
	login_name = x_strdup(in_out->pw_name);
    }

    TRACE2(("x_getloginid ->%s\n", NonNull(login_name)));
    return login_name;
}

/*
 * Simpler than getpwnam_r, retrieves the passwd result by name and stores the
 * result via the given pointer.  On failure, wipes the data to prevent use.
 */
Boolean
x_getpwnam(const char *name, struct passwd *result)
{
    struct passwd *ptr = getpwnam(name);
    Boolean code;

    if (ptr != 0 && OkPasswd(ptr)) {
	code = True;
	alloc_pw(result, ptr);
    } else {
	code = False;
	memset(result, 0, sizeof(*result));
    }
    return code;
}

/*
 * Simpler than getpwuid_r, retrieves the passwd result by uid and stores the
 * result via the given pointer.  On failure, wipes the data to prevent use.
 */
Boolean
x_getpwuid(uid_t uid, struct passwd *result)
{
    struct passwd *ptr = getpwuid((uid_t) uid);
    Boolean code;

    if (ptr != 0 && OkPasswd(ptr)) {
	code = True;
	alloc_pw(result, ptr);
    } else {
	code = False;
	memset(result, 0, sizeof(*result));
    }
    TRACE2(("x_getpwuid(%d) %d\n", (int) uid, (int) code));
    return code;
}

/*
 * Decode a single hex "nibble", returning the nibble as 0-15, or -1 on error.
 */
int
x_hex2int(int c)
{
    if (c >= '0' && c <= '9')
	return c - '0';
    if (c >= 'a' && c <= 'f')
	return c - 'a' + 10;
    if (c >= 'A' && c <= 'F')
	return c - 'A' + 10;
    return -1;
}

/*
 * Check if the given string is nonnull/nonempty.  If so, return a pointer
 * to the beginning of its content, otherwise return null.
 */
String
x_nonempty(String s)
{
    if (s != 0) {
	if (*s == '\0') {
	    s = 0;
	} else {
	    s = x_skip_blanks(s);
	    if (*s == '\0')
		s = 0;
	}
    }
    return s;
}

String
x_skip_blanks(String s)
{
    while (IsSpace(CharOf(*s)))
	++s;
    return s;
}

String
x_skip_nonblanks(String s)
{
    while (*s != '\0' && !IsSpace(CharOf(*s)))
	++s;
    return s;
}

static const char *
skip_blanks(const char *s)
{
    while (IsSpace(CharOf(*s)))
	++s;
    return s;
}

/*
 * Split a command-string into an argv[]-style array.
 */
char **
x_splitargs(const char *command)
{
    char **result = 0;

    if (command != 0) {
	const char *first = skip_blanks(command);
	char *blob = x_strdup(first);

	if (blob != 0) {
	    int pass;

	    for (pass = 0; pass < 2; ++pass) {
		int state;
		size_t count;
		size_t n;

		for (n = count = 0, state = 0; first[n] != '\0'; ++n) {

		    switch (state) {
		    case 0:
			if (!IsSpace(CharOf(first[n]))) {
			    state = 1;
			    if (pass)
				result[count] = blob + n;
			    ++count;
			} else {
			    blob[n] = '\0';
			}
			break;
		    case 1:
			if (IsSpace(CharOf(first[n]))) {
			    blob[n] = '\0';
			    state = 0;
			}
			break;
		    }
		}
		if (!pass) {
		    result = TypeCallocN(char *, count + 1);
		    if (!result) {
			free(blob);
			break;
		    }
		}
	    }
	}
    } else {
	result = TypeCalloc(char *);
    }
    return result;
}

/*
 * Free storage allocated by x_splitargs().
 */
void
x_freeargs(char **argv)
{
    if (argv != 0) {
	if (*argv != 0)
	    free(*argv);
	free(argv);
    }
}

int
x_strcasecmp(const char *s1, const char *s2)
{
    size_t len = strlen(s1);

    if (len != strlen(s2))
	return 1;

    return x_strncasecmp(s1, s2, (unsigned) len);
}

int
x_strncasecmp(const char *s1, const char *s2, unsigned n)
{
    while (n-- != 0) {
	char c1 = x_toupper(*s1);
	char c2 = x_toupper(*s2);
	if (c1 != c2)
	    return 1;
	if (c1 == 0)
	    break;
	s1++, s2++;
    }

    return 0;
}

/*
 * Allocates a copy of a string
 */
char *
x_strdup(const char *s)
{
    char *result = 0;

    if (s != 0) {
	char *t = TextAlloc(4 + strlen(s));
	if (t != 0) {
	    strcpy(t, s);
	}
	result = t;
    }
    return result;
}

/*
 * Returns a pointer to the first occurrence of s2 in s1,
 * or NULL if there are none.
 */
char *
x_strindex(char *s1, const char *s2)
{
    char *s3;
    size_t s2len = strlen(s2);

    while ((s3 = (strchr) (s1, *s2)) != NULL) {
	if (strncmp(s3, s2, s2len) == 0)
	    return (s3);
	s1 = ++s3;
    }
    return (NULL);
}

/*
 * Trims leading/trailing spaces from a copy of the string.
 */
char *
x_strtrim(const char *source)
{
    char *result;

    if (source != 0 && *source != '\0') {
	char *t = x_strdup(source);
	if (t != 0) {
	    char *s = t;
	    char *d = s;
	    while (IsSpace(CharOf(*s)))
		++s;
	    while ((*d++ = *s++) != '\0') {
		;
	    }
	    if (*t != '\0') {
		s = t + strlen(t);
		while (s != t && IsSpace(CharOf(s[-1]))) {
		    *--s = '\0';
		}
	    }
	}
	result = t;
    } else {
	result = x_strdup("");
    }
    return result;
}

/*
 * Trims trailing whitespace from a copy of the string.
 */
char *
x_strrtrim(const char *source)
{
    char *result;

    if (source != 0 && *source != '\0') {
	char *t = x_strdup(source);
	if (t != 0) {
	    if (*t != '\0') {
		char *s = t + strlen(t);
		while (s != t && IsSpace(CharOf(s[-1]))) {
		    *--s = '\0';
		}
	    }
	}
	result = t;
    } else {
	result = x_strdup("");
    }
    return result;
}

/*
 * Avoid using system locale for upper/lowercase conversion, since there are
 * a few locales where toupper(tolower(c)) != c.
 */
char
x_toupper(int ch)
{
    static char table[256];
    char result = table[CharOf(ch)];

    if (result == '\0') {
	unsigned n;
	static const char s[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

	for (n = 0; n < sizeof(table); ++n) {
	    table[n] = (char) n;
	}
	for (n = 0; s[n] != '\0'; ++n) {
	    table[CharOf(s[n])] = s[n % 26];
	}
	result = table[CharOf(ch)];
    }

    return result;
}

/*
 * Match strings ignoring case and allowing glob-like '*' and '?'
 */
int
x_wildstrcmp(const char *pattern, const char *actual)
{
    int result = 0;

    while (*pattern && *actual) {
	char c1 = x_toupper(*pattern);
	char c2 = x_toupper(*actual);

	if (c1 == '*') {
	    Boolean found = False;
	    pattern++;
	    while (*actual != '\0') {
		if (!x_wildstrcmp(pattern, actual++)) {
		    found = True;
		    break;
		}
	    }
	    if (!found) {
		result = 1;
		break;
	    }
	} else if (c1 == '?') {
	    ++pattern;
	    ++actual;
	} else if ((result = (c1 != c2)) == 0) {
	    ++pattern;
	    ++actual;
	} else {
	    break;
	}
    }
    return result;
}
@


1.13
log
@Update to xterm-325. Testing by krw@@, shadchin@@ and naddy@@. Thanks
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.63 2016/05/22 18:28:27 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2015,2016 by Thomas E. Dickey
d52 8
d165 1
d167 1
a167 1
	if (x_getpwnam(login_name, &pw2)) {
d170 1
d172 1
a172 1
	    if (x_getpwuid(uid, &pw3)
d180 4
d432 1
a432 1
	char *t = CastMallocN(char, strlen(s) + 1);
a501 1
	    char *s = t;
d503 1
a503 1
		s = t + strlen(t);
d539 38
@


1.12
log
@Update to xterm 320. Tested by jsg@@ Thanks.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.62 2015/08/27 23:30:42 Martin.Tournoij Exp $ */
d4 1
a4 1
 * Copyright 2000-2014,2015 by Thomas E. Dickey
a323 4
	size_t count;
	size_t n;
	int state;
	int pass;
d326 2
d329 4
d334 1
a451 2
    char *s;
    char *d;
d456 2
a457 2
	    s = t;
	    d = s;
a483 1
    char *s;
d488 1
a488 1
	    s = t;
@


1.11
log
@Update to xterm 304. With help of shadchin@@

tested by ajacoutot@@ and shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.60 2014/05/03 12:46:53 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2013,2014 by Thomas E. Dickey
d477 27
d515 1
a515 1
	const char *s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
@


1.10
log
@Update to xterm-300. Tested  by ajacoutot@@ and shadchin@@.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.58 2013/11/18 01:40:43 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2012,2013 by Thomas E. Dickey
d292 1
a292 1
    while (isspace(CharOf(*s)))
d300 1
a300 1
    while (*s != '\0' && !isspace(CharOf(*s)))
d308 1
a308 1
    while (isspace(CharOf(*s)))
d334 1
a334 1
			if (!isspace(CharOf(first[n]))) {
d344 1
a344 1
			if (isspace(CharOf(first[n]))) {
d457 1
a457 1
	    while (isspace(CharOf(*s)))
d464 1
a464 1
		while (s != t && isspace(CharOf(s[-1]))) {
@


1.9
log
@Update to xterm 291. Tested by many.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.57 2013/02/03 22:11:25 tom Exp $ */
d219 1
a219 1
x_getpwnam(const char *name, struct passwd * result)
d239 1
a239 1
x_getpwuid(uid_t uid, struct passwd * result)
d434 1
a434 1
    while ((s3 = strchr(s1, *s2)) != NULL) {
@


1.8
log
@Update to xterm 279. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.50 2012/03/30 10:54:12 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2011,2012 by Thomas E. Dickey
a66 4
#ifdef __UNIXOS2__
    if (cp == 0)
	cp = strrchr(name, '\\');
#endif
d167 1
d188 1
d200 2
a201 1
	login_name = login_alias(getlogin(), uid, in_out);
d205 4
a208 4
    if (IsEmpty(login_name))
	login_name = in_out->pw_name;
    if (!IsEmpty(login_name))
	login_name = x_strdup(login_name);
d305 8
d322 2
a323 1
	char *blob = x_strdup(command);
d329 20
a348 11
	for (pass = 0; pass < 2; ++pass) {
	    for (n = count = 0, state = 0; command[n] != '\0'; ++n) {
		switch (state) {
		case 0:
		    if (!isspace(CharOf(command[n]))) {
			state = 1;
			if (pass)
			    result[count] = blob + n;
			++count;
		    } else {
			blob[n] = '\0';
d350 6
a355 5
		    break;
		case 1:
		    if (isspace(CharOf(command[n]))) {
			blob[n] = '\0';
			state = 0;
a356 1
		    break;
a358 5
	    if (!pass) {
		result = TypeCallocN(char *, count + 1);
		if (!result)
		    break;
	    }
d366 13
d454 13
a466 11
	s = t;
	d = s;
	while (isspace(CharOf(*s)))
	    ++s;
	while ((*d++ = *s++) != '\0') {
	    ;
	}
	if (*t != '\0') {
	    s = t + strlen(t);
	    while (s != t && isspace(CharOf(s[-1]))) {
		*--s = '\0';
@


1.7
log
@Update to xterm-275. Tested by jasper@@.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.47 2011/09/11 20:20:12 tom Exp $ */
d4 1
a4 1
 * Copyright 2000-2010,2011 by Thomas E. Dickey
d144 4
a147 1
    return x_strdup(x_nonempty(getenv(name)));
d150 2
a151 8
/*
 * Call this with in_out pointing to data filled in by x_getpwnam() or by
 * x_getpwnam().  It finds the user's logon name, if possible.  As a side
 * effect, it updates in_out to fill in possibly more-relevant data, i.e.,
 * in case there is more than one alias for the same uid.
 */
char *
x_getlogin(uid_t uid, struct passwd *in_out)
a152 18
    char *login_name = NULL;

#ifdef HAVE_GETLOGIN
    login_name = getlogin();
#endif

    /*
     * Of course getlogin() will fail if we're started from a window-manager,
     * since there's no controlling terminal to fuss with.  In that case, try
     * to get something useful from the user's $LOGNAME or $USER environment
     * variables.
     */
    if (login_name == NULL) {
	login_name = x_getenv("LOGNAME");
	if (login_name == NULL)
	    login_name = x_getenv("USER");
    }

d158 1
a158 1
    if (login_name != NULL
d166 2
a167 4
	    if (!x_getpwuid(uid, &pw3)
		|| (uid_t) pw3.pw_uid != uid2) {
		login_name = NULL;
	    } else {
d170 2
a172 2
	} else {
	    (void) x_getpwuid(uid, in_out);
d175 30
d206 1
a206 1
    if (login_name == NULL)
d208 1
a208 1
    if (login_name != NULL)
d211 1
d225 1
a225 1
    if (OkPasswd(ptr)) {
d245 1
a245 1
    if (OkPasswd(ptr)) {
d252 1
@


1.6
log
@Update to xterm 273. Tested by marco@@, jasper@@.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.40 2011/08/25 08:55:55 tom Exp $ */
d3 29
a31 31
/************************************************************

Copyright 2000-2010,2011 by Thomas E. Dickey

                        All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name(s) of the above copyright
holders shall not be used in advertising or otherwise to promote the
sale, use or other dealings in this Software without prior written
authorization.

********************************************************/
d42 10
d148 100
d249 2
a250 1
 */ int
d316 1
a316 1
		    if (!isspace(command[n])) {
d326 1
a326 1
		    if (isspace(command[n])) {
@


1.5
log
@Update to xterm 258. lightly tested by krw@@, thanks.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.37 2010/04/04 22:34:17 tom Exp $ */
d5 1
a5 1
Copyright 2000-2009,2010 by Thomas E. Dickey
d44 9
d66 12
d188 48
d272 1
a272 1
	char *t = CastMallocN(char, strlen(s));
@


1.4
log
@Update to xterm-255. Tested by stsp@@, oga@@.
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.36 2009/12/07 09:16:23 tom Exp $ */
d5 1
a5 1
Copyright 2000-2008,2009 by Thomas E. Dickey
d175 1
a175 1
    return x_strncasecmp(s1, s2, len);
@


1.3
log
@Update to xterm 250
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.30 2009/10/12 22:25:54 tom Exp $ */
d38 1
d57 55
d115 15
a129 1
    return x_nonempty(getenv(name));
d136 2
a137 2
char *
x_nonempty(char *s)
d151 2
a152 2
char *
x_skip_blanks(char *s)
d159 2
a160 2
char *
x_skip_nonblanks(char *s)
d234 1
a234 1
x_strtrim(char *s)
d236 2
a237 1
    char *base = s;
d240 2
a241 2
    if (s != 0 && *s != '\0') {
	char *t = x_strdup(base);
d244 2
a245 1
	s = x_skip_blanks(s);
d255 3
a257 1
	base = t;
d259 1
a259 1
    return base;
@


1.2
log
@xterm 238. includes fix for CVE-2008-2383.
@
text
@d1 1
a1 3
/* $XTermId: xstrings.c,v 1.28 2008/12/30 17:10:37 tom Exp $ */

/* $XFree86: xc/programs/xterm/xstrings.c,v 1.10 2006/02/13 01:14:59 dickey Exp $ */
d5 1
a5 1
Copyright 2000-2007,2008 by Thomas E. Dickey
d100 1
a100 1
    unsigned len = strlen(s1);
d147 1
a147 1
x_strindex(char *s1, char *s2)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.25 2006/02/13 01:14:59 tom Exp $ */
d7 1
a7 1
Copyright 2000-2005,2006 by Thomas E. Dickey
d59 25
d114 2
a115 2
	int c1 = toupper(CharOf(*s1));
	int c2 = toupper(CharOf(*s2));
d188 26
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@import xterm 229
@
text
@d1 1
a1 1
/* $XTermId: xstrings.c,v 1.26 2007/06/09 13:43:00 tom Exp $ */
d7 1
a7 1
Copyright 2000-2006,2007 by Thomas E. Dickey
a55 25
}

char *
x_getenv(const char *name)
{
    return x_nonempty(getenv(name));
}

/*
 * Check if the given string is nonnull/nonempty.  If so, return a pointer
 * to the beginning of its content, otherwise return null.
 */
char *
x_nonempty(char *s)
{
    if (s != 0) {
	if (*s == '\0') {
	    s = 0;
	} else {
	    s = x_skip_blanks(s);
	    if (*s == '\0')
		s = 0;
	}
    }
    return s;
@

