head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.12
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.8
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v232:1.1.1.2
	v229:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v225:1.1.1.1
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.05.09.19.56.41;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.04.16.40.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.25.22.03.51;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.31.14.11.57;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.54;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.08.25.18.54.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xterm 304. With help of shadchin@@

tested by ajacoutot@@ and shadchin@@
@
text
@#!/usr/bin/env perl
# $XTermId: 88colors2.pl,v 1.12 2014/02/26 20:16:53 tom Exp $
# -----------------------------------------------------------------------------
# this file is part of xterm
#
# Copyright 1999-2012,2014 by Thomas E. Dickey
# Copyright 1999 by Steve Wall
# 
#                         All Rights Reserved
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
# Except as contained in this notice, the name(s) of the above copyright
# holders shall not be used in advertising or otherwise to promote the
# sale, use or other dealings in this Software without prior written
# authorization.
# -----------------------------------------------------------------------------
#
# Adapted from 256colors2.pl

# use the resources for colors 0-15 - usually more-or-less a
# reproduction of the standard ANSI colors, but possibly more
# pleasing shades

use strict;
use warnings;

use Getopt::Std;
use Encode 'encode_utf8';

our ($opt_8, $opt_c, $opt_d, $opt_h, $opt_q, $opt_r, $opt_u);
&getopts('8cdhqru') || die("Usage: $0 [options]");
die("Usage: $0 [options]\n
Options:
  -8  use 8-bit controls
  -c  use colons for separating parameter values in SGR 38/48
  -d  use rgb values rather than palette index
  -h  display this message
  -q  quieter output by merging all palette initialization
  -r  display the reverse of the usual palette
  -u  use UTF-8 when emitting 8-bit controls
") if ( $opt_h);

our $cube = 4;
our (@@steps);
our ($red, $green, $blue);
our ($gray, $level, $color);
our ($csi, $osc, $sep, $st);

our @@rgb;

sub map_cube($) {
	my $value = $_[0];
	$value = (3 - $value) if defined($opt_r);
	return $value;
}

sub map_gray($) {
	my $value = $_[0];
	$value = (7 - $value) if defined($opt_r);
	return $value;
}

sub define_color($$$$) {
	my $index = $_[0];
	my $r = $_[1];
	my $g = $_[2];
	my $b = $_[3];

	printf("%s4", $osc) unless ($opt_q);
	printf(";%d;rgb:%2.2x/%2.2x/%2.2x", $index, $r, $g, $b);
	printf("%s", $st) unless ($opt_q);

	$rgb[$index] = sprintf "%d%s%d%s%d", $r, $sep, $g, $sep, $b;
}

sub select_color($) {
	my $index = $_[0];
	if ( $opt_d and defined($rgb[$index]) ) {
		printf "%s48;2%s%sm  ", $csi, $sep, $rgb[$index];
	} else {
		printf "%s48;5%s%sm  ", $csi, $sep, $index;
	}
}

if ( $opt_8 ) {
	$csi = "\x9b";
	$osc = "\x9d";
	$st = "\x9c";
} else {
	$csi = "\x1b[";
	$osc = "\x1b]";
	$st = "\x1b\\";
}

if ( $opt_c ) {
	$sep = ":";
} else {
	$sep = ";";
}

if ( $opt_8 and $opt_u ) {
	my $lc_ctype=`locale 2>/dev/null | fgrep LC_CTYPE | sed -e 's/^.*=//'`;
	if ( $lc_ctype =~ /utf.?8/i ) {
		binmode(STDOUT, ":utf8");
	}
}
# colors 16-79 are a 4x4x4 color cube
@@steps=(0,139,205,255);
printf("%s4", $osc) if ($opt_q);
for ($red = 0; $red < $cube; $red++) {
    for ($green = 0; $green < $cube; $green++) {
	for ($blue = 0; $blue < $cube; $blue++) {
	    &define_color(
		   16 + (map_cube($red) * $cube * $cube) + (map_cube($green) * $cube) + map_cube($blue),
		   int ($steps[$red]),
		   int ($steps[$green]),
		   int ($steps[$blue]));
	}
    }
}

# colors 80-87 are a grayscale ramp, intentionally leaving out
# black and white
for ($gray = 0; $gray < 8; $gray++) {
    $level = (map_gray($gray) * 23.18181818) + 46.36363636;
    if( $gray > 0 ) { $level += 23.18181818; }
    &define_color(80 + $gray, int($level), int($level), int($level));
}
printf("%s", $st) if ($opt_q);


# display the colors

# first the system ones:
print "System colors:\n";
for ($color = 0; $color < 8; $color++) {
    &select_color($color);
}
printf "%s0m\n", $csi;
for ($color = 8; $color < 16; $color++) {
    &select_color($color);
}
printf "%s0m\n\n", $csi;

# now the color cube
print "Color cube, ${cube}x${cube}x${cube}:\n";
for ($green = 0; $green < $cube; $green++) {
    for ($red = 0; $red < $cube; $red++) {
	for ($blue = 0; $blue < $cube; $blue++) {
	    $color = 16 + ($red * $cube * $cube) + ($green * $cube) + $blue;
	    &select_color($color);
	}
	printf "%s0m ", $csi;
    }
    print "\n";
}


# now the grayscale ramp
print "Grayscale ramp:\n";
for ($color = 80; $color < 88; $color++) {
    &select_color($color);
}
printf "%s0m\n", $csi;
@


1.4
log
@Update to xterm 287. tested by mpi@@ and krw@@.
@
text
@d1 2
a2 2
#!/usr/bin/perl
# $XTermId: 88colors2.pl,v 1.11 2012/09/19 23:31:56 tom Exp $
d6 1
a6 1
# Copyright 1999-2009,2012 by Thomas E. Dickey
d43 1
d133 3
a135 3
		   int (@@steps[$red]),
		   int (@@steps[$green]),
		   int (@@steps[$blue]));
@


1.3
log
@Update to xterm-255. Tested by stsp@@, oga@@.
@
text
@d2 1
a2 1
# $XTermId: 88colors2.pl,v 1.7 2009/10/10 14:57:12 tom Exp $
d6 1
a6 1
# Copyright 1999-2007,2009 by Thomas E. Dickey
d45 1
d47 2
a48 2
our ($opt_h, $opt_q, $opt_r);
&getopts('hqr') || die("Usage: $0 [-q] [-r]");
d51 3
d57 1
d60 1
d64 3
d80 44
d126 6
a131 7
printf("\x1b]4") if ($opt_q);
for ($red = 0; $red < 4; $red++) {
    for ($green = 0; $green < 4; $green++) {
	for ($blue = 0; $blue < 4; $blue++) {
	    printf("\x1b]4") unless ($opt_q);
	    printf(";%d;rgb:%2.2x/%2.2x/%2.2x",
		   16 + (map_cube($red) * 16) + (map_cube($green) * 4) + map_cube($blue),
a134 1
	    printf("\x1b\\") unless ($opt_q);
d144 1
a144 4
    printf("\x1b]4") unless ($opt_q);
    printf(";%d;rgb:%2.2x/%2.2x/%2.2x",
	   80 + $gray, int($level), int($level), int($level));
    printf("\x1b\\") unless ($opt_q);
d146 1
a146 1
printf("\x1b\\") if ($opt_q);
d154 1
a154 1
    print "\x1b[48;5;${color}m  ";
d156 1
a156 1
print "\x1b[0m\n";
d158 1
a158 1
    print "\x1b[48;5;${color}m  ";
d160 1
a160 1
print "\x1b[0m\n\n";
d163 6
a168 6
print "Color cube, 4x4x4:\n";
for ($green = 0; $green < 4; $green++) {
    for ($red = 0; $red < 4; $red++) {
	for ($blue = 0; $blue < 4; $blue++) {
	    $color = 16 + ($red * 16) + ($green * 4) + $blue;
	    print "\x1b[48;5;${color}m  ";
d170 1
a170 1
	print "\x1b[0m ";
d179 1
a179 1
    print "\x1b[48;5;${color}m  ";
d181 1
a181 1
print "\x1b[0m\n";
@


1.2
log
@Update to xterm 250
@
text
@d2 33
a34 3
# $XTermId: 88colors2.pl,v 1.6 2009/10/10 14:57:12 tom Exp $
# Authors: Steve Wall <swall@@redcom.com>
#          Thomas E Dickey
@


1.1
log
@Initial revision
@
text
@d2 5
a6 3
# Author: Steve Wall <swall@@redcom.com>
# $XFree86: xc/programs/xterm/vttests/88colors2.pl,v 1.1 1999/09/25 14:38:51 dawes Exp $
# Made from 256colors2.pl
d12 29
d43 1
d47 3
a49 2
	    printf("\x1b]4;%d;rgb:%2.2x/%2.2x/%2.2x\x1b\\",
		   16 + ($red * 16) + ($green * 4) + $blue,
d53 1
d61 1
a61 1
    $level = ($gray * 23.18181818) + 46.36363636;
d63 2
a64 1
    printf("\x1b]4;%d;rgb:%2.2x/%2.2x/%2.2x\x1b\\",
d66 1
d68 1
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@import xterm 229
@
text
@d2 3
a4 5
# $XTermId: 88colors2.pl,v 1.5 2007/07/17 00:42:15 tom Exp $
# Authors: Steve Wall <swall@@redcom.com>
#          Thomas E Dickey
#
# Adapted from 256colors2.pl
a9 23
use strict;

use Getopt::Std;

our ($opt_r);
&getopts('r') || die("Usage: $0 [-r]");

our (@@steps);
our ($red, $green, $blue);
our ($gray, $level, $color);

sub map_cube($) {
	my $value = $_[0];
	$value = (3 - $value) if defined($opt_r);
	return $value;
}

sub map_gray($) {
	my $value = $_[0];
	$value = (7 - $value) if defined($opt_r);
	return $value;
}

d16 1
a16 1
		   16 + (map_cube($red) * 16) + (map_cube($green) * 4) + map_cube($blue),
d27 1
a27 1
    $level = (map_gray($gray) * 23.18181818) + 46.36363636;
@

