head	1.46;
access;
symbols
	OPENBSD_6_1:1.45.0.2
	OPENBSD_6_1_BASE:1.45
	OPENBSD_6_0:1.41.0.4
	OPENBSD_6_0_BASE:1.41
	OPENBSD_5_9:1.41.0.2
	OPENBSD_5_9_BASE:1.41
	OPENBSD_5_8:1.39.0.4
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.39.0.2
	OPENBSD_5_7_BASE:1.39
	OPENBSD_5_6:1.36.0.2
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.35.0.2
	OPENBSD_5_5_BASE:1.35
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.30.0.2
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.29.0.2
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.2
	OPENBSD_5_0:1.23.0.2
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.13.0.2
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	v232:1.1.1.4
	v229:1.1.1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	v225:1.1.1.2
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@.\" @;


1.46
date	2017.07.15.19.20.51;	author matthieu;	state Exp;
branches;
next	1.45;
commitid	b9xPQ49d1NNt4zlu;

1.45
date	2016.11.03.14.25.06;	author matthieu;	state Exp;
branches;
next	1.44;
commitid	f4xcYrkdKFtVElPL;

1.44
date	2016.10.24.19.55.37;	author matthieu;	state Exp;
branches;
next	1.43;
commitid	ZQ5X5iWza64K3vxk;

1.43
date	2016.10.24.19.31.35;	author matthieu;	state Exp;
branches;
next	1.42;
commitid	B07ASwwvhHC5WcY5;

1.42
date	2016.08.07.21.27.36;	author matthieu;	state Exp;
branches;
next	1.41;
commitid	psxxjI5z4Vpv2LL4;

1.41
date	2016.01.13.20.40.08;	author matthieu;	state Exp;
branches;
next	1.40;
commitid	by9Wu4LDAgU65dBU;

1.40
date	2015.09.05.14.11.46;	author matthieu;	state Exp;
branches;
next	1.39;
commitid	YVUODLQ4QcYTuGkb;

1.39
date	2015.01.18.20.24.40;	author matthieu;	state Exp;
branches;
next	1.38;
commitid	PDdlFuihcMifzxwp;

1.38
date	2014.12.18.20.16.55;	author matthieu;	state Exp;
branches;
next	1.37;
commitid	pCMhkpVdt9Oe52hU;

1.37
date	2014.10.05.16.39.19;	author matthieu;	state Exp;
branches;
next	1.36;
commitid	0wVJ6bWh03LWbUdn;

1.36
date	2014.05.09.19.56.41;	author matthieu;	state Exp;
branches;
next	1.35;

1.35
date	2014.02.14.19.40.03;	author matthieu;	state Exp;
branches;
next	1.34;

1.34
date	2014.01.02.15.14.50;	author matthieu;	state Exp;
branches;
next	1.33;

1.33
date	2013.08.26.20.06.14;	author matthieu;	state Exp;
branches;
next	1.32;

1.32
date	2013.06.02.19.55.50;	author matthieu;	state Exp;
branches;
next	1.31;

1.31
date	2013.03.09.14.45.39;	author matthieu;	state Exp;
branches;
next	1.30;

1.30
date	2013.01.04.16.40.18;	author matthieu;	state Exp;
branches;
next	1.29;

1.29
date	2012.06.07.20.20.24;	author matthieu;	state Exp;
branches;
next	1.28;

1.28
date	2012.04.14.09.02.46;	author matthieu;	state Exp;
branches;
next	1.27;

1.27
date	2011.11.16.21.14.25;	author matthieu;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.17.11.51.57;	author matthieu;	state Exp;
branches;
next	1.25;

1.25
date	2011.08.28.17.40.55;	author matthieu;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.18.19.47.42;	author matthieu;	state Exp;
branches;
next	1.23;

1.23
date	2011.06.07.19.21.06;	author matthieu;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.07.20.41.27;	author matthieu;	state Exp;
branches;
next	1.21;

1.21
date	2010.11.29.20.10.09;	author matthieu;	state Exp;
branches;
next	1.20;

1.20
date	2010.10.23.19.14.52;	author matthieu;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.05.19.37.23;	author matthieu;	state Exp;
branches;
next	1.18;

1.18
date	2010.08.22.13.38.11;	author matthieu;	state Exp;
branches;
next	1.17;

1.17
date	2010.05.08.12.20.47;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2010.03.25.22.03.51;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.31.14.11.57;	author matthieu;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.05.15.58.09;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2009.04.04.15.10.45;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.09.22.13.04;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2009.01.06.20.31.59;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2009.01.06.20.10.21;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.23.19.08.55;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2008.08.25.18.05.57;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.19.21.15.46;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.16.09.49.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.16.09.40.00;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.25.18.58.43;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.15.19.34.50;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.26.15.48.06;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.52;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.06.15.19.30.47;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.08.25.18.54.21;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.02.16.09.35.31;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.46
log
@Update to xterm 330
@
text
@'\" t
.\" $XTermId: xterm.man,v 1.715 2017/06/18 18:07:02 tom Exp $
.\"
.\" Copyright 1996-2016,2017 by Thomas E. Dickey
.\"
.\"                         All Rights Reserved
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining a
.\" copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included
.\" in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
.\" CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
.\" TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
.\" SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained in this notice, the name(s) of the above copyright
.\" holders shall not be used in advertising or otherwise to promote the
.\" sale, use or other dealings in this Software without prior written
.\" authorization.
.\"
.\"
.\" Copyright 1989  The Open Group
.\"
.\" Permission to use, copy, modify, distribute, and sell this software and its
.\" documentation for any purpose is hereby granted without fee, provided that
.\" the above copyright notice appear in all copies and that both that
.\" copyright notice and this permission notice appear in supporting
.\" documentation.
.\"
.\" The above copyright notice and this permission notice shall be included
.\" in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained in this notice, the name of The Open Group shall
.\" not be used in advertising or otherwise to promote the sale, use or
.\" other dealings in this Software without prior written authorization
.\" from The Open Group.
.\"
.\" Updated by Thomas E. Dickey for XFree86, July 1996 - February 2006.
.\"
.ds N Xterm
.ds n xterm
.\"
.\" Bulleted paragraph
.de bP
.ie \n(.IP \(bu 4
.el    .IP \(bu 2
..
.\" these would be fallbacks for DS/DE,
.\" but groff changed the meaning of the macros.
.de NS
.ie \n(.sp
.el    .sp .5
.ie \n(.in +4
.el    .in +2
.nf
.ft C			\" Courier
..
.de NE
.fi
.ft R
.in -4
..
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds AQ \(aq
.el       .ds AQ '
.ie \n(.g .ds `` \(lq
.el       .ds `` ``
.ie \n(.g .ds '' \(rq
.el       .ds '' ''
.TH XTERM 1 "__app_date__" "__app_version__" "X Window System"
.SH NAME
xterm \- terminal emulator for X
.if n .hy 0
.if n .nh
.if n .na
.SH SYNOPSIS
.B \*n
[\-\fItoolkitoption\fP ...] [\-\fIoption\fP ...] [\fIshell\fP]
.SH DESCRIPTION
.hy 0
.nh
The \fI\*n\fP program is a terminal emulator for the X Window System.
It provides DEC VT102/VT220 and selected features from higher-level
terminals such as VT320/VT420/VT520 (VT\fIxxx\fP).
It also provides Tektronix 4014 emulation
for programs that cannot use the window system directly.
If the underlying operating system supports
terminal resizing capabilities (for example, the SIGWINCH signal in systems
derived from 4.3BSD), \fI\*n\fP will use the facilities to notify programs
running in the window whenever it is resized.
.
.PP
The VT\fIxxx\fP and Tektronix 4014 terminals each have their own window so that you
can edit text in one and look at graphics in the other at the same time.
To maintain the correct aspect ratio (height/width), Tektronix graphics will
be restricted to the largest box with a 4014's aspect ratio that will fit in
the window.
This box is located in the upper left area of the window.
.
.PP
Although both windows may be displayed at the same time, one of them is
considered the \*(``active\*('' window for receiving keyboard input and terminal
output.
This is the window that contains the text cursor.
The active window can be chosen through escape sequences,
the \fBVT Options\fP menu in the VT\fIxxx\fP window,
and the \fBTek Options\fP menu in the 4014 window.
.
.SH EMULATIONS
\fI\*N\fP provides usable emulations of related DEC terminals:
.bP
VT52 emulation is complete.
.bP
VT102 emulation is fairly complete, but does not support autorepeat
(because that would affect the keyboard used by other X clients).
.IP
Double-size characters are displayed properly if your font server supports
scalable fonts.
.bP
VT220 emulation does not support soft fonts, it is otherwise complete.
.bP
VT420 emulation (the default) supports controls for manipulating rectangles
of characters as well as left/right margins.
.IP
\fI\*N\fP does not support some other features which
are not suitable for emulation, e.g., two-sessions.
.PP
Terminal database (\fIterminfo\fP (5) or \fItermcap\fP (5))
entries that work with \fI\*n\fP include
.IP
an optional platform-specific entry (\*(``__default_termname__\*(''),
.br
\*(``xterm\*('',
.br
\*(``vt102\*('',
.br
\*(``vt100\*('',
.br
\*(``ansi\*('' and
.br
\*(``dumb\*(''
.PP
\fI\*N\fP automatically searches the
terminal database in this order for these entries and then
sets the \*(``TERM\*('' variable
(and the \*(``TERMCAP\*('' environment variable on a few older systems).
The alternatives after \*(``xterm\*('' are very old,
from the late 1980s.
.PP
VT100 and VT102 emulations are commonly equated,
though they actually differ.
The VT102 provided controls for inserting and deleting lines.
.PP
Similarly,
\*(``ansi\*('' and
\*(``vt100\*('' are often equated.
These are not really the same.
For instance, they use different controls for scrolling
(but \fI\*n\fP supports both).
These features differ in an \*(``ansi\*('' terminal description
from \fI\*n\fP:
.TP 8
.B acsc
.br
Pseudo-graphics (line-drawing) uses a different mapping.
.TP 8
.B xenl
.br
\fI\*N\fP wraps text at the right margin using
the VT100 \*(``newline glitch\*('' behavior.
.PP
Because of the wrapping behavior, you would occasionally have to
repaint the screen when using a text editor with the \*(``ansi\*('' description.
.PP
You may also use descriptions corresponding to the various
supported emulations such as \*(``vt220\*('' or  \*(``vt420\*('',
but should set the terminal emulation level
with the \fBdecTerminalID\fP resource.
.PP
On most systems, \fI\*n\fP will use the terminfo database.
Some older systems use termcap.
(The \*(``TERMCAP\*('' environment variable is not set if \fI\*n\fP is linked
against a terminfo library, since the requisite information is not provided
by the termcap emulation of terminfo libraries).
.
.PP
Many of the special
.I \*n
features may be modified under program control
through a set of escape sequences different from the standard VT\fIxxx\fP escape
sequences (see \fIXterm Control Sequences\fP).
.
.PP
The Tektronix 4014 emulation is also fairly good.
It supports 12-bit graphics addressing, scaled to the window size.
Four different font sizes and five different lines types are supported.
There is no write-through or defocused mode support.
The Tektronix text and graphics commands are recorded internally by
.I \*n
and may be written to a file by sending the COPY escape sequence (or through
the \fBTektronix\fP menu; see below).
The name of the file will be
.NS
\*(``COPY\fIyyyy\fR\-\fIMM\fR\-\fIdd\fR.\fIhh\fR:\fImm\fR:\fIss\fR\*(''
.NE
.PP
where
.IR yyyy ,
.IR MM ,
.IR dd ,
.IR hh ,
.I mm
and
.I ss
are the year, month, day, hour, minute and second when the COPY was performed
(the file is created in the directory
.I \*n
is started in, or the home directory for a login
.IR \*n ).
.
.PP
Not all of the features described in this manual are necessarily available in
this version of \fI\*n\fP.
Some (e.g., the non-VT220 extensions) are available
only if they were compiled in, though the most commonly-used are in the
default configuration.
.
.SH "OTHER FEATURES"
\fI\*N\fP automatically highlights the text cursor when the
pointer enters the window (selected) and unhighlights it when the pointer
leaves the window (unselected).
If the window is the focus window, then the text cursor is
highlighted no matter where the pointer is.
.
.PP
In VT\fIxxx\fP mode, there are escape sequences to activate and deactivate
an alternate screen buffer, which is the same size as the display area
of the window.
When activated, the current screen is saved and replaced with the alternate
screen.
Saving of lines scrolled off the top of the window is disabled until the
normal screen is restored.
The usual terminal description for \fI\*n\fP allows the visual editor
.IR vi (1)
to switch to the alternate screen for editing and to restore the screen
on exit.
A popup menu entry makes it simple to switch between the normal and
alternate screens for cut and paste.
.
.PP
In either VT\fIxxx\fP or Tektronix mode, there are escape sequences to change the
name of the windows.
Additionally, in VT\fIxxx\fP mode,
\fI\*n\fP implements the window-manipulation control
sequences from \fIdtterm\fP, such as resizing the window, setting its location
on the screen.
.
.PP
\fI\*N\fP allows character-based applications to receive mouse events (currently
button-press and release events, and button-motion events)
as keyboard control sequences.
See \fIXterm Control Sequences\fP for details.
.
.\" ***************************************************************************
.SH OPTIONS
Because \fI\*n\fP uses the X Toolkit library,
it accepts the standard X Toolkit command line options.
\fI\*N\fP also accepts many application-specific options.
.PP
By convention, if an option begins with a
.RB \*(`` + \*(''
instead of a
.RB \*(`` \- \*('',
the option is restored to its default value.
.\" ***************************************************************************
.PP
Most of the \fI\*n\fP options are actually parsed by the X Toolkit,
which sets resource values, and
overrides corresponding resource-settings in your X resource files.
\fI\*N\fP provides the X Toolkit with a table of options.
A few of these are marked, telling the X Toolkit to ignore them
(\fB\-help\fP,
\fB\-version\fP,
\fB\-class\fP,
\fB\-e\fP, and
\fB\-into\fP).
After the X Toolkit has parsed the command-line parameters,
it removes those which it handles,
leaving the specially-marked parameters for \fI\*n\fP to handle.
.\" ***************************************************************************
.PP
These options do not set a resource value,
and are handled specially:
.TP 8
.B \-version
This causes \fI\*n\fP to print a version number to the standard output,
and then exit.
.TP 8
.B \-help
This causes \fI\*n\fP to print out a verbose message describing its options,
one per line.
The message is written to the standard output.
After printing the message, \fI\*n\fP exits.
\fI\*N\fP generates this message, sorting it and noting whether
a \*(``\fB\-\fR\fIoption\fP\*(''
or a \*(``\fB+\fR\fIoption\fP\*('' turns the feature on or off,
since some features historically have been one or the other.
\fI\*N\fP generates a concise help message (multiple options per line)
when an unknown option is used, e.g.,
.NS
\*n \-z
.NE
.IP
If the logic for a particular option such as logging is not compiled
into \fI\*n\fP, the help text for that option also is not displayed
by the \fB\-help\fP option.
.PP
The \fB\-version\fP and \fB\-help\fP options are interpreted even if \fI\*n\fP
cannot open the display, and are useful for testing and configuration scripts.
Along with \fB\-class\fP, they are checked before other options.
To do this, \fI\*n\fP has its own (much simpler) argument parser,
along with a table of the X Toolkit's built-in list of options.
.PP
Relying upon the X Toolkit to parse the options and associated values
has the advantages of simplicity and good integration with the X resource
mechanism.
There are a few drawbacks
.bP
\fI\*N\fP cannot tell easily whether a resource value was set by
one of the external resource- or application-defaults files,
or if it was set through the \fB\-xrm\fP option
or via some directly relevant command-line option.
\fI\*N\fP sees only the end-result:
a value supplied when creating its widgets.
.bP
\fI\*N\fP does not know the order in which particular options and
items in resource files are evaluated.
Rather, it sees all of the values for a given widget at the same time.
In the design of these options,
some are deemed more important,
and can override other options.
.IP
The X Toolkit uses patterns (constants and wildcards) to match resources.
Once a particular pattern has been used,
it will not modify it.
To override a given setting,
a more-specific pattern must be used,
e.g., replacing \*(``*\*('' with \*(``.\*(''.
Some poorly-designed resource files are too specific
to allow the command-line options to affect the relevant widget values.
.bP
In a few cases,
the X Toolkit combines its standard options in ways which do not work
well with \fI\*n\fP.
This happens with the color (\fB\-fg\fP, \fB\-bg\fP) and reverse (\fB\-rv\fP)
options.
\fI\*N\fP makes a special case of these and
adjusts its sense of \*(``reverse\*(''
to lessen user surprise.
.\" ***************************************************************************
.PP
One parameter (after all options) may be given.
That overrides \fI\*n\fP's built-in choice of shell program:
.bP
If the parameter is not a relative path, i.e.,
beginning with \*(``./\*('' or \*(``../\*('',
\fI\*n\fP looks for the file in the user's PATH.
In either case, this check fails
if \fI\*n\fP cannot construct an absolute path.
.bP
If that check fails (or if no such parameter is given),
\fI\*n\fP next checks the \*(``SHELL\*('' variable.
If that specifies an executable file,
\fI\*n\fP will attempt to start that.
However, \fI\*n\fP additionally checks if it is a valid shell,
and will unset \*(``SHELL\*('' if it is not.
.bP
If \*(``SHELL\*('' is not set to an executable file,
\fI\*n\fP tries to use the shell program specified
in the user's password file entry.
As before, \fI\*n\fP verifies if this is a valid shell.
.bP
Finally, if the password file entry does not specify a valid shell,
\fI\*n\fP uses \fI/bin/sh\fP.
.PP
The \fB\-e\fP option cannot be used with this parameter since
it uses all parameters following the option.
.PP
\fI\*N\fP validates shell programs by finding their pathname in
the text file \fB/etc/shells\fP.
It treats the environment variable \*(``SHELL\*('' specially because
(like \*(``TERM\*(''), \fI\*n\fP both reads and updates the variable,
and because the program started by \fI\*n\fP is not necessarily a shell.
.\" ***************************************************************************
.PP
The other options are used to control the appearance and behavior.
Not all options are necessarily configured into your copy of \fI\*n\fP:
.TP 8
.B \-132
Normally, the VT102 DECCOLM escape sequence that switches between 80 and
132 column mode is ignored.
This option causes the DECCOLM escape sequence to be recognized, and the
.I \*n
window will resize appropriately.
.TP 8
.B \-ah
This option indicates that
.I \*n
should always highlight the text cursor.
By default,
.I \*n
will display a hollow text cursor whenever the focus is lost or the
pointer leaves the window.
.TP 8
.B +ah
This option indicates that
.I \*n
should do text cursor highlighting based on focus.
.TP 8
.B \-ai
This option disables active icon support if that feature was compiled
into \fI\*n\fP.
This is equivalent to setting the \fIvt100\fP resource
\fBactiveIcon\fP to \*(``false\*(''.
.TP 8
.B +ai
This option enables active icon support if that feature was compiled
into \fI\*n\fP.
This is equivalent to setting the \fIvt100\fP resource
\fBactiveIcon\fP to \*(``true\*(''.
.TP 8
.B \-aw
This option indicates that auto-wraparound should be allowed,
and is equivalent to setting the \fIvt100\fP resource
\fBautoWrap\fP to \*(``false\*(''.
.IP
Auto-wraparound
allows the cursor to automatically wrap to the beginning of the next
line when it is at the rightmost position of a line and text is
output.
.TP 8
.B +aw
This option indicates that auto-wraparound should not be allowed,
and is equivalent to setting the \fIvt100\fP resource
\fBautoWrap\fP to \*(``false\*(''.
.TP 8
.BI \-b " number"
This option specifies the size of the inner border (the distance between
the outer edge of the characters and the window border) in pixels.
That is the \fIvt100\fP \fBinternalBorder\fP resource.
The
default is \*(``2\*(''.
.TP 8
.BI \-baudrate " number"
Set the line-speed, used to test the behavior of applications that
use the line-speed when optimizing their output to the screen.
The
default is \*(``38400\*(''.
.TP 8
.B +bc
turn off text cursor blinking.
This overrides the \fBcursorBlink\fR resource.
.TP 8
.B \-bc
turn on text cursor blinking.
This overrides the \fBcursorBlink\fR resource.
.TP 8
.BI \-bcf " milliseconds"
set the amount of time text cursor is off when blinking via the
\fBcursorOffTime\fP resource.
.TP 8
.BI \-bcn " milliseconds"
set the amount of time text cursor is on when blinking via the
\fBcursorOnTime\fP resource.
.TP 8
.B "\-bdc"
Set the \fIvt100\fP resource \fBcolorBDMode\fR to \*(``false\*('',
disabling the display of characters with bold attribute as color.
.TP 8
.B "+bdc"
Set the \fIvt100\fP resource \fBcolorBDMode\fR to \*(``true\*('',
enabling the display of characters with bold attribute as color
rather than bold.
.TP 8
.B "\-cb"
Set the \fIvt100\fP resource \fBcutToBeginningOfLine\fP to \*(``false\*(''.
.TP 8
.B "+cb"
Set the \fIvt100\fP resource \fBcutToBeginningOfLine\fP to \*(``true\*(''.
.TP 8
.B "\-cc \fIcharacterclassrange\fP:\fIvalue\fP[,...]"
This sets classes indicated by the given ranges for using in selecting by
words (see \fBCHARACTER CLASSES\fP and the \fBcharClass\fP resource).
.TP 8
.B "\-cjk_width"
Set the \fBcjkWidth\fP resource to \*(``true\*(''.
When turned on, characters with East Asian Ambiguous (A) category in UTR 11
have a column width of 2.
Otherwise, they have a column width of 1.
This may be useful for some legacy CJK text
terminal-based programs assuming box drawings and others to have a column
width of 2.
It also should be turned on when you specify a TrueType
CJK double-width (bi-width/monospace) font either with \fB\-fa\fP at
the command line or \fBfaceName\fP resource.
The default is \*(``false\*(''
.TP 8
.B "+cjk_width"
Reset the \fBcjkWidth\fP resource.
.TP 8
.BI \-class " string"
This option allows you to override \fI\*n\fP's resource class.
Normally it is \*(``__default_class__\*('', but
can be set to another class such as \*(``U__default_class__\*('' to override selected resources.
.TP 8
.B "\-cm"
This option disables recognition of ANSI color-change escape sequences.
It sets the \fBcolorMode\fP resource to \*(``false\*(''.
.TP 8
.B "+cm"
This option enables recognition of ANSI color-change escape sequences.
This is the same as the \fIvt100\fP resource \fBcolorMode\fP.
.TP 8
.B "\-cn"
This option indicates that newlines should not be cut in line-mode
selections.
It sets the \fBcutNewline\fP resource to \*(``false\*(''.
.TP 8
.B +cn
This option indicates that newlines should be cut in line-mode selections.
It sets the \fBcutNewline\fP resource to \*(``true\*(''.
.TP 8
.BI \-cr " color"
This option specifies the color to use for text cursor.
The default is to
use the same foreground color that is used for text.
It sets the \fBcursorColor\fP resource according to the parameter.
.TP 8
.B \-cu
This option indicates that \fI\*n\fP should work around a bug in the
.IR more (1)
program that causes it
to incorrectly display lines that are exactly the width of the window and
are followed by a line beginning with a tab
(the leading tabs are not displayed).
This option is so named because it was originally thought to be a bug
in the
.IR curses (3x)
cursor motion package.
.TP 8
.B +cu
This option indicates that \fI\*n\fP should not work around the
.IR more (1)
bug mentioned above.
.TP 8
.B "\-dc"
This option disables the escape sequence to change dynamic colors:
the vt100 foreground and background colors,
its text cursor color,
the pointer cursor foreground and background colors,
the Tektronix emulator foreground and background colors,
its text cursor color
and highlight color.
The option sets the \fBdynamicColors\fP option to \*(``false\*(''.
.TP 8
.B "+dc"
This option enables the escape sequence to change dynamic colors.
The option sets the \fBdynamicColors\fP option to \*(``true\*(''.
.TP 8
.BI \-e "\fI program \fP[ \fIarguments \fP.\|.\|. ]\fI"
This option specifies the program (and its command line arguments) to be
run in the \fI\*n\fP window.
It also sets the window title and icon
name to be the basename of the program being executed if neither \fI\-T\fP
nor \fI\-n\fP are given on the command line.
.IP
\fBNOTE:\fP This must be the \fBlast option\fP on the command line.
.TP 8
.BI \-en " encoding"
This option determines the encoding on which \fI\*n\fP runs.
It sets the \fBlocale\fR resource.
Encodings other than UTF-8 are supported by using \fIluit\fR.
The \fB\-lc\fR option should be used instead of \fB\-en\fR for
systems with locale support.
.TP 8
.BI \-fb " font"
This option specifies a font to be used when displaying bold text.
It sets the \fBboldFont\fR resource.
.IP
This font must be the same height and width as the normal font, otherwise it is ignored.
If only one of the normal or bold fonts is specified, it will be used as the
normal font and the bold font will be produced by overstriking this font.
.IP
See also the discussion of \fBboldMode\fP and \fBalwaysBoldMode\fP resources.
.TP 8
.BI \-fa " pattern"
This option sets the pattern for fonts selected from the FreeType
library if support for that library was compiled into \fI\*n\fP.
This corresponds to the \fBfaceName\fP resource.
When a CJK
double-width font is specified, you also need to turn
on the \fBcjkWidth\fP resource.
.IP
If you specify both \fB\-fa\fP and the X Toolkit option \fB\-fn\fP,
the \fB\-fa\fP setting overrides the latter.
.IP
See also the \fBrenderFont\fP resource,
which combines with this to determine whether FreeType fonts are
initially active.
.TP 8
.BI \-fbb
This option indicates that \fI\*n\fP should compare normal and bold fonts bounding
boxes to ensure they are compatible.
It sets the \fBfreeBoldBox\fP resource to \*(``false\*(''.
.TP 8
.BI +fbb
This option indicates that \fI\*n\fP should not compare normal and bold fonts bounding
boxes to ensure they are compatible.
It sets the \fBfreeBoldBox\fP resource to \*(``true\*(''.
.TP 8
.BI \-fbx
This option indicates that \fI\*n\fP should not assume that the
normal and bold fonts have VT100 line-drawing characters.
If any are missing, \fI\*n\fP will draw the characters directly.
It sets the \fBforceBoxChars\fP resource to \*(``false\*(''.
.TP 8
.BI +fbx
This option indicates that \fI\*n\fP should assume that the
normal and bold fonts have VT100 line-drawing characters.
It sets the \fBforceBoxChars\fP resource to \*(``true\*(''.
.TP 8
.BI \-fd " pattern"
This option sets the pattern for double-width fonts selected from the FreeType
library if support for that library was compiled into \fI\*n\fP.
This corresponds to the \fBfaceNameDoublesize\fP resource.
.TP 8
.BI \-fi " font"
This option sets the font for active icons if that feature was compiled
into \fI\*n\fP.
.IP
See also the discussion of the \fBiconFont\fP resource.
.TP 8
.BI \-fs " size"
This option sets the pointsize for fonts selected from the FreeType
library if support for that library was compiled into \fI\*n\fP.
This corresponds to the \fBfaceSize\fP resource.
.TP 8
.BI \-fullscreen
This option indicates that \fI\*n\fP should ask the window manager to
let it use the full-screen for display,
e.g., without window decorations.
It sets the \fBfullscreen\fP resource to \*(``true\*(''.
.TP 8
.BI +fullscreen
This option indicates that \fI\*n\fP should not ask the window manager to
let it use the full-screen for display.
It sets the \fBfullscreen\fP resource to \*(``false\*(''.
.TP 8
.B \-fw \fIfont\fP
This option specifies the font to be used for displaying wide text.
By default,
it will attempt to use a font twice as wide as the font that will be used to
draw normal text.
If no double-width font is found, it will improvise, by stretching
the normal font.
This corresponds to the \fBwideFont\fP resource.
.TP 8
.B \-fwb \fIfont\fP
This option specifies the font to be used for displaying bold wide text.
By default,
it will attempt to use a font twice as wide as the font that will be used to
draw bold text.
If no double-width font is found, it will improvise, by stretching
the bold font.
This corresponds to the \fBwideBoldFont\fP resource.
.TP 8
.B \-fx \fIfont\fP
This option specifies the font to be used for displaying the preedit string
in the \*(``OverTheSpot\*('' input method.
.IP
See also the discussion of the \fBximFont\fP resource.
.TP 8
.BI \-hc " color"
(see \fB\-selbg\fP).
.TP 8
.BI \-hf
This option indicates that HP function key escape codes should be generated
for function keys.
It sets the \fBhpFunctionKeys\fP resource to \*(``true\*(''.
.TP 8
.BI +hf
This option indicates that HP function key escape codes should not be generated
for function keys.
It sets the \fBhpFunctionKeys\fP resource to \*(``false\*(''.
.TP 8
.BI \-hm
Tells \fI\*n\fP to use
\fBhighlightTextColor\fP and \fBhighlightColor\fP
to override the reversed foreground/background colors in a selection.
It sets the \fBhighlightColorMode\fP resource to \*(``true\*(''.
.TP 8
.BI +hm
Tells \fI\*n\fP not to use
\fBhighlightTextColor\fP and \fBhighlightColor\fP
to override the reversed foreground/background colors in a selection.
It sets the \fBhighlightColorMode\fP resource to \*(``false\*(''.
.TP 8
.BI \-hold
Turn on the \fBhold\fP resource, i.e.,
\fI\*n\fP will not immediately destroy its window when the shell command completes.
It will wait until you use the window manager to destroy/kill the window, or
if you use the menu entries that send a signal, e.g., HUP or KILL.
.TP 8
.BI +hold
Turn off the \fBhold\fP resource, i.e.,
\fI\*n\fP will immediately destroy its window when the shell command completes.
.TP 8
.B \-ie
Turn on the \fBptyInitialErase\fP resource, i.e.,
use the pseudo-terminal's sense of the \fIstty\fP erase value.
.TP 8
.B +ie
Turn off the \fBptyInitialErase\fP resource, i.e.,
set the \fIstty\fP erase value using the \fBkb\fP string from the termcap entry as
a reference, if available.
.TP 8
.B \-im
Turn on the \fBuseInsertMode\fP resource,
which forces use of insert mode by adding appropriate entries to the TERMCAP
environment variable.
(This option is ignored on most systems, because TERMCAP is not used).
.TP 8
.B +im
Turn off the \fBuseInsertMode\fP resource.
.TP 8
.BI \-into " windowId"
Given an X window identifier (an integer, which can be hexadecimal,
octal or decimal according to whether it begins with "0x", "0" or neither),
\fI\*n\fP will reparent its top-level shell widget to that window.
This is used to embed \fI\*n\fP within other applications.
.IP
For instance, there are scripts for Tcl/Tk and Gtk which can be used
to demonstrate the feature.
When using Gtk, there is a limitation of that toolkit which requires
that \fI\*n\fP's \fBallowSendEvents\fP resource is enabled.
.TP 8
.B "\-itc"
Set the \fIvt100\fP resource \fBcolorITMode\fR to \*(``false\*('',
disabling the display of characters with italic attribute as color.
.TP 8
.B "+itc"
Set the \fIvt100\fP resource \fBcolorITMode\fR to \*(``true\*('',
enabling the display of characters with italic attribute as color
rather than italic.
.TP 8
.B \-j
This option indicates that \fI\*n\fP should do jump scrolling.
It corresponds to the \fBjumpScroll\fP resource.
Normally,
text is scrolled one line at a time; this option allows \fI\*n\fP to move
multiple lines at a time so that it does not fall as far behind.
Its use is
strongly recommended since it makes \fI\*n\fP much faster when scanning
through large amounts of text.
The VT100 escape sequences for enabling and
disabling smooth scroll as well as the \fBVT Options\fP
menu can be used to turn this
feature on or off.
.TP 8
.B +j
This option indicates that \fI\*n\fP should not do jump scrolling.
.TP 8
.B \-k8
This option sets the \fBallowC1Printable\fP resource.
When \fBallowC1Printable\fP is set, \fI\*n\fP overrides the mapping
of C1 control characters (code 128-159) to treat them as printable.
.TP 8
.B +k8
This option resets the \fBallowC1Printable\fP resource.
.TP 8
.BI \-kt " keyboardtype"
This option sets the \fBkeyboardType\fP resource.
Possible values include:
\*(``unknown\*('',
\*(``default\*('',
\*(``legacy\*('',
\*(``hp\*('',
\*(``sco\*('',
\*(``sun\*('',
\*(``tcap\*('' and
\*(``vt220\*(''.
.IP
The value \*(``unknown\*('',
causes the corresponding resource to be ignored.
.IP
The value \*(``default\*('',
suppresses the associated resources
.IP
\fBhpFunctionKeys\fP,
.br
\fBscoFunctionKeys\fP,
.br
\fBsunFunctionKeys\fP,
.br
\fBtcapFunctionKeys\fP,
.br
\fBoldXtermFKeys\fP
and
.br
\fBsunKeyboard\fP,
.IP
using the Sun/PC keyboard layout.
.TP 8
.B \-l
Turn logging on, unless disabled by the \fBlogInhibit\fP resource.
.IP
Some versions of \fI\*n\fP may have logging enabled.
However, normally logging is not supported,
due to security concerns in the early 1990s.
That was a problem in X11R4 \fBxterm\fP (1989) which was addressed by
a patch to X11R5 late in 1993.
X11R6 included these fixes.
The older version (when running with \fIroot\fP privilege) would create
the log-file using \fIroot\fP privilege.
The reason why \fI\*n\fP ran with \fIroot\fP privileges
was to open pseudo-terminals.
Those privileges are now needed only on very old systems:
Unix98 pseudo-terminals made the BSD scheme unnecessary.
.IP
Unless overridden by the \fB\-lf\fP option or the \fBlogFile\fP resource:
.RS
.bP
The logfile is written to the directory from which \fI\*n\fP is invoked.
.bP
The filename is generated, of the form
.NS
XtermLog.\fIXXXXXX\fR
.NE
.IP
or
.NS
Xterm.log.\fIhostname.yyyy.mm.dd.hh.mm.ss.XXXXXX\fR
.NE
.IP
depending on how \fI\*n\fP was built.
.RE
.TP 8
.B +l
Turn logging off.
.TP 8
.B \-lc
Turn on support of various encodings according to the users'
locale setting, i.e., LC_ALL, LC_CTYPE, or LANG environment variables.
This is achieved by turning on UTF-8 mode and by invoking \fIluit\fR for
conversion between locale encodings and UTF-8.
(\fIluit\fR is not invoked in UTF-8 locales.)
This corresponds to the \fBlocale\fR resource.
.IP
The actual list of encodings which are supported is determined by \fIluit\fR.
Consult the \fIluit\fR manual page for further details.
.IP
See also the discussion of the \fB\-u8\fP option which supports UTF-8 locales.
.TP 8
.B +lc
Turn off support of automatic selection of locale encodings.
Conventional 8bit mode or, in UTF-8 locales or with \fB\-u8\fP option,
UTF-8 mode will be used.
.TP 8
.BI \-lcc " path"
File name for the encoding converter from/to locale encodings
and UTF-8 which is used with \fB\-lc\fP option or \fBlocale\fR resource.
This corresponds to the \fBlocaleFilter\fR resource.
.TP 8
.B \-leftbar
Force scrollbar to the left side of VT100 screen.
This is the default, unless you have set the rightScrollBar resource.
.TP 8
.BI \-lf " filename"
Specify the log-filename.
This sets the \fBlogFile\fP resource.
See the \fB\-l\fP option.
.TP 8
.B \-ls
This option indicates that the shell that is started in the \fI\*n\fP window
will be a login shell (i.e., the first character of argv[0] will be a dash,
indicating to the shell that it should read the user's .login or .profile).
.IP
The \fB\-ls\fP flag and the \fBloginShell\fP resource
are ignored if \fB\-e\fP is also given,
because \fI\*n\fP does not know how to make the shell
start the given command after whatever it does when it is a login
shell \- the user's shell of choice need not be a Bourne shell after all.
Also, \fI\*n\ \-e\fP is supposed to provide a consistent
functionality for other applications that need to start text-mode
programs in a window, and if \fBloginShell\fP were not ignored, the
result of ~/.profile might interfere with that.
.IP
If you do want the effect of \fB\-ls\fP and \fB\-e\fP simultaneously, you
may get away with something like
.NS 15
\*n \-e /bin/bash \-l \-c "my command here"
.NE
.IP
Finally, \fB\-ls\fP is not completely ignored,
because \fI\*n\ \-ls\ \-e\fP does write a \fI/etc/wtmp\fP entry
(if configured to do so),
whereas \fI\*n\ \-e\fP does not.
.TP 8
.B \-maximized
This option indicates that \fI\*n\fP should ask the window manager to
maximize its layout on startup.
This corresponds to the \fBmaximized\fP resource.
.IP
Maximizing is not the reverse of iconifying;
it is possible to do both with certain window managers.
.TP 8
.B +maximized
This option indicates that \fI\*n\fP should ask the window manager to
not maximize its layout on startup.
.TP 8
.B +ls
This option indicates that the shell that is started should not be a login
shell (i.e., it will be a normal \*(``subshell\*('').
.TP 8
.B \-mb
This option indicates that \fI\*n\fP should ring a margin bell when
the user types near the right end of a line.
.TP 8
.B +mb
This option indicates that margin bell should not be rung.
.TP 8
.BI \-mc " milliseconds"
This option specifies the maximum time between multi-click selections.
.TP 8
.B \-mesg
Turn off the \fBmessages\fP resource, i.e.,
disallow write access to the terminal.
.TP 8
.B +mesg
Turn on the \fBmessages\fP resource, i.e.,
allow write access to the terminal.
.TP 8
.B "\-mk_width"
Set the \fBmkWidth\fP resource to \*(``true\*(''.
This makes \fI\*n\fP use a built-in version of the wide-character width
calculation.
The default is \*(``false\*(''
.TP 8
.B "+mk_width"
Reset the \fBmkWidth\fP resource.
.TP 8
.BI \-ms " color"
This option specifies the color to be used for the pointer cursor.
The default
is to use the foreground color.
This sets the \fBpointerColor\fP resource.
.TP 8
.BI \-nb " number"
This option specifies the number of characters from the right end of a line
at which the margin bell, if enabled, will ring.
The default is \*(``10\*(''.
.TP 8
.B "\-nul"
This option disables the display of underlining.
.TP 8
.B "+nul"
This option enables the display of underlining.
.TP 8
.B \-pc
This option enables the PC-style use of bold colors
(see \fBboldColors\fP resource).
.TP 8
.B +pc
This option disables the PC-style use of bold colors.
.TP 8
.B \-pob
This option indicates that the window should be raised whenever a
Control-G is received.
.TP 8
.B +pob
This option indicates that the window should not be raised whenever a
Control-G is received.
.TP 8
.B \-report\-charclass
Print a report to the standard output showing information about the
character-classes which can be altered using the \fBcharClass\fP resource.
.TP 8
.B \-report\-colors
Print a report to the standard output showing information about colors
as \fI\*n\fP allocates them.
This corresponds to the \fBreportColors\fP resource.
.TP 8
.B \-report\-fonts
Print a report to the standard output showing information about fonts
which are loaded.
This corresponds to the \fBreportFonts\fP resource.
.TP 8
.B \-rightbar
Force scrollbar to the right side of VT100 screen.
.TP 8
.B "\-rvc"
This option disables the display of characters with reverse attribute as color.
.TP 8
.B "+rvc"
This option enables the display of characters with reverse attribute as color.
.TP 8
.B \-rw
This option indicates that reverse-wraparound should be allowed.
This allows
the cursor to back up from the leftmost column of one line to the rightmost
column of the previous line.
This is very useful for editing long shell
command lines and is encouraged.
This option can be turned on and off from
the \fBVT Options\fP menu.
.TP 8
.B +rw
This option indicates that reverse-wraparound should not be allowed.
.TP 8
.B \-s
This option indicates that \fI\*n\fP may scroll asynchronously, meaning that
the screen does not have to be kept completely up to date while scrolling.
This allows \fI\*n\fP to run faster when network latencies are very high
and is typically useful when running across a very large internet or many
gateways.
.TP 8
.B +s
This option indicates that \fI\*n\fP should scroll synchronously.
.TP 8
.B \-samename
Does not send title and icon name change requests when the request
would have no effect: the name is not changed.
This has the advantage
of preventing flicker and the disadvantage of requiring an extra
round trip to the server to find out the previous value.
In practice
this should never be a problem.
.TP 8
.B +samename
Always send title and icon name change requests.
.TP 8
.B \-sb
This option indicates that some number of lines that are scrolled off the top
of the window should be saved and that a scrollbar should be displayed so that
those lines can be viewed.
This option may be turned on and off from the \fBVT Options\fP menu.
.TP 8
.B +sb
This option indicates that a scrollbar should not be displayed.
.TP 8
.BI \-selbg " color"
This option specifies the color to use for the background of selected text.
If not specified, reverse video is used.
See the discussion of the \fBhighlightColor\fP resource.
.TP 8
.BI \-selfg " color"
This option specifies the color to use for selected text.
If not specified, reverse video is used.
See the discussion of the \fBhighlightTextColor\fP resource.
.TP 8
.B \-sf
This option indicates that Sun function key escape codes should be generated
for function keys.
.TP 8
.B +sf
This option indicates that the standard escape codes should be generated for
function keys.
.TP 8
.BI \-sh " number"
scale line-height values by the given number.
See the discussion of the \fBscaleHeight\fP resource.
.TP 8
.B \-si
This option indicates that output to a window should not automatically
reposition the screen to the bottom of the scrolling region.
This option can be turned on and off from the \fBVT Options\fP menu.
.TP 8
.B +si
This option indicates that output to a window should cause it to
scroll to the bottom.
.TP 8
.B \-sk
This option indicates that pressing a key while
using the scrollbar to review previous lines of text should
cause the window to be repositioned automatically in the normal position at the
bottom of the scroll region.
.TP 8
.B +sk
This option indicates that pressing a key while using the scrollbar
should not cause the window to be repositioned.
.TP 8
.BI \-sl " number"
This option specifies the number of lines to save that have been scrolled
off the top of the screen.
This corresponds to the \fBsaveLines\fP resource.
The default is \*(``64\*(''.
.TP 8
.B \-sm
This option, corresponding to the \fBsessionMgt\fR resource,
indicates that \fI\*n\fR should
set up session manager callbacks.
.TP 8
.B +sm
This option indicates that \fI\*n\fR should
not set up session manager callbacks.
.TP 8
.B \-sp
This option indicates that Sun/PC keyboard should be assumed,
providing mapping for keypad \*(``+\*('' to \*(``,\*('', and
CTRL-F1 to F13, CTRL-F2 to F14, etc.
.TP 8
.B +sp
This option indicates that the standard escape codes should be generated for
keypad and function keys.
.TP 8
.B \-t
This option indicates that \fI\*n\fP should start in Tektronix mode, rather
than in VT\fIxxx\fP mode.
Switching between the two windows is done using the
\*(``Options\*('' menus.
.IP
Terminal database (\fIterminfo\fP (5) or \fItermcap\fP (5))
entries that work with \fI\*n\fR are:
.IP
\*(``tek4014\*('',
.br
\*(``tek4015\*('',
.br
\*(``tek4012\*('',
.br
\*(``tek4013\*('',
.br
\*(``tek4010\*('', and
.br
\*(``dumb\*(''.
.IP
.I \*n
automatically searches the terminal database in this order for these entries and then
sets the \*(``TERM\*('' variable
(and the \*(``TERMCAP\*('' environment variable, if relevant).
.TP 8
.B +t
This option indicates that \fI\*n\fP should start in VT\fIxxx\fP mode.
.TP 8
.B \-tb
This option, corresponding to the \fBtoolBar\fR resource,
indicates that \fI\*n\fR should display a toolbar (or menubar)
at the top of its window.
The buttons in the toolbar correspond to
the popup menus, e.g., control/left/mouse for \fBMain Options\fP.
.TP 8
.B +tb
This option indicates that \fI\*n\fR should
not set up a toolbar.
.TP 8
.BI \-ti " term_id"
Specify the name used by \fI\*n\fP to select the
correct response to terminal ID queries.
It also specifies the emulation level,
used to determine the type of response to a DA control sequence.
Valid values include vt52, vt100, vt101, vt102, vt220, and vt240
(the \*(``vt\*('' is optional).
The default is \*(``vt__default_termid__\*(''.
The \fIterm_id\fP argument specifies the terminal ID to use.
(This is the same as the \fBdecTerminalID\fP resource).
.TP 8
.BI \-tm " string"
This option specifies a series of terminal setting keywords followed by the
characters that should be bound to those functions, similar to the \fIstty\fP
program.
The keywords and their values are described in detail in the \fBttyModes\fP
resource.
.TP 8
.BI \-tn " name"
This option specifies the name of the terminal type to be set in the TERM
environment variable.
It corresponds to the \fBtermName\fP resource.
This terminal type must exist in the terminal
database
(termcap or terminfo, depending on how \fI\*n\fP is built)
and should have \fIli#\fP and \fIco#\fP entries.
If the terminal type is not found, \fI\*n\fP uses the built-in list
\*(``xterm\*('', \*(``vt102\*('', etc.
.TP 8
.B \-u8
This option sets the \fButf8\fP resource.
When \fButf8\fP is set, \fI\*n\fP interprets incoming data as UTF-8.
This sets the \fBwideChars\fP resource as a side-effect,
but the UTF-8 mode set by this option prevents it from being turned off.
If you must turn UTF-8 encoding on and off,
use the \fB\-wc\fP option or the corresponding \fBwideChars\fP resource,
rather than the \fB\-u8\fP option.
.IP
This option and the \fButf8\fR resource are overridden by
the \fB\-lc\fP and \fB\-en\fP options and \fBlocale\fR resource.
That is, if \fI\*n\fP has been compiled to support \fIluit\fR,
and the \fBlocale\fP resource is not \*(``false\*(''
this option is ignored.
We recommend using
the \fB\-lc\fR option or the \*(``\fBlocale:\ true\fR\*('' resource
in UTF-8 locales when your operating system supports locale,
or \fB\-en\ UTF-8\fP option or the \*(``\fBlocale:\ UTF-8\fR\*('' resource
when your operating system does not support locale.
.TP 8
.B +u8
This option resets the \fButf8\fP resource.
.TP 8
.B "\-uc"
This option makes the cursor underlined instead of a box.
.TP 8
.B "+uc"
This option makes the cursor a box instead of underlined.
.TP 8
.B "\-ulc"
This option disables the display of characters with underline attribute as
color rather than with underlining.
.TP 8
.B "+ulc"
This option enables the display of characters with underline attribute as
color rather than with underlining.
.TP 8
.B "\-ulit"
This option, corresponding to the \fBitalicULMode\fP resource,
disables the display of characters with underline attribute as
italics rather than with underlining.
.TP 8
.B "+ulit"
This option, corresponding to the \fBitalicULMode\fP resource,
enables the display of characters with underline attribute as
italics rather than with underlining.
.TP 8
.B \-ut
This option indicates that \fI\*n\fP should not write a record into the
the system \fIutmp\fP log file.
.TP 8
.B +ut
This option indicates that \fI\*n\fP should write a record into
the system \fIutmp\fP log file.
.TP 8
.B \-vb
This option indicates that a visual bell is preferred over an audible one.
Instead of ringing the terminal bell whenever a Control-G is received, the
window will be flashed.
.TP 8
.B +vb
This option indicates that a visual bell should not be used.
.TP 8
.B \-wc
This option sets the \fBwideChars\fP resource.
.IP
When \fBwideChars\fP is set,
\fI\*n\fP maintains internal structures for 16-bit characters.
If \fI\*n\fP is not started in UTF-8 mode (or if this resource is not set),
initially it maintains those structures to support 8-bit characters.
\fI\*N\fP can later be switched,
using a menu entry or control sequence,
causing it to reallocate those structures to support 16-bit characters.
.IP
The default is \*(``false\*(''.
.TP 8
.B +wc
This option resets the \fBwideChars\fP resource.
.TP 8
.B \-wf
This option indicates that \fI\*n\fP should wait for the window to be mapped
the first time before starting the subprocess so that the initial terminal
size settings and environment variables are correct.
It is the application's
responsibility to catch subsequent terminal size changes.
.TP 8
.B +wf
This option indicates that \fI\*n\fP should not wait before starting the
subprocess.
.TP 8
.B \-ziconbeep \fIpercent\fP
Same as \fBzIconBeep\fP resource.
If percent is non-zero, xterms that produce output while iconified
will cause an XBell sound at the given volume
and have \*(``***\*('' prepended to their icon titles.
Most window managers will detect this change immediately, showing you
which window has the output.
(A similar feature was in x10 \fI\*n\fP.)
.TP 8
.B \-C
This option indicates that this window should receive console output.
This
is not supported on all systems.
To obtain console output, you must be the
owner of the console device, and you must have read and write permission
for it.
If you are running X under \fIxdm\fP on the console screen you may
need to have the session startup and reset programs explicitly change the
ownership of the console device in order to get this option to work.
.TP 8
.B \-S\fIccn\fP
This option allows \fI\*n\fP to be used as an input and
output channel for an existing program and is sometimes used in specialized
applications.
The option value specifies the last few letters of the name of a pseudo-terminal
to use in slave mode, plus the number of the inherited file descriptor.
If the option contains a \*(``/\*('' character, that delimits the characters
used for the pseudo-terminal name from the file descriptor.
Otherwise, exactly two characters are used from the option for
the pseudo-terminal name, the remainder is the file descriptor.
Examples
(the first two are equivalent
since the descriptor follows the last \*(``/\*(''):
.NS 15
-S/dev/pts/123/45
-S123/45
-Sab34
.NE
.IP
Note that \fI\*n\fP does not close any file descriptor
which it did not open for its own use.
It is possible (though probably not portable) to have an application
which passes an open file descriptor down to \fI\*n\fP past the
initialization or the \fB\-S\fP option to a process running in the \fI\*n\fP.
.SS Old Options
.PP
The following command line arguments are provided for compatibility with
older versions.
They may not be supported in the next release as the X
Toolkit provides standard options that accomplish the same task.
.TP 8
.B "%\fIgeom\fP"
This option specifies the preferred size and position of the Tektronix window.
It is shorthand for specifying the \*(``\fBtekGeometry\fP\*('' resource.
.TP 8
.B "#\fIgeom\fP"
This option specifies the preferred position of the icon window.
It is shorthand for specifying the \*(``\fBiconGeometry\fP\*('' resource.
.TP 8
.BI \-T " string"
This option specifies the title for \fI\*n\fP's windows.
It is equivalent to \fB\-title\fP.
.TP 8
.BI \-n " string"
This option specifies the icon name for \fI\*n\fP's windows.
It is shorthand for specifying the \*(``\fBiconName\fP\*('' resource.
Note that this is not the same as the toolkit option \fB\-name\fP.
The default icon name is the application name.
.IP
If no suitable icon is found, \fI\*n\fP provides a compiled-in pixmap.
.TP 8
.B \-r
This option indicates that reverse video should be simulated by swapping
the foreground and background colors.
It is equivalent to
\fB\-rv\fP.
.TP 8
.BI \-w " number"
This option specifies the width in pixels of the border surrounding the window.
It is equivalent to \fB\-borderwidth\fP or \fB\-bw\fP.
.
.SS X Toolkit Options
.PP
The following standard X Toolkit command line arguments are commonly used
with \fI\*n\fP:
.TP 8
.B \-bd \fIcolor\fP
This option specifies the color to use for the border of the window.
The corresponding resource name is \fIborderColor\fP.
\fI\*N\fP uses the X Toolkit default, which is \*(``XtDefaultForeground\*(''.
.TP 8
.B \-bg \fIcolor\fP
This option specifies the color to use for the background of the window.
The corresponding resource name is \fIbackground\fP.
The default is \*(``XtDefaultBackground\*(''.
.TP 8
.B \-bw \fInumber\fP
This option specifies the width in pixels of the border surrounding the window.
.IP
This appears to be a legacy of older X releases.
It sets the \fBborderWidth\fP resource of the shell widget,
and may provide advice to your window manager to set the thickness of the
window frame.
Most window managers do not use this information.
See the \fB\-b\fP option, which controls the inner border of the \fI\*n\fP
window.
.TP 8
.B \-display \fIdisplay\fP
This option specifies the X server to contact; see X(__miscmansuffix__).
.TP 8
.B \-fg \fIcolor\fP
This option specifies the color to use for displaying text.
The corresponding resource name is \fIforeground\fP.
The default is
\*(``XtDefaultForeground\*(''.
.TP 8
.B \-fn \fIfont\fP
This option specifies the font to be used for displaying normal text.
The corresponding resource name is \fIfont\fP.
The resource value default is \fIfixed\fP.
.TP 8
.B \-font \fIfont\fP
This is the same as \fB\-fn\fP.
.TP 8
.B \-geometry \fIgeometry\fP
This option specifies the preferred size and position of the VT\fIxxx\fP window;
see X(__miscmansuffix__).
.IP
The normal geometry specification can be suffixed with \fB@@\fP followed by a
Xinerama screen specification; it can be either \fBg\fP for the global
screen (default), \fBc\fP for the current screen or a screen number.
.TP 8
.B \-iconic
.br
This option indicates that \fI\*n\fP should ask the window manager to
start it as an icon rather than as the normal window.
The corresponding resource name is \fIiconic\fP.
.TP 8
.B \-name \fIname\fP
This option specifies the application name under which resources are to be
obtained, rather than the default executable file name.
\fIName\fP should not contain \*(``.\*('' or \*(``*\*('' characters.
.TP 8
.B \-rv
This option indicates that reverse video should be simulated by swapping
the foreground and background colors.
The corresponding resource name is \fBreverseVideo\fP.
.TP 8
.B +rv
Disable the simulation of reverse video by swapping foreground and background
colors.
.TP 8
.B \-title \fIstring\fP
This option specifies the window title string, which may be displayed by
window managers if the user so chooses.
The default title is the command
line specified after the \fB\-e\fP option, if any, otherwise the application
name.
.TP 8
.B \-xrm \fIresourcestring\fP
This option specifies a resource string to be used.
This is especially
useful for setting resources that do not have separate command line options.
.PP
X Toolkit accepts alternate names for a few of these options, e.g.,
.bP
\*(``\fB\-background\fP\*('' for \*(``\fB\-bg\fP\*(''
.bP
\*(``\fB\-font\fP\*('' for \*(``\fB\-fn\fP\*(''
.bP
\*(``\fB\-foreground\fP\*('' for \*(``\fB\-fg\fP\*(''
.PP
Abbreviated options also are supported, e.g.,
\*(``\fB\-v\fP\*('' for \*(``\fB\-verbose\fP.\*(''
.
.
.SH RESOURCES
\fI\*N\fP understands all of the core X Toolkit resource names and classes.
Application specific resources (e.g., \*(``\fB__default_class__.\fP\fINAME\fP\*('') follow:
.SS Application Resources
.TP 8
.B "backarrowKeyIsErase\fP (class\fB BackarrowKeyIsErase\fP)"
Tie the VT\fIxxx\fP \fBbackarrowKey\fP and \fBptyInitialErase\fP resources
together by setting the DECBKM state according to whether
the \fIinitial erase\fP character is a backspace (8) or delete (127) character.
A \*(``false\*('' value disables this feature.
The default is \*(``__backarrow_is_erase__\*(''.
.IP
Here are tables showing how the initial settings for
.RS
.bP
.B backarrowKeyIsErase\fP (BKIE),
.bP
.B backarrowKey\fP (BK), and
.bP
.B ptyInitialErase\fP (PIE), along with the
.bP
\fIstty\fP erase character (^H for backspace, ^? for delete)
.RE
.IP
will affect DECBKM.  First, \fI\*n\fP obtains the initial \fIerase\fP character:
.RS
.bP
\fI\*n\fP's internal value is ^H
.bP
\fI\*n\fP asks the operating system for the value which \fBstty\fP shows
.bP
the \fBttyModes\fP resource may override \fIerase\fP
.bP
if \fBptyInitialErase\fP is false, \fI\*n\fP will look in the terminal database
.RE
.IP
Summarizing that as a table:
.TS
l l l l
_ _ _ _
l c c c.
\fBPIE\fR	\fBstty\fR	\fBtermcap\fR	\fIerase\fP
false	^H	^H	^H
false	^H	^?	^?
false	^?	^H	^H
false	^?	^?	^?
true	^H	^H	^H
true	^H	^?	^H
true	^?	^H	^?
true	^?	^?	^?
.TE
.IP
Using that \fIerase\fP character, \fI\*n\fP allows further choices:
.RS
.bP
if \fBbackarrowKeyIsErase\fP is true, \fI\*n\fP uses the \fIerase\fP
character for the initial state of \fBDECBKM\fP
.bP
if \fBbackarrowKeyIsErase\fP is false, \fI\*n\fP sets \fBDECBKM\fP
to 2 (internal).  This ties together \fBbackarrowKey\fP
and the control sequence for \fBDECBKM\fP
.bP
applications can send a control sequence to set/reset \fBDECBKM\fP control set
.bP
the \*(``Backarrow Key (BS/DEL)\*('' menu entry toggles \fBDECBKM\fP
.RE
.IP
Summarizing the initialization details:
.TS
l l l l l
_ _ _ _ _
c l l c c.
\fIerase\fR	\fBBKIE\fR	\fBBK\fR	\fBDECBKM\fP	\fIresult\fP
^?	false	false	2	^H
^?	false	true	2	^?
^?	true	false	0	^?
^?	true	true	1	^?
^H	false	false	2	^H
^H	false	true	2	^?
^H	true	false	0	^H
^H	true	true	1	^H
.TE
.TP 8
.B "fullscreen\fP (class\fB Fullscreen\fP)"
Specifies whether or not \fI\*n\fP should ask the window manager to
use a fullscreen layout on startup.
\fI\*N\fP accepts either a keyword (ignoring case)
or the number shown in parentheses:
.RS
.TP 3
false (0)
Fullscreen layout is not used initially,
but may be later via menu-selection or control sequence.
.TP 3
true (1)
Fullscreen layout is used initially,
but may be disabled later via menu-selection or control sequence.
.TP 3
always (2)
Fullscreen layout is used initially,
and cannot be disabled later via menu-selection or control sequence.
.TP 3
never (3)
Fullscreen layout is not used,
and cannot be enabled later via menu-selection or control sequence.
.RE
.IP
The default is
\*(``false\*(''.
.TP 8
.B "hold\fP (class\fB Hold\fP)"
If true,
\fI\*n\fP will not immediately destroy its window when the shell command completes.
It will wait until you use the window manager to destroy/kill the window, or
if you use the menu entries that send a signal, e.g., HUP or KILL.
You may scroll back, select text, etc., to perform most graphical operations.
Resizing the display will lose data, however, since this involves interaction
with the shell which is no longer running.
.TP 8
.B "hpFunctionKeys\fP (class\fB HpFunctionKeys\fP)"
Specifies whether or not HP function key escape codes should be generated for
function keys.
The default is
\*(``false\*('', i.e., this feature is disabled.
.IP
The \fBkeyboardType\fP resource is the preferred mechanism for selecting this mode.
.TP 8
.B "iconGeometry\fP (class\fB IconGeometry\fP)"
Specifies the preferred size and position of the application when iconified.
It is not necessarily obeyed by all window managers.
.TP 8
.B "iconHint\fP (class\fB IconHint\fP)"
Specifies an icon which will be added to the window manager hints.
\fI\*N\fP provides no default value.
.IP
Set this resource to \*(``none\*('' to omit the hint entirely,
using whatever the window manager may decide.
.IP
If the \fBiconHint\fP resource is given (or is set via the \fB\-n\fP option)
\fI\*n\fP searches for a pixmap file with that name,
in the current directory as well as in __pixmapsdir__.
if the resource does not specify an absolute pathname.
In each case, \fI\*n\fP adds \*(``_48x48\*(''
and/or \*(``.xpm\*('' to the filename
after trying without those suffixes.
If it is able to load the file, \fI\*n\fP sets the window manager
hint for the icon-pixmap.
These pixmaps are distributed with \fI\*n\fP, and can optionally be
compiled-in:
.RS
.bP
mini.\*n_16x16,
mini.\*n_32x32,
mini.\*n_48x48
.bP
filled-\*n_16x16,
filled-\*n_32x32,
filled-\*n_48x48
.bP
\*n_16x16,
\*n_32x32,
\*n_48x48
.bP
\*n-color_16x16,
\*n-color_32x32,
\*n-color_48x48
.RE
.IP
In either case, \fI\*n\fP allows for adding a \*(``_48x48\*('' to specify the
largest of the pixmaps as a default.
That is, \*(``mini.\*n\*('' is the same as \*(``mini.\*n_48x48\*(''.
.IP
If no explicit \fBiconHint\fP resource is given
(or if none of the compiled-in names matches),
\*n uses \*(``mini.\*n\*('' (which is always compiled-in).
.IP
The \fBiconHint\fP resource has no effect on \*(``desktop\*('' files,
including \*(``panel\*('' and \*(``menu\*(''.
Those are typically set via a \*(``.desktop\*('' file;
\fI\*n\fP provides samples for itself (and the \fIu\*n\fP script).
The more capable desktop systems allow changing the icon on a per-user basis.
.TP 8
.B "iconName\fP (class\fB IconName\fP)"
Specifies a label for \fI\*n\fP when iconified.
\fI\*N\fP provides no default value;
some window managers may assume the application name, e.g., \*(``\*n\*(''.
.IP
Setting the \fBiconName\fP resource sets the icon label
unless overridden by \fBzIconBeep\fP
or the control sequences which change the window and icon labels.
.TP 8
.B "keyboardType\fP (class\fB KeyboardType\fP)"
Enables one (or none) of the various keyboard-type resources:
\fBhpFunctionKeys\fP,
\fBscoFunctionKeys\fP,
\fBsunFunctionKeys\fP,
\fBtcapFunctionKeys\fP,
\fBoldXtermFKeys\fP and
\fBsunKeyboard\fP.
.IP
The resource's value should be one of the corresponding strings
\*(``hp\*('',
\*(``sco\*('',
\*(``sun\*('',
\*(``tcap\*('',
\*(``legacy\*('' or
\*(``vt220\*('', respectively.
.IP
The individual resources are provided for legacy support;
this resource is simpler to use.
\fI\*N\fP will use only one keyboard-type,
but if multiple resources are set, it warns and uses the last one it checks.
.IP
The default is
\*(``unknown\*('', i.e., none of the associated resources are set
via this resource.
.TP 8
.B "maxBufSize\fP (class\fB MaxBufSize\fP)"
Specify the maximum size of the input buffer.
The default is \*(``32768\*(''.
You cannot set this to a value less than the \fBminBufSize\fR resource.
It will be increased as needed to make that value evenly divide this one.
.IP
On some systems you may want to increase one or both of the
\fBmaxBufSize\fP and
\fBminBufSize\fP resource values to achieve better performance
if the operating system prefers larger buffer sizes.
.TP 8
.B "maximized\fP (class\fB Maximized\fP)"
Specifies whether or not \fI\*n\fP should ask the window manager to
maximize its layout on startup.
The default is
\*(``false\*(''.
.TP 8
.B "menuHeight\fP (class\fB MenuHeight\fP)"
Specifies the height of the toolbar,
which may be increased by the X toolkit layout widget depending upon
the fontsize used.
The default is
\*(``25\*(''.
.TP 8
.B "messages\fP (class\fB Messages\fP)"
Specifies whether write access to the terminal is allowed initially.
See \fBmesg\fP(1).
The default is \*(``true\*(''.
.TP 8
.B "menuLocale\fP (class\fB MenuLocale\fP)"
Specify the locale used for character-set computations when loading
the popup menus.
Use this to improve initialization performance of the Athena popup menus,
which may load unnecessary (and very large) fonts, e.g.,
in a locale having UTF-8 encoding.
The default is \*(``C\*('' (POSIX).
.IP
To use the current locale
(only useful if you have localized the resource settings for the menu entries),
set the resource to an empty string.
.TP 8
.B "minBufSize\fP (class\fB MinBufSize\fP)"
Specify the minimum size of the input buffer, i.e., the amount of data
that \fI\*n\fR requests on each read.
The default is \*(``4096\*(''.
You cannot set this to a value less than 64.
.TP 8
.B "omitTranslation\fP (class\fB OmitTranslation\fP)"
Selectively omit one or more parts of \fI\*n\fP's default translations
at startup.
The resource value is a comma-separated list of keywords,
which may be abbreviated:
\*(``fullscreen\*('',
\*(``scroll-lock\*('',
\*(``shift-fonts\*('' or
\*(``wheel-mouse\*(''.
\fI\*N\fP also recognizes \*(``default\*('',
but omitting that will make the program unusable
unless you provide a similar definition in your resource settings.
.TP 8
.B ptyHandshake\fP (class\fB PtyHandshake\fP)
If \*(``true\*('', \fI\*n\fP will perform handshaking during initialization
to ensure that the parent and child processes update the \fIutmp\fP
and \fIstty\fP state.
.IP
See also \fBwaitForMap\fP which waits for the pseudo-terminal's notion
of the screen size,
and \fBptySttySize\fP which resets the screen size after other terminal
initialization is complete.
The default is \*(``true\*(''.
.TP 8
.B ptyInitialErase\fP (class\fB PtyInitialErase\fP)
If \*(``true\*('', \fI\*n\fP will use the pseudo-terminal's sense of the \fIstty\fP erase
value.
If \*(``false\*('', \fI\*n\fP will set the \fIstty\fP erase value to match its own
configuration, using the \fBkb\fP string from the termcap entry as
a reference, if available.
.IP
In either case, the result is applied to the TERMCAP variable
which \fI\*n\fP sets, if the system uses TERMCAP.
.IP
See also the \fBttyModes\fP resource, which may override this.
The default is \*(``__initial_erase__\*(''.
.TP 8
.B ptySttySize\fP (class\fB PtySttySize\fP)
If \*(``true\*('', \fI\*n\fP will reset the screen size after
terminal initialization is complete.
This is needed for some systems whose pseudo-terminals cannot
propagate terminal characteristics.
Where it is not needed, it can interfere with other methods for
setting the intial screen size, e.g., via window manager interaction.
.IP
See also \fBwaitForMap\fP which waits for a handshake-message
giving the pseudo-terminal's notion of the screen size.
The default is \*(``false\*('' on Linux and OS X systems,
\*(``true\*('' otherwise.
.TP 8
.B "reportColors\fP (class\fB ReportColors\fP)"
If true, \fI\*n\fP will print to the standard output a summary of
colors as it allocates them.
The default is \*(``false\*(''.
.TP 8
.B "reportFonts\fP (class\fB ReportFonts\fP)"
If true, \fI\*n\fP will print to the standard output a summary of
each font's metrics (size, number of glyphs, etc.), as it loads them.
The default is \*(``false\*(''.
.TP 8
.B "sameName\fP (class\fB SameName\fP)"
If the value of this resource is \*(``true\*('', \fI\*n\fP does not send
title and icon name change requests when the request
would have no effect: the name is not changed.
This has the advantage
of preventing flicker and the disadvantage of requiring an extra
round trip to the server to find out the previous value.
In practice
this should never be a problem.
The default is \*(``true\*(''.
.TP 8
.B "scaleHeight\fP (class\fB ScaleHeight\fP)"
Scale line-height values by the resource value,
which is limited to \*(``0.9\*('' to \*(``1.5\*(''.
The default value is \*(``1.0\*('',
.IP
While this resource applies to either bitmap or TrueType fonts,
its main purpose is to
help work around incompatible changes in the Xft library's font metrics.
\fI\*N\fP checks the font metrics to find what the library claims are
the bounding boxes for each glyph (character).
However, some of Xft's features (such as the autohinter) can cause the
glyphs to be scaled larger than the bounding boxes, and be partly overwritten
by the next row.
.IP
See \fBuseClipping\fP for a related resource.
.TP 8
.B "scoFunctionKeys\fP (class\fB ScoFunctionKeys\fP)"
Specifies whether or not SCO function key escape codes should be generated for
function keys.
The default is
\*(``false\*('', i.e., this feature is disabled.
.IP
The \fBkeyboardType\fP resource is the preferred mechanism for selecting this mode.
.TP 8
.B "sessionMgt\fP (class\fB SessionMgt\fP)"
If the value of this resource is \*(``true\*('',
\fI\*n\fP sets up session manager callbacks
for \fBXtNdieCallback\fR and \fBXtNsaveCallback\fR.
The default is \*(``true\*(''.
.TP 8
.B "sunFunctionKeys\fP (class\fB SunFunctionKeys\fP)"
Specifies whether or not Sun function key escape codes should be generated for
function keys.
The default is
\*(``false\*('', i.e., this feature is disabled.
.IP
The \fBkeyboardType\fP resource is the preferred mechanism for selecting this mode.
.TP 8
.B "sunKeyboard\fP (class\fB SunKeyboard\fP)"
\fI\*N\fP translates certain key symbols based on its assumptions about
your keyboard.
This resource
specifies whether or not Sun/PC keyboard layout (i.e., the PC keyboard's
numeric keypad together with 12 function keys) should be assumed rather
than DEC VT220.
This causes the keypad \*(``+\*('' to be mapped to \*(``,\*(''.
and
CTRL F1-F10 to F11-F20, depending on the setting of the \fBctrlFKeys\fP
resource, so \fI\*n\fP emulates a DEC VT220 more accurately.
Otherwise (the default, with \fBsunKeyboard\fP set to \*(``false\*(''),
\fI\*n\fP uses PC-style bindings for the function keys and keypad.
.IP
PC-style bindings
use the Shift, Alt, Control and Meta keys as modifiers for function-keys
and keypad
(see \fIXterm Control Sequences\fP for details).
The PC-style bindings are analogous to PCTerm, but not the same thing.
Normally these bindings do not conflict with the use of the Meta key
as described for the \fBeightBitInput\fP resource.
If they do, note that the PC-style bindings are evaluated first.
.IP
See also the \fBkeyboardType\fP resource.
.TP 8
.B "tcapFunctionKeys\fP (class\fB TcapFunctionKeys\fP)"
Specifies whether or not function key escape codes read from the
termcap/terminfo entry corresponding to the \fBTERM\fP environment variable
should be generated for
function keys instead of those configured
using \fBsunKeyboard\fP and \fBkeyboardType\fP.
The default is
\*(``false\*('', i.e., this feature is disabled.
.IP
The \fBkeyboardType\fP resource is the preferred mechanism for selecting this mode.
.TP 8
.B "termName\fP (class\fB TermName\fP)"
Specifies the terminal type name to be set in the TERM environment variable.
.TP 8
.B "title\fP (class\fB Title\fP)"
Specifies a string that may be used by the window manager when displaying
this application.
.TP 8
.B "toolBar\fP (class\fB ToolBar\fP)"
Specifies whether or not the toolbar should be displayed.
The default is
\*(``true\*(''.
.TP 8
.B "ttyModes\fP (class\fB TtyModes\fP)"
Specifies a string containing terminal setting keywords and the characters
to which they may be bound.
Allowable keywords include:
brk,
dsusp,
eof,
eol,
eol2,
erase,
erase2,
flush,
intr,
kill,
lnext,
quit,
rprnt,
start,
status,
stop,
susp,
swtch and
weras.
Control characters may be specified as ^char (e.g., ^c or ^u)
and \fB^?\fP may be used to indicate delete (127).
Use \fB^\-\fP to denote \fIundef\fP.
Use \fB\\034\fP to represent \fB^\\\fP, since a literal backslash in
an X resource escapes the next character.
.IP
This is very useful for overriding
the default terminal settings without having to do an \fIstty\fP every time
an \fI\*n\fP is started.
Note, however, that the \fIstty\fP program on a given host may use different
keywords; \fI\*n\fR's table is built-in.
.IP
If the \fBttyModes\fP resource specifies a value for \fBerase\fP,
that overrides the \fBptyInitialErase\fP resource setting,
i.e., \fI\*n\fP initializes the terminal to match that value.
.TP 8
.B "useInsertMode\fP (class\fB UseInsertMode\fP)"
Force use of insert mode by adding appropriate entries to the TERMCAP
environment variable.
This is useful if the system termcap is broken.
(This resource is ignored on most systems, because TERMCAP is not used).
The default is \*(``false\*(''.
.TP 8
.B "utmpDisplayId\fP (class\fB UtmpDisplayId\fP)"
Specifies whether or not \fI\*n\fP should try to record the display
identifier (display number and screen number) as well as the hostname in
the system \fIutmp\fP log file.
The default is \*(``true\*(''.
.TP 8
.B "utmpInhibit\fP (class\fB UtmpInhibit\fP)"
Specifies whether or not \fI\*n\fP should try to record the user's terminal
in
the system \fIutmp\fP log file.
If true, \fI\*n\fP will not try.
The default is \*(``false\*(''.
.TP 8
.B "waitForMap\fP (class\fB WaitForMap\fP)"
Specifies whether or not \fI\*n\fP should wait for the initial window map
before starting the subprocess.
This is part of the \fBptyHandshake\fP logic.
When \fI\*n\fP is directed to wait in this fashion,
it passes the terminal size from the display end of the pseudo-terminal
to the terminal I/O connection, e.g.,
using the size according to the window manager.
Otherwise, it uses the size as given in resource values or command-line
option \fB\-geometry\fP.
The default is \*(``false\*(''.
.TP 8
.B "zIconBeep\fP (class\fB ZIconBeep\fP)"
Same as \-ziconbeep command line argument.
If the value of this resource is non-zero, xterms that produce output
while iconified will cause an XBell sound at the given volume
and have \*(``***\ \*('' prepended to their icon titles.
Most window managers will detect this change immediately, showing you
which window has the output.
(A similar feature was in x10 \fI\*n\fR.)
The default is \*(``false\*(''.
.TP 8
.B "zIconTitleFormat\fP (class\fB ZIconTitleFormat\fP)"
Allow customization of the string used in the \fBzIconBeep\fP feature.
The default value is \*(``***\ %s\*(''.
.IP
If the resource value contains a \*(``%s\*('',
then \fI\*n\fP inserts the icon title at that point rather
than prepending the string to the icon title.
(Only the first \*(``%s\*('' is used).
.\"
.SS VT100 Widget Resources
.PP
The following resources are specified as part
of the \fIvt100\fP widget (class \fIVT100\fP).
They are specified by patterns such as \*(``\fB__default_class__.vt100.\fP\fINAME\fP\*(''.
.PP
If your \fI\*n\fP is configured to support the \*(``toolbar\*('', then those
patterns need an extra level for the form-widget which holds the
toolbar and vt100 widget.
A wildcard between the top-level
\*(``__default_class__\*('' and the \*(``vt100\*('' widget makes the resource settings work for
either, e.g., \*(``\fB__default_class__*vt100.\fP\fINAME\fP\*(''.
.TP 8
.B "activeIcon\fP (class\fB ActiveIcon\fP)"
Specifies whether or not active icon windows are to be used when the
\fI\*n\fP window is iconified, if this feature is compiled into \fI\*n\fR.
The active icon is a miniature representation of the content of the
window and will update as the content changes.
Not all window managers necessarily support application icon windows.
Some window managers
will allow you to enter keystrokes into the active icon window.
The default is \*(``default\*(''.
.IP
\fI\*N\fP accepts either a keyword (ignoring case)
or the number shown in parentheses:
.RS
.TP
false (0)
No active icon is shown.
.TP
true (1)
The active icon is shown.
If you are using \fItwm\fP, use this setting to enable active-icons.
.TP
default (2)
\fI\*N\fP checks at startup, and shows an active icon only for window
managers which it can identify and which are known to support the feature.
These are \fIfvwm\fP (full support), and \fIwindow maker\fP (limited).
A few other windows managers (such as \fItwm\fP and \fIctwm\fP)
support active icons,
but do not support the extensions which allow \fI\*n\fP
to identify the window manager.
.RE
.TP 8
.B "allowBoldFonts\fP (class\fB AllowBoldFonts\fP)"
When set to \*(``false\*('', \fI\*n\fP will not use bold fonts.
This overrides both the \fBalwaysBoldMode\fP and the \fBboldMode\fP resources.
.TP 8
.B "allowC1Printable\fP (class\fB AllowC1Printable\fP)"
If true, overrides the mapping of C1 controls
(codes 128-159) to make them be treated
as if they were printable characters.
Although this corresponds to no particular standard,
some users insist it is a VT100.
The default is \*(``false\*(''.
.TP
.B "allowColorOps\fP (class\fB AllowColorOps\fP)"
Specifies whether control sequences that set/query the dynamic colors should be allowed.
ANSI colors are unaffected by this resource setting.
The default is \*(``true\*(''.
.TP
.B "allowFontOps\fP (class\fB AllowFontOps\fP)"
Specifies whether control sequences that set/query the font should be allowed.
The default is \*(``true\*(''.
.TP
.B "allowMouseOps\fP (class\fB AllowMouseOps\fP)"
Specifies whether control sequences that enable \fI\*n\fP to send
escape sequences to the host on mouse-clicks and movement.
The default is \*(``true\*(''.
.TP 8
.B "allowPasteControls\fP (class\fB AllowPasteControls\fP)"
If true, allow control characters such as BEL and CAN to be pasted.
Formatting characters (tab, newline) are always allowed.
Other C0 control characters are suppressed unless this resource is enabled.
The exact set of control characters (C0 and C1)
depends upon whether UTF-8 encoding is used,
as well as the \fBallowC1Printable\fP resource.
The default is \*(``false\*(''.
.TP 8
.B "allowScrollLock\fP (class\fB AllowScrollLock\fP)"
Specifies whether control sequences that set/query
the Scroll Lock key should be allowed,
as well as whether the Scroll Lock key responds to user's keypress.
The default is \*(``false\*(''.
.IP
When this feature is enabled, \fI\*n\fP will sense the state of the
Scroll Lock key each time it acquires focus.
Pressing the Scroll Lock key toggles \fI\*n\fP's internal state,
as well as toggling the associated LED.
While the Scroll Lock is active, \fI\*n\fP attempts to keep a viewport on the
same set of lines.
If the current viewport is scrolled past the limit set by the
\fBsaveLines\fP resource, then Scroll Lock has no further effect.
.IP
The reason for setting the default to \*(``false\*('' is to avoid
user surprise.
This key is generally unused in keyboard configurations,
and has not acquired a standard meaning even when it is used in that manner.
Consequently, users have assigned it for ad hoc purposes.
.TP 8
.B "allowSendEvents\fP (class\fB AllowSendEvents\fP)"
Specifies whether or not synthetic key and button events (generated using
the X protocol SendEvent request) should be interpreted or discarded.
The default is \*(``false\*('' meaning they are discarded.
Note that allowing such events would create a very large security hole, therefore
enabling this resource forcefully disables the \fBallow\fP\fIXXX\fP\fBOps\fR resources.
The default is \*(``false\*(''.
.TP
.B "allowTcapOps\fP (class\fB AllowTcapOps\fP)"
Specifies whether control sequences that query the terminal's
notion of its function-key strings, as termcap or terminfo capabilities
should be allowed.
The default is \*(``true\*(''.
.IP
A few programs, e.g., \fIvim\fP, use this feature to get an accurate
description of the terminal's capabilities,
independent of the termcap/terminfo setting:
.RS
.bP
\fI\*N\fP can tell the querying program how many colors it supports.
This is a constant, depending on how it is compiled, typically 16.
It does not change if you alter resource settings,
e.g., the \fBboldColors\fP resource.
.bP
\fI\*N\fP can tell the querying program what strings are sent by modified
(shift-, control-, alt-) function- and keypad-keys.
Reporting control- and alt-modifiers is a feature that relies on the
\fIncurses\fP extended naming.
.RE
.TP
.B "allowTitleOps\fP (class\fB AllowTitleOps\fP)"
Specifies whether control sequences that modify the window title or icon name
should be allowed.
The default is \*(``true\*(''.
.TP
.B "allowWindowOps\fP (class\fB AllowWindowOps\fP)"
Specifies whether extended window control sequences
(as used in \fIdtterm\fP)
should be allowed.
These include several control sequences which manipulate the window size or
position, as well as reporting these values and the title or icon name.
Each of these can be abused in a script;
curiously enough most terminal emulators that implement these
restrict only a small part of the repertoire.
For fine-tuning, see \fBdisallowedWindowOps\fP.
The default is \*(``false\*(''.
.TP 8
.B "altIsNotMeta\fP (class\fB AltIsNotMeta\fP)"
If \*(``true\*('', treat the Alt-key as if it were the Meta-key.
Your keyboard may happen to be configured so they are the same.
But if they are not, this allows you to use the same prefix- and shifting
operations with the Alt-key as with the Meta-key.
See \fBaltSendsEscape\fP and \fBmetaSendsEscape\fP.
The default is \*(``false\*(''.
.TP 8
.B "altSendsEscape\fP (class\fB AltSendsEscape\fP)"
This is an additional keyboard operation that may be processed
after the logic for \fBmetaSendsEscape\fP.
It is only available if the \fBaltIsNotMeta\fP resource is set.
.RS
.bP
If \*(``true\*('', Alt characters
(a character combined with the modifier associated with left/right Alt-keys)
are converted into a two-character
sequence with the character itself preceded by ESC.
This applies as well to function key control sequences, unless \fI\*n\fP
sees that \fBAlt\fP is used in your key translations.
.bP
If \*(``false\*('', Alt characters input from the keyboard cause a shift to
8-bit characters (just like \fBmetaSendsEscape\fP).
By combining the Alt- and Meta-modifiers, you can create corresponding
combinations of ESC-prefix and 8-bit characters.
.RE
.IP
The default is \*(``__alt_sends_esc__\*(''.
\fI\*N\fP provides a menu option for toggling this resource.
.TP 8
.B "alternateScroll\fP (class\fB ScrollCond\fP)"
If \*(``true\*('',
the \fBscroll-back\fP and \fBscroll-forw\fP actions
send cursor\-up and \-down keys when \*n is displaying the alternate screen.
The default is \*(``false\*(''.
.IP
The \fBalternateScroll\fP state can also be set using a control sequence.
.TP 8
.B "alwaysBoldMode\fP (class\fB AlwaysBoldMode\fP)"
Specifies whether \fI\*n\fP should check if the normal and bold
fonts are distinct before deciding whether to use overstriking to
simulate bold fonts.
If this resource is true,
\fI\*n\fP does not make the check for
distinct fonts when deciding how to handle the \fBboldMode\fP resource.
The default is \*(``false\*(''.
.ne 9
.TS
l l l l
_ _ _ _
l l l l.
\fIboldMode\fR	\fIalwaysBoldMode\fR	\fIComparison\fR	\fIAction\fP
false	false	ignored	use font
false	true	ignored	use font
true	false	same	overstrike
true	false	different	use font
true	true	ignored	overstrike
.TE
.RS
.LP
This resource is used only for bitmap fonts:
.bP
When using bitmap fonts, it is possible that the font server will
approximate the bold font by rescaling it from
a different font size than expected.
The \fBalwaysBoldMode\fP resource
allows the user to override the (sometimes poor)
resulting bold font with overstriking (which is at least consistent).
.bP
The problem does not occur with TrueType fonts (though there can be
other unnecessary issues such as different coverage of the normal
and bold fonts).
.RE
.IP
As an alternative, setting the \fBallowBoldFonts\fP resource to false
overrides both the \fBalwaysBoldMode\fP and the \fBboldMode\fP resources.
.TP 8
.B "alwaysHighlight\fP (class\fB AlwaysHighlight\fP)"
Specifies whether or not \fI\*n\fP should always display a highlighted
text cursor.
By default (if this resource is false),
a hollow text cursor is displayed whenever the
pointer moves out of the window or the window loses the input focus.
The default is \*(``false\*(''.
.TP 8
.B "alwaysUseMods\fP (class\fB AlwaysUseMods\fP)"
Override the \fBnumLock\fP resource, telling \fI\*n\fR to use the Alt and Meta
modifiers to construct parameters for function key sequences even if
those modifiers appear in the translations resource.
Normally \fI\*n\fP checks if Alt or Meta is used in a translation that
would conflict with function key modifiers, and will ignore these modifiers
in that special case.
The default is \*(``false\*(''.
.TP 8
.B "answerbackString\fP (class\fB AnswerbackString\fP)"
Specifies the string that \fI\*n\fR sends in response to an ENQ (control/E)
character from the host.
The default is a blank string, i.e., \*(``\*(''.
A hardware VT100 implements this feature as a setup option.
.TP 8
.B "appcursorDefault\fP (class\fB AppcursorDefault\fP)"
If \*(``true\*('', the cursor keys are initially in application mode.
This is the same as the VT102 private DECCKM mode,
The default is \*(``false\*(''.
.TP 8
.B "appkeypadDefault\fP (class\fB AppkeypadDefault\fP)"
If \*(``true\*('', the keypad keys are initially in application mode.
The default is \*(``false\*(''.
.TP 8
.B "assumeAllChars\fP (class\fB AssumeAllChars\fP)"
If \*(``true\*('', this enables a special case in bitmap fonts to
allow the font server to choose how to display missing glyphs.
The default is \*(``true\*(''.
.IP
The reason for this resource is to help with
certain quasi-automatically generated fonts
(such as the ISO-10646-1 encoding of Terminus)
which have incorrect font-metrics.
.TP 8
.B "autoWrap\fP (class\fB AutoWrap\fP)"
Specifies whether or not auto-wraparound should be enabled.
This is the same as the VT102 DECAWM.
The
default is \*(``true\*(''.
.TP 8
.B "awaitInput\fP (class\fB AwaitInput\fP)"
Specifies whether or not \fI\*n\fR uses a 50 millisecond timeout to
await input (i.e., to support the Xaw3d arrow scrollbar).
The default is \*(``false\*(''.
.TP 8
.B "backarrowKey\fP (class\fB BackarrowKey\fP)"
Specifies whether the backarrow key transmits
a backspace (8)
or delete (127) character.
This corresponds to the DECBKM control sequence.
A \*(``true\*('' value specifies backspace.
The default is \*(``__backarrow_is_bs__\*(''.
Pressing the control key toggles this behavior.
.TP 8
.B "background\fP (class\fB Background\fP)"
Specifies the color to use for the background of the window.
The default is
\*(``XtDefaultBackground\*(''.
.TP 8
.B "bellIsUrgent\fP (class\fB BellIsUrgent\fP)"
Specifies whether to set the Urgency hint for the window manager
when making a bell sound.
The default is \*(``false\*(''.
.TP 8
.B "bellOnReset\fP (class\fB BellOnReset\fP)"
Specifies whether to sound a bell when doing a hard reset.
The default is \*(``true\*(''.
.TP 8
.B "bellSuppressTime\fP (class\fB BellSuppressTime\fP)"
Number of milliseconds after a bell command is sent during which additional
bells will be suppressed.
Default is 200.
If set non-zero,
additional bells
will also be suppressed until the server reports that processing of
the first bell has been completed; this feature is most useful with
the visible bell.
.TP 8
.B "boldColors\fP (class\fB ColorMode\fP)"
Specifies whether to combine bold attribute with colors like the IBM PC,
i.e., map colors 0 through 7 to colors 8 through 15.
These normally are the brighter versions of the first 8 colors, hence bold.
The default is \*(``true\*(''.
.TP 8
.B "boldFont\fP (class\fB BoldFont\fP)"
Specifies the name of the bold font to use instead of overstriking.
There is no default for this resource.
.IP
This font must be the same height and width as the normal font, otherwise it is ignored.
If only one of the normal or bold fonts is specified, it will be used as the
normal font and the bold font will be produced by overstriking this font.
.IP
See also the discussion of \fBboldMode\fP and \fBalwaysBoldMode\fP resources.
.TP 8
.B "boldMode\fP (class\fB BoldMode\fP)"
This specifies whether or not text with the bold attribute should be
overstruck to simulate bold fonts if the resolved bold font is the
same as the normal font.
It may be desirable to disable bold fonts when color is being
used for the bold attribute.
.IP
Note that \fI\*n\fP has one bold font which you may set explicitly.
\fI\*N\fP attempts to derive a bold font for the other font selections
(\fBfont1\fP through \fBfont6\fP).
If it cannot find a bold font, it will use the normal font.
In each case (whether the explicit resource or the derived font),
if the normal and bold fonts are distinct, this resource has no effect.
The default is \*(``true\*(''.
.IP
See the \fBalwaysBoldMode\fP resource which can modify the behavior
of this resource.
.IP
Although \fI\*n\fP attempts to derive a bold font for other font selections,
the font server may not cooperate.
Since X11R6, bitmap fonts have been scaled.
The font server claims to provide the bold font that \fI\*n\fP requests,
but the result is not always readable.
XFree86 introduced a feature which can be used to suppress the scaling.
In the X server's configuration file (e.g., \*(``/etc/X11/XFree86\*(''
or \*(``/etc/X11/xorg.conf\*(''), you
can add \*(``:unscaled\*('' to the end of the directory specification for the
\*(``misc\*('' fonts,
which comprise the fixed-pitch fonts that are used by \fI\*n\fP.
For example
.NS
FontPath	"/usr/lib/X11/fonts/misc/"
.NE
.IP
would become
.NS
FontPath	"/usr/lib/X11/fonts/misc/:unscaled"
.NE
.IP
Depending on your configuration, the font server may have its own configuration
file.
The same \*(``:unscaled\*('' can be added to its configuration file at the
end of the directory specification for \*(``misc\*(''.
.IP
The bitmap scaling feature is also used by \fI\*n\fP to implement
VT102 double-width and double-height characters.
.TP 8
.B "brokenLinuxOSC\fP (class\fB BrokenLinuxOSC\fP)"
If true, \fI\*n\fP applies a workaround to ignore malformed control
sequences that a Linux script might send.
Compare the palette control sequences documented in \fIconsole_codes\fR
with ECMA-48.
The default is \*(``true\*(''.
.TP 8
.B "brokenSelections\fP (class\fB BrokenSelections\fP)"
If true, \fI\*n\fP in 8-bit mode will interpret \fBSTRING\fP
selections as carrying text in the current locale's encoding.
Normally \fBSTRING\fP selections carry ISO-8859-1 encoded text.
Setting this resource to
\*(``true\*('' violates the ICCCM; it may, however, be useful for interacting
with some broken X clients.
The default is \*(``false\*(''.
.TP 8
.B "brokenStringTerm\fP (class\fB BrokenStringTerm\fP)"
provides a work-around for some ISDN routers which start an application
control string without completing it.
Set this to \*(``true\*('' if \fI\*n\fP appears to freeze when connecting.
The default is \*(``false\*(''.
.IP
\fI\*N\fP's state parser recognizes
several types of control strings which can contain text, e.g.,
.sp
.RS
\fBAPC\fP (Application Program Command),
.br
\fBDCS\fP (Device Control String),
.br
\fBOSC\fP (Operating System Command),
.br
\fBPM\fP (Privacy Message), and
.br
\fBSOS\fP (Start of String),
.RE
.IP
Each should end with a string-terminator (a special character which
cannot appear in these strings).
Ordinary control characters found within the string are not ignored;
they are processed without interfering with the process of accumulating
the control string's content.
\fI\*N\fP recognizes these controls in all modes,
although some of the functions may be suppressed after parsing the control.
.IP
When enabled, this feature allows the user to exit from an unterminated
control string when any of these ordinary control characters are found:
.sp
.RS
control/D (used as an end of file in many shells),
.br
control/H (backspace),
.br
control/I (tab-feed),
.br
control/J (line feed aka newline),
.br
control/K (vertical tab),
.br
control/L (form feed),
.br
control/M (carriage return),
.br
control/N (shift-out),
.br
control/O (shift-in),
.br
control/Q (XOFF),
.br
control/X (cancel)
.RE
.TP 8
.B "c132\fP (class\fB C132\fP)"
Specifies whether or not the VT102 DECCOLM escape sequence,
used to switch between 80 and 132 columns, should be honored.
The default is \*(``false\*(''.
.TP 8
.B "cacheDoublesize\fP (class\fB CacheDoublesize\fP)"
Tells whether to cache double-sized fonts by \fI\*n\fR.
Set this to zero to disable double-sized fonts altogether.
.TP 8
.B "cdXtraScroll\fP (class\fB CdXtraScroll\fP)"
Specifies whether \fI\*n\fP should scroll to a new page when clearing
the whole screen.
Like \fBtiXtraScroll\fP,
the intent of this option is to provide a picture of the full-screen
application's display on the scrollback before wiping out the text.
The default for this resource is \*(``false\*(''.
.TP 8
.B "charClass\fP (class\fB CharClass\fP)"
Specifies comma-separated lists of character class bindings of the form
.NS
\fIlow\fP[-\fIhigh]\fP[:\fIvalue\fP].
.NE
.IP
These are used in determining which
sets of characters should be treated the same when doing cut and paste.
See the \fBCHARACTER CLASSES\fP section.
.TP 8
.B "cjkWidth\fP (class\fB CjkWidth\fP)"
Specifies whether \fI\*n\fP should follow
the traditional East Asian width convention.
When turned on, characters with East Asian Ambiguous (A) category in UTR
11 have a column width of 2.
You may have to set this option to \*(``true\*(''
if you have some old East Asian terminal based programs that assume that
line-drawing characters have a column width of 2.
If this resource is false, the \fBmkWidth\fP resource controls the
choice between the system's \fBwcwidth\fP and \fI\*n\fP's built-in tables.
The default is \*(``false\*(''.
.TP 8
.B "color0\fP (class\fB Color0\fP)"
.TP 8
.B "color1\fP (class\fB Color1\fP)"
.TP 8
.B "color2\fP (class\fB Color2\fP)"
.TP 8
.B "color3\fP (class\fB Color3\fP)"
.TP 8
.B "color4\fP (class\fB Color4\fP)"
.TP 8
.B "color5\fP (class\fB Color5\fP)"
.TP 8
.B "color6\fP (class\fB Color6\fP)"
.TP 8
.B "color7\fP (class\fB Color7\fP)"
These specify the colors for the ISO-6429 extension.
The defaults are,
respectively,
black,
red3,
green3,
yellow3,
a customizable dark blue,
magenta3,
cyan3,
and
gray90.
The default shades of color are chosen to allow the colors 8-15
to be used as brighter versions.
.TP 8
.B "color8\fP (class\fB Color8\fP)"
.TP 8
.B "color9\fP (class\fB Color9\fP)"
.TP 8
.B "color10\fP (class\fB Color10\fP)"
.TP 8
.B "color11\fP (class\fB Color11\fP)"
.TP 8
.B "color12\fP (class\fB Color12\fP)"
.TP 8
.B "color13\fP (class\fB Color13\fP)"
.TP 8
.B "color14\fP (class\fB Color14\fP)"
.TP 8
.B "color15\fP (class\fB Color15\fP)"
These specify the colors for the ISO-6429 extension if the bold attribute
is also enabled.
The default resource values are respectively,
gray30,
red,
green,
yellow,
a customizable light blue,
magenta,
cyan,
and
white.
.TP 8
.B "color16\fP (class\fB Color16\fP)"
.TP 8
through
.TP 8
.B "color255\fP (class\fB Color255\fP)"
These specify the colors for the 256-color extension.
The default resource values
are for colors 16 through 231 to make a 6x6x6 color cube, and colors
232 through 255 to make a grayscale ramp.
.IP
Resources past \fBcolor15\fP are available as a compile-time option.
Due to a hardcoded limit in the X libraries on the total number of
resources (to 400), the resources for 256-colors
are omitted when wide-character support and \fIluit\fP are enabled.
Besides inconsistent behavior if only part of the resources were allowed,
determining the exact cutoff is difficult, and the X libraries tend
to crash if the number of resources exceeds the limit.
The color palette is still initialized to the same default values,
and can be modified via control sequences.
.IP
On the other hand, the resource limit does permit including the entire
range for 88-colors.
.TP 8
.B "colorAttrMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether \fBcolorBD\fP, \fBcolorBL\fP, \fBcolorRV\fP, and
\fBcolorUL\fP should override ANSI colors.
If not, these are displayed only when no ANSI colors
have been set for the corresponding position.
The default is \*(``false\*(''.
.TP 8
.B "colorBD\fP (class\fB ColorBD\fP)"
This specifies the color to use to display bold characters if
the \*(``colorBDMode\*('' resource is enabled.
The default is \*(``XtDefaultForeground\*(''.
.IP
See also the \fBveryBoldColors\fP resource which allows combining bold and color.
.TP 8
.B "colorBDMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether characters with the bold attribute should be displayed in
color or as bold characters.
Note that setting \fBcolorMode\fR off disables
all colors, including bold.
The default is \*(``false\*(''.
.TP 8
.B "colorBL\fP (class\fB ColorBL\fP)"
This specifies the color to use to display blink characters if
the \*(``colorBLMode\*('' resource is enabled.
The default is \*(``XtDefaultForeground\*(''.
.IP
See also the \fBveryBoldColors\fP resource which allows combining underline and color.
.TP 8
.B "colorBLMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether characters with the blink attribute should be displayed in
color.
Note that setting \fBcolorMode\fR off disables all colors, including this.
The default is \*(``false\*(''.
.TP 8
.B "colorIT\fP (class\fB ColorIT\fP)"
This specifies the color to use to display italic characters if
the \*(``colorITMode\*('' resource is enabled.
The default is \*(``XtDefaultForeground\*(''.
.IP
See also the \fBveryBoldColors\fP resource which allows combining attributes and color.
.TP 8
.B "colorITMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether characters with the italic attribute should be displayed in
color or as italic characters.
The default is \*(``false\*(''.
.IP
Note that:
.RS
.bP
Setting \fBcolorMode\fR off disables all colors, including italic.
.bP
The \fBitalicULMode\fP resource overrides \fBcolorITMode\fP.
.RE
.TP 8
.B "colorMode\fP (class\fB ColorMode\fP)"
Specifies whether or not recognition of ANSI (ISO-6429)
color change escape sequences should be enabled.
The default is \*(``true\*(''.
.TP 8
.B "colorRV\fP (class\fB ColorRV\fP)"
This specifies the color to use to display reverse characters if
the \*(``colorRVMode\*('' resource is enabled.
The default is \*(``XtDefaultForeground\*(''.
.IP
See also the \fBveryBoldColors\fP resource which allows combining reverse and color.
.TP 8
.B "colorRVMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether characters with the reverse attribute should be displayed in
color.
Note that setting \fBcolorMode\fR off disables all colors, including this.
The default is \*(``false\*(''.
.TP 8
.B "colorUL\fP (class\fB ColorUL\fP)"
This specifies the color to use to display underlined characters if
the \*(``colorULMode\*('' resource is enabled.
The default is \*(``XtDefaultForeground\*(''.
.IP
See also the \fBveryBoldColors\fP resource which allows combining underline and color.
.TP 8
.B "colorULMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether characters with the underline attribute should be displayed
in color or as underlined characters.
Note that setting \fBcolorMode\fR off
disables all colors, including underlining.
The default is \*(``false\*(''.
.TP 8
.B "combiningChars\fP (class\fB CombiningChars\fP)"
Specifies the number of wide-characters which can be stored in a cell
to overstrike (combine) with the base character of the cell.
This can be set to values in the range 0 to 5.
The default is \*(``2\*(''.
.TP 8
.B "ctrlFKeys\fP (class\fB CtrlFKeys\fP)"
In VT220 keyboard mode (see \fBsunKeyboard\fP resource),
specifies the amount by which to shift F1-F12 given a control modifier (CTRL).
This allows you to generate key symbols for F10-F20 on a Sun/PC keyboard.
The default is \*(``10\*('', which means that CTRL F1 generates the key
symbol for F11.
.TP 8
.B "curses\fP (class\fB Curses\fP)"
Specifies whether or not the last column bug in
.IR more (1)
should be worked around.
See the \fB\-cu\fP option for details.
The default is \*(``false\*(''.
.TP 8
.B "cursorBlink\fP (class\fB CursorBlink\fP)"
Specifies whether to make the cursor blink.
The default is \*(``false\*(''.
.IP
\fI\*N\fP uses two variables to determine whether the cursor blinks.
One is set by this resource.
The other is set by control sequences (private mode 12 and DECSCUSR).
\fI\*N\fP tests the XOR of the two variables.
.TP 8
.B "cursorColor\fP (class\fB CursorColor\fP)"
Specifies the color to use for the text cursor.
The default is \*(``XtDefaultForeground\*(''.
By default,
\fI\*n\fP attempts to keep this color from being the same as the background
color, since it draws the cursor by filling the background of a text cell.
The same restriction applies to control sequences which may change this color.
.IP
Setting this resource overrides
most of \fI\*n\fP's adjustments to cursor color.
It will still use reverse-video to disallow some cases, such as a black
cursor on a black background.
.TP 8
.B "cursorOffTime\fP (class\fB CursorOffTime\fP)"
Specifies the duration of the \*(``off\*('' part of the cursor blink cycle-time
in milliseconds.
The same timer is used for text blinking.
The default is \*(``300\*(''.
.TP 8
.B "cursorOnTime\fP (class\fB CursorOnTime\fP)"
Specifies the duration of the \*(``on\*('' part of the cursor blink cycle-time,
in milliseconds.
The same timer is used for text blinking.
The default is \*(``600\*(''.
.TP 8
.B "cursorUnderLine\fP (class\fB CursorUnderLine\fP)"
Specifies whether to make the cursor underlined or a box.
The default is \*(``false\*(''.
.TP 8
.B "cutNewline\fP (class\fB CutNewline\fP)"
If \*(``false\*('', triple clicking to select a line does not include the Newline
at the end of the line.
If \*(``true\*('', the Newline is selected.
The default is \*(``true\*(''.
.TP 8
.B "cutToBeginningOfLine\fP (class\fB CutToBeginningOfLine\fP)"
If \*(``false\*('', triple clicking to select a line selects only from the
current word forward.
If \*(``true\*('', the entire line is selected.
The default is \*(``true\*(''.
.TP 8
.B "decTerminalID\fP (class\fB DecTerminalID\fP)"
Specifies the emulation level (100=VT100, 220=VT220, etc.), used to determine
the type of response to a DA control sequence.
Leading non-digit characters are ignored,
e.g., \*(``vt100\*('' and \*(``100\*('' are the same.
The default is \*(``__default_termid__\*(''.
.TP 8
.B "defaultString\fP (class\fB DefaultString\fP)"
Specify the character (or string) which \fI\*n\fP will substitute when
pasted text includes a character which cannot be represented in the
current encoding.
For instance, pasting UTF-8 text into a display of ISO-8859-1 characters
will only be able to display codes 0-255, while UTF-8 text can include
Unicode values above 255.
The default is \*(``#\*('' (a single pound sign).
.IP
If the undisplayable text would be double-width,
\fI\*n\fP will add a space after the \*(``#\*('' character, to give roughly
the same layout on the screen as the original text.
.TP 8
.B "deleteIsDEL\fP (class\fB DeleteIsDEL\fP)"
Specifies whether the Delete key on the editing keypad should send DEL (127)
or the VT220-style Remove escape sequence.
A \*(``false\*('' value enables the latter.
The default is \*(``__delete_is_del__\*(''.
.TP 8
.B "disallowedColorOps\fP (class\fB DisallowedColorOps\fP)"
Specify which features will be disabled if \fBallowColorOps\fP is false.
This is a comma-separated list of names.
The default value is
.RS
SetColor,GetColor,GetAnsiColor
.RE
.IP
The names are listed below.
\fI\*N\fP ignores capitalization, but
they are shown in mixed-case for clarity.
.RS
.TP 5
SetColor
Set a specific dynamic color.
.TP 5
GetColor
Report the current setting of a given dynamic color.
.TP 5
GetAnsiColor
Report the current setting of a given ANSI color (actually any of the colors
set via ANSI-style controls).
.RE
.TP 8
.B "disallowedFontOps\fP (class\fB DisallowedFontOps\fP)"
Specify which features will be disabled if \fBallowFontOps\fP is false.
This is a comma-separated list of names.
The default value is
.NS
SetFont,GetFont
.NE
.IP
The names are listed below.
\fI\*N\fP ignores capitalization, but
they are shown in mixed-case for clarity.
.RS
.TP 5
SetFont
Set the specified font.
.TP 5
GetFont
Report the specified font.
.RE
.TP 8
.B "disallowedMouseOps\fP (class\fB DisallowedMouseOps\fP)"
Specify which features will be disabled if \fBallowMouseOps\fP is false.
This is a comma-separated list of names.
The default value is \*(``*\*('' which matches all names.
The names are listed below.
\fI\*N\fP ignores capitalization, but
they are shown in mixed-case for clarity.
.RS
.TP 5
X10
The original X10 mouse protocol.
.TP 5
Locator
DEC locator mode
.TP 5
VT200Click
X11 mouse-clicks only.
.TP 5
VT200Hilite
X11 mouse-clicks and highlighting.
.TP 5
AnyButton
XFree86 \fI\*n\fP any-button mode sends button-clicks as
well as motion events while the button is pressed.
.TP 5
AnyEvent
XFree86 \fI\*n\fP any-event mode sends button-clicks as
well as motion events whether or not a button is pressed.
.TP 5
FocusEvent
Send FocusIn/FocusOut events.
.TP 5
Extended
The first extension beyond X11 mouse protocol, this encodes
the coordinates in UTF-8.
It is deprecated in favor of \fISGR\fP, but provided for compatibility.
.TP 5
SGR
This is the recommended extension for mouse-coordinates
.TP 5
URXVT
Like \fIExtended\fP, this is provided for compatibility.
.TP 5
AlternateScroll
This overrides the \fBalternateScroll\fP resource.
.RE
.TP 8
.B "disallowedTcapOps\fP (class\fB DisallowedTcapOps\fP)"
Specify which features will be disabled if \fBallowTcapOps\fP is false.
This is a comma-separated list of names.
The default value is
.NS
SetTcap,GetTcap
.NE
.IP
The names are listed below.
\fI\*N\fP ignores capitalization, but
they are shown in mixed-case for clarity.
.RS
.TP 5
SetTcap
(not implemented)
.TP 5
GetTcap
Report specified function- and other special keys.
.RE
.TP 8
.B "disallowedWindowOps\fP (class\fB DisallowedWindowOps\fP)"
Specify which features will be disabled if \fBallowWindowOps\fP is false.
This is a comma-separated list of names, or (for the controls adapted
from \fIdtterm\fP the operation number).
The default value is
.NS
20,21,SetXprop,SetSelection
.NE
.IP
The names are listed below.
\fI\*N\fP ignores capitalization, but
they are shown in mixed-case for clarity.
Where a number can be used
as an alternative, it is given in parentheses after the name.
.RS
.TP 5
GetIconTitle (20)
Report \*n window's icon label as a string.
.TP 5
GetScreenSizeChars (19)
Report the size of the screen in characters as numbers.
.TP 5
GetSelection
Report selection data as a base64 string.
.TP 5
GetWinPosition (13)
Report \*n window position as numbers.
.TP 5
GetWinSizeChars (18)
Report the size of the text area in characters as numbers.
.TP 5
GetWinSizePixels (14)
Report \*n window in pixels as numbers.
.TP 5
GetWinState (11)
Report \*n window state as a number.
.TP 5
GetWinTitle (21)
Report \*n window's title as a string.
.TP 5
LowerWin (6)
Lower the \*n window to the bottom of the stacking order.
.TP 5
MaximizeWin (9)
Maximize window (i.e., resize to screen size).
.TP 5
FullscreenWin (10)
Use full screen (i.e., resize to screen size, without window decorations).
.TP 5
MinimizeWin (2)
Iconify window.
.TP 5
PopTitle (23)
Pop title from internal stack.
.TP 5
PushTitle (22)
Push title to internal stack.
.TP 5
RaiseWin (5)
Raise the \*n window to the front of the stacking order.
.TP 5
RefreshWin (7)
Refresh the \*n window.
.TP 5
RestoreWin (1)
De-iconify window.
.TP 5
SetSelection
Set selection data.
.TP 5
SetWinLines
Resize to a given number of lines, at least 24.
.TP 5
SetWinPosition (3)
Move window to given coordinates.
.TP 5
SetWinSizeChars (8)
Resize the text area to given size in characters.
.TP 5
SetWinSizePixels (4)
Resize the \*n window to given size in pixels.
.TP 5
SetXprop
Set X property on top-level window.
.RE
.TP 8
.B "dynamicColors\fP (class\fB DynamicColors\fP)"
Specifies whether or not escape sequences to change colors assigned to
different attributes are recognized.
.TP 8
.B "eightBitControl\fP (class\fB EightBitControl\fP)"
Specifies whether or not control sequences sent by the
terminal should be eight-bit characters or escape sequences.
The default is \*(``false\*(''.
.TP 8
.B "eightBitInput\fP (class\fB EightBitInput\fP)"
If \*(``true\*('', Meta characters
(a single-byte character combined with the \fIMeta\fP modifier key)
input from the keyboard are presented as a
single character, modified according to the \fBeightBitMeta\fP resource.
If \*(``false\*('', Meta characters are converted into a two-character
sequence with the character itself preceded by ESC.
The default is \*(``true\*(''.
.IP
The \fBmetaSendsEscape\fP
and \fBaltSendsEscape\fP resources may override this feature.
Generally keyboards do not have a key labeled \*(``Meta\*('',
but \*(``Alt\*('' keys are common,
and they are conventionally used for \*(``Meta\*(''.
If they were synonymous, it would have been reasonable to name this
resource \*(``\fBaltSendsEscape\fP\*('', reversing its sense.
For more background on this, see the \fBmeta(3x)\fP function in curses.
.IP
Note that the \fIAlt\fP key is not necessarily the same as the
\fIMeta\fP modifier.
The \fIxmodmap\fP utility lists your key modifiers.
X defines modifiers for shift, (caps) lock and control,
as well as 5 additional modifiers which are generally used to configure
key modifiers.
\fI\*N\fP inspects the same information to find the modifier associated
with either \fIMeta\fP key (left or right),
and uses that key as the \fIMeta\fP modifier.
It also looks for the NumLock key,
to recognize the modifier which is associated with that.
.IP
If your \fIxmodmap\fP configuration
uses the same keycodes for Alt- and Meta-keys,
\fI\*n\fP will only see the Alt-key definitions, since those are tested
before Meta-keys.
NumLock is tested first.
It is important to keep these keys distinct;
otherwise some of \fI\*n\fP's functionality is not available.
.IP
The \fBeightBitInput\fP resource is tested at startup time.
If \*(``true\*('',
the \fI\*n\fP tries to put the terminal into 8-bit mode.
If \*(``false\*('',
on startup, \fI\*n\fP tries to put the terminal into 7-bit mode.
For some configurations this is unsuccessful; failure is ignored.
After startup, \fI\*n\fP does not
change the terminal between 8-bit and 7-bit mode.
.IP
As originally implemented in X11,
the resource value did not change after startup.
However
(since patch #216 in 2006)
\fI\*n\fP can modify \fBeightBitInput\fP after startup
via a control sequence.
The corresponding terminfo capabilities \fBsmm\fP (set meta mode)
and \fBrmm\fP (reset meta mode)
have been recognized by \fIbash\fP for some time.
Interestingly enough, \fIbash\fP's notion of \*(``meta mode\*(''
differs from the standard definition (in the \fIterminfo\fP manual),
which describes the change to the eighth bit of a character.
It happens that \fIbash\fP views \*(``meta mode\*(''
as the ESC character that \fI\*n\fP puts before a character when a
special meta key is pressed.
\fIbash\fP's early documentation talks about the ESC character
and ignores the eighth bit.
.TP 8
.B "eightBitMeta\fP (class\fB EightBitMeta\fP)"
This controls the way \fI\*n\fP modifies the eighth bit of a single-byte
key when the \fBeightBitInput\fP resource is set.
The default is \*(``locale\*(''.
.IP
The resource value is a string, evaluated as a boolean after startup.
.RS
.TP 5
false
The key is sent unmodified.
.TP 5
locale
The key is modified only if the locale uses eight-bit encoding.
.TP 5
true
The key is sent modified.
.TP 5
never
The key is always sent unmodified.
.RE
.IP
Except for the \fBnever\fP choice, \fI\*n\fP honors the
terminfo capabilities \fBsmm\fP (set meta mode)
and \fBrmm\fP (reset meta mode),
allowing the feature to be turned on or off dynamically.
.IP
If \fBeightBitMeta\fP is enabled when the locale uses UTF-8,
\fI\*n\fP encodes the value as UTF-8
(since patch #183 in 2003).
.TP 8
.B "eightBitOutput\fP (class\fB EightBitOutput\fP)"
Specifies whether or not eight-bit characters sent from the host should be
accepted as is or stripped when printed.
The default is \*(``true\*('',
which means that they are accepted as is.
.TP 8
.B "eightBitSelectTypes\fP (class\fB EightBitSelectTypes\fP)"
Override \fI\*n\fP's default selection target list
(see \fBSELECT/PASTE\fP) for selections in normal (ISO-8859-1) mode.
The default is an empty string, i.e., \*(``\*('',
which does not override anything.
.TP 8
.B "eraseSavedLines\fP (class\fB EraseSavedLines\fP)"
Specifies whether or not to allow
\fI\*n\fP extended ED/DECSED control sequences to erase the saved-line buffer.
The default is \*(``true\*(''.
.TP 8
.B "faceName\fP (class\fB FaceName\fP)"
Specify the pattern for scalable fonts selected from the FreeType
library if support for that library was compiled into \fI\*n\fR.
There is no default value.
.IP
One or more fonts can be specified, separated by commas.
If prefixed with \*(``x:\*('' or \*(``x11:\*('' the specification
applies to the XLFD \fBfont\fP resource.
A \*(``xft:\*('' prefix is accepted but unnecessary since
a missing prefix for \fBfaceName\fP means that it will be used for TrueType.
For example,
.NS
XTerm*faceName: x:fixed,xft:Bitstream Vera Sans Mono
.NE
.IP
If no \fBfaceName\fP resource is specified,
or if there is no match for both TrueType normal and bold fonts,
\fI\*n\fR uses the XLFD (bitmap) \fBfont\fP and related resources.
.IP
It is possible to select suitable bitmap fonts using a script such as this:
.NS
\&#!/bin/sh
\&FONT=`xfontsel -print`
\&test -n "$FONT" && xfd -fn "$FONT"
.NE
.IP
However (even though \fIxfd\fP accepts a \*(``\fB\-fa\fP\*('' option
to denote FreeType fonts),
\fIxfontsel\fP has not been similarly extended.
As a workaround, you may try
.NS
fc-list :scalable=true:spacing=mono: family
.NE
.IP
to find a list of scalable fixed-pitch fonts
which may be used for the \fBfaceName\fP resource value.
.TP 8
.B "faceNameDoublesize\fP (class\fB FaceNameDoublesize\fP)"
Specify a double-width scalable font for cases where an application requires
this, e.g., in CJK applications.
There is no default value.
.IP
Like the \fBfaceName\fP resource, this allows one or more comma-separated
font specifications to be applied to the \fIwide\fP TrueType or XLFD fonts.
.IP
If the application uses double-wide characters and this resource is not given,
\fI\*n\fP will use a scaled version of the font given by \fBfaceName\fP.
.TP 8
.B "faceSize\fP (class\fB FaceSize\fP)"
Specify the pointsize for fonts selected from the FreeType
library if support for that library was compiled into \fI\*n\fR.
The default is \*(``14.0\*(''
On the \fBVT\ Fonts\fP menu, this corresponds to the \fIDefault\fP entry.
.IP
Although the default is \*(``14.0\*('',
this may not be the same as the pointsize for the default bitmap font,
i.e., that assigned with the \fB\-fn\fP option,
or the \fBfont\fP resource.
For example, the \*(``fixed\*('' font usually has a pointsize of \*(``8.0\*(''.
If you set \fBfaceSize\fP to match the size of the bitmap font,
then switching between bitmap and TrueType fonts via the font menu
will give comparable sizes for the window.
.IP
You can specify the pointsize for TrueType fonts selected with the other
size-related menu entries such as Medium, Huge, etc., by using one of
the following resource values.
If you do not specify a value,
they default to \*(``0.0\*('',
which causes \fI\*n\fP to use the ratio of font sizes
from the corresponding bitmap
font resources to obtain a TrueType pointsize.
.IP
If all of the \fBfaceSize\fP resources are set, then \fI\*n\fP
will use this information to determine the next smaller/larger
TrueType font for the
\fBlarger-vt-font()\fP and
\fBsmaller-vt-font()\fP actions.
If any are not set, \fI\*n\fP will use only the areas of the bitmap fonts.
.TP 8
.B "faceSize1\fP (class\fB FaceSize1\fP)"
Specifies the pointsize of the first alternative font.
.TP 8
.B "faceSize2\fP (class\fB FaceSize2\fP)"
Specifies the pointsize of the second alternative font.
.TP 8
.B "faceSize3\fP (class\fB FaceSize3\fP)"
Specifies the pointsize of the third alternative font.
.TP 8
.B "faceSize4\fP (class\fB FaceSize4\fP)"
Specifies the pointsize of the fourth alternative font.
.TP 8
.B "faceSize5\fP (class\fB FaceSize5\fP)"
Specifies the pointsize of the fifth alternative font.
.TP 8
.B "faceSize6\fP (class\fB FaceSize6\fP)"
Specifies the pointsize of the sixth alternative font.
.TP 8
.B "font\fP (class\fB Font\fP)"
Specifies the name of the normal font.
The default is \*(``fixed\*(''.
.IP
See the discussion of the \fBlocale\fP resource,
which describes how this font may be overridden.
.IP
NOTE: some resource files use patterns such as
.NS
*font: fixed
.NE
.IP
which are overly broad, affecting both
.NS
xterm.vt100.font
.NE
.IP
and
.NS
xterm.vt100.utf8Fonts.font
.NE
.IP
which is probably not what you intended.
.TP 8
.B "fastScroll\fP (class\fB FastScroll\fP)"
Modifies the effect of jump scroll (\fBjumpScroll\fP)
by suppressing screen refreshes
for the special case when output to the screen has completely shifted
the contents off-screen.
For instance, \fIcat\fP'ing a large file to the screen does this.
.TP 8
.B "font1\fP (class\fB Font1\fP)"
Specifies the name of the first alternative font,
corresponding to \*(``Unreadable\*('' in the standard menu.
.TP 8
.B "font2\fP (class\fB Font2\fP)"
Specifies the name of the second alternative font,
corresponding to \*(``Tiny\*('' in the standard menu.
.TP 8
.B "font3\fP (class\fB Font3\fP)"
Specifies the name of the third alternative font,
corresponding to \*(``Small\*('' in the standard menu.
.TP 8
.B "font4\fP (class\fB Font4\fP)"
Specifies the name of the fourth alternative font,
corresponding to \*(``Medium\*('' in the standard menu.
.TP 8
.B "font5\fP (class\fB Font5\fP)"
Specifies the name of the fifth alternative font,
corresponding to \*(``Large\*('' in the standard menu.
.TP 8
.B "font6\fP (class\fB Font6\fP)"
Specifies the name of the sixth alternative font,
corresponding to \*(``Huge\*('' in the standard menu.
.TP 8
.B "fontDoublesize\fP (class\fB FontDoublesize\fP)"
Specifies whether \fI\*n\fP should attempt to use font scaling to draw
double-sized characters.
Some older font servers cannot do this properly, will return misleading
font metrics.
The default is \*(``true\*(''.
If disabled, \fI\*n\fP will simulate double-sized characters by drawing
normal characters with spaces between them.
.TP 8
.B "fontWarnings\fP (class\fB FontWarnings\fP)"
Specify whether \fI\*n\fP should report an error if it fails to load a font:
.RS
.TP 5
0
Never report an error (though the X libraries may).
.TP 5
1
Report an error if the font name was given as a resource setting.
.TP 5
2
Always report an error on failure to load a font.
.RE
.IP
The default is \*(``1\*(''.
.TP 8
.B "forceBoxChars\fP (class\fB ForceBoxChars\fP)"
Specifies whether \fI\*n\fP should assume the normal and bold fonts
have VT100 line-drawing characters:
.RS
.bP
The fixed-pitch ISO-8859-*-encoded fonts used by \fI\*n\fP
normally have the VT100 line-drawing glyphs in cells 1-31.
Other fixed-pitch fonts may be more attractive, but lack these glyphs.
.bP
When using an ISO-10646-1 font and the \fBwideChars\fP resource is true,
\fI\*n\fP uses the Unicode glyphs which match the VT100 line-drawing glyphs.
.RE
.IP
If \*(``false\*('', \fI\*n\fP checks for missing glyphs in the font
and makes line-drawing characters directly as needed.
If \*(``true\*('', \fI\*n\fP assumes the font does not contain the
line-drawing characters, and draws them directly.
The default is \*(``false\*(''.
.TP 8
.B "forcePackedFont\fP (class\fB ForcePackedFont\fP)"
Specifies whether \fI\*n\fP should use the maximum or minimum glyph
width when displaying using a bitmap font.
Use the maximum width to help with proportional fonts.
The default is \*(``true\*('', denoting the minimum width.
.TP 8
.B "foreground\fP (class\fB Foreground\fP)"
Specifies the color to use for displaying text in the window.
Setting the
class name instead of the instance name is an easy way to have everything
that would normally appear in the text color change color.
The default
is \*(``XtDefaultForeground\*(''.
.TP 8
.B "formatOtherKeys\fP (class\fB FormatOtherKeys\fP)"
Overrides the format of the escape sequence used to report modified keys
with the \fBmodifyOtherKeys\fP resource.
.RS
.TP 3
0
send modified keys as parameters for function-key 27 (default).
.TP 3
1
send modified keys as parameters for CSI\ u.
.RE
.TP 8
.B "freeBoldBox\fP (class\fB FreeBoldBox\fP)"
Specifies whether \fI\*n\fP should assume the bounding boxes for
normal and bold fonts are compatible.
If \*(``false\*('', \fI\*n\fP compares them and will reject choices of
bold fonts that do not match the size of the normal font.
The default is \*(``false\*('', which means that the comparison is performed.
.TP 8
.B "geometry\fP (class\fB Geometry\fP)"
Specifies the preferred size and position of the VT\fIxxx\fP window.
There is no default for this resource.
.TP 8
.B "highlightColor\fP (class\fB HighlightColor\fP)"
Specifies the color to use for the background of selected (highlighted) text.
If not specified (i.e., matching the default foreground), reverse video is used.
The default is \*(``XtDefaultForeground\*(''.
.TP 8
.B "highlightColorMode\fP (class\fB HighlightColorMode\fP)"
Specifies whether \fI\*n\fP should use
\fBhighlightTextColor\fP and \fBhighlightColor\fP
to override the reversed foreground/background colors in a selection.
The default is unspecified:
at startup, \fI\*n\fP checks if those resources are set to something
other than the default foreground and background colors.
Setting this resource disables the check.
.IP
The following table shows the interaction of the highlighting
resources, abbreviated as shown to fit in this page:
.RS
.TP 3
.I HCM
highlightColorMode
.TP 3
.I HR
highlightReverse
.TP 3
.I HBG
highlightColor
.TP 3
.I HFG
highlightTextColor
.RE
.IP
.ne 34
.TS
l l l l l
_ _ _ _ _
l l l l l.
\fIHCM\fR	\fIHR\fR	\fIHBG\fR	\fIHFG\fR	\fIHighlight\fP
false	false	default	default	bg/fg
false	false	default	set	bg/fg
false	false	set	default	fg/HBG
false	false	set	set	fg/HBG
=
false	true	default	default	bg/fg
false	true	default	set	bg/fg
false	true	set	default	fg/HBG
false	true	set	set	fg/HBG
=
true	false	default	default	bg/fg
true	false	default	set	HFG/fg
true	false	set	default	bg/HBG
true	false	set	set	HFG/HBG
=
true	true	default	default	bg/fg
true	true	default	set	HFG/fg
true	true	set	default	fg/HBG
true	true	set	set	HFG/HBG
=
default	false	default	default	bg/fg
default	false	default	set	bg/fg
default	false	set	default	fg/HBG
default	false	set	set	HFG/HBG
=
default	true	default	default	bg/fg
default	true	default	set	bg/fg
default	true	set	default	fg/HBG
default	true	set	set	HFG/HBG
=
.TE
.TP 8
.B "highlightReverse\fP (class\fB HighlightReverse\fP)"
Specifies whether \fI\*n\fP should reverse the selection foreground
and background colors when selecting text with reverse-video attribute.
This applies only to
the \fBhighlightColor\fP and \fBhighlightTextColor\fP resources,
e.g., to match the color scheme of \fIxwsh\fP.
If \*(``true\*('', \fI\*n\fP reverses the colors,
If \*(``false\*('', \fI\*n\fP does not reverse colors,
The default is \*(``true\*(''.
.TP 8
.B "highlightSelection\fP (class\fB HighlightSelection\fP)"
If \*(``false\*('', selecting with the mouse highlights all positions on the screen
between the beginning of the selection and the current position.
If \*(``true\*('', \fI\*n\fP highlights only the positions that contain text that
can be selected.
The default is \*(``false\*(''.
.IP
Depending on the way your applications write to the screen, there may
be trailing blanks on a line.
\fI\*N\fP stores data as it is shown on the screen.
Erasing the display changes the internal state of each cell
so it is not considered a blank for the purpose of selection.
Blanks written since the last erase are selectable.
If you do not wish to have trailing blanks in a selection,
use the \fBtrimSelection\fP resource.
.TP 8
.B "highlightTextColor\fP (class\fB HighlightTextColor\fP)"
Specifies the color to use for the foreground of selected (highlighted) text.
If not specified (i.e., matching the default background), reverse video is used.
The default is \*(``XtDefaultBackground\*(''.
.TP 8
.B "hpLowerleftBugCompat\fP (class\fB HpLowerleftBugCompat\fP)"
Specifies whether to work around a bug in HP's \fIxdb\fP,
which ignores termcap and always sends
ESC F to move to the lower left corner.
\*(``true\*('' causes \fI\*n\fP to interpret ESC F as a request to move to the
lower left corner of the screen.
The default is \*(``false\*(''.
.TP 8
.B "i18nSelections\fP (class\fB I18nSelections\fP)"
If false, \fI\*n\fP will not request the targets
\fBCOMPOUND_TEXT\fP
or
\fBTEXT\fP.
The default is \*(``true\*(''. It may be set to false in order to work around
ICCCM violations by other X clients.
.TP 8
.B "iconBorderColor\fP (class\fB BorderColor\fP)"
Specifies the border color for the active icon window if this feature
is compiled into \fI\*n\fR.
Not all window managers will make the icon
border visible.
.TP 8
.B "iconBorderWidth\fP (class\fB BorderWidth\fP)"
Specifies the border width for the active icon window if this feature
is compiled into \fI\*n\fR.
The default is \*(``2\*(''.
Not all window managers will make the border visible.
.TP 8
.B "iconFont\fP (class\fB IconFont\fP)"
Specifies the font for the miniature active icon window, if this feature
is compiled into \fI\*n\fR.
The default is \*(``nil2\*(''.
.TP 8
.B "initialFont\fP (class\fB InitialFont\fP)"
Specifies which of the VT100 fonts to use initially.
Values are the same as for the \fBset-vt-font\fP action.
The default is \*(``d\*('', i.e., \*(``default\*(''.
.TP 8
.B "inputMethod\fP (class\fB InputMethod\fP)"
Tells \fI\*n\fP which type of input method to use.
There is no default method.
.TP 8
.B "internalBorder\fP (class\fB BorderWidth\fP)"
Specifies the number of pixels between the characters and the window border.
The default is \*(``2\*(''.
.TP 8
.B "italicULMode\fP (class\fB ColorAttrMode\fP)"
Specifies whether characters with the underline attribute should be displayed
in an italic font or as underlined characters.
It is implemented only for TrueType fonts.
.TP 8
.B "jumpScroll\fP (class\fB JumpScroll\fP)"
Specifies whether or not jump scroll should be used.
This corresponds to the VT102 DECSCLM private mode.
The default is \*(``true\*(''.
See \fBfastScroll\fP for a variation.
.TP 8
.B "keepClipboard\fP (class\fB KeepClipboard\fP)"
Specifies whether \fI\*n\fR will reuse the selection data which it
copied to the keyboard rather than asking the clipboard for its
current contents when told to provide the selection.
The default is \*(``false\*(''.
.TP 8
.B "keepSelection\fP (class\fB KeepSelection\fP)"
Specifies whether \fI\*n\fR will keep the selection even after the
selected area was touched by some output to the terminal.
The default is \*(``true\*(''.
.TP 8
.B "keyboardDialect\fP (class\fB KeyboardDialect\fP)"
Specifies the initial keyboard dialect, as well as the default value when
the terminal is reset.
The value given is the same as the final character in the control sequences
which change character sets.
The default is \*(``B\*('', which corresponds to US ASCII.
.TP 8
.B "\fIname\fP\fBKeymap\fP (class\fB \fIName\fP\fBKeymap\fP)"
See the discussion of the \fBkeymap()\fP action.
.TP 8
.B "limitResize\fP (class\fB LimitResize\fP)"
Limits resizing of the screen via control sequence to a given multiple of
the display dimensions.
The default is \*(``1\*(''.
.TP 8
.B "locale\fP (class\fB Locale\fP)"
Specifies how to use \fIluit\fR, an encoding converter between UTF-8
and locale encodings.
The resource value (ignoring case) may be:
.RS
.TP 4
.I true
\fI\*N\fR will use the
encoding specified by the users' LC_CTYPE locale (i.e., LC_ALL,
LC_CTYPE, or LANG variables) as far as possible.
This is realized
by always enabling UTF-8 mode and invoking \fIluit\fR in non-UTF-8
locales.
.TP
.I medium
\fI\*N\fR will follow users'
LC_CTYPE locale only for UTF-8, east Asian, and Thai locales,
where the encodings were not supported by conventional 8bit mode
with changing fonts.
For other locales, \fI\*n\fR will use conventional 8bit mode.
.TP
.I checkfont
If mini-luit is compiled-in, \fI\*n\fR will check if a Unicode font has
been specified.
If so, it checks if the character encoding for the
current locale is POSIX, Latin-1 or Latin-9, uses the appropriate
mapping to support those with the Unicode font.
For other encodings, \fI\*n\fR assumes that UTF-8 encoding is required.
.TP
.I false
\fI\*N\fR will use conventional 8bit mode
or UTF-8 mode according to \fButf8\fR resource or \fB\-u8\fP option.
.RE
.IP
Any other value, e.g., \*(``UTF-8\*('' or \*(``ISO8859-2\*('',
is assumed to be an encoding name;
\fIluit\fR will be invoked to support the encoding.
The actual list of supported encodings depends on \fIluit\fR.
The default is \*(``medium\*(''.
.IP
Regardless of your locale and encoding,
you need an ISO-10646-1 font to display the result.
Your configuration may not include this font,
or locale-support by \fI\*n\fP may not be needed.
.IP
At startup, \fI\*n\fP uses a mechanism equivalent to
the \fBload-vt-fonts(utf8Fonts,\ Utf8Fonts)\fP action
to load font name subresources of the VT100 widget.
That is,
resource patterns such as \*(``\fB*vt100.utf8Fonts.font\fP\*('' will be loaded,
and (if this resource is enabled), override the normal fonts.
If no subresources are found,
the normal fonts such as \*(``\fB*vt100.font\fP\*('', etc., are used.
.IP
For instance, you could have this in your resource file:
.NS
*VT100.font: 12x24
*VT100.utf8Fonts.font:9x15
.NE
.IP
When started with a UTF-8 locale, \fI\*n\fP would use 9x15, but
allow you to switch to the 12x24 font
using the menu entry \*(``\fBUTF-8 Fonts\fP\*(''.
.IP
The resource files distributed with \fI\*n\fP use ISO-10646-1 fonts,
but do not rely on them unless you are using the locale mechanism.
.TP 8
.B "localeFilter\fP (class\fB LocaleFilter\fP)"
Specifies the file name for the encoding converter from/to locale
encodings and UTF-8 which is used with the \fB\-lc\fR option or \fBlocale\fR resource.
The help message shown by \*(``\*n \-help\*('' lists the default value,
which depends on your system configuration.
.IP
If the encoding converter requires command-line parameters,
you can add those after the command, e.g.,
.NS
*localeFilter: xterm-filter -p
.NE
.IP
Alternatively,
you may put those parameter within a shell script to execute the converter,
and set this resource to point to the shell script.
.IP
When using a locale-filter, e.g., with the \fI\-e\fP option, or the shell,
\fI\*n\fP first tries passing control via that filter.
If it fails, \fI\*n\fP will retry without the locale-filter.
\fI\*N\fP warns about the failure before retrying.
.TP 8
.B "loginShell\fP (class\fB LoginShell\fP)"
Specifies whether or not the shell to be run in the window should be started
as a login shell.
The default is \*(``false\*(''.
.TP 8
.B "logFile\fP (class\fB Logfile\fP)"
Specify the name for \fI\*n\fP's log-file.
If no name is specified, \fI\*n\fP will generate a name when
logging is enabled,
as described in the \fB\-l\fP option.
.TP 8
.B "logInhibit\fP (class\fB LogInhibit\fP)"
If \*(``true\*('', prevent the logging feature from being enabled,
whether by the command-line option \fB\-l\fP,
or the menu entry \fBLog to File\fP.
The default is \*(``false\*(''.
.TP 8
.B "logging\fP (class\fB Logging\fP)"
If \*(``true\*('', (and if \fBlogInhibit\fP is not set)
enable the logging feature.
This resource is set/updated by the \fB\-l\fP option and the
menu entry \fBLog to File\fP.
The default is \*(``false\*(''.
.TP 8
.B "marginBell\fP (class\fB MarginBell\fP)"
Specifies whether or not the bell should be rung when the user types near the
right margin.
The default is \*(``false\*(''.
.TP 8
.B "maxGraphicSize\fP (class\fB MaxGraphicSize\fP)"
If \fI\*n\fR is configured to support ReGIS or SIXEL graphics,
this resource controls the maximum size of a graph which can be displayed.
.IP
The default is \*(``1000x1000\*('' (given as \fIwidth\fP by \fIheight\fP).
.IP
If the resource is \*(``auto\*('' then \fI\*n\fR will use the 
\fBdecTerminalID\fP resource:
.TS
l l
_ _
r r.
\fBResult\fR	\fBdecTerminalID\fR
768x400	125
800x460	240
800x460	241
800x480	330
800x480	340
860x750	382
800x480	\fIother\fP
.TE
.TP 8
.B "metaSendsEscape\fP (class\fB MetaSendsEscape\fP)"
If \*(``true\*('', Meta characters
(a character combined with the \fIMeta\fP modifier key)
are converted into a two-character
sequence with the character itself preceded by ESC.
This applies as well to function key control sequences, unless \fI\*n\fP
sees that \fBMeta\fP is used in your key translations.
If \*(``false\*('', Meta characters input from the keyboard are handled according
to the \fBeightBitInput\fP resource.
The default is \*(``__meta_sends_esc__\*(''.
.TP 8
.B "mkSamplePass\fP (class\fB MkSamplePass\fP)"
If \fBmkSampleSize\fP is nonzero,
and \fBmkWidth\fP (and \fBcjkWidth\fP) are false,
on startup \fI\*n\fP compares its built-in tables to the system's
wide character width data to decide if it will use the system's data.
It tests the first \fBmkSampleSize\fP character values,
and allows up to \fBmkSamplePass\fP mismatches before the test fails.
The default (for the allowed number of mismatches) is 655
(one percent of the default value for \fBmkSampleSize\fP).
.TP 8
.B "mkSampleSize\fP (class\fB MkSampleSize\fP)"
With \fBmkSamplePass\fP, this specifies a startup test used for
initializing wide character width calculations.
The default (number of characters to check) is 65536.
.TP 8
.B "mkWidth\fP (class\fB MkWidth\fP)"
Specifies whether \fI\*n\fP should use a built-in version of the wide
character width calculation.
See also the \fBcjkWidth\fP resource which can override this.
The default is \*(``false\*(''.
.IP
Here is a summary of the resources which control the choice of
wide character width calculation:
.ne 8
.TS
l l l
_ _ _
l l l.
\fIcjkWidth\fR	\fImkWidth\fR	\fIAction\fP
false	false	use system tables subject to \fBmkSamplePass\fP
false	true	use built-in tables
true	false	use built-in CJK tables
true	true	use built-in CJK tables
.TE
.TP 8
.B "modifyCursorKeys\fP (class\fB ModifyCursorKeys\fP)"
Tells how to handle the special case where
Control-, Shift-, Alt- or Meta-modifiers are used to add a parameter to
the escape sequence returned by a cursor-key.
The default is \*(``2\*('':
.RS
.TP 5
\-1
disables the feature.
.TP 5
0
uses the old/obsolete behavior, i.e., the modifier is the first parameter.
.TP 5
1
prefixes modified sequences with CSI.
.TP 5
2
forces the modifier to be the second parameter if it would
otherwise be the first.
.TP 5
3
marks the sequence with a \*(``>\*('' to hint that it is private.
.RE
.TP 8
.B "modifyFunctionKeys\fP (class\fB ModifyFunctionKeys\fP)"
Tells how to handle the special case where
Control-, Shift-, Alt- or Meta-modifiers are used to add a parameter to
the escape sequence returned by a (numbered) function-key.
The default is \*(``2\*(''.
The resource values are similar to \fBmodifyCursorKeys\fP:
.RS
.TP 5
\-1
permits the user to use shift- and control-modifiers
to construct function-key strings using the normal encoding scheme.
.TP 5
0
uses the old/obsolete behavior, i.e., the modifier is the first parameter.
.TP 5
1
prefixes modified sequences with CSI.
.TP 5
2
forces the modifier to be the second parameter if it would
otherwise be the first.
.TP 5
3
marks the sequence with a \*(``>\*('' to hint that it is private.
.RE
.IP
If \fBmodifyFunctionKeys\fP is zero,
\fI\*n\fP uses Control- and Shift-modifiers to allow the user to
construct numbered function-keys beyond the set provided by the
keyboard:
.RS
.TP 5
Control
adds the value given by the \fBctrlFKeys\fP resource.
.TP 5
Shift
adds twice the value given by the \fBctrlFKeys\fP resource.
.TP 5
Control/Shift
adds three times the value given by the \fBctrlFKeys\fP resource.
.RE
.IP
.TP 8
.B "modifyKeyboard\fP (class\fB ModifyKeyboard\fP)"
Normally \fI\*n\fP makes a special case regarding
modifiers (shift, control, etc.)
to handle special keyboard layouts (\fBlegacy\fP and \fBvt220\fP).
This is done to provide compatible keyboards for DEC VT220 and related
terminals that implement user-defined keys (UDK).
.IP
The bits of the resource value selectively enable
modification of the given category when these keyboards are selected.
The default is \*(``0\*('':
.RS
.TP 5
0
The legacy/vt220 keyboards interpret only the
Control-modifier when constructing numbered function-keys.
Other special keys are not modified.
.TP 5
1
allows modification of the numeric keypad
.TP 5
2
allows modification of the editing keypad
.TP 5
4
allows modification of function-keys,
overrides use of Shift-modifier for UDK.
.TP 5
8
allows modification of other special keys
.RE
.TP 8
.B "modifyOtherKeys\fP (class\fB ModifyOtherKeys\fP)"
Like \fBmodifyCursorKeys\fP, tells \fI\*n\fP to construct an
escape sequence for other keys (such as \*(``2\*('') when modified by
Control-, Alt- or Meta-modifiers.
This feature does not apply to function keys and well-defined
keys such as ESC or the control keys.
The default is \*(``0\*('':
.RS
.TP 5
0
disables this feature.
.TP 5
1
enables this feature for keys except for those with
well-known behavior, e.g., Tab, Backarrow and some special
control character cases, e.g., Control-Space to make a NUL.
.TP 5
2
enables this feature for keys including the exceptions listed.
.RE
.TP 8
.B "multiClickTime\fP (class\fB MultiClickTime\fP)"
Specifies the maximum time in milliseconds between multi-click select
events.
The default is \*(``250\*('' milliseconds.
.TP 8
.B "multiScroll\fP (class\fB MultiScroll\fP)"
Specifies whether or not scrolling should be done asynchronously.
The default is \*(``false\*(''.
.TP 8
.B "nMarginBell\fP (class\fB Column\fP)"
Specifies the number of characters from the right margin at which the margin
bell should be rung, when enabled by the \fBmarginBell\fP resource.
The default is \*(``10\*(''.
.TP 8
.B "numColorRegisters\fP (class\fB NumColorRegisters\fP)"
If \fI\*n\fR is configured to support ReGIS or SIXEL graphics,
this specifies the number of color-registers which are available.
.IP
If this resource is not specified, \fI\*n\fR uses a value determined
by the \fBdecTerminalID\fP resource:
.TS
l l
_ _
r r.
\fBResult\fR	\fBdecTerminalID\fR
4	125
4	240
4	241
4	330
16	340
2	382
1024	\fIother\fP
.TE
.TP 8
.B "numLock\fP (class\fB NumLock\fP)"
If \*(``true\*('', \fI\*n\fR checks if NumLock is used as a modifier
(see \fIxmodmap\fP(__mansuffix__)).
If so, this modifier is used to simplify the logic when implementing special
NumLock for the \fBsunKeyboard\fP resource.
Also (when \fBsunKeyboard\fP is false), similar logic is used to find the
modifier associated with the left and right Alt keys.
The default is \*(``true\*(''.
.TP 8
.B "oldXtermFKeys\fP (class\fB OldXtermFKeys\fP)"
If \*(``true\*('', \fI\*n\fR will use old-style (X11R5) escape sequences
for function keys F1 to F4,
for compatibility with X Consortium \fI\*n\fR.
Otherwise, it uses the VT100 codes for PF1 to PF4.
The default is \*(``false\*(''.
.IP
Setting this resource has the same effect as setting the \fBkeyboardType\fP
to \fBlegacy\fP.
The \fBkeyboardType\fP resource is the preferred mechanism for selecting this mode.
.IP
The old-style escape sequences resemble VT220 keys,
but appear to have been invented for \fI\*n\fP in X11R4. 
.TP 8
.B "on2Clicks\fP (class\fB On2Clicks\fP)"
.TP
.B "on3Clicks\fP (class\fB On3Clicks\fP)"
.TP
.B "on4Clicks\fP (class\fB On4Clicks\fP)"
.TP
.B "on5Clicks\fP (class\fB On5Clicks\fP)"
Specify selection behavior in response to multiple mouse clicks.
A single mouse click is always interpreted as described in
the \fBSelection Functions\fP section (see \fBPOINTER USAGE\fP).
Multiple mouse clicks (using the button which activates the \fBselect-start\fP
action) are interpreted according to the resource values of
\fBon2Clicks\fP, etc.
The resource value can be one of these:
.RS
.TP 3
word
Select a \*(``word\*('' as determined by the \fBcharClass\fP resource.
See the \fBCHARACTER CLASSES\fP section.
.TP
line
Select a line (counting wrapping).
.TP
group
Select a group of adjacent lines (counting wrapping).
The selection stops on a blank line,
and does not extend outside the current page.
.TP
page
Select all visible lines, i.e., the page.
.TP
all
Select all lines, i.e., including the saved lines.
.TP
regex
Select a \*(``word\*('' as determined by the regular expression which
follows in the resource value.
.TP
none
No selection action is associated with this resource.
\fI\*N\fP interprets it as the end of the list.
For example, you may use it to disable triple (and higher) clicking
by setting \fBon3Clicks\fP to \*(``none\*(''.
.RE
.IP
The default values for \fBon2Clicks\fP and \fBon3Clicks\fP are
\*(``word\*('' and \*(``line\*('', respectively.
There is no default value for \fBon4Clicks\fP or \fBon5Clicks\fP,
making those inactive.
On startup, \fI\*n\fP determines the maximum number of clicks
by the \fBon\fP\fIX\fP\fBClicks\fP resource values which are set.
.TP 8
.B "openIm\fP (class\fB OpenIm\fP)"
Tells \fI\*n\fP whether to open the input method at startup.
The default is \*(``true\*(''.
.TP 8
.B "pointerColor\fP (class\fB PointerColor\fP)"
Specifies the foreground color of the pointer.
The default is
\*(``XtDefaultForeground\*(''.
.TP 8
.B "pointerColorBackground\fP (class\fB PointerColorBackground\fP)"
Specifies the background color of the pointer.
The default is
\*(``XtDefaultBackground\*(''.
.TP 8
.B "pointerMode\fP (class\fB PointerMode\fP)"
Specifies when the pointer may be hidden as the user types.
It will be redisplayed if the user moves the mouse,
or clicks one of its buttons.
.RS
.TP 3
0
never.
This is the default.
.TP 3
1
the application running in \fI\*n\fP has not activated mouse mode.
.TP 3
2
always.
.RE
.TP 8
.B "pointerShape\fP (class\fB Cursor\fP)"
Specifies the name of the shape of the pointer.
The default is \*(``xterm\*(''.
.TP 8
.B "popOnBell\fP (class\fB PopOnBell\fP)"
Specifies whether the window would be raised when Control-G is received.
The default is \*(``false\*(''.
.IP
If the window is iconified, this has no effect.
However, the \fBzIconBeep\fP resource provides you with the ability to
see which iconified windows have sounded a bell.
.TP 8
.B "precompose\fP (class\fB Precompose\fP)"
Tells \fI\*n\fP whether to precompose UTF-8 data into Normalization Form C,
which combines commonly-used accents onto base characters.
If it does not do this, accents are left as separatate characters.
The default is \*(``true\*(''.
.TP 8
.B "preeditType\fP (class\fB PreeditType\fP)"
Tells \fI\*n\fP which types of preedit (preconversion) string to display.
The default is \*(``OverTheSpot,Root\*(''.
.TP 8
.B "printAttributes\fP (class\fB PrintAttributes\fP)"
Specifies whether to print graphic attributes along with the text.
A real DEC VT\fIxxx\fP terminal will print the underline, highlighting codes
but your printer may not handle these.
.RS
.bP
\*(``0\*('' disables the attributes.
.bP
\*(``1\*('' prints the normal set of attributes (bold, underline, inverse and blink)
as VT100-style control sequences.
.bP
\*(``2\*('' prints ANSI color attributes as well.
.RE
.IP
The default is \*(``1\*(''.
.TP 8
.B "printFileImmediate\fP (class \fBPrintFileImmediate\fP)"
When the \fBprint-immediate\fP action is invoked,
\fI\*n\fP prints the screen contents directly to a file.
Set this resource to the prefix of the filename
(a timestamp will be appended to the actual name).
.IP
The default is an empty string, i.e., \*(``\*('',
However, when the \fBprint-immediate\fP action is invoked,
if the string is empty, then \*(``__default_class__\*('' is used.
.TP 8
.B "printFileOnXError\fP (class \fBPrintFileOnXError\fP)"
If \fI\*n\fP exits with an X error,
e.g., your connection is broken when the server crashes,
it can be told to write the contents of the screen to a file.
To enable the feature, set this resource to the prefix of the filename
(a timestamp will be appended to the actual name).
.IP
The default is an empty string, i.e., \*(``\*('',
which disables this feature.
However, when the \fBprint-on-error\fP action is invoked,
if the string is empty, then \*(``XTermError\*('' is used.
.IP
These error codes are handled:
ERROR_XERROR,
ERROR_XIOERROR and
ERROR_ICEERROR.
.TP 8
.B "printModeImmediate\fP (class \fBPrintModeImmediate\fP)"
When the \fBprint-immediate\fP action is invoked,
\fI\*n\fP prints the screen contents directly to a file.
You can use the \fBprintModeImmediate\fP resource to tell it to
use escape sequences to reconstruct the video attributes and colors.
This uses the same values as the \fBprintAttributes\fP resource.
The default is \*(``0\*(''.
.TP 8
.B "printModeOnXError\fP (class \fBPrintModeOnXError\fP)"
\fI\*N\fP implements the \fBprintFileOnXError\fP feature using
the printer feature, although the output is written directly to a file.
You can use the \fBprintModeOnXError\fP resource to tell it to
use escape sequences to reconstruct the video attributes and colors.
This uses the same values as the \fBprintAttributes\fP resource.
The default is \*(``0\*(''.
.TP 8
.B "printOptsImmediate\fP (class \fBPrintOptsImmediate\fP)"
Specify the range of text which is printed to a file when
the \fBprint-immediate\fP action is invoked.
.RS
.bP
If zero (0), then this selects the current (visible screen) plus the
saved lines, except if the alternate screen is being used.
In that case, only the alternate screen is selectd.
.bP
If nonzero,
the bits of this resource value (checked in descending order)
select the range:
.RS
.TP 3
8
selects the saved lines.
.TP 3
4
selects the alternate screen.
.TP 3
2
selects the normal screen.
.TP 3
1
selects the current screen,
which can be either the normal or alternate screen.
.RE
.RE
.IP
The default is \*(``9\*('', which selects the current visible screen
plus saved lines, with no special case for the alternated screen.
.TP 8
.B "printOptsOnXError\fP (class \fBPrintOptsOnXError\fP)"
Specify the range of text which is printed to a file when
the \fBprint-on-error\fP action is invoked.
The resource value is interpreted the same as in \fBprintOptsImmediate\fP.
.IP
The default is \*(``9\*('', which selects the current visible screen
plus saved lines, with no special case for the alternated screen.
.TP 8
.B "printerAutoClose\fP (class\fB PrinterAutoClose\fP)"
If \*(``true\*('', \fI\*n\fR will close the printer (a pipe) when the application switches
the printer offline with a Media Copy command.
The default is \*(``false\*(''.
.TP 8
.B "printerCommand\fP (class\fB PrinterCommand\fP)"
Specifies a shell command to which
.I \*n
will open a pipe when the first
MC (Media Copy) command is initiated.
The default is an empty string, i.e., \*(``\*(''.
If the resource value is given as an empty string, the printer is disabled.
.TP 8
.B "printerControlMode\fP (class\fB PrinterControlMode\fP)"
Specifies the printer control mode.
A \*(``1\*('' selects autoprint mode, which causes
.I \*n
to print a line from the screen when you move the cursor off that
line with a line feed, form feed or vertical tab character, or an
autowrap occurs.
Autoprint mode is overridden by printer controller mode (a \*(``2\*(''),
which causes all of the output to be directed to the printer.
The default is \*(``0\*(''.
.TP 8
.B "printerExtent\fP (class\fB PrinterExtent\fP)"
Controls whether a print page function will print the entire page (true), or
only the portion within the scrolling margins (false).
The default is \*(``false\*(''.
.TP 8
.B "printerFormFeed\fP (class\fB PrinterFormFeed\fP)"
Controls whether a form feed is sent to the printer at the end of a print
page function.
The default is \*(``false\*(''.
.TP 8
.B "printerNewLine\fP (class\fB PrinterNewLine\fP)"
Controls whether a newline is sent to the printer at the end of a print
page function.
The default is \*(``true\*(''.
.TP 8
.B "privateColorRegisters\fP (class\fB PrivateColorRegisters\fP)"
If \fI\*n\fR is configured to support ReGIS or SIXEL graphics,
this controls whether \fI\*n\fR 
allocates separate color registers for each sixel
device control string, e.g., for DECGCI.
If not true, color registers are allocated only once,
when the terminal is reset,
and color changes  in  any  graphic  affect all graphics.
The default is \*(``true\*(''.
.TP 8
.B "quietGrab\fP (class\fB QuietGrab\fP)"
Controls whether the cursor is repainted
when \fINotifyGrab\fP and \fINotifyUngrab\fP
event types are received during change of focus.
The default is \*(``false\*(''.
.TP 8
.B "regisDefaultFont\fP (class\fB RegisDefaultFont\fP)"
If \fI\*n\fR is configured to support ReGIS graphics,
this resource tells \fI\*n\fR which font to use if the ReGIS data does
not specify one.
No default value is specified;
\fI\*n\fR accepts a TrueType font specification
as in the \fBfaceName\fP resource.
.IP
If no value is specified,
\fI\*n\fR draws a bitmap indicating a missing character.
.TP 8
.B "regisScreenSize\fP (class\fB RegisScreenSize\fP)"
If \fI\*n\fR is configured to support ReGIS graphics,
this resource tells \fI\*n\fR the default size (in pixels) for these graphics,
which also sets the default coordinate space
to [0,0] (upper-left) and [\fIwidth\fP,\fIheight\fP] (lower-right).
.IP
The application using ReGIS may use the \*(``A\*('' option of
the \*(``S\*('' command to adjust the coordinate space or change the
addressable portion of the screen.
.IP
The default is \*(``1000x1000\*('' (given as \fIwidth\fP by \fIheight\fP).
.IP
\fI\*N\fR accepts a special resource value \*(``auto\*('',
which tells \fI\*n\fR to use the \fBdecTerminalID\fP resource to
set the default size based on the hardware terminal's limits.
Those limits are the same as for the \fBmaxGraphicSize\fP resource.
.TP 8
.B "renderFont\fP (class\fB RenderFont\fP)"
If \fI\*n\fR is built with the Xft library,
this controls whether the \fBfaceName\fR resource is used.
The default is \*(``default\*(''.
.IP
The resource values are strings, evaluated as booleans after startup.
.RS
.TP 5
false
.br
disable the feature and use the normal (bitmap) font.
.TP 5
true
.br
startup using the TrueType font specified by the \fBfaceName\fP and
\fBfaceSize\fP resource settings.
If there is no value for \fBfaceName\fP, disable the feature and use
the normal (bitmap) font.
.IP
After startup, you can still switch to/from the bitmap font using the
\*(``TrueType Fonts\*('' menu entry.
.TP 5
default
.br
startup using the normal (bitmap) font,
but enable the \*(``TrueType Fonts\*(''
menu entry to allow runtime switching to/from TrueType fonts.
.IP
If there is no \fBfaceName\fP resource set,
then runtime switching to TrueType fonts is disabled.
\fI\*N\fP has a separate  compiled-in value for \fBfaceName\fP
for the special case where \fBrenderFont\fP is \*(``default\*(''.
That is normally \*(``mono\*(''.
.RE
.TP 8
.B "resizeGravity\fP (class\fB ResizeGravity\fP)"
Affects the behavior when the window is resized to be taller or
shorter.
\fBNorthWest\fP
specifies that the top line of text on the screen stay fixed.
If the window
is made shorter, lines are dropped from the bottom; if the window is
made taller, blank lines are added at the bottom.
This is compatible
with the behavior in R4.
\fBSouthWest\fP (the default) specifies that
the bottom line of text on the screen stay fixed.
If the window is
made taller, additional saved lines will be scrolled down onto the
screen; if the window is made shorter, lines will be scrolled off the
top of the screen, and the top saved lines will be dropped.
.TP 8
.B "retryInputMethod\fP (class\fB RetryInputMethod\fP)"
Tells \fI\*n\fP how many times to retry,
in case the input-method server is not responding.
This is a different issue than unsupported preedit type, etc.
You may encounter retries if your X configuration (and its libraries)
are missing pieces.
Setting this resource to zero ``0'' will cancel the retrying.
The default is ``3''.
.TP 8
.B "reverseVideo\fP (class\fB ReverseVideo\fP)"
Specifies whether or not reverse video should be simulated.
The default is
\*(``false\*(''.
.IP
There are several aspects to reverse video in \fI\*n\fP:
.RS
.bP
The command-line \fB\-rv\fP option tells the X libraries to reverse
the foreground and background colors.
\fI\*N\fP's command-line options set resource values.
In particular, the X Toolkit sets the \fBreverseVideo\fP resource
when the \fB\-rv\fP option is used.
.bP
If the user has also used command-line options \fB\-fg\fP or \fB\-bg\fP
to set the foreground and background colors,
\fI\*n\fP does not see these options directly.
Instead,
it examines the resource values to reconstruct the command-line options,
and determine which of the colors is the user's intended foreground, etc.
Their actual values are irrelevant to the reverse video function;
some users prefer the X defaults (black text on a white background),
others prefer white text on a black background.
.bP
After startup,
the user can toggle the \*(``Enable Reverse Video\*('' menu entry.
This exchanges the current foreground and background colors
of the VT100 widget,
and repaints the screen.
Because of the X resource hierarchy,
the \fBreverseVideo\fP resource applies to more than the VT100 widget.
.RE
.IP
Programs running in an \fI\*n\fP can also use control sequences
to enable the VT100 reverse video mode.
These are independent of the \fBreverseVideo\fP resource and the menu entry.
\fI\*N\fP exchanges the current foreground and background colors
when drawing text affected by these control sequences.
.IP
Other control sequences can alter the foreground and background colors
which are used:
.RS
.bP
Programs can also use the ANSI color control sequences to set the
foreground and background colors.
.bP
Extensions to the ANSI color controls (such as 16-, 88- or 256-colors)
are treated similarly to the ANSI control.
.bP
Using other control sequences (the \*(``\fIdynamic colors\fR\*('' feature),
a program can change the foreground and background colors.
.RE
.TP 8
.B "reverseWrap\fP (class\fB ReverseWrap\fP)"
Specifies whether or not reverse-wraparound should be enabled.
This corresponds to \fI\*n\fP's private mode 45.
The default is
\*(``false\*(''.
.TP 8
.B "rightScrollBar\fP (class\fB RightScrollBar\fP)"
Specifies whether or not the scrollbar should be displayed on the right
rather than the left.
The default is \*(``false\*(''.
.TP 8
.B "saveLines\fP (class\fB SaveLines\fP)"
Specifies the number of lines to save beyond the top of the screen when a
scrollbar is turned on.
The default is \*(``64\*(''.
.TP 8
.B "scrollBar\fP (class\fB ScrollBar\fP)"
Specifies whether or not the scrollbar should be displayed.
The default is
\*(``false\*(''.
.TP 8
.B "scrollBarBorder\fP (class\fB ScrollBarBorder\fP)"
Specifies the width of the scrollbar border.
Note that this is drawn to overlap the border of the \fI\*n\fP window.
Modifying the scrollbar's border affects only the line between the VT100
widget and the scrollbar.
The default value is 1.
.TP 8
.B "scrollKey\fP (class\fB ScrollCond\fP)"
Specifies whether or not pressing a key should automatically cause the
scrollbar to go to the bottom of the scrolling region.
This corresponds to \fI\*n\fP's private mode 1011.
The default is
\*(``false\*(''.
.TP 8
.B "scrollLines\fP (class\fB ScrollLines\fP)"
Specifies the number of lines that the \fBscroll-back\fP and
\fBscroll-forw\fP actions should use as a default.
The default value is 1.
.TP 8
.B "scrollTtyOutput\fP (class\fB ScrollCond\fP)"
Specifies whether or not output to the terminal should automatically cause
the scrollbar to go to the bottom of the scrolling region.
The default is \*(``true\*(''.
.TP
.B "selectToClipboard\fP (class\fB SelectToClipboard\fP)"
Tells \fI\*n\fP whether to use the \fBPRIMARY\fP or \fBCLIPBOARD\fP for
\fBSELECT\fP tokens in the selection mechanism.
The \fBset-select\fP action can change this at runtime,
allowing the user to work with programs that handle only one of these
mechanisms.
The default is \*(``false\*('', which tells it to use \fBPRIMARY\fP.
.TP 8
.B "shiftFonts\fP (class\fB ShiftFonts\fP)"
Specifies whether to enable the actions
\fBlarger-vt-font()\fP and
\fBsmaller-vt-font()\fP, which are normally bound to
the shifted KP_Add and KP_Subtract.
The default is \*(``true\*(''.
.TP 8
.B "showBlinkAsBold\fP (class\fB ShowBlinkAsBold\fP)"
Tells \fI\*n\fP whether to display text with blink-attribute the same
as bold.
If \fI\*n\fP has not been configured to support blinking text,
the default is \*(``true\*('', which corresponds to older versions of \fI\*n\fP,
otherwise the default is \*(``false\*(''.
.TP 8
.B "showMissingGlyphs\fP (class\fB ShowMissingGlyphs\fP)"
Tells \fI\*n\fP whether to display a box outlining places where
a character has been used that the font does not represent.
The default is \*(``false\*(''.
.TP 8
.B "showWrapMarks\fP (class\fB ShowWrapMarks\fP)"
For debugging \fI\*n\fP and applications that may manipulate the
wrapped-line flag by writing text at the right margin,
show a mark on the right inner-border of the window.
The mark shows which lines have the flag set.
.TP 8
.B "signalInhibit\fP (class\fB SignalInhibit\fP)"
Specifies whether or not the entries in the \fBMain Options\fP menu for sending
signals to \fI\*n\fP should be disallowed.
The default is \*(``false\*(''.
.TP 8
.B "sixelScrolling\fP (class\fB SixelScrolling\fP)"
If \fI\*n\fR is configured to support SIXEL graphics,
this resource tells it whether to
scroll up one line at a time when sixels would be written
past the bottom line on the window.
The default is \*(``false\*(''.
.TP 8
.B "sixelScrollsRight\fP (class\fB SixelScrollsRight\fP)"
If \fI\*n\fR is configured to support SIXEL graphics,
this resource tells it whether to
scroll to the right as needed to keep the current position visible
rather than truncate the plot on the on the right.
The default is \*(``false\*(''.
.TP 8
.B "tekGeometry\fP (class\fB Geometry\fP)"
Specifies the preferred size and position of the Tektronix window.
There is no default for this resource.
.TP 8
.B "tekInhibit\fP (class\fB TekInhibit\fP)"
Specifies whether or not
the escape sequence to enter
Tektronix mode should be ignored.
The default is
\*(``false\*(''.
.TP 8
.B "tekSmall\fP (class\fB TekSmall\fP)"
Specifies whether or not the Tektronix mode window should start in its smallest
size if no explicit geometry is given.
This is useful when running \fI\*n\fP
on displays with small screens.
The default is \*(``false\*(''.
.TP 8
.B "tekStartup\fP (class\fB TekStartup\fP)"
Specifies whether or not \fI\*n\fP should start up in Tektronix mode.
The default is \*(``false\*(''.
.TP 8
.B "tiXtraScroll\fP (class\fB TiXtraScroll\fP)"
Specifies whether \fI\*n\fP should scroll to a new page when processing
the \fIti\fP termcap entry, i.e., the private modes 47, 1047 or 1049.
This is only in effect if \fBtiteInhibit\fP is \*(``true\*('',
because the intent of this option is to provide a picture of the full-screen
application's display on the scrollback without wiping out the text that
would be shown before the application was initialized.
The default for this resource is \*(``false\*(''.
.TP 8
.B "titeInhibit\fP (class\fB TiteInhibit\fP)"
Originally specified whether or not \fI\*n\fP
should remove \fIti\fP and \fIte\fP
termcap entries (used to switch between alternate screens on startup of many
screen-oriented programs) from the TERMCAP string.
.IP
TERMCAP is used rarely now, but \fI\*n\fP supports the feature on modern systems:
.RS
.bP
If set,
\fI\*n\fP also ignores the escape sequence to switch to the
alternate screen.
.bP
\fI\*N\fP supports terminfo in a different way, supporting composite control
sequences (also known as private modes) 1047, 1048 and 1049 which have the same
effect as the original 47 control sequence.
.RE
.IP
The default for this resource is \*(``false\*(''.
.TP 8
.B "titleModes\fP (class\fB TitleModes\fP)"
Tells \fI\*n\fP whether to accept or return
window- and icon-labels in ISO-8859-1
(the default) or UTF-8.
Either can be encoded in hexadecimal.
The default for this resource is \*(``0\*(''.
.IP
Each bit (bit \*(``0\*('' is 1, bit \*(``1\*('' is 2, etc.)
corresponds to one of the
parameters set by the title modes control sequence:
.RS
.TP 5
0
Set window/icon labels using hexadecimal
.TP 5
1
Query window/icon labels using hexadecimal
.TP 5
2
Set window/icon labels using UTF-8 (overrides \fButf8Title\fP resource).
.TP 5
3
Query window/icon labels using UTF-8
.RE
.TP 8
.B "translations\fP (class\fB Translations\fP)"
Specifies the key and button bindings for menus, selections, \*(``programmed
strings\*('', etc.
The \fBtranslations\fP resource,
which provides much of \fI\*n\fP's configurability,
is a feature of the X Toolkit Intrinsics library (Xt).
See the \fBActions\fP section.
.TP 8
.B "trimSelection\fP (class\fB TrimSelection\fP)"
If you set \fBhighlightSelection\fP,
you can see the text which is selected, including any trailing spaces.
Clearing the screen (or a line) resets it to a state containing no spaces.
Some lines may contain trailing spaces when an application writes them to
the screen.
However, you may not wish to paste lines with trailing spaces.
If this resource is true, \fI\*n\fP will trim trailing spaces from
text which is selected.
It does not affect spaces which result in a wrapped line, nor will it
trim the trailing newline from your selection.
The default is \*(``false\*(''.
.TP 8
.B "underLine\fP (class\fB UnderLine\fP)"
This specifies whether or not text with the underline attribute should be
underlined.
It may be desirable to disable underlining when color is being
used for the underline attribute.
The default is \*(``true\*(''.
.TP 8
.B "useClipping\fP (class\fB UseClipping\fP)"
Tell \fI\*n\fP whether to use clipping to keep
from producing dots outside the text drawing area.
Originally used to work around for overstriking effects,
this is also needed to work with some incorrectly-sized fonts.
The default is \*(``true\*(''.
.TP 8
.B "utf8\fP (class\fB Utf8\fP)"
This specifies whether \fI\*n\fP will run in UTF-8 mode.
If you set this resource, \fI\*n\fP also sets the \fBwideChars\fP resource as a side-effect.
The resource can be set via the menu entry \*(``UTF-8 Encoding\*(''.
The default is \*(``default\*(''.
.IP
\fI\*N\fP accepts either a keyword (ignoring case)
or the number shown in parentheses:
.RS
.TP 3
false (0)
UTF-8 mode is initially off.
The command-line option \fB+u8\fP sets the resource to this value.
Escape sequences for turning UTF-8 mode on/off are allowed.
.TP
true (1)
UTF-8 mode is initially on.
Escape sequences for turning UTF-8 mode on/off are allowed.
.TP
always (2)
The command-line option \fB\-u8\fP sets the resource to this value.
Escape sequences for turning UTF-8 mode on/off are ignored.
.TP
default (3)
This is the default value of the resource.
It is changed during initialization depending on
whether the \fBlocale\fP resource was set,
to false (0) or always (2).
See the \fBlocale\fR resource for additional discussion of non-UTF-8 locales.
.RE
.IP
If you want to set the value of \fButf8\fP, it should be in this range.
Other nonzero values are treated the same as \*(``1\*('',
i.e., UTF-8 mode is initially on, and
escape sequences for turning UTF-8 mode on/off are allowed.
.TP 8
.B "utf8Fonts\fP (class\fB Utf8Fonts\fP)"
See the discussion of the \fBlocale\fP resource.
This specifies whether \fI\*n\fP will use UTF-8 fonts specified via
resource patterns such as \*(``\fB*vt100.utf8Fonts.font\fP\*(''
or normal (ISO-8859-1) fonts via patterns such as \*(``\fB*vt100.font\fP\*(''.
The resource can be set via the menu entry \*(``\fBUTF-8 Fonts\fP\*(''.
The default is \*(``default\*(''.
.IP
\fI\*N\fP accepts either a keyword (ignoring case)
or the number shown in parentheses:
.RS
.TP
false (0)
Use the ISO-8859-1 fonts.
The menu entry is enabled, allowing the choice of fonts to be changed
at runtime.
.TP
true (1)
Use the UTF-8 fonts.
The menu entry is enabled, allowing the choice of fonts to be changed
at runtime.
.TP
always (2)
Always use the UTF-8 fonts.
This also disables the menu entry.
.TP
default (3)
At startup, the resource is set to true or false,
according to the effective value of the \fButf8\fP resource.
.RE
.TP 8
.B "utf8Latin1\fP (class\fB Utf8Latin1\fP)"
If true,
allow an ISO-8859-1 \fInormal\fP
font to be combined with an ISO-10646-1 font if the latter is given
via the \fB\-fw\fP option or its corresponding resource value.
The default is \*(``false\*(''.
.TP 8
.B "utf8SelectTypes\fP (class\fB Utf8SelectTypes\fP)"
Override \fI\*n\fP's default selection target list
(see \fBSELECT/PASTE\fP) for selections in wide-character (UTF-8) mode.
The default is an empty string, i.e., \*(``\*('',
which does not override anything.
.TP 8
.B "utf8Title\fP (class\fB Utf8Title\fP)"
Applications can set \fI\*n\fP's title by writing a control sequence.
Normally this control sequence follows the VT220 convention,
which encodes the string in ISO-8859-1 and
allows for an 8-bit string terminator.
If \fI\*n\fP is started in a UTF-8 locale,
it translates the ISO-8859-1 string to UTF-8 to work with the X libraries
which assume the string is UTF-8.
.IP
However, some users may wish to write a title string encoded in UTF-8.
The window manager is responsible for drawing window titles.
Some window managers (not all) support UTF-8 encoding of window titles.
Set this resource to \*(``true\*('' to allow UTF-8 encoded title strings.
That cancels the translation to UTF-8,
allowing UTF-8 strings to be displayed as is.
.IP
This feature is available as a menu entry, since it is related to
the particular applications you are running within \fI\*n\fP.
You can also use a control sequence
(see the discussion of \*(``Title Modes\*(''
in \fI\*N Control Sequences\fP), to set an equivalent flag.
The \fBtitleModes\fP resource sets the same value,
which overrides this resource.
.IP
The default is \*(``false\*(''.
.TP 8
.B "veryBoldColors\fP (class\fB VeryBoldColors\fP)"
Specifies whether to combine video attributes with colors specified by
\fBcolorBD\fR,
\fBcolorBL\fR,
\fBcolorIT\fR,
\fBcolorRV\fR, and
\fBcolorUL\fR.
The resource value is the sum of values for each attribute:
.RS 10
.nf
1 for reverse,
2 for underline,
4 for bold,
8 for blink, and
512 for italic
.fi
.RE
.IP
The default is \*(``0\*(''.
.TP 8
.B "visualBell\fP (class\fB VisualBell\fP)"
Specifies whether or not a visible bell (i.e., flashing) should be used instead
of an audible bell when Control-G is received.
The default is \*(``false\*('', which tells \fI\*n\fP to use an audible bell.
.TP 8
.B "visualBellDelay\fP (class\fB VisualBellDelay\fP)"
Number of milliseconds to delay when displaying a visual bell.
Default is 100.
If set to zero, no visual bell is displayed.
This is useful for very slow displays, e.g., an LCD display on a laptop.
.TP 8
.B "visualBellLine\fP (class\fB VisualBellLine\fP)"
Specifies whether to flash only the current line when displaying a visual bell
rather than flashing the entire screen:
The default is \*(``false\*('',
which tells \fI\*n\fP to flash the entire screen.
.TP 8
.B "vt100Graphics\fP (class\fB VT100Graphics\fP)"
This specifies whether \fI\*n\fP will interpret VT100 graphic character
escape sequences while in UTF-8 mode.
The default is \*(``true\*('', to provide support for various legacy applications.
.TP 8
.B "wideBoldFont\fP (class\fB WideBoldFont\fP)"
This option specifies the font to be used for displaying bold wide text.
By default,
it will attempt to use a font twice as wide as the font that will be used to
draw bold text.
If no double-width font is found, it will improvise, by stretching
the bold font.
.TP 8
.B "wideChars\fP (class\fB WideChars\fP)"
Specifies if \fI\*n\fP should respond to control sequences that
process 16-bit characters.
The default is \*(``false\*(''.
.TP 8
.B "wideFont\fP (class\fB WideFont\fP)"
This option specifies the font to be used for displaying wide text.
By default,
it will attempt to use a font twice as wide as the font that will be used to
draw normal text.
If no double-width font is found, it will improvise, by stretching
the normal font.
.TP 8
.B "ximFont\fP (class\fB XimFont\fP)"
This option specifies the font to be used for displaying the preedit string
in the \*(``OverTheSpot\*('' input method.
.IP
In \*(``OverTheSpot\*('' preedit type, the preedit (preconversion)
string is displayed at the position of the cursor.
It is the XIM server's responsibility to display the preedit string.
The XIM client must inform the XIM server of the cursor position.
For best results, the preedit string must be displayed with a proper font.
Therefore, \fI\*n\fP informs the XIM server of the proper font.
The font is be supplied by a "fontset", whose default value is \*(``*\*(''.
This matches every font, the X library automatically chooses fonts with
proper charsets.
The \fBximFont\fP resource is provided to override this default font setting.
.\"
.SS Tek4014 Widget Resources
.PP
The following resources are specified
as part of the \fItek4014\fP widget (class \fITek4014\fP).
These are specified by patterns such as \*(``\fB__default_class__.tek4014.\fP\fINAME\fP\*('':
.TP 8
.B "font2\fP (class\fB Font\fP)"
Specifies font number 2 to use in the Tektronix window.
.TP 8
.B "font3\fP (class\fB Font\fP)"
Specifies font number 3 to use in the Tektronix window.
.TP 8
.B "fontLarge\fP (class\fB Font\fP)"
Specifies the large font to use in the Tektronix window.
.TP 8
.B "fontSmall\fP (class\fB Font\fP)"
Specifies the small font to use in the Tektronix window.
.TP 8
.B "ginTerminator\fP (class\fB GinTerminator\fP)"
Specifies what character(s) should follow a GIN report or status report.
The possibilities are \*(``none\*('', which sends no terminating characters,
\*(``CRonly\*('', which sends CR, and \*(``CR&EOT\*('', which sends both CR and EOT.
The default is \*(``none\*(''.
.TP 8
.B "height\fP (class\fB Height\fP)"
Specifies the height of the Tektronix window in pixels.
.TP 8
.B "initialFont\fP (class\fB InitialFont\fP)"
Specifies which of the four Tektronix fonts to use initially.
Values are the same as for the \fBset-tek-text\fP action.
The default is \*(``large\*(''.
.TP 8
.B "width\fP (class\fB Width\fP)"
Specifies the width of the Tektronix window in pixels.
.\"
.SS Menu Resources
.PP
The resources that may be specified for the various menus are described in
the documentation for the Athena \fBSimpleMenu\fP widget.
The name and classes of the entries in each of the menus are listed below.
Resources named \*(``\fBline\fR\fIN\fR\*('' where \fIN\fR is a number
are separators with class \fBSmeLine\fR.
.PP
As with all X resource-based widgets,
the labels mentioned are customary defaults for the application.
.
.PP
The \fBMain Options\fP menu (widget name \fImainMenu\fP)
has the following entries:
.TP 8
.B "toolbar\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-toolbar(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "securekbd\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsecure()\fP action.
.TP 8
.B "allowsends\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-send-events(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "redraw\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBredraw()\fP action.
.TP 8
.B "logging\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBlogging(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "print-immediate\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBprint-immediate()\fP action.
.TP 8
.B "print-on-error\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBprint-on-error()\fP action.
.TP 8
.B "print\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBprint()\fP action.
.TP 8
.B "print-redir\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBprint-redir()\fP action.
.TP 8
.B "dump-html\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBdump-html()\fP action.
.TP 8
.B "dump-svg\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBdump-svg()\fP action.
.TP 8
.B "8-bit-control\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-8-bit-control(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "backarrow\ key\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-backarrow(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "num-lock\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-num-lock(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "alt-esc\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBalt-sends-escape(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "meta-esc\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBmeta-sends-escape(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "delete-is-del\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBdelete-is-del(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "oldFunctionKeys\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-old-function-keys(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "hpFunctionKeys\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-hp-function-keys(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "scoFunctionKeys\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-sco-function-keys(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "sunFunctionKeys\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-sun-function-keys(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "sunKeyboard\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsunKeyboard(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "suspend\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsend-signal(\fP\fItstp\fP\fB)\fP action on systems that
support job control.
.TP 8
.B "continue\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsend-signal(\fP\fIcont\fP\fB)\fP action on systems that
support job control.
.TP 8
.B "interrupt\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsend-signal(\fP\fIint\fP\fB)\fP action.
.TP 8
.B "hangup\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsend-signal(\fP\fIhup\fP\fB)\fP action.
.TP 8
.B "terminate\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsend-signal(\fP\fIterm\fP\fB)\fP action.
.TP 8
.B "kill\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsend-signal(\fP\fIkill\fP\fB)\fP action.
.TP 8
.B "quit\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBquit()\fP action.
.
.PP
The \fBVT Options\fP menu (widget name \fIvtMenu\fP)
has the following entries:
.TP 8
.B "scrollbar\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-scrollbar(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "jumpscroll\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-jumpscroll(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "reversevideo\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-reverse-video(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "autowrap\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-autowrap(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "reversewrap\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-reversewrap(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "autolinefeed\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-autolinefeed(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "appcursor\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-appcursor(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "appkeypad\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-appkeypad(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "scrollkey\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-scroll-on-key(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "scrollttyoutput\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-scroll-on-tty-output(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "allow132\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-allow132(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "cursesemul\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-cursesemul(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "keepSelection\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-keep-selection(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "selectToClipboard\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-keep-clipboard(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "visualbell\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-visual-bell(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "bellIsUrgent\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-bellIsUrgent(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "poponbell\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-pop-on-bell(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "cursorblink\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-cursorblink(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "titeInhibit\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-titeInhibit(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "activeicon\fP (class\fB SmeBSB\fP)"
This entry toggles active icons on and off if this feature was
compiled into \fI\*n\fP.
It is enabled only if \fI\*n\fP
was started with the command line option +ai or the \fBactiveIcon\fP
resource is set to \*(``true\*(''.
.TP 8
.B "softreset\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBsoft-reset()\fP action.
.TP 8
.B "hardreset\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBhard-reset()\fP action.
.TP 8
.B "clearsavedlines\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBclear-saved-lines()\fP action.
.TP 8
.B "tekshow\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-visibility(\fP\fItek,toggle\fP\fB)\fP action.
.TP 8
.B "tekmode\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-terminal-type(\fP\fItek\fP\fB)\fP action.
.TP 8
.B "vthide\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-visibility(\fP\fIvt,off\fP\fB)\fP action.
.TP 8
.B "altscreen\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-altscreen(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "sixelScrolling\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-sixel-scrolling(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "privateColorRegisters\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-private-colors(\fP\fItoggle\fP\fB)\fP action.
.
.PP
The \fBVT Fonts\fP menu (widget name \fIfontMenu\fP)
has the following entries:
.TP 8
.B "fontdefault\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fId\fP\fB)\fP action,
setting the font using the \fBfont\fP (default) resource,
e.g., \*(``Default\*('' in the menu.
.TP 8
.B "font1\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fI1\fP\fB)\fP action,
setting the font using the \fBfont1\fP resource,
e.g., \*(``Unreadable\*('' in the menu.
.TP 8
.B "font2\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fI2\fP\fB)\fP action,
setting the font using the \fBfont2\fP resource,
e.g., \*(``Tiny\*('' in the menu.
.TP 8
.B "font3\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fI3\fP\fB)\fP action,
setting the font using the \fBfont3\fP resource,
e.g., \*(``Small\*('' in the menu.
.TP 8
.B "font4\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fI4\fP\fB)\fP action,
letting the font using the \fBfont4\fP resource,
e.g., \*(``Medium\*('' in the menu.
.TP 8
.B "font5\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fI5\fP\fB)\fP action,
letting the font using the \fBfont5\fP resource,
e.g., \*(``Large\*('' in the menu.
.TP 8
.B "font6\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fI6\fP\fB)\fP action,
letting the font using the \fBfont6\fP resource,
e.g., \*(``Huge\*('' in the menu.
.TP 8
.B "fontescape\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fIe\fP\fB)\fP action.
.TP 8
.B "fontsel\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-vt-font(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "allow-bold-fonts\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-bold-fonts(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "font-linedrawing\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-font-linedrawing(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "font-packed\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-font-packed(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "font-doublesize\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-font-doublesize(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "render-font\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-render-font(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "utf8-fonts\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-utf8-fonts(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "utf8-mode\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-utf8-mode(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "utf8-title\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-utf8-title(\fP\fIs\fP\fB)\fP action.
.TP 8
.B "allow-color-ops\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-color-ops(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "allow-font-ops\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-fonts-ops(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "allow-tcap-ops\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-tcap-ops(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "allow-title-ops\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-title-ops(\fP\fItoggle\fP\fB)\fP action.
.TP 8
.B "allow-window-ops\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBallow-window-ops(\fP\fItoggle\fP\fB)\fP action.
.
.PP
The \fBTek Options\fP menu (widget name \fItekMenu\fP)
has the following entries:
.TP 8
.B "tektextlarge\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-tek-text(\fP\fIlarge\fP\fB)\fP action.
.TP 8
.B "tektext2\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-tek-text(\fP\fI2\fP\fB)\fP action.
.TP 8
.B "tektext3\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-tek-text(\fP\fI3\fP\fB)\fP action.
.TP 8
.B "tektextsmall\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-tek-text(\fP\fIsmall\fP\fB)\fP action.
.TP 8
.B "tekpage\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBtek-page()\fP action.
.TP 8
.B "tekreset\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBtek-reset()\fP action.
.TP 8
.B "tekcopy\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBtek-copy()\fP action.
.TP 8
.B "vtshow\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-visibility(\fP\fIvt,toggle\fP\fB)\fP action.
.TP 8
.B "vtmode\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-terminal-type(\fP\fIvt\fP\fB)\fP action.
.TP 8
.B "tekhide\fP (class\fB SmeBSB\fP)"
This entry invokes the \fBset-visibility(\fP\fItek,toggle\fP\fB)\fP action.
.\"
.SS Scrollbar Resources
.PP
The following resources are useful when specified for the Athena Scrollbar
widget:
.TP 8
.B "thickness\fP (class\fB Thickness\fP)"
Specifies the width in pixels of the scrollbar.
.TP 8
.B "background\fP (class\fB Background\fP)"
Specifies the color to use for the background of the scrollbar.
.TP 8
.B "foreground\fP (class\fB Foreground\fP)"
Specifies the color to use for the foreground of the scrollbar.
The \*(``thumb\*(''
of the scrollbar is a simple checkerboard pattern alternating pixels for
foreground and background color.
.
.
.SH "POINTER USAGE"
.
.PP
Once the VT\fIxxx\fP window is created,
.I \*n
allows you to select text and copy it within the same or other windows
using the \fIpointer\fP or the keyboard.
.
.PP
A \*(``pointer\*('' could be a mouse, touchpad or similar device.
X applications generally do not care,
since they see only \fIbutton events\fP which have
.bP
position and
.bP
button up/down state
.PP
\fI\*N\fP can see these events as long as it has \fIfocus\fP.
.PP
The keyboard also supplies events, but it is less flexible than
the pointer for selecting/copying text.
.PP
\fIEvents\fP are applied to \fIactions\fP using the \fBtranslations\fP resource.
See \fBActions\fP for a complete list, and \fBDefault Key Bindings\fP
for the built-in set of \fBtranslations\fP resources.
.
.SS "Selection Functions"
.PP
The selection functions are invoked when the pointer buttons are used with no
modifiers, and when they are used with the \*(``shift\*('' key.
The assignment of the functions described below to keys and buttons may
be changed through the resource database; see \fBActions\fP below.
.
.TP 5
Pointer button one (usually left)
is used to save text into the cut buffer:
.NS
~Meta <Btn1Down>:\fBselect-start\fP()
.NE
.IP
Move the cursor to beginning of the text,
and then hold the button down while moving the cursor to the end of the region
and releasing the button.
The selected text is highlighted and is saved in the global \fIcut buffer\fP
and made the selection when the button is released:
.NS
<BtnUp>:\fBselect-end\fP(\fBSELECT\fP, CUT_BUFFER0) \n\
.NE
.IP
Normally (but see the discussion of \fBon2Clicks\fP, etc):
.RS
.bP
Double-clicking selects by words.
.bP
Triple-clicking
selects by lines.
.bP
Quadruple-clicking goes back to characters, etc.
.RE
.IP
Multiple-click is determined by the time from button up to
button down, so you can change the selection unit in the middle of a selection.
Logical words and lines selected by double- or triple-clicking may wrap
across more than one screen line if lines were wrapped by \fI\*n\fP
itself rather than by the application running in the window.
If the key/button bindings specify that an X selection is to be made,
\fI\*n\fP will leave the selected text highlighted for as long as it
is the selection owner.
.
.TP 5
Pointer button two (usually middle)
\*(``types\*('' (\fIpastes\fP) the text from
the given selection, if any,
otherwise from the cut buffer, inserting it as keyboard input:
.NS
~Ctrl ~Meta <Btn2Up>:\fB\fBinsert-selection\fP\fP(\fBSELECT\fP, CUT_BUFFER0)
.NE
.
.TP 5
Pointer button three (usually right)
\fIextends\fP the current selection.
.NS
~Ctrl ~Meta <Btn3Down>:\fB\fBstart-extend\fP\fP()
.NE
.IP
(Without loss of generality,
you can swap \*(``right\*('' and \*(``left\*('' everywhere in the rest of this
paragraph.)  If pressed while closer to
the right edge of the selection than the left, it extends/contracts the
right edge of the selection.
If you contract the selection past
the left edge of the selection,
.I \*n
assumes you really meant the left edge, restores the original selection, then
extends/contracts the left edge of the selection.
Extension starts in the
selection unit mode
that the last selection or extension was performed in; you can multiple-click
to cycle through them.
.
.PP
By cutting and pasting pieces of text without trailing new lines,
you can take text from several places in different windows and form a command
to the shell, for example, or take output from a program and insert it into
your favorite editor.
Since cut buffers are globally shared among different applications,
you may regard each as a \*(``file\*('' whose contents you know.
The terminal emulator and other text programs should be treating it as if it
were a text file, i.e., the text is delimited by new lines.
.
.SS "Scrolling"
.PP
The scroll region displays the position and amount of text currently showing
in the window (highlighted) relative to the amount of text actually saved.
As more text is saved (up to the maximum), the size of the highlighted area
decreases.
.
.PP
Clicking button one with the pointer in the scroll region moves the
adjacent line to the top of the display window.
.
.PP
Clicking button three moves the top line of the display window down to the
pointer position.
.
.PP
Clicking button two moves the display to a position in the saved text
that corresponds to the pointer's position in the scrollbar.
.
.SS "Tektronix Pointer"
.PP
Unlike the VT\fIxxx\fP window, the Tektronix window does not allow the copying of
text.
It does allow Tektronix GIN mode, and in this mode
the cursor will change from an arrow to a cross.
Pressing any key will send that key and the current coordinate of the
cross cursor.
Pressing button one, two, or three will return the letters \*(``l\*('', \*(``m\*('', and
\*(``r\*('', respectively.
If the \*(``shift\*('' key is pressed when a pointer button is pressed, the corresponding
upper case letter is sent.
To distinguish a pointer button from a key, the high bit of the character is
set (but this is bit is normally stripped unless the terminal mode is RAW;
see
.IR tty (4)
for details).
.
.
.SH SELECT/PASTE
X clients provide select and paste support by responding to requests conveyed
by the server.
.SS PRIMARY
When configured to use the primary selection,
(the default) \fI\*n\fP can
provide the selection data in ways which help to retain character
encoding information as it is pasted.
.PP
A user \*(``selects\*('' text on \*n, which highlights the selected text.
A subsequent \*(``paste\*('' to another client forwards a request to the client owning
the selection.
If \fI\*n\fP owns the primary selection, it makes the data
available in the form of one or more \*(``selection targets\*(''.
If it does not own the primary selection,
e.g., if it has released it or another client has
asserted ownership, it relies on cut-buffers to pass the data.
But cut-buffers handle only ISO-8859-1 data
(officially \- some clients ignore the rules).
.
.SS CLIPBOARD
When configured to use the clipboard (using the \fBselectToClipboard\fP resource),
the problem with persistence of ownership is bypassed.
Otherwise, there is no difference regarding the data which can be
passed via selection.
.PP
The \fBPRIMARY\fP token is a standard X feature, documented in the ICCCM
(\fIInter-Client Communication Conventions Manual\fR),
which states
.RS
.PP
The selection named by the atom \fBPRIMARY\fP is used for all commands that take only a single argument and is the principal means of communication between clients that use the selection mechanism.
.RE
.SS SELECT
.PP
However, many applications use \fBCLIPBOARD\fP in imitation of other windowing
systems.
The \fBselectToClipboard\fP resource (and corresponding menu entry
\fBSelect to Clipboard\fP) introduce the SELECT token (known only
to \fI\*n\fP) which chooses between the \fBPRIMARY\fP and \fBCLIPBOARD\fP tokens.
.PP
Without using this feature, one can use workarounds such as the
\fIxclip\fP program to show the contents of the X clipboard within an
\fI\*n\fP window.
.
.SS Selection Targets
The different types of data which are passed depend on what the receiving
client asks for.
These are termed \fIselection targets\fP.
.PP
When asking for the selection data,
\fI\*n\fP tries the following types in this order:
.RS 5
.TP 5
UTF8_STRING
This is an XFree86 extension, which denotes that the data is encoded in UTF-8.
When \fI\*n\fP is built with wide-character support,
it both accepts and provides this type.
.TP 5
TEXT
the text is in the encoding which corresponds to your current locale.
.TP 5
.\" see xc/doc/specs/CTEXT/ctext.tbl.ms
.\" (it says the data is stored as a type of ISO 2022)
COMPOUND_TEXT
this is a format for multiple character set data, such as multi-lingual text.
It can store UTF-8 data as a special case.
.TP 5
STRING
This is Latin 1 (ISO-8859-1) data.
.RE
.PP
The middle two (TEXT and COMPOUND_TEXT) are added if \fI\*n\fP
is configured with the \fBi18nSelections\fP resource set to \*(``true\*(''.
.PP
UTF8_STRING is preferred (therefore first in the list)
since \fI\*n\fP stores text as Unicode data when
running in wide-character mode, and no translation is needed.
On the other hand, TEXT and COMPOUND_TEXT may require translation.
If the translation is incomplete, they will insert X's \*(``defaultString\*(''
whose value cannot be set, and may simply be empty.
\fI\*N\fP's \fBdefaultString\fP resource specifies the string to
use for incomplete translations of the UTF8_STRING.
.PP
You can alter the types which \fI\*n\fP tries using the
\fBeightBitSelectTypes\fP or \fButf8SelectTypes\fP resources.
For instance, you might have some specific locale setting
which does not use UTF-8 encoding.
The resource value is a comma-separated list of the selection targets,
which consist of the names shown.
You can use the special name I18N
to denote the optional inclusion of TEXT and COMPOUND_TEXT.
The names are matched ignoring case, and can be abbreviated.
The default list can be expressed in several ways, e.g.,
.sp
.RS
.nf
UTF8_STRING,I18N,STRING
utf8,i18n,string
u,i,s
.fi
.RE
.
.SS Mouse Protocol
.PP
Applications can send escape sequences to \fI\*n\fP to cause it to send
escape sequences back to the computer when you press a pointer button,
or even (depending on which escape sequence) send escape sequences back
to the computer as you move the pointer.
.PP
These escape sequences and the responses, called the \fImouse protocol\fP,
are documented in \fIXTerm Control Sequences\fP.
They do not appear in the \fIactions\fP invoked by the \fBtranslations\fP
resource because the resource does not change while you run \fI\*n\fP,
whereas applications can change the mouse prototol
(i.e., enable, disable, use different modes).
.PP
However, the mouse protocol is interpreted within the \fIactions\fP
that are usually associated with the pointer buttons.
\fI\*N\fP ignores the mouse protocol in the \fBinsert-selection\fP action
if the shift-key is pressed at the same time.
It also modifies a few other actions if the shift-key is pressed,
e.g., suppressing the response with the pointer position,
though not eliminating changes to the selected text.
.
.SH MENUS
.
.PP
\fI\*N\fP has four menus, named
.IR mainMenu ,
.IR vtMenu ,
.IR fontMenu ,
and
.IR tekMenu .
Each menu pops up under the correct combinations of key and button presses.
Each menu is divided into sections, separated by a horizontal line.
Some menu entries correspond to modes that can be altered.
A check mark appears next to a mode that is currently active.
Selecting one of these modes toggles its state.
Other menu entries are commands;
selecting one of these performs the indicated function.
.PP
All of the menu entries correspond to X actions.
In the list below, the menu label is shown followed by the action's
name in parenthesis.
.
.\" ************************************************************************
.SS "Main Options"
.PP
The \fI\*n\fP \fImainMenu\fP pops up
when the \*(``control\*('' key and pointer button one are pressed in a window.
This menu contains items that apply to both the VT\fIxxx\fP and Tektronix windows.
There are several sections:
.TP
Commands for managing X events:
.RS
.TP
.B Toolbar\fP (resource \fBtoolbar\fP)
Clicking on the \*(``Toolbar\*('' menu entry hides the toolbar if it is visible,
and shows it if it is not.
.TP
.B Secure Keyboard\fP (resource \fBsecurekbd\fP)
The \fBSecure Keyboard\fP
mode is helpful when typing in passwords or other sensitive data in an
unsecure environment
(see \fBSECURITY\fP below, but read the limitations carefully).
.TP
.B Allow SendEvents\fP (resource \fBallowsends\fP)
Specifies whether or not synthetic key and button events generated using
the X protocol SendEvent request should be interpreted or discarded.
This corresponds to the \fBallowSendEvents\fP resource.
.TP
.B Redraw Window\fP (resource \fBredraw\fP)
Forces the X display to repaint;
useful in some environments.
.RE
.TP
Commands for capturing output:
.RS
.TP
.B Log to File\fP (resource \fBlogging\fP)
Captures text sent to the screen in a logfile,
as in the \fB\-l\fP logging option.
.TP
.B Print-All Immediately\fP (resource \fBprint-immediate\fP)
Invokes the \fBprint-immediate\fP action,
sending the text of the current window directly to a file,
as specified by the
\fBprintFileImmediate\fP,
\fBprintModeImmediate\fP and
\fBprintOptsImmediate\fP
resources.
.TP
.B Print-All on Error\fP (resource \fBprint-on-error\fP)
Invokes the \fBprint-on-error\fP action,
which toggles a flag telling \fI\*n\fP that if it exits with an X error,
to send the text of the current window directly to a file,
as specified by the
\fBprintFileOnXError\fP,
\fBprintModeOnXError\fP and
\fBprintOptsOnXError\fP
resources.
.TP
.B Print Window\fP (resource \fBprint\fP)
Sends the text of the current window to the program given in the
\fBprinterCommand\fP resource.
.TP
.B Redirect to Printer\fP (resource \fBprint-redir\fP)
This sets the \fBprinterControlMode\fR to 0 or 2.
You can use this to turn the printer on as if an application had sent
the appropriate control sequence.
It is also useful for switching the printer
off if an application turns it on without resetting the print control mode.
.TP
.B XHTML Screen Dump\fP (resource \fBdump-html\fP)
Available only when compiled with screen dump support.
Invokes the \fBdump-html\fP action.
This creates an XHTML file matching the contents of the current screen,
including the border, internal border, colors and most attributes: bold, italic,
underline, faint, strikeout, reverse; blink is rendered as white-on-red;
double underline is rendered the same as underline since
there is no portable equivalent
in CSS 2.2.
.IP
The font is whatever your browser uses for preformatted (<pre>)
elements. The XHTML file references a cascading style sheet (CSS)
named \*(``\fBxterm.css\fP\*('' that you can create to select a font or
override properties.
.RS
.LP
The following CSS selectors are used with
the expected default behavior in the XHTML file:
.sp
\fI.ul\fP for underline,
.br
\fI.bd\fP for bold,
.br
\fI.it\fP for italic,
.br
\fI.st\fP for strikeout,
.br
\fI.lu\fP for strikeout combined with underline.
.LP
In addition you may use
.sp
\fI.ev\fP to affect even numbered lines and
.br
\fI.od\fP to affect odd numbered lines.
.RE
.IP
Attributes faint, reverse and blink are implemented as \fIstyle\fP attributes
setting color properties. All colors are specified as RGB percentages
in order to support displays with 10 bits per RGB.
.IP
The name of the file will be
.NS
\fBxterm.\fIyyyy\fB\.\fIMM\fB\.\fIdd\fB.\fIhh\fB.\fImm\fB.\fIss\fR\.xhtml
.NE
.IP
where
.IR yyyy ,
.IR MM ,
.IR dd ,
.IR hh ,
.I mm
and
.I ss
are the year, month, day, hour, minute and second when the screen dump was performed
(the file is created in the directory
.I \*n
is started in, or the home directory for a login
.IR \*n ).
.IP
The \fBdump-html\fP action can also be triggered using the Media Copy
control sequence CSI 1 0 i, for example from a shell script with
.NS
printf '\\033[10i'
.NE
.sp
Only the UTF-8 encoding is supported.
.TP
.B SVG Screen Dump\fP (resource \fBdump-svg\fP)
Available only when compiled with screen dump support.
Invokes the \fBdump-svg\fP action.
This creates a Scalable Vector Graphics (SVG) file matching
the contents of the current screen, including the border,
internal border, colors and most attributes: bold, italic,
underline, double underline, faint, strikeout, reverse;
blink is rendered as white-on-red.
The font is whatever your renderer uses for the \fImonospace\fP font-family.
All colors are specified as RGB percentages
in order to support displays with 10 bits per RGB.
.IP
The name of the file will be
.NS
\fBxterm.\fIyyyy\fB\.\fIMM\fB\.\fIdd\fB.\fIhh\fB.\fImm\fB.\fIss\fR\.svg
.NE
.IP
where
.IR yyyy ,
.IR MM ,
.IR dd ,
.IR hh ,
.I mm
and
.I ss
are the year, month, day, hour, minute and second when the screen dump was performed
(the file is created in the directory
.I \*n
is started in, or the home directory for a login
.IR \*n ).
.IP
The \fBdump-svg\fP action can also be triggered using the Media Copy
control sequence CSI 1 1 i, for example from a shell script with
.NS
printf '\\033[11i'
.NE
.sp
Only the UTF-8 encoding is supported.
.RE
.TP
Modes for setting keyboard style:
.RS
.TP
.B 8-Bit Controls\fP (resource \fB8-bit-control\fP)
Enabled for VT220 emulation, this controls whether \fI\*n\fP will send
8-bit control sequences rather than using 7-bit (ASCII) controls,
e.g., sending a byte in the range 128-159 rather than the escape character
followed by a second byte.
\fI\*N\fP always interprets both 8-bit and 7-bit control sequences
(see \fI\*N Control Sequences\fP).
This corresponds to the \fBeightBitControl\fP resource.
.TP
.B Backarrow Key (BS/DEL)\fP (resource \fBbackarrow\ key\fP)
Modifies the behavior of the backarrow key, making it transmit
either a backspace (8)
or delete (127) character.
This corresponds to the \fBbackarrowKey\fP resource.
.TP
.B Alt/NumLock Modifiers\fP (resource \fBnum-lock\fP)
Controls the treatment of Alt- and NumLock-key modifiers.
This corresponds to the \fBnumLock\fP resource.
.TP
.B Meta Sends Escape\fP (resource \fBmeta-esc\fP)
Controls whether \fIMeta\fP keys are converted into a two-character
sequence with the character itself preceded by ESC.
This corresponds to the \fBmetaSendsEscape\fP resource.
.TP
.B Delete is DEL\fP (resource \fBdelete-is-del\fP)
Controls whether the Delete key on the editing keypad should send DEL (127)
or the VT220-style Remove escape sequence.
This corresponds to the \fBdeleteIsDEL\fP resource.
.TP
.B Old Function-Keys\fP (resource \fBoldFunctionKeys\fP)
.TP
.B HP Function-Keys\fP (resource \fBhpFunctionKeys\fP)
.TP
.B SCO Function-Keys\fP (resource \fBscoFunctionKeys\fP)
.TP
.B Sun Function-Keys\fP (resource \fBsunFunctionKeys\fP)
.TP
.B VT220 Keyboard\fP (resource \fBsunKeyboard\fP)
These act as a radio-button, selecting one style for the keyboard layout.
The layout corresponds to more than one resource setting:
\fBsunKeyboard\fP,
\fBsunFunctionKeys\fP,
\fBscoFunctionKeys\fP and
\fBhpFunctionKeys\fP.
.RE
.TP
Commands for process signalling:
.RS
.TP
.B Send STOP Signal\fP (resource \fBsuspend\fP)
.TP
.B Send CONT Signal\fP (resource \fBcontinue\fP)
.TP
.B Send INT Signal\fP (resource \fBinterrupt\fP)
.TP
.B Send HUP Signal\fP (resource \fBhangup\fP)
.TP
.B Send TERM Signal\fP (resource \fBterminate\fP)
.TP
.B Send KILL Signal\fP (resource \fBkill\fP)
These send the SIGTSTP, SIGCONT, SIGINT, SIGHUP, SIGTERM and SIGKILL
signals respectively, to the process group of the process running under
.I \*n
(usually the shell).
The \fBSIGCONT\fP
function is especially useful if the user has accidentally typed CTRL-Z,
suspending the process.
.TP
.B Quit\fP (resource \fBquit\fP)
Stop processing X events except to support the \fB-hold\fP option,
and then send a SIGHUP signal to the
process group of the process running under
.I \*n
(usually the shell).
.RE
.PP
.
.\" ************************************************************************
.SS "VT Options"
.PP
The
.I \*n
.I vtMenu
sets various modes in the VT\fIxxx\fP emulation, and is popped up when the
\*(``control\*('' key and pointer button two are pressed in the VT\fIxxx\fP window.
.TP
VT\fIxxx\fP Modes:
.RS
.
.TP
.B Enable Scrollbar\fP (resource \fBscrollbar\fP)
Enable (or disable) the scrollbar.
This corresponds to the \fB\-sb\fP option and the \fBscrollBar\fP resource.
.
.TP
.B Enable Jump Scroll\fP (resource \fBjumpscroll\fP)
Enable (or disable) jump scrolling.
This corresponds to the \fB\-j\fP option and the \fBjumpScroll\fP resource.
.
.TP
.B Enable Reverse Video\fP (resource \fBreversevideo\fP)
Enable (or disable) reverse-video.
This corresponds to the \fB\-rv\fP option and the \fBreverseVideo\fP resource.
.
.TP
.B Enable Auto Wraparound\fP (resource \fBautowrap\fP)
Enable (or disable) auto-wraparound.
This corresponds to the \fB\-aw\fP option and the \fBautoWrap\fP resource.
.
.TP
.B Enable Reverse Wraparound\fP (resource \fBreversewrap\fP)
Enable (or disable) reverse wraparound.
This corresponds to the \fB\-rw\fP option and the \fBreverseWrap\fP resource.
.
.TP
.B Enable Auto Linefeed\fP (resource \fBautolinefeed\fP)
Enable (or disable) auto-linefeed.
This is the VT102 NEL function,
which causes the emulator to emit a linefeed after each carriage return.
There is no corresponding command-line option or resource setting.
.
.TP
.B Enable Application Cursor Keys\fP (resource \fBappcursor\fP)
Enable (or disable) application cursor keys.
This corresponds to the \fBappcursorDefault\fP resource.
There is no corresponding command-line option.
.
.TP
.B Enable Application Keypad\fP (resource \fBappkeypad\fP)
Enable (or disable) application keypad keys.
This corresponds to the \fBappkeypadDefault\fP resource.
There is no corresponding command-line option.
.
.TP
.B Scroll to Bottom on Key Press\fP (resource \fBscrollkey\fP)
Enable (or disable) scrolling to the bottom of the scrolling region on a keypress.
This corresponds to the \fB\-sk\fP option and the \fBscrollKey\fP resource.
.IP
As a special case, the XON / XOFF keys (control/S and control/Q) are ignored.
.
.TP
.B Scroll to Bottom on Tty Output\fP (resource \fBscrollttyoutput\fP)
Enable (or disable) scrolling to the bottom of the scrolling region on output to the terminal.
This corresponds to the \fB\-si\fP option and the \fBscrollTtyOutput\fP resource.
.
.TP
.B Allow 80/132 Column Switching\fP (resource \fBallow132\fP)
Enable (or disable) switching between 80 and 132 columns.
This corresponds to the \fB\-132\fP option and the \fBc132\fP resource.
.
.TP
.B Keep Selection\fP (resource \fBkeepSelection\fP)
Tell \fI\*n\fP whether to disown the selection when it stops highlighting it,
e.g., when an application modifies the display so that it no longer matches
the text which has been highlighted.
As long as \fI\*n\fP continues to own the selection,
it can provide the corresponding text to other clients via cut/paste.
This corresponds to the \fBkeepSelection\fP resource.
There is no corresponding command-line option.
.
.TP
.B Select to Clipboard\fP (resource \fBselectToClipboard\fP)
Tell \fI\*n\fP whether to use the \fBPRIMARY\fP or \fBCLIPBOARD\fP
for \fBSELECT\fP tokens in the \fBtranslations\fP resource which
maps keyboard and mouse actions to select/paste actions.
This corresponds to the \fBselectToClipboard\fP resource.
There is no corresponding command-line option.
.
.TP
.B Enable Visual Bell\fP (resource \fBvisualbell\fP)
Enable (or disable) visible bell (i.e., flashing) instead of an audible bell.
This corresponds to the \fB\-vb\fP option and the \fBvisualBell\fP resource.
.
.TP
.B Enable Bell Urgency\fP (resource \fBbellIsUrgent\fP)
Enable (or disable) Urgency window manager hint when Control-G is received.
This corresponds to the \fBbellIsUrgent\fP resource.
.
.TP
.B Enable Pop on Bell\fP (resource \fBpoponbell\fP)
Enable (or disable) raising of the window when Control-G is received.
This corresponds to the \fB\-pop\fP option and the \fBpopOnBell\fP resource.
.
.TP
.B Enable Blinking Cursor\fP (resource \fBcursorblink\fP)
Enable (or disable) the blinking-cursor feature.
This corresponds to the \fB\-bc\fP option and the \fBcursorBlink\fP resource.
There is also an escape sequence
(see \fI\*N Control Sequences\fP).
The menu entry and the escape sequence states are XOR'd:
if both are enabled, the cursor will not blink,
if only one is enabled, the cursor will blink.
.
.TP
.B Enable Alternate Screen Switching\fP (resource \fBtiteInhibit\fP)
Enable (or disable) switching between the normal and alternate screens.
This corresponds to the \fBtiteInhibit\fP resource.
There is no corresponding command-line option.
.
.TP
.B Enable Active Icon\fP (resource \fBactiveicon\fP)
Enable (or disable) the active-icon feature.
This corresponds to the \fB\-ai\fP option and the \fBactiveIcon\fP resource.
.
.TP
.B Sixel Scrolling\fP (resource \fBsixelScrolling\fP)
When enabled,
sixel graphics are positioned at the current text cursor location, scroll
the image vertically if larger than the screen, and leave the text cursor
at the start of the next complete line after the image when returning to text
mode (this is the default).
When disabled,
sixel graphics are positioned at the upper left of the screen, are
cropped to fit the screen, and do not affect the text cursor location.
This corresponds to the \fBsixelScrolling\fP resource.
There is no corresponding command-line option.
.
.TP
.B Private Color Registers\fP (resource \fBprivateColorRegisters\fP)
If \fI\*n\fR is configured to support ReGIS graphics,
this controls whether a private color palette can be used.
.IP
When enabled,
each graphic image uses a separate set of color registers, so that it
essentially has a private palette (this is the default).  If it is not set,
all graphics images share a common set of registers which is how sixel and
ReGIS graphics worked on actual hardware.  The default is likely a more
useful mode on modern TrueColor hardware.
.IP
This corresponds to the \fBprivateColorRegisters\fP resource.
There is no corresponding command-line option.
.RE
.
.TP
VT\fIxxx\fP Commands:
.RS
.TP
.B Do Soft Reset\fP (resource \fBsoftreset\fP)
Reset scroll regions.
This can be convenient when some program has left the scroll regions
set incorrectly (often a problem when using VMS or TOPS-20).
This corresponds to the VT220 DECSTR control sequence.
.
.TP
.B Do Full Reset\fP (resource \fBhardreset\fP)
The full reset entry will clear the screen, reset tabs to every
eight columns, and reset the terminal modes (such as wrap and smooth scroll)
to their initial states just after
.I \*n
has finished processing the command line options.
This corresponds to the VT102 RIS control sequence,
with a few obvious differences.
For example, your session is not disconnected as a real VT102 would do.
.
.TP
.B Reset and Clear Saved Lines\fP (resource \fBclearsavedlines\fP)
Perform a full reset,
and also clear the saved lines.
.RE
.
.TP
Commands for setting the current screen:
.RS
.
.TP
.B Show Tek Window\fP (resource \fBtekshow\fP)
When enabled,
pops the Tektronix 4014 window up (makes it visible).
When disabled,
hides the Tektronix 4014 window.
.
.TP
.B Switch to Tek Mode\fP (resource \fBtekmode\fP)
When enabled,
pops the Tektronix 4014 window up if it is not already visible,
and switches the input stream to that window.
When disabled,
hides the Tektronix 4014 window and
switches input back to the VT\fIxxx\fP window.
.
.TP
.B Hide VT Window\fP (resource \fBvthide\fP)
When enabled,
hides the VT\fIxxx\fP window,
shows the Tektronix 4014 window if
it was not already visible
and switches the input stream to that window.
When disabled,
shows the VT\fIxxx\fP window,
and switches the input stream to that window.
.
.TP
.B Show Alternate Screen\fP (resource \fBaltscreen\fP)
When enabled,
shows the alternate screen.
When disabled,
shows the normal screen.
Note that the normal screen may have saved lines;
the alternate screen does not.
.RE
.PP
.
.SS "VT Fonts"
.PP
The \fI\*n\fP \fIfontMenu\fP pops up when
when the \*(``control\*('' key and pointer button three are pressed in a window.
It sets the font used in the VT\fIxxx\fP window,
or modifies the way the font is specified or displayed.
There are several sections.
.PP
The first section allows you to select the font from a set of alternatives:
.RS
.TP
.B Default\fP (resource \fBfontdefault\fP)
Set the font to the default, i.e., that given by the \fB*VT100.font\fP resource.
.TP
.B Unreadable\fP (resource \fBfont1\fP)
Set the font to that given by the \fB*VT100.font1\fP resource.
.TP
.B Tiny\fP (resource \fBfont2\fP)
Set the font to that given by the \fB*VT100.font2\fP resource.
.TP
.B Small\fP (resource \fBfont3\fP)
Set the font to that given by the \fB*VT100.font3\fP resource.
.TP
.B Medium\fP (resource \fBfont4\fP)
Set the font to that given by the \fB*VT100.font4\fP resource.
.TP
.B Large\fP (resource \fBfont5\fP)
Set the font to that given by the \fB*VT100.font5\fP resource.
.TP
.B Huge\fP (resource \fBfont6\fP)
Set the font to that given by the \fB*VT100.font6\fP resource.
.TP
.B Escape Sequence\fP (resource \fBfontescape\fP)
This allows you to set the font last specified by the Set
Font escape sequence (see \fI\*N Control Sequences\fP).
.TP
.B Selection\fP (resource \fBfontsel\fP)
This allows you to set the font specified
the current selection as a font name (if the \fBPRIMARY\fP selection is owned).
.RE
.PP
The second section allows you to modify the way it is displayed:
.RS
.TP
.B Bold Fonts\fP (resource \fBallow-bold-fonts\fP)
This is normally checked (enabled).
When unchecked, \fI\*n\fP will not use bold fonts.
The setting corresponds to the \fBallowBoldFonts\fP resource.
.TP
.B Line-Drawing Characters\fP (resource \fBfont-linedrawing\fP)
When set, tells \fI\*n\fP to draw its own line-drawing characters.
Otherwise it relies on the font containing these.
Compare to the \fBforceBoxChars\fP resource.
.TP
.B Packed Font\fP (resource \fBfont-packed\fP)
When set, tells \fI\*n\fP to use the minimum glyph-width from a font
when displaying characters.
Use the maximum width (unchecked) to help display proportional fonts.
Compare to the \fBforcePackedFont\fP resource.
.TP
.B Doublesized Characters\fP (resource \fBfont-doublesize\fP)
When set, \fI\*n\fP may ask the font server to produce scaled versions
of the normal font, for VT102 double-size characters.
.RE
.PP
The third section allows you to modify the way it is specified:
.RS
.TP
.B TrueType Fonts\fP (resource \fBrender-font\fP)
If the \fBrenderFont\fP and corresponding resources were set,
this is a further control whether \fI\*n\fP will actually use the
Xft library calls to obtain a font.
.TP
.B UTF-8 Encoding\fP (resource \fButf8-mode\fP)
This controls whether \fI\*n\fP uses UTF-8 encoding of input/output.
It is useful for temporarily switching \fI\*n\fP to display
text from an application which does not follow the locale settings.
It corresponds to the \fButf8\fP resource.
.TP
.B UTF-8 Fonts\fP (resource \fButf8-fonts\fP)
This controls whether \fI\*n\fP uses UTF-8 fonts for display.
It is useful for temporarily switching \fI\*n\fP to display
text from an application which does not follow the locale settings.
It combines the \fButf8\fP and \fButf8Fonts\fP resources,
subject to the \fBlocale\fP resource.
.TP
.B UTF-8 Titles\fP (resource \fButf8-title\fP)
This controls whether \fI\*n\fP accepts UTF-8 encoding for
title control sequences.
It corresponds to the \fButf8Fonts\fP resource.
.IP
Initially the checkmark is set according to both the \fButf8\fP
and \fButf8Fonts\fP resource values.
If the latter is set to \*(``always\*('', the checkmark is disabled.
Likewise, if there are no fonts given in the \fButf8Fonts\fP
subresources, then the checkmark also is disabled.
.IP
The standard \fB__default_class__\fP app-defaults file defines both sets of fonts,
while the \fBU__default_class__\fP app-defaults file defines only one set.
Assuming the standard app-defaults files,
this command will launch \fI\*n\fP able to switch between UTF-8
and ISO-8859-1 encoded fonts:
.NS
u\*n -class __default_class__
.NE
.RE
.PP
The fourth section allows you to enable or disable special operations
which can be controlled by writing escape sequences to the terminal.
These are disabled if the SendEvents feature is enabled:
.RS
.TP
.B Allow Color Ops\fP (resource \fBallow-font-ops\fP)
This corresponds to the \fBallowColorOps\fP resource.
Enable or disable control sequences that set/query the colors.
.TP
.B Allow Font Ops\fP (resource \fBallow-font-ops\fP)
This corresponds to the \fBallowFontOps\fP resource.
Enable or disable control sequences that set/query the font.
.TP
.B Allow Mouse Ops\fP (resource \fBallow-mouse-ops\fP)
Enable or disable control sequences that cause the terminal to
send escape sequences on pointer-clicks and movement.
This corresponds to the \fBallowMouseOps\fP resource.
.TP
.B Allow Tcap Ops\fP (resource \fBallow-tcap-ops\fP)
Enable or disable control sequences that query the terminal's
notion of its function-key strings, as termcap or terminfo capabilities.
This corresponds to the \fBallowTcapOps\fP resource.
.TP
.B Allow Title Ops\fP (resource \fBallow-title-ops\fP)
Enable or disable control sequences that modify the window title or icon name.
This corresponds to the \fBallowTitleOps\fP resource.
.TP
.B Allow Window Ops\fP (resource \fBallow-window-ops\fP)
Enable or disable extended window control sequences (as used in dtterm).
This corresponds to the \fBallowWindowOps\fP resource.
.RE
.
.SS "Tek Options"
.PP
The \fI\*n\fP \fItekMenu\fP sets various modes in the Tektronix emulation,
and is popped up when the
\*(``control\*('' key and pointer button two are pressed in the Tektronix window.
The current font size is checked in the modes section of the menu.
.RS
.TP
.B Large Characters\fP (resource \fBtektextlarge\fP)
.TP
.B \&#2 Size Characters\fP (resource \fBtektext2\fP)
.TP
.B \&#3 Size Characters\fP (resource \fBtektext3\fP)
.TP
.B Small Characters\fP (resource \fBtektextsmall\fP)
.RE
.PP
Commands:
.RS
.TP
.B PAGE\fP (resource \fBtekpage\fP)
Clear the Tektronix window.
.TP
.B RESET\fP (resource \fBtekreset\fP)
.TP
.B COPY\fP (resource \fBtekcopy\fP)
.RE
.PP
Windows:
.RS
.TP
.B Show VT Window\fP (resource \fBvtshow\fP)
.TP
.B Switch to VT Mode\fP (resource \fBvtmode\fP)
.TP
.B Hide Tek Window\fP (resource \fBtekhide\fP)
.RE
.
.
.SH SECURITY
.
.PP
X environments differ in their security consciousness.
.bP
Most servers,
run under \fIxdm\fP,
are capable of using a \*(``magic cookie\*('' authorization
scheme that can provide a reasonable level of security for many people.
If your server is only using a host-based mechanism to control access to
the server (see \fIxhost(__mansuffix__)\fP), then if you enable access for a host and
other users are also permitted to run clients on that same host,
it is possible that someone can run an application which uses the
basic services of the X protocol to snoop on your activities,
potentially capturing a transcript of everything you type at the keyboard.
.bP
Any process which has access to your X display can manipulate it
in ways that you might not anticipate,
even redirecting your keyboard to itself
and sending events to your application's windows.
This is true even with the \*(``magic cookie\*('' authorization scheme.
While the \fBallowSendEvents\fP provides some protection against
rogue applications tampering with your programs,
guarding against a snooper is harder.
.
.bP
The X input extension for instance allows an application to bypass
all of the other (limited) authorization and security features,
including the GrabKeyboard protocol.
.
.bP
The possibility of an application spying on your keystrokes
is of particular concern when you want to type in a password
or other sensitive data.
The best solution to this problem is to use a better
authorization mechanism than is provided by X.
.PP
Subject to all of these caveats,
a simple mechanism exists for protecting keyboard input in \fI\*n\fP.
.
.PP
The \fI\*n\fP menu (see \fBMENUS\fP above) contains a \fBSecure Keyboard\fP
entry which, when enabled,
attempts to ensure that all keyboard input is directed
\fIonly\fP to \fI\*n\fP (using the GrabKeyboard protocol request).
When an application prompts you for a password
(or other sensitive data), you can enable \fBSecure Keyboard\fP using the
menu, type in the data, and then disable \fBSecure Keyboard\fP using
the menu again.
.bP
This ensures that you know which window is accepting your keystrokes.
.bP
It cannot ensure that there are no processes which have access to your
X display that might be observing the keystrokes as well.
.
.PP
Only one X client at a time can grab the keyboard,
so when you attempt to enable \fBSecure Keyboard\fP it may fail.
In this case, the bell will sound.
If the \fBSecure Keyboard\fP succeeds,
the foreground and background colors will be exchanged (as if you
selected the \fBEnable Reverse Video\fP entry in the \fBModes\fP menu);
they will be exchanged again when you exit secure mode.
If the colors
do \fInot\fP switch, then
you should be \fIvery\fP suspicious that you are being spoofed.
If the application you are running displays a prompt before asking for
the password, it is safest to enter secure mode \fIbefore\fP the
prompt gets displayed, and to make sure that the prompt gets displayed
correctly (in the new colors), to minimize the probability of
spoofing.
You can also bring up the menu again and make sure that a check
mark appears next to the entry.
.
.PP
\fBSecure Keyboard\fP mode will be disabled automatically if your \fI\*n\fP
window becomes iconified (or otherwise unmapped), or if you start up
a reparenting window manager (that places a title bar or other decoration
around the window) while in \fBSecure Keyboard\fP mode.
(This is a
feature of the X protocol not easily overcome.)  When this happens,
the foreground and background colors will be switched back and the bell
will sound in warning.
.
.
.SH "CHARACTER CLASSES"
Clicking the left pointer button twice in rapid succession
(double-clicking) causes all characters of the same class
(e.g., letters, white space, punctuation) to be selected as a \*(``word\*(''.
Since different people have different preferences for what should
be selected (for example, should filenames be selected as a whole or only
the separate subnames), the default mapping can be overridden through the use
of the \fBcharClass\fP (class \fICharClass\fP) resource.
.
.PP
This resource is a
series of comma-separated
\fIrange\fP:\fIvalue\fP pairs.
.bP
The
\fIrange\fP is either a single number or \fIlow\fP-\fIhigh\fP in the range of 0
to 65535, corresponding to the code for the character or characters to be
set.
.bP
The \fIvalue\fP is arbitrary.  For example, the default table uses the
character number of the first character occurring in the set.
When not in
UTF-8 mode, only the first 256 entries of this table will be used.
.
.PP
The default table starts as follows \-
.NS
static int charClass[256] = {
/\(** NUL  SOH  STX  ETX  EOT  ENQ  ACK  BEL */
    32,   1,   1,   1,   1,   1,   1,   1,
/\(**  BS   HT   NL   VT   NP   CR   SO   SI */
     1,  32,   1,   1,   1,   1,   1,   1,
/\(** DLE  DC1  DC2  DC3  DC4  NAK  SYN  ETB */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** CAN   EM  SUB  ESC   FS   GS   RS   US */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(**  SP    !    "    #    $    %    &    \*(AQ */
.\"   " <- for emacs autocolor to work well :-)
    32,  33,  34,  35,  36,  37,  38,  39,
/\(**   (    )    *    +    ,    \-    .    / */
    40,  41,  42,  43,  44,  45,  46,  47,
/\(**   0    1    2    3    4    5    6    7 */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   8    9    :    ;    <    =    >    ? */
    48,  48,  58,  59,  60,  61,  62,  63,
/\(**   @@    A    B    C    D    E    F    G */
    64,  48,  48,  48,  48,  48,  48,  48,
/\(**   H    I    J    K    L    M    N    O */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   P    Q    R    S    T    U    V    W */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   X    Y    Z    [    \\    ]    ^    _ */
    48,  48,  48,  91,  92,  93,  94,  48,
/\(**   `    a    b    c    d    e    f    g */
    96,  48,  48,  48,  48,  48,  48,  48,
/\(**   h    i    j    k    l    m    n    o */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   p    q    r    s    t    u    v    w */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   x    y    z    {    |    }    ~  DEL */
    48,  48,  48, 123, 124, 125, 126,   1,
/\(** x80  x81  x82  x83  IND  NEL  SSA  ESA */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** HTS  HTJ  VTS  PLD  PLU   RI  SS2  SS3 */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** DCS  PU1  PU2  STS  CCH   MW  SPA  EPA */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(** x98  x99  x9A  CSI   ST  OSC   PM  APC */
     1,   1,   1,   1,   1,   1,   1,   1,
/\(**   \-    i   c/    L   ox   Y\-    |   So */
   160, 161, 162, 163, 164, 165, 166, 167,
/\(**  ..   c0   ip   <<    _        R0    \- */
   168, 169, 170, 171, 172, 173, 174, 175,
/\(**   o   +\-    2    3    \*(AQ    u   q|    . */
   176, 177, 178, 179, 180, 181, 182, 183,
/\(**   ,    1    2   >>  1/4  1/2  3/4    ? */
   184, 185, 186, 187, 188, 189, 190, 191,
/\(**  A`   A\*(AQ   A^   A~   A:   Ao   AE   C, */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  E`   E\*(AQ   E^   E:   I`   I\*(AQ   I^   I: */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  D\-   N~   O`   O\*(AQ   O^   O~   O:    X */
    48,  48,  48,  48,  48,  48,  48, 215,
/\(**  O/   U`   U\*(AQ   U^   U:   Y\*(AQ    P    B */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  a`   a\*(AQ   a^   a~   a:   ao   ae   c, */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**  e`   e\*(AQ   e^   e:   i`   i\*(AQ   i^   i: */
    48,  48,  48,  48,  48,  48,  48,  48,
/\(**   d   n~   o`   o\*(AQ   o^   o~   o:   \-: */
    48,  48,  48,  48,  48,  48,  48, 247,
/\(**  o/   u`   u\*(AQ   u^   u:   y\*(AQ    P   y: */
    48,  48,  48,  48,  48,  48,  48,  48};
.NE
.IP
For example, the string \*(``33:48,37:48,45\-47:48,38:48\*('' indicates that the
exclamation mark, percent sign, dash, period, slash, and ampersand characters
should be treated the same way as characters and numbers.
This is useful
for cutting and pasting electronic mailing addresses and filenames.
.
.
.SH KEY BINDINGS
.PP
It is possible to rebind keys (or sequences of keys) to arbitrary strings
for input, by changing the \fBtranslations\fP resources
for the vt100 or tek4014 widgets.
Changing the \fBtranslations\fP resource
for events other than key and button events is not expected,
and will cause unpredictable behavior.
.SS Actions
The following
actions are provided for use within the \fIvt100\fP or \fItek4014\fP
\fBtranslations\fP resources:
.TP 8
.B "allow-bold-fonts(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowBoldFonts\fP resource and is also
invoked by the \fBallow-bold-fonts\fP entry in \fIfontMenu\fP.
.TP 8
.B "allow-color-ops(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowColorOps\fP resource and is also
invoked by the \fBallow-color-ops\fP entry in \fIfontMenu\fP.
.TP 8
.B "allow-font-ops(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowFontOps\fP resource and is also
invoked by the \fBallow-font-ops\fP entry in \fIfontMenu\fP.
.TP 8
.B "allow-mouse-ops(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowMousepOps\fP resource and is also
invoked by the \fBallow-mouse-ops\fP entry in \fIfontMenu\fP.
.TP 8
.B "allow-send-events(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowSendEvents\fP resource and is also
invoked by the \fBallowsends\fP entry in \fImainMenu\fP.
.TP 8
.B "allow-tcap-ops(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowTcapOps\fP resource and is also
invoked by the \fBallow-tcap-ops\fP entry in \fIfontMenu\fP.
.TP 8
.B "allow-title-ops(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowTitleOps\fP resource and is also
invoked by the \fBallow-title-ops\fP entry in \fIfontMenu\fP.
.TP 8
.B "allow-window-ops(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBallowWindowOps\fP resource and is also
invoked by the \fBallow-window-ops\fP entry in \fIfontMenu\fP.
.TP 8
.B "alt-sends-escape()"
This action toggles the state of the \fBaltSendsEscape\fP resource.
.TP 8
.B "bell([\fIpercent\fP])"
This action rings the keyboard bell at the specified percentage
above or below the base volume.
.TP 8
.B "clear-saved-lines()"
This action does \fBhard-reset()\fP and also clears the history
of lines saved off the top of the screen.
It is also invoked from the \fBclearsavedlines\fP entry in \fIvtMenu\fP.
The effect is identical to a hardware reset (RIS) control sequence.
.TP 8
.B "copy-selection(\fIdestname\fP [, ...])"
This action puts the currently selected text into all of the selections or
cutbuffers specified by \fIdestname\fP.
Unlike \fBselect-end\fP, it does not send a mouse position or otherwise
modify the internal selection state.
.TP 8
.B "create-menu(\fIm/v/f/t\fP)"
This action creates one of the menus used by \fI\*n\fP,
if it has not been previously created.
The parameter values are the menu names:
\fImainMenu\fP, \fIvtMenu\fP, \fIfontMenu\fP, \fItekMenu\fP, respectively.
.TP 8
.B "dabbrev-expand()"
Expands the word before cursor by searching in the preceding text on the
screen and in the scrollback buffer for words starting with that
abbreviation.
Repeating \fBdabbrev-expand()\fP several times in sequence searches for an
alternative expansion by looking farther back.
Lack of more matches is signaled by a bell.
Attempts to expand an empty word
(i.e., when cursor is preceded by a space) yield successively all previous
words.
Consecutive identical expansions are ignored.
The word here is defined as a sequence of non-whitespace characters.
This feature partially emulates the behavior
of \*(``dynamic abbreviation\*('' expansion in Emacs (bound there to M\-/).
Here is a resource setting for \fI\*n\fP which will do the same thing:
.NS
*VT100*translations:    #override \\n\\\&
        Meta <KeyPress> /:\fBdabbrev-expand\fP()
.NE
.TP 8
.B "deiconify()"
Changes the window state back to normal, if it was iconified.
.TP 8
.B "delete-is-del()"
This action toggles the state of the \fBdeleteIsDEL\fP resource.
.TP 8
.B "dired-button()"
Handles a button event (other than press and release)
by echoing the event's position
(i.e., character line and column) in the following format:
.sp
.in +8
^X ESC G <line+\*(`` \*(''> <col+\*(`` \*(''>
.in -8
.TP 8
.B "exec-formatted(\fIformat\fP, \fIsourcename\fP [, ...])"
Execute an external command,
using the current selection for part of the command's parameters.
The first parameter, \fIformat\fP gives the basic command.
Succeeding parameters specify the selection source as in \fBinsert-selection\fP.
.IP
The \fIformat\fP parameter allows these substitutions:
.RS
.TP 5
%%
inserts a "%".
.TP 5
%P
the screen-position at the beginning of the highlighted region,
as a semicolon-separated pair of integers using the
values that the CUP control sequence would use.
.TP 5
%p
the screen-position after the beginning of the highlighted region,
using the same convention as \*(``%P\*(''.
.TP 5
%S
the length of the string that \*(``%s\*('' would insert.
.TP 5
%s
the content of the selection, unmodified.
.TP 5
%T
the length of the string that \*(``%t\*('' would insert.
.TP 5
%t
the selection, trimmed of leading/trailing whitespace.
Embedded spaces (and newlines) are copied as is.
.TP 5
%R
the length of the string that \*(``%r\*('' would insert.
.TP 5
%r
the selection, trimmed of trailing whitespace.
.TP 5
%V
the video attributes at the beginning of the highlighted region,
as a semicolon-separated list of integers using the
values that the SGR control sequence would use.
.TP 5
%v
the video attributes after the end of the highlighted region,
using the same convention as \*(``%V\*(''.
.RE
.IP
After constructing the command-string,
\fI\*n\fP forks a subprocess and executes the command,
which completes independently of \fI\*n\fP.
.IP
For example, this translation would invoke a new \fI\*n\fP process
to view a file whose name is selected while holding the shift key down.
The new process is started when the mouse button is released:
.NS
*VT100*translations: #override Shift \\
    <Btn1Up>:\fBexec-formatted\fP("xterm -e view '%t'", \fBSELECT\fP)
.NE
.TP 8
.B "exec-selectable(\fIformat\fP, \fIonClicks\fP)"
Execute an external command,
using data copied from the screen for part of the command's parameters.
The first parameter, \fIformat\fP gives
the basic command as in \fBexec-formatted\fP.
The second parameter specifies the method for copying
the data as in the \fBon2Clicks\fP resource.
.TP 8
.B "fullscreen(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBfullscreen\fP resource.
.TP 8
.B "iconify()"
Iconifies the window.
.TP 8
.B "hard-reset()"
This action resets the scrolling region, tabs, window size, and cursor keys
and clears the screen.
It is also invoked from the \fBhardreset\fP
entry in \fIvtMenu\fP.
.TP 8
.B "ignore()"
This action ignores the event but checks for special pointer position
escape sequences.
.TP 8
.B "insert()"
This action inserts the character or string associated with
the key that was pressed.
.TP 8
.B "insert-eight-bit()"
This action inserts an eight-bit (Meta) version of the character or string
associated with the key that was pressed.
Only single-byte values are treated specially.
The exact action depends on the value of
the \fBaltSendsEscape\fP and
the \fBmetaSendsEscape\fP and
the \fBeightBitInput\fP resources.
The \fBmetaSendsEscape\fP resource is tested first.
See the \fBeightBitInput\fP resource for a full discussion.
.IP
The term \*(``eight-bit\*('' is misleading:
\fI\*n\fP checks if the key is in the range 128 to 255
(the eighth bit is set).
If the value is in that range,
depending on the resource values,
\fI\*n\fP may then do one of the following:
.RS
.bP
add 128 to the value, setting its eighth bit,
.bP
send an ESC byte before the key, or
.bP
send the key unaltered.
.RE
.TP 8
.B "insert-formatted(\fIformat\fP, \fIsourcename\fP [, ...])"
Insert the current selection or data related to it, formatted.
The first parameter, \fIformat\fP gives the template for the data
as in \fBexec-formatted\fP.
Succeeding parameters specify the selection source as in \fBinsert-selection\fP.
.TP 8
.B "insert-selectable(\fIformat\fP, \fIonClicks\fP)"
Insert data copied from the screen, formatted.
The first parameter, \fIformat\fP gives the template for the data
as in \fBexec-formatted\fP.
The second parameter specifies the method for copying
the data as in the \fBon2Clicks\fP resource.
.TP 8
.B "insert-selection(\fIsourcename\fP [, ...])"
This action inserts the string found in the selection or cutbuffer indicated
by \fIsourcename\fP.
Sources are checked in the order given (case is
significant) until one is found.
Commonly-used selections include:
\fIPRIMARY\fP, \fISECONDARY\fP, and \fICLIPBOARD\fP.
Cut buffers are
typically named \fICUT_BUFFER0\fP through \fICUT_BUFFER7\fP.
.TP 8
.B "insert-seven-bit()"
This action is a synonym for \fBinsert()\fP.
The term \*(``seven-bit\*('' is misleading:
it only implies that \fI\*n\fP does not try to add 128 to the key's value
as in \fBinsert-eight-bit()\fP.
.TP 8
.B "interpret(\fIcontrol-sequence\fP)"
Interpret the given control sequence locally, i.e., without passing it to
the host.
This works by inserting the control sequence at the front
of the input buffer.
Use \*(``\\\*('' to escape octal digits in the string.
Xt does not allow you to put a null character (i.e., \*(``\\000\*('') in the string.
.TP 8
.B "keymap(\fIname\fP)"
This action dynamically defines a new translation table whose resource
name is \fIname\fP with the suffix \*(``\fIKeymap\fP\*(''
(i.e., \fIname\fP\fBKeymap\fP, where case is significant).
The name \fINone\fP restores the original translation table.
.TP 8
.B "larger-vt-font()"
Set the font to the next larger one, based on the font dimensions.
See also \fBset-vt-font()\fP.
.TP 8
.B "load-vt-fonts(\fIname\fP[,\fIclass\fP])"
Load fontnames from the given subresource name and class.
That is, load the \*(``*VT100.\fIname\fP.font\*('',
resource as \*(``*VT100.font\*('' etc.
If no name is given, the original set of fontnames is restored.
.IP
Unlike \fBset-vt-font()\fR, this does not affect the escape- and select-fonts,
since those are not based on resource values.
It does affect the fonts loosely organized under the \*(``Default\*('' menu
entry, including \fBfont\fP, \fBboldFont\fP, \fBwideFont\fP and \fBwideBoldFont\fP.
.TP 8
.B "maximize()"
Resizes the window to fill the screen.
.TP 8
.B "meta-sends-escape()"
This action toggles the state of the \fBmetaSendsEscape\fP resource.
.TP 8
.B "popup-menu(\fImenuname\fP)"
This action displays the specified popup menu.
Valid names (case is
significant) include:  \fImainMenu\fP, \fIvtMenu\fP, \fIfontMenu\fP,
and \fItekMenu\fP.
.TP 8
.B "print(\fIprinter-flags\fP)"
This action prints the window.
It is also invoked by the \fBprint\fP entry in \fImainMenu\fP.
.IP
The action accepts optional parameters, which temporarily override
resource settings.
The parameter values are matched ignoring case:
.RS
.TP 5
noFormFeed
no form feed will be sent at the end of the last line printed
(i.e., \fBprinterFormFeed\fP is ``false'').
.TP 5
FormFeed
a form feed will be sent at the end of the last line printed
(i.e., \fBprinterFormFeed\fP is ``true'').
.TP 5
noNewLine
no newline will be sent at the end of the last line printed,
and wrapped lines will be combined into long lines
(i.e., \fBprinterNewLine\fP is ``false'').
.TP 5
NewLine
a newline will be sent at the end of the last line printed,
and each line will be limited (by adding a newline) to the screen width
(i.e., \fBprinterNewLine\fP is ``true'').
.TP 5
noAttrs
the page is printed without attributes
(i.e., \fBprintAttributes\fP is ``0'').
.TP 5
monoAttrs
the page is printed with monochrome (vt220) attributes
(i.e., \fBprintAttributes\fP is ``1'').
.TP 5
colorAttrs
the page is printed with ANSI color attributes
(i.e., \fBprintAttributes\fP is ``2'').
.RE
.TP 8
.B "print-everything(\fIprinter-flags\fP)"
This action sends the entire text history, in addition to the text
currently visible, to the program given in the \fBprinterCommand\fP resource.
It allows the same optional parameters as the \fBprint\fP action.
With a suitable printer command, the action can be used to load the text
history in an editor.
.TP 8
.B "print-immediate()"
Sends the text of the current window directly to a file,
as specified by the
\fBprintFileImmediate\fP,
\fBprintModeImmediate\fP and
\fBprintOptsImmediate\fP
resources.
.TP 8
.B "print-on-error()"
Toggles a flag telling \fI\*n\fP that if it exits with an X error,
to send the text of the current window directly to a file,
as specified by the
\fBprintFileOnXError\fP,
\fBprintModeOnXError\fP and
\fBprintOptsOnXError\fP
resources.
.TP 8
.B "print-redir()"
This action toggles the \fBprinterControlMode\fR between 0 and 2.
The corresponding popup menu entry is useful for switching the printer
off if you happen to change your mind after deciding to print random
binary files on the terminal.
.TP 8
.B "quit()"
.br
This action sends a SIGHUP to the subprogram and exits.
It is also invoked
by the \fBquit\fP entry in \fImainMenu\fP.
.TP 8
.B "readline-button()"
Supports the optional readline feature by echoing repeated cursor forward
or backward control sequences on button release event,
to request that the host application update its notion of the cursor's
position to match the button event.
.TP 8
.B "redraw()"
This action redraws the window.
It is also invoked by the \fBredraw\fP entry in \fImainMenu\fP.
.TP 8
.B "restore()"
Restores the window to the size before it was last maximized.
.TP 8
.B "scroll-back(\fIcount\fP [,\fIunits\fP [,\fImouse\fP] ])"
This action scrolls the text window backward so that text that had previously
scrolled off the top of the screen is now visible.
.IP
The \fIcount\fP argument
indicates the number of \fIunits\fP (which may be \fIpage\fP, \fIhalfpage\fP,
\fIpixel\fP, or \fIline\fP) by which to scroll.
.IP
An adjustment can be specified for these values
by appending a \*(``+\*('' or \*(``\-\*(''
sign followed by a number,
e.g., \fIpage\-2\fP to specify 2 lines less than a page.
.IP
If the third parameter \fImouse\fP is given, the action is ignored when
mouse reporting is enabled.
.TP 8
.B "scroll-forw(\fIcount\fP [,\fIunits\fP [,\fImouse\fP] ])"
This action is similar to \fBscroll-back\fP except that it scrolls
in the other direction.
.TP 8
.B "secure()"
This action toggles the \fISecure Keyboard\fP mode
(see \fBSECURITY\fP), and is invoked from the \fBsecurekbd\fP
entry in \fImainMenu\fP.
.TP 8
.B "scroll-lock(\fIon/off/toggle\fP)"
This action sets, unsets or toggles internal state which tells
\fI\*n\fP whether Scroll Lock is active,
subject to the \fBallowScrollLock\fP resource.
.TP 8
.B "select-cursor-end(\fIdestname\fP [, ...])"
This action is similar to \fBselect-end\fP except that it should be used
with \fBselect-cursor-start\fP.
.TP 8
.B "select-cursor-extend()"
This action is similar to \fBselect-extend\fP except that it should be used
with \fBselect-cursor-start\fP.
.TP 8
.B "select-cursor-start()"
This action is similar to \fBselect-start\fP except that it begins the
selection at the current text cursor position.
.TP 8
.B "select-end(\fIdestname\fP [, ...])"
This action puts the currently selected text into all of the selections or
cutbuffers specified by \fIdestname\fP.
It also sends a mouse position and updates the internal selection state
to reflect the end of the selection process.
.TP 8
.B "select-extend()"
This action tracks the pointer and extends the selection.
It should only be bound to Motion events.
.TP 8
.B "select-set()"
This action stores text that corresponds to the current selection,
without affecting the selection mode.
.TP 8
.B "select-start()"
This action begins text selection at the current pointer location.
See
the section on \fBPOINTER USAGE\fP for information on making selections.
.TP 8
.B "send-signal(\fIsigname\fP)"
This action sends the signal named by \fIsigname\fP
to the \fI\*n\fP subprocess (the shell or program specified with
the \fI\-e\fP command line option).
It is also invoked by the
\fBsuspend\fP,
\fBcontinue\fP,
\fBinterrupt\fP,
\fBhangup\fP,
\fBterminate\fP,
and
\fBkill\fP
entries in \fImainMenu\fP.
Allowable signal names are (case is
not significant):
\fItstp\fP (if supported by the operating system), \fIsuspend\fP (same
as \fItstp\fP), \fIcont\fP
(if supported by the operating system), \fIint\fP, \fIhup\fP, \fIterm\fP,
\fIquit\fP,
\fIalrm\fP, \fIalarm\fP (same as \fIalrm\fP) and \fIkill\fP.
.TP 8
.B "set-8-bit-control(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBeightBitControl\fP resource.
It is also invoked from the \fB8-bit-control\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-allow132(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBc132\fP resource.
It is also invoked from the \fBallow132\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-altscreen(\fIon/off/toggle\fP)"
This action sets, unsets or toggles between the alternate and current screens.
.TP 8
.B "set-appcursor(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the handling Application Cursor Key mode
and is also invoked by the \fBappcursor\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-appkeypad(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the handling of Application Keypad mode and is also
invoked by the \fBappkeypad\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-autolinefeed(\fIon/off/toggle\fP)"
This action sets, unsets or toggles automatic insertion of linefeeds.
It is also invoked by the \fBautolinefeed\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-autowrap(\fIon/off/toggle\fP)"
This action sets, unsets or toggles automatic wrapping of long lines.
It is also invoked by the \fBautowrap\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-backarrow(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBbackarrowKey\fP resource.
It is also invoked from the \fBbackarrow key\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-bellIsUrgent(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBbellIsUrgent\fP resource.
It is also invoked by the \fBbellIsUrgent\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-cursorblink(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBcursorBlink\fP resource.
It is also invoked from the \fBcursorblink\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-cursesemul(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBcurses\fP resource.
It is also invoked from the \fBcursesemul\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-font-doublesize(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBfontDoublesize\fP resource.
It is also invoked by the \fBfont-doublesize\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-hp-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBhpFunctionKeys\fP resource.
It is also invoked by the \fBhpFunctionKeys\fP entry in \fImainMenu\fP.
.TP 8
.B "set-jumpscroll(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBjumpscroll\fP resource.
It is also invoked by the \fBjumpscroll\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-font-linedrawing(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fI\*n\fR's state regarding whether the current font
has line-drawing characters and whether it should draw them directly.
It is also invoked by the \fBfont-linedrawing\fP entry in \fIfontMenu\fP.
.\" .\" not implemented
.\" .TP 8
.\" .B "set-font-loading(\fIon/off/toggle\fP)"
.\" This action sets, unsets or toggles the TBD resource
.\" which controls the ability to load VT220 soft fonts.
.\" It is also invoked by the \fBfont-loadable\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-font-packed(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBforcePackedFont\fR resource
which controls use of the font's minimum or maximum glyph width.
It is also invoked by the \fBfont-packed\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-keep-clipboard(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBkeepClipboard\fP resource.
.TP 8
.B "set-keep-selection(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBkeepSelection\fP resource.
It is also invoked by the \fBkeepSelection\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-logging(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the state of the logging option.
.TP 8
.B "set-old-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the state of legacy function keys.
It is also invoked by the \fBoldFunctionKeys\fP entry in \fImainMenu\fP.
.TP 8
.B "set-marginbell(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBmarginBell\fP resource.
.TP 8
.B "set-num-lock(\fIon/off/toggle\fP)"
This action toggles the state of the \fBnumLock\fP resource.
.TP 8
.B "set-pop-on-bell(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBpopOnBell\fP resource.
It is also invoked by the \fBpoponbell\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-private-colors(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBprivateColorRegisters\fP resource.
.TP 8
.B "set-render-font(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBrenderFont\fP resource.
It is also invoked by the \fBrender-font\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-reverse-video(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBreverseVideo\fP resource.
It is also invoked by the \fBreversevideo\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-reversewrap(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBreverseWrap\fP resource.
It is also invoked by the \fBreversewrap\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-scroll-on-key(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBscrollKey\fP resource.
It is also invoked from the \fBscrollkey\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-scroll-on-tty-output(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBscrollTtyOutput\fP resource.
It is also invoked from the \fBscrollttyoutput\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-scrollbar(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBscrollbar\fP resource.
It is also invoked by the \fBscrollbar\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-sco-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBscoFunctionKeys\fP resource.
It is also invoked by the \fBscoFunctionKeys\fP entry in \fImainMenu\fP.
.TP 8
.B "set-select(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBselectToClipboard\fP resource.
It is also invoked by the \fBselectToClipboard\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-sixel-scrolling(\fIon/off/toggle\fP)"
This action toggles between inline (sixel scrolling) and absolute positioning.
It can also be controlled via DEC private mode 80 (DECSDM) or from
the \fBsixelScrolling\fP entry in the \fIbtMenu\fP.
.TP 8
.B "set-sun-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBsunFunctionKeys\fP resource.
It is also invoked by the \fBsunFunctionKeys\fP entry in \fImainMenu\fP.
.TP 8
.B "set-sun-keyboard(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBsunKeyboard\fP resource.
It is also invoked by the \fBsunKeyboard\fP entry in \fImainMenu\fP.
.TP 8
.B "set-tek-text(\fIlarge/2/3/small\fP)"
This action sets the font used in the Tektronix window to the value of the
selected resource according to the argument.
The argument can be either a keyword or single-letter alias,
as shown in parentheses:
.RS
.TP 5
large (l)
Use resource \fBfontLarge\fP, same as menu entry \fBtektextlarge\fP.
.TP 5
two (2)
Use resource \fBfont2\fP, same as menu entry \fBtektext2\fP.
.TP 5
three (3)
Use resource \fBfont3\fP, same as menu entry \fBtektext3\fP.
.TP 5
small (s)
Use resource \fBfontSmall\fP, same as menu entry \fBtektextsmall\fP.
.RE
.TP 8
.B "set-terminal-type(\fItype\fP)"
This action directs output to either the \fIvt\fP or \fItek\fP windows,
according to the \fItype\fP string.
It is also invoked by the
\fBtekmode\fP entry in \fIvtMenu\fP and the \fBvtmode\fP entry in
\fItekMenu\fP.
.TP 8
.B "set-titeInhibit(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBtiteInhibit\fP resource,
which controls switching between the alternate and current screens.
.TP 8
.B "set-toolbar(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the toolbar feature.
It is also invoked by the \fBtoolbar\fP entry in \fImainMenu\fP.
.TP 8
.B "set-utf8-fonts(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fButf8Fonts\fP resource.
It is also invoked by the \fButf8-fonts\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-utf8-mode(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fButf8\fP resource.
It is also invoked by the \fButf8-mode\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-utf8-title(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fButf8Title\fP resource.
It is also invoked by the \fButf8-title\fP entry in \fIfontMenu\fP.
.TP 8
.B "set-visibility(\fIvt/tek\fP,\fIon/off/toggle\fP)"
This action sets, unsets or toggles whether or not the \fIvt\fP or \fItek\fP windows are
visible.
It is also invoked from the \fBtekshow\fP and \fBvthide\fP entries
in \fIvtMenu\fP and the \fBvtshow\fP and \fBtekhide\fP entries in
\fItekMenu\fP.
.TP 8
.B "set-visual-bell(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBvisualBell\fP resource.
It is also invoked by the \fBvisualbell\fP entry in \fIvtMenu\fP.
.TP 8
.B "set-vt-font(\fId/1/2/3/4/5/6/e/s\fP [,\fInormalfont\fP [, \fIboldfont\fP]])"
This action sets the font or fonts currently being used in the VT\fIxxx\fP window.
The first argument is a single character that specifies the font to be
used:
.RS 8
.HP
\fId\fP or \fID\fP indicate the default font (the font initially
used when
\fI\*n\fP was started),
.HP
\fI1\fP through \fI6\fP indicate the fonts
specified by the \fBfont1\fP through \fBfont6\fP resources,
.HP
\fIe\fP or \fIE\fP
indicate the normal and bold fonts that have been set through escape codes
(or specified as the second and third action arguments, respectively), and
.HP
\fIs\fP or \fIS\fP indicate the font selection (as made by programs such as
\fIxfontsel(__mansuffix__)\fP) indicated by the second action argument.
.RE
.IP
If \fI\*n\fR is configured to support wide characters, an
additional two optional parameters are recognized for the \fIe\fP argument:
wide font and wide bold font.
.TP 8
.B "smaller-vt-font()"
Set the font to the next smaller one, based on the font dimensions.
See also \fBset-vt-font()\fP.
.TP 8
.B "soft-reset()"
This action resets the scrolling region.
It is also invoked from the \fBsoftreset\fP entry in \fIvtMenu\fP.
The effect is identical to a soft reset (DECSTR) control sequence.
.TP 8
.B "spawn-new-terminal(\fIparams\fP)"
Spawn a new \fI\*n\fP process.
This is available on systems which have a modern version of the
process filesystem, e.g., \*(``/proc\*('', which \fI\*n\fP can read.
.IP
Use the \*(``cwd\*('' process entry, e.g., /proc/12345/cwd to obtain the
working directory of the process which is running in the current \fI\*n\fP.
.IP
On systems which have the \*(``exe\*('' process entry, e.g., /proc/12345/exe,
use this to obtain the actual executable.
Otherwise, use the \fB$PATH\fP variable to find \fI\*n\fP.
.IP
If parameters are given in the action,
pass them to the new \fI\*n\fP process.
.TP 8
.B "start-extend()"
This action is similar to \fBselect-start\fP except that the
selection is extended to the current pointer location.
.TP 8
.B "start-cursor-extend()"
This action is similar to \fBselect-extend\fP except that the
selection is extended to the current text cursor position.
.TP 8
.B "string(\fIstring\fP)"
This action inserts the specified text string as if it had been typed.
Quotation is necessary if the string contains whitespace or
non-alphanumeric characters.
If the string argument begins with the
characters \*(``0x\*('', it is interpreted
as a hex character constant.
.TP 8
.B "tek-copy()"
This action copies the escape codes used to generate the current window
contents to a file in the current directory beginning with the name COPY.
It is also invoked from the \fBtekcopy\fP entry in \fItekMenu\fP.
.TP 8
.B "tek-page()"
This action clears the Tektronix window.
It is also invoked by the \fBtekpage\fP entry in \fItekMenu\fP.
.TP 8
.B "tek-reset()"
This action resets the Tektronix window.
It is also invoked by the \fBtekreset\fP entry in \fItekMenu\fP.
.TP 8
.B "vi-button()"
Handles a button event (other than press and release)
by echoing a control sequence computed from the event's line number
in the screen relative to the current line:
.sp
.in +8
ESC ^P
.in -8
or
.in +8
ESC ^N
.in -8
.sp
according to whether the event is before, or after the current line,
respectively.
The ^N (or ^P) is repeated once for each line that the event differs
from the current line.
The control sequence is omitted altogether if the button event is on the
current line.
.TP 8
.B "visual-bell()"
This action flashes the window quickly.
.
.PP
The Tektronix window also has the following action:
.TP 8
.B "gin-press(\fIl/L/m/M/r/R\fP)"
This action sends the indicated graphics input code.
.
.SS Default Key Bindings
.PP
The default bindings in the VT\fIxxx\fP window use the \fBSELECT\fP token,
which is set by the \fBselectToClipboard\fP resource.
These are for the \fIvt100\fP widget:
.NS
          Shift <KeyPress> Prior:\fBscroll-back\fP(1,halfpage) \\n\\\&
           Shift <KeyPress> Next:\fBscroll-forw\fP(1,halfpage) \\n\\\&
         Shift <KeyPress> Select:\fBselect-cursor-start\fP() \\\&
                                 \fBselect-cursor-end\fP(\fBSELECT\fP, CUT_BUFFER0) \\n\\\&
         Shift <KeyPress> Insert:\fBinsert-selection\fP(\fBSELECT\fP, CUT_BUFFER0) \\n\\\&
                 Alt <Key>Return:\fBfullscreen\fP() \\n\\\&
        <KeyRelease> Scroll_Lock:\fBscroll-lock\fP() \\n\\\&
    Shift~Ctrl <KeyPress> KP_Add:\fBlarger-vt-font\fP() \\n\\\&
    Shift Ctrl <KeyPress> KP_Add:\fBsmaller-vt-font\fP() \\n\\\&
    Shift <KeyPress> KP_Subtract:\fBsmaller-vt-font\fP() \\n\\\&
                ~Meta <KeyPress>:\fBinsert-seven-bit\fP() \\n\\\&
                 Meta <KeyPress>:\fBinsert-eight-bit\fP() \\n\\\&
                !Ctrl <Btn1Down>:\fBpopup-menu\fP(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>:\fBpopup-menu\fP(mainMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn1Down>:\fBpopup-menu\fP(mainMenu) \\n\\\&
     ! @@Num_Lock Ctrl <Btn1Down>:\fBpopup-menu\fP(mainMenu) \\n\\\&
                ~Meta <Btn1Down>:\fBselect-start\fP() \\n\\\&
              ~Meta <Btn1Motion>:\fBselect-extend\fP() \\n\\\&
                !Ctrl <Btn2Down>:\fBpopup-menu\fP(vtMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>:\fBpopup-menu\fP(vtMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn2Down>:\fBpopup-menu\fP(vtMenu) \\n\\\&
     ! @@Num_Lock Ctrl <Btn2Down>:\fBpopup-menu\fP(vtMenu) \\n\\\&
          ~Ctrl ~Meta <Btn2Down>:\fBignore\fP() \\n\\\&
                 Meta <Btn2Down>:\fBclear-saved-lines\fP() \\n\\\&
            ~Ctrl ~Meta <Btn2Up>:\fBinsert-selection\fP(\fBSELECT\fP, CUT_BUFFER0) \\n\\\&
                !Ctrl <Btn3Down>:\fBpopup-menu\fP(fontMenu) \\n\\\&
           !Lock Ctrl <Btn3Down>:\fBpopup-menu\fP(fontMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn3Down>:\fBpopup-menu\fP(fontMenu) \\n\\\&
     ! @@Num_Lock Ctrl <Btn3Down>:\fBpopup-menu\fP(fontMenu) \\n\\\&
          ~Ctrl ~Meta <Btn3Down>:\fBstart-extend\fP() \\n\\\&
              ~Meta <Btn3Motion>:\fBselect-extend\fP() \\n\\\&
                 Ctrl <Btn4Down>:\fBscroll-back\fP(1,halfpage,m) \\n\\\&
            Lock Ctrl <Btn4Down>:\fBscroll-back\fP(1,halfpage,m) \\n\\\&
  Lock @@Num_Lock Ctrl <Btn4Down>:\fBscroll-back\fP(1,halfpage,m) \\n\\\&
       @@Num_Lock Ctrl <Btn4Down>:\fBscroll-back\fP(1,halfpage,m) \\n\\\&
                      <Btn4Down>:\fBscroll-back\fP(5,line,m)     \\n\\\&
                 Ctrl <Btn5Down>:\fBscroll-forw\fP(1,halfpage,m) \\n\\\&
            Lock Ctrl <Btn5Down>:\fBscroll-forw\fP(1,halfpage,m) \\n\\\&
  Lock @@Num_Lock Ctrl <Btn5Down>:\fBscroll-forw\fP(1,halfpage,m) \\n\\\&
       @@Num_Lock Ctrl <Btn5Down>:\fBscroll-forw\fP(1,halfpage,m) \\n\\\&
                      <Btn5Down>:\fBscroll-forw\fP(5,line,m)     \\n\\\&
                         <BtnUp>:\fBselect-end\fP(\fBSELECT\fP, CUT_BUFFER0) \\n\\\&
                       <BtnDown>:\fBignore\fP()
.NE
.PP
The default bindings in the Tektronix window are analogous but less extensive.
These are for the \fItek4014\fP widget:
.NS
                 ~Meta<KeyPress>: \fBinsert-seven-bit\fP() \\n\\\&
                  Meta<KeyPress>: \fBinsert-eight-bit\fP() \\n\\\&
                !Ctrl <Btn1Down>: \fBpopup-menu\fP(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>: \fBpopup-menu\fP(mainMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn1Down>: \fBpopup-menu\fP(mainMenu) \\n\\\&
      !Ctrl @@Num_Lock <Btn1Down>: \fBpopup-menu\fP(mainMenu) \\n\\\&
                !Ctrl <Btn2Down>: \fBpopup-menu\fP(tekMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>: \fBpopup-menu\fP(tekMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn2Down>: \fBpopup-menu\fP(tekMenu) \\n\\\&
      !Ctrl @@Num_Lock <Btn2Down>: \fBpopup-menu\fP(tekMenu) \\n\\\&
           Shift ~Meta<Btn1Down>: \fBgin-press\fP(L) \\n\\\&
                 ~Meta<Btn1Down>: \fBgin-press\fP(l) \\n\\\&
           Shift ~Meta<Btn2Down>: \fBgin-press\fP(M) \\n\\\&
                 ~Meta<Btn2Down>: \fBgin-press\fP(m) \\n\\\&
           Shift ~Meta<Btn3Down>: \fBgin-press\fP(R) \\n\\\&
                 ~Meta<Btn3Down>: \fBgin-press\fP(r)
.NE
.SS Custom Key Bindings
.PP
You can modify the \fBtranslations\fP resource by overriding parts
of it, or merging your resources with it.
.PP
Here is an example which uses shifted select/paste to copy to the clipboard,
and unshifted select/paste for the primary selection.
In each case, a (different) cut buffer is
also a target or source of the select/paste operation.
It is important to remember however,
that cut buffers store data in ISO-8859-1 encoding,
while selections can store data in a variety of formats and encodings.
While \fI\*n\fP owns the selection, it highlights it.
When it loses the selection, it removes the corresponding highlight.
But you can still paste from the corresponding cut buffer.
.NS
*VT100*translations:    #override \\n\\\&
   ~Shift~Ctrl<Btn2Up>: \fBinsert-selection\fP(\fBPRIMARY\fP, CUT_BUFFER0) \\n\\\&
    Shift~Ctrl<Btn2Up>: \fBinsert-selection\fP(\fBCLIPBOARD\fP, CUT_BUFFER1) \\n\\\&
   ~Shift     <BtnUp> : \fBselect-end\fP(\fBPRIMARY\fP, CUT_BUFFER0) \\n\\\&
    Shift     <BtnUp> : \fBselect-end\fP(\fBCLIPBOARD\fP, CUT_BUFFER1)
.NE
.PP
In the example, the class name \fBVT100\fP is used rather than the widget name.
These are different; a class name could apply to more than one widget.
A leading \*(``*\*('' is used because the widget hierarchy above the
\fIvt100\fP widget depends on
whether the toolbar support is compiled into \fI\*n\fP.
.PP
Not everyone finds the three-button mouse bindings easy to use.
In a wheel mouse, the middle button might be the wheel.
As an alternative, you could add a binding shifted keys:
.NS
*VT100*translations:      #override \\n\\
    Shift <Key>Home:    \fBcopy-selection\fP(\fBSELECT\fP) \\n\\
    Shift <Key>Insert:  \fBcopy-selection\fP(\fBSELECT\fP) \\n\\
    Ctrl Shift <Key>C:  \fBcopy-selection\fP(\fBSELECT\fP) \\n\\
    Ctrl Shift <Key>V:  \fBinsert-selection\fP(\fBSELECT\fP)
.NE
.PP
You would still use the left- and right-mouse buttons (typically 1 and 3)
for beginning and extending selections. 
.PP
Besides mouse problems, there are also keyboards with inconvenient layouts.
Some lack a numeric keypad, making it hard to use the shifted keypad plus
and minus bindings for switching between font sizes.
You can work around that by assigning the actions to more readily accessed
keys:
.NS
*VT100*translations:      #override \\n\\
    Ctrl <Key> +:       \fBlarger-vt-font\fP() \\n\\
    Ctrl <Key> -:       \fBsmaller-vt-font\fP()
.NE
.PP
The keymap feature allows you to switch between sets of translations.
The sample below shows
how the \fBkeymap()\fP action may be used to add special
keys for entering commonly-typed words:
.NS
*VT100.Translations: #override <Key>F13: keymap(dbx)
*VT100.dbxKeymap.translations: \\\&
        <Key>F14:       \fBkeymap\fP(None) \\n\\\&
        <Key>F17:       \fBstring\fP("next") \\n\\
                        \fBstring\fP(0x0d) \\n\\\&
        <Key>F18:       \fBstring\fP("step") \\n\\
                        \fBstring\fP(0x0d) \\n\\\&
        <Key>F19:       \fBstring\fP("continue") \\n\\
                        \fBstring\fP(0x0d) \\n\\\&
        <Key>F20:       \fBstring\fP("print ") \\n\\
                        \fBinsert-selection\fP(\fBPRIMARY\fP, CUT_BUFFER0)
.NE
.SS Default Scrollbar Bindings
.PP
Key bindings are normally associated with the \fIvt100\fP or \fItek4014\fP
widgets which act as terminal emulators.
\fI\*N\fP's scrollbar (and toolbar if it is configured) are separate widgets.
Because all of these use the X Toolkit,
they have corresponding \fBtranslations\fP resources.
Those resources are distinct,
and match different patterns, e.g., the differences in widget-name and
number of levels of widgets which they may contain.
.PP
The \fIscrollbar\fP widget is a child of the \fIvt100\fP widget.
It is positioned on top of the \fIvt100\fP widget.
Toggling the scrollbar on and off causes the \fIvt100\fP widget to resize.
.PP
The default bindings for the scrollbar widget use only mouse-button events:
.NS
   <Btn5Down>: StartScroll(Forward) \\n\\\&
   <Btn1Down>: StartScroll(Forward) \\n\\\&
   <Btn2Down>: StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
   <Btn3Down>: StartScroll(Backward) \\n\\\&
   <Btn4Down>: StartScroll(Backward) \\n\\\&
   <Btn2Motion>: MoveThumb() NotifyThumb() \\n\\\&
   <BtnUp>:    NotifyScroll(Proportional) EndScroll()
.NE
.PP
Events which the \fIscrollbar\fP widget does not recognize at all are lost.
.PP
However, at startup, \fI\*n\fP augments these translations with the default
translations used for the \fIvt100\fP widget,
together with the resource \*(``actions\*('' which those translations use.
Because the \fIscrollbar\fP (or \fImenubar\fP) widgets do not recognize these
actions (but because it has a corresponding translation),
they are passed on to the \fIvt100\fP widget.
.PP
This augmenting of the scrollbar's translations has a few limitations:
.bP
\fI\*N\fP knows what the default translations are,
but there is no suitable library interface for determining what
customizations a user may have added to the \fIvt100\fP widget.
All that \fI\*n\fP can do is augment the \fIscrollbar\fP widget to
give it the same starting point for further customization by the user.
.bP
Events in the gap between the widgets may be lost.
.bP
Compose sequences begun in one widget cannot be completed in the other,
because the input methods for each widget do not share context information.
.PP
Most customizations of the scrollbar translations do not concern key bindings.
Rather, users are generally more interested in changing the bindings of the
mouse buttons.
For example, some people prefer using the left pointer button
for dragging the scrollbar thumb.
That can be set up by altering the translations resource, e.g.,
.NS
*VT100.scrollbar.translations:  #override \\n\\\&
   <Btn5Down>:     StartScroll(Forward) \\n\\\&
   <Btn1Down>:     StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
   <Btn4Down>:     StartScroll(Backward) \\n\\\&
   <Btn1Motion>:   MoveThumb() NotifyThumb() \\n\\\&
   <BtnUp>:        NotifyScroll(Proportional) EndScroll()
.NE
.SH "CONTROL SEQUENCES AND KEYBOARD"
Applications can send sequences of characters to the terminal to change its
behavior.
Often they are referred to as
\*(``ANSI escape sequences\*('' or just plain
\*(``escape sequences\*('' but both terms are misleading:
.bP
ANSI x3.64 (obsolete) which was replaced by ISO 6429 (ECMA-48) gave rules
for the \fIformat\fP of these sequences of characters.
.bP
While the original VT100 was claimed to be ANSI-compatible (against x3.64),
there is no freely available version of the ANSI standard to show where
the VT100 differs.
Most of the documents which mention the ANSI standard have
additions not found in the original (such as those
based on \fBansi.sys\fP).
So this discussion focuses on the ISO standards.
.bP
The standard describes only sequences sent from the host to the terminal.
There is no standard for sequences sent by special keys from the terminal
to the host.
By convention (and referring to existing terminals), the format of those
sequences usually conforms to the host-to-terminal standard.
.bP
Some of \fI\*n\fP's sequences do not fit into the standard scheme.
Technically those are \*(``unspecified\*(''.
As an example,
DEC Screen Alignment Test (DECALN) is this three-character sequence:
.NS
\fIESC\fP # 8
.NE
.PP
.bP
Some sequences fit into the standard format,
but are not listed in the standard.
These include the sequences used for setting up scrolling margins
and doing forward/reverse scrolling.
.bP
Some of the sequences (in particular, the single-character functions
such as tab and backspace)
do not include the \fIescape\fP character.
.PP
With all of that in mind, the standard refers to these sequences of
characters as \*(``control sequences\*(''.
.PP
\fI\*N Control Sequences\fP lists the control sequences which
an application can send \fI\*n\fP to make it perform various operations.
Most of these operations are standardized, from either the DEC or Tektronix
terminals, or from more widely used standards such as ISO-6429.
.PP
A few examples of usage are given in this section.
.SS Window and Icon Titles
.PP
Some scripts use \fBecho\fP with options \fB\-e\fP and \fB\-n\fP to tell
the shell to interpret the string \*(``\\e\*('' as the \fIescape\fP character and
to suppress a trailing newline on output.
Those are not portable, not recommended.
Instead, use \fBprintf\fP (POSIX).
.PP
For example, to set the \fIwindow title\fP to \*(``Hello world!\*('',
you could use one of these commands in a script:
.NS
printf '\\033]2;Hello world!\\033\\'
printf '\\033]2;Hello world!\\007'
printf '\\033]2;%s\\033\\' "Hello world!"
printf '\\033]2;%s\\007' "Hello world!"
.NE
.PP
The \fBprintf\fP command interprets the octal value \*(``\\033\*('' for
\fIescape\fP, and (since it was not given in the format) omits a trailing
newline from the output.
.PP
Some programs (such as \fBscreen\fP(1)) set both window- and icon-titles
at the same time, using a slightly different control sequence:
.NS
printf '\\033]0;Hello world!\\033\\'
printf '\\033]0;Hello world!\\007'
printf '\\033]0;%s\\033\\' "Hello world!"
printf '\\033]0;%s\\007' "Hello world!"
.NE
.PP
The difference is the \fIparameter\fP \*(``0\*('' in each command.
Most window managers will honor either window title or icon title.
Some will make a distinction and allow you to set just the icon title.
You can tell \fI\*n\fP to ask for this with a different parameter
in the control sequence:
.NS
printf '\\033]1;Hello world!\\033\\'
printf '\\033]1;Hello world!\\007'
printf '\\033]1;%s\\033\\' "Hello world!"
printf '\\033]1;%s\\007' "Hello world!"
.NE
.
.SS Special Keys
.PP
\fI\*N\fP, like any VT100-compatible terminal emulator,
has two modes for the \fIspecial keys\fP (cursor-keys, numeric keypad,
and certain function-keys):
.bP
\fInormal mode\fP, which makes the special keys transmit 
\*(``useful\*('' sequences such as the control sequence for cursor-up
when pressing the up-arrow, and
.bP
\fIapplication mode\fP,
which uses a different control sequence that cannot be mistaken for
the 
\*(``useful\*('' sequences.
.PP
The main difference between the two modes is that normal mode sequences
start with \fICSI\fP (\fIescape\ [\fP) and application mode sequences
start with \fISS3\fP (\fIescape\ O\fP).
.PP
The terminal is initialized into one of these two modes (usually the
normal mode), based on the terminal description (termcap or terminfo).
The terminal description also has capabilities (strings) defined for
the keypad mode used in curses applications.
.PP
There is a problem in using the terminal description for applications
that are not intended to be full-screen curses applications:
the definitions of special keys are only correct for this keypad mode.
For example, some shells
(unlike \fBksh\fP(1), which appears to be hard-coded, not even using termcap)
allow their users to customize key-bindings,
assigning shell actions to special keys.
.bP
\fBbash\fP(1) allows \fIconstant\fP strings to be assigned
to functions.
This is only successful if the terminal is initialized to application
mode by default,
because \fBbash\fP lacks flexibility in this area.
It uses a (less expressive than \fBbash\fP's)
\fBreadline\fP scripting language for setting up key bindings,
which relies upon the user to statically enumerate the possible bindings for
given values of \fB$TERM\fP.
.bP
\fBzsh\fP(1) provides an analogous feature,
but it accepts runtime expressions,
as well as providing a \fB$terminfo\fP array for scripts.
In particular, one can use the terminal database,
transforming when defining a key-binding.
By transforming the output so that \fICSI\fP and \fISS3\fP are equated,
\fBzsh\fP can use the terminal database to obtain useful definitions
for its command-line use regardless of whether the terminal uses
normal or application mode initially.
Here is an example:
.NS
[[ "$terminfo[kcuu1]" == "^[O"* ]] && \\
bindkey -M viins "${terminfo[kcuu1]/O/[}" \\
vi-up-line-or-history
.NE
.
.
.SS Changing Colors
.PP
A few shell programs provide the ability for users to add color and other
video attributes to the shell prompt strings.
Users can do this by setting \fB$PS1\fP (the primary prompt string).
Again, \fBbash\fP and \fBzsh\fP have provided features not found in \fBksh\fP.
There is a problem, however: the prompt's width on the screen will not
necessarily be the same as the number of characters.
Because there is no guidance in the POSIX standard, each shell addresses
the problem in a different way:
.bP
\fBbash\fP treats characters within 
\*(``\\[\*('' and
\*(``\\]\*(''
as nonprinting (using no width on the screen).
.bP
\fBzsh\fP treats characters within 
\*(``%{\*('' and
\*(``%}\*(''
as nonprinting.
.PP
In addition to the difference in syntax,
the shells provide different methods for obtaining useful escape sequences:
.bP
As noted in \fBSpecial Keys\fP, \fBzsh\fP initializes the $terminfo array
with the terminal capabilities.
.IP
It also provides a function \fBechoti\fP which works like \fBtput\fP(1)
to convert a terminal capability with its parameters into a string
that can be written to the terminal.
.bP
Shells lacking a comparable feature (such as \fBbash\fP) can always
use the program \fBtput\fP to do this transformation.
.PP
Hard-coded escape sequences are supported by each shell,
but are not recommended because those rely upon particular configurations
and cannot be easily moved between different user environments.
.
.
.SH ENVIRONMENT
\fI\*N\fP sets several environment variables.
.SS System Independent
.PP
Some variables are used on every system:
.TP 5
.B DISPLAY
is the display name,
pointing to the X server (see \fIDISPLAY NAMES\fP in X(__miscmansuffix__)).
.TP 5
.B TERM
.br
is set according to the terminfo (or termcap) entry which it is using as
a reference.
.IP
On some systems, you may encounter situations where the shell which you
use and \fI\*n\fP are built using libraries with different terminal databases.
In that situation, \fI\*n\fP may choose a terminal description not known
to the shell.
.TP 5
.B WINDOWID
is set to the X window id number of the \fI\*n\fP window.
.TP 5
.B XTERM_FILTER
is set if a locale-filter is used.
The value is the pathname of the filter.
.TP 5
.B XTERM_LOCALE
shows the locale which was used by \fI\*n\fP on startup.
Some shell initialization scripts may set a different locale.
.TP 5
.B XTERM_SHELL
is set to the pathname of the program which is invoked.
Usually that is a shell program, e.g., \fI/bin/sh\fP.
Since it is not necessarily a shell program however,
it is distinct from \*(``SHELL\*(''.
.TP 5
.B XTERM_VERSION
is set to the string displayed by the \fB\-version\fP option.
That is normally an identifier for the X Window libraries used to
build \fI\*n\fP, followed by
\fI\*n\fP's patch number in parenthesis.
The patch number is also part of the response to a Secondary Device Attributes
(DA) control sequence (see \fIXterm Control Sequences\fP).
.
.SS System Dependent
.
.PP
Depending on your system configuration, \fI\*n\fP may also set the
following:
.TP 5
.B COLUMNS
the width of the \fI\*n\fP in characters (cf: \*(``stty columns\*('').
.IP
When this variable is set, \fIcurses\fP applications (and most
terminal programs) will assume that the terminal has this many columns.
.IP
\fI\*N\fP would do this for systems which have no ability
to tell the size of the terminal.
Those are very rare, none newer than the mid 1990s when SVR4 became prevalent.
.TP 5
.B HOME
.br
when \fI\*n\fP is configured (at build-time) to update utmp.
.TP 5
.B LINES
the height of the \fI\*n\fP in characters (cf: \*(``stty rows\*('').
.IP
When this variable is set, \fIcurses\fP applications (and most
terminal programs) will assume that the terminal has this many lines (rows).
.IP
\fI\*N\fP would do this for systems which have no ability
to tell the size of the terminal.
Those are very rare, none newer than the mid 1990s when SVR4 became prevalent.
.TP 5
.B LOGNAME
when \fI\*n\fP is configured (at build-time) to update utmp.
.IP
Your configuration may have set \fBLOGNAME\fP; \fI\*n\fP does not modify that.
If it is unset, \fI\*n\fP will use \fBUSER\fP if it is set.
Finally, if neither is set, \fI\*n\fP will use the \fBgetlogin\fP(2) function.
.TP 5
.B SHELL
when \fI\*n\fP is configured (at build-time) to update utmp.
It is also set if you provide a valid shell name as the optional parameter.
.IP
\fI\*N\fP sets this to an absolute pathname.
If you have set the variable to a relative pathname,
\fI\*n\fP may set it to a different shell pathname.
.IP
If you have set this to an pathname which does not correspond to a valid
shell, \fI\*n\fP may unset it, to avoid confusion.
.TP 5
.B TERMCAP
the contents of the termcap entry corresponding to \fB$TERM\fP,
with lines and columns values substituted
for the actual size window you have created.
.IP
This feature is, like \fBLINES\fP and \fBCOLUMNS\fP, used rarely.
It addresses the same limitation of a few older systems
by providing a way for \fItermcap\fP-based applications to get the initial
screensize.
.TP 5
.B TERMINFO
may be defined to a nonstandard location using the configure script.
.\"
.
.
.SH FILES
The actual pathnames given may differ on your system.
.TP 5
\fI/etc/shells\fP
contains a list of valid shell programs,
used by \fI\*n\fP to decide if the \*(``SHELL\*('' environment
variable should be set for the process started by \fI\*n\fP.
.TP 5
\fI/etc/utmp\fP
the system logfile, which records user logins.
.TP 5
\fI/etc/wtmp\fP
the system logfile, which records user logins and logouts.
.TP 5
.I __apploaddir__/__default_class__
the \fI\*n\fP default application resources.
.TP 5
.I __apploaddir__/__default_class__\-color
the \fI\*n\fP color application resources.
If your display supports color, use this
.in +10
*customization: \-color
.in -10
in your .Xdefaults file to
automatically use this resource file rather than
.IR __apploaddir__/__default_class__ .
If you do not do this,
\fI\*n\fP uses its compiled-in default resource settings for colors.
.TP 5
.I __pixmapsdir__
the directory in which \fI\*n\fP's pixmap icon files are installed.
.
.
.SH ERROR MESSAGES
Most of the fatal error messages from \fI\*n\fP use the following format:
.NS
\*n: Error \fIXXX\fP, errno \fIYYY\fP: \fIZZZ\fR
.NE
.PP
The \fIXXX\fP codes (which are used by \fI\*n\fP as its exit-code)
are listed below, with a brief explanation.
.TP 5
1
is used for miscellaneous errors, usually accompanied by a specific message,
.TP
11
ERROR_FIONBIO
.br
main: ioctl() failed on FIONBIO
.TP
12
ERROR_F_GETFL
.br
main: ioctl() failed on F_GETFL
.TP
13
ERROR_F_SETFL
.br
main: ioctl() failed on F_SETFL
.TP
14
ERROR_OPDEVTTY
.br
spawn: open() failed on /dev/tty
.TP
15
ERROR_TIOCGETP
.br
spawn: ioctl() failed on TIOCGETP
.TP
17
ERROR_PTSNAME
.br
spawn: ptsname() failed
.TP
18
ERROR_OPPTSNAME
.br
spawn: open() failed on ptsname
.TP
19
ERROR_PTEM
.br
spawn: ioctl() failed on I_PUSH/"ptem"
.TP
20
ERROR_CONSEM
.br
spawn: ioctl() failed on I_PUSH/"consem"
.TP
21
ERROR_LDTERM
.br
spawn: ioctl() failed on I_PUSH/"ldterm"
.TP
22
ERROR_TTCOMPAT
.br
spawn: ioctl() failed on I_PUSH/"ttcompat"
.TP
23
ERROR_TIOCSETP
.br
spawn: ioctl() failed on TIOCSETP
.TP
24
ERROR_TIOCSETC
.br
spawn: ioctl() failed on TIOCSETC
.TP
25
ERROR_TIOCSETD
.br
spawn: ioctl() failed on TIOCSETD
.TP
26
ERROR_TIOCSLTC
.br
spawn: ioctl() failed on TIOCSLTC
.TP
27
ERROR_TIOCLSET
.br
spawn: ioctl() failed on TIOCLSET
.TP
28
ERROR_INIGROUPS
.br
spawn: initgroups() failed
.TP
29
ERROR_FORK
.br
spawn: fork() failed
.TP
30
ERROR_EXEC
.br
spawn: exec() failed
.TP
32
ERROR_PTYS
.br
get_pty: not enough ptys
.TP
34
ERROR_PTY_EXEC
.br
waiting for initial map
.TP
35
ERROR_SETUID
.br
spawn: setuid() failed
.TP
36
ERROR_INIT
.br
spawn: can't initialize window
.TP
46
ERROR_TIOCKSET
.br
spawn: ioctl() failed on TIOCKSET
.TP
47
ERROR_TIOCKSETC
.br
spawn: ioctl() failed on TIOCKSETC
.TP
49
ERROR_LUMALLOC
.br
luit: command-line malloc failed
.TP
50
ERROR_SELECT
.br
in_put: select() failed
.TP
54
ERROR_VINIT
.br
VTInit: can't initialize window
.TP
57
ERROR_KMMALLOC1
.br
HandleKeymapChange: malloc failed
.TP
60
ERROR_TSELECT
.br
Tinput: select() failed
.TP
64
ERROR_TINIT
.br
TekInit: can't initialize window
.TP
71
ERROR_BMALLOC2
.br
SaltTextAway: malloc() failed
.TP
80
ERROR_LOGEXEC
.br
StartLog: exec() failed
.TP
83
ERROR_XERROR
.br
xerror: XError event
.TP
84
ERROR_XIOERROR
.br
xioerror: X I/O error
.TP
85
ERROR_ICEERROR
.br
ICE I/O error
.TP
90
ERROR_SCALLOC
.br
Alloc: calloc() failed on base
.TP
91
ERROR_SCALLOC2
.br
Alloc: calloc() failed on rows
.TP
102
ERROR_SAVE_PTR
.br
ScrnPointers: malloc/realloc() failed
.
.
.SH BUGS
.
.PP
Large pastes do not work on some systems.
This is not a bug in
\fI\*n\fP; it is a bug in the pseudo terminal driver of those
systems.
\fI\*N\fP feeds large pastes to the pty only as fast as the pty
will accept data, but some pty drivers do not return enough information
to know if the write has succeeded.
.
.PP
When connected to an input method, it is possible for \*n to hang
if the XIM server is suspended or killed.
.
.PP
Many of the options are not resettable after
.I \*n
starts.
.
.PP
This program still needs to be rewritten.
It should be split into very
modular sections, with the various emulators being completely separate
widgets that do not know about each other.
Ideally, you'd like to be able to
pick and choose emulator widgets and stick them into a single control widget.
.
.PP
There needs to be a dialog box to allow entry of the Tek COPY file name.
.
.
.SH "SEE ALSO"
.na
resize(__mansuffix__),
luit(__mansuffix__),
u\*n(__mansuffix__),
X(__miscmansuffix__),
pty(4),
tty(4)
.ad
.PP
\fIXterm Control Sequences\fP
(this is the file ctlseqs.ms).
.sp
http://invisible-island.net/xterm/xterm.html
.br
http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
.br
http://invisible-island.net/xterm/xterm.faq.html
.
.
.SH AUTHORS
Far too many people, including:
.sp
Loretta Guarino Reid (DEC-UEG-WSL),
Joel McCormack (DEC-UEG-WSL), Terry Weissman (DEC-UEG-WSL),
Edward Moy (Berkeley), Ralph R. Swick (MIT-Athena),
Mark Vandevoorde (MIT-Athena), Bob McNamara (DEC-MAD),
Jim Gettys (MIT-Athena), Bob Scheifler (MIT X Consortium), Doug Mink (SAO),
Steve Pitschke (Stellar), Ron Newman (MIT-Athena), Jim Fulton (MIT X
Consortium), Dave Serisky (HP), Jonathan Kamens (MIT-Athena),
Jason Bacon,
Jens Schweikhardt,
Ross Combs,
Stephen P. Wall,
David Wexelblat, and
Thomas Dickey (invisible-island.net).
.SH OPENBSD SPECIFICS
On OpenBSD, the Tektronix 4014 emulation is disabled and the following
resources have different default values: 
.TP 8
.B allowFontOps: false
.TP 8
.B allowWindowOps: false
Various, potentially dangerous, extended window control sequences are disabled.
.TP 8
.B deleteIsDEL: true
The Delete key generates \fB^?\fP. 
.TP 8
.B ptyInitialErase: true
The erase character for the tty is inherited from the parent
process setting, generally \fB^?\fP. 
.TP 8
.B backarrowKeyIsErase: true
The back arrow key is set to return the erase character defined in the
tty, generally \fB^?\fP. 
.PP
Moreover, on OpenBSD the 
.IR termcap(5)
entry for xterm defines the 
.I kb 
capability as \fB^?\fP
.PP
The u\*n and koi8r\*n shell scripts are not provided by OpenBSD.
@


1.45
log
@Update to xterm 327
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.690 2016/10/06 22:57:58 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2015,2016 by Thomas E. Dickey
d64 2
a65 1
.IP \(bu 4
d70 4
a73 2
.sp
.in +4
d131 1
a131 1
The VT52 emulation is complete.
d133 3
a135 2
The VT102 emulation is fairly complete, but does not support
autorepeat.
d139 1
a139 1
The VT220 emulation does not support soft fonts, it is otherwise complete.
d141 1
a141 1
The VT420 emulation (the default) supports controls for manipulating rectangles
d143 1
d164 2
a165 1
sets the \*(``TERM\*('' and the \*(``TERMCAP\*('' environment variables.
d285 6
a290 5
The \fI\*n\fP terminal emulator
accepts the standard X Toolkit command line options as well as
many application-specific options.
If the option begins with a
.RB ` + '
d292 1
a292 1
.RB ` \- ',
d295 18
a335 14
.\" ***************************************************************************
.PP
Most of the \fI\*n\fP options are actually parsed by the X Toolkit,
which sets resource values.
\fI\*N\fP provides the X Toolkit with a table of options.
A few of these are marked, telling the X Toolkit to ignore them
(\fB\-help\fP,
\fB\-version\fP,
\fB\-class\fP,
\fB\-e\fP, and
\fB\-into\fP).
After the X Toolkit has parsed the command-line parameters,
it removes those which it handles,
leaving the specially-marked parameters for \fI\*n\fP to handle.
d623 3
d1003 4
d1158 2
a1159 1
sets the \*(``TERM\*('' and the \*(``TERMCAP\*('' environment variables.
d1457 11
d1471 1
a1471 1
The program understands all of the core X Toolkit resource names and classes.
d1704 7
d1764 1
d1766 1
a1766 1
which \fI\*n\fP sets.
d2045 5
d2445 4
a2448 1
[\fIlow\fP-]\fIhigh\fP:\fIvalue\fP.
d2686 4
a2695 4
.B "cursorUnderLine\fP (class\fB CursorUnderLine\fP)"
Specifies whether to make the cursor underlined or a box.
The default is \*(``false\*(''.
.TP 8
d2772 47
d3041 5
d3051 13
a3063 3
If not specified,
or if there is no match for both normal and bold fonts,
\fI\*n\fR uses the bitmap \fBfont\fP and related resources.
d3088 3
d3331 1
a3331 1
true	true	default	default	fg/fg (useless)
d3417 1
a3417 1
.B "inputMethod\fP (class\fB XtCInputMethod\fP)"
d3506 1
d3515 11
d3555 1
a3555 1
.B "logFile\fP (class\fB LogFile\fP)"
d3567 1
a3567 1
.B "logging\fP (class\fB logging\fP)"
d3579 22
d3619 2
a3620 1
The default (for the allowed number of mismatches) is 256.
d3625 1
a3625 1
The default (number of characters to check) is 1024.
d3780 20
d3875 1
a3875 1
.B "openIm\fP (class\fB XtCOpenIm\fP)"
d3918 1
a3918 1
.B "precompose\fP (class\fB XtCPrecompose\fP)"
d3924 1
a3924 1
.B "preeditType\fP (class\fB XtCPreeditType\fP)"
d4066 4
a4069 2
.B "privateColorRegisters\fP (class\fB privateColorRegisters\fP)"
If true, allocate separate color registers for each sixel
d4072 2
a4073 1
when the terminal is reset.
d4082 11
d4095 9
a4103 1
this resource tells \fI\*n\fR the maximum size (in pixels) for graphics.
d4107 2
a4108 5
set the maximum size based on the hardware terminal's limits.
Otherwise, \fI\*n\fR expects the size to be given as \fIheight\fPx\fIwidth\fP,
e.g., \*(``800x1000\*(''.
.IP
The default resource value is \*(``800x1000\*(''.
d4162 1
a4162 1
.B "retryInputMethod\fP (class\fB XtCRetryInputMethod\fP)"
d4270 2
a4271 2
Tells \fI\*n\fP whether to use the PRIMARY or CLIPBOARD for
SELECT tokens in the selection mechanism.
d4275 1
a4275 1
The default is \*(``false\*('', which tells it to use PRIMARY.
d4308 3
a4310 1
If true, graphics scroll up one line at a time when sixels would be written
d4314 7
d4353 2
a4354 1
Specifies whether or not \fI\*n\fP should remove \fIti\fP and \fIte\fP
d4357 4
d4364 1
d4368 2
d4473 1
a4473 1
The resource can be set via the menu entry \*(``UTF-8 Fonts\*(''.
d4991 20
a5010 1
allows you to select text and copy it within the same or other windows.
d5019 7
a5025 2
.PP
Pointer button one (usually left) is used to save text into the cut buffer.
d5029 6
a5034 2
The selected text is highlighted and is saved in the global cut buffer
and made the PRIMARY selection when the button is released.
d5036 1
d5044 2
a5045 1
.PP
d5055 8
a5062 5
.PP
Pointer button two (usually middle) \*(``types\*('' (pastes) the text from
the PRIMARY selection, if any, otherwise from
the cut buffer,
inserting it as keyboard input.
d5064 7
a5070 2
.PP
Pointer button three (usually right) extends the current selection.
d5137 1
a5137 1
.SS Primary
d5154 1
a5154 1
.SS Clipboard
d5160 1
a5160 1
The PRIMARY token is a standard X feature, documented in the ICCCM
d5165 1
a5165 1
The selection named by the atom PRIMARY is used for all commands that take only a single argument and is the principal means of communication between clients that use the selection mechanism.
d5167 1
d5169 1
a5169 1
However, many applications use CLIPBOARD in imitation of other windowing
d5173 1
a5173 1
to \fI\*n\fP) which chooses between the PRIMARY and CLIPBOARD tokens.
d5186 1
a5186 1
.RS
d5237 22
d5620 2
a5621 2
Tell \fI\*n\fP whether to use the PRIMARY or CLIPBOARD
for SELECT tokens in the \fBtranslations\fP resource which
d5677 3
d5686 1
d5798 1
a5798 1
the current selection as a font name (if the PRIMARY selection is owned).
d5843 2
a5844 1
It combines the \fButf8\fP and \fButf8Fonts\fP resources.
d5880 5
d6036 1
d6041 2
a6042 1
The \fIvalue\fP is arbitrary, although the default table uses the
d6045 1
a6045 1
UTF-8 mode, only the first 256 bytes of this table will be used.
d6110 1
a6110 1
/\(**  e`   e\*(AQ   e^   e:    i`  i\*(AQ   i^   i: */
d6150 4
d6212 1
a6212 1
        Meta <KeyPress> /:dabbrev-expand()
d6289 1
a6289 1
    <Btn1Up>: exec-formatted("xterm -e view '%t'", SELECT)
d6897 1
a6897 1
The default bindings in the VT\fIxxx\fP window use the SELECT token,
d6901 43
a6943 43
          Shift <KeyPress> Prior:scroll-back(1,halfpage) \\n\\\&
           Shift <KeyPress> Next:scroll-forw(1,halfpage) \\n\\\&
         Shift <KeyPress> Select:select-cursor-start() \\\&
                                 select-cursor-end(SELECT, CUT_BUFFER0) \\n\\\&
         Shift <KeyPress> Insert:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
                 Alt <Key>Return:fullscreen() \\n\\\&
        <KeyRelease> Scroll_Lock:scroll-lock() \\n\\\&
    Shift~Ctrl <KeyPress> KP_Add:larger-vt-font() \\n\\\&
    Shift Ctrl <KeyPress> KP_Add:smaller-vt-font() \\n\\\&
    Shift <KeyPress> KP_Subtract:smaller-vt-font() \\n\\\&
                ~Meta <KeyPress>:insert-seven-bit() \\n\\\&
                 Meta <KeyPress>:insert-eight-bit() \\n\\\&
                !Ctrl <Btn1Down>:popup-menu(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>:popup-menu(mainMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn1Down>:popup-menu(mainMenu) \\n\\\&
     ! @@Num_Lock Ctrl <Btn1Down>:popup-menu(mainMenu) \\n\\\&
                ~Meta <Btn1Down>:select-start() \\n\\\&
              ~Meta <Btn1Motion>:select-extend() \\n\\\&
                !Ctrl <Btn2Down>:popup-menu(vtMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>:popup-menu(vtMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn2Down>:popup-menu(vtMenu) \\n\\\&
     ! @@Num_Lock Ctrl <Btn2Down>:popup-menu(vtMenu) \\n\\\&
          ~Ctrl ~Meta <Btn2Down>:ignore() \\n\\\&
                 Meta <Btn2Down>:clear-saved-lines() \\n\\\&
            ~Ctrl ~Meta <Btn2Up>:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
                !Ctrl <Btn3Down>:popup-menu(fontMenu) \\n\\\&
           !Lock Ctrl <Btn3Down>:popup-menu(fontMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn3Down>:popup-menu(fontMenu) \\n\\\&
     ! @@Num_Lock Ctrl <Btn3Down>:popup-menu(fontMenu) \\n\\\&
          ~Ctrl ~Meta <Btn3Down>:start-extend() \\n\\\&
              ~Meta <Btn3Motion>:select-extend() \\n\\\&
                 Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
            Lock Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
  Lock @@Num_Lock Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
       @@Num_Lock Ctrl <Btn4Down>:scroll-back(1,halfpage,m) \\n\\\&
                      <Btn4Down>:scroll-back(5,line,m)     \\n\\\&
                 Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
            Lock Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
  Lock @@Num_Lock Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
       @@Num_Lock Ctrl <Btn5Down>:scroll-forw(1,halfpage,m) \\n\\\&
                      <Btn5Down>:scroll-forw(5,line,m)     \\n\\\&
                         <BtnUp>:select-end(SELECT, CUT_BUFFER0) \\n\\\&
                       <BtnDown>:ignore()
d6949 16
a6964 16
                 ~Meta<KeyPress>: insert-seven-bit() \\n\\\&
                  Meta<KeyPress>: insert-eight-bit() \\n\\\&
                !Ctrl <Btn1Down>: popup-menu(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>: popup-menu(mainMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn1Down>: popup-menu(mainMenu) \\n\\\&
      !Ctrl @@Num_Lock <Btn1Down>: popup-menu(mainMenu) \\n\\\&
                !Ctrl <Btn2Down>: popup-menu(tekMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>: popup-menu(tekMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn2Down>: popup-menu(tekMenu) \\n\\\&
      !Ctrl @@Num_Lock <Btn2Down>: popup-menu(tekMenu) \\n\\\&
           Shift ~Meta<Btn1Down>: gin-press(L) \\n\\\&
                 ~Meta<Btn1Down>: gin-press(l) \\n\\\&
           Shift ~Meta<Btn2Down>: gin-press(M) \\n\\\&
                 ~Meta<Btn2Down>: gin-press(m) \\n\\\&
           Shift ~Meta<Btn3Down>: gin-press(R) \\n\\\&
                 ~Meta<Btn3Down>: gin-press(r)
d6966 4
d6983 4
a6986 4
    ~Shift~Ctrl<Btn2Up>: insert-selection(PRIMARY, CUT_BUFFER0) \\n\\\&
    Shift~Ctrl<Btn2Up>:  insert-selection(CLIPBOARD, CUT_BUFFER1) \\n\\\&
    ~Shift<BtnUp>:       select-end(PRIMARY, CUT_BUFFER0) \\n\\\&
    Shift<BtnUp>:        select-end(CLIPBOARD, CUT_BUFFER1)
d6990 1
a6990 2
These are different;
the class name provides a more-specific match than the widget name.
d6995 27
a7021 1
Below is shown a sample of
d7027 9
a7035 5
        <Key>F14:       keymap(None) \\n\\\&
        <Key>F17:       string("next") string(0x0d) \\n\\\&
        <Key>F18:       string("step") string(0x0d) \\n\\\&
        <Key>F19:       string("continue") string(0x0d) \\n\\\&
        <Key>F20:       string("print ") insert-selection(PRIMARY, CUT_BUFFER0)
d7291 4
a7294 1
\fI\*N\fP sets several environment variables:
d7335 2
d7343 7
d7353 1
a7353 1
when \fI\*n\fP is configured to update utmp.
d7357 7
d7366 5
a7370 1
when \fI\*n\fP is configured to update utmp.
d7373 1
a7373 1
when \fI\*n\fP is configured to update utmp.
d7387 5
d7394 1
a7394 1
may be defined to a nonstandard location in the configure script.
@


1.44
log
@Stop providing the uxterm and koi8rxterm shell scripts.
Requested by schwarze@@ agreed naddy@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.637 2016/06/05 20:51:19 tom Exp $
d76 1
a76 1
.ft P
d89 3
d96 2
d100 1
a100 1
terminals such as VT320/VT420/VT520 (VTxxx).
d109 1
a109 1
The VTxxx and Tektronix 4014 terminals each have their own window so that you
d122 2
a123 2
the \*(``VT Options\*('' menu in the VTxxx window, and the \*(``Tek Options\*(''
menu in the 4014 window.
d126 4
d134 1
d136 5
d160 31
a190 1
You may also use \*(``vt220\*('',  but must set the terminal emulation level
d192 1
d203 2
a204 5
through a set of escape sequences different from the standard VT102 escape
sequences.
(See the
.I "Xterm Control Sequences"
document.)
d214 1
a214 3
the
.B Tektronix
menu; see below).
d216 5
a220 1
\*(``\fBCOPY\fIyyyy\fB\-\fIMM\fB\-\fIdd\fB.\fIhh\fB:\fImm\fB:\fIss\fR\*('', where
d249 1
a249 1
In VT102 mode, there are escape sequences to activate and deactivate
d264 1
a264 1
In either VT102 or Tektronix mode, there are escape sequences to change the
d266 1
a266 1
Additionally, in VT102 mode,
d305 1
a305 1
\fB\*n \-z\fP
d363 1
a363 1
This happens with the color (\fB\-fg\fP, \fB\-B\fP) and reverse (\fB\-rv\fP)
d458 1
a458 1
That is the \fIvt100\fP \fIinternalBorder\fP resource.
d462 6
d478 1
a478 1
\fIcursorOffTime\fP resource.
d482 1
a482 1
\fIcursorOnTime\fP resource.
d501 1
a501 3
words.
See the section specifying character classes
and discussion of the \fIcharClass\fP resource.
d526 1
a526 1
It sets the \fIcolorMode\fP resource to \*(``false\*(''.
d535 1
a535 1
It sets the \fIcutNewline\fP resource to \*(``false\*(''.
d539 1
a539 1
It sets the \fIcutNewline\fP resource to \*(``true\*(''.
d545 1
a545 1
It sets the \fIcursorColor\fP resource according to the parameter.
d572 1
a572 1
The option sets the \fIdynamicColors\fP option to \*(``false\*(''.
d576 1
a576 1
The option sets the \fIdynamicColors\fP option to \*(``true\*(''.
d578 1
a578 1
.BI \-e " program \fP[ \fIarguments \fP.\|.\|. ]\fI"
d584 2
a585 1
\fBThis must be the last option on the command line.\fP
d771 1
a771 1
disabling smooth scroll as well as the \*(``VT Options\*(''
d803 10
a812 5
.BR hpFunctionKeys ,
.BR scoFunctionKeys ,
.BR sunFunctionKeys ,
.BR tcapFunctionKeys ,
.BR oldXtermFKeys
d814 3
a816 1
.BR sunKeyboard ,
d820 2
a821 2
Turn logging on.
Normally logging is not supported, due to security concerns.
d823 17
a839 2
The logfile is written to the directory from which \fI\*n\fP is
invoked.
d841 4
a844 3
.sp
	XtermLog.\fIXXXXXX\fR
.sp
d846 4
a849 3
.sp
	Xterm.log.\fIhostname.yyyy.mm.dd.hh.mm.ss.XXXXXX\fR
.sp
d851 1
d885 1
d961 1
a961 1
This sets the \fIpointerColor\fP resource.
d975 2
a976 2
This option enables the PC-style use of bold colors (see boldColors
resource).
d1016 1
a1016 1
the \*(``VT Options\*('' menu.
d1047 1
a1047 2
This option may be turned on and off from the
\*(``VT Options\*('' menu.
d1077 1
a1077 1
This option can be turned on and off from the \*(``VT Options\*('' menu.
d1119 1
a1119 1
than in VT102 mode.
d1143 1
a1143 1
This option indicates that \fI\*n\fP should start in VT102 mode.
d1150 1
a1150 1
the popup menus, e.g., control/left/mouse for \*(``Main Options\*(''.
d1164 1
a1164 1
The term_id argument specifies the terminal ID to use.
d1328 1
a1328 1
It is shorthand for specifying the \*(``\fI*tekGeometry\fP\*('' resource.
d1332 1
a1332 1
It is shorthand for specifying the \*(``\fI*iconGeometry\fP\*('' resource.
d1340 2
a1341 2
It is shorthand for specifying the \*(``\fI*iconName\fP\*('' resource.
Note that this is not the same as the toolkit option \fB\-name\fP (see below).
d1383 1
a1383 1
This option specifies the X server to contact; see \fIX(__miscmansuffix__)\fP.
d1400 2
a1401 2
This option specifies the preferred size and position of the VT102 window;
see \fIX(__miscmansuffix__)\fP.
d1408 1
d1421 1
a1421 1
The corresponding resource name is \fIreverseVideo\fP.
d1445 2
a1446 2
.B "backarrowKeyIsErase (\fPclass\fB BackarrowKeyIsErase)"
Tie the VTxxx \fBbackarrowKey\fP and \fBptyInitialErase\fP resources
d1455 1
a1455 1
\fBbackarrowKeyIsErase\fP (BKIE),
d1457 1
a1457 1
\fBbackarrowKey\fP (BK), and
d1459 1
a1459 1
\fBptyInitialErase\fP (PIE), along with the
d1523 1
a1523 1
.B "fullscreen (\fPclass\fB Fullscreen)"
d1550 1
a1550 1
.B "hold (\fPclass\fB Hold)"
d1559 1
a1559 1
.B "hpFunctionKeys (\fPclass\fB HpFunctionKeys)"
d1567 1
a1567 1
.B "iconGeometry (\fPclass\fB IconGeometry)"
d1571 1
a1571 1
.B "iconHint (\fPclass\fB IconHint)"
d1622 1
a1622 1
.B "iconName (\fPclass\fB IconName)"
d1631 1
a1631 1
.B "keyboardType (\fPclass\fB KeyboardType)"
d1657 1
a1657 1
.B "maxBufSize (\fPclass\fB MaxBufSize)"
d1668 1
a1668 1
.B "maximized (\fPclass\fB Maximized)"
d1674 1
a1674 1
.B "messages (\fPclass\fB Messages)"
d1676 1
a1676 2
See
.BR mesg (1).
d1679 1
a1679 1
.B "menuLocale (\fPclass\fB MenuLocale)"
d1691 1
a1691 1
.B "minBufSize (\fPclass\fB MinBufSize)"
d1697 1
a1697 1
.B "omitTranslation (\fPclass\fB OmitTranslation)"
d1710 1
a1710 1
.B "ptyHandshake (\fPclass\fB PtyHandshake)
d1721 1
a1721 1
.B "ptyInitialErase (\fPclass\fB PtyInitialErase)"
d1733 1
a1733 1
.B "ptySttySize (\fPclass\fB PtySttySize)
d1746 6
a1751 1
.B "reportFonts (\fPclass\fB ReportFonts)"
d1756 1
a1756 1
.B "sameName (\fPclass\fB SameName)"
d1767 1
a1767 1
.B "scaleHeight (\fPclass\fB ScaleHeight)"
d1783 1
a1783 1
.B "scoFunctionKeys (\fPclass\fB ScoFunctionKeys)"
d1791 1
a1791 1
.B "sessionMgt (\fPclass\fB SessionMgt)"
d1797 1
a1797 1
.B "sunFunctionKeys (\fPclass\fB SunFunctionKeys)"
d1805 1
a1805 1
.B "sunKeyboard (\fPclass\fB SunKeyboard)"
d1822 1
a1822 1
(see the document \fIXterm Control Sequences\fP for details).
d1830 1
a1830 1
.B "tcapFunctionKeys (\fPclass\fB TcapFunctionKeys)"
d1841 1
a1841 1
.B "termName (\fPclass\fB TermName)"
d1844 1
a1844 1
.B "title (\fPclass\fB Title)"
d1848 1
a1848 1
.B "toolBar (\fPclass\fB ToolBar)"
d1853 1
a1853 1
.B "ttyModes (\fPclass\fB TtyModes)"
d1892 1
a1892 1
.B "useInsertMode (\fPclass\fB UseInsertMode)"
d1899 1
a1899 1
.B "utmpDisplayId (\fPclass\fB UtmpDisplayId)"
d1905 1
a1905 1
.B "utmpInhibit (\fPclass\fB UtmpInhibit)"
d1912 1
a1912 1
.B "waitForMap (\fPclass\fB WaitForMap)"
d1915 1
a1915 3
This is part of the
.B ptyHandshake
logic.
d1921 1
a1921 1
option \fB\-geom\fP.
d1924 1
a1924 1
.B "zIconBeep (\fPclass\fB ZIconBeep)"
d1934 1
a1934 1
.B "zIconTitleFormat (\fPclass\fB ZIconTitleFormat)"
d1956 1
a1956 1
.B "activeIcon (\fPclass\fB ActiveIcon)"
d1987 1
a1987 1
.B "allowBoldFonts (\fPclass\fB AllowBoldFonts)"
a1989 1
.B "alwaysBoldMode (\fPclass\fB AlwaysBoldMode)"
d1991 1
a1991 1
.B "allowC1Printable (\fPclass\fB AllowC1Printable)"
d1999 1
a1999 1
.B "allowColorOps (\fPclass\fB AllowColorOps)"
d2004 1
a2004 1
.B "allowFontOps (\fPclass\fB AllowFontOps)"
d2008 1
a2008 1
.B "allowPasteControls (\fPclass\fB AllowPasteControls)"
d2017 1
a2017 1
.B "allowScrollLock (\fPclass\fB AllowScrollLock)"
d2038 1
a2038 1
.B "allowSendEvents (\fPclass\fB AllowSendEvents)"
d2046 1
a2046 1
.B "allowTcapOps (\fPclass\fB AllowTcapOps)"
d2068 1
a2068 1
.B "allowTitleOps (\fPclass\fB AllowTitleOps)"
d2073 1
a2073 1
.B "allowWindowOps (\fPclass\fB AllowWindowOps)"
d2085 1
a2085 1
.B "altIsNotMeta (\fPclass\fB AltIsNotMeta\fP)"
d2093 1
a2093 1
.B "altSendsEscape (\fPclass\fB AltSendsEscape\fP)"
d2115 1
a2115 1
.B "alternateScroll (\fPclass\fB ScrollCond)"
d2123 1
a2123 1
.B "alwaysBoldMode (\fPclass\fB AlwaysBoldMode)"
d2162 1
a2162 1
.B "alwaysHighlight (\fPclass\fB AlwaysHighlight)"
d2170 1
a2170 1
.B "alwaysUseMods (\fPclass\fB AlwaysUseMods)"
d2179 1
a2179 1
.B "answerbackString (\fPclass\fB AnswerbackString)"
d2185 1
a2185 1
.B "appcursorDefault (\fPclass\fB AppcursorDefault)"
d2190 1
a2190 1
.B "appkeypadDefault (\fPclass\fB AppkeypadDefault)"
d2194 1
a2194 1
.B "assumeAllChars (\fPclass\fB AssumeAllChars)"
d2204 1
a2204 1
.B "autoWrap (\fPclass\fB AutoWrap)"
d2210 1
a2210 1
.B "awaitInput (\fPclass\fB AwaitInput)"
d2215 1
a2215 1
.B "backarrowKey (\fPclass\fB BackarrowKey)"
d2224 1
a2224 1
.B "background (\fPclass\fB Background)"
d2229 1
a2229 1
.B "bellIsUrgent (\fPclass\fB BellIsUrgent)"
d2234 1
a2234 1
.B "bellOnReset (\fPclass\fB BellOnReset)"
d2238 1
a2238 1
.B "bellSuppressTime (\fPclass\fB BellSuppressTime)"
d2248 1
a2248 1
.B "boldColors (\fPclass\fB ColorMode)"
d2254 1
a2254 1
.B "boldFont (\fPclass\fB BoldFont)"
d2264 1
a2264 1
.B "boldMode (\fPclass\fB BoldMode)"
d2311 1
a2311 1
.B "brokenLinuxOSC (\fPclass\fB BrokenLinuxOSC)"
d2318 2
a2319 3
.B "brokenSelections (\fPclass\fB BrokenSelections)"
If true, \fI\*n\fP in 8-bit mode will interpret
.B STRING
d2321 1
a2321 3
Normally
.B STRING
selections carry ISO-8859-1 encoded text.
d2327 1
a2327 1
.B "brokenStringTerm (\fPclass\fB BrokenStringTerm)"
d2383 1
a2383 1
.B "c132 (\fPclass\fB C132)"
d2388 1
a2388 1
.B "cacheDoublesize (\fPclass\fB CacheDoublesize)"
d2392 1
a2392 1
.B "cdXtraScroll (\fPclass\fB CdXtraScroll)"
d2400 1
a2400 1
.B "charClass (\fPclass\fB CharClass)"
d2407 1
a2407 1
.B "cjkWidth (\fPclass\fB CjkWidth)"
d2419 1
a2419 1
.B "color0 (\fPclass\fB Color0)"
d2421 1
a2421 1
.B "color1 (\fPclass\fB Color1)"
d2423 1
a2423 1
.B "color2 (\fPclass\fB Color2)"
d2425 1
a2425 1
.B "color3 (\fPclass\fB Color3)"
d2427 1
a2427 1
.B "color4 (\fPclass\fB Color4)"
d2429 1
a2429 1
.B "color5 (\fPclass\fB Color5)"
d2431 1
a2431 1
.B "color6 (\fPclass\fB Color6)"
d2433 1
a2433 1
.B "color7 (\fPclass\fB Color7)"
d2449 1
a2449 1
.B "color8 (\fPclass\fB Color8)"
d2451 1
a2451 1
.B "color9 (\fPclass\fB Color9)"
d2453 1
a2453 1
.B "color10 (\fPclass\fB Color10)"
d2455 1
a2455 1
.B "color11 (\fPclass\fB Color11)"
d2457 1
a2457 1
.B "color12 (\fPclass\fB Color12)"
d2459 1
a2459 1
.B "color13 (\fPclass\fB Color13)"
d2461 1
a2461 1
.B "color14 (\fPclass\fB Color14)"
d2463 1
a2463 1
.B "color15 (\fPclass\fB Color15)"
d2477 1
a2477 1
.B "color16 (\fPclass\fB Color16)"
d2481 1
a2481 1
.B "color255 (\fPclass\fB Color255)"
d2500 1
a2500 1
.B "colorAttrMode (\fPclass\fB ColorAttrMode)"
d2507 1
a2507 1
.B "colorBD (\fPclass\fB ColorBD)"
d2514 1
a2514 1
.B "colorBDMode (\fPclass\fB ColorAttrMode)"
d2521 1
a2521 1
.B "colorBL (\fPclass\fB ColorBL)"
d2528 1
a2528 1
.B "colorBLMode (\fPclass\fB ColorAttrMode)"
d2534 1
a2534 1
.B "colorIT (\fPclass\fB ColorIT)"
d2541 1
a2541 1
.B "colorITMode (\fPclass\fB ColorAttrMode)"
d2554 1
a2554 1
.B "colorMode (\fPclass\fB ColorMode)"
d2559 1
a2559 1
.B "colorRV (\fPclass\fB ColorRV)"
d2566 1
a2566 1
.B "colorRVMode (\fPclass\fB ColorAttrMode)"
d2572 1
a2572 1
.B "colorUL (\fPclass\fB ColorUL)"
d2579 1
a2579 1
.B "colorULMode (\fPclass\fB ColorAttrMode)"
d2586 1
a2586 1
.B "combiningChars (\fPclass\fB CombiningChars)"
d2592 1
a2592 1
.B "ctrlFKeys (\fPclass\fB CtrlFKeys)"
d2599 1
a2599 1
.B "curses (\fPclass\fB Curses)"
d2606 1
a2606 1
.B "cursorBlink (\fPclass\fB CursorBlink)"
d2615 1
a2615 1
.B "cursorColor (\fPclass\fB CursorColor)"
d2628 1
a2628 1
.B "cursorOffTime (\fPclass\fB CursorOffTime)"
d2634 1
a2634 1
.B "cursorOnTime (\fPclass\fB CursorOnTime)"
d2640 1
a2640 1
.B "cutNewline (\fPclass\fB CutNewline)"
d2646 1
a2646 1
.B "cursorUnderLine (\fPclass\fB CursorUnderLine)"
d2650 1
a2650 1
.B "cutToBeginningOfLine (\fPclass\fB CutToBeginningOfLine)"
d2656 1
a2656 1
.B "decTerminalID (\fPclass\fB DecTerminalID)"
d2663 1
a2663 1
.B "defaultString (\fPclass\fB DefaultString)"
d2676 1
a2676 1
.B "deleteIsDEL (\fPclass\fB DeleteIsDEL)"
d2682 1
a2682 1
.B "disallowedColorOps (\fPclass\fB DisallowedColorOps)"
d2706 1
a2706 1
.B "disallowedFontOps (\fPclass\fB DisallowedFontOps)"
d2710 1
a2710 1
.RS
d2712 1
a2712 1
.RE
d2726 1
a2726 1
.B "disallowedTcapOps (\fPclass\fB DisallowedTcapOps)"
d2730 1
a2730 1
.RS
d2732 1
a2732 1
.RE
d2746 1
a2746 1
.B "disallowedWindowOps (\fPclass\fB DisallowedWindowOps)"
d2751 1
a2751 1
.RS
d2753 1
a2753 1
.RE
d2832 1
a2832 1
.B "dynamicColors (\fPclass\fB DynamicColors)"
d2836 1
a2836 1
.B "eightBitControl (\fPclass\fB EightBitControl\fP)"
d2841 1
a2841 1
.B "eightBitInput (\fPclass\fB EightBitInput\fP)"
d2857 1
a2857 1
For more background on this, see the \fBmeta\fP function in curses.
d2906 1
a2906 1
.B "eightBitMeta (\fPclass\fB EightBitMeta\fP)"
d2936 1
a2936 1
.B "eightBitOutput (\fPclass\fB EightBitOutput\fP)"
d2942 3
a2944 3
.B "eightBitSelectTypes (\fPclass\fB EightBitSelectTypes\fP)"
Override \fI\*n\fP's default selection target list (see SELECT/PASTE) for
selections in normal (ISO-8859-1) mode.
d2948 1
a2948 1
.B "faceName (\fPclass\fB FaceName)"
d2975 1
a2975 1
.B "faceNameDoublesize (\fPclass\fB FaceNameDoublesize)"
d2983 1
a2983 1
.B "faceSize (\fPclass\fB FaceSize)"
d3014 1
a3014 1
.B "faceSize1 (\fPclass\fB FaceSize1)"
d3017 1
a3017 1
.B "faceSize2 (\fPclass\fB FaceSize2)"
d3020 1
a3020 1
.B "faceSize3 (\fPclass\fB FaceSize3)"
d3023 1
a3023 1
.B "faceSize4 (\fPclass\fB FaceSize4)"
d3026 1
a3026 1
.B "faceSize5 (\fPclass\fB FaceSize5)"
d3029 1
a3029 1
.B "faceSize6 (\fPclass\fB FaceSize6)"
d3032 1
a3032 1
.B "font (\fPclass\fB Font)"
d3056 1
a3056 1
.B "fastScroll (\fPclass\fB FastScroll)"
d3063 1
a3063 1
.B "font1 (\fPclass\fB Font1)"
d3067 1
a3067 1
.B "font2 (\fPclass\fB Font2)"
d3071 1
a3071 1
.B "font3 (\fPclass\fB Font3)"
d3075 1
a3075 1
.B "font4 (\fPclass\fB Font4)"
d3079 1
a3079 1
.B "font5 (\fPclass\fB Font5)"
d3083 1
a3083 1
.B "font6 (\fPclass\fB Font6)"
d3087 1
a3087 1
.B "fontDoublesize (\fPclass\fB FontDoublesize)"
d3096 1
a3096 1
.B "fontWarnings (\fPclass\fB FontWarnings)"
d3112 1
a3112 1
.B "forceBoxChars (\fPclass\fB ForceBoxChars)"
d3131 1
a3131 1
.B "forcePackedFont (\fPclass\fB ForcePackedFont)"
d3137 1
a3137 1
.B "foreground (\fPclass\fB Foreground)"
d3145 1
a3145 1
.B "formatOtherKeys (\fPclass\fB FormatOtherKeys)"
d3147 1
a3147 1
with the \fImodifyOtherKeys\fP resource.
d3157 1
a3157 1
.B "freeBoldBox (\fPclass\fB FreeBoldBox)"
d3164 2
a3165 2
.B "geometry (\fPclass\fB Geometry)"
Specifies the preferred size and position of the VT102 window.
d3168 1
a3168 1
.B "highlightColor (\fPclass\fB HighlightColor)"
d3173 1
a3173 1
.B "highlightColorMode (\fPclass\fB HighlightColorMode)"
d3186 1
a3186 1
HCM
d3189 1
a3189 1
HR
d3192 1
a3192 1
HBG
d3195 1
a3195 1
HFG
d3237 1
a3237 1
.B "highlightReverse (\fPclass\fB HighlightReverse)"
d3247 1
a3247 1
.B "highlightSelection (\fPclass\fB HighlightSelection)"
d3263 1
a3263 1
.B "highlightTextColor (\fPclass\fB HighlightTextColor)"
d3268 1
a3268 1
.B "hpLowerleftBugCompat (\fPclass\fB HpLowerleftBugCompat)"
d3276 1
a3276 1
.B "i18nSelections (\fPclass\fB I18nSelections)"
d3278 1
a3278 1
.B COMPOUND_TEXT
d3280 1
a3280 1
.BR TEXT .
d3284 1
a3284 1
.B "iconBorderColor (\fPclass\fB BorderColor)"
d3290 1
a3290 1
.B "iconBorderWidth (\fPclass\fB BorderWidth)"
d3296 1
a3296 1
.B "iconFont (\fPclass\fB IconFont)"
d3301 1
a3301 1
.B "initialFont (\fPclass\fB InitialFont)"
d3306 1
a3306 1
.B "inputMethod (\fPclass\fB XtCInputMethod)"
d3310 1
a3310 1
.B "internalBorder (\fPclass\fB BorderWidth)"
d3314 1
a3314 1
.B "italicULMode (\fPclass\fB ColorAttrMode)"
d3319 1
a3319 1
.B "jumpScroll (\fPclass\fB JumpScroll)"
d3325 1
a3325 1
.B "keepClipboard (\fPclass\fB KeepClipboard)"
d3331 1
a3331 1
.B "keepSelection (\fPclass\fB KeepSelection)"
d3336 1
a3336 1
.B "keyboardDialect (\fPclass\fB KeyboardDialect)"
d3346 1
a3346 1
.B "limitResize (\fPclass\fB LimitResize)"
d3351 1
a3351 1
.B "locale (\fPclass\fB Locale)"
d3406 1
a3406 1
.B "localeFilter (\fPclass\fB LocaleFilter)"
d3427 1
a3427 1
.B "loginShell (\fPclass\fB LoginShell)"
d3432 20
a3451 1
.B "marginBell (\fPclass\fB MarginBell)"
d3456 1
a3456 1
.B "metaSendsEscape (\fPclass\fB MetaSendsEscape\fP)"
d3467 1
a3467 1
.B "mkSamplePass (\fPclass\fB MkSamplePass)"
d3476 1
a3476 1
.B "mkSampleSize (\fPclass\fB MkSampleSize)"
d3481 1
a3481 1
.B "mkWidth (\fPclass\fB MkWidth)"
d3501 1
a3501 1
.B "modifyCursorKeys (\fPclass\fB ModifyCursorKeys\fP)"
d3525 1
a3525 1
.B "modifyFunctionKeys (\fPclass\fB ModifyFunctionKeys\fP)"
d3568 1
a3568 1
.B "modifyKeyboard (\fPclass\fB ModifyKeyboard\fP)"
d3599 1
a3599 1
.B "modifyOtherKeys (\fPclass\fB ModifyOtherKeys\fP)"
d3620 1
a3620 1
.B "multiClickTime (\fPclass\fB MultiClickTime)"
d3625 1
a3625 1
.B "multiScroll (\fPclass\fB MultiScroll)"
d3629 1
a3629 1
.B "nMarginBell (\fPclass\fB Column)"
d3634 3
a3636 2
.B "numLock (\fPclass\fB NumLock)"
If \*(``true\*('', \fI\*n\fR checks if NumLock is used as a modifier (see \fIxmodmap\fP(__mansuffix__)).
d3643 1
a3643 1
.B "oldXtermFKeys (\fPclass\fB OldXtermFKeys)"
d3657 1
a3657 1
.B "on2Clicks (\fPclass\fB On2Clicks)"
d3659 1
a3659 1
.B "on3Clicks (\fPclass\fB On3Clicks)"
d3661 1
a3661 1
.B "on4Clicks (\fPclass\fB On4Clicks)"
d3663 1
a3663 1
.B "on5Clicks (\fPclass\fB On5Clicks)"
d3666 1
a3666 1
the \fBSELECTION\fP section (see \fBPOINTER USAGE\fP).
d3709 1
a3709 1
.B "openIm (\fPclass\fB XtCOpenIm)"
d3713 1
a3713 1
.B "pointerColor (\fPclass\fB PointerColor)"
d3718 1
a3718 1
.B "pointerColorBackground (\fPclass\fB PointerColorBackground)"
d3723 1
a3723 1
.B "pointerMode (\fPclass\fB PointerMode)"
d3740 1
a3740 1
.B "pointerShape (\fPclass\fB Cursor)"
d3744 1
a3744 1
.B "popOnBell (\fPclass\fB PopOnBell)"
d3752 1
a3752 1
.B "precompose (\fPclass\fB XtCPrecompose)"
d3758 1
a3758 1
.B "preeditType (\fPclass\fB XtCPreeditType)"
d3762 1
a3762 1
.B "printAttributes (\fPclass\fB PrintAttributes)"
d3764 1
a3764 1
A real DEC VTxxx terminal will print the underline, highlighting codes
d3778 1
a3778 1
.B "printFileImmediate (\fPPrintFileImmediate)"
d3788 1
a3788 1
.B "printFileOnXError (\fPPrintFileOnXError)"
d3805 1
a3805 1
.B "printModeImmediate (\fPPrintModeImmediate)"
d3813 1
a3813 1
.B "printModeOnXError (\fPPrintModeOnXError)"
d3821 1
a3821 1
.B "printOptsImmediate (\fPPrintOptsImmediate)"
d3853 1
a3853 1
.B "printOptsOnXError (\fPPrintOptsOnXError)"
d3861 1
a3861 1
.B "printerAutoClose (\fPclass\fB PrinterAutoClose)"
d3866 1
a3866 1
.B "printerCommand (\fPclass\fB PrinterCommand)"
d3874 1
a3874 1
.B "printerControlMode (\fPclass\fB PrinterControlMode)"
d3885 1
a3885 1
.B "printerExtent (\fPclass\fB PrinterExtent)"
d3890 1
a3890 1
.B "printerFormFeed (\fPclass\fB PrinterFormFeed)"
d3895 1
a3895 1
.B "printerNewLine (\fPclass\fB PrinterNewLine)"
d3900 1
a3900 1
.B "privateColorRegisters (\fPclass\fB privateColorRegisters)"
d3907 1
a3907 1
.B "quietGrab (\fPclass\fB QuietGrab)"
d3913 1
a3913 1
.B "regisScreenSize (\fPclass\fB RegisScreenSize)"
d3925 1
a3925 1
.B "renderFont (\fPclass\fB RenderFont)"
d3960 1
a3960 1
.B "resizeGravity (\fPclass\fB ResizeGravity)"
d3977 1
a3977 1
.B "retryInputMethod (\fPclass\fB XtCRetryInputMethod)"
d3986 1
a3986 1
.B "reverseVideo (\fPclass\fB ReverseVideo)"
d4021 1
a4021 1
These are independent of the \fIreverseVideo\fP resource and the menu entry.
d4039 1
a4039 1
.B "reverseWrap (\fPclass\fB ReverseWrap)"
d4045 1
a4045 1
.B "rightScrollBar (\fPclass\fB RightScrollBar)"
d4050 1
a4050 1
.B "saveLines (\fPclass\fB SaveLines)"
d4055 1
a4055 1
.B "scrollBar (\fPclass\fB ScrollBar)"
d4060 1
a4060 1
.B "scrollBarBorder (\fPclass\fB ScrollBarBorder)"
d4067 1
a4067 1
.B "scrollKey (\fPclass\fB ScrollCond)"
d4074 2
a4075 2
.B "scrollLines (\fPclass\fB ScrollLines)"
Specifies the number of lines that the \fIscroll-back\fP and
d4079 1
a4079 1
.B "scrollTtyOutput (\fPclass\fB ScrollCond)"
d4084 1
a4084 1
.B "selectToClipboard (\fPclass\fB SelectToClipboard)"
d4092 1
a4092 1
.B "shiftFonts (\fPclass\fB ShiftFonts)"
d4099 1
a4099 1
.B "showBlinkAsBold (\fPclass\fB ShowBlinkAsBold)"
d4106 1
a4106 1
.B "showMissingGlyphs (\fPclass\fB ShowMissingGlyphs)"
d4111 1
a4111 1
.B "showWrapMarks (\fPclass\fB ShowWrapMarks)"
d4117 2
a4118 2
.B "signalInhibit (\fPclass\fB SignalInhibit)"
Specifies whether or not the entries in the \*(``Main Options\*('' menu for sending
d4122 1
a4122 1
.B "sixelScrolling (\fPclass\fB SixelScrolling)"
d4127 1
a4127 1
.B "tekGeometry (\fPclass\fB Geometry)"
d4131 1
a4131 1
.B "tekInhibit (\fPclass\fB TekInhibit)"
d4138 1
a4138 1
.B "tekSmall (\fPclass\fB TekSmall)"
d4145 1
a4145 1
.B "tekStartup (\fPclass\fB TekStartup)"
d4149 1
a4149 1
.B "tiXtraScroll (\fPclass\fB TiXtraScroll)"
d4158 1
a4158 1
.B "titeInhibit (\fPclass\fB TiteInhibit)"
d4170 1
a4170 1
.B "titleModes (\fPclass\fB TitleModes)"
d4195 1
a4195 1
.B "translations (\fPclass\fB Translations)"
d4201 1
a4201 1
See the \fBACTIONS\fP section.
d4203 1
a4203 1
.B "trimSelection (\fPclass\fB TrimSelection)"
d4216 1
a4216 1
.B "underLine (\fPclass\fB UnderLine)"
d4223 1
a4223 1
.B "useClipping (\fPclass\fB UseClipping)"
d4230 1
a4230 1
.B "utf8 (\fPclass\fB Utf8)"
d4266 1
a4266 1
.B "utf8Fonts (\fPclass\fB Utf8Fonts)"
d4297 1
a4297 1
.B "utf8Latin1 (\fPclass\fB Utf8Latin1)"
d4304 3
a4306 3
.B "utf8SelectTypes (\fPclass\fB Utf8SelectTypes)"
Override \fI\*n\fP's default selection target list (see SELECT/PASTE) for
selections in wide-character (UTF-8) mode.
d4310 1
a4310 1
.B "utf8Title (\fPclass\fB Utf8Title)"
d4330 1
a4330 1
in the control sequences document), to set an equivalent flag.
d4336 1
a4336 1
.B "veryBoldColors (\fPclass\fB VeryBoldColors)"
d4356 1
a4356 1
.B "visualBell (\fPclass\fB VisualBell)"
d4361 1
a4361 1
.B "visualBellDelay (\fPclass\fB VisualBellDelay)"
d4367 1
a4367 1
.B "visualBellLine (\fPclass\fB VisualBellLine)"
d4373 1
a4373 1
.B "vt100Graphics (\fPclass\fB VT100Graphics)"
d4378 1
a4378 1
.B "wideBoldFont (\fPclass\fB WideBoldFont)"
d4386 1
a4386 1
.B "wideChars (\fPclass\fB WideChars)"
d4391 1
a4391 1
.B "wideFont (\fPclass\fB WideFont)"
d4399 1
a4399 1
.B "ximFont (\fPclass\fB XimFont)"
d4420 1
a4420 1
.B "font2 (\fPclass\fB Font)"
d4423 1
a4423 1
.B "font3 (\fPclass\fB Font)"
d4426 1
a4426 1
.B "fontLarge (\fPclass\fB Font)"
d4429 1
a4429 1
.B "fontSmall (\fPclass\fB Font)"
d4432 1
a4432 1
.B "ginTerminator (\fPclass\fB GinTerminator)"
d4438 1
a4438 1
.B "height (\fPclass\fB Height)"
d4441 1
a4441 1
.B "initialFont (\fPclass\fB InitialFont)"
d4446 1
a4446 1
.B "width (\fPclass\fB Width)"
d4461 1
a4461 1
The \fIMain Options\fP menu (widget name \fImainMenu\fP)
d4464 2
a4465 2
.B "toolbar (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-toolbar(toggle)\fP action.
d4467 1
a4467 1
.B "securekbd (\fPclass\fB SmeBSB)"
d4470 2
a4471 2
.B "allowsends (\fPclass\fB SmeBSB)"
This entry invokes the \fBallow-send-events(toggle)\fP action.
d4473 1
a4473 1
.B "redraw (\fPclass\fB SmeBSB)"
d4476 2
a4477 2
.B "logging (\fPclass\fB SmeBSB)"
This entry invokes the \fBlogging(toggle)\fP action.
d4479 1
a4479 1
.B "print-immediate (\fPclass\fB SmeBSB)"
d4482 1
a4482 1
.B "print-on-error (\fPclass\fB SmeBSB)"
d4485 1
a4485 1
.B "print (\fPclass\fB SmeBSB)"
d4488 1
a4488 1
.B "print-redir (\fPclass\fB SmeBSB)"
d4491 1
a4491 1
.B "dump-html (\fPclass\fB SmeBSB)"
d4494 1
a4494 1
.B "dump-svg (\fPclass\fB SmeBSB)"
d4497 2
a4498 2
.B "8-bit-control (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-8-bit-control(toggle)\fP action.
d4500 2
a4501 2
.B "backarrow\ key (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-backarrow(toggle)\fP action.
d4503 2
a4504 2
.B "num-lock (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-num-lock(toggle)\fP action.
d4506 2
a4507 2
.B "alt-esc (\fPclass\fB SmeBSB)"
This entry invokes the \fBalt-sends-escape(toggle)\fP action.
d4509 2
a4510 2
.B "meta-esc (\fPclass\fB SmeBSB)"
This entry invokes the \fBmeta-sends-escape(toggle)\fP action.
d4512 2
a4513 2
.B "delete-is-del (\fPclass\fB SmeBSB)"
This entry invokes the \fBdelete-is-del(toggle)\fP action.
d4515 2
a4516 2
.B "oldFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes the \fBold-function-keys(toggle)\fP action.
d4518 2
a4519 2
.B "hpFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes the \fBhp-function-keys(toggle)\fP action.
d4521 2
a4522 2
.B "scoFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes the \fBsco-function-keys(toggle)\fP action.
d4524 2
a4525 2
.B "sunFunctionKeys (\fPclass\fB SmeBSB)"
This entry invokes the \fBsun-function-keys(toggle)\fP action.
d4527 2
a4528 2
.B "sunKeyboard (\fPclass\fB SmeBSB)"
This entry invokes the \fBsunKeyboard(toggle)\fP action.
d4530 2
a4531 2
.B "suspend (\fPclass\fB SmeBSB)"
This entry invokes the \fBsend-signal(tstp)\fP action on systems that
d4534 2
a4535 2
.B "continue (\fPclass\fB SmeBSB)"
This entry invokes the \fBsend-signal(cont)\fP action on systems that
d4538 2
a4539 2
.B "interrupt (\fPclass\fB SmeBSB)"
This entry invokes the \fBsend-signal(int)\fP action.
d4541 2
a4542 2
.B "hangup (\fPclass\fB SmeBSB)"
This entry invokes the \fBsend-signal(hup)\fP action.
d4544 2
a4545 2
.B "terminate (\fPclass\fB SmeBSB)"
This entry invokes the \fBsend-signal(term)\fP action.
d4547 2
a4548 2
.B "kill (\fPclass\fB SmeBSB)"
This entry invokes the \fBsend-signal(kill)\fP action.
d4550 1
a4550 1
.B "quit (\fPclass\fB SmeBSB)"
d4554 1
a4554 1
The \fIVT Options\fP menu (widget name \fIvtMenu\fP)
d4557 5
a4561 2
.B "scrollbar (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-scrollbar(toggle)\fP action.
d4563 2
a4564 2
.B "jumpscroll (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-jumpscroll(toggle)\fP action.
d4566 2
a4567 2
.B "reversevideo (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-reverse-video(toggle)\fP action.
d4569 2
a4570 2
.B "autowrap (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-autowrap(toggle)\fP action.
d4572 2
a4573 2
.B "reversewrap (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-reversewrap(toggle)\fP action.
d4575 2
a4576 2
.B "autolinefeed (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-autolinefeed(toggle)\fP action.
d4578 2
a4579 2
.B "appcursor (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-appcursor(toggle)\fP action.
d4581 2
a4582 2
.B "appkeypad (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-appkeypad(toggle)\fP action.
d4584 2
a4585 2
.B "scrollkey (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-scroll-on-key(toggle)\fP action.
d4587 2
a4588 2
.B "scrollttyoutput (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-scroll-on-tty-output(toggle)\fP action.
d4590 2
a4591 2
.B "allow132 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-allow132(toggle)\fP action.
d4593 2
a4594 2
.B "cursesemul (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-cursesemul(toggle)\fP action.
d4596 2
a4597 2
.B "visualbell (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-visualbell(toggle)\fP action.
d4599 2
a4600 2
.B "bellIsUrgent (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-bellIsUrgent(toggle)\fP action.
d4602 2
a4603 2
.B "poponbell (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-poponbell(toggle)\fP action.
d4605 2
a4606 2
.B "cursorblink (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-cursorblink(toggle)\fP action.
d4608 2
a4609 2
.B "titeInhibit (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-titeInhibit(toggle)\fP action.
d4611 4
a4614 1
.B "activeicon (\fPclass\fB SmeBSB)"
d4621 1
a4621 1
.B "softreset (\fPclass\fB SmeBSB)"
d4624 1
a4624 1
.B "hardreset (\fPclass\fB SmeBSB)"
d4627 1
a4627 1
.B "clearsavedlines (\fPclass\fB SmeBSB)"
d4630 5
a4634 2
.B "tekshow (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-visibility(tek,toggle)\fP action.
d4636 2
a4637 2
.B "tekmode (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-terminal-type(tek)\fP action.
d4639 2
a4640 2
.B "vthide (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-visibility(vt,off)\fP action.
d4642 2
a4643 2
.B "altscreen (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-altscreen(toggle)\fP action.
d4645 2
a4646 2
.B "sixelScrolling (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-sixel-scrolling(toggle)\fP action.
d4649 1
a4649 1
The \fIVT Fonts\fP menu (widget name \fIfontMenu\fP)
d4652 2
a4653 2
.B "fontdefault (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(d)\fP action,
d4657 2
a4658 2
.B "font1 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(1)\fP action,
d4662 2
a4663 2
.B "font2 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(2)\fP action,
d4667 2
a4668 2
.B "font3 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(3)\fP action,
d4672 2
a4673 2
.B "font4 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(4)\fP action,
d4677 2
a4678 2
.B "font5 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(5)\fP action,
d4682 2
a4683 2
.B "font6 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(6)\fP action,
d4687 23
a4709 2
.B "fontescape (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(e)\fP action.
d4711 2
a4712 2
.B "fontsel (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-vt-font(s)\fP action.
d4714 2
a4715 2
.B "font-linedrawing (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-font-linedrawing(s)\fP action.
d4717 2
a4718 2
.B "font-packed (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-font-packed(s)\fP action.
d4720 2
a4721 2
.B "font-doublesize (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-font-doublesize(s)\fP action.
d4723 2
a4724 2
.B "render-font (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-render-font(s)\fP action.
d4726 2
a4727 2
.B "utf8-mode (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-utf8-mode(s)\fP action.
d4729 2
a4730 2
.B "utf8-title (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-utf8-title(s)\fP action.
d4733 1
a4733 1
The \fITEK Options\fP menu (widget name \fItekMenu\fP)
d4736 2
a4737 2
.B "tektextlarge (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-tek-text(large)\fP action.
d4739 2
a4740 2
.B "tektext2 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-tek-text(2)\fP action.
d4742 2
a4743 2
.B "tektext3 (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-tek-text(3)\fP action.
d4745 2
a4746 2
.B "tektextsmall (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-tek-text(small)\fP action.
d4748 1
a4748 1
.B "tekpage (\fPclass\fB SmeBSB)"
d4751 1
a4751 1
.B "tekreset (\fPclass\fB SmeBSB)"
d4754 1
a4754 1
.B "tekcopy (\fPclass\fB SmeBSB)"
d4757 2
a4758 2
.B "vtshow (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-visibility(vt,toggle)\fP action.
d4760 2
a4761 2
.B "vtmode (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-terminal-type(vt)\fP action.
d4763 2
a4764 2
.B "tekhide (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-visibility(tek,toggle)\fP action.
d4771 1
a4771 1
.B "thickness (\fPclass\fB Thickness)"
d4774 1
a4774 1
.B "background (\fPclass\fB Background)"
d4777 1
a4777 1
.B "foreground (\fPclass\fB Foreground)"
d4787 1
a4787 1
Once the VT102 window is created,
d4791 1
a4791 1
.SS "Selection"
d4796 1
a4796 1
be changed through the resource database; see \fBACTIONS\fP below.
d4877 1
a4877 1
Unlike the VT102 window, the Tektronix window does not allow the copying of
d4915 1
a4915 1
When configured to use the clipboard (see resource \fBselectToClipboard\fP),
d4931 1
a4931 1
\fISelect to Clipboard\fP) introduce the SELECT token (known only
d5022 1
a5022 1
This menu contains items that apply to both the VT102 and Tektronix windows.
d5028 1
a5028 1
Toolbar
d5032 2
a5033 3
Secure Keyboard (securekbd)
The
.B Secure Keyboard
d5035 2
a5036 2
unsecure environment;
see \fBSECURITY\fP below (but read the limitations carefully).
d5038 1
a5038 1
Allow SendEvents (allowsends)
d5043 1
a5043 1
Redraw Window (redraw)
d5051 1
a5051 1
Log to File (logging)
d5055 1
a5055 1
Print-All Immediately
d5064 1
a5064 1
Print-All on Error
d5069 3
a5071 3
\fBprintFileXError\fP,
\fBprintModeXError\fP and
\fBprintOptsXError\fP
d5074 1
a5074 1
Print Window (print)
d5078 1
a5078 1
Redirect to Printer (print-redir)
d5085 1
a5085 1
XHTML Screen Dump (dump-html)
d5152 1
a5152 1
SVG Screen Dump (dump-svg)
d5195 1
a5195 1
8-Bit Controls (8-bit-control)
d5201 1
a5201 1
(see the document \fIXterm Control Sequences\fP).
d5204 1
a5204 1
Backarrow Key (BS/DEL) (backarrow\ key)
d5210 1
a5210 1
Alt/NumLock Modifiers (num-lock)
d5214 1
a5214 1
Meta Sends Escape (meta-esc)
d5219 1
a5219 1
Delete is DEL (delete-is-del)
d5224 1
a5224 1
Old Function-Keys (oldFunctionKeys)
d5226 1
a5226 1
HP Function-Keys (hpFunctionKeys)
d5228 1
a5228 1
SCO Function-Keys (scoFunctionKeys)
d5230 1
a5230 1
Sun Function-Keys (sunFunctionKeys)
d5232 1
a5232 1
VT220 Keyboard (sunKeyboard)
d5234 5
a5238 5
It corresponds to more than one resource setting:
.BR "sunKeyboard" ","
.BR "sunFunctionKeys" ","
.BR "scoFunctionKeys" " and"
.BR "hpFunctionKeys" "."
d5244 1
a5244 1
Send STOP Signal (suspend)
d5246 1
a5246 1
Send CONT Signal (continue)
d5248 1
a5248 1
Send INT Signal (interrupt)
d5250 1
a5250 1
Send HUP Signal (hangup)
d5252 1
a5252 1
Send TERM Signal (terminate)
d5254 1
a5254 1
Send KILL Signal (kill)
d5259 1
a5259 2
The
.B SIGCONT
d5263 1
a5263 1
Quit (quit)
d5276 1
d5278 2
a5279 2
sets various modes in the VT102 emulation, and is popped up when the
\*(``control\*('' key and pointer button two are pressed in the VT102 window.
d5281 1
a5281 1
VT102/VT220 Modes:
d5285 1
a5285 1
Enable Scrollbar (scrollbar)
d5287 1
a5287 5
This corresponds to the
.B \-sb
option and the
.B scrollBar
resource.
d5290 1
a5290 1
Enable Jump Scroll (jumpscroll)
d5292 1
a5292 5
This corresponds to the
.B \-j
option and the
.B jumpScroll
resource.
d5295 1
a5295 1
Enable Reverse Video (reversevideo)
d5297 1
a5297 5
This corresponds to the
.B \-rv
option and the
.B reverseVideo
resource.
d5300 1
a5300 1
Enable Auto Wraparound (autowrap)
d5302 1
a5302 5
This corresponds to the
.B \-aw
option and the
.B autoWrap
resource.
d5305 1
a5305 1
Enable Reverse Wraparound (reversewrap)
d5307 1
a5307 5
This corresponds to the
.B \-rw
option and the
.B reverseWrap
resource.
d5310 1
a5310 1
Enable Auto Linefeed (autolinefeed)
d5317 1
a5317 1
Enable Application Cursor Keys (appcursor)
d5319 1
a5319 3
This corresponds to the
.B appcursorDefault
resource.
d5323 1
a5323 1
Enable Application Keypad (appkeypad)
d5325 1
a5325 3
This corresponds to the
.B appkeypadDefault
resource.
d5329 1
a5329 1
Scroll to Bottom on Key Press (scrollkey)
d5331 1
a5331 5
This corresponds to the
.B \-sk
option and the
.B scrollKey
resource.
d5336 1
a5336 1
Scroll to Bottom on Tty Output (scrollttyoutput)
d5338 1
a5338 5
This corresponds to the
.B \-si
option and the
.B scrollTtyOutput
resource.
d5341 1
a5341 1
Allow 80/132 Column Switching (allow132)
d5343 1
a5343 5
This corresponds to the
.B \-132
option and the
.B c132
resource.
d5346 1
a5346 1
Keep Selection (keepSelection)
d5352 1
a5352 3
This corresponds to the
.B keepSelection
resource.
d5356 1
a5356 1
Select to Clipboard (selectToClipboard)
d5360 1
a5360 3
This corresponds to the
.B selectToClipboard
resource.
d5364 1
a5364 1
Enable Visual Bell (visualbell)
d5366 1
a5366 5
This corresponds to the
.B \-vb
option and the
.B visualBell
resource.
d5369 1
a5369 1
Enable Bell Urgency (bellIsUrgent)
d5371 1
a5371 3
This corresponds to the
.B bellIsUrgent
resource.
d5374 1
a5374 1
Enable Pop on Bell (poponbell)
d5376 1
a5376 5
This corresponds to the
.B \-pop
option and the
.B popOnBell
resource.
d5379 1
a5379 1
Enable Blinking Cursor (cursorblink)
d5381 1
a5381 5
This corresponds to the
.B \-bc
option and the
.B cursorBlink
resource.
d5383 1
a5383 1
(see the document \fIXterm Control Sequences\fP).
d5389 1
a5389 1
Enable Alternate Screen Switching (titeInhibit)
d5391 1
a5391 3
This corresponds to the
.B titeInhibit
resource.
d5395 1
a5395 1
Enable Active Icon (activeicon)
d5397 1
a5397 5
This corresponds to the
.B \-ai
option and the
.B activeIcon
resource.
d5400 1
a5400 1
Sixel Scrolling (sixelScrolling)
d5409 1
a5409 3
This corresponds to the
.B sixelScrolling
resource.
d5413 1
a5413 1
Private Color Registers (privateColorRegisters)
d5420 1
a5420 3
This corresponds to the
.B privateColorRegisters
resource.
d5425 1
a5425 1
VT102/VT220 Commands:
d5428 1
a5428 1
Do Soft Reset (softreset)
d5435 1
a5435 1
Do Full Reset (hardreset)
d5446 1
a5446 1
Reset and Clear Saved Lines (clearsavedlines)
d5456 1
a5456 1
Show Tek Window (tekshow)
d5463 1
a5463 1
Switch to Tek Mode (tekmode)
d5469 1
a5469 1
switches input back to the VTxxx window.
d5472 1
a5472 1
Hide VT Window (vthide)
d5474 1
a5474 1
hides the VTxxx window,
d5479 1
a5479 1
shows the VTxxx window,
d5483 1
a5483 1
Show Alternate Screen (altscreen)
d5495 1
a5495 1
The \fIfontMenu\fP pops up when
d5497 1
a5497 1
It sets the font used in the VT102 window,
d5504 2
a5505 4
Default (fontdefault)
Set the font to the default, i.e., that given by the
.B *VT100.font
resource.
d5507 2
a5508 4
Unreadable (font1)
Set the font to that given by the
.B *VT100.font1
resource.
d5510 2
a5511 4
Tiny (font2)
Set the font to that given by the
.B *VT100.font2
resource.
d5513 2
a5514 4
Small (font3)
Set the font to that given by the
.B *VT100.font3
resource.
d5516 2
a5517 4
Medium (font4)
Set the font to that given by the
.B *VT100.font4
resource.
d5519 2
a5520 4
Large (font5)
Set the font to that given by the
.B *VT100.font5
resource.
d5522 2
a5523 4
Huge (font6)
Set the font to that given by the
.B *VT100.font6
resource.
d5525 1
a5525 1
Escape Sequence
d5527 1
a5527 1
Font escape sequence (see the document \fIXterm Control Sequences\fP).
d5529 1
a5529 1
Selection (fontsel)
d5537 1
a5537 1
Bold Fonts
d5542 1
a5542 1
Line-Drawing Characters (font-linedrawing)
d5547 1
a5547 1
Packed Font (font-packed)
d5553 1
a5553 1
Doublesized Characters (font-doublesize)
d5561 2
a5562 4
TrueType Fonts (render-font)
If the
.B "renderFont
and corresponding resources were set,
d5566 1
a5566 1
UTF-8 Encoding (utf8-mode)
d5572 1
a5572 1
UTF-8 Fonts (utf8-fonts)
d5578 1
a5578 1
UTF-8 Titles (utf8-titles)
d5598 1
a5598 1
.IP
d5604 1
a5604 1
Allow Color Ops (allow-font-ops)
d5608 1
a5608 1
Allow Font Ops (allow-font-ops)
d5612 1
a5612 1
Allow Tcap Ops (allow-tcap-ops)
d5617 1
a5617 1
Allow Title Ops (allow-title-ops)
d5621 1
a5621 1
Allow Window Ops (allow-window-ops)
d5626 1
a5626 1
.SS "TEK Options"
d5628 2
a5629 3
The
.I tekMenu
sets various modes in the Tektronix emulation, and is popped up when the
d5634 1
a5634 1
Large Characters (tektextlarge)
d5636 1
a5636 1
\&#2 Size Characters (tektext2)
d5638 1
a5638 1
\&#3 Size Characters (tektext3)
d5640 1
a5640 1
Small Characters (tektextsmall)
d5646 1
a5646 1
PAGE (tekpage)
d5649 1
a5649 1
RESET (tekreset)
d5651 1
a5651 1
COPY (tekcopy)
d5657 1
a5657 1
Show VT Window (vtshow)
d5659 1
a5659 1
Switch to VT Mode (vtmode)
d5661 1
a5661 1
Hide Tek Window (tekhide)
d5726 1
a5726 1
selected the \fBReverse Video\fP entry in the \fBModes\fP menu);
d5863 4
d5899 1
a5899 1
This action does \fBhard-reset()\fP (see below) and also clears the history
d5922 1
a5922 1
Lack of more matches is signaled by a \fBbeep()\fP.
d6019 1
a6019 1
the data as in the \fBonClicks\fP resource.
d6078 1
a6078 1
the data as in the \fBonClicks\fP resource.
d6106 2
a6107 1
name is \fIname\fP with the suffix \fIKeymap\fP (case is significant).
d6139 1
a6139 1
It is also invoked by the \fIprint\fP entry in \fImainMenu\fP.
d6196 3
a6198 3
\fBprintFileXError\fP,
\fBprintModeXError\fP and
\fBprintOptsXError\fP
d6208 1
d6221 1
a6221 1
It is also invoked by the \fIredraw\fP entry in \fImainMenu\fP.
d6247 2
a6248 2
This action toggles the \fISecure Keyboard\fP mode described in the
section named \fBSECURITY\fP, and is invoked from the \fBsecurekbd\fP
d6292 5
a6296 5
.BR suspend ,
.BR continue ,
.BR interrupt ,
.BR hangup ,
.BR terminate ,
d6298 1
a6298 1
.BR kill
d6375 1
a6375 1
This action sets, unsets or toggles the \fIforcePackedFont\fR's resource
d6486 4
d6510 1
a6510 1
This action sets the font or fonts currently being used in the VT102 window.
d6543 1
a6543 1
.B "spawn-new-terminal(params)"
d6553 1
a6553 1
Otherwise, use the $PATH variable to find \fI\*n\fP.
d6577 1
a6577 1
It is also invoked from the \fItekcopy\fP entry in \fItekMenu\fP.
d6585 1
a6585 1
It is also invoked by the \fItekreset\fP entry in \fItekMenu\fP.
d6618 1
a6618 1
The default bindings in the VT102 window use the SELECT token,
d6620 1
a6620 1
These are for the \fBvt100\fP widget:
d6668 1
a6668 1
These are for the \fBtek4014\fP widget:
d6710 1
a6710 1
\fBvt100\fP widget depends on
d6727 1
a6727 1
Key bindings are normally associated with the \fBvt100\fP or \fBtek4014\fP
d6736 3
a6738 3
The \fBscrollbar\fP widget is a child of the \fBvt100\fP widget.
It is positioned on top of the \fBvt100\fP widget.
Toggling the scrollbar on and off causes the \fBvt100\fP widget to resize.
d6742 7
a6748 7
                      <Btn5Down>: StartScroll(Forward) \\n\\\&
                      <Btn1Down>: StartScroll(Forward) \\n\\\&
                      <Btn2Down>: StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
                      <Btn3Down>: StartScroll(Backward) \\n\\\&
                      <Btn4Down>: StartScroll(Backward) \\n\\\&
                      <Btn2Motion>: MoveThumb() NotifyThumb() \\n\\\&
                      <BtnUp>:    NotifyScroll(Proportional) EndScroll()
d6751 1
a6751 1
Events which the \fBscrollbar\fP widget does not recognize at all are lost.
d6754 1
a6754 1
translations used for the \fBvt100\fP widget,
d6756 3
a6758 3
Because the \fBscrollbar\fP (or \fBmenubar\fP) widgets do not recognize these
actions (but because it has a corresponding \fBtranslation\fP),
they are passed on to the \fBvt100\fP widget.
d6764 2
a6765 2
customizations a user may have added to the \fBvt100\fP widget.
All that \fI\*n\fP can do is augment the \fBscrollbar\fP widget to
d6781 5
a6785 5
        <Btn5Down>:     StartScroll(Forward) \\n\\\&
        <Btn1Down>:     StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
        <Btn4Down>:     StartScroll(Backward) \\n\\\&
        <Btn1Motion>:   MoveThumb() NotifyThumb() \\n\\\&
        <BtnUp>:        NotifyScroll(Proportional) EndScroll()
d6832 1
a6832 1
The \fI\*N Control Sequences\fP document lists the control sequences which
d6838 1
a6838 1
.SS Window Titles
d6860 19
a6878 1
at the same time, using a slightly different control sequence.
d6920 1
a6920 1
given values of $TERM.
d6943 1
a6943 1
Users can do this by setting $PS1 (the primary prompt string).
d6963 1
a6963 1
As noted in \fISpecial Keys\fP, \fBzsh\fP initializes the $terminfo array
d6981 1
a6981 1
DISPLAY
d6983 1
a6983 1
pointing to the X server (see \fBDISPLAY NAMES\fP in X(__miscmansuffix__)).
d6985 2
a6986 1
TERM
d6995 1
a6995 1
WINDOWID
d6998 1
a6998 1
XTERM_FILTER
d7002 1
a7002 1
XTERM_LOCALE
d7006 1
a7006 1
XTERM_SHELL
d7012 1
a7012 1
XTERM_VERSION
d7024 1
a7024 1
COLUMNS
d7027 2
a7028 1
HOME
d7031 1
a7031 1
LINES
d7034 1
a7034 1
LOGNAME
d7037 1
a7037 1
SHELL
d7048 2
a7049 2
TERMCAP
the contents of the termcap entry corresponding to $TERM,
d7053 1
a7053 1
TERMINFO
d7093 4
a7096 3
.RS
\*n: Error \fIXXX\fP, errno \fIYYY\fP: \fIZZZ\fP
.RE
@


1.43
log
@Disable Tektronics 4014 emulation. ok natano@@, naddy@@, schwarze@@
@
text
@d7319 2
@


1.42
log
@Update to xterm-325. Testing by krw@@, shadchin@@ and naddy@@. Thanks
@
text
@d7295 2
a7296 1
On OpenBSD, the following resources have different default values: 
@


1.41
log
@Update to xterm 322. Tested by shadchin@@ and jsg@@. Thanks.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.619 2015/12/31 12:41:07 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2014,2015 by Thomas E. Dickey
d396 5
a400 2
This option indicates that auto-wraparound should be allowed.
This
d406 3
a408 1
This option indicates that auto-wraparound should not be allowed.
d642 1
a642 1
This option indicates that HP Function Key escape codes should be generated
d647 1
a647 1
This option indicates that HP Function Key escape codes should not be generated
d741 1
d755 3
a757 2
.BR sunFunctionKeys,
.BR tcapFunctionKeys
d988 1
a988 1
This option indicates that Sun Function Key escape codes should be generated
d1484 4
a1487 2
Specifies whether or not HP Function Key escape codes should be generated for
function keys instead of standard escape sequences.
d1489 1
a1489 1
See also the \fBkeyboardType\fP resource.
d1560 2
a1561 1
\fBtcapFunctionKeys\fP and
d1563 1
d1568 4
a1571 2
\*(``tcap\*('' or
\*(``vt220\*(''.
d1574 2
d1704 4
a1707 2
Specifies whether or not SCO Function Key escape codes should be generated for
function keys instead of standard escape sequences.
d1709 1
a1709 1
See also the \fBkeyboardType\fP resource.
d1718 4
a1721 2
Specifies whether or not Sun Function Key escape codes should be generated for
function keys instead of standard escape sequences.
d1723 1
a1723 1
See also the \fBkeyboardType\fP resource.
d1726 5
a1730 1
Specifies whether or not Sun/PC keyboard layout should be assumed rather
d1752 4
a1755 2
termcap/terminfo entry should be generated for
function keys instead of standard escape sequences.
d1759 1
a1759 1
See also the \fBkeyboardType\fP resource.
d2515 1
a2515 1
This can be set to values in the range 0 to 4.
d3419 1
a3419 1
uses the old/obsolete behavior.
d3445 1
a3445 1
uses the old/obsolete behavior.
d3550 2
a3551 1
If \*(``true\*('', \fI\*n\fR will use old-style control sequences for function keys F1 to F4,
d3553 1
a3553 2
Otherwise, it uses the VT100-style
codes for PF1 to PF4.
d3555 7
d3729 1
a3729 1
the \fBprint-immediately\fP action is invoked.
d4397 6
d4961 106
d7289 1
@


1.40
log
@Update to xterm 320. Tested by jsg@@ Thanks.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.617 2015/08/28 08:48:38 tom Exp $
d426 1
a426 1
\fIcursorOffTime\fP resource.
d3226 6
d6186 3
@


1.39
log
@xterm 314. tested by naddy@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.587 2014/12/17 10:10:02 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2013,2014 by Thomas E. Dickey
d57 1
a57 1
.\" updated by Thomas E. Dickey for XFree86, July 1996 - February 2006.
d446 1
a446 1
See the section specifying character classes.
d681 1
d699 1
a699 1
disabling the display of characters with italic attribute as italic.
d1028 1
a1028 1
providing mapping for keypad \*(``+' to \*(``,', and
d1237 1
a1237 1
.SS OLD OPTIONS
d1274 1
a1274 1
.SS X TOOLKIT OPTIONS
d1320 4
d1360 1
d1364 2
a1365 2
together by setting the DECBKM state according to whether the initial value of
\fIstty\fP erase is a backspace (8) or delete (127) character.
d1368 71
d1510 2
a1511 2
filled-\*n_16x16
filled-\*n_32x32
d1514 2
a1515 2
\*n_16x16
\*n_32x32
d1518 2
a1519 2
\*n-color_16x16
\*n-color_32x32
d1640 2
a1641 2
See also the \fBttyModes\fP resource, which may modify this.
The default is \*(``false\*(''.
d1709 1
a1709 1
This causes the keypad \*(``+' to be mapped to \*(``,'.
d1791 1
d1905 1
a1905 1
.TP 5
d2452 1
a2452 1
The \fBitalicULMode\fP resource overrides \fBcolorITMode\fP. 
d2798 1
a2798 1
Interestingly enough, \fIbash\fP's notion of "meta mode"
d2801 1
a2801 1
It happens that \fIbash\fP views "meta mode"
d3755 1
a3755 1
only the the portion within the scrolling margins (false).
d4236 1
a4236 1
Specifies whether to flash only the current line when displaying a visual bell.
d4623 1
a4623 1
.SS "SELECTION"
d4688 1
a4688 1
.SS "SCROLLING"
d4707 1
a4707 1
.SS "TEKTRONIX POINTER"
d4729 1
a4729 1
.SS PRIMARY
d4746 1
a4746 1
.SS CLIPBOARD
d4757 1
a4757 1
The selection named by the atom PRIMARY is used for all commands that take only a single argument and is the principal means of communication between clients that use the selection mechanism. 
d4770 1
a4770 1
.SS SELECTION TARGETS
d4965 1
a4965 1
.BR "hpFunctionKeys "."
d4994 1
a4994 1
the process group of the process running under
d5398 1
a5398 1
assuming the standard app-defaults files,
d5570 1
a5570 1
of \fIrange\fP:\fIvalue\fP pairs.
d5666 1
a5666 1
.SS ACTIONS
a5754 46
.B "fullscreen(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBfullscreen\fP resource.
.TP 8
.B "iconify()"
Iconifies the window.
.TP 8
.B "hard-reset()"
This action resets the scrolling region, tabs, window size, and cursor keys
and clears the screen.
It is also invoked from the \fBhardreset\fP
entry in \fIvtMenu\fP.
.TP 8
.B "ignore()"
This action ignores the event but checks for special pointer position
escape sequences.
.TP 8
.B "insert()"
This action inserts the character or string associated with
the key that was pressed.
.TP 8
.B "insert-eight-bit()"
This action inserts an eight-bit (Meta) version of the character or string
associated with the key that was pressed.
Only single-byte values are treated specially.
The exact action depends on the value of
the \fBaltSendsEscape\fP and
the \fBmetaSendsEscape\fP and
the \fBeightBitInput\fP resources.
The \fBmetaSendsEscape\fP resource is tested first.
See the \fBeightBitInput\fP resource for a full discussion.
.IP
The term \*(``eight-bit\*('' is misleading:
\fI\*n\fP checks if the key is in the range 128 to 255
(the eighth bit is set).
If the value is in that range,
depending on the resource values,
\fI\*n\fP may then do one of the following:
.RS
.bP
add 128 to the value, setting its eighth bit,
.bP
send an ESC byte before the key, or
.bP
send the key unaltered.
.RE
.TP 8
d5786 8
a5793 2
the selection, trimmed of leading/trailing whitespace, and newlines
changed to single spaces.
d5807 9
a5815 1
which completes independently of \*n.
d5825 46
d5895 1
a5895 1
This action is a synonym for \fBinsert()\fP
d6411 1
a6411 1
.SS DEFAULT KEY BINDINGS
d6510 1
a6510 1
keys for entering commonly-typed works:
d6520 1
a6520 1
.SS DEFAULT SCROLLBAR BINDINGS
d6583 45
a6627 1
The \fIXterm Control Sequences\fP document lists the control sequences which
d6631 122
d7121 2
d7136 1
@


1.38
log
@Update to xterm 313. Tested by shadchin@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.586 2014/11/28 22:33:56 tom Exp $
d430 1
a430 1
disabling the display of characters with bold attribute as color
d435 1
a435 1
rather than bold
d696 9
d2357 20
d4128 5
a4132 1
\fBcolorBD\fR, \fBcolorBL\fR, \fBcolorRV\fR and \fBcolorUL\fR.
d4138 3
a4140 2
4 for bold and
8 for blink.
@


1.37
log
@Update to xterm 311. ok shadchin@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.582 2014/09/18 08:35:37 tom Exp $
d100 1
a100 1
derived from 4.3bsd), \fI\*n\fP will use the facilities to notify programs
d1272 1
a1272 1
\fI\*n\fP uses the X Toolkit default, which is \*(``XtDefaultForeground\*(''.
d1401 2
a1402 2
Specifies a icon which will be added to the window manager hints.
\fI\*n\fP provides no default value.
d1453 1
a1453 1
\fI\*n\fP provides no default value;
d1625 2
a1626 3
CTRL F1-F12 to F11-F20, depending on the setting of the \fBctrlFKeys\fP
resource.
so \fI\*n\fP emulates a DEC VT220 more accurately.
d1728 2
a1729 1
to the terminal I/O connection, e.g., according to the window manager.
d1788 1
a1788 1
\fI\*n\fP checks at startup, and shows an active icon only for window
d1868 1
a1868 1
\fI\*n\fP can tell the querying program how many colors it supports.
d1873 1
a1873 1
\fI\*n\fP can tell the querying program what strings are sent by modified
d2022 1
a2022 1
Specifies whether or not the \fI\*n\fR uses a 50 millisecond timeout to
d2099 2
a2100 1
In the X server's configuration file (e.g., \*(``/etc/X11/XFree86\*(''), you
d2485 1
a2485 1
\fI\*n\fP ignores capitalization, but
d2509 1
a2509 1
\fI\*n\fP ignores capitalization, but
d2529 1
a2529 1
\fI\*n\fP ignores capitalization, but
d2550 1
a2550 1
\fI\*n\fP ignores capitalization, but
d2655 1
a2655 1
\fIxmodmap\fP lists your key modifiers.
d2659 1
a2659 1
\fI\*n\fP inspects the same information to find the modifier associated
d3146 1
a3146 1
\fI\*n\fR will use the
d3154 1
a3154 1
\fI\*n\fR will follow users'
d3169 1
a3169 1
\fI\*n\fR will use conventional 8bit mode
d3458 1
a3458 1
\fI\*n\fP interprets it as the end of the list.
d3674 12
d6788 1
a6788 1
\fI\*n\fP feeds large pastes to the pty only as fast as the pty
@


1.36
log
@Update to xterm 304. With help of shadchin@@

tested by ajacoutot@@ and shadchin@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.581 2014/04/14 18:42:54 Ross.Combs Exp $
d4626 18
@


1.35
log
@Update to xterm 301
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.576 2014/01/16 01:19:19 tom Exp $
d126 4
a129 4
.IR Termcap (5)
entries that work with
.I \*n
include
d131 1
d133 1
d135 1
d137 1
d139 5
a143 3
\*(``dumb\*(''.
.I \*n
automatically searches the termcap file in this order for these entries and then
d147 2
d211 1
a211 5
The
.IR termcap (5)
entry for
.I \*n
allows the visual editor
d321 1
a321 1
adjusts its sense of \*(``reverse\*('' 
d326 2
a327 5
That overrides \fI\*n\fP's built-in choice of shell program.
Normally \fI\*n\fP checks the \*(``SHELL\*('' variable.
If that is not set, \fI\*n\fP tries to use the shell program specified
in the password file.
If that is not set, \fI\*n\fP uses \fI/bin/sh\fP.
d331 18
a348 1
In either case, it constructs an absolute path.
d351 6
d896 5
d1030 4
a1033 3
.IR Termcap (5)
entries that work with
.I \*n
d1035 1
d1037 1
d1039 1
d1041 1
d1043 1
d1045 1
d1047 1
a1047 1
automatically searches the termcap file in this order for these entries and then
d1098 3
a1100 1
If you must turn it on and off, use the \fBwideChars\fP resource.
d1158 9
a1166 4
When \fBwideChars\fP is set, \fI\*n\fP maintains internal structures for 16-bit
characters.
If you do not set this resource to \*(``true\*('',
\fI\*n\fP will ignore the escape sequence which turns UTF-8 mode on and off.
d2010 1
a2010 1
The reason for this resource is to help with 
d5048 2
a5049 1
after the image when returning to text mode.
d5052 1
a5052 2
cropped to fit the screen, and do not affect the text cursor location
(this is the default).
d6440 1
a6440 1
is set according to the termcap (or terminfo) entry which it is using as
d6442 5
d6491 8
a6498 1
It is also set if you provide the shell name as the optional parameter.
d6512 5
@


1.34
log
@Update to xterm-300. Tested  by ajacoutot@@ and shadchin@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.572 2013/11/23 17:40:11 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2012,2013 by Thomas E. Dickey
d189 1
a189 2
.I Xterm
automatically highlights the text cursor when the
d223 1
a223 2
.I Xterm
allows character-based applications to receive mouse events (currently
d228 1
a228 1
.
d238 1
a238 3
The \fB\-version\fP and \fB\-help\fP options are interpreted even if \fI\*n\fP
cannot open the display, and are useful for testing and configuration scripts.
Along with \fB\-class\fP, they are checked before other options.
d258 1
a258 1
.PP
d262 58
a319 1
.
d323 1
a323 1
Normally \fI\*n\fP checks the SHELL variable.
d333 1
d4645 1
a4645 2
.I Xterm
has four menus, named
d5551 1
a5551 1
	Meta <KeyPress> /:dabbrev-expand()
d6214 2
a6215 1
which is set by the \fBselectToClipboard\fP resource:
d6262 2
a6263 13
The default bindings for the scrollbar widget
are separate from the VT100 widget:
.NS
                      <Btn5Down>: StartScroll(Forward) \\n\\\&
                      <Btn1Down>: StartScroll(Forward) \\n\\\&
                      <Btn2Down>: StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
                      <Btn3Down>: StartScroll(Backward) \\n\\\&
                      <Btn4Down>: StartScroll(Backward) \\n\\\&
                      <Btn2Motion>: MoveThumb() NotifyThumb() \\n\\\&
                      <BtnUp>:    NotifyScroll(Proportional) EndScroll()
.NE
.PP
The default bindings in the Tektronix window are:
d6301 9
a6309 1
Below is a sample of how the \fBkeymap()\fP action is used to add special
d6314 30
a6343 5
	<Key>F14:	keymap(None) \\n\\\&
	<Key>F17:	string("next") string(0x0d) \\n\\\&
	<Key>F18:	string("step") string(0x0d) \\n\\\&
	<Key>F19:	string("continue") string(0x0d) \\n\\\&
	<Key>F20:	string("print ") insert-selection(PRIMARY, CUT_BUFFER0)
d6346 26
a6371 1
Some people prefer using the left pointer button
d6373 1
a6373 1
That can be setup by altering the translations resource, e.g.,
d6375 6
a6380 6
*VT100.scrollbar.translations:	#override \\n\\\&
	<Btn5Down>:	StartScroll(Forward) \\n\\\&
	<Btn1Down>:	StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
	<Btn4Down>:	StartScroll(Backward) \\n\\\&
	<Btn1Motion>:	MoveThumb() NotifyThumb() \\n\\\&
	<BtnUp>:	NotifyScroll(Proportional) EndScroll()
d6390 1
a6390 2
.I Xterm
sets several environment variables:
@


1.33
log
@Update to xterm 296. Sixel graphics disabled for now.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.569 2013/07/05 20:35:30 tom Exp $
d818 5
d1473 5
d1908 10
d3951 1
a3951 1
font to be combined with an ISO-10646 font if the latter is given
@


1.32
log
@Update to xterm 293. Tested by naddy@@ ajacoutot@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.564 2013/05/16 09:57:06 tom Exp $
d974 1
a974 1
Valid values include vt52, vt100, vt101, vt102, and vt220
d3543 7
d3753 5
d4255 3
d4926 28
d5929 3
d5956 4
d5964 4
a5967 3
.B "set-sco-function-keys(\fIon/off/toggle\fP)"
This action sets, unsets or toggles the \fBscoFunctionKeys\fP resource.
It is also invoked by the \fBscoFunctionKeys\fP entry in \fImainMenu\fP.
a6142 1
.ta 2.5i
a6190 1
.ta 2.5i
a6201 1
.ta 2.5i
a6230 1
.ta .5i 1.5i
a6240 1
.ta .5i 1.5i
a6253 1
.ta .5i 1.5i
@


1.31
log
@Update to xterm 291. Tested by many.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.556 2013/02/13 00:47:18 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2011,2012 by Thomas E. Dickey
d1250 1
a1250 1
The default is \*(``__backarrow_key_erase__\*(''.
d1711 9
d1915 1
a1915 1
The default is \*(``__backarrow_key_is_del__\*(''.
d2740 2
a2741 1
Specifies the name of the first alternative font.
d2744 2
a2745 1
Specifies the name of the second alternative font.
d2748 2
a2749 1
Specifies the name of the third alternative font.
d2752 2
a2753 1
Specifies the name of the fourth alternative font.
d2756 2
a2757 1
Specifies the name of the fifth alternative font.
d2760 2
a2761 1
Specifies the name of the sixth alternative font.
d3091 5
d4067 1
a4067 2
The name and classes
of the entries in each of the menus are listed below.
d4070 3
d4075 2
a4076 1
The \fImainMenu\fP has the following entries:
d4162 2
a4163 1
The \fIvtMenu\fP has the following entries:
d4245 2
a4246 1
The \fIfontMenu\fP has the following entries:
d4249 3
a4251 1
This entry invokes the \fBset-vt-font(d)\fP action.
d4254 3
a4256 1
This entry invokes the \fBset-vt-font(1)\fP action.
d4259 3
a4261 1
This entry invokes the \fBset-vt-font(2)\fP action.
d4264 3
a4266 1
This entry invokes the \fBset-vt-font(3)\fP action.
d4269 3
a4271 1
This entry invokes the \fBset-vt-font(4)\fP action.
d4274 3
a4276 1
This entry invokes the \fBset-vt-font(5)\fP action.
d4279 3
a4281 1
This entry invokes the \fBset-vt-font(6)\fP action.
d4308 2
a4309 1
The \fItekMenu\fP has the following entries:
d5927 18
a5944 5
This action sets font used in the Tektronix window to the value of the
resources \fBtektextlarge\fP, \fBtektext2\fP, \fBtektext3\fP, and
\fBtektextsmall\fP according to the argument.
It is also invoked by the entries
of the same names as the resources in \fItekMenu\fP.
d5991 1
a5991 1
specified by the \fIfont1\fP through \fIfont6\fP resources,
d6237 4
@


1.30
log
@Update to xterm 287. tested by mpi@@ and krw@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.554 2012/11/22 18:42:30 tom Exp $
d88 1
a88 1
\*n \- terminal emulator for X
d3788 1
a3788 1
Set window/icon labels using UTF-8 (overrides \fButf8Titles\fP resource).
@


1.29
log
@Update to xterm 279. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.528 2012/05/10 13:35:30 tom Exp $
d59 3
a76 1
.sp
d86 1
a86 1
.TH XTERM 1 __vendorversion__
d88 1
a88 1
xterm \- terminal emulator for X
d90 1
a90 1
.B xterm
d93 1
a93 1
The \fIxterm\fP program is a terminal emulator for the X Window System.
d100 1
a100 1
derived from 4.3bsd), \fIxterm\fP will use the facilities to notify programs
d128 1
a128 1
.I xterm
d136 1
a136 1
.I xterm
d141 1
a141 1
(The \*(``TERMCAP\*('' environment variable is not set if \fIxterm\fP is linked
d147 1
a147 1
.I xterm
d161 1
a161 1
.I xterm
d177 1
a177 1
.I xterm
d179 1
a179 1
.IR xterm ).
d183 1
a183 1
this version of \fIxterm\fP.
d207 1
a207 1
.I xterm
d219 1
a219 1
\fIxterm\fP implements the window-manipulation control
d232 1
a232 1
The \fIxterm\fP terminal emulator
d240 1
a240 1
The \fB\-version\fP and \fB\-help\fP options are interpreted even if \fIxterm\fP
d245 1
a245 1
This causes \fIxterm\fP to print a version number to the standard output,
d249 1
a249 1
This causes \fIxterm\fP to print out a verbose message describing its options,
d252 2
a253 2
After printing the message, \fIxterm\fP exits.
\fIXterm\fP generates this message, sorting it and noting whether
d257 1
a257 1
\fIXterm\fP generates a concise help message (multiple options per line)
d260 1
a260 1
\fBxterm \-z\fP
d262 1
d264 1
a264 1
into \fIxterm\fP, the help text for that option also is not displayed
d269 3
a271 3
That overrides \fIxterm\fP's built-in choice of shell program.
Normally \fIxterm\fP checks the SHELL variable.
If that is not set, \fIxterm\fP tries to use the shell program specified
d273 1
a273 1
If that is not set, \fIxterm\fP uses \fI/bin/sh\fP.
d276 1
a276 1
\fIxterm\fP looks for the file in the user's PATH.
d282 1
a282 1
Not all options are necessarily configured into your copy of \fIxterm\fP:
d288 1
a288 1
.I xterm
d293 1
a293 1
.I xterm
d296 1
a296 1
.I xterm
d302 1
a302 1
.I xterm
d307 1
a307 1
into \fIxterm\fP.
d313 1
a313 1
into \fIxterm\fP.
d388 1
a388 1
This option allows you to override \fIxterm\fP's resource class.
d416 1
a416 1
This option indicates that \fIxterm\fP should work around a bug in the
d428 1
a428 1
This option indicates that \fIxterm\fP should not work around the
d448 1
a448 1
run in the \fIxterm\fP window.
d455 1
a455 1
This option determines the encoding on which \fIxterm\fP runs.
d473 1
a473 1
library if support for that library was compiled into \fIxterm\fP.
d484 1
a484 1
This option indicates that \fIxterm\fP should compare normal and bold fonts bounding
d489 1
a489 1
This option indicates that \fIxterm\fP should not compare normal and bold fonts bounding
d494 1
a494 1
This option indicates that \fIxterm\fP should not assume that the
d496 1
a496 1
If any are missing, \fIxterm\fP will draw the characters directly.
d500 1
a500 1
This option indicates that \fIxterm\fP should assume that the
d506 1
a506 1
library if support for that library was compiled into \fIxterm\fP.
d511 1
a511 1
into \fIxterm\fP.
d517 1
a517 1
library if support for that library was compiled into \fIxterm\fP.
d521 1
a521 1
This option indicates that \fIxterm\fP should ask the window manager to
d527 1
a527 1
This option indicates that \fIxterm\fP should not ask the window manager to
d569 1
a569 1
Tells \fIxterm\fP to use
d575 1
a575 1
Tells \fIxterm\fP not to use
d582 1
a582 1
\fIxterm\fP will not immediately destroy its window when the shell command completes.
d588 1
a588 1
\fIxterm\fP will immediately destroy its window when the shell command completes.
d610 3
a612 3
\fIxterm\fP will reparent its top-level shell widget to that window.
This is used to embed \fIxterm\fP within other applications.
.PP
d616 1
a616 1
that \fIxterm\fP's \fBallowSendEvents\fP resource is enabled.
d619 1
a619 1
This option indicates that \fIxterm\fP should do jump scrolling.
d622 1
a622 1
text is scrolled one line at a time; this option allows \fIxterm\fP to move
d625 1
a625 1
strongly recommended since it makes \fIxterm\fP much faster when scanning
d633 1
a633 1
This option indicates that \fIxterm\fP should not do jump scrolling.
d637 1
a637 1
When \fBallowC1Printable\fP is set, \fIxterm\fP overrides the mapping
d670 2
a671 2
Some versions of \fIxterm\fP may have logging enabled.
The logfile is written to the directory from which \fIxterm\fP is
d681 1
a681 1
depending on how \fIxterm\fP was built.
d718 1
a718 1
This option indicates that the shell that is started in the \fIxterm\fP window
d724 1
a724 1
because \fIxterm\fP does not know how to make the shell
d727 1
a727 1
Also, \fIxterm\ \-e\fP is supposed to provide a consistent
d735 1
a735 1
xterm \-e /bin/bash \-l \-c "my command here"
d737 1
d739 1
a739 1
because \fIxterm\ \-ls\ \-e\fP does write a \fI/etc/wtmp\fP entry
d741 1
a741 1
whereas \fIxterm\ \-e\fP does not.
d744 1
a744 1
This option indicates that \fIxterm\fP should ask the window manager to
d752 2
a753 2
This option indicates that \fIxterm\fP should ask the window manager to
maximize its layout on startup.
d760 1
a760 1
This option indicates that \fIxterm\fP should ring a margin bell when
d779 1
a779 1
This makes \fIxterm\fP use a built-in version of the wide-character width
d841 1
a841 1
This option indicates that \fIxterm\fP may scroll asynchronously, meaning that
d843 1
a843 1
This allows \fIxterm\fP to run faster when network latencies are very high
d848 1
a848 1
This option indicates that \fIxterm\fP should scroll synchronously.
d921 1
a921 1
indicates that \fIxterm\fR should
d925 1
a925 1
This option indicates that \fIxterm\fR should
d938 1
a938 1
This option indicates that \fIxterm\fP should start in Tektronix mode, rather
d944 1
a944 1
.I xterm
d951 1
a951 1
.I xterm
d956 1
a956 1
This option indicates that \fIxterm\fP should start in VT102 mode.
d960 1
a960 1
indicates that \fIxterm\fR should display a toolbar (or menubar)
d966 1
a966 1
This option indicates that \fIxterm\fR should
d970 1
a970 1
Specify the name used by \fIxterm\fP to select the
d993 1
a993 1
(termcap or terminfo, depending on how \fIxterm\fP is built)
d995 1
a995 1
If the terminal type is not found, \fIxterm\fP uses the built-in list
d1000 1
a1000 1
When \fButf8\fP is set, \fIxterm\fP interprets incoming data as UTF-8.
d1007 1
a1007 1
That is, if \fIxterm\fP has been compiled to support \fIluit\fR,
d1044 1
a1044 1
This option indicates that \fIxterm\fP should not write a record into the
d1048 1
a1048 1
This option indicates that \fIxterm\fP should write a record into
d1061 1
a1061 1
When \fBwideChars\fP is set, \fIxterm\fP maintains internal structures for 16-bit
d1064 1
a1064 1
\fIxterm\fP will ignore the escape sequence which turns UTF-8 mode on and off.
d1071 1
a1071 1
This option indicates that \fIxterm\fP should wait for the window to be mapped
d1078 1
a1078 1
This option indicates that \fIxterm\fP should not wait before starting the
d1088 1
a1088 1
(A similar feature was in x10 \fIxterm\fP.)
d1102 1
a1102 1
This option allows \fIxterm\fP to be used as an input and
d1119 2
a1120 1
Note that \fIxterm\fP does not close any file descriptor
d1123 3
a1125 2
which passes an open file descriptor down to \fIxterm\fP past the
initialization or the \fB\-S\fP option to a process running in the \fIxterm\fP.
d1141 1
a1141 1
This option specifies the title for \fIxterm\fP's windows.
d1145 1
a1145 1
This option specifies the icon name for \fIxterm\fP's windows.
d1149 2
d1162 1
d1165 1
a1165 1
with \fIxterm\fP:
d1170 1
a1170 1
\fIxterm\fP uses the X Toolkit default, which is \*(``XtDefaultForeground\*(''.
d1185 1
a1185 1
See the \fB\-b\fP option, which controls the inner border of the \fIxterm\fP
d1210 1
a1210 1
This option indicates that \fIxterm\fP should ask the window manager to
d1249 2
a1250 1
The default is \*(``false\*('', which disables this feature.
d1253 1
a1253 1
Specifies whether or not \fIxterm\fP should ask the window manager to
d1255 1
a1255 1
\fIXterm\fP accepts either a keyword (ignoring case)
d1281 1
a1281 1
\fIxterm\fP will not immediately destroy its window when the shell command completes.
d1298 51
d1350 7
a1356 2
Specifies the icon name.
The default is the application name, e.g., \*(``xterm\*(''.
d1390 1
a1390 1
Specifies whether or not \fIxterm\fP should ask the window manager to
d1400 1
a1400 1
.TP 9
d1415 1
a1415 1
that \fIxterm\fR requests on each read.
d1420 1
a1420 1
Selectively omit one or more parts of \fIxterm\fP's default translations
d1428 1
a1428 1
\fIXterm\fP also recognizes \*(``default\*('',
d1433 1
a1433 1
If \*(``true\*('', \fIxterm\fP will perform handshaking during initialization
d1444 1
a1444 1
If \*(``true\*('', \fIxterm\fP will use the pseudo-terminal's sense of the \fIstty\fP erase
d1446 1
a1446 1
If \*(``false\*('', \fIxterm\fP will set the \fIstty\fP erase value to match its own
d1450 1
a1450 1
which \fIxterm\fP sets.
d1456 1
a1456 1
If \*(``true\*('', \fIxterm\fP will reset the screen size after
d1469 1
a1469 1
If the value of this resource is \*(``true\*('', \fIxterm\fP does not send
d1487 1
a1487 1
\fIXterm\fP checks the font metrics to find what the library claims are
d1503 1
a1503 1
\fIxterm\fP sets up session manager callbacks
d1520 1
a1520 1
so \fIxterm\fP emulates a DEC VT220 more accurately.
d1522 1
a1522 1
\fIxterm\fP uses PC-style bindings for the function keys and keypad.
d1587 1
a1587 1
an \fIxterm\fP is started.
d1589 1
a1589 1
keywords; \fIxterm\fR's table is built-in.
d1593 1
a1593 1
i.e., \fIxterm\fP initializes the terminal to match that value.
d1602 1
a1602 1
Specifies whether or not \fIxterm\fP should try to record the display
d1608 1
a1608 1
Specifies whether or not \fIxterm\fP should try to record the user's terminal
d1611 1
a1611 1
If true, \fIxterm\fP will not try.
d1615 1
a1615 1
Specifies whether or not \fIxterm\fP should wait for the initial window map
d1620 1
a1620 1
When \fIxterm\fP is directed to wait in this fashion,
d1634 1
a1634 1
(A similar feature was in x10 \fIxterm\fR.)
d1642 1
a1642 1
then \fIxterm\fP inserts the icon title at that point rather
d1652 1
a1652 1
If your \fIxterm\fP is configured to support the \*(``toolbar\*('', then those
d1661 1
a1661 1
\fIxterm\fP window is iconified, if this feature is compiled into \fIxterm\fR.
d1664 1
a1664 2
Not all window managers
necessarily support application icon windows.
d1667 22
a1688 1
The default is \*(``false\*(''.
d1691 1
a1691 1
When set to \*(``false\*('', \fIxterm\fP will not use bold fonts.
d1718 1
a1718 1
When this feature is enabled, \fIxterm\fP will sense the state of the
d1720 1
a1720 1
Pressing the Scroll Lock key toggles \fIxterm\fP's internal state,
d1722 1
a1722 1
While the Scroll Lock is active, \fIxterm\fP attempts to keep a viewport on the
d1745 1
a1745 1
The default is \*(``false\*(''.
d1752 1
a1752 1
\fIxterm\fP can tell the querying program how many colors it supports.
d1757 1
a1757 1
\fIxterm\fP can tell the querying program what strings are sent by modified
d1798 1
a1798 1
This applies as well to function key control sequences, unless \fIxterm\fP
d1805 9
a1814 1
.RE
d1816 1
a1816 1
\fIXterm\fP provides a menu option for toggling this resource.
d1819 1
a1819 1
Specifies whether \fIxterm\fP should check if the normal and bold
d1823 1
a1823 1
\fIxterm\fP does not make the check for
d1838 15
d1858 1
a1858 1
Specifies whether or not \fIxterm\fP should always display a highlighted
d1866 1
a1866 1
Override the \fBnumLock\fP resource, telling \fIxterm\fR to use the Alt and Meta
d1869 1
a1869 1
Normally \fIxterm\fP checks if Alt or Meta is used in a translation that
d1875 1
a1875 1
Specifies the string that \fIxterm\fR sends in response to an ENQ (control/E)
d1896 1
a1896 1
Specifies whether or not the \fIxterm\fR uses a 50 millisecond timeout to
d1905 2
a1906 1
The default (backspace) is \*(``true\*(''.
d1956 2
a1957 2
Note that \fIxterm\fP has one bold font which you may set explicitly.
\fIXterm\fP attempts to derive a bold font for the other font selections
d1967 1
a1967 1
Although \fIxterm\fP attempts to derive a bold font for other font selections,
d1970 1
a1970 1
The font server claims to provide the bold font that \fIxterm\fP requests,
d1976 1
a1976 1
which comprise the fixed-pitch fonts that are used by \fIxterm\fP.
d1981 1
d1986 1
d1992 1
a1992 1
The bitmap scaling feature is also used by \fIxterm\fP to implement
d1996 1
a1996 1
If true, \fIxterm\fP applies a workaround to ignore malformed control
d2003 1
a2003 1
If true, \fIxterm\fP in 8-bit mode will interpret
d2017 1
a2017 1
Set this to \*(``true\*('' if \fIxterm\fP appears to freeze when connecting.
d2020 1
a2020 1
\fIXterm\fP's state parser recognizes
d2040 1
a2040 1
\fIXterm\fP recognizes these controls in all modes,
d2076 1
a2076 1
Tells whether to cache double-sized fonts by \fIxterm\fR.
d2079 8
d2095 1
a2095 1
Specifies whether \fIxterm\fP should follow
d2103 1
a2103 1
choice between the system's \fBwcwidth\fP and \fIxterm\fP's built-in tables.
d2198 2
d2212 2
d2230 2
d2243 2
d2277 1
a2277 1
\fIXterm\fP uses two variables to determine whether the cursor blinks.
d2280 1
a2280 1
\fIXterm\fP tests the XOR of the two variables.
d2286 1
a2286 1
\fIxterm\fP attempts to keep this color from being the same as the background
d2291 1
a2291 1
most of \fIxterm\fP's adjustments to cursor color.
d2331 1
a2331 1
Specify the character (or string) which \fIxterm\fP will substitute when
d2340 1
a2340 1
\fIxterm\fP will add a space after the \*(``#\*('' character, to give roughly
d2346 2
a2347 1
The default is \*(``false\*('', for the latter.
d2358 1
a2358 1
\fIxterm\fP ignores capitalization, but
d2382 1
a2382 1
\fIxterm\fP ignores capitalization, but
d2402 1
a2402 1
\fIxterm\fP ignores capitalization, but
d2423 1
a2423 1
\fIxterm\fP ignores capitalization, but
d2430 1
a2430 1
Report xterm window's icon label as a string.
d2439 1
a2439 1
Report xterm window position as numbers.
d2445 1
a2445 1
Report xterm window in pixels as numbers.
d2448 1
a2448 1
Report xterm window state as a number.
d2451 1
a2451 1
Report xterm window's title as a string.
d2454 1
a2454 1
Lower the xterm window to the bottom of the stacking order.
d2472 1
a2472 1
Raise the xterm window to the front of the stacking order.
d2475 1
a2475 1
Refresh the xterm window.
d2493 1
a2493 1
Resize the xterm window to given size in pixels.
d2532 1
a2532 1
\fIxterm\fP inspects the same information to find the modifier associated
d2540 1
a2540 1
\fIxterm\fP will only see the Alt-key definitions, since those are tested
d2544 1
a2544 1
otherwise some of \fIxterm\fP's functionality is not available.
d2548 1
a2548 1
the \fIxterm\fP tries to put the terminal into 8-bit mode.
d2550 1
a2550 1
on startup, \fIxterm\fP tries to put the terminal into 7-bit mode.
d2552 1
a2552 1
After startup, \fIxterm\fP does not
d2559 1
a2559 1
\fIxterm\fP can modify \fBeightBitInput\fP after startup
d2568 1
a2568 1
as the ESC character that \fIxterm\fP puts before a character when a
d2574 1
a2574 1
This controls the way \fIxterm\fP modifies the eighth bit of a single-byte
d2594 1
a2594 1
Except for the \fBnever\fP choice, \fIxterm\fP honors the
d2600 1
a2600 1
\fIxterm\fP encodes the value as UTF-8
d2610 1
a2610 1
Override \fIxterm\fP's default selection target list (see SELECT/PASTE) for
d2617 1
a2617 1
library if support for that library was compiled into \fIxterm\fR.
d2622 1
a2622 1
\fIxterm\fR uses the bitmap \fBfont\fP and related resources.
d2630 1
d2638 1
d2648 1
a2648 1
\fIxterm\fP will use a scaled version of the font given by \fBfaceName\fP.
d2652 1
a2652 1
library if support for that library was compiled into \fIxterm\fR.
d2670 1
a2670 1
which causes \fIxterm\fP to use the ratio of font sizes
d2674 1
a2674 1
If all of the \fBfaceSize\fP resources are set, then \fIxterm\fP
d2677 3
a2679 3
\fIlarger-vt-font()\fP and
\fIsmaller-vt-font()\fP actions.
If any are not set, \fIxterm\fP will use only the areas of the bitmap fonts.
d2710 1
d2715 1
d2720 1
d2749 1
a2749 1
Specifies whether \fIxterm\fP should attempt to use font scaling to draw
d2754 1
a2754 1
If disabled, \fIxterm\fP will simulate double-sized characters by drawing
d2758 1
a2758 1
Specify whether \fIxterm\fP should report an error if it fails to load a font:
d2774 1
a2774 1
Specifies whether \fIxterm\fP should assume the normal and bold fonts
d2778 1
a2778 1
The fixed-pitch ISO-8859-*-encoded fonts used by \fIxterm\fP
d2783 1
a2783 1
\fIxterm\fP uses the Unicode glyphs which match the VT100 line-drawing glyphs.
d2786 1
a2786 1
If \*(``false\*('', \fIxterm\fP checks for missing glyphs in the font
d2788 1
a2788 1
If \*(``true\*('', \fIxterm\fP assumes the font does not contain the
d2793 1
a2793 1
Specifies whether \fIxterm\fP should use the maximum or minimum glyph
d2819 1
a2819 1
Specifies whether \fIxterm\fP should assume the bounding boxes for
d2821 1
a2821 1
If \*(``false\*('', \fIxterm\fP compares them and will reject choices of
d2835 1
a2835 1
Specifies whether \fIxterm\fP should use
d2839 1
a2839 1
at startup, \fIxterm\fP checks if those resources are set to something
d2899 1
a2899 1
Specifies whether \fIxterm\fP should reverse the selection foreground
d2904 2
a2905 2
If \*(``true\*('', \fIxterm\fP reverses the colors,
If \*(``false\*('', \fIxterm\fP does not reverse colors,
d2911 1
a2911 1
If \*(``true\*('', \fIxterm\fP highlights only the positions that contain text that
d2917 1
a2917 1
\fIXterm\fP stores data as it is shown on the screen.
d2933 1
a2933 1
\*(``true\*('' causes \fIxterm\fP to interpret ESC F as a request to move to the
d2938 1
a2938 1
If false, \fIxterm\fP will not request the targets
d2947 1
a2947 1
is compiled into \fIxterm\fR.
d2953 1
a2953 1
is compiled into \fIxterm\fR.
d2959 1
a2959 1
is compiled into \fIxterm\fR.
d2964 1
a2964 1
Values are the same as for the \fIset-vt-font\fP action.
d2968 1
a2968 1
Tells \fIxterm\fP which type of input method to use.
d2987 1
a2987 1
Specifies whether \fIxterm\fR will keep the selection even after the
d3013 1
a3013 1
\fIxterm\fR will use the
d3021 1
a3021 1
\fIxterm\fR will follow users'
d3025 1
a3025 1
For other locales, \fIxterm\fR will use conventional 8bit mode.
d3028 1
a3028 1
If mini-luit is compiled-in, \fIxterm\fR will check if a Unicode font has
d3033 1
a3033 1
For other encodings, \fIxterm\fR assumes that UTF-8 encoding is required.
d3036 1
a3036 1
\fIxterm\fR will use conventional 8bit mode
d3049 2
a3050 2
or locale-support by \fIxterm\fP may not be needed.
At startup, \fIxterm\fP uses a mechanism equivalent to
d3058 1
a3058 1
The resource files distributed with \fIxterm\fP use ISO-10646-1 fonts,
d3064 1
a3064 1
The help message shown by \*(``xterm \-help\*('' lists the default value,
d3072 1
d3092 1
a3092 1
This applies as well to function key control sequences, unless \fIxterm\fP
d3096 1
a3096 1
The default is \*(``false\*(''.
d3101 1
a3101 1
on startup \fIxterm\fP compares its built-in tables to the system's
d3113 1
a3113 1
Specifies whether \fIxterm\fP should use a built-in version of the wide
d3137 13
a3149 8
.IP
Set it to \-1 to disable it.
.br
Set it to 0 to use the old/obsolete behavior.
.br
Set it to 1 to prefix modified sequences with CSI.
.br
Set it to 2 to force the modifier to be the second parameter if it would
d3151 4
a3154 2
.br
Set it to 3 to mark the sequence with a \*(``>\*('' to hint that it is private.
d3162 4
a3165 2
.IP
Set it to \-1 to permit the user to use shift- and control-modifiers
d3167 9
a3175 6
.br
Set it to 0 to use the old/obsolete behavior.
.br
Set it to 1 to prefix modified sequences with CSI.
.br
Set it to 2 to force the modifier to be the second parameter if it would
d3177 4
a3180 2
.br
Set it to 3 to mark the sequence with a \*(``>\*('' to hint that it is private.
d3183 1
a3183 1
\fIxterm\fP uses Control- and Shift-modifiers to allow the user to
d3198 5
a3202 4
As a special case,
legacy (when \fBoldFunctionKeys\fP is true)
or vt220 (when \fBsunKeyboard\fP is true) keyboards interpret only the
Control-modifier when constructing numbered function-keys.
d3205 24
d3231 1
a3231 1
Like \fBmodifyCursorKeys\fP, tells \fIxterm\fP to construct an
d3266 1
a3266 1
If \*(``true\*('', \fIxterm\fR checks if NumLock is used as a modifier (see \fIxmodmap\fP(__mansuffix__)).
d3274 2
a3275 2
If \*(``true\*('', \fIxterm\fR will use old-style control sequences for function keys F1 to F4,
for compatibility with X Consortium \fIxterm\fR.
d3320 1
a3320 1
\fIxterm\fP interprets it as the end of the list.
d3329 1
a3329 1
On startup, \fIxterm\fP determines the maximum number of clicks
d3333 1
a3333 1
Tells \fIxterm\fP whether to open the input method at startup.
d3357 1
a3357 1
the application running in \fIxterm\fP has not activated mouse mode.
d3376 1
a3376 1
Tells \fIxterm\fP whether to precompose UTF-8 data into Normalization Form C,
d3382 1
a3382 1
Tells \fIxterm\fP which types of preedit (preconversion) string to display.
d3403 1
a3403 1
\fIxterm\fP prints the screen contents directly to a file.
d3412 1
a3412 1
If \fIxterm\fP exits with an X error,
d3430 1
a3430 1
\fIxterm\fP prints the screen contents directly to a file.
d3437 1
a3437 1
\fIXterm\fP implements the \fBprintFileOnXError\fP feature using
d3458 1
a3458 1
8 
d3485 1
a3485 1
If \*(``true\*('', \fIxterm\fR will close the printer (a pipe) when the application switches
d3491 1
a3491 1
.I xterm
d3500 1
a3500 1
.I xterm
d3530 1
a3530 1
If \fIxterm\fR is built with the Xft library,
d3559 1
a3559 1
\fIXterm\fP has a separate  compiled-in value for \fBfaceName\fP
d3582 1
a3582 1
Tells \fIxterm\fP how many times to retry,
d3595 1
a3595 1
There are several aspects to reverse video in \fIxterm\fP:
d3600 1
a3600 1
\fIXterm\fP's command-line options set resource values.
d3604 1
a3604 1
If the user has also used command-line options \fB\-fg\fP or \fB\-bg\fP 
d3606 1
a3606 1
\fIxterm\fP does not see these options directly.
d3623 1
a3623 1
Programs running in an \fIxterm\fP can also use control sequences
d3626 1
a3626 1
\fIXterm\fP exchanges the current foreground and background colors
d3645 1
a3645 1
This corresponds to \fIxterm\fP's private mode 45.
d3666 1
a3666 1
Note that this is drawn to overlap the border of the \fIxterm\fP window.
d3674 1
a3674 1
This corresponds to \fIxterm\fP's private mode 1011.
d3680 1
a3680 1
\fIscroll-forw\fP actions should use as a default.
d3689 1
a3689 1
Tells \fIxterm\fP whether to use the PRIMARY or CLIPBOARD for
d3704 1
a3704 1
Tells \fIxterm\fP whether to display text with blink-attribute the same
d3706 2
a3707 2
If \fIxterm\fP has not been configured to support blinking text,
the default is \*(``true\*('', which corresponds to older versions of \fIxterm\fP,
d3711 1
a3711 1
Tells \fIxterm\fP whether to display a box outlining places where
d3716 1
a3716 1
For debugging \fIxterm\fP and applications that may manipulate the
d3723 1
a3723 1
signals to \fIxterm\fP should be disallowed.
d3740 1
a3740 1
This is useful when running \fIxterm\fP
d3745 1
a3745 1
Specifies whether or not \fIxterm\fP should start up in Tektronix mode.
d3749 1
a3749 1
Specifies whether \fIxterm\fP should scroll to a new page when processing
d3758 1
a3758 1
Specifies whether or not \fIxterm\fP should remove \fIti\fP and \fIte\fP
d3762 1
a3762 1
\fIxterm\fP also ignores the escape sequence to switch to the
d3764 1
a3764 1
\fIXterm\fP supports terminfo in a different way, supporting composite control
d3770 1
a3770 1
Tells \fIxterm\fP whether to accept or return
d3798 1
a3798 1
which provides much of \fIxterm\fP's configurability,
d3809 1
a3809 1
If this resource is true, \fIxterm\fP will trim trailing spaces from
d3823 1
a3823 1
Tell \fIxterm\fP whether to use clipping to keep
d3830 2
a3831 2
This specifies whether \fIxterm\fP will run in UTF-8 mode.
If you set this resource, \fIxterm\fP also sets the \fBwideChars\fP resource as a side-effect.
d3835 1
a3835 1
\fIXterm\fP accepts either a keyword (ignoring case)
d3867 2
a3868 2
This specifies whether \fIxterm\fP will use UTF-8 fonts specified via
resource patterns such as \*(``\fB*vt100.utf8Fonts.font\fP\*('' 
d3873 1
a3873 1
\fIXterm\fP accepts either a keyword (ignoring case)
d3904 1
a3904 1
Override \fIxterm\fP's default selection target list (see SELECT/PASTE) for
d3910 1
a3910 1
Applications can set \fIxterm\fP's title by writing a control sequence.
d3914 1
a3914 1
If \fIxterm\fP is started in a UTF-8 locale,
d3926 1
a3926 1
the particular applications you are running within \fIxterm\fP.
d3953 1
a3953 1
The default is \*(``false\*('', which tells \fIxterm\fP to use an audible bell.
d3965 1
a3965 1
which tells \fIxterm\fP to flash the entire screen.
d3968 1
a3968 1
This specifies whether \fIxterm\fP will interpret VT100 graphic character
d3981 1
a3981 1
Specifies if \fIxterm\fP should respond to control sequences that
d4002 1
a4002 1
Therefore, \fIxterm\fP informs the XIM server of the proper font.
d4037 1
a4037 1
Values are the same as for the \fIset-tek-text\fP action.
d4194 2
a4195 2
compiled into \fIxterm\fP.
It is enabled only if \fIxterm\fP
d4323 1
a4323 1
.I xterm
a4340 1
.RS
a4347 1
.RE
d4352 1
a4352 1
across more than one screen line if lines were wrapped by \fIxterm\fP
d4355 1
a4355 1
\fIxterm\fP will leave the selected text highlighted for as long as it
d4373 1
a4373 1
.I xterm
d4434 1
a4434 1
(the default) \fIxterm\fP can
d4438 1
a4438 1
A user \*(``selects\*('' text on xterm, which highlights the selected text.
d4441 1
a4441 1
If \fIxterm\fP owns the primary selection, it makes the data
d4461 1
a4461 1
\fIxterm\fP tries the following types in this order:
d4466 1
a4466 1
When \fIxterm\fP is built with wide-character support,
d4482 1
a4482 1
The middle two (TEXT and COMPOUND_TEXT) are added if \fIxterm\fP
d4486 1
a4486 1
since \fIxterm\fP stores text as Unicode data when
d4491 1
a4491 1
\fIXterm\fP's \fBdefaultString\fP resource specifies the string to
d4494 1
a4494 1
You can alter the types which \fIxterm\fP tries using the
d4538 1
a4538 1
The \fIxterm\fP \fImainMenu\fP pops up
d4585 1
a4585 1
which toggles a flag telling \fIxterm\fP that if it exits with an X error,
d4609 1
a4609 1
Enabled for VT220 emulation, this controls whether \fIxterm\fP will send
d4613 1
a4613 1
\fIXterm\fP always interprets both 8-bit and 7-bit control sequences
d4670 1
a4670 1
.I xterm
d4681 1
a4681 1
.I xterm
d4796 1
a4796 1
Tell \fIxterm\fP whether to disown the selection when it stops highlighting it,
d4799 1
a4799 1
As long as \fIxterm\fP continues to own the selection,
d4808 1
a4808 1
Tell \fIxterm\fP whether to use the PRIMARY or CLIPBOARD
d4888 1
a4888 1
.I xterm
d5002 1
a5002 1
When unchecked, \fIxterm\fP will not use bold fonts.
d5006 1
a5006 1
When set, tells \fIxterm\fP to draw its own line-drawing characters.
d5011 1
a5011 1
When set, tells \fIxterm\fP to use the minimum glyph-width from a font
d5017 1
a5017 1
When set, \fIxterm\fP may ask the font server to produce scaled versions
d5028 1
a5028 1
this is a further control whether \fIxterm\fP will actually use the
d5032 2
a5033 2
This controls whether \fIxterm\fP uses UTF-8 encoding of input/output.
It is useful for temporarily switching \fIxterm\fP to display
d5038 2
a5039 2
This controls whether \fIxterm\fP uses UTF-8 fonts for display.
It is useful for temporarily switching \fIxterm\fP to display
d5044 1
a5044 1
This controls whether \fIxterm\fP accepts UTF-8 encoding for
d5057 1
a5057 1
this command will launch \fIxterm\fP able to switch between UTF-8
d5060 1
a5060 1
uxterm -class __default_class__
d5063 1
d5169 1
a5169 1
a simple mechanism exists for protecting keyboard input in \fIxterm\fP.
d5172 1
a5172 1
The \fIxterm\fP menu (see \fBMENUS\fP above) contains a \fBSecure Keyboard\fP
d5175 1
a5175 1
\fIonly\fP to \fIxterm\fP (using the GrabKeyboard protocol request).
d5206 1
a5206 1
\fBSecure Keyboard\fP mode will be disabled automatically if your \fIxterm\fP
d5308 1
d5316 2
a5317 1
.SH ACTIONS
d5324 1
d5330 1
a5330 1
This action set or toggles the \fBallowColorOps\fP resource and is also
d5334 1
a5334 1
This action set or toggles the \fBallowFontOps\fP resource and is also
d5338 1
a5338 1
This action set or toggles the \fBallowSendEvents\fP resource and is also
d5342 1
a5342 1
This action set or toggles the \fBallowTcapOps\fP resource and is also
d5346 1
a5346 1
This action set or toggles the \fBallowTitleOps\fP resource and is also
d5350 1
a5350 1
This action set or toggles the \fBallowWindowOps\fP resource and is also
d5373 1
a5373 1
This action creates one of the menus used by \fIxterm\fP,
d5392 1
a5392 1
Here is a resource setting for \fIxterm\fP which will do the same thing:
d5413 2
a5414 2
.B "fullscreen()"
Asks the window manager to change the window to full-screen.
d5445 1
a5445 1
\fIxterm\fP checks if the key is in the range 128 to 255
d5449 1
a5449 1
\fIxterm\fP may then do one of the following:
d5504 2
a5505 2
\fIxterm\fP forks a subprocess and executes the command,
which completes independently of xterm.
d5541 1
a5541 1
it only implies that \fIxterm\fP does not try to add 128 to the key's value
d5585 2
a5586 2
This action prints the window and is also invoked by the
\fIprint\fP entry in \fImainMenu\fP.
d5640 1
a5640 1
Toggles a flag telling \fIxterm\fP that if it exits with an X error,
d5666 2
a5667 2
This action redraws the window and is also invoked by the
\fIredraw\fP entry in \fImainMenu\fP.
d5698 2
a5699 2
This action toggles internal state which tells
\fIxterm\fP whether Scroll Lock is active,
d5735 3
a5737 2
to the \fIxterm\fP subprocess (the shell or program specified with
the \fI\-e\fP command line option) and is also invoked by the
d5755 2
a5756 2
This action toggles the \fBeightBitControl\fP resource and is also invoked from the
\fB8-bit-control\fP entry in \fIvtMenu\fP.
d5759 2
a5760 2
This action toggles the \fBc132\fP resource and is also invoked from the
\fBallow132\fP entry in \fIvtMenu\fP.
d5763 1
a5763 1
This action toggles between the alternate and current screens.
d5766 1
a5766 1
This action toggles the handling Application Cursor Key mode
d5770 1
a5770 1
This action toggles the handling of Application Keypad mode and is also
d5774 2
a5775 2
This action toggles automatic insertion of linefeeds and is also invoked by
the \fBautolinefeed\fP entry in \fIvtMenu\fP.
d5778 2
a5779 2
This action toggles automatic wrapping of long lines and is also invoked by
the \fBautowrap\fP entry in \fIvtMenu\fP.
d5782 2
a5783 2
This action toggles the \fBbackarrowKey\fP resource and is also invoked from the
\fBbackarrow key\fP entry in \fIvtMenu\fP.
d5786 2
a5787 2
This action toggles the \fBbellIsUrgent\fP resource and is also invoked
by the \fBbellIsUrgent\fP entry in \fIvtMenu\fP.
d5790 2
a5791 2
This action toggles the \fBcursorBlink\fP resource and is also invoked from the
\fBcursorblink\fP entry in \fIvtMenu\fP.
d5794 2
a5795 2
This action toggles the \fBcurses\fP resource and is also invoked from the
\fBcursesemul\fP entry in \fIvtMenu\fP.
d5798 2
a5799 2
This action toggles the \fBfontDoublesize\fP resource and is also invoked by
the \fBfont-doublesize\fP entry in \fIfontMenu\fP.
d5802 2
a5803 2
This action toggles the \fBhpFunctionKeys\fP resource and is also invoked by
the \fBhpFunctionKeys\fP entry in \fImainMenu\fP.
d5806 2
a5807 2
This action toggles the \fBjumpscroll\fP resource and is also invoked by the
\fBjumpscroll\fP entry in \fIvtMenu\fP.
d5810 1
a5810 1
This action toggles the \fIxterm\fR's state regarding whether the current font
d5816 1
a5816 1
.\" This action toggles the TBD resource
d5821 1
a5821 1
This action toggles the \fIforcePackedFont\fR's resource
d5826 2
a5827 2
This action toggles the \fBkeepSelection\fP resource and is also invoked by
the \fBkeepSelection\fP entry in \fIvtMenu\fP.
d5829 2
a5830 2
.B "set-logging()"
This action toggles the state of the logging option.
d5833 2
a5834 2
This action toggles the state of legacy function keys and is also invoked by
the \fBoldFunctionKeys\fP entry in \fImainMenu\fP.
d5837 1
a5837 1
This action toggles the \fBmarginBell\fP resource.
d5839 1
a5839 1
.B "set-num-lock()"
d5843 2
a5844 2
This action toggles the \fBpopOnBell\fP resource and is also invoked
by the \fBpoponbell\fP entry in \fIvtMenu\fP.
d5847 2
a5848 2
This action toggles the \fBrenderFont\fP resource and is also invoked by
the \fBrender-font\fP entry in \fIfontMenu\fP.
d5851 2
a5852 2
This action toggles the \fBreverseVideo\fP resource and is also invoked by
the \fBreversevideo\fP entry in \fIvtMenu\fP.
d5855 2
a5856 2
This action toggles the \fBreverseWrap\fP resource and is also invoked by
the \fBreversewrap\fP entry in \fIvtMenu\fP.
d5859 2
a5860 2
This action toggles the \fBscrollKey\fP resource and is also invoked from
the \fBscrollkey\fP entry in \fIvtMenu\fP.
d5863 2
a5864 2
This action toggles the \fBscrollTtyOutput\fP resource and is also invoked
from the \fBscrollttyoutput\fP entry in \fIvtMenu\fP.
d5867 2
a5868 2
This action toggles the \fBscrollbar\fP resource and is also invoked by
the \fBscrollbar\fP entry in \fIvtMenu\fP.
d5871 2
a5872 2
This action toggles the \fBselectToClipboard\fP resource and is also invoked by
the \fBselectToClipboard\fP entry in \fIvtMenu\fP.
d5875 2
a5876 2
This action toggles the \fBscoFunctionKeys\fP resource and is also invoked by
the \fBscoFunctionKeys\fP entry in \fImainMenu\fP.
d5879 2
a5880 2
This action toggles the \fBsunFunctionKeys\fP resource and is also invoked by
the \fBsunFunctionKeys\fP entry in \fImainMenu\fP.
d5883 2
a5884 2
This action toggles the \fBsunKeyboard\fP resource and is also invoked by
the \fBsunKeyboard\fP entry in \fImainMenu\fP.
d5901 1
a5901 1
This action toggles the \fBtiteInhibit\fP resource,
d5905 2
a5906 2
This action toggles the toolbar feature and is also invoked by
the \fBtoolbar\fP entry in \fImainMenu\fP.
d5909 2
a5910 2
This action toggles the \fButf8\fP resource and is also invoked by
the \fButf8-mode\fP entry in \fIfontMenu\fP.
d5913 2
a5914 2
This action toggles the \fButf8Title\fP resource and is also invoked by
the \fButf8-title\fP entry in \fIfontMenu\fP.
d5917 1
a5917 1
This action controls whether or not the \fIvt\fP or \fItek\fP windows are
d5924 2
a5925 2
This action toggles the \fBvisualBell\fP resource and is also invoked
by the \fBvisualbell\fP entry in \fIvtMenu\fP.
d5935 1
a5935 1
\fIxterm\fP was started),
d5948 1
a5948 1
If \fIxterm\fR is configured to support wide characters, an
d5957 2
a5958 2
This action resets the scrolling region and is also invoked from the
\fBsoftreset\fP entry in \fIvtMenu\fP.
d5962 1
a5962 1
Spawn a new \fIxterm\fP process.
d5964 1
a5964 1
process filesystem, e.g., \*(``/proc\*('', which \fIxterm\fP can read.
d5967 1
a5967 1
working directory of the process which is running in the current \fIxterm\fP.
d5971 1
a5971 1
Otherwise, use the $PATH variable to find \fIxterm\fP.
d5974 1
a5974 1
pass them to the new \fIxterm\fP process.
d5998 2
a5999 2
This action clears the Tektronix window and is also invoked by the
\fBtekpage\fP entry in \fItekMenu\fP.
d6002 2
a6003 2
This action resets the Tektronix window and is also invoked by the
\fItekreset\fP entry in \fItekMenu\fP.
d6034 1
d6084 1
d6097 1
d6118 1
d6126 1
a6126 1
While \fIxterm\fP owns the selection, it highlights it.
d6137 1
d6150 1
d6165 1
a6165 1
an application can send \fIxterm\fP to make it perform various operations.
d6183 1
a6183 1
is set to the X window id number of the \fIxterm\fP window.
d6186 1
a6186 1
shows the locale which was used by \fIxterm\fP on startup.
d6198 2
a6199 2
build \fIxterm\fP, followed by
\fIxterm\fP's patch number in parenthesis.
d6204 1
a6204 1
Depending on your system configuration, \fIxterm\fP may also set the
d6208 1
a6208 1
the width of the \fIxterm\fP in characters (cf: \*(``stty columns\*('').
d6211 1
a6211 1
when \fIxterm\fP is configured to update utmp.
d6214 1
a6214 1
the height of the \fIxterm\fP in characters (cf: \*(``stty rows\*('').
d6217 1
a6217 1
when \fIxterm\fP is configured to update utmp.
d6220 1
a6220 1
when \fIxterm\fP is configured to update utmp.
d6243 1
a6243 1
the \fIxterm\fP default application resources.
d6246 1
a6246 1
the \fIxterm\fP color application resources.
d6255 4
a6258 1
\fIxterm\fP uses its compiled-in default resource settings for colors.
d6262 1
a6262 1
Most of the fatal error messages from \fIxterm\fP use the following format:
d6264 1
a6264 1
xterm: Error \fIXXX\fP, errno \fIYYY\fP: \fIZZZ\fP
d6266 1
a6266 1
The \fIXXX\fP codes (which are used by \fIxterm\fP as its exit-code)
a6465 5
.TP
121
ERROR_MMALLOC
.br
my_memmove: malloc/realloc failed
d6473 1
a6473 1
\fIxterm\fP; it is a bug in the pseudo terminal driver of those
d6475 1
a6475 1
\fIxterm\fP feeds large pastes to the pty only as fast as the pty
d6480 1
a6480 1
When connected to an input method, it is possible for xterm to hang
d6485 1
a6485 1
.I xterm
d6504 1
a6504 1
uxterm(__mansuffix__),
@


1.28
log
@Update to xterm 278. Tested by mpi@@, shadchin@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.522 2012/01/08 18:21:15 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2010,2011 by Thomas E. Dickey
d92 4
a95 3
It provides DEC VT102/VT220 (VTxxx) and Tektronix 4014
compatible terminals for programs that cannot
use the window system directly.
d1565 1
a1565 1
and have \*(``***\*('' prepended to their icon titles.
d1570 9
d1665 1
a1665 2
.TP 3
-
d1670 1
a1670 2
.TP 3
-
d2148 5
d2643 1
a2643 2
.TP 5
-
d2647 1
a2647 2
.TP
-
d3201 6
d4168 1
a4168 2
.TP 3
-
d4170 1
a4170 2
.TP
-
d4173 1
a4173 2
.TP
-
@


1.27
log
@Update to xterm 276. Tested by ajacoutot@@, krw@@, naddy@@, shadchin@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.511 2011/10/03 22:23:26 tom Exp $
d128 3
a130 3
\*(``xterm,\*(''
\*(``vt102,\*(''
\*(``vt100,\*(''
d132 1
a132 1
\*(``dumb.\*(''
d136 1
a136 1
You may also use \*(``vt220,\*(''  but must set the terminal emulation level
d940 6
a945 6
\*(``tek4014,\*(''
\*(``tek4015,\*(''
\*(``tek4012,\*(''
\*(``tek4013,\*(''
\*(``tek4010,\*('' and
\*(``dumb.\*(''
d1165 1
a1165 1
The default is \*(``XtDefaultBackground.\*(''
d1185 1
a1185 1
\*(``XtDefaultForeground.\*(''
d1266 1
a1266 1
\*(``false.\*(''
d1308 1
a1308 1
\*(``unknown.\*('', i.e., none of the associated resources are set
d1326 1
a1326 1
\*(``false.\*(''
d1416 11
d1473 1
a1473 1
\*(``false.\*('', i.e., this feature is disabled.
d1487 1
a1487 1
\*(``true.\*(''
d1532 1
a1532 1
The default is \*(``false.\*(''
d1538 1
a1538 1
The default is \*(``true.\*(''
d1545 1
a1545 1
The default is \*(``false.\*(''
d1558 1
a1558 1
The default is \*(``false.\*(''
d1568 1
a1568 1
The default is \*(``false.\*(''
d1592 1
a1592 1
The default is \*(``false.\*(''
d1595 1
a1595 1
When set to \*(``false.\*('', \fIxterm\fP will not use bold fonts.
d1605 1
a1605 1
The default is \*(``false.\*(''
d1610 1
a1610 1
The default is \*(``true.\*(''
d1614 1
a1614 1
The default is \*(``true.\*(''
d1620 1
a1620 1
The default is \*(``false.\*(''
d1631 1
a1631 1
The reason for setting the default to \*(``false.\*('' is to avoid
d1643 1
a1643 1
The default is \*(``false.\*(''
d1649 1
a1649 1
The default is \*(``false.\*(''
d1672 1
a1672 1
The default is \*(``true.\*(''
d1684 1
a1684 1
The default is \*(``false.\*(''
d1692 1
a1692 1
The default is \*(``false.\*(''
d1698 2
a1699 1
.IP
d1706 1
d1711 4
a1714 1
The default is \*(``false.\*(''
d1723 2
a1724 1
The default is \*(``false.\*(''
d1746 1
a1746 1
The default is \*(``false.\*(''
d1755 1
a1755 1
The default is \*(``false.\*(''
d1764 1
a1764 1
If \*(``true,\*('' the cursor keys are initially in application mode.
d1766 1
a1766 1
The default is \*(``false.\*(''
d1769 2
a1770 2
If \*(``true,\*('' the keypad keys are initially in application mode.
The default is \*(``false.\*(''
d1776 1
a1776 1
default is \*(``true.\*(''
d1781 1
a1781 1
The default is \*(``false.\*(''
d1788 1
a1788 1
The default (backspace) is \*(``true.\*(''
d1794 1
a1794 1
\*(``XtDefaultBackground.\*(''
d1799 1
a1799 1
The default is \*(``false.\*(''
d1803 1
a1803 1
The default is \*(``true.\*(''
d1819 1
a1819 1
The default is \*(``true.\*(''
d1844 1
a1844 1
The default is \*(``true.\*(''
d1880 1
a1880 1
The default is \*(``true.\*(''
d1892 1
a1892 1
The default is \*(``false.\*(''
d1898 1
a1898 1
The default is \*(``false.\*(''
d1953 1
a1953 1
The default is \*(``false.\*(''
d1976 1
a1976 1
The default is \*(``false.\*(''
d2064 1
a2064 1
The default is \*(``false.\*(''
d2069 1
a2069 1
The default is \*(``XtDefaultForeground.\*(''
d2076 1
a2076 1
The default is \*(``false.\*(''
d2081 1
a2081 1
The default is \*(``XtDefaultForeground.\*(''
d2087 1
a2087 1
The default is \*(``false.\*(''
d2092 1
a2092 1
The default is \*(``true.\*(''
d2097 1
a2097 1
The default is \*(``XtDefaultForeground.\*(''
d2103 1
a2103 1
The default is \*(``false.\*(''
d2108 1
a2108 1
The default is \*(``XtDefaultForeground.\*(''
d2115 1
a2115 1
The default is \*(``false.\*(''
d2135 1
a2135 1
The default is \*(``false.\*(''
d2139 1
a2139 1
The default is \*(``false.\*(''
d2143 1
a2143 1
The default is \*(``XtDefaultForeground.\*(''
d2170 1
a2170 1
The default is \*(``true.\*(''
d2174 1
a2174 1
The default is \*(``false.\*(''
d2180 1
a2180 1
The default is \*(``true.\*(''
d2205 1
a2205 1
The default is \*(``false,\*('' for the latter.
d2364 1
a2364 1
The default is \*(``false.\*(''
d2370 1
a2370 2
single character with the eighth bit turned on.
The terminal is put into 8-bit mode.
d2373 1
a2373 3
On startup, \fIxterm\fP tries to put the terminal into 7-bit mode.
The \fBmetaSendsEscape\fP and \fBaltSendsEscape\fP resources may override this.
The default is \*(``true.\*(''
d2375 2
d2403 57
d2464 1
a2464 1
The default is \*(``true,\*(''
d2557 1
a2557 1
The default is \*(``fixed.\*(''
d2645 1
a2645 1
The default is \*(``false.\*(''
d2651 1
a2651 1
The default is \*(``true,\*('' denoting the minimum width.
d2659 1
a2659 1
is \*(``XtDefaultForeground.\*(''
d2687 1
a2687 1
The default is \*(``XtDefaultForeground.\*(''
d2715 1
d2761 1
a2761 1
The default is \*(``true.\*(''
d2768 1
a2768 1
The default is \*(``false.\*(''
d2782 1
a2782 1
The default is \*(``XtDefaultBackground.\*(''
d2790 1
a2790 1
The default is \*(``false.\*(''
d2797 1
a2797 1
The default is \*(``true.\*('' It may be set to false in order to work around
d2838 1
a2838 1
The default is \*(``true.\*(''
d2934 1
a2934 1
The default is \*(``false.\*(''
d2939 1
a2939 1
The default is \*(``false.\*(''
d2950 1
a2950 1
The default is \*(``false.\*(''
d2970 1
a2970 1
The default is \*(``false.\*(''
d2974 1
d3073 1
a3073 1
The default is \*(``false.\*(''
d3086 1
a3086 1
The default is \*(``true.\*(''
d3093 1
a3093 1
The default is \*(``false.\*(''
d3154 1
a3154 1
\*(``XtDefaultForeground.\*(''
d3159 1
a3159 1
\*(``XtDefaultBackground.\*(''
d3180 1
a3180 1
The default is \*(``xterm.\*(''
d3184 1
a3184 1
The default is \*(``false.\*(''
d3296 1
a3296 1
The default is \*(``false.\*(''
d3320 1
a3320 1
The default is \*(``false.\*(''
d3325 1
a3325 1
The default is \*(``false.\*(''
d3330 1
a3330 1
The default is \*(``true.\*(''
d3336 1
a3336 1
The default is \*(``false.\*(''
d3341 1
a3341 1
The default is \*(``default.\*(''
d3402 1
a3402 1
\*(``false.\*(''
d3456 1
a3456 1
\*(``false.\*(''
d3461 1
a3461 1
The default is \*(``false.\*(''
d3471 1
a3471 1
\*(``false.\*(''
d3485 1
a3485 1
\*(``false.\*(''
d3495 1
a3495 1
The default is \*(``true.\*(''
d3510 1
a3510 1
The default is \*(``true.\*(''
d3516 2
a3517 2
the default is \*(``true.\*('', which corresponds to older versions of \fIxterm\fP,
otherwise the default is \*(``false.\*(''
d3522 1
a3522 1
The default is \*(``false.\*(''
d3533 1
a3533 1
The default is \*(``false.\*(''
d3544 1
a3544 1
\*(``false.\*(''
d3551 1
a3551 1
The default is \*(``false.\*(''
d3555 1
a3555 1
The default is \*(``false.\*(''
d3564 1
a3564 1
The default for this resource is \*(``false.\*(''
d3576 1
a3576 1
The default for this resource is \*(``false.\*(''
d3605 1
a3605 1
strings,\*('' etc.
d3622 1
a3622 1
The default is \*(``false.\*(''
d3629 1
a3629 1
The default is \*(``true.\*(''
d3636 1
a3636 1
The default is \*(``true.\*(''
d3642 1
a3642 1
The default is \*(``default.\*(''
d3680 1
a3680 1
The default is \*(``default.\*(''
d3710 1
a3710 1
The default is \*(``false.\*(''
d3742 1
a3742 1
The default is \*(``false.\*(''
d3762 1
a3762 1
The default is \*(``false.\*(''
d3770 6
d3792 1
a3792 1
The default is \*(``false.\*(''
d3837 3
a3839 3
The possibilities are \*(``none,\*('' which sends no terminating characters,
\*(``CRonly,\*('' which sends CR, and \*(``CR&EOT,\*('' which sends both CR and EOT.
The default is \*(``none.\*(''
d3847 1
a3847 1
The default is \*(``large.\*(''
d4006 1
a4006 1
resource is set to \*(``true.\*(''
d5164 1
a5164 1
This action toggles the state of the \fBeightBitInput\fP resource.
d5246 1
a5246 1
This only applies to single-byte values.
d5248 1
d5252 1
d5255 82
a5336 5
\fIxterm\fP checks if the key's value is less than 128.
If so, \fIxterm\fP adds 128 to the value, setting its eighth bit.
Otherwise \fIxterm\fP sends an ESC byte before the key.
In other applications' documentation,
that is referred to as a \*(``meta key\*(''.
d6283 4
@


1.26
log
@Update to xterm-275. Tested by jasper@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.510 2011/09/04 23:54:12 tom Exp $
d270 4
a273 3
If the parameter names an executable file, \fIxterm\fP uses that instead.
The parameter must be an absolute path, or name a file found on the user's
PATH (and thereby construct an absolute path).
d1414 1
a1414 1
which is limited to \*(``0.9\*'' to \*(``1.5\*''.
@


1.25
log
@Update to xterm 273. Tested by marco@@, jasper@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.507 2011/08/23 00:50:07 tom Exp $
d884 4
d1128 1
a1128 1
.B \ #\fIgeom\fP
d1411 5
d1417 1
a1417 1
Specifies whether or not SCP Function Key escape codes should be generated for
d4866 1
d4877 1
d4887 6
a4892 1
.PP
d4898 2
a4899 1
Given all of these caveats,
d4911 1
d4913 1
@


1.24
log
@Update to xterm 271. Tested by shadchin@@ and ajacoutot@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.501 2011/07/13 08:59:37 tom Exp $
d127 1
a127 1
an optional platform-specific entry,
d256 3
a258 4
.RS
	\fBxterm \-z\fP
.RE
.IP
d384 2
a385 2
Normally it is \*(``XTerm\*('', but
can be set to another class such as \*(``UXTerm\*('' to override selected resources.
d603 2
a604 1
Given an X window identifier (a decimal integer),
d607 5
d729 1
a729 1
.RS 15
d731 1
a731 2
.RE
.IP
d966 1
a966 1
The default is \*(``vt100\*(''.
d1104 1
a1104 3
.sp
.nf
.RS 15
d1108 1
a1108 3
.RE
.fi
.IP
d1228 1
a1228 1
Application specific resources (e.g., \*(``\fBXTerm.\fP\fINAME\fP\*('') follow:
d1553 1
a1553 1
They are specified by patterns such as \*(``\fBXTerm.vt100.\fP\fINAME\fP\*(''.
d1559 2
a1560 2
\*(``XTerm\*('' and the \*(``vt100\*('' widget makes the resource settings work for
either, e.g., \*(``\fBXTerm*vt100.\fP\fINAME\fP\*(''.
d1827 1
a1827 1
XFree86 provides a feature which can be used to suppress the scaling.
d1833 3
a1835 4
.RS
	FontPath	"/usr/lib/X11/fonts/misc/"
.RE
.IP
d1837 3
a1839 4
.RS
	FontPath	"/usr/lib/X11/fonts/misc/:unscaled"
.RE
.IP
d2160 1
a2160 1
The default is \*(``100\*(''.
d2480 1
a2480 1
.RS
d2482 1
a2482 2
.RE
.IP
d2484 1
a2484 1
.RS
d2486 1
a2486 2
.RE
.IP
d2488 1
a2488 1
.RS
d2490 1
a2490 2
.RE
.IP
d2839 6
a2844 1
you should put those within a shell script to execute the converter,
d3133 1
a3133 1
if the string is empty, then \*(``XTerm\*('' is used.
d3730 1
a3730 1
These are specified by patterns such as \*(``\fBXTerm.tek4014.\fP\fINAME\fP\*('':
d4777 2
a4778 2
The standard \fBXTerm\fP app-defaults file defines both sets of fonts,
while the \fBUXTerm\fP app-defaults file defines only one set.
d4783 1
a4783 1
uxterm -class XTerm
a4785 1
.PP
a5711 1
.PP
a5723 1
.PP
a5743 1
.PP
d5762 1
a5762 2
.PP
Below is a sample how of the \fBkeymap()\fP action is used to add special
a5773 1
.PP
d5865 1
a5865 1
.I __apploaddir__/XTerm
d5868 1
a5868 1
.I __apploaddir__/XTerm\-color
d5876 1
a5876 1
.IR __apploaddir__/XTerm .
@


1.23
log
@Update to xterm 270. Tested by ajacoutot@@, shadchin@@, krw@@ and jasper@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.489 2011/04/24 21:20:59 tom Exp $
d238 2
a239 1
cannot open the display, and are useful for testing and configuration scripts:
d242 2
a243 1
This causes \fIxterm\fP to print a version number to the standard output.
d249 1
d251 2
a252 2
a "\fB\-option\fP"
or a "\fB+option\fP" turns the feature on or off,
d328 1
a328 1
default is 2.
d547 1
a547 1
in the "OverTheSpot" input method.
d588 1
a588 1
use the pseudo-terminal's sense of the stty erase value.
d592 1
a592 1
set the stty erase value using the \fBkb\fP string from the termcap entry as
d785 1
a785 1
The default is 10.
d903 1
a903 1
The default is 64.
d949 1
a949 1
the popup menus, e.g., control/left/mouse for "Main Options".
d960 3
a962 2
Valid values include vt52, vt100, vt101, vt102, and vt220 (the "vt" is optional).
The default is vt100.
d1071 1
a1071 1
and have "***" prepended to their icon titles.
d1228 1
a1228 1
Application specific resources (e.g., "\fBXTerm.\fP\fINAME\fP") follow:
d1233 1
a1233 1
stty erase is a backspace (8) or delete (127) character.
d1284 1
a1284 1
The default is the application name.
d1301 4
d1308 1
a1308 1
The default is 32768.
d1335 1
a1335 1
The default is the "C" (POSIX).
d1344 1
a1344 1
The default is 4096.
d1372 1
a1372 1
If \*(``true\*('', \fIxterm\fP will use the pseudo-terminal's sense of the stty erase
d1374 1
a1374 1
If \*(``false\*('', \fIxterm\fP will set the stty erase value to match its own
d1451 2
d1500 1
a1500 1
Note, however, that the stty program on a given host may use different
d1543 1
a1543 1
and have "***" prepended to their icon titles.
d1553 1
a1553 1
They are specified by patterns such as "\fBXTerm.vt100.\fP\fINAME\fP".
d1555 1
a1555 1
If your \fIxterm\fP is configured to support the "toolbar", then those
d1557 4
a1560 3
toolbar and vt100 widget.  A wildcard between the top-level
"XTerm" and the "vt100" widget makes the resource settings work for
either, e.g., "\fBXTerm*vt100.\fP\fINAME\fP".
d1611 2
a1612 1
user surprise.  This key is generally unused in keyboard configurations,
d1630 1
a1630 1
A few programs, e.g,. \fIvim\fP, use this feature to get an accurate
d1828 4
a1831 3
In the X server's configuration file (e.g., "/etc/X11/XFree86"), you
can add ":unscaled" to the end of the directory specification for the
"misc" fonts, which comprise the fixed-pitch fonts that are used by \fIxterm\fP.
d1844 2
a1845 2
The same ":unscaled" can be added to its configuration file at the
end of the directory specification for "misc".
d2130 1
a2130 1
Specifies the duration of the "off" part of the cursor blink cycle-time
d2133 1
a2133 1
The default is 300.
d2136 1
a2136 1
Specifies the duration of the "on" part of the cursor blink cycle-time,
d2139 1
a2139 1
The default is 600.
d2160 3
a2162 2
Leading non-digit characters are ignored, e.g., "vt100" and "100" are the same.
The default is 100.
d2190 2
a2191 1
The names are listed below.  \fIxterm\fP ignores capitalization, but
d2214 2
a2215 1
The names are listed below.  \fIxterm\fP ignores capitalization, but
d2234 2
a2235 1
The names are listed below.  \fIxterm\fP ignores capitalization, but
d2255 4
a2258 2
The names are listed below.  \fIxterm\fP ignores capitalization, but
they are shown in mixed-case for clarity.  Where a number can be used
d2353 3
a2355 2
Generally keyboards do not have a key labeled "Meta",
but "Alt" keys are common, and they are conventionally used for "Meta".
d2357 1
a2357 1
resource "altSendsEscape", reversing its sense.
d2389 2
a2390 1
The default is an empty string, which does not override anything.
d2393 1
a2393 1
Specify the pattern for fonts selected from the FreeType
d2399 17
a2415 1
\fIxterm\fR uses the \fBfont\fP and related resources.
d2418 1
a2418 1
Specify an double-width font for cases where an application requires
d2428 1
a2428 1
The default is \*(``14.\*(''
d2431 1
a2431 1
Although the default is \*(``14.\*('',
d2435 1
a2435 1
For example, the "fixed" font usually has a pointsize of \*(``8.\*(''.
d2730 1
a2730 1
The default is 2.
d2736 1
a2736 1
The default is "nil2".
d2741 1
a2741 1
The default is \*(``d\*('', i.e., "default".
d2749 1
a2749 1
The default is 2.
d2830 1
a2830 1
resource patterns such as "\fB*vt100.utf8Fonts.font\fP" will be loaded,
d2833 1
a2833 1
the normal fonts such as "\fB*vt100.font\fP", etc., are used.
d2962 1
a2962 1
escape sequence for other keys (such as "2") when modified by
d2984 1
a2984 1
The default is 250 milliseconds.
d2993 1
a2993 1
The default is 10.
d3113 5
a3117 2
A \*(``0\*('' disables the attributes.
A \*(``1\*('' prints the normal set of attributes (bold, underline, inverse and blink)
d3119 15
a3133 2
A \*(``2\*('' prints ANSI color attributes as well.
The default is \*(``1.\*(''
d3137 1
a3137 1
e.g. your connection is broken when the server crashes,
d3139 4
a3142 2
To enable the feature, set this resource to the name of the file.
The default is an empty string,
d3144 2
d3152 8
d3166 41
a3206 1
The default is \*(``0.\*(''
d3218 2
a3219 2
The default is a blank string.
If the resource value is given as a blank string, the printer is disabled.
d3230 1
a3230 1
The default is \*(``0.\*(''
d3339 1
a3339 1
the user can toggle the "Enable Reverse Video" menu entry.
d3363 1
a3363 1
Using other control sequences (the "\fIdynamic colors\fR" feature),
d3381 1
a3381 1
The default is 64.
d3498 1
a3498 1
The default for this resource is \*(``0.\*(''
d3500 2
a3501 1
Each bit (bit "0" is 1, bit "1" is 2, etc) corresponds to one of the
d3556 1
a3556 1
The resource can be set via the menu entry "UTF-8 Encoding".
d3592 3
a3594 3
resource patterns such as "\fB*vt100.utf8Fonts.font\fP" 
or normal (ISO-8859-1) fonts via patterns such as "\fB*vt100.font\fP".
The resource can be set via the menu entry "UTF-8 Fonts".
d3630 2
a3631 1
The default is an empty string, which does not override anything.
d3651 2
a3652 1
You can also use a control sequence (see the discussion of "Title Modes"
d3672 1
a3672 1
The default is \*(``0.\*(''
d3713 1
a3713 1
in the "OverTheSpot" input method.
d3715 1
a3715 1
In "OverTheSpot" preedit type, the preedit (preconversion)
d3721 1
a3721 1
The font is be supplied by a "fontset", whose default value is "*".
d3730 1
a3730 1
These are specified by patterns such as "\fBXTerm.tek4014.\fP\fINAME\fP":
d3767 1
a3767 1
Resources named "\fBline\fR\fIN\fR" where \fIN\fR is a number
d3788 6
d4161 2
a4162 2
A user "selects" text on xterm, which highlights the selected text.
A subsequent "paste" to another client forwards a request to the client owning
d4165 1
a4165 1
available in the form of one or more "selection targets".
d4222 2
a4223 1
which consist of the names shown.  You can use the special name I18N
d4270 1
a4270 1
Clicking on the "Toolbar" menu entry hides the toolbar if it is visible,
d4297 19
d4760 7
a4766 1
UTF-8 Titles (utf8-mode)
d4773 1
a4773 1
If the latter is set to "always", the checkmark is disabled.
d5152 1
a5152 1
The term "eight-bit" is misleading:
d5156 2
a5157 1
In other applications' documentation, that is referred to as a "meta key".
d5171 1
a5171 1
The term "seven-bit" is misleading:
d5180 2
a5181 2
Use "\\" to escape octal digits in the string.
Xt does not allow you to put a null character (i.e., "\\000") in the string.
d5194 2
a5195 1
That is, load the "*VT100.\fIname\fP.font", resource as "*VT100.font" etc.
d5262 17
d5311 2
a5312 1
An adjustment can be specified for these values by appending a "+" or "\-"
d5594 1
a5594 1
process filesystem, e.g., "/proc", which \fIxterm\fP can read.
d5596 1
a5596 1
Use the "cwd" process entry, e.g., /proc/12345/cwd to obtain the
d5599 1
a5599 1
On systems which have the "exe" process entry, e.g., /proc/12345/exe,
d5837 1
a5837 1
the width of the \fIxterm\fP in characters (cf: "stty columns").
d5843 1
a5843 1
the height of the \fIxterm\fP in characters (cf: "stty rows").
@


1.22
log
@Update to xterm version 269.
Tested and ok ajacoutot@@, jasper@@, krw@@, shadchin@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.481 2011/02/18 10:48:14 tom Exp $
d1562 5
d1697 3
d2456 1
a2456 1
xterm.vt100.utf8fonts.font
d2508 2
d3082 21
d3450 5
a3454 1
The resource is an integer, expected to range from 0 to 3:
d3457 1
a3457 1
0
d3462 1
a3462 1
1
d3466 1
a3466 1
2
d3470 1
a3470 1
3
d3473 2
a3474 1
whether the \fBlocale\fP resource was set, to 0 or 2.
d3485 28
d4589 5
d4620 1
a4620 1
UTF-8 (utf8-mode)
d4624 21
d5913 5
d5968 9
a5976 2
resize(__mansuffix__), luit(__mansuffix__), X(__miscmansuffix__), pty(4), tty(4)
.br
@


1.21
log
@Update to xterm 267. Tested by shadchin@@, jasper@@, ajacoutot@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.469 2010/11/11 11:57:07 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2009,2010 by Thomas E. Dickey
d58 5
a62 1
.
d513 11
d1232 27
d1339 13
d2265 3
d3182 48
d3472 2
d4893 3
d5424 1
@


1.20
log
@Update to xterm version 264, Tested at least by krw@@, jasper@@, ajacoutot@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.467 2010/10/11 00:36:08 tom Exp $
d1078 4
a1081 1
Examples:
d1084 1
d4738 6
d4987 2
@


1.19
log
@Update to xterm 262.

tested by ajacoutot@@, jasper@@ and krw@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.466 2010/07/16 00:39:54 tom Exp $
d3192 6
@


1.18
log
@Update to xterm 261. Tested by krw@@, jcs@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.465 2010/06/15 09:38:48 tom Exp $
d85 1
a85 1
[-\fItoolkitoption\fP ...] [-\fIoption\fP ...] [\fIshell\fP]
d160 1
a160 1
\*(``\fBCOPY\fIyyyy\fB-\fIMM\fB-\fIdd\fB.\fIhh\fB:\fImm\fB:\fIss\fR\*('', where
d231 1
a231 1
.RB ` - ',
d233 1
a233 1
The \fB-version\fP and \fB-help\fP options are interpreted even if \fIxterm\fP
d236 1
a236 1
.B -version
d239 1
a239 1
.B -help
d244 1
a244 1
a "\fB-option\fP"
d250 1
a250 1
	\fBxterm -z\fP
d255 1
a255 1
by the \fB-help\fP option.
d267 1
a267 1
The \fB-e\fP option cannot be used with this parameter since
d273 1
a273 1
.B -132
d280 1
a280 1
.B -ah
d294 1
a294 1
.B -ai
d306 1
a306 1
.B -aw
d316 1
a316 1
.BI -b " number"
d327 1
a327 1
.B -bc
d331 1
a331 1
.BI -bcf " milliseconds"
d335 1
a335 1
.BI -bcn " milliseconds"
d339 1
a339 1
.B "-bdc"
d348 1
a348 1
.B "-cb"
d354 1
a354 1
.B "-cc \fIcharacterclassrange\fP:\fIvalue\fP[,...]"
d360 1
a360 1
.B "-cjk_width"
d369 1
a369 1
CJK double-width (bi-width/monospace) font either with \fB-fa\fP at
d376 1
a376 1
.BI -class " string"
d381 1
a381 1
.B "-cm"
d389 1
a389 1
.B "-cn"
d398 1
a398 1
.BI -cr " color"
d404 1
a404 1
.B -cu
d421 1
a421 1
.B "-dc"
d435 1
a435 1
.BI -e " program \fP[ \fIarguments \fP.\|.\|. ]\fI"
d439 2
a440 2
name to be the basename of the program being executed if neither \fI-T\fP
nor \fI-n\fP are given on the command line.
d443 1
a443 1
.BI -en " encoding"
d447 1
a447 1
The \fB-lc\fR option should be used instead of \fB-en\fR for
d450 1
a450 1
.BI -fb " font"
d460 1
a460 1
.BI -fa " pattern"
d472 1
a472 1
.BI -fbb
d482 1
a482 1
.BI -fbx
d493 1
a493 1
.BI -fd " pattern"
d498 1
a498 1
.BI -fi " font"
d504 1
a504 1
.BI -fs " size"
d509 1
a509 1
.B -fw \fIfont\fP
d518 1
a518 1
.B -fwb \fIfont\fP
d527 1
a527 1
.B -fx \fIfont\fP
d533 2
a534 2
.BI -hc " color"
(see \fB-selbg\fP).
d536 1
a536 1
.BI -hf
d546 1
a546 1
.BI -hm
d558 1
a558 1
.BI -hold
d568 1
a568 1
.B -ie
d577 1
a577 1
.B -im
d585 1
a585 1
.BI -into " windowId"
d590 1
a590 1
.B -j
d607 1
a607 1
.B -k8
d615 1
a615 1
.BI -kt " keyboardtype"
d639 1
a639 1
.B -l
d658 1
a658 1
.B -lc
d669 1
a669 1
See also the discussion of the \fB-u8\fP option which supports UTF-8 locales.
d673 1
a673 1
Conventional 8bit mode or, in UTF-8 locales or with \fB-u8\fP option,
d676 1
a676 1
.BI -lcc " path"
d678 1
a678 1
and UTF-8 which is used with \fB-lc\fP option or \fBlocale\fR resource.
d681 1
a681 1
.B -leftbar
d685 1
a685 1
.BI -lf " filename"
d687 1
a687 1
See the \fB-l\fP option.
d689 1
a689 1
.B -ls
d694 2
a695 2
The \fB-ls\fP flag and the \fBloginShell\fP resource
are ignored if \fB-e\fP is also given,
d698 2
a699 2
shell - the user's shell of choice need not be a Bourne shell after all.
Also, \fIxterm\ -e\fP is supposed to provide a consistent
d704 1
a704 1
If you do want the effect of \fB-ls\fP and \fB-e\fP simultaneously, you
d707 1
a707 1
xterm -e /bin/bash -l -c "my command here"
d710 2
a711 2
Finally, \fB-ls\fP is not completely ignored,
because \fIxterm\ -ls\ -e\fP does write a \fI/etc/wtmp\fP entry
d713 1
a713 1
whereas \fIxterm\ -e\fP does not.
d715 1
a715 1
.B -maximized
d731 1
a731 1
.B -mb
d738 1
a738 1
.BI -mc " milliseconds"
d741 1
a741 1
.B -mesg
d749 1
a749 1
.B "-mk_width"
d758 1
a758 1
.BI -ms " color"
d764 1
a764 1
.BI -nb " number"
d769 1
a769 1
.B "-nul"
d775 1
a775 1
.B -pc
d782 1
a782 1
.B -pob
d790 1
a790 1
.B -rightbar
d793 1
a793 1
.B "-rvc"
d799 1
a799 1
.B -rw
d812 1
a812 1
.B -s
d822 1
a822 1
.B -samename
d834 1
a834 1
.B -sb
d844 1
a844 1
.BI -selbg " color"
d849 1
a849 1
.BI -selfg " color"
d854 1
a854 1
.B -sf
d862 1
a862 1
.B -si
d871 1
a871 1
.B -sk
d881 1
a881 1
.BI -sl " number"
d887 1
a887 1
.B -sm
d896 1
a896 1
.B -sp
d905 1
a905 1
.B -t
d926 1
a926 1
.B -tb
d937 1
a937 1
.BI -ti " term_id"
d947 1
a947 1
.BI -tm " string"
d954 1
a954 1
.BI -tn " name"
d965 1
a965 1
.B -u8
d973 1
a973 1
the \fB-lc\fP and \fB-en\fP options and \fBlocale\fR resource.
d978 1
a978 1
the \fB-lc\fR option or the \*(``\fBlocale:\ true\fR\*('' resource
d980 1
a980 1
or \fB-en\ UTF-8\fP option or the \*(``\fBlocale:\ UTF-8\fR\*('' resource
d986 1
a986 1
.B "-uc"
d992 1
a992 1
.B "-ulc"
d1000 1
a1000 1
.B "-ulit"
d1010 1
a1010 1
.B -ut
d1018 1
a1018 1
.B -vb
d1026 1
a1026 1
.B -wc
d1037 1
a1037 1
.B -wf
d1048 1
a1048 1
.B -ziconbeep \fIpercent\fP
d1057 1
a1057 1
.B -C
d1068 1
a1068 1
.B -S\fIccn\fP
d1090 1
a1090 1
initialization or the \fB-S\fP option to a process running in the \fIxterm\fP.
d1105 1
a1105 1
.BI -T " string"
d1107 1
a1107 1
It is equivalent to \fB-title\fP.
d1109 1
a1109 1
.BI -n " string"
d1112 1
a1112 1
Note that this is not the same as the toolkit option \fB-name\fP (see below).
d1115 1
a1115 1
.B -r
d1119 1
a1119 1
\fB-rv\fP.
d1121 1
a1121 1
.BI -w " number"
d1123 1
a1123 1
It is equivalent to \fB-borderwidth\fP or \fB-bw\fP.
d1129 1
a1129 1
.B -bd \fIcolor\fP
d1134 1
a1134 1
.B -bg \fIcolor\fP
d1139 1
a1139 1
.B -bw \fInumber\fP
d1147 1
a1147 1
See the \fB-b\fP option, which controls the inner border of the \fIxterm\fP
d1150 1
a1150 1
.B -display \fIdisplay\fP
d1153 1
a1153 1
.B -fg \fIcolor\fP
d1159 1
a1159 1
.B -fn \fIfont\fP
d1164 2
a1165 2
.B -font \fIfont\fP
This is the same as \fB-fn\fP.
d1167 1
a1167 1
.B -geometry \fIgeometry\fP
d1171 1
a1171 1
.B -iconic
d1176 1
a1176 1
.B -name \fIname\fP
d1181 1
a1181 1
.B -rv
d1190 1
a1190 1
.B -title \fIstring\fP
d1194 1
a1194 1
line specified after the \fB-e\fP option, if any, otherwise the application
d1197 1
a1197 1
.B -xrm \fIresourcestring\fP
d1424 1
a1424 1
Use \fB^-\fP to denote \fIundef\fP.
d1467 1
a1467 1
option \fB-geom\fP.
d1471 1
a1471 1
Same as -ziconbeep command line argument.
d2029 1
a2029 1
See the \fB-cu\fP option for details.
d2704 1
a2704 1
or UTF-8 mode according to \fButf8\fR resource or \fB-u8\fP option.
d2730 2
a2731 2
encodings and UTF-8 which is used with the \fB-lc\fR option or \fBlocale\fR resource.
The help message shown by \*(``xterm -help\*('' lists the default value,
d2798 1
a2798 1
Set it to -1 to disable it.
d2816 1
a2816 1
Set it to -1 to permit the user to use shift- and control-modifiers
d3316 1
a3316 1
The command-line option \fB-u8\fP sets the resource to this value.
d3338 1
a3338 1
via the \fB-fw\fP option or its corresponding resource value.
d3998 1
a3998 1
as in the \fB-l\fP logging option.
d4108 1
a4108 1
.B -sb
d4117 1
a4117 1
.B -j
d4126 1
a4126 1
.B -rv
d4135 1
a4135 1
.B -aw
d4144 1
a4144 1
.B -rw
d4176 1
a4176 1
.B -sk
d4187 1
a4187 1
.B -si
d4196 1
a4196 1
.B -132
d4227 1
a4227 1
.B -vb
d4243 1
a4243 1
.B -pop
d4252 1
a4252 1
.B -bc
d4274 1
a4274 1
.B -ai
d4604 1
a4604 1
The default table starts as follows -
d4618 1
a4618 1
/\(**   (    )    *    +    ,    -    .    / */
d4648 1
a4648 1
/\(**   -    i   c/    L   ox   Y-    |   So */
d4650 1
a4650 1
/\(**  ..   c0   ip   <<    _        R0    - */
d4652 1
a4652 1
/\(**   o   +-    2    3    \*(AQ    u   q|    . */
d4660 1
a4660 1
/\(**  D-   N~   O`   O\*(AQ   O^   O~   O:    X */
d4668 1
a4668 1
/\(**   d   n~   o`   o\*(AQ   o^   o~   o:   -: */
d4673 1
a4673 1
For example, the string \*(``33:48,37:48,45-47:48,38:48\*('' indicates that the
d4747 1
a4747 1
of \*(``dynamic abbreviation\*('' expansion in Emacs (bound there to M-/).
d4935 1
a4935 1
An adjustment can be specified for these values by appending a "+" or "-"
d4937 1
a4937 1
e.g., \fIpage-2\fP to specify 2 lines less than a page.
d4988 1
a4988 1
the \fI-e\fP command line option) and is also invoked by the
d5445 1
a5445 1
is set to the string displayed by the \fB-version\fP option.
d5494 1
a5494 1
.I __apploaddir__/XTerm-color
d5498 1
a5498 1
*customization: -color
@


1.17
log
@Update to xterm 258. lightly tested by krw@@, thanks.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.456 2010/04/16 08:25:08 tom Exp $
d452 3
a454 1
This font must be the same height and width as the normal font.
d457 2
a458 2
The default is to do overstriking of the normal font.
See also the discussion of \fBboldFont\fP, \fBboldMode\fP and \fBalwaysBoldMode\fP resources.
d467 1
d501 1
d530 1
d668 1
d1131 1
d1136 1
d1155 1
d1161 2
a1162 2
The
default is \fIfixed\fP.
d1174 1
d1184 1
d1225 1
d1297 1
d1312 1
d1323 1
d1343 1
d1355 1
d1377 1
d1384 1
d1524 15
a1538 1
The default is \*(``true.\*(''
d1544 2
a1545 2
Note that allowing such events creates a very large security hole, and         
forcefully disables the \fBallow\fP\fIXXX\fP\fBOps\fR resources.
d1718 6
d1794 50
d2304 2
a2305 1
There is no default.
d2313 2
a2314 1
There is no default.
d2316 1
a2316 1
\fIxterm\fP  will use a scaled version of the font given by \fBfaceName\fP.
d2324 9
d2344 1
a2344 1
TrueType font for the 
d3058 31
a3088 1
The default is \*(``true.\*(''
d3863 1
a3863 1
encoding information as it is pasted. 
d3888 1
a3888 1
\fIxterm\fP tries the following types in this order: 
d4180 2
d4842 1
a4842 1
entry: \fBfont\fP, \fBboldFont\fP, \fBwideFont\fP and \fBwideBoldFont\fP.
d4914 6
d4951 5
d5005 4
d5064 6
d5073 1
a5073 1
which controls to use the font's minimum or maximum glyph width.
d5295 1
a5295 2
            <KeyPress> XF86Paste:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
             <KeyPress> SunPaste:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
a5641 5
.TP
48
ERROR_SPREALLOC
.br
spawn: realloc of ttydev failed
@


1.16
log
@Update to xterm-255. Tested by stsp@@, oga@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.451 2010/01/20 10:55:58 tom Exp $
a727 2
This option can be turned on
and off from the \*(``VT Options\*('' menu.
d1043 1
a1043 1
Same as zIconBeep resource.
d1269 1
a1269 1
The default is an empty string, which uses the current locale setting.
d1271 3
a1273 4
Set it to \*(``C\*('' to achieve the best performance using the default
menu resource settings.
If you happen to be using localized menu resources,
set the resource accordingly.
d1501 6
d1613 3
d2891 4
@


1.15
log
@Update to xterm 250
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.437 2009/10/10 12:15:41 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2008,2009 by Thomas E. Dickey
d1286 2
a1287 2
to ensure that the parent and child processes update the \fButmp\fP
and \fBstty\fP state.
d1495 5
d1550 1
d2006 142
d2820 2
a2821 1
The selection stops on a blank line.
d2934 5
d3101 24
d3220 7
d4302 4
d4549 4
d4714 1
a4714 1
.B "print()"
d4717 36
d4754 1
a4754 1
.B "print-everything()"
d4757 1
d5278 1
a5278 1
Usually that is a shell program, e.g., \fB/bin/sh\fP.
@


1.14
log
@update to xterm 246. Has been in snapshots for some time.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.433 2009/08/13 01:18:00 tom Exp $
d1537 2
a1538 1
Specifies whether extended window control sequences (as used in dtterm)
d1540 6
a1545 1
The default is \*(``true.\*(''
d1839 13
d2206 6
d3350 3
d4085 6
d4677 5
@


1.13
log
@Update to xterm 243. tested by naddy@@.

Patch #243 - 2009/3/28

* revert change to default for allowTcapOps (request by Bram Moolenaar).
* reallocate result returned by xtermEnvLocale() to avoid reference to
freed memory after handling menuLocale resource.
* fix an old (X11R5) bug in tek4014 for switching fontsizes.
* add resource defaultString to make configurable the use of "#" when
pastes of UTF-8 text fail due to limitations in the current locale settings.
* make the set of selection target Atom's configurable by two new
resources eightBitSelectTypes and utf8SelectTypes, e.g., to use the TEXT
Atom in preference to UTF8_STRING (discussion with Stanislav Sedov
regarding koi8rxterm and the FreeBSD port).
* modify handling of TARGETS Atom by making it return exactly the set of
targets as those which xterm is currently providing.
* set MANPAGER and PAGER explicitly to /bin/cat in minstall.sh to work
around /etc/man.conf's with those variables already set (report by
Mar'yasin Semion).
* improve error-checking of tcap-query parser.
* add check for keyboard tcap), which ensures that terminal descriptions
containing the same string for shifted/unshifted keys will be seen by
tcap-query as only the unshifted key. (This would only happen with an
incorrect terminal description).
* fix conversion for input event-state to modifier-parameter which made
tcap-query feature not work with tcapFunctionKeys (keyboard type tcap).
* add "DEF_ALLOW_XXX" definitions to main.h to allow overriding the
default compiled-in values for "allowxxx" resources.
* remove check on bell-percentage added in patch #242, which disallowed
zero/negative values (Redhat Bugzilla #487829).
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.423 2009/03/25 22:39:57 tom Exp $
d73 7
d106 1
a106 1
considered the ``active'' window for receiving keyboard input and terminal
d110 1
a110 1
the ``VT Options'' menu in the VTxxx window, and the ``Tek Options''
d124 5
a128 1
``xterm,'' ``vt102,'' ``vt100'' and ``ansi,'' and ``dumb.''
d131 2
a132 2
sets the ``TERM'' and the ``TERMCAP'' environment variables.
You may also use ``vt220,''  but must set the terminal emulation level
d134 1
a134 1
(The ``TERMCAP'' environment variable is not set if \fIxterm\fP is linked
d160 1
a160 1
``\fBCOPY\fIyyyy\fB-\fIMM\fB-\fIdd\fB.\fIhh\fB:\fImm\fB:\fIss\fR'', where
d298 1
a298 1
\fBactiveIcon\fP to ``false''.
d304 1
a304 1
\fBactiveIcon\fP to ``true''.
d340 1
a340 1
Set the \fIvt100\fP resource \fBcolorBDMode\fR to ``false'',
d344 1
a344 1
Set the \fIvt100\fP resource \fBcolorBDMode\fR to ``true'',
d349 1
a349 1
Set the \fIvt100\fP resource \fBcutToBeginningOfLine\fP to ``false''.
d352 1
a352 1
Set the \fIvt100\fP resource \fBcutToBeginningOfLine\fP to ``true''.
d361 1
a361 1
Set the \fBcjkWidth\fP resource to ``true''.
d371 1
a371 1
The default is ``false''
d378 2
a379 2
Normally it is ``XTerm'', but
can be set to another class such as ``UXTerm'' to override selected resources.
d383 1
a383 1
It sets the \fIcolorMode\fP resource to ``false''.
d392 1
a392 1
It sets the \fIcutNewline\fP resource to ``false''.
d396 1
a396 1
It sets the \fIcutNewline\fP resource to ``true''.
d429 1
a429 1
The option sets the \fIdynamicColors\fP option to ``false''.
d433 1
a433 1
The option sets the \fIdynamicColors\fP option to ``true''.
d472 1
a472 1
It sets the \fBfreeBoldBox\fP resource to ``false''.
d477 1
a477 1
It sets the \fBfreeBoldBox\fP resource to ``true''.
d483 1
a483 1
It sets the \fBforceBoxChars\fP resource to ``false''.
d488 1
a488 1
It sets the \fBforceBoxChars\fP resource to ``true''.
d534 1
a534 1
It sets the \fBhpFunctionKeys\fP resource to ``true''.
d539 1
a539 1
It sets the \fBhpFunctionKeys\fP resource to ``false''.
d545 1
a545 1
It sets the \fBhighlightColorMode\fP resource to ``true''.
d551 1
a551 1
It sets the \fBhighlightColorMode\fP resource to ``false''.
d595 1
a595 1
disabling smooth scroll as well as the ``VT Options''
d613 7
a619 7
``unknown'',
``default'',
``hp'',
``sco'',
``sun'',
``tcap'' and
``vt220''.
d621 1
a621 1
The value ``unknown'',
d624 1
a624 1
The value ``default'',
d723 1
a723 1
shell (i.e., it will be a normal ``subshell'').
d729 1
a729 1
and off from the ``VT Options'' menu.
d746 1
a746 1
Set the \fBmkWidth\fP resource to ``true''.
d749 1
a749 1
The default is ``false''
d803 1
a803 1
the ``VT Options'' menu.
d835 1
a835 1
``VT Options'' menu.
d861 1
a861 1
This option can be turned on and off from the ``VT Options'' menu.
d894 1
a894 1
providing mapping for keypad `+' to `,', and
d905 1
a905 1
``Options'' menus.
d909 6
a914 1
``tek4014,'' ``tek4015,'' ``tek4012'', ``tek4013'' and ``tek4010,'' and ``dumb.''
d917 1
a917 1
sets the ``TERM'' and the ``TERMCAP'' environment variables.
d959 1
a959 1
``xterm'', ``vt102'', etc.
d971 1
a971 1
and the \fBlocale\fP resource is not ``false''
d974 1
a974 1
the \fB-lc\fR option or the ``\fBlocale:\ true\fR'' resource
d976 1
a976 1
or \fB-en\ UTF-8\fP option or the ``\fBlocale:\ UTF-8\fR'' resource
d1026 1
a1026 1
If you do not set this resource to ``true'',
d1028 1
a1028 1
The default is ``false''.
d1070 1
a1070 1
If the option contains a ``/'' character, that delimits the characters
d1095 1
a1095 1
It is shorthand for specifying the ``\fI*tekGeometry\fP'' resource.
d1099 1
a1099 1
It is shorthand for specifying the ``\fI*iconGeometry\fP'' resource.
d1107 1
a1107 1
It is shorthand for specifying the ``\fI*iconName\fP'' resource.
d1127 1
a1127 1
\fIxterm\fP uses the X Toolkit default, which is ``XtDefaultForeground''.
d1131 1
a1131 1
The default is ``XtDefaultBackground.''
d1150 1
a1150 1
``XtDefaultForeground.''
d1171 1
a1171 1
\fIName\fP should not contain ``.'' or ``*'' characters.
d1202 1
a1202 1
The default is ``false'', which disables this feature.
d1234 5
a1238 1
``hp'', ``sco'', ``sun'', ``tcap'' or ``vt220''.
d1257 1
a1257 1
``false.''
d1263 1
a1263 1
The default is ``true''.
d1273 1
a1273 1
Set it to ``C'' to achieve the best performance using the default
d1285 1
a1285 1
If ``true'', \fIxterm\fP will perform handshaking during initialization
d1292 1
a1292 1
The default is ``true''.
d1295 1
a1295 1
If ``true'', \fIxterm\fP will use the pseudo-terminal's sense of the stty erase
d1297 1
a1297 1
If ``false'', \fIxterm\fP will set the stty erase value to match its own
d1303 1
a1303 1
The default is ``false''.
d1306 1
a1306 1
If ``true'', \fIxterm\fP will reset the screen size after
d1314 2
a1315 2
The default is ``false'' on Linux and OS X systems,
``true'' otherwise.
d1318 1
a1318 1
If the value of this resource is ``true'', \fIxterm\fP does not send
d1326 1
a1326 1
The default is ``true''.
d1334 1
a1334 1
If the value of this resource is ``true'',
d1337 1
a1337 1
The default is ``true''.
d1347 1
a1347 1
This causes the keypad `+' to be mapped to `,'.
d1352 1
a1352 1
Otherwise (the default, with \fBsunKeyboard\fP set to ``false''),
d1381 1
a1381 1
``true.''
d1426 1
a1426 1
The default is ``false.''
d1432 1
a1432 1
The default is ``true.''
d1439 1
a1439 1
The default is ``false.''
d1452 1
a1452 1
The default is ``false.''
d1462 1
a1462 1
The default is ``false.''
d1485 1
a1485 1
The default is ``false.''
d1493 1
a1493 1
The default is ``false.''
d1497 1
a1497 1
The default is ``true.''
d1502 4
a1505 4
The default is ``false'' meaning they are discarded.
Note that allowing
such events creates a very large security hole.
The default is ``false.''
d1511 1
a1511 1
The default is ``false.''
d1534 1
a1534 1
The default is ``true.''
d1539 1
a1539 1
The default is ``true.''
d1542 1
a1542 1
If ``true'', treat the Alt-key as if it were the Meta-key.
d1547 1
a1547 1
The default is ``false.''
d1554 1
a1554 1
If ``true'', Alt characters
d1560 1
a1560 1
If ``false'', Alt characters input from the keyboard cause a shift to
d1564 1
a1564 1
The default is ``false.''
d1573 1
a1573 1
The default is ``false.''
d1592 1
a1592 1
The default is ``false.''
d1598 1
a1598 1
The default is ``false.''
d1603 1
a1603 1
The default is a blank string, i.e., ``''.
d1607 1
a1607 1
If ``true,'' the cursor keys are initially in application mode.
d1609 1
a1609 1
The default is ``false.''
d1612 2
a1613 2
If ``true,'' the keypad keys are initially in application mode.
The default is ``false.''
d1619 1
a1619 1
default is ``true.''
d1624 1
a1624 1
The default is ``false.''
d1631 1
a1631 1
The default (backspace) is ``true.''
d1637 1
a1637 1
``XtDefaultBackground.''
d1642 1
a1642 1
The default is ``false.''
d1646 1
a1646 1
The default is ``true.''
d1662 1
a1662 1
The default is ``true.''
d1681 1
a1681 1
The default is ``true.''
d1718 1
a1718 1
The default is ``true.''
d1728 1
a1728 1
``true'' violates the ICCCM; it may, however, be useful for interacting
d1730 1
a1730 1
The default is ``false.''
d1735 2
a1736 2
Set this to ``true'' if \fIxterm\fP appears to freeze when connecting.
The default is ``false.''
d1741 1
a1741 1
The default is ``false.''
d1759 1
a1759 1
You may have to set this option to ``true''
d1764 1
a1764 1
The default is ``false.''
d1839 1
a1839 1
The default is ``false.''
d1843 2
a1844 2
the ``colorBDMode'' resource is enabled.
The default is ``XtDefaultForeground.''
d1851 1
a1851 1
The default is ``false.''
d1855 2
a1856 2
the ``colorBLMode'' resource is enabled.
The default is ``XtDefaultForeground.''
d1862 1
a1862 1
The default is ``false.''
d1867 1
a1867 1
The default is ``true.''
d1871 2
a1872 2
the ``colorRVMode'' resource is enabled.
The default is ``XtDefaultForeground.''
d1878 1
a1878 1
The default is ``false.''
d1882 2
a1883 2
the ``colorULMode'' resource is enabled.
The default is ``XtDefaultForeground.''
d1890 1
a1890 1
The default is ``false.''
d1896 1
a1896 1
The default is ``2''.
d1902 1
a1902 1
The default is ``10'', which means that CTRL F1 generates the key
d1910 1
a1910 1
The default is ``false.''
d1914 1
a1914 1
The default is ``false.''
d1918 1
a1918 1
The default is ``XtDefaultForeground.''
d1942 1
a1942 1
If ``false'', triple clicking to select a line does not include the Newline
d1944 2
a1945 2
If ``true'', the Newline is selected.
The default is ``true.''
d1949 1
a1949 1
The default is ``false.''
d1952 1
a1952 1
If ``false'', triple clicking to select a line selects only from the
d1954 2
a1955 2
If ``true'', the entire line is selected.
The default is ``true.''
d1970 1
a1970 1
The default is ``#'' (a single pound sign).
d1973 1
a1973 1
\fIxterm\fP will add a space after the ``#'' character, to give roughly
d1979 1
a1979 1
The default is ``false,'' for the latter.
d1988 1
a1988 1
The default is ``false.''
d1991 1
a1991 1
If ``true'', Meta characters
d1996 1
a1996 1
If ``false'', Meta characters are converted into a two-character
d2000 1
a2000 1
The default is ``true.''
d2031 1
a2031 1
The default is ``true,''
d2057 1
a2057 1
The default is ``14.''
d2064 1
a2064 1
they default to ``0.0'',
d2096 1
a2096 1
The default is ``fixed.''
d2118 7
d2148 1
a2148 1
The default is ``true''.
d2181 1
a2181 1
If ``false'', \fIxterm\fP checks for missing glyphs in the font
d2183 1
a2183 1
If ``true'', \fIxterm\fP assumes the font does not contain the
d2185 1
a2185 1
The default is ``false.''
d2193 1
a2193 1
is ``XtDefaultForeground.''
d2210 1
a2210 1
If ``false'', \fIxterm\fP compares them and will reject choices of
d2212 1
a2212 1
The default is ``false'', which means that the comparison is performed.
d2221 1
a2221 1
The default is ``XtDefaultForeground.''
d2292 3
a2294 3
If ``true'', \fIxterm\fP reverses the colors,
If ``false'', \fIxterm\fP does not reverse colors,
The default is ``true.''
d2297 1
a2297 1
If ``false'', selecting with the mouse highlights all positions on the screen
d2299 1
a2299 1
If ``true'', \fIxterm\fP highlights only the positions that contain text that
d2301 1
a2301 1
The default is ``false.''
d2315 1
a2315 1
The default is ``XtDefaultBackground.''
d2321 1
a2321 1
``true'' causes \fIxterm\fP to interpret ESC F as a request to move to the
d2323 1
a2323 1
The default is ``false.''
d2330 1
a2330 1
The default is ``true.'' It may be set to false in order to work around
d2353 1
a2353 1
The default is ``d'', i.e., "default".
d2371 2
a2372 1
The default is ``true.''
d2377 1
a2377 1
The default is ``false''.
d2384 1
a2384 1
The default is ``B'', which corresponds to US ASCII.
d2392 1
a2392 1
The default is ``1''.
d2428 1
a2428 1
Any other value, e.g., ``UTF-8'' or ``ISO8859-2'',
d2432 1
a2432 1
The default is ``medium''.
d2452 1
a2452 1
The help message shown by ``xterm -help'' lists the default value,
d2462 1
a2462 1
The default is ``false.''
d2467 1
a2467 1
The default is ``false.''
d2470 1
a2470 1
If ``true'', Meta characters
d2476 1
a2476 1
If ``false'', Meta characters input from the keyboard are handled according
d2478 1
a2478 1
The default is ``false.''
d2498 1
a2498 1
The default is ``false.''
d2517 1
a2517 1
The default is ``2'':
d2528 1
a2528 1
Set it to 3 to mark the sequence with a '>' to hint that it is private.
d2534 1
a2534 1
The default is ``2''.
d2547 1
a2547 1
Set it to 3 to mark the sequence with a '>' to hint that it is private.
d2578 1
a2578 1
The default is ``0'':
d2600 1
a2600 1
The default is ``false.''
d2608 1
a2608 1
If ``true'', \fIxterm\fR checks if NumLock is used as a modifier (see \fIxmodmap\fP(__mansuffix__)).
d2613 1
a2613 1
The default is ``true.''
d2616 1
a2616 1
If ``true'', \fIxterm\fR will use old-style control sequences for function keys F1 to F4,
d2620 1
a2620 1
The default is ``false.''
d2639 1
a2639 1
Select a ``word'' as determined by the \fBcharClass\fP resource.
d2656 1
a2656 1
Select a ``word'' as determined by the regular expression which
d2663 1
a2663 1
by setting \fBon3Clicks\fP to ``none''.
d2667 1
a2667 1
``word'' and ``line'', respectively.
d2675 1
a2675 1
The default is ``true''.
d2680 1
a2680 1
``XtDefaultForeground.''
d2685 1
a2685 1
``XtDefaultBackground.''
d2706 1
a2706 1
The default is ``xterm.''
d2710 1
a2710 1
The default is ``false.''
d2714 1
a2714 1
The default is ``OverTheSpot,Root''.
d2720 2
a2721 2
A ``0'' disables the attributes.
A ``1'' prints the normal set of attributes (bold, underline, inverse and blink)
d2723 2
a2724 2
A ``2'' prints ANSI color attributes as well.
The default is ``1.''
d2727 1
a2727 1
If ``true'', \fIxterm\fR will close the printer (a pipe) when the application switches
d2729 1
a2729 1
The default is ``false.''
d2741 1
a2741 1
A ``1'' selects autoprint mode, which causes
d2746 1
a2746 1
Autoprint mode is overridden by printer controller mode (a ``2''),
d2748 1
a2748 1
The default is ``0.''
d2753 1
a2753 1
The default is ``false.''
d2758 1
a2758 1
The default is ``false.''
d2764 1
a2764 1
The default is ``false.''
d2769 1
a2769 1
The default is ``true.''
d2788 9
d2800 1
a2800 1
``false.''
d2806 1
a2806 1
``false.''
d2811 1
a2811 1
The default is ``false.''
d2821 1
a2821 1
``false.''
d2835 1
a2835 1
``false.''
d2845 1
a2845 1
The default is ``true.''
d2853 1
a2853 1
The default is ``false'', which tells it to use PRIMARY.
d2860 1
a2860 1
The default is ``true.''
d2866 2
a2867 2
the default is ``true.'', which corresponds to older versions of \fIxterm\fP,
otherwise the default is ``false.''
d2872 1
a2872 1
The default is ``false.''
d2875 1
a2875 1
Specifies whether or not the entries in the ``Main Options'' menu for sending
d2877 1
a2877 1
The default is ``false.''
d2888 1
a2888 1
``false.''
d2895 1
a2895 1
The default is ``false.''
d2899 1
a2899 1
The default is ``false.''
d2904 1
a2904 1
This is only in effect if \fBtiteInhibit\fP is ``true'',
d2908 1
a2908 1
The default for this resource is ``false.''
d2920 1
a2920 1
The default for this resource is ``false.''
d2923 2
a2924 2
Specifies the key and button bindings for menus, selections, ``programmed
strings,'' etc.
d2941 1
a2941 1
The default is ``false.''
d2948 1
a2948 1
The default is ``true.''
d2955 1
a2955 1
The default is ``true.''
d2984 1
a2984 1
Other nonzero values are treated the same as ``1'',
d2996 1
a2996 1
The default is ``false.''
d3013 1
a3013 1
Set this resource to ``true'' to allow UTF-8 encoded title strings.
d3017 1
a3017 1
The default is ``false.''
d3032 1
a3032 1
The default is ``0.''
d3037 1
a3037 1
The default is ``false.''
d3048 1
a3048 1
The default is ``true'', to provide support for various legacy applications.
d3061 1
a3061 1
The default is ``false.''
d3106 3
a3108 3
The possibilities are ``none,'' which sends no terminating characters,
``CRonly,'' which sends CR, and ``CR&EOT,'' which sends both CR and EOT.
The default is ``none.''
d3116 1
a3116 1
The default is ``large.''
d3269 1
a3269 1
resource is set to ``true.''
d3383 1
a3383 1
The ``thumb''
d3398 1
a3398 1
modifiers, and when they are used with the ``shift'' key.
d3433 1
a3433 1
Pointer button two (usually middle) `types' (pastes) the text from
d3441 1
a3441 1
you can swap ``right'' and ``left'' everywhere in the rest of this
d3461 1
a3461 1
you may regard each as a `file' whose contents you know.
d3492 3
a3494 3
Pressing button one, two, or three will return the letters `l', `m', and
`r', respectively.
If the `shift' key is pressed when a pointer button is pressed, the corresponding
d3557 1
a3557 1
is configured with the \fBi18nSelections\fP resource set to ``true''.
d3563 1
a3563 1
If the translation is incomplete, they will insert X's ``defaultString''
d3612 1
a3612 1
when the ``control'' key and pointer button one are pressed in a window.
d3746 1
a3746 1
``control'' key and pointer button two are pressed in the VT102 window.
d3997 1
a3997 1
when the ``control'' key and pointer button three are pressed in a window.
d4106 1
a4106 1
``control'' key and pointer button two are pressed in the Tektronix window.
d4147 1
a4147 1
are capable of using a ``magic cookie'' authorization
d4159 1
a4159 1
This is true even with the ``magic cookie'' authorization scheme.
d4219 1
a4219 1
(e.g., letters, white space, punctuation) to be selected as a ``word''.
d4250 1
a4250 1
/\(**  SP    !    "    #    $    %    &    ' */
d4287 1
a4287 1
/\(**   o   +-    2    3    '    u   q|    . */
d4291 1
a4291 1
/\(**  A`   A'   A^   A~   A:   Ao   AE   C, */
d4293 1
a4293 1
/\(**  E`   E'   E^   E:   I`   I'   I^   I: */
d4295 1
a4295 1
/\(**  D-   N~   O`   O'   O^   O~   O:    X */
d4297 1
a4297 1
/\(**  O/   U`   U'   U^   U:   Y'    P    B */
d4299 1
a4299 1
/\(**  a`   a'   a^   a~   a:   ao   ae   c, */
d4301 1
a4301 1
/\(**  e`   e'   e^   e:    i`  i'   i^   i: */
d4303 1
a4303 1
/\(**   d   n~   o`   o'   o^   o~   o:   -: */
d4305 1
a4305 1
/\(**  o/   u`   u'   u^   u:   y'    P   y: */
d4308 1
a4308 1
For example, the string ``33:48,37:48,45-47:48,38:48'' indicates that the
d4378 1
a4378 1
of `dynamic abbreviation' expansion in Emacs (bound there to M-/).
d4397 1
a4397 1
^X ESC G <line+' '> <col+' '>
d4472 1
a4472 1
It does affect the fonts loosely organized under the ``Default'' menu
d4491 6
d4808 1
a4808 1
characters ``0x'', it is interpreted
d5011 1
a5011 1
it is distinct from ``SHELL''.
a5276 10
92
ERROR_SREALLOC
.br
ScreenResize: realloc() failed on alt base
.TP
96
ERROR_RESIZE
.br
ScreenResize: malloc() or realloc() failed
.TP
a5280 10
.TP
110
ERROR_SBRALLOC
.br
ScrollBarOn: realloc() failed on base
.TP
111
ERROR_SBRALLOC2
.br
ScrollBarOn: realloc() failed on rows
@


1.12
log
@Update to xterm 242. Tested by jsg@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.420 2009/02/11 00:11:56 tom Exp $
d499 1
a499 1
If no doublewidth font is found, it will improvise, by stretching
d508 1
a508 1
If no doublewidth font is found, it will improvise, by stretching
d1689 3
d1725 1
a1725 1
Set this to zero to disable doublesize fonts altogether.
d1943 13
d2014 5
d2118 1
a2118 1
doublesize characters.
d2122 1
a2122 1
If disabled, \fIxterm\fP will simulate doublesize characters by drawing
d2299 1
a2299 1
If false, \fIxterm\fP will never request the targets
d2961 5
d3018 1
a3018 1
If no doublewidth font is found, it will improvise, by stretching
d3031 1
a3031 1
If no doublewidth font is found, it will improvise, by stretching
d3465 83
@


1.11
log
@Disable allowFontOps, allowTcapOps and allowWindowOps by default
on OpenBSD.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.413 2008/12/30 11:23:59 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2007,2008 by Thomas E. Dickey
d59 3
a61 1
.de DS
d67 1
a67 1
.de DE
d698 12
d1233 6
d1447 8
a1454 2
of the \fIvt100\fP widget (class \fIVT100\fP):
These are specified by patterns such as "\fBXTerm.vt100.\fP\fINAME\fP":
d1491 19
a1509 1
The default is ``true.''
d2104 14
d2307 4
d2624 4
d2663 4
d3484 1
a3484 1
Allow SendEvents (allowsends )
d3854 1
a3854 1
There are three sections.
d3931 23
d4094 1
a4094 1
.DS
d4161 1
a4161 1
.DE
d4180 4
d4188 12
d4234 1
a4234 1
.DS
d4237 1
a4237 1
.DE
d4704 1
a4704 1
.DS
d4749 1
a4749 1
.DE
d4753 1
a4753 1
.DS
d4762 1
a4762 1
.DE
d4765 1
a4765 1
.DS
d4783 1
a4783 1
.DE
d4795 1
a4795 1
.DS
d4802 1
a4802 1
.DE
d4806 1
a4806 1
.DS
d4815 1
a4815 1
.DE
d4820 1
a4820 1
.DS
d4828 1
a4828 1
.DE
a5212 2
.TP 8
.B allowTcapOps: false
@


1.10
log
@xterm 238. includes fix for CVE-2008-2383.
@
text
@d5103 4
d5108 1
a5108 1
Extended window control sequences are disabled.
@


1.9
log
@xterm 237. tested by krw@@ oga@@ and others.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.411 2008/09/14 23:06:19 tom Exp $
d1448 4
d1461 6
d5102 3
@


1.8
log
@xterm-236. Tested by form@@ and simon@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.408 2008/04/20 21:16:40 tom Exp $
d530 1
a530 1
\fBhighlightTextColor\fP and \fBhighlightColor\fP 
d536 1
a536 1
\fBhighlightTextColor\fP and \fBhighlightColor\fP 
d952 6
d1870 4
d1964 1
d1970 2
a1971 1
which causes \fIxterm\fP to use the ratio of font sizes from the bitmap
d1973 7
d2109 1
a2109 1
\fBhighlightTextColor\fP and \fBhighlightColor\fP 
d2138 4
a2141 4
false	false	default	default	bg/fg\"0
false	false	default	set	bg/fg\"1
false	false	set	default	fg/HBG\"2
false	false	set	set	fg/HBG\"3
d2143 4
a2146 4
false	true	default	default	bg/fg\"4
false	true	default	set	bg/fg\"5
false	true	set	default	fg/HBG\"6
false	true	set	set	fg/HBG\"7
d2148 4
a2151 4
true	false	default	default	bg/fg\"8
true	false	default	set	HFG/fg\"9
true	false	set	default	bg/HBG\"10
true	false	set	set	HFG/HBG\"11
d2153 4
a2156 4
true	true	default	default	fg/fg (useless)\"12
true	true	default	set	HFG/fg\"13
true	true	set	default	fg/HBG\"14
true	true	set	set	HFG/HBG\"15
d2158 4
a2161 4
default	false	default	default	bg/fg\"16
default	false	default	set	bg/fg\"17
default	false	set	default	fg/HBG\"18
default	false	set	set	HFG/HBG\"19
d2163 4
a2166 4
default	true	default	default	bg/fg\"20
default	true	default	set	bg/fg\"21
default	true	set	default	fg/HBG\"22
default	true	set	set	HFG/HBG\"23
d2333 4
d2632 1
a2632 1
Controls whether the cursor is repainted 
@


1.7
log
@update to xterm 234. tested by merdely@@, 'looks ok' deraadt@@.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.406 2008/02/24 19:09:31 Alan.Coopersmith Exp $
d1836 2
a1837 1
\fIXterm\fP attempts to keep this color from being the same as the background
d1840 5
d2060 13
a2072 1
.B "freeBoldBox (\fPclass\fB freeBoldBox)"
@


1.6
log
@Change the default pointerMode for real now.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.405 2008/01/27 17:37:46 tom Exp $
d297 1
a297 1
line when when it is at the rightmost position of a line and text is
@


1.5
log
@Merge xterm 232.
New local change: default value for pointerMode is 0.
@
text
@d2528 2
a2529 1
never
a2532 1
This is the default.
@


1.4
log
@update to xterm 229. Tested on various architectures by aanriot@@
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.392 2007/07/22 17:14:09 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2006,2007 by Thomas E. Dickey
a56 2
.\" $XFree86: xc/programs/xterm/xterm.man,v 3.126 2006/06/20 00:42:38 dickey Exp $
.\"
d528 12
d1105 1
a1105 1
See the \fB-b\fP option, which controls the inner border of the \fBxterm\fP
d2042 2
a2043 1
If ``true'', \fIxterm\fP uses whatever is in the font without checking.
d2070 63
d2140 1
d2216 5
d2521 17
d2590 6
d3580 12
d4331 4
@


1.3
log
@Merge xterm version 225
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.380 2007/03/24 00:05:57 tom Exp $
d357 1
a357 1
It also has to be turned on when you specify a TrueType
d454 3
d950 10
d1232 4
d1249 12
d1388 8
d1441 5
d1448 1
a1448 1
for should be allowed.
d1669 2
d2059 9
d2134 1
d2238 14
d2255 1
d2257 13
d2366 1
a2366 1
If ``true'', \fIxterm\fR checks if NumLock is used as a modifier (see \fIxmodmap\fP(1)).
d2982 1
a2982 1
resource is set to ``True.''
d3745 1
a3745 1
the server (see \fIxhost(1)\fP), then if you enable access for a host and
d4333 1
a4333 1
\fIxfontsel(1)\fP) indicated by the second action argument.
d4358 1
a4358 1
use this to obtain the actual executable. 
d4432 2
d4572 4
d4906 1
a4906 1
resize(1), luit(1), X(__miscmansuffix__), pty(4), tty(4)
@


1.2
log
@OpenBSD local changes
@
text
@d1 2
a2 1
.\" $XTermId: xterm.man,v 1.355 2006/07/31 23:14:27 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2005,2006 by Thomas E. Dickey
d445 1
a445 1
See also the discussion of \fBboldFont\fP and \fBboldMode\fP resources.
d515 1
a515 5
This option specifies the color to use for the background of
selected or otherwise highlighted text.
If not specified,
reverse video is used.
See the discussion of the \fBhighlightColor\fP resource.
d591 2
a592 1
``sun'' and
d602 2
a603 1
.BR sunFunctionKeys
d802 10
d1076 8
d1171 2
a1172 1
\fBsunFunctionKeys\fP and
d1175 1
a1175 1
hp, sco, sun or vt220.
d1195 13
d1229 1
d1280 6
d1332 4
d1370 2
a1371 1
.
d1409 45
d1507 5
d1542 1
d1544 1
a1544 1
It attempts to match a bold font for the other font selections
d1546 3
a1548 1
If the normal and bold fonts are distinct, this resource has no effect.
d1551 4
a1554 1
Although \fIxterm\fP attempts to match a bold font for other font selections,
d1609 1
a1609 3
Specifies the maximum number of double-sized fonts which are cached by
\fIxterm\fR.
The default (8) may be too large for some X terminals with limited memory.
d1644 1
a1644 1
These specify the colors for the ISO 6429 extension.
d1674 1
a1674 1
These specify the colors for the ISO 6429 extension if the bold attribute
d1728 1
a1728 1
Specifies whether or not recognition of ANSI (ISO 6429)
d1832 1
a1832 1
(a single-byte character combined with the \fIkeys\fP modifier key)
d1839 1
a1839 1
The \fBmetaSendsEscape\fP resource may override this.
d1893 26
d1939 1
a1939 1
xterm.vt100..utf8fonts.font
d2011 2
a2012 3
Specifies the color to use for the background of selected or otherwise
highlighted text.
If not specified, reverse video is used.
d2031 5
d2069 5
d2195 2
d2213 1
a2213 1
Set it to -1 to permit the user to user shift- and control-modifiers
d2280 2
a2281 1
bell should be rung, when enabled.
d2364 1
a2364 2
Specifies whether the window would be raised when Control-G is
received.
d2586 7
d2716 2
a2717 1
.
d2751 2
a2752 1
.
d2883 3
a2888 3
.B "marginbell (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-marginbell(toggle)\fP action.
.TP 8
d2972 1
a2972 1
This entry invokes the \fBset-tek-text(l)\fP action.
d2981 1
a2981 1
This entry invokes the \fBset-tek-text(s)\fP action.
d3000 2
a3001 1
.
d3378 1
a3378 1
Enable (or disable) scrolling to the bottom of the scrolling region on output to the terminal..
d3414 7
a3429 9
Enable Margin Bell (marginbell)
Enable (or disable) a bell when the user types near the right margin.
This corresponds to the
.B -mb
option and the
.B marginBell
resource.
.
.TP
d3730 1
a3730 1
Clicking the left mouse button twice in rapid succession
d4034 4
d4106 4
d4143 1
a4143 2
This action toggles the \fBmarginBell\fP resource and is also invoked from
the \fBmarginbell\fP entry in \fIvtMenu\fP.
d4196 1
a4196 1
It is also by the entries
d4267 15
d4388 13
d4404 16
a4419 16
                ~Meta<KeyPress>: 	insert-seven-bit() \\n\\\&
                 Meta<KeyPress>: 	insert-eight-bit() \\n\\\&
               !Ctrl <Btn1Down>: 	popup-menu(mainMenu) \\n\\\&
          !Lock Ctrl <Btn1Down>: 	popup-menu(mainMenu) \\n\\\&
!Lock Ctrl @@Num_Lock <Btn1Down>:	popup-menu(mainMenu) \\n\\\&
     !Ctrl @@Num_Lock <Btn1Down>:	popup-menu(mainMenu) \\n\\\&
               !Ctrl <Btn2Down>: 	popup-menu(tekMenu) \\n\\\&
          !Lock Ctrl <Btn2Down>: 	popup-menu(tekMenu) \\n\\\&
!Lock Ctrl @@Num_Lock <Btn2Down>:	popup-menu(tekMenu) \\n\\\&
     !Ctrl @@Num_Lock <Btn2Down>:	popup-menu(tekMenu) \\n\\\&
          Shift ~Meta<Btn1Down>:	gin-press(L) \\n\\\&
                ~Meta<Btn1Down>:	gin-press(l) \\n\\\&
          Shift ~Meta<Btn2Down>:	gin-press(M) \\n\\\&
                ~Meta<Btn2Down>:	gin-press(m) \\n\\\&
          Shift ~Meta<Btn3Down>:	gin-press(R) \\n\\\&
                ~Meta<Btn3Down>:	gin-press(r)
d4453 13
d4470 1
a4470 1
terminals, or from more widely used standards such as ISO 6429.
d4824 2
d4841 1
a4841 1
Thomas Dickey (XFree86 Project).
@


1.1
log
@Initial revision
@
text
@d4650 19
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@import xterm 225
@
text
@d1 1
a1 2
'\" t
.\" $XTermId: xterm.man,v 1.380 2007/03/24 00:05:57 tom Exp $
d3 1
a3 1
.\" Copyright 1996-2006,2007 by Thomas E. Dickey
d444 1
a444 1
See also the discussion of \fBboldFont\fP, \fBboldMode\fP and \fBalwaysBoldMode\fP resources.
d514 5
a518 1
(see \fB-selbg\fP).
d594 1
a594 2
``sun'',
``tcap'' and
d604 1
a604 2
.BR sunFunctionKeys,
.BR tcapFunctionKeys
a802 10
.BI -selbg " color"
This option specifies the color to use for the background of selected text.
If not specified, reverse video is used.
See the discussion of the \fBhighlightColor\fP resource.
.TP 8
.BI -selfg " color"
This option specifies the color to use for selected text.
If not specified, reverse video is used.
See the discussion of the \fBhighlightTextColor\fP resource.
.TP 8
a1066 8
.IP
This appears to be a legacy of older X releases.
It sets the \fBborderWidth\fP resource of the shell widget,
and may provide advice to your window manager to set the thickness of the
window frame.
Most window managers do not use this information.
See the \fB-b\fP option, which controls the inner border of the \fBxterm\fP
window.
d1154 1
a1154 2
\fBsunFunctionKeys\fP,
\fBtcapFunctionKeys\fP and
d1157 1
a1157 1
``hp'', ``sco'', ``sun'', ``tcap'' or ``vt220''.
a1176 13
.TP 9
.B "menuLocale (\fPclass\fB MenuLocale)"
Specify the locale used for character-set computations when loading
the popup menus.
Use this to improve initialization performance of the Athena popup menus,
which may load unnecessary (and very large) fonts, e.g.,
in a locale having UTF-8 encoding.
The default is an empty string, which uses the current locale setting.
.IP
Set it to ``C'' to achieve the best performance using the default
menu resource settings.
If you happen to be using localized menu resources,
set the resource accordingly.
a1197 1
See also the \fBttyModes\fP resource, which may modify this.
a1247 6
.B "tcapFunctionKeys (\fPclass\fB TcapFunctionKeys)"
Specifies whether or not function key escape codes read from the
termcap/terminfo entry should be generated for
function keys instead of standard escape sequences.
See also the \fBkeyboardType\fP resource.
.TP 8
a1293 4
.IP
If the \fBttyModes\fP resource specifies a value for \fBerase\fP,
that overrides the \fBptyInitialErase\fP resource setting,
i.e., \fIxterm\fP initializes the terminal to match that value.
d1328 1
a1328 2
.\"
.SS VT100 Widget Resources
a1365 45
.B "altIsNotMeta (\fPclass\fB AltIsNotMeta\fP)"
If ``true'', treat the Alt-key as if it were the Meta-key.
Your keyboard may happen to be configured so they are the same.
But if they are not, this allows you to use the same prefix- and shifting
operations with the Alt-key as with the Meta-key.
See \fBaltSendsEscape\fP and \fBmetaSendsEscape\fP.
The default is ``false.''
.TP 8
.B "altSendsEscape (\fPclass\fB AltSendsEscape\fP)"
This is an additional keyboard operation that may be processed
after the logic for \fBmetaSendsEscape\fP.
It is only available if the \fBaltIsNotMeta\fP resource is set.
.IP
If ``true'', Alt characters
(a character combined with the modifier associated with left/right Alt-keys)
are converted into a two-character
sequence with the character itself preceded by ESC.
This applies as well to function key control sequences, unless \fIxterm\fP
sees that \fBAlt\fP is used in your key translations.
If ``false'', Alt characters input from the keyboard cause a shift to
8-bit characters (just like \fBmetaSendsEscape\fP).
By combining the Alt- and Meta-modifiers, you can create corresponding
combinations of ESC-prefix and 8-bit characters.
The default is ``false.''
.TP 8
.B "alwaysBoldMode (\fPclass\fB AlwaysBoldMode)"
Specifies whether \fIxterm\fP should check if the normal and bold
fonts are distinct before deciding whether to use overstriking to
simulate bold fonts.
If this resource is true,
\fIxterm\fP does not make the check for
distinct fonts when deciding how to handle the \fBboldMode\fP resource.
The default is ``false.''
.TS
l l l l
_ _ _ _
l l l l.
\fIboldMode\fR	\fIalwaysBoldMode\fR	\fIComparison\fR	\fIAction\fP
false	false	ignored	use font
false	true	ignored	use font
true	false	same	overstrike
true	false	different	use font
true	true	ignored	overstrike
.TE
.TP 8
a1418 5
.B "bellIsUrgent (\fPclass\fB BellIsUrgent)"
Specifies whether to set the Urgency hint for the window manager
when making a bell sound.
The default is ``false.''
.TP 8
a1448 1
.IP
d1450 1
a1450 1
\fIXterm\fP attempts to derive a bold font for the other font selections
d1452 1
a1452 3
If it cannot find a bold font, it will use the normal font.
In each case (whether the explicit resource or the derived font),
if the normal and bold fonts are distinct, this resource has no effect.
d1455 1
a1455 4
See the \fBalwaysBoldMode\fP resource which can modify the behavior
of this resource.
.IP
Although \fIxterm\fP attempts to derive a bold font for other font selections,
d1510 3
a1512 1
Tells whether to cache double-sized fonts by \fIxterm\fR.
d1547 1
a1547 1
These specify the colors for the ISO-6429 extension.
d1577 1
a1577 1
These specify the colors for the ISO-6429 extension if the bold attribute
d1631 1
a1631 1
Specifies whether or not recognition of ANSI (ISO-6429)
d1735 1
a1735 1
(a single-byte character combined with the \fIMeta\fP modifier key)
d1742 1
a1742 1
The \fBmetaSendsEscape\fP and \fBaltSendsEscape\fP resources may override this.
a1795 26
On the \fBVT\ Fonts\fP menu, this corresponds to the \fIDefault\fP entry.
You can specify the pointsize for TrueType fonts selected with the other
size-related menu entries such as Medium, Huge, etc., by using one of
the following resource values.
If you do not specify a value,
they default to ``0.0'',
which causes \fIxterm\fP to use the ratio of font sizes from the bitmap
font resources to obtain a TrueType pointsize.
.TP 8
.B "faceSize1 (\fPclass\fB FaceSize1)"
Specifies the pointsize of the first alternative font.
.TP 8
.B "faceSize2 (\fPclass\fB FaceSize2)"
Specifies the pointsize of the second alternative font.
.TP 8
.B "faceSize3 (\fPclass\fB FaceSize3)"
Specifies the pointsize of the third alternative font.
.TP 8
.B "faceSize4 (\fPclass\fB FaceSize4)"
Specifies the pointsize of the fourth alternative font.
.TP 8
.B "faceSize5 (\fPclass\fB FaceSize5)"
Specifies the pointsize of the fifth alternative font.
.TP 8
.B "faceSize6 (\fPclass\fB FaceSize6)"
Specifies the pointsize of the sixth alternative font.
d1816 1
a1816 1
xterm.vt100.utf8fonts.font
d1888 3
a1890 2
Specifies the color to use for the background of selected (highlighted) text.
If not specified (i.e., matching the default foreground), reverse video is used.
a1908 5
.B "highlightTextColor (\fPclass\fB HighlightTextColor)"
Specifies the color to use for the foreground of selected (highlighted) text.
If not specified (i.e., matching the default background), reverse video is used.
The default is ``XtDefaultBackground.''
.TP 8
a1941 5
.B "initialFont (\fPclass\fB InitialFont)"
Specifies which of the VT100 fonts to use initially.
Values are the same as for the \fIset-vt-font\fP action.
The default is ``d'', i.e., "default".
.TP 8
a2062 2
Set it to -1 to disable it.
.br
d2079 1
a2079 1
Set it to -1 to permit the user to use shift- and control-modifiers
d2146 1
a2146 2
bell should be rung, when enabled by the \fBmarginBell\fP resource.
The default is 10.
d2229 2
a2230 1
Specifies whether the window would be raised when Control-G is received.
a2451 7
.B "useClipping (\fPclass\fB UseClipping)"
Tell \fIxterm\fP whether to use clipping to keep
from producing dots outside the text drawing area.
Originally used to work around for overstriking effects,
this is also needed to work with some incorrectly-sized fonts.
The default is ``true.''
.TP 8
d2575 1
a2575 2
.\"
.SS Tek4014 Widget Resources
d2609 1
a2609 2
.\"
.SS Menu Resources
a2739 3
.B "bellIsUrgent (\fPclass\fB SmeBSB)"
This entry invokes the \fBset-bellIsUrgent(toggle)\fP action.
.TP 8
d2743 3
d2829 1
a2829 1
This entry invokes the \fBset-tek-text(large)\fP action.
d2838 1
a2838 1
This entry invokes the \fBset-tek-text(small)\fP action.
d2857 1
a2857 2
.\"
.SS Scrollbar Resources
d3234 1
a3234 1
Enable (or disable) scrolling to the bottom of the scrolling region on output to the terminal.
d3270 2
a3271 2
Enable Bell Urgency (bellIsUrgent)
Enable (or disable) Urgency window manager hint when Control-G is received.
d3273 3
a3275 1
.B bellIsUrgent
d3279 2
a3280 2
Enable Pop on Bell (poponbell)
Enable (or disable) raising of the window when Control-G is received.
d3282 1
a3282 1
.B -pop
d3284 1
a3284 1
.B popOnBell
d3588 1
a3588 1
Clicking the left pointer button twice in rapid succession
a3891 4
.B "select-cursor-extend()"
This action is similar to \fBselect-extend\fP except that it should be used
with \fBselect-cursor-start\fP.
.TP 8
a3959 4
.B "set-bellIsUrgent(\fIon/off/toggle\fP)"
This action toggles the \fBbellIsUrgent\fP resource and is also invoked
by the \fBbellIsUrgent\fP entry in \fIvtMenu\fP.
.TP 8
d3993 2
a3994 1
This action toggles the \fBmarginBell\fP resource.
d4047 1
a4047 1
It is also invoked by the entries
a4117 15
.B "spawn-new-terminal(params)"
Spawn a new \fIxterm\fP process.
This is available on systems which have a modern version of the
process filesystem, e.g., "/proc", which \fIxterm\fP can read.
.IP
Use the "cwd" process entry, e.g., /proc/12345/cwd to obtain the
working directory of the process which is running in the current \fIxterm\fP.
.IP
On systems which have the "exe" process entry, e.g., /proc/12345/exe,
use this to obtain the actual executable. 
Otherwise, use the $PATH variable to find \fIxterm\fP.
.IP
If parameters are given in the action,
pass them to the new \fIxterm\fP process.
.TP 8
a4223 13
The default bindings for the scrollbar widget
are separate from the VT100 widget:
.DS
.ta 2.5i
                      <Btn5Down>: StartScroll(Forward) \\n\\\&
                      <Btn1Down>: StartScroll(Forward) \\n\\\&
                      <Btn2Down>: StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
                      <Btn3Down>: StartScroll(Backward) \\n\\\&
                      <Btn4Down>: StartScroll(Backward) \\n\\\&
                      <Btn2Motion>: MoveThumb() NotifyThumb() \\n\\\&
                      <BtnUp>:    NotifyScroll(Proportional) EndScroll()
.DE
.PP
d4227 16
a4242 16
                 ~Meta<KeyPress>: insert-seven-bit() \\n\\\&
                  Meta<KeyPress>: insert-eight-bit() \\n\\\&
                !Ctrl <Btn1Down>: popup-menu(mainMenu) \\n\\\&
           !Lock Ctrl <Btn1Down>: popup-menu(mainMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn1Down>: popup-menu(mainMenu) \\n\\\&
      !Ctrl @@Num_Lock <Btn1Down>: popup-menu(mainMenu) \\n\\\&
                !Ctrl <Btn2Down>: popup-menu(tekMenu) \\n\\\&
           !Lock Ctrl <Btn2Down>: popup-menu(tekMenu) \\n\\\&
 !Lock Ctrl @@Num_Lock <Btn2Down>: popup-menu(tekMenu) \\n\\\&
      !Ctrl @@Num_Lock <Btn2Down>: popup-menu(tekMenu) \\n\\\&
           Shift ~Meta<Btn1Down>: gin-press(L) \\n\\\&
                 ~Meta<Btn1Down>: gin-press(l) \\n\\\&
           Shift ~Meta<Btn2Down>: gin-press(M) \\n\\\&
                 ~Meta<Btn2Down>: gin-press(m) \\n\\\&
           Shift ~Meta<Btn3Down>: gin-press(R) \\n\\\&
                 ~Meta<Btn3Down>: gin-press(r)
a4275 13
.PP
Some people prefer using the left pointer button
for dragging the scrollbar thumb.
That can be setup by altering the translations resource, e.g.,
.DS
.ta .5i 1.5i
*VT100.scrollbar.translations:	#override \\n\\\&
	<Btn5Down>:	StartScroll(Forward) \\n\\\&
	<Btn1Down>:	StartScroll(Continuous) MoveThumb() NotifyThumb() \\n\\\&
	<Btn4Down>:	StartScroll(Backward) \\n\\\&
	<Btn1Motion>:	MoveThumb() NotifyThumb() \\n\\\&
	<BtnUp>:	NotifyScroll(Proportional) EndScroll()
.DE
d4280 1
a4280 1
terminals, or from more widely used standards such as ISO-6429.
a4633 2
.br
http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
d4649 1
a4649 1
Thomas Dickey (invisible-island.net).
@


1.1.1.3
log
@import xterm 229
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.392 2007/07/22 17:14:09 tom Exp $
d357 1
a357 1
It also should be turned on when you specify a TrueType
a453 3
See also the \fBrenderFont\fP resource,
which combines with this to determine whether FreeType fonts are
initially active.
a946 10
.B "-ulit"
This option, corresponding to the \fBitalicULMode\fP resource,
disables the display of characters with underline attribute as
italics rather than with underlining.
.TP 8
.B "+ulit"
This option, corresponding to the \fBitalicULMode\fP resource,
enables the display of characters with underline attribute as
italics rather than with underlining.
.TP 8
a1218 4
See also \fBwaitForMap\fP which waits for the pseudo-terminal's notion
of the screen size,
and \fBptySttySize\fP which resets the screen size after other terminal
initialization is complete.
a1231 12
.B "ptySttySize (\fPclass\fB PtySttySize)
If ``true'', \fIxterm\fP will reset the screen size after
terminal initialization is complete.
This is needed for some systems whose pseudo-terminals cannot
propagate terminal characteristics.
Where it is not needed, it can interfere with other methods for
setting the intial screen size, e.g., via window manager interaction.
See also \fBwaitForMap\fP which waits for a handshake-message
giving the pseudo-terminal's notion of the screen size.
The default is ``false'' on Linux and OS X systems,
``true'' otherwise.
.TP 8
a1358 8
This is part of the
.B ptyHandshake
logic.
When \fIxterm\fP is directed to wait in this fashion,
it passes the terminal size from the display end of the pseudo-terminal
to the terminal I/O connection, e.g., according to the window manager.
Otherwise, it uses the size as given in resource values or command-line
option \fB-geom\fP.
a1403 5
.B "allowTitleOps (\fPclass\fB AllowTitleOps)"
Specifies whether control sequences that modify the window title or icon name
should be allowed.
The default is ``true.''
.TP
d1406 1
a1406 1
should be allowed.
a1626 2
If this resource is false, the \fBmkWidth\fP resource controls the
choice between the system's \fBwcwidth\fP and \fIxterm\fP's built-in tables.
a2014 9
.B "highlightReverse (\fPclass\fB HighlightReverse)"
Specifies whether \fIxterm\fP should reverse the selection foreground
and background colors when selecting text with reverse-video attribute.
This applies only to
the \fBhighlightColor\fP and \fBhighlightTextColor\fP resources,
e.g., to match the color scheme of \fIxwsh\fP.
If ``true'', \fIxterm\fP reverses the colors,
The default is ``true.''
.TP 8
a2080 1
It is implemented only for TrueType fonts.
a2183 14
.B "mkSamplePass (\fPclass\fB MkSamplePass)"
If \fBmkSampleSize\fP is nonzero,
and \fBmkWidth\fP (and \fBcjkWidth\fP) are false,
on startup \fIxterm\fP compares its built-in tables to the system's
wide character width data to decide if it will use the system's data.
It tests the first \fBmkSampleSize\fP character values,
and allows up to \fBmkSamplePass\fP mismatches before the test fails.
The default (for the allowed number of mismatches) is 256.
.TP 8
.B "mkSampleSize (\fPclass\fB MkSampleSize)"
With \fBmkSamplePass\fP, this specifies a startup test used for
initializing wide character width calculations.
The default (number of characters to check) is 1024.
.TP 8
a2186 1
See also the \fBcjkWidth\fP resource which can override this.
a2187 13
.IP
Here is a summary of the resources which control the choice of
wide character width calculation:
.TS
l l l
_ _ _
l l l.
\fIcjkWidth\fR	\fImkWidth\fR	\fIAction\fP
false	false	use system tables subject to \fBmkSamplePass\fP
false	true	use built-in tables
true	false	use built-in CJK tables
true	true	use built-in CJK tables
.TE
d2284 1
a2284 1
If ``true'', \fIxterm\fR checks if NumLock is used as a modifier (see \fIxmodmap\fP(__mansuffix__)).
d2900 1
a2900 1
resource is set to ``true.''
d3663 1
a3663 1
the server (see \fIxhost(__mansuffix__)\fP), then if you enable access for a host and
d4251 1
a4251 1
\fIxfontsel(__mansuffix__)\fP) indicated by the second action argument.
d4276 1
a4276 1
use this to obtain the actual executable.
a4349 2
            <KeyPress> XF86Paste:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
             <KeyPress> SunPaste:insert-selection(SELECT, CUT_BUFFER0) \\n\\\&
a4487 4
XTERM_LOCALE
shows the locale which was used by \fIxterm\fP on startup.
Some shell initialization scripts may set a different locale.
.TP 5
d4818 1
a4818 1
resize(__mansuffix__), luit(__mansuffix__), X(__miscmansuffix__), pty(4), tty(4)
@


1.1.1.4
log
@Import xterm version 232. tested by many.
@
text
@d2 1
a2 1
.\" $XTermId: xterm.man,v 1.405 2008/01/27 17:37:46 tom Exp $
d4 1
a4 1
.\" Copyright 1996-2007,2008 by Thomas E. Dickey
d57 2
a529 12
.BI -hm
Tells \fIxterm\fP to use
\fBhighlightTextColor\fP and \fBhighlightColor\fP 
to override the reversed foreground/background colors in a selection.
It sets the \fBhighlightColorMode\fP resource to ``true''.
.TP 8
.BI +hm
Tells \fIxterm\fP not to use
\fBhighlightTextColor\fP and \fBhighlightColor\fP 
to override the reversed foreground/background colors in a selection.
It sets the \fBhighlightColorMode\fP resource to ``false''.
.TP 8
d1095 1
a1095 1
See the \fB-b\fP option, which controls the inner border of the \fIxterm\fP
d2032 1
a2032 2
If ``true'', \fIxterm\fP assumes the font does not contain the
line-drawing characters, and draws them directly.
a2058 63
.B "highlightColorMode (\fPclass\fB HighlightColorMode)"
Specifies whether \fIxterm\fP should use
\fBhighlightTextColor\fP and \fBhighlightColor\fP 
to override the reversed foreground/background colors in a selection.
The default is unspecified:
at startup, \fIxterm\fP checks if those resources are set to something
other than the default foreground and background colors.
Setting this resource disables the check.
.IP
The following table shows the interaction of the highlighting
resources, abbreviated as shown to fit in this page:
.RS
.TP 3
HCM
highlightColorMode
.TP 3
HR
highlightReverse
.TP 3
HBG
highlightColor
.TP 3
HFG
highlightTextColor
.RE
.IP
.TS
l l l l l
_ _ _ _ _
l l l l l.
\fIHCM\fR	\fIHR\fR	\fIHBG\fR	\fIHFG\fR	\fIHighlight\fP
false	false	default	default	bg/fg\"0
false	false	default	set	bg/fg\"1
false	false	set	default	fg/HBG\"2
false	false	set	set	fg/HBG\"3
=
false	true	default	default	bg/fg\"4
false	true	default	set	bg/fg\"5
false	true	set	default	fg/HBG\"6
false	true	set	set	fg/HBG\"7
=
true	false	default	default	bg/fg\"8
true	false	default	set	HFG/fg\"9
true	false	set	default	bg/HBG\"10
true	false	set	set	HFG/HBG\"11
=
true	true	default	default	fg/fg (useless)\"12
true	true	default	set	HFG/fg\"13
true	true	set	default	fg/HBG\"14
true	true	set	set	HFG/HBG\"15
=
default	false	default	default	bg/fg\"16
default	false	default	set	bg/fg\"17
default	false	set	default	fg/HBG\"18
default	false	set	set	HFG/HBG\"19
=
default	true	default	default	bg/fg\"20
default	true	default	set	bg/fg\"21
default	true	set	default	fg/HBG\"22
default	true	set	set	HFG/HBG\"23
=
.TE
.TP 8
a2065 1
If ``false'', \fIxterm\fP does not reverse colors,
a2140 5
.B "keepSelection (\fPclass\fB KeepSelection)"
Specifies whether \fIxterm\fR will keep the selection even after the
selected area was touched by some output to the terminal.
The default is ``false''.
.TP 8
a2440 17
.B "pointerMode (\fPclass\fB PointerMode)"
Specifies when the pointer may be hidden as the user types.
It will be redisplayed if the user moves the mouse,
or clicks one of its buttons.
.RS
.TP 3
0
never
.TP 3
1
the application running in \fIxterm\fP has not activated mouse mode.
This is the default.
.TP 3
2
always.
.RE
.TP 8
a2492 6
.B "quietGrab (\fPclass\fB QuietGrab)"
Controls whether the cursor is repainted 
when \fINotifyGrab\fP and \fINotifyUngrab\fP
event types are received during change of focus.
The default is ``false.''
.TP 8
a3476 12
Keep Selection (keepSelection)
Tell \fIxterm\fP whether to disown the selection when it stops highlighting it,
e.g., when an application modifies the display so that it no longer matches
the text which has been highlighted.
As long as \fIxterm\fP continues to own the selection,
it can provide the corresponding text to other clients via cut/paste.
This corresponds to the
.B keepSelection
resource.
There is no corresponding command-line option.
.
.TP
a4215 4
.TP 8
.B "set-keep-selection(\fIon/off/toggle\fP)"
This action toggles the \fBkeepSelection\fP resource and is also invoked by
the \fBkeepSelection\fP entry in \fIvtMenu\fP.
@


