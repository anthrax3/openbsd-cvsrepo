head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.10
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.8
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.2
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v232:1.1.1.3
	v229:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v225:1.1.1.2
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.08.07.21.27.36;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	psxxjI5z4Vpv2LL4;

1.13
date	2014.07.14.08.30.11;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	EnwNNUjlkdrocnMa;

1.12
date	2014.01.18.14.06.23;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.09.14.45.38;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.17.11.51.57;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.07.20.41.27;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.22.13.38.11;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.08.12.20.46;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.03.25.22.03.51;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.05.15.58.09;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.09.22.13.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.25.18.05.57;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.19.21.15.46;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.40;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.40;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.06.15.19.30.31;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.08.25.18.54.04;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to xterm-325. Testing by krw@@, shadchin@@ and naddy@@. Thanks
@
text
@/* $XTermId: ptydata.c,v 1.105 2016/05/22 16:34:03 tom Exp $ */

/*
 * Copyright 1999-2014,2016 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 */

#include <data.h>

#if OPT_WIDE_CHARS
#include <menu.h>
#endif

/*
 * Check for both EAGAIN and EWOULDBLOCK, because some supposedly POSIX
 * systems are broken and return EWOULDBLOCK when they should return EAGAIN.
 * Note that this macro may evaluate its argument more than once.
 */
#if defined(EAGAIN) && defined(EWOULDBLOCK)
#define E_TEST(err) ((err) == EAGAIN || (err) == EWOULDBLOCK)
#else
#ifdef EAGAIN
#define E_TEST(err) ((err) == EAGAIN)
#else
#define E_TEST(err) ((err) == EWOULDBLOCK)
#endif
#endif

#if OPT_WIDE_CHARS
/*
 * Convert the 8-bit codes in data->buffer[] into Unicode in data->utf_data.
 * The number of bytes converted will be nonzero iff there is data.
 */
Bool
decodeUtf8(TScreen *screen, PtyData *data)
{
    int i;
    int length = (int) (data->last - data->next);
    int utf_count = 0;
    unsigned utf_char = 0;

    data->utf_size = 0;
    for (i = 0; i < length; i++) {
	unsigned c = data->next[i];

	/* Combine UTF-8 into Unicode */
	if (c < 0x80) {
	    /* We received an ASCII character */
	    if (utf_count > 0) {
		data->utf_data = UCS_REPL;	/* prev. sequence incomplete */
		data->utf_size = i;
	    } else {
		data->utf_data = (IChar) c;
		data->utf_size = 1;
	    }
	    break;
	} else if (c < 0xc0) {
	    /* We received a continuation byte */
	    if (utf_count < 1) {
		/*
		 * We received a continuation byte before receiving a sequence
		 * state.  Or an attempt to use a C1 control string.  Either
		 * way, it is mapped to the replacement character, unless
		 * allowed by optional feature.
		 */
		data->utf_data = (IChar) (screen->c1_printable ? c : UCS_REPL);
		data->utf_size = (i + 1);
		break;
	    } else {
		/* Check for overlong UTF-8 sequences for which a shorter
		 * encoding would exist and replace them with UCS_REPL.
		 * An overlong UTF-8 sequence can have any of the following
		 * forms:
		 *   1100000x 10xxxxxx
		 *   11100000 100xxxxx 10xxxxxx
		 *   11110000 1000xxxx 10xxxxxx 10xxxxxx
		 *   11111000 10000xxx 10xxxxxx 10xxxxxx 10xxxxxx
		 *   11111100 100000xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
		 */
		if (!utf_char && !((c & 0x7f) >> (7 - utf_count))) {
		    utf_char = UCS_REPL;
		}
		utf_char <<= 6;
		utf_char |= (c & 0x3f);
		if ((utf_char >= 0xd800 &&
		     utf_char <= 0xdfff) ||
		    (utf_char == 0xfffe) ||
		    (utf_char == HIDDEN_CHAR)) {
		    utf_char = UCS_REPL;
		}
		utf_count--;
		if (utf_count == 0) {
#if !OPT_WIDER_ICHAR
		    /* characters outside UCS-2 become UCS_REPL */
		    if (utf_char > 0xffff) {
			TRACE(("using replacement for %#x\n", utf_char));
			utf_char = UCS_REPL;
		    }
#endif
		    data->utf_data = (IChar) utf_char;
		    data->utf_size = (i + 1);
		    break;
		}
	    }
	} else {
	    /* We received a sequence start byte */
	    if (utf_count > 0) {
		data->utf_data = UCS_REPL;	/* prev. sequence incomplete */
		data->utf_size = (i + 1);
		break;
	    }
	    if (c < 0xe0) {
		utf_count = 1;
		utf_char = (c & 0x1f);
		if (!(c & 0x1e)) {
		    utf_char = UCS_REPL;	/* overlong sequence */
		}
	    } else if (c < 0xf0) {
		utf_count = 2;
		utf_char = (c & 0x0f);
	    } else if (c < 0xf8) {
		utf_count = 3;
		utf_char = (c & 0x07);
	    } else if (c < 0xfc) {
		utf_count = 4;
		utf_char = (c & 0x03);
	    } else if (c < 0xfe) {
		utf_count = 5;
		utf_char = (c & 0x01);
	    } else {
		data->utf_data = UCS_REPL;
		data->utf_size = (i + 1);
		break;
	    }
	}
    }
#if OPT_TRACE > 1
    TRACE(("UTF-8 char %04X [%d..%d]\n",
	   data->utf_data,
	   (int) (data->next - data->buffer),
	   (int) (data->next - data->buffer + data->utf_size - 1)));
#endif

    return (data->utf_size != 0);
}
#endif

int
readPtyData(XtermWidget xw, PtySelect * select_mask, PtyData *data)
{
    TScreen *screen = TScreenOf(xw);
    int size = 0;

#ifdef VMS
    if (*select_mask & pty_mask) {
	trimPtyData(xw, data);
	if (read_queue.flink != 0) {
	    size = tt_read(data->next);
	    if (size == 0) {
		Panic("input: read returned zero\n", 0);
	    }
	} else {
	    sys$hiber();
	}
    }
#else /* !VMS */
    if (FD_ISSET(screen->respond, select_mask)) {
	int save_err;
	trimPtyData(xw, data);

	size = (int) read(screen->respond, (char *) data->last, (size_t) FRG_SIZE);
	save_err = errno;
#if (defined(i386) && defined(SVR4) && defined(sun)) || defined(__CYGWIN__)
	/*
	 * Yes, I know this is a majorly f*ugly hack, however it seems to
	 * be necessary for Solaris x86.  DWH 11/15/94
	 * Dunno why though..
	 * (and now CYGWIN, alanh@@xfree86.org 08/15/01
	 */
	if (size <= 0) {
	    if (save_err == EIO || save_err == 0)
		NormalExit();
	    else if (!E_TEST(save_err))
		Panic("input: read returned unexpected error (%d)\n", save_err);
	    size = 0;
	}
#else /* !f*ugly */
	if (size < 0) {
	    if (save_err == EIO)
		NormalExit();
	    else if (!E_TEST(save_err))
		Panic("input: read returned unexpected error (%d)\n", save_err);
	    size = 0;
	} else if (size == 0) {
#if defined(__FreeBSD__) || defined(__OpenBSD__)
	    NormalExit();
#else
	    Panic("input: read returned zero\n", 0);
#endif
	}
#endif /* f*ugly */
    }
#endif /* VMS */

    if (size) {
#if OPT_TRACE
	int i;

	TRACE(("read %d bytes from pty\n", size));
	for (i = 0; i < size; i++) {
	    if (!(i % 16))
		TRACE(("%s", i ? "\n    " : "READ"));
	    TRACE((" %02X", data->last[i]));
	}
	TRACE(("\n"));
#endif
	data->last += size;
#ifdef ALLOWLOGGING
	TScreenOf(term)->logstart = VTbuffer->next;
#endif
    }

    return (size);
}

/*
 * Return the next value from the input buffer.  Note that morePtyData() is
 * always called before this function, so we can do the UTF-8 input conversion
 * in that function and simply return the result here.
 */
#if OPT_WIDE_CHARS
IChar
nextPtyData(TScreen *screen, PtyData *data)
{
    IChar result;
    if (screen->utf8_inparse) {
	result = skipPtyData(data);
    } else {
	result = *((data)->next++);
	if (!screen->output_eight_bits) {
	    result = (IChar) (result & 0x7f);
	}
    }
    TRACE2(("nextPtyData returns %#x\n", result));
    return result;
}

/*
 * Simply return the data and skip past it.
 */
IChar
skipPtyData(PtyData *data)
{
    IChar result = data->utf_data;

    data->next += data->utf_size;
    data->utf_size = 0;

    return result;
}
#endif

#if OPT_WIDE_CHARS
/*
 * Called when UTF-8 mode has been turned on/off.
 */
void
switchPtyData(TScreen *screen, int flag)
{
    if (screen->utf8_mode != flag) {
	screen->utf8_mode = flag;
	screen->utf8_inparse = (Boolean) (flag != 0);

	TRACE(("turning UTF-8 mode %s\n", BtoS(flag)));
	update_font_utf8_mode();
    }
}
#endif

/*
 * Allocate a buffer.
 */
void
initPtyData(PtyData **result)
{
    PtyData *data;

    TRACE(("initPtyData given minBufSize %d, maxBufSize %d\n",
	   FRG_SIZE, BUF_SIZE));

    if (FRG_SIZE < 64)
	FRG_SIZE = 64;
    if (BUF_SIZE < FRG_SIZE)
	BUF_SIZE = FRG_SIZE;
    if (BUF_SIZE % FRG_SIZE)
	BUF_SIZE = BUF_SIZE + FRG_SIZE - (BUF_SIZE % FRG_SIZE);

    TRACE(("initPtyData using minBufSize %d, maxBufSize %d\n",
	   FRG_SIZE, BUF_SIZE));

    data = TypeXtMallocX(PtyData, (BUF_SIZE + FRG_SIZE));

    memset(data, 0, sizeof(*data));
    data->next = data->buffer;
    data->last = data->buffer;
    *result = data;
}

/*
 * Initialize a buffer for the caller, using its data in 'next'.
 */
#if OPT_WIDE_CHARS
PtyData *
fakePtyData(PtyData *result, Char *next, Char *last)
{
    PtyData *data = result;

    memset(data, 0, sizeof(*data));
    data->next = next;
    data->last = last;

    return data;
}
#endif

/*
 * Remove used data by shifting the buffer down, to make room for more data,
 * e.g., a continuation-read.
 */
void
trimPtyData(XtermWidget xw GCC_UNUSED, PtyData *data)
{
    FlushLog(xw);

    if (data->next != data->buffer) {
	int i;
	int n = (int) (data->last - data->next);

	TRACE(("shifting buffer down by %d\n", n));
	for (i = 0; i < n; ++i) {
	    data->buffer[i] = data->next[i];
	}
	data->next = data->buffer;
	data->last = data->next + n;
    }

}

/*
 * Insert new data into the input buffer so the next calls to morePtyData()
 * and nextPtyData() will return that.
 */
void
fillPtyData(XtermWidget xw, PtyData *data, const char *value, int length)
{
    int size;
    int n;

    /* remove the used portion of the buffer */
    trimPtyData(xw, data);

    VTbuffer->last += length;
    size = (int) (VTbuffer->last - VTbuffer->next);

    /* shift the unused portion up to make room */
    for (n = size; n >= length; --n)
	VTbuffer->next[n] = VTbuffer->next[n - length];

    /* insert the new bytes to interpret */
    for (n = 0; n < length; n++)
	VTbuffer->next[n] = CharOf(value[n]);
}

#if OPT_WIDE_CHARS
Char *
convertToUTF8(Char *lp, unsigned c)
{
#define CH(n) (Char)((c) >> ((n) * 8))
    if (c < 0x80) {
	/*  0*******  */
	*lp++ = (Char) CH(0);
    } else if (c < 0x800) {
	/*  110***** 10******  */
	*lp++ = (Char) (0xc0 | (CH(0) >> 6) | ((CH(1) & 0x07) << 2));
	*lp++ = (Char) (0x80 | (CH(0) & 0x3f));
    } else if (c < 0x00010000) {
	/*  1110**** 10****** 10******  */
	*lp++ = (Char) (0xe0 | ((int) (CH(1) & 0xf0) >> 4));
	*lp++ = (Char) (0x80 | (CH(0) >> 6) | ((CH(1) & 0x0f) << 2));
	*lp++ = (Char) (0x80 | (CH(0) & 0x3f));
    } else if (c < 0x00200000) {
	*lp++ = (Char) (0xf0 | ((int) (CH(2) & 0x1f) >> 2));
	*lp++ = (Char) (0x80 |
			((int) (CH(1) & 0xf0) >> 4) |
			((int) (CH(2) & 0x03) << 4));
	*lp++ = (Char) (0x80 | (CH(0) >> 6) | ((CH(1) & 0x0f) << 2));
	*lp++ = (Char) (0x80 | (CH(0) & 0x3f));
    } else if (c < 0x04000000) {
	*lp++ = (Char) (0xf8 | (CH(3) & 0x03));
	*lp++ = (Char) (0x80 | (CH(2) >> 2));
	*lp++ = (Char) (0x80 |
			((int) (CH(1) & 0xf0) >> 4) |
			((int) (CH(2) & 0x03) << 4));
	*lp++ = (Char) (0x80 | (CH(0) >> 6) | ((CH(1) & 0x0f) << 2));
	*lp++ = (Char) (0x80 | (CH(0) & 0x3f));
    } else {
	*lp++ = (Char) (0xfc | ((int) (CH(3) & 0x40) >> 6));
	*lp++ = (Char) (0x80 | (CH(3) & 0x3f));
	*lp++ = (Char) (0x80 | (CH(2) >> 2));
	*lp++ = (Char) (0x80 | (CH(1) >> 4) | ((CH(2) & 0x03) << 4));
	*lp++ = (Char) (0x80 | (CH(0) >> 6) | ((CH(1) & 0x0f) << 2));
	*lp++ = (Char) (0x80 | (CH(0) & 0x3f));
    }
    return lp;
#undef CH
}

/*
 * Write data back to the PTY
 */
void
writePtyData(int f, IChar *d, unsigned len)
{
    unsigned n = (len << 1);

    if (VTbuffer->write_len <= len) {
	VTbuffer->write_len = n;
	VTbuffer->write_buf = (Char *) XtRealloc((char *)
						 VTbuffer->write_buf, VTbuffer->write_len);
    }

    for (n = 0; n < len; n++)
	VTbuffer->write_buf[n] = (Char) d[n];

    TRACE(("writePtyData %d:%s\n", n,
	   visibleChars(VTbuffer->write_buf, n)));
    v_write(f, VTbuffer->write_buf, n);
}
#endif /* OPT_WIDE_CHARS */

#ifdef NO_LEAKS
void
noleaks_ptydata(void)
{
    if (VTbuffer != 0) {
#if OPT_WIDE_CHARS
	if (VTbuffer->write_buf != 0)
	    free(VTbuffer->write_buf);
#endif
	free(VTbuffer);
	VTbuffer = 0;
    }
}
#endif
@


1.13
log
@Update to xterm-309. Version 308 tested by several people including
naddy@@ who found a small regression, fixed in 309.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.104 2014/05/26 14:46:18 tom Exp $ */
d4 1
a4 1
 * Copyright 1999-2013,2014 by Thomas E. Dickey
a357 2
    int i;

d361 1
@


1.12
log
@OpenBSD needs the same treatment as FreeBSD to avoid xterm -hold
chewing CPU cycles. Reported by Kevin Chadwick.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.103 2013/02/03 23:17:07 tom Exp $ */
d4 1
a4 1
 * Copyright 1999-2011,2013 by Thomas E. Dickey
d60 1
a60 1
decodeUtf8(PtyData * data)
d88 2
a89 1
		 * way, it is mapped to the replacement character.
d91 1
a91 1
		data->utf_data = UCS_REPL;	/* ... unexpectedly */
d165 2
a166 2
	   data->next - data->buffer,
	   data->next - data->buffer + data->utf_size - 1));
d174 1
a174 1
readPtyData(XtermWidget xw, PtySelect * select_mask, PtyData * data)
d258 1
a258 1
nextPtyData(TScreen * screen, PtyData * data)
d277 1
a277 1
skipPtyData(PtyData * data)
d293 1
a293 1
switchPtyData(TScreen * screen, int flag)
d309 1
a309 1
initPtyData(PtyData ** result)
d339 1
a339 1
fakePtyData(PtyData * result, Char * next, Char * last)
d356 1
a356 1
trimPtyData(XtermWidget xw GCC_UNUSED, PtyData * data)
d380 1
a380 1
fillPtyData(XtermWidget xw, PtyData * data, const char *value, int length)
d402 1
a402 1
convertToUTF8(Char * lp, unsigned c)
d448 1
a448 1
writePtyData(int f, IChar * d, unsigned len)
a477 31
    }
}
#endif

#if 0
void
test_ptydata(void)
{
    PtyData *data;
    unsigned code;

    initPtyData(&data);
    TRACE(("test_ptydata\n"));
    for (code = 0; code <= 0x7fffffff; ++code) {
	int use_size;

	memset(data, 0, sizeof(*data));
	data->next = data->buffer;
	data->last = convertToUTF8(data->buffer, code);

	use_size = (data->last - data->next);

	if (decodeUtf8(data)) {
	    if (code != data->utf_data) {
		TRACE(("code %#x ->%#x\n", code, data->utf_data));
	    } else if (use_size != data->utf_size) {
		TRACE(("size %#x %d->%d\n", code, use_size, data->utf_size));
	    }
	} else {
	    TRACE(("fail %#x\n", code));
	}
@


1.11
log
@Update to xterm 291. Tested by many.
@
text
@d219 1
a219 1
#if defined(__FreeBSD__)
@


1.10
log
@Update to xterm-275. Tested by jasper@@.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.101 2011/09/11 14:59:38 tom Exp $ */
d4 1
a4 1
 * Copyright 1999-2010,2011 by Thomas E. Dickey
d206 1
a206 1
		Cleanup(0);
d214 1
a214 1
		Cleanup(0);
d219 2
a220 2
#if defined(__UNIXOS2__) || defined(__FreeBSD__)
	    Cleanup(0);
@


1.9
log
@Update to xterm version 269.
Tested and ok ajacoutot@@, jasper@@, krw@@, shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.100 2011/02/02 01:45:14 tom Exp $ */
d3 29
a31 31
/************************************************************

Copyright 1999-2010,2011 by Thomas E. Dickey

                        All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name(s) of the above copyright
holders shall not be used in advertising or otherwise to promote the
sale, use or other dealings in this Software without prior written
authorization.

********************************************************/
@


1.8
log
@Update to xterm 261. Tested by krw@@, jcs@@.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.98 2010/06/20 21:41:15 tom Exp $ */
d5 1
a5 1
Copyright 1999-2009,2010 by Thomas E. Dickey
d78 1
a78 1
		data->utf_size = (i + 1);
d141 1
a141 1
		if (!(c & 0x1e))
d143 1
d327 1
a327 2
    data = (PtyData *) XtMalloc((Cardinal) (sizeof(*data)
					    + (unsigned) (BUF_SIZE + FRG_SIZE)));
@


1.7
log
@Update to xterm 258. lightly tested by krw@@, thanks.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.96 2010/04/18 17:51:56 tom Exp $ */
d174 1
a174 1
readPtyData(TScreen * screen, PtySelect * select_mask, PtyData * data)
d176 1
d181 1
a181 1
	trimPtyData(screen, data);
d194 1
a194 1
	trimPtyData(screen, data);
d357 1
a357 1
trimPtyData(TScreen * screen GCC_UNUSED, PtyData * data)
d361 1
a361 1
    FlushLog(screen);
d381 1
a381 1
fillPtyData(TScreen * screen, PtyData * data, char *value, int length)
d387 1
a387 1
    trimPtyData(screen, data);
@


1.6
log
@Update to xterm-255. Tested by stsp@@, oga@@.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.94 2010/01/21 02:08:28 tom Exp $ */
d65 1
a65 1
    int length = data->last - data->next;
d195 1
a195 1
	size = read(screen->respond, (char *) data->last, (unsigned) FRG_SIZE);
d325 2
a326 1
    data = (PtyData *) XtMalloc(sizeof(*data) + (unsigned) (BUF_SIZE + FRG_SIZE));
d363 1
a363 1
	int n = (data->last - data->next);
d389 1
a389 1
    size = VTbuffer->last - VTbuffer->next;
@


1.5
log
@update to xterm 246. Has been in snapshots for some time.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.90 2009/08/09 17:22:05 tom Exp $ */
d5 1
a5 1
Copyright 1999-2008,2009 by Thomas E. Dickey
d243 1
a243 1
	term->screen.logstart = VTbuffer->next;
d334 1
a334 1
 * Initialize a buffer for the caller, using its data in 'source'.
d403 35
a437 9
    if (c < 0x80) {		/*  0*******  */
	*lp++ = (Char) (c);
    } else if (c < 0x800) {	/*  110***** 10******  */
	*lp++ = (Char) (0xc0 | (c >> 6));
	*lp++ = (Char) (0x80 | (c & 0x3f));
    } else {			/*  1110**** 10****** 10******  */
	*lp++ = (Char) (0xe0 | (c >> 12));
	*lp++ = (Char) (0x80 | ((c >> 6) & 0x3f));
	*lp++ = (Char) (0x80 | (c & 0x3f));
a438 4
    /*
     * UTF-8 is defined for words of up to 31 bits, but we need only 16
     * bits here, since that's all that X11R6 supports.
     */
d440 1
d477 31
@


1.4
log
@Update to xterm 242. Tested by jsg@@.
@
text
@d1 1
a1 5
/* $XTermId: ptydata.c,v 1.81 2009/01/26 00:22:33 tom Exp $ */

/*
 * $XFree86: xc/programs/xterm/ptydata.c,v 1.25 2006/02/13 01:14:59 dickey Exp $
 */
d67 1
a67 1
    IChar utf_char = 0;
d80 1
a80 1
		data->utf_data = c;
d119 1
d125 2
a126 1
		    data->utf_data = utf_char;
d192 1
d196 8
d205 9
a213 11
	    /*
	     * Yes, I know this is a majorly f*ugly hack, however it seems to
	     * be necessary for Solaris x86.  DWH 11/15/94
	     * Dunno why though..
	     * (and now CYGWIN, alanh@@xfree86.org 08/15/01
	     */
#if (defined(i386) && defined(SVR4) && defined(sun)) || defined(__CYGWIN__)
	    if (errno == EIO || errno == 0)
#else
	    if (errno == EIO)
#endif
d215 2
a216 2
	    else if (!E_TEST(errno))
		Panic("input: read returned unexpected error (%d)\n", errno);
d219 1
a219 1
#if defined(__UNIXOS2__)
d225 1
a250 19
 * Check if there is more data in the input buffer which can be returned by
 * nextPtyData().  If there is insufficient data to return a completed UTF-8
 * value, return false anyway.
 */
#if OPT_WIDE_CHARS
Bool
morePtyData(TScreen * screen, PtyData * data)
{
    Bool result = (data->last > data->next);
    if (result && screen->utf8_inparse) {
	if (!data->utf_size)
	    result = decodeUtf8(data);
    }
    TRACE2(("morePtyData returns %d\n", result));
    return result;
}
#endif

/*
d264 3
a266 2
	if (!screen->output_eight_bits)
	    result &= 0x7f;
d438 1
a438 1
	   visibleChars(PAIRED_CHARS(VTbuffer->write_buf, 0), n)));
@


1.3
log
@xterm-236. Tested by form@@ and simon@@.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.80 2008/04/20 22:41:25 tom Exp $ */
d9 1
a9 1
Copyright 1999-2007,2008 by Thomas E. Dickey
d308 1
a308 1
	screen->utf8_inparse = (flag != 0);
d337 1
a337 1
    data = (PtyData *) XtMalloc(sizeof(*data) + BUF_SIZE + FRG_SIZE);
d416 1
a416 1
	*lp++ = (c);
d418 2
a419 2
	*lp++ = (0xc0 | (c >> 6));
	*lp++ = (0x80 | (c & 0x3f));
d421 3
a423 3
	*lp++ = (0xe0 | (c >> 12));
	*lp++ = (0x80 | ((c >> 6) & 0x3f));
	*lp++ = (0x80 | (c & 0x3f));
d447 1
a447 1
	VTbuffer->write_buf[n] = d[n];
@


1.2
log
@update to xterm 234. tested by merdely@@, 'looks ok' deraadt@@.
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.79 2008/02/21 22:19:03 tom Exp $ */
d9 1
a9 1
Copyright 1999-2006,2007 by Thomas E. Dickey
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.74 2006/07/11 21:53:15 tom Exp $ */
d9 1
a9 1
Copyright 1999-2005,2006 by Thomas E. Dickey
d65 1
a65 1
static Bool
d113 2
a114 8
		/* characters outside UCS-2 become UCS_REPL */
		if (utf_char > 0x03ff) {
		    /* value would be >0xffff */
		    utf_char = UCS_REPL;
		} else {
		    utf_char <<= 6;
		    utf_char |= (c & 0x3f);
		}
d118 1
a118 1
		    (utf_char == 0xffff)) {
d123 5
d251 1
a251 1
morePtyData(TScreen * screen GCC_UNUSED, PtyData * data)
d274 1
a274 3
	result = data->utf_data;
	data->next += data->utf_size;
	data->utf_size = 0;
d283 14
d316 3
d344 17
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@import xterm 225
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.77 2007/03/12 23:42:49 tom Exp $ */
d9 1
a9 1
Copyright 1999-2006,2007 by Thomas E. Dickey
d65 1
a65 1
Bool
d252 1
a252 1
morePtyData(TScreen * screen, PtyData * data)
d275 3
a277 1
	result = skipPtyData(data);
a285 14

/*
 * Simply return the data and skip past it.
 */
IChar
skipPtyData(PtyData * data)
{
    IChar result = data->utf_data;

    data->next += data->utf_size;
    data->utf_size = 0;

    return result;
}
a304 3
/*
 * Allocate a buffer.
 */
a329 17

/*
 * Initialize a buffer for the caller, using its data in 'source'.
 */
#if OPT_WIDE_CHARS
PtyData *
fakePtyData(PtyData * result, Char * next, Char * last)
{
    PtyData *data = result;

    memset(data, 0, sizeof(*data));
    data->next = next;
    data->last = last;

    return data;
}
#endif
@


1.1.1.3
log
@import xterm 229
@
text
@d1 1
a1 1
/* $XTermId: ptydata.c,v 1.78 2007/04/15 20:37:16 tom Exp $ */
d124 1
a124 1
		    (utf_char == HIDDEN_CHAR)) {
@


