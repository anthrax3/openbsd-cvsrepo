head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.4.0.4
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.2
	v232:1.1.1.4
	v229:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v225:1.1.1.2
	v216:1.1.1.1
	xterm:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.09.05.14.11.46;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	YVUODLQ4QcYTuGkb;

1.11
date	2015.01.18.20.24.40;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	PDdlFuihcMifzxwp;

1.10
date	2014.10.05.16.39.19;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	0wVJ6bWh03LWbUdn;

1.9
date	2014.05.09.19.56.40;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.09.14.45.38;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.17.11.51.57;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.22.13.38.11;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.08.12.20.46;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.31.14.11.57;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.05.15.58.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.06.20.10.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.11.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.11.11.41;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.06.15.19.30.33;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.08.25.18.54.06;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.02.16.09.35.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xterm 320. Tested by jsg@@ Thanks.
@
text
@/* $XTermId: resize.c,v 1.135 2015/04/10 09:00:41 tom Exp $ */

/*
 * Copyright 2003-2014,2015 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 *
 *
 * Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
 *
 *                         All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in
 * supporting documentation, and that the name of Digital Equipment
 * Corporation not be used in advertising or publicity pertaining to
 * distribution of the software without specific, written prior permission.
 *
 *
 * DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
 * DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
 * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

/* resize.c */

#include <stdio.h>
#include <ctype.h>

#include <xterm.h>
#include <version.h>
#include <xstrings.h>
#include <xtermcap.h>
#include <xterm_io.h>

#ifndef USE_TERMINFO		/* avoid conflict with configure script */
#if defined(__QNX__) || defined(__SCO__) || defined(linux) || defined(__OpenBSD__) || defined(__UNIXWARE__)
#define USE_TERMINFO
#endif
#endif

#if defined(__QNX__)
#include <unix.h>
#endif

/*
 * Some OS's may want to use both, like SCO for example.  We catch here anyone
 * who hasn't decided what they want.
 */
#if !defined(USE_TERMCAP) && !defined(USE_TERMINFO)
#define USE_TERMINFO
#endif

#include <signal.h>
#include <pwd.h>

#ifdef USE_IGNORE_RC
int ignore_unused;
#endif

#ifdef __MVS__
#define ESCAPE(string) "\047" string
#else
#define ESCAPE(string) "\033" string
#endif

#define	EMULATIONS	2
#define	SUN		1
#define	VT100		0

#define	TIMEOUT		10

#define	SHELL_UNKNOWN	0
#define	SHELL_C		1
#define	SHELL_BOURNE	2
/* *INDENT-OFF* */
static struct {
    const char *name;
    int type;
} shell_list[] = {
    { "csh",	SHELL_C },	/* vanilla cshell */
    { "jcsh",   SHELL_C },
    { "tcsh",   SHELL_C },
    { "sh",	SHELL_BOURNE }, /* vanilla Bourne shell */
    { "ash",    SHELL_BOURNE },
    { "bash",	SHELL_BOURNE }, /* GNU Bourne again shell */
    { "dash",	SHELL_BOURNE },
    { "jsh",    SHELL_BOURNE },
    { "ksh",	SHELL_BOURNE }, /* Korn shell (from AT&T toolchest) */
    { "ksh-i",	SHELL_BOURNE }, /* another name for Korn shell */
    { "ksh93",	SHELL_BOURNE }, /* Korn shell */
    { "mksh",   SHELL_BOURNE },
    { "pdksh",  SHELL_BOURNE },
    { "zsh",    SHELL_BOURNE },
    { NULL,	SHELL_BOURNE }	/* default (same as xterm's) */
};
/* *INDENT-ON* */

static const char *const emuname[EMULATIONS] =
{
    "VT100",
    "Sun",
};
static char *myname;
static int shell_type = SHELL_UNKNOWN;
static const char *const getsize[EMULATIONS] =
{
    ESCAPE("7") ESCAPE("[r") ESCAPE("[999;999H") ESCAPE("[6n"),
    ESCAPE("[18t"),
};
#if defined(USE_STRUCT_WINSIZE)
static const char *const getwsize[EMULATIONS] =
{				/* size in pixels */
    0,
    ESCAPE("[14t"),
};
#endif /* USE_STRUCT_WINSIZE */
static const char *const restore[EMULATIONS] =
{
    ESCAPE("8"),
    0,
};
static const char *const setsize[EMULATIONS] =
{
    0,
    ESCAPE("[8;%s;%st"),
};

#ifdef USE_ANY_SYSV_TERMIO
static struct termio tioorig;
#elif defined(USE_TERMIOS)
static struct termios tioorig;
#else
static struct sgttyb sgorig;
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */

static const char *const size[EMULATIONS] =
{
    ESCAPE("[%d;%dR"),
    ESCAPE("[8;%d;%dt"),
};
static const char sunname[] = "sunsize";
static int tty;
static FILE *ttyfp;

#if defined(USE_STRUCT_WINSIZE)
static const char *wsize[EMULATIONS] =
{
    0,
    ESCAPE("[4;%hd;%hdt"),
};
#endif /* USE_STRUCT_WINSIZE */

static void
failed(const char *s)
{
    int save = errno;
    IGNORE_RC(write(2, myname, strlen(myname)));
    IGNORE_RC(write(2, ": ", (size_t) 2));
    errno = save;
    perror(s);
    exit(EXIT_FAILURE);
}

/* ARGSUSED */
static void
onintr(int sig GCC_UNUSED)
{
#ifdef USE_ANY_SYSV_TERMIO
    (void) ioctl(tty, TCSETAW, &tioorig);
#elif defined(USE_TERMIOS)
    (void) tcsetattr(tty, TCSADRAIN, &tioorig);
#else /* not USE_TERMIOS */
    (void) ioctl(tty, TIOCSETP, &sgorig);
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */
    exit(EXIT_FAILURE);
}

static void
resize_timeout(int sig)
{
    fprintf(stderr, "\n%s: Time out occurred\r\n", myname);
    onintr(sig);
}

static void
Usage(void)
{
    fprintf(stderr, strcmp(myname, sunname) == 0 ?
	    "Usage: %s [rows cols]\n" :
	    "Usage: %s [-v] [-u] [-c] [-s [rows cols]]\n", myname);
    exit(EXIT_FAILURE);
}

#ifdef USE_TERMCAP
static void
print_termcap(const char *termcap)
{
    int ch;

    putchar('\'');
    while ((ch = *termcap++) != '\0') {
	switch (ch & 0xff) {
	case 127:		/* undo bug in GNU termcap */
	    printf("^?");
	    break;
	case '\'':		/* must escape anyway (unlikely) */
	    /* FALLTHRU */
	case '!':		/* must escape for SunOS csh */
	    putchar('\\');
	    /* FALLTHRU */
	default:
	    putchar(ch);
	    break;
	}
    }
    putchar('\'');
}
#endif /* USE_TERMCAP */

static int
checkdigits(char *str)
{
    while (*str) {
	if (!isdigit(CharOf(*str)))
	    return (0);
	str++;
    }
    return (1);
}

static void
readstring(FILE *fp, char *buf, const char *str)
{
    int last, c;
#if !defined(USG) && !defined(__minix)
    /* What is the advantage of setitimer() over alarm()? */
    struct itimerval it;
#endif

    signal(SIGALRM, resize_timeout);
#if defined(USG) || defined(__minix)
    alarm(TIMEOUT);
#else
    memset((char *) &it, 0, sizeof(struct itimerval));
    it.it_value.tv_sec = TIMEOUT;
    setitimer(ITIMER_REAL, &it, (struct itimerval *) NULL);
#endif
    if ((c = getc(fp)) == 0233) {	/* meta-escape, CSI */
	c = ESCAPE("")[0];
	*buf++ = (char) c;
	*buf++ = '[';
    } else {
	*buf++ = (char) c;
    }
    if (c != *str) {
	fprintf(stderr, "%s: unknown character, exiting.\r\n", myname);
	onintr(0);
    }
    last = str[strlen(str) - 1];
    while ((*buf++ = (char) getc(fp)) != last) {
	;
    }
#if defined(USG) || defined(__minix)
    alarm(0);
#else
    memset((char *) &it, 0, sizeof(struct itimerval));
    setitimer(ITIMER_REAL, &it, (struct itimerval *) NULL);
#endif
    *buf = 0;
}

/*
   resets termcap string to reflect current screen size
 */
int
main(int argc, char **argv ENVP_ARG)
{
#ifdef USE_TERMCAP
    char *env;
#endif
    char *ptr;
    int emu = VT100;
    char *shell;
    int i;
    int rc;
    int rows, cols;
#ifdef USE_ANY_SYSV_TERMIO
    struct termio tio;
#elif defined(USE_TERMIOS)
    struct termios tio;
#else
    struct sgttyb sg;
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */
#ifdef USE_TERMCAP
    int ok_tcap = 1;
    char termcap[TERMCAP_SIZE];
    char newtc[TERMCAP_SIZE];
#endif /* USE_TERMCAP */
    char buf[BUFSIZ];
#ifdef TTYSIZE_STRUCT
    TTYSIZE_STRUCT ts;
#endif
    char *name_of_tty;
#ifdef CANT_OPEN_DEV_TTY
    extern char *ttyname();
#endif
    const char *setname = "";

    myname = x_basename(argv[0]);
    if (strcmp(myname, sunname) == 0)
	emu = SUN;
    for (argv++, argc--; argc > 0 && **argv == '-'; argv++, argc--) {
	switch ((*argv)[1]) {
	case 's':		/* Sun emulation */
	    if (emu == SUN)
		Usage();	/* Never returns */
	    emu = SUN;
	    break;
	case 'u':		/* Bourne (Unix) shell */
	    shell_type = SHELL_BOURNE;
	    break;
	case 'c':		/* C shell */
	    shell_type = SHELL_C;
	    break;
	case 'v':
	    printf("%s\n", xtermVersion());
	    exit(EXIT_SUCCESS);
	default:
	    Usage();		/* Never returns */
	}
    }

    if (SHELL_UNKNOWN == shell_type) {
	/* Find out what kind of shell this user is running.
	 * This is the same algorithm that xterm uses.
	 */
	if ((ptr = x_getenv("SHELL")) == NULL) {
	    uid_t uid = getuid();
	    struct passwd pw;

	    if (x_getpwuid(uid, &pw)) {
		(void) x_getlogin(uid, &pw);
	    }
	    if (!OkPasswd(&pw)
		|| *(ptr = pw.pw_shell) == 0) {
		/* this is the same default that xterm uses */
		ptr = x_strdup("/bin/sh");
	    }
	}

	shell = x_basename(ptr);

	/* now that we know, what kind is it? */
	for (i = 0; shell_list[i].name; i++) {
	    if (!strcmp(shell_list[i].name, shell)) {
		break;
	    }
	}
	shell_type = shell_list[i].type;
    }

    if (argc == 2) {
	if (!setsize[emu]) {
	    fprintf(stderr,
		    "%s: Can't set window size under %s emulation\n",
		    myname, emuname[emu]);
	    exit(EXIT_FAILURE);
	}
	if (!checkdigits(argv[0]) || !checkdigits(argv[1])) {
	    Usage();		/* Never returns */
	}
    } else if (argc != 0) {
	Usage();		/* Never returns */
    }
#ifdef CANT_OPEN_DEV_TTY
    if ((name_of_tty = ttyname(fileno(stderr))) == NULL)
#endif
	name_of_tty = x_strdup("/dev/tty");

    if ((ttyfp = fopen(name_of_tty, "r+")) == NULL) {
	fprintf(stderr, "%s:  can't open terminal %s\n",
		myname, name_of_tty);
	exit(EXIT_FAILURE);
    }
    tty = fileno(ttyfp);
#ifdef USE_TERMCAP
    if ((env = x_getenv("TERM")) == 0) {
	env = DFT_TERMTYPE;
	if (SHELL_BOURNE == shell_type) {
	    setname = "TERM=" DFT_TERMTYPE ";\nexport TERM;\n";
	} else {
	    setname = "setenv TERM " DFT_TERMTYPE ";\n";
	}
    }
    termcap[0] = 0;		/* ...just in case we've accidentally gotten terminfo */
    if (tgetent(termcap, env) <= 0 || termcap[0] == 0) {
	ok_tcap = 0;
    }
#endif /* USE_TERMCAP */
#ifdef USE_TERMINFO
    if (x_getenv("TERM") == 0) {
	if (SHELL_BOURNE == shell_type) {
	    setname = "TERM=" DFT_TERMTYPE ";\nexport TERM;\n";
	} else {
	    setname = "setenv TERM " DFT_TERMTYPE ";\n";
	}
    }
#endif /* USE_TERMINFO */

#ifdef USE_ANY_SYSV_TERMIO
    rc = ioctl(tty, TCGETA, &tioorig);
    tio = tioorig;
    UIntClr(tio.c_iflag, (ICRNL | IUCLC));
    UIntClr(tio.c_lflag, (ICANON | ECHO));
    tio.c_cflag |= CS8;
    tio.c_cc[VMIN] = 6;
    tio.c_cc[VTIME] = 1;
#elif defined(USE_TERMIOS)
    rc = tcgetattr(tty, &tioorig);
    tio = tioorig;
    UIntClr(tio.c_iflag, ICRNL);
    UIntClr(tio.c_lflag, (ICANON | ECHO));
    tio.c_cflag |= CS8;
    tio.c_cc[VMIN] = 6;
    tio.c_cc[VTIME] = 1;
#else /* not USE_TERMIOS */
    rc = ioctl(tty, TIOCGETP, &sgorig);
    sg = sgorig;
    sg.sg_flags |= RAW;
    UIntClr(sg.sg_flags, ECHO);
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */
    if (rc != 0)
	failed("get tty settings");

    signal(SIGINT, onintr);
    signal(SIGQUIT, onintr);
    signal(SIGTERM, onintr);

#ifdef USE_ANY_SYSV_TERMIO
    rc = ioctl(tty, TCSETAW, &tio);
#elif defined(USE_TERMIOS)
    rc = tcsetattr(tty, TCSADRAIN, &tio);
#else /* not USE_TERMIOS */
    rc = ioctl(tty, TIOCSETP, &sg);
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */
    if (rc != 0)
	failed("set tty settings");

    if (argc == 2) {		/* look for optional parameters of "-s" */
	char *tmpbuf = TypeMallocN(char,
				   strlen(setsize[emu]) +
				   strlen(argv[0]) +
				   strlen(argv[1]) +
				   1);
	if (tmpbuf == 0) {
	    fprintf(stderr, "%s: Cannot query size\n", myname);
	    onintr(0);
	} else {
	    sprintf(tmpbuf, setsize[emu], argv[0], argv[1]);
	    IGNORE_RC(write(tty, tmpbuf, strlen(tmpbuf)));
	    free(tmpbuf);
	}
    }
    IGNORE_RC(write(tty, getsize[emu], strlen(getsize[emu])));
    readstring(ttyfp, buf, size[emu]);
    if (sscanf(buf, size[emu], &rows, &cols) != 2) {
	fprintf(stderr, "%s: Can't get rows and columns\r\n", myname);
	onintr(0);
    }
    if (restore[emu])
	IGNORE_RC(write(tty, restore[emu], strlen(restore[emu])));
#if defined(USE_STRUCT_WINSIZE)
    /* finally, set the tty's window size */
    if (getwsize[emu]) {
	/* get the window size in pixels */
	IGNORE_RC(write(tty, getwsize[emu], strlen(getwsize[emu])));
	readstring(ttyfp, buf, wsize[emu]);
	if (sscanf(buf, wsize[emu], &ts.ws_xpixel, &ts.ws_ypixel) != 2) {
	    fprintf(stderr, "%s: Can't get window size\r\n", myname);
	    onintr(0);
	}
	TTYSIZE_ROWS(ts) = (ttySize_t) rows;
	TTYSIZE_COLS(ts) = (ttySize_t) cols;
	SET_TTYSIZE(tty, ts);
    } else if (ioctl(tty, TIOCGWINSZ, &ts) != -1) {
	/* we don't have any way of directly finding out
	   the current height & width of the window in pixels.  We try
	   our best by computing the font height and width from the "old"
	   window-size values, and multiplying by these ratios... */
	if (TTYSIZE_COLS(ts) != 0)
	    ts.ws_xpixel = (ttySize_t) (cols * (ts.ws_xpixel / TTYSIZE_COLS(ts)));
	if (TTYSIZE_ROWS(ts) != 0)
	    ts.ws_ypixel = (ttySize_t) (rows * (ts.ws_ypixel / TTYSIZE_ROWS(ts)));
	TTYSIZE_ROWS(ts) = (ttySize_t) rows;
	TTYSIZE_COLS(ts) = (ttySize_t) cols;
	SET_TTYSIZE(tty, ts);
    }
#endif /* USE_STRUCT_WINSIZE */

#ifdef USE_ANY_SYSV_TERMIO
    rc = ioctl(tty, TCSETAW, &tioorig);
#elif defined(USE_TERMIOS)
    rc = tcsetattr(tty, TCSADRAIN, &tioorig);
#else /* not USE_TERMIOS */
    rc = ioctl(tty, TIOCSETP, &sgorig);
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */
    if (rc != 0)
	failed("set tty settings");

    signal(SIGINT, SIG_DFL);
    signal(SIGQUIT, SIG_DFL);
    signal(SIGTERM, SIG_DFL);

#ifdef USE_TERMCAP
    if (ok_tcap) {
	/* update termcap string */
	/* first do columns */
	if ((ptr = x_strindex(termcap, "co#")) == NULL) {
	    fprintf(stderr, "%s: No `co#'\n", myname);
	    exit(EXIT_FAILURE);
	}

	i = (int) (ptr - termcap) + 3;
	strncpy(newtc, termcap, (size_t) i);
	sprintf(newtc + i, "%d", cols);
	if ((ptr = strchr(ptr, ':')) != 0)
	    strcat(newtc, ptr);

	/* now do lines */
	if ((ptr = x_strindex(newtc, "li#")) == NULL) {
	    fprintf(stderr, "%s: No `li#'\n", myname);
	    exit(EXIT_FAILURE);
	}

	i = (int) (ptr - newtc) + 3;
	strncpy(termcap, newtc, (size_t) i);
	sprintf(termcap + i, "%d", rows);
	if ((ptr = strchr(ptr, ':')) != 0)
	    strcat(termcap, ptr);
    }
#endif /* USE_TERMCAP */

    if (SHELL_BOURNE == shell_type) {

#ifdef USE_TERMCAP
	if (ok_tcap) {
	    printf("%sTERMCAP=", setname);
	    print_termcap(termcap);
	    printf(";\nexport TERMCAP;\n");
	}
#endif /* USE_TERMCAP */
#ifdef USE_TERMINFO
	printf("%sCOLUMNS=%d;\nLINES=%d;\nexport COLUMNS LINES;\n",
	       setname, cols, rows);
#endif /* USE_TERMINFO */

    } else {			/* not Bourne shell */

#ifdef USE_TERMCAP
	if (ok_tcap) {
	    printf("set noglob;\n%ssetenv TERMCAP ", setname);
	    print_termcap(termcap);
	    printf(";\nunset noglob;\n");
	}
#endif /* USE_TERMCAP */
#ifdef USE_TERMINFO
	printf("set noglob;\n%ssetenv COLUMNS '%d';\nsetenv LINES '%d';\nunset noglob;\n",
	       setname, cols, rows);
#endif /* USE_TERMINFO */
    }
    exit(EXIT_SUCCESS);
}
@


1.11
log
@xterm 314. tested by naddy@@
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.133 2014/12/28 22:50:41 tom Exp $ */
d4 1
a4 1
 * Copyright 2003-2013,2014 by Thomas E. Dickey
d129 1
a129 1
static const char *emuname[EMULATIONS] =
d136 1
a136 1
static const char *getsize[EMULATIONS] =
d142 1
a142 1
static const char *getwsize[EMULATIONS] =
d148 1
a148 1
static const char *restore[EMULATIONS] =
d153 1
a153 2
static const char *setname = "";
static const char *setsize[EMULATIONS] =
d167 1
a167 1
static const char *size[EMULATIONS] =
d172 1
a172 1
static char sunname[] = "sunsize";
d338 1
@


1.10
log
@Update to xterm 311. ok shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.132 2014/07/24 22:47:09 tom Exp $ */
d557 2
a558 2
	ptr = strchr(ptr, ':');
	strcat(newtc, ptr);
d569 2
a570 2
	ptr = strchr(ptr, ':');
	strcat(termcap, ptr);
@


1.9
log
@Update to xterm 304. With help of shadchin@@

tested by ajacoutot@@ and shadchin@@
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.130 2014/04/25 23:39:42 tom Exp $ */
d267 1
a267 1
#if !defined(USG)
d273 1
a273 1
#if defined(USG)
d295 1
a295 1
#if defined(USG)
@


1.8
log
@Update to xterm 291. Tested by many.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.129 2013/01/06 19:42:20 tom Exp $ */
d4 1
a4 1
 * Copyright 2003-2012,2013 by Thomas E. Dickey
d554 1
a554 1
	i = ptr - termcap + 3;
d566 1
a566 1
	i = ptr - newtc + 3;
@


1.7
log
@Update to xterm-275. Tested by jasper@@.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.118 2011/09/11 20:19:19 tom Exp $ */
d4 1
a4 1
 * Copyright 2003-2010,2011 by Thomas E. Dickey
a56 1
#include <xterm.h>
d59 3
a65 4
#ifdef APOLLO_SR9
#define CANT_OPEN_DEV_TTY
#endif

d141 1
a141 2
#if defined(USE_STRUCT_TTYSIZE)
#elif defined(USE_STRUCT_WINSIZE)
d147 1
a147 1
#endif /* USE_STRUCT_{TTYSIZE|WINSIZE} */
d177 1
a177 2
#if defined(USE_STRUCT_TTYSIZE)
#elif defined(USE_STRUCT_WINSIZE)
d183 1
a183 1
#endif /* USE_STRUCT_{TTYSIZE|WINSIZE} */
d185 40
a224 5
static SIGNAL_T onintr(int sig);
static SIGNAL_T resize_timeout(int sig);
static int checkdigits(char *str);
static void Usage(void);
static void readstring(FILE *fp, char *buf, const char *str);
d252 52
d317 1
d356 3
d385 2
a386 2
	for (i = 0; shell_list[i].name; i++)
	    if (!strcmp(shell_list[i].name, shell))
d388 2
d398 1
a398 1
	    exit(1);
d400 1
a400 1
	if (!checkdigits(argv[0]) || !checkdigits(argv[1]))
d402 2
a403 1
    } else if (argc != 0)
d405 1
a405 1

d414 1
a414 1
	exit(1);
d420 1
a420 1
	if (SHELL_BOURNE == shell_type)
d422 1
a422 1
	else
d424 1
d427 1
a427 1
    if (tgetent(termcap, env) <= 0 || termcap[0] == 0)
d429 1
d433 1
a433 1
	if (SHELL_BOURNE == shell_type)
d435 1
a435 1
	else
d437 1
d442 1
a442 1
    ioctl(tty, TCGETA, &tioorig);
d450 1
a450 1
    tcgetattr(tty, &tioorig);
d458 1
a458 1
    ioctl(tty, TIOCGETP, &sgorig);
d463 3
d469 1
d471 1
a471 1
    ioctl(tty, TCSETAW, &tio);
d473 1
a473 1
    tcsetattr(tty, TCSADRAIN, &tio);
d475 1
a475 1
    ioctl(tty, TIOCSETP, &sg);
d477 2
d480 1
a480 1
    if (argc == 2) {
d503 1
a503 8
#if defined(USE_STRUCT_TTYSIZE)
    /* finally, set the tty's window size */
    if (ioctl(tty, TIOCGSIZE, &ts) != -1) {
	TTYSIZE_ROWS(ts) = rows;
	TTYSIZE_COLS(ts) = cols;
	SET_TTYSIZE(tty, ts);
    }
#elif defined(USE_STRUCT_WINSIZE)
d529 1
a529 1
#endif /* USE_STRUCT_{TTYSIZE|WINSIZE} */
d532 1
a532 1
    ioctl(tty, TCSETAW, &tioorig);
d534 1
a534 1
    tcsetattr(tty, TCSADRAIN, &tioorig);
d536 1
a536 1
    ioctl(tty, TIOCSETP, &sgorig);
d538 3
d551 1
a551 1
	    exit(1);
d563 1
a563 1
	    exit(1);
d602 1
a602 83
    exit(0);
}

static int
checkdigits(char *str)
{
    while (*str) {
	if (!isdigit(CharOf(*str)))
	    return (0);
	str++;
    }
    return (1);
}

static void
readstring(FILE *fp, char *buf, const char *str)
{
    int last, c;
#if !defined(USG) && !defined(__UNIXOS2__)
    /* What is the advantage of setitimer() over alarm()? */
    struct itimerval it;
#endif

    signal(SIGALRM, resize_timeout);
#if defined(USG) || defined(__UNIXOS2__)
    alarm(TIMEOUT);
#else
    memset((char *) &it, 0, sizeof(struct itimerval));
    it.it_value.tv_sec = TIMEOUT;
    setitimer(ITIMER_REAL, &it, (struct itimerval *) NULL);
#endif
    if ((c = getc(fp)) == 0233) {	/* meta-escape, CSI */
	c = ESCAPE("")[0];
	*buf++ = (char) c;
	*buf++ = '[';
    } else {
	*buf++ = (char) c;
    }
    if (c != *str) {
	fprintf(stderr, "%s: unknown character, exiting.\r\n", myname);
	onintr(0);
    }
    last = str[strlen(str) - 1];
    while ((*buf++ = (char) getc(fp)) != last) {
	;
    }
#if defined(USG) || defined(__UNIXOS2__)
    alarm(0);
#else
    memset((char *) &it, 0, sizeof(struct itimerval));
    setitimer(ITIMER_REAL, &it, (struct itimerval *) NULL);
#endif
    *buf = 0;
}

static void
Usage(void)
{
    fprintf(stderr, strcmp(myname, sunname) == 0 ?
	    "Usage: %s [rows cols]\n" :
	    "Usage: %s [-u] [-c] [-s [rows cols]]\n", myname);
    exit(1);
}

static SIGNAL_T
resize_timeout(int sig)
{
    fprintf(stderr, "\n%s: Time out occurred\r\n", myname);
    onintr(sig);
}

/* ARGSUSED */
static SIGNAL_T
onintr(int sig GCC_UNUSED)
{
#ifdef USE_ANY_SYSV_TERMIO
    ioctl(tty, TCSETAW, &tioorig);
#elif defined(USE_TERMIOS)
    tcsetattr(tty, TCSADRAIN, &tioorig);
#else /* not USE_TERMIOS */
    ioctl(tty, TIOCSETP, &sgorig);
#endif /* USE_ANY_SYSV_TERMIO/USE_TERMIOS */
    exit(1);
@


1.6
log
@Update to xterm 261. Tested by krw@@, jcs@@.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.114 2010/05/23 16:04:32 tom Exp $ */
d4 1
a4 1
 * Copyright 2003-2009,2010 by Thomas E. Dickey
a92 6
#ifdef X_NOT_POSIX
#if !defined(SYSV) && !defined(i386)
extern struct passwd *getpwuid();	/* does ANYBODY need this? */
#endif /* SYSV && i386 */
#endif /* X_NOT_POSIX */

d114 1
a115 1
    { "jcsh",   SHELL_C },
d117 1
a117 2
    { "ksh",	SHELL_BOURNE }, /* Korn shell (from AT&T toolchest) */
    { "ksh-i",	SHELL_BOURNE }, /* other name for latest Korn shell */
d119 1
d121 6
a232 1
    struct passwd *pw;
d281 13
a293 5
	if (((ptr = x_getenv("SHELL")) == NULL) &&
	    (((pw = getpwuid(getuid())) == NULL) ||
	     *(ptr = pw->pw_shell) == 0))
	    /* this is the same default that xterm uses */
	    ptr = x_strdup("/bin/sh");
@


1.5
log
@Update to xterm 258. lightly tested by krw@@, thanks.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.111 2010/04/18 16:35:02 tom Exp $ */
d383 4
a387 3
	sprintf(tmpbuf, setsize[emu], argv[0], argv[1]);
	IGNORE_RC(write(tty, tmpbuf, strlen(tmpbuf)));
	free(tmpbuf);
d414 2
a415 2
	TTYSIZE_ROWS(ts) = rows;
	TTYSIZE_COLS(ts) = cols;
d423 1
a423 1
	    ts.ws_xpixel = cols * (ts.ws_xpixel / TTYSIZE_COLS(ts));
d425 3
a427 3
	    ts.ws_ypixel = rows * (ts.ws_ypixel / TTYSIZE_ROWS(ts));
	TTYSIZE_ROWS(ts) = rows;
	TTYSIZE_COLS(ts) = cols;
@


1.4
log
@Update to xterm 250
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.109 2009/10/12 00:41:33 tom Exp $ */
d4 1
a4 1
 * Copyright 2003-2008,2009 by Thomas E. Dickey
d344 2
a345 2
    tio.c_iflag &= ~(ICRNL | IUCLC);
    tio.c_lflag &= ~(ICANON | ECHO);
d352 2
a353 2
    tio.c_iflag &= ~ICRNL;
    tio.c_lflag &= ~(ICANON | ECHO);
d361 1
a361 1
    sg.sg_flags &= ~ECHO;
d452 1
a452 1
	strncpy(newtc, termcap, (unsigned) i);
d464 1
a464 1
	strncpy(termcap, newtc, (unsigned) i);
@


1.3
log
@update to xterm 246. Has been in snapshots for some time.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.108 2009/05/31 14:00:16 tom Exp $ */
d89 4
d116 1
a116 1
    char *name;
d131 1
a131 1
static char *emuname[EMULATIONS] =
d138 1
a138 1
static char *getsize[EMULATIONS] =
d145 1
a145 1
static char *getwsize[EMULATIONS] =
d151 1
a151 1
static char *restore[EMULATIONS] =
d156 2
a157 2
static char *setname = "";
static char *setsize[EMULATIONS] =
d171 1
a171 1
static char *size[EMULATIONS] =
d182 1
a182 1
static char *wsize[EMULATIONS] =
d193 1
a193 1
static void readstring(FILE *fp, char *buf, char *str);
d286 1
a286 1
	    ptr = "/bin/sh";
d312 1
a312 1
	name_of_tty = "/dev/tty";
d385 1
a385 1
	write(tty, tmpbuf, strlen(tmpbuf));
d388 1
a388 1
    write(tty, getsize[emu], strlen(getsize[emu]));
d395 1
a395 1
	write(tty, restore[emu], strlen(restore[emu]));
d407 1
a407 1
	write(tty, getwsize[emu], strlen(getwsize[emu]));
d514 1
a514 1
readstring(FILE *fp, char *buf, char *str)
@


1.2
log
@xterm 238. includes fix for CVE-2008-2383.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.107 2008/12/30 17:07:56 tom Exp $ */
d4 1
a4 1
 * Copyright 2003-2007,2008 by Thomas E. Dickey
a94 4
#ifndef bzero
#define	bzero(s, n)	memset(s, 0, n)
#endif

d522 1
a522 1
    bzero((char *) &it, sizeof(struct itimerval));
d544 1
a544 1
    bzero((char *) &it, sizeof(struct itimerval));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
/* $XTermId: resize.c,v 1.99 2006/02/13 01:14:59 tom Exp $ */

/* $XFree86: xc/programs/xterm/resize.c,v 3.62 2006/02/13 01:14:59 dickey Exp $ */
d4 1
a4 1
 * Copyright 2003-2005,2006 by Thomas E. Dickey
d61 1
a194 28
#undef US			/* may conflict with curses.h */

#ifdef USE_TERMCAP
#ifdef HAVE_TERMCAP_H
#include <termcap.h>
#if defined(NCURSES_VERSION)
	/* The tgetent emulation function in SVr4-style curses implementations
	 * (e.g., ncurses) ignores the buffer, so TERMCAP can't be set from it.
	 * Instead, just use terminfo.
	 */
#undef USE_TERMCAP
#include <curses.h>
#endif
#else
#undef ERR			/* workaround for glibc 2.1.3 */
#include <curses.h>
#ifdef NCURSES_VERSION
#ifdef HAVE_NCURSES_TERM_H
#include <ncurses/term.h>
#else
#include <term.h>		/* tgetent() */
#endif /*CYGWIN */
#endif
#endif /* HAVE_TERMCAP_H  */
#endif

#define TERMCAP_SIZE 1500	/* 1023 is standard; 'screen' exceeds */

d227 5
a231 2
    register char *ptr, *env;
    register int emu = VT100;
d282 1
a282 1
	if (((ptr = getenv("SHELL")) == NULL || *ptr == 0) &&
d321 1
a321 1
    if (!(env = getenv("TERM")) || !*env) {
d324 1
a324 1
	    setname = "TERM=xterm;\nexport TERM;\n";
d326 1
a326 1
	    setname = "setenv TERM xterm;\n";
d333 1
a333 2
    if (!(env = getenv("TERM")) || !*env) {
	env = DFT_TERMTYPE;
d335 1
a335 1
	    setname = "TERM=xterm;\nexport TERM;\n";
d337 1
a337 1
	    setname = "setenv TERM xterm;\n";
d375 12
a386 2
	sprintf(buf, setsize[emu], argv[0], argv[1]);
	write(tty, buf, strlen(buf));
d503 1
a503 1
checkdigits(register char *str)
d514 1
a514 1
readstring(register FILE *fp, register char *buf, char *str)
d516 1
a516 1
    register int last, c;
d531 2
a532 1
	*buf++ = c = ESCAPE("")[0];
d535 1
a535 1
	*buf++ = c;
d542 3
a544 1
    while ((*buf++ = getc(fp)) != last) ;
@


1.1.1.1
log
@Importing xterm 216
@
text
@@


1.1.1.2
log
@import xterm 225
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.101 2007/03/19 23:39:10 tom Exp $ */
d196 27
a222 1
#include <xtermcap.h>
@


1.1.1.3
log
@import xterm 229
@
text
@d1 3
a3 1
/* $XTermId: resize.c,v 1.104 2007/07/22 20:34:04 tom Exp $ */
d6 1
a6 1
 * Copyright 2003-2006,2007 by Thomas E. Dickey
d230 1
a230 4
#ifdef USE_TERMCAP
    register char *env;
#endif
    register char *ptr;
d282 1
a282 1
	if (((ptr = x_getenv("SHELL")) == NULL) &&
d321 1
a321 1
    if ((env = x_getenv("TERM")) == 0) {
d324 1
a324 1
	    setname = "TERM=" DFT_TERMTYPE ";\nexport TERM;\n";
d326 1
a326 1
	    setname = "setenv TERM " DFT_TERMTYPE ";\n";
d333 2
a334 1
    if (x_getenv("TERM") == 0) {
d336 1
a336 1
	    setname = "TERM=" DFT_TERMTYPE ";\nexport TERM;\n";
d338 1
a338 1
	    setname = "setenv TERM " DFT_TERMTYPE ";\n";
d376 2
a377 11
	char *tmpbuf = malloc(strlen(setsize[emu]) +
			      strlen(argv[0]) +
			      strlen(argv[1]) +
			      1);
	if (tmpbuf == 0) {
	    fprintf(stderr, "%s: Cannot query size\n", myname);
	    onintr(0);
	}
	sprintf(tmpbuf, setsize[emu], argv[0], argv[1]);
	write(tty, tmpbuf, strlen(tmpbuf));
	free(tmpbuf);
@


1.1.1.4
log
@Import xterm version 232. tested by many.
@
text
@d1 1
a1 1
/* $XTermId: resize.c,v 1.106 2007/12/31 21:10:07 tom Exp $ */
a60 1
#include <xtermcap.h>
d194 2
d376 4
a379 5
	char *tmpbuf = TypeMallocN(char,
				   strlen(setsize[emu]) +
				   strlen(argv[0]) +
				   strlen(argv[1]) +
				   1);
@


