head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.05.10.10.16.20;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	Ff38gp2F57jPbfrL;

1.2
date	2010.03.28.13.05.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.44.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.44.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xkbprint 1.0.4
@
text
@  /*\
   *                          COPYRIGHT 1990
   *                    DIGITAL EQUIPMENT CORPORATION
   *                       MAYNARD, MASSACHUSETTS
   *                        ALL RIGHTS RESERVED.
   *
   * THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE AND
   * SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
   * DIGITAL MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE
   * FOR ANY PURPOSE.  IT IS SUPPLIED "AS IS" WITHOUT EXPRESS OR IMPLIED
   * WARRANTY.
   *
   * IF THE SOFTWARE IS MODIFIED IN A MANNER CREATING DERIVATIVE COPYRIGHT
   * RIGHTS, APPROPRIATE LEGENDS MAY BE PLACED ON THE DERIVATIVE WORK IN
   * ADDITION TO THAT SET FORTH ABOVE.
   *
   * Permission to use, copy, modify, and distribute this software and its
   * documentation for any purpose and without fee is hereby granted, provided
   * that the above copyright notice appear in all copies and that both that
   * copyright notice and this permission notice appear in supporting
   * documentation, and that the name of Digital Equipment Corporation not be
   * used in advertising or publicity pertaining to distribution of the
   * software without specific, written prior permission.
  \*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include 	"utils.h"
#include	<ctype.h>
#include	<stdlib.h>

unsigned int debugFlags;


/***====================================================================***/

static FILE *errorFile = NULL;

Boolean
uSetErrorFile(const char *name)
{
    if ((errorFile != NULL) && (errorFile != stderr)) {
        fprintf(errorFile, "switching to %s\n", name ? name : "stderr");
        fclose(errorFile);
    }
    if (name != NullString)
        errorFile = fopen(name, "w");
    else
        errorFile = stderr;
    if (errorFile == NULL) {
        errorFile = stderr;
        return (False);
    }
    return (True);
}

void
uInformation(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uAction(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "                  ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uWarning(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Warning:          ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Error:            ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uFatalError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Fatal Error:      ");
    vfprintf(errorFile, s, ap);
    fprintf(errorFile, "                  Exiting\n");
    fflush(errorFile);
    va_end(ap);
    exit(1);
    /* NOTREACHED */
}

/***====================================================================***/

void
uInternalError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Internal error:   ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

#ifndef HAVE_ASPRINTF
int
uAsprintf(char ** ret, const char *format, ...)
{
    char buf[256];
    int len;
    va_list ap;

    va_start(ap, format);
    len = vsnprintf(buf, sizeof(buf), format, ap);
    va_end(ap);

    if (len < 0)
        return -1;

    if (len < sizeof(buf))
    {
        *ret = strdup(buf);
    }
    else
    {
        *ret = malloc(len + 1); /* snprintf doesn't count trailing '\0' */
        if (*ret != NULL)
        {
            va_start(ap, format);
            len = vsnprintf(*ret, len + 1, format, ap);
            va_end(ap);
            if (len < 0) {
                free(*ret);
                *ret = NULL;
            }
        }
    }

    if (*ret == NULL)
        return -1;

    return len;
}
#endif /* HAVE_ASPRINTF */
@


1.2
log
@Update to xkbprint 1.0.2
@
text
@a0 1

d2 4
a5 6
   * $Xorg: utils.c,v 1.5 2000/08/17 19:54:50 cpqbld Exp $
   *
   *		              COPYRIGHT 1990
   *		        DIGITAL EQUIPMENT CORPORATION
   *		           MAYNARD, MASSACHUSETTS
   *			    ALL RIGHTS RESERVED.
d9 2
a10 2
   * DIGITAL MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE 
   * FOR ANY PURPOSE.  IT IS SUPPLIED "AS IS" WITHOUT EXPRESS OR IMPLIED 
d22 1
a22 1
   * used in advertising or publicity pertaining to distribution of the 
d25 4
a28 1
/* $XFree86: xc/programs/xkbprint/utils.c,v 3.4 2001/01/17 23:46:11 dawes Exp $ */
d39 1
a39 58
Opaque
uAlloc(unsigned size)
{
    return((Opaque)malloc(size));
}

/***====================================================================***/

Opaque
uCalloc(unsigned n, unsigned size)
{
    return((Opaque)calloc(n,size));
}

/***====================================================================***/

Opaque
uRealloc(Opaque old, unsigned newSize)
{
    if (old==NULL)
	 return((Opaque)malloc(newSize));
    else return((Opaque)realloc((char *)old,newSize));
}

/***====================================================================***/

Opaque
uRecalloc(Opaque old, unsigned nOld, unsigned nNew, unsigned itemSize)
{
char *rtrn;

    if (old==NULL)
	 rtrn= (char *)calloc(nNew,itemSize);
    else {
	rtrn= (char *)realloc((char *)old,nNew*itemSize);
   	if ((rtrn)&&(nNew>nOld)) {
	    bzero(&rtrn[nOld*itemSize],(nNew-nOld)*itemSize);
	}
    }
    return (Opaque)rtrn;
}

/***====================================================================***/

void
uFree(Opaque ptr)
{
    if (ptr!=(Opaque)NULL)
	free((char *)ptr);
    return;
}

/***====================================================================***/
/***                  FUNCTION ENTRY TRACKING                           ***/
/***====================================================================***/

static	FILE	*entryFile=	NULL;
static	int	 uEntryLevel;
d42 1
a42 1
uSetEntryFile(char *name)
d44 3
a46 3
    if ((entryFile!=NULL)&&(entryFile!=stderr)) {
	fprintf(entryFile,"switching to %s\n",name?name:"stderr");
	fclose(entryFile);
d48 7
a54 5
    if (name!=NullString)	entryFile=	fopen(name,"w");
    else			entryFile=	stderr;
    if (entryFile==NULL) {
	entryFile=	stderr;
	return(False);
d56 1
a56 1
    return(True);
d60 1
a60 103
uEntry(int l, char *s,...)
{
int	i;
va_list ap;

    va_start(ap, s);
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
    }
    vfprintf(entryFile,s,ap);
    uEntryLevel+= l;
    va_end(ap);
    return;
}

void
uExit(int l, char *rtVal)
{
int	i;

    uEntryLevel-= l;
    if (uEntryLevel<0)	uEntryLevel=	0;
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
    }
    fprintf(entryFile,"---> 0x%p\n",rtVal);
    return;
}

/***====================================================================***/
/***			PRINT FUNCTIONS					***/
/***====================================================================***/

	FILE	*uDebugFile=		NULL;
	int	 uDebugIndentLevel=	0;
	int	 uDebugIndentSize=	4;

Boolean
uSetDebugFile(char *name)
{
    if ((uDebugFile!=NULL)&&(uDebugFile!=stderr)) {
	fprintf(uDebugFile,"switching to %s\n",name?name:"stderr");
	fclose(uDebugFile);
    }
    if (name!=NullString)	uDebugFile=	fopen(name,"w");
    else			uDebugFile=	stderr;
    if (uDebugFile==NULL) {
	uDebugFile=	stderr;
	return(False);
    }
    return(True);
}

void
uDebug(char *s,...)
{
int	i;
va_list ap;

    va_start(ap, s);
    for (i=(uDebugIndentLevel*uDebugIndentSize);i>0;i--) {
	putc(' ',uDebugFile);
    }
    vfprintf(uDebugFile,s,ap);
    fflush(uDebugFile);
    va_end(ap);
    return;
}

void
uDebugNOI(char *s,...)
{
va_list ap;

    va_start(ap, s);
    vfprintf(uDebugFile,s,ap);
    fflush(uDebugFile);
    va_end(ap);
    return;
}

/***====================================================================***/

static	FILE	*errorFile=	NULL;

Boolean
uSetErrorFile(char *name)
{
    if ((errorFile!=NULL)&&(errorFile!=stderr)) {
	fprintf(errorFile,"switching to %s\n",name?name:"stderr");
	fclose(errorFile);
    }
    if (name!=NullString)	errorFile=	fopen(name,"w");
    else			errorFile=	stderr;
    if (errorFile==NULL) {
	errorFile=	stderr;
	return(False);
    }
    return(True);
}

void
uInformation(char *s,...)
d65 1
a65 1
    vfprintf(errorFile,s,ap);
d74 1
a74 1
uAction(char *s,...)
d79 2
a80 2
    fprintf(errorFile,"                  ");
    vfprintf(errorFile,s,ap);
d89 1
a89 1
uWarning(char *s,...)
d94 2
a95 2
    fprintf(errorFile,"Warning:          ");
    vfprintf(errorFile,s,ap);
d104 1
a104 1
uError(char *s,...)
d109 2
a110 2
    fprintf(errorFile,"Error:            ");
    vfprintf(errorFile,s,ap);
d119 1
a119 1
uFatalError(char *s,...)
d124 3
a126 3
    fprintf(errorFile,"Fatal Error:      ");
    vfprintf(errorFile,s,ap);
    fprintf(errorFile,"                  Exiting\n");
d136 1
a136 1
uInternalError(char *s,...)
d141 2
a142 2
    fprintf(errorFile,"Internal error:   ");
    vfprintf(errorFile,s,ap);
d150 3
a152 3
#ifndef HAVE_STRDUP
char *
uStringDup(char *str)
d154 3
a156 1
char *rtrn;
d158 6
a163 7
    if (str==NULL)
	return NULL;
    rtrn= (char *)uAlloc(strlen(str)+1);
    strcpy(rtrn,str);
    return rtrn;
}
#endif
d165 3
a167 14
#ifndef HAVE_STRCASECMP
int
uStrCaseCmp(char *str1, char *str2)
{
    char buf1[512],buf2[512];
    char c, *s;
    register int n;

    for (n=0, s = buf1; (c = *str1++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
d169 13
a181 7
    *s = '\0';
    for (n=0, s = buf2; (c = *str2++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
a182 3
    *s = '\0';
    return (strcmp(buf1, buf2));
}
d184 4
a187 15
int
uStrCasePrefix(char *prefix, char *str)
{
    char c1;
    char c2;
    while (((c1=*prefix)!='\0')&&((c2=*str)!='\0')) {
	if (isupper(c1))	c1= tolower(c1);
	if (isupper(c2))	c2= tolower(c2);
	if (c1!=c2)
	    return 0;
	prefix++; str++;
    }
    if (c1!='\0')
	return 0;
    return 1;
d189 1
a189 2

#endif
@


1.1
log
@Initial revision
@
text
@d34 3
d40 1
a40 2
uAlloc(size)
    unsigned	size;
d48 1
a48 3
uCalloc(n,size)
    unsigned	n;
    unsigned	size;
d56 1
a56 3
uRealloc(old,newSize)
    Opaque	old;
    unsigned	newSize;
d66 1
a66 5
uRecalloc(old,nOld,nNew,itemSize)
    Opaque	old;
    unsigned	nOld;
    unsigned	nNew;
    unsigned	itemSize;
d84 1
a84 2
uFree(ptr)
    Opaque ptr;
d96 1
a96 1
	int	 uEntryLevel;
d99 1
a99 2
uSetEntryFile(name)
    char *name;
d131 1
a131 3
uExit(l,rtVal)
    int		l;
    char *	rtVal;
d153 1
a153 2
uSetDebugFile(name)
    char *name;
d309 1
a309 2
uStringDup(str)
    char *str;
d323 1
a323 2
uStrCaseCmp(str1, str2)
    char *str1, *str2;
d349 1
a349 2
uStrCasePrefix(prefix, str)
    char *prefix, *str;
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
