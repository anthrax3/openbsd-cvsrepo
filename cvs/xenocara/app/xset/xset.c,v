head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.14
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.12
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.6
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.2
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.8
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.6
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_0_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.08.17.16.28.49;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2013.08.17.16.20.10;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.28.13.24.52;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.11.11.21.09;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.31.07.58.30;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.10.09.42.16;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.20.16.47.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.10.44.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.10.44.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.16.17.17.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Fix one last warning about usage() format string.
@
text
@/*

Copyright 1985, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

*/
/* Modified by Stephen so keyboard rate is set using XKB extensions */

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#ifdef HAVE_X11_EXTENSIONS_DPMS_H
# define DPMSExtension
#endif

#ifdef HAVE_X11_EXTENSIONS_MITMISC_H
# define MITMISC
#endif

#ifdef HAVE_X11_XKBLIB_H
# define XKB
#endif

#if defined(HAVE_X11_EXTENSIONS_XF86MISC_H) && defined(HAVE_X11_EXTENSIONS_XF86MSCSTR_H)
# define XF86MISC
#endif

#if defined(HAVE_X11_EXTENSIONS_FONTCACHE_H) && defined(HAVE_X11_EXTENSIONS_FONTCACHEP_H)
# define FONTCACHE
#endif

#include <stdio.h>
#include <ctype.h>
#include <stdarg.h>
#include <stdlib.h>
#include <X11/Xos.h>
#include <X11/Xfuncs.h>
#include <X11/Xlib.h>
#include <X11/keysym.h>
#include <X11/Xproto.h>
#include <X11/Xutil.h>
#include <X11/Xmu/Error.h>
#ifdef MITMISC
# include <X11/extensions/MITMisc.h>
#endif
#ifdef DPMSExtension
# include <X11/extensions/dpms.h>
#endif /* DPMSExtension */

#ifdef XF86MISC
# include <X11/extensions/xf86misc.h>
# include <X11/extensions/xf86mscstr.h>
#endif
#ifdef XKB
# include <X11/XKBlib.h>
#endif
#ifdef FONTCACHE
# include <X11/extensions/fontcache.h>
# include <X11/extensions/fontcacheP.h>

static Status set_font_cache(Display *, long, long, long);
static void query_cache_status(Display *dpy);
#endif

#define ON 1
#define OFF 0

#define SERVER_DEFAULT (-1)
#define DONT_CHANGE -2

#define DEFAULT_ON (-50)
#define DEFAULT_TIMEOUT (-600)

#define ALL -1
#define TIMEOUT 1
#define INTERVAL 2
#define PREFER_BLANK 3
#define ALLOW_EXP 4

#ifdef XF86MISC
# define KBDDELAY_DEFAULT 500
# define KBDRATE_DEFAULT 30
#endif
#ifdef XKB
# define XKBDDELAY_DEFAULT 660
# define XKBDRATE_DEFAULT (1000/40)
#endif

#define	nextarg(i, argv) \
	argv[i]; \
	if (i >= argc) \
		break; \

static char *progName;

static int error_status = 0;

static int is_number(const char *arg, int maximum);
static void set_click(Display *dpy, int percent);
static void set_bell_vol(Display *dpy, int percent);
static void set_bell_pitch(Display *dpy, int pitch);
static void set_bell_dur(Display *dpy, int duration);
static void set_font_path(Display *dpy, const char *path, int special,
			  int before, int after);
static void set_led(Display *dpy, int led, int led_mode);
static void xkbset_led(Display *dpy, const char *led, int led_mode);
static void set_mouse(Display *dpy, int acc_num, int acc_denom, int threshold);
static void set_saver(Display *dpy, int mask, int value);
static void set_repeat(Display *dpy, int key, int auto_repeat_mode);
static void set_pixels(Display *dpy, unsigned long *pixels, caddr_t *colors,
		       int numpixels);
static void set_lock(Display *dpy, Bool onoff);
static const char *on_or_off(int val, int onval, const char *onstr,
                             int offval, const char *offstr,
                             char buf[], size_t bufsize);
static void query(Display *dpy);
static void usage(const char *fmt, ...) _X_NORETURN _X_ATTRIBUTE_PRINTF(1,2);
static void error(const char *message) _X_NORETURN;
static int local_xerror(Display *dpy, XErrorEvent *rep);

#ifdef XF86MISC
static void set_repeatrate(Display *dpy, int delay, int rate);
#endif
#ifdef XKB
static void xkbset_repeatrate(Display *dpy, int delay, int rate);
#endif

int
main(int argc, char *argv[])
{
    const char *arg;
    register int i;
    int percent;
    int acc_num, acc_denom, threshold;

#ifdef DPMSExtension
    CARD16 standby_timeout, suspend_timeout, off_timeout;
#endif
    int key, auto_repeat_mode;
    XKeyboardControl values;

#define MAX_PIXEL_COUNT 512
    unsigned long pixels[MAX_PIXEL_COUNT];
    caddr_t colors[MAX_PIXEL_COUNT];
    int numpixels = 0;
    char *disp = NULL;
    Display *dpy;
    Bool hasargs = False;

    int miscpresent = 0;
    int xkbpresent = 0;

#ifdef XKB
    int xkbmajor = XkbMajorVersion, xkbminor = XkbMinorVersion;
    int xkbopcode, xkbevent, xkberror;
#else
#endif
#ifdef FONTCACHE
    long himark, lowmark, balance;
#endif

    progName = argv[0];
    for (i = 1; i < argc; i++) {
	arg = argv[i];
	if (strcmp(arg, "-display") == 0 || strcmp(arg, "-d") == 0) {
	    if (++i >= argc)
		usage("missing argument to -display");
	    disp = argv[i];
	} else if (strcmp(arg, "-version") == 0) {
	    puts(PACKAGE_STRING);
	    exit(EXIT_SUCCESS);
	} else {
	    hasargs = True;
	}
    }
    if (!hasargs) {
	usage(NULL);		       /* replace with window interface */
    }

    dpy = XOpenDisplay(disp);    /*  Open display and check for success */
    if (dpy == NULL) {
	fprintf(stderr, "%s:  unable to open display \"%s\"\n",
		argv[0], XDisplayName(disp));
	exit(EXIT_FAILURE);
    }
    XSetErrorHandler(local_xerror);
    for (i = 1; i < argc;) {
	arg = argv[i++];
	if (strcmp(arg, "-display") == 0 || strcmp(arg, "-d") == 0) {
	    ++i;		       		/* already dealt with */
	    continue;
	} else if (*arg == '-' && *(arg + 1) == 'c') {	/* Does arg start
							   with "-c"? */
	    set_click(dpy, 0);	       		/* If so, turn click off */
	} else if (*arg == 'c') {      		/* Well, does it start
						   with "c", then? */
	    percent = SERVER_DEFAULT;  		/* Default click volume. */
	    if (i >= argc) {
		set_click(dpy, percent);	/* set click to default */
		break;
	    }
	    arg = nextarg(i, argv);
	    if (strcmp(arg, "on") == 0) {	/* Let click be default. */
		percent = DEFAULT_ON;
		i++;
	    } else if (strcmp(arg, "off") == 0) {
		percent = 0;	       		/* Turn it off.          */
		i++;
	    } else if (is_number(arg, 100)) {
		percent = atoi(arg);		/* Set to spec. volume */
		i++;
	    }
	    set_click(dpy, percent);
	} else if (strcmp(arg, "-b") == 0) {
	    set_bell_vol(dpy, 0);      		/* Then turn off bell.    */
	} else if (strcmp(arg, "b") == 0) {
	    percent = SERVER_DEFAULT;  		/* Set bell to default. */
	    if (i >= argc) {
		set_bell_vol(dpy, percent);	/* set bell to default */
		set_bell_pitch(dpy, percent);	/* set pitch to default */
		set_bell_dur(dpy, percent);	/* set duration to default */
		break;
	    }
	    arg = nextarg(i, argv);
	    if (strcmp(arg, "on") == 0) {	/* Let it stay that way.  */
		set_bell_vol(dpy, DEFAULT_ON);	/* set bell on */
		set_bell_pitch(dpy, percent);	/* set pitch to default */
		set_bell_dur(dpy, percent);	/* set duration to default */
		i++;
	    } else if (strcmp(arg, "off") == 0) {
		percent = 0;	       		/* Turn the bell off.     */
		set_bell_vol(dpy, percent);
		i++;
	    } else if (is_number(arg, 100)) {	/* If volume is given:    */
		percent = atoi(arg);   	       	/* set bell appropriately. */
		set_bell_vol(dpy, percent);
		i++;
		arg = nextarg(i, argv);

		if (is_number(arg, 32767)) {	/* If pitch is given:     */
		    set_bell_pitch(dpy, atoi(arg));	/* set the bell.  */
		    i++;

		    arg = nextarg(i, argv);
		    if (is_number(arg, 32767)) { /* If duration is given:  */
			set_bell_dur(dpy, atoi(arg));	/*  set the bell.  */
			i++;
		    }
		}
	    } else
		set_bell_vol(dpy, percent);	/* set bell to default */
	}
#ifdef MITMISC
	else if (strcmp(arg, "bc") == 0) {
	    int dummy;

	    if (XMITMiscQueryExtension(dpy, &dummy, &dummy))
		XMITMiscSetBugMode(dpy, True);
	    else
		fprintf(stderr,
			"server does not have extension for bc option\n");
	} else if (strcmp(arg, "-bc") == 0) {
	    int dummy;

	    if (XMITMiscQueryExtension(dpy, &dummy, &dummy))
		XMITMiscSetBugMode(dpy, False);
	    else
		fprintf(stderr,
			"server does not have extension for -bc option\n");
	}
#endif
#ifdef FONTCACHE
	else if (strcmp(arg, "fc") == 0) {
	    int dummy;
	    FontCacheSettings cs;

	    if (FontCacheQueryExtension(dpy, &dummy, &dummy)) {
		FontCacheGetCacheSettings(dpy, &cs);
		himark = cs.himark / 1024;
		lowmark = cs.lowmark / 1024;
		balance = cs.balance;
		if (i >= argc) {
		    /* Set to server's values, and clear all cache
		       in side effect */
		    set_font_cache(dpy, himark, lowmark, balance);
		    break;
		}
		arg = nextarg(i, argv);
		if (is_number(arg, 32767)) {	/* If hi-mark is given: */
		    himark = atoi(arg);
		    i++;
		    if (himark <= 0) {
			usage("hi-mark must be greater than 0");
		    }
		    if (i >= argc) {
			lowmark = (himark * 70) / 100;
			set_font_cache(dpy, himark, lowmark, balance);
			break;
		    }
		    arg = nextarg(i, argv);
		    if (is_number(arg, 32767)) { /* If low-mark is given: */
			lowmark = atoi(arg);
			i++;
			if (lowmark <= 0) {
			    usage("low-mark must be greater than 0");
			}
			if (himark <= lowmark) {
			    usage("hi-mark must be greater than low-mark");
			}
			if (i >= argc) {
			    set_font_cache(dpy, himark, lowmark, balance);
			    break;
			}
			arg = nextarg(i, argv);
			if (is_number(arg, 90)) {
			    balance = atoi(arg);
			    i++;
			    if (!(10 <= balance && balance <= 90)) {
				usage("balance must be 10 to 90\n");
			    }
			    set_font_cache(dpy, himark, lowmark, balance);
			}
		    }
		} else if (strcmp(arg, "s") == 0
		    || strcmp(arg, "status") == 0) {
		    /* display cache status */
		    query_cache_status(dpy);
		}
	    } else {
		fprintf(stderr,
			"server does not have extension for fc option\n");
	    }
	}
#endif
	else if (strcmp(arg, "fp") == 0) {	/* set font path */
	    if (i >= argc) {
		arg = "default";
	    } else {
		arg = nextarg(i, argv);
	    }
	    set_font_path(dpy, arg, 1, 0, 0);	/* special argument */
	    i++;
	} else if (strcmp(arg, "fp=") == 0) {	/* unconditionally set */
	    if (i >= argc) {
		usage("missing fp= argument");
	    } else {
		arg = nextarg(i, argv);
	    }
	    set_font_path(dpy, arg, 0, 0, 0);	/* not special, set */
	    i++;
	} else if (strcmp(arg, "+fp") == 0) {	/* set font path */
	    if (i >= argc)
		usage("missing +fp argument");
	    arg = nextarg(i, argv);
	    set_font_path(dpy, arg, 0, 1, 0);	/* not special, prepend */
	    i++;
	} else if (strcmp(arg, "fp+") == 0) {	/* set font path */
	    if (i >= argc)
		usage("missing fp+ argument");
	    arg = nextarg(i, argv);
	    set_font_path(dpy, arg, 0, 0, 1);	/* not special, append */
	    i++;
	} else if (strcmp(arg, "-fp") == 0) {	/* set font path */
	    if (i >= argc)
		usage("missing -fp argument");
	    arg = nextarg(i, argv);
	    set_font_path(dpy, arg, 0, -1, 0);	/* not special, preremove */
	    i++;
	} else if (strcmp(arg, "fp-") == 0) {	/* set font path */
	    if (i >= argc)
		usage("missing fp- argument");
	    arg = nextarg(i, argv);
	    set_font_path(dpy, arg, 0, 0, -1);	/* not special, postremove */
	    i++;
	} else if (strcmp(arg, "-led") == 0) {	/* Turn off one or all LEDs */
	    values.led_mode = OFF;
	    values.led = ALL;	       		/* None specified */
	    if (i >= argc) {
		set_led(dpy, values.led, values.led_mode);
		break;
	    }
	    arg = nextarg(i, argv);
	    if (strcmp(arg, "named") == 0) {
		if (++i >= argc) {
		    usage("missing argument to led named");
		} else {
		    arg = nextarg(i, argv);
		    xkbset_led(dpy, arg, values.led_mode);
		}
		break;
	    }
	    if (is_number(arg, 32) && atoi(arg) > 0) {
		values.led = atoi(arg);
		i++;
	    }
	    set_led(dpy, values.led, values.led_mode);
	} else if (strcmp(arg, "led") == 0) {	/* Turn on one or all LEDs  */
	    values.led_mode = ON;
	    values.led = ALL;
	    if (i >= argc) {
		set_led(dpy, values.led,
			values.led_mode);	/* set led to def */
		break;
	    }
	    arg = nextarg(i, argv);
	    if (strcmp(arg, "named") == 0) {
		if (++i >= argc) {
		    usage("missing argument to -led named");
		} else {
		    arg = nextarg(i, argv);
		    xkbset_led(dpy, arg, values.led_mode);
		}
		break;
	    }
	    if (strcmp(arg, "on") == 0) {
		i++;
	    } else if (strcmp(arg, "off") == 0) { /* ...except in this case. */
		values.led_mode = OFF;
		i++;
	    } else if (is_number(arg, 32) && atoi(arg) > 0) {
		values.led = atoi(arg);
		i++;
	    }
	    set_led(dpy, values.led, values.led_mode);
	}
/*  Set pointer (mouse) settings:  Acceleration and Threshold. */
	else if (strcmp(arg, "m") == 0 || strcmp(arg, "mouse") == 0) {
	    acc_num = SERVER_DEFAULT;		/* restore server defaults */
	    acc_denom = SERVER_DEFAULT;
	    threshold = SERVER_DEFAULT;
	    if (i >= argc) {
		set_mouse(dpy, acc_num, acc_denom, threshold);
		break;
	    }
	    arg = argv[i];
	    if (strcmp(arg, "default") == 0) {
		i++;
	    } else if (*arg >= '0' && *arg <= '9') {
		acc_denom = 1;
		sscanf(arg, "%d/%d", &acc_num, &acc_denom);
		i++;
		if (i >= argc) {
		    set_mouse(dpy, acc_num, acc_denom, threshold);
		    break;
		}
		arg = argv[i];
		if (*arg >= '0' && *arg <= '9') {
		    threshold = atoi(arg); /* Set threshold as user specified. */
		    i++;
		}
	    }
	    set_mouse(dpy, acc_num, acc_denom, threshold);
	}
#ifdef DPMSExtension
	else if (strcmp(arg, "+dpms") == 0) {	/* turn on DPMS */
	    int dummy;

	    if (DPMSQueryExtension(dpy, &dummy, &dummy))
		DPMSEnable(dpy);
	    else
		fprintf(stderr,
		    "server does not have extension for +dpms option\n");
	} else if (strcmp(arg, "-dpms") == 0) {	/* shut off DPMS */
	    int dummy;

	    if (DPMSQueryExtension(dpy, &dummy, &dummy))
		DPMSDisable(dpy);
	    else
		fprintf(stderr,
		    "server does not have extension for -dpms option\n");

	} else if (strcmp(arg, "dpms") == 0) {	/* tune DPMS */
	    int dummy;

	    if (DPMSQueryExtension(dpy, &dummy, &dummy)) {
		DPMSGetTimeouts(dpy, &standby_timeout, &suspend_timeout,
		    &off_timeout);
		if (i >= argc) {
		    DPMSEnable(dpy);
		    break;
		}
		arg = argv[i];
		if (*arg >= '0' && *arg <= '9') {
		    sscanf(arg, "%hu", &standby_timeout);
		    i++;
		    arg = argv[i];
		    if ((arg) && (*arg >= '0' && *arg <= '9')) {
			sscanf(arg, "%hu", &suspend_timeout);
			i++;
			arg = argv[i];
			if ((arg) && (*arg >= '0' && *arg <= '9')) {
			    sscanf(arg, "%hu", &off_timeout);
			    i++;
			    arg = argv[i];
			}
		    }
		    if ((suspend_timeout != 0)
			&& (standby_timeout > suspend_timeout)) {
			fprintf(stderr, "illegal combination of values\n");
			fprintf(stderr,
			    "  standby time of %d is greater than suspend time of %d\n",
			    standby_timeout, suspend_timeout);
			exit(EXIT_FAILURE);
		    }
		    if ((off_timeout != 0) && (suspend_timeout > off_timeout)) {
			fprintf(stderr, "illegal combination of values\n");
			fprintf(stderr,
			    "  suspend time of %d is greater than off time of %d\n",
			    suspend_timeout, off_timeout);
			exit(EXIT_FAILURE);
		    }
		    if ((suspend_timeout == 0) && (off_timeout != 0) &&
			(standby_timeout > off_timeout)) {
			fprintf(stderr, "illegal combination of values\n");
			fprintf(stderr,
			    "  standby time of %d is greater than off time of %d\n",
			    standby_timeout, off_timeout);
			exit(EXIT_FAILURE);
		    }
		    DPMSEnable(dpy);
		    DPMSSetTimeouts(dpy, standby_timeout, suspend_timeout,
			off_timeout);
		} else if (strcmp(arg, "force") == 0) {
		    if (++i >= argc)
			usage("missing argument to dpms force");
		    arg = argv[i];
		    /*
		     * The calls to usleep below are necessary to
		     * delay the actual DPMS mode setting briefly.
		     * Without them, it's likely that the mode will be
		     * set between the Down and Up key transitions, in
		     * which case the Up transition may immediately
		     * turn the display back on.
		     *
		     */

#ifdef HAVE_USLEEP
# define Usleep(us) usleep((us))
#elif defined(WIN32)
# define Usleep(us) Sleep(us)
#else
# define Usleep(us) sleep((us / 1000000 > 0) ? us / 1000000 : 1)
#endif /* HAVE_USLEEP */

		    if (strcmp(arg, "on") == 0) {
			DPMSEnable(dpy);
			DPMSForceLevel(dpy, DPMSModeOn);
			i++;
		    } else if (strcmp(arg, "standby") == 0) {
			DPMSEnable(dpy);
			Usleep(100000);
			DPMSForceLevel(dpy, DPMSModeStandby);
			i++;
		    } else if (strcmp(arg, "suspend") == 0) {
			DPMSEnable(dpy);
			Usleep(100000);
			DPMSForceLevel(dpy, DPMSModeSuspend);
			i++;
		    } else if (strcmp(arg, "off") == 0) {
			DPMSEnable(dpy);
			Usleep(100000);
			DPMSForceLevel(dpy, DPMSModeOff);
			i++;
		    } else {
			fprintf(stderr, "bad parameter %s\n", arg);
			i++;
		    }
		}
	    } else {
		fprintf(stderr,
		    "server does not have extension for dpms option\n");
	    }
	}
#endif /* DPMSExtension */
	else if (strcmp(arg, "s") == 0) {
	    if (i >= argc) {
		set_saver(dpy, ALL, 0);	/* Set everything to default  */
		break;
	    }
	    arg = argv[i];
	    if (strcmp(arg, "blank") == 0) { /* Alter blanking preference. */
		set_saver(dpy, PREFER_BLANK, PreferBlanking);
		i++;
	    } else if (strcmp(arg, "noblank") == 0) {	/*  Ditto.  */
		set_saver(dpy, PREFER_BLANK, DontPreferBlanking);
		i++;
	    } else if (strcmp(arg, "expose") == 0) {	/* Alter exposure preference. */
		set_saver(dpy, ALLOW_EXP, AllowExposures);
		i++;
	    } else if (strcmp(arg, "noexpose") == 0) {	/*  Ditto.  */
		set_saver(dpy, ALLOW_EXP, DontAllowExposures);
		i++;
	    } else if (strcmp(arg, "off") == 0) {
		set_saver(dpy, TIMEOUT, 0);	/*  Turn off screen saver.  */
		i++;
		if (i >= argc)
		    break;
		arg = argv[i];
		if (strcmp(arg, "off") == 0) {
		    set_saver(dpy, INTERVAL, 0);
		    i++;
		}
	    } else if (strcmp(arg, "default") == 0) {	/* Leave as default. */
		set_saver(dpy, ALL, SERVER_DEFAULT);
		i++;
	    } else if (strcmp(arg, "on") == 0) {	/* Turn on.       */
		set_saver(dpy, ALL, DEFAULT_TIMEOUT);
		i++;
	    } else if (strcmp(arg, "activate") == 0) {	/* force it active */
		XActivateScreenSaver(dpy);
		i++;
	    } else if (strcmp(arg, "reset") == 0) {	/* force it inactive */
		XResetScreenSaver(dpy);
		i++;
	    } else if (*arg >= '0' && *arg <= '9') {	/* Set as user wishes. */
		set_saver(dpy, TIMEOUT, atoi(arg));
		i++;
		if (i >= argc)
		    break;
		arg = argv[i];
		if (*arg >= '0' && *arg <= '9') {
		    set_saver(dpy, INTERVAL, atoi(arg));
		    i++;
		}
	    }
	} else if (strcmp(arg, "-r") == 0) {		/* Turn off one or
							   all autorepeats */
	    auto_repeat_mode = OFF;
	    key = ALL;		       			/* None specified */
	    arg = argv[i];
	    if (i < argc)
		if (is_number(arg, 255)) {
		    key = atoi(arg);
		    i++;
		}
	    set_repeat(dpy, key, auto_repeat_mode);
	} else if (strcmp(arg, "r") == 0) {		/* Turn on one or
							   all autorepeats */
	    auto_repeat_mode = ON;
	    key = ALL;		       			/* None specified */
	    arg = argv[i];
	    if (i < argc) {
		if (strcmp(arg, "on") == 0) {
		    i++;
		} else if (strcmp(arg, "off") == 0) {	/*  ...except in
							    this case */
		    auto_repeat_mode = OFF;
		    i++;
		}
#if defined(XF86MISC) || defined(XKB)
		else if (strcmp(arg, "rate") == 0) {	/*  ...or this one. */
		    int delay = 0, rate = 0;

#ifdef XF86MISC
		    int rate_set = 0;
#endif

#ifdef XKB
		    if (XkbQueryExtension(dpy, &xkbopcode, &xkbevent,
					  &xkberror, &xkbmajor, &xkbminor)) {
			delay = XKBDDELAY_DEFAULT;
			rate = XKBDRATE_DEFAULT;
			xkbpresent = 1;
		    }
#endif
#ifdef XF86MISC
		    if (!xkbpresent) {
			int dummy;

			if (XF86MiscQueryExtension(dpy, &dummy, &dummy)) {
			    delay = KBDDELAY_DEFAULT;
			    rate = KBDRATE_DEFAULT;
			    miscpresent = 1;
			}
		    }
#endif
		    if (!xkbpresent && !miscpresent)
			fprintf(stderr,
				"server does not have extension for \"r rate\" option\n");
		    i++;
		    arg = argv[i];
		    if (i < argc) {
			if (is_number(arg, 10000) && atoi(arg) > 0) {
			    delay = atoi(arg);
			    i++;
			    arg = argv[i];
			    if (i < argc) {
				if (is_number(arg, 255) && atoi(arg) > 0) {
				    rate = atoi(arg);
				    i++;
				}
			    }
			}
		    }
#ifdef XKB
		    if (xkbpresent) {
			xkbset_repeatrate(dpy, delay, 1000 / rate);
#ifdef XF86MISC
			rate_set = 1;
#endif
		    }
#endif
#ifdef XF86MISC
		    if (miscpresent && !rate_set) {
			set_repeatrate(dpy, delay, rate);
		    }
#endif
		}
#endif
		else if (is_number(arg, 255)) {
		    key = atoi(arg);
		    i++;
		}
	    }
	    set_repeat(dpy, key, auto_repeat_mode);
	} else if (strcmp(arg, "p") == 0) {
	    if (i + 1 >= argc)
		usage("missing argument to p");
	    arg = argv[i];
	    if (numpixels >= MAX_PIXEL_COUNT)
		usage("more than %d pixels specified", MAX_PIXEL_COUNT);
	    if (*arg >= '0' && *arg <= '9')
		pixels[numpixels] = strtoul(arg, NULL, 10);
	    else
		usage("invalid pixel number %s", arg);
	    i++;
	    colors[numpixels] = argv[i];
	    i++;
	    numpixels++;
	} else if (strcmp(arg, "-k") == 0) {
	    set_lock(dpy, OFF);
	} else if (strcmp(arg, "k") == 0) {
	    set_lock(dpy, ON);
	} else if (strcmp(arg, "q") == 0 || strcmp(arg, "-q") == 0) {
	    query(dpy);
	} else
	    usage("unknown option %s", arg);
    }

    if (numpixels)
	set_pixels(dpy, pixels, colors, numpixels);

    XCloseDisplay(dpy);

    exit(error_status);		       /*  Done.  We can go home now.  */
}

static int
is_number(const char *arg, int maximum)
{
    const char *p;

    if (arg[0] == '-' && arg[1] == '1' && arg[2] == '\0')
	return (1);
    for (p = arg; isdigit(*p); p++) ;
    if (*p || atoi(arg) > maximum)
	return (0);
    return (1);
}

/*  These next few functions do the real work (xsetting things).
 */
static void
set_click(Display *dpy, int percent)
{
    XKeyboardControl values;
    XKeyboardState kbstate;

    values.key_click_percent = percent;
    if (percent == DEFAULT_ON)
	values.key_click_percent = SERVER_DEFAULT;
    XChangeKeyboardControl(dpy, KBKeyClickPercent, &values);
    if (percent == DEFAULT_ON) {
	XGetKeyboardControl(dpy, &kbstate);
	if (!kbstate.key_click_percent) {
	    values.key_click_percent = -percent;
	    XChangeKeyboardControl(dpy, KBKeyClickPercent, &values);
	}
    }
    return;
}

static void
set_bell_vol(Display *dpy, int percent)
{
    XKeyboardControl values;
    XKeyboardState kbstate;

    values.bell_percent = percent;
    if (percent == DEFAULT_ON)
	values.bell_percent = SERVER_DEFAULT;
    XChangeKeyboardControl(dpy, KBBellPercent, &values);
    if (percent == DEFAULT_ON) {
	XGetKeyboardControl(dpy, &kbstate);
	if (!kbstate.bell_percent) {
	    values.bell_percent = -percent;
	    XChangeKeyboardControl(dpy, KBBellPercent, &values);
	}
    }
    return;
}

static void
set_bell_pitch(Display *dpy, int pitch)
{
    XKeyboardControl values;

    values.bell_pitch = pitch;
    XChangeKeyboardControl(dpy, KBBellPitch, &values);
    return;
}

static void
set_bell_dur(Display *dpy, int duration)
{
    XKeyboardControl values;

    values.bell_duration = duration;
    XChangeKeyboardControl(dpy, KBBellDuration, &values);
    return;
}

/*
 * Set, add, or subtract the path according to before and after flags:
 *
 *	before	after	action
 *
 *	   0      0	FontPath := path
 *	  -1      0	FontPath := current - path
 *	   0     -1	FontPath := current - path
 *	   1      0	FontPath := path + current
 *	   0      1	FontPath := current + path
 */
static void
set_font_path(Display *dpy, const char *path, int special, int before, int after)
{
    char *directories = NULL;
    char **directoryList = NULL;
    unsigned int ndirs = 0;
    char **currentList = NULL;
    unsigned int ncurrent = 0;

    if (special) {
	if (strcmp(path, "default") == 0) {
	    XSetFontPath(dpy, NULL, 0);
	    return;
	}
	if (strcmp(path, "rehash") == 0) {
	    currentList = XGetFontPath(dpy, (int *) &ncurrent);
	    if (!currentList) {
		fprintf(stderr, "%s:  unable to get current font path.\n",
			progName);
		return;
	    }
	    XSetFontPath(dpy, currentList, (int) ncurrent);
	    XFreeFontPath(currentList);
	    return;
	}
	/*
	 * for now, fall though and process keyword and directory list for
	 * compatibility with previous versions.
	 */
    }

    /*
     * parse the path list.  If before or after is non-zero, we'll need
     * the current value.
     */

    if (before != 0 || after != 0) {
	currentList = XGetFontPath(dpy, (int *) &ncurrent);
	if (!currentList) {
	    fprintf(stderr, "%s:  unable to get old font path.\n", progName);
	    before = after = 0;
	}
    }

    {
	/* count the number of directories in path */
	const char *cp = path;

	ndirs = 1;
	while ((cp = strchr(cp, ',')) != NULL) {
	    ndirs++;
	    cp++;
	}
    }

    directoryList = (char **)malloc(ndirs * sizeof(char *));
    if (!directoryList)
	error("out of memory for font path directory list");

    directories = strdup(path);
    if (!directories)
        error("out of memory for font path directory string");
    else
    {
	/* mung the path and set directoryList pointers */
	unsigned int i = 0;
	char *cp = directories;

	directoryList[i++] = cp;
	while ((cp = strchr(cp, ',')) != NULL) {
	    directoryList[i++] = cp + 1;
	    *cp++ = '\0';
	}
	if (i != ndirs) {
	    fprintf(stderr,
		"%s: internal error, only parsed %d of %d directories.\n",
		progName, i, ndirs);
	    exit(EXIT_FAILURE);
	}
    }

    /*
     * now we have have parsed the input path, so we can set it
     */

    if (before == 0 && after == 0) {
	XSetFontPath(dpy, directoryList, (int) ndirs);
    }

    /* if adding to list, build a superset */
    if (before > 0 || after > 0) {
	unsigned int nnew = ndirs + ncurrent;
	char **newList = (char **)malloc(nnew * sizeof(char *));

	if (!newList)
	    error("out of memory");
	if (before > 0) {	       /* new + current */
	    memmove((char *)newList, (char *)directoryList,
                    (ndirs * sizeof(char *)));
	    memmove((char *)(newList + ndirs), (char *)currentList,
		    (ncurrent * sizeof(char *)));
	    XSetFontPath(dpy, newList, (int) nnew);
	} else if (after > 0) {
	    memmove((char *)newList, (char *)currentList,
		    (ncurrent * sizeof(char *)));
	    memmove((char *)(newList + ncurrent), (char *)directoryList,
		    (ndirs * sizeof(char *)));
	    XSetFontPath(dpy, newList,(int) nnew);
	}
	free((char *)newList);
    }

    /* if deleting from list, build one the same size */
    if (before < 0 || after < 0) {
	unsigned int i, j;
	unsigned int nnew = 0;
	char **newList = (char **)malloc(ncurrent * sizeof(char *));

	if (!newList)
	    error("out of memory");
	for (i = 0; i < ncurrent; i++) {
	    for (j = 0; j < ndirs; j++) {
		if (strcmp(currentList[i], directoryList[j]) == 0)
		    break;
	    }
	    /* if we ran out, then insert into new list */
	    if (j == ndirs)
		newList[nnew++] = currentList[i];
	}
	if (nnew == ncurrent) {
	    fprintf(stderr,
		    "%s:  warning, no entries deleted from font path.\n",
		    progName);
	}
	XSetFontPath(dpy, newList, (int) nnew);
	free((char *)newList);
    }

    free(directories);
    if (directoryList)
	free((char *)directoryList);
    if (currentList)
	XFreeFontPath(currentList);

    return;
}

static void
set_led(Display *dpy, int led, int led_mode)
{
    XKeyboardControl values;

    values.led_mode = led_mode;
    if (led != ALL) {
	values.led = led;
	XChangeKeyboardControl(dpy, KBLed | KBLedMode, &values);
    } else {
	XChangeKeyboardControl(dpy, KBLedMode, &values);
    }
    return;
}

static void
xkbset_led(Display *dpy, const char *led, int led_mode)
{
#ifndef XKB
    error("  xset was not built with XKB Extension support\n");
#else
    int xkbmajor = XkbMajorVersion, xkbminor = XkbMinorVersion;
    int xkbopcode, xkbevent, xkberror;
    Atom ledatom;

    if (XkbQueryExtension(dpy, &xkbopcode, &xkbevent, &xkberror,
			  &xkbmajor, &xkbminor)) {
	ledatom = XInternAtom(dpy, led, True);
	if ((ledatom != None) &&
	    XkbGetNamedIndicator(dpy, ledatom, NULL, NULL, NULL, NULL)) {
	    if (XkbSetNamedIndicator(dpy, ledatom, True,
				     led_mode, False, NULL) == False) {
		printf("Failed to set led named %s %s\n",
		       led, led_mode ? "on" : "off");
	    }
	} else {
	    fprintf(stderr,"%s: Invalid led name: %s\n", progName, led);
	}
    } else {
	printf("  Server does not have the XKB Extension\n");
    }
#endif
    return;
}

static void
set_mouse(Display *dpy, int acc_num, int acc_denom, int threshold)
{
    int do_accel = True, do_threshold = True;

    if (acc_num == DONT_CHANGE)	       /* what an incredible crock... */
	do_accel = False;
    if (threshold == DONT_CHANGE)
	do_threshold = False;
    if (acc_num < 0)		       /* shouldn't happen */
	acc_num = SERVER_DEFAULT;
    if (acc_denom <= 0)		       /* prevent divide by zero */
	acc_denom = SERVER_DEFAULT;
    if (threshold < 0)
	threshold = SERVER_DEFAULT;
    XChangePointerControl(dpy, do_accel, do_threshold, acc_num,
			  acc_denom, threshold);
    return;
}

static void
set_saver(Display *dpy, int mask, int value)
{
    int timeout, interval, prefer_blank, allow_exp;

    XGetScreenSaver(dpy, &timeout, &interval, &prefer_blank, &allow_exp);
    if (mask == TIMEOUT)
	timeout = value;
    if (mask == INTERVAL)
	interval = value;
    if (mask == PREFER_BLANK)
	prefer_blank = value;
    if (mask == ALLOW_EXP)
	allow_exp = value;
    if (mask == ALL) {
	timeout = SERVER_DEFAULT;
	interval = SERVER_DEFAULT;
	prefer_blank = DefaultBlanking;
	allow_exp = DefaultExposures;
    }
    XSetScreenSaver(dpy, timeout, interval, prefer_blank, allow_exp);
    if (mask == ALL && value == DEFAULT_TIMEOUT) {
	XGetScreenSaver(dpy, &timeout, &interval, &prefer_blank, &allow_exp);
	if (!timeout)
	    XSetScreenSaver(dpy, -DEFAULT_TIMEOUT, interval, prefer_blank,
			    allow_exp);
    }
    return;
}

static void
set_repeat(Display *dpy, int key, int auto_repeat_mode)
{
    XKeyboardControl values;

    values.auto_repeat_mode = auto_repeat_mode;
    if (key != ALL) {
	values.key = key;
	XChangeKeyboardControl(dpy, KBKey | KBAutoRepeatMode, &values);
    } else {
	XChangeKeyboardControl(dpy, KBAutoRepeatMode, &values);
    }
    return;
}

#ifdef XF86MISC
static void
set_repeatrate(Display *dpy, int delay, int rate)
{
    XF86MiscKbdSettings values;

    XF86MiscGetKbdSettings(dpy, &values);
    values.delay = delay;
    values.rate = rate;
    XF86MiscSetKbdSettings(dpy, &values);
    return;
}
#endif

#ifdef XKB
static void
xkbset_repeatrate(Display *dpy, int delay, int interval)
{
    XkbDescPtr xkb = XkbAllocKeyboard();

    if (!xkb)
	return;
    XkbGetControls(dpy, XkbRepeatKeysMask, xkb);
    xkb->ctrls->repeat_delay = delay;
    xkb->ctrls->repeat_interval = interval;
    XkbSetControls(dpy, XkbRepeatKeysMask, xkb);
    XkbFreeKeyboard(xkb, 0, True);
}
#endif

static void
set_pixels(Display *dpy, unsigned long *pixels, caddr_t * colors,
    int numpixels)
{
    XColor def;
    int scr = DefaultScreen(dpy);
    Visual *visual = DefaultVisual(dpy, scr);
    Colormap cmap = DefaultColormap(dpy, scr);
    unsigned long max_cells = (unsigned long) DisplayCells(dpy, scr);
    XVisualInfo viproto, *vip;
    int nvisuals = 0;
    const char *visual_type = NULL;
    int i;

    viproto.visualid = XVisualIDFromVisual(visual);
    vip = XGetVisualInfo(dpy, VisualIDMask, &viproto, &nvisuals);
    if (!vip) {
	fprintf(stderr, "%s: Can't get visual for visualID 0x%x\n",
		progName, (unsigned int)viproto.visualid);
	return;
    }

    switch (vip->class) {
    case GrayScale:
    case PseudoColor:
	break;
    case TrueColor:
	visual_type = "TrueColor";
	/* fall through */
    case DirectColor:
	max_cells *= max_cells * max_cells;
	break;
    case StaticGray:
	visual_type = "StaticGray";
	break;
    case StaticColor:
	visual_type = "StaticColor";
	break;
    default:
	fprintf(stderr, "%s:  unknown visual class type %d\n",
		progName, vip->class);
	numpixels = 0;
    }

    if (visual_type) {
	fprintf(stderr,
		"%s:  cannot set pixel values in read-only %s visuals\n",
		progName, visual_type);
    } else {
	for (i = 0; i < numpixels; i++) {
	    def.pixel = pixels[i];
	    if (def.pixel >= max_cells)
		fprintf(stderr,
			"%s:  pixel value %ld out of colormap range 0 through %ld\n",
			progName, def.pixel, max_cells - 1);
	    else {
		if (XParseColor(dpy, cmap, colors[i], &def))
		    XStoreColor(dpy, cmap, &def);
		else
		    fprintf(stderr, "%s:  invalid color \"%s\"\n", progName,
			    colors[i]);
	    }
	}
    }

    XFree((char *)vip);

    return;
}

static void
set_lock(Display *dpy, Bool onoff)
{
    XModifierKeymap *mods;

    mods = XGetModifierMapping(dpy);

    if (onoff)
	mods =
	    XInsertModifiermapEntry(mods, (KeyCode) XK_Caps_Lock,
				    LockMapIndex);
    else
	mods =
	    XDeleteModifiermapEntry(mods, (KeyCode) XK_Caps_Lock,
				    LockMapIndex);
    XSetModifierMapping(dpy, mods);
    XFreeModifiermap(mods);
    return;
}

#ifdef FONTCACHE
static Status
set_font_cache(Display *dpy, long himark, long lowmark, long balance)
{
    FontCacheSettings cs;
    Status status;

    cs.himark = himark * 1024;
    cs.lowmark = lowmark * 1024;
    cs.balance = balance;
    status = FontCacheChangeCacheSettings(dpy, &cs);

    return status;
}
#endif

static const char *
on_or_off(int val, int onval, const char *onstr,
    int offval, const char *offstr, char buf[], size_t bufsize)
{
    if (val == onval)
	return onstr;
    else if (val == offval)
	return offstr;

    buf[0] = '\0';
    snprintf(buf, bufsize, "<%d>", val);
    return buf;
}

/*  This is the information-getting function for telling the user what the
 *  current "xsettings" are.
 */
static void
query(Display *dpy)
{
    int scr = DefaultScreen(dpy);
    XKeyboardState values;
    int acc_num, acc_denom, threshold;
    int timeout, interval, prefer_blank, allow_exp;

#ifdef XF86MISC
    XF86MiscKbdSettings kbdinfo;
#endif
#ifdef XKB
    XkbDescPtr xkb;
    int xkbmajor = XkbMajorVersion, xkbminor = XkbMinorVersion;
    int xkbopcode, xkbevent, xkberror;
#endif
    char **font_path;
    int npaths;
    int i, j;
    char buf[20];		       /* big enough for 16 bit number */

    XGetKeyboardControl(dpy, &values);
    XGetPointerControl(dpy, &acc_num, &acc_denom, &threshold);
    XGetScreenSaver(dpy, &timeout, &interval, &prefer_blank, &allow_exp);
    font_path = XGetFontPath(dpy, &npaths);

    printf("Keyboard Control:\n");
    printf
	("  auto repeat:  %s    key click percent:  %d    LED mask:  %08lx\n",
	 on_or_off(values.global_auto_repeat, AutoRepeatModeOn, "on",
		   AutoRepeatModeOff, "off", buf, sizeof(buf)),
	 values.key_click_percent, values.led_mask);
#ifdef XKB
    if (XkbQueryExtension(dpy, &xkbopcode, &xkbevent, &xkberror, &xkbmajor,
			  &xkbminor)
	&& (xkb = XkbAllocKeyboard()) != NULL) {
	if (XkbGetNames(dpy, XkbIndicatorNamesMask, xkb) == Success) {
	    Atom iatoms[XkbNumIndicators];
	    char *iatomnames[XkbNumIndicators];
	    Bool istates[XkbNumIndicators];
	    int inds[XkbNumIndicators];
	    int activecount = 0;
	    int maxnamelen = 0;
	    int columnwidth;
	    int linewidth;

	    printf("  XKB indicators:\n");

	    for (i = 0, j = 0; i < XkbNumIndicators; i++) {
		if (xkb->names->indicators[i] != None) {
		    iatoms[j++] =  xkb->names->indicators[i];
		}
	    }

	    if (XGetAtomNames(dpy, iatoms, j, iatomnames)) {
		for (i = 0; i < j; i++) {
		    if (XkbGetNamedIndicator(dpy, iatoms[i], &inds[i],
					     &istates[i], NULL, NULL)) {
			int namelen = (int) strlen(iatomnames[i]);
			if (namelen > maxnamelen) {
			    maxnamelen = namelen;
			}
			activecount++;
		    } else {
			inds[i] = -1;
		    }
		}
	    }

	    if (activecount == 0) {
		printf("    None\n");
	    } else {

#define XKB_IND_FORMAT_CHARS 13 /* size of other chars in '    DD: X: off' */
#define MAX_LINE_WIDTH	     76

		columnwidth = maxnamelen + XKB_IND_FORMAT_CHARS;
		if (columnwidth > MAX_LINE_WIDTH) {
		    columnwidth = MAX_LINE_WIDTH;
		}

		for (i = 0, linewidth = 0; i < activecount ; i++) {
		    if (inds[i] != -1) {
			int spaces = columnwidth - XKB_IND_FORMAT_CHARS
			    - (int) strlen(iatomnames[i]);

			if (spaces < 0)
			    spaces = 0;

			linewidth += printf("    %02d: %s: %*s",
					    inds[i], iatomnames[i],
					    spaces + 3,
					    on_or_off(istates[i],
						      True,  "on ",
						      False, "off",
						      buf, sizeof(buf)));
		    }
		    if (linewidth > (MAX_LINE_WIDTH - columnwidth)) {
			printf("\n");
			linewidth = 0;
		    }
		}
		if (linewidth > 0) {
		    printf("\n");
		}
	    }
	}
	if (XkbGetControls(dpy, XkbRepeatKeysMask, xkb) == Success) {
	    printf("  auto repeat delay:  %d    repeat rate:  %d\n",
		   xkb->ctrls->repeat_delay,
		   1000 / xkb->ctrls->repeat_interval);
	}
    }
#ifdef XF86MISC
    else
#endif
#endif
#ifdef XF86MISC
    {
	int dummy;

	if (XF86MiscQueryExtension(dpy, &dummy, &dummy) &&
	    XF86MiscGetKbdSettings(dpy, &kbdinfo))
	    printf("  auto repeat delay:  %d    repeat rate:  %d\n",
	           kbdinfo.delay, kbdinfo.rate);
    }
#endif
    printf("  auto repeating keys:  ");
    for (i = 0; i < 4; i++) {
	if (i)
	    printf("                        ");
	for (j = 0; j < 8; j++) {
	    printf("%02x", (unsigned char)values.auto_repeats[i * 8 + j]);
	}
	printf("\n");
    }
    printf("  bell percent:  %d    bell pitch:  %d    bell duration:  %d\n",
	   values.bell_percent, values.bell_pitch, values.bell_duration);

    printf("Pointer Control:\n");
    printf("  acceleration:  %d/%d    threshold:  %d\n",
	   acc_num, acc_denom, threshold);

    printf("Screen Saver:\n");
    printf("  prefer blanking:  %s    ",
	   on_or_off(prefer_blank, PreferBlanking, "yes",
		     DontPreferBlanking, "no", buf, sizeof(buf)));
    printf("allow exposures:  %s\n",
	   on_or_off(allow_exp, AllowExposures, "yes",
		     DontAllowExposures, "no", buf, sizeof(buf)));
    printf("  timeout:  %d    cycle:  %d\n", timeout, interval);

    printf("Colors:\n");
    printf("  default colormap:  0x%lx    BlackPixel:  0x%lx    WhitePixel:  0x%lx\n",
	   DefaultColormap(dpy, scr), BlackPixel(dpy, scr), WhitePixel(dpy,
								       scr));

    printf("Font Path:\n");
    if (npaths) {
	printf("  %s", *font_path++);
	for (--npaths; npaths; npaths--)
	    printf(",%s", *font_path++);
	printf("\n");
    } else {
	printf("  (empty)\n");
    }

#ifdef MITMISC
    {
	int dummy;

	if (XMITMiscQueryExtension(dpy, &dummy, &dummy)) {
	    if (XMITMiscGetBugMode(dpy))
		printf("Bug Mode: compatibility mode is enabled\n");
	    else
		printf("Bug Mode: compatibility mode is disabled\n");
	}
    }
#endif
#ifdef DPMSExtension
    {

	int dummy;
	CARD16 standby, suspend, off;
	BOOL onoff;
	CARD16 state;

	printf("DPMS (Energy Star):\n");
	if (DPMSQueryExtension(dpy, &dummy, &dummy)) {
	    if (DPMSCapable(dpy)) {
		DPMSGetTimeouts(dpy, &standby, &suspend, &off);
		printf("  Standby: %d    Suspend: %d    Off: %d\n",
		       standby, suspend, off);
		DPMSInfo(dpy, &state, &onoff);
		if (onoff) {
		    printf("  DPMS is Enabled\n");
		    switch (state) {
		    case DPMSModeOn:
			printf("  Monitor is On\n");
			break;
		    case DPMSModeStandby:
			printf("  Monitor is in Standby\n");
			break;
		    case DPMSModeSuspend:
			printf("  Monitor is in Suspend\n");
			break;
		    case DPMSModeOff:
			printf("  Monitor is Off\n");
			break;
		    default:
			printf("  Unrecognized response from server\n");
		    }
		} else
		    printf("  DPMS is Disabled\n");
	    } else
		printf("  Display is not capable of DPMS\n");
	} else {
	    printf("  Server does not have the DPMS Extension\n");
	}
    }
#endif
#ifdef FONTCACHE
    {
	int dummy;
	FontCacheSettings cs;
	int himark, lowmark, balance;

	printf("Font cache:\n");
	if (FontCacheQueryExtension(dpy, &dummy, &dummy)) {
	    if (FontCacheGetCacheSettings(dpy, &cs)) {
		himark = cs.himark / 1024;
		lowmark = cs.lowmark / 1024;
		balance = cs.balance;
		printf("  hi-mark (KB): %d  low-mark (KB): %d  balance (%%): %d\n",
		       himark, lowmark, balance);
	    }
	} else {
	    printf("  Server does not have the FontCache Extension\n");
	}
    }
#endif
#ifdef XF86MISC
    {
	int dummy;
	int maj, min;
	XF86MiscFilePaths paths;

	if (XF86MiscQueryExtension(dpy, &dummy, &dummy) &&
	    XF86MiscQueryVersion(dpy, &maj, &min) &&
	    ((maj > 0) || (maj == 0 && min >= 7)) &&
	    XF86MiscGetFilePaths(dpy, &paths)) {
	    printf("File paths:\n");
	    printf("  Config file:  %s\n", paths.configfile);
	    printf("  Modules path: %s\n", paths.modulepath);
	    printf("  Log file:     %s\n", paths.logfile);
	}
    }
#endif

    return;
}

#ifdef FONTCACHE
/*
 *  query_cache_status()
 *
 *  This is the information-getting function for telling the user what the
 *  current settings and statistics are.
 */
static void
query_cache_status(Display *dpy)
{
    int dummy;
    FontCacheSettings cs;
    FontCacheStatistics cstats;
    int himark, lowmark, balance;

    if (FontCacheQueryExtension(dpy, &dummy, &dummy)) {
	if (FontCacheGetCacheSettings(dpy, &cs)) {
	    printf("font cache settings:\n");
	    himark = cs.himark / 1024;
	    lowmark = cs.lowmark / 1024;
	    balance = cs.balance;
	    printf("  hi-mark (KB): %d  low-mark (KB): %d  balance (%%): %d\n",
		   himark, lowmark, balance);
	}
	if (FontCacheGetCacheStatistics(dpy, &cstats)) {
	    printf("font cache statistics:\n");
	    printf("   cache purged: %ld\n", cstats.purge_runs);
	    printf("   cache status: %ld\n", cstats.purge_stat);
	    printf("  cache balance: %ld\n", cstats.balance);
	    printf("font cache entry statistics:\n");
	    printf("      hits: %ld\n", cstats.f.hits);
	    printf("  misshits: %ld\n", cstats.f.misshits);
	    printf("    purged: %ld\n", cstats.f.purged);
	    printf("     usage: %ld\n", cstats.f.usage);
	    printf("large bitmap cache entry statistics:\n");
	    printf("      hits: %ld\n", cstats.v.hits);
	    printf("  misshits: %ld\n", cstats.v.misshits);
	    printf("    purged: %ld\n", cstats.v.purged);
	    printf("     usage: %ld\n", cstats.v.usage);
	}
    } else {
	printf("Server does not have the FontCache Extension\n");
    }
}
#endif

/*  This is the usage function */

static void
usage(const char *fmt, ...)
{
    va_list ap;

    if (fmt) {
	fprintf(stderr, "%s:  ", progName);
	va_start(ap, fmt);
	vfprintf(stderr, fmt, ap);
	va_end(ap);
	fprintf(stderr, "\n\n");

    }

    fprintf(stderr, "usage:  %s [-display host:dpy] option ...\n%s", progName,
            "    To turn bell off:\n"
            "\t-b                b off               b 0\n"
            "    To set bell volume, pitch and duration:\n"
            "\t b [vol [pitch [dur]]]          b on\n"
#ifdef MITMISC
            "    To disable bug compatibility mode:\n"
            "\t-bc\n"
            "    To enable bug compatibility mode:\n"
            "\tbc\n"
#endif
            "    To turn keyclick off:\n"
            "\t-c                c off               c 0\n"
            "    To set keyclick volume:\n"
            "\t c [0-100]        c on\n"
#ifdef DPMSExtension
            "    To control Energy Star (DPMS) features:\n"
            "\t-dpms      Energy Star features off\n"
            "\t+dpms      Energy Star features on\n"
            "\t dpms [standby [suspend [off]]]     \n"
            "\t      force standby \n"
            "\t      force suspend \n"
            "\t      force off \n"
            "\t      force on \n"
            "\t      (also implicitly enables DPMS features) \n"
            "\t      a timeout value of zero disables the mode \n"
#endif
#ifdef FONTCACHE
            "    To control font cache:\n"
            "\t fc [hi-mark [low-mark [balance]]]\n"
            "\t    both mark values specified in KB\n"
            "\t    balance value specified in percent (10 - 90)\n"
            "    Show font cache statistics:\n"
            "\t fc s\n"
#endif
            "    To set the font path:\n"
            "\t fp= path[,path...]\n"
            "    To restore the default font path:\n"
            "\t fp default\n"
            "    To have the server reread font databases:\n"
            "\t fp rehash\n"
            "    To remove elements from font path:\n"
            "\t-fp path[,path...]  fp- path[,path...]\n"
            "    To prepend or append elements to font path:\n"
            "\t+fp path[,path...]  fp+ path[,path...]\n"
            "    To set LED states off or on:\n"
            "\t-led [1-32]         led off\n"
            "\t led [1-32]         led on\n"
#ifdef XKB
            "\t-led named 'name'   led off\n"
            "\t led named 'name'   led on\n"
#endif
            "    To set mouse acceleration and threshold:\n"
            "\t m [acc_mult[/acc_div] [thr]]    m default\n"
            "    To set pixel colors:\n"
            "\t p pixel_value color_name\n"
            "    To turn auto-repeat off or on:\n"
            "\t-r [keycode]        r off\n"
            "\t r [keycode]        r on\n"
#if defined(XF86MISC) || defined(XKB)
            "\t r rate [delay [rate]]\n"
#endif
            "    For screen-saver control:\n"
            "\t s [timeout [cycle]]  s default    s on\n"
            "\t s blank              s noblank    s off\n"
            "\t s expose             s noexpose\n"
            "\t s activate           s reset\n"
            "    For status information:  q\n"
            "    To print version: -version\n"
        );
    exit(EXIT_SUCCESS);
}

static void
error(const char *message)
{
    fprintf(stderr, "%s: %s\n", progName, message);
    exit(EXIT_FAILURE);
}

static int
local_xerror(Display *dpy, XErrorEvent *rep)
{
    if (rep->request_code == X_SetFontPath && rep->error_code == BadValue) {
	fprintf(stderr,
		"%s:  bad font path element (#%ld), possible causes are:\n",
		progName, rep->resourceid);
	fprintf(stderr,
                "    Directory does not exist or has wrong permissions\n"
                "    Directory missing fonts.dir\n"
                "    Incorrect font server address or syntax\n");
    } else if (rep->request_code == X_StoreColors) {
	switch (rep->error_code) {
	  case BadAccess:
	    fprintf(stderr,
		    "%s:  pixel not allocated read/write\n", progName);
	    break;
	  case BadValue:
	    fprintf(stderr,
		    "%s:  cannot store in pixel 0x%lx, invalid pixel number\n",
		    progName, rep->resourceid);
	    break;
	  default:
	    XmuPrintDefaultErrorMessage(dpy, rep, stderr);
	}
    } else
	XmuPrintDefaultErrorMessage(dpy, rep, stderr);

    error_status = -1;

    return (0);
}
@


1.7
log
@Update to xset 1.2.3
@
text
@d328 1
a328 2
			    usage("hi-mark must be greater than low-mark",
				  NULL);
@


1.6
log
@Update to xset 1.2.2
@
text
@a67 13
# ifdef WIN32
#  define BOOL wBOOL
#  ifdef Status
#   undef Status
#   define Status wStatus
#  endif
#  include <windows.h>
#  ifdef Status
#   undef Status
#   define Status int
#  endif
#  undef BOOL
# endif
d118 1
a118 1
static int is_number(char *arg, int maximum);
d123 1
a123 1
static void set_font_path(Display *dpy, char *path, int special,
d133 3
a135 2
static char *on_or_off(int val, int onval, char *onstr,
		       int offval, char *offstr, char buf[]);
d137 2
a138 2
static void usage(char *fmt, ...) _X_NORETURN;
static void error(char *message) _X_NORETURN;
d151 1
a151 1
    register char *arg;
d187 1
a187 1
		usage("missing argument to -display", NULL);
d189 3
d197 1
a197 1
	usage(NULL, NULL);	       /* replace with window interface */
d313 1
a313 1
			usage("hi-mark must be greater than 0", NULL);
d325 1
a325 1
			    usage("low-mark must be greater than 0", NULL);
d366 1
a366 1
		usage("missing fp= argument", NULL);
d374 1
a374 1
		usage("missing +fp argument", NULL);
d380 1
a380 1
		usage("missing fp+ argument", NULL);
d386 1
a386 1
		usage("missing -fp argument", NULL);
d392 1
a392 1
		usage("missing fp- argument", NULL);
d406 1
a406 1
		    usage("missing argument to led named", NULL);
d429 1
a429 1
		    usage("missing argument to -led named", NULL);
d546 1
a546 1
			usage("missing argument to dpms force", NULL);
a555 1
		     * On OS/2, use _sleep2()
d560 2
d563 1
a563 23
#ifdef SVR4
# ifdef sgi
#  define Usleep(us) sginap((us) / 1000)
# endif
#endif
#ifdef hpux
# ifdef _XPG4_EXTENDED
#  define Usleep(us) usleep((us))
# endif
#endif
#ifdef __UNIXOS2__
# define Usleep(us) _sleep2((us / 1000 > 0) ? us / 1000 : 1)
#endif
#ifdef WIN32
# define Usleep(us) Sleep(us)
#endif
#ifndef Usleep
# if defined(SYSV) || defined(SVR4)
#  define Usleep(us) sleep((us / 1000000 > 0) ? us / 1000000 : 1)
# else
#  define Usleep(us) usleep((us))
# endif
#endif
d739 1
a739 1
		usage("missing argument to p", NULL);
d744 1
a744 1
		pixels[numpixels] = atoi(arg);
d770 1
a770 1
is_number(char *arg, int maximum)
d772 1
a772 1
    register char *p;
d856 1
a856 1
set_font_path(Display *dpy, char *path, int special, int before, int after)
d858 1
d860 1
a860 1
    int ndirs = 0;
d862 1
a862 1
    int ncurrent = 0;
d870 1
a870 1
	    currentList = XGetFontPath(dpy, &ncurrent);
d876 1
a876 1
	    XSetFontPath(dpy, currentList, ncurrent);
d892 1
a892 1
	currentList = XGetFontPath(dpy, &ncurrent);
d901 1
a901 1
	register char *cp = path;
d914 4
d920 2
a921 2
	int i = 0;
	char *cp = path;
d941 1
a941 1
	XSetFontPath(dpy, directoryList, ndirs);
d946 1
a946 1
	int nnew = ndirs + ncurrent;
d953 1
a953 1
		    (unsigned)(ndirs * sizeof(char *)));
d955 2
a956 2
		    (unsigned)(ncurrent * sizeof(char *)));
	    XSetFontPath(dpy, newList, nnew);
d959 1
a959 1
		    (unsigned)(ncurrent * sizeof(char *)));
d961 2
a962 2
		    (unsigned)(ndirs * sizeof(char *)));
	    XSetFontPath(dpy, newList, nnew);
d969 2
a970 2
	int i, j;
	int nnew = 0;
d989 1
a989 1
	XSetFontPath(dpy, newList, nnew);
d993 1
d1150 1
a1150 1
    unsigned long max_cells = DisplayCells(dpy, scr);
d1153 1
a1153 1
    char *visual_type = NULL;
d1248 3
a1250 3
static char *
on_or_off(int val, int onval, char *onstr,
    int offval, char *offstr, char buf[])
d1258 1
a1258 1
    sprintf(buf, "<%d>", val);
d1294 3
a1296 3
	on_or_off(values.global_auto_repeat, AutoRepeatModeOn, "on",
	    AutoRepeatModeOff, "off", buf), values.key_click_percent,
	values.led_mask);
d1323 1
a1323 1
			int namelen = strlen(iatomnames[i]);
d1349 1
a1349 1
			    - strlen(iatomnames[i]);
d1359 2
a1360 1
						      False, "off", buf));
d1411 1
a1411 1
		     DontPreferBlanking, "no", buf));
d1414 1
a1414 1
		     DontAllowExposures, "no", buf));
d1576 1
a1576 1
usage(char *fmt, ...)
d1589 5
a1593 5
    fprintf(stderr, "usage:  %s [-display host:dpy] option ...\n", progName);
    fprintf(stderr, "    To turn bell off:\n");
    fprintf(stderr, "\t-b                b off               b 0\n");
    fprintf(stderr, "    To set bell volume, pitch and duration:\n");
    fprintf(stderr, "\t b [vol [pitch [dur]]]          b on\n");
d1595 9
a1603 9
    fprintf(stderr, "    To disable bug compatibility mode:\n");
    fprintf(stderr, "\t-bc\n");
    fprintf(stderr, "    To enable bug compatibility mode:\n");
    fprintf(stderr, "\tbc\n");
#endif
    fprintf(stderr, "    To turn keyclick off:\n");
    fprintf(stderr, "\t-c                c off               c 0\n");
    fprintf(stderr, "    To set keyclick volume:\n");
    fprintf(stderr, "\t c [0-100]        c on\n");
d1605 10
a1614 10
    fprintf(stderr, "    To control Energy Star (DPMS) features:\n");
    fprintf(stderr, "\t-dpms      Energy Star features off\n");
    fprintf(stderr, "\t+dpms      Energy Star features on\n");
    fprintf(stderr, "\t dpms [standby [suspend [off]]]     \n");
    fprintf(stderr, "\t      force standby \n");
    fprintf(stderr, "\t      force suspend \n");
    fprintf(stderr, "\t      force off \n");
    fprintf(stderr, "\t      force on \n");
    fprintf(stderr, "\t      (also implicitly enables DPMS features) \n");
    fprintf(stderr, "\t      a timeout value of zero disables the mode \n");
d1617 20
a1636 20
    fprintf(stderr, "    To control font cache:\n");
    fprintf(stderr, "\t fc [hi-mark [low-mark [balance]]]\n");
    fprintf(stderr, "\t    both mark values specified in KB\n");
    fprintf(stderr, "\t    balance value specified in percent (10 - 90)\n");
    fprintf(stderr, "    Show font cache statistics:\n");
    fprintf(stderr, "\t fc s\n");
#endif
    fprintf(stderr, "    To set the font path:\n");
    fprintf(stderr, "\t fp= path[,path...]\n");
    fprintf(stderr, "    To restore the default font path:\n");
    fprintf(stderr, "\t fp default\n");
    fprintf(stderr, "    To have the server reread font databases:\n");
    fprintf(stderr, "\t fp rehash\n");
    fprintf(stderr, "    To remove elements from font path:\n");
    fprintf(stderr, "\t-fp path[,path...]  fp- path[,path...]\n");
    fprintf(stderr, "    To prepend or append elements to font path:\n");
    fprintf(stderr, "\t+fp path[,path...]  fp+ path[,path...]\n");
    fprintf(stderr, "    To set LED states off or on:\n");
    fprintf(stderr, "\t-led [1-32]         led off\n");
    fprintf(stderr, "\t led [1-32]         led on\n");
d1638 2
a1639 2
    fprintf(stderr, "\t-led named 'name'   led off\n");
    fprintf(stderr, "\t led named 'name'   led on\n");
d1641 7
a1647 7
    fprintf(stderr, "    To set mouse acceleration and threshold:\n");
    fprintf(stderr, "\t m [acc_mult[/acc_div] [thr]]    m default\n");
    fprintf(stderr, "    To set pixel colors:\n");
    fprintf(stderr, "\t p pixel_value color_name\n");
    fprintf(stderr, "    To turn auto-repeat off or on:\n");
    fprintf(stderr, "\t-r [keycode]        r off\n");
    fprintf(stderr, "\t r [keycode]        r on\n");
d1649 1
a1649 1
    fprintf(stderr, "\t r rate [delay [rate]]\n");
d1651 8
a1658 6
    fprintf(stderr, "    For screen-saver control:\n");
    fprintf(stderr, "\t s [timeout [cycle]]  s default    s on\n");
    fprintf(stderr, "\t s blank              s noblank    s off\n");
    fprintf(stderr, "\t s expose             s noexpose\n");
    fprintf(stderr, "\t s activate           s reset\n");
    fprintf(stderr, "    For status information:  q\n");
d1663 1
a1663 1
error(char *message)
d1677 3
a1679 3
		"    Directory does not exist or has wrong permissions\n");
	fprintf(stderr, "    Directory missing fonts.dir\n");
	fprintf(stderr, "    Incorrect font server address or syntax\n");
@


1.5
log
@Update to xset 1.2.1
@
text
@a80 5
# ifndef HAVE_USLEEP
#  if defined(SVR4) && defined(sun)
#   include <sys/syscall.h>
#  endif
# endif
d149 2
a150 2
static void usage(char *fmt, ...);
static void error(char *message);
d553 3
a555 2
		} else if (i + 1 < argc && strcmp(arg, "force") == 0) {
		    i++;
a571 12
# ifdef sun
/* Anything to avoid linking with -lposix4 */
#  define Usleep(us) { \
		struct ts { \
			long	tv_sec; \
			long	tv_nsec; \
		} req; \
		req.tv_sec = 0; \
		req.tv_nsec = (us) * 1000;\
		syscall(SYS_nanosleep, &req, NULL); \
	}
# endif
d1441 1
a1441 1
    printf("  default colormap:  0x%lx    BlackPixel:  %ld    WhitePixel:  %ld\n",
@


1.4
log
@Update to xset master from X.Org git.

This brings manual page updates regarding the new mouse acceleration
code.
@
text
@a0 4
/* 
 * $Xorg: xset.c,v 1.6 2001/02/09 02:05:58 xorgcvs Exp $
 */

a25 1
/* $XFree86: xc/programs/xset/xset.c,v 3.31 2003/05/27 22:27:09 tsi Exp $ */
d571 1
a571 1
		    
d932 1
a932 1
     * parse the path list.  If before or after is non-zero, we'll need 
a1311 1
    int dummy;
d1422 8
a1429 4
    if (XF86MiscQueryExtension(dpy, &dummy, &dummy) &&
	XF86MiscGetKbdSettings(dpy, &kbdinfo))
	printf("  auto repeat delay:  %d    repeat rate:  %d\n",
	       kbdinfo.delay, kbdinfo.rate);
d1658 2
a1659 2
    fprintf(stderr, "\t    both mark values spcecified in KB\n");
    fprintf(stderr, "\t    balance value spcecified in percent (10 - 90)\n");
@


1.3
log
@update to xset 1.1.0. tested by naddy@@
@
text
@a52 4
#if defined(HAVE_X11_EXTENSIONS_PRINT_H)
# define BUILD_PRINTSUPPORT
#endif

a106 3
#ifdef BUILD_PRINTSUPPORT
# include <X11/extensions/Print.h>
#endif
a374 13
#ifdef BUILD_PRINTSUPPORT
	else if (strcmp(arg, "rehashprinterlist") == 0) {
	    /* rehash list of printers */
	    short dummy;

	    if (XpQueryVersion(dpy, &dummy, &dummy)) {
		XpRehashPrinterList(dpy);
	    } else {
		fprintf(stderr,
			"server does not have extension for rehashprinterlist option\n");
	    }
	}
#endif
a1366 3
		    Bool state;
		    int ind;

a1663 5
#endif
#ifdef BUILD_PRINTSUPPORT
    fprintf(stderr, "    To control Xprint features:\n");
    fprintf(stderr,
	"\t rehashprinterlist      Recomputes the list of available printers\n");
@


1.2
log
@Update to xset 1.0.4
@
text
@d144 1
a144 1
char *progName;
d146 1
a146 1
int error_status = 0;
d156 1
a198 4
#ifdef XF86MISC
    int miscpresent = 1;
    int major, minor;
#else
d200 2
a201 1
#endif
a202 1
    int xkbpresent = 1;
a205 1
    int xkbpresent = 0;
d443 9
d466 9
d748 1
a749 6
		    if (XF86MiscQueryVersion(dpy, &major, &minor)) {
			delay = KBDDELAY_DEFAULT, rate = KBDRATE_DEFAULT;
		    } else {
			miscpresent = 0;
		    }
#endif
d753 14
a766 3
			delay = XKBDDELAY_DEFAULT, rate = XKBDRATE_DEFAULT;
		    } else {
			xkbpresent = 0;
d769 1
a769 1
		    if (!miscpresent && !xkbpresent)
d1083 30
d1366 80
a1445 4
	&& (xkb = XkbAllocKeyboard()) != NULL
	&& XkbGetControls(dpy, XkbRepeatKeysMask, xkb) == Success)
	printf("  auto repeat delay:  %d    repeat rate:  %d\n",
	       xkb->ctrls->repeat_delay, 1000 / xkb->ctrls->repeat_interval);
d1706 4
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
#include <config.h>
d38 1
a38 1
#define DPMSExtension
d42 1
a42 1
#define MITMISC
d46 1
a46 1
#define XKB
d50 1
a50 1
#define XF86MISC
d54 1
a54 1
#define BUILD_PRINTSUPPORT
d58 1
a58 1
#define FONTCACHE
d73 1
a73 1
#include <X11/extensions/MITMisc.h>
d76 19
a94 17
#include <X11/extensions/dpms.h>
#ifdef WIN32
#define BOOL wBOOL
#ifdef Status
#undef Status
#define Status wStatus
#endif
#include <windows.h>
#ifdef Status
#undef Status
#define Status int
#endif
#undef BOOL
#endif
#if defined(SVR4) && defined(sun)
#include <sys/syscall.h>
#endif
a96 10
#include <X11/Xos.h>
#include <X11/Xfuncs.h>
#include <X11/Xlib.h>
#include <X11/keysym.h>
#include <X11/Xproto.h>
#include <X11/Xutil.h>
#include <X11/Xmu/Error.h>
#ifdef MITMISC
#include <X11/extensions/MITMisc.h>
#endif
d98 2
a99 2
#include <X11/extensions/xf86misc.h>
#include <X11/extensions/xf86mscstr.h>
d102 1
a102 1
#include <X11/XKBlib.h>
d105 2
a106 2
#include <X11/extensions/fontcache.h>
#include <X11/extensions/fontcacheP.h>
d112 1
a112 1
#include <X11/extensions/Print.h>
d131 2
a132 2
#define KBDDELAY_DEFAULT 500
#define KBDRATE_DEFAULT 30
d135 2
a136 2
#define XKBDDELAY_DEFAULT 660
#define XKBDRATE_DEFAULT (1000/40)
d153 1
a153 1
static void set_font_path(Display *dpy, char *path, int special, 
d159 1
a159 1
static void set_pixels(Display *dpy, unsigned long *pixels, caddr_t *colors, 
d162 2
a163 2
static char * on_or_off(int val, int onval, char *onstr, 
			int offval, char *offstr, char buf[]);
d168 1
d179 5
a183 4
register char *arg;
register int i;
int percent;
int acc_num, acc_denom, threshold;
d185 1
a185 1
CARD16 standby_timeout, suspend_timeout, off_timeout;
d187 3
a189 2
int key, auto_repeat_mode;
XKeyboardControl values;
d191 7
a197 6
unsigned long pixels[MAX_PIXEL_COUNT];
caddr_t colors[MAX_PIXEL_COUNT];
int numpixels = 0;
char *disp = NULL;
Display *dpy;
Bool hasargs = False;
d199 2
a200 2
int miscpresent = 1;
int major, minor;
d202 1
a202 1
int miscpresent = 0;
d205 3
a207 3
int xkbpresent = 1;
int xkbmajor = XkbMajorVersion, xkbminor = XkbMinorVersion;
int xkbopcode, xkbevent, xkberror;
d209 1
a209 1
int xkbpresent = 0;
d212 1
a212 1
long himark, lowmark, balance;
d215 10
a224 34
progName = argv[0];
for (i = 1; i < argc; i++) {
  arg = argv[i];
  if (strcmp (arg, "-display") == 0 || strcmp (arg, "-d") == 0) {
    if (++i >= argc) usage ("missing argument to -display", NULL);
    disp = argv[i];
  } else {
    hasargs = True;
  }
}
if (!hasargs) {
    usage (NULL, NULL);			/* replace with window interface */
}

dpy = XOpenDisplay(disp);  /*  Open display and check for success */
if (dpy == NULL) {
  fprintf(stderr, "%s:  unable to open display \"%s\"\n",
	  argv[0], XDisplayName (disp));
  exit(EXIT_FAILURE);
}
XSetErrorHandler (local_xerror);
for (i = 1; i < argc; ) {
  arg = argv[i++];
  if (strcmp (arg, "-display") == 0 || strcmp (arg, "-d") == 0) {
    ++i;					/* already dealt with */
    continue;
  } else if (*arg == '-' && *(arg + 1) == 'c'){ /* Does arg start with "-c"? */
    set_click(dpy, 0);           /* If so, turn click off and  */
  } 
  else if (*arg == 'c') {         /* Well, does it start with "c", then? */
    percent = SERVER_DEFAULT;		/* Default click volume. */
    if (i >= argc) {
	set_click (dpy, percent);	/* set click to default */
	break;
d226 2
a227 25
    arg = nextarg(i, argv);
    if (strcmp(arg, "on") == 0) {               /* Let click be default. */
      percent = DEFAULT_ON;
      i++;
    } 
    else if (strcmp(arg, "off") == 0) {  
      percent = 0;       /* Turn it off.          */
      i++;
    } 
    else if (is_number(arg, 100)) {
      percent = atoi(arg);  /* Set to spec. volume */
      i++;
    }
    set_click(dpy, percent);
  } 
  else if (strcmp(arg, "-b") == 0) {
    set_bell_vol(dpy, 0);           /* Then turn off bell.    */
  } 
  else if (strcmp(arg, "b") == 0) {
    percent = SERVER_DEFAULT;		/* Set bell to default. */
    if (i >= argc) {
	set_bell_vol (dpy, percent);	/* set bell to default */
	set_bell_pitch(dpy,percent);    /* set pitch to default */
	set_bell_dur(dpy,percent);      /* set duration to default */
	break;
d229 73
a301 26
    arg = nextarg(i, argv);
    if (strcmp(arg, "on") == 0) {               /* Let it stay that way.  */
      set_bell_vol(dpy, DEFAULT_ON);  /* set bell on */
      set_bell_pitch(dpy,percent);    /* set pitch to default */
      set_bell_dur(dpy,percent);      /* set duration to default */
      i++;
    } 
    else if (strcmp(arg, "off") == 0) {
      percent = 0;            /* Turn the bell off.     */
      set_bell_vol(dpy, percent);
      i++;
    } 
    else if (is_number(arg, 100)) {              /* If volume is given:    */
      percent = atoi(arg);    /* set bell appropriately.*/
      set_bell_vol(dpy, percent);
      i++;
      arg = nextarg(i, argv);

      if (is_number(arg, 32767)) {               /* If pitch is given:     */
	set_bell_pitch(dpy, atoi(arg));    /* set the bell.           */
	i++;

	arg = nextarg(i, argv);
	if (is_number(arg, 32767)) {              /* If duration is given:  */
	  set_bell_dur(dpy, atoi(arg));  /*  set the bell.      */
	  i++;
a302 5
      }
    }
    else
      set_bell_vol (dpy, percent);		/* set bell to default */
  }
d304 17
a320 14
  else if (strcmp(arg, "bc") == 0) {
      int dummy;
      if (XMITMiscQueryExtension(dpy, &dummy, &dummy))
	  XMITMiscSetBugMode(dpy, True);
      else
	  fprintf(stderr, "server does not have extension for bc option\n");
  }
  else if (strcmp(arg, "-bc") == 0) {
      int dummy;
      if (XMITMiscQueryExtension(dpy, &dummy, &dummy))
	  XMITMiscSetBugMode(dpy, False);
      else
	  fprintf(stderr, "server does not have extension for -bc option\n");
  }
d323 62
a384 57
  else if (strcmp(arg, "fc") == 0) {
      int dummy;
      FontCacheSettings cs;
      if (FontCacheQueryExtension(dpy, &dummy, &dummy)) {
	  FontCacheGetCacheSettings(dpy, &cs);
	  himark = cs.himark / 1024;
	  lowmark = cs.lowmark / 1024;
	  balance = cs.balance;
	  if (i >= argc) {
	      /* Set to server's values, and clear all cache in side effect */
	      set_font_cache(dpy, himark, lowmark, balance);
	      break;
	  }
	  arg = nextarg(i, argv);
	  if (is_number(arg, 32767)) {	/* If hi-mark is given: */
	      himark = atoi(arg);
	      i++;
	      if (himark <= 0) {
		  usage("hi-mark must be greater than 0", NULL);
	      }
	      if (i >= argc) {
		  lowmark = (himark * 70) / 100;
		  set_font_cache(dpy, himark, lowmark, balance);
		  break;
	      }
	      arg = nextarg(i, argv);
	      if (is_number(arg, 32767)) {	/* If low-mark is given: */
		  lowmark = atoi(arg);
		  i++;
		  if (lowmark <= 0) {
		      usage("low-mark must be greater than 0", NULL);
		  }
		  if (himark <= lowmark) {
		      usage("hi-mark must be greater than low-mark", NULL);
		  }
		  if (i >= argc) {
		      set_font_cache(dpy, himark, lowmark, balance);
		      break;
		  }
		  arg = nextarg(i, argv);
		  if (is_number(arg, 90)) {
		      balance = atoi(arg);
		      i++;
		      if (!(10 <= balance && balance <= 90)) {
			  usage("balance must be 10 to 90\n");
		      }
		      set_font_cache(dpy, himark, lowmark, balance);
		  }
	      }
	  } else if (strcmp(arg, "s") == 0 || strcmp(arg, "status") == 0) {
	      /* display cache status */
	      query_cache_status(dpy);
	  }
      } else {
	  fprintf(stderr, "server does not have extension for fc option\n");
      }
  }
d387 85
a471 86
  else if (strcmp(arg, "rehashprinterlist") == 0) { /* rehash list of printers */
      short dummy;
      if (XpQueryVersion(dpy, &dummy, &dummy)) {
          XpRehashPrinterList(dpy);
      } else {
          fprintf(stderr, "server does not have extension for rehashprinterlist option\n");
      }
  }
#endif
  else if (strcmp(arg, "fp") == 0) {	       /* set font path */
    if (i >= argc) {
	arg = "default";
    } else {
	arg = nextarg(i, argv);
    }
    set_font_path(dpy, arg, 1, 0, 0);	/* special argument */
    i++;
  }
  else if (strcmp(arg, "fp=") == 0) {	/* unconditionally set */
    if (i >= argc) {
	usage ("missing fp= argument", NULL);
    } else {
	arg = nextarg(i, argv);
    }
    set_font_path(dpy, arg, 0, 0, 0);	/* not special, set */
    i++;
  }
  else if (strcmp(arg, "+fp") == 0) {	       /* set font path */
    if (i >= argc) usage ("missing +fp argument", NULL);
    arg = nextarg(i, argv);
    set_font_path(dpy, arg, 0, 1, 0);	/* not special, prepend */
    i++;
  }
  else if (strcmp(arg, "fp+") == 0) {	       /* set font path */
    if (i >= argc) usage ("missing fp+ argument", NULL);
    arg = nextarg(i, argv);
    set_font_path(dpy, arg, 0, 0, 1);	/* not special, append */
    i++;
  }
  else if (strcmp(arg, "-fp") == 0) {	       /* set font path */
    if (i >= argc) usage ("missing -fp argument", NULL);
    arg = nextarg(i, argv);
    set_font_path(dpy, arg, 0, -1, 0);	/* not special, preremove */
    i++;
  }
  else if (strcmp(arg, "fp-") == 0) {	       /* set font path */
    if (i >= argc) usage ("missing fp- argument", NULL);
    arg = nextarg(i, argv);
    set_font_path(dpy, arg, 0, 0, -1);	/* not special, postremove */
    i++;
  }
  else if (strcmp(arg, "-led") == 0) {         /* Turn off one or all LEDs */
    values.led_mode = OFF;
    values.led = ALL;        /* None specified */
    if (i >= argc) {
	set_led(dpy, values.led, values.led_mode);
	break;
    }
    arg = nextarg(i, argv);
    if (is_number(arg, 32) && atoi(arg) > 0) {
      values.led = atoi(arg);
      i++;
    }
    set_led(dpy, values.led, values.led_mode);
  } 
  else if (strcmp(arg, "led") == 0) {         /* Turn on one or all LEDs  */
    values.led_mode = ON;
    values.led = ALL;
    if (i >= argc) {
	set_led (dpy, values.led, values.led_mode);	/* set led to def */
	break;
    }
    arg = nextarg(i, argv);
    if (strcmp(arg, "on") == 0) {
      i++;
    } 
    else if (strcmp(arg, "off") == 0) {       /*  ...except in this case. */
       values.led_mode = OFF;
      i++;
    }
    else if (is_number(arg, 32) && atoi(arg) > 0) {
      values.led = atoi(arg);
      i++;
    }
    set_led(dpy, values.led, values.led_mode);
  }
d473 27
a499 28
  else if (strcmp(arg, "m") == 0 || strcmp(arg, "mouse") == 0) {
    acc_num = SERVER_DEFAULT;		/* restore server defaults */
    acc_denom = SERVER_DEFAULT;
    threshold = SERVER_DEFAULT;
    if (i >= argc){
      set_mouse(dpy, acc_num, acc_denom, threshold);
      break;
    }
    arg = argv[i];
    if (strcmp(arg, "default") == 0) {
      i++;
    } 
    else if (*arg >= '0' && *arg <= '9') {
      acc_denom = 1;
      sscanf(arg, "%d/%d", &acc_num, &acc_denom);
      i++;
      if (i >= argc) {
	set_mouse(dpy, acc_num, acc_denom, threshold);
	break;
      }
      arg = argv[i];
      if (*arg >= '0' && *arg <= '9') {
	threshold = atoi(arg);  /* Set threshold as user specified.  */
	i++;
      }
    }
    set_mouse(dpy, acc_num, acc_denom, threshold);
  } 
d501 85
a585 74
  else if (strcmp(arg, "+dpms") == 0) {		/* turn on DPMS */
      int dummy;
      if (DPMSQueryExtension(dpy, &dummy, &dummy))
	  DPMSEnable(dpy);
      else
	  fprintf(stderr, "server does not have extension for +dpms option\n");
  }
  else if (strcmp(arg, "-dpms") == 0) {		/* shut off DPMS */
      int dummy;
      if (DPMSQueryExtension(dpy, &dummy, &dummy))
	  DPMSDisable(dpy);
      else
	  fprintf(stderr, "server does not have extension for -dpms option\n");

  }
  else if (strcmp(arg, "dpms") == 0) {		/* tune DPMS */
      int dummy;
      if (DPMSQueryExtension(dpy, &dummy, &dummy)) 
      {
	  DPMSGetTimeouts(dpy, &standby_timeout, &suspend_timeout,
			  &off_timeout);
	  if (i >= argc) {
	      DPMSEnable(dpy);
	      break; 
	  }
	  arg = argv[i];
	  if (*arg >= '0' && *arg <= '9') {
	      sscanf(arg, "%hu", &standby_timeout);
	      i++;
	      arg = argv[i];
	      if ((arg)&&(*arg >= '0' && *arg <= '9')) {
		  sscanf(arg, "%hu", &suspend_timeout);
		  i++;
		  arg = argv[i];
		  if ((arg)&&(*arg >= '0' && *arg <= '9')) {
		      sscanf(arg, "%hu", &off_timeout);
		      i++;
		      arg = argv[i];
		  }
	      }
	      if ((suspend_timeout != 0)&&(standby_timeout > suspend_timeout))
	      {
		  fprintf(stderr, "illegal combination of values\n");
		  fprintf(stderr, "  standby time of %d is greater than suspend time of %d\n", standby_timeout, suspend_timeout);
		  exit(EXIT_FAILURE);
	      }
	      if ((off_timeout != 0)&&(suspend_timeout > off_timeout))
	      {
		  fprintf(stderr, "illegal combination of values\n");
		  fprintf(stderr, "  suspend time of %d is greater than off time of %d\n", suspend_timeout, off_timeout);
		  exit(EXIT_FAILURE);
	      }
	      if ((suspend_timeout == 0)&&(off_timeout != 0)&&
		  (standby_timeout > off_timeout))
	      {
		  fprintf(stderr, "illegal combination of values\n");
		  fprintf(stderr, "  standby time of %d is greater than off time of %d\n", standby_timeout, off_timeout);
		  exit(EXIT_FAILURE);
	      }
	      DPMSEnable(dpy);
	      DPMSSetTimeouts(dpy, standby_timeout, suspend_timeout, off_timeout);
	  }
	  else if (i+1 < argc && strcmp(arg, "force") == 0) {
	      i++;
	      arg = argv[i];
	      /*
	       * The calls to usleep below are necessary to delay the actual
	       * DPMS mode setting briefly.  Without them, it's likely that the
	       * mode will be set between the Down and Up key transitions, in
	       * which case the Up transition may immediately turn the display
	       * back on.
	       *
	       * On OS/2, use _sleep2()
	       */
d621 1
d623 29
a651 33
	      if (strcmp(arg, "on") == 0) {
		  DPMSEnable(dpy);
		  DPMSForceLevel(dpy, DPMSModeOn);
		  i++;
	      }
	      else if (strcmp(arg, "standby") == 0) {
		  DPMSEnable(dpy);
		  Usleep(100000);
		  DPMSForceLevel(dpy, DPMSModeStandby);
		  i++;
	      }
	      else if (strcmp(arg, "suspend") == 0) {		  
		  DPMSEnable(dpy);
		  Usleep(100000);
		  DPMSForceLevel(dpy, DPMSModeSuspend);
		  i++;
	      }
	      else if (strcmp(arg, "off") == 0) {  
		  DPMSEnable(dpy);
		  Usleep(100000);
		  DPMSForceLevel(dpy, DPMSModeOff);
		  i++;
	      }
	      else { 
		  fprintf(stderr, "bad parameter %s\n", arg);
		  i++;
	      }    
	  }
      }
      else {
	  fprintf(stderr, "server does not have extension for dpms option\n");
      }
}
d653 75
a727 84
  else if (strcmp(arg, "s") == 0) {
    if (i >= argc) {
      set_saver(dpy, ALL, 0);  /* Set everything to default  */
      break;
    }
    arg = argv[i];
    if (strcmp(arg, "blank") == 0) {       /* Alter blanking preference. */
      set_saver(dpy, PREFER_BLANK, PreferBlanking);
      i++;
    }
    else if (strcmp(arg, "noblank") == 0) {     /*  Ditto.  */
      set_saver(dpy, PREFER_BLANK, DontPreferBlanking);
      i++;
    }
    else if (strcmp(arg, "expose") == 0) {       /* Alter exposure preference. */
      set_saver(dpy, ALLOW_EXP, AllowExposures);
      i++;
    }
    else if (strcmp(arg, "noexpose") == 0) {     /*  Ditto.  */
      set_saver(dpy, ALLOW_EXP, DontAllowExposures);
      i++;
    }
    else if (strcmp(arg, "off") == 0) {
      set_saver(dpy, TIMEOUT, 0);   /*  Turn off screen saver.  */
      i++;
      if (i >= argc)
	break;
      arg = argv[i];
      if (strcmp(arg, "off") == 0) {
	set_saver(dpy, INTERVAL, 0);
	i++;
      }
    }
    else if (strcmp(arg, "default") == 0) {    /*  Leave as default.       */
      set_saver(dpy, ALL, SERVER_DEFAULT);
      i++;
    } 
    else if (strcmp(arg, "on") == 0) {    /*  Turn on.       */
      set_saver(dpy, ALL, DEFAULT_TIMEOUT);
      i++;
    } 
    else if (strcmp(arg, "activate") == 0) { /* force it active */
	XActivateScreenSaver(dpy);
	i++;
    }
    else if (strcmp(arg, "reset") == 0) { /* force it inactive */
	XResetScreenSaver(dpy);
	i++;
    }
    else if (*arg >= '0' && *arg <= '9') {  /*  Set as user wishes.   */
      set_saver(dpy, TIMEOUT, atoi(arg));
      i++;
      if (i >= argc)
	break;
      arg = argv[i];
      if (*arg >= '0' && *arg <= '9') {
	set_saver(dpy, INTERVAL, atoi(arg));
	i++;
      }
    }
  } 
  else if (strcmp(arg, "-r") == 0) {        /* Turn off one or all autorepeats */
    auto_repeat_mode = OFF;
    key = ALL;          /* None specified */
    arg = argv[i];
    if (i < argc)
    if (is_number(arg, 255)) {
      key = atoi(arg);
      i++;
    }
    set_repeat(dpy, key, auto_repeat_mode);
  } 
  else if (strcmp(arg, "r") == 0) {         /* Turn on one or all autorepeats */
   auto_repeat_mode = ON;
   key = ALL;          /* None specified */
   arg = argv[i];
   if (i < argc) {
    if (strcmp(arg, "on") == 0) {
      i++;
    } 
    else if (strcmp(arg, "off") == 0) {       /*  ...except in this case */
      auto_repeat_mode = OFF;
      i++;
    }
d729 3
a731 2
    else if (strcmp(arg, "rate") == 0) {       /*  ...or this one. */
      int delay = 0, rate = 0;
d733 7
a739 6
      int rate_set = 0;
      if (XF86MiscQueryVersion(dpy, &major, &minor)) {
        delay=KBDDELAY_DEFAULT, rate=KBDRATE_DEFAULT;
      } else {
        miscpresent = 0;
      }
d742 25
a766 25
      if (XkbQueryExtension(dpy, &xkbopcode, &xkbevent, &xkberror, &xkbmajor,
				&xkbminor)) {
        delay=XKBDDELAY_DEFAULT, rate=XKBDRATE_DEFAULT;
      } else {
        xkbpresent = 0;
      }
#endif
      if (!miscpresent && !xkbpresent)
        fprintf(stderr,
            "server does not have extension for \"r rate\" option\n");
      i++;
      arg = argv[i];
      if (i < argc) {
        if (is_number(arg, 10000) && atoi(arg)>0) {
	  delay = atoi(arg);
	  i++;
          arg = argv[i];
	  if (i < argc) {
            if (is_number(arg, 255) && atoi(arg)>0) {
	      rate = atoi(arg);
	      i++;
            }
          }
        }
      }
d768 2
a769 2
      if (xkbpresent) {
        xkbset_repeatrate(dpy, delay, 1000/rate);
d771 1
a771 1
	rate_set = 1;
d773 1
a773 1
      }
d776 34
a809 4
      if (miscpresent && !rate_set) {
        set_repeatrate(dpy, delay, rate);
      }
#endif
a810 35
#endif
    else if (is_number(arg, 255)) {
      key = atoi(arg);
      i++;
    }
   } 
   set_repeat(dpy, key, auto_repeat_mode);
  } 
  else if (strcmp(arg, "p") == 0) {
    if (i + 1 >= argc)
      usage ("missing argument to p", NULL);
    arg = argv[i];
    if (numpixels >= MAX_PIXEL_COUNT)
	usage ("more than %d pixels specified", MAX_PIXEL_COUNT);
    if (*arg >= '0' && *arg <= '9')
      pixels[numpixels] = atoi(arg);
    else
      usage ("invalid pixel number %s", arg);
    i++;
    colors[numpixels] = argv[i];
    i++;
    numpixels++;
  }
  else if (strcmp(arg, "-k") == 0) {
    set_lock(dpy, OFF);
  }
  else if (strcmp(arg, "k") == 0) {
    set_lock(dpy, ON);
  }
  else if (strcmp(arg, "q") == 0 || strcmp(arg, "-q") == 0) {
    query(dpy);
  }
  else
    usage ("unknown option %s", arg);
}
d812 2
a813 2
if (numpixels)
    set_pixels(dpy, pixels, colors, numpixels);
d815 1
a815 1
XCloseDisplay (dpy);
d817 1
a817 1
exit(error_status);    /*  Done.  We can go home now.  */
d823 1
a823 1
	register char *p;
d825 6
a830 6
	if (arg[0] == '-' && arg[1] == '1' && arg[2] == '\0')
		return(1);
	for (p=arg; isdigit(*p); p++);
	if (*p || atoi(arg) > maximum)
		return(0); 
	return(1);
d838 6
a843 10
XKeyboardControl values;
XKeyboardState kbstate;
values.key_click_percent = percent;
if (percent == DEFAULT_ON)
  values.key_click_percent = SERVER_DEFAULT;
XChangeKeyboardControl(dpy, KBKeyClickPercent, &values);
if (percent == DEFAULT_ON) {
  XGetKeyboardControl(dpy, &kbstate);
  if (!kbstate.key_click_percent) {
    values.key_click_percent = -percent;
d845 8
a852 3
  }
}
return;
d858 6
a863 10
XKeyboardControl values;
XKeyboardState kbstate;
values.bell_percent = percent;
if (percent == DEFAULT_ON)
  values.bell_percent = SERVER_DEFAULT;
XChangeKeyboardControl(dpy, KBBellPercent, &values);
if (percent == DEFAULT_ON) {
  XGetKeyboardControl(dpy, &kbstate);
  if (!kbstate.bell_percent) {
    values.bell_percent = -percent;
d865 8
a872 3
  }
}
return;
d878 5
a882 4
XKeyboardControl values;
values.bell_pitch = pitch;
XChangeKeyboardControl(dpy, KBBellPitch, &values);
return;
d888 5
a892 4
XKeyboardControl values;
values.bell_duration = duration;
XChangeKeyboardControl(dpy, KBBellDuration, &values);
return;
d909 4
a912 2
    char **directoryList = NULL; int ndirs = 0;
    char **currentList = NULL; int ncurrent = 0;
d915 2
a916 2
	if (strcmp (path, "default") == 0) {
	    XSetFontPath (dpy, NULL, 0);
d919 2
a920 2
	if (strcmp (path, "rehash") == 0) {
	    currentList = XGetFontPath (dpy, &ncurrent);
d922 2
a923 2
		fprintf (stderr, "%s:  unable to get current font path.\n",
			 progName);
d926 2
a927 2
	    XSetFontPath (dpy, currentList, ncurrent);
	    XFreeFontPath (currentList);
d929 1
a929 1
	} 
d942 1
a942 1
	currentList = XGetFontPath (dpy, &ncurrent);
d944 1
a944 2
	    fprintf (stderr, "%s:  unable to get old font path.\n",
		     progName);
d960 3
a962 2
    directoryList = (char **) malloc (ndirs*sizeof (char *));
    if (!directoryList) error ("out of memory for font path directory list");
d975 4
a978 4
	    fprintf (stderr, 
		     "%s: internal error, only parsed %d of %d directories.\n",
		     progName, i, ndirs);
	    exit (EXIT_FAILURE);
d981 1
a981 1
	    
d987 1
a987 1
	XSetFontPath (dpy, directoryList, ndirs);
d993 10
a1002 9
	char **newList = (char **) malloc (nnew * sizeof (char *));
	
	if (!newList) error ("out of memory");
	if (before > 0) {		/* new + current */
	    memmove( (char *) newList, (char *) directoryList, 
		   (unsigned) (ndirs*sizeof (char *)));
	    memmove( (char *) (newList + ndirs), (char *) currentList, 
			(unsigned) (ncurrent*sizeof (char *)));
	    XSetFontPath (dpy, newList, nnew);
d1004 7
a1010 7
	    memmove( (char *) newList, (char *) currentList, 
		   (unsigned) (ncurrent*sizeof (char *)));
	    memmove( (char *) (newList + ncurrent), (char *) directoryList, 
		   (unsigned) (ndirs*sizeof (char *)));
	    XSetFontPath (dpy, newList, nnew);
	} 
	free ((char *) newList);
d1017 4
a1020 3
	char **newList = (char **) malloc (ncurrent * sizeof (char *));
	
	if (!newList) error ("out of memory");
d1023 2
a1024 2
		if (strcmp (currentList[i], directoryList[j]) == 0)
		  break;
d1027 2
a1028 1
	    if (j == ndirs) newList[nnew++] = currentList[i];
d1031 3
a1033 3
	    fprintf (stderr,
		     "%s:  warning, no entries deleted from font path.\n",
		     progName);
d1035 2
a1036 2
	XSetFontPath (dpy, newList, nnew);
	free ((char *) newList);
d1039 4
a1042 2
    if (directoryList) free ((char *) directoryList);
    if (currentList) XFreeFontPath (currentList);
d1050 10
a1059 10
  XKeyboardControl values;
  values.led_mode = led_mode;
  if (led != ALL) {
    values.led = led;
    XChangeKeyboardControl(dpy, KBLed | KBLedMode, &values);
  }
  else {
    XChangeKeyboardControl(dpy, KBLedMode, &values);
  }
  return;
d1065 1
a1065 1
int do_accel = True, do_threshold = True;
d1067 13
a1079 12
if (acc_num == DONT_CHANGE)		/* what an incredible crock... */
  do_accel = False;
if (threshold == DONT_CHANGE)
  do_threshold = False;
if (acc_num < 0) 			/* shouldn't happen */
  acc_num = SERVER_DEFAULT;
if (acc_denom <= 0)			/* prevent divide by zero */
  acc_denom = SERVER_DEFAULT;
if (threshold < 0) threshold = SERVER_DEFAULT;
XChangePointerControl(dpy, do_accel, do_threshold, acc_num,
		      acc_denom, threshold);
return;
d1085 2
a1086 16
  int timeout, interval, prefer_blank, allow_exp;
  XGetScreenSaver(dpy, &timeout, &interval, &prefer_blank, 
		  &allow_exp);
  if (mask == TIMEOUT) timeout = value;
  if (mask == INTERVAL) interval = value;
  if (mask == PREFER_BLANK) prefer_blank = value;
  if (mask == ALLOW_EXP) allow_exp = value;
  if (mask == ALL) {
    timeout = SERVER_DEFAULT;
    interval = SERVER_DEFAULT;
    prefer_blank = DefaultBlanking;
    allow_exp = DefaultExposures;
  }
  XSetScreenSaver(dpy, timeout, interval, prefer_blank, 
		  allow_exp);
  if (mask == ALL && value == DEFAULT_TIMEOUT) {
d1088 22
a1109 5
    if (!timeout)
      XSetScreenSaver(dpy, -DEFAULT_TIMEOUT, interval, prefer_blank, 
		      allow_exp);
  }
  return;
d1115 10
a1124 10
  XKeyboardControl values;
  values.auto_repeat_mode = auto_repeat_mode;
  if (key != ALL) {
    values.key = key;
    XChangeKeyboardControl(dpy, KBKey | KBAutoRepeatMode, &values);
  }
  else {
    XChangeKeyboardControl(dpy, KBAutoRepeatMode, &values);
  }
  return;
d1128 1
a1128 1
static void 
d1131 1
a1131 1
  XF86MiscKbdSettings values;
d1133 5
a1137 5
  XF86MiscGetKbdSettings(dpy, &values);
  values.delay = delay;
  values.rate = rate;
  XF86MiscSetKbdSettings(dpy, &values);
  return;
d1142 1
a1142 1
static void 
d1145 9
a1153 8
  XkbDescPtr xkb = XkbAllocKeyboard();
  if (!xkb)
    return;
  XkbGetControls(dpy, XkbRepeatKeysMask, xkb);
  xkb->ctrls->repeat_delay = delay;
  xkb->ctrls->repeat_interval = interval;
  XkbSetControls(dpy, XkbRepeatKeysMask, xkb);
  XkbFreeKeyboard(xkb, 0, True);
d1158 2
a1159 1
set_pixels(Display *dpy, unsigned long *pixels, caddr_t *colors, int numpixels)
d1161 21
a1181 21
  XColor def;
  int scr = DefaultScreen (dpy);
  Visual *visual = DefaultVisual (dpy, scr);
  Colormap cmap = DefaultColormap (dpy, scr);
  unsigned long max_cells = DisplayCells(dpy, scr);
  XVisualInfo viproto, *vip;
  int nvisuals = 0;
  char *visual_type = NULL;
  int i;

  viproto.visualid = XVisualIDFromVisual (visual);
  vip = XGetVisualInfo (dpy, VisualIDMask, &viproto, &nvisuals);
  if (!vip) {
      fprintf (stderr, "%s: Can't get visual for visualID 0x%x\n",
	       progName, (unsigned int)viproto.visualid);
      return;
  }

  switch (vip->class) {
      case GrayScale:
      case PseudoColor:
d1183 1
a1183 1
      case TrueColor:
d1186 1
a1186 1
      case DirectColor:
d1189 1
a1189 1
      case StaticGray:
d1192 1
a1192 1
      case StaticColor:
d1195 3
a1197 3
      default:
	fprintf (stderr, "%s:  unknown visual class type %d\n",
		 progName, vip->class);
d1199 1
a1199 1
  }
d1201 19
a1219 16
  if (visual_type) {
    fprintf (stderr, "%s:  cannot set pixel values in read-only %s visuals\n",
	     progName, visual_type);
  } else {
    for (i = 0; i < numpixels; i++) {
      def.pixel = pixels[i];
      if (def.pixel >= max_cells)
	fprintf(stderr, 
		"%s:  pixel value %ld out of colormap range 0 through %ld\n",
		progName, def.pixel, max_cells - 1);
      else {
        if (XParseColor (dpy, cmap, colors[i], &def))
	  XStoreColor(dpy, cmap, &def);
        else
	  fprintf (stderr, "%s:  invalid color \"%s\"\n", progName, colors[i]);
      }
a1220 1
  }
d1222 1
a1222 1
  XFree ((char *) vip);
d1224 1
a1224 1
  return;
d1230 1
a1230 2
  XModifierKeymap *mods;
  mods = XGetModifierMapping(dpy);
d1232 13
a1244 7
  if (onoff)
    mods = XInsertModifiermapEntry(mods, (KeyCode) XK_Caps_Lock, LockMapIndex);
  else
    mods = XDeleteModifiermapEntry(mods, (KeyCode) XK_Caps_Lock, LockMapIndex);
  XSetModifierMapping(dpy, mods);
  XFreeModifiermap(mods);
  return;
d1249 1
a1249 5
set_font_cache(dpy, himark, lowmark, balance)
    Display *dpy;
    long himark;
    long lowmark;
    long balance;
d1264 2
a1265 2
on_or_off(int val, int onval, char *onstr, 
	  int offval, char *offstr, char buf[])
d1267 2
a1268 2
    if (val == onval) 
      return onstr;
d1270 1
a1270 1
      return offstr;
d1273 1
a1273 1
    sprintf (buf, "<%d>", val);
a1276 1

d1283 6
a1288 5
int scr = DefaultScreen (dpy);
XKeyboardState values;
int acc_num, acc_denom, threshold;
int timeout, interval, prefer_blank, allow_exp;
int dummy;
d1290 1
a1290 1
XF86MiscKbdSettings kbdinfo;
d1293 20
a1312 18
XkbDescPtr xkb;
int xkbmajor = XkbMajorVersion, xkbminor = XkbMinorVersion;
int xkbopcode, xkbevent, xkberror;
#endif
char **font_path; int npaths;
int i, j;
char buf[20];				/* big enough for 16 bit number */

XGetKeyboardControl(dpy, &values);
XGetPointerControl(dpy, &acc_num, &acc_denom, &threshold);
XGetScreenSaver(dpy, &timeout, &interval, &prefer_blank, &allow_exp);
font_path = XGetFontPath(dpy, &npaths);

printf ("Keyboard Control:\n");
printf ("  auto repeat:  %s    key click percent:  %d    LED mask:  %08lx\n", 
	on_or_off (values.global_auto_repeat,
		   AutoRepeatModeOn, "on", AutoRepeatModeOff, "off", buf),
	values.key_click_percent, values.led_mask);
d1314 6
a1319 5
if (XkbQueryExtension(dpy, &xkbopcode, &xkbevent, &xkberror, &xkbmajor, &xkbminor)
    && (xkb = XkbAllocKeyboard()) != NULL
    && XkbGetControls(dpy, XkbRepeatKeysMask, xkb) == Success)
  printf ("  auto repeat delay:  %d    repeat rate:  %d\n",
          xkb->ctrls->repeat_delay,  1000/xkb->ctrls->repeat_interval);
d1321 1
a1321 1
else
d1325 44
a1368 43
if (XF86MiscQueryExtension(dpy, &dummy, &dummy) &&
    XF86MiscGetKbdSettings(dpy, &kbdinfo))
  printf ("  auto repeat delay:  %d    repeat rate:  %d\n",
          kbdinfo.delay, kbdinfo.rate);
#endif
printf ("  auto repeating keys:  ");
for (i = 0; i < 4; i++) {
    if (i) printf ("                        ");
    for (j = 0; j < 8; j++) {
	printf ("%02x", (unsigned char)values.auto_repeats[i*8 + j]);
    }
    printf ("\n");
}
printf ("  bell percent:  %d    bell pitch:  %d    bell duration:  %d\n",
	values.bell_percent, values.bell_pitch, values.bell_duration);

printf ("Pointer Control:\n");
printf ("  acceleration:  %d/%d    threshold:  %d\n",
	acc_num, acc_denom, threshold);

printf ("Screen Saver:\n");
printf ("  prefer blanking:  %s    ",
	on_or_off (prefer_blank, PreferBlanking, "yes",
		   DontPreferBlanking, "no", buf));
printf ("allow exposures:  %s\n",
	on_or_off (allow_exp, AllowExposures, "yes",
		   DontAllowExposures, "no", buf));
printf ("  timeout:  %d    cycle:  %d\n", timeout, interval);

printf ("Colors:\n");
printf ("  default colormap:  0x%lx    BlackPixel:  %ld    WhitePixel:  %ld\n",
	DefaultColormap (dpy, scr), 
	BlackPixel (dpy, scr), WhitePixel (dpy, scr));

printf ("Font Path:\n");
if (npaths) {
    printf( "  %s", *font_path++ );
    for( --npaths; npaths; npaths-- )
        printf( ",%s", *font_path++ );
    printf( "\n" );
} else {
    printf ("  (empty)\n");
}
d1371 9
a1379 7
{
    int dummy;
    if (XMITMiscQueryExtension(dpy, &dummy, &dummy)) {
	if (XMITMiscGetBugMode(dpy))
	    printf ("Bug Mode: compatibility mode is enabled\n");
	else
	    printf ("Bug Mode: compatibility mode is disabled\n");
a1380 1
}
d1383 40
a1422 43
{
    
      int dummy;
      CARD16 standby, suspend, off;
      BOOL onoff;
      CARD16 state;

      printf("DPMS (Energy Star):\n");
      if (DPMSQueryExtension(dpy, &dummy, &dummy)) {
	  if (DPMSCapable(dpy)) {
	  DPMSGetTimeouts(dpy, &standby, &suspend, &off);
	  printf ("  Standby: %d    Suspend: %d    Off: %d\n",
		  standby, suspend, off);
	  DPMSInfo(dpy, &state, &onoff);
	  if (onoff) {
	      printf("  DPMS is Enabled\n");
	      switch (state) {
		  case DPMSModeOn:
		       printf("  Monitor is On\n");
		       break;
		  case DPMSModeStandby:
		       printf("  Monitor is in Standby\n");
		       break;
		  case DPMSModeSuspend:
		       printf("  Monitor is in Suspend\n");
		       break;
		  case DPMSModeOff:
		       printf("  Monitor is Off\n");
		       break;
		  default:
		       printf("  Unrecognized response from server\n");
	      }
	  }
	  else
	      printf("  DPMS is Disabled\n");
          }
	  else
	      printf ("  Display is not capable of DPMS\n");  
      }
      else {
	  printf ("  Server does not have the DPMS Extension\n");
      }
}
d1425 16
a1440 13
{
    int dummy;
    FontCacheSettings cs;
    int himark, lowmark, balance;

    printf("Font cache:\n");
    if (FontCacheQueryExtension(dpy, &dummy, &dummy)) {
	if (FontCacheGetCacheSettings(dpy, &cs)) {
	    himark = cs.himark / 1024;
	    lowmark = cs.lowmark / 1024;
	    balance = cs.balance;
	    printf("  hi-mark (KB): %d  low-mark (KB): %d  balance (%%): %d\n",
		   himark, lowmark, balance);
a1441 2
    } else {
	printf("  Server does not have the FontCache Extension\n");
a1442 1
}
d1445 14
a1458 13
{
    int dummy;
    int maj, min;
    XF86MiscFilePaths paths;

    if (XF86MiscQueryExtension(dpy, &dummy, &dummy) &&
	XF86MiscQueryVersion(dpy, &maj, &min) &&
	((maj > 0) || (maj == 0 && min >= 7)) && 
	XF86MiscGetFilePaths(dpy, &paths)) {
	printf("File paths:\n");
	printf("  Config file:  %s\n", paths.configfile);
	printf("  Modules path: %s\n", paths.modulepath);
	printf("  Log file:     %s\n", paths.logfile);
a1459 1
}
d1462 1
a1462 1
return;
d1473 1
a1473 2
query_cache_status(dpy)
    Display *dpy;
d1519 1
a1519 1
	fprintf (stderr, "%s:  ", progName);
d1521 1
a1521 1
	vfprintf (stderr, fmt, ap);
d1523 2
a1524 2
	fprintf (stderr, "\n\n");
	
d1527 5
a1531 5
    fprintf (stderr, "usage:  %s [-display host:dpy] option ...\n", progName);
    fprintf (stderr, "    To turn bell off:\n");
    fprintf (stderr, "\t-b                b off               b 0\n");
    fprintf (stderr, "    To set bell volume, pitch and duration:\n");
    fprintf (stderr, "\t b [vol [pitch [dur]]]          b on\n");
d1533 9
a1541 9
    fprintf (stderr, "    To disable bug compatibility mode:\n");
    fprintf (stderr, "\t-bc\n");
    fprintf (stderr, "    To enable bug compatibility mode:\n");
    fprintf (stderr, "\tbc\n");
#endif
    fprintf (stderr, "    To turn keyclick off:\n");
    fprintf (stderr, "\t-c                c off               c 0\n");
    fprintf (stderr, "    To set keyclick volume:\n");
    fprintf (stderr, "\t c [0-100]        c on\n");
d1543 10
a1552 10
    fprintf (stderr, "    To control Energy Star (DPMS) features:\n");
    fprintf (stderr, "\t-dpms      Energy Star features off\n");
    fprintf (stderr, "\t+dpms      Energy Star features on\n");
    fprintf (stderr, "\t dpms [standby [suspend [off]]]     \n");
    fprintf (stderr, "\t      force standby \n");
    fprintf (stderr, "\t      force suspend \n");
    fprintf (stderr, "\t      force off \n");
    fprintf (stderr, "\t      force on \n");
    fprintf (stderr, "\t      (also implicitly enables DPMS features) \n");
    fprintf (stderr, "\t      a timeout value of zero disables the mode \n");
d1555 6
a1560 6
    fprintf (stderr, "    To control font cache:\n");
    fprintf (stderr, "\t fc [hi-mark [low-mark [balance]]]\n");
    fprintf (stderr, "\t    both mark values spcecified in KB\n");
    fprintf (stderr, "\t    balance value spcecified in percent (10 - 90)\n");
    fprintf (stderr, "    Show font cache statistics:\n");
    fprintf (stderr, "\t fc s\n");
d1563 24
a1586 23
    fprintf (stderr, "    To control Xprint features:\n");
    fprintf (stderr, "\t rehashprinterlist      Recomputes the list of available printers\n");
#endif
    fprintf (stderr, "    To set the font path:\n" );
    fprintf (stderr, "\t fp= path[,path...]\n" );
    fprintf (stderr, "    To restore the default font path:\n");
    fprintf (stderr, "\t fp default\n");
    fprintf (stderr, "    To have the server reread font databases:\n");
    fprintf (stderr, "\t fp rehash\n");
    fprintf (stderr, "    To remove elements from font path:\n");
    fprintf (stderr, "\t-fp path[,path...]  fp- path[,path...]\n");
    fprintf (stderr, "    To prepend or append elements to font path:\n");
    fprintf (stderr, "\t+fp path[,path...]  fp+ path[,path...]\n");
    fprintf (stderr, "    To set LED states off or on:\n");
    fprintf (stderr, "\t-led [1-32]         led off\n");
    fprintf (stderr, "\t led [1-32]         led on\n");
    fprintf (stderr, "    To set mouse acceleration and threshold:\n");
    fprintf (stderr, "\t m [acc_mult[/acc_div] [thr]]    m default\n");
    fprintf (stderr, "    To set pixel colors:\n");
    fprintf (stderr, "\t p pixel_value color_name\n");
    fprintf (stderr, "    To turn auto-repeat off or on:\n");
    fprintf (stderr, "\t-r [keycode]        r off\n");
    fprintf (stderr, "\t r [keycode]        r on\n");
d1588 1
a1588 1
    fprintf (stderr, "\t r rate [delay [rate]]\n");
d1590 6
a1595 6
    fprintf (stderr, "    For screen-saver control:\n");
    fprintf (stderr, "\t s [timeout [cycle]]  s default    s on\n");
    fprintf (stderr, "\t s blank              s noblank    s off\n");
    fprintf (stderr, "\t s expose             s noexpose\n");
    fprintf (stderr, "\t s activate           s reset\n");
    fprintf (stderr, "    For status information:  q\n");
d1602 1
a1602 1
    fprintf( stderr, "%s: %s\n", progName, message );
d1606 1
a1606 2

static int 
d1613 4
a1616 3
	fprintf(stderr,"    Directory does not exist or has wrong permissions\n");
	fprintf(stderr,"    Directory missing fonts.dir\n");
	fprintf(stderr,"    Incorrect font server address or syntax\n");
d1628 2
a1629 2
	default:
	    XmuPrintDefaultErrorMessage (dpy, rep, stderr);
d1632 1
a1632 1
	XmuPrintDefaultErrorMessage (dpy, rep, stderr);
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xet 1.0.3
@
text
@d90 2
a91 4
#ifndef HAVE_USLEEP
# if defined(SVR4) && defined(sun)
#  include <sys/syscall.h>
# endif
a577 3
#ifdef HAVE_USLEEP
# define Usleep(us) usleep((us))
#else
a612 1
#endif /* HAVE_USLEEP */
@

