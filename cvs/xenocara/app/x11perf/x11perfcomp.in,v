head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.18
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2011.08.28.10.45.18;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update to x11perf 1.5.4
@
text
@#! /bin/sh
#
# Collects multiple outputs of x11perf.  Just feed it a list of files, each
# containing the output from an x11perf run, and this shell will extract the
# object/second information and show it in tabular form.  An 80-column line
# is big enough to compare 4 different servers.
#
# This script normally uses the results from $1 to extract the test label
# descriptions, so you can run x11perf on a subset of the test and then
# compare the results.  But note that x11perffill requires the labels file
# to be a superset of the x11perf results file.  If you run into an ugly
# situation in which none of the servers completes the desired tests
# (quite possible on non-DEC servers :), you can use -l <filename> as $1 and
# $2 to force x11perfcomp to use the labels stored in file $2.  (You can run
# x11perf with the -labels option to generate such a file.)
#
# Mark Moraes, University of Toronto <moraes@@csri.toronto.edu>
# Joel McCormack, DEC Western Research Lab <joel@@decwrl.dec.com>
#

PATH="@@x11perfcompdir@@:/bin:/usr/bin:$PATH"
export PATH

MKTEMP="@@MKTEMP@@"

set -e
if [ "x$MKTEMP" != "x" ] && [ -x "$MKTEMP" ] ; then
    tmp=`$MKTEMP -p /tmp -d rates.XXXXXX`
    if [ "x$tmp" = "x" ]; then exit 1 ; fi
else
    tmp=${TMPDIR-/tmp}/rates.$$
    mkdir $tmp || exit 1
fi
trap "rm -rf $tmp" 0 1 2 15
mkdir $tmp/rates
ratio=
allfiles=
# Include relative rates in output?  Report only relative rates?
case $1 in
-r|-a)
	ratio=1
	shift;
	;;
-ro)
	ratio=2
	shift;
	;;
esac
# Get either the provided label file, or construct one from all the
# files given.
case $1 in
-l)	cp $2 $tmp/labels
	shift; shift
	;;
*)	for file in "$@@"; do
		awk '$2 == "reps" || $2 == "trep" { print $0; next; }' $file |
		sed 's/^.*: //' |
		sed 's/ /_/g' |
		awk 'NR > 1 	{ printf ("%s %s\n", prev, $0); } \
				{ prev = $0; }'
	done | tsort 2>/dev/null | sed 's/_/ /g' > $tmp/labels
	;;
esac
# Go through all files, and create a corresponding rate file for each
n=1
for i
do
# Get lines with average numbers, fill in any tests that may be missing
# then extract the rate field
	base=`basename $i`
	(echo "     $n  "
	 echo '--------'
	 awk '$2 == "reps" || $2 == "trep" { \
		line = $0; \
		next; \
	    } \
	    NF == 0 && line != "" { \
		print line; \
		line=""; \
		next; \
	    } \
	 ' $i > $tmp/$n.avg
	 fillblnk $tmp/$n.avg $tmp/labels |
	 sed 's/( *\([0-9]*\)/(\1/'   |
	 awk '$2 == "reps" || $2 == "trep" { \
						n = substr($6,2,length($6)-7); \
						printf "%8s\n", n; \
					   }'
	) > $tmp/rates/$n
	echo "$n: $i"
	allfiles="$allfiles$tmp/rates/$n "
	n=`expr $n + 1`
done
case x$ratio in
x)
	ratio=/bin/cat
	;;
x1)
	ratio="perfboth $n"
	;;
*)
	ratio="perfratio $n"
	;;
esac
echo ''
(echo Operation; echo '---------'; cat $tmp/labels) |
paste $allfiles - | sed 's/	/  /g' | $ratio
rm -rf $tmp
@
