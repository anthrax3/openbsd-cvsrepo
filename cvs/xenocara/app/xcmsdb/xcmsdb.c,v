head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.2
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.05.10.10.00.29;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	P7OFLiPgFO0uvveh;

1.3
date	2012.02.18.09.29.41;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.23.20.50.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.30.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.30.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcmsdb 1.0.5
@
text
@/* $Xorg: xcmsdb.c,v 1.3 2000/08/17 19:54:13 cpqbld Exp $ */

/*
 * (c) Copyright 1990 Tektronix Inc.
 * 	All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in
 * supporting documentation, and that the name of Tektronix not be used
 * in advertising or publicity pertaining to distribution of the software
 * without specific, written prior permission.
 *
 * Tektronix disclaims all warranties with regard to this software, including
 * all implied warranties of merchantability and fitness, in no event shall
 * Tektronix be liable for any special, indirect or consequential damages or
 * any damages whatsoever resulting from loss of use, data or profits,
 * whether in an action of contract, negligence or other tortious action,
 * arising out of or in connection with the use or performance of this
 * software.
 *
 *
 *	NAME
 *		xcmsdb.c
 *
 *	DESCRIPTION
 *		Program to load, query or remove the Screen Color
 *		Characterization Data from the root window of the screen.
 *
 */
/* $XFree86: xc/programs/xcmsdb/xcmsdb.c,v 1.5 2001/01/17 23:45:19 dawes Exp $ */

/*
 *      INCLUDES
 */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xos.h>
#include <ctype.h>

#include "SCCDFile.h"

static void QuerySCCDataRGB(Display *dpy, Window root);
static void RemoveSCCData(Display *dpy, Window root, int colorFlag);
static unsigned long _XcmsGetElement(int format, char **pValue,
				     unsigned long *pCount);
static int _XcmsGetProperty(Display *pDpy, Window w, Atom property,
			    int *pFormat, unsigned long *pNItems,
			    unsigned long *pNBytes, char **pValue);


static char *ProgramName;

static void
Syntax (int exitcode)
{
    fprintf (stderr,
	     "usage:  %s [-options ...] [filename]\n\n%s",
	     ProgramName,
	     "where options include:\n"
	     "    -display host:dpy[.scrn]     display to use\n"
	     "    -format [ 32 | 16 | 8 ]      property format\n"
	     "    -query                       query Screen Color Characterization Data\n"
	     "    -remove                      remove Screen Color Characterization Data\n"
#ifdef GRAY
	     "    -color                       use color as default\n");
	     "    -gray                        use gray-scale as default\n");
#endif /* GRAY */
	     "    -version                     print program version\n"
	     "\n");
    exit (exitcode);
}

static void
MissingArg (const char *option)
{
    fprintf (stderr, "%s: %s requires an argument\n", ProgramName, option);
    Syntax (1);
}

static Bool
optionmatch(const char *opt, const char *arg, int minlen)
{
    int arglen;

    if (strcmp(opt, arg) == 0) {
	return(True);
    }

    if ((arglen = strlen(arg)) >= (int)strlen(opt) || arglen < minlen) {
	return(False);
    }

    if (strncmp (opt, arg, arglen) == 0) {
	return(True);
    }

    return(False);
}

int
main(int argc, char *argv[])
{
    Display *dpy;
    int i;
    char *displayname = NULL;
    char *filename = NULL;
    int query = 0;
    int remove = 0;
    int load = 0;
    int color = -1;
    int targetFormat = 32;

    ProgramName = argv[0];

    for (i = 1; i < argc; i++) {
	char *arg = argv[i];

	if (arg[0] == '-') {
	    if (arg[1] == '\0') {
		filename = NULL;
		continue;
	    } else if (optionmatch ("-help", arg, 1)) {
		Syntax (0);
		/* doesn't return */
	    } else if (optionmatch ("-display", arg, 1)) {
		if (++i >= argc) MissingArg ("-display");
		displayname = argv[i];
		continue;
	    } else if (optionmatch ("-format", arg, 1)) {
		if (++i >= argc) MissingArg ("-format");
		targetFormat = atoi(argv[i]);
		if (targetFormat != 32 && targetFormat != 16 &&
			targetFormat != 8) {
		    fprintf (stderr, "%s: invalid value for -format: %d\n",
			     ProgramName, targetFormat);
		    Syntax (1);
		}
		continue;
	    } else if (optionmatch ("-query", arg, 1)) {
		query = 1;
		continue;
	    } else if (optionmatch ("-remove", arg, 1)) {
		remove = 1;
		continue;
#ifdef GRAY
	    } else if (optionmatch ("-color", arg, 1)) {
		color = 1;
		continue;
	    } else if (optionmatch ("-gray", arg, 1)) {
		color = 0;
		continue;
#endif /* GRAY */
	    } else if (optionmatch ("-version", arg, 1)) {
		puts (PACKAGE_STRING);
		exit (0);
	    }
	    fprintf (stderr, "%s: unrecognized option '%s'\n",
		     ProgramName, arg);
	    Syntax (1);
	} else {
	    load = 1;
	    filename = arg;
	}
    }

    /* Open display  */
    if (!(dpy = XOpenDisplay (displayname))) {
      fprintf (stderr, "%s:  Can't open display '%s'\n",
	       ProgramName, XDisplayName(displayname));
      exit (1);
    }

    if (query || remove) {
	load = 0;
    }

    if (load) {
	LoadSCCData(dpy, DefaultScreen(dpy), filename, targetFormat);
    }

    if (query) {
	if (color != 0)
	    QuerySCCDataRGB(dpy, RootWindow(dpy, DefaultScreen(dpy)));
#ifdef GRAY
	if (color != 1)
	    QuerySCCDataGray(dpy, RootWindow(dpy, DefaultScreen(dpy)));
#endif /* GRAY */
    }

    if (remove) {
	RemoveSCCData(dpy, RootWindow(dpy, DefaultScreen(dpy)), color);
    }

    XCloseDisplay(dpy);
    exit (0);
    /*NOTREACHED*/
}


static Atom
ParseAtom(Display *dpy, const char *name, int only_flag)
{
    return(XInternAtom(dpy, name, only_flag));
}


/*
 *	NAME
 *		PrintTableType0
 *
 *	SYNOPSIS
 */
static void
PrintTableType0(int format, char **pChar, unsigned long *pCount)
/*
 *	DESCRIPTION
 *
 *	RETURNS
 *		XcmsFailure if failed.
 *		XcmsSuccess if succeeded.
 *
 */
{
    unsigned int nElements;
    unsigned short hValue;
    XcmsFloat fValue;

    nElements = _XcmsGetElement(format, pChar, pCount) + 1;
    printf ("\t    length:%d\n", nElements);

    switch (format) {
      case 8:
	while (nElements--) {
	    /* 0xFFFF/0xFF = 0x101 */
	    hValue = _XcmsGetElement (format, pChar, pCount) * 0x101;
	    fValue = _XcmsGetElement (format, pChar, pCount)
		    / (XcmsFloat)255.0;
	    printf ("\t\t0x%x\t%8.5f\n", hValue, fValue);
	}
	break;
      case 16:
	while (nElements--) {
	    hValue = _XcmsGetElement (format, pChar, pCount);
	    fValue = _XcmsGetElement (format, pChar, pCount)
		    / (XcmsFloat)65535.0;
	    printf ("\t\t0x%x\t%8.5f\n", hValue, fValue);
	}
	break;
      case 32:
	while (nElements--) {
	    hValue = _XcmsGetElement (format, pChar, pCount);
	    fValue = _XcmsGetElement (format, pChar, pCount)
		    / (XcmsFloat)4294967295.0;
	    printf ("\t\t0x%x\t%8.5f\n", hValue, fValue);
	}
	break;
      default:
	return;
    }
}


/*
 *	NAME
 *		PrintTableType1
 *
 *	SYNOPSIS
 */
static void
PrintTableType1(int format, char **pChar, unsigned long *pCount)
/*
 *	DESCRIPTION
 *
 *	RETURNS
 *		XcmsFailure if failed.
 *		XcmsSuccess if succeeded.
 *
 */
{
    int count;
    unsigned int max_index;
    unsigned short hValue;
    XcmsFloat fValue;

    max_index = _XcmsGetElement(format, pChar, pCount);
    printf ("\t    length:%d\n", max_index + 1);

    switch (format) {
      case 8:
	for (count = 0; count < max_index+1; count++) {
	    hValue = (count * 65535) / max_index;
	    fValue = _XcmsGetElement (format, pChar, pCount)
		    / (XcmsFloat)255.0;
	    printf ("\t\t0x%x\t%8.5f\n", hValue, fValue);
	}
	break;
      case 16:
	for (count = 0; count < max_index+1; count++) {
	    hValue = (count * 65535) / max_index;
	    fValue = _XcmsGetElement (format, pChar, pCount)
		    / (XcmsFloat)65535.0;
	    printf ("\t\t0x%x\t%8.5f\n", hValue, fValue);
	}
	break;
      case 32:
	for (count = 0; count < max_index+1; count++) {
	    hValue = (count * 65535) / max_index;
	    fValue = _XcmsGetElement (format, pChar, pCount)
		    / (XcmsFloat)4294967295.0;
	    printf ("\t\t0x%x\t%8.5f\n", hValue, fValue);
	}
	break;
      default:
	return;
    }
}


/*
 *      NAME
 *		QuerySCCData - Query for the SCC data on the root window
 *
 *      SYNOPSIS
 */
static void
QuerySCCDataRGB(Display *dpy, Window root)
/*
 *      DESCRIPTION
 *
 *      RETURNS
 *		None
 */
{
    char *property_return, *pChar;
    int  i, j;
    int  count, format, cType, nTables;
    unsigned long nitems, nbytes_return;
    Atom MatricesAtom, CorrectAtom;
    VisualID visualID;
    XVisualInfo vinfo_template, *vinfo_ret;
    int nvis;
    static const char *visual_strings[] = {
	"StaticGray",
	"GrayScale",
	"StaticColor",
	"PseudoColor",
	"TrueColor",
	"DirectColor"
	};

    /*
     * Get Matrices
     */
    MatricesAtom = ParseAtom (dpy, XDCCC_MATRIX_ATOM_NAME, True);
    if (MatricesAtom != None) {
	if (_XcmsGetProperty (dpy, root, MatricesAtom, &format, &nitems,
			  &nbytes_return, &property_return) == XcmsFailure) {
	    format = 0;
	} else if (nitems != 18) {
	    printf ("Property %s had invalid length of %ld\n",
		    XDCCC_MATRIX_ATOM_NAME, nitems);
	    if (property_return) {
		XFree (property_return);
	    }
	    return;
	}
    }
    if (MatricesAtom == None || !format) {
	printf ("Could not find property %s\n", XDCCC_MATRIX_ATOM_NAME);
    } else if (format != 32) {
	printf ("Data in property %s not in 32 bit format\n",
		XDCCC_MATRIX_ATOM_NAME);
    } else {
	pChar = property_return;
	printf ("Screen: %d\n", DefaultScreen(dpy));
	printf ("Querying property %s\n", XDCCC_MATRIX_ATOM_NAME);
	printf ("\tXYZtoRGB matrix :\n");
	for (i = 0; i < 3; i++) {
	    printf ("\t");
	    for (j = 0; j < 3; j++) {
		printf ("\t%8.5f",
			(long)_XcmsGetElement(format, &pChar, &nitems)
			/ (XcmsFloat) XDCCC_NUMBER);
	    }
	    printf ("\n");
	}
	printf ("\tRGBtoXYZ matrix :\n");
	for (i = 0; i < 3; i++) {
	    printf ("\t");
	    for (j = 0; j < 3; j++) {
		printf ("\t%8.5f",
			(long) _XcmsGetElement(format, &pChar, &nitems)
			/ (XcmsFloat) XDCCC_NUMBER);
	    }
	    printf ("\n");
	}
	XFree (property_return);
    }


    /*
     * Get Intensity Tables
     */
    CorrectAtom = XInternAtom (dpy, XDCCC_CORRECT_ATOM_NAME, True);
    if (CorrectAtom != None) {
	if (_XcmsGetProperty (dpy, root, CorrectAtom, &format, &nitems,
			  &nbytes_return, &property_return) == XcmsFailure) {
	    format = 0;
	} else if (nitems <= 0) {
            printf ("Property %s had invalid length of %ld\n",
		    XDCCC_CORRECT_ATOM_NAME, nitems);
	    if (property_return) {
		XFree (property_return);
	    }
	    return;
	}
    }
    if (CorrectAtom == None || !format) {
	printf ("Could not find property %s\n", XDCCC_CORRECT_ATOM_NAME);
    } else {
	printf ("\nQuerying property %s\n", XDCCC_CORRECT_ATOM_NAME);
	pChar = property_return;

	while (nitems) {
	    switch (format) {
	      case 8:
		/*
		 * Must have at least:
		 *		VisualID0
		 *		VisualID1
		 *		VisualID2
		 *		VisualID3
		 *		type
		 *		count
		 *		length
		 *		intensity1
		 *		intensity2
		 */
		if (nitems < 9) {
		    goto IntensityTblError;
		}
		count = 3;
		break;
	      case 16:
		/*
		 * Must have at least:
		 *		VisualID0
		 *		VisualID3
		 *		type
		 *		count
		 *		length
		 *		intensity1
		 *		intensity2
		 */
		if (nitems < 7) {
		    goto IntensityTblError;
		}
		count = 1;
		break;
	      case 32:
		/*
		 * Must have at least:
		 *		VisualID0
		 *		type
		 *		count
		 *		length
		 *		intensity1
		 *		intensity2
		 */
		if (nitems < 6) {
		    goto IntensityTblError;
		}
		count = 0;
		break;
	      default:
		goto IntensityTblError;
	    }

	    /*
	     * Get VisualID
	     */
	    visualID = _XcmsGetElement(format, &pChar, &nitems);
	    /* add the depth, class, and bits info in output */
	    vinfo_template.visualid = visualID;
	    vinfo_ret = XGetVisualInfo(dpy, VisualIDMask, &vinfo_template,
				       &nvis);
	    while (count--) {
		visualID = visualID << format;
		visualID |= _XcmsGetElement(format, &pChar, &nitems);
	    }

	    if (vinfo_ret != NULL) {
		printf
		 ("\n\tVisualID: 0x%lx class: %s depth: %d bits_per_rgb: %d\n",
		  visualID, visual_strings[vinfo_ret->class],
		  vinfo_ret->depth, vinfo_ret->bits_per_rgb);
	    }
	    else
	    printf ("\n\tVisualID: 0x%lx\n", visualID);
	    XFree(vinfo_ret);
	    cType = _XcmsGetElement(format, &pChar, &nitems);
	    printf ("\ttype: %d\n", cType);
	    nTables = _XcmsGetElement(format, &pChar, &nitems);
	    printf ("\tcount: %d\n", nTables);

	    switch (cType) {
	      case 0:
		/* Red Table should always exist */
		printf ("\tRed Conversion Table:\n");
		PrintTableType0(format, &pChar, &nitems);
		if (nTables > 1) {
		    printf ("\tGreen Conversion Table:\n");
		    PrintTableType0(format, &pChar, &nitems);
		    printf ("\tBlue Conversion Table:\n");
		    PrintTableType0(format, &pChar, &nitems);
		}
		break;
	      case 1:
		/* Red Table should always exist */
		printf ("\tRed Conversion Table:\n");
		PrintTableType1(format, &pChar, &nitems);
		if (nTables > 1) {
		    printf ("\tGreen Conversion Table:\n");
		    PrintTableType1(format, &pChar, &nitems);
		    printf ("\tBlue Conversion Table:\n");
		    PrintTableType1(format, &pChar, &nitems);
		}
	        break;
	      default:
		goto IntensityTblError;
	    }
	}
	XFree (property_return);
    }
    return;

IntensityTblError:
    XFree (property_return);
    printf("Fatal error in %s property\n", XDCCC_CORRECT_ATOM_NAME);
}


#ifdef GRAY

/*
 *      NAME
 *		QuerySCCDataGray - Query for the SCC data on the root window
 *
 *      SYNOPSIS
 */
int
QuerySCCDataGray(Display *dpy, Window root)
/*
 *      DESCRIPTION
 *
 *      RETURNS
 *		None
 */
{
    char *property_return, *pChar;
    int  j;
    int  count, format, cType;
    unsigned long  nitems, nbytes_return;
    Atom MatricesAtom, CorrectAtom;
    VisualID visualID;

    MatricesAtom = ParseAtom (dpy, XDCCC_SCREENWHITEPT_ATOM_NAME, True);
    if (MatricesAtom != None) {
	if (_XcmsGetProperty (dpy, root, MatricesAtom, &format, &nitems,
			  &nbytes_return, &property_return)  == XcmsFailure) {
	    format = 0;
	} else if (nitems != 3) {
	    printf ("Property %s had invalid length of %d\n",
		    XDCCC_SCREENWHITEPT_ATOM_NAME, nitems);
	    if (property_return) {
		XFree (property_return);
	    }
	    return;
	}
    }
    if (MatricesAtom == None || !format) {
	printf ("Could not find property %s\n", XDCCC_SCREENWHITEPT_ATOM_NAME);
    } else {
	pChar = property_return;
	printf ("\nQuerying property %s\n", XDCCC_SCREENWHITEPT_ATOM_NAME);
	printf ("\tWhite Point XYZ :\n");
	printf ("\t");
	for (j = 0; j < 3; j++) {
	    printf ("\t%8.5lf",
			(long) _XcmsGetElement(format, &pChar, &nitems) /
			(XcmsFloat) XDCCC_NUMBER);
	}
	printf ("\n");
	XFree (property_return);
    }

    CorrectAtom = XInternAtom (dpy, XDCCC_GRAY_CORRECT_ATOM_NAME, True);
    if (CorrectAtom != None) {
	if (_XcmsGetProperty (dpy, root, CorrectAtom, &format, &nitems,
			  &nbytes_return, &property_return) == XcmsFailure) {
	    format = 0;
	} else if (nitems <= 0) {
            printf ("Property %s had invalid length of %d\n",
		    XDCCC_GRAY_CORRECT_ATOM_NAME, nitems);
	    if (property_return) {
		XFree (property_return);
	    }
	    return;
	}
    }
    if (CorrectAtom == None || !format) {
	printf ("Could not find property %s\n", XDCCC_GRAY_CORRECT_ATOM_NAME);
    } else {
	printf ("\nQuerying property %s\n\n", XDCCC_GRAY_CORRECT_ATOM_NAME);
	pChar = property_return;

	while (nitems) {
	    switch (format) {
	      case 8:
		/*
		 * Must have at least:
		 *		VisualID0
		 *		VisualID1
		 *		VisualID2
		 *		VisualID3
		 *		type
		 *		count
		 *		length
		 *		intensity1
		 *		intensity2
		 */
		if (nitems < 9) {
		    goto IntensityTblError;
		}
		count = 3;
		break;
	      case 16:
		/*
		 * Must have at least:
		 *		VisualID0
		 *		VisualID3
		 *		type
		 *		count
		 *		length
		 *		intensity1
		 *		intensity2
		 */
		if (nitems < 7) {
		    goto IntensityTblError;
		}
		count = 1;
		break;
	      case 32:
		/*
		 * Must have at least:
		 *		VisualID0
		 *		type
		 *		count
		 *		length
		 *		intensity1
		 *		intensity2
		 */
		if (nitems < 6) {
		    goto IntensityTblError;
		}
		count = 0;
		break;
	      default:
		goto IntensityTblError;
		break;
	    }

	    /*
	     * Get VisualID
	     */
	    visualID = _XcmsGetElement(format, &pChar, &nitems);
	    while (count--) {
		visualID = visualID << format;
		visualID |= _XcmsGetElement(format, &pChar, &nitems);
	    }

	    printf ("\n\tVisualID: 0x%lx\n", visualID);
	    cType = _XcmsGetElement(format, &pChar, &nitems);
	    printf ("\ttype: %d\n", cType);
	    printf ("\tGray Conversion Table:\n");
	    switch (cType) {
	      case 0:
		PrintTableType0(format, &pChar, &nitems);
		break;
	      case 1:
		PrintTableType1(format, &pChar, &nitems);
		break;
	      default:
		goto IntensityTblError;
	    }
	}
	XFree (property_return);
    }
    return;
IntensityTblError:
    XFree (property_return);
    printf("Fatal error in %s property\n", XDCCC_CORRECT_ATOM_NAME);
}
#endif /* GRAY */


/*
 *      NAME
 *		RemoveSCCData - Remove for the SCC data on the root window
 *
 *      SYNOPSIS
 */
static void
RemoveSCCData(Display *dpy, Window root, int colorFlag)
/*
 *      DESCRIPTION
 *
 *      RETURNS
 *		None
 */
{
    unsigned char *ret_prop;
    unsigned long ret_len, ret_after;
    int  ret_format, status = -1;
    Atom MatricesAtom, CorrectAtom, ret_atom;

    if (colorFlag != 0) {
	MatricesAtom = ParseAtom (dpy, XDCCC_MATRIX_ATOM_NAME, True);
	if (MatricesAtom != None) {
	    status = XGetWindowProperty (dpy, root, MatricesAtom, 0, 8192,
			False, XA_INTEGER, &ret_atom, &ret_format, &ret_len,
			&ret_after, &ret_prop);
	}
	if (MatricesAtom == None || status != Success || !ret_format) {
	    printf ("Could not find property %s\n", XDCCC_MATRIX_ATOM_NAME);
	} else {
	    printf ("Deleting property %s\n", XDCCC_MATRIX_ATOM_NAME);
	    XDeleteProperty (dpy, root, MatricesAtom);
	    XFree ((char *)ret_prop);
	}

	CorrectAtom = XInternAtom (dpy, XDCCC_CORRECT_ATOM_NAME, True);
	if (CorrectAtom != None) {
	    status = XGetWindowProperty (dpy, root, CorrectAtom, 0, 8192,
			False, XA_INTEGER, &ret_atom, &ret_format, &ret_len,
			&ret_after, &ret_prop);
	}
	if (CorrectAtom == None || status != Success || !ret_format) {
	    printf ("Could not find property %s\n", XDCCC_CORRECT_ATOM_NAME);
	} else {
	    printf ("Deleting property %s\n", XDCCC_CORRECT_ATOM_NAME);
	    XDeleteProperty (dpy, root, CorrectAtom);
	    XFree ((char *)ret_prop);
	}
    }
#ifdef GRAY
    if (colorFlag != 1) {
	MatricesAtom = ParseAtom (dpy, XDCCC_SCREENWHITEPT_ATOM_NAME, True);
	if (MatricesAtom != None) {
	    status = XGetWindowProperty (dpy, root, MatricesAtom, 0, 8192,
			False, XA_INTEGER, &ret_atom, &ret_format, &ret_len,
			&ret_after, &ret_prop);
	}
	if (MatricesAtom == None || status != Success || !ret_format) {
	    printf ("Could not find property %s\n", XDCCC_SCREENWHITEPT_ATOM_NAME);
	} else {
	    printf ("Deleting property %s\n", XDCCC_SCREENWHITEPT_ATOM_NAME);
	    XDeleteProperty (dpy, root, MatricesAtom);
	    XFree ((char *)ret_prop);
	}

	CorrectAtom = XInternAtom (dpy, XDCCC_GRAY_CORRECT_ATOM_NAME, True);
	if (CorrectAtom != None) {
	    status = XGetWindowProperty (dpy, root, CorrectAtom, 0, 8192,
			False, XA_INTEGER, &ret_atom, &ret_format, &ret_len,
			&ret_after, &ret_prop);
	}
	if (CorrectAtom == None || status != Success || !ret_format) {
	    printf ("Could not find property %s\n", XDCCC_GRAY_CORRECT_ATOM_NAME);
	} else {
	    printf ("Deleting property %s\n", XDCCC_GRAY_CORRECT_ATOM_NAME);
	    XDeleteProperty (dpy, root, CorrectAtom);
	    XFree ((char *)ret_prop);
	}
    }
#endif /* GRAY */
}

static unsigned long
_XcmsGetElement(int format, char **pValue, unsigned long *pCount)
/*
 *	DESCRIPTION
 *	    Get the next element from the property and return it.
 *	    Also increment the pointer the amount needed.
 *
 *	Returns
 *	    unsigned long
 */
{
    unsigned long value;

    switch (format) {
      case 32:
	value = *((unsigned long *)(*pValue)) & 0xFFFFFFFF;
	*pValue += sizeof(unsigned long);
	*pCount -= 1;
	break;
      case 16:
	value = *((unsigned short *)(*pValue));
	*pValue += sizeof(unsigned short);
	*pCount -= 1;
	break;
      case 8:
	value = *((unsigned char *) (*pValue));
	*pValue += 1;
	*pCount -= 1;
	break;
      default:
	value = 0;
	break;
    }
    return(value);
}


/*
 *	NAME
 *		_XcmsGetProperty -- Determine the existance of a property
 *
 *	SYNOPSIS
 */
static int
_XcmsGetProperty(Display *pDpy, Window w, Atom property, int *pFormat,
		 unsigned long *pNItems, unsigned long *pNBytes,
		 char **pValue)
/*
 *	DESCRIPTION
 *
 *	Returns
 *	    0 if property does not exist.
 *	    1 if property exists.
 */
{
    char *prop_ret;
    int format_ret;
    long len = 6516;
    unsigned long nitems_ret, after_ret;
    Atom atom_ret;
    int xgwp_ret;

    while (True) {
	xgwp_ret = XGetWindowProperty (pDpy, w, property, 0, len, False,
				       XA_INTEGER, &atom_ret, &format_ret,
				       &nitems_ret, &after_ret,
				       (unsigned char **)&prop_ret);
	if (xgwp_ret == Success && after_ret > 0) {
	    len += nitems_ret * (format_ret >> 3);
	    XFree (prop_ret);
	} else {
	    break;
	}
    }
    if (xgwp_ret != Success || format_ret == 0 || nitems_ret == 0) {
	/* the property does not exist or is of an unexpected type or
           getting window property failed */
	return(XcmsFailure);
    }

    *pFormat = format_ret;
    *pNItems = nitems_ret;
    *pNBytes = nitems_ret * (format_ret >> 3);
    *pValue = prop_ret;
    return(XcmsSuccess);
}
@


1.3
log
@Update to xcmsdb 1.0.4
@
text
@d28 1
a28 1
 *		Program to load, query or remove the Screen Color 
d38 4
d53 1
a53 1
static unsigned long _XcmsGetElement(int format, char **pValue, 
d55 2
a56 2
static int _XcmsGetProperty(Display *pDpy, Window w, Atom property, 
			    int *pFormat, unsigned long *pNItems, 
d63 1
a63 1
Syntax (void)
d65 8
a72 13
    fprintf (stderr, 
	     "usage:  %s [-options ...] [filename]\n\n",
	     ProgramName);
    fprintf (stderr, 
	     "where options include:\n");
    fprintf (stderr, 
	     "    -display host:dpy[.scrn]     display to use\n");
    fprintf (stderr, 
	     "    -format [ 32 | 16 | 8 ]      property format\n");
    fprintf (stderr, 
	     "    -query                       query Screen Color Characterization Data\n");
    fprintf (stderr, 
	     "    -remove                      remove Screen Color Characterization Data\n");
a73 1
    fprintf (stderr, 
a74 1
    fprintf (stderr, 
d77 1
a77 1
    fprintf (stderr, 
d79 8
a86 1
    exit (1);
d89 2
a90 2
static Bool 
optionmatch(char *opt, char *arg, int minlen)
d105 1
a105 1
    
d132 1
a132 1
		Syntax ();
d135 1
a135 1
		if (++i >= argc) Syntax ();
d139 1
a139 1
		if (++i >= argc) Syntax ();
d142 5
a146 1
			targetFormat != 8) Syntax();
d162 7
a168 2
	    }
	    Syntax ();
d175 1
a175 1
    /* Open display  */ 
d210 1
a210 1
ParseAtom(Display *dpy, char *name, int only_flag)
d351 1
a351 1
    static char *visual_strings[] = {
d376 1
a376 1
    } 
d390 1
a390 1
		printf ("\t%8.5f", 
d400 1
a400 1
		printf ("\t%8.5f", 
d494 1
a494 1
	    vinfo_ret = XGetVisualInfo(dpy, VisualIDMask, &vinfo_template, 
d502 1
a502 1
		printf 
d541 1
a541 1
	}    
d543 1
a543 1
    }    
d589 1
a589 1
    } 
d598 2
a599 2
	    printf ("\t%8.5lf", 
			(long) _XcmsGetElement(format, &pChar, &nitems) / 
d705 1
a705 1
	}    
d707 1
a707 1
    }    
d733 1
a733 1
    int  ret_format;
d739 2
a740 2
	    XGetWindowProperty (dpy, root, MatricesAtom, 0, 8192, False,
			XA_INTEGER, &ret_atom, &ret_format, &ret_len, 
d742 2
a743 2
	} 
	if (MatricesAtom == None || !ret_format) {
d753 2
a754 2
	    XGetWindowProperty (dpy, root, CorrectAtom, 0, 8192, False, 
			XA_INTEGER, &ret_atom, &ret_format, &ret_len, 
d757 1
a757 1
	if (CorrectAtom == None || !ret_format) {
d769 2
a770 2
	    XGetWindowProperty (dpy, root, MatricesAtom, 0, 8192, False,
			XA_INTEGER, &ret_atom, &ret_format, &ret_len, 
d772 2
a773 2
	} 
	if (MatricesAtom == None || !ret_format) {
d783 2
a784 2
	    XGetWindowProperty (dpy, root, CorrectAtom, 0, 8192, False, 
			XA_INTEGER, &ret_atom, &ret_format, &ret_len, 
d787 1
a787 1
	if (CorrectAtom == None || !ret_format) {
d799 1
a799 1
_XcmsGetElement(int format, char **pValue, unsigned long *pCount) 
d842 3
a844 3
_XcmsGetProperty(Display *pDpy, Window w, Atom property, int *pFormat, 
		 unsigned long *pNItems, unsigned long *pNBytes, 
		 char **pValue) 
d858 8
a865 6
    
    while (XGetWindowProperty (pDpy, w, property, 0, len, False, 
			       XA_INTEGER, &atom_ret, &format_ret, 
			       &nitems_ret, &after_ret, 
			       (unsigned char **)&prop_ret)) {
	if (after_ret > 0) {
d872 3
a874 2
    if (format_ret == 0 || nitems_ret == 0) { 
	/* the property does not exist or is of an unexpected type */
@


1.2
log
@update to xcmsdb 1.0.2
@
text
@d169 1
a169 4
    if (load && query) {
	load = 0;
    }
    if (load && remove) {
d173 1
a173 1
    if (!query && !remove) {
@


1.1
log
@Initial revision
@
text
@d56 1
a56 1
char *ProgramName;
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
