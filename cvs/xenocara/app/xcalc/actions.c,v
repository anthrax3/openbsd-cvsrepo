head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_0_2:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.01.25.11.34.27;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	e0rJj2HnKMhfzlxw;

1.4
date	2013.03.09.15.04.53;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.25.21.58.01;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.28.08.02.57;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.28.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.28.46;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcalc 1.0.6
@
text
@/*

Copyright (c) 1989  X Consortium

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from the X Consortium.

*/

/*
 * actions.c - externally available procedures for xcalc
 *
 * Author:  Donna Converse, MIT X Consortium
 */

#include <X11/Intrinsic.h>
#include <setjmp.h>
#include "xcalc.h"

#ifndef IEEE
#define XCALC_PRE_OP(keynum) { if (pre_op(keynum)) return; \
		       if (setjmp (env)) {fail_op(); return;}}
#else
#define XCALC_PRE_OP(keynum) if (pre_op(keynum)) return;
#endif

static void add(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void back(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void bell(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void clearit(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void cosine(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void decimal(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void degree(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void digit(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void divide(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void e(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void enter(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void epower(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void equal(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void exchange(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void factorial(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void inverse(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void leftParen(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void logarithm(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void multiply(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void naturalLog(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void negate(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void nop(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void off(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void pi(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void power(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void quit(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void recall(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void reciprocal(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void rightParen(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void roll(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void scientific(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void selection(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void sine(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void square(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void squareRoot(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void store(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void subtract(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void sum(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void tangent(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void tenpower(Widget w, XEvent *ev, String *vector, Cardinal *count);
static void XexchangeY(Widget w, XEvent *ev, String *vector, Cardinal *count);

/*
 * 	calculator action table
 */

XtActionsRec	Actions[] = {
{"add",		add},		/* addition */
{"back",	back},		/* HP-specific backspace */
{"bell",	bell},		/* ring bell */
{"clear",	clearit},	/* TI-specific clear calculator state */
{"cosine",	cosine},	/* trigonometric function cosine */
{"decimal",	decimal},	/* decimal point */
{"degree",	degree},	/* degree, radian, grad switch */
{"digit",	digit},		/* numeric key */
{"divide",	divide},	/* division */
{"e",		e},		/* the natural number e */
{"enter",	enter},		/* HP-specific enter */
{"epower",	epower},	/* e raised to a power */
{"equal",	equal},		/* TI-specific = */
{"exchange",	exchange},	/* TI-specific exchange memory and display */
{"factorial",	factorial},	/* factorial function */
{"inverse", 	inverse},	/* inverse */
{"leftParen",	leftParen},	/* TI-specific left parenthesis */
{"logarithm",	logarithm},	/* logarithm base 10 */
{"multiply",	multiply},	/* multiplication */
{"naturalLog",	naturalLog},	/* natural logarithm base e */
{"negate",	negate},	/* change sign */
{"nop",		nop},		/* no operation, rings bell */
{"off",		off},		/* clear state */
{"pi",		pi},		/* the number pi */
{"power",	power},		/* raise to an arbitrary power */
{"quit",	quit},		/* quit */
{"recall",	recall},	/* memory recall */
{"reciprocal",  reciprocal},	/* reciprocal function */
{"rightParen",	rightParen},	/* TI-specific left parenthesis */
{"roll",	roll},		/* HP-specific roll stack */
{"scientific",	scientific},	/* scientfic notation (EE) */
{"selection",	selection},	/* copy selection */
{"sine",	sine},		/* trigonometric function sine */
{"square",	square},	/* square */
{"squareRoot",	squareRoot},	/* square root */
{"store",	store},		/* memory store */
{"subtract", 	subtract},	/* subtraction */
{"sum",		sum},		/* memory summation */
{"tangent",	tangent},	/* trigonometric function tangent */
{"tenpower",	tenpower},	/* 10 raised to to an arbitrary power */
{"XexchangeY",	XexchangeY}	/* HP-specific exchange X and Y registers */
};

int ActionsCount = XtNumber(Actions);

/*ARGSUSED*/
static void add(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kADD);
    rpn ? twof(kADD) : twoop(kADD);
    post_op();
}

/*ARGSUSED*/
static void back(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kBKSP);
    bkspf();
    post_op();
}

/*ARGSUSED*/
static void bell(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    ringbell();
}

/*ARGSUSED*/
static void clearit(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kCLR);
    clearf();
    post_op();
}

/*ARGSUSED*/
static void cosine(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kCOS);
    oneop(kCOS);
    post_op();
}

/*ARGSUSED*/
static void decimal(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kDEC);
    decf();
    post_op();
}

/*ARGSUSED*/
static void degree(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kDRG);
    drgf();
    post_op();
}

/*ARGSUSED*/
static void digit(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    switch (vector[0][0])
    {
      case '1':	XCALC_PRE_OP(kONE); numeric(kONE); break;
      case '2': XCALC_PRE_OP(kTWO); numeric(kTWO); break;
      case '3': XCALC_PRE_OP(kTHREE); numeric(kTHREE); break;
      case '4': XCALC_PRE_OP(kFOUR); numeric(kFOUR); break;
      case '5': XCALC_PRE_OP(kFIVE); numeric(kFIVE); break;
      case '6': XCALC_PRE_OP(kSIX); numeric(kSIX); break;
      case '7': XCALC_PRE_OP(kSEVEN); numeric(kSEVEN); break;
      case '8': XCALC_PRE_OP(kEIGHT); numeric(kEIGHT); break;
      case '9': XCALC_PRE_OP(kNINE); numeric(kNINE); break;
      case '0': XCALC_PRE_OP(kZERO); numeric(kZERO); break;
    }
    post_op();
}

/*ARGSUSED*/
static void divide(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kDIV);
    rpn  ? twof(kDIV) : twoop(kDIV);
    post_op();
}

/*ARGSUSED*/
static void e(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kE);
    oneop(kE);
    post_op();
}

/*ARGSUSED*/
static void enter(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kENTR);
    entrf();
    post_op();
}

/*ARGSUSED*/
static void epower(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kEXP);
    oneop(kEXP);
    post_op();
}

/*ARGSUSED*/
static void equal(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kEQU);
    equf();
    post_op();
}

/*ARGSUSED*/
static void exchange(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kEXC);
    oneop(kEXC);
    post_op();
}

/*ARGSUSED*/
static void factorial(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kFACT);
    oneop(kFACT);
    post_op();
}

/*ARGSUSED*/
static void inverse(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kINV);
    invf();
    post_op();
}

/*ARGSUSED*/
static void leftParen(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kLPAR);
    lparf();
    post_op();
}

/*ARGSUSED*/
static void logarithm(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kLOG);
    oneop(kLOG);
    post_op();
}

/*ARGSUSED*/
static void multiply(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kMUL);
    rpn ? twof(kMUL) : twoop(kMUL);
    post_op();
}

/*ARGSUSED*/
static void naturalLog(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kLN);
    oneop(kLN);
    post_op();
}

/*ARGSUSED*/
static void negate(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kNEG);
    negf();
    post_op();
}

/*ARGSUSED*/
static void nop(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    ringbell();
}

/*ARGSUSED*/
static void off(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kOFF);
    offf();
    post_op();
}

/*ARGSUSED*/
static void pi(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kPI);
    oneop(kPI);
    post_op();
}

/*ARGSUSED*/
static void power(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kPOW);
    rpn ? twof(kPOW) : twoop(kPOW);
    post_op();
}

/*ARGSUSED*/
static void quit(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    if (ev->type == ClientMessage && ev->xclient.data.l[0] != wm_delete_window)
	ringbell();
    else
	Quit();
}

/*ARGSUSED*/
static void recall(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kRCL);
    rpn ? memf(kRCL) : oneop(kRCL);
    post_op();
}

/*ARGSUSED*/
static void reciprocal(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kRECIP);
    oneop(kRECIP);
    post_op();
}

/*ARGSUSED*/
static void rightParen(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kRPAR);
    rparf();
    post_op();
}

/*ARGSUSED*/
static void roll(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kROLL);
    rollf();
    post_op();
}

/*ARGSUSED*/
static void scientific(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kEE);
    eef();
    post_op();
}

/*ARGSUSED*/
static void selection(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    do_select(((XButtonReleasedEvent *)ev)->time);
}

/*ARGSUSED*/
static void sine(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kSIN);
    oneop(kSIN);
    post_op();
}

/*ARGSUSED*/
static void square(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kSQR);
    oneop(kSQR);
    post_op();
}

/*ARGSUSED*/
static void squareRoot(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kSQRT);
    oneop(kSQRT);
    post_op();
}

/*ARGSUSED*/
static void store(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kSTO);
    rpn ? memf(kSTO) : oneop(kSTO);
    post_op();
}

/*ARGSUSED*/
static void subtract(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kSUB);
    rpn ? twof(kSUB) : twoop(kSUB);
    post_op();
}

/*ARGSUSED*/
static void sum(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kSUM);
    rpn ? memf(kSUM) : oneop(kSUM);
    post_op();
}

/*ARGSUSED*/
static void tangent(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kTAN);
    oneop(kTAN);
    post_op();
}

/*ARGSUSED*/
static void tenpower(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(k10X);
    oneop(k10X);
    post_op();
}

/*ARGSUSED*/
static void XexchangeY(Widget w, XEvent *ev, String *vector, Cardinal *count)
{
    XCALC_PRE_OP(kXXY);
    twof(kXXY);
    post_op();
}
@


1.4
log
@Upate to xcalc 1.0.5
@
text
@d48 41
a88 42
static void add(Widget w, XEvent *e, String *vector, Cardinal *count);
static void back(Widget w, XEvent *e, String *vector, Cardinal *count);
static void bell(Widget w, XEvent *e, String *vector, Cardinal *count);
static void clearit(Widget w, XEvent *e, String *vector, Cardinal *count);
static void cosine(Widget w, XEvent *e, String *vector, Cardinal *count);
static void decimal(Widget w, XEvent *e, String *vector, Cardinal *count);
static void degree(Widget w, XEvent *e, String *vector, Cardinal *count);
static void digit(Widget w, XEvent *e, String *vector, Cardinal *count);
static void divide(Widget w, XEvent *e, String *vector, Cardinal *count);
static void e(Widget w, XEvent *e, String *vector, Cardinal *count);
static void enter(Widget w, XEvent *e, String *vector, Cardinal *count);
static void epower(Widget w, XEvent *e, String *vector, Cardinal *count);
static void equal(Widget w, XEvent *e, String *vector, Cardinal *count);
static void exchange(Widget w, XEvent *e, String *vector, Cardinal *count);
static void factorial(Widget w, XEvent *e, String *vector, Cardinal *count);
static void inverse(Widget w, XEvent *e, String *vector, Cardinal *count);
static void leftParen(Widget w, XEvent *e, String *vector, Cardinal *count);
static void logarithm(Widget w, XEvent *e, String *vector, Cardinal *count);
static void multiply(Widget w, XEvent *e, String *vector, Cardinal *count);
static void naturalLog(Widget w, XEvent *e, String *vector, Cardinal *count);
static void factorial(Widget w, XEvent *e, String *vector, Cardinal *count);
static void negate(Widget w, XEvent *e, String *vector, Cardinal *count);
static void nop(Widget w, XEvent *e, String *vector, Cardinal *count);
static void off(Widget w, XEvent *e, String *vector, Cardinal *count);
static void pi(Widget w, XEvent *e, String *vector, Cardinal *count);
static void power(Widget w, XEvent *e, String *vector, Cardinal *count);
static void quit(Widget w, XEvent *e, String *vector, Cardinal *count);
static void recall(Widget w, XEvent *e, String *vector, Cardinal *count);
static void reciprocal(Widget w, XEvent *e, String *vector, Cardinal *count);
static void rightParen(Widget w, XEvent *e, String *vector, Cardinal *count);
static void roll(Widget w, XEvent *e, String *vector, Cardinal *count);
static void scientific(Widget w, XEvent *e, String *vector, Cardinal *count);
static void selection(Widget w, XEvent *e, String *vector, Cardinal *count);
static void sine(Widget w, XEvent *e, String *vector, Cardinal *count);
static void square(Widget w, XEvent *e, String *vector, Cardinal *count);
static void squareRoot(Widget w, XEvent *e, String *vector, Cardinal *count);
static void store(Widget w, XEvent *e, String *vector, Cardinal *count);
static void subtract(Widget w, XEvent *e, String *vector, Cardinal *count);
static void sum(Widget w, XEvent *e, String *vector, Cardinal *count);
static void tangent(Widget w, XEvent *e, String *vector, Cardinal *count);
static void tenpower(Widget w, XEvent *e, String *vector, Cardinal *count);
static void XexchangeY(Widget w, XEvent *e, String *vector, Cardinal *count);
d141 1
a141 1
static void add(Widget w, XEvent *e, String *vector, Cardinal *count)
d149 1
a149 1
static void back(Widget w, XEvent *e, String *vector, Cardinal *count)
d157 1
a157 1
static void bell(Widget w, XEvent *e, String *vector, Cardinal *count)
d163 1
a163 1
static void clearit(Widget w, XEvent *e, String *vector, Cardinal *count)
d171 1
a171 1
static void cosine(Widget w, XEvent *e, String *vector, Cardinal *count)
d179 1
a179 1
static void decimal(Widget w, XEvent *e, String *vector, Cardinal *count)
d187 1
a187 1
static void degree(Widget w, XEvent *e, String *vector, Cardinal *count)
d195 1
a195 1
static void digit(Widget w, XEvent *e, String *vector, Cardinal *count)
d214 1
a214 1
static void divide(Widget w, XEvent *e, String *vector, Cardinal *count)
d222 1
a222 1
static void e(Widget w, XEvent *e, String *vector, Cardinal *count)
d230 1
a230 1
static void enter(Widget w, XEvent *e, String *vector, Cardinal *count)
d238 1
a238 1
static void epower(Widget w, XEvent *e, String *vector, Cardinal *count)
d246 1
a246 1
static void equal(Widget w, XEvent *e, String *vector, Cardinal *count)
d254 1
a254 1
static void exchange(Widget w, XEvent *e, String *vector, Cardinal *count)
d262 1
a262 1
static void factorial(Widget w, XEvent *e, String *vector, Cardinal *count)
d270 1
a270 1
static void inverse(Widget w, XEvent *e, String *vector, Cardinal *count)
d278 1
a278 1
static void leftParen(Widget w, XEvent *e, String *vector, Cardinal *count)
d286 1
a286 1
static void logarithm(Widget w, XEvent *e, String *vector, Cardinal *count)
d294 1
a294 1
static void multiply(Widget w, XEvent *e, String *vector, Cardinal *count)
d302 1
a302 1
static void naturalLog(Widget w, XEvent *e, String *vector, Cardinal *count)
d310 1
a310 1
static void negate(Widget w, XEvent *e, String *vector, Cardinal *count)
d318 1
a318 1
static void nop(Widget w, XEvent *e, String *vector, Cardinal *count)
d324 1
a324 1
static void off(Widget w, XEvent *e, String *vector, Cardinal *count)
d332 1
a332 1
static void pi(Widget w, XEvent *e, String *vector, Cardinal *count)
d340 1
a340 1
static void power(Widget w, XEvent *e, String *vector, Cardinal *count)
d348 1
a348 1
static void quit(Widget w, XEvent *e, String *vector, Cardinal *count)
d350 1
a350 1
    if (e->type == ClientMessage && e->xclient.data.l[0] != wm_delete_window)
d357 1
a357 1
static void recall(Widget w, XEvent *e, String *vector, Cardinal *count)
d365 1
a365 1
static void reciprocal(Widget w, XEvent *e, String *vector, Cardinal *count)
d373 1
a373 1
static void rightParen(Widget w, XEvent *e, String *vector, Cardinal *count)
d381 1
a381 1
static void roll(Widget w, XEvent *e, String *vector, Cardinal *count)
d389 1
a389 1
static void scientific(Widget w, XEvent *e, String *vector, Cardinal *count)
d397 1
a397 1
static void selection(Widget w, XEvent *e, String *vector, Cardinal *count)
d399 1
a399 1
    do_select(((XButtonReleasedEvent *)e)->time);
d403 1
a403 1
static void sine(Widget w, XEvent *e, String *vector, Cardinal *count)
d411 1
a411 1
static void square(Widget w, XEvent *e, String *vector, Cardinal *count)
d419 1
a419 1
static void squareRoot(Widget w, XEvent *e, String *vector, Cardinal *count)
d427 1
a427 1
static void store(Widget w, XEvent *e, String *vector, Cardinal *count)
d435 1
a435 1
static void subtract(Widget w, XEvent *e, String *vector, Cardinal *count)
d443 1
a443 1
static void sum(Widget w, XEvent *e, String *vector, Cardinal *count)
d451 1
a451 1
static void tangent(Widget w, XEvent *e, String *vector, Cardinal *count)
d459 1
a459 1
static void tenpower(Widget w, XEvent *e, String *vector, Cardinal *count)
d467 1
a467 1
static void XexchangeY(Widget w, XEvent *e, String *vector, Cardinal *count)
@


1.3
log
@Update to xcalc 1.0.4.
@
text
@d170 1
a170 1
   
d261 1
a261 1
   
d277 1
a277 1
   
d285 1
a285 1
   
d301 1
a301 1
   
d309 1
a309 1
   
d331 1
a331 1
   
d339 1
a339 1
   
d364 1
a364 1
	
d372 1
a372 1
   
d380 1
a380 1
   
d426 1
a426 1
   
d442 1
a442 1
   
d450 1
a450 1
   
d458 1
a458 1
   
d466 1
a466 1
   
@


1.2
log
@Update to xcalc 1.0.3
@
text
@a0 1
/* $XConsortium: actions.c,v 1.9 94/04/17 20:43:30 converse Exp $ */
@


1.1
log
@Initial revision
@
text
@a40 4
extern int rpn;
extern Atom wm_delete_window;
extern int pre_op();
extern void post_op(), Quit(), ringbell(), do_select();
a42 2
extern    jmp_buf env;
extern void fail_op();
d49 93
d143 1
a143 5
void add(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d151 1
a151 5
void back(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d159 1
a159 5
void bell(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d165 1
a165 5
void clearit(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d173 1
a173 5
void cosine(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d181 1
a181 5
void decimal(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d189 1
a189 5
void degree(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d197 1
a197 5
void digit(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d216 1
a216 5
void divide(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d224 1
a224 5
void e(w, ev, vector, count)
    Widget	w;
    XEvent	*ev;
    String	*vector;
    Cardinal	*count;
d232 1
a232 5
void enter(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d240 1
a240 5
void epower(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d248 1
a248 5
void equal(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d256 1
a256 5
void exchange(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d264 1
a264 5
void factorial(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d272 1
a272 5
void inverse(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d280 1
a280 5
void leftParen(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d288 1
a288 5
void logarithm(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d296 1
a296 5
void multiply(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d304 1
a304 5
void naturalLog(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d312 1
a312 5
void negate(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d320 1
a320 5
void nop(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d326 1
a326 5
void off(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d334 1
a334 5
void pi(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d342 1
a342 5
void power(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d350 1
a350 5
void quit(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d359 1
a359 5
void recall(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d367 1
a367 5
void reciprocal(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d375 1
a375 5
void rightParen(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d383 1
a383 5
void roll(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d391 1
a391 5
void scientific(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d399 1
a399 5
void selection(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d405 1
a405 5
void sine(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d413 1
a413 5
void square(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d421 1
a421 5
void squareRoot(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d429 1
a429 5
void store(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d437 1
a437 5
void subtract(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d445 1
a445 5
void sum(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d453 1
a453 5
void tangent(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d461 1
a461 5
void tenpower(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
d469 1
a469 5
void XexchangeY(w, e, vector, count)
    Widget	w;
    XEvent	*e;
    String	*vector;
    Cardinal	*count;
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
