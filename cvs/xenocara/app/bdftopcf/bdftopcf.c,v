head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.2.0.16
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.12
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.10
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v1_0_1:1.1.1.2
	v1_0_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.01.03.15.39.14;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	0cE4gohj9ATEA5EO;

1.3
date	2013.03.09.14.57.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.31.17.32.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.07.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.07.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.05.31.04.43.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to bdftopcf version 1.0.5
@
text
@/*

Copyright 1991, 1993, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/fonts/fontmisc.h>
#include <X11/fonts/fontstruct.h>
#include <X11/fonts/fntfilio.h>
#include <X11/fonts/fntfil.h>
#include <X11/fonts/bdfint.h>
#include <X11/fonts/pcf.h>
#include <stdio.h>
#include <X11/Xos.h>

int
main(int argc, char *argv[])
{
    FontRec font = { 0 };

    FontFilePtr input, output;

    char *input_name = NULL, *output_name = NULL;

    char *program_name;

    int bit, byte, glyph, scan;

    FontDefaultFormat(&bit, &byte, &glyph, &scan);
    program_name = argv[0];
    argc--, argv++;
    while (argc-- > 0) {
        if (argv[0][0] == '-') {
            switch (argv[0][1]) {
            case 'p':
                switch (argv[0][2]) {
                case '1':
                case '2':
                case '4':
                case '8':
                    if (argv[0][3] != '\0')
                        goto usage;
                    glyph = argv[0][2] - '0';
                    break;
                default:
                    goto usage;
                }
                break;

            case 'u':
                switch (argv[0][2]) {
                case '1':
                case '2':
                case '4':
                    if (argv[0][3] != '\0')
                        goto usage;
                    scan = argv[0][2] - '0';
                    break;
                default:
                    goto usage;
                }
                break;

            case 'm':
                if (argv[0][2] != '\0')
                    goto usage;
                bit = MSBFirst;
                break;

            case 'l':
                if (argv[0][2] != '\0')
                    goto usage;
                bit = LSBFirst;
                break;

            case 'M':
                if (argv[0][2] != '\0')
                    goto usage;
                byte = MSBFirst;
                break;

            case 'L':
                if (argv[0][2] != '\0')
                    goto usage;
                byte = LSBFirst;
                break;

            case 't':          /* attempt to make terminal fonts if possible */
                if (argv[0][2] != '\0')
                    goto usage;
                break;

            case 'i':          /* inhibit ink metric computation */
                if (argv[0][2] != '\0')
                    goto usage;
                break;
            case 'o':
                if (argv[0][2])
                    output_name = argv[0] + 2;
                else {
                    if (!argv[1])
                        goto usage;
                    argv++;
                    argc--;
                    output_name = argv[0];
                }
                break;

            case 'v':
                printf("%s\n", PACKAGE_STRING);
                exit(0);

            default:
                goto usage;
            }
        }
        else {
            if (input_name) {
 usage:
                fprintf(stderr, "%s: invalid option '%s'\n",
                        program_name, argv[0]);
                fprintf(stderr,
                        "usage: %s [-p#] [-u#] [-m] [-l] [-M] [-L] [-t] [-i] [-o pcf file] [bdf file]\n"
                        "       where # for -p is 1, 2, 4, or 8\n"
                        "       and   # for -u is 1, 2, or 4\n",
                        program_name);
                exit(1);
            }
            input_name = argv[0];
        }
        argv++;
    }
    if (input_name) {
        input = FontFileOpen(input_name);
        if (!input) {
            fprintf(stderr, "%s: can't open bdf source file %s\n",
                    program_name, input_name);
            exit(1);
        }
    }
    else
        input = FontFileOpenFd(STDIN_FILENO);
    if (bdfReadFont(&font, input, bit, byte, glyph, scan) != Successful) {
        fprintf(stderr, "%s: bdf input, %s, corrupt\n",
                program_name, input_name ? input_name : "<stdin>");
        exit(1);
    }
    if (output_name) {
        output = FontFileOpenWrite(output_name);
        if (!output) {
            fprintf(stderr, "%s: can't open pcf sink file %s\n",
                    program_name, output_name);
            exit(1);
        }
    }
    else
        output = FontFileOpenWriteFd(STDOUT_FILENO);
    if (pcfWriteFont(&font, output) != Successful) {
        fprintf(stderr, "%s: can't write pcf file %s\n",
                program_name, output_name ? output_name : "<stdout>");
        if (output_name)
            remove(output_name);
        exit(1);
    }
    else
        FontFileClose(output);
    return (0);
}
@


1.3
log
@Update to bdftopcf 1.0.4
@
text
@d148 2
d153 1
a153 1
                        "       and   # for -s is 1, 2, or 4\n",
@


1.2
log
@Update to bdftopcf 1.0.3. No functional change.
@
text
@d29 4
d45 1
a45 1
main (int argc, char *argv[])
d47 5
a51 5
    FontRec font;
    FontFilePtr	input, output;
    char    *input_name = NULL, *output_name = NULL;
    char    *program_name;
    int	    bit, byte, glyph, scan;
d53 1
a53 1
    bzero(&font, sizeof(FontRec));
d55 3
a57 1
    FontDefaultFormat (&bit, &byte, &glyph, &scan);
d61 97
a157 95
	if (argv[0][0] == '-') {
	    switch (argv[0][1]) {
	    case 'p':
		switch (argv[0][2]) {
		case '1':
		case '2':
		case '4':
		case '8':
		    if (argv[0][3] != '\0')
			goto usage;
		    glyph = argv[0][2] - '0';
		    break;
		default:
		    goto usage;
		}
		break;

	    case 'u':
		switch (argv[0][2]) {
		case '1':
		case '2':
		case '4':
		    if (argv[0][3] != '\0')
			goto usage;
		    scan = argv[0][2] - '0';
		    break;
		default:
		    goto usage;
		}
		break;

	    case 'm':
		if (argv[0][2] != '\0')
		    goto usage;
		bit = MSBFirst;
		break;

	    case 'l':
		if (argv[0][2] != '\0')
		    goto usage;
		bit = LSBFirst;
		break;

	    case 'M':
		if (argv[0][2] != '\0')
		    goto usage;
		byte = MSBFirst;
		break;

	    case 'L':
		if (argv[0][2] != '\0')
		    goto usage;
		byte = LSBFirst;
		break;

	    case 't':	/* attempt to make terminal fonts if possible */
		if (argv[0][2] != '\0')
		    goto usage;
		break;

	    case 'i':	/* inhibit ink metric computation */
		if (argv[0][2] != '\0')
		    goto usage;
		break;
	    case 'o':
		if (argv[0][2])
		    output_name = argv[0] + 2;
		else
		{
		    if (!argv[1])
			goto usage;
		    argv++;
		    argc--;
		    output_name = argv[0];
		}
		break;
	    default:
		goto usage;
	    }
	} else {
	    if (input_name)
	    {
	usage:
		fprintf(stderr,
	"usage: %s [-p#] [-u#] [-m] [-l] [-M] [-L] [-t] [-i] [-o pcf file] [bdf file]\n",
			program_name);
		fprintf(stderr,
			"       where # for -p is 1, 2, 4, or 8\n");
		fprintf(stderr,
			"       and   # for -s is 1, 2, or 4\n");
		exit(1);
	    }
	    input_name = argv[0];
	}
	argv++;
d159 7
a165 9
    if (input_name)
    {
    	input = FontFileOpen (input_name);
    	if (!input)
    	{
	    fprintf (stderr, "%s: can't open bdf source file %s\n",
		     program_name, input_name);
	    exit (1);
    	}
d168 13
a180 6
	input = FontFileOpenFd (0);
    if (bdfReadFont (&font, input, bit, byte, glyph, scan) != Successful)
    {
	fprintf (stderr, "%s: bdf input, %s, corrupt\n",
		 program_name, input_name ? input_name : "<stdin>");
	exit (1);
a181 10
    if (output_name)
    {
	output = FontFileOpenWrite (output_name);
    	if (!output)
    	{
	    fprintf (stderr, "%s: can't open pcf sink file %s\n",
		     program_name, output_name);
	    exit (1);
    	}
    } 
d183 7
a189 8
	output = FontFileOpenWriteFd (1);
    if (pcfWriteFont (&font, output) != Successful)
    {
	fprintf (stderr, "%s: can't write pcf file %s\n",
		 program_name, output_name ? output_name : "<stdout>");
	if (output_name)
	    unlink (output_name);
	exit (1);
d192 1
a192 1
	FontFileClose (output);
@


1.1
log
@Initial revision
@
text
@a0 1
/* $Xorg: bdftopcf.c,v 1.4 2001/02/09 02:05:28 xorgcvs Exp $ */
a28 2
/* $XFree86: xc/programs/bdftopcf/bdftopcf.c,v 1.4 2001/08/01 00:45:00 tsi Exp $ */

d45 1
a45 1
    char    *input_name = 0, *output_name = 0;
d166 1
a166 1
		 program_name, input_name);
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@import bdftopcf version 1.0.1
@
text
@d48 1
a48 1
    char    *input_name = NULL, *output_name = NULL;
d169 1
a169 1
		 program_name, input_name ? input_name : "<stdin>");
@

