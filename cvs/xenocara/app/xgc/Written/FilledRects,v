head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.38
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.36
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.32
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.30
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.28
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.26
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.24
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.22
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.25.20.42.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.42.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@General concerns
----------------

Machine type
Display type
Display on different machine?
Visual
Clipping
Obscured by cursor
Background tiling
The whole software vs. hardware bit: computational overhead vs. time spent
  drawing
Planemask

PolyFillRectangle
-----------------
Use same test as PolyRectangle?
Perhaps give FillPoly some of these too, see if it special cases them.
Fill Rectangle vs. Fill Poly for same size areas would be an
  interesting comparison.

Things to look for:
	All it's really doing is setting or unsetting planes.
	When a whole word is filled, it should be quite fast (just
	setting it to 0 or ~0).
	Otherwise, the speed of a single rectangle should be about
	equal to its size.

Data: 
	Pixels per second.
	Average size of rectangle.

GC fields: 
	function:
	Tiling: likely to be a lot slower, although for whole words
		you're just setting it to a certain value, rather than 0.
		(You also have to look at the y value).  Strange width
		tiles (are these allowed?) are likely to be real bad.
	Stippling: also slower - I'm not sure whether or not this would
		be slower than tiling.  This probably has a greater
		chance of being done in hardware.

	plane-mask:
		plane of 0 would be real fast, since it doesn't modify
		anything.  plane of ~0 should be fast, since it doesn't
		have to think.  Anything else would probably be
		proportional to the number of planes...

	subwindow-mode: I don't believe it matters.

	clip-x-origin
	clip-y-origin
	clip-mask:
		Clipping in general should probably increase speed rather
		than decrease it, unless the clipping region is strange.
		Possible increase in speed because less change to the
		display is being made; possible decrease in speed because
		more thought has to be given to what is drawn or not.
		Software vs. hardware, I suppose.

Possibly 
	foreground: similar to plane-mask in its effect, I would think.

	tile: "nice" width tiles would probably be better.  A width which
		is not a divisor of the length of a word would be
		significantly slower.  A width the size of a word is
		probably perfect.  The actual contents of the tile
		probably don't matter: Any code to check for tiles
		which could be "simplified" would probably take too much
		time to execute to do any good.

	stipple: like tile

Other:
	alignment on word bounaries: fastest when one is changing whole
	words at a time.  That way, you're just setting whole words to
	0 or ~0 and not doing any computation.  A 32x1 rectangle should
	be much faster than a 1x32 rectangle.

---------
Things to put in test:

Check all alignments.
Perhaps some sort of comparison between thin rectangles oriented
  horizontally and oriented vertically.
Small rectangles, big rectangles: compare pixels/second for each.
  Good way of computing overhead costs.

---------
test
(1-32)x32 at all 32 bits in a word.
(97-128)x32
(97-128)x128
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
