head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.08.06.11.08.41;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	i0P33Iy84sdlL5SE;

1.5
date	2015.01.25.11.44.55;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	DvhrPZs0ISjOjNfk;

1.4
date	2012.05.15.06.11.32;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.28.11.21.51;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.11.20.56.40;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.43.50;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.43.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xkbcomp 1.3.1
@
text
@/************************************************************
 Copyright (c) 1994 by Silicon Graphics Computer Systems, Inc.

 Permission to use, copy, modify, and distribute this
 software and its documentation for any purpose and without
 fee is hereby granted, provided that the above copyright
 notice appear in all copies and that both that copyright
 notice and this permission notice appear in supporting
 documentation, and that the name of Silicon Graphics not be 
 used in advertising or publicity pertaining to distribution 
 of the software without specific prior written permission.
 Silicon Graphics makes no representation about the suitability 
 of this software for any purpose. It is provided "as is"
 without any express or implied warranty.
 
 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
 AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
 OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
 THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ********************************************************/

#define	DEBUG_VAR parseDebug
#include "parseutils.h"
#include "xkbpath.h"
#include <X11/keysym.h>
#include <X11/extensions/XKBgeom.h>
#include <limits.h>
#include <stdlib.h>

XkbFile *rtrnValue;

ParseCommon *
AppendStmt(ParseCommon * to, ParseCommon * append)
{
    ParseCommon *start = to;

    if (append == NULL)
        return to;
    while ((to != NULL) && (to->next != NULL))
    {
        to = to->next;
    }
    if (to)
    {
        to->next = append;
        return start;
    }
    return append;
}

ExprDef *
ExprCreate(unsigned op, unsigned type)
{
    ExprDef *expr;
    expr = uTypedAlloc(ExprDef);
    if (expr)
    {
        expr->common.stmtType = StmtExpr;
        expr->common.next = NULL;
        expr->op = op;
        expr->type = type;
    }
    else
    {
        FATAL("Couldn't allocate expression in parser\n");
        /* NOTREACHED */
    }
    return expr;
}

ExprDef *
ExprCreateUnary(unsigned op, unsigned type, ExprDef * child)
{
    ExprDef *expr;
    expr = uTypedAlloc(ExprDef);
    if (expr)
    {
        expr->common.stmtType = StmtExpr;
        expr->common.next = NULL;
        expr->op = op;
        expr->type = type;
        expr->value.child = child;
    }
    else
    {
        FATAL("Couldn't allocate expression in parser\n");
        /* NOTREACHED */
    }
    return expr;
}

ExprDef *
ExprCreateBinary(unsigned op, ExprDef * left, ExprDef * right)
{
    ExprDef *expr;
    expr = uTypedAlloc(ExprDef);
    if (expr)
    {
        expr->common.stmtType = StmtExpr;
        expr->common.next = NULL;
        expr->op = op;
        if ((op == OpAssign) || (left->type == TypeUnknown))
            expr->type = right->type;
        else if ((left->type == right->type) || (right->type == TypeUnknown))
            expr->type = left->type;
        else
            expr->type = TypeUnknown;
        expr->value.binary.left = left;
        expr->value.binary.right = right;
    }
    else
    {
        FATAL("Couldn't allocate expression in parser\n");
        /* NOTREACHED */
    }
    return expr;
}

KeycodeDef *
KeycodeCreate(char *name, ExprDef * value)
{
    KeycodeDef *def;

    def = uTypedAlloc(KeycodeDef);
    if (def)
    {
        def->common.stmtType = StmtKeycodeDef;
        def->common.next = NULL;
        strncpy(def->name, name, XkbKeyNameLength);
        def->name[XkbKeyNameLength] = '\0';
        def->value = value;
    }
    else
    {
        FATAL("Couldn't allocate key name definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

KeyAliasDef *
KeyAliasCreate(char *alias, char *real)
{
    KeyAliasDef *def;

    def = uTypedAlloc(KeyAliasDef);
    if (def)
    {
        def->common.stmtType = StmtKeyAliasDef;
        def->common.next = NULL;
        strncpy(def->alias, alias, XkbKeyNameLength);
        def->alias[XkbKeyNameLength] = '\0';
        strncpy(def->real, real, XkbKeyNameLength);
        def->real[XkbKeyNameLength] = '\0';
    }
    else
    {
        FATAL("Couldn't allocate key alias definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

VModDef *
VModCreate(Atom name, ExprDef * value)
{
    VModDef *def;
    def = uTypedAlloc(VModDef);
    if (def)
    {
        def->common.stmtType = StmtVModDef;
        def->common.next = NULL;
        def->name = name;
        def->value = value;
    }
    else
    {
        FATAL("Couldn't allocate variable definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

VarDef *
VarCreate(ExprDef * name, ExprDef * value)
{
    VarDef *def;
    def = uTypedAlloc(VarDef);
    if (def)
    {
        def->common.stmtType = StmtVarDef;
        def->common.next = NULL;
        def->name = name;
        def->value = value;
    }
    else
    {
        FATAL("Couldn't allocate variable definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

VarDef *
BoolVarCreate(Atom nameToken, unsigned set)
{
    ExprDef *name, *value;

    name = ExprCreate(ExprIdent, TypeUnknown);
    name->value.str = nameToken;
    value = ExprCreate(ExprValue, TypeBoolean);
    value->value.uval = set;
    return VarCreate(name, value);
}

InterpDef *
InterpCreate(const char *sym_str, ExprDef * match)
{
    InterpDef *def;

    def = uTypedAlloc(InterpDef);
    if (def)
    {
        def->common.stmtType = StmtInterpDef;
        def->common.next = NULL;
        if (LookupKeysym(sym_str, &def->sym) == 0)
            def->ignore = True;
        else
            def->ignore = False;
        def->match = match;
    }
    else
    {
        FATAL("Couldn't allocate interp definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

KeyTypeDef *
KeyTypeCreate(Atom name, VarDef * body)
{
    KeyTypeDef *def;

    def = uTypedAlloc(KeyTypeDef);
    if (def)
    {
        def->common.stmtType = StmtKeyTypeDef;
        def->common.next = NULL;
        def->merge = MergeDefault;
        def->name = name;
        def->body = body;
    }
    else
    {
        FATAL("Couldn't allocate key type definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

SymbolsDef *
SymbolsCreate(char *keyName, ExprDef * symbols)
{
    SymbolsDef *def;

    def = uTypedAlloc(SymbolsDef);
    if (def)
    {
        def->common.stmtType = StmtSymbolsDef;
        def->common.next = NULL;
        def->merge = MergeDefault;
        bzero(def->keyName, 5);
        strncpy(def->keyName, keyName, 4);
        def->symbols = symbols;
    }
    else
    {
        FATAL("Couldn't allocate symbols definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

GroupCompatDef *
GroupCompatCreate(int group, ExprDef * val)
{
    GroupCompatDef *def;

    def = uTypedAlloc(GroupCompatDef);
    if (def)
    {
        def->common.stmtType = StmtGroupCompatDef;
        def->common.next = NULL;
        def->merge = MergeDefault;
        def->group = group;
        def->def = val;
    }
    else
    {
        FATAL("Couldn't allocate group compat definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

ModMapDef *
ModMapCreate(Atom modifier, ExprDef * keys)
{
    ModMapDef *def;

    def = uTypedAlloc(ModMapDef);
    if (def)
    {
        def->common.stmtType = StmtModMapDef;
        def->common.next = NULL;
        def->merge = MergeDefault;
        def->modifier = modifier;
        def->keys = keys;
    }
    else
    {
        FATAL("Couldn't allocate mod mask definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

IndicatorMapDef *
IndicatorMapCreate(Atom name, VarDef * body)
{
    IndicatorMapDef *def;

    def = uTypedAlloc(IndicatorMapDef);
    if (def)
    {
        def->common.stmtType = StmtIndicatorMapDef;
        def->common.next = NULL;
        def->merge = MergeDefault;
        def->name = name;
        def->body = body;
    }
    else
    {
        FATAL("Couldn't allocate indicator map definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

IndicatorNameDef *
IndicatorNameCreate(int ndx, ExprDef * name, Bool virtual)
{
    IndicatorNameDef *def;

    def = uTypedAlloc(IndicatorNameDef);
    if (def)
    {
        def->common.stmtType = StmtIndicatorNameDef;
        def->common.next = NULL;
        def->merge = MergeDefault;
        def->ndx = ndx;
        def->name = name;
        def->virtual = virtual;
    }
    else
    {
        FATAL("Couldn't allocate indicator index definition in parser\n");
        /* NOTREACHED */
    }
    return def;
}

ExprDef *
ActionCreate(Atom name, ExprDef * args)
{
    ExprDef *act;

    act = uTypedAlloc(ExprDef);
    if (act)
    {
        act->common.stmtType = StmtExpr;
        act->common.next = NULL;
        act->op = ExprActionDecl;
        act->value.action.name = name;
        act->value.action.args = args;
        return act;
    }
    FATAL("Couldn't allocate ActionDef in parser\n");
    return NULL;
}

ExprDef *
CreateKeysymList(char *sym)
{
    ExprDef *def;

    def = ExprCreate(ExprKeysymList, TypeSymbols);
    if (def)
    {
        def->value.list.nSyms = 1;
        def->value.list.szSyms = 4;
        def->value.list.syms = uTypedCalloc(4, char *);
        if (def->value.list.syms != NULL)
        {
            def->value.list.syms[0] = sym;
            return def;
        }
    }
    FATAL("Couldn't allocate expression for keysym list in parser\n");
    return NULL;
}

ShapeDef *
ShapeDeclCreate(Atom name, OutlineDef * outlines)
{
    ShapeDef *shape;
    OutlineDef *ol;

    shape = uTypedAlloc(ShapeDef);
    if (shape != NULL)
    {
        bzero(shape, sizeof(ShapeDef));
        shape->common.stmtType = StmtShapeDef;
        shape->common.next = NULL;
        shape->merge = MergeDefault;
        shape->name = name;
        shape->nOutlines = 0;
        shape->outlines = outlines;
        for (ol = outlines; ol != NULL; ol = (OutlineDef *) ol->common.next)
        {
            if (ol->nPoints > 0)
                shape->nOutlines++;
        }
    }
    return shape;
}

OutlineDef *
OutlineCreate(Atom field, ExprDef * points)
{
    OutlineDef *outline;
    ExprDef *pt;

    outline = uTypedAlloc(OutlineDef);
    if (outline != NULL)
    {
        bzero(outline, sizeof(OutlineDef));
        outline->common.stmtType = StmtOutlineDef;
        outline->common.next = NULL;
        outline->field = field;
        outline->nPoints = 0;
        if (points->op == ExprCoord)
        {
            for (pt = points; pt != NULL; pt = (ExprDef *) pt->common.next)
            {
                outline->nPoints++;
            }
        }
        outline->points = points;
    }
    return outline;
}

KeyDef *
KeyDeclCreate(char *name, ExprDef * expr)
{
    KeyDef *key;

    key = uTypedAlloc(KeyDef);
    if (key != NULL)
    {
        bzero(key, sizeof(KeyDef));
        key->common.stmtType = StmtKeyDef;
        key->common.next = NULL;
        if (name)
            key->name = name;
        else
            key->expr = expr;
    }
    return key;
}

KeyDef *
KeyDeclMerge(KeyDef * into, KeyDef * from)
{
    into->expr =
        (ExprDef *) AppendStmt(&into->expr->common, &from->expr->common);
    from->expr = NULL;
    uFree(from);
    return into;
}

RowDef *
RowDeclCreate(KeyDef * keys)
{
    RowDef *row;
    KeyDef *key;

    row = uTypedAlloc(RowDef);
    if (row != NULL)
    {
        bzero(row, sizeof(RowDef));
        row->common.stmtType = StmtRowDef;
        row->common.next = NULL;
        row->nKeys = 0;
        row->keys = keys;
        for (key = keys; key != NULL; key = (KeyDef *) key->common.next)
        {
            if (key->common.stmtType == StmtKeyDef)
                row->nKeys++;
        }
    }
    return row;
}

SectionDef *
SectionDeclCreate(Atom name, RowDef * rows)
{
    SectionDef *section;
    RowDef *row;

    section = uTypedAlloc(SectionDef);
    if (section != NULL)
    {
        bzero(section, sizeof(SectionDef));
        section->common.stmtType = StmtSectionDef;
        section->common.next = NULL;
        section->name = name;
        section->nRows = 0;
        section->rows = rows;
        for (row = rows; row != NULL; row = (RowDef *) row->common.next)
        {
            if (row->common.stmtType == StmtRowDef)
                section->nRows++;
        }
    }
    return section;
}

OverlayKeyDef *
OverlayKeyCreate(char *under, char *over)
{
    OverlayKeyDef *key;

    key = uTypedAlloc(OverlayKeyDef);
    if (key != NULL)
    {
        bzero(key, sizeof(OverlayKeyDef));
        key->common.stmtType = StmtOverlayKeyDef;
        strncpy(key->over, over, XkbKeyNameLength);
        strncpy(key->under, under, XkbKeyNameLength);
        uFree(over);
        uFree(under);
    }
    return key;
}

OverlayDef *
OverlayDeclCreate(Atom name, OverlayKeyDef * keys)
{
    OverlayDef *ol;
    OverlayKeyDef *key;

    ol = uTypedAlloc(OverlayDef);
    if (ol != NULL)
    {
        bzero(ol, sizeof(OverlayDef));
        ol->common.stmtType = StmtOverlayDef;
        ol->name = name;
        ol->keys = keys;
        for (key = keys; key != NULL;
             key = (OverlayKeyDef *) key->common.next)
        {
            ol->nKeys++;
        }
    }
    return ol;
}

DoodadDef *
DoodadCreate(unsigned type, Atom name, VarDef * body)
{
    DoodadDef *doodad;

    doodad = uTypedAlloc(DoodadDef);
    if (doodad != NULL)
    {
        bzero(doodad, sizeof(DoodadDef));
        doodad->common.stmtType = StmtDoodadDef;
        doodad->common.next = NULL;
        doodad->type = type;
        doodad->name = name;
        doodad->body = body;
    }
    return doodad;
}

ExprDef *
AppendKeysymList(ExprDef * list, char *sym)
{
    if (list->value.list.nSyms >= list->value.list.szSyms)
    {
        list->value.list.szSyms *= 2;
        list->value.list.syms = uTypedRecalloc(list->value.list.syms,
                                               list->value.list.nSyms,
                                               list->value.list.szSyms,
                                               char *);
        if (list->value.list.syms == NULL)
        {
            FATAL("Couldn't resize list of symbols for append\n");
            return NULL;
        }
    }
    list->value.list.syms[list->value.list.nSyms++] = sym;
    return list;
}

int
LookupKeysym(const char *str, KeySym * sym_rtrn)
{
    KeySym sym;
    char *tmp;

    if ((!str) || (uStrCaseCmp(str, "any") == 0)
        || (uStrCaseCmp(str, "nosymbol") == 0))
    {
        *sym_rtrn = NoSymbol;
        return 1;
    }
    else if ((uStrCaseCmp(str, "none") == 0)
             || (uStrCaseCmp(str, "voidsymbol") == 0))
    {
        *sym_rtrn = XK_VoidSymbol;
        return 1;
    }
    sym = XStringToKeysym(str);
    if (sym != NoSymbol)
    {
        *sym_rtrn = sym;
        return 1;
    }
    if (strlen(str) > 2 && str[0] == '0' && str[1] == 'x') {
        sym = strtoul(str, &tmp, 16);
        if (sym != ULONG_MAX && (!tmp || *tmp == '\0')) {
            *sym_rtrn = sym;
            return 1;
        }
    }
    return 0;
}

IncludeStmt *
IncludeCreate(char *str, unsigned merge)
{
    IncludeStmt *incl, *first;
    char *file, *map, *stmt, *tmp, *extra_data;
    char nextop;
    Bool haveSelf;

    haveSelf = False;
    incl = first = NULL;
    file = map = NULL;
    tmp = str;
    stmt = uStringDup(str);
    while ((tmp) && (*tmp))
    {
        if (XkbParseIncludeMap(&tmp, &file, &map, &nextop, &extra_data))
        {
            if ((file == NULL) && (map == NULL))
            {
                if (haveSelf)
                    goto BAIL;
                haveSelf = True;
            }
            if (first == NULL)
                first = incl = uTypedAlloc(IncludeStmt);
            else
            {
                incl->next = uTypedAlloc(IncludeStmt);
                incl = incl->next;
            }
            if (incl)
            {
                incl->common.stmtType = StmtInclude;
                incl->common.next = NULL;
                incl->merge = merge;
                incl->stmt = NULL;
                incl->file = file;
                incl->map = map;
                incl->modifier = extra_data;
                incl->path = NULL;
                incl->next = NULL;
            }
            else
            {
                WSGO("Allocation failure in IncludeCreate\n");
                ACTION("Using only part of the include\n");
                break;
            }
            if (nextop == '|')
                merge = MergeAugment;
            else
                merge = MergeOverride;
        }
        else
        {
            goto BAIL;
        }
    }
    if (first)
        first->stmt = stmt;
    else if (stmt)
        uFree(stmt);
    return first;
  BAIL:
    ERROR1("Illegal include statement \"%s\"\n", stmt);
    ACTION("Ignored\n");
    while (first)
    {
        incl = first->next;
        if (first->file)
            uFree(first->file);
        if (first->map)
            uFree(first->map);
        if (first->modifier)
            uFree(first->modifier);
        if (first->path)
            uFree(first->path);
        first->file = first->map = first->path = NULL;
        uFree(first);
        first = incl;
    }
    if (stmt)
        uFree(stmt);
    return NULL;
}

#ifdef DEBUG
void
PrintStmtAddrs(ParseCommon * stmt)
{
    fprintf(stderr, "%p", stmt);
    if (stmt)
    {
        do
        {
            fprintf(stderr, "->%p", stmt->next);
            stmt = stmt->next;
        }
        while (stmt);
    }
    fprintf(stderr, "\n");
}
#endif

static void
CheckDefaultMap(XkbFile * maps)
{
    XkbFile *dflt, *tmp;

    dflt = NULL;
    for (tmp = maps, dflt = NULL; tmp != NULL;
         tmp = (XkbFile *) tmp->common.next)
    {
        if (tmp->flags & XkbLC_Default)
        {
            if (dflt == NULL)
                dflt = tmp;
            else
            {
                if (warningLevel > 2)
                {
                    WARN1("Multiple default components in %s\n",
                          (scanFile ? scanFile : "(unknown)"));
                    ACTION2("Using %s, ignoring %s\n",
                            (dflt->name ? dflt->name : "(first)"),
                            (tmp->name ? tmp->name : "(subsequent)"));
                }
                tmp->flags &= (~XkbLC_Default);
            }
        }
    }
    return;
}

int
XKBParseFile(FILE * file, XkbFile ** pRtrn)
{
    if (file)
    {
        scan_set_file(file);
        rtrnValue = NULL;
        if (yyparse() == 0)
        {
            *pRtrn = rtrnValue;
            CheckDefaultMap(rtrnValue);
            rtrnValue = NULL;
            return 1;
        }
        *pRtrn = NULL;
        return 0;
    }
    *pRtrn = NULL;
    return 1;
}

XkbFile *
CreateXKBFile(int type, char *name, ParseCommon * defs, unsigned flags)
{
    XkbFile *file;
    static int fileID;

    file = uTypedAlloc(XkbFile);
    if (file)
    {
        XkbEnsureSafeMapName(name);
        bzero(file, sizeof(XkbFile));
        file->type = type;
        file->topName = uStringDup(name);
        file->name = name;
        file->defs = defs;
        file->id = fileID++;
        file->compiled = False;
        file->flags = flags;
    }
    return file;
}

unsigned
StmtSetMerge(ParseCommon * stmt, unsigned merge)
{
    if ((merge == MergeAltForm) && (stmt->stmtType != StmtKeycodeDef))
    {
        yyerror("illegal use of 'alternate' merge mode");
        merge = MergeDefault;
    }
    return merge;
}
@


1.5
log
@Update to xkbcomp 1.3.0
@
text
@a31 1
#include <X11/Xalloca.h>
@


1.4
log
@Update to xkbcomp 1.2.4
@
text
@d559 2
a560 4
        if (over)
            uFree(over);
        if (under)
            uFree(under);
d798 1
a798 1
        yyin = file;
@


1.3
log
@Update to xkbcomp 1.2.3
@
text
@d751 1
a751 1
    fprintf(stderr, "0x%x", stmt);
d756 1
a756 1
            fprintf(stderr, "->0x%x", stmt->next);
@


1.2
log
@Update to xkbcomp 1.2.0.
ok matthieu@@
@
text
@d223 1
a223 1
InterpCreate(KeySym sym, ExprDef * match)
d232 4
a235 1
        def->sym = sym;
d628 1
a628 1
LookupKeysym(char *str, KeySym * sym_rtrn)
@


1.1
log
@Initial revision
@
text
@a0 1
/* $Xorg: parseutils.c,v 1.3 2000/08/17 19:54:33 cpqbld Exp $ */
a25 1
/* $XFree86$ */
a26 1
#define DEBUG_VAR_NOT_LOCAL
d33 2
d36 1
a36 1
XkbFile	*rtrnValue;
d39 1
a39 1
AppendStmt(ParseCommon *to,ParseCommon *append)
d41 1
a41 1
ParseCommon	*start= to;
d43 10
a52 8
    if (append==NULL)
	return to;
    while ((to!=NULL) && (to->next!=NULL)) {
	to= to->next;
    }
    if (to) {
	to->next= append;
	return start;
d58 1
a58 1
ExprCreate(unsigned op,unsigned type)
d60 13
a72 11
ExprDef *expr;
    expr= uTypedAlloc(ExprDef);
    if (expr) {
	expr->common.stmtType= StmtExpr;
	expr->common.next= NULL;
	expr->op= op;
	expr->type= type;
    }
    else {
	FATAL("Couldn't allocate expression in parser\n");
	/* NOTREACHED */
d78 1
a78 1
ExprCreateUnary(unsigned op,unsigned type,ExprDef *child)
d80 14
a93 12
ExprDef *expr;
    expr= uTypedAlloc(ExprDef);
    if (expr) {
	expr->common.stmtType= StmtExpr;
	expr->common.next= NULL;
	expr->op= op;
	expr->type= type;
	expr->value.child= child;
    }
    else {
	FATAL("Couldn't allocate expression in parser\n");
	/* NOTREACHED */
d99 1
a99 1
ExprCreateBinary(unsigned op,ExprDef *left,ExprDef *right)
d101 20
a120 17
ExprDef *expr;
    expr= uTypedAlloc(ExprDef);
    if (expr) {
	expr->common.stmtType= StmtExpr;
	expr->common.next= NULL;
	expr->op= op;
	if ((op==OpAssign)||(left->type==TypeUnknown))
	     expr->type= right->type;
	else if ((left->type==right->type)||(right->type==TypeUnknown))
	     expr->type= left->type;
	else expr->type= TypeUnknown;
	expr->value.binary.left= left;
	expr->value.binary.right= right;
    }
    else {
	FATAL("Couldn't allocate expression in parser\n");
	/* NOTREACHED */
d126 1
a126 1
KeycodeCreate(char *name,ExprDef *value)
d128 1
a128 1
KeycodeDef *def;
d130 13
a142 11
    def= uTypedAlloc(KeycodeDef);
    if (def) {
	def->common.stmtType= StmtKeycodeDef;
	def->common.next= NULL;
	strncpy(def->name,name,XkbKeyNameLength);
	def->name[XkbKeyNameLength]= '\0';
	def->value= value;
    }
    else {
	FATAL("Couldn't allocate key name definition in parser\n");
	/* NOTREACHED */
d148 1
a148 1
KeyAliasCreate(char *alias,char *real)
d150 1
a150 1
KeyAliasDef *def;
d152 14
a165 12
    def= uTypedAlloc(KeyAliasDef);
    if (def) {
	def->common.stmtType= StmtKeyAliasDef;
	def->common.next= NULL;
	strncpy(def->alias,alias,XkbKeyNameLength);
	def->alias[XkbKeyNameLength]= '\0';
	strncpy(def->real,real,XkbKeyNameLength);
	def->real[XkbKeyNameLength]= '\0';
    }
    else {
	FATAL("Couldn't allocate key alias definition in parser\n");
	/* NOTREACHED */
d171 1
a171 1
VModCreate(Atom name,ExprDef *value)
d173 13
a185 11
VModDef *def;
    def= uTypedAlloc(VModDef);
    if (def) {
	def->common.stmtType= StmtVModDef;
	def->common.next= NULL;
	def->name= name;
	def->value= value;
    }
    else {
	FATAL("Couldn't allocate variable definition in parser\n");
	/* NOTREACHED */
d191 1
a191 1
VarCreate(ExprDef *name,ExprDef *value)
d193 13
a205 11
VarDef *def;
    def= uTypedAlloc(VarDef);
    if (def) {
	def->common.stmtType= StmtVarDef;
	def->common.next= NULL;
	def->name= name;
	def->value= value;
    }
    else {
	FATAL("Couldn't allocate variable definition in parser\n");
	/* NOTREACHED */
d211 1
a211 1
BoolVarCreate(Atom nameToken,unsigned set)
d213 1
a213 1
ExprDef	*name,*value;
d215 5
a219 5
    name= ExprCreate(ExprIdent,TypeUnknown);
    name->value.str= nameToken;
    value= ExprCreate(ExprValue,TypeBoolean);
    value->value.uval= set;
    return VarCreate(name,value);
d223 1
a223 1
InterpCreate(KeySym sym,ExprDef *match)
d225 1
a225 1
InterpDef *def;
d227 12
a238 10
    def= uTypedAlloc(InterpDef);
    if (def) {
	def->common.stmtType= StmtInterpDef;
	def->common.next= NULL;
	def->sym= sym;
	def->match= match;
    }
    else {
	FATAL("Couldn't allocate interp definition in parser\n");
	/* NOTREACHED */
d244 1
a244 1
KeyTypeCreate(Atom name,VarDef *body)
d246 1
a246 1
KeyTypeDef *def;
d248 13
a260 11
    def= uTypedAlloc(KeyTypeDef);
    if (def) {
	def->common.stmtType= StmtKeyTypeDef;
	def->common.next= NULL;
	def->merge= MergeDefault;
	def->name= name;
	def->body= body;
    }
    else {
	FATAL("Couldn't allocate key type definition in parser\n");
	/* NOTREACHED */
d266 1
a266 1
SymbolsCreate(char *keyName,ExprDef *symbols)
d268 1
a268 1
SymbolsDef *def;
d270 14
a283 12
    def= uTypedAlloc(SymbolsDef);
    if (def) {
	def->common.stmtType= StmtSymbolsDef;
	def->common.next= NULL;
	def->merge= MergeDefault;
	bzero(def->keyName,5);
	strncpy(def->keyName,keyName,4);
	def->symbols= symbols;
    }
    else {
	FATAL("Couldn't allocate symbols definition in parser\n");
	/* NOTREACHED */
d289 1
a289 1
GroupCompatCreate(int group,ExprDef *val)
d291 1
a291 1
GroupCompatDef *def;
d293 13
a305 11
    def= uTypedAlloc(GroupCompatDef);
    if (def) {
	def->common.stmtType= StmtGroupCompatDef;
	def->common.next= NULL;
	def->merge= MergeDefault;
	def->group= group;
	def->def= val;
    }
    else {
	FATAL("Couldn't allocate group compat definition in parser\n");
	/* NOTREACHED */
d311 1
a311 1
ModMapCreate(Atom modifier,ExprDef *keys)
d313 1
a313 1
ModMapDef *def;
d315 13
a327 11
    def= uTypedAlloc(ModMapDef);
    if (def) {
	def->common.stmtType= StmtModMapDef;
	def->common.next= NULL;
	def->merge= MergeDefault;
	def->modifier= modifier;
	def->keys= keys;
    }
    else {
	FATAL("Couldn't allocate mod mask definition in parser\n");
	/* NOTREACHED */
d333 1
a333 1
IndicatorMapCreate(Atom name,VarDef *body)
d335 1
a335 1
IndicatorMapDef *def;
d337 13
a349 11
    def= uTypedAlloc(IndicatorMapDef);
    if (def) {
	def->common.stmtType= StmtIndicatorMapDef;
	def->common.next= NULL;
	def->merge= MergeDefault;
	def->name= name;
	def->body= body;
    }
    else {
	FATAL("Couldn't allocate indicator map definition in parser\n");
	/* NOTREACHED */
d355 1
a355 1
IndicatorNameCreate(int	ndx,ExprDef *name,Bool virtual)
d357 1
a357 1
IndicatorNameDef *def;
d359 14
a372 12
    def= uTypedAlloc(IndicatorNameDef);
    if (def) {
	def->common.stmtType= StmtIndicatorNameDef;
	def->common.next= NULL;
	def->merge= MergeDefault;
	def->ndx= ndx;
	def->name= name;
	def->virtual= virtual;
    }
    else {
	FATAL("Couldn't allocate indicator index definition in parser\n");
	/* NOTREACHED */
d378 1
a378 1
ActionCreate(Atom name,ExprDef *args)
d380 1
a380 1
ExprDef *act;
d382 9
a390 8
    act= uTypedAlloc(ExprDef);
    if (act) {
	act->common.stmtType= StmtExpr;
	act->common.next= NULL;
	act->op= ExprActionDecl;
	act->value.action.name= name;
        act->value.action.args= args;
	return act;
d397 1
a397 1
CreateKeysymList(KeySym sym)
d399 1
a399 1
ExprDef	 *def;
d401 11
a411 9
    def= ExprCreate(ExprKeysymList,TypeSymbols);
    if (def) {
	def->value.list.nSyms= 1;
	def->value.list.szSyms= 2;
	def->value.list.syms= uTypedCalloc(2,KeySym);
	if (def->value.list.syms!=NULL) {
	    def->value.list.syms[0]= sym;
	    return def;
	}
d418 1
a418 1
ShapeDeclCreate(Atom name,OutlineDef *outlines)
d420 2
a421 2
ShapeDef *	shape;
OutlineDef *	ol;
d423 15
a437 13
    shape= uTypedAlloc(ShapeDef);
    if (shape!=NULL) {
	bzero(shape,sizeof(ShapeDef));
	shape->common.stmtType=	StmtShapeDef;
	shape->common.next=	NULL;
	shape->merge=		MergeDefault;
	shape->name=		name;
	shape->nOutlines=	0;
	shape->outlines=	outlines;
	for (ol=outlines;ol!=NULL;ol= (OutlineDef *)ol->common.next) {
	    if (ol->nPoints>0)
		shape->nOutlines++;
	}
d443 1
a443 1
OutlineCreate(Atom field,ExprDef *points)
d445 2
a446 2
OutlineDef *	outline;
ExprDef *	pt;
d448 16
a463 13
    outline= uTypedAlloc(OutlineDef);
    if (outline!=NULL) {
	bzero(outline,sizeof(OutlineDef));
	outline->common.stmtType= 	StmtOutlineDef;
	outline->common.next=		NULL;
	outline->field=		field;
	outline->nPoints=	0;
	if (points->op==ExprCoord) {
	    for (pt=points;pt!=NULL;pt= (ExprDef *)pt->common.next) {
		outline->nPoints++;
	    }
	}
	outline->points= points;
d469 1
a469 1
KeyDeclCreate(char *name,ExprDef *expr)
d471 1
a471 1
KeyDef *	key;
d473 10
a482 7
    key= uTypedAlloc(KeyDef);
    if (key!=NULL) {
	bzero(key,sizeof(KeyDef));
	key->common.stmtType= StmtKeyDef;
	key->common.next= NULL;
	if (name)	key->name= name;
	else		key->expr= expr;
d488 1
a488 1
KeyDeclMerge(KeyDef *into,KeyDef *from)
d490 3
a492 2
    into->expr= (ExprDef *)AppendStmt(&into->expr->common,&from->expr->common);
    from->expr= NULL;
d498 1
a498 1
RowDeclCreate(KeyDef *	keys)
d500 2
a501 2
RowDef *	row;
KeyDef *	key;
d503 13
a515 11
    row= uTypedAlloc(RowDef);
    if (row!=NULL) {
	bzero(row,sizeof(RowDef));
	row->common.stmtType= StmtRowDef;
	row->common.next= NULL;
	row->nKeys= 0;
	row->keys= keys;
	for (key=keys;key!=NULL;key=(KeyDef *)key->common.next) {
	    if (key->common.stmtType==StmtKeyDef)
		row->nKeys++;
	}
d521 1
a521 1
SectionDeclCreate(Atom name,RowDef *rows)
d523 2
a524 2
SectionDef *	section;
RowDef *	row;
d526 14
a539 12
    section= uTypedAlloc(SectionDef);
    if (section!=NULL) {
	bzero(section,sizeof(SectionDef));
	section->common.stmtType= StmtSectionDef;
	section->common.next= NULL;
	section->name= name;
	section->nRows= 0;
	section->rows= rows;
	for (row=rows;row!=NULL;row=(RowDef *)row->common.next) {
	    if (row->common.stmtType==StmtRowDef)
		section->nRows++;
	}
d545 1
a545 1
OverlayKeyCreate(char *	under,char *over)
d547 1
a547 1
OverlayKeyDef *	key;
d549 11
a559 8
    key= uTypedAlloc(OverlayKeyDef);
    if (key!=NULL) {
	bzero(key,sizeof(OverlayKeyDef));
	key->common.stmtType= StmtOverlayKeyDef;
	strncpy(key->over,over,XkbKeyNameLength);
	strncpy(key->under,under,XkbKeyNameLength);
	if (over)	uFree(over);
	if (under)	uFree(under);
d565 1
a565 1
OverlayDeclCreate(Atom name,OverlayKeyDef *keys)
d567 2
a568 2
OverlayDef *	ol;
OverlayKeyDef *	key;
d570 12
a581 9
    ol= uTypedAlloc(OverlayDef);
    if (ol!=NULL) {
	bzero(ol,sizeof(OverlayDef));
	ol->common.stmtType= 	StmtOverlayDef;
	ol->name=		name;
	ol->keys=		keys;
	for (key=keys;key!=NULL;key=(OverlayKeyDef *)key->common.next) {
	    ol->nKeys++;
	}
d587 1
a587 1
DoodadCreate(unsigned type,Atom name,VarDef *body)
d589 1
a589 1
DoodadDef *	doodad;
d591 9
a599 8
    doodad= uTypedAlloc(DoodadDef);
    if (doodad!=NULL) {
	bzero(doodad,sizeof(DoodadDef));
	doodad->common.stmtType= StmtDoodadDef;
	doodad->common.next= NULL;
	doodad->type= type;
	doodad->name= name;
	doodad->body= body;
d605 1
a605 1
AppendKeysymList(ExprDef *list,KeySym sym)
d607 12
a618 10
    if (list->value.list.nSyms>=list->value.list.szSyms) {
	list->value.list.szSyms*=2;
	list->value.list.syms= uTypedRecalloc(list->value.list.syms,
						list->value.list.nSyms,
						list->value.list.szSyms,
						KeySym);
	if (list->value.list.syms==NULL) {
	    FATAL("Couldn't resize list of symbols for append\n");
	    return NULL;
	}
d620 1
a620 1
    list->value.list.syms[list->value.list.nSyms++]= sym;
d625 1
a625 1
LookupKeysym(char *str,KeySym *sym_rtrn)
d627 2
a628 1
KeySym sym;
d630 24
a653 12
    if ((!str)||(uStrCaseCmp(str,"any")==0)||(uStrCaseCmp(str,"nosymbol")==0)) {
	*sym_rtrn= NoSymbol;
	return 1;
    }
    else if ((uStrCaseCmp(str,"none")==0)||(uStrCaseCmp(str,"voidsymbol")==0)) {
	*sym_rtrn= XK_VoidSymbol;
	return 1;
    }
    sym= XStringToKeysym(str);
    if (sym!=NoSymbol) {
	*sym_rtrn= sym;
	return 1;
d659 1
a659 1
IncludeCreate(char *str,unsigned merge)
d661 59
a719 48
IncludeStmt *	incl,*first;
char *		file,*map,*stmt,*tmp, *extra_data;
char 		nextop;
Bool		haveSelf;

    haveSelf= False;
    incl= first= NULL;
    file= map= NULL;
    tmp= str;
    stmt= uStringDup(str);
    while ((tmp)&&(*tmp)) {
	if (XkbParseIncludeMap(&tmp,&file,&map,&nextop,&extra_data)) {
	    if ((file==NULL)&&(map==NULL)) {
		if (haveSelf)
		    goto BAIL;
		haveSelf= True;
	    }
	    if (first==NULL)
		first= incl= uTypedAlloc(IncludeStmt);
	    else {
		incl->next= uTypedAlloc(IncludeStmt);
		incl= incl->next;
	    }
	    if (incl) {
		incl->common.stmtType= StmtInclude;
		incl->common.next= NULL;
		incl->merge= merge;
		incl->stmt= NULL;
		incl->file= file;
		incl->map= map;
		incl->modifier= extra_data;
		incl->path= NULL;
		incl->next= NULL;
	    }
	    else {
		WSGO("Allocation failure in IncludeCreate\n");
		ACTION("Using only part of the include\n");
		break;
	    }
	    if (nextop=='|')	merge= MergeAugment;
	    else		merge= MergeOverride;
	}
	else {
	    goto BAIL;
	}
    }
    if (first)		first->stmt= stmt;
    else if (stmt)	uFree(stmt);
d721 2
a722 2
BAIL:
    ERROR1("Illegal include statement \"%s\"\n",stmt);
d724 14
a737 9
    while (first) {
	incl= first->next;
	if (first->file) uFree(first->file);
	if (first->map) uFree(first->map);
	if (first->modifier) uFree(first->modifier);
	if (first->path) uFree(first->path);
	first->file= first->map= first->path= NULL;
	uFree(first);
	first= incl;
d740 1
a740 1
	uFree(stmt);
d746 1
a746 1
PrintStmtAddrs(ParseCommon *stmt)
d748 9
a756 6
    fprintf(stderr,"0x%x",stmt);
    if (stmt) {
	do {
	    fprintf(stderr,"->0x%x",stmt->next);
	    stmt= stmt->next;
	} while (stmt);
d758 1
a758 1
    fprintf(stderr,"\n");
d763 1
a763 1
CheckDefaultMap(XkbFile	*maps)
d765 1
a765 1
XkbFile * dflt,*tmp;
d767 21
a787 16
    dflt= NULL;
    for (tmp=maps,dflt=NULL;tmp!=NULL;tmp=(XkbFile *)tmp->common.next) {
	if (tmp->flags&XkbLC_Default) {
	    if (dflt==NULL) 
		dflt= tmp;
	    else {
		if (warningLevel>2) {
		    WARN1("Multiple default components in %s\n",
					(scanFile?scanFile:"(unknown)"));
		    ACTION2("Using %s, ignoring %s\n",
					(dflt->name?dflt->name:"(first)"),
					(tmp->name?tmp->name:"(subsequent)"));
		}
		tmp->flags&= (~XkbLC_Default);
	    }
	}
d793 1
a793 1
XKBParseFile(FILE *file,XkbFile	**pRtrn)
d795 13
a807 11
    if (file) {
	yyin= file;
	rtrnValue= NULL;
	if (yyparse()==0) {
	    *pRtrn= rtrnValue;
	    CheckDefaultMap(rtrnValue);
	    rtrnValue= NULL;
	    return 1;
	}
	*pRtrn= NULL;
	return 0;
d809 1
a809 1
    *pRtrn= NULL;
d814 1
a814 1
CreateXKBFile(int type,char *name,ParseCommon *defs,unsigned flags)
d816 2
a817 2
XkbFile *	file;
static int	fileID;
d819 12
a830 11
    file= uTypedAlloc(XkbFile);
    if (file) {
	XkbEnsureSafeMapName(name);
	bzero(file,sizeof(XkbFile));
	file->type= type;
	file->topName= uStringDup(name);
	file->name= name;
	file->defs= defs;
	file->id= fileID++;
	file->compiled= False;
	file->flags= flags;
d835 2
a836 2
unsigned 
StmtSetMerge(ParseCommon *stmt,unsigned	merge)
d838 4
a841 3
    if ((merge==MergeAltForm) && (stmt->stmtType!=StmtKeycodeDef)) {
	yyerror("illegal use of 'alternate' merge mode");
	merge= MergeDefault;
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
