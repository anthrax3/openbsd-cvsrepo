head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.01.25.11.44.55;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	DvhrPZs0ISjOjNfk;

1.3
date	2011.01.11.20.56.40;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.20.16.32.06;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.43.52;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.43.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xkbcomp 1.3.0
@
text
@
  /*\
   *
   *                          COPYRIGHT 1990
   *                    DIGITAL EQUIPMENT CORPORATION
   *                       MAYNARD, MASSACHUSETTS
   *                        ALL RIGHTS RESERVED.
   *
   * THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE AND
   * SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
   * DIGITAL MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE 
   * FOR ANY PURPOSE.  IT IS SUPPLIED "AS IS" WITHOUT EXPRESS OR IMPLIED 
   * WARRANTY.
   *
   * IF THE SOFTWARE IS MODIFIED IN A MANNER CREATING DERIVATIVE COPYRIGHT
   * RIGHTS, APPROPRIATE LEGENDS MAY BE PLACED ON THE DERIVATIVE WORK IN
   * ADDITION TO THAT SET FORTH ABOVE.
   *
   * Permission to use, copy, modify, and distribute this software and its
   * documentation for any purpose and without fee is hereby granted, provided
   * that the above copyright notice appear in all copies and that both that
   * copyright notice and this permission notice appear in supporting
   * documentation, and that the name of Digital Equipment Corporation not be
   * used in advertising or publicity pertaining to distribution of the 
   * software without specific, written prior permission.
   \*/

#include 	"utils.h"
#include	<ctype.h>
#include	<stdlib.h>
#include	<stdarg.h>

/***====================================================================***/

Opaque
uAlloc(unsigned size)
{
    return ((Opaque) malloc(size));
}

/***====================================================================***/

Opaque
uCalloc(unsigned n, unsigned size)
{
    return ((Opaque) calloc(n, size));
}

/***====================================================================***/

Opaque
uRealloc(Opaque old, unsigned newSize)
{
    if (old == NULL)
        return ((Opaque) malloc(newSize));
    else
        return ((Opaque) realloc((char *) old, newSize));
}

/***====================================================================***/

Opaque
uRecalloc(Opaque old, unsigned nOld, unsigned nNew, unsigned itemSize)
{
    char *rtrn;

    if (old == NULL)
        rtrn = (char *) calloc(nNew, itemSize);
    else
    {
        rtrn = (char *) realloc((char *) old, nNew * itemSize);
        if ((rtrn) && (nNew > nOld))
        {
            bzero(&rtrn[nOld * itemSize], (nNew - nOld) * itemSize);
        }
    }
    return (Opaque) rtrn;
}

/***====================================================================***/

void
uFree(Opaque ptr)
{
    if (ptr != (Opaque) NULL)
        free((char *) ptr);
    return;
}

/***====================================================================***/
/***			PRINT FUNCTIONS					***/
/***====================================================================***/

FILE *uDebugFile = NULL;
int uDebugIndentLevel = 0;
int uDebugIndentSize = 4;

Boolean
uSetDebugFile(char *name)
{
    if ((uDebugFile != NULL) && (uDebugFile != stderr))
    {
        fprintf(uDebugFile, "switching to %s\n", name ? name : "stderr");
        fclose(uDebugFile);
    }
    if (name != NullString)
        uDebugFile = fopen(name, "w");
    else
        uDebugFile = stderr;
    if (uDebugFile == NULL)
    {
        uDebugFile = stderr;
        return (False);
    }
    return (True);
}

void
uDebug(char *s, ...)
{
    int i;
    va_list args;

    for (i = (uDebugIndentLevel * uDebugIndentSize); i > 0; i--)
    {
        putc(' ', uDebugFile);
    }
    va_start(args, s);
    vfprintf(uDebugFile, s, args);
    va_end(args);
    fflush(uDebugFile);
}

void
uDebugNOI(char *s, ...)
{
    va_list args;

    va_start(args, s);
    vfprintf(uDebugFile, s, args);
    va_end(args);
    fflush(uDebugFile);
}

/***====================================================================***/

static FILE *errorFile = NULL;
static int outCount = 0;
static char *preMsg = NULL;
static char *postMsg = NULL;
static char *prefix = NULL;

Boolean
uSetErrorFile(char *name)
{
    if ((errorFile != NULL) && (errorFile != stderr))
    {
        fprintf(errorFile, "switching to %s\n", name ? name : "stderr");
        fclose(errorFile);
    }
    if (name != NullString)
        errorFile = fopen(name, "w");
    else
        errorFile = stderr;
    if (errorFile == NULL)
    {
        errorFile = stderr;
        return (False);
    }
    return (True);
}

void
uInformation(const char *s, ...)
{
    va_list args;

    va_start(args, s);
    vfprintf(errorFile, s, args);
    va_end(args);
    fflush(errorFile);
}

/***====================================================================***/

void
uAction(const char *s, ...)
{
    va_list args;

    if (prefix != NULL)
        fprintf(errorFile, "%s", prefix);
    fprintf(errorFile, "                  ");
    va_start(args, s);
    vfprintf(errorFile, s, args);
    va_end(args);
    fflush(errorFile);
}

/***====================================================================***/

void
uWarning(const char *s, ...)
{
    va_list args;

    if ((outCount == 0) && (preMsg != NULL))
        fprintf(errorFile, "%s\n", preMsg);
    if (prefix != NULL)
        fprintf(errorFile, "%s", prefix);
    fprintf(errorFile, "Warning:          ");
    va_start(args, s);
    vfprintf(errorFile, s, args);
    va_end(args);
    fflush(errorFile);
    outCount++;
}

/***====================================================================***/

void
uError(const char *s, ...)
{
    va_list args;

    if ((outCount == 0) && (preMsg != NULL))
        fprintf(errorFile, "%s\n", preMsg);
    if (prefix != NULL)
        fprintf(errorFile, "%s", prefix);
    fprintf(errorFile, "Error:            ");
    va_start(args, s);
    vfprintf(errorFile, s, args);
    va_end(args);
    fflush(errorFile);
    outCount++;
}

/***====================================================================***/

void
uFatalError(const char *s, ...)
{
    va_list args;

    if ((outCount == 0) && (preMsg != NULL))
        fprintf(errorFile, "%s\n", preMsg);
    if (prefix != NULL)
        fprintf(errorFile, "%s", prefix);
    fprintf(errorFile, "Fatal Error:      ");
    va_start(args, s);
    vfprintf(errorFile, s, args);
    va_end(args);
    fprintf(errorFile, "                  Exiting\n");
    fflush(errorFile);
    outCount++;
    exit(1);
    /* NOTREACHED */
}

/***====================================================================***/

void
uInternalError(const char *s, ...)
{
    va_list args;

    if ((outCount == 0) && (preMsg != NULL))
        fprintf(errorFile, "%s\n", preMsg);
    if (prefix != NULL)
        fprintf(errorFile, "%s", prefix);
    fprintf(errorFile, "Internal error:   ");
    va_start(args, s);
    vfprintf(errorFile, s, args);
    va_end(args);
    fflush(errorFile);
    outCount++;
}

void
uSetPreErrorMessage(char *msg)
{
    outCount = 0;
    preMsg = msg;
    return;
}

void
uSetPostErrorMessage(char *msg)
{
    postMsg = msg;
    return;
}

void
uSetErrorPrefix(char *pre)
{
    prefix = pre;
    return;
}

void
uFinishUp(void)
{
    if ((outCount > 0) && (postMsg != NULL))
        fprintf(errorFile, "%s\n", postMsg);
    return;
}

/***====================================================================***/

#ifndef HAVE_STRDUP
char *
uStringDup(const char *str)
{
    char *rtrn;

    if (str == NULL)
        return NULL;
    rtrn = (char *) uAlloc(strlen(str) + 1);
    strcpy(rtrn, str);
    return rtrn;
}
#endif

#ifndef HAVE_STRCASECMP
int
uStrCaseCmp(const char *str1, const char *str2)
{
    char buf1[512], buf2[512];
    char c, *s;
    register int n;

    for (n = 0, s = buf1; (c = *str1++); n++)
    {
        if (isupper(c))
            c = tolower(c);
        if (n > 510)
            break;
        *s++ = c;
    }
    *s = '\0';
    for (n = 0, s = buf2; (c = *str2++); n++)
    {
        if (isupper(c))
            c = tolower(c);
        if (n > 510)
            break;
        *s++ = c;
    }
    *s = '\0';
    return (strcmp(buf1, buf2));
}

int
uStrCasePrefix(const char *my_prefix, char *str)
{
    char c1;
    char c2;
    while (((c1 = *my_prefix) != '\0') && ((c2 = *str) != '\0'))
    {
        if (isupper(c1))
            c1 = tolower(c1);
        if (isupper(c2))
            c2 = tolower(c2);
        if (c1 != c2)
            return 0;
        my_prefix++;
        str++;
    }
    if (c1 != '\0')
        return 0;
    return 1;
}

#endif
@


1.3
log
@Update to xkbcomp 1.2.0.
ok matthieu@@
@
text
@a90 59
/***                  FUNCTION ENTRY TRACKING                           ***/
/***====================================================================***/

static FILE *entryFile = NULL;
int uEntryLevel;

Boolean
uSetEntryFile(char *name)
{
    if ((entryFile != NULL) && (entryFile != stderr))
    {
        fprintf(entryFile, "switching to %s\n", name ? name : "stderr");
        fclose(entryFile);
    }
    if (name != NullString)
        entryFile = fopen(name, "w");
    else
        entryFile = stderr;
    if (entryFile == NULL)
    {
        entryFile = stderr;
        return (False);
    }
    return (True);
}

void
uEntry(int l, char *s, ...)
{
    int i;
    va_list args;

    for (i = 0; i < uEntryLevel; i++)
    {
        putc(' ', entryFile);
    }
    va_start(args, s);
    vfprintf(entryFile, s, args);
    va_end(args);
    uEntryLevel += l;
}

void
uExit(int l, char *rtVal)
{
    int i;

    uEntryLevel -= l;
    if (uEntryLevel < 0)
        uEntryLevel = 0;
    for (i = 0; i < uEntryLevel; i++)
    {
        putc(' ', entryFile);
    }
    fprintf(entryFile, "---> %p\n", rtVal);
    return;
}

/***====================================================================***/
@


1.2
log
@Update to xkbcomp 1.0.4
@
text
@a2 1
   * $Xorg: utils.c,v 1.4 2000/08/17 19:54:33 cpqbld Exp $
d4 4
a7 4
   *		              COPYRIGHT 1990
   *		        DIGITAL EQUIPMENT CORPORATION
   *		           MAYNARD, MASSACHUSETTS
   *			    ALL RIGHTS RESERVED.
d26 1
a26 2
  \*/
/* $XFree86: xc/programs/xkbcomp/utils.c,v 3.6 2001/07/25 15:05:24 dawes Exp $ */
d38 1
a38 1
    return((Opaque)malloc(size));
d44 1
a44 1
uCalloc(unsigned n,unsigned size)
d46 1
a46 1
    return((Opaque)calloc(n,size));
d52 1
a52 1
uRealloc(Opaque old,unsigned newSize)
d54 4
a57 3
    if (old==NULL)
	 return((Opaque)malloc(newSize));
    else return((Opaque)realloc((char *)old,newSize));
d63 1
a63 1
uRecalloc(Opaque old,unsigned nOld,unsigned nNew,unsigned itemSize)
d65 1
a65 1
char *rtrn;
d67 9
a75 7
    if (old==NULL)
	 rtrn= (char *)calloc(nNew,itemSize);
    else {
	rtrn= (char *)realloc((char *)old,nNew*itemSize);
   	if ((rtrn)&&(nNew>nOld)) {
	    bzero(&rtrn[nOld*itemSize],(nNew-nOld)*itemSize);
	}
d77 1
a77 1
    return (Opaque)rtrn;
d85 2
a86 2
    if (ptr!=(Opaque)NULL)
	free((char *)ptr);
d94 2
a95 2
static	FILE	*entryFile=	NULL;
	int	 uEntryLevel;
d100 4
a103 3
    if ((entryFile!=NULL)&&(entryFile!=stderr)) {
	fprintf(entryFile,"switching to %s\n",name?name:"stderr");
	fclose(entryFile);
d105 8
a112 5
    if (name!=NullString)	entryFile=	fopen(name,"w");
    else			entryFile=	stderr;
    if (entryFile==NULL) {
	entryFile=	stderr;
	return(False);
d114 1
a114 1
    return(True);
d118 1
a118 1
uEntry(int l,char *s,...)
d120 2
a121 2
int	i;
va_list args;
d123 3
a125 2
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
d128 1
a128 1
    vfprintf(entryFile,s,args);
d130 1
a130 1
    uEntryLevel+= l;
d134 1
a134 1
uExit(int l,char *rtVal)
d136 1
a136 1
int	i;
d138 6
a143 4
    uEntryLevel-= l;
    if (uEntryLevel<0)	uEntryLevel=	0;
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
d145 1
a145 1
    fprintf(entryFile,"---> %p\n",rtVal);
d153 3
a155 3
	FILE	*uDebugFile=		NULL;
	int	 uDebugIndentLevel=	0;
	int	 uDebugIndentSize=	4;
d160 4
a163 3
    if ((uDebugFile!=NULL)&&(uDebugFile!=stderr)) {
	fprintf(uDebugFile,"switching to %s\n",name?name:"stderr");
	fclose(uDebugFile);
d165 8
a172 5
    if (name!=NullString)	uDebugFile=	fopen(name,"w");
    else			uDebugFile=	stderr;
    if (uDebugFile==NULL) {
	uDebugFile=	stderr;
	return(False);
d174 1
a174 1
    return(True);
d178 1
a178 1
uDebug(char *s,...)
d180 2
a181 2
int	i;
va_list	args;
d183 3
a185 2
    for (i=(uDebugIndentLevel*uDebugIndentSize);i>0;i--) {
	putc(' ',uDebugFile);
d188 1
a188 1
    vfprintf(uDebugFile,s,args);
d194 1
a194 1
uDebugNOI(char *s,...)
d196 1
a196 1
va_list args;
d199 1
a199 1
    vfprintf(uDebugFile,s,args);
d206 5
a210 5
static	FILE	*errorFile=	NULL;
static	int	 outCount=	0;
static	char	*preMsg=	NULL;
static	char	*postMsg=	NULL;
static	char	*prefix=	NULL;
d215 13
a227 9
    if ((errorFile!=NULL)&&(errorFile!=stderr)) {
	fprintf(errorFile,"switching to %s\n",name?name:"stderr");
	fclose(errorFile);
    }
    if (name!=NullString)	errorFile=	fopen(name,"w");
    else			errorFile=	stderr;
    if (errorFile==NULL) {
	errorFile=	stderr;
	return(False);
d229 1
a229 1
    return(True);
d235 1
a235 1
va_list args;
d238 1
a238 1
    vfprintf(errorFile,s,args);
d248 1
a248 1
va_list args;
d250 3
a252 3
    if (prefix!=NULL)
	fprintf(errorFile,"%s",prefix);
    fprintf(errorFile,"                  ");
d254 1
a254 1
    vfprintf(errorFile,s,args);
d264 1
a264 1
va_list args;
d266 5
a270 5
    if ((outCount==0)&&(preMsg!=NULL))
	fprintf(errorFile,"%s\n",preMsg);
    if (prefix!=NULL)
	fprintf(errorFile,"%s",prefix);
    fprintf(errorFile,"Warning:          ");
d272 1
a272 1
    vfprintf(errorFile,s,args);
d283 1
a283 1
va_list args;
d285 5
a289 5
    if ((outCount==0)&&(preMsg!=NULL))
	fprintf(errorFile,"%s\n",preMsg);
    if (prefix!=NULL)
	fprintf(errorFile,"%s",prefix);
    fprintf(errorFile,"Error:            ");
d291 1
a291 1
    vfprintf(errorFile,s,args);
d302 1
a302 1
va_list args;
d304 5
a308 5
    if ((outCount==0)&&(preMsg!=NULL))
	fprintf(errorFile,"%s\n",preMsg);
    if (prefix!=NULL)
	fprintf(errorFile,"%s",prefix);
    fprintf(errorFile,"Fatal Error:      ");
d310 1
a310 1
    vfprintf(errorFile,s,args);
d312 1
a312 1
    fprintf(errorFile,"                  Exiting\n");
d324 1
a324 1
va_list args;
d326 5
a330 5
    if ((outCount==0)&&(preMsg!=NULL))
	fprintf(errorFile,"%s\n",preMsg);
    if (prefix!=NULL)
	fprintf(errorFile,"%s",prefix);
    fprintf(errorFile,"Internal error:   ");
d332 1
a332 1
    vfprintf(errorFile,s,args);
d341 2
a342 2
    outCount= 0;
    preMsg= msg;
d349 1
a349 1
    postMsg= msg;
d356 1
a356 1
    prefix= pre;
d363 2
a364 2
    if ((outCount>0)&&(postMsg!=NULL))
	fprintf(errorFile,"%s\n",postMsg);
d374 1
a374 1
char *rtrn;
d376 4
a379 4
    if (str==NULL)
	return NULL;
    rtrn= (char *)uAlloc(strlen(str)+1);
    strcpy(rtrn,str);
d388 1
a388 1
    char buf1[512],buf2[512];
d392 7
a398 6
    for (n=0, s = buf1; (c = *str1++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
d401 7
a407 6
    for (n=0, s = buf2; (c = *str2++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
d418 10
a427 6
    while (((c1=*my_prefix)!='\0')&&((c2=*str)!='\0')) {
	if (isupper(c1))	c1= tolower(c1);
	if (isupper(c2))	c2= tolower(c2);
	if (c1!=c2)
	    return 0;
	my_prefix++; str++;
d429 2
a430 2
    if (c1!='\0')
	return 0;
@


1.1
log
@Initial revision
@
text
@d216 1
a216 1
uInformation(char *s, ...)
d229 1
a229 1
uAction(char *s, ...)
d245 1
a245 1
uWarning(char *s, ...)
d264 1
a264 1
uError(char *s, ...)
d283 1
a283 1
uFatalError(char *s, ...)
d305 1
a305 1
uInternalError(char *s, ...)
d355 1
a355 1
uStringDup(char *str)
d369 1
a369 1
uStrCaseCmp(char *str1,char *str2)
d395 1
a395 1
uStrCasePrefix(char *my_prefix,char *str)
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
