head	1.18;
access;
symbols
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.8
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.16.0.6
	OPENBSD_5_5_BASE:1.16
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.6
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	version_3:1.1.1.1
	cwm:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.09.16.17.58.25;	author okan;	state Exp;
branches;
next	1.17;
commitid	5LZITTZspXcfHMXf;

1.17
date	2015.01.19.14.54.16;	author okan;	state Exp;
branches;
next	1.16;
commitid	kLADTGYX3gw0Sf2m;

1.16
date	2012.11.09.03.52.02;	author okan;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.25.15.10.24;	author okan;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.24.05.40.09;	author okan;	state Exp;
branches;
next	1.13;

1.13
date	2011.05.11.13.53.51;	author okan;	state Exp;
branches;
next	1.12;

1.12
date	2009.12.15.04.10.42;	author okan;	state Exp;
branches;
next	1.11;

1.11
date	2009.12.15.03.24.36;	author okan;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.11.14.21.28;	author okan;	state Exp;
branches;
next	1.9;

1.9
date	2008.05.15.22.18.00;	author oga;	state Exp;
branches;
next	1.8;

1.8
date	2008.04.15.21.20.56;	author oga;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.15.20.26.50;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.15.20.24.41;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.20.13.00.18;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.16.11.39.20;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.11.16.06.44;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.28.16.35.52;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.27.17.58.48;	author bernd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.04.27.17.58.48;	author bernd;	state Exp;
branches;
next	;


desc
@@


1.18
log
@On execwm, we should properly release resources before exec'ing into a
new window manager; so allow CWM_EXEC_WM to assign new wm to wm_argv and
pass through cwm_status (now EXECWM) so that x_teardown() gets called
before exec'ing the new window manager.  Removes the need for a separate
x_restart() now, using new wm_argv; and consolidates errno for execvp.
@
text
@/*
 * calmwm - the calm window manager
 *
 * Copyright (c) 2004 Marius Aamodt Eriksen <marius@@monkey.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * $OpenBSD: util.c,v 1.17 2015/01/19 14:54:16 okan Exp $
 */

#include <sys/types.h>
#include <sys/queue.h>

#include <err.h>
#include <errno.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "calmwm.h"

void
u_spawn(char *argstr)
{
	switch (fork()) {
	case 0:
		u_exec(argstr);
		break;
	case -1:
		warn("fork");
	default:
		break;
	}
}

void
u_exec(char *argstr)
{
#define MAXARGLEN 20
	char	*args[MAXARGLEN], **ap = args;
	char	**end = &args[MAXARGLEN - 1], *tmp;
	char	*s = argstr;

	while (ap < end && (*ap = strsep(&argstr, " \t")) != NULL) {
		if (**ap == '\0')
			continue;
		ap++;
		if (argstr != NULL) {
			/* deal with quoted strings */
			switch(argstr[0]) {
			case '"':
			case '\'':
				if ((tmp = strchr(argstr + 1, argstr[0]))
				    != NULL) {
					*(tmp++) = '\0';
					*(ap++) = ++argstr;
					argstr = tmp;
				}
				break;
			default:
				break;
			}
		}
	}
	*ap = NULL;

	(void)setsid();
	(void)execvp(args[0], args);
	err(1, "%s", s);
}

char *
u_argv(char * const *argv)
{
	size_t	 siz = 0;
	int	 i;
	char	*p;

	if (argv == 0)
		return(NULL);

	for (i = 0; argv[i]; i++)
		siz += strlen(argv[i]) + 1;
	if (siz == 0)
		return(NULL);

	p = xmalloc(siz);
	strlcpy(p, argv[0], siz);
	for (i = 1; argv[i]; i++) {
		strlcat(p, " ", siz);
		strlcat(p, argv[i], siz);
	}
	return(p);
}
@


1.17
log
@Switch to limits.h; replace MAXPATHLEN and MAXHOSTNAMELEN with PATH_MAX
and HOST_NAME_MAX+1, respectively.

ok doug@@
@
text
@d18 1
a18 1
 * $OpenBSD: util.c,v 1.16 2012/11/09 03:52:02 okan Exp $
a33 2
#define MAXARGLEN 20

a39 1
		err(1, "%s", argstr);
d51 1
d54 1
d77 1
a78 1
	*ap = NULL;
d81 25
@


1.16
log
@sort
@
text
@d18 1
a18 1
 * $OpenBSD: util.c,v 1.15 2011/07/25 15:10:24 okan Exp $
d21 1
a21 1
#include <sys/param.h>
d26 1
@


1.15
log
@We are inconsistent when it comes to function returns, so just go all
the way with the cwm specific parts.

ok oga@@
@
text
@d18 1
a18 1
 * $OpenBSD: util.c,v 1.14 2011/06/24 05:40:09 okan Exp $
d26 1
a28 1
#include <stdio.h>
@


1.14
log
@alter a few function returns and prototypes; found by lint.

ok oga@@
@
text
@d18 1
a18 1
 * $OpenBSD: util.c,v 1.13 2011/05/11 13:53:51 okan Exp $
d79 2
a80 2
	setsid();
	execvp(args[0], args);
@


1.13
log
@tag and comment cleanup; ok oga@@
@
text
@d18 1
a18 1
 * $OpenBSD: util.c,v 1.12 2009/12/15 04:10:42 okan Exp $
d35 1
a35 1
int
a44 1
		return (-1);
a47 2

	return (0);
@


1.12
log
@pull all non-X11 headers from calmwm.h and place them only where they
are required.

encourged to go all the way by oga@@
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.11 2009/12/15 03:24:36 okan Exp $
@


1.11
log
@merge the 2 common header files; specific includes to be pulled out as
separate commits.

ok oga@@
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.10 2008/07/11 14:21:28 okan Exp $
d20 10
@


1.10
log
@spacing, declaration lineup to be consistent throughout cwm,
readability, and a bit of knf.

ok oga@@
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.9 2008/05/15 22:18:00 oga Exp $
a20 1
#include "headers.h"
@


1.9
log
@KNF, no binary change.

From Pierre Riteau. Thanks!
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.8 2008/04/15 21:20:56 oga Exp $
d47 2
a48 3
	char *args[MAXARGLEN], **ap = args;
	char **end = &args[MAXARGLEN - 1];
	char *tmp;
@


1.8
log
@make the argument parser for commands accept quoted strings, while i'm
there make u_spawn use exec_wm (renamed to u_exec) for it's execution to
remove duplicated code.

This means constructs like this work in .cwmrc:

bind CM-t "ssh -Y 192.168.1.2 \"xterm -e top\""

or alternatively:

bind CM-t "ssh -Y 192.168.1.2 'xterm -e top'"

"in it goes" okan@@.
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.7 2008/04/15 20:26:50 oga Exp $
d52 1
a52 1
		if(**ap == '\0')
d54 1
a54 1
 		ap++;
@


1.7
log
@Kill dirent_isdir() and dirent_islink() nothing used them since the new
parser went in.

ok okan.
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.6 2008/04/15 20:24:41 oga Exp $
a28 3
	char *args[MAXARGLEN], **ap;
	char **end = &args[MAXARGLEN - 1];

d31 2
a32 8
		ap = args;
		while (ap < end && (*ap = strsep(&argstr, " \t")) != NULL)
			ap++;

		*ap = NULL;
		setsid();
		execvp(args[0], args);
		err(1, args[0]);
d45 1
a45 1
exec_wm(char *argstr)
d49 1
d51 21
a71 2
	while (ap < end && (*ap = strsep(&argstr, " \t")) != NULL)
		ap++;
a75 1
	warn(args[0]);
@


1.6
log
@hit it with the knf stick.
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.5 2008/02/20 13:00:18 oga Exp $
a65 28
}

int
dirent_isdir(char *filename)
{
	struct stat buffer;
	int return_value;

	return_value = stat(filename, &buffer);

	if (return_value == -1)
		return (0);
	else
		return (S_ISDIR(buffer.st_mode));
}

int
dirent_islink(char *filename)
{
	struct stat buffer;
	int return_value;

	return_value = lstat(filename, &buffer);

	if (return_value == -1)
		return (0);
	else
		return (S_ISLNK(buffer.st_mode));
@


1.5
log
@add exec_wm to calmwm.h, it was missing (bad ian@@!)

Also, exec_wm() currenty err()s out if something failed with the exec,
killing the currently running wm. This is bad. Replace the err() with
warn() instead.


from Gleydson Soares, thanks!
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.4 2008/01/16 11:39:20 oga Exp $
d68 12
a79 10
int dirent_isdir(char *filename) {
       struct stat buffer;
       int return_value;

       return_value = stat(filename, &buffer);

       if(return_value == -1)
               return 0;
       else
               return S_ISDIR(buffer.st_mode);
d82 5
a86 11
int dirent_islink(char *filename) {
       struct stat buffer;
       int return_value;

       return_value = lstat(filename, &buffer);

       if(return_value == -1)
               return 0;
       else
               return S_ISLNK(buffer.st_mode);
}
d88 1
d90 5
@


1.4
log
@huge amount of cleanup and dead code removal.

full description of changes:
-remove fontlist, and all associated structures/calls, it's not needed.
 this also removes any doubt about leftover 9wm code (the list was
 borrowed from it). Since cwm now uses Xft for everything, the legacy
 font handling is just not needed.
-add /* FALLTHROUGH */ comments into grab_{label,menu}. I actually
 didn't intend grab_menu to be a fallthrough, but it actually works quite
 well there, so remove the extra rectangle drawing. I love it when that
 happens.
-remove a couple of unused prototypes that were obviously missed
 before.
-remove a bunch of commented out or if 0ed out code. It doesn't look to
 be coming back anytime soon.
-several functions returned an int, but this was never checked. most of
 them only failed if they failed to grab the pointer (thus the internal
 state didn't change), so just make them void and return early if this is
 the case.
-remove several unused functions and some useless variables.

knocks something like 200bytes off the stripped binary size for me.

ok marc@@, tested by several others.
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.3 2008/01/11 16:06:44 oga Exp $
d65 1
a65 1
	err(1, args[0]);
@


1.3
log
@- Remove the "all rights reserved" tag at the top of most of the source
  files, and replace them with the actual ISC license.

- add license to the manpage (it was lacking before)

- correct license statement in the README

Permission given by Marius (copyright holder):
"1. please replace with the standard ISC license
2. you may add the ISC license to the man page
3. feel free to replace the information in the README as well"

and Dros (copyright holder for group.c):
"Please switch group.c to the ISC License."

ok ian@@
@
text
@d18 1
a18 1
 * $Id: util.c,v 1.2 2007/11/28 16:35:52 ian Exp $
a65 7
}


int dirent_exists(char *filename) {
       struct stat buffer;

       return stat(filename, &buffer);
@


1.2
log
@Add a "restart wm" function. ok oga@@
@
text
@a4 1
 * All rights reserved.
d6 13
a18 1
 * $Id: util.c,v 1.1.1.1 2007/04/27 17:58:48 bernd Exp $
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
 * $Id: util.c,v 1.8 2005/08/20 21:57:39 marius Exp $
d41 16
@


1.1.1.1
log
@Initial import of cwm-3.

tested by sturm@@, ok matthieu@@
@
text
@@
