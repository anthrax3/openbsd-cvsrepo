head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_2_2:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.03.06.13.45.29;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	vHROnIR3FW6EwPj3;

1.11
date	2014.09.28.17.30.46;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	RLxSLmMTJNasAhFv;

1.10
date	2014.05.03.19.37.50;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2013.07.21.13.57.41;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.09.16.35.16;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.28.13.21.00;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.31.20.10.47;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.31.07.46.51;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.26.14.53.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.02.15.21.24;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.19.14.40.52;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.57.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.57.46;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.16.58.18;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xrandr 1.5.0
@
text
@/* 
 * Copyright © 2001 Keith Packard, member of The XFree86 Project, Inc.
 * Copyright © 2002 Hewlett Packard Company, Inc.
 * Copyright © 2006 Intel Corporation
 * Copyright © 2013 NVIDIA Corporation
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the name of the copyright holders not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no representations
 * about the suitability of this software for any purpose.  It is provided "as
 * is" without express or implied warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 *
 * Thanks to Jim Gettys who wrote most of the client side code,
 * and part of the server code for randr.
 */

#include <stdio.h>
#include <X11/Xlib.h>
#include <X11/Xlibint.h>
#include <X11/Xproto.h>
#include <X11/Xatom.h>
#include <X11/extensions/Xrandr.h>
#include <X11/extensions/Xrender.h>	/* we share subpixel information */
#include <strings.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <stdarg.h>
#include <math.h>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

static char	*program_name;
static Display	*dpy;
static Window	root;
static int	screen = -1;
static Bool	verbose = False;
static Bool	automatic = False;
static Bool	properties = False;
static Bool	grab_server = True;
static Bool	no_primary = False;

static const char *direction[5] = {
    "normal", 
    "left", 
    "inverted", 
    "right",
    "\n"};

static const char *reflections[5] = {
    "normal", 
    "x", 
    "y", 
    "xy",
    "\n"};

/* subpixel order */
static const char *order[6] = {
    "unknown",
    "horizontal rgb",
    "horizontal bgr",
    "vertical rgb",
    "vertical bgr",
    "no subpixels"};

static const struct {
    const char	    *string;
    unsigned long   flag;
} mode_flags[] = {
    { "+HSync", RR_HSyncPositive },
    { "-HSync", RR_HSyncNegative },
    { "+VSync", RR_VSyncPositive },
    { "-VSync", RR_VSyncNegative },
    { "Interlace", RR_Interlace },
    { "DoubleScan", RR_DoubleScan },
    { "CSync",	    RR_CSync },
    { "+CSync",	    RR_CSyncPositive },
    { "-CSync",	    RR_CSyncNegative },
    { NULL,	    0 }
};

static void
usage(void)
{
    printf("usage: %s [options]\n%s", program_name,
           "  where options are:\n"
           "  --display <display> or -d <display>\n"
           "  --help\n"
           "  -o <normal,inverted,left,right,0,1,2,3>\n"
           "            or --orientation <normal,inverted,left,right,0,1,2,3>\n"
           "  -q        or --query\n"
           "  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n"
           "  -r <rate> or --rate <rate> or --refresh <rate>\n"
           "  -v        or --version\n"
           "  -x        (reflect in x)\n"
           "  -y        (reflect in y)\n"
           "  --screen <screen>\n"
           "  --verbose\n"
           "  --current\n"
           "  --dryrun\n"
           "  --nograb\n"
           "  --prop or --properties\n"
           "  --fb <width>x<height>\n"
           "  --fbmm <width>x<height>\n"
           "  --dpi <dpi>/<output>\n"
           "  --output <output>\n"
           "      --auto\n"
           "      --mode <mode>\n"
           "      --preferred\n"
           "      --pos <x>x<y>\n"
           "      --rate <rate> or --refresh <rate>\n"
           "      --reflect normal,x,y,xy\n"
           "      --rotate normal,inverted,left,right\n"
           "      --left-of <output>\n"
           "      --right-of <output>\n"
           "      --above <output>\n"
           "      --below <output>\n"
           "      --same-as <output>\n"
           "      --set <property> <value>\n"
           "      --scale <x>x<y>\n"
           "      --scale-from <w>x<h>\n"
           "      --transform <a>,<b>,<c>,<d>,<e>,<f>,<g>,<h>,<i>\n"
           "      --off\n"
           "      --crtc <crtc>\n"
           "      --panning <w>x<h>[+<x>+<y>[/<track:w>x<h>+<x>+<y>[/<border:l>/<t>/<r>/<b>]]]\n"
           "      --gamma <r>:<g>:<b>\n"
           "      --brightness <value>\n"
           "      --primary\n"
           "  --noprimary\n"
           "  --newmode <name> <clock MHz>\n"
           "            <hdisp> <hsync-start> <hsync-end> <htotal>\n"
           "            <vdisp> <vsync-start> <vsync-end> <vtotal>\n"
           "            [flags...]\n"
           "            Valid flags: +HSync -HSync +VSync -VSync\n"
           "                         +CSync -CSync CSync Interlace DoubleScan\n"
           "  --rmmode <name>\n"
           "  --addmode <output> <name>\n"
           "  --delmode <output> <name>\n"
           "  --listproviders\n"
           "  --setprovideroutputsource <prov-xid> <source-xid>\n"
           "  --setprovideroffloadsink <prov-xid> <sink-xid>\n"
	   "  --listmonitors\n"
	   "  --listactivemonitors\n"
	   "  --setmonitor <name> {auto|<w>/<mmw>x<h>/<mmh>+<x>+<y>} {none|<output>,<output>,...}\n"
	   "  --delmonitor <name>\n");
}

static void _X_NORETURN _X_ATTRIBUTE_PRINTF(1,2)
fatal (const char *format, ...)
{
    va_list ap;
    
    va_start (ap, format);
    fprintf (stderr, "%s: ", program_name);
    vfprintf (stderr, format, ap);
    va_end (ap);
    exit (1);
    /*NOTREACHED*/
}

static void _X_ATTRIBUTE_PRINTF(1,2)
warning (const char *format, ...)
{
    va_list ap;
    
    va_start (ap, format);
    fprintf (stderr, "%s: ", program_name);
    vfprintf (stderr, format, ap);
    va_end (ap);
}

static void _X_NORETURN _X_ATTRIBUTE_PRINTF(1,2)
argerr (const char *format, ...)
{
    va_list ap;

    va_start (ap, format);
    fprintf (stderr, "%s: ", program_name);
    vfprintf (stderr, format, ap);
    fprintf (stderr, "Try '%s --help' for more information.\n", program_name);
    va_end (ap);
    exit (1);
    /*NOTREACHED*/
}

/* Because fmin requires C99 suppport */
static inline double dmin (double x, double y)
{
    return x < y ? x : y;
}

static const char *
rotation_name (Rotation rotation)
{
    int	i;

    if ((rotation & 0xf) == 0)
	return "normal";
    for (i = 0; i < 4; i++)
	if (rotation & (1 << i))
	    return direction[i];
    return "invalid rotation";
}

static const char *
reflection_name (Rotation rotation)
{
    rotation &= (RR_Reflect_X|RR_Reflect_Y);
    switch (rotation) {
    case 0:
	return "none";
    case RR_Reflect_X:
	return "X axis";
    case RR_Reflect_Y:
	return "Y axis";
    case RR_Reflect_X|RR_Reflect_Y:
	return "X and Y axis";
    }
    return "invalid reflection";
}

static const char *
capability_name (int cap_bit)
{
    switch (cap_bit) {
    case RR_Capability_SourceOutput:
	return "Source Output";
    case RR_Capability_SinkOutput:
	return "Sink Output";
    case RR_Capability_SourceOffload:
	return "Source Offload";
    case RR_Capability_SinkOffload:
	return "Sink Offload";
    }
    return "invalid capability";
}

typedef enum _relation {
    relation_left_of,
    relation_right_of,
    relation_above,
    relation_below,
    relation_same_as,
} relation_t;

typedef struct {
    int	    x, y, width, height;
} rectangle_t;

typedef struct {
    int	    x1, y1, x2, y2;
} box_t;

typedef struct {
    int	    x, y;
} point_t;

typedef enum _changes {
    changes_none = 0,
    changes_crtc = (1 << 0),
    changes_mode = (1 << 1),
    changes_relation = (1 << 2),
    changes_position = (1 << 3),
    changes_rotation = (1 << 4),
    changes_reflection = (1 << 5),
    changes_automatic = (1 << 6),
    changes_refresh = (1 << 7),
    changes_property = (1 << 8),
    changes_transform = (1 << 9),
    changes_panning = (1 << 10),
    changes_gamma = (1 << 11),
    changes_primary = (1 << 12),
} changes_t;

typedef enum _name_kind {
    name_none = 0,
    name_string = (1 << 0),
    name_xid = (1 << 1),
    name_index = (1 << 2),
    name_preferred = (1 << 3),
} name_kind_t;

typedef struct {
    name_kind_t	    kind;
    char    	    *string;
    XID	    	    xid;
    int		    index;
} name_t;

typedef struct _crtc crtc_t;
typedef struct _output	output_t;
typedef struct _transform transform_t;
typedef struct _umode	umode_t;
typedef struct _output_prop output_prop_t;
typedef struct _provider provider_t;
typedef struct _monitors monitors_t;
typedef struct _umonitor umonitor_t;

struct _transform {
    XTransform	    transform;
    const char	    *filter;
    int		    nparams;
    XFixed	    *params;
};

struct _crtc {
    name_t	    crtc;
    Bool	    changing;
    XRRCrtcInfo	    *crtc_info;

    XRRModeInfo	    *mode_info;
    XRRPanning      *panning_info;
    int		    x;
    int		    y;
    Rotation	    rotation;
    output_t	    **outputs;
    int		    noutput;
    transform_t	    current_transform, pending_transform;
};

struct _output_prop {
    struct _output_prop	*next;
    char		*name;
    char		*value;
};

struct _output {
    struct _output   *next;
    
    changes_t	    changes;
    
    output_prop_t   *props;

    name_t	    output;
    XRROutputInfo   *output_info;
    
    name_t	    crtc;
    crtc_t	    *crtc_info;
    crtc_t	    *current_crtc_info;
    
    name_t	    mode;
    double	    refresh;
    XRRModeInfo	    *mode_info;
    
    name_t	    addmode;

    relation_t	    relation;
    char	    *relative_to;

    int		    x, y;
    Rotation	    rotation;

    XRRPanning      panning;

    Bool    	    automatic;
    int     	    scale_from_w, scale_from_h;
    transform_t	    transform;

    struct {
	float red;
	float green;
	float blue;
    } gamma;

    float	    brightness;

    Bool	    primary;

    Bool	    found;
};

typedef enum _umode_action {
    umode_create, umode_destroy, umode_add, umode_delete
} umode_action_t;


struct _umode {
    struct _umode   *next;
    
    umode_action_t  action;
    XRRModeInfo	    mode;
    name_t	    output;
    name_t	    name;
};

struct _provider {
    name_t		provider;
    XRRProviderInfo	*info;
};

struct _monitors {
    int			n;
    XRRMonitorInfo	*monitors;
};

struct _umonitor {
    struct _umonitor	*next;
    char		*name;
    Bool		set;
    Bool		primary;
    int			x, y, width, height;
    int			mmwidth, mmheight;
    int			noutput;
    name_t		*outputs;
};

static const char *connection[3] = {
    "connected",
    "disconnected",
    "unknown connection"};

#define OUTPUT_NAME 1

#define CRTC_OFF    2
#define CRTC_UNSET  3
#define CRTC_INDEX  0x40000000

#define MODE_NAME   1
#define MODE_OFF    2
#define MODE_UNSET  3
#define MODE_PREF   4

#define POS_UNSET   -1

static output_t	*all_outputs = NULL;
static output_t	**all_outputs_tail = &all_outputs;
static crtc_t	*crtcs;
static provider_t	*providers;
static umode_t	*umodes;
static int	num_crtcs, num_providers;
static XRRScreenResources  *res;
static int	fb_width = 0, fb_height = 0;
static int	fb_width_mm = 0, fb_height_mm = 0;
static double	dpi = 0;
static char	*dpi_output_name = NULL;
static Bool	dryrun = False;
static int	minWidth, maxWidth, minHeight, maxHeight;
static Bool    	has_1_2 = False;
static Bool    	has_1_3 = False;
static Bool    	has_1_4 = False;
static Bool	has_1_5 = False;
static name_t   provider_name, output_source_provider_name, offload_sink_provider_name;
static monitors_t	*monitors;
static umonitor_t	*umonitors;

static int
mode_height (XRRModeInfo *mode_info, Rotation rotation)
{
    switch (rotation & 0xf) {
    case RR_Rotate_0:
    case RR_Rotate_180:
	return mode_info->height;
    case RR_Rotate_90:
    case RR_Rotate_270:
	return mode_info->width;
    default:
	return 0;
    }
}

static int
mode_width (XRRModeInfo *mode_info, Rotation rotation)
{
    switch (rotation & 0xf) {
    case RR_Rotate_0:
    case RR_Rotate_180:
	return mode_info->width;
    case RR_Rotate_90:
    case RR_Rotate_270:
	return mode_info->height;
    default:
	return 0;
    }
}

static Bool
transform_point (XTransform *transform, double *xp, double *yp)
{
    double  vector[3];
    double  result[3];
    int	    i, j;
    double  v;

    vector[0] = *xp;
    vector[1] = *yp;
    vector[2] = 1;
    for (j = 0; j < 3; j++)
    {
	v = 0;
	for (i = 0; i < 3; i++)
	    v += (XFixedToDouble (transform->matrix[j][i]) * vector[i]);
	result[j] = v;
    }
    if (!result[2])
	return False;
    for (j = 0; j < 2; j++) {
	vector[j] = result[j] / result[2];
	if (vector[j] > 32767 || vector[j] < -32767)
	    return False;
    }
    *xp = vector[0];
    *yp = vector[1];
    return True;
}

static void
path_bounds (XTransform *transform, point_t *points, int npoints, box_t *box)
{
    int	    i;
    box_t   point;

    for (i = 0; i < npoints; i++) {
	double	x, y;
	x = points[i].x;
	y = points[i].y;
	transform_point (transform, &x, &y);
	point.x1 = floor (x);
	point.y1 = floor (y);
	point.x2 = ceil (x);
	point.y2 = ceil (y);
	if (i == 0)
	    *box = point;
	else {
	    if (point.x1 < box->x1) box->x1 = point.x1;
	    if (point.y1 < box->y1) box->y1 = point.y1;
	    if (point.x2 > box->x2) box->x2 = point.x2;
	    if (point.y2 > box->y2) box->y2 = point.y2;
	}
    }
}

static void
mode_geometry (XRRModeInfo *mode_info, Rotation rotation,
	       XTransform *transform,
	       box_t *bounds)
{
    point_t rect[4];
    int	width = mode_width (mode_info, rotation);
    int height = mode_height (mode_info, rotation);

    rect[0].x = 0;
    rect[0].y = 0;
    rect[1].x = width;
    rect[1].y = 0;
    rect[2].x = width;
    rect[2].y = height;
    rect[3].x = 0;
    rect[3].y = height;
    path_bounds (transform, rect, 4, bounds);
}

/* v refresh frequency in Hz */
static double
mode_refresh (const XRRModeInfo *mode_info)
{
    double rate;
    double vTotal = mode_info->vTotal;

    if (mode_info->modeFlags & RR_DoubleScan) {
	/* doublescan doubles the number of lines */
	vTotal *= 2;
    }

    if (mode_info->modeFlags & RR_Interlace) {
	/* interlace splits the frame into two fields */
	/* the field rate is what is typically reported by monitors */
	vTotal /= 2;
    }
    
    if (mode_info->hTotal && vTotal)
	rate = ((double) mode_info->dotClock /
		((double) mode_info->hTotal * (double) vTotal));
    else
    	rate = 0;
    return rate;
}

/* h sync frequency in Hz */
static double
mode_hsync (const XRRModeInfo *mode_info)
{
    double rate;
    
    if (mode_info->hTotal)
	rate = (double) mode_info->dotClock / (double) mode_info->hTotal;
    else
    	rate = 0;
    return rate;
}

static void
print_verbose_mode (const XRRModeInfo *mode, Bool current, Bool preferred)
{
    int f;

    printf ("  %s (0x%x) %6.3fMHz",
	    mode->name, (int)mode->id,
	    (double)mode->dotClock / 1000000.0);
    for (f = 0; mode_flags[f].flag; f++)
	if (mode->modeFlags & mode_flags[f].flag)
	    printf (" %s", mode_flags[f].string);
    if (current)
	printf (" *current");
    if (preferred)
	printf (" +preferred");
    printf ("\n");
    printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.2fKHz\n",
	    mode->width, mode->hSyncStart, mode->hSyncEnd,
	    mode->hTotal, mode->hSkew, mode_hsync (mode) / 1000);
    printf ("        v: height %4d start %4d end %4d total %4d           clock %6.2fHz\n",
	    mode->height, mode->vSyncStart, mode->vSyncEnd, mode->vTotal,
	    mode_refresh (mode));
}

static void
init_name (name_t *name)
{
    name->kind = name_none;
}

static void
set_name_string (name_t *name, char *string)
{
    name->kind |= name_string;
    name->string = string;
}

static void
set_name_xid (name_t *name, XID xid)
{
    name->kind |= name_xid;
    name->xid = xid;
}

static void
set_name_index (name_t *name, int idx)
{
    name->kind |= name_index;
    name->index = idx;
}

static void
set_name_preferred (name_t *name)
{
    name->kind |= name_preferred;
}

static void
set_name_all (name_t *name, name_t *old)
{
    if (old->kind & name_xid)
	name->xid = old->xid;
    if (old->kind & name_string)
	name->string = old->string;
    if (old->kind & name_index)
	name->index = old->index;
    name->kind |= old->kind;
}

static void
set_name (name_t *name, char *string, name_kind_t valid)
{
    unsigned int xid; /* don't make it XID (which is unsigned long):
			 scanf() takes unsigned int */
    int idx;

    if ((valid & name_xid) && sscanf (string, "0x%x", &xid) == 1)
	set_name_xid (name, xid);
    else if ((valid & name_index) && sscanf (string, "%d", &idx) == 1)
	set_name_index (name, idx);
    else if (valid & name_string)
	set_name_string (name, string);
    else
	argerr ("invalid name '%s'\n", string);
}

static int
print_name (const name_t *name)
{
    name_kind_t kind = name->kind;

    if ((kind & name_xid))         return printf("XID 0x%x", (unsigned int)name->xid);
    else if ((kind & name_string)) return printf("name %s", name->string);
    else if ((kind & name_index))  return printf("index %d", name->index);
    else                           return printf("unknown name");
}

static void
init_transform (transform_t *transform)
{
    int x;
    memset (&transform->transform, '\0', sizeof (transform->transform));
    for (x = 0; x < 3; x++)
	transform->transform.matrix[x][x] = XDoubleToFixed (1.0);
    transform->filter = "";
    transform->nparams = 0;
    transform->params = NULL;
}

static void
set_transform (transform_t  *dest,
	       XTransform   *transform,
	       const char   *filter,
	       XFixed	    *params,
	       int	    nparams)
{
    dest->transform = *transform;
    /* note: this string is leaked */
    dest->filter = strdup (filter);
    dest->nparams = nparams;
    dest->params = malloc (nparams * sizeof (XFixed));
    memcpy (dest->params, params, nparams * sizeof (XFixed));
}

static void
copy_transform (transform_t *dest, transform_t *src)
{
    set_transform (dest, &src->transform,
		   src->filter, src->params, src->nparams);
}

static Bool
equal_transform (transform_t *a, transform_t *b)
{
    if (memcmp (&a->transform, &b->transform, sizeof (XTransform)) != 0)
	return False;
    if (strcmp (a->filter, b->filter) != 0)
	return False;
    if (a->nparams != b->nparams)
	return False;
    if (memcmp (a->params, b->params, a->nparams * sizeof (XFixed)) != 0)
	return False;
    return True;
}

static output_t *
add_output (void)
{
    output_t *output = calloc (1, sizeof (output_t));

    if (!output)
	fatal ("out of memory\n");
    output->next = NULL;
    output->found = False;
    output->brightness = 1.0;
    *all_outputs_tail = output;
    all_outputs_tail = &output->next;
    return output;
}

static output_t *
find_output (name_t *name)
{
    output_t *output;

    for (output = all_outputs; output; output = output->next)
    {
	name_kind_t common = name->kind & output->output.kind;
	
	if ((common & name_xid) && name->xid == output->output.xid)
	    break;
	if ((common & name_string) && !strcmp (name->string, output->output.string))
	    break;
	if ((common & name_index) && name->index == output->output.index)
	    break;
    }
    return output;
}

static output_t *
find_output_by_xid (RROutput output)
{
    name_t  output_name;

    init_name (&output_name);
    set_name_xid (&output_name, output);
    return find_output (&output_name);
}

static output_t *
find_output_by_name (char *name)
{
    name_t  output_name;

    init_name (&output_name);
    set_name_string (&output_name, name);
    return find_output (&output_name);
}

static crtc_t *
find_crtc (name_t *name)
{
    int	    c;
    crtc_t  *crtc = NULL;

    for (c = 0; c < num_crtcs; c++)
    {
	name_kind_t common;
	
	crtc = &crtcs[c];
	common = name->kind & crtc->crtc.kind;
	
	if ((common & name_xid) && name->xid == crtc->crtc.xid)
	    break;
	if ((common & name_string) && !strcmp (name->string, crtc->crtc.string))
	    break;
	if ((common & name_index) && name->index == crtc->crtc.index)
	    break;
	crtc = NULL;
    }
    return crtc;
}

static crtc_t *
find_crtc_by_xid (RRCrtc crtc)
{
    name_t  crtc_name;

    init_name (&crtc_name);
    set_name_xid (&crtc_name, crtc);
    return find_crtc (&crtc_name);
}

static XRRModeInfo *
find_mode (name_t *name, double refresh)
{
    int		m;
    XRRModeInfo	*best = NULL;
    double	bestDist = 0;

    for (m = 0; m < res->nmode; m++)
    {
	XRRModeInfo *mode = &res->modes[m];
	if ((name->kind & name_xid) && name->xid == mode->id)
	{
	    best = mode;
	    break;
	}
	if ((name->kind & name_string) && !strcmp (name->string, mode->name))
	{
	    double   dist;
	    
	    if (refresh)
		dist = fabs (mode_refresh (mode) - refresh);
	    else
		dist = 0;
	    if (!best || dist < bestDist)
	    {
		bestDist = dist;
		best = mode;
	    }
	}
    }
    return best;
}

static XRRModeInfo *
find_mode_by_xid (RRMode mode)
{
    name_t  mode_name;

    init_name (&mode_name);
    set_name_xid (&mode_name, mode);
    return find_mode (&mode_name, 0);
}

#if 0
static XRRModeInfo *
find_mode_by_name (char *name)
{
    name_t  mode_name;
    init_name (&mode_name);
    set_name_string (&mode_name, name);
    return find_mode (&mode_name, 0);
}
#endif

static
XRRModeInfo *
find_mode_for_output (output_t *output, name_t *name)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    m;
    XRRModeInfo	    *best = NULL;
    double	    bestDist = 0;

    for (m = 0; m < output_info->nmode; m++)
    {
	XRRModeInfo	    *mode;

	mode = find_mode_by_xid (output_info->modes[m]);
	if (!mode) continue;
	if ((name->kind & name_xid) && name->xid == mode->id)
	{
	    best = mode;
	    break;
	}
	if ((name->kind & name_string) && !strcmp (name->string, mode->name))
	{
	    double   dist;

	    /* Stay away from doublescan modes unless refresh rate is specified. */
	    if (!output->refresh && (mode->modeFlags & RR_DoubleScan))
		continue;

	    if (output->refresh)
		dist = fabs (mode_refresh (mode) - output->refresh);
	    else
		dist = 0;
	    if (!best || dist < bestDist)
	    {
		bestDist = dist;
		best = mode;
	    }
	}
    }
    return best;
}

static XRRModeInfo *
preferred_mode (output_t *output)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    m;
    XRRModeInfo	    *best;
    int		    bestDist;
    
    best = NULL;
    bestDist = 0;
    for (m = 0; m < output_info->nmode; m++)
    {
	XRRModeInfo *mode_info = find_mode_by_xid (output_info->modes[m]);
	int	    dist;
	
	if (m < output_info->npreferred)
	    dist = 0;
	else if (output_info->mm_height)
	    dist = (1000 * DisplayHeight(dpy, screen) / DisplayHeightMM(dpy, screen) -
		    1000 * mode_info->height / output_info->mm_height);
	else
	    dist = DisplayHeight(dpy, screen) - mode_info->height;

        if (dist < 0) dist = -dist;
	if (!best || dist < bestDist)
	{
	    best = mode_info;
	    bestDist = dist;
	}
    }
    return best;
}

static Bool
output_can_use_crtc (output_t *output, crtc_t *crtc)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    c;

    for (c = 0; c < output_info->ncrtc; c++)
	if (output_info->crtcs[c] == crtc->crtc.xid)
	    return True;
    return False;
}

static Bool
output_can_use_mode (output_t *output, XRRModeInfo *mode)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    m;

    for (m = 0; m < output_info->nmode; m++)
	if (output_info->modes[m] == mode->id)
	    return True;
    return False;
}

static Bool
crtc_can_use_rotation (crtc_t *crtc, Rotation rotation)
{
    Rotation	rotations = crtc->crtc_info->rotations;
    Rotation	dir = rotation & (RR_Rotate_0|RR_Rotate_90|RR_Rotate_180|RR_Rotate_270);
    Rotation	reflect = rotation & (RR_Reflect_X|RR_Reflect_Y);
    if (((rotations & dir) != 0) && ((rotations & reflect) == reflect))
	return True;
    return False;
}

#if 0
static Bool
crtc_can_use_transform (crtc_t *crtc, XTransform *transform)
{
    int	major, minor;

    XRRQueryVersion (dpy, &major, &minor);
    if (major > 1 || (major == 1 && minor >= 3))
	return True;
    return False;
}
#endif

/*
 * Report only rotations that are supported by all crtcs
 */
static Rotation
output_rotations (output_t *output)
{
    Bool	    found = False;
    Rotation	    rotation = RR_Rotate_0;
    XRROutputInfo   *output_info = output->output_info;
    int		    c;
    
    for (c = 0; c < output_info->ncrtc; c++)
    {
	crtc_t	*crtc = find_crtc_by_xid (output_info->crtcs[c]);
	if (crtc)
	{
	    if (!found) {
		rotation = crtc->crtc_info->rotations;
		found = True;
	    } else
		rotation &= crtc->crtc_info->rotations;
	}
    }
    return rotation;
}

static Bool
output_can_use_rotation (output_t *output, Rotation rotation)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    c;

    /* make sure all of the crtcs can use this rotation.
     * yes, this is not strictly necessary, but it is 
     * simpler,and we expect most drivers to either
     * support rotation everywhere or nowhere
     */
    for (c = 0; c < output_info->ncrtc; c++)
    {
	crtc_t	*crtc = find_crtc_by_xid (output_info->crtcs[c]);
	if (crtc && !crtc_can_use_rotation (crtc, rotation))
	    return False;
    }
    return True;
}

static Bool
output_is_primary(output_t *output)
{
    if (has_1_3)
	    return XRRGetOutputPrimary(dpy, root) == output->output.xid;
    return False;
}

/* Returns the index of the last value in an array < 0xffff */
static int
find_last_non_clamped(CARD16 array[], int size) {
    int i;
    for (i = size - 1; i > 0; i--) {
        if (array[i] < 0xffff)
	    return i;
    }
    return 0;
}

static void
set_gamma_info(output_t *output)
{
    XRRCrtcGamma *crtc_gamma;
    double i1, v1, i2, v2;
    int size, middle, last_best, last_red, last_green, last_blue;
    CARD16 *best_array;

    if (!output->crtc_info)
	return;

    size = XRRGetCrtcGammaSize(dpy, output->crtc_info->crtc.xid);
    if (!size) {
	warning("Failed to get size of gamma for output %s\n", output->output.string);
	return;
    }

    crtc_gamma = XRRGetCrtcGamma(dpy, output->crtc_info->crtc.xid);
    if (!crtc_gamma) {
	warning("Failed to get gamma for output %s\n", output->output.string);
	return;
    }

    /*
     * Here is a bit tricky because gamma is a whole curve for each
     * color.  So, typically, we need to represent 3 * 256 values as 3 + 1
     * values.  Therefore, we approximate the gamma curve (v) by supposing
     * it always follows the way we set it: a power function (i^g)
     * multiplied by a brightness (b).
     * v = i^g * b
     * so g = (ln(v) - ln(b))/ln(i)
     * and b can be found using two points (v1,i1) and (v2, i2):
     * b = e^((ln(v2)*ln(i1) - ln(v1)*ln(i2))/ln(i1/i2))
     * For the best resolution, we select i2 at the highest place not
     * clamped and i1 at i2/2. Note that if i2 = 1 (as in most normal
     * cases), then b = v2.
     */
    last_red = find_last_non_clamped(crtc_gamma->red, size);
    last_green = find_last_non_clamped(crtc_gamma->green, size);
    last_blue = find_last_non_clamped(crtc_gamma->blue, size);
    best_array = crtc_gamma->red;
    last_best = last_red;
    if (last_green > last_best) {
	last_best = last_green;
	best_array = crtc_gamma->green;
    }
    if (last_blue > last_best) {
	last_best = last_blue;
	best_array = crtc_gamma->blue;
    }
    if (last_best == 0)
	last_best = 1;

    middle = last_best / 2;
    i1 = (double)(middle + 1) / size;
    v1 = (double)(best_array[middle]) / 65535;
    i2 = (double)(last_best + 1) / size;
    v2 = (double)(best_array[last_best]) / 65535;
    if (v2 < 0.0001) { /* The screen is black */
	output->brightness = 0;
	output->gamma.red = 1;
	output->gamma.green = 1;
	output->gamma.blue = 1;
    } else {
	if ((last_best + 1) == size)
	    output->brightness = v2;
	else
	    output->brightness = exp((log(v2)*log(i1) - log(v1)*log(i2))/log(i1/i2));
	output->gamma.red = log((double)(crtc_gamma->red[last_red / 2]) / output->brightness
				/ 65535) / log((double)((last_red / 2) + 1) / size);
	output->gamma.green = log((double)(crtc_gamma->green[last_green / 2]) / output->brightness
				  / 65535) / log((double)((last_green / 2) + 1) / size);
	output->gamma.blue = log((double)(crtc_gamma->blue[last_blue / 2]) / output->brightness
				 / 65535) / log((double)((last_blue / 2) + 1) / size);
    }

    XRRFreeGamma(crtc_gamma);
}

static void
set_output_info (output_t *output, RROutput xid, XRROutputInfo *output_info)
{
    /* sanity check output info */
    if (output_info->connection != RR_Disconnected && !output_info->nmode)
	warning ("Output %s is not disconnected but has no modes\n",
		 output_info->name);
    
    /* set output name and info */
    if (!(output->output.kind & name_xid))
	set_name_xid (&output->output, xid);
    if (!(output->output.kind & name_string))
	set_name_string (&output->output, output_info->name);
    output->output_info = output_info;
    
    /* set crtc name and info */
    if (!(output->changes & changes_crtc))
	set_name_xid (&output->crtc, output_info->crtc);
    
    if (output->crtc.kind == name_xid && output->crtc.xid == None)
	output->crtc_info = NULL;
    else
    {
	output->crtc_info = find_crtc (&output->crtc);
	if (!output->crtc_info)
	{
	    if (output->crtc.kind & name_xid)
		fatal ("cannot find crtc 0x%lx\n", output->crtc.xid);
	    if (output->crtc.kind & name_index)
		fatal ("cannot find crtc %d\n", output->crtc.index);
	}
	if (!output_can_use_crtc (output, output->crtc_info))
	    fatal ("output %s cannot use crtc 0x%lx\n", output->output.string,
		   output->crtc_info->crtc.xid);
    }

    /* set mode name and info */
    if (!(output->changes & changes_mode))
    {
	crtc_t	*crtc = NULL;
	
	if (output_info->crtc)
	    crtc = find_crtc_by_xid(output_info->crtc);
	if (crtc && crtc->crtc_info)
	    set_name_xid (&output->mode, crtc->crtc_info->mode);
	else if (output->crtc_info)
	    set_name_xid (&output->mode, output->crtc_info->crtc_info->mode);
	else
	    set_name_xid (&output->mode, None);
	if (output->mode.xid)
	{
	    output->mode_info = find_mode_by_xid (output->mode.xid);
	    if (!output->mode_info)
		fatal ("server did not report mode 0x%lx for output %s\n",
		       output->mode.xid, output->output.string);
	}
	else
	    output->mode_info = NULL;
    }
    else if (output->mode.kind == name_xid && output->mode.xid == None)
	output->mode_info = NULL;
    else
    {
	if (output->mode.kind == name_preferred)
	    output->mode_info = preferred_mode (output);
	else
	    output->mode_info = find_mode_for_output (output, &output->mode);
	if (!output->mode_info)
	{
	    if (output->mode.kind & name_preferred)
		fatal ("cannot find preferred mode\n");
	    if (output->mode.kind & name_string)
		fatal ("cannot find mode %s\n", output->mode.string);
	    if (output->mode.kind & name_xid)
		fatal ("cannot find mode 0x%lx\n", output->mode.xid);
	}
	if (!output_can_use_mode (output, output->mode_info))
	    fatal ("output %s cannot use mode %s\n", output->output.string,
		   output->mode_info->name);
    }

    /* set position */
    if (!(output->changes & changes_position))
    {
	if (output->crtc_info)
	{
	    output->x = output->crtc_info->crtc_info->x;
	    output->y = output->crtc_info->crtc_info->y;
	}
	else
	{
	    output->x = 0;
	    output->y = 0;
	}
    }

    /* set rotation */
    if (!(output->changes & changes_rotation))
    {
	output->rotation &= ~0xf;
	if (output->crtc_info)
	    output->rotation |= (output->crtc_info->crtc_info->rotation & 0xf);
	else
	    output->rotation = RR_Rotate_0;
    }
    if (!(output->changes & changes_reflection))
    {
	output->rotation &= ~(RR_Reflect_X|RR_Reflect_Y);
	if (output->crtc_info)
	    output->rotation |= (output->crtc_info->crtc_info->rotation &
				 (RR_Reflect_X|RR_Reflect_Y));
    }
    if (!output_can_use_rotation (output, output->rotation))
	fatal ("output %s cannot use rotation \"%s\" reflection \"%s\"\n",
	       output->output.string,
	       rotation_name (output->rotation),
	       reflection_name (output->rotation));

    /* set gamma */
    if (!(output->changes & changes_gamma))
	    set_gamma_info(output);

    /* set transformation */
    if (!(output->changes & changes_transform))
    {
	if (output->crtc_info)
	    copy_transform (&output->transform, &output->crtc_info->current_transform);
	else
	    init_transform (&output->transform);
    } else {
	/* transform was already set for --scale or --transform */

	/* for --scale-from, figure out the mode size and compute the transform
	 * for the target framebuffer area */
	if (output->scale_from_w > 0 && output->mode_info) {
	    double sx = (double)output->scale_from_w /
				output->mode_info->width;
	    double sy = (double)output->scale_from_h /
				output->mode_info->height;
	    if (verbose)
		printf("scaling %s by %lfx%lf\n", output->output.string, sx,
		       sy);
	    init_transform (&output->transform);
	    output->transform.transform.matrix[0][0] = XDoubleToFixed (sx);
	    output->transform.transform.matrix[1][1] = XDoubleToFixed (sy);
	    output->transform.transform.matrix[2][2] = XDoubleToFixed (1.0);
	    if (sx != 1 || sy != 1)
		output->transform.filter = "bilinear";
	    else
		output->transform.filter = "nearest";
	    output->transform.nparams = 0;
	    output->transform.params = NULL;
	}
    }

    /* set primary */
    if (!(output->changes & changes_primary))
	output->primary = output_is_primary(output);
}
    
static void
get_screen (Bool current)
{
    if (!has_1_2)
        fatal ("Server RandR version before 1.2\n");

    if (res)
	return;

    XRRGetScreenSizeRange (dpy, root, &minWidth, &minHeight,
			   &maxWidth, &maxHeight);
    
    if (current)
	res = XRRGetScreenResourcesCurrent (dpy, root);
    else
	res = XRRGetScreenResources (dpy, root);
    if (!res) fatal ("could not get screen resources");
}

static void
get_crtcs (void)
{
    int		c;

    num_crtcs = res->ncrtc;
    crtcs = calloc (num_crtcs, sizeof (crtc_t));
    if (!crtcs) fatal ("out of memory\n");
    
    for (c = 0; c < res->ncrtc; c++)
    {
	XRRCrtcInfo *crtc_info = XRRGetCrtcInfo (dpy, res, res->crtcs[c]);
	XRRCrtcTransformAttributes  *attr;
	XRRPanning  *panning_info = NULL;

	if (has_1_3) {
	    XRRPanning zero;
	    memset(&zero, 0, sizeof(zero));
	    panning_info = XRRGetPanning  (dpy, res, res->crtcs[c]);
	    zero.timestamp = panning_info->timestamp;
	    if (!memcmp(panning_info, &zero, sizeof(zero))) {
		Xfree(panning_info);
		panning_info = NULL;
	    }
	}

	set_name_xid (&crtcs[c].crtc, res->crtcs[c]);
	set_name_index (&crtcs[c].crtc, c);
	if (!crtc_info) fatal ("could not get crtc 0x%lx information\n", res->crtcs[c]);
	crtcs[c].crtc_info = crtc_info;
	crtcs[c].panning_info = panning_info;
	if (crtc_info->mode == None)
	{
	    crtcs[c].mode_info = NULL;
	    crtcs[c].x = 0;
	    crtcs[c].y = 0;
	    crtcs[c].rotation = RR_Rotate_0;
	}
	if (XRRGetCrtcTransform (dpy, res->crtcs[c], &attr) && attr) {
	    set_transform (&crtcs[c].current_transform,
			   &attr->currentTransform,
			   attr->currentFilter,
			   attr->currentParams,
			   attr->currentNparams);
	    XFree (attr);
	}
	else
	{
	    init_transform (&crtcs[c].current_transform);
	}
	copy_transform (&crtcs[c].pending_transform, &crtcs[c].current_transform);
   }
}

static void
crtc_add_output (crtc_t *crtc, output_t *output)
{
    if (crtc->outputs)
	crtc->outputs = realloc (crtc->outputs, (crtc->noutput + 1) * sizeof (output_t *));
    else
    {
	crtc->outputs = malloc (sizeof (output_t *));
	crtc->x = output->x;
	crtc->y = output->y;
	crtc->rotation = output->rotation;
	crtc->mode_info = output->mode_info;
	copy_transform (&crtc->pending_transform, &output->transform);
   }
    if (!crtc->outputs) fatal ("out of memory\n");
    crtc->outputs[crtc->noutput++] = output;
}

static void
set_crtcs (void)
{
    output_t	*output;

    for (output = all_outputs; output; output = output->next)
    {
	if (!output->mode_info) continue;
	crtc_add_output (output->crtc_info, output);
    }
}

static void
set_panning (void)
{
    output_t	*output;

    for (output = all_outputs; output; output = output->next)
    {
	if (! output->crtc_info)
	    continue;
	if (! (output->changes & changes_panning))
	    continue;
	if (! output->crtc_info->panning_info)
	    output->crtc_info->panning_info = malloc (sizeof(XRRPanning));
	memcpy (output->crtc_info->panning_info, &output->panning, sizeof(XRRPanning));
	output->crtc_info->changing = 1;
    }
}

static void
set_gamma(void)
{
    output_t	*output;

    for (output = all_outputs; output; output = output->next) {
	int i, size;
	crtc_t *crtc;
	XRRCrtcGamma *crtc_gamma;
	float gammaRed;
	float gammaGreen;
	float gammaBlue;

	if (!(output->changes & changes_gamma))
	    continue;

	if (!output->crtc_info) {
	    fatal("Need crtc to set gamma on.\n");
	    continue;
	}

	crtc = output->crtc_info;

	size = XRRGetCrtcGammaSize(dpy, crtc->crtc.xid);

	if (!size) {
	    fatal("Gamma size is 0.\n");
	    continue;
	}

	/*
	 * The gamma-correction lookup table managed through XRR[GS]etCrtcGamma
	 * is 2^n in size, where 'n' is the number of significant bits in
	 * the X Color.  Because an X Color is 16 bits, size cannot be larger
	 * than 2^16.
	 */
	if (size > 65536) {
	    fatal("Gamma correction table is impossibly large.\n");
	    continue;
	}

	crtc_gamma = XRRAllocGamma(size);
	if (!crtc_gamma) {
	    fatal("Gamma allocation failed.\n");
	    continue;
	}

	if (output->gamma.red == 0.0)
	    output->gamma.red = 1.0;
	if (output->gamma.green == 0.0)
	    output->gamma.green = 1.0;
	if (output->gamma.blue == 0.0)
	    output->gamma.blue = 1.0;

	gammaRed = 1.0 / output->gamma.red;
	gammaGreen = 1.0 / output->gamma.green;
	gammaBlue = 1.0 / output->gamma.blue;

	for (i = 0; i < size; i++) {
	    if (gammaRed == 1.0 && output->brightness == 1.0)
		crtc_gamma->red[i] = (double)i / (double)(size - 1) * 65535.0;
	    else
		crtc_gamma->red[i] = dmin(pow((double)i/(double)(size - 1),
					      gammaRed) * output->brightness,
					  1.0) * 65535.0;

	    if (gammaGreen == 1.0 && output->brightness == 1.0)
		crtc_gamma->green[i] = (double)i / (double)(size - 1) * 65535.0;
	    else
		crtc_gamma->green[i] = dmin(pow((double)i/(double)(size - 1),
						gammaGreen) * output->brightness,
					    1.0) * 65535.0;

	    if (gammaBlue == 1.0 && output->brightness == 1.0)
		crtc_gamma->blue[i] = (double)i / (double)(size - 1) * 65535.0;
	    else
		crtc_gamma->blue[i] = dmin(pow((double)i/(double)(size - 1),
					       gammaBlue) * output->brightness,
					   1.0) * 65535.0;
	}

	XRRSetCrtcGamma(dpy, crtc->crtc.xid, crtc_gamma);

	free(crtc_gamma);
    }
}

static void
set_primary(void)
{
    output_t *output;

    if (no_primary) {
	XRRSetOutputPrimary(dpy, root, None);
    } else {
	for (output = all_outputs; output; output = output->next) {
	    if (!(output->changes & changes_primary))
		continue;
	    if (output->primary)
		XRRSetOutputPrimary(dpy, root, output->output.xid);
	}
    }
}

static Status
crtc_disable (crtc_t *crtc)
{
    if (verbose)
    	printf ("crtc %d: disable\n", crtc->crtc.index);
	
    if (dryrun)
	return RRSetConfigSuccess;
    return XRRSetCrtcConfig (dpy, res, crtc->crtc.xid, CurrentTime,
			     0, 0, None, RR_Rotate_0, NULL, 0);
}

static void
crtc_set_transform (crtc_t *crtc, transform_t *transform)
{
    int	major, minor;

    XRRQueryVersion (dpy, &major, &minor);
    if (major > 1 || (major == 1 && minor >= 3))
	XRRSetCrtcTransform (dpy, crtc->crtc.xid,
			     &transform->transform,
			     transform->filter,
			     transform->params,
			     transform->nparams);
}

static Status
crtc_revert (crtc_t *crtc)
{
    XRRCrtcInfo	*crtc_info = crtc->crtc_info;
    
    if (verbose)
    	printf ("crtc %d: revert\n", crtc->crtc.index);
	
    if (dryrun)
	return RRSetConfigSuccess;

    if (!equal_transform (&crtc->current_transform, &crtc->pending_transform))
	crtc_set_transform (crtc, &crtc->current_transform);
    return XRRSetCrtcConfig (dpy, res, crtc->crtc.xid, CurrentTime,
			    crtc_info->x, crtc_info->y,
			    crtc_info->mode, crtc_info->rotation,
			    crtc_info->outputs, crtc_info->noutput);
}

static Status
crtc_apply (crtc_t *crtc)
{
    RROutput	*rr_outputs;
    int		o;
    Status	s;
    RRMode	mode = None;

    if (!crtc->changing || !crtc->mode_info)
	return RRSetConfigSuccess;

    rr_outputs = calloc (crtc->noutput, sizeof (RROutput));
    if (!rr_outputs)
	return BadAlloc;
    for (o = 0; o < crtc->noutput; o++)
	rr_outputs[o] = crtc->outputs[o]->output.xid;
    mode = crtc->mode_info->id;
    if (verbose) {
	printf ("crtc %d: %12s %6.2f +%d+%d", crtc->crtc.index,
		crtc->mode_info->name, mode_refresh (crtc->mode_info),
		crtc->x, crtc->y);
	for (o = 0; o < crtc->noutput; o++)
	    printf (" \"%s\"", crtc->outputs[o]->output.string);
	printf ("\n");
    }
    
    if (dryrun)
	s = RRSetConfigSuccess;
    else
    {
	if (!equal_transform (&crtc->current_transform, &crtc->pending_transform))
	    crtc_set_transform (crtc, &crtc->pending_transform);
	s = XRRSetCrtcConfig (dpy, res, crtc->crtc.xid, CurrentTime,
			      crtc->x, crtc->y, mode, crtc->rotation,
			      rr_outputs, crtc->noutput);
	if (s == RRSetConfigSuccess && crtc->panning_info) {
	    if (has_1_3)
		s = XRRSetPanning (dpy, res, crtc->crtc.xid, crtc->panning_info);
	    else
		fatal ("panning needs RandR 1.3\n");
	}
    }
    free (rr_outputs);
    return s;
}

static void
screen_revert (void)
{
    if (verbose)
	printf ("screen %d: revert\n", screen);

    if (dryrun)
	return;
    XRRSetScreenSize (dpy, root,
		      DisplayWidth (dpy, screen),
		      DisplayHeight (dpy, screen),
		      DisplayWidthMM (dpy, screen),
		      DisplayHeightMM (dpy, screen));
}

static void
screen_apply (void)
{
    if (fb_width == DisplayWidth (dpy, screen) &&
	fb_height == DisplayHeight (dpy, screen) &&
	fb_width_mm == DisplayWidthMM (dpy, screen) &&
	fb_height_mm == DisplayHeightMM (dpy, screen))
    {
	return;
    }
    if (verbose)
	printf ("screen %d: %dx%d %dx%d mm %6.2fdpi\n", screen,
		fb_width, fb_height, fb_width_mm, fb_height_mm, dpi);
    if (dryrun)
	return;
    XRRSetScreenSize (dpy, root, fb_width, fb_height,
		      fb_width_mm, fb_height_mm);
}

static void
revert (void)
{
    int	c;

    /* first disable all crtcs */
    for (c = 0; c < res->ncrtc; c++)
	crtc_disable (&crtcs[c]);
    /* next reset screen size */
    screen_revert ();
    /* now restore all crtcs */
    for (c = 0; c < res->ncrtc; c++)
	crtc_revert (&crtcs[c]);
}

/*
 * uh-oh, something bad happened in the middle of changing
 * the configuration. Revert to the previous configuration
 * and bail
 */
static void _X_NORETURN
panic (Status s, crtc_t *crtc)
{
    int	    c = crtc->crtc.index;
    const char *message;
    
    switch (s) {
    case RRSetConfigSuccess:		message = "succeeded";		    break;
    case BadAlloc:			message = "out of memory";	    break;
    case RRSetConfigFailed:		message = "failed";		    break;
    case RRSetConfigInvalidConfigTime:	message = "invalid config time";    break;
    case RRSetConfigInvalidTime:	message = "invalid time";	    break;
    default:				message = "unknown failure";	    break;
    }
    
    fprintf (stderr, "%s: Configure crtc %d %s\n", program_name, c, message);
    revert ();
    exit (1);
}

static void
apply (void)
{
    Status  s;
    int	    c;
    
    /*
     * Hold the server grabbed while messing with
     * the screen so that apps which notice the resize
     * event and ask for xinerama information from the server
     * receive up-to-date information
     */
    if (grab_server)
	XGrabServer (dpy);
    
    /*
     * Turn off any crtcs which are to be disabled or which are
     * larger than the target size
     */
    for (c = 0; c < res->ncrtc; c++)
    {
	crtc_t	    *crtc = &crtcs[c];
	XRRCrtcInfo *crtc_info = crtc->crtc_info;

	/* if this crtc is already disabled, skip it */
	if (crtc_info->mode == None) 
	    continue;
	
	/* 
	 * If this crtc is to be left enabled, make
	 * sure the old size fits then new screen
	 */
	if (crtc->mode_info) 
	{
	    XRRModeInfo	*old_mode = find_mode_by_xid (crtc_info->mode);
	    int x, y, w, h;
	    box_t bounds;

	    if (!old_mode) 
		panic (RRSetConfigFailed, crtc);
	    
	    /* old position and size information */
	    mode_geometry (old_mode, crtc_info->rotation,
			   &crtc->current_transform.transform,
			   &bounds);

	    x = crtc_info->x + bounds.x1;
	    y = crtc_info->y + bounds.y1;
	    w = bounds.x2 - bounds.x1;
	    h = bounds.y2 - bounds.y1;

	    /* if it fits, skip it */
	    if (x + w <= fb_width && y + h <= fb_height) 
		continue;
	    crtc->changing = True;
	}
	s = crtc_disable (crtc);
	if (s != RRSetConfigSuccess)
	    panic (s, crtc);
    }

    /*
     * Set the screen size
     */
    screen_apply ();
    
    /*
     * Set crtcs
     */

    for (c = 0; c < res->ncrtc; c++)
    {
	crtc_t	*crtc = &crtcs[c];
	
	s = crtc_apply (crtc);
	if (s != RRSetConfigSuccess)
	    panic (s, crtc);
    }

    set_primary ();

    /*
     * Release the server grab and let all clients
     * respond to the updated state
     */
    if (grab_server)
	XUngrabServer (dpy);
}

/*
 * Use current output state to complete the output list
 */
static void
get_outputs (void)
{
    int		o;
    output_t    *q;
    
    for (o = 0; o < res->noutput; o++)
    {
	XRROutputInfo	*output_info = XRRGetOutputInfo (dpy, res, res->outputs[o]);
	output_t	*output;
	name_t		output_name;
	if (!output_info) fatal ("could not get output 0x%lx information\n", res->outputs[o]);
	set_name_xid (&output_name, res->outputs[o]);
	set_name_index (&output_name, o);
	set_name_string (&output_name, output_info->name);
	output = find_output (&output_name);
	if (!output)
	{
	    output = add_output ();
	    set_name_all (&output->output, &output_name);
	    /*
	     * When global --automatic mode is set, turn on connected but off
	     * outputs, turn off disconnected but on outputs
	     */
	    if (automatic)
	    {
		switch (output_info->connection) {
		case RR_Connected:
		    if (!output_info->crtc) {
			output->changes |= changes_automatic;
			output->automatic = True;
		    }
		    break;
		case RR_Disconnected:
		    if (output_info->crtc)
		    {
			output->changes |= changes_automatic;
			output->automatic = True;
		    }
		    break;
		}
	    }
	}
	output->found = True;

	/*
	 * Automatic mode -- track connection state and enable/disable outputs
	 * as necessary
	 */
	if (output->automatic)
	{
	    switch (output_info->connection) {
	    case RR_Connected:
	    case RR_UnknownConnection:
		if ((!(output->changes & changes_mode)))
		{
		    set_name_preferred (&output->mode);
		    output->changes |= changes_mode;
		}
		break;
	    case RR_Disconnected:
		if ((!(output->changes & changes_mode)))
		{
		    set_name_xid (&output->mode, None);
		    set_name_xid (&output->crtc, None);
		    output->changes |= changes_mode;
		    output->changes |= changes_crtc;
		}
		break;
	    }
	}

	set_output_info (output, res->outputs[o], output_info);
    }
    for (q = all_outputs; q; q = q->next)
    {
	if (!q->found)
	{
	    fprintf(stderr, "warning: output %s not found; ignoring\n",
		    q->output.string);
	}
    }
}

static void
mark_changing_crtcs (void)
{
    int	c;

    for (c = 0; c < num_crtcs; c++)
    {
	crtc_t	    *crtc = &crtcs[c];
	int	    o;
	output_t    *output;

	/* walk old output list (to catch disables) */
	for (o = 0; o < crtc->crtc_info->noutput; o++)
	{
	    output = find_output_by_xid (crtc->crtc_info->outputs[o]);
	    if (!output) fatal ("cannot find output 0x%lx\n",
				crtc->crtc_info->outputs[o]);
	    if (output->changes)
		crtc->changing = True;
	}
	/* walk new output list */
	for (o = 0; o < crtc->noutput; o++)
	{
	    output = crtc->outputs[o];
	    if (output->changes)
		crtc->changing = True;
	}
    }
}

/*
 * Test whether 'crtc' can be used for 'output'
 */
static Bool
check_crtc_for_output (crtc_t *crtc, output_t *output)
{
    int		c;
    int		l;
    output_t    *other;
    
    for (c = 0; c < output->output_info->ncrtc; c++)
	if (output->output_info->crtcs[c] == crtc->crtc.xid)
	    break;
    if (c == output->output_info->ncrtc)
	return False;
    for (other = all_outputs; other; other = other->next)
    {
	if (other == output)
	    continue;

	if (other->mode_info == NULL)
	    continue;

	if (other->crtc_info != crtc)
	    continue;

	/* see if the output connected to the crtc can clone to this output */
	for (l = 0; l < output->output_info->nclone; l++)
	    if (output->output_info->clones[l] == other->output.xid)
		break;
	/* not on the list, can't clone */
	if (l == output->output_info->nclone) 
	    return False;
    }

    if (crtc->noutput)
    {
	/* make sure the state matches */
	if (crtc->mode_info != output->mode_info)
	    return False;
	if (crtc->x != output->x)
	    return False;
	if (crtc->y != output->y)
	    return False;
	if (crtc->rotation != output->rotation)
	    return False;
	if (!equal_transform (&crtc->current_transform, &output->transform))
	    return False;
    }
    else if (crtc->crtc_info->noutput)
    {
	/* make sure the state matches the already used state */
	XRRModeInfo *mode = find_mode_by_xid (crtc->crtc_info->mode);

	if (mode != output->mode_info)
	    return False;
	if (crtc->crtc_info->x != output->x)
	    return False;
	if (crtc->crtc_info->y != output->y)
	    return False;
	if (crtc->crtc_info->rotation != output->rotation)
	    return False;
    }
    return True;
}

static crtc_t *
find_crtc_for_output (output_t *output)
{
    int	    c;

    for (c = 0; c < output->output_info->ncrtc; c++)
    {
	crtc_t	    *crtc;

	crtc = find_crtc_by_xid (output->output_info->crtcs[c]);
	if (!crtc) fatal ("cannot find crtc 0x%lx\n", output->output_info->crtcs[c]);

	if (check_crtc_for_output (crtc, output))
	    return crtc;
    }
    return NULL;
}

static void
set_positions (void)
{
    output_t	*output;
    Bool	keep_going;
    Bool	any_set;
    int		min_x, min_y;

    for (;;)
    {
	any_set = False;
	keep_going = False;
	for (output = all_outputs; output; output = output->next)
	{
	    output_t    *relation;
	    name_t	relation_name;

	    if (!(output->changes & changes_relation)) continue;
	    
	    if (output->mode_info == NULL) continue;

	    init_name (&relation_name);
	    set_name_string (&relation_name, output->relative_to);
	    relation = find_output (&relation_name);
	    if (!relation) fatal ("cannot find output \"%s\"\n", output->relative_to);
	    
	    if (relation->mode_info == NULL) 
	    {
		output->x = 0;
		output->y = 0;
		output->changes |= changes_position;
		any_set = True;
		continue;
	    }
	    /*
	     * Make sure the dependent object has been set in place
	     */
	    if ((relation->changes & changes_relation) && 
		!(relation->changes & changes_position))
	    {
		keep_going = True;
		continue;
	    }
	    
	    switch (output->relation) {
	    case relation_left_of:
		output->y = relation->y;
		output->x = relation->x - mode_width (output->mode_info, output->rotation);
		break;
	    case relation_right_of:
		output->y = relation->y;
		output->x = relation->x + mode_width (relation->mode_info, relation->rotation);
		break;
	    case relation_above:
		output->x = relation->x;
		output->y = relation->y - mode_height (output->mode_info, output->rotation);
		break;
	    case relation_below:
		output->x = relation->x;
		output->y = relation->y + mode_height (relation->mode_info, relation->rotation);
		break;
	    case relation_same_as:
		output->x = relation->x;
		output->y = relation->y;
	    }
	    output->changes |= changes_position;
	    any_set = True;
	}
	if (!keep_going)
	    break;
	if (!any_set)
	    fatal ("loop in relative position specifications\n");
    }

    /*
     * Now normalize positions so the upper left corner of all outputs is at 0,0
     */
    min_x = 32768;
    min_y = 32768;
    for (output = all_outputs; output; output = output->next)
    {
	if (output->mode_info == NULL) continue;
	
	if (output->x < min_x) min_x = output->x;
	if (output->y < min_y) min_y = output->y;
    }
    if (min_x || min_y)
    {
	/* move all outputs */
	for (output = all_outputs; output; output = output->next)
	{
	    if (output->mode_info == NULL) continue;

	    output->x -= min_x;
	    output->y -= min_y;
	    output->changes |= changes_position;
	}
    }
}

static void
set_screen_size (void)
{
    output_t	*output;
    Bool	fb_specified = fb_width != 0 && fb_height != 0;
    
    for (output = all_outputs; output; output = output->next)
    {
	XRRModeInfo *mode_info = output->mode_info;
	int	    x, y, w, h;
	box_t	    bounds;
	
	if (!mode_info) continue;
	
	mode_geometry (mode_info, output->rotation,
		       &output->transform.transform,
		       &bounds);
	x = output->x + bounds.x1;
	y = output->y + bounds.y1;
	w = bounds.x2 - bounds.x1;
	h = bounds.y2 - bounds.y1;
	/* make sure output fits in specified size */
	if (fb_specified)
	{
	    if (x + w > fb_width || y + h > fb_height)
		warning ("specified screen %dx%d not large enough for output %s (%dx%d+%d+%d)\n",
			 fb_width, fb_height, output->output.string, w, h, x, y);
	}
	/* fit fb to output */
	else
	{
	    XRRPanning *pan;
	    if (x + w > fb_width)
		fb_width = x + w;
	    if (y + h > fb_height)
		fb_height = y + h;
	    if (output->changes & changes_panning)
		pan = &output->panning;
	    else
		pan = output->crtc_info ? output->crtc_info->panning_info : NULL;
	    if (pan && pan->left + pan->width > fb_width)
		fb_width = pan->left + pan->width;
	    if (pan && pan->top + pan->height > fb_height)
		fb_height = pan->top + pan->height;
	}
    }	

    if (fb_width > maxWidth || fb_height > maxHeight)
        fatal ("screen cannot be larger than %dx%d (desired size %dx%d)\n",
	       maxWidth, maxHeight, fb_width, fb_height);
    if (fb_specified)
    {
	if (fb_width < minWidth || fb_height < minHeight)
	    fatal ("screen must be at least %dx%d\n", minWidth, minHeight);
    }
    else
    {
	if (fb_width < minWidth) fb_width = minWidth;
	if (fb_height < minHeight) fb_height = minHeight;
    }
}
    

static void
disable_outputs (output_t *outputs)
{
    while (outputs)
    {
	outputs->crtc_info = NULL;
	outputs = outputs->next;
    }
}

/*
 * find the best mapping from output to crtc available
 */
static int
pick_crtcs_score (output_t *outputs)
{
    output_t	*output;
    int		best_score;
    int		my_score;
    int		score;
    crtc_t	*best_crtc;
    int		c;
    
    if (!outputs)
	return 0;
    
    output = outputs;
    outputs = outputs->next;
    /*
     * Score with this output disabled
     */
    output->crtc_info = NULL;
    best_score = pick_crtcs_score (outputs);
    if (output->mode_info == NULL)
	return best_score;

    best_crtc = NULL;
    /* 
     * Now score with this output any valid crtc
     */
    for (c = 0; c < output->output_info->ncrtc; c++)
    {
	crtc_t	    *crtc;

	crtc = find_crtc_by_xid (output->output_info->crtcs[c]);
	if (!crtc)
	    fatal ("cannot find crtc 0x%lx\n", output->output_info->crtcs[c]);
	
	/* reset crtc allocation for following outputs */
	disable_outputs (outputs);
	if (!check_crtc_for_output (crtc, output))
	    continue;
	
	my_score = 1000;
	/* slight preference for existing connections */
	if (crtc == output->current_crtc_info)
	    my_score++;

	output->crtc_info = crtc;
	score = my_score + pick_crtcs_score (outputs);
	if (score > best_score)
	{
	    best_crtc = crtc;
	    best_score = score;
	}
    }
    if (output->crtc_info != best_crtc)
	output->crtc_info = best_crtc;
    /*
     * Reset other outputs based on this one using the best crtc
     */
    (void) pick_crtcs_score (outputs);

    return best_score;
}

/*
 * Pick crtcs for any changing outputs that don't have one
 */
static void
pick_crtcs (void)
{
    output_t	*output;
    int saved_crtc_noutput[num_crtcs];
    int n;

    /*
     * First try to match up newly enabled outputs with spare crtcs
     */
    for (output = all_outputs; output; output = output->next)
    {
	if (output->changes && output->mode_info)
	{
	    if (output->crtc_info) {
		if (output->crtc_info->crtc_info->noutput > 0 &&
		    (output->crtc_info->crtc_info->noutput > 1 ||
		     output != find_output_by_xid (output->crtc_info->crtc_info->outputs[0])))
		    break;
	    } else {
		output->crtc_info = find_crtc_for_output (output);
		if (!output->crtc_info)
		    break;
	    }
	}
    }
    /*
     * Everyone is happy
     */
    if (!output)
	return;
    /*
     * When the simple way fails, see if there is a way
     * to swap crtcs around and make things work
     */
    for (output = all_outputs; output; output = output->next)
	output->current_crtc_info = output->crtc_info;

    /* Mark all CRTC as currently unused */
    for (n = 0; n < num_crtcs; n++) {
	    saved_crtc_noutput[n] = crtcs[n].crtc_info->noutput;
	    crtcs[n].crtc_info->noutput = 0;
    }

    pick_crtcs_score (all_outputs);

    for (n = 0; n < num_crtcs; n++)
	    crtcs[n].crtc_info->noutput = saved_crtc_noutput[n];

    for (output = all_outputs; output; output = output->next)
    {
	if (output->mode_info && !output->crtc_info)
	    fatal ("cannot find crtc for output %s\n", output->output.string);
	if (!output->changes && output->crtc_info != output->current_crtc_info)
	    output->changes |= changes_crtc;
    }
}

static int
check_strtol(char *s)
{
    char *endptr;
    int result = strtol(s, &endptr, 10);
    if (s == endptr)
	argerr ("failed to parse '%s' as a number\n", s);
    return result;
}

static double
check_strtod(char *s)
{
    char *endptr;
    double result = strtod(s, &endptr);
    if (s == endptr)
	argerr ("failed to parse '%s' as a number\n", s);
    return result;
}


static void *
property_values_from_string(const char *str, const Atom type, const int format,
                            int *returned_nitems)
{
    char *token, *tmp;
    void *returned_bytes = NULL;
    int nitems = 0, bytes_per_item;

    if (type != XA_INTEGER && type != XA_CARDINAL)
	return NULL;

    /* compute memory needed for Xlib datatype (sigh) */
    switch (format) {
    case 8:
       bytes_per_item = sizeof(char);
       break;
    case 16:
       bytes_per_item = sizeof(short);
       break;
    case 32:
       bytes_per_item = sizeof(long);
       break;
    default:
       return NULL;
    }

    tmp = strdup (str);

    for (token = strtok (tmp, ","); token; token = strtok (NULL, ","))
    {
	char *endptr;
	long int val = strtol (token, &endptr, 0);

	if (token == endptr || *endptr != '\0')
	{
	    argerr ("failed to parse '%s' as a number\n", token);
	}

	returned_bytes = realloc (returned_bytes, (nitems + 1) * bytes_per_item);

	if (type == XA_INTEGER && format == 8)
	{
	    signed char *ptr = returned_bytes;
	    ptr[nitems] = (char) val;
	}
	else if (type == XA_INTEGER && format == 16)
	{
	    short *ptr = returned_bytes;
	    ptr[nitems] = (short) val;
	}
	else if (type == XA_INTEGER && format == 32)
	{
	    long *ptr = returned_bytes;
	    ptr[nitems] = (long) val;
	}
	else if (type == XA_CARDINAL && format == 8)
	{
	    unsigned char *ptr = returned_bytes;
	    ptr[nitems] = (unsigned char) val;
	}
	else if (type == XA_CARDINAL && format == 16)
	{
	    unsigned short *ptr = returned_bytes;
	    ptr[nitems] = (unsigned short) val;
	}
	else if (type == XA_CARDINAL && format == 32)
	{
	    unsigned long *ptr = returned_bytes;
	    ptr[nitems] = (unsigned long) val;
	}
	else
	{
	    free (tmp);
	    free (returned_bytes);
	    return NULL;
	}

	nitems++;
    }

    free (tmp);

    *returned_nitems = nitems;
    return returned_bytes;
}


static void
print_output_property_value(int value_format, /* 8, 16, 32 */
                            Atom value_type,  /* XA_{ATOM,INTEGER,CARDINAL} */
                            const void *value_bytes)
{
    if (value_type == XA_ATOM && value_format == 32)
    {
	const Atom *val = value_bytes;
	char *str = XGetAtomName (dpy, *val);
	if (str != NULL)
	{
	    printf ("%s", str);
	    XFree (str);
	    return;
	}
    }

    if (value_type == XA_INTEGER)
    {
	if (value_format == 8)
	{
	    const signed char *val = value_bytes;
	    printf ("%d", *val);
	    return;
	}
	if (value_format == 16)
	{
	    const short *val = value_bytes;
	    printf ("%d", *val);
	    return;
	}
	if (value_format == 32)
	{
	    const long *val = value_bytes;
	    printf ("%ld", *val);
	    return;
	}
    }

    if (value_type == XA_CARDINAL)
    {
	if (value_format == 8)
	{
	    const unsigned char *val = value_bytes;
	    printf ("%u", *val);
	    return;
	}
	if (value_format == 16)
	{
	    const unsigned short *val = value_bytes;
	    printf ("%u", *val);
	    return;
	}
	if (value_format == 32)
	{
	    const unsigned long *val = value_bytes;
	    printf ("%lu", *val);
	    return;
	}
    }

    printf ("?");
}

static void
print_edid(int nitems, const unsigned char *prop)
{
    int k;

    printf ("\n\t\t");

    for (k = 0; k < nitems; k++)
    {
	if (k != 0 && (k % 16) == 0)
	{
	    printf ("\n\t\t");
	}

	printf("%02" PRIx8, prop[k]);
    }

    printf("\n");
}

static void
print_guid(const unsigned char *prop)
{
    int k;

    printf("{");

    for (k = 0; k < 16; k++)
    {
	printf("%02" PRIX8, prop[k]);
	if (k == 3 || k == 5 || k == 7 || k == 9)
	{
	    printf("-");
	}
    }

    printf("}\n");
}

static void
print_output_property(const char *atom_name,
                      int value_format,
                      Atom value_type,
                      int nitems,
                      const unsigned char *prop)
{
    int bytes_per_item;
    int k;

    switch (value_format) {
    case 8:
       bytes_per_item = sizeof(char);
       break;
    case 16:
       bytes_per_item = sizeof(short);
       break;
    case 32:
       bytes_per_item = sizeof(long);
       break;
    default:
       return;
    }
    /*
     * Check for properties that need special formatting.
     */
    if (strcmp (atom_name, "EDID") == 0 && value_format == 8 &&
	value_type == XA_INTEGER)
    {
	print_edid (nitems, prop);
	return;
    }
    else if (strcmp (atom_name, "GUID") == 0 && value_format == 8 &&
	     value_type == XA_INTEGER && nitems == 16)
    {
	print_guid (prop);
	return;
    }

    for (k = 0; k < nitems; k++)
    {
	if (k != 0)
	{
	    if ((k % 16) == 0)
	    {
		printf ("\n\t\t");
	    }
	}
	print_output_property_value (value_format, value_type,
				     prop + (k * bytes_per_item));
	printf (" ");
    }

    printf ("\n");
}

static void
get_providers (void)
{
    XRRProviderResources *pr;
    int i;

    if (!has_1_4 || providers)
	return;

    pr = XRRGetProviderResources(dpy, root);
    num_providers = pr->nproviders;
    providers = calloc (num_providers, sizeof (provider_t));
    if (!providers)
	fatal ("out of memory\n");

    for (i = 0; i < num_providers; i++) {
	provider_t *provider = &providers[i];
	name_t *name = &provider->provider;
	XRRProviderInfo *info = XRRGetProviderInfo(dpy, res, pr->providers[i]);

	provider->info = info;
	set_name_xid (name, pr->providers[i]);
	set_name_index (name, i);
	set_name_string (name, info->name);
   }

   XRRFreeProviderResources(pr);
}

static provider_t *
find_provider (name_t *name)
{
    int i;

    if ((name->kind & name_xid) && name->xid == 0)
	return NULL;
    for (i = 0; i < num_providers; i++) {
	provider_t *p = &providers[i];
	name_kind_t common = name->kind & p->provider.kind;

	if ((common & name_xid) && name->xid == p->provider.xid)
	    return p;
	if ((common & name_string) && !strcmp (name->string, p->provider.string))
	    return p;
	if ((common & name_index) && name->index == p->provider.index)
	    return p;
    }

    printf ("Could not find provider with ");
    print_name (name);
    printf ("\n");
    exit (1);
}

static void
get_monitors(Bool get_active)
{
    XRRMonitorInfo	*m;
    int			n;

    if (!has_1_5 || monitors)
	return;

    m = XRRGetMonitors(dpy, root, get_active, &n);
    if (n == -1)
	fatal("get monitors failed\n");
    monitors = calloc(1, sizeof (monitors_t));
    monitors->n = n;
    monitors->monitors = m;
}

int
main (int argc, char **argv)
{
    XRRScreenSize *sizes;
    XRRScreenConfiguration *sc;
    int		nsize;
    int		nrate;
    short		*rates;
    Status	status = RRSetConfigFailed;
    int		rot = -1;
    int		query = False;
    int		action_requested = False;
    Rotation	current_rotation;
    XEvent	event;
    XRRScreenChangeNotifyEvent *sce;    
    char          *display_name = NULL;
    int 		i;
    SizeID	current_size;
    short	current_rate;
    double    	rate = -1;
    int		size = -1;
    int		dirind = 0;
    Bool	setit = False;
    Bool    	version = False;
    int		event_base, error_base;
    int		reflection = 0;
    int		width = 0, height = 0;
    Bool    	have_pixel_size = False;
    int		ret = 0;
    output_t	*config_output = NULL;
    Bool    	setit_1_2 = False;
    Bool    	query_1_2 = False;
    Bool	modeit = False;
    Bool	propit = False;
    Bool	query_1 = False;
    Bool	list_providers = False;
    Bool        provsetoutsource = False;
    Bool        provsetoffsink = False;
    Bool	monitorit = False;
    Bool	list_monitors = False;
    Bool	list_active_monitors = False;
    int		major, minor;
    Bool	current = False;
    Bool	toggle_x = False;
    Bool	toggle_y = False;

    program_name = argv[0];
    for (i = 1; i < argc; i++) {
	if (!strcmp ("-display", argv[i]) || !strcmp ("--display", argv[i]) ||
	    !strcmp ("-d", argv[i])) {
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    display_name = argv[i];
	    continue;
	}
	if (!strcmp("-help", argv[i]) || !strcmp("--help", argv[i])) {
	    usage();
	    exit(0);
	}
	if (!strcmp ("--verbose", argv[i])) {
	    verbose = True;
	    continue;
	}
	if (!strcmp ("--dryrun", argv[i])) {
	    dryrun = True;
	    verbose = True;
	    continue;
	}
	if (!strcmp ("--nograb", argv[i])) {
	    grab_server = False;
	    continue;
	}
	if (!strcmp("--current", argv[i])) {
	    current = True;
	    continue;
	}

	if (!strcmp ("-s", argv[i]) || !strcmp ("--size", argv[i])) {
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf (argv[i], "%dx%d", &width, &height) == 2) {
		have_pixel_size = True;
	    } else {
		size = check_strtol(argv[i]);
                if (size < 0) argerr ("--size argument must be nonnegative\n");
            }
	    setit = True;
	    action_requested = True;
	    continue;
	}

	if (!strcmp ("-r", argv[i]) ||
	    !strcmp ("--rate", argv[i]) ||
	    !strcmp ("--refresh", argv[i]))
	{
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    rate = check_strtod(argv[i]);
	    setit = True;
	    if (config_output)
	    {
		config_output->refresh = rate;
		config_output->changes |= changes_refresh;
		setit_1_2 = True;
	    }
	    action_requested = True;
	    continue;
	}

	if (!strcmp ("-v", argv[i]) || !strcmp ("--version", argv[i])) {
	    version = True;
	    action_requested = True;
	    continue;
	}

	if (!strcmp ("-x", argv[i])) {
	    toggle_x = True;
	    setit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("-y", argv[i])) {
	    toggle_y = True;
	    setit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--screen", argv[i])) {
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    screen = check_strtol(argv[i]);
	    if (screen < 0) argerr ("--screen argument must be nonnegative\n");
	    continue;
	}
	if (!strcmp ("-q", argv[i]) || !strcmp ("--query", argv[i])) {
	    query = True;
	    continue;
	}
	if (!strcmp ("-o", argv[i]) || !strcmp ("--orientation", argv[i])) {
	    char *endptr;
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    dirind = strtol(argv[i], &endptr, 10);
	    if (argv[i] == endptr) {
		for (dirind = 0; dirind < 4; dirind++) {
		    if (strcmp (direction[dirind], argv[i]) == 0) break;
		}
	    }
	    if ((dirind < 0) || (dirind > 3))
		argerr ("%s: invalid argument '%s'\n", argv[i-1], argv[i]);
	    rot = dirind;
	    setit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--prop", argv[i]) ||
	    !strcmp ("--props", argv[i]) ||
	    !strcmp ("--madprops", argv[i]) ||
	    !strcmp ("--properties", argv[i]))
	{
	    query_1_2 = True;
	    properties = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--output", argv[i])) {
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);

	    config_output = find_output_by_name (argv[i]);
	    if (!config_output) {
		config_output = add_output ();
		set_name (&config_output->output, argv[i], name_string|name_xid);
	    }
	    
	    setit_1_2 = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--crtc", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    set_name (&config_output->crtc, argv[i], name_xid|name_index);
	    config_output->changes |= changes_crtc;
	    continue;
	}
	if (!strcmp ("--mode", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    set_name (&config_output->mode, argv[i], name_string|name_xid);
	    config_output->changes |= changes_mode;
	    continue;
	}
	if (!strcmp ("--preferred", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    set_name_preferred (&config_output->mode);
	    config_output->changes |= changes_mode;
	    continue;
	}
	if (!strcmp ("--pos", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf (argv[i], "%dx%d",
			&config_output->x, &config_output->y) != 2)
		argerr ("failed to parse '%s' as a position\n", argv[i]);
	    config_output->changes |= changes_position;
	    continue;
	}
	if (!strcmp ("--rotation", argv[i]) || !strcmp ("--rotate", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    for (dirind = 0; dirind < 4; dirind++) {
		if (strcmp (direction[dirind], argv[i]) == 0) break;
	    }
	    if (dirind == 4)
		argerr ("%s: invalid argument '%s'\n", argv[i-1], argv[i]);
	    config_output->rotation &= ~0xf;
	    config_output->rotation |= 1 << dirind;
	    config_output->changes |= changes_rotation;
	    continue;
	}
	if (!strcmp ("--reflect", argv[i]) || !strcmp ("--reflection", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    for (dirind = 0; dirind < 4; dirind++) {
		if (strcmp (reflections[dirind], argv[i]) == 0) break;
	    }
	    if (dirind == 4)
		argerr ("%s: invalid argument '%s'\n", argv[i-1], argv[i]);
	    config_output->rotation &= ~(RR_Reflect_X|RR_Reflect_Y);
	    config_output->rotation |= dirind * RR_Reflect_X;
	    config_output->changes |= changes_reflection;
	    continue;
	}
	if (!strcmp ("--left-of", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    config_output->relation = relation_left_of;
	    config_output->relative_to = argv[i];
	    config_output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--right-of", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    config_output->relation = relation_right_of;
	    config_output->relative_to = argv[i];
	    config_output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--above", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    config_output->relation = relation_above;
	    config_output->relative_to = argv[i];
	    config_output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--below", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    config_output->relation = relation_below;
	    config_output->relative_to = argv[i];
	    config_output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--same-as", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    config_output->relation = relation_same_as;
	    config_output->relative_to = argv[i];
	    config_output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--panning", argv[i])) {
	    XRRPanning *pan;
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    pan = &config_output->panning;
	    switch (sscanf (argv[i], "%dx%d+%d+%d/%dx%d+%d+%d/%d/%d/%d/%d",
			    &pan->width, &pan->height, &pan->left, &pan->top,
			    &pan->track_width, &pan->track_height,
			    &pan->track_left, &pan->track_top,
			    &pan->border_left, &pan->border_top,
			    &pan->border_right, &pan->border_bottom)) {
	    case 2:
		pan->left = pan->top = 0;
		/* fall through */
	    case 4:
		pan->track_left = pan->track_top =
		    pan->track_width = pan->track_height = 0;
		/* fall through */
	    case 8:
		pan->border_left = pan->border_top =
		    pan->border_right = pan->border_bottom = 0;
		/* fall through */
	    case 12:
		break;
	    default:
		argerr ("%s: invalid argument '%s'\n", argv[i-1], argv[i]);
	    }
	    config_output->changes |= changes_panning;
	    continue;
	}
	if (!strcmp ("--gamma", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf(argv[i], "%f:%f:%f", &config_output->gamma.red,
		    &config_output->gamma.green, &config_output->gamma.blue) != 3)
		argerr ("%s: invalid argument '%s'\n", argv[i-1], argv[i]);
	    config_output->changes |= changes_gamma;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--brightness", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf(argv[i], "%f", &config_output->brightness) != 1)
		argerr ("%s: invalid argument '%s'\n", argv[i-1], argv[i]);
	    config_output->changes |= changes_gamma;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--primary", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    config_output->changes |= changes_primary;
	    config_output->primary = True;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--noprimary", argv[i])) {
	    no_primary = True;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--set", argv[i])) {
	    output_prop_t   *prop;
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (i+2 >= argc) argerr ("%s requires two arguments\n", argv[i]);
	    prop = malloc (sizeof (output_prop_t));
	    prop->next = config_output->props;
	    config_output->props = prop;
	    prop->name = argv[++i];
	    prop->value = argv[++i];
	    propit = True;
	    config_output->changes |= changes_property;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--scale", argv[i]))
	{
	    double  sx, sy;
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf (argv[i], "%lfx%lf", &sx, &sy) != 2)
		argerr ("failed to parse '%s' as a scaling factor\n", argv[i]);
	    init_transform (&config_output->transform);
	    config_output->transform.transform.matrix[0][0] = XDoubleToFixed (sx);
	    config_output->transform.transform.matrix[1][1] = XDoubleToFixed (sy);
	    config_output->transform.transform.matrix[2][2] = XDoubleToFixed (1.0);
	    if (sx != 1 || sy != 1)
		config_output->transform.filter = "bilinear";
	    else
		config_output->transform.filter = "nearest";
	    config_output->transform.nparams = 0;
	    config_output->transform.params = NULL;
	    config_output->changes |= changes_transform;
	    continue;
	}
	if (!strcmp ("--scale-from", argv[i]))
	{
	    int w, h;
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf (argv[i], "%dx%d", &w, &h) != 2)
		argerr ("failed to parse '%s' as a scale-from size\n", argv[i]);
	    if (w <=0 || h <= 0)
		argerr ("--scale-from dimensions must be nonnegative\n");
	    config_output->scale_from_w = w;
	    config_output->scale_from_h = h;
	    config_output->changes |= changes_transform;
	    continue;
	}
	if (!strcmp ("--transform", argv[i])) {
	    double  transform[3][3];
	    int	    k, l;
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    init_transform (&config_output->transform);
	    if (strcmp (argv[i], "none") != 0)
	    {
		if (sscanf(argv[i], "%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf",
			   &transform[0][0],&transform[0][1],&transform[0][2],
			   &transform[1][0],&transform[1][1],&transform[1][2],
			   &transform[2][0],&transform[2][1],&transform[2][2])
		    != 9)
		    argerr ("failed to parse '%s' as a transformation\n", argv[i]);
		init_transform (&config_output->transform);
		for (k = 0; k < 3; k++)
		    for (l = 0; l < 3; l++) {
			config_output->transform.transform.matrix[k][l] = XDoubleToFixed (transform[k][l]);
		    }
		config_output->transform.filter = "bilinear";
		config_output->transform.nparams = 0;
		config_output->transform.params = NULL;
	    }
	    config_output->changes |= changes_transform;
	    continue;
	}
	if (!strcmp ("--off", argv[i])) {
	    if (!config_output) argerr ("%s must be used after --output\n", argv[i]);
	    set_name_xid (&config_output->mode, None);
	    set_name_xid (&config_output->crtc, None);
	    config_output->changes |= changes_mode | changes_crtc;
	    continue;
	}
	if (!strcmp ("--fb", argv[i])) {
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf (argv[i], "%dx%d",
			&fb_width, &fb_height) != 2)
		argerr ("failed to parse '%s' as a framebuffer size\n", argv[i]);
	    setit_1_2 = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--fbmm", argv[i])) {
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    if (sscanf (argv[i], "%dx%d",
			&fb_width_mm, &fb_height_mm) != 2)
		argerr ("failed to parse '%s' as a physical size\n", argv[i]);
	    setit_1_2 = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--dpi", argv[i])) {
	    char *strtod_error;
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    dpi = strtod(argv[i], &strtod_error);
	    if (argv[i] == strtod_error)
	    {
		dpi = 0.0;
		dpi_output_name = argv[i];
	    }
	    setit_1_2 = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--auto", argv[i])) {
	    if (config_output)
	    {
		config_output->automatic = True;
		config_output->changes |= changes_automatic;
	    }
	    else
		automatic = True;
	    setit_1_2 = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--q12", argv[i]))
	{
	    query_1_2 = True;
	    continue;
	}
	if (!strcmp ("--q1", argv[i]))
	{
	    query_1 = True;
	    continue;
	}
	if (!strcmp ("--newmode", argv[i]))
	{
	    umode_t  *m = calloc (1, sizeof (umode_t));
	    double    clock;
	    
	    ++i;
	    if (i + 9 >= argc)
		argerr ("failed to parse '%s' as a mode specification\n", argv[i]);
	    m->mode.name = argv[i];
	    m->mode.nameLength = strlen (argv[i]);
	    i++;
	    clock = check_strtod(argv[i++]);
	    m->mode.dotClock = clock * 1e6;

	    m->mode.width = check_strtol(argv[i++]);
	    m->mode.hSyncStart = check_strtol(argv[i++]);
	    m->mode.hSyncEnd = check_strtol(argv[i++]);
	    m->mode.hTotal = check_strtol(argv[i++]);
	    m->mode.height = check_strtol(argv[i++]);
	    m->mode.vSyncStart = check_strtol(argv[i++]);
	    m->mode.vSyncEnd = check_strtol(argv[i++]);
	    m->mode.vTotal = check_strtol(argv[i++]);
	    m->mode.modeFlags = 0;
	    while (i < argc) {
		int f;
		
		for (f = 0; mode_flags[f].string; f++)
		    if (!strcasecmp (mode_flags[f].string, argv[i]))
			break;
		
		if (!mode_flags[f].string)
		    break;
    		m->mode.modeFlags |= mode_flags[f].flag;
    		i++;
	    }
	    m->next = umodes;
	    m->action = umode_create;
	    umodes = m;
	    modeit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--rmmode", argv[i]))
	{
	    umode_t  *m = calloc (1, sizeof (umode_t));

	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    set_name (&m->name, argv[i], name_string|name_xid);
	    m->action = umode_destroy;
	    m->next = umodes;
	    umodes = m;
	    modeit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--addmode", argv[i]))
	{
	    umode_t  *m = calloc (1, sizeof (umode_t));

	    if (i+2 >= argc) argerr ("%s requires two arguments\n", argv[i]);
	    set_name (&m->output, argv[++i], name_string|name_xid);
	    set_name (&m->name, argv[++i], name_string|name_xid);
	    m->action = umode_add;
	    m->next = umodes;
	    umodes = m;
	    modeit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--delmode", argv[i]))
	{
	    umode_t  *m = calloc (1, sizeof (umode_t));

	    if (i+2 >= argc) argerr ("%s requires two arguments\n", argv[i]);
	    set_name (&m->output, argv[++i], name_string|name_xid);
	    set_name (&m->name, argv[++i], name_string|name_xid);
	    m->action = umode_delete;
	    m->next = umodes;
	    umodes = m;
	    modeit = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp ("--listproviders", argv[i]))
	{
	    list_providers = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp("--setprovideroutputsource", argv[i]))
	{ 
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    set_name (&provider_name, argv[i], name_string|name_xid|name_index);
	    if (++i>=argc) 
		set_name_xid (&output_source_provider_name, 0);
	    else
		set_name (&output_source_provider_name, argv[i], name_string|name_xid|name_index);
	    action_requested = True;
	    provsetoutsource = True;
	    continue;
	}
	if (!strcmp("--setprovideroffloadsink", argv[i]))
	{ 
	    if (++i >= argc) argerr ("%s requires an argument\n", argv[i-1]);
	    set_name (&provider_name, argv[i], name_string|name_xid|name_index);
	    if (++i>=argc) 
		set_name_xid (&offload_sink_provider_name, 0);
	    else
		set_name (&offload_sink_provider_name, argv[i], name_string|name_xid|name_index);
	    action_requested = True;
	    provsetoffsink = True;
	    continue;
	}
	if (!strcmp("--listmonitors", argv[i]))
	{
	    list_monitors = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp("--listactivemonitors", argv[i]))
	{
	    list_active_monitors = True;
	    action_requested = True;
	    continue;
	}
	if (!strcmp("--setmonitor", argv[i]))
	{
	    umonitor_t	*m = calloc(1, sizeof (umonitor_t)), **l;
	    char	*t;
	    char	*o;
	    char	*n;
	    char	*geom;

	    if (i+3 >= argc) argerr("%s requires three argument\n", argv[i]);
	    n = argv[++i];
	    if (*n == '*') {
		m->primary = True;
		n++;
	    }
	    m->name = n;
	    m->set = True;
	    geom = argv[++i];

	    if (strncmp (geom, "auto", 4) != 0) {
		if (sscanf(geom, "%d/%dx%d/%d+%d+%d",
			   &m->width, &m->mmwidth, &m->height, &m->mmheight, &m->x, &m->y) != 6)
		    argerr ("failed to parse '%s' as monitor geometry\n", argv[i]);
	    }

	    o = argv[++i];
	    if (strcmp(o, "none") != 0) {
		printf ("output list %s\n", o);
		for (; (t = strtok(o, ",")) != NULL; o = NULL) {
		    m->outputs = realloc(m->outputs, (m->noutput + 1) * sizeof (name_t));
		    printf ("add monitor %s\n", t);
		    set_name(&m->outputs[m->noutput++], t, name_string|name_xid|name_index);
		    printf ("output name %s\n", m->outputs[m->noutput-1].string);
		}
	    }
	    for (l = &umonitors; *l; l = &((*l)->next));
	    *l = m;
	    action_requested = True;
	    monitorit = True;
	    continue;
	}
	if (!strcmp("--delmonitor", argv[i]))
	{
	    umonitor_t	*m = calloc(1, sizeof (umonitor_t)), **l;

	    if (++i >= argc) argerr("%s requires an argument\n", argv[i-1]);

	    m->name = argv[i];
	    m->set = False;
	    for (l = &umonitors; *l; l = &((*l)->next));
	    *l = m;
	    action_requested = True;
	    monitorit = True;
	    continue;
	}

	argerr ("unrecognized option '%s'\n", argv[i]);
    }
    if (!action_requested)
	    query = True;
    if (verbose) 
    {
	query = True;
	if (setit && !setit_1_2)
	    query_1 = True;
    }
    if (version)
	printf("xrandr program version       " VERSION "\n");

    dpy = XOpenDisplay (display_name);

    if (dpy == NULL) {
	fprintf (stderr, "Can't open display %s\n", XDisplayName(display_name));
	exit (1);
    }
    if (screen < 0)
	screen = DefaultScreen (dpy);
    if (screen >= ScreenCount (dpy)) {
	fprintf (stderr, "Invalid screen number %d (display has %d)\n",
		 screen, ScreenCount (dpy));
	exit (1);
    }

    root = RootWindow (dpy, screen);

    if (!XRRQueryExtension (dpy, &event_base, &error_base) ||
        !XRRQueryVersion (dpy, &major, &minor))
    {
	fprintf (stderr, "RandR extension missing\n");
	exit (1);
    }
    if (major > 1 || (major == 1 && minor >= 2))
	has_1_2 = True;
    if (major > 1 || (major == 1 && minor >= 3))
	has_1_3 = True;
    if (major > 1 || (major == 1 && minor >= 4))
	has_1_4 = True;
    if (major > 1 || (major == 1 && minor >= 5))
	has_1_5 = True;
    if (has_1_2 && modeit)
    {
	umode_t	*m;

        get_screen (True);
	get_crtcs();
	get_outputs();
	
	for (m = umodes; m; m = m->next)
	{
	    XRRModeInfo *e;
	    output_t	*o;
	    
	    switch (m->action) {
	    case umode_create:
		XRRCreateMode (dpy, root, &m->mode);
		break;
	    case umode_destroy:
		e = find_mode (&m->name, 0);
		if (!e)
		    fatal ("cannot find mode \"%s\"\n", m->name.string);
		XRRDestroyMode (dpy, e->id);
		break;
	    case umode_add:
		o = find_output (&m->output);
		if (!o)
		    fatal ("cannot find output \"%s\"\n", m->output.string);
		e = find_mode (&m->name, 0);
		if (!e)
		    fatal ("cannot find mode \"%s\"\n", m->name.string);
		XRRAddOutputMode (dpy, o->output.xid, e->id);
		break;
	    case umode_delete:
		o = find_output (&m->output);
		if (!o)
		    fatal ("cannot find output \"%s\"\n", m->output.string);
		e = find_mode (&m->name, 0);
		if (!e)
		    fatal ("cannot find mode \"%s\"\n", m->name.string);
		XRRDeleteOutputMode (dpy, o->output.xid, e->id);
		break;
	    }
	}
	if (!propit && !setit_1_2 && !monitorit)
	{
	    XSync (dpy, False);
	    exit (0);
	}
    }
    if (has_1_2 && propit)
    {
	output_t *output;

        get_screen (True);
	get_crtcs();
	get_outputs();
	
	for (output = all_outputs; output; output = output->next)
	{
	    output_prop_t   *prop;

	    for (prop = output->props; prop; prop = prop->next)
	    {
		Atom		name = XInternAtom (dpy, prop->name, False);
		Atom		type;
		int		format = 0;
		unsigned char	*data, *malloced_data = NULL;
		int		nelements;
		int		int_value;
		unsigned long	ulong_value;
		unsigned char	*prop_data;
		int		actual_format;
		unsigned long	nitems, bytes_after;
		Atom		actual_type;
		XRRPropertyInfo *propinfo;

		type = AnyPropertyType;
		
		if (XRRGetOutputProperty (dpy, output->output.xid, name,
					  0, 100, False, False,
					  AnyPropertyType,
					  &actual_type, &actual_format,
					  &nitems, &bytes_after, &prop_data) == Success &&

		    (propinfo = XRRQueryOutputProperty(dpy, output->output.xid,
						      name)))
		{
		    type = actual_type;
		    format = actual_format;
		}

		malloced_data = property_values_from_string
		    (prop->value, type, actual_format, &nelements);

		if (malloced_data)
		{
		    data = malloced_data;
		    type = actual_type;
		    format = actual_format;
		}
		else if (type == AnyPropertyType &&
		    (sscanf (prop->value, "%d", &int_value) == 1 ||
		     sscanf (prop->value, "0x%x", &int_value) == 1))
		{
		    type = XA_INTEGER;
		    ulong_value = int_value;
		    data = (unsigned char *) &ulong_value;
		    nelements = 1;
		    format = 32;
		}
		else if (type == XA_ATOM)
		{
		    ulong_value = XInternAtom (dpy, prop->value, False);
		    data = (unsigned char *) &ulong_value;
		    nelements = 1;
		}
		else if (type == XA_STRING || type == AnyPropertyType)
		{
		    type = XA_STRING;
		    data = (unsigned char *) prop->value;
		    nelements = strlen (prop->value);
		    format = 8;
		}
		else
		    continue;
		XRRChangeOutputProperty (dpy, output->output.xid,
					 name, type, format, PropModeReplace,
					 data, nelements);
		free (malloced_data);
	    }
	}
	if (!setit_1_2)
	{
	    XSync (dpy, False);
	    exit (0);
	}
    }
    if (provsetoutsource)
    {
	provider_t *provider, *source;

	if (!has_1_4)
	    fatal ("--setprovideroutputsource requires RandR 1.4\n");

	get_screen (True);
	get_providers ();

	provider = find_provider (&provider_name);
	source = find_provider(&output_source_provider_name);

	XRRSetProviderOutputSource(dpy, provider->provider.xid, source ? source->provider.xid : 0);
    }
    if (provsetoffsink)
    {
	provider_t *provider, *sink;

	if (!has_1_4)
	    fatal ("--setprovideroffloadsink requires RandR 1.4\n");

	get_screen (True);
	get_providers ();

	provider = find_provider (&provider_name);
	sink = find_provider(&offload_sink_provider_name);

	XRRSetProviderOffloadSink(dpy, provider->provider.xid, sink ? sink->provider.xid : 0);
    }
    if (setit_1_2)
    {
	get_screen (True);
	get_crtcs ();
	get_outputs ();
	set_positions ();
	set_screen_size ();

	pick_crtcs ();

	/*
	 * Assign outputs to crtcs
	 */
	set_crtcs ();
	
	/*
	 * Mark changing crtcs
	 */
	mark_changing_crtcs ();

	/*
	 * If an output was specified to track dpi, use it
	 */
	if (dpi_output_name)
	{
	    output_t	*dpi_output = find_output_by_name (dpi_output_name);
	    XRROutputInfo	*output_info;
	    XRRModeInfo	*mode_info;
	    if (!dpi_output)
		fatal ("Cannot find output %s\n", dpi_output_name);
	    output_info = dpi_output->output_info;
	    mode_info = dpi_output->mode_info;
	    if (output_info && mode_info && output_info->mm_height)
	    {
		/*
		 * When this output covers the whole screen, just use
		 * the known physical size
		 */
		if (fb_width == mode_info->width &&
		    fb_height == mode_info->height)
		{
		    fb_width_mm = output_info->mm_width;
		    fb_height_mm = output_info->mm_height;
		}
		else
		{
		    dpi = (25.4 * mode_info->height) / output_info->mm_height;
		}
	    }
	}

	/*
	 * Compute physical screen size
	 */
	if (fb_width_mm == 0 || fb_height_mm == 0)
	{
	    if (fb_width != DisplayWidth (dpy, screen) ||
		fb_height != DisplayHeight (dpy, screen) || dpi != 0.0)
	    {
		if (dpi <= 0)
		    dpi = (25.4 * DisplayHeight (dpy, screen)) / DisplayHeightMM(dpy, screen);

		fb_width_mm = (25.4 * fb_width) / dpi;
		fb_height_mm = (25.4 * fb_height) / dpi;
	    }
	    else
	    {
		fb_width_mm = DisplayWidthMM (dpy, screen);
		fb_height_mm = DisplayHeightMM (dpy, screen);
	    }
	}
	
	/*
	 * Set panning
	 */
	set_panning ();

	/* 
	 * Set gamma on crtc's that belong to the outputs.
	 */
	set_gamma ();

	/*
	 * Now apply all of the changes
	 */
	apply ();
	
	if (!monitorit) {
	    XSync (dpy, False);
	    exit (0);
	}
    }
    if (monitorit) {
	umonitor_t	*u;
	Atom		name;

	if (!has_1_5) {
	    printf("RandR 1.5 not supported\n");
	    exit(0);
	}

	get_screen(True);
	get_monitors(True);
	get_crtcs();
	get_outputs();

	for (u = umonitors; u; u = u->next) {
	    if (u->set) {
		XRRMonitorInfo	*m;
		int		o;

		name = XInternAtom(dpy, u->name, False);
		m = XRRAllocateMonitor(dpy, u->noutput);

		m->name = name;
		m->primary = u->primary;
		m->x = u->x;
		m->y = u->y;
		m->width = u->width;
		m->height = u->height;
		m->mwidth = u->mmwidth;
		m->mheight = u->mmheight;
		for (o = 0; o < u->noutput; o++) {
		    output_t	*output = find_output(&u->outputs[o]);
		    if (!output)
			fatal("cannot find output\n");
		    m->outputs[o] = output->output.xid;
		}

		XRRSetMonitor(dpy, root, m);

		XRRFreeMonitors(m);
	    } else {
		int	m;

		name = XInternAtom(dpy, u->name, True);
		if (!name) {
		    printf("No monitor named '%s'\n", u->name);
		} else {
		    if (!monitors)
			printf ("No monitors\n");
		    else {
			for (m = 0; m < monitors->n; m++) {
			    if (monitors->monitors[m].name == name)
				break;
			}
			if (m == monitors->n)
			    printf("No monitor named '%s'\n", u->name);
			else
			    XRRDeleteMonitor(dpy, root, name);
		    }
		}
	    }
	}
	XSync (dpy, False);
	exit (0);
    }
    if (query_1_2 || (query && has_1_2 && !query_1))
    {
	output_t    *output;
	int	    m;
	
#define ModeShown   0x80000000
	
	get_screen (current);
	get_crtcs ();
	get_outputs ();

        printf ("Screen %d: minimum %d x %d, current %d x %d, maximum %d x %d\n",
		screen, minWidth, minHeight,
		DisplayWidth (dpy, screen), DisplayHeight(dpy, screen),
		maxWidth, maxHeight);

	for (output = all_outputs; output; output = output->next)
	{
	    XRROutputInfo   *output_info = output->output_info;
	    crtc_t	    *cur_crtc = output->crtc_info;
	    XRRCrtcInfo	    *crtc_info = cur_crtc ? cur_crtc->crtc_info : NULL;
	    XRRModeInfo	    *cur_mode = output->mode_info;
	    Atom	    *props;
	    int		    j, nprop;
	    Bool	    *mode_shown;
	    Rotation	    rotations = output_rotations (output);

	    printf ("%s %s", output_info->name, connection[output_info->connection]);
	    if (output->primary) {
		printf(" primary");
	    }
	    if (cur_mode)
	    {
		if (crtc_info) {
		    printf (" %dx%d+%d+%d",
			    crtc_info->width, crtc_info->height,
			    crtc_info->x, crtc_info->y);
		} else {
		    printf (" %dx%d+%d+%d",
			    cur_mode->width, cur_mode->height, output->x,
			    output->y);
		}
		if (verbose)
		    printf (" (0x%x)", (int)cur_mode->id);
		if (output->rotation != RR_Rotate_0 || verbose)
		{
		    printf (" %s", 
			    rotation_name (output->rotation));
		    if (output->rotation & (RR_Reflect_X|RR_Reflect_Y))
			printf (" %s", reflection_name (output->rotation));
		}
	    }
	    if (rotations != RR_Rotate_0 || verbose)
	    {
		Bool    first = True;
		printf (" (");
		for (i = 0; i < 4; i ++) {
		    if ((rotations >> i) & 1) {
			if (!first) printf (" "); first = False;
			printf("%s", direction[i]);
		    }
		}
		if (rotations & RR_Reflect_X)
		{
		    if (!first) printf (" "); first = False;
		    printf ("x axis");
		}
		if (rotations & RR_Reflect_Y)
		{
		    if (!first) printf (" ");
		    printf ("y axis");
		}
		printf (")");
	    }

	    if (cur_mode)
	    {
		printf (" %dmm x %dmm",
			(int)output_info->mm_width, (int)output_info->mm_height);
	    }

	    if (cur_crtc && cur_crtc->panning_info &&
		cur_crtc->panning_info->width > 0)
	    {
		XRRPanning *pan = cur_crtc->panning_info;
		printf (" panning %dx%d+%d+%d",
			pan->width, pan->height, pan->left, pan->top);
		if ((pan->track_width    != 0 &&
		     (pan->track_left    != pan->left		||
		      pan->track_width   != pan->width		||
		      pan->border_left   != 0			||
		      pan->border_right  != 0))			||
		    (pan->track_height   != 0 &&
		     (pan->track_top     != pan->top		||
		      pan->track_height  != pan->height		||
		      pan->border_top    != 0			||
		      pan->border_bottom != 0)))
		    printf (" tracking %dx%d+%d+%d border %d/%d/%d/%d",
			    pan->track_width,  pan->track_height,
			    pan->track_left,   pan->track_top,
			    pan->border_left,  pan->border_top,
			    pan->border_right, pan->border_bottom);
	    }
	    printf ("\n");

	    if (verbose)
	    {
		printf ("\tIdentifier: 0x%x\n", (int)output->output.xid);
		printf ("\tTimestamp:  %d\n", (int)output_info->timestamp);
		printf ("\tSubpixel:   %s\n", order[output_info->subpixel_order]);
	        if (output->gamma.red != 0.0 && output->gamma.green != 0.0 && output->gamma.blue != 0.0) {
		    printf ("\tGamma:      %#.2g:%#.2g:%#.2g\n",
			    output->gamma.red, output->gamma.green, output->gamma.blue);
		    printf ("\tBrightness: %#.2g\n", output->brightness);
		}
		printf ("\tClones:    ");
		for (j = 0; j < output_info->nclone; j++)
		{
		    output_t	*clone = find_output_by_xid (output_info->clones[j]);

		    if (clone) printf (" %s", clone->output.string);
		}
		printf ("\n");
		if (output->crtc_info)
		    printf ("\tCRTC:       %d\n", output->crtc_info->crtc.index);
		printf ("\tCRTCs:     ");
		for (j = 0; j < output_info->ncrtc; j++)
		{
		    crtc_t	*crtc = find_crtc_by_xid (output_info->crtcs[j]);
		    if (crtc)
			printf (" %d", crtc->crtc.index);
		}
		printf ("\n");
		if (output->crtc_info && output->crtc_info->panning_info) {
		    XRRPanning *pan = output->crtc_info->panning_info;
		    printf ("\tPanning:    %dx%d+%d+%d\n",
			    pan->width, pan->height, pan->left, pan->top);
		    printf ("\tTracking:   %dx%d+%d+%d\n",
			    pan->track_width,  pan->track_height,
			    pan->track_left,   pan->track_top);
		    printf ("\tBorder:     %d/%d/%d/%d\n",
			    pan->border_left,  pan->border_top,
			    pan->border_right, pan->border_bottom);
		}
	    }
	    if (verbose)
	    {
		int x, y;

		printf ("\tTransform: ");
		for (y = 0; y < 3; y++)
		{
		    for (x = 0; x < 3; x++)
			printf (" %f", XFixedToDouble (output->transform.transform.matrix[y][x]));
		    if (y < 2)
			printf ("\n\t           ");
		}
		if (output->transform.filter)
		    printf ("\n\t           filter: %s", output->transform.filter);
		printf ("\n");
	    }
	    if (verbose || properties)
	    {
		props = XRRListOutputProperties (dpy, output->output.xid,
						 &nprop);
		for (j = 0; j < nprop; j++) {
		    unsigned char *prop;
		    int actual_format;
		    unsigned long nitems, bytes_after;
		    Atom actual_type;
		    XRRPropertyInfo *propinfo;
		    char *atom_name = XGetAtomName (dpy, props[j]);
		    int k;

		    XRRGetOutputProperty (dpy, output->output.xid, props[j],
					  0, 100, False, False,
					  AnyPropertyType,
					  &actual_type, &actual_format,
					  &nitems, &bytes_after, &prop);

		    propinfo = XRRQueryOutputProperty(dpy, output->output.xid,
						      props[j]);

		    printf ("\t%s: ", atom_name);

		    print_output_property(atom_name, actual_format,
					  actual_type, nitems, prop);

		    if (propinfo->range && propinfo->num_values > 0)
		    {
			printf ("\t\trange%s: ",
			        (propinfo->num_values == 2) ? "" : "s");
			for (k = 0; k < propinfo->num_values / 2; k++)
			{
			    printf ("(");
			    print_output_property_value (32, actual_type,
							 (unsigned char *) &(propinfo->values[k * 2]));
			    printf (", ");
			    print_output_property_value (32, actual_type,
							 (unsigned char *) &(propinfo->values[k * 2 + 1]));
			    printf (")");
			    if (k < propinfo->num_values / 2 - 1)
				printf (", ");
			}
			printf ("\n");
		    }
		    if (!propinfo->range && propinfo->num_values > 0)
		    {
			printf ("\t\tsupported: ");
			for (k = 0; k < propinfo->num_values; k++)
			{
			    print_output_property_value (32, actual_type,
							 (unsigned char *) &(propinfo->values[k]));
			    if (k < propinfo->num_values - 1)
				printf (", ");
			}
			printf ("\n");
		    }

		    free(propinfo);
		}
	    }

	    if (verbose)
	    {
		for (j = 0; j < output_info->nmode; j++)
		{
		    XRRModeInfo	*mode = find_mode_by_xid (output_info->modes[j]);

		    print_verbose_mode (mode, mode == output->mode_info,
					j < output_info->npreferred);
		    mode->modeFlags |= ModeShown;
		}
	    }
	    else
	    {
		mode_shown = calloc (output_info->nmode, sizeof (Bool));
		if (!mode_shown) fatal ("out of memory\n");
		for (j = 0; j < output_info->nmode; j++)
		{
		    XRRModeInfo *jmode, *kmode;
		    int k;
		    
		    if (mode_shown[j]) continue;
    
		    jmode = find_mode_by_xid (output_info->modes[j]);
		    printf (" ");
		    printf ("  %-12s", jmode->name);
		    for (k = j; k < output_info->nmode; k++)
		    {
			if (mode_shown[k]) continue;
			kmode = find_mode_by_xid (output_info->modes[k]);
			if (strcmp (jmode->name, kmode->name) != 0) continue;
			mode_shown[k] = True;
			kmode->modeFlags |= ModeShown;
			printf (" %6.2f", mode_refresh (kmode));
			if (kmode == output->mode_info)
			    printf ("*");
			else
			    printf (" ");
			if (k < output_info->npreferred)
			    printf ("+");
			else
			    printf (" ");
		    }
		    printf ("\n");
		}
		free (mode_shown);
	    }
	}
	for (m = 0; m < res->nmode; m++)
	{
	    XRRModeInfo	*mode = &res->modes[m];

	    if (!(mode->modeFlags & ModeShown))
		print_verbose_mode(mode, False, False);
	}
	exit (0);
    }
    if (list_providers) {
	int k;

	if (!has_1_4) {
	    printf ("RandR 1.4 not supported\n");
	    exit (0);
	}

	get_screen (current);
	get_providers ();

	if (providers) {
	    int j;

	    printf("Providers: number : %d\n", num_providers);

	    for (j = 0; j < num_providers; j++) {
		provider_t *provider = &providers[j];
		XRRProviderInfo *info = provider->info;

		printf("Provider %d: id: 0x%x cap: 0x%x", j, (int)provider->provider.xid, info->capabilities);
		for (k = 0; k < 4; k++)
			if (info->capabilities & (1 << k))
				printf(", %s", capability_name(1<<k));

		printf(" crtcs: %d outputs: %d associated providers: %d name:%s\n", info->ncrtcs, info->noutputs, info->nassociatedproviders, info->name);
	    }
	}
    }
    if (list_monitors || list_active_monitors) {

	if (!has_1_5) {
	    printf("RandR 1.5 not supported\n");
	    exit(0);
	}

	get_screen(current);
	get_monitors(list_active_monitors ? True : False);
	get_crtcs();
	get_outputs();

	if (monitors) {
	    int m, o;

	    printf("Monitors: %d\n", monitors->n);

	    for (m = 0; m < monitors->n; m++) {
		printf (" %d: %s%s%s %d/%dx%d/%d+%d+%d ",
			m,
			monitors->monitors[m].automatic ? "+" : "",
			monitors->monitors[m].primary ? "*" : "",
			XGetAtomName(dpy, monitors->monitors[m].name),
			monitors->monitors[m].width,
			monitors->monitors[m].mwidth,
			monitors->monitors[m].height,
			monitors->monitors[m].mheight,
			monitors->monitors[m].x,
			monitors->monitors[m].y);
		for (o = 0; o < monitors->monitors[m].noutput; o++) {
		    output_t	*output = find_output_by_xid(monitors->monitors[m].outputs[o]);
		    if (output)
			printf (" %s", output->output.string);
		    else
			printf (" unknown output 0x%x\n", (CARD32) monitors->monitors[m].outputs[o]);
		}
		printf ("\n");
	    }
	}
    }

    sc = XRRGetScreenInfo (dpy, root);

    if (sc == NULL) 
	exit (1);

    current_size = XRRConfigCurrentConfiguration (sc, &current_rotation);

    sizes = XRRConfigSizes(sc, &nsize);

    if (have_pixel_size) {
	for (size = 0; size < nsize; size++)
	{
	    if (sizes[size].width == width && sizes[size].height == height)
		break;
	}
	if (size >= nsize) {
	    fprintf (stderr,
		     "Size %dx%d not found in available modes\n", width, height);
	    exit (1);
	}
    }
    else if (size < 0)
	size = current_size;
    else if (size >= nsize) {
	fprintf (stderr,
		 "Size index %d is too large, there are only %d sizes\n",
		 size, nsize);
	exit (1);
    }

    if (rot < 0)
    {
	for (rot = 0; rot < 4; rot++)
	    if (1 << rot == (current_rotation & 0xf))
		break;
    }

    current_rate = XRRConfigCurrentRate (sc);

    if (rate < 0)
    {
	if (size == current_size)
	    rate = current_rate;
	else
	    rate = 0;
    }
    else
    {
	rates = XRRConfigRates (sc, size, &nrate);
	for (i = 0; i < nrate; i++)
	    if (rate == rates[i])
		break;
	if (i == nrate) {
	    fprintf (stderr, "Rate %.2f Hz not available for this size\n", rate);
	    exit (1);
	}
    }

    if (version) {
	int major_version, minor_version;
	XRRQueryVersion (dpy, &major_version, &minor_version);
	printf("Server reports RandR version %d.%d\n", 
	       major_version, minor_version);
    }

    if (query || query_1) {
	printf(" SZ:    Pixels          Physical       Refresh\n");
	for (i = 0; i < nsize; i++) {
	    int j;

	    printf ("%c%-2d %5d x %-5d  (%4dmm x%4dmm )",
		    i == current_size ? '*' : ' ',
		    i, sizes[i].width, sizes[i].height,
		    sizes[i].mwidth, sizes[i].mheight);
	    rates = XRRConfigRates (sc, i, &nrate);
	    if (nrate) printf ("  ");
	    for (j = 0; j < nrate; j++)
		printf ("%c%-4d",
			i == current_size && rates[j] == current_rate ? '*' : ' ',
			rates[j]);
	    printf ("\n");
	}
    }

    {
	Rotation rotations = XRRConfigRotations(sc, &current_rotation);

	if (toggle_x && !(current_rotation & RR_Reflect_X)) reflection |= RR_Reflect_X;
	if (toggle_y && !(current_rotation & RR_Reflect_Y)) reflection |= RR_Reflect_Y;

	if (query) {
	    printf("Current rotation - %s\n",
		   rotation_name (current_rotation));

	    printf("Current reflection - %s\n",
		   reflection_name (current_rotation));

	    printf ("Rotations possible - ");
	    for (i = 0; i < 4; i ++) {
		if ((rotations >> i) & 1)  printf("%s ", direction[i]);
	    }
	    printf ("\n");

	    printf ("Reflections possible - ");
	    if (rotations & (RR_Reflect_X|RR_Reflect_Y))
	    {
		if (rotations & RR_Reflect_X) printf ("X Axis ");
		if (rotations & RR_Reflect_Y) printf ("Y Axis");
	    }
	    else
		printf ("none");
	    printf ("\n");
	}
    }

    if (verbose) { 
	printf("Setting size to %d, rotation to %s\n",  size, direction[rot]);

	printf ("Setting reflection on ");
	if (reflection)
	{
	    if (reflection & RR_Reflect_X) printf ("X Axis ");
	    if (reflection & RR_Reflect_Y) printf ("Y Axis");
	}
	else
	    printf ("neither axis");
	printf ("\n");
    }

    /* we should test configureNotify on the root window */
    XSelectInput (dpy, root, StructureNotifyMask);

    if (setit && !dryrun) XRRSelectInput (dpy, root,
			       RRScreenChangeNotifyMask);
    if (setit && !dryrun) {
	Rotation rotation = 1 << rot;
	status = XRRSetScreenConfigAndRate (dpy, sc, root, (SizeID) size,
					    (Rotation) (rotation | reflection),
					    rate, CurrentTime);
    }

    if (setit && !dryrun && status == RRSetConfigFailed) {
	printf ("Failed to change the screen configuration!\n");
	ret = 1;
    }

    if (verbose && setit && !dryrun && size != current_size) {
	if (status == RRSetConfigSuccess)
	{
	    Bool    seen_screen = False;
	    while (!seen_screen) {
		int spo;
		XNextEvent(dpy, (XEvent *) &event);

		printf ("Event received, type = %d\n", event.type);
		/* update Xlib's knowledge of the event */
		XRRUpdateConfiguration (&event);
		if (event.type == ConfigureNotify)
		    printf("Received ConfigureNotify Event!\n");

		switch (event.type - event_base) {
		case RRScreenChangeNotify:
		    sce = (XRRScreenChangeNotifyEvent *) &event;

		    printf("Got a screen change notify event!\n");
		    printf(" window = %d\n root = %d\n size_index = %d\n rotation %d\n", 
			   (int) sce->window, (int) sce->root, 
			   sce->size_index,  sce->rotation);
		    printf(" timestamp = %ld, config_timestamp = %ld\n",
			   sce->timestamp, sce->config_timestamp);
		    printf(" Rotation = %x\n", sce->rotation);
		    printf(" %d X %d pixels, %d X %d mm\n",
			   sce->width, sce->height, sce->mwidth, sce->mheight);
		    printf("Display width   %d, height   %d\n",
			   DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
		    printf("Display widthmm %d, heightmm %d\n", 
			   DisplayWidthMM(dpy, screen), DisplayHeightMM(dpy, screen));
		    spo = sce->subpixel_order;
		    if ((spo < 0) || (spo > 5))
			printf ("Unknown subpixel order, value = %d\n", spo);
		    else printf ("new Subpixel rendering model is %s\n", order[spo]);
		    seen_screen = True;
		    break;
		default:
		    if (event.type != ConfigureNotify) 
			printf("unknown event received, type = %d!\n", event.type);
		}
	    }
	}
    }
    XRRFreeScreenConfigInfo(sc);
    return(ret);
}
@


1.11
log
@Update to xrandr 1.4.3
@
text
@d156 5
a160 1
           "  --setprovideroffloadsink <prov-xid> <sink-xid>\n");
d311 2
d406 16
d456 1
d458 2
d569 1
a569 1
mode_refresh (XRRModeInfo *mode_info)
d595 1
a595 1
mode_hsync (XRRModeInfo *mode_info)
d607 24
d2246 2
d2279 7
d2287 4
d2327 1
a2327 1
    int nitems = 0, bytes_per_item = format / 8;
d2329 1
a2329 3
    if ((type != XA_INTEGER && type != XA_CARDINAL) ||
	(format != 8 && format != 16 && format != 32))
    {
d2331 14
d2363 2
a2364 2
	    int8_t *ptr = returned_bytes;
	    ptr[nitems] = (int8_t) val;
d2368 2
a2369 2
	    int16_t *ptr = returned_bytes;
	    ptr[nitems] = (int16_t) val;
d2373 2
a2374 2
	    int32_t *ptr = returned_bytes;
	    ptr[nitems] = (int32_t) val;
d2378 2
a2379 2
	    uint8_t *ptr = returned_bytes;
	    ptr[nitems] = (uint8_t) val;
d2383 2
a2384 2
	    uint16_t *ptr = returned_bytes;
	    ptr[nitems] = (uint16_t) val;
d2388 2
a2389 2
	    uint32_t *ptr = returned_bytes;
	    ptr[nitems] = (uint32_t) val;
d2429 2
a2430 2
	    const int8_t *val = value_bytes;
	    printf ("%" PRId8, *val);
d2435 2
a2436 2
	    const int16_t *val = value_bytes;
	    printf ("%" PRId16, *val);
d2441 2
a2442 2
	    const int32_t *val = value_bytes;
	    printf ("%" PRId32, *val);
d2451 2
a2452 2
	    const uint8_t *val = value_bytes;
	    printf ("%" PRIu8, *val);
d2457 2
a2458 2
	    const uint16_t *val = value_bytes;
	    printf ("%" PRIu16, *val);
d2463 2
a2464 2
	    const uint32_t *val = value_bytes;
	    printf ("%" PRIu32, *val);
d2518 1
a2518 1
    int bytes_per_item = value_format / 8;
d2521 13
d2621 16
d2676 3
d3045 1
a3045 1
	    config_output->changes |= changes_mode;
d3214 66
d3322 2
a3323 1
	
d3328 1
a3328 1
        get_screen (current);
d3367 1
a3367 1
	if (!setit_1_2)
d3377 1
a3377 1
        get_screen (current);
d3468 1
a3468 1
	get_screen (current);
d3483 1
a3483 1
	get_screen (current);
d3493 1
a3493 1
	get_screen (current);
d3578 67
d3876 3
a3878 19
		    int		f;
		    
		    printf ("  %s (0x%x) %6.3fMHz",
			    mode->name, (int)mode->id,
			    (double)mode->dotClock / 1000000.0);
		    for (f = 0; mode_flags[f].flag; f++)
			if (mode->modeFlags & mode_flags[f].flag)
			    printf (" %s", mode_flags[f].string);
		    if (mode == output->mode_info)
			printf (" *current");
		    if (j < output_info->npreferred)
			printf (" +preferred");
		    printf ("\n");
		    printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.2fKHz\n",
			    mode->width, mode->hSyncStart, mode->hSyncEnd,
			    mode->hTotal, mode->hSkew, mode_hsync (mode) / 1000);
		    printf ("        v: height %4d start %4d end %4d total %4d           clock %6.2fHz\n",
			    mode->height, mode->vSyncStart, mode->vSyncEnd, mode->vTotal,
			    mode_refresh (mode));
d3923 1
a3923 11
	    {
		printf ("  %s (0x%x) %6.3fMHz\n",
			mode->name, (int)mode->id,
			(double)mode->dotClock / 1000000.0);
		printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.2fKHz\n",
			mode->width, mode->hSyncStart, mode->hSyncEnd,
			mode->hTotal, mode->hSkew, mode_hsync (mode) / 1000);
		printf ("        v: height %4d start %4d end %4d total %4d           clock %6.2fHz\n",
			mode->height, mode->vSyncStart, mode->vSyncEnd, mode->vTotal,
			mode_refresh (mode));
	    }
d3953 40
@


1.10
log
@Update to xrandr 1.4.2
@
text
@d142 1
d1398 1
a1398 1
	int i, size, shift;
a1432 8
	/*
	 * The hardware color lookup table has a number of significant
	 * bits equal to ffs(size) - 1; compute all values so that
	 * they are in the range [0,size) then shift the values so
	 * that they occupy the MSBs of the 16-bit X Color.
	 */
	shift = 16 - (ffs(size) - 1);

d1452 1
a1452 1
		crtc_gamma->red[i] = i;
d1456 1
a1456 2
					  1.0) * (double)(size - 1);
	    crtc_gamma->red[i] <<= shift;
d1459 1
a1459 1
		crtc_gamma->green[i] = i;
d1463 1
a1463 2
					    1.0) * (double)(size - 1);
	    crtc_gamma->green[i] <<= shift;
d1466 1
a1466 1
		crtc_gamma->blue[i] = i;
d1470 1
a1470 2
					   1.0) * (double)(size - 1);
	    crtc_gamma->blue[i] <<= shift;
d2575 2
d2645 1
a2645 1
	    reflection |= RR_Reflect_X;
d2651 1
a2651 1
	    reflection |= RR_Reflect_Y;
d3261 1
a3261 1
		else if ((type == XA_ATOM))
d3267 1
a3267 1
		else if ((type == XA_STRING || type == AnyPropertyType))
d3830 3
a3869 4

	if (reflection & RR_Reflect_X) printf("Setting reflection on X axis\n");

	if (reflection & RR_Reflect_Y) printf("Setting reflection on Y axis\n");
@


1.9
log
@Update to xrandr 1.4.1
@
text
@d546 1
a546 1
    unsigned int vTotal = mode_info->vTotal;
d1569 1
a1569 1
	printf ("crtc %d: %12s %6.1f +%d+%d", crtc->crtc.index,
d2345 1
a2345 2
print_output_property_value(Bool is_edid,
                            int value_format, /* 8, 16, 32 */
a2348 8
    /* special-case the EDID */
    if (is_edid && value_format == 8)
    {
	const uint8_t *val = value_bytes;
	printf ("%02" PRIx8, *val);
	return;
    }

d2409 82
d2524 2
d3309 1
a3309 1
	XRRSetProviderOutputSource(dpy, provider->provider.xid, source->provider.xid);
d3324 1
a3324 1
	XRRSetProviderOffloadSink(dpy, provider->provider.xid, sink->provider.xid);
d3588 1
a3588 2
		    Bool is_edid = strcmp (atom_name, "EDID") == 0;
		    int bytes_per_item, k;
a3598 2
		    bytes_per_item = actual_format / 8;

d3601 2
a3602 23
		    if (is_edid)
		    {
			printf ("\n\t\t");
		    }

		    for (k = 0; k < nitems; k++)
		    {
			if (k != 0)
			{
			    if ((k % 16) == 0)
			    {
				printf ("\n\t\t");
			    }
			}
			print_output_property_value (is_edid, actual_format,
						     actual_type,
						     prop + (k * bytes_per_item));
			if (!is_edid)
			{
			    printf (" ");
			}
		    }
		    printf ("\n");
d3611 1
a3611 1
			    print_output_property_value (False, 32, actual_type,
d3614 1
a3614 1
			    print_output_property_value (False, 32, actual_type,
d3627 1
a3627 1
			    print_output_property_value (False, 32, actual_type,
d3646 1
a3646 1
		    printf ("  %s (0x%x) %6.1fMHz",
d3657 1
a3657 1
		    printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.1fKHz\n",
d3660 1
a3660 1
		    printf ("        v: height %4d start %4d end %4d total %4d           clock %6.1fHz\n",
d3687 1
a3687 1
			printf (" %6.1f", mode_refresh (kmode));
d3708 1
a3708 1
		printf ("  %s (0x%x) %6.1fMHz\n",
d3711 1
a3711 1
		printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.1fKHz\n",
d3714 1
a3714 1
		printf ("        v: height %4d start %4d end %4d total %4d           clock %6.1fHz\n",
d3804 1
a3804 1
	    fprintf (stderr, "Rate %.1f Hz not available for this size\n", rate);
@


1.8
log
@Update to xrandr 1.4.0
@
text
@d44 1
d46 1
d100 56
a155 56
    printf("usage: %s [options]\n", program_name);
    printf("  where options are:\n");
    printf("  -display <display> or -d <display>\n");
    printf("  --help\n");
    printf("  -o <normal,inverted,left,right,0,1,2,3>\n");
    printf("            or --orientation <normal,inverted,left,right,0,1,2,3>\n");
    printf("  -q        or --query\n");
    printf("  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n");
    printf("  -r <rate> or --rate <rate> or --refresh <rate>\n");
    printf("  -v        or --version\n");
    printf("  -x        (reflect in x)\n");
    printf("  -y        (reflect in y)\n");
    printf("  --screen <screen>\n");
    printf("  --verbose\n");
    printf("  --current\n");
    printf("  --dryrun\n");
    printf("  --nograb\n");
    printf("  --prop or --properties\n");
    printf("  --fb <width>x<height>\n");
    printf("  --fbmm <width>x<height>\n");
    printf("  --dpi <dpi>/<output>\n");
    printf("  --output <output>\n");
    printf("      --auto\n");
    printf("      --mode <mode>\n");
    printf("      --preferred\n");
    printf("      --pos <x>x<y>\n");
    printf("      --rate <rate> or --refresh <rate>\n");
    printf("      --reflect normal,x,y,xy\n");
    printf("      --rotate normal,inverted,left,right\n");
    printf("      --left-of <output>\n");
    printf("      --right-of <output>\n");
    printf("      --above <output>\n");
    printf("      --below <output>\n");
    printf("      --same-as <output>\n");
    printf("      --set <property> <value>\n");
    printf("      --scale <x>x<y>\n");
    printf("      --scale-from <w>x<h>\n");
    printf("      --transform <a>,<b>,<c>,<d>,<e>,<f>,<g>,<h>,<i>\n");
    printf("      --off\n");
    printf("      --crtc <crtc>\n");
    printf("      --panning <w>x<h>[+<x>+<y>[/<track:w>x<h>+<x>+<y>[/<border:l>/<t>/<r>/<b>]]]\n");
    printf("      --gamma <r>:<g>:<b>\n");
    printf("      --primary\n");
    printf("  --noprimary\n");
    printf("  --newmode <name> <clock MHz>\n");
    printf("            <hdisp> <hsync-start> <hsync-end> <htotal>\n");
    printf("            <vdisp> <vsync-start> <vsync-end> <vtotal>\n");
    printf("            [flags...]\n");
    printf("            Valid flags: +HSync -HSync +VSync -VSync\n");
    printf("                         +CSync -CSync CSync Interlace DoubleScan\n");
    printf("  --rmmode <name>\n");
    printf("  --addmode <output> <name>\n");
    printf("  --delmode <output> <name>\n");
    printf("  --listproviders\n");
    printf("  --setprovideroutputsource <prov-xid> <source-xid>\n");
    printf("  --setprovideroffloadsink <prov-xid> <sink-xid>\n");
d232 1
a232 1
static char *
d2513 2
a2514 1
	if (!strcmp ("-display", argv[i]) || !strcmp ("-d", argv[i])) {
d2930 1
a2930 1
	    umode_t  *m = malloc (sizeof (umode_t));
d2972 1
a2972 1
	    umode_t  *m = malloc (sizeof (umode_t));
d2985 1
a2985 1
	    umode_t  *m = malloc (sizeof (umode_t));
d2999 1
a2999 1
	    umode_t  *m = malloc (sizeof (umode_t));
d3566 2
d3578 2
@


1.7
log
@Update to xrandr 1.3.5
@
text
@d5 1
d36 1
d39 2
d56 1
a56 1
static char *direction[5] = {
d63 1
a63 1
static char *reflections[5] = {
d71 1
a71 1
static char *order[6] = {
d80 1
a80 1
    char	    *string;
d95 1
a95 1
static void _X_NORETURN
d98 56
a153 53
    fprintf(stderr, "usage: %s [options]\n", program_name);
    fprintf(stderr, "  where options are:\n");
    fprintf(stderr, "  -display <display> or -d <display>\n");
    fprintf(stderr, "  -help\n");
    fprintf(stderr, "  -o <normal,inverted,left,right,0,1,2,3>\n");
    fprintf(stderr, "            or --orientation <normal,inverted,left,right,0,1,2,3>\n");
    fprintf(stderr, "  -q        or --query\n");
    fprintf(stderr, "  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n");
    fprintf(stderr, "  -r <rate> or --rate <rate> or --refresh <rate>\n");
    fprintf(stderr, "  -v        or --version\n");
    fprintf(stderr, "  -x        (reflect in x)\n");
    fprintf(stderr, "  -y        (reflect in y)\n");
    fprintf(stderr, "  --screen <screen>\n");
    fprintf(stderr, "  --verbose\n");
    fprintf(stderr, "  --current\n");
    fprintf(stderr, "  --dryrun\n");
    fprintf(stderr, "  --nograb\n");
    fprintf(stderr, "  --prop or --properties\n");
    fprintf(stderr, "  --fb <width>x<height>\n");
    fprintf(stderr, "  --fbmm <width>x<height>\n");
    fprintf(stderr, "  --dpi <dpi>/<output>\n");
    fprintf(stderr, "  --output <output>\n");
    fprintf(stderr, "      --auto\n");
    fprintf(stderr, "      --mode <mode>\n");
    fprintf(stderr, "      --preferred\n");
    fprintf(stderr, "      --pos <x>x<y>\n");
    fprintf(stderr, "      --rate <rate> or --refresh <rate>\n");
    fprintf(stderr, "      --reflect normal,x,y,xy\n");
    fprintf(stderr, "      --rotate normal,inverted,left,right\n");
    fprintf(stderr, "      --left-of <output>\n");
    fprintf(stderr, "      --right-of <output>\n");
    fprintf(stderr, "      --above <output>\n");
    fprintf(stderr, "      --below <output>\n");
    fprintf(stderr, "      --same-as <output>\n");
    fprintf(stderr, "      --set <property> <value>\n");
    fprintf(stderr, "      --scale <x>x<y>\n");
    fprintf(stderr, "      --transform <a>,<b>,<c>,<d>,<e>,<f>,<g>,<h>,<i>\n");
    fprintf(stderr, "      --off\n");
    fprintf(stderr, "      --crtc <crtc>\n");
    fprintf(stderr, "      --panning <w>x<h>[+<x>+<y>[/<track:w>x<h>+<x>+<y>[/<border:l>/<t>/<r>/<b>]]]\n");
    fprintf(stderr, "      --gamma <r>:<g>:<b>\n");
    fprintf(stderr, "      --primary\n");
    fprintf(stderr, "  --noprimary\n");
    fprintf(stderr, "  --newmode <name> <clock MHz>\n");
    fprintf(stderr, "            <hdisp> <hsync-start> <hsync-end> <htotal>\n");
    fprintf(stderr, "            <vdisp> <vsync-start> <vsync-end> <vtotal>\n");
    fprintf(stderr, "            [+HSync] [-HSync] [+VSync] [-VSync]\n");
    fprintf(stderr, "  --rmmode <name>\n");
    fprintf(stderr, "  --addmode <output> <name>\n");
    fprintf(stderr, "  --delmode <output> <name>\n");

    exit(1);
    /*NOTREACHED*/
d156 1
a156 1
static void _X_NORETURN
d169 1
a169 1
static void
d180 14
d200 1
a200 1
static char *
d213 1
a213 1
static char *
d230 16
d303 1
d307 1
a307 1
    char	    *filter;
d362 1
d392 6
a397 1
static char *connection[3] = {
d415 2
a416 2
static output_t	*outputs = NULL;
static output_t	**outputs_tail = &outputs;
d418 1
d420 1
a420 1
static int	num_crtcs;
d425 1
a425 1
static char	*dpi_output = NULL;
d430 2
a478 2
	if (v > 32767 || v < -32767)
	    return False;
d483 1
a483 1
    for (j = 0; j < 2; j++)
d485 3
d544 12
d557 1
a557 1
    if (mode_info->hTotal && mode_info->vTotal)
d559 1
a559 1
		((double) mode_info->hTotal * (double) mode_info->vTotal));
d599 1
a599 1
set_name_index (name_t *name, int index)
d602 1
a602 1
    name->index = index;
d628 1
a628 1
    int index;
d632 2
a633 2
    else if ((valid & name_index) && sscanf (string, "%d", &index) == 1)
	set_name_index (name, index);
d637 12
a648 1
	usage ();
d666 1
a666 1
	       char	    *filter,
d671 1
d709 2
a710 2
    *outputs_tail = output;
    outputs_tail = &output->next;
d719 1
a719 1
    for (output = outputs; output; output = output->next)
d1032 1
a1032 1
    XRRCrtcGamma *gamma;
d1046 2
a1047 2
    gamma = XRRGetCrtcGamma(dpy, output->crtc_info->crtc.xid);
    if (!gamma) {
d1066 4
a1069 4
    last_red = find_last_non_clamped(gamma->red, size);
    last_green = find_last_non_clamped(gamma->green, size);
    last_blue = find_last_non_clamped(gamma->blue, size);
    best_array = gamma->red;
d1073 1
a1073 1
	best_array = gamma->green;
d1077 1
a1077 1
	best_array = gamma->blue;
d1097 1
a1097 1
	output->gamma.red = log((double)(gamma->red[last_red / 2]) / output->brightness
d1099 1
a1099 1
	output->gamma.green = log((double)(gamma->green[last_green / 2]) / output->brightness
d1101 1
a1101 1
	output->gamma.blue = log((double)(gamma->blue[last_blue / 2]) / output->brightness
d1105 1
a1105 1
    XRRFreeGamma(gamma);
d1135 1
a1135 1
		fatal ("cannot find crtc 0x%x\n", output->crtc.xid);
d1140 1
a1140 1
	    fatal ("output %s cannot use crtc 0x%x\n", output->output.string,
d1147 7
a1153 1
	if (output->crtc_info)
d1161 1
a1161 1
		fatal ("server did not report mode 0x%x for output %s\n",
d1182 1
a1182 1
		fatal ("cannot find mode 0x%x\n", output->mode.xid);
d1237 24
d1273 4
a1276 1
    
d1315 1
a1315 1
	if (!crtc_info) fatal ("could not get crtc 0x%x information\n", res->crtcs[c]);
d1364 1
a1364 1
    for (output = outputs; output; output = output->next)
d1376 1
a1376 1
    for (output = outputs; output; output = output->next)
d1394 2
a1395 2
    for (output = outputs; output; output = output->next) {
	int i, size;
d1397 4
a1400 1
	XRRCrtcGamma *gamma;
d1419 21
a1439 2
	gamma = XRRAllocGamma(size);
	if (!gamma) {
d1444 10
a1453 2
	if(output->gamma.red == 0.0 && output->gamma.green == 0.0 && output->gamma.blue == 0.0)
	    output->gamma.red = output->gamma.green = output->gamma.blue = 1.0;
d1456 2
a1457 2
	    if (output->gamma.red == 1.0 && output->brightness == 1.0)
		gamma->red[i] = (i << 8) + i;
d1459 4
a1462 3
		gamma->red[i] = dmin(pow((double)i/(double)(size - 1),
					 output->gamma.red) * output->brightness,
				     1.0) * 65535.0;
d1464 2
a1465 2
	    if (output->gamma.green == 1.0 && output->brightness == 1.0)
		gamma->green[i] = (i << 8) + i;
d1467 4
a1470 3
		gamma->green[i] = dmin(pow((double)i/(double)(size - 1),
					   output->gamma.green) * output->brightness,
				       1.0) * 65535.0;
d1472 2
a1473 2
	    if (output->gamma.blue == 1.0 && output->brightness == 1.0)
		gamma->blue[i] = (i << 8) + i;
d1475 4
a1478 3
		gamma->blue[i] = dmin(pow((double)i/(double)(size - 1),
					  output->gamma.blue) * output->brightness,
				      1.0) * 65535.0;
d1481 1
a1481 1
	XRRSetCrtcGamma(dpy, crtc->crtc.xid, gamma);
d1483 1
a1483 1
	free(gamma);
d1495 1
a1495 1
	for (output = outputs; output; output = output->next) {
d1653 1
a1653 1
    char    *message;
d1772 1
a1772 1
	if (!output_info) fatal ("could not get output 0x%x information\n", res->outputs[o]);
d1835 1
a1835 1
    for (q = outputs; q; q = q->next)
d1860 1
a1860 1
	    if (!output) fatal ("cannot find output 0x%x\n",
d1890 1
a1890 1
    for (other = outputs; other; other = other->next)
d1951 1
a1951 1
	if (!crtc) fatal ("cannot find crtc 0x%x\n", output->output_info->crtcs[c]);
d1971 1
a1971 1
	for (output = outputs; output; output = output->next)
d2038 1
a2038 1
    for (output = outputs; output; output = output->next)
d2048 1
a2048 1
	for (output = outputs; output; output = output->next)
d2065 1
a2065 1
    for (output = outputs; output; output = output->next)
d2168 1
a2168 1
	    fatal ("cannot find crtc 0x%x\n", output->output_info->crtcs[c]);
d2209 1
a2209 1
    for (output = outputs; output; output = output->next)
d2234 1
a2234 1
    for (output = outputs; output; output = output->next)
d2236 2
a2237 2
    pick_crtcs_score (outputs);
    for (output = outputs; output; output = output->next)
d2252 1
a2252 1
	usage();
d2262 1
a2262 1
	usage();
d2266 202
d2480 1
a2480 1
    Rotation	rotation, current_rotation, rotations;
d2484 1
a2484 1
    int 		i, j;
d2497 1
a2497 1
    output_t	*output = NULL;
d2503 3
d2512 1
a2512 1
	    if (++i>=argc) usage ();
d2516 1
a2516 1
	if (!strcmp("-help", argv[i])) {
d2518 1
a2518 2
	    action_requested = True;
	    continue;
d2539 1
a2539 1
	    if (++i>=argc) usage ();
d2544 1
a2544 1
                if (size < 0) usage();
d2555 1
a2555 1
	    if (++i>=argc) usage ();
d2558 1
a2558 1
	    if (output)
d2560 2
a2561 2
		output->refresh = rate;
		output->changes |= changes_refresh;
d2587 1
a2587 1
	    if (++i>=argc) usage ();
d2589 1
a2589 1
	    if (screen < 0) usage();
d2598 1
a2598 1
	    if (++i>=argc) usage ();
a2603 1
		if ((dirind < 0) || (dirind > 3))  usage();
d2605 2
d2623 1
a2623 1
	    if (++i >= argc) usage();
d2625 4
a2628 4
	    output = find_output_by_name (argv[i]);
	    if (!output) {
		output = add_output ();
		set_name (&output->output, argv[i], name_string|name_xid);
d2636 4
a2639 4
	    if (++i >= argc) usage();
	    if (!output) usage();
	    set_name (&output->crtc, argv[i], name_xid|name_index);
	    output->changes |= changes_crtc;
d2643 4
a2646 4
	    if (++i >= argc) usage();
	    if (!output) usage();
	    set_name (&output->mode, argv[i], name_string|name_xid);
	    output->changes |= changes_mode;
d2650 3
a2652 3
	    if (!output) usage();
	    set_name_preferred (&output->mode);
	    output->changes |= changes_mode;
d2656 2
a2657 2
	    if (++i>=argc) usage ();
	    if (!output) usage();
d2659 3
a2661 3
			&output->x, &output->y) != 2)
		usage ();
	    output->changes |= changes_position;
d2665 2
a2666 2
	    if (++i>=argc) usage ();
	    if (!output) usage();
d2671 4
a2674 4
		usage ();
	    output->rotation &= ~0xf;
	    output->rotation |= 1 << dirind;
	    output->changes |= changes_rotation;
d2678 2
a2679 2
	    if (++i>=argc) usage ();
	    if (!output) usage();
d2684 4
a2687 4
		usage ();
	    output->rotation &= ~(RR_Reflect_X|RR_Reflect_Y);
	    output->rotation |= dirind * RR_Reflect_X;
	    output->changes |= changes_reflection;
d2691 5
a2695 5
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = relation_left_of;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
d2699 5
a2703 5
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = relation_right_of;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
d2707 5
a2711 5
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = relation_above;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
d2715 5
a2719 5
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = relation_below;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
d2723 5
a2727 5
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = relation_same_as;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
d2732 3
a2734 3
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    pan = &output->panning;
d2755 1
a2755 1
		usage ();
d2757 1
a2757 1
	    output->changes |= changes_panning;
d2761 6
a2766 6
	    if (!output) usage();
	    if (++i>=argc) usage ();
	    if (sscanf(argv[i], "%f:%f:%f", &output->gamma.red, 
		    &output->gamma.green, &output->gamma.blue) != 3)
		usage ();
	    output->changes |= changes_gamma;
d2771 5
a2775 5
	    if (!output) usage();
	    if (++i>=argc) usage();
	    if (sscanf(argv[i], "%f", &output->brightness) != 1)
		usage ();
	    output->changes |= changes_gamma;
d2780 3
a2782 3
	    if (!output) usage();
	    output->changes |= changes_primary;
	    output->primary = True;
d2793 2
a2794 1
	    if (!output) usage();
d2796 4
a2799 6
	    prop->next = output->props;
	    output->props = prop;
	    if (++i>=argc) usage ();
	    prop->name = argv[i];
	    if (++i>=argc) usage ();
	    prop->value = argv[i];
d2801 1
a2801 1
	    output->changes |= changes_property;
d2808 2
a2809 2
	    if (!output) usage();
	    if (++i>=argc) usage();
d2811 5
a2815 5
		usage ();
	    init_transform (&output->transform);
	    output->transform.transform.matrix[0][0] = XDoubleToFixed (sx);
	    output->transform.transform.matrix[1][1] = XDoubleToFixed (sy);
	    output->transform.transform.matrix[2][2] = XDoubleToFixed (1.0);
d2817 1
a2817 1
		output->transform.filter = "bilinear";
d2819 18
a2836 4
		output->transform.filter = "nearest";
	    output->transform.nparams = 0;
	    output->transform.params = NULL;
	    output->changes |= changes_transform;
d2842 3
a2844 3
	    if (!output) usage();
	    if (++i>=argc) usage ();
	    init_transform (&output->transform);
d2852 2
a2853 2
		    usage ();
		init_transform (&output->transform);
d2856 1
a2856 1
			output->transform.transform.matrix[k][l] = XDoubleToFixed (transform[k][l]);
d2858 3
a2860 3
		output->transform.filter = "bilinear";
		output->transform.nparams = 0;
		output->transform.params = NULL;
d2862 1
a2862 1
	    output->changes |= changes_transform;
d2866 4
a2869 4
	    if (!output) usage();
	    set_name_xid (&output->mode, None);
	    set_name_xid (&output->crtc, None);
	    output->changes |= changes_mode;
d2873 1
a2873 1
	    if (++i>=argc) usage ();
d2876 1
a2876 1
		usage ();
d2882 1
a2882 1
	    if (++i>=argc) usage ();
d2885 1
a2885 1
		usage ();
d2892 1
a2892 1
	    if (++i>=argc) usage ();
d2897 1
a2897 1
		dpi_output = argv[i];
d2904 1
a2904 1
	    if (output)
d2906 2
a2907 2
		output->automatic = True;
		output->changes |= changes_automatic;
d2931 2
a2932 1
	    if (i + 9 >= argc) usage ();
d2971 1
a2971 1
	    if (++i>=argc) usage ();
d2984 3
a2986 4
	    if (++i>=argc) usage ();
	    set_name (&m->output, argv[i], name_string|name_xid);
	    if (++i>=argc) usage();
	    set_name (&m->name, argv[i], name_string|name_xid);
d2998 3
a3000 4
	    if (++i>=argc) usage ();
	    set_name (&m->output, argv[i], name_string|name_xid);
	    if (++i>=argc) usage();
	    set_name (&m->name, argv[i], name_string|name_xid);
d3008 32
a3039 1
	usage();
d3078 2
d3132 2
a3133 1
	
d3138 1
a3138 1
	for (output = outputs; output; output = output->next)
d3147 1
a3147 1
		unsigned char	*data;
d3171 11
a3181 2
		
		if ((type == XA_INTEGER || type == AnyPropertyType) &&
d3209 1
d3218 30
d3271 1
a3271 1
	if (dpi_output)
d3273 1
a3273 1
	    output_t	*output = find_output_by_name (dpi_output);
d3276 4
a3279 4
	    if (!output)
		fatal ("Cannot find output %s\n", dpi_output);
	    output_info = output->output_info;
	    mode_info = output->mode_info;
d3354 1
a3354 1
	for (output = outputs; output; output = output->next)
d3357 3
a3359 3
	    crtc_t	    *crtc = output->crtc_info;
	    XRRCrtcInfo	    *crtc_info = crtc ? crtc->crtc_info : NULL;
	    XRRModeInfo	    *mode = output->mode_info;
d3361 1
a3361 1
	    int		    j, k, nprop;
d3366 4
a3369 1
	    if (mode)
d3377 2
a3378 1
			    mode->width, mode->height, output->x, output->y);
d3381 1
a3381 1
		    printf (" (0x%x)", (int)mode->id);
d3413 1
a3413 1
	    if (mode)
d3419 2
a3420 1
	    if (crtc && crtc->panning_info && crtc->panning_info->width > 0)
d3422 1
a3422 1
		XRRPanning *pan = crtc->panning_info;
d3509 4
a3512 1
    
d3522 5
a3526 13
		    if (actual_type == XA_INTEGER && actual_format == 8) {
			int k;
    
			printf("\t%s:\n", XGetAtomName (dpy, props[j]));
			for (k = 0; k < nitems; k++) {
			    if (k % 16 == 0)
				printf ("\t\t");
			    printf("%02x", (unsigned char)prop[k]);
			    if (k % 16 == 15)
				printf("\n");
			}
		    } else if (actual_type == XA_INTEGER &&
			       actual_format == 32)
d3528 2
a3529 7
			printf("\t%s: ", XGetAtomName (dpy, props[j]));
			for (k = 0; k < nitems; k++) {
			    if (k > 0)
				printf ("\n\t\t\t");
			    printf("%d (0x%08x)",
				   (int)((INT32 *)prop)[k], (int)((INT32 *)prop)[k]);
			}
d3531 6
a3536 2
 			if (propinfo->range && propinfo->num_values > 0) {
			    if (nitems > 1)
d3538 8
a3545 6
			    printf("\trange%s: ",
				   (propinfo->num_values == 2) ? "" : "s");

			    for (k = 0; k < propinfo->num_values / 2; k++)
				printf(" (%d,%d)", (int)propinfo->values[k * 2],
				       (int)propinfo->values[k * 2 + 1]);
d3547 2
d3550 1
a3550 3
			printf("\n");
		    } else if (actual_type == XA_ATOM &&
			       actual_format == 32)
d3552 11
a3562 5
			printf("\t%s:", XGetAtomName (dpy, props[j]));
			for (k = 0; k < nitems; k++) {
			    if (k > 0 && (k & 1) == 0)
				printf ("\n\t\t");
			    printf("\t%s", XGetAtomName (dpy, ((Atom *)prop)[k]));
d3564 9
a3572 11

 			if (!propinfo->range && propinfo->num_values > 0) {
			    printf("\n\t\tsupported:");

			    for (k = 0; k < propinfo->num_values; k++)
			    {
				printf(" %-12.12s", XGetAtomName (dpy,
							    propinfo->values[k]));
				if (k % 4 == 3 && k < propinfo->num_values - 1)
				    printf ("\n\t\t          ");
			    }
d3574 1
a3574 9
			printf("\n");
		    } else if (actual_format == 8) {
			printf ("\t%s: %s%s\n", XGetAtomName (dpy, props[j]),
				prop, bytes_after ? "..." : "");
		    } else {
			char	*type = actual_type ? XGetAtomName (dpy, actual_type) : "none";
			printf ("\t%s: %s(%d) (format %d items %d) ????\n",
				XGetAtomName (dpy, props[j]),
				type, (int)actual_type, actual_format, (int)nitems);
d3580 1
a3580 1
	    
d3615 1
d3663 30
a3692 1
    
d3761 2
d3777 2
a3778 1
    rotations = XRRConfigRotations(sc, &current_rotation);
d3780 12
a3791 13
    rotation = 1 << rot ;
    if (query) {
    	printf("Current rotation - %s\n",
	       rotation_name (current_rotation));

	printf("Current reflection - %s\n",
	       reflection_name (current_rotation));

	printf ("Rotations possible - ");
	for (i = 0; i < 4; i ++) {
	    if ((rotations >> i) & 1)  printf("%s ", direction[i]);
	}
	printf ("\n");
d3793 9
a3801 5
	printf ("Reflections possible - ");
	if (rotations & (RR_Reflect_X|RR_Reflect_Y))
	{
	    if (rotations & RR_Reflect_X) printf ("X Axis ");
	    if (rotations & RR_Reflect_Y) printf ("Y Axis");
a3802 3
	else
	    printf ("none");
	printf ("\n");
d3828 6
a3833 3
    if (setit && !dryrun) status = XRRSetScreenConfigAndRate (dpy, sc,
						   root,
						   (SizeID) size, (Rotation) (rotation | reflection), rate, CurrentTime);
@


1.6
log
@Update to xrandr 1.3.4
@
text
@d91 1
a91 1
static void
d108 1
d149 1
a149 1
static void
a742 1
	    break;
d1511 1
a1511 1
static void
d2757 1
a2757 1
		int		format;
a2768 1
		format=0;
a2797 1
		    format = 32;
a2964 1
			first = False;
d2974 1
a2974 1
		    if (!first) printf (" "); first = False;
@


1.5
log
@Update to xrandr 1.3.3
@
text
@d2682 2
a2683 1
    if (!XRRQueryVersion (dpy, &major, &minor))
a3374 2

    XRRQueryExtension(dpy, &event_base, &error_base);
@


1.4
log
@update to xrandr 1.3.2
@
text
@a41 4
#if RANDR_MAJOR > 1 || (RANDR_MAJOR == 1 && RANDR_MINOR >= 2)
#define HAS_RANDR_1_2 1
#endif

a109 1
#if HAS_RANDR_1_2
a113 4
#if 0
    fprintf(stderr, "  --clone\n");
    fprintf(stderr, "  --extend\n");
#endif
a142 1
#endif
d172 6
a207 5
#if HAS_RANDR_1_2
typedef enum _policy {
    clone, extend
} policy_t;

d209 5
a213 1
    left_of, right_of, above, below, same_as,
d331 2
d635 1
d946 90
d1148 4
a1193 1
#if RANDR_MAJOR > 1 || RANDR_MINOR >= 3
a1194 1
#endif
a1219 1
#if RANDR_MAJOR > 1 || RANDR_MINOR >= 3
a1228 1
#endif
d1317 3
d1321 2
a1322 2
	    if (output->gamma.red == 1.0)
		gamma->red[i] = i << 8;
d1324 3
a1326 2
		gamma->red[i] = (CARD16)(pow((double)i/(double)(size - 1),
			    (double)output->gamma.red) * (double)(size - 1) * 256);
d1328 2
a1329 2
	    if (output->gamma.green == 1.0)
		gamma->green[i] = i << 8;
d1331 3
a1333 2
		gamma->green[i] = (CARD16)(pow((double)i/(double)(size - 1),
			    (double)output->gamma.green) * (double)(size - 1) * 256);
d1335 2
a1336 2
	    if (output->gamma.blue == 1.0)
		gamma->blue[i] = i << 8;
d1338 3
a1340 2
		gamma->blue[i] = (CARD16)(pow((double)i/(double)(size - 1),
			    (double)output->gamma.blue) * (double)(size - 1) * 256);
d1866 1
a1866 1
	    case left_of:
d1870 1
a1870 1
	    case right_of:
d1874 1
a1874 1
	    case above:
d1878 1
a1878 1
	    case below:
d1882 1
a1882 1
	    case same_as:
a1982 1
#endif
d2118 1
a2118 1
static int
d2138 2
a2139 1
    int		query = 0;
a2156 1
#if HAS_RANDR_1_2
a2157 1
    policy_t	policy = clone;
a2164 1
#endif
a2166 1
    if (argc == 1) query = True;
d2175 1
a2192 2
	    /* if --current was the only arg, then query */
	    if (argc == 2) query = True;
d2205 1
a2215 1
#if HAS_RANDR_1_2
d2222 1
a2222 1
#endif
d2228 1
d2235 1
d2241 1
d2266 1
a2268 1
#if HAS_RANDR_1_2
d2276 1
d2289 1
d2350 1
a2350 1
	    output->relation = left_of;
d2358 1
a2358 1
	    output->relation = right_of;
d2366 1
a2366 1
	    output->relation = above;
d2374 1
a2374 1
	    output->relation = below;
d2382 1
a2382 1
	    output->relation = same_as;
d2427 9
d2466 1
d2486 1
d2522 1
d2531 1
d2544 1
a2544 10
	    continue;
	}
	if (!strcmp ("--clone", argv[i])) {
	    policy = clone;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--extend", argv[i])) {
	    policy = extend;
	    setit_1_2 = True;
d2556 1
d2607 1
d2620 1
d2635 1
d2650 1
a2652 1
#endif
d2655 2
a2681 1
#if HAS_RANDR_1_2
d3016 5
a3237 1
#endif
@


1.3
log
@update to xrandr 1.3.0
@
text
@d40 2
d314 1
a314 1
    float	    refresh;
d337 2
d381 1
a381 1
static float	dpi = 0;
d494 1
a494 1
static float
d497 1
a497 1
    float rate;
d500 2
a501 2
	rate = ((float) mode_info->dotClock / 
		((float) mode_info->hTotal * (float) mode_info->vTotal));
d508 1
a508 1
static float
d511 1
a511 1
    float rate;
d514 1
a514 1
	rate = (float) mode_info->dotClock / (float) mode_info->hTotal;
d637 1
d717 1
a717 1
find_mode (name_t *name, float refresh)
d721 1
a721 1
    float	bestDist = 0;
d733 1
a733 1
	    float   dist;
d778 1
a778 1
    float	    bestDist = 0;
d793 1
a793 1
	    float   dist;
d1444 9
a1498 9
     * Hold the server grabbed while messing with
     * the screen so that apps which notice the resize
     * event and ask for xinerama information from the server
     * receive up-to-date information
     */
    if (grab_server)
	XGrabServer (dpy);
    
    /*
d1533 1
d1572 1
d1603 8
d1646 1
a1646 1
Bool
d2015 20
d2053 1
a2053 1
    float    	rate = -1;
d2109 1
a2109 1
	    if (sscanf (argv[i], "%dx%d", &width, &height) == 2)
d2111 4
a2114 4
	    else {
		size = atoi (argv[i]);
		if (size < 0) usage();
	    }
d2124 1
a2124 2
	    if (sscanf (argv[i], "%f", &rate) != 1)
		usage ();
d2154 1
a2154 1
	    screen = atoi (argv[i]);
d2165 2
a2166 2
	    dirind = strtol(argv[i], &endptr, 0);
	    if (*endptr != '\0') {
d2428 1
d2430 2
a2431 1
	    if (sscanf (argv[i], "%f", &dpi) != 1)
d2473 1
a2473 1
	    float   clock;
d2480 1
a2480 2
	    if (sscanf (argv[i++], "%f", &clock) != 1)
		usage ();
d2483 8
a2490 8
	    if (sscanf (argv[i++], "%d", &m->mode.width) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.hSyncStart) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.hSyncEnd) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.hTotal) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.height) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.vSyncStart) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.vSyncEnd) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.vTotal) != 1) usage();
d2559 2
d3058 1
a3058 1
			    (float)mode->dotClock / 1000000.0);
d3119 1
a3119 1
			(float)mode->dotClock / 1000000.0);
@


1.2
log
@Update to xrandr 1.2.3.
@
text
@d51 2
d111 1
d135 2
d139 4
d169 11
d219 12
d242 4
d265 1
d269 7
d282 1
d288 1
d322 3
a324 1
    
d326 9
d382 1
d414 75
d564 2
a565 1
    XID	xid;
d578 47
d631 1
a631 1
	fatal ("out of memory");
d755 1
d764 1
d778 1
a778 1
	
d789 5
a793 1
	    
d808 1
a808 1
XRRModeInfo *
d876 13
d935 8
d948 2
a949 2
	fatal ("Output %s is not disconnected but has no modes\n",
	       output_info->name);
d1054 13
d1070 1
a1070 1
get_screen (void)
d1078 4
a1081 1
    res = XRRGetScreenResources (dpy, root);
d1092 1
a1092 1
    if (!crtcs) fatal ("out of memory");
d1097 16
d1115 1
a1115 1
	if (!crtc_info) fatal ("could not get crtc 0x%x information", res->crtcs[c]);
d1117 1
d1125 16
a1140 1
    }
d1155 3
a1157 2
    }
    if (!crtc->outputs) fatal ("out of memory");
d1173 94
d1279 14
d1303 3
d1341 3
d1347 7
d1432 1
a1432 1
void
d1459 1
d1465 9
a1473 5
	    x = crtc_info->x;
	    y = crtc_info->y;
	    w = mode_width (old_mode, crtc_info->rotation);
	    h = mode_height (old_mode, crtc_info->rotation);
	    
d1490 2
a1491 1
    XGrabServer (dpy);
d1510 3
d1517 2
a1518 1
    XUngrabServer (dpy);
d1524 1
a1524 1
void
d1534 1
a1534 1
	if (!output_info) fatal ("could not get output 0x%x information", res->outputs[o]);
d1598 1
a1598 1
void
d1674 2
d1694 1
a1694 1
crtc_t *
d1822 1
d1826 7
a1832 4
	x = output->x;
	y = output->y;
	w = mode_width (mode_info, output->rotation);
	h = mode_height (mode_info, output->rotation);
d1837 2
a1838 2
		fatal ("specified screen %dx%d not large enough for output %s (%dx%d+%d+%d)\n",
		       fb_width, fb_height, output->output.string, w, h, x, y);
d1843 13
a1855 2
	    if (x + w > fb_width) fb_width = x + w;
	    if (y + h > fb_height) fb_height = y + h;
d1875 2
a1876 2
    
void
d1889 1
a1889 1
int
d1955 1
a1955 1
void
d2037 1
d2061 10
d2143 4
a2146 1
	if (!strcmp ("--prop", argv[i]) || !strcmp ("--properties", argv[i]))
d2259 52
d2326 44
d2549 2
d2556 1
a2556 1
        get_screen ();
d2604 1
a2604 1
        get_screen ();
d2667 2
d2682 1
a2682 1
	get_screen ();
d2753 10
d2777 1
a2777 1
	get_screen ();
d2789 2
d2800 8
a2807 4
		printf (" %dx%d+%d+%d",
			mode_width (mode, output->rotation),
			mode_height (mode, output->rotation),
			output->x, output->y);
d2809 1
a2809 1
		    printf (" (0x%x)", mode->id);
d2845 23
a2867 1
			output_info->mm_width, output_info->mm_height);
d2873 2
a2874 2
		printf ("\tIdentifier: 0x%x\n", output->output.xid);
		printf ("\tTimestamp:  %d\n", output_info->timestamp);
d2894 27
d2956 7
a2962 3
			printf("\t%s: %d (0x%08x)",
			       XGetAtomName (dpy, props[j]),
			       *(INT32 *)prop, *(INT32 *)prop);
d2965 3
a2967 1
			    printf(" range%s: ",
d2971 2
a2972 2
				printf(" (%d,%d)", propinfo->values[k * 2],
				       propinfo->values[k * 2 + 1]);
d2979 6
a2984 3
			printf("\t%s: %s",
			       XGetAtomName (dpy, props[j]),
			       XGetAtomName (dpy, *(Atom *)prop));
a2997 1
			
d2999 1
a2999 1
			printf ("\t\t%s: %s%s\n", XGetAtomName (dpy, props[j]),
d3002 4
a3005 1
			printf ("\t\t%s: ????\n", XGetAtomName (dpy, props[j]));
d3020 1
a3020 1
			    mode->name, mode->id,
d3081 1
a3081 1
			mode->name, mode->id,
d3228 1
a3228 1
						   DefaultRootWindow (dpy), 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
/* $XdotOrg: app/xrandr/xrandr.c,v 1.6 2006/04/25 22:54:01 alanc Exp $
 * $XFree86: xc/programs/xrandr/xrandr.c,v 1.11 2002/10/14 18:01:43 keithp Exp $
 *
d4 1
d8 7
a14 7
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard or HP not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard and HP makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
d16 1
a16 1
 * KEITH PACKARD and HP DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
d18 1
a18 1
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
d21 2
a22 2
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d24 1
a24 1
 * Blame Jim Gettys for any bugs; he wrote most of the client side code,
d32 1
d37 2
d40 11
a50 1
static char *program_name;
d53 12
a64 5
  "normal", 
  "left", 
  "inverted", 
  "right",
  "\n"};
d68 22
a89 7
  "unknown",
  "horizontal rgb",
  "horizontal bgr",
  "vertical rgb",
  "vertical bgr",
  "no subpixels"};

d94 51
a144 17
  fprintf(stderr, "usage: %s [options]\n", program_name);
  fprintf(stderr, "  where options are:\n");
  fprintf(stderr, "  -display <display> or -d <display>\n");
  fprintf(stderr, "  -help\n");
  fprintf(stderr, "  -o <normal,inverted,left,right,0,1,2,3>\n");
  fprintf(stderr, "            or --orientation <normal,inverted,left,right,0,1,2,3>\n");
  fprintf(stderr, "  -q        or --query\n");
  fprintf(stderr, "  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n");
  fprintf(stderr, "  -r <rate> or --rate <rate>\n");
  fprintf(stderr, "  -v        or --version\n");
  fprintf(stderr, "  -x        (reflect in x)\n");
  fprintf(stderr, "  -y        (reflect in y)\n");
  fprintf(stderr, "  --screen <screen>\n");
  fprintf(stderr, "  --verbose\n");
  
  exit(1);
  /*NOTREACHED*/
d147 2
a148 2
int
main (int argc, char **argv)
d150 6
a155 120
  Display       *dpy;
  XRRScreenSize *sizes;
  XRRScreenConfiguration *sc;
  int		nsize;
  int		nrate;
  short		*rates;
  Window	root;
  Status	status = RRSetConfigFailed;
  int		rot = -1;
  int		verbose = 0, query = 0;
  Rotation	rotation, current_rotation, rotations;
  XEvent	event;
  XRRScreenChangeNotifyEvent *sce;    
  char          *display_name = NULL;
  int 		i, j;
  SizeID	current_size;
  short		current_rate;
  int		rate = -1;
  int		size = -1;
  int		dirind = 0;
  int		setit = 0;
  int		screen = -1;
  int		version = 0;
  int		event_base, error_base;
  int		reflection = 0;
  int		width = 0, height = 0;
  int		have_pixel_size = 0;
  int		ret = 0;

  program_name = argv[0];
  if (argc == 1) query = 1;
  for (i = 1; i < argc; i++) {
    if (!strcmp ("-display", argv[i]) || !strcmp ("-d", argv[i])) {
      if (++i>=argc) usage ();
      display_name = argv[i];
      continue;
    }
    if (!strcmp("-help", argv[i])) {
      usage();
      continue;
    }
    if (!strcmp ("--verbose", argv[i])) {
      verbose = 1;
      continue;
    }

    if (!strcmp ("-s", argv[i]) || !strcmp ("--size", argv[i])) {
      if (++i>=argc) usage ();
      if (sscanf (argv[i], "%dx%d", &width, &height) == 2)
	have_pixel_size = 1;
      else {
	size = atoi (argv[i]);
	if (size < 0) usage();
      }
      setit = 1;
      continue;
    }

    if (!strcmp ("-r", argv[i]) || !strcmp ("--rate", argv[i])) {
      if (++i>=argc) usage ();
      rate = atoi (argv[i]);
      if (rate < 0) usage();
      setit = 1;
      continue;
    }

    if (!strcmp ("-v", argv[i]) || !strcmp ("--version", argv[i])) {
      version = 1;
      continue;
    }

    if (!strcmp ("-x", argv[i])) {
      reflection |= RR_Reflect_X;
      setit = 1;
      continue;
    }
    if (!strcmp ("-y", argv[i])) {
      reflection |= RR_Reflect_Y;
      setit = 1;
      continue;
    }
    if (!strcmp ("--screen", argv[i])) {
      if (++i>=argc) usage ();
      screen = atoi (argv[i]);
      if (screen < 0) usage();
      continue;
    }
    if (!strcmp ("-q", argv[i]) || !strcmp ("--query", argv[i])) {
      query = 1;
      continue;
    }
    if (!strcmp ("-o", argv[i]) || !strcmp ("--orientation", argv[i])) {
      char *endptr;
      if (++i>=argc) usage ();
      dirind = strtol(argv[i], &endptr, 0);
      if (*endptr != '\0') {
	for (dirind = 0; dirind < 4; dirind++) {
	  if (strcmp (direction[dirind], argv[i]) == 0) break;
	}
	if ((dirind < 0) || (dirind > 3))  usage();
      }
      rot = dirind;
      setit = 1;
      continue;
    }
    usage();
  }
  if (verbose) query = 1;

  dpy = XOpenDisplay (display_name);

  if (dpy == NULL) {
      fprintf (stderr, "Can't open display %s\n", XDisplayName(display_name));
      exit (1);
  }
  if (screen < 0)
    screen = DefaultScreen (dpy);
  if (screen >= ScreenCount (dpy)) {
    fprintf (stderr, "Invalid screen number %d (display has %d)\n",
	     screen, ScreenCount (dpy));
d157 32
a188 1
  }
d190 60
a249 1
  root = RootWindow (dpy, screen);
d251 32
a282 1
  sc = XRRGetScreenInfo (dpy, root);
a283 4
  if (sc == NULL) 
      exit (1);
  
  current_size = XRRConfigCurrentConfiguration (sc, &current_rotation);
d285 55
a339 1
  sizes = XRRConfigSizes(sc, &nsize);
d341 122
a462 2
  if (have_pixel_size) {
    for (size = 0; size < nsize; size++)
d464 8
a471 2
      if (sizes[size].width == width && sizes[size].height == height)
	break;
d473 43
a515 4
    if (size >= nsize) {
      fprintf (stderr,
	       "Size %dx%d not found in available modes\n", width, height);
      exit (1);
d517 19
a535 3
  }
  else if (size < 0)
    size = current_size;
d537 21
a557 4
  if (rot < 0)
  {
    for (rot = 0; rot < 4; rot++)
	if (1 << rot == (current_rotation & 0xf))
d559 4
a562 1
  }
d564 4
a567 1
  current_rate = XRRConfigCurrentRate (sc);
d569 187
a755 4
  if (rate < 0)
  {
    if (size == current_size)
	rate = current_rate;
d757 12
a768 45
	rate = 0;
  }
  else
  {
    rates = XRRConfigRates (sc, size, &nrate);
    for (i = 0; i < nrate; i++)
      if (rate == rates[i])
	break;
    if (i == nrate) {
      fprintf (stderr, "Rate %d not available for this size\n", rate);
      exit (1);
    }
  }

  if (version) {
    int major_version, minor_version;
    XRRQueryVersion (dpy, &major_version, &minor_version);
    printf("Server reports RandR version %d.%d\n", 
	   major_version, minor_version);
  }

  if (query) {
    printf(" SZ:    Pixels          Physical       Refresh\n");
    for (i = 0; i < nsize; i++) {
      printf ("%c%-2d %5d x %-5d  (%4dmm x%4dmm )",
	   i == current_size ? '*' : ' ',
	   i, sizes[i].width, sizes[i].height,
	   sizes[i].mwidth, sizes[i].mheight);
      rates = XRRConfigRates (sc, i, &nrate);
      if (nrate) printf ("  ");
      for (j = 0; j < nrate; j++)
	printf ("%c%-4d",
		i == current_size && rates[j] == current_rate ? '*' : ' ',
		rates[j]);
      printf ("\n");
    }
  }

  rotations = XRRConfigRotations(sc, &current_rotation);

  rotation = 1 << rot ;
  if (query) {
    for (i = 0; i < 4; i ++) {
      if ((current_rotation >> i) & 1) 
	printf("Current rotation - %s\n", direction[i]);
d771 2
a772 2
    printf("Current reflection - ");
    if (current_rotation & (RR_Reflect_X|RR_Reflect_Y))
d774 13
a786 2
	if (current_rotation & RR_Reflect_X) printf ("X Axis ");
	if (current_rotation & RR_Reflect_Y) printf ("Y Axis");
d788 2
d791 56
a846 2
	printf ("none");
    printf ("\n");
d848 17
d866 18
a883 3
    printf ("Rotations possible - ");
    for (i = 0; i < 4; i ++) {
      if ((rotations >> i) & 1)  printf("%s ", direction[i]);
d885 1
a885 1
    printf ("\n");
d887 6
a892 2
    printf ("Reflections possible - ");
    if (rotations & (RR_Reflect_X|RR_Reflect_Y))
d894 74
a967 2
        if (rotations & RR_Reflect_X) printf ("X Axis ");
	if (rotations & RR_Reflect_Y) printf ("Y Axis");
d969 3
d973 12
a984 3
	printf ("none");
    printf ("\n");
  }
d986 8
a993 2
  if (verbose) { 
    printf("Setting size to %d, rotation to %s\n",  size, direction[rot]);
d995 7
a1001 2
    printf ("Setting reflection on ");
    if (reflection)
d1003 1542
a2544 2
	if (reflection & RR_Reflect_X) printf ("X Axis ");
	if (reflection & RR_Reflect_Y) printf ("Y Axis");
d2547 17
a2563 2
	printf ("neither axis");
    printf ("\n");
d2565 16
a2580 1
    if (reflection & RR_Reflect_X) printf("Setting reflection on X axis\n");
d2582 1
a2582 2
    if (reflection & RR_Reflect_Y) printf("Setting reflection on Y axis\n");
  }
d2584 105
a2688 60
  /* we should test configureNotify on the root window */
  XSelectInput (dpy, root, StructureNotifyMask);

  if (setit) XRRSelectInput (dpy, root,
			RRScreenChangeNotifyMask);
  if (setit) status = XRRSetScreenConfigAndRate (dpy, sc,
						 DefaultRootWindow (dpy), 
	       (SizeID) size, (Rotation) (rotation | reflection), rate, CurrentTime);
  
  XRRQueryExtension(dpy, &event_base, &error_base);

  if (setit && status == RRSetConfigFailed) {
     printf ("Failed to change the screen configuration!\n");
     ret = 1;
  }

  if (verbose && setit) {
    if (status == RRSetConfigSuccess)
      {
	while (1) {
	int spo;
	XNextEvent(dpy, (XEvent *) &event);
	
	printf ("Event received, type = %d\n", event.type);
	/* update Xlib's knowledge of the event */
	XRRUpdateConfiguration (&event);
	if (event.type == ConfigureNotify)
	  printf("Received ConfigureNotify Event!\n");

	switch (event.type - event_base) {
	case RRScreenChangeNotify:
	  sce = (XRRScreenChangeNotifyEvent *) &event;

	  printf("Got a screen change notify event!\n");
	  printf(" window = %d\n root = %d\n size_index = %d\n rotation %d\n", 
	       (int) sce->window, (int) sce->root, 
	       sce->size_index,  sce->rotation);
	  printf(" timestamp = %ld, config_timestamp = %ld\n",
	       sce->timestamp, sce->config_timestamp);
	  printf(" Rotation = %x\n", sce->rotation);
	  printf(" %d X %d pixels, %d X %d mm\n",
		 sce->width, sce->height, sce->mwidth, sce->mheight);
	  printf("Display width   %d, height   %d\n",
		 DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
	  printf("Display widthmm %d, heightmm %d\n", 
		 DisplayWidthMM(dpy, screen), DisplayHeightMM(dpy, screen));
	  spo = sce->subpixel_order;
	  if ((spo < 0) || (spo > 5))
	    printf ("Unknown subpixel order, value = %d\n", spo);
	  else printf ("new Subpixel rendering model is %s\n", order[spo]);
	  break;
	default:
	  if (event.type != ConfigureNotify) 
	    printf("unknown event received, type = %d!\n", event.type);
	}
	}
      }
  }
  XRRFreeScreenConfigInfo(sc);
  return(ret);
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xrandr 1.2.2
@
text
@d1 3
a3 1
/* 
a5 1
 * Copyright © 2006 Intel Corporation
d9 7
a15 7
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the name of the copyright holders not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no representations
 * about the suitability of this software for any purpose.  It is provided "as
 * is" without express or implied warranty.
d17 1
a17 1
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
d19 1
a19 1
 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
d22 2
a23 2
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
d25 1
a25 1
 * Thanks to Jim Gettys who wrote most of the client side code,
a32 1
#include <X11/Xatom.h>
a36 2
#include <stdarg.h>
#include <math.h>
d38 1
a38 11
#if RANDR_MAJOR > 1 || (RANDR_MAJOR == 1 && RANDR_MINOR >= 2)
#define HAS_RANDR_1_2 1
#endif

static char	*program_name;
static Display	*dpy;
static Window	root;
static int	screen = -1;
static Bool	verbose = False;
static Bool	automatic = False;
static Bool	properties = False;
d41 5
a45 12
    "normal", 
    "left", 
    "inverted", 
    "right",
    "\n"};

static char *reflections[5] = {
    "normal", 
    "x", 
    "y", 
    "xy",
    "\n"};
d49 7
a55 22
    "unknown",
    "horizontal rgb",
    "horizontal bgr",
    "vertical rgb",
    "vertical bgr",
    "no subpixels"};

static const struct {
    char	    *string;
    unsigned long   flag;
} mode_flags[] = {
    { "+HSync", RR_HSyncPositive },
    { "-HSync", RR_HSyncNegative },
    { "+VSync", RR_VSyncPositive },
    { "-VSync", RR_VSyncNegative },
    { "Interlace", RR_Interlace },
    { "DoubleScan", RR_DoubleScan },
    { "CSync",	    RR_CSync },
    { "+CSync",	    RR_CSyncPositive },
    { "-CSync",	    RR_CSyncNegative },
    { NULL,	    0 }
};
d60 17
a76 51
    fprintf(stderr, "usage: %s [options]\n", program_name);
    fprintf(stderr, "  where options are:\n");
    fprintf(stderr, "  -display <display> or -d <display>\n");
    fprintf(stderr, "  -help\n");
    fprintf(stderr, "  -o <normal,inverted,left,right,0,1,2,3>\n");
    fprintf(stderr, "            or --orientation <normal,inverted,left,right,0,1,2,3>\n");
    fprintf(stderr, "  -q        or --query\n");
    fprintf(stderr, "  -s <size>/<width>x<height> or --size <size>/<width>x<height>\n");
    fprintf(stderr, "  -r <rate> or --rate <rate> or --refresh <rate>\n");
    fprintf(stderr, "  -v        or --version\n");
    fprintf(stderr, "  -x        (reflect in x)\n");
    fprintf(stderr, "  -y        (reflect in y)\n");
    fprintf(stderr, "  --screen <screen>\n");
    fprintf(stderr, "  --verbose\n");
    fprintf(stderr, "  --dryrun\n");
#if HAS_RANDR_1_2
    fprintf(stderr, "  --prop or --properties\n");
    fprintf(stderr, "  --fb <width>x<height>\n");
    fprintf(stderr, "  --fbmm <width>x<height>\n");
    fprintf(stderr, "  --dpi <dpi>/<output>\n");
#if 0
    fprintf(stderr, "  --clone\n");
    fprintf(stderr, "  --extend\n");
#endif
    fprintf(stderr, "  --output <output>\n");
    fprintf(stderr, "      --auto\n");
    fprintf(stderr, "      --mode <mode>\n");
    fprintf(stderr, "      --preferred\n");
    fprintf(stderr, "      --pos <x>x<y>\n");
    fprintf(stderr, "      --rate <rate> or --refresh <rate>\n");
    fprintf(stderr, "      --reflect normal,x,y,xy\n");
    fprintf(stderr, "      --rotate normal,inverted,left,right\n");
    fprintf(stderr, "      --left-of <output>\n");
    fprintf(stderr, "      --right-of <output>\n");
    fprintf(stderr, "      --above <output>\n");
    fprintf(stderr, "      --below <output>\n");
    fprintf(stderr, "      --same-as <output>\n");
    fprintf(stderr, "      --set <property> <value>\n");
    fprintf(stderr, "      --off\n");
    fprintf(stderr, "      --crtc <crtc>\n");
    fprintf(stderr, "  --newmode <name> <clock MHz>\n");
    fprintf(stderr, "            <hdisp> <hsync-start> <hsync-end> <htotal>\n");
    fprintf(stderr, "            <vdisp> <vsync-start> <vsync-end> <vtotal>\n");
    fprintf(stderr, "            [+HSync] [-HSync] [+VSync] [-VSync]\n");
    fprintf(stderr, "  --rmmode <name>\n");
    fprintf(stderr, "  --addmode <output> <name>\n");
    fprintf(stderr, "  --delmode <output> <name>\n");
#endif

    exit(1);
    /*NOTREACHED*/
d79 2
a80 2
static void
fatal (const char *format, ...)
d82 120
a201 6
    va_list ap;
    
    va_start (ap, format);
    fprintf (stderr, "%s: ", program_name);
    vfprintf (stderr, format, ap);
    va_end (ap);
d203 1
a203 258
    /*NOTREACHED*/
}

static char *
rotation_name (Rotation rotation)
{
    int	i;

    if ((rotation & 0xf) == 0)
	return "normal";
    for (i = 0; i < 4; i++)
	if (rotation & (1 << i))
	    return direction[i];
    return "invalid rotation";
}

static char *
reflection_name (Rotation rotation)
{
    rotation &= (RR_Reflect_X|RR_Reflect_Y);
    switch (rotation) {
    case 0:
	return "none";
    case RR_Reflect_X:
	return "X axis";
    case RR_Reflect_Y:
	return "Y axis";
    case RR_Reflect_X|RR_Reflect_Y:
	return "X and Y axis";
    }
    return "invalid reflection";
}

#if HAS_RANDR_1_2
typedef enum _policy {
    clone, extend
} policy_t;

typedef enum _relation {
    left_of, right_of, above, below, same_as,
} relation_t;

typedef enum _changes {
    changes_none = 0,
    changes_crtc = (1 << 0),
    changes_mode = (1 << 1),
    changes_relation = (1 << 2),
    changes_position = (1 << 3),
    changes_rotation = (1 << 4),
    changes_reflection = (1 << 5),
    changes_automatic = (1 << 6),
    changes_refresh = (1 << 7),
    changes_property = (1 << 8),
} changes_t;

typedef enum _name_kind {
    name_none = 0,
    name_string = (1 << 0),
    name_xid = (1 << 1),
    name_index = (1 << 2),
    name_preferred = (1 << 3),
} name_kind_t;

typedef struct {
    name_kind_t	    kind;
    char    	    *string;
    XID	    	    xid;
    int		    index;
} name_t;

typedef struct _crtc crtc_t;
typedef struct _output	output_t;
typedef struct _umode	umode_t;
typedef struct _output_prop output_prop_t;

struct _crtc {
    name_t	    crtc;
    Bool	    changing;
    XRRCrtcInfo	    *crtc_info;

    XRRModeInfo	    *mode_info;
    int		    x;
    int		    y;
    Rotation	    rotation;
    output_t	    **outputs;
    int		    noutput;
};

struct _output_prop {
    struct _output_prop	*next;
    char		*name;
    char		*value;
};

struct _output {
    struct _output   *next;
    
    changes_t	    changes;
    
    output_prop_t   *props;

    name_t	    output;
    XRROutputInfo   *output_info;
    
    name_t	    crtc;
    crtc_t	    *crtc_info;
    crtc_t	    *current_crtc_info;
    
    name_t	    mode;
    float	    refresh;
    XRRModeInfo	    *mode_info;
    
    name_t	    addmode;

    relation_t	    relation;
    char	    *relative_to;

    int		    x, y;
    Rotation	    rotation;
    
    Bool    	    automatic;
};

typedef enum _umode_action {
    umode_create, umode_destroy, umode_add, umode_delete
} umode_action_t;


struct _umode {
    struct _umode   *next;
    
    umode_action_t  action;
    XRRModeInfo	    mode;
    name_t	    output;
    name_t	    name;
};

static char *connection[3] = {
    "connected",
    "disconnected",
    "unknown connection"};

#define OUTPUT_NAME 1

#define CRTC_OFF    2
#define CRTC_UNSET  3
#define CRTC_INDEX  0x40000000

#define MODE_NAME   1
#define MODE_OFF    2
#define MODE_UNSET  3
#define MODE_PREF   4

#define POS_UNSET   -1

static output_t	*outputs = NULL;
static output_t	**outputs_tail = &outputs;
static crtc_t	*crtcs;
static umode_t	*umodes;
static int	num_crtcs;
static XRRScreenResources  *res;
static int	fb_width = 0, fb_height = 0;
static int	fb_width_mm = 0, fb_height_mm = 0;
static float	dpi = 0;
static char	*dpi_output = NULL;
static Bool	dryrun = False;
static int	minWidth, maxWidth, minHeight, maxHeight;
static Bool    	has_1_2 = False;

static int
mode_height (XRRModeInfo *mode_info, Rotation rotation)
{
    switch (rotation & 0xf) {
    case RR_Rotate_0:
    case RR_Rotate_180:
	return mode_info->height;
    case RR_Rotate_90:
    case RR_Rotate_270:
	return mode_info->width;
    default:
	return 0;
    }
}

static int
mode_width (XRRModeInfo *mode_info, Rotation rotation)
{
    switch (rotation & 0xf) {
    case RR_Rotate_0:
    case RR_Rotate_180:
	return mode_info->width;
    case RR_Rotate_90:
    case RR_Rotate_270:
	return mode_info->height;
    default:
	return 0;
    }
}

/* v refresh frequency in Hz */
static float
mode_refresh (XRRModeInfo *mode_info)
{
    float rate;
    
    if (mode_info->hTotal && mode_info->vTotal)
	rate = ((float) mode_info->dotClock / 
		((float) mode_info->hTotal * (float) mode_info->vTotal));
    else
    	rate = 0;
    return rate;
}

/* h sync frequency in Hz */
static float
mode_hsync (XRRModeInfo *mode_info)
{
    float rate;
    
    if (mode_info->hTotal)
	rate = (float) mode_info->dotClock / (float) mode_info->hTotal;
    else
    	rate = 0;
    return rate;
}

static void
init_name (name_t *name)
{
    name->kind = name_none;
}

static void
set_name_string (name_t *name, char *string)
{
    name->kind |= name_string;
    name->string = string;
}

static void
set_name_xid (name_t *name, XID xid)
{
    name->kind |= name_xid;
    name->xid = xid;
}

static void
set_name_index (name_t *name, int index)
{
    name->kind |= name_index;
    name->index = index;
}

static void
set_name_preferred (name_t *name)
{
    name->kind |= name_preferred;
}
d205 1
a205 11
static void
set_name_all (name_t *name, name_t *old)
{
    if (old->kind & name_xid)
	name->xid = old->xid;
    if (old->kind & name_string)
	name->string = old->string;
    if (old->kind & name_index)
	name->index = old->index;
    name->kind |= old->kind;
}
d207 1
a207 5
static void
set_name (name_t *name, char *string, name_kind_t valid)
{
    XID	xid;
    int index;
d209 4
a212 9
    if ((valid & name_xid) && sscanf (string, "0x%x", &xid) == 1)
	set_name_xid (name, xid);
    else if ((valid & name_index) && sscanf (string, "%d", &index) == 1)
	set_name_index (name, index);
    else if (valid & name_string)
	set_name_string (name, string);
    else
	usage ();
}
d214 1
a214 4
static output_t *
add_output (void)
{
    output_t *output = calloc (1, sizeof (output_t));
d216 2
a217 14
    if (!output)
	fatal ("out of memory");
    output->next = NULL;
    *outputs_tail = output;
    outputs_tail = &output->next;
    return output;
}

static output_t *
find_output (name_t *name)
{
    output_t *output;

    for (output = outputs; output; output = output->next)
d219 2
a220 8
	name_kind_t common = name->kind & output->output.kind;
	
	if ((common & name_xid) && name->xid == output->output.xid)
	    break;
	if ((common & name_string) && !strcmp (name->string, output->output.string))
	    break;
	if ((common & name_index) && name->index == output->output.index)
	    break;
d222 4
a225 43
    return output;
}

static output_t *
find_output_by_xid (RROutput output)
{
    name_t  output_name;

    init_name (&output_name);
    set_name_xid (&output_name, output);
    return find_output (&output_name);
}

static output_t *
find_output_by_name (char *name)
{
    name_t  output_name;

    init_name (&output_name);
    set_name_string (&output_name, name);
    return find_output (&output_name);
}

static crtc_t *
find_crtc (name_t *name)
{
    int	    c;
    crtc_t  *crtc = NULL;

    for (c = 0; c < num_crtcs; c++)
    {
	name_kind_t common;
	
	crtc = &crtcs[c];
	common = name->kind & crtc->crtc.kind;
	
	if ((common & name_xid) && name->xid == crtc->crtc.xid)
	    break;
	if ((common & name_string) && !strcmp (name->string, crtc->crtc.string))
	    break;
	if ((common & name_index) && name->index == crtc->crtc.index)
	    break;
	crtc = NULL;
d227 3
a229 12
    return crtc;
}

static crtc_t *
find_crtc_by_xid (RRCrtc crtc)
{
    name_t  crtc_name;

    init_name (&crtc_name);
    set_name_xid (&crtc_name, crtc);
    return find_crtc (&crtc_name);
}
d231 4
a234 28
static XRRModeInfo *
find_mode (name_t *name, float refresh)
{
    int		m;
    XRRModeInfo	*best = NULL;
    float	bestDist = 0;

    for (m = 0; m < res->nmode; m++)
    {
	XRRModeInfo *mode = &res->modes[m];
	if ((name->kind & name_xid) && name->xid == mode->id)
	{
	    best = mode;
	    break;
	}
	if ((name->kind & name_string) && !strcmp (name->string, mode->name))
	{
	    float   dist;
	    
	    if (refresh)
		dist = fabs (mode_refresh (mode) - refresh);
	    else
		dist = 0;
	    if (!best || dist < bestDist)
	    {
		bestDist = dist;
		best = mode;
	    }
d236 1
a236 4
	}
    }
    return best;
}
d238 1
a238 27
static XRRModeInfo *
find_mode_by_xid (RRMode mode)
{
    name_t  mode_name;

    init_name (&mode_name);
    set_name_xid (&mode_name, mode);
    return find_mode (&mode_name, 0);
}

static XRRModeInfo *
find_mode_by_name (char *name)
{
    name_t  mode_name;
    init_name (&mode_name);
    set_name_string (&mode_name, name);
    return find_mode (&mode_name, 0);
}

static
XRRModeInfo *
find_mode_for_output (output_t *output, name_t *name)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    m;
    XRRModeInfo	    *best = NULL;
    float	    bestDist = 0;
d240 4
a243 164
    for (m = 0; m < output_info->nmode; m++)
    {
	XRRModeInfo	    *mode;
	
	mode = find_mode_by_xid (output_info->modes[m]);
	if (!mode) continue;
	if ((name->kind & name_xid) && name->xid == mode->id)
	{
	    best = mode;
	    break;
	}
	if ((name->kind & name_string) && !strcmp (name->string, mode->name))
	{
	    float   dist;
	    
	    if (output->refresh)
		dist = fabs (mode_refresh (mode) - output->refresh);
	    else
		dist = 0;
	    if (!best || dist < bestDist)
	    {
		bestDist = dist;
		best = mode;
	    }
	}
    }
    return best;
}

XRRModeInfo *
preferred_mode (output_t *output)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    m;
    XRRModeInfo	    *best;
    int		    bestDist;
    
    best = NULL;
    bestDist = 0;
    for (m = 0; m < output_info->nmode; m++)
    {
	XRRModeInfo *mode_info = find_mode_by_xid (output_info->modes[m]);
	int	    dist;
	
	if (m < output_info->npreferred)
	    dist = 0;
	else if (output_info->mm_height)
	    dist = (1000 * DisplayHeight(dpy, screen) / DisplayHeightMM(dpy, screen) -
		    1000 * mode_info->height / output_info->mm_height);
	else
	    dist = DisplayHeight(dpy, screen) - mode_info->height;

        if (dist < 0) dist = -dist;
	if (!best || dist < bestDist)
	{
	    best = mode_info;
	    bestDist = dist;
	}
    }
    return best;
}

static Bool
output_can_use_crtc (output_t *output, crtc_t *crtc)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    c;

    for (c = 0; c < output_info->ncrtc; c++)
	if (output_info->crtcs[c] == crtc->crtc.xid)
	    return True;
    return False;
}

static Bool
output_can_use_mode (output_t *output, XRRModeInfo *mode)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    m;

    for (m = 0; m < output_info->nmode; m++)
	if (output_info->modes[m] == mode->id)
	    return True;
    return False;
}

static Bool
crtc_can_use_rotation (crtc_t *crtc, Rotation rotation)
{
    Rotation	rotations = crtc->crtc_info->rotations;
    Rotation	dir = rotation & (RR_Rotate_0|RR_Rotate_90|RR_Rotate_180|RR_Rotate_270);
    Rotation	reflect = rotation & (RR_Reflect_X|RR_Reflect_Y);
    if (((rotations & dir) != 0) && ((rotations & reflect) == reflect))
	return True;
    return False;
}

/*
 * Report only rotations that are supported by all crtcs
 */
static Rotation
output_rotations (output_t *output)
{
    Bool	    found = False;
    Rotation	    rotation = RR_Rotate_0;
    XRROutputInfo   *output_info = output->output_info;
    int		    c;
    
    for (c = 0; c < output_info->ncrtc; c++)
    {
	crtc_t	*crtc = find_crtc_by_xid (output_info->crtcs[c]);
	if (crtc)
	{
	    if (!found) {
		rotation = crtc->crtc_info->rotations;
		found = True;
	    } else
		rotation &= crtc->crtc_info->rotations;
	}
    }
    return rotation;
}

static Bool
output_can_use_rotation (output_t *output, Rotation rotation)
{
    XRROutputInfo   *output_info = output->output_info;
    int		    c;

    /* make sure all of the crtcs can use this rotation.
     * yes, this is not strictly necessary, but it is 
     * simpler,and we expect most drivers to either
     * support rotation everywhere or nowhere
     */
    for (c = 0; c < output_info->ncrtc; c++)
    {
	crtc_t	*crtc = find_crtc_by_xid (output_info->crtcs[c]);
	if (crtc && !crtc_can_use_rotation (crtc, rotation))
	    return False;
    }
    return True;
}

static void
set_output_info (output_t *output, RROutput xid, XRROutputInfo *output_info)
{
    /* sanity check output info */
    if (output_info->connection != RR_Disconnected && !output_info->nmode)
	fatal ("Output %s is not disconnected but has no modes\n",
	       output_info->name);
    
    /* set output name and info */
    if (!(output->output.kind & name_xid))
	set_name_xid (&output->output, xid);
    if (!(output->output.kind & name_string))
	set_name_string (&output->output, output_info->name);
    output->output_info = output_info;
    
    /* set crtc name and info */
    if (!(output->changes & changes_crtc))
	set_name_xid (&output->crtc, output_info->crtc);
    
    if (output->crtc.kind == name_xid && output->crtc.xid == None)
	output->crtc_info = NULL;
d245 45
a289 12
    {
	output->crtc_info = find_crtc (&output->crtc);
	if (!output->crtc_info)
	{
	    if (output->crtc.kind & name_xid)
		fatal ("cannot find crtc 0x%x\n", output->crtc.xid);
	    if (output->crtc.kind & name_index)
		fatal ("cannot find crtc %d\n", output->crtc.index);
	}
	if (!output_can_use_crtc (output, output->crtc_info))
	    fatal ("output %s cannot use crtc 0x%x\n", output->output.string,
		   output->crtc_info->crtc.xid);
d292 2
a293 2
    /* set mode name and info */
    if (!(output->changes & changes_mode))
d295 2
a296 13
	if (output->crtc_info)
	    set_name_xid (&output->mode, output->crtc_info->crtc_info->mode);
	else
	    set_name_xid (&output->mode, None);
	if (output->mode.xid)
	{
	    output->mode_info = find_mode_by_xid (output->mode.xid);
	    if (!output->mode_info)
		fatal ("server did not report mode 0x%x for output %s\n",
		       output->mode.xid, output->output.string);
	}
	else
	    output->mode_info = NULL;
a297 2
    else if (output->mode.kind == name_xid && output->mode.xid == None)
	output->mode_info = NULL;
d299 2
a300 458
    {
	if (output->mode.kind == name_preferred)
	    output->mode_info = preferred_mode (output);
	else
	    output->mode_info = find_mode_for_output (output, &output->mode);
	if (!output->mode_info)
	{
	    if (output->mode.kind & name_preferred)
		fatal ("cannot find preferred mode\n");
	    if (output->mode.kind & name_string)
		fatal ("cannot find mode %s\n", output->mode.string);
	    if (output->mode.kind & name_xid)
		fatal ("cannot find mode 0x%x\n", output->mode.xid);
	}
	if (!output_can_use_mode (output, output->mode_info))
	    fatal ("output %s cannot use mode %s\n", output->output.string,
		   output->mode_info->name);
    }

    /* set position */
    if (!(output->changes & changes_position))
    {
	if (output->crtc_info)
	{
	    output->x = output->crtc_info->crtc_info->x;
	    output->y = output->crtc_info->crtc_info->y;
	}
	else
	{
	    output->x = 0;
	    output->y = 0;
	}
    }

    /* set rotation */
    if (!(output->changes & changes_rotation))
    {
	output->rotation &= ~0xf;
	if (output->crtc_info)
	    output->rotation |= (output->crtc_info->crtc_info->rotation & 0xf);
	else
	    output->rotation = RR_Rotate_0;
    }
    if (!(output->changes & changes_reflection))
    {
	output->rotation &= ~(RR_Reflect_X|RR_Reflect_Y);
	if (output->crtc_info)
	    output->rotation |= (output->crtc_info->crtc_info->rotation &
				 (RR_Reflect_X|RR_Reflect_Y));
    }
    if (!output_can_use_rotation (output, output->rotation))
	fatal ("output %s cannot use rotation \"%s\" reflection \"%s\"\n",
	       output->output.string,
	       rotation_name (output->rotation),
	       reflection_name (output->rotation));
}
    
static void
get_screen (void)
{
    if (!has_1_2)
        fatal ("Server RandR version before 1.2\n");
    
    XRRGetScreenSizeRange (dpy, root, &minWidth, &minHeight,
			   &maxWidth, &maxHeight);
    
    res = XRRGetScreenResources (dpy, root);
    if (!res) fatal ("could not get screen resources");
}

static void
get_crtcs (void)
{
    int		c;

    num_crtcs = res->ncrtc;
    crtcs = calloc (num_crtcs, sizeof (crtc_t));
    if (!crtcs) fatal ("out of memory");
    
    for (c = 0; c < res->ncrtc; c++)
    {
	XRRCrtcInfo *crtc_info = XRRGetCrtcInfo (dpy, res, res->crtcs[c]);
	set_name_xid (&crtcs[c].crtc, res->crtcs[c]);
	set_name_index (&crtcs[c].crtc, c);
	if (!crtc_info) fatal ("could not get crtc 0x%x information", res->crtcs[c]);
	crtcs[c].crtc_info = crtc_info;
	if (crtc_info->mode == None)
	{
	    crtcs[c].mode_info = NULL;
	    crtcs[c].x = 0;
	    crtcs[c].y = 0;
	    crtcs[c].rotation = RR_Rotate_0;
	}
    }
}

static void
crtc_add_output (crtc_t *crtc, output_t *output)
{
    if (crtc->outputs)
	crtc->outputs = realloc (crtc->outputs, (crtc->noutput + 1) * sizeof (output_t *));
    else
    {
	crtc->outputs = malloc (sizeof (output_t *));
	crtc->x = output->x;
	crtc->y = output->y;
	crtc->rotation = output->rotation;
	crtc->mode_info = output->mode_info;
    }
    if (!crtc->outputs) fatal ("out of memory");
    crtc->outputs[crtc->noutput++] = output;
}

static void
set_crtcs (void)
{
    output_t	*output;

    for (output = outputs; output; output = output->next)
    {
	if (!output->mode_info) continue;
	crtc_add_output (output->crtc_info, output);
    }
}

static Status
crtc_disable (crtc_t *crtc)
{
    if (verbose)
    	printf ("crtc %d: disable\n", crtc->crtc.index);
	
    if (dryrun)
	return RRSetConfigSuccess;
    return XRRSetCrtcConfig (dpy, res, crtc->crtc.xid, CurrentTime,
			     0, 0, None, RR_Rotate_0, NULL, 0);
}

static Status
crtc_revert (crtc_t *crtc)
{
    XRRCrtcInfo	*crtc_info = crtc->crtc_info;
    
    if (verbose)
    	printf ("crtc %d: revert\n", crtc->crtc.index);
	
    if (dryrun)
	return RRSetConfigSuccess;
    return XRRSetCrtcConfig (dpy, res, crtc->crtc.xid, CurrentTime,
			    crtc_info->x, crtc_info->y,
			    crtc_info->mode, crtc_info->rotation,
			    crtc_info->outputs, crtc_info->noutput);
}

static Status
crtc_apply (crtc_t *crtc)
{
    RROutput	*rr_outputs;
    int		o;
    Status	s;
    RRMode	mode = None;

    if (!crtc->changing || !crtc->mode_info)
	return RRSetConfigSuccess;

    rr_outputs = calloc (crtc->noutput, sizeof (RROutput));
    if (!rr_outputs)
	return BadAlloc;
    for (o = 0; o < crtc->noutput; o++)
	rr_outputs[o] = crtc->outputs[o]->output.xid;
    mode = crtc->mode_info->id;
    if (verbose) {
	printf ("crtc %d: %12s %6.1f +%d+%d", crtc->crtc.index,
		crtc->mode_info->name, mode_refresh (crtc->mode_info),
		crtc->x, crtc->y);
	for (o = 0; o < crtc->noutput; o++)
	    printf (" \"%s\"", crtc->outputs[o]->output.string);
	printf ("\n");
    }
    
    if (dryrun)
	s = RRSetConfigSuccess;
    else
	s = XRRSetCrtcConfig (dpy, res, crtc->crtc.xid, CurrentTime,
			      crtc->x, crtc->y, mode, crtc->rotation,
			      rr_outputs, crtc->noutput);
    free (rr_outputs);
    return s;
}

static void
screen_revert (void)
{
    if (verbose)
	printf ("screen %d: revert\n", screen);

    if (dryrun)
	return;
    XRRSetScreenSize (dpy, root,
		      DisplayWidth (dpy, screen),
		      DisplayHeight (dpy, screen),
		      DisplayWidthMM (dpy, screen),
		      DisplayHeightMM (dpy, screen));
}

static void
screen_apply (void)
{
    if (fb_width == DisplayWidth (dpy, screen) &&
	fb_height == DisplayHeight (dpy, screen) &&
	fb_width_mm == DisplayWidthMM (dpy, screen) &&
	fb_height_mm == DisplayHeightMM (dpy, screen))
    {
	return;
    }
    if (verbose)
	printf ("screen %d: %dx%d %dx%d mm %6.2fdpi\n", screen,
		fb_width, fb_height, fb_width_mm, fb_height_mm, dpi);
    if (dryrun)
	return;
    XRRSetScreenSize (dpy, root, fb_width, fb_height,
		      fb_width_mm, fb_height_mm);
}

static void
revert (void)
{
    int	c;

    /* first disable all crtcs */
    for (c = 0; c < res->ncrtc; c++)
	crtc_disable (&crtcs[c]);
    /* next reset screen size */
    screen_revert ();
    /* now restore all crtcs */
    for (c = 0; c < res->ncrtc; c++)
	crtc_revert (&crtcs[c]);
}

/*
 * uh-oh, something bad happened in the middle of changing
 * the configuration. Revert to the previous configuration
 * and bail
 */
static void
panic (Status s, crtc_t *crtc)
{
    int	    c = crtc->crtc.index;
    char    *message;
    
    switch (s) {
    case RRSetConfigSuccess:		message = "succeeded";		    break;
    case BadAlloc:			message = "out of memory";	    break;
    case RRSetConfigFailed:		message = "failed";		    break;
    case RRSetConfigInvalidConfigTime:	message = "invalid config time";    break;
    case RRSetConfigInvalidTime:	message = "invalid time";	    break;
    default:				message = "unknown failure";	    break;
    }
    
    fprintf (stderr, "%s: Configure crtc %d %s\n", program_name, c, message);
    revert ();
    exit (1);
}

void
apply (void)
{
    Status  s;
    int	    c;
    
    /*
     * Turn off any crtcs which are to be disabled or which are
     * larger than the target size
     */
    for (c = 0; c < res->ncrtc; c++)
    {
	crtc_t	    *crtc = &crtcs[c];
	XRRCrtcInfo *crtc_info = crtc->crtc_info;

	/* if this crtc is already disabled, skip it */
	if (crtc_info->mode == None) 
	    continue;
	
	/* 
	 * If this crtc is to be left enabled, make
	 * sure the old size fits then new screen
	 */
	if (crtc->mode_info) 
	{
	    XRRModeInfo	*old_mode = find_mode_by_xid (crtc_info->mode);
	    int x, y, w, h;

	    if (!old_mode) 
		panic (RRSetConfigFailed, crtc);
	    
	    /* old position and size information */
	    x = crtc_info->x;
	    y = crtc_info->y;
	    w = mode_width (old_mode, crtc_info->rotation);
	    h = mode_height (old_mode, crtc_info->rotation);
	    
	    /* if it fits, skip it */
	    if (x + w <= fb_width && y + h <= fb_height) 
		continue;
	    crtc->changing = True;
	}
	s = crtc_disable (crtc);
	if (s != RRSetConfigSuccess)
	    panic (s, crtc);
    }

    /*
     * Hold the server grabbed while messing with
     * the screen so that apps which notice the resize
     * event and ask for xinerama information from the server
     * receive up-to-date information
     */
    XGrabServer (dpy);
    
    /*
     * Set the screen size
     */
    screen_apply ();
    
    /*
     * Set crtcs
     */

    for (c = 0; c < res->ncrtc; c++)
    {
	crtc_t	*crtc = &crtcs[c];
	
	s = crtc_apply (crtc);
	if (s != RRSetConfigSuccess)
	    panic (s, crtc);
    }
    /*
     * Release the server grab and let all clients
     * respond to the updated state
     */
    XUngrabServer (dpy);
}

/*
 * Use current output state to complete the output list
 */
void
get_outputs (void)
{
    int		o;
    
    for (o = 0; o < res->noutput; o++)
    {
	XRROutputInfo	*output_info = XRRGetOutputInfo (dpy, res, res->outputs[o]);
	output_t	*output;
	name_t		output_name;
	if (!output_info) fatal ("could not get output 0x%x information", res->outputs[o]);
	set_name_xid (&output_name, res->outputs[o]);
	set_name_index (&output_name, o);
	set_name_string (&output_name, output_info->name);
	output = find_output (&output_name);
	if (!output)
	{
	    output = add_output ();
	    set_name_all (&output->output, &output_name);
	    /*
	     * When global --automatic mode is set, turn on connected but off
	     * outputs, turn off disconnected but on outputs
	     */
	    if (automatic)
	    {
		switch (output_info->connection) {
		case RR_Connected:
		    if (!output_info->crtc) {
			output->changes |= changes_automatic;
			output->automatic = True;
		    }
		    break;
		case RR_Disconnected:
		    if (output_info->crtc)
		    {
			output->changes |= changes_automatic;
			output->automatic = True;
		    }
		    break;
		}
	    }
	}

	/*
	 * Automatic mode -- track connection state and enable/disable outputs
	 * as necessary
	 */
	if (output->automatic)
	{
	    switch (output_info->connection) {
	    case RR_Connected:
	    case RR_UnknownConnection:
		if ((!(output->changes & changes_mode)))
		{
		    set_name_preferred (&output->mode);
		    output->changes |= changes_mode;
		}
		break;
	    case RR_Disconnected:
		if ((!(output->changes & changes_mode)))
		{
		    set_name_xid (&output->mode, None);
		    set_name_xid (&output->crtc, None);
		    output->changes |= changes_mode;
		    output->changes |= changes_crtc;
		}
		break;
	    }
	}

	set_output_info (output, res->outputs[o], output_info);
    }
}

void
mark_changing_crtcs (void)
{
    int	c;

    for (c = 0; c < num_crtcs; c++)
    {
	crtc_t	    *crtc = &crtcs[c];
	int	    o;
	output_t    *output;

	/* walk old output list (to catch disables) */
	for (o = 0; o < crtc->crtc_info->noutput; o++)
	{
	    output = find_output_by_xid (crtc->crtc_info->outputs[o]);
	    if (!output) fatal ("cannot find output 0x%x\n",
				crtc->crtc_info->outputs[o]);
	    if (output->changes)
		crtc->changing = True;
	}
	/* walk new output list */
	for (o = 0; o < crtc->noutput; o++)
	{
	    output = crtc->outputs[o];
	    if (output->changes)
		crtc->changing = True;
	}
    }
}

/*
 * Test whether 'crtc' can be used for 'output'
 */
Bool
check_crtc_for_output (crtc_t *crtc, output_t *output)
{
    int		c;
    int		l;
    output_t    *other;
a301 51
    for (c = 0; c < output->output_info->ncrtc; c++)
	if (output->output_info->crtcs[c] == crtc->crtc.xid)
	    break;
    if (c == output->output_info->ncrtc)
	return False;
    for (other = outputs; other; other = other->next)
    {
	if (other == output)
	    continue;

	if (other->mode_info == NULL)
	    continue;

	if (other->crtc_info != crtc)
	    continue;

	/* see if the output connected to the crtc can clone to this output */
	for (l = 0; l < output->output_info->nclone; l++)
	    if (output->output_info->clones[l] == other->output.xid)
		break;
	/* not on the list, can't clone */
	if (l == output->output_info->nclone) 
	    return False;
    }

    if (crtc->noutput)
    {
	/* make sure the state matches */
	if (crtc->mode_info != output->mode_info)
	    return False;
	if (crtc->x != output->x)
	    return False;
	if (crtc->y != output->y)
	    return False;
	if (crtc->rotation != output->rotation)
	    return False;
    }
    return True;
}

crtc_t *
find_crtc_for_output (output_t *output)
{
    int	    c;

    for (c = 0; c < output->output_info->ncrtc; c++)
    {
	crtc_t	    *crtc;

	crtc = find_crtc_by_xid (output->output_info->crtcs[c]);
	if (!crtc) fatal ("cannot find crtc 0x%x\n", output->output_info->crtcs[c]);
d303 3
a305 78
	if (check_crtc_for_output (crtc, output))
	    return crtc;
    }
    return NULL;
}

static void
set_positions (void)
{
    output_t	*output;
    Bool	keep_going;
    Bool	any_set;
    int		min_x, min_y;

    for (;;)
    {
	any_set = False;
	keep_going = False;
	for (output = outputs; output; output = output->next)
	{
	    output_t    *relation;
	    name_t	relation_name;

	    if (!(output->changes & changes_relation)) continue;
	    
	    if (output->mode_info == NULL) continue;

	    init_name (&relation_name);
	    set_name_string (&relation_name, output->relative_to);
	    relation = find_output (&relation_name);
	    if (!relation) fatal ("cannot find output \"%s\"\n", output->relative_to);
	    
	    if (relation->mode_info == NULL) 
	    {
		output->x = 0;
		output->y = 0;
		output->changes |= changes_position;
		any_set = True;
		continue;
	    }
	    /*
	     * Make sure the dependent object has been set in place
	     */
	    if ((relation->changes & changes_relation) && 
		!(relation->changes & changes_position))
	    {
		keep_going = True;
		continue;
	    }
	    
	    switch (output->relation) {
	    case left_of:
		output->y = relation->y;
		output->x = relation->x - mode_width (output->mode_info, output->rotation);
		break;
	    case right_of:
		output->y = relation->y;
		output->x = relation->x + mode_width (relation->mode_info, relation->rotation);
		break;
	    case above:
		output->x = relation->x;
		output->y = relation->y - mode_height (output->mode_info, output->rotation);
		break;
	    case below:
		output->x = relation->x;
		output->y = relation->y + mode_height (relation->mode_info, relation->rotation);
		break;
	    case same_as:
		output->x = relation->x;
		output->y = relation->y;
	    }
	    output->changes |= changes_position;
	    any_set = True;
	}
	if (!keep_going)
	    break;
	if (!any_set)
	    fatal ("loop in relative position specifications\n");
d307 1
d309 2
a310 13
    /*
     * Now normalize positions so the upper left corner of all outputs is at 0,0
     */
    min_x = 32768;
    min_y = 32768;
    for (output = outputs; output; output = output->next)
    {
	if (output->mode_info == NULL) continue;
	
	if (output->x < min_x) min_x = output->x;
	if (output->y < min_y) min_y = output->y;
    }
    if (min_x || min_y)
d312 2
a313 51
	/* move all outputs */
	for (output = outputs; output; output = output->next)
	{
	    if (output->mode_info == NULL) continue;

	    output->x -= min_x;
	    output->y -= min_y;
	    output->changes |= changes_position;
	}
    }
}

static void
set_screen_size (void)
{
    output_t	*output;
    Bool	fb_specified = fb_width != 0 && fb_height != 0;
    
    for (output = outputs; output; output = output->next)
    {
	XRRModeInfo *mode_info = output->mode_info;
	int	    x, y, w, h;
	
	if (!mode_info) continue;
	
	x = output->x;
	y = output->y;
	w = mode_width (mode_info, output->rotation);
	h = mode_height (mode_info, output->rotation);
	/* make sure output fits in specified size */
	if (fb_specified)
	{
	    if (x + w > fb_width || y + h > fb_height)
		fatal ("specified screen %dx%d not large enough for output %s (%dx%d+%d+%d)\n",
		       fb_width, fb_height, output->output.string, w, h, x, y);
	}
	/* fit fb to output */
	else
	{
	    if (x + w > fb_width) fb_width = x + w;
	    if (y + h > fb_height) fb_height = y + h;
	}
    }	

    if (fb_width > maxWidth || fb_height > maxHeight)
        fatal ("screen cannot be larger than %dx%d (desired size %dx%d)\n",
	       maxWidth, maxHeight, fb_width, fb_height);
    if (fb_specified)
    {
	if (fb_width < minWidth || fb_height < minHeight)
	    fatal ("screen must be at least %dx%d\n", minWidth, minHeight);
d316 3
a318 17
    {
	if (fb_width < minWidth) fb_width = minWidth;
	if (fb_height < minHeight) fb_height = minHeight;
    }
}
    
#endif
    
void
disable_outputs (output_t *outputs)
{
    while (outputs)
    {
	outputs->crtc_info = NULL;
	outputs = outputs->next;
    }
}
d320 2
a321 33
/*
 * find the best mapping from output to crtc available
 */
int
pick_crtcs_score (output_t *outputs)
{
    output_t	*output;
    int		best_score;
    int		my_score;
    int		score;
    crtc_t	*best_crtc;
    int		c;
    
    if (!outputs)
	return 0;
    
    output = outputs;
    outputs = outputs->next;
    /*
     * Score with this output disabled
     */
    output->crtc_info = NULL;
    best_score = pick_crtcs_score (outputs);
    if (output->mode_info == NULL)
	return best_score;

    best_crtc = NULL;
    /* 
     * Now score with this output any valid crtc
     */
    for (c = 0; c < output->output_info->ncrtc; c++)
    {
	crtc_t	    *crtc;
d323 2
a324 26
	crtc = find_crtc_by_xid (output->output_info->crtcs[c]);
	if (!crtc)
	    fatal ("cannot find crtc 0x%x\n", output->output_info->crtcs[c]);
	
	/* reset crtc allocation for following outputs */
	disable_outputs (outputs);
	if (!check_crtc_for_output (crtc, output))
	    continue;
	
	my_score = 1000;
	/* slight preference for existing connections */
	if (crtc == output->current_crtc_info)
	    my_score++;

	output->crtc_info = crtc;
	score = my_score + pick_crtcs_score (outputs);
	if (score > best_score)
	{
	    best_crtc = crtc;
	    best_score = score;
	}
    }
    /*
     * Reset other outputs based on this one using the best crtc
     */
    if (output->crtc_info != best_crtc)
d326 2
a327 990
	output->crtc_info = best_crtc;
	(void) pick_crtcs_score (outputs);
    }
    return best_score;
}

/*
 * Pick crtcs for any changing outputs that don't have one
 */
void
pick_crtcs (void)
{
    output_t	*output;

    /*
     * First try to match up newly enabled outputs with spare crtcs
     */
    for (output = outputs; output; output = output->next)
    {
	if (output->changes && output->mode_info && !output->crtc_info)
	{
	    output->crtc_info = find_crtc_for_output (output);
	    if (!output->crtc_info)
		break;
	}
    }
    /*
     * Everyone is happy
     */
    if (!output)
	return;
    /*
     * When the simple way fails, see if there is a way
     * to swap crtcs around and make things work
     */
    for (output = outputs; output; output = output->next)
	output->current_crtc_info = output->crtc_info;
    pick_crtcs_score (outputs);
    for (output = outputs; output; output = output->next)
    {
	if (output->mode_info && !output->crtc_info)
	    fatal ("cannot find crtc for output %s\n", output->output.string);
	if (!output->changes && output->crtc_info != output->current_crtc_info)
	    output->changes |= changes_crtc;
    }
}

int
main (int argc, char **argv)
{
    XRRScreenSize *sizes;
    XRRScreenConfiguration *sc;
    int		nsize;
    int		nrate;
    short		*rates;
    Status	status = RRSetConfigFailed;
    int		rot = -1;
    int		query = 0;
    Rotation	rotation, current_rotation, rotations;
    XEvent	event;
    XRRScreenChangeNotifyEvent *sce;    
    char          *display_name = NULL;
    int 		i, j;
    SizeID	current_size;
    short	current_rate;
    float    	rate = -1;
    int		size = -1;
    int		dirind = 0;
    Bool	setit = False;
    Bool    	version = False;
    int		event_base, error_base;
    int		reflection = 0;
    int		width = 0, height = 0;
    Bool    	have_pixel_size = False;
    int		ret = 0;
#if HAS_RANDR_1_2
    output_t	*output = NULL;
    policy_t	policy = clone;
    Bool    	setit_1_2 = False;
    Bool    	query_1_2 = False;
    Bool	modeit = False;
    Bool	propit = False;
    Bool	query_1 = False;
    int		major, minor;
#endif

    program_name = argv[0];
    if (argc == 1) query = True;
    for (i = 1; i < argc; i++) {
	if (!strcmp ("-display", argv[i]) || !strcmp ("-d", argv[i])) {
	    if (++i>=argc) usage ();
	    display_name = argv[i];
	    continue;
	}
	if (!strcmp("-help", argv[i])) {
	    usage();
	    continue;
	}
	if (!strcmp ("--verbose", argv[i])) {
	    verbose = True;
	    continue;
	}
	if (!strcmp ("--dryrun", argv[i])) {
	    dryrun = True;
	    verbose = True;
	    continue;
	}

	if (!strcmp ("-s", argv[i]) || !strcmp ("--size", argv[i])) {
	    if (++i>=argc) usage ();
	    if (sscanf (argv[i], "%dx%d", &width, &height) == 2)
		have_pixel_size = True;
	    else {
		size = atoi (argv[i]);
		if (size < 0) usage();
	    }
	    setit = True;
	    continue;
	}

	if (!strcmp ("-r", argv[i]) ||
	    !strcmp ("--rate", argv[i]) ||
	    !strcmp ("--refresh", argv[i]))
	{
	    if (++i>=argc) usage ();
	    if (sscanf (argv[i], "%f", &rate) != 1)
		usage ();
	    setit = True;
#if HAS_RANDR_1_2
	    if (output)
	    {
		output->refresh = rate;
		output->changes |= changes_refresh;
		setit_1_2 = True;
	    }
#endif
	    continue;
	}

	if (!strcmp ("-v", argv[i]) || !strcmp ("--version", argv[i])) {
	    version = True;
	    continue;
	}

	if (!strcmp ("-x", argv[i])) {
	    reflection |= RR_Reflect_X;
	    setit = True;
	    continue;
	}
	if (!strcmp ("-y", argv[i])) {
	    reflection |= RR_Reflect_Y;
	    setit = True;
	    continue;
	}
	if (!strcmp ("--screen", argv[i])) {
	    if (++i>=argc) usage ();
	    screen = atoi (argv[i]);
	    if (screen < 0) usage();
	    continue;
	}
	if (!strcmp ("-q", argv[i]) || !strcmp ("--query", argv[i])) {
	    query = True;
	    continue;
	}
	if (!strcmp ("-o", argv[i]) || !strcmp ("--orientation", argv[i])) {
	    char *endptr;
	    if (++i>=argc) usage ();
	    dirind = strtol(argv[i], &endptr, 0);
	    if (*endptr != '\0') {
		for (dirind = 0; dirind < 4; dirind++) {
		    if (strcmp (direction[dirind], argv[i]) == 0) break;
		}
		if ((dirind < 0) || (dirind > 3))  usage();
	    }
	    rot = dirind;
	    setit = True;
	    continue;
	}
#if HAS_RANDR_1_2
	if (!strcmp ("--prop", argv[i]) || !strcmp ("--properties", argv[i]))
	{
	    query_1_2 = True;
	    properties = True;
	    continue;
	}
	if (!strcmp ("--output", argv[i])) {
	    if (++i >= argc) usage();
	    output = add_output ();

	    set_name (&output->output, argv[i], name_string|name_xid);
	    
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--crtc", argv[i])) {
	    if (++i >= argc) usage();
	    if (!output) usage();
	    set_name (&output->crtc, argv[i], name_xid|name_index);
	    output->changes |= changes_crtc;
	    continue;
	}
	if (!strcmp ("--mode", argv[i])) {
	    if (++i >= argc) usage();
	    if (!output) usage();
	    set_name (&output->mode, argv[i], name_string|name_xid);
	    output->changes |= changes_mode;
	    continue;
	}
	if (!strcmp ("--preferred", argv[i])) {
	    if (!output) usage();
	    set_name_preferred (&output->mode);
	    output->changes |= changes_mode;
	    continue;
	}
	if (!strcmp ("--pos", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    if (sscanf (argv[i], "%dx%d",
			&output->x, &output->y) != 2)
		usage ();
	    output->changes |= changes_position;
	    continue;
	}
	if (!strcmp ("--rotation", argv[i]) || !strcmp ("--rotate", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    for (dirind = 0; dirind < 4; dirind++) {
		if (strcmp (direction[dirind], argv[i]) == 0) break;
	    }
	    if (dirind == 4)
		usage ();
	    output->rotation &= ~0xf;
	    output->rotation |= 1 << dirind;
	    output->changes |= changes_rotation;
	    continue;
	}
	if (!strcmp ("--reflect", argv[i]) || !strcmp ("--reflection", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    for (dirind = 0; dirind < 4; dirind++) {
		if (strcmp (reflections[dirind], argv[i]) == 0) break;
	    }
	    if (dirind == 4)
		usage ();
	    output->rotation &= ~(RR_Reflect_X|RR_Reflect_Y);
	    output->rotation |= dirind * RR_Reflect_X;
	    output->changes |= changes_reflection;
	    continue;
	}
	if (!strcmp ("--left-of", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = left_of;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--right-of", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = right_of;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--above", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = above;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--below", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = below;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--same-as", argv[i])) {
	    if (++i>=argc) usage ();
	    if (!output) usage();
	    output->relation = same_as;
	    output->relative_to = argv[i];
	    output->changes |= changes_relation;
	    continue;
	}
	if (!strcmp ("--set", argv[i])) {
	    output_prop_t   *prop;
	    if (!output) usage();
	    prop = malloc (sizeof (output_prop_t));
	    prop->next = output->props;
	    output->props = prop;
	    if (++i>=argc) usage ();
	    prop->name = argv[i];
	    if (++i>=argc) usage ();
	    prop->value = argv[i];
	    propit = True;
	    output->changes |= changes_property;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--off", argv[i])) {
	    if (!output) usage();
	    set_name_xid (&output->mode, None);
	    set_name_xid (&output->crtc, None);
	    output->changes |= changes_mode;
	    continue;
	}
	if (!strcmp ("--fb", argv[i])) {
	    if (++i>=argc) usage ();
	    if (sscanf (argv[i], "%dx%d",
			&fb_width, &fb_height) != 2)
		usage ();
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--fbmm", argv[i])) {
	    if (++i>=argc) usage ();
	    if (sscanf (argv[i], "%dx%d",
			&fb_width_mm, &fb_height_mm) != 2)
		usage ();
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--dpi", argv[i])) {
	    if (++i>=argc) usage ();
	    if (sscanf (argv[i], "%f", &dpi) != 1)
	    {
		dpi = 0.0;
		dpi_output = argv[i];
	    }
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--clone", argv[i])) {
	    policy = clone;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--extend", argv[i])) {
	    policy = extend;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--auto", argv[i])) {
	    if (output)
	    {
		output->automatic = True;
		output->changes |= changes_automatic;
	    }
	    else
		automatic = True;
	    setit_1_2 = True;
	    continue;
	}
	if (!strcmp ("--q12", argv[i]))
	{
	    query_1_2 = True;
	    continue;
	}
	if (!strcmp ("--q1", argv[i]))
	{
	    query_1 = True;
	    continue;
	}
	if (!strcmp ("--newmode", argv[i]))
	{
	    umode_t  *m = malloc (sizeof (umode_t));
	    float   clock;
	    
	    ++i;
	    if (i + 9 >= argc) usage ();
	    m->mode.name = argv[i];
	    m->mode.nameLength = strlen (argv[i]);
	    i++;
	    if (sscanf (argv[i++], "%f", &clock) != 1)
		usage ();
	    m->mode.dotClock = clock * 1e6;

	    if (sscanf (argv[i++], "%d", &m->mode.width) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.hSyncStart) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.hSyncEnd) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.hTotal) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.height) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.vSyncStart) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.vSyncEnd) != 1) usage();
	    if (sscanf (argv[i++], "%d", &m->mode.vTotal) != 1) usage();
	    m->mode.modeFlags = 0;
	    while (i < argc) {
		int f;
		
		for (f = 0; mode_flags[f].string; f++)
		    if (!strcasecmp (mode_flags[f].string, argv[i]))
			break;
		
		if (!mode_flags[f].string)
		    break;
    		m->mode.modeFlags |= mode_flags[f].flag;
    		i++;
	    }
	    m->next = umodes;
	    m->action = umode_create;
	    umodes = m;
	    modeit = True;
	    continue;
	}
	if (!strcmp ("--rmmode", argv[i]))
	{
	    umode_t  *m = malloc (sizeof (umode_t));

	    if (++i>=argc) usage ();
	    set_name (&m->name, argv[i], name_string|name_xid);
	    m->action = umode_destroy;
	    m->next = umodes;
	    umodes = m;
	    modeit = True;
	    continue;
	}
	if (!strcmp ("--addmode", argv[i]))
	{
	    umode_t  *m = malloc (sizeof (umode_t));

	    if (++i>=argc) usage ();
	    set_name (&m->output, argv[i], name_string|name_xid);
	    if (++i>=argc) usage();
	    set_name (&m->name, argv[i], name_string|name_xid);
	    m->action = umode_add;
	    m->next = umodes;
	    umodes = m;
	    modeit = True;
	    continue;
	}
	if (!strcmp ("--delmode", argv[i]))
	{
	    umode_t  *m = malloc (sizeof (umode_t));

	    if (++i>=argc) usage ();
	    set_name (&m->output, argv[i], name_string|name_xid);
	    if (++i>=argc) usage();
	    set_name (&m->name, argv[i], name_string|name_xid);
	    m->action = umode_delete;
	    m->next = umodes;
	    umodes = m;
	    modeit = True;
	    continue;
	}
#endif
	usage();
    }
    if (verbose) 
    {
	query = True;
	if (setit && !setit_1_2)
	    query_1 = True;
    }

    dpy = XOpenDisplay (display_name);

    if (dpy == NULL) {
	fprintf (stderr, "Can't open display %s\n", XDisplayName(display_name));
	exit (1);
    }
    if (screen < 0)
	screen = DefaultScreen (dpy);
    if (screen >= ScreenCount (dpy)) {
	fprintf (stderr, "Invalid screen number %d (display has %d)\n",
		 screen, ScreenCount (dpy));
	exit (1);
    }

    root = RootWindow (dpy, screen);

#if HAS_RANDR_1_2
    if (!XRRQueryVersion (dpy, &major, &minor))
    {
	fprintf (stderr, "RandR extension missing\n");
	exit (1);
    }
    if (major > 1 || (major == 1 && minor >= 2))
	has_1_2 = True;
	
    if (has_1_2 && modeit)
    {
	umode_t	*m;

        get_screen ();
	get_crtcs();
	get_outputs();
	
	for (m = umodes; m; m = m->next)
	{
	    XRRModeInfo *e;
	    output_t	*o;
	    
	    switch (m->action) {
	    case umode_create:
		XRRCreateMode (dpy, root, &m->mode);
		break;
	    case umode_destroy:
		e = find_mode (&m->name, 0);
		if (!e)
		    fatal ("cannot find mode \"%s\"\n", m->name.string);
		XRRDestroyMode (dpy, e->id);
		break;
	    case umode_add:
		o = find_output (&m->output);
		if (!o)
		    fatal ("cannot find output \"%s\"\n", m->output.string);
		e = find_mode (&m->name, 0);
		if (!e)
		    fatal ("cannot find mode \"%s\"\n", m->name.string);
		XRRAddOutputMode (dpy, o->output.xid, e->id);
		break;
	    case umode_delete:
		o = find_output (&m->output);
		if (!o)
		    fatal ("cannot find output \"%s\"\n", m->output.string);
		e = find_mode (&m->name, 0);
		if (!e)
		    fatal ("cannot find mode \"%s\"\n", m->name.string);
		XRRDeleteOutputMode (dpy, o->output.xid, e->id);
		break;
	    }
	}
	if (!setit_1_2)
	{
	    XSync (dpy, False);
	    exit (0);
	}
    }
    if (has_1_2 && propit)
    {
	
        get_screen ();
	get_crtcs();
	get_outputs();
	
	for (output = outputs; output; output = output->next)
	{
	    output_prop_t   *prop;

	    for (prop = output->props; prop; prop = prop->next)
	    {
		Atom		name = XInternAtom (dpy, prop->name, False);
		Atom		type;
		int		format;
		unsigned char	*data;
		int		nelements;
		int		int_value;
		unsigned long	ulong_value;
		unsigned char	*prop_data;
		int		actual_format;
		unsigned long	nitems, bytes_after;
		Atom		actual_type;
		XRRPropertyInfo *propinfo;

		type = AnyPropertyType;
		format=0;
		
		if (XRRGetOutputProperty (dpy, output->output.xid, name,
					  0, 100, False, False,
					  AnyPropertyType,
					  &actual_type, &actual_format,
					  &nitems, &bytes_after, &prop_data) == Success &&

		    (propinfo = XRRQueryOutputProperty(dpy, output->output.xid,
						      name)))
		{
		    type = actual_type;
		    format = actual_format;
		}
		
		if ((type == XA_INTEGER || type == AnyPropertyType) &&
		    (sscanf (prop->value, "%d", &int_value) == 1 ||
		     sscanf (prop->value, "0x%x", &int_value) == 1))
		{
		    type = XA_INTEGER;
		    ulong_value = int_value;
		    data = (unsigned char *) &ulong_value;
		    nelements = 1;
		    format = 32;
		}
		else if ((type == XA_ATOM))
		{
		    ulong_value = XInternAtom (dpy, prop->value, False);
		    data = (unsigned char *) &ulong_value;
		    nelements = 1;
		    format = 32;
		}
		else if ((type == XA_STRING || type == AnyPropertyType))
		{
		    type = XA_STRING;
		    data = (unsigned char *) prop->value;
		    nelements = strlen (prop->value);
		    format = 8;
		}
		XRRChangeOutputProperty (dpy, output->output.xid,
					 name, type, format, PropModeReplace,
					 data, nelements);
	    }
	}
	if (!setit_1_2)
	{
	    XSync (dpy, False);
	    exit (0);
	}
    }
    if (setit_1_2)
    {
	get_screen ();
	get_crtcs ();
	get_outputs ();
	set_positions ();
	set_screen_size ();

	pick_crtcs ();

	/*
	 * Assign outputs to crtcs
	 */
	set_crtcs ();
	
	/*
	 * Mark changing crtcs
	 */
	mark_changing_crtcs ();

	/*
	 * If an output was specified to track dpi, use it
	 */
	if (dpi_output)
	{
	    output_t	*output = find_output_by_name (dpi_output);
	    XRROutputInfo	*output_info;
	    XRRModeInfo	*mode_info;
	    if (!output)
		fatal ("Cannot find output %s\n", dpi_output);
	    output_info = output->output_info;
	    mode_info = output->mode_info;
	    if (output_info && mode_info && output_info->mm_height)
	    {
		/*
		 * When this output covers the whole screen, just use
		 * the known physical size
		 */
		if (fb_width == mode_info->width &&
		    fb_height == mode_info->height)
		{
		    fb_width_mm = output_info->mm_width;
		    fb_height_mm = output_info->mm_height;
		}
		else
		{
		    dpi = (25.4 * mode_info->height) / output_info->mm_height;
		}
	    }
	}

	/*
	 * Compute physical screen size
	 */
	if (fb_width_mm == 0 || fb_height_mm == 0)
	{
	    if (fb_width != DisplayWidth (dpy, screen) ||
		fb_height != DisplayHeight (dpy, screen) || dpi != 0.0)
	    {
		if (dpi <= 0)
		    dpi = (25.4 * DisplayHeight (dpy, screen)) / DisplayHeightMM(dpy, screen);

		fb_width_mm = (25.4 * fb_width) / dpi;
		fb_height_mm = (25.4 * fb_height) / dpi;
	    }
	    else
	    {
		fb_width_mm = DisplayWidthMM (dpy, screen);
		fb_height_mm = DisplayHeightMM (dpy, screen);
	    }
	}
	
	/*
	 * Now apply all of the changes
	 */
	apply ();
	
	XSync (dpy, False);
	exit (0);
    }
    if (query_1_2 || (query && has_1_2 && !query_1))
    {
	output_t    *output;
	int	    m;
	
#define ModeShown   0x80000000
	
	get_screen ();
	get_crtcs ();
	get_outputs ();

        printf ("Screen %d: minimum %d x %d, current %d x %d, maximum %d x %d\n",
		screen, minWidth, minHeight,
		DisplayWidth (dpy, screen), DisplayHeight(dpy, screen),
		maxWidth, maxHeight);

	for (output = outputs; output; output = output->next)
	{
	    XRROutputInfo   *output_info = output->output_info;
	    XRRModeInfo	    *mode = output->mode_info;
	    Atom	    *props;
	    int		    j, k, nprop;
	    Bool	    *mode_shown;
	    Rotation	    rotations = output_rotations (output);

	    printf ("%s %s", output_info->name, connection[output_info->connection]);
	    if (mode)
	    {
		printf (" %dx%d+%d+%d",
			mode_width (mode, output->rotation),
			mode_height (mode, output->rotation),
			output->x, output->y);
		if (verbose)
		    printf (" (0x%x)", mode->id);
		if (output->rotation != RR_Rotate_0 || verbose)
		{
		    printf (" %s", 
			    rotation_name (output->rotation));
		    if (output->rotation & (RR_Reflect_X|RR_Reflect_Y))
			printf (" %s", reflection_name (output->rotation));
		}
	    }
	    if (rotations != RR_Rotate_0 || verbose)
	    {
		Bool    first = True;
		printf (" (");
		for (i = 0; i < 4; i ++) {
		    if ((rotations >> i) & 1) {
			if (!first) printf (" "); first = False;
			printf("%s", direction[i]);
			first = False;
		    }
		}
		if (rotations & RR_Reflect_X)
		{
		    if (!first) printf (" "); first = False;
		    printf ("x axis");
		}
		if (rotations & RR_Reflect_Y)
		{
		    if (!first) printf (" "); first = False;
		    printf ("y axis");
		}
		printf (")");
	    }

	    if (mode)
	    {
		printf (" %dmm x %dmm",
			output_info->mm_width, output_info->mm_height);
	    }
	    printf ("\n");

	    if (verbose)
	    {
		printf ("\tIdentifier: 0x%x\n", output->output.xid);
		printf ("\tTimestamp:  %d\n", output_info->timestamp);
		printf ("\tSubpixel:   %s\n", order[output_info->subpixel_order]);
		printf ("\tClones:    ");
		for (j = 0; j < output_info->nclone; j++)
		{
		    output_t	*clone = find_output_by_xid (output_info->clones[j]);

		    if (clone) printf (" %s", clone->output.string);
		}
		printf ("\n");
		if (output->crtc_info)
		    printf ("\tCRTC:       %d\n", output->crtc_info->crtc.index);
		printf ("\tCRTCs:     ");
		for (j = 0; j < output_info->ncrtc; j++)
		{
		    crtc_t	*crtc = find_crtc_by_xid (output_info->crtcs[j]);
		    if (crtc)
			printf (" %d", crtc->crtc.index);
		}
		printf ("\n");
	    }
	    if (verbose || properties)
	    {
		props = XRRListOutputProperties (dpy, output->output.xid,
						 &nprop);
		for (j = 0; j < nprop; j++) {
		    unsigned char *prop;
		    int actual_format;
		    unsigned long nitems, bytes_after;
		    Atom actual_type;
		    XRRPropertyInfo *propinfo;
    
		    XRRGetOutputProperty (dpy, output->output.xid, props[j],
					  0, 100, False, False,
					  AnyPropertyType,
					  &actual_type, &actual_format,
					  &nitems, &bytes_after, &prop);

		    propinfo = XRRQueryOutputProperty(dpy, output->output.xid,
						      props[j]);

		    if (actual_type == XA_INTEGER && actual_format == 8) {
			int k;
    
			printf("\t%s:\n", XGetAtomName (dpy, props[j]));
			for (k = 0; k < nitems; k++) {
			    if (k % 16 == 0)
				printf ("\t\t");
			    printf("%02x", (unsigned char)prop[k]);
			    if (k % 16 == 15)
				printf("\n");
			}
		    } else if (actual_type == XA_INTEGER &&
			       actual_format == 32)
		    {
			printf("\t%s: %d (0x%08x)",
			       XGetAtomName (dpy, props[j]),
			       *(INT32 *)prop, *(INT32 *)prop);

 			if (propinfo->range && propinfo->num_values > 0) {
			    printf(" range%s: ",
				   (propinfo->num_values == 2) ? "" : "s");

			    for (k = 0; k < propinfo->num_values / 2; k++)
				printf(" (%d,%d)", propinfo->values[k * 2],
				       propinfo->values[k * 2 + 1]);
			}

			printf("\n");
		    } else if (actual_type == XA_ATOM &&
			       actual_format == 32)
		    {
			printf("\t%s: %s",
			       XGetAtomName (dpy, props[j]),
			       XGetAtomName (dpy, *(Atom *)prop));

 			if (!propinfo->range && propinfo->num_values > 0) {
			    printf("\n\t\tsupported:");

			    for (k = 0; k < propinfo->num_values; k++)
			    {
				printf(" %-12.12s", XGetAtomName (dpy,
							    propinfo->values[k]));
				if (k % 4 == 3 && k < propinfo->num_values - 1)
				    printf ("\n\t\t          ");
			    }
			}
			printf("\n");
			
		    } else if (actual_format == 8) {
			printf ("\t\t%s: %s%s\n", XGetAtomName (dpy, props[j]),
				prop, bytes_after ? "..." : "");
		    } else {
			printf ("\t\t%s: ????\n", XGetAtomName (dpy, props[j]));
		    }

		    free(propinfo);
		}
	    }
	    
	    if (verbose)
	    {
		for (j = 0; j < output_info->nmode; j++)
		{
		    XRRModeInfo	*mode = find_mode_by_xid (output_info->modes[j]);
		    int		f;
		    
		    printf ("  %s (0x%x) %6.1fMHz",
			    mode->name, mode->id,
			    (float)mode->dotClock / 1000000.0);
		    for (f = 0; mode_flags[f].flag; f++)
			if (mode->modeFlags & mode_flags[f].flag)
			    printf (" %s", mode_flags[f].string);
		    printf ("\n");
		    printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.1fKHz\n",
			    mode->width, mode->hSyncStart, mode->hSyncEnd,
			    mode->hTotal, mode->hSkew, mode_hsync (mode) / 1000);
		    printf ("        v: height %4d start %4d end %4d total %4d           clock %6.1fHz\n",
			    mode->height, mode->vSyncStart, mode->vSyncEnd, mode->vTotal,
			    mode_refresh (mode));
		    mode->modeFlags |= ModeShown;
		}
	    }
	    else
	    {
		mode_shown = calloc (output_info->nmode, sizeof (Bool));
		if (!mode_shown) fatal ("out of memory\n");
		for (j = 0; j < output_info->nmode; j++)
		{
		    XRRModeInfo *jmode, *kmode;
		    
		    if (mode_shown[j]) continue;
    
		    jmode = find_mode_by_xid (output_info->modes[j]);
		    printf (" ");
		    printf ("  %-12s", jmode->name);
		    for (k = j; k < output_info->nmode; k++)
		    {
			if (mode_shown[k]) continue;
			kmode = find_mode_by_xid (output_info->modes[k]);
			if (strcmp (jmode->name, kmode->name) != 0) continue;
			mode_shown[k] = True;
			kmode->modeFlags |= ModeShown;
			printf (" %6.1f", mode_refresh (kmode));
			if (kmode == output->mode_info)
			    printf ("*");
			else
			    printf (" ");
			if (k < output_info->npreferred)
			    printf ("+");
			else
			    printf (" ");
		    }
		    printf ("\n");
		}
		free (mode_shown);
	    }
	}
	for (m = 0; m < res->nmode; m++)
	{
	    XRRModeInfo	*mode = &res->modes[m];

	    if (!(mode->modeFlags & ModeShown))
	    {
		printf ("  %s (0x%x) %6.1fMHz\n",
			mode->name, mode->id,
			(float)mode->dotClock / 1000000.0);
		printf ("        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.1fKHz\n",
			mode->width, mode->hSyncStart, mode->hSyncEnd,
			mode->hTotal, mode->hSkew, mode_hsync (mode) / 1000);
		printf ("        v: height %4d start %4d end %4d total %4d           clock %6.1fHz\n",
			mode->height, mode->vSyncStart, mode->vSyncEnd, mode->vTotal,
			mode_refresh (mode));
	    }
	}
	exit (0);
    }
#endif
    
    sc = XRRGetScreenInfo (dpy, root);

    if (sc == NULL) 
	exit (1);

    current_size = XRRConfigCurrentConfiguration (sc, &current_rotation);

    sizes = XRRConfigSizes(sc, &nsize);

    if (have_pixel_size) {
	for (size = 0; size < nsize; size++)
	{
	    if (sizes[size].width == width && sizes[size].height == height)
		break;
	}
	if (size >= nsize) {
	    fprintf (stderr,
		     "Size %dx%d not found in available modes\n", width, height);
	    exit (1);
	}
    }
    else if (size < 0)
	size = current_size;
    else if (size >= nsize) {
	fprintf (stderr,
		 "Size index %d is too large, there are only %d sizes\n",
		 size, nsize);
	exit (1);
    }

    if (rot < 0)
    {
	for (rot = 0; rot < 4; rot++)
	    if (1 << rot == (current_rotation & 0xf))
		break;
    }

    current_rate = XRRConfigCurrentRate (sc);

    if (rate < 0)
    {
	if (size == current_size)
	    rate = current_rate;
	else
	    rate = 0;
d330 2
a331 34
    {
	rates = XRRConfigRates (sc, size, &nrate);
	for (i = 0; i < nrate; i++)
	    if (rate == rates[i])
		break;
	if (i == nrate) {
	    fprintf (stderr, "Rate %.1f Hz not available for this size\n", rate);
	    exit (1);
	}
    }

    if (version) {
	int major_version, minor_version;
	XRRQueryVersion (dpy, &major_version, &minor_version);
	printf("Server reports RandR version %d.%d\n", 
	       major_version, minor_version);
    }

    if (query || query_1) {
	printf(" SZ:    Pixels          Physical       Refresh\n");
	for (i = 0; i < nsize; i++) {
	    printf ("%c%-2d %5d x %-5d  (%4dmm x%4dmm )",
		    i == current_size ? '*' : ' ',
		    i, sizes[i].width, sizes[i].height,
		    sizes[i].mwidth, sizes[i].mheight);
	    rates = XRRConfigRates (sc, i, &nrate);
	    if (nrate) printf ("  ");
	    for (j = 0; j < nrate; j++)
		printf ("%c%-4d",
			i == current_size && rates[j] == current_rate ? '*' : ' ',
			rates[j]);
	    printf ("\n");
	}
    }
d333 1
a333 1
    rotations = XRRConfigRotations(sc, &current_rotation);
d335 2
a336 39
    rotation = 1 << rot ;
    if (query) {
    	printf("Current rotation - %s\n",
	       rotation_name (current_rotation));

	printf("Current reflection - %s\n",
	       reflection_name (current_rotation));

	printf ("Rotations possible - ");
	for (i = 0; i < 4; i ++) {
	    if ((rotations >> i) & 1)  printf("%s ", direction[i]);
	}
	printf ("\n");

	printf ("Reflections possible - ");
	if (rotations & (RR_Reflect_X|RR_Reflect_Y))
	{
	    if (rotations & RR_Reflect_X) printf ("X Axis ");
	    if (rotations & RR_Reflect_Y) printf ("Y Axis");
	}
	else
	    printf ("none");
	printf ("\n");
    }

    if (verbose) { 
	printf("Setting size to %d, rotation to %s\n",  size, direction[rot]);

	printf ("Setting reflection on ");
	if (reflection)
	{
	    if (reflection & RR_Reflect_X) printf ("X Axis ");
	    if (reflection & RR_Reflect_Y) printf ("Y Axis");
	}
	else
	    printf ("neither axis");
	printf ("\n");

	if (reflection & RR_Reflect_X) printf("Setting reflection on X axis\n");
d338 60
a397 65
	if (reflection & RR_Reflect_Y) printf("Setting reflection on Y axis\n");
    }

    /* we should test configureNotify on the root window */
    XSelectInput (dpy, root, StructureNotifyMask);

    if (setit && !dryrun) XRRSelectInput (dpy, root,
			       RRScreenChangeNotifyMask);
    if (setit && !dryrun) status = XRRSetScreenConfigAndRate (dpy, sc,
						   DefaultRootWindow (dpy), 
						   (SizeID) size, (Rotation) (rotation | reflection), rate, CurrentTime);

    XRRQueryExtension(dpy, &event_base, &error_base);

    if (setit && !dryrun && status == RRSetConfigFailed) {
	printf ("Failed to change the screen configuration!\n");
	ret = 1;
    }

    if (verbose && setit && !dryrun && size != current_size) {
	if (status == RRSetConfigSuccess)
	{
	    Bool    seen_screen = False;
	    while (!seen_screen) {
		int spo;
		XNextEvent(dpy, (XEvent *) &event);

		printf ("Event received, type = %d\n", event.type);
		/* update Xlib's knowledge of the event */
		XRRUpdateConfiguration (&event);
		if (event.type == ConfigureNotify)
		    printf("Received ConfigureNotify Event!\n");

		switch (event.type - event_base) {
		case RRScreenChangeNotify:
		    sce = (XRRScreenChangeNotifyEvent *) &event;

		    printf("Got a screen change notify event!\n");
		    printf(" window = %d\n root = %d\n size_index = %d\n rotation %d\n", 
			   (int) sce->window, (int) sce->root, 
			   sce->size_index,  sce->rotation);
		    printf(" timestamp = %ld, config_timestamp = %ld\n",
			   sce->timestamp, sce->config_timestamp);
		    printf(" Rotation = %x\n", sce->rotation);
		    printf(" %d X %d pixels, %d X %d mm\n",
			   sce->width, sce->height, sce->mwidth, sce->mheight);
		    printf("Display width   %d, height   %d\n",
			   DisplayWidth(dpy, screen), DisplayHeight(dpy, screen));
		    printf("Display widthmm %d, heightmm %d\n", 
			   DisplayWidthMM(dpy, screen), DisplayHeightMM(dpy, screen));
		    spo = sce->subpixel_order;
		    if ((spo < 0) || (spo > 5))
			printf ("Unknown subpixel order, value = %d\n", spo);
		    else printf ("new Subpixel rendering model is %s\n", order[spo]);
		    seen_screen = True;
		    break;
		default:
		    if (event.type != ConfigureNotify) 
			printf("unknown event received, type = %d!\n", event.type);
		}
	    }
	}
    }
    XRRFreeScreenConfigInfo(sc);
    return(ret);
@

