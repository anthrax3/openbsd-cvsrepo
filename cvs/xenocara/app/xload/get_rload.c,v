head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.18
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_0_2:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2012.04.07.15.57.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.46.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.46.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to xload 1.1.1
@
text
@
#include <stdio.h>
#include <X11/Intrinsic.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include "xload.h"

/* Not all OS supports get_rload
   steal the STUB idea from get_load
 */
#if defined(QNX4) || defined(__CYGWIN__)
#define RLOADSTUB
#endif

#ifdef RLOADSTUB
void GetRLoadPoint(
    Widget	w,		/* unused */
    XtPointer	closure,	/* unused */
    XtPointer	call_data)	/* pointer to (double) return value */

{
  *(double *)call_data = 1.0;
}
#else  /* RLOADSTUB */

#include <protocols/rwhod.h>
#ifndef _PATH_RWHODIR
#define _PATH_RWHODIR "/var/spool/rwho"
#endif

#define WHDRSIZE        ((int)(sizeof (buf) - sizeof (buf.wd_we)))

void GetRLoadPoint(
    Widget	w,		/* unused */
    XtPointer	closure,	/* unused */
    XtPointer	call_data)	/* pointer to (double) return value */
{
  int f;
  static char *fname = NULL;
  static struct whod buf;
  int cc;

  *(double *)call_data = 0.0; /* to be on the safe side */

  if (fname == NULL) {
    if ((fname = malloc(strlen(_PATH_RWHODIR)+strlen("/whod.")+strlen(resources.remote)+1)) == NULL) {
      fprintf(stderr,"GetRLoadPoint: malloc() failed\n");
      exit(1);
    }
    strcpy(fname,_PATH_RWHODIR);
    strcat(fname,"/whod.");
    strcat(fname,resources.remote);
  }
  if ((f = open(fname, O_RDONLY, 0)) < 0)
    return;

  cc = read(f, &buf, sizeof(buf));
  close(f);
  if (cc < WHDRSIZE)
    return;

  *(double *)call_data = buf.wd_loadav[0] / 100.0;
}

#endif  /* RLOADSTUB */
@


1.1
log
@Initial revision
@
text
@a0 1
/* $XFree86: xc/programs/xload/get_rload.c,v 1.4 2002/01/07 20:38:31 dawes Exp $ */
d17 4
a20 4
void GetRLoadPoint( w, closure, call_data )
     Widget   w;              /* unused */
     XtPointer  closure;        /* unused */
     XtPointer  call_data;      /* pointer to (double) return value */
a31 8
typedef struct _XLoadResources {
  Boolean show_label;
  Boolean use_lights;
  String remote;
} XLoadResources;

extern XLoadResources resources ;

d34 4
a37 5
void GetRLoadPoint( w, closure, call_data )
     Widget   w;              /* unused */
     XtPointer  closure;        /* unused */
     XtPointer  call_data;      /* pointer to (double) return value */

@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
