head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2012.06.11.19.26.23;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.24.14.17.46;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.02.15.24.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xinput 1.6.0
@
text
@/*
 * Copyright © 2007 Peter Hutterer
 * Copyright © 2009 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "xinput.h"
#include <string.h>

#define Error(error, ...) \
{ \
    fprintf(stderr, __VA_ARGS__); \
    return error;\
}
/**
 * Create a new master device. Name must be supplied, other values are
 * optional.
 */
int
create_master(Display* dpy, int argc, char** argv, char* name, char *desc)
{
    XIAddMasterInfo c;

    if (argc == 0)
    {
        fprintf(stderr, "Usage: xinput %s %s\n", name, desc);
        return EXIT_FAILURE;
    }

    c.type = XIAddMaster;
    c.name = argv[0];
    c.send_core = (argc >= 2) ? atoi(argv[1]) : 1;
    c.enable = (argc >= 3) ? atoi(argv[2]) : 1;

    return XIChangeHierarchy(dpy, (XIAnyHierarchyChangeInfo*)&c, 1);
}

/**
 * Remove a master device.
 * By default, all attached devices are set to Floating, unless parameters are
 * given.
 */
int
remove_master(Display* dpy, int argc, char** argv, char *name, char *desc)
{
    XIRemoveMasterInfo r;
    XIDeviceInfo *info;
    int ret;

    if (argc == 0)
    {
        fprintf(stderr, "usage: xinput %s %s\n", name, desc);
        return EXIT_FAILURE;
    }

    info = xi2_find_device_info(dpy, argv[0]);

    if (!info) {
	fprintf(stderr, "unable to find device '%s'\n", argv[0]);
	return EXIT_FAILURE;
    }

    r.type = XIRemoveMaster;
    r.deviceid = info->deviceid;
    if (argc >= 2)
    {
        if (!strcmp(argv[1], "Floating"))
            r.return_mode = XIFloating;
        else if (!strcmp(argv[1], "AttachToMaster"))
            r.return_mode = XIAttachToMaster;
        else
            Error(BadValue, "Invalid return_mode.\n");
    } else
        r.return_mode = XIFloating;

    if (r.return_mode == XIAttachToMaster)
    {
        r.return_pointer = 0;
        if (argc >= 3) {
            info = xi2_find_device_info(dpy, argv[2]);
            if (!info) {
                fprintf(stderr, "unable to find device '%s'\n", argv[2]);
                return EXIT_FAILURE;
            }

            r.return_pointer = info->deviceid;
        }

        r.return_keyboard = 0;
        if (argc >= 4) {
            info = xi2_find_device_info(dpy, argv[3]);
            if (!info) {
                fprintf(stderr, "unable to find device '%s'\n", argv[3]);
                return EXIT_FAILURE;
            }

            r.return_keyboard = info->deviceid;
        }

        if (!r.return_pointer || !r.return_keyboard) {
            int i, ndevices;
            info = XIQueryDevice(dpy, XIAllMasterDevices, &ndevices);
            for(i = 0; i < ndevices; i++) {
                if (info[i].use == XIMasterPointer && !r.return_pointer)
                    r.return_pointer = info[i].deviceid;
                if (info[i].use == XIMasterKeyboard && !r.return_keyboard)
                    r.return_keyboard = info[i].deviceid;
                if (r.return_pointer && r.return_keyboard)
                    break;
            }

            XIFreeDeviceInfo(info);
        }
    }

    ret = XIChangeHierarchy(dpy, (XIAnyHierarchyChangeInfo*)&r, 1);
    return ret;
}

/**
 * Swap a device from one master to another.
 */
int
change_attachment(Display* dpy, int argc, char** argv, char *name, char* desc)
{
    XIDeviceInfo *sd_info, *md_info;
    XIAttachSlaveInfo c;
    int ret;

    if (argc < 2)
    {
        fprintf(stderr, "usage: xinput %s %s\n", name, desc);
        return EXIT_FAILURE;
    }

    sd_info = xi2_find_device_info(dpy, argv[0]);
    md_info= xi2_find_device_info(dpy, argv[1]);

    if (!sd_info) {
	fprintf(stderr, "unable to find device '%s'\n", argv[0]);
	return EXIT_FAILURE;
    }

    if (!md_info) {
	fprintf(stderr, "unable to find device '%s'\n", argv[1]);
	return EXIT_FAILURE;
    }

    c.type = XIAttachSlave;
    c.deviceid = sd_info->deviceid;
    c.new_master = md_info->deviceid;

    ret = XIChangeHierarchy(dpy, (XIAnyHierarchyChangeInfo*)&c, 1);
    return ret;
}

/**
 * Set a device floating.
 */
int
float_device(Display* dpy, int argc, char** argv, char* name, char* desc)
{
    XIDeviceInfo *info;
    XIDetachSlaveInfo c;
    int ret;

    if (argc < 1)
    {
        fprintf(stderr, "usage: xinput %s %s\n", name, desc);
        return EXIT_FAILURE;
    }

    info = xi2_find_device_info(dpy, argv[0]);

    if (!info) {
	fprintf(stderr, "unable to find device '%s'\n", argv[0]);
	return EXIT_FAILURE;
    }

    c.type = XIDetachSlave;
    c.deviceid = info->deviceid;

    ret = XIChangeHierarchy(dpy, (XIAnyHierarchyChangeInfo*)&c, 1);
    return ret;
}


@


1.2
log
@Udate to xinput version 1.5.0
@
text
@d2 2
a3 1
 * Copyright 2007 Peter Hutterer <peter@@cs.unisa.edu.au>
d5 6
a10 5
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation.
d12 3
a14 15
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the author shall
 * not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization
 * from the author.
d16 7
d77 1
a77 1
	fprintf(stderr, "unable to find device %s\n", argv[0]);
d100 1
a100 1
                fprintf(stderr, "unable to find device %s\n", argv[2]);
d111 1
a111 1
                fprintf(stderr, "unable to find device %s\n", argv[3]);
d158 1
a158 1
	fprintf(stderr, "unable to find device %s\n", argv[0]);
d163 1
a163 1
	fprintf(stderr, "unable to find device %s\n", argv[1]);
d194 1
a194 1
	fprintf(stderr, "unable to find device %s\n", argv[0]);
@


1.1
log
@update to xinput 1.4.1
@
text
@d43 1
a43 1
    XCreateMasterInfo c;
d51 1
a51 1
    c.type = CH_CreateMasterDevice;
d53 1
a53 1
    c.sendCore = (argc >= 2) ? atoi(argv[1]) : 1;
d56 1
a56 1
    return XChangeDeviceHierarchy(dpy, (XAnyHierarchyChangeInfo*)&c, 1);
d67 2
a68 3
    XDeviceInfo *info;
    XRemoveMasterInfo r;
    XDevice* master = NULL, *ptr = NULL, *keybd = NULL;
d77 1
a77 1
    info = find_device_info(dpy, argv[0], False);
d84 2
a85 6
    master = XOpenDevice(dpy, info->id);
    if (!master)
        Error(BadValue, "Unable to open device %s.\n", argv[0]);

    r.type = CH_RemoveMasterDevice;
    r.device = master;
d89 1
a89 1
            r.returnMode = Floating;
d91 1
a91 1
            r.returnMode = AttachToMaster;
d93 1
a93 1
            Error(BadValue, "Invalid returnMode.\n");
d95 1
a95 1
        r.returnMode = Floating;
d97 1
a97 1
    if (r.returnMode == AttachToMaster)
d99 39
a137 13
        ptr = XOpenDevice(dpy, atoi(argv[2]));
        keybd = XOpenDevice(dpy, atoi(argv[3]));
        if (!ptr || !keybd)
            Error(BadValue, "Invalid fallback master.\n");
        r.returnPointer = ptr;
        r.returnKeyboard = keybd;
    }

    ret = XChangeDeviceHierarchy(dpy, (XAnyHierarchyChangeInfo*)&r, 1);
    if (ptr)
        XCloseDevice(dpy, ptr);
    if (keybd)
        XCloseDevice(dpy, keybd);
d147 2
a148 3
    XDeviceInfo *info_sd, *info_md;
    XChangeAttachmentInfo c;
    XDevice *slave, *master;
d157 2
a158 2
    info_sd = find_device_info(dpy, argv[0], True);
    info_md = find_device_info(dpy, argv[1], False);
d160 1
a160 1
    if (!info_sd) {
d165 1
a165 1
    if (!info_md) {
d170 3
a172 2
    slave = XOpenDevice(dpy, info_sd->id);
    master = XOpenDevice(dpy, info_md->id);
d174 1
a174 14
    if (!slave)
        Error(BadValue, "Invalid slave device given %d\n", atoi(argv[0]));

    if (!master)
        Error(BadValue, "Invalid master device given %d\n", atoi(argv[1]));

    c.type = CH_ChangeAttachment;
    c.changeMode = AttachToMaster;
    c.device = slave;
    c.newMaster = master;

    ret = XChangeDeviceHierarchy(dpy, (XAnyHierarchyChangeInfo*)&c, 1);
    XCloseDevice(dpy, slave);
    XCloseDevice(dpy, master);
d184 2
a185 3
    XDeviceInfo *info;
    XChangeAttachmentInfo c;
    XDevice *slave;
d194 1
a194 1
    info = find_device_info(dpy, argv[0], True);
d201 2
a202 8
    slave = XOpenDevice(dpy, info->id);

    if (!slave)
        return BadValue;

    c.type = CH_ChangeAttachment;
    c.changeMode = Floating;
    c.device = slave;
d204 1
a204 2
    ret = XChangeDeviceHierarchy(dpy, (XAnyHierarchyChangeInfo*)&c, 1);
    XCloseDevice(dpy, slave);
@

