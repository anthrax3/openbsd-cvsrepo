head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.18
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.16
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.14
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.05.10.10.14.50;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	Z5KfmJFfPWW2hhCy;

1.2
date	2011.01.11.20.52.08;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.44.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.44.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xkbevd 1.1.4
@
text
@/************************************************************
 Copyright (c) 1995 by Silicon Graphics Computer Systems, Inc.

 Permission to use, copy, modify, and distribute this
 software and its documentation for any purpose and without
 fee is hereby granted, provided that the above copyright
 notice appear in all copies and that both that copyright
 notice and this permission notice appear in supporting
 documentation, and that the name of Silicon Graphics not be
 used in advertising or publicity pertaining to distribution
 of the software without specific prior written permission.
 Silicon Graphics makes no representation about the suitability
 of this software for any purpose. It is provided "as is"
 without any express or implied warranty.

 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
 THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ********************************************************/

#include "xkbevd.h"

/***====================================================================***/

static char *
AppendBellNotifyArg(char *sink, char *arg, XkbEvent *ev)
{
    if (uStringEqual(arg, "device") || uStringEqual(arg, "D"))
        sprintf(sink, "%d", ev->bell.device);
    else if (uStringEqual(arg, "volume") || uStringEqual(arg, "v"))
        sprintf(sink, "%d", ev->bell.percent);
    else if (uStringEqual(arg, "pitch") || uStringEqual(arg, "p"))
        sprintf(sink, "%d", ev->bell.pitch);
    else if (uStringEqual(arg, "duration") || uStringEqual(arg, "d"))
        sprintf(sink, "%d", ev->bell.duration);
    else if (uStringEqual(arg, "class") || uStringEqual(arg, "c"))
        sprintf(sink, "%d", ev->bell.bell_class);
    else if (uStringEqual(arg, "id") || uStringEqual(arg, "i"))
        sprintf(sink, "%d", ev->bell.bell_id);
    else if (uStringEqual(arg, "window") || uStringEqual(arg, "w"))
        sprintf(sink, "0x%x", (unsigned int) ev->bell.window);
    else if (uStringEqual(arg, "name") || uStringEqual(arg, "n"))
        sprintf(sink, "%s", XkbAtomText(dpy, ev->bell.name, XkbMessage));
    return sink;
}

static char *
AppendAccessXNotifyArg(char *sink, char *arg, XkbEvent *ev)
{
    if (uStringEqual(arg, "device") || uStringEqual(arg, "D"))
        sprintf(sink, "%d", ev->accessx.device);
    else if (uStringEqual(arg, "detail") || uStringEqual(arg, "d")) {
        sprintf(sink, "%s",
                XkbAccessXDetailText(ev->accessx.detail, XkbMessage));
    }
    else if (uStringEqual(arg, "keycode") || uStringEqual(arg, "key") ||
             uStringEqual(arg, "k"))
        sprintf(sink, "%d", ev->accessx.keycode);
    else if (uStringEqual(arg, "skdelay") || uStringEqual(arg, "s"))
        sprintf(sink, "%d", ev->accessx.sk_delay);
    else if (uStringEqual(arg, "bkdelay") || uStringEqual(arg, "b"))
        sprintf(sink, "%d", ev->accessx.debounce_delay);
    return sink;
}

static char *
AppendActionMessageArg(char *sink, char *arg, XkbEvent *ev)
{
    if (uStringEqual(arg, "device") || uStringEqual(arg, "D"))
        sprintf(sink, "%d", ev->message.device);
    else if (uStringEqual(arg, "message") || uStringEqual(arg, "m"))
        sprintf(sink, "%s", ev->message.message);
    else if (uStringEqual(arg, "keycode") || uStringEqual(arg, "key") ||
             uStringEqual(arg, "k"))
        sprintf(sink, "%d", ev->message.keycode);
    else if (uStringEqual(arg, "press") || uStringEqual(arg, "p"))
        sprintf(sink, "%s", (ev->message.press ? "press" : "release"));
    else if (uStringEqual(arg, "event") || uStringEqual(arg, "e"))
        sprintf(sink, "%s",
                (ev->message.key_event_follows ? "event" : "no_event"));
    return sink;
}

static char *
AppendEventArg(char *sink, char *arg, XkbEvent *ev)
{
    switch (ev->any.xkb_type) {
    case XkbBellNotify:
        sink = AppendBellNotifyArg(sink, arg, ev);
        break;
    case XkbAccessXNotify:
        sink = AppendAccessXNotifyArg(sink, arg, ev);
        break;
    case XkbActionMessage:
        sink = AppendActionMessageArg(sink, arg, ev);
        break;
    default:
        return sink;
    }
    sink += strlen(sink);
    return sink;
}

static void
CopyEventArg(char **sink_inout, char **source_inout, XkbEvent *ev)
{
    char buf[1024];
    char *source, *sink;
    char *arg;

    arg = buf;
    source = *source_inout;
    sink = *sink_inout;
    if (*source == '$') {
        *sink++ = '$';
        source++;
        *sink++ = '\0';
        *sink_inout = sink;
        *source_inout = source;
        return;
    }
    else if (*source == '(') {
        source++;
        while ((*source != ')') && (*source != '\0')) {
            *arg++ = *source++;
        }
        if (*source == '\0') {
            *sink++ = '$';
            *sink++ = '\0';
            *sink_inout = sink;
            return;
        }
        source++;
        *arg++ = '\0';
        arg = buf;
    }
    else {
        arg[0] = *source++;
        arg[1] = '\0';
    }
    sink = AppendEventArg(sink, arg, ev);
    *sink_inout = sink;
    *source_inout = source;
    return;
}

char *
SubstituteEventArgs(char *cmd, XkbEvent *ev)
{
    static char buf[1024];
    char *source, *sink;

    if (index(cmd, '$') == NULL)
        return cmd;
    buf[0] = '\0';
    sink = buf;
    source = cmd;
    while (*source != '\0') {
        if (*source == '$') {
            source++;
            CopyEventArg(&sink, &source, ev);
        }
        *sink++ = *source++;
    }
    return buf;
}
@


1.2
log
@Update to xkbevd 1.1.2. No functional change.
ok matthieu@@
@
text
@a26 1
#define	DEBUG_VAR evargsDebug
d34 16
a49 16
    if (uStringEqual(arg,"device")||uStringEqual(arg,"D"))
	sprintf(sink,"%d",ev->bell.device);
    else if (uStringEqual(arg,"volume")||uStringEqual(arg,"v"))
	sprintf(sink,"%d",ev->bell.percent);
    else if (uStringEqual(arg,"pitch")||uStringEqual(arg,"p"))
	sprintf(sink,"%d",ev->bell.pitch);
    else if (uStringEqual(arg,"duration")||uStringEqual(arg,"d"))
	sprintf(sink,"%d",ev->bell.duration);
    else if (uStringEqual(arg,"class")||uStringEqual(arg,"c"))
	sprintf(sink,"%d",ev->bell.bell_class);
    else if (uStringEqual(arg,"id")||uStringEqual(arg,"i"))
	sprintf(sink,"%d",ev->bell.bell_id);
    else if (uStringEqual(arg,"window")||uStringEqual(arg,"w"))
	sprintf(sink,"0x%x",(unsigned int)ev->bell.window);
    else if (uStringEqual(arg,"name")||uStringEqual(arg,"n"))
	sprintf(sink,"%s",XkbAtomText(dpy,ev->bell.name,XkbMessage));
d56 13
a68 12
    if (uStringEqual(arg,"device")||uStringEqual(arg,"D"))
	sprintf(sink,"%d",ev->accessx.device);
    else if (uStringEqual(arg,"detail")||uStringEqual(arg,"d")) {
	sprintf(sink,"%s",XkbAccessXDetailText(ev->accessx.detail,XkbMessage));
    }
    else if (uStringEqual(arg,"keycode")||uStringEqual(arg,"key")||
						  uStringEqual(arg,"k"))
	sprintf(sink,"%d",ev->accessx.keycode);
    else if (uStringEqual(arg,"skdelay")||uStringEqual(arg,"s"))
	sprintf(sink,"%d",ev->accessx.sk_delay);
    else if (uStringEqual(arg,"bkdelay")||uStringEqual(arg,"b"))
	sprintf(sink,"%d",ev->accessx.debounce_delay);
d75 12
a86 11
    if (uStringEqual(arg,"device")||uStringEqual(arg,"D"))
	sprintf(sink,"%d",ev->message.device);
    else if (uStringEqual(arg,"message")||uStringEqual(arg,"m"))
	sprintf(sink,"%s",ev->message.message);
    else if (uStringEqual(arg,"keycode")||uStringEqual(arg,"key")||
						  uStringEqual(arg,"k"))
	sprintf(sink,"%d",ev->message.keycode);
    else if (uStringEqual(arg,"press")||uStringEqual(arg,"p"))
	sprintf(sink,"%s",(ev->message.press?"press":"release"));
    else if (uStringEqual(arg,"event")||uStringEqual(arg,"e"))
	sprintf(sink,"%s",(ev->message.key_event_follows?"event":"no_event"));
d94 11
a104 11
	case XkbBellNotify:
	    sink= AppendBellNotifyArg(sink,arg,ev);
	    break;
	case XkbAccessXNotify:
	    sink= AppendAccessXNotifyArg(sink,arg,ev);
	    break;
	case XkbActionMessage:
	    sink= AppendActionMessageArg(sink,arg,ev);
	    break;
	default:
	    return sink;
d106 1
a106 1
    sink+= strlen(sink);
d113 29
a141 29
char buf[1024];
char *source,*sink;
char *arg;

    arg= buf;
    source= *source_inout;
    sink= *sink_inout;
    if (*source=='$') {
	*sink++= '$';
	source++;
	*sink++= '\0';
	*sink_inout= sink;
	*source_inout= source;
	return;
    }
    else if (*source=='(') {
	source++;
	while ((*source!=')')&&(*source!='\0')) {
	    *arg++= *source++;
	}
	if (*source=='\0') {
	    *sink++= '$';
	    *sink++= '\0';
	    *sink_inout= sink;
	    return;
	}
	source++;
	*arg++= '\0';
	arg= buf;
d144 2
a145 2
	arg[0]= *source++;
	arg[1]= '\0';
d147 3
a149 3
    sink= AppendEventArg(sink,arg,ev);
    *sink_inout= sink;
    *source_inout= source;
d156 2
a157 2
static char buf[1024];
char *source,*sink;
d159 11
a169 11
    if (index(cmd,'$')==NULL)
	return cmd;
    buf[0]= '\0';
    sink= buf;
    source= cmd;
    while (*source!='\0') {
	if (*source=='$') {
	    source++;
	    CopyEventArg(&sink,&source,ev);
	}
	*sink++= *source++;
a172 1

@


1.1
log
@Initial revision
@
text
@a0 1
/* $Xorg: evargs.c,v 1.3 2000/08/17 19:54:49 cpqbld Exp $ */
d9 2
a10 2
 documentation, and that the name of Silicon Graphics not be 
 used in advertising or publicity pertaining to distribution 
d12 1
a12 1
 Silicon Graphics makes no representation about the suitability 
d15 3
a17 3
 
 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
a25 1
/* $XFree86: xc/programs/xkbevd/evargs.c,v 1.3 1999/03/02 11:49:59 dawes Exp $ */
d77 1
a77 1
    else if (uStringEqual(arg,"message")||uStringEqual(arg,"m")) 
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
