head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.05.10.10.14.50;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	Z5KfmJFfPWW2hhCy;

1.4
date	2012.04.07.16.16.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.11.20.52.08;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.28.13.01.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.44.27;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.44.27;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xkbevd 1.1.4
@
text
@
  /*\
   *
   *                          COPYRIGHT 1990
   *                    DIGITAL EQUIPMENT CORPORATION
   *                       MAYNARD, MASSACHUSETTS
   *                        ALL RIGHTS RESERVED.
   *
   * THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE AND
   * SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
   * DIGITAL MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE
   * FOR ANY PURPOSE.  IT IS SUPPLIED "AS IS" WITHOUT EXPRESS OR IMPLIED
   * WARRANTY.
   *
   * IF THE SOFTWARE IS MODIFIED IN A MANNER CREATING DERIVATIVE COPYRIGHT
   * RIGHTS, APPROPRIATE LEGENDS MAY BE PLACED ON THE DERIVATIVE WORK IN
   * ADDITION TO THAT SET FORTH ABOVE.
   *
   * Permission to use, copy, modify, and distribute this software and its
   * documentation for any purpose and without fee is hereby granted, provided
   * that the above copyright notice appear in all copies and that both that
   * copyright notice and this permission notice appear in supporting
   * documentation, and that the name of Digital Equipment Corporation not be
   * used in advertising or publicity pertaining to distribution of the
   * software without specific, written prior permission.
  \*/

#include 	"utils.h"
#include	<ctype.h>
#include	<stdlib.h>

/***====================================================================***/

static FILE *errorFile = NULL;

Boolean
uSetErrorFile(const char *name)
{
    if ((errorFile != NULL) && (errorFile != stderr)) {
        fprintf(errorFile, "switching to %s\n", name ? name : "stderr");
        fclose(errorFile);
    }
    if (name != NullString)
        errorFile = fopen(name, "w");
    else
        errorFile = stderr;
    if (errorFile == NULL) {
        errorFile = stderr;
        return (False);
    }
    return (True);
}

void
uInformation(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uAction(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "                  ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uWarning(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Warning:          ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Error:            ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uInternalError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Internal error:   ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

#ifndef HAVE_STRCASECMP
int
uStrCaseCmp(const char *str1, const char *str2)
{
    char buf1[512], buf2[512];

    char c, *s;

    register int n;

    for (n = 0, s = buf1; (c = *str1++); n++) {
        if (isupper(c))
            c = tolower(c);
        if (n > 510)
            break;
        *s++ = c;
    }
    *s = '\0';
    for (n = 0, s = buf2; (c = *str2++); n++) {
        if (isupper(c))
            c = tolower(c);
        if (n > 510)
            break;
        *s++ = c;
    }
    *s = '\0';
    return (strcmp(buf1, buf2));
}
#endif
@


1.4
log
@Update to xkbevd 1.1.3
@
text
@d4 4
a7 4
   *		              COPYRIGHT 1990
   *		        DIGITAL EQUIPMENT CORPORATION
   *		           MAYNARD, MASSACHUSETTS
   *			    ALL RIGHTS RESERVED.
a27 1
#define DEBUG_VAR_LOCAL
a31 107
unsigned int DEBUG_VAR;

/***====================================================================***/
/***                  FUNCTION ENTRY TRACKING                           ***/
/***====================================================================***/

static	FILE	*entryFile=	NULL;
static	int	 uEntryLevel;

Boolean
uSetEntryFile(const char *name)
{
    if ((entryFile!=NULL)&&(entryFile!=stderr)) {
	fprintf(entryFile,"switching to %s\n",name?name:"stderr");
	fclose(entryFile);
    }
    if (name!=NullString)	entryFile=	fopen(name,"w");
    else			entryFile=	stderr;
    if (entryFile==NULL) {
	entryFile=	stderr;
	return(False);
    }
    return(True);
}

void
uEntry(int l, const char *s,...)
{
int	i;
va_list ap;

    va_start(ap, s);
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
    }
    vfprintf(entryFile,s,ap);
    uEntryLevel+= l;
    va_end(ap);
    return;
}

void
uExit(int l, const char *rtVal)
{
int	i;

    uEntryLevel-= l;
    if (uEntryLevel<0)	uEntryLevel=	0;
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
    }
    fprintf(entryFile,"---> 0x%p\n",rtVal);
    return;
}

/***====================================================================***/
/***			PRINT FUNCTIONS					***/
/***====================================================================***/

	FILE	*uDebugFile=		NULL;
	int	 uDebugIndentLevel=	0;
	int	 uDebugIndentSize=	4;

Boolean
uSetDebugFile(const char *name)
{
    if ((uDebugFile!=NULL)&&(uDebugFile!=stderr)) {
	fprintf(uDebugFile,"switching to %s\n",name?name:"stderr");
	fclose(uDebugFile);
    }
    if (name!=NullString)	uDebugFile=	fopen(name,"w");
    else			uDebugFile=	stderr;
    if (uDebugFile==NULL) {
	uDebugFile=	stderr;
	return(False);
    }
    return(True);
}

void
uDebug(const char *s,...)
{
int	i;
va_list ap;

    va_start(ap, s);
    for (i=(uDebugIndentLevel*uDebugIndentSize);i>0;i--) {
	putc(' ',uDebugFile);
    }
    vfprintf(uDebugFile,s,ap);
    fflush(uDebugFile);
    va_end(ap);
    return;
}

void
uDebugNOI(const char *s,...)
{
va_list ap;

    va_start(ap, s);
    vfprintf(uDebugFile,s,ap);
    fflush(uDebugFile);
    va_end(ap);
    return;
}

d34 1
a34 1
static	FILE	*errorFile=	NULL;
d39 3
a41 3
    if ((errorFile!=NULL)&&(errorFile!=stderr)) {
	fprintf(errorFile,"switching to %s\n",name?name:"stderr");
	fclose(errorFile);
d43 7
a49 5
    if (name!=NullString)	errorFile=	fopen(name,"w");
    else			errorFile=	stderr;
    if (errorFile==NULL) {
	errorFile=	stderr;
	return(False);
d51 1
a51 1
    return(True);
d55 1
a55 1
uInformation(const char *s,...)
d60 1
a60 1
    vfprintf(errorFile,s,ap);
d69 1
a69 1
uAction(const char *s,...)
d74 2
a75 2
    fprintf(errorFile,"                  ");
    vfprintf(errorFile,s,ap);
d84 1
a84 1
uWarning(const char *s,...)
d89 2
a90 2
    fprintf(errorFile,"Warning:          ");
    vfprintf(errorFile,s,ap);
d99 1
a99 1
uError(const char *s,...)
d104 2
a105 2
    fprintf(errorFile,"Error:            ");
    vfprintf(errorFile,s,ap);
d114 1
a114 1
uInternalError(const char *s,...)
d119 2
a120 2
    fprintf(errorFile,"Internal error:   ");
    vfprintf(errorFile,s,ap);
d132 2
a133 1
    char buf1[512],buf2[512];
d135 1
d138 6
a143 6
    for (n=0, s = buf1; (c = *str1++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
d146 6
a151 6
    for (n=0, s = buf2; (c = *str2++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
a155 18

int
uStrCasePrefix(const char *prefix, const char *str)
{
    char c1;
    char c2;
    while (((c1=*prefix)!='\0')&&((c2=*str)!='\0')) {
	if (isupper(c1))	c1= tolower(c1);
	if (isupper(c2))	c2= tolower(c2);
	if (c1!=c2)
	    return 0;
	prefix++; str++;
    }
    if (c1!='\0')
	return 0;
    return 1;
}

@


1.3
log
@Update to xkbevd 1.1.2. No functional change.
ok matthieu@@
@
text
@a35 54

Opaque
uAlloc(unsigned size)
{
    return((Opaque)malloc(size));
}

/***====================================================================***/

Opaque
uCalloc(unsigned n, unsigned size)
{
    return((Opaque)calloc(n,size));
}

/***====================================================================***/

Opaque
uRealloc(Opaque old, unsigned newSize)
{
    if (old==NULL)
	 return((Opaque)malloc(newSize));
    else return((Opaque)realloc((char *)old,newSize));
}

/***====================================================================***/

Opaque
uRecalloc(Opaque old, unsigned nOld, unsigned nNew, unsigned itemSize)
{
char *rtrn;

    if (old==NULL)
	 rtrn= (char *)calloc(nNew,itemSize);
    else {
	rtrn= (char *)realloc((char *)old,nNew*itemSize);
   	if ((rtrn)&&(nNew>nOld)) {
	    bzero(&rtrn[nOld*itemSize],(nNew-nOld)*itemSize);
	}
    }
    return (Opaque)rtrn;
}

/***====================================================================***/

void
uFree(Opaque ptr)
{
    if (ptr!=(Opaque)NULL)
	free((char *)ptr);
    return;
}

/***====================================================================***/
a219 17
uFatalError(const char *s,...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile,"Fatal Error:      ");
    vfprintf(errorFile,s,ap);
    fprintf(errorFile,"                  Exiting\n");
    fflush(errorFile);
    va_end(ap);
    exit(1);
    /* NOTREACHED */
}

/***====================================================================***/

void
a232 14

#ifndef HAVE_STRDUP
char *
uStringDup(const char *str)
{
char *rtrn;

    if (str==NULL)
	return NULL;
    rtrn= (char *)uAlloc(strlen(str)+1);
    strcpy(rtrn,str);
    return rtrn;
}
#endif
@


1.2
log
@update to xkbevd 1.1.0.
@
text
@a2 1
   * $XFree86: xc/programs/xkbevd/utils.c,v 3.5 2001/07/25 15:05:25 dawes Exp $
d11 2
a12 2
   * DIGITAL MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE 
   * FOR ANY PURPOSE.  IT IS SUPPLIED "AS IS" WITHOUT EXPRESS OR IMPLIED 
d24 1
a24 1
   * used in advertising or publicity pertaining to distribution of the 
a26 1
/* $Xorg: utils.c,v 1.5 2000/08/17 19:54:49 cpqbld Exp $ */
d97 1
a97 1
uSetEntryFile(char *name)
d113 1
a113 1
uEntry(int l, char *s,...)
d129 1
a129 1
uExit(int l, char *rtVal)
d151 1
a151 1
uSetDebugFile(char *name)
d167 1
a167 1
uDebug(char *s,...)
d183 1
a183 1
uDebugNOI(char *s,...)
d199 1
a199 1
uSetErrorFile(char *name)
d215 1
a215 1
uInformation(char *s,...)
d229 1
a229 1
uAction(char *s,...)
d244 1
a244 1
uWarning(char *s,...)
d259 1
a259 1
uError(char *s,...)
d274 1
a274 1
uFatalError(char *s,...)
d291 1
a291 1
uInternalError(char *s,...)
d307 1
a307 1
uStringDup(char *str)
d321 1
a321 1
uStrCaseCmp(char *str1, char *str2)
d347 1
a347 1
uStrCasePrefix(char *prefix, char *str)
@


1.1
log
@Initial revision
@
text
@d35 2
d40 1
a40 2
uAlloc(size)
    unsigned	size;
d48 1
a48 3
uCalloc(n,size)
    unsigned	n;
    unsigned	size;
d56 1
a56 3
uRealloc(old,newSize)
    Opaque	old;
    unsigned	newSize;
d66 1
a66 5
uRecalloc(old,nOld,nNew,itemSize)
    Opaque	old;
    unsigned	nOld;
    unsigned	nNew;
    unsigned	itemSize;
d84 1
a84 2
uFree(ptr)
    Opaque ptr;
d96 1
a96 1
	int	 uEntryLevel;
d99 1
a99 2
uSetEntryFile(name)
    char *name;
d131 1
a131 3
uExit(l,rtVal)
    int		l;
    char *	rtVal;
d153 1
a153 2
uSetDebugFile(name)
    char *name;
d309 1
a309 2
uStringDup(str)
    char *str;
d323 1
a323 2
uStrCaseCmp(str1, str2)
    char *str1, *str2;
d349 1
a349 2
uStrCasePrefix(prefix, str)
    char *prefix, *str;
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
