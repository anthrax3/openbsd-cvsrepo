head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.05.10.10.14.49;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	Z5KfmJFfPWW2hhCy;

1.4
date	2012.04.07.16.16.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.11.20.52.08;	author shadchin;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.28.13.01.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.44.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.44.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xkbevd 1.1.4
@
text
@/************************************************************
 Copyright (c) 1994 by Silicon Graphics Computer Systems, Inc.

 Permission to use, copy, modify, and distribute this
 software and its documentation for any purpose and without
 fee is hereby granted, provided that the above copyright
 notice appear in all copies and that both that copyright
 notice and this permission notice appear in supporting
 documentation, and that the name of Silicon Graphics not be
 used in advertising or publicity pertaining to distribution
 of the software without specific prior written permission.
 Silicon Graphics makes no representation about the suitability
 of this software for any purpose. It is provided "as is"
 without any express or implied warranty.

 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
 THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ********************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <X11/Xos.h>
#include <X11/X.h>
#include <X11/extensions/XKB.h>

#include "tokens.h"
#include "xkbevd.h"

FILE    *yyin = NULL;

static char scanFileBuf[1024];
char    *scanFile = scanFileBuf;
int      lineNum = 0;

int      scanInt;
char    *scanIntStr;
int      scanIntClass;

char    *scanStr = NULL;
int      scanStrLine = 0;

#define BUFSIZE 512
static int      nInBuf = 0;
static char     buf[BUFSIZE];

#ifdef DEBUG

extern unsigned debugFlags;

static char *
tokText(int tok)
{
    static char buf[32];

    switch (tok) {
    case END_OF_FILE:
        snprintf(buf, sizeof(buf), "END_OF_FILE");
        break;
    case ERROR:
        snprintf(buf, sizeof(buf), "ERROR");
        break;

    case BELL:
        snprintf(buf, sizeof(buf), "BELL");
        break;
    case ACCESSX:
        snprintf(buf, sizeof(buf), "ACCESSX");
        break;
    case MESSAGE:
        snprintf(buf, sizeof(buf), "MESSAGE");
        break;

    case NONE:
        snprintf(buf, sizeof(buf), "NONE");
        break;
    case IGNORE:
        snprintf(buf, sizeof(buf), "IGNORE");
        break;
    case ECHO:
        snprintf(buf, sizeof(buf), "ECHO");
        break;
    case PRINT_EV:
        snprintf(buf, sizeof(buf), "PRINT_EV");
        break;
    case SHELL:
        snprintf(buf, sizeof(buf), "SHELL");
        break;
    case SOUND:
        snprintf(buf, sizeof(buf), "SOUND");
        break;

    case EQUALS:
        snprintf(buf, sizeof(buf), "EQUALS");
        break;
    case PLUS:
        snprintf(buf, sizeof(buf), "PLUS");
        break;
    case MINUS:
        snprintf(buf, sizeof(buf), "MINUS");
        break;
    case DIVIDE:
        snprintf(buf, sizeof(buf), "DIVIDE");
        break;
    case TIMES:
        snprintf(buf, sizeof(buf), "TIMES");
        break;
    case OBRACE:
        snprintf(buf, sizeof(buf), "OBRACE");
        break;
    case CBRACE:
        snprintf(buf, sizeof(buf), "CBRACE");
        break;
    case OPAREN:
        snprintf(buf, sizeof(buf), "OPAREN");
        break;
    case CPAREN:
        snprintf(buf, sizeof(buf), "CPAREN");
        break;
    case OBRACKET:
        snprintf(buf, sizeof(buf), "OBRACKET");
        break;
    case CBRACKET:
        snprintf(buf, sizeof(buf), "CBRACKET");
        break;
    case DOT:
        snprintf(buf, sizeof(buf), "DOT");
        break;
    case COMMA:
        snprintf(buf, sizeof(buf), "COMMA");
        break;
    case SEMI:
        snprintf(buf, sizeof(buf), "SEMI");
        break;
    case EXCLAM:
        snprintf(buf, sizeof(buf), "EXCLAM");
        break;
    case INVERT:
        snprintf(buf, sizeof(buf), "INVERT");
        break;

    case STRING:
        snprintf(buf, sizeof(buf), "STRING (%s)", scanStr);
        break;
    case INTEGER:
        snprintf(buf, sizeof(buf), "INTEGER (0x%x)", scanInt);
        break;
    case FLOAT:
        snprintf(buf, sizeof(buf), "FLOAT (%d.%d)",
                 scanInt / XkbGeomPtsPerMM, scanInt % XkbGeomPtsPerMM);
        break;
    case IDENT:
        snprintf(buf, sizeof(buf), "IDENT (%s)", scanStr);
        break;
    case KEYNAME:
        snprintf(buf, sizeof(buf), "KEYNAME (%s)", scanStr);
        break;
    default:
        snprintf(buf, sizeof(buf), "UNKNOWN");
        break;
    }
    return buf;
}
#endif

int
setScanState(const char *file, int line)
{
    if (file != NULL)
        strncpy(scanFile, file, 1024);
    if (line >= 0)
        lineNum = line;
    return 1;
}

static int
yyGetString(void)
{
    int ch;

    nInBuf = 0;
    while (((ch = getc(yyin)) != EOF) && (ch != '"')) {
        if (ch == '\\') {
            if ((ch = getc(yyin)) != EOF) {
                if (ch == 'n')
                    ch = '\n';
                else if (ch == 't')
                    ch = '\t';
                else if (ch == 'v')
                    ch = '\v';
                else if (ch == 'b')
                    ch = '\b';
                else if (ch == 'r')
                    ch = '\r';
                else if (ch == 'f')
                    ch = '\f';
                else if (ch == 'e')
                    ch = '\033';
                else if (ch == '0') {
                    int tmp, stop;

                    ch = stop = 0;
                    if (((tmp = getc(yyin)) != EOF) && (isdigit(tmp)) &&
                        (tmp != '8') && (tmp != '9')) {
                        ch = (ch * 8) + (tmp - '0');
                    }
                    else {
                        stop = 1;
                        ungetc(tmp, yyin);
                    }
                    if ((!stop) && ((tmp = getc(yyin)) != EOF) && (isdigit(tmp))
                        && (tmp != '8') && (tmp != '9')) {
                        ch = (ch * 8) + (tmp - '0');
                    }
                    else {
                        stop = 1;
                        ungetc(tmp, yyin);
                    }
                    if ((!stop) && ((tmp = getc(yyin)) != EOF) && (isdigit(tmp))
                        && (tmp != '8') && (tmp != '9')) {
                        ch = (ch * 8) + (tmp - '0');
                    }
                    else {
                        stop = 1;
                        ungetc(tmp, yyin);
                    }
                }
            }
            else
                return ERROR;
        }

        if (nInBuf < BUFSIZE - 1)
            buf[nInBuf++] = ch;
    }
    if (ch == '"') {
        buf[nInBuf++] = '\0';
        if (scanStr)
            free(scanStr);
        scanStr = uStringDup(buf);
        scanStrLine = lineNum;
        return STRING;
    }
    return ERROR;
}

static int
yyGetKeyName(void)
{
    int ch;

    nInBuf = 0;
    while (((ch = getc(yyin)) != EOF) && (ch != '>')) {
        if (ch == '\\') {
            if ((ch = getc(yyin)) != EOF) {
                if (ch == 'n')
                    ch = '\n';
                else if (ch == 't')
                    ch = '\t';
                else if (ch == 'v')
                    ch = '\v';
                else if (ch == 'b')
                    ch = '\b';
                else if (ch == 'r')
                    ch = '\r';
                else if (ch == 'f')
                    ch = '\f';
                else if (ch == 'e')
                    ch = '\033';
                else if (ch == '0') {
                    int tmp, stop;

                    ch = stop = 0;
                    if (((tmp = getc(yyin)) != EOF) && (isdigit(tmp)) &&
                        (tmp != '8') && (tmp != '9')) {
                        ch = (ch * 8) + (tmp - '0');
                    }
                    else {
                        stop = 1;
                        ungetc(tmp, yyin);
                    }
                    if ((!stop) && ((tmp = getc(yyin)) != EOF) && (isdigit(tmp))
                        && (tmp != '8') && (tmp != '9')) {
                        ch = (ch * 8) + (tmp - '0');
                    }
                    else {
                        stop = 1;
                        ungetc(tmp, yyin);
                    }
                    if ((!stop) && ((tmp = getc(yyin)) != EOF) && (isdigit(tmp))
                        && (tmp != '8') && (tmp != '9')) {
                        ch = (ch * 8) + (tmp - '0');
                    }
                    else {
                        stop = 1;
                        ungetc(tmp, yyin);
                    }
                }
            }
            else
                return ERROR;
        }

        if (nInBuf < BUFSIZE - 1)
            buf[nInBuf++] = ch;
    }
    if ((ch == '>') && (nInBuf < 5)) {
        buf[nInBuf++] = '\0';
        if (scanStr)
            free(scanStr);
        scanStr = uStringDup(buf);
        scanStrLine = lineNum;
        return KEYNAME;
    }
    return ERROR;
}

static struct _Keyword {
    const char  *keyword;
    int         token;
} keywords[] = {
    { "bell",           BELL },
    { "accessx",        ACCESSX },
    { "message",        MESSAGE },
    { "none",           NONE },
    { "ignore",         IGNORE },
    { "echo",           ECHO },
    { "printevent",     PRINT_EV },
    { "shell",          SHELL },
    { "sound",          SOUND }
};
static int numKeywords = sizeof(keywords) / sizeof(struct _Keyword);

static int
yyGetIdent(int first)
{
    int ch, i, found;

    int rtrn = -1;

    buf[0] = first;
    nInBuf = 1;
    while (((ch = getc(yyin)) != EOF) && (isalnum(ch) || (ch == '_'))) {
        if (nInBuf < BUFSIZE - 1)
            buf[nInBuf++] = ch;
    }
    buf[nInBuf++] = '\0';
    found = 0;

    for (i = 0; (!found) && (i < numKeywords); i++) {
        if (uStrCaseCmp(buf, keywords[i].keyword) == 0) {
            rtrn = keywords[i].token;
            found = 1;
        }
    }
    if (!found) {
        if (scanStr)
            free(scanStr);
        scanStr = uStringDup(buf);
        scanStrLine = lineNum;
        rtrn = IDENT;
    }

    if ((ch != EOF) && (!isspace(ch)))
        ungetc(ch, yyin);
    else if (ch == '\n')
        lineNum++;

    return rtrn;
}

static int
yyGetNumber(int ch)
{
    int isFloat = 0;

    buf[0] = ch;
    nInBuf = 1;
    while (((ch = getc(yyin)) != EOF) &&
           (isxdigit(ch) || ((nInBuf == 1) && (ch == 'x')))) {
        buf[nInBuf++] = ch;
    }
    if (ch == '.') {
        isFloat = 1;
        buf[nInBuf++] = ch;
        while (((ch = getc(yyin)) != EOF) && (isxdigit(ch))) {
            buf[nInBuf++] = ch;
        }
    }
    buf[nInBuf++] = '\0';
    if ((ch != EOF) && (!isspace(ch)))
        ungetc(ch, yyin);

    if (isFloat) {
        float tmp;

        if (sscanf(buf, "%g", &tmp) == 1) {
            scanInt = tmp * XkbGeomPtsPerMM;
            return FLOAT;
        }
    }
    else if (sscanf(buf, "%i", &scanInt) == 1)
        return INTEGER;
    fprintf(stderr, "Malformed number %s\n", buf);
    return ERROR;
}

int
yylex(void)
{
    int ch;
    int rtrn;

    do {
        ch = getc(yyin);
        if (ch == '\n') {
            lineNum++;
        }
        else if (ch == '/') {   /* handle C++ style double-/ comments */
            int newch = getc(yyin);

            if (newch == '/') {
                do {
                    ch = getc(yyin);
                } while ((ch != '\n') && (ch != EOF));
                lineNum++;
            }
            else if (newch != EOF) {
                ungetc(newch, yyin);
            }
        }
    } while ((ch != EOF) && (isspace(ch)));
    if (ch == '=')
        rtrn = EQUALS;
    else if (ch == '+')
        rtrn = PLUS;
    else if (ch == '-')
        rtrn = MINUS;
    else if (ch == '/')
        rtrn = DIVIDE;
    else if (ch == '*')
        rtrn = TIMES;
    else if (ch == '{')
        rtrn = OBRACE;
    else if (ch == '}')
        rtrn = CBRACE;
    else if (ch == '(')
        rtrn = OPAREN;
    else if (ch == ')')
        rtrn = CPAREN;
    else if (ch == '[')
        rtrn = OBRACKET;
    else if (ch == ']')
        rtrn = CBRACKET;
    else if (ch == '.')
        rtrn = DOT;
    else if (ch == ',')
        rtrn = COMMA;
    else if (ch == ';')
        rtrn = SEMI;
    else if (ch == '!')
        rtrn = EXCLAM;
    else if (ch == '~')
        rtrn = INVERT;
    else if (ch == '"')
        rtrn = yyGetString();
    else if (ch == '<')
        rtrn = yyGetKeyName();
    else if (isalpha(ch) || (ch == '_'))
        rtrn = yyGetIdent(ch);
    else if (isdigit(ch))
        rtrn = yyGetNumber(ch);
    else if (ch == EOF)
        rtrn = END_OF_FILE;
    else {
        fprintf(stderr, "Unexpected character %c (%d) in input stream\n",
                ch, ch);
        rtrn = ERROR;
    }
#ifdef DEBUG
    if (debugFlags & 0x2)
        fprintf(stderr, "scan: %s\n", tokText(rtrn));
#endif
    return rtrn;
}
@


1.4
log
@Update to xkbevd 1.1.3
@
text
@d37 1
a37 1
FILE	*yyin = NULL;
d40 2
a41 2
char *	 scanFile= scanFileBuf;
int	 lineNum=	0;
d43 10
a52 10
int	 scanInt;
char	*scanIntStr;
int	 scanIntClass;

char	*scanStr = NULL;
int	 scanStrLine=	0;

#define	BUFSIZE	512
static	int	nInBuf = 0;
static	char	buf[BUFSIZE];
d56 1
a56 1
extern	unsigned debugFlags;
d61 1
a61 1
static char buf[32];
d64 104
a167 39
	case END_OF_FILE:	sprintf(buf, "END_OF_FILE");break;
	case ERROR:		sprintf(buf, "ERROR");	break;

	case BELL:		sprintf(buf, "BELL"); break;
	case ACCESSX:		sprintf(buf, "ACCESSX"); break;
	case MESSAGE:		sprintf(buf, "MESSAGE"); break;

	case NONE:		sprintf(buf, "NONE"); break;
	case IGNORE:		sprintf(buf, "IGNORE"); break;
	case ECHO:		sprintf(buf, "ECHO"); break;
	case PRINT_EV:		sprintf(buf, "PRINT_EV"); break;
	case SHELL:		sprintf(buf, "SHELL"); break;
	case SOUND:		sprintf(buf, "SOUND"); break;

	case EQUALS:		sprintf(buf, "EQUALS");	break;
	case PLUS:		sprintf(buf, "PLUS");	break;
	case MINUS:		sprintf(buf, "MINUS");	break;
	case DIVIDE:		sprintf(buf, "DIVIDE");	break;
	case TIMES:		sprintf(buf, "TIMES");	break;
	case OBRACE:		sprintf(buf, "OBRACE");	break;
	case CBRACE:		sprintf(buf, "CBRACE");	break;
	case OPAREN:		sprintf(buf, "OPAREN");	break;
	case CPAREN:		sprintf(buf, "CPAREN");	break;
	case OBRACKET:		sprintf(buf, "OBRACKET");break;
	case CBRACKET:		sprintf(buf, "CBRACKET");break;
	case DOT:		sprintf(buf, "DOT");	break;
	case COMMA:		sprintf(buf, "COMMA");	break;
	case SEMI:		sprintf(buf, "SEMI");	break;
	case EXCLAM:		sprintf(buf, "EXCLAM");	break;
	case INVERT:		sprintf(buf, "INVERT");	break;

	case STRING:		sprintf(buf, "STRING (%s)",scanStr);	break;
	case INTEGER:		sprintf(buf, "INTEGER (0x%x)",scanInt);	break;
	case FLOAT:		sprintf(buf, "FLOAT (%d.%d)",
					     scanInt/XkbGeomPtsPerMM,
					     scanInt%XkbGeomPtsPerMM);break;
	case IDENT:		sprintf(buf, "IDENT (%s)",scanStr);	break;
	case KEYNAME:		sprintf(buf, "KEYNAME (%s)",scanStr);	break;
	default:		sprintf(buf, "UNKNOWN");	break;
d176 4
a179 4
    if (file!=NULL)
	strncpy(scanFile,file,1024);
    if (line>=0)
	lineNum= line;
d186 1
a186 1
int ch;
d189 61
a249 52
    while ( ((ch=getc(yyin))!=EOF) && (ch!='"') ) {
	if ( ch == '\\' ) {
	    if ((ch = getc(yyin))!=EOF) {
		if ( ch=='n' )		ch = '\n';
		else if ( ch == 't' )	ch = '\t';
		else if ( ch == 'v' )	ch = '\v';
		else if ( ch == 'b' )	ch = '\b';
		else if ( ch == 'r' )	ch = '\r';
		else if ( ch == 'f' )	ch = '\f';
		else if ( ch == 'e' )	ch = '\033';
		else if ( ch == '0' ) {
		    int tmp,stop;
		    ch = stop = 0;
		    if (((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) &&
						(tmp!='8') && (tmp!='9')) {
			ch= (ch*8)+(tmp-'0');
		    }
		    else {
			stop= 1;
			ungetc(tmp,yyin);
		    }
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) &&
						(tmp!='8') && (tmp!='9')) {
			ch= (ch*8)+(tmp-'0');
		    }
		    else {
			stop= 1;
			ungetc(tmp,yyin);
		    }
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) &&
						(tmp!='8') && (tmp!='9')) {
			ch= (ch*8)+(tmp-'0');
		    }
		    else {
			stop= 1;
			ungetc(tmp,yyin);
		    }
		}
	    }
	    else return ERROR;
	}

	if ( nInBuf < BUFSIZE-1 )
	    buf[nInBuf++] = ch;
    }
    if ( ch == '"' ) {
	buf[nInBuf++] = '\0';
	if  ( scanStr )
	    free( scanStr );
	scanStr = uStringDup(buf);
	scanStrLine = lineNum;
	return STRING;
d257 1
a257 1
int ch;
d260 61
a320 52
    while ( ((ch=getc(yyin))!=EOF) && (ch!='>') ) {
	if ( ch == '\\' ) {
	    if ((ch = getc(yyin))!=EOF) {
		if ( ch=='n' )		ch = '\n';
		else if ( ch == 't' )	ch = '\t';
		else if ( ch == 'v' )	ch = '\v';
		else if ( ch == 'b' )	ch = '\b';
		else if ( ch == 'r' )	ch = '\r';
		else if ( ch == 'f' )	ch = '\f';
		else if ( ch == 'e' )	ch = '\033';
		else if ( ch == '0' ) {
		    int tmp,stop;
		    ch = stop = 0;
		    if (((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) &&
						(tmp!='8') && (tmp!='9')) {
			ch= (ch*8)+(tmp-'0');
		    }
		    else {
			stop= 1;
			ungetc(tmp,yyin);
		    }
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) &&
						(tmp!='8') && (tmp!='9')) {
			ch= (ch*8)+(tmp-'0');
		    }
		    else {
			stop= 1;
			ungetc(tmp,yyin);
		    }
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) &&
						(tmp!='8') && (tmp!='9')) {
			ch= (ch*8)+(tmp-'0');
		    }
		    else {
			stop= 1;
			ungetc(tmp,yyin);
		    }
		}
	    }
	    else return ERROR;
	}

	if ( nInBuf < BUFSIZE-1 )
	    buf[nInBuf++] = ch;
    }
    if (( ch == '>' )&&(nInBuf<5)) {
	buf[nInBuf++] = '\0';
	if  ( scanStr )
	    free( scanStr );
	scanStr = uStringDup(buf);
	scanStrLine = lineNum;
	return KEYNAME;
d326 2
a327 2
	const char	*keyword;
	int		 token;
d329 9
a337 9
    { "bell",			BELL			},
    { "accessx",		ACCESSX			},
    { "message",		MESSAGE			},
    { "none",			NONE			},
    { "ignore",			IGNORE			},
    { "echo",			ECHO			},
    { "printevent",		PRINT_EV		},
    { "shell",			SHELL			},
    { "sound",			SOUND			}
d339 1
a339 1
static int numKeywords = sizeof(keywords)/sizeof(struct _Keyword);
d344 3
a346 2
int ch,i,found;
int	rtrn = -1;
d348 5
a352 4
    buf[0] = first; nInBuf = 1;
    while ( ((ch=getc(yyin))!=EOF) && (isalnum(ch)||(ch=='_')) ) {
	if ( nInBuf < BUFSIZE - 1 )
	    buf[nInBuf++] = ch;
d355 1
a355 1
    found= 0;
d357 5
a361 5
    for (i=0;(!found)&&(i<numKeywords);i++) {
	if (uStrCaseCmp(buf,keywords[i].keyword)==0) {
	    rtrn= keywords[i].token;
	    found= 1;
	}
d364 5
a368 5
	if  ( scanStr )
	    free( scanStr );
	scanStr = uStringDup(buf);
	scanStrLine = lineNum;
	rtrn = IDENT;
d371 4
a374 4
    if ( (ch!=EOF) && (!isspace(ch)) )
	ungetc( ch, yyin );
    else if ( ch=='\n' )
	lineNum++;
d382 1
a382 1
int	isFloat= 0;
d384 16
a399 15
    buf[0]= ch;
    nInBuf= 1;
    while (((ch=getc(yyin))!=EOF)&&(isxdigit(ch)||((nInBuf==1)&&(ch=='x')))) {
	buf[nInBuf++]= ch;
    }
    if (ch=='.') {
	isFloat= 1;
	buf[nInBuf++]= ch;
	while (((ch=getc(yyin))!=EOF)&&(isxdigit(ch))) {
	    buf[nInBuf++]= ch;
	}
    }
    buf[nInBuf++]= '\0';
    if ((ch!=EOF)&&(!isspace(ch)))
	ungetc( ch, yyin );
d402 10
a411 9
	float tmp;
	if (sscanf(buf,"%g",&tmp)==1) {
	    scanInt= tmp*XkbGeomPtsPerMM;
	    return FLOAT;
	}
    }
    else if ( sscanf(buf,"%i",&scanInt)==1 )
	return INTEGER;
    fprintf(stderr,"Malformed number %s\n",buf);
d418 2
a419 2
int	ch;
int	rtrn;
d422 60
a481 38
	ch = getc(yyin);
	if ( ch == '\n' ) {
	    lineNum++;
	}
	else if ( ch=='/' ) {	/* handle C++ style double-/ comments */
	    int newch= getc(yyin);
	    if (newch=='/') {
		do {
		    ch= getc(yyin);
		} while ((ch!='\n')&&(ch!=EOF));
		lineNum++;
	    }
	    else if (newch!=EOF) {
		ungetc(newch,yyin);
	    }
	}
    } while ((ch!=EOF)&&(isspace(ch)));
    if ( ch == '=' )			rtrn = EQUALS;
    else if ( ch == '+' )		rtrn = PLUS;
    else if ( ch == '-' )		rtrn = MINUS;
    else if ( ch == '/' )		rtrn = DIVIDE;
    else if ( ch == '*' )		rtrn = TIMES;
    else if ( ch == '{' )		rtrn = OBRACE;
    else if ( ch == '}' )		rtrn = CBRACE;
    else if ( ch == '(' )		rtrn = OPAREN;
    else if ( ch == ')' )		rtrn = CPAREN;
    else if ( ch == '[' )		rtrn = OBRACKET;
    else if ( ch == ']' )		rtrn = CBRACKET;
    else if ( ch == '.' )		rtrn = DOT;
    else if ( ch == ',' )		rtrn = COMMA;
    else if ( ch == ';' )		rtrn = SEMI;
    else if ( ch == '!' )		rtrn = EXCLAM;
    else if ( ch == '~' )		rtrn = INVERT;
    else if ( ch == '"' )		rtrn = yyGetString();
    else if ( ch == '<' )		rtrn = yyGetKeyName();
    else if ( isalpha(ch) || (ch=='_')) rtrn = yyGetIdent(ch);
    else if ( isdigit(ch) )		rtrn = yyGetNumber(ch);
    else if ( ch == EOF )		rtrn = END_OF_FILE;
d483 3
a485 2
	fprintf(stderr,"Unexpected character %c (%d) in input stream\n",ch,ch);
	rtrn = ERROR;
d488 2
a489 2
    if (debugFlags&0x2)
	fprintf(stderr,"scan: %s\n",tokText(rtrn));
@


1.3
log
@Update to xkbevd 1.1.2. No functional change.
ok matthieu@@
@
text
@d109 1
a109 1
setScanState(char *file, int line)
d243 2
a244 2
	char	*keyword;
	int	 token;
@


1.2
log
@update to xkbevd 1.1.0.
@
text
@a0 1
/* $Xorg: cfgscan.c,v 1.3 2000/08/17 19:54:49 cpqbld Exp $ */
d9 2
a10 2
 documentation, and that the name of Silicon Graphics not be 
 used in advertising or publicity pertaining to distribution 
d12 1
a12 1
 Silicon Graphics makes no representation about the suitability 
d15 3
a17 3
 
 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
a25 1
/* $XFree86: xc/programs/xkbevd/cfgscan.c,v 3.6 2001/01/17 23:46:07 dawes Exp $ */
d137 1
a137 1
		    if (((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) && 
d145 1
a145 1
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) && 
d153 1
a153 1
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) && 
d166 1
a166 1
	if ( nInBuf < BUFSIZE-1 ) 
d199 1
a199 1
		    if (((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) && 
d207 1
a207 1
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) && 
d215 1
a215 1
		    if ((!stop) && ((tmp=getc(yyin))!=EOF) && (isdigit(tmp)) && 
d228 1
a228 1
	if ( nInBuf < BUFSIZE-1 ) 
d333 1
a333 1
    
@


1.1
log
@Initial revision
@
text
@d244 1
a244 1
struct _Keyword {
d258 1
a258 1
int	numKeywords = sizeof(keywords)/sizeof(struct _Keyword);
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
