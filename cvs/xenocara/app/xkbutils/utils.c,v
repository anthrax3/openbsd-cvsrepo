head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.16
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.14
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.03.09.15.13.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.24.14.25.00;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.45.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.45.43;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xkbutils 1.0.4
@
text
@
  /*\
   *
   *                          COPYRIGHT 1990
   *                    DIGITAL EQUIPMENT CORPORATION
   *                       MAYNARD, MASSACHUSETTS
   *                        ALL RIGHTS RESERVED.
   *
   * THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT NOTICE AND
   * SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
   * DIGITAL MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE 
   * FOR ANY PURPOSE.  IT IS SUPPLIED "AS IS" WITHOUT EXPRESS OR IMPLIED 
   * WARRANTY.
   *
   * IF THE SOFTWARE IS MODIFIED IN A MANNER CREATING DERIVATIVE COPYRIGHT
   * RIGHTS, APPROPRIATE LEGENDS MAY BE PLACED ON THE DERIVATIVE WORK IN
   * ADDITION TO THAT SET FORTH ABOVE.
   *
   * Permission to use, copy, modify, and distribute this software and its
   * documentation for any purpose and without fee is hereby granted, provided
   * that the above copyright notice appear in all copies and that both that
   * copyright notice and this permission notice appear in supporting
   * documentation, and that the name of Digital Equipment Corporation not be
   * used in advertising or publicity pertaining to distribution of the 
   * software without specific, written prior permission.
  \*/

#include 	"utils.h"
#include	<ctype.h>
#include	<stdlib.h>

/***====================================================================***/
/***			PRINT FUNCTIONS					***/
/***====================================================================***/

static FILE *errorFile = NULL;

Boolean
uSetErrorFile(const char *name)
{
    if ((errorFile != NULL) && (errorFile != stderr)) {
        fprintf(errorFile, "switching to %s\n", name ? name : "stderr");
        fclose(errorFile);
    }
    if (name != NullString)
        errorFile = fopen(name, "w");
    else
        errorFile = stderr;
    if (errorFile == NULL) {
        errorFile = stderr;
        return (False);
    }
    return (True);
}

void
uInformation(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uAction(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "                  ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uWarning(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Warning:          ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Error:            ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

void
uFatalError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Fatal Error:      ");
    vfprintf(errorFile, s, ap);
    fprintf(errorFile, "                  Exiting\n");
    fflush(errorFile);
    va_end(ap);
    exit(1);
    /* NOTREACHED */
}

/***====================================================================***/

void
uInternalError(const char *s, ...)
{
    va_list ap;

    va_start(ap, s);
    fprintf(errorFile, "Internal error:   ");
    vfprintf(errorFile, s, ap);
    fflush(errorFile);
    va_end(ap);
    return;
}

/***====================================================================***/

#ifndef HAVE_STRCASECMP
int
uStrCaseCmp(const char *str1, const char *str2)
{
    char buf1[512], buf2[512];
    char c, *s;

    register int n;

    for (n = 0, s = buf1; (c = *str1++); n++) {
        if (isupper(c))
            c = tolower(c);
        if (n > 510)
            break;
        *s++ = c;
    }
    *s = '\0';
    for (n = 0, s = buf2; (c = *str2++); n++) {
        if (isupper(c))
            c = tolower(c);
        if (n > 510)
            break;
        *s++ = c;
    }
    *s = '\0';
    return (strcmp(buf1, buf2));
}

int
uStrCasePrefix(const char *prefix, const char *str)
{
    char c1;
    char c2;

    while (((c1 = *prefix) != '\0') && ((c2 = *str) != '\0')) {
        if (isupper(c1))
            c1 = tolower(c1);
        if (isupper(c2))
            c2 = tolower(c2);
        if (c1 != c2)
            return 0;
        prefix++;
        str++;
    }
    if (c1 != '\0')
        return 0;
    return 1;
}

#endif
@


1.2
log
@Update to xkbutils 1.0.2
@
text
@a2 1
   * $Xorg: utils.c,v 1.6 2000/08/17 19:54:51 cpqbld Exp $
d4 4
a7 4
   *		              COPYRIGHT 1990
   *		        DIGITAL EQUIPMENT CORPORATION
   *		           MAYNARD, MASSACHUSETTS
   *			    ALL RIGHTS RESERVED.
a26 1
/* $XFree86: xc/programs/xkbutils/utils.c,v 3.4 2001/01/17 23:46:13 dawes Exp $ */
a31 109
unsigned int debugFlags;

/***====================================================================***/

Opaque
uAlloc(unsigned size)
{
    return((Opaque)malloc(size));
}

/***====================================================================***/

Opaque
uCalloc(unsigned n, unsigned size)
{
    return((Opaque)calloc(n,size));
}

/***====================================================================***/

Opaque
uRealloc(Opaque old, unsigned newSize)
{
    if (old==NULL)
	 return((Opaque)malloc(newSize));
    else return((Opaque)realloc((char *)old,newSize));
}

/***====================================================================***/

Opaque
uRecalloc(Opaque old, unsigned nOld, unsigned nNew, unsigned itemSize)
{
char *rtrn;

    if (old==NULL)
	 rtrn= (char *)calloc(nNew,itemSize);
    else {
	rtrn= (char *)realloc((char *)old,nNew*itemSize);
   	if ((rtrn)&&(nNew>nOld)) {
	    bzero(&rtrn[nOld*itemSize],(nNew-nOld)*itemSize);
	}
    }
    return (Opaque)rtrn;
}

/***====================================================================***/

void
uFree(Opaque ptr)
{
    if (ptr!=(Opaque)NULL)
	free((char *)ptr);
    return;
}

/***====================================================================***/
/***                  FUNCTION ENTRY TRACKING                           ***/
/***====================================================================***/

static	FILE	*entryFile=	NULL;
	int	 uEntryLevel;

Boolean
uSetEntryFile(char *name)
{
    if ((entryFile!=NULL)&&(entryFile!=stderr)) {
	fprintf(entryFile,"switching to %s\n",name?name:"stderr");
	fclose(entryFile);
    }
    if (name!=NullString)	entryFile=	fopen(name,"w");
    else			entryFile=	stderr;
    if (entryFile==NULL) {
	entryFile=	stderr;
	return(False);
    }
    return(True);
}

void
uEntry(int l, char *s,...)
{
int	i;
va_list ap;

    va_start(ap, s);
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
    }
    vfprintf(entryFile,s,ap);
    uEntryLevel+= l;
    va_end(ap);
    return;
}

void
uExit(int l, char *rtVal)
{
int	i;

    uEntryLevel-= l;
    if (uEntryLevel<0)	uEntryLevel=	0;
    for (i=0;i<uEntryLevel;i++) {
	putc(' ',entryFile);
    }
    fprintf(entryFile,"---> 0x%p\n",rtVal);
    return;
}

d36 1
a36 51
	FILE	*uDebugFile=		NULL;
	int	 uDebugIndentLevel=	0;
	int	 uDebugIndentSize=	4;

Boolean
uSetDebugFile(char *name)
{
    if ((uDebugFile!=NULL)&&(uDebugFile!=stderr)) {
	fprintf(uDebugFile,"switching to %s\n",name?name:"stderr");
	fclose(uDebugFile);
    }
    if (name!=NullString)	uDebugFile=	fopen(name,"w");
    else			uDebugFile=	stderr;
    if (uDebugFile==NULL) {
	uDebugFile=	stderr;
	return(False);
    }
    return(True);
}

void
uDebug(char *s,...)
{
int	i;
va_list ap;

    va_start(ap, s);
    for (i=(uDebugIndentLevel*uDebugIndentSize);i>0;i--) {
	putc(' ',uDebugFile);
    }
    vfprintf(uDebugFile,s,ap);
    fflush(uDebugFile);
    va_end(ap);
    return;
}

void
uDebugNOI(char *s,...)
{
va_list ap;

    va_start(ap, s);
    vfprintf(uDebugFile,s,ap);
    fflush(uDebugFile);
    va_end(ap);
    return;
}

/***====================================================================***/

static	FILE	*errorFile=	NULL;
d39 1
a39 1
uSetErrorFile(char *name)
d41 3
a43 3
    if ((errorFile!=NULL)&&(errorFile!=stderr)) {
	fprintf(errorFile,"switching to %s\n",name?name:"stderr");
	fclose(errorFile);
d45 7
a51 5
    if (name!=NullString)	errorFile=	fopen(name,"w");
    else			errorFile=	stderr;
    if (errorFile==NULL) {
	errorFile=	stderr;
	return(False);
d53 1
a53 1
    return(True);
d57 1
a57 1
uInformation(char *s,...)
d62 1
a62 1
    vfprintf(errorFile,s,ap);
d71 1
a71 1
uAction(char *s,...)
d76 2
a77 2
    fprintf(errorFile,"                  ");
    vfprintf(errorFile,s,ap);
d86 1
a86 1
uWarning(char *s,...)
d91 2
a92 2
    fprintf(errorFile,"Warning:          ");
    vfprintf(errorFile,s,ap);
d101 1
a101 1
uError(char *s,...)
d106 2
a107 2
    fprintf(errorFile,"Error:            ");
    vfprintf(errorFile,s,ap);
d116 1
a116 1
uFatalError(char *s,...)
d121 3
a123 3
    fprintf(errorFile,"Fatal Error:      ");
    vfprintf(errorFile,s,ap);
    fprintf(errorFile,"                  Exiting\n");
d133 1
a133 1
uInternalError(char *s,...)
d138 2
a139 2
    fprintf(errorFile,"Internal error:   ");
    vfprintf(errorFile,s,ap);
a146 14
#ifndef HAVE_STRDUP
char *
uStringDup(char *str)
{
char *rtrn;

    if (str==NULL)
	return NULL;
    rtrn= (char *)uAlloc(strlen(str)+1);
    strcpy(rtrn,str);
    return rtrn;
}
#endif

d149 1
a149 1
uStrCaseCmp(char *str1, char *str2)
d151 1
a151 1
    char buf1[512],buf2[512];
d153 1
d156 6
a161 6
    for (n=0, s = buf1; (c = *str1++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
d164 6
a169 6
    for (n=0, s = buf2; (c = *str2++); n++) {
	if (isupper(c))
	    c = tolower(c);
	if (n>510)
	    break;
	*s++ = c;
d176 1
a176 1
uStrCasePrefix(char *prefix, char *str)
d180 10
a189 6
    while (((c1=*prefix)!='\0')&&((c2=*str)!='\0')) {
	if (isupper(c1))	c1= tolower(c1);
	if (isupper(c2))	c2= tolower(c2);
	if (c1!=c2)
	    return 0;
	prefix++; str++;
d191 2
a192 2
    if (c1!='\0')
	return 0;
@


1.1
log
@Initial revision
@
text
@d34 2
d39 1
a39 2
uAlloc(size)
    unsigned	size;
d47 1
a47 3
uCalloc(n,size)
    unsigned	n;
    unsigned	size;
d55 1
a55 3
uRealloc(old,newSize)
    Opaque	old;
    unsigned	newSize;
d65 1
a65 5
uRecalloc(old,nOld,nNew,itemSize)
    Opaque	old;
    unsigned	nOld;
    unsigned	nNew;
    unsigned	itemSize;
d83 1
a83 2
uFree(ptr)
    Opaque ptr;
d98 1
a98 2
uSetEntryFile(name)
    char *name;
d130 1
a130 3
uExit(l,rtVal)
    int		l;
    char *	rtVal;
d152 1
a152 2
uSetDebugFile(name)
    char *name;
d308 1
a308 2
uStringDup(str)
    char *str;
d322 1
a322 2
uStrCaseCmp(str1, str2)
    char *str1, *str2;
d348 1
a348 2
uStrCasePrefix(prefix, str)
    char *prefix, *str;
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@
