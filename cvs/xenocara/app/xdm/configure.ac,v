head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.6
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.2
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.12
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.10
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.4
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	v1_1_6:1.1.1.3
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	v1_1_4:1.1.1.2
	v1_0_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2015.03.15.17.02.36;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	pVMOUfQA4403MDhe;

1.10
date	2012.02.08.14.31.15;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.15.20.53.45;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.28.09.33.02;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.29.22.18.35;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.19.16.54.56;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.15.15.22.59;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.05.19.37.40;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.07.17.58.02;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.15.41.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.20.32.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.20.32.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.08.05.19.00.25;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.09.15.15.13.04;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@use LDADD to link the greeter library. Makes dependencies tracking work.
@
text
@dnl  Copyright 2005 Red Hat, Inc.
dnl
dnl  Permission to use, copy, modify, distribute, and sell this software and its
dnl  documentation for any purpose is hereby granted without fee, provided that
dnl  the above copyright notice appear in all copies and that both that
dnl  copyright notice and this permission notice appear in supporting
dnl  documentation, and that the name of Red Hat not be used in
dnl  advertising or publicity pertaining to distribution of the software without
dnl  specific, written prior permission.  Red Hat makes no
dnl  representations about the suitability of this software for any purpose.  It
dnl  is provided "as is" without express or implied warranty.
dnl
dnl  RED HAT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
dnl  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
dnl  EVENT SHALL RED HAT BE LIABLE FOR ANY SPECIAL, INDIRECT OR
dnl  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
dnl  DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
dnl  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
dnl  PERFORMANCE OF THIS SOFTWARE.
dnl
dnl Process this file with autoconf to create configure.

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([xdm], [1.1.11],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], [xdm])
AC_USE_SYSTEM_EXTENSIONS
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS(config.h)

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])
AM_MAINTAINER_MODE

# Initialize libtool
AC_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

# Require X.Org macros 1.8 or later for MAN_SUBSTS set by XORG_MANPAGE_SECTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.8 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.8)
XORG_DEFAULT_OPTIONS
XORG_PROG_RAWCPP
XORG_WITH_LINT

# Checks for programs.
# Check for mktemp to prevent security issue noted in Xorg bug #5898
# See https://bugs.freedesktop.org/show_bug.cgi?id=5898 for details.
AC_PATH_PROG(MKTEMP_COMMAND, mktemp)
AM_CONDITIONAL(HAVE_MKTEMP_COMMAND, test x$MKTEMP_COMMAND != x)

#------------------------------------------------------------------------------
#			Check for system libraries
#
# AC_SEARCH_LIBS: tests using $LIBS and tests again with each listed library.
#                 pre-pends the found library to $LIBS.
#
#------------------------------------------------------------------------------
# Function getifaddrs() comes from the C library, Solaris 11 -lsocket, or
# the -lnsl name service library
AC_SEARCH_LIBS([getifaddrs], [socket nsl])

# Function getspnam() comes from the C library, System V -lsec, UnixWare 7 -lgen
# or Old Linux versions -lshadow
AC_SEARCH_LIBS([getspnam], [sec gen shadow])

# Function setproctitle() is in BSD -lutil or GNU systems -lbsd but N/A on Solaris
AC_SEARCH_LIBS([setproctitle], [util bsd])

# Function setusercontext() is in BSD -lutil but N/A on Solaris or GNU systems
AC_SEARCH_LIBS([setusercontext], [util])

# Function arc4random() is in BSD standard C or GNU systems -lbsd
AC_SEARCH_LIBS([arc4random], [bsd], [HAVE_ARC4RANDOM="yes"])
AC_SUBST(HAVE_ARC4RANDOM)
AM_CONDITIONAL(HAVE_ARC4RANDOM, test x$HAVE_ARC4RANDOM = xyes)

# Function crypt() comes from the C library or the -lcrypt data encryption library
AC_SEARCH_LIBS(crypt, crypt)

# Function dl() comes from the C library or -ldl
AC_SEARCH_LIBS([dlopen], [dl])
#------------------------------------------------------------------------------

# Checks for header files.
AC_CHECK_HEADERS([grp.h syslog.h sys/param.h])
AC_CHECK_DECL(key_setnet,
	AC_DEFINE(HAVE_DECL_KEY_SETNET,1,
	     [Define to 1 if your headers define the key_setnet() function.]),
	[],[
#include <rpc/rpc.h>
#include <rpc/key_prot.h>
])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIGNAL

# Check for system library functions
# Required system libraries have been searched for and are listed in $LIBS
AC_FUNC_FORK
AC_CHECK_FUNCS([daemon sigaction openlog asprintf setproctitle setusercontext \
                mkstemp getifaddrs getspnam arc4random])

XDM_CFLAGS="$XDM_CFLAGS"
GREETER_CFLAGS="$GREETER_CFLAGS"
CHOOSER_CFLAGS="$CHOOSER_CFLAGS"

# Find needed libraries for TCP sockets (pre-pended in $LIBS)
XTRANS_CONNECTION_FLAGS

# Sets $SECURE_RPC to "yes" or "no" using libraries found above from $LIBS
XTRANS_SECURE_RPC_FLAGS
AM_CONDITIONAL(HAS_SECURE_RPC, test x$SECURE_RPC = xyes)

# Check for pluggable authentication modules (PAM) support
AC_ARG_WITH(pam, AS_HELP_STRING([--with-pam],
	[Use PAM for authentication (default is autodetected)]),
	[USE_PAM=$withval], [USE_PAM=auto])
if test "x$USE_PAM" != "xno" ; then
    AC_SEARCH_LIBS([pam_open_session], [pam],
	[AC_CHECK_FUNC([pam_open_session],
	    [AC_DEFINE(USE_PAM,1,[Use PAM for authentication])]
	)],
	[AS_IF([test "x$USE_PAM" = "xyes"],
	    [AC_MSG_ERROR([PAM support requested, but pam_open_session not found.])]
	)]
    )
fi

# Check for Security-Enhanced Linux (SELinux) support
AC_ARG_WITH(selinux, AS_HELP_STRING([--with-selinux],
	[Add support for SELinux (default is no support)]),
	[USE_SELINUX=$withval], [USE_SELINUX=no])
if test "x$USE_SELINUX" != "xno" ; then
    AC_SEARCH_LIBS(is_selinux_enabled, [selinux],
	[AC_CHECK_FUNC([is_selinux_enabled],
	    [AC_DEFINE(USE_SELINUX,1,[Use Security-Enhanced Linux (SELinux) support])]
	)],
	[AS_IF([test "x$USE_SELINUX" = "xyes"],
	    [AC_MSG_ERROR([SELinux support requested, but is_selinux_enabled not found.])]
	)]
    )
fi

# Check whether to install systemd unit files, as suggested in daemon(7).
# When a full path is specified, this does not require systemd installed.
AC_ARG_WITH([systemdsystemunitdir], AS_HELP_STRING([--with-systemdsystemunitdir=DIR],
	[Directory for systemd service files (default from the System and Service Manager)]),,
	[with_systemdsystemunitdir=auto])
AS_IF([test "x$with_systemdsystemunitdir" = "xyes" -o "x$with_systemdsystemunitdir" = "xauto"], [
    def_systemdsystemunitdir=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)

    AS_IF([test "x$def_systemdsystemunitdir" = "x"], [
	AS_IF([test "x$with_systemdsystemunitdir" = "xyes"], [
	    AC_MSG_ERROR([systemd support requested but pkg-config unable to query systemd package])
	])
	with_systemdsystemunitdir=no
    ], [
	with_systemdsystemunitdir=$def_systemdsystemunitdir
    ])
])
AS_IF([test "x$with_systemdsystemunitdir" != "xno"], [
	AC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])
])
AM_CONDITIONAL(HAVE_SYSTEMD, [test "x$with_systemdsystemunitdir" != "xno"])

# Check whether to enable systemd startup notification.
# This requires libsystemd-daemon.
AC_ARG_WITH([systemd-daemon], AS_HELP_STRING([--with-systemd-daemon],
	[Add support for systemd startup notification (default is autodetected)]),
	[USE_SYSTEMD_DAEMON=$withval], [USE_SYSTEMD_DAEMON=auto])
AS_IF([test "x$USE_SYSTEMD_DAEMON" != "xno"], [
    PKG_CHECK_MODULES([SYSTEMD_DAEMON], [libsystemd-daemon],
	[AC_DEFINE(USE_SYSTEMD_DAEMON,1,[Use systemd startup notification])],
	[AS_IF([test "x$USE_SYSTEMD_DAEMON" = "xyes"],
	    [AC_MSG_ERROR([systemd startup notification support requested, but libsystemd-daemon not found.])]
	)]
    )
])
AM_CONDITIONAL(USE_SYSTEMD_DAEMON, [test "x$USE_SYSTEMD_DAEMON" != "xno"])

# FIXME: Find better test for which OS'es use su -m  - for now, just try to
# mirror the Imakefile setting of:
# if  defined(OpenBSDArchitecture) || defined(NetBSDArchitecture) || defined(FreeBSDArchitecture) || defined(DarwinArchitecture)


case $host_os in
    linux*|gnu*|*-gnu)
	SU="su"
        ;;
    darwin*)
	SU="su -m"
        ;;
    *bsd*|dragonfly*)
	SU="su -m"
        ;;
    solaris*|sysv4*)
	SU="su"
	;;
    *)
	SU="su"
        ;;
esac
AC_SUBST(SU)

# Define a configure option to locate a special file (/dev/random or /dev/urandom)
# that serves as a random or a pseudorandom number generator
AC_ARG_WITH(random-device, AS_HELP_STRING([--with-random-device\[=<pathname>\]],
	[Use <pathname> as a source of randomness (default is auto-detected)]),
	[USE_DEVICE="$withval"], [USE_DEVICE="auto"])
if test x$USE_DEVICE != xno ; then
    if test x$USE_DEVICE = xyes -o x$USE_DEVICE = xauto ; then
	AC_CHECK_FILE([/dev/urandom], [DEV_RANDOM=/dev/urandom],
	    [AC_CHECK_FILE([/dev/random], [DEV_RANDOM=/dev/random],
		[AS_IF([test "x$USE_DEVICE" = "xyes"],
		    [AC_MSG_ERROR([random device support requested, but no random device was found.])]
		)]
	    )]
	)
    else
	# assume the user input is a valid path to a random number generator
	DEV_RANDOM=$USE_DEVICE
    fi
    if test x$DEV_RANDOM != x ; then
	AC_DEFINE_UNQUOTED(DEV_RANDOM,"$DEV_RANDOM", [Define to device that provides random data source])
    fi
fi
AC_SUBST(DEV_RANDOM)

# FIXME: find out how to check for these things. Note that Kerberos was
# turned off everywhere but on OpenBSD.
AM_CONDITIONAL(HAS_KERBEROS_FIVE, false)

#
# Privsep
#
AC_ARG_ENABLE(privsep,
	AC_HELP_STRING([--enable-privsep],
         [Build support for X server privilege separation (default is NO)]),
	[ENABLE_PRIVSEP="$enableval"], [ENABLE_PRIVSEP="no"])
if test x$ENABLE_PRIVSEP = xyes ; then
	AC_DEFINE(X_PRIVSEP, 1, [Use X server privilege separation])
fi

#
# BSD auth
AC_ARG_ENABLE(bsdauth,
	AC_HELP_STRING([--enable-bsdauth],
	 [Build support for BSD authentification (default is NO)]),
	[ENABLE_BSDAUTH="$enableval"], [ENABLE_BSDAUTH="no"])
if test x$ENABLE_BSDAUTH = xyes ; then
	AC_DEFINE(USE_BSDAUTH, 1, [Use BSD authentification])
fi

# Figure out where everything goes in the filesystem

AC_ARG_WITH(xdmlibdir,
	AS_HELP_STRING([--with-xdmlibdir=<pathname>],
	  [specify directory for xdm scripts and modules (default=${libdir}/X11/xdm)]),
	[XDMLIBDIR="$withval"], [XDMLIBDIR="${libdir}/X11/xdm"])
AC_SUBST(XDMLIBDIR)

AC_ARG_WITH(xdmconfigdir,
	AS_HELP_STRING([--with-xdmconfigdir=<pathname>],
	  [specify directory for xdm config files (default is same as xdmlibdir)]),
	[XDMCONFIGDIR="$withval"], [XDMCONFIGDIR="${XDMLIBDIR}"])
AC_SUBST(XDMCONFIGDIR)

AC_ARG_WITH(xdmscriptdir,
	AS_HELP_STRING([--with-xdmscriptdir=<pathname>],
	  [specify directory for xdm scripts (default is same as xdmlibdir)]),
	[XDMSCRIPTDIR="$withval"], [XDMSCRIPTDIR="${XDMLIBDIR}"])
AC_SUBST(XDMSCRIPTDIR)

AC_ARG_WITH(logdir,
	AS_HELP_STRING([--with-logdir=<pathname>],
	  [specify directory for xdm log files (default=/var/log)]),
	[XDMLOGDIR="$withval"], [XDMLOGDIR="/var/log"])
AC_SUBST(XDMLOGDIR)

AC_ARG_WITH(piddir,
	AS_HELP_STRING([--with-piddir=<pathname>],
	  [specify directory for xdm pid files (default=/var/run)]),
	[XDMPIDDIR="$withval"], [XDMPIDDIR="/var/run"])
AC_SUBST(XDMPIDDIR)

AC_ARG_WITH(default-vt,
	AS_HELP_STRING([--with-default-vt=<vtname>],
	  [specify default vt to start xdm on (default=none)]),
	[DEFAULTVT="$withval"], [[DEFAULTVT=""]])
AC_SUBST(DEFAULTVT)

AC_ARG_WITH(config-type,
	AS_HELP_STRING([--with-config-type={ws|fs}],
	 [default config file type to use - workstation (ws) or fileserver (fs) (default=ws)]),
	[SERVERSTYPE="$withval"], [SERVERSTYPE="ws"])
AC_SUBST(SERVERSTYPE)

# Ideally we'd just pull out UTMP_FILE & WTMP_FILE from <utmp.h>
# but that's not easy to do in autoconf
AC_ARG_WITH(utmp_file,
	AS_HELP_STRING([--with-utmp-file=<pathname>],
	 [specify file to pass to sessreg -u for current logins]),
	[UTMP_FILE="$withval"])
if test "x$UTMP_FILE" = "xyes" ; then
	AC_MSG_ERROR([path was not specified to --with-utmp-file])
fi
if test "x$UTMP_FILE" = "x" ; then
	for UTMP_FILE in /var/adm/utmpx /var/run/utmp /var/log/utmp /var/adm/utmp /usr/adm/utmp /etc/utmp ; do
		AC_CHECK_FILE([$UTMP_FILE], [break], [UTMP_FILE=""])
	done
	if test "x$UTMP_FILE" = "x" ; then
		UTMP_FILE="/var/run/utmp"
	fi
fi
AC_MSG_CHECKING([for path to file listing current logins for sessreg])
AC_MSG_RESULT([$UTMP_FILE])
AC_SUBST(UTMP_FILE)

AC_ARG_WITH(wtmp_file,
	AS_HELP_STRING([--with-wtmp-file=<pathname>],
	 [specify file to pass to sessreg -w for login history]),
	[WTMP_FILE="$withval"])
if test "x$WTMP_FILE" = "xyes" ; then
	AC_MSG_ERROR([path was not specified to --with-wtmp-file])
fi
if test "x$WTMP_FILE" = "x" ; then
	for WTMP_FILE in /var/adm/wtmpx /var/log/wtmp /var/adm/wtmp /usr/adm/wtmp /etc/wtmp ; do
		AC_CHECK_FILE([$WTMP_FILE], [break], [WTMP_FILE=""])
	done
	if test "x$WTMP_FILE" = "x" ; then
		WTMP_FILE="/var/log/wtmp"
	fi
fi
AC_MSG_CHECKING([for path to file listing login history for sessreg])
AC_MSG_RESULT([$WTMP_FILE])
AC_SUBST(WTMP_FILE)

case $host_os in
    *sco*|*solaris*)
		SHELL_CMD="/bin/ksh"	;;
    *)		SHELL_CMD="/bin/sh"	;;
esac
AC_SUBST(SHELL_CMD)

# Checks for pkg-config packages

PKG_CHECK_MODULES(XDM, xmu x11 xau)

PKG_CHECK_EXISTS(xinerama, [
	AC_DEFINE([USE_XINERAMA], 1,
		[Define to 1 to use XINERAMA in greeter & chooser])
	PKG_CHECK_MODULES(XINERAMA, xinerama)
	CHOOSER_CFLAGS="$CHOOSER_CFLAGS $XINERAMA_CFLAGS"
	CHOOSER_LIBS="$CHOOSER_LIBS $XINERAMA_LIBS"
	GREETER_CFLAGS="$GREETER_CFLAGS $XINERAMA_CFLAGS"
	GREETER_LIBS="$GREETER_LIBS $XINERAMA_LIBS"
])

# Xft text drawing for the greeter screen
AC_ARG_WITH(xft,
	AS_HELP_STRING([--with-xft],
			[Use Xft to draw text (default is YES if installed)]),
	[USE_XFT="$withval"],
	PKG_CHECK_EXISTS(xft xrender, [USE_XFT="yes"], [USE_XFT="no"]))

if test "x$USE_XFT" = "xyes" ; then
	PKG_CHECK_MODULES(XFT, xft xrender)
	GREETER_CFLAGS="$GREETER_CFLAGS $XFT_CFLAGS"
	GREETER_LIBS="$GREETER_LIBS $XFT_LIBS"
	AC_DEFINE([USE_XFT], 1,
	    [Define to 1 to use Xft for text on greeter screen])
fi

# XPM logos for the greeter screen
AC_ARG_ENABLE(xpm-logos,
	AS_HELP_STRING([--enable-xpm-logos],
			[Display xpm logos in greeter (default is YES)]),
	[USE_XPM="$enableval"],
	PKG_CHECK_EXISTS(xpm, [USE_XPM="yes"], [USE_XPM="no"]))
if test "x$USE_XPM" = "xyes" ; then
	PKG_CHECK_MODULES(XPM, xpm)
	GREETER_CFLAGS="$GREETER_CFLAGS $XPM_CFLAGS"
	GREETER_LIBS="$GREETER_LIBS $XPM_LIBS"
	AC_DEFINE([XPM], 1,
		[Define to 1 to display XPM logos on greeter screen])
fi
AM_CONDITIONAL(USE_XPM, test "x$USE_XPM" = "xyes")

AC_ARG_WITH(color-pixmap,
	AS_HELP_STRING([--with-color-pixmap=<filename>],
		[specify xpm file to use as color logo (default=xorg.xpm)]),
	[XDM_PIXMAP="$withval"], [XDM_PIXMAP="xorg.xpm"])
AC_ARG_WITH(bw-pixmap,
	AS_HELP_STRING([--with-bw-pixmap=<filename>],
      [specify xpm file to use as black-and-white logo (default=xorg-bw.xpm)]),
	[XDM_BWPIXMAP="$withval"], [XDM_BWPIXMAP="xorg-bw.xpm"])
AC_ARG_WITH(pixmapdir,
	AS_HELP_STRING([--with-pixmapdir=<pathname>],
	[specify directory for xpm files (default=xdmlibdir/pixmaps)]),
	[XDM_PIXMAPDIR="$withval"],
	[XDM_PIXMAPDIR='${XDMLIBDIR}/pixmaps'])

AC_SUBST(XDM_PIXMAP)
AC_SUBST(XDM_BWPIXMAP)
AC_SUBST(XDM_PIXMAPDIR)

# Packages used by multiple programs

PKG_CHECK_MODULES(XDM_TOOLKIT, xaw7)
PKG_CHECK_MODULES(DMCP, xdmcp)
PKG_CHECK_MODULES(XLIB, x11)
PKG_CHECK_MODULES(AUTH, xau)

#
# Greeter
#

AC_MSG_CHECKING([if the greeter should be built as a dynamically loaded object])

AC_ARG_ENABLE(dynamic-greeter,
	AC_HELP_STRING([--enable-dynamic-greeter],
         [Build greeter as dynamically loaded shared object]),
	[DYNAMIC_GREETER="$enableval"], [DYNAMIC_GREETER="auto"])

if test "x$DYNAMIC_GREETER" = "xauto" ; then
	case $host_os in
	openbsd*)
		DYNAMIC_GREETER="no"
		;;
	    *)	DYNAMIC_GREETER="yes" ;;

	esac
fi
if test "x$DYNAMIC_GREETER" = "xno"; then
	STATIC_GREETER_CFLAGS="-DGREET_USER_STATIC"
fi

AC_MSG_RESULT([$DYNAMIC_GREETER])
AM_CONDITIONAL(DYNAMIC_GREETER, test x$DYNAMIC_GREETER = xyes)

PKG_CHECK_MODULES(XDMGREET, xt >= 1.0 x11 xext)

GREETERLIB="${XDMLIBDIR}/libXdmGreet.so"
AX_DEFINE_DIR(DEF_GREETER_LIB, GREETERLIB, [Location of Xdm Greeter library])

XDMGREET_CFLAGS="$XDMGREET_CFLAGS $XDM_TOOLKIT_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $GREETER_CFLAGS $AUTH_CFLAGS"
XDMGREET_LIBS="$XDMGREET_LIBS $XDM_TOOLKIT_LIBS $DMCP_LIBS $GREETER_LIBS"

#
#  XDM
#

XDM_CFLAGS="$XDM_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $AUTH_CFLAGS $STATIC_GREETER_CFLAGS"
XDM_LIBS="$XDM_LIBS $DMCP_LIBS"

AC_CHECK_LIB(Xdmcp, XdmcpWrap, [xdmauth="yes"], [xdmauth="no"], [$DMCP_LIBS])

AC_ARG_ENABLE(xdm-auth,
	AS_HELP_STRING([--enable-xdm-auth],
       [Support XDM-AUTHENTICATION-1 and XDM-AUTHORIZATION-1 (default: auto)]),
	[xdmauth_enable="$enableval"], [xdmauth_enable="auto"])
if test "x$xdmauth_enable" = "xyes" -a "x$xdmauth" = "xno" ; then
	AC_MSG_ERROR([XDM-AUTH support requested, but XdmcpWrap not found in libXdmcp.])
fi

AM_CONDITIONAL(HAS_XDM_AUTH, test x$xdmauth = xyes -a x$xdmauth_enable != xno)

AC_SUBST(XDM_CFLAGS)
AC_SUBST(XDM_LIBS)

#
# xdmshell
#

AC_ARG_ENABLE(xdmshell,
	AS_HELP_STRING([--enable-xdmshell],
         [Install xdmshell (default: disabled)]),
	[INSTALL_XDMSHELL="$enableval"], [INSTALL_XDMSHELL="no"])
AM_CONDITIONAL(INSTALL_XDMSHELL, test x$INSTALL_XDMSHELL = xyes)

PKG_CHECK_MODULES(XT, xt)
XDMSHELL_CFLAGS="$XDM_CFLAGS $XDM_TOOLKIT_CFLAGS $AUTH_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $XT_CFLAGS"
XDMSHELL_LIBS="$XDM_LIBS $XDM_TOOLKIT_LIBS $DMCP_LIBS"

AC_SUBST(XDMSHELL_CFLAGS)
AC_SUBST(XDMSHELL_LIBS)

#
# Chooser
#

CHOOSER_CFLAGS="$CHOOSER_CFLAGS $XDM_TOOLKIT_CFLAGS $XLIB_CFLAGS $DMCP_CFLAGS $AUTH_CFLAGS"
CHOOSER_LIBS="$CHOOSER_LIBS $XDM_TOOLKIT_LIBS $DMCP_LIBS"

AC_SUBST(CHOOSER_CFLAGS)
AC_SUBST(CHOOSER_LIBS)

# Defaults for X session - should probably be configure --with-* flags
# Currently just trying to mirror what defaults were set in Imake

# -DDEF_SERVER_LINE=":0 local $(DEF_SERVER) :0"
if test -z "$DEF_SERVER" ; then
	DEF_SERVER="${bindir}/X"
fi
if test -z "$DEF_SERVER_LINE" ; then
	DEF_SERVER_LINE=":0 local ${DEF_SERVER} :0"
fi
AX_DEFINE_DIR(DEF_SERVER_LINE, DEF_SERVER_LINE,
	[Define to default Xserver file entry for local X server])

# -DXRDB_PROGRAM="$(BINDIR)/xrdb"
AC_ARG_WITH(xrdb, AS_HELP_STRING([--with-xrdb=path],
			[Use path for xrdb (default: bindir/xrdb)]),
	    [XRDB=$withval], [XRDB=${bindir}/xrdb])
AX_DEFINE_DIR(XRDB_PROGRAM, XRDB,
	[Define to pathname for xrdb program])

# -DDEF_SESSION="$(BINDIR)/xterm -ls"
AC_ARG_WITH(default-session, AS_HELP_STRING([--with-default-session=command],
		[Use command for default session (default: bindir/xterm -ls)]),
	    [DEF_SESSION=$withval], [DEF_SESSION="${bindir}/xterm -ls"])
AX_DEFINE_DIR(DEF_SESSION, DEF_SESSION,
	[Define to default command to start X session])

# -DDEF_USER_PATH="$(DEF_USER_PATH)"
# Default values taken from DefaultUserPath setting in the
# old Imake *.cf files for each platform
if test -z "$DEF_USER_PATH" ; then
	case $host_os in
	    dragonfly*)
		DEF_USER_PATH="/bin:/usr/bin:/sbin:/usr/sbin:${bindir}:/usr/local/bin"
		;;
	    freebsd*)
		DEF_USER_PATH="/bin:/usr/bin:/sbin:/usr/sbin:${bindir}:/usr/gnu/bin:/usr/local/bin"
		;;
	    netbsd*)
		DEF_USER_PATH="/bin:/usr/bin:/usr/pkg/bin:/usr/local/bin:${bindir}"
		;;
	    openbsd*)
		DEF_USER_PATH="/bin:/usr/bin:/sbin:/usr/sbin:${bindir}:/usr/local/bin:/usr/local/sbin"
		;;
	    bsdi*)
		DEF_USER_PATH="/bin:/usr/bin:/usr/local/bin:${bindir}"
		;;
	    solaris*)
		DEF_USER_PATH="/usr/bin:${bindir}"
		;;
	    *)
		DEF_USER_PATH="/bin:/usr/bin:${bindir}:/usr/ucb"
		;;
	esac
fi
AX_DEFINE_DIR(DEF_USER_PATH, DEF_USER_PATH,
	[Define to default PATH environment variable for user sessions])

# -DDEF_SYSTEM_PATH="$(DEF_SYSTEM_PATH)"
# Default values taken from DefaultSystemPath setting in the
# old Imake *.cf files for each platform
if test -z "$DEF_SYSTEM_PATH" ; then
	case $host_os in
	    freebsd*|dragonfly*)
		DEF_SYSTEM_PATH="/bin:/usr/bin:/sbin:/usr/sbin:${bindir}"
		;;
	    netbsd*|openbsd*|bsdi*)
		DEF_SYSTEM_PATH="/sbin:/usr/sbin:/bin:/usr/bin:${bindir}"
		;;
	    solaris*)
		DEF_SYSTEM_PATH="/sbin:/usr/sbin:/usr/bin:${bindir}"
		;;
	    *)
		DEF_SYSTEM_PATH="/etc:/bin:/usr/bin:${bindir}:/usr/ucb"
		;;
	esac
fi
AX_DEFINE_DIR(DEF_SYSTEM_PATH, DEF_SYSTEM_PATH,
	[Define to default PATH environment variable for system commands])

# -DDEF_SYSTEM_SHELL="$(BOURNE_SHELL)"
if test -z "$BOURNE_SHELL" ; then
	BOURNE_SHELL=/bin/sh
fi
AX_DEFINE_DIR(DEF_SYSTEM_SHELL, BOURNE_SHELL,
	[Define to default shell])

# -DDEF_FAILSAFE_CLIENT="$(BINDIR)/xterm"

AX_DEFINE_DIR(DEF_FAILSAFE_CLIENT, bindir/xterm,
	[Define to default command to start failsafe X session])

# -DDEF_XDM_CONFIG="$(XDMDIR)/xdm-config"

AX_DEFINE_DIR(DEF_XDM_CONFIG, XDMCONFIGDIR/xdm-config,
	[Define to pathname of default xdm-config file])

# -DDEF_CHOOSER="$(CHOOSERPATH)"

AX_DEFINE_DIR(DEF_CHOOSER, XDMLIBDIR/chooser,
	[Define to pathname of where chooser binary is installed])

# -DDEF_AUTH_DIR="$(XDMDIR)"

AC_ARG_WITH(authdir,
	AS_HELP_STRING([--with-authdir=<pathname>],
	  [specify directory for X auth files (default=/var/lib/xdm)]),
	[XDMXAUTHDIR="$withval"], [XDMXAUTHDIR="/var/lib/xdm"])
AC_SUBST(XDMXAUTHDIR)

AX_DEFINE_DIR(DEF_AUTH_DIR, XDMXAUTHDIR,
	[Define to pathname where authentication cookie files should be stored])

# -DDEF_GREETER_LIB="$(XDMDIR)/libXdmGreet.so"

AX_DEFINE_DIR(DEF_GREETER_LIB, XDMLIBDIR/libXdmGreet.so,
	[Define to pathname where greeter shared object is installed (if used)])

PKG_CHECK_MODULES(APPDEFS, xt)
xt_appdefaultdir=`$PKG_CONFIG --variable=appdefaultdir xt`
AC_ARG_WITH(appdefaultdir,
	AS_HELP_STRING([--with-appdefaultdir=<pathname>],
	  [specify directory for app-defaults files (default is autodetected)]),
	[appdefaultdir="$withval"], [appdefaultdir="${xt_appdefaultdir}"])
AC_SUBST(appdefaultdir)

AC_SUBST(MKTEMP_COMMAND)

AC_CONFIG_FILES([Makefile
		app-defaults/Makefile
		chooser/Makefile
		config/Makefile
		greeter/Makefile
		include/Makefile
		man/Makefile
		xdm/Makefile
		xdmshell/Makefile])
AC_OUTPUT
@


1.10
log
@Match the default PATH with what we use in login.conf(5).
This will allow glib's gio mount to find and use mount(8).

input from and ok matthieu@@
@
text
@a439 1
	STATIC_GREETER_LIBS='${top_builddir}/greeter/libXdmGreet.la'
d458 1
a458 1
XDM_LIBS="$XDM_LIBS $DMCP_LIBS $STATIC_GREETER_LIBS"
@


1.9
log
@Update to xdm 1.1.11 plus a few patches from git master.
patched to restore static greeter.
Tested by shadchin@@, jasper@@
@
text
@d544 4
a547 1
	    openbsd*|bsdi*)
@


1.8
log
@Update to xdm 1.1.9
@
text
@d2 1
a2 1
dnl 
d12 1
a12 1
dnl 
d23 8
d32 2
a33 3
AC_PREREQ([2.60])
AC_INIT(xdm,[1.1.9],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
AM_INIT_AUTOMAKE([dist-bzip2])
d36 10
a45 14
# Require xorg-macros: XORG_DEFAULT_OPTIONS, XORG_CWARNFLAGS, XORG_CHANGELOG
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.2 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.3)

AM_CONFIG_HEADER(config.h)

AC_USE_SYSTEM_EXTENSIONS
AC_PROG_CC
AM_PROG_CC_C_O
AC_C_INLINE
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_INSTALL

a46 1
XORG_DEFAULT_OPTIONS
d49 1
a49 7
m4_ifdef([AM_SILENT_RULES],[HAVE_AM_SILENT_RULES=yes])
AM_CONDITIONAL(HAVE_AM_SILENT_RULES, test x$HAVE_AM_SILENT_RULES != x)

XDM_CFLAGS="$XDM_CFLAGS"
GREETER_CFLAGS="$GREETER_CFLAGS"
CHOOSER_CFLAGS="$CHOOSER_CFLAGS"

d55 17
a71 1
AC_FUNC_FORK
d73 2
a74 30
dnl If you're looking here because you got a message that said
dnl 'error: possibly undefined macro: AC_DEFINE', the source of
dnl your problem is not here.   You need to upgrade to pkgconfig 0.18
dnl or later to get an updated pkg.m4 with PKG_CHECK_EXISTS defined.
dnl See http://www.mail-archive.com/autoconf@@gnu.org/msg13413.html
AC_CHECK_FUNC(mkstemp, AC_DEFINE(HAS_MKSTEMP,1,
	[Define to 1 if you have the 'mkstemp' function.]))
AC_CHECK_FUNC(getifaddrs, AC_DEFINE(HAS_GETIFADDRS,1,
	[Define to 1 if you have the 'getifaddrs' function.]))
AC_CHECK_FUNC(getspnam, AC_DEFINE(USESHADOW,1,
	[Define to 1 if you have the shadow password functions.]))


# According to the old Imakefile, FreeBSD has this in libutil
AC_CHECK_FUNC(setproctitle, [HAS_SETPROCTITLE="yes"],
	AC_CHECK_LIB(util, setproctitle, 
		     [HAS_SETPROCTITLE="yes" ; XDM_OS_LIBS="$XDM_OS_LIBS -lutil"]))
if test "x$HAS_SETPROCTITLE" = "xyes" ; then
	AC_DEFINE(HAS_SETPROCTITLE,1,
		[Define to 1 if you have the 'setproctitle' function.])
fi

# According to the old Imakefile, BSD/OS has this in libutil
AC_CHECK_FUNC(setusercontext, [HAS_SETUSERCONTEXT="yes"],
	AC_CHECK_LIB(util, setusercontext, 
		    [HAS_SETUSERCONTEXT="yes" ; XDM_OS_LIBS="$XDM_OS_LIBS -lutil"]))
if test "x$HAS_SETUSERCONTEXT" = "xyes" ; then
	AC_DEFINE(HAS_SETUSERCONTEXT,1,
		[Define to 1 if you have the 'setusercontext' function.])
fi
d76 4
a79 3
AC_CHECK_FUNCS([daemon sigaction openlog asprintf])
AC_CHECK_HEADERS([grp.h syslog.h])
AC_TYPE_SIGNAL
d81 2
a82 4
XTRANS_CONNECTION_FLAGS
dnl Sets $SECURE_RPC to "yes" or "no"
XTRANS_SECURE_RPC_FLAGS
AM_CONDITIONAL(HAS_SECURE_RPC, test x$SECURE_RPC = xyes)
d84 7
a90 2
dnl Is key_setnet defined in a header file?
AC_CHECK_DECL(key_setnet, 
d98 19
a116 9
# darwin could have PAM support, but not yet
case $host_os in
    darwin*)
        use_pam_default=no
        ;;
    *)
        use_pam_default=try
        ;;
esac
d118 4
a121 3
# Check for PAM support
AC_ARG_WITH(pam, AC_HELP_STRING([--with-pam],[Use PAM for authentication]),
	[USE_PAM=$withval], [USE_PAM=$use_pam_default])
d123 61
a183 7
	AC_SEARCH_LIBS(pam_open_session,[pam])
	AC_CHECK_FUNC(pam_open_session, 
		[AC_DEFINE(USE_PAM,1,[Use PAM for authentication])],
		[if test "x$USE_PAM" != "xtry" ; then
			AC_MSG_ERROR([PAM support requested, but pam_open_session not found.])
		 fi])
fi
a191 1
        OS_CFLAGS=""
a194 1
        OS_CFLAGS="-DNO_LASTLOG"
a197 1
        OS_CFLAGS="-DCSRG_BASED"
a200 1
	OS_CFLAGS=""
a203 1
        OS_CFLAGS=
d209 21
a229 30
# Check for /dev/random or /dev/urandom
AC_ARG_WITH(random-device, 
	AC_HELP_STRING([--with-random-device\[=<pathname>\]],
		[Use <pathname> as a source of randomness]),
	RANDOM_DEVICE="$withval", RANDOM_DEVICE="try")

if test x$RANDOM_DEVICE = xyes -o x$RANDOM_DEVICE = xtry ; then
	AC_CHECK_FILE([/dev/urandom], [RANDOM_DEVICE=/dev/urandom],
		AC_CHECK_FILE([/dev/random], [RANDOM_DEVICE=/dev/random]))
	if test x$RANDOM_DEVICE = xyes ; then
		AC_MSG_ERROR([random device support requested, but no random device was found.])		
	else 
		if test x$RANDOM_DEVICE = xtry ; then
			RANDOM_DEVICE="no"
		fi
	fi
fi

if test x$RANDOM_DEVICE != xno ; then
	AC_DEFINE_UNQUOTED(DEV_RANDOM,"$RANDOM_DEVICE",
		[Define to device that provides random data source])
	RANDOMMANDEFS="$RANDOMMANDEFS -DDEV_RANDOM=\\\"$RANDOM_DEVICE\\\""
fi


AC_CHECK_FUNC(arc4random, [HAS_ARC4_RANDOM="yes"], [HAS_ARC4_RANDOM="no"])
AM_CONDITIONAL(HAS_ARC4_RANDOM, test x$HAS_ARC4_RANDOM = xyes)
if test x$HAS_ARC4_RANDOM = xyes ; then
	AC_DEFINE(ARC4_RANDOM, 1, [Define to use arc4random() function])
	RANDOMMANDEFS="$RANDOMMANDEFS -DARC4_RANDOM"
d231 1
a231 2

AC_SUBST(RANDOMMANDEFS)
d261 1
a261 1
	AC_HELP_STRING([--with-xdmlibdir=<pathname>],
d267 1
a267 1
	AC_HELP_STRING([--with-xdmconfigdir=<pathname>],
d273 1
a273 1
	AC_HELP_STRING([--with-xdmscriptdir=<pathname>],
d279 1
a279 1
	AC_HELP_STRING([--with-logdir=<pathname>],
d285 1
a285 1
	AC_HELP_STRING([--with-piddir=<pathname>],
d291 1
a291 1
	AC_HELP_STRING([--with-default-vt=<vtname>],
d297 1
a297 1
	AC_HELP_STRING([--with-config-type={ws|fs}],
d305 1
a305 1
	AC_HELP_STRING([--with-utmp-file=<pathname>],
d324 1
a324 1
	AC_HELP_STRING([--with-wtmp-file=<pathname>],
d331 1
a331 1
	for WTMP_FILE in /var/adm/wtmpx /var/log/wtmp /var/adm/wtmp /usr/adm/wtmp /etc/wtmp ; do 
a352 2
XDM_LIBS="$XDM_LIBS $XDM_OS_LIBS"

d354 1
a354 1
	AC_DEFINE([USE_XINERAMA], 1, 
a356 2
	XDM_CFLAGS="$XDM_CFLAGS $XINERAMA_CFLAGS"
	XDM_LIBS="$XDM_LIBS $XINERAMA_LIBS"
d364 2
a365 2
AC_ARG_WITH(xft, 
    	AC_HELP_STRING([--with-xft], 
d367 2
a368 2
	[USE_XFT="$withval"], 
	PKG_CHECK_EXISTS(xft, [USE_XFT="yes"], [USE_XFT="no"]))
d371 1
a371 1
	PKG_CHECK_MODULES(XFT, xft)
d374 1
a374 1
	AC_DEFINE([USE_XFT], 1, 
d379 2
a380 2
AC_ARG_ENABLE(xpm-logos, 
    	AC_HELP_STRING([--enable-xpm-logos], 
d382 1
a382 1
	[USE_XPM="$enableval"], 
a385 2
	XDM_CFLAGS="$XDM_CFLAGS $XPM_CFLAGS"
	XDM_LIBS="$XDM_LIBS $XPM_LIBS"
d388 1
a388 1
	AC_DEFINE([XPM], 1, 
d394 1
a394 1
	AC_HELP_STRING([--with-color-pixmap=<filename>],
d398 1
a398 1
	AC_HELP_STRING([--with-bw-pixmap=<filename>],
d402 1
a402 1
	AC_HELP_STRING([--with-pixmapdir=<pathname>],
d404 1
a404 1
	[XDM_PIXMAPDIR="$withval"], 
d413 1
a413 1
PKG_CHECK_MODULES(XDM_PRINT, xaw7)
d422 1
a422 1
AC_MSG_CHECKING([if the greeter should be built as a dynamically loaded shared object])
a428 3
# Not all OS'es built dynamic greeter in monolith, but all the ones supported
# in the modular tree should be able to use it.   We'll leave this here in case
# some are found that can't.
d431 3
d435 1
d438 4
d444 1
d446 1
a446 1
if test "x$DYNAMIC_GREETER" = "xyes" ; then
d448 2
a449 25
	GREETER_CFLAGS="$GREETER_CFLAGS -DGREET_LIB"

	# The xdm binary needs to export symbols so that they can be used from
	# libXdmGreet.so.  Some platforms require extra flags to do this.   
	# gcc should set these flags when -rdynamic is passed to it, other 
	# compilers/linkers may need to be added
	if test "x$GCC" = "xyes"; then
		XDM_LDFLAGS="$XDM_LDFLAGS -rdynamic"
	fi	

	PKG_CHECK_MODULES(XDMGREET, xt x11 xext)

	GREETERLIB="${XDMLIBDIR}/libXdmGreet.so"
	AC_DEFINE_DIR(DEF_GREETER_LIB, GREETERLIB, 
			[Location of Xdm Greeter library])

	XDMGREET_CFLAGS="$XDMGREET_CFLAGS $XDM_PRINT_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $OS_CFLAGS $GREETER_CFLAGS $AUTH_CFLAGS"
	XDMGREET_LIBS="$XDMGREET_LIBS $XDM_PRINT_LIBS $DMCP_LIBS $GREETER_LIBS"

	AC_SUBST(XDMGREET_CFLAGS)
	AC_SUBST(XDMGREET_LIBS)
else
	XDM_CFLAGS="$XDM_CFLAGS $XDM_PRINT_CFLAGS $GREETER_CFLAGS -DGREET_USER_STATIC"
	XDM_LIBS="$XDM_LIBS $XDM_PRINT_LIBS $GREETER_LIBS"
fi
d451 2
a452 1
AM_CONDITIONAL(DYNAMIC_GREETER, test x$DYNAMIC_GREETER = xyes)
d458 2
a459 2
XDM_CFLAGS="$XDM_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $OS_CFLAGS $AUTH_CFLAGS"
XDM_LIBS="$XDM_LIBS $DMCP_LIBS"
d464 1
a464 1
	AC_HELP_STRING([--enable-xdm-auth],
a472 2
AC_SEARCH_LIBS(crypt, crypt)

a474 1
AC_SUBST(XDM_LDFLAGS)
d480 6
d487 2
a488 2
XDMSHELL_CFLAGS="$XDM_CFLAGS $XDM_PRINT_CFLAGS $AUTH_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $XT_CFLAGS"
XDMSHELL_LIBS="$XDM_LIBS $XDM_PRINT_LIBS $DMCP_LIBS"
d497 2
a498 2
CHOOSER_CFLAGS="$CHOOSER_CFLAGS $XDM_PRINT_CFLAGS $XLIB_CFLAGS $DMCP_CFLAGS $AUTH_CFLAGS"
CHOOSER_LIBS="$CHOOSER_LIBS $XDM_PRINT_LIBS $DMCP_LIBS"
d507 1
a507 1
if test -z "$DEF_SERVER" ; then 
d510 1
a510 1
if test -z "$DEF_SERVER_LINE" ; then 
d513 1
a513 1
AC_DEFINE_DIR(DEF_SERVER_LINE, DEF_SERVER_LINE,
d517 1
a517 1
AC_ARG_WITH(xrdb, AC_HELP_STRING([--with-xrdb=path],
d520 1
a520 1
AC_DEFINE_DIR(XRDB_PROGRAM, XRDB, 
d524 1
a524 1
AC_ARG_WITH(default-session, AC_HELP_STRING([--with-default-session=command],
d527 1
a527 1
AC_DEFINE_DIR(DEF_SESSION, DEF_SESSION,
d555 1
a555 1
AC_DEFINE_DIR(DEF_USER_PATH, DEF_USER_PATH,
d577 1
a577 1
AC_DEFINE_DIR(DEF_SYSTEM_PATH, DEF_SYSTEM_PATH,
d584 1
a584 1
AC_DEFINE_DIR(DEF_SYSTEM_SHELL, BOURNE_SHELL,
d589 1
a589 1
AC_DEFINE_DIR(DEF_FAILSAFE_CLIENT, bindir/xterm,
d594 1
a594 1
AC_DEFINE_DIR(DEF_XDM_CONFIG, XDMCONFIGDIR/xdm-config, 
d599 1
a599 1
AC_DEFINE_DIR(DEF_CHOOSER, XDMLIBDIR/chooser, 
d605 1
a605 1
	AC_HELP_STRING([--with-authdir=<pathname>],
d610 1
a610 1
AC_DEFINE_DIR(DEF_AUTH_DIR, XDMXAUTHDIR,
d615 1
a615 1
AC_DEFINE_DIR(DEF_GREETER_LIB, XDMLIBDIR/libXdmGreet.so, 
d619 1
a619 1
xt_appdefaultdir=$(pkg-config --variable=appdefaultdir xt)
d621 1
a621 1
	AC_HELP_STRING([--with-appdefaultdir=<pathname>],
d628 10
a637 1
AC_OUTPUT([Makefile config/Makefile greeter/Makefile])
@


1.7
log
@xdm 1.1.8.
@
text
@a22 1
dnl $XdotOrg: app/xdm/configure.ac,v 1.42 2006/06/03 01:01:21 alanc Exp $
d24 2
a25 2
AC_PREREQ([2.57])
AC_INIT(xdm,[1.1.8],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
d29 4
d35 1
d44 9
d92 2
a93 2
AC_CHECK_FUNCS([daemon sigaction])
AC_CHECK_HEADERS([grp.h])
d139 1
a139 1
        OS_CFLAGS="-D_XOPEN_SOURCE"
d264 40
d381 1
a381 1
XAW_CHECK_XPRINT_SUPPORT(XDM_PRINT)
d468 1
a468 1
XDMSHELL_CFLAGS="$XDM_CFLAGS $XDM_PRINT_CFLAGS $AUTH_CFLAGS $DMCP_CFLAGS $XLIB_CFLAGS $XT_CFLAGS $OS_CFLAGS"
d478 1
a478 1
CHOOSER_CFLAGS="-D_BSD_SOURCE $CHOOSER_CFLAGS $XDM_PRINT_CFLAGS $XLIB_CFLAGS $DMCP_CFLAGS $AUTH_CFLAGS"
d585 7
a591 1
AC_DEFINE_DIR(DEF_AUTH_DIR, XDMCONFIGDIR, 
a607 4

XORG_WITH_LINT
XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION
@


1.6
log
@update to xdm-1.1.7 (No changes on OpenBSD).
@
text
@d26 1
a26 1
AC_INIT(xdm,[1.1.7],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
d541 5
a545 1
appdefaultdir=$(pkg-config --variable=appdefaultdir xt)
d547 1
@


1.5
log
@merge xdm 1.1.6
@
text
@a0 1

d26 1
a26 1
AC_INIT(xdm,[1.1.6],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
d130 1
a130 1
        OS_CFLAGS="-D__DARWIN__ -DNO_LASTLOG"
@


1.4
log
@merge xdm 1.1.4
@
text
@d27 1
a27 1
AC_INIT(xdm,[1.1.4],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
d34 1
d116 1
a116 1
			AC_MSG_ERROR(["PAM support requested, but pam_open_session not found."])
d159 1
a159 1
		AC_MSG_ERROR(["random device support requested, but no random device was found."])		
d394 11
a406 2
AM_CONDITIONAL(HAS_XDM_AUTH, test x$xdmauth = xyes)

d446 4
a449 1
AC_DEFINE_DIR(XRDB_PROGRAM, bindir/xrdb, 
d453 4
a456 1
AC_DEFINE_DIR(DEF_SESSION, bindir/xterm -ls,
@


1.3
log
@Re-enable bsdauth support. Reported and tested by ajacoutot@@
@
text
@d24 1
a24 1
dnl $XdotOrg: app/xdm/configure.ac,v 1.40 2006/04/27 21:21:15 alanc Exp $
d27 1
a27 1
AC_INIT(xdm,[1.0.4],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
d79 1
a79 1
AC_CHECK_FUNCS([daemon])
d81 1
d125 1
a125 1
    linux*)
d276 15
d530 1
@


1.2
log
@OpnBSD customization:
- support for X server privilege separation
- logos
@
text
@d196 10
@


1.1
log
@Initial revision
@
text
@d185 10
@


1.1.1.1
log
@Importing from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@Import xdm 1.1.4
@
text
@d24 1
a24 1
dnl $XdotOrg: app/xdm/configure.ac,v 1.42 2006/06/03 01:01:21 alanc Exp $
d27 1
a27 1
AC_INIT(xdm,[1.1.4],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
d79 1
a79 1
AC_CHECK_FUNCS([daemon sigaction])
a80 1
AC_TYPE_SIGNAL
d124 1
a124 1
    linux*|gnu*|*-gnu)
a254 15
# Xft text drawing for the greeter screen
AC_ARG_WITH(xft, 
    	AC_HELP_STRING([--with-xft], 
			[Use Xft to draw text (default is YES if installed)]),
	[USE_XFT="$withval"], 
	PKG_CHECK_EXISTS(xft, [USE_XFT="yes"], [USE_XFT="no"]))

if test "x$USE_XFT" = "xyes" ; then
	PKG_CHECK_MODULES(XFT, xft)
	GREETER_CFLAGS="$GREETER_CFLAGS $XFT_CFLAGS"
	GREETER_LIBS="$GREETER_LIBS $XFT_LIBS"
	AC_DEFINE([USE_XFT], 1, 
	    [Define to 1 to use Xft for text on greeter screen])
fi

a493 1
XORG_WITH_LINT
@


1.1.1.3
log
@xdm 1.1.6
@
text
@d27 1
a27 1
AC_INIT(xdm,[1.1.6],[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],xdm)
a33 1
AM_PROG_CC_C_O
d115 1
a115 1
			AC_MSG_ERROR([PAM support requested, but pam_open_session not found.])
d158 1
a158 1
		AC_MSG_ERROR([random device support requested, but no random device was found.])		
d373 1
d375 1
a375 11
AC_ARG_ENABLE(xdm-auth,
	AC_HELP_STRING([--enable-xdm-auth],
       [Support XDM-AUTHENTICATION-1 and XDM-AUTHORIZATION-1 (default: auto)]),
	[xdmauth_enable="$enableval"], [xdmauth_enable="auto"])
if test "x$xdmauth_enable" = "xyes" -a "x$xdmauth" = "xno" ; then
	AC_MSG_ERROR([XDM-AUTH support requested, but XdmcpWrap not found in libXdmcp.])
fi

AM_CONDITIONAL(HAS_XDM_AUTH, test x$xdmauth = xyes -a x$xdmauth_enable != xno)

AC_SEARCH_LIBS(crypt, crypt)
d416 1
a416 4
AC_ARG_WITH(xrdb, AC_HELP_STRING([--with-xrdb=path],
			[Use path for xrdb (default: bindir/xrdb)]),
	    [XRDB=$withval], [XRDB=${bindir}/xrdb])
AC_DEFINE_DIR(XRDB_PROGRAM, XRDB, 
d420 1
a420 4
AC_ARG_WITH(default-session, AC_HELP_STRING([--with-default-session=command],
		[Use command for default session (default: bindir/xterm -ls)]),
	    [DEF_SESSION=$withval], [DEF_SESSION="${bindir}/xterm -ls"])
AC_DEFINE_DIR(DEF_SESSION, DEF_SESSION,
@


