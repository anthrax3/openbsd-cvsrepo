head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.22
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.20
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2012.03.27.19.16.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.20.17.40.02;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.04.20.45.57;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.11.10.07.51;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to xproto 7.0.23. Tested by krw@@, mpi@@, shadchin@@
@
text
@<part id="sect1-9">
<preface id="acknowledgements">
<title>Acknowledgements</title>
<para>
The primary contributers to the X11 protocol are:
</para>

<itemizedlist>
<listitem><para>Dave Carver (Digital HPW)</para></listitem>
<listitem><para>Branko Gerovac (Digital HPW)</para></listitem>
<listitem><para>Jim Gettys (MIT/Project Athena, Digital)</para></listitem>
<listitem><para>Phil Karlton (Digital WSL)</para></listitem>
<listitem><para>Scott McGregor (Digital SSG)</para></listitem>
<listitem><para>Ram Rao (Digital UEG)</para></listitem>
<listitem><para>David Rosenthal (Sun)</para></listitem>
<listitem><para>Dave Winchell (Digital UEG)</para></listitem>
</itemizedlist>

<para>
The implementors of initial server who provided useful
input are:
</para>

<itemizedlist>
<listitem><para>Susan Angebranndt (Digital)</para></listitem>
<listitem><para>Raymond Drewry (Digital)</para></listitem>
<listitem><para>Todd Newman (Digital)</para></listitem>
</itemizedlist>

<para>
The invited reviewers who provided useful input are:
</para>

<itemizedlist>
<listitem><para>Andrew Cherenson (Berkeley)</para></listitem>
<listitem><para>Burns Fisher (Digital)</para></listitem>
<listitem><para>Dan Garfinkel (HP)</para></listitem>
<listitem><para>Leo Hourvitz (Next)</para></listitem>
<listitem><para>Brock Krizan (HP)</para></listitem>
<listitem><para>David Laidlaw (Stellar)</para></listitem>
<listitem><para>Dave Mellinger (Interleaf)</para></listitem>
<listitem><para>Ron Newman (MIT)</para></listitem>
<listitem><para>John Ousterhout (Berkeley)</para></listitem>
<listitem><para>Andrew Palay (ITC CMU)</para></listitem>
<listitem><para>Ralph Swick (MIT)</para></listitem>
<listitem><para>Craig Taylor (Sun)</para></listitem>
<listitem><para>Jeffery Vroom (Stellar)</para></listitem>
</itemizedlist>

<para>
Thanks go to Al Mento of Digital's UEG Documentation Group for
formatting this document.
</para>

<para>
This document does not attempt to provide the rationale or pragmatics required
to fully understand the protocol or to place it in perspective within a
complete system.
</para>

<para>
The protocol contains many management mechanisms that are not intended for
normal applications.
Not all mechanisms are needed to build a particular user interface.
It is important to keep in mind that the protocol is intended to
provide mechanism, not policy.
</para>

<para>
Robert W. Scheifler
</para>
<para>
X Consortium, Inc.
</para>
</preface>

<chapter id='Protocol_Formats'>
  <title>Protocol Formats</title>

  <section id="request_format">
    <title>Request Format</title>
    <indexterm zone="request_format" significance="preferred"><primary>Request</primary><secondary>format</secondary></indexterm>
    <para>
Every request contains an 8-bit <firstterm id="major_opcode">major opcode</firstterm>
<indexterm zone="major_opcode" significance="preferred"><primary>Opcode</primary><secondary>major</secondary></indexterm>
and a 16-bit <firstterm id="request_length">length field</firstterm>
<indexterm zone="request_length" significance="preferred"><primary>Request</primary><secondary>length</secondary></indexterm>
expressed in units of four bytes.
Every request consists of four bytes of a header
(containing the major opcode, the length field, and a data byte)
followed by zero or more additional bytes of data.
The length field defines the total length of the request, including the header.
The length field in a request must equal the minimum length required to contain
the request.
If the specified length is smaller or larger than the required length,
an error is generated.
Unused bytes in a request are not required to be zero.
Major opcodes 128 through 255 are reserved for 
<firstterm id="extension">extensions</firstterm>.
<indexterm zone="extension"><primary>Extension</primary></indexterm>
Extensions are intended to contain multiple requests,
so extension requests typically have an additional 
<firstterm id="minor_opcode">minor opcode</firstterm> encoded
in the second data byte in the request header.
<indexterm zone="minor_opcode" significance="preferred"><primary>Opcode</primary><secondary>minor</secondary></indexterm>
However, the placement and interpretation of this minor opcode and of all
other fields in extension requests are not defined by the core protocol.
Every request on a given connection is implicitly assigned a
<firstterm id="sequence_number">sequence number</firstterm>,
<indexterm zone="sequence_number" significance="preferred"><primary>Sequence number</primary></indexterm>
starting with one, that is used in replies, errors, and events.
    </para>
  </section>

  <section id="reply_format">
    <title>Reply Format</title>
    <indexterm zone="reply_format" significance="preferred"><primary>Reply</primary><secondary>format</secondary></indexterm>
    <para>
Every <firstterm>reply</firstterm> contains a 32-bit length field
expressed in units of four bytes.
Every reply consists of 32 bytes followed by zero or more additional bytes of
data, as specified in the length field.
Unused bytes within a reply are not guaranteed to be zero.
Every reply also contains the least significant 16 bits of the sequence number
of the corresponding request.
    </para>
  </section>

  <section id="error_format">
    <title>Error Format</title>
    <indexterm zone="error_format" significance="preferred"><primary>Error report</primary><secondary>format</secondary></indexterm>
    <para>
Error reports are 32 bytes long.
Every error includes an 8-bit error code.
<phrase id="errors:extensions">
Error codes 128 through 255 are reserved for extensions.
</phrase>
<indexterm zone="errors:extensions" significance="preferred"><primary>Error Codes</primary><secondary>extensions</secondary></indexterm>
<indexterm zone="errors:extensions" significance="preferred"><primary>Extension</primary><secondary>error codes</secondary></indexterm>
Every error also includes the major and minor opcodes of the failed request
and the least significant 16 bits of the sequence number of the request.
For the following errors (see <link linkend='Errors'>section 4</link>),
the failing resource ID is also returned:
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>
and
<emphasis role='bold'>Window</emphasis>.
For
<emphasis role='bold'>Atom</emphasis>
errors, the failing atom is returned.
For
<emphasis role='bold'>Value</emphasis>
errors, the failing value is returned.
Other core errors return no additional data.
Unused bytes within an error are not guaranteed to be zero.
    </para>
  </section>

  <section id="event_format">
    <title>Event Format</title>
    <indexterm zone="event_format" significance="preferred"><primary>Event</primary><secondary>format</secondary></indexterm>
    <para>
<firstterm>Events</firstterm> are 32 bytes long.
Unused bytes within an event are not guaranteed to be zero.
Every event contains an 8-bit type code.
The most significant bit in this code is set if the event was generated from a
<link linkend="requests:SendEvent"><emphasis role='bold'>SendEvent</emphasis></link>
request.
<phrase id="events:extensions">
Event codes 64 through 127 are reserved for extensions, although the core
protocol does not define a mechanism for selecting interest in such events.
</phrase>
<indexterm zone="events:extensions" significance="preferred"><primary>Event</primary><secondary>extension</secondary></indexterm>
<indexterm zone="events:extensions" significance="preferred"><primary>Extension</primary><secondary>event</secondary></indexterm>
Every core event (with the exception of
<link linkend="events:KeymapNotify"><emphasis role='bold'>KeymapNotify</emphasis></link>)
also contains the least significant 16 bits of the sequence number of the last
request issued by the client that was (or is currently being) processed by
the server.
    </para>
  </section>
</chapter>

<chapter id='Syntactic_Conventions'>
<title>Syntactic Conventions</title>
<!-- .XS -->
<!-- (SN Syntactic Conventions -->
<!-- .XE -->
<para>
<!-- .LP -->
The rest of this document uses the following syntactic conventions.
</para>
<itemizedlist>
  <listitem>
    <para>
The syntax {...} encloses a set of alternatives.
    </para>
  </listitem>
  <listitem>
    <para>
The syntax [...] encloses a set of structure components.
    </para>
  </listitem>
  <listitem>
    <para>
In general, TYPEs are in uppercase and
<emphasis role='bold'>AlternativeValues</emphasis>
are capitalized.
    </para>
  </listitem>
  <listitem>
    <para>
Requests in <link linkend='Requests'>section 9</link> are described
in the following format:
<literallayout class="monospaced">
<emphasis role='bold'>RequestName</emphasis>
     <emphasis remap='I'>arg1</emphasis>: type1
     ...
     <emphasis remap='I'>argN</emphasis>: typeN
   ▶
     result1: type1
     ...
     resultM: typeM

     Errors: kind1, ..., kindK

     Description.
</literallayout>
    </para>
    <para>
If no ▶ is present in the description,
then the request has no reply (it is asynchronous),
although errors may still be reported.
If ▶+ is used,
then one or more replies can be generated for a single request.
    </para>
  </listitem>
  <listitem>
    <para>
Events in <link linkend='Events'>section 11</link> are described
in the following format:
<literallayout class="monospaced">
<emphasis role='bold'>EventName</emphasis>
     <emphasis remap='I'>value1</emphasis>: type1
     ...
     <emphasis remap='I'>valueN</emphasis>: typeN

     Description.
</literallayout>
    </para>
  </listitem>
</itemizedlist>
</chapter>

<chapter id='Common_Types'>
<title>Common Types</title>
<!-- .XS -->
<!-- (SN Common Types -->
<!-- .XE -->
<informaltable frame="topbot">
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Name</entry>
      <entry>Value</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry id="types:LISTofFOO">LISTofFOO<indexterm zone="types:LISTofFOO" significance="preferred"><primary>Types</primary><secondary>LISTofFOO</secondary></indexterm></entry>
      <entry>

A type name of the form LISTofFOO means a counted list of elements of type
FOO.
The size of the length field may vary (it is not necessarily the same
size as a FOO), and in some cases, it may be implicit.
It is fully specified in Appendix B.
Except where explicitly noted,
zero-length lists are legal.
      </entry>
    </row>
    <row>
      <entry><para id="types:BITMASK">BITMASK<indexterm zone="types:BITMASK" significance="preferred"><primary>Types</primary><secondary>BITMASK</secondary></indexterm></para><para id="types:LISTofVALUE">LISTofVALUE<indexterm zone="types:LISTofVALUE" significance="preferred"><primary>Types</primary><secondary>LISTofVALUE</secondary></indexterm></para></entry>
      <entry>
<para>
The types BITMASK and LISTofVALUE are somewhat special.
Various requests contain arguments of the form:
</para>
<para>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
</para>
<para>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
</para>
<para>
These are used to allow the client to specify a subset of a heterogeneous
collection of optional arguments.
The value-mask specifies which arguments are to be provided;
each such argument is assigned a unique bit position.
The representation of the BITMASK will typically contain more bits than
there are defined arguments.
The unused bits in the value-mask must be zero (or the server generates a
<emphasis role='bold'>Value</emphasis>
error).
The value-list contains one value for each bit set to 1 in the mask,
from least significant to most significant bit in the mask.
Each value is represented with four bytes,
but the actual value occupies only the least significant bytes as required.
The values of the unused bytes do not matter.
</para>
      </entry>
    </row>
    <row>
      <entry id="types:OR">OR<indexterm zone="types:OR" significance="preferred"><primary>Types</primary><secondary>OR</secondary></indexterm></entry>
      <entry>
A type of the form "T1 or ... or Tn" means the union of the indicated types.
A single-element type is given as the element without enclosing braces.
      </entry>
    </row>
    <row>
      <entry id="types:WINDOW">WINDOW<indexterm zone="types:WINDOW" significance="preferred"><primary>Types</primary><secondary>WINDOW</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:PIXMAP">PIXMAP<indexterm zone="types:PIXMAP" significance="preferred"><primary>Types</primary><secondary>PIXMAP</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:CURSOR">CURSOR<indexterm zone="types:CURSOR" significance="preferred"><primary>Types</primary><secondary>CURSOR</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:FONT">FONT<indexterm zone="types:FONT" significance="preferred"><primary>Types</primary><secondary>FONT</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:GCONTEXT">GCONTEXT<indexterm zone="types:GCONTEXT" significance="preferred"><primary>Types</primary><secondary>GCONTEXT</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:COLORMAP">COLORMAP<indexterm zone="types:COLORMAP" significance="preferred"><primary>Types</primary><secondary>COLORMAP</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:DRAWABLE">DRAWABLE<indexterm zone="types:DRAWABLE" significance="preferred"><primary>Types</primary><secondary>DRAWABLE</secondary></indexterm></entry>
      <entry>WINDOW or PIXMAP</entry>
    </row>
    <row>
      <entry id="types:FONTABLE">FONTABLE<indexterm zone="types:FONTABLE" significance="preferred"><primary>Types</primary><secondary>FONTABLE</secondary></indexterm></entry>
      <entry>FONT or GCONTEXT</entry>
    </row>
    <row>
      <entry id="types:ATOM">ATOM<indexterm zone="types:ATOM" significance="preferred"><primary>Types</primary><secondary>ATOM</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:VISUALID">VISUALID<indexterm zone="types:VISUALID" significance="preferred"><primary>Types</primary><secondary>VISUALID</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:VALUE">VALUE<indexterm zone="types:VALUE" significance="preferred"><primary>Types</primary><secondary>VALUE</secondary></indexterm></entry>
      <entry>32-bit quantity (used only in LISTofVALUE)</entry>
    </row>
    <row>
      <entry id="types:BYTE">BYTE<indexterm zone="types:BYTE" significance="preferred"><primary>Types</primary><secondary>BYTE</secondary></indexterm></entry>
      <entry>8-bit value</entry>
    </row>
    <row>
      <entry id="types:INT8">INT8<indexterm zone="types:INT8" significance="preferred"><primary>Types</primary><secondary>INT8</secondary></indexterm></entry>
      <entry>8-bit signed integer</entry>
    </row>
    <row>
      <entry id="types:INT16">INT16<indexterm zone="types:INT16" significance="preferred"><primary>Types</primary><secondary>INT16</secondary></indexterm></entry>
      <entry>16-bit signed integer</entry>
    </row>
    <row>
      <entry id="types:INT32">INT32<indexterm zone="types:INT32" significance="preferred"><primary>Types</primary><secondary>INT32</secondary></indexterm></entry>
      <entry>32-bit signed integer</entry>
    </row>
    <row>
      <entry id="types:CARD8">CARD8<indexterm zone="types:CARD8" significance="preferred"><primary>Types</primary><secondary>CARD8</secondary></indexterm></entry>
      <entry>8-bit unsigned integer</entry>
    </row>
    <row>
      <entry id="types:CARD16">CARD16<indexterm zone="types:CARD16" significance="preferred"><primary>Types</primary><secondary>CARD16</secondary></indexterm></entry>
      <entry>16-bit unsigned integer</entry>
    </row>
    <row>
      <entry id="types:CARD32">CARD32<indexterm zone="types:CARD32" significance="preferred"><primary>Types</primary><secondary>CARD32</secondary></indexterm></entry>
      <entry>32-bit unsigned integer</entry>
    </row>
    <row>
      <entry id="types:TIMESTAMP">TIMESTAMP<indexterm zone="types:TIMESTAMP" significance="preferred"><primary>Types</primary><secondary>TIMESTAMP</secondary></indexterm></entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry id="types:BITGRAVITY">BITGRAVITY<indexterm zone="types:BITGRAVITY" significance="preferred"><primary>Types</primary><secondary>BITGRAVITY</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>Forget</emphasis>,
<emphasis role='bold'>Static</emphasis>,
<emphasis role='bold'>NorthWest</emphasis>,
<emphasis role='bold'>North</emphasis>,
<emphasis role='bold'>NorthEast</emphasis>,
<emphasis role='bold'>West</emphasis>,
<emphasis role='bold'>Center</emphasis>,
<emphasis role='bold'>East</emphasis>,
<emphasis role='bold'>SouthWest</emphasis>,
<emphasis role='bold'>South</emphasis>,
<emphasis role='bold'>SouthEast</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:WINGRAVITY">WINGRAVITY<indexterm zone="types:WINGRAVITY" significance="preferred"><primary>Types</primary><secondary>WINGRAVITY</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>Unmap</emphasis>,
<emphasis role='bold'>Static</emphasis>,
<emphasis role='bold'>NorthWest</emphasis>,
<emphasis role='bold'>North</emphasis>,
<emphasis role='bold'>NorthEast</emphasis>,
<emphasis role='bold'>West</emphasis>,
<emphasis role='bold'>Center</emphasis>,
<emphasis role='bold'>East</emphasis>,
<emphasis role='bold'>SouthWest</emphasis>,
<emphasis role='bold'>South</emphasis>,
<emphasis role='bold'>SouthEast</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:BOOL">BOOL<indexterm zone="types:BOOL" significance="preferred"><primary>Types</primary><secondary>BOOL</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>True</emphasis>,
<emphasis role='bold'>False</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:EVENT">EVENT<indexterm zone="types:EVENT" significance="preferred"><primary>Types</primary><secondary>EVENT</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>KeyPress</emphasis>,
<emphasis role='bold'>KeyRelease</emphasis>,
<emphasis role='bold'>OwnerGrabButton</emphasis>,
<emphasis role='bold'>ButtonPress</emphasis>,
<emphasis role='bold'>ButtonRelease</emphasis>,
<emphasis role='bold'>EnterWindow</emphasis>,
<emphasis role='bold'>LeaveWindow</emphasis>,
<emphasis role='bold'>PointerMotion</emphasis>,
<emphasis role='bold'>PointerMotionHint</emphasis>,
<emphasis role='bold'>Button1Motion</emphasis>,
<emphasis role='bold'>Button2Motion</emphasis>,
<emphasis role='bold'>Button3Motion</emphasis>,
<emphasis role='bold'>Button4Motion</emphasis>,
<emphasis role='bold'>Button5Motion</emphasis>,
<emphasis role='bold'>ButtonMotion</emphasis>,
<emphasis role='bold'>Exposure</emphasis>,
<emphasis role='bold'>VisibilityChange</emphasis>,
<emphasis role='bold'>StructureNotify</emphasis>,
<emphasis role='bold'>ResizeRedirect</emphasis>,
<emphasis role='bold'>SubstructureNotify</emphasis>,
<emphasis role='bold'>SubstructureRedirect</emphasis>,
<emphasis role='bold'>FocusChange</emphasis>,
<emphasis role='bold'>PropertyChange</emphasis>,
<emphasis role='bold'>ColormapChange</emphasis>,
<emphasis role='bold'>KeymapState</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:POINTEREVENT">POINTEREVENT<indexterm zone="types:POINTEREVENT" significance="preferred"><primary>Types</primary><secondary>POINTEREVENT</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>ButtonPress</emphasis>,
<emphasis role='bold'>ButtonRelease</emphasis>,
<emphasis role='bold'>EnterWindow</emphasis>,
<emphasis role='bold'>LeaveWindow</emphasis>,
<emphasis role='bold'>PointerMotion</emphasis>,
<emphasis role='bold'>PointerMotionHint</emphasis>,
<emphasis role='bold'>Button1Motion</emphasis>,
<emphasis role='bold'>Button2Motion</emphasis>,
<emphasis role='bold'>Button3Motion</emphasis>,
<emphasis role='bold'>Button4Motion</emphasis>,
<emphasis role='bold'>Button5Motion</emphasis>,
<emphasis role='bold'>ButtonMotion</emphasis>,
<emphasis role='bold'>KeymapState</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:DEVICEEVENT">DEVICEEVENT<indexterm zone="types:DEVICEEVENT" significance="preferred"><primary>Types</primary><secondary>DEVICEEVENT</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>KeyPress</emphasis>,
<emphasis role='bold'>KeyRelease</emphasis>,
<emphasis role='bold'>ButtonPress</emphasis>,
<emphasis role='bold'>ButtonRelease</emphasis>,
<emphasis role='bold'>PointerMotion</emphasis>,
<emphasis role='bold'>Button1Motion</emphasis>,
<emphasis role='bold'>Button2Motion</emphasis>,
<emphasis role='bold'>Button3Motion</emphasis>,
<emphasis role='bold'>Button4Motion</emphasis>,
<emphasis role='bold'>Button5Motion</emphasis>,
<emphasis role='bold'>ButtonMotion</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:KEYSYM">KEYSYM<indexterm zone="types:KEYSYM" significance="preferred"><primary>Types</primary><secondary>KEYSYM</secondary></indexterm></entry>
      <entry>32-bit value (top three bits guaranteed to be zero)</entry>
    </row>
    <row>
      <entry id="types:KEYCODE">KEYCODE<indexterm zone="types:KEYCODE" significance="preferred"><primary>Types</primary><secondary>KEYCODE</secondary></indexterm></entry>
      <entry>CARD8</entry>
    </row>
    <row>
      <entry id="types:BUTTON">BUTTON<indexterm zone="types:BUTTON" significance="preferred"><primary>Types</primary><secondary>BUTTON</secondary></indexterm></entry>
      <entry>CARD8</entry>
    </row>
    <row>
      <entry id="types:KEYMASK">KEYMASK<indexterm zone="types:KEYMASK" significance="preferred"><primary>Types</primary><secondary>KEYMASK</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>Shift</emphasis>,
<emphasis role='bold'>Lock</emphasis>,
<emphasis role='bold'>Control</emphasis>,
<emphasis role='bold'>Mod1</emphasis>,
<emphasis role='bold'>Mod2</emphasis>,
<emphasis role='bold'>Mod3</emphasis>,
<emphasis role='bold'>Mod4</emphasis>,
<emphasis role='bold'>Mod5</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:BUTMASK">BUTMASK<indexterm zone="types:BUTMASK" significance="preferred"><primary>Types</primary><secondary>BUTMASK</secondary></indexterm></entry>
      <entry>
{ <emphasis role='bold'>Button1</emphasis>,
<emphasis role='bold'>Button2</emphasis>,
<emphasis role='bold'>Button3</emphasis>,
<emphasis role='bold'>Button4</emphasis>,
<emphasis role='bold'>Button5</emphasis> }
      </entry>
    </row>
    <row>
      <entry id="types:KEYBUTMASK">KEYBUTMASK<indexterm zone="types:KEYBUTMASK" significance="preferred"><primary>Types</primary><secondary>KEYBUTMASK</secondary></indexterm></entry>
      <entry>KEYMASK or BUTMASK</entry>
    </row>
    <row>
      <entry id="types:STRING8">STRING8<indexterm zone="types:STRING8" significance="preferred"><primary>Types</primary><secondary>STRING8</secondary></indexterm></entry>
      <entry>LISTofCARD8</entry>
    </row>
    <row>
      <entry id="types:STRING16">STRING16<indexterm zone="types:STRING16" significance="preferred"><primary>Types</primary><secondary>STRING16</secondary></indexterm></entry>
      <entry>LISTofCHAR2B</entry>
    </row>
    <row>
      <entry id="types:CHAR2B">CHAR2B<indexterm zone="types:CHAR2B" significance="preferred"><primary>Types</primary><secondary>CHAR2B</secondary></indexterm></entry>
      <entry>[byte1, byte2: CARD8]</entry>
    </row>
    <row>
      <entry id="types:POINT">POINT<indexterm zone="types:POINT" significance="preferred"><primary>Types</primary><secondary>POINT</secondary></indexterm></entry>
      <entry>[x, y: INT16]</entry>
    </row>
    <row>
      <entry id="types:RECTANGLE">RECTANGLE<indexterm zone="types:RECTANGLE" significance="preferred"><primary>Types</primary><secondary>RECTANGLE</secondary></indexterm></entry>
      <entry>
<para>[x, y: INT16,</para>
<para>width, height: CARD16]</para>
      </entry>
    </row>
    <row>
      <entry id="types:ARC">ARC<indexterm zone="types:ARC" significance="preferred"><primary>Types</primary><secondary>ARC</secondary></indexterm></entry>
      <entry>
<para>[x, y: INT16,</para>
<para>width, height: CARD16,</para>
<para>angle1, angle2: INT16]</para>
      </entry>
    </row>
    <row>
      <entry id="types:HOST">HOST<indexterm zone="types:HOST" significance="preferred"><primary>Types</primary><secondary>HOST</secondary></indexterm></entry>
      <entry>
<para>
[family:
{ <emphasis role='bold'>Internet</emphasis>,
<emphasis role='bold'>InternetV6</emphasis>,
<emphasis role='bold'>ServerInterpreted</emphasis>,
<emphasis role='bold'>DECnet</emphasis>,
<emphasis role='bold'>Chaos</emphasis> }
</para>
<para>address: LISTofBYTE]</para>
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
The [x,y] coordinates of a RECTANGLE specify the upper-left corner.
</para>

<para>
The primary interpretation of large characters in a STRING16 is that they
are composed of two bytes used to index a two-dimensional matrix,
hence, the use of CHAR2B rather than CARD16.
This corresponds to the JIS/ISO method of indexing 2-byte characters.
It is expected that most large fonts will be defined with 2-byte
matrix indexing.
For large fonts constructed with linear indexing,
a CHAR2B can be interpreted as a 16-bit number by treating byte1 as
the most significant byte.
This means that clients should always transmit such
16-bit character values most significant byte first, as the server will never
byte-swap CHAR2B quantities.
</para>

<para>
The length, format, and interpretation of a HOST address are specific to the
family (see
<link linkend="requests:ChangeHosts"><emphasis role='bold'>ChangeHosts</emphasis></link>
request).
</para>
</chapter>

<chapter id='Errors'>
<title>Errors</title>
<!-- .XS -->
<!-- (SN Errors -->
<!-- .XE -->
<para>
<!-- .LP -->
In general, when a request terminates with an error,
the request has no side effects (that is, there is no partial execution).
The only requests for which this is not true are
<link linkend="requests:ChangeWindowAttributes"><emphasis role='bold'>ChangeWindowAttributes</emphasis></link>,
<link linkend="requests:ChangeGC"><emphasis role='bold'>ChangeGC</emphasis></link>,
<link linkend="requests:PolyText8"><emphasis role='bold'>PolyText8</emphasis></link>,
<link linkend="requests:PolyText16"><emphasis role='bold'>PolyText16</emphasis></link>,
<link linkend="requests:FreeColors"><emphasis role='bold'>FreeColors</emphasis></link>,
<link linkend="requests:StoreColors"><emphasis role='bold'>StoreColors</emphasis></link>
and
<link linkend="requests:ChangeKeyboardControl"><emphasis role='bold'>ChangeKeyboardControl</emphasis></link>.
</para>

<para>
The following error codes result from various requests as follows:
</para>

<informaltable frame="topbot">
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Error</entry>
      <entry>Description</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry id="errors:Access"><emphasis role='bold'>Access</emphasis><indexterm zone="errors:Access" significance="preferred"><primary>Error Codes</primary><secondary>Access</secondary></indexterm></entry>
      <entry>
An attempt is made to grab a key/button combination already grabbed by another
client.
An attempt is made to free a colormap entry not allocated by the client
or to free an entry in a colormap that was created with all entries writable.
An attempt is made to store into a read-only or an unallocated colormap entry.
An attempt is made to modify the access control list from other than the local
host (or otherwise authorized client).
An attempt is made to select an event type that only one client can
select at a time when another client has already selected it.
      </entry>
    </row>
    <row>
      <entry id="errors:Alloc"><emphasis role='bold'>Alloc</emphasis><indexterm zone="errors:Alloc" significance="preferred"><primary>Error Codes</primary><secondary>Alloc</secondary></indexterm></entry>
      <entry>
The server failed to allocate the requested resource.
Note that the explicit listing of
<emphasis role='bold'>Alloc</emphasis>
errors in request only covers allocation errors at a very coarse level
and is not intended to cover all cases
of a server running out of allocation space in the middle of service.
The semantics when a server runs out of allocation space are left unspecified,
but a server may generate an
<emphasis role='bold'>Alloc</emphasis>
error on any request for this reason,
and clients should be prepared to receive such errors and handle
or discard them.
      </entry>
    </row>
    <row>
      <entry id="errors:Atom"><emphasis role='bold'>Atom</emphasis><indexterm zone="errors:Atom" significance="preferred"><primary>Error Codes</primary><secondary>Atom</secondary></indexterm></entry>
      <entry>
A value for an ATOM argument does not name a defined ATOM.
      </entry>
    </row>
    <row>
      <entry id="errors:Colormap"><emphasis role='bold'>Colormap</emphasis><indexterm zone="errors:Colormap" significance="preferred"><primary>Error Codes</primary><secondary>Colormap</secondary></indexterm></entry>
      <entry>
A value for a COLORMAP argument does not name a defined COLORMAP.
      </entry>
    </row>
    <row>
      <entry id="errors:Cursor"><emphasis role='bold'>Cursor</emphasis><indexterm zone="errors:Cursor" significance="preferred"><primary>Error Codes</primary><secondary>Cursor</secondary></indexterm></entry>
      <entry>
A value for a CURSOR argument does not name a defined CURSOR.
      </entry>
    </row>
    <row>
      <entry id="errors:Drawable"><emphasis role='bold'>Drawable</emphasis><indexterm zone="errors:Drawable" significance="preferred"><primary>Error Codes</primary><secondary>Drawable</secondary></indexterm></entry>
      <entry>
A value for a DRAWABLE argument does not name a defined WINDOW
or PIXMAP.
      </entry>
    </row>
    <row>
      <entry id="errors:Font"><emphasis role='bold'>Font</emphasis><indexterm zone="errors:Font" significance="preferred"><primary>Error Codes</primary><secondary>Font</secondary></indexterm></entry>
      <entry>
A value for a FONT argument does not name a defined FONT.
A value for a FONTABLE argument does not name a defined FONT or a
defined GCONTEXT.
      </entry>
    </row>
    <row>
      <entry id="errors:GContext"><emphasis role='bold'>GContext</emphasis><indexterm zone="errors:GContext" significance="preferred"><primary>Error Codes</primary><secondary>GContext</secondary></indexterm></entry>
      <entry>
A value for a GCONTEXT argument does not name a defined GCONTEXT.
      </entry>
    </row>
    <row>
      <entry id="errors:IDChoice"><emphasis role='bold'>IDChoice</emphasis><indexterm zone="errors:IDChoice" significance="preferred"><primary>Error Codes</primary><secondary>IDChoice</secondary></indexterm></entry>
      <entry>
The value chosen for a resource identifier either is not included
in the range assigned to the client or is already in use.
      </entry>
    </row>
    <row>
      <entry id="errors:Implementation"><emphasis role='bold'>Implementation</emphasis><indexterm zone="errors:Implementation" significance="preferred"><primary>Error Codes</primary><secondary>Implementation</secondary></indexterm></entry>
      <entry>
The server does not implement some aspect of the request.
A server that generates this error for a core request is deficient.
As such, this error is not listed for any of the requests,
but clients should be prepared to receive such errors
and handle or discard them.
      </entry>
    </row>
    <row>
      <entry id="errors:Length"><emphasis role='bold'>Length</emphasis><indexterm zone="errors:Length" significance="preferred"><primary>Error Codes</primary><secondary>Length</secondary></indexterm></entry>
      <entry>
The length of a request is shorter or longer than that required
to minimally contain the arguments.
The length of a request exceeds the maximum length accepted by the
server.
      </entry>
    </row>
    <row>
      <entry id="errors:Match"><emphasis role='bold'>Match</emphasis><indexterm zone="errors:Match" significance="preferred"><primary>Error Codes</primary><secondary>Match</secondary></indexterm></entry>
      <entry>
An
<emphasis role='bold'>InputOnly</emphasis>
window is used as a DRAWABLE.
In a graphics request, the GCONTEXT argument does not have the same
root and depth as the destination DRAWABLE argument.
Some argument (or pair of arguments) has the correct type and range,
but it fails to match in some other way required by the request.
      </entry>
    </row>
    <row>
      <entry id="errors:Name"><emphasis role='bold'>Name</emphasis><indexterm zone="errors:Name" significance="preferred"><primary>Error Codes</primary><secondary>Name</secondary></indexterm></entry>
      <entry>
A font or color of the specified name does not exist.
      </entry>
    </row>
    <row>
      <entry id="errors:Pixmap"><emphasis role='bold'>Pixmap</emphasis><indexterm zone="errors:Pixmap" significance="preferred"><primary>Error Codes</primary><secondary>Pixmap</secondary></indexterm></entry>
      <entry>
A value for a PIXMAP argument does not name a defined PIXMAP.
      </entry>
    </row>
    <row>
      <entry id="errors:Request"><emphasis role='bold'>Request</emphasis><indexterm zone="errors:Request" significance="preferred"><primary>Error Codes</primary><secondary>Request</secondary></indexterm></entry>
      <entry>
The major or minor opcode does not specify a valid request.
      </entry>
    </row>
    <row>
      <entry id="errors:Value"><emphasis role='bold'>Value</emphasis><indexterm zone="errors:Value" significance="preferred"><primary>Error Codes</primary><secondary>Value</secondary></indexterm></entry>
      <entry>
Some numeric value falls outside the range of values accepted by the request.
Unless a specific range is specified for an argument,
the full range defined by the argument's type is accepted.
Any argument defined as a set of alternatives typically can generate
this error (due to the encoding).
      </entry>
    </row>
    <row>
      <entry id="errors:Window"><emphasis role='bold'>Window</emphasis><indexterm zone="errors:Window" significance="preferred"><primary>Error Codes</primary><secondary>Window</secondary></indexterm></entry>
      <entry>
A value for a WINDOW argument does not name a defined WINDOW.
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<note><para>
The
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>
and
<emphasis role='bold'>Window</emphasis>
errors are also used when the argument type is extended by union with a
set of fixed alternatives, for example, &lt;WINDOW or
<emphasis role='bold'>PointerRoot</emphasis>
or
<emphasis role='bold'>None</emphasis>&gt;.
</para></note>
</chapter>

<chapter id='Keyboards'>
<title>Keyboards</title>
<indexterm zone="Keyboards"><primary>Keyboard</primary></indexterm>
<!-- .XS -->
<!-- (SN Keyboards -->
<!-- .XE -->
<para id="keycode">
A KEYCODE represents a physical (or logical) key.
<indexterm zone="keycode"><primary>Types</primary><secondary>KEYCODE</secondary></indexterm>
<indexterm zone="keycode" significance="preferred"><primary>Keycode</primary></indexterm>
Keycodes lie in the inclusive range [8,255].
A keycode value carries no intrinsic information,
although server implementors may attempt to encode geometry information
(for example, matrix) to be interpreted in a server-dependent fashion.
The mapping between keys and keycodes cannot be changed using the
protocol.
</para>
<para id="keysym">
A KEYSYM is an encoding of a symbol on the cap of a key.
<indexterm zone="keysym"><primary>Types</primary><secondary>KEYSYM</secondary></indexterm>
<indexterm zone="keysym"><primary>Keysym</primary></indexterm>
The set of defined KEYSYMs include the character sets Latin-1, Latin-2,
Latin-3, Latin-4, Kana, Arabic, Cyrillic, Greek, Tech, Special, Publish, APL,
Hebrew, Thai, and Korean as well as a set of symbols common on keyboards
(Return, Help, Tab,
and so on).
KEYSYMs with the most significant bit (of the 29 bits) set are reserved
as vendor-specific.
</para>
<para>
A list of KEYSYMs is associated with each KEYCODE.
The list is intended to convey the set of symbols on the corresponding key.
If the list (ignoring trailing
<keysym>NoSymbol</keysym>
entries) is a single KEYSYM "<emphasis remap='I'>K</emphasis>",
then the list is treated as if it were
the list "<emphasis remap='I'>K</emphasis> <keysym>NoSymbol</keysym>
<emphasis remap='I'>K</emphasis> <keysym>NoSymbol</keysym>".
If the list (ignoring trailing <keysym>NoSymbol</keysym> entries)
is a pair of KEYSYMs
"<emphasis remap='I'>K1 K2</emphasis>", then the list is treated as
if it were the list
"<emphasis remap='I'>K1 K2 K1 K2</emphasis>".
If the list (ignoring trailing
<keysym>NoSymbol</keysym>
entries) is
a triple of KEYSYMs "<emphasis remap='I'>K1 K2 K3</emphasis>",
then the list is treated as if it were the list "
<emphasis remap='I'>K1 K2 K3</emphasis> <keysym>NoSymbol</keysym>".
When an explicit "void" element is desired in the list,
the value
<keysym>VoidSymbol</keysym>
can be used.
</para>
<para>
<!-- .LP -->
The first four elements of the list are split into two groups of KEYSYMs.
Group 1 contains the first and second KEYSYMs, Group 2 contains the third and
fourth KEYSYMs.
Within each group,
if the second element of the group is
<keysym>NoSymbol</keysym>,
then the group should be treated as if the second element were the
same as the first element, except when the first element is an alphabetic
KEYSYM "<emphasis remap='I'>K</emphasis>" for which both lowercase
and uppercase forms are defined.
In that case, the group should be treated as if the first element were the
lowercase form of "<emphasis remap='I'>K</emphasis>" and the second
element were the uppercase form
of "<emphasis remap='I'>K</emphasis>".
</para>

<para id="keysym_from_keypress">
The standard rules for obtaining a KEYSYM from a
<link linkend="events:KeyPress"><emphasis role='bold'>KeyPress</emphasis></link>
<indexterm zone="keysym_from_keypress"><primary>KeyPress</primary></indexterm>
event make use of only the Group 1 and Group 2 KEYSYMs; no interpretation of
other KEYSYMs in the list is defined.  The modifier state determines which
group to use.  Switching between groups is controlled by the KEYSYM named
MODE SWITCH, by attaching that KEYSYM to some KEYCODE and attaching that
KEYCODE to any one of the modifiers
<emphasis role='bold'>Mod1</emphasis>
through
<emphasis role='bold'>Mod5</emphasis>.
This modifier is
<indexterm zone="group_modifier" significance="preferred"><primary>modifier</primary><secondary>group</secondary></indexterm>
called the "<firstterm id="group_modifier">group modifier</firstterm>".  For any KEYCODE, Group 1 is used when the
group modifier is off, and Group 2 is used when the group modifier is on.
</para>

<para id="modifier:lock">
The
<emphasis role='bold'>Lock</emphasis>
<indexterm zone="modifier:lock" significance="preferred"><primary>modifier</primary><secondary>Lock</secondary></indexterm>
modifier is interpreted as CapsLock when the KEYSYM named CAPS
LOCK is attached to some KEYCODE and that KEYCODE is attached to the
<emphasis role='bold'>Lock</emphasis>
modifier.  The
<emphasis role='bold'>Lock</emphasis>
modifier is interpreted as ShiftLock when the KEYSYM
named SHIFT LOCK is attached to some KEYCODE and that KEYCODE is attached
to the
<emphasis role='bold'>Lock</emphasis>
modifier.  If the
<emphasis role='bold'>Lock</emphasis>
modifier could be interpreted as both
CapsLock and ShiftLock, the CapsLock interpretation is used.
</para>

<para id="modifier:numlock">
<!-- .LP -->
The operation of "keypad" keys is controlled by the KEYSYM named NUM LOCK,
by attaching that KEYSYM to some KEYCODE and attaching that KEYCODE to any
one of the modifiers
<emphasis role='bold'>Mod1</emphasis>
through
<emphasis role='bold'>Mod5</emphasis>.
This modifier is called the
<indexterm zone="modifier:lock" significance="preferred"><primary>modifier</primary><secondary>NumLock</secondary></indexterm>
"numlock modifier".  The standard KEYSYMs with the prefix KEYPAD in their
name are called "keypad" KEYSYMs; these are KEYSYMS with numeric value in
the hexadecimal range #xFF80 to #xFFBD inclusive.  In addition,
vendor-specific KEYSYMS in the hexadecimal range #x11000000 to #x1100FFFF
are also keypad KEYSYMs.
</para>
<para>
<!-- .LP -->
Within a group, the choice of KEYSYM is determined by applying the first
rule that is satisfied from the following list:
</para>

<itemizedlist>
  <listitem>
    <para>
The numlock modifier is on and the second KEYSYM is a keypad KEYSYM.  In
this case, if the
<emphasis role='bold'>Shift</emphasis>
modifier is on, or if the
<emphasis role='bold'>Lock</emphasis>
modifier is on and
is interpreted as ShiftLock, then the first KEYSYM is used; otherwise, the
second KEYSYM is used.
    </para>
  </listitem>
  <listitem>
    <para>
The
<emphasis role='bold'>Shift</emphasis>
and
<emphasis role='bold'>Lock</emphasis>
modifiers are both off.  In this case, the first
KEYSYM is used.
    </para>
  </listitem>
  <listitem>
    <para>
The
<emphasis role='bold'>Shift</emphasis>
modifier is off, and the
<emphasis role='bold'>Lock</emphasis>
modifier is on and is
interpreted as CapsLock.  In this case, the first KEYSYM is used, but if
that KEYSYM is lowercase alphabetic, then the corresponding uppercase
KEYSYM is used instead.
    </para>
  </listitem>
  <listitem>
    <para>
The
<emphasis role='bold'>Shift</emphasis>
modifier is on, and the
<emphasis role='bold'>Lock</emphasis>
modifier is on and is interpreted
as CapsLock.  In this case, the second KEYSYM is used, but if that KEYSYM
is lowercase alphabetic, then the corresponding uppercase KEYSYM is used
instead.
    </para>
  </listitem>
  <listitem>
    <para>
The
<emphasis role='bold'>Shift</emphasis>
modifier is on, or the
<emphasis role='bold'>Lock</emphasis>
modifier is on and is interpreted
as ShiftLock, or both.  In this case, the second KEYSYM is used.
    </para>
  </listitem>
</itemizedlist>

<para>
<!-- .LP -->
The mapping between KEYCODEs and KEYSYMs is not used directly by the server;
it is merely stored for reading and writing by clients.
</para>
</chapter>

<chapter id='Pointers'>
<title>Pointers</title>
<!-- .XS -->
<!-- (SN Pointers -->
<!-- .XE -->
<para id="pointers:buttons">
Buttons are always numbered starting with one.
<indexterm zone="pointers:buttons"><primary>Button</primary><secondary>number</secondary></indexterm>
</para>
</chapter>

<chapter id='Predefined_Atoms'>
<title>Predefined Atoms</title>
<!-- .XS -->
<!-- (SN Predefined Atoms -->
<!-- .XE -->
<para>
<!-- .LP -->
<indexterm zone="Predefined_Atoms"><primary>Atom</primary><secondary>predefined</secondary></indexterm>
Predefined atoms are not strictly necessary and may not be useful in all
environments, but they will eliminate many
<link linkend="requests:InternAtom"><emphasis role='bold'>InternAtom</emphasis></link>
requests in most applications.
Note that they are predefined only in the sense of having numeric values,
not in the sense of having required semantics.
The core protocol imposes no semantics on these names,
but semantics are specified in other X Window System standards,
such as the
<citetitle>Inter-Client Communication Conventions Manual</citetitle>
and the <citetitle>X Logical Font Description Conventions</citetitle>.
</para>

<para>
The following names have predefined atom values.
Note that uppercase and lowercase matter.
</para>

<simplelist type='vert' columns='3'>
  <member>ARC</member>
  <member>ATOM</member>
  <member>BITMAP</member>
  <member>CAP_HEIGHT</member>
  <member>CARDINAL</member>
  <member>COLORMAP</member>
  <member>COPYRIGHT</member>
  <member>CURSOR</member>
  <member>CUT_BUFFER0</member>
  <member>CUT_BUFFER1</member>
  <member>CUT_BUFFER2</member>
  <member>CUT_BUFFER3</member>
  <member>CUT_BUFFER4</member>
  <member>CUT_BUFFER5</member>
  <member>CUT_BUFFER6</member>
  <member>CUT_BUFFER7</member>
  <member>DRAWABLE</member>
  <member>END_SPACE</member>
  <member>FAMILY_NAME</member>
  <member>FONT</member>
  <member>FONT_NAME</member>
  <member>FULL_NAME</member>
  <member>INTEGER</member>
  <member>ITALIC_ANGLE</member>
  <member>MAX_SPACE</member>
  <member>MIN_SPACE</member>
  <member>NORM_SPACE</member>
  <member>NOTICE</member>
  <member>PIXMAP</member>
  <member>POINT</member>
  <member>POINT_SIZE</member>
  <member>PRIMARY</member>
  <member>QUAD_WIDTH</member>
  <member>RECTANGLE</member>
  <member>RESOLUTION</member>
  <member>RESOURCE_MANAGER</member>
  <member>RGB_BEST_MAP</member>
  <member>RGB_BLUE_MAP</member>
  <member>RGB_COLOR_MAP</member>
  <member>RGB_DEFAULT_MAP</member>
  <member>RGB_GRAY_MAP</member>
  <member>RGB_GREEN_MAP</member>
  <member>RGB_RED_MAP</member>
  <member>SECONDARY</member>
  <member>STRIKEOUT_ASCENT</member>
  <member>STRIKEOUT_DESCENT</member>
  <member>STRING</member>
  <member>SUBSCRIPT_X</member>
  <member>SUBSCRIPT_Y</member>
  <member>SUPERSCRIPT_X</member>
  <member>SUPERSCRIPT_Y</member>
  <member>UNDERLINE_POSITION</member>
  <member>UNDERLINE_THICKNESS</member>
  <member>VISUALID</member>
  <member>WEIGHT</member>
  <member>WINDOW</member>
  <member>WM_CLASS</member>
  <member>WM_CLIENT_MACHINE</member>
  <member>WM_COMMAND</member>
  <member>WM_HINTS</member>
  <member>WM_ICON_NAME</member>
  <member>WM_ICON_SIZE</member>
  <member>WM_NAME</member>
  <member>WM_NORMAL_HINTS</member>
  <member>WM_SIZE_HINTS</member>
  <member>WM_TRANSIENT_FOR</member>
  <member>WM_ZOOM_HINTS</member>
  <member>X_HEIGHT</member>
</simplelist>

<para>
<!-- .LP -->
To avoid conflicts with possible future names for which semantics might be
imposed (either at the protocol level or in terms of higher level user
interface models),
names beginning with an underscore should be used for atoms
that are private to a particular vendor or organization.
To guarantee no conflicts between vendors and organizations,
additional prefixes need to be used.
However, the protocol does not define the mechanism for choosing such prefixes.
For names private to a single application or end user but stored in globally
accessible locations,
it is suggested that two leading underscores be used to avoid conflicts with
other names.
</para>
</chapter>

<chapter id='Connection_Setup'>
  <title>Connection Setup</title>
  <indexterm zone="Connection_Setup"><primary>Connection</primary></indexterm>

  <para>
For remote clients,
the X protocol can be built on top of any reliable byte stream.
  </para>

  <section id="connection_initiation">
    <title>Connection Initiation</title>
    <indexterm zone="connection_initiation"><primary>Connection</primary><secondary>opening</secondary></indexterm>

    <para id="byte-order">
The client must send an initial byte of data to identify the byte order to be
employed.
<indexterm zone="byte-order"><primary>Byte order</primary></indexterm>
The value of the byte must be octal 102 or 154.
The value 102 (ASCII uppercase B) means values are transmitted most significant
byte first, and value 154 (ASCII lowercase l) means values are transmitted
least significant byte first.
Except where explicitly noted in the protocol,
all 16-bit and 32-bit quantities sent by the client must be transmitted with
this byte order,
and all 16-bit and 32-bit quantities returned by the server will be transmitted
with this byte order.
    </para>
    <para>
Following the byte-order byte,
the client sends the following information at connection setup:
    </para>
    <blockquote>
    <para>
protocol-major-version: CARD16
    </para>
    <para>
protocol-minor-version: CARD16
    </para>
    <para>
authorization-protocol-name: STRING8
    </para>
    <para>
authorization-protocol-data: STRING8
    </para>
    </blockquote>
    <para>
The version numbers indicate what version of the protocol the client
expects the server to implement.
    </para>
    <para id="authorization">
The authorization name indicates what authorization (and authentication)
protocol the client
expects the server to use, and the data is specific to that protocol.
<indexterm zone="authorization" significance="preferred"><primary>Authorization</primary></indexterm>
Specification of valid authorization mechanisms is not part of the core
X protocol.
A server that does not implement the protocol the client expects
or that only implements the host-based mechanism may simply ignore this
information.
If both name and data strings are empty,
this is to be interpreted as "no explicit authorization."
    </para>
  </section>

  <section id="server_response">
    <title>Server Response</title>

    <para>
The client receives the following information at connection setup:
    </para>

<itemizedlist>
  <listitem>
    <para>
success:
{ <emphasis role='bold'>Failed</emphasis>,
<emphasis role='bold'>Success</emphasis>,
<emphasis role='bold'>Authenticate</emphasis>}
    </para>
  </listitem>
</itemizedlist>

    <para>
The client receives the following additional data if the returned success
value is
<emphasis role='bold'>Failed</emphasis>,
and the connection is not successfully established:
    </para>

<blockquote>
    <para>
protocol-major-version: CARD16
    </para>
    <para>
protocol-minor-version: CARD16
    </para>
    <para>
reason: STRING8
    </para>
</blockquote>

    <para>
The client receives the following additional data if the returned success
value is
<emphasis role='bold'>Authenticate</emphasis>,
and further authentication negotiation is required:
    </para>

<blockquote>
    <para>
reason: STRING8
    </para>
</blockquote>

    <para>
The contents of the reason string are specific to the authorization
protocol in use.  The semantics of this authentication negotiation are
not constrained, except that the negotiation must eventually terminate
with a reply from the server containing a success value of
<emphasis role='bold'>Failed</emphasis>
or
<emphasis role='bold'>Success</emphasis>.
    </para>

    <para>
The client receives the following additional data if the returned success
value is
<emphasis role='bold'>Success</emphasis>,
and the connection is successfully established:
    </para>

<blockquote>
    <para>
protocol-major-version: CARD16
    </para>
    <para>
<!-- .br -->
protocol-minor-version: CARD16
    </para>
    <para>
<!-- .br -->
vendor: STRING8
    </para>
    <para>
<!-- .br -->
release-number: CARD32
    </para>
    <para>
<!-- .br -->
resource-id-base, resource-id-mask: CARD32
    </para>
    <para>
<!-- .br -->
image-byte-order:
{ <emphasis role='bold'>LSBFirst</emphasis>,
<emphasis role='bold'>MSBFirst</emphasis> }
    </para>
    <para>
<!-- .br -->
bitmap-scanline-unit: {8, 16, 32}
    </para>
    <para>
<!-- .br -->
bitmap-scanline-pad: {8, 16, 32}
    </para>
    <para>
<!-- .br -->
bitmap-bit-order:
{ <emphasis role='bold'>LeastSignificant</emphasis>,
<emphasis role='bold'>MostSignificant</emphasis> }
    </para>
    <para>
<!-- .br -->
pixmap-formats: LISTofFORMAT
    </para>
    <para>
<!-- .br -->
roots: LISTofSCREEN
    </para>
    <para>
<!-- .br -->
motion-buffer-size: CARD32
    </para>
    <para>
<!-- .br -->
maximum-request-length: CARD16
    </para>
    <para>
<!-- .br -->
min-keycode, max-keycode: KEYCODE
    </para>
    <para>
where:
    </para>
    <blockquote>
<informaltable frame="none">
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <tbody>
    <row>
      <entry>FORMAT:</entry>
      <entry>[depth: CARD8,</entry>
    </row>
    <row>
      <entry></entry>
      <entry>
bits-per-pixel: {1, 4, 8, 16, 24, 32}
      </entry>
    </row>
    <row>
      <entry></entry>
      <entry>
scanline-pad: {8, 16, 32}]
      </entry>
    </row>
    <row>
      <entry>SCREEN:</entry>
      <entry>[root: WINDOW</entry>
    </row>
    <row>
      <entry></entry>
      <entry>width-in-pixels, height-in-pixels: CARD16</entry>
    </row>
    <row>
      <entry></entry>
      <entry>width-in-millimeters, height-in-millimeters: CARD16</entry>
    </row>
    <row>
      <entry></entry>
      <entry>allowed-depths: LISTofDEPTH</entry>
    </row>
    <row>
      <entry></entry>
      <entry>root-depth: CARD8</entry>
    </row>
    <row>
      <entry></entry>
      <entry>root-visual: VISUALID</entry>
    </row>
    <row>
      <entry></entry>
      <entry>default-colormap: COLORMAP</entry>
    </row>
    <row>
      <entry></entry>
      <entry>white-pixel, black-pixel: CARD32</entry>
    </row>
    <row>
      <entry></entry>
      <entry>min-installed-maps, max-installed-maps: CARD16</entry>
    </row>
    <row>
      <entry></entry>
      <entry>backing-stores: {Never, WhenMapped, Always}</entry>
    </row>
    <row>
      <entry></entry>
      <entry>save-unders: BOOL</entry>
    </row>
    <row>
      <entry></entry>
      <entry>current-input-masks: SETofEVENT]</entry>
    </row>
    <row>
      <entry>DEPTH:</entry>
      <entry>[depth: CARD8</entry>
    </row>
    <row>
      <entry></entry>
      <entry>visuals: LISTofVISUALTYPE]</entry>
    </row>
    <row>
      <entry>VISUALTYPE:</entry>
      <entry>[visual-id: VISUALID</entry>
    </row>
    <row>
      <entry></entry>
      <entry>
class: {StaticGray, StaticColor, TrueColor, GrayScale,
PseudoColor, DirectColor}
      </entry>
    </row>
    <row>
      <entry></entry>
      <entry>red-mask, green-mask, blue-mask: CARD32</entry>
    </row>
    <row>
      <entry></entry>
      <entry>bits-per-rgb-value: CARD8</entry>
    </row>
    <row>
      <entry></entry>
      <entry>colormap-entries: CARD16]</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
    </blockquote>
</blockquote>
  </section>

  <section id="server_information">
    <title>Server Information</title>

    <para>
The information that is global to the server is:
    </para>

    <para>
The protocol version numbers are an escape hatch in case future revisions of
the protocol are necessary.
In general,
the major version would increment for incompatible changes,
and the minor version would increment for small upward compatible changes.
Barring changes,
the major version will be 11, and the minor version will be 0.
The protocol version numbers returned indicate the protocol the server
actually supports.
This might not equal the version sent by the client.
The server can (but need not) refuse connections from clients that offer a
different version than the server supports.
A server can (but need not) support more than one version simultaneously.
    </para>
    <para>
The vendor string gives some identification of the owner of the server
implementation.
The vendor controls the semantics of the release number.
    </para>
    <para id="resource-id-mask">
The resource-id-mask contains a single contiguous set of bits (at least 18).
The client allocates resource IDs for types WINDOW, PIXMAP,
CURSOR, FONT, GCONTEXT, and COLORMAP by choosing a value with only
some subset of these bits set and ORing it with resource-id-base.
<indexterm zone="resource-id-mask"><primary>Resource</primary><secondary>ID</secondary></indexterm>
Only values constructed in this way can be used to name newly created
resources over this connection.
Resource IDs never have the top three bits set.
The client is not restricted to linear or contiguous allocation
of resource IDs.
Once an ID has been freed,
it can be reused.
An ID must be unique with respect to the IDs of all other resources,
not just other resources of the same type.
However, note that the value spaces of resource identifiers,
atoms, visualids, and keysyms are distinguished by context, and
as such, are not required to be disjoint; for example, a given numeric value
might be both a valid window ID, a valid atom, and a valid keysym.
    </para>
    <para>
Although the server is in general responsible for byte-swapping data to
match the client,
images are always transmitted and received in formats (including byte order)
specified by the server.
The byte order for images is given by image-byte-order and applies to each
scanline unit in XY format (bitmap format) and to each pixel value in Z format.
    </para>
    <para id="bitmap-format">
A bitmap is represented in <glossterm linkend="glossary:Scanline_order">scanline order</glossterm>.
<indexterm zone="bitmap-format"><primary>Bitmap</primary><secondary>format</secondary></indexterm>
Each <glossterm linkend="glossary:Scanline">scanline</glossterm>
is padded to a multiple of bits as given by bitmap-scanline-pad.
The pad bits are of arbitrary value.
The scanline is quantized in multiples of bits as given by bitmap-scanline-unit.
The bitmap-scanline-unit is always less than or equal to the
bitmap-scanline-pad.
Within each unit,
the leftmost bit in the bitmap is either the least significant
or most significant bit in the unit, as given by bitmap-bit-order.
<indexterm zone="bitmap-format"><primary>XYFormat</primary></indexterm>
If a pixmap is represented in XY format,
each plane is represented as a bitmap, and the planes appear from
most significant to least significant in bit order with no padding
between planes.
    </para>
    <para id="pixmap-formats">
Pixmap-formats contains one entry for each
<glossterm linkend="glossary:Depth">depth</glossterm> value.
<indexterm zone="pixmap-formats"><primary>Pixmap</primary><secondary>format</secondary></indexterm>
<indexterm zone="pixmap-formats"><primary>ZFormat</primary></indexterm>
The entry describes the <glossterm linkend="glossary:ZFormat">Z format</glossterm>
used to represent images of that depth.
An entry for a depth is included if any screen supports that depth,
and all screens supporting that depth must support only that Z format for that
depth.
In Z format,
the pixels are in scanline order, left to right within a scanline.
The number of bits used to hold each pixel is given by bits-per-pixel.
Bits-per-pixel may be larger than strictly required by the depth,
in which case the least significant bits are used to hold
the pixmap data, and the values of the unused high-order bits are
undefined.
When the bits-per-pixel is 4,
the order of nibbles in the byte is the same as the image byte-order.
When the bits-per-pixel is 1,
the format is identical for bitmap format.
Each scanline is padded to a multiple of bits as given by scanline-pad.
When bits-per-pixel is 1,
this will be identical to bitmap-scanline-pad.
    </para>
    <para>
How a pointing device roams the screens is up to the server
implementation and is transparent to the protocol.
No geometry is defined among screens.
    </para>
    <para>
The server may retain the recent history of pointer motion and do so to a
finer granularity than is reported by
<link linkend="events:MotionNotify"><emphasis role='bold'>MotionNotify</emphasis></link>
events.
The
<link linkend="requests:GetMotionEvents"><emphasis role='bold'>GetMotionEvents</emphasis></link>
request makes such history available.
The motion-buffer-size gives the approximate maximum number
of elements in the history buffer.
    </para>
    <para id="Maximum-request-length">
Maximum-request-length specifies the maximum length of a request
accepted by the server, in 4-byte units.
<indexterm zone="Maximum-request-length"><primary>Request</primary><secondary>length</secondary></indexterm>
That is, length is the maximum value that can appear in the length field of a
request.
Requests larger than this maximum generate a
<emphasis role='bold'>Length</emphasis>
error,
and the server will read and simply discard the entire request.
Maximum-request-length will always be at least 4096
(that is, requests of length up to and including 16384 bytes
will be accepted by all servers).
    </para>
    <para id="keycode_range">
<indexterm zone="keycode_range"><primary>Types</primary><secondary>KEYCODE</secondary></indexterm>
<indexterm zone="keycode_range"><primary>Keycode</primary></indexterm>
Min-keycode and max-keycode specify the smallest and largest keycode
values transmitted by the server.
Min-keycode is never less than 8,
and max-keycode is never greater than 255.
Not all keycodes in this range are required to have corresponding keys.
    </para>
  </section>

  <section id="screen_information">
    <title>Screen Information</title>
    <indexterm zone="screen_information"><primary>Screen</primary></indexterm>

    <para>
The information that applies per screen is:
    </para>

    <para>
The allowed-depths specifies what pixmap and window depths are supported.
Pixmaps are supported for each depth listed,
and windows of that depth are supported if at least one visual type is listed
for the depth.
A pixmap depth of one is always supported and listed,
but windows of depth one might not be supported.
A depth of zero is never listed,
but zero-depth
<emphasis role='bold'>InputOnly</emphasis>
windows are always supported.
    </para>
    <para>
Root-depth and root-visual specify the depth and visual type of the
root window.
Width-in-pixels and height-in-pixels specify the size of
the root window (which cannot be changed).
The class of the root window is always
<emphasis role='bold'>InputOutput</emphasis>.
Width-in-millimeters and height-in-millimeters can be used to determine the
physical size and the aspect ratio.
    </para>
    <para>
The default-colormap is the one initially associated with the root window.
Clients with minimal color requirements creating windows of
the same depth as the root may want to allocate from this map by
default.
    </para>
    <para>
Black-pixel and white-pixel can be used in implementing a monochrome
application.
These pixel values are for permanently allocated entries in the
default-colormap.
The actual RGB values may be settable on some screens
and, in any case, may not actually be black and white.
The names are intended to convey the expected relative intensity of the colors.
    </para>
    <para>
The border of the root window is initially a pixmap filled with the black-pixel.
The initial background of the root window is a pixmap filled with some
unspecified two-color pattern using black-pixel and white-pixel.
    </para>
    <para>
Min-installed-maps specifies the number of maps that can be guaranteed
to be installed simultaneously (with
<link linkend="requests:InstallColormap"><emphasis role='bold'>InstallColormap</emphasis></link>),
regardless of the number of entries allocated in each map.
Max-installed-maps specifies the maximum number of maps that might possibly be
installed simultaneously, depending on their allocations.
Multiple static-visual colormaps with identical contents but differing in
resource ID should be considered as a single map for the purposes of this
number.
For the typical case of a single hardware colormap, both values will be 1.
    </para>
    <para id="Backing-stores">
<indexterm zone="Backing-stores"><primary>Backing store</primary></indexterm>
Backing-stores indicates when the server supports backing stores for
this screen, although it may be storage limited in the number of
windows it can support at once.
If save-unders is
<emphasis role='bold'>True</emphasis>,
the server can support the save-under mode in
<link linkend="requests:CreateWindow"><emphasis role='bold'>CreateWindow</emphasis></link>
and
<link linkend="requests:ChangeWindowAttributes"><emphasis role='bold'>ChangeWindowAttributes</emphasis></link>,
although again it may be storage limited.
    </para>
    <para>
The current-input-events is what
<link linkend="requests:GetWindowAttributes"><emphasis role='bold'>GetWindowAttributes</emphasis></link>
would return for the all-event-masks for the root window.
    </para>
  </section>

  <section id="visual_information">
    <title>Visual Information</title>
    <indexterm zone="visual_information" significance="preferred"><primary>Visual</primary><secondary>information</secondary></indexterm>

    <para>
The information that applies per visual-type is:
    </para>

    <para>
A given visual type might be listed for more than one depth or for
more than one screen.
    </para>

    <para id="colormap_types">
<indexterm zone="colormap_types" significance="preferred"><primary>Colormap</primary><secondary>types</secondary></indexterm>
<indexterm zone="colormap_types"><primary>Pixel value</primary></indexterm>
For
<emphasis role='bold'>PseudoColor</emphasis>,
a pixel value indexes a colormap to produce independent RGB values;
the RGB values can be changed dynamically.
<emphasis role='bold'>GrayScale</emphasis>
is treated in the same way as
<emphasis role='bold'>PseudoColor</emphasis>
except which primary drives the screen is undefined;
thus, the client should always store the
same value for red, green, and blue in colormaps.
For
<emphasis role='bold'>DirectColor</emphasis>,
a pixel value is decomposed into separate RGB subfields,
and each subfield separately indexes the colormap for the corresponding value.
The RGB values can be changed dynamically.
<emphasis role='bold'>TrueColor</emphasis>
is treated in the same way as
<emphasis role='bold'>DirectColor</emphasis>
except the colormap has predefined read-only RGB values.
These values are server-dependent but provide linear or near-linear
increasing ramps in each primary.
<emphasis role='bold'>StaticColor</emphasis>
is treated in the same way as
<emphasis role='bold'>PseudoColor</emphasis>
except the colormap has predefined read-only RGB values,
which are server-dependent.
<emphasis role='bold'>StaticGray</emphasis>
is treated in the same way as
<emphasis role='bold'>StaticColor</emphasis>
except the red, green, and blue values are equal for any
single pixel value, resulting in shades of gray.
<emphasis role='bold'>StaticGray</emphasis>
with a two-entry colormap can be thought of as monochrome.
    </para>

    <para>
The red-mask, green-mask, and blue-mask are only defined for
<emphasis role='bold'>DirectColor</emphasis>
and
<emphasis role='bold'>TrueColor</emphasis>.
Each has one contiguous set of bits set to 1 with no intersections.
Usually each mask has the same number of bits set to 1.
    </para>

    <para>
The bits-per-rgb-value specifies the log base 2 of the number of
distinct color intensity values (individually) of red, green, and blue.
This number need not bear any relation to the number of colormap entries.
Actual RGB values are always passed in the protocol within a
16-bit spectrum, with 0 being minimum intensity and 65535 being the
maximum intensity.
On hardware that provides a linear zero-based intensity ramp,
the following relationship exists:
    </para>

    <para>
<literallayout class="monospaced">
       hw-intensity = protocol-intensity / (65536 / total-hw-intensities)
</literallayout>
    </para>

    <para>
Colormap entries are indexed from 0.
The colormap-entries defines the number of available colormap entries in a
newly created colormap.
For
<emphasis role='bold'>DirectColor</emphasis>
and
<emphasis role='bold'>TrueColor</emphasis>,
this will usually be 2 to the power of the maximum number of bits set to 1 in
red-mask, green-mask, and blue-mask.
    </para>
  </section>
</chapter>

<chapter id='Requests'>
  <title>Requests</title>
  <section id="requests:CreateWindow">
    <title>CreateWindow</title>
    <indexterm zone="requests:CreateWindow" significance="preferred"><primary>CreateWindow</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>wid</emphasis>, <emphasis remap='I'>parent</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>class</emphasis>:
{ <emphasis role='bold'>InputOutput</emphasis>,
<emphasis role='bold'>InputOnly</emphasis>,
<emphasis role='bold'>CopyFromParent</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>depth</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>visual</emphasis>: VISUALID or
<emphasis role='bold'>CopyFromParent</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>, <emphasis remap='I'>border-width</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request creates an unmapped window and assigns the identifier wid to it.
</para>
<para>
A class of
<emphasis role='bold'>CopyFromParent</emphasis>
means the class is taken from the parent.
A depth of zero for class
<emphasis role='bold'>InputOutput</emphasis>
or
<emphasis role='bold'>CopyFromParent</emphasis>
means the depth is taken from the parent.
A visual of
<emphasis role='bold'>CopyFromParent</emphasis>
means the visual type is taken from the parent.
For class
<emphasis role='bold'>InputOutput</emphasis>,
the visual type and depth must be a combination supported for the screen
(or a
<emphasis role='bold'>Match</emphasis>
error results).
The depth need not be the same as the parent,
but the parent must not be of class
<emphasis role='bold'>InputOnly</emphasis>
(or a
<emphasis role='bold'>Match</emphasis>
error results).
For class
<emphasis role='bold'>InputOnly</emphasis>,
the depth must be zero (or a
<emphasis role='bold'>Match</emphasis>
error results), and the visual must be one supported for the screen (or a
<emphasis role='bold'>Match</emphasis>
error results).
However, the parent can have any depth and class.
</para>
<para>
The server essentially acts as if
<emphasis role='bold'>InputOnly</emphasis>
windows do not exist for the purposes of graphics requests,
exposure processing, and
<link linkend="events:VisibilityNotify"><emphasis role='bold'>VisibilityNotify</emphasis></link>
events.
An
<emphasis role='bold'>InputOnly</emphasis>
window cannot be used as a drawable (as a source or destination for graphics
requests).
<emphasis role='bold'>InputOnly</emphasis>
and
<emphasis role='bold'>InputOutput</emphasis>
windows act identically in other respects-properties,
grabs, input control, and so on.
</para>
<para>
The coordinate system has the X axis horizontal and the Y axis vertical
with the origin [0, 0] at the upper-left corner.
Coordinates are integral,
in terms of pixels,
and coincide with pixel centers.
Each window and pixmap has its own coordinate system.
For a window,
the origin is inside the border at the inside, upper-left corner.
</para>
<para>
The x and y coordinates
for the window are relative to the parent's origin
and specify the position of the upper-left outer corner of the window
(not the origin).
The width and height specify the inside size (not including the border)
and must be nonzero (or a
<emphasis role='bold'>Value</emphasis>
error results).
The border-width for an
<emphasis role='bold'>InputOnly</emphasis>
window must be zero (or a
<emphasis role='bold'>Match</emphasis>
error results).
</para>
<para>
The window is placed on top in the stacking order with respect to siblings.
</para>
<para>
The value-mask and value-list specify attributes of the window that are
to be explicitly initialized.
The possible values are:
</para>
<informaltable frame='topbot'>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Attribute</entry>
      <entry>Type</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>background-pixmap</entry>
      <entry>
PIXMAP or
<emphasis role='bold'>None</emphasis>
or
<emphasis role='bold'>ParentRelative</emphasis>
      </entry>
    </row>
    <row>
      <entry>background-pixel</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>border-pixmap</entry>
      <entry>
PIXMAP or
<emphasis role='bold'>CopyFromParent</emphasis>
      </entry>
    </row>
    <row>
      <entry>border-pixel</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>bit-gravity</entry>
      <entry>BITGRAVITY</entry>
    </row>
    <row>
      <entry>win-gravity</entry>
      <entry>WINGRAVITY</entry>
    </row>
    <row>
      <entry>backing-store</entry>
      <entry>
{ <emphasis role='bold'>NotUseful</emphasis>,
<emphasis role='bold'>WhenMapped</emphasis>,
<emphasis role='bold'>Always</emphasis> }
      </entry>
    </row>
    <row>
      <entry>backing-planes</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>backing-pixel</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>save-under</entry>
      <entry>BOOL</entry>
    </row>
    <row>
      <entry>event-mask</entry>
      <entry>SETofEVENT</entry>
    </row>
    <row>
      <entry>do-not-propagate-mask</entry>
      <entry>SETofDEVICEEVENT</entry>
    </row>
    <row>
      <entry>override-redirect</entry>
      <entry>BOOL</entry>
    </row>
    <row>
      <entry>colormap</entry>
      <entry>
COLORMAP or
<emphasis role='bold'>CopyFromParent</emphasis>
      </entry>
    </row>
    <row>
      <entry>cursor</entry>
      <entry>
CURSOR or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
The default values when attributes are not explicitly initialized
are:
</para>

<informaltable frame='topbot'>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Attribute</entry>
      <entry>Default</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>background-pixmap</entry>
      <entry>
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>border-pixmap</entry>
      <entry>
<emphasis role='bold'>CopyFromParent</emphasis>
      </entry>
    </row>
    <row>
      <entry>bit-gravity</entry>
      <entry>
<emphasis role='bold'>Forget</emphasis>
      </entry>
    </row>
    <row>
      <entry>win-gravity</entry>
      <entry>
<emphasis role='bold'>NorthWest</emphasis>
      </entry>
    </row>
    <row>
      <entry>backing-store</entry>
      <entry>
<emphasis role='bold'>NotUseful</emphasis>
      </entry>
    </row>
    <row>
      <entry>backing-planes</entry>
      <entry>all ones</entry>
    </row>
    <row>
      <entry>backing-pixel</entry>
      <entry>zero</entry>
    </row>
    <row>
      <entry>save-under</entry>
      <entry>
<emphasis role='bold'>False</emphasis>
      </entry>
    </row>
    <row>
      <entry>event-mask</entry>
      <entry>{} (empty set)</entry>
    </row>
    <row>
      <entry>do-not-propagate-mask</entry>
      <entry>{} (empty set)</entry>
    </row>
    <row>
      <entry>override-redirect</entry>
      <entry>
<emphasis role='bold'>False</emphasis>
      </entry>
    </row>
    <row>
      <entry>colormap</entry>
      <entry>
<emphasis role='bold'>CopyFromParent</emphasis>
      </entry>
    </row>
    <row rowsep='1'>
      <entry>cursor</entry>
      <entry>
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
Only the following attributes are defined for
<emphasis role='bold'>InputOnly</emphasis>
windows:
</para>

<itemizedlist>
  <listitem>
    <para>
win-gravity
    </para>
  </listitem>
  <listitem>
    <para>
event-mask
    </para>
  </listitem>
  <listitem>
    <para>
do-not-propagate-mask
    </para>
  </listitem>
  <listitem>
    <para>
override-redirect
    </para>
  </listitem>
  <listitem>
    <para>
cursor
    </para>
  </listitem>
</itemizedlist>

<para>
It is a
<emphasis role='bold'>Match</emphasis>
error to specify any other attributes for
<emphasis role='bold'>InputOnly</emphasis>
windows.
</para>
<para id="requests:CreateWindow:background">
<indexterm zone="requests:CreateWindow:background"><primary>Background</primary></indexterm>
If background-pixmap is given,
it overrides the default background-pixmap.
The background pixmap and the window must have the
same root and the same depth (or a
<emphasis role='bold'>Match</emphasis>
error results).
Any size pixmap can be used, although some sizes may be faster than others.
If background
<emphasis role='bold'>None</emphasis>
is specified, the window has no defined background.
If background
<emphasis role='bold'>ParentRelative</emphasis>
is specified, the parent's background is used,
but the window must have the same depth as the parent (or a
<emphasis role='bold'>Match</emphasis>
error results).
If the parent has background
<emphasis role='bold'>None</emphasis>,
then the window will also have background
<emphasis role='bold'>None</emphasis>.
A copy of the parent's background is not made.
The parent's background is reexamined each time the window background is
required.
If background-pixel is given, it overrides the default
background-pixmap and any background-pixmap given explicitly,
and a pixmap of undefined size filled with background-pixel is used for the
background.
Range checking is not performed on the background-pixel value;
it is simply truncated to the appropriate number of bits.
For a
<emphasis role='bold'>ParentRelative</emphasis>
background,
the background tile origin always aligns with the parent's background tile
origin.
Otherwise, the background tile origin is always the window origin.
</para>
<para>
When no valid contents are available for regions of a window
and the regions are either visible or the server is maintaining backing store,
the server automatically tiles the regions with the window's background
unless the window has a background of
<emphasis role='bold'>None</emphasis>.
If the background is
<emphasis role='bold'>None</emphasis>,
the previous screen contents from other windows of the same depth as the window
are simply left in place if the contents come from the parent of the window
or an inferior of the parent;
otherwise, the initial contents of the exposed regions are undefined.
Exposure events are then generated for the regions, even if the background is
<emphasis role='bold'>None</emphasis>.
</para>
<para>
The border tile origin is always the same as the background tile origin.
If border-pixmap is given,
it overrides the default border-pixmap.
The border pixmap and the window must have the same root
and the same depth (or a
<emphasis role='bold'>Match</emphasis>
error results).
Any size pixmap can be used,
although some sizes may be faster than others.
If
<emphasis role='bold'>CopyFromParent</emphasis>
is given, the parent's border pixmap is copied (subsequent changes to
the parent's border attribute do not affect the child),
but the window must have the same depth as the parent (or a
<emphasis role='bold'>Match</emphasis>
error results).
The pixmap might be copied by sharing the same pixmap object between the
child and parent or by making a complete copy of the pixmap contents.
If border-pixel is given,
it overrides the default border-pixmap and any border-pixmap given explicitly,
and a pixmap of undefined size filled with border-pixel is used for the border.
Range checking is not performed on the border-pixel value;
it is simply truncated to the appropriate number of bits.
</para>
<para>
Output to a window is always clipped to the inside of the window,
so that the border is never affected.
</para>
<para>
The bit-gravity defines which region of the window should be retained
if the window is resized, and win-gravity defines how the window should
be repositioned if the parent is resized (see
<link linkend="requests:ConfigureWindow"><emphasis role='bold'>ConfigureWindow</emphasis></link>
request).
</para>
<para>
A backing-store of
<emphasis role='bold'>WhenMapped</emphasis>
advises the server that maintaining contents of obscured regions
when the window is mapped would be beneficial.
A backing-store of
<emphasis role='bold'>Always</emphasis>
advises the server that maintaining contents even when the window is
unmapped would be beneficial.
In this case,
the server may generate an exposure event when the window is created.
A value of
<emphasis role='bold'>NotUseful</emphasis>
advises the server that maintaining contents is unnecessary,
although a server may still choose to maintain contents while the window
is mapped.
Note that if the server maintains contents,
then the server should maintain complete contents
not just the region within the parent boundaries,
even if the window is larger than its parent.
While the server maintains contents,
exposure events will not normally be generated,
but the server may stop maintaining contents at any time.
</para>
<para>
If save-under is
<emphasis role='bold'>True</emphasis>,
the server is advised that when this window is
mapped, saving the contents of windows it obscures would be beneficial.
</para>
<para>
When the contents of obscured regions of a window are being maintained,
regions obscured by noninferior windows are included in the
destination (and source, when the window is the source) of graphics
requests, but regions obscured by inferior windows are not included.
</para>
<para>
The backing-planes indicates (with bits set to 1) which bit planes
of the window hold dynamic data that must be preserved in backing-stores
and during save-unders.
The backing-pixel specifies what value to use in planes not
covered by backing-planes.
The server is free to save only the specified bit planes in the backing-store
or save-under and regenerate the remaining planes with the specified pixel
value.
Any bits beyond the specified depth of the window in these
values are simply ignored.
</para>
<para id="requests:CreateWindow:event-mask">
<indexterm zone="requests:CreateWindow:event-mask"><primary>Event</primary><secondary>mask</secondary></indexterm>
<indexterm zone="requests:CreateWindow:event-mask"><primary>Event</primary><secondary>propagation</secondary></indexterm>
The event-mask defines which events the client is interested in for
this window (or for some event types, inferiors of the window).
The do-not-propagate-mask defines which events should not be propagated to
ancestor windows when no client has the event type selected in this
window.
</para>
<para>
The override-redirect specifies whether map and configure requests on this
window should override a
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent, typically to inform a window manager not to tamper with
the window.
</para>
<para>
The colormap specifies the colormap that best reflects the true
colors of the window.
Servers capable of supporting multiple hardware colormaps may use this
information, and window managers may use it for
<link linkend="requests:InstallColormap"><emphasis role='bold'>InstallColormap</emphasis></link>
requests.
The colormap must have the same visual type and root as the window (or a
<emphasis role='bold'>Match</emphasis>
error results).
If
<emphasis role='bold'>CopyFromParent</emphasis>
is specified,
the parent's colormap is copied (subsequent changes to the parent's
colormap attribute do not affect the child).
However, the window must have the same visual type as the parent (or a
<emphasis role='bold'>Match</emphasis>
error results), and the parent must not have a colormap of
<emphasis role='bold'>None</emphasis>
(or a
<emphasis role='bold'>Match</emphasis>
error results).
For an explanation of
<emphasis role='bold'>None</emphasis>,
see <link linkend="requests:FreeColormap"><emphasis role='bold'>FreeColormap</emphasis></link>
request.
The colormap is copied by sharing the colormap object between the child
and the parent,
not by making a complete copy of the colormap contents.
</para>
<para>
If a cursor is specified,
it will be used whenever the pointer is in the window.
If
<emphasis role='bold'>None</emphasis>
is specified,
the parent's cursor will be used when the pointer is in the window,
and any change in the parent's cursor will cause an immediate change
in the displayed cursor.
</para>
<para>
This request generates a
<link linkend="events:CreateNotify"><emphasis role='bold'>CreateNotify</emphasis></link>
event.
</para>
<para>
The background and border pixmaps and the cursor may be freed
immediately if no further explicit references to them are to be made.
</para>
<para>
Subsequent drawing into the background or border pixmap has an
undefined effect on the window state.
The server might or might not make a copy of the pixmap.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeWindowAttributes">
    <title>ChangeWindowAttributes</title>
    <indexterm zone="requests:ChangeWindowAttributes" significance="preferred"><primary>ChangeWindowAttributes</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The value-mask and value-list specify which attributes are to be changed.
The values and restrictions are the same as for
<link linkend="requests:CreateWindow"><emphasis role='bold'>CreateWindow</emphasis></link>.
</para>
<para>
Setting a new background, whether by background-pixmap or
background-pixel, overrides any previous background.
Setting a new border, whether by border-pixel or border-pixmap,
overrides any previous border.
</para>
<para>
Changing the background does not cause the window contents to be changed.
Setting the border or changing the background such that the
border tile origin changes causes the border to be repainted.
Changing the background of a root window to
<emphasis role='bold'>None</emphasis>
or
<emphasis role='bold'>ParentRelative</emphasis>
restores the default background pixmap.
Changing the border of a root window to
<emphasis role='bold'>CopyFromParent</emphasis>
restores the default border pixmap.
</para>
<para>
Changing the win-gravity does not affect the current position of the
window.
</para>
<para>
Changing the backing-store of an obscured window to
<emphasis role='bold'>WhenMapped</emphasis>
or
<emphasis role='bold'>Always</emphasis>
or changing the backing-planes, backing-pixel, or save-under of
a mapped window may have no immediate effect.
</para>
<para>
Multiple clients can select input on the same window;
their event-masks are disjoint.
When an event is generated,
it will be reported to all interested clients.
However, only one client at a time can select for
<emphasis role='bold'>SubstructureRedirect</emphasis>,
only one client at a time can select for
<emphasis role='bold'>ResizeRedirect</emphasis>,
and only one client at a time can select for
<link linkend="events:ButtonPress"><emphasis role='bold'>ButtonPress</emphasis></link>.
An attempt to violate these restrictions results in an
<emphasis role='bold'>Access</emphasis>
error.
</para>
<para>
There is only one do-not-propagate-mask for a window, not one per
client.
</para>
<para>
Changing the colormap of a window (by defining a new map, not by
changing the contents of the existing map) generates a
<link linkend="events:ColormapNotify"><emphasis role='bold'>ColormapNotify</emphasis></link>
event.
Changing the colormap of a visible window might have no immediate effect
on the screen (see
<link linkend="requests:InstallColormap"><emphasis role='bold'>InstallColormap</emphasis></link>
request).
</para>
<para>
Changing the cursor of a root window to
<emphasis role='bold'>None</emphasis>
restores the default cursor.
</para>
<para>
The order in which attributes are verified and altered is server-dependent.
If an error is generated,
a subset of the attributes may have been altered.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetWindowAttributes">
    <title>GetWindowAttributes</title>
    <indexterm zone="requests:GetWindowAttributes" significance="preferred"><primary>GetWindowAttributes</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
visual: VISUALID
      </entry>
    </row>
    <row>
      <entry>
class:
{ <emphasis role='bold'>InputOutput</emphasis>,
<emphasis role='bold'>InputOnly</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
bit-gravity: BITGRAVITY
      </entry>
    </row>
    <row>
      <entry>
win-gravity: WINGRAVITY
      </entry>
    </row>
    <row>
      <entry>
backing-store:
{ <emphasis role='bold'>NotUseful</emphasis>,
<emphasis role='bold'>WhenMapped</emphasis>,
<emphasis role='bold'>Always</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
backing-planes: CARD32
      </entry>
    </row>
    <row>
      <entry>
backing-pixel: CARD32
      </entry>
    </row>
    <row>
      <entry>
save-under: BOOL
      </entry>
    </row>
    <row>
      <entry>
colormap: COLORMAP or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
map-is-installed: BOOL
      </entry>
    </row>
    <row>
      <entry>
map-state:
{ <emphasis role='bold'>Unmapped</emphasis>,
<emphasis role='bold'>Unviewable</emphasis>,
<emphasis role='bold'>Viewable</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
all-event-masks, your-event-mask: SETofEVENT
      </entry>
    </row>
    <row>
      <entry>
do-not-propagate-mask: SETofDEVICEEVENT
      </entry>
    </row>
    <row>
      <entry>
override-redirect: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current attributes of the window.
A window is
<emphasis role='bold'>Unviewable</emphasis>
if it is mapped but some ancestor is unmapped.
All-event-masks is the inclusive-OR of all event masks selected on the window
by clients.
Your-event-mask is the event mask selected by the querying client.
<!-- .sp -->
</para>
  </section>
  <section id="requests:DestroyWindow">
    <title>DestroyWindow</title>
    <indexterm zone="requests:DestroyWindow" significance="preferred"><primary>DestroyWindow</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the argument window is mapped,
an
<link linkend="requests:UnmapWindow"><emphasis role='bold'>UnmapWindow</emphasis></link>
request is performed automatically.
The window and all inferiors are then destroyed, and a
<link linkend="events:DestroyNotify"><emphasis role='bold'>DestroyNotify</emphasis></link>
event is generated for each window.
The ordering of the
<emphasis role='bold'>DestroyNotify</emphasis>
events is such that for any given window,
<emphasis role='bold'>DestroyNotify</emphasis>
is generated on all inferiors of the window before being generated on
the window itself.
The ordering among siblings and across subhierarchies is not otherwise
constrained.
</para>
<para>
Normal exposure processing on formerly obscured windows is performed.
</para>
<para>
If the window is a root window,
this request has no effect.
<!-- .sp -->
</para>
  </section>
  <section id="requests:DestroySubwindows">
    <title>DestroySubwindows</title>
    <indexterm zone="requests:DestroySubwindows" significance="preferred"><primary>DestroySubwindows</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request performs a
<link linkend="requests:DestroyWindow"><emphasis role='bold'>DestroyWindow</emphasis></link>
request on all children of the window, in bottom-to-top stacking order.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeSaveSet">
    <title>ChangeSaveSet</title>
    <indexterm zone="requests:ChangeSaveSet" significance="preferred"><primary>ChangeSaveSet</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Insert</emphasis>,
<emphasis role='bold'>Delete</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
Errors:
<!-- .in +.2i -->
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request adds or removes the specified window from the client's
save-set.
The window must have been created by some other client (or a
<emphasis role='bold'>Match</emphasis>
error results).
For further information about the use of the save-set,
see <link linkend='Connection_Close'>section 10</link>.
</para>
<para>
When windows are destroyed,
the server automatically removes them from the save-set.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ReparentWindow">
    <title>ReparentWindow</title>
    <indexterm zone="requests:ReparentWindow" significance="preferred"><primary>ReparentWindow</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>, <emphasis remap='I'>parent</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the window is mapped,
an
<link linkend="requests:UnmapWindow"><emphasis role='bold'>UnmapWindow</emphasis></link>
request is performed automatically first.
The window is then removed from its current position in the hierarchy
and is inserted as a child of the specified parent.
The x and y coordinates are relative to the parent's origin
and specify the new position of the upper-left outer corner of the
window.
The window is placed on top in the stacking order with respect
to siblings.
A
<link linkend="events:ReparentNotify"><emphasis role='bold'>ReparentNotify</emphasis></link>
event is then generated.
The override-redirect attribute of the window is passed on in this event;
a value of
<emphasis role='bold'>True</emphasis>
indicates that a window manager should not tamper with this window.
Finally, if the window was originally mapped, a
<link linkend="requests:MapWindow"><emphasis role='bold'>MapWindow</emphasis></link>
request is performed automatically.
</para>
<para>
Normal exposure processing on formerly obscured windows is performed.
The server might not generate exposure events for regions from the
initial unmap that are immediately obscured by the final map.
</para>
<para>
A
<emphasis role='bold'>Match</emphasis>
error is generated if:
<!-- .IP bu 5 -->
The new parent is not on the same screen as the old parent.
<!-- .IP bu 5 -->
The new parent is the window itself or an inferior of the window.
<!-- .IP bu 5 -->
The new parent is
<emphasis role='bold'>InputOnly</emphasis>,
and the window is not.
<!-- .IP bu 5 -->
The window has a
<emphasis role='bold'>ParentRelative</emphasis>
background, and the new parent is not the same depth as the window.
<!-- .sp -->
</para>
  </section>
  <section id="requests:MapWindow">
    <title>MapWindow</title>
    <indexterm zone="requests:MapWindow" significance="preferred"><primary>MapWindow</primary></indexterm>
    <indexterm zone="requests:MapWindow"><primary>Mapped window</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the window is already mapped, this request has no effect.
</para>
<para>
If the override-redirect attribute of the window is
<emphasis role='bold'>False</emphasis>
and some other client has selected
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent, then a
<link linkend="events:MapRequest"><emphasis role='bold'>MapRequest</emphasis></link>
event is generated, but the window remains unmapped.
Otherwise, the window is mapped,
and a
<link linkend="events:MapNotify"><emphasis role='bold'>MapNotify</emphasis></link>
event is generated.
</para>
<para>
If the window is now viewable and its contents have been discarded,
the window is tiled with its background (if no background is defined,
the existing screen contents are not altered), and zero or more exposure
events are generated.
If a backing-store has been maintained while the window was unmapped,
no exposure events are generated.
If a backing-store will now be maintained,
a full-window exposure is always generated.
Otherwise, only visible regions may be reported.
Similar tiling and exposure take place for any newly viewable inferiors.
<!-- .sp -->
</para>
  </section>
  <section id="requests:MapSubwindows">
    <title>MapSubwindows</title>
    <indexterm zone="requests:MapSubwindows" significance="preferred"><primary>MapSubwindows</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request performs a
<link linkend="requests:MapWindow"><emphasis role='bold'>MapWindow</emphasis></link>
request on all unmapped children of the window,
in top-to-bottom stacking order.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UnmapWindow">
    <title>UnmapWindow</title>
    <indexterm zone="requests:UnmapWindow" significance="preferred"><primary>UnmapWindow</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the window is already unmapped, this request has no effect.
Otherwise, the window is unmapped, and an
<link linkend="events:UnmapNotify"><emphasis role='bold'>UnmapNotify</emphasis></link>
event is generated.
Normal exposure processing on formerly obscured windows is performed.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UnmapSubwindows">
    <title>UnmapSubwindows</title>
    <indexterm zone="requests:UnmapSubwindows" significance="preferred"><primary>UnmapSubwindows</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request performs an
<link linkend="requests:UnmapWindow"><emphasis role='bold'>UnmapWindow</emphasis></link>
request on all mapped children of the window,
in bottom-to-top stacking order.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ConfigureWindow">
    <title>ConfigureWindow</title>
    <indexterm zone="requests:ConfigureWindow" significance="preferred"><primary>ConfigureWindow</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes the configuration of the window.
The value-mask and value-list specify which values are to be given.
The possible values are:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Attribute</entry>
      <entry>Type</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>x</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>y</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>width</entry>
      <entry>CARD16</entry>
    </row>
    <row>
      <entry>height</entry>
      <entry>CARD16</entry>
    </row>
    <row>
      <entry>border-width</entry>
      <entry>CARD16</entry>
    </row>
    <row>
      <entry>sibling</entry>
      <entry>WINDOW</entry>
    </row>
    <row>
      <entry>stack-mode</entry>
      <entry>
{ <emphasis role='bold'>Above</emphasis>,
<emphasis role='bold'>Below</emphasis>,
<emphasis role='bold'>TopIf</emphasis>,
<emphasis role='bold'>BottomIf</emphasis>,
<emphasis role='bold'>Opposite</emphasis> }
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
The x and y coordinates are relative to the parent's origin
and specify the position of the upper-left outer corner of the window.
The width and height specify the inside size, not including the border, and
must be nonzero (or a
<emphasis role='bold'>Value</emphasis>
error results).
Those values not specified are taken from the existing geometry of the window.
Note that changing just the border-width leaves the outer-left corner
of the window in a fixed position but moves the absolute position of the
window's origin.
It is a
<emphasis role='bold'>Match</emphasis>
error to attempt to make the border-width of an
<emphasis role='bold'>InputOnly</emphasis>
window nonzero.
</para>
<para>
If the override-redirect attribute of the window is
<emphasis role='bold'>False</emphasis>
and some other client has selected
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent, a
<link linkend="events:ConfigureRequest"><emphasis role='bold'>ConfigureRequest</emphasis></link>
event is generated, and no further processing is performed.
Otherwise, the following is performed:
</para>
<para>
If some other client has selected
<emphasis role='bold'>ResizeRedirect</emphasis>
on the window and the inside width or height of the window is being changed,
a
<link linkend="events:ResizeRequest"><emphasis role='bold'>ResizeRequest</emphasis></link>
event is generated,
and the current inside width and height are used instead.
Note that the override-redirect attribute of the window has no effect on
<emphasis role='bold'>ResizeRedirect</emphasis>
and that
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent has precedence over
<emphasis role='bold'>ResizeRedirect</emphasis>
on the window.
</para>
<para id="requests:ConfigureWindow:gravity">
<indexterm zone="requests:ConfigureWindow:gravity"><primary>Gravity</primary></indexterm>
<indexterm zone="requests:ConfigureWindow:gravity"><primary>Bit</primary><secondary>gravity</secondary></indexterm>
<indexterm zone="requests:ConfigureWindow:gravity"><primary>Window</primary><secondary>gravity</secondary></indexterm>
The geometry of the window is changed as specified,
the window is restacked among siblings, and a
<link linkend="events:ConfigureNotify"><emphasis role='bold'>ConfigureNotify</emphasis></link>
event is generated if the state of the window actually changes.
If the inside width or height of the window has actually changed,
then children of the window are affected,
according to their win-gravity.
Exposure processing is performed on formerly obscured windows
(including the window itself and its inferiors if regions of them were
obscured but now are not).
Exposure processing is also performed on any new regions of the window
(as a result of increasing the width or height)
and on any regions where window contents are lost.
</para>
<para>
If the inside width or height of a window is not changed
but the window is moved or its border is changed,
then the contents of the window are not lost but move with the window.
Changing the inside width or height of the window causes its contents to be
moved or lost, depending on the bit-gravity of the window.
It also causes children to be reconfigured, depending on their win-gravity.
For a change of width and height of W and H,
we define the [x, y] pairs as:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Direction</entry>
      <entry>Deltas</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>NorthWest</emphasis>
      </entry>
      <entry>[0, 0]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>North</emphasis>
      </entry>
      <entry>[W/2, 0]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>NorthEast</emphasis>
      </entry>
      <entry>[W, 0]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>West</emphasis>
      </entry>
      <entry>[0, H/2]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Center</emphasis>
      </entry>
      <entry>[W/2, H/2]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>East</emphasis>
      </entry>
      <entry>[W, H/2]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>SouthWest</emphasis>
      </entry>
      <entry>[0, H]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>South</emphasis>
      </entry>
      <entry>[W/2, H]</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>SouthEast</emphasis>
      </entry>
      <entry>[W, H]</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
When a window with one of these bit-gravities is resized,
the corresponding pair defines the change in position of each pixel in the
window.
When a window with one of these win-gravities has its parent window resized,
the corresponding pair defines the change in position
of the window within the parent.
This repositioning generates a
<link linkend="events:GravityNotify"><emphasis role='bold'>GravityNotify</emphasis></link>
event.
<emphasis role='bold'>GravityNotify</emphasis>
events are generated after the
<link linkend="events:ConfigureNotify"><emphasis role='bold'>ConfigureNotify</emphasis></link>
event is generated.
</para>
<para>
A gravity of
<emphasis role='bold'>Static</emphasis>
indicates that the contents or origin should not move relative to the origin
of the root window.
If the change in size of the window is coupled with a change
in position of [X, Y],
then for bit-gravity the change in position of each pixel is [-X, -Y] and for
win-gravity the change in position of a child when its parent is so
resized is [-X, -Y].
Note that
<emphasis role='bold'>Static</emphasis>
gravity still only takes effect when the width or height of the
window is changed, not when the window is simply moved.
</para>
<para>
A bit-gravity of
<emphasis role='bold'>Forget</emphasis>
indicates that the window contents are always discarded after a size change,
even if backing-store or save-under has been requested.
The window is tiled with its background (except, if no background is defined,
the existing screen contents are not altered)
and zero or more exposure events are generated.
</para>
<para>
The contents and borders of inferiors are not affected by their parent's
bit-gravity.
A server is permitted to ignore the specified bit-gravity and use
<emphasis role='bold'>Forget</emphasis>
instead.
</para>
<para>
A win-gravity of
<emphasis role='bold'>Unmap</emphasis>
is like
<emphasis role='bold'>NorthWest</emphasis>,
but the child is also unmapped when the parent is resized,
and an
<link linkend="events:UnmapNotify"><emphasis role='bold'>UnmapNotify</emphasis></link>
event is generated.
<emphasis role='bold'>UnmapNotify</emphasis>
events are generated after the
<link linkend="events:ConfigureNotify"><emphasis role='bold'>ConfigureNotify</emphasis></link>
event is generated.
</para>
<para>
If a sibling and a stack-mode are specified,
the window is restacked as follows:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='3.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Above</emphasis>
      </entry>
      <entry>
The window is placed just above the sibling.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Below</emphasis>
      </entry>
      <entry>
The window is placed just below the sibling.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>TopIf</emphasis>
      </entry>
      <entry>
If the sibling occludes the window,
then the window is placed at the top of the stack.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>BottomIf</emphasis>
      </entry>
      <entry>
If the window occludes the sibling,
then the window is placed at the bottom of the stack.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Opposite</emphasis>
      </entry>
      <entry>
If the sibling occludes the window,
then the window is placed at the top of the stack.
Otherwise, if the window occludes the sibling,
then the window is placed at the bottom of the stack.
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
If a stack-mode is specified but no sibling is specified,
the window is restacked as follows:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='3.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Above</emphasis>
      </entry>
      <entry>
The window is placed at the top of the stack.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Below</emphasis>
      </entry>
      <entry>
The window is placed at the bottom of the stack.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>TopIf</emphasis>
      </entry>
      <entry>
If any sibling occludes the window,
then the window is placed at the top of the stack.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>BottomIf</emphasis>
      </entry>
      <entry>
If the window occludes any sibling,
then the window is placed at the bottom of the stack.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Opposite</emphasis>
      </entry>
      <entry>
If any sibling occludes the window,
then the window is placed at the top of the stack.
Otherwise, if the window occludes any sibling,
then the window is placed at the bottom of the stack.
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
It is a
<emphasis role='bold'>Match</emphasis>
error if a sibling is specified without a stack-mode
or if the window is not actually a sibling.
</para>
<para>
Note that the computations for
<emphasis role='bold'>BottomIf</emphasis>,
<emphasis role='bold'>TopIf</emphasis>,
and
<emphasis role='bold'>Opposite</emphasis>
are performed with respect to the window's final geometry (as controlled by
the other arguments to the request), not to its initial geometry.
</para>
<para>
Attempts to configure a root window have no effect.
</para>

  </section>
  <section id="requests:CirculateWindow">
    <title>CirculateWindow</title>
    <indexterm zone="requests:CirculateWindow" significance="preferred"><primary>CirculateWindow</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>direction</emphasis>:
{ <emphasis role='bold'>RaiseLowest</emphasis>,
<emphasis role='bold'>LowerHighest</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If some other client has selected
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the window, then a
<link linkend="events:CirculateRequest"><emphasis role='bold'>CirculateRequest</emphasis></link>
event is generated, and no further processing is performed.
Otherwise, the following is performed, and then a
<link linkend="events:CirculateNotify"><emphasis role='bold'>CirculateNotify</emphasis></link>
event is generated if the window is actually restacked.
</para>
<para>
For
<emphasis role='bold'>RaiseLowest</emphasis>,
<emphasis role='bold'>CirculateWindow</emphasis>
raises the lowest mapped child (if any) that is
occluded by another child to the top of the stack.
For
<emphasis role='bold'>LowerHighest</emphasis>,
<emphasis role='bold'>CirculateWindow</emphasis>
lowers the highest mapped child (if any) that occludes another child to
the bottom of the stack.
Exposure processing is performed on formerly obscured windows.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetGeometry">
    <title>GetGeometry</title>
    <indexterm zone="requests:GetGeometry" significance="preferred"><primary>GetGeometry</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
root: WINDOW
      </entry>
    </row>
    <row>
      <entry>
depth: CARD8
      </entry>
    </row>
    <row>
      <entry>
x, y: INT16
      </entry>
    </row>
    <row>
      <entry>
width, height, border-width: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the root and current geometry of the drawable.
The depth is the number of bits per pixel for the object.
The x, y, and border-width will always be zero for pixmaps.
For a window,
the x and y coordinates specify the upper-left outer corner of the window
relative to its parent's origin,
and the width and height specify the inside size, not including the border.
</para>
<para>
It is legal to pass an
<emphasis role='bold'>InputOnly</emphasis>
window as a drawable to this request.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryTree">
    <title>QueryTree</title>
    <indexterm zone="requests:QueryTree" significance="preferred"><primary>QueryTree</primary></indexterm>
    <indexterm zone="requests:QueryTree"><primary>Children</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
root: WINDOW
      </entry>
    </row>
    <row>
      <entry>
parent: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
children: LISTofWINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the root, the parent, and the children of the window.
The children are listed in bottom-to-top stacking order.
<!-- .sp -->
</para>
  </section>
  <section id="requests:InternAtom">
    <title>InternAtom</title>
    <indexterm zone="requests:InternAtom" significance="preferred"><primary>InternAtom</primary></indexterm>
    <indexterm zone="requests:InternAtom"><primary>Atom</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>name</emphasis>: STRING8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>only-if-exists</emphasis>: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
atom: ATOM or
<emphasis role='bold'>None</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the atom for the given name.
If only-if-exists is
<emphasis role='bold'>False</emphasis>,
then the atom is created if it does not exist.
The string should use the ISO Latin-1 encoding.
Uppercase and lowercase matter.
</para>
<para>
The lifetime of an atom is not tied to the interning client.
Atoms remain defined until server reset (see <link linkend='Connection_Close'>section 10</link>).
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetAtomName">
    <title>GetAtomName</title>
    <indexterm zone="requests:GetAtomName" significance="preferred"><primary>GetAtomName</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>atom</emphasis>: ATOM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
name: STRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the name for the given atom.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeProperty">
    <title>ChangeProperty</title>
    <indexterm zone="requests:ChangeProperty" significance="preferred"><primary>ChangeProperty</primary></indexterm>
    <indexterm zone="requests:ChangeProperty"><primary>Property</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>property</emphasis>, <emphasis remap='I'>type</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>format</emphasis>: {8, 16, 32}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Replace</emphasis>,
<emphasis role='bold'>Prepend</emphasis>,
<emphasis role='bold'>Append</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>data</emphasis>: LISTofINT8 or LISTofINT16 or LISTofINT32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request alters the property for the specified window.
The type is uninterpreted by the server.
The format specifies whether the data should be viewed as a list of 8-bit,
16-bit, or 32-bit quantities so that the server can correctly byte-swap
as necessary.
</para>
<para>
If the mode is
<emphasis role='bold'>Replace</emphasis>,
the previous property value is discarded.
If the mode is
<emphasis role='bold'>Prepend</emphasis>
or
<emphasis role='bold'>Append</emphasis>,
then the type and format must match the existing property value (or a
<emphasis role='bold'>Match</emphasis>
error results).
If the property is undefined,
it is treated as defined with the correct type
and format with zero-length data.
For
<emphasis role='bold'>Prepend</emphasis>,
the data is tacked on to the beginning of the existing data, and for
<emphasis role='bold'>Append</emphasis>,
it is tacked on to the end of the existing data.
</para>
<para>
This request generates a
<link linkend="events:PropertyNotify"><emphasis role='bold'>PropertyNotify</emphasis></link>
event on the window.
</para>
<para>
The lifetime of a property is not tied to the storing client.
Properties remain until explicitly deleted, until the window is destroyed,
or until server reset (see <link linkend='Connection_Close'>section 10</link>).
</para>
<para>
The maximum size of a property is server-dependent and may vary dynamically.
<!-- .sp -->
</para>
  </section>
  <section id="requests:DeleteProperty">
    <title>DeleteProperty</title>
    <indexterm zone="requests:DeleteProperty" significance="preferred"><primary>DeleteProperty</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>property</emphasis>: ATOM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request deletes the property from the specified window
if the property exists and generates a
<link linkend="events:PropertyNotify"><emphasis role='bold'>PropertyNotify</emphasis></link>
event on the window unless the property does not exist.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetProperty">
    <title>GetProperty</title>
    <indexterm zone="requests:GetProperty" significance="preferred"><primary>GetProperty</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>property</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>type</emphasis>: ATOM or
<emphasis role='bold'>AnyPropertyType</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>long-offset</emphasis>, <emphasis remap='I'>long-length</emphasis>: CARD32
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>delete</emphasis>: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
type: ATOM or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
format: {0, 8, 16, 32}
      </entry>
    </row>
    <row>
      <entry>
bytes-after: CARD32
      </entry>
    </row>
    <row>
      <entry>
value: LISTofINT8 or LISTofINT16 or LISTofINT32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the specified property does not exist for the specified window,
then the return type is
<emphasis role='bold'>None</emphasis>,
the format and bytes-after are zero,
and the value is empty.
The delete argument is ignored in this case.
If the specified property exists but its type does not match the specified type,
then the return type is the actual type of the property,
the format is the actual format of the property (never zero),
the bytes-after is the length of the property in bytes
(even if the format is 16 or 32),
and the value is empty.
The delete argument is ignored in this case.
If the specified property exists and either
<emphasis role='bold'>AnyPropertyType</emphasis>
is specified or the specified type matches the actual type of the property,
then the return type is the actual type of the property,
the format is the actual format of the property (never zero),
and the bytes-after and value are as follows, given:
<literallayout class="monospaced">
	N = actual length of the stored property in bytes
	    (even if the format is 16 or 32)
	I = 4 * long-offset
	T = N - I
	L = MINIMUM(T, 4 * long-length)
	A = N - (I + L)
</literallayout>
</para>
<para>
The returned value starts at byte index I in the property (indexing from 0),
and its length in bytes is L.
However, it is a
<emphasis role='bold'>Value</emphasis>
error if long-offset is given such that L is negative.
The value of bytes-after is A,
giving the number of trailing unread bytes in the stored
property.
If delete is
<emphasis role='bold'>True</emphasis>
and the bytes-after is zero,
the property is also deleted from the window,
and a
<link linkend="events:PropertyNotify"><emphasis role='bold'>PropertyNotify</emphasis></link>
event is generated on the window.
<!-- .sp -->
</para>
  </section>
  <section id="requests:RotateProperties">
    <title>RotateProperties</title>
    <indexterm zone="requests:RotateProperties" significance="preferred"><primary>RotateProperties</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>delta</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>properties</emphasis>: LISTofATOM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the property names in the list are viewed as being numbered starting
from zero, and there are N property names in the list,
then the value associated with property name I becomes the value
associated with property name (I + delta) mod N, for all I from zero to N - 1.
The effect is to rotate the states by delta places around the virtual ring
of property names (right for positive delta, left for negative delta).
</para>
<para>
If delta mod N is nonzero,
a
<link linkend="events:PropertyNotify"><emphasis role='bold'>PropertyNotify</emphasis></link>
event is generated for each property in the order listed.
</para>
<para>
If an atom occurs more than once in the list or no property with that
name is defined for the window,
a
<emphasis role='bold'>Match</emphasis>
error is generated.
If an
<emphasis role='bold'>Atom</emphasis>
or
<emphasis role='bold'>Match</emphasis>
error is generated, no properties are changed.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ListProperties">
    <title>ListProperties</title>
    <indexterm zone="requests:ListProperties" significance="preferred"><primary>ListProperties</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
atoms: LISTofATOM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the atoms of properties currently defined on the window.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetSelectionOwner">
    <title>SetSelectionOwner</title>
    <indexterm zone="requests:SetSelectionOwner" significance="preferred"><primary>SetSelectionOwner</primary></indexterm>
    <indexterm zone="requests:SetSelectionOwner"><primary>Selection</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>selection</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>owner</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes the owner, owner window,
and last-change time of the specified selection.
This request has no effect if the specified time is earlier
than the current last-change time of the specified selection or is
later than the current server time.
Otherwise, the last-change time is set to the specified time
with
<emphasis role='bold'>CurrentTime</emphasis>
replaced by the current server time.
If the owner window is specified as
<emphasis role='bold'>None</emphasis>,
then the owner of the selection becomes
<emphasis role='bold'>None</emphasis>
(that is, no owner).
Otherwise, the owner of the selection becomes the client executing the request.
If the new owner (whether a client or
<emphasis role='bold'>None</emphasis>)
is not the same as the current owner
and the current owner is not
<emphasis role='bold'>None</emphasis>,
then the current owner is sent a
<link linkend="events:SelectionClear"><emphasis role='bold'>SelectionClear</emphasis></link>
event.
</para>
<para>
If the client that is the owner of a selection is later terminated
(that is, its connection is closed) or if the owner window it has
specified in the request is later destroyed,
then the owner of the selection automatically reverts to
<emphasis role='bold'>None</emphasis>,
but the last-change time is not affected.
</para>
<para>
The selection atom is uninterpreted by the server.
The owner window is returned by the
<link linkend="requests:GetSelectionOwner"><emphasis role='bold'>GetSelectionOwner</emphasis></link>
request and is reported in
<link linkend="events:SelectionRequest"><emphasis role='bold'>SelectionRequest</emphasis></link>
and
<link linkend="events:SelectionClear"><emphasis role='bold'>SelectionClear</emphasis></link>
events.
</para>
<para>
Selections are global to the server.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetSelectionOwner">
    <title>GetSelectionOwner</title>
    <indexterm zone="requests:GetSelectionOwner" significance="preferred"><primary>GetSelectionOwner</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>selection</emphasis>: ATOM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
owner: WINDOW or
<emphasis role='bold'>None</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current owner window of the specified selection,
if any.
If
<emphasis role='bold'>None</emphasis>
is returned, then there is no owner for the selection.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ConvertSelection">
    <title>ConvertSelection</title>
    <indexterm zone="requests:ConvertSelection" significance="preferred"><primary>ConvertSelection</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>selection</emphasis>, <emphasis remap='I'>target</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>property</emphasis>: ATOM or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>requestor</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Atom</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the specified selection has an owner,
the server sends a
<link linkend="events:SelectionRequest"><emphasis role='bold'>SelectionRequest</emphasis></link>
event to that owner.
If no owner for the specified selection exists,
the server generates a
<link linkend="events:SelectionNotify"><emphasis role='bold'>SelectionNotify</emphasis></link>
event to the requestor with property
<emphasis role='bold'>None</emphasis>.
The arguments are passed on unchanged in either of the events.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SendEvent">
    <title>SendEvent</title>
    <indexterm zone="requests:SendEvent" significance="preferred"><primary>SendEvent</primary></indexterm>
    <indexterm zone="requests:SendEvent" significance="preferred"><primary>Event</primary><secondary>sending</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>destination</emphasis>: WINDOW or
<emphasis role='bold'>PointerWindow</emphasis>
or
<emphasis role='bold'>InputFocus</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>propagate</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>event-mask</emphasis>: SETofEVENT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>event</emphasis>: &lt;normal-event-format&gt;
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If
<emphasis role='bold'>PointerWindow</emphasis>
is specified,
destination is replaced with the window that the pointer is in.
If
<emphasis role='bold'>InputFocus</emphasis>
is specified and the focus window contains the pointer,
destination is replaced with the window that the pointer is in.
Otherwise, destination is replaced with the focus window.
</para>
<para>
If the event-mask is the empty set,
then the event is sent to the client that created the destination window.
If that client no longer exists, no event is sent.
</para>
<para>
If propagate is
<emphasis role='bold'>False</emphasis>,
then the event is sent to every client selecting
on destination any of the event types in event-mask.
</para>
<para>
If propagate is
<emphasis role='bold'>True</emphasis>
and no clients have selected on destination any
of the event types in event-mask,
then destination is replaced with the
closest ancestor of destination for which some client has selected a
type in event-mask and no intervening window has that type in its
do-not-propagate-mask.
If no such window exists or if the window is an ancestor of the focus window
and
<emphasis role='bold'>InputFocus</emphasis>
was originally specified as the destination,
then the event is not sent to any clients.
Otherwise, the event is reported to every client selecting on the final
destination any of the types specified in event-mask.
</para>
<para>
The event code must be one of the core events or one of the events
defined by an extension (or a
<emphasis role='bold'>Value</emphasis>
error results) so that the server can correctly byte-swap the
contents as necessary.
The contents of the event are otherwise unaltered and unchecked
by the server except to force on the most significant bit of the event code
and to set the sequence number in the event correctly.
</para>
<para>
Active grabs are ignored for this request.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GrabPointer">
    <title>GrabPointer</title>
    <indexterm zone="requests:GrabPointer" significance="preferred"><primary>GrabPointer</primary></indexterm>
    <indexterm zone="requests:GrabPointer"><primary>Active grab</primary><secondary>pointer</secondary></indexterm>
    <indexterm zone="requests:GrabPointer"><primary>Pointer</primary><secondary>grabbing</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>grab-window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>owner-events</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>event-mask</emphasis>: SETofPOINTEREVENT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pointer-mode</emphasis>, <emphasis remap='I'>keyboard-mode</emphasis>:
{ <emphasis role='bold'>Synchronous</emphasis>,
<emphasis role='bold'>Asynchronous</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>confine-to</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>cursor</emphasis>: CURSOR or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
status:
{ <emphasis role='bold'>Success</emphasis>,
<emphasis role='bold'>AlreadyGrabbed</emphasis>,
<emphasis role='bold'>Frozen</emphasis>,
<emphasis role='bold'>InvalidTime</emphasis>,
<emphasis role='bold'>NotViewable</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request actively grabs control of the pointer.
Further pointer events are only reported to the grabbing client.
The request overrides any active pointer grab by this client.
</para>
<para>
If owner-events is
<emphasis role='bold'>False</emphasis>,
all generated pointer events are reported with respect to grab-window
and are only reported if selected by event-mask.
If owner-events is
<emphasis role='bold'>True</emphasis>
and a generated pointer event would normally be reported to this client,
it is reported normally.
Otherwise, the event is reported with respect to the grab-window and is
only reported if selected by event-mask.
For either value of owner-events,
unreported events are simply discarded.
</para>
<para>
If pointer-mode is
<emphasis role='bold'>Asynchronous</emphasis>,
pointer event processing continues normally.
If the pointer is currently frozen by this client,
then processing of pointer events is resumed.
If pointer-mode is
<emphasis role='bold'>Synchronous</emphasis>,
the state of the pointer (as seen by means of the protocol) appears to freeze,
and no further pointer events are generated by the server until the
grabbing client issues a releasing
<link linkend="requests:AllowEvents"><emphasis role='bold'>AllowEvents</emphasis></link>
request or until the pointer grab is released.
Actual pointer changes are not lost while the pointer is frozen.
They are simply queued for later processing.
</para>
<para>
If keyboard-mode is
<emphasis role='bold'>Asynchronous</emphasis>,
keyboard event processing is unaffected by activation of the grab.
If keyboard-mode is
<emphasis role='bold'>Synchronous</emphasis>,
the state of the keyboard (as seen by means of the protocol) appears to freeze,
and no further keyboard events are generated by the server until the grabbing
client issues a releasing
<emphasis role='bold'>AllowEvents</emphasis>
request or until the pointer grab is released.
Actual keyboard changes are not lost while the keyboard is frozen.
They are simply queued for later processing.
</para>
<para>
If a cursor is specified,
then it is displayed regardless of what window the pointer is in.
If no cursor is specified,
then when the pointer is in grab-window or one of its subwindows,
the normal cursor for that window is displayed.
Otherwise, the cursor for grab-window is displayed.
</para>
<para>
If a confine-to window is specified,
then the pointer will be restricted to stay contained in that window.
The confine-to window need have no relationship to the grab-window.
If the pointer is not initially in the confine-to window,
then it is warped automatically to the closest edge
(and enter/leave events are generated normally) just before the grab activates.
If the confine-to window is subsequently reconfigured,
the pointer will be warped automatically as necessary to
keep it contained in the window.
</para>
<para>
This request generates
<link linkend="events:EnterNotify"><emphasis role='bold'>EnterNotify</emphasis></link>
and
<link linkend="events:LeaveNotify"><emphasis role='bold'>LeaveNotify</emphasis></link>
events.
</para>
<para>
The request fails with status
<emphasis role='bold'>AlreadyGrabbed</emphasis>
if the pointer is actively grabbed by some other client.
The request fails with status
<emphasis role='bold'>Frozen</emphasis>
if the pointer is frozen by an active grab of another client.
The request fails with status
<emphasis role='bold'>NotViewable</emphasis>
if grab-window or confine-to window is not viewable
or if the confine-to window lies completely outside the boundaries
of the root window.
The request fails with status
<emphasis role='bold'>InvalidTime</emphasis>
if the specified time is earlier than the last-pointer-grab time or later than
the current server time.
Otherwise, the last-pointer-grab time is set to the specified time, with
<emphasis role='bold'>CurrentTime</emphasis>
replaced by the current server time.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UngrabPointer">
    <title>UngrabPointer</title>
    <indexterm zone="requests:UngrabPointer" significance="preferred"><primary>UngrabPointer</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request releases the pointer if this client has it actively grabbed (from
either
<link linkend="requests:GrabPointer"><emphasis role='bold'>GrabPointer</emphasis></link>
or
<link linkend="requests:GrabButton"><emphasis role='bold'>GrabButton</emphasis></link>
or from a normal button press) and releases any queued events.
The request has no effect if the specified time is earlier than
the last-pointer-grab time or is later than the current server time.
</para>
<para>
This request generates
<link linkend="events:EnterNotify"><emphasis role='bold'>EnterNotify</emphasis></link>
and
<link linkend="events:LeaveNotify"><emphasis role='bold'>LeaveNotify</emphasis></link>
events.
</para>
<para>
An
<link linkend="requests:UngrabPointer"><emphasis role='bold'>UngrabPointer</emphasis></link>
request is performed automatically if the event window or
confine-to window for an active pointer grab becomes not viewable
or if window reconfiguration causes the confine-to window to lie
completely outside the boundaries of the root window.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GrabButton">
    <title>GrabButton</title>
    <indexterm zone="requests:GrabButton" significance="preferred"><primary>GrabButton</primary></indexterm>
    <indexterm zone="requests:GrabButton"><primary>Button</primary><secondary>grabbing</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>modifiers</emphasis>: SETofKEYMASK or
<emphasis role='bold'>AnyModifier</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>button</emphasis>: BUTTON or
<emphasis role='bold'>AnyButton</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>grab-window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>owner-events</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>event-mask</emphasis>: SETofPOINTEREVENT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pointer-mode</emphasis>, <emphasis remap='I'>keyboard-mode</emphasis>:
{ <emphasis role='bold'>Synchronous</emphasis>,
<emphasis role='bold'>Asynchronous</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>confine-to</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>cursor</emphasis>: CURSOR or
<emphasis role='bold'>None</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request establishes a passive grab.
<indexterm zone="requests:GrabButton"><primary>Passive grab</primary><secondary>pointer</secondary></indexterm>
In the future,
the pointer is actively grabbed as described in
<link linkend="requests:GrabPointer"><emphasis role='bold'>GrabPointer</emphasis></link>,
the last-pointer-grab time is set to the time at which the button was
pressed (as transmitted in the
<link linkend="events:ButtonPress"><emphasis role='bold'>ButtonPress</emphasis></link>
event), and the
<emphasis role='bold'>ButtonPress</emphasis>
event is reported if all of the following conditions are true:
<!-- .IP bu 5 -->
The pointer is not grabbed and the specified button is logically pressed
when the specified modifier keys are logically down,
and no other buttons or modifier keys are logically down.
<!-- .IP bu 5 -->
The grab-window contains the pointer.
<!-- .IP bu 5 -->
The confine-to window (if any) is viewable.
<!-- .IP bu 5 -->
A passive grab on the same button/key combination does not exist
on any ancestor of grab-window.
</para>
<para>
The interpretation of the remaining arguments is the same as for
<link linkend="requests:GrabPointer"><emphasis role='bold'>GrabPointer</emphasis></link>.
The active grab is terminated automatically when
the logical state of the pointer has all buttons released,
independent of the logical state of modifier keys.
Note that the logical state of a device (as seen by means of the protocol)
may lag the physical state if device event processing is frozen.
</para>
<para>
This request overrides all previous passive grabs by the same client on
the same button/key combinations on the same window.
A modifier of
<emphasis role='bold'>AnyModifier</emphasis>
is equivalent to issuing the request for all possible modifier combinations
(including the combination of no modifiers).
It is not required that all specified modifiers have currently assigned
keycodes.
A button of
<emphasis role='bold'>AnyButton</emphasis>
is equivalent to issuing the request for all possible buttons.
Otherwise, it is not required that the button specified currently be assigned
to a physical button.
</para>
<para>
An
<emphasis role='bold'>Access</emphasis>
error is generated if some other client has already issued a
<emphasis role='bold'>GrabButton</emphasis>
request with the same button/key combination on the same window.
When using
<emphasis role='bold'>AnyModifier</emphasis>
or
<emphasis role='bold'>AnyButton</emphasis>,
the request fails completely (no grabs are established), and an
<emphasis role='bold'>Access</emphasis>
error is generated if there is a conflicting grab for any combination.
The request has no effect on an active grab.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UngrabButton">
    <title>UngrabButton</title>
    <indexterm zone="requests:UngrabButton" significance="preferred"><primary>UngrabButton</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>modifiers</emphasis>: SETofKEYMASK or
<emphasis role='bold'>AnyModifier</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>button</emphasis>: BUTTON or
<emphasis role='bold'>AnyButton</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>grab-window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request releases the passive button/key combination
on the specified window if it was grabbed by this client.
A modifiers argument of
<emphasis role='bold'>AnyModifier</emphasis>
is equivalent to issuing the request for all possible modifier
combinations (including the combination of no modifiers).
A button of
<emphasis role='bold'>AnyButton</emphasis>
is equivalent to issuing the request for all possible buttons.
The request has no effect on an active grab.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeActivePointerGrab">
    <title>ChangeActivePointerGrab</title>
    <indexterm zone="requests:ChangeActivePointerGrab" significance="preferred"><primary>ChangeActivePointerGrab</primary></indexterm>
    <indexterm zone="requests:ChangeActivePointerGrab"><primary>Active grab</primary><secondary>pointer</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event-mask</emphasis>: SETofPOINTEREVENT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>cursor</emphasis>: CURSOR or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes the specified dynamic parameters if the pointer is
actively grabbed by the client and the specified time is no earlier than the
last-pointer-grab time and no later than the current server time.
The interpretation of event-mask and cursor are the same as in
<link linkend="requests:GrabPointer"><emphasis role='bold'>GrabPointer</emphasis></link>.
This request has no effect on the parameters of any passive grabs established
with
<link linkend="requests:GrabButton"><emphasis role='bold'>GrabButton</emphasis></link>.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GrabKeyboard">
    <title>GrabKeyboard</title>
    <indexterm zone="requests:GrabKeyboard" significance="preferred"><primary>GrabKeyboard</primary></indexterm>
    <indexterm zone="requests:GrabKeyboard"><primary>Active grab</primary><secondary>keyboard</secondary></indexterm>
    <indexterm zone="requests:GrabKeyboard"><primary>Keyboard</primary><secondary>grabbing</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>grab-window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>owner-events</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pointer-mode</emphasis>, <emphasis remap='I'>keyboard-mode</emphasis>:
{ <emphasis role='bold'>Synchronous</emphasis>,
<emphasis role='bold'>Asynchronous</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
status:
{ <emphasis role='bold'>Success</emphasis>,
<emphasis role='bold'>AlreadyGrabbed</emphasis>,
<emphasis role='bold'>Frozen</emphasis>,
<emphasis role='bold'>InvalidTime</emphasis>,
<emphasis role='bold'>NotViewable</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request actively grabs control of the keyboard.
Further key events are reported only to the grabbing client.
This request overrides any active keyboard grab by this client.
</para>
<para>
If owner-events is
<emphasis role='bold'>False</emphasis>,
all generated key events are reported with respect to grab-window.
If owner-events is
<emphasis role='bold'>True</emphasis>
and if a generated key event would normally be reported to this client,
it is reported normally.
Otherwise, the event is reported with respect to the grab-window.
Both
<link linkend="events:KeyPress"><emphasis role='bold'>KeyPress</emphasis></link>
and
<link linkend="events:KeyRelease"><emphasis role='bold'>KeyRelease</emphasis></link>
events are always reported,
independent of any event selection made by the client.
</para>
<para>
If keyboard-mode is
<emphasis role='bold'>Asynchronous</emphasis>,
keyboard event processing continues normally.
If the keyboard is currently frozen by this client,
then processing of keyboard events is resumed.
If keyboard-mode is
<emphasis role='bold'>Synchronous</emphasis>,
the state of the keyboard (as seen by means of the protocol) appears to freeze.
No further keyboard events are generated by the server until the
grabbing client issues a releasing
<link linkend="requests:AllowEvents"><emphasis role='bold'>AllowEvents</emphasis></link>
request or until the keyboard grab is released.
Actual keyboard changes are not lost while the keyboard is frozen.
They are simply queued for later processing.
</para>
<para>
If pointer-mode is
<emphasis role='bold'>Asynchronous</emphasis>,
pointer event processing is unaffected by activation of the grab.
If pointer-mode is
<emphasis role='bold'>Synchronous</emphasis>,
the state of the pointer (as seen by means of the protocol) appears to freeze.
No further pointer events are generated by the server
until the grabbing client issues a releasing
<link linkend="requests:AllowEvents"><emphasis role='bold'>AllowEvents</emphasis></link>
request or until the keyboard grab is released.
Actual pointer changes are not lost while the pointer is frozen.
They are simply queued for later processing.
</para>
<para>
This request generates
<link linkend="events:FocusIn"><emphasis role='bold'>FocusIn</emphasis></link>
and
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>
events.
</para>
<para>
The request fails with status
<emphasis role='bold'>AlreadyGrabbed</emphasis>
if the keyboard is actively grabbed by some other client.
The request fails with status
<emphasis role='bold'>Frozen</emphasis>
if the keyboard is frozen by an active grab of another client.
The request fails with status
<emphasis role='bold'>NotViewable</emphasis>
if grab-window is not viewable.
The request fails with status
<emphasis role='bold'>InvalidTime</emphasis>
if the specified time is earlier than the last-keyboard-grab time
or later than the current server time.
Otherwise, the last-keyboard-grab time is set to the specified time with
<emphasis role='bold'>CurrentTime</emphasis>
replaced by the current server time.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UngrabKeyboard">
    <title>UngrabKeyboard</title>
    <indexterm zone="requests:UngrabKeyboard" significance="preferred"><primary>UngrabKeyboard</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request releases the keyboard if this client has it actively grabbed
(as a result of either
<link linkend="requests:GrabKeyboard"><emphasis role='bold'>GrabKeyboard</emphasis></link>
or
<link linkend="requests:GrabKey"><emphasis role='bold'>GrabKey</emphasis></link>)
and releases any queued events.
The request has no effect if the specified time is earlier than the
last-keyboard-grab time or is later than the current server time.
</para>
<para>
This request generates
<link linkend="events:FocusIn"><emphasis role='bold'>FocusIn</emphasis></link>
and
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>
events.
</para>
<para>
An
<link linkend="requests:UngrabKeyboard"><emphasis role='bold'>UngrabKeyboard</emphasis></link>
is performed automatically if the event window for an active keyboard grab
becomes not viewable.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GrabKey">
    <title>GrabKey</title>
    <indexterm zone="requests:GrabKey" significance="preferred"><primary>GrabKey</primary></indexterm>
    <indexterm zone="requests:GrabKey"><primary>Key</primary><secondary>grabbing</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>key</emphasis>: KEYCODE or
<emphasis role='bold'>AnyKey</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>modifiers</emphasis>: SETofKEYMASK or
<emphasis role='bold'>AnyModifier</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>grab-window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>owner-events</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pointer-mode</emphasis>, <emphasis remap='I'>keyboard-mode</emphasis>:
{ <emphasis role='bold'>Synchronous</emphasis>,
<emphasis role='bold'>Asynchronous</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request establishes a passive grab on the keyboard.
<indexterm zone="requests:GrabKey"><primary>Passive grab</primary><secondary>keyboard</secondary></indexterm>
In the future,
the keyboard is actively grabbed as described in
<link linkend="requests:GrabKeyboard"><emphasis role='bold'>GrabKeyboard</emphasis></link>,
the last-keyboard-grab time is set to the time at which the key was pressed
(as transmitted in the
<link linkend="events:KeyPress"><emphasis role='bold'>KeyPress</emphasis></link>
event), and the
<emphasis role='bold'>KeyPress</emphasis>
event is reported if all of the following conditions are true:
<!-- .IP bu 5 -->
The keyboard is not grabbed and the specified key
(which can itself be a modifier key) is logically pressed
when the specified modifier keys are logically down,
and no other modifier keys are logically down.
<!-- .IP bu 5 -->
Either the grab-window is an ancestor of (or is) the focus window,
or the grab-window is a descendent of the focus window and contains the pointer.
<!-- .IP bu 5 -->
A passive grab on the same key combination does not exist
on any ancestor of grab-window.
</para>
<para>
The interpretation of the remaining arguments is the same as for
<link linkend="requests:GrabKeyboard"><emphasis role='bold'>GrabKeyboard</emphasis></link>.
The active grab is terminated automatically when the logical state
of the keyboard has the specified key released,
independent of the logical state of modifier keys.
Note that the logical state of a device (as seen by means of the protocol)
may lag the physical state if device event processing is frozen.
</para>
<para>
This request overrides all previous passive grabs by the same client
on the same key combinations on the same window.
A modifier of
<emphasis role='bold'>AnyModifier</emphasis>
is equivalent to issuing the request for all possible modifier combinations
(including the combination of no modifiers).
It is not required that all modifiers specified have
currently assigned keycodes.
A key of
<emphasis role='bold'>AnyKey</emphasis>
is equivalent to issuing the request for all possible keycodes.
Otherwise, the key must be in the range specified by min-keycode
and max-keycode in the connection setup (or a
<emphasis role='bold'>Value</emphasis>
error results).
</para>
<para>
An
<emphasis role='bold'>Access</emphasis>
error is generated if some other client has issued a
<emphasis role='bold'>GrabKey</emphasis>
with the same key combination on the same window.
When using
<emphasis role='bold'>AnyModifier</emphasis>
or
<emphasis role='bold'>AnyKey</emphasis>,
the request fails completely (no grabs are established),
and an
<emphasis role='bold'>Access</emphasis>
error is generated if there is a conflicting grab for any combination.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UngrabKey">
    <title>UngrabKey</title>
    <indexterm zone="requests:UngrabKey" significance="preferred"><primary>UngrabKey</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>key</emphasis>: KEYCODE or
<emphasis role='bold'>AnyKey</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>modifiers</emphasis>: SETofKEYMASK or
<emphasis role='bold'>AnyModifier</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>grab-window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request releases the key combination on the specified window
if it was grabbed by this client.
A modifiers argument of
<emphasis role='bold'>AnyModifier</emphasis>
is equivalent to issuing the request for all possible modifier combinations
(including the combination of no modifiers).
A key of
<emphasis role='bold'>AnyKey</emphasis>
is equivalent to issuing the request for all possible keycodes.
This request has no effect on an active grab.
<!-- .sp -->
</para>
  </section>
  <section id="requests:AllowEvents">
    <title>AllowEvents</title>
    <indexterm zone="requests:AllowEvents" significance="preferred"><primary>AllowEvents</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>AsyncPointer</emphasis>,
<emphasis role='bold'>SyncPointer</emphasis>,
<emphasis role='bold'>ReplayPointer</emphasis>,
<emphasis role='bold'>AsyncKeyboard</emphasis>,
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>SyncKeyboard</emphasis>,
<emphasis role='bold'>ReplayKeyboard</emphasis>,
<emphasis role='bold'>AsyncBoth</emphasis>,
<emphasis role='bold'>SyncBoth</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request releases some queued events if the client has caused a device to
freeze.
The request has no effect if the specified time is earlier
than the last-grab time of the most recent active grab for the client
or if the specified time is later than the current server time.
</para>
<para>
For
<emphasis role='bold'>AsyncPointer</emphasis>,
if the pointer is frozen by the client,
pointer event processing continues normally.
If the pointer is frozen twice by the client on behalf of two separate grabs,
<emphasis role='bold'>AsyncPointer</emphasis>
thaws for both.
<emphasis role='bold'>AsyncPointer</emphasis>
has no effect if the pointer is not frozen by the client,
but the pointer need not be grabbed by the client.
</para>
<para>
For
<emphasis role='bold'>SyncPointer</emphasis>,
if the pointer is frozen and actively grabbed by the client,
pointer event processing continues normally until the next
<link linkend="events:ButtonPress"><emphasis role='bold'>ButtonPress</emphasis></link>
or
<link linkend="events:ButtonRelease"><emphasis role='bold'>ButtonRelease</emphasis></link>
event is reported to the client,
at which time the pointer again appears to freeze.
However, if the reported event causes the pointer grab to be released,
then the pointer does not freeze.
<emphasis role='bold'>SyncPointer</emphasis>
has no effect if the pointer is not frozen by the
client or if the pointer is not grabbed by the client.
</para>
<para>
For
<emphasis role='bold'>ReplayPointer</emphasis>,
if the pointer is actively grabbed by the client and
is frozen as the result of an event having been sent to the client
(either from the activation of a
<link linkend="requests:GrabButton"><emphasis role='bold'>GrabButton</emphasis></link>
or from a previous
<emphasis role='bold'>AllowEvents</emphasis>
with mode
<emphasis role='bold'>SyncPointer</emphasis>
but not from a
<link linkend="requests:GrabPointer"><emphasis role='bold'>GrabPointer</emphasis></link>),
then the pointer grab is released and that event is completely reprocessed,
this time ignoring any passive grabs at or above (towards the root)
the grab-window of the grab just released.
The request has no effect if the pointer is not grabbed by the client
or if the pointer is not frozen as the result of an event.
</para>
<para>
For
<emphasis role='bold'>AsyncKeyboard</emphasis>,
if the keyboard is frozen by the client,
keyboard event processing continues normally.
If the keyboard is frozen twice by the client on behalf of two separate grabs,
<emphasis role='bold'>AsyncKeyboard</emphasis>
thaws for both.
<emphasis role='bold'>AsyncKeyboard</emphasis>
has no effect if the keyboard is not frozen by the client,
but the keyboard need not be grabbed by the client.
</para>
<para>
For
<emphasis role='bold'>SyncKeyboard</emphasis>,
if the keyboard is frozen and actively grabbed by the client,
keyboard event processing continues normally until the next
<link linkend="events:KeyPress"><emphasis role='bold'>KeyPress</emphasis></link>
or
<link linkend="events:KeyRelease"><emphasis role='bold'>KeyRelease</emphasis></link>
event is reported to the client,
at which time the keyboard again appears to freeze.
However, if the reported event causes the keyboard grab to be released,
then the keyboard does not freeze.
<emphasis role='bold'>SyncKeyboard</emphasis>
has no effect if the keyboard is not frozen by the client or
if the keyboard is not grabbed by the client.
</para>
<para>
For
<emphasis role='bold'>ReplayKeyboard</emphasis>,
if the keyboard is actively grabbed by the client
and is frozen as the result of an event having been sent to the client
(either from the activation of a
<link linkend="requests:GrabKey"><emphasis role='bold'>GrabKey</emphasis></link>
or from a previous
<emphasis role='bold'>AllowEvents</emphasis>
with mode
<emphasis role='bold'>SyncKeyboard</emphasis>
but not from a
<link linkend="requests:GrabKeyboard"><emphasis role='bold'>GrabKeyboard</emphasis></link>),
then the keyboard grab is released and that event is completely reprocessed,
this time ignoring any passive grabs at or above (towards the root)
the grab-window of the grab just released.
The request has no effect if the keyboard is not grabbed by the client
or if the keyboard is not frozen as the result of an event.
</para>
<para>
For
<emphasis role='bold'>SyncBoth</emphasis>,
if both pointer and keyboard are frozen by the client,
event processing (for both devices) continues normally until the next
<link linkend="events:ButtonPress"><emphasis role='bold'>ButtonPress</emphasis></link>,
<link linkend="events:ButtonRelease"><emphasis role='bold'>ButtonRelease</emphasis></link>,
<link linkend="events:KeyPress"><emphasis role='bold'>KeyPress</emphasis></link>,
or
<link linkend="events:KeyRelease"><emphasis role='bold'>KeyRelease</emphasis></link>
event is reported to the client for a grabbed device
(button event for the pointer, key event for the keyboard),
at which time the devices again appear to freeze.
However, if the reported event causes the grab to be released,
then the devices do not freeze (but if the other device is still
grabbed, then a subsequent event for it will still cause both devices
to freeze).
<emphasis role='bold'>SyncBoth</emphasis>
has no effect unless both pointer and keyboard are frozen by the client.
If the pointer or keyboard is frozen twice by the client on behalf
of two separate grabs,
<emphasis role='bold'>SyncBoth</emphasis>
thaws for both (but a subsequent freeze for
<emphasis role='bold'>SyncBoth</emphasis>
will only freeze each device once).
</para>
<para>
For
<emphasis role='bold'>AsyncBoth</emphasis>,
if the pointer and the keyboard are frozen by the client,
event processing for both devices continues normally.
If a device is frozen twice by the client on behalf of two separate grabs,
<emphasis role='bold'>AsyncBoth</emphasis>
thaws for both.
<emphasis role='bold'>AsyncBoth</emphasis>
has no effect unless both pointer and keyboard are frozen by the client.
</para>
<para>
<emphasis role='bold'>AsyncPointer</emphasis>,
<emphasis role='bold'>SyncPointer</emphasis>,
and
<emphasis role='bold'>ReplayPointer</emphasis>
have no effect on processing of keyboard events.
<emphasis role='bold'>AsyncKeyboard</emphasis>,
<emphasis role='bold'>SyncKeyboard</emphasis>,
and
<emphasis role='bold'>ReplayKeyboard</emphasis>
have no effect on processing of pointer events.
</para>
<para>
It is possible for both a pointer grab and a keyboard grab to be active
simultaneously (by the same or different clients).
When a device is frozen on behalf of either grab,
no event processing is performed for the device.
It is possible for a single device to be frozen because of both grabs.
In this case, the freeze must be released on behalf of both grabs
before events can again be processed.
If a device is frozen twice by a single client, then a single
<emphasis role='bold'>AllowEvents</emphasis>
releases both.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GrabServer">
    <title>GrabServer</title>
    <indexterm zone="requests:GrabServer" significance="preferred"><primary>GrabServer</primary></indexterm>
    <indexterm zone="requests:GrabServer"><primary>Server</primary><secondary>grabbing</secondary></indexterm>
<para>
This request disables processing of requests and close-downs on all
connections other than the one this request arrived on.
<!-- .sp -->
</para>
  </section>
  <section id="requests:UngrabServer">
    <title>UngrabServer</title>
    <indexterm zone="requests:UngrabServer" significance="preferred"><primary>UngrabServer</primary></indexterm>
<para>
This request restarts processing of requests and close-downs
on other connections.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryPointer">
    <title>QueryPointer</title>
    <indexterm zone="requests:QueryPointer" significance="preferred"><primary>QueryPointer</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
root: WINDOW
      </entry>
    </row>
    <row>
      <entry>
child: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
same-screen: BOOL
      </entry>
    </row>
    <row>
      <entry>
root-x, root-y, win-x, win-y: INT16
      </entry>
    </row>
    <row>
      <entry>
mask: SETofKEYBUTMASK
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The root window the pointer is logically on and the pointer coordinates
relative to the root's origin are returned.
If same-screen is
<emphasis role='bold'>False</emphasis>,
then the pointer is not on the same screen as the argument window,
child is
<emphasis role='bold'>None</emphasis>,
and win-x and win-y are zero.
If same-screen is
<emphasis role='bold'>True</emphasis>,
then win-x and win-y are the pointer coordinates relative to the
argument window's origin, and child is the child containing the
pointer, if any.
The current logical state of the modifier keys and the buttons
are also returned.
Note that the logical state of a device (as seen by means of the protocol)
may lag the physical state if device event processing is frozen.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetMotionEvents">
    <title>GetMotionEvents</title>
    <indexterm zone="requests:GetMotionEvents" significance="preferred"><primary>GetMotionEvents</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>start</emphasis>,
<emphasis remap='I'>stop</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
events: LISTofTIMECOORD
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
where:
      </entry>
    </row>
    <row>
      <entry>
TIMECOORD:	[x, y: INT16
      </entry>
    </row>
    <row>
      <entry>
      time: TIMESTAMP]
<!-- .TE -->
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns all events in the motion history buffer that fall
between the specified start and stop times (inclusive)
and that have coordinates that lie within (including borders)
the specified window at its present placement.
The x and y coordinates are reported relative to the origin of the window.
</para>
<para>
If the start time is later than the stop time or if the start time is
in the future, no events are returned.
If the stop time is in the future, it is equivalent to specifying
<emphasis role='bold'>CurrentTime</emphasis>.
<!-- .sp -->
</para>
  </section>
  <section id="requests:TranslateCoordinates">
    <title>TranslateCoordinates</title>
    <indexterm zone="requests:TranslateCoordinates" significance="preferred"><primary>TranslateCoordinates</primary></indexterm>
    <indexterm zone="glossary:Coordinate_system"><primary>Coordinate system</primary><secondary>translating</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>src-window</emphasis>, <emphasis remap='I'>dst-window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>src-x</emphasis>, <emphasis remap='I'>src-y</emphasis>: INT16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
same-screen: BOOL
      </entry>
    </row>
    <row>
      <entry>
child: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
dst-x, dst-y: INT16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The src-x and src-y coordinates are taken relative to src-window's
origin and are returned as dst-x and dst-y coordinates relative to
dst-window's origin.
If same-screen is
<emphasis role='bold'>False</emphasis>,
then src-window and dst-window are on different screens,
and dst-x and dst-y are zero.
If the coordinates are contained in a mapped child of dst-window,
then that child is returned.
<!-- .sp -->
</para>
  </section>
  <section id="requests:WarpPointer">
    <title>WarpPointer</title>
    <indexterm zone="requests:WarpPointer" significance="preferred"><primary>WarpPointer</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>src-window</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dst-window</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>src-x</emphasis>, <emphasis remap='I'>src-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>src-width</emphasis>, <emphasis remap='I'>src-height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dst-x</emphasis>, <emphasis remap='I'>dst-y</emphasis>: INT16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If dst-window is
<emphasis role='bold'>None</emphasis>,
this request moves the pointer by offsets [dst-x, dst-y]
relative to the current position of the pointer.
If dst-window is a window,
this request moves the pointer to [dst-x, dst-y] relative to dst-window's
origin.
However, if src-window is not
<emphasis role='bold'>None</emphasis>,
the move only takes place if src-window contains the pointer
and the pointer is contained in the specified rectangle of src-window.
</para>
<para>
The src-x and src-y coordinates are relative to src-window's origin.
If src-height is zero,
it is replaced with the current height of src-window minus src-y.
If src-width is zero,
it is replaced with the current width of src-window minus src-x.
</para>
<para>
This request cannot be used to move the pointer outside the confine-to
window of an active pointer grab.
An attempt will only move the pointer as far as the closest edge
of the confine-to window.
</para>
<para>
This request will generate events just as if the user had instantaneously
moved the pointer.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetInputFocus">
    <title>SetInputFocus</title>
    <indexterm zone="requests:SetInputFocus" significance="preferred"><primary>SetInputFocus</primary></indexterm>
    <indexterm zone="requests:SetInputFocus"><primary>Input focus</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>focus</emphasis>: WINDOW or
<emphasis role='bold'>PointerRoot</emphasis>
or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>revert-to</emphasis>:
{ <emphasis role='bold'>Parent</emphasis>,
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>None</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes the input focus and the last-focus-change time.
The request has no effect if the specified time is earlier than the current
last-focus-change time or is later than the current server time.
Otherwise, the last-focus-change time is set to the specified time
with
<emphasis role='bold'>CurrentTime</emphasis>
replaced by the current server time.
</para>
<para>
If
<emphasis role='bold'>None</emphasis>
is specified as the focus,
all keyboard events are discarded until a new focus window is set.
In this case, the revert-to argument is ignored.
</para>
<para>
If a window is specified as the focus,
it becomes the keyboard's focus window.
If a generated keyboard event would normally be reported to
this window or one of its inferiors, the event is reported normally.
Otherwise, the event is reported with respect to the focus window.
</para>
<para>
If
<emphasis role='bold'>PointerRoot</emphasis>
is specified as the focus,
the focus window is dynamically taken to be the root window of whatever screen
the pointer is on at each keyboard event.
In this case,
the revert-to argument is ignored.
</para>
<para>
This request generates
<link linkend="events:FocusIn"><emphasis role='bold'>FocusIn</emphasis></link>
and
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>
events.
</para>
<para>
The specified focus window must be viewable at the time of the request (or a
<emphasis role='bold'>Match</emphasis>
error results).
If the focus window later becomes not viewable,
the new focus window depends on the revert-to argument.
If revert-to is
<emphasis role='bold'>Parent</emphasis>,
the focus reverts to the parent (or the closest viewable ancestor)
and the new revert-to value is taken to be
<emphasis role='bold'>None</emphasis>.
If revert-to is
<emphasis role='bold'>PointerRoot</emphasis>
or
<emphasis role='bold'>None</emphasis>,
the focus reverts to that value.
When the focus reverts,
<link linkend="events:FocusIn"><emphasis role='bold'>FocusIn</emphasis></link>
and
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>
events are generated,
but the last-focus-change time is not affected.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetInputFocus">
    <title>GetInputFocus</title>
    <indexterm zone="requests:GetInputFocus" significance="preferred"><primary>GetInputFocus</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
focus: WINDOW or
<emphasis role='bold'>PointerRoot</emphasis>
or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
revert-to:
{ <emphasis role='bold'>Parent</emphasis>,
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>None</emphasis>}
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current focus state.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryKeymap">
    <title>QueryKeymap</title>
    <indexterm zone="requests:QueryKeymap" significance="preferred"><primary>QueryKeymap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
keys: LISTofCARD8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns a bit vector for the logical state of the keyboard.
Each bit set to 1 indicates that the corresponding key is currently pressed.
The vector is represented as 32 bytes.
Byte N (from 0) contains the bits for keys 8N to 8N + 7
with the least significant bit in the byte representing key 8N.
Note that the logical state of a device (as seen by means of the protocol)
may lag the physical state if device event processing is frozen.
<!-- .sp -->
</para>
  </section>
  <section id="requests:OpenFont">
    <title>OpenFont</title>
    <indexterm zone="requests:OpenFont" significance="preferred"><primary>OpenFont</primary></indexterm>
    <indexterm zone="requests:OpenFont"><primary>Font</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>fid</emphasis>: FONT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>name</emphasis>: STRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Name</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request loads the specified font, if necessary,
and associates identifier fid with it.
The font name should use the ISO Latin-1 encoding,
and uppercase and lowercase do not matter.
When the characters <quote>?</quote> and <quote>*</quote> are used in a font name, a
pattern match is performed and any matching font is used.
In the pattern,
the <quote>?</quote> character (octal value 77) will match any single character,
and the <quote>*</quote> character (octal value 52) will match any number
of characters.
A structured format for font names is specified in the
X.Org standard <citetitle>X Logical Font Description Conventions</citetitle>.
</para>
<para>
Fonts are not associated with a particular screen
and can be stored as a component of any graphics context.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CloseFont">
    <title>CloseFont</title>
    <indexterm zone="requests:CloseFont" significance="preferred"><primary>CloseFont</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>font</emphasis>: FONT
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Font</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request deletes the association between the resource ID and the font.
The font itself will be freed when no other resource references it.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryFont">
    <title>QueryFont</title>
    <indexterm zone="requests:QueryFont" significance="preferred"><primary>QueryFont</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='3' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='1.0*'/>
  <colspec colname='c3' colwidth='1.0*'/>
  <spanspec spanname='all' namest='c1' nameend='c3'/>
  <tbody>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
<emphasis remap='I'>font</emphasis>: FONTABLE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry spanname='all'>
   ▶
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
font-info: FONTINFO
      </entry>
    </row>
    <row>
      <entry spanname='all'>
char-infos: LISTofCHARINFO
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='18'>
<!-- .in +.2i -->
where:
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='9'>
FONTINFO:
      </entry>
      <entry>
[draw-direction:
{ <emphasis role='bold'>LeftToRight</emphasis>,
<emphasis role='bold'>RightToLeft</emphasis> }
      </entry>
    </row>
    <row>
      <entry>
min-char-or-byte2, max-char-or-byte2: CARD16
      </entry>
    </row>
    <row>
      <entry>
min-byte1, max-byte1: CARD8
      </entry>
    </row>
    <row>
      <entry>
all-chars-exist: BOOL
      </entry>
    </row>
    <row>
      <entry>
default-char: CARD16
      </entry>
    </row>
    <row>
      <entry>
min-bounds: CHARINFO
      </entry>
    </row>
    <row>
      <entry>
max-bounds: CHARINFO
      </entry>
    </row>
    <row>
      <entry>
font-ascent: INT16
      </entry>
    </row>
    <row>
      <entry>
font-descent: INT16
      </entry>
    </row>
    <row>
      <entry>
properties: LISTofFONTPROP]
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='1'>
FONTPROP:
      </entry>
      <entry>
[name: ATOM
      </entry>
    </row>
    <row>
      <entry>
value: &lt;32-bit-value&gt;]
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='5'>
CHARINFO:
      </entry>
      <entry>
[left-side-bearing: INT16
      </entry>
    </row>
    <row>
      <entry>
right-side-bearing: INT16
      </entry>
    </row>
    <row>
      <entry>
character-width: INT16
      </entry>
    </row>
    <row>
      <entry>
ascent: INT16
      </entry>
    </row>
    <row>
      <entry>
descent: INT16
      </entry>
    </row>
    <row>
      <entry>
attributes: CARD16]
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Font</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns logical information about a font.
If a gcontext is given for font,
the currently contained font is used.
</para>
<para>
The draw-direction is just a hint
and indicates whether most char-infos have a positive,
<emphasis role='bold'>LeftToRight</emphasis>,
or a negative,
<emphasis role='bold'>RightToLeft</emphasis>,
character-width metric.
The core protocol defines no support for vertical text.
</para>
<para>
If min-byte1 and max-byte1 are both zero,
then min-char-or-byte2 specifies the linear character index corresponding
to the first element of char-infos,
and max-char-or-byte2 specifies the linear character index of the last element.
If either min-byte1 or max-byte1 are nonzero,
then both min-char-or-byte2 and max-char-or-byte2 will be less than 256,
and the 2-byte character index values corresponding to char-infos element N
(counting from 0) are:
<literallayout class="monospaced">
	byte1 = N/D + min-byte1
	byte2 = N\\D + min-char-or-byte2
</literallayout>
</para>
<para>
where:
<literallayout class="monospaced">
	D = max-char-or-byte2 - min-char-or-byte2 + 1
	/ = integer division
	\\ = integer modulus
</literallayout>
</para>
<para>
If char-infos has length zero,
then min-bounds and max-bounds will be identical,
and the effective char-infos is one filled with this char-info, of length:
<literallayout class="monospaced">
	L = D * (max-byte1 - min-byte1 + 1)
</literallayout>
</para>
<para>
That is,
all glyphs in the specified linear or matrix range have the same information,
as given by min-bounds (and max-bounds).
If all-chars-exist is
<emphasis role='bold'>True</emphasis>,
then all characters in char-infos have nonzero bounding boxes.
</para>
<para>
The default-char specifies the character that will be used when an
undefined or nonexistent character is used.
Note that default-char is a CARD16, not CHAR2B.
For a font using 2-byte matrix format,
the default-char has byte1 in the most significant byte
and byte2 in the least significant byte.
If the default-char itself specifies an undefined or nonexistent character,
then no printing is performed for an undefined or nonexistent character.
</para>
<para>
The min-bounds and max-bounds contain the minimum and maximum values of
each individual CHARINFO component over all char-infos (ignoring
nonexistent characters).
The bounding box of the font (that is, the
smallest rectangle enclosing the shape obtained by superimposing all
characters at the same origin [x,y]) has its upper-left coordinate at:
<literallayout class="monospaced">
	[x + min-bounds.left-side-bearing, y - max-bounds.ascent]
</literallayout>
with a width of:
<literallayout class="monospaced">
	max-bounds.right-side-bearing - min-bounds.left-side-bearing
</literallayout>
</para>
<para>
and a height of:
<literallayout class="monospaced">
	max-bounds.ascent + max-bounds.descent
</literallayout>
</para>
<para>
The font-ascent is the logical extent of the font above the baseline
and is used for determining line spacing.
Specific characters may extend beyond this.
The font-descent is the logical extent of the font at or below the baseline
and is used for determining line spacing.
Specific characters may extend beyond this.
If the baseline is at Y-coordinate y,
then the logical extent of the font is inclusive
between the Y-coordinate values (y - font-ascent) and (y + font-descent - 1).
</para>
<para>
A font is not guaranteed to have any properties.
The interpretation of the property value (for example, INT32, CARD32)
must be derived from <emphasis remap='I'>a priori</emphasis> knowledge of the property.
A basic set of font properties is specified in the X.Org
standard <citetitle>X Logical Font Description Conventions</citetitle>.
</para>
<para>
For a character origin at [x,y],
the bounding box of a character (that is,
the smallest rectangle enclosing the character's shape), described in
terms of CHARINFO components, is a rectangle with its upper-left corner at:
<literallayout class="monospaced">
	[x + left-side-bearing, y - ascent]
</literallayout>
</para>
<para>
with a width of:
<literallayout class="monospaced">
	right-side-bearing - left-side-bearing
</literallayout>
</para>
<para>
and a height of:
<literallayout class="monospaced">
	ascent + descent
</literallayout>
</para>
<para>
and the origin for the next character is defined to be:
<literallayout class="monospaced">
	[x + character-width, y]
</literallayout>
</para>
<para>
Note that the baseline is logically viewed as being just below
nondescending characters (when descent is zero, only pixels with
Y-coordinates less than y are drawn) and that the origin is logically
viewed as being coincident with the left edge of a nonkerned character
(when left-side-bearing is zero, no pixels with X-coordinate less than
x are drawn).
</para>
<para>
Note that CHARINFO metric values can be negative.
</para>
<para>
A nonexistent character is represented with all CHARINFO components
zero.
</para>
<para>
The interpretation of the per-character attributes field is
server-dependent.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryTextExtents">
    <title>QueryTextExtents</title>
    <indexterm zone="requests:QueryTextExtents" significance="preferred"><primary>QueryTextExtents</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>font</emphasis>: FONTABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>string</emphasis>: STRING16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
draw-direction:
{ <emphasis role='bold'>LeftToRight</emphasis>,
<emphasis role='bold'>RightToLeft</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
font-ascent: INT16
      </entry>
    </row>
    <row>
      <entry>
font-descent: INT16
      </entry>
    </row>
    <row>
      <entry>
overall-ascent: INT16
      </entry>
    </row>
    <row>
      <entry>
overall-descent: INT16
      </entry>
    </row>
    <row>
      <entry>
overall-width: INT32
      </entry>
    </row>
    <row>
      <entry>
overall-left: INT32
      </entry>
    </row>
    <row>
      <entry>
overall-right: INT32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Font</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the logical extents of the specified string of characters
in the specified font.
If a gcontext is given for font,
the currently contained font is used.
The draw-direction, font-ascent, and font-descent are the same as
described in
<link linkend="requests:QueryFont"><emphasis role='bold'>QueryFont</emphasis></link>.
The overall-ascent is the maximum of the ascent metrics of all characters
in the string, and the overall-descent is the maximum of the descent metrics.
The overall-width is the sum of the character-width metrics of all characters
in the string.
For each character in the string,
let W be the sum of the character-width metrics of all characters preceding it
in the string,
let L be the left-side-bearing metric of the character plus W,
and let R be the right-side-bearing metric of the character plus W.
The overall-left is the minimum L of all characters in the string,
and the overall-right is the maximum R.
</para>
<para>
For fonts defined with linear indexing rather than 2-byte matrix indexing,
the server will interpret each CHAR2B as a 16-bit number that
has been transmitted most significant byte first (that is, byte1 of the
CHAR2B is taken as the most significant byte).
</para>
<para>
Characters with all zero metrics are ignored.
If the font has no defined default-char,
then undefined characters in the string are also ignored.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ListFonts">
    <title>ListFonts</title>
    <indexterm zone="requests:ListFonts" significance="preferred"><primary>ListFonts</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>pattern</emphasis>: STRING8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>max-names</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
names: LISTofSTRING8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns a list
of available font names (as controlled by the font search path; see
<link linkend="requests:SetFontPath"><emphasis role='bold'>SetFontPath</emphasis></link>
request)
that match the pattern.
At most, max-names names will be returned.
The pattern should use the ISO Latin-1 encoding,
and uppercase and lowercase do not matter.
In the pattern,
the <quote>?</quote> character (octal value 77) will match any single character,
and the <quote>*</quote> character (octal value 52) will match any number
of characters.
The returned names are in lowercase.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ListFontsWithInfo">
    <title>ListFontsWithInfo</title>
    <indexterm zone="requests:ListFontsWithInfo" significance="preferred"><primary>ListFontsWithInfo</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>pattern</emphasis>: STRING8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>max-names</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
name: STRING8
      </entry>
    </row>
    <row>
      <entry>
info FONTINFO
      </entry>
    </row>
    <row>
      <entry>
replies-hint: CARD32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
where:
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
FONTINFO: &lt;same type definition as in
<link linkend="requests:QueryFont"><emphasis role='bold'>QueryFont</emphasis></link>&gt;
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request is similar to
<link linkend="requests:ListFonts"><emphasis role='bold'>ListFonts</emphasis></link>,
but it also returns information about each font.
The information returned for each font is identical to what
<link linkend="requests:QueryFont"><emphasis role='bold'>QueryFont</emphasis></link>
would return except that the per-character metrics are not returned.
Note that this request can generate multiple replies.
With each reply,
replies-hint may provide an indication of how many more fonts will be returned.
This number is a hint only and may be larger or smaller than
the number of fonts actually returned.
A zero value does not guarantee that no more fonts will be returned.
After the font replies,
a reply with a zero-length name is sent to indicate the end of the reply
sequence.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetFontPath">
    <title>SetFontPath</title>
    <indexterm zone="requests:SetFontPath" significance="preferred"><primary>SetFontPath</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>path</emphasis>: LISTofSTRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request defines the search path for font lookup.
There is only one search path per server, not one per client.
The interpretation of the strings is operating-system-dependent,
but the strings are intended to specify directories to be searched in the
order listed.
</para>
<para>
Setting the path to the empty list restores the default path defined
for the server.
</para>
<para>
As a side effect of executing this request,
the server is guaranteed to flush all cached information about fonts
for which there currently are no explicit resource IDs allocated.
</para>
<para>
The meaning of an error from this request is system specific.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetFontPath">
    <title>GetFontPath</title>
    <indexterm zone="requests:GetFontPath" significance="preferred"><primary>GetFontPath</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
path: LISTofSTRING8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current search path for fonts.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CreatePixmap">
    <title>CreatePixmap</title>
    <indexterm zone="requests:CreatePixmap" significance="preferred"><primary>CreatePixmap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>pid</emphasis>: PIXMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>depth</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request creates a pixmap and assigns the identifier pid to it.
The width and height must be nonzero (or a
<emphasis role='bold'>Value</emphasis>
error results).
The depth must be one of the depths supported by the root of the specified
drawable (or a
<emphasis role='bold'>Value</emphasis>
error results).
The initial contents of the pixmap are undefined.
</para>
<para>
It is legal to pass an
<emphasis role='bold'>InputOnly</emphasis>
window as a drawable to this request.
<!-- .sp -->
</para>
  </section>
  <section id="requests:FreePixmap">
    <title>FreePixmap</title>
    <indexterm zone="requests:FreePixmap" significance="preferred"><primary>FreePixmap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>pixmap</emphasis>: PIXMAP
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Pixmap</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request deletes the association between the resource ID and the pixmap.
The pixmap storage will be freed when no other resource references it.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CreateGC">
    <title>CreateGC</title>
    <indexterm zone="requests:CreateGC" significance="preferred"><primary>CreateGC</primary></indexterm>
    <indexterm zone="requests:CreateGC"><primary>Graphics context</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cid</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
This request creates a graphics context
and assigns the identifier cid to it.
The gcontext can be used with any destination drawable having the same root
and depth as the specified drawable;
use with other drawables results in a
<emphasis role='bold'>Match</emphasis>
error.
</para>
<para>
The value-mask and value-list specify which components are to be
explicitly initialized.
The context components are:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Component</entry>
      <entry>Type</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>function</entry>
      <entry>
{ <emphasis role='bold'>Clear</emphasis>,
<emphasis role='bold'>And</emphasis>,
<emphasis role='bold'>AndReverse</emphasis>,
<emphasis role='bold'>Copy</emphasis>,
<emphasis role='bold'>AndInverted</emphasis>,
<emphasis role='bold'>NoOp</emphasis>,
<emphasis role='bold'>Xor</emphasis>,
<emphasis role='bold'>Or</emphasis>,
<emphasis role='bold'>Nor</emphasis>,
<emphasis role='bold'>Equiv</emphasis>,
<emphasis role='bold'>Invert</emphasis>,
<emphasis role='bold'>OrReverse</emphasis>,
<emphasis role='bold'>CopyInverted</emphasis>,
<emphasis role='bold'>OrInverted</emphasis>,
<emphasis role='bold'>Nand</emphasis>,
<emphasis role='bold'>Set</emphasis> }
      </entry>
    </row>
    <row>
      <entry>plane-mask</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>foreground</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>background</entry>
      <entry>CARD32</entry>
    </row>
    <row>
      <entry>line-width</entry>
      <entry>CARD16</entry>
    </row>
    <row>
      <entry>line-style</entry>
      <entry>
{ <emphasis role='bold'>Solid</emphasis>,
<emphasis role='bold'>OnOffDash</emphasis>,
<emphasis role='bold'>DoubleDash</emphasis> }
      </entry>
    </row>
    <row>
      <entry>cap-style</entry>
      <entry>
{ <emphasis role='bold'>NotLast</emphasis>,
<emphasis role='bold'>Butt</emphasis>,
<emphasis role='bold'>Round</emphasis>,
<emphasis role='bold'>Projecting</emphasis> }
      </entry>
    </row>
    <row>
      <entry>join-style</entry>
      <entry>
{ <emphasis role='bold'>Miter</emphasis>,
<emphasis role='bold'>Round</emphasis>,
<emphasis role='bold'>Bevel</emphasis> }
      </entry>
    </row>
    <row>
      <entry>fill-style</entry>
      <entry>
{ <emphasis role='bold'>Solid</emphasis>,
<emphasis role='bold'>Tiled</emphasis>,
<emphasis role='bold'>OpaqueStippled</emphasis>,
<emphasis role='bold'>Stippled</emphasis> }
      </entry>
    </row>
    <row>
      <entry>fill-rule</entry>
      <entry>
{ <emphasis role='bold'>EvenOdd</emphasis>,
<emphasis role='bold'>Winding</emphasis> }
      </entry>
    </row>
    <row>
      <entry>arc-mode</entry>
      <entry>
{ <emphasis role='bold'>Chord</emphasis>,
<emphasis role='bold'>PieSlice</emphasis> }
      </entry>
    </row>
    <row>
      <entry>tile</entry>
      <entry>PIXMAP</entry>
    </row>
    <row>
      <entry>stipple</entry>
      <entry>PIXMAP</entry>
    </row>
    <row>
      <entry>tile-stipple-x-origin</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>tile-stipple-y-origin</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>font</entry>
      <entry>FONT</entry>
    </row>
    <row>
      <entry>subwindow-mode</entry>
      <entry>
{ <emphasis role='bold'>ClipByChildren</emphasis>,
<emphasis role='bold'>IncludeInferiors</emphasis> }
      </entry>
    </row>
    <row>
      <entry>graphics-exposures</entry>
      <entry>BOOL</entry>
    </row>
    <row>
      <entry>clip-x-origin</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>clip-y-origin</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>clip-mask</entry>
      <entry>
PIXMAP or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>dash-offset</entry>
      <entry>CARD16</entry>
    </row>
    <row>
      <entry>dashes</entry>
      <entry>CARD8</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para id="requests:CreateGC:plane-mask">
<indexterm zone="requests:CreateGC:plane-mask"><primary>Plane</primary><secondary>mask</secondary></indexterm>
In graphics operations,
given a source and destination pixel,
the result is computed bitwise on corresponding bits of the pixels;
that is, a Boolean operation is performed in each bit plane.
The plane-mask restricts the operation to a subset of planes,
so the result is:
</para>

<literallayout class="monospaced">
	((src FUNC dst) AND plane-mask) OR (dst AND (NOT plane-mask))
</literallayout>

<para>
Range checking is not performed on the values for foreground, background,
or plane-mask.
They are simply truncated to the appropriate number of bits.
</para>

<para id="requests:CreateGC:function">
The meanings of the functions are:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Function</entry>
      <entry>Operation</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Clear</emphasis>
      </entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>And</emphasis>
      </entry>
      <entry>src AND dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>AndReverse</emphasis>
      </entry>
      <entry>src AND (NOT dst)</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Copy</emphasis>
      </entry>
      <entry>src</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>AndInverted</emphasis>
      </entry>
      <entry>(NOT src) AND dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>NoOp</emphasis>
      </entry>
      <entry>dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Xor</emphasis>
      </entry>
      <entry>src XOR dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Or</emphasis>
      </entry>
      <entry>src OR dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Nor</emphasis>
      </entry>
      <entry>(NOT src) AND (NOT dst)</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Equiv</emphasis>
      </entry>
      <entry>(NOT src) XOR dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Invert</emphasis>
      </entry>
      <entry>NOT dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>OrReverse</emphasis>
      </entry>
      <entry>src OR (NOT dst)</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>CopyInverted</emphasis>
      </entry>
      <entry>NOT src</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>OrInverted</emphasis>
      </entry>
      <entry>(NOT src) OR dst</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Nand</emphasis>
      </entry>
      <entry>(NOT src) OR (NOT dst)</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Set</emphasis>
      </entry>
      <entry>1</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para id="requests:CreateGC:line-width">
<indexterm zone="requests:CreateGC:line-width"><primary>Line</primary><secondary>drawing</secondary></indexterm>
The line-width is measured in pixels and can be greater than or equal to
one, a wide line, or the special value zero, a thin line.
</para>

<para>
Wide lines are drawn centered on the path described by the graphics request.
Unless otherwise specified by the join or cap style,
the bounding box of a wide line with endpoints [x1, y1], [x2, y2] and
width w is a rectangle with vertices at the following real coordinates:
</para>

<literallayout class="monospaced">
	[x1-(w*sn/2), y1+(w*cs/2)], [x1+(w*sn/2), y1-(w*cs/2)],
	[x2-(w*sn/2), y2+(w*cs/2)], [x2+(w*sn/2), y2-(w*cs/2)]
</literallayout>

<para>
The sn is the sine of the angle of the line and cs is the cosine of
the angle of the line.
A pixel is part of the line (and hence drawn) if the center of the pixel
is fully inside the bounding box, which is viewed as having infinitely thin
edges.
If the center of the pixel is exactly on the bounding box,
it is part of the line if and only if the interior is immediately to its right
(x increasing direction).
Pixels with centers on a horizontal edge are a special case and are part of
the line if and only if the interior or the boundary is immediately below
(y increasing direction) and if the interior or the boundary is immediately
to the right (x increasing direction).
Note that this description is a mathematical model describing the pixels
that are drawn for a wide line and does not imply that trigonometry is required
to implement such a model.
Real or fixed point arithmetic is recommended for computing the corners of the
line endpoints for lines greater than one pixel in width.
</para>
<para>
Thin lines (zero line-width) are nominally one pixel wide lines drawn using an
unspecified, device-dependent algorithm.
There are only two constraints on this algorithm.
First, if a line is drawn unclipped from [x1,y1] to [x2,y2]
and another line is drawn unclipped from [x1+dx,y1+dy] to [x2+dx,y2+dy],
then a point [x,y] is touched by drawing the first line if
and only if the point [x+dx,y+dy] is touched by drawing the second line.
Second, the effective set of points comprising a line cannot be affected
by clipping.
Thus, a point is touched in a clipped line if and only if the point lies
inside the clipping region and the point would be touched by the line
when drawn unclipped.
</para>
<para>
Note that a wide line drawn from [x1,y1] to [x2,y2] always draws the
same pixels as a wide line drawn from [x2,y2] to [x1,y1], not counting
cap-style and join-style.
Implementors are encouraged to make this property true for thin lines,
but it is not required.
A line-width of zero may differ from a line-width of one in which pixels
are drawn.
In general,
drawing a thin line will be faster than drawing a wide line of width one,
but thin lines may not mix well aesthetically with wide lines
because of the different drawing algorithms.
If it is desirable to obtain precise and uniform results across all displays,
a client should always use a line-width of one, rather than a line-width of
zero.
</para>
<para id="requests:CreateGC:line-style">
The line-style defines which sections of a line are drawn:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Solid</emphasis>
      </entry>
      <entry>
The full path of the line is drawn.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>DoubleDash</emphasis>
      </entry>
      <entry>
The full path of the line is drawn,
but the even dashes are filled differently than the odd dashes
(see fill-style), with
<emphasis role='bold'>Butt</emphasis>
cap-style used where even and odd dashes meet.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>OnOffDash</emphasis>
      </entry>
      <entry>
Only the even dashes are drawn,
and cap-style applies to all internal ends of the individual dashes
(except
<emphasis role='bold'>NotLast</emphasis>
is treated as
<emphasis role='bold'>Butt</emphasis>).
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para id="requests:CreateGC:cap-style">
The cap-style defines how the endpoints of a path are drawn:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>NotLast</emphasis>
      </entry>
      <entry>
The result is equivalent to
<emphasis role='bold'>Butt</emphasis>,
except that for a line-width of zero the final endpoint is not drawn.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Butt</emphasis>
      </entry>
      <entry>
The result is square at the endpoint (perpendicular to the slope of the
line) with no projection beyond.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Round</emphasis>
      </entry>
      <entry>
The result is a circular arc with its diameter equal to the line-width,
centered on the endpoint; it is equivalent to
<emphasis role='bold'>Butt</emphasis>
for line-width zero.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Projecting</emphasis>
      </entry>
      <entry>
The result is square at the end, but the path continues beyond the
endpoint for a distance equal to half the line-width;
it is equivalent to
<emphasis role='bold'>Butt</emphasis>
for line-width zero.
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>



<para id="requests:CreateGC:join-style">
The join-style defines how corners are drawn for wide lines:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Miter</emphasis>
      </entry>
      <entry>
The outer edges of the two lines extend to meet at an angle.
However, if the angle is less than 11 degrees, a
<emphasis role='bold'>Bevel</emphasis>
join-style is used instead.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Round</emphasis>
      </entry>
      <entry>
The result is a circular arc with a diameter equal to the line-width,
centered on the joinpoint.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Bevel</emphasis>
      </entry>
      <entry>
The result is
<emphasis role='bold'>Butt</emphasis>
endpoint styles, and then the triangular notch is filled.
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>


<para>
For a line with coincident endpoints (x1=x2, y1=y2), when the cap-style
is applied to both endpoints, the semantics depends on the line-width
and the cap-style:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='3' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='1.0*'/>
  <colspec colname='c3' colwidth='4.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>NotLast</emphasis>
      </entry>
      <entry>thin</entry>
      <entry>
This is device-dependent, but the desired effect is that nothing is drawn.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Butt</emphasis>
      </entry>
      <entry>thin</entry>
      <entry>
This is device-dependent, but the desired effect is that
a single pixel is drawn.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Round</emphasis>
      </entry>
      <entry>thin</entry>
      <entry>
This is the same as
<emphasis role='bold'>Butt</emphasis>/thin.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Projecting</emphasis>
      </entry>
      <entry>thin</entry>
      <entry>
This is the same as
<emphasis role='bold'>Butt</emphasis>/thin.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Butt</emphasis>
      </entry>
      <entry>wide</entry>
      <entry>
Nothing is drawn.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Round</emphasis>
      </entry>
      <entry>wide</entry>
      <entry>
The closed path is a circle, centered at the endpoint and
with a diameter equal to the line-width.
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Projecting</emphasis>
      </entry>
      <entry>wide</entry>
      <entry>
The closed path is a square, aligned with the coordinate axes,
centered at the endpoint and with sides equal to the line-width.
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
For a line with coincident endpoints (x1=x2, y1=y2),
when the join-style is applied at one or both endpoints,
the effect is as if the line was removed from the overall path.
However, if the total path consists of (or is reduced to) a single point
joined with itself,
the effect is the same as when the cap-style is applied at both endpoints.
</para>
<para>
The tile/stipple represents an infinite two-dimensional plane
with the tile/stipple
replicated in all dimensions.  When that plane is superimposed on
the drawable for use in a graphics operation, the upper-left corner
of some instance of the tile/stipple is at the coordinates within
the drawable specified by the tile/stipple origin.
The tile/stipple and clip origins are interpreted relative to the
origin of whatever destination drawable is specified in a graphics
request.
</para>
<para>
The tile pixmap must have the same root and depth as the gcontext (or a
<emphasis role='bold'>Match</emphasis>
error results).
The stipple pixmap must have depth one and must have the same root
as the gcontext (or a
<emphasis role='bold'>Match</emphasis>
error results).
For fill-style
<emphasis role='bold'>Stippled</emphasis>
(but not fill-style
<emphasis role='bold'>OpaqueStippled</emphasis>),
the stipple pattern is tiled in a single plane
and acts as an additional clip mask to be ANDed with the clip-mask.
Any size pixmap can be used for tiling or stippling,
although some sizes may be faster to use than others.
</para>
<para>
The fill-style defines the contents of the source for line, text, and
fill requests.
For all text and fill requests (for example,
<link linkend="requests:PolyText8"><emphasis role='bold'>PolyText8</emphasis></link>,
<link linkend="requests:PolyText16"><emphasis role='bold'>PolyText16</emphasis></link>,
<link linkend="requests:PolyFillRectangle"><emphasis role='bold'>PolyFillRectangle</emphasis></link>,
<link linkend="requests:FillPoly"><emphasis role='bold'>FillPoly</emphasis></link>,
and
<link linkend="requests:PolyFillArc"><emphasis role='bold'>PolyFillArc</emphasis></link>)
as well as for line requests with line-style
<emphasis role='bold'>Solid</emphasis>,
(for example,
<link linkend="requests:PolyLine"><emphasis role='bold'>PolyLine</emphasis></link>,
<link linkend="requests:PolySegment"><emphasis role='bold'>PolySegment</emphasis></link>,
<link linkend="requests:PolyRectangle"><emphasis role='bold'>PolyRectangle</emphasis></link>,
<link linkend="requests:PolyArc"><emphasis role='bold'>PolyArc</emphasis></link> )
and for the even dashes for line requests with line-style
<emphasis role='bold'>OnOffDash</emphasis>
or
<emphasis role='bold'>DoubleDash</emphasis>:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Solid</emphasis>
      </entry>
      <entry>Foreground</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Tiled</emphasis>
      </entry>
      <entry>Tile</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>OpaqueStippled</emphasis>
      </entry>
      <entry>
A tile with the same width and height as stipple
but with background everywhere stipple has a zero
and with foreground everywhere stipple has a one
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Stippled</emphasis>
      </entry>
      <entry>
Foreground masked by stipple
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
For the odd dashes for line requests with line-style
<emphasis role='bold'>DoubleDash</emphasis>:
</para>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>Solid</emphasis>
      </entry>
      <entry>Background</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Tiled</emphasis>
      </entry>
      <entry>Same as for even dashes</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>OpaqueStippled</emphasis>
      </entry>
      <entry>Same as for even dashes</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>Stippled</emphasis>
      </entry>
      <entry>Background masked by stipple</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>


<para>
The dashes value allowed here is actually a simplified form of the more
general patterns that can be set with
<link linkend="requests:SetDashes"><emphasis role='bold'>SetDashes</emphasis></link>.
Specifying a value of N here is equivalent to specifying
the two element list [N, N] in
<link linkend="requests:SetDashes"><emphasis role='bold'>SetDashes</emphasis></link>.
The value must be nonzero (or a
<emphasis role='bold'>Value</emphasis>
error results).
The meaning of dash-offset and dashes are explained in the
<link linkend="requests:SetDashes"><emphasis role='bold'>SetDashes</emphasis></link>
request.
</para>
<para id="requests:CreateGC:clip-mask">
<indexterm zone="requests:CreateGC:clip-mask"><primary>Clipping region</primary></indexterm>
The clip-mask restricts writes to the destination drawable.
Only pixels where the clip-mask has bits set to 1 are drawn.
Pixels are not drawn outside the area covered by the clip-mask
or where the clip-mask has bits set to 0.
The clip-mask affects all graphics requests,
but it does not clip sources.
The clip-mask origin is interpreted relative to the origin of whatever
destination drawable is specified in a graphics request.
If a pixmap is specified as the clip-mask,
it must have depth 1 and have the same root as the gcontext (or a
<emphasis role='bold'>Match</emphasis>
error results).
If clip-mask is
<emphasis role='bold'>None</emphasis>,
then pixels are always drawn, regardless of the clip origin.
The clip-mask can also be set with the
<link linkend="requests:SetClipRectangles"><emphasis role='bold'>SetClipRectangles</emphasis></link>
request.
</para>
<para>
For
<emphasis role='bold'>ClipByChildren</emphasis>,
both source and destination windows are additionally clipped by all viewable
<emphasis role='bold'>InputOutput</emphasis>
children.
For
<emphasis role='bold'>IncludeInferiors</emphasis>,
neither source nor destination window is clipped by inferiors.
This will result in including subwindow contents in the
source and drawing through subwindow boundaries of the destination.
The use of
<emphasis role='bold'>IncludeInferiors</emphasis>
with a source or destination window of one depth with mapped inferiors
of differing depth is not illegal,
but the semantics is undefined by the core protocol.
</para>
<para id="requests:CreateGC:fill-rule">
<indexterm zone="requests:CreateGC:fill-rule" significance="preferred"><primary>Winding rule</primary></indexterm>
<indexterm zone="requests:CreateGC:fill-rule" significance="preferred"><primary>Fill rule</primary></indexterm>
The fill-rule defines what pixels are inside (that is, are drawn) for
paths given in
<link linkend="requests:FillPoly"><emphasis role='bold'>FillPoly</emphasis></link>
requests.
<emphasis role='bold'>EvenOdd</emphasis>
means a point is inside if an infinite ray with the point as origin crosses
the path an odd number of times.
For
<emphasis role='bold'>Winding</emphasis>,
a point is inside if an infinite ray with the point as origin crosses an
unequal number of clockwise and counterclockwise directed path segments.
A clockwise directed path segment is one that crosses the ray from left
to right as observed from the point.
A counter-clockwise segment is one that crosses the ray from right to left
as observed from the point.
The case where a directed line segment is coincident with the ray is
uninteresting because one can simply choose a different ray that is not
coincident with a segment.
</para>
<para>
For both fill rules,
a point is infinitely small and the path is an infinitely thin line.
A pixel is inside if the center point of the pixel is inside
and the center point is not on the boundary.
If the center point is on the boundary,
the pixel is inside if and only if the polygon interior is immediately
to its right (x increasing direction).
Pixels with centers along a horizontal edge are a special case
and are inside if and only if the polygon interior is immediately below
(y increasing direction).
</para>
<para>
The arc-mode controls filling in the
<link linkend="requests:PolyFillArc"><emphasis role='bold'>PolyFillArc</emphasis></link>
request.
</para>
<para>
The graphics-exposures flag controls
<link linkend="events:GraphicsExposure"><emphasis role='bold'>GraphicsExposure</emphasis></link>
event generation for
<link linkend="requests:CopyArea"><emphasis role='bold'>CopyArea</emphasis></link>
and
<link linkend="requests:CopyPlane"><emphasis role='bold'>CopyPlane</emphasis></link>
requests (and any similar requests defined by extensions).
</para>
<para>
The default component values are:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Component</entry>
      <entry>Default</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>function</entry>
      <entry>
<emphasis role='bold'>Copy</emphasis>
      </entry>
    </row>
    <row>
      <entry>plane-mask</entry>
      <entry>all ones</entry>
    </row>
    <row>
      <entry>foreground</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>background</entry>
      <entry>1</entry>
    </row>
    <row>
      <entry>line-width</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>line-style</entry>
      <entry><emphasis role='bold'>Solid</emphasis></entry>
    </row>
    <row>
      <entry>cap-style</entry>
      <entry><emphasis role='bold'>Butt</emphasis></entry>
    </row>
    <row>
      <entry>join-style</entry>
      <entry><emphasis role='bold'>Miter</emphasis></entry>
    </row>
    <row>
      <entry>fill-style</entry>
      <entry><emphasis role='bold'>Solid</emphasis></entry>
    </row>
    <row>
      <entry>fill-rule</entry>
      <entry><emphasis role='bold'>EvenOdd</emphasis></entry>
    </row>
    <row>
      <entry>arc-mode</entry>
      <entry><emphasis role='bold'>PieSlice</emphasis></entry>
    </row>
    <row>
      <entry>tile</entry>
      <entry>
<para>
Pixmap of unspecified size filled with foreground pixel
</para>
<para>
(that is, client specified pixel if any, else 0)
</para>
<para>
(subsequent changes to foreground do not affect this pixmap)
</para>
      </entry>
    </row>
    <row>
      <entry>stipple</entry>
      <entry>
Pixmap of unspecified size filled with ones
      </entry>
    </row>
    <row>
      <entry>tile-stipple-x-origin</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>tile-stipple-y-origin</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>font</entry>
      <entry>&lt;server-dependent-font&gt;</entry>
    </row>
    <row>
      <entry>subwindow-mode</entry>
      <entry>
<emphasis role='bold'>ClipByChildren</emphasis>
      </entry>
    </row>
    <row>
      <entry>graphics-exposures</entry>
      <entry>
<emphasis role='bold'>True</emphasis>
      </entry>
    </row>
    <row>
      <entry>clip-x-origin</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>clip-y-origin</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>clip-mask</entry>
      <entry>
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>dash-offset</entry>
      <entry>0</entry>
    </row>
    <row>
      <entry>dashes</entry>
      <entry>4 (that is, the list [4, 4])</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
Storing a pixmap in a gcontext might or might not result in a copy
being made.
If the pixmap is later used as the destination for a graphics request,
the change might or might not be reflected in the gcontext.
If the pixmap is used simultaneously in a graphics request
as both a destination and as a tile or stipple,
the results are not defined.
</para>
<para>
It is quite likely that some amount of gcontext information will be
cached in display hardware and that such hardware can only cache a
small number of gcontexts.
Given the number and complexity of components,
clients should view switching between gcontexts with nearly
identical state as significantly more expensive than making minor
changes to a single gcontext.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeGC">
    <title>ChangeGC</title>
    <indexterm zone="requests:ChangeGC" significance="preferred"><primary>ChangeGC</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes components in gc.
The value-mask and value-list specify which components are to be changed.
The values and restrictions are the same
as for
<link linkend="requests:CreateGC"><emphasis role='bold'>CreateGC</emphasis></link>.
</para>
<para>
Changing the clip-mask also overrides any previous
<link linkend="requests:SetClipRectangles"><emphasis role='bold'>SetClipRectangles</emphasis></link>
request on the context.
Changing dash-offset or dashes overrides any previous
<link linkend="requests:SetDashes"><emphasis role='bold'>SetDashes</emphasis></link>
request on the context.
</para>
<para>
The order in which components are verified and altered is server-dependent.
If an error is generated,
a subset of the components may have been altered.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CopyGC">
    <title>CopyGC</title>
    <indexterm zone="requests:CopyGC" significance="preferred"><primary>CopyGC</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>src-gc</emphasis>, <emphasis remap='I'>dst-gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request copies components from src-gc to dst-gc.
The value-mask specifies which components to copy, as for
<link linkend="requests:CreateGC"><emphasis role='bold'>CreateGC</emphasis></link>.
The two gcontexts must have the same root and the same depth (or a
<emphasis role='bold'>Match</emphasis>
error results).
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetDashes">
    <title>SetDashes</title>
    <indexterm zone="requests:SetDashes" significance="preferred"><primary>SetDashes</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dash-offset</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dashes</emphasis>: LISTofCARD8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request sets dash-offset and dashes in gc for dashed line styles.
Dashes cannot be empty (or a
<emphasis role='bold'>Value</emphasis>
error results).
Specifying an odd-length list is equivalent to specifying the same list
concatenated with itself to produce an even-length list.
The initial and alternating elements of dashes are the even dashes;
the others are the odd dashes.
Each element specifies a dash length in pixels.
All of the elements must be nonzero (or a
<emphasis role='bold'>Value</emphasis>
error results).
The dash-offset defines the phase of the pattern,
specifying how many pixels into dashes the pattern should actually begin in
any single graphics request.
Dashing is continuous through path elements combined with a join-style
but is reset to the dash-offset between each sequence of joined lines.
</para>
<para>
The unit of measure for dashes is the same as in the ordinary
coordinate system.
Ideally, a dash length is measured along the slope of the line,
but implementations are only required to match this ideal
for horizontal and vertical lines.
Failing the ideal semantics,
it is suggested that the length be measured along the major axis of the line.
The major axis is defined as the x axis for lines drawn at an angle of
between -45 and +45 degrees or between 135 and 225 degrees from the x axis.
For all other lines, the major axis is the y axis.
</para>
<para>
For any graphics primitive, the computation of the endpoint of an individual
dash only depends on the geometry of the primitive, the start position
of the dash, the direction of the dash, and the dash length.
</para>
<para>
For any graphics primitive, the total set of pixels used to render the
primitive (both even and odd numbered dash elements) with
<emphasis role='bold'>DoubleDash</emphasis>
line-style is the same as the set of pixels used to render the
primitive with
<emphasis role='bold'>Solid</emphasis>
line-style.
</para>
<para>
For any graphics primitive, if the primitive is drawn with
<emphasis role='bold'>OnOffDash</emphasis>
or
<emphasis role='bold'>DoubleDash</emphasis>
line-style unclipped at position [x,y] and again at position
[x+dx,y+dy], then a point [x1,y1] is included in a dash in the first
instance if and only if the point [x1+dx,y1+dy] is included in the dash in
the second instance.  In addition, the effective set of points comprising a
dash cannot be affected by clipping.  A point is included in a clipped dash
if and only if the point lies inside the clipping region and the point
would be included in the dash when drawn unclipped.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetClipRectangles">
    <title>SetClipRectangles</title>
    <indexterm zone="requests:SetClipRectangles" significance="preferred"><primary>SetClipRectangles</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>clip-x-origin</emphasis>, <emphasis remap='I'>clip-y-origin</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>rectangles</emphasis>: LISTofRECTANGLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>ordering</emphasis>:
{ <emphasis role='bold'>UnSorted</emphasis>,
<emphasis role='bold'>YSorted</emphasis>,
<emphasis role='bold'>YXSorted</emphasis>,
<emphasis role='bold'>YXBanded</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes clip-mask in gc to the specified list of rectangles
and sets the clip origin.
Output will be clipped to remain contained within the rectangles.
The clip origin is interpreted relative to the origin of
whatever destination drawable is specified in a graphics request.
The rectangle coordinates are interpreted relative to the clip origin.
The rectangles should be nonintersecting, or graphics results will be
undefined.
Note that the list of rectangles can be empty,
which effectively disables output.
This is the opposite of passing
<emphasis role='bold'>None</emphasis>
as the clip-mask in
<link linkend="requests:CreateGC"><emphasis role='bold'>CreateGC</emphasis></link>
and
<link linkend="requests:ChangeGC"><emphasis role='bold'>ChangeGC</emphasis></link>.
</para>
<para>
If known by the client,
ordering relations on the rectangles can be specified with the ordering
argument.
This may provide faster operation by the server.
If an incorrect ordering is specified,
the server may generate a
<emphasis role='bold'>Match</emphasis>
error, but it is not required to do so.
If no error is generated,
the graphics results are undefined.
<emphasis role='bold'>UnSorted</emphasis>
means that the rectangles are in arbitrary order.
<emphasis role='bold'>YSorted</emphasis>
means that the rectangles are nondecreasing in their Y origin.
<emphasis role='bold'>YXSorted</emphasis>
additionally constrains
<emphasis role='bold'>YSorted</emphasis>
order in that all rectangles with an equal Y origin are
nondecreasing in their X origin.
<emphasis role='bold'>YXBanded</emphasis>
additionally constrains
<emphasis role='bold'>YXSorted</emphasis>
by requiring that, for every possible Y scanline,
all rectangles that include that scanline have identical Y origins and Y
extents.
<!-- .sp -->
</para>
  </section>
  <section id="requests:FreeGC">
    <title>FreeGC</title>
    <indexterm zone="requests:FreeGC" significance="preferred"><primary>FreeGC</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>gc</emphasis>: GCONTEXT
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>GContext</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request deletes the association between the resource ID and the gcontext
and destroys the gcontext.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ClearArea">
    <title>ClearArea</title>
    <indexterm zone="requests:ClearArea" significance="preferred"><primary>ClearArea</primary></indexterm>
    <indexterm zone="requests:ClearArea"><primary>Background</primary></indexterm><informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>exposures</emphasis>: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The x and y coordinates are relative to the window's origin
and specify the upper-left corner of the rectangle.
If width is zero,
it is replaced with the current width of the window minus x.
If height is zero,
it is replaced with the current height of the window minus y.
If the window has a defined background tile,
the rectangle is tiled with a plane-mask of all ones and function of
<emphasis role='bold'>Copy</emphasis>
and a subwindow-mode of
<emphasis role='bold'>ClipByChildren</emphasis>.
If the window has background
<emphasis role='bold'>None</emphasis>,
the contents of the window are not changed.
In either case,
if exposures is
<emphasis role='bold'>True</emphasis>,
then one or more exposure events are generated for regions of the rectangle
that are either visible or are being retained in a backing store.
</para>
<para>
It is a
<emphasis role='bold'>Match</emphasis>
error to use an
<emphasis role='bold'>InputOnly</emphasis>
window in this request.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CopyArea">
    <title>CopyArea</title>
    <indexterm zone="requests:CopyArea" significance="preferred"><primary>CopyArea</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>src-drawable</emphasis>, <emphasis remap='I'>dst-drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>src-x</emphasis>, <emphasis remap='I'>src-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dst-x</emphasis>, <emphasis remap='I'>dst-y</emphasis>: INT16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request combines the specified rectangle of src-drawable with the
specified rectangle of dst-drawable.
The src-x and src-y coordinates are relative to src-drawable's origin.
The dst-x and dst-y are relative to dst-drawable's origin,
each pair specifying the upper-left corner of the rectangle.
The src-drawable must have the same root and the same depth
as dst-drawable (or a
<emphasis role='bold'>Match</emphasis>
error results).
</para>
<para>
If regions of the source rectangle are obscured and have not been retained
in backing store
or if regions outside the boundaries of the source drawable are specified,
then those regions are not copied,
but the following occurs on all corresponding destination regions that are
either visible or are retained in backing-store.
If the dst-drawable is a window with a background other than
<emphasis role='bold'>None</emphasis>,
these corresponding destination regions are tiled
(with plane-mask of all ones and function
<emphasis role='bold'>Copy</emphasis>)
with that background.
Regardless of tiling and whether the destination is a window or a pixmap,
if graphics-exposures in gc is
<emphasis role='bold'>True</emphasis>,
then
<link linkend="events:GraphicsExposure"><emphasis role='bold'>GraphicsExposure</emphasis></link>
events for all corresponding destination regions are generated.
</para>
<para>
If graphics-exposures is
<emphasis role='bold'>True</emphasis>
but no
<emphasis role='bold'>GraphicsExposure</emphasis>
events are generated,
then a
<link linkend="events:NoExposure"><emphasis role='bold'>NoExposure</emphasis></link>
event is generated.
</para>
<para>
GC components: function, plane-mask, subwindow-mode,
graphics-exposures, clip-x-origin, clip-y-origin, clip-mask
<!-- .sp -->
</para>
  </section>
  <section id="requests:CopyPlane">
    <title>CopyPlane</title>
    <indexterm zone="requests:CopyPlane" significance="preferred"><primary>CopyPlane</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>src-drawable</emphasis>, <emphasis remap='I'>dst-drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>src-x</emphasis>, <emphasis remap='I'>src-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dst-x</emphasis>, <emphasis remap='I'>dst-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>bit-plane</emphasis>: CARD32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The src-drawable must have the same root as dst-drawable (or a
<emphasis role='bold'>Match</emphasis>
error results), but it need not have the same depth.
The bit-plane must have exactly one bit set to 1 and the value of bit-plane
must be less than %2 sup n% where <emphasis remap='I'>n</emphasis> is the depth of src-drawable (or a
<emphasis role='bold'>Value</emphasis>
error results).
Effectively, a pixmap of the same depth as dst-drawable and with size specified
by the source region is formed using the foreground/background pixels in gc
(foreground everywhere the bit-plane in src-drawable contains a bit set to 1,
background everywhere the bit-plane contains a bit set to 0),
and the equivalent of a
<link linkend="requests:CopyArea"><emphasis role='bold'>CopyArea</emphasis></link>
is performed, with all the same exposure semantics.
This can also be thought of as using the specified region of the source
bit-plane as a stipple with a fill-style of
<emphasis role='bold'>OpaqueStippled</emphasis>
for filling a rectangular area of the destination.
</para>
<para>
GC components: function, plane-mask, foreground, background,
subwindow-mode, graphics-exposures, clip-x-origin, clip-y-origin,
clip-mask
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyPoint">
    <title>PolyPoint</title>
    <indexterm zone="requests:PolyPoint" significance="preferred"><primary>PolyPoint</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>coordinate-mode</emphasis>:
{ <emphasis role='bold'>Origin</emphasis>,
<emphasis role='bold'>Previous</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>points</emphasis>: LISTofPOINT
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request combines the foreground pixel in gc with the pixel
at each point in the drawable.
The points are drawn in the order listed.
</para>
<para>
The first point is always relative to the drawable's origin.
The rest are relative either to that origin or the previous point,
depending on the coordinate-mode.
</para>
<para>
GC components: function, plane-mask, foreground, subwindow-mode,
clip-x-origin, clip-y-origin, clip-mask
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyLine">
    <title>PolyLine</title>
    <indexterm zone="requests:PolyLine" significance="preferred"><primary>PolyLine</primary></indexterm>
    <indexterm zone="requests:PolyLine"><primary>Line</primary><secondary>drawing</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>coordinate-mode</emphasis>:
{ <emphasis role='bold'>Origin</emphasis>,
<emphasis role='bold'>Previous</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>points</emphasis>: LISTofPOINT
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request draws lines between each pair of points (point[i], point[i+1]).
The lines are drawn in the order listed.
The lines join correctly at all intermediate points,
and if the first and last points coincide,
the first and last lines also join correctly.
</para>
<para>
For any given line,
no pixel is drawn more than once.
If thin (zero line-width) lines intersect,
the intersecting pixels are drawn multiple times.
If wide lines intersect,
the intersecting pixels are drawn only once, as though the entire
<emphasis role='bold'>PolyLine</emphasis>
were a single filled shape.
</para>
<para>
The first point is always relative to the drawable's origin.
The rest are relative either to that origin or the previous point,
depending on the coordinate-mode.
</para>
<para>
When either of the two lines involved in a
<emphasis role='bold'>Bevel</emphasis>
join is neither vertical
nor horizontal, then the slope and position of the line segment defining
the bevel join edge is implementation dependent.  However, the computation
of the slope and distance (relative to the join point) only depends on
the line width and the slopes of the two lines.
</para>
<para>
GC components: function, plane-mask, line-width, line-style,
cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolySegment">
    <title>PolySegment</title>
    <indexterm zone="requests:PolySegment" significance="preferred"><primary>PolySegment</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>segments</emphasis>: LISTofSEGMENT
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
where:
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
SEGMENT: [x1, y1, x2, y2: INT16]
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
For each segment,
this request draws a line between [x1, y1] and [x2, y2].
The lines are drawn in the order listed.
No joining is performed at coincident endpoints.
For any given line,
no pixel is drawn more than once.
If lines intersect,
the intersecting pixels are drawn multiple times.
</para>
<para>
GC components: function, plane-mask, line-width, line-style,
cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin,
clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyRectangle">
    <title>PolyRectangle</title>
    <indexterm zone="requests:PolyRectangle" significance="preferred"><primary>PolyRectangle</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>rectangles</emphasis>: LISTofRECTANGLE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request draws the outlines of the specified rectangles, as if a five-point
<link linkend="requests:PolyLine"><emphasis role='bold'>PolyLine</emphasis></link>
were specified for each rectangle:
</para>
<para>
<literallayout class="monospaced">
	[x,y] [x+width,y] [x+width,y+height] [x,y+height] [x,y]
</literallayout>
</para>
<para>
The x and y coordinates of each rectangle are relative to the drawable's origin
and define the upper-left corner of the rectangle.
</para>
<para>
The rectangles are drawn in the order listed.
For any given rectangle,
no pixel is drawn more than once.
If rectangles intersect,
the intersecting pixels are drawn multiple times.
</para>
<para>
GC components: function, plane-mask, line-width, line-style,
cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyArc">
    <title>PolyArc</title>
    <indexterm zone="requests:PolyArc" significance="preferred"><primary>PolyArc</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>arcs</emphasis>: LISTofARC
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request draws circular or elliptical arcs.
Each arc is specified by a rectangle and two angles.
The angles are signed integers in degrees scaled by 64,
with positive indicating counterclockwise motion and
negative indicating clockwise motion.
The start of the arc is specified by angle1 relative to the three-o'clock
position from the center of the rectangle,
and the path and extent of the arc is specified by angle2 relative to the
start of the arc.
If the magnitude of angle2 is greater than 360 degrees,
it is truncated to 360 degrees.
The x and y coordinates of the rectangle are relative to the origin of
the drawable.
For an arc specified as [x,y,w,h,a1,a2],
the origin of the major and minor axes is at [x+(w/2),y+(h/2)],
and the infinitely thin path describing the entire circle/ellipse intersects
the horizontal axis at [x,y+(h/2)] and [x+w,y+(h/2)] and intersects the
vertical axis at [x+(w/2),y] and [x+(w/2),y+h].
These coordinates are not necessarily integral; that is,
they are not truncated to discrete coordinates.
</para>
<para>
For a wide line with line-width lw, the ideal bounding outlines for filling
are given by the two infinitely thin paths consisting of all points whose
perpendicular distance from a tangent to the path of the circle/ellipse is
equal to lw/2 (which may be a fractional value).  When the width and height
of the arc are not equal and both are nonzero, then the actual bounding
outlines are implementation dependent.  However, the computation of the
shape and position of the bounding outlines (relative to the center of the
arc) only depends on the width and height of the arc and the
line-width.
</para>
<para>
The cap-style is applied the same as for a line corresponding to the
tangent of the circle/ellipse at the endpoint.  When the angle of an arc
face is not an integral multiple of 90 degrees, and the width and height of
the arc are both are nonzero, then the shape and position of the cap at
that face is implementation dependent.  However, for a
<emphasis role='bold'>Butt</emphasis>
cap, the face
is defined by a straight line, and the computation of the position
(relative to the center of the arc) and the slope of the line only
depends on the width and height of the arc and the angle of the arc face.
For other cap styles, the computation of the position (relative to the
center of the arc) and the shape of the cap only depends on the width
and height of the arc, the line-width, the angle of the arc face, and the
direction (clockwise or counter clockwise) of the arc from the endpoint.
</para>
<para>
The join-style is applied the same as for two lines corresponding to the
tangents of the circles/ellipses at the join point.  When the width and
height of both arcs are nonzero, and the angle of either arc face is not an
integral multiple of 90 degrees, then the shape of the join is
implementation dependent.  However, the computation of the shape only
depends on the width and height of each arc, the line-width, the angles of
the two arc faces, the direction (clockwise or counter clockwise) of the
arcs from the join point, and the relative orientation of the two arc
center points.
</para>
<para>
For an arc specified as [x,y,w,h,a1,a2],
the angles must be specified in the effectively skewed coordinate system of
the ellipse (for a circle, the angles and coordinate systems are identical).
The relationship between these angles and angles expressed in the normal
coordinate system of the screen (as measured with a protractor) is as
follows:
<literallayout class="monospaced">
	skewed-angle = atan(tan(normal-angle) * w/h) + adjust
</literallayout>
</para>
<para>
The skewed-angle and normal-angle are expressed in radians (rather
than in degrees scaled by 64) in the range [0,2*PI).
The atan returns a value in the range [-PI/2,PI/2].
The adjust is:
<informaltable frame="none">
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
    <colspec colname='c1' colwidth='1.0*'/>
    <colspec colname='c2' colwidth='2.0*'/>
    <tbody>
      <row>
	<entry>0</entry>
	<entry>for normal-angle in the range [0,PI/2)</entry>
      </row>
      <row>
	<entry>PI</entry>
	<entry>for normal-angle in the range [PI/2,(3*PI)/2)</entry>
      </row>
      <row>
	<entry>2*PI</entry>
	<entry>for normal-angle in the range [(3*PI)/2,2*PI)</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</para>
<para>
The arcs are drawn in the order listed.
If the last point in one arc coincides with the first point in the following
arc,
the two arcs will join correctly.
If the first point in the first arc coincides with the last point
in the last arc,
the two arcs will join correctly.
For any given arc,
no pixel is drawn more than once.
If two arcs join correctly and the line-width is greater than zero
and the arcs intersect,
no pixel is drawn more than once.
Otherwise, the intersecting pixels of intersecting arcs are drawn multiple
times.
Specifying an arc with one endpoint and a clockwise extent draws the
same pixels as specifying the other endpoint and an equivalent
counterclockwise extent, except as it affects joins.
</para>
<para>
By specifying one axis to be zero,
a horizontal or vertical line can be drawn.
</para>
<para>
Angles are computed based solely on the coordinate system,
ignoring the aspect ratio.
</para>
<para>
GC components: function, plane-mask, line-width, line-style,
cap-style, join-style, fill-style, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes
<!-- .sp -->
</para>
  </section>
  <section id="requests:FillPoly">
    <title>FillPoly</title>
    <indexterm zone="requests:FillPoly" significance="preferred"><primary>FillPoly</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2in -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>shape</emphasis>:
{ <emphasis role='bold'>Complex</emphasis>,
<emphasis role='bold'>Nonconvex</emphasis>,
<emphasis role='bold'>Convex</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>coordinate-mode</emphasis>:
{ <emphasis role='bold'>Origin</emphasis>,
<emphasis role='bold'>Previous</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>points</emphasis>: LISTofPOINT
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request fills the region closed by the specified path.
The path is closed automatically if the last point in the list does not
coincide with the first point.
No pixel of the region is drawn more than once.
</para>
<para>
The first point is always relative to the drawable's origin.
The rest are relative either to that origin or the previous point,
depending on the coordinate-mode.
</para>
<para>
The shape parameter may be used by the server to improve performance.
<emphasis role='bold'>Complex</emphasis>
means the path may self-intersect.
Contiguous coincident points in the path are not treated
as self-intersection.
</para>
<para>
<emphasis role='bold'>Nonconvex</emphasis>
means the path does not self-intersect,
but the shape is not wholly convex.
If known by the client,
specifying
<emphasis role='bold'>Nonconvex</emphasis>
over
<emphasis role='bold'>Complex</emphasis>
may improve performance.
If
<emphasis role='bold'>Nonconvex</emphasis>
is specified for a self-intersecting path,
the graphics results are undefined.
</para>
<para>
<emphasis role='bold'>Convex</emphasis>
means that for every pair of points inside the polygon,
the line segment connecting them does not intersect the path.
If known by the client,
specifying
<emphasis role='bold'>Convex</emphasis>
can improve performance.
If
<emphasis role='bold'>Convex</emphasis>
is specified for a path that is not convex,
the graphics results are undefined.
</para>
<para>
GC components: function, plane-mask, fill-style, fill-rule,
subwindow-mode, clip-x-origin, clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyFillRectangle">
    <title>PolyFillRectangle</title>
    <indexterm zone="requests:PolyFillRectangle" significance="preferred"><primary>PolyFillRectangle</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>rectangles</emphasis>: LISTofRECTANGLE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request fills the specified rectangles, as if a four-point
<link linkend="requests:FillPoly"><emphasis role='bold'>FillPoly</emphasis></link>
were specified for each rectangle:
<literallayout class="monospaced">
	[x,y] [x+width,y] [x+width,y+height] [x,y+height]
</literallayout>
</para>
<para>
The x and y coordinates of each rectangle are relative to the drawable's origin
and define the upper-left corner of the rectangle.
</para>
<para>
The rectangles are drawn in the order listed.
For any given rectangle,
no pixel is drawn more than once.
If rectangles intersect,
the intersecting pixels are drawn multiple times.
</para>
<para>
GC components: function, plane-mask, fill-style, subwindow-mode,
clip-x-origin, clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyFillArc">
    <title>PolyFillArc</title>
    <indexterm zone="requests:PolyFillArc" significance="preferred"><primary>PolyFillArc</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>arcs</emphasis>: LISTofARC
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
For each arc,
this request fills the region closed by the infinitely thin path
described by the specified arc and one or two line segments,
depending on the arc-mode.
For
<emphasis role='bold'>Chord</emphasis>,
the single line segment joining the endpoints of the arc is used.
For
<emphasis role='bold'>PieSlice</emphasis>,
the two line segments joining the endpoints of the arc with the center point
are used.
</para>
<para>
For an arc specified as [x,y,w,h,a1,a2], the origin of the major and minor
axes is at [x+(w/2),y+(h/2)], and the infinitely thin path describing the
entire circle/ellipse intersects the horizontal axis at [x,y+(h/2)] and
[x+w,y+(h/2)] and intersects the vertical axis at [x+(w/2),y] and
[x+(w/2),y+h].  These coordinates are not necessarily integral; that is,
they are not truncated to discrete coordinates.
</para>
<para>
The arc angles are interpreted as specified in the
<link linkend="requests:PolyArc"><emphasis role='bold'>PolyArc</emphasis></link>
request.  When
the angle of an arc face is not an integral multiple of 90 degrees, then
the precise endpoint on the arc is implementation dependent.  However, for
<emphasis role='bold'>Chord</emphasis>
arc-mode, the computation of the pair of endpoints (relative to the
center of the arc) only depends on the width and height of the arc and
the angles of the two arc faces.  For
<emphasis role='bold'>PieSlice</emphasis>
arc-mode, the computation of
an endpoint only depends on the angle of the arc face for that
endpoint and the ratio of the arc width to arc height.
</para>
<para>
The arcs are filled in the order listed.
For any given arc,
no pixel is drawn more than once.
If regions intersect,
the intersecting pixels are drawn multiple times.
</para>
<para>
GC components: function, plane-mask, fill-style, arc-mode,
subwindow-mode, clip-x-origin, clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin
<!-- .sp -->
</para>
  </section>
  <section id="requests:PutImage">
    <title>PutImage</title>
    <indexterm zone="requests:PutImage" significance="preferred"><primary>PutImage</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>depth</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>dst-x</emphasis>, <emphasis remap='I'>dst-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>left-pad</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>format</emphasis>:
{ <emphasis role='bold'>Bitmap</emphasis>,
<emphasis role='bold'>XYPixmap</emphasis>,
<emphasis role='bold'>ZPixmap</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>data</emphasis>: LISTofBYTE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request combines an image with a rectangle of the drawable.
The dst-x and dst-y coordinates are relative to the drawable's origin.
</para>
<para>
If
<emphasis role='bold'>Bitmap</emphasis>
format is used,
then depth must be one (or a
<emphasis role='bold'>Match</emphasis>
error results), and the image must be in XY format.
The foreground pixel in gc defines the source for bits set to 1 in the image,
and the background pixel defines the source for the bits set to 0.
</para>
<para>
For
<emphasis role='bold'>XYPixmap</emphasis>
and
<emphasis role='bold'>ZPixmap</emphasis>,
the depth must match the depth of the drawable (or a
<emphasis role='bold'>Match</emphasis>
error results).
For
<emphasis role='bold'>XYPixmap</emphasis>,
the image must be sent in XY format.
For
<emphasis role='bold'>ZPixmap</emphasis>,
the image must be sent in the Z format defined for the given depth.
</para>
<para>
The left-pad must be zero for
<emphasis role='bold'>ZPixmap</emphasis>
format (or a
<emphasis role='bold'>Match</emphasis>
error results).
For
<emphasis role='bold'>Bitmap</emphasis>
and
<emphasis role='bold'>XYPixmap</emphasis>
format,
left-pad must be less than bitmap-scanline-pad as given in the server
connection setup information (or a
<emphasis role='bold'>Match</emphasis>
error results).
The first left-pad bits in every scanline are to be ignored by the server.
The actual image begins that many bits into the data.
The width argument defines the width of the actual image
and does not include left-pad.
</para>
<para>
GC components: function, plane-mask, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetImage">
    <title>GetImage</title>
    <indexterm zone="requests:GetImage" significance="preferred"><primary>GetImage</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>plane-mask</emphasis>: CARD32
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>format</emphasis>:
{ <emphasis role='bold'>XYPixmap</emphasis>,
<emphasis role='bold'>ZPixmap</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
depth: CARD8
      </entry>
    </row>
    <row>
      <entry>
visual: VISUALID or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
data: LISTofBYTE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the contents of the given rectangle of the drawable in the
given format.
The x and y coordinates are relative to the drawable's origin
and define the upper-left corner of the rectangle.
If
<emphasis role='bold'>XYPixmap</emphasis>
is specified,
only the bit planes specified in plane-mask are transmitted,
with the planes appearing from most significant to least significant
in bit order.
If
<emphasis role='bold'>ZPixmap</emphasis>
is specified, then bits in all planes not specified in plane-mask are
transmitted as zero.
Range checking is not performed on plane-mask;
extraneous bits are simply ignored.
The returned depth is as specified when the drawable was created
and is the same as a depth component in a FORMAT structure (in the connection
setup), not a bits-per-pixel component.
If the drawable is a window,
its visual type is returned.
If the drawable is a pixmap,
the visual is
<emphasis role='bold'>None</emphasis>.
</para>
<para>
If the drawable is a pixmap,
then the given rectangle must be wholly contained within the pixmap (or a
<emphasis role='bold'>Match</emphasis>
error results).
If the drawable is a window,
the window must be viewable,
and it must be the case that,
if there were no inferiors or overlapping windows,
the specified rectangle of the window would be fully visible on the screen
and wholly contained within the outside edges of the window (or a
<emphasis role='bold'>Match</emphasis>
error results).
Note that the borders of the window can be included and read with this request.
If the window has a backing store,
then the backing-store contents are returned for regions of the window
that are obscured by noninferior windows;
otherwise, the returned contents of such obscured regions are undefined.
Also undefined are the returned contents of visible
regions of inferiors of different depth than the specified window.
The pointer cursor image is not included in the contents returned.
</para>
<para>
This request is not general-purpose in the same sense as other
graphics-related requests.
It is intended specifically for rudimentary hardcopy support.
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyText8">
    <title>PolyText8</title>
    <indexterm zone="requests:PolyText8" significance="preferred"><primary>PolyText8</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='3' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='1.0*'/>
  <colspec colname='c3' colwidth='1.0*'/>
  <spanspec spanname='all' namest='c1' nameend='c3'/>
  <tbody>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<emphasis remap='I'>items</emphasis>: LISTofTEXTITEM8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='3'>
<!-- .in +.2i -->
where:
      </entry>
    </row>
    <row>
      <entry>
TEXTITEM8:
      </entry>
      <entry>
TEXTELT8 or FONT
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='1'>
TEXTELT8:
      </entry>
      <entry>
[delta: INT8
      </entry>
    </row>
    <row>
      <entry>
string: STRING8]
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The x and y coordinates are relative to the drawable's origin
and specify the baseline starting position (the initial character origin).
Each text item is processed in turn.
A font item causes the font to be stored in gc
and to be used for subsequent text.
Switching among fonts does not affect the next character origin.
A text element delta specifies an additional change in the position
along the x axis before the string is drawn;
the delta is always added to the character origin.
Each character image, as defined by the font in gc,
is treated as an additional mask for a fill operation on the drawable.
</para>
<para>
All contained FONTs are always transmitted most significant byte first.
</para>
<para>
If a
<emphasis role='bold'>Font</emphasis>
error is generated for an item,
the previous items may have been drawn.
</para>
<para>
For fonts defined with 2-byte matrix indexing,
each STRING8 byte is interpreted as a byte2 value of a CHAR2B with a byte1
value of zero.
</para>
<para>
GC components: function, plane-mask, fill-style, font,
subwindow-mode, clip-x-origin, clip-y-origin, clip-mask
</para>
<para>
GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin
<!-- .sp -->
</para>
  </section>
  <section id="requests:PolyText16">
    <title>PolyText16</title>
    <indexterm zone="requests:PolyText16" significance="preferred"><primary>PolyText16</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='3' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='1.0*'/>
  <colspec colname='c3' colwidth='1.0*'/>
  <spanspec spanname='all' namest='c1' nameend='c3'/>
  <tbody>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<emphasis remap='I'>items</emphasis>: LISTofTEXTITEM16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='3'>
<!-- .in +.2i -->
where:
      </entry>
    </row>
    <row>
      <entry>
TEXTITEM16:
      </entry>
      <entry>
TEXTELT16 or FONT
      </entry>
    </row>
    <row>
      <entry valign='top' morerows='1'>
TEXTELT16:
      </entry>
      <entry>
[delta: INT8
      </entry>
    </row>
    <row>
      <entry>
string: STRING16]
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry spanname='all'>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request is similar to
<link linkend="requests:PolyText8"><emphasis role='bold'>PolyText8</emphasis></link>,
except 2-byte (or 16-bit) characters are used.
For fonts defined with linear indexing rather than 2-byte matrix indexing,
the server will interpret each CHAR2B as a 16-bit number that
has been transmitted most significant byte first (that is, byte1 of the
CHAR2B is taken as the most significant byte).
<!-- .sp -->
</para>
  </section>
  <section id="requests:ImageText8">
    <title>ImageText8</title>
    <indexterm zone="requests:ImageText8" significance="preferred"><primary>ImageText8</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>string</emphasis>: STRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The x and y coordinates are relative to the drawable's origin
and specify the baseline starting position (the initial character origin).
The effect is first to fill a destination rectangle with the background
pixel defined in gc and then to paint the text with the foreground pixel.
The upper-left corner of the filled rectangle is at:
<literallayout class="monospaced">
	[x, y - font-ascent]
</literallayout>
</para>
<para>
the width is:
<literallayout class="monospaced">
	overall-width
</literallayout>
</para>
<para>
and the height is:
<literallayout class="monospaced">
	font-ascent + font-descent
</literallayout>
</para>
<para>
The overall-width, font-ascent, and font-descent are as
they would be returned by a
<link linkend="requests:QueryTextExtents"><emphasis role='bold'>QueryTextExtents</emphasis></link>
call using gc and string.
</para>
<para>
The function and fill-style defined in gc are ignored for this request.
The effective function is
<emphasis role='bold'>Copy</emphasis>,
and the effective fill-style
<emphasis role='bold'>Solid</emphasis>.
</para>
<para>
For fonts defined with 2-byte matrix indexing,
each STRING8 byte is interpreted as a byte2 value of a CHAR2B with a byte1
value of zero.
</para>
<para>
GC components: plane-mask, foreground, background, font,
subwindow-mode, clip-x-origin, clip-y-origin, clip-mask
<!-- .sp -->
</para>
  </section>
  <section id="requests:ImageText16">
    <title>ImageText16</title>
    <indexterm zone="requests:ImageText16" significance="preferred"><primary>ImageText16</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>gc</emphasis>: GCONTEXT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>string</emphasis>: STRING16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>GContext</emphasis>,
<emphasis role='bold'>Match</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request is similar to
<link linkend="requests:ImageText8"><emphasis role='bold'>ImageText8</emphasis></link>,
except 2-byte (or 16-bit) characters are used.
For fonts defined with linear indexing rather than 2-byte matrix indexing,
the server will interpret each CHAR2B as a 16-bit number that
has been transmitted most significant byte first (that is, byte1 of the
CHAR2B is taken as the most significant byte).
<!-- .sp -->
</para>
  </section>
  <section id="requests:CreateColormap">
    <title>CreateColormap</title>
    <indexterm zone="requests:CreateColormap" significance="preferred"><primary>CreateColormap</primary></indexterm>
    <indexterm zone="requests:CreateColormap"><primary>Colormap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mid</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>visual</emphasis>: VISUALID
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>alloc</emphasis>:
{ <emphasis role='bold'>None</emphasis>,
<emphasis role='bold'>All</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>,
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request creates a colormap of the specified visual type for the screen
on which the window resides and associates the identifier mid with it.
The visual type must be one supported by the screen (or a
<emphasis role='bold'>Match</emphasis>
error results).
The initial values of the colormap entries are undefined for classes
<emphasis role='bold'>GrayScale</emphasis>,
<emphasis role='bold'>PseudoColor</emphasis>,
and
<emphasis role='bold'>DirectColor</emphasis>.
For
<emphasis role='bold'>StaticGray</emphasis>,
<emphasis role='bold'>StaticColor</emphasis>,
and
<emphasis role='bold'>TrueColor</emphasis>,
the entries will have defined values,
but those values are specific to the visual and are not defined
by the core protocol.
For
<emphasis role='bold'>StaticGray</emphasis>,
<emphasis role='bold'>StaticColor</emphasis>,
and
<emphasis role='bold'>TrueColor</emphasis>,
alloc must be specified as
<emphasis role='bold'>None</emphasis>
(or a
<emphasis role='bold'>Match</emphasis>
error results).
For the other classes, if alloc is
<emphasis role='bold'>None</emphasis>,
the colormap initially has no allocated entries,
and clients can allocate entries.
</para>
<para>
If alloc is
<emphasis role='bold'>All</emphasis>,
then the entire colormap is allocated writable.
The initial values of all allocated entries are undefined.
For
<emphasis role='bold'>GrayScale</emphasis>
and
<emphasis role='bold'>PseudoColor</emphasis>,
the effect is as if an
<link linkend="requests:AllocColorCells"><emphasis role='bold'>AllocColorCells</emphasis></link>
request returned all pixel values from zero to N - 1,
where N is the colormap-entries value in the specified visual.
For
<emphasis role='bold'>DirectColor</emphasis>,
the effect is as if an
<link linkend="requests:AllocColorPlanes"><emphasis role='bold'>AllocColorPlanes</emphasis></link>
request returned a pixel value of zero and red-mask,
green-mask, and blue-mask values containing the same bits as the
corresponding masks in the specified visual.
However,
in all cases, none of these entries can be freed with
<link linkend="requests:FreeColors"><emphasis role='bold'>FreeColors</emphasis></link>.
<!-- .sp -->
</para>
  </section>
  <section id="requests:FreeColormap">
    <title>FreeColormap</title>
    <indexterm zone="requests:FreeColormap" significance="preferred"><primary>FreeColormap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Colormap</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request deletes the association between the resource ID and the colormap
and frees the colormap storage.
If the colormap is an installed map for a screen,
it is uninstalled (see
<link linkend="requests:UninstallColormap"><emphasis role='bold'>UninstallColormap</emphasis></link>
request).
If the colormap is defined as the colormap for a window (by means of
<link linkend="requests:CreateWindow"><emphasis role='bold'>CreateWindow</emphasis></link>
or
<link linkend="requests:ChangeWindowAttributes"><emphasis role='bold'>ChangeWindowAttributes</emphasis></link>),
the colormap for the window is changed to
<emphasis role='bold'>None</emphasis>,
and a
<link linkend="events:ColormapNotify"><emphasis role='bold'>ColormapNotify</emphasis></link>
event is generated.
The protocol does not define the colors displayed for a window with a colormap of
<emphasis role='bold'>None</emphasis>.
</para>
<para>
This request has no effect on a default colormap for a screen.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CopyColormapAndFree">
    <title>CopyColormapAndFree</title>
    <indexterm zone="requests:CopyColormapAndFree" significance="preferred"><primary>CopyColormapAndFree</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mid</emphasis>, <emphasis remap='I'>src-cmap</emphasis>: COLORMAP
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request creates a colormap of the same visual type
and for the same screen as src-cmap,
and it associates identifier mid with it.
It also moves all of the client's existing allocations from src-cmap
to the new colormap with their color values intact
and their read-only or writable characteristics intact,
and it frees those entries in src-cmap.
Color values in other entries in the new colormap are undefined.
If src-cmap was created by the client with alloc
<emphasis role='bold'>All</emphasis>
(see
<link linkend="requests:CreateColormap"><emphasis role='bold'>CreateColormap</emphasis></link>
request),
then the new colormap is also created with alloc
<emphasis role='bold'>All</emphasis>,
all color values for all entries are copied from src-cmap,
and then all entries in src-cmap are freed.
If src-cmap was not created by the client with alloc
<emphasis role='bold'>All</emphasis>,
then the allocations to be moved are all those pixels and planes that have
been allocated by the client using either
<link linkend="requests:AllocColor"><emphasis role='bold'>AllocColor</emphasis></link>,
<link linkend="requests:AllocNamedColor"><emphasis role='bold'>AllocNamedColor</emphasis></link>,
<link linkend="requests:AllocColorCells"><emphasis role='bold'>AllocColorCells</emphasis></link>,
or
<link linkend="requests:AllocColorPlanes"><emphasis role='bold'>AllocColorPlanes</emphasis></link>
and that have not been freed since they were allocated.
<!-- .sp -->
</para>
  </section>
  <section id="requests:InstallColormap">
    <title>InstallColormap</title>
    <indexterm zone="requests:InstallColormap" significance="preferred"><primary>InstallColormap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Colormap</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request makes this colormap an installed map for its screen.
All windows associated with this colormap immediately display with true colors.
As a side effect,
additional colormaps might be implicitly installed
or uninstalled by the server.
Which other colormaps get installed or uninstalled is server-dependent
except that the required list must remain installed.
</para>
<para>
If cmap is not already an installed map, a
<link linkend="events:ColormapNotify"><emphasis role='bold'>ColormapNotify</emphasis></link>
event is generated on every window having cmap as an attribute.
In addition,
for every other colormap that is installed or uninstalled as a result
of the request, a
<emphasis role='bold'>ColormapNotify</emphasis>
event is generated on every window having that colormap as an attribute.
</para>
<para>
At any time, there is a subset of the installed maps that are viewed as an
ordered list and are called the required list.
The length of the required list is at most M,
where M is the min-installed-maps specified for the screen in the
connection setup.
The required list is maintained as follows.
When a colormap is an explicit argument to
<emphasis role='bold'>InstallColormap</emphasis>,
it is added to the head of the list; the list is truncated at the
tail, if necessary, to keep the length of the list to at most M.
When a colormap is an explicit argument to
<link linkend="requests:UninstallColormap"><emphasis role='bold'>UninstallColormap</emphasis></link>
and it is in the required list, it is removed from the list.
A colormap is not added to the required list when it is installed implicitly
by the server, and the server cannot implicitly uninstall a colormap that is
in the required list.
</para>
<para>
Initially the default colormap for a screen is installed (but is not in
the required list).
<!-- .sp -->
</para>
  </section>
  <section id="requests:UninstallColormap">
    <title>UninstallColormap</title>
    <indexterm zone="requests:UninstallColormap" significance="preferred"><primary>UninstallColormap</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Colormap</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If cmap is on the required list for its screen (see
<link linkend="requests:InstallColormap"><emphasis role='bold'>InstallColormap</emphasis></link>
request),
it is removed from the list.
As a side effect,
cmap might be uninstalled,
and additional colormaps might be implicitly installed or uninstalled.
Which colormaps get installed or uninstalled is server-dependent
except that the required list must remain installed.
</para>
<para>
If cmap becomes uninstalled, a
<link linkend="events:ColormapNotify"><emphasis role='bold'>ColormapNotify</emphasis></link>
event is generated on every window having cmap as an attribute.
In addition,
for every other colormap that is installed or uninstalled as a result of
the request, a
<emphasis role='bold'>ColormapNotify</emphasis>
event is generated on every window having that colormap as an attribute.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ListInstalledColormaps">
    <title>ListInstalledColormaps</title>
    <indexterm zone="requests:ListInstalledColormaps" significance="preferred"><primary>ListInstalledColormaps</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
cmaps: LISTofCOLORMAP
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Window</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns a list of the currently installed colormaps for the
screen of the specified window.
The order of colormaps is not significant,
and there is no explicit indication of the required list (see
<link linkend="requests:InstallColormap"><emphasis role='bold'>InstallColormap</emphasis></link>
request).
<!-- .sp -->
</para>
  </section>
  <section id="requests:AllocColor">
    <title>AllocColor</title>
    <indexterm zone="requests:AllocColor" significance="preferred"><primary>AllocColor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>red</emphasis>, <emphasis remap='I'>green</emphasis>, <emphasis remap='I'>blue</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
pixel: CARD32
      </entry>
    </row>
    <row>
      <entry>
red, green, blue: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Colormap</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request allocates a read-only colormap entry corresponding to the closest
RGB values provided by the hardware.
It also returns the pixel and the RGB values actually used.
Multiple clients requesting the same effective RGB values can be assigned
the same read-only entry, allowing entries to be shared.
<!-- .sp -->
</para>
  </section>
  <section id="requests:AllocNamedColor">
    <title>AllocNamedColor</title>
    <indexterm zone="requests:AllocNamedColor" significance="preferred"><primary>AllocNamedColor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>name</emphasis>: STRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
pixel: CARD32
      </entry>
    </row>
    <row>
      <entry>
exact-red, exact-green, exact-blue: CARD16
      </entry>
    </row>
    <row>
      <entry>
visual-red, visual-green, visual-blue: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Name</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request looks up the named color with respect to the screen associated
with the colormap.
Then, it does an
<link linkend="requests:AllocColor"><emphasis role='bold'>AllocColor</emphasis></link>
on cmap.
The name should use the ISO Latin-1 encoding,
and uppercase and lowercase do not matter.
The exact RGB values specify the true values for the color,
and the visual values specify the values actually used in the colormap.
<!-- .sp -->
</para>
  </section>
  <section id="requests:AllocColorCells">
    <title>AllocColorCells</title>
    <indexterm zone="requests:AllocColorCells" significance="preferred"><primary>AllocColorCells</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>colors</emphasis>, <emphasis remap='I'>planes</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>contiguous</emphasis>: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
pixels, masks: LISTofCARD32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The number of colors must be positive,
and the number of planes must be nonnegative (or a
<emphasis role='bold'>Value</emphasis>
error results).
If C colors and P planes are requested,
then C pixels and P masks are returned.
No mask will have any bits in common with any other mask
or with any of the pixels.
By ORing together masks and pixels,
C*%2 sup P% distinct pixels can be produced;
all of these are allocated writable by the request.
For
<emphasis role='bold'>GrayScale</emphasis>
or
<emphasis role='bold'>PseudoColor</emphasis>,
each mask will have exactly one bit set to 1; for
<emphasis role='bold'>DirectColor</emphasis>,
each will have exactly three bits set to 1.
If contiguous is
<emphasis role='bold'>True</emphasis>
and if all masks are ORed together,
a single contiguous set of bits will be formed for
<emphasis role='bold'>GrayScale</emphasis>
or
<emphasis role='bold'>PseudoColor</emphasis>,
and three contiguous sets of bits (one within each pixel subfield) for
<emphasis role='bold'>DirectColor</emphasis>.
The RGB values of the allocated entries are undefined.
<!-- .sp -->
</para>
  </section>
  <section id="requests:AllocColorPlanes">
    <title>AllocColorPlanes</title>
    <indexterm zone="requests:AllocColorPlanes" significance="preferred"><primary>AllocColorPlanes</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>colors</emphasis>, <emphasis remap='I'>reds</emphasis>, <emphasis remap='I'>greens</emphasis>, <emphasis remap='I'>blues</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>contiguous</emphasis>: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
pixels: LISTofCARD32
      </entry>
    </row>
    <row>
      <entry>
red-mask, green-mask, blue-mask: CARD32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The number of colors must be positive,
and the reds, greens, and blues must be nonnegative (or a
<emphasis role='bold'>Value</emphasis>
error results).
If C colors, R reds, G greens, and B blues are requested,
then C pixels are returned, and the masks have R, G, and B bits set,
respectively.
If contiguous is
<emphasis role='bold'>True</emphasis>,
then each mask will have a contiguous set of bits.
No mask will have any bits in common with any other mask
or with any of the pixels.
For
<emphasis role='bold'>DirectColor</emphasis>,
each mask will lie within the corresponding pixel subfield.
By ORing together subsets of masks with pixels,
C*%2 sup R+G+B% distinct pixels can be produced;
all of these are allocated writable by the request.
The initial RGB values of the allocated entries are undefined.
In the colormap,
there are only C*%2 sup R% independent red entries,
C*%2 sup G% independent green entries,
and C*%2 sup B% independent blue entries.
This is true even for
<emphasis role='bold'>PseudoColor</emphasis>.
When the colormap entry for a pixel value is changed using
<link linkend="requests:StoreColors"><emphasis role='bold'>StoreColors</emphasis></link>
or
<link linkend="requests:StoreNamedColor"><emphasis role='bold'>StoreNamedColor</emphasis></link>,
the pixel is decomposed according to the masks and the
corresponding independent entries are updated.
<!-- .sp -->
</para>
  </section>
  <section id="requests:FreeColors">
    <title>FreeColors</title>
    <indexterm zone="requests:FreeColors" significance="preferred"><primary>FreeColors</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pixels</emphasis>: LISTofCARD32
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>plane-mask</emphasis>: CARD32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The plane-mask should not have any bits in common with any of the
pixels.
The set of all pixels is produced by ORing together subsets of
plane-mask with the pixels.
The request frees all of these pixels that
were allocated by the client (using
<link linkend="requests:AllocColor"><emphasis role='bold'>AllocColor</emphasis></link>,
<link linkend="requests:AllocNamedColor"><emphasis role='bold'>AllocNamedColor</emphasis></link>,
<link linkend="requests:AllocColorCells"><emphasis role='bold'>AllocColorCells</emphasis></link>,
and
<link linkend="requests:AllocColorPlanes"><emphasis role='bold'>AllocColorPlanes</emphasis></link>).
Note that freeing an
individual pixel obtained from
<link linkend="requests:AllocColorPlanes"><emphasis role='bold'>AllocColorPlanes</emphasis></link>
may not actually allow it to be reused until all of its related pixels
are also freed.
Similarly, a read-only entry is not actually freed until it has been
freed by all clients, and if a client allocates the same read-only entry
multiple times, it must free the entry that many times before the
entry is actually freed.
</para>
<para>
All specified pixels that are allocated by the client in cmap are freed,
even if one or more pixels produce an error.
A
<emphasis role='bold'>Value</emphasis>
error is generated if a specified pixel is not a valid index into cmap.
An
<emphasis role='bold'>Access</emphasis>
error is generated if a specified pixel is not allocated by the
client (that is, is unallocated or is only allocated by another client)
or if the colormap was created with all entries writable (using an alloc
value of
<emphasis role='bold'>All</emphasis>
in
<link linkend="requests:CreateColormap"><emphasis role='bold'>CreateColormap</emphasis></link>).
If more than one pixel is in error,
it is arbitrary as to which pixel is reported.
<!-- .sp -->
</para>
  </section>
  <section id="requests:StoreColors">
    <title>StoreColors</title>
    <indexterm zone="requests:StoreColors" significance="preferred"><primary>StoreColors</primary></indexterm>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>items</emphasis>: LISTofCOLORITEM
      </entry>
    </row>
    <row>
      <entry>
where:
      </entry>
    </row>
    <row>
      <entry>
        <para>
        <informaltable frame='none'>
  <?dbfo keep-together="always" ?>
          <tgroup cols='2' align='left' colsep='0' rowsep='0'>
          <colspec colname='c1' colwidth='1.0*'/>
          <colspec colname='c2' colwidth='2.0*'/>
          <tbody>
          <row>
            <entry>COLORITEM:</entry>
            <entry>[pixel: CARD32</entry>
          </row>
          <row>
            <entry></entry>
            <entry>
do-red, do-green, do-blue: BOOL
            </entry>
          </row>
          <row>
            <entry></entry>
            <entry>
red, green, blue: CARD16]
            </entry>
          </row>
          </tbody>
          </tgroup>
        </informaltable>
        </para>
      </entry>
    </row>
    <row>
      <entry>
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Value</emphasis>
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
This request changes the colormap entries of the specified pixels.
The do-red, do-green, and do-blue fields indicate which components
should actually be changed.
If the colormap is an installed map for its screen,
the changes are visible immediately.
</para>
<para>
All specified pixels that are allocated writable in cmap (by any client)
are changed, even if one or more pixels produce an error.
A
<emphasis role='bold'>Value</emphasis>
error is generated if a specified pixel is not a valid index into cmap, and an
<emphasis role='bold'>Access</emphasis>
error is generated if a specified pixel is unallocated or is allocated
read-only.
If more than one pixel is in error,
it is arbitrary as to which pixel is reported.
<!-- .sp -->
</para>
  </section>
  <section id="requests:StoreNamedColor">
    <title>StoreNamedColor</title>
    <indexterm zone="requests:StoreNamedColor" significance="preferred"><primary>StoreNamedColor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pixel</emphasis>: CARD32
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>name</emphasis>: STRING8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>do-red</emphasis>, <emphasis remap='I'>do-green</emphasis>, <emphasis remap='I'>do-blue</emphasis>: BOOL
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Name</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request looks up the named color with respect to the screen associated
with cmap and then does a
<link linkend="requests:StoreColors"><emphasis role='bold'>StoreColors</emphasis></link>
in cmap.
The name should use the ISO Latin-1 encoding,
and uppercase and lowercase do not matter.
The
<emphasis role='bold'>Access</emphasis>
and
<emphasis role='bold'>Value</emphasis>
errors are the same as in
<emphasis role='bold'>StoreColors</emphasis>.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryColors">
    <title>QueryColors</title>
    <indexterm zone="requests:QueryColors" significance="preferred"><primary>QueryColors</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>pixels</emphasis>: LISTofCARD32
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
colors: LISTofRGB
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
where:
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
RGB: [red, green, blue: CARD16]
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the hardware-specific color values stored in cmap for
the specified pixels.
The values returned for an unallocated entry are undefined.
A
<emphasis role='bold'>Value</emphasis>
error is generated if a pixel is not a valid index into cmap.
If more than one pixel is in error,
it is arbitrary as to which pixel is reported.
<!-- .sp -->
</para>
  </section>
  <section id="requests:LookupColor">
    <title>LookupColor</title>
    <indexterm zone="requests:LookupColor" significance="preferred"><primary>LookupColor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cmap</emphasis>: COLORMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>name</emphasis>: STRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
exact-red, exact-green, exact-blue: CARD16
      </entry>
    </row>
    <row>
      <entry>
visual-red, visual-green, visual-blue: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Colormap</emphasis>,
<emphasis role='bold'>Name</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request looks up the string name of a color with respect to the screen
associated with cmap and returns both the exact color values and
the closest values provided by the hardware with respect to the visual
type of cmap.
The name should use the ISO Latin-1 encoding,
and uppercase and lowercase do not matter.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CreateCursor">
    <title>CreateCursor</title>
    <indexterm zone="requests:CreateCursor" significance="preferred"><primary>CreateCursor</primary></indexterm>
    <indexterm zone="requests:CreateCursor"><primary>Cursor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cid</emphasis>: CURSOR
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>source</emphasis>: PIXMAP
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>mask</emphasis>: PIXMAP or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>fore-red</emphasis>, <emphasis remap='I'>fore-green</emphasis>, <emphasis remap='I'>fore-blue</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>back-red</emphasis>, <emphasis remap='I'>back-green</emphasis>, <emphasis remap='I'>back-blue</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Pixmap</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request creates a cursor and associates identifier cid with it.
The foreground and background RGB values must be specified,
even if the server only has a
<emphasis role='bold'>StaticGray</emphasis>
or
<emphasis role='bold'>GrayScale</emphasis>
screen.
The foreground is used for the bits set to 1 in the source,
and the background is used for the bits set to 0.
Both source and mask (if specified) must have depth one (or a
<emphasis role='bold'>Match</emphasis>
error results), but they can have any root.
The mask pixmap defines the shape of the cursor.
That is,
the bits set to 1 in the mask define which source pixels will be displayed,
and where the mask has bits set to 0,
the corresponding bits of the source pixmap are ignored.
If no mask is given,
all pixels of the source are displayed.
The mask, if present, must be the same size as the source (or a
<emphasis role='bold'>Match</emphasis>
error results).
The x and y coordinates define the hotspot relative to the source's origin
and must be a point within the source (or a
<emphasis role='bold'>Match</emphasis>
error results).
</para>
<para>
The components of the cursor may be transformed arbitrarily to meet
display limitations.
</para>
<para>
The pixmaps can be freed immediately if no further explicit references
to them are to be made.
</para>
<para>
Subsequent drawing in the source or mask pixmap has an undefined effect
on the cursor.
The server might or might not make a copy of the pixmap.
<!-- .sp -->
</para>
  </section>
  <section id="requests:CreateGlyphCursor">
    <title>CreateGlyphCursor</title>
    <indexterm zone="requests:CreateGlyphCursor" significance="preferred"><primary>CreateGlyphCursor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cid</emphasis>: CURSOR
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>source-font</emphasis>: FONT
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>mask-font</emphasis>: FONT or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>source-char</emphasis>, <emphasis remap='I'>mask-char</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>fore-red</emphasis>, <emphasis remap='I'>fore-green</emphasis>, <emphasis remap='I'>fore-blue</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>back-red</emphasis>, <emphasis remap='I'>back-green</emphasis>, <emphasis remap='I'>back-blue</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Font</emphasis>,
<emphasis role='bold'>IDChoice</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request is similar to
<link linkend="requests:CreateCursor"><emphasis role='bold'>CreateCursor</emphasis></link>,
except the source and mask bitmaps are obtained from the specified font glyphs.
The source-char must be a defined glyph in source-font,
and if mask-font is given, mask-char must be a defined glyph in mask-font
(or a
<emphasis role='bold'>Value</emphasis>
error results).
The mask font and character are optional.
The origins of the source and mask (if it is defined) glyphs
are positioned coincidently and define the hotspot.
The source and mask need not have the same bounding box metrics,
and there is no restriction on the placement of the hotspot relative
to the bounding boxes.
If no mask is given,
all pixels of the source are displayed.
Note that source-char and mask-char are CARD16, not CHAR2B.
For 2-byte matrix fonts,
the 16-bit value should be formed with byte1 in the most significant byte
and byte2 in the least significant byte.
</para>
<para>
The components of the cursor may be transformed arbitrarily to meet
display limitations.
</para>
<para>
The fonts can be freed immediately if no further explicit references to
them are to be made.
<!-- .sp -->
</para>
  </section>
  <section id="requests:FreeCursor">
    <title>FreeCursor</title>
    <indexterm zone="requests:FreeCursor" significance="preferred"><primary>FreeCursor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cursor</emphasis>: CURSOR
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Cursor</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request deletes the association between the resource ID and the cursor.
The cursor storage will be freed when no other resource references it.
<!-- .sp -->
</para>
  </section>
  <section id="requests:RecolorCursor">
    <title>RecolorCursor</title>
    <indexterm zone="requests:RecolorCursor" significance="preferred"><primary>RecolorCursor</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>cursor</emphasis>: CURSOR
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>fore-red</emphasis>, <emphasis remap='I'>fore-green</emphasis>, <emphasis remap='I'>fore-blue</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>back-red</emphasis>, <emphasis remap='I'>back-green</emphasis>, <emphasis remap='I'>back-blue</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Cursor</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request changes the color of a cursor.
If the cursor is being displayed on a screen,
the change is visible immediately.
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryBestSize">
    <title>QueryBestSize</title>
    <indexterm zone="requests:QueryBestSize" significance="preferred"><primary>QueryBestSize</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>class</emphasis>:
{ <emphasis role='bold'>Cursor</emphasis>,
<emphasis role='bold'>Tile</emphasis>,
<emphasis role='bold'>Stipple</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
width, height: CARD16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Drawable</emphasis>,
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the best size that is closest to the argument size.
For
<emphasis role='bold'>Cursor</emphasis>,
this is the largest size that can be fully displayed.
For
<emphasis role='bold'>Tile</emphasis>,
this is the size that can be tiled fastest.
For
<emphasis role='bold'>Stipple</emphasis>,
this is the size that can be stippled fastest.
</para>
<para>
For
<emphasis role='bold'>Cursor</emphasis>,
the drawable indicates the desired screen.
For
<emphasis role='bold'>Tile</emphasis>
and
<emphasis role='bold'>Stipple</emphasis>,
the drawable indicates the screen and also possibly the window class and depth.
An
<emphasis role='bold'>InputOnly</emphasis>
window cannot be used as the drawable for
<emphasis role='bold'>Tile</emphasis>
or
<emphasis role='bold'>Stipple</emphasis>
(or a
<emphasis role='bold'>Match</emphasis>
error results).
<!-- .sp -->
</para>
  </section>
  <section id="requests:QueryExtension">
    <title>QueryExtension</title>
    <indexterm zone="requests:QueryExtension" significance="preferred"><primary>QueryExtension</primary></indexterm>
    <indexterm zone="requests:QueryExtension"><primary>Extension</primary><secondary>querying</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>name</emphasis>: STRING8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
present: BOOL
      </entry>
    </row>
    <row>
      <entry>
major-opcode: CARD8
      </entry>
    </row>
    <row>
      <entry>
first-event: CARD8
      </entry>
    </row>
    <row>
      <entry>
first-error: CARD8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request determines if the named extension is present.
If so,
the major opcode for the extension is returned, if it has one.
Otherwise, zero is returned.
Any minor opcode and the request formats are specific to the extension.
If the extension involves additional event types,
the base event type code is returned.
Otherwise, zero is returned.
The format of the events is specific to the extension.
If the extension involves additional error codes,
the base error code is returned.
Otherwise, zero is returned.
The format of additional data in the errors is specific to the extension.
</para>
<para>
The extension name should use the ISO Latin-1 encoding,
and uppercase and lowercase matter.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ListExtensions">
    <title>ListExtensions</title>
    <indexterm zone="requests:ListExtensions" significance="preferred"><primary>ListExtensions</primary></indexterm>
    <indexterm zone="requests:ListExtensions"><primary>Extension</primary><secondary>listing</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
names: LISTofSTRING8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns a list of all extensions supported by the server.
</para>
  </section>
  <section id="requests:SetModifierMapping">
    <title>SetModifierMapping</title>
    <indexterm zone="requests:SetModifierMapping" significance="preferred"><primary>SetModifierMapping</primary></indexterm>
    <indexterm zone="requests:SetModifierMapping"><primary>Modifier keys</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>keycodes-per-modifier</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>keycodes</emphasis>: LISTofKEYCODE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
status:
{ <emphasis role='bold'>Success</emphasis>,
<emphasis role='bold'>Busy</emphasis>,
<emphasis role='bold'>Failed</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request specifies the keycodes (if any) of the keys to be used as
modifiers.
The number of keycodes in the list must be 8*keycodes-per-modifier (or a
<emphasis role='bold'>Length</emphasis>
error results).
The keycodes are divided into eight sets,
with each set containing keycodes-per-modifier elements.
The sets are assigned to the modifiers
<emphasis role='bold'>Shift</emphasis>,
<emphasis role='bold'>Lock</emphasis>,
<emphasis role='bold'>Control</emphasis>,
<emphasis role='bold'>Mod1</emphasis>,
<emphasis role='bold'>Mod2</emphasis>,
<emphasis role='bold'>Mod3</emphasis>,
<emphasis role='bold'>Mod4</emphasis>,
and
<emphasis role='bold'>Mod5</emphasis>,
in order.
Only nonzero keycode values are used within each set;
zero values are ignored.
All of the nonzero keycodes must be in the range specified by min-keycode
and max-keycode in the connection setup (or a
<emphasis role='bold'>Value</emphasis>
error results).
The order of keycodes within a set does not matter.
If no nonzero values are specified in a set,
the use of the corresponding modifier is disabled,
and the modifier bit will always be zero.
Otherwise, the modifier bit will be one whenever
at least one of the keys in the corresponding set is in the down
position.
</para>
<para>
A server can impose restrictions on how modifiers can be changed (for example,
if certain keys do not generate up transitions in hardware,
if auto-repeat cannot be disabled on certain keys,
or if multiple keys per modifier are not supported).
The status reply is
<emphasis role='bold'>Failed</emphasis>
if some such restriction is violated,
and none of the modifiers is changed.
</para>
<para>
If the new nonzero keycodes specified for a modifier differ from those
currently defined and any (current or new) keys for that modifier are
logically in the down state, then the status reply is
<emphasis role='bold'>Busy</emphasis>,
and none of the modifiers is changed.
</para>
<para>
This request generates a
<link linkend="events:MappingNotify"><emphasis role='bold'>MappingNotify</emphasis></link>
event on a
<emphasis role='bold'>Success</emphasis>
status.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetModifierMapping">
    <title>GetModifierMapping</title>
    <indexterm zone="requests:GetModifierMapping" significance="preferred"><primary>GetModifierMapping</primary></indexterm>
    <indexterm zone="requests:GetModifierMapping"><primary>Modifier keys</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
keycodes-per-modifier: CARD8
      </entry>
    </row>
    <row>
      <entry>
keycodes: LISTofKEYCODE
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the keycodes of the keys being used as modifiers.
The number of keycodes in the list is 8*keycodes-per-modifier.
The keycodes are divided into eight sets,
with each set containing keycodes-per-modifier elements.
The sets are assigned to the modifiers
<emphasis role='bold'>Shift</emphasis>,
<emphasis role='bold'>Lock</emphasis>,
<emphasis role='bold'>Control</emphasis>,
<emphasis role='bold'>Mod1</emphasis>,
<emphasis role='bold'>Mod2</emphasis>,
<emphasis role='bold'>Mod3</emphasis>,
<emphasis role='bold'>Mod4</emphasis>,
and
<emphasis role='bold'>Mod5</emphasis>,
in order.
The keycodes-per-modifier value is chosen arbitrarily by the server;
zeroes are used to fill in unused elements within each set.
If only zero values are given in a set,
the use of the corresponding modifier has been disabled.
The order of keycodes within each set is chosen arbitrarily by the server.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeKeyboardMapping">
    <title>ChangeKeyboardMapping</title>
    <indexterm zone="requests:ChangeKeyboardMapping" significance="preferred"><primary>ChangeKeyboardMapping</primary></indexterm>
    <indexterm zone="requests:ChangeKeyboardMapping"><primary>Keysym</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>first-keycode</emphasis>: KEYCODE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>keysyms-per-keycode</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>keysyms</emphasis>: LISTofKEYSYM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Alloc</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request defines the symbols for the specified number of keycodes,
starting with the specified keycode.
The symbols for keycodes outside this range remained unchanged.
The number of elements in the keysyms list must be a multiple of
keysyms-per-keycode (or a
<emphasis role='bold'>Length</emphasis>
error results).
The first-keycode must be greater than or equal to min-keycode as returned
in the connection setup (or a
<emphasis role='bold'>Value</emphasis>
error results) and:
<literallayout class="monospaced">
	first-keycode + (keysyms-length / keysyms-per-keycode) - 1
</literallayout>
</para>
<para>
must be less than or equal to max-keycode as returned in the connection
setup (or a
<emphasis role='bold'>Value</emphasis>
error results).
KEYSYM number N (counting from zero) for keycode K has an index
(counting from zero) of:
<literallayout class="monospaced">
	(K - first-keycode) * keysyms-per-keycode + N
</literallayout>
</para>
<para>
in keysyms.
The keysyms-per-keycode can be chosen arbitrarily by the client
to be large enough to hold all desired symbols.
A special KEYSYM value of
<keysym>NoSymbol</keysym>
should be used to fill in unused elements for individual keycodes.
It is legal for
<keysym>NoSymbol</keysym>
to appear in nontrailing positions of the effective list for a keycode.
</para>
<para>
This request generates a
<link linkend="events:MappingNotify"><emphasis role='bold'>MappingNotify</emphasis></link>
event.
</para>
<para>
There is no requirement that the server interpret this mapping;
it is merely stored for reading and writing by clients
(see <link linkend='Keyboards'>section 5</link>).
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetKeyboardMapping">
    <title>GetKeyboardMapping</title>
    <indexterm zone="requests:GetKeyboardMapping" significance="preferred"><primary>GetKeyboardMapping</primary></indexterm>
    <indexterm zone="requests:GetKeyboardMapping"><primary>Keysym</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>first-keycode</emphasis>: KEYCODE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>count</emphasis>: CARD8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
keysyms-per-keycode: CARD8
      </entry>
    </row>
    <row>
      <entry>
keysyms: LISTofKEYSYM
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the symbols for the specified number of keycodes,
starting with the specified keycode.
The first-keycode must be greater than or equal to
min-keycode as returned in the connection setup (or a
<emphasis role='bold'>Value</emphasis>
error results), and:
<literallayout class="monospaced">
	first-keycode + count - 1
</literallayout>
</para>
<para>
must be less than or equal to max-keycode as returned in the connection setup
(or a
<emphasis role='bold'>Value</emphasis>
error results).
The number of elements in the keysyms list is:
<literallayout class="monospaced">
	count * keysyms-per-keycode
</literallayout>
</para>
<para>
and KEYSYM number N (counting from zero) for keycode K has an index
(counting from zero) of:
<literallayout class="monospaced">
	(K - first-keycode) * keysyms-per-keycode + N
</literallayout>
</para>
<para>
in keysyms.
The keysyms-per-keycode value is chosen arbitrarily by the server
to be large enough to report all requested symbols.
A special KEYSYM value of
<keysym>NoSymbol</keysym>
is used to fill in unused elements for individual keycodes.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeKeyboardControl">
    <title>ChangeKeyboardControl</title>
    <indexterm zone="requests:ChangeKeyboardControl" significance="preferred"><primary>ChangeKeyboardControl</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>value-mask</emphasis>: BITMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-list</emphasis>: LISTofVALUE
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
Errors:
<emphasis role='bold'>Match</emphasis>,
<emphasis role='bold'>Value</emphasis>
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
This request controls various aspects of the keyboard.
The value-mask and value-list specify which controls are to be changed.
The possible values are:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Control</entry>
      <entry>Type</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>key-click-percent</entry>
      <entry>INT8</entry>
    </row>
    <row>
      <entry>bell-percent</entry>
      <entry>INT8</entry>
    </row>
    <row>
      <entry>bell-pitch</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>bell-duration</entry>
      <entry>INT16</entry>
    </row>
    <row>
      <entry>led</entry>
      <entry>CARD8</entry>
    </row>
    <row>
      <entry>led-mode</entry>
      <entry>
{ <emphasis role='bold'>On</emphasis>,
<emphasis role='bold'>Off</emphasis> }
      </entry>
    </row>
    <row>
      <entry>key </entry>
      <entry>KEYCODE</entry>
    </row>
    <row>
      <entry>auto-repeat-mode</entry>
      <entry>
{ <emphasis role='bold'>On</emphasis>,
<emphasis role='bold'>Off</emphasis>,
<emphasis role='bold'>Default</emphasis> }
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
The key-click-percent sets the volume for key clicks between 0 (off) and
100 (loud) inclusive, if possible.
Setting to -1 restores the default.
Other negative values generate a
<emphasis role='bold'>Value</emphasis>
error.
</para>
<para>
The bell-percent sets the base volume for the bell between 0 (off) and 100
(loud) inclusive, if possible.
Setting to -1 restores the default.
Other negative values generate a
<emphasis role='bold'>Value</emphasis>
error.
</para>
<para>
The bell-pitch sets the pitch (specified in Hz) of the bell, if possible.
Setting to -1 restores the default.
Other negative values generate a
<emphasis role='bold'>Value</emphasis>
error.
</para>
<para>
The bell-duration sets the duration of the bell (specified in milliseconds),
if possible.
Setting to -1 restores the default.
Other negative values generate a
<emphasis role='bold'>Value</emphasis>
error.
</para>
<para>
If both led-mode and led are specified,
then the state of that LED is changed, if possible.
If only led-mode is specified,
then the state of all LEDs are changed, if possible.
At most 32 LEDs, numbered from one, are supported.
No standard interpretation of LEDs is defined.
It is a
<emphasis role='bold'>Match</emphasis>
error if an led is specified without an led-mode.
</para>
<para>
If both auto-repeat-mode and key are specified,
then the auto-repeat mode of that key is changed, if possible.
If only auto-repeat-mode is specified,
then the global auto-repeat mode for the entire keyboard is changed,
if possible, without affecting the per-key settings.
It is a
<emphasis role='bold'>Match</emphasis>
error if a key is specified without an auto-repeat-mode.
Each key has an individual mode of whether or not it should auto-repeat
and a default setting for that mode.
In addition, there is a global mode of whether auto-repeat should be
enabled or not and a default setting for that mode.
When the global mode is
<emphasis role='bold'>On</emphasis>,
keys should obey their individual auto-repeat modes.
When the global mode is
<emphasis role='bold'>Off</emphasis>,
no keys should auto-repeat.
An auto-repeating key generates alternating
<link linkend="events:KeyPress"><emphasis role='bold'>KeyPress</emphasis></link>
and
<link linkend="events:KeyRelease"><emphasis role='bold'>KeyRelease</emphasis></link>
events.
When a key is used as a modifier,
it is desirable for the key not to auto-repeat,
regardless of the auto-repeat setting for that key.
</para>
<para>
A bell generator connected with the console but not directly on the
keyboard is treated as if it were part of the keyboard.
</para>
<para>
The order in which controls are verified and altered is server-dependent.
If an error is generated,
a subset of the controls may have been altered.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetKeyboardControl">
    <title>GetKeyboardControl</title>
    <indexterm zone="requests:GetKeyboardControl" significance="preferred"><primary>GetKeyboardControl</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
key-click-percent: CARD8
      </entry>
    </row>
    <row>
      <entry>
bell-percent: CARD8
      </entry>
    </row>
    <row>
      <entry>
bell-pitch: CARD16
      </entry>
    </row>
    <row>
      <entry>
bell-duration: CARD16
      </entry>
    </row>
    <row>
      <entry>
led-mask: CARD32
      </entry>
    </row>
    <row>
      <entry>
global-auto-repeat:
{ <emphasis role='bold'>On</emphasis>,
<emphasis role='bold'>Off</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
auto-repeats: LISTofCARD8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current control values for the keyboard.
For the LEDs,
the least significant bit of led-mask corresponds to LED one,
and each one bit in led-mask indicates an LED that is lit.
The auto-repeats is a bit vector;
each one bit indicates that auto-repeat is enabled for the corresponding key.
The vector is represented as 32 bytes.
Byte N (from 0) contains the bits for keys 8N to 8N + 7,
with the least significant bit in the byte representing key 8N.
<!-- .sp -->
</para>
  </section>
  <section id="requests:Bell">
    <title>Bell</title>
    <indexterm zone="requests:Bell" significance="preferred"><primary>Bell</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>percent</emphasis>: INT8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request rings the bell on the keyboard at a volume relative to the
base volume for the keyboard, if possible.
Percent can range from -100 to 100 inclusive (or a
<emphasis role='bold'>Value</emphasis>
error results).
The volume at which the bell is rung when percent is nonnegative is:
<literallayout class="monospaced">
	base - [(base * percent) / 100] + percent
</literallayout>
</para>
<para>
When percent is negative, it is:
<literallayout class="monospaced">
	base + [(base * percent) / 100]
</literallayout>
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetPointerMapping">
    <title>SetPointerMapping</title>
    <indexterm zone="requests:SetPointerMapping" significance="preferred"><primary>SetPointerMapping</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>map</emphasis>: LISTofCARD8
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
status:
{ <emphasis role='bold'>Success</emphasis>,
<emphasis role='bold'>Busy</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request sets the mapping of the pointer.
Elements of the list are indexed starting from one.
The length of the list must be the same as
<link linkend="requests:GetPointerMapping"><emphasis role='bold'>GetPointerMapping</emphasis></link>
would return (or a
<emphasis role='bold'>Value</emphasis>
error results).
The index is a core button number,
and the element of the list defines the effective number.
</para>
<para>
A zero element disables a button.
Elements are not restricted in value by the number of physical buttons,
but no two elements can have the same nonzero value (or a
<emphasis role='bold'>Value</emphasis>
error results).
</para>
<para>
If any of the buttons to be altered are logically in the down state,
the status reply is
<emphasis role='bold'>Busy</emphasis>,
and the mapping is not changed.
</para>
<para>
This request generates a
<link linkend="events:MappingNotify"><emphasis role='bold'>MappingNotify</emphasis></link>
event on a
<emphasis role='bold'>Success</emphasis>
status.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetPointerMapping">
    <title>GetPointerMapping</title>
    <indexterm zone="requests:GetPointerMapping" significance="preferred"><primary>GetPointerMapping</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
map: LISTofCARD8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current mapping of the pointer.
Elements of the list are indexed starting from one.
The length of the list indicates the number of physical buttons.
</para>
<para>
The nominal mapping for a pointer is the identity mapping: map[i]=i.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangePointerControl">
    <title>ChangePointerControl</title>
    <indexterm zone="requests:ChangePointerControl" significance="preferred"><primary>ChangePointerControl</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>do-acceleration</emphasis>, <emphasis remap='I'>do-threshold</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>acceleration-numerator</emphasis>, <emphasis remap='I'>acceleration-denominator</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>threshold</emphasis>: INT16
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request defines how the pointer moves.
The acceleration is a multiplier for movement expressed as a fraction.
For example,
specifying 3/1 means the pointer moves three times as fast as normal.
The fraction can be rounded arbitrarily by the server.
Acceleration only takes effect if the pointer moves more than threshold
number of pixels at once and only applies to the amount beyond the threshold.
Setting a value to -1 restores the default.
Other negative values generate a
<emphasis role='bold'>Value</emphasis>
error, as does a zero value for acceleration-denominator.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetPointerControl">
    <title>GetPointerControl</title>
    <indexterm zone="requests:GetPointerControl" significance="preferred"><primary>GetPointerControl</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
acceleration-numerator, acceleration-denominator: CARD16
      </entry>
    </row>
    <row>
      <entry>
threshold: CARD16
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current acceleration and threshold for the pointer.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetScreenSaver">
    <title>SetScreenSaver</title>
    <indexterm zone="requests:SetScreenSaver" significance="preferred"><primary>SetScreenSaver</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>timeout</emphasis>, <emphasis remap='I'>interval</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>prefer-blanking</emphasis>:
{ <emphasis role='bold'>Yes</emphasis>,
<emphasis role='bold'>No</emphasis>,
<emphasis role='bold'>Default</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>allow-exposures</emphasis>:
{ <emphasis role='bold'>Yes</emphasis>,
<emphasis role='bold'>No</emphasis>,
<emphasis role='bold'>Default</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
The timeout and interval are specified in seconds;
setting a value to -1 restores the default.
Other negative values generate a
<emphasis role='bold'>Value</emphasis>
error.
If the timeout value is zero,
screen-saver is disabled (but an activated screen-saver is not deactivated).
If the timeout value is nonzero,
screen-saver is enabled.
Once screen-saver is enabled,
if no input from the keyboard or pointer is generated for timeout seconds,
screen-saver is activated.
For each screen,
if blanking is preferred and the hardware supports video blanking,
the screen will simply go blank.
Otherwise,
if either exposures are allowed or the screen can be regenerated without
sending exposure events to clients,
the screen is changed in a server-dependent fashion to avoid phosphor burn.
Otherwise,
the state of the screens does not change, and screen-saver is not activated.
At the next keyboard or pointer input or at the next
<link linkend="requests:ForceScreenSaver"><emphasis role='bold'>ForceScreenSaver</emphasis></link>
with mode
<emphasis role='bold'>Reset</emphasis>,
screen-saver is deactivated, and all screen states are restored.
</para>
<para>
If the server-dependent screen-saver method is amenable to periodic change,
interval serves as a hint about how long the change period should be,
with zero hinting that no periodic change should be made.
Examples of ways to change the screen include scrambling the color map
periodically, moving an icon image about the screen periodically, or
tiling the screen with the root window background tile,
randomly reorigined periodically.
<!-- .sp -->
</para>
  </section>
  <section id="requests:GetScreenSaver">
    <title>GetScreenSaver</title>
    <indexterm zone="requests:GetScreenSaver" significance="preferred"><primary>GetScreenSaver</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
timeout, interval: CARD16
      </entry>
    </row>
    <row>
      <entry>
prefer-blanking:
{ <emphasis role='bold'>Yes</emphasis>,
<emphasis role='bold'>No</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
allow-exposures:
{ <emphasis role='bold'>Yes</emphasis>,
<emphasis role='bold'>No</emphasis>}
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the current screen-saver control values.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ForceScreenSaver">
    <title>ForceScreenSaver</title>
    <indexterm zone="requests:ForceScreenSaver" significance="preferred"><primary>ForceScreenSaver</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Activate</emphasis>,
<emphasis role='bold'>Reset</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If the mode is
<emphasis role='bold'>Activate</emphasis>
and screen-saver is currently deactivated,
then screen-saver is activated (even if screen-saver has been disabled with
a timeout value of zero).
If the mode is
<emphasis role='bold'>Reset</emphasis>
and screen-saver is currently enabled,
then screen-saver is deactivated (if it was activated),
and the activation timer is reset to its initial state
as if device input had just been received.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ChangeHosts">
    <title>ChangeHosts</title>
    <indexterm zone="requests:ChangeHosts" significance="preferred"><primary>ChangeHosts</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Insert</emphasis>,
<emphasis role='bold'>Delete</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>host</emphasis>: HOST
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request adds or removes the specified host from the access control list.
<indexterm zone="requests:ChangeHosts"><primary>Access control list</primary></indexterm>
When the access control mechanism is enabled and a client attempts to
establish a connection to the server,
the host on which the client resides must be in the access control list,
or the client must have been granted permission by a server-dependent
method, or the server will refuse the connection.
</para>
<para>
The client must reside on the same host as the server and/or have been granted
permission by a server-dependent method to execute this request (or an
<emphasis role='bold'>Access</emphasis>
error results).
</para>
<para>
An initial access control list can usually be specified,
typically by naming a file that the server reads at startup and reset.
</para>
<para id="address_families">
The following address families are defined.
<indexterm zone="address_families"><primary>Types</primary><secondary>HOST</secondary></indexterm>
A server is not required to support these families
and may support families not listed here.
Use of an unsupported family, an improper address format,
or an improper address length within a supported family results in a
<emphasis role='bold'>Value</emphasis>
error.
</para>
<para>
For the Internet family,
the address must be four bytes long.
The address bytes are in standard IP order;
the server performs no automatic swapping on the address bytes.
The Internet family supports IP version 4 addresses only.
</para>
<para>
For the InternetV6 family, the address must be sixteen bytes
long.  The address bytes are in standard IP order; the
server performs no automatic swapping on the address bytes.
The InternetV6 family supports IP version 6 addresses only.
</para>
<para>
For the DECnet family,
the server performs no automatic swapping on the address bytes.
A Phase IV address is two bytes long:
the first byte contains the least significant eight bits of the node number,
and the second byte contains the most significant two bits of the node number in
the least significant two bits of the byte and the area in the most
significant six bits of the byte.
</para>
<para>
For the Chaos family,
the address must be two bytes long.
The host number is always the first byte in the address,
and the subnet number is always the second byte.
The server performs no automatic swapping on the address bytes.
</para>
<para>
For the ServerInterpreted family, the address may be of any
length up to 65535 bytes.  The address consists of two strings
of ASCII characters, separated by a byte with a value of 0.
The first string represents the type of address, and the second
string contains the address value.  Address types and the syntax
for their associated values will be registered via the X.Org Registry.
Implementors who wish to add implementation specific types may register
a unique prefix with the X.Org registry to prevent namespace
collisions.
</para>
<para>
Use of a host address in the ChangeHosts request is deprecated.  It is
only useful when a host has a unique, constant address, a requirement
that is increasingly unmet as sites adopt dynamically assigned
addresses, network address translation gateways, IPv6 link local
addresses, and various other technologies.  It also assumes all users of
a host share equivalent access rights, and as such has never been
suitable for many multi-user machine environments.  Instead, more
secure forms of authentication, such as those based on shared secrets
or public key encryption, are recommended.
<!-- .sp -->
</para>
  </section>
  <section id="requests:ListHosts">
    <title>ListHosts</title>
    <indexterm zone="requests:ListHosts" significance="preferred"><primary>ListHosts</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
   ▶
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
mode:
{ <emphasis role='bold'>Enabled</emphasis>,
<emphasis role='bold'>Disabled</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
hosts: LISTofHOST
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request returns the hosts on the access control list
and whether use of the list at connection setup is currently
enabled or disabled.
</para>
<para>
Each HOST is padded to a multiple of four bytes.
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetAccessControl">
    <title>SetAccessControl</title>
    <indexterm zone="requests:SetAccessControl" significance="preferred"><primary>SetAccessControl</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Enable</emphasis>,
<emphasis role='bold'>Disable</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Access</emphasis>,
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request enables or disables the use of the access control list
at connection setups.
</para>
<para>
The client must reside on the same host as the server
and/or have been granted permission by a server-dependent method
to execute this request (or an
<emphasis role='bold'>Access</emphasis>
error results).
<!-- .sp -->
</para>
  </section>
  <section id="requests:SetCloseDownMode">
    <title>SetCloseDownMode</title>
    <indexterm zone="requests:SetCloseDownMode" significance="preferred"><primary>SetCloseDownMode</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Destroy</emphasis>,
<emphasis role='bold'>RetainPermanent</emphasis>,
<emphasis role='bold'>RetainTemporary</emphasis>}
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This request defines what will happen to the client's resources
at connection close.
A connection starts in
<emphasis role='bold'>Destroy</emphasis>
mode.
The meaning of the close-down mode is described
in <link linkend='Connection_Close'>section 10</link>.
<!-- .sp -->
</para>
  </section>
  <section id="requests:KillClient">
    <title>KillClient</title>
    <indexterm zone="requests:KillClient" significance="preferred"><primary>KillClient</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>resource</emphasis>: CARD32 or
<emphasis role='bold'>AllTemporary</emphasis>
<!-- .in -.2i -->
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
Errors:
<emphasis role='bold'>Value</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If a valid resource is specified,
<link linkend="requests:KillClient"><emphasis role='bold'>KillClient</emphasis></link>
forces a close-down of the client that created the resource.
If the client has already terminated in either
<emphasis role='bold'>RetainPermanent</emphasis>
or
<emphasis role='bold'>RetainTemporary</emphasis>
mode, all of the client's resources are destroyed
(see <link linkend='Connection_Close'>section 10</link>).
If
<emphasis role='bold'>AllTemporary</emphasis>
is specified,
then the resources of all clients that have terminated in
<emphasis role='bold'>RetainTemporary</emphasis>
are destroyed.
<!-- .sp -->
</para>
  </section>
  <section id="requests:NoOperation">
    <title>NoOperation</title>
    <indexterm zone="requests:NoOperation" significance="preferred"><primary>NoOperation</primary></indexterm>
<para>
This request has no arguments and no results,
but the request length field
allows the request to be any multiple of four bytes in length.
The bytes contained in the request are uninterpreted by the server.
</para>
<para>
This request can be used in its minimum four byte form as padding where
necessary by client libraries that find it convenient to force requests
to begin on 64-bit boundaries.
</para>
  </section>
</chapter>

<chapter id='Connection_Close'>
<title>Connection Close</title>
  <indexterm zone="Connection_Close"><primary>Connection</primary><secondary>closing</secondary></indexterm>
<!-- .XS -->
<!-- \*(SN Connection Close -->
<!-- .XE -->
<para>
At connection close,
all event selections made by the client are discarded.
If the client has the pointer actively grabbed, an
<link linkend="requests:UngrabPointer"><emphasis role='bold'>UngrabPointer</emphasis></link>
is performed.
If the client has the keyboard actively grabbed, an
<link linkend="requests:UngrabKeyboard"><emphasis role='bold'>UngrabKeyboard</emphasis></link>
is performed.
All passive grabs by the client are released.
If the client has the server grabbed, an
<link linkend="requests:UngrabServer"><emphasis role='bold'>UngrabServer</emphasis></link>
is performed.
All selections (see
<link linkend="requests:SetSelectionOwner"><emphasis role='bold'>SetSelectionOwner</emphasis></link>
request)
owned by the client are disowned.
If close-down mode (see
<link linkend="requests:SetCloseDownMode"><emphasis role='bold'>SetCloseDownMode</emphasis></link>
request) is
<emphasis role='bold'>RetainPermanent</emphasis>
or
<emphasis role='bold'>RetainTemporary</emphasis>,
then all resources (including colormap entries)
allocated by the client are marked as permanent or temporary,
respectively (but this does not prevent other clients from explicitly
destroying them).
If the mode is
<emphasis role='bold'>Destroy</emphasis>,
all of the client's resources are destroyed.
</para>
<para>
When a client's resources are destroyed,
for each window in the client's save-set,
if the window is an inferior of a window created by the client,
the save-set window is reparented to the closest ancestor such that
the save-set window is not an inferior of a window created by the client.
If the save-set window is unmapped, a
<link linkend="requests:MapWindow"><emphasis role='bold'>MapWindow</emphasis></link>
request is performed on it (even if it was not an inferior
of a window created by the client).
The reparenting leaves unchanged the absolute coordinates
(with respect to the root window) of the upper-left outer corner of the
save-set window.
After save-set processing,
all windows created by the client are destroyed.
For each nonwindow resource created by the client,
the appropriate
<emphasis role='bold'>Free</emphasis>
request is performed.
All colors and colormap entries allocated by the client are freed.
</para>
<para>
A server goes through a cycle of having no connections and having some
connections.
At every transition to the state of having no connections
as a result of a connection closing with a
<emphasis role='bold'>Destroy</emphasis>
close-down mode,
the server resets its state as if it had just been started.
This starts by destroying all lingering resources from clients
that have terminated in
<emphasis role='bold'>RetainPermanent</emphasis>
or
<emphasis role='bold'>RetainTemporary</emphasis>
mode.
It additionally includes deleting all but the predefined atom identifiers,
deleting all properties on all root windows, resetting all device maps and
attributes (key click, bell volume, acceleration), resetting the access
control list, restoring the standard root tiles and cursors, restoring
the default font path, and restoring the input focus to state
<emphasis role='bold'>PointerRoot</emphasis>.
</para>
<para>
Note that closing a connection with a close-down mode of
<emphasis role='bold'>RetainPermanent</emphasis>
or
<emphasis role='bold'>RetainTemporary</emphasis>
will not cause the server to reset.
</para>
</chapter>
<!-- .NH 1 -->
<chapter id='Events'>
<title>Events</title>
<!-- .XS -->
<!-- \*(SN Events -->
<!-- .XE -->
<para>
<indexterm zone="Events"><primary>Event</primary></indexterm>
When a button press is processed with the pointer in some window W
and no active pointer grab is in progress,
the ancestors of W are searched from the root down,
looking for a passive grab to activate.
If no matching passive grab on the button exists,
then an active grab is started automatically for the client receiving the event,
and the last-pointer-grab time is set to the current server time.
The effect is essentially equivalent to a
<link linkend="requests:GrabButton"><emphasis role='bold'>GrabButton</emphasis></link>
with arguments:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Argument</entry>
      <entry>Value</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>event-window</entry>
      <entry>Event window</entry>
    </row>
    <row>
      <entry>event-mask</entry>
      <entry>
Client's selected pointer events on the event window
      </entry>
    </row>
    <row>
      <entry>pointer-mode and keyboard-mode</entry>
      <entry>
<emphasis role='bold'>Asynchronous</emphasis>
      </entry>
    </row>
    <row>
      <entry>owner-events</entry>
      <entry>
<emphasis role='bold'>True</emphasis>
if the client has
<emphasis role='bold'>OwnerGrabButton</emphasis>
selected on the event window, otherwise
<emphasis role='bold'>False</emphasis>
      </entry>
    </row>
    <row>
      <entry>confine-to</entry>
      <entry>
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>cursor</entry>
      <entry>
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>



<para>
The grab is terminated automatically when the logical state of the pointer
has all buttons released.
<link linkend="requests:UngrabPointer"><emphasis role='bold'>UngrabPointer</emphasis></link>
and
<link linkend="requests:ChangeActivePointerGrab"><emphasis role='bold'>ChangeActivePointerGrab</emphasis></link>
can both be used to modify the active grab.
<!-- .sp -->
</para>

  <section id="events:input">
    <title>Input Device events</title>
    <indexterm zone="events:input" significance="preferred"><primary>Input device</primary><secondary>events</secondary></indexterm>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry id="events:KeyPress">
<indexterm zone="events:KeyPress" significance="preferred"><primary>KeyPress</primary></indexterm>
<emphasis role='bold'>KeyPress</emphasis>
      </entry>
    </row>
    <row>
      <entry id="events:KeyRelease">
<indexterm zone="events:KeyRelease" significance="preferred"><primary>KeyRelease</primary></indexterm>
<emphasis role='bold'>KeyRelease</emphasis>
      </entry>
    </row>
    <row>
      <entry id="events:ButtonPress">
<indexterm zone="events:ButtonPress" significance="preferred"><primary>ButtonPress</primary></indexterm>
<emphasis role='bold'>ButtonPress</emphasis>
      </entry>
    </row>
    <row>
      <entry id="events:ButtonRelease">
<indexterm zone="events:ButtonRelease" significance="preferred"><primary>ButtonRelease</primary></indexterm>
<emphasis role='bold'>ButtonRelease</emphasis>
      </entry>
    </row>
    <row>
      <entry id="events:MotionNotify">
<indexterm zone="events:MotionNotify" significance="preferred"><primary>MotionNotify</primary></indexterm>
<emphasis role='bold'>MotionNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>root</emphasis>, <emphasis remap='I'>event</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>child</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>same-screen</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>root-x</emphasis>, <emphasis remap='I'>root-y</emphasis>, <emphasis remap='I'>event-x</emphasis>, <emphasis remap='I'>event-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>detail</emphasis>: &lt;see below&gt;
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>state</emphasis>: SETofKEYBUTMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
These events are generated either when a key or button logically changes state
or when the pointer logically moves.
The generation of these logical changes may lag the physical changes
if device event processing is frozen.
Note that
<emphasis role='bold'>KeyPress</emphasis>
and
<emphasis role='bold'>KeyRelease</emphasis>
are generated for all keys, even those mapped to modifier bits.
<phrase id="events:input:source">
The source of the event is the window the pointer is in.
</phrase>
<indexterm zone="events:input:source"><primary>Event</primary><secondary>source</secondary></indexterm>
The window the event is reported with respect to is called the event window.
The event window is found by starting with the source window and
looking up the hierarchy for the first window on which any client has selected
interest in the event (provided no intervening window prohibits event
generation by including the event type in its do-not-propagate-mask).
The actual window used for reporting can be modified by active grabs and,
in the case of keyboard events, can be modified by the focus window.
</para>
<para>
The root is the root window of the source window,
and root-x and root-y are the pointer coordinates relative to root's origin
at the time of the event.
Event is the event window.
If the event window is on the same screen as root,
then event-x and event-y are the pointer coordinates relative to the
event window's origin.
Otherwise, event-x and event-y are zero.
If the source window is an inferior of the event window,
then child is set to the child of the event window that is an
ancestor of (or is) the source window.
Otherwise, it is set to
<emphasis role='bold'>None</emphasis>.
The state component gives the logical state of the buttons and modifier keys
just before the event.
The detail component type varies with the event type:
</para>

<informaltable frame='topbot'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='2' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <colspec colname='c2' colwidth='2.0*'/>
  <thead>
    <row rowsep='1'>
      <entry>Event</entry>
      <entry>Component</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>
<emphasis role='bold'>KeyPress</emphasis>,
<emphasis role='bold'>KeyRelease</emphasis>
      </entry>
      <entry>KEYCODE</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>ButtonPress</emphasis>,
<emphasis role='bold'>ButtonRelease</emphasis>
      </entry>
      <entry>BUTTON</entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>MotionNotify</emphasis>
      </entry>
      <entry>
{ <emphasis role='bold'>Normal</emphasis>
<emphasis role='bold'>Hint</emphasis> }
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
<emphasis role='bold'>MotionNotify</emphasis>
events are only generated when the motion begins and ends in the window.
The granularity of motion events is not guaranteed,
but a client selecting for motion events is guaranteed to get at least one
event when the pointer moves and comes to rest.
Selecting
<emphasis role='bold'>PointerMotion</emphasis>
receives events independent of the state of the pointer buttons.
By selecting some subset of
<emphasis role='bold'>Button[1-5]Motion</emphasis>
instead,
<emphasis role='bold'>MotionNotify</emphasis>
events will only be received when one or more of the
specified buttons are pressed.
By selecting
<emphasis role='bold'>ButtonMotion</emphasis>,
<emphasis role='bold'>MotionNotify</emphasis>
events will be received only when at least one button is pressed.
The events are always of type
<emphasis role='bold'>MotionNotify</emphasis>,
independent of the selection.
If
<emphasis role='bold'>PointerMotionHint</emphasis>
is selected,
the server is free to send only one
<emphasis role='bold'>MotionNotify</emphasis>
event (with detail
<emphasis role='bold'>Hint</emphasis>)
to the client for the event window until
either the key or button state changes,
the pointer leaves the event window,
or the client issues a
<link linkend="requests:QueryPointer"><emphasis role='bold'>QueryPointer</emphasis></link>
or
<link linkend="requests:GetMotionEvents"><emphasis role='bold'>GetMotionEvents</emphasis></link>
request.
<!-- .sp -->
</para>
  </section>
  <section id="events:pointer_window">
    <title>Pointer Window events</title>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry id="events:EnterNotify">
<indexterm zone="events:EnterNotify" significance="preferred"><primary>EnterNotify</primary></indexterm>
<emphasis role='bold'>EnterNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry id="events:LeaveNotify">
<indexterm zone="events:LeaveNotify" significance="preferred"><primary>LeaveNotify</primary></indexterm>
<emphasis role='bold'>LeaveNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>root</emphasis>, <emphasis remap='I'>event</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>child</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>same-screen</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>root-x</emphasis>, <emphasis remap='I'>root-y</emphasis>, <emphasis remap='I'>event-x</emphasis>, <emphasis remap='I'>event-y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Normal</emphasis>,
<emphasis role='bold'>Grab</emphasis>,
<emphasis role='bold'>Ungrab</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>detail</emphasis>:
{ <emphasis role='bold'>Ancestor</emphasis>,
<emphasis role='bold'>Virtual</emphasis>,
<emphasis role='bold'>Inferior</emphasis>,
<emphasis role='bold'>Nonlinear</emphasis>,
<emphasis role='bold'>NonlinearVirtual</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>focus</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>state</emphasis>: SETofKEYBUTMASK
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
If pointer motion or window hierarchy change causes the pointer to be
in a different window than before,
<emphasis role='bold'>EnterNotify</emphasis>
and
<emphasis role='bold'>LeaveNotify</emphasis>
events are generated instead of a
<link linkend="events:MotionNotify"><emphasis role='bold'>MotionNotify</emphasis></link>
event.
Only clients selecting
<emphasis role='bold'>EnterWindow</emphasis>
on a window receive
<emphasis role='bold'>EnterNotify</emphasis>
events, and only clients selecting
<emphasis role='bold'>LeaveWindow</emphasis>
receive
<emphasis role='bold'>LeaveNotify</emphasis>
events.
The pointer position reported in the event is always the final position,
not the initial position of the pointer.
The root is the root window for this position,
and root-x and root-y are the pointer coordinates relative to root's
origin at the time of the event.
Event is the event window.
If the event window is on the same screen as root,
then event-x and event-y are the pointer coordinates relative
to the event window's origin.
Otherwise, event-x and event-y are zero.
In a
<emphasis role='bold'>LeaveNotify</emphasis>
event, if a child of the event window contains the initial position of the
pointer, then the child component is set to that child.
Otherwise, it is
<emphasis role='bold'>None</emphasis>.
For an
<emphasis role='bold'>EnterNotify</emphasis>
event, if a child of the event window contains the final pointer position,
then the child component is set to that child.
Otherwise, it is
<emphasis role='bold'>None</emphasis>.
If the event window is the focus window or an inferior of the focus window,
then focus is
<emphasis role='bold'>True</emphasis>.
Otherwise, focus is
<emphasis role='bold'>False</emphasis>.
</para>
<para>
Normal pointer motion events have mode
<emphasis role='bold'>Normal</emphasis>.
Pseudo-motion events when a grab activates have mode
<emphasis role='bold'>Grab</emphasis>,
and pseudo-motion events when a grab deactivates have mode
<emphasis role='bold'>Ungrab</emphasis>.
</para>
<para>
All
<emphasis role='bold'>EnterNotify</emphasis>
and
<emphasis role='bold'>LeaveNotify</emphasis>
events caused by a hierarchy change are generated after any hierarchy event
caused by that change (that is,
<link linkend="events:UnmapNotify"><emphasis role='bold'>UnmapNotify</emphasis></link>,
<link linkend="events:MapNotify"><emphasis role='bold'>MapNotify</emphasis></link>,
<link linkend="events:ConfigureNotify"><emphasis role='bold'>ConfigureNotify</emphasis></link>,
<link linkend="events:GravityNotify"><emphasis role='bold'>GravityNotify</emphasis></link>,
<link linkend="events:CirculateNotify"><emphasis role='bold'>CirculateNotify</emphasis></link>),
but the ordering of
<emphasis role='bold'>EnterNotify</emphasis>
and
<emphasis role='bold'>LeaveNotify</emphasis>
events with respect to
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>,
<link linkend="events:VisibilityNotify"><emphasis role='bold'>VisibilityNotify</emphasis></link>,
and
<link linkend="events:Expose"><emphasis role='bold'>Expose</emphasis></link>
events is not constrained.
</para>
<para>
Normal events are generated as follows:
</para>

<para>
When the pointer moves from window A to window B and A is an inferior
of B:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>Ancestor</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>Virtual</emphasis>
is generated on each window between A and B exclusive (in that order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>Inferior</emphasis>
is generated on B.
    </para>
  </listitem>
</itemizedlist>

<para>
When the pointer moves from window A to window B and B is an inferior
of A:
</para>

<itemizedlist>
  <listitem>
    <para>
<!-- .IP bu 5 -->
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>Inferior</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>Virtual</emphasis>
is generated on each window between A and B exclusive (in that order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>Ancestor</emphasis>
is generated on B.
    </para>
  </listitem>
</itemizedlist>

<para>
When the pointer moves from window A to window B and window C is
their least common ancestor:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window between A and C exclusive (in that order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window between C and B exclusive (in that order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on B.
    </para>
  </listitem>
</itemizedlist>

<para>
When the pointer moves from window A to window B on different screens:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
If A is not a root window,
<emphasis role='bold'>LeaveNotify</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window above A up to and including its root (in order).
    </para>
  </listitem>
  <listitem>
    <para>
If B is not a root window,
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window from B's root down to but not including B
(in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on B.
    </para>
  </listitem>
</itemizedlist>

<para>
When a pointer grab activates (but after any initial warp into a confine-to
window and before generating any actual
<link linkend="events:ButtonPress"><emphasis role='bold'>ButtonPress</emphasis></link>
event that activates the grab),
G is the grab-window for the grab, and P is the window the pointer is in:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
and
<emphasis role='bold'>LeaveNotify</emphasis>
events with mode
<emphasis role='bold'>Grab</emphasis>
are generated (as for
<emphasis role='bold'>Normal</emphasis>
above) as if the pointer were to suddenly warp from its current
position in P to some position in G.
However, the pointer does not warp,
and the pointer position is used as both the initial
and final positions for the events.
    </para>
  </listitem>
</itemizedlist>

<para>
When a pointer grab deactivates (but after generating any actual
<link linkend="events:ButtonRelease"><emphasis role='bold'>ButtonRelease</emphasis></link>
event that deactivates the grab), G is the grab-window for
the grab, and P is the window the pointer is in:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>EnterNotify</emphasis>
and
<emphasis role='bold'>LeaveNotify</emphasis>
events with mode
<emphasis role='bold'>Ungrab</emphasis>
are generated (as for
<emphasis role='bold'>Normal</emphasis>
above) as if the pointer were to suddenly warp from
some position in G to its current position in P.
However, the pointer does not warp,
and the current pointer position is used as both the initial
and final positions for the events.
    </para>
  </listitem>
</itemizedlist>

  </section>
  <section id="events:input_focus">
    <title>Input Focus events</title>
    <indexterm zone="events:input_focus" significance="preferred"><primary>Input focus</primary><secondary>events</secondary></indexterm>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry id="events:FocusIn">
<indexterm zone="events:FocusIn" significance="preferred"><primary>FocusIn</primary></indexterm>
<emphasis role='bold'>FocusIn</emphasis>
      </entry>
    </row>
    <row>
      <entry id="events:FocusOut">
<indexterm zone="events:FocusOut" significance="preferred"><primary>FocusOut</primary></indexterm>
<emphasis role='bold'>FocusOut</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>mode</emphasis>:
{ <emphasis role='bold'>Normal</emphasis>,
<emphasis role='bold'>WhileGrabbed</emphasis>,
<emphasis role='bold'>Grab</emphasis>,
<emphasis role='bold'>Ungrab</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>detail</emphasis>:
{ <emphasis role='bold'>Ancestor</emphasis>,
<emphasis role='bold'>Virtual</emphasis>,
<emphasis role='bold'>Inferior</emphasis>,
<emphasis role='bold'>Nonlinear</emphasis>,
<emphasis role='bold'>NonlinearVirtual</emphasis>,
<emphasis role='bold'>Pointer</emphasis>,
      </entry>
    </row>
    <row>
      <entry>
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>None</emphasis> }
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
These events are generated when the input focus changes
and are reported to clients selecting
<emphasis role='bold'>FocusChange</emphasis>
on the window.
Events generated by
<link linkend="requests:SetInputFocus"><emphasis role='bold'>SetInputFocus</emphasis></link>
when the keyboard is not grabbed have mode
<emphasis role='bold'>Normal</emphasis>.
Events generated by
<emphasis role='bold'>SetInputFocus</emphasis>
when the keyboard is grabbed have mode
<emphasis role='bold'>WhileGrabbed</emphasis>.
Events generated when a keyboard grab activates have mode
<emphasis role='bold'>Grab</emphasis>,
and events generated when a keyboard grab deactivates have mode
<emphasis role='bold'>Ungrab</emphasis>.
</para>
<para>
All
<emphasis role='bold'>FocusOut</emphasis>
events caused by a window unmap are generated after any
<link linkend="events:UnmapNotify"><emphasis role='bold'>UnmapNotify</emphasis></link>
event, but the ordering of
<emphasis role='bold'>FocusOut</emphasis>
with respect to generated
<link linkend="events:EnterNotify"><emphasis role='bold'>EnterNotify</emphasis></link>,
<link linkend="events:LeaveNotify"><emphasis role='bold'>LeaveNotify</emphasis></link>,
<link linkend="events:VisibilityNotify"><emphasis role='bold'>VisibilityNotify</emphasis></link>,
and
<link linkend="events:Expose"><emphasis role='bold'>Expose</emphasis></link>
events is not constrained.
</para>
<para>
<emphasis role='bold'>Normal</emphasis>
and
<emphasis role='bold'>WhileGrabbed</emphasis>
events are generated as follows:
</para>
<para>
When the focus moves from window A to window B, A is an inferior of B,
and the pointer is in window P:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Ancestor</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Virtual</emphasis>
is generated on each window between A and B exclusive (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Inferior</emphasis>
is generated on B.
    </para>
  </listitem>
  <listitem>
    <para>
If P is an inferior of B
but P is not A or an inferior of A or an ancestor of A,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window below B down to and including P (in order).
    </para>
  </listitem>
</itemizedlist>


<para>
When the focus moves from window A to window B, B is an inferior of A,
and the pointer is in window P:
</para>

<itemizedlist>
  <listitem>
    <para>
If P is an inferior of A
but P is not an inferior of B or an ancestor of B,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P up to but not including A (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Inferior</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Virtual</emphasis>
is generated on each window between A and B exclusive (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Ancestor</emphasis>
is generated on B.
    </para>
  </listitem>
</itemizedlist>

<para>
When the focus moves from window A to window B, window C is their
least common ancestor, and the pointer is in window P:
</para>

<itemizedlist>
  <listitem>
    <para>
If P is an inferior of A,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P up to but not including A (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window between A and C exclusive (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window between C and B exclusive (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on B.
    </para>
  </listitem>
  <listitem>
    <para>
If P is an inferior of B,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window below B down to and including P (in order).
    </para>
  </listitem>
</itemizedlist>

<para>
When the focus moves from window A to window B on different screens
and the pointer is in window P:
</para>


<itemizedlist>
  <listitem>
    <para>
If P is an inferior of A,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P up to but not including A (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
If A is not a root window,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window above A up to and including its root (in order).
    </para>
  </listitem>
  <listitem>
    <para>
If B is not a root window,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window from B's root down to but not including B
(in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on B.
    </para>
  </listitem>
  <listitem>
    <para>
If P is an inferior of B,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window below B down to and including P (in order).
    </para>
  </listitem>
</itemizedlist>

<para>
When the focus moves from window A to
<emphasis role='bold'>PointerRoot</emphasis>
(or
<emphasis role='bold'>None</emphasis>)
and the pointer is in window P:
</para>


<itemizedlist>
  <listitem>
    <para>
If P is an inferior of A,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P up to but not including A (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
If A is not a root window,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window above A up to and including its root (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>PointerRoot</emphasis>
(or
<emphasis role='bold'>None</emphasis>)
is generated on all root windows.
    </para>
  </listitem>
  <listitem>
    <para>
If the new focus is
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P's root down to and including P (in order).
    </para>
  </listitem>
</itemizedlist>

<para>
When the focus moves from
<emphasis role='bold'>PointerRoot</emphasis>
(or
<emphasis role='bold'>None</emphasis>)
to window A and the pointer is in window P:
</para>


<itemizedlist>
  <listitem>
    <para>
If the old focus is
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P up to and including P's root (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>PointerRoot</emphasis>
(or
<emphasis role='bold'>None</emphasis>)
is generated on all root windows.
    </para>
  </listitem>
  <listitem>
    <para>
If A is not a root window,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>NonlinearVirtual</emphasis>
is generated on each window from A's root down to but not including A
(in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Nonlinear</emphasis>
is generated on A.
    </para>
  </listitem>
  <listitem>
    <para>
If P is an inferior of A,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window below A down to and including P (in order).
    </para>
  </listitem>
</itemizedlist>

<para>
When the focus moves from
<emphasis role='bold'>PointerRoot</emphasis>
to
<emphasis role='bold'>None</emphasis>
(or vice versa) and the pointer is in window P:
</para>

<itemizedlist>
  <listitem>
    <para>
If the old focus is
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P up to and including P's root (in order).
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusOut</emphasis>
with detail
<emphasis role='bold'>PointerRoot</emphasis>
(or
<emphasis role='bold'>None</emphasis>)
is generated on all root windows.
    </para>
  </listitem>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>None</emphasis>
(or
<emphasis role='bold'>PointerRoot</emphasis>)
is generated on all root windows.
    </para>
  </listitem>
  <listitem>
    <para>
If the new focus is
<emphasis role='bold'>PointerRoot</emphasis>,
<emphasis role='bold'>FocusIn</emphasis>
with detail
<emphasis role='bold'>Pointer</emphasis>
is generated on each window from P's root down to and including P (in order).
    </para>
  </listitem>
</itemizedlist>


<para>
When a keyboard grab activates (but before generating any actual
<emphasis role='bold'>KeyPress</emphasis>
event that activates the grab), G is the grab-window for the grab,
and F is the current focus:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
and
<emphasis role='bold'>FocusOut</emphasis>
events with mode
<emphasis role='bold'>Grab</emphasis>
are generated (as for
<emphasis role='bold'>Normal</emphasis>
above) as if the focus were to change from F to G.
    </para>
  </listitem>
</itemizedlist>

<para>
When a keyboard grab deactivates (but after generating any actual
<emphasis role='bold'>KeyRelease</emphasis>
event that deactivates the grab), G is the grab-window for the grab,
and F is the current focus:
</para>

<itemizedlist>
  <listitem>
    <para>
<emphasis role='bold'>FocusIn</emphasis>
and
<emphasis role='bold'>FocusOut</emphasis>
events with mode
<emphasis role='bold'>Ungrab</emphasis>
are generated (as for
<emphasis role='bold'>Normal</emphasis>
above) as if the focus were to change from G to F.
    </para>
  </listitem>
</itemizedlist>

  </section>
  <section id="events:KeymapNotify">
    <title>KeymapNotify</title>
    <indexterm zone="events:KeymapNotify" significance="preferred"><primary>KeymapNotify</primary></indexterm>

<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>KeymapNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>keys</emphasis>: LISTofCARD8
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>

<para>
The value is a bit vector as described in
<link linkend="requests:QueryKeymap"><emphasis role='bold'>QueryKeymap</emphasis></link>.
This event is reported to clients selecting
<emphasis role='bold'>KeymapState</emphasis>
on a window and is generated immediately after every
<link linkend="events:EnterNotify"><emphasis role='bold'>EnterNotify</emphasis></link>
and
<link linkend="events:FocusIn"><emphasis role='bold'>FocusIn</emphasis></link>.
<!-- .sp -->
</para>
  </section>
  <section id="events:Expose">
    <title>Expose</title>
    <indexterm zone="events:Expose" significance="preferred"><primary>Expose</primary></indexterm>
    <indexterm zone="events:Expose"><primary>Event</primary><secondary>Exposure</secondary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>Expose</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>,
<emphasis remap='I'>y</emphasis>,
<emphasis remap='I'>width</emphasis>,
<emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>count</emphasis>: CARD16
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<para>
This event is reported to clients selecting
<emphasis role='bold'>Exposure</emphasis>
on the window.
It is generated when no valid contents are available for regions of a window,
and either the regions are visible, the regions are viewable
and the server is (perhaps newly) maintaining backing store on the window,
or the window is not viewable but the server is (perhaps newly) honoring
window's backing-store attribute of
<emphasis role='bold'>Always</emphasis>
or
<emphasis role='bold'>WhenMapped</emphasis>.
The regions are decomposed into an arbitrary set of rectangles,
and an
<emphasis role='bold'>Expose</emphasis>
event is generated for each rectangle.
</para>
<para>
For a given action causing exposure events,
the set of events for a given window are guaranteed to be reported contiguously.
If count is zero,
then no more
<emphasis role='bold'>Expose</emphasis>
events for this window follow.
If count is nonzero,
then at least that many more
<emphasis role='bold'>Expose</emphasis>
events for this window follow (and possibly more).
</para>
<para>
The x and y coordinates are relative to window's origin
and specify the upper-left corner of a rectangle.
The width and height specify the extent of the rectangle.
</para>
<para>
<emphasis role='bold'>Expose</emphasis>
events are never generated on
<emphasis role='bold'>InputOnly</emphasis>
windows.
</para>
<para>
All
<emphasis role='bold'>Expose</emphasis>
events caused by a hierarchy change are generated after any
hierarchy event caused by that change (for example,
<link linkend="events:UnmapNotify"><emphasis role='bold'>UnmapNotify</emphasis></link>,
<link linkend="events:MapNotify"><emphasis role='bold'>MapNotify</emphasis></link>,
<link linkend="events:ConfigureNotify"><emphasis role='bold'>ConfigureNotify</emphasis></link>,
<link linkend="events:GravityNotify"><emphasis role='bold'>GravityNotify</emphasis></link>,
<link linkend="events:CirculateNotify"><emphasis role='bold'>CirculateNotify</emphasis></link>).
All
<emphasis role='bold'>Expose</emphasis>
events on a given window are generated after any
<link linkend="events:VisibilityNotify"><emphasis role='bold'>VisibilityNotify</emphasis></link>
event on that window,
but it is not required that all
<emphasis role='bold'>Expose</emphasis>
events on all windows be generated after all
<emphasis role='bold'>Visibilitity</emphasis>
events on all windows.
The ordering of
<emphasis role='bold'>Expose</emphasis>
events with respect to
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>,
<link linkend="events:EnterNotify"><emphasis role='bold'>EnterNotify</emphasis></link>,
and
<link linkend="events:LeaveNotify"><emphasis role='bold'>LeaveNotify</emphasis></link>
events is not constrained.
<!-- .sp -->
</para>
  </section>
  <section id="events:GraphicsExposure">
    <title>GraphicsExposure</title>
    <indexterm zone="events:GraphicsExposure" significance="preferred"><primary>GraphicsExposure</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>GraphicsExposure</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>, <emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>count</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>major-opcode</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>minor-opcode</emphasis>: CARD16
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to a client using a graphics context
with graphics-exposures selected
and is generated when a destination region could not be computed due
to an obscured or out-of-bounds source region.
All of the regions exposed by a given graphics request
are guaranteed to be reported contiguously.
If count is zero then no more
<emphasis role='bold'>GraphicsExposure</emphasis>
events for this window follow.
If count is nonzero,
then at least that many more
<emphasis role='bold'>GraphicsExposure</emphasis>
events for this window follow (and possibly more).
</para>
<para>
The x and y coordinates are relative to drawable's origin
and specify the upper-left corner of a rectangle.
The width and height specify the extent of the rectangle.
</para>
<para>
The major and minor opcodes identify the graphics request used.
For the core protocol,
major-opcode is always
<link linkend="requests:CopyArea"><emphasis role='bold'>CopyArea</emphasis></link>
or
<link linkend="requests:CopyPlane"><emphasis role='bold'>CopyPlane</emphasis></link>,
and minor-opcode is always zero.
<!-- .sp -->
</para>
  </section>
  <section id="events:NoExposure">
    <title>NoExposure</title>
    <indexterm zone="events:NoExposure" significance="preferred"><primary>NoExposure</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
     <row>
      <entry>
	<emphasis role='bold'>NoExposure</emphasis>
      </entry>
    </row>
   <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>drawable</emphasis>: DRAWABLE
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>major-opcode</emphasis>: CARD8
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>minor-opcode:</emphasis> CARD16
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to a client using a graphics context
with graphics-exposures selected
and is generated when a graphics request
that might produce
<link linkend="events:GraphicsExposure"><emphasis role='bold'>GraphicsExposure</emphasis></link>
events does not produce any.
The drawable specifies the destination used for the graphics request.
</para>
<para>
The major and minor opcodes identify the graphics request used.
For the core protocol,
major-opcode is always
<link linkend="requests:CopyArea"><emphasis role='bold'>CopyArea</emphasis></link>
or
<link linkend="requests:CopyPlane"><emphasis role='bold'>CopyPlane</emphasis></link>,
and the minor-opcode is always zero.
<!-- .sp -->
</para>
  </section>
  <section id="events:VisibilityNotify">
    <title>VisibilityNotify</title>
    <indexterm zone="events:VisibilityNotify" significance="preferred"><primary>VisibilityNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>VisibilityNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>state</emphasis>:
{ <emphasis role='bold'>Unobscured</emphasis>,
<emphasis role='bold'>PartiallyObscured</emphasis>,
<emphasis role='bold'>FullyObscured</emphasis>}
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>VisibilityChange</emphasis>
on the window.
In the following,
the state of the window is calculated ignoring all of the window's subwindows.
When a window changes state from partially or fully obscured or
not viewable to viewable and completely unobscured,
an event with
<emphasis role='bold'>Unobscured</emphasis>
is generated.
When a window changes state from viewable and completely unobscured,
from viewable and completely obscured,
or from not viewable, to viewable and partially obscured,
an event with
<emphasis role='bold'>PartiallyObscured</emphasis>
is generated.
When a window changes state from viewable and completely unobscured,
from viewable and partially obscured,
or from not viewable to viewable and fully obscured,
an event with
<emphasis role='bold'>FullyObscured</emphasis>
is generated.
</para>
<para>
<emphasis role='bold'>VisibilityNotify</emphasis>
events are never generated on
<emphasis role='bold'>InputOnly</emphasis>
windows.
</para>
<para>
All
<emphasis role='bold'>VisibilityNotify</emphasis>
events caused by a hierarchy change are generated after any hierarchy event
caused by that change (for example,
<link linkend="events:UnmapNotify"><emphasis role='bold'>UnmapNotify</emphasis></link>,
<link linkend="events:MapNotify"><emphasis role='bold'>MapNotify</emphasis></link>,
<link linkend="events:ConfigureNotify"><emphasis role='bold'>ConfigureNotify</emphasis></link>,
<link linkend="events:GravityNotify"><emphasis role='bold'>GravityNotify</emphasis></link>,
<link linkend="events:CirculateNotify"><emphasis role='bold'>CirculateNotify</emphasis></link>).
Any
<emphasis role='bold'>VisibilityNotify</emphasis>
event on a given window is generated before any
<link linkend="events:Expose"><emphasis role='bold'>Expose</emphasis></link>
events on that window,
but it is not required that all
<emphasis role='bold'>VisibilityNotify</emphasis>
events on all windows be generated before all
<emphasis role='bold'>Expose</emphasis>
events on all windows.
The ordering of
<emphasis role='bold'>VisibilityNotify</emphasis>
events with respect to
<link linkend="events:FocusOut"><emphasis role='bold'>FocusOut</emphasis></link>,
<link linkend="events:EnterNotify"><emphasis role='bold'>EnterNotify</emphasis></link>,
and
<link linkend="events:LeaveNotify"><emphasis role='bold'>LeaveNotify</emphasis></link>
events is not constrained.
<!-- .sp -->
</para>
  </section>
  <section id="events:CreateNotify">
    <title>CreateNotify</title>
    <indexterm zone="events:CreateNotify" significance="preferred"><primary>CreateNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>CreateNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>parent</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>, <emphasis remap='I'>border-width</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>override-redirect</emphasis>: BOOL
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent
and is generated when the window is created.
The arguments are as in the
<link linkend="requests:CreateWindow"><emphasis role='bold'>CreateWindow</emphasis></link>
request.
<!-- .sp -->
</para>
  </section>
  <section id="events:DestroyNotify">
    <title>DestroyNotify</title>
    <indexterm zone="events:DestroyNotify" significance="preferred"><primary>DestroyNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>DestroyNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window and to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent.
It is generated when the window is destroyed.
The event is the window on which the event was generated,
and the window is the window that is destroyed.
</para>
<para>
The ordering of the
<emphasis role='bold'>DestroyNotify</emphasis>
events is such that for any given window,
<emphasis role='bold'>DestroyNotify</emphasis>
is generated on all inferiors of the window
before being generated on the window itself.
The ordering among siblings and across subhierarchies is not
otherwise constrained.
<!-- .sp -->
</para>
  </section>
  <section id="events:UnmapNotify">
    <title>UnmapNotify</title>
    <indexterm zone="events:UnmapNotify" significance="preferred"><primary>UnmapNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>UnmapNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>from-configure</emphasis>: BOOL
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window and to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent.
It is generated when the window changes state from mapped to unmapped.
The event is the window on which the event was generated,
and the window is the window that is unmapped.
The from-configure flag is
<emphasis role='bold'>True</emphasis>
if the event was generated as a result of the window's parent being resized
when the window itself had a win-gravity of
<emphasis role='bold'>Unmap</emphasis>.
<!-- .sp -->
</para>
  </section>
  <section id="events:MapNotify">
    <title>MapNotify</title>
    <indexterm zone="events:MapNotify" significance="preferred"><primary>MapNotify</primary></indexterm>
    <indexterm zone="events:MapNotify"><primary>Mapped window</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>MapNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>override-redirect</emphasis>: BOOL
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window and to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent.
It is generated when the window changes state from unmapped to mapped.
The event is the window on which the event was generated,
and the window is the window that is mapped.
The override-redirect flag is from the window's attribute.
<!-- .sp -->
</para>
  </section>
  <section id="events:MapRequest">
    <title>MapRequest</title>
    <indexterm zone="events:MapRequest" significance="preferred"><primary>MapRequest</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>MapRequest</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>parent</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to the client selecting
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent and is generated when a
<link linkend="requests:MapWindow"><emphasis role='bold'>MapWindow</emphasis></link>
request is issued on an unmapped window with an override-redirect attribute of
<emphasis role='bold'>False</emphasis>.
<!-- .sp -->
</para>
  </section>
  <section id="events:ReparentNotify">
    <title>ReparentNotify</title>
    <indexterm zone="events:ReparentNotify" significance="preferred"><primary>ReparentNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>ReparentNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>, <emphasis remap='I'>parent</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>override-redirect</emphasis>: BOOL
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on either the old or the new parent and to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window.
It is generated when the window is reparented.
The event is the window on which the event was generated.
The window is the window that has been rerooted.
The parent specifies the new parent.
The x and y coordinates are relative to the new parent's origin
and specify the position of the upper-left outer corner of the window.
The override-redirect flag is from the window's attribute.
<!-- .sp -->
</para>
  </section>
  <section id="events:ConfigureNotify">
    <title>ConfigureNotify</title>
    <indexterm zone="events:ConfigureNotify" significance="preferred"><primary>ConfigureNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>ConfigureNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>, <emphasis remap='I'>border-width</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>above-sibling</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>override-redirect</emphasis>: BOOL
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window and to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent.
It is generated when a
<link linkend="requests:ConfigureWindow"><emphasis role='bold'>ConfigureWindow</emphasis></link>
request actually changes the state of the window.
The event is the window on which the event was generated,
and the window is the window that is changed.
The x and y coordinates are relative to the new parent's origin
and specify the position of the upper-left outer corner of the window.
The width and height specify the inside size, not including the border.
If above-sibling is
<emphasis role='bold'>None</emphasis>,
then the window is on the bottom of the stack with respect to siblings.
Otherwise, the window is immediately on top of the specified sibling.
The override-redirect flag is from the window's attribute.
<!-- .sp -->
</para>
  </section>
  <section id="events:GravityNotify">
    <title>GravityNotify</title>
    <indexterm zone="events:GravityNotify" significance="preferred"><primary>GravityNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>GravityNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent and to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window.
It is generated when a window is moved because of a change in size
of the parent.
The event is the window on which the event was generated,
and the window is the window that is moved.
The x and y coordinates are relative to the new parent's origin
and specify the position of the upper-left outer corner of the window.
<!-- .sp -->
</para>
  </section>
  <section id="events:ResizeRequest">
    <title>ResizeRequest</title>
    <indexterm zone="events:ResizeRequest" significance="preferred"><primary>ResizeRequest</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>ResizeRequest</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>: CARD16
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to the client selecting
<emphasis role='bold'>ResizeRedirect</emphasis>
on the window and is generated when a
<link linkend="requests:ConfigureWindow"><emphasis role='bold'>ConfigureWindow</emphasis></link>
request by some other client on the window attempts to change the size
of the window.
The width and height are the requested inside size, not including the border.
<!-- .sp -->
</para>
  </section>
  <section id="events:ConfigureRequest">
    <title>ConfigureRequest</title>
    <indexterm zone="events:ConfigureRequest" significance="preferred"><primary>ConfigureRequest</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>ConfigureRequest</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>parent</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>x</emphasis>, <emphasis remap='I'>y</emphasis>: INT16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>width</emphasis>, <emphasis remap='I'>height</emphasis>, <emphasis remap='I'>border-width</emphasis>: CARD16
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>sibling</emphasis>: WINDOW or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>stack-mode</emphasis>:
{ <emphasis role='bold'>Above</emphasis>,
<emphasis role='bold'>Below</emphasis>,
<emphasis role='bold'>TopIf</emphasis>,
<emphasis role='bold'>BottomIf</emphasis>,
<emphasis role='bold'>Opposite</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>value-mask</emphasis>: BITMASK
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to the client selecting
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent and is generated when a
<link linkend="requests:ConfigureWindow"><emphasis role='bold'>ConfigureWindow</emphasis></link>
request is issued on the window by some other client.
The value-mask indicates which components were specified in the request.
The value-mask and the corresponding values are reported as given
in the request.
The remaining values are filled in from the current geometry of the window,
except in the case of sibling and stack-mode,
which are reported as
<emphasis role='bold'>None</emphasis>
and
<emphasis role='bold'>Above</emphasis>
(respectively) if not given in the request.
<!-- .sp -->
</para>
  </section>
  <section id="events:CirculateNotify">
    <title>CirculateNotify</title>
    <indexterm zone="events:CirculateNotify" significance="preferred"><primary>CirculateNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>CirculateNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>event</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>place</emphasis>:
{ <emphasis role='bold'>Top</emphasis>,
<emphasis role='bold'>Bottom</emphasis>}
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>StructureNotify</emphasis>
on the window and to clients selecting
<emphasis role='bold'>SubstructureNotify</emphasis>
on the parent.
It is generated when the window is actually restacked from a
<link linkend="requests:CirculateWindow"><emphasis role='bold'>CirculateWindow</emphasis></link>
request.
The event is the window on which the event was generated,
and the window is the window that is restacked.
If place is
<emphasis role='bold'>Top</emphasis>,
the window is now on top of all siblings.
Otherwise, it is below all siblings.
<!-- .sp -->
</para>
  </section>
  <section id="events:CirculateRequest">
    <title>CirculateRequest</title>
    <indexterm zone="events:CirculateRequest" significance="preferred"><primary>CirculateRequest</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>CirculateRequest</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>parent</emphasis>, <emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>place</emphasis>:
{ <emphasis role='bold'>Top</emphasis>,
<emphasis role='bold'>Bottom</emphasis>}
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to the client selecting
<emphasis role='bold'>SubstructureRedirect</emphasis>
on the parent and is generated when a
<link linkend="requests:CirculateWindow"><emphasis role='bold'>CirculateWindow</emphasis></link>
request is issued on the parent and a window actually needs to be restacked.
The window specifies the window to be restacked,
and the place specifies what the new position in the stacking order should be.
<!-- .sp -->
</para>
  </section>
  <section id="events:PropertyNotify">
    <title>PropertyNotify</title>
    <indexterm zone="events:PropertyNotify" significance="preferred"><primary>PropertyNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>PropertyNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>atom</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>state</emphasis>:
{ <emphasis role='bold'>NewValue</emphasis>,
<emphasis role='bold'>Deleted</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>PropertyChange</emphasis>
on the window and is generated with state
<emphasis role='bold'>NewValue</emphasis>
when a property of the window is changed using
<link linkend="requests:ChangeProperty"><emphasis role='bold'>ChangeProperty</emphasis></link>
or
<link linkend="requests:RotateProperties"><emphasis role='bold'>RotateProperties</emphasis></link>,
even when adding zero-length data using
<emphasis role='bold'>ChangeProperty</emphasis>
and when replacing all or part of a property with identical data using
<emphasis role='bold'>ChangeProperty</emphasis>
or
<emphasis role='bold'>RotateProperties</emphasis>.
It is generated with state
<emphasis role='bold'>Deleted</emphasis>
when a property of the
window is deleted using request
<link linkend="requests:DeleteProperty"><emphasis role='bold'>DeleteProperty</emphasis></link>
or
<link linkend="requests:GetProperty"><emphasis role='bold'>GetProperty</emphasis></link>.
The timestamp indicates the server time when the property was changed.
<!-- .sp -->
</para>
  </section>
  <section id="events:SelectionClear">
    <title>SelectionClear</title>
    <indexterm zone="events:SelectionClear" significance="preferred"><primary>SelectionClear</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>SelectionClear</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>owner</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>selection</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to the current owner of a selection
and is generated when a new owner is being defined by means of
<link linkend="requests:SetSelectionOwner"><emphasis role='bold'>SetSelectionOwner</emphasis></link>.
The timestamp is the last-change time recorded for the selection.
The owner argument is the window that was specified by the current owner in its
<emphasis role='bold'>SetSelectionOwner</emphasis>
request.
<!-- .sp -->
</para>
  </section>
  <section id="events:SelectionRequest">
    <title>SelectionRequest</title>
    <indexterm zone="events:SelectionRequest" significance="preferred"><primary>SelectionRequest</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>SelectionRequest</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>owner</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>selection</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>target</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>property</emphasis>: ATOM or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>requestor</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to the owner of a selection
and is generated when a client issues a
<link linkend="requests:ConvertSelection"><emphasis role='bold'>ConvertSelection</emphasis></link>
request.
The owner argument is the window that was specified in the
<link linkend="requests:SetSelectionOwner"><emphasis role='bold'>SetSelectionOwner</emphasis></link>
request.
The remaining arguments are as in the
<emphasis role='bold'>ConvertSelection</emphasis>
request.
</para>
<para>
The owner should convert the selection based on the specified target type
and send a
<emphasis role='bold'>SelectionNotify</emphasis>
back to the requestor.
A complete specification for using selections is given in the X.Org
standard <citetitle>Inter-Client Communication Conventions Manual</citetitle>.
<!-- .sp -->
</para>
  </section>
  <section id="events:SelectionNotify">
    <title>SelectionNotify</title>
    <indexterm zone="events:SelectionNotify" significance="preferred"><primary>SelectionNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>SelectionNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>requestor</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>selection</emphasis>, <emphasis remap='I'>target</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>property</emphasis>: ATOM or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>time</emphasis>: TIMESTAMP or
<emphasis role='bold'>CurrentTime</emphasis>
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is generated by the server in response to a
<link linkend="requests:ConvertSelection"><emphasis role='bold'>ConvertSelection</emphasis></link>
request when there is no owner for the selection.
When there is an owner,
it should be generated by the owner using
<link linkend="requests:SendEvent"><emphasis role='bold'>SendEvent</emphasis></link>.
The owner of a selection should send this event to a requestor either
when a selection has been converted and stored as a property
or when a selection conversion could not be performed (indicated with property
<emphasis role='bold'>None</emphasis>).
<!-- .sp -->
</para>
  </section>
  <section id="events:ColormapNotify">
    <title>ColormapNotify</title>
    <indexterm zone="events:ColormapNotify" significance="preferred"><primary>ColormapNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>ColormapNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>colormap</emphasis>: COLORMAP or
<emphasis role='bold'>None</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>new</emphasis>: BOOL
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>state</emphasis>:
{ <emphasis role='bold'>Installed</emphasis>,
<emphasis role='bold'>Uninstalled</emphasis>}
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is reported to clients selecting
<emphasis role='bold'>ColormapChange</emphasis>
on the window.
It is generated with value
<emphasis role='bold'>True</emphasis>
for new when the colormap attribute of the window is changed
and is generated with value
<emphasis role='bold'>False</emphasis>
for new when the colormap of a window is installed or uninstalled.
In either case,
the state indicates whether the colormap is currently installed.
<!-- .sp -->
</para>
  </section>
  <section id="events:MappingNotify">
    <title>MappingNotify</title>
    <indexterm zone="events:MappingNotify" significance="preferred"><primary>MappingNotify</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>MappingNotify</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>request</emphasis>:
{ <emphasis role='bold'>Modifier</emphasis>,
<emphasis role='bold'>Keyboard</emphasis>,
<emphasis role='bold'>Pointer</emphasis>}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>first-keycode</emphasis>, <emphasis remap='I'>count</emphasis>: CARD8
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is sent to all clients.
There is no mechanism to express disinterest in this event.
The detail indicates the kind of change that occurred:
<emphasis role='bold'>Modifiers</emphasis>
for a successful
<link linkend="requests:SetModifierMapping"><emphasis role='bold'>SetModifierMapping</emphasis></link>,
<emphasis role='bold'>Keyboard</emphasis>
for a successful
<link linkend="requests:ChangeKeyboardMapping"><emphasis role='bold'>ChangeKeyboardMapping</emphasis></link>,
and
<emphasis role='bold'>Pointer</emphasis>
for a successful
<link linkend="requests:SetPointerMapping"><emphasis role='bold'>SetPointerMapping</emphasis></link>.
If the detail is
<emphasis role='bold'>Keyboard</emphasis>,
then first-keycode and count indicate the range of altered keycodes.
<!-- .sp -->
</para>
  </section>
  <section id="events:ClientMessage">
    <title>ClientMessage</title>
    <indexterm zone="events:ClientMessage" significance="preferred"><primary>ClientMessage</primary></indexterm>
<informaltable frame='none'>
  <?dbfo keep-together="always" ?>
  <tgroup cols='1' align='left' colsep='0' rowsep='0'>
  <colspec colname='c1' colwidth='1.0*'/>
  <tbody>
    <row>
      <entry>
	<emphasis role='bold'>ClientMessage</emphasis>
      </entry>
    </row>
    <row>
      <entry>
<!-- .in +.2i -->
<emphasis remap='I'>window</emphasis>: WINDOW
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>type</emphasis>: ATOM
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>format</emphasis>: {8, 16, 32}
      </entry>
    </row>
    <row>
      <entry>
<emphasis remap='I'>data</emphasis>: LISTofINT8 or LISTofINT16 or LISTofINT32
<!-- .in -.2i -->
<!-- .eM -->
      </entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
<!-- .eM -->
<para>
This event is only generated by clients using
<link linkend="requests:SendEvent"><emphasis role='bold'>SendEvent</emphasis></link>.
The type specifies how the data is to be interpreted by the receiving client;
the server places no interpretation on the type or the data.
The format specifies whether the data should be viewed as a list of 8-bit,
16-bit, or 32-bit quantities, so that the server can correctly
byte-swap, as necessary.
The data always consists of either 20 8-bit values or 10 16-bit values
or 5 32-bit values, although particular message types might not make use
of all of these values.
</para>
  </section>
</chapter>
<chapter id='Flow_Control_and_Concurrency'>
<title>Flow Control and Concurrency</title>
<!-- .XS -->
<!-- \*(SN Flow Control and Concurrency -->
<!-- .XE -->
<para>
Whenever the server is writing to a given connection,
it is permissible for the server to stop reading from that connection
(but if the writing would block, it must continue to service other connections).
The server is not required to buffer more than a single request per connection
at one time.
For a given connection to the server,
a client can block while reading from the connection
but should undertake to read (events and errors) when writing would block.
Failure on the part of a client to obey this rule could result
in a deadlocked connection,
although deadlock is probably unlikely unless either
the transport layer has very little buffering or the client attempts to
send large numbers of requests without ever reading replies or checking for
errors and events.
</para>
<para>
Whether or not a server is implemented with internal concurrency,
the overall effect must be as if individual requests are executed to completion
in some serial order,
and requests from a given connection must be executed in delivery order
(that is, the total execution order is a shuffle of the individual streams).
The execution of a request includes validating all arguments,
collecting all data for any reply,
and generating and queueing all required events.
However,
it does not include the actual transmission of the reply and the events.
In addition, the effect of any other cause that can generate multiple events
(for example, activation of a grab or pointer motion) must effectively generate
and queue all required events indivisibly with respect to all other causes
and requests.
For a request from a given client,
any events destined for that client that are caused by executing the request
must be sent to the client before any reply or error is sent.
</para>
</chapter>
</part>
@


1.3
log
@Update to x11proto 7.0.22.
@
text
@d77 1
a77 1
<chapter id="protocol_formats">
d142 1
a142 1
For the following errors (see <link linkend="errors">section 4</link>),
d189 1
a189 1
<chapter id="syntactic_conventions">
d218 1
a218 1
Requests in <link linkend="requests">section 9</link> are described
d245 1
a245 1
Events in <link linkend="events">section 11</link> are described
d260 1
a260 1
<chapter id="common_types">
d265 4
a268 4
<informaltable frame="none">
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colwidth='1*' colsep="0"/>
  <colspec colname='c2' colwidth='2*' colsep="0"/>
d270 1
a270 1
    <row rowsep="0">
d276 1
a276 1
    <row rowsep="0">
d289 1
a289 1
    <row rowsep="0">
d320 1
a320 1
    <row rowsep="0">
d327 1
a327 1
    <row rowsep="0">
d331 1
a331 1
    <row rowsep="0">
d335 1
a335 1
    <row rowsep="0">
d339 1
a339 1
    <row rowsep="0">
d343 1
a343 1
    <row rowsep="0">
d347 1
a347 1
    <row rowsep="0">
d351 1
a351 1
    <row rowsep="0">
d355 1
a355 1
    <row rowsep="0">
d359 1
a359 1
    <row rowsep="0">
d363 1
a363 1
    <row rowsep="0">
d367 1
a367 1
    <row rowsep="0">
d371 1
a371 1
    <row rowsep="0">
d375 1
a375 1
    <row rowsep="0">
d379 1
a379 1
    <row rowsep="0">
d383 1
a383 1
    <row rowsep="0">
d387 1
a387 1
    <row rowsep="0">
d391 1
a391 1
    <row rowsep="0">
d395 1
a395 1
    <row rowsep="0">
d399 1
a399 1
    <row rowsep="0">
d403 1
a403 1
    <row rowsep="0">
d419 1
a419 1
    <row rowsep="0">
d435 1
a435 1
    <row rowsep="0">
d442 1
a442 1
    <row rowsep="0">
d472 1
a472 1
    <row rowsep="0">
d490 1
a490 1
    <row rowsep="0">
d506 1
a506 1
    <row rowsep="0">
d510 1
a510 1
    <row rowsep="0">
d514 1
a514 1
    <row rowsep="0">
d518 1
a518 1
    <row rowsep="0">
d531 1
a531 1
    <row rowsep="0">
d541 1
a541 1
    <row rowsep="0">
d545 1
a545 1
    <row rowsep="0">
d549 1
a549 1
    <row rowsep="0">
d553 1
a553 1
    <row rowsep="0">
d557 1
a557 1
    <row rowsep="0">
d561 1
a561 1
    <row rowsep="0">
d568 1
a568 1
    <row rowsep="0">
d576 1
a576 1
    <row rowsep="0">
d621 1
a621 1
<chapter id="errors">
d645 4
a648 4
<informaltable frame="none">
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colwidth='1*' colsep="0"/>
  <colspec colname='c2' colwidth='2*' colsep="0"/>
d650 1
a650 1
    <row rowsep="0">
d656 1
a656 1
    <row rowsep="0">
d670 1
a670 1
    <row rowsep="0">
d687 1
a687 1
    <row rowsep="0">
d693 1
a693 1
    <row rowsep="0">
d699 1
a699 1
    <row rowsep="0">
d705 1
a705 1
    <row rowsep="0">
d712 1
a712 1
    <row rowsep="0">
d720 1
a720 1
    <row rowsep="0">
d726 1
a726 1
    <row rowsep="0">
d733 1
a733 1
    <row rowsep="0">
d743 1
a743 1
    <row rowsep="0">
d752 1
a752 1
    <row rowsep="0">
d764 1
a764 1
    <row rowsep="0">
d770 1
a770 1
    <row rowsep="0">
d776 1
a776 1
    <row rowsep="0">
d782 1
a782 1
    <row rowsep="0">
d792 1
a792 1
    <row rowsep="0">
d821 1
a821 1
<chapter id="keyboards">
d823 1
a823 1
<indexterm zone="keyboards"><primary>Keyboard</primary></indexterm>
d1018 1
a1018 1
<chapter id="pointers">
d1029 1
a1029 1
<chapter id="predefined_atoms">
d1036 1
a1036 1
<indexterm zone="predefined_atoms"><primary>Atom</primary><secondary>predefined</secondary></indexterm>
d1143 1
a1143 1
<chapter id="connection_setup">
d1145 1
a1145 1
  <indexterm zone="connection_setup"><primary>Connection</primary></indexterm>
d1339 3
a1341 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colwidth='1*' colsep="0"/>
  <colspec colname='c2' colwidth='2*' colsep="0"/>
d1343 1
a1343 1
    <row rowsep="0">
d1347 1
a1347 1
    <row rowsep="0">
d1353 1
a1353 1
    <row rowsep="0">
d1359 1
a1359 1
    <row rowsep="0">
d1363 1
a1363 1
    <row rowsep="0">
d1367 1
a1367 1
    <row rowsep="0">
d1371 1
a1371 1
    <row rowsep="0">
d1375 1
a1375 1
    <row rowsep="0">
d1379 1
a1379 1
    <row rowsep="0">
d1383 1
a1383 1
    <row rowsep="0">
d1387 1
a1387 1
    <row rowsep="0">
d1391 1
a1391 1
    <row rowsep="0">
d1395 1
a1395 1
    <row rowsep="0">
d1399 1
a1399 1
    <row rowsep="0">
d1403 1
a1403 1
    <row rowsep="0">
d1407 1
a1407 1
    <row rowsep="0">
d1411 1
a1411 1
    <row rowsep="0">
d1415 1
a1415 1
    <row rowsep="0">
d1419 1
a1419 1
    <row rowsep="0">
d1426 1
a1426 1
    <row rowsep="0">
d1430 1
a1430 1
    <row rowsep="0">
d1434 1
a1434 1
    <row rowsep="0">
d1757 1
a1757 1
<chapter id="requests">
d1763 3
a1765 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d1767 1
a1767 1
    <row rowsep='0'>
d1773 1
a1773 1
    <row rowsep='0'>
d1781 1
a1781 1
    <row rowsep='0'>
d1786 1
a1786 1
    <row rowsep='0'>
d1792 1
a1792 1
    <row rowsep='0'>
d1797 1
a1797 1
    <row rowsep='0'>
d1802 1
a1802 1
    <row rowsep='0'>
d1807 1
a1807 1
    <row rowsep='0'>
d1813 1
a1813 1
    <row rowsep='0'>
d1920 3
a1922 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d1924 1
a1924 1
    <row>
d1930 1
a1930 1
    <row rowsep='0'>
d1939 1
a1939 1
    <row rowsep='0'>
d1943 1
a1943 1
    <row rowsep='0'>
d1950 1
a1950 1
    <row rowsep='0'>
d1954 1
a1954 1
    <row rowsep='0'>
d1958 1
a1958 1
    <row rowsep='0'>
d1962 1
a1962 1
    <row rowsep='0'>
d1970 1
a1970 1
    <row rowsep='0'>
d1974 1
a1974 1
    <row rowsep='0'>
d1978 1
a1978 1
    <row rowsep='0'>
d1982 1
a1982 1
    <row rowsep='0'>
d1986 1
a1986 1
    <row rowsep='0'>
d1990 1
a1990 1
    <row rowsep='0'>
d1994 1
a1994 1
    <row rowsep='0'>
d2001 1
a2001 1
    <row rowsep='0'>
d2018 3
a2020 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d2022 1
a2022 1
    <row>
d2028 1
a2028 1
    <row rowsep='0'>
d2034 1
a2034 1
    <row rowsep='0'>
d2040 1
a2040 1
    <row rowsep='0'>
d2046 1
a2046 1
    <row rowsep='0'>
d2052 1
a2052 1
    <row rowsep='0'>
d2058 1
a2058 1
    <row rowsep='0'>
d2062 1
a2062 1
    <row rowsep='0'>
d2066 1
a2066 1
    <row rowsep='0'>
d2072 1
a2072 1
    <row rowsep='0'>
d2076 1
a2076 1
    <row rowsep='0'>
d2080 1
a2080 1
    <row rowsep='0'>
d2086 1
a2086 1
    <row rowsep='0'>
d2356 3
a2358 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2360 1
a2360 1
    <row rowsep='0'>
d2366 1
a2366 1
    <row rowsep='0'>
d2371 1
a2371 1
    <row rowsep='0'>
d2377 1
a2377 1
    <row rowsep='0'>
d2477 3
a2479 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2481 1
a2481 1
    <row rowsep='0'>
d2488 1
a2488 1
    <row rowsep='0'>
d2493 1
a2493 1
    <row rowsep='0'>
d2499 1
a2499 1
    <row rowsep='0'>
d2506 1
a2506 1
    <row rowsep='0'>
d2511 1
a2511 1
    <row rowsep='0'>
d2516 1
a2516 1
    <row rowsep='0'>
d2524 1
a2524 1
    <row rowsep='0'>
d2529 1
a2529 1
    <row rowsep='0'>
d2534 1
a2534 1
    <row rowsep='0'>
d2539 1
a2539 1
    <row rowsep='0'>
d2545 1
a2545 1
    <row rowsep='0'>
d2550 1
a2550 1
    <row rowsep='0'>
d2558 1
a2558 1
    <row rowsep='0'>
d2563 1
a2563 1
    <row rowsep='0'>
d2568 1
a2568 1
    <row rowsep='0'>
d2574 1
a2574 1
    <row rowsep='0'>
d2602 3
a2604 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2606 1
a2606 1
    <row rowsep='0'>
d2613 1
a2613 1
    <row rowsep='0'>
d2656 3
a2658 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2660 1
a2660 1
    <row rowsep='0'>
d2667 1
a2667 1
    <row rowsep='0'>
d2691 3
a2693 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2695 1
a2695 1
    <row rowsep='0'>
d2701 1
a2701 1
    <row rowsep='0'>
d2709 1
a2709 1
    <row rowsep='0'>
d2731 1
a2731 1
see <link linkend="connection_close">section 10</link>.
d2743 3
a2745 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2747 1
a2747 1
    <row rowsep='0'>
d2753 1
a2753 1
    <row rowsep='0'>
d2759 1
a2759 1
    <row rowsep='0'>
d2825 3
a2827 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2829 1
a2829 1
    <row rowsep='0'>
d2836 1
a2836 1
    <row rowsep='0'>
d2883 3
a2885 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2887 1
a2887 1
    <row rowsep='0'>
d2894 1
a2894 1
    <row rowsep='0'>
d2919 3
a2921 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2923 1
a2923 1
    <row rowsep='0'>
d2930 1
a2930 1
    <row rowsep='0'>
d2956 3
a2958 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2960 1
a2960 1
    <row rowsep='0'>
d2967 1
a2967 1
    <row rowsep='0'>
d2992 3
a2994 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d2996 1
a2996 1
    <row rowsep='0'>
d3002 1
a3002 1
    <row rowsep='0'>
d3007 1
a3007 1
    <row rowsep='0'>
d3013 1
a3013 1
    <row rowsep='0'>
d3035 4
a3038 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d3040 1
a3040 1
    <row>
d3046 1
a3046 1
    <row rowsep='0'>
d3050 1
a3050 1
    <row rowsep='0'>
d3054 1
a3054 1
    <row rowsep='0'>
d3058 1
a3058 1
    <row rowsep='0'>
d3062 1
a3062 1
    <row rowsep='0'>
d3066 1
a3066 1
    <row rowsep='0'>
d3070 1
a3070 1
    <row rowsep='0'>
d3157 4
a3160 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d3162 1
a3162 1
    <row>
d3168 1
a3168 1
    <row rowsep='0'>
d3174 1
a3174 1
    <row rowsep='0'>
d3180 1
a3180 1
    <row rowsep='0'>
d3186 1
a3186 1
    <row rowsep='0'>
d3192 1
a3192 1
    <row rowsep='0'>
d3198 1
a3198 1
    <row rowsep='0'>
d3204 1
a3204 1
    <row rowsep='0'>
d3210 1
a3210 1
    <row rowsep='0'>
d3216 1
a3216 1
    <row rowsep='0'>
d3292 4
a3295 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d3297 1
a3297 1
    <row rowsep='0'>
d3305 1
a3305 1
    <row rowsep='0'>
d3313 1
a3313 1
    <row rowsep='0'>
d3322 1
a3322 1
    <row rowsep='0'>
d3331 1
a3331 1
    <row rowsep='0'>
d3352 4
a3355 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d3357 1
a3357 1
    <row rowsep='0'>
d3365 1
a3365 1
    <row rowsep='0'>
d3373 1
a3373 1
    <row rowsep='0'>
d3382 1
a3382 1
    <row rowsep='0'>
d3391 1
a3391 1
    <row rowsep='0'>
d3430 3
a3432 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3434 1
a3434 1
    <row rowsep='0'>
d3440 1
a3440 1
    <row rowsep='0'>
d3448 1
a3448 1
    <row rowsep='0'>
d3491 3
a3493 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3495 1
a3495 1
    <row rowsep='0'>
d3502 1
a3502 1
    <row rowsep='0'>
d3507 1
a3507 1
    <row rowsep='0'>
d3513 1
a3513 1
    <row rowsep='0'>
d3518 1
a3518 1
    <row rowsep='0'>
d3523 1
a3523 1
    <row rowsep='0'>
d3529 1
a3529 1
    <row rowsep='0'>
d3563 3
a3565 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3567 1
a3567 1
    <row rowsep='0'>
d3574 1
a3574 1
    <row rowsep='0'>
d3579 1
a3579 1
    <row rowsep='0'>
d3585 1
a3585 1
    <row rowsep='0'>
d3591 1
a3591 1
    <row rowsep='0'>
d3597 1
a3597 1
    <row rowsep='0'>
d3621 3
a3623 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3625 1
a3625 1
    <row rowsep='0'>
d3631 1
a3631 1
    <row rowsep='0'>
d3637 1
a3637 1
    <row rowsep='0'>
d3642 1
a3642 1
    <row rowsep='0'>
d3650 1
a3650 1
    <row rowsep='0'>
d3674 1
a3674 1
Atoms remain defined until server reset (see <link linkend="connection_close">section 10</link>).
d3682 3
a3684 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3686 1
a3686 1
    <row rowsep='0'>
d3693 1
a3693 1
    <row rowsep='0'>
d3698 1
a3698 1
    <row rowsep='0'>
d3705 1
a3705 1
    <row rowsep='0'>
d3728 3
a3730 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3732 1
a3732 1
    <row rowsep='0'>
d3738 1
a3738 1
    <row rowsep='0'>
d3743 1
a3743 1
    <row rowsep='0'>
d3748 1
a3748 1
    <row rowsep='0'>
d3756 1
a3756 1
    <row rowsep='0'>
d3762 1
a3762 1
    <row rowsep='0'>
d3814 1
a3814 1
or until server reset (see <link linkend="connection_close">section 10</link>).
d3825 3
a3827 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3829 1
a3829 1
    <row rowsep='0'>
d3835 1
a3835 1
    <row rowsep='0'>
d3841 1
a3841 1
    <row rowsep='0'>
d3867 3
a3869 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3871 1
a3871 1
    <row rowsep='0'>
d3877 1
a3877 1
    <row rowsep='0'>
d3882 1
a3882 1
    <row rowsep='0'>
d3888 1
a3888 1
    <row rowsep='0'>
d3893 1
a3893 1
    <row rowsep='0'>
d3899 1
a3899 1
    <row rowsep='0'>
d3904 1
a3904 1
    <row rowsep='0'>
d3911 1
a3911 1
    <row rowsep='0'>
d3916 1
a3916 1
    <row rowsep='0'>
d3921 1
a3921 1
    <row rowsep='0'>
d3927 1
a3927 1
    <row rowsep='0'>
d3994 3
a3996 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d3998 1
a3998 1
    <row rowsep='0'>
d4004 1
a4004 1
    <row rowsep='0'>
d4009 1
a4009 1
    <row rowsep='0'>
d4015 1
a4015 1
    <row rowsep='0'>
d4062 3
a4064 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4066 1
a4066 1
    <row rowsep='0'>
d4073 1
a4073 1
    <row rowsep='0'>
d4078 1
a4078 1
    <row rowsep='0'>
d4085 1
a4085 1
    <row rowsep='0'>
d4108 3
a4110 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4112 1
a4112 1
    <row rowsep='0'>
d4118 1
a4118 1
    <row rowsep='0'>
d4124 1
a4124 1
    <row rowsep='0'>
d4131 1
a4131 1
    <row rowsep='0'>
d4197 3
a4199 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4201 1
a4201 1
    <row rowsep='0'>
d4208 1
a4208 1
    <row rowsep='0'>
d4213 1
a4213 1
    <row rowsep='0'>
d4221 1
a4221 1
    <row rowsep='0'>
d4247 3
a4249 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4251 1
a4251 1
    <row rowsep='0'>
d4257 1
a4257 1
    <row rowsep='0'>
d4263 1
a4263 1
    <row rowsep='0'>
d4268 1
a4268 1
    <row rowsep='0'>
d4275 1
a4275 1
    <row rowsep='0'>
d4308 3
a4310 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4312 1
a4312 1
    <row rowsep='0'>
d4321 1
a4321 1
    <row rowsep='0'>
d4326 1
a4326 1
    <row rowsep='0'>
d4331 1
a4331 1
    <row rowsep='0'>
d4337 1
a4337 1
    <row rowsep='0'>
d4411 3
a4413 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4415 1
a4415 1
    <row rowsep='0'>
d4421 1
a4421 1
    <row rowsep='0'>
d4426 1
a4426 1
    <row rowsep='0'>
d4431 1
a4431 1
    <row rowsep='0'>
d4438 1
a4438 1
    <row rowsep='0'>
d4444 1
a4444 1
    <row rowsep='0'>
d4450 1
a4450 1
    <row rowsep='0'>
d4457 1
a4457 1
    <row rowsep='0'>
d4462 1
a4462 1
    <row rowsep='0'>
d4474 1
a4474 1
    <row rowsep='0'>
d4590 3
a4592 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4594 1
a4594 1
    <row rowsep='0'>
d4639 3
a4641 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4643 1
a4643 1
    <row rowsep='0'>
d4650 1
a4650 1
    <row rowsep='0'>
d4656 1
a4656 1
    <row rowsep='0'>
d4661 1
a4661 1
    <row rowsep='0'>
d4666 1
a4666 1
    <row rowsep='0'>
d4671 1
a4671 1
    <row rowsep='0'>
d4678 1
a4678 1
    <row rowsep='0'>
d4684 1
a4684 1
    <row rowsep='0'>
d4691 1
a4691 1
    <row rowsep='0'>
d4776 3
a4778 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4780 1
a4780 1
    <row rowsep='0'>
d4787 1
a4787 1
    <row rowsep='0'>
d4793 1
a4793 1
    <row rowsep='0'>
d4799 1
a4799 1
    <row rowsep='0'>
d4832 3
a4834 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4836 1
a4836 1
    <row rowsep='0'>
d4842 1
a4842 1
    <row rowsep='0'>
d4848 1
a4848 1
    <row rowsep='0'>
d4855 1
a4855 1
    <row rowsep='0'>
d4887 3
a4889 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d4891 1
a4891 1
    <row rowsep='0'>
d4897 1
a4897 1
    <row rowsep='0'>
d4902 1
a4902 1
    <row rowsep='0'>
d4909 1
a4909 1
    <row rowsep='0'>
d4916 1
a4916 1
    <row rowsep='0'>
d4921 1
a4921 1
    <row rowsep='0'>
d4933 1
a4933 1
    <row rowsep='0'>
d5029 3
a5031 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5033 1
a5033 1
    <row rowsep='0'>
d5076 3
a5078 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5080 1
a5080 1
    <row rowsep='0'>
d5087 1
a5087 1
    <row rowsep='0'>
d5093 1
a5093 1
    <row rowsep='0'>
d5098 1
a5098 1
    <row rowsep='0'>
d5103 1
a5103 1
    <row rowsep='0'>
d5111 1
a5111 1
    <row rowsep='0'>
d5197 3
a5199 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5201 1
a5201 1
    <row rowsep='0'>
d5208 1
a5208 1
    <row rowsep='0'>
d5214 1
a5214 1
    <row rowsep='0'>
d5220 1
a5220 1
    <row rowsep='0'>
d5252 3
a5254 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5256 1
a5256 1
    <row rowsep='0'>
d5266 1
a5266 1
    <row rowsep='0'>
d5274 1
a5274 1
    <row rowsep='0'>
d5281 1
a5281 1
    <row rowsep='0'>
d5481 3
a5483 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5485 1
a5485 1
    <row rowsep='0'>
d5492 1
a5492 1
    <row rowsep='0'>
d5497 1
a5497 1
    <row rowsep='0'>
d5503 1
a5503 1
    <row rowsep='0'>
d5509 1
a5509 1
    <row rowsep='0'>
d5514 1
a5514 1
    <row rowsep='0'>
d5519 1
a5519 1
    <row rowsep='0'>
d5525 1
a5525 1
    <row rowsep='0'>
d5563 3
a5565 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5567 1
a5567 1
    <row rowsep='0'>
d5575 1
a5575 1
    <row rowsep='0'>
d5581 1
a5581 1
    <row rowsep='0'>
d5586 1
a5586 1
    <row rowsep='0'>
d5593 1
a5593 1
    <row rowsep='0'>
d5598 1
a5598 1
    <row rowsep='0'>
d5603 1
a5603 1
    <row rowsep='0'>
d5610 1
a5610 1
    <row rowsep='0'>
d5643 3
a5645 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5647 1
a5647 1
    <row rowsep='0'>
d5653 1
a5653 1
    <row rowsep='0'>
d5659 1
a5659 1
    <row rowsep='0'>
d5664 1
a5664 1
    <row rowsep='0'>
d5670 1
a5670 1
    <row rowsep='0'>
d5676 1
a5676 1
    <row rowsep='0'>
d5682 1
a5682 1
    <row rowsep='0'>
d5712 3
a5714 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5716 1
a5716 1
    <row rowsep='0'>
d5723 1
a5723 1
    <row rowsep='0'>
d5729 1
a5729 1
    <row rowsep='0'>
d5734 1
a5734 1
    <row rowsep='0'>
d5739 1
a5739 1
    <row rowsep='0'>
d5745 1
a5745 1
    <row rowsep='0'>
d5795 3
a5797 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5799 1
a5799 1
    <row rowsep='0'>
d5808 1
a5808 1
    <row rowsep='0'>
d5816 1
a5816 1
    <row rowsep='0'>
d5823 1
a5823 1
    <row rowsep='0'>
d5906 3
a5908 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5910 1
a5910 1
    <row rowsep='0'>
d5915 1
a5915 1
    <row rowsep='0'>
d5924 1
a5924 1
    <row rowsep='0'>
d5947 3
a5949 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5951 1
a5951 1
    <row rowsep='0'>
d5956 1
a5956 1
    <row rowsep='0'>
d5984 3
a5986 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d5988 1
a5988 1
    <row rowsep='0'>
d5994 1
a5994 1
    <row rowsep='0'>
d6000 1
a6000 1
    <row rowsep='0'>
d6039 3
a6041 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6043 1
a6043 1
    <row rowsep='0'>
d6050 1
a6050 1
    <row rowsep='0'>
d6073 5
a6077 4
  <tgroup cols='3' align='left' rowsep='0'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
  <colspec colname='c3' colsep='0'/>
d6377 3
a6379 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6381 1
a6381 1
    <row rowsep='0'>
d6387 1
a6387 1
    <row rowsep='0'>
d6393 1
a6393 1
    <row rowsep='0'>
d6398 1
a6398 1
    <row rowsep='0'>
d6406 1
a6406 1
    <row rowsep='0'>
d6411 1
a6411 1
    <row rowsep='0'>
d6416 1
a6416 1
    <row rowsep='0'>
d6421 1
a6421 1
    <row rowsep='0'>
d6426 1
a6426 1
    <row rowsep='0'>
d6431 1
a6431 1
    <row rowsep='0'>
d6436 1
a6436 1
    <row rowsep='0'>
d6442 1
a6442 1
    <row rowsep='0'>
d6492 3
a6494 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6496 1
a6496 1
    <row rowsep='0'>
d6502 1
a6502 1
    <row rowsep='0'>
d6508 1
a6508 1
    <row rowsep='0'>
d6513 1
a6513 1
    <row rowsep='0'>
d6546 3
a6548 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6550 1
a6550 1
    <row rowsep='0'>
d6556 1
a6556 1
    <row rowsep='0'>
d6562 1
a6562 1
    <row rowsep='0'>
d6567 1
a6567 1
    <row rowsep='0'>
d6573 1
a6573 1
    <row rowsep='0'>
d6578 1
a6578 1
    <row rowsep='0'>
d6584 1
a6584 1
    <row rowsep='0'>
d6591 1
a6591 1
    <row rowsep='0'>
d6626 3
a6628 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6630 1
a6630 1
    <row rowsep='0'>
d6637 1
a6637 1
    <row rowsep='0'>
d6675 3
a6677 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6679 1
a6679 1
    <row rowsep='0'>
d6684 1
a6684 1
    <row rowsep='0'>
d6705 3
a6707 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6709 1
a6709 1
    <row rowsep='0'>
d6715 1
a6715 1
    <row rowsep='0'>
d6720 1
a6720 1
    <row rowsep='0'>
d6725 1
a6725 1
    <row rowsep='0'>
d6731 1
a6731 1
    <row rowsep='0'>
d6769 3
a6771 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6773 1
a6773 1
    <row rowsep='0'>
d6780 1
a6780 1
    <row rowsep='0'>
d6804 3
a6806 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d6808 1
a6808 1
    <row rowsep='0'>
d6814 1
a6814 1
    <row rowsep='0'>
d6819 1
a6819 1
    <row rowsep='0'>
d6824 1
a6824 1
    <row rowsep='0'>
d6830 1
a6830 1
    <row rowsep='0'>
d6865 4
a6868 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d6870 1
a6870 1
    <row>
d6876 1
a6876 1
    <row rowsep='0'>
d6897 1
a6897 1
    <row rowsep='0'>
d6901 1
a6901 1
    <row rowsep='0'>
d6905 1
a6905 1
    <row rowsep='0'>
d6909 1
a6909 1
    <row rowsep='0'>
d6913 1
a6913 1
    <row rowsep='0'>
d6921 1
a6921 1
    <row rowsep='0'>
d6930 1
a6930 1
    <row rowsep='0'>
d6938 1
a6938 1
    <row rowsep='0'>
d6947 1
a6947 1
    <row rowsep='0'>
d6954 1
a6954 1
    <row rowsep='0'>
d6961 1
a6961 1
    <row rowsep='0'>
d6965 1
a6965 1
    <row rowsep='0'>
d6969 1
a6969 1
    <row rowsep='0'>
d6973 1
a6973 1
    <row rowsep='0'>
d6977 1
a6977 1
    <row rowsep='0'>
d6981 1
a6981 1
    <row rowsep='0'>
d6988 1
a6988 1
    <row rowsep='0'>
d6992 1
a6992 1
    <row rowsep='0'>
d6996 1
a6996 1
    <row rowsep='0'>
d7000 1
a7000 1
    <row rowsep='0'>
d7007 1
a7007 1
    <row rowsep='0'>
d7011 1
a7011 1
    <row rowsep='0'>
d7043 5
a7047 4
<informaltable frame='none'>
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7049 1
a7049 1
    <row>
d7055 1
a7055 1
    <row rowsep='0'>
d7061 1
a7061 1
    <row rowsep='0'>
d7067 1
a7067 1
    <row rowsep='0'>
d7073 1
a7073 1
    <row rowsep='0'>
d7079 1
a7079 1
    <row rowsep='0'>
d7085 1
a7085 1
    <row rowsep='0'>
d7091 1
a7091 1
    <row rowsep='0'>
d7097 1
a7097 1
    <row rowsep='0'>
d7103 1
a7103 1
    <row rowsep='0'>
d7109 1
a7109 1
    <row rowsep='0'>
d7115 1
a7115 1
    <row rowsep='0'>
d7121 1
a7121 1
    <row rowsep='0'>
d7127 1
a7127 1
    <row rowsep='0'>
d7133 1
a7133 1
    <row rowsep='0'>
d7139 1
a7139 1
    <row rowsep='0'>
d7145 1
a7145 1
    <row rowsep='0'>
d7227 4
a7230 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7232 1
a7232 1
    <row rowsep='0'>
d7240 1
a7240 1
    <row rowsep='0'>
d7252 1
a7252 1
    <row rowsep='0'>
d7274 4
a7277 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7279 1
a7279 1
    <row rowsep='0'>
d7289 1
a7289 1
    <row rowsep='0'>
d7298 1
a7298 1
    <row rowsep='0'>
d7309 1
a7309 1
    <row rowsep='0'>
d7332 4
a7335 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7337 1
a7337 1
    <row rowsep='0'>
d7348 1
a7348 1
    <row rowsep='0'>
d7357 1
a7357 1
    <row rowsep='0'>
d7379 5
a7383 3
  <tgroup cols='3' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7385 1
a7385 1
    <row rowsep='0'>
d7394 1
a7394 1
    <row rowsep='0'>
d7404 1
a7404 1
    <row rowsep='0'>
d7414 1
a7414 1
    <row rowsep='0'>
d7424 1
a7424 1
    <row rowsep='0'>
d7433 1
a7433 1
    <row rowsep='0'>
d7443 1
a7443 1
    <row rowsep='0'>
d7517 4
a7520 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7522 1
a7522 1
    <row rowsep='0'>
d7528 1
a7528 1
    <row rowsep='0'>
d7534 1
a7534 1
    <row rowsep='0'>
d7544 1
a7544 1
    <row rowsep='0'>
d7562 4
a7565 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7567 1
a7567 1
    <row rowsep='0'>
d7573 1
a7573 1
    <row rowsep='0'>
d7579 1
a7579 1
    <row rowsep='0'>
d7585 1
a7585 1
    <row rowsep='0'>
d7700 5
a7704 4
<informaltable frame='none'>
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d7706 1
a7706 1
    <row rowsep='0'>
d7712 1
a7712 1
    <row rowsep='0'>
d7718 1
a7718 1
    <row rowsep='0'>
d7722 1
a7722 1
    <row rowsep='0'>
d7726 1
a7726 1
    <row rowsep='0'>
d7730 1
a7730 1
    <row rowsep='0'>
d7734 1
a7734 1
    <row rowsep='0'>
d7738 1
a7738 1
    <row rowsep='0'>
d7742 1
a7742 1
    <row rowsep='0'>
d7746 1
a7746 1
    <row rowsep='0'>
d7750 1
a7750 1
    <row rowsep='0'>
d7754 1
a7754 1
    <row rowsep='0'>
d7758 1
a7758 1
    <row rowsep='0'>
d7772 1
a7772 1
    <row rowsep='0'>
d7778 1
a7778 1
    <row rowsep='0'>
d7782 1
a7782 1
    <row rowsep='0'>
d7786 1
a7786 1
    <row rowsep='0'>
d7790 1
a7790 1
    <row rowsep='0'>
d7796 1
a7796 1
    <row rowsep='0'>
d7802 1
a7802 1
    <row rowsep='0'>
d7806 1
a7806 1
    <row rowsep='0'>
d7810 1
a7810 1
    <row rowsep='0'>
d7816 1
a7816 1
    <row rowsep='0'>
d7820 1
a7820 1
    <row rowsep='0'>
d7852 3
a7854 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d7856 1
a7856 1
    <row rowsep='0'>
d7862 1
a7862 1
    <row rowsep='0'>
d7867 1
a7867 1
    <row rowsep='0'>
d7873 1
a7873 1
    <row rowsep='0'>
d7917 3
a7919 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d7921 1
a7921 1
    <row rowsep='0'>
d7927 1
a7927 1
    <row rowsep='0'>
d7933 1
a7933 1
    <row rowsep='0'>
d7963 3
a7965 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d7967 1
a7967 1
    <row rowsep='0'>
d7973 1
a7973 1
    <row rowsep='0'>
d7978 1
a7978 1
    <row rowsep='0'>
d7984 1
a7984 1
    <row rowsep='0'>
d8063 3
a8065 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8067 1
a8067 1
    <row rowsep='0'>
d8073 1
a8073 1
    <row rowsep='0'>
d8078 1
a8078 1
    <row rowsep='0'>
d8083 1
a8083 1
    <row rowsep='0'>
d8093 1
a8093 1
    <row rowsep='0'>
d8160 3
a8162 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8164 1
a8164 1
    <row rowsep='0'>
d8171 1
a8171 1
    <row rowsep='0'>
d8194 3
a8196 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8198 1
a8198 1
    <row rowsep='0'>
d8204 1
a8204 1
    <row rowsep='0'>
d8209 1
a8209 1
    <row rowsep='0'>
d8214 1
a8214 1
    <row rowsep='0'>
d8220 1
a8220 1
    <row rowsep='0'>
d8269 3
a8271 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8273 1
a8273 1
    <row rowsep='0'>
d8279 1
a8279 1
    <row rowsep='0'>
d8284 1
a8284 1
    <row rowsep='0'>
d8289 1
a8289 1
    <row rowsep='0'>
d8294 1
a8294 1
    <row rowsep='0'>
d8300 1
a8300 1
    <row rowsep='0'>
d8366 3
a8368 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8370 1
a8370 1
    <row rowsep='0'>
d8376 1
a8376 1
    <row rowsep='0'>
d8381 1
a8381 1
    <row rowsep='0'>
d8386 1
a8386 1
    <row rowsep='0'>
d8391 1
a8391 1
    <row rowsep='0'>
d8396 1
a8396 1
    <row rowsep='0'>
d8402 1
a8402 1
    <row rowsep='0'>
d8449 3
a8451 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8453 1
a8453 1
    <row rowsep='0'>
d8459 1
a8459 1
    <row rowsep='0'>
d8464 1
a8464 1
    <row rowsep='0'>
d8471 1
a8471 1
    <row rowsep='0'>
d8477 1
a8477 1
    <row rowsep='0'>
d8514 3
a8516 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8518 1
a8518 1
    <row rowsep='0'>
d8524 1
a8524 1
    <row rowsep='0'>
d8529 1
a8529 1
    <row rowsep='0'>
d8536 1
a8536 1
    <row rowsep='0'>
d8542 1
a8542 1
    <row rowsep='0'>
d8604 3
a8606 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8608 1
a8608 1
    <row rowsep='0'>
d8614 1
a8614 1
    <row rowsep='0'>
d8619 1
a8619 1
    <row rowsep='0'>
d8625 1
a8625 1
    <row rowsep='0'>
d8632 1
a8632 1
    <row rowsep='0'>
d8639 1
a8639 1
    <row rowsep='0'>
d8679 3
a8681 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8683 1
a8683 1
    <row rowsep='0'>
d8689 1
a8689 1
    <row rowsep='0'>
d8694 1
a8694 1
    <row rowsep='0'>
d8700 1
a8700 1
    <row rowsep='0'>
d8751 3
a8753 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8755 1
a8755 1
    <row rowsep='0'>
d8761 1
a8761 1
    <row rowsep='0'>
d8766 1
a8766 1
    <row rowsep='0'>
d8772 1
a8772 1
    <row rowsep='0'>
d8864 4
a8867 3
  <tgroup cols='2' align='left' rowsep="0">
    <colspec colname='c1' colwidth='1*' colsep="0"/>
    <colspec colname='c2' colwidth='2*' colsep="0"/>
d8927 3
a8929 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d8931 1
a8931 1
    <row rowsep='0'>
d8937 1
a8937 1
    <row rowsep='0'>
d8942 1
a8942 1
    <row rowsep='0'>
d8950 1
a8950 1
    <row rowsep='0'>
d8957 1
a8957 1
    <row rowsep='0'>
d8963 1
a8963 1
    <row rowsep='0'>
d9039 3
a9041 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9043 1
a9043 1
    <row rowsep='0'>
d9049 1
a9049 1
    <row rowsep='0'>
d9054 1
a9054 1
    <row rowsep='0'>
d9060 1
a9060 1
    <row rowsep='0'>
d9108 3
a9110 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9112 1
a9112 1
    <row rowsep='0'>
d9118 1
a9118 1
    <row rowsep='0'>
d9123 1
a9123 1
    <row rowsep='0'>
d9129 1
a9129 1
    <row rowsep='0'>
d9201 3
a9203 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9205 1
a9205 1
    <row rowsep='0'>
d9211 1
a9211 1
    <row rowsep='0'>
d9216 1
a9216 1
    <row rowsep='0'>
d9221 1
a9221 1
    <row rowsep='0'>
d9226 1
a9226 1
    <row rowsep='0'>
d9231 1
a9231 1
    <row rowsep='0'>
d9236 1
a9236 1
    <row rowsep='0'>
d9244 1
a9244 1
    <row rowsep='0'>
d9250 1
a9250 1
    <row rowsep='0'>
d9328 3
a9330 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9332 1
a9332 1
    <row rowsep='0'>
d9338 1
a9338 1
    <row rowsep='0'>
d9343 1
a9343 1
    <row rowsep='0'>
d9348 1
a9348 1
    <row rowsep='0'>
d9353 1
a9353 1
    <row rowsep='0'>
d9361 1
a9361 1
    <row rowsep='0'>
d9366 1
a9366 1
    <row rowsep='0'>
d9372 1
a9372 1
    <row rowsep='0'>
d9378 1
a9378 1
    <row rowsep='0'>
d9384 1
a9384 1
    <row rowsep='0'>
d9458 5
a9462 4
  <tgroup cols='3' align='left' rowsep='0'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
  <colspec colname='c3' colsep='0'/>
d9572 5
a9576 4
  <tgroup cols='3' align='left' rowsep='0'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
  <colspec colname='c3' colsep='0'/>
d9623 1
a9623 1
    <row rowsep='0'>
d9660 3
a9662 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9664 1
a9664 1
    <row rowsep='0'>
d9670 1
a9670 1
    <row rowsep='0'>
d9675 1
a9675 1
    <row rowsep='0'>
d9680 1
a9680 1
    <row rowsep='0'>
d9686 1
a9686 1
    <row rowsep='0'>
d9751 3
a9753 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9755 1
a9755 1
    <row rowsep='0'>
d9761 1
a9761 1
    <row rowsep='0'>
d9766 1
a9766 1
    <row rowsep='0'>
d9771 1
a9771 1
    <row rowsep='0'>
d9777 1
a9777 1
    <row rowsep='0'>
d9808 3
a9810 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9812 1
a9812 1
    <row rowsep='0'>
d9818 1
a9818 1
    <row rowsep='0'>
d9823 1
a9823 1
    <row rowsep='0'>
d9828 1
a9828 1
    <row rowsep='0'>
d9836 1
a9836 1
    <row rowsep='0'>
d9917 3
a9919 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9921 1
a9921 1
    <row rowsep='0'>
d9928 1
a9928 1
    <row rowsep='0'>
d9969 3
a9971 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d9973 1
a9973 1
    <row rowsep='0'>
d9980 1
a9980 1
    <row rowsep='0'>
d10030 3
a10032 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10034 1
a10034 1
    <row rowsep='0'>
d10041 1
a10041 1
    <row rowsep='0'>
d10101 3
a10103 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10105 1
a10105 1
    <row rowsep='0'>
d10112 1
a10112 1
    <row rowsep='0'>
d10152 3
a10154 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10156 1
a10156 1
    <row rowsep='0'>
d10163 1
a10163 1
    <row rowsep='0'>
d10168 1
a10168 1
    <row rowsep='0'>
d10175 1
a10175 1
    <row rowsep='0'>
d10202 3
a10204 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10206 1
a10206 1
    <row rowsep='0'>
d10212 1
a10212 1
    <row rowsep='0'>
d10218 1
a10218 1
    <row rowsep='0'>
d10223 1
a10223 1
    <row rowsep='0'>
d10229 1
a10229 1
    <row rowsep='0'>
d10235 1
a10235 1
    <row rowsep='0'>
d10262 3
a10264 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10266 1
a10266 1
    <row rowsep='0'>
d10272 1
a10272 1
    <row rowsep='0'>
d10278 1
a10278 1
    <row rowsep='0'>
d10283 1
a10283 1
    <row rowsep='0'>
d10289 1
a10289 1
    <row rowsep='0'>
d10294 1
a10294 1
    <row rowsep='0'>
d10300 1
a10300 1
    <row rowsep='0'>
d10332 3
a10334 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10336 1
a10336 1
    <row rowsep='0'>
d10342 1
a10342 1
    <row rowsep='0'>
d10347 1
a10347 1
    <row rowsep='0'>
d10353 1
a10353 1
    <row rowsep='0'>
d10358 1
a10358 1
    <row rowsep='0'>
d10365 1
a10365 1
    <row rowsep='0'>
d10416 3
a10418 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10420 1
a10420 1
    <row rowsep='0'>
d10426 1
a10426 1
    <row rowsep='0'>
d10431 1
a10431 1
    <row rowsep='0'>
d10437 1
a10437 1
    <row rowsep='0'>
d10442 1
a10442 1
    <row rowsep='0'>
d10448 1
a10448 1
    <row rowsep='0'>
d10454 1
a10454 1
    <row rowsep='0'>
d10508 3
a10510 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10512 1
a10512 1
    <row rowsep='0'>
d10518 1
a10518 1
    <row rowsep='0'>
d10523 1
a10523 1
    <row rowsep='0'>
d10529 1
a10529 1
    <row rowsep='0'>
d10591 3
a10593 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10595 1
a10595 1
    <row rowsep='0'>
d10600 1
a10600 1
    <row rowsep='0'>
d10605 1
a10605 1
    <row rowsep='0'>
d10610 1
a10610 1
    <row rowsep='0'>
d10614 4
a10617 3
          <tgroup cols='2' align='left'>
          <colspec colname='c1' colwidth='1*' colsep='0'/>
          <colspec colname='c2' colwidth='2*' colsep='0'/>
d10619 1
a10619 1
          <row rowsep='0'>
d10623 1
a10623 1
          <row rowsep='0'>
d10629 1
a10629 1
          <row rowsep='0'>
d10641 1
a10641 1
    <row rowsep='0'>
d10678 3
a10680 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10682 1
a10682 1
    <row rowsep='0'>
d10688 1
a10688 1
    <row rowsep='0'>
d10693 1
a10693 1
    <row rowsep='0'>
d10698 1
a10698 1
    <row rowsep='0'>
d10704 1
a10704 1
    <row rowsep='0'>
d10740 3
a10742 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10744 1
a10744 1
    <row rowsep='0'>
d10750 1
a10750 1
    <row rowsep='0'>
d10756 1
a10756 1
    <row rowsep='0'>
d10761 1
a10761 1
    <row rowsep='0'>
d10768 1
a10768 1
    <row rowsep='0'>
d10775 1
a10775 1
    <row rowsep='0'>
d10782 1
a10782 1
    <row rowsep='0'>
d10812 3
a10814 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10816 1
a10816 1
    <row rowsep='0'>
d10822 1
a10822 1
    <row rowsep='0'>
d10828 1
a10828 1
    <row rowsep='0'>
d10833 1
a10833 1
    <row rowsep='0'>
d10839 1
a10839 1
    <row rowsep='0'>
d10845 1
a10845 1
    <row rowsep='0'>
d10874 3
a10876 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10878 1
a10878 1
    <row rowsep='0'>
d10884 1
a10884 1
    <row rowsep='0'>
d10889 1
a10889 1
    <row rowsep='0'>
d10895 1
a10895 1
    <row rowsep='0'>
d10900 1
a10900 1
    <row rowsep='0'>
d10905 1
a10905 1
    <row rowsep='0'>
d10911 1
a10911 1
    <row rowsep='0'>
d10974 3
a10976 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d10978 1
a10978 1
    <row rowsep='0'>
d10984 1
a10984 1
    <row rowsep='0'>
d10989 1
a10989 1
    <row rowsep='0'>
d10995 1
a10995 1
    <row rowsep='0'>
d11000 1
a11000 1
    <row rowsep='0'>
d11005 1
a11005 1
    <row rowsep='0'>
d11011 1
a11011 1
    <row rowsep='0'>
d11063 3
a11065 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11067 1
a11067 1
    <row rowsep='0'>
d11074 1
a11074 1
    <row rowsep='0'>
d11097 3
a11099 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11101 1
a11101 1
    <row rowsep='0'>
d11107 1
a11107 1
    <row rowsep='0'>
d11112 1
a11112 1
    <row rowsep='0'>
d11118 1
a11118 1
    <row rowsep='0'>
d11142 3
a11144 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11146 1
a11146 1
    <row rowsep='0'>
d11155 1
a11155 1
    <row rowsep='0'>
d11160 1
a11160 1
    <row rowsep='0'>
d11166 1
a11166 1
    <row rowsep='0'>
d11171 1
a11171 1
    <row rowsep='0'>
d11178 1
a11178 1
    <row rowsep='0'>
d11231 3
a11233 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11235 1
a11235 1
    <row rowsep='0'>
d11242 1
a11242 1
    <row rowsep='0'>
d11247 1
a11247 1
    <row rowsep='0'>
d11253 1
a11253 1
    <row rowsep='0'>
d11258 1
a11258 1
    <row rowsep='0'>
d11263 1
a11263 1
    <row rowsep='0'>
d11300 3
a11302 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11304 1
a11304 1
    <row rowsep='0'>
d11309 1
a11309 1
    <row rowsep='0'>
d11330 3
a11332 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11334 1
a11334 1
    <row rowsep='0'>
d11340 1
a11340 1
    <row rowsep='0'>
d11346 1
a11346 1
    <row rowsep='0'>
d11351 1
a11351 1
    <row rowsep='0'>
d11361 1
a11361 1
    <row rowsep='0'>
d11439 3
a11441 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11443 1
a11443 1
    <row rowsep='0'>
d11448 1
a11448 1
    <row rowsep='0'>
d11454 1
a11454 1
    <row rowsep='0'>
d11494 3
a11496 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11498 1
a11498 1
    <row rowsep='0'>
d11504 1
a11504 1
    <row rowsep='0'>
d11509 1
a11509 1
    <row rowsep='0'>
d11515 1
a11515 1
    <row rowsep='0'>
d11575 1
a11575 1
(see <link linkend="keyboards">section 5</link>).
d11584 3
a11586 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11588 1
a11588 1
    <row rowsep='0'>
d11594 1
a11594 1
    <row rowsep='0'>
d11600 1
a11600 1
    <row rowsep='0'>
d11605 1
a11605 1
    <row rowsep='0'>
d11611 1
a11611 1
    <row rowsep='0'>
d11617 1
a11617 1
    <row rowsep='0'>
d11672 3
a11674 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11676 1
a11676 1
    <row rowsep='0'>
d11682 1
a11682 1
    <row rowsep='0'>
d11688 1
a11688 1
    <row rowsep='0'>
d11705 5
a11709 4
<informaltable frame='none'>
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d11711 1
a11711 1
    <row rowsep='0'>
d11717 1
a11717 1
    <row rowsep='0'>
d11721 1
a11721 1
    <row rowsep='0'>
d11725 1
a11725 1
    <row rowsep='0'>
d11729 1
a11729 1
    <row rowsep='0'>
d11733 1
a11733 1
    <row rowsep='0'>
d11737 1
a11737 1
    <row rowsep='0'>
d11744 1
a11744 1
    <row rowsep='0'>
d11748 1
a11748 1
    <row rowsep='0'>
d11845 3
a11847 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11849 1
a11849 1
    <row rowsep='0'>
d11854 1
a11854 1
    <row rowsep='0'>
d11860 1
a11860 1
    <row rowsep='0'>
d11865 1
a11865 1
    <row rowsep='0'>
d11870 1
a11870 1
    <row rowsep='0'>
d11875 1
a11875 1
    <row rowsep='0'>
d11880 1
a11880 1
    <row rowsep='0'>
d11887 1
a11887 1
    <row rowsep='0'>
d11915 3
a11917 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11919 1
a11919 1
    <row rowsep='0'>
d11926 1
a11926 1
    <row rowsep='0'>
d11962 3
a11964 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d11966 1
a11966 1
    <row rowsep='0'>
d11973 1
a11973 1
    <row rowsep='0'>
d11978 1
a11978 1
    <row rowsep='0'>
d11987 1
a11987 1
    <row rowsep='0'>
d12037 3
a12039 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12041 1
a12041 1
    <row rowsep='0'>
d12046 1
a12046 1
    <row rowsep='0'>
d12072 3
a12074 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12076 1
a12076 1
    <row rowsep='0'>
d12082 1
a12082 1
    <row rowsep='0'>
d12087 1
a12087 1
    <row rowsep='0'>
d12093 1
a12093 1
    <row rowsep='0'>
d12125 3
a12127 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12129 1
a12129 1
    <row rowsep='0'>
d12134 1
a12134 1
    <row rowsep='0'>
d12140 1
a12140 1
    <row rowsep='0'>
d12160 3
a12162 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12164 1
a12164 1
    <row rowsep='0'>
d12170 1
a12170 1
    <row rowsep='0'>
d12178 1
a12178 1
    <row rowsep='0'>
d12187 1
a12187 1
    <row rowsep='0'>
d12243 3
a12245 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12247 1
a12247 1
    <row rowsep='0'>
d12252 1
a12252 1
    <row rowsep='0'>
d12258 1
a12258 1
    <row rowsep='0'>
d12265 1
a12265 1
    <row rowsep='0'>
d12287 3
a12289 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12291 1
a12291 1
    <row rowsep='0'>
d12300 1
a12300 1
    <row rowsep='0'>
d12332 3
a12334 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12336 1
a12336 1
    <row rowsep='0'>
d12344 1
a12344 1
    <row rowsep='0'>
d12350 1
a12350 1
    <row rowsep='0'>
d12450 3
a12452 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12454 1
a12454 1
    <row rowsep='0'>
d12459 1
a12459 1
    <row rowsep='0'>
d12467 1
a12467 1
    <row rowsep='0'>
d12492 3
a12494 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12496 1
a12496 1
    <row rowsep='0'>
d12505 1
a12505 1
    <row rowsep='0'>
d12536 3
a12538 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12540 1
a12540 1
    <row rowsep='0'>
d12550 1
a12550 1
    <row rowsep='0'>
d12570 1
a12570 1
in <link linkend="connection_close">section 10</link>.
d12578 3
a12580 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12582 1
a12582 1
    <row rowsep='0'>
d12590 1
a12590 1
    <row rowsep='0'>
d12612 1
a12612 1
(see <link linkend="connection_close">section 10</link>).
d12639 1
a12639 1
<chapter id="connection_close">
d12641 1
a12641 1
  <indexterm zone="connection_close"><primary>Connection</primary><secondary>closing</secondary></indexterm>
d12727 1
a12727 1
<chapter id="events">
d12733 1
a12733 1
<indexterm zone="events"><primary>Event</primary></indexterm>
d12747 4
a12750 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d12758 1
a12758 1
    <row rowsep='0'>
d12762 1
a12762 1
    <row rowsep='0'>
d12768 1
a12768 1
    <row rowsep='0'>
d12774 1
a12774 1
    <row rowsep='0'>
d12784 1
a12784 1
    <row rowsep='0'>
d12790 1
a12790 1
    <row rowsep='0'>
d12817 3
a12819 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d12821 1
a12821 1
    <row rowsep='0'>
d12827 1
a12827 1
    <row rowsep='0'>
d12833 1
a12833 1
    <row rowsep='0'>
d12839 1
a12839 1
    <row rowsep='0'>
d12845 1
a12845 1
    <row rowsep='0'>
d12851 1
a12851 1
    <row rowsep='0'>
d12857 1
a12857 1
    <row rowsep='0'>
d12863 1
a12863 1
    <row rowsep='0'>
d12868 1
a12868 1
    <row rowsep='0'>
d12873 1
a12873 1
    <row rowsep='0'>
d12878 1
a12878 1
    <row rowsep='0'>
d12883 1
a12883 1
    <row rowsep='0'>
d12936 4
a12939 3
  <tgroup cols='2' align='left'>
  <colspec colname='c1' colsep='0'/>
  <colspec colname='c2' colsep='0'/>
d12947 1
a12947 1
    <row rowsep='0'>
d12954 1
a12954 1
    <row rowsep='0'>
d12961 1
a12961 1
    <row rowsep='0'>
d13017 3
a13019 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d13021 1
a13021 1
    <row rowsep='0'>
d13027 1
a13027 1
    <row rowsep='0'>
d13033 1
a13033 1
    <row rowsep='0'>
d13039 1
a13039 1
    <row rowsep='0'>
d13045 1
a13045 1
    <row rowsep='0'>
d13050 1
a13050 1
    <row rowsep='0'>
d13055 1
a13055 1
    <row rowsep='0'>
d13063 1
a13063 1
    <row rowsep='0'>
d13073 1
a13073 1
    <row rowsep='0'>
d13078 1
a13078 1
    <row rowsep='0'>
d13083 1
a13083 1
    <row rowsep='0'>
d13381 3
a13383 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d13385 1
a13385 1
    <row rowsep='0'>
d13391 1
a13391 1
    <row rowsep='0'>
d13397 1
a13397 1
    <row rowsep='0'>
d13403 1
a13403 1
    <row rowsep='0'>
d13412 1
a13412 1
    <row rowsep='0'>
d13423 1
a13423 1
    <row rowsep='0'>
d13898 3
a13900 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d13902 1
a13902 1
    <row rowsep='0'>
d13907 1
a13907 1
    <row rowsep='0'>
d13933 3
a13935 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d13937 1
a13937 1
    <row rowsep='0'>
d13942 1
a13942 1
    <row rowsep='0'>
d13948 1
a13948 1
    <row rowsep='0'>
d13956 1
a13956 1
    <row rowsep='0'>
d14041 3
a14043 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14045 1
a14045 1
    <row rowsep='0'>
d14050 1
a14050 1
    <row rowsep='0'>
d14056 1
a14056 1
    <row rowsep='0'>
d14061 1
a14061 1
    <row rowsep='0'>
d14066 1
a14066 1
    <row rowsep='0'>
d14071 1
a14071 1
    <row rowsep='0'>
d14117 3
a14119 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14121 1
a14121 1
     <row rowsep='0'>
d14126 1
a14126 1
   <row rowsep='0'>
d14132 1
a14132 1
    <row rowsep='0'>
d14137 1
a14137 1
    <row rowsep='0'>
d14172 3
a14174 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14176 1
a14176 1
    <row rowsep='0'>
d14181 1
a14181 1
    <row rowsep='0'>
d14187 1
a14187 1
    <row rowsep='0'>
d14266 3
a14268 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14270 1
a14270 1
    <row rowsep='0'>
d14275 1
a14275 1
    <row rowsep='0'>
d14281 1
a14281 1
    <row rowsep='0'>
d14286 1
a14286 1
    <row rowsep='0'>
d14291 1
a14291 1
    <row rowsep='0'>
d14317 3
a14319 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14321 1
a14321 1
    <row rowsep='0'>
d14326 1
a14326 1
    <row rowsep='0'>
d14364 3
a14366 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14368 1
a14368 1
    <row rowsep='0'>
d14373 1
a14373 1
    <row rowsep='0'>
d14379 1
a14379 1
    <row rowsep='0'>
d14412 3
a14414 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14416 1
a14416 1
    <row rowsep='0'>
d14421 1
a14421 1
    <row rowsep='0'>
d14427 1
a14427 1
    <row rowsep='0'>
d14455 3
a14457 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14459 1
a14459 1
    <row rowsep='0'>
d14464 1
a14464 1
    <row rowsep='0'>
d14490 3
a14492 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14494 1
a14494 1
    <row rowsep='0'>
d14499 1
a14499 1
    <row rowsep='0'>
d14505 1
a14505 1
    <row rowsep='0'>
d14510 1
a14510 1
    <row rowsep='0'>
d14541 3
a14543 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14545 1
a14545 1
    <row rowsep='0'>
d14550 1
a14550 1
    <row rowsep='0'>
d14556 1
a14556 1
    <row rowsep='0'>
d14561 1
a14561 1
    <row rowsep='0'>
d14566 1
a14566 1
    <row rowsep='0'>
d14572 1
a14572 1
    <row rowsep='0'>
d14609 3
a14611 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14613 1
a14613 1
    <row rowsep='0'>
d14618 1
a14618 1
    <row rowsep='0'>
d14624 1
a14624 1
    <row rowsep='0'>
d14654 3
a14656 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14658 1
a14658 1
    <row rowsep='0'>
d14663 1
a14663 1
    <row rowsep='0'>
d14669 1
a14669 1
    <row rowsep='0'>
d14695 3
a14697 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14699 1
a14699 1
    <row rowsep='0'>
d14704 1
a14704 1
    <row rowsep='0'>
d14710 1
a14710 1
    <row rowsep='0'>
d14715 1
a14715 1
    <row rowsep='0'>
d14720 1
a14720 1
    <row rowsep='0'>
d14726 1
a14726 1
    <row rowsep='0'>
d14736 1
a14736 1
    <row rowsep='0'>
d14770 3
a14772 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14774 1
a14774 1
    <row rowsep='0'>
d14779 1
a14779 1
    <row rowsep='0'>
d14785 1
a14785 1
    <row rowsep='0'>
d14820 3
a14822 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14824 1
a14824 1
    <row rowsep='0'>
d14829 1
a14829 1
    <row rowsep='0'>
d14835 1
a14835 1
    <row rowsep='0'>
d14863 3
a14865 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14867 1
a14867 1
    <row rowsep='0'>
d14872 1
a14872 1
    <row rowsep='0'>
d14878 1
a14878 1
    <row rowsep='0'>
d14883 1
a14883 1
    <row rowsep='0'>
d14890 1
a14890 1
    <row rowsep='0'>
d14931 3
a14933 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14935 1
a14935 1
    <row rowsep='0'>
d14940 1
a14940 1
    <row rowsep='0'>
d14946 1
a14946 1
    <row rowsep='0'>
d14951 1
a14951 1
    <row rowsep='0'>
d14977 3
a14979 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d14981 1
a14981 1
    <row rowsep='0'>
d14986 1
a14986 1
    <row rowsep='0'>
d14992 1
a14992 1
    <row rowsep='0'>
d14997 1
a14997 1
    <row rowsep='0'>
d15002 1
a15002 1
    <row rowsep='0'>
d15008 1
a15008 1
    <row rowsep='0'>
d15013 1
a15013 1
    <row rowsep='0'>
d15051 3
a15053 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d15055 1
a15055 1
    <row rowsep='0'>
d15060 1
a15060 1
    <row rowsep='0'>
d15066 1
a15066 1
    <row rowsep='0'>
d15071 1
a15071 1
    <row rowsep='0'>
d15077 1
a15077 1
    <row rowsep='0'>
d15107 3
a15109 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d15111 1
a15111 1
    <row rowsep='0'>
d15116 1
a15116 1
    <row rowsep='0'>
d15122 1
a15122 1
    <row rowsep='0'>
d15128 1
a15128 1
    <row rowsep='0'>
d15133 1
a15133 1
    <row rowsep='0'>
d15165 3
a15167 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d15169 1
a15169 1
    <row rowsep='0'>
d15174 1
a15174 1
    <row rowsep='0'>
d15183 1
a15183 1
    <row rowsep='0'>
d15218 3
a15220 2
  <tgroup cols='1' align='left'>
  <colspec colname='c1' colsep='0'/>
d15222 1
a15222 1
    <row rowsep='0'>
d15227 1
a15227 1
    <row rowsep='0'>
d15233 1
a15233 1
    <row rowsep='0'>
d15238 1
a15238 1
    <row rowsep='0'>
d15243 1
a15243 1
    <row rowsep='0'>
d15268 1
a15268 1
<chapter id="flow_control_and_concurrency">
@


1.2
log
@update to xproto 7.0.20. 2 new keysyms definitions plus lots of doc fixes.
@
text
@d82 1
a82 1
    <indexterm significance="preferred"><primary>Request</primary><secondary>format</secondary></indexterm>
d84 4
a87 4
Every request contains an 8-bit <firstterm>major opcode</firstterm>
<indexterm significance="preferred"><primary>Opcode</primary><secondary>major</secondary></indexterm>
and a 16-bit <firstterm>length field</firstterm>
<indexterm significance="preferred"><primary>Request</primary><secondary>length</secondary></indexterm>
d98 3
a100 2
Major opcodes 128 through 255 are reserved for extensions.
<indexterm><primary>Extension</primary></indexterm>
d102 2
a103 2
so extension requests typically have an additional <firstterm>minor
opcode</firstterm> encoded
d105 1
a105 1
<indexterm significance="preferred"><primary>Opcode</primary><secondary>minor</secondary></indexterm>
d109 2
a110 2
<firstterm>sequence number</firstterm>,
<indexterm significance="preferred"><primary>Sequence number</primary></indexterm>
d117 1
a117 1
    <indexterm significance="preferred"><primary>Reply</primary><secondary>format</secondary></indexterm>
d131 1
a131 1
    <indexterm significance="preferred"><primary>Error report</primary><secondary>format</secondary></indexterm>
d135 1
d137 3
a139 2
<indexterm significance="preferred"><primary>Error Codes</primary><secondary>extensions</secondary></indexterm>
<indexterm significance="preferred"><primary>Extension</primary><secondary>error codes</secondary></indexterm>
d166 1
a166 1
    <indexterm significance="preferred"><primary>Event</primary><secondary>format</secondary></indexterm>
d174 1
d177 3
a179 2
<indexterm significance="preferred"><primary>Event</primary><secondary>extension</secondary></indexterm>
<indexterm significance="preferred"><primary>Extension</primary><secondary>event</secondary></indexterm>
a219 4
    </para>
  </listitem>
  <listitem>
    <para>
a234 2
  </listitem>
  <listitem>
a246 4
    </para>
  </listitem>
  <listitem>
    <para>
d277 1
a277 1
      <entry>LISTofFOO<indexterm significance="preferred"><primary>Types</primary><secondary>LISTofFOO</secondary></indexterm></entry>
d290 1
a290 1
      <entry><para>BITMASK<indexterm significance="preferred"><primary>Types</primary><secondary>BITMASK</secondary></indexterm></para><para>LISTofVALUE<indexterm significance="preferred"><primary>Types</primary><secondary>LISTofVALUE</secondary></indexterm></para></entry>
d321 1
a321 1
      <entry>OR<indexterm significance="preferred"><primary>Types</primary><secondary>OR</secondary></indexterm></entry>
d328 1
a328 1
      <entry>WINDOW<indexterm significance="preferred"><primary>Types</primary><secondary>WINDOW</secondary></indexterm></entry>
d332 1
a332 1
      <entry>PIXMAP<indexterm significance="preferred"><primary>Types</primary><secondary>PIXMAP</secondary></indexterm></entry>
d336 1
a336 1
      <entry>CURSOR<indexterm significance="preferred"><primary>Types</primary><secondary>CURSOR</secondary></indexterm></entry>
d340 1
a340 1
      <entry>FONT<indexterm significance="preferred"><primary>Types</primary><secondary>FONT</secondary></indexterm></entry>
d344 1
a344 1
      <entry>GCONTEXT<indexterm significance="preferred"><primary>Types</primary><secondary>GCONTEXT</secondary></indexterm></entry>
d348 1
a348 1
      <entry>COLORMAP<indexterm significance="preferred"><primary>Types</primary><secondary>COLORMAP</secondary></indexterm></entry>
d352 1
a352 1
      <entry>DRAWABLE<indexterm significance="preferred"><primary>Types</primary><secondary>DRAWABLE</secondary></indexterm></entry>
d356 1
a356 1
      <entry>FONTABLE<indexterm significance="preferred"><primary>Types</primary><secondary>FONTABLE</secondary></indexterm></entry>
d360 1
a360 1
      <entry>ATOM<indexterm significance="preferred"><primary>Types</primary><secondary>ATOM</secondary></indexterm></entry>
d364 1
a364 1
      <entry>VISUALID<indexterm significance="preferred"><primary>Types</primary><secondary>VISUALID</secondary></indexterm></entry>
d368 1
a368 1
      <entry>VALUE<indexterm significance="preferred"><primary>Types</primary><secondary>VALUE</secondary></indexterm></entry>
d372 1
a372 1
      <entry>BYTE<indexterm significance="preferred"><primary>Types</primary><secondary>BYTE</secondary></indexterm></entry>
d376 1
a376 1
      <entry>INT8<indexterm significance="preferred"><primary>Types</primary><secondary>INT8</secondary></indexterm></entry>
d380 1
a380 1
      <entry>INT16<indexterm significance="preferred"><primary>Types</primary><secondary>INT16</secondary></indexterm></entry>
d384 1
a384 1
      <entry>INT32<indexterm significance="preferred"><primary>Types</primary><secondary>INT32</secondary></indexterm></entry>
d388 1
a388 1
      <entry>CARD8<indexterm significance="preferred"><primary>Types</primary><secondary>CARD8</secondary></indexterm></entry>
d392 1
a392 1
      <entry>CARD16<indexterm significance="preferred"><primary>Types</primary><secondary>CARD16</secondary></indexterm></entry>
d396 1
a396 1
      <entry>CARD32<indexterm significance="preferred"><primary>Types</primary><secondary>CARD32</secondary></indexterm></entry>
d400 1
a400 1
      <entry>TIMESTAMP<indexterm significance="preferred"><primary>Types</primary><secondary>TIMESTAMP</secondary></indexterm></entry>
d404 1
a404 1
      <entry>BITGRAVITY<indexterm significance="preferred"><primary>Types</primary><secondary>BITGRAVITY</secondary></indexterm></entry>
d420 1
a420 1
      <entry>WINGRAVITY<indexterm significance="preferred"><primary>Types</primary><secondary>WINGRAVITY</secondary></indexterm></entry>
d436 1
a436 1
      <entry>BOOL<indexterm significance="preferred"><primary>Types</primary><secondary>BOOL</secondary></indexterm></entry>
d443 1
a443 1
      <entry>EVENT<indexterm significance="preferred"><primary>Types</primary><secondary>EVENT</secondary></indexterm></entry>
d473 1
a473 1
      <entry>POINTEREVENT<indexterm significance="preferred"><primary>Types</primary><secondary>POINTEREVENT</secondary></indexterm></entry>
d491 1
a491 1
      <entry>DEVICEEVENT<indexterm significance="preferred"><primary>Types</primary><secondary>DEVICEEVENT</secondary></indexterm></entry>
d507 1
a507 1
      <entry>KEYSYM<indexterm significance="preferred"><primary>Types</primary><secondary>KEYSYM</secondary></indexterm></entry>
d511 1
a511 1
      <entry>KEYCODE<indexterm significance="preferred"><primary>Types</primary><secondary>KEYCODE</secondary></indexterm></entry>
d515 1
a515 1
      <entry>BUTTON<indexterm significance="preferred"><primary>Types</primary><secondary>BUTTON</secondary></indexterm></entry>
d519 1
a519 1
      <entry>KEYMASK<indexterm significance="preferred"><primary>Types</primary><secondary>KEYMASK</secondary></indexterm></entry>
d532 1
a532 1
      <entry>BUTMASK<indexterm significance="preferred"><primary>Types</primary><secondary>BUTMASK</secondary></indexterm></entry>
d542 1
a542 1
      <entry>KEYBUTMASK<indexterm significance="preferred"><primary>Types</primary><secondary>KEYBUTMASK</secondary></indexterm></entry>
d546 1
a546 1
      <entry>STRING8<indexterm significance="preferred"><primary>Types</primary><secondary>STRING8</secondary></indexterm></entry>
d550 1
a550 1
      <entry>STRING16<indexterm significance="preferred"><primary>Types</primary><secondary>STRING16</secondary></indexterm></entry>
d554 1
a554 1
      <entry>CHAR2B<indexterm significance="preferred"><primary>Types</primary><secondary>CHAR2B</secondary></indexterm></entry>
d558 1
a558 1
      <entry>POINT<indexterm significance="preferred"><primary>Types</primary><secondary>POINT</secondary></indexterm></entry>
d562 1
a562 1
      <entry>RECTANGLE<indexterm significance="preferred"><primary>Types</primary><secondary>RECTANGLE</secondary></indexterm></entry>
d569 1
a569 1
      <entry>ARC<indexterm significance="preferred"><primary>Types</primary><secondary>ARC</secondary></indexterm></entry>
d577 1
a577 1
      <entry>HOST<indexterm significance="preferred"><primary>Types</primary><secondary>HOST</secondary></indexterm></entry>
d657 1
a657 1
      <entry><emphasis role='bold'>Access</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Access</secondary></indexterm></entry>
d671 1
a671 1
      <entry><emphasis role='bold'>Alloc</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Alloc</secondary></indexterm></entry>
d688 1
a688 1
      <entry><emphasis role='bold'>Atom</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Atom</secondary></indexterm></entry>
d694 1
a694 1
      <entry><emphasis role='bold'>Colormap</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Colormap</secondary></indexterm></entry>
d700 1
a700 1
      <entry><emphasis role='bold'>Cursor</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Cursor</secondary></indexterm></entry>
d706 1
a706 1
      <entry><emphasis role='bold'>Drawable</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Drawable</secondary></indexterm></entry>
d713 1
a713 1
      <entry><emphasis role='bold'>Font</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Font</secondary></indexterm></entry>
d721 1
a721 1
      <entry><emphasis role='bold'>GContext</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>GContext</secondary></indexterm></entry>
d727 1
a727 1
      <entry><emphasis role='bold'>IDChoice</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>IDChoice</secondary></indexterm></entry>
d734 1
a734 1
      <entry><emphasis role='bold'>Implementation</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Implementation</secondary></indexterm></entry>
d744 1
a744 1
      <entry><emphasis role='bold'>Length</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Length</secondary></indexterm></entry>
d753 1
a753 1
      <entry><emphasis role='bold'>Match</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Match</secondary></indexterm></entry>
d765 1
a765 1
      <entry><emphasis role='bold'>Name</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Name</secondary></indexterm></entry>
d771 1
a771 1
      <entry><emphasis role='bold'>Pixmap</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Pixmap</secondary></indexterm></entry>
d777 1
a777 1
      <entry><emphasis role='bold'>Request</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Request</secondary></indexterm></entry>
d783 1
a783 1
      <entry><emphasis role='bold'>Value</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Value</secondary></indexterm></entry>
d793 1
a793 1
      <entry><emphasis role='bold'>Window</emphasis><indexterm significance="preferred"><primary>Error Codes</primary><secondary>Window</secondary></indexterm></entry>
d817 1
a817 1
<emphasis role='bold'>None &gt;</emphasis>.
d823 1
d827 1
a827 1
<para>
d829 2
a830 1
<indexterm><primary>Types</primary><secondary>KEYCODE</secondary></indexterm>
d838 1
a838 1
<para>
d840 2
a841 1
<indexterm><primary>Types</primary><secondary>KEYSYM</secondary></indexterm>
d854 1
a854 1
<emphasis role='bold'>NoSymbol</emphasis>
d857 4
a860 3
the list "<emphasis remap='I'>K</emphasis> NoSymbol
<emphasis remap='I'>K</emphasis> NoSymbol".
If the list (ignoring trailing NoSymbol entries) is a pair of KEYSYMs
d865 1
a865 1
<emphasis role='bold'>NoSymbol</emphasis>
d869 1
a869 1
<emphasis remap='I'>K1 K2 K3</emphasis> NoSymbol".
d872 1
a872 1
<emphasis role='bold'>VoidSymbol</emphasis>
d882 1
a882 1
<emphasis role='bold'>NoSymbol</emphasis>,
d893 1
a893 1
<para>
d896 1
a896 1
<indexterm><primary>KeyPress</primary></indexterm>
d906 2
a907 2
<indexterm significance="preferred"><primary>modifier</primary><secondary>group</secondary></indexterm>
called the "group modifier".  For any KEYCODE, Group 1 is used when the
d911 1
a911 1
<para>
d914 1
a914 1
<indexterm significance="preferred"><primary>modifier</primary><secondary>Lock</secondary></indexterm>
d930 1
a930 1
<para>
d939 1
a939 1
<indexterm significance="preferred"><primary>modifier</primary><secondary>NumLock</secondary></indexterm>
d1023 1
a1023 1
<para>
d1025 1
a1025 1
<indexterm><primary>Button</primary><secondary>number</secondary></indexterm>
d1036 1
a1037 1
<indexterm><primary>Atom</primary><secondary>predefined</secondary></indexterm>
d1145 1
d1154 1
d1156 1
a1156 1
    <para>
d1159 1
a1159 1
<indexterm><primary>Byte order</primary></indexterm>
d1192 1
a1192 1
    <para>
d1196 1
a1196 1
<indexterm significance="preferred"><primary>Authorization</primary></indexterm>
d1472 1
a1472 1
    <para>
d1477 1
a1477 1
<indexterm><primary>Resource</primary><secondary>ID</secondary></indexterm>
d1500 5
a1504 4
    <para>
A bitmap is represented in scanline order.
<indexterm><primary>Bitmap</primary><secondary>format</secondary></indexterm>
Each scanline is padded to a multiple of bits as given by bitmap-scanline-pad.
d1512 1
d1518 7
a1524 4
    <para>
Pixmap-formats contains one entry for each depth value.
<indexterm><primary>Pixmap</primary><secondary>format</secondary></indexterm>
The entry describes the Z format used to represent images of that depth.
d1559 1
a1559 1
    <para>
d1562 1
a1562 1
<indexterm><primary>Request</primary><secondary>length</secondary></indexterm>
d1573 3
a1575 1
    <para>
d1586 1
a1586 1
    <indexterm><primary>Screen</primary></indexterm>
d1646 2
a1647 1
    <para>
d1668 1
d1679 3
a1681 1
    <para>
d1761 1
a1761 1
    <indexterm significance="preferred"><primary>CreateWindow</primary></indexterm>
d2142 2
a2143 1
<para>
d2279 3
a2281 1
<para>
d2353 1
a2353 1
    <indexterm significance="preferred"><primary>ChangeWindowAttributes</primary></indexterm>
d2473 1
a2473 1
    <indexterm significance="preferred"><primary>GetWindowAttributes</primary></indexterm>
d2597 1
a2597 1
    <indexterm significance="preferred"><primary>DestroyWindow</primary></indexterm>
d2650 1
a2650 1
    <indexterm significance="preferred"><primary>DestroySubwindows</primary></indexterm>
d2684 1
a2684 1
    <indexterm significance="preferred"><primary>ChangeSaveSet</primary></indexterm>
d2735 1
a2735 1
    <indexterm significance="preferred"><primary>ReparentWindow</primary></indexterm>
d2815 2
a2816 1
    <indexterm significance="preferred"><primary>MapWindow</primary></indexterm>
d2873 1
a2873 1
    <indexterm significance="preferred"><primary>MapSubwindows</primary></indexterm>
d2908 1
a2908 1
    <indexterm significance="preferred"><primary>UnmapWindow</primary></indexterm>
d2944 1
a2944 1
    <indexterm significance="preferred"><primary>UnmapSubwindows</primary></indexterm>
d2979 1
a2979 1
    <indexterm significance="preferred"><primary>ConfigureWindow</primary></indexterm>
d3114 4
a3117 1
<para>
d3412 1
a3412 1
    <indexterm significance="preferred"><primary>CirculateWindow</primary></indexterm>
d3472 1
a3472 1
    <indexterm significance="preferred"><primary>GetGeometry</primary></indexterm>
d3542 2
a3543 1
    <indexterm significance="preferred"><primary>QueryTree</primary></indexterm>
d3599 2
a3600 1
    <indexterm significance="preferred"><primary>InternAtom</primary></indexterm>
d3660 1
a3660 1
    <indexterm significance="preferred"><primary>GetAtomName</primary></indexterm>
d3704 2
a3705 1
    <indexterm significance="preferred"><primary>ChangeProperty</primary></indexterm>
d3801 1
a3801 1
    <indexterm significance="preferred"><primary>DeleteProperty</primary></indexterm>
d3842 1
a3842 1
    <indexterm significance="preferred"><primary>GetProperty</primary></indexterm>
d3968 1
a3968 1
    <indexterm significance="preferred"><primary>RotateProperties</primary></indexterm>
d4035 1
a4035 1
    <indexterm significance="preferred"><primary>ListProperties</primary></indexterm>
d4079 2
a4080 1
    <indexterm significance="preferred"><primary>SetSelectionOwner</primary></indexterm>
d4168 1
a4168 1
    <indexterm significance="preferred"><primary>GetSelectionOwner</primary></indexterm>
d4217 1
a4217 1
    <indexterm significance="preferred"><primary>ConvertSelection</primary></indexterm>
d4276 2
a4277 1
    <indexterm significance="preferred"><primary>SendEvent</primary></indexterm>
d4377 3
a4379 1
    <indexterm significance="preferred"><primary>GrabPointer</primary></indexterm>
d4557 1
a4557 1
    <indexterm significance="preferred"><primary>UngrabPointer</primary></indexterm>
d4604 2
a4605 2
    <indexterm significance="preferred"><primary>GrabButton</primary></indexterm>
    <indexterm><primary>Button</primary><secondary>grabbing</secondary></indexterm>
d4676 1
a4676 1
<indexterm><primary>Passive grab</primary><secondary>pointer</secondary></indexterm>
d4741 1
a4741 1
    <indexterm significance="preferred"><primary>UngrabButton</primary></indexterm>
d4795 2
a4796 1
    <indexterm significance="preferred"><primary>ChangeActivePointerGrab</primary></indexterm>
d4848 3
a4850 1
    <indexterm significance="preferred"><primary>GrabKeyboard</primary></indexterm>
d4991 1
a4991 1
    <indexterm significance="preferred"><primary>UngrabKeyboard</primary></indexterm>
d5036 2
a5037 1
    <indexterm significance="preferred"><primary>GrabKey</primary></indexterm>
d5090 1
a5090 1
<indexterm><primary>Passive grab</primary><secondary>keyboard</secondary></indexterm>
d5157 1
a5157 1
    <indexterm significance="preferred"><primary>UngrabKey</primary></indexterm>
d5211 1
a5211 1
    <indexterm significance="preferred"><primary>AllowEvents</primary></indexterm>
d5420 2
a5421 2
    <indexterm significance="preferred"><primary>GrabServer</primary></indexterm>
    <indexterm><primary>Server</primary><secondary>grabbing</secondary></indexterm>
d5430 1
a5430 1
    <indexterm significance="preferred"><primary>UngrabServer</primary></indexterm>
d5439 1
a5439 1
    <indexterm significance="preferred"><primary>QueryPointer</primary></indexterm>
d5520 1
a5520 1
    <indexterm significance="preferred"><primary>GetMotionEvents</primary></indexterm>
d5598 2
a5599 1
    <indexterm significance="preferred"><primary>TranslateCoordinates</primary></indexterm>
d5667 1
a5667 1
    <indexterm significance="preferred"><primary>WarpPointer</primary></indexterm>
d5748 2
a5749 1
    <indexterm significance="preferred"><primary>SetInputFocus</primary></indexterm>
d5859 1
a5859 1
    <indexterm significance="preferred"><primary>GetInputFocus</primary></indexterm>
d5899 1
a5899 1
    <indexterm significance="preferred"><primary>QueryKeymap</primary></indexterm>
d5934 2
a5935 1
    <indexterm significance="preferred"><primary>OpenFont</primary></indexterm>
d5989 1
a5989 1
    <indexterm significance="preferred"><primary>CloseFont</primary></indexterm>
d6022 1
a6022 1
    <indexterm significance="preferred"><primary>QueryFont</primary></indexterm>
d6325 1
a6325 1
    <indexterm significance="preferred"><primary>QueryTextExtents</primary></indexterm>
d6439 1
a6439 1
    <indexterm significance="preferred"><primary>ListFonts</primary></indexterm>
d6492 1
a6492 1
    <indexterm significance="preferred"><primary>ListFontsWithInfo</primary></indexterm>
d6571 1
a6571 1
    <indexterm significance="preferred"><primary>SetFontPath</primary></indexterm>
d6619 1
a6619 1
    <indexterm significance="preferred"><primary>GetFontPath</primary></indexterm>
d6648 1
a6648 1
    <indexterm significance="preferred"><primary>CreatePixmap</primary></indexterm>
d6711 1
a6711 1
    <indexterm significance="preferred"><primary>FreePixmap</primary></indexterm>
d6744 2
a6745 1
    <indexterm significance="preferred"><primary>CreateGC</primary></indexterm>
d6960 2
a6961 1
<para>
d6980 1
a6980 1
<para>
d7095 2
a7096 1
<para>
d7162 1
a7162 1
<para>
d7208 1
a7208 1
<para>
d7265 1
a7265 1
<para>
d7543 2
a7544 1
<para>
d7581 3
a7583 1
<para>
d7782 1
a7782 1
    <indexterm significance="preferred"><primary>ChangeGC</primary></indexterm>
d7846 1
a7846 1
    <indexterm significance="preferred"><primary>CopyGC</primary></indexterm>
d7891 1
a7891 1
    <indexterm significance="preferred"><primary>SetDashes</primary></indexterm>
d7990 1
a7990 1
    <indexterm significance="preferred"><primary>SetClipRectangles</primary></indexterm>
d8086 1
a8086 1
    <indexterm significance="preferred"><primary>FreeGC</primary></indexterm>
d8119 2
a8120 2
    <indexterm significance="preferred"><primary>ClearArea</primary></indexterm>
<informaltable frame='none'>
d8193 1
a8193 1
    <indexterm significance="preferred"><primary>CopyArea</primary></indexterm>
d8289 1
a8289 1
    <indexterm significance="preferred"><primary>CopyPlane</primary></indexterm>
d8371 1
a8371 1
    <indexterm significance="preferred"><primary>PolyPoint</primary></indexterm>
d8434 2
a8435 1
    <indexterm significance="preferred"><primary>PolyLine</primary></indexterm>
d8524 1
a8524 1
    <indexterm significance="preferred"><primary>PolySegment</primary></indexterm>
d8598 1
a8598 1
    <indexterm significance="preferred"><primary>PolyRectangle</primary></indexterm>
d8669 1
a8669 1
    <indexterm significance="preferred"><primary>PolyArc</primary></indexterm>
d8843 1
a8843 1
    <indexterm significance="preferred"><primary>FillPoly</primary></indexterm>
d8954 1
a8954 1
    <indexterm significance="preferred"><primary>PolyFillRectangle</primary></indexterm>
d9022 1
a9022 1
    <indexterm significance="preferred"><primary>PolyFillArc</primary></indexterm>
d9114 1
a9114 1
    <indexterm significance="preferred"><primary>PutImage</primary></indexterm>
d9240 1
a9240 1
    <indexterm significance="preferred"><primary>GetImage</primary></indexterm>
d9369 1
a9369 1
    <indexterm significance="preferred"><primary>PolyText8</primary></indexterm>
d9482 1
a9482 1
    <indexterm significance="preferred"><primary>PolyText16</primary></indexterm>
d9569 1
a9569 1
    <indexterm significance="preferred"><primary>ImageText8</primary></indexterm>
d9659 1
a9659 1
    <indexterm significance="preferred"><primary>ImageText16</primary></indexterm>
d9714 2
a9715 1
    <indexterm significance="preferred"><primary>CreateColormap</primary></indexterm>
d9823 1
a9823 1
    <indexterm significance="preferred"><primary>FreeColormap</primary></indexterm>
d9874 1
a9874 1
    <indexterm significance="preferred"><primary>CopyColormapAndFree</primary></indexterm>
d9934 1
a9934 1
    <indexterm significance="preferred"><primary>InstallColormap</primary></indexterm>
d10004 1
a10004 1
    <indexterm significance="preferred"><primary>UninstallColormap</primary></indexterm>
d10054 1
a10054 1
    <indexterm significance="preferred"><primary>ListInstalledColormaps</primary></indexterm>
d10103 1
a10103 1
    <indexterm significance="preferred"><primary>AllocColor</primary></indexterm>
d10162 1
a10162 1
    <indexterm significance="preferred"><primary>AllocNamedColor</primary></indexterm>
d10231 1
a10231 1
    <indexterm significance="preferred"><primary>AllocColorCells</primary></indexterm>
d10314 1
a10314 1
    <indexterm significance="preferred"><primary>AllocColorPlanes</primary></indexterm>
d10405 1
a10405 1
    <indexterm significance="preferred"><primary>FreeColors</primary></indexterm>
d10486 1
a10486 1
    <indexterm significance="preferred"><primary>StoreColors</primary></indexterm>
d10572 1
a10572 1
    <indexterm significance="preferred"><primary>StoreNamedColor</primary></indexterm>
d10633 1
a10633 1
    <indexterm significance="preferred"><primary>QueryColors</primary></indexterm>
d10704 1
a10704 1
    <indexterm significance="preferred"><primary>LookupColor</primary></indexterm>
d10764 2
a10765 1
    <indexterm significance="preferred"><primary>CreateCursor</primary></indexterm>
d10864 1
a10864 1
    <indexterm significance="preferred"><primary>CreateGlyphCursor</primary></indexterm>
d10952 1
a10952 1
    <indexterm significance="preferred"><primary>FreeCursor</primary></indexterm>
d10985 1
a10985 1
    <indexterm significance="preferred"><primary>RecolorCursor</primary></indexterm>
d11029 1
a11029 1
    <indexterm significance="preferred"><primary>QueryBestSize</primary></indexterm>
d11116 2
a11117 1
    <indexterm significance="preferred"><primary>QueryExtension</primary></indexterm>
d11184 2
a11185 1
    <indexterm significance="preferred"><primary>ListExtensions</primary></indexterm>
d11213 2
a11214 1
    <indexterm significance="preferred"><primary>SetModifierMapping</primary></indexterm>
d11321 2
a11322 1
    <indexterm significance="preferred"><primary>GetModifierMapping</primary></indexterm>
d11375 2
a11376 1
    <indexterm significance="preferred"><primary>ChangeKeyboardMapping</primary></indexterm>
d11444 1
a11444 1
<emphasis role='bold'>NoSymbol</emphasis>
d11447 1
a11447 1
<emphasis role='bold'>NoSymbol</emphasis>
d11464 2
a11465 1
    <indexterm significance="preferred"><primary>GetKeyboardMapping</primary></indexterm>
d11545 1
a11545 1
<emphasis role='bold'>NoSymbol</emphasis>
d11552 1
a11552 1
    <indexterm significance="preferred"><primary>ChangeKeyboardControl</primary></indexterm>
d11723 1
a11723 1
    <indexterm significance="preferred"><primary>GetKeyboardControl</primary></indexterm>
d11792 1
a11792 1
    <indexterm significance="preferred"><primary>Bell</primary></indexterm>
d11838 1
a11838 1
    <indexterm significance="preferred"><primary>SetPointerMapping</primary></indexterm>
d11912 1
a11912 1
    <indexterm significance="preferred"><primary>GetPointerMapping</primary></indexterm>
d11946 1
a11946 1
    <indexterm significance="preferred"><primary>ChangePointerControl</primary></indexterm>
d11998 1
a11998 1
    <indexterm significance="preferred"><primary>GetPointerControl</primary></indexterm>
d12032 1
a12032 1
    <indexterm significance="preferred"><primary>SetScreenSaver</primary></indexterm>
d12114 1
a12114 1
    <indexterm significance="preferred"><primary>GetScreenSaver</primary></indexterm>
d12157 1
a12157 1
    <indexterm significance="preferred"><primary>ForceScreenSaver</primary></indexterm>
d12201 1
a12201 1
    <indexterm significance="preferred"><primary>ChangeHosts</primary></indexterm>
d12236 1
a12236 1
<indexterm><primary>Access control list</primary></indexterm>
d12253 1
a12253 1
<para>
d12255 1
a12255 1
<indexterm><primary>Types</primary><secondary>HOST</secondary></indexterm>
d12318 1
a12318 1
    <indexterm significance="preferred"><primary>ListHosts</primary></indexterm>
d12359 1
a12359 1
    <indexterm significance="preferred"><primary>SetAccessControl</primary></indexterm>
d12402 1
a12402 1
    <indexterm significance="preferred"><primary>SetCloseDownMode</primary></indexterm>
d12443 1
a12443 1
    <indexterm significance="preferred"><primary>KillClient</primary></indexterm>
d12490 1
a12490 1
    <indexterm significance="preferred"><primary>NoOperation</primary></indexterm>
d12507 1
d12599 1
d12679 1
a12679 1
    <indexterm significance="preferred"><primary>Input device</primary><secondary>events</secondary></indexterm>
d12686 3
a12688 3
      <entry>
<indexterm significance="preferred"><primary>KeyPress</primary></indexterm>
<emphasis role='bold' id="events:KeyPress">KeyPress</emphasis>
d12692 3
a12694 3
      <entry>
<indexterm significance="preferred"><primary>KeyRelease</primary></indexterm>
<emphasis role='bold' id="events:KeyRelease">KeyRelease</emphasis>
d12698 3
a12700 3
      <entry>
<indexterm significance="preferred"><primary>ButtonPress</primary></indexterm>
<emphasis role='bold' id="events:ButtonPress">ButtonPress</emphasis>
d12704 3
a12706 3
      <entry>
<indexterm significance="preferred"><primary>ButtonRelease</primary></indexterm>
<emphasis role='bold' id="events:ButtonRelease">ButtonRelease</emphasis>
d12710 3
a12712 3
      <entry>
<indexterm significance="preferred"><primary>MotionNotify</primary></indexterm>
<emphasis role='bold' id="events:MotionNotify">MotionNotify</emphasis>
d12768 1
d12770 2
d12884 3
a12886 3
      <entry>
<indexterm significance="preferred"><primary>EnterNotify</primary></indexterm>
<emphasis role='bold' id="events:EnterNotify">EnterNotify</emphasis>
d12890 3
a12892 3
      <entry>
<indexterm significance="preferred"><primary>LeaveNotify</primary></indexterm>
<emphasis role='bold' id="events:LeaveNotify">LeaveNotify</emphasis>
d13240 1
a13240 1
    <indexterm significance="preferred"><primary>Input focus</primary><secondary>events</secondary></indexterm>
d13247 3
a13249 3
      <entry>
<indexterm significance="preferred"><primary>FocusIn</primary></indexterm>
<emphasis role='bold' id="events:FocusIn">FocusIn</emphasis>
d13253 3
a13255 3
      <entry>
<indexterm significance="preferred"><primary>FocusOut</primary></indexterm>
<emphasis role='bold' id="events:FocusOut">FocusOut</emphasis>
d13756 1
a13756 1
    <indexterm significance="preferred"><primary>KeymapNotify</primary></indexterm>
d13790 2
a13791 1
    <indexterm significance="preferred"><primary>Expose</primary></indexterm>
d13898 1
a13898 1
    <indexterm significance="preferred"><primary>GraphicsExposure</primary></indexterm>
d13973 1
a13973 1
    <indexterm significance="preferred"><primary>NoExposure</primary></indexterm>
d14027 1
a14027 1
    <indexterm significance="preferred"><primary>VisibilityNotify</primary></indexterm>
d14120 1
a14120 1
    <indexterm significance="preferred"><primary>CreateNotify</primary></indexterm>
d14170 1
a14170 1
    <indexterm significance="preferred"><primary>DestroyNotify</primary></indexterm>
d14216 1
a14216 1
    <indexterm significance="preferred"><primary>UnmapNotify</primary></indexterm>
d14262 2
a14263 1
    <indexterm significance="preferred"><primary>MapNotify</primary></indexterm>
d14305 1
a14305 1
    <indexterm significance="preferred"><primary>MapRequest</primary></indexterm>
d14339 1
a14339 1
    <indexterm significance="preferred"><primary>ReparentNotify</primary></indexterm>
d14389 1
a14389 1
    <indexterm significance="preferred"><primary>ConfigureNotify</primary></indexterm>
d14456 1
a14456 1
    <indexterm significance="preferred"><primary>GravityNotify</primary></indexterm>
d14500 1
a14500 1
    <indexterm significance="preferred"><primary>ResizeRequest</primary></indexterm>
d14540 1
a14540 1
    <indexterm significance="preferred"><primary>ConfigureRequest</primary></indexterm>
d14614 1
a14614 1
    <indexterm significance="preferred"><primary>CirculateNotify</primary></indexterm>
d14663 1
a14663 1
    <indexterm significance="preferred"><primary>CirculateRequest</primary></indexterm>
d14705 1
a14705 1
    <indexterm significance="preferred"><primary>PropertyNotify</primary></indexterm>
d14772 1
a14772 1
    <indexterm significance="preferred"><primary>SelectionClear</primary></indexterm>
d14817 1
a14817 1
    <indexterm significance="preferred"><primary>SelectionRequest</primary></indexterm>
d14890 1
a14890 1
    <indexterm significance="preferred"><primary>SelectionNotify</primary></indexterm>
d14945 1
a14945 1
    <indexterm significance="preferred"><primary>ColormapNotify</primary></indexterm>
d15002 1
a15002 1
    <indexterm significance="preferred"><primary>MappingNotify</primary></indexterm>
d15054 1
a15054 1
    <indexterm significance="preferred"><primary>ClientMessage</primary></indexterm>
@


1.1
log
@Update to xproto 7.0.19. No functional change.
This mostly adds the new docbook xml docs to the source tree.
Formatting it will be handled later.
@
text
@d78 10
a87 10
<title>Protocol Formats</title>
<!-- .XS -->
<!-- (SN Protocol Formats -->
<!-- .XE -->
<!-- .SH -->
<para>
<emphasis role="bold">Request Format</emphasis>
</para>
<para>
Every request contains an 8-bit major opcode and a 16-bit length field
d99 1
d101 2
a102 1
so extension requests typically have an additional minor opcode encoded
d104 1
d107 3
a109 1
Every request on a given connection is implicitly assigned a sequence number,
d111 9
a119 6
</para>
<para>
<emphasis role="bold">Reply Format</emphasis>
</para>
<para>
Every reply contains a 32-bit length field expressed in units of four bytes.
d125 7
a131 6
</para>
<!-- .SH -->
<para>
<emphasis role="bold">Error Format</emphasis>
</para>
<para>
d135 2
d139 1
a139 1
For the following errors (see section 4),
d158 2
a159 1
</para>
d161 5
a165 6
<para>
<emphasis role="bold">Event Format</emphasis>
</para>
<para>
<!-- .LP -->
Events are 32 bytes long.
d169 1
a169 1
<emphasis role='bold'>SendEvent </emphasis>
d173 2
d176 1
a176 1
<emphasis role='bold'>KeymapNotify ) </emphasis>
d180 2
a181 1
</para>
d207 1
a207 1
<emphasis role='bold'>AlternativeValues </emphasis>
d213 2
a214 1
Requests in section 9 are described in the following format: <!-- xref -->
d224 1
a224 1
   -&gt;
d237 1
a237 1
If no -&gt; is present in the description,
d240 1
a240 1
If -&gt;+ is used,
d246 3
a248 2
Events in section 11 are described in the following format:
    </para> <!-- xref -->
d315 1
a315 1
<emphasis role='bold'>Value </emphasis>
d621 1
a621 1
<emphasis role='bold'>ChangeHosts </emphasis>
d636 6
a641 6
<emphasis role='bold'>ChangeWindowAttributes</emphasis>
<emphasis role='bold'>ChangeGC</emphasis>,
<emphasis role='bold'>PolyText8</emphasis>,
<emphasis role='bold'>PolyText16</emphasis>,
<emphasis role='bold'>FreeColors</emphasis>,
<emphasis role='bold'>StoreColors</emphasis>
d643 1
a643 1
<emphasis role='bold'>ChangeKeyboardControl</emphasis>.
d761 1
a761 1
<emphasis role='bold'>InputOnly </emphasis>
d833 1
d843 1
d866 1
a866 1
<emphasis role='bold'>NoSymbol </emphasis>
d873 1
a873 1
<emphasis role='bold'>VoidSymbol </emphasis>
d883 1
a883 1
<emphasis role='bold'>NoSymbol , </emphasis>
d896 2
a897 1
<emphasis role='bold'>KeyPress </emphasis>
d903 1
a903 1
<emphasis role='bold'>Mod1 </emphasis>
d905 1
a905 1
<emphasis role='bold'>Mod5 . </emphasis>
d907 1
d914 2
a915 1
<emphasis role='bold'>Lock </emphasis>
d918 1
a918 1
<emphasis role='bold'>Lock </emphasis>
d920 1
a920 1
<emphasis role='bold'>Lock </emphasis>
d924 1
a924 1
<emphasis role='bold'>Lock </emphasis>
d926 1
a926 1
<emphasis role='bold'>Lock </emphasis>
d936 1
a936 1
<emphasis role='bold'>Mod1 </emphasis>
d938 1
a938 1
<emphasis role='bold'>Mod5 . </emphasis>
d940 1
d958 1
a958 1
<emphasis role='bold'>Shift </emphasis>
d960 1
a960 1
<emphasis role='bold'>Lock </emphasis>
d969 1
a969 1
<emphasis role='bold'>Shift </emphasis>
d971 1
a971 1
<emphasis role='bold'>Lock </emphasis>
d979 1
a979 1
<emphasis role='bold'>Shift </emphasis>
d981 1
a981 1
<emphasis role='bold'>Lock </emphasis>
d991 1
a991 1
<emphasis role='bold'>Shift </emphasis>
d993 1
a993 1
<emphasis role='bold'>Lock </emphasis>
d1003 1
a1003 1
<emphasis role='bold'>Shift </emphasis>
d1005 1
a1005 1
<emphasis role='bold'>Lock </emphasis>
d1026 1
d1038 1
d1040 1
a1040 1
<emphasis role='bold'>InternAtom </emphasis>
d1047 2
a1048 2
<emphasis remap='I'>Inter-Client Communication Conventions Manual</emphasis>
and the <emphasis remap='I'>X Logical Font Description Conventions</emphasis>.
d1056 70
a1125 124
<informaltable frame="none">
  <tgroup cols='3' align='left'>
  <colspec colname='c1' colsep="0"/>
  <colspec colname='c2' colsep="0"/>
  <colspec colname='c3' colsep="0"/>
  <tbody>
    <row rowsep="0">
      <entry>ARC</entry>
      <entry>ITALIC_ANGLE</entry>
      <entry>STRING</entry>
    </row>
    <row rowsep="0">
      <entry>ATOM</entry>
      <entry>MAX_SPACE</entry>
      <entry>SUBSCRIPT_X</entry>
    </row>
    <row rowsep="0">
      <entry>BITMAP</entry>
      <entry>MIN_SPACE</entry>
      <entry>SUBSCRIPT_Y</entry>
    </row>
    <row rowsep="0">
      <entry>CAP_HEIGHT</entry>
      <entry>NORM_SPACE</entry>
      <entry>SUPERSCRIPT_X</entry>
    </row>
    <row rowsep="0">
      <entry>CARDINAL</entry>
      <entry>NOTICE</entry>
      <entry>SUPERSCRIPT_Y</entry>
    </row>
    <row rowsep="0">
      <entry>COLORMAP</entry>
      <entry>PIXMAP</entry>
      <entry>UNDERLINE_POSITION</entry>
    </row>
    <row rowsep="0">
      <entry>COPYRIGHT</entry>
      <entry>POINT</entry>
      <entry>UNDERLINE_THICKNESS</entry>
    </row>
    <row rowsep="0">
      <entry>CURSOR</entry>
      <entry>POINT_SIZE</entry>
      <entry>VISUALID</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER0</entry>
      <entry>PRIMARY</entry>
      <entry>WEIGHT</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER1</entry>
      <entry>QUAD_WIDTH</entry>
      <entry>WINDOW</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER2</entry>
      <entry>RECTANGLE</entry>
      <entry>WM_CLASS</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER3</entry>
      <entry>RESOLUTION</entry>
      <entry>WM_CLIENT_MACHINE</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER4</entry>
      <entry>RESOURCE_MANAGER</entry>
      <entry>WM_COMMAND</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER5</entry>
      <entry>RGB_BEST_MAP</entry>
      <entry>WM_HINTS</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER6</entry>
      <entry>RGB_BLUE_MAP</entry>
      <entry>WM_ICON_NAME</entry>
    </row>
    <row rowsep="0">
      <entry>CUT_BUFFER7</entry>
      <entry>RGB_COLOR_MAP</entry>
      <entry>WM_ICON_SIZE</entry>
    </row>
    <row rowsep="0">
      <entry>DRAWABLE</entry>
      <entry>RGB_DEFAULT_MAP</entry>
      <entry>WM_NAME</entry>
    </row>
    <row rowsep="0">
      <entry>END_SPACE</entry>
      <entry>RGB_GRAY_MAP</entry>
      <entry>WM_NORMAL_HINTS</entry>
    </row>
    <row rowsep="0">
      <entry>FAMILY_NAME</entry>
      <entry>RGB_GREEN_MAP</entry>
      <entry>WM_SIZE_HINTS</entry>
    </row>
    <row rowsep="0">
      <entry>FONT</entry>
      <entry>RGB_RED_MAP</entry>
      <entry>WM_TRANSIENT_FOR</entry>
    </row>
    <row rowsep="0">
      <entry>FONT_NAME</entry>
      <entry>SECONDARY</entry>
      <entry>WM_ZOOM_HINTS</entry>
    </row>
    <row rowsep="0">
      <entry>FULL_NAME</entry>
      <entry>STRIKEOUT_ASCENT</entry>
      <entry>X_HEIGHT</entry>
    </row>
    <row rowsep="0">
      <entry>INTEGER</entry>
      <entry></entry>
      <entry>STRIKEOUT_DESCENT</entry>
    </row>
  </tbody>
  </tgroup>
</informaltable>
d1145 3
a1147 5
<title>Connection Setup</title>
<!-- .XS -->
<!-- (SN Connection Setup -->
<!-- .XE -->
<para>
d1150 1
a1150 1
</para>
d1152 2
a1153 3
<para>
<emphasis role="bold">Connection Initiation</emphasis>
</para>
d1155 1
a1155 2
<para>
<!-- .LP -->
d1158 1
d1168 2
a1169 2
</para>
<para>
d1172 2
a1173 2
</para>
<blockquote>
d1186 2
a1187 2
</blockquote>
<para>
d1190 2
a1191 2
</para>
<para>
d1195 1
d1203 5
a1207 4
</para>
<para>
<emphasis role="bold">Server Response</emphasis>
</para>
d1209 1
a1209 1
<para>
d1211 1
a1211 1
</para>
d1224 1
a1224 1
<para>
d1229 1
a1229 1
</para>
d1243 1
a1243 1
<para>
d1248 1
a1248 1
</para>
d1256 1
a1256 1
<para>
d1264 1
a1264 1
</para>
d1266 1
a1266 1
<para>
d1269 1
a1269 1
<emphasis role='bold'>Success ,</emphasis>
d1271 1
a1271 1
</para>
d1442 1
d1444 2
a1445 3
<para>
Server Information
</para>
d1447 1
a1447 1
<para>
d1449 1
a1449 1
</para>
d1451 1
a1451 2
<para>
<!-- .LP -->
d1465 2
a1466 3
</para>
<para>
<!-- .LP -->
d1470 2
a1471 3
</para>
<para>
<!-- .LP -->
d1476 1
d1490 2
a1491 3
</para>
<para>
<!-- .LP -->
d1498 2
a1499 3
</para>
<para>
<!-- .LP -->
d1501 1
d1514 2
a1515 3
</para>
<para>
<!-- .LP -->
d1517 1
d1536 2
a1537 3
</para>
<para>
<!-- .LP -->
d1541 2
a1542 3
</para>
<para>
<!-- .LP -->
d1545 1
a1545 1
<emphasis role='bold'>MotionNotify </emphasis>
d1548 1
a1548 1
<emphasis role='bold'>GetMotionEvents </emphasis>
d1552 2
a1553 3
</para>
<para>
<!-- .LP -->
d1556 1
d1560 1
a1560 1
<emphasis role='bold'>Length </emphasis>
d1566 2
a1567 3
</para>
<para>
<!-- .LP -->
d1573 8
a1580 5
</para>
<para>
<emphasis role="bold">Screen Information</emphasis>
</para>
<para>
d1582 1
a1582 1
</para>
d1584 1
a1584 2
<para>
<!-- .LP -->
d1593 1
a1593 1
<emphasis role='bold'>InputOnly </emphasis>
d1595 2
a1596 3
</para>
<para>
<!-- .LP -->
d1602 1
a1602 1
<emphasis role='bold'>InputOutput .</emphasis>
d1605 2
a1606 3
</para>
<para>
<!-- .LP -->
d1611 2
a1612 3
</para>
<para>
<!-- .LP -->
d1620 2
a1621 3
</para>
<para>
<!-- .LP -->
d1625 2
a1626 3
</para>
<para>
<!-- .LP -->
d1629 1
a1629 1
<emphasis role='bold'>InstallColormap ), </emphasis>
d1637 2
a1638 3
</para>
<para>
<!-- .LP -->
d1643 1
a1643 1
<emphasis role='bold'>True , </emphasis>
d1645 1
a1645 1
<emphasis role='bold'>CreateWindow </emphasis>
d1647 1
a1647 1
<emphasis role='bold'>ChangeWindowAttributes , </emphasis>
d1649 2
a1650 3
</para>
<para>
<!-- .LP -->
d1652 1
a1652 1
<emphasis role='bold'>GetWindowAttributes </emphasis>
d1654 7
a1660 7
<!-- .SH -->
</para>
<para>
<emphasis role="bold">Visual Information</emphasis>
</para>
<para>
<!-- .LP -->
d1662 3
a1664 3
</para>
<para>
<!-- .LP -->
d1667 3
a1669 3
</para>
<para>
<!-- .LP -->
d1671 1
a1671 1
<emphasis role='bold'>PseudoColor , </emphasis>
d1674 1
a1674 1
<emphasis role='bold'>GrayScale </emphasis>
d1676 1
a1676 1
<emphasis role='bold'>PseudoColor </emphasis>
d1681 1
a1681 1
<emphasis role='bold'>DirectColor , </emphasis>
d1685 1
a1685 1
<emphasis role='bold'>TrueColor </emphasis>
d1687 1
a1687 1
<emphasis role='bold'>DirectColor </emphasis>
d1691 1
a1691 1
<emphasis role='bold'>StaticColor </emphasis>
d1693 1
a1693 1
<emphasis role='bold'>PseudoColor </emphasis>
d1696 1
a1696 1
<emphasis role='bold'>StaticGray </emphasis>
d1698 1
a1698 1
<emphasis role='bold'>StaticColor </emphasis>
d1701 1
a1701 1
<emphasis role='bold'>StaticGray </emphasis>
d1703 3
a1705 3
</para>
<para>
<!-- .LP -->
d1707 1
a1707 1
<emphasis role='bold'>DirectColor </emphasis>
d1709 1
a1709 1
<emphasis role='bold'>TrueColor .</emphasis>
d1712 3
a1714 3
</para>
<para>
<!-- .LP -->
d1723 3
a1725 4
</para>
<para>
<!-- .LP -->
<!-- .RS -->
d1729 3
a1731 4
<!-- .RE -->
</para>
<para>
<!-- .LP -->
d1736 1
a1736 1
<emphasis role='bold'>DirectColor </emphasis>
d1738 1
a1738 1
<emphasis role='bold'>TrueColor , </emphasis>
d1741 3
a1744 2
</para>
</chapter>
d1746 4
a1749 8
<title>Requests</title>
<!-- .XS -->
<!-- \*(SN Requests -->
<!-- .XE -->
<para id="requests:CreateWindow">
<emphasis role='bold'>CreateWindow</emphasis>
<indexterm significance="preferred"><primary>CreateWindow</primary></indexterm>
</para>
d1763 3
a1765 3
<emphasis role='bold'>{ InputOutput , </emphasis>
<emphasis role='bold'>InputOnly , </emphasis>
<emphasis role='bold'>CopyFromParent }</emphasis>
d1804 7
a1810 7
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Colormap , </emphasis>
<emphasis role='bold'>Cursor , </emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Pixmap , </emphasis>
<emphasis role='bold'>Value , </emphasis>
d1825 1
a1825 1
<emphasis role='bold'>CopyFromParent </emphasis>
d1828 1
a1828 1
<emphasis role='bold'>InputOutput </emphasis>
d1830 1
a1830 1
<emphasis role='bold'>CopyFromParent </emphasis>
d1833 1
a1833 1
<emphasis role='bold'>CopyFromParent </emphasis>
d1836 1
a1836 1
<emphasis role='bold'>InputOutput ,</emphasis>
d1839 1
a1839 1
<emphasis role='bold'>Match </emphasis>
d1843 1
a1843 1
<emphasis role='bold'>InputOnly </emphasis>
d1845 1
a1845 1
<emphasis role='bold'>Match </emphasis>
d1848 1
a1848 1
<emphasis role='bold'>InputOnly ,</emphasis>
d1850 1
a1850 1
<emphasis role='bold'>Match </emphasis>
d1852 1
a1852 1
<emphasis role='bold'>Match </emphasis>
d1858 1
a1858 1
<emphasis role='bold'>InputOnly </emphasis>
d1861 1
a1861 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d1864 1
a1864 1
<emphasis role='bold'>InputOnly </emphasis>
d1867 1
a1867 1
<emphasis role='bold'>InputOnly </emphasis>
d1869 1
a1869 1
<emphasis role='bold'>InputOutput </emphasis>
d1890 1
a1890 1
<emphasis role='bold'>Value </emphasis>
d1893 1
a1893 1
<emphasis role='bold'>InputOnly </emphasis>
d1895 1
a1895 1
<emphasis role='bold'>Match </emphasis>
d1921 1
a1921 1
<emphasis role='bold'>None </emphasis>
d2125 1
a2125 1
<emphasis role='bold'>Match </emphasis>
d2127 1
a2127 1
<emphasis role='bold'>InputOnly </emphasis>
d2135 1
a2135 1
<emphasis role='bold'>Match </emphasis>
d2139 1
a2139 1
<emphasis role='bold'>None </emphasis>
d2142 1
a2142 1
<emphasis role='bold'>ParentRelative </emphasis>
d2145 1
a2145 1
<emphasis role='bold'>Match </emphasis>
d2148 1
a2148 1
<emphasis role='bold'>None , </emphasis>
d2150 1
a2150 1
<emphasis role='bold'>None .</emphasis>
d2161 1
a2161 1
<emphasis role='bold'>ParentRelative </emphasis>
d2172 1
a2172 1
<emphasis role='bold'>None .</emphasis>
d2174 1
a2174 1
<emphasis role='bold'>None , </emphasis>
d2180 1
a2180 1
<emphasis role='bold'>None .</emphasis>
d2188 1
a2188 1
<emphasis role='bold'>Match </emphasis>
d2193 1
a2193 1
<emphasis role='bold'>CopyFromParent </emphasis>
d2197 1
a2197 1
<emphasis role='bold'>Match </emphasis>
d2215 1
a2215 1
<emphasis role='bold'>ConfigureWindow </emphasis>
d2220 1
a2220 1
<emphasis role='bold'>WhenMapped </emphasis>
d2224 1
a2224 1
<emphasis role='bold'>Always </emphasis>
d2230 1
a2230 1
<emphasis role='bold'>NotUseful </emphasis>
d2244 1
a2244 1
<emphasis role='bold'>True , </emphasis>
d2285 1
a2285 1
<emphasis role='bold'>InstallColormap </emphasis>
d2291 1
a2291 1
<emphasis role='bold'>CopyFromParent </emphasis>
d2296 1
a2296 1
<emphasis role='bold'>Match </emphasis>
d2298 1
a2298 1
<emphasis role='bold'>None </emphasis>
d2300 1
a2300 1
<emphasis role='bold'>Match </emphasis>
d2303 2
a2304 3
<emphasis role='bold'>None ,</emphasis>
see
<emphasis role='bold'>FreeColormap </emphasis>
d2314 1
a2314 1
<emphasis role='bold'>None </emphasis>
d2322 1
a2322 1
<emphasis role='bold'>CreateNotify </emphasis>
d2335 4
a2338 4
<para id="requests:ChangeWindowAttributes">
<emphasis role='bold'>ChangeWindowAttributes</emphasis>
<indexterm significance="preferred"><primary>ChangeWindowAttributes</primary></indexterm>
</para>
d2364 6
a2369 6
<emphasis role='bold'>Access ,</emphasis>
<emphasis role='bold'>Colormap , </emphasis>
<emphasis role='bold'>Cursor , </emphasis>
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Pixmap , </emphasis>
<emphasis role='bold'>Value , </emphasis>
d2382 1
a2382 1
<emphasis role='bold'>CreateWindow .</emphasis>
d2395 1
a2395 1
<emphasis role='bold'>None </emphasis>
d2397 1
a2397 1
<emphasis role='bold'>ParentRelative </emphasis>
d2400 1
a2400 1
<emphasis role='bold'>CopyFromParent </emphasis>
d2409 1
a2409 1
<emphasis role='bold'>WhenMapped </emphasis>
d2411 1
a2411 1
<emphasis role='bold'>Always </emphasis>
d2421 1
a2421 1
<emphasis role='bold'>SubstructureRedirect , </emphasis>
d2423 1
a2423 1
<emphasis role='bold'>ResizeRedirect , </emphasis>
d2425 1
a2425 1
<emphasis role='bold'>ButtonPress .</emphasis>
d2427 1
a2427 1
<emphasis role='bold'>Access </emphasis>
d2437 1
a2437 1
<emphasis role='bold'>ColormapNotify </emphasis>
d2441 1
a2441 1
<emphasis role='bold'>InstallColormap </emphasis>
d2446 1
a2446 1
<emphasis role='bold'>None </emphasis>
d2455 4
a2458 4
<para id="requests:GetWindowAttributes">
<emphasis role='bold'>GetWindowAttributes</emphasis>
<indexterm significance="preferred"><primary>GetWindowAttributes</primary></indexterm>
</para>
d2472 1
a2472 1
   ->
d2484 2
a2485 2
<emphasis role='bold'>{ InputOutput , </emphasis>
<emphasis role='bold'>InputOnly }</emphasis>
d2501 3
a2503 3
<emphasis role='bold'>{ NotUseful , </emphasis>
<emphasis role='bold'>WhenMapped , </emphasis>
<emphasis role='bold'>Always }</emphasis>
d2535 3
a2537 3
<emphasis role='bold'>{ Unmapped , </emphasis>
<emphasis role='bold'>Unviewable , </emphasis>
<emphasis role='bold'>Viewable }</emphasis>
d2572 1
a2572 1
<emphasis role='bold'>Unviewable </emphasis>
d2579 4
a2582 4
<para id="requests:DestroyWindow">
<emphasis role='bold'>DestroyWindow</emphasis>
<indexterm significance="preferred"><primary>DestroyWindow</primary></indexterm>
</para>
d2610 1
a2610 1
<emphasis role='bold'>UnmapWindow </emphasis>
d2613 1
a2613 1
<emphasis role='bold'>DestroyNotify </emphasis>
d2616 1
a2616 1
<emphasis role='bold'>DestroyNotify </emphasis>
d2618 1
a2618 1
<emphasis role='bold'>DestroyNotify </emphasis>
d2632 4
a2635 4
<para id="requests:DestroySubwindows">
<emphasis role='bold'>DestroySubwindows</emphasis>
<indexterm significance="preferred"><primary>DestroySubwindows</primary></indexterm>
</para>
d2662 1
a2662 1
<emphasis role='bold'>DestroyWindow </emphasis>
d2666 4
a2669 4
<para id="requests:ChangeSaveSet">
<emphasis role='bold'>ChangeSaveSet</emphasis>
<indexterm significance="preferred"><primary>ChangeSaveSet</primary></indexterm>
</para>
d2683 2
a2684 2
<emphasis role='bold'>{ Insert , </emphasis>
<emphasis role='bold'>Delete }</emphasis>
d2692 2
a2693 2
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Value ,</emphasis>
d2707 1
a2707 1
<emphasis role='bold'>Match </emphasis>
d2710 1
a2710 1
see section 10.
d2717 4
a2720 4
<para id="requests:ReparentWindow">
<emphasis role='bold'>ReparentWindow</emphasis>
<indexterm significance="preferred"><primary>ReparentWindow</primary></indexterm>
</para>
d2741 1
a2741 1
<emphasis role='bold'>Match ,</emphasis>
d2754 1
a2754 1
<emphasis role='bold'>UnmapWindow </emphasis>
d2764 1
a2764 1
<emphasis role='bold'>ReparentNotify </emphasis>
d2768 1
a2768 1
<emphasis role='bold'>True </emphasis>
d2771 1
a2771 1
<emphasis role='bold'>MapWindow </emphasis>
d2781 1
a2781 1
<emphasis role='bold'>Match </emphasis>
d2789 1
a2789 1
<emphasis role='bold'>InputOnly , </emphasis>
d2793 1
a2793 1
<emphasis role='bold'>ParentRelative </emphasis>
d2797 4
a2800 4
<para id="requests:MapWindow">
<emphasis role='bold'>MapWindow</emphasis>
<indexterm significance="preferred"><primary>MapWindow</primary></indexterm>
</para>
d2830 1
a2830 1
<emphasis role='bold'>False </emphasis>
d2832 1
a2832 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d2834 1
a2834 1
<emphasis role='bold'>MapRequest </emphasis>
d2838 1
a2838 1
<emphasis role='bold'>MapNotify </emphasis>
d2854 4
a2857 4
<para id="requests:MapSubwindows">
<emphasis role='bold'>MapSubwindows</emphasis>
<indexterm significance="preferred"><primary>MapSubwindows</primary></indexterm>
</para>
d2884 1
a2884 1
<emphasis role='bold'>MapWindow </emphasis>
d2889 4
a2892 4
<para id="requests:UnmapWindow">
<emphasis role='bold'>UnmapWindow</emphasis>
<indexterm significance="preferred"><primary>UnmapWindow</primary></indexterm>
</para>
d2920 1
a2920 1
<emphasis role='bold'>UnmapNotify </emphasis>
d2925 4
a2928 4
<para id="requests:UnmapSubwindows">
<emphasis role='bold'>UnmapSubwindows</emphasis>
<indexterm significance="preferred"><primary>UnmapSubwindows</primary></indexterm>
</para>
d2955 1
a2955 1
<emphasis role='bold'>UnmapWindow </emphasis>
d2960 4
a2963 4
<para id="requests:ConfigureWindow">
<emphasis role='bold'>ConfigureWindow</emphasis>
<indexterm significance="preferred"><primary>ConfigureWindow</primary></indexterm>
</para>
d2989 2
a2990 2
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Value ,</emphasis>
d3060 1
a3060 1
<emphasis role='bold'>Value </emphasis>
d3067 1
a3067 1
<emphasis role='bold'>Match </emphasis>
d3069 1
a3069 1
<emphasis role='bold'>InputOnly </emphasis>
d3074 1
a3074 1
<emphasis role='bold'>False </emphasis>
d3076 1
a3076 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d3078 1
a3078 1
<emphasis role='bold'>ConfigureRequest </emphasis>
d3084 1
a3084 1
<emphasis role='bold'>ResizeRedirect </emphasis>
d3087 1
a3087 1
<emphasis role='bold'>ResizeRequest </emphasis>
d3091 1
a3091 1
<emphasis role='bold'>ResizeRedirect </emphasis>
d3093 1
a3093 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d3095 1
a3095 1
<emphasis role='bold'>ResizeRedirect </emphasis>
d3101 1
a3101 1
<emphasis role='bold'>ConfigureNotify </emphasis>
d3201 1
a3201 1
<emphasis role='bold'>GravityNotify </emphasis>
d3203 1
a3203 1
<emphasis role='bold'>GravityNotify </emphasis>
d3205 1
a3205 1
<emphasis role='bold'>ConfigureNotify </emphasis>
d3210 1
a3210 1
<emphasis role='bold'>Static </emphasis>
d3219 1
a3219 1
<emphasis role='bold'>Static </emphasis>
d3225 1
a3225 1
<emphasis role='bold'>Forget </emphasis>
d3236 1
a3236 1
<emphasis role='bold'>Forget </emphasis>
d3241 1
a3241 1
<emphasis role='bold'>Unmap </emphasis>
d3243 1
a3243 1
<emphasis role='bold'>NorthWest , </emphasis>
d3246 1
a3246 1
<emphasis role='bold'>UnmapNotify </emphasis>
d3248 1
a3248 1
<emphasis role='bold'>UnmapNotify </emphasis>
d3250 1
a3250 1
<emphasis role='bold'>ConfigureNotify </emphasis>
d3373 1
a3373 1
<emphasis role='bold'>Match </emphasis>
d3382 1
a3382 1
<emphasis role='bold'>Opposite </emphasis>
d3390 4
a3393 4
<para id="requests:CirculateWindow">
<emphasis role='bold'>CirculateWindow</emphasis>
<indexterm significance="preferred"><primary>CirculateWindow</primary></indexterm>
</para>
d3407 2
a3408 2
<emphasis role='bold'>{ RaiseLowest , </emphasis>
<emphasis role='bold'>LowerHighest }</emphasis>
d3416 1
a3416 1
<emphasis role='bold'>Value ,</emphasis>
d3428 1
a3428 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d3430 1
a3430 1
<emphasis role='bold'>CirculateRequest </emphasis>
d3433 1
a3433 1
<emphasis role='bold'>CirculateNotify </emphasis>
d3438 2
a3439 2
<emphasis role='bold'>RaiseLowest , </emphasis>
<emphasis role='bold'>CirculateWindow </emphasis>
d3443 2
a3444 2
<emphasis role='bold'>LowerHighest ,</emphasis>
<emphasis role='bold'>CirculateWindow </emphasis>
d3450 4
a3453 4
<para id="requests:GetGeometry">
<emphasis role='bold'>GetGeometry</emphasis>
<indexterm significance="preferred"><primary>GetGeometry</primary></indexterm>
</para>
d3467 1
a3467 1
   ->
d3516 1
a3516 1
<emphasis role='bold'>InputOnly </emphasis>
d3520 4
a3523 4
<para id="requests:QueryTree">
<emphasis role='bold'>QueryTree</emphasis>
<indexterm significance="preferred"><primary>QueryTree</primary></indexterm>
</para>
d3537 1
a3537 1
   ->
d3576 4
a3579 4
<para id="requests:InternAtom">
<emphasis role='bold'>InternAtom</emphasis>
<indexterm significance="preferred"><primary>InternAtom</primary></indexterm>
</para>
d3598 1
a3598 1
   ->
d3613 1
a3613 1
<emphasis role='bold'>Alloc ,</emphasis>
d3626 1
a3626 1
<emphasis role='bold'>False , </emphasis>
d3633 1
a3633 1
Atoms remain defined until server reset (see section 10).
d3636 4
a3639 4
<para id="requests:GetAtomName">
<emphasis role='bold'>GetAtomName</emphasis>
<indexterm significance="preferred"><primary>GetAtomName</primary></indexterm>
</para>
d3653 1
a3653 1
   ->
d3680 4
a3683 4
<para id="requests:ChangeProperty">
<emphasis role='bold'>ChangeProperty</emphasis>
<indexterm significance="preferred"><primary>ChangeProperty</primary></indexterm>
</para>
d3707 3
a3709 3
<emphasis role='bold'>{ Replace , </emphasis>
<emphasis role='bold'>Prepend , </emphasis>
<emphasis role='bold'>Append }</emphasis>
d3722 4
a3725 4
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Atom , </emphasis>
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Value , </emphasis>
d3744 1
a3744 1
<emphasis role='bold'>Replace , </emphasis>
d3747 1
a3747 1
<emphasis role='bold'>Prepend </emphasis>
d3749 1
a3749 1
<emphasis role='bold'>Append , </emphasis>
d3751 1
a3751 1
<emphasis role='bold'>Match </emphasis>
d3757 1
a3757 1
<emphasis role='bold'>Prepend , </emphasis>
d3759 1
a3759 1
<emphasis role='bold'>Append ,</emphasis>
d3764 1
a3764 1
<emphasis role='bold'>PropertyNotify </emphasis>
d3770 1
a3770 1
or until server reset (see section 10).
d3776 4
a3779 4
<para id="requests:DeleteProperty">
<emphasis role='bold'>DeleteProperty</emphasis>
<indexterm significance="preferred"><primary>DeleteProperty</primary></indexterm>
</para>
d3800 1
a3800 1
<emphasis role='bold'>Atom ,</emphasis>
d3813 1
a3813 1
<emphasis role='bold'>PropertyNotify </emphasis>
d3817 4
a3820 4
<para id="requests:GetProperty">
<emphasis role='bold'>GetProperty</emphasis>
<indexterm significance="preferred"><primary>GetProperty</primary></indexterm>
</para>
d3855 1
a3855 1
   ->
d3885 2
a3886 2
<emphasis role='bold'>Atom , </emphasis>
<emphasis role='bold'>Value ,</emphasis>
d3899 1
a3899 1
<emphasis role='bold'>None , </emphasis>
d3911 1
a3911 1
<emphasis role='bold'>AnyPropertyType </emphasis>
d3916 8
a3923 8
<!-- .DS -->
N = actual length of the stored property in bytes
\ \ \ \ (even if the format is 16 or 32)
I = 4 * long-offset
T = N - I
L = MINIMUM(T, 4 * long-length)
A = N - (I + L)
<!-- .DE -->
d3929 1
a3929 1
<emphasis role='bold'>Value </emphasis>
d3935 1
a3935 1
<emphasis role='bold'>True </emphasis>
d3939 1
a3939 1
<emphasis role='bold'>PropertyNotify </emphasis>
d3943 4
a3946 4
<para id="requests:RotateProperties">
<emphasis role='bold'>RotateProperties</emphasis>
<indexterm significance="preferred"><primary>RotateProperties</primary></indexterm>
</para>
d3972 2
a3973 2
<emphasis role='bold'>Atom , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d3994 1
a3994 1
<emphasis role='bold'>PropertyNotify </emphasis>
d4001 1
a4001 1
<emphasis role='bold'>Match </emphasis>
d4004 1
a4004 1
<emphasis role='bold'>Atom </emphasis>
d4006 1
a4006 1
<emphasis role='bold'>Match </emphasis>
d4010 4
a4013 4
<para id="requests:ListProperties">
<emphasis role='bold'>ListProperties</emphasis>
<indexterm significance="preferred"><primary>ListProperties</primary></indexterm>
</para>
d4027 1
a4027 1
   ->
d4054 4
a4057 4
<para id="requests:SetSelectionOwner">
<emphasis role='bold'>SetSelectionOwner</emphasis>
<indexterm significance="preferred"><primary>SetSelectionOwner</primary></indexterm>
</para>
d4085 1
a4085 1
<emphasis role='bold'>Atom , </emphasis>
d4103 1
a4103 1
<emphasis role='bold'>CurrentTime </emphasis>
d4106 1
a4106 1
<emphasis role='bold'>None , </emphasis>
d4108 1
a4108 1
<emphasis role='bold'>None </emphasis>
d4112 1
a4112 1
<emphasis role='bold'>None ) </emphasis>
d4115 1
a4115 1
<emphasis role='bold'>None , </emphasis>
d4117 1
a4117 1
<emphasis role='bold'>SelectionClear </emphasis>
d4125 1
a4125 1
<emphasis role='bold'>None , </emphasis>
d4131 1
a4131 1
<emphasis role='bold'>GetSelectionOwner </emphasis>
d4133 1
a4133 1
<emphasis role='bold'>SelectionRequest </emphasis>
d4135 1
a4135 1
<emphasis role='bold'>SelectionClear </emphasis>
d4142 4
a4145 4
<para id="requests:GetSelectionOwner">
<emphasis role='bold'>GetSelectionOwner</emphasis>
<indexterm significance="preferred"><primary>GetSelectionOwner</primary></indexterm>
</para>
d4159 1
a4159 1
   ->
d4187 1
a4187 1
<emphasis role='bold'>None </emphasis>
d4191 4
a4194 4
<para id="requests:ConvertSelection">
<emphasis role='bold'>ConvertSelection</emphasis>
<indexterm significance="preferred"><primary>ConvertSelection</primary></indexterm>
</para>
d4227 1
a4227 1
<emphasis role='bold'>Atom , </emphasis>
d4240 1
a4240 1
<emphasis role='bold'>SelectionRequest </emphasis>
d4244 1
a4244 1
<emphasis role='bold'>SelectionNotify </emphasis>
d4246 1
a4246 1
<emphasis role='bold'>None .</emphasis>
d4250 4
a4253 4
<para id="requests:SendEvent">
<emphasis role='bold'>SendEvent</emphasis>
<indexterm significance="preferred"><primary>SendEvent</primary></indexterm>
</para>
d4262 1
a4262 1
<emphasis role='bold'>PointerWindow </emphasis>
d4287 1
a4287 1
<emphasis role='bold'>Value ,</emphasis>
d4299 1
a4299 1
<emphasis role='bold'>PointerWindow </emphasis>
d4303 1
a4303 1
<emphasis role='bold'>InputFocus </emphasis>
d4315 1
a4315 1
<emphasis role='bold'>False , </emphasis>
d4321 1
a4321 1
<emphasis role='bold'>True </emphasis>
d4330 1
a4330 1
<emphasis role='bold'>InputFocus </emphasis>
d4339 1
a4339 1
<emphasis role='bold'>Value </emphasis>
d4350 4
a4353 4
<para id="requests:GrabPointer">
<emphasis role='bold'>GrabPointer</emphasis>
<indexterm significance="preferred"><primary>GrabPointer</primary></indexterm>
</para>
d4377 2
a4378 2
<emphasis role='bold'>{ Synchronous , </emphasis>
<emphasis role='bold'>Asynchronous }</emphasis>
d4402 1
a4402 1
   ->
d4409 5
a4413 5
<emphasis role='bold'>{ Success , </emphasis>
<emphasis role='bold'>AlreadyGrabbed , </emphasis>
<emphasis role='bold'>Frozen , </emphasis>
<emphasis role='bold'>InvalidTime , </emphasis>
<emphasis role='bold'>NotViewable }</emphasis>
d4421 2
a4422 2
<emphasis role='bold'>Cursor , </emphasis>
<emphasis role='bold'>Value ,</emphasis>
d4439 1
a4439 1
<emphasis role='bold'>False , </emphasis>
d4443 1
a4443 1
<emphasis role='bold'>True </emphasis>
d4453 1
a4453 1
<emphasis role='bold'>Asynchronous , </emphasis>
d4458 1
a4458 1
<emphasis role='bold'>Synchronous , </emphasis>
d4462 1
a4462 1
<emphasis role='bold'>AllowEvents </emphasis>
d4469 1
a4469 1
<emphasis role='bold'>Asynchronous , </emphasis>
d4472 1
a4472 1
<emphasis role='bold'>Synchronous ,</emphasis>
d4476 1
a4476 1
<emphasis role='bold'>AllowEvents </emphasis>
d4502 1
a4502 1
<emphasis role='bold'>EnterNotify </emphasis>
d4504 1
a4504 1
<emphasis role='bold'>LeaveNotify </emphasis>
d4509 1
a4509 1
<emphasis role='bold'>AlreadyGrabbed </emphasis>
d4512 1
a4512 1
<emphasis role='bold'>Frozen </emphasis>
d4515 1
a4515 1
<emphasis role='bold'>NotViewable </emphasis>
d4520 1
a4520 1
<emphasis role='bold'>InvalidTime </emphasis>
d4524 1
a4524 1
<emphasis role='bold'>CurrentTime </emphasis>
d4528 4
a4531 4
<para id="requests:UngrabPointer">
<emphasis role='bold'>UngrabPointer</emphasis>
<indexterm significance="preferred"><primary>UngrabPointer</primary></indexterm>
</para>
d4552 1
a4552 1
<emphasis role='bold'>GrabPointer </emphasis>
d4554 1
a4554 1
<emphasis role='bold'>GrabButton </emphasis>
d4561 1
a4561 1
<emphasis role='bold'>EnterNotify </emphasis>
d4563 1
a4563 1
<emphasis role='bold'>LeaveNotify </emphasis>
d4568 1
a4568 1
<emphasis role='bold'>UngrabPointer </emphasis>
d4575 5
a4579 4
<para id="requests:GrabButton">
<emphasis role='bold'>GrabButton</emphasis>
<indexterm significance="preferred"><primary>GrabButton</primary></indexterm>
</para>
d4615 2
a4616 2
<emphasis role='bold'>{ Synchronous , </emphasis>
<emphasis role='bold'>Asynchronous }</emphasis>
d4636 3
a4638 3
<emphasis role='bold'>Access ,</emphasis>
<emphasis role='bold'>Cursor , </emphasis>
<emphasis role='bold'>Value , </emphasis>
d4650 1
d4653 1
a4653 1
<emphasis role='bold'>GrabPointer ,</emphasis>
d4656 1
a4656 1
<emphasis role='bold'>ButtonPress </emphasis>
d4658 1
a4658 1
<emphasis role='bold'>ButtonPress </emphasis>
d4674 1
a4674 1
<emphasis role='bold'>GrabPointer .</emphasis>
d4685 1
a4685 1
<emphasis role='bold'>AnyModifier </emphasis>
d4691 1
a4691 1
<emphasis role='bold'>AnyButton </emphasis>
d4698 1
a4698 1
<emphasis role='bold'>Access </emphasis>
d4700 1
a4700 1
<emphasis role='bold'>GrabButton </emphasis>
d4703 1
a4703 1
<emphasis role='bold'>AnyModifier </emphasis>
d4705 1
a4705 1
<emphasis role='bold'>AnyButton , </emphasis>
d4707 1
a4707 1
<emphasis role='bold'>Access </emphasis>
d4712 4
a4715 4
<para id="requests:UngrabButton">
<emphasis role='bold'>UngrabButton</emphasis>
<indexterm significance="preferred"><primary>UngrabButton</primary></indexterm>
</para>
d4743 1
a4743 1
<emphasis role='bold'>Value ,</emphasis>
d4757 1
a4757 1
<emphasis role='bold'>AnyModifier </emphasis>
d4761 1
a4761 1
<emphasis role='bold'>AnyButton </emphasis>
d4766 4
a4769 4
<para id="requests:ChangeActivePointerGrab">
<emphasis role='bold'>ChangeActivePointerGrab</emphasis>
<indexterm significance="preferred"><primary>ChangeActivePointerGrab</primary></indexterm>
</para>
d4797 1
a4797 1
<emphasis role='bold'>Cursor ,</emphasis>
d4812 1
a4812 1
<emphasis role='bold'>GrabPointer .</emphasis>
d4815 1
a4815 1
<emphasis role='bold'>GrabButton .</emphasis>
d4818 4
a4821 4
<para id="requests:GrabKeyboard">
<emphasis role='bold'>GrabKeyboard</emphasis>
<indexterm significance="preferred"><primary>GrabKeyboard</primary></indexterm>
</para>
d4840 2
a4841 2
<emphasis role='bold'>{ Synchronous , </emphasis>
<emphasis role='bold'>Asynchronous }</emphasis>
d4853 1
a4853 1
   ->
d4860 5
a4864 5
<emphasis role='bold'>{ Success , </emphasis>
<emphasis role='bold'>AlreadyGrabbed , </emphasis>
<emphasis role='bold'>Frozen ,</emphasis>
<emphasis role='bold'>InvalidTime , </emphasis>
<emphasis role='bold'>NotViewable }</emphasis>
d4872 1
a4872 1
<emphasis role='bold'>Value ,</emphasis>
d4889 1
a4889 1
<emphasis role='bold'>False , </emphasis>
d4892 1
a4892 1
<emphasis role='bold'>True </emphasis>
d4897 1
a4897 1
<emphasis role='bold'>KeyPress </emphasis>
d4899 1
a4899 1
<emphasis role='bold'>KeyRelease </emphasis>
d4905 1
a4905 1
<emphasis role='bold'>Asynchronous ,</emphasis>
d4910 1
a4910 1
<emphasis role='bold'>Synchronous , </emphasis>
d4914 1
a4914 1
<emphasis role='bold'>AllowEvents </emphasis>
d4921 1
a4921 1
<emphasis role='bold'>Asynchronous , </emphasis>
d4924 1
a4924 1
<emphasis role='bold'>Synchronous , </emphasis>
d4928 1
a4928 1
<emphasis role='bold'>AllowEvents </emphasis>
d4935 1
a4935 1
<emphasis role='bold'>FocusIn </emphasis>
d4937 1
a4937 1
<emphasis role='bold'>FocusOut </emphasis>
d4942 1
a4942 1
<emphasis role='bold'>AlreadyGrabbed </emphasis>
d4945 1
a4945 1
<emphasis role='bold'>Frozen </emphasis>
d4948 1
a4948 1
<emphasis role='bold'>NotViewable </emphasis>
d4951 1
a4951 1
<emphasis role='bold'>InvalidTime </emphasis>
d4955 1
a4955 1
<emphasis role='bold'>CurrentTime </emphasis>
d4959 4
a4962 4
<para id="requests:UngrabKeyboard">
<emphasis role='bold'>UngrabKeyboard</emphasis>
<indexterm significance="preferred"><primary>UngrabKeyboard</primary></indexterm>
</para>
d4983 1
a4983 1
<emphasis role='bold'>GrabKeyboard </emphasis>
d4985 1
a4985 1
<emphasis role='bold'>GrabKey ) </emphasis>
d4992 1
a4992 1
<emphasis role='bold'>FocusIn </emphasis>
d4994 1
a4994 1
<emphasis role='bold'>FocusOut </emphasis>
d4999 1
a4999 1
<emphasis role='bold'>UngrabKeyboard </emphasis>
d5004 4
a5007 4
<para id="requests:GrabKey">
<emphasis role='bold'>GrabKey</emphasis>
<indexterm significance="preferred"><primary>GrabKey</primary></indexterm>
</para>
d5038 2
a5039 2
<emphasis role='bold'>{ Synchronous , </emphasis>
<emphasis role='bold'>Asynchronous }</emphasis>
d5047 2
a5048 2
<emphasis role='bold'>Access ,</emphasis>
<emphasis role='bold'>Value , </emphasis>
d5060 1
d5063 1
a5063 1
<emphasis role='bold'>GrabKeyboard , </emphasis>
d5066 1
a5066 1
<emphasis role='bold'>KeyPress </emphasis>
d5068 1
a5068 1
<emphasis role='bold'>KeyPress </emphasis>
d5084 1
a5084 1
<emphasis role='bold'>GrabKeyboard .</emphasis>
d5095 1
a5095 1
<emphasis role='bold'>AnyModifier </emphasis>
d5101 1
a5101 1
<emphasis role='bold'>AnyKey </emphasis>
d5105 1
a5105 1
<emphasis role='bold'>Value </emphasis>
d5110 1
a5110 1
<emphasis role='bold'>Access </emphasis>
d5112 1
a5112 1
<emphasis role='bold'>GrabKey </emphasis>
d5115 1
a5115 1
<emphasis role='bold'>AnyModifier </emphasis>
d5117 1
a5117 1
<emphasis role='bold'>AnyKey , </emphasis>
d5120 1
a5120 1
<emphasis role='bold'>Access </emphasis>
d5124 4
a5127 4
<para id="requests:UngrabKey">
<emphasis role='bold'>UngrabKey</emphasis>
<indexterm significance="preferred"><primary>UngrabKey</primary></indexterm>
</para>
d5155 1
a5155 1
<emphasis role='bold'>Value ,</emphasis>
d5169 1
a5169 1
<emphasis role='bold'>AnyModifier </emphasis>
d5173 1
a5173 1
<emphasis role='bold'>AnyKey </emphasis>
d5178 4
a5181 4
<para id="requests:AllowEvents">
<emphasis role='bold'>AllowEvents</emphasis>
<indexterm significance="preferred"><primary>AllowEvents</primary></indexterm>
</para>
d5190 4
a5193 4
<emphasis role='bold'>{ AsyncPointer , </emphasis>
<emphasis role='bold'>SyncPointer , </emphasis>
<emphasis role='bold'>ReplayPointer ,</emphasis>
<emphasis role='bold'>AsyncKeyboard , </emphasis>
d5198 4
a5201 4
<emphasis role='bold'>SyncKeyboard , </emphasis>
<emphasis role='bold'>ReplayKeyboard ,</emphasis>
<emphasis role='bold'>AsyncBoth , </emphasis>
<emphasis role='bold'>SyncBoth }</emphasis>
d5233 1
a5233 1
<emphasis role='bold'>AsyncPointer , </emphasis>
d5237 1
a5237 1
<emphasis role='bold'>AsyncPointer </emphasis>
d5239 1
a5239 1
<emphasis role='bold'>AsyncPointer </emphasis>
d5245 1
a5245 1
<emphasis role='bold'>SyncPointer , </emphasis>
d5248 1
a5248 1
<emphasis role='bold'>ButtonPress </emphasis>
d5250 1
a5250 1
<emphasis role='bold'>ButtonRelease </emphasis>
d5255 1
a5255 1
<emphasis role='bold'>SyncPointer </emphasis>
d5261 1
a5261 1
<emphasis role='bold'>ReplayPointer , </emphasis>
d5265 1
a5265 1
<emphasis role='bold'>GrabButton </emphasis>
d5267 1
a5267 1
<emphasis role='bold'>AllowEvents </emphasis>
d5269 1
a5269 1
<emphasis role='bold'>SyncPointer </emphasis>
d5271 1
a5271 1
<emphasis role='bold'>GrabPointer ), </emphasis>
d5280 1
a5280 1
<emphasis role='bold'>AsyncKeyboard , </emphasis>
d5284 1
a5284 1
<emphasis role='bold'>AsyncKeyboard </emphasis>
d5286 1
a5286 1
<emphasis role='bold'>AsyncKeyboard </emphasis>
d5292 1
a5292 1
<emphasis role='bold'>SyncKeyboard ,</emphasis>
d5295 1
a5295 1
<emphasis role='bold'>KeyPress </emphasis>
d5297 1
a5297 1
<emphasis role='bold'>KeyRelease </emphasis>
d5302 1
a5302 1
<emphasis role='bold'>SyncKeyboard </emphasis>
d5308 1
a5308 1
<emphasis role='bold'>ReplayKeyboard , </emphasis>
d5312 1
a5312 1
<emphasis role='bold'>GrabKey </emphasis>
d5314 1
a5314 1
<emphasis role='bold'>AllowEvents </emphasis>
d5316 1
a5316 1
<emphasis role='bold'>SyncKeyboard </emphasis>
d5318 1
a5318 1
<emphasis role='bold'>GrabKeyboard ), </emphasis>
d5327 1
a5327 1
<emphasis role='bold'>SyncBoth , </emphasis>
d5330 3
a5332 3
<emphasis role='bold'>ButtonPress , </emphasis>
<emphasis role='bold'>ButtonRelease , </emphasis>
<emphasis role='bold'>KeyPress , </emphasis>
d5334 1
a5334 1
<emphasis role='bold'>KeyRelease </emphasis>
d5342 1
a5342 1
<emphasis role='bold'>SyncBoth </emphasis>
d5346 1
a5346 1
<emphasis role='bold'>SyncBoth </emphasis>
d5348 1
a5348 1
<emphasis role='bold'>SyncBoth </emphasis>
d5353 1
a5353 1
<emphasis role='bold'>AsyncBoth , </emphasis>
d5357 1
a5357 1
<emphasis role='bold'>AsyncBoth </emphasis>
d5359 1
a5359 1
<emphasis role='bold'>AsyncBoth </emphasis>
d5363 2
a5364 2
<emphasis role='bold'>AsyncPointer , </emphasis>
<emphasis role='bold'>SyncPointer , </emphasis>
d5366 1
a5366 1
<emphasis role='bold'>ReplayPointer </emphasis>
d5368 2
a5369 2
<emphasis role='bold'>AsyncKeyboard , </emphasis>
<emphasis role='bold'>SyncKeyboard , </emphasis>
d5371 1
a5371 1
<emphasis role='bold'>ReplayKeyboard </emphasis>
d5383 1
a5383 1
<emphasis role='bold'>AllowEvents </emphasis>
d5387 5
a5391 4
<para id="requests:GrabServer">
<emphasis role='bold'>GrabServer</emphasis>
<indexterm significance="preferred"><primary>GrabServer</primary></indexterm>
</para>
d5397 4
a5400 4
<para id="requests:UngrabServer">
<emphasis role='bold'>UngrabServer</emphasis>
<indexterm significance="preferred"><primary>UngrabServer</primary></indexterm>
</para>
d5406 4
a5409 4
<para id="requests:QueryPointer">
<emphasis role='bold'>QueryPointer</emphasis>
<indexterm significance="preferred"><primary>QueryPointer</primary></indexterm>
</para>
d5423 1
a5423 1
   ->
d5471 1
a5471 1
<emphasis role='bold'>False ,</emphasis>
d5474 1
a5474 1
<emphasis role='bold'>None ,</emphasis>
d5477 1
a5477 1
<emphasis role='bold'>True ,</emphasis>
d5487 4
a5490 4
<para id="requests:GetMotionEvents">
<emphasis role='bold'>GetMotionEvents</emphasis>
<indexterm significance="preferred"><primary>GetMotionEvents</primary></indexterm>
</para>
d5511 1
a5511 1
   ->
d5562 1
a5562 1
<emphasis role='bold'>CurrentTime .</emphasis>
d5565 4
a5568 4
<para id="requests:TranslateCoordinates">
<emphasis role='bold'>TranslateCoordinates</emphasis>
<indexterm significance="preferred"><primary>TranslateCoordinates</primary></indexterm>
</para>
d5587 1
a5587 1
   ->
d5626 1
a5626 1
<emphasis role='bold'>False , </emphasis>
d5633 4
a5636 4
<para id="requests:WarpPointer">
<emphasis role='bold'>WarpPointer</emphasis>
<indexterm significance="preferred"><primary>WarpPointer</primary></indexterm>
</para>
d5685 1
a5685 1
<emphasis role='bold'>None , </emphasis>
d5692 1
a5692 1
<emphasis role='bold'>None , </emphasis>
d5714 4
a5717 4
<para id="requests:SetInputFocus">
<emphasis role='bold'>SetInputFocus</emphasis>
<indexterm significance="preferred"><primary>SetInputFocus</primary></indexterm>
</para>
d5726 1
a5726 1
<emphasis role='bold'>PointerRoot </emphasis>
d5734 3
a5736 3
<emphasis role='bold'>{ Parent , </emphasis>
<emphasis role='bold'>PointerRoot , </emphasis>
<emphasis role='bold'>None }</emphasis>
d5750 2
a5751 2
<emphasis role='bold'>Match ,</emphasis>
<emphasis role='bold'>Value , </emphasis>
d5767 1
a5767 1
<emphasis role='bold'>CurrentTime </emphasis>
d5772 1
a5772 1
<emphasis role='bold'>None </emphasis>
d5786 1
a5786 1
<emphasis role='bold'>PointerRoot </emphasis>
d5795 1
a5795 1
<emphasis role='bold'>FocusIn </emphasis>
d5797 1
a5797 1
<emphasis role='bold'>FocusOut </emphasis>
d5802 1
a5802 1
<emphasis role='bold'>Match </emphasis>
d5807 1
a5807 1
<emphasis role='bold'>Parent , </emphasis>
d5810 1
a5810 1
<emphasis role='bold'>None .</emphasis>
d5812 1
a5812 1
<emphasis role='bold'>PointerRoot </emphasis>
d5814 1
a5814 1
<emphasis role='bold'>None , </emphasis>
d5817 1
a5817 1
<emphasis role='bold'>FocusIn </emphasis>
d5819 1
a5819 1
<emphasis role='bold'>FocusOut </emphasis>
d5824 4
a5827 4
<para id="requests:GetInputFocus">
<emphasis role='bold'>GetInputFocus</emphasis>
<indexterm significance="preferred"><primary>GetInputFocus</primary></indexterm>
</para>
d5834 1
a5834 1
   ->
d5841 1
a5841 1
<emphasis role='bold'>PointerRoot </emphasis>
d5849 3
a5851 3
<emphasis role='bold'>{ Parent , </emphasis>
<emphasis role='bold'>PointerRoot , </emphasis>
<emphasis role='bold'>None }</emphasis>
d5864 4
a5867 4
<para id="requests:QueryKeymap">
<emphasis role='bold'>QueryKeymap</emphasis>
<indexterm significance="preferred"><primary>QueryKeymap</primary></indexterm>
</para>
d5874 1
a5874 1
   ->
d5899 4
a5902 4
<para id="requests:OpenFont">
<emphasis role='bold'>OpenFont</emphasis>
<indexterm significance="preferred"><primary>OpenFont</primary></indexterm>
</para>
d5923 2
a5924 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
d5946 1
a5946 1
X.Org standard <emphasis remap='I'>X Logical Font Description Conventions</emphasis>.
d5953 4
a5956 4
<para id="requests:CloseFont">
<emphasis role='bold'>CloseFont</emphasis>
<indexterm significance="preferred"><primary>CloseFont</primary></indexterm>
</para>
d5986 4
a5989 4
<para id="requests:QueryFont">
<emphasis role='bold'>QueryFont</emphasis>
<indexterm significance="preferred"><primary>QueryFont</primary></indexterm>
</para>
d5991 1
a5991 1
  <tgroup cols='1' align='left'>
d5993 3
d5997 2
a5998 2
    <row rowsep='0'>
      <entry>
d6004 3
a6006 3
    <row rowsep='0'>
      <entry>
   ->
d6009 2
a6010 2
    <row rowsep='0'>
      <entry>
d6015 2
a6016 2
    <row rowsep='0'>
      <entry>
d6021 2
a6022 2
    <row rowsep='0'>
      <entry>
d6025 4
a6028 4
<!-- .IP -->
<!-- .TS -->
l lw(3i).
T{
d6030 2
a6031 1
T}	T{
d6033 88
a6120 22
<emphasis role='bold'>{ LeftToRight , </emphasis>
<emphasis role='bold'>RightToLeft }</emphasis>
T}
	\ min-char-or-byte2, max-char-or-byte2: CARD16
	\ min-byte1, max-byte1: CARD8
	\ all-chars-exist: BOOL
	\ default-char: CARD16
	\ min-bounds: CHARINFO
	\ max-bounds: CHARINFO
	\ font-ascent: INT16
	\ font-descent: INT16
	\ properties: LISTofFONTPROP]
FONTPROP:	[name: ATOM
	\ value: &lt;32-bit-value&gt;]
CHARINFO:	[left-side-bearing: INT16
	\ right-side-bearing: INT16
	\ character-width: INT16
	\ ascent: INT16
	\ descent: INT16
	\ attributes: CARD16]
<!-- .TE -->
<!-- .in -.2i -->
d6123 1
a6123 1
    <row rowsep='0'>
d6125 5
d6149 1
a6149 1
<emphasis role='bold'>LeftToRight ,</emphasis>
d6151 1
a6151 1
<emphasis role='bold'>RightToLeft ,</emphasis>
d6164 4
a6167 4
<!-- .DS -->
byte1 = N/D + min-byte1
byte2 = N\\\\D + min-char-or-byte2
<!-- .DE -->
d6171 5
a6175 5
<!-- .DS -->
D = max-char-or-byte2 - min-char-or-byte2 + 1
/ = integer division
\\\\ = integer modulus
<!-- .DE -->
d6181 3
a6183 3
<!-- .DS -->
L = D * (max-byte1 - min-byte1 + 1)
<!-- .DE -->
d6190 1
a6190 1
<emphasis role='bold'>True , </emphasis>
d6210 3
a6212 3
<!-- .DS -->
[x + min-bounds.left-side-bearing, y - max-bounds.ascent]
<!-- .DE -->
d6214 3
a6216 3
<!-- .DS -->
max-bounds.right-side-bearing - min-bounds.left-side-bearing
<!-- .DE -->
d6220 3
a6222 3
<!-- .DS -->
max-bounds.ascent + max-bounds.descent
<!-- .DE -->
d6240 1
a6240 1
standard <emphasis remap='I'>X Logical Font Description Conventions</emphasis>.
d6247 3
a6249 3
<!-- .DS -->
[x + left-side-bearing, y - ascent]
<!-- .DE -->
d6253 3
a6255 3
<!-- .DS -->
right-side-bearing - left-side-bearing
<!-- .DE -->
d6259 3
a6261 3
<!-- .DS -->
ascent + descent
<!-- .DE -->
d6265 3
a6267 3
<!-- .DS -->
[x + character-width, y]
<!-- .DE -->
d6289 4
a6292 4
<para id="requests:QueryTextExtents">
<emphasis role='bold'>QueryTextExtents</emphasis>
<indexterm significance="preferred"><primary>QueryTextExtents</primary></indexterm>
</para>
d6311 1
a6311 1
   ->
d6318 2
a6319 2
<emphasis role='bold'>{ LeftToRight , </emphasis>
<emphasis role='bold'>RightToLeft }</emphasis>
d6378 1
a6378 1
<emphasis role='bold'>QueryFont .</emphasis>
d6403 4
a6406 4
<para id="requests:ListFonts">
<emphasis role='bold'>ListFonts</emphasis>
<indexterm significance="preferred"><primary>ListFonts</primary></indexterm>
</para>
d6425 1
a6425 1
   ->
d6443 1
a6443 1
<emphasis role='bold'>SetFontPath </emphasis>
d6456 4
a6459 4
<para id="requests:ListFontsWithInfo">
<emphasis role='bold'>ListFontsWithInfo</emphasis>
<indexterm significance="preferred"><primary>ListFontsWithInfo</primary></indexterm>
</para>
d6478 1
a6478 1
   ->
d6509 1
a6509 1
<emphasis role='bold'>QueryFont</emphasis>&gt;
d6519 1
a6519 1
<emphasis role='bold'>ListFonts , </emphasis>
d6522 1
a6522 1
<emphasis role='bold'>QueryFont </emphasis>
d6535 4
a6538 4
<para id="requests:SetFontPath">
<emphasis role='bold'>SetFontPath</emphasis>
<indexterm significance="preferred"><primary>SetFontPath</primary></indexterm>
</para>
d6583 4
a6586 4
<para id="requests:GetFontPath">
<emphasis role='bold'>GetFontPath</emphasis>
<indexterm significance="preferred"><primary>GetFontPath</primary></indexterm>
</para>
d6593 1
a6593 1
   ->
d6612 4
a6615 4
<para id="requests:CreatePixmap">
<emphasis role='bold'>CreatePixmap</emphasis>
<indexterm significance="preferred"><primary>CreatePixmap</primary></indexterm>
</para>
d6646 3
a6648 3
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
d6661 1
a6661 1
<emphasis role='bold'>Value </emphasis>
d6665 1
a6665 1
<emphasis role='bold'>Value </emphasis>
d6671 1
a6671 1
<emphasis role='bold'>InputOnly </emphasis>
d6675 4
a6678 4
<para id="requests:FreePixmap">
<emphasis role='bold'>FreePixmap</emphasis>
<indexterm significance="preferred"><primary>FreePixmap</primary></indexterm>
</para>
d6708 4
a6711 4
<para id="requests:CreateGC">
<emphasis role='bold'>CreateGC</emphasis>
<indexterm significance="preferred"><primary>CreateGC</primary></indexterm>
</para>
d6742 6
a6747 6
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>Font , </emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Pixmap , </emphasis>
d6763 1
a6763 1
<emphasis role='bold'>Match </emphasis>
d6936 1
a6936 1
((src FUNC dst) AND plane-mask) OR (dst AND (NOT plane-mask))
d7073 2
a7074 2
[x1-(w*sn/2), y1+(w*cs/2)], [x1+(w*sn/2), y1-(w*cs/2)],
[x2-(w*sn/2), y2+(w*cs/2)], [x2+(w*sn/2), y2-(w*cs/2)]
d7151 1
a7151 1
<emphasis role='bold'>Butt </emphasis>
d7207 1
a7207 1
<emphasis role='bold'>Butt </emphasis>
d7245 1
a7245 1
<emphasis role='bold'>Bevel </emphasis>
d7264 1
a7264 1
<emphasis role='bold'>Butt </emphasis>
d7377 1
a7377 1
<emphasis role='bold'>Match </emphasis>
d7381 1
a7381 1
<emphasis role='bold'>Match </emphasis>
d7384 1
a7384 1
<emphasis role='bold'>Stippled </emphasis>
d7386 1
a7386 1
<emphasis role='bold'>OpaqueStippled ), </emphasis>
d7396 4
a7399 4
<emphasis role='bold'>PolyText8</emphasis>,
<emphasis role='bold'>PolyText16</emphasis>,
<emphasis role='bold'>PolyFillRectangle</emphasis>,
<emphasis role='bold'>FillPoly</emphasis>,
d7401 1
a7401 1
<emphasis role='bold'>PolyFillArc</emphasis>)
d7405 4
a7408 4
<emphasis role='bold'>PolyLine</emphasis>,
<emphasis role='bold'>PolySegment</emphasis>,
<emphasis role='bold'>PolyRectangle</emphasis>,
<emphasis role='bold'>PolyArc</emphasis> )
d7496 1
a7496 1
<emphasis role='bold'>SetDashes .</emphasis>
d7499 1
a7499 1
<emphasis role='bold'>SetDashes .</emphasis>
d7501 1
a7501 1
<emphasis role='bold'>Value </emphasis>
d7504 1
a7504 1
<emphasis role='bold'>SetDashes </emphasis>
d7518 1
a7518 1
<emphasis role='bold'>Match </emphasis>
d7521 1
a7521 1
<emphasis role='bold'>None , </emphasis>
d7524 1
a7524 1
<emphasis role='bold'>SetClipRectangles </emphasis>
d7529 1
a7529 1
<emphasis role='bold'>ClipByChildren , </emphasis>
d7531 1
a7531 1
<emphasis role='bold'>InputOutput </emphasis>
d7534 1
a7534 1
<emphasis role='bold'>IncludeInferiors , </emphasis>
d7539 1
a7539 1
<emphasis role='bold'>IncludeInferiors </emphasis>
d7547 1
a7547 1
<emphasis role='bold'>FillPoly </emphasis>
d7549 1
a7549 1
<emphasis role='bold'>EvenOdd </emphasis>
d7553 1
a7553 1
<emphasis role='bold'>Winding , </emphasis>
d7578 1
a7578 1
<emphasis role='bold'>PolyFillArc </emphasis>
d7583 1
a7583 1
<emphasis role='bold'>GraphicsExposure </emphasis>
d7585 1
a7585 1
<emphasis role='bold'>CopyArea </emphasis>
d7587 1
a7587 1
<emphasis role='bold'>CopyPlane </emphasis>
d7740 4
a7743 4
<para id="requests:ChangeGC">
<emphasis role='bold'>ChangeGC</emphasis>
<indexterm significance="preferred"><primary>ChangeGC</primary></indexterm>
</para>
d7769 5
a7773 5
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Font , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Pixmap , </emphasis>
d7788 1
a7788 1
<emphasis role='bold'>CreateGC .</emphasis>
d7792 1
a7792 1
<emphasis role='bold'>SetClipRectangles </emphasis>
d7795 1
a7795 1
<emphasis role='bold'>SetDashes </emphasis>
d7804 4
a7807 4
<para id="requests:CopyGC">
<emphasis role='bold'>CopyGC</emphasis>
<indexterm significance="preferred"><primary>CopyGC</primary></indexterm>
</para>
d7828 3
a7830 3
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match , </emphasis>
d7843 1
a7843 1
<emphasis role='bold'>CreateGC .</emphasis>
d7845 1
a7845 1
<emphasis role='bold'>Match </emphasis>
d7849 4
a7852 4
<para id="requests:SetDashes">
<emphasis role='bold'>SetDashes</emphasis>
<indexterm significance="preferred"><primary>SetDashes</primary></indexterm>
</para>
d7878 2
a7879 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>GContext , </emphasis>
d7892 1
a7892 1
<emphasis role='bold'>Value </emphasis>
d7900 1
a7900 1
<emphasis role='bold'>Value </emphasis>
d7928 1
a7928 1
<emphasis role='bold'>DoubleDash </emphasis>
d7931 1
a7931 1
<emphasis role='bold'>Solid </emphasis>
d7936 1
a7936 1
<emphasis role='bold'>OnOffDash </emphasis>
d7938 1
a7938 1
<emphasis role='bold'>DoubleDash </emphasis>
d7948 4
a7951 4
<para id="requests:SetClipRectangles">
<emphasis role='bold'>SetClipRectangles</emphasis>
<indexterm significance="preferred"><primary>SetClipRectangles</primary></indexterm>
</para>
d7975 4
a7978 4
<emphasis role='bold'>{ UnSorted , </emphasis>
<emphasis role='bold'>YSorted , </emphasis>
<emphasis role='bold'>YXSorted ,</emphasis>
<emphasis role='bold'>YXBanded }</emphasis>
d7986 3
a7988 3
<emphasis role='bold'>Alloc , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d8010 1
a8010 1
<emphasis role='bold'>None </emphasis>
d8012 1
a8012 1
<emphasis role='bold'>CreateGC </emphasis>
d8014 1
a8014 1
<emphasis role='bold'>ChangeGC .</emphasis>
d8023 1
a8023 1
<emphasis role='bold'>Match </emphasis>
d8027 1
a8027 1
<emphasis role='bold'>UnSorted </emphasis>
d8029 1
a8029 1
<emphasis role='bold'>YSorted </emphasis>
d8031 1
a8031 1
<emphasis role='bold'>YXSorted </emphasis>
d8033 1
a8033 1
<emphasis role='bold'>YSorted </emphasis>
d8036 1
a8036 1
<emphasis role='bold'>YXBanded </emphasis>
d8038 1
a8038 1
<emphasis role='bold'>YXSorted </emphasis>
d8044 4
a8047 4
<para id="requests:FreeGC">
<emphasis role='bold'>FreeGC</emphasis>
<indexterm significance="preferred"><primary>FreeGC</primary></indexterm>
</para>
d8077 4
a8080 4
<para id="requests:ClearArea">
<emphasis role='bold'>ClearArea</emphasis>
<indexterm significance="preferred"><primary>ClearArea</primary></indexterm>
</para>
d8111 3
a8113 3
<emphasis role='bold'>Match ,</emphasis>
<emphasis role='bold'>Value , </emphasis>
<emphasis role='bold'>Window </emphasis>
d8131 1
a8131 1
<emphasis role='bold'>Copy </emphasis>
d8133 1
a8133 1
<emphasis role='bold'>ClipByChildren .</emphasis>
d8135 1
a8135 1
<emphasis role='bold'>None ,</emphasis>
d8139 1
a8139 1
<emphasis role='bold'>True , </emphasis>
d8145 1
a8145 1
<emphasis role='bold'>Match </emphasis>
d8147 1
a8147 1
<emphasis role='bold'>InputOnly </emphasis>
d8151 4
a8154 4
<para id="requests:CopyArea">
<emphasis role='bold'>CopyArea</emphasis>
<indexterm significance="preferred"><primary>CopyArea</primary></indexterm>
</para>
d8190 2
a8191 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d8209 1
a8209 1
<emphasis role='bold'>Match </emphasis>
d8220 1
a8220 1
<emphasis role='bold'>None , </emphasis>
d8223 1
a8223 1
<emphasis role='bold'>Copy ) </emphasis>
d8227 1
a8227 1
<emphasis role='bold'>True ,</emphasis>
d8229 1
a8229 1
<emphasis role='bold'>GraphicsExposure </emphasis>
d8234 1
a8234 1
<emphasis role='bold'>True </emphasis>
d8236 1
a8236 1
<emphasis role='bold'>GraphicsExposure </emphasis>
d8239 1
a8239 1
<emphasis role='bold'>NoExposure </emphasis>
d8247 4
a8250 4
<para id="requests:CopyPlane">
<emphasis role='bold'>CopyPlane</emphasis>
<indexterm significance="preferred"><primary>CopyPlane</primary></indexterm>
</para>
d8291 3
a8293 3
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d8305 1
a8305 1
<emphasis role='bold'>Match </emphasis>
d8309 1
a8309 1
<emphasis role='bold'>Value </emphasis>
d8316 1
a8316 1
<emphasis role='bold'>CopyArea </emphasis>
d8320 1
a8320 1
<emphasis role='bold'>OpaqueStippled </emphasis>
d8329 4
a8332 4
<para id="requests:PolyPoint">
<emphasis role='bold'>PolyPoint</emphasis>
<indexterm significance="preferred"><primary>PolyPoint</primary></indexterm>
</para>
d8351 2
a8352 2
<emphasis role='bold'>{ Origin , </emphasis>
<emphasis role='bold'>Previous }</emphasis>
d8365 3
a8367 3
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d8392 4
a8395 4
<para id="requests:PolyLine">
<emphasis role='bold'>PolyLine</emphasis>
<indexterm significance="preferred"><primary>PolyLine</primary></indexterm>
</para>
d8414 2
a8415 2
<emphasis role='bold'>{ Origin , </emphasis>
<emphasis role='bold'>Previous }</emphasis>
d8428 3
a8430 3
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d8454 1
a8454 1
<emphasis role='bold'>PolyLine </emphasis>
d8464 1
a8464 1
<emphasis role='bold'>Bevel </emphasis>
d8481 4
a8484 4
<para id="requests:PolySegment">
<emphasis role='bold'>PolySegment</emphasis>
<indexterm significance="preferred"><primary>PolySegment</primary></indexterm>
</para>
d8524 2
a8525 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d8555 4
a8558 4
<para id="requests:PolyRectangle">
<emphasis role='bold'>PolyRectangle</emphasis>
<indexterm significance="preferred"><primary>PolyRectangle</primary></indexterm>
</para>
d8584 2
a8585 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d8597 1
a8597 1
<emphasis role='bold'>PolyLine </emphasis>
d8601 3
a8603 3
<!-- .DS -->
[x,y] [x+width,y] [x+width,y+height] [x,y+height] [x,y]
<!-- .DE -->
d8626 4
a8629 4
<para id="requests:PolyArc">
<emphasis role='bold'>PolyArc</emphasis>
<indexterm significance="preferred"><primary>PolyArc</primary></indexterm>
</para>
d8655 2
a8656 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d8705 1
a8705 1
<emphasis role='bold'>Butt </emphasis>
d8733 3
a8735 3
<!-- .DS -->
skewed-angle = atan(tan(normal-angle) * w/h) + adjust
<!-- .DE -->
d8742 20
a8761 10
</para>
<para>
<!-- .TS -->
l l.
0	for normal-angle in the range [0,PI/2)
PI	for normal-angle in the range [PI/2,(3*PI)/2)
2*PI	for normal-angle in the range [(3*PI)/2,2*PI)
<!-- .TE -->
</para>
<para>
d8800 4
a8803 4
<para id="requests:FillPoly">
<emphasis role='bold'>FillPoly</emphasis>
<indexterm significance="preferred"><primary>FillPoly</primary></indexterm>
</para>
d8822 3
a8824 3
<emphasis role='bold'>{ Complex , </emphasis>
<emphasis role='bold'>Nonconvex , </emphasis>
<emphasis role='bold'>Convex }</emphasis>
d8830 2
a8831 2
<emphasis role='bold'>{ Origin , </emphasis>
<emphasis role='bold'>Previous }</emphasis>
d8844 3
a8846 3
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match , </emphasis>
d8869 1
a8869 1
<emphasis role='bold'>Complex </emphasis>
d8875 1
a8875 1
<emphasis role='bold'>Nonconvex </emphasis>
d8880 1
a8880 1
<emphasis role='bold'>Nonconvex </emphasis>
d8882 1
a8882 1
<emphasis role='bold'>Complex </emphasis>
d8885 1
a8885 1
<emphasis role='bold'>Nonconvex </emphasis>
d8890 1
a8890 1
<emphasis role='bold'>Convex </emphasis>
d8895 1
a8895 1
<emphasis role='bold'>Convex </emphasis>
d8898 1
a8898 1
<emphasis role='bold'>Convex </emphasis>
d8911 4
a8914 4
<para id="requests:PolyFillRectangle">
<emphasis role='bold'>PolyFillRectangle</emphasis>
<indexterm significance="preferred"><primary>PolyFillRectangle</primary></indexterm>
</para>
d8940 2
a8941 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d8953 1
a8953 1
<emphasis role='bold'>FillPoly </emphasis>
d8955 3
a8957 3
<!-- .DS -->
[x,y] [x+width,y] [x+width,y+height] [x,y+height]
<!-- .DE -->
d8979 4
a8982 4
<para id="requests:PolyFillArc">
<emphasis role='bold'>PolyFillArc</emphasis>
<indexterm significance="preferred"><primary>PolyFillArc</primary></indexterm>
</para>
d9008 2
a9009 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d9025 1
a9025 1
<emphasis role='bold'>Chord , </emphasis>
d9028 1
a9028 1
<emphasis role='bold'>PieSlice , </emphasis>
d9042 1
a9042 1
<emphasis role='bold'>PolyArc </emphasis>
d9046 1
a9046 1
<emphasis role='bold'>Chord </emphasis>
d9050 1
a9050 1
<emphasis role='bold'>PieSlice </emphasis>
d9071 4
a9074 4
<para id="requests:PutImage">
<emphasis role='bold'>PutImage</emphasis>
<indexterm significance="preferred"><primary>PutImage</primary></indexterm>
</para>
d9113 3
a9115 3
<emphasis role='bold'>{ Bitmap , </emphasis>
<emphasis role='bold'>XYPixmap , </emphasis>
<emphasis role='bold'>ZPixmap }</emphasis>
d9128 3
a9130 3
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match , </emphasis>
d9146 1
a9146 1
<emphasis role='bold'>Bitmap </emphasis>
d9149 1
a9149 1
<emphasis role='bold'>Match </emphasis>
d9156 1
a9156 1
<emphasis role='bold'>XYPixmap </emphasis>
d9158 1
a9158 1
<emphasis role='bold'>ZPixmap , </emphasis>
d9160 1
a9160 1
<emphasis role='bold'>Match </emphasis>
d9163 1
a9163 1
<emphasis role='bold'>XYPixmap , </emphasis>
d9166 1
a9166 1
<emphasis role='bold'>ZPixmap , </emphasis>
d9171 1
a9171 1
<emphasis role='bold'>ZPixmap </emphasis>
d9173 1
a9173 1
<emphasis role='bold'>Match </emphasis>
d9176 1
a9176 1
<emphasis role='bold'>Bitmap </emphasis>
d9178 1
a9178 1
<emphasis role='bold'>XYPixmap </emphasis>
d9182 1
a9182 1
<emphasis role='bold'>Match </emphasis>
d9197 4
a9200 4
<para id="requests:GetImage">
<emphasis role='bold'>GetImage</emphasis>
<indexterm significance="preferred"><primary>GetImage</primary></indexterm>
</para>
d9229 2
a9230 2
<emphasis role='bold'>{ XYPixmap , </emphasis>
<emphasis role='bold'>ZPixmap }</emphasis>
d9236 1
a9236 1
   ->
d9261 2
a9262 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d9278 1
a9278 1
<emphasis role='bold'>XYPixmap </emphasis>
d9284 1
a9284 1
<emphasis role='bold'>ZPixmap </emphasis>
d9296 1
a9296 1
<emphasis role='bold'>None .</emphasis>
d9301 1
a9301 1
<emphasis role='bold'>Match </emphasis>
d9309 1
a9309 1
<emphasis role='bold'>Match </emphasis>
d9326 4
a9329 4
<para id="requests:PolyText8">
<emphasis role='bold'>PolyText8</emphasis>
<indexterm significance="preferred"><primary>PolyText8</primary></indexterm>
</para>
d9331 1
a9331 1
  <tgroup cols='1' align='left'>
d9333 3
d9337 2
a9338 2
    <row rowsep='0'>
      <entry>
d9343 2
a9344 2
    <row rowsep='0'>
      <entry>
d9348 2
a9349 2
    <row rowsep='0'>
      <entry>
d9353 2
a9354 2
    <row rowsep='0'>
      <entry>
d9359 2
a9360 2
    <row rowsep='0'>
      <entry>
a9362 3
<!-- .TS -->
r l.
TEXTITEM8:	TEXTELT8 or FONT
d9365 12
a9376 1
    <row rowsep='0'>
d9378 1
a9378 1
TEXTELT8:	[delta: INT8
d9381 1
a9381 1
    <row rowsep='0'>
d9383 1
a9383 2
	\ string: STRING8]
<!-- .TE -->
d9387 2
a9388 2
    <row rowsep='0'>
      <entry>
d9391 4
a9394 4
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>Font ,</emphasis>
<emphasis role='bold'>GContext , </emphasis>
<emphasis role='bold'>Match </emphasis>
d9421 1
a9421 1
<emphasis role='bold'>Font </emphasis>
d9439 4
a9442 4
<para id="requests:PolyText16">
<emphasis role='bold'>PolyText16</emphasis>
<indexterm significance="preferred"><primary>PolyText16</primary></indexterm>
</para>
d9444 1
a9444 1
  <tgroup cols='1' align='left'>
d9446 3
d9450 2
a9451 2
    <row rowsep='0'>
      <entry>
d9456 2
a9457 2
    <row rowsep='0'>
      <entry>
d9461 2
a9462 2
    <row rowsep='0'>
      <entry>
d9466 2
a9467 2
    <row rowsep='0'>
      <entry>
d9472 2
a9473 2
    <row rowsep='0'>
      <entry>
a9475 3
<!-- .TS -->
r l.
TEXTITEM16:	TEXTELT16 or FONT
d9478 12
a9489 1
    <row rowsep='0'>
d9491 1
a9491 1
TEXTELT16:	[delta: INT8
d9496 1
a9496 2
	\ string: STRING16]
<!-- .TE -->
d9500 2
a9501 2
    <row rowsep='0'>
      <entry>
d9504 3
a9506 3
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>Font ,</emphasis>
<emphasis role='bold'>GContext , </emphasis>
d9518 1
a9518 1
<emphasis role='bold'>PolyText8 , </emphasis>
d9526 4
a9529 4
<para id="requests:ImageText8">
<emphasis role='bold'>ImageText8</emphasis>
<indexterm significance="preferred"><primary>ImageText8</primary></indexterm>
</para>
d9560 2
a9561 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d9577 3
a9579 3
<!-- .DS -->
[x, y - font-ascent]
<!-- .DE -->
d9583 3
a9585 3
<!-- .DS -->
overall-width
<!-- .DE -->
d9589 3
a9591 3
<!-- .DS -->
font-ascent + font-descent
<!-- .DE -->
d9596 1
a9596 1
<emphasis role='bold'>QueryTextExtents </emphasis>
d9602 1
a9602 1
<emphasis role='bold'>Copy ,</emphasis>
d9604 1
a9604 1
<emphasis role='bold'>Solid .</emphasis>
d9616 4
a9619 4
<para id="requests:ImageText16">
<emphasis role='bold'>ImageText16</emphasis>
<indexterm significance="preferred"><primary>ImageText16</primary></indexterm>
</para>
d9650 2
a9651 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>GContext , </emphasis>
d9663 1
a9663 1
<emphasis role='bold'>ImageText8 , </emphasis>
d9671 4
a9674 4
<para id="requests:CreateColormap">
<emphasis role='bold'>CreateColormap</emphasis>
<indexterm significance="preferred"><primary>CreateColormap</primary></indexterm>
</para>
d9698 2
a9699 2
<emphasis role='bold'>{ None , </emphasis>
<emphasis role='bold'>All }</emphasis>
d9707 5
a9711 5
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
<emphasis role='bold'>Match , </emphasis>
<emphasis role='bold'>Value , </emphasis>
<emphasis role='bold'>Window </emphasis>
d9724 1
a9724 1
<emphasis role='bold'>Match </emphasis>
d9727 2
a9728 2
<emphasis role='bold'>GrayScale , </emphasis>
<emphasis role='bold'>PseudoColor , </emphasis>
d9730 1
a9730 1
<emphasis role='bold'>DirectColor .</emphasis>
d9732 2
a9733 2
<emphasis role='bold'>StaticGray , </emphasis>
<emphasis role='bold'>StaticColor ,</emphasis>
d9735 1
a9735 1
<emphasis role='bold'>TrueColor , </emphasis>
d9740 2
a9741 2
<emphasis role='bold'>StaticGray , </emphasis>
<emphasis role='bold'>StaticColor , </emphasis>
d9743 1
a9743 1
<emphasis role='bold'>TrueColor , </emphasis>
d9745 1
a9745 1
<emphasis role='bold'>None </emphasis>
d9747 1
a9747 1
<emphasis role='bold'>Match </emphasis>
d9750 1
a9750 1
<emphasis role='bold'>None ,</emphasis>
d9756 1
a9756 1
<emphasis role='bold'>All , </emphasis>
d9760 1
a9760 1
<emphasis role='bold'>GrayScale </emphasis>
d9762 1
a9762 1
<emphasis role='bold'>PseudoColor , </emphasis>
d9764 1
a9764 1
<emphasis role='bold'>AllocColorCells </emphasis>
d9768 1
a9768 1
<emphasis role='bold'>DirectColor , </emphasis>
d9770 1
a9770 1
<emphasis role='bold'>AllocColorPlanes </emphasis>
d9776 1
a9776 1
<emphasis role='bold'>FreeColors .</emphasis>
d9779 4
a9782 4
<para id="requests:FreeColormap">
<emphasis role='bold'>FreeColormap</emphasis>
<indexterm significance="preferred"><primary>FreeColormap</primary></indexterm>
</para>
d9812 1
a9812 1
<emphasis role='bold'>UninstallColormap </emphasis>
d9815 1
a9815 1
<emphasis role='bold'>CreateWindow </emphasis>
d9817 1
a9817 1
<emphasis role='bold'>ChangeWindowAttributes ), </emphasis>
d9819 1
a9819 1
<emphasis role='bold'>None , </emphasis>
d9821 1
a9821 1
<emphasis role='bold'>ColormapNotify </emphasis>
d9824 1
a9824 1
<emphasis role='bold'>None .</emphasis>
d9830 4
a9833 4
<para id="requests:CopyColormapAndFree">
<emphasis role='bold'>CopyColormapAndFree</emphasis>
<indexterm significance="preferred"><primary>CopyColormapAndFree</primary></indexterm>
</para>
d9849 2
a9850 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Colormap , </emphasis>
d9870 1
a9870 1
<emphasis role='bold'>All </emphasis>
d9872 1
a9872 1
<emphasis role='bold'>CreateColormap </emphasis>
d9875 1
a9875 1
<emphasis role='bold'>All , </emphasis>
d9879 1
a9879 1
<emphasis role='bold'>All , </emphasis>
d9882 3
a9884 3
<emphasis role='bold'>AllocColor , </emphasis>
<emphasis role='bold'>AllocNamedColor ,</emphasis>
<emphasis role='bold'>AllocColorCells , </emphasis>
d9886 1
a9886 1
<emphasis role='bold'>AllocColorPlanes</emphasis>
d9890 4
a9893 4
<para id="requests:InstallColormap">
<emphasis role='bold'>InstallColormap</emphasis>
<indexterm significance="preferred"><primary>InstallColormap</primary></indexterm>
</para>
d9929 1
a9929 1
<emphasis role='bold'>ColormapNotify </emphasis>
d9934 1
a9934 1
<emphasis role='bold'>ColormapNotify </emphasis>
d9945 1
a9945 1
<emphasis role='bold'>InstallColormap ,</emphasis>
d9949 1
a9949 1
<emphasis role='bold'>UninstallColormap </emphasis>
d9960 4
a9963 4
<para id="requests:UninstallColormap">
<emphasis role='bold'>UninstallColormap</emphasis>
<indexterm significance="preferred"><primary>UninstallColormap</primary></indexterm>
</para>
d9990 1
a9990 1
<emphasis role='bold'>InstallColormap </emphasis>
d10001 1
a10001 1
<emphasis role='bold'>ColormapNotify </emphasis>
d10006 1
a10006 1
<emphasis role='bold'>ColormapNotify </emphasis>
d10010 4
a10013 4
<para id="requests:ListInstalledColormaps">
<emphasis role='bold'>ListInstalledColormaps</emphasis>
<indexterm significance="preferred"><primary>ListInstalledColormaps</primary></indexterm>
</para>
d10027 1
a10027 1
   ->
d10055 1
a10055 1
<emphasis role='bold'>InstallColormap </emphasis>
d10059 4
a10062 4
<para id="requests:AllocColor">
<emphasis role='bold'>AllocColor</emphasis>
<indexterm significance="preferred"><primary>AllocColor</primary></indexterm>
</para>
d10081 1
a10081 1
   ->
d10100 2
a10101 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Colormap </emphasis>
d10118 4
a10121 4
<para id="requests:AllocNamedColor">
<emphasis role='bold'>AllocNamedColor</emphasis>
<indexterm significance="preferred"><primary>AllocNamedColor</primary></indexterm>
</para>
d10140 1
a10140 1
   ->
d10164 2
a10165 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Colormap , </emphasis>
d10179 1
a10179 1
<emphasis role='bold'>AllocColor </emphasis>
d10187 4
a10190 4
<para id="requests:AllocColorCells">
<emphasis role='bold'>AllocColorCells</emphasis>
<indexterm significance="preferred"><primary>AllocColorCells</primary></indexterm>
</para>
d10214 1
a10214 1
   ->
d10228 2
a10229 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Colormap , </emphasis>
d10242 1
a10242 1
<emphasis role='bold'>Value </emphasis>
d10252 1
a10252 1
<emphasis role='bold'>GrayScale </emphasis>
d10254 1
a10254 1
<emphasis role='bold'>PseudoColor , </emphasis>
d10256 1
a10256 1
<emphasis role='bold'>DirectColor ,</emphasis>
d10259 1
a10259 1
<emphasis role='bold'>True </emphasis>
d10262 1
a10262 1
<emphasis role='bold'>GrayScale </emphasis>
d10264 1
a10264 1
<emphasis role='bold'>PseudoColor , </emphasis>
d10266 1
a10266 1
<emphasis role='bold'>DirectColor .</emphasis>
d10270 4
a10273 4
<para id="requests:AllocColorPlanes">
<emphasis role='bold'>AllocColorPlanes</emphasis>
<indexterm significance="preferred"><primary>AllocColorPlanes</primary></indexterm>
</para>
d10297 1
a10297 1
   ->
d10316 2
a10317 2
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Colormap , </emphasis>
d10330 1
a10330 1
<emphasis role='bold'>Value </emphasis>
d10336 1
a10336 1
<emphasis role='bold'>True , </emphasis>
d10341 1
a10341 1
<emphasis role='bold'>DirectColor , </emphasis>
d10352 1
a10352 1
<emphasis role='bold'>PseudoColor .</emphasis>
d10354 1
a10354 1
<emphasis role='bold'>StoreColors </emphasis>
d10356 1
a10356 1
<emphasis role='bold'>StoreNamedColor , </emphasis>
d10361 4
a10364 4
<para id="requests:FreeColors">
<emphasis role='bold'>FreeColors</emphasis>
<indexterm significance="preferred"><primary>FreeColors</primary></indexterm>
</para>
d10390 2
a10391 2
<emphasis role='bold'>Access , </emphasis>
<emphasis role='bold'>Colormap , </emphasis>
d10408 3
a10410 3
<emphasis role='bold'>AllocColor , </emphasis>
<emphasis role='bold'>AllocNamedColor ,</emphasis>
<emphasis role='bold'>AllocColorCells , </emphasis>
d10412 1
a10412 1
<emphasis role='bold'>AllocColorPlanes ).</emphasis>
d10415 1
a10415 1
<emphasis role='bold'>AllocColorPlanes </emphasis>
d10427 1
a10427 1
<emphasis role='bold'>Value </emphasis>
d10430 1
a10430 1
<emphasis role='bold'>Access </emphasis>
d10435 1
a10435 1
<emphasis role='bold'>All </emphasis>
d10437 1
a10437 1
<emphasis role='bold'>CreateColormap ).</emphasis>
d10442 4
a10445 4
<para id="requests:StoreColors">
<emphasis role='bold'>StoreColors</emphasis>
<indexterm significance="preferred"><primary>StoreColors</primary></indexterm>
</para>
d10519 1
a10519 1
<emphasis role='bold'>Value </emphasis>
d10521 1
a10521 1
<emphasis role='bold'>Access </emphasis>
d10528 4
a10531 4
<para id="requests:StoreNamedColor">
<emphasis role='bold'>StoreNamedColor</emphasis>
<indexterm significance="preferred"><primary>StoreNamedColor</primary></indexterm>
</para>
d10562 3
a10564 3
<emphasis role='bold'>Access , </emphasis>
<emphasis role='bold'>Colormap ,</emphasis>
<emphasis role='bold'>Name , </emphasis>
d10577 1
a10577 1
<emphasis role='bold'>StoreColors </emphasis>
d10582 1
a10582 1
<emphasis role='bold'>Access </emphasis>
d10584 1
a10584 1
<emphasis role='bold'>Value </emphasis>
d10586 1
a10586 1
<emphasis role='bold'>StoreColors .</emphasis>
d10589 4
a10592 4
<para id="requests:QueryColors">
<emphasis role='bold'>QueryColors</emphasis>
<indexterm significance="preferred"><primary>QueryColors</primary></indexterm>
</para>
d10611 1
a10611 1
   ->
d10639 1
a10639 1
<emphasis role='bold'>Colormap , </emphasis>
d10654 1
a10654 1
<emphasis role='bold'>Value </emphasis>
d10660 4
a10663 4
<para id="requests:LookupColor">
<emphasis role='bold'>LookupColor</emphasis>
<indexterm significance="preferred"><primary>LookupColor</primary></indexterm>
</para>
d10682 1
a10682 1
   ->
d10701 1
a10701 1
<emphasis role='bold'>Colormap , </emphasis>
d10720 4
a10723 4
<para id="requests:CreateCursor">
<emphasis role='bold'>CreateCursor</emphasis>
<indexterm significance="preferred"><primary>CreateCursor</primary></indexterm>
</para>
d10765 3
a10767 3
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
<emphasis role='bold'>Match , </emphasis>
d10781 1
a10781 1
<emphasis role='bold'>StaticGray </emphasis>
d10783 1
a10783 1
<emphasis role='bold'>GrayScale </emphasis>
d10788 1
a10788 1
<emphasis role='bold'>Match </emphasis>
d10798 1
a10798 1
<emphasis role='bold'>Match </emphasis>
d10802 1
a10802 1
<emphasis role='bold'>Match </emphasis>
d10819 4
a10822 4
<para id="requests:CreateGlyphCursor">
<emphasis role='bold'>CreateGlyphCursor</emphasis>
<indexterm significance="preferred"><primary>CreateGlyphCursor</primary></indexterm>
</para>
d10864 3
a10866 3
<emphasis role='bold'>Alloc ,</emphasis>
<emphasis role='bold'>Font , </emphasis>
<emphasis role='bold'>IDChoice , </emphasis>
d10878 1
a10878 1
<emphasis role='bold'>CreateCursor , </emphasis>
d10883 1
a10883 1
<emphasis role='bold'>Value </emphasis>
d10907 4
a10910 4
<para id="requests:FreeCursor">
<emphasis role='bold'>FreeCursor</emphasis>
<indexterm significance="preferred"><primary>FreeCursor</primary></indexterm>
</para>
d10940 4
a10943 4
<para id="requests:RecolorCursor">
<emphasis role='bold'>RecolorCursor</emphasis>
<indexterm significance="preferred"><primary>RecolorCursor</primary></indexterm>
</para>
d10984 4
a10987 4
<para id="requests:QueryBestSize">
<emphasis role='bold'>QueryBestSize</emphasis>
<indexterm significance="preferred"><primary>QueryBestSize</primary></indexterm>
</para>
d10996 3
a10998 3
<emphasis role='bold'>{ Cursor , </emphasis>
<emphasis role='bold'>Tile , </emphasis>
<emphasis role='bold'>Stipple }</emphasis>
d11014 1
a11014 1
   ->
d11028 2
a11029 2
<emphasis role='bold'>Drawable , </emphasis>
<emphasis role='bold'>Match ,</emphasis>
d11042 1
a11042 1
<emphasis role='bold'>Cursor , </emphasis>
d11045 1
a11045 1
<emphasis role='bold'>Tile , </emphasis>
d11048 1
a11048 1
<emphasis role='bold'>Stipple , </emphasis>
d11053 1
a11053 1
<emphasis role='bold'>Cursor , </emphasis>
d11056 1
a11056 1
<emphasis role='bold'>Tile </emphasis>
d11058 1
a11058 1
<emphasis role='bold'>Stipple , </emphasis>
d11061 1
a11061 1
<emphasis role='bold'>InputOnly </emphasis>
d11063 1
a11063 1
<emphasis role='bold'>Tile </emphasis>
d11065 1
a11065 1
<emphasis role='bold'>Stipple </emphasis>
d11067 1
a11067 1
<emphasis role='bold'>Match </emphasis>
d11071 4
a11074 4
<para id="requests:QueryExtension">
<emphasis role='bold'>QueryExtension</emphasis>
<indexterm significance="preferred"><primary>QueryExtension</primary></indexterm>
</para>
d11088 1
a11088 1
   ->
d11138 4
a11141 4
<para id="requests:ListExtensions">
<emphasis role='bold'>ListExtensions</emphasis>
<indexterm significance="preferred"><primary>ListExtensions</primary></indexterm>
</para>
d11148 1
a11148 1
   ->
d11166 4
a11169 4
<para id="requests:SetModifierMapping">
<emphasis role='bold'>SetModifierMapping</emphasis>
<indexterm significance="preferred"><primary>SetModifierMapping</primary></indexterm>
</para>
d11188 1
a11188 1
   ->
d11195 3
a11197 3
<emphasis role='bold'>{ Success , </emphasis>
<emphasis role='bold'>Busy , </emphasis>
<emphasis role='bold'>Failed }</emphasis>
d11205 1
a11205 1
<emphasis role='bold'>Alloc ,</emphasis>
d11219 1
a11219 1
<emphasis role='bold'>Length </emphasis>
d11224 7
a11230 7
<emphasis role='bold'>Shift , </emphasis>
<emphasis role='bold'>Lock , </emphasis>
<emphasis role='bold'>Control , </emphasis>
<emphasis role='bold'>Mod1 ,</emphasis>
<emphasis role='bold'>Mod2 , </emphasis>
<emphasis role='bold'>Mod3 , </emphasis>
<emphasis role='bold'>Mod4 , </emphasis>
d11232 1
a11232 1
<emphasis role='bold'>Mod5 ,</emphasis>
d11238 1
a11238 1
<emphasis role='bold'>Value </emphasis>
d11254 1
a11254 1
<emphasis role='bold'>Failed </emphasis>
d11262 1
a11262 1
<emphasis role='bold'>Busy , </emphasis>
d11267 1
a11267 1
<emphasis role='bold'>MappingNotify </emphasis>
d11269 1
a11269 1
<emphasis role='bold'>Success </emphasis>
d11273 4
a11276 4
<para id="requests:GetModifierMapping">
<emphasis role='bold'>GetModifierMapping</emphasis>
<indexterm significance="preferred"><primary>GetModifierMapping</primary></indexterm>
</para>
d11283 1
a11283 1
   ->
d11309 7
a11315 7
<emphasis role='bold'>Shift ,</emphasis>
<emphasis role='bold'>Lock ,</emphasis>
<emphasis role='bold'>Control ,</emphasis>
<emphasis role='bold'>Mod1 ,</emphasis>
<emphasis role='bold'>Mod2 ,</emphasis>
<emphasis role='bold'>Mod3 ,</emphasis>
<emphasis role='bold'>Mod4 ,</emphasis>
d11317 1
a11317 1
<emphasis role='bold'>Mod5 ,</emphasis>
d11326 4
a11329 4
<para id="requests:ChangeKeyboardMapping">
<emphasis role='bold'>ChangeKeyboardMapping</emphasis>
<indexterm significance="preferred"><primary>ChangeKeyboardMapping</primary></indexterm>
</para>
d11355 1
a11355 1
<emphasis role='bold'>Alloc ,</emphasis>
d11371 1
a11371 1
<emphasis role='bold'>Length </emphasis>
d11375 1
a11375 1
<emphasis role='bold'>Value </emphasis>
d11377 3
a11379 3
<!-- .DS -->
first-keycode + (keysyms-length / keysyms-per-keycode) - 1
<!-- .DE -->
d11384 1
a11384 1
<emphasis role='bold'>Value </emphasis>
d11388 3
a11390 3
<!-- .DS -->
(K - first-keycode) * keysyms-per-keycode + N
<!-- .DE -->
d11397 1
a11397 1
<emphasis role='bold'>NoSymbol </emphasis>
d11400 1
a11400 1
<emphasis role='bold'>NoSymbol </emphasis>
d11405 1
a11405 1
<emphasis role='bold'>MappingNotify </emphasis>
d11410 2
a11411 1
it is merely stored for reading and writing by clients (see section 5).
d11414 4
a11417 4
<para id="requests:GetKeyboardMapping">
<emphasis role='bold'>GetKeyboardMapping</emphasis>
<indexterm significance="preferred"><primary>GetKeyboardMapping</primary></indexterm>
</para>
d11436 1
a11436 1
   ->
d11469 1
a11469 1
<emphasis role='bold'>Value </emphasis>
d11471 3
a11473 3
<!-- .DS -->
first-keycode + count - 1
<!-- .DE -->
d11478 1
a11478 1
<emphasis role='bold'>Value </emphasis>
d11481 3
a11483 3
<!-- .DS -->
count * keysyms-per-keycode
<!-- .DE -->
d11488 3
a11490 3
<!-- .DS -->
(K - first-keycode) * keysyms-per-keycode + N
<!-- .DE -->
d11497 1
a11497 1
<emphasis role='bold'>NoSymbol </emphasis>
d11501 4
a11504 4
<para id="requests:ChangeKeyboardControl">
<emphasis role='bold'>ChangeKeyboardControl</emphasis>
<indexterm significance="preferred"><primary>ChangeKeyboardControl</primary></indexterm>
</para>
d11597 1
a11597 1
<emphasis role='bold'>Value </emphasis>
d11605 1
a11605 1
<emphasis role='bold'>Value </emphasis>
d11612 1
a11612 1
<emphasis role='bold'>Value </emphasis>
d11620 1
a11620 1
<emphasis role='bold'>Value </emphasis>
d11631 1
a11631 1
<emphasis role='bold'>Match </emphasis>
d11641 1
a11641 1
<emphasis role='bold'>Match </emphasis>
d11648 1
a11648 1
<emphasis role='bold'>On ,</emphasis>
d11651 1
a11651 1
<emphasis role='bold'>Off ,</emphasis>
d11654 1
a11654 1
<emphasis role='bold'>KeyPress </emphasis>
d11656 1
a11656 1
<emphasis role='bold'>KeyRelease </emphasis>
d11672 4
a11675 4
<para id="requests:GetKeyboardControl">
<emphasis role='bold'>GetKeyboardControl</emphasis>
<indexterm significance="preferred"><primary>GetKeyboardControl</primary></indexterm>
</para>
d11682 1
a11682 1
   ->
d11714 2
a11715 2
<emphasis role='bold'>{ On , </emphasis>
<emphasis role='bold'>Off }</emphasis>
d11741 4
a11744 4
<para id="requests:Bell">
<emphasis role='bold'>Bell</emphasis>
<indexterm significance="preferred"><primary>Bell</primary></indexterm>
</para>
d11773 1
a11773 1
<emphasis role='bold'>Value </emphasis>
d11776 3
a11778 3
<!-- .DS -->
base - [(base * percent) / 100] + percent
<!-- .DE -->
d11782 3
a11784 3
<!-- .DS -->
base + [(base * percent) / 100]
<!-- .DE -->
d11787 4
a11790 4
<para id="requests:SetPointerMapping">
<emphasis role='bold'>SetPointerMapping</emphasis>
<indexterm significance="preferred"><primary>SetPointerMapping</primary></indexterm>
</para>
d11804 1
a11804 1
   ->
d11811 2
a11812 2
<emphasis role='bold'>{ Success , </emphasis>
<emphasis role='bold'>Busy }</emphasis>
d11833 1
a11833 1
<emphasis role='bold'>GetPointerMapping </emphasis>
d11835 1
a11835 1
<emphasis role='bold'>Value </emphasis>
d11844 1
a11844 1
<emphasis role='bold'>Value </emphasis>
d11850 1
a11850 1
<emphasis role='bold'>Busy ,</emphasis>
d11855 1
a11855 1
<emphasis role='bold'>MappingNotify </emphasis>
d11857 1
a11857 1
<emphasis role='bold'>Success </emphasis>
d11861 4
a11864 4
<para id="requests:GetPointerMapping">
<emphasis role='bold'>GetPointerMapping</emphasis>
<indexterm significance="preferred"><primary>GetPointerMapping</primary></indexterm>
</para>
d11871 1
a11871 1
   ->
d11895 4
a11898 4
<para id="requests:ChangePointerControl">
<emphasis role='bold'>ChangePointerControl</emphasis>
<indexterm significance="preferred"><primary>ChangePointerControl</primary></indexterm>
</para>
d11943 1
a11943 1
<emphasis role='bold'>Value </emphasis>
d11947 4
a11950 4
<para id="requests:GetPointerControl">
<emphasis role='bold'>GetPointerControl</emphasis>
<indexterm significance="preferred"><primary>GetPointerControl</primary></indexterm>
</para>
d11957 1
a11957 1
   ->
d11981 4
a11984 4
<para id="requests:SetScreenSaver">
<emphasis role='bold'>SetScreenSaver</emphasis>
<indexterm significance="preferred"><primary>SetScreenSaver</primary></indexterm>
</para>
d11998 3
a12000 3
<emphasis role='bold'>{ Yes , </emphasis>
<emphasis role='bold'>No , </emphasis>
<emphasis role='bold'>Default }</emphasis>
d12006 3
a12008 3
<emphasis role='bold'>{ Yes , </emphasis>
<emphasis role='bold'>No , </emphasis>
<emphasis role='bold'>Default }</emphasis>
d12029 1
a12029 1
<emphasis role='bold'>Value </emphasis>
d12048 1
a12048 1
<emphasis role='bold'>ForceScreenSaver </emphasis>
d12050 1
a12050 1
<emphasis role='bold'>Reset ,</emphasis>
d12063 4
a12066 4
<para id="requests:GetScreenSaver">
<emphasis role='bold'>GetScreenSaver</emphasis>
<indexterm significance="preferred"><primary>GetScreenSaver</primary></indexterm>
</para>
d12073 1
a12073 1
   ->
d12085 2
a12086 2
<emphasis role='bold'>{ Yes , </emphasis>
<emphasis role='bold'>No }</emphasis>
d12092 2
a12093 2
<emphasis role='bold'>{ Yes , </emphasis>
<emphasis role='bold'>No }</emphasis>
d12106 4
a12109 4
<para id="requests:ForceScreenSaver">
<emphasis role='bold'>ForceScreenSaver</emphasis>
<indexterm significance="preferred"><primary>ForceScreenSaver</primary></indexterm>
</para>
d12118 2
a12119 2
<emphasis role='bold'>{ Activate , </emphasis>
<emphasis role='bold'>Reset }</emphasis>
d12138 1
a12138 1
<emphasis role='bold'>Activate </emphasis>
d12143 1
a12143 1
<emphasis role='bold'>Reset </emphasis>
d12150 4
a12153 4
<para id="requests:ChangeHosts">
<emphasis role='bold'>ChangeHosts</emphasis>
<indexterm significance="preferred"><primary>ChangeHosts</primary></indexterm>
</para>
d12162 2
a12163 2
<emphasis role='bold'>{ Insert , </emphasis>
<emphasis role='bold'>Delete }</emphasis>
d12176 1
a12176 1
<emphasis role='bold'>Access , </emphasis>
d12188 1
d12198 1
a12198 1
<emphasis role='bold'>Access </emphasis>
d12207 1
d12212 1
a12212 1
<emphasis role='bold'>Value </emphasis>
d12267 4
a12270 4
<para id="requests:ListHosts">
<emphasis role='bold'>ListHosts</emphasis>
<indexterm significance="preferred"><primary>ListHosts</primary></indexterm>
</para>
d12277 1
a12277 1
   ->
d12284 2
a12285 2
<emphasis role='bold'>{ Enabled , </emphasis>
<emphasis role='bold'>Disabled }</emphasis>
d12308 4
a12311 4
<para id="requests:SetAccessControl">
<emphasis role='bold'>SetAccessControl</emphasis>
<indexterm significance="preferred"><primary>SetAccessControl</primary></indexterm>
</para>
d12320 2
a12321 2
<emphasis role='bold'>{ Enable , </emphasis>
<emphasis role='bold'>Disable }</emphasis>
d12329 1
a12329 1
<emphasis role='bold'>Access ,</emphasis>
d12347 1
a12347 1
<emphasis role='bold'>Access </emphasis>
d12351 4
a12354 4
<para id="requests:SetCloseDownMode">
<emphasis role='bold'>SetCloseDownMode</emphasis>
<indexterm significance="preferred"><primary>SetCloseDownMode</primary></indexterm>
</para>
d12363 3
a12365 3
<emphasis role='bold'>{ Destroy , </emphasis>
<emphasis role='bold'>RetainPermanent , </emphasis>
<emphasis role='bold'>RetainTemporary }</emphasis>
d12386 1
a12386 1
<emphasis role='bold'>Destroy </emphasis>
d12388 2
a12389 1
The meaning of the close-down mode is described in section 10.
d12392 4
a12395 4
<para id="requests:KillClient">
<emphasis role='bold'>KillClient</emphasis>
<indexterm significance="preferred"><primary>KillClient</primary></indexterm>
</para>
d12423 1
a12423 1
<emphasis role='bold'>KillClient </emphasis>
d12426 1
a12426 1
<emphasis role='bold'>RetainPermanent </emphasis>
d12428 3
a12430 2
<emphasis role='bold'>RetainTemporary </emphasis>
mode, all of the client's resources are destroyed (see section 10).
d12432 1
a12432 1
<emphasis role='bold'>AllTemporary </emphasis>
d12435 1
a12435 1
<emphasis role='bold'>RetainTemporary </emphasis>
d12439 4
a12442 4
<para id="requests:NoOperation">
<emphasis role='bold'>NoOperation</emphasis>
<indexterm significance="preferred"><primary>NoOperation</primary></indexterm>
</para>
d12454 1
d12466 1
a12466 1
<emphasis role='bold'>UngrabPointer </emphasis>
d12469 1
a12469 1
<emphasis role='bold'>UngrabKeyboard </emphasis>
d12473 1
a12473 1
<emphasis role='bold'>UngrabServer </emphasis>
d12476 1
a12476 1
<emphasis role='bold'>SetSelectionOwner </emphasis>
d12480 1
a12480 1
<emphasis role='bold'>SetCloseDownMode </emphasis>
d12482 1
a12482 1
<emphasis role='bold'>RetainPermanent </emphasis>
d12484 1
a12484 1
<emphasis role='bold'>RetainTemporary , </emphasis>
d12490 1
a12490 1
<emphasis role='bold'>Destroy , </emphasis>
d12500 1
a12500 1
<emphasis role='bold'>MapWindow </emphasis>
d12510 1
a12510 1
<emphasis role='bold'>Free </emphasis>
d12519 1
a12519 1
<emphasis role='bold'>Destroy </emphasis>
d12524 1
a12524 1
<emphasis role='bold'>RetainPermanent </emphasis>
d12526 1
a12526 1
<emphasis role='bold'>RetainTemporary </emphasis>
d12533 1
a12533 1
<emphasis role='bold'>PointerRoot .</emphasis>
d12537 1
a12537 1
<emphasis role='bold'>RetainPermanent </emphasis>
d12539 1
a12539 1
<emphasis role='bold'>RetainTemporary </emphasis>
d12558 1
a12558 1
<emphasis role='bold'>GrabButton</emphasis>
d12592 1
a12592 1
<emphasis role='bold'>True </emphasis>
d12594 1
a12594 1
<emphasis role='bold'>OwnerGrabButton </emphasis>
d12620 1
a12620 1
<emphasis role='bold'>UngrabPointer </emphasis>
d12622 1
a12622 1
<emphasis role='bold'>ChangeActivePointerGrab </emphasis>
d12626 4
a12629 4
<para id="events:KeyPress">
<emphasis role='bold'>KeyPress</emphasis>
<indexterm significance="preferred"><primary>KeyPress</primary></indexterm>
</para>
d12637 6
d12644 1
a12644 1
<emphasis role='bold'>KeyRelease</emphasis>
d12650 1
a12650 1
<emphasis role='bold'>ButtonPress</emphasis>
d12656 1
a12656 1
<emphasis role='bold'>ButtonRelease</emphasis>
d12662 1
a12662 1
<emphasis role='bold'>MotionNotify</emphasis>
d12714 1
a12714 1
<emphasis role='bold'>KeyPress </emphasis>
d12716 1
a12716 1
<emphasis role='bold'>KeyRelease </emphasis>
d12740 1
a12740 1
<emphasis role='bold'>None .</emphasis>
d12785 1
a12785 1
<emphasis role='bold'>MotionNotify </emphasis>
d12791 1
a12791 1
<emphasis role='bold'>PointerMotion </emphasis>
d12794 1
a12794 1
<emphasis role='bold'>Button[1-5]Motion </emphasis>
d12796 1
a12796 1
<emphasis role='bold'>MotionNotify </emphasis>
d12800 2
a12801 2
<emphasis role='bold'>ButtonMotion , </emphasis>
<emphasis role='bold'>MotionNotify </emphasis>
d12804 1
a12804 1
<emphasis role='bold'>MotionNotify , </emphasis>
d12807 1
a12807 1
<emphasis role='bold'>PointerMotionHint </emphasis>
d12810 1
a12810 1
<emphasis role='bold'>MotionNotify </emphasis>
d12812 1
a12812 1
<emphasis role='bold'>Hint ) </emphasis>
d12817 1
a12817 1
<emphasis role='bold'>QueryPointer </emphasis>
d12819 1
a12819 1
<emphasis role='bold'>GetMotionEvents </emphasis>
d12823 3
a12825 4
<para id="events:EnterNotify">
<emphasis role='bold'>EnterNotify</emphasis>
<indexterm significance="preferred"><primary>EnterNotify</primary></indexterm>
</para>
d12832 6
d12839 1
a12839 1
<emphasis role='bold'>LeaveNotify</emphasis>
d12867 3
a12869 3
<emphasis role='bold'>{ Normal , </emphasis>
<emphasis role='bold'>Grab , </emphasis>
<emphasis role='bold'>Ungrab }</emphasis>
d12875 5
a12879 5
<emphasis role='bold'>{ Ancestor , </emphasis>
<emphasis role='bold'>Virtual ,</emphasis>
<emphasis role='bold'>Inferior , </emphasis>
<emphasis role='bold'>Nonlinear , </emphasis>
<emphasis role='bold'>NonlinearVirtual }</emphasis>
d12906 1
a12906 1
<emphasis role='bold'>EnterNotify </emphasis>
d12908 1
a12908 1
<emphasis role='bold'>LeaveNotify </emphasis>
d12910 1
a12910 1
<emphasis role='bold'>MotionNotify </emphasis>
d12913 1
a12913 1
<emphasis role='bold'>EnterWindow </emphasis>
d12915 1
a12915 1
<emphasis role='bold'>EnterNotify </emphasis>
d12917 1
a12917 1
<emphasis role='bold'>LeaveWindow </emphasis>
d12919 1
a12919 1
<emphasis role='bold'>LeaveNotify </emphasis>
d12932 1
a12932 1
<emphasis role='bold'>LeaveNotify </emphasis>
d12936 1
a12936 1
<emphasis role='bold'>None .</emphasis>
d12938 1
a12938 1
<emphasis role='bold'>EnterNotify </emphasis>
d12942 1
a12942 1
<emphasis role='bold'>None .</emphasis>
d12945 1
a12945 1
<emphasis role='bold'>True .</emphasis>
d12947 1
a12947 1
<emphasis role='bold'>False .</emphasis>
d12951 1
a12951 1
<emphasis role='bold'>Normal .</emphasis>
d12953 1
a12953 1
<emphasis role='bold'>Grab , </emphasis>
d12955 1
a12955 1
<emphasis role='bold'>Ungrab .</emphasis>
d12959 1
a12959 1
<emphasis role='bold'>EnterNotify </emphasis>
d12961 1
a12961 1
<emphasis role='bold'>LeaveNotify </emphasis>
d12964 5
a12968 5
<emphasis role='bold'>UnmapNotify , </emphasis>
<emphasis role='bold'>MapNotify ,</emphasis>
<emphasis role='bold'>ConfigureNotify , </emphasis>
<emphasis role='bold'>GravityNotify , </emphasis>
<emphasis role='bold'>CirculateNotify ),</emphasis>
d12970 1
a12970 1
<emphasis role='bold'>EnterNotify </emphasis>
d12972 1
a12972 1
<emphasis role='bold'>LeaveNotify </emphasis>
d12974 2
a12975 2
<emphasis role='bold'>FocusOut , </emphasis>
<emphasis role='bold'>VisibilityNotify , </emphasis>
d12977 1
a12977 1
<emphasis role='bold'>Expose </emphasis>
d12992 1
a12992 1
<emphasis role='bold'>LeaveNotify </emphasis>
d12994 1
a12994 1
<emphasis role='bold'>Ancestor </emphasis>
d13000 1
a13000 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13002 1
a13002 1
<emphasis role='bold'>Virtual </emphasis>
d13008 1
a13008 1
<emphasis role='bold'>EnterNotify </emphasis>
d13010 1
a13010 1
<emphasis role='bold'>Inferior </emphasis>
d13025 1
a13025 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13027 1
a13027 1
<emphasis role='bold'>Inferior </emphasis>
d13033 1
a13033 1
<emphasis role='bold'>EnterNotify </emphasis>
d13035 1
a13035 1
<emphasis role='bold'>Virtual </emphasis>
d13041 1
a13041 1
<emphasis role='bold'>EnterNotify </emphasis>
d13043 1
a13043 1
<emphasis role='bold'>Ancestor </emphasis>
d13057 1
a13057 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13059 1
a13059 1
<emphasis role='bold'>Nonlinear </emphasis>
d13065 1
a13065 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13067 1
a13067 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13073 1
a13073 1
<emphasis role='bold'>EnterNotify </emphasis>
d13075 1
a13075 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13081 1
a13081 1
<emphasis role='bold'>EnterNotify </emphasis>
d13083 1
a13083 1
<emphasis role='bold'>Nonlinear </emphasis>
d13096 1
a13096 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13098 1
a13098 1
<emphasis role='bold'>Nonlinear </emphasis>
d13105 1
a13105 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13107 1
a13107 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13114 1
a13114 1
<emphasis role='bold'>EnterNotify </emphasis>
d13116 1
a13116 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13123 1
a13123 1
<emphasis role='bold'>EnterNotify </emphasis>
d13125 1
a13125 1
<emphasis role='bold'>Nonlinear </emphasis>
d13134 1
a13134 1
<emphasis role='bold'>ButtonPress </emphasis>
d13142 1
a13142 1
<emphasis role='bold'>EnterNotify </emphasis>
d13144 1
a13144 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13146 1
a13146 1
<emphasis role='bold'>Grab </emphasis>
d13148 1
a13148 1
<emphasis role='bold'>Normal </emphasis>
d13160 1
a13160 1
<emphasis role='bold'>ButtonRelease </emphasis>
d13168 1
a13168 1
<emphasis role='bold'>EnterNotify </emphasis>
d13170 1
a13170 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13172 1
a13172 1
<emphasis role='bold'>Ungrab </emphasis>
d13174 1
a13174 1
<emphasis role='bold'>Normal </emphasis>
d13184 4
a13187 8
<para id="events:FocusIn">
<emphasis role='bold'>FocusIn</emphasis>
<indexterm significance="preferred"><primary>FocusIn</primary></indexterm>
</para>
<para id="events:FocusOut">
<emphasis role='bold'>FocusOut</emphasis>
<indexterm significance="preferred"><primary>FocusOut</primary></indexterm>
</para>
d13195 12
d13214 4
a13217 4
<emphasis role='bold'>{ Normal , </emphasis>
<emphasis role='bold'>WhileGrabbed , </emphasis>
<emphasis role='bold'>Grab , </emphasis>
<emphasis role='bold'>Ungrab }</emphasis>
d13246 1
a13246 1
<emphasis role='bold'>FocusChange </emphasis>
d13249 1
a13249 1
<emphasis role='bold'>SetInputFocus </emphasis>
d13251 1
a13251 1
<emphasis role='bold'>Normal .</emphasis>
d13253 1
a13253 1
<emphasis role='bold'>SetInputFocus </emphasis>
d13255 1
a13255 1
<emphasis role='bold'>WhileGrabbed .</emphasis>
d13257 1
a13257 1
<emphasis role='bold'>Grab , </emphasis>
d13259 1
a13259 1
<emphasis role='bold'>Ungrab .</emphasis>
d13263 1
a13263 1
<emphasis role='bold'>FocusOut </emphasis>
d13265 1
a13265 1
<emphasis role='bold'>UnmapNotify </emphasis>
d13267 1
a13267 1
<emphasis role='bold'>FocusOut </emphasis>
d13269 3
a13271 3
<emphasis role='bold'>EnterNotify , </emphasis>
<emphasis role='bold'>LeaveNotify , </emphasis>
<emphasis role='bold'>VisibilityNotify , </emphasis>
d13273 1
a13273 1
<emphasis role='bold'>Expose </emphasis>
d13277 1
a13277 1
<emphasis role='bold'>Normal </emphasis>
d13279 1
a13279 1
<emphasis role='bold'>WhileGrabbed </emphasis>
d13290 1
a13290 1
<emphasis role='bold'>FocusOut </emphasis>
d13292 1
a13292 1
<emphasis role='bold'>Ancestor </emphasis>
d13298 1
a13298 1
<emphasis role='bold'>FocusOut </emphasis>
d13300 1
a13300 1
<emphasis role='bold'>Virtual </emphasis>
d13306 1
a13306 1
<emphasis role='bold'>FocusIn </emphasis>
d13308 1
a13308 1
<emphasis role='bold'>Inferior </emphasis>
d13316 1
a13316 1
<emphasis role='bold'>FocusIn </emphasis>
d13318 1
a13318 1
<emphasis role='bold'>Pointer </emphasis>
d13335 1
a13335 1
<emphasis role='bold'>FocusOut </emphasis>
d13337 1
a13337 1
<emphasis role='bold'>Pointer </emphasis>
d13343 1
a13343 1
<emphasis role='bold'>FocusOut </emphasis>
d13345 1
a13345 1
<emphasis role='bold'>Inferior </emphasis>
d13351 1
a13351 1
<emphasis role='bold'>FocusIn </emphasis>
d13353 1
a13353 1
<emphasis role='bold'>Virtual </emphasis>
d13359 1
a13359 1
<emphasis role='bold'>FocusIn </emphasis>
d13361 1
a13361 1
<emphasis role='bold'>Ancestor </emphasis>
d13376 1
a13376 1
<emphasis role='bold'>FocusOut </emphasis>
d13378 1
a13378 1
<emphasis role='bold'>Pointer </emphasis>
d13384 1
a13384 1
<emphasis role='bold'>FocusOut </emphasis>
d13386 1
a13386 1
<emphasis role='bold'>Nonlinear </emphasis>
d13392 1
a13392 1
<emphasis role='bold'>FocusOut </emphasis>
d13394 1
a13394 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13400 1
a13400 1
<emphasis role='bold'>FocusIn </emphasis>
d13402 1
a13402 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13408 1
a13408 1
<emphasis role='bold'>FocusIn </emphasis>
d13410 1
a13410 1
<emphasis role='bold'>Nonlinear </emphasis>
d13417 1
a13417 1
<emphasis role='bold'>FocusIn </emphasis>
d13419 1
a13419 1
<emphasis role='bold'>Pointer </emphasis>
d13435 1
a13435 1
<emphasis role='bold'>FocusOut </emphasis>
d13437 1
a13437 1
<emphasis role='bold'>Pointer </emphasis>
d13443 1
a13443 1
<emphasis role='bold'>FocusOut </emphasis>
d13445 1
a13445 1
<emphasis role='bold'>Nonlinear </emphasis>
d13452 1
a13452 1
<emphasis role='bold'>FocusOut </emphasis>
d13454 1
a13454 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13461 1
a13461 1
<emphasis role='bold'>FocusIn </emphasis>
d13463 1
a13463 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13470 1
a13470 1
<emphasis role='bold'>FocusIn </emphasis>
d13472 1
a13472 1
<emphasis role='bold'>Nonlinear </emphasis>
d13479 1
a13479 1
<emphasis role='bold'>FocusIn </emphasis>
d13481 1
a13481 1
<emphasis role='bold'>Pointer </emphasis>
d13489 1
a13489 1
<emphasis role='bold'>PointerRoot </emphasis>
d13491 1
a13491 1
<emphasis role='bold'>None ) </emphasis>
d13500 1
a13500 1
<emphasis role='bold'>FocusOut </emphasis>
d13502 1
a13502 1
<emphasis role='bold'>Pointer </emphasis>
d13508 1
a13508 1
<emphasis role='bold'>FocusOut </emphasis>
d13510 1
a13510 1
<emphasis role='bold'>Nonlinear </emphasis>
d13517 1
a13517 1
<emphasis role='bold'>FocusOut </emphasis>
d13519 1
a13519 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13525 1
a13525 1
<emphasis role='bold'>FocusIn </emphasis>
d13527 1
a13527 1
<emphasis role='bold'>PointerRoot </emphasis>
d13529 1
a13529 1
<emphasis role='bold'>None ) </emphasis>
d13536 2
a13537 2
<emphasis role='bold'>PointerRoot , </emphasis>
<emphasis role='bold'>FocusIn </emphasis>
d13539 1
a13539 1
<emphasis role='bold'>Pointer </emphasis>
d13547 1
a13547 1
<emphasis role='bold'>PointerRoot </emphasis>
d13549 1
a13549 1
<emphasis role='bold'>None ) </emphasis>
d13561 1
a13561 1
<emphasis role='bold'>Pointer </emphasis>
d13567 1
a13567 1
<emphasis role='bold'>FocusOut </emphasis>
d13569 1
a13569 1
<emphasis role='bold'>PointerRoot </emphasis>
d13571 1
a13571 1
<emphasis role='bold'>None ) </emphasis>
d13578 1
a13578 1
<emphasis role='bold'>FocusIn </emphasis>
d13580 1
a13580 1
<emphasis role='bold'>NonlinearVirtual </emphasis>
d13587 1
a13587 1
<emphasis role='bold'>FocusIn </emphasis>
d13589 1
a13589 1
<emphasis role='bold'>Nonlinear </emphasis>
d13596 1
a13596 1
<emphasis role='bold'>FocusIn </emphasis>
d13598 1
a13598 1
<emphasis role='bold'>Pointer </emphasis>
d13606 1
a13606 1
<emphasis role='bold'>PointerRoot </emphasis>
d13608 1
a13608 1
<emphasis role='bold'>None </emphasis>
d13617 1
a13617 1
<emphasis role='bold'>FocusOut </emphasis>
d13619 1
a13619 1
<emphasis role='bold'>Pointer </emphasis>
d13625 1
a13625 1
<emphasis role='bold'>FocusOut </emphasis>
d13627 1
a13627 1
<emphasis role='bold'>PointerRoot </emphasis>
d13629 1
a13629 1
<emphasis role='bold'>None ) </emphasis>
d13635 1
a13635 1
<emphasis role='bold'>FocusIn </emphasis>
d13637 1
a13637 1
<emphasis role='bold'>None </emphasis>
d13639 1
a13639 1
<emphasis role='bold'>PointerRoot ) </emphasis>
d13646 2
a13647 2
<emphasis role='bold'>PointerRoot , </emphasis>
<emphasis role='bold'>FocusIn </emphasis>
d13649 1
a13649 1
<emphasis role='bold'>Pointer </emphasis>
d13658 1
a13658 1
<emphasis role='bold'>KeyPress </emphasis>
d13666 1
a13666 1
<emphasis role='bold'>FocusIn </emphasis>
d13668 1
a13668 1
<emphasis role='bold'>FocusOut </emphasis>
d13670 1
a13670 1
<emphasis role='bold'>Grab </emphasis>
d13672 1
a13672 1
<emphasis role='bold'>Normal </emphasis>
d13680 1
a13680 1
<emphasis role='bold'>KeyRelease </emphasis>
d13688 1
a13688 1
<emphasis role='bold'>FocusIn </emphasis>
d13690 1
a13690 1
<emphasis role='bold'>FocusOut </emphasis>
d13692 1
a13692 1
<emphasis role='bold'>Ungrab </emphasis>
d13694 1
a13694 1
<emphasis role='bold'>Normal </emphasis>
d13700 4
a13703 4
<para id="events:KeymapNotify">
<emphasis role='bold'>KeymapNotify</emphasis>
<indexterm significance="preferred"><primary>KeymapNotify</primary></indexterm>
</para>
d13711 5
d13725 1
a13725 1
<emphasis role='bold'>QueryKeymap .</emphasis>
d13727 1
a13727 1
<emphasis role='bold'>KeymapState </emphasis>
d13729 1
a13729 1
<emphasis role='bold'>EnterNotify </emphasis>
d13731 1
a13731 1
<emphasis role='bold'>FocusIn .</emphasis>
d13734 4
a13737 4
<para id="events:Expose">
<emphasis role='bold'>Expose</emphasis>
<indexterm significance="preferred"><primary>Expose</primary></indexterm>
</para>
d13744 5
d13773 1
a13773 1
<emphasis role='bold'>Exposure </emphasis>
d13780 1
a13780 1
<emphasis role='bold'>Always </emphasis>
d13782 1
a13782 1
<emphasis role='bold'>WhenMapped .</emphasis>
d13785 1
a13785 1
<emphasis role='bold'>Expose </emphasis>
d13793 1
a13793 1
<emphasis role='bold'>Expose </emphasis>
d13797 1
a13797 1
<emphasis role='bold'>Expose </emphasis>
d13806 1
a13806 1
<emphasis role='bold'>Expose </emphasis>
d13808 1
a13808 1
<emphasis role='bold'>InputOnly </emphasis>
d13813 1
a13813 1
<emphasis role='bold'>Expose </emphasis>
d13816 5
a13820 5
<emphasis role='bold'>UnmapNotify , </emphasis>
<emphasis role='bold'>MapNotify , </emphasis>
<emphasis role='bold'>ConfigureNotify ,</emphasis>
<emphasis role='bold'>GravityNotify , </emphasis>
<emphasis role='bold'>CirculateNotify ).</emphasis>
d13822 1
a13822 1
<emphasis role='bold'>Expose </emphasis>
d13824 1
a13824 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d13827 1
a13827 1
<emphasis role='bold'>Expose </emphasis>
d13829 1
a13829 1
<emphasis role='bold'>Visibilitity </emphasis>
d13832 1
a13832 1
<emphasis role='bold'>Expose </emphasis>
d13834 2
a13835 2
<emphasis role='bold'>FocusOut , </emphasis>
<emphasis role='bold'>EnterNotify , </emphasis>
d13837 1
a13837 1
<emphasis role='bold'>LeaveNotify </emphasis>
d13841 4
a13844 4
<para id="events:GraphicsExposure">
<emphasis role='bold'>GraphicsExposure</emphasis>
<indexterm significance="preferred"><primary>GraphicsExposure</primary></indexterm>
</para>
d13851 5
d13894 1
a13894 1
<emphasis role='bold'>GraphicsExposure </emphasis>
d13898 1
a13898 1
<emphasis role='bold'>GraphicsExposure </emphasis>
d13910 1
a13910 1
<emphasis role='bold'>CopyArea </emphasis>
d13912 1
a13912 1
<emphasis role='bold'>CopyPlane ,</emphasis>
d13916 4
a13919 4
<para id="events:NoExposure">
<emphasis role='bold'>NoExposure</emphasis>
<indexterm significance="preferred"><primary>NoExposure</primary></indexterm>
</para>
d13924 6
a13929 1
    <row rowsep='0'>
d13956 1
a13956 1
<emphasis role='bold'>GraphicsExposure </emphasis>
d13964 1
a13964 1
<emphasis role='bold'>CopyArea </emphasis>
d13966 1
a13966 1
<emphasis role='bold'>CopyPlane ,</emphasis>
d13970 4
a13973 4
<para id="events:VisibilityNotify">
<emphasis role='bold'>VisibilityNotify</emphasis>
<indexterm significance="preferred"><primary>VisibilityNotify</primary></indexterm>
</para>
d13980 5
d13992 3
a13994 3
<emphasis role='bold'>{ Unobscured , </emphasis>
<emphasis role='bold'>PartiallyObscured , </emphasis>
<emphasis role='bold'>FullyObscured }</emphasis>
d14005 1
a14005 1
<emphasis role='bold'>VisibilityChange </emphasis>
d14012 1
a14012 1
<emphasis role='bold'>Unobscured </emphasis>
d14018 1
a14018 1
<emphasis role='bold'>PartiallyObscured </emphasis>
d14024 1
a14024 1
<emphasis role='bold'>FullyObscured </emphasis>
d14028 1
a14028 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d14030 1
a14030 1
<emphasis role='bold'>InputOnly </emphasis>
d14035 1
a14035 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d14038 5
a14042 5
<emphasis role='bold'>UnmapNotify , </emphasis>
<emphasis role='bold'>MapNotify , </emphasis>
<emphasis role='bold'>ConfigureNotify ,</emphasis>
<emphasis role='bold'>GravityNotify , </emphasis>
<emphasis role='bold'>CirculateNotify ).</emphasis>
d14044 1
a14044 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d14046 1
a14046 1
<emphasis role='bold'>Expose </emphasis>
d14049 1
a14049 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d14051 1
a14051 1
<emphasis role='bold'>Expose </emphasis>
d14054 1
a14054 1
<emphasis role='bold'>VisibilityNotify </emphasis>
d14056 2
a14057 2
<emphasis role='bold'>FocusOut , </emphasis>
<emphasis role='bold'>EnterNotify , </emphasis>
d14059 1
a14059 1
<emphasis role='bold'>LeaveNotify </emphasis>
d14063 4
a14066 4
<para id="events:CreateNotify">
<emphasis role='bold'>CreateNotify</emphasis>
<indexterm significance="preferred"><primary>CreateNotify</primary></indexterm>
</para>
d14073 5
d14105 1
a14105 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14109 1
a14109 1
<emphasis role='bold'>CreateWindow </emphasis>
d14113 4
a14116 4
<para id="events:DestroyNotify">
<emphasis role='bold'>DestroyNotify</emphasis>
<indexterm significance="preferred"><primary>DestroyNotify</primary></indexterm>
</para>
d14123 5
d14140 1
a14140 1
<emphasis role='bold'>StructureNotify </emphasis>
d14142 1
a14142 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14150 1
a14150 1
<emphasis role='bold'>DestroyNotify </emphasis>
d14152 1
a14152 1
<emphasis role='bold'>DestroyNotify </emphasis>
d14159 4
a14162 4
<para id="events:UnmapNotify">
<emphasis role='bold'>UnmapNotify</emphasis>
<indexterm significance="preferred"><primary>UnmapNotify</primary></indexterm>
</para>
d14169 5
d14191 1
a14191 1
<emphasis role='bold'>StructureNotify </emphasis>
d14193 1
a14193 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14199 1
a14199 1
<emphasis role='bold'>True </emphasis>
d14202 1
a14202 1
<emphasis role='bold'>Unmap .</emphasis>
d14205 4
a14208 4
<para id="events:MapNotify">
<emphasis role='bold'>MapNotify</emphasis>
<indexterm significance="preferred"><primary>MapNotify</primary></indexterm>
</para>
d14215 5
d14237 1
a14237 1
<emphasis role='bold'>StructureNotify </emphasis>
d14239 1
a14239 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14247 4
a14250 4
<para id="events:MapRequest">
<emphasis role='bold'>MapRequest</emphasis>
<indexterm significance="preferred"><primary>MapRequest</primary></indexterm>
</para>
d14257 5
d14274 1
a14274 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d14276 1
a14276 1
<emphasis role='bold'>MapWindow </emphasis>
d14278 1
a14278 1
<emphasis role='bold'>False .</emphasis>
d14281 4
a14284 4
<para id="events:ReparentNotify">
<emphasis role='bold'>ReparentNotify</emphasis>
<indexterm significance="preferred"><primary>ReparentNotify</primary></indexterm>
</para>
d14291 5
d14318 1
a14318 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14320 1
a14320 1
<emphasis role='bold'>StructureNotify </emphasis>
d14331 4
a14334 4
<para id="events:ConfigureNotify">
<emphasis role='bold'>ConfigureNotify</emphasis>
<indexterm significance="preferred"><primary>ConfigureNotify</primary></indexterm>
</para>
d14341 5
d14379 1
a14379 1
<emphasis role='bold'>StructureNotify </emphasis>
d14381 1
a14381 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14384 1
a14384 1
<emphasis role='bold'>ConfigureWindow </emphasis>
d14392 1
a14392 1
<emphasis role='bold'>None , </emphasis>
d14398 4
a14401 4
<para id="events:GravityNotify">
<emphasis role='bold'>GravityNotify</emphasis>
<indexterm significance="preferred"><primary>GravityNotify</primary></indexterm>
</para>
d14408 5
d14430 1
a14430 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14432 1
a14432 1
<emphasis role='bold'>StructureNotify </emphasis>
d14442 4
a14445 4
<para id="events:ResizeRequest">
<emphasis role='bold'>ResizeRequest</emphasis>
<indexterm significance="preferred"><primary>ResizeRequest</primary></indexterm>
</para>
d14452 5
d14474 1
a14474 1
<emphasis role='bold'>ResizeRedirect </emphasis>
d14476 1
a14476 1
<emphasis role='bold'>ConfigureWindow </emphasis>
d14482 4
a14485 4
<para id="events:ConfigureRequest">
<emphasis role='bold'>ConfigureRequest</emphasis>
<indexterm significance="preferred"><primary>ConfigureRequest</primary></indexterm>
</para>
d14492 5
d14520 5
a14524 5
<emphasis role='bold'>{ Above , </emphasis>
<emphasis role='bold'>Below , </emphasis>
<emphasis role='bold'>TopIf , </emphasis>
<emphasis role='bold'>BottomIf , </emphasis>
<emphasis role='bold'>Opposite }</emphasis>
d14540 1
a14540 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d14542 1
a14542 1
<emphasis role='bold'>ConfigureWindow </emphasis>
d14550 1
a14550 1
<emphasis role='bold'>None </emphasis>
d14552 1
a14552 1
<emphasis role='bold'>Above </emphasis>
d14556 4
a14559 4
<para id="events:CirculateNotify">
<emphasis role='bold'>CirculateNotify</emphasis>
<indexterm significance="preferred"><primary>CirculateNotify</primary></indexterm>
</para>
d14566 5
d14578 2
a14579 2
<emphasis role='bold'>{ Top , </emphasis>
<emphasis role='bold'>Bottom }</emphasis>
d14590 1
a14590 1
<emphasis role='bold'>StructureNotify </emphasis>
d14592 1
a14592 1
<emphasis role='bold'>SubstructureNotify </emphasis>
d14595 1
a14595 1
<emphasis role='bold'>CirculateWindow </emphasis>
d14600 1
a14600 1
<emphasis role='bold'>Top , </emphasis>
d14605 4
a14608 4
<para id="events:CirculateRequest">
<emphasis role='bold'>CirculateRequest</emphasis>
<indexterm significance="preferred"><primary>CirculateRequest</primary></indexterm>
</para>
d14615 5
d14627 2
a14628 2
<emphasis role='bold'>{ Top , </emphasis>
<emphasis role='bold'>Bottom }</emphasis>
d14639 1
a14639 1
<emphasis role='bold'>SubstructureRedirect </emphasis>
d14641 1
a14641 1
<emphasis role='bold'>CirculateWindow </emphasis>
d14647 4
a14650 4
<para id="events:PropertyNotify">
<emphasis role='bold'>PropertyNotify</emphasis>
<indexterm significance="preferred"><primary>PropertyNotify</primary></indexterm>
</para>
d14657 5
d14674 2
a14675 2
<emphasis role='bold'>{ NewValue , </emphasis>
<emphasis role='bold'>Deleted }</emphasis>
d14691 1
a14691 1
<emphasis role='bold'>PropertyChange </emphasis>
d14693 1
a14693 1
<emphasis role='bold'>NewValue </emphasis>
d14695 1
a14695 1
<emphasis role='bold'>ChangeProperty </emphasis>
d14697 1
a14697 1
<emphasis role='bold'>RotateProperties ,</emphasis>
d14699 1
a14699 1
<emphasis role='bold'>ChangeProperty </emphasis>
d14701 1
a14701 1
<emphasis role='bold'>ChangeProperty </emphasis>
d14703 1
a14703 1
<emphasis role='bold'>RotateProperties .</emphasis>
d14705 1
a14705 1
<emphasis role='bold'>Deleted </emphasis>
d14708 1
a14708 1
<emphasis role='bold'>DeleteProperty </emphasis>
d14710 1
a14710 1
<emphasis role='bold'>GetProperty .</emphasis>
d14714 4
a14717 4
<para id="events:SelectionClear">
<emphasis role='bold'>SelectionClear</emphasis>
<indexterm significance="preferred"><primary>SelectionClear</primary></indexterm>
</para>
d14724 5
d14752 1
a14752 1
<emphasis role='bold'>SetSelectionOwner .</emphasis>
d14755 1
a14755 1
<emphasis role='bold'>SetSelectionOwner </emphasis>
d14759 4
a14762 4
<para id="events:SelectionRequest">
<emphasis role='bold'>SelectionRequest</emphasis>
<indexterm significance="preferred"><primary>SelectionRequest</primary></indexterm>
</para>
d14769 5
d14814 1
a14814 1
<emphasis role='bold'>ConvertSelection </emphasis>
d14817 1
a14817 1
<emphasis role='bold'>SetSelectionOwner </emphasis>
d14820 1
a14820 1
<emphasis role='bold'>ConvertSelection </emphasis>
d14826 1
a14826 1
<emphasis role='bold'>SelectionNotify </emphasis>
d14829 1
a14829 1
standard <emphasis remap='I'>Inter-Client Communication Conventions Manual</emphasis>.
d14832 4
a14835 4
<para id="events:SelectionNotify">
<emphasis role='bold'>SelectionNotify</emphasis>
<indexterm significance="preferred"><primary>SelectionNotify</primary></indexterm>
</para>
d14842 5
d14876 1
a14876 1
<emphasis role='bold'>ConvertSelection </emphasis>
d14880 1
a14880 1
<emphasis role='bold'>SendEvent .</emphasis>
d14884 1
a14884 1
<emphasis role='bold'>None ).</emphasis>
d14887 4
a14890 4
<para id="events:ColormapNotify">
<emphasis role='bold'>ColormapNotify</emphasis>
<indexterm significance="preferred"><primary>ColormapNotify</primary></indexterm>
</para>
d14897 5
d14920 2
a14921 2
<emphasis role='bold'>{ Installed , </emphasis>
<emphasis role='bold'>Uninstalled }</emphasis>
d14932 1
a14932 1
<emphasis role='bold'>ColormapChange </emphasis>
d14935 1
a14935 1
<emphasis role='bold'>True </emphasis>
d14938 1
a14938 1
<emphasis role='bold'>False </emphasis>
d14944 4
a14947 4
<para id="events:MappingNotify">
<emphasis role='bold'>MappingNotify</emphasis>
<indexterm significance="preferred"><primary>MappingNotify</primary></indexterm>
</para>
d14954 5
d14961 3
a14963 3
<emphasis role='bold'>{ Modifier , </emphasis>
<emphasis role='bold'>Keyboard , </emphasis>
<emphasis role='bold'>Pointer }</emphasis>
d14981 1
a14981 1
<emphasis role='bold'>Modifiers </emphasis>
d14983 2
a14984 2
<emphasis role='bold'>SetModifierMapping , </emphasis>
<emphasis role='bold'>Keyboard </emphasis>
d14986 1
a14986 1
<emphasis role='bold'>ChangeKeyboardMapping , </emphasis>
d14988 1
a14988 1
<emphasis role='bold'>Pointer </emphasis>
d14990 1
a14990 1
<emphasis role='bold'>SetPointerMapping .</emphasis>
d14992 1
a14992 1
<emphasis role='bold'>Keyboard , </emphasis>
d14996 4
a14999 4
<para id="events:ClientMessage">
<emphasis role='bold'>ClientMessage</emphasis>
<indexterm significance="preferred"><primary>ClientMessage</primary></indexterm>
</para>
d15006 5
d15038 1
a15038 1
<emphasis role='bold'>SendEvent .</emphasis>
d15048 1
@

