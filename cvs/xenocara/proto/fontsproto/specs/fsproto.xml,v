head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.12
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.10
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2014.09.27.17.40.12;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	lyToXzzHyMRpke6I;

1.2
date	2012.04.08.10.03.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.31.09.51.11;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to fontsproto 2.1.3
@
text
@<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % defs SYSTEM "defs.ent"> %defs;
]>


<book id="fsproto">

<bookinfo>
   <title>The X Font Service Protocol</title>
   <subtitle>X Consortium Standard</subtitle>
   <releaseinfo>X Version 11, Release &fullrelvers;</releaseinfo>
   <releaseinfo>Version 2.0</releaseinfo>
   <authorgroup>
      <author>
         <firstname>Jim</firstname><surname>Fulton</surname>
         <affiliation><orgname>Network Computing Devices, Inc.</orgname></affiliation>
      </author>
   </authorgroup>
   <edition>Revised May 2, 1994</edition>
   <copyright><year>1991</year><holder>Network Computing Devices, Inc.</holder></copyright>

<legalnotice>
<para>
Permission to use, copy, modify, distribute, and sell this
documentation for any purpose is hereby granted without fee,
provided that the above copyright notice and this permission
notice appear in all copies.  Network Computing Devices, Inc.
makes no representations about the suitability for any purpose
of the information in this document.  This documentation is
provided &ldquo;as is&rdquo; without express or implied warranty.
</para>
</legalnotice>

<legalnotice>
<para role="multiLicensing">Copyright © 1994 X Consortium</para>
<para>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &ldquo;Software&rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
</para>
<para>
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</para>
<para>
THE SOFTWARE IS PROVIDED &ldquo;AS IS&rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</para>
<para>
Except as contained in this notice, the name of the X Consortium shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the X Consortium.
</para>
</legalnotice>
</bookinfo>

<chapter id='Introduction'>
<title>Introduction</title>
<para>
The management of fonts in large, heterogeneous environments is one of the
hardest aspects of using the X Window System
<footnote id='footnote1'><para>
<firstterm><trademark>X Window System</trademark></firstterm>
is a trademark of The Open Group.
</para></footnote>
.  Multiple formats and the lack of
a consistent mechanism for exporting font data to all displays on a network
prevent the transparent use of applications across different display platforms.
The X Font Service protocol is designed to address this and other issues, with
specific emphasis on the needs of the core X protocol.  Upward-compatible
changes (typically in the form of new requests) are expected as consensus is
reached on new features (particularly outline font support).
</para>
<para>
Currently, most X displays use network file protocols such as
<acronym>NFS</acronym> and <acronym>TFTP</acronym> to
obtain raw font data which they parse directly.  Since a common binary format
for this data doesn't exist, displays must be able to interpret a variety of
formats if they are to be used with different application hosts.  This leads to
wasted code and data space and a loss of interoperability as displays are used
in unforeseen environments.
</para>
<para>
By moving the interpretation of font data out of the X server into a separate
service on the network, these problems can be greatly reduced.  In addition,
new technologies, such as dynamically generating bitmaps from scaled or outline
fonts, can be provided to all displays transparently.  For horizontal text,
caching techniques and increased processor power can potentially make
rasterization more efficient on large, centralized hosts than on individual
displays.
</para>
<para>
Each font server provides sets of fonts that may be listed and queried for
header, property, glyph extents, and bitmap information.  This data is
transmitted over the network using a binary format (with variations to support
different bit- and byte-orders) designed to minimize the amount of processing
required by the display.  Since the font server, rather than the display, is
responsible for parsing the raw font data, new formats can be used by all
displays by modifying a single font server.
</para>
<para>
From the user's point of view, font servers are simply a new type of name in
the X font path.  Network name services allow descriptive names (such as
DEPARTMENT-FONTS or APPLICATION-FONTS) to be translated into proper network
addresses.  X displays send requests to and read replies from the font server
rather than reading directly from files.  Since the X Font Service protocol is
designed to allow subsets of the font data to be requested, displays may easily
implement a variety of strategies for fine-grained demand-loading of glyphs.
</para>
</chapter>

<chapter id='Architectural_Model'>
<title>Architectural Model</title>
<!-- .XS -->
<!-- (SN Architectural Model -->
<!-- .XE -->
<para>
In this document, the words <firstterm>client</firstterm> and
<firstterm>server</firstterm> refer to the consumer and
provider of a font, respectively, unless otherwise indicated.  It is important
to note that in this context, the X server is also a font client.
</para>
<para>
The X Font Service protocol does not require any changes to the core X protocol
or to any applications.  To the user, font servers are simply additional types
of font path elements.  As such, X servers may connect to multiple font
servers, as shown in Figure 2.1.  Although the font protocol is geared towards
the X Window System, it may be also used by other consumers of font data (such
as printer drivers).
</para>

<figure id="figure2.1" label="2.1"><title>Connecting to a Font Server</title>
<literallayout class="monospaced">
 ┌────────┐              ┌───────────────┐
 │   X1   ├──────────────┤               │
 │ Server │              │  Font Server  │
 └────────┘      ┌───────┤      1        │
                 │       └───────────────┘
 ┌────────┐      │
 │   X2   ├──────┘       ┌───────────────┐
 │ Server ├──────────────┤               │
 └────────┘              │  Font Server  │
                 ┌───────┤      2        │
┌─────────┐      │       └───────────────┘
│  other  │      │
│ clients ├──────┘
└─────────┘
</literallayout>
</figure>

<para>
Clients communicate with the font server using the request/reply/event model
over any mutually-understood virtual stream connection (such as
<acronym>TCP/IP</acronym>, DECnet,
<footnote id='footnote2'><para>
<firstterm><trademark>DECnet</trademark></firstterm> is a trademark
of Digital Equipment Corporation.
</para></footnote>
etc.).  Font servers are responsible for providing data in the bit and byte
orders requested by the client.  The set of requests and events provided in the
first version of the X Font Service protocol is limited to supporting the needs
of the bitmap-oriented core X Window System protocol.  Extensions are expected
as new needs evolve.
</para>
<para>
A font server reads raw font data from a variety of sources (possibly
including other font servers) and converts it into a common format that is
transmitted to the client using the protocol described in
<link linkend='Protocol'>Section 4</link>.  New font
formats are handled by adding new converters to a font server, as shown in
Figure 2.2.
</para>

<figure id="figure2.2" label="2.2"><title>Where Font Data Comes From</title>
<literallayout class="monospaced">
                ┌────────────┐
                │   client   │
                │ (X server) │
                └─────┬──────┘
                      │
                   network
                      │
┌─────────────────────┴──────────────────────┐
│                                            │
│                font server 1               │
│                                            │
├─────┬─────┬─────┬─────┬────┬─────┬───┬─────┤
│ bdf │ snf │ pcf │ atm │ f3 │ dwf │ │ │ ... │
└─────┴─────┴─────┴─────┴────┴─────┴─│─┴─────┘
                                     │
                                  network
                                     │
                               ┌─────┴────┐
                               │   font   │
                               │ server 2 │
                               └──────────┘
</literallayout>
</figure>

<para>
The server may choose to provide named sets of fonts called
<firstterm>catalogues</firstterm>.
Clients may specify which of the sets should be used in listing or opening a
font.
</para>

<para>
An event mechanism similar to that used in the X protocol is provided for
asynchronous notification of clients by the server.
</para>

<para>
Clients may provide authorization data for the server to be used in determining
(according to the server's licensing policy) whether or not access should be
granted to particular fonts.  This is particularly useful for clients whose
authorization changes over time (such as an X server that can verify the
identity of the user).
</para>
<para>
Implementations that wish to provide additional requests or events may use the
extension mechanism.  Adding to the core font service protocol (with the
accompanying change in the major or minor version numbers) is reserved to the X
Consortium.
</para>
</chapter>

<chapter id='Font_Server_Naming'>
<title>Font Server Naming</title>
<!-- .XS -->
<!-- (SN Font Server Naming -->
<!-- .XE -->
<para>
Font clients that expose font server names to the user are encouraged to
provide ways of naming font servers symbolically (e.g. DEPARTMENT-FONTS).
However, for environments that lack appropriate name services
transport-specific names are necessary.  Since these names do occur in the
protocol, clients and servers should support at least the applicable formats
described below.  Formats for additional transports may be registered with the
X Consortium.
</para>

<section id='TCPIP_Names'>
<title>TCP/IP Names</title>
<!-- .XS -->
<!-- (SN TCP/IP Names -->
<!-- .XE -->
<para>
The following syntax should be used for TCP/IP names:

<literallayout class="monospaced">
    <replaceable>TCP name</replaceable>  ::=  <literal>tcp/</literal> <replaceable>hostname</replaceable> <literal>:</literal> <replaceable>ipportnumber</replaceable> <optional><literal>/</literal> <replaceable>cataloguelist</replaceable></optional>
</literallayout>

where <replaceable>hostname</replaceable> is either symbolic (such as
<systemitem class="systemname">expo.lcs.mit.edu</systemitem>) or numeric
decimal (such as <systemitem class="ipaddress">18.30.0.212</systemitem>).
The <replaceable>ipportnumber</replaceable> is the port on which the
font server is listening for connections.
The <replaceable>cataloguelist</replaceable> string at
the end is optional and specifies a plus-separated list of catalogues
that may be requested.  For example:
<literallayout class="monospaced">
     tcp/expo.lcs.mit.edu:8012/available+special
     tcp/18.30.0.212:7890
</literallayout>
</para>
</section>

<section id='DECnet_Names'>
<title>DECnet Names</title>
<!-- .XS -->
<!-- (SN DECnet Names -->
<!-- .XE -->
<para>
The following syntax should be used for DECnet names:

<literallayout class="monospaced">
    <replaceable>DECnet name</replaceable>  ::=  <literal>decnet/</literal> <replaceable>nodename</replaceable> <literal>::font$</literal> <replaceable>objname</replaceable> <optional><literal>/</literal> <replaceable>cataloguelist</replaceable></optional>
</literallayout>

where <replaceable>nodename</replaceable> is either symbolic (such as
<systemitem class="systemname">SRVNOD</systemitem>) or the
numeric decimal form of the DECnet address (such as
<systemitem class="ipaddress">44.70</systemitem>).
The <replaceable>objname</replaceable> is normal, case-insensitive DECnet
object name.  The <replaceable>cataloguelist</replaceable> string
at the end is
optional and specifies a plus-separated list of catalogues that may be
requested.  For example:

<literallayout class="monospaced">
     DECNET/SRVNOD::FONT$DEFAULT/AVAILABLE
     decnet/44.70::font$other
</literallayout>
</para>
</section>
</chapter>

<chapter id='Protocol'>
<title>Protocol</title>
<!-- .XS -->
<!-- (SN Protocol -->
<!-- .XE -->
<para>
The protocol described below uses the request/reply/error model and is
specified using the same conventions outlined in
<olink targetdoc='x11protocol' targetptr='Syntactic_Conventions'>Section 2
of the core X Window System protocol</olink>
<xref linkend="References:x11proto"/>:
</para>
<itemizedlist>
  <listitem>
    <para>
<!-- .IP \(bu 5 -->
Data type names are spelled in upper case with no word separators,
as in:  <link linkend="Data_Types:FONTID"><type>FONTID</type></link>
    </para>
  </listitem>
  <listitem>
    <para>
<!-- .IP \(bu 5 -->
Alternate values are capitalized with no word separators,
as in:  <constant>MaxWidth</constant>
    </para>
  </listitem>
  <listitem>
    <para>
<!-- .IP \(bu 5 -->
Structure element declarations are in lower case with hyphens
as word separators, as in:  <structfield>byte-order-msb</structfield>
    </para>
    <note>
      <para>
Structure element names are referred to in
upper case (e.g. <structfield>BYTE-ORDER-MSB</structfield>) when used in
descriptions to set them off from the surrounding
text.  When this document is typeset they will be
printed in lower case in a distinct font.
      </para>
    </note>
  </listitem>
  <listitem>
    <para>
Type declarations have the form <quote><type>name</type>: type</quote>,
as in:  <type>CARD8</type>: 8-bit byte
    </para>
  </listitem>
  <listitem>
    <para>
Comma-separated lists of alternate values are enclosed in
braces, as in:  { <constant>Min</constant>, <constant>MaxWidth</constant>,
<constant>Max</constant> }
    </para>
  </listitem>
  <listitem>
    <para>
Comma-separated lists of structure elements are enclosed in
brackets, as in:  [ <structfield>byte1</structfield>: <type>CARD8</type>,
<structfield>byte2</structfield>: <type>CARD8</type> ]
    </para>
  </listitem>
</itemizedlist>

<para>
A type with a prefix <quote>LISTof</quote> represents a counted list of
elements of that type, as in:  <type>LISTofCARD8</type>
</para>

<section id='Data_Types'>
<title>Data Types</title>
<!-- .XS -->
<!-- (SN Data Types -->
<!-- .XE -->
<para>
The following data types are used in the core X Font Server protocol:
</para>

<section id="Data_Types:ACCESSCONTEXT">
  <title><type>ACCESSCONTEXT</type></title>
  <indexterm zone="Data_Types:ACCESSCONTEXT" significance="preferred"><primary>ACCESSCONTEXT</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>ACCESSCONTEXT</type>:</entry><entry><link linkend="Data_Types:ID"><type>ID</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
<para>
This value is specified in the CreateAC request as the identifier
to be used when referring to a particular AccessContext resource
within the server.  These resources are used by the server to
store client-specified authorization information.  This
information may be used by the server to determine whether or not
the client should be granted access to particular font data.
</para>
<para>
In order to preserve the integrity of font licensing being performed by
the font server, care must be taken by a client to properly represent the
identity of the true user of the font.  Some font clients will in fact
be servers (for example, X servers) requesting fonts for their own clients.
Other font clients may be doing work on behalf of a number of different
users over time (for example, print spoolers).
</para>
<para>
<type>AccessContext</type>s
must be created (with
<link linkend="Requests:CreateAC"><function>CreateAC</function></link>)
and switched among (with
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>)
to represent all of these <quote>font users</quote> properly.
    </para>
</section>

<section id="Data_Types:ALTERNATESERVER">
  <title><type>ALTERNATESERVER</type></title>
  <indexterm zone="Data_Types:ALTERNATESERVER" significance="preferred"><primary>ALTERNATESERVER</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows="1"><type>ALTERNATESERVER</type>:</entry>
          <entry> [ <structfield>name</structfield>:</entry><entry>  <link linkend="Data_Types:STRING8"><type>STRING8</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>subset</structfield>:</entry><entry>  <link linkend="Data_Types:BOOL"><type>BOOL</type></link> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
This structure specifies the <structfield>NAME</structfield>,
encoded in <acronym>ISO</acronym> 8859-1 according
to <link linkend='Font_Server_Naming'>Section 3</link>,
of another font server that may be useful as a
substitute for this font server.
The <structfield>SUBSET</structfield> field indicates
whether or not the alternate server is likely to only contain a
subset of the fonts available from this font server.  This
information is returned during the initial connection setup and
may be used by the client to find a backup server in case of
failure.
    </para>
</section>

<section id="Data_Types:AUTH">
  <title><type>AUTH</type></title>
  <indexterm zone="Data_Types:AUTH" significance="preferred"><primary>AUTH</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows="1"><type>AUTH</type>:</entry><entry>[ <structfield>name</structfield>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>data</structfield>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
This structure specifies the name of an authorization protocol and
initial data for that protocol.  It is used in the authorization
negotiation in the initial connection setup and in the CreateAC
request.
</para>
</section>

<section id="Data_Types:BITMAPFORMAT">
  <title><type>BITMAPFORMAT</type></title>
  <indexterm zone="Data_Types:BITMAPFORMAT" significance="preferred"><primary>BITMAPFORMAT</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>BITMAPFORMAT</type>:</entry><entry><type>CARD32</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
   <type>CARD32</type> containing the following fields defined by the
   sets of values given further below
    </para>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
        <row><entry>[</entry></row>
          <row><entry>&emsp;<structfield>byte-order-msb</structfield>:</entry><entry>      1 bit,</entry></row>
          <row><entry>&emsp;<structfield>bit-order-msb</structfield>:</entry><entry>       1 bit,</entry></row>
          <row><entry>&emsp;<structfield>image-rect</structfield>:</entry><entry>          2 bits</entry><entry>{ <constant>Min</constant>,
                          <constant>MaxWidth</constant>,
                          <constant>Max</constant> },</entry></row>
          <row><entry>&emsp;<structfield>zero-pad</structfield>:</entry><entry>            4 bits,</entry></row>
          <row><entry>&emsp;<structfield>scanline-pad</structfield>:</entry><entry>        2 bits</entry><entry>{ <constant>ScanlinePad8</constant>,
                          <constant>ScanlinePad16</constant>,
                          <constant>ScanlinePad32</constant>,
                          <constant>ScanlinePad64</constant> },</entry></row>
          <row><entry>&emsp;<structfield>zero-pad</structfield>:</entry><entry>            2 bits,</entry></row>
          <row><entry>&emsp;<structfield>scanline-unit</structfield>:</entry><entry>       2 bits</entry><entry>{ <constant>ScanlineUnit8</constant>,
                          <constant>ScanlineUnit16</constant>,
                          <constant>ScanlineUnit32</constant>,
                          <constant>ScanlineUnit64</constant> },</entry></row>
          <row><entry>&emsp;<structfield>zero-pad</structfield>:</entry><entry>            2 bits,</entry></row>
          <row><entry>&emsp;<structfield>zero-pad</structfield>:</entry><entry>            16 bits,</entry></row>
          <row><entry>]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
This structure specifies how glyph images are transmitted in
response to
<link linkend="Requests:QueryXBitmaps8"><function>QueryXBitmaps8</function></link>
and
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
requests.
</para>
<para>
If the <structfield>BYTE-ORDER-MSB</structfield> bit
<literal>(1 &lt;&lt; 0)</literal> is set, the Most Significant
Byte of each scanline unit is returned first.  Otherwise, the
Least Significant Byte is returned first.
</para>
<para>
If the <structfield>BIT-ORDER-MSB</structfield> bit
<literal>(1 &lt;&lt; 1)</literal> is set, the left-most bit in
each glyph scanline unit is stored in the Most Significant Bit of
each transmitted scanline unit.  Otherwise, the left-most bit is
stored in the Least Significant Bit.
</para>
<para>
The <structfield>IMAGE-RECT</structfield> field specifies a rectangle of
pixels within the
glyph image.  It contains one of the following alternate values:

    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>ImageRectMin</constant></entry><entry><literal>(0 &lt;&lt; 2)</literal></entry></row>
          <row><entry><constant>ImageRectMaxWidth</constant></entry><entry><literal>(1 &lt;&lt; 2)</literal></entry></row>
          <row><entry><constant>ImageRectMax</constant></entry><entry><literal>(2 &lt;&lt; 2)</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
For a glyph with extents <link linkend="Data_Types:XCHARINFO"><type>XCHARINFO</type></link> in a font with header
information <link linkend="Data_Types:XFONTINFO"><type>XFONTINFO</type></link>, the <structfield>IMAGE-RECT</structfield>
values have the following meanings:
<variablelist>
  <varlistentry id="Constant:ImageRectMin">
    <term><constant>ImageRectMin</constant></term>
    <listitem>
      <indexterm zone="Constant:ImageRectMin" significance="preferred"><primary>ImageRectMin</primary></indexterm>
      <para>
This refers to the minimal bounding rectangle
surrounding the inked pixels in the glyph.  This is the
most compact representation.  The edges of the rectangle
are:
<literallayout class="monospaced">
         left:     <structfield>XCHARINFO.LBEARING</structfield>
         right:    <structfield>XCHARINFO.RBEARING</structfield>
         top:      <structfield>XCHARINFO.ASCENT</structfield>
         bottom:   <structfield>XCHARINFO.DESCENT</structfield>
</literallayout>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="Constant:ImageRectMaxWidth">
    <term><constant>ImageRectMaxWidth</constant></term>
    <listitem>
      <indexterm zone="Constant:ImageRectMaxWidth" significance="preferred"><primary>ImageRectMaxWidth</primary></indexterm>
      <para>
This refers to the scanlines between the
glyph's ascent and descent, padded on the left to the minimum
left-bearing (or 0, whichever is less) and on the right to
the maximum right-bearing (or logical-width, whichever is
greater).  All glyph images share a common horizontal
origin.  This is a combination of <constant>ImageRectMax</constant> in the
horizontal direction and <constant>ImageRectMin</constant> in the vertical
direction.  The edges of the rectangle are:

<literallayout class="monospaced">
left:         min (<structfield>XFONTINFO.MIN-BOUNDS.LBEARING</structfield>, 0)
right:        max (<structfield>XFONTINFO.MAX-BOUNDS.RBEARING</structfield>,
                   <structfield>XFONTINFO.MAX-BOUNDS.WIDTH</structfield>)
top:               <structfield>XCHARINFO.ASCENT</structfield>
bottom:            <structfield>XCHARINFO.DESCENT</structfield>
</literallayout>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="Constant:ImageRectMax">
    <term><constant>ImageRectMax</constant></term>
    <listitem>
      <indexterm zone="Constant:ImageRectMax" significance="preferred"><primary>ImageRectMax</primary></indexterm>
      <para>
This refers to all scanlines, from the maximum
ascent (or the font ascent, whichever is greater) to the
maximum descent (or the font descent, whichever is greater),
padded to the same horizontal extents as <constant>MaxWidth</constant>.
All glyph images have the same sized bitmap and share a
common origin.  This is the least compact representation,
but may be the easiest or most efficient (particularly for
character cell fonts) for some clients to use.  The edges of
the rectangle are:

<literallayout class="monospaced">
left:         min (<structfield>XFONTINFO.MIN-BOUNDS.LBEARING</structfield>, 0)
right:        max (<structfield>XFONTINFO.MAX-BOUNDS.RBEARING</structfield>,
                   <structfield>XFONTINFO.MAX-BOUNDS.WIDTH</structfield>)
top:          max (<structfield>XFONTINFO.FONT-ASCENT</structfield>,
                   <structfield>XFONTINFO.MAX-BOUNDS.ASCENT</structfield>)
bottom:       max (<structfield>XFONTINFO.FONT-DESCENT</structfield>,
                   <structfield>XFONTINFO.MAX-BOUNDS.DESCENT</structfield>)
</literallayout>
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</para>
<para>
The <structfield>SCANLINE-PAD</structfield> field specifies the number of
bits (8, 16, 32,
or 64) to which each glyph scanline is padded before transmitting.
It contains one of the following alternate values:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>ScanlinePad8</constant></entry><entry><literal>(0 &lt;&lt; 8)</literal></entry></row>
          <row><entry><constant>ScanlinePad16</constant></entry><entry><literal>(1 &lt;&lt; 8)</literal></entry></row>
          <row><entry><constant>ScanlinePad32</constant></entry><entry><literal>(2 &lt;&lt; 8)</literal></entry></row>
          <row><entry><constant>ScanlinePad64</constant></entry><entry><literal>(3 &lt;&lt; 8)</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
The <structfield>SCANLINE-UNIT</structfield> field specifies the number of
bits (8, 16, 32, or 64) that should be treated as a unit for swapping.
This value must be less than or equal to the number of bits specified by the
<structfield>SCANLINE-PAD</structfield>.  It contains one of the following
alternate values:

    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>ScanlineUnit8</constant></entry><entry><literal>(0 &lt;&lt; 12)</literal></entry></row>
          <row><entry><constant>ScanlineUnit16</constant></entry><entry><literal>(1 &lt;&lt; 12)</literal></entry></row>
          <row><entry><constant>ScanlineUnit32</constant></entry><entry><literal>(2 &lt;&lt; 12)</literal></entry></row>
          <row><entry><constant>ScanlineUnit64</constant></entry><entry><literal>(3 &lt;&lt; 12)</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
<link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link>s are byte-swapped as <type>CARD32</type>s.
All unspecified bits must be zero.
</para>
<para>
Use of an invalid <link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link> causes a
<link linkend="Errors:Format"><errorname>Format</errorname></link> error to be returned.
</para>
</section>

<section id="Data_Types:BITMAPFORMATMASK">
  <title><type>BITMAPFORMATMASK</type></title>
  <indexterm zone="Data_Types:BITMAPFORMATMASK" significance="preferred"><primary>BITMAPFORMATMASK</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>BITMAPFORMATMASK</type>:</entry><entry>     <type>CARD32</type> mask</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
<para>
This is a mask of bits representing the fields in a <link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link>:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>ByteOrderMask</constant></entry><entry><literal>(1 &lt;&lt; 0)</literal></entry></row>
          <row><entry><constant>BitOrderMask</constant></entry><entry><literal>(1 &lt;&lt; 1)</literal></entry></row>
          <row><entry><constant>ImageRectMask</constant></entry><entry><literal>(1 &lt;&lt; 2)</literal></entry></row>
          <row><entry><constant>ScanlinePadMask</constant></entry><entry><literal>(1 &lt;&lt; 3)</literal></entry></row>
          <row><entry><constant>ScanlineUnitMask</constant></entry><entry><literal>(1 &lt;&lt; 4)</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
Unspecified bits are required to be zero or else a
<link linkend="Errors:Format"><errorname>Format</errorname></link> error is returned.
</para>
</section>

<section id="Data_Types:BOOL">
  <title><type>BOOL</type></title>
  <indexterm zone="Data_Types:BOOL" significance="preferred"><primary>BOOL</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>BOOL</type>:</entry><entry>  <type>CARD8</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
<para>
This is a boolean value containing one of the following alternate
values:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>False</constant></entry><entry><literal>0</literal></entry></row>
          <row><entry><constant>True</constant></entry><entry><literal>1</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
</section>

<section id="Data_Types:BYTE">
  <title><type>BYTE</type></title>
  <indexterm zone="Data_Types:BYTE" significance="preferred"><primary>BYTE</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>BYTE</type>:</entry><entry>  8-bit value</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
This is an unsigned byte of data whose encoding
is determined by the context in which it is used.
</para>

</section>

<section id="Data_Types:CARDn">
  <title><type>CARD8</type>, <type>CARD16</type>, <type>CARD32</type></title>
  <indexterm zone="Data_Types:CARDn" significance="preferred"><primary>CARD8</primary></indexterm>
  <indexterm zone="Data_Types:CARDn" significance="preferred"><primary>CARD16</primary></indexterm>
  <indexterm zone="Data_Types:CARDn" significance="preferred"><primary>CARD32</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>CARD8</type>:</entry><entry>  8-bit unsigned integer</entry></row>
          <row><entry><type>CARD16</type>:</entry><entry>  16-bit unsigned integer</entry></row>
          <row><entry><type>CARD32</type>:</entry><entry>  32-bit unsigned integer</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
These are unsigned numbers.  The latter two are byte-swapped when
the server and client have different byte orders.
</para>

</section>

<section id="Data_Types:CHAR2B">
  <title><type>CHAR2B</type></title>
  <indexterm zone="Data_Types:CHAR2B" significance="preferred"><primary>CHAR2B</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>CHAR2B</type>:</entry><entry>[ <structfield>byte1</structfield>, <structfield>byte2</structfield>:</entry><entry><type>CARD8</type> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
<para>
This structure specifies an individual character code within
either a 2-dimensional matrix (using <structfield>BYTE1</structfield>
and <structfield>BYTE2</structfield> as the row and column indices,
respectively) or a vector (using <structfield>BYTE1</structfield> and
<structfield>BYTE2</structfield> as most- and least-significant bytes,
respectively).  This data type is treated as a pair of 8-bit values and
is never byte-swapped.  Therefore, the client should always transmit
<structfield>BYTE1</structfield> first.
</para>

</section>

<section id="Data_Types:EVENTMASK">
  <title><type>EVENTMASK</type></title>
  <indexterm zone="Data_Types:EVENTMASK" significance="preferred"><primary>EVENTMASK</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>EVENTMASK</type>:</entry><entry>  <type>CARD32</type> mask</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
This is a mask of bits indicating which of an extension's (or the
core's) maskable events the client would like to receive.  Each
bit indicates one or more events, and a bit value of one indicates
interest in a corresponding set of events.  The following bits are
defined for event masks specified for the core protocol (i.e. an
<parameter>EXTENSION-OPCODE</parameter> of zero in
<link linkend="Requests:SetEventMask"><function>SetEventMask</function></link>
and
<link linkend="Requests:GetEventMask"><function>GetEventMask</function></link>
requests):

    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>CatalogueListChangeMask</constant></entry><entry><literal>(1 &lt;&lt; 0)</literal></entry></row>
          <row><entry><constant>FontListChangeMask</constant></entry><entry><literal>(1 &lt;&lt; 1)</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>

<para>
If
<constant>CatalogueListChangeMask</constant>
is set, client is interested in
receiving
<link linkend="Events:CatalogueListNotify"><function>CatalogueListNotify</function></link>
events.  If
<constant>FontListChangeMask</constant>
is set, the client is interested in
receiving
<link linkend="Events:FontListNotify"><function>FontListNotify</function></link>
events.
</para>
<para>
Extensions that provide additional events may define their own
event masks.  These event masks have their own scope and may use
the same bit values as the core or other extensions.
    </para>
    <para>
All unused bits must be set to zero.  In
<link linkend="Requests:SetEventMask"><function>SetEventMask</function></link>
requests, if
any bits are set that are not defined for the extension (or core)
for which this <type>EVENTMASK</type> is intended (according to the
<parameter>EXTENSION-OPCODE</parameter> given in the
<link linkend="Requests:SetEventMask"><function>SetEventMask</function></link>
request), an
<link linkend="Errors:EventMask"><errorname>EventMask</errorname></link>
error is generated.
    </para>
    <para>
This value is swapped as a <type>CARD32</type>.
    </para>

</section>

<section id="Data_Types:FONTID">
  <title><type>FONTID</type></title>
  <indexterm zone="Data_Types:FONTID" significance="preferred"><primary>FONTID</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>FONTID</type>:</entry><entry>     <link linkend="Data_Types:ID"><type>ID</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
This is specified by the client in the request
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
as the identifier to be used when referring to a particular open
font.
</para>

</section>

<section id="Data_Types:ID">
  <title><type>ID</type></title>
  <indexterm zone="Data_Types:ID" significance="preferred"><primary>ID</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>ID</type>:</entry><entry>  <type>CARD32</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
This is a 32-bit value in which the top 3 bits must be clear, and
at least 1 other bit must be set (yielding a range of 1 through
2<superscript>29</superscript>-1).
It is specified by the client to represent objects in
the server.  Identifiers are scoped according to their type are
private to the client; thus, the same identifier may be used for
both a <link linkend="Data_Types:FONTID"><type>FONTID</type></link> and an <link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link>
as well as by multiple clients.
</para>
<para>
An <type>ID</type> of zero is referred to as <constant>None</constant>.
</para>
</section>

<section id="Data_Types:INTn">
  <title><type>INT8</type>, <type>INT16</type>, <type>INT32</type></title>
  <indexterm zone="Data_Types:INTn" significance="preferred"><primary>INT8</primary></indexterm>
  <indexterm zone="Data_Types:INTn" significance="preferred"><primary>INT16</primary></indexterm>
  <indexterm zone="Data_Types:INTn" significance="preferred"><primary>INT32</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>INT8</type>:</entry><entry>  8-bit signed integer</entry></row>
          <row><entry><type>INT16</type>:</entry><entry>  16-bit signed integer</entry></row>
          <row><entry><type>INT32</type>:</entry><entry>  32-bit signed integer</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

<para>
These are signed numbers.  The latter two are byte-swapped when
the client and server have different byte orders.
</para>
</section>

<section id="Data_Types:OFFSET32">
  <title><type>OFFSET32</type></title>
  <indexterm zone="Data_Types:OFFSET32" significance="preferred"><primary>OFFSET32</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows='1'><type>OFFSET32</type>:</entry>
          <entry>[ <structfield>position</structfield>:</entry><entry><type>CARD32</type>,</entry></row>
          <row><entry>&emsp;<structfield>length</structfield>:</entry><entry><type>CARD32</type> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This structure indicates a position and length within a block of
data.
    </para>
</section>

<section id="Data_Types:PROPINFO">
  <title><type>PROPINFO</type></title>
  <indexterm zone="Data_Types:PROPINFO" significance="preferred"><primary>PROPINFO</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows='1'><type>PROPINFO</type>:</entry>
          <entry>[ <structfield>offsets</structfield>:</entry><entry><link linkend="Data_Types:PROPOFFSET"><type>LISTofPROPOFFSET</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>data</structfield>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
This structure describes the list of properties provided by a
font.  Strings for all of the properties names and values are
stored within the data block and are located using a table of
offsets and lengths.
    </para>
    <para>
This structure is padded to 32-bit alignment.
    </para>

</section>

<section id="Data_Types:PROPOFFSET">
  <title><type>PROPOFFSET</type></title>
  <indexterm zone="Data_Types:PROPOFFSET" significance="preferred"><primary>PROPOFFSET</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows='3'><type>PROPOFFSET</type>:</entry>
          <entry>[ <structfield>name</structfield>:</entry><entry><link linkend="Data_Types:OFFSET32"><type>OFFSET32</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>value</structfield>:</entry><entry><link linkend="Data_Types:OFFSET32"><type>OFFSET32</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>type</structfield>:</entry><entry><type>CARD8</type>,</entry></row>
          <row><entry>&emsp;<structfield>zero-pad3</structfield>:</entry><entry><link linkend="Data_Types:BYTE"><type>BYTE</type></link>, <link linkend="Data_Types:BYTE"><type>BYTE</type></link>, <link linkend="Data_Types:BYTE"><type>BYTE</type></link> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
This structure specifies the position, length, and type of
of data for a property.
    </para>
    <para>
The <structfield>NAME</structfield> field specifies the position and length
(which must be
greater than zero) of the property name relative to the beginning
of the <structfield>PROPINFO.DATA</structfield> block for this font.
The interpretation of
the position and length of the <structfield>VALUE</structfield> field is
determined by the <structfield>TYPE</structfield> field, which contains
one of the following alternate values:

     <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>String</constant></entry><entry><literal>0</literal></entry></row>
          <row><entry><constant>Unsigned</constant></entry><entry><literal>1</literal></entry></row>
          <row><entry><constant>Signed</constant></entry><entry><literal>2</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
which have the following meanings:
<variablelist>
  <varlistentry id="Constant:String">
    <term><constant>String</constant></term>
    <listitem>
      <indexterm zone="Constant:String" significance="preferred"><primary>String</primary></indexterm>
      <para>
This property contains a counted string of bytes.  The
data is stored in the <structfield>PROPINFO.DATA</structfield>
block beginning at
relative byte VALUE.POSITION (beginning with zero), extending
for VALUE.LENGTH (at least zero) bytes.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="Constant:Unsigned">
    <term><constant>Unsigned</constant></term>
    <listitem>
      <indexterm zone="Constant:Unsigned" significance="preferred"><primary>Unsigned</primary></indexterm>
    <para>
This property contains a unsigned, 32-bit number stored
as a <type>CARD32</type> in VALUE.POSITION (VALUE.LENGTH is zero).
    </para>
    </listitem>
  </varlistentry>
  <varlistentry id="Constant:Signed">
    <term><constant>Signed</constant></term>
    <listitem>
      <indexterm zone="Constant:Signed" significance="preferred"><primary>Signed</primary></indexterm>
      <para>
This property contains a signed, 32-bit number stored as
an <type>INT32</type> in VALUE.POSITION (VALUE.LENGTH is zero).
      </para>
    </listitem>
  </varlistentry>
</variablelist>
This structure is zero-padded to 32-bit alignment.
</para>

</section>

<section id="Data_Types:RANGE">
  <title><type>RANGE</type></title>
  <indexterm zone="Data_Types:RANGE" significance="preferred"><primary>RANGE</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>RANGE</type>:</entry>
          <entry>[ <structfield>min-char</structfield>, <structfield>max-char</structfield>:</entry><entry><link linkend="Data_Types:CHAR2B"><type>CHAR2B</type></link> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

  <para>
This structure specifies a range of character codes.  A single
character is represented by <structfield>MIN-CHAR</structfield> equals
<structfield>MAX-CHAR</structfield>.  If the linear interpretation of
<structfield>MAX-CHAR</structfield> is less than that of
<structfield>MIN-CHAR</structfield>, or if
<structfield>MIN-CHAR</structfield> is less than the font's
<structfield>XFONTINFO.CHAR-RANGE.MIN-CHAR</structfield>, or if
<structfield>MAX-CHAR</structfield> is greater than the
font's <structfield>XFONTINFO.CHAR-RANGE.MAX-CHAR</structfield>,
the range is invalid.
  </para>

</section>

<section id="Data_Types:RESOLUTION">
  <title><type>RESOLUTION</type></title>
  <indexterm zone="Data_Types:RESOLUTION" significance="preferred"><primary>RESOLUTION</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows='2'><type>RESOLUTION</type>:</entry>
          <entry>[ <structfield>x-resolution</structfield>:</entry><entry><type>CARD16</type>,</entry></row>
          <row><entry>&emsp;<structfield>y-resolution</structfield>:</entry><entry><type>CARD16</type>,</entry></row>
          <row><entry>&emsp;<structfield>decipoint-size</structfield>:</entry><entry><type>CARD16</type> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

  <para>
This structure specifies resolution and point size to be used in
resolving partially-specified scaled font names.  The
<structfield>X-RESOLUTION</structfield> and
<structfield>Y-RESOLUTION</structfield> are measured in
pixels-per-inch and must be greater than zero.
The <structfield>DECIPOINT-SIZE</structfield> is the preferred font
size, measured in tenths of a point, and must be greater than zero.
  </para>

</section>

<section id="Data_Types:STRING8">
  <title><type>STRING8</type></title>
  <indexterm zone="Data_Types:STRING8" significance="preferred"><primary>STRING8</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>STRING8</type>:</entry><entry>          <type>LISTofCARD8</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

  <para>
This is a counted list of 1-byte character codes, typically
encoded in <acronym>ISO</acronym> 8859-1.  A character code
<quote><literal>c</literal></quote> is equivalent to a
<link linkend="Data_Types:CHAR2B"><type>CHAR2B</type></link> structure whose <structfield>BYTE1</structfield>
is zero and whose <structfield>BYTE2</structfield> is
<quote><literal>c</literal></quote>.
  </para>

</section>

<section id="Data_Types:TIMESTAMP">
  <title><type>TIMESTAMP</type></title>
  <indexterm zone="Data_Types:TIMESTAMP" significance="preferred"><primary>TIMESTAMP</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><type>TIMESTAMP</type>:</entry><entry>     <type>CARD32</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

  <para>
This is the number of milliseconds that have passed since a
server-dependent origin.  It is provided in errors and events and is
permitted to wrap.
  </para>
</section>

<section id="Data_Types:XCHARINFO">
  <title><type>XCHARINFO</type></title>
  <indexterm zone="Data_Types:XCHARINFO" significance="preferred"><primary>XCHARINFO</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows='3'><type>XCHARINFO</type>:</entry>
          <entry>[ <structfield>lbearing</structfield>, <structfield>rbearing</structfield>:</entry><entry><type>INT16</type>,</entry></row>
          <row><entry>&emsp;<structfield>width</structfield>:</entry><entry><type>INT16</type>,</entry></row>
          <row><entry>&emsp;<structfield>ascent</structfield>, <structfield>descent</structfield>:</entry><entry><type>INT16</type>,</entry></row>
          <row><entry>&emsp;<structfield>attributes</structfield>:</entry><entry><type>CARD16</type> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>

  <para>
This structure specifies the ink extents and horizontal escapement
(also known as the set- or logical width) of an individual
character.  The first five values represent directed distances in
a coordinate system whose origin is aligned with the lower-left
edge of the left-most pixel of the glyph baseline (i.e. the
baseline falls between two pixels as shown in Figure 3-1 of the
<citetitle>Bitmap Distribution Format 2.1</citetitle> Consortium standard
<xref linkend="References:bdf-spec"/>).
  </para>
  <para>
The <structfield>LBEARING</structfield> field specifies the
directed distance measured to the
right from the origin to the left edge of the left-most inked
pixel in the glyph.
  </para>
  <para>
The <structfield>RBEARING</structfield> field specifies the
directed distance (measured to
the right) from the origin to the right edge of the right-most
inked pixel in the glyph.
  </para>
  <para>
The <structfield>WIDTH</structfield> field specifies the
directed distance (measured to the
right) from the origin to the position where the next character
should appear (called the <firstterm>escapement point</firstterm>). This
distance includes any whitespace used for intercharacter padding and is
also referred to as the <firstterm>logical width</firstterm> or
<firstterm>horizontal escapement</firstterm>.
<indexterm zone="Data_Types:XCHARINFO" significance="preferred"><primary>horizontal escapement</primary></indexterm>
  </para>
  <para>
The <structfield>ASCENT</structfield> field specifies the
directed distance (measured up)
from the baseline to the top edge of the top-most inked pixel
in the glyph.
  </para>
  <para>
The <structfield>DESCENT</structfield> field specifies the
directed distance (measured
down) from the baseline to the bottom edge of the bottom-most
inked pixel.
  </para>
  <para>
The <structfield>ATTRIBUTES</structfield> field specifies
glyph-specific information that
is passed through the application.  If this value is not being
used, it should be zero.
  </para>
  <para>
The ink bounding box of a glyph is defined to be the smallest
rectangle that encloses all of the inked pixels.  This box has
a width of
<structfield>RBEARING</structfield> &minus; <structfield>LBEARING</structfield>
pixels and a height of
<structfield>ASCENT</structfield> + <structfield>DESCENT</structfield> pixels.
  </para>
</section>

<section id="Data_Types:XFONTINFO">
  <title><type>XFONTINFO</type></title>
  <indexterm zone="Data_Types:XFONTINFO" significance="preferred"><primary>XFONTINFO</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry morerows='8'><type>XFONTINFO</type>:</entry>
          <entry>[ <structfield>flags</structfield>:</entry><entry><type>CARD32</type>,</entry></row>
          <row><entry>&emsp;<structfield>drawing-direction</structfield>:</entry><entry>{ <constant>LeftToRight</constant>, <constant>RightToLeft</constant> }</entry></row>
          <row><entry>&emsp;<structfield>char-range</structfield>:</entry><entry><link linkend="Data_Types:RANGE"><type>RANGE</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>default-char</structfield>:</entry><entry><link linkend="Data_Types:CHAR2B"><type>CHAR2B</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>min-bounds</structfield>:</entry><entry><link linkend="Data_Types:XCHARINFO"><type>XCHARINFO</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>max-bounds</structfield>:</entry><entry><link linkend="Data_Types:XCHARINFO"><type>XCHARINFO</type></link>,</entry></row>
          <row><entry>&emsp;<structfield>font-ascent</structfield>:</entry><entry><type>INT16</type>,</entry></row>
          <row><entry>&emsp;<structfield>font-descent</structfield>:</entry><entry><type>INT16</type>,</entry></row>
          <row><entry>&emsp;<structfield>properties</structfield>:</entry><entry><link linkend="Data_Types:PROPINFO"><type>PROPINFO</type></link> ]</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
  <para>
This structure specifies attributes related to the font as a
whole.
  </para>
  <para>
The <structfield>FLAGS</structfield> field is a bit mask containing zero
or more of the following boolean values (unspecified bits must be zero):

    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>AllCharactersExist</constant></entry><entry><literal>(1 &lt;&lt; 0)</literal></entry></row>
          <row><entry><constant>InkInside</constant></entry><entry><literal>(1 &lt;&lt; 1)</literal></entry></row>
          <row><entry><constant>HorizontalOverlap</constant></entry><entry><literal>(1 &lt;&lt; 2)</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

which have the following meanings:
<variablelist>
  <varlistentry id="Constant:AllCharactersExist">
    <term><constant>AllCharactersExist</constant></term>
    <listitem>
      <indexterm zone="Constant:AllCharactersExist" significance="preferred"><primary>AllCharactersExist</primary></indexterm>
    <para>
If this bit is set, all of the characters in the range given by
<structfield>CHAR-RANGE</structfield> have glyphs encoded in
the font.  If this bit is clear, some of the characters
may not have encoded glyphs.
    </para>
    </listitem>
  </varlistentry>
  <varlistentry id="Constant:InkInside">
    <term><constant>InkInside</constant></term>
    <listitem>
      <indexterm zone="Constant:InkInside" significance="preferred"><primary>InkInside</primary></indexterm>
    <para>
If this bit is set, the inked pixels of each glyph
fall within the rectangle described by the font's ascent,
descent, origin, and the glyph's escapement point.  If
this bit is clear, there may be glyphs whose ink extends
outside this rectangle.
    </para>
    </listitem>
  </varlistentry>
  <varlistentry id="Constant:HorizontalOverlap">
    <term><constant>HorizontalOverlap</constant></term>
    <listitem>
      <indexterm zone="Constant:HorizontalOverlap" significance="preferred"><primary>HorizontalOverlap</primary></indexterm>
    <para>
If this bit is set, the two ink bounding
boxes (smallest rectangle enclosing the inked pixels) of
some pairs of glyphs in the font may overlap when displayed
side-by-side (i.e. the second character is imaged at the
escapement point of the first) on a common baseline.  If
this bit is clear, there are no pairs of glyphs whose ink
bounding boxes overlap.
    </para>
    </listitem>
  </varlistentry>
</variablelist>
</para>
<para id="Data_Types:XFONTINFO.DRAWING-DIRECTION">
  <indexterm zone="Data_Types:XFONTINFO.DRAWING-DIRECTION" significance="preferred"><primary>LeftToRight</primary></indexterm>
  <indexterm zone="Data_Types:XFONTINFO.DRAWING-DIRECTION" significance="preferred"><primary>RightToLeft</primary></indexterm>
The <structfield>DRAWING-DIRECTION</structfield> field contains a hint
indicating whether most of the character metrics have a positive (or
<quote><constant>LeftToRight</constant></quote>) logical width or a
negative (<quote><constant>RightToLeft</constant></quote>) logical width.  It
contains the following alternate values:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>LeftToRight</constant></entry><entry><literal>0</literal></entry></row>
          <row><entry><constant>RightToLeft</constant></entry><entry><literal>1</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
The <structfield>CHAR-RANGE.MIN-CHAR</structfield>
and <structfield>CHAR-RANGE.MAX-CHAR</structfield> fields specify the
first and last character codes that have glyphs encoded in this font.
All fonts must have at least one encoded glyph (in which case the
<structfield>MIN-CHAR</structfield> and <structfield>MAX-CHAR</structfield>
are equal), but are not required to have glyphs
encoded at all positions between the first and last characters.
</para>
<para>
The <structfield>DEFAULT-CHAR</structfield> field specifies
the character code of the glyph
that the client should substitute for unencoded characters.  Requests
for extents or bitmaps for an unencoded character generate zero-filled
metrics and a zero-length glyph bitmap, respectively.
</para>
<para>
The <structfield>MIN-BOUNDS</structfield> and
<structfield>MAX-BOUNDS</structfield> fields contain the minimum and maximum
values of each of the extents field of all encoded characters in the
font (i.e. non-existent characters are ignored).
</para>
<para>
The <structfield>FONT-ASCENT</structfield> and
<structfield>FONT-DESCENT</structfield> fields specify the font designer's
logical height of the font, above and below the baseline,
respectively.  The sum of the two values is often used as the
vertical line spacing of the font.  Individual glyphs are permitted
to have ascents and descents that are greater than these values.
</para>
<para>
The <structfield>PROPERTIES</structfield> field contains the
property data associated with this font.
</para>
<para>
This structure is padded to 32-bit alignment.
</para>
</section>
</section>

<section id='Requests'>
<title>Requests</title>
<!-- .XS -->
<!-- (SN Requests -->
<!-- .XE -->
<para>
This section describes the requests that may be sent by the client and the
replies or errors that are generated in response.  Versions of the protocol
with the same major version are required to be upward-compatible.
</para>
<para>
Every request on a given connection is implicitly assigned a sequence number,
starting with 1, that is used in replies, error, and events.  Servers are
required to generate replies and errors in the order in which the corresponding
requests are received.  Servers are permitted to add or remove fonts to the
list visible to the client between any two requests, but requests must be
processed atomically.  Each request packet is at least 4 bytes long and
contains the following fields:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>major-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>minor-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>length</parameter>:</entry><entry><type>CARD16</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>

The <parameter>MAJOR-OPCODE</parameter> specifies which core request or
extension package this packet represents.  If the
<parameter>MAJOR-OPCODE</parameter> corresponds to a core request, the
<parameter>MINOR-OPCODE</parameter> contains 8 bits of request-specific data.
Otherwise, the <parameter>MINOR-OPCODE</parameter> specifies which extension
request this packet represents.  The <parameter>LENGTH</parameter> field
specifies the number of 4-byte units contained within the packet
and must be at least one.  If this field contains a value greater than one it
is followed by (<parameter>LENGTH</parameter> - 1) * 4 bytes
of request-specific data.  Unless
otherwise specified, unused bytes are not required to be zero.
</para>
<para>
If a request packet contains too little or too much data, the server returns
a <link linkend="Errors:Length"><errorname>Length</errorname></link> error.
If the server runs out of internal
resources (such as memory) while processing a request, it returns an
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link> error.
If a server is deficient (and therefore non-compliant) and is unable to
process a request, it may return an
<link linkend="Errors:Implementation"><errorname>Implementation</errorname></link> error.
If a client uses an extension request without previously having issued a
<link linkend="Requests:QueryExtension"><function>QueryExtension</function></link>
request for that extension, the server responds with a
<link linkend="Errors:Request"><errorname>Request</errorname></link>
error.  If the server encounters a request with an unknown
<parameter>MAJOR-OPCODE</parameter> or <parameter>MINOR-OPCODE</parameter>,
it responds with a
<link linkend="Errors:Request"><errorname>Request</errorname></link>
error.
At most one error is generated per request.  If more than one error condition
is encountered in processing a requests, the choice of which error is returned
is server-dependent.
</para>
<para>
Core requests have <parameter>MAJOR-OPCODE</parameter> values between 0 and
127, inclusive.  Extension requests have <parameter>MAJOR-OPCODE</parameter>
values between 128 and 255, inclusive, that are assigned by by the server.
All <parameter>MINOR-OPCODE</parameter> values in extension requests are
between 0 and 255, inclusive.
</para>
<para>
Each reply is at least 8 bytes long and contains the following fields:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>type</parameter>:</entry><entry><type>CARD8</type></entry><entry>value of 0</entry></row>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>sequence-number</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>length</parameter>:</entry><entry><type>CARD32</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
The <parameter>TYPE</parameter> field has a value of zero.
The <parameter>DATA-OR-UNUSED</parameter> field may be used to
encode one byte of reply-specific data (see
<link linkend="Encoding::Requests">Section 5.2 on request encoding</link>).
The least-significant 16 bits of the sequence number of the request that
generated the reply are stored in the <parameter>SEQUENCE-NUMBER</parameter>
field.  The <parameter>LENGTH</parameter> field specifies the number of
4-byte units in this reply packet, including the fields described above,
and must be at least two.  If <parameter>LENGTH</parameter> is greater
than two, the fields described above are followed by
(<parameter>LENGTH</parameter> - 2) * 4 bytes of additional data.
</para>
<para>
Requests that have replies are described using the following syntax:
  <blockquote><para>
    <emphasis role="bold"><function>RequestName</function></emphasis>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>arg1</parameter>:</entry><entry><type>type1</type></entry></row>
          <row><entry><parameter>arg2</parameter>:</entry><entry><type>type2</type></entry></row>
          <row><entry> ...</entry></row>
          <row><entry><parameter>argN</parameter>:</entry><entry><type>typeN</type></entry></row>
          <row><entry> ▶</entry></row>
          <row><entry><parameter>result1</parameter>:</entry><entry><type>type1</type></entry></row>
          <row><entry><parameter>result2</parameter>:</entry><entry><type>type2</type></entry></row>
          <row><entry> ...</entry></row>
          <row rowsep="1"><entry><parameter>resultM</parameter>:</entry><entry><type>typeM</type></entry></row>
          <row><entry>Errors:</entry><entry><errorname>kind1</errorname>, <errorname>kind2</errorname> ..., <errorname>kindK</errorname></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    Description
  </para></blockquote>
</para>
<para>
If a request does not generate a reply, the ▶ and result lines are
omitted.  If a request may generate multiple replies, the ▶ is replaced by
a ▶+.  In the authorization data exchanges in the initial connection setup
and the CreateAC request, ◀ indicates data sent by the client in response
to data sent by the server.
</para>
<para>
The protocol begins with the establishment of a connection over a
mutually-understood virtual stream:
</para>

<section id="Requests:open_connection">
    <title>open connection</title>
    <indexterm zone="Requests:open_connection" significance="preferred"><primary>open connection</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='2.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>byte-order</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>BYTE</type></link></entry></row>
          <row><entry><parameter>client-major-protocol-version</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>client-minor-protocol-version</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>authorization-protocols</parameter>:</entry><entry><link linkend="Data_Types:AUTH"><type>LISTofAUTH</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
<para>
The initial byte of the connection specifies the
<parameter>BYTE-ORDER</parameter> in
which subsequent 16-bit and 32-bit numeric values are to be
transmitted.  The octal value <literal>102</literal>
(<acronym>ASCII</acronym> uppercase <quote><literal>B</literal></quote>)
indicates that the most-significant byte is to be transmitted
first; the octal value <literal>154</literal>
(<acronym>ASCII</acronym> lowercase <quote><literal>l</literal></quote>)
indicates that the least-significant byte is to be transmitted first.
If any other value is encountered the server closes the
connection without any response.
</para>
  <para>
The <parameter>CLIENT-MAJOR-PROTOCOL-VERSION</parameter> and
<parameter>CLIENT-MINOR-PROTOCOL-VERSION</parameter> specify
which version of the
font service protocol the client would like to use.  If the
client can support multiple versions, the highest version
should be given.  This version of the protocol has a
major version of 2 and a minor version of 0.
  </para>
  <para>
The <parameter>AUTHORIZATION-PROTOCOLS</parameter>
contains a list of protocol names and
optional initial data for which the client can provide
information.  The server may use this to determine which
protocol to use or as part of the initial exchange of
authorization data.
  </para>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='2.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>▶</entry></row>
          <row><entry><parameter>status</parameter>:</entry><entry>{ <constant>Success</constant>, <constant>Continue</constant>,
                                  <constant>Busy</constant>, <constant>Denied</constant> }</entry></row>
          <row><entry><parameter>server-major-protocol-version</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>server-minor-protocol-version</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>alternate-servers-hint</parameter>:</entry><entry><link linkend="Data_Types:ALTERNATESERVER"><type>LISTofALTERNATESERVER</type></link></entry></row>
          <row><entry><parameter>authorization-index</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>authorization-data</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
  <para>
The <parameter>SERVER-MAJOR-PROTOCOL-VERSION</parameter> and
<parameter>SERVER-MINOR-PROTOCOL-VERSION</parameter> specify
the version of the font
service protocol that the server expects from the client.  If
the server supports the version specified by the client, this
version number should be returned.  If the client has
requested a higher version than is supported by the server,
the server's highest version should be returned.  Otherwise,
if the client has requested a lower version than is supported
by the server, the server's lowest version should be returned.
It is the client's responsibility to decide whether or not it
can match this version of the protocol.
  </para>
  <para>
The <parameter>ALTERNATE-SERVERS-HINT</parameter>
is a list of other font servers
that may have related sets of fonts (determined by means
outside this protocol, typically by the system administrator).
Clients may choose to contact these font servers if the
connection is rejected or lost.
  </para>
  <para>
The <parameter>STATUS</parameter> field indicates whether the server accepted,
rejected, or would like more information about the connection.
It has one of the following alternate values:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='2.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><constant>Success</constant></entry><entry><literal>0</literal></entry></row>
          <row><entry><constant>Continue</constant></entry><entry><literal>1</literal></entry></row>
          <row><entry><constant>Busy</constant></entry><entry><literal>2</literal></entry></row>
          <row><entry><constant>Denied</constant></entry><entry><literal>3</literal></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>
  <para>
If <parameter>STATUS</parameter> is <constant>Denied</constant>,
the server has rejected the client's authorization information.
If <parameter>STATUS</parameter> is <constant>Busy</constant>, the server has
simply decided that it cannot provide fonts to this client at
this time (it may be able to at a later time).  In both cases,
<parameter>AUTHORIZATION-INDEX</parameter> is set to zero,
no authorization-data is
returned, and the server closes the connection after sending
the data described so far.
  </para>
  <para>
Otherwise the <parameter>AUTHORIZATION-INDEX</parameter> is set to the index
(beginning with 1) into the <parameter>AUTHORIZATION-PROTOCOLS</parameter>
list of the protocol that the server will use for this connection.  If
the server does not want to use any of the given protocols,
this value is set to zero.  The <parameter>AUTHORIZATION-DATA</parameter>
field is used to send back authorization protocol-dependent data to the
client (such as a challenge, authentication of the server,
etc.).
  </para>
<para>
If <parameter>STATUS</parameter> is <constant>Success</constant>,
the following section of protocol is omitted.  Otherwise, if
<parameter>STATUS</parameter> is <constant>Continue</constant>,
the server expects
more authorization data from the client (i.e. the connection
setup is not finished, so no requests or events may be sent):
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>◀</entry></row>
          <row><entry><parameter>more-authorization-data</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row><entry><parameter>status</parameter>:</entry><entry>{ <constant>Success</constant>, <constant>Continue</constant>, <constant>Busy</constant>, <constant>Denied</constant> }</entry></row>
          <row><entry><parameter>more-authorization-data</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
The values in <parameter>STATUS</parameter> have the same meanings as described
above.  This section of protocol is repeated until the server
either accepts (sets <parameter>STATUS</parameter> to
<constant>Success</constant>) or rejects (sets <parameter>STATUS</parameter>
to <constant>Denied</constant> or <constant>Busy</constant>) the connection.
</para>
<para>
Once the connection has been accepted and <parameter>STATUS</parameter>
is <constant>Success</constant>,
an implicit AccessContext is created for the authorization
data and the protocol continues with the following data sent
from the server:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>▶</entry></row>
          <row><entry><parameter>remaining-length</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>maximum-request-length</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>release-number</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>vendor</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
The <parameter>REMAINING-LENGTH</parameter> specifies the length in 4-byte
units of the remaining data to be transmitted to the client.  The
<parameter>MAXIMUM-REQUEST-LENGTH</parameter> specifies the largest request
size in 4-byte units that is accepted by the server and must have a
value of at least 4096.  Requests with a length field larger
than this value are ignored and a
<link linkend="Errors:Length"><errorname>Length</errorname></link>
error is returned.
The <parameter>VENDOR</parameter> string specifies the name of the
manufacturer of the font server.  The
<parameter>RELEASE-NUMBER</parameter> specifies the particular
release of the server in a manufacturer-dependent manner.
</para>
</section>
<section><title />
<para>
After the connection is established and the setup information has been
exchanged, the client may issue any of requests described below:
</para>
</section>
<section id="Requests:NoOp">
    <title><function>NoOp</function></title>
    <indexterm zone="Requests:NoOp" significance="preferred"><primary>NoOp</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request does nothing.  It is typically used in response
to a
<link linkend="Events:KeepAlive"><function>KeepAlive</function></link>
event.
    </para>
</section>

<section id="Requests:ListExtensions">
    <title><function>ListExtensions</function></title>
    <indexterm zone="Requests:ListExtensions" significance="preferred"><primary>ListExtensions</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>names</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>LISTofSTRING8</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>

  <para>
This request returns the names of the extension packages
that are supported by the server.  Extension names are
case-sensitive and are encoded in <acronym>ISO</acronym> 8859-1.
  </para>

</section>

<section id="Requests:QueryExtension">
    <title><function>QueryExtension</function></title>
    <indexterm zone="Requests:QueryExtension" significance="preferred"><primary>QueryExtension</primary></indexterm>

    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>name</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row><entry><parameter>present</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>major-version</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>minor-version</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>major-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>first-event</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>number-events</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>first-error</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row rowsep='1'><entry><parameter>number-errors</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
  <para>
This request determines whether or not the extension package specified by
<parameter>NAME</parameter> (encoded in <acronym>ISO</acronym> 8859-1) is
supported by the server and that there is sufficient number of major opcode,
event, and error codes available.  If so, then <parameter>PRESENT</parameter>
is set to <constant>True</constant>, <parameter>MAJOR-VERSION</parameter>
and <parameter>MINOR-VERSION</parameter> are set to the
respective major and minor version numbers of the protocol
that the server would prefer; <parameter>MAJOR-OPCODE</parameter> is set to
the value to use in extension requests; <parameter>FIRST-EVENT</parameter>
is set to the value of the first extension-specific event code or zero if the
extension does not have any events; <parameter>NUMBER-EVENTS</parameter> is
set to the number of new events that the event defines;
<parameter>FIRST-ERROR</parameter>
is set to the value of the first extension-specific error code
or zero if the extension does not define any new errors; and
<parameter>NUMBER-ERRORS</parameter> is set to the number of
new errors the extension defines.
  </para>
  <para>
Otherwise, <parameter>PRESENT</parameter> is set to
<constant>False</constant> and the remaining fields are
set to zero.
  </para>
  <para>
The server is free to return different values to different
clients.  Therefore, clients must use this request before
issuing any of the requests in the named extension package or
using the
<link linkend="Requests:SetEventMask"><function>SetEventMask</function></link> request to express interest in any of
this extension's events.  Otherwise, a
<link linkend="Errors:Request"><errorname>Request</errorname></link>
error is returned.
  </para>
</section>

<section id="Requests:ListCatalogues">
    <title><function>ListCatalogues</function></title>
    <indexterm zone="Requests:ListCatalogues" significance="preferred"><primary>ListCatalogues</primary></indexterm>

    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>pattern</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>max-names</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry>▶+</entry></row>
          <row><entry><parameter>replies-following-hint</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row rowsep='1'><entry><parameter>names</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>LISTofSTRING8</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns a list of at most <parameter>MAX-NAMES</parameter> names
of collections (called catalogues) of fonts that match
the specified <parameter>PATTERN</parameter>.  In the pattern (which is encoded
in <acronym>ISO</acronym> 8859-1), the
<quote><literal>?</literal></quote> character (octal <literal>77</literal>)
matches any single character; the
<quote><literal>*</literal></quote> character (octal <literal>52</literal>)
matches any series of zero or more characters; and alphabetic
characters match either upper- or lowercase.  The
returned <parameter>NAMES</parameter> are encoded in
<acronym>ISO</acronym> 8859-1 and may contain
mixed character cases.
    </para>
    <para>
If <parameter>PATTERN</parameter> is of zero length or
<parameter>MAX-NAMES</parameter> is equal to zero,
one reply containing a zero-length list of names is returned.
This may be used to synchronize the client with the server.
    </para>
    <para>
Servers are free to add or remove catalogues to the set returned by
<function>ListCatalogues</function>
between any two requests.  This request is not
cumulative; repeated uses are processed in isolation and do
result in an iteration through the list.
    </para>
    <para>
To reduce the amount of buffering needed by the server, the
list of names may be split across several reply packets, so
long as the names arrive in the same order that they would
have appeared had they been in a single packet.  The
<parameter>REPLIES-FOLLOWING-HINT</parameter> field in all but the last reply
contains a positive value that specifies the number of
replies that are likely, but not required, to follow.  In the
last reply, which may contain zero or more names, this field
is set to zero.
    </para>
</section>

<section id="Requests:SetCatalogues">
    <title><function>SetCatalogues</function></title>
    <indexterm zone="Requests:SetCatalogues" significance="preferred"><primary>SetCatalogues</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row rowsep='1'><entry><parameter>names</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>LISTofSTRING8</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link>,
<link linkend="Errors:Name"><errorname>Name</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request sets the list of catalogues whose fonts should be
visible to the client.  The union of the fonts provided by
each of the named catalogues forms the set of fonts whose
names match patterns in
<link linkend="Requests:ListFonts"><function>ListFonts</function></link>,
<link linkend="Requests:ListFontsWithXInfo"><function>ListFontsWithXInfo</function></link>,
and
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
requests.  The catalogue names are
case-insensitive and are encoded in <acronym>ISO</acronym> 8859-1.  A zero-length
list resets the client's catalogue list to the
server-dependent default.
    </para>
    <para>
If any of the catalogue names are invalid, a
<link linkend="Errors:Name"><errorname>Name</errorname></link>
error is returned and the request is ignored.
    </para>
</section>

<section id="Requests:GetCatalogues">
    <title><function>GetCatalogues</function></title>
    <indexterm zone="Requests:GetCatalogues" significance="preferred"><primary>GetCatalogues</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>names</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>LISTofSTRING8</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns the current list of catalogue names
(encoded in <acronym>ISO</acronym> 8859-1) associated with the client.  These
catalogues determine the set of fonts that are visible
to
<link linkend="Requests:ListFonts"><function>ListFonts</function></link>,
<link linkend="Requests:ListFontsWithXInfo"><function>ListFontsWithXInfo</function></link>,
and
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>.
A zero-length list indicates the server's default set of
fonts.  Catalogue names are case-insensitive and may be
returned in mixed case.
    </para>
</section>

<section id="Requests:SetEventMask">
    <title><function>SetEventMask</function></title>
    <indexterm zone="Requests:SetEventMask" significance="preferred"><primary>SetEventMask</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>extension-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row rowsep='1'><entry><parameter>event-mask</parameter>:</entry><entry><link linkend="Data_Types:EVENTMASK"><type>EVENTMASK</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:EventMask"><errorname>EventMask</errorname></link>,
<link linkend="Errors:Request"><errorname>Request</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request specifies the set of maskable events that the
extension indicated by <parameter>EXTENSION-OPCODE</parameter>
(or zero for the core)
should generate for the client.  Event masks are limited in
scope to the extension (or core) for which they are defined,
so expressing interest in events from one or more extensions
requires multiple uses of this request.
    </para>
    <para>
The default event mask if
<function>SetEventMask</function>
has not been called
is zero, indicating no interest in any maskable events.
Some events are not maskable and cannot be blocked.
    </para>
    <para>
If <parameter>EXTENSION-OPCODE</parameter> is not a valid extension
opcode previously returned by
<link linkend="Requests:QueryExtension"><function>QueryExtension</function></link>
or zero, a
<link linkend="Errors:Request"><errorname>Request</errorname></link>
error is
returned.  If <parameter>EVENT-MASK</parameter> contains any bits that do not
correspond to valid events for the specified extension (or
core), an
<link linkend="Errors:EventMask"><errorname>EventMask</errorname></link>
error is returned and the request is
ignored.
    </para>
</section>

<section id="Requests:GetEventMask">
    <title><function>GetEventMask</function></title>
    <indexterm zone="Requests:GetEventMask" significance="preferred"><primary>GetEventMask</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>extension-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>event-mask</parameter>:</entry><entry><link linkend="Data_Types:EVENTMASK"><type>EVENTMASK</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Request"><errorname>Request</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns the set of maskable core events the
extension indicated by <parameter>EXTENSION-OPCODE</parameter>
(or the core if zero)
should generate for the client.  Non-maskable events are
always sent to the client.
    </para>
    <para>
If <parameter>EXTENSION-OPCODE</parameter> is not a valid extension opcode
previously returned by
<link linkend="Requests:QueryExtension"><function>QueryExtension</function></link>
or zero, a
<link linkend="Errors:Request"><errorname>Request</errorname></link>
error is returned.
    </para>
</section>

<section id="Requests:CreateAC">
    <title><function>CreateAC</function></title>
    <indexterm zone="Requests:CreateAC" significance="preferred"><primary>CreateAC</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>ac</parameter>:</entry><entry><link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link></entry></row>
          <row><entry><parameter>authorization-protocols</parameter>:</entry><entry><link linkend="Data_Types:AUTH"><type>LISTofAUTH</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row><entry><parameter>status</parameter>:</entry><entry>{ <constant>Success</constant>, <constant>Continue</constant>, <constant>Denied</constant> }</entry></row>
          <row><entry><parameter>authorization-index</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row rowsep='1'><entry><parameter>authorization-data</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:IDChoice"><errorname>IDChoice</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request creates a new
<type>AccessContext</type>
object within the
server containing the specified authorization data.  When
this
<type>AccessContext</type>
is selected by the client using the
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>
request, the data may be used by the server
to determine whether or not the client should be granted
access to particular font information.
    </para>
    <para>
If <parameter>STATUS</parameter> is <constant>Denied</constant>, the server
rejects the client's authorization information and does not associate
<parameter>AC</parameter> with any valid <type>AccessContext</type>.
In this case, <parameter>AUTHORIZATION-INDEX</parameter> is set
to zero, and zero bytes of <parameter>AUTHORIZATION-DATA</parameter>
is returned.
    </para>
    <para>
Otherwise, <parameter>AUTHORIZATION-INDEX</parameter> is set to the index
(beginning with 1) into the <parameter>AUTHORIZATION-PROTOCOLS</parameter>
list of the protocol
that the server will use for this connection.  If the server
does not want to use any of the given protocols, this value is
set to zero.  The <parameter>AUTHORIZATION-DATA</parameter> field is used
to send back authorization protocol-dependent data to the client (such
as a challenge, authentication of the server, etc.).
    </para>
    <para>
If <parameter>STATUS</parameter> is <constant>Continue</constant>,
the client is expected to continue
the request by sending the following protocol and receiving
the indicated response from the server.  This continues
until <parameter>STATUS</parameter> is set to either
<constant>Success</constant> or <constant>Denied</constant>.
    </para>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>     ◀</entry></row>
          <row><entry><parameter>     more-authorization-data</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry>     ▶</entry></row>
          <row><entry><parameter>status</parameter>:</entry><entry>{ <constant>Success</constant>, <constant>Continue</constant>, <constant>Denied</constant> }</entry></row>
          <row><entry><parameter>    more-authorization-data</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
Once the connection has been accepted and <parameter>STATUS</parameter>
is <constant>Success</constant>, the request is complete.
    </para>
    <para>
If <parameter>AC</parameter> is not in the range
[1..2<superscript>29</superscript>-1] or is already associated
with an access context, an <link linkend="Errors:IDChoice"><errorname>IDChoice</errorname></link> error is returned.
    </para>
</section>

<section id="Requests:FreeAC">
    <title><function>FreeAC</function></title>
    <indexterm zone="Requests:FreeAC" significance="preferred"><primary>FreeAC</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>ac</parameter>:</entry><entry><link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link></entry></row>
          <row rowsep='1'><entry>Errors:</entry><entry><link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request indicates that the specified <parameter>AC</parameter> should
no longer be associated with a valid access context.
If <parameter>AC</parameter> is also the current
<type>AccessContext</type>
(as set by the
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>
request), an implicit
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>
of <constant>None</constant> is done to
restore the
<type>AccessContext</type>
established for the initial
connection setup.  Operations on fonts that were opened under
<parameter>AC</parameter> are not affected.  The client may reuse the
value of <parameter>AC</parameter> in a subsequent
<link linkend="Requests:CreateAC"><function>CreateAC</function></link>
request.
    </para>
    <para>
If <parameter>AC</parameter> isn't associated with any valid authorization
previously created by
<link linkend="Requests:CreateAC"><function>CreateAC</function></link>, an
<link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link>
error is returned.
    </para>
</section>

<section id="Requests:SetAuthorization">
    <title><function>SetAuthorization</function></title>
    <indexterm zone="Requests:SetAuthorization" significance="preferred"><primary>SetAuthorization</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>ac</parameter>:</entry><entry><link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link></entry></row>
          <row rowsep='1'><entry>Errors:</entry><entry><link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request sets the
<type>AccessContext</type>
to be used for subsequent
requests (except for
<link linkend="Requests:QueryXInfo"><function>QueryXInfo</function></link>,
<link linkend="Requests:QueryXExtents8"><function>QueryXExtents8</function></link>,
<link linkend="Requests:QueryXExtents16"><function>QueryXExtents16</function></link>,
<link linkend="Requests:QueryXBitmaps8"><function>QueryXBitmaps8</function></link>,
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
and
<link linkend="Requests:CloseFont"><function>CloseFont</function></link>
which are done under the
<type>AccessContext</type>
of the
corresponding
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
).
An <parameter>AC</parameter> of <constant>None</constant> restores the
<type>AccessContext</type>
established for the initial connection setup.
    </para>
    <para>
If <parameter>AC</parameter> is neither <constant>None</constant>
nor a value associated with a valid <type>AccessContext</type>
previously created by
<link linkend="Requests:CreateAC"><function>CreateAC</function></link>,
an
<link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link>
error is returned.
    </para>
</section>

<section id="Requests:SetResolution">
    <title><function>SetResolution</function></title>
    <indexterm zone="Requests:SetResolution" significance="preferred"><primary>SetResolution</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row rowsep='1'><entry><parameter>resolutions</parameter>:</entry><entry><link linkend="Data_Types:RESOLUTION"><type>LISTofRESOLUTION</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Resolution"><errorname>Resolution</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request provides a hint as to the resolution and
preferred point size of the drawing surfaces for which the
client will be requesting fonts.  The server may use this
information to set the RESOLUTION_X and RESOLUTION_Y fields
of scalable <acronym>XLFD</acronym> font names, to order sets of names based on
their resolutions, and to choose the server-dependent
instance that is used when a partially-specified scalable
fontname is opened.
    </para>
    <para>
If a zero-length list of <link linkend="Data_Types:RESOLUTION"><type>RESOLUTION</type></link>s is given, the
server-dependent default value is restored.  Otherwise, if
elements of all of the specified <link linkend="Data_Types:RESOLUTION"><type>RESOLUTION</type></link>s are non-zero, the
default resolutions for this client are changed.
    </para>
    <para>
If a <link linkend="Data_Types:RESOLUTION"><type>RESOLUTION</type></link> entry contains a zero,
a <link linkend="Errors:Resolution"><errorname>Resolution</errorname></link> error is
returned and the default resolutions are not changed.
    </para>
</section>

<section id="Requests:GetResolution">
    <title><function>GetResolution</function></title>
    <indexterm zone="Requests:GetResolution" significance="preferred"><primary>GetResolution</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>resolutions</parameter>:</entry><entry><link linkend="Data_Types:RESOLUTION"><type>LISTofRESOLUTION</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns the current list of default resolutions.
If a client has not performed a
<link linkend="Requests:SetResolution"><function>SetResolution</function></link>,
a server-dependent default value is returned.
    </para>
</section>

<section id="Requests:ListFonts">
    <title><function>ListFonts</function></title>
    <indexterm zone="Requests:ListFonts" significance="preferred"><primary>ListFonts</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>pattern</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>max-names</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry>▶+</entry></row>
          <row><entry><parameter>replies-following-hint</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row rowsep='1'><entry><parameter>names</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>LISTofSTRING8</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns a list of at most <parameter>MAX-NAMES</parameter>
font names that match the specified <parameter>PATTERN</parameter>,
according to matching rules
of the <olink targetdoc='xlfd' targetptr='xlfd'><citetitle>X Logical
Font Description Conventions</citetitle></olink>
<xref linkend="References:xlfd-spec"/>.
In the pattern (which is encoded in <acronym>ISO</acronym> 8859-1) the
<quote><literal>?</literal></quote> character (octal <literal>77</literal>)
matches any single character; the
<quote><literal>*</literal></quote> character (octal <literal>52</literal>)
matches any series of zero or more characters; and
alphabetic characters match either upper- or lowercase.  The
returned <parameter>NAMES</parameter> are encoded in
<acronym>ISO</acronym> 8859-1 and may contain mixed
character cases.  Font names are not required to be in <acronym>XLFD</acronym>
format.
    </para>
    <para>
If <parameter>PATTERN</parameter> is of zero length or
<parameter>MAX-NAMES</parameter> is equal to zero,
one reply containing a zero-length list of names is returned.
This may be used to synchronize the client with the server.
    </para>
    <para>
Servers are free to add or remove fonts to the set returned by
<function>ListFonts</function>
between any two requests.  This request is not
cumulative; repeated uses are processed in isolation and do
result in an iteration through the list.
    </para>
    <para>
To reduce the amount of buffering needed by the server, the
list of names may be split across several reply packets, so
long as the names arrive in the same order that they would
have appeared had they been in a single packet.  The
<parameter>REPLIES-FOLLOWING-HINT</parameter> field in all but the last reply
contains a positive value that specifies the number of
replies that are likely, but not required, to follow.  In the
last reply, which may contain zero or more names, this field
is set to zero.
    </para>
</section>

<section id="Requests:ListFontsWithXInfo">
    <title><function>ListFontsWithXInfo</function></title>
    <indexterm zone="Requests:ListFontsWithXInfo" significance="preferred"><primary>ListFontsWithXInfo</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>pattern</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>pattern</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>pattern</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>max-names</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry>▶+</entry></row>
          <row><entry><parameter>replies-following-hint</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>info</parameter>:</entry><entry><link linkend="Data_Types:XFONTINFO"><type>XFONTINFO</type></link></entry></row>
          <row rowsep='1'><entry><parameter>name</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request is similar to
<link linkend="Requests:ListFonts"><function>ListFonts</function></link>
except that a separate
reply containing the name, header, and property data is
generated for each matching font name.  Following these
replies, if any, a final reply containing a zero-length
<parameter>NAME</parameter> and no <parameter>INFO</parameter> is sent.
    </para>
    <para>
The <parameter>REPLIES-FOLLOWING-HINT</parameter> field in all but the
last reply contains a positive value that specifies the number of replies
that are likely, but not required, to follow.  In the last
reply, this field is set to zero.
    </para>
    <para>
If <parameter>PATTERN</parameter> is of zero length or if
<parameter>MAX-NAMES</parameter> is equal to zero, only the final reply
containing a zero-length <parameter>NAME</parameter> and no
<parameter>INFO</parameter> is returned. This may be used to synchronize the
client with the server.
    </para>
</section>

<section id="Requests:OpenBitmapFont">
    <title><function>OpenBitmapFont</function></title>
    <indexterm zone="Requests:OpenBitmapFont" significance="preferred"><primary>OpenBitmapFont</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry><parameter>pattern</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>format-mask</parameter>:</entry><entry><link linkend="Data_Types:BITMAPFORMATMASK"><type>BITMAPFORMATMASK</type></link></entry></row>
          <row><entry><parameter>format-hint</parameter>:</entry><entry><link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row><entry><parameter>otherid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link> or <constant>None</constant></entry></row>
          <row><entry><parameter>otherid-valid</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row rowsep='1'><entry><parameter>cachable</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry>Errors:</entry><entry>
<link linkend="Errors:IDChoice"><errorname>IDChoice</errorname></link>,
<link linkend="Errors:Name"><errorname>Name</errorname></link>,
<link linkend="Errors:Format"><errorname>Format</errorname></link>,
<link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request looks for a server-dependent choice of the
font names that match the specified <parameter>PATTERN</parameter>
according to the rules described for
<link linkend="Requests:ListFonts"><function>ListFonts</function></link>.
If no matches are found, a
<link linkend="Errors:Name"><errorname>Name</errorname></link>
error is returned.  Otherwise, the server attempts to
open the font associated with the chosen name.
    </para>
    <para>
Permission to access the font is determined by the server
according the licensing policy used for this font.  The server
may use the client's current
<type>AccessContext</type>
(as set by the most
recent
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>
request or the original connection
setup) to determine any client-specific sets of permissions.
After the font has been opened, the client is allowed to
specify a new
<type>AccessContext</type>
with
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>
or release
the
<type>AccessContext</type>
using
<link linkend="Requests:FreeAC"><function>FreeAC</function></link>
.  Subsequent
<link linkend="Requests:QueryXInfo"><function>QueryXInfo</function></link>,
<link linkend="Requests:QueryXExtents8"><function>QueryXExtents8</function></link>,
<link linkend="Requests:QueryXExtents16"><function>QueryXExtents16</function></link>,
<link linkend="Requests:QueryXBitmaps8"><function>QueryXBitmaps8</function></link>,
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
and
<link linkend="Requests:CloseFont"><function>CloseFont</function></link>
requests on this <link linkend="Data_Types:FONTID"><type>FONTID</type></link> are
performed according to permissions granted at the time of the
<function>OpenBitmapFont</function>
request.
    </para>
    <para>
If the server is willing and able to detect that the client
has already opened the font successfully (possibly under a
different name), the <parameter>OTHERID</parameter> field
may be set to one of the
identifiers previously used to open the font.  The
<parameter>OTHERID-VALID</parameter> field indicates whether or not
<parameter>OTHERID</parameter> is still associated with an open font:
if it is <constant>True</constant>, the client may use
<parameter>OTHERID</parameter> as an alternative to
<parameter>FONTID</parameter>. Otherwise, if
<parameter>OTHERID-VALID</parameter> is <constant>False</constant>,
<parameter>OTHERID</parameter> is no longer
open but has not been reused by a subsequent
<function>OpenBitmapFont</function>
request.
    </para>
    <para>
If <parameter>OTHERID</parameter> is set to <constant>None</constant>,
then <parameter>OTHERID-VALID</parameter> should be set
to <constant>False</constant>.
    </para>
    <para>
The <parameter>FORMAT-MASK</parameter> indicates which fields in
<parameter>FORMAT-HINT</parameter>
the client is likely to use in subsequent
<function>GetXBitmaps8</function>
and
<function>GetXBitmaps16</function>
requests.  Servers may wish to use
this information to precompute certain values.
    </para>
    <para>
If <parameter>CACHABLE</parameter> is set to <constant>True</constant>,
the client may cache the font
(so that redundant opens of the same font may be avoided)
and use it with all
<type>AccessContext</type>s
during the life of the
client without violating the font's licensing policy.  This
flag is typically set whenever a font is unlicensed or is
licensed on a per-display basis.  If <parameter>CACHABLE</parameter>
is <constant>False</constant>, the
client should reopen the font for each
<type>AccessContext</type>.
    </para>
    <para>
The server is permitted to add to or remove from the set of
fonts returned by
<link linkend="Requests:ListFonts"><function>ListFonts</function></link>
between any two requests, though
mechanisms outside the protocol.  Therefore, it is possible
for this request (which is atomic) to return a different font
than would result from separate a
<link linkend="Requests:ListFonts"><function>ListFonts</function></link>
followed by an
<function>OpenBitmapFont</function>
with a non-wildcarded font name.
    </para>
    <para>
If <parameter>FONTID</parameter> is not in the range
[1..2<superscript>29</superscript>-1] or if it is already
associated with an open font, an
<link linkend="Errors:IDChoice"><errorname>IDChoice</errorname></link>
error is returned.
If no font is available that matches the specified
<parameter>PATTERN</parameter>, a
<link linkend="Errors:Name"><errorname>Name</errorname></link>
error is returned.  If the font is present but the client
is not permitted access, an
<link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link>
error is returned.
If <parameter>FORMAT-MASK</parameter> has any unspecified bits set or if any
of the fields in <parameter>FORMAT-HINT</parameter> indicated by
<parameter>FORMAT-MASK</parameter> are invalid, a
<link linkend="Errors:Format"><errorname>Format</errorname></link>
error is returned.
    </para>
</section>

<section id="Requests:QueryXInfo">
    <title><function>QueryXInfo</function></title>
    <indexterm zone="Requests:QueryXInfo" significance="preferred"><primary>QueryXInfo</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>info</parameter>:</entry><entry><link linkend="Data_Types:XFONTINFO"><type>XFONTINFO</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Font"><errorname>Font</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns the font header and property information
for the open font associated with <parameter>FONTID</parameter>.
    </para>
    <para>
If <parameter>FONTID</parameter> is not associated with any open fonts, a
<link linkend="Errors:Font"><errorname>Font</errorname></link>
error
is returned.
    </para>
</section>

<section id="Requests:QueryXExtents8">
    <title><function>QueryXExtents8</function></title>
    <indexterm zone="Requests:QueryXExtents8" significance="preferred"><primary>QueryXExtents8</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry><parameter>range</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>chars</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>extents</parameter>:</entry><entry><link linkend="Data_Types:XCHARINFO"><type>LISTofXCHARINFO</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Font"><errorname>Font</errorname></link>,
<link linkend="Errors:Range"><errorname>Range</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request is equivalent to
<link linkend="Requests:QueryXExtents16"><function>QueryXExtents16</function></link>
except that it
uses 1-byte character codes.
    </para>
</section>

<section id="Requests:QueryXExtents16">
    <title><function>QueryXExtents16</function></title>
    <indexterm zone="Requests:QueryXExtents16" significance="preferred"><primary>QueryXExtents16</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry><parameter>range</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>chars</parameter>:</entry><entry><link linkend="Data_Types:CHAR2B"><type>LISTofCHAR2B</type></link></entry></row>
          <row><entry>▶</entry></row>
          <row rowsep='1'><entry><parameter>extents</parameter>:</entry><entry><link linkend="Data_Types:XCHARINFO"><type>LISTofXCHARINFO</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Font"><errorname>Font</errorname></link>,
<link linkend="Errors:Range"><errorname>Range</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns a list of glyph extents from the open
font associated with FONTID for the series of characters
specified by <parameter>RANGE</parameter> and <parameter>CHARS</parameter>.
    </para>
    <para>
If <parameter>RANGE</parameter> is <constant>True</constant>,
each succeeding pair of elements in <parameter>CHARS</parameter> is
treated as a range of characters for which extents should be
returned.  If <parameter>CHARS</parameter> contains an odd number of elements,
the font's <structfield>XFONTINFO.CHAR-RANGE.MAX-CHAR</structfield>
is implicitly appended to
the list.  If <parameter>CHARS</parameter> contains no elements, the list is
implicitly replaced with the font's
<structfield>XFONTINFO.CHAR-RANGE.</structfield>  If
any of the resulting character ranges are invalid, a
<link linkend="Errors:Range"><errorname>Range</errorname></link>
error is returned.  Otherwise, the character ranges are
concatenated in the order given by <parameter>CHARS</parameter> to produce
a set of character codes for which extents are returned.
    </para>
    <para>
If <parameter>RANGE</parameter> is <constant>False</constant>,
then <parameter>CHARS</parameter> specifies the set of character
codes for which extents are returned.  If <parameter>CHARS</parameter> is of
zero length, then a zero-length list of extents is returned.
    </para>
    <para>
The extents for each character code in the resulting set (which
may contain duplicates) are returned in the order in
which the character codes appear in the set.
At least one metric for each character shall be non-zero
unless the character is not encoded in the font, in which case
all-zero metrics are returned.
A blank, zero-width character can be encoded
with non-zero but equal left and right bearings.
    </para>
    <para>
If <parameter>FONTID</parameter> is not associated with any open fonts, a
<link linkend="Errors:Font"><errorname>Font</errorname></link>
error is
returned.  If <parameter>RANGE</parameter> is <constant>True</constant>
and <parameter>CHARS</parameter> contains any invalid ranges, a
<link linkend="Errors:Range"><errorname>Range</errorname></link>
error is returned.
    </para>
</section>

<section id="Requests:QueryXBitmaps8">
    <title><function>QueryXBitmaps8</function></title>
    <indexterm zone="Requests:QueryXBitmaps8" significance="preferred"><primary>QueryXBitmaps8</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry><parameter>range</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>chars</parameter>:</entry><entry><link linkend="Data_Types:STRING8"><type>STRING8</type></link></entry></row>
          <row><entry><parameter>format</parameter>:</entry><entry><link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link></entry></row>
          <row><entry>▶+</entry></row>
          <row><entry><parameter>replies-following-hint</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>offsets</parameter>:</entry><entry><link linkend="Data_Types:OFFSET32"><type>LISTofOFFSET32</type></link></entry></row>
          <row><entry><parameter>bitmaps</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link></entry></row>
          <row rowsep='1'><entry>Errors:</entry><entry><link linkend="Errors:Font"><errorname>Font</errorname></link>,
<link linkend="Errors:Range"><errorname>Range</errorname></link>,
<link linkend="Errors:Format"><errorname>Format</errorname></link>,
<link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request is equivalent to
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
except that it
uses 1-byte character codes.
    </para>
</section>

<section id="Requests:QueryXBitmaps16">
    <title><function>QueryXBitmaps16</function></title>
    <indexterm zone="Requests:QueryXBitmaps16" significance="preferred"><primary>QueryXBitmaps16</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry><parameter>range</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>chars</parameter>:</entry><entry><link linkend="Data_Types:CHAR2B"><type>LISTofCHAR2B</type></link></entry></row>
          <row><entry><parameter>format</parameter>:</entry><entry><link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link></entry></row>
          <row><entry>▶+</entry></row>
          <row><entry><parameter>replies-following-hint</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>offsets</parameter>:</entry><entry><link linkend="Data_Types:OFFSET32"><type>LISTofOFFSET32</type></link></entry></row>
          <row rowsep='1'><entry><parameter>bitmaps</parameter>:</entry><entry><link linkend="Data_Types:BYTE"><type>LISTofBYTE</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Font"><errorname>Font</errorname></link>,
          <link linkend="Errors:Range"><errorname>Range</errorname></link>,
          <link linkend="Errors:Format"><errorname>Format</errorname></link>,
          <link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request returns a list of glyph bitmaps from the open font associated
with <parameter>FONTID</parameter> for the series of characters
specified by <parameter>RANGE</parameter> and <parameter>CHARS</parameter>.
    </para>
    <para>
If <parameter>RANGE</parameter> is <constant>True</constant>, each succeeding
pair of elements in <parameter>CHARS</parameter> is
treated as a range of characters for which bitmaps should be
returned.  If <parameter>CHARS</parameter> contains an odd number of elements,
the font's <structfield>XFONTINFO.CHAR-RANGE.MAX-CHAR</structfield>
is implicitly appended to
the list.  If <parameter>CHARS</parameter> contains no elements, the list is
implicitly replaced with the font's
<structfield>XFONTINFO.CHAR-RANGE.</structfield>  If
any of the resulting character ranges are invalid, a <link linkend="Errors:Range"><errorname>Range</errorname></link>
error is returned.  Otherwise, the character ranges are
concatenated in the order given by <parameter>CHARS</parameter> to produce
a set of character codes for which bitmaps are returned.
    </para>
    <para>
If <parameter>RANGE</parameter> is <constant>False</constant>,
then <parameter>CHARS</parameter> specifies the set of character
codes for which bitmaps are returned.  If <parameter>CHARS</parameter>
is of zero length, then a single reply containing a zero-length list of
offsets and bitmaps is returned.
    </para>
    <para>
If any of the resulting character ranges are invalid, a
<link linkend="Errors:Range"><errorname>Range</errorname></link>
error is returned.  Otherwise, the resulting character ranges
are concatenated in the order given by <parameter>CHARS</parameter>
to produce a set of character codes for which bitmaps are returned.
    </para>
    <para>
The server is free to return the glyph bitmaps in multiple
replies to reduce the amount of buffering that is necessary.
In this situation, the set of characters obtained above is
partitioned into an implementation-dependent number of
ordered, non-overlapping subsets containing runs of one or
more consecutive characters.  The global ordering of
characters must be maintained such that concatenating the
subsets in order that they were produced yields the original
set.  A reply is generated for each subset, in the order that
it was produced.
    </para>
    <para>
For each character in a subset, an image of that character's
glyph is described by a rectangle of bits corresponding to the
pixels specified by FORMAT.IMAGE-RECT.  Within the image, set
and clear bits represent inked and non-inked pixels,
respectively.
    </para>
    <para>
Each scanline of a glyph image, from top to bottom, is zero-padded
on the right to a multiple of the number of bits specified by
FORMAT.SCANLINE-PAD.  The scanline is then divided from left
to right into a sequence of FORMAT.SCANLINE-UNIT bits.  The
bits of each unit are then arranged such that the left-most
pixel is stored in the most- or least-significant bit,
according to FORMAT.BIT-ORDER-MSB.  The bytes of each unit are
then arranged such that the most- or least-significant byte,
according to FORMAT.BYTE-ORDER-MSB, is transmitted first.
Finally, the units are arranged such that the left-most is
transmitted first and the right-most is transmitted last.
    </para>
    <para>
The individual images within a subset are then concatenated in
a server-dependent order to form the <parameter>BITMAPS</parameter> data
of the reply.  If a glyph image is duplicated within a reply, the
server is free to return fewer (but at least one) copies of
the image.  If a character is not encoded within the font, a
zero-length bitmap is substituted for this character.  Each
glyph image must begin at a bit position that is a multiple of
the FORMAT.SCANLINE-UNIT.
    </para>
    <para>
The <parameter>OFFSETS</parameter> array in a reply contains one entry
for each character in the subset being returned, in the order that the
characters appear in the subset.  Each entry specifies the
starting location in bytes and size in bytes of the
corresponding glyph image in the <parameter>BITMAPS</parameter> data of that
reply (i.e. an offset may not refer to data in another reply).
    </para>
    <para>
The <parameter>REPLIES-FOLLOWING-HINT</parameter> field in all but the
last reply contains a positive value that specifies the number of replies
that are likely, but not required, to follow.  In the last
reply, which may contain data for zero or more characters,
this field is set to zero.
    </para>
    <para>
If <parameter>FONTID</parameter> is not associated with any open fonts,
a <link linkend="Errors:Font"><errorname>Font</errorname></link>
error is returned.  If <parameter>RANGE</parameter> is
<constant>True</constant> and <parameter>CHARS</parameter> contains any
invalid ranges, a
<link linkend="Errors:Range"><errorname>Range</errorname></link> error
is returned.  If <parameter>FORMAT</parameter> is invalid, a
<link linkend="Errors:Format"><errorname>Format</errorname></link> error
is returned.
    </para>
</section>

<section id="Requests:CloseFont">
    <title><function>CloseFont</function></title>
    <indexterm zone="Requests:CloseFont" significance="preferred"><primary>CloseFont</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row rowsep='1'><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry></row>
          <row><entry>Errors:</entry><entry><link linkend="Errors:Font"><errorname>Font</errorname></link>, <link linkend="Errors:Alloc"><errorname>Alloc</errorname></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This request indicates that the specified <parameter>FONTID</parameter>
should no longer be associated with an open font.  The server is free to
release any client-specific storage or licenses allocated for
the font.  The client may reuse the value of <parameter>FONTID</parameter>
in a subsequent
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
request.
    </para>
    <para>
If <parameter>FONTID</parameter> is not associated with any open fonts, a
<link linkend="Errors:Font"><errorname>Font</errorname></link>
error is returned.
    </para>
</section>

<section id="Requests:close_connection">
    <title>close connection</title>
    <indexterm zone="Requests:close_connection" significance="preferred"><primary>close connection</primary></indexterm>

    <para>
When a connection is closed, a
<link linkend="Requests:CloseFont"><function>CloseFont</function></link>
is done on all fonts
that are open on the connection.  In addition, the server is
free to release any storage or licenses allocated on behalf of
the client that made the connection.
    </para>
</section>
</section>

<section id='Errors'>
<title>Errors</title>
<!-- .XS -->
<!-- (SN Errors -->
<!-- .XE -->
<para>
All errors are at least 16 bytes long and contain the following fields:
</para>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>type</parameter>:</entry><entry><type>CARD8</type></entry><entry>value of 1</entry></row>
          <row><entry><parameter>error-code</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>sequence-number</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>length</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>timestamp</parameter>:</entry><entry><link linkend="Data_Types:TIMESTAMP"><type>TIMESTAMP</type></link></entry></row>
          <row><entry><parameter>major-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>minor-opcode</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
<para>
The TYPE field has a value of one.  The ERROR-CODE field specifies which error
occurred.  Core errors codes are in the range 0 through 127, extension error
codes are in the range 128 through 255.  The SEQUENCE-NUMBER field contains the
least significant 16 bits of the sequence number of the request that caused the
error.  The LENGTH field specifies the length of the error packet in 4-byte
units and must have a value of at least 4.  The TIMESTAMP specifies the server
time when the error occurred.  The MAJOR-OPCODE and MINOR-OPCODE (zero for core
requests) fields specify the type of request that generated the error.  The
DATA-OR-UNUSED field may be used for 16 bits of error-specific information.  If
LENGTH is greater than four, these fields are followed by (LENGTH - 4) * 4
bytes of extra data.
</para>
<para>
The following errors are defined for the core protocol:
</para>

<section id="Errors:Request">
    <title><errorname>Request</errorname></title>
    <indexterm zone="Errors:Request" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Request</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by any request that has an unknown
combination of major and minor request numbers, or by any
extension request that is issued before a
<link linkend="Requests:QueryExtension"><function>QueryExtension</function></link>
of that extension.
    </para>
</section>

<section id="Errors:Format">
    <title><errorname>Format</errorname></title>
    <indexterm zone="Errors:Format" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Format</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>format</parameter>:</entry><entry><link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link></entry><entry>bad format value</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by the use of an invalid <link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link>
in the
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>,
<link linkend="Requests:QueryXBitmaps8"><function>QueryXBitmaps8</function></link>, and
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
requests.
The value that caused the error is included as extra data.
    </para>
</section>

<section id="Errors:Font">
    <title><errorname>Font</errorname></title>
    <indexterm zone="Errors:Font" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Font</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>fontid</parameter>:</entry><entry><link linkend="Data_Types:FONTID"><type>FONTID</type></link></entry><entry>bad font identifier</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by an invalid <link linkend="Data_Types:FONTID"><type>FONTID</type></link> in the
<link linkend="Requests:QueryXInfo"><function>QueryXInfo</function></link>,
<link linkend="Requests:QueryXExtents8"><function>QueryXExtents8</function></link>,
<link linkend="Requests:QueryXExtents16"><function>QueryXExtents16</function></link>,
<link linkend="Requests:QueryXBitmaps8"><function>QueryXBitmaps8</function></link>,
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
and
<link linkend="Requests:CloseFont"><function>CloseFont</function></link>
requests.  The value that caused
the error is included as extra data.
    </para>
</section>

<section id="Errors:Range">
    <title><errorname>Range</errorname></title>
    <indexterm zone="Errors:Range" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Range</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>range</parameter>:</entry><entry><link linkend="Data_Types:RANGE"><type>RANGE</type></link></entry><entry>bad range</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by an invalid <link linkend="Data_Types:RANGE"><type>RANGE</type></link> in the
<link linkend="Requests:QueryXExtents8"><function>QueryXExtents8</function></link>,
<link linkend="Requests:QueryXExtents16"><function>QueryXExtents16</function></link>,
<link linkend="Requests:QueryXBitmaps8"><function>QueryXBitmaps8</function></link>
and
<link linkend="Requests:QueryXBitmaps16"><function>QueryXBitmaps16</function></link>
requests.  The
value that caused the error is included as extra data.
    </para>
</section>

<section id="Errors:EventMask">
    <title><errorname>EventMask</errorname></title>
    <indexterm zone="Errors:EventMask" significance="preferred"><primary>Error Codes</primary><secondary><errorname>EventMask</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>event-mask</parameter>:</entry><entry><link linkend="Data_Types:EVENTMASK"><type>EVENTMASK</type></link></entry><entry>bad event mask</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by an invalid <link linkend="Data_Types:EVENTMASK"><type>EVENTMASK</type></link> in the
<link linkend="Requests:SetEventMask"><function>SetEventMask</function></link>
request.  The value that caused the error is
included as extra data.
    </para>
</section>

<section id="Errors:AccessContext">
    <title><errorname>AccessContext</errorname></title>
    <indexterm zone="Errors:AccessContext" significance="preferred"><primary>Error Codes</primary><secondary><errorname>AccessContext</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>ac</parameter>:</entry><entry><link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link></entry><entry>unaccepted <type>AccessContext</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by an invalid <link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link> in the
<link linkend="Requests:FreeAC"><function>FreeAC</function></link>
or
<link linkend="Requests:SetAuthorization"><function>SetAuthorization</function></link>
request or by an
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
request performed without sufficient authorization.  In the
first two cases, the <link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link> of the errant request is
returned as extra data.  In the third case, the current
<link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link> is returned as extra data.
    </para>
</section>

<section id="Errors:IDChoice">
    <title><errorname>IDChoice</errorname></title>
    <indexterm zone="Errors:IDChoice" significance="preferred"><primary>Error Codes</primary><secondary><errorname>IDChoice</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>id</parameter>:</entry><entry><link linkend="Data_Types:ID"><type>ID</type></link></entry><entry>bad identifier</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by an invalid or already associated
<link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link> identifier in a
<link linkend="Requests:CreateAC"><function>CreateAC</function></link>
request or <link linkend="Data_Types:FONTID"><type>FONTID</type></link> identifier
in an
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
request.  The value that caused the error
is included as extra data.
    </para>
</section>

<section id="Errors:Name">
    <title><errorname>Name</errorname></title>
    <indexterm zone="Errors:Name" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Name</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by a font name pattern that matches
no fonts in an
<link linkend="Requests:OpenBitmapFont"><function>OpenBitmapFont</function></link>
request or no catalogue names in a
<link linkend="Requests:SetCatalogues"><function>SetCatalogues</function></link>
request.
    </para>
</section>

<section id="Errors:Resolution">
    <title><errorname>Resolution</errorname></title>
    <indexterm zone="Errors:Resolution" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Resolution</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>X value of errant resolution</entry></row>
          <row><entry><parameter>y-resolution</parameter>:</entry><entry><type>CARD16</type></entry><entry>Y value of errant resolution</entry></row>
          <row><entry><parameter>point-size</parameter>:</entry><entry><type>CARD16</type></entry><entry>point size of errant resolution</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated in response to an invalid <link linkend="Data_Types:RESOLUTION"><type>RESOLUTION</type></link>
structure in a
<link linkend="Requests:SetResolution"><function>SetResolution</function></link>
request.  The value that caused the
error is included in the DATA-OR-UNUSED field and as extra data.
    </para>
</section>

<section id="Errors:Alloc">
    <title><errorname>Alloc</errorname></title>
    <indexterm zone="Errors:Length" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Alloc</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by any request for which the server
lacks sufficient resources (especially memory).
    </para>
</section>

<section id="Errors:Length">
    <title><errorname>Length</errorname></title>
    <indexterm zone="Errors:Length" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Length</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
          <row><entry><parameter>length</parameter>:</entry><entry><type>CARD32</type></entry><entry>bad length value</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error is generated by any request that has a length field
greater than (MAXIMUM-REQUEST-LENGTH * 4) bytes.  The value that
caused the error is included as extra data.
    </para>
</section>

<section id="Errors:Implementation">
    <title><errorname>Implementation</errorname></title>
    <indexterm zone="Errors:Implementation" significance="preferred"><primary>Error Codes</primary><secondary><errorname>Implementation</errorname></secondary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>data-or-unused</parameter>:</entry><entry><type>CARD16</type></entry><entry>unused</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This error may be generated in response to any request that
the server is unable to process because it is deficient.  Use
of this error is highly discouraged and indicates lack of
conformance to the protocol.
    </para>
</section>
<section id="Errors:Extensions">
  <title>Extensions</title>
    <para>
Additional errors may be defined by extensions.
    </para>
</section>
</section>

<section id='Events'>
<title>Events</title>
<!-- .XS -->
<!-- (SN Events -->
<!-- .XE -->
<para>
Events may be generated in response to requests or at the server's discretion
after the initial connection setup information has been exchanged.  Each event
is at least 12 bytes long and contains the following fields:
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='3' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <colspec colname='c3' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>type</parameter>:</entry><entry><type>CARD8</type></entry><entry>value of 2</entry></row>
          <row><entry><parameter>event-code</parameter>:</entry><entry><type>CARD8</type></entry></row>
          <row><entry><parameter>sequence-number</parameter>:</entry><entry><type>CARD16</type></entry></row>
          <row><entry><parameter>length</parameter>:</entry><entry><type>CARD32</type></entry></row>
          <row><entry><parameter>timestamp</parameter>:</entry><entry><link linkend="Data_Types:TIMESTAMP"><type>TIMESTAMP</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
</para>
<para>
The TYPE field contains the value 2.  The EVENT-CODE field specifies the number
of the event and is in the range 0-127 for core events or the range 128-255 for
extensions.  The SEQUENCE-NUMBER field specifies the least significant 16 bits
of the sequence number of the last request to have been processed by the
server.  The LENGTH field specifies the number of 4-byte units in this event
packet and must always have a value of at least 3.  The <link linkend="Data_Types:TIMESTAMP"><type>TIMESTAMP</type></link> field
specifies the server time when the event occurred.  If LENGTH is greater than
three, these fields are followed by (LENGTH - 3) * 4 bytes of additional data.
</para>
<para>
Events are described using the following syntax:
  <blockquote><para>
    <emphasis role="bold"><function>EventName</function></emphasis>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>arg1</parameter>:</entry><entry><type>type1</type></entry></row>
          <row><entry> ...</entry></row>
          <row><entry><parameter>argN</parameter>:</entry><entry><type>typeN</type></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    Description
  </para></blockquote>
</para>
<para>
If an event does not provide any extra arguments, the
<parameter>arg1</parameter>...<parameter>argN</parameter>
lines are omitted from the description.
</para>
<para>
The core X Font Service protocol defines the following events:
</para>

<section id="Events:KeepAlive">
    <title><function>KeepAlive</function></title>
    <indexterm zone="Events:KeepAlive" significance="preferred"><primary>KeepAlive</primary></indexterm>
    <para>
This unsolicited, nonmaskable event may be sent by the
server to verify that the connection has not been broken
(for transports that do not provide this information).
Clients should acknowledge receipt of this request
by sending any request (such as
<link linkend="Requests:NoOp"><function>NoOp</function></link>
).
    </para>
</section>

<section id="Events:CatalogueListNotify">
    <title><function>CatalogueListNotify</function></title>
    <indexterm zone="Events:CatalogueListNotify" significance="preferred"><primary>CatalogueListNotify</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>added</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>deleted</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This event is sent to clients that have included
<function><constant>CatalogueListChangeMask</constant></function>
in their core event mask
whenever the list of catalogues that are available has
changed.  The ADDED field is <constant>True</constant> if new catalogues have
been added to the server, otherwise it is <constant>False</constant>.  The
DELETED field is <constant>True</constant> if any existing catalogues have
been removed from the server, otherwise it is <constant>False</constant>.
    </para>
</section>

<section id="Events:FontListNotify">
    <title><function>FontListNotify</function></title>
    <indexterm zone="Events:FontListNotify" significance="preferred"><primary>FontListNotify</primary></indexterm>
    <informaltable frame='none'>
      <?dbfo keep-together="always" ?>
      <tgroup cols='2' align='left' colsep='0' rowsep='0'>
        <colspec colname='c1' colwidth='1.0*'/>
        <colspec colname='c2' colwidth='1.0*'/>
        <tbody>
          <row><entry><parameter>added</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
          <row><entry><parameter>deleted</parameter>:</entry><entry><link linkend="Data_Types:BOOL"><type>BOOL</type></link></entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
This event is sent to clients that have included
<function><constant>FontListChangeMask</constant></function>
in their event mask whenever the
list of fonts that are provided by the currently selected
catalogues has changed.  The ADDED field is <constant>True</constant> if new
fonts have been added to any of the catalogues currently
used by the client, otherwise it is <constant>False</constant>.  The DELETED
field is <constant>True</constant> if any existing fonts have been removed
from any of catalogues used by the client, otherwise it
is <constant>False</constant>.
    </para>
</section>
<section id="Events:Extensions">
  <title>Extensions</title>
    <para>
Additional events may be defined by extensions.
    </para>
</section>
</section>
</chapter>

<chapter id='Protocol_Encoding'>
<title>Protocol Encoding</title>
<!-- .XS -->
<!-- (SN Protocol Encoding -->
<!-- .XE -->
<para>
Numbers that are prefixed with <quote><literal>#x</literal></quote>
are in hexadecimal (base 16).  All other
numbers are in decimal.  Requests, replies, errors, events, and compound types
are described using the syntax:
</para>
<!-- .RS -->
<literallayout class="monospaced">

    Name
     <emphasis remap='I'>count</emphasis>          <emphasis remap='I'>contents</emphasis>     <emphasis remap='I'>name</emphasis>
     ...
     <emphasis remap='I'>count</emphasis>          <emphasis remap='I'>contents</emphasis>     <emphasis remap='I'>name</emphasis>
</literallayout>

<!-- .RE -->
<para>
where COUNT is the number of bytes in the data stream occupied by this
field, CONTENTS is the name of the type as given in
<link linkend='Data_Types'>Section 4</link> or the value if
this field contains a constant, and NAME is a description of this field.
</para>
<para>
Objects containing counted lists use a lowercase single-letter variable (whose
scope is limited to the request, reply, event, or error in which it is found)
to represent the number of objects in the list.  These variables, and any
expressions in which they are used, should be treated as unsigned integers.
Multiple copies of an object are indicated by CONTENTS prefix
<quote>LISTof</quote>.
</para>
<para>
Unused bytes (whose value is undefined) will have a blank CONTENTS field and a
NAME field of <quote>unused</quote>.  Zeroed bytes (whose value must be zero)
will have a blank CONTENTS field and a NAME field of <quote>zero</quote>.
The expression pad(e) refers to the number of bytes
needed to round a value <quote>e</quote> up to the closed
multiple of four:
</para>
<!-- .RS -->
<literallayout class="monospaced">

     pad(e) = (4 - (e mod 4)) mod 4
</literallayout>

<section id='Encoding::Data_Types'>
<title>Data Types</title>
<!-- .XS -->
<!-- (SN Data Types -->
<!-- .XE -->
<literallayout class="monospaced">
<link linkend="Data_Types:ACCESSCONTEXT"><type>ACCESSCONTEXT</type></link>
4     <type>CARD32</type>                 access context

      with at least one of the following bits set:

        #x1fffffff

      but none of the following bits set:

        #xe0000000        zero


<link linkend="Data_Types:ALTERNATESERVER"><type>ALTERNATESERVER</type></link>
1     <type>BOOL</type>                   subset
1     n                      length of name
n     <type>STRING8</type>                name
p                            unused, p=pad(n+2)

<link linkend="Data_Types:AUTH"><type>AUTH</type></link>
2     n                      length of name
2     d                      length of data
n     <type>STRING8</type>                name
p                            unused, p=pad(n)
d     <type>STRING8</type>                data
q                            unused, q=pad(d)


<link linkend="Data_Types:BITMAPFORMAT"><type>BITMAPFORMAT</type></link>
4     <type>CARD32</type>                 value, union of the following bits:

        #x00000001        ByteOrderMSB
        #x00000002        BitOrderMSB
        #x00000000        <constant>ImageRectMin</constant>
        #x00000004        <constant>ImageRectMaxWidth</constant>
        #x00000008        <constant>ImageRectMax</constant>
        #x00000000        <constant>ScanlinePad8</constant>
        #x00000100        <constant>ScanlinePad16</constant>
        #x00000200        <constant>ScanlinePad32</constant>
        #x00000300        <constant>ScanlinePad64</constant>
        #x00000000        <constant>ScanlineUnit8</constant>
        #x00001000        <constant>ScanlineUnit16</constant>
        #x00002000        <constant>ScanlineUnit32</constant>
        #x00003000        <constant>ScanlineUnit64</constant>

      except for the following bits which must be zero:

        #xffffccf0        zero

      and the following of which at most one bit may be set:

        #x0000000c        at most one bit can be set


<link linkend="Data_Types:BITMAPFORMATMASK"><type>BITMAPFORMATMASK</type></link>
4     <type>CARD32</type>                 value, mask of the following bits:

        #x00000001        <constant>ByteOrderMask</constant>
        #x00000002        <constant>BitOrderMask</constant>
        #x00000004        <constant>ImageRectMask</constant>
        #x00000008        <constant>ScanlinePadMask</constant>
        #x00000010        <constant>ScanlineUnitMask</constant>

      except for the following bits which must be zero:

        #xffffffe0        zero

<link linkend="Data_Types:BOOL"><type>BOOL</type></link>
1     <type>BOOL</type>                   boolean, one of the following values:
        0                 <constant>False</constant>
        1                 <constant>True</constant>

<link linkend="Data_Types:BYTE"><type>BYTE</type></link>
1     <type>BYTE</type>                   unsigned byte of data

<type>CARD8</type>
1     <type>CARD8</type>                  8-bit unsigned integer

<type>CARD16</type>
2     <type>CARD16</type>                 16-bit unsigned integer

<type>CARD32</type>
4     <type>CARD32</type>                 32-bit unsigned integer

<link linkend="Data_Types:CHAR2B"><type>CHAR2B</type></link>
1     <type>CARD8</type>                  byte1
1     <type>CARD8</type>                  byte2

<link linkend="Data_Types:EVENTMASK"><type>EVENTMASK</type></link>
4     <type>CARD32</type>                 event mask

      for core events, this is union of the following bits:

        #00000001         <constant>CatalogueListChangeMask</constant>
        #00000002         <constant>FontListChangeMask</constant>

      but none of the following bits set:

        #fffffffc

      extensions define their own sets of bits

<link linkend="Data_Types:FONTID"><type>FONTID</type></link>
4     <type>CARD32</type>                 font identifier

      with at least one of the following bits set:

        #x1fffffff

      but none of the following bits set:

        #xe0000000        zero

<type>INT8</type>
1     <type>INT8</type>                   8-bit signed integer

<type>INT16</type>
2     <type>INT16</type>                  16-bit signed integer

<type>INT32</type>
4     <type>INT32</type>                  32-bit signed integer

<link linkend="Data_Types:OFFSET32"><type>OFFSET32</type></link>
4     <type>CARD32</type>                 position (or integer value)
4     <type>CARD32</type>                 length

<link linkend="Data_Types:PROPINFO"><type>PROPINFO</type></link>
4     n                      number of <type>PROPOFFSET</type> components
4     m                      number of bytes of property data
20*n  <type>PROPOFFSET</type>             property offsets into data block
m     <type>LISTofBYTE</type>             property data block

<link linkend="Data_Types:PROPOFFSET"><type>PROPOFFSET</type></link>
8     <type>OFFSET32</type>               name in data block
8     <type>OFFSET32</type>               value in data block
1     <type>CARD8</type>                  type, one of the following values:
        0                 <constant>String</constant>
        1                 <constant>Unsigned</constant>
        2                 <constant>Signed</constant>
        3                 zero

<link linkend="Data_Types:RANGE"><type>RANGE</type></link>
2     <type>CHAR2B</type>                 minimum character code
2     <type>CHAR2B</type>                 maximum character code

<link linkend="Data_Types:RESOLUTION"><type>RESOLUTION</type></link>
2     <type>CARD16</type>                 x resolution in pixels per inch
2     <type>CARD16</type>                 y resolution in pixels per inch
2     <type>CARD16</type>                 point size in decipoints

STRNAME
1     n                      length of name
n     <type>STRING8</type>                name

<link linkend="Data_Types:STRING8"><type>STRING8</type></link>
n     <type>LISTofBYTE</type>             array of 8-bit character values

<link linkend="Data_Types:TIMESTAMP"><type>TIMESTAMP</type></link>
4     <type>CARD32</type>                 milliseconds since server time origin

<link linkend="Data_Types:XCHARINFO"><type>XCHARINFO</type></link>
2     <type>INT16</type>                  left bearing
2     <type>INT16</type>                  right bearing
2     <type>INT16</type>                  width
2     <type>INT16</type>                  ascent
2     <type>INT16</type>                  descent
2     <type>CARD16</type>                 attributes

<link linkend="Data_Types:XFONTINFO"><type>XFONTINFO</type></link>
4     <type>CARD32</type>                 flags, union of the following bits:

        #x00000001        <constant>AllCharactersExist</constant>
        #x00000002        <constant>InkInside</constant>
        #x00000004        <constant>HorizontalOverlap</constant>

      but none of the following bits set:

        #xfffffff8        zero

4     <type>RANGE</type>                  range of characters in font
1     <type>CARD8</type>                  drawing direction
        0                 <constant>LeftToRight</constant>
        1                 <constant>RightToLeft</constant>
1                            unused
2     <type>CHAR2B</type>                 default character
12    <type>XCHARINFO</type>              minimum bounds
12    <type>XCHARINFO</type>              maximum bounds
2     <type>INT16</type>                  font ascent
2     <type>INT16</type>                  font descent
n     <type>PROPINFO</type>               property data
</literallayout>
</section>

<section id='Encoding::Requests'>
<title>Requests</title>
<para><link linkend="Requests:open_connection"><emphasis role="bold">open connection</emphasis></link></para>
<literallayout class="monospaced">
1     <type>BYTE</type>                   byteorder, one of the values:
        #x42              MostSignificant Byte first
        #x6c              LeastSignificant Byte first
1     <type>CARD8</type>                  numberof auth in auth-data
2     2                      client-major-protocol-version
2     0                      client-minor-protocol-version
2     a/4 lengthof           auth-data
a     <type>LISTofAUTH</type>             auth-data
▶
2     <type>CARD16</type>                 status
        0                 <constant>Success</constant>
        1                 <constant>Continue</constant>
        2                 <constant>Busy</constant>
        3                 <constant>Denied</constant>
2     2                      major version
2     0                      version
1     <type>CARD8</type>                  numberof alternate-servers-hint
1     <type>CARD8</type>                  authorization-index
2     a/4                    lengthof alternate-servers-hint
2     (d+q)/4                lengthof authorization-data
a     <type>LISTofALTERNATESERVER</type>  alternate-servers-hint
d     <type>LISTofBYTE</type>             authorization-data
q                            unused, q=pad(d)
</literallayout>

<para>
If STATUS is <constant>Busy</constant> or <constant>Denied</constant>, the protocol stops and the connection is
closed. If STATUS is <constant>Continue</constant>, the client is expected to respond with
additional data, to which the server responds with
a new status value and more data. This dialog continues until the status
is set to <constant>Success</constant>, or until the server sets STATUS to <constant>Busy</constant> or <constant>Denied</constant>
and closes the connection:
</para>

<literallayout class="monospaced">
◀
4     1+(d+q)/4              length
d     <type>LISTofBYTE</type>             more-authorization-data
q                            unused, q=pad(d)
▶
4     2+(d+q)/4              length
2     <type>CARD16</type>                 status
        0                 <constant>Success</constant>
        1                 <constant>Continue</constant>
        2                 <constant>Busy</constant>
        3                 <constant>Denied</constant>
2                            unused
d     <type>LISTofBYTE</type>             more-authorization-data
q                            unused, q=pad(d)
</literallayout>
<para>
When STATUS is <constant>Success</constant>, the protocol resumes with the following
sent by the server:
</para>

<literallayout class="monospaced">
4     3+(v+w)/4              length of rest of data
2     <type>CARD16</type>                 maximum-request-length
2     v                      length of vendor string
4     <type>CARD32</type>                 release-number
v     <type>STRING8</type>                vendor-string
w                            unused, w=pad(v)
</literallayout>
<para>
Once the connection has been established, the client may send the
following requests:
</para>

<literallayout class="monospaced">
<link linkend="Requests:NoOp"><emphasis role="bold"><function>NoOp</function></emphasis></link>
1   0                        major-opcode
1                            unused
2   1                        length

<link linkend="Requests:ListExtensions"><emphasis role="bold"><function>ListExtensions</function></emphasis></link>
1   1                        major-opcode
1                            unused
2   1                        length
▶
1   0                        type reply
1   <type>CARD8</type>                    numberof names
2   <type>CARD16</type>                   sequence-number
4   2+(n+p)/4                length
n   LISTofSTRNAME            names
p                            unused, p=pad(n)

<link linkend="Requests:QueryExtension"><emphasis role="bold"><function>QueryExtension</function></emphasis></link>
1   2                        major-opcode
1   n                        length of name
2   1+(n+p)/4                length
n   <type>STRING8</type>                  name
p                            unused, p=pad(n)
▶
1   0                        type reply
1   <type>BOOL</type>                     present
2   <type>CARD16</type>                   sequence-number
4   5                        length
2   <type>CARD16</type>                   major-version
2   <type>CARD16</type>                   minor-version
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    first-event
1   <type>CARD8</type>                    number-events
1   <type>CARD8</type>                    first-error
1   <type>CARD8</type>                    number-errors
3                            unused

<link linkend="Requests:ListCatalogues"><emphasis role="bold"><function>ListCatalogues</function></emphasis></link>
1   3                        major-opcode
1                            unused
2   3+(n+p)/4                length
4   <type>CARD32</type>                   max-names
2   n                        length of pattern
2                            unused
n   <type>STRING8</type>                  pattern
p                            unused, p=pad(n)
▶+
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   4+(n+p)/4                length
4   <type>CARD32</type>                   replies-following-hint
4   <type>CARD32</type>                   numberof catalogue-names
n   LISTofSTRNAME            catalogue-names
p                            unused, p=pad(n)

<link linkend="Requests:SetCatalogues"><emphasis role="bold"><function>SetCatalogues</function></emphasis></link>
1   4                        major-opcode
1   <type>CARD8</type>                    numberof catalogue-names
2   1+(n+p)/4                length
n   LISTofSTRNAME            catalogue-names
p                            unused, p=pad(n)

<link linkend="Requests:GetCatalogues"><emphasis role="bold"><function>GetCatalogues</function></emphasis></link>
1   5                        major-opcode
1                            unused
2   1                        length
▶
1   0                        type reply
1   <type>CARD8</type>                    numberof catalogue-names
2   <type>CARD16</type>                   sequence-number
4   2+(n+p)/4                length
n   LISTofSTRNAME            catalogue-names
p                            unused, p=pad(n)

<link linkend="Requests:SetEventMask"><emphasis role="bold"><function>SetEventMask</function></emphasis></link>
1   6                        major-opcode
1   <type>CARD8</type>                    extension-opcode
2   2                        length
4   <type>EVENTMASK</type>                event-mask

<link linkend="Requests:GetEventMask"><emphasis role="bold"><function>GetEventMask</function></emphasis></link>
1   7                        major-opcode
1   <type>CARD8</type>                    extension-opcode
2   1                        length
▶
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   3                        length
4   <type>EVENTMASK</type>                event-mask

<link linkend="Requests:CreateAC"><emphasis role="bold"><function>CreateAC</function></emphasis></link>
1   8                        major-opcode
1   <type>CARD8</type>                    numberof authorization-protocols
2   2+a/4                    length
4   <type>ACCESSCONTEXT</type>            ac
a   <type>LISTofAUTH</type>               authorization-protocols
▶
1   0                        type reply
1   <type>CARD8</type>                    authorization-index
2   <type>CARD16</type>                   sequence-number
4   3+(d+q)/4                length
2   <type>CARD16</type>                   status
        0                    <constant>Success</constant>
        1                    <constant>Continue</constant>
        2                    <constant>Busy</constant>
        3                    <constant>Denied</constant>
2                            unused
d   <type>LISTofBYTE</type>               authorization-data
q                            unused, q=pad(d)
</literallayout>

<para>
If STATUS is <constant>Continue</constant>, the client is expected to respond with additional
data, to which the server
responds with a new status value and more data. This dialog continues
until the status is set to
<constant>Success</constant>, <constant>Busy</constant>, or <constant>Denied</constant> at which point the request is finished.
</para>

<literallayout class="monospaced">
◀
4   1+(d+q)/4                length
d   <type>LISTofBYTE</type>               more-authorization-data
q                            unused, q=pad(d)
▶
4   2+(d+q)/4                length
2   <type>CARD16</type>                   status
        0                    <constant>Success</constant>
        1                    <constant>Continue</constant>
        2                    <constant>Busy</constant>
        3                    <constant>Denied</constant>
2                            unused
d   <type>LISTofBYTE</type>               authorization-data
q                            unused, q=pad(d)

<link linkend="Requests:FreeAC"><emphasis role="bold"><function>FreeAC</function></emphasis></link>
1   9                        major-opcode
1                            unused
2   2                        length
4   <type>ACCESSCONTEXT</type>            ac

<link linkend="Requests:SetAuthorization"><emphasis role="bold"><function>SetAuthorization</function></emphasis></link>
1   10                       major-opcode
1                            unused
2   2                        length
4   <type>ACCESSCONTEXT</type>            ac

<link linkend="Requests:SetResolution"><emphasis role="bold"><function>SetResolution</function></emphasis></link>
1   11                       major-opcode
1   n                        number of resolutions
2   1+(6*n+p)/4              length
6*n <type>LISTofRESOLUTION</type>         resolutions
p   p=pad(6*n)

<link linkend="Requests:GetResolution"><emphasis role="bold"><function>GetResolution</function></emphasis></link>
1   12                       major-opcode
1                            unused
2   1                        length
▶
1   0                        type reply
1   n                        number of resolutions
2   <type>CARD16</type>                   sequence-number
4   2+(6*n+p)/4              length
6*n <type>LISTofRESOLUTION</type>         resolutions
p   p=pad(6*n)

<link linkend="Requests:ListFonts"><emphasis role="bold"><function>ListFonts</function></emphasis></link>
1   13                       major-opcode
1                            unused
2   3+(n+p)/4                length
4   <type>CARD32</type>                   max-names
2   n                        length of pattern
2                            unused
n   <type>STRING8</type>                  pattern
p                            unused, p=pad(n)
▶+
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   4+(n+p)/4                length
4   <type>CARD32</type>                   replies-following-hint
4   <type>CARD32</type>                   numberof font-names
n   LISTofSTRNAME            font-names
p                            unused, p=pad(n)

<link linkend="Requests:ListFontsWithXInfo"><emphasis role="bold"><function>ListFontsWithXInfo</function></emphasis></link>
1   14                       major-opcode
1                            unused
2   3+(n+p)/4                length
4   <type>CARD32</type>                   max-names
2   n                        length of pattern
2                            unused
n   <type>STRING8</type>                  pattern
p                            unused, p=pad(n)
▶+ (except for last in series)
1   0                        type reply
1   n                        length of name
2   <type>CARD16</type>                   sequence-number
4   3+(n+p+f)/4              length
4   <type>CARD32</type>                   replies-hint
f   <type>XFONTINFO</type>                fontinfo
n   <type>STRING8</type>                  name
p                            unused, p=pad(n)
▶ (last in series)
1   0                        type reply
1   0                        last-reply indicator
2   <type>CARD16</type>                   sequence-number
4   2                        reply length

<link linkend="Requests:OpenBitmapFont"><emphasis role="bold"><function>OpenBitmapFont</function></emphasis></link>
1   15                       major-opcode
1                            unused
2   4+(n+p)/4                length
4   <type>FONTID</type>                   fontid
4   <type>BITMAPFORMATMASK</type>         format-mask
4   <type>BITMAPFORMAT</type>             format
n   STRNAME                  pattern
p                            unused, p=pad(n)
▶
1   0                        type reply
1   <type>BOOL</type>                     otherid-valid
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>FONTID</type>                   otherid
1   <type>BOOL</type>                     cachable
3                            unused

<link linkend="Requests:QueryXInfo"><emphasis role="bold"><function>QueryXInfo</function></emphasis></link>
1   16                       major-opcode
1                            unused
2   2                        length
4   <type>FONTID</type>                   fontid
▶
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   2+f/4                    length
f   <type>XFONTINFO</type>                fontinfo
p                            unused, p=pad(f)

<link linkend="Requests:QueryXExtents8"><emphasis role="bold"><function>QueryXExtents8</function></emphasis></link>
1   17                       major-opcode
1   <type>BOOL</type>                     range
2   3+(n+p)/4                length
4   <type>FONTID</type>                   fontid
4   n                        number chars entries
n   <type>STRING8</type>                  chars
p                            unused, p=pad(n)
▶
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   3+3*n                    length
4   n                        number of extents
12*n <type>LISTofXCHARINFO</type>         extents

<link linkend="Requests:QueryXExtents16"><emphasis role="bold"><function>QueryXExtents16</function></emphasis></link>
1   18                       major-opcode
1   <type>BOOL</type>                     range
2   3+(2*n+p)/4              length
4   <type>FONTID</type>                   fontid
4   n                        number chars entries
2*n                          <type>LISTofCHAR2B</type> chars
p                            unused, p=pad(2*n)
▶
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   3+3*n                    length
4   n                        number of extents
12*n <type>LISTofXCHARINFO</type>         extents

<link linkend="Requests:QueryXBitmaps8"><emphasis role="bold"><function>QueryXBitmaps8</function></emphasis></link>
1   19                       major-opcode
1   <type>BOOL</type>                     range
2   4+(n+p)/4                length
4   <type>FONTID</type>                   fontid
4   <type>BITMAPFORMAT</type>             format
4   n                        number of chars entries
n   <type>STRING8</type>                  chars
p                            unused, p=pad(n)
▶+
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   5+2*n+(m+p)/4            length
4   <type>CARD32</type>                   replies-following-hint
4   n                        number of offsets
4   m                        number of bytes of glyph images
8*n <type>LISTofOFFSET32</type>           offsets
m   <type>LISTofBYTE</type>               glyphimages
p                            unused, p=pad(m)

<link linkend="Requests:QueryXBitmaps16"><emphasis role="bold"><function>QueryXBitmaps16</function></emphasis></link>
1   20                       major-opcode
1   <type>BOOL</type>                     range
2   4+(2*n+p)/4              length
4   <type>FONTID</type>                   fontid
4   <type>BITMAPFORMAT</type>             format
4   n                        number of chars entries
2*n <type>LISTofCHAR2B</type>             chars
p                            unused, p=pad(2*n)
▶
1   0                        type reply
1                            unused
2   <type>CARD16</type>                   sequence-number
4   5+2*n+(m+p)/4            length
4   <type>CARD32</type>                   replies-following-hint
4   n                        number of offsets
4   m                        number of bytes of glyph images
8*n <type>LISTofOFFSET32</type>           offsets
m   <type>LISTofBYTE</type>               glyphimages
p                            unused, p=pad(m)

<link linkend="Requests:CloseFont"><emphasis role="bold"><function>CloseFont</function></emphasis></link>
1   21                       major-opcode
1                            unused
2   2                        length
4   <type>FONTID</type>                   fontid
</literallayout>
</section>

<section id='Encoding::Errors'>
<title>Errors</title>
<literallayout class="monospaced">

<link linkend="Errors:Request"><emphasis role="bold"><errorname>Request</errorname></emphasis></link>
1   1                        type error
1   0                        <errorname>Request</errorname>
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused

<link linkend="Errors:Format"><emphasis role="bold"><errorname>Format</errorname></emphasis></link>
1   1                        type error
1   1                        <errorname>Format</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>BITMAPFORMAT</type>             bad-format

<link linkend="Errors:Font"><emphasis role="bold"><errorname>Font</errorname></emphasis></link>
1   1                        type error
1   2                        <errorname>Font</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>FONTID</type>                   bad-fontid

<link linkend="Errors:Range"><emphasis role="bold"><errorname>Range</errorname></emphasis></link>
1   1                        type error
1   3                        <errorname>Range</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>RANGE</type>                    bad-range

<link linkend="Errors:EventMask"><emphasis role="bold"><errorname>EventMask</errorname></emphasis></link>
1   1                        type error
1   4                        <errorname>EventMask</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>EVENTMASK</type>                event-mask

<link linkend="Errors:AccessContext"><emphasis role="bold"><errorname>AccessContext</errorname></emphasis></link>
1   1                        type error
1   5                        <errorname>AccessContext</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>ACCESSCONTEXT</type>            access context

<link linkend="Errors:IDChoice"><emphasis role="bold"><errorname>IDChoice</errorname></emphasis></link>
1   1                        type error
1   6                        <errorname>IDChoice</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>FONTID</type>                   bad-fontid

<link linkend="Errors:Name"><emphasis role="bold"><errorname>Name</errorname></emphasis></link>
1   1                        type error
1   7                        <errorname>Name</errorname>
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused

<link linkend="Errors:Resolution"><emphasis role="bold"><errorname>Resolution</errorname></emphasis></link>
1   1                        type error
1   8                        <errorname>Resolution</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
6   <type>RESOLUTION</type>               resolution

<link linkend="Errors:Alloc"><emphasis role="bold"><errorname>Alloc</errorname></emphasis></link>
1   1                        type error
1   9                        <errorname>Alloc</errorname>
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused

<link linkend="Errors:Length"><emphasis role="bold"><errorname>Length</errorname></emphasis></link>
1   1                        type error
1   10                       <errorname>Length</errorname>
2   <type>CARD16</type>                   sequence-number
4   5                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused
4   <type>CARD32</type>                   bad-length

<link linkend="Errors:Implementation"><emphasis role="bold"><errorname>Implementation</errorname></emphasis></link>
1   1                        type error
1   11                       <errorname>Implementation</errorname>
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>CARD8</type>                    major-opcode
1   <type>CARD8</type>                    minor-opcode
2                            unused

</literallayout>
</section>

<section id='Encoding::Events'>
<title>Events</title>
<literallayout class="monospaced">
<link linkend="Events:KeepAlive"><emphasis role="bold"><function>KeepAlive</function></emphasis></link>
1   2                        type event
1   0                        event KeepAlive
2   <type>CARD16</type>                   sequence-number
4   3                        length
4   <type>TIMESTAMP</type>                timestamp

<link linkend="Events:CatalogueListNotify"><emphasis role="bold"><function>CatalogueListNotify</function></emphasis></link>
1   2                        type event
1   1                        event CatalogueListNotify
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>BOOL</type>                     added
1   <type>BOOL</type>                     deleted
2                            unused

<link linkend="Events:FontListNotify"><emphasis role="bold"><function>FontListNotify</function></emphasis></link>
1   2                        type event
1   2                        event FontListNotify
2   <type>CARD16</type>                   sequence-number
4   4                        length
4   <type>TIMESTAMP</type>                timestamp
1   <type>BOOL</type>                     added
1   <type>BOOL</type>                     deleted
2                            unused

</literallayout>
</section>
</chapter>

<chapter id='Acknowledgements'>
<title>Acknowledgements</title>
<!-- .XS -->
<!-- (SN Acknowledgements -->
<!-- .XE -->
<para>
This document represents the culmination of several years of debate and
experiments done under the auspices of the
<orgname class="consortium">MIT X Consortium</orgname> font working group.
Although this was a group effort, the author remains responsible for any errors
or omissions.  The protocol presented here was primarily designed by
<personname><firstname>Jim</firstname><surname>Fulton</surname></personname>,
<personname><firstname>Keith</firstname><surname>Packard</surname></personname>,
and
<personname><firstname>Bob</firstname><surname>Scheifler</surname></personname>.
Special thanks goes to
<personname><firstname>Ned</firstname><surname>Batchelder</surname></personname>,
<personname><firstname>Jim</firstname><surname>Flowers</surname></personname>,
and
<personname><firstname>Axel</firstname><surname>Deininger</surname></personname>
for their invigorating comments
which never failed to make this a better document.
<personname><firstname>Stephen</firstname><surname>Gildea</surname></personname>
edited version 2 of this document.  Finally,
<personname><firstname>David</firstname><surname>Lemke</surname></personname>
deserves great credit for designing and coding the sample implementation.
</para>
</chapter>

<bibliography id='References'>
<title>References</title>
<para>
All of the following documents are X Consortium standards available from
the X Consortium.
</para>
<biblioentry id='References:x11proto'>
  <abbrev>1</abbrev>
  <title><olink targetdoc='x11protocol' targetptr='x11protocol'>X Window System Protocol Version 11</olink></title>
  <author><firstname>Robert W.</firstname><surname>Scheifler</surname></author>
</biblioentry>

<biblioentry id='References:bdf-spec'>
  <abbrev>2</abbrev>
  <corpauthor>Adobe Systems</corpauthor>
  <title>Bitmap Distribution Format 2.1</title>
</biblioentry>

<biblioentry id='References:xlfd-spec'>
  <abbrev>3</abbrev>
  <corpauthor>X Consortium</corpauthor>
  <title><olink targetdoc='xlfd' targetptr='xlfd'>X Logical Font
  Description Conventions, Version 1.5</olink></title>
</biblioentry>

</bibliography>

<appendix id="suggested_licensing_policies">
<title>Suggested Licensing Policies</title>
<para>
The authorization data passed by the client in the initial connection
setup information may be used by the font server to implement restrictions
on which fonts may be accessed.  Furthermore, the font server is free to
refuse new connections at any time.
</para>
<para>
Configuration or management of the license restrictions is outside the scope of
the font service protocol and is done in a server-dependent manner.  Possible
policies might include, but are not limited to, combinations of the following:

<variablelist>
  <?dbhtml list-presentation="list"?>
  <varlistentry>
    <term>No restrictions</term>
  <listitem>
    <para>
anyone may access any fonts.  The server neither refuses any connections
nor generates <link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link> errors on any
fonts.  For environments without specially-licensed fonts, this is
sufficient.
    </para>
  </listitem>
  </varlistentry>
  <varlistentry>
    <term>Per-machine</term>
  <listitem>
    <para>
only those clients connecting from a known set of
machines are permitted access.  The server could get the address
of the connection and look in a list of allowed machines.
    </para>
  </listitem>
  </varlistentry>
  <varlistentry>
    <term>Per-user</term>
  <listitem>
    <para>
only a known set of users may access the fonts.  The
server can use the authorization data (such as a Kerberos ticket
or a Secure RPC credential) to verify the identity of the user
and then look in a list of allowed users.
    </para>
  </listitem>
  </varlistentry>
  <varlistentry>
    <term>Simultaneous Use</term>
  <listitem>
    <para>
only a certain number of clients may use a given font at any one time.
Additional clients would receive <link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link>
errors if they attempt to open the font.  This is only effective if
the initial clients keep the font open for the entire time that it
is being used (even if all of the data has been transmitted and is
being cached).
    </para>
  </listitem>
  </varlistentry>
  <varlistentry>
    <term>Postage Meter</term>
  <listitem>
    <para>
a particular font may only be accessed a limited
number of times before its license must be renewed.  Each time
the font is opened, the server decrements a counter.  When the
counter reaches zero, all further attempts to open the font
return an <link linkend="Errors:AccessContext"><errorname>AccessContext</errorname></link> error.
    </para>
  </listitem>
  </varlistentry>
</variablelist>
</para>

<para>
It should be noted that chaining of font servers (obtaining font data from
other font servers) may conflict with certain license policies.
</para>
</appendix>

<appendix id="implementation_suggestions">
<title>Implementation Suggestions</title>
<para>
Font server implementations will probably wish to use techniques such as the
following to avoid limits on the number of simultaneous connections:
</para>
<itemizedlist>
  <listitem>
    <para>
The initial connection information returned by the font
server contains the names of other font servers that
may be used as substitutes.  A font server may refuse to
accept a connection, indicating that the client should
try one of the alternatives instead.
    </para>
  </listitem>
  <listitem>
    <para>
On operating systems that support processing forking, font
servers might choose to fork so that the child can continue
processing the existing connections and the parent can accept
new connections.  Such implementations are encouraged to use
shared memory so that in-memory font databases can be shared.
    </para>
  </listitem>
  <listitem>
    <para>
On operating systems that support passing stream file descriptors
between processes, cooperating font servers could collect
connections in a single process when there are few connections
and spread them among several processes as the load increases.
    </para>
  </listitem>
  <listitem>
    <para>
If a font client is unable to connect to a server (as opposed
to having the connection terminated), it should retry for an
implementation-dependent length of time (see Xlib's
handling of ECONNREFUSED in XConnDis.c).
    </para>
  </listitem>
</itemizedlist>
</appendix>
<index id="index" />
</book>
@


1.2
log
@Update to fontsproto 2.1.2. No functional change.
@
text
@d2 1
a2 1
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
d9 1
a9 1
<article id="fsproto">
d11 1
a11 1
<articleinfo>
d33 1
a33 1
provided "as is" without express or implied warranty.
d41 1
a41 1
of this software and associated documentation files (the "Software"), to deal
d65 1
a65 1
</articleinfo>
d67 1
a67 1
<sect1 id='Introduction'>
d72 2
a73 2
<footnote><para>
<emphasis remap='I'>X Window System</emphasis>
d85 2
a86 1
Currently, most X displays use network file protocols such as NFS and TFTP to
d120 1
a120 1
</sect1>
d122 1
a122 1
<sect1 id='Architectural_Model'>
d128 2
a129 2
<!-- .LP -->
In this document, the words "client" and "server" refer to the consumer and
d142 1
d159 1
a161 5
Figure 2.1:  Connecting to a Font Server
</para>

<para>
<!-- .LP  -->
d163 5
a167 3
over any mutually-understood virtual stream connection (such as TCP/IP, DECnet,
<footnote><para>
DECnet is a trademark of Digital Equipment Corporation.
a175 1
<!-- .LP -->
d178 2
a179 1
transmitted to the client using the protocol described in Section 4.  New font
d184 1
d208 1
d211 2
a212 5
Figure 2.2:  Where Font Data Comes From
</para>

<para>
The server may choose to provide named sets of fonts called "catalogues."
a222 1
<!-- .LP -->
a229 1
<!-- .LP -->
d235 1
a235 1
</sect1>
d237 1
a237 1
<sect1 id='Font_Server_Naming'>
d252 1
a252 1
<sect2 id='TCPIP_Names'>
a258 1
</para>
d261 1
a261 1
    &lt;TCP name&gt;  ::=  "tcp/" &lt;hostname&gt;":" &lt;ipportnumber&gt; ["/" &lt;cataloguelist&gt;]
d264 6
a269 5
<para>
where &lt;hostname&gt; is either symbolic (such as expo.lcs.mit.edu) or numeric
decimal (such as 18.30.0.212).  The &lt;ipportnumber&gt; is the port on
which the
font server is listening for connections.  The &lt;cataloguelist&gt; string at
a271 1
</para>
d276 2
a277 1
</sect2>
d279 1
a279 1
<sect2 id='DECnet_Names'>
a284 1
<!-- .LP -->
d286 1
a286 1
</para>
d288 1
a288 2
    &lt;DECnet name&gt;  ::=  "decnet/" &lt;nodename&gt; "::font$" &lt;objname&gt;
               ["/" &lt;cataloguelist&gt;]
d290 7
a296 5
<para>
where &lt;nodename&gt; is either symbolic (such as SRVNOD) or the
numeric decimal
form of the DECnet address (such as 44.70).  The &lt;objname&gt; is normal,
case-insensitive DECnet object name.  The &lt;cataloguelist&gt; string
a299 1
</para>
d305 3
a307 2
</sect2>
</sect1>
d309 1
a309 1
<sect1 id='Protocol'>
a314 1
<!-- .LP -->
d316 4
a319 2
specified using the same conventions outlined in Section 2 of the core X Window
System protocol [1]:
d326 1
a326 1
as in:  FONTID
d333 1
a333 1
as in:  MaxWidth
d340 1
a340 1
as word separators, as in:  byte-order-msb
d345 1
a345 1
upper case (e.g. BYTE-ORDER-MSB) when used in
d354 2
a355 2
Type declarations have the form "name: type",
as in:  CARD8: 8-bit byte
d361 2
a362 1
braces, as in:  { Min, MaxWidth, Max }
d368 2
a369 1
brackets, as in:  [ byte1: CARD8, byte2: CARD8 ]
d375 2
a376 3
<!-- .LP -->
A type with a prefix "LISTof" represents a counted list of
elements of that type, as in:  LISTofCARD8
d379 1
a379 1
<sect2 id='Data_Types'>
d388 14
a401 4
<literallayout class="monospaced">
ACCESSCONTEXT:     ID
</literallayout>
<blockquote>
a410 1
<!-- .sp -->
d419 1
a419 2
<!-- .sp -->
<function>AccessContexts </function>
d421 1
a421 1
<function>CreateAC ) </function>
d423 2
a424 2
<function>SetAuthorization )</function>
to represent all of these "font users" properly.
d426 1
a426 6
</blockquote>

<literallayout class="monospaced">
ALTERNATESERVER:  [ name:  STRING8,
                    subset:  BOOL ]
</literallayout>
d428 24
a451 5
<blockquote>
    <para>
This structure specifies the NAME, encoded in ISO 8859-1 according
to Section 3, of another font server that may be useful as a
substitute for this font server.  The SUBSET field indicates
d458 1
a458 1
</blockquote>
d460 15
a474 4
<literallayout class="monospaced">
AUTH:  [ name:  STRING8,
         data:  LISTofBYTE ]
</literallayout>
a475 1
<blockquote>
d482 1
a482 1
</blockquote>
d484 14
a497 3
<literallayout class="monospaced">
BITMAPFORMAT:
</literallayout>
d499 2
a500 2
<literallayout class="monospaced">
   CARD32 containing the following fields defined by the
d502 30
a531 20
   [
     byte-order-msb:      1 bit,
     bit-order-msb:       1 bit,
     image-rect:          2 bits { Min,
                          MaxWidth,
                          Max },
     zero-pad:            4 bits,
     scanline-pad:        2 bits { ScanlinePad8,
                          ScanlinePad16,
                          ScanlinePad32,
                          ScanlinePad64 },
     zero-pad:            2 bits,
     scanline-unit:       2 bits { ScanlineUnit8,
                          ScanlineUnit16,
                          ScanlineUnit32,
                          ScanlineUnit64 },
     zero-pad:            2 bits,
     zero-pad:            16 bits,
   ]
</literallayout>
a532 1
<blockquote>
d536 1
a536 1
<function>QueryXBitmaps8 </function>
d538 1
a538 1
<function>QueryXBitmaps16 </function>
d542 2
a543 2
<!-- .sp -->
If the BYTE-ORDER-MSB bit (1 &lt;&lt; 0) is set, the Most Significant
d548 2
a549 2
<!-- .sp -->
If the BIT-ORDER-MSB bit (1 &lt;&lt; 1) is set, the left-most bit in
d555 2
a556 2
<!-- .sp -->
The IMAGE-RECT field specifies a rectangle of pixels within the
a557 1
</para>
d559 23
a581 11
<literallayout class="monospaced">
     ImageRectMin          (0 &lt;&lt; 2)
     ImageRectMaxWidth     (1 &lt;&lt; 2)
     ImageRectMax          (2 &lt;&lt; 2)
</literallayout>
<para>
For a glyph with extents XCHARINFO in a font with header information
XFONTINFO, the IMAGE-RECT values have the following meanings:
</para>
<para>
<function>ImageRectMin -</function>
a585 1
</para>
d587 4
a590 4
         left:     XCHARINFO.LBEARING
         right:    XCHARINFO.RBEARING
         top:      XCHARINFO.ASCENT
         bottom:   XCHARINFO.DESCENT
d592 8
a599 3
<para>

<function>ImageRectMaxWidth - </function>
d605 2
a606 2
origin.  This is a combination of ImageRectMax in the
horizontal direction and ImageRectMin in the vertical
a607 1
</para>
d610 5
a614 5
left:         min (XFONTINFO.MIN-BOUNDS.LBEARING, 0)
right:        max (XFONTINFO.MAX-BOUNDS.RBEARING,
                   XFONTINFO.MAX-BOUNDS.WIDTH)
top:               XCHARINFO.ASCENT
bottom:            XCHARINFO.DESCENT
d616 9
a624 3

<para>
ImageRectMax - This refers to all scanlines, from the maximum
d627 1
a627 1
padded to the same horizontal extents as MaxWidth.
a632 1
</para>
d635 7
a641 7
left:         min (XFONTINFO.MIN-BOUNDS.LBEARING, 0)
right:        max (XFONTINFO.MAX-BOUNDS.RBEARING,
                   XFONTINFO.MAX-BOUNDS.WIDTH)
top:          max (XFONTINFO.FONT-ASCENT,
                   XFONTINFO.MAX-BOUNDS.ASCENT)
bottom:       max (XFONTINFO.FONT-DESCENT,
                   XFONTINFO.MAX-BOUNDS.DESCENT)
d643 5
d649 2
a650 1
The SCANLINE-PAD field specifies the number of bits (8, 16, 32,
d653 96
a748 52
</para>
<literallayout class="monospaced">
     ScanlinePad8          (0 &lt;&lt; 8)
     ScanlinePad16         (1 &lt;&lt; 8)
     ScanlinePad32         (2 &lt;&lt; 8)
     ScanlinePad64         (3 &lt;&lt; 8)
</literallayout>
<para>
The SCANLINE-UNIT field specifies the number of bits (8, 16, 32,
or 64) that should be treated as a unit for swapping.  This value
must be less than or equal to the number of bits specified by the
SCANLINE-PAD.  It contains one of the following alternate values:
</para>

<literallayout class="monospaced">
     ScanlineUnit8          (0 &lt;&lt; 12)
     ScanlineUnit16         (1 &lt;&lt; 12)
     ScanlineUnit32         (2 &lt;&lt; 12)
     ScanlineUnit64         (3 &lt;&lt; 12)
</literallayout>
<para>
BITMAPFORMATs are byte-swapped as CARD32s.  All unspecified bits
must be zero.
</para>
<para>
Use of an invalid BITMAPFORMAT causes a Format error to
be returned.
</para>
</blockquote>
<para>
BITMAPFORMATMASK:     CARD32 mask
</para>
<blockquote>
<para>
This is a mask of bits representing the fields in a BITMAPFORMAT:
</para>
</blockquote>
<literallayout class="monospaced">
     ByteOrderMask          (1 &lt;&lt; 0)
     BitOrderMask           (1 &lt;&lt; 1)
     ImageRectMask          (1 &lt;&lt; 2)
     ScanlinePadMask        (1 &lt;&lt; 3)
     ScanlineUnitMask       (1 &lt;&lt; 4)
</literallayout>
<para>
Unspecified bits are required to be zero or else a Format error
is returned.
</para>
<para>
BOOL:  CARD8
</para>
<blockquote>
d752 28
a779 7
</para>

<literallayout class="monospaced">
     False              0
     True               1
</literallayout>
</blockquote>
a781 5
BYTE:  8-bit value
</para>

<blockquote>
<para>
a784 1
</blockquote>
d786 1
a786 3
<para>
CARD8:  8-bit unsigned integer
</para>
d788 18
a805 7
<para>
CARD16:  16-bit unsigned integer
</para>

<para>
CARD32:  32-bit unsigned integer
</para>
a806 1
<blockquote>
a810 1
</blockquote>
d812 16
a827 4
<para>
CHAR2B:  [ byte1, byte2:  CARD8 ]
</para>
<blockquote>
d830 25
a854 12
either a 2-dimensional matrix (using BYTE1 and BYTE2 as the row
and column indices, respectively) or a vector (using BYTE1 and
BYTE2 as most- and least-significant bytes, respectively).  This
data type is treated as a pair of 8-bit values and is never
byte-swapped.  Therefore, the client should always transmit BYTE1
first.
</para>
</blockquote>

<para>
EVENTMASK:  CARD32 mask
</para>
a855 1
<blockquote>
d862 2
a863 2
EXTENSION-OPCODE of zero in
<function>SetEventMask </function>
d865 1
a865 1
<function>GetEventMask </function>
d867 12
a880 5
<literallayout class="monospaced">
     CatalogueListChangeMask          (1 &lt;&lt; 0)
     FontListChangeMask               (1 &lt;&lt; 1)
</literallayout>

d883 1
a883 1
<function>CatalogueListChangeMask </function>
d886 1
a886 1
<function>CatalogueListNotify </function>
d888 1
a888 1
<function>FontListChangeMask </function>
d891 1
a891 1
<function>FontListNotify </function>
a894 1
<!-- .sp -->
d898 2
a899 1
<!-- .sp -->
d901 1
a901 1
<function>SetEventMask </function>
d904 3
a906 3
for which this EVENTMASK is intended (according to the EXTENSION-
OPCODE given in the
<function>SetEventMask </function>
d908 1
a908 1
<function>EventMask </function>
a909 2
<!-- .sp -->
This value is swapped as a CARD32.
d911 3
a913 1
</blockquote>
d915 16
a930 3
<para>
FONTID:     ID
</para>
a931 1
<blockquote>
d934 1
a934 1
<function>OpenBitmapFont </function>
a937 1
</blockquote>
d939 16
a954 3
<para>
ID:  CARD32
</para>
a955 1
<blockquote>
d959 2
a960 1
2^29-1).  It is specified by the client to represent objects in
d963 2
a964 4
both a FONTID and an ACCESSCONTEXT as well as by multiple clients.
</para>
<para>
An ID of zero is referred to as None.
a965 2
</blockquote>

d967 1
a967 1
INT8:  8-bit signed integer
d969 1
d971 18
a988 3
<para>
INT16:  16-bit signed integer
</para>
a990 5
INT32:  32-bit signed integer
</para>

<blockquote>
<para>
d994 1
a994 6
</blockquote>

<literallayout class="monospaced">
OFFSET32:      [  position:     CARD32,
                  length:       CARD32 ]
</literallayout>
d996 16
a1011 1
<blockquote>
d1016 1
a1016 1
</blockquote>
d1018 16
a1033 4
<literallayout class="monospaced">
PROPINFO:     [ offsets:          LISTofPROPOFFSET,
                data:             LISTofBYTE ]
</literallayout>
a1034 1
<blockquote>
a1043 1
</blockquote>
d1045 20
a1064 6
<literallayout class="monospaced">
PROPOFFSET:     [ name:          OFFSET32,
                 value:          OFFSET32,
                 type:           CARD8,
                 zero-pad3:      BYTE, BYTE, BYTE ]
</literallayout>
a1065 1
<blockquote>
d1071 2
a1072 1
The NAME field specifies the position and length (which must be
d1074 18
a1091 14
of the PROPINFO.DATA block for this font.  The interpretation of
the position and length of the VALUE field is determined by the
TYPE field, which contains one of the following alternate values:
    </para>
</blockquote>

<literallayout class="monospaced">
     String          0
     Unsigned        1
     Signed          2
</literallayout>

<blockquote>
    <para>
d1093 5
a1097 2
    </para>
    <blockquote>
d1100 2
a1101 1
data is stored in the PROPINFO.DATA block beginning at
d1105 6
a1110 1
    </blockquote>
d1113 1
a1113 1
as a CARD32 in VALUE.POSITION (VALUE.LENGTH is zero).
d1115 6
a1120 1
    <blockquote>
d1123 5
a1127 1
an INT32 in VALUE.POSITION (VALUE.LENGTH is zero).
d1129 3
a1131 3
      </para>
    </blockquote>
</blockquote>
d1133 15
a1147 3
<para>
RANGE:     [ min-char, max-char:     CHAR2B ]
</para>
a1148 1
<blockquote>
d1151 9
a1159 5
character is represented by MIN-CHAR equals MAX-CHAR.  If the
linear interpretation of MAX-CHAR is less than that of MIN-CHAR,
or if MIN-CHAR is less than the font's
XFONTINFO.CHAR-RANGE.MIN-CHAR, or if MAX-CHAR is greater than the
font's XFONTINFO.CHAR-RANGE.MAX-CHAR, the range is invalid.
a1160 1
</blockquote>
d1162 19
a1180 5
<literallayout class="monospaced">
RESOLUTION:     [ x-resolution:          CARD16,
                  y-resolution:          CARD16,
                  decipoint-size:        CARD16 ]
</literallayout>
a1181 1
<blockquote>
d1184 5
a1188 3
resolving partially-specified scaled font names.  The X-RESOLUTION
and Y-RESOLUTION are measured in pixels-per-inch and must be
greater than zero.  The DECIPOINT-SIZE is the preferred font
a1190 1
</blockquote>
d1192 16
a1207 3
<para>
STRING8:          LISTofCARD8
</para>
a1208 1
<blockquote>
d1211 5
a1215 2
encoded in ISO 8859-1.  A character code "c" is equivalent to a
CHAR2B structure whose BYTE1 is zero and whose BYTE2 is "c".
a1216 1
</blockquote>
d1218 16
a1233 3
<para>
TIMESTAMP:     CARD32
</para>
a1234 1
<blockquote>
d1236 2
a1237 2
This is the number of milliseconds that have passed since a server-
dependent origin.  It is provided in errors and events and is
d1240 1
a1240 1
</blockquote>
d1242 18
a1259 6
<para>
XCHARINFO:     [ lbearing, rbearing:     INT16,
                 width:                  INT16,
                 ascent, descent:        INT16,
                 attributes:             CARD16 ]
</para>
a1260 1
<blockquote>
d1268 2
a1269 1
"Bitmap Distribution Format 2.1" Consortium standard [2]).
a1270 1
<!-- .sp -->
d1272 2
a1273 1
The LBEARING field specifies the directed distance measured to the
a1275 1
<!-- .sp -->
d1278 2
a1279 1
The RBEARING field specifies the directed distance (measured to
a1281 1
<!-- .sp -->
d1284 2
a1285 1
The WIDTH field specifies the directed distance (measured to the
d1287 5
a1291 5
should appear (called the "escapement point").  This distance
includes any whitespace used for intercharacter padding and is
also referred to as the "logical width" or "horizontal
escapement."
<!-- .sp -->
d1294 2
a1295 1
The ASCENT field specifies the directed distance (measured up)
a1297 1
<!-- .sp -->
d1300 2
a1301 1
The DESCENT field specifies the directed distance (measured
a1303 1
<!-- .sp -->
d1306 2
a1307 1
The ATTRIBUTES field specifies glyph-specific information that
d1314 4
a1317 2
a width of RBEARING - LBEARING pixels and a height of
ASCENT + DESCENT pixels.
d1319 1
a1319 13
</blockquote>

<literallayout class="monospaced">
XFONTINFO:     [ flags:               CARD32,
                 drawing-direction:   { LeftToRight, RightToLeft }
                 char-range:          RANGE,
                 default-char:        CHAR2B,
                 min-bounds:          XCHARINFO,
                 max-bounds:          XCHARINFO,
                 font-ascent:         INT16,
                 font-descent:        INT16,
                 properties:          PROPINFO ]
</literallayout>
d1321 23
a1343 1
<blockquote>
d1349 2
a1350 3
The FLAGS field is a bit mask containing zero or more of the
following boolean values (unspecified bits must be zero):
  </para>
d1352 12
a1363 5
<literallayout class="monospaced">
     AllCharactersExist     (1 &lt;&lt; 0)
     InkInside              (1 &lt;&lt; 1)
     HorizontalOverlap      (1 &lt;&lt; 2)
</literallayout>
a1364 1
    <para>
d1366 5
a1370 1
    </para>
d1372 2
a1373 7
AllCharactersExist
    </para>

<blockquote>
    <para>
If this bit is set, all of the characters
in the range given by CHAR-RANGE have glyphs encoded in
d1377 6
a1382 6
</blockquote>

<para>
InkInside
</para>
<blockquote>
d1390 6
a1395 5
</blockquote>
<para>
HorizontalOverlap
</para>
<blockquote>
d1405 11
a1415 5
</blockquote>
<para>
The DRAWING-DIRECTION field contains a hint indicating whether
most of the character metrics have a positive (or "LeftToRight")
logical width or a negative ("RightToLeft") logical width.  It
d1417 11
a1428 4
<literallayout class="monospaced">
         LeftToRight          0
         RightToLeft          1
</literallayout>
d1430 2
a1431 1
The CHAR-RANGE.MIN-CHAR and CHAR-RANGE.MAX-CHAR fields specify the
d1434 2
a1435 1
MIN-CHAR and MAX-CHAR are equal), but are not required to have glyphs
d1439 2
a1440 1
The DEFAULT-CHAR field specifies the character code of the glyph
d1446 2
a1447 1
The MIN-BOUNDS and MAX-BOUNDS fields contain the minimum and maximum
d1452 2
a1453 1
The FONT-ASCENT and FONT-DESCENT fields specify the font designer's
d1460 2
a1461 2
The PROPERTIES field contains the property data associated with
this font.
d1466 2
a1467 2
</blockquote>
</sect2>
d1469 1
a1469 1
<sect2 id='Requests'>
a1474 1
<!-- .LP -->
a1479 1
<!-- .LP -->
d1487 13
a1500 6
<!-- .RS -->
<literallayout class="monospaced">
     major-opcode:               CARD8
     minor-opcode:               CARD8
     length:                    CARD16
</literallayout>
d1502 8
a1509 6
<!-- .RE -->
The MAJOR-OPCODE specifies which core request or extension package this packet
represents.  If the MAJOR-OPCODE corresponds to a core request, the
MINOR-OPCODE contains 8 bits of request-specific data.  Otherwise, the
MINOR-OPCODE specifies which extension request this packet represents.  The
LENGTH field specifies the number of 4-byte units contained within the packet
d1511 2
a1512 1
is followed by (LENGTH - 1) * 4 bytes of request-specific data.  Unless
a1515 1
<!-- .LP -->
d1517 9
a1525 6
a Length error.  If the server runs out of internal resources (such as
memory) while processing a request, it returns an Alloc error.  If a server is
deficient (and therefore non-compliant) and is unable to process a request, it
may return an Implementation error.  If a client uses an extension request
without previously having issued a
<function>QueryExtension </function>
d1527 5
a1531 4
<function>Request </function>
error.  If the server encounters a request
with an unknown MAJOR-OPCODE or MINOR-OPCODE, it responds with a
<function>Request </function>
d1538 4
a1541 4
<!-- .LP -->
Core requests have MAJOR-OPCODE values between 0 and 127, inclusive.  Extension
requests have MAJOR-OPCODE values between 128 and 255, inclusive, that are
assigned by by the server.  All MINOR-OPCODE values in extension requests are
a1544 1
<!-- .LP -->
d1546 20
a1565 12
</para>
<!-- .RS -->
<literallayout class="monospaced">
     type:                 CARD8 value of 0
     data-or-unused:       CARD8
     sequence-number:      CARD16
     length:               CARD32
</literallayout>
<para>
<!-- .RE -->
The TYPE field has a value of zero.  The DATA-OR-UNUSED field may be used to
encode one byte of reply-specific data (see Section 5.2 on request encoding).
d1567 6
a1572 5
generated the reply are stored in the SEQUENCE-NUMBER field.  The LENGTH field
specifies the number of 4-byte units in this reply packet, including the fields
described above, and must be at least two.  If LENGTH is greater than two, the
fields described above are followed by (LENGTH - 2) * 4 bytes of additional
data.
a1574 1
<!-- .LP -->
d1576 29
a1604 24
</para>
<!-- .RS -->
<literallayout class="monospaced">
     RequestName
         <emphasis remap='I'>arg1</emphasis>:  type1
         <emphasis remap='I'>arg2</emphasis>:  type2
         ...
         <emphasis remap='I'>argN</emphasis>:  typeN
           =&gt;
        <emphasis remap='I'>result1</emphasis>:  type1
         <emphasis remap='I'>result2</emphasis>:  type2
         ...
         <emphasis remap='I'>resultM</emphasis>:  typeM

     Errors:  <emphasis remap='I'>kind1</emphasis>, <emphasis remap='I'>kind2</emphasis> ..., <emphasis remap='I'>kindK</emphasis>

     Description
</literallayout>
<para>
<!-- .RE -->
If a request does not generate a reply, the"=&gt;" and result lines are
omitted.  If a request may generate multiple replies, the "=&gt;" is replaced by
a "=&gt;+".  In the authorization data exchanges in the initial connection setup
and the CreateAC request, "-&gt;" indicates data sent by the client in response
a1607 1
<!-- .LP -->
d1612 16
a1627 8
<literallayout class="monospaced">

  open connection
     byte-order:                         BYTE
     client-major-protocol-version:      CARD16
     client-minor-protocol-version:      CARD16
     authorization-protocols:            LISTofAUTH
</literallayout>
d1629 2
a1630 1
The initial byte of the connection specifies the BYTE-ORDER in
d1632 2
a1633 1
transmitted.  The octal value 102 (ASCII uppercase `B')
d1635 3
a1637 2
first; the octal value 154 (ASCII lowercase `l') indicates
that the least-significant byte is to be transmitted first.
a1640 2

<blockquote>
d1642 3
a1644 2
The CLIENT-MAJOR-PROTOCOL-VERSION and
CLIENT-MINOR-PROTOCOL-VERSION specify which version of the
d1651 2
a1652 1
The AUTHORIZATION-PROTOCOLS contains a list of protocol names and
d1658 17
a1674 10
<literallayout class="monospaced">
=&gt;
status:                         { Success, Continue,
                                  Busy, Denied }
server-major-protocol-version:  CARD16
server-minor-protocol-version:  CARD16
alternate-servers-hint:         LISTofALTERNATESERVER
authorization-index:            CARD8
authorization-data:             LISTofBYTE
</literallayout>
d1676 3
a1678 3
<!-- .RE -->
The SERVER-MAJOR-PROTOCOL-VERSION and
SERVER-MINOR-PROTOCOL-VERSION specify the version of the font
d1690 2
a1691 1
The ALTERNATE-SERVERS-HINT is a list of other font servers
d1698 1
a1698 1
The STATUS field indicates whether the server accepted,
d1701 13
a1714 7
<literallayout class="monospaced">

          Success          0
          Continue         1
          Busy             2
          Denied           3
</literallayout>
d1716 3
a1718 3
<!-- .RE -->
If STATUS is Denied, the server has rejected the client's
authorization information.  If STATUS is Busy, the server has
d1721 2
a1722 1
AUTHORIZATION-INDEX is set to zero, no authorization-data is
d1727 3
a1729 3
Otherwise the AUTHORIZATION-INDEX is set to the index
(beginning with 1) into the AUTHORIZATION-PROTOCOLS list of
the protocol that the server will use for this connection.  If
d1731 2
a1732 2
this value is set to zero.  The AUTHORIZATION-DATA field is
used to send back authorization protocol-dependent data to the
a1735 2
</blockquote>

d1737 4
a1740 3
<!-- .LP -->
If STATUS is Success, the following section of protocol is
omitted.  Otherwise, if STATUS is Continue, the server expects
d1743 14
a1757 11

<literallayout class="monospaced">
-&gt;
more-authorization-data:   STRING8
=&gt;
status:                    { Success, Continue,
                           Busy, Denied }
more-authorization-data:   LISTofBYTE
</literallayout>

<!-- .RE -->
d1759 1
a1759 1
The values in STATUS have the same meanings as described
d1761 3
a1763 2
either accepts (sets STATUS to Success) or rejects (sets
STATUS to Denied or Busy) the connection.
d1766 2
a1767 2
<!-- .LP -->
Once the connection has been accepted and STATUS is Success,
d1771 20
a1790 14
</para>
<!-- .RS -->
<literallayout class="monospaced">
=&gt;
remaining-length:           CARD32
maximum-request-length:     CARD16
release-number:             CARD32
vendor:                     STRING8
</literallayout>
<para>
The REMAINING-LENGTH specifies the length in 4-byte units of
the remaining data to be transmitted to the client.  The
MAXIMUM-REQUEST-LENGTH specifies the largest request size in
4-byte units that is accepted by the server and must have a
d1792 6
a1797 3
than this value are ignored and a Length error is returned.
The VENDOR string specifies the name of the manufacturer of
the font server.  The RELEASE-NUMBER specifies the particular
d1800 2
a1802 1
<!-- .LP -->
d1806 14
a1819 9
<blockquote>
<para>
<!-- .LP -->
<!-- .IN "NoOp" "" "@@DEF@@" -->
<function>NoOp</function>
</para>
    <para>
Errors:  Alloc
    </para>
d1823 1
a1823 1
<function>KeepAlive </function>
d1826 1
a1826 1
</blockquote>
d1828 15
a1842 8
<para>
<!-- .LP -->
<!-- .IN "ListExtensions" "" "@@DEF@@" -->
<function>ListExtensions</function>
</para>
<para>
=&gt;
</para>
a1843 7
<blockquote>
  <para>
<emphasis remap='I'>names</emphasis>:  LISTofSTRING8
  </para>
  <para>
Errors:  Alloc
  </para>
d1847 1
a1847 1
case-sensitive and are encoded in ISO 8859-1.
a1848 6
</blockquote>

<para>
<!-- .IN "QueryExtension" "" "@@DEF@@" -->
<function>QueryExtension</function>
</para>
d1850 1
a1850 8
<blockquote>
<para>
<emphasis remap='I'>name</emphasis>:  STRING8
</para>
</blockquote>
<para>
=&gt;
</para>
d1852 24
a1875 1
<blockquote>
d1877 6
a1882 33
<emphasis remap='I'>present</emphasis>:  BOOL
    </para>
    <para>
<emphasis remap='I'>major-version</emphasis>:  CARD16
    </para>
    <para>
<emphasis remap='I'>minor-version</emphasis>:  CARD16
    </para>
    <para>
<emphasis remap='I'>major-opcode</emphasis>:  CARD8
    </para>
    <para>
<emphasis remap='I'>first-event</emphasis>:  CARD8
    </para>
    <para>
<emphasis remap='I'>number-events</emphasis>:  CARD8
    </para>
    <para>
<emphasis remap='I'>first-error</emphasis>:  CARD8
    </para>
    <para>
<emphasis remap='I'>number-errors</emphasis>:  CARD8
  </para>
  <para>
Errors:
<function>Alloc</function>
  </para>
  <para>
This request determines whether or not the extension package
specified by NAME (encoded in ISO 8859-1) is supported by the
server and that there is sufficient number of major opcode,
event, and error codes available.  If so, then PRESENT is set
to True, MAJOR-VERSION and MINOR-VERSION are set to the
d1884 6
a1889 5
that the server would prefer; MAJOR-OPCODE is set to the value
to use in extension requests; FIRST-EVENT is set to the value
of the first extension-specific event code or zero if the
extension does not have any events; NUMBER-EVENTS is set to
the number of new events that the event defines; FIRST-ERROR
d1892 2
a1893 2
NUMBER-ERRORS is set to the number of new errors the extension
defines.
d1896 2
a1897 2
<!-- .sp -->
Otherwise, PRESENT is set to False and the remaining fields are
a1900 1
<!-- .sp -->
d1905 1
a1905 1
<function>SetEventMask request to express interest in any of</function>
d1907 1
a1907 1
<function>Request </function>
d1910 1
a1910 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "ListCatalogues" "" "@@DEF@@" -->
<function>ListCatalogues</function>
</para>
d1912 19
a1930 23
<blockquote>
    <para>
<emphasis remap='I'>pattern</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>max-names</emphasis>:  CARD32
    </para>
</blockquote>
<para>
<!-- .LP -->
=&gt;+
</para>
<blockquote>
    <para>
<emphasis remap='I'>replies-following-hint</emphasis>:  CARD32
    </para>
    <para>
<emphasis remap='I'>names</emphasis>:      LISTofSTRING8
    </para>
    <para>
Errors:
<function>Alloc</function>
    </para>
d1932 1
a1932 1
This request returns a list of at most MAX-NAMES names
d1934 6
a1939 4
the specified PATTERN.  In the pattern (which is encoded
in ISO 8859-1), the `?' character (octal 77) matches any
single character; the `*' character (octal 52) matches
any series of zero or more characters; and alphabetic
d1941 2
a1942 1
returned NAMES are encoded in ISO 8859-1 and may contain
d1946 2
a1947 1
If PATTERN is of zero length or MAX-NAMES is equal to zero,
d1963 1
a1963 1
REPLIES-FOLLOWING-HINT field in all but the last reply
d1969 1
a1969 1
</blockquote>
d1971 15
a1985 14
<para>
<!-- .LP -->
<!-- .IN "SetCatalogues" "" "@@DEF@@" -->
<function>SetCatalogues</function>
</para>
<blockquote>
    <para>
<emphasis remap='I'>names</emphasis>:  LISTofSTRING8
    </para>
    <para>
Errors:
<function>Alloc , </function>
<function>Name</function>
    </para>
d1991 2
a1992 2
<function>ListFonts , </function>
<function>ListFontsWithXInfo , </function>
d1994 1
a1994 1
<function>OpenBitmapFont </function>
d1996 1
a1996 1
case-insensitive and are encoded in ISO 8859-1.  A zero-length
a1998 1
<!-- .sp -->
d2002 1
a2002 1
<function>Name </function>
d2005 1
a2005 11
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "GetCatalogues" "" "@@DEF@@" -->
<function>GetCatalogues</function>
</para>

<para>
=&gt;
</para>
d2007 15
a2021 8
<blockquote>
    <para>
<emphasis remap='I'>names</emphasis>:  LISTofSTRING8
    </para>
    <para>
Errors:
<function>Alloc</function>
    </para>
d2024 1
a2024 1
(encoded in ISO 8859-1) associated with the client.  These
d2027 2
a2028 2
<function>ListFonts</function>,
<function>ListFontsWithXInfo</function>,
d2030 1
a2030 1
<function>OpenBitmapFont</function>.
d2035 1
a2035 1
</blockquote>
d2037 16
a2052 18
<para>
<!-- .LP -->
<!-- .IN "SetEventMask" "" "@@DEF@@" -->
<function>SetEventMask</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>extension-opcode</emphasis>:  CARD8
    </para>
    <para>
<emphasis remap='I'>event-mask</emphasis>:  EVENTMASK
    </para>
    <para>
Errors:
<function>EventMask ,</function>
<function>Request</function>
    </para>
d2055 2
a2056 1
extension indicated by EXTENSION-OPCODE (or zero for the core)
a2060 1
<!-- .sp -->
d2064 1
a2064 1
<function>SetEventMask </function>
a2067 1
<!-- .sp -->
d2070 3
a2072 3
If EXTENSION-OPCODE is not a valid extension opcode previously
returned by
<function>QueryExtension </function>
d2074 1
a2074 1
<function>Request </function>
d2076 1
a2076 1
returned.  If EVENT-MASK contains any bits that do not
d2079 1
a2079 1
<function>EventMask</function>
d2083 1
a2083 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "GetEventMask" "" "@@DEF@@" -->
<function>GetEventMask</function>
</para>
d2085 16
a2100 16
<blockquote>
    <para>
<emphasis remap='I'>extension-opcode</emphasis>:  CARD8
    </para>
</blockquote>
<para>
=&gt;
</para>
<blockquote>
    <para>
<emphasis remap='I'>event-mask</emphasis>:  EVENTMASK
    </para>
    <para>
Errors:
<function>Request</function>
    </para>
d2103 2
a2104 1
extension indicated by EXTENSION-OPCODE (or the core if zero)
d2109 1
a2109 1
If EXTENSION-OPCODE is not a valid extension opcode
d2111 1
a2111 1
<function>QueryExtension </function>
d2113 1
a2113 1
<function>Request</function>
d2116 1
a2116 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "CreateAC" "" "@@DEF@@" -->
<function>CreateAC</function>
</para>
d2118 19
a2136 26
<blockquote>
    <para>
<emphasis remap='I'>ac</emphasis>:  ACCESSCONTEXT
    </para>
    <para>
<emphasis remap='I'>authorization-protocols</emphasis>:  LISTofAUTH
    </para>
</blockquote>
<para>
=&gt;
</para>

<blockquote>
    <para>
<emphasis remap='I'>status</emphasis>:       { Success, Continue, Denied }
    </para>
    <para>
<emphasis remap='I'>authorization-index</emphasis>:          CARD8
    </para>
    <para>
<emphasis remap='I'>authorization-data</emphasis>:          LISTofBYTE
    </para>
    <para>
Errors:
<function>IDChoice</function>
    </para>
d2139 1
a2139 1
<function>AccessContext </function>
d2143 1
a2143 1
<function>AccessContext</function>
d2145 1
a2145 1
<function>SetAuthorization </function>
d2151 6
a2156 7
<!-- .sp -->
If STATUS is Denied, the server rejects the client's
authorization information and does not associate AC with any
valid
<function>AccessContext .  </function>
In this case, AUTHORIZATION-INDEX is set
to zero, and zero bytes of AUTHORIZATION-DATA is returned.
d2159 3
a2161 3
<!-- .sp -->
Otherwise, AUTHORIZATION-INDEX is set to the index (beginning
with 1) into the AUTHORIZATION-PROTOCOLS list of the protocol
d2164 2
a2165 2
set to zero.  The AUTHORIZATION-DATA field is used to send
back authorization protocol-dependent data to the client (such
d2169 2
a2170 2
<!-- .sp -->
If STATUS is Continue, the client is expected to continue
d2173 2
a2174 28
until STATUS is set to either Success or Denied.
    </para>
<literallayout class="monospaced">
     -&gt;
     more-authorization-data:          STRING8
     =&gt;
     status:                           { Success, Continue, Denied }
     more-authorization-data:          LISTofBYTE
</literallayout>
    <para>
Once the connection has been accepted and STATUS is Success,
the request is complete.
    </para>
    <para>
If AC is not in the range [1..2^29-1] or is already associated
with an access context, an IDChoice error is returned.
    </para>
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "FreeAC" "" "@@DEF@@" -->
<function>FreeAC</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>ac</emphasis>:  ACCESSCONTEXT
d2176 45
a2220 10
    <para>
Errors:
<function>AccessContext , </function>
<function>Alloc</function>
    </para>
    <para>
This request indicates that the specified AC should no longer
be associated with a valid access context.  If AC is also the
current
<function>AccessContext</function>
d2222 1
a2222 1
<function>SetAuthorization</function>
d2224 2
a2225 2
<function>SetAuthorization</function>
of None is done to
d2227 1
a2227 1
<function>AccessContext</function>
d2230 3
a2232 3
AC are not affected.  The client may reuse the value of AC in
a subsequent
<function>CreateAC </function>
d2236 4
a2239 4
If AC isn't associated with any valid authorization previously
created by
<function>CreateAC , an </function>
<function>AccessContext </function>
d2242 1
a2242 1
</blockquote>
d2244 14
a2257 14
<para>
<!-- .LP -->
<!-- .IN "SetAuthorization" "" "@@DEF@@" -->
<function>SetAuthorization</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>ac</emphasis>:  ACCESSCONTEXT
    </para>
    <para>
Errors:
<function>AccessContext</function>
    </para>
d2260 1
a2260 1
<function>AccessContext </function>
d2263 5
a2267 5
<function>QueryXInfo</function>,
<function>QueryXExtents8</function>,
<function>QueryXExtents16</function>,
<function>QueryXBitmaps8</function>,
<function>QueryXBitmaps16</function>
d2269 1
a2269 1
<function>CloseFont </function>
d2271 1
a2271 1
<function>AccessContext </function>
d2274 4
a2277 4
<function>OpenBitmapFont</function>
")."
An AC of None restores the
<function>AccessContext</function>
d2281 2
a2282 3
<!-- .sp -->
If AC is neither None nor a value associated with a valid
<function>AccessContext</function>
d2284 1
a2284 1
<function>CreateAC</function>,
d2286 1
a2286 1
<function>AccessContext</function>
d2289 1
a2289 1
</blockquote>
d2291 15
a2305 15
<para>
<!-- .LP -->
<!-- .IN "SetResolution" "" "@@DEF@@" -->
<function>SetResolution</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>resolutions</emphasis>:  LISTofRESOLUTION
    </para>
    <para>
Errors:
<function>Resolution</function>,
<function>Alloc</function>
    </para>
d2311 1
a2311 1
of scalable XLFD font names, to order sets of names based on
d2317 1
a2317 1
If a zero-length list of RESOLUTIONS is given, the
d2319 1
a2319 1
elements of all of the specified RESOLUTIONS are non-zero, the
d2323 2
a2324 1
If a RESOLUTION entry contains a zero, a Resolution error is
d2327 17
a2343 17
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "GetResolution" "" "@@DEF@@" -->
<function>GetResolution</function>
</para>
<para>
=&gt;
</para>
<blockquote>
    <para>
<emphasis remap='I'>resolutions</emphasis>:  LISTofRESOLUTION
    </para>
    <para>
Errors:
<function>Alloc</function>
    </para>
d2347 1
a2347 1
<function>SetResolution</function>,
d2350 1
a2350 1
</blockquote>
d2352 30
a2381 36
<para>
<!-- .LP -->
<!-- .IN "ListFonts" "" "@@DEF@@" -->
<function>ListFonts</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>pattern</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>max-names</emphasis>:  CARD32
    </para>
</blockquote>
<para>
=&gt;+
</para>

<blockquote>
    <para>
<emphasis remap='I'>replies-following-hint</emphasis>:  CARD32
    </para>
    <para>
<emphasis remap='I'>names</emphasis>:  LISTofSTRING8
    </para>
    <para>
Errors:
<function>Alloc</function>
    </para>
    <para>
This request returns a list of at most MAX-NAMES font names
that match the specified PATTERN, according to matching rules
of the X Logical Font Description Conventions [3].  In the
pattern (which is encoded in ISO 8859-1) the `?' character
(octal 77) matches any single character; the `*' character
(octal 52) matches any series of zero or more characters; and
d2383 3
a2385 2
returned NAMES are encoded in ISO 8859-1 and may contain mixed
character cases.  Font names are not required to be in XLFD
d2389 2
a2390 1
If PATTERN is of zero length or MAX-NAMES is equal to zero,
d2396 1
a2396 1
<function>ListFonts </function>
d2406 1
a2406 1
REPLIES-FOLLOWING-HINT field in all but the last reply
d2412 23
a2434 41
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "ListFontsWithXInfo" "" "@@DEF@@" -->
<function>ListFontsWithXInfo</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>pattern</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>pattern</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>pattern</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>max-names</emphasis>:  CARD32
    </para>
</blockquote>

<para>
=&gt;+
</para>

<blockquote>
    <para>
<emphasis remap='I'>replies-following-hint</emphasis>:  CARD32
    </para>
    <para>
<emphasis remap='I'>info</emphasis>:  XFONTINFO
    </para>
    <para>
<emphasis remap='I'>name</emphasis>:  STRING8
    </para>
    <para>
Errors:
<function>Alloc</function>
    </para>
d2437 1
a2437 1
<function>ListFonts </function>
d2441 2
a2442 2
replies, if any, a final reply containing a zero-length NAME
and no INFO is sent.
d2445 2
a2446 3
<!-- .sp -->
The REPLIES-FOLLOWING-HINT field in all but the last reply
contains a positive value that specifies the number of replies
d2451 4
a2454 4
<!-- .sp -->
If PATTERN is of zero length or if MAX-NAMES is equal to
zero, only the final reply containing a zero-length NAME and
no INFO is returned.  This may be used to synchronize the
d2457 1
a2457 22
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "OpenBitmapFont" "" "@@DEF@@" -->
<function>OpenBitmapFont</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
    <para>
<emphasis remap='I'>pattern</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>format-mask</emphasis>:  BITMAPFORMATMASK
    </para>
    <para>
<emphasis remap='I'>format-hint</emphasis>:  BITMAPFORMAT
    </para>
</blockquote>
d2459 26
a2484 21
<para>
=&gt;
</para>
<blockquote>
    <para>
<emphasis remap='I'>otherid</emphasis>:  FONTID or None
    </para>
    <para>
<emphasis remap='I'>otherid-valid</emphasis>:  BOOL
    </para>
    <para>
<emphasis remap='I'>cachable</emphasis>:  BOOL
    </para>
    <para>
Errors:
<function>IDChoice</function>,
<function>Name</function>,
<function>Format</function>,
<function>AccessContext</function>,
<function>Alloc</function>
    </para>
d2487 3
a2489 3
font names that match the specified PATTERN according to the
rules described for
<function>ListFonts .  </function>
d2491 1
a2491 1
<function>Name </function>
d2499 1
a2499 1
<function>AccessContext</function>
d2502 1
a2502 1
<function>SetAuthorization </function>
d2507 1
a2507 1
<function>AccessContext</function>
d2509 1
a2509 1
<function>SetAuthorization</function>
d2512 1
a2512 1
<function>AccessContext</function>
d2514 1
a2514 1
<function>FreeAC</function>
d2516 5
a2520 5
<function>QueryXInfo</function>,
<function>QueryXExtents8</function>,
<function>QueryXExtents16</function>,
<function>QueryXBitmaps8</function>,
<function>QueryXBitmaps16</function>
d2522 2
a2523 2
<function>CloseFont</function>
requests on this FONTID are
d2531 2
a2532 1
different name), the OTHERID field may be set to one of the
d2534 7
a2540 4
OTHERID-VALID field indicates whether or not OTHERID is
still associated with an open font: if it is True, the
client may use OTHERID as an alternative to FONTID.
Otherwise, if OTHERID-VALID is False, OTHERID is no longer
a2543 1
<!-- .sp -->
d2546 3
a2548 3
If OTHERID is set to None, then OTHERID-VALID should be set
to False.
<!-- .sp -->
d2551 2
a2552 1
The FORMAT-MASK indicates which fields in FORMAT-HINT
d2556 1
a2556 1
<function>GetXBitmaps16 </function>
a2558 1
<!-- .sp -->
d2561 2
a2562 1
If CACHABLE is set to True, the client may cache the font
d2565 1
a2565 1
<function>AccessContexts </function>
d2569 2
a2570 1
licensed on a per-display basis.  If CACHABLE is False, the
d2572 1
a2572 2
<function>AccessContext .</function>
<!-- .sp -->
d2577 1
a2577 1
<function>ListFonts </function>
d2582 1
a2582 1
<function> ListFonts </function>
d2584 1
a2584 1
<function>OpenBitmapFont </function>
a2585 1
<!-- .sp -->
d2588 2
a2589 1
If FONTID is not in the range [1..2^29-1] or if it is already
d2591 1
a2591 1
<function>IDChoice </function>
d2593 3
a2595 2
If no font is available that matches the specified PATTERN, a
<function>Name </function>
d2598 1
a2598 1
<function>AccessContext </function>
d2600 4
a2603 3
If FORMAT-MASK has any unspecified bits set or if any of the
fields in FORMAT-HINT indicated by FORMAT-MASK are invalid, a
<function>Format </function>
d2606 1
a2606 1
</blockquote>
d2608 17
a2624 23
<para>
<!-- .LP -->
<!-- .IN "QueryXInfo" "" "@@DEF@@" -->
<function>QueryXInfo</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
</blockquote>
<para>
=&gt;
</para>
<blockquote>
    <para>
<emphasis remap='I'>info</emphasis>:  XFONTINFO
    </para>
    <para>
Errors:
<function>Font</function>,
<function>Alloc</function>
    </para>
d2627 1
a2627 1
for the open font associated with FONTID.
d2630 2
a2631 3
<!-- .sp -->
If FONTID is not associated with any open fonts, a
<function> Font </function>
d2635 1
a2635 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "QueryXExtents8" "" "@@DEF@@" -->
<function>QueryXExtents8</function>
</para>
d2637 20
a2656 25
<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
    <para>
<emphasis remap='I'>range</emphasis>:  BOOL
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>chars</emphasis>:  STRING8
    </para>
</blockquote>
<para>
=&gt;
</para>
<blockquote>
    <para>
<emphasis remap='I'>extents</emphasis>:  LISTofXCHARINFO
    </para>
    <para>
Errors:
<function>Font</function>,
<function>Range</function>,
<function>Alloc</function>
    </para>
d2659 1
a2659 1
<function>QueryXExtents16 </function>
d2663 1
a2663 1
</blockquote>
d2665 20
a2684 31
<para>
<!-- .LP -->
<!-- .IN "QueryXExtents16" "" "@@DEF@@" -->
<function>QueryXExtents16</function>
</para>
<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>range</emphasis>:  BOOL
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>chars</emphasis>:  LISTofCHAR2B
    </para>
</blockquote>
<para>
=&gt;
</para>
<blockquote>
    <para>
<emphasis remap='I'>extents</emphasis>:  LISTofXCHARINFO
    </para>
    <para>
Errors:
<function>Font</function>,
<function>Range</function>,
<function>Alloc</function>
    </para>
d2688 1
a2688 1
specified by RANGE and CHARS.
d2691 2
a2692 2
<!-- .sp -->
If RANGE is True, each succeeding pair of elements in CHARS is
d2694 8
a2701 5
returned.  If CHARS contains an odd number of elements, the
font's XFONTINFO.CHAR-RANGE.MAX-CHAR is implicitly appended to
the list.  If CHARS contains no elements, the list is
implicitly replaced with the font's XFONTINFO.CHAR-RANGE.  If
any of the resulting character ranges are invalid, a Range
d2703 2
a2704 2
concatenated in the order given by CHARS to produce a set of
character codes for which extents are returned.
d2707 3
a2709 3
<!-- .sp -->
If RANGE is False, then CHARS specifies the set of character
codes for which extents are returned.  If CHARS is of
a2712 1
<!-- .sp -->
d2723 2
a2724 3
<!-- .sp -->
If FONTID is not associated with any open fonts, a
<function>Font</function>
d2726 3
a2728 3
returned.  If RANGE is True and CHARS contains any invalid
ranges, a
<function>Range</function>
d2731 1
a2731 25
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "QueryXBitmaps8" "" "@@DEF@@" -->
<function>QueryXBitmaps8</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
    <para>
<emphasis remap='I'>range</emphasis>:  BOOL
    </para>
    <para>
<emphasis remap='I'>chars</emphasis>:  STRING8
    </para>
    <para>
<emphasis remap='I'>format</emphasis>:  BITMAPFORMAT
    </para>
</blockquote>
<para>
=&gt;+
</para>
d2733 24
a2756 19
<blockquote>
    <para>
<emphasis remap='I'>replies-following-hint</emphasis>:  CARD32
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>offsets</emphasis>:  LISTofOFFSET32
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>bitmaps</emphasis>:  LISTofBYTE
    </para>
    <para>
Errors:
<function>Font</function>,
<function>Range</function>,
<function>Format</function>,
<function>Alloc</function>
    </para>
d2759 1
a2759 1
<function>QueryXBitmaps16 </function>
d2763 1
a2763 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "QueryXBitmaps16" "" "@@DEF@@" -->
<function>QueryXBitmaps16</function>
</para>
d2765 28
a2792 43
<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>range</emphasis>:  BOOL
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>chars</emphasis>:  LISTofCHAR2B
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>format</emphasis>:  BITMAPFORMAT
    </para>
</blockquote>
<para>
=&gt;+
</para>
<blockquote>
    <para>
<emphasis remap='I'>replies-following-hint</emphasis>:  CARD32
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>offsets</emphasis>:  LISTofOFFSET32
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>bitmaps</emphasis>:  LISTofBYTE
    </para>
    <para>
Errors:
<function>Font</function>,
<function>Range</function>,
<function>Format</function>,
<function>Alloc</function>
    </para>
    <para>
This request returns a list of glyph bitmaps from the open
font associated with FONTID for the series of characters
specified by RANGE and CHARS.
d2795 2
a2796 2
<!-- .sp -->
If RANGE is True, each succeeding pair of elements in CHARS is
d2798 7
a2804 5
returned.  If CHARS contains an odd number of elements, the
font's XFONTINFO.CHAR-RANGE.MAX-CHAR is implicitly appended to
the list.  If CHARS contains no elements, the list is
implicitly replaced with the font's XFONTINFO.CHAR-RANGE.  If
any of the resulting character ranges are invalid, a Range
d2806 2
a2807 2
concatenated in the order given by CHARS to produce a set of
character codes for which bitmaps are returned.
d2810 4
a2813 4
<!-- .sp -->
If RANGE is False, then CHARS specifies the set of character
codes for which bitmaps are returned.  If CHARS is of zero
length, then a single reply containing a zero-length list of
d2817 2
a2818 2
<!-- .sp -->
If any of the resulting character ranges are invalid, a Range
d2820 2
a2821 2
are concatenated in the order given by CHARS to produce a set
of character codes for which bitmaps are returned.
a2823 1
<!-- .sp -->
a2835 1
<!-- .sp -->
a2842 1
<!-- .sp -->
a2855 1
<!-- .sp -->
d2857 2
a2858 2
a server-dependent order to form the BITMAPS data of the
reply.  If a glyph image is duplicated within a reply, the
d2866 2
a2867 3
<!-- .sp -->
The OFFSETS array in a reply contains one entry for each
character in the subset being returned, in the order that the
d2870 2
a2871 2
corresponding glyph image in the BITMAPS data of that reply
(i.e. an offset may not refer to data in another reply).
d2874 2
a2875 3
<!-- .sp -->
The REPLIES-FOLLOWING-HINT field in all but the last reply
contains a positive value that specifies the number of replies
d2881 9
a2889 5
<!-- .sp -->
If FONTID is not associated with any open fonts, a Font error
is returned.  If RANGE is True and CHARS contains any invalid
ranges, a Range error is returned.  If FORMAT is invalid, a
Format error is returned.
d2891 1
a2891 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "CloseFont" "" "@@DEF@@" -->
<function>CloseFont</function>
</para>
d2893 14
a2906 9
<blockquote>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID
    </para>
    <para>
Errors:
<function>Font</function>,
<function>Alloc</function>
    </para>
d2908 2
a2909 2
This request indicates that the specified FONTID should no
longer be associated with an open font.  The server is free to
d2911 3
a2913 3
the font.  The client may reuse the value of FONTID in a
subsequent
<function>OpenBitmapFont </function>
d2917 2
a2918 3
<!-- .sp -->
If FONTID is not associated with any open fonts, a
<function> Font </function>
d2921 1
a2921 1
</blockquote>
d2923 3
a2925 5
<para>
<!-- .LP -->
<function>"close connection"</function>
<!-- .IN "close connection" "" "@@DEF@@" -->
</para>
a2926 1
<blockquote>
d2929 1
a2929 1
<function>CloseFont </function>
d2935 2
a2936 2
</blockquote>
</sect2>
d2938 1
a2938 1
<sect2 id='Errors'>
d2946 18
a2963 33
<blockquote>
    <para>
<emphasis remap='I'>type</emphasis>:  CARD8  value of 1
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>error-code</emphasis>:  CARD8
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>sequence-number</emphasis>:  CARD16
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>length</emphasis>:  CARD32
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>timestamp</emphasis>:  TIMESTAMP
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>major-opcode</emphasis>:  CARD8
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>minor-opcode</emphasis>:  CARD8
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16
    </para>
</blockquote>
a2964 1
<!-- .LP -->
a2977 1
<!-- .LP -->
a2979 5
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Request" "@@DEF@@" -->
<function>Request</function>
</para>
d2981 14
a2994 4
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
d2999 1
a2999 1
<function>QueryExtension </function>
d3002 1
a3002 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Format" "@@DEF@@" -->
<function>Format</function>
</para>
d3004 15
a3018 1
<blockquote>
d3020 1
a3020 7
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<emphasis remap='I'>format</emphasis>:  BITMAPFORMAT     bad format value
    </para>
    <para>
This error is generated by the use of an invalid BITMAPFORMAT
d3022 3
a3024 3
<function>OpenBitmapFont</function>,
<function>QueryXBitmaps8</function>, and
<function>QueryXBitmaps16</function>
d3028 1
a3028 1
</blockquote>
d3030 22
a3051 19
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Font" "@@DEF@@" -->
<function>Font</function>
</para>
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<emphasis remap='I'>fontid</emphasis>:  FONTID     bad font identifier
    </para>
    <para>
This error is generated by an invalid FONTID in the
<function>QueryXInfo</function>,
<function>QueryXExtents8</function>,
<function>QueryXExtents16</function>,
<function>QueryXBitmaps8</function>,
<function>QueryXBitmaps16</function>
d3053 1
a3053 1
<function>CloseFont </function>
d3057 1
a3057 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Range" "@@DEF@@" -->
<function>Range</function>
</para>
d3059 20
a3078 12
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<emphasis remap='I'>range</emphasis>:  RANGE     bad range
    </para>
    <para>
This error is generated by an invalid RANGE in the
<function> QueryXExtents8</function>,
<function>QueryXExtents16</function>,
<function>QueryXBitmaps8</function>
d3080 1
a3080 1
<function>QueryXBitmaps16 </function>
d3084 1
a3084 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "EventMask" "@@DEF@@" -->
<function>EventMask</function>
</para>
d3086 15
a3100 8
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>event-mask</emphasis>:  EVENTMASK     bad event mask
    </para>
d3102 2
a3103 2
This error is generated by an invalid EVENTMASK in the
<function>SetEventMask </function>
d3107 1
a3107 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "AccessContext" "@@DEF@@" -->
<function>AccessContext</function>
</para>
d3109 15
a3123 8
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<emphasis remap='I'>ac</emphasis>:  ACCESSCONTEXT     unaccepted
<function>AccessContext</function>
    </para>
d3125 2
a3126 2
This error is generated by an invalid ACCESSCONTEXT in the
<function>FreeAC </function>
d3128 1
a3128 1
<function>SetAuthorization </function>
d3130 1
a3130 1
<function>OpenBitmapFont</function>
d3132 1
a3132 1
first two cases, the ACCESSCONTEXT of the errant request is
d3134 1
a3134 1
ACCESSCONTEXT is returned as extra data.
d3136 1
a3136 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "IDChoice" "@@DEF@@" -->
<function>IDChoice</function>
</para>
d3138 15
a3152 7
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<emphasis remap='I'>id</emphasis>:  ID     bad identifier
    </para>
d3155 3
a3157 3
ACCESSCONTEXT identifier in a
<function>CreateAC </function>
request or FONTID identifier
d3159 1
a3159 1
<function>OpenBitmapFont </function>
d3163 1
a3163 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Name" "@@DEF@@" -->
<function>Name</function>
</para>
d3165 14
a3178 4
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
d3182 1
a3182 1
<function>OpenBitmapFont </function>
d3184 1
a3184 1
<function>SetCatalogues </function>
d3187 1
a3187 7
</blockquote>

<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Resolution" "@@DEF@@" -->
<function>Resolution</function>
</para>
d3189 16
a3204 12
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     X value of errant resolution
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>y-resolution</emphasis>:  CARD16          Y value of errant resolution
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>point-size</emphasis>:  CARD16          point size of errant resolution
    </para>
d3206 1
a3206 1
This error is generated in response to an invalid RESOLUTION
d3208 1
a3208 1
<function>SetResolution </function>
d3212 1
a3212 7
</blockquote>

<para>
<!-- .LP      -->
<!-- .IN "Error Codes" "Alloc" "@@DEF@@" -->
<function>Alloc</function>
</para>
d3214 14
a3227 4
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
d3232 1
a3232 1
</blockquote>
d3234 15
a3248 13
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Length" "@@DEF@@" -->
<function>Length</function>
</para>

<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
    <para>
<emphasis remap='I'>length</emphasis>:  CARD32     bad length value
    </para>
d3254 1
a3254 6
</blockquote>
<para>
<!-- .LP -->
<!-- .IN "Error Codes" "Implementation" "@@DEF@@" -->
<function>Implementation</function>
</para>
d3256 14
a3269 4
<blockquote>
    <para>
<emphasis remap='I'>data-or-unused</emphasis>:  CARD16     unused
    </para>
d3275 5
a3279 1
<!-- .sp -->
d3282 2
a3283 2
</blockquote>
</sect2>
d3285 1
a3285 1
<sect2 id='Events'>
a3290 1
<!-- .LP -->
d3294 15
a3309 22
<blockquote>
    <para>
<!-- .TA .75i .75i .75i .75i -->
<emphasis remap='I'>type</emphasis>:  CARD8     value of 2
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>event-code</emphasis>:  CARD8
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>sequence-number</emphasis>:  CARD16
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>length</emphasis>:  CARD32
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>timestamp</emphasis>:  TIMESTAMP
    </para>
</blockquote>
a3310 1
<!-- .LP -->
d3316 1
a3316 1
packet and must always have a value of at least 3.  The TIMESTAMP field
a3320 1
<!-- .LP -->
d3322 16
a3338 9
<literallayout class="monospaced">
<function>EventName</function>
         <emphasis remap='I'>arg1</emphasis>: type1
         ...
         <emphasis remap='I'>argN</emphasis>: typeN

          Description
</literallayout>

d3341 1
a3341 1
<emphasis remap='I'>arg1</emphasis>...<emphasis remap='I'>argN</emphasis>
a3344 1
<!-- .LP -->
d3347 4
a3350 6
<para>
<!-- .LP -->
<!-- .IN "KeepAlive" "" "@@DEF@@" -->
<function>KeepAlive</function>
</para>
<blockquote>
d3357 2
a3358 2
<function>NoOp</function>
 ")."
d3360 1
a3360 1
</blockquote>
d3362 14
a3375 12
<para>
<!-- .LP -->
<!-- .IN "CatalogueListNotify" "" "@@DEF@@" -->
<function>CatalogueListNotify</function>
</para>
<blockquote>
    <para>
<emphasis remap='I'>added</emphasis>:  BOOL
    </para>
    <para>
<emphasis remap='I'>deleted</emphasis>:  BOOL
    </para>
d3378 1
a3378 1
<function>CatalogueListChangeMask </function>
d3381 21
a3401 19
changed.  The ADDED field is True if new catalogues have
been added to the server, otherwise it is False.  The
DELETED field is True if any existing catalogues have
been removed from the server, otherwise it is False.
    </para>
</blockquote>
<para>
<!-- .LP      -->
<!-- .IN "FontListNotify" "" "@@DEF@@" -->
<function>FontListNotify</function>
</para>
<blockquote>
    <para>
<emphasis remap='I'>added</emphasis>:  BOOL
    </para>
    <para>
<!-- .br -->
<emphasis remap='I'>deleted</emphasis>:  BOOL
    </para>
d3404 1
a3404 1
<function>FontListChangeMask </function>
d3407 1
a3407 1
catalogues has changed.  The ADDED field is True if new
d3409 2
a3410 2
used by the client, otherwise it is False.  The DELETED
field is True if any existing fonts have been removed
d3412 1
a3412 1
is False.
d3414 3
a3417 1
<!-- .sp -->
d3420 3
a3422 3
</blockquote>
</sect2>
</sect1>
d3424 1
a3424 1
<sect1 id='Protocol_Encoding'>
d3430 2
a3431 2
<!-- .LP -->
Numbers that are prefixed with "#x" are in hexadecimal (base 16).  All other
d3447 2
a3448 1
field, CONTENTS is the name of the type as given in Section 4 or the value if
a3451 1
<!-- .LP -->
d3456 2
a3457 1
Multiple copies of an object are indicated by CONTENTS prefix "LISTof".
a3459 1
<!-- .LP -->
d3461 4
a3464 3
NAME field of "unused".  Zeroed bytes (whose value must be zero) will have a
blank CONTENTS field and a NAME field of "zero".  The expression pad(e)
refers to the number of bytes needed to round a value "e" up to the closed
d3473 1
a3473 1
<sect2 id='Data_Types_2'>
a3477 1
<!-- .sp 6p -->
d3479 2
a3480 1
ACCESSCONTEXT
d3482 1
a3482 1
4 CARD32 access context with at least one of the following bits set:
d3484 1
a3484 1
#x1fffffff
d3486 1
a3486 1
but none of the following bits set:
d3488 1
a3488 1
#xe0000000               zero
d3491 5
a3495 5
ALTERNATESERVER
1     BOOL               subset
1     n                  length of name
n     STRING8            name
p                        unused, p=pad(n+2)
d3497 7
a3503 11
AUTH

2     n                  length of name
2     d                  length of data
n     STRING8            name
p                        unused, p=pad(n)
d     STRING8            data
q                        unused, q=pad(d)


BITMAPFORMAT
a3504 14
4 CARD32 value, union of the following bits:
     #x00000001           ByteOrderMSB
     #x00000002           BitOrderMSB
     #x00000000           ImageRectMin
     #x00000004           ImageRectMaxWidth
     #x00000008           ImageRectMax
     #x00000000           ScanlinePad8
     #x00000100           ScanlinePad16
     #x00000200           ScanlinePad32
     #x00000300           ScanlinePad64
     #x00000000           ScanlineUnit8
     #x00001000           ScanlineUnit16
     #x00002000           ScanlineUnit32
     #x00003000           ScanlineUnit64
d3506 2
a3507 1
except for the following bits which must be zero:
d3509 13
a3521 1
     #xffffccf0           zero
d3523 1
a3523 1
and the following of which at most one bit may be set:
d3525 1
a3525 1
     #x0000000c at most one bit can be set
d3527 1
d3529 1
a3529 1
BITMAPFORMATMASK
a3530 1
4 CARD32 value, mask of the following bits:
d3532 2
a3533 5
     #x00000001           ByteOrderMask
     #x00000002           BitOrderMask
     #x00000004           ImageRectMask
     #x00000008           ScanlinePadMask
     #x00000010           ScanlineUnitMask
d3535 5
a3539 1
except for the following bits which must be zero:
d3541 1
a3541 1
     #xffffffe0           zero
d3543 1
a3543 1
BOOL
d3545 4
a3548 3
1    BOOL       boolean, one of the following values:
0    False
1    True
d3550 2
a3551 2
BYTE
1    BYTE       unsigned byte of data
d3553 2
a3554 2
CARD8
1    CARD8       8-bit unsigned integer
d3556 2
a3557 2
CARD16
2    CARD16      16-bit unsigned integer
d3559 2
a3560 2
CARD32
4    CARD32      32-bit unsigned integer
d3562 3
a3564 3
CHAR2B
1    CARD8       byte1
1    CARD8       byte2
d3566 2
a3567 3
EVENTMASK
4    CARD32 event mask
     for core events, this is union of the following bits:
d3569 1
a3569 2
     #00000001   CatalogueListChangeMask
     #00000002   FontListChangeMask
d3571 2
a3572 1
but none of the following bits set:
d3574 1
a3574 1
     #fffffffc
d3576 1
a3576 1
extensions define their own sets of bits
d3578 1
a3578 1
FONTID
d3580 2
a3581 2
4 CARD32 font identifier with at least one of
the following bits set:
d3583 1
a3583 1
     #x1fffffff
d3585 1
a3585 1
but none of the following bits set:
d3587 1
a3587 1
     #xe0000000   zero
d3589 1
a3589 2
INT8
1    INT8         8-bit signed integer
d3591 2
a3592 2
INT16
2    INT16         16-bit signed integer
d3594 2
a3595 2
INT32
4    INT32         32-bit signed integer
d3597 2
a3598 3
OFFSET32
4    CARD32         position (or integer value)
4    CARD32         length
d3600 3
a3602 5
PROPINFO
4    n                 number of PROPOFFSET components
4    m                 number of bytes of property data
20*n PROPOFFSET         property offsets into data block
m    LISTofBYTE         property data block
d3604 5
a3608 3
PROPOFFSET
8    OFFSET32         name in data block
8    OFFSET32         value in data block
d3610 8
a3617 5
1 CARD8 type, one of the following values:
0    String
1    Unsigned
2    Signed
3    zero
d3619 3
a3621 3
RANGE
2    CHAR2B                 minimum character code
2    CHAR2B         maximum character code
d3623 4
a3626 4
RESOLUTION
2    CARD16 x resolution in pixels per inch
2    CARD16 y resolution in pixels per inch
2    CARD16 point size in decipoints
d3629 2
a3630 2
1    n length of name
n    STRING8 name
d3632 2
a3633 2
STRING8
n    LISTofBYTE         array of 8-bit character values
d3635 2
a3636 2
TIMESTAMP
4    CARD32         milliseconds since server time origin
d3638 30
a3667 28
XCHARINFO
2    INT16         left bearing
2    INT16         right bearing
2    INT16         width
2    INT16         ascent
2    INT16         descent
2    CARD16         attributes

XFONTINFO
4 CARD32 flags, union of the following bits:
     #x00000001         AllCharactersExist
     #x00000002         InkInside
     #x00000004         HorizontalOverlap

but none of the following bits set:

     #xfffffff8         zero
4    RANGE              range of characters in font
1    CARD8              drawing direction
     0             LeftToRight
     1             RightToLeft
1                       unused
2    CHAR2B             default character
12   XCHARINFO          minimum bounds
12   XCHARINFO          maximum bounds
2    INT16              font ascent
2    INT16              font descent
n    PROPINFO           property data
d3669 1
a3669 1
</sect2>
d3671 1
a3671 1
<sect2 id='Requests_2'>
d3673 1
a3673 1
<para><emphasis role="bold">open connection</emphasis></para>
d3675 4
a3678 4
1     BYTE                   byteorder, one of the values:
      #x42                   MostSignificant Byte first
      #x6c                   LeastSignificant Byte first
1     CARD8                  numberof auth in auth-data
d3682 7
a3688 7
a     LISTofAUTH             auth-data
=>
2     CARD16                 status
0                            Success
1                            Continue
2                            Busy
3                            Denied
d3691 2
a3692 2
1     CARD8                  numberof alternate-servers-hint
1     CARD8                  authorization-index
d3695 2
a3696 2
a     LISTofALTERNATESERVER  alternate-servers-hint
d     LISTofBYTE             authorization-data
d3701 2
a3702 2
If STATUS is Busy or Denied, the protocol stops and the connection is
closed. If STATUS is Continue, the client is expected to respond with
d3705 1
a3705 1
is set to Success, or until the server sets STATUS to Busy or Denied
d3710 1
a3710 1
->
d3712 1
a3712 1
d     LISTofBYTE             more-authorization-data
d3714 1
a3714 1
=>
d3716 7
a3722 7
2     CARD16                 status
        0                    Success
      1                      Continue
      2                      Busy
      3                      Denied
      2                      unused
d     LISTofBYTE             more-authorization-data
d3726 1
a3726 1
When STATUS is Success, the protocol resumes with the following
d3732 1
a3732 1
2     CARD16                 maximum-request-length
d3734 2
a3735 2
4     CARD32                 release-number
v     STRING8                vendor-string
d3744 1
a3744 1
<emphasis role="bold">NoOp</emphasis>
d3749 1
a3749 1
<emphasis role="bold">ListExtensions</emphasis>
d3753 1
a3753 1
=>
d3755 2
a3756 2
1   CARD8                    numberof names
2   CARD16                   sequence-number
d3761 1
a3761 1
<emphasis role="bold">QueryExtension</emphasis>
d3765 1
a3765 1
n   STRING8                  name
d3767 1
a3767 1
=>
d3769 2
a3770 2
1   BOOL                     present
2   CARD16                   sequence-number
d3772 7
a3778 7
2   CARD16                   major-version
2   CARD16                   minor-version
1   CARD8                    major-opcode
1   CARD8                    first-event
1   CARD8                    number-events
1   CARD8                    first-error
1   CARD8                    number-errors
d3781 1
a3781 1
<emphasis role="bold">ListCatalogues</emphasis>
d3785 1
a3785 1
4   CARD32                   max-names
d3788 1
a3788 1
n   STRING8                  pattern
d3790 1
a3790 1
=>+
d3793 1
a3793 1
2   CARD16                   sequence-number
d3795 2
a3796 2
4   CARD32                   replies-following-hint
4   CARD32                   numberof catalogue-names
d3800 1
a3800 1
<emphasis role="bold">SetCatalogues</emphasis>
d3802 1
a3802 1
1   CARD8                    numberof catalogue-names
d3807 1
a3807 1
<emphasis role="bold">GetCatalogues</emphasis>
d3811 1
a3811 1
=>
d3813 2
a3814 2
1   CARD8                    numberof catalogue-names
2   CARD16                   sequence-number
d3819 1
a3819 1
<emphasis role="bold">SetEventMask</emphasis>
d3821 1
a3821 1
1   CARD8                    extension-opcode
d3823 1
a3823 1
4   EVENTMASK                event-mask
d3825 1
a3825 1
<emphasis role="bold">GetEventMask</emphasis>
d3827 1
a3827 1
1   CARD8                    extension-opcode
d3829 1
a3829 1
=>
d3832 1
a3832 1
2   CARD16                   sequence-number
d3834 1
a3834 1
4   EVENTMASK                event-mask
d3836 1
a3836 1
<emphasis role="bold">CreateAC</emphasis>
d3838 1
a3838 1
1   CARD8                    numberof authorization-protocols
d3840 3
a3842 3
4   ACCESSCONTEXT            ac
a   LISTofAUTH               authorization-protocols
=>
d3844 2
a3845 2
1   CARD8                    authorization-index
2   CARD16                   sequence-number
d3847 5
a3851 5
2   CARD16                   status
    0 Success
    1 Continue
    2 Busy
    3 Denied
d3853 1
a3853 1
d   LISTofBYTE               authorization-data
d3858 1
a3858 1
If STATUS is Continue, the client is expected to respond with additional
d3862 1
a3862 1
Success, Busy, or Denied at which point the request is finished.
d3866 1
a3866 1
->
d3868 1
a3868 1
d   LISTofBYTE               more-authorization-data
d3870 1
a3870 1
=>
d3872 5
a3876 5
2   CARD16                   status
    0 Success
    1 Continue
    2 Busy
    3 Denied
d3878 1
a3878 1
d   LISTofBYTE               authorization-data
d3881 1
a3881 1
<emphasis role="bold">FreeAC</emphasis>
d3885 1
a3885 1
4   ACCESSCONTEXT            ac
d3887 1
a3887 1
<emphasis role="bold">SetAuthorization</emphasis>
d3891 1
a3891 1
4   ACCESSCONTEXT            ac
d3893 1
a3893 1
<emphasis role="bold">SetResolution</emphasis>
d3897 1
a3897 1
6*n LISTofRESOLUTION         resolutions
d3900 1
a3900 1
<emphasis role="bold">GetResolution</emphasis>
d3904 1
a3904 1
=>
d3907 1
a3907 1
2   CARD16                   sequence-number
d3909 1
a3909 1
6*n LISTofRESOLUTION         resolutions
d3912 1
a3912 1
<emphasis role="bold">ListFonts</emphasis>
d3916 1
a3916 1
4   CARD32                   max-names
d3919 1
a3919 1
n   STRING8                  pattern
d3921 1
a3921 1
=>+
d3924 1
a3924 1
2   CARD16                   sequence-number
d3926 2
a3927 2
4   CARD32                   replies-following-hint
4   CARD32                   numberof font-names
d3931 1
a3931 1
<emphasis role="bold">ListFontsWithXInfo</emphasis>
d3935 1
a3935 1
4   CARD32                   max-names
d3938 1
a3938 1
n   STRING8                  pattern
d3940 1
a3940 1
=>+(except for last in series)
d3943 1
a3943 1
2   CARD16                   sequence-number
d3945 3
a3947 3
4   CARD32                   replies-hint
f   XFONTINFO                fontinfo
n   STRING8                  name
d3949 1
a3949 1
=>(last in series)
d3952 1
a3952 1
2   CARD16                   sequence-number
d3955 1
a3955 1
<emphasis role="bold">OpenBitmapFont</emphasis>
d3959 3
a3961 3
4   FONTID                   fontid
4   BITMAPFORMATMASK         format-mask
4   BITMAPFORMAT             format
d3964 1
a3964 1
=>
d3966 2
a3967 2
1   BOOL                     otherid-valid
2   CARD16                   sequence-number
d3969 2
a3970 2
4   FONTID                   otherid
1   BOOL                     cachable
d3973 1
a3973 1
<emphasis role="bold">QueryXInfo</emphasis>
d3977 2
a3978 2
4   FONTID                   fontid
=>
d3981 1
a3981 1
2   CARD16                   sequence-number
d3983 1
a3983 1
f   XFONTINFO                fontinfo
d3986 1
a3986 1
<emphasis role="bold">QueryXExtents8</emphasis>
d3988 1
a3988 1
1   BOOL                     range
d3990 1
a3990 1
4   FONTID                   fontid
d3992 1
a3992 1
n   STRING8                  chars
d3994 1
a3994 1
=>
d3997 1
a3997 1
2   CARD16                   sequence-number
d4000 1
a4000 1
12*n LISTofXCHARINFO         extents
d4002 1
a4002 1
<emphasis role="bold">QueryXExtents16</emphasis>
d4004 1
a4004 1
1   BOOL                     range
d4006 1
a4006 1
4   FONTID                   fontid
d4008 1
a4008 1
2*n                          LISTofCHAR2B chars
d4010 1
a4010 1
=>
d4013 1
a4013 1
2   CARD16                   sequence-number
d4016 1
a4016 1
12*n LISTofXCHARINFO         extents
d4018 1
a4018 1
<emphasis role="bold">QueryXBitmaps8</emphasis>
d4020 1
a4020 1
1   BOOL                     range
d4022 2
a4023 2
4   FONTID                   fontid
4   BITMAPFORMAT             format
d4025 1
a4025 1
n   STRING8                  chars
d4027 1
a4027 1
=>+
d4030 1
a4030 1
2   CARD16                   sequence-number
d4032 1
a4032 1
4   CARD32                   replies-following-hint
d4035 2
a4036 2
8*n LISTofOFFSET32           offsets
m   LISTofBYTE               glyphimages
d4039 1
a4039 1
<emphasis role="bold">QueryXBitmaps16</emphasis>
d4041 1
a4041 1
1   BOOL                     range
d4043 2
a4044 2
4   FONTID                   fontid
4   BITMAPFORMAT             format
d4046 1
a4046 1
2*n LISTofCHAR2B             chars
d4048 1
a4048 1
=>
d4051 1
a4051 1
2   CARD16                   sequence-number
d4053 1
a4053 1
4   CARD32                   replies-following-hint
d4056 2
a4057 2
8*n LISTofOFFSET32           offsets
m   LISTofBYTE               glyphimages
d4060 1
a4060 1
<emphasis role="bold">CloseFont</emphasis>
d4064 1
a4064 1
4   FONTID                   fontid
d4066 1
a4066 1
</sect2>
d4068 1
a4068 1
<sect2 id='Errors_2'>
d4072 1
a4072 1
<emphasis role="bold">Request</emphasis>
d4074 2
a4075 2
1   0                        Request
2   CARD16                   sequence-number
d4077 3
a4079 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4082 1
a4082 1
<emphasis role="bold">Format</emphasis>
d4084 2
a4085 2
1   1                        Format
2   CARD16                   sequence-number
d4087 3
a4089 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4091 1
a4091 1
4   BITMAPFORMAT             bad-format
d4093 1
a4093 1
<emphasis role="bold">Font</emphasis>
d4095 2
a4096 2
1   2                        Font
2   CARD16                   sequence-number
d4098 3
a4100 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4102 1
a4102 1
4   FONTID bad-fontid
d4104 1
a4104 1
<emphasis role="bold">Range</emphasis>
d4106 2
a4107 2
1   3                        Range
2   CARD16                   sequence-number
d4109 3
a4111 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4113 1
a4113 1
4   RANGE                    bad-range
d4115 1
a4115 1
<emphasis role="bold">EventMask</emphasis>
d4117 2
a4118 2
1   4                        EventMask
2   CARD16                   sequence-number
d4120 3
a4122 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4124 1
a4124 1
4   EVENTMASK                event-mask
d4126 1
a4126 1
<emphasis role="bold">AccessContext</emphasis>
d4128 2
a4129 2
1   5                        AccessContext
2   CARD16                   sequence-number
d4131 3
a4133 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4135 1
a4135 1
4   ACCESSCONTEXT            access context
d4137 1
a4137 1
<emphasis role="bold">IDChoice</emphasis>
d4139 2
a4140 2
1   6                        IDChoice
2   CARD16                   sequence-number
d4142 3
a4144 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4146 1
a4146 1
4   FONTID                   bad-fontid
d4148 1
a4148 1
<emphasis role="bold">Name</emphasis>
d4150 2
a4151 2
1   7                        Name
2   CARD16                   sequence-number
d4153 3
a4155 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4158 1
a4158 1
<emphasis role="bold">Resolution</emphasis>
d4160 2
a4161 2
1   8                        Resolution
2   CARD16                   sequence-number
d4163 4
a4166 4
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
6   RESOLUTION               resolution
d4168 1
a4168 1
<emphasis role="bold">Alloc</emphasis>
d4170 2
a4171 2
1   9                        Alloc
2   CARD16                   sequence-number
d4173 3
a4175 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4178 1
a4178 1
<emphasis role="bold">Length</emphasis>
d4180 2
a4181 2
1   10                       Length
2   CARD16                   sequence-number
d4183 3
a4185 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4187 1
a4187 1
4   CARD32                   bad-length
d4189 1
a4189 1
<emphasis role="bold">Implementation</emphasis>
d4191 2
a4192 2
1   11                       Implementation
2   CARD16                   sequence-number
d4194 3
a4196 3
4   TIMESTAMP                timestamp
1   CARD8                    major-opcode
1   CARD8                    minor-opcode
d4200 1
a4200 1
</sect2>
d4202 1
a4202 1
<sect2 id='Events_2'>
d4205 1
a4205 1
<emphasis role="bold">KeepAlive</emphasis>
d4208 1
a4208 1
2   CARD16                   sequence-number
d4210 1
a4210 1
4   TIMESTAMP                timestamp
d4212 1
a4212 1
<emphasis role="bold">CatalogueListNotify</emphasis>
d4215 1
a4215 1
2   CARD16                   sequence-number
d4217 3
a4219 3
4   TIMESTAMP                timestamp
1   BOOL                     added
1   BOOL                     deleted
d4222 1
a4222 1
<emphasis role="bold">FontListNotify</emphasis>
d4225 1
a4225 1
2   CARD16                   sequence-number
d4227 3
a4229 3
4   TIMESTAMP                timestamp
1   BOOL                     added
1   BOOL                     deleted
d4233 2
a4234 2
</sect2>
</sect1>
d4236 1
a4236 1
<sect1 id='Acknowledgements'>
d4243 2
a4244 1
experiments done under the auspices of the MIT X Consortium font working group.
d4246 11
a4256 3
or omissions.  The protocol presented here was primarily designed by Jim
Fulton, Keith Packard, and Bob Scheifler.  Special thanks goes to Ned
Batchelder, Jim Flowers, and Axel Deininger for their invigorating comments
d4258 3
a4260 2
Stephen Gildea edited version 2 of this document.
Finally, David Lemke
d4263 1
a4263 1
</sect1>
d4265 1
a4265 1
<bibliography>
d4271 3
a4273 2
<biblioentry>
  <title>X Window System Protocol Version 11</title>
d4277 4
a4280 2
<biblioentry>
  <title>Adobe System - Bitmap Distribution Format 2.1</title>
d4283 5
a4287 2
<biblioentry>
  <title>X Consortium.  X Logical Font Description Conventions, Version 1.5</title>
a4303 1
</para>
d4305 4
a4308 1
<itemizedlist>
d4311 2
a4312 2
No restrictions - anyone may access any fonts.  The server neither
refuses any connections nor generates AccessContext errors on any
d4317 3
d4322 1
a4322 1
Per-machine - only those clients connecting from a known set of
d4327 3
d4332 1
a4332 1
Per-user - only a known set of users may access the fonts.  The
d4338 3
d4343 2
a4344 2
Simultaneous Use - only a certain number of clients may use a given
font at any one time.  Additional clients would receive AccessContext
d4351 3
d4356 1
a4356 1
Postage Meter - a particular font may only be accessed a limited
d4360 1
a4360 1
return an AccessContext error.
d4363 3
a4365 1
</itemizedlist>
a4375 1
<!-- .LP -->
d4416 2
a4417 1
</article>
@


1.1
log
@Update to fontsproto 2.1.1. No functionnal change.
@
text
@d2 5
a6 2
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
d9 1
a9 1
<book id="fsproto">
d11 1
a11 1
<bookinfo>
d13 2
a14 1
   <subtitle>X Window System Standard</subtitle>
d19 1
a19 3
         <affiliation><orgname>
Network Computing Devices, Inc.
         </orgname></affiliation>
d22 1
a22 1
   <corpname>X Consortium Standard</corpname>
a23 4
   <copyright><year>1994</year><holder>X Consortium</holder></copyright>
   <affiliation><orgname>X Consortium</orgname></affiliation>
   <productnumber>X Version 11, Release 6.8</productnumber>
   <edition>Revised May 2, 1994</edition>
a25 1

d35 4
a50 1

d52 1
a52 1
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
a58 1

d65 1
a65 1
</bookinfo>
d67 1
a67 3
<chapter>
<title>TITLE</title>
<sect1 id="introduction">
d121 1
a121 1
<sect1 id="architectural_model">
d240 1
a240 1
<sect1 id="font_server_naming">
d255 1
a255 1
<sect2 id="tcpip_names">
d282 1
a282 1
<sect2 id="decnet_names">
d312 1
a312 1
<sect1 id="protocol">
d380 1
a380 1
<sect2 id="data_types">
d1107 1
a1107 1
<sect2 id="requests">
d2653 1
a2653 1
<sect2 id="errors">
d2980 1
a2980 1
<sect2 id="events">
d3119 1
a3119 1
<sect1 id="protocol_encoding">
d3167 1
a3167 1
<sect2 id="data_types_2">
d3366 1
a3366 1
<sect2 id="requests_2">
d3763 1
a3763 1
<sect2 id="errors_2">
d3897 1
a3897 1
<sect2 id="events_2">
d3931 1
a3931 1
<sect1 id="acknowledgements">
a3969 1
</chapter>
d4080 1
a4080 1
</book>
@

