head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.4
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.2
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XCB:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2016.09.02.10.09.43;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	mKDGsTNpiR2zRHYQ;

1.11
date	2015.09.30.09.13.41;	author dcoppa;	state Exp;
branches;
next	1.10;
commitid	ulTopuJyOQ6kVNOJ;

1.10
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	01TEvO4uNHLqFv7N;

1.9
date	2014.04.14.19.02.17;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2013.05.31.14.18.43;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.03.27.19.14.20;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.04.10.00.58;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.18.20.06.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.05.15.54.43;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.44.43;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.15.55.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.15.55.46;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@dnl Process this file with autoconf to produce a configure script.

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([libxcb],[1.12],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xcb],
        [libxcb])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([xcb.pc.in])
AC_CONFIG_HEADERS([src/config.h])

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])
AM_PATH_PYTHON([2.6])

# Set common system defines for POSIX extensions, such as _GNU_SOURCE
# Must be called before any macros that run the compiler (like AC_PROG_LIBTOOL)
# to avoid autoconf errors.
AC_USE_SYSTEM_EXTENSIONS

# Initialize libtool
LT_PREREQ([2.2])
LT_INIT([win32-dll])

# Require xorg-macros minimum of 1.18 - Initial version
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.18 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.18)
XORG_DEFAULT_OPTIONS
XORG_ENABLE_DEVEL_DOCS
XORG_WITH_DOXYGEN

# The dot drawing tool is checked by XORG_WITH_DOXYGEN, needed for xcb manual
if test x"$HAVE_DOT" = xno; then
    AC_MSG_WARN([dot not found - doxygen targets will be skipped])
fi

PKG_CHECK_MODULES(CHECK, [check >= 0.9.4], [HAVE_CHECK=yes], [HAVE_CHECK=no])
AM_CONDITIONAL(HAVE_CHECK, test x$HAVE_CHECK = xyes)

XSLTPROC=no
HTML_CHECK_RESULT=no
if test x"$HAVE_CHECK" = xyes; then
        AC_PATH_PROG(XSLTPROC, xsltproc, no)
        if test x"$XSLTPROC" != xno; then
                HTML_CHECK_RESULT=yes
        fi
fi
AC_SUBST(HTML_CHECK_RESULT)

# Checks for pkg-config packages
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.12)
NEEDED="pthread-stubs xau >= 0.99.2"
PKG_CHECK_MODULES(NEEDED, $NEEDED)

have_xdmcp="no"
PKG_CHECK_MODULES(XDMCP, xdmcp,
        AC_CHECK_LIB(Xdmcp, XdmcpWrap,
                [
                AC_DEFINE(HASXDMAUTH,1,[Has Wraphelp.c needed for XDM AUTH protocols])
                NEEDED="$NEEDED xdmcp"
                have_xdmcp="yes"
                ],
                [
                XDMCP_CFLAGS=
                XDMCP_LIBS=
                ], [$XDMCP_LIBS]),
        [AC_MSG_RESULT(no)])

AC_SUBST(NEEDED)

# Find the xcb-proto protocol descriptions
AC_MSG_CHECKING(XCBPROTO_XCBINCLUDEDIR)
XCBPROTO_XCBINCLUDEDIR=`$PKG_CONFIG --variable=xcbincludedir xcb-proto`
AC_MSG_RESULT($XCBPROTO_XCBINCLUDEDIR)
AC_SUBST(XCBPROTO_XCBINCLUDEDIR)

# Find the xcb-proto version
XCBPROTO_VERSION=`$PKG_CONFIG --modversion xcb-proto`
AC_SUBST(XCBPROTO_VERSION)

# Find the xcbgen Python package
AC_MSG_CHECKING(XCBPROTO_XCBPYTHONDIR)
XCBPROTO_XCBPYTHONDIR=`$PKG_CONFIG --variable=pythondir xcb-proto`
AC_MSG_RESULT($XCBPROTO_XCBPYTHONDIR)
AC_SUBST(XCBPROTO_XCBPYTHONDIR)

AC_HEADER_STDC
AC_SEARCH_LIBS(getaddrinfo, socket)
AC_SEARCH_LIBS(connect, socket)

# Find support for sending a message from a socket
AC_SEARCH_LIBS(sendmsg, socket, [have_sendmsg="yes"], [have_sendmsg="no"])

# XPG4v2/UNIX95 added msg_control - check to see if we need to define
# _XOPEN_SOURCE to get it (such as on Solaris)
AC_CHECK_MEMBER([struct msghdr.msg_control], [], [],
                 [
AC_INCLUDES_DEFAULT
#include <sys/socket.h>
                 ])
# First try for Solaris in C99 compliant mode, which requires XPG6/UNIX03
if test "x$ac_cv_member_struct_msghdr_msg_control" = xno; then
    unset ac_cv_member_struct_msghdr_msg_control
    AC_MSG_NOTICE([trying again with _XOPEN_SOURCE=600])
    AC_CHECK_MEMBER([struct msghdr.msg_control],
                    [AC_DEFINE([_XOPEN_SOURCE], [600],
                       [Defined if needed to expose struct msghdr.msg_control])
                    ], [], [
#define _XOPEN_SOURCE 600
AC_INCLUDES_DEFAULT
#include <sys/socket.h>
                     ])
fi
# If that didn't work, fall back to XPG5/UNIX98 with C89
if test "x$ac_cv_member_struct_msghdr_msg_control" = xno; then
    unset ac_cv_member_struct_msghdr_msg_control
    AC_MSG_NOTICE([trying again with _XOPEN_SOURCE=500])
    AC_CHECK_MEMBER([struct msghdr.msg_control],
                    [AC_DEFINE([_XOPEN_SOURCE], [500],
                       [Defined if needed to expose struct msghdr.msg_control])
                    ], [have_sendmsg="no"], [
#define _XOPEN_SOURCE 500
AC_INCLUDES_DEFAULT
#include <sys/socket.h>
                     ])
fi

case x$have_sendmsg in
xyes)
        AC_DEFINE([HAVE_SENDMSG],1,[Define if your platform supports sendmsg])
        ;;
esac

have_win32="no"
lt_enable_auto_import=""
case $host_os in
mingw*)
        have_win32="yes"
        lt_enable_auto_import="-Wl,--enable-auto-import"
        ;;
linux*)
        AC_DEFINE([HAVE_ABSTRACT_SOCKETS], 1, [Define if your platform supports abstract sockets])
        ;;
esac

AC_SUBST(lt_enable_auto_import)
AM_CONDITIONAL([XCB_HAVE_WIN32], [test "x${have_win32}" = "xyes"])

dnl define buffer queue size
AC_ARG_WITH([queue-size],
            AS_HELP_STRING([--with-queue-size=SIZE],
            [Set the XCB buffer queue size (default is 16384)]),
            [xcb_queue_buffer_size="$withval"],
            [xcb_queue_buffer_size=16384])
AC_DEFINE_UNQUOTED(XCB_QUEUE_BUFFER_SIZE, [$xcb_queue_buffer_size],
                   [XCB buffer queue size])

dnl check for the sockaddr_un.sun_len member
AC_CHECK_MEMBER([struct sockaddr_un.sun_len],
                [AC_DEFINE(HAVE_SOCKADDR_SUN_LEN,1,[Have the sockaddr_un.sun_len member.])],
                [],
                [ #include <sys/types.h>
                  #include <sys/un.h>
                ])

dnl check for support for Solaris Trusted Extensions
AC_CHECK_HEADERS([tsol/label.h])
AC_CHECK_FUNCS([is_system_labeled])

dnl check for IOV_MAX, and fall back to UIO_MAXIOV on BSDish systems
AC_CHECK_DECL([IOV_MAX], [],
              [AC_CHECK_DECL([UIO_MAXIOV], [AC_DEFINE([IOV_MAX], [UIO_MAXIOV])],
                                           [AC_DEFINE([IOV_MAX], [16], [Define if not provided by <limits.h>])],
                                           [[#include <sys/uio.h>]])],
              [[#include <limits.h>]])

xcbincludedir='${includedir}/xcb'
AC_SUBST(xcbincludedir)

XCB_CHECK_VISIBILITY()

AC_CHECK_FUNC(getaddrinfo, [AC_DEFINE(HAVE_GETADDRINFO, 1, [getaddrinfo() function is available])], )

case $host_os in
        # darwin through Snow Leopard has poll() but can't be used to poll character devices.
        darwin@@<:@@789@@:>@@*|darwin10*) ;;
        darwin*)
                _ac_xorg_macosx_version_min=""
                if echo $CPPFLAGS $CFLAGS | grep -q mmacosx-version-min ; then
                        _ac_xorg_macosx_version_min=`echo $CPPFLAGS $CFLAGS | sed 's/^.*-mmacosx-version-min=\(@@<:@@^ @@:>@@*\).*$/\1/'`
                else
                        _ac_xorg_macosx_version_min=$MACOSX_DEPLOYMENT_TARGET
                fi
                case $_ac_xorg_macosx_version_min in
                        10.@@<:@@0123456@@:>@@|10.@@<:@@0123456@@:>@@.*) ;;
                        *)
                                AC_CHECK_FUNC(poll, [AC_DEFINE(USE_POLL, 1, [poll() function is available])], )
                        ;;
                esac
                unset _ac_xorg_macosx_version_min
                ;;
        *)
                AC_CHECK_FUNC(poll, [AC_DEFINE(USE_POLL, 1, [poll() function is available])], )
        ;;
esac

dnl Link with winsock for socket functions on MinGW
case $host_os in
        *mingw*)
                AC_CHECK_LIB([ws2_32],[main])
                ;;
        *)
                ;;
esac

XCB_EXTENSION(Composite, yes)
XCB_EXTENSION(Damage, yes)
XCB_EXTENSION(DPMS, yes)
XCB_EXTENSION(DRI2, yes)
XCB_EXTENSION(DRI3, $have_sendmsg)
XCB_EXTENSION(GLX, yes)
XCB_EXTENSION(Present, yes)
XCB_EXTENSION(RandR, yes)
XCB_EXTENSION(Record, yes)
XCB_EXTENSION(Render, yes)
XCB_EXTENSION(Resource, yes)
XCB_EXTENSION(Screensaver, yes)
XCB_EXTENSION(Shape, yes)
XCB_EXTENSION(Shm, yes)
XCB_EXTENSION(Sync, yes)
XCB_EXTENSION(Xevie, no)
XCB_EXTENSION(XFixes, yes)
XCB_EXTENSION(XFree86-DRI, yes)
XCB_EXTENSION(Xinerama, yes)
XCB_EXTENSION(XInput, no)
XCB_EXTENSION(XKB, yes)
XCB_EXTENSION(Xprint, no)
XCB_EXTENSION(SELinux, no)
XCB_EXTENSION(XTest, yes)
XCB_EXTENSION(Xv, yes)
XCB_EXTENSION(XvMC, yes)

AC_ARG_WITH(launchd, AS_HELP_STRING([--with-launchd], [Build with support for Apple's launchd (default: auto)]), [LAUNCHD=$withval], [LAUNCHD=auto])
if test "x$LAUNCHD" = xauto; then
        unset LAUNCHD
        AC_CHECK_PROG(LAUNCHD, [launchd], [yes], [no], [$PATH$PATH_SEPARATOR/sbin])
fi

if test "x$LAUNCHD" = xyes ; then
        AC_DEFINE(HAVE_LAUNCHD, 1, [launchd support available])
fi

AC_ARG_WITH(serverside-support, AS_HELP_STRING([--with-serverside-support], [Build with support for server-side usage of xcb. This is still EXPERIMENTAL! ABI/API may change! (default: no)]), [XCB_SERVERSIDE_SUPPORT=$withval], [XCB_SERVERSIDE_SUPPORT=no])

AM_CONDITIONAL(XCB_SERVERSIDE_SUPPORT, test "x$XCB_SERVERSIDE_SUPPORT" = "xyes")

AC_CONFIG_FILES([
Makefile
doc/Makefile
man/Makefile
src/Makefile
tests/Makefile
])

AC_CONFIG_FILES([
xcb.pc
xcb-composite.pc
xcb-damage.pc
xcb-dpms.pc
xcb-dri2.pc
xcb-dri3.pc
xcb-glx.pc
xcb-present.pc
xcb-randr.pc
xcb-record.pc
xcb-render.pc
xcb-res.pc
xcb-screensaver.pc
xcb-shape.pc
xcb-shm.pc
xcb-sync.pc
xcb-xevie.pc
xcb-xf86dri.pc
xcb-xfixes.pc
xcb-xinerama.pc
xcb-xinput.pc
xcb-xkb.pc
xcb-xprint.pc
xcb-xselinux.pc
xcb-xtest.pc
xcb-xv.pc
xcb-xvmc.pc
])

AC_CONFIG_FILES([
doc/xcb.doxygen
])

AC_OUTPUT

dnl Configuration output

echo ""
echo "  Package: ${PACKAGE_NAME} ${PACKAGE_VERSION}"
echo ""
echo "  Configuration"
echo "    XDM support.........: ${have_xdmcp}"
echo "    sendmsg fd passing..: ${have_sendmsg}"
echo "    Build unit tests....: ${HAVE_CHECK}"
echo "      with html results.: ${HTML_CHECK_RESULT}"
echo "    XCB buffer size.....: ${xcb_queue_buffer_size}"
echo ""
echo "  X11 extensions"
echo "    Composite...........: ${BUILD_COMPOSITE}"
echo "    Damage..............: ${BUILD_DAMAGE}"
echo "    Dpms................: ${BUILD_DPMS}"
echo "    Dri2................: ${BUILD_DRI2}"
echo "    Dri3................: ${BUILD_DRI3}"
echo "    Glx.................: ${BUILD_GLX}"
echo "    Randr...............: ${BUILD_RANDR}"
echo "    Record..............: ${BUILD_RECORD}"
echo "    Render..............: ${BUILD_RENDER}"
echo "    Resource............: ${BUILD_RESOURCE}"
echo "    Screensaver.........: ${BUILD_SCREENSAVER}"
echo "    selinux.............: ${BUILD_SELINUX}"
echo "    Shape...............: ${BUILD_SHAPE}"
echo "    Shm.................: ${BUILD_SHM}"
echo "    Sync................: ${BUILD_SYNC}"
echo "    Xevie...............: ${BUILD_XEVIE}"
echo "    Xfixes..............: ${BUILD_XFIXES}"
echo "    Xfree86-dri.........: ${BUILD_XFREE86_DRI}"
echo "    xinerama............: ${BUILD_XINERAMA}"
echo "    xinput..............: ${BUILD_XINPUT}"
echo "    xkb.................: ${BUILD_XKB}"
echo "    xprint..............: ${BUILD_XPRINT}"
echo "    xtest...............: ${BUILD_XTEST}"
echo "    xv..................: ${BUILD_XV}"
echo "    xvmc................: ${BUILD_XVMC}"
echo ""
echo "  Used CFLAGS:"
echo "    CPPFLAGS............: ${CPPFLAGS}"
echo "    CFLAGS..............: ${CFLAGS}"
echo ""
echo "  Installation:"
echo "    Prefix..............: ${prefix}"
echo ""
@


1.11
log
@
Update to libxcb-1.11.1

ok matthieu@@
@
text
@d5 1
a5 1
AC_INIT([libxcb],[1.11.1],
d53 1
a53 1
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.11)
d93 2
a94 8
AC_ARG_ENABLE(sendfds, AS_HELP_STRING([--disable-sendfds], [Support FD passing (default: auto)]),
              [sendfds=$enableval], [sendfds=auto])

case x$sendfds in
xauto)
        AC_SEARCH_LIBS(sendmsg, socket, [sendfds="yes"], [sendfds="no"])
        ;;
esac
d123 1
a123 1
                    ], [sendfds="no"], [
d130 1
a130 1
case x$sendfds in
d209 35
a243 26
XCB_EXTENSION(Composite, "yes")
XCB_EXTENSION(Damage, "yes")
XCB_EXTENSION(DPMS, "yes")
XCB_EXTENSION(DRI2, "yes")
XCB_EXTENSION(DRI3, "$sendfds")
XCB_EXTENSION(GLX, "yes")
XCB_EXTENSION(Present, "yes")
XCB_EXTENSION(RandR, "yes")
XCB_EXTENSION(Record, "yes")
XCB_EXTENSION(Render, "yes")
XCB_EXTENSION(Resource, "yes")
XCB_EXTENSION(Screensaver, "yes")
XCB_EXTENSION(Shape, "yes")
XCB_EXTENSION(Shm, "yes")
XCB_EXTENSION(Sync, "yes")
XCB_EXTENSION(Xevie, "yes")
XCB_EXTENSION(XFixes, "yes")
XCB_EXTENSION(XFree86-DRI, "yes")
XCB_EXTENSION(Xinerama, "yes")
XCB_EXTENSION(XInput, "no")
XCB_EXTENSION(XKB, "yes")
XCB_EXTENSION(Xprint, "yes")
XCB_EXTENSION(SELinux, "no")
XCB_EXTENSION(XTest, "yes")
XCB_EXTENSION(Xv, "yes")
XCB_EXTENSION(XvMC, "yes")
d255 4
d310 1
a310 1
echo "    sendmsg fd passing..: ${sendfds}"
a344 1
echo "    Warning CFLAGS......: ${BASE_CFLAGS}"
@


1.10
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d5 1
a5 1
AC_INIT([libxcb],[1.11],
@


1.9
log
@Update libxcb to version 1.10. Tested by naddy@@ and shadchin@@.
@
text
@d1 1
a1 2
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
d5 3
a7 3
AC_INIT([libxcb],
        1.10,
        [xcb@@lists.freedesktop.org])
d11 1
d15 1
a15 1
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
d22 16
a37 1
AM_PATH_PYTHON([2.6])
a41 6
AC_CONFIG_HEADERS([src/config.h])

AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_CC

d45 4
a48 4
	AC_PATH_PROG(XSLTPROC, xsltproc, no)
	if test x"$XSLTPROC" != xno; then
		HTML_CHECK_RESULT=yes
	fi
d53 1
a53 1
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.10)
d59 11
a69 11
	AC_CHECK_LIB(Xdmcp, XdmcpWrap,
		[
		AC_DEFINE(HASXDMAUTH,1,[Has Wraphelp.c needed for XDM AUTH protocols])
		NEEDED="$NEEDED xdmcp"
		have_xdmcp="yes"
		],
		[
		XDMCP_CFLAGS=
		XDMCP_LIBS=
		], [$XDMCP_LIBS]),
	[AC_MSG_RESULT(no)])
d94 1
a94 1
	      [sendfds=$enableval], [sendfds=auto])
d98 2
a99 2
	AC_SEARCH_LIBS(sendmsg, socket, [sendfds="yes"], [sendfds="no"])
	;;
d146 3
a148 3
	have_win32="yes"
	lt_enable_auto_import="-Wl,--enable-auto-import"
 	;;
d150 2
a151 2
	AC_DEFINE([HAVE_ABSTRACT_SOCKETS], 1, [Define if your platform supports abstract sockets])
	;;
d159 1
a159 1
            AC_HELP_STRING([--with-queue-size=SIZE],
d168 5
a172 5
		[AC_DEFINE(HAVE_SOCKADDR_SUN_LEN,1,[Have the sockaddr_un.sun_len member.])],
		[],
		[ #include <sys/types.h>
		  #include <sys/un.h>
		])
d180 4
a183 4
	      [AC_CHECK_DECL([UIO_MAXIOV], [AC_DEFINE([IOV_MAX], [UIO_MAXIOV])],
					   [AC_DEFINE([IOV_MAX], [16], [Define if not provided by <limits.h>])],
					   [[#include <sys/uio.h>]])],
	      [[#include <limits.h>]])
a187 11
if  test "x$GCC" = xyes ; then
    CWARNFLAGS="-Wall -Wpointer-arith -Wold-style-definition \
		-Wstrict-prototypes -Wmissing-declarations -Wnested-externs"
else
    AC_CHECK_DECL([__SUNPRO_C], [SUNCC="yes"], [SUNCC="no"])
    if test "x$SUNCC" = "xyes"; then
	CWARNFLAGS="-v -fd"
    fi
fi
AC_SUBST(CWARNFLAGS)

a189 2
XCB_CHECK_DOXYGEN()

d193 20
a212 20
	# darwin through Snow Leopard has poll() but can't be used to poll character devices.
	darwin@@<:@@789@@:>@@*|darwin10*) ;;
	darwin*)
		_ac_xorg_macosx_version_min=""
		if echo $CPPFLAGS $CFLAGS | grep -q mmacosx-version-min ; then
			_ac_xorg_macosx_version_min=`echo $CPPFLAGS $CFLAGS | sed 's/^.*-mmacosx-version-min=\(@@<:@@^ @@:>@@*\).*$/\1/'`
		else
			_ac_xorg_macosx_version_min=$MACOSX_DEPLOYMENT_TARGET
		fi
		case $_ac_xorg_macosx_version_min in
			10.@@<:@@0123456@@:>@@|10.@@<:@@0123456@@:>@@.*) ;;
			*)
				AC_CHECK_FUNC(poll, [AC_DEFINE(USE_POLL, 1, [poll() function is available])], )
			;;
		esac
		unset _ac_xorg_macosx_version_min
		;;
	*)
		AC_CHECK_FUNC(poll, [AC_DEFINE(USE_POLL, 1, [poll() function is available])], )
	;;
d244 2
a245 2
	unset LAUNCHD
	AC_CHECK_PROG(LAUNCHD, [launchd], [yes], [no], [$PATH$PATH_SEPARATOR/sbin])
d249 1
a249 1
	AC_DEFINE(HAVE_LAUNCHD, 1, [launchd support available])
d255 1
d338 1
a338 1
echo "    Warning CFLAGS......: ${CWARNFLAGS}"
@


1.8
log
@Update to libxcb 1.9.1.
@
text
@d5 1
a5 1
AC_PREREQ(2.57)
d7 1
a7 1
        1.9.1,
d9 2
d12 5
a21 4
# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

d33 2
a34 6
AC_PATH_PROG(XSLTPROC, xsltproc, no)
if test "$XSLTPROC" = "no"; then
   AC_MSG_ERROR([XCB requires xsltproc.])
fi

HTML_CHECK_RESULT=false
d36 1
d38 1
a38 1
		HTML_CHECK_RESULT=true
d44 1
a44 1
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.7)
d84 49
d180 1
a180 1
    CWARNFLAGS="-Wall -pedantic -Wpointer-arith \
d185 1
a185 1
	CWARNFLAGS="-v"
a191 7
# htmldir is not defined prior to autoconf 2.59c, so on earlier versions
# set an equivalent value.
AC_PREREQ([2.59c], [], [AC_SUBST([htmldir], [m4_ifset([AC_PACKAGE_TARNAME],
	  ['${datadir}/doc/${PACKAGE_TARNAME}'],
	  ['${datadir}/doc/${PACKAGE}'])
])])

d223 1
d225 1
d239 1
a239 1
XCB_EXTENSION(XKB, "no")
d269 1
d271 1
d306 1
d308 1
d316 1
@


1.7
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d7 1
a7 1
        1.9,
@


1.6
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d4 1
d7 1
a7 1
        1.8.1,
d10 6
d119 7
@


1.5
log
@Update to libxcb 1.7
@
text
@d6 1
a6 1
        1.7,
d10 1
d12 1
a12 1
AM_PATH_PYTHON([2.5])
d19 1
d37 1
a37 1
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.6)
d77 2
d80 4
d89 3
d109 4
d138 2
d141 17
a157 2
	# darwin has poll() but can't be used to poll character devices (atleast through SnowLeopard)
	darwin*) ;;
d181 1
d225 1
d269 1
@


1.4
log
@Update to libxcb 1.6. Mostly for new dri2 helper lib, requested by oga@@.
@
text
@d6 1
a6 1
        1.6,
d158 1
a158 1
	AC_CHECK_PROG(LAUNCHD, [launchd], [yes], [no])
d214 25
@


1.3
log
@Update to libxcb 1.4. tested by naddy@@ on a packages bulk build.
@
text
@d6 1
a6 1
        1.4,
d35 1
a35 1
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.5)
d124 2
a125 3
	# darwin has poll() but can't be used to poll character devices
	# darwin10 (SnowLeopard) should be tested as well once released
	darwin7*) ;; darwin8*) ;; darwin9*) ;;
d134 1
d177 1
@


1.2
log
@update to libxcb 1.3
@
text
@d6 1
a6 1
        1.3,
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
        1.2,
d35 1
a35 1
PKG_CHECK_MODULES(XCBPROTO, xcb-proto >= 1.1)
d61 4
d122 9
@


1.1.1.1
log
@import libxcb 1.2
@
text
@@
