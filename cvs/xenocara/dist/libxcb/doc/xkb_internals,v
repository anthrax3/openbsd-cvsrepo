head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.16
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.14
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@
XKB introduces several uncommon data structures:
 - switch allows conditional inclusion of fields
 - several complex objects intermix variable and fixed size fields
 - lists with a variable number of variable size objects

To handle these objects, a number of new functions is generated:
 - _serialize() turns a structured object into a byte stream, 
   (re)ordering or including fields according to the protocol
 - _unserialize() rewrites data from a buffer into a structured object
 - _unpack() expands a buffer representing a switch object into 
   a special structured type, all flags needed to resolve the switch
   expression have to given as parameters
 - _sizeof() calculates the size of a serialized object, often by calling
   _unserialize()/_unpack() internally

The new structured data type for switch is special as it contains fixed 
and variable size fields. Variable size fields can be accessed via pointers. 

If switch appears in a request, an additional set of request helpers is 
generated with the suffix _aux or _aux_(un)checked. While the 'common'
request functions require that switch has been serialized before, the _aux
variants take the structured data type. They are especially designed to 
replace certain functions in xcb-util/aux. 

Accessors for switch members need two parameters, where the first is usually
a pointer to the respective request or reply structure, while the second 
is a pointer to the unpacked switch data structure. 

Functions from the serialize family that take a double pointer can allocate 
memory on their own, which is useful if the size of a buffer has to be 
calculated depending on the data within. These functions call malloc() when 
the double pointer is given as the address of a pointer that has been 
initialized to 0. It is the responsibility of the user to free any allocated
memory. 

Intermixed variable and fixed size fields are an important special case in XKB. 
The current implementation resolves the issue by reordering the fields before
sending them on the wire as well as before returning a reply. That means that 
these objects look like 'common' XCB data types and they can be accessed as such 
(i.e. fixed size fields directly via the structured type and variable size fields
via accessors/iterators).  

In case a list with variable size elements needs to be accessed, it is necessary 
to use iterators. The iterator functions take care of determining the actual 
object size for each element automatically. 

A small and preliminary set of auxiliary functions is available in xkb_util.c 
in the check_xkb module.  
@
