head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_6:1.1.1.1
	XKEYBOARD_CONFIG:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2016.06.28.16.49.25;	author shadchin;	state Exp;
branches;
next	1.8;
commitid	PZRD78W1MdHBYpN6;

1.8
date	2016.02.06.17.50.07;	author shadchin;	state Exp;
branches;
next	1.7;
commitid	RZewVCQw5GNIYVoj;

1.7
date	2014.12.28.16.41.05;	author shadchin;	state Exp;
branches;
next	1.6;
commitid	8s0YnAPxNa8F1PQg;

1.6
date	2014.09.17.16.11.51;	author shadchin;	state Exp;
branches;
next	1.5;
commitid	ZAXjZcLbvfTtLzz3;

1.5
date	2014.05.05.18.05.34;	author shadchin;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.24.16.24.33;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.10.17.08.50;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.10.14.25.57;	author shadchin;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.06.17.52.55;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.06.06.17.52.55;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xkeyboard-config 2.18

ok matthieu@@, test danj@@
@
text
@// The right Alt key (while pressed) chooses the second keyboard group.
partial modifier_keys
xkb_symbols "switch" {
    key <RALT> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// The left Alt key (while pressed) chooses the second keyboard group.
partial modifier_keys
xkb_symbols "lswitch" {
    key <LALT> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// Either Win key (while pressed) chooses the second keyboard group.
partial modifier_keys
xkb_symbols "win_switch" {
    include "group(lwin_switch)"
    include "group(rwin_switch)"
};

// The left Win key (while pressed) chooses the second keyboard group.
// (Using this map, you should declare your keyboard as pc101 or pc102
// instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "lwin_switch" {
    key <LWIN> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// The right Win key (while pressed) chooses the second keyboard group.
// (Using this map, you should declare your keyboard as pc101 or pc102
// instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "rwin_switch" {
    key <RWIN> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// The right Ctrl key (while pressed) chooses the second keyboard group.
// (Needed mainly for the Canadian keyboard.)
partial modifier_keys
xkb_symbols "rctrl_switch" {
    key <RCTL> {
        symbols[Group1] = [ Mode_switch ]
    };
};

// Pressing the right Alt key switches to the next group.
partial modifier_keys
xkb_symbols "toggle" {
    virtual_modifiers AltGr;
    key <RALT> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing both Shift keys switches to the next or previous group
// (depending on which Shift is pressed first).
partial modifier_keys
xkb_symbols "shifts_toggle" {
    key <LFSH> { [ Shift_L, ISO_Prev_Group ] };
    key <RTSH> { [ Shift_R, ISO_Next_Group ] };
};

// Pressing Shift+Caps_Lock switches to the next group.
partial modifier_keys
xkb_symbols "shift_caps_toggle" {
    key <CAPS> { [ Caps_Lock, ISO_Next_Group ] };
};

// Pressing Caps_Lock selects the first group,
// pressing Shift+Caps_Lock selects the last group.
partial modifier_keys
xkb_symbols "shift_caps_switch" {
    key <CAPS> { [ ISO_First_Group, ISO_Last_Group ] };
};

// toggle using win + space as combo
partial modifier_keys
xkb_symbols "win_space_toggle" {
  key <SPCE> {
    type="PC_SUPER_LEVEL2",
    symbols[Group1]= [ space, ISO_Next_Group ],
    symbols[Group2]= [ space, ISO_Next_Group ]
  };
};

// Pressing the left Win key selects the first group,
// pressing the right Win or the Menu key selects the last group.
partial modifier_keys
xkb_symbols "win_menu_switch" {
    virtual_modifiers AltGr;
    key <LWIN> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_First_Group ]
    };
    key <MENU> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Last_Group ]
    };
    key <RWIN> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Last_Group ]
    };
};

// Pressing the left Ctrl key selects the first group,
// pressing the right Ctrl key selects the last group.
partial modifier_keys
xkb_symbols "lctrl_rctrl_switch" {
    virtual_modifiers AltGr;
    key <LCTL> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_First_Group ]
    };
    key <RCTL> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Last_Group ]
    };
};


//
// CTRL-SHIFT toggle section
//
partial modifier_keys
xkb_symbols "lctrl_lshift_toggle" {
    key <LFSH> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Next_Group ]
    };
    key <LCTL> { [ Control_L, ISO_Next_Group ] };
};

partial modifier_keys
xkb_symbols "lctrl_lshift_toggle_rev" {
    key <LFSH> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Prev_Group ]
    };
    key <LCTL> { [ Control_L, ISO_Prev_Group ] };
};

partial modifier_keys
xkb_symbols "rctrl_rshift_toggle" {
    key <RTSH> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Shift_R, ISO_Next_Group ]
    };
    key <RCTL> { [ Control_R, ISO_Next_Group ] };
};

partial modifier_keys
xkb_symbols "ctrl_shift_toggle" {
    include "group(lctrl_lshift_toggle)"
    include "group(rctrl_rshift_toggle)"
};

partial modifier_keys
xkb_symbols "ctrl_shift_toggle_bidir" {
    include "group(lctrl_lshift_toggle_rev)"
    include "group(rctrl_rshift_toggle)"
};


//
// CTRL-ALT toggle section
//
partial modifier_keys
xkb_symbols "lctrl_lalt_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <LCTL> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Control_L, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "lctrl_lalt_toggle_rev" {
    virtual_modifiers Alt;
    key <LALT> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= Alt
    };
    key <LCTL> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Control_L, ISO_Prev_Group ]
    };
};

partial modifier_keys
xkb_symbols "rctrl_ralt_toggle" {
    virtual_modifiers Alt;
    key <RALT> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <RCTL> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Control_R, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "ctrl_alt_toggle" {
    include "group(lctrl_lalt_toggle)"
    include "group(rctrl_ralt_toggle)"
};

partial modifier_keys
xkb_symbols "ctrl_alt_toggle_bidir" {
    include "group(lctrl_lalt_toggle_rev)"
    include "group(rctrl_ralt_toggle)"
};


//
// ALT-SHIFT toggle section
//
partial modifier_keys
xkb_symbols "lalt_lshift_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <LFSH> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "lalt_lshift_toggle_rev" {
    virtual_modifiers Alt;
    key <LALT> {
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= Alt
    };
    key <LFSH> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Prev_Group ]
    };
};

partial modifier_keys
xkb_symbols "ralt_rshift_toggle" {
    virtual_modifiers Alt;
    key <RALT> {
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <RTSH> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Shift_R, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "alt_shift_toggle" {
    include "group(lalt_lshift_toggle)"
    include "group(ralt_rshift_toggle)"
};

partial modifier_keys
xkb_symbols "alt_shift_toggle_bidir" {
    include "group(lalt_lshift_toggle_rev)"
    include "group(ralt_rshift_toggle)"
};


// Pressing the Menu key switches to the next group,
// while Shift+Menu acts as Menu.
partial modifier_keys
xkb_symbols "menu_toggle" {
    key <MENU> { [ ISO_Next_Group, Menu ] };
};

// Pressing the left Win key switches to the next group.
// (Using this map, you should declare your keyboard as
// pc101 or pc102 instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "lwin_toggle" {
    virtual_modifiers AltGr;
    key <LWIN> {
         virtualMods= AltGr,
        symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Pressing the right Win key switches to the next group.
// (Using this map, you should declare your keyboard as
// pc101 or pc102 instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "rwin_toggle" {
    virtual_modifiers AltGr;
    key <RWIN> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Pressing both Ctrl keys switches to the next or previous group
// (depending on which Ctrl is pressed first).
partial modifier_keys
xkb_symbols "ctrls_toggle" {
    virtual_modifiers LControl, RControl;
    key <LCTL> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= LControl
    };
    key <RCTL> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= RControl
    };
};

// Pressing both Alt keys switches to the next or previous group
// (depending on which Alt is pressed first).
partial modifier_keys
xkb_symbols "alts_toggle" {
    virtual_modifiers LAlt, RAlt;
    key <LALT> {
        type[Group1]="PC_RALT_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= LAlt
    };
    key <RALT> {
        type[Group1]="PC_LALT_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= RAlt
    };
};

// Pressing the left Shift key switches to the next group.
partial modifier_keys
xkb_symbols "lshift_toggle" {
    virtual_modifiers AltGr;
    key <LFSH> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the right Shift key switches to the next group.
partial modifier_keys
xkb_symbols "rshift_toggle" {
    virtual_modifiers AltGr;
    key <RTSH> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the left Alt key switches to the next group.
partial modifier_keys
xkb_symbols "lalt_toggle" {
    virtual_modifiers AltGr;
    key <LALT> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the left Ctrl key switches to the next group.
partial modifier_keys
xkb_symbols "lctrl_toggle" {
    virtual_modifiers AltGr;
    key <LCTL> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the right Ctrl key switches to the next group.
partial modifier_keys
xkb_symbols "rctrl_toggle" {
    virtual_modifiers AltGr;
    key <RCTL> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing Alt+Caps_Lock switches to the next group,
// pressing Caps_Lock toggles CapsLock.
partial modifier_keys
xkb_symbols "alt_caps_toggle" {
    key <CAPS> {
       type="PC_ALT_LEVEL2",
       symbols[Group1] = [ Caps_Lock, ISO_Next_Group ]
    };
};

hidden partial modifier_keys
xkb_symbols "olpc" {
    key <I219> { [ ISO_Next_Group, ISO_Prev_Group ] };
};

partial modifier_keys
xkb_symbols "alt_space_toggle" {
    key <SPCE> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ space, ISO_Next_Group ]
    };
};

// Pressing the Scroll Lock key switches to the next group,
partial modifier_keys
xkb_symbols "sclk_toggle" {
    virtual_modifiers AltGr;
    key <SCLK> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Control_L+Win_L selects the first group (presumably Lat),
// Control_R+Menu selects the second group (presumably Rus).
partial modifier_keys
xkb_symbols "lctrl_lwin_rctrl_menu" {
    key <LWIN> {
        type[Group1] = "PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Super_L, ISO_First_Group ]
    };
    key <MENU> {
        type[Group1] = "PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Menu, ISO_Last_Group ]
    };
};

// Control_L+Win_L toggles groups.
partial modifier_keys
xkb_symbols "lctrl_lwin_toggle" {
    key <LWIN> {
        type[ Group1 ]    = "PC_CONTROL_LEVEL2",
        symbols[ Group1 ] = [ Super_L,    ISO_Next_Group ]
    };
};

@


1.8
log
@Update to xkeyboard-config 2.17

ok matthieu@@
@
text
@d92 3
a94 2
    type[Group1]="PC_SUPER_LEVEL2",
    symbols[Group1]= [ space, ISO_Next_Group ]
d450 10
@


1.7
log
@Update to xkeyboard-config 2.13.

ok matthieu@@
@
text
@d325 1
a325 1
        type[Group1]="PC_RCONTROL_LEVEL2",
d330 1
a330 1
        type[Group1]="PC_LCONTROL_LEVEL2",
@


1.6
log
@Update to xkeyboard-config 2.12.
plus fix for fr(oss) from Daniel Jakots <vigdis at chown dot me>

ok matthieu@@
@
text
@d413 1
a413 1
partial hidden modifier_keys
@


1.5
log
@Update to xkeyboard-config 2.11.

ok matthieu@@
@
text
@d88 9
@


1.4
log
@Update to xkeyboard-config 2.5.

ok matthieu@@
@
text
@d1 2
a2 4
// using the group(switch) map, the right alt key temporarily chooses 
// the second keyboard group (until it is released).
//
partial modifier_keys 
d4 3
a6 3
    key <RALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
d10 2
a11 4
// using the group(lswitch) map, the left alt key temporarily chooses
// the second keyboard group (until it is released).
//
partial modifier_keys 
d13 3
a15 3
    key <LALT>	{ 	
	symbols[Group1]= [	Mode_switch, Multi_key 	],
	virtualMods= AltGr
d19 1
a19 5

// using the group(win_switch) map, both Windows'logo keys temporarily
// choose the second keyboard group (until release).  If you use this
// map, you would declare you keyboard as pc101 or pc102 instead of
// pc104 or pc105.
d26 3
a28 4
// using the group(lwin_switch) map, the left Windows' logo key
// temporarily chooses the second keyboard group (until it is
// released).  If you use this map, you would declare you keyboard as
// pc101 or pc102 instead of pc104 or pc105.
d31 3
a33 3
  key <LWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
d37 3
a39 4
// using the group(rwin_switch) map, the right Windows' logo key
// temporarily chooses the second keyboard group (until it is
// released).  If you use this map, you would declare you keyboard as
// pc101 or pc102 instead of pc104 or pc105.
d42 3
a44 3
  key <RWIN> {
    symbols[Group1] = [ Mode_switch, Multi_key ],
    virtualMods= AltGr
d48 2
a49 2
// Right Ctrl key temporary chooses the second keyboard group.
// Needed mainly for Canadian keyboard
d52 2
a53 2
    key <RCTL>  {
        symbols[Group1]= [ Mode_switch ]
d57 2
a58 3
// using the group(toggle) map, pressing the right alt key switches to
// the next sequential group (until the next explicit group change).
partial modifier_keys 
d61 3
a63 3
    key <RALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
d67 3
a69 5
// using the group(shifts_toggle) map, pressing both shift keys together
// locks the next or previous sequential keyboard group 
// (depending on which shift is pressed first - right or left, 
// correspongingly)
partial modifier_keys 
d71 2
a72 2
    key <LFSH>	{	[	Shift_L,	ISO_Prev_Group ]	};
    key <RTSH>	{	[	Shift_R,	ISO_Next_Group ]	};
d75 1
a75 2
// using the group(shift_caps_toggle) map, pressing:
//     Shift+Caps Lock toggles group
d78 1
a78 1
    key	<CAPS> {	[  Caps_Lock,		ISO_Next_Group	]	};
d81 2
a82 3
// using the group(shift_caps_switch) map, pressing:
// Caps Lock selects the first group
// Shift+Caps Lock selects the last group
d88 2
a89 3
// using the group(win_menu_switch) map, pressing:
// LWIN selects the first group
// RWIN or MENU selects the last group
d107 2
a108 3
// using the group(lctrl_rctrl_switch) map, pressing:
// Left Control selects the first group
// Right Control selects the last group
d126 1
a126 1
partial modifier_keys 
d130 1
a130 1
        symbols[Group1]= [ Shift_L, ISO_Next_Group ]
d135 1
a135 1
partial modifier_keys 
d139 1
a139 1
        symbols[Group1]= [ Shift_L, ISO_Prev_Group ]
d148 1
a148 1
        symbols[Group1]= [ Shift_R, ISO_Next_Group ]
d153 1
a153 1
partial modifier_keys 
d159 1
a159 1
partial modifier_keys 
d174 1
a174 1
        symbols[Group1]= [ NoSymbol,    ISO_Next_Group ],
d179 1
a179 1
        symbols[Group1]= [ Control_L,   ISO_Next_Group ]
d188 1
a188 1
        symbols[Group1]= [ NoSymbol,    ISO_Prev_Group ],
d193 1
a193 1
        symbols[Group1]= [ Control_L,   ISO_Prev_Group ]
d202 1
a202 1
        symbols[Group1]= [ NoSymbol,    ISO_Next_Group ],
d207 1
a207 1
        symbols[Group1]= [ Control_R,   ISO_Next_Group ]
d211 1
a211 1
partial modifier_keys 
d217 1
a217 1
partial modifier_keys 
d231 1
a231 1
        symbols[Group1]= [ NoSymbol,    ISO_Next_Group ],
d236 1
a236 1
        symbols[Group1]= [ Shift_L,     ISO_Next_Group ]
d244 1
a244 1
        symbols[Group1]= [ NoSymbol,    ISO_Prev_Group ],
d249 1
a249 1
        symbols[Group1]= [ Shift_L,     ISO_Prev_Group ]
d257 1
a257 1
        symbols[Group1]= [ NoSymbol,    ISO_Next_Group ],
d262 1
a262 1
        symbols[Group1]= [ Shift_R,     ISO_Next_Group ]
d266 1
a266 1
partial modifier_keys 
d272 1
a272 1
partial modifier_keys 
d279 2
a280 3
// using the group(menu_toggle) map, pressing:
//     Menu key toggles groups
//     Shift+Menu acts as Menu
d283 1
a283 1
    key	<MENU> {	[  ISO_Next_Group,	 Menu	]	};
d286 3
a288 3
// using the group(lwin_toggle) map, pressing the left Windows' logo key
// toggles groups.  If you use this map, you would declare you keyboard
// as pc101 or pc102 instead of pc104 or pc105.
d291 4
a294 4
  virtual_modifiers AltGr;
  key <LWIN> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
d298 3
a300 3
// using the group(rwin_toggle) map, pressing the right Windows' logo key
// toggles groups.  If you use this map, you would declare you keyboard
// as pc101 or pc102 instead of pc104 or pc105.
d303 4
a306 4
  virtual_modifiers AltGr;
  key <RWIN> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
d310 2
a311 1
// Both Ctrls pressed together toggle group
d314 1
a314 1
  virtual_modifiers LControl, RControl;
d316 3
a318 3
	type[Group1]="PC_RCONTROL_LEVEL2",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= LControl
d321 3
a323 3
	type[Group1]="PC_LCONTROL_LEVEL2",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= RControl
d327 2
a328 1
// Both Alts pressed together toggle group
d331 1
a331 1
  virtual_modifiers LAlt, RAlt;
d333 3
a335 3
	type[Group1]="PC_RALT_LEVEL2",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= LAlt
d338 3
a340 3
	type[Group1]="PC_LALT_LEVEL2",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= RAlt
d344 1
a344 1
// Left Shift key toggles group
d347 4
a350 4
  virtual_modifiers AltGr;
    key <LFSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
d354 1
a354 1
// Right Shift key toggles group
d357 4
a360 4
  virtual_modifiers AltGr;
    key <RTSH>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
d364 1
a364 1
// Left Alt key toggles group
d367 4
a370 4
  virtual_modifiers AltGr;
    key <LALT>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
d374 1
a374 1
// Left Ctrl key toggles group
d377 4
a380 4
  virtual_modifiers AltGr;
    key <LCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
d384 1
a384 1
// Right Ctrl key toggles group
d387 4
a390 4
  virtual_modifiers AltGr;
    key <RCTL>	{	
	symbols[Group1]= [	ISO_Next_Group	],
	virtualMods= AltGr
d394 2
a395 3
// using the group(alt_caps_toggle) map, pressing:
//     Alt+Caps Lock toggles group
//     Caps Lock toggles caps lock
d398 1
a398 1
    key        <CAPS> {
d400 1
a400 1
       symbols[Group1]= [  Caps_Lock,  ISO_Next_Group]
d406 1
a406 1
  key <I219>  { [ ISO_Next_Group, ISO_Prev_Group ] };
d412 2
a413 2
    type[Group1]="PC_ALT_LEVEL2",
    symbols[Group1]= [ space,   ISO_Next_Group ]
d417 1
a417 2
// using the group(sclk_toggle) map, pressing the Scroll Lock key
// toggles groups.
d420 4
a423 4
  virtual_modifiers AltGr;
  key <SCLK> {
    virtualMods= AltGr,
    symbols[Group1] = [ ISO_Next_Group ]
d427 2
a428 2
// Control_L+Win_L locks the first group (presumably Lat).
// Control_R+Menu locks the second group (presumably Rus).
d432 2
a433 2
        type[ Group1 ]    = "PC_CONTROL_LEVEL2",
        symbols[ Group1 ] = [ Super_L,    ISO_First_Group ]
d436 2
a437 2
        type[ Group1 ]    = "PC_CONTROL_LEVEL2",
        symbols[ Group1 ] = [ Menu,       ISO_Last_Group ]
d439 1
a439 1
}; // lctrl_lwin_rctrl_menu
@


1.3
log
@Update xkeyboard-config to 2.2.1
* New structure of descriptions, massive changes in user-visible strings.
Special release for GNOME 3.

ok shadchin@@ matthieu@@
@
text
@a87 45
// using the group(ctrl_shift_toggle) map, pressing:
//     Control_L+Shift_L locks the previous group
//     Control_R+Shift_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "ctrl_shift_toggle" {
    key <LFSH> {
	type[Group1]="PC_CONTROL_LEVEL2",
	symbols[Group1]= [ Shift_L,	ISO_Prev_Group ]
    };
    key <RTSH> {
	type[Group1]="PC_CONTROL_LEVEL2",
	symbols[Group1]= [ Shift_R,	ISO_Next_Group ]
    };
    key <LCTL>	{	[	Control_L,	ISO_Prev_Group ]	};
    key <RCTL>	{	[	Control_R,	ISO_Next_Group ]	};
};

// using the group(lctrl_lshift_toggle) map, pressing:
//     Control_L+Shift_L locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys 
xkb_symbols "lctrl_lshift_toggle" {
    key <LFSH> {
	type[Group1]="PC_CONTROL_LEVEL2",
	symbols[Group1]= [ Shift_L,	ISO_Next_Group ]
    };
    key <LCTL>	{	[	Control_L,	ISO_Next_Group ]	};
};

// using the group(rctrl_rshift_toggle) map, pressing:
//     Control_R+Shift_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
partial modifier_keys
xkb_symbols "rctrl_rshift_toggle" {
    key <RTSH> {
    type[Group1]="PC_CONTROL_LEVEL2",
    symbols[Group1]= [ Shift_R, ISO_Next_Group ]
    };
    key <RCTL>  {   [   Control_R,  ISO_Next_Group ]    };
};

d139 13
a151 5
// using the group(ctrl_alt_toggle) map, pressing:
//     Control_L+Alt_L locks the previous group
//     Control_R+Alt_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
d153 35
a187 1
xkb_symbols "ctrl_alt_toggle" {
d190 7
a196 3
	type[Group1]="PC_CONTROL_LEVEL2",
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
d198 9
a206 4
    key <RALT> {
	type[Group1]="PC_CONTROL_LEVEL2",
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
d209 12
a220 2
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Control_L,	ISO_Prev_Group ]
d223 2
a224 2
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Control_R,	ISO_Next_Group ]
a227 5
// using the group(alt_shift_toggle) map, pressing:
//     Shift_L+Alt_L locks the previous group
//     Shift_R+Alt_R locks the next group
// If you have two groups and group wrap is enabled, the effect is
// indistinguishable.
d229 17
a245 1
xkb_symbols "alt_shift_toggle" {
d248 6
a253 2
	symbols[Group1]= [ NoSymbol,	ISO_Prev_Group ],
	virtualMods= Alt
d255 8
a262 3
    key <RALT> {
	symbols[Group1]= [ NoSymbol,	ISO_Next_Group ],
	virtualMods= Alt
d265 11
a275 2
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Shift_L,	ISO_Prev_Group ]
d278 2
a279 2
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Shift_R,	ISO_Next_Group ]
d282 13
@


1.2
log
@Update xkeyboard-config to 2.0
ok matthieu
@
text
@a0 2
// $XKeyboardConfig$
// $Xorg: group,v 1.3 2000/08/17 19:54:43 cpqbld Exp $
a3 1
// $XFree86: xc/programs/xkbcomp/symbols/group,v 3.9 2003/12/30 13:26:25 pascal Exp $
d387 13
@


1.1
log
@Initial revision
@
text
@d123 13
d166 16
@


1.1.1.1
log
@Import xkeyboard-config version 1.6.
@
text
@@
