head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	v2_10_91:1.1.1.1
	fontconfig:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.08.19.10.11.17;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	XM7rWoUdXAgEj2Jj;

1.3
date	2016.08.09.18.57.42;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	70exqceQ0fgX8SLO;

1.2
date	2014.05.18.10.33.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.09.13.34.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.09.13.34.31;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to fontconfig 2.12.4. No API change.
@
text
@Fontconfig Developers Reference, Version 2.12.4

   Copyright Â© 2002 Keith Packard

   Permission to use, copy, modify, distribute, and sell this
   software and its documentation for any purpose is hereby
   granted without fee, provided that the above copyright notice
   appear in all copies and that both that copyright notice and
   this permission notice appear in supporting documentation, and
   that the name of the author(s) not be used in advertising or
   publicity pertaining to distribution of the software without
   specific, written prior permission. The authors make no
   representations about the suitability of this software for any
   purpose. It is provided "as is" without express or implied
   warranty.

   THE AUTHOR(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
   SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
   AND FITNESS, IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY
   SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
   ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
   THIS SOFTWARE.
           _______________________________________________

   Table of Contents
   DESCRIPTION
   FUNCTIONAL OVERVIEW
   Datatypes
   FUNCTIONS

DESCRIPTION

   Fontconfig is a library designed to provide system-wide font
   configuration, customization and application access.
     __________________________________________________________

FUNCTIONAL OVERVIEW

   Fontconfig contains two essential modules, the configuration
   module which builds an internal configuration from XML files
   and the matching module which accepts font patterns and returns
   the nearest matching font.
     __________________________________________________________

FONT CONFIGURATION

   The configuration module consists of the FcConfig datatype,
   libexpat and FcConfigParse which walks over an XML tree and
   amends a configuration with data found within. From an external
   perspective, configuration of the library consists of
   generating a valid XML tree and feeding that to FcConfigParse.
   The only other mechanism provided to applications for changing
   the running configuration is to add fonts and directories to
   the list of application-provided font files.

   The intent is to make font configurations relatively static,
   and shared by as many applications as possible. It is hoped
   that this will lead to more stable font selection when passing
   names from one application to another. XML was chosen as a
   configuration file format because it provides a format which is
   easy for external agents to edit while retaining the correct
   structure and syntax.

   Font configuration is separate from font matching; applications
   needing to do their own matching can access the available fonts
   from the library and perform private matching. The intent is to
   permit applications to pick and choose appropriate
   functionality from the library instead of forcing them to
   choose between this library and a private configuration
   mechanism. The hope is that this will ensure that configuration
   of fonts for all applications can be centralized in one place.
   Centralizing font configuration will simplify and regularize
   font installation and customization.
     __________________________________________________________

FONT PROPERTIES

   While font patterns may contain essentially any properties,
   there are some well known properties with associated types.
   Fontconfig uses some of these properties for font matching and
   font completion. Others are provided as a convenience for the
   application's rendering mechanism.
                 Property Definitions

    Property       C Preprocessor Symbol  Type    Description
    ----------------------------------------------------
    family         FC_FAMILY              String  Font family names
    familylang     FC_FAMILYLANG          String  Language corresponding
 to
                                                  each family name
    style          FC_STYLE               String  Font style. Overrides
weight
                                                  and slant
    stylelang      FC_STYLELANG           String  Language corresponding
 to
                                                  each style name
    fullname       FC_FULLNAME            String  Font face full name wh
ere
                                                  different from family
and
                                                  family + style
    fullnamelang   FC_FULLNAMELANG        String  Language corresponding
 to
                                                  each fullname
    slant          FC_SLANT               Int     Italic, oblique or rom
an
    weight         FC_WEIGHT              Int     Light, medium, demibol
d,
                                                  bold or black
    size           FC_SIZE                Double  Point size
    width          FC_WIDTH               Int     Condensed, normal or e
xpanded
    aspect         FC_ASPECT              Double  Stretches glyphs horiz
ontally
                                                  before hinting
    pixelsize      FC_PIXEL_SIZE          Double  Pixel size
    spacing        FC_SPACING             Int     Proportional, dual-wid
th,
                                                  monospace or charcell
    foundry        FC_FOUNDRY             String  Font foundry name
    antialias      FC_ANTIALIAS           Bool    Whether glyphs can be
                                                  antialiased
    hinting        FC_HINTING             Bool    Whether the rasterizer
 should
                                                  use hinting
    hintstyle      FC_HINT_STYLE          Int     Automatic hinting styl
e
    verticallayout FC_VERTICAL_LAYOUT     Bool    Use vertical layout
    autohint       FC_AUTOHINT            Bool    Use autohinter instead
 of
                                                  normal hinter
    globaladvance  FC_GLOBAL_ADVANCE      Bool    Use font global advanc
e data (deprecated)
    file           FC_FILE                String  The filename holding t
he font
    index          FC_INDEX               Int     The index of the font
within
                                                  the file
    ftface         FC_FT_FACE             FT_Face Use the specified Free
Type
                                                  face object
    rasterizer     FC_RASTERIZER          String  Which rasterizer is in
 use (deprecated)
    outline        FC_OUTLINE             Bool    Whether the glyphs are
 outlines
    scalable       FC_SCALABLE            Bool    Whether glyphs can be
scaled
    scale          FC_SCALE               Double  Scale factor for point
->pixel
                                                  conversions (deprecate
d)
    symbol         FC_SYMBOL              Bool    Whether font uses MS s
ymbol-font encoding
    color          FC_COLOR               Bool    Whether any glyphs hav
e color
    dpi            FC_DPI                 Double  Target dots per inch
    rgba           FC_RGBA                Int     unknown, rgb, bgr, vrg
b,
                                                  vbgr, none - subpixel
geometry
    lcdfilter      FC_LCD_FILTER          Int     Type of LCD filter
    minspace       FC_MINSPACE            Bool    Eliminate leading from
 line
                                                  spacing
    charset        FC_CHARSET             CharSet Unicode chars encoded
by
                                                  the font
    lang           FC_LANG                LangSet Set of RFC-3066-style
                                                  languages this font su
pports
    fontversion    FC_FONTVERSION         Int     Version number of the
font
    capability     FC_CAPABILITY          String  List of layout capabil
ities in
                                                  the font
    fontformat     FC_FONTFORMAT          String  String name of the fon
t format
    embolden       FC_EMBOLDEN            Bool    Rasterizer should
                                                  synthetically embolden
 the font
    embeddedbitmap FC_EMBEDDED_BITMAP     Bool    Use the embedded bitma
p instead
                                                  of the outline
    decorative     FC_DECORATIVE          Bool    Whether the style is a
 decorative
                                                  variant
    fontfeatures   FC_FONT_FEATURES       String  List of extra feature
tags in
                                                  OpenType to be enabled
    namelang       FC_NAMELANG            String  Language name to be us
ed for the
                                                  default value of famil
ylang,
                                                  stylelang and fullname
lang
    prgname        FC_PRGNAME             String  Name of the running pr
ogram
    hash           FC_HASH                String  SHA256 hash value of t
he font data
                                                  with "sha256:" prefix
(deprecated)
    postscriptname FC_POSTSCRIPT_NAME     String  Font name in PostScrip
t
     __________________________________________________________

Datatypes

   Fontconfig uses abstract data types to hide internal
   implementation details for most data structures. A few
   structures are exposed where appropriate.
     __________________________________________________________

FcChar8, FcChar16, FcChar32, FcBool

   These are primitive data types; the FcChar* types hold
   precisely the number of bits stated (if supported by the C
   implementation). FcBool holds one of two C preprocessor
   symbols: FcFalse or FcTrue.
     __________________________________________________________

FcMatrix

   An FcMatrix holds an affine transformation, usually used to
   reshape glyphs. A small set of matrix operations are provided
   to manipulate these.
        typedef struct _FcMatrix {
                double xx, xy, yx, yy;
        } FcMatrix;
     __________________________________________________________

FcCharSet

   An FcCharSet is an abstract type that holds the set of encoded
   Unicode chars in a font. Operations to build and compare these
   sets are provided.
     __________________________________________________________

FcLangSet

   An FcLangSet is an abstract type that holds the set of
   languages supported by a font. Operations to build and compare
   these sets are provided. These are computed for a font based on
   orthographic information built into the fontconfig library.
   Fontconfig has orthographies for all of the ISO 639-1 languages
   except for MS, NA, PA, PS, QU, RN, RW, SD, SG, SN, SU and ZA.
   If you have orthographic information for any of these
   languages, please submit them.
     __________________________________________________________

FcLangResult

   An FcLangResult is an enumeration used to return the results of
   comparing two language strings or FcLangSet objects.
   FcLangEqual means the objects match language and territory.
   FcLangDifferentTerritory means the objects match in language
   but differ in territory. FcLangDifferentLang means the objects
   differ in language.
     __________________________________________________________

FcType

   Tags the kind of data stored in an FcValue.
     __________________________________________________________

FcValue

   An FcValue object holds a single value with one of a number of
   different types. The 'type' tag indicates which member is
   valid.
        typedef struct _FcValue {
                FcType type;
                union {
                        const FcChar8 *s;
                        int i;
                        FcBool b;
                        double d;
                        const FcMatrix *m;
                        const FcCharSet *c;
                        void *f;
                        const FcLangSet *l;
                } u;
        } FcValue;

                  FcValue Members

        Type            Union member    Datatype
        --------------------------------
        FcTypeVoid      (none)          (none)
        FcTypeInteger   i               int
        FcTypeDouble    d               double
        FcTypeString    s               FcChar8 *
        FcTypeBool      b               b
        FcTypeMatrix    m               FcMatrix *
        FcTypeCharSet   c               FcCharSet *
        FcTypeFTFace    f               void * (FT_Face)
        FcTypeLangSet   l               FcLangSet *
     __________________________________________________________

FcPattern

   holds a set of names with associated value lists; each name
   refers to a property of a font. FcPatterns are used as inputs
   to the matching code as well as holding information about
   specific fonts. Each property can hold one or more values;
   conventionally all of the same type, although the interface
   doesn't demand that.
     __________________________________________________________

FcFontSet

        typedef struct _FcFontSet {
                int nfont;
                int sfont;
                FcPattern **fonts;
        } FcFontSet;

   An FcFontSet contains a list of FcPatterns. Internally
   fontconfig uses this data structure to hold sets of fonts.
   Externally, fontconfig returns the results of listing fonts in
   this format. 'nfont' holds the number of patterns in the
   'fonts' array; 'sfont' is used to indicate the size of that
   array.
     __________________________________________________________

FcStrSet, FcStrList

   FcStrSet holds a list of strings that can be appended to and
   enumerated. Its unique characteristic is that the enumeration
   works even while strings are appended during enumeration.
   FcStrList is used during enumeration to safely and correctly
   walk the list of strings even while that list is edited in the
   middle of enumeration.
     __________________________________________________________

FcObjectSet

        typedef struct _FcObjectSet {
                int nobject;
                int sobject;
                const char **objects;
        } FcObjectSet;

   holds a set of names and is used to specify which fields from
   fonts are placed in the the list of returned patterns when
   listing fonts.
     __________________________________________________________

FcObjectType

        typedef struct _FcObjectType {
                const char *object;
                FcType type;
        } FcObjectType;

   marks the type of a pattern element generated when parsing font
   names. Applications can add new object types so that font names
   may contain the new elements.
     __________________________________________________________

FcConstant

        typedef struct _FcConstant {
            const FcChar8 *name;
            const char *object;
            int value;
        } FcConstant;

   Provides for symbolic constants for new pattern elements. When
   'name' is seen in a font name, an 'object' element is created
   with value 'value'.
     __________________________________________________________

FcBlanks

   holds a list of Unicode chars which are expected to be blank;
   unexpectedly blank chars are assumed to be invalid and are
   elided from the charset associated with the font.
     __________________________________________________________

FcFileCache

   holds the per-user cache information for use while loading the
   font database. This is built automatically for the current
   configuration when that is loaded. Applications must always
   pass '0' when one is requested.
     __________________________________________________________

FcConfig

   holds a complete configuration of the library; there is one
   default configuration, other can be constructed from XML data
   structures. All public entry points that need global data can
   take an optional FcConfig* argument; passing 0 uses the default
   configuration. FcConfig objects hold two sets of fonts, the
   first contains those specified by the configuration, the second
   set holds those added by the application at run-time.
   Interfaces that need to reference a particular set use one of
   the FcSetName enumerated values.
     __________________________________________________________

FcSetName

   Specifies one of the two sets of fonts available in a
   configuration; FcSetSystem for those fonts specified in the
   configuration and FcSetApplication which holds fonts provided
   by the application.
     __________________________________________________________

FcResult

   Used as a return type for functions manipulating FcPattern
   objects.
      FcResult Values
        Result Code             Meaning
        -----------------------------------------------------------
        FcResultMatch           Object exists with the specified ID
        FcResultNoMatch         Object doesn't exist at all
        FcResultTypeMismatch    Object exists, but the type doesn't matc
h
        FcResultNoId            Object exists, but has fewer values
                                than specified
        FcResultOutOfMemory     malloc failed
     __________________________________________________________

FcAtomic

   Used for locking access to configuration files. Provides a safe
   way to update configuration files.
     __________________________________________________________

FcCache

   Holds information about the fonts contained in a single
   directory. Normal applications need not worry about this as
   caches for font access are automatically managed by the
   library. Applications dealing with cache management may want to
   use some of these objects in their work, however the included
   'fc-cache' program generally suffices for all of that.
     __________________________________________________________

FUNCTIONS

   These are grouped by functionality, often using the main data
   type being manipulated.
     __________________________________________________________

Initialization

   Table of Contents
   FcInitLoadConfig -- load configuration
   FcInitLoadConfigAndFonts -- load configuration and font data
   FcInit -- initialize fontconfig library
   FcFini -- finalize fontconfig library
   FcGetVersion -- library version number
   FcInitReinitialize -- re-initialize library
   FcInitBringUptoDate -- reload configuration files if needed

   These functions provide some control over how the library is
   initialized.

FcInitLoadConfig

Name

   FcInitLoadConfig -- load configuration

Synopsis

#include <fontconfig/fontconfig.h>

   FcConfig * FcInitLoadConfig(void);

Description

   Loads the default configuration file and returns the resulting
   configuration. Does not load any font information.

FcInitLoadConfigAndFonts

Name

   FcInitLoadConfigAndFonts -- load configuration and font data

Synopsis

#include <fontconfig/fontconfig.h>

   FcConfig * FcInitLoadConfigAndFonts(void);

Description

   Loads the default configuration file and builds information
   about the available fonts. Returns the resulting configuration.

FcInit

Name

   FcInit -- initialize fontconfig library

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcInit(void);

Description

   Loads the default configuration file and the fonts referenced
   therein and sets the default configuration to that result.
   Returns whether this process succeeded or not. If the default
   configuration has already been loaded, this routine does
   nothing and returns FcTrue.

FcFini

Name

   FcFini -- finalize fontconfig library

Synopsis

#include <fontconfig/fontconfig.h>

   void FcFini(void);

Description

   Frees all data structures allocated by previous calls to
   fontconfig functions. Fontconfig returns to an uninitialized
   state, requiring a new call to one of the FcInit functions
   before any other fontconfig function may be called.

FcGetVersion

Name

   FcGetVersion -- library version number

Synopsis

#include <fontconfig/fontconfig.h>

   int FcGetVersion(void);

Description

   Returns the version number of the library.

FcInitReinitialize

Name

   FcInitReinitialize -- re-initialize library

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcInitReinitialize(void);

Description

   Forces the default configuration file to be reloaded and resets
   the default configuration. Returns FcFalse if the configuration
   cannot be reloaded (due to configuration file errors,
   allocation failures or other issues) and leaves the existing
   configuration unchanged. Otherwise returns FcTrue.

FcInitBringUptoDate

Name

   FcInitBringUptoDate -- reload configuration files if needed

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcInitBringUptoDate(void);

Description

   Checks the rescan interval in the default configuration,
   checking the configuration if the interval has passed and
   reloading the configuration if when any changes are detected.
   Returns FcFalse if the configuration cannot be reloaded (see
   FcInitReinitialize). Otherwise returns FcTrue.
     __________________________________________________________

FcPattern

   Table of Contents
   FcPatternCreate -- Create a pattern
   FcPatternDuplicate -- Copy a pattern
   FcPatternReference -- Increment pattern reference count
   FcPatternDestroy -- Destroy a pattern
   FcPatternEqual -- Compare patterns
   FcPatternEqualSubset -- Compare portions of patterns
   FcPatternFilter -- Filter the objects of pattern
   FcPatternHash -- Compute a pattern hash value
   FcPatternAdd -- Add a value to a pattern
   FcPatternAddWeak -- Add a value to a pattern with weak binding
   FcPatternAdd-Type -- Add a typed value to a pattern
   FcPatternGet -- Return a value from a pattern
   FcPatternGet-Type -- Return a typed value from a pattern
   FcPatternBuild -- Create patterns from arguments
   FcPatternDel -- Delete a property from a pattern
   FcPatternRemove -- Remove one object of the specified type from
          the pattern

   FcPatternPrint -- Print a pattern for debugging
   FcDefaultSubstitute -- Perform default substitutions in a
          pattern

   FcNameParse -- Parse a pattern string
   FcNameUnparse -- Convert a pattern back into a string that can
          be parsed

   FcPatternFormat -- Format a pattern into a string according to
          a format specifier

   An FcPattern is an opaque type that holds both patterns to
   match against the available fonts, as well as the information
   about each font.

FcPatternCreate

Name

   FcPatternCreate -- Create a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcPatternCreate(void);

Description

   Creates a pattern with no properties; used to build patterns
   from scratch.

FcPatternDuplicate

Name

   FcPatternDuplicate -- Copy a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcPatternDuplicate(const FcPattern *p);

Description

   Copy a pattern, returning a new pattern that matches p. Each
   pattern may be modified without affecting the other.

FcPatternReference

Name

   FcPatternReference -- Increment pattern reference count

Synopsis

#include <fontconfig/fontconfig.h>

   void FcPatternReference(FcPattern *p);

Description

   Add another reference to p. Patterns are freed only when the
   reference count reaches zero.

FcPatternDestroy

Name

   FcPatternDestroy -- Destroy a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   void FcPatternDestroy(FcPattern *p);

Description

   Decrement the pattern reference count. If all references are
   gone, destroys the pattern, in the process destroying all
   related values.

FcPatternEqual

Name

   FcPatternEqual -- Compare patterns

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternEqual(const FcPattern *pa, const FcPattern
   *pb);

Description

   Returns whether pa and pb are exactly alike.

FcPatternEqualSubset

Name

   FcPatternEqualSubset -- Compare portions of patterns

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternEqualSubset(const FcPattern *pa, const
   FcPattern *pb, const FcObjectSet *os);

Description

   Returns whether pa and pb have exactly the same values for all
   of the objects in os.

FcPatternFilter

Name

   FcPatternFilter -- Filter the objects of pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcPatternFilter(FcPattern *p, const FcObjectSet *);

Description

   Returns a new pattern that only has those objects from p that
   are in os. If os is NULL, a duplicate of p is returned.

FcPatternHash

Name

   FcPatternHash -- Compute a pattern hash value

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcPatternHash(const FcPattern *p);

Description

   Returns a 32-bit number which is the same for any two patterns
   which are equal.

FcPatternAdd

Name

   FcPatternAdd -- Add a value to a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternAdd(FcPattern *p, const char *object, FcValue
   value, FcBool append);

Description

   Adds a single value to the list of values associated with the
   property named `object. If `append is FcTrue, the value is
   added at the end of any existing list, otherwise it is inserted
   at the beginning. `value' is saved (with FcValueSave) when
   inserted into the pattern so that the library retains no
   reference to any application-supplied data structure.

FcPatternAddWeak

Name

   FcPatternAddWeak -- Add a value to a pattern with weak binding

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternAddWeak(FcPattern *p, const char *object,
   FcValue value, FcBool append);

Description

   FcPatternAddWeak is essentially the same as FcPatternAdd except
   that any values added to the list have binding weak instead of
   strong.

FcPatternAdd-Type

Name

   FcPatternAddInteger, FcPatternAddDouble, FcPatternAddString,
   FcPatternAddMatrix, FcPatternAddCharSet, FcPatternAddBool,
   FcPatternAddFTFace, FcPatternAddLangSet,
   FcPatternAddRange -- Add a typed value to a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternAddInteger(FcPattern *p, const char *object,
   int i);

   FcBool FcPatternAddDouble(FcPattern *p, const char *object,
   double d);

   FcBool FcPatternAddString(FcPattern *p, const char *object,
   const FcChar8 *s);

   FcBool FcPatternAddMatrix(FcPattern *p, const char *object,
   const FcMatrix *m);

   FcBool FcPatternAddCharSet(FcPattern *p, const char *object,
   const FcCharSet *c);

   FcBool FcPatternAddBool(FcPattern *p, const char *object,
   FcBool b);

   FcBool FcPatternAddFTFace(FcPattern *p, const char *object,
   const FT_Facef);

   FcBool FcPatternAddLangSet(FcPattern *p, const char *object,
   const FcLangSet *l);

   FcBool FcPatternAddRange(FcPattern *p, const char *object,
   const FcRange *r);

Description

   These are all convenience functions that insert objects of the
   specified type into the pattern. Use these in preference to
   FcPatternAdd as they will provide compile-time typechecking.
   These all append values to any existing list of values.
   FcPatternAddRange are available since 2.11.91.

FcPatternGet

Name

   FcPatternGet -- Return a value from a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcResult FcPatternGet(FcPattern *p, const char *object, int id,
   FcValue *v);

Description

   Returns in v the id'th value associated with the property
   object. The value returned is not a copy, but rather refers to
   the data stored within the pattern directly. Applications must
   not free this value.

FcPatternGet-Type

Name

   FcPatternGetInteger, FcPatternGetDouble, FcPatternGetString,
   FcPatternGetMatrix, FcPatternGetCharSet, FcPatternGetBool,
   FcPatternGetFTFace, FcPatternGetLangSet,
   FcPatternGetRange -- Return a typed value from a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcResult FcPatternGetInteger(FcPattern *p, const char *object,
   int n, int *i);

   FcResult FcPatternGetDouble(FcPattern *p, const char *object,
   int n, double *d);

   FcResult FcPatternGetString(FcPattern *p, const char *object,
   int n, FcChar8 **s);

   FcResult FcPatternGetMatrix(FcPattern *p, const char *object,
   int n, FcMatrix **s);

   FcResult FcPatternGetCharSet(FcPattern *p, const char *object,
   int n, FcCharSet **c);

   FcResult FcPatternGetBool(FcPattern *p, const char *object, int
   n, FcBool *b);

   FcResult FcPatternGetFTFace(FcPattern *p, const char *object,
   int n, FT_Face *f);

   FcResult FcPatternGetLangSet(FcPattern *p, const char *object,
   int n, FcLangSet **l);

   FcResult FcPatternGetRange(FcPattern *p, const char *object,
   int n, FcRange **r);

Description

   These are convenience functions that call FcPatternGet and
   verify that the returned data is of the expected type. They
   return FcResultTypeMismatch if this is not the case. Note that
   these (like FcPatternGet) do not make a copy of any data
   structure referenced by the return value. Use these in
   preference to FcPatternGet to provide compile-time
   typechecking. FcPatternGetRange are available since 2.11.91.

FcPatternBuild

Name

   FcPatternBuild, FcPatternVaBuild, FcPatternVapBuild -- Create
   patterns from arguments

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcPatternBuild(FcPattern *pattern, ...);

   FcPattern * FcPatternVaBuild(FcPattern *pattern, va_list va);

   void FcPatternVapBuild(FcPattern *result, FcPattern *pattern,
   va_list va);

Description

   Builds a pattern using a list of objects, types and values.
   Each value to be entered in the pattern is specified with three
   arguments:

    1. Object name, a string describing the property to be added.
    2. Object type, one of the FcType enumerated values
    3. Value, not an FcValue, but the raw type as passed to any of
       the FcPatternAdd<type> functions. Must match the type of
       the second argument.

   The argument list is terminated by a null object name, no
   object type nor value need be passed for this. The values are
   added to `pattern', if `pattern' is null, a new pattern is
   created. In either case, the pattern is returned. Example
pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Times", (char *)
0);

   FcPatternVaBuild is used when the arguments are already in the
   form of a varargs value. FcPatternVapBuild is a macro version
   of FcPatternVaBuild which returns its result directly in the
   result variable.

FcPatternDel

Name

   FcPatternDel -- Delete a property from a pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternDel(FcPattern *p, const char *object);

Description

   Deletes all values associated with the property `object',
   returning whether the property existed or not.

FcPatternRemove

Name

   FcPatternRemove -- Remove one object of the specified type from
   the pattern

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcPatternRemove(FcPattern *p, const char *object, int
   id);

Description

   Removes the value associated with the property `object' at
   position `id', returning whether the property existed and had a
   value at that position or not.

FcPatternPrint

Name

   FcPatternPrint -- Print a pattern for debugging

Synopsis

#include <fontconfig/fontconfig.h>

   void FcPatternPrint(const FcPattern *p);

Description

   Prints an easily readable version of the pattern to stdout.
   There is no provision for reparsing data in this format, it's
   just for diagnostics and debugging.

FcDefaultSubstitute

Name

   FcDefaultSubstitute -- Perform default substitutions in a
   pattern

Synopsis

#include <fontconfig/fontconfig.h>

   void FcDefaultSubstitute(FcPattern *pattern);

Description

   Supplies default values for underspecified font patterns:

     * Patterns without a specified style or weight are set to
       Medium
     * Patterns without a specified style or slant are set to
       Roman
     * Patterns without a specified pixel size are given one
       computed from any specified point size (default 12), dpi
       (default 75) and scale (default 1).

FcNameParse

Name

   FcNameParse -- Parse a pattern string

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcNameParse(const FcChar8 *name);

Description

   Converts name from the standard text format described above
   into a pattern.

FcNameUnparse

Name

   FcNameUnparse -- Convert a pattern back into a string that can
   be parsed

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcNameUnparse(FcPattern *pat);

Description

   Converts the given pattern into the standard text format
   described above. The return value is not static, but instead
   refers to newly allocated memory which should be freed by the
   caller using free().

FcPatternFormat

Name

   FcPatternFormat -- Format a pattern into a string according to
   a format specifier

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcPatternFormat(FcPattern *pat, const FcChar8
   *format);

Description

   Converts given pattern pat into text described by the format
   specifier format. The return value refers to newly allocated
   memory which should be freed by the caller using free(), or
   NULL if format is invalid.

   The format is loosely modeled after printf-style format string.
   The format string is composed of zero or more directives:
   ordinary characters (not "%"), which are copied unchanged to
   the output stream; and tags which are interpreted to construct
   text from the pattern in a variety of ways (explained below).
   Special characters can be escaped using backslash. C-string
   style special characters like \n and \r are also supported
   (this is useful when the format string is not a C string
   literal). It is advisable to always escape curly braces that
   are meant to be copied to the output as ordinary characters.

   Each tag is introduced by the character "%", followed by an
   optional minimum field width, followed by tag contents in curly
   braces ({}). If the minimum field width value is provided the
   tag will be expanded and the result padded to achieve the
   minimum width. If the minimum field width is positive, the
   padding will right-align the text. Negative field width will
   left-align. The rest of this section describes various
   supported tag contents and their expansion.

   A simple tag is one where the content is an identifier. When
   simple tags are expanded, the named identifier will be looked
   up in pattern and the resulting list of values returned, joined
   together using comma. For example, to print the family name and
   style of the pattern, use the format "%{family} %{style}\n". To
   extend the family column to forty characters use
   "%-40{family}%{style}\n".

   Simple tags expand to list of all values for an element. To
   only choose one of the values, one can index using the syntax
   "%{elt[idx]}". For example, to get the first family name only,
   use "%{family[0]}".

   If a simple tag ends with "=" and the element is found in the
   pattern, the name of the element followed by "=" will be output
   before the list of values. For example, "%{weight=}" may expand
   to the string "weight=80". Or to the empty string if pattern
   does not have weight set.

   If a simple tag starts with ":" and the element is found in the
   pattern, ":" will be printed first. For example, combining this
   with the =, the format "%{:weight=}" may expand to ":weight=80"
   or to the empty string if pattern does not have weight set.

   If a simple tag contains the string ":-", the rest of the the
   tag contents will be used as a default string. The default
   string is output if the element is not found in the pattern.
   For example, the format "%{:weight=:-123}" may expand to
   ":weight=80" or to the string ":weight=123" if pattern does not
   have weight set.

   A count tag is one that starts with the character "#" followed
   by an element name, and expands to the number of values for the
   element in the pattern. For example, "%{#family}" expands to
   the number of family names pattern has set, which may be zero.

   A sub-expression tag is one that expands a sub-expression. The
   tag contents are the sub-expression to expand placed inside
   another set of curly braces. Sub-expression tags are useful for
   aligning an entire sub-expression, or to apply converters
   (explained later) to the entire sub-expression output. For
   example, the format "%40{{%{family} %{style}}}" expands the
   sub-expression to construct the family name followed by the
   style, then takes the entire string and pads it on the left to
   be at least forty characters.

   A filter-out tag is one starting with the character "-"
   followed by a comma-separated list of element names, followed
   by a sub-expression enclosed in curly braces. The
   sub-expression will be expanded but with a pattern that has the
   listed elements removed from it. For example, the format
   "%{-size,pixelsize{sub-expr}}" will expand "sub-expr" with
   pattern sans the size and pixelsize elements.

   A filter-in tag is one starting with the character "+" followed
   by a comma-separated list of element names, followed by a
   sub-expression enclosed in curly braces. The sub-expression
   will be expanded but with a pattern that only has the listed
   elements from the surrounding pattern. For example, the format
   "%{+family,familylang{sub-expr}}" will expand "sub-expr" with a
   sub-pattern consisting only the family and family lang elements
   of pattern.

   A conditional tag is one starting with the character "?"
   followed by a comma-separated list of element conditions,
   followed by two sub-expression enclosed in curly braces. An
   element condition can be an element name, in which case it
   tests whether the element is defined in pattern, or the
   character "!" followed by an element name, in which case the
   test is negated. The conditional passes if all the element
   conditions pass. The tag expands the first sub-expression if
   the conditional passes, and expands the second sub-expression
   otherwise. For example, the format
   "%{?size,dpi,!pixelsize{pass}{fail}}" will expand to "pass" if
   pattern has size and dpi elements but no pixelsize element, and
   to "fail" otherwise.

   An enumerate tag is one starting with the string "[]" followed
   by a comma-separated list of element names, followed by a
   sub-expression enclosed in curly braces. The list of values for
   the named elements are walked in parallel and the
   sub-expression expanded each time with a pattern just having a
   single value for those elements, starting from the first value
   and continuing as long as any of those elements has a value.
   For example, the format "%{[]family,familylang{%{family}
   (%{familylang})\n}}" will expand the pattern "%{family}
   (%{familylang})\n" with a pattern having only the first value
   of the family and familylang elements, then expands it with the
   second values, then the third, etc.

   As a special case, if an enumerate tag has only one element,
   and that element has only one value in the pattern, and that
   value is of type FcLangSet, the individual languages in the
   language set are enumerated.

   A builtin tag is one starting with the character "=" followed
   by a builtin name. The following builtins are defined:

   unparse
          Expands to the result of calling FcNameUnparse() on the
          pattern.

   fcmatch
          Expands to the output of the default output format of
          the fc-match command on the pattern, without the final
          newline.

   fclist
          Expands to the output of the default output format of
          the fc-list command on the pattern, without the final
          newline.

   fccat
          Expands to the output of the default output format of
          the fc-cat command on the pattern, without the final
          newline.

   pkgkit
          Expands to the list of PackageKit font() tags for the
          pattern. Currently this includes tags for each family
          name, and each language from the pattern, enumerated and
          sanitized into a set of tags terminated by newline.
          Package management systems can use these tags to tag
          their packages accordingly.

   For example, the format "%{+family,style{%{=unparse}}}\n" will
   expand to an unparsed name containing only the family and style
   element values from pattern.

   The contents of any tag can be followed by a set of zero or
   more converters. A converter is specified by the character "|"
   followed by the converter name and arguments. The following
   converters are defined:

   basename
          Replaces text with the results of calling
          FcStrBasename() on it.

   dirname
          Replaces text with the results of calling FcStrDirname()
          on it.

   downcase
          Replaces text with the results of calling
          FcStrDowncase() on it.

   shescape
          Escapes text for one level of shell expansion. (Escapes
          single-quotes, also encloses text in single-quotes.)

   cescape
          Escapes text such that it can be used as part of a C
          string literal. (Escapes backslash and double-quotes.)

   xmlescape
          Escapes text such that it can be used in XML and HTML.
          (Escapes less-than, greater-than, and ampersand.)

   delete(chars)
          Deletes all occurrences of each of the characters in
          chars from the text. FIXME: This converter is not UTF-8
          aware yet.

   escape(chars)
          Escapes all occurrences of each of the characters in
          chars by prepending it by the first character in chars.
          FIXME: This converter is not UTF-8 aware yet.

   translate(from,to)
          Translates all occurrences of each of the characters in
          from by replacing them with their corresponding
          character in to. If to has fewer characters than from,
          it will be extended by repeating its last character.
          FIXME: This converter is not UTF-8 aware yet.

   For example, the format "%{family|downcase|delete( )}\n" will
   expand to the values of the family element in pattern,
   lower-cased and with spaces removed.

Since

   version 2.9.0
     __________________________________________________________

FcFontSet

   Table of Contents
   FcFontSetCreate -- Create a font set
   FcFontSetDestroy -- Destroy a font set
   FcFontSetAdd -- Add to a font set
   FcFontSetList -- List fonts from a set of font sets
   FcFontSetMatch -- Return the best font from a set of font sets
   FcFontSetPrint -- Print a set of patterns to stdout
   FcFontSetSort -- Add to a font set
   FcFontSetSortDestroy -- DEPRECATED destroy a font set

   An FcFontSet simply holds a list of patterns; these are used to
   return the results of listing available fonts.

FcFontSetCreate

Name

   FcFontSetCreate -- Create a font set

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSet * FcFontSetCreate(void);

Description

   Creates an empty font set.

FcFontSetDestroy

Name

   FcFontSetDestroy -- Destroy a font set

Synopsis

#include <fontconfig/fontconfig.h>

   void FcFontSetDestroy(FcFontSet *s);

Description

   Destroys a font set. Note that this destroys any referenced
   patterns as well.

FcFontSetAdd

Name

   FcFontSetAdd -- Add to a font set

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcFontSetAdd(FcFontSet *s, FcPattern *font);

Description

   Adds a pattern to a font set. Note that the pattern is not
   copied before being inserted into the set. Returns FcFalse if
   the pattern cannot be inserted into the set (due to allocation
   failure). Otherwise returns FcTrue.

FcFontSetList

Name

   FcFontSetList -- List fonts from a set of font sets

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSet * FcFontSetList(FcConfig *config, FcFontSet **sets,
   intnsets, FcPattern *pattern, FcObjectSet *object_set);

Description

   Selects fonts matching pattern from sets, creates patterns from
   those fonts containing only the objects in object_set and
   returns the set of unique such patterns. If config is NULL, the
   default configuration is checked to be up to date, and used.

FcFontSetMatch

Name

   FcFontSetMatch -- Return the best font from a set of font sets

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcFontSetMatch(FcConfig *config, FcFontSet **sets,
   intnsets, FcPattern *pattern, FcResult *result);

Description

   Finds the font in sets most closely matching pattern and
   returns the result of FcFontRenderPrepare for that font and the
   provided pattern. This function should be called only after
   FcConfigSubstitute and FcDefaultSubstitute have been called for
   pattern; otherwise the results will not be correct. If config
   is NULL, the current configuration is used. Returns NULL if an
   error occurs during this process.

FcFontSetPrint

Name

   FcFontSetPrint -- Print a set of patterns to stdout

Synopsis

#include <fontconfig/fontconfig.h>

   void FcFontSetPrint(FcFontSet *set);

Description

   This function is useful for diagnosing font related issues,
   printing the complete contents of every pattern in set. The
   format of the output is designed to be of help to users and
   developers, and may change at any time.

FcFontSetSort

Name

   FcFontSetSort -- Add to a font set

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSetSort(FcConfig *config, FcFontSet **sets, intnsets,
   FcPattern *pattern, FcBool trim, FcCharSet **csp, FcResult
   *result);

Description

   Returns the list of fonts from sets sorted by closeness to
   pattern. If trim is FcTrue, elements in the list which don't
   include Unicode coverage not provided by earlier elements in
   the list are elided. The union of Unicode coverage of all of
   the fonts is returned in csp, if csp is not NULL. This function
   should be called only after FcConfigSubstitute and
   FcDefaultSubstitute have been called for p; otherwise the
   results will not be correct.

   The returned FcFontSet references FcPattern structures which
   may be shared by the return value from multiple FcFontSort
   calls, applications cannot modify these patterns. Instead, they
   should be passed, along with pattern to FcFontRenderPrepare
   which combines them into a complete pattern.

   The FcFontSet returned by FcFontSetSort is destroyed by calling
   FcFontSetDestroy.

FcFontSetSortDestroy

Name

   FcFontSetSortDestroy -- DEPRECATED destroy a font set

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSetSortDestroy(FcFontSet *set);

Description

   This function is DEPRECATED. FcFontSetSortDestroy destroys set
   by calling FcFontSetDestroy. Applications should use
   FcFontSetDestroy directly instead.
     __________________________________________________________

FcObjectSet

   Table of Contents
   FcObjectSetCreate -- Create an object set
   FcObjectSetAdd -- Add to an object set
   FcObjectSetDestroy -- Destroy an object set
   FcObjectSetBuild -- Build object set from args

   An FcObjectSet holds a list of pattern property names; it is
   used to indicate which properties are to be returned in the
   patterns from FcFontList.

FcObjectSetCreate

Name

   FcObjectSetCreate -- Create an object set

Synopsis

#include <fontconfig/fontconfig.h>

   FcObjectSet * FcObjectSetCreate(void);

Description

   Creates an empty set.

FcObjectSetAdd

Name

   FcObjectSetAdd -- Add to an object set

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcObjectSetAdd(FcObjectSet *os, const char *object);

Description

   Adds a property name to the set. Returns FcFalse if the
   property name cannot be inserted into the set (due to
   allocation failure). Otherwise returns FcTrue.

FcObjectSetDestroy

Name

   FcObjectSetDestroy -- Destroy an object set

Synopsis

#include <fontconfig/fontconfig.h>

   void FcObjectSetDestroy(FcObjectSet *os);

Description

   Destroys an object set.

FcObjectSetBuild

Name

   FcObjectSetBuild, FcObjectSetVaBuild,
   FcObjectSetVapBuild -- Build object set from args

Synopsis

#include <fontconfig/fontconfig.h>

   FcObjectSet * FcObjectSetBuild(const char *first, ...);

   FcObjectSet * FcObjectSetVaBuild(const char *first, va_list
   va);

   void FcObjectSetVapBuild(FcObjectSet *result, const char
   *first, va_list va);

Description

   These build an object set from a null-terminated list of
   property names. FcObjectSetVapBuild is a macro version of
   FcObjectSetVaBuild which returns the result in the result
   variable directly.
     __________________________________________________________

FreeType specific functions

   Table of Contents
   FcFreeTypeCharIndex -- map Unicode to glyph id
   FcFreeTypeCharSet -- compute Unicode coverage
   FcFreeTypeCharSetAndSpacing -- compute Unicode coverage and
          spacing type

   FcFreeTypeQuery -- compute pattern from font file (and index)
   FcFreeTypeQueryFace -- compute pattern from FT_Face

   While the fontconfig library doesn't insist that FreeType be
   used as the rasterization mechanism for fonts, it does provide
   some convenience functions.

FcFreeTypeCharIndex

Name

   FcFreeTypeCharIndex -- map Unicode to glyph id

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>

   FT_UInt FcFreeTypeCharIndex(FT_Face face, FcChar32 ucs4);

Description

   Maps a Unicode char to a glyph index. This function uses
   information from several possible underlying encoding tables to
   work around broken fonts. As a result, this function isn't
   designed to be used in performance sensitive areas; results
   from this function are intended to be cached by higher level
   functions.

FcFreeTypeCharSet

Name

   FcFreeTypeCharSet -- compute Unicode coverage

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>

   FcCharSet * FcFreeTypeCharSet(FT_Face face, FcBlanks *blanks);

Description

   Scans a FreeType face and returns the set of encoded Unicode
   chars. This scans several encoding tables to build as complete
   a list as possible. If 'blanks' is not 0, the glyphs in the
   font are examined and any blank glyphs not in 'blanks' are not
   placed in the returned FcCharSet.

FcFreeTypeCharSetAndSpacing

Name

   FcFreeTypeCharSetAndSpacing -- compute Unicode coverage and
   spacing type

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>

   FcCharSet * FcFreeTypeCharSetAndSpacing(FT_Face face, FcBlanks
   *blanks, int *spacing);

Description

   Scans a FreeType face and returns the set of encoded Unicode
   chars. This scans several encoding tables to build as complete
   a list as possible. If 'blanks' is not 0, the glyphs in the
   font are examined and any blank glyphs not in 'blanks' are not
   placed in the returned FcCharSet. spacing receives the computed
   spacing type of the font, one of FC_MONO for a font where all
   glyphs have the same width, FC_DUAL, where the font has glyphs
   in precisely two widths, one twice as wide as the other, or
   FC_PROPORTIONAL where the font has glyphs of many widths.

FcFreeTypeQuery

Name

   FcFreeTypeQuery -- compute pattern from font file (and index)

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>

   FcPattern * FcFreeTypeQuery(const FcChar8 *file, int id,
   FcBlanks *blanks, int *count);

Description

   Constructs a pattern representing the 'id'th font in 'file'.
   The number of fonts in 'file' is returned in 'count'.

FcFreeTypeQueryFace

Name

   FcFreeTypeQueryFace -- compute pattern from FT_Face

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>

   FcPattern * FcFreeTypeQueryFace(const FT_Face face, const
   FcChar8 *file, int id, FcBlanks *blanks);

Description

   Constructs a pattern representing 'face'. 'file' and 'id' are
   used solely as data for pattern elements (FC_FILE, FC_INDEX and
   sometimes FC_FAMILY).
     __________________________________________________________

FcValue

   Table of Contents
   FcValueDestroy -- Free a value
   FcValueSave -- Copy a value
   FcValuePrint -- Print a value to stdout
   FcValueEqual -- Test two values for equality

   FcValue is a structure containing a type tag and a union of all
   possible datatypes. The tag is an enum of type FcType and is
   intended to provide a measure of run-time typechecking,
   although that depends on careful programming.

FcValueDestroy

Name

   FcValueDestroy -- Free a value

Synopsis

#include <fontconfig/fontconfig.h>

   void FcValueDestroy(FcValue v);

Description

   Frees any memory referenced by v. Values of type FcTypeString,
   FcTypeMatrix and FcTypeCharSet reference memory, the other
   types do not.

FcValueSave

Name

   FcValueSave -- Copy a value

Synopsis

#include <fontconfig/fontconfig.h>

   FcValue FcValueSave(FcValue v);

Description

   Returns a copy of v duplicating any object referenced by it so
   that v may be safely destroyed without harming the new value.

FcValuePrint

Name

   FcValuePrint -- Print a value to stdout

Synopsis

#include <fontconfig/fontconfig.h>

   void FcValuePrint(FcValue v);

Description

   Prints a human-readable representation of v to stdout. The
   format should not be considered part of the library
   specification as it may change in the future.

FcValueEqual

Name

   FcValueEqual -- Test two values for equality

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcValueEqual(FcValue v_a, FcValue v_b);

Description

   Compares two values. Integers and Doubles are compared as
   numbers; otherwise the two values have to be the same type to
   be considered equal. Strings are compared ignoring case.
     __________________________________________________________

FcCharSet

   Table of Contents
   FcCharSetCreate -- Create an empty character set
   FcCharSetDestroy -- Destroy a character set
   FcCharSetAddChar -- Add a character to a charset
   FcCharSetDelChar -- Add a character to a charset
   FcCharSetCopy -- Copy a charset
   FcCharSetEqual -- Compare two charsets
   FcCharSetIntersect -- Intersect charsets
   FcCharSetUnion -- Add charsets
   FcCharSetSubtract -- Subtract charsets
   FcCharSetMerge -- Merge charsets
   FcCharSetHasChar -- Check a charset for a char
   FcCharSetCount -- Count entries in a charset
   FcCharSetIntersectCount -- Intersect and count charsets
   FcCharSetSubtractCount -- Subtract and count charsets
   FcCharSetIsSubset -- Test for charset inclusion
   FcCharSetFirstPage -- Start enumerating charset contents
   FcCharSetNextPage -- Continue enumerating charset contents
   FcCharSetCoverage -- DEPRECATED return coverage for a Unicode
          page

   FcCharSetNew -- DEPRECATED alias for FcCharSetCreate

   An FcCharSet is a boolean array indicating a set of Unicode
   chars. Those associated with a font are marked constant and
   cannot be edited. FcCharSets may be reference counted
   internally to reduce memory consumption; this may be visible to
   applications as the result of FcCharSetCopy may return it's
   argument, and that CharSet may remain unmodifiable.

FcCharSetCreate

Name

   FcCharSetCreate -- Create an empty character set

Synopsis

#include <fontconfig/fontconfig.h>

   FcCharSet * FcCharSetCreate(void);

Description

   FcCharSetCreate allocates and initializes a new empty character
   set object.

FcCharSetDestroy

Name

   FcCharSetDestroy -- Destroy a character set

Synopsis

#include <fontconfig/fontconfig.h>

   void FcCharSetDestroy(FcCharSet *fcs);

Description

   FcCharSetDestroy decrements the reference count fcs. If the
   reference count becomes zero, all memory referenced is freed.

FcCharSetAddChar

Name

   FcCharSetAddChar -- Add a character to a charset

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcCharSetAddChar(FcCharSet *fcs, FcChar32 ucs4);

Description

   FcCharSetAddChar adds a single Unicode char to the set,
   returning FcFalse on failure, either as a result of a constant
   set or from running out of memory.

FcCharSetDelChar

Name

   FcCharSetDelChar -- Add a character to a charset

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcCharSetDelChar(FcCharSet *fcs, FcChar32 ucs4);

Description

   FcCharSetDelChar deletes a single Unicode char from the set,
   returning FcFalse on failure, either as a result of a constant
   set or from running out of memory.

Since

   version 2.9.0

FcCharSetCopy

Name

   FcCharSetCopy -- Copy a charset

Synopsis

#include <fontconfig/fontconfig.h>

   FcCharSet * FcCharSetCopy(FcCharSet *src);

Description

   Makes a copy of src; note that this may not actually do
   anything more than increment the reference count on src.

FcCharSetEqual

Name

   FcCharSetEqual -- Compare two charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcCharSetEqual(const FcCharSet *a, const FcCharSet *b);

Description

   Returns whether a and b contain the same set of Unicode chars.

FcCharSetIntersect

Name

   FcCharSetIntersect -- Intersect charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcCharSet * FcCharSetIntersect(const FcCharSet *a, const
   FcCharSet *b);

Description

   Returns a set including only those chars found in both a and b.

FcCharSetUnion

Name

   FcCharSetUnion -- Add charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcCharSet * FcCharSetUnion(const FcCharSet *a, const FcCharSet
   *b);

Description

   Returns a set including only those chars found in either a or
   b.

FcCharSetSubtract

Name

   FcCharSetSubtract -- Subtract charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcCharSet * FcCharSetSubtract(const FcCharSet *a, const
   FcCharSet *b);

Description

   Returns a set including only those chars found in a but not b.

FcCharSetMerge

Name

   FcCharSetMerge -- Merge charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcCharSetMerge(FcCharSet *a, const FcCharSet *b, FcBool
   *changed);

Description

   Adds all chars in b to a. In other words, this is an in-place
   version of FcCharSetUnion. If changed is not NULL, then it
   returns whether any new chars from b were added to a. Returns
   FcFalse on failure, either when a is a constant set or from
   running out of memory.

FcCharSetHasChar

Name

   FcCharSetHasChar -- Check a charset for a char

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcCharSetHasChar(const FcCharSet *fcs, FcChar32 ucs4);

Description

   Returns whether fcs contains the char ucs4.

FcCharSetCount

Name

   FcCharSetCount -- Count entries in a charset

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcCharSetCount(const FcCharSet *a);

Description

   Returns the total number of Unicode chars in a.

FcCharSetIntersectCount

Name

   FcCharSetIntersectCount -- Intersect and count charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcCharSetIntersectCount(const FcCharSet *a, const
   FcCharSet *b);

Description

   Returns the number of chars that are in both a and b.

FcCharSetSubtractCount

Name

   FcCharSetSubtractCount -- Subtract and count charsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcCharSetSubtractCount(const FcCharSet *a, const
   FcCharSet *b);

Description

   Returns the number of chars that are in a but not in b.

FcCharSetIsSubset

Name

   FcCharSetIsSubset -- Test for charset inclusion

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcCharSetIsSubset(const FcCharSet *a, const FcCharSet
   *b);

Description

   Returns whether a is a subset of b.

FcCharSetFirstPage

Name

   FcCharSetFirstPage -- Start enumerating charset contents

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcCharSetFirstPage(const FcCharSet *a,
   FcChar32[FC_CHARSET_MAP_SIZE] map, FcChar32 *next);

Description

   Builds an array of bits in map marking the first page of
   Unicode coverage of a. *next is set to contains the base code
   point for the next page in a. Returns the base code point for
   the page, or FC_CHARSET_DONE if a contains no pages. As an
   example, if FcCharSetFirstPage returns 0x300 and fills map with
0xffffffff 0xffffffff 0x01000008 0x44300002 0xffffd7f0 0xfffffffb 0xffff
7fff 0xffff0003

   Then the page contains code points 0x300 through 0x33f (the
   first 64 code points on the page) because map[0] and map[1]
   both have all their bits set. It also contains code points
   0x343 (0x300 + 32*2 + (4-1)) and 0x35e (0x300 + 32*2 + (31-1))
   because map[2] has the 4th and 31st bits set. The code points
   represented by map[3] and later are left as an excercise for
   the reader ;).

FcCharSetNextPage

Name

   FcCharSetNextPage -- Continue enumerating charset contents

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcCharSetNextPage(const FcCharSet *a,
   FcChar32[FC_CHARSET_MAP_SIZE] map, FcChar32 *next);

Description

   Builds an array of bits in map marking the Unicode coverage of
   a for page containing *next (see the FcCharSetFirstPage
   description for details). *next is set to contains the base
   code point for the next page in a. Returns the base of code
   point for the page, or FC_CHARSET_DONE if a does not contain
   *next.

FcCharSetCoverage

Name

   FcCharSetCoverage -- DEPRECATED return coverage for a Unicode
   page

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcCharSetCoverage(const FcCharSet *a, FcChar32page,
   FcChar32[8]result);

Description

   DEPRECATED This function returns a bitmask in result which
   indicates which code points in page are included in a.
   FcCharSetCoverage returns the next page in the charset which
   has any coverage.

FcCharSetNew

Name

   FcCharSetNew -- DEPRECATED alias for FcCharSetCreate

Synopsis

#include <fontconfig/fontconfig.h>

   FcCharSet * FcCharSetNew(void);

Description

   FcCharSetNew is a DEPRECATED alias for FcCharSetCreate.
     __________________________________________________________

FcLangSet

   Table of Contents
   FcLangSetCreate -- create a langset object
   FcLangSetDestroy -- destroy a langset object
   FcLangSetCopy -- copy a langset object
   FcLangSetAdd -- add a language to a langset
   FcLangSetDel -- delete a language from a langset
   FcLangSetUnion -- Add langsets
   FcLangSetSubtract -- Subtract langsets
   FcLangSetCompare -- compare language sets
   FcLangSetContains -- check langset subset relation
   FcLangSetEqual -- test for matching langsets
   FcLangSetHash -- return a hash value for a langset
   FcLangSetHasLang -- test langset for language support
   FcGetDefaultLangs -- Get the default languages list
   FcLangSetGetLangs -- get the list of languages in the langset
   FcGetLangs -- Get list of languages
   FcLangNormalize -- Normalize the language string
   FcLangGetCharSet -- Get character map for a language

   An FcLangSet is a set of language names (each of which include
   language and an optional territory). They are used when
   selecting fonts to indicate which languages the fonts need to
   support. Each font is marked, using language orthography
   information built into fontconfig, with the set of supported
   languages.

FcLangSetCreate

Name

   FcLangSetCreate -- create a langset object

Synopsis

#include <fontconfig/fontconfig.h>

   FcLangSet * FcLangSetCreate(void);

Description

   FcLangSetCreate creates a new FcLangSet object.

FcLangSetDestroy

Name

   FcLangSetDestroy -- destroy a langset object

Synopsis

#include <fontconfig/fontconfig.h>

   void FcLangSetDestroy(FcLangSet *ls);

Description

   FcLangSetDestroy destroys a FcLangSet object, freeing all
   memory associated with it.

FcLangSetCopy

Name

   FcLangSetCopy -- copy a langset object

Synopsis

#include <fontconfig/fontconfig.h>

   FcLangSet * FcLangSetCopy(const FcLangSet *ls);

Description

   FcLangSetCopy creates a new FcLangSet object and populates it
   with the contents of ls.

FcLangSetAdd

Name

   FcLangSetAdd -- add a language to a langset

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcLangSetAdd(FcLangSet *ls, const FcChar8 *lang);

Description

   lang is added to ls. lang should be of the form Ll-Tt where Ll
   is a two or three letter language from ISO 639 and Tt is a
   territory from ISO 3166.

FcLangSetDel

Name

   FcLangSetDel -- delete a language from a langset

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcLangSetDel(FcLangSet *ls, const FcChar8 *lang);

Description

   lang is removed from ls. lang should be of the form Ll-Tt where
   Ll is a two or three letter language from ISO 639 and Tt is a
   territory from ISO 3166.

Since

   version 2.9.0

FcLangSetUnion

Name

   FcLangSetUnion -- Add langsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcLangSet * FcLangSetUnion(const FcLangSet *ls_a, const
   FcLangSet *ls_b);

Description

   Returns a set including only those languages found in either
   ls_a or ls_b.

Since

   version 2.9.0

FcLangSetSubtract

Name

   FcLangSetSubtract -- Subtract langsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcLangSet * FcLangSetSubtract(const FcLangSet *ls_a, const
   FcLangSet *ls_b);

Description

   Returns a set including only those languages found in ls_a but
   not in ls_b.

Since

   version 2.9.0

FcLangSetCompare

Name

   FcLangSetCompare -- compare language sets

Synopsis

#include <fontconfig/fontconfig.h>

   FcLangResult FcLangSetCompare(const FcLangSet *ls_a, const
   FcLangSet *ls_b);

Description

   FcLangSetCompare compares language coverage for ls_a and ls_b.
   If they share any language and territory pair, this function
   returns FcLangEqual. If they share a language but differ in
   which territory that language is for, this function returns
   FcLangDifferentTerritory. If they share no languages in common,
   this function returns FcLangDifferentLang.

FcLangSetContains

Name

   FcLangSetContains -- check langset subset relation

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcLangSetContains(const FcLangSet *ls_a, const FcLangSet
   *ls_b);

Description

   FcLangSetContains returns FcTrue if ls_a contains every
   language in ls_b. ls_a will 'contain' a language from ls_b if
   ls_a has exactly the language, or either the language or ls_a
   has no territory.

FcLangSetEqual

Name

   FcLangSetEqual -- test for matching langsets

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcLangSetEqual(const FcLangSet *ls_a, const FcLangSet
   *ls_b);

Description

   Returns FcTrue if and only if ls_a supports precisely the same
   language and territory combinations as ls_b.

FcLangSetHash

Name

   FcLangSetHash -- return a hash value for a langset

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar32 FcLangSetHash(const FcLangSet *ls);

Description

   This function returns a value which depends solely on the
   languages supported by ls. Any language which equals ls will
   have the same result from FcLangSetHash. However, two langsets
   with the same hash value may not be equal.

FcLangSetHasLang

Name

   FcLangSetHasLang -- test langset for language support

Synopsis

#include <fontconfig/fontconfig.h>

   FcLangResult FcLangSetHasLang(const FcLangSet *ls, const
   FcChar8 *lang);

Description

   FcLangSetHasLang checks whether ls supports lang. If ls has a
   matching language and territory pair, this function returns
   FcLangEqual. If ls has a matching language but differs in which
   territory that language is for, this function returns
   FcLangDifferentTerritory. If ls has no matching language, this
   function returns FcLangDifferentLang.

FcGetDefaultLangs

Name

   FcGetDefaultLangs -- Get the default languages list

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrSet * FcGetDefaultLangs(void);

Description

   Returns a string set of the default languages according to the
   environment variables on the system. This function looks for
   them in order of FC_LANG, LC_ALL, LC_CTYPE and LANG then. If
   there are no valid values in those environment variables, "en"
   will be set as fallback.

Since

   version 2.9.91

FcLangSetGetLangs

Name

   FcLangSetGetLangs -- get the list of languages in the langset

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrSet * FcLangSetGetLangs(const FcLangSet *ls);

Description

   Returns a string set of all languages in langset.

FcGetLangs

Name

   FcGetLangs -- Get list of languages

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrSet * FcGetLangs(void);

Description

   Returns a string set of all known languages.

FcLangNormalize

Name

   FcLangNormalize -- Normalize the language string

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcLangNormalize(const FcChar8 *lang);

Description

   Returns a string to make lang suitable on fontconfig.

Since

   version 2.10.91

FcLangGetCharSet

Name

   FcLangGetCharSet -- Get character map for a language

Synopsis

#include <fontconfig/fontconfig.h>

   const FcCharSet * FcLangGetCharSet(const FcChar8 *lang);

Description

   Returns the FcCharMap for a language.
     __________________________________________________________

FcMatrix

   Table of Contents
   FcMatrixInit -- initialize an FcMatrix structure
   FcMatrixCopy -- Copy a matrix
   FcMatrixEqual -- Compare two matrices
   FcMatrixMultiply -- Multiply matrices
   FcMatrixRotate -- Rotate a matrix
   FcMatrixScale -- Scale a matrix
   FcMatrixShear -- Shear a matrix

   FcMatrix structures hold an affine transformation in matrix
   form.

FcMatrixInit

Name

   FcMatrixInit -- initialize an FcMatrix structure

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixInit(FcMatrix *matrix);

Description

   FcMatrixInit initializes matrix to the identity matrix.

FcMatrixCopy

Name

   FcMatrixCopy -- Copy a matrix

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixCopy(const FcMatrix *matrix);

Description

   FcMatrixCopy allocates a new FcMatrix and copies mat into it.

FcMatrixEqual

Name

   FcMatrixEqual -- Compare two matrices

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixEqual(const FcMatrix *matrix1, const FcMatrix
   *matrix2);

Description

   FcMatrixEqual compares matrix1 and matrix2 returning FcTrue
   when they are equal and FcFalse when they are not.

FcMatrixMultiply

Name

   FcMatrixMultiply -- Multiply matrices

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixMultiply(FcMatrix *result, const FcMatrix
   *matrix1, const FcMatrix *matrix2);

Description

   FcMatrixMultiply multiplies matrix1 and matrix2 storing the
   result in result.

FcMatrixRotate

Name

   FcMatrixRotate -- Rotate a matrix

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixRotate(FcMatrix *matrix, double cos, double sin);

Description

   FcMatrixRotate rotates matrix by the angle who's sine is sin
   and cosine is cos. This is done by multiplying by the matrix:
  cos -sin
  sin  cos

FcMatrixScale

Name

   FcMatrixScale -- Scale a matrix

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixScale(FcMatrix *matrix, double sx, double dy);

Description

   FcMatrixScale multiplies matrix x values by sx and y values by
   dy. This is done by multiplying by the matrix:
   sx  0
   0   dy

FcMatrixShear

Name

   FcMatrixShear -- Shear a matrix

Synopsis

#include <fontconfig/fontconfig.h>

   void FcMatrixShear(FcMatrix *matrix, double sh, double sv);

Description

   FcMatrixShare shears matrix horizontally by sh and vertically
   by sv. This is done by multiplying by the matrix:
  1  sh
  sv  1
     __________________________________________________________

FcRange

   Table of Contents
   FcRangeCopy -- Copy a range object
   FcRangeCreateDouble -- create a range object for double
   FcRangeCreateInteger -- create a range object for integer
   FcRangeDestroy -- destroy a range object
   FcRangeGetDouble -- Get the range in double

   An FcRange holds two variables to indicate a range in between.

FcRangeCopy

Name

   FcRangeCopy -- Copy a range object

Synopsis

#include <fontconfig/fontconfig.h>

   FcRange * FcRangeCopy(const FcRange *range);

Description

   FcRangeCopy creates a new FcRange object and populates it with
   the contents of range.

Since

   version 2.11.91

FcRangeCreateDouble

Name

   FcRangeCreateDouble -- create a range object for double

Synopsis

#include <fontconfig/fontconfig.h>

   FcRange * FcRangeCreateDouble(doublebegin, doubleend);

Description

   FcRangeCreateDouble creates a new FcRange object with double
   sized value.

Since

   version 2.11.91

FcRangeCreateInteger

Name

   FcRangeCreateInteger -- create a range object for integer

Synopsis

#include <fontconfig/fontconfig.h>

   FcRange * FcRangeCreateInteger(intbegin, intend);

Description

   FcRangeCreateInteger creates a new FcRange object with integer
   sized value.

Since

   version 2.11.91

FcRangeDestroy

Name

   FcRangeDestroy -- destroy a range object

Synopsis

#include <fontconfig/fontconfig.h>

   void FcRangeDestroy(FcRange *range);

Description

   FcRangeDestroy destroys a FcRange object, freeing all memory
   associated with it.

Since

   version 2.11.91

FcRangeGetDouble

Name

   FcRangeGetDouble -- Get the range in double

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcRangeGetDouble(const FcRange *range, double *begin,
   double *end);

Description

   Returns in begin and end as the range.

Since

   version 2.11.91
     __________________________________________________________

FcConfig

   Table of Contents
   FcConfigCreate -- Create a configuration
   FcConfigReference -- Increment config reference count
   FcConfigDestroy -- Destroy a configuration
   FcConfigSetCurrent -- Set configuration as default
   FcConfigGetCurrent -- Return current configuration
   FcConfigUptoDate -- Check timestamps on config files
   FcConfigHome -- return the current home directory.
   FcConfigEnableHome -- controls use of the home directory.
   FcConfigBuildFonts -- Build font database
   FcConfigGetConfigDirs -- Get config directories
   FcConfigGetFontDirs -- Get font directories
   FcConfigGetConfigFiles -- Get config files
   FcConfigGetCache -- DEPRECATED used to return per-user cache
          filename

   FcConfigGetCacheDirs -- return the list of directories searched
          for cache files

   FcConfigGetFonts -- Get config font set
   FcConfigGetBlanks -- Get config blanks
   FcConfigGetRescanInterval -- Get config rescan interval
   FcConfigSetRescanInterval -- Set config rescan interval
   FcConfigAppFontAddFile -- Add font file to font database
   FcConfigAppFontAddDir -- Add fonts from directory to font
          database

   FcConfigAppFontClear -- Remove all app fonts from font database
   FcConfigSubstituteWithPat -- Execute substitutions
   FcConfigSubstitute -- Execute substitutions
   FcFontMatch -- Return best font
   FcFontSort -- Return list of matching fonts
   FcFontRenderPrepare -- Prepare pattern for loading font file
   FcFontList -- List fonts
   FcConfigFilename -- Find a config file
   FcConfigParseAndLoad -- load a configuration file
   FcConfigGetSysRoot -- Obtain the system root directory
   FcConfigSetSysRoot -- Set the system root directory

   An FcConfig object holds the internal representation of a
   configuration. There is a default configuration which
   applications may use by passing 0 to any function using the
   data within an FcConfig.

FcConfigCreate

Name

   FcConfigCreate -- Create a configuration

Synopsis

#include <fontconfig/fontconfig.h>

   FcConfig * FcConfigCreate(void);

Description

   Creates an empty configuration.

FcConfigReference

Name

   FcConfigReference -- Increment config reference count

Synopsis

#include <fontconfig/fontconfig.h>

   FcConfig * FcConfigReference(FcConfig *config);

Description

   Add another reference to config. Configs are freed only when
   the reference count reaches zero. If config is NULL, the
   current configuration is used. In that case this function will
   be similar to FcConfigGetCurrent() except that it increments
   the reference count before returning and the user is
   responsible for destroying the configuration when not needed
   anymore.

FcConfigDestroy

Name

   FcConfigDestroy -- Destroy a configuration

Synopsis

#include <fontconfig/fontconfig.h>

   void FcConfigDestroy(FcConfig *config);

Description

   Decrements the config reference count. If all references are
   gone, destroys the configuration and any data associated with
   it. Note that calling this function with the return from
   FcConfigGetCurrent will cause a new configuration to be created
   for use as current configuration.

FcConfigSetCurrent

Name

   FcConfigSetCurrent -- Set configuration as default

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigSetCurrent(FcConfig *config);

Description

   Sets the current default configuration to config. Implicitly
   calls FcConfigBuildFonts if necessary, and FcConfigReference()
   to inrease the reference count in config since 2.12.0,
   returning FcFalse if that call fails.

FcConfigGetCurrent

Name

   FcConfigGetCurrent -- Return current configuration

Synopsis

#include <fontconfig/fontconfig.h>

   FcConfig * FcConfigGetCurrent(void);

Description

   Returns the current default configuration.

FcConfigUptoDate

Name

   FcConfigUptoDate -- Check timestamps on config files

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigUptoDate(FcConfig *config);

Description

   Checks all of the files related to config and returns whether
   any of them has been modified since the configuration was
   created. If config is NULL, the current configuration is used.

FcConfigHome

Name

   FcConfigHome -- return the current home directory.

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcConfigHome(void);

Description

   Return the current user's home directory, if it is available,
   and if using it is enabled, and NULL otherwise. See also
   FcConfigEnableHome).

FcConfigEnableHome

Name

   FcConfigEnableHome -- controls use of the home directory.

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigEnableHome(FcBool enable);

Description

   If enable is FcTrue, then Fontconfig will use various files
   which are specified relative to the user's home directory
   (using the ~ notation in the configuration). When enable is
   FcFalse, then all use of the home directory in these contexts
   will be disabled. The previous setting of the value is
   returned.

FcConfigBuildFonts

Name

   FcConfigBuildFonts -- Build font database

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigBuildFonts(FcConfig *config);

Description

   Builds the set of available fonts for the given configuration.
   Note that any changes to the configuration after this call have
   indeterminate effects. Returns FcFalse if this operation runs
   out of memory. If config is NULL, the current configuration is
   used.

FcConfigGetConfigDirs

Name

   FcConfigGetConfigDirs -- Get config directories

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrList * FcConfigGetConfigDirs(FcConfig *config);

Description

   Returns the list of font directories specified in the
   configuration files for config. Does not include any
   subdirectories. If config is NULL, the current configuration is
   used.

FcConfigGetFontDirs

Name

   FcConfigGetFontDirs -- Get font directories

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrList * FcConfigGetFontDirs(FcConfig *config);

Description

   Returns the list of font directories in config. This includes
   the configured font directories along with any directories
   below those in the filesystem. If config is NULL, the current
   configuration is used.

FcConfigGetConfigFiles

Name

   FcConfigGetConfigFiles -- Get config files

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrList * FcConfigGetConfigFiles(FcConfig *config);

Description

   Returns the list of known configuration files used to generate
   config. If config is NULL, the current configuration is used.

FcConfigGetCache

Name

   FcConfigGetCache -- DEPRECATED used to return per-user cache
   filename

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcConfigGetCache(FcConfig *config);

Description

   With fontconfig no longer using per-user cache files, this
   function now simply returns NULL to indicate that no per-user
   file exists.

FcConfigGetCacheDirs

Name

   FcConfigGetCacheDirs -- return the list of directories searched
   for cache files

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrList * FcConfigGetCacheDirs(const FcConfig *config);

Description

   FcConfigGetCacheDirs returns a string list containing all of
   the directories that fontconfig will search when attempting to
   load a cache file for a font directory. If config is NULL, the
   current configuration is used.

FcConfigGetFonts

Name

   FcConfigGetFonts -- Get config font set

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSet * FcConfigGetFonts(FcConfig *config, FcSetName set);

Description

   Returns one of the two sets of fonts from the configuration as
   specified by set. This font set is owned by the library and
   must not be modified or freed. If config is NULL, the current
   configuration is used.

FcConfigGetBlanks

Name

   FcConfigGetBlanks -- Get config blanks

Synopsis

#include <fontconfig/fontconfig.h>

   FcBlanks * FcConfigGetBlanks(FcConfig *config);

Description

   Returns the FcBlanks object associated with the given
   configuration, if no blanks were present in the configuration,
   this function will return 0. The returned FcBlanks object if
   not NULL, is valid as long as the owning FcConfig is alive. If
   config is NULL, the current configuration is used.

FcConfigGetRescanInterval

Name

   FcConfigGetRescanInterval -- Get config rescan interval

Synopsis

#include <fontconfig/fontconfig.h>

   int FcConfigGetRescanInterval(FcConfig *config);

Description

   Returns the interval between automatic checks of the
   configuration (in seconds) specified in config. The
   configuration is checked during a call to FcFontList when this
   interval has passed since the last check. An interval setting
   of zero disables automatic checks. If config is NULL, the
   current configuration is used.

FcConfigSetRescanInterval

Name

   FcConfigSetRescanInterval -- Set config rescan interval

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigSetRescanInterval(FcConfig *config, int
   rescanInterval);

Description

   Sets the rescan interval. Returns FcFalse if the interval
   cannot be set (due to allocation failure). Otherwise returns
   FcTrue. An interval setting of zero disables automatic checks.
   If config is NULL, the current configuration is used.

FcConfigAppFontAddFile

Name

   FcConfigAppFontAddFile -- Add font file to font database

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigAppFontAddFile(FcConfig *config, const FcChar8
   *file);

Description

   Adds an application-specific font to the configuration. Returns
   FcFalse if the fonts cannot be added (due to allocation failure
   or no fonts found). Otherwise returns FcTrue. If config is
   NULL, the current configuration is used.

FcConfigAppFontAddDir

Name

   FcConfigAppFontAddDir -- Add fonts from directory to font
   database

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigAppFontAddDir(FcConfig *config, const FcChar8
   *dir);

Description

   Scans the specified directory for fonts, adding each one found
   to the application-specific set of fonts. Returns FcFalse if
   the fonts cannot be added (due to allocation failure).
   Otherwise returns FcTrue. If config is NULL, the current
   configuration is used.

FcConfigAppFontClear

Name

   FcConfigAppFontClear -- Remove all app fonts from font database

Synopsis

#include <fontconfig/fontconfig.h>

   void FcConfigAppFontClear(FcConfig *config);

Description

   Clears the set of application-specific fonts. If config is
   NULL, the current configuration is used.

FcConfigSubstituteWithPat

Name

   FcConfigSubstituteWithPat -- Execute substitutions

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigSubstituteWithPat(FcConfig *config, FcPattern
   *p, FcPattern *p_pat, FcMatchKind kind);

Description

   Performs the sequence of pattern modification operations, if
   kind is FcMatchPattern, then those tagged as pattern operations
   are applied, else if kind is FcMatchFont, those tagged as font
   operations are applied and p_pat is used for <test> elements
   with target=pattern. Returns FcFalse if the substitution cannot
   be performed (due to allocation failure). Otherwise returns
   FcTrue. If config is NULL, the current configuration is used.

FcConfigSubstitute

Name

   FcConfigSubstitute -- Execute substitutions

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigSubstitute(FcConfig *config, FcPattern *p,
   FcMatchKind kind);

Description

   Calls FcConfigSubstituteWithPat setting p_pat to NULL. Returns
   FcFalse if the substitution cannot be performed (due to
   allocation failure). Otherwise returns FcTrue. If config is
   NULL, the current configuration is used.

FcFontMatch

Name

   FcFontMatch -- Return best font

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcFontMatch(FcConfig *config, FcPattern *p,
   FcResult *result);

Description

   Finds the font in sets most closely matching pattern and
   returns the result of FcFontRenderPrepare for that font and the
   provided pattern. This function should be called only after
   FcConfigSubstitute and FcDefaultSubstitute have been called for
   p; otherwise the results will not be correct. If config is
   NULL, the current configuration is used.

FcFontSort

Name

   FcFontSort -- Return list of matching fonts

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSet * FcFontSort(FcConfig *config, FcPattern *p, FcBool
   trim, FcCharSet **csp, FcResult *result);

Description

   Returns the list of fonts sorted by closeness to p. If trim is
   FcTrue, elements in the list which don't include Unicode
   coverage not provided by earlier elements in the list are
   elided. The union of Unicode coverage of all of the fonts is
   returned in csp, if csp is not NULL. This function should be
   called only after FcConfigSubstitute and FcDefaultSubstitute
   have been called for p; otherwise the results will not be
   correct.

   The returned FcFontSet references FcPattern structures which
   may be shared by the return value from multiple FcFontSort
   calls, applications must not modify these patterns. Instead,
   they should be passed, along with p to FcFontRenderPrepare
   which combines them into a complete pattern.

   The FcFontSet returned by FcFontSort is destroyed by calling
   FcFontSetDestroy. If config is NULL, the current configuration
   is used.

FcFontRenderPrepare

Name

   FcFontRenderPrepare -- Prepare pattern for loading font file

Synopsis

#include <fontconfig/fontconfig.h>

   FcPattern * FcFontRenderPrepare(FcConfig *config, FcPattern
   *pat, FcPattern *font);

Description

   Creates a new pattern consisting of elements of font not
   appearing in pat, elements of pat not appearing in font and the
   best matching value from pat for elements appearing in both.
   The result is passed to FcConfigSubstituteWithPat with kind
   FcMatchFont and then returned.

FcFontList

Name

   FcFontList -- List fonts

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSet * FcFontList(FcConfig *config, FcPattern *p,
   FcObjectSet *os);

Description

   Selects fonts matching p, creates patterns from those fonts
   containing only the objects in os and returns the set of unique
   such patterns. If config is NULL, the default configuration is
   checked to be up to date, and used.

FcConfigFilename

Name

   FcConfigFilename -- Find a config file

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcConfigFilename(const FcChar8 *name);

Description

   Given the specified external entity name, return the associated
   filename. This provides applications a way to convert various
   configuration file references into filename form.

   A null or empty name indicates that the default configuration
   file should be used; which file this references can be
   overridden with the FONTCONFIG_FILE environment variable. Next,
   if the name starts with ~, it refers to a file in the current
   users home directory. Otherwise if the name doesn't start with
   '/', it refers to a file in the default configuration
   directory; the built-in default directory can be overridden
   with the FONTCONFIG_PATH environment variable.

FcConfigParseAndLoad

Name

   FcConfigParseAndLoad -- load a configuration file

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcConfigParseAndLoad(FcConfig *config, const FcChar8
   *file, FcBool complain);

Description

   Walks the configuration in 'file' and constructs the internal
   representation in 'config'. Any include files referenced from
   within 'file' will be loaded and parsed. If 'complain' is
   FcFalse, no warning will be displayed if 'file' does not exist.
   Error and warning messages will be output to stderr. Returns
   FcFalse if some error occurred while loading the file, either a
   parse error, semantic error or allocation failure. Otherwise
   returns FcTrue.

FcConfigGetSysRoot

Name

   FcConfigGetSysRoot -- Obtain the system root directory

Synopsis

#include <fontconfig/fontconfig.h>

   const FcChar8 * FcConfigGetSysRoot(const FcConfig *config);

Description

   Obtrains the system root directory in 'config' if available.

Since

   version 2.10.92

FcConfigSetSysRoot

Name

   FcConfigSetSysRoot -- Set the system root directory

Synopsis

#include <fontconfig/fontconfig.h>

   void FcConfigSetSysRoot(FcConfig *config, const FcChar8
   *sysroot);

Description

   Set 'sysroot' as the system root directory. fontconfig prepend
   'sysroot' to the cache directories in order to allow people to
   generate caches at the build time. Note that this causes
   changing current config. i.e. this function calls
   FcConfigSetCurrent() internally.

Since

   version 2.10.92
     __________________________________________________________

FcObjectType

   Table of Contents
   FcNameRegisterObjectTypes -- Register object types
   FcNameUnregisterObjectTypes -- Unregister object types
   FcNameGetObjectType -- Lookup an object type

   Provides for application-specified font name object types so
   that new pattern elements can be generated from font names.

FcNameRegisterObjectTypes

Name

   FcNameRegisterObjectTypes -- Register object types

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcNameRegisterObjectTypes(const FcObjectType *types, int
   ntype);

Description

   Deprecated. Does nothing. Returns FcFalse.

FcNameUnregisterObjectTypes

Name

   FcNameUnregisterObjectTypes -- Unregister object types

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcNameUnregisterObjectTypes(const FcObjectType *types,
   int ntype);

Description

   Deprecated. Does nothing. Returns FcFalse.

FcNameGetObjectType

Name

   FcNameGetObjectType -- Lookup an object type

Synopsis

#include <fontconfig/fontconfig.h>

   const FcObjectType * FcNameGetObjectType(const char *object);

Description

   Return the object type for the pattern element named object.
     __________________________________________________________

FcConstant

   Table of Contents
   FcNameRegisterConstants -- Register symbolic constants
   FcNameUnregisterConstants -- Unregister symbolic constants
   FcNameGetConstant -- Lookup symbolic constant
   FcNameConstant -- Get the value for a symbolic constant

   Provides for application-specified symbolic constants for font
   names.

FcNameRegisterConstants

Name

   FcNameRegisterConstants -- Register symbolic constants

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcNameRegisterConstants(const FcConstant *consts, int
   nconsts);

Description

   Deprecated. Does nothing. Returns FcFalse.

FcNameUnregisterConstants

Name

   FcNameUnregisterConstants -- Unregister symbolic constants

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcNameUnregisterConstants(const FcConstant *consts, int
   nconsts);

Description

   Deprecated. Does nothing. Returns FcFalse.

FcNameGetConstant

Name

   FcNameGetConstant -- Lookup symbolic constant

Synopsis

#include <fontconfig/fontconfig.h>

   const FcConstant * FcNameGetConstant(FcChar8 *string);

Description

   Return the FcConstant structure related to symbolic constant
   string.

FcNameConstant

Name

   FcNameConstant -- Get the value for a symbolic constant

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcNameConstant(FcChar8 *string, int *result);

Description

   Returns whether a symbolic constant with name string is
   registered, placing the value of the constant in result if
   present.
     __________________________________________________________

FcWeight

   Table of Contents
   FcWeightFromOpenType -- Convert from OpenType weight values to
          fontconfig ones

   FcWeightToOpenType -- Convert from fontconfig weight values to
          OpenType ones

   Maps weights to and from OpenType weights.

FcWeightFromOpenType

Name

   FcWeightFromOpenType -- Convert from OpenType weight values to
   fontconfig ones

Synopsis

#include <fontconfig/fontconfig.h>

   int FcWeightFromOpenType(intot_weight);

Description

   FcWeightFromOpenType returns an integer value to use with
   FC_WEIGHT, from an integer in the 1..1000 range, resembling the
   numbers from OpenType specification's OS/2 usWeight numbers,
   which are also similar to CSS font-weight numbers. If input is
   negative, zero, or greater than 1000, returns -1. This function
   linearly interpolates between various FC_WEIGHT_* constants. As
   such, the returned value does not necessarily match any of the
   predefined constants.

Since

   version 2.11.91

FcWeightToOpenType

Name

   FcWeightToOpenType -- Convert from fontconfig weight values to
   OpenType ones

Synopsis

#include <fontconfig/fontconfig.h>

   int FcWeightToOpenType(intot_weight);

Description

   FcWeightToOpenType is the inverse of FcWeightFromOpenType. If
   the input is less than FC_WEIGHT_THIN or greater than
   FC_WEIGHT_EXTRABLACK, returns -1. Otherwise returns a number in
   the range 1 to 1000.

Since

   version 2.11.91
     __________________________________________________________

FcBlanks

   Table of Contents
   FcBlanksCreate -- Create an FcBlanks
   FcBlanksDestroy -- Destroy and FcBlanks
   FcBlanksAdd -- Add a character to an FcBlanks
   FcBlanksIsMember -- Query membership in an FcBlanks

   An FcBlanks object holds a list of Unicode chars which are
   expected to be blank when drawn. When scanning new fonts, any
   glyphs which are empty and not in this list will be assumed to
   be broken and not placed in the FcCharSet associated with the
   font. This provides a significantly more accurate CharSet for
   applications.

FcBlanksCreate

Name

   FcBlanksCreate -- Create an FcBlanks

Synopsis

#include <fontconfig/fontconfig.h>

   FcBlanks * FcBlanksCreate(void);

Description

   Creates an empty FcBlanks object.

FcBlanksDestroy

Name

   FcBlanksDestroy -- Destroy and FcBlanks

Synopsis

#include <fontconfig/fontconfig.h>

   void FcBlanksDestroy(FcBlanks *b);

Description

   Destroys an FcBlanks object, freeing any associated memory.

FcBlanksAdd

Name

   FcBlanksAdd -- Add a character to an FcBlanks

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcBlanksAdd(FcBlanks *b, FcChar32 ucs4);

Description

   Adds a single character to an FcBlanks object, returning
   FcFalse if this process ran out of memory.

FcBlanksIsMember

Name

   FcBlanksIsMember -- Query membership in an FcBlanks

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcBlanksIsMember(FcBlanks *b, FcChar32 ucs4);

Description

   Returns whether the specified FcBlanks object contains the
   indicated Unicode value.
     __________________________________________________________

FcAtomic

   Table of Contents
   FcAtomicCreate -- create an FcAtomic object
   FcAtomicLock -- lock a file
   FcAtomicNewFile -- return new temporary file name
   FcAtomicOrigFile -- return original file name
   FcAtomicReplaceOrig -- replace original with new
   FcAtomicDeleteNew -- delete new file
   FcAtomicUnlock -- unlock a file
   FcAtomicDestroy -- destroy an FcAtomic object

   These functions provide a safe way to update configuration
   files, allowing ongoing reading of the old configuration file
   while locked for writing and ensuring that a consistent and
   complete version of the configuration file is always available.

FcAtomicCreate

Name

   FcAtomicCreate -- create an FcAtomic object

Synopsis

#include <fontconfig/fontconfig.h>

   FcAtomic * FcAtomicCreate(const FcChar8 *file);

Description

   Creates a data structure containing data needed to control
   access to file. Writing is done to a separate file. Once that
   file is complete, the original configuration file is atomically
   replaced so that reading process always see a consistent and
   complete file without the need to lock for reading.

FcAtomicLock

Name

   FcAtomicLock -- lock a file

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcAtomicLock(FcAtomic *atomic);

Description

   Attempts to lock the file referenced by atomic. Returns FcFalse
   if the file is already locked, else returns FcTrue and leaves
   the file locked.

FcAtomicNewFile

Name

   FcAtomicNewFile -- return new temporary file name

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcAtomicNewFile(FcAtomic *atomic);

Description

   Returns the filename for writing a new version of the file
   referenced by atomic.

FcAtomicOrigFile

Name

   FcAtomicOrigFile -- return original file name

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcAtomicOrigFile(FcAtomic *atomic);

Description

   Returns the file referenced by atomic.

FcAtomicReplaceOrig

Name

   FcAtomicReplaceOrig -- replace original with new

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcAtomicReplaceOrig(FcAtomic *atomic);

Description

   Replaces the original file referenced by atomic with the new
   file. Returns FcFalse if the file cannot be replaced due to
   permission issues in the filesystem. Otherwise returns FcTrue.

FcAtomicDeleteNew

Name

   FcAtomicDeleteNew -- delete new file

Synopsis

#include <fontconfig/fontconfig.h>

   void FcAtomicDeleteNew(FcAtomic *atomic);

Description

   Deletes the new file. Used in error recovery to back out
   changes.

FcAtomicUnlock

Name

   FcAtomicUnlock -- unlock a file

Synopsis

#include <fontconfig/fontconfig.h>

   void FcAtomicUnlock(FcAtomic *atomic);

Description

   Unlocks the file.

FcAtomicDestroy

Name

   FcAtomicDestroy -- destroy an FcAtomic object

Synopsis

#include <fontconfig/fontconfig.h>

   void FcAtomicDestroy(FcAtomic *atomic);

Description

   Destroys atomic.
     __________________________________________________________

File and Directory routines

   Table of Contents
   FcFileScan -- scan a font file
   FcFileIsDir -- check whether a file is a directory
   FcDirScan -- scan a font directory without caching it
   FcDirSave -- DEPRECATED: formerly used to save a directory
          cache

   FcDirCacheUnlink -- Remove all caches related to dir
   FcDirCacheValid -- check directory cache
   FcDirCacheLoad -- load a directory cache
   FcDirCacheRescan -- Re-scan a directory cache
   FcDirCacheRead -- read or construct a directory cache
   FcDirCacheLoadFile -- load a cache file
   FcDirCacheUnload -- unload a cache file

   These routines work with font files and directories, including
   font directory cache files.

FcFileScan

Name

   FcFileScan -- scan a font file

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcFileScan(FcFontSet *set, FcStrSet *dirs, FcFileCache
   *cache, FcBlanks *blanks, const FcChar8 *file, FcBool force);

Description

   Scans a single file and adds all fonts found to set. If force
   is FcTrue, then the file is scanned even if associated
   information is found in cache. If file is a directory, it is
   added to dirs. Whether fonts are found depends on fontconfig
   policy as well as the current configuration. Internally,
   fontconfig will ignore BDF and PCF fonts which are not in
   Unicode (or the effectively equivalent ISO Latin-1) encoding as
   those are not usable by Unicode-based applications. The
   configuration can ignore fonts based on filename or contents of
   the font file itself. Returns FcFalse if any of the fonts
   cannot be added (due to allocation failure). Otherwise returns
   FcTrue.

FcFileIsDir

Name

   FcFileIsDir -- check whether a file is a directory

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcFileIsDir(const FcChar8 *file);

Description

   Returns FcTrue if file is a directory, otherwise returns
   FcFalse.

FcDirScan

Name

   FcDirScan -- scan a font directory without caching it

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcDirScan(FcFontSet *set, FcStrSet *dirs, FcFileCache
   *cache, FcBlanks *blanks, const FcChar8 *dir, FcBool force);

Description

   If cache is not zero or if force is FcFalse, this function
   currently returns FcFalse. Otherwise, it scans an entire
   directory and adds all fonts found to set. Any subdirectories
   found are added to dirs. Calling this function does not create
   any cache files. Use FcDirCacheRead() if caching is desired.

FcDirSave

Name

   FcDirSave -- DEPRECATED: formerly used to save a directory
   cache

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcDirSave(FcFontSet *set, FcStrSet *dirs, const FcChar8
   *dir);

Description

   This function now does nothing aside from returning FcFalse. It
   used to creates the per-directory cache file for dir and
   populates it with the fonts in set and subdirectories in dirs.
   All of this functionality is now automatically managed by
   FcDirCacheLoad and FcDirCacheRead.

FcDirCacheUnlink

Name

   FcDirCacheUnlink -- Remove all caches related to dir

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcDirCacheUnlink(const FcChar8 *dir, FcConfig *config);

Description

   Scans the cache directories in config, removing any instances
   of the cache file for dir. Returns FcFalse when some internal
   error occurs (out of memory, etc). Errors actually unlinking
   any files are ignored.

FcDirCacheValid

Name

   FcDirCacheValid -- check directory cache

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcDirCacheValid(const FcChar8 *dir);

Description

   Returns FcTrue if dir has an associated valid cache file, else
   returns FcFalse

FcDirCacheLoad

Name

   FcDirCacheLoad -- load a directory cache

Synopsis

#include <fontconfig/fontconfig.h>

   FcCache * FcDirCacheLoad(const FcChar8 *dir, FcConfig *config,
   FcChar8 **cache_file);

Description

   Loads the cache related to dir. If no cache file exists,
   returns NULL. The name of the cache file is returned in
   cache_file, unless that is NULL. See also FcDirCacheRead.

FcDirCacheRescan

Name

   FcDirCacheRescan -- Re-scan a directory cache

Synopsis

#include <fontconfig/fontconfig.h>

   FcCache * FcDirCacheRescan(const FcChar8 *dir, FcConfig
   *config);

Description

   Re-scan directories only at dir and update the cache. returns
   NULL if failed.

Since

   version 2.11.1

FcDirCacheRead

Name

   FcDirCacheRead -- read or construct a directory cache

Synopsis

#include <fontconfig/fontconfig.h>

   FcCache * FcDirCacheRead(const FcChar8 *dir, FcBool force,
   FcConfig *config);

Description

   This returns a cache for dir. If force is FcFalse, then an
   existing, valid cache file will be used. Otherwise, a new cache
   will be created by scanning the directory and that returned.

FcDirCacheLoadFile

Name

   FcDirCacheLoadFile -- load a cache file

Synopsis

#include <fontconfig/fontconfig.h>

   FcCache * FcDirCacheLoadFile(const FcChar8 *cache_file, struct
   stat *file_stat);

Description

   This function loads a directory cache from cache_file. If
   file_stat is non-NULL, it will be filled with the results of
   stat(2) on the cache file.

FcDirCacheUnload

Name

   FcDirCacheUnload -- unload a cache file

Synopsis

#include <fontconfig/fontconfig.h>

   void FcDirCacheUnload(FcCache *cache);

Description

   This function dereferences cache. When no other references to
   it remain, all memory associated with the cache will be freed.
     __________________________________________________________

FcCache routines

   Table of Contents
   FcCacheDir -- Return directory of cache
   FcCacheCopySet -- Returns a copy of the fontset from cache
   FcCacheSubdir -- Return the i'th subdirectory.
   FcCacheNumSubdir -- Return the number of subdirectories in
          cache.

   FcCacheNumFont -- Returns the number of fonts in cache.
   FcDirCacheClean -- This tries to clean up the cache directory
          of cache_dir. This returns FcTrue if the operation is
          successfully complete. otherwise FcFalse.

   FcCacheCreateTagFile -- Create CACHEDIR.TAG at cache directory.

   These routines work with font directory caches, accessing their
   contents in limited ways. It is not expected that normal
   applications will need to use these functions.

FcCacheDir

Name

   FcCacheDir -- Return directory of cache

Synopsis

#include <fontconfig/fontconfig.h>

   const FcChar8 * FcCacheDir(const FcCache *cache);

Description

   This function returns the directory from which the cache was
   constructed.

FcCacheCopySet

Name

   FcCacheCopySet -- Returns a copy of the fontset from cache

Synopsis

#include <fontconfig/fontconfig.h>

   FcFontSet * FcCacheCopySet(const FcCache *cache);

Description

   The returned fontset contains each of the font patterns from
   cache. This fontset may be modified, but the patterns from the
   cache are read-only.

FcCacheSubdir

Name

   FcCacheSubdir -- Return the i'th subdirectory.

Synopsis

#include <fontconfig/fontconfig.h>

   const FcChar8 * FcCacheSubdir(const FcCache *cache, inti);

Description

   The set of subdirectories stored in a cache file are indexed by
   this function, i should range from 0 to n-1, where n is the
   return value from FcCacheNumSubdir.

FcCacheNumSubdir

Name

   FcCacheNumSubdir -- Return the number of subdirectories in
   cache.

Synopsis

#include <fontconfig/fontconfig.h>

   int FcCacheNumSubdir(const FcCache *cache);

Description

   This returns the total number of subdirectories in the cache.

FcCacheNumFont

Name

   FcCacheNumFont -- Returns the number of fonts in cache.

Synopsis

#include <fontconfig/fontconfig.h>

   int FcCacheNumFont(const FcCache *cache);

Description

   This returns the number of fonts which would be included in the
   return from FcCacheCopySet.

FcDirCacheClean

Name

   FcDirCacheClean -- This tries to clean up the cache directory
   of cache_dir. This returns FcTrue if the operation is
   successfully complete. otherwise FcFalse.

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcDirCacheClean(const FcChar8 *cache_dir,
   FcBoolverbose);

Description

Since

   version 2.9.91

FcCacheCreateTagFile

Name

   FcCacheCreateTagFile -- Create CACHEDIR.TAG at cache directory.

Synopsis

#include <fontconfig/fontconfig.h>

   void FcCacheCreateTagFile(const FcConfig *config);

Description

   This tries to create CACHEDIR.TAG file at the cache directory
   registered to config.

Since

   version 2.9.91
     __________________________________________________________

FcStrSet and FcStrList

   Table of Contents
   FcStrSetCreate -- create a string set
   FcStrSetMember -- check set for membership
   FcStrSetEqual -- check sets for equality
   FcStrSetAdd -- add to a string set
   FcStrSetAddFilename -- add a filename to a string set
   FcStrSetDel -- delete from a string set
   FcStrSetDestroy -- destroy a string set
   FcStrListCreate -- create a string iterator
   FcStrListFirst -- get first string in iteration
   FcStrListNext -- get next string in iteration
   FcStrListDone -- destroy a string iterator

   A data structure for enumerating strings, used to list
   directories while scanning the configuration as directories are
   added while scanning.

FcStrSetCreate

Name

   FcStrSetCreate -- create a string set

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrSet * FcStrSetCreate(void);

Description

   Create an empty set.

FcStrSetMember

Name

   FcStrSetMember -- check set for membership

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcStrSetMember(FcStrSet *set, const FcChar8 *s);

Description

   Returns whether s is a member of set.

FcStrSetEqual

Name

   FcStrSetEqual -- check sets for equality

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcStrSetEqual(FcStrSet *set_a, FcStrSet *set_b);

Description

   Returns whether set_a contains precisely the same strings as
   set_b. Ordering of strings within the two sets is not
   considered.

FcStrSetAdd

Name

   FcStrSetAdd -- add to a string set

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcStrSetAdd(FcStrSet *set, const FcChar8 *s);

Description

   Adds a copy of s to set.

FcStrSetAddFilename

Name

   FcStrSetAddFilename -- add a filename to a string set

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcStrSetAddFilename(FcStrSet *set, const FcChar8 *s);

Description

   Adds a copy s to set, The copy is created with
   FcStrCopyFilename so that leading '~' values are replaced with
   the value of the HOME environment variable.

FcStrSetDel

Name

   FcStrSetDel -- delete from a string set

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcStrSetDel(FcStrSet *set, const FcChar8 *s);

Description

   Removes s from set, returning FcTrue if s was a member else
   FcFalse.

FcStrSetDestroy

Name

   FcStrSetDestroy -- destroy a string set

Synopsis

#include <fontconfig/fontconfig.h>

   void FcStrSetDestroy(FcStrSet *set);

Description

   Destroys set.

FcStrListCreate

Name

   FcStrListCreate -- create a string iterator

Synopsis

#include <fontconfig/fontconfig.h>

   FcStrList * FcStrListCreate(FcStrSet *set);

Description

   Creates an iterator to list the strings in set.

FcStrListFirst

Name

   FcStrListFirst -- get first string in iteration

Synopsis

#include <fontconfig/fontconfig.h>

   void FcStrListFirst(FcStrList *list);

Description

   Returns the first string in list.

Since

   version 2.11.0

FcStrListNext

Name

   FcStrListNext -- get next string in iteration

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrListNext(FcStrList *list);

Description

   Returns the next string in list.

FcStrListDone

Name

   FcStrListDone -- destroy a string iterator

Synopsis

#include <fontconfig/fontconfig.h>

   void FcStrListDone(FcStrList *list);

Description

   Destroys the enumerator list.
     __________________________________________________________

String utilities

   Table of Contents
   FcUtf8ToUcs4 -- convert UTF-8 to UCS4
   FcUcs4ToUtf8 -- convert UCS4 to UTF-8
   FcUtf8Len -- count UTF-8 encoded chars
   FcUtf16ToUcs4 -- convert UTF-16 to UCS4
   FcUtf16Len -- count UTF-16 encoded chars
   FcIsLower -- check for lower case ASCII character
   FcIsUpper -- check for upper case ASCII character
   FcToLower -- convert upper case ASCII to lower case
   FcStrCopy -- duplicate a string
   FcStrDowncase -- create a lower case translation of a string
   FcStrCopyFilename -- create a complete path from a filename
   FcStrCmp -- compare UTF-8 strings
   FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring case
   FcStrStr -- locate UTF-8 substring
   FcStrStrIgnoreCase -- locate UTF-8 substring ignoring ASCII
          case

   FcStrPlus -- concatenate two strings
   FcStrFree -- free a string
   FcStrDirname -- directory part of filename
   FcStrBasename -- last component of filename

   Fontconfig manipulates many UTF-8 strings represented with the
   FcChar8 type. These functions are exposed to help applications
   deal with these UTF-8 strings in a locale-insensitive manner.

FcUtf8ToUcs4

Name

   FcUtf8ToUcs4 -- convert UTF-8 to UCS4

Synopsis

#include <fontconfig/fontconfig.h>

   int FcUtf8ToUcs4(FcChar8 *src, FcChar32 *dst, int len);

Description

   Converts the next Unicode char from src into dst and returns
   the number of bytes containing the char. src must be at least
   len bytes long.

FcUcs4ToUtf8

Name

   FcUcs4ToUtf8 -- convert UCS4 to UTF-8

Synopsis

#include <fontconfig/fontconfig.h>

   int FcUcs4ToUtf8(FcChar32 src, FcChar8 dst[FC_UTF8_MAX_LEN]);

Description

   Converts the Unicode char from src into dst and returns the
   number of bytes needed to encode the char.

FcUtf8Len

Name

   FcUtf8Len -- count UTF-8 encoded chars

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcUtf8Len(FcChar8 *src, int len, int *nchar, int
   *wchar);

Description

   Counts the number of Unicode chars in len bytes of src. Places
   that count in nchar. wchar contains 1, 2 or 4 depending on the
   number of bytes needed to hold the largest Unicode char
   counted. The return value indicates whether src is a
   well-formed UTF8 string.

FcUtf16ToUcs4

Name

   FcUtf16ToUcs4 -- convert UTF-16 to UCS4

Synopsis

#include <fontconfig/fontconfig.h>

   int FcUtf16ToUcs4(FcChar8 *src, FcEndian endian, FcChar32 *dst,
   int len);

Description

   Converts the next Unicode char from src into dst and returns
   the number of bytes containing the char. src must be at least
   len bytes long. Bytes of src are combined into 16-bit units
   according to endian.

FcUtf16Len

Name

   FcUtf16Len -- count UTF-16 encoded chars

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcUtf16Len(FcChar8 *src, FcEndian endian, int len, int
   *nchar, int *wchar);

Description

   Counts the number of Unicode chars in len bytes of src. Bytes
   of src are combined into 16-bit units according to endian.
   Places that count in nchar. wchar contains 1, 2 or 4 depending
   on the number of bytes needed to hold the largest Unicode char
   counted. The return value indicates whether string is a
   well-formed UTF16 string.

FcIsLower

Name

   FcIsLower -- check for lower case ASCII character

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcIsLower(FcChar8c);

Description

   This macro checks whether c is an lower case ASCII letter.

FcIsUpper

Name

   FcIsUpper -- check for upper case ASCII character

Synopsis

#include <fontconfig/fontconfig.h>

   FcBool FcIsUpper(FcChar8c);

Description

   This macro checks whether c is a upper case ASCII letter.

FcToLower

Name

   FcToLower -- convert upper case ASCII to lower case

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 FcToLower(FcChar8c);

Description

   This macro converts upper case ASCII c to the equivalent lower
   case letter.

FcStrCopy

Name

   FcStrCopy -- duplicate a string

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrCopy(const FcChar8 *s);

Description

   Allocates memory, copies s and returns the resulting buffer.
   Yes, this is strdup, but that function isn't available on every
   platform.

FcStrDowncase

Name

   FcStrDowncase -- create a lower case translation of a string

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrDowncase(const FcChar8 *s);

Description

   Allocates memory, copies s, converting upper case letters to
   lower case and returns the allocated buffer.

FcStrCopyFilename

Name

   FcStrCopyFilename -- create a complete path from a filename

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrCopyFilename(const FcChar8 *s);

Description

   FcStrCopyFilename constructs an absolute pathname from s. It
   converts any leading '~' characters in to the value of the HOME
   environment variable, and any relative paths are converted to
   absolute paths using the current working directory. Sequences
   of '/' characters are converted to a single '/', and names
   containing the current directory '.' or parent directory '..'
   are correctly reconstructed. Returns NULL if '~' is the leading
   character and HOME is unset or disabled (see
   FcConfigEnableHome).

FcStrCmp

Name

   FcStrCmp -- compare UTF-8 strings

Synopsis

#include <fontconfig/fontconfig.h>

   int FcStrCmp(const FcChar8 *s1, const FcChar8 *s2);

Description

   Returns the usual <0, 0, >0 result of comparing s1 and s2.

FcStrCmpIgnoreCase

Name

   FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring case

Synopsis

#include <fontconfig/fontconfig.h>

   int FcStrCmpIgnoreCase(const FcChar8 *s1, const FcChar8 *s2);

Description

   Returns the usual <0, 0, >0 result of comparing s1 and s2. This
   test is case-insensitive for all proper UTF-8 encoded strings.

FcStrStr

Name

   FcStrStr -- locate UTF-8 substring

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrStr(const FcChar8 *s1, const FcChar8 *s2);

Description

   Returns the location of s2 in s1. Returns NULL if s2 is not
   present in s1. This test will operate properly with UTF8
   encoded strings.

FcStrStrIgnoreCase

Name

   FcStrStrIgnoreCase -- locate UTF-8 substring ignoring ASCII
   case

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrStrIgnoreCase(const FcChar8 *s1, const FcChar8
   *s2);

Description

   Returns the location of s2 in s1, ignoring case. Returns NULL
   if s2 is not present in s1. This test is case-insensitive for
   all proper UTF-8 encoded strings.

FcStrPlus

Name

   FcStrPlus -- concatenate two strings

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrPlus(const FcChar8 *s1, const FcChar8 *s2);

Description

   This function allocates new storage and places the
   concatenation of s1 and s2 there, returning the new string.

FcStrFree

Name

   FcStrFree -- free a string

Synopsis

#include <fontconfig/fontconfig.h>

   void FcStrFree(FcChar8 *s);

Description

   This is just a wrapper around free(3) which helps track memory
   usage of strings within the fontconfig library.

FcStrDirname

Name

   FcStrDirname -- directory part of filename

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrDirname(const FcChar8 *file);

Description

   Returns the directory containing file. This is returned in
   newly allocated storage which should be freed when no longer
   needed.

FcStrBasename

Name

   FcStrBasename -- last component of filename

Synopsis

#include <fontconfig/fontconfig.h>

   FcChar8 * FcStrBasename(const FcChar8 *file);

Description

   Returns the filename of file stripped of any leading directory
   names. This is returned in newly allocated storage which should
   be freed when no longer needed.
@


1.3
log
@Update to fontconfig 2.12.1.

Tested by krw@@, dcoppa@@, ok dcoppa@@.
@
text
@d1 1
a1 1
Fontconfig Developers Reference, Version 2.12.1
@


1.2
log
@Update to fontconfig 2.11.1. Tested by shadchin@@
@
text
@d1 1
a1 1
                Fontconfig Developers Reference, Version 2.11.1
d5 21
a25 19
   Permission to use, copy, modify, distribute, and sell this software and
   its documentation for any purpose is hereby granted without fee, provided
   that the above copyright notice appear in all copies and that both that
   copyright notice and this permission notice appear in supporting
   documentation, and that the name of the author(s) not be used in
   advertising or publicity pertaining to distribution of the software
   without specific, written prior permission. The authors make no
   representations about the suitability of this software for any purpose. It
   is provided "as is" without express or implied warranty.

   THE AUTHOR(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
   INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
   EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY SPECIAL, INDIRECT OR
   CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
   USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
   OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
   PERFORMANCE OF THIS SOFTWARE.

            -------------------------------------------------------
d28 4
a31 8

   [1]DESCRIPTION

   [2]FUNCTIONAL OVERVIEW

   [3]Datatypes

   [4]FUNCTIONS
d37 1
a37 2

   --------------------------------------------------------------------------
d41 23
a63 21
   Fontconfig contains two essential modules, the configuration module which
   builds an internal configuration from XML files and the matching module
   which accepts font patterns and returns the nearest matching font.

   --------------------------------------------------------------------------

  FONT CONFIGURATION

   The configuration module consists of the FcConfig datatype, libexpat and
   FcConfigParse which walks over an XML tree and amends a configuration with
   data found within. From an external perspective, configuration of the
   library consists of generating a valid XML tree and feeding that to
   FcConfigParse. The only other mechanism provided to applications for
   changing the running configuration is to add fonts and directories to the
   list of application-provided font files.

   The intent is to make font configurations relatively static, and shared by
   as many applications as possible. It is hoped that this will lead to more
   stable font selection when passing names from one application to another.
   XML was chosen as a configuration file format because it provides a format
   which is easy for external agents to edit while retaining the correct
d66 19
a84 19
   Font configuration is separate from font matching; applications needing to
   do their own matching can access the available fonts from the library and
   perform private matching. The intent is to permit applications to pick and
   choose appropriate functionality from the library instead of forcing them
   to choose between this library and a private configuration mechanism. The
   hope is that this will ensure that configuration of fonts for all
   applications can be centralized in one place. Centralizing font
   configuration will simplify and regularize font installation and
   customization.

   --------------------------------------------------------------------------

  FONT PROPERTIES

   While font patterns may contain essentially any properties, there are some
   well known properties with associated types. Fontconfig uses some of these
   properties for font matching and font completion. Others are provided as a
   convenience for the application's rendering mechanism.

d90 2
a91 1
    familylang     FC_FAMILYLANG          String  Language corresponding to
d93 2
a94 1
    style          FC_STYLE               String  Font style. Overrides weight
d96 2
a97 1
    stylelang      FC_STYLELANG           String  Language corresponding to
d99 4
a102 2
    fullname       FC_FULLNAME            String  Font face full name where
                                                  different from family and
d104 2
a105 1
    fullnamelang   FC_FULLNAMELANG        String  Language corresponding to
d107 4
a110 2
    slant          FC_SLANT               Int     Italic, oblique or roman
    weight         FC_WEIGHT              Int     Light, medium, demibold,
d113 4
a116 2
    width          FC_WIDTH               Int     Condensed, normal or expanded
    aspect         FC_ASPECT              Double  Stretches glyphs horizontally
d119 2
a120 1
    spacing        FC_SPACING             Int     Proportional, dual-width,
d125 2
a126 1
    hinting        FC_HINTING             Bool    Whether the rasterizer should
d128 2
a129 1
    hintstyle      FC_HINT_STYLE          Int     Automatic hinting style
d131 2
a132 1
    autohint       FC_AUTOHINT            Bool    Use autohinter instead of
d134 6
a139 3
    globaladvance  FC_GLOBAL_ADVANCE      Bool    Use font global advance data (deprecated)
    file           FC_FILE                String  The filename holding the font
    index          FC_INDEX               Int     The index of the font within
d141 2
a142 1
    ftface         FC_FT_FACE             FT_Face Use the specified FreeType
d144 14
a157 5
    rasterizer     FC_RASTERIZER          String  Which rasterizer is in use (deprecated)
    outline        FC_OUTLINE             Bool    Whether the glyphs are outlines
    scalable       FC_SCALABLE            Bool    Whether glyphs can be scaled
    scale          FC_SCALE               Double  Scale factor for point->pixel
                                                  conversions
d159 4
a162 2
    rgba           FC_RGBA                Int     unknown, rgb, bgr, vrgb,
                                                  vbgr, none - subpixel geometry
d164 2
a165 1
    minspace       FC_MINSPACE            Bool    Eliminate leading from line
d167 2
a168 1
    charset        FC_CHARSET             CharSet Unicode chars encoded by
d171 6
a176 3
                                                  languages this font supports
    fontversion    FC_FONTVERSION         Int     Version number of the font
    capability     FC_CAPABILITY          String  List of layout capabilities in
d178 2
d181 10
a190 2
                                                  synthetically embolden the font
    fontfeatures   FC_FONT_FEATURES       String  List of extra feature tags in
d192 15
a206 10
    namelang       FC_NAMELANG            String  Language name to be used for the
                                                  default value of familylang,
                                                  stylelang and fullnamelang
    prgname        FC_PRGNAME             String  Name of the running program
    hash           FC_HASH                String  SHA256 hash value of the font data
                                                  with "sha256:" prefix.
    postscriptname FC_POSTSCRIPT_NAME     String  Font name in PostScript


   --------------------------------------------------------------------------
d210 51
a260 32
   Fontconfig uses abstract data types to hide internal implementation
   details for most data structures. A few structures are exposed where
   appropriate.

   --------------------------------------------------------------------------

  FcChar8, FcChar16, FcChar32, FcBool

   These are primitive data types; the FcChar* types hold precisely the
   number of bits stated (if supported by the C implementation). FcBool holds
   one of two C preprocessor symbols: FcFalse or FcTrue.

   --------------------------------------------------------------------------

  FcMatrix

   An FcMatrix holds an affine transformation, usually used to reshape
   glyphs. A small set of matrix operations are provided to manipulate these.

           typedef struct _FcMatrix {
                   double xx, xy, yx, yy;
           } FcMatrix;


   --------------------------------------------------------------------------

  FcCharSet

   An FcCharSet is an abstract type that holds the set of encoded Unicode
   chars in a font. Operations to build and compare these sets are provided.

   --------------------------------------------------------------------------
d262 1
a262 23
  FcLangSet

   An FcLangSet is an abstract type that holds the set of languages supported
   by a font. Operations to build and compare these sets are provided. These
   are computed for a font based on orthographic information built into the
   fontconfig library. Fontconfig has orthographies for all of the ISO 639-1
   languages except for MS, NA, PA, PS, QU, RN, RW, SD, SG, SN, SU and ZA. If
   you have orthographic information for any of these languages, please
   submit them.

   --------------------------------------------------------------------------

  FcLangResult

   An FcLangResult is an enumeration used to return the results of comparing
   two language strings or FcLangSet objects. FcLangEqual means the objects
   match language and territory. FcLangDifferentTerritory means the objects
   match in language but differ in territory. FcLangDifferentLang means the
   objects differ in language.

   --------------------------------------------------------------------------

  FcType
d265 1
d267 1
a267 57
   --------------------------------------------------------------------------

  FcValue

   An FcValue object holds a single value with one of a number of different
   types. The 'type' tag indicates which member is valid.

           typedef struct _FcValue {
                   FcType type;
                   union {
                           const FcChar8 *s;
                           int i;
                           FcBool b;
                           double d;
                           const FcMatrix *m;
                           const FcCharSet *c;
                           void *f;
                           const FcLangSet *l;
                   } u;
           } FcValue;


                     FcValue Members

           Type            Union member    Datatype
           --------------------------------
           FcTypeVoid      (none)          (none)
           FcTypeInteger   i               int
           FcTypeDouble    d               double
           FcTypeString    s               FcChar8 *
           FcTypeBool      b               b
           FcTypeMatrix    m               FcMatrix *
           FcTypeCharSet   c               FcCharSet *
           FcTypeFTFace    f               void * (FT_Face)
           FcTypeLangSet   l               FcLangSet *


   --------------------------------------------------------------------------

  FcPattern

   holds a set of names with associated value lists; each name refers to a
   property of a font. FcPatterns are used as inputs to the matching code as
   well as holding information about specific fonts. Each property can hold
   one or more values; conventionally all of the same type, although the
   interface doesn't demand that.

   --------------------------------------------------------------------------

  FcFontSet

           typedef struct _FcFontSet {
                   int nfont;
                   int sfont;
                   FcPattern **fonts;
           } FcFontSet;

d269 131
a399 85
   An FcFontSet contains a list of FcPatterns. Internally fontconfig uses
   this data structure to hold sets of fonts. Externally, fontconfig returns
   the results of listing fonts in this format. 'nfont' holds the number of
   patterns in the 'fonts' array; 'sfont' is used to indicate the size of
   that array.

   --------------------------------------------------------------------------

  FcStrSet, FcStrList

   FcStrSet holds a list of strings that can be appended to and enumerated.
   Its unique characteristic is that the enumeration works even while strings
   are appended during enumeration. FcStrList is used during enumeration to
   safely and correctly walk the list of strings even while that list is
   edited in the middle of enumeration.

   --------------------------------------------------------------------------

  FcObjectSet

           typedef struct _FcObjectSet {
                   int nobject;
                   int sobject;
                   const char **objects;
           } FcObjectSet;


   holds a set of names and is used to specify which fields from fonts are
   placed in the the list of returned patterns when listing fonts.

   --------------------------------------------------------------------------

  FcObjectType

           typedef struct _FcObjectType {
                   const char *object;
                   FcType type;
           } FcObjectType;


   marks the type of a pattern element generated when parsing font names.
   Applications can add new object types so that font names may contain the
   new elements.

   --------------------------------------------------------------------------

  FcConstant

           typedef struct _FcConstant {
               const FcChar8 *name;
               const char *object;
               int value;
           } FcConstant;


   Provides for symbolic constants for new pattern elements. When 'name' is
   seen in a font name, an 'object' element is created with value 'value'.

   --------------------------------------------------------------------------

  FcBlanks

   holds a list of Unicode chars which are expected to be blank; unexpectedly
   blank chars are assumed to be invalid and are elided from the charset
   associated with the font.

   --------------------------------------------------------------------------

  FcFileCache

   holds the per-user cache information for use while loading the font
   database. This is built automatically for the current configuration when
   that is loaded. Applications must always pass '0' when one is requested.

   --------------------------------------------------------------------------

  FcConfig

   holds a complete configuration of the library; there is one default
   configuration, other can be constructed from XML data structures. All
   public entry points that need global data can take an optional FcConfig*
   argument; passing 0 uses the default configuration. FcConfig objects hold
   two sets of fonts, the first contains those specified by the
   configuration, the second set holds those added by the application at
   run-time. Interfaces that need to reference a particular set use one of
d401 1
d403 1
a403 41
   --------------------------------------------------------------------------

  FcSetName

   Specifies one of the two sets of fonts available in a configuration;
   FcSetSystem for those fonts specified in the configuration and
   FcSetApplication which holds fonts provided by the application.

   --------------------------------------------------------------------------

  FcResult

   Used as a return type for functions manipulating FcPattern objects.

         FcResult Values
           Result Code             Meaning
           -----------------------------------------------------------
           FcResultMatch           Object exists with the specified ID
           FcResultNoMatch         Object doesn't exist at all
           FcResultTypeMismatch    Object exists, but the type doesn't match
           FcResultNoId            Object exists, but has fewer values
                                   than specified
           FcResultOutOfMemory     malloc failed


   --------------------------------------------------------------------------

  FcAtomic

   Used for locking access to configuration files. Provides a safe way to
   update configuration files.

   --------------------------------------------------------------------------

  FcCache

   Holds information about the fonts contained in a single directory. Normal
   applications need not worry about this as caches for font access are
   automatically managed by the library. Applications dealing with cache
   management may want to use some of these objects in their work, however
   the included 'fc-cache' program generally suffices for all of that.
d405 37
a441 1
   --------------------------------------------------------------------------
d445 3
a447 2
   These are grouped by functionality, often using the main data type being
   manipulated.
d449 1
a449 3
   --------------------------------------------------------------------------

  Initialization
d452 7
d460 2
a461 9
   [5]FcInitLoadConfigÂ --Â load configuration

   [6]FcInitLoadConfigAndFontsÂ --Â load configuration and font data

   [7]FcInitÂ --Â initialize fontconfig library

   [8]FcFiniÂ --Â finalize fontconfig library

   [9]FcGetVersionÂ --Â library version number
d463 1
a463 7
   [10]FcInitReinitializeÂ --Â re-initialize library

   [11]FcInitBringUptoDateÂ --Â reload configuration files if needed

   These functions provide some control over how the library is initialized.

                                FcInitLoadConfig
d467 1
a467 1
   FcInitLoadConfigÂ --Â load configuration
d471 1
a471 2
   #include <fontconfig/fontconfig.h>

d480 1
a480 1
                            FcInitLoadConfigAndFonts
d484 1
a484 1
   FcInitLoadConfigAndFontsÂ --Â load configuration and font data
d488 1
a488 2
   #include <fontconfig/fontconfig.h>

d494 2
a495 2
   Loads the default configuration file and builds information about the
   available fonts. Returns the resulting configuration.
d497 1
a497 1
                                     FcInit
d501 1
a501 1
   FcInitÂ --Â initialize fontconfig library
d505 1
a505 2
   #include <fontconfig/fontconfig.h>

d511 5
a515 4
   Loads the default configuration file and the fonts referenced therein and
   sets the default configuration to that result. Returns whether this
   process succeeded or not. If the default configuration has already been
   loaded, this routine does nothing and returns FcTrue.
d517 1
a517 1
                                     FcFini
d521 1
a521 1
   FcFiniÂ --Â finalize fontconfig library
d525 1
a525 2
   #include <fontconfig/fontconfig.h>

d531 4
a534 4
   Frees all data structures allocated by previous calls to fontconfig
   functions. Fontconfig returns to an uninitialized state, requiring a new
   call to one of the FcInit functions before any other fontconfig function
   may be called.
d536 1
a536 1
                                  FcGetVersion
d540 1
a540 1
   FcGetVersionÂ --Â library version number
d544 1
a544 2
   #include <fontconfig/fontconfig.h>

d552 1
a552 1
                               FcInitReinitialize
d556 1
a556 1
   FcInitReinitializeÂ --Â re-initialize library
d560 1
a560 2
   #include <fontconfig/fontconfig.h>

d566 5
a570 5
   Forces the default configuration file to be reloaded and resets the
   default configuration. Returns FcFalse if the configuration cannot be
   reloaded (due to configuration file errors, allocation failures or other
   issues) and leaves the existing configuration unchanged. Otherwise returns
   FcTrue.
d572 1
a572 1
                              FcInitBringUptoDate
d576 1
a576 1
   FcInitBringUptoDateÂ --Â reload configuration files if needed
d580 1
a580 2
   #include <fontconfig/fontconfig.h>

d586 6
a591 6
   Checks the rescan interval in the default configuration, checking the
   configuration if the interval has passed and reloading the configuration
   if when any changes are detected. Returns FcFalse if the configuration
   cannot be reloaded (see FcInitReinitialize). Otherwise returns FcTrue.

   --------------------------------------------------------------------------
d593 1
a593 1
  FcPattern
d596 17
d614 3
a616 7
   [12]FcPatternCreateÂ --Â Create a pattern

   [13]FcPatternDuplicateÂ --Â Copy a pattern

   [14]FcPatternReferenceÂ --Â Increment pattern reference count

   [15]FcPatternDestroyÂ --Â Destroy a pattern
d618 3
a620 1
   [16]FcPatternEqualÂ --Â Compare patterns
d622 2
a623 1
   [17]FcPatternEqualSubsetÂ --Â Compare portions of patterns
d625 3
a627 1
   [18]FcPatternFilterÂ --Â Filter the objects of pattern
d629 1
a629 35
   [19]FcPatternHashÂ --Â Compute a pattern hash value

   [20]FcPatternAddÂ --Â Add a value to a pattern

   [21]FcPatternAddWeakÂ --Â Add a value to a pattern with weak binding

   [22]FcPatternAdd-TypeÂ --Â Add a typed value to a pattern

   [23]FcPatternGetÂ --Â Return a value from a pattern

   [24]FcPatternGet-TypeÂ --Â Return a typed value from a pattern

   [25]FcPatternBuildÂ --Â Create patterns from arguments

   [26]FcPatternDelÂ --Â Delete a property from a pattern

   [27]FcPatternRemoveÂ --Â Remove one object of the specified type from the
   pattern

   [28]FcPatternPrintÂ --Â Print a pattern for debugging

   [29]FcDefaultSubstituteÂ --Â Perform default substitutions in a pattern

   [30]FcNameParseÂ --Â Parse a pattern string

   [31]FcNameUnparseÂ --Â Convert a pattern back into a string that can be
   parsed

   [32]FcPatternFormatÂ --Â Format a pattern into a string according to a
   format specifier

   An FcPattern is an opaque type that holds both patterns to match against
   the available fonts, as well as the information about each font.

                                FcPatternCreate
d633 1
a633 1
   FcPatternCreateÂ --Â Create a pattern
d637 1
a637 2
   #include <fontconfig/fontconfig.h>

d643 2
a644 1
   Creates a pattern with no properties; used to build patterns from scratch.
d646 1
a646 1
                               FcPatternDuplicate
d650 1
a650 1
   FcPatternDuplicateÂ --Â Copy a pattern
d654 1
a654 2
   #include <fontconfig/fontconfig.h>

d660 2
a661 2
   Copy a pattern, returning a new pattern that matches p. Each pattern may
   be modified without affecting the other.
d663 1
a663 1
                               FcPatternReference
d667 1
a667 1
   FcPatternReferenceÂ --Â Increment pattern reference count
d671 1
a671 2
   #include <fontconfig/fontconfig.h>

d677 2
a678 2
   Add another reference to p. Patterns are freed only when the reference
   count reaches zero.
d680 1
a680 1
                                FcPatternDestroy
d684 1
a684 1
   FcPatternDestroyÂ --Â Destroy a pattern
d688 1
a688 2
   #include <fontconfig/fontconfig.h>

d694 3
a696 2
   Decrement the pattern reference count. If all references are gone,
   destroys the pattern, in the process destroying all related values.
d698 1
a698 1
                                 FcPatternEqual
d702 1
a702 1
   FcPatternEqualÂ --Â Compare patterns
d706 1
a706 1
   #include <fontconfig/fontconfig.h>
d708 2
a709 2

   FcBool FcPatternEqual(const FcPattern *pa, const FcPattern *pb);
d715 1
a715 1
                              FcPatternEqualSubset
d719 1
a719 1
   FcPatternEqualSubsetÂ --Â Compare portions of patterns
d723 1
a723 2
   #include <fontconfig/fontconfig.h>

d725 2
a726 2
   FcBool FcPatternEqualSubset(const FcPattern *pa, const FcPattern *pb,
   const FcObjectSet *os);
d730 2
a731 2
   Returns whether pa and pb have exactly the same values for all of the
   objects in os.
d733 1
a733 1
                                FcPatternFilter
d737 1
a737 1
   FcPatternFilterÂ --Â Filter the objects of pattern
d741 1
a741 2
   #include <fontconfig/fontconfig.h>

d747 2
a748 2
   Returns a new pattern that only has those objects from p that are in os.
   If os is NULL, a duplicate of p is returned.
d750 1
a750 1
                                 FcPatternHash
d754 1
a754 1
   FcPatternHashÂ --Â Compute a pattern hash value
d758 1
a758 2
   #include <fontconfig/fontconfig.h>

d764 2
a765 2
   Returns a 32-bit number which is the same for any two patterns which are
   equal.
d767 1
a767 1
                                  FcPatternAdd
d771 1
a771 1
   FcPatternAddÂ --Â Add a value to a pattern
d775 1
a775 2
   #include <fontconfig/fontconfig.h>

d777 2
a778 2
   FcBool FcPatternAdd(FcPattern *p, const char *object, FcValue value,
   FcBool append);
d782 6
a787 5
   Adds a single value to the list of values associated with the property
   named `object. If `append is FcTrue, the value is added at the end of any
   existing list, otherwise it is inserted at the beginning. `value' is saved
   (with FcValueSave) when inserted into the pattern so that the library
   retains no reference to any application-supplied data structure.
d789 1
a789 1
                                FcPatternAddWeak
d793 1
a793 1
   FcPatternAddWeakÂ --Â Add a value to a pattern with weak binding
d797 1
a797 1
   #include <fontconfig/fontconfig.h>
d799 2
a800 3

   FcBool FcPatternAddWeak(FcPattern *p, const char *object, FcValue value,
   FcBool append);
d804 3
a806 2
   FcPatternAddWeak is essentially the same as FcPatternAdd except that any
   values added to the list have binding weak instead of strong.
d808 1
a808 1
                               FcPatternAdd-Type
d814 2
a815 1
   FcPatternAddFTFace, FcPatternAddLangSetÂ --Â Add a typed value to a pattern
d819 1
a819 1
   #include <fontconfig/fontconfig.h>
d821 2
d824 2
a825 1
   FcBool FcPatternAddInteger(FcPattern *p, const char *object, int i);
d827 2
a828 1
   FcBool FcPatternAddDouble(FcPattern *p, const char *object, double d);
d830 2
a831 2
   FcBool FcPatternAddString(FcPattern *p, const char *object, const FcChar8
   *s);
d833 2
a834 2
   FcBool FcPatternAddMatrix(FcPattern *p, const char *object, const FcMatrix
   *m);
d836 2
a837 2
   FcBool FcPatternAddCharSet(FcPattern *p, const char *object, const
   FcCharSet *c);
d839 2
a840 1
   FcBool FcPatternAddBool(FcPattern *p, const char *object, FcBool b);
d842 2
a843 2
   FcBool FcPatternAddFTFace(FcPattern *p, const char *object, const
   FT_Facef);
d845 2
a846 2
   FcBool FcPatternAddLangSet(FcPattern *p, const char *object, const
   FcLangSet *l);
d850 5
a854 4
   These are all convenience functions that insert objects of the specified
   type into the pattern. Use these in preference to FcPatternAdd as they
   will provide compile-time typechecking. These all append values to any
   existing list of values.
d856 1
a856 1
                                  FcPatternGet
d860 1
a860 1
   FcPatternGetÂ --Â Return a value from a pattern
d864 1
a864 2
   #include <fontconfig/fontconfig.h>

d866 2
a867 2
   FcResult FcPatternGet(FcPattern *p, const char *object, int id, FcValue
   *v);
d871 4
a874 3
   Returns in v the id'th value associated with the property object. The
   value returned is not a copy, but rather refers to the data stored within
   the pattern directly. Applications must not free this value.
d876 1
a876 1
                               FcPatternGet-Type
d882 2
a883 2
   FcPatternGetFTFace, FcPatternGetLangSetÂ --Â Return a typed value from a
   pattern
d887 1
a887 1
   #include <fontconfig/fontconfig.h>
d889 2
d892 2
a893 2
   FcResult FcPatternGetInteger(FcPattern *p, const char *object, int n, int
   *i);
d895 2
a896 2
   FcResult FcPatternGetDouble(FcPattern *p, const char *object, int n,
   double *d);
d898 2
a899 2
   FcResult FcPatternGetString(FcPattern *p, const char *object, int n,
   FcChar8 **s);
d901 2
a902 2
   FcResult FcPatternGetMatrix(FcPattern *p, const char *object, int n,
   FcMatrix **s);
d904 2
a905 2
   FcResult FcPatternGetCharSet(FcPattern *p, const char *object, int n,
   FcCharSet **c);
d907 2
a908 2
   FcResult FcPatternGetBool(FcPattern *p, const char *object, int n, FcBool
   *b);
d910 2
a911 1
   FcResult FcPatternGetFTFace(FcPattern *p, const char *object, int n);
d913 2
a914 2
   FcResult FcPatternGetLangSet(FcPattern *p, const char *object, FT_Face
   *f);
d918 7
a924 5
   These are convenience functions that call FcPatternGet and verify that the
   returned data is of the expected type. They return FcResultTypeMismatch if
   this is not the case. Note that these (like FcPatternGet) do not make a
   copy of any data structure referenced by the return value. Use these in
   preference to FcPatternGet to provide compile-time typechecking.
d926 1
a926 1
                                 FcPatternBuild
d930 2
a931 2
   FcPatternBuild, FcPatternVaBuild, FcPatternVapBuildÂ --Â Create patterns
   from arguments
d935 1
a935 2
   #include <fontconfig/fontconfig.h>

d941 2
a942 1
   void FcPatternVapBuild(FcPattern *result, FcPattern *pattern, va_list va);
d946 3
a948 2
   Builds a pattern using a list of objects, types and values. Each value to
   be entered in the pattern is specified with three arguments:
d950 5
a954 1
   Â 1.Â Object name, a string describing the property to be added.
d956 6
a961 1
   Â 2.Â Object type, one of the FcType enumerated values
d963 4
a966 3
   Â 3.Â Value, not an FcValue, but the raw type as passed to any of the
       FcPatternAdd<type> functions. Must match the type of the second
       argument.
d968 1
a968 12
   The argument list is terminated by a null object name, no object type nor
   value need be passed for this. The values are added to `pattern', if
   `pattern' is null, a new pattern is created. In either case, the pattern
   is returned. Example

   pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Times", (char *) 0);

   FcPatternVaBuild is used when the arguments are already in the form of a
   varargs value. FcPatternVapBuild is a macro version of FcPatternVaBuild
   which returns its result directly in the result variable.

                                  FcPatternDel
d972 1
a972 1
   FcPatternDelÂ --Â Delete a property from a pattern
d976 1
a976 2
   #include <fontconfig/fontconfig.h>

d982 2
a983 2
   Deletes all values associated with the property `object', returning
   whether the property existed or not.
d985 1
a985 1
                                FcPatternRemove
d989 2
a990 2
   FcPatternRemoveÂ --Â Remove one object of the specified type from the
   pattern
d994 1
a994 1
   #include <fontconfig/fontconfig.h>
d996 2
a997 2

   FcBool FcPatternRemove(FcPattern *p, const char *object, int id);
d1001 3
a1003 3
   Removes the value associated with the property `object' at position `id',
   returning whether the property existed and had a value at that position or
   not.
d1005 1
a1005 1
                                 FcPatternPrint
d1009 1
a1009 1
   FcPatternPrintÂ --Â Print a pattern for debugging
d1013 1
a1013 2
   #include <fontconfig/fontconfig.h>

d1019 3
a1021 3
   Prints an easily readable version of the pattern to stdout. There is no
   provision for reparsing data in this format, it's just for diagnostics and
   debugging.
d1023 1
a1023 1
                              FcDefaultSubstitute
d1027 2
a1028 1
   FcDefaultSubstituteÂ --Â Perform default substitutions in a pattern
d1032 1
a1032 2
   #include <fontconfig/fontconfig.h>

d1040 7
a1046 3
     *Â Patterns without a specified style or weight are set to Medium

     *Â Patterns without a specified style or slant are set to Roman
d1048 1
a1048 5
     *Â Patterns without a specified pixel size are given one computed from
       any specified point size (default 12), dpi (default 75) and scale
       (default 1).

                                  FcNameParse
d1052 1
a1052 1
   FcNameParseÂ --Â Parse a pattern string
d1056 1
a1056 2
   #include <fontconfig/fontconfig.h>

d1062 2
a1063 2
   Converts name from the standard text format described above into a
   pattern.
d1065 1
a1065 1
                                 FcNameUnparse
d1069 2
a1070 1
   FcNameUnparseÂ --Â Convert a pattern back into a string that can be parsed
d1074 1
a1074 2
   #include <fontconfig/fontconfig.h>

d1080 130
a1209 115
   Converts the given pattern into the standard text format described above.
   The return value is not static, but instead refers to newly allocated
   memory which should be freed by the caller using free().

                                FcPatternFormat

Name

   FcPatternFormatÂ --Â Format a pattern into a string according to a format
   specifier

Synopsis

   #include <fontconfig/fontconfig.h>


   FcChar8 * FcPatternFormat(FcPattern *pat, const FcChar8 *format);

Description

   Converts given pattern pat into text described by the format specifier
   format. The return value refers to newly allocated memory which should be
   freed by the caller using free(), or NULL if format is invalid.

    The format is loosely modeled after printf-style format string. The
   format string is composed of zero or more directives: ordinary characters
   (not "%"), which are copied unchanged to the output stream; and tags which
   are interpreted to construct text from the pattern in a variety of ways
   (explained below). Special characters can be escaped using backslash.
   C-string style special characters like \n and \r are also supported (this
   is useful when the format string is not a C string literal). It is
   advisable to always escape curly braces that are meant to be copied to the
   output as ordinary characters.

    Each tag is introduced by the character "%", followed by an optional
   minimum field width, followed by tag contents in curly braces ({}). If the
   minimum field width value is provided the tag will be expanded and the
   result padded to achieve the minimum width. If the minimum field width is
   positive, the padding will right-align the text. Negative field width will
   left-align. The rest of this section describes various supported tag
   contents and their expansion.

    A simple tag is one where the content is an identifier. When simple tags
   are expanded, the named identifier will be looked up in pattern and the
   resulting list of values returned, joined together using comma. For
   example, to print the family name and style of the pattern, use the format
   "%{family} %{style}\n". To extend the family column to forty characters
   use "%-40{family}%{style}\n".

    Simple tags expand to list of all values for an element. To only choose
   one of the values, one can index using the syntax "%{elt[idx]}". For
   example, to get the first family name only, use "%{family[0]}".

    If a simple tag ends with "=" and the element is found in the pattern,
   the name of the element followed by "=" will be output before the list of
   values. For example, "%{weight=}" may expand to the string "weight=80". Or
   to the empty string if pattern does not have weight set.

    If a simple tag starts with ":" and the element is found in the pattern,
   ":" will be printed first. For example, combining this with the =, the
   format "%{:weight=}" may expand to ":weight=80" or to the empty string if
   pattern does not have weight set.

    If a simple tag contains the string ":-", the rest of the the tag
   contents will be used as a default string. The default string is output if
   the element is not found in the pattern. For example, the format
   "%{:weight=:-123}" may expand to ":weight=80" or to the string
   ":weight=123" if pattern does not have weight set.

    A count tag is one that starts with the character "#" followed by an
   element name, and expands to the number of values for the element in the
   pattern. For example, "%{#family}" expands to the number of family names
   pattern has set, which may be zero.

    A sub-expression tag is one that expands a sub-expression. The tag
   contents are the sub-expression to expand placed inside another set of
   curly braces. Sub-expression tags are useful for aligning an entire
   sub-expression, or to apply converters (explained later) to the entire
   sub-expression output. For example, the format "%40{{%{family} %{style}}}"
   expands the sub-expression to construct the family name followed by the
   style, then takes the entire string and pads it on the left to be at least
   forty characters.

    A filter-out tag is one starting with the character "-" followed by a
   comma-separated list of element names, followed by a sub-expression
   enclosed in curly braces. The sub-expression will be expanded but with a
   pattern that has the listed elements removed from it. For example, the
   format "%{-size,pixelsize{sub-expr}}" will expand "sub-expr" with pattern
   sans the size and pixelsize elements.

    A filter-in tag is one starting with the character "+" followed by a
   comma-separated list of element names, followed by a sub-expression
   enclosed in curly braces. The sub-expression will be expanded but with a
   pattern that only has the listed elements from the surrounding pattern.
   For example, the format "%{+family,familylang{sub-expr}}" will expand
   "sub-expr" with a sub-pattern consisting only the family and family lang
   elements of pattern.

    A conditional tag is one starting with the character "?" followed by a
   comma-separated list of element conditions, followed by two sub-expression
   enclosed in curly braces. An element condition can be an element name, in
   which case it tests whether the element is defined in pattern, or the
   character "!" followed by an element name, in which case the test is
   negated. The conditional passes if all the element conditions pass. The
   tag expands the first sub-expression if the conditional passes, and
   expands the second sub-expression otherwise. For example, the format
   "%{?size,dpi,!pixelsize{pass}{fail}}" will expand to "pass" if pattern has
   size and dpi elements but no pixelsize element, and to "fail" otherwise.

    An enumerate tag is one starting with the string "[]" followed by a
   comma-separated list of element names, followed by a sub-expression
   enclosed in curly braces. The list of values for the named elements are
   walked in parallel and the sub-expression expanded each time with a
   pattern just having a single value for those elements, starting from the
   first value and continuing as long as any of those elements has a value.
d1211 9
a1219 7
   (%{familylang})\n}}" will expand the pattern "%{family} (%{familylang})\n"
   with a pattern having only the first value of the family and familylang
   elements, then expands it with the second values, then the third, etc.

    As a special case, if an enumerate tag has only one element, and that
   element has only one value in the pattern, and that value is of type
   FcLangSet, the individual languages in the language set are enumerated.
d1221 2
a1222 2
    A builtin tag is one starting with the character "=" followed by a
   builtin name. The following builtins are defined:
d1225 2
a1226 2

           Expands to the result of calling FcNameUnparse() on the pattern.
d1229 3
a1231 3

           Expands to the output of the default output format of the fc-match
           command on the pattern, without the final newline.
d1234 3
a1236 3

           Expands to the output of the default output format of the fc-list
           command on the pattern, without the final newline.
d1239 3
a1241 3

           Expands to the output of the default output format of the fc-cat
           command on the pattern, without the final newline.
d1244 15
a1258 14

           Expands to the list of PackageKit font() tags for the pattern.
           Currently this includes tags for each family name, and each
           language from the pattern, enumerated and sanitized into a set of
           tags terminated by newline. Package management systems can use
           these tags to tag their packages accordingly.

   For example, the format "%{+family,style{%{=unparse}}}\n" will expand to
   an unparsed name containing only the family and style element values from
   pattern.

    The contents of any tag can be followed by a set of zero or more
   converters. A converter is specified by the character "|" followed by the
   converter name and arguments. The following converters are defined:
d1261 2
a1262 2

           Replaces text with the results of calling FcStrBasename() on it.
d1265 2
a1266 2

           Replaces text with the results of calling FcStrDirname() on it.
d1269 2
a1270 2

           Replaces text with the results of calling FcStrDowncase() on it.
d1273 2
a1274 3

           Escapes text for one level of shell expansion. (Escapes
           single-quotes, also encloses text in single-quotes.)
d1277 2
a1278 3

           Escapes text such that it can be used as part of a C string
           literal. (Escapes backslash and double-quotes.)
d1281 2
a1282 3

           Escapes text such that it can be used in XML and HTML. (Escapes
           less-than, greater-than, and ampersand.)
d1285 3
a1287 3

           Deletes all occurrences of each of the characters in chars from
           the text. FIXME: This converter is not UTF-8 aware yet.
d1290 3
a1292 4

           Escapes all occurrences of each of the characters in chars by
           prepending it by the first character in chars. FIXME: This
           converter is not UTF-8 aware yet.
d1295 9
a1303 9

           Translates all occurrences of each of the characters in from by
           replacing them with their corresponding character in to. If to has
           fewer characters than from, it will be extended by repeating its
           last character. FIXME: This converter is not UTF-8 aware yet.

   For example, the format "%{family|downcase|delete( )}\n" will expand to
   the values of the family element in pattern, lower-cased and with spaces
   removed.
d1308 1
d1310 1
a1310 3
   --------------------------------------------------------------------------

  FcFontSet
d1313 8
d1322 2
a1323 5
   [33]FcFontSetCreateÂ --Â Create a font set

   [34]FcFontSetDestroyÂ --Â Destroy a font set

   [35]FcFontSetAddÂ --Â Add to a font set
d1325 1
a1325 14
   [36]FcFontSetListÂ --Â List fonts from a set of font sets

   [37]FcFontSetMatchÂ --Â Return the best font from a set of font sets

   [38]FcFontSetPrintÂ --Â Print a set of patterns to stdout

   [39]FcFontSetSortÂ --Â Add to a font set

   [40]FcFontSetSortDestroyÂ --Â DEPRECATED destroy a font set

   An FcFontSet simply holds a list of patterns; these are used to return the
   results of listing available fonts.

                                FcFontSetCreate
d1329 1
a1329 1
   FcFontSetCreateÂ --Â Create a font set
d1333 1
a1333 2
   #include <fontconfig/fontconfig.h>

d1341 1
a1341 1
                                FcFontSetDestroy
d1345 1
a1345 1
   FcFontSetDestroyÂ --Â Destroy a font set
d1349 1
a1349 2
   #include <fontconfig/fontconfig.h>

d1355 2
a1356 2
   Destroys a font set. Note that this destroys any referenced patterns as
   well.
d1358 1
a1358 1
                                  FcFontSetAdd
d1362 1
a1362 1
   FcFontSetAddÂ --Â Add to a font set
d1366 1
a1366 2
   #include <fontconfig/fontconfig.h>

d1372 4
a1375 4
   Adds a pattern to a font set. Note that the pattern is not copied before
   being inserted into the set. Returns FcFalse if the pattern cannot be
   inserted into the set (due to allocation failure). Otherwise returns
   FcTrue.
d1377 1
a1377 1
                                 FcFontSetList
d1381 1
a1381 1
   FcFontSetListÂ --Â List fonts from a set of font sets
d1385 1
a1385 1
   #include <fontconfig/fontconfig.h>
d1387 2
a1388 3

   FcFontSet * FcFontSetList(FcConfig *config, FcFontSet **sets, intnsets,
   FcPattern *pattern, FcObjectSet *object_set);
d1392 4
a1395 4
   Selects fonts matching pattern from sets, creates patterns from those
   fonts containing only the objects in object_set and returns the set of
   unique such patterns. If config is NULL, the default configuration is
   checked to be up to date, and used.
d1397 1
a1397 1
                                 FcFontSetMatch
d1401 1
a1401 1
   FcFontSetMatchÂ --Â Return the best font from a set of font sets
d1405 1
a1405 2
   #include <fontconfig/fontconfig.h>

d1407 2
a1408 2
   FcPattern * FcFontSetMatch(FcConfig *config, FcFontSet **sets, intnsets,
   FcPattern *pattern, FcResult *result);
d1412 7
a1418 6
   Finds the font in sets most closely matching pattern and returns the
   result of FcFontRenderPrepare for that font and the provided pattern. This
   function should be called only after FcConfigSubstitute and
   FcDefaultSubstitute have been called for pattern; otherwise the results
   will not be correct. If config is NULL, the current configuration is used.
   Returns NULL if an error occurs during this process.
d1420 1
a1420 1
                                 FcFontSetPrint
d1424 1
a1424 1
   FcFontSetPrintÂ --Â Print a set of patterns to stdout
d1428 1
a1428 2
   #include <fontconfig/fontconfig.h>

d1434 4
a1437 4
   This function is useful for diagnosing font related issues, printing the
   complete contents of every pattern in set. The format of the output is
   designed to be of help to users and developers, and may change at any
   time.
d1439 1
a1439 1
                                 FcFontSetSort
d1443 1
a1443 1
   FcFontSetSortÂ --Â Add to a font set
d1447 1
a1447 2
   #include <fontconfig/fontconfig.h>

d1449 3
a1451 2
   FcFontSetSort(FcConfig *config, FcFontSet **sets, intnsets, FcPattern
   *pattern, FcBool trim, FcCharSet **csp, FcResult *result);
d1455 8
a1462 7
   Returns the list of fonts from sets sorted by closeness to pattern. If
   trim is FcTrue, elements in the list which don't include Unicode coverage
   not provided by earlier elements in the list are elided. The union of
   Unicode coverage of all of the fonts is returned in csp, if csp is not
   NULL. This function should be called only after FcConfigSubstitute and
   FcDefaultSubstitute have been called for p; otherwise the results will not
   be correct.
d1464 5
a1468 4
   The returned FcFontSet references FcPattern structures which may be shared
   by the return value from multiple FcFontSort calls, applications cannot
   modify these patterns. Instead, they should be passed, along with pattern
   to FcFontRenderPrepare which combines them into a complete pattern.
d1473 1
a1473 1
                              FcFontSetSortDestroy
d1477 1
a1477 1
   FcFontSetSortDestroyÂ --Â DEPRECATED destroy a font set
d1481 1
a1481 2
   #include <fontconfig/fontconfig.h>

d1487 4
a1490 5
   This function is DEPRECATED. FcFontSetSortDestroy destroys set by calling
   FcFontSetDestroy. Applications should use FcFontSetDestroy directly
   instead.

   --------------------------------------------------------------------------
d1492 1
a1492 1
  FcObjectSet
d1495 4
d1500 3
a1502 7
   [41]FcObjectSetCreateÂ --Â Create an object set

   [42]FcObjectSetAddÂ --Â Add to an object set

   [43]FcObjectSetDestroyÂ --Â Destroy an object set

   [44]FcObjectSetBuildÂ --Â Build object set from args
d1504 1
a1504 5
   An FcObjectSet holds a list of pattern property names; it is used to
   indicate which properties are to be returned in the patterns from
   FcFontList.

                               FcObjectSetCreate
d1508 1
a1508 1
   FcObjectSetCreateÂ --Â Create an object set
d1512 1
a1512 2
   #include <fontconfig/fontconfig.h>

d1520 1
a1520 1
                                 FcObjectSetAdd
d1524 1
a1524 1
   FcObjectSetAddÂ --Â Add to an object set
d1528 1
a1528 2
   #include <fontconfig/fontconfig.h>

d1534 3
a1536 3
   Adds a property name to the set. Returns FcFalse if the property name
   cannot be inserted into the set (due to allocation failure). Otherwise
   returns FcTrue.
d1538 1
a1538 1
                               FcObjectSetDestroy
d1542 1
a1542 1
   FcObjectSetDestroyÂ --Â Destroy an object set
d1546 1
a1546 2
   #include <fontconfig/fontconfig.h>

d1554 1
a1554 1
                                FcObjectSetBuild
d1558 2
a1559 2
   FcObjectSetBuild, FcObjectSetVaBuild, FcObjectSetVapBuildÂ --Â Build object
   set from args
d1563 1
a1563 2
   #include <fontconfig/fontconfig.h>

d1567 2
a1568 1
   FcObjectSet * FcObjectSetVaBuild(const char *first, va_list va);
d1570 2
a1571 2
   void FcObjectSetVapBuild(FcObjectSet *result, const char *first, va_list
   va);
d1575 5
a1579 3
   These build an object set from a null-terminated list of property names.
   FcObjectSetVapBuild is a macro version of FcObjectSetVaBuild which returns
   the result in the result variable directly.
d1581 1
a1581 3
   --------------------------------------------------------------------------

  FreeType specific functions
d1584 4
d1589 2
a1590 3
   [45]FcFreeTypeCharIndexÂ --Â map Unicode to glyph id

   [46]FcFreeTypeCharSetÂ --Â compute Unicode coverage
d1592 3
a1594 2
   [47]FcFreeTypeCharSetAndSpacingÂ --Â compute Unicode coverage and spacing
   type
d1596 1
a1596 9
   [48]FcFreeTypeQueryÂ --Â compute pattern from font file (and index)

   [49]FcFreeTypeQueryFaceÂ --Â compute pattern from FT_Face

   While the fontconfig library doesn't insist that FreeType be used as the
   rasterization mechanism for fonts, it does provide some convenience
   functions.

                              FcFreeTypeCharIndex
d1600 1
a1600 1
   FcFreeTypeCharIndexÂ --Â map Unicode to glyph id
d1604 2
a1605 3
   #include <fontconfig.h>
   #include <fcfreetype.h>

d1611 6
a1616 5
   Maps a Unicode char to a glyph index. This function uses information from
   several possible underlying encoding tables to work around broken fonts.
   As a result, this function isn't designed to be used in performance
   sensitive areas; results from this function are intended to be cached by
   higher level functions.
d1618 1
a1618 1
                               FcFreeTypeCharSet
d1622 1
a1622 1
   FcFreeTypeCharSetÂ --Â compute Unicode coverage
d1626 2
a1627 3
   #include <fontconfig.h>
   #include <fcfreetype.h>

d1633 5
a1637 4
   Scans a FreeType face and returns the set of encoded Unicode chars. This
   scans several encoding tables to build as complete a list as possible. If
   'blanks' is not 0, the glyphs in the font are examined and any blank
   glyphs not in 'blanks' are not placed in the returned FcCharSet.
d1639 1
a1639 1
                          FcFreeTypeCharSetAndSpacing
d1643 2
a1644 1
   FcFreeTypeCharSetAndSpacingÂ --Â compute Unicode coverage and spacing type
d1648 2
a1649 3
   #include <fontconfig.h>
   #include <fcfreetype.h>

d1651 2
a1652 2
   FcCharSet * FcFreeTypeCharSetAndSpacing(FT_Face face, FcBlanks *blanks,
   int *spacing);
d1656 7
a1662 6
   Scans a FreeType face and returns the set of encoded Unicode chars. This
   scans several encoding tables to build as complete a list as possible. If
   'blanks' is not 0, the glyphs in the font are examined and any blank
   glyphs not in 'blanks' are not placed in the returned FcCharSet. spacing
   receives the computed spacing type of the font, one of FC_MONO for a font
   where all glyphs have the same width, FC_DUAL, where the font has glyphs
d1666 1
a1666 1
                                FcFreeTypeQuery
d1670 1
a1670 1
   FcFreeTypeQueryÂ --Â compute pattern from font file (and index)
d1674 2
a1675 2
   #include <fontconfig.h>
   #include <fcfreetype.h>
d1677 2
a1678 3

   FcPattern * FcFreeTypeQuery(const FcChar8 *file, int id, FcBlanks *blanks,
   int *count);
d1682 2
a1683 2
   Constructs a pattern representing the 'id'th font in 'file'. The number of
   fonts in 'file' is returned in 'count'.
d1685 1
a1685 1
                              FcFreeTypeQueryFace
d1689 1
a1689 1
   FcFreeTypeQueryFaceÂ --Â compute pattern from FT_Face
d1693 2
a1694 3
   #include <fontconfig.h>
   #include <fcfreetype.h>

d1696 2
a1697 2
   FcPattern * FcFreeTypeQueryFace(const FT_Face face, const FcChar8 *file,
   int id, FcBlanks *blanks);
d1701 4
a1704 2
   Constructs a pattern representing 'face'. 'file' and 'id' are used solely
   as data for pattern elements (FC_FILE, FC_INDEX and sometimes FC_FAMILY).
d1706 1
a1706 3
   --------------------------------------------------------------------------

  FcValue
d1709 4
d1714 4
a1717 12
   [50]FcValueDestroyÂ --Â Free a value

   [51]FcValueSaveÂ --Â Copy a value

   [52]FcValuePrintÂ --Â Print a value to stdout

   [53]FcValueEqualÂ --Â Test two values for equality

   FcValue is a structure containing a type tag and a union of all possible
   datatypes. The tag is an enum of type FcType and is intended to provide a
   measure of run-time typechecking, although that depends on careful
   programming.
d1719 1
a1719 1
                                 FcValueDestroy
d1723 1
a1723 1
   FcValueDestroyÂ --Â Free a value
d1727 1
a1727 2
   #include <fontconfig/fontconfig.h>

d1734 2
a1735 1
   FcTypeMatrix and FcTypeCharSet reference memory, the other types do not.
d1737 1
a1737 1
                                  FcValueSave
d1741 1
a1741 1
   FcValueSaveÂ --Â Copy a value
d1745 1
a1745 2
   #include <fontconfig/fontconfig.h>

d1751 2
a1752 2
   Returns a copy of v duplicating any object referenced by it so that v may
   be safely destroyed without harming the new value.
d1754 1
a1754 1
                                  FcValuePrint
d1758 1
a1758 1
   FcValuePrintÂ --Â Print a value to stdout
d1762 1
a1762 2
   #include <fontconfig/fontconfig.h>

d1768 3
a1770 3
   Prints a human-readable representation of v to stdout. The format should
   not be considered part of the library specification as it may change in
   the future.
d1772 1
a1772 1
                                  FcValueEqual
d1776 1
a1776 1
   FcValueEqualÂ --Â Test two values for equality
d1780 1
a1780 2
   #include <fontconfig/fontconfig.h>

d1786 4
a1789 5
   Compares two values. Integers and Doubles are compared as numbers;
   otherwise the two values have to be the same type to be considered equal.
   Strings are compared ignoring case.

   --------------------------------------------------------------------------
d1791 1
a1791 1
  FcCharSet
d1794 30
a1823 47

   [54]FcCharSetCreateÂ --Â Create an empty character set

   [55]FcCharSetDestroyÂ --Â Destroy a character set

   [56]FcCharSetAddCharÂ --Â Add a character to a charset

   [57]FcCharSetDelCharÂ --Â Add a character to a charset

   [58]FcCharSetCopyÂ --Â Copy a charset

   [59]FcCharSetEqualÂ --Â Compare two charsets

   [60]FcCharSetIntersectÂ --Â Intersect charsets

   [61]FcCharSetUnionÂ --Â Add charsets

   [62]FcCharSetSubtractÂ --Â Subtract charsets

   [63]FcCharSetMergeÂ --Â Merge charsets

   [64]FcCharSetHasCharÂ --Â Check a charset for a char

   [65]FcCharSetCountÂ --Â Count entries in a charset

   [66]FcCharSetIntersectCountÂ --Â Intersect and count charsets

   [67]FcCharSetSubtractCountÂ --Â Subtract and count charsets

   [68]FcCharSetIsSubsetÂ --Â Test for charset inclusion

   [69]FcCharSetFirstPageÂ --Â Start enumerating charset contents

   [70]FcCharSetNextPageÂ --Â Continue enumerating charset contents

   [71]FcCharSetCoverageÂ --Â DEPRECATED return coverage for a Unicode page

   [72]FcCharSetNewÂ --Â DEPRECATED alias for FcCharSetCreate

   An FcCharSet is a boolean array indicating a set of Unicode chars. Those
   associated with a font are marked constant and cannot be edited.
   FcCharSets may be reference counted internally to reduce memory
   consumption; this may be visible to applications as the result of
   FcCharSetCopy may return it's argument, and that CharSet may remain
   unmodifiable.

                                FcCharSetCreate
d1827 1
a1827 1
   FcCharSetCreateÂ --Â Create an empty character set
d1831 1
a1831 2
   #include <fontconfig/fontconfig.h>

d1837 2
a1838 2
   FcCharSetCreate allocates and initializes a new empty character set
   object.
d1840 1
a1840 1
                                FcCharSetDestroy
d1844 1
a1844 1
   FcCharSetDestroyÂ --Â Destroy a character set
d1848 1
a1848 2
   #include <fontconfig/fontconfig.h>

d1854 2
a1855 2
   FcCharSetDestroy decrements the reference count fcs. If the reference
   count becomes zero, all memory referenced is freed.
d1857 1
a1857 1
                                FcCharSetAddChar
d1861 1
a1861 1
   FcCharSetAddCharÂ --Â Add a character to a charset
d1865 1
a1865 2
   #include <fontconfig/fontconfig.h>

d1871 3
a1873 3
   FcCharSetAddChar adds a single Unicode char to the set, returning FcFalse
   on failure, either as a result of a constant set or from running out of
   memory.
d1875 1
a1875 1
                                FcCharSetDelChar
d1879 1
a1879 1
   FcCharSetDelCharÂ --Â Add a character to a charset
d1883 1
a1883 2
   #include <fontconfig/fontconfig.h>

d1889 3
a1891 3
   FcCharSetDelChar deletes a single Unicode char from the set, returning
   FcFalse on failure, either as a result of a constant set or from running
   out of memory.
d1897 1
a1897 1
                                 FcCharSetCopy
d1901 1
a1901 1
   FcCharSetCopyÂ --Â Copy a charset
d1905 1
a1905 2
   #include <fontconfig/fontconfig.h>

d1911 2
a1912 2
   Makes a copy of src; note that this may not actually do anything more than
   increment the reference count on src.
d1914 1
a1914 1
                                 FcCharSetEqual
d1918 1
a1918 1
   FcCharSetEqualÂ --Â Compare two charsets
d1922 1
a1922 2
   #include <fontconfig/fontconfig.h>

d1930 1
a1930 1
                               FcCharSetIntersect
d1934 1
a1934 1
   FcCharSetIntersectÂ --Â Intersect charsets
d1938 1
a1938 2
   #include <fontconfig/fontconfig.h>

d1940 2
a1941 1
   FcCharSet * FcCharSetIntersect(const FcCharSet *a, const FcCharSet *b);
d1947 1
a1947 1
                                 FcCharSetUnion
d1951 1
a1951 1
   FcCharSetUnionÂ --Â Add charsets
d1955 1
a1955 1
   #include <fontconfig/fontconfig.h>
d1957 2
a1958 2

   FcCharSet * FcCharSetUnion(const FcCharSet *a, const FcCharSet *b);
d1962 2
a1963 1
   Returns a set including only those chars found in either a or b.
d1965 1
a1965 1
                               FcCharSetSubtract
d1969 1
a1969 1
   FcCharSetSubtractÂ --Â Subtract charsets
d1973 1
a1973 1
   #include <fontconfig/fontconfig.h>
d1975 2
a1976 2

   FcCharSet * FcCharSetSubtract(const FcCharSet *a, const FcCharSet *b);
d1982 1
a1982 1
                                 FcCharSetMerge
d1986 1
a1986 1
   FcCharSetMergeÂ --Â Merge charsets
d1990 1
a1990 2
   #include <fontconfig/fontconfig.h>

d1992 2
a1993 1
   FcBool FcCharSetMerge(FcCharSet *a, const FcCharSet *b, FcBool *changed);
d1997 5
a2001 4
   Adds all chars in b to a. In other words, this is an in-place version of
   FcCharSetUnion. If changed is not NULL, then it returns whether any new
   chars from b were added to a. Returns FcFalse on failure, either when a is
   a constant set or from running out of memory.
d2003 1
a2003 1
                                FcCharSetHasChar
d2007 1
a2007 1
   FcCharSetHasCharÂ --Â Check a charset for a char
d2011 1
a2011 2
   #include <fontconfig/fontconfig.h>

d2019 1
a2019 1
                                 FcCharSetCount
d2023 1
a2023 1
   FcCharSetCountÂ --Â Count entries in a charset
d2027 1
a2027 2
   #include <fontconfig/fontconfig.h>

d2035 1
a2035 1
                            FcCharSetIntersectCount
d2039 1
a2039 1
   FcCharSetIntersectCountÂ --Â Intersect and count charsets
d2043 1
a2043 2
   #include <fontconfig/fontconfig.h>

d2045 2
a2046 1
   FcChar32 FcCharSetIntersectCount(const FcCharSet *a, const FcCharSet *b);
d2052 1
a2052 1
                             FcCharSetSubtractCount
d2056 1
a2056 1
   FcCharSetSubtractCountÂ --Â Subtract and count charsets
d2060 1
a2060 1
   #include <fontconfig/fontconfig.h>
d2062 2
a2063 2

   FcChar32 FcCharSetSubtractCount(const FcCharSet *a, const FcCharSet *b);
d2069 1
a2069 1
                               FcCharSetIsSubset
d2073 1
a2073 1
   FcCharSetIsSubsetÂ --Â Test for charset inclusion
d2077 1
a2077 1
   #include <fontconfig/fontconfig.h>
d2079 2
a2080 2

   FcBool FcCharSetIsSubset(const FcCharSet *a, const FcCharSet *b);
d2086 1
a2086 1
                               FcCharSetFirstPage
d2090 1
a2090 1
   FcCharSetFirstPageÂ --Â Start enumerating charset contents
d2094 1
a2094 2
   #include <fontconfig/fontconfig.h>

d2101 14
a2114 13
   Builds an array of bits in map marking the first page of Unicode coverage
   of a. *next is set to contains the base code point for the next page in a.
   Returns the base code point for the page, or FC_CHARSET_DONE if a contains
   no pages. As an example, if FcCharSetFirstPage returns 0x300 and fills map
   with

0xffffffff 0xffffffff 0x01000008 0x44300002 0xffffd7f0 0xfffffffb 0xffff7fff 0xffff0003

   Then the page contains code points 0x300 through 0x33f (the first 64 code
   points on the page) because map[0] and map[1] both have all their bits
   set. It also contains code points 0x343 (0x300 + 32*2 + (4-1)) and 0x35e
   (0x300 + 32*2 + (31-1)) because map[2] has the 4th and 31st bits set. The
   code points represented by map[3] and later are left as an excercise for
d2117 1
a2117 1
                               FcCharSetNextPage
d2121 1
a2121 1
   FcCharSetNextPageÂ --Â Continue enumerating charset contents
d2125 1
a2125 2
   #include <fontconfig/fontconfig.h>

d2132 6
a2137 5
   Builds an array of bits in map marking the Unicode coverage of a for page
   containing *next (see the FcCharSetFirstPage description for details).
   *next is set to contains the base code point for the next page in a.
   Returns the base of code point for the page, or FC_CHARSET_DONE if a does
   not contain *next.
d2139 1
a2139 1
                               FcCharSetCoverage
d2143 2
a2144 1
   FcCharSetCoverageÂ --Â DEPRECATED return coverage for a Unicode page
d2148 1
a2148 2
   #include <fontconfig/fontconfig.h>

d2155 4
a2158 3
   DEPRECATED This function returns a bitmask in result which indicates which
   code points in page are included in a. FcCharSetCoverage returns the next
   page in the charset which has any coverage.
d2160 1
a2160 1
                                  FcCharSetNew
d2164 1
a2164 1
   FcCharSetNewÂ --Â DEPRECATED alias for FcCharSetCreate
d2168 1
a2168 2
   #include <fontconfig/fontconfig.h>

d2175 1
d2177 1
a2177 3
   --------------------------------------------------------------------------

  FcLangSet
d2180 26
a2205 42

   [73]FcLangSetCreateÂ --Â create a langset object

   [74]FcLangSetDestroyÂ --Â destroy a langset object

   [75]FcLangSetCopyÂ --Â copy a langset object

   [76]FcLangSetAddÂ --Â add a language to a langset

   [77]FcLangSetDelÂ --Â delete a language from a langset

   [78]FcLangSetUnionÂ --Â Add langsets

   [79]FcLangSetSubtractÂ --Â Subtract langsets

   [80]FcLangSetCompareÂ --Â compare language sets

   [81]FcLangSetContainsÂ --Â check langset subset relation

   [82]FcLangSetEqualÂ --Â test for matching langsets

   [83]FcLangSetHashÂ --Â return a hash value for a langset

   [84]FcLangSetHasLangÂ --Â test langset for language support

   [85]FcGetDefaultLangsÂ --Â Get the default languages list

   [86]FcLangSetGetLangsÂ --Â get the list of languages in the langset

   [87]FcGetLangsÂ --Â Get list of languages

   [88]FcLangNormalizeÂ --Â Normalize the language string

   [89]FcLangGetCharSetÂ --Â Get character map for a language

   An FcLangSet is a set of language names (each of which include language
   and an optional territory). They are used when selecting fonts to indicate
   which languages the fonts need to support. Each font is marked, using
   language orthography information built into fontconfig, with the set of
   supported languages.

                                FcLangSetCreate
d2209 1
a2209 1
   FcLangSetCreateÂ --Â create a langset object
d2213 1
a2213 2
   #include <fontconfig/fontconfig.h>

d2221 1
a2221 1
                                FcLangSetDestroy
d2225 1
a2225 1
   FcLangSetDestroyÂ --Â destroy a langset object
d2229 1
a2229 2
   #include <fontconfig/fontconfig.h>

d2235 2
a2236 2
   FcLangSetDestroy destroys a FcLangSet object, freeing all memory
   associated with it.
d2238 1
a2238 1
                                 FcLangSetCopy
d2242 1
a2242 1
   FcLangSetCopyÂ --Â copy a langset object
d2246 1
a2246 2
   #include <fontconfig/fontconfig.h>

d2252 2
a2253 2
   FcLangSetCopy creates a new FcLangSet object and populates it with the
   contents of ls.
d2255 1
a2255 1
                                  FcLangSetAdd
d2259 1
a2259 1
   FcLangSetAddÂ --Â add a language to a langset
d2263 1
a2263 2
   #include <fontconfig/fontconfig.h>

d2269 3
a2271 2
   lang is added to ls. lang should be of the form Ll-Tt where Ll is a two or
   three letter language from ISO 639 and Tt is a territory from ISO 3166.
d2273 1
a2273 1
                                  FcLangSetDel
d2277 1
a2277 1
   FcLangSetDelÂ --Â delete a language from a langset
d2281 1
a2281 2
   #include <fontconfig/fontconfig.h>

d2287 3
a2289 3
   lang is removed from ls. lang should be of the form Ll-Tt where Ll is a
   two or three letter language from ISO 639 and Tt is a territory from ISO
   3166.
d2295 1
a2295 1
                                 FcLangSetUnion
d2299 1
a2299 1
   FcLangSetUnionÂ --Â Add langsets
d2303 1
a2303 1
   #include <fontconfig/fontconfig.h>
d2305 2
a2306 2

   FcLangSet * FcLangSetUnion(const FcLangSet *ls_a, const FcLangSet *ls_b);
d2310 2
a2311 1
   Returns a set including only those languages found in either ls_a or ls_b.
d2317 1
a2317 1
                               FcLangSetSubtract
d2321 1
a2321 1
   FcLangSetSubtractÂ --Â Subtract langsets
d2325 1
a2325 2
   #include <fontconfig/fontconfig.h>

d2327 2
a2328 2
   FcLangSet * FcLangSetSubtract(const FcLangSet *ls_a, const FcLangSet
   *ls_b);
d2332 2
a2333 2
   Returns a set including only those languages found in ls_a but not in
   ls_b.
d2339 1
a2339 1
                                FcLangSetCompare
d2343 1
a2343 1
   FcLangSetCompareÂ --Â compare language sets
d2347 1
a2347 2
   #include <fontconfig/fontconfig.h>

d2349 2
a2350 2
   FcLangResult FcLangSetCompare(const FcLangSet *ls_a, const FcLangSet
   *ls_b);
d2354 6
a2359 5
   FcLangSetCompare compares language coverage for ls_a and ls_b. If they
   share any language and territory pair, this function returns FcLangEqual.
   If they share a language but differ in which territory that language is
   for, this function returns FcLangDifferentTerritory. If they share no
   languages in common, this function returns FcLangDifferentLang.
d2361 1
a2361 1
                               FcLangSetContains
d2365 1
a2365 1
   FcLangSetContainsÂ --Â check langset subset relation
d2369 1
a2369 1
   #include <fontconfig/fontconfig.h>
d2371 2
a2372 2

   FcBool FcLangSetContains(const FcLangSet *ls_a, const FcLangSet *ls_b);
d2376 4
a2379 3
   FcLangSetContains returns FcTrue if ls_a contains every language in ls_b.
   ls_a will 'contain' a language from ls_b if ls_a has exactly the language,
   or either the language or ls_a has no territory.
d2381 1
a2381 1
                                 FcLangSetEqual
d2385 1
a2385 1
   FcLangSetEqualÂ --Â test for matching langsets
d2389 1
a2389 1
   #include <fontconfig/fontconfig.h>
d2391 2
a2392 2

   FcBool FcLangSetEqual(const FcLangSet *ls_a, const FcLangSet *ls_b);
d2396 2
a2397 2
   Returns FcTrue if and only if ls_a supports precisely the same language
   and territory combinations as ls_b.
d2399 1
a2399 1
                                 FcLangSetHash
d2403 1
a2403 1
   FcLangSetHashÂ --Â return a hash value for a langset
d2407 1
a2407 2
   #include <fontconfig/fontconfig.h>

d2413 4
a2416 4
   This function returns a value which depends solely on the languages
   supported by ls. Any language which equals ls will have the same result
   from FcLangSetHash. However, two langsets with the same hash value may not
   be equal.
d2418 1
a2418 1
                                FcLangSetHasLang
d2422 1
a2422 1
   FcLangSetHasLangÂ --Â test langset for language support
d2426 1
a2426 1
   #include <fontconfig/fontconfig.h>
d2428 2
a2429 2

   FcLangResult FcLangSetHasLang(const FcLangSet *ls, const FcChar8 *lang);
d2433 6
a2438 5
   FcLangSetHasLang checks whether ls supports lang. If ls has a matching
   language and territory pair, this function returns FcLangEqual. If ls has
   a matching language but differs in which territory that language is for,
   this function returns FcLangDifferentTerritory. If ls has no matching
   language, this function returns FcLangDifferentLang.
d2440 1
a2440 1
                               FcGetDefaultLangs
d2444 1
a2444 1
   FcGetDefaultLangsÂ --Â Get the default languages list
d2448 1
a2448 2
   #include <fontconfig/fontconfig.h>

d2454 5
a2458 4
   Returns a string set of the default languages according to the environment
   variables on the system. This function looks for them in order of FC_LANG,
   LC_ALL, LC_CTYPE and LANG then. If there are no valid values in those
   environment variables, "en" will be set as fallback.
d2464 1
a2464 1
                               FcLangSetGetLangs
d2468 1
a2468 1
   FcLangSetGetLangsÂ --Â get the list of languages in the langset
d2472 1
a2472 2
   #include <fontconfig/fontconfig.h>

d2480 1
a2480 1
                                   FcGetLangs
d2484 1
a2484 1
   FcGetLangsÂ --Â Get list of languages
d2488 1
a2488 2
   #include <fontconfig/fontconfig.h>

d2496 1
a2496 1
                                FcLangNormalize
d2500 1
a2500 1
   FcLangNormalizeÂ --Â Normalize the language string
d2504 1
a2504 2
   #include <fontconfig/fontconfig.h>

d2516 1
a2516 1
                                FcLangGetCharSet
d2520 1
a2520 1
   FcLangGetCharSetÂ --Â Get character map for a language
d2524 1
a2524 2
   #include <fontconfig/fontconfig.h>

d2531 1
d2533 1
a2533 1
   --------------------------------------------------------------------------
d2535 8
a2542 1
  FcMatrix
d2544 2
a2545 1
   Table of Contents
d2547 1
a2547 1
   [90]FcMatrixInitÂ --Â initialize an FcMatrix structure
d2549 1
a2549 1
   [91]FcMatrixCopyÂ --Â Copy a matrix
d2551 1
a2551 1
   [92]FcMatrixEqualÂ --Â Compare two matrices
d2553 1
a2553 1
   [93]FcMatrixMultiplyÂ --Â Multiply matrices
d2555 1
a2555 1
   [94]FcMatrixRotateÂ --Â Rotate a matrix
d2557 1
a2557 1
   [95]FcMatrixScaleÂ --Â Scale a matrix
d2559 1
a2559 1
   [96]FcMatrixShearÂ --Â Shear a matrix
d2561 1
a2561 1
   FcMatrix structures hold an affine transformation in matrix form.
d2563 1
a2563 1
                                  FcMatrixInit
d2567 1
a2567 1
   FcMatrixInitÂ --Â initialize an FcMatrix structure
d2571 15
a2585 1
   #include <fontconfig/fontconfig.h>
d2587 1
d2589 2
a2590 1
   void FcMatrixInit(FcMatrix *matrix);
d2594 2
a2595 1
   FcMatrixInit initializes matrix to the identity matrix.
d2597 1
a2597 1
                                  FcMatrixCopy
d2601 1
a2601 1
   FcMatrixCopyÂ --Â Copy a matrix
d2605 1
a2605 1
   #include <fontconfig/fontconfig.h>
d2607 2
a2608 2

   void FcMatrixCopy(const FcMatrix *matrix);
d2612 2
a2613 1
   FcMatrixCopy allocates a new FcMatrix and copies mat into it.
d2615 1
a2615 1
                                 FcMatrixEqual
d2619 1
a2619 1
   FcMatrixEqualÂ --Â Compare two matrices
d2623 1
a2623 1
   #include <fontconfig/fontconfig.h>
d2625 1
a2625 2

   void FcMatrixEqual(const FcMatrix *matrix1, const FcMatrix *matrix2);
d2629 4
a2632 2
   FcMatrixEqual compares matrix1 and matrix2 returning FcTrue when they are
   equal and FcFalse when they are not.
d2634 1
a2634 1
                                FcMatrixMultiply
d2638 1
a2638 1
   FcMatrixMultiplyÂ --Â Multiply matrices
d2642 1
a2642 1
   #include <fontconfig/fontconfig.h>
d2644 1
a2644 3

   void FcMatrixMultiply(FcMatrix *result, const FcMatrix *matrix1, const
   FcMatrix *matrix2);
d2648 4
a2651 2
   FcMatrixMultiply multiplies matrix1 and matrix2 storing the result in
   result.
d2653 1
a2653 1
                                 FcMatrixRotate
d2657 1
a2657 1
   FcMatrixRotateÂ --Â Rotate a matrix
d2661 3
a2663 1
   #include <fontconfig/fontconfig.h>
d2665 1
d2667 5
a2671 1
   void FcMatrixRotate(FcMatrix *matrix, double cos, double sin);
d2673 1
a2673 1
Description
d2675 6
a2680 2
   FcMatrixRotate rotates matrix by the angle who's sine is sin and cosine is
   cos. This is done by multiplying by the matrix:
d2682 1
a2682 2
     cos -sin
     sin  cos
d2684 1
a2684 1
                                 FcMatrixScale
d2688 1
a2688 1
   FcMatrixScaleÂ --Â Scale a matrix
d2692 1
a2692 1
   #include <fontconfig/fontconfig.h>
d2694 1
d2696 1
a2696 1
   void FcMatrixScale(FcMatrix *matrix, double sx, double dy);
d2698 2
a2699 1
Description
d2701 1
a2701 2
   FcMatrixScale multiplies matrix x values by sx and y values by dy. This is
   done by multiplying by the matrix:
d2703 1
a2703 2
      sx  0
      0   dy
d2705 1
a2705 1
                                 FcMatrixShear
d2709 1
a2709 1
   FcMatrixShearÂ --Â Shear a matrix
d2713 1
a2713 1
   #include <fontconfig/fontconfig.h>
d2715 1
a2715 2

   void FcMatrixShear(FcMatrix *matrix, double sh, double sv);
d2719 2
a2720 2
   FcMatrixShare shears matrix horizontally by sh and vertically by sv. This
   is done by multiplying by the matrix:
d2722 1
a2722 2
     1  sh
     sv  1
d2724 1
a2724 1
   --------------------------------------------------------------------------
d2726 1
a2726 1
  FcConfig
d2728 1
a2728 1
   Table of Contents
d2730 1
a2730 1
   [97]FcConfigCreateÂ --Â Create a configuration
d2732 1
a2732 1
   [98]FcConfigReferenceÂ --Â Increment config reference count
d2734 1
a2734 1
   [99]FcConfigDestroyÂ --Â Destroy a configuration
d2736 1
a2736 1
   [100]FcConfigSetCurrentÂ --Â Set configuration as default
d2738 1
a2738 1
   [101]FcConfigGetCurrentÂ --Â Return current configuration
d2740 2
a2741 1
   [102]FcConfigUptoDateÂ --Â Check timestamps on config files
d2743 1
a2743 1
   [103]FcConfigHomeÂ --Â return the current home directory.
d2745 1
a2745 1
   [104]FcConfigEnableHomeÂ --Â controls use of the home directory.
d2747 1
a2747 1
   [105]FcConfigBuildFontsÂ --Â Build font database
d2749 1
a2749 1
   [106]FcConfigGetConfigDirsÂ --Â Get config directories
d2751 1
a2751 1
   [107]FcConfigGetFontDirsÂ --Â Get font directories
d2753 1
a2753 1
   [108]FcConfigGetConfigFilesÂ --Â Get config files
d2755 1
a2755 1
   [109]FcConfigGetCacheÂ --Â DEPRECATED used to return per-user cache filename
d2757 1
a2757 2
   [110]FcConfigGetCacheDirsÂ --Â return the list of directories searched for
   cache files
d2759 1
a2759 1
   [111]FcConfigGetFontsÂ --Â Get config font set
d2761 2
a2762 1
   [112]FcConfigGetBlanksÂ --Â Get config blanks
d2764 1
a2764 1
   [113]FcConfigGetRescanIntervalÂ --Â Get config rescan interval
d2766 1
a2766 1
   [114]FcConfigSetRescanIntervalÂ --Â Set config rescan interval
d2768 1
a2768 1
   [115]FcConfigAppFontAddFileÂ --Â Add font file to font database
d2770 1
a2770 1
   [116]FcConfigAppFontAddDirÂ --Â Add fonts from directory to font database
d2772 1
a2772 1
   [117]FcConfigAppFontClearÂ --Â Remove all app fonts from font database
d2774 1
a2774 1
   [118]FcConfigSubstituteWithPatÂ --Â Execute substitutions
d2776 1
a2776 1
   [119]FcConfigSubstituteÂ --Â Execute substitutions
d2778 2
a2779 1
   [120]FcFontMatchÂ --Â Return best font
d2781 1
a2781 1
   [121]FcFontSortÂ --Â Return list of matching fonts
d2783 1
a2783 1
   [122]FcFontRenderPrepareÂ --Â Prepare pattern for loading font file
d2785 1
a2785 1
   [123]FcFontListÂ --Â List fonts
d2787 2
a2788 1
   [124]FcConfigFilenameÂ --Â Find a config file
d2790 1
a2790 1
   [125]FcConfigParseAndLoadÂ --Â load a configuration file
d2792 45
a2836 9
   [126]FcConfigGetSysRootÂ --Â Obtain the system root directory

   [127]FcConfigSetSysRootÂ --Â Set the system root directory

   An FcConfig object holds the internal representation of a configuration.
   There is a default configuration which applications may use by passing 0
   to any function using the data within an FcConfig.

                                 FcConfigCreate
d2840 1
a2840 1
   FcConfigCreateÂ --Â Create a configuration
d2844 1
a2844 2
   #include <fontconfig/fontconfig.h>

d2852 1
a2852 1
                               FcConfigReference
d2856 1
a2856 1
   FcConfigReferenceÂ --Â Increment config reference count
d2860 1
a2860 2
   #include <fontconfig/fontconfig.h>

d2866 7
a2872 5
   Add another reference to config. Configs are freed only when the reference
   count reaches zero. If config is NULL, the current configuration is used.
   In that case this function will be similar to FcConfigGetCurrent() except
   that it increments the reference count before returning and the user is
   responsible for destroying the configuration when not needed anymore.
d2874 1
a2874 1
                                FcConfigDestroy
d2878 1
a2878 1
   FcConfigDestroyÂ --Â Destroy a configuration
d2882 1
a2882 2
   #include <fontconfig/fontconfig.h>

d2888 5
a2892 4
   Decrements the config reference count. If all references are gone,
   destroys the configuration and any data associated with it. Note that
   calling this function with the return from FcConfigGetCurrent will cause a
   new configuration to be created for use as current configuration.
d2894 1
a2894 1
                               FcConfigSetCurrent
d2898 1
a2898 1
   FcConfigSetCurrentÂ --Â Set configuration as default
d2902 1
a2902 2
   #include <fontconfig/fontconfig.h>

d2908 4
a2911 2
   Sets the current default configuration to config. Implicitly calls
   FcConfigBuildFonts if necessary, returning FcFalse if that call fails.
d2913 1
a2913 1
                               FcConfigGetCurrent
d2917 1
a2917 1
   FcConfigGetCurrentÂ --Â Return current configuration
d2921 1
a2921 2
   #include <fontconfig/fontconfig.h>

d2929 1
a2929 1
                                FcConfigUptoDate
d2933 1
a2933 1
   FcConfigUptoDateÂ --Â Check timestamps on config files
d2937 1
a2937 2
   #include <fontconfig/fontconfig.h>

d2943 3
a2945 3
   Checks all of the files related to config and returns whether any of them
   has been modified since the configuration was created. If config is NULL,
   the current configuration is used.
d2947 1
a2947 1
                                  FcConfigHome
d2951 1
a2951 1
   FcConfigHomeÂ --Â return the current home directory.
d2955 1
a2955 2
   #include <fontconfig/fontconfig.h>

d2961 3
a2963 2
   Return the current user's home directory, if it is available, and if using
   it is enabled, and NULL otherwise. See also FcConfigEnableHome).
d2965 1
a2965 1
                               FcConfigEnableHome
d2969 1
a2969 1
   FcConfigEnableHomeÂ --Â controls use of the home directory.
d2973 1
a2973 2
   #include <fontconfig/fontconfig.h>

d2979 6
a2984 5
   If enable is FcTrue, then Fontconfig will use various files which are
   specified relative to the user's home directory (using the ~ notation in
   the configuration). When enable is FcFalse, then all use of the home
   directory in these contexts will be disabled. The previous setting of the
   value is returned.
d2986 1
a2986 1
                               FcConfigBuildFonts
d2990 1
a2990 1
   FcConfigBuildFontsÂ --Â Build font database
d2994 1
a2994 2
   #include <fontconfig/fontconfig.h>

d3000 5
a3004 4
   Builds the set of available fonts for the given configuration. Note that
   any changes to the configuration after this call have indeterminate
   effects. Returns FcFalse if this operation runs out of memory. If config
   is NULL, the current configuration is used.
d3006 1
a3006 1
                             FcConfigGetConfigDirs
d3010 1
a3010 1
   FcConfigGetConfigDirsÂ --Â Get config directories
d3014 1
a3014 2
   #include <fontconfig/fontconfig.h>

d3020 4
a3023 3
   Returns the list of font directories specified in the configuration files
   for config. Does not include any subdirectories. If config is NULL, the
   current configuration is used.
d3025 1
a3025 1
                              FcConfigGetFontDirs
d3029 1
a3029 1
   FcConfigGetFontDirsÂ --Â Get font directories
d3033 1
a3033 2
   #include <fontconfig/fontconfig.h>

d3039 4
a3042 3
   Returns the list of font directories in config. This includes the
   configured font directories along with any directories below those in the
   filesystem. If config is NULL, the current configuration is used.
d3044 1
a3044 1
                             FcConfigGetConfigFiles
d3048 1
a3048 1
   FcConfigGetConfigFilesÂ --Â Get config files
d3052 1
a3052 2
   #include <fontconfig/fontconfig.h>

d3058 2
a3059 2
   Returns the list of known configuration files used to generate config. If
   config is NULL, the current configuration is used.
d3061 1
a3061 1
                                FcConfigGetCache
d3065 2
a3066 1
   FcConfigGetCacheÂ --Â DEPRECATED used to return per-user cache filename
d3070 1
a3070 2
   #include <fontconfig/fontconfig.h>

d3076 3
a3078 2
   With fontconfig no longer using per-user cache files, this function now
   simply returns NULL to indicate that no per-user file exists.
d3080 1
a3080 1
                              FcConfigGetCacheDirs
d3084 2
a3085 2
   FcConfigGetCacheDirsÂ --Â return the list of directories searched for cache
   files
d3089 1
a3089 2
   #include <fontconfig/fontconfig.h>

d3095 4
a3098 4
   FcConfigGetCacheDirs returns a string list containing all of the
   directories that fontconfig will search when attempting to load a cache
   file for a font directory. If config is NULL, the current configuration is
   used.
d3100 1
a3100 1
                                FcConfigGetFonts
d3104 1
a3104 1
   FcConfigGetFontsÂ --Â Get config font set
d3108 1
a3108 2
   #include <fontconfig/fontconfig.h>

d3114 4
a3117 3
   Returns one of the two sets of fonts from the configuration as specified
   by set. This font set is owned by the library and must not be modified or
   freed. If config is NULL, the current configuration is used.
d3119 1
a3119 1
                               FcConfigGetBlanks
d3123 1
a3123 1
   FcConfigGetBlanksÂ --Â Get config blanks
d3127 1
a3127 2
   #include <fontconfig/fontconfig.h>

d3133 5
a3137 4
   Returns the FcBlanks object associated with the given configuration, if no
   blanks were present in the configuration, this function will return 0. The
   returned FcBlanks object if not NULL, is valid as long as the owning
   FcConfig is alive. If config is NULL, the current configuration is used.
d3139 1
a3139 1
                           FcConfigGetRescanInterval
d3143 1
a3143 1
   FcConfigGetRescanIntervalÂ --Â Get config rescan interval
d3147 1
a3147 2
   #include <fontconfig/fontconfig.h>

d3153 5
a3157 4
   Returns the interval between automatic checks of the configuration (in
   seconds) specified in config. The configuration is checked during a call
   to FcFontList when this interval has passed since the last check. An
   interval setting of zero disables automatic checks. If config is NULL, the
d3160 1
a3160 1
                           FcConfigSetRescanInterval
d3164 1
a3164 1
   FcConfigSetRescanIntervalÂ --Â Set config rescan interval
d3168 1
a3168 2
   #include <fontconfig/fontconfig.h>

d3170 2
a3171 1
   FcBool FcConfigSetRescanInterval(FcConfig *config, int rescanInterval);
d3175 4
a3178 4
   Sets the rescan interval. Returns FcFalse if the interval cannot be set
   (due to allocation failure). Otherwise returns FcTrue. An interval setting
   of zero disables automatic checks. If config is NULL, the current
   configuration is used.
d3180 1
a3180 1
                             FcConfigAppFontAddFile
d3184 1
a3184 1
   FcConfigAppFontAddFileÂ --Â Add font file to font database
d3188 1
a3188 2
   #include <fontconfig/fontconfig.h>

d3190 2
a3191 1
   FcBool FcConfigAppFontAddFile(FcConfig *config, const FcChar8 *file);
d3195 4
a3198 3
   Adds an application-specific font to the configuration. Returns FcFalse if
   the fonts cannot be added (due to allocation failure). Otherwise returns
   FcTrue. If config is NULL, the current configuration is used.
d3200 1
a3200 1
                             FcConfigAppFontAddDir
d3204 2
a3205 1
   FcConfigAppFontAddDirÂ --Â Add fonts from directory to font database
d3209 1
a3209 1
   #include <fontconfig/fontconfig.h>
d3211 2
a3212 2

   FcBool FcConfigAppFontAddDir(FcConfig *config, const FcChar8 *dir);
d3216 5
a3220 4
   Scans the specified directory for fonts, adding each one found to the
   application-specific set of fonts. Returns FcFalse if the fonts cannot be
   added (due to allocation failure). Otherwise returns FcTrue. If config is
   NULL, the current configuration is used.
d3222 1
a3222 1
                              FcConfigAppFontClear
d3226 1
a3226 1
   FcConfigAppFontClearÂ --Â Remove all app fonts from font database
d3230 1
a3230 2
   #include <fontconfig/fontconfig.h>

d3236 2
a3237 2
   Clears the set of application-specific fonts. If config is NULL, the
   current configuration is used.
d3239 1
a3239 1
                           FcConfigSubstituteWithPat
d3243 1
a3243 1
   FcConfigSubstituteWithPatÂ --Â Execute substitutions
d3247 1
a3247 1
   #include <fontconfig/fontconfig.h>
d3249 2
a3250 3

   FcBool FcConfigSubstituteWithPat(FcConfig *config, FcPattern *p, FcPattern
   *p_pat, FcMatchKind kind);
d3254 7
a3260 7
   Performs the sequence of pattern modification operations, if kind is
   FcMatchPattern, then those tagged as pattern operations are applied, else
   if kind is FcMatchFont, those tagged as font operations are applied and
   p_pat is used for <test> elements with target=pattern. Returns FcFalse if
   the substitution cannot be performed (due to allocation failure).
   Otherwise returns FcTrue. If config is NULL, the current configuration is
   used.
d3262 1
a3262 1
                               FcConfigSubstitute
d3266 1
a3266 1
   FcConfigSubstituteÂ --Â Execute substitutions
d3270 1
a3270 2
   #include <fontconfig/fontconfig.h>

d3272 2
a3273 2
   FcBool FcConfigSubstitute(FcConfig *config, FcPattern *p, FcMatchKind
   kind);
d3277 4
a3280 4
   Calls FcConfigSubstituteWithPat setting p_pat to NULL. Returns FcFalse if
   the substitution cannot be performed (due to allocation failure).
   Otherwise returns FcTrue. If config is NULL, the current configuration is
   used.
d3282 1
a3282 1
                                  FcFontMatch
d3286 1
a3286 1
   FcFontMatchÂ --Â Return best font
d3290 1
a3290 1
   #include <fontconfig/fontconfig.h>
d3292 2
a3293 2

   FcPattern * FcFontMatch(FcConfig *config, FcPattern *p, FcResult *result);
d3297 6
a3302 5
   Finds the font in sets most closely matching pattern and returns the
   result of FcFontRenderPrepare for that font and the provided pattern. This
   function should be called only after FcConfigSubstitute and
   FcDefaultSubstitute have been called for p; otherwise the results will not
   be correct. If config is NULL, the current configuration is used.
d3304 1
a3304 1
                                   FcFontSort
d3308 1
a3308 1
   FcFontSortÂ --Â Return list of matching fonts
d3312 1
a3312 1
   #include <fontconfig/fontconfig.h>
d3314 2
a3315 3

   FcFontSet * FcFontSort(FcConfig *config, FcPattern *p, FcBool trim,
   FcCharSet **csp, FcResult *result);
d3319 8
a3326 6
   Returns the list of fonts sorted by closeness to p. If trim is FcTrue,
   elements in the list which don't include Unicode coverage not provided by
   earlier elements in the list are elided. The union of Unicode coverage of
   all of the fonts is returned in csp, if csp is not NULL. This function
   should be called only after FcConfigSubstitute and FcDefaultSubstitute
   have been called for p; otherwise the results will not be correct.
d3328 5
a3332 4
   The returned FcFontSet references FcPattern structures which may be shared
   by the return value from multiple FcFontSort calls, applications must not
   modify these patterns. Instead, they should be passed, along with p to
   FcFontRenderPrepare which combines them into a complete pattern.
d3335 2
a3336 1
   FcFontSetDestroy. If config is NULL, the current configuration is used.
d3338 1
a3338 1
                              FcFontRenderPrepare
d3342 1
a3342 1
   FcFontRenderPrepareÂ --Â Prepare pattern for loading font file
d3346 1
a3346 2
   #include <fontconfig/fontconfig.h>

d3348 2
a3349 2
   FcPattern * FcFontRenderPrepare(FcConfig *config, FcPattern *pat,
   FcPattern *font);
d3353 5
a3357 4
   Creates a new pattern consisting of elements of font not appearing in pat,
   elements of pat not appearing in font and the best matching value from pat
   for elements appearing in both. The result is passed to
   FcConfigSubstituteWithPat with kind FcMatchFont and then returned.
d3359 1
a3359 1
                                   FcFontList
d3363 1
a3363 1
   FcFontListÂ --Â List fonts
d3367 1
a3367 1
   #include <fontconfig/fontconfig.h>
d3369 2
a3370 2

   FcFontSet * FcFontList(FcConfig *config, FcPattern *p, FcObjectSet *os);
d3374 4
a3377 4
   Selects fonts matching p, creates patterns from those fonts containing
   only the objects in os and returns the set of unique such patterns. If
   config is NULL, the default configuration is checked to be up to date, and
   used.
d3379 1
a3379 1
                                FcConfigFilename
d3383 1
a3383 1
   FcConfigFilenameÂ --Â Find a config file
d3387 1
a3387 2
   #include <fontconfig/fontconfig.h>

d3393 11
a3403 10
   Given the specified external entity name, return the associated filename.
   This provides applications a way to convert various configuration file
   references into filename form.

   A null or empty name indicates that the default configuration file should
   be used; which file this references can be overridden with the
   FONTCONFIG_FILE environment variable. Next, if the name starts with ~, it
   refers to a file in the current users home directory. Otherwise if the
   name doesn't start with '/', it refers to a file in the default
   configuration directory; the built-in default directory can be overridden
d3406 1
a3406 1
                              FcConfigParseAndLoad
d3410 1
a3410 1
   FcConfigParseAndLoadÂ --Â load a configuration file
d3414 1
a3414 1
   #include <fontconfig/fontconfig.h>
d3416 2
a3417 3

   FcBool FcConfigParseAndLoad(FcConfig *config, const FcChar8 *file, FcBool
   complain);
d3422 7
a3428 6
   representation in 'config'. Any include files referenced from within
   'file' will be loaded and parsed. If 'complain' is FcFalse, no warning
   will be displayed if 'file' does not exist. Error and warning messages
   will be output to stderr. Returns FcFalse if some error occurred while
   loading the file, either a parse error, semantic error or allocation
   failure. Otherwise returns FcTrue.
d3430 1
a3430 1
                               FcConfigGetSysRoot
d3434 1
a3434 1
   FcConfigGetSysRootÂ --Â Obtain the system root directory
d3438 1
a3438 2
   #include <fontconfig/fontconfig.h>

d3450 1
a3450 1
                               FcConfigSetSysRoot
d3454 1
a3454 1
   FcConfigSetSysRootÂ --Â Set the system root directory
d3458 1
a3458 2
   #include <fontconfig/fontconfig.h>

d3460 2
a3461 1
   void FcConfigSetSysRoot(FcConfig *config, const FcChar8 *sysroot);
d3465 5
a3469 4
   Set 'sysroot' as the system root directory. fontconfig prepend 'sysroot'
   to the cache directories in order to allow people to generate caches at
   the build time. Note that this causes changing current config. i.e. this
   function calls FcConfigSetCurrent() internally.
d3474 1
d3476 1
a3476 3
   --------------------------------------------------------------------------

  FcObjectType
d3479 3
d3483 2
a3484 8
   [128]FcNameRegisterObjectTypesÂ --Â Register object types

   [129]FcNameUnregisterObjectTypesÂ --Â Unregister object types

   [130]FcNameGetObjectTypeÂ --Â Lookup an object type

   Provides for application-specified font name object types so that new
   pattern elements can be generated from font names.
d3486 1
a3486 1
                           FcNameRegisterObjectTypes
d3490 1
a3490 1
   FcNameRegisterObjectTypesÂ --Â Register object types
d3494 1
a3494 1
   #include <fontconfig/fontconfig.h>
d3496 2
a3497 2

   FcBool FcNameRegisterObjectTypes(const FcObjectType *types, int ntype);
d3503 1
a3503 1
                          FcNameUnregisterObjectTypes
d3507 1
a3507 1
   FcNameUnregisterObjectTypesÂ --Â Unregister object types
d3511 1
a3511 2
   #include <fontconfig/fontconfig.h>

d3513 2
a3514 1
   FcBool FcNameUnregisterObjectTypes(const FcObjectType *types, int ntype);
d3520 1
a3520 1
                              FcNameGetObjectType
d3524 1
a3524 1
   FcNameGetObjectTypeÂ --Â Lookup an object type
d3528 1
a3528 2
   #include <fontconfig/fontconfig.h>

d3535 3
d3539 8
a3546 1
   --------------------------------------------------------------------------
d3548 3
a3550 1
  FcConstant
d3552 1
a3552 1
   Table of Contents
d3554 1
a3554 1
   [131]FcNameRegisterConstantsÂ --Â Register symbolic constants
d3556 1
a3556 1
   [132]FcNameUnregisterConstantsÂ --Â Unregister symbolic constants
d3558 2
a3559 1
   [133]FcNameGetConstantÂ --Â Lookup symbolic constant
d3561 1
a3561 1
   [134]FcNameConstantÂ --Â Get the value for a symbolic constant
d3563 1
a3563 1
   Provides for application-specified symbolic constants for font names.
d3565 1
a3565 1
                            FcNameRegisterConstants
d3569 1
a3569 1
   FcNameRegisterConstantsÂ --Â Register symbolic constants
d3573 1
a3573 1
   #include <fontconfig/fontconfig.h>
d3575 2
a3576 2

   FcBool FcNameRegisterConstants(const FcConstant *consts, int nconsts);
d3582 1
a3582 1
                           FcNameUnregisterConstants
d3586 1
a3586 1
   FcNameUnregisterConstantsÂ --Â Unregister symbolic constants
d3590 1
a3590 1
   #include <fontconfig/fontconfig.h>
d3592 1
a3592 2

   FcBool FcNameUnregisterConstants(const FcConstant *consts, int nconsts);
d3596 2
a3597 1
   Deprecated. Does nothing. Returns FcFalse.
d3599 1
a3599 1
                               FcNameGetConstant
d3603 1
a3603 1
   FcNameGetConstantÂ --Â Lookup symbolic constant
d3607 10
a3616 1
   #include <fontconfig/fontconfig.h>
d3618 1
d3620 3
a3622 1
   const FcConstant * FcNameGetConstant(FcChar8 *string);
d3624 2
a3625 1
Description
d3627 1
a3627 1
   Return the FcConstant structure related to symbolic constant string.
d3629 1
a3629 1
                                 FcNameConstant
d3633 2
a3634 1
   FcNameConstantÂ --Â Get the value for a symbolic constant
d3638 14
a3651 1
   #include <fontconfig/fontconfig.h>
d3653 7
d3661 2
a3662 1
   FcBool FcNameConstant(FcChar8 *string, int *result);
d3664 1
a3664 1
Description
d3666 1
a3666 2
   Returns whether a symbolic constant with name string is registered,
   placing the value of the constant in result if present.
d3668 1
a3668 1
   --------------------------------------------------------------------------
d3670 1
a3670 1
  FcBlanks
d3672 4
a3675 1
   Table of Contents
d3677 1
a3677 1
   [135]FcBlanksCreateÂ --Â Create an FcBlanks
d3679 2
a3680 1
   [136]FcBlanksDestroyÂ --Â Destroy and FcBlanks
d3682 1
a3682 1
   [137]FcBlanksAddÂ --Â Add a character to an FcBlanks
d3684 5
a3688 1
   [138]FcBlanksIsMemberÂ --Â Query membership in an FcBlanks
d3690 6
a3695 5
   An FcBlanks object holds a list of Unicode chars which are expected to be
   blank when drawn. When scanning new fonts, any glyphs which are empty and
   not in this list will be assumed to be broken and not placed in the
   FcCharSet associated with the font. This provides a significantly more
   accurate CharSet for applications.
d3697 1
a3697 1
                                 FcBlanksCreate
d3701 1
a3701 1
   FcBlanksCreateÂ --Â Create an FcBlanks
d3705 1
a3705 2
   #include <fontconfig/fontconfig.h>

d3713 1
a3713 1
                                FcBlanksDestroy
d3717 1
a3717 1
   FcBlanksDestroyÂ --Â Destroy and FcBlanks
d3721 1
a3721 2
   #include <fontconfig/fontconfig.h>

d3729 1
a3729 1
                                  FcBlanksAdd
d3733 1
a3733 1
   FcBlanksAddÂ --Â Add a character to an FcBlanks
d3737 1
a3737 2
   #include <fontconfig/fontconfig.h>

d3743 2
a3744 2
   Adds a single character to an FcBlanks object, returning FcFalse if this
   process ran out of memory.
d3746 1
a3746 1
                                FcBlanksIsMember
d3750 1
a3750 1
   FcBlanksIsMemberÂ --Â Query membership in an FcBlanks
d3754 1
a3754 2
   #include <fontconfig/fontconfig.h>

d3760 3
a3762 2
   Returns whether the specified FcBlanks object contains the indicated
   Unicode value.
d3764 1
a3764 3
   --------------------------------------------------------------------------

  FcAtomic
d3767 8
d3776 4
a3779 15
   [139]FcAtomicCreateÂ --Â create an FcAtomic object

   [140]FcAtomicLockÂ --Â lock a file

   [141]FcAtomicNewFileÂ --Â return new temporary file name

   [142]FcAtomicOrigFileÂ --Â return original file name

   [143]FcAtomicReplaceOrigÂ --Â replace original with new

   [144]FcAtomicDeleteNewÂ --Â delete new file

   [145]FcAtomicUnlockÂ --Â unlock a file

   [146]FcAtomicDestroyÂ --Â destroy an FcAtomic object
d3781 1
a3781 6
   These functions provide a safe way to update configuration files, allowing
   ongoing reading of the old configuration file while locked for writing and
   ensuring that a consistent and complete version of the configuration file
   is always available.

                                 FcAtomicCreate
d3785 1
a3785 1
   FcAtomicCreateÂ --Â create an FcAtomic object
d3789 1
a3789 2
   #include <fontconfig/fontconfig.h>

d3795 5
a3799 5
   Creates a data structure containing data needed to control access to file.
   Writing is done to a separate file. Once that file is complete, the
   original configuration file is atomically replaced so that reading process
   always see a consistent and complete file without the need to lock for
   reading.
d3801 1
a3801 1
                                  FcAtomicLock
d3805 1
a3805 1
   FcAtomicLockÂ --Â lock a file
d3809 1
a3809 2
   #include <fontconfig/fontconfig.h>

d3815 3
a3817 2
   Attempts to lock the file referenced by atomic. Returns FcFalse if the
   file is already locked, else returns FcTrue and leaves the file locked.
d3819 1
a3819 1
                                FcAtomicNewFile
d3823 1
a3823 1
   FcAtomicNewFileÂ --Â return new temporary file name
d3827 1
a3827 2
   #include <fontconfig/fontconfig.h>

d3833 2
a3834 2
   Returns the filename for writing a new version of the file referenced by
   atomic.
d3836 1
a3836 1
                                FcAtomicOrigFile
d3840 1
a3840 1
   FcAtomicOrigFileÂ --Â return original file name
d3844 1
a3844 2
   #include <fontconfig/fontconfig.h>

d3852 1
a3852 1
                              FcAtomicReplaceOrig
d3856 1
a3856 1
   FcAtomicReplaceOrigÂ --Â replace original with new
d3860 1
a3860 2
   #include <fontconfig/fontconfig.h>

d3866 3
a3868 3
   Replaces the original file referenced by atomic with the new file. Returns
   FcFalse if the file cannot be replaced due to permission issues in the
   filesystem. Otherwise returns FcTrue.
d3870 1
a3870 1
                               FcAtomicDeleteNew
d3874 1
a3874 1
   FcAtomicDeleteNewÂ --Â delete new file
d3878 1
a3878 2
   #include <fontconfig/fontconfig.h>

d3884 2
a3885 1
   Deletes the new file. Used in error recovery to back out changes.
d3887 1
a3887 1
                                 FcAtomicUnlock
d3891 1
a3891 1
   FcAtomicUnlockÂ --Â unlock a file
d3895 1
a3895 2
   #include <fontconfig/fontconfig.h>

d3903 1
a3903 1
                                FcAtomicDestroy
d3907 1
a3907 1
   FcAtomicDestroyÂ --Â destroy an FcAtomic object
d3911 1
a3911 2
   #include <fontconfig/fontconfig.h>

d3918 1
d3920 1
a3920 3
   --------------------------------------------------------------------------

  File and Directory routines
d3923 5
d3929 7
a3935 13
   [147]FcFileScanÂ --Â scan a font file

   [148]FcFileIsDirÂ --Â check whether a file is a directory

   [149]FcDirScanÂ --Â scan a font directory without caching it

   [150]FcDirSaveÂ --Â DEPRECATED: formerly used to save a directory cache

   [151]FcDirCacheUnlinkÂ --Â Remove all caches related to dir

   [152]FcDirCacheValidÂ --Â check directory cache

   [153]FcDirCacheLoadÂ --Â load a directory cache
d3937 2
a3938 1
   [154]FcDirCacheRescanÂ --Â Re-scan a directory cache
d3940 1
a3940 10
   [155]FcDirCacheReadÂ --Â read or construct a directory cache

   [156]FcDirCacheLoadFileÂ --Â load a cache file

   [157]FcDirCacheUnloadÂ --Â unload a cache file

   These routines work with font files and directories, including font
   directory cache files.

                                   FcFileScan
d3944 1
a3944 1
   FcFileScanÂ --Â scan a font file
d3948 1
a3948 1
   #include <fontconfig/fontconfig.h>
d3950 2
a3951 3

   FcBool FcFileScan(FcFontSet *set, FcStrSet *dirs, FcFileCache *cache,
   FcBlanks *blanks, const FcChar8 *file, FcBool force);
d3955 12
a3966 10
   Scans a single file and adds all fonts found to set. If force is FcTrue,
   then the file is scanned even if associated information is found in cache.
   If file is a directory, it is added to dirs. Whether fonts are found
   depends on fontconfig policy as well as the current configuration.
   Internally, fontconfig will ignore BDF and PCF fonts which are not in
   Unicode (or the effectively equivalent ISO Latin-1) encoding as those are
   not usable by Unicode-based applications. The configuration can ignore
   fonts based on filename or contents of the font file itself. Returns
   FcFalse if any of the fonts cannot be added (due to allocation failure).
   Otherwise returns FcTrue.
d3968 1
a3968 1
                                  FcFileIsDir
d3972 1
a3972 1
   FcFileIsDirÂ --Â check whether a file is a directory
d3976 1
a3976 2
   #include <fontconfig/fontconfig.h>

d3982 2
a3983 1
   Returns FcTrue if file is a directory, otherwise returns FcFalse.
d3985 1
a3985 1
                                   FcDirScan
d3989 1
a3989 1
   FcDirScanÂ --Â scan a font directory without caching it
d3993 1
a3993 2
   #include <fontconfig/fontconfig.h>

d3995 2
a3996 2
   FcBool FcDirScan(FcFontSet *set, FcStrSet *dirs, FcFileCache *cache,
   FcBlanks *blanks, const FcChar8 *dir, FcBool force);
d4000 5
a4004 5
   If cache is not zero or if force is FcFalse, this function currently
   returns FcFalse. Otherwise, it scans an entire directory and adds all
   fonts found to set. Any subdirectories found are added to dirs. Calling
   this function does not create any cache files. Use FcDirCacheRead() if
   caching is desired.
d4006 1
a4006 1
                                   FcDirSave
d4010 2
a4011 1
   FcDirSaveÂ --Â DEPRECATED: formerly used to save a directory cache
d4015 1
a4015 1
   #include <fontconfig/fontconfig.h>
d4017 2
a4018 2

   FcBool FcDirSave(FcFontSet *set, FcStrSet *dirs, const FcChar8 *dir);
d4022 5
a4026 4
   This function now does nothing aside from returning FcFalse. It used to
   creates the per-directory cache file for dir and populates it with the
   fonts in set and subdirectories in dirs. All of this functionality is now
   automatically managed by FcDirCacheLoad and FcDirCacheRead.
d4028 1
a4028 1
                                FcDirCacheUnlink
d4032 1
a4032 1
   FcDirCacheUnlinkÂ --Â Remove all caches related to dir
d4036 1
a4036 2
   #include <fontconfig/fontconfig.h>

d4042 4
a4045 3
   Scans the cache directories in config, removing any instances of the cache
   file for dir. Returns FcFalse when some internal error occurs (out of
   memory, etc). Errors actually unlinking any files are ignored.
d4047 1
a4047 1
                                FcDirCacheValid
d4051 1
a4051 1
   FcDirCacheValidÂ --Â check directory cache
d4055 1
a4055 2
   #include <fontconfig/fontconfig.h>

d4061 2
a4062 2
   Returns FcTrue if dir has an associated valid cache file, else returns
   FcFalse
d4064 1
a4064 1
                                 FcDirCacheLoad
d4068 1
a4068 1
   FcDirCacheLoadÂ --Â load a directory cache
d4072 1
a4072 2
   #include <fontconfig/fontconfig.h>

d4074 2
a4075 2
   FcCache * FcDirCacheLoad(const FcChar8 *dir, FcConfig *config, FcChar8
   **cache_file);
d4079 3
a4081 3
   Loads the cache related to dir. If no cache file exists, returns NULL. The
   name of the cache file is returned in cache_file, unless that is NULL. See
   also FcDirCacheRead.
d4083 1
a4083 1
                                FcDirCacheRescan
d4087 1
a4087 1
   FcDirCacheRescanÂ --Â Re-scan a directory cache
d4091 1
a4091 1
   #include <fontconfig/fontconfig.h>
d4093 2
a4094 2

   FcCache * FcDirCacheRescan(const FcChar8 *dir, FcConfig *config);
d4098 2
a4099 2
   Re-scan directories only at dir and update the cache. returns NULL if
   failed.
d4105 1
a4105 1
                                 FcDirCacheRead
d4109 1
a4109 1
   FcDirCacheReadÂ --Â read or construct a directory cache
d4113 1
a4113 1
   #include <fontconfig/fontconfig.h>
d4115 2
a4116 3

   FcCache * FcDirCacheRead(const FcChar8 *dir, FcBool force, FcConfig
   *config);
d4120 3
a4122 3
   This returns a cache for dir. If force is FcFalse, then an existing, valid
   cache file will be used. Otherwise, a new cache will be created by
   scanning the directory and that returned.
d4124 1
a4124 1
                               FcDirCacheLoadFile
d4128 1
a4128 1
   FcDirCacheLoadFileÂ --Â load a cache file
d4132 1
a4132 1
   #include <fontconfig/fontconfig.h>
d4134 2
a4135 3

   FcCache * FcDirCacheLoadFile(const FcChar8 *cache_file, struct stat
   *file_stat);
d4139 3
a4141 2
   This function loads a directory cache from cache_file. If file_stat is
   non-NULL, it will be filled with the results of stat(2) on the cache file.
d4143 1
a4143 1
                                FcDirCacheUnload
d4147 1
a4147 1
   FcDirCacheUnloadÂ --Â unload a cache file
d4151 1
a4151 2
   #include <fontconfig/fontconfig.h>

d4157 3
a4159 2
   This function dereferences cache. When no other references to it remain,
   all memory associated with the cache will be freed.
d4161 1
a4161 3
   --------------------------------------------------------------------------

  FcCache routines
d4164 5
d4170 4
a4173 13
   [158]FcCacheDirÂ --Â Return directory of cache

   [159]FcCacheCopySetÂ --Â Returns a copy of the fontset from cache

   [160]FcCacheSubdirÂ --Â Return the i'th subdirectory.

   [161]FcCacheNumSubdirÂ --Â Return the number of subdirectories in cache.

   [162]FcCacheNumFontÂ --Â Returns the number of fonts in cache.

   [163]FcDirCacheCleanÂ --Â This tries to clean up the cache directory of
   cache_dir. This returns FcTrue if the operation is successfully complete.
   otherwise FcFalse.
d4175 1
a4175 1
   [164]FcCacheCreateTagFileÂ --Â Create CACHEDIR.TAG at cache directory.
d4177 3
a4179 3
   These routines work with font directory caches, accessing their contents
   in limited ways. It is not expected that normal applications will need to
   use these functions.
d4181 1
a4181 1
                                   FcCacheDir
d4185 1
a4185 1
   FcCacheDirÂ --Â Return directory of cache
d4189 1
a4189 2
   #include <fontconfig/fontconfig.h>

d4195 2
a4196 1
   This function returns the directory from which the cache was constructed.
d4198 1
a4198 1
                                 FcCacheCopySet
d4202 1
a4202 1
   FcCacheCopySetÂ --Â Returns a copy of the fontset from cache
d4206 1
a4206 2
   #include <fontconfig/fontconfig.h>

d4212 3
a4214 2
   The returned fontset contains each of the font patterns from cache. This
   fontset may be modified, but the patterns from the cache are read-only.
d4216 1
a4216 1
                                 FcCacheSubdir
d4220 1
a4220 1
   FcCacheSubdirÂ --Â Return the i'th subdirectory.
d4224 1
a4224 2
   #include <fontconfig/fontconfig.h>

d4230 3
a4232 3
   The set of subdirectories stored in a cache file are indexed by this
   function, i should range from 0 to n-1, where n is the return value from
   FcCacheNumSubdir.
d4234 1
a4234 1
                                FcCacheNumSubdir
d4238 2
a4239 1
   FcCacheNumSubdirÂ --Â Return the number of subdirectories in cache.
d4243 1
a4243 2
   #include <fontconfig/fontconfig.h>

d4251 1
a4251 1
                                 FcCacheNumFont
d4255 1
a4255 1
   FcCacheNumFontÂ --Â Returns the number of fonts in cache.
d4259 1
a4259 2
   #include <fontconfig/fontconfig.h>

d4265 2
a4266 2
   This returns the number of fonts which would be included in the return
   from FcCacheCopySet.
d4268 1
a4268 1
                                FcDirCacheClean
d4272 3
a4274 3
   FcDirCacheCleanÂ --Â This tries to clean up the cache directory of
   cache_dir. This returns FcTrue if the operation is successfully complete.
   otherwise FcFalse.
d4278 1
a4278 2
   #include <fontconfig/fontconfig.h>

d4280 2
a4281 1
   FcBool FcDirCacheClean(const FcChar8 *cache_dir, FcBoolverbose);
a4284 2


d4289 1
a4289 1
                              FcCacheCreateTagFile
d4293 1
a4293 1
   FcCacheCreateTagFileÂ --Â Create CACHEDIR.TAG at cache directory.
d4297 1
a4297 2
   #include <fontconfig/fontconfig.h>

d4303 2
a4304 2
   This tries to create CACHEDIR.TAG file at the cache directory registered
   to config.
d4309 1
d4311 1
a4311 3
   --------------------------------------------------------------------------

  FcStrSet and FcStrList
d4314 11
d4326 3
a4328 13
   [165]FcStrSetCreateÂ --Â create a string set

   [166]FcStrSetMemberÂ --Â check set for membership

   [167]FcStrSetEqualÂ --Â check sets for equality

   [168]FcStrSetAddÂ --Â add to a string set

   [169]FcStrSetAddFilenameÂ --Â add a filename to a string set

   [170]FcStrSetDelÂ --Â delete from a string set

   [171]FcStrSetDestroyÂ --Â destroy a string set
d4330 1
a4330 12
   [172]FcStrListCreateÂ --Â create a string iterator

   [173]FcStrListFirstÂ --Â get first string in iteration

   [174]FcStrListNextÂ --Â get next string in iteration

   [175]FcStrListDoneÂ --Â destroy a string iterator

   A data structure for enumerating strings, used to list directories while
   scanning the configuration as directories are added while scanning.

                                 FcStrSetCreate
d4334 1
a4334 1
   FcStrSetCreateÂ --Â create a string set
d4338 1
a4338 2
   #include <fontconfig/fontconfig.h>

d4346 1
a4346 1
                                 FcStrSetMember
d4350 1
a4350 1
   FcStrSetMemberÂ --Â check set for membership
d4354 1
a4354 2
   #include <fontconfig/fontconfig.h>

d4362 1
a4362 1
                                 FcStrSetEqual
d4366 1
a4366 1
   FcStrSetEqualÂ --Â check sets for equality
d4370 1
a4370 2
   #include <fontconfig/fontconfig.h>

d4376 3
a4378 2
   Returns whether set_a contains precisely the same strings as set_b.
   Ordering of strings within the two sets is not considered.
d4380 1
a4380 1
                                  FcStrSetAdd
d4384 1
a4384 1
   FcStrSetAddÂ --Â add to a string set
d4388 1
a4388 2
   #include <fontconfig/fontconfig.h>

d4396 1
a4396 1
                              FcStrSetAddFilename
d4400 1
a4400 1
   FcStrSetAddFilenameÂ --Â add a filename to a string set
d4404 1
a4404 2
   #include <fontconfig/fontconfig.h>

d4410 3
a4412 3
   Adds a copy s to set, The copy is created with FcStrCopyFilename so that
   leading '~' values are replaced with the value of the HOME environment
   variable.
d4414 1
a4414 1
                                  FcStrSetDel
d4418 1
a4418 1
   FcStrSetDelÂ --Â delete from a string set
d4422 1
a4422 2
   #include <fontconfig/fontconfig.h>

d4428 2
a4429 1
   Removes s from set, returning FcTrue if s was a member else FcFalse.
d4431 1
a4431 1
                                FcStrSetDestroy
d4435 1
a4435 1
   FcStrSetDestroyÂ --Â destroy a string set
d4439 1
a4439 2
   #include <fontconfig/fontconfig.h>

d4447 1
a4447 1
                                FcStrListCreate
d4451 1
a4451 1
   FcStrListCreateÂ --Â create a string iterator
d4455 1
a4455 2
   #include <fontconfig/fontconfig.h>

d4463 1
a4463 1
                                 FcStrListFirst
d4467 1
a4467 1
   FcStrListFirstÂ --Â get first string in iteration
d4471 1
a4471 2
   #include <fontconfig/fontconfig.h>

d4483 1
a4483 1
                                 FcStrListNext
d4487 1
a4487 1
   FcStrListNextÂ --Â get next string in iteration
d4491 1
a4491 2
   #include <fontconfig/fontconfig.h>

d4499 1
a4499 1
                                 FcStrListDone
d4503 1
a4503 1
   FcStrListDoneÂ --Â destroy a string iterator
d4507 1
a4507 2
   #include <fontconfig/fontconfig.h>

d4514 1
d4516 1
a4516 3
   --------------------------------------------------------------------------

  String utilities
d4519 16
d4536 4
a4539 15
   [176]FcUtf8ToUcs4Â --Â convert UTF-8 to UCS4

   [177]FcUcs4ToUtf8Â --Â convert UCS4 to UTF-8

   [178]FcUtf8LenÂ --Â count UTF-8 encoded chars

   [179]FcUtf16ToUcs4Â --Â convert UTF-16 to UCS4

   [180]FcUtf16LenÂ --Â count UTF-16 encoded chars

   [181]FcIsLowerÂ --Â check for lower case ASCII character

   [182]FcIsUpperÂ --Â check for upper case ASCII character

   [183]FcToLowerÂ --Â convert upper case ASCII to lower case
d4541 3
a4543 1
   [184]FcStrCopyÂ --Â duplicate a string
d4545 1
a4545 25
   [185]FcStrDowncaseÂ --Â create a lower case translation of a string

   [186]FcStrCopyFilenameÂ --Â create a complete path from a filename

   [187]FcStrCmpÂ --Â compare UTF-8 strings

   [188]FcStrCmpIgnoreCaseÂ --Â compare UTF-8 strings ignoring case

   [189]FcStrStrÂ --Â locate UTF-8 substring

   [190]FcStrStrIgnoreCaseÂ --Â locate UTF-8 substring ignoring ASCII case

   [191]FcStrPlusÂ --Â concatenate two strings

   [192]FcStrFreeÂ --Â free a string

   [193]FcStrDirnameÂ --Â directory part of filename

   [194]FcStrBasenameÂ --Â last component of filename

   Fontconfig manipulates many UTF-8 strings represented with the FcChar8
   type. These functions are exposed to help applications deal with these
   UTF-8 strings in a locale-insensitive manner.

                                  FcUtf8ToUcs4
d4549 1
a4549 1
   FcUtf8ToUcs4Â --Â convert UTF-8 to UCS4
d4553 1
a4553 2
   #include <fontconfig/fontconfig.h>

d4559 3
a4561 2
   Converts the next Unicode char from src into dst and returns the number of
   bytes containing the char. src must be at least len bytes long.
d4563 1
a4563 1
                                  FcUcs4ToUtf8
d4567 1
a4567 1
   FcUcs4ToUtf8Â --Â convert UCS4 to UTF-8
d4571 1
a4571 2
   #include <fontconfig/fontconfig.h>

d4577 2
a4578 2
   Converts the Unicode char from src into dst and returns the number of
   bytes needed to encode the char.
d4580 1
a4580 1
                                   FcUtf8Len
d4584 1
a4584 1
   FcUtf8LenÂ --Â count UTF-8 encoded chars
d4588 1
a4588 1
   #include <fontconfig/fontconfig.h>
d4590 2
a4591 2

   FcBool FcUtf8Len(FcChar8 *src, int len, int *nchar, int *wchar);
d4595 5
a4599 4
   Counts the number of Unicode chars in len bytes of src. Places that count
   in nchar. wchar contains 1, 2 or 4 depending on the number of bytes needed
   to hold the largest Unicode char counted. The return value indicates
   whether src is a well-formed UTF8 string.
d4601 1
a4601 1
                                 FcUtf16ToUcs4
d4605 1
a4605 1
   FcUtf16ToUcs4Â --Â convert UTF-16 to UCS4
d4609 1
a4609 2
   #include <fontconfig/fontconfig.h>

d4611 2
a4612 1
   int FcUtf16ToUcs4(FcChar8 *src, FcEndian endian, FcChar32 *dst, int len);
d4616 4
a4619 3
   Converts the next Unicode char from src into dst and returns the number of
   bytes containing the char. src must be at least len bytes long. Bytes of
   src are combined into 16-bit units according to endian.
d4621 1
a4621 1
                                   FcUtf16Len
d4625 1
a4625 1
   FcUtf16LenÂ --Â count UTF-16 encoded chars
d4629 1
a4629 1
   #include <fontconfig/fontconfig.h>
d4631 2
a4632 3

   FcBool FcUtf16Len(FcChar8 *src, FcEndian endian, int len, int *nchar, int
   *wchar);
d4636 6
a4641 5
   Counts the number of Unicode chars in len bytes of src. Bytes of src are
   combined into 16-bit units according to endian. Places that count in
   nchar. wchar contains 1, 2 or 4 depending on the number of bytes needed to
   hold the largest Unicode char counted. The return value indicates whether
   string is a well-formed UTF16 string.
d4643 1
a4643 1
                                   FcIsLower
d4647 1
a4647 1
   FcIsLowerÂ --Â check for lower case ASCII character
d4651 1
a4651 2
   #include <fontconfig/fontconfig.h>

d4659 1
a4659 1
                                   FcIsUpper
d4663 1
a4663 1
   FcIsUpperÂ --Â check for upper case ASCII character
d4667 1
a4667 2
   #include <fontconfig/fontconfig.h>

d4675 1
a4675 1
                                   FcToLower
d4679 1
a4679 1
   FcToLowerÂ --Â convert upper case ASCII to lower case
d4683 1
a4683 2
   #include <fontconfig/fontconfig.h>

d4689 2
a4690 2
   This macro converts upper case ASCII c to the equivalent lower case
   letter.
d4692 1
a4692 1
                                   FcStrCopy
d4696 1
a4696 1
   FcStrCopyÂ --Â duplicate a string
d4700 1
a4700 2
   #include <fontconfig/fontconfig.h>

d4706 3
a4708 2
   Allocates memory, copies s and returns the resulting buffer. Yes, this is
   strdup, but that function isn't available on every platform.
d4710 1
a4710 1
                                 FcStrDowncase
d4714 1
a4714 1
   FcStrDowncaseÂ --Â create a lower case translation of a string
d4718 1
a4718 2
   #include <fontconfig/fontconfig.h>

d4724 2
a4725 2
   Allocates memory, copies s, converting upper case letters to lower case
   and returns the allocated buffer.
d4727 1
a4727 1
                               FcStrCopyFilename
d4731 1
a4731 1
   FcStrCopyFilenameÂ --Â create a complete path from a filename
d4735 1
a4735 2
   #include <fontconfig/fontconfig.h>

d4741 9
a4749 7
   FcStrCopyFilename constructs an absolute pathname from s. It converts any
   leading '~' characters in to the value of the HOME environment variable,
   and any relative paths are converted to absolute paths using the current
   working directory. Sequences of '/' characters are converted to a single
   '/', and names containing the current directory '.' or parent directory
   '..' are correctly reconstructed. Returns NULL if '~' is the leading
   character and HOME is unset or disabled (see FcConfigEnableHome).
d4751 1
a4751 1
                                    FcStrCmp
d4755 1
a4755 1
   FcStrCmpÂ --Â compare UTF-8 strings
d4759 1
a4759 2
   #include <fontconfig/fontconfig.h>

d4767 1
a4767 1
                               FcStrCmpIgnoreCase
d4771 1
a4771 1
   FcStrCmpIgnoreCaseÂ --Â compare UTF-8 strings ignoring case
d4775 1
a4775 2
   #include <fontconfig/fontconfig.h>

d4781 2
a4782 2
   Returns the usual <0, 0, >0 result of comparing s1 and s2. This test is
   case-insensitive for all proper UTF-8 encoded strings.
d4784 1
a4784 1
                                    FcStrStr
d4788 1
a4788 1
   FcStrStrÂ --Â locate UTF-8 substring
d4792 1
a4792 2
   #include <fontconfig/fontconfig.h>

d4798 3
a4800 2
   Returns the location of s2 in s1. Returns NULL if s2 is not present in s1.
   This test will operate properly with UTF8 encoded strings.
d4802 1
a4802 1
                               FcStrStrIgnoreCase
d4806 2
a4807 1
   FcStrStrIgnoreCaseÂ --Â locate UTF-8 substring ignoring ASCII case
d4811 1
a4811 2
   #include <fontconfig/fontconfig.h>

d4813 2
a4814 1
   FcChar8 * FcStrStrIgnoreCase(const FcChar8 *s1, const FcChar8 *s2);
d4818 3
a4820 3
   Returns the location of s2 in s1, ignoring case. Returns NULL if s2 is not
   present in s1. This test is case-insensitive for all proper UTF-8 encoded
   strings.
d4822 1
a4822 1
                                   FcStrPlus
d4826 1
a4826 1
   FcStrPlusÂ --Â concatenate two strings
d4830 1
a4830 2
   #include <fontconfig/fontconfig.h>

d4836 2
a4837 2
   This function allocates new storage and places the concatenation of s1 and
   s2 there, returning the new string.
d4839 1
a4839 1
                                   FcStrFree
d4843 1
a4843 1
   FcStrFreeÂ --Â free a string
d4847 1
a4847 2
   #include <fontconfig/fontconfig.h>

d4853 2
a4854 2
   This is just a wrapper around free(3) which helps track memory usage of
   strings within the fontconfig library.
d4856 1
a4856 1
                                  FcStrDirname
d4860 1
a4860 1
   FcStrDirnameÂ --Â directory part of filename
d4864 1
a4864 2
   #include <fontconfig/fontconfig.h>

d4870 3
a4872 2
   Returns the directory containing file. This is returned in newly allocated
   storage which should be freed when no longer needed.
d4874 1
a4874 1
                                 FcStrBasename
d4878 1
a4878 1
   FcStrBasenameÂ --Â last component of filename
d4882 1
a4882 2
   #include <fontconfig/fontconfig.h>

d4888 3
a4890 201
   Returns the filename of file stripped of any leading directory names. This
   is returned in newly allocated storage which should be freed when no
   longer needed.

References

   Visible links
   1. file:///tmp/html-rhkMLA#AEN16
   2. file:///tmp/html-rhkMLA#AEN19
   3. file:///tmp/html-rhkMLA#AEN31
   4. file:///tmp/html-rhkMLA#AEN102
   5. file:///tmp/html-rhkMLA#FCINITLOADCONFIG
   6. file:///tmp/html-rhkMLA#FCINITLOADCONFIGANDFONTS
   7. file:///tmp/html-rhkMLA#FCINIT
   8. file:///tmp/html-rhkMLA#FCFINI
   9. file:///tmp/html-rhkMLA#FCGETVERSION
  10. file:///tmp/html-rhkMLA#FCINITREINITIALIZE
  11. file:///tmp/html-rhkMLA#FCINITBRINGUPTODATE
  12. file:///tmp/html-rhkMLA#FCPATTERNCREATE
  13. file:///tmp/html-rhkMLA#FCPATTERNDUPLICATE
  14. file:///tmp/html-rhkMLA#FCPATTERNREFERENCE
  15. file:///tmp/html-rhkMLA#FCPATTERNDESTROY
  16. file:///tmp/html-rhkMLA#FCPATTERNEQUAL
  17. file:///tmp/html-rhkMLA#FCPATTERNEQUALSUBSET
  18. file:///tmp/html-rhkMLA#FCPATTERNFILTER
  19. file:///tmp/html-rhkMLA#FCPATTERNHASH
  20. file:///tmp/html-rhkMLA#FCPATTERNADD
  21. file:///tmp/html-rhkMLA#FCPATTERNADDWEAK
  22. file:///tmp/html-rhkMLA#FCPATTERNADD-TYPE
  23. file:///tmp/html-rhkMLA#FCPATTERNGET
  24. file:///tmp/html-rhkMLA#FCPATTERNGET-TYPE
  25. file:///tmp/html-rhkMLA#FCPATTERNBUILD
  26. file:///tmp/html-rhkMLA#FCPATTERNDEL
  27. file:///tmp/html-rhkMLA#FCPATTERNREMOVE
  28. file:///tmp/html-rhkMLA#FCPATTERNPRINT
  29. file:///tmp/html-rhkMLA#FCDEFAULTSUBSTITUTE
  30. file:///tmp/html-rhkMLA#FCNAMEPARSE
  31. file:///tmp/html-rhkMLA#FCNAMEUNPARSE
  32. file:///tmp/html-rhkMLA#FCPATTERNFORMAT
  33. file:///tmp/html-rhkMLA#FCFONTSETCREATE
  34. file:///tmp/html-rhkMLA#FCFONTSETDESTROY
  35. file:///tmp/html-rhkMLA#FCFONTSETADD
  36. file:///tmp/html-rhkMLA#FCFONTSETLIST
  37. file:///tmp/html-rhkMLA#FCFONTSETMATCH
  38. file:///tmp/html-rhkMLA#FCFONTSETPRINT
  39. file:///tmp/html-rhkMLA#FCFONTSETSORT
  40. file:///tmp/html-rhkMLA#FCFONTSETSORTDESTROY
  41. file:///tmp/html-rhkMLA#FCOBJECTSETCREATE
  42. file:///tmp/html-rhkMLA#FCOBJECTSETADD
  43. file:///tmp/html-rhkMLA#FCOBJECTSETDESTROY
  44. file:///tmp/html-rhkMLA#FCOBJECTSETBUILD
  45. file:///tmp/html-rhkMLA#FCFREETYPECHARINDEX
  46. file:///tmp/html-rhkMLA#FCFREETYPECHARSET
  47. file:///tmp/html-rhkMLA#FCFREETYPECHARSETANDSPACING
  48. file:///tmp/html-rhkMLA#FCFREETYPEQUERY
  49. file:///tmp/html-rhkMLA#FCFREETYPEQUERYFACE
  50. file:///tmp/html-rhkMLA#FCVALUEDESTROY
  51. file:///tmp/html-rhkMLA#FCVALUESAVE
  52. file:///tmp/html-rhkMLA#FCVALUEPRINT
  53. file:///tmp/html-rhkMLA#FCVALUEEQUAL
  54. file:///tmp/html-rhkMLA#FCCHARSETCREATE
  55. file:///tmp/html-rhkMLA#FCCHARSETDESTROY
  56. file:///tmp/html-rhkMLA#FCCHARSETADDCHAR
  57. file:///tmp/html-rhkMLA#FCCHARSETDELCHAR
  58. file:///tmp/html-rhkMLA#FCCHARSETCOPY
  59. file:///tmp/html-rhkMLA#FCCHARSETEQUAL
  60. file:///tmp/html-rhkMLA#FCCHARSETINTERSECT
  61. file:///tmp/html-rhkMLA#FCCHARSETUNION
  62. file:///tmp/html-rhkMLA#FCCHARSETSUBTRACT
  63. file:///tmp/html-rhkMLA#FCCHARSETMERGE
  64. file:///tmp/html-rhkMLA#FCCHARSETHASCHAR
  65. file:///tmp/html-rhkMLA#FCCHARSETCOUNT
  66. file:///tmp/html-rhkMLA#FCCHARSETINTERSECTCOUNT
  67. file:///tmp/html-rhkMLA#FCCHARSETSUBTRACTCOUNT
  68. file:///tmp/html-rhkMLA#FCCHARSETISSUBSET
  69. file:///tmp/html-rhkMLA#FCCHARSETFIRSTPAGE
  70. file:///tmp/html-rhkMLA#FCCHARSETNEXTPAGE
  71. file:///tmp/html-rhkMLA#FCCHARSETCOVERAGE
  72. file:///tmp/html-rhkMLA#FCCHARSETNEW
  73. file:///tmp/html-rhkMLA#FCLANGSETCREATE
  74. file:///tmp/html-rhkMLA#FCLANGSETDESTROY
  75. file:///tmp/html-rhkMLA#FCLANGSETCOPY
  76. file:///tmp/html-rhkMLA#FCLANGSETADD
  77. file:///tmp/html-rhkMLA#FCLANGSETDEL
  78. file:///tmp/html-rhkMLA#FCLANGSETUNION
  79. file:///tmp/html-rhkMLA#FCLANGSETSUBTRACT
  80. file:///tmp/html-rhkMLA#FCLANGSETCOMPARE
  81. file:///tmp/html-rhkMLA#FCLANGSETCONTAINS
  82. file:///tmp/html-rhkMLA#FCLANGSETEQUAL
  83. file:///tmp/html-rhkMLA#FCLANGSETHASH
  84. file:///tmp/html-rhkMLA#FCLANGSETHASLANG
  85. file:///tmp/html-rhkMLA#FCGETDEFAULTLANGS
  86. file:///tmp/html-rhkMLA#FCLANGSETGETLANGS
  87. file:///tmp/html-rhkMLA#FCGETLANGS
  88. file:///tmp/html-rhkMLA#FCLANGNORMALIZE
  89. file:///tmp/html-rhkMLA#FCLANGGETCHARSET
  90. file:///tmp/html-rhkMLA#FCMATRIXINIT
  91. file:///tmp/html-rhkMLA#FCMATRIXCOPY
  92. file:///tmp/html-rhkMLA#FCMATRIXEQUAL
  93. file:///tmp/html-rhkMLA#FCMATRIXMULTIPLY
  94. file:///tmp/html-rhkMLA#FCMATRIXROTATE
  95. file:///tmp/html-rhkMLA#FCMATRIXSCALE
  96. file:///tmp/html-rhkMLA#FCMATRIXSHEAR
  97. file:///tmp/html-rhkMLA#FCCONFIGCREATE
  98. file:///tmp/html-rhkMLA#FCCONFIGREFERENCE
  99. file:///tmp/html-rhkMLA#FCCONFIGDESTROY
 100. file:///tmp/html-rhkMLA#FCCONFIGSETCURRENT
 101. file:///tmp/html-rhkMLA#FCCONFIGGETCURRENT
 102. file:///tmp/html-rhkMLA#FCCONFIGUPTODATE
 103. file:///tmp/html-rhkMLA#FCCONFIGHOME
 104. file:///tmp/html-rhkMLA#FCCONFIGENABLEHOME
 105. file:///tmp/html-rhkMLA#FCCONFIGBUILDFONTS
 106. file:///tmp/html-rhkMLA#FCCONFIGGETCONFIGDIRS
 107. file:///tmp/html-rhkMLA#FCCONFIGGETFONTDIRS
 108. file:///tmp/html-rhkMLA#FCCONFIGGETCONFIGFILES
 109. file:///tmp/html-rhkMLA#FCCONFIGGETCACHE
 110. file:///tmp/html-rhkMLA#FCCONFIGGETCACHEDIRS
 111. file:///tmp/html-rhkMLA#FCCONFIGGETFONTS
 112. file:///tmp/html-rhkMLA#FCCONFIGGETBLANKS
 113. file:///tmp/html-rhkMLA#FCCONFIGGETRESCANINTERVAL
 114. file:///tmp/html-rhkMLA#FCCONFIGSETRESCANINTERVAL
 115. file:///tmp/html-rhkMLA#FCCONFIGAPPFONTADDFILE
 116. file:///tmp/html-rhkMLA#FCCONFIGAPPFONTADDDIR
 117. file:///tmp/html-rhkMLA#FCCONFIGAPPFONTCLEAR
 118. file:///tmp/html-rhkMLA#FCCONFIGSUBSTITUTEWITHPAT
 119. file:///tmp/html-rhkMLA#FCCONFIGSUBSTITUTE
 120. file:///tmp/html-rhkMLA#FCFONTMATCH
 121. file:///tmp/html-rhkMLA#FCFONTSORT
 122. file:///tmp/html-rhkMLA#FCFONTRENDERPREPARE
 123. file:///tmp/html-rhkMLA#FCFONTLIST
 124. file:///tmp/html-rhkMLA#FCCONFIGFILENAME
 125. file:///tmp/html-rhkMLA#FCCONFIGPARSEANDLOAD
 126. file:///tmp/html-rhkMLA#FCCONFIGGETSYSROOT
 127. file:///tmp/html-rhkMLA#FCCONFIGSETSYSROOT
 128. file:///tmp/html-rhkMLA#FCNAMEREGISTEROBJECTTYPES
 129. file:///tmp/html-rhkMLA#FCNAMEUNREGISTEROBJECTTYPES
 130. file:///tmp/html-rhkMLA#FCNAMEGETOBJECTTYPE
 131. file:///tmp/html-rhkMLA#FCNAMEREGISTERCONSTANTS
 132. file:///tmp/html-rhkMLA#FCNAMEUNREGISTERCONSTANTS
 133. file:///tmp/html-rhkMLA#FCNAMEGETCONSTANT
 134. file:///tmp/html-rhkMLA#FCNAMECONSTANT
 135. file:///tmp/html-rhkMLA#FCBLANKSCREATE
 136. file:///tmp/html-rhkMLA#FCBLANKSDESTROY
 137. file:///tmp/html-rhkMLA#FCBLANKSADD
 138. file:///tmp/html-rhkMLA#FCBLANKSISMEMBER
 139. file:///tmp/html-rhkMLA#FCATOMICCREATE
 140. file:///tmp/html-rhkMLA#FCATOMICLOCK
 141. file:///tmp/html-rhkMLA#FCATOMICNEWFILE
 142. file:///tmp/html-rhkMLA#FCATOMICORIGFILE
 143. file:///tmp/html-rhkMLA#FCATOMICREPLACEORIG
 144. file:///tmp/html-rhkMLA#FCATOMICDELETENEW
 145. file:///tmp/html-rhkMLA#FCATOMICUNLOCK
 146. file:///tmp/html-rhkMLA#FCATOMICDESTROY
 147. file:///tmp/html-rhkMLA#FCFILESCAN
 148. file:///tmp/html-rhkMLA#FCFILEISDIR
 149. file:///tmp/html-rhkMLA#FCDIRSCAN
 150. file:///tmp/html-rhkMLA#FCDIRSAVE
 151. file:///tmp/html-rhkMLA#FCDIRCACHEUNLINK
 152. file:///tmp/html-rhkMLA#FCDIRCACHEVALID
 153. file:///tmp/html-rhkMLA#FCDIRCACHELOAD
 154. file:///tmp/html-rhkMLA#FCDIRCACHERESCAN
 155. file:///tmp/html-rhkMLA#FCDIRCACHEREAD
 156. file:///tmp/html-rhkMLA#FCDIRCACHELOADFILE
 157. file:///tmp/html-rhkMLA#FCDIRCACHEUNLOAD
 158. file:///tmp/html-rhkMLA#FCCACHEDIR
 159. file:///tmp/html-rhkMLA#FCCACHECOPYSET
 160. file:///tmp/html-rhkMLA#FCCACHESUBDIR
 161. file:///tmp/html-rhkMLA#FCCACHENUMSUBDIR
 162. file:///tmp/html-rhkMLA#FCCACHENUMFONT
 163. file:///tmp/html-rhkMLA#FCDIRCACHECLEAN
 164. file:///tmp/html-rhkMLA#FCCACHECREATETAGFILE
 165. file:///tmp/html-rhkMLA#FCSTRSETCREATE
 166. file:///tmp/html-rhkMLA#FCSTRSETMEMBER
 167. file:///tmp/html-rhkMLA#FCSTRSETEQUAL
 168. file:///tmp/html-rhkMLA#FCSTRSETADD
 169. file:///tmp/html-rhkMLA#FCSTRSETADDFILENAME
 170. file:///tmp/html-rhkMLA#FCSTRSETDEL
 171. file:///tmp/html-rhkMLA#FCSTRSETDESTROY
 172. file:///tmp/html-rhkMLA#FCSTRLISTCREATE
 173. file:///tmp/html-rhkMLA#FCSTRLISTFIRST
 174. file:///tmp/html-rhkMLA#FCSTRLISTNEXT
 175. file:///tmp/html-rhkMLA#FCSTRLISTDONE
 176. file:///tmp/html-rhkMLA#FCUTF8TOUCS4
 177. file:///tmp/html-rhkMLA#FCUCS4TOUTF8
 178. file:///tmp/html-rhkMLA#FCUTF8LEN
 179. file:///tmp/html-rhkMLA#FCUTF16TOUCS4
 180. file:///tmp/html-rhkMLA#FCUTF16LEN
 181. file:///tmp/html-rhkMLA#FCISLOWER
 182. file:///tmp/html-rhkMLA#FCISUPPER
 183. file:///tmp/html-rhkMLA#FCTOLOWER
 184. file:///tmp/html-rhkMLA#FCSTRCOPY
 185. file:///tmp/html-rhkMLA#FCSTRDOWNCASE
 186. file:///tmp/html-rhkMLA#FCSTRCOPYFILENAME
 187. file:///tmp/html-rhkMLA#FCSTRCMP
 188. file:///tmp/html-rhkMLA#FCSTRCMPIGNORECASE
 189. file:///tmp/html-rhkMLA#FCSTRSTR
 190. file:///tmp/html-rhkMLA#FCSTRSTRIGNORECASE
 191. file:///tmp/html-rhkMLA#FCSTRPLUS
 192. file:///tmp/html-rhkMLA#FCSTRFREE
 193. file:///tmp/html-rhkMLA#FCSTRDIRNAME
 194. file:///tmp/html-rhkMLA#FCSTRBASENAME
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
                Fontconfig Developers Reference, Version 2.10.91
d127 1
a127 1
    rasterizer     FC_RASTERIZER          String  Which rasterizer is in use
d147 2
d152 4
a454 4
Version

   Fontconfig version 2.10.91

a472 4
Version

   Fontconfig version 2.10.91

a492 4
Version

   Fontconfig version 2.10.91

a512 4
Version

   Fontconfig version 2.10.91

a529 4
Version

   Fontconfig version 2.10.91

a550 4
Version

   Fontconfig version 2.10.91

a570 4
Version

   Fontconfig version 2.10.91

a641 4
Version

   Fontconfig version 2.10.91

a659 4
Version

   Fontconfig version 2.10.91

a677 4
Version

   Fontconfig version 2.10.91

a695 4
Version

   Fontconfig version 2.10.91

a712 4
Version

   Fontconfig version 2.10.91

a731 4
Version

   Fontconfig version 2.10.91

a749 4
Version

   Fontconfig version 2.10.91

a767 4
Version

   Fontconfig version 2.10.91

a789 4
Version

   Fontconfig version 2.10.91

a808 4
Version

   Fontconfig version 2.10.91

a849 4
Version

   Fontconfig version 2.10.91

a869 4
Version

   Fontconfig version 2.10.91

a914 4
Version

   Fontconfig version 2.10.91

a956 4
Version

   Fontconfig version 2.10.91

a974 4
Version

   Fontconfig version 2.10.91

a994 4
Version

   Fontconfig version 2.10.91

a1013 4
Version

   Fontconfig version 2.10.91

a1038 4
Version

   Fontconfig version 2.10.91

a1056 4
Version

   Fontconfig version 2.10.91

a1075 4
Version

   Fontconfig version 2.10.91

d1283 1
a1283 1
Version
d1285 1
a1285 1
   Fontconfig version 2.10.91
a1328 4
Version

   Fontconfig version 2.10.91

a1346 4
Version

   Fontconfig version 2.10.91

a1366 4
Version

   Fontconfig version 2.10.91

a1387 4
Version

   Fontconfig version 2.10.91

a1410 4
Version

   Fontconfig version 2.10.91

a1430 4
Version

   Fontconfig version 2.10.91

a1462 4
Version

   Fontconfig version 2.10.91

a1481 4
Version

   Fontconfig version 2.10.91

a1516 4
Version

   Fontconfig version 2.10.91

a1535 4
Version

   Fontconfig version 2.10.91

a1552 4
Version

   Fontconfig version 2.10.91

a1577 4
Version

   Fontconfig version 2.10.91

a1620 4
Version

   Fontconfig version 2.10.91

a1641 4
Version

   Fontconfig version 2.10.91

a1667 4
Version

   Fontconfig version 2.10.91

a1687 4
Version

   Fontconfig version 2.10.91

a1707 4
Version

   Fontconfig version 2.10.91

a1744 4
Version

   Fontconfig version 2.10.91

a1762 4
Version

   Fontconfig version 2.10.91

a1781 4
Version

   Fontconfig version 2.10.91

a1800 4
Version

   Fontconfig version 2.10.91

a1869 4
Version

   Fontconfig version 2.10.91

a1887 4
Version

   Fontconfig version 2.10.91

a1906 4
Version

   Fontconfig version 2.10.91

d1926 1
a1926 1
Version
d1928 1
a1928 1
   Fontconfig version 2.10.91
a1947 4
Version

   Fontconfig version 2.10.91

a1964 4
Version

   Fontconfig version 2.10.91

a1981 4
Version

   Fontconfig version 2.10.91

a1998 4
Version

   Fontconfig version 2.10.91

a2015 4
Version

   Fontconfig version 2.10.91

a2035 4
Version

   Fontconfig version 2.10.91

a2052 4
Version

   Fontconfig version 2.10.91

a2069 4
Version

   Fontconfig version 2.10.91

a2086 4
Version

   Fontconfig version 2.10.91

a2103 4
Version

   Fontconfig version 2.10.91

a2120 4
Version

   Fontconfig version 2.10.91

d2137 14
a2150 6
   Builds an array of bits marking the first page of Unicode coverage of a.
   Returns the base of the array. next contains the next page in the font.

Version

   Fontconfig version 2.10.91
d2168 5
a2172 6
   Builds an array of bits marking the Unicode coverage of a for page *next.
   Returns the base of the array. next contains the next page in the font.

Version

   Fontconfig version 2.10.91
a2193 4
Version

   Fontconfig version 2.10.91

a2210 4
Version

   Fontconfig version 2.10.91

d2243 3
a2245 1
   [86]FcGetLangsÂ --Â Get list of languages
d2247 1
a2247 1
   [87]FcLangNormalizeÂ --Â Normalize the language string
d2249 1
a2249 1
   [88]FcLangGetCharSetÂ --Â Get character map for a language
a2273 4
Version

   Fontconfig version 2.10.91

a2291 4
Version

   Fontconfig version 2.10.91

a2309 4
Version

   Fontconfig version 2.10.91

a2327 4
Version

   Fontconfig version 2.10.91

d2347 1
a2347 1
Version
d2349 1
a2349 1
   Fontconfig version 2.10.91
d2368 1
a2368 1
Version
d2370 1
a2370 1
   Fontconfig version 2.10.91
d2391 1
a2391 1
Version
d2393 1
a2393 1
   Fontconfig version 2.10.91
a2416 4
Version

   Fontconfig version 2.10.91

a2435 4
Version

   Fontconfig version 2.10.91

a2453 4
Version

   Fontconfig version 2.10.91

a2473 4
Version

   Fontconfig version 2.10.91

a2494 4
Version

   Fontconfig version 2.10.91

d2506 1
a2506 1
   FcStrSet * FcGetDefaultLangs(voidls);
d2515 18
a2532 1
Version
d2534 1
a2534 1
   Fontconfig version 2.10.91
a2552 4
Version

   Fontconfig version 2.10.91

d2570 1
a2570 1
Version
d2572 1
a2572 1
   Fontconfig version 2.10.91
a2590 4
Version

   Fontconfig version 2.10.91

d2597 1
a2597 1
   [89]FcMatrixInitÂ --Â initialize an FcMatrix structure
d2599 1
a2599 1
   [90]FcMatrixCopyÂ --Â Copy a matrix
d2601 1
a2601 1
   [91]FcMatrixEqualÂ --Â Compare two matrices
d2603 1
a2603 1
   [92]FcMatrixMultiplyÂ --Â Multiply matrices
d2605 1
a2605 1
   [93]FcMatrixRotateÂ --Â Rotate a matrix
d2607 1
a2607 1
   [94]FcMatrixScaleÂ --Â Scale a matrix
d2609 1
a2609 1
   [95]FcMatrixShearÂ --Â Shear a matrix
a2629 4
Version

   Fontconfig version 2.10.91

a2646 4
Version

   Fontconfig version 2.10.91

a2664 4
Version

   Fontconfig version 2.10.91

a2683 4
Version

   Fontconfig version 2.10.91

a2704 4
Version

   Fontconfig version 2.10.91

a2725 4
Version

   Fontconfig version 2.10.91

a2746 4
Version

   Fontconfig version 2.10.91

d2753 1
a2753 1
   [96]FcConfigCreateÂ --Â Create a configuration
d2755 1
a2755 1
   [97]FcConfigReferenceÂ --Â Increment config reference count
d2757 1
a2757 1
   [98]FcConfigDestroyÂ --Â Destroy a configuration
d2759 1
a2759 1
   [99]FcConfigSetCurrentÂ --Â Set configuration as default
d2761 1
a2761 1
   [100]FcConfigGetCurrentÂ --Â Return current configuration
d2763 1
a2763 1
   [101]FcConfigUptoDateÂ --Â Check timestamps on config files
d2765 1
a2765 1
   [102]FcConfigHomeÂ --Â return the current home directory.
d2767 1
a2767 1
   [103]FcConfigEnableHomeÂ --Â controls use of the home directory.
d2769 1
a2769 1
   [104]FcConfigBuildFontsÂ --Â Build font database
d2771 1
a2771 1
   [105]FcConfigGetConfigDirsÂ --Â Get config directories
d2773 1
a2773 1
   [106]FcConfigGetFontDirsÂ --Â Get font directories
d2775 1
a2775 1
   [107]FcConfigGetConfigFilesÂ --Â Get config files
d2777 1
a2777 1
   [108]FcConfigGetCacheÂ --Â DEPRECATED used to return per-user cache filename
d2779 1
a2779 1
   [109]FcConfigGetCacheDirsÂ --Â return the list of directories searched for
d2782 3
a2784 1
   [110]FcConfigGetFontsÂ --Â Get config font set
d2786 1
a2786 1
   [111]FcConfigGetBlanksÂ --Â Get config blanks
d2788 1
a2788 1
   [112]FcConfigGetRescanIntervalÂ --Â Get config rescan interval
d2790 1
a2790 1
   [113]FcConfigSetRescanIntervalÂ --Â Set config rescan interval
d2792 1
a2792 1
   [114]FcConfigAppFontAddFileÂ --Â Add font file to font database
d2794 1
a2794 1
   [115]FcConfigAppFontAddDirÂ --Â Add fonts from directory to font database
d2796 1
a2796 1
   [116]FcConfigAppFontClearÂ --Â Remove all app fonts from font database
d2798 1
a2798 1
   [117]FcConfigSubstituteWithPatÂ --Â Execute substitutions
d2800 1
a2800 1
   [118]FcConfigSubstituteÂ --Â Execute substitutions
d2802 1
a2802 1
   [119]FcFontMatchÂ --Â Return best font
d2804 1
a2804 1
   [120]FcFontSortÂ --Â Return list of matching fonts
d2806 1
a2806 1
   [121]FcFontRenderPrepareÂ --Â Prepare pattern for loading font file
d2808 1
a2808 1
   [122]FcFontListÂ --Â List fonts
d2810 1
a2810 1
   [123]FcConfigFilenameÂ --Â Find a config file
d2812 3
a2814 1
   [124]FcConfigParseAndLoadÂ --Â load a configuration file
a2836 4
Version

   Fontconfig version 2.10.91

a2857 4
Version

   Fontconfig version 2.10.91

a2877 4
Version

   Fontconfig version 2.10.91

a2895 4
Version

   Fontconfig version 2.10.91

a2912 4
Version

   Fontconfig version 2.10.91

a2931 4
Version

   Fontconfig version 2.10.91

a2949 4
Version

   Fontconfig version 2.10.91

a2970 4
Version

   Fontconfig version 2.10.91

a2990 4
Version

   Fontconfig version 2.10.91

a3009 4
Version

   Fontconfig version 2.10.91

a3028 4
Version

   Fontconfig version 2.10.91

a3046 4
Version

   Fontconfig version 2.10.91

a3064 4
Version

   Fontconfig version 2.10.91

a3085 4
Version

   Fontconfig version 2.10.91

a3104 4
Version

   Fontconfig version 2.10.91

a3124 4
Version

   Fontconfig version 2.10.91

a3145 4
Version

   Fontconfig version 2.10.91

a3165 4
Version

   Fontconfig version 2.10.91

a3184 4
Version

   Fontconfig version 2.10.91

a3204 4
Version

   Fontconfig version 2.10.91

a3222 4
Version

   Fontconfig version 2.10.91

a3246 4
Version

   Fontconfig version 2.10.91

a3267 4
Version

   Fontconfig version 2.10.91

a3288 4
Version

   Fontconfig version 2.10.91

a3319 4
Version

   Fontconfig version 2.10.91

a3340 4
Version

   Fontconfig version 2.10.91

a3360 4
Version

   Fontconfig version 2.10.91

a3387 4
Version

   Fontconfig version 2.10.91

d3412 30
a3441 1
Version
d3443 13
a3455 1
   Fontconfig version 2.10.91
d3463 1
a3463 1
   [125]FcNameRegisterObjectTypesÂ --Â Register object types
d3465 1
a3465 1
   [126]FcNameUnregisterObjectTypesÂ --Â Unregister object types
d3467 1
a3467 1
   [127]FcNameGetObjectTypeÂ --Â Lookup an object type
a3488 4
Version

   Fontconfig version 2.10.91

a3505 4
Version

   Fontconfig version 2.10.91

a3522 4
Version

   Fontconfig version 2.10.91

d3529 1
a3529 1
   [128]FcNameRegisterConstantsÂ --Â Register symbolic constants
d3531 1
a3531 1
   [129]FcNameUnregisterConstantsÂ --Â Unregister symbolic constants
d3533 1
a3533 1
   [130]FcNameGetConstantÂ --Â Lookup symbolic constant
d3535 1
a3535 1
   [131]FcNameConstantÂ --Â Get the value for a symbolic constant
a3555 4
Version

   Fontconfig version 2.10.91

a3572 4
Version

   Fontconfig version 2.10.91

a3589 4
Version

   Fontconfig version 2.10.91

a3607 4
Version

   Fontconfig version 2.10.91

d3614 1
a3614 1
   [132]FcBlanksCreateÂ --Â Create an FcBlanks
d3616 1
a3616 1
   [133]FcBlanksDestroyÂ --Â Destroy and FcBlanks
d3618 1
a3618 1
   [134]FcBlanksAddÂ --Â Add a character to an FcBlanks
d3620 1
a3620 1
   [135]FcBlanksIsMemberÂ --Â Query membership in an FcBlanks
a3644 4
Version

   Fontconfig version 2.10.91

a3661 4
Version

   Fontconfig version 2.10.91

a3679 4
Version

   Fontconfig version 2.10.91

a3697 4
Version

   Fontconfig version 2.10.91

d3704 1
a3704 1
   [136]FcAtomicCreateÂ --Â create an FcAtomic object
d3706 1
a3706 1
   [137]FcAtomicLockÂ --Â lock a file
d3708 1
a3708 1
   [138]FcAtomicNewFileÂ --Â return new temporary file name
d3710 1
a3710 1
   [139]FcAtomicOrigFileÂ --Â return original file name
d3712 1
a3712 1
   [140]FcAtomicReplaceOrigÂ --Â replace original with new
d3714 1
a3714 1
   [141]FcAtomicDeleteNewÂ --Â delete new file
d3716 1
a3716 1
   [142]FcAtomicUnlockÂ --Â unlock a file
d3718 1
a3718 1
   [143]FcAtomicDestroyÂ --Â destroy an FcAtomic object
a3745 4
Version

   Fontconfig version 2.10.91

a3763 4
Version

   Fontconfig version 2.10.91

a3781 4
Version

   Fontconfig version 2.10.91

a3798 4
Version

   Fontconfig version 2.10.91

a3817 4
Version

   Fontconfig version 2.10.91

a3834 4
Version

   Fontconfig version 2.10.91

a3851 4
Version

   Fontconfig version 2.10.91

a3868 4
Version

   Fontconfig version 2.10.91

d3875 3
a3877 1
   [144]FcFileScanÂ --Â scan a font file
d3879 1
a3879 1
   [145]FcFileIsDirÂ --Â check whether a file is a directory
d3881 1
a3881 1
   [146]FcDirScanÂ --Â scan a font directory without caching it
d3883 1
a3883 1
   [147]FcDirSaveÂ --Â DEPRECATED: formerly used to save a directory cache
d3885 1
a3885 1
   [148]FcDirCacheUnlinkÂ --Â Remove all caches related to dir
d3887 1
a3887 1
   [149]FcDirCacheValidÂ --Â check directory cache
d3889 1
a3889 1
   [150]FcDirCacheLoadÂ --Â load a directory cache
d3891 1
a3891 1
   [151]FcDirCacheReadÂ --Â read or construct a directory cache
d3893 1
a3893 1
   [152]FcDirCacheLoadFileÂ --Â load a cache file
d3895 1
a3895 1
   [153]FcDirCacheUnloadÂ --Â unload a cache file
a3926 4
Version

   Fontconfig version 2.10.91

a3943 4
Version

   Fontconfig version 2.10.91

a3965 4
Version

   Fontconfig version 2.10.91

a3985 4
Version

   Fontconfig version 2.10.91

a4004 4
Version

   Fontconfig version 2.10.91

a4022 4
Version

   Fontconfig version 2.10.91

d4043 10
a4052 1
Version
d4054 10
a4063 1
   Fontconfig version 2.10.91
a4084 4
Version

   Fontconfig version 2.10.91

a4103 4
Version

   Fontconfig version 2.10.91

a4121 4
Version

   Fontconfig version 2.10.91

d4128 1
a4128 1
   [154]FcCacheDirÂ --Â Return directory of cache
d4130 1
a4130 1
   [155]FcCacheCopySetÂ --Â Returns a copy of the fontset from cache
d4132 1
a4132 1
   [156]FcCacheSubdirÂ --Â Return the i'th subdirectory.
d4134 1
a4134 1
   [157]FcCacheNumSubdirÂ --Â Return the number of subdirectories in cache.
d4136 1
a4136 1
   [158]FcCacheNumFontÂ --Â Returns the number of fonts in cache.
d4138 1
a4138 1
   [159]FcDirCacheCleanÂ --Â This tries to clean up the cache directory of
d4142 1
a4142 1
   [160]FcCacheCreateTagFileÂ --Â Create CACHEDIR.TAG at cache directory.
a4164 4
Version

   Fontconfig version 2.10.91

a4182 4
Version

   Fontconfig version 2.10.91

a4201 4
Version

   Fontconfig version 2.10.91

a4218 4
Version

   Fontconfig version 2.10.91

a4236 4
Version

   Fontconfig version 2.10.91

d4256 1
a4256 1
Version
d4258 1
a4258 1
   Fontconfig version 2.10.91
d4278 1
a4278 1
Version
d4280 1
a4280 1
   Fontconfig version 2.10.91
d4288 3
a4290 1
   [161]FcStrSetCreateÂ --Â create a string set
d4292 1
a4292 1
   [162]FcStrSetMemberÂ --Â check set for membership
d4294 1
a4294 1
   [163]FcStrSetEqualÂ --Â check sets for equality
d4296 1
a4296 1
   [164]FcStrSetAddÂ --Â add to a string set
d4298 1
a4298 1
   [165]FcStrSetAddFilenameÂ --Â add a filename to a string set
d4300 1
a4300 1
   [166]FcStrSetDelÂ --Â delete from a string set
d4302 1
a4302 1
   [167]FcStrSetDestroyÂ --Â destroy a string set
d4304 1
a4304 1
   [168]FcStrListCreateÂ --Â create a string iterator
d4306 1
a4306 1
   [169]FcStrListNextÂ --Â get next string in iteration
d4308 1
a4308 1
   [170]FcStrListDoneÂ --Â destroy a string iterator
a4329 4
Version

   Fontconfig version 2.10.91

a4346 4
Version

   Fontconfig version 2.10.91

a4364 4
Version

   Fontconfig version 2.10.91

a4381 4
Version

   Fontconfig version 2.10.91

a4400 4
Version

   Fontconfig version 2.10.91

a4417 4
Version

   Fontconfig version 2.10.91

a4434 4
Version

   Fontconfig version 2.10.91

d4452 5
a4456 1
Version
d4458 14
a4471 1
   Fontconfig version 2.10.91
d4488 1
a4488 5
   Returns the next string in set.

Version

   Fontconfig version 2.10.91
a4506 4
Version

   Fontconfig version 2.10.91

d4513 1
a4513 1
   [171]FcUtf8ToUcs4Â --Â convert UTF-8 to UCS4
d4515 1
a4515 1
   [172]FcUcs4ToUtf8Â --Â convert UCS4 to UTF-8
d4517 1
a4517 1
   [173]FcUtf8LenÂ --Â count UTF-8 encoded chars
d4519 1
a4519 1
   [174]FcUtf16ToUcs4Â --Â convert UTF-16 to UCS4
d4521 1
a4521 1
   [175]FcUtf16LenÂ --Â count UTF-16 encoded chars
d4523 1
a4523 1
   [176]FcIsLowerÂ --Â check for lower case ASCII character
d4525 1
a4525 1
   [177]FcIsUpperÂ --Â check for upper case ASCII character
d4527 1
a4527 1
   [178]FcToLowerÂ --Â convert upper case ASCII to lower case
d4529 1
a4529 1
   [179]FcStrCopyÂ --Â duplicate a string
d4531 1
a4531 1
   [180]FcStrDowncaseÂ --Â create a lower case translation of a string
d4533 1
a4533 1
   [181]FcStrCopyFilenameÂ --Â create a complete path from a filename
d4535 1
a4535 1
   [182]FcStrCmpÂ --Â compare UTF-8 strings
d4537 1
a4537 1
   [183]FcStrCmpIgnoreCaseÂ --Â compare UTF-8 strings ignoring case
d4539 1
a4539 1
   [184]FcStrStrÂ --Â locate UTF-8 substring
d4541 1
a4541 1
   [185]FcStrStrIgnoreCaseÂ --Â locate UTF-8 substring ignoring ASCII case
d4543 1
a4543 1
   [186]FcStrPlusÂ --Â concatenate two strings
d4545 1
a4545 1
   [187]FcStrFreeÂ --Â free a string
d4547 1
a4547 1
   [188]FcStrDirnameÂ --Â directory part of filename
d4549 1
a4549 1
   [189]FcStrBasenameÂ --Â last component of filename
a4572 4
Version

   Fontconfig version 2.10.91

a4590 4
Version

   Fontconfig version 2.10.91

a4610 4
Version

   Fontconfig version 2.10.91

a4629 4
Version

   Fontconfig version 2.10.91

a4651 4
Version

   Fontconfig version 2.10.91

a4668 4
Version

   Fontconfig version 2.10.91

a4685 4
Version

   Fontconfig version 2.10.91

a4703 4
Version

   Fontconfig version 2.10.91

a4721 4
Version

   Fontconfig version 2.10.91

a4739 4
Version

   Fontconfig version 2.10.91

a4762 4
Version

   Fontconfig version 2.10.91

a4779 4
Version

   Fontconfig version 2.10.91

a4797 4
Version

   Fontconfig version 2.10.91

a4815 4
Version

   Fontconfig version 2.10.91

a4834 4
Version

   Fontconfig version 2.10.91

a4852 4
Version

   Fontconfig version 2.10.91

a4870 4
Version

   Fontconfig version 2.10.91

a4888 4
Version

   Fontconfig version 2.10.91

a4907 4
Version

   Fontconfig version 2.10.91

d4911 194
a5104 189
   1. file:///tmp/html-l8lfPm#AEN16
   2. file:///tmp/html-l8lfPm#AEN19
   3. file:///tmp/html-l8lfPm#AEN31
   4. file:///tmp/html-l8lfPm#AEN102
   5. file:///tmp/html-l8lfPm#FCINITLOADCONFIG
   6. file:///tmp/html-l8lfPm#FCINITLOADCONFIGANDFONTS
   7. file:///tmp/html-l8lfPm#FCINIT
   8. file:///tmp/html-l8lfPm#FCFINI
   9. file:///tmp/html-l8lfPm#FCGETVERSION
  10. file:///tmp/html-l8lfPm#FCINITREINITIALIZE
  11. file:///tmp/html-l8lfPm#FCINITBRINGUPTODATE
  12. file:///tmp/html-l8lfPm#FCPATTERNCREATE
  13. file:///tmp/html-l8lfPm#FCPATTERNDUPLICATE
  14. file:///tmp/html-l8lfPm#FCPATTERNREFERENCE
  15. file:///tmp/html-l8lfPm#FCPATTERNDESTROY
  16. file:///tmp/html-l8lfPm#FCPATTERNEQUAL
  17. file:///tmp/html-l8lfPm#FCPATTERNEQUALSUBSET
  18. file:///tmp/html-l8lfPm#FCPATTERNFILTER
  19. file:///tmp/html-l8lfPm#FCPATTERNHASH
  20. file:///tmp/html-l8lfPm#FCPATTERNADD
  21. file:///tmp/html-l8lfPm#FCPATTERNADDWEAK
  22. file:///tmp/html-l8lfPm#FCPATTERNADD-TYPE
  23. file:///tmp/html-l8lfPm#FCPATTERNGET
  24. file:///tmp/html-l8lfPm#FCPATTERNGET-TYPE
  25. file:///tmp/html-l8lfPm#FCPATTERNBUILD
  26. file:///tmp/html-l8lfPm#FCPATTERNDEL
  27. file:///tmp/html-l8lfPm#FCPATTERNREMOVE
  28. file:///tmp/html-l8lfPm#FCPATTERNPRINT
  29. file:///tmp/html-l8lfPm#FCDEFAULTSUBSTITUTE
  30. file:///tmp/html-l8lfPm#FCNAMEPARSE
  31. file:///tmp/html-l8lfPm#FCNAMEUNPARSE
  32. file:///tmp/html-l8lfPm#FCPATTERNFORMAT
  33. file:///tmp/html-l8lfPm#FCFONTSETCREATE
  34. file:///tmp/html-l8lfPm#FCFONTSETDESTROY
  35. file:///tmp/html-l8lfPm#FCFONTSETADD
  36. file:///tmp/html-l8lfPm#FCFONTSETLIST
  37. file:///tmp/html-l8lfPm#FCFONTSETMATCH
  38. file:///tmp/html-l8lfPm#FCFONTSETPRINT
  39. file:///tmp/html-l8lfPm#FCFONTSETSORT
  40. file:///tmp/html-l8lfPm#FCFONTSETSORTDESTROY
  41. file:///tmp/html-l8lfPm#FCOBJECTSETCREATE
  42. file:///tmp/html-l8lfPm#FCOBJECTSETADD
  43. file:///tmp/html-l8lfPm#FCOBJECTSETDESTROY
  44. file:///tmp/html-l8lfPm#FCOBJECTSETBUILD
  45. file:///tmp/html-l8lfPm#FCFREETYPECHARINDEX
  46. file:///tmp/html-l8lfPm#FCFREETYPECHARSET
  47. file:///tmp/html-l8lfPm#FCFREETYPECHARSETANDSPACING
  48. file:///tmp/html-l8lfPm#FCFREETYPEQUERY
  49. file:///tmp/html-l8lfPm#FCFREETYPEQUERYFACE
  50. file:///tmp/html-l8lfPm#FCVALUEDESTROY
  51. file:///tmp/html-l8lfPm#FCVALUESAVE
  52. file:///tmp/html-l8lfPm#FCVALUEPRINT
  53. file:///tmp/html-l8lfPm#FCVALUEEQUAL
  54. file:///tmp/html-l8lfPm#FCCHARSETCREATE
  55. file:///tmp/html-l8lfPm#FCCHARSETDESTROY
  56. file:///tmp/html-l8lfPm#FCCHARSETADDCHAR
  57. file:///tmp/html-l8lfPm#FCCHARSETDELCHAR
  58. file:///tmp/html-l8lfPm#FCCHARSETCOPY
  59. file:///tmp/html-l8lfPm#FCCHARSETEQUAL
  60. file:///tmp/html-l8lfPm#FCCHARSETINTERSECT
  61. file:///tmp/html-l8lfPm#FCCHARSETUNION
  62. file:///tmp/html-l8lfPm#FCCHARSETSUBTRACT
  63. file:///tmp/html-l8lfPm#FCCHARSETMERGE
  64. file:///tmp/html-l8lfPm#FCCHARSETHASCHAR
  65. file:///tmp/html-l8lfPm#FCCHARSETCOUNT
  66. file:///tmp/html-l8lfPm#FCCHARSETINTERSECTCOUNT
  67. file:///tmp/html-l8lfPm#FCCHARSETSUBTRACTCOUNT
  68. file:///tmp/html-l8lfPm#FCCHARSETISSUBSET
  69. file:///tmp/html-l8lfPm#FCCHARSETFIRSTPAGE
  70. file:///tmp/html-l8lfPm#FCCHARSETNEXTPAGE
  71. file:///tmp/html-l8lfPm#FCCHARSETCOVERAGE
  72. file:///tmp/html-l8lfPm#FCCHARSETNEW
  73. file:///tmp/html-l8lfPm#FCLANGSETCREATE
  74. file:///tmp/html-l8lfPm#FCLANGSETDESTROY
  75. file:///tmp/html-l8lfPm#FCLANGSETCOPY
  76. file:///tmp/html-l8lfPm#FCLANGSETADD
  77. file:///tmp/html-l8lfPm#FCLANGSETDEL
  78. file:///tmp/html-l8lfPm#FCLANGSETUNION
  79. file:///tmp/html-l8lfPm#FCLANGSETSUBTRACT
  80. file:///tmp/html-l8lfPm#FCLANGSETCOMPARE
  81. file:///tmp/html-l8lfPm#FCLANGSETCONTAINS
  82. file:///tmp/html-l8lfPm#FCLANGSETEQUAL
  83. file:///tmp/html-l8lfPm#FCLANGSETHASH
  84. file:///tmp/html-l8lfPm#FCLANGSETHASLANG
  85. file:///tmp/html-l8lfPm#FCGETDEFAULTLANGS
  86. file:///tmp/html-l8lfPm#FCGETLANGS
  87. file:///tmp/html-l8lfPm#FCLANGNORMALIZE
  88. file:///tmp/html-l8lfPm#FCLANGGETCHARSET
  89. file:///tmp/html-l8lfPm#FCMATRIXINIT
  90. file:///tmp/html-l8lfPm#FCMATRIXCOPY
  91. file:///tmp/html-l8lfPm#FCMATRIXEQUAL
  92. file:///tmp/html-l8lfPm#FCMATRIXMULTIPLY
  93. file:///tmp/html-l8lfPm#FCMATRIXROTATE
  94. file:///tmp/html-l8lfPm#FCMATRIXSCALE
  95. file:///tmp/html-l8lfPm#FCMATRIXSHEAR
  96. file:///tmp/html-l8lfPm#FCCONFIGCREATE
  97. file:///tmp/html-l8lfPm#FCCONFIGREFERENCE
  98. file:///tmp/html-l8lfPm#FCCONFIGDESTROY
  99. file:///tmp/html-l8lfPm#FCCONFIGSETCURRENT
 100. file:///tmp/html-l8lfPm#FCCONFIGGETCURRENT
 101. file:///tmp/html-l8lfPm#FCCONFIGUPTODATE
 102. file:///tmp/html-l8lfPm#FCCONFIGHOME
 103. file:///tmp/html-l8lfPm#FCCONFIGENABLEHOME
 104. file:///tmp/html-l8lfPm#FCCONFIGBUILDFONTS
 105. file:///tmp/html-l8lfPm#FCCONFIGGETCONFIGDIRS
 106. file:///tmp/html-l8lfPm#FCCONFIGGETFONTDIRS
 107. file:///tmp/html-l8lfPm#FCCONFIGGETCONFIGFILES
 108. file:///tmp/html-l8lfPm#FCCONFIGGETCACHE
 109. file:///tmp/html-l8lfPm#FCCONFIGGETCACHEDIRS
 110. file:///tmp/html-l8lfPm#FCCONFIGGETFONTS
 111. file:///tmp/html-l8lfPm#FCCONFIGGETBLANKS
 112. file:///tmp/html-l8lfPm#FCCONFIGGETRESCANINTERVAL
 113. file:///tmp/html-l8lfPm#FCCONFIGSETRESCANINTERVAL
 114. file:///tmp/html-l8lfPm#FCCONFIGAPPFONTADDFILE
 115. file:///tmp/html-l8lfPm#FCCONFIGAPPFONTADDDIR
 116. file:///tmp/html-l8lfPm#FCCONFIGAPPFONTCLEAR
 117. file:///tmp/html-l8lfPm#FCCONFIGSUBSTITUTEWITHPAT
 118. file:///tmp/html-l8lfPm#FCCONFIGSUBSTITUTE
 119. file:///tmp/html-l8lfPm#FCFONTMATCH
 120. file:///tmp/html-l8lfPm#FCFONTSORT
 121. file:///tmp/html-l8lfPm#FCFONTRENDERPREPARE
 122. file:///tmp/html-l8lfPm#FCFONTLIST
 123. file:///tmp/html-l8lfPm#FCCONFIGFILENAME
 124. file:///tmp/html-l8lfPm#FCCONFIGPARSEANDLOAD
 125. file:///tmp/html-l8lfPm#FCNAMEREGISTEROBJECTTYPES
 126. file:///tmp/html-l8lfPm#FCNAMEUNREGISTEROBJECTTYPES
 127. file:///tmp/html-l8lfPm#FCNAMEGETOBJECTTYPE
 128. file:///tmp/html-l8lfPm#FCNAMEREGISTERCONSTANTS
 129. file:///tmp/html-l8lfPm#FCNAMEUNREGISTERCONSTANTS
 130. file:///tmp/html-l8lfPm#FCNAMEGETCONSTANT
 131. file:///tmp/html-l8lfPm#FCNAMECONSTANT
 132. file:///tmp/html-l8lfPm#FCBLANKSCREATE
 133. file:///tmp/html-l8lfPm#FCBLANKSDESTROY
 134. file:///tmp/html-l8lfPm#FCBLANKSADD
 135. file:///tmp/html-l8lfPm#FCBLANKSISMEMBER
 136. file:///tmp/html-l8lfPm#FCATOMICCREATE
 137. file:///tmp/html-l8lfPm#FCATOMICLOCK
 138. file:///tmp/html-l8lfPm#FCATOMICNEWFILE
 139. file:///tmp/html-l8lfPm#FCATOMICORIGFILE
 140. file:///tmp/html-l8lfPm#FCATOMICREPLACEORIG
 141. file:///tmp/html-l8lfPm#FCATOMICDELETENEW
 142. file:///tmp/html-l8lfPm#FCATOMICUNLOCK
 143. file:///tmp/html-l8lfPm#FCATOMICDESTROY
 144. file:///tmp/html-l8lfPm#FCFILESCAN
 145. file:///tmp/html-l8lfPm#FCFILEISDIR
 146. file:///tmp/html-l8lfPm#FCDIRSCAN
 147. file:///tmp/html-l8lfPm#FCDIRSAVE
 148. file:///tmp/html-l8lfPm#FCDIRCACHEUNLINK
 149. file:///tmp/html-l8lfPm#FCDIRCACHEVALID
 150. file:///tmp/html-l8lfPm#FCDIRCACHELOAD
 151. file:///tmp/html-l8lfPm#FCDIRCACHEREAD
 152. file:///tmp/html-l8lfPm#FCDIRCACHELOADFILE
 153. file:///tmp/html-l8lfPm#FCDIRCACHEUNLOAD
 154. file:///tmp/html-l8lfPm#FCCACHEDIR
 155. file:///tmp/html-l8lfPm#FCCACHECOPYSET
 156. file:///tmp/html-l8lfPm#FCCACHESUBDIR
 157. file:///tmp/html-l8lfPm#FCCACHENUMSUBDIR
 158. file:///tmp/html-l8lfPm#FCCACHENUMFONT
 159. file:///tmp/html-l8lfPm#FCDIRCACHECLEAN
 160. file:///tmp/html-l8lfPm#FCCACHECREATETAGFILE
 161. file:///tmp/html-l8lfPm#FCSTRSETCREATE
 162. file:///tmp/html-l8lfPm#FCSTRSETMEMBER
 163. file:///tmp/html-l8lfPm#FCSTRSETEQUAL
 164. file:///tmp/html-l8lfPm#FCSTRSETADD
 165. file:///tmp/html-l8lfPm#FCSTRSETADDFILENAME
 166. file:///tmp/html-l8lfPm#FCSTRSETDEL
 167. file:///tmp/html-l8lfPm#FCSTRSETDESTROY
 168. file:///tmp/html-l8lfPm#FCSTRLISTCREATE
 169. file:///tmp/html-l8lfPm#FCSTRLISTNEXT
 170. file:///tmp/html-l8lfPm#FCSTRLISTDONE
 171. file:///tmp/html-l8lfPm#FCUTF8TOUCS4
 172. file:///tmp/html-l8lfPm#FCUCS4TOUTF8
 173. file:///tmp/html-l8lfPm#FCUTF8LEN
 174. file:///tmp/html-l8lfPm#FCUTF16TOUCS4
 175. file:///tmp/html-l8lfPm#FCUTF16LEN
 176. file:///tmp/html-l8lfPm#FCISLOWER
 177. file:///tmp/html-l8lfPm#FCISUPPER
 178. file:///tmp/html-l8lfPm#FCTOLOWER
 179. file:///tmp/html-l8lfPm#FCSTRCOPY
 180. file:///tmp/html-l8lfPm#FCSTRDOWNCASE
 181. file:///tmp/html-l8lfPm#FCSTRCOPYFILENAME
 182. file:///tmp/html-l8lfPm#FCSTRCMP
 183. file:///tmp/html-l8lfPm#FCSTRCMPIGNORECASE
 184. file:///tmp/html-l8lfPm#FCSTRSTR
 185. file:///tmp/html-l8lfPm#FCSTRSTRIGNORECASE
 186. file:///tmp/html-l8lfPm#FCSTRPLUS
 187. file:///tmp/html-l8lfPm#FCSTRFREE
 188. file:///tmp/html-l8lfPm#FCSTRDIRNAME
 189. file:///tmp/html-l8lfPm#FCSTRBASENAME
@


1.1.1.1
log
@Import fontconfig 2.10.91 in a separate directory 
to make room for a BSD make build system.
@
text
@@
